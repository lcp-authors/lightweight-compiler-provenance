
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011064 <.init>:
   11064:	push	{r3, lr}
   11068:	bl	1211c <__assert_fail@plt+0xd38>
   1106c:	pop	{r3, pc}

Disassembly of section .plt:

00011070 <fdopen@plt-0x14>:
   11070:	push	{lr}		; (str lr, [sp, #-4]!)
   11074:	ldr	lr, [pc, #4]	; 11080 <fdopen@plt-0x4>
   11078:	add	lr, pc, lr
   1107c:	ldr	pc, [lr, #8]!
   11080:	andeq	ip, r1, r0, lsl #31

00011084 <fdopen@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #28, 20	; 0x1c000
   1108c:	ldr	pc, [ip, #3968]!	; 0xf80

00011090 <calloc@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #28, 20	; 0x1c000
   11098:	ldr	pc, [ip, #3960]!	; 0xf78

0001109c <fputs_unlocked@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #28, 20	; 0x1c000
   110a4:	ldr	pc, [ip, #3952]!	; 0xf70

000110a8 <raise@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #28, 20	; 0x1c000
   110b0:	ldr	pc, [ip, #3944]!	; 0xf68

000110b4 <gmtime_r@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #28, 20	; 0x1c000
   110bc:	ldr	pc, [ip, #3936]!	; 0xf60

000110c0 <strcmp@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #28, 20	; 0x1c000
   110c8:	ldr	pc, [ip, #3928]!	; 0xf58

000110cc <strtol@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #28, 20	; 0x1c000
   110d4:	ldr	pc, [ip, #3920]!	; 0xf50

000110d8 <posix_fadvise64@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #28, 20	; 0x1c000
   110e0:	ldr	pc, [ip, #3912]!	; 0xf48

000110e4 <mktime@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #28, 20	; 0x1c000
   110ec:	ldr	pc, [ip, #3904]!	; 0xf40

000110f0 <fflush@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #28, 20	; 0x1c000
   110f8:	ldr	pc, [ip, #3896]!	; 0xf38

000110fc <wcwidth@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #28, 20	; 0x1c000
   11104:	ldr	pc, [ip, #3888]!	; 0xf30

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #28, 20	; 0x1c000
   11110:	ldr	pc, [ip, #3880]!	; 0xf28

00011114 <clock_gettime@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #28, 20	; 0x1c000
   1111c:	ldr	pc, [ip, #3872]!	; 0xf20

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #28, 20	; 0x1c000
   11128:	ldr	pc, [ip, #3864]!	; 0xf18

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #28, 20	; 0x1c000
   11134:	ldr	pc, [ip, #3856]!	; 0xf10

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #28, 20	; 0x1c000
   11140:	ldr	pc, [ip, #3848]!	; 0xf08

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #28, 20	; 0x1c000
   1114c:	ldr	pc, [ip, #3840]!	; 0xf00

00011150 <memcmp@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #28, 20	; 0x1c000
   11158:	ldr	pc, [ip, #3832]!	; 0xef8

0001115c <fputc_unlocked@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #28, 20	; 0x1c000
   11164:	ldr	pc, [ip, #3824]!	; 0xef0

00011168 <dcgettext@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #28, 20	; 0x1c000
   11170:	ldr	pc, [ip, #3816]!	; 0xee8

00011174 <realloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #28, 20	; 0x1c000
   1117c:	ldr	pc, [ip, #3808]!	; 0xee0

00011180 <localtime_r@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #28, 20	; 0x1c000
   11188:	ldr	pc, [ip, #3800]!	; 0xed8

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #28, 20	; 0x1c000
   11194:	ldr	pc, [ip, #3792]!	; 0xed0

00011198 <iswcntrl@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #28, 20	; 0x1c000
   111a0:	ldr	pc, [ip, #3784]!	; 0xec8

000111a4 <iswprint@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #28, 20	; 0x1c000
   111ac:	ldr	pc, [ip, #3776]!	; 0xec0

000111b0 <tzset@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #28, 20	; 0x1c000
   111b8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111bc <__fxstat64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #28, 20	; 0x1c000
   111c4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111c8 <fwrite@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #28, 20	; 0x1c000
   111d0:	ldr	pc, [ip, #3752]!	; 0xea8

000111d4 <lseek64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #28, 20	; 0x1c000
   111dc:	ldr	pc, [ip, #3744]!	; 0xea0

000111e0 <__ctype_get_mb_cur_max@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #28, 20	; 0x1c000
   111e8:	ldr	pc, [ip, #3736]!	; 0xe98

000111ec <__fpending@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3728]!	; 0xe90

000111f8 <mbrtowc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3720]!	; 0xe88

00011204 <error@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3712]!	; 0xe80

00011210 <getenv@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #28, 20	; 0x1c000
   11218:	ldr	pc, [ip, #3704]!	; 0xe78

0001121c <malloc@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #28, 20	; 0x1c000
   11224:	ldr	pc, [ip, #3696]!	; 0xe70

00011228 <__libc_start_main@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #28, 20	; 0x1c000
   11230:	ldr	pc, [ip, #3688]!	; 0xe68

00011234 <strftime@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #28, 20	; 0x1c000
   1123c:	ldr	pc, [ip, #3680]!	; 0xe60

00011240 <__freading@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #28, 20	; 0x1c000
   11248:	ldr	pc, [ip, #3672]!	; 0xe58

0001124c <__ctype_tolower_loc@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #28, 20	; 0x1c000
   11254:	ldr	pc, [ip, #3664]!	; 0xe50

00011258 <__ctype_toupper_loc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #28, 20	; 0x1c000
   11260:	ldr	pc, [ip, #3656]!	; 0xe48

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #28, 20	; 0x1c000
   1126c:	ldr	pc, [ip, #3648]!	; 0xe40

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #28, 20	; 0x1c000
   11278:	ldr	pc, [ip, #3640]!	; 0xe38

0001127c <__ctype_b_loc@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #28, 20	; 0x1c000
   11284:	ldr	pc, [ip, #3632]!	; 0xe30

00011288 <exit@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #28, 20	; 0x1c000
   11290:	ldr	pc, [ip, #3624]!	; 0xe28

00011294 <strlen@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #28, 20	; 0x1c000
   1129c:	ldr	pc, [ip, #3616]!	; 0xe20

000112a0 <strchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #28, 20	; 0x1c000
   112a8:	ldr	pc, [ip, #3608]!	; 0xe18

000112ac <setenv@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #28, 20	; 0x1c000
   112b4:	ldr	pc, [ip, #3600]!	; 0xe10

000112b8 <ungetc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #28, 20	; 0x1c000
   112c0:	ldr	pc, [ip, #3592]!	; 0xe08

000112c4 <__errno_location@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #28, 20	; 0x1c000
   112cc:	ldr	pc, [ip, #3584]!	; 0xe00

000112d0 <__sprintf_chk@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #28, 20	; 0x1c000
   112d8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112dc <__cxa_atexit@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112e8 <memset@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3560]!	; 0xde8

000112f4 <__printf_chk@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3552]!	; 0xde0

00011300 <fileno@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3544]!	; 0xdd8

0001130c <__fprintf_chk@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3536]!	; 0xdd0

00011318 <fclose@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3528]!	; 0xdc8

00011324 <fseeko64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011330 <fcntl64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3512]!	; 0xdb8

0001133c <__uflow@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3504]!	; 0xdb0

00011348 <__overflow@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3496]!	; 0xda8

00011354 <setlocale@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3488]!	; 0xda0

00011360 <strrchr@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3480]!	; 0xd98

0001136c <nl_langinfo@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3472]!	; 0xd90

00011378 <timegm@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3464]!	; 0xd88

00011384 <clearerr_unlocked@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3456]!	; 0xd80

00011390 <__strtoll_internal@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3448]!	; 0xd78

0001139c <fopen64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3440]!	; 0xd70

000113a8 <bindtextdomain@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3432]!	; 0xd68

000113b4 <unsetenv@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3424]!	; 0xd60

000113c0 <strncmp@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3416]!	; 0xd58

000113cc <abort@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3408]!	; 0xd50

000113d8 <close@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3400]!	; 0xd48

000113e4 <__assert_fail@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113f0 <.text>:
   113f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113f4:	sub	sp, sp, #68	; 0x44
   113f8:	mov	r7, r0
   113fc:	mov	r4, #0
   11400:	ldr	r0, [r1]
   11404:	mov	r6, r1
   11408:	str	r4, [sp, #56]	; 0x38
   1140c:	bl	16f80 <__assert_fail@plt+0x5b9c>
   11410:	ldr	r1, [pc, #3136]	; 12058 <__assert_fail@plt+0xc74>
   11414:	mov	r0, #6
   11418:	bl	11354 <setlocale@plt>
   1141c:	ldr	r1, [pc, #3128]	; 1205c <__assert_fail@plt+0xc78>
   11420:	ldr	r0, [pc, #3128]	; 12060 <__assert_fail@plt+0xc7c>
   11424:	bl	113a8 <bindtextdomain@plt>
   11428:	ldr	r0, [pc, #3120]	; 12060 <__assert_fail@plt+0xc7c>
   1142c:	bl	1118c <textdomain@plt>
   11430:	ldr	r0, [pc, #3116]	; 12064 <__assert_fail@plt+0xc80>
   11434:	bl	1bd24 <__assert_fail@plt+0xa940>
   11438:	cmp	r7, #1
   1143c:	strle	r4, [sp, #48]	; 0x30
   11440:	ble	11454 <__assert_fail@plt+0x70>
   11444:	mov	r1, #4
   11448:	sub	r0, r7, #1
   1144c:	bl	19990 <__assert_fail@plt+0x85ac>
   11450:	str	r0, [sp, #48]	; 0x30
   11454:	mov	r4, #0
   11458:	ldr	r9, [pc, #3080]	; 12068 <__assert_fail@plt+0xc84>
   1145c:	ldr	sl, [pc, #3080]	; 1206c <__assert_fail@plt+0xc88>
   11460:	ldr	fp, [pc, #3080]	; 12070 <__assert_fail@plt+0xc8c>
   11464:	mov	r5, r4
   11468:	add	r8, sp, #60	; 0x3c
   1146c:	str	r4, [sp, #52]	; 0x34
   11470:	str	r4, [sp, #44]	; 0x2c
   11474:	str	r4, [sp, #40]	; 0x28
   11478:	str	r4, [sp, #36]	; 0x24
   1147c:	mvn	ip, #0
   11480:	mov	r3, r9
   11484:	str	r8, [sp]
   11488:	ldr	r2, [pc, #3044]	; 12074 <__assert_fail@plt+0xc90>
   1148c:	mov	r1, r6
   11490:	mov	r0, r7
   11494:	str	ip, [sp, #60]	; 0x3c
   11498:	bl	11270 <getopt_long@plt>
   1149c:	cmn	r0, #1
   114a0:	mov	r3, r0
   114a4:	beq	11d58 <__assert_fail@plt+0x974>
   114a8:	sub	r2, r0, #48	; 0x30
   114ac:	cmp	r2, #9
   114b0:	bhi	114d8 <__assert_fail@plt+0xf4>
   114b4:	ldr	r1, [sp, #56]	; 0x38
   114b8:	add	r2, r4, #1
   114bc:	cmp	r2, r1
   114c0:	bcs	118fc <__assert_fail@plt+0x518>
   114c4:	mov	r1, #0
   114c8:	strb	r3, [r5, r4]
   114cc:	strb	r1, [r5, r2]
   114d0:	mov	r4, r2
   114d4:	b	1147c <__assert_fail@plt+0x98>
   114d8:	add	r3, r0, #3
   114dc:	cmp	r3, #260	; 0x104
   114e0:	ldrls	pc, [pc, r3, lsl #2]
   114e4:	b	11d50 <__assert_fail@plt+0x96c>
   114e8:	ldrdeq	r1, [r1], -ip
   114ec:	ldrdeq	r1, [r1], -r4
   114f0:	andeq	r1, r1, r0, asr sp
   114f4:	andeq	r1, r1, r0, asr sp
   114f8:	andeq	r1, r1, ip, lsr #23
   114fc:	andeq	r1, r1, r0, asr sp
   11500:	andeq	r1, r1, r0, asr sp
   11504:	andeq	r1, r1, r0, asr sp
   11508:	andeq	r1, r1, r0, asr sp
   1150c:	andeq	r1, r1, r0, asr sp
   11510:	andeq	r1, r1, r0, asr sp
   11514:	andeq	r1, r1, r0, asr sp
   11518:	andeq	r1, r1, r0, asr sp
   1151c:	andeq	r1, r1, r0, asr sp
   11520:	andeq	r1, r1, r0, asr sp
   11524:	andeq	r1, r1, r0, asr sp
   11528:	andeq	r1, r1, r0, asr sp
   1152c:	andeq	r1, r1, r0, asr sp
   11530:	andeq	r1, r1, r0, asr sp
   11534:	andeq	r1, r1, r0, asr sp
   11538:	andeq	r1, r1, r0, asr sp
   1153c:	andeq	r1, r1, r0, asr sp
   11540:	andeq	r1, r1, r0, asr sp
   11544:	andeq	r1, r1, r0, asr sp
   11548:	andeq	r1, r1, r0, asr sp
   1154c:	andeq	r1, r1, r0, asr sp
   11550:	andeq	r1, r1, r0, asr sp
   11554:	andeq	r1, r1, r0, asr sp
   11558:	andeq	r1, r1, r0, asr sp
   1155c:	andeq	r1, r1, r0, asr sp
   11560:	andeq	r1, r1, r0, asr sp
   11564:	andeq	r1, r1, r0, asr sp
   11568:	andeq	r1, r1, r0, asr sp
   1156c:	andeq	r1, r1, r0, asr sp
   11570:	andeq	r1, r1, r0, asr sp
   11574:	andeq	r1, r1, r0, asr sp
   11578:	andeq	r1, r1, r0, asr sp
   1157c:	andeq	r1, r1, r0, asr sp
   11580:	andeq	r1, r1, r0, asr sp
   11584:	andeq	r1, r1, r0, asr sp
   11588:	andeq	r1, r1, r0, asr sp
   1158c:	andeq	r1, r1, r0, asr sp
   11590:	andeq	r1, r1, r0, asr sp
   11594:	andeq	r1, r1, r0, asr sp
   11598:	andeq	r1, r1, r0, asr sp
   1159c:	andeq	r1, r1, r0, asr sp
   115a0:	andeq	r1, r1, r0, asr sp
   115a4:	andeq	r1, r1, r0, asr sp
   115a8:	andeq	r1, r1, r0, asr sp
   115ac:	andeq	r1, r1, r0, asr sp
   115b0:	andeq	r1, r1, r0, asr sp
   115b4:	andeq	r1, r1, r0, asr sp
   115b8:	andeq	r1, r1, r0, asr sp
   115bc:	andeq	r1, r1, r0, asr sp
   115c0:	andeq	r1, r1, r0, asr sp
   115c4:	andeq	r1, r1, r0, asr sp
   115c8:	andeq	r1, r1, r0, asr sp
   115cc:	andeq	r1, r1, r0, asr sp
   115d0:	andeq	r1, r1, r0, asr sp
   115d4:	andeq	r1, r1, r0, asr sp
   115d8:	andeq	r1, r1, r0, asr sp
   115dc:	andeq	r1, r1, r0, asr sp
   115e0:	andeq	r1, r1, r0, asr sp
   115e4:	andeq	r1, r1, r0, asr sp
   115e8:	andeq	r1, r1, r0, asr sp
   115ec:	andeq	r1, r1, r0, asr sp
   115f0:	andeq	r1, r1, r0, asr sp
   115f4:	andeq	r1, r1, r0, asr sp
   115f8:	andeq	r1, r1, r0, asr sp
   115fc:	andeq	r1, r1, r0, asr sp
   11600:	andeq	r1, r1, r0, asr sp
   11604:	andeq	r1, r1, r0, lsr #23
   11608:	andeq	r1, r1, r0, asr sp
   1160c:	muleq	r1, r4, fp
   11610:	andeq	r1, r1, r0, asr sp
   11614:	andeq	r1, r1, r0, asr sp
   11618:	andeq	r1, r1, r0, asr sp
   1161c:	andeq	r1, r1, r8, lsl #23
   11620:	andeq	r1, r1, r0, asr sp
   11624:	andeq	r1, r1, r0, asr sp
   11628:	andeq	r1, r1, r0, asr sp
   1162c:	andeq	r1, r1, r0, asr #25
   11630:	andeq	r1, r1, r0, asr sp
   11634:	andeq	r1, r1, r0, asr sp
   11638:	andeq	r1, r1, r0, asr sp
   1163c:	andeq	r1, r1, r0, asr sp
   11640:	andeq	r1, r1, r8, lsl #25
   11644:	andeq	r1, r1, r4, ror ip
   11648:	andeq	r1, r1, r0, asr sp
   1164c:	andeq	r1, r1, r0, asr sp
   11650:	andeq	r1, r1, r8, lsl ip
   11654:	andeq	r1, r1, r0, asr sp
   11658:	andeq	r1, r1, r0, asr sp
   1165c:	andeq	r1, r1, r0, asr sp
   11660:	andeq	r1, r1, r0, asr sp
   11664:	andeq	r1, r1, r0, asr sp
   11668:	andeq	r1, r1, r0, asr sp
   1166c:	andeq	r1, r1, r0, asr sp
   11670:	andeq	r1, r1, r0, asr sp
   11674:	andeq	r1, r1, r0, asr sp
   11678:	andeq	r1, r1, ip, lsr #26
   1167c:	andeq	r1, r1, r0, lsr #26
   11680:	andeq	r1, r1, r4, asr #26
   11684:	andeq	r1, r1, ip, ror fp
   11688:	andeq	r1, r1, r4, asr fp
   1168c:	muleq	r1, r4, fp
   11690:	andeq	r1, r1, r0, asr sp
   11694:	andeq	r1, r1, r8, asr #22
   11698:	andeq	r1, r1, r0, lsr #22
   1169c:	andeq	r1, r1, r0, asr sp
   116a0:	andeq	r1, r1, r0, asr sp
   116a4:	ldrdeq	r1, [r1], -r0
   116a8:			; <UNDEFINED> instruction: 0x00011ab8
   116ac:	muleq	r1, r0, sl
   116b0:	andeq	r1, r1, r4, asr #20
   116b4:	andeq	r1, r1, r0, asr sp
   116b8:	andeq	r1, r1, r0, asr sp
   116bc:	andeq	r1, r1, r8, lsr sl
   116c0:	strdeq	r1, [r1], -ip
   116c4:	andeq	r1, r1, r4, ror #19
   116c8:	andeq	r1, r1, r0, asr sp
   116cc:	ldrdeq	r1, [r1], -r8
   116d0:	andeq	r1, r1, r4, ror #18
   116d4:	andeq	r1, r1, r0, asr sp
   116d8:	andeq	r1, r1, r0, asr sp
   116dc:	andeq	r1, r1, r0, asr sp
   116e0:	andeq	r1, r1, r0, asr sp
   116e4:	andeq	r1, r1, r0, asr sp
   116e8:	andeq	r1, r1, r0, asr sp
   116ec:	andeq	r1, r1, r0, asr sp
   116f0:	andeq	r1, r1, r0, asr sp
   116f4:	andeq	r1, r1, r0, asr sp
   116f8:	andeq	r1, r1, r0, asr sp
   116fc:	andeq	r1, r1, r0, asr sp
   11700:	andeq	r1, r1, r0, asr sp
   11704:	andeq	r1, r1, r0, asr sp
   11708:	andeq	r1, r1, r0, asr sp
   1170c:	andeq	r1, r1, r0, asr sp
   11710:	andeq	r1, r1, r0, asr sp
   11714:	andeq	r1, r1, r0, asr sp
   11718:	andeq	r1, r1, r0, asr sp
   1171c:	andeq	r1, r1, r0, asr sp
   11720:	andeq	r1, r1, r0, asr sp
   11724:	andeq	r1, r1, r0, asr sp
   11728:	andeq	r1, r1, r0, asr sp
   1172c:	andeq	r1, r1, r0, asr sp
   11730:	andeq	r1, r1, r0, asr sp
   11734:	andeq	r1, r1, r0, asr sp
   11738:	andeq	r1, r1, r0, asr sp
   1173c:	andeq	r1, r1, r0, asr sp
   11740:	andeq	r1, r1, r0, asr sp
   11744:	andeq	r1, r1, r0, asr sp
   11748:	andeq	r1, r1, r0, asr sp
   1174c:	andeq	r1, r1, r0, asr sp
   11750:	andeq	r1, r1, r0, asr sp
   11754:	andeq	r1, r1, r0, asr sp
   11758:	andeq	r1, r1, r0, asr sp
   1175c:	andeq	r1, r1, r0, asr sp
   11760:	andeq	r1, r1, r0, asr sp
   11764:	andeq	r1, r1, r0, asr sp
   11768:	andeq	r1, r1, r0, asr sp
   1176c:	andeq	r1, r1, r0, asr sp
   11770:	andeq	r1, r1, r0, asr sp
   11774:	andeq	r1, r1, r0, asr sp
   11778:	andeq	r1, r1, r0, asr sp
   1177c:	andeq	r1, r1, r0, asr sp
   11780:	andeq	r1, r1, r0, asr sp
   11784:	andeq	r1, r1, r0, asr sp
   11788:	andeq	r1, r1, r0, asr sp
   1178c:	andeq	r1, r1, r0, asr sp
   11790:	andeq	r1, r1, r0, asr sp
   11794:	andeq	r1, r1, r0, asr sp
   11798:	andeq	r1, r1, r0, asr sp
   1179c:	andeq	r1, r1, r0, asr sp
   117a0:	andeq	r1, r1, r0, asr sp
   117a4:	andeq	r1, r1, r0, asr sp
   117a8:	andeq	r1, r1, r0, asr sp
   117ac:	andeq	r1, r1, r0, asr sp
   117b0:	andeq	r1, r1, r0, asr sp
   117b4:	andeq	r1, r1, r0, asr sp
   117b8:	andeq	r1, r1, r0, asr sp
   117bc:	andeq	r1, r1, r0, asr sp
   117c0:	andeq	r1, r1, r0, asr sp
   117c4:	andeq	r1, r1, r0, asr sp
   117c8:	andeq	r1, r1, r0, asr sp
   117cc:	andeq	r1, r1, r0, asr sp
   117d0:	andeq	r1, r1, r0, asr sp
   117d4:	andeq	r1, r1, r0, asr sp
   117d8:	andeq	r1, r1, r0, asr sp
   117dc:	andeq	r1, r1, r0, asr sp
   117e0:	andeq	r1, r1, r0, asr sp
   117e4:	andeq	r1, r1, r0, asr sp
   117e8:	andeq	r1, r1, r0, asr sp
   117ec:	andeq	r1, r1, r0, asr sp
   117f0:	andeq	r1, r1, r0, asr sp
   117f4:	andeq	r1, r1, r0, asr sp
   117f8:	andeq	r1, r1, r0, asr sp
   117fc:	andeq	r1, r1, r0, asr sp
   11800:	andeq	r1, r1, r0, asr sp
   11804:	andeq	r1, r1, r0, asr sp
   11808:	andeq	r1, r1, r0, asr sp
   1180c:	andeq	r1, r1, r0, asr sp
   11810:	andeq	r1, r1, r0, asr sp
   11814:	andeq	r1, r1, r0, asr sp
   11818:	andeq	r1, r1, r0, asr sp
   1181c:	andeq	r1, r1, r0, asr sp
   11820:	andeq	r1, r1, r0, asr sp
   11824:	andeq	r1, r1, r0, asr sp
   11828:	andeq	r1, r1, r0, asr sp
   1182c:	andeq	r1, r1, r0, asr sp
   11830:	andeq	r1, r1, r0, asr sp
   11834:	andeq	r1, r1, r0, asr sp
   11838:	andeq	r1, r1, r0, asr sp
   1183c:	andeq	r1, r1, r0, asr sp
   11840:	andeq	r1, r1, r0, asr sp
   11844:	andeq	r1, r1, r0, asr sp
   11848:	andeq	r1, r1, r0, asr sp
   1184c:	andeq	r1, r1, r0, asr sp
   11850:	andeq	r1, r1, r0, asr sp
   11854:	andeq	r1, r1, r0, asr sp
   11858:	andeq	r1, r1, r0, asr sp
   1185c:	andeq	r1, r1, r0, asr sp
   11860:	andeq	r1, r1, r0, asr sp
   11864:	andeq	r1, r1, r0, asr sp
   11868:	andeq	r1, r1, r0, asr sp
   1186c:	andeq	r1, r1, r0, asr sp
   11870:	andeq	r1, r1, r0, asr sp
   11874:	andeq	r1, r1, r0, asr sp
   11878:	andeq	r1, r1, r0, asr sp
   1187c:	andeq	r1, r1, r0, asr sp
   11880:	andeq	r1, r1, r0, asr sp
   11884:	andeq	r1, r1, r0, asr sp
   11888:	andeq	r1, r1, r0, asr sp
   1188c:	andeq	r1, r1, r0, asr sp
   11890:	andeq	r1, r1, r0, asr sp
   11894:	andeq	r1, r1, r0, asr sp
   11898:	andeq	r1, r1, r0, asr sp
   1189c:	andeq	r1, r1, r0, asr sp
   118a0:	andeq	r1, r1, r0, asr sp
   118a4:	andeq	r1, r1, r0, asr sp
   118a8:	andeq	r1, r1, r0, asr sp
   118ac:	andeq	r1, r1, r0, asr sp
   118b0:	andeq	r1, r1, r0, asr sp
   118b4:	andeq	r1, r1, r0, asr sp
   118b8:	andeq	r1, r1, r0, asr sp
   118bc:	andeq	r1, r1, r0, asr sp
   118c0:	andeq	r1, r1, r0, asr sp
   118c4:	andeq	r1, r1, r0, asr sp
   118c8:	andeq	r1, r1, r0, asr sp
   118cc:	andeq	r1, r1, r0, asr sp
   118d0:	andeq	r1, r1, r0, asr sp
   118d4:	andeq	r1, r1, r0, asr sp
   118d8:	andeq	r1, r1, r0, asr sp
   118dc:	andeq	r1, r1, r0, asr sp
   118e0:	andeq	r1, r1, r0, asr sp
   118e4:	andeq	r1, r1, r0, asr sp
   118e8:	andeq	r1, r1, r0, asr sp
   118ec:	andeq	r1, r1, r0, asr sp
   118f0:	andeq	r1, r1, r0, asr sp
   118f4:	andeq	r1, r1, r8, asr #18
   118f8:	andeq	r1, r1, r0, lsr #18
   118fc:	str	r0, [sp, #28]
   11900:	add	r1, sp, #56	; 0x38
   11904:	mov	r0, r5
   11908:	str	r2, [sp, #32]
   1190c:	bl	19a2c <__assert_fail@plt+0x8648>
   11910:	ldr	r2, [sp, #32]
   11914:	ldr	r3, [sp, #28]
   11918:	mov	r5, r0
   1191c:	b	114c4 <__assert_fail@plt+0xe0>
   11920:	ldr	r2, [fp]
   11924:	cmp	r2, #0
   11928:	beq	1204c <__assert_fail@plt+0xc68>
   1192c:	mov	r1, #0
   11930:	ldr	r0, [sp, #60]	; 0x3c
   11934:	bl	12384 <__assert_fail@plt+0xfa0>
   11938:	subs	r4, r0, #0
   1193c:	beq	12020 <__assert_fail@plt+0xc3c>
   11940:	mov	r4, #0
   11944:	b	1147c <__assert_fail@plt+0x98>
   11948:	ldr	r0, [fp]
   1194c:	bl	124c4 <__assert_fail@plt+0x10e0>
   11950:	mov	r0, r5
   11954:	mov	r5, #0
   11958:	bl	15110 <__assert_fail@plt+0x3d2c>
   1195c:	str	r5, [sp, #56]	; 0x38
   11960:	b	11940 <__assert_fail@plt+0x55c>
   11964:	mov	r2, #5
   11968:	ldr	r1, [pc, #1800]	; 12078 <__assert_fail@plt+0xc94>
   1196c:	mov	r0, #0
   11970:	ldr	r4, [fp]
   11974:	bl	11168 <dcgettext@plt>
   11978:	ldr	r3, [pc, #1752]	; 12058 <__assert_fail@plt+0xc74>
   1197c:	mvn	r2, #-2147483648	; 0x80000000
   11980:	str	r3, [sp, #8]
   11984:	mov	r3, #0
   11988:	mov	r1, #0
   1198c:	strd	r2, [sp]
   11990:	str	r1, [sp, #16]
   11994:	mov	r3, #0
   11998:	mov	r2, #1
   1199c:	str	r0, [sp, #12]
   119a0:	mov	r0, r4
   119a4:	bl	19f78 <__assert_fail@plt+0x8b94>
   119a8:	ldrb	r3, [sl, #156]	; 0x9c
   119ac:	cmp	r3, #0
   119b0:	str	r3, [sp, #40]	; 0x28
   119b4:	ldrne	r3, [sp, #40]	; 0x28
   119b8:	strne	r3, [sp, #44]	; 0x2c
   119bc:	bne	11940 <__assert_fail@plt+0x55c>
   119c0:	ldr	r2, [pc, #1716]	; 1207c <__assert_fail@plt+0xc98>
   119c4:	mov	r3, #1
   119c8:	str	r3, [sp, #44]	; 0x2c
   119cc:	str	r0, [r2, #20]
   119d0:	str	r3, [sp, #40]	; 0x28
   119d4:	b	11940 <__assert_fail@plt+0x55c>
   119d8:	mov	r3, #1
   119dc:	strb	r3, [sl, #117]	; 0x75
   119e0:	b	11940 <__assert_fail@plt+0x55c>
   119e4:	ldr	r1, [pc, #1680]	; 1207c <__assert_fail@plt+0xc98>
   119e8:	mov	r2, #0
   119ec:	mov	r3, #1
   119f0:	strb	r2, [r1, #40]	; 0x28
   119f4:	strb	r3, [sl, #141]	; 0x8d
   119f8:	b	11940 <__assert_fail@plt+0x55c>
   119fc:	ldrb	r3, [sl, #132]	; 0x84
   11a00:	cmp	r3, #0
   11a04:	str	r3, [sp, #40]	; 0x28
   11a08:	ldrne	r3, [sp, #40]	; 0x28
   11a0c:	strne	r3, [sp, #52]	; 0x34
   11a10:	bne	11940 <__assert_fail@plt+0x55c>
   11a14:	ldr	r0, [fp]
   11a18:	mov	r3, #1
   11a1c:	cmp	r0, #0
   11a20:	beq	11fbc <__assert_fail@plt+0xbd8>
   11a24:	mov	r4, r3
   11a28:	str	r3, [sp, #52]	; 0x34
   11a2c:	bl	12490 <__assert_fail@plt+0x10ac>
   11a30:	str	r4, [sp, #40]	; 0x28
   11a34:	b	11940 <__assert_fail@plt+0x55c>
   11a38:	mov	r3, #1
   11a3c:	strb	r3, [sl, #168]	; 0xa8
   11a40:	b	11940 <__assert_fail@plt+0x55c>
   11a44:	mov	r2, #5
   11a48:	ldr	r1, [pc, #1584]	; 12080 <__assert_fail@plt+0xc9c>
   11a4c:	mov	r0, #0
   11a50:	ldr	r4, [fp]
   11a54:	bl	11168 <dcgettext@plt>
   11a58:	ldr	r3, [pc, #1528]	; 12058 <__assert_fail@plt+0xc74>
   11a5c:	mvn	r2, #-2147483648	; 0x80000000
   11a60:	str	r3, [sp, #8]
   11a64:	mov	r3, #0
   11a68:	mov	r1, #0
   11a6c:	strd	r2, [sp]
   11a70:	str	r1, [sp, #16]
   11a74:	mov	r2, #0
   11a78:	mov	r3, #0
   11a7c:	str	r0, [sp, #12]
   11a80:	mov	r0, r4
   11a84:	bl	19f78 <__assert_fail@plt+0x8b94>
   11a88:	str	r0, [sl, #92]	; 0x5c
   11a8c:	b	11940 <__assert_fail@plt+0x55c>
   11a90:	ldr	r0, [fp]
   11a94:	mov	r3, #1
   11a98:	cmp	r0, #0
   11a9c:	strb	r3, [sl, #183]	; 0xb7
   11aa0:	beq	11940 <__assert_fail@plt+0x55c>
   11aa4:	ldr	r3, [pc, #1496]	; 12084 <__assert_fail@plt+0xca0>
   11aa8:	mov	r1, #110	; 0x6e
   11aac:	add	r2, r3, #4
   11ab0:	bl	14d70 <__assert_fail@plt+0x398c>
   11ab4:	b	11940 <__assert_fail@plt+0x55c>
   11ab8:	mov	r2, #1
   11abc:	strb	r2, [sl, #72]	; 0x48
   11ac0:	ldr	r2, [pc, #1460]	; 1207c <__assert_fail@plt+0xc98>
   11ac4:	mov	r3, #0
   11ac8:	strb	r3, [r2, #4]
   11acc:	b	11940 <__assert_fail@plt+0x55c>
   11ad0:	mov	r2, #5
   11ad4:	ldr	r1, [pc, #1452]	; 12088 <__assert_fail@plt+0xca4>
   11ad8:	mov	r0, #0
   11adc:	ldr	r4, [fp]
   11ae0:	bl	11168 <dcgettext@plt>
   11ae4:	ldr	r3, [pc, #1388]	; 12058 <__assert_fail@plt+0xc74>
   11ae8:	mvn	r2, #-2147483648	; 0x80000000
   11aec:	str	r3, [sp, #8]
   11af0:	mov	r3, #0
   11af4:	mov	r1, #0
   11af8:	strd	r2, [sp]
   11afc:	str	r1, [sp, #16]
   11b00:	mov	r3, #0
   11b04:	mov	r2, #1
   11b08:	str	r0, [sp, #12]
   11b0c:	mov	r0, r4
   11b10:	bl	19f78 <__assert_fail@plt+0x8b94>
   11b14:	ldr	r3, [pc, #1376]	; 1207c <__assert_fail@plt+0xc98>
   11b18:	str	r0, [r3, #56]	; 0x38
   11b1c:	b	11940 <__assert_fail@plt+0x55c>
   11b20:	ldr	r0, [fp]
   11b24:	cmp	r0, #0
   11b28:	beq	11b3c <__assert_fail@plt+0x758>
   11b2c:	ldr	r3, [pc, #1368]	; 1208c <__assert_fail@plt+0xca8>
   11b30:	mov	r1, #105	; 0x69
   11b34:	sub	r2, r3, #4
   11b38:	bl	14d70 <__assert_fail@plt+0x398c>
   11b3c:	mov	r3, #1
   11b40:	strb	r3, [sl, #80]	; 0x50
   11b44:	b	11940 <__assert_fail@plt+0x55c>
   11b48:	ldr	r3, [fp]
   11b4c:	str	r3, [sl, #60]	; 0x3c
   11b50:	b	11940 <__assert_fail@plt+0x55c>
   11b54:	ldr	r0, [fp]
   11b58:	cmp	r0, #0
   11b5c:	beq	11b70 <__assert_fail@plt+0x78c>
   11b60:	ldr	r3, [pc, #1320]	; 12090 <__assert_fail@plt+0xcac>
   11b64:	mov	r1, #101	; 0x65
   11b68:	sub	r2, r3, #4
   11b6c:	bl	14d70 <__assert_fail@plt+0x398c>
   11b70:	mov	r3, #1
   11b74:	strb	r3, [sl, #116]	; 0x74
   11b78:	b	11940 <__assert_fail@plt+0x55c>
   11b7c:	mov	r3, #1
   11b80:	strb	r3, [sl, #180]	; 0xb4
   11b84:	b	11940 <__assert_fail@plt+0x55c>
   11b88:	mov	r3, #1
   11b8c:	strb	r3, [sl, #182]	; 0xb6
   11b90:	b	11940 <__assert_fail@plt+0x55c>
   11b94:	mov	r3, #1
   11b98:	strb	r3, [sl, #184]	; 0xb8
   11b9c:	b	11940 <__assert_fail@plt+0x55c>
   11ba0:	ldr	r3, [fp]
   11ba4:	str	r3, [sl, #52]	; 0x34
   11ba8:	b	11940 <__assert_fail@plt+0x55c>
   11bac:	ldrd	r2, [sl, #24]
   11bb0:	orrs	r3, r2, r3
   11bb4:	beq	11ebc <__assert_fail@plt+0xad8>
   11bb8:	ldr	r2, [sp, #36]	; 0x24
   11bbc:	ldr	r1, [sp, #48]	; 0x30
   11bc0:	ldr	r3, [fp]
   11bc4:	str	r3, [r1, r2, lsl #2]
   11bc8:	add	r3, r2, #1
   11bcc:	str	r3, [sp, #36]	; 0x24
   11bd0:	b	11940 <__assert_fail@plt+0x55c>
   11bd4:	mov	r0, #0
   11bd8:	bl	14904 <__assert_fail@plt+0x3520>
   11bdc:	ldr	r3, [pc, #1200]	; 12094 <__assert_fail@plt+0xcb0>
   11be0:	ldr	r0, [pc, #1200]	; 12098 <__assert_fail@plt+0xcb4>
   11be4:	ldr	r1, [pc, #1200]	; 1209c <__assert_fail@plt+0xcb8>
   11be8:	ldr	r2, [pc, #1200]	; 120a0 <__assert_fail@plt+0xcbc>
   11bec:	mov	r4, #0
   11bf0:	ldr	r0, [r0]
   11bf4:	ldr	r3, [r3]
   11bf8:	str	r1, [sp, #4]
   11bfc:	str	r2, [sp]
   11c00:	str	r4, [sp, #8]
   11c04:	ldr	r2, [pc, #1176]	; 120a4 <__assert_fail@plt+0xcc0>
   11c08:	ldr	r1, [pc, #1176]	; 120a8 <__assert_fail@plt+0xcc4>
   11c0c:	bl	197ac <__assert_fail@plt+0x83c8>
   11c10:	mov	r0, r4
   11c14:	bl	11288 <exit@plt>
   11c18:	mov	r3, #1
   11c1c:	mov	r2, #5
   11c20:	ldr	r1, [pc, #1156]	; 120ac <__assert_fail@plt+0xcc8>
   11c24:	mov	r0, #0
   11c28:	strb	r3, [sl, #156]	; 0x9c
   11c2c:	ldr	r4, [fp]
   11c30:	bl	11168 <dcgettext@plt>
   11c34:	ldr	r3, [pc, #1052]	; 12058 <__assert_fail@plt+0xc74>
   11c38:	mvn	r2, #-2147483648	; 0x80000000
   11c3c:	str	r3, [sp, #8]
   11c40:	mov	r3, #0
   11c44:	mov	r1, #0
   11c48:	strd	r2, [sp]
   11c4c:	str	r1, [sp, #16]
   11c50:	mov	r3, #0
   11c54:	mov	r2, #1
   11c58:	str	r1, [sp, #44]	; 0x2c
   11c5c:	str	r0, [sp, #12]
   11c60:	mov	r0, r4
   11c64:	bl	19f78 <__assert_fail@plt+0x8b94>
   11c68:	ldr	r3, [pc, #1036]	; 1207c <__assert_fail@plt+0xc98>
   11c6c:	str	r0, [r3, #20]
   11c70:	b	11940 <__assert_fail@plt+0x55c>
   11c74:	ldr	r2, [pc, #1024]	; 1207c <__assert_fail@plt+0xc98>
   11c78:	mov	r3, #0
   11c7c:	strb	r3, [sl, #141]	; 0x8d
   11c80:	strb	r3, [r2, #40]	; 0x28
   11c84:	b	11940 <__assert_fail@plt+0x55c>
   11c88:	ldr	r0, [fp]
   11c8c:	ldr	r2, [pc, #1000]	; 1207c <__assert_fail@plt+0xc98>
   11c90:	mov	r4, #0
   11c94:	ldr	r1, [pc, #956]	; 12058 <__assert_fail@plt+0xc74>
   11c98:	cmp	r0, r4
   11c9c:	mov	r3, #1
   11ca0:	str	r1, [r2, #16]
   11ca4:	str	r4, [sl, #32]
   11ca8:	strb	r3, [sl, #132]	; 0x84
   11cac:	streq	r0, [sp, #52]	; 0x34
   11cb0:	beq	11940 <__assert_fail@plt+0x55c>
   11cb4:	bl	12490 <__assert_fail@plt+0x10ac>
   11cb8:	str	r4, [sp, #52]	; 0x34
   11cbc:	b	11940 <__assert_fail@plt+0x55c>
   11cc0:	ldr	ip, [pc, #948]	; 1207c <__assert_fail@plt+0xc98>
   11cc4:	mov	r3, #0
   11cc8:	mov	r0, r3
   11ccc:	mov	r2, #5
   11cd0:	ldr	r1, [pc, #984]	; 120b0 <__assert_fail@plt+0xccc>
   11cd4:	strb	r3, [ip, #41]	; 0x29
   11cd8:	str	r3, [sp, #28]
   11cdc:	ldr	r4, [fp]
   11ce0:	bl	11168 <dcgettext@plt>
   11ce4:	ldr	r3, [sp, #28]
   11ce8:	mvn	r2, #-2147483648	; 0x80000000
   11cec:	str	r3, [sp, #16]
   11cf0:	ldr	r3, [pc, #864]	; 12058 <__assert_fail@plt+0xc74>
   11cf4:	str	r3, [sp, #8]
   11cf8:	mov	r3, #0
   11cfc:	strd	r2, [sp]
   11d00:	mvn	r3, #0
   11d04:	mov	r2, #-2147483648	; 0x80000000
   11d08:	str	r0, [sp, #12]
   11d0c:	mov	r0, r4
   11d10:	bl	19f78 <__assert_fail@plt+0x8b94>
   11d14:	ldr	r3, [pc, #864]	; 1207c <__assert_fail@plt+0xc98>
   11d18:	str	r0, [r3, #60]	; 0x3c
   11d1c:	b	11940 <__assert_fail@plt+0x55c>
   11d20:	mov	r3, #1
   11d24:	strb	r3, [sl, #181]	; 0xb5
   11d28:	b	11940 <__assert_fail@plt+0x55c>
   11d2c:	mov	r2, #1
   11d30:	strb	r2, [sl, #185]	; 0xb9
   11d34:	ldr	r2, [pc, #832]	; 1207c <__assert_fail@plt+0xc98>
   11d38:	mov	r3, #0
   11d3c:	strb	r3, [r2, #4]
   11d40:	b	11940 <__assert_fail@plt+0x55c>
   11d44:	mov	r3, #1
   11d48:	strb	r3, [sl, #118]	; 0x76
   11d4c:	b	11940 <__assert_fail@plt+0x55c>
   11d50:	mov	r0, #1
   11d54:	bl	14904 <__assert_fail@plt+0x3520>
   11d58:	cmp	r5, #0
   11d5c:	beq	11d70 <__assert_fail@plt+0x98c>
   11d60:	mov	r0, r5
   11d64:	bl	124c4 <__assert_fail@plt+0x10e0>
   11d68:	mov	r0, r5
   11d6c:	bl	15110 <__assert_fail@plt+0x3d2c>
   11d70:	ldr	r4, [pc, #756]	; 1206c <__assert_fail@plt+0xc88>
   11d74:	ldr	r3, [r4, #52]	; 0x34
   11d78:	cmp	r3, #0
   11d7c:	beq	11fc8 <__assert_fail@plt+0xbe4>
   11d80:	ldr	r0, [pc, #812]	; 120b4 <__assert_fail@plt+0xcd0>
   11d84:	bl	11210 <getenv@plt>
   11d88:	bl	18f98 <__assert_fail@plt+0x7bb4>
   11d8c:	ldrd	r2, [r4, #24]
   11d90:	orrs	r3, r2, r3
   11d94:	str	r0, [r4, #48]	; 0x30
   11d98:	moveq	r2, #1
   11d9c:	moveq	r3, #0
   11da0:	strdeq	r2, [r4, #24]
   11da4:	ldrb	r1, [r4, #72]	; 0x48
   11da8:	cmp	r1, #0
   11dac:	beq	11dd0 <__assert_fail@plt+0x9ec>
   11db0:	ldrb	r5, [r4, #36]	; 0x24
   11db4:	cmp	r5, #0
   11db8:	bne	11f18 <__assert_fail@plt+0xb34>
   11dbc:	ldrb	r3, [r4, #185]	; 0xb9
   11dc0:	cmp	r3, #0
   11dc4:	movne	r2, #5
   11dc8:	ldrne	r1, [pc, #744]	; 120b8 <__assert_fail@plt+0xcd4>
   11dcc:	bne	11f20 <__assert_fail@plt+0xb3c>
   11dd0:	ldr	r3, [sp, #40]	; 0x28
   11dd4:	cmp	r3, #0
   11dd8:	bne	11ee4 <__assert_fail@plt+0xb00>
   11ddc:	ldr	lr, [pc, #728]	; 120bc <__assert_fail@plt+0xcd8>
   11de0:	ldr	ip, [lr]
   11de4:	cmp	r7, ip
   11de8:	ble	11e24 <__assert_fail@plt+0xa40>
   11dec:	ldr	r0, [sp, #36]	; 0x24
   11df0:	ldr	r2, [sp, #48]	; 0x30
   11df4:	add	r3, r6, ip, lsl #2
   11df8:	add	r2, r2, r0, lsl #2
   11dfc:	add	r6, r6, r7, lsl #2
   11e00:	ldr	r0, [r3], #4
   11e04:	cmp	r3, r6
   11e08:	str	r0, [r2], #4
   11e0c:	bne	11e00 <__assert_fail@plt+0xa1c>
   11e10:	ldr	r3, [sp, #36]	; 0x24
   11e14:	sub	ip, r7, ip
   11e18:	add	r3, r3, ip
   11e1c:	str	r3, [sp, #36]	; 0x24
   11e20:	str	r7, [lr]
   11e24:	ldr	r3, [sp, #36]	; 0x24
   11e28:	cmp	r3, #0
   11e2c:	beq	11f38 <__assert_fail@plt+0xb54>
   11e30:	cmp	r1, #0
   11e34:	bne	11fac <__assert_fail@plt+0xbc8>
   11e38:	ldr	r5, [sp, #48]	; 0x30
   11e3c:	ldr	r8, [sp, #36]	; 0x24
   11e40:	mov	r6, r1
   11e44:	mov	r7, #1
   11e48:	mov	r1, r5
   11e4c:	add	r6, r6, #1
   11e50:	mov	r0, r7
   11e54:	bl	138a8 <__assert_fail@plt+0x24c4>
   11e58:	cmp	r6, r8
   11e5c:	add	r5, r5, #4
   11e60:	bne	11e48 <__assert_fail@plt+0xa64>
   11e64:	ldr	r0, [r4, #144]	; 0x90
   11e68:	bl	15110 <__assert_fail@plt+0x3d2c>
   11e6c:	ldr	r0, [r4, #108]	; 0x6c
   11e70:	bl	15110 <__assert_fail@plt+0x3d2c>
   11e74:	ldr	r0, [r4]
   11e78:	bl	15110 <__assert_fail@plt+0x3d2c>
   11e7c:	ldr	r0, [r4, #120]	; 0x78
   11e80:	bl	15110 <__assert_fail@plt+0x3d2c>
   11e84:	ldr	r0, [r4, #136]	; 0x88
   11e88:	bl	15110 <__assert_fail@plt+0x3d2c>
   11e8c:	ldr	r0, [r4, #16]
   11e90:	bl	15110 <__assert_fail@plt+0x3d2c>
   11e94:	ldrb	r3, [r4, #166]	; 0xa6
   11e98:	cmp	r3, #0
   11e9c:	beq	11eb4 <__assert_fail@plt+0xad0>
   11ea0:	ldr	r3, [pc, #536]	; 120c0 <__assert_fail@plt+0xcdc>
   11ea4:	ldr	r0, [r3]
   11ea8:	bl	14f78 <__assert_fail@plt+0x3b94>
   11eac:	cmn	r0, #1
   11eb0:	beq	11ff8 <__assert_fail@plt+0xc14>
   11eb4:	ldrb	r0, [r4, #167]	; 0xa7
   11eb8:	bl	11288 <exit@plt>
   11ebc:	ldr	r2, [fp]
   11ec0:	ldrb	r1, [r2]
   11ec4:	cmp	r1, #43	; 0x2b
   11ec8:	bne	11bb8 <__assert_fail@plt+0x7d4>
   11ecc:	add	r2, r2, #1
   11ed0:	mvn	r0, #1
   11ed4:	bl	12384 <__assert_fail@plt+0xfa0>
   11ed8:	cmp	r0, #0
   11edc:	bne	11940 <__assert_fail@plt+0x55c>
   11ee0:	b	11bb8 <__assert_fail@plt+0x7d4>
   11ee4:	ldr	r3, [sp, #44]	; 0x2c
   11ee8:	cmp	r3, #0
   11eec:	beq	11f48 <__assert_fail@plt+0xb64>
   11ef0:	cmp	r1, #0
   11ef4:	beq	11f94 <__assert_fail@plt+0xbb0>
   11ef8:	ldr	r3, [sp, #52]	; 0x34
   11efc:	cmp	r3, #0
   11f00:	mov	r3, #1
   11f04:	strb	r3, [r4, #156]	; 0x9c
   11f08:	beq	11ddc <__assert_fail@plt+0x9f8>
   11f0c:	mov	r3, #1
   11f10:	strb	r3, [r4, #132]	; 0x84
   11f14:	b	11ddc <__assert_fail@plt+0x9f8>
   11f18:	ldr	r1, [pc, #420]	; 120c4 <__assert_fail@plt+0xce0>
   11f1c:	mov	r2, #5
   11f20:	mov	r0, #0
   11f24:	bl	11168 <dcgettext@plt>
   11f28:	mov	r1, #0
   11f2c:	mov	r2, r0
   11f30:	mov	r0, #1
   11f34:	bl	11204 <error@plt>
   11f38:	mov	r1, r3
   11f3c:	mov	r0, r3
   11f40:	bl	138a8 <__assert_fail@plt+0x24c4>
   11f44:	b	11e64 <__assert_fail@plt+0xa80>
   11f48:	ldrb	r3, [r4, #132]	; 0x84
   11f4c:	ldr	r2, [sp, #52]	; 0x34
   11f50:	eor	r3, r3, #1
   11f54:	tst	r2, r3
   11f58:	beq	11ddc <__assert_fail@plt+0x9f8>
   11f5c:	cmp	r1, #0
   11f60:	bne	11f70 <__assert_fail@plt+0xb8c>
   11f64:	ldrb	r3, [r4, #36]	; 0x24
   11f68:	cmp	r3, #0
   11f6c:	beq	11ddc <__assert_fail@plt+0x9f8>
   11f70:	ldrb	r3, [r4, #156]	; 0x9c
   11f74:	cmp	r3, #0
   11f78:	bne	11f0c <__assert_fail@plt+0xb28>
   11f7c:	ldr	r2, [r4, #32]
   11f80:	mov	r3, #1
   11f84:	cmp	r2, #0
   11f88:	strb	r3, [r4, #182]	; 0xb6
   11f8c:	bgt	11f0c <__assert_fail@plt+0xb28>
   11f90:	b	11ddc <__assert_fail@plt+0x9f8>
   11f94:	ldrb	r3, [r4, #36]	; 0x24
   11f98:	cmp	r3, #0
   11f9c:	moveq	r3, #1
   11fa0:	strbeq	r3, [r4, #182]	; 0xb6
   11fa4:	beq	11ddc <__assert_fail@plt+0x9f8>
   11fa8:	b	11ef8 <__assert_fail@plt+0xb14>
   11fac:	ldr	r1, [sp, #48]	; 0x30
   11fb0:	ldr	r0, [sp, #36]	; 0x24
   11fb4:	bl	138a8 <__assert_fail@plt+0x24c4>
   11fb8:	b	11e64 <__assert_fail@plt+0xa80>
   11fbc:	str	r3, [sp, #52]	; 0x34
   11fc0:	str	r3, [sp, #40]	; 0x28
   11fc4:	b	11940 <__assert_fail@plt+0x55c>
   11fc8:	ldr	r0, [pc, #248]	; 120c8 <__assert_fail@plt+0xce4>
   11fcc:	bl	11210 <getenv@plt>
   11fd0:	cmp	r0, #0
   11fd4:	beq	11fec <__assert_fail@plt+0xc08>
   11fd8:	mov	r0, #2
   11fdc:	bl	15240 <__assert_fail@plt+0x3e5c>
   11fe0:	cmp	r0, #0
   11fe4:	ldreq	r3, [pc, #224]	; 120cc <__assert_fail@plt+0xce8>
   11fe8:	beq	11ff0 <__assert_fail@plt+0xc0c>
   11fec:	ldr	r3, [pc, #220]	; 120d0 <__assert_fail@plt+0xcec>
   11ff0:	str	r3, [r4, #52]	; 0x34
   11ff4:	b	11d80 <__assert_fail@plt+0x99c>
   11ff8:	bl	112c4 <__errno_location@plt>
   11ffc:	mov	r2, #5
   12000:	ldr	r1, [pc, #204]	; 120d4 <__assert_fail@plt+0xcf0>
   12004:	ldr	r4, [r0]
   12008:	mov	r0, #0
   1200c:	bl	11168 <dcgettext@plt>
   12010:	mov	r1, r4
   12014:	mov	r2, r0
   12018:	mov	r0, #1
   1201c:	bl	11204 <error@plt>
   12020:	mov	r2, #5
   12024:	ldr	r1, [pc, #172]	; 120d8 <__assert_fail@plt+0xcf4>
   12028:	bl	11168 <dcgettext@plt>
   1202c:	mov	r5, r0
   12030:	ldr	r0, [fp]
   12034:	bl	18e40 <__assert_fail@plt+0x7a5c>
   12038:	mov	r2, r5
   1203c:	mov	r1, r4
   12040:	mov	r3, r0
   12044:	mov	r0, #1
   12048:	bl	11204 <error@plt>
   1204c:	mov	r2, #5
   12050:	ldr	r1, [pc, #132]	; 120dc <__assert_fail@plt+0xcf8>
   12054:	b	11f20 <__assert_fail@plt+0xb3c>
   12058:	ldrdeq	fp, [r1], -ip
   1205c:	andeq	sp, r1, r4, ror r1
   12060:	andeq	sp, r1, ip, rrx
   12064:	andeq	r4, r1, r4, asr lr
   12068:	andeq	fp, r1, r8, asr #26
   1206c:	strdeq	lr, [r2], -r0
   12070:	andeq	lr, r2, r8, ror #3
   12074:	andeq	fp, r1, r0, lsr pc
   12078:	andeq	sp, r1, r0, asr r2
   1207c:	andeq	lr, r2, r0, asr #2
   12080:	andeq	sp, r1, r0, lsr r2
   12084:	andeq	lr, r2, r0, ror r1
   12088:	ldrdeq	sp, [r1], -r8
   1208c:	andeq	lr, r2, ip, asr r1
   12090:	andeq	lr, r2, r4, ror #2
   12094:	andeq	lr, r2, r0, lsl #3
   12098:	andeq	lr, r2, r4, ror #3
   1209c:			; <UNDEFINED> instruction: 0x0001d2b0
   120a0:	andeq	sp, r1, r0, asr #5
   120a4:	andeq	sp, r1, r8, rrx
   120a8:	andeq	ip, r1, r0, asr r0
   120ac:	andeq	sp, r1, r0, lsl #5
   120b0:	andeq	sp, r1, r4, lsl #4
   120b4:	andeq	sp, r1, r0, ror #5
   120b8:	andeq	sp, r1, r0, lsr #6
   120bc:	ldrdeq	lr, [r2], -r0
   120c0:	andeq	lr, r2, r0, ror #3
   120c4:	andeq	sp, r1, r4, ror #5
   120c8:	ldrdeq	sp, [r1], -r0
   120cc:	andeq	sp, r1, r4, asr r1
   120d0:	andeq	sp, r1, r4, ror #2
   120d4:	strdeq	fp, [r1], -r0
   120d8:	andeq	sp, r1, r0, asr #3
   120dc:	andeq	sp, r1, ip, lsl #3
   120e0:	mov	fp, #0
   120e4:	mov	lr, #0
   120e8:	pop	{r1}		; (ldr r1, [sp], #4)
   120ec:	mov	r2, sp
   120f0:	push	{r2}		; (str r2, [sp, #-4]!)
   120f4:	push	{r0}		; (str r0, [sp, #-4]!)
   120f8:	ldr	ip, [pc, #16]	; 12110 <__assert_fail@plt+0xd2c>
   120fc:	push	{ip}		; (str ip, [sp, #-4]!)
   12100:	ldr	r0, [pc, #12]	; 12114 <__assert_fail@plt+0xd30>
   12104:	ldr	r3, [pc, #12]	; 12118 <__assert_fail@plt+0xd34>
   12108:	bl	11228 <__libc_start_main@plt>
   1210c:	bl	113cc <abort@plt>
   12110:	andeq	fp, r1, r0, lsr #26
   12114:	strdeq	r1, [r1], -r0
   12118:	andeq	fp, r1, r0, asr #25
   1211c:	ldr	r3, [pc, #20]	; 12138 <__assert_fail@plt+0xd54>
   12120:	ldr	r2, [pc, #20]	; 1213c <__assert_fail@plt+0xd58>
   12124:	add	r3, pc, r3
   12128:	ldr	r2, [r3, r2]
   1212c:	cmp	r2, #0
   12130:	bxeq	lr
   12134:	b	11264 <__gmon_start__@plt>
   12138:	ldrdeq	fp, [r1], -r4
   1213c:	andeq	r0, r0, r0, lsr r1
   12140:	ldr	r3, [pc, #28]	; 12164 <__assert_fail@plt+0xd80>
   12144:	ldr	r0, [pc, #28]	; 12168 <__assert_fail@plt+0xd84>
   12148:	sub	r3, r3, r0
   1214c:	cmp	r3, #6
   12150:	bxls	lr
   12154:	ldr	r3, [pc, #16]	; 1216c <__assert_fail@plt+0xd88>
   12158:	cmp	r3, #0
   1215c:	bxeq	lr
   12160:	bx	r3
   12164:	andeq	lr, r2, fp, asr #3
   12168:	andeq	lr, r2, r8, asr #3
   1216c:	andeq	r0, r0, r0
   12170:	ldr	r1, [pc, #36]	; 1219c <__assert_fail@plt+0xdb8>
   12174:	ldr	r0, [pc, #36]	; 121a0 <__assert_fail@plt+0xdbc>
   12178:	sub	r1, r1, r0
   1217c:	asr	r1, r1, #2
   12180:	add	r1, r1, r1, lsr #31
   12184:	asrs	r1, r1, #1
   12188:	bxeq	lr
   1218c:	ldr	r3, [pc, #16]	; 121a4 <__assert_fail@plt+0xdc0>
   12190:	cmp	r3, #0
   12194:	bxeq	lr
   12198:	bx	r3
   1219c:	andeq	lr, r2, r8, asr #3
   121a0:	andeq	lr, r2, r8, asr #3
   121a4:	andeq	r0, r0, r0
   121a8:	push	{r4, lr}
   121ac:	ldr	r4, [pc, #24]	; 121cc <__assert_fail@plt+0xde8>
   121b0:	ldrb	r3, [r4]
   121b4:	cmp	r3, #0
   121b8:	popne	{r4, pc}
   121bc:	bl	12140 <__assert_fail@plt+0xd5c>
   121c0:	mov	r3, #1
   121c4:	strb	r3, [r4]
   121c8:	pop	{r4, pc}
   121cc:	andeq	lr, r2, ip, ror #3
   121d0:	ldr	r0, [pc, #40]	; 12200 <__assert_fail@plt+0xe1c>
   121d4:	ldr	r3, [r0]
   121d8:	cmp	r3, #0
   121dc:	bne	121e4 <__assert_fail@plt+0xe00>
   121e0:	b	12170 <__assert_fail@plt+0xd8c>
   121e4:	ldr	r3, [pc, #24]	; 12204 <__assert_fail@plt+0xe20>
   121e8:	cmp	r3, #0
   121ec:	beq	121e0 <__assert_fail@plt+0xdfc>
   121f0:	push	{r4, lr}
   121f4:	blx	r3
   121f8:	pop	{r4, lr}
   121fc:	b	12170 <__assert_fail@plt+0xd8c>
   12200:	andeq	sp, r2, r4, lsl pc
   12204:	andeq	r0, r0, r0
   12208:	ldr	r2, [pc, #108]	; 1227c <__assert_fail@plt+0xe98>
   1220c:	ldr	r3, [pc, #108]	; 12280 <__assert_fail@plt+0xe9c>
   12210:	ldr	ip, [r2]
   12214:	ldr	r3, [r3]
   12218:	cmp	ip, #0
   1221c:	beq	12274 <__assert_fail@plt+0xe90>
   12220:	mov	r0, #0
   12224:	push	{lr}		; (str lr, [sp, #-4]!)
   12228:	ldrb	lr, [r2, #4]
   1222c:	mov	r2, r0
   12230:	ldr	r1, [r3, #8]
   12234:	add	r2, r2, #1
   12238:	cmp	r1, #1
   1223c:	bls	12260 <__assert_fail@plt+0xe7c>
   12240:	cmp	lr, #0
   12244:	beq	12264 <__assert_fail@plt+0xe80>
   12248:	ldr	r1, [r3, #24]
   1224c:	cmp	r1, #0
   12250:	ble	12264 <__assert_fail@plt+0xe80>
   12254:	ldr	r1, [r3, #28]
   12258:	cmp	r1, #0
   1225c:	ble	12264 <__assert_fail@plt+0xe80>
   12260:	add	r0, r0, #1
   12264:	cmp	r2, ip
   12268:	add	r3, r3, #40	; 0x28
   1226c:	bne	12230 <__assert_fail@plt+0xe4c>
   12270:	pop	{pc}		; (ldr pc, [sp], #4)
   12274:	mov	r0, ip
   12278:	bx	lr
   1227c:	andeq	lr, r2, r0, asr #2
   12280:	strdeq	lr, [r2], -r0
   12284:	push	{r4, r5, r6, r7, lr}
   12288:	ldr	r6, [pc, #116]	; 12304 <__assert_fail@plt+0xf20>
   1228c:	ldr	r5, [pc, #116]	; 12308 <__assert_fail@plt+0xf24>
   12290:	ldr	r2, [r6]
   12294:	ldr	r7, [r5]
   12298:	cmp	r2, #0
   1229c:	beq	122dc <__assert_fail@plt+0xef8>
   122a0:	mov	ip, #0
   122a4:	ldr	r0, [r5, #4]
   122a8:	mov	r4, ip
   122ac:	mov	r3, r7
   122b0:	mov	lr, #1
   122b4:	ldr	r1, [r3, #8]
   122b8:	add	r3, r3, #40	; 0x28
   122bc:	cmp	r1, #2
   122c0:	streq	r4, [r3, #-32]	; 0xffffffe0
   122c4:	addeq	r0, r0, #1
   122c8:	moveq	ip, lr
   122cc:	subs	r2, r2, #1
   122d0:	bne	122b4 <__assert_fail@plt+0xed0>
   122d4:	cmp	ip, #0
   122d8:	strne	r0, [r5, #4]
   122dc:	ldrb	r3, [r6, #4]
   122e0:	cmp	r3, #0
   122e4:	beq	12300 <__assert_fail@plt+0xf1c>
   122e8:	ldr	r3, [r7, #8]
   122ec:	cmp	r3, #3
   122f0:	moveq	r3, #0
   122f4:	movne	r3, #1
   122f8:	str	r3, [r5, #4]
   122fc:	pop	{r4, r5, r6, r7, pc}
   12300:	pop	{r4, r5, r6, r7, pc}
   12304:	andeq	lr, r2, r0, asr #2
   12308:	strdeq	lr, [r2], -r0
   1230c:	push	{r4, r5, r6, lr}
   12310:	mov	r5, r0
   12314:	ldr	r4, [pc, #60]	; 12358 <__assert_fail@plt+0xf74>
   12318:	ldr	r3, [r4, #8]
   1231c:	ldr	r2, [r4, #12]
   12320:	cmp	r3, r2
   12324:	bcs	1233c <__assert_fail@plt+0xf58>
   12328:	ldr	r1, [r4, #16]
   1232c:	add	r2, r3, #1
   12330:	strb	r5, [r1, r3]
   12334:	str	r2, [r4, #8]
   12338:	pop	{r4, r5, r6, pc}
   1233c:	add	r1, r4, #12
   12340:	ldr	r0, [r4, #16]
   12344:	bl	19a2c <__assert_fail@plt+0x8648>
   12348:	ldr	r3, [r4, #8]
   1234c:	mov	r1, r0
   12350:	str	r0, [r4, #16]
   12354:	b	1232c <__assert_fail@plt+0xf48>
   12358:	strdeq	lr, [r2], -r0
   1235c:	mov	r2, #5
   12360:	ldr	r1, [pc, #24]	; 12380 <__assert_fail@plt+0xf9c>
   12364:	push	{r4, lr}
   12368:	mov	r0, #0
   1236c:	bl	11168 <dcgettext@plt>
   12370:	mov	r1, #0
   12374:	mov	r2, r0
   12378:	mov	r0, #1
   1237c:	bl	11204 <error@plt>
   12380:	andeq	fp, r1, r8, ror #30
   12384:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12388:	sub	sp, sp, #32
   1238c:	ldr	r6, [pc, #236]	; 12480 <__assert_fail@plt+0x109c>
   12390:	mvn	sl, #0
   12394:	mvn	fp, #0
   12398:	add	r3, sp, #16
   1239c:	mov	r4, r2
   123a0:	mov	r7, r0
   123a4:	mov	r8, r1
   123a8:	mov	r0, r2
   123ac:	str	r6, [sp]
   123b0:	add	r1, sp, #12
   123b4:	mov	r2, #10
   123b8:	strd	sl, [sp, #24]
   123bc:	bl	1ac90 <__assert_fail@plt+0x98ac>
   123c0:	bics	r3, r0, #2
   123c4:	bne	1246c <__assert_fail@plt+0x1088>
   123c8:	ldr	r0, [sp, #12]
   123cc:	cmp	r4, r0
   123d0:	beq	12458 <__assert_fail@plt+0x1074>
   123d4:	ldrd	r2, [sp, #16]
   123d8:	orrs	r1, r2, r3
   123dc:	beq	12458 <__assert_fail@plt+0x1074>
   123e0:	ldrb	r1, [r0]
   123e4:	cmp	r1, #58	; 0x3a
   123e8:	beq	12414 <__assert_fail@plt+0x1030>
   123ec:	cmp	r1, #0
   123f0:	bne	12458 <__assert_fail@plt+0x1074>
   123f4:	ldr	ip, [pc, #136]	; 12484 <__assert_fail@plt+0x10a0>
   123f8:	ldr	r1, [pc, #136]	; 12488 <__assert_fail@plt+0x10a4>
   123fc:	ldrd	r4, [sp, #24]
   12400:	mov	r0, #1
   12404:	strd	r2, [ip, #24]
   12408:	strd	r4, [r1, #8]
   1240c:	add	sp, sp, #32
   12410:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12414:	add	r5, r0, #1
   12418:	str	r6, [sp]
   1241c:	add	r1, sp, #12
   12420:	mov	r0, r5
   12424:	add	r3, sp, #24
   12428:	mov	r2, #10
   1242c:	bl	1ac90 <__assert_fail@plt+0x98ac>
   12430:	cmp	r0, #0
   12434:	bne	1246c <__assert_fail@plt+0x1088>
   12438:	ldr	r1, [sp, #12]
   1243c:	cmp	r5, r1
   12440:	beq	12458 <__assert_fail@plt+0x1074>
   12444:	ldrd	r4, [sp, #24]
   12448:	ldrd	r2, [sp, #16]
   1244c:	cmp	r5, r3
   12450:	cmpeq	r4, r2
   12454:	bcs	12464 <__assert_fail@plt+0x1080>
   12458:	mov	r0, #0
   1245c:	add	sp, sp, #32
   12460:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12464:	ldrb	r1, [r1]
   12468:	b	123ec <__assert_fail@plt+0x1008>
   1246c:	str	r4, [sp]
   12470:	mov	r2, r8
   12474:	mov	r1, r7
   12478:	ldr	r3, [pc, #12]	; 1248c <__assert_fail@plt+0x10a8>
   1247c:	bl	1ab48 <__assert_fail@plt+0x9764>
   12480:	ldrdeq	fp, [r1], -ip
   12484:	strdeq	lr, [r2], -r0
   12488:	andeq	lr, r2, r0, asr #2
   1248c:	andeq	fp, r1, r8, asr #26
   12490:	push	{r4, lr}
   12494:	mov	r4, r0
   12498:	bl	11294 <strlen@plt>
   1249c:	cmp	r0, #0
   124a0:	blt	124b8 <__assert_fail@plt+0x10d4>
   124a4:	ldr	r2, [pc, #16]	; 124bc <__assert_fail@plt+0x10d8>
   124a8:	ldr	r3, [pc, #16]	; 124c0 <__assert_fail@plt+0x10dc>
   124ac:	str	r0, [r2, #32]
   124b0:	str	r4, [r3, #16]
   124b4:	pop	{r4, pc}
   124b8:	bl	1235c <__assert_fail@plt+0xf78>
   124bc:	strdeq	lr, [r2], -r0
   124c0:	andeq	lr, r2, r0, asr #2
   124c4:	push	{r4, r6, r7, lr}
   124c8:	mov	r2, #5
   124cc:	sub	sp, sp, #24
   124d0:	mov	r4, r0
   124d4:	ldr	r1, [pc, #80]	; 1252c <__assert_fail@plt+0x1148>
   124d8:	mov	r0, #0
   124dc:	bl	11168 <dcgettext@plt>
   124e0:	mvn	r6, #-2147483648	; 0x80000000
   124e4:	ldr	r2, [pc, #68]	; 12530 <__assert_fail@plt+0x114c>
   124e8:	mov	r7, #0
   124ec:	mov	r3, #0
   124f0:	str	r2, [sp, #8]
   124f4:	str	r3, [sp, #16]
   124f8:	strd	r6, [sp]
   124fc:	mov	r2, #1
   12500:	mov	r3, #0
   12504:	str	r0, [sp, #12]
   12508:	mov	r0, r4
   1250c:	bl	19f78 <__assert_fail@plt+0x8b94>
   12510:	ldr	r3, [pc, #28]	; 12534 <__assert_fail@plt+0x1150>
   12514:	ldr	r2, [pc, #28]	; 12538 <__assert_fail@plt+0x1154>
   12518:	mov	r1, #1
   1251c:	strb	r1, [r2, #36]	; 0x24
   12520:	str	r0, [r3]
   12524:	add	sp, sp, #24
   12528:	pop	{r4, r6, r7, pc}
   1252c:	andeq	fp, r1, ip, ror pc
   12530:	ldrdeq	fp, [r1], -ip
   12534:	andeq	lr, r2, r0, asr #2
   12538:	strdeq	lr, [r2], -r0
   1253c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12540:	mov	r8, r1
   12544:	sub	sp, sp, #196	; 0xc4
   12548:	ldr	r1, [pc, #384]	; 126d0 <__assert_fail@plt+0x12ec>
   1254c:	mov	r5, r0
   12550:	bl	110c0 <strcmp@plt>
   12554:	cmp	r0, #0
   12558:	beq	12654 <__assert_fail@plt+0x1270>
   1255c:	cmp	r8, #0
   12560:	blt	1257c <__assert_fail@plt+0x1198>
   12564:	add	r2, sp, #88	; 0x58
   12568:	mov	r1, r8
   1256c:	mov	r0, #3
   12570:	bl	111bc <__fxstat64@plt>
   12574:	cmp	r0, #0
   12578:	beq	1265c <__assert_fail@plt+0x1278>
   1257c:	ldr	r4, [pc, #336]	; 126d4 <__assert_fail@plt+0x12f0>
   12580:	add	r6, r4, #40	; 0x28
   12584:	ldr	r3, [r4, #40]	; 0x28
   12588:	cmp	r3, #0
   1258c:	beq	12688 <__assert_fail@plt+0x12a4>
   12590:	ldm	r6, {r0, r1}
   12594:	add	r3, sp, #12
   12598:	stm	r3, {r0, r1}
   1259c:	ldr	r7, [sp, #16]
   125a0:	mov	r1, r3
   125a4:	add	r2, sp, #44	; 0x2c
   125a8:	ldr	r0, [r4, #48]	; 0x30
   125ac:	bl	19210 <__assert_fail@plt+0x7e2c>
   125b0:	cmp	r0, #0
   125b4:	beq	12694 <__assert_fail@plt+0x12b0>
   125b8:	ldr	r3, [r4, #48]	; 0x30
   125bc:	ldr	r2, [r4, #52]	; 0x34
   125c0:	mvn	r1, #0
   125c4:	stm	sp, {r3, r7}
   125c8:	mov	r0, #0
   125cc:	add	r3, sp, #44	; 0x2c
   125d0:	bl	16f3c <__assert_fail@plt+0x5b58>
   125d4:	add	r9, r0, #1
   125d8:	mov	r0, r9
   125dc:	bl	198a8 <__assert_fail@plt+0x84c4>
   125e0:	ldr	ip, [r4, #48]	; 0x30
   125e4:	ldr	r2, [r4, #52]	; 0x34
   125e8:	mov	r1, r9
   125ec:	str	r7, [sp, #4]
   125f0:	add	r3, sp, #44	; 0x2c
   125f4:	str	ip, [sp]
   125f8:	mov	r6, r0
   125fc:	bl	16f3c <__assert_fail@plt+0x5b58>
   12600:	ldr	r0, [r4, #56]	; 0x38
   12604:	bl	15110 <__assert_fail@plt+0x3d2c>
   12608:	ldr	r3, [r4, #60]	; 0x3c
   1260c:	str	r6, [r4, #56]	; 0x38
   12610:	cmp	r3, #0
   12614:	movne	r5, r3
   12618:	beq	12678 <__assert_fail@plt+0x1294>
   1261c:	ldr	r3, [pc, #180]	; 126d8 <__assert_fail@plt+0x12f4>
   12620:	mov	r0, r6
   12624:	mov	r1, #0
   12628:	str	r5, [r4, #64]	; 0x40
   1262c:	ldr	r5, [r3, #20]
   12630:	bl	15528 <__assert_fail@plt+0x4144>
   12634:	mov	r1, #0
   12638:	sub	r5, r5, r0
   1263c:	ldr	r0, [r4, #64]	; 0x40
   12640:	bl	15528 <__assert_fail@plt+0x4144>
   12644:	sub	r0, r5, r0
   12648:	str	r0, [r4, #68]	; 0x44
   1264c:	add	sp, sp, #196	; 0xc4
   12650:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12654:	mvn	r8, #0
   12658:	b	1257c <__assert_fail@plt+0x1198>
   1265c:	ldr	r3, [sp, #168]	; 0xa8
   12660:	ldr	r7, [sp, #172]	; 0xac
   12664:	str	r3, [sp, #12]
   12668:	str	r7, [sp, #16]
   1266c:	ldr	r4, [pc, #96]	; 126d4 <__assert_fail@plt+0x12f0>
   12670:	add	r3, sp, #12
   12674:	b	125a0 <__assert_fail@plt+0x11bc>
   12678:	ldr	r3, [pc, #92]	; 126dc <__assert_fail@plt+0x12f8>
   1267c:	cmp	r8, #0
   12680:	movlt	r5, r3
   12684:	b	1261c <__assert_fail@plt+0x1238>
   12688:	mov	r0, r6
   1268c:	bl	15208 <__assert_fail@plt+0x3e24>
   12690:	b	12590 <__assert_fail@plt+0x11ac>
   12694:	mov	r0, #33	; 0x21
   12698:	bl	198a8 <__assert_fail@plt+0x84c4>
   1269c:	add	r2, sp, #20
   126a0:	mov	r6, r0
   126a4:	ldr	r0, [sp, #12]
   126a8:	asr	r1, r0, #31
   126ac:	bl	1529c <__assert_fail@plt+0x3eb8>
   126b0:	str	r7, [sp, #4]
   126b4:	ldr	r3, [pc, #36]	; 126e0 <__assert_fail@plt+0x12fc>
   126b8:	mov	r2, #33	; 0x21
   126bc:	mov	r1, #1
   126c0:	str	r0, [sp]
   126c4:	mov	r0, r6
   126c8:	bl	112d0 <__sprintf_chk@plt>
   126cc:	b	12600 <__assert_fail@plt+0x121c>
   126d0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   126d4:	strdeq	lr, [r2], -r0
   126d8:	andeq	lr, r2, r0, asr #2
   126dc:	ldrdeq	fp, [r1], -ip
   126e0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   126e4:	ldr	r3, [r0, #8]
   126e8:	cmp	r3, #3
   126ec:	bxeq	lr
   126f0:	push	{r4, r5, r6, lr}
   126f4:	mov	r4, r0
   126f8:	bl	112c4 <__errno_location@plt>
   126fc:	ldr	r3, [r4]
   12700:	ldr	r5, [r0]
   12704:	mov	r6, r0
   12708:	mov	r0, r3
   1270c:	ldr	r3, [r3]
   12710:	tst	r3, #32
   12714:	moveq	r5, #0
   12718:	bl	11300 <fileno@plt>
   1271c:	cmp	r0, #0
   12720:	ldr	r0, [r4]
   12724:	bne	12788 <__assert_fail@plt+0x13a4>
   12728:	bl	11384 <clearerr_unlocked@plt>
   1272c:	cmp	r5, #0
   12730:	bne	127b4 <__assert_fail@plt+0x13d0>
   12734:	ldr	ip, [pc, #156]	; 127d8 <__assert_fail@plt+0x13f4>
   12738:	ldrb	r3, [ip, #72]	; 0x48
   1273c:	cmp	r3, #0
   12740:	bne	127a4 <__assert_fail@plt+0x13c0>
   12744:	ldr	r2, [pc, #144]	; 127dc <__assert_fail@plt+0x13f8>
   12748:	ldr	r3, [ip]
   1274c:	ldr	r2, [r2]
   12750:	cmp	r2, #0
   12754:	beq	12778 <__assert_fail@plt+0x1394>
   12758:	mov	r0, #3
   1275c:	ldr	r1, [r3, #24]
   12760:	str	r0, [r3, #8]
   12764:	cmp	r1, #0
   12768:	streq	r1, [r3, #28]
   1276c:	subs	r2, r2, #1
   12770:	add	r3, r3, #40	; 0x28
   12774:	bne	1275c <__assert_fail@plt+0x1378>
   12778:	ldr	r3, [ip, #4]
   1277c:	sub	r3, r3, #1
   12780:	str	r3, [ip, #4]
   12784:	pop	{r4, r5, r6, pc}
   12788:	bl	14f78 <__assert_fail@plt+0x3b94>
   1278c:	cmp	r0, #0
   12790:	beq	1272c <__assert_fail@plt+0x1348>
   12794:	cmp	r5, #0
   12798:	bne	127b4 <__assert_fail@plt+0x13d0>
   1279c:	ldr	r5, [r6]
   127a0:	b	1272c <__assert_fail@plt+0x1348>
   127a4:	mov	r3, #3
   127a8:	str	r5, [r4, #28]
   127ac:	str	r3, [r4, #8]
   127b0:	b	12778 <__assert_fail@plt+0x1394>
   127b4:	ldr	r2, [r4, #4]
   127b8:	mov	r1, #3
   127bc:	mov	r0, #0
   127c0:	bl	18cbc <__assert_fail@plt+0x78d8>
   127c4:	mov	r1, r5
   127c8:	ldr	r2, [pc, #16]	; 127e0 <__assert_fail@plt+0x13fc>
   127cc:	mov	r3, r0
   127d0:	mov	r0, #1
   127d4:	bl	11204 <error@plt>
   127d8:	strdeq	lr, [r2], -r0
   127dc:	andeq	lr, r2, r0, asr #2
   127e0:	andeq	sp, r1, r8, lsr #10
   127e4:	push	{r4, r5, r6, r7, r8, lr}
   127e8:	ldr	r7, [pc, #108]	; 1285c <__assert_fail@plt+0x1478>
   127ec:	ldrb	r3, [r7, #80]	; 0x50
   127f0:	ldr	r4, [r7, #76]	; 0x4c
   127f4:	cmp	r3, #0
   127f8:	bne	12850 <__assert_fail@plt+0x146c>
   127fc:	ldr	r8, [pc, #92]	; 12860 <__assert_fail@plt+0x147c>
   12800:	mov	r5, r0
   12804:	mov	r6, #32
   12808:	add	r4, r4, #1
   1280c:	cmp	r5, r4
   12810:	blt	12848 <__assert_fail@plt+0x1464>
   12814:	ldr	r0, [r8]
   12818:	ldr	r3, [r0, #20]
   1281c:	ldr	r2, [r0, #24]
   12820:	add	r1, r3, #1
   12824:	cmp	r3, r2
   12828:	strcc	r1, [r0, #20]
   1282c:	strbcc	r6, [r3]
   12830:	bcc	12808 <__assert_fail@plt+0x1424>
   12834:	mov	r1, r6
   12838:	add	r4, r4, #1
   1283c:	bl	11348 <__overflow@plt>
   12840:	cmp	r5, r4
   12844:	bge	12814 <__assert_fail@plt+0x1430>
   12848:	str	r5, [r7, #76]	; 0x4c
   1284c:	pop	{r4, r5, r6, r7, r8, pc}
   12850:	sub	r0, r0, r4
   12854:	str	r0, [r7, #84]	; 0x54
   12858:	pop	{r4, r5, r6, r7, r8, pc}
   1285c:	strdeq	lr, [r2], -r0
   12860:	andeq	lr, r2, r4, ror #3
   12864:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12868:	ldr	r7, [pc, #200]	; 12938 <__assert_fail@plt+0x1554>
   1286c:	ldr	r6, [pc, #200]	; 1293c <__assert_fail@plt+0x1558>
   12870:	ldr	r8, [pc, #200]	; 12940 <__assert_fail@plt+0x155c>
   12874:	ldr	r5, [r7, #76]	; 0x4c
   12878:	ldr	r9, [r7, #84]	; 0x54
   1287c:	add	r9, r5, r9
   12880:	b	12888 <__assert_fail@plt+0x14a4>
   12884:	mov	r5, r4
   12888:	sub	r3, r9, r5
   1288c:	cmp	r3, #1
   12890:	mov	r0, r5
   12894:	ble	128e0 <__assert_fail@plt+0x14fc>
   12898:	ldr	r4, [r6, #28]
   1289c:	mov	r1, r4
   128a0:	bl	1ba58 <__assert_fail@plt+0xa674>
   128a4:	sub	r4, r4, r1
   128a8:	add	r4, r4, r5
   128ac:	cmp	r9, r4
   128b0:	blt	128e0 <__assert_fail@plt+0x14fc>
   128b4:	ldr	r0, [r8]
   128b8:	ldrb	r1, [r6, #24]
   128bc:	ldr	r3, [r0, #20]
   128c0:	ldr	r2, [r0, #24]
   128c4:	add	ip, r3, #1
   128c8:	cmp	r3, r2
   128cc:	strcc	ip, [r0, #20]
   128d0:	strbcc	r1, [r3]
   128d4:	bcc	12884 <__assert_fail@plt+0x14a0>
   128d8:	bl	11348 <__overflow@plt>
   128dc:	b	12884 <__assert_fail@plt+0x14a0>
   128e0:	ldr	r6, [pc, #88]	; 12940 <__assert_fail@plt+0x155c>
   128e4:	mov	r4, #32
   128e8:	add	r5, r5, #1
   128ec:	cmp	r9, r5
   128f0:	blt	12928 <__assert_fail@plt+0x1544>
   128f4:	ldr	r0, [r6]
   128f8:	ldr	r3, [r0, #20]
   128fc:	ldr	r2, [r0, #24]
   12900:	add	r1, r3, #1
   12904:	cmp	r3, r2
   12908:	strcc	r1, [r0, #20]
   1290c:	strbcc	r4, [r3]
   12910:	bcc	128e8 <__assert_fail@plt+0x1504>
   12914:	mov	r1, r4
   12918:	add	r5, r5, #1
   1291c:	bl	11348 <__overflow@plt>
   12920:	cmp	r9, r5
   12924:	bge	128f4 <__assert_fail@plt+0x1510>
   12928:	mov	r3, #0
   1292c:	str	r9, [r7, #76]	; 0x4c
   12930:	str	r3, [r7, #84]	; 0x54
   12934:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12938:	strdeq	lr, [r2], -r0
   1293c:	andeq	lr, r2, r0, asr #2
   12940:	andeq	lr, r2, r4, ror #3
   12944:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12948:	ldr	r9, [pc, #220]	; 12a2c <__assert_fail@plt+0x1648>
   1294c:	ldr	r3, [r9, #88]	; 0x58
   12950:	cmp	r3, #0
   12954:	ble	12a18 <__assert_fail@plt+0x1634>
   12958:	ldr	r3, [pc, #208]	; 12a30 <__assert_fail@plt+0x164c>
   1295c:	ldr	r7, [r9, #32]
   12960:	ldr	r6, [pc, #204]	; 12a34 <__assert_fail@plt+0x1650>
   12964:	ldr	r8, [r3, #16]
   12968:	ldr	r2, [r9, #84]	; 0x54
   1296c:	mov	r5, r7
   12970:	add	r4, r8, #1
   12974:	b	129d4 <__assert_fail@plt+0x15f0>
   12978:	ldrb	r1, [r4, #-1]
   1297c:	cmp	r1, #32
   12980:	addeq	r2, r2, #1
   12984:	streq	r2, [r9, #84]	; 0x54
   12988:	beq	129cc <__assert_fail@plt+0x15e8>
   1298c:	cmp	r2, #0
   12990:	ble	1299c <__assert_fail@plt+0x15b8>
   12994:	bl	12864 <__assert_fail@plt+0x1480>
   12998:	ldrb	r1, [r4, #-1]
   1299c:	ldr	r0, [r6]
   129a0:	ldr	r3, [r0, #20]
   129a4:	ldr	r2, [r0, #24]
   129a8:	add	ip, r3, #1
   129ac:	cmp	r3, r2
   129b0:	strcc	ip, [r0, #20]
   129b4:	strbcc	r1, [r3]
   129b8:	bcs	12a10 <__assert_fail@plt+0x162c>
   129bc:	ldr	r3, [r9, #76]	; 0x4c
   129c0:	ldr	r2, [r9, #84]	; 0x54
   129c4:	add	r3, r3, #1
   129c8:	str	r3, [r9, #76]	; 0x4c
   129cc:	sub	r5, r5, #1
   129d0:	add	r4, r4, #1
   129d4:	cmp	r5, #0
   129d8:	bgt	12978 <__assert_fail@plt+0x1594>
   129dc:	bic	r3, r7, r7, asr #31
   129e0:	cmp	r2, #0
   129e4:	sub	r7, r7, #1
   129e8:	add	r8, r8, r3
   129ec:	sub	r7, r7, r3
   129f0:	ble	129f8 <__assert_fail@plt+0x1614>
   129f4:	bl	12864 <__assert_fail@plt+0x1480>
   129f8:	ldr	r3, [r9, #88]	; 0x58
   129fc:	sub	r3, r3, #1
   12a00:	cmp	r3, #0
   12a04:	str	r3, [r9, #88]	; 0x58
   12a08:	bgt	12968 <__assert_fail@plt+0x1584>
   12a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a10:	bl	11348 <__overflow@plt>
   12a14:	b	129bc <__assert_fail@plt+0x15d8>
   12a18:	ldr	r3, [r9, #84]	; 0x54
   12a1c:	cmp	r3, #0
   12a20:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a24:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12a28:	b	12864 <__assert_fail@plt+0x1480>
   12a2c:	strdeq	lr, [r2], -r0
   12a30:	andeq	lr, r2, r0, asr #2
   12a34:	andeq	lr, r2, r4, ror #3
   12a38:	push	{r4, r5, r6, r7, r8, r9, lr}
   12a3c:	mov	r6, #0
   12a40:	ldr	r4, [pc, #208]	; 12b18 <__assert_fail@plt+0x1734>
   12a44:	sub	sp, sp, #316	; 0x13c
   12a48:	ldr	r0, [r4, #92]	; 0x5c
   12a4c:	str	r6, [r4, #76]	; 0x4c
   12a50:	bl	127e4 <__assert_fail@plt+0x1400>
   12a54:	bl	12864 <__assert_fail@plt+0x1480>
   12a58:	ldrd	r8, [r4, #96]	; 0x60
   12a5c:	mov	r2, #5
   12a60:	orrs	r3, r8, r9
   12a64:	beq	12afc <__assert_fail@plt+0x1718>
   12a68:	ldr	r1, [pc, #172]	; 12b1c <__assert_fail@plt+0x1738>
   12a6c:	mov	r0, r6
   12a70:	bl	11168 <dcgettext@plt>
   12a74:	add	r7, sp, #36	; 0x24
   12a78:	mov	r2, #276	; 0x114
   12a7c:	strd	r8, [sp]
   12a80:	mov	r1, #1
   12a84:	mov	r3, r0
   12a88:	mov	r0, r7
   12a8c:	bl	112d0 <__sprintf_chk@plt>
   12a90:	mov	r1, r6
   12a94:	mov	r0, r7
   12a98:	ldr	r5, [r4, #68]	; 0x44
   12a9c:	bl	15528 <__assert_fail@plt+0x4144>
   12aa0:	ldr	ip, [r4, #64]	; 0x40
   12aa4:	ldr	r1, [r4, #56]	; 0x38
   12aa8:	str	ip, [sp, #12]
   12aac:	ldr	r3, [pc, #108]	; 12b20 <__assert_fail@plt+0x173c>
   12ab0:	str	r1, [sp]
   12ab4:	str	r3, [sp, #20]
   12ab8:	str	r3, [sp, #8]
   12abc:	ldr	r2, [r4, #92]	; 0x5c
   12ac0:	str	r7, [sp, #24]
   12ac4:	ldr	r3, [pc, #88]	; 12b24 <__assert_fail@plt+0x1740>
   12ac8:	ldr	r1, [pc, #88]	; 12b28 <__assert_fail@plt+0x1744>
   12acc:	sub	ip, r5, r0
   12ad0:	mov	r0, #1
   12ad4:	bic	ip, ip, ip, asr #31
   12ad8:	asr	lr, ip, r0
   12adc:	sub	ip, ip, lr
   12ae0:	str	ip, [sp, #16]
   12ae4:	str	lr, [sp, #4]
   12ae8:	bl	112f4 <__printf_chk@plt>
   12aec:	strb	r6, [r4, #104]	; 0x68
   12af0:	str	r6, [r4, #76]	; 0x4c
   12af4:	add	sp, sp, #316	; 0x13c
   12af8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12afc:	ldr	r1, [pc, #40]	; 12b2c <__assert_fail@plt+0x1748>
   12b00:	mov	r0, r6
   12b04:	bl	11168 <dcgettext@plt>
   12b08:	mov	r1, r6
   12b0c:	mov	r2, r0
   12b10:	mov	r0, #1
   12b14:	bl	11204 <error@plt>
   12b18:	strdeq	lr, [r2], -r0
   12b1c:			; <UNDEFINED> instruction: 0x0001bfbc
   12b20:	andeq	fp, r1, r0, ror #31
   12b24:	ldrdeq	fp, [r1], -ip
   12b28:	andeq	fp, r1, r8, asr #31
   12b2c:	andeq	fp, r1, r4, lsr #31
   12b30:	ldr	r3, [pc, #392]	; 12cc0 <__assert_fail@plt+0x18dc>
   12b34:	push	{r4, r5, r6, r7, r8, lr}
   12b38:	mov	r7, r0
   12b3c:	ldrb	r2, [r3, #32]
   12b40:	ldr	r5, [pc, #380]	; 12cc4 <__assert_fail@plt+0x18e0>
   12b44:	sub	sp, sp, #16
   12b48:	cmp	r2, r0
   12b4c:	ldr	r4, [r5, #108]	; 0x6c
   12b50:	ldreq	r6, [r3, #36]	; 0x24
   12b54:	beq	12bdc <__assert_fail@plt+0x17f8>
   12b58:	cmp	r0, #9
   12b5c:	beq	12bd8 <__assert_fail@plt+0x17f4>
   12b60:	bl	1127c <__ctype_b_loc@plt>
   12b64:	lsl	r3, r7, #1
   12b68:	ldr	r2, [r0]
   12b6c:	ldrh	r3, [r2, r3]
   12b70:	tst	r3, #16384	; 0x4000
   12b74:	beq	12b98 <__assert_fail@plt+0x17b4>
   12b78:	mov	r0, #1
   12b7c:	ldr	r8, [r5, #112]	; 0x70
   12b80:	mov	r1, r0
   12b84:	strb	r7, [r4]
   12b88:	add	r1, r8, r1
   12b8c:	str	r1, [r5, #112]	; 0x70
   12b90:	add	sp, sp, #16
   12b94:	pop	{r4, r5, r6, r7, r8, pc}
   12b98:	ldrb	r3, [r5, #117]	; 0x75
   12b9c:	cmp	r3, #0
   12ba0:	bne	12c54 <__assert_fail@plt+0x1870>
   12ba4:	ldrb	r1, [r5, #118]	; 0x76
   12ba8:	cmp	r1, #0
   12bac:	beq	12c9c <__assert_fail@plt+0x18b8>
   12bb0:	tst	r7, #128	; 0x80
   12bb4:	bne	12c54 <__assert_fail@plt+0x1870>
   12bb8:	eor	r7, r7, #64	; 0x40
   12bbc:	mov	r3, #94	; 0x5e
   12bc0:	mov	r0, #2
   12bc4:	strb	r7, [r4, #1]
   12bc8:	strb	r3, [r4]
   12bcc:	mov	r1, r0
   12bd0:	ldr	r8, [r5, #112]	; 0x70
   12bd4:	b	12b88 <__assert_fail@plt+0x17a4>
   12bd8:	mov	r6, #8
   12bdc:	ldr	r8, [r5, #112]	; 0x70
   12be0:	mov	r1, r6
   12be4:	mov	r0, r8
   12be8:	bl	1ba58 <__assert_fail@plt+0xa674>
   12bec:	ldrb	r3, [r5, #116]	; 0x74
   12bf0:	cmp	r3, #0
   12bf4:	sub	r1, r6, r1
   12bf8:	beq	12c48 <__assert_fail@plt+0x1864>
   12bfc:	cmp	r1, #0
   12c00:	beq	12cb8 <__assert_fail@plt+0x18d4>
   12c04:	add	r2, r4, r1
   12c08:	mov	r3, #32
   12c0c:	strb	r3, [r4], #1
   12c10:	cmp	r4, r2
   12c14:	bne	12c0c <__assert_fail@plt+0x1828>
   12c18:	mov	r0, r1
   12c1c:	cmp	r1, #0
   12c20:	bge	12b88 <__assert_fail@plt+0x17a4>
   12c24:	cmp	r8, #0
   12c28:	moveq	r0, r8
   12c2c:	beq	12b90 <__assert_fail@plt+0x17ac>
   12c30:	rsb	r3, r1, #0
   12c34:	cmp	r8, r3
   12c38:	movle	r3, #0
   12c3c:	strle	r3, [r5, #112]	; 0x70
   12c40:	bgt	12b88 <__assert_fail@plt+0x17a4>
   12c44:	b	12b90 <__assert_fail@plt+0x17ac>
   12c48:	strb	r7, [r4]
   12c4c:	mov	r0, #1
   12c50:	b	12c1c <__assert_fail@plt+0x1838>
   12c54:	mov	r3, #92	; 0x5c
   12c58:	strb	r3, [r4]
   12c5c:	mov	r1, #1
   12c60:	ldr	r3, [pc, #96]	; 12cc8 <__assert_fail@plt+0x18e4>
   12c64:	str	r7, [sp]
   12c68:	mov	r2, #4
   12c6c:	add	r0, sp, #12
   12c70:	bl	112d0 <__sprintf_chk@plt>
   12c74:	ldrb	r3, [sp, #12]
   12c78:	mov	r0, #4
   12c7c:	mov	r1, r0
   12c80:	strb	r3, [r4, #1]
   12c84:	ldrb	r3, [sp, #13]
   12c88:	ldr	r8, [r5, #112]	; 0x70
   12c8c:	strb	r3, [r4, #2]
   12c90:	ldrb	r3, [sp, #14]
   12c94:	strb	r3, [r4, #3]
   12c98:	b	12b88 <__assert_fail@plt+0x17a4>
   12c9c:	cmp	r7, #8
   12ca0:	strb	r7, [r4]
   12ca4:	ldr	r8, [r5, #112]	; 0x70
   12ca8:	mov	r0, #1
   12cac:	mvneq	r1, #0
   12cb0:	bne	12b88 <__assert_fail@plt+0x17a4>
   12cb4:	b	12c24 <__assert_fail@plt+0x1840>
   12cb8:	mov	r0, r1
   12cbc:	b	12b88 <__assert_fail@plt+0x17a4>
   12cc0:	andeq	lr, r2, r0, asr #2
   12cc4:	strdeq	lr, [r2], -r0
   12cc8:	andeq	fp, r1, r4, ror #31
   12ccc:	push	{r4, r5, r6, lr}
   12cd0:	mov	r5, r0
   12cd4:	ldr	r4, [pc, #160]	; 12d7c <__assert_fail@plt+0x1998>
   12cd8:	ldrb	r3, [r4, #80]	; 0x50
   12cdc:	cmp	r3, #0
   12ce0:	beq	12d1c <__assert_fail@plt+0x1938>
   12ce4:	cmp	r0, #32
   12ce8:	ldr	r3, [r4, #84]	; 0x54
   12cec:	beq	12d54 <__assert_fail@plt+0x1970>
   12cf0:	cmp	r3, #0
   12cf4:	ble	12cfc <__assert_fail@plt+0x1918>
   12cf8:	bl	12864 <__assert_fail@plt+0x1480>
   12cfc:	bl	1127c <__ctype_b_loc@plt>
   12d00:	lsl	r3, r5, #1
   12d04:	ldr	r2, [r0]
   12d08:	ldrh	r3, [r2, r3]
   12d0c:	tst	r3, #16384	; 0x4000
   12d10:	bne	12d44 <__assert_fail@plt+0x1960>
   12d14:	cmp	r5, #8
   12d18:	beq	12d60 <__assert_fail@plt+0x197c>
   12d1c:	ldr	r3, [pc, #92]	; 12d80 <__assert_fail@plt+0x199c>
   12d20:	ldr	r0, [r3]
   12d24:	ldr	r3, [r0, #20]
   12d28:	ldr	r2, [r0, #24]
   12d2c:	cmp	r3, r2
   12d30:	bcs	12d70 <__assert_fail@plt+0x198c>
   12d34:	add	r2, r3, #1
   12d38:	str	r2, [r0, #20]
   12d3c:	strb	r5, [r3]
   12d40:	pop	{r4, r5, r6, pc}
   12d44:	ldr	r3, [r4, #76]	; 0x4c
   12d48:	add	r3, r3, #1
   12d4c:	str	r3, [r4, #76]	; 0x4c
   12d50:	b	12d1c <__assert_fail@plt+0x1938>
   12d54:	add	r3, r3, #1
   12d58:	str	r3, [r4, #84]	; 0x54
   12d5c:	pop	{r4, r5, r6, pc}
   12d60:	ldr	r3, [r4, #76]	; 0x4c
   12d64:	sub	r3, r3, #1
   12d68:	str	r3, [r4, #76]	; 0x4c
   12d6c:	b	12d1c <__assert_fail@plt+0x1938>
   12d70:	mov	r1, r5
   12d74:	pop	{r4, r5, r6, lr}
   12d78:	b	11348 <__overflow@plt>
   12d7c:	strdeq	lr, [r2], -r0
   12d80:	andeq	lr, r2, r4, ror #3
   12d84:	push	{r4, r5, r6, r7, r8, lr}
   12d88:	mov	r2, #1
   12d8c:	ldr	r6, [pc, #308]	; 12ec8 <__assert_fail@plt+0x1ae4>
   12d90:	ldr	r7, [r0, #20]
   12d94:	mov	r8, r0
   12d98:	ldr	r3, [r6, #120]	; 0x78
   12d9c:	ldrb	r1, [r6, #104]	; 0x68
   12da0:	add	r0, r3, r7, lsl #2
   12da4:	add	ip, r7, r2
   12da8:	str	ip, [r8, #20]
   12dac:	ldr	r5, [r6, #16]
   12db0:	ldr	r4, [r3, r7, lsl #2]
   12db4:	ldr	r3, [r0, #4]
   12db8:	cmp	r1, #0
   12dbc:	add	r4, r5, r4
   12dc0:	strb	r2, [r6, #124]	; 0x7c
   12dc4:	add	r5, r5, r3
   12dc8:	bne	12e4c <__assert_fail@plt+0x1a68>
   12dcc:	ldr	r3, [r8, #8]
   12dd0:	cmp	r3, #1
   12dd4:	beq	12e5c <__assert_fail@plt+0x1a78>
   12dd8:	ldr	r3, [r6, #32]
   12ddc:	ldr	r0, [r6, #128]	; 0x80
   12de0:	cmp	r3, r0
   12de4:	blt	12eb4 <__assert_fail@plt+0x1ad0>
   12de8:	ldrb	r3, [r6, #132]	; 0x84
   12dec:	cmp	r3, #0
   12df0:	bne	12eac <__assert_fail@plt+0x1ac8>
   12df4:	cmp	r4, r5
   12df8:	beq	12e0c <__assert_fail@plt+0x1a28>
   12dfc:	ldrb	r0, [r4], #1
   12e00:	bl	12ccc <__assert_fail@plt+0x18e8>
   12e04:	cmp	r5, r4
   12e08:	bne	12dfc <__assert_fail@plt+0x1a18>
   12e0c:	ldr	r3, [r6, #84]	; 0x54
   12e10:	cmp	r3, #0
   12e14:	bne	12e44 <__assert_fail@plt+0x1a60>
   12e18:	ldr	r1, [r6, #136]	; 0x88
   12e1c:	ldr	r3, [r8, #32]
   12e20:	ldr	r2, [r6, #32]
   12e24:	ldr	ip, [r1, r7, lsl #2]
   12e28:	ldr	r1, [r6, #92]	; 0x5c
   12e2c:	sub	r0, r3, r2
   12e30:	cmp	r0, r1
   12e34:	add	r3, r3, ip
   12e38:	str	r3, [r6, #76]	; 0x4c
   12e3c:	subeq	r3, r3, r2
   12e40:	streq	r3, [r6, #76]	; 0x4c
   12e44:	mov	r0, #1
   12e48:	pop	{r4, r5, r6, r7, r8, pc}
   12e4c:	bl	12a38 <__assert_fail@plt+0x1654>
   12e50:	ldr	r3, [r8, #8]
   12e54:	cmp	r3, #1
   12e58:	bne	12dd8 <__assert_fail@plt+0x19f4>
   12e5c:	ldr	lr, [pc, #104]	; 12ecc <__assert_fail@plt+0x1ae8>
   12e60:	ldr	ip, [r6]
   12e64:	ldr	r1, [lr]
   12e68:	cmp	r1, #0
   12e6c:	addgt	r1, r1, #1
   12e70:	movgt	r2, ip
   12e74:	movgt	r0, #2
   12e78:	ble	12e90 <__assert_fail@plt+0x1aac>
   12e7c:	add	r3, r3, #1
   12e80:	cmp	r3, r1
   12e84:	str	r0, [r2, #8]
   12e88:	add	r2, r2, #40	; 0x28
   12e8c:	bne	12e7c <__assert_fail@plt+0x1a98>
   12e90:	ldr	r3, [ip, #28]
   12e94:	cmp	r3, #0
   12e98:	bgt	12dd8 <__assert_fail@plt+0x19f4>
   12e9c:	ldrb	r3, [lr, #40]	; 0x28
   12ea0:	cmp	r3, #0
   12ea4:	strbeq	r3, [r6, #124]	; 0x7c
   12ea8:	b	12e44 <__assert_fail@plt+0x1a60>
   12eac:	bl	12944 <__assert_fail@plt+0x1560>
   12eb0:	b	12df4 <__assert_fail@plt+0x1a10>
   12eb4:	sub	r0, r0, r3
   12eb8:	bl	127e4 <__assert_fail@plt+0x1400>
   12ebc:	mov	r3, #0
   12ec0:	str	r3, [r6, #128]	; 0x80
   12ec4:	b	12de8 <__assert_fail@plt+0x1a04>
   12ec8:	strdeq	lr, [r2], -r0
   12ecc:	andeq	lr, r2, r0, asr #2
   12ed0:	push	{r4, r5, lr}
   12ed4:	ldr	r5, [pc, #100]	; 12f40 <__assert_fail@plt+0x1b5c>
   12ed8:	ldrb	r3, [r5, #72]	; 0x48
   12edc:	cmp	r3, #0
   12ee0:	movne	r3, #2
   12ee4:	strne	r3, [r0]
   12ee8:	bne	12f28 <__assert_fail@plt+0x1b44>
   12eec:	ldr	r0, [pc, #80]	; 12f44 <__assert_fail@plt+0x1b60>
   12ef0:	ldr	r2, [r5]
   12ef4:	ldr	r3, [r0]
   12ef8:	cmp	r3, #0
   12efc:	beq	12f28 <__assert_fail@plt+0x1b44>
   12f00:	ldrb	r4, [r0, #4]
   12f04:	mov	lr, #2
   12f08:	mov	ip, #1
   12f0c:	cmp	r4, #0
   12f10:	moveq	r0, lr
   12f14:	movne	r0, ip
   12f18:	subs	r3, r3, #1
   12f1c:	str	r0, [r2, #8]
   12f20:	add	r2, r2, #40	; 0x28
   12f24:	bne	12f0c <__assert_fail@plt+0x1b28>
   12f28:	ldr	r3, [r5, #4]
   12f2c:	mov	r2, #0
   12f30:	sub	r3, r3, #1
   12f34:	str	r3, [r5, #4]
   12f38:	str	r2, [r1]
   12f3c:	pop	{r4, r5, pc}
   12f40:	strdeq	lr, [r2], -r0
   12f44:	andeq	lr, r2, r0, asr #2
   12f48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f4c:	mov	r8, r0
   12f50:	ldr	r4, [r0]
   12f54:	mov	r7, r1
   12f58:	ldr	r3, [r4, #4]
   12f5c:	ldr	r2, [r4, #8]
   12f60:	cmp	r3, r2
   12f64:	bcs	13118 <__assert_fail@plt+0x1d34>
   12f68:	add	r2, r3, #1
   12f6c:	str	r2, [r4, #4]
   12f70:	ldrb	r0, [r3]
   12f74:	cmp	r0, #12
   12f78:	movne	r5, #0
   12f7c:	strbne	r5, [r8, #37]	; 0x25
   12f80:	beq	13018 <__assert_fail@plt+0x1c34>
   12f84:	ldr	r6, [pc, #476]	; 13168 <__assert_fail@plt+0x1d84>
   12f88:	ldrb	r3, [r6, #140]	; 0x8c
   12f8c:	cmp	r3, #0
   12f90:	bne	13034 <__assert_fail@plt+0x1c50>
   12f94:	cmp	r0, #10
   12f98:	beq	12fd8 <__assert_fail@plt+0x1bf4>
   12f9c:	cmp	r0, #12
   12fa0:	beq	13050 <__assert_fail@plt+0x1c6c>
   12fa4:	cmn	r0, #1
   12fa8:	beq	13040 <__assert_fail@plt+0x1c5c>
   12fac:	ldr	r3, [r4, #4]
   12fb0:	ldr	r2, [r4, #8]
   12fb4:	add	r1, r3, #1
   12fb8:	cmp	r3, r2
   12fbc:	strcc	r1, [r4, #4]
   12fc0:	ldrbcc	r0, [r3]
   12fc4:	bcc	12f94 <__assert_fail@plt+0x1bb0>
   12fc8:	mov	r0, r4
   12fcc:	bl	1133c <__uflow@plt>
   12fd0:	cmp	r0, #10
   12fd4:	bne	12f9c <__assert_fail@plt+0x1bb8>
   12fd8:	ldr	r9, [pc, #396]	; 1316c <__assert_fail@plt+0x1d88>
   12fdc:	ldrb	r3, [r9, #41]	; 0x29
   12fe0:	cmp	r3, #0
   12fe4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fe8:	ldrb	r3, [r6, #72]	; 0x48
   12fec:	eor	r3, r3, #1
   12ff0:	cmp	r7, #1
   12ff4:	movne	r7, r3
   12ff8:	orreq	r7, r3, #1
   12ffc:	cmp	r7, #0
   13000:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13004:	cmp	r5, #0
   13008:	ldreq	r3, [r9, #44]	; 0x2c
   1300c:	addeq	r3, r3, #1
   13010:	streq	r3, [r9, #44]	; 0x2c
   13014:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13018:	ldrb	r3, [r8, #37]	; 0x25
   1301c:	cmp	r3, #0
   13020:	bne	13098 <__assert_fail@plt+0x1cb4>
   13024:	ldr	r6, [pc, #316]	; 13168 <__assert_fail@plt+0x1d84>
   13028:	ldrb	r5, [r6, #140]	; 0x8c
   1302c:	cmp	r5, #0
   13030:	beq	130d4 <__assert_fail@plt+0x1cf0>
   13034:	mov	r3, #1
   13038:	strb	r3, [r8, #37]	; 0x25
   1303c:	b	12f94 <__assert_fail@plt+0x1bb0>
   13040:	mov	r0, r8
   13044:	bl	126e4 <__assert_fail@plt+0x1300>
   13048:	ldr	r9, [pc, #284]	; 1316c <__assert_fail@plt+0x1d88>
   1304c:	b	12fdc <__assert_fail@plt+0x1bf8>
   13050:	ldrb	r3, [r6, #140]	; 0x8c
   13054:	cmp	r3, #0
   13058:	beq	130d8 <__assert_fail@plt+0x1cf4>
   1305c:	ldrb	r1, [r6, #72]	; 0x48
   13060:	ldr	r9, [pc, #260]	; 1316c <__assert_fail@plt+0x1d88>
   13064:	cmp	r1, #0
   13068:	movne	r3, #0
   1306c:	strbne	r3, [r8, #37]	; 0x25
   13070:	bne	130dc <__assert_fail@plt+0x1cf8>
   13074:	ldr	r3, [r9]
   13078:	ldr	r2, [r6]
   1307c:	cmp	r3, #0
   13080:	beq	130dc <__assert_fail@plt+0x1cf8>
   13084:	subs	r3, r3, #1
   13088:	strb	r1, [r2, #37]	; 0x25
   1308c:	add	r2, r2, #40	; 0x28
   13090:	bne	13084 <__assert_fail@plt+0x1ca0>
   13094:	b	130dc <__assert_fail@plt+0x1cf8>
   13098:	ldr	r3, [r4, #4]
   1309c:	ldr	r2, [r4, #8]
   130a0:	cmp	r3, r2
   130a4:	bcs	13150 <__assert_fail@plt+0x1d6c>
   130a8:	add	r2, r3, #1
   130ac:	str	r2, [r4, #4]
   130b0:	ldrb	r0, [r3]
   130b4:	cmp	r0, #10
   130b8:	beq	13124 <__assert_fail@plt+0x1d40>
   130bc:	mov	r3, #0
   130c0:	sub	r5, r0, #12
   130c4:	strb	r3, [r8, #37]	; 0x25
   130c8:	clz	r5, r5
   130cc:	lsr	r5, r5, #5
   130d0:	b	12f84 <__assert_fail@plt+0x1ba0>
   130d4:	mov	r5, #1
   130d8:	ldr	r9, [pc, #140]	; 1316c <__assert_fail@plt+0x1d88>
   130dc:	ldr	r3, [r4, #4]
   130e0:	ldr	r2, [r4, #8]
   130e4:	cmp	r3, r2
   130e8:	bcs	13144 <__assert_fail@plt+0x1d60>
   130ec:	add	r2, r3, #1
   130f0:	str	r2, [r4, #4]
   130f4:	ldrb	r0, [r3]
   130f8:	cmp	r0, #10
   130fc:	beq	13108 <__assert_fail@plt+0x1d24>
   13100:	mov	r1, r4
   13104:	bl	112b8 <ungetc@plt>
   13108:	add	r1, r8, #28
   1310c:	add	r0, r8, #8
   13110:	bl	12ed0 <__assert_fail@plt+0x1aec>
   13114:	b	12fdc <__assert_fail@plt+0x1bf8>
   13118:	mov	r0, r4
   1311c:	bl	1133c <__uflow@plt>
   13120:	b	12f74 <__assert_fail@plt+0x1b90>
   13124:	ldr	r3, [r4, #4]
   13128:	ldr	r2, [r4, #8]
   1312c:	cmp	r3, r2
   13130:	bcs	1315c <__assert_fail@plt+0x1d78>
   13134:	add	r2, r3, #1
   13138:	str	r2, [r4, #4]
   1313c:	ldrb	r0, [r3]
   13140:	b	130bc <__assert_fail@plt+0x1cd8>
   13144:	mov	r0, r4
   13148:	bl	1133c <__uflow@plt>
   1314c:	b	130f8 <__assert_fail@plt+0x1d14>
   13150:	mov	r0, r4
   13154:	bl	1133c <__uflow@plt>
   13158:	b	130b4 <__assert_fail@plt+0x1cd0>
   1315c:	mov	r0, r4
   13160:	bl	1133c <__uflow@plt>
   13164:	b	130bc <__assert_fail@plt+0x1cd8>
   13168:	strdeq	lr, [r2], -r0
   1316c:	andeq	lr, r2, r0, asr #2
   13170:	push	{r4, r5, r6, lr}
   13174:	mov	r5, r0
   13178:	ldr	r4, [r0]
   1317c:	b	13198 <__assert_fail@plt+0x1db4>
   13180:	cmp	r0, #10
   13184:	beq	131c4 <__assert_fail@plt+0x1de0>
   13188:	cmp	r0, #12
   1318c:	beq	131c8 <__assert_fail@plt+0x1de4>
   13190:	cmn	r0, #1
   13194:	beq	13218 <__assert_fail@plt+0x1e34>
   13198:	ldr	r3, [r4, #4]
   1319c:	ldr	r2, [r4, #8]
   131a0:	add	r1, r3, #1
   131a4:	cmp	r3, r2
   131a8:	strcc	r1, [r4, #4]
   131ac:	ldrbcc	r0, [r3]
   131b0:	bcc	13180 <__assert_fail@plt+0x1d9c>
   131b4:	mov	r0, r4
   131b8:	bl	1133c <__uflow@plt>
   131bc:	cmp	r0, #10
   131c0:	bne	13188 <__assert_fail@plt+0x1da4>
   131c4:	pop	{r4, r5, r6, pc}
   131c8:	ldr	r3, [r4, #4]
   131cc:	ldr	r2, [r4, #8]
   131d0:	cmp	r3, r2
   131d4:	bcs	13224 <__assert_fail@plt+0x1e40>
   131d8:	add	r2, r3, #1
   131dc:	str	r2, [r4, #4]
   131e0:	ldrb	r0, [r3]
   131e4:	cmp	r0, #10
   131e8:	beq	131f4 <__assert_fail@plt+0x1e10>
   131ec:	mov	r1, r4
   131f0:	bl	112b8 <ungetc@plt>
   131f4:	ldr	r3, [pc, #52]	; 13230 <__assert_fail@plt+0x1e4c>
   131f8:	add	r1, r5, #28
   131fc:	add	r0, r5, #8
   13200:	ldrb	r2, [r3, #141]	; 0x8d
   13204:	pop	{r4, r5, r6, lr}
   13208:	cmp	r2, #0
   1320c:	movne	r2, #1
   13210:	strbne	r2, [r3, #142]	; 0x8e
   13214:	b	12ed0 <__assert_fail@plt+0x1aec>
   13218:	mov	r0, r5
   1321c:	pop	{r4, r5, r6, lr}
   13220:	b	126e4 <__assert_fail@plt+0x1300>
   13224:	mov	r0, r4
   13228:	bl	1133c <__uflow@plt>
   1322c:	b	131e4 <__assert_fail@plt+0x1e00>
   13230:	strdeq	lr, [r2], -r0
   13234:	push	{r4, r5, r6, r7, r8, lr}
   13238:	sub	sp, sp, #8
   1323c:	ldr	r6, [pc, #292]	; 13368 <__assert_fail@plt+0x1f84>
   13240:	ldr	r8, [pc, #292]	; 1336c <__assert_fail@plt+0x1f88>
   13244:	mov	r5, r0
   13248:	ldr	r2, [r6, #148]	; 0x94
   1324c:	ldr	r3, [r8, #48]	; 0x30
   13250:	str	r2, [sp, #4]
   13254:	str	r3, [sp]
   13258:	ldr	r0, [r6, #144]	; 0x90
   1325c:	ldr	r3, [pc, #268]	; 13370 <__assert_fail@plt+0x1f8c>
   13260:	mvn	r2, #0
   13264:	mov	r1, #1
   13268:	bl	112d0 <__sprintf_chk@plt>
   1326c:	ldr	r7, [r8, #48]	; 0x30
   13270:	ldr	r3, [r6, #148]	; 0x94
   13274:	ldr	r4, [r6, #144]	; 0x90
   13278:	add	r3, r3, #1
   1327c:	cmp	r7, #0
   13280:	str	r3, [r6, #148]	; 0x94
   13284:	sub	r0, r0, r7
   13288:	add	r4, r4, r0
   1328c:	addgt	r7, r4, r7
   13290:	ble	132a8 <__assert_fail@plt+0x1ec4>
   13294:	ldrb	r0, [r4], #1
   13298:	ldr	r3, [r5]
   1329c:	blx	r3
   132a0:	cmp	r4, r7
   132a4:	bne	13294 <__assert_fail@plt+0x1eb0>
   132a8:	ldr	r3, [r8]
   132ac:	cmp	r3, #1
   132b0:	ble	1332c <__assert_fail@plt+0x1f48>
   132b4:	ldrb	r0, [r8, #52]	; 0x34
   132b8:	cmp	r0, #9
   132bc:	beq	132f4 <__assert_fail@plt+0x1f10>
   132c0:	ldr	r3, [r5]
   132c4:	blx	r3
   132c8:	ldrb	r3, [r6, #156]	; 0x9c
   132cc:	cmp	r3, #0
   132d0:	beq	132ec <__assert_fail@plt+0x1f08>
   132d4:	ldrb	r3, [r6, #72]	; 0x48
   132d8:	cmp	r3, #0
   132dc:	ldreq	r3, [r6, #112]	; 0x70
   132e0:	ldreq	r2, [r6, #152]	; 0x98
   132e4:	addeq	r3, r3, r2
   132e8:	streq	r3, [r6, #112]	; 0x70
   132ec:	add	sp, sp, #8
   132f0:	pop	{r4, r5, r6, r7, r8, pc}
   132f4:	ldr	r3, [r8, #48]	; 0x30
   132f8:	ldr	r4, [r6, #152]	; 0x98
   132fc:	sub	r4, r4, r3
   13300:	cmp	r4, #0
   13304:	sub	r4, r4, #1
   13308:	ble	132c8 <__assert_fail@plt+0x1ee4>
   1330c:	mov	r7, #32
   13310:	sub	r4, r4, #1
   13314:	ldr	r3, [r5]
   13318:	mov	r0, r7
   1331c:	blx	r3
   13320:	cmn	r4, #1
   13324:	bne	13310 <__assert_fail@plt+0x1f2c>
   13328:	b	132c8 <__assert_fail@plt+0x1ee4>
   1332c:	ldr	r3, [r5]
   13330:	ldrb	r0, [r8, #52]	; 0x34
   13334:	blx	r3
   13338:	ldrb	r3, [r8, #52]	; 0x34
   1333c:	cmp	r3, #9
   13340:	bne	132c8 <__assert_fail@plt+0x1ee4>
   13344:	ldr	r5, [r6, #76]	; 0x4c
   13348:	ldr	r4, [r8, #28]
   1334c:	mov	r0, r5
   13350:	mov	r1, r4
   13354:	bl	1ba58 <__assert_fail@plt+0xa674>
   13358:	sub	r3, r4, r1
   1335c:	add	r3, r3, r5
   13360:	str	r3, [r6, #76]	; 0x4c
   13364:	b	132c8 <__assert_fail@plt+0x1ee4>
   13368:	strdeq	lr, [r2], -r0
   1336c:	andeq	lr, r2, r0, asr #2
   13370:	andeq	fp, r1, ip, ror #31
   13374:	push	{r4, r5, r6, lr}
   13378:	mov	r5, r0
   1337c:	ldr	r4, [pc, #80]	; 133d4 <__assert_fail@plt+0x1ff0>
   13380:	ldr	r3, [r5, #32]
   13384:	ldr	r0, [r4, #32]
   13388:	str	r3, [r4, #128]	; 0x80
   1338c:	cmp	r3, r0
   13390:	bgt	133c0 <__assert_fail@plt+0x1fdc>
   13394:	ldrb	r3, [r4, #132]	; 0x84
   13398:	cmp	r3, #0
   1339c:	bne	133b8 <__assert_fail@plt+0x1fd4>
   133a0:	ldrb	r3, [r5, #36]	; 0x24
   133a4:	cmp	r3, #0
   133a8:	popeq	{r4, r5, r6, pc}
   133ac:	add	r0, r5, #16
   133b0:	pop	{r4, r5, r6, lr}
   133b4:	b	13234 <__assert_fail@plt+0x1e50>
   133b8:	bl	12944 <__assert_fail@plt+0x1560>
   133bc:	b	133a0 <__assert_fail@plt+0x1fbc>
   133c0:	sub	r0, r3, r0
   133c4:	bl	127e4 <__assert_fail@plt+0x1400>
   133c8:	mov	r3, #0
   133cc:	str	r3, [r4, #128]	; 0x80
   133d0:	b	13394 <__assert_fail@plt+0x1fb0>
   133d4:	strdeq	lr, [r2], -r0
   133d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   133dc:	mov	r5, r0
   133e0:	ldr	r0, [r0]
   133e4:	ldr	r3, [r0, #4]
   133e8:	ldr	r2, [r0, #8]
   133ec:	cmp	r3, r2
   133f0:	bcs	1372c <__assert_fail@plt+0x2348>
   133f4:	add	r2, r3, #1
   133f8:	str	r2, [r0, #4]
   133fc:	ldrb	r7, [r3]
   13400:	ldr	r6, [pc, #916]	; 1379c <__assert_fail@plt+0x23b8>
   13404:	cmp	r7, #12
   13408:	ldr	r8, [r6, #112]	; 0x70
   1340c:	beq	13598 <__assert_fail@plt+0x21b4>
   13410:	mov	r3, #0
   13414:	cmp	r7, #10
   13418:	strb	r3, [r5, #37]	; 0x25
   1341c:	beq	1343c <__assert_fail@plt+0x2058>
   13420:	cmp	r7, #12
   13424:	beq	135f0 <__assert_fail@plt+0x220c>
   13428:	cmn	r7, #1
   1342c:	beq	13588 <__assert_fail@plt+0x21a4>
   13430:	uxtb	r0, r7
   13434:	bl	12b30 <__assert_fail@plt+0x174c>
   13438:	mov	r4, r0
   1343c:	ldrb	r3, [r6, #156]	; 0x9c
   13440:	cmp	r3, #0
   13444:	bne	1356c <__assert_fail@plt+0x2188>
   13448:	ldr	r3, [pc, #848]	; 137a0 <__assert_fail@plt+0x23bc>
   1344c:	ldr	r2, [r5, #16]
   13450:	cmp	r2, r3
   13454:	beq	134a8 <__assert_fail@plt+0x20c4>
   13458:	ldrb	r3, [r6, #104]	; 0x68
   1345c:	mov	r2, #1
   13460:	strb	r2, [r6, #124]	; 0x7c
   13464:	cmp	r3, #0
   13468:	beq	13480 <__assert_fail@plt+0x209c>
   1346c:	ldr	r3, [pc, #816]	; 137a4 <__assert_fail@plt+0x23c0>
   13470:	ldrb	r3, [r3, #4]
   13474:	cmp	r3, #0
   13478:	bne	13480 <__assert_fail@plt+0x209c>
   1347c:	bl	12a38 <__assert_fail@plt+0x1654>
   13480:	ldrb	r3, [r6, #72]	; 0x48
   13484:	cmp	r3, #0
   13488:	bne	13658 <__assert_fail@plt+0x2274>
   1348c:	ldr	r3, [r6, #128]	; 0x80
   13490:	ldr	r0, [r6, #32]
   13494:	cmp	r0, r3
   13498:	blt	13740 <__assert_fail@plt+0x235c>
   1349c:	ldrb	r3, [r6, #132]	; 0x84
   134a0:	cmp	r3, #0
   134a4:	bne	13738 <__assert_fail@plt+0x2354>
   134a8:	ldrb	r3, [r5, #36]	; 0x24
   134ac:	cmp	r3, #0
   134b0:	bne	136ec <__assert_fail@plt+0x2308>
   134b4:	mov	r3, #0
   134b8:	cmp	r7, #10
   134bc:	strb	r3, [r6, #165]	; 0xa5
   134c0:	beq	136e4 <__assert_fail@plt+0x2300>
   134c4:	cmp	r4, r3
   134c8:	ldr	r7, [r6, #108]	; 0x6c
   134cc:	beq	134e4 <__assert_fail@plt+0x2100>
   134d0:	ldr	r3, [r5, #16]
   134d4:	ldrb	r0, [r7], #1
   134d8:	blx	r3
   134dc:	subs	r4, r4, #1
   134e0:	bne	134d0 <__assert_fail@plt+0x20ec>
   134e4:	ldr	r0, [r5]
   134e8:	ldr	r3, [r0, #4]
   134ec:	ldr	r2, [r0, #8]
   134f0:	cmp	r3, r2
   134f4:	bcs	13760 <__assert_fail@plt+0x237c>
   134f8:	add	r2, r3, #1
   134fc:	str	r2, [r0, #4]
   13500:	ldrb	r0, [r3]
   13504:	cmp	r0, #10
   13508:	beq	136e4 <__assert_fail@plt+0x2300>
   1350c:	cmp	r0, #12
   13510:	beq	136f8 <__assert_fail@plt+0x2314>
   13514:	cmn	r0, #1
   13518:	beq	13588 <__assert_fail@plt+0x21a4>
   1351c:	uxtb	r0, r0
   13520:	ldr	r4, [r6, #112]	; 0x70
   13524:	bl	12b30 <__assert_fail@plt+0x174c>
   13528:	ldrb	r3, [r6, #156]	; 0x9c
   1352c:	cmp	r3, #0
   13530:	beq	13544 <__assert_fail@plt+0x2160>
   13534:	ldr	r2, [r6, #112]	; 0x70
   13538:	ldr	r3, [r6, #160]	; 0xa0
   1353c:	cmp	r2, r3
   13540:	bgt	13790 <__assert_fail@plt+0x23ac>
   13544:	cmp	r0, #0
   13548:	ldr	r7, [r6, #108]	; 0x6c
   1354c:	beq	134e4 <__assert_fail@plt+0x2100>
   13550:	mov	r4, r0
   13554:	ldr	r3, [r5, #16]
   13558:	ldrb	r0, [r7], #1
   1355c:	blx	r3
   13560:	subs	r4, r4, #1
   13564:	bne	13554 <__assert_fail@plt+0x2170>
   13568:	b	134e4 <__assert_fail@plt+0x2100>
   1356c:	ldr	r2, [r6, #112]	; 0x70
   13570:	ldr	r3, [r6, #160]	; 0xa0
   13574:	cmp	r2, r3
   13578:	ble	13448 <__assert_fail@plt+0x2064>
   1357c:	str	r8, [r6, #112]	; 0x70
   13580:	mov	r0, #0
   13584:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13588:	mov	r0, r5
   1358c:	bl	126e4 <__assert_fail@plt+0x1300>
   13590:	mov	r0, #1
   13594:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13598:	ldrb	r3, [r5, #37]	; 0x25
   1359c:	cmp	r3, #0
   135a0:	beq	135f0 <__assert_fail@plt+0x220c>
   135a4:	ldr	r0, [r5]
   135a8:	ldr	r3, [r0, #4]
   135ac:	ldr	r2, [r0, #8]
   135b0:	cmp	r3, r2
   135b4:	bcs	13770 <__assert_fail@plt+0x238c>
   135b8:	add	r2, r3, #1
   135bc:	str	r2, [r0, #4]
   135c0:	ldrb	r7, [r3]
   135c4:	cmp	r7, #10
   135c8:	bne	13410 <__assert_fail@plt+0x202c>
   135cc:	ldr	r0, [r5]
   135d0:	ldr	r3, [r0, #4]
   135d4:	ldr	r2, [r0, #8]
   135d8:	cmp	r3, r2
   135dc:	bcs	13784 <__assert_fail@plt+0x23a0>
   135e0:	add	r2, r3, #1
   135e4:	str	r2, [r0, #4]
   135e8:	ldrb	r7, [r3]
   135ec:	b	13410 <__assert_fail@plt+0x202c>
   135f0:	ldr	r0, [r5]
   135f4:	ldr	r3, [r0, #4]
   135f8:	ldr	r2, [r0, #8]
   135fc:	cmp	r3, r2
   13600:	bcs	13768 <__assert_fail@plt+0x2384>
   13604:	add	r2, r3, #1
   13608:	str	r2, [r0, #4]
   1360c:	ldrb	r0, [r3]
   13610:	cmp	r0, #10
   13614:	beq	13620 <__assert_fail@plt+0x223c>
   13618:	ldr	r1, [r5]
   1361c:	bl	112b8 <ungetc@plt>
   13620:	ldrb	r2, [r6, #104]	; 0x68
   13624:	mov	r3, #1
   13628:	strb	r3, [r6, #157]	; 0x9d
   1362c:	cmp	r2, #0
   13630:	bne	136c8 <__assert_fail@plt+0x22e4>
   13634:	ldrb	r3, [r6, #141]	; 0x8d
   13638:	cmp	r3, #0
   1363c:	movne	r3, #1
   13640:	strbne	r3, [r6, #142]	; 0x8e
   13644:	add	r0, r5, #8
   13648:	add	r1, r5, #28
   1364c:	bl	12ed0 <__assert_fail@plt+0x1aec>
   13650:	mov	r0, #1
   13654:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13658:	ldrb	r3, [r6, #164]	; 0xa4
   1365c:	cmp	r3, #0
   13660:	beq	1348c <__assert_fail@plt+0x20a8>
   13664:	ldr	r9, [r6, #88]	; 0x58
   13668:	mov	r3, #0
   1366c:	cmp	r9, r3
   13670:	str	r3, [r6, #88]	; 0x58
   13674:	ldr	r8, [r6]
   13678:	movgt	sl, #1
   1367c:	ble	136a4 <__assert_fail@plt+0x22c0>
   13680:	mov	r0, r8
   13684:	bl	13374 <__assert_fail@plt+0x1f90>
   13688:	ldr	r3, [r6, #88]	; 0x58
   1368c:	add	sl, sl, #1
   13690:	add	r3, r3, #1
   13694:	cmp	r9, sl
   13698:	add	r8, r8, #40	; 0x28
   1369c:	str	r3, [r6, #88]	; 0x58
   136a0:	bge	13680 <__assert_fail@plt+0x229c>
   136a4:	ldrb	r2, [r6, #156]	; 0x9c
   136a8:	ldr	r3, [r5, #32]
   136ac:	cmp	r2, #0
   136b0:	str	r3, [r6, #128]	; 0x80
   136b4:	bne	13754 <__assert_fail@plt+0x2370>
   136b8:	str	r2, [r6, #84]	; 0x54
   136bc:	mov	r2, #0
   136c0:	strb	r2, [r6, #164]	; 0xa4
   136c4:	b	13490 <__assert_fail@plt+0x20ac>
   136c8:	ldr	r2, [pc, #212]	; 137a4 <__assert_fail@plt+0x23c0>
   136cc:	ldrb	r2, [r2, #4]
   136d0:	cmp	r2, #0
   136d4:	bne	13634 <__assert_fail@plt+0x2250>
   136d8:	strb	r3, [r6, #124]	; 0x7c
   136dc:	bl	12a38 <__assert_fail@plt+0x1654>
   136e0:	b	13644 <__assert_fail@plt+0x2260>
   136e4:	mov	r0, #1
   136e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136ec:	add	r0, r5, #16
   136f0:	bl	13234 <__assert_fail@plt+0x1e50>
   136f4:	b	134b4 <__assert_fail@plt+0x20d0>
   136f8:	ldr	r0, [r5]
   136fc:	ldr	r3, [r0, #4]
   13700:	ldr	r2, [r0, #8]
   13704:	cmp	r3, r2
   13708:	bcs	1377c <__assert_fail@plt+0x2398>
   1370c:	add	r2, r3, #1
   13710:	str	r2, [r0, #4]
   13714:	ldrb	r0, [r3]
   13718:	cmp	r0, #10
   1371c:	beq	13634 <__assert_fail@plt+0x2250>
   13720:	ldr	r1, [r5]
   13724:	bl	112b8 <ungetc@plt>
   13728:	b	13634 <__assert_fail@plt+0x2250>
   1372c:	bl	1133c <__uflow@plt>
   13730:	mov	r7, r0
   13734:	b	13400 <__assert_fail@plt+0x201c>
   13738:	bl	12944 <__assert_fail@plt+0x1560>
   1373c:	b	134a8 <__assert_fail@plt+0x20c4>
   13740:	sub	r0, r3, r0
   13744:	bl	127e4 <__assert_fail@plt+0x1400>
   13748:	mov	r3, #0
   1374c:	str	r3, [r6, #128]	; 0x80
   13750:	b	1349c <__assert_fail@plt+0x20b8>
   13754:	ldr	r2, [r6, #160]	; 0xa0
   13758:	str	r2, [r6, #84]	; 0x54
   1375c:	b	136bc <__assert_fail@plt+0x22d8>
   13760:	bl	1133c <__uflow@plt>
   13764:	b	13504 <__assert_fail@plt+0x2120>
   13768:	bl	1133c <__uflow@plt>
   1376c:	b	13610 <__assert_fail@plt+0x222c>
   13770:	bl	1133c <__uflow@plt>
   13774:	mov	r7, r0
   13778:	b	135c4 <__assert_fail@plt+0x21e0>
   1377c:	bl	1133c <__uflow@plt>
   13780:	b	13718 <__assert_fail@plt+0x2334>
   13784:	bl	1133c <__uflow@plt>
   13788:	mov	r7, r0
   1378c:	b	13410 <__assert_fail@plt+0x202c>
   13790:	str	r4, [r6, #112]	; 0x70
   13794:	mov	r0, #0
   13798:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1379c:	strdeq	lr, [r2], -r0
   137a0:	andeq	r2, r1, ip, lsl #6
   137a4:	andeq	lr, r2, r0, asr #2
   137a8:	push	{r4, r5, r6, r7, r8, lr}
   137ac:	mov	r4, r1
   137b0:	ldr	r1, [pc, #216]	; 13890 <__assert_fail@plt+0x24ac>
   137b4:	mov	r7, r0
   137b8:	bl	110c0 <strcmp@plt>
   137bc:	cmp	r0, #0
   137c0:	bne	13824 <__assert_fail@plt+0x2440>
   137c4:	mov	r2, #5
   137c8:	ldr	r1, [pc, #196]	; 13894 <__assert_fail@plt+0x24b0>
   137cc:	bl	11168 <dcgettext@plt>
   137d0:	ldr	r2, [pc, #192]	; 13898 <__assert_fail@plt+0x24b4>
   137d4:	ldr	r6, [pc, #192]	; 1389c <__assert_fail@plt+0x24b8>
   137d8:	mov	r3, #1
   137dc:	ldr	r5, [r2]
   137e0:	strb	r3, [r6, #166]	; 0xa6
   137e4:	cmp	r5, #0
   137e8:	str	r5, [r4]
   137ec:	str	r0, [r4, #4]
   137f0:	beq	13848 <__assert_fail@plt+0x2464>
   137f4:	mov	r0, r5
   137f8:	mov	r1, #2
   137fc:	bl	14f44 <__assert_fail@plt+0x3b60>
   13800:	ldr	r3, [r6, #172]	; 0xac
   13804:	mov	r2, #0
   13808:	str	r2, [r4, #8]
   1380c:	strb	r2, [r4, #37]	; 0x25
   13810:	mov	r4, #1
   13814:	add	r3, r3, #1
   13818:	str	r3, [r6, #172]	; 0xac
   1381c:	mov	r0, r4
   13820:	pop	{r4, r5, r6, r7, r8, pc}
   13824:	str	r7, [r4, #4]
   13828:	ldr	r1, [pc, #112]	; 138a0 <__assert_fail@plt+0x24bc>
   1382c:	mov	r0, r7
   13830:	bl	15078 <__assert_fail@plt+0x3c94>
   13834:	ldr	r6, [pc, #96]	; 1389c <__assert_fail@plt+0x24b8>
   13838:	mov	r5, r0
   1383c:	cmp	r5, #0
   13840:	str	r0, [r4]
   13844:	bne	137f4 <__assert_fail@plt+0x2410>
   13848:	ldrb	r4, [r6, #168]	; 0xa8
   1384c:	mov	r3, #1
   13850:	strb	r3, [r6, #167]	; 0xa7
   13854:	cmp	r4, #0
   13858:	movne	r4, r5
   1385c:	bne	1381c <__assert_fail@plt+0x2438>
   13860:	bl	112c4 <__errno_location@plt>
   13864:	mov	r2, r7
   13868:	mov	r1, #3
   1386c:	ldr	r6, [r0]
   13870:	mov	r0, r5
   13874:	bl	18cbc <__assert_fail@plt+0x78d8>
   13878:	mov	r1, r6
   1387c:	ldr	r2, [pc, #32]	; 138a4 <__assert_fail@plt+0x24c0>
   13880:	mov	r3, r0
   13884:	mov	r0, r5
   13888:	bl	11204 <error@plt>
   1388c:	b	1381c <__assert_fail@plt+0x2438>
   13890:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13894:	strdeq	fp, [r1], -r0
   13898:	andeq	lr, r2, r0, ror #3
   1389c:	strdeq	lr, [r2], -r0
   138a0:	andeq	sp, r1, ip, ror r4
   138a4:	andeq	sp, r1, r8, lsr #10
   138a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138ac:	mov	r7, r0
   138b0:	ldr	r5, [pc, #4028]	; 14874 <__assert_fail@plt+0x3490>
   138b4:	ldr	r4, [pc, #4028]	; 14878 <__assert_fail@plt+0x3494>
   138b8:	sub	sp, sp, #36	; 0x24
   138bc:	ldr	r3, [r5, #56]	; 0x38
   138c0:	mov	r8, r1
   138c4:	sub	r2, r3, #10
   138c8:	cmp	r2, #0
   138cc:	str	r2, [r4, #176]	; 0xb0
   138d0:	ble	13b0c <__assert_fail@plt+0x2728>
   138d4:	ldrb	r2, [r5, #40]	; 0x28
   138d8:	cmp	r2, #0
   138dc:	beq	13b1c <__assert_fail@plt+0x2738>
   138e0:	ldrb	r3, [r4, #180]	; 0xb4
   138e4:	cmp	r3, #0
   138e8:	ldrne	r3, [r4, #176]	; 0xb0
   138ec:	addne	r3, r3, r3, lsr #31
   138f0:	asrne	r3, r3, #1
   138f4:	strne	r3, [r4, #176]	; 0xb0
   138f8:	cmp	r7, #0
   138fc:	bne	13b24 <__assert_fail@plt+0x2740>
   13900:	ldr	sl, [r5]
   13904:	strb	r7, [r4, #72]	; 0x48
   13908:	ldrb	r3, [r5, #4]
   1390c:	cmp	r3, #0
   13910:	movne	r3, #1
   13914:	strbne	r3, [r4, #181]	; 0xb5
   13918:	cmp	sl, #1
   1391c:	ble	14580 <__assert_fail@plt+0x319c>
   13920:	ldrb	r3, [r4, #132]	; 0x84
   13924:	cmp	r3, #0
   13928:	ldrb	r3, [r4, #182]	; 0xb6
   1392c:	bne	13b3c <__assert_fail@plt+0x2758>
   13930:	cmp	r3, #0
   13934:	ldrne	r2, [pc, #3904]	; 1487c <__assert_fail@plt+0x3498>
   13938:	ldreq	r2, [pc, #3904]	; 14880 <__assert_fail@plt+0x349c>
   1393c:	str	r2, [r5, #16]
   13940:	mov	r2, #1
   13944:	str	r2, [r4, #32]
   13948:	strb	r2, [r4, #132]	; 0x84
   1394c:	mov	r2, #1
   13950:	strb	r2, [r4, #156]	; 0x9c
   13954:	ldr	r2, [r5, #16]
   13958:	mov	fp, #1
   1395c:	ldrb	r2, [r2]
   13960:	cmp	r2, #9
   13964:	beq	13970 <__assert_fail@plt+0x258c>
   13968:	mov	r2, #1
   1396c:	strb	r2, [r4, #116]	; 0x74
   13970:	mov	r2, #1
   13974:	strb	r2, [r4, #80]	; 0x50
   13978:	ldrb	r6, [r4, #183]	; 0xb7
   1397c:	cmp	r3, #0
   13980:	movne	r3, #0
   13984:	strbne	r3, [r4, #156]	; 0x9c
   13988:	cmp	r6, #0
   1398c:	beq	13b70 <__assert_fail@plt+0x278c>
   13990:	ldrb	r2, [r5, #52]	; 0x34
   13994:	ldr	r3, [r5, #60]	; 0x3c
   13998:	cmp	r2, #9
   1399c:	str	r3, [r5, #44]	; 0x2c
   139a0:	ldreq	r1, [r5, #48]	; 0x30
   139a4:	ldrne	r3, [r5, #48]	; 0x30
   139a8:	asreq	r3, r1, #31
   139ac:	addne	r3, r3, #1
   139b0:	lsreq	r2, r3, #29
   139b4:	addeq	r3, r1, r2
   139b8:	andeq	r3, r3, #7
   139bc:	subeq	r3, r3, r2
   139c0:	rsbeq	r3, r3, #8
   139c4:	addeq	r3, r3, r1
   139c8:	str	r3, [r4, #152]	; 0x98
   139cc:	ldrb	r3, [r4, #72]	; 0x48
   139d0:	cmp	r3, #0
   139d4:	beq	13b70 <__assert_fail@plt+0x278c>
   139d8:	cmp	fp, #0
   139dc:	ldr	r9, [r4, #152]	; 0x98
   139e0:	blt	13b7c <__assert_fail@plt+0x2798>
   139e4:	beq	144c8 <__assert_fail@plt+0x30e4>
   139e8:	cmp	sl, #0
   139ec:	ble	147b0 <__assert_fail@plt+0x33cc>
   139f0:	mov	r1, fp
   139f4:	mvn	r0, #-2147483648	; 0x80000000
   139f8:	bl	1b838 <__assert_fail@plt+0xa454>
   139fc:	sub	r3, sl, #1
   13a00:	cmp	r0, r3
   13a04:	movge	r0, #0
   13a08:	movlt	r0, #1
   13a0c:	cmp	r0, #0
   13a10:	beq	144c8 <__assert_fail@plt+0x30e4>
   13a14:	mov	r2, #0
   13a18:	mvn	r3, #-2147483648	; 0x80000000
   13a1c:	ldr	r0, [r5, #20]
   13a20:	sub	r0, r0, r9
   13a24:	mvn	r1, r0
   13a28:	lsr	r1, r1, #31
   13a2c:	cmp	r1, r2
   13a30:	beq	14530 <__assert_fail@plt+0x314c>
   13a34:	mov	r1, sl
   13a38:	sub	r0, r0, r3
   13a3c:	bl	1b838 <__assert_fail@plt+0xa454>
   13a40:	cmp	r0, #0
   13a44:	str	r0, [r4, #160]	; 0xa0
   13a48:	ble	14560 <__assert_fail@plt+0x317c>
   13a4c:	cmp	r6, #0
   13a50:	beq	13a74 <__assert_fail@plt+0x2690>
   13a54:	ldr	r0, [r4, #144]	; 0x90
   13a58:	bl	15110 <__assert_fail@plt+0x3d2c>
   13a5c:	ldr	r3, [r5, #48]	; 0x30
   13a60:	cmp	r3, #11
   13a64:	movcc	r3, #11
   13a68:	add	r0, r3, #1
   13a6c:	bl	198a8 <__assert_fail@plt+0x84c4>
   13a70:	str	r0, [r4, #144]	; 0x90
   13a74:	ldr	r0, [r4, #108]	; 0x6c
   13a78:	bl	15110 <__assert_fail@plt+0x3d2c>
   13a7c:	ldr	r0, [r5, #36]	; 0x24
   13a80:	cmp	r0, #8
   13a84:	movlt	r0, #8
   13a88:	bl	198a8 <__assert_fail@plt+0x84c4>
   13a8c:	mov	r3, #0
   13a90:	str	r3, [r4, #172]	; 0xac
   13a94:	str	r0, [r4, #108]	; 0x6c
   13a98:	ldr	r0, [r4]
   13a9c:	bl	15110 <__assert_fail@plt+0x3d2c>
   13aa0:	mov	r1, #40	; 0x28
   13aa4:	ldr	r0, [r5]
   13aa8:	bl	19990 <__assert_fail@plt+0x85ac>
   13aac:	ldrb	r9, [r4, #72]	; 0x48
   13ab0:	cmp	r9, #0
   13ab4:	mov	r6, r0
   13ab8:	str	r0, [r4]
   13abc:	beq	13ba8 <__assert_fail@plt+0x27c4>
   13ac0:	cmp	r7, #0
   13ac4:	subne	r8, r8, #4
   13ac8:	beq	13af8 <__assert_fail@plt+0x2714>
   13acc:	mov	r1, r6
   13ad0:	ldr	r0, [r8, #4]!
   13ad4:	bl	137a8 <__assert_fail@plt+0x23c4>
   13ad8:	cmp	r0, #0
   13adc:	subeq	r6, r6, #40	; 0x28
   13ae0:	ldreq	r3, [r5]
   13ae4:	add	r6, r6, #40	; 0x28
   13ae8:	subeq	r3, r3, #1
   13aec:	streq	r3, [r5]
   13af0:	subs	r7, r7, #1
   13af4:	bne	13acc <__assert_fail@plt+0x26e8>
   13af8:	ldr	r3, [r5]
   13afc:	cmp	r3, #0
   13b00:	bne	145f8 <__assert_fail@plt+0x3214>
   13b04:	add	sp, sp, #36	; 0x24
   13b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b0c:	mov	r1, #0
   13b10:	mov	r2, #1
   13b14:	strb	r1, [r5, #40]	; 0x28
   13b18:	strb	r2, [r4, #141]	; 0x8d
   13b1c:	str	r3, [r4, #176]	; 0xb0
   13b20:	b	138e0 <__assert_fail@plt+0x24fc>
   13b24:	ldrb	r3, [r4, #72]	; 0x48
   13b28:	cmp	r3, #0
   13b2c:	movne	sl, r7
   13b30:	ldreq	sl, [r5]
   13b34:	strne	r7, [r5]
   13b38:	b	13908 <__assert_fail@plt+0x2524>
   13b3c:	cmp	r3, #0
   13b40:	ldr	fp, [r4, #32]
   13b44:	bne	14594 <__assert_fail@plt+0x31b0>
   13b48:	cmp	fp, #1
   13b4c:	movne	r2, #1
   13b50:	strbne	r2, [r4, #156]	; 0x9c
   13b54:	bne	13968 <__assert_fail@plt+0x2584>
   13b58:	ldr	r2, [r5, #16]
   13b5c:	ldrb	r2, [r2]
   13b60:	cmp	r2, #9
   13b64:	ldreq	r2, [pc, #3348]	; 14880 <__assert_fail@plt+0x349c>
   13b68:	streq	r2, [r5, #16]
   13b6c:	b	1394c <__assert_fail@plt+0x2568>
   13b70:	cmp	fp, #0
   13b74:	mov	r9, #0
   13b78:	bge	139e4 <__assert_fail@plt+0x2600>
   13b7c:	cmp	sl, #0
   13b80:	ble	14818 <__assert_fail@plt+0x3434>
   13b84:	cmn	fp, #1
   13b88:	beq	144c8 <__assert_fail@plt+0x30e4>
   13b8c:	mov	r1, fp
   13b90:	mov	r0, #-2147483648	; 0x80000000
   13b94:	bl	1b838 <__assert_fail@plt+0xa454>
   13b98:	sub	r3, sl, #1
   13b9c:	cmp	r0, r3
   13ba0:	blt	13a14 <__assert_fail@plt+0x2630>
   13ba4:	b	144cc <__assert_fail@plt+0x30e8>
   13ba8:	cmp	r7, #0
   13bac:	ble	145a8 <__assert_fail@plt+0x31c4>
   13bb0:	mov	r1, r0
   13bb4:	ldr	r0, [r8]
   13bb8:	bl	137a8 <__assert_fail@plt+0x23c4>
   13bbc:	cmp	r0, #0
   13bc0:	beq	13b04 <__assert_fail@plt+0x2720>
   13bc4:	ldr	r0, [r6]
   13bc8:	ldr	r7, [r8]
   13bcc:	bl	11300 <fileno@plt>
   13bd0:	mov	r1, r0
   13bd4:	mov	r0, r7
   13bd8:	bl	1253c <__assert_fail@plt+0x1158>
   13bdc:	str	r9, [r6, #24]
   13be0:	ldr	r2, [r5]
   13be4:	ldr	r0, [r6, #4]
   13be8:	subs	r2, r2, #1
   13bec:	ldr	ip, [r6]
   13bf0:	beq	13c1c <__assert_fail@plt+0x2838>
   13bf4:	add	r3, r6, #80	; 0x50
   13bf8:	mov	r1, #0
   13bfc:	subs	r2, r2, #1
   13c00:	str	r0, [r3, #-36]	; 0xffffffdc
   13c04:	str	ip, [r3, #-40]	; 0xffffffd8
   13c08:	str	r1, [r3, #-32]	; 0xffffffe0
   13c0c:	strb	r1, [r3, #-3]
   13c10:	str	r1, [r3, #-16]
   13c14:	add	r3, r3, #40	; 0x28
   13c18:	bne	13bfc <__assert_fail@plt+0x2818>
   13c1c:	ldrb	r2, [r5, #4]
   13c20:	ldr	r3, [r4, #172]	; 0xac
   13c24:	cmp	r2, #0
   13c28:	str	r3, [r4, #4]
   13c2c:	bne	14648 <__assert_fail@plt+0x3264>
   13c30:	ldrd	r2, [r4, #24]
   13c34:	cmp	r3, #0
   13c38:	cmpeq	r2, #1
   13c3c:	strd	r2, [sp, #16]
   13c40:	bls	144ec <__assert_fail@plt+0x3108>
   13c44:	mov	r8, #1
   13c48:	mov	r9, #0
   13c4c:	mov	r7, #2
   13c50:	ldr	r3, [r4, #176]	; 0xb0
   13c54:	ldr	r6, [r4]
   13c58:	cmp	r3, #1
   13c5c:	ldr	r2, [r5]
   13c60:	ble	13cbc <__assert_fail@plt+0x28d8>
   13c64:	mov	sl, #1
   13c68:	cmp	r2, #0
   13c6c:	ble	13cac <__assert_fail@plt+0x28c8>
   13c70:	mov	fp, #1
   13c74:	b	13c8c <__assert_fail@plt+0x28a8>
   13c78:	ldr	r2, [r5]
   13c7c:	add	fp, fp, #1
   13c80:	cmp	fp, r2
   13c84:	add	r6, r6, #40	; 0x28
   13c88:	bgt	13ca8 <__assert_fail@plt+0x28c4>
   13c8c:	ldr	r3, [r6, #8]
   13c90:	cmp	r3, #0
   13c94:	bne	13c78 <__assert_fail@plt+0x2894>
   13c98:	mov	r1, fp
   13c9c:	mov	r0, r6
   13ca0:	bl	12f48 <__assert_fail@plt+0x1b64>
   13ca4:	b	13c78 <__assert_fail@plt+0x2894>
   13ca8:	ldr	r6, [r4]
   13cac:	ldr	r3, [r4, #176]	; 0xb0
   13cb0:	add	sl, sl, #1
   13cb4:	cmp	sl, r3
   13cb8:	blt	13c68 <__assert_fail@plt+0x2884>
   13cbc:	mov	r3, #1
   13cc0:	cmp	r2, #0
   13cc4:	strb	r3, [r4, #140]	; 0x8c
   13cc8:	ble	13d40 <__assert_fail@plt+0x295c>
   13ccc:	mov	sl, #1
   13cd0:	b	13ce8 <__assert_fail@plt+0x2904>
   13cd4:	ldr	r2, [r5]
   13cd8:	add	sl, sl, #1
   13cdc:	cmp	sl, r2
   13ce0:	add	r6, r6, #40	; 0x28
   13ce4:	bgt	13d04 <__assert_fail@plt+0x2920>
   13ce8:	ldr	r3, [r6, #8]
   13cec:	cmp	r3, #0
   13cf0:	bne	13cd4 <__assert_fail@plt+0x28f0>
   13cf4:	mov	r1, sl
   13cf8:	mov	r0, r6
   13cfc:	bl	12f48 <__assert_fail@plt+0x1b64>
   13d00:	b	13cd4 <__assert_fail@plt+0x28f0>
   13d04:	ldrb	r3, [r5, #4]
   13d08:	cmp	r3, #0
   13d0c:	beq	13d40 <__assert_fail@plt+0x295c>
   13d10:	cmp	r2, #0
   13d14:	ldr	r3, [r4]
   13d18:	ble	13d40 <__assert_fail@plt+0x295c>
   13d1c:	add	r2, r2, #1
   13d20:	mov	r1, #1
   13d24:	ldr	r0, [r3, #8]
   13d28:	add	r1, r1, #1
   13d2c:	cmp	r0, #3
   13d30:	strne	r7, [r3, #8]
   13d34:	cmp	r2, r1
   13d38:	add	r3, r3, #40	; 0x28
   13d3c:	bne	13d24 <__assert_fail@plt+0x2940>
   13d40:	bl	12284 <__assert_fail@plt+0xea0>
   13d44:	ldr	r3, [r4, #4]
   13d48:	mov	r2, #0
   13d4c:	cmp	r3, #0
   13d50:	strb	r2, [r4, #140]	; 0x8c
   13d54:	ble	14608 <__assert_fail@plt+0x3224>
   13d58:	ldrd	r2, [sp, #16]
   13d5c:	adds	r8, r8, #1
   13d60:	adc	r9, r9, #0
   13d64:	cmp	r3, r9
   13d68:	cmpeq	r2, r8
   13d6c:	bne	13c50 <__assert_fail@plt+0x286c>
   13d70:	ldrd	r2, [r4, #24]
   13d74:	strd	r2, [r4, #96]	; 0x60
   13d78:	ldrb	ip, [r4, #156]	; 0x9c
   13d7c:	ldr	r1, [r4, #92]	; 0x5c
   13d80:	cmp	ip, #0
   13d84:	moveq	r0, ip
   13d88:	beq	13dac <__assert_fail@plt+0x29c8>
   13d8c:	ldrb	r3, [r4, #72]	; 0x48
   13d90:	ldr	r0, [r4, #160]	; 0xa0
   13d94:	cmp	r3, #0
   13d98:	beq	13da8 <__assert_fail@plt+0x29c4>
   13d9c:	ldrb	r3, [r4, #183]	; 0xb7
   13da0:	cmp	r3, #0
   13da4:	bne	14790 <__assert_fail@plt+0x33ac>
   13da8:	add	r0, r1, r0
   13dac:	ldr	r6, [r5]
   13db0:	ldr	sl, [r4, #32]
   13db4:	cmp	r6, #1
   13db8:	add	r1, r1, sl
   13dbc:	ldr	r3, [r4]
   13dc0:	ble	147a0 <__assert_fail@plt+0x33bc>
   13dc4:	ldrb	r2, [r5, #4]
   13dc8:	ldrb	r9, [r4, #72]	; 0x48
   13dcc:	ldrb	r8, [r4, #183]	; 0xb7
   13dd0:	ldr	fp, [r4, #160]	; 0xa0
   13dd4:	str	r2, [sp, #24]
   13dd8:	eor	r9, r9, #1
   13ddc:	mov	r2, #1
   13de0:	mov	r7, #0
   13de4:	ldr	lr, [sp, #24]
   13de8:	cmp	lr, #0
   13dec:	ldreq	lr, [pc, #2704]	; 14884 <__assert_fail@plt+0x34a0>
   13df0:	ldrne	lr, [pc, #2704]	; 14888 <__assert_fail@plt+0x34a4>
   13df4:	streq	lr, [r3, #16]
   13df8:	strne	lr, [r3, #16]
   13dfc:	ldreq	lr, [pc, #2696]	; 1488c <__assert_fail@plt+0x34a8>
   13e00:	ldrne	lr, [pc, #2696]	; 14890 <__assert_fail@plt+0x34ac>
   13e04:	cmp	r8, #0
   13e08:	str	lr, [r3, #12]
   13e0c:	moveq	lr, r7
   13e10:	beq	13e20 <__assert_fail@plt+0x2a3c>
   13e14:	cmp	r2, #1
   13e18:	movne	lr, r9
   13e1c:	orreq	lr, r9, #1
   13e20:	cmp	ip, #0
   13e24:	str	r1, [r3, #32]
   13e28:	add	r2, r2, #1
   13e2c:	addne	r1, sl, r0
   13e30:	addne	r0, r1, fp
   13e34:	moveq	r0, r7
   13e38:	moveq	r1, ip
   13e3c:	cmp	r2, r6
   13e40:	strb	lr, [r3, #36]	; 0x24
   13e44:	add	r3, r3, #40	; 0x28
   13e48:	blt	13de4 <__assert_fail@plt+0x2a00>
   13e4c:	ldr	r2, [sp, #24]
   13e50:	cmp	r2, #0
   13e54:	beq	144d8 <__assert_fail@plt+0x30f4>
   13e58:	ldrb	r2, [r4, #181]	; 0xb5
   13e5c:	cmp	r2, #0
   13e60:	beq	144d8 <__assert_fail@plt+0x30f4>
   13e64:	ldr	r0, [pc, #2588]	; 14888 <__assert_fail@plt+0x34a4>
   13e68:	ldr	r2, [pc, #2592]	; 14890 <__assert_fail@plt+0x34ac>
   13e6c:	str	r0, [r3, #16]
   13e70:	str	r2, [r3, #12]
   13e74:	ldrb	r2, [r4, #183]	; 0xb7
   13e78:	cmp	r2, #0
   13e7c:	beq	13e90 <__assert_fail@plt+0x2aac>
   13e80:	ldrb	r2, [r4, #72]	; 0x48
   13e84:	eor	r2, r2, #1
   13e88:	cmp	r6, #1
   13e8c:	orreq	r2, r2, #1
   13e90:	strb	r2, [r3, #36]	; 0x24
   13e94:	str	r1, [r3, #32]
   13e98:	ldr	r3, [sp, #24]
   13e9c:	ldr	r0, [r5, #44]	; 0x2c
   13ea0:	cmp	r3, #0
   13ea4:	mov	r6, #0
   13ea8:	mov	r8, #1
   13eac:	str	r0, [r4, #148]	; 0x94
   13eb0:	bne	141e0 <__assert_fail@plt+0x2dfc>
   13eb4:	ldr	r2, [r5]
   13eb8:	ldr	r3, [r4]
   13ebc:	cmp	r2, #0
   13ec0:	beq	13ee8 <__assert_fail@plt+0x2b04>
   13ec4:	ldr	r0, [r4, #176]	; 0xb0
   13ec8:	ldr	r1, [r3, #8]
   13ecc:	add	r3, r3, #40	; 0x28
   13ed0:	cmp	r1, #0
   13ed4:	movne	r1, r6
   13ed8:	moveq	r1, r0
   13edc:	subs	r2, r2, #1
   13ee0:	str	r1, [r3, #-12]
   13ee4:	bne	13ec8 <__assert_fail@plt+0x2ae4>
   13ee8:	bl	12208 <__assert_fail@plt+0xe24>
   13eec:	cmp	r0, #0
   13ef0:	beq	13b04 <__assert_fail@plt+0x2720>
   13ef4:	ldrb	r3, [r5, #40]	; 0x28
   13ef8:	ldr	r2, [r4, #176]	; 0xb0
   13efc:	strb	r6, [r4, #124]	; 0x7c
   13f00:	cmp	r3, #0
   13f04:	ldrb	r3, [r4, #180]	; 0xb4
   13f08:	strbne	r8, [r4, #104]	; 0x68
   13f0c:	str	r2, [sp, #16]
   13f10:	cmp	r3, #0
   13f14:	lslne	r3, r2, #1
   13f18:	strne	r3, [sp, #16]
   13f1c:	ldr	r3, [sp, #16]
   13f20:	cmp	r3, #0
   13f24:	movgt	r9, r6
   13f28:	ble	147f4 <__assert_fail@plt+0x3410>
   13f2c:	bl	12208 <__assert_fail@plt+0xe24>
   13f30:	cmp	r0, #0
   13f34:	beq	1414c <__assert_fail@plt+0x2d68>
   13f38:	ldr	r3, [r5]
   13f3c:	str	r6, [r4, #76]	; 0x4c
   13f40:	cmp	r3, #0
   13f44:	str	r6, [r4, #84]	; 0x54
   13f48:	str	r6, [r4, #88]	; 0x58
   13f4c:	strb	r6, [r4, #124]	; 0x7c
   13f50:	strb	r6, [r4, #164]	; 0xa4
   13f54:	strb	r8, [r4, #165]	; 0xa5
   13f58:	ldr	r7, [r4]
   13f5c:	ble	140a4 <__assert_fail@plt+0x2cc0>
   13f60:	mov	fp, #1
   13f64:	b	13fb8 <__assert_fail@plt+0x2bd4>
   13f68:	ldr	r3, [r7, #8]
   13f6c:	cmp	r3, #1
   13f70:	beq	13fc8 <__assert_fail@plt+0x2be4>
   13f74:	ldrb	r3, [r4, #72]	; 0x48
   13f78:	cmp	r3, #0
   13f7c:	beq	13f90 <__assert_fail@plt+0x2bac>
   13f80:	ldrb	r3, [r4, #165]	; 0xa5
   13f84:	cmp	r3, #0
   13f88:	beq	14044 <__assert_fail@plt+0x2c60>
   13f8c:	strb	r8, [r4, #164]	; 0xa4
   13f90:	ldrb	r3, [r4, #132]	; 0x84
   13f94:	add	fp, fp, #1
   13f98:	add	r7, r7, #40	; 0x28
   13f9c:	cmp	r3, #0
   13fa0:	ldrne	r3, [r4, #88]	; 0x58
   13fa4:	addne	r3, r3, #1
   13fa8:	strne	r3, [r4, #88]	; 0x58
   13fac:	ldr	r3, [r5]
   13fb0:	cmp	fp, r3
   13fb4:	bgt	143ec <__assert_fail@plt+0x3008>
   13fb8:	ldr	r3, [r7, #28]
   13fbc:	str	r6, [r4, #112]	; 0x70
   13fc0:	cmp	r3, #0
   13fc4:	ble	13f68 <__assert_fail@plt+0x2b84>
   13fc8:	ldr	r2, [r7, #32]
   13fcc:	ldr	r3, [r7, #12]
   13fd0:	mov	r0, r7
   13fd4:	strb	r6, [r4, #157]	; 0x9d
   13fd8:	str	r2, [r4, #128]	; 0x80
   13fdc:	blx	r3
   13fe0:	cmp	r0, #0
   13fe4:	beq	14050 <__assert_fail@plt+0x2c6c>
   13fe8:	ldr	r3, [r7, #28]
   13fec:	ldrb	sl, [r4, #124]	; 0x7c
   13ff0:	sub	r3, r3, #1
   13ff4:	cmp	r3, #0
   13ff8:	str	r3, [r7, #28]
   13ffc:	orr	r9, sl, r9
   14000:	ble	1405c <__assert_fail@plt+0x2c78>
   14004:	ldrb	r3, [r4, #72]	; 0x48
   14008:	cmp	r3, #0
   1400c:	beq	13f90 <__assert_fail@plt+0x2bac>
   14010:	ldr	r3, [r7, #8]
   14014:	cmp	r3, #0
   14018:	beq	13f90 <__assert_fail@plt+0x2bac>
   1401c:	ldrb	r2, [r4, #165]	; 0xa5
   14020:	cmp	r2, #0
   14024:	bne	13f8c <__assert_fail@plt+0x2ba8>
   14028:	cmp	r3, #3
   1402c:	beq	14044 <__assert_fail@plt+0x2c60>
   14030:	cmp	r3, #2
   14034:	bne	13f90 <__assert_fail@plt+0x2bac>
   14038:	ldrb	r3, [r4, #157]	; 0x9d
   1403c:	cmp	r3, #0
   14040:	beq	13f90 <__assert_fail@plt+0x2bac>
   14044:	mov	r0, r7
   14048:	bl	13374 <__assert_fail@plt+0x1f90>
   1404c:	b	13f90 <__assert_fail@plt+0x2bac>
   14050:	mov	r0, r7
   14054:	bl	13170 <__assert_fail@plt+0x1d8c>
   14058:	b	13fe8 <__assert_fail@plt+0x2c04>
   1405c:	bl	12208 <__assert_fail@plt+0xe24>
   14060:	cmp	r0, #0
   14064:	bne	14004 <__assert_fail@plt+0x2c20>
   14068:	cmp	sl, #0
   1406c:	beq	143fc <__assert_fail@plt+0x3018>
   14070:	ldr	r3, [pc, #2076]	; 14894 <__assert_fail@plt+0x34b0>
   14074:	ldr	r0, [r3]
   14078:	ldr	r2, [r0, #24]
   1407c:	ldr	r3, [r0, #20]
   14080:	cmp	r3, r2
   14084:	addcc	r2, r3, #1
   14088:	strcc	r2, [r0, #20]
   1408c:	movcc	r2, #10
   14090:	strbcc	r2, [r3]
   14094:	bcs	1440c <__assert_fail@plt+0x3028>
   14098:	ldr	r3, [sp, #16]
   1409c:	sub	r3, r3, #1
   140a0:	str	r3, [sp, #16]
   140a4:	bl	12208 <__assert_fail@plt+0xe24>
   140a8:	cmp	r0, #0
   140ac:	beq	143fc <__assert_fail@plt+0x3018>
   140b0:	ldrb	r3, [r4, #180]	; 0xb4
   140b4:	cmp	r3, #0
   140b8:	beq	140f8 <__assert_fail@plt+0x2d14>
   140bc:	cmp	r9, #0
   140c0:	beq	140f8 <__assert_fail@plt+0x2d14>
   140c4:	ldr	r3, [pc, #1992]	; 14894 <__assert_fail@plt+0x34b0>
   140c8:	ldr	r0, [r3]
   140cc:	ldr	r2, [r0, #24]
   140d0:	ldr	r3, [r0, #20]
   140d4:	cmp	r3, r2
   140d8:	addcc	r2, r3, #1
   140dc:	strcc	r2, [r0, #20]
   140e0:	movcc	r2, #10
   140e4:	strbcc	r2, [r3]
   140e8:	bcs	14424 <__assert_fail@plt+0x3040>
   140ec:	ldr	r3, [sp, #16]
   140f0:	sub	r3, r3, #1
   140f4:	str	r3, [sp, #16]
   140f8:	ldr	r3, [sp, #16]
   140fc:	cmp	r3, #0
   14100:	bgt	13f2c <__assert_fail@plt+0x2b48>
   14104:	ldr	r3, [sp, #16]
   14108:	cmp	r3, #0
   1410c:	bne	1414c <__assert_fail@plt+0x2d68>
   14110:	ldr	r0, [r5]
   14114:	ldr	r3, [r4]
   14118:	cmp	r0, #0
   1411c:	ble	1414c <__assert_fail@plt+0x2d68>
   14120:	add	r0, r0, #1
   14124:	mov	r2, #1
   14128:	ldr	r1, [r3, #8]
   1412c:	add	r2, r2, #1
   14130:	cmp	r1, #0
   14134:	strbeq	r8, [r3, #37]	; 0x25
   14138:	cmp	r2, r0
   1413c:	add	r3, r3, #40	; 0x28
   14140:	bne	14128 <__assert_fail@plt+0x2d44>
   14144:	mov	r3, #0
   14148:	str	r3, [sp, #16]
   1414c:	cmp	r9, #0
   14150:	strb	r9, [r4, #124]	; 0x7c
   14154:	beq	14164 <__assert_fail@plt+0x2d80>
   14158:	ldrb	r3, [r5, #40]	; 0x28
   1415c:	cmp	r3, #0
   14160:	bne	14470 <__assert_fail@plt+0x308c>
   14164:	ldrb	r3, [r4, #141]	; 0x8d
   14168:	cmp	r3, #0
   1416c:	beq	141a8 <__assert_fail@plt+0x2dc4>
   14170:	ldrb	r3, [r4, #142]	; 0x8e
   14174:	cmp	r3, #0
   14178:	beq	141a8 <__assert_fail@plt+0x2dc4>
   1417c:	ldr	r3, [pc, #1808]	; 14894 <__assert_fail@plt+0x34b0>
   14180:	ldr	r0, [r3]
   14184:	ldr	r2, [r0, #24]
   14188:	ldr	r3, [r0, #20]
   1418c:	cmp	r3, r2
   14190:	addcc	r2, r3, #1
   14194:	strcc	r2, [r0, #20]
   14198:	movcc	r2, #12
   1419c:	strbcc	r2, [r3]
   141a0:	bcs	147e8 <__assert_fail@plt+0x3404>
   141a4:	strb	r6, [r4, #142]	; 0x8e
   141a8:	ldrd	r2, [r4, #96]	; 0x60
   141ac:	ldrd	r0, [r5, #8]
   141b0:	adds	r2, r2, #1
   141b4:	adc	r3, r3, #0
   141b8:	cmp	r3, r1
   141bc:	cmpeq	r2, r0
   141c0:	strd	r2, [r4, #96]	; 0x60
   141c4:	bhi	13b04 <__assert_fail@plt+0x2720>
   141c8:	bl	12284 <__assert_fail@plt+0xea0>
   141cc:	ldrb	r3, [r5, #4]
   141d0:	str	r3, [sp, #24]
   141d4:	ldr	r3, [sp, #24]
   141d8:	cmp	r3, #0
   141dc:	beq	13eb4 <__assert_fail@plt+0x2ad0>
   141e0:	ldrb	r0, [r4, #181]	; 0xb5
   141e4:	str	r6, [r4, #8]
   141e8:	cmp	r0, #0
   141ec:	beq	14430 <__assert_fail@plt+0x304c>
   141f0:	ldr	r3, [r5]
   141f4:	ldr	r7, [r4]
   141f8:	cmp	r3, #0
   141fc:	str	r3, [sp, #28]
   14200:	ble	14840 <__assert_fail@plt+0x345c>
   14204:	ldr	r3, [sp, #28]
   14208:	mov	r2, r7
   1420c:	add	r1, r3, #1
   14210:	mov	r3, #1
   14214:	add	r3, r3, #1
   14218:	cmp	r1, r3
   1421c:	str	r6, [r2, #24]
   14220:	add	r2, r2, #40	; 0x28
   14224:	bne	14214 <__assert_fail@plt+0x2e30>
   14228:	ldr	r9, [r4, #4]
   1422c:	cmp	r9, #0
   14230:	beq	14834 <__assert_fail@plt+0x3450>
   14234:	mov	r3, #1
   14238:	mov	fp, #0
   1423c:	str	r3, [sp, #16]
   14240:	mov	r3, fp
   14244:	mov	r9, r6
   14248:	mov	fp, r7
   1424c:	mov	r7, r3
   14250:	ldr	sl, [r4, #176]	; 0xb0
   14254:	str	r7, [fp, #20]
   14258:	cmp	sl, #0
   1425c:	beq	142f0 <__assert_fail@plt+0x2f0c>
   14260:	ldr	r3, [r4, #4]
   14264:	cmp	r3, #0
   14268:	beq	14318 <__assert_fail@plt+0x2f34>
   1426c:	ldr	r3, [fp, #8]
   14270:	b	14288 <__assert_fail@plt+0x2ea4>
   14274:	subs	sl, sl, #1
   14278:	beq	142f0 <__assert_fail@plt+0x2f0c>
   1427c:	ldr	r2, [r4, #4]
   14280:	cmp	r2, #0
   14284:	beq	14318 <__assert_fail@plt+0x2f34>
   14288:	cmp	r3, #0
   1428c:	bne	14274 <__assert_fail@plt+0x2e90>
   14290:	mov	r0, fp
   14294:	str	r3, [r4, #112]	; 0x70
   14298:	bl	133d8 <__assert_fail@plt+0x1ff4>
   1429c:	cmp	r0, #0
   142a0:	beq	14418 <__assert_fail@plt+0x3034>
   142a4:	ldr	r3, [fp, #8]
   142a8:	ldr	r1, [r4, #8]
   142ac:	cmp	r3, #0
   142b0:	beq	142bc <__assert_fail@plt+0x2ed8>
   142b4:	cmp	r1, r9
   142b8:	beq	14274 <__assert_fail@plt+0x2e90>
   142bc:	ldr	r2, [fp, #24]
   142c0:	ldr	ip, [r4, #120]	; 0x78
   142c4:	add	r2, r2, #1
   142c8:	ldr	r0, [r4, #136]	; 0x88
   142cc:	str	r2, [fp, #24]
   142d0:	str	r9, [ip, r7, lsl #2]
   142d4:	lsl	r2, r7, #2
   142d8:	mov	r9, r1
   142dc:	ldr	r1, [r4, #112]	; 0x70
   142e0:	subs	sl, sl, #1
   142e4:	str	r1, [r0, r2]
   142e8:	add	r7, r7, #1
   142ec:	bne	1427c <__assert_fail@plt+0x2e98>
   142f0:	ldr	r3, [sp, #16]
   142f4:	ldr	r2, [sp, #28]
   142f8:	add	r3, r3, #1
   142fc:	cmp	r3, r2
   14300:	str	r3, [sp, #16]
   14304:	add	fp, fp, #40	; 0x28
   14308:	bgt	14318 <__assert_fail@plt+0x2f34>
   1430c:	ldr	r3, [r4, #4]
   14310:	cmp	r3, #0
   14314:	bne	14250 <__assert_fail@plt+0x2e6c>
   14318:	mov	fp, r7
   1431c:	ldrb	r0, [r4, #181]	; 0xb5
   14320:	ldr	r7, [r4]
   14324:	lsl	r2, fp, #2
   14328:	ldr	r1, [r4, #120]	; 0x78
   1432c:	cmp	r0, #0
   14330:	str	r9, [r1, r2]
   14334:	beq	14450 <__assert_fail@plt+0x306c>
   14338:	ldr	r9, [r5]
   1433c:	cmp	r9, #0
   14340:	ble	1439c <__assert_fail@plt+0x2fb8>
   14344:	mov	r1, r9
   14348:	mov	r0, fp
   1434c:	bl	1b838 <__assert_fail@plt+0xa454>
   14350:	mov	r1, r9
   14354:	mov	sl, r0
   14358:	mov	r0, fp
   1435c:	bl	1ba58 <__assert_fail@plt+0xa674>
   14360:	add	fp, sl, #1
   14364:	add	lr, r9, #1
   14368:	mov	r2, r7
   1436c:	mov	r0, #0
   14370:	mov	r3, #1
   14374:	cmp	r1, r3
   14378:	add	r3, r3, #1
   1437c:	movlt	ip, sl
   14380:	movge	ip, fp
   14384:	cmp	lr, r3
   14388:	str	r0, [r2, #20]
   1438c:	str	ip, [r2, #24]
   14390:	add	r0, r0, ip
   14394:	add	r2, r2, #40	; 0x28
   14398:	bne	14374 <__assert_fail@plt+0x2f90>
   1439c:	subs	r9, r9, #1
   143a0:	beq	14464 <__assert_fail@plt+0x3080>
   143a4:	mov	r2, r9
   143a8:	mov	r3, r7
   143ac:	ldr	r1, [r3, #24]
   143b0:	subs	r2, r2, #1
   143b4:	str	r1, [r3, #28]
   143b8:	add	r3, r3, #40	; 0x28
   143bc:	bne	143ac <__assert_fail@plt+0x2fc8>
   143c0:	ldr	r3, [sp, #24]
   143c4:	add	r9, r9, r9, lsl #2
   143c8:	cmp	r3, #0
   143cc:	add	r7, r7, r9, lsl #3
   143d0:	bne	14464 <__assert_fail@plt+0x3080>
   143d4:	ldr	r3, [r7, #8]
   143d8:	cmp	r3, #0
   143dc:	strne	r6, [r7, #28]
   143e0:	ldreq	r3, [r4, #176]	; 0xb0
   143e4:	streq	r3, [r7, #28]
   143e8:	b	13ee8 <__assert_fail@plt+0x2b04>
   143ec:	ldrb	r3, [r4, #124]	; 0x7c
   143f0:	cmp	r3, #0
   143f4:	bne	14070 <__assert_fail@plt+0x2c8c>
   143f8:	b	140a4 <__assert_fail@plt+0x2cc0>
   143fc:	ldrb	r3, [r5, #40]	; 0x28
   14400:	cmp	r3, #0
   14404:	bne	140b0 <__assert_fail@plt+0x2ccc>
   14408:	b	14104 <__assert_fail@plt+0x2d20>
   1440c:	mov	r1, #10
   14410:	bl	11348 <__overflow@plt>
   14414:	b	14098 <__assert_fail@plt+0x2cb4>
   14418:	mov	r0, fp
   1441c:	bl	13170 <__assert_fail@plt+0x1d8c>
   14420:	b	142a4 <__assert_fail@plt+0x2ec0>
   14424:	mov	r1, #10
   14428:	bl	11348 <__overflow@plt>
   1442c:	b	140ec <__assert_fail@plt+0x2d08>
   14430:	ldr	fp, [r5]
   14434:	ldr	r7, [r4]
   14438:	sub	r3, fp, #1
   1443c:	cmp	r3, #0
   14440:	str	r3, [sp, #28]
   14444:	bgt	14204 <__assert_fail@plt+0x2e20>
   14448:	ldr	r3, [r4, #120]	; 0x78
   1444c:	str	r0, [r3]
   14450:	ldr	r9, [r5]
   14454:	subs	r9, r9, #1
   14458:	strne	r6, [sp, #24]
   1445c:	bne	143a4 <__assert_fail@plt+0x2fc0>
   14460:	b	143d4 <__assert_fail@plt+0x2ff0>
   14464:	ldr	r3, [r7, #24]
   14468:	str	r3, [r7, #28]
   1446c:	b	13ee8 <__assert_fail@plt+0x2b04>
   14470:	ldrb	r3, [r4, #184]	; 0xb8
   14474:	cmp	r3, #0
   14478:	bne	144fc <__assert_fail@plt+0x3118>
   1447c:	ldr	r3, [sp, #16]
   14480:	adds	sl, r3, #5
   14484:	bne	14494 <__assert_fail@plt+0x30b0>
   14488:	b	141a8 <__assert_fail@plt+0x2dc4>
   1448c:	subs	sl, sl, #1
   14490:	beq	141a8 <__assert_fail@plt+0x2dc4>
   14494:	ldr	r3, [pc, #1016]	; 14894 <__assert_fail@plt+0x34b0>
   14498:	ldr	r0, [r3]
   1449c:	ldr	r2, [r0, #24]
   144a0:	ldr	r3, [r0, #20]
   144a4:	cmp	r3, r2
   144a8:	addcc	r2, r3, #1
   144ac:	strcc	r2, [r0, #20]
   144b0:	movcc	r2, #10
   144b4:	strbcc	r2, [r3]
   144b8:	bcc	1448c <__assert_fail@plt+0x30a8>
   144bc:	mov	r1, #10
   144c0:	bl	11348 <__overflow@plt>
   144c4:	b	1448c <__assert_fail@plt+0x30a8>
   144c8:	sub	r3, sl, #1
   144cc:	mul	r3, fp, r3
   144d0:	lsr	r2, r3, #31
   144d4:	b	13a1c <__assert_fail@plt+0x2638>
   144d8:	ldr	r0, [pc, #932]	; 14884 <__assert_fail@plt+0x34a0>
   144dc:	ldr	r2, [pc, #936]	; 1488c <__assert_fail@plt+0x34a8>
   144e0:	str	r0, [r3, #16]
   144e4:	str	r2, [r3, #12]
   144e8:	b	13e74 <__assert_fail@plt+0x2a90>
   144ec:	mov	r2, #1
   144f0:	mov	r3, #0
   144f4:	strd	r2, [r4, #96]	; 0x60
   144f8:	b	13d78 <__assert_fail@plt+0x2994>
   144fc:	ldr	r3, [pc, #912]	; 14894 <__assert_fail@plt+0x34b0>
   14500:	ldr	r0, [r3]
   14504:	ldr	r2, [r0, #24]
   14508:	ldr	r3, [r0, #20]
   1450c:	cmp	r3, r2
   14510:	addcc	r2, r3, #1
   14514:	strcc	r2, [r0, #20]
   14518:	movcc	r2, #12
   1451c:	strbcc	r2, [r3]
   14520:	bcc	141a8 <__assert_fail@plt+0x2dc4>
   14524:	mov	r1, #12
   14528:	bl	11348 <__overflow@plt>
   1452c:	b	141a8 <__assert_fail@plt+0x2dc4>
   14530:	cmp	r0, #0
   14534:	blt	147d4 <__assert_fail@plt+0x33f0>
   14538:	sub	r2, r3, #-2147483647	; 0x80000001
   1453c:	cmp	r0, r2
   14540:	movle	r2, #0
   14544:	movgt	r2, #1
   14548:	cmp	r2, #0
   1454c:	beq	13a34 <__assert_fail@plt+0x2650>
   14550:	mov	r1, sl
   14554:	mov	r0, #0
   14558:	bl	1b838 <__assert_fail@plt+0xa454>
   1455c:	str	r0, [r4, #160]	; 0xa0
   14560:	mov	r2, #5
   14564:	ldr	r1, [pc, #812]	; 14898 <__assert_fail@plt+0x34b4>
   14568:	mov	r0, #0
   1456c:	bl	11168 <dcgettext@plt>
   14570:	mov	r1, #0
   14574:	mov	r2, r0
   14578:	mov	r0, #1
   1457c:	bl	11204 <error@plt>
   14580:	mov	r2, #0
   14584:	ldrb	r3, [r4, #182]	; 0xb6
   14588:	ldr	fp, [r4, #32]
   1458c:	strb	r2, [r5, #4]
   14590:	b	13978 <__assert_fail@plt+0x2594>
   14594:	mov	r2, #1
   14598:	cmp	fp, r2
   1459c:	strb	r2, [r4, #156]	; 0x9c
   145a0:	bne	13968 <__assert_fail@plt+0x2584>
   145a4:	b	13954 <__assert_fail@plt+0x2570>
   145a8:	mov	r2, #5
   145ac:	ldr	r1, [pc, #744]	; 1489c <__assert_fail@plt+0x34b8>
   145b0:	mov	r0, r9
   145b4:	bl	11168 <dcgettext@plt>
   145b8:	ldr	r2, [pc, #736]	; 148a0 <__assert_fail@plt+0x34bc>
   145bc:	ldr	r3, [r4, #172]	; 0xac
   145c0:	str	r9, [r6, #8]
   145c4:	ldr	r1, [r2]
   145c8:	add	r3, r3, #1
   145cc:	mov	r2, #1
   145d0:	str	r1, [r6]
   145d4:	strb	r9, [r6, #37]	; 0x25
   145d8:	mvn	r1, #0
   145dc:	str	r3, [r4, #172]	; 0xac
   145e0:	strb	r2, [r4, #166]	; 0xa6
   145e4:	str	r0, [r6, #4]
   145e8:	ldr	r0, [pc, #692]	; 148a4 <__assert_fail@plt+0x34c0>
   145ec:	bl	1253c <__assert_fail@plt+0x1158>
   145f0:	str	r9, [r6, #24]
   145f4:	b	13be0 <__assert_fail@plt+0x27fc>
   145f8:	mvn	r1, #0
   145fc:	ldr	r0, [pc, #672]	; 148a4 <__assert_fail@plt+0x34c0>
   14600:	bl	1253c <__assert_fail@plt+0x1158>
   14604:	b	13c1c <__assert_fail@plt+0x2838>
   14608:	mov	r2, #5
   1460c:	ldr	r1, [pc, #660]	; 148a8 <__assert_fail@plt+0x34c4>
   14610:	mov	r0, #0
   14614:	bl	11168 <dcgettext@plt>
   14618:	ldrd	r2, [sp, #16]
   1461c:	mov	r1, #0
   14620:	strd	r8, [sp, #8]
   14624:	strd	r2, [sp]
   14628:	mov	r2, r0
   1462c:	mov	r0, r1
   14630:	bl	11204 <error@plt>
   14634:	ldr	r3, [r4, #4]
   14638:	cmp	r3, #0
   1463c:	bgt	13d70 <__assert_fail@plt+0x298c>
   14640:	add	sp, sp, #36	; 0x24
   14644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14648:	ldr	r6, [r5]
   1464c:	cmp	r6, #0
   14650:	blt	14764 <__assert_fail@plt+0x3380>
   14654:	beq	14694 <__assert_fail@plt+0x32b0>
   14658:	ldr	r7, [r4, #176]	; 0xb0
   1465c:	cmp	r7, #0
   14660:	blt	14850 <__assert_fail@plt+0x346c>
   14664:	mov	r1, r6
   14668:	mvn	r0, #-2147483648	; 0x80000000
   1466c:	bl	1b838 <__assert_fail@plt+0xa454>
   14670:	cmp	r7, r0
   14674:	movle	r0, #0
   14678:	movgt	r0, #1
   1467c:	cmp	r0, #0
   14680:	bne	14760 <__assert_fail@plt+0x337c>
   14684:	ldr	r3, [r4, #176]	; 0xb0
   14688:	mul	r6, r3, r6
   1468c:	cmn	r6, #-2147483647	; 0x80000001
   14690:	beq	14760 <__assert_fail@plt+0x337c>
   14694:	ldr	r7, [r4, #160]	; 0xa0
   14698:	add	r8, r6, #1
   1469c:	cmn	r7, #-2147483647	; 0x80000001
   146a0:	beq	14760 <__assert_fail@plt+0x337c>
   146a4:	add	r7, r7, #1
   146a8:	cmp	r7, #0
   146ac:	blt	1473c <__assert_fail@plt+0x3358>
   146b0:	beq	146dc <__assert_fail@plt+0x32f8>
   146b4:	cmp	r6, #0
   146b8:	blt	148e4 <__assert_fail@plt+0x3500>
   146bc:	mov	r1, r7
   146c0:	mvn	r0, #-2147483648	; 0x80000000
   146c4:	bl	1b838 <__assert_fail@plt+0xa454>
   146c8:	cmp	r0, r6
   146cc:	movge	r0, #0
   146d0:	movlt	r0, #1
   146d4:	cmp	r0, #0
   146d8:	bne	14760 <__assert_fail@plt+0x337c>
   146dc:	ldr	r0, [r4, #120]	; 0x78
   146e0:	bl	15110 <__assert_fail@plt+0x3d2c>
   146e4:	mov	r1, #4
   146e8:	mov	r0, r8
   146ec:	bl	19990 <__assert_fail@plt+0x85ac>
   146f0:	mul	r7, r7, r6
   146f4:	str	r0, [r4, #120]	; 0x78
   146f8:	ldr	r0, [r4, #136]	; 0x88
   146fc:	bl	15110 <__assert_fail@plt+0x3d2c>
   14700:	mov	r1, #4
   14704:	mov	r0, r6
   14708:	bl	19990 <__assert_fail@plt+0x85ac>
   1470c:	str	r0, [r4, #136]	; 0x88
   14710:	ldr	r0, [r4, #16]
   14714:	bl	15110 <__assert_fail@plt+0x3d2c>
   14718:	ldrb	r1, [r4, #132]	; 0x84
   1471c:	mov	r0, r7
   14720:	add	r1, r1, #1
   14724:	bl	19990 <__assert_fail@plt+0x85ac>
   14728:	ldrb	r3, [r4, #132]	; 0x84
   1472c:	mla	r7, r3, r7, r7
   14730:	str	r7, [r4, #12]
   14734:	str	r0, [r4, #16]
   14738:	b	13c30 <__assert_fail@plt+0x284c>
   1473c:	cmp	r6, #0
   14740:	blt	148c8 <__assert_fail@plt+0x34e4>
   14744:	cmn	r7, #1
   14748:	beq	146dc <__assert_fail@plt+0x32f8>
   1474c:	mov	r1, r7
   14750:	mov	r0, #-2147483648	; 0x80000000
   14754:	bl	1b838 <__assert_fail@plt+0xa454>
   14758:	cmp	r0, r6
   1475c:	bge	146dc <__assert_fail@plt+0x32f8>
   14760:	bl	1235c <__assert_fail@plt+0xf78>
   14764:	ldr	r7, [r4, #176]	; 0xb0
   14768:	cmp	r7, #0
   1476c:	blt	148ac <__assert_fail@plt+0x34c8>
   14770:	cmn	r6, #1
   14774:	beq	14684 <__assert_fail@plt+0x32a0>
   14778:	mov	r1, r6
   1477c:	mov	r0, #-2147483648	; 0x80000000
   14780:	bl	1b838 <__assert_fail@plt+0xa454>
   14784:	cmp	r7, r0
   14788:	bgt	14760 <__assert_fail@plt+0x337c>
   1478c:	b	14684 <__assert_fail@plt+0x32a0>
   14790:	ldr	r3, [r4, #152]	; 0x98
   14794:	add	r0, r1, r0
   14798:	add	r0, r0, r3
   1479c:	b	13dac <__assert_fail@plt+0x29c8>
   147a0:	ldrb	r2, [r5, #4]
   147a4:	mov	r6, #1
   147a8:	str	r2, [sp, #24]
   147ac:	b	13e4c <__assert_fail@plt+0x2a68>
   147b0:	mvneq	r3, #0
   147b4:	beq	144cc <__assert_fail@plt+0x30e8>
   147b8:	sub	r1, sl, #1
   147bc:	mov	r0, #-2147483648	; 0x80000000
   147c0:	bl	1b838 <__assert_fail@plt+0xa454>
   147c4:	cmp	r0, fp
   147c8:	movge	r0, #0
   147cc:	movlt	r0, #1
   147d0:	b	13a0c <__assert_fail@plt+0x2628>
   147d4:	add	r2, r0, #-2147483648	; 0x80000000
   147d8:	cmp	r3, r2
   147dc:	movle	r2, #0
   147e0:	movgt	r2, #1
   147e4:	b	14548 <__assert_fail@plt+0x3164>
   147e8:	mov	r1, #12
   147ec:	bl	11348 <__overflow@plt>
   147f0:	b	141a4 <__assert_fail@plt+0x2dc0>
   147f4:	bne	14164 <__assert_fail@plt+0x2d80>
   147f8:	ldr	r0, [r5]
   147fc:	ldr	r3, [r4]
   14800:	cmp	r0, #0
   14804:	ldrgt	r9, [sp, #16]
   14808:	bgt	14120 <__assert_fail@plt+0x2d3c>
   1480c:	ldrb	r3, [sp, #16]
   14810:	strb	r3, [r4, #124]	; 0x7c
   14814:	b	14164 <__assert_fail@plt+0x2d80>
   14818:	mov	r1, fp
   1481c:	mvn	r0, #-2147483648	; 0x80000000
   14820:	bl	1b838 <__assert_fail@plt+0xa454>
   14824:	cmp	r0, sl
   14828:	movlt	r0, #0
   1482c:	movge	r0, #1
   14830:	b	13a0c <__assert_fail@plt+0x2628>
   14834:	mov	r2, r6
   14838:	mov	fp, r9
   1483c:	b	14328 <__assert_fail@plt+0x2f44>
   14840:	ldr	r2, [r4, #120]	; 0x78
   14844:	mov	fp, #0
   14848:	str	r6, [r2]
   1484c:	b	14338 <__assert_fail@plt+0x2f54>
   14850:	cmn	r7, #1
   14854:	beq	14684 <__assert_fail@plt+0x32a0>
   14858:	mov	r1, r7
   1485c:	mov	r0, #-2147483648	; 0x80000000
   14860:	bl	1b838 <__assert_fail@plt+0xa454>
   14864:	cmp	r6, r0
   14868:	movle	r0, #0
   1486c:	movgt	r0, #1
   14870:	b	1467c <__assert_fail@plt+0x3298>
   14874:	andeq	lr, r2, r0, asr #2
   14878:	strdeq	lr, [r2], -r0
   1487c:	andeq	ip, r1, r0
   14880:	andeq	fp, r1, r0, ror #31
   14884:	andeq	r2, r1, ip, asr #25
   14888:	andeq	r2, r1, ip, lsl #6
   1488c:	ldrdeq	r3, [r1], -r8
   14890:	andeq	r2, r1, r4, lsl #27
   14894:	andeq	lr, r2, r4, ror #3
   14898:	andeq	ip, r1, r4
   1489c:	strdeq	fp, [r1], -r0
   148a0:	andeq	lr, r2, r0, ror #3
   148a4:	ldrdeq	fp, [r1], -ip
   148a8:	andeq	ip, r1, ip, lsl r0
   148ac:	mov	r1, r6
   148b0:	mvn	r0, #-2147483648	; 0x80000000
   148b4:	bl	1b838 <__assert_fail@plt+0xa454>
   148b8:	cmp	r7, r0
   148bc:	movge	r0, #0
   148c0:	movlt	r0, #1
   148c4:	b	1467c <__assert_fail@plt+0x3298>
   148c8:	mov	r1, r7
   148cc:	mvn	r0, #-2147483648	; 0x80000000
   148d0:	bl	1b838 <__assert_fail@plt+0xa454>
   148d4:	cmp	r0, r6
   148d8:	movle	r0, #0
   148dc:	movgt	r0, #1
   148e0:	b	146d4 <__assert_fail@plt+0x32f0>
   148e4:	cmn	r6, #1
   148e8:	beq	146dc <__assert_fail@plt+0x32f8>
   148ec:	mov	r1, r6
   148f0:	mov	r0, #-2147483648	; 0x80000000
   148f4:	bl	1b838 <__assert_fail@plt+0xa454>
   148f8:	cmp	r7, r0
   148fc:	bgt	14760 <__assert_fail@plt+0x337c>
   14900:	b	146dc <__assert_fail@plt+0x32f8>
   14904:	subs	r5, r0, #0
   14908:	push	{r7, lr}
   1490c:	sub	sp, sp, #56	; 0x38
   14910:	beq	1494c <__assert_fail@plt+0x3568>
   14914:	ldr	r3, [pc, #972]	; 14ce8 <__assert_fail@plt+0x3904>
   14918:	mov	r2, #5
   1491c:	ldr	r1, [pc, #968]	; 14cec <__assert_fail@plt+0x3908>
   14920:	mov	r0, #0
   14924:	ldr	r4, [r3]
   14928:	bl	11168 <dcgettext@plt>
   1492c:	ldr	r3, [pc, #956]	; 14cf0 <__assert_fail@plt+0x390c>
   14930:	mov	r1, #1
   14934:	ldr	r3, [r3]
   14938:	mov	r2, r0
   1493c:	mov	r0, r4
   14940:	bl	1130c <__fprintf_chk@plt>
   14944:	mov	r0, r5
   14948:	bl	11288 <exit@plt>
   1494c:	mov	r2, #5
   14950:	ldr	r1, [pc, #924]	; 14cf4 <__assert_fail@plt+0x3910>
   14954:	bl	11168 <dcgettext@plt>
   14958:	ldr	r3, [pc, #912]	; 14cf0 <__assert_fail@plt+0x390c>
   1495c:	ldr	r6, [pc, #916]	; 14cf8 <__assert_fail@plt+0x3914>
   14960:	ldr	r4, [pc, #916]	; 14cfc <__assert_fail@plt+0x3918>
   14964:	ldr	r2, [r3]
   14968:	mov	r1, r0
   1496c:	mov	r0, #1
   14970:	bl	112f4 <__printf_chk@plt>
   14974:	mov	r2, #5
   14978:	ldr	r1, [pc, #896]	; 14d00 <__assert_fail@plt+0x391c>
   1497c:	mov	r0, r5
   14980:	bl	11168 <dcgettext@plt>
   14984:	ldr	r1, [r6]
   14988:	bl	1109c <fputs_unlocked@plt>
   1498c:	mov	r2, #5
   14990:	ldr	r1, [pc, #876]	; 14d04 <__assert_fail@plt+0x3920>
   14994:	mov	r0, r5
   14998:	bl	11168 <dcgettext@plt>
   1499c:	ldr	r1, [r6]
   149a0:	bl	1109c <fputs_unlocked@plt>
   149a4:	mov	r2, #5
   149a8:	ldr	r1, [pc, #856]	; 14d08 <__assert_fail@plt+0x3924>
   149ac:	mov	r0, r5
   149b0:	bl	11168 <dcgettext@plt>
   149b4:	ldr	r1, [r6]
   149b8:	bl	1109c <fputs_unlocked@plt>
   149bc:	mov	r2, #5
   149c0:	ldr	r1, [pc, #836]	; 14d0c <__assert_fail@plt+0x3928>
   149c4:	mov	r0, r5
   149c8:	bl	11168 <dcgettext@plt>
   149cc:	ldr	r1, [r6]
   149d0:	bl	1109c <fputs_unlocked@plt>
   149d4:	mov	r2, #5
   149d8:	ldr	r1, [pc, #816]	; 14d10 <__assert_fail@plt+0x392c>
   149dc:	mov	r0, r5
   149e0:	bl	11168 <dcgettext@plt>
   149e4:	ldr	r1, [r6]
   149e8:	bl	1109c <fputs_unlocked@plt>
   149ec:	mov	r2, #5
   149f0:	ldr	r1, [pc, #796]	; 14d14 <__assert_fail@plt+0x3930>
   149f4:	mov	r0, r5
   149f8:	bl	11168 <dcgettext@plt>
   149fc:	ldr	r1, [r6]
   14a00:	bl	1109c <fputs_unlocked@plt>
   14a04:	mov	r2, #5
   14a08:	ldr	r1, [pc, #776]	; 14d18 <__assert_fail@plt+0x3934>
   14a0c:	mov	r0, r5
   14a10:	bl	11168 <dcgettext@plt>
   14a14:	ldr	r1, [r6]
   14a18:	bl	1109c <fputs_unlocked@plt>
   14a1c:	mov	r2, #5
   14a20:	ldr	r1, [pc, #756]	; 14d1c <__assert_fail@plt+0x3938>
   14a24:	mov	r0, r5
   14a28:	bl	11168 <dcgettext@plt>
   14a2c:	ldr	r1, [r6]
   14a30:	bl	1109c <fputs_unlocked@plt>
   14a34:	mov	r2, #5
   14a38:	ldr	r1, [pc, #736]	; 14d20 <__assert_fail@plt+0x393c>
   14a3c:	mov	r0, r5
   14a40:	bl	11168 <dcgettext@plt>
   14a44:	ldr	r1, [r6]
   14a48:	bl	1109c <fputs_unlocked@plt>
   14a4c:	mov	r2, #5
   14a50:	ldr	r1, [pc, #716]	; 14d24 <__assert_fail@plt+0x3940>
   14a54:	mov	r0, r5
   14a58:	bl	11168 <dcgettext@plt>
   14a5c:	ldr	r1, [r6]
   14a60:	bl	1109c <fputs_unlocked@plt>
   14a64:	mov	r2, #5
   14a68:	ldr	r1, [pc, #696]	; 14d28 <__assert_fail@plt+0x3944>
   14a6c:	mov	r0, r5
   14a70:	bl	11168 <dcgettext@plt>
   14a74:	ldr	r1, [r6]
   14a78:	bl	1109c <fputs_unlocked@plt>
   14a7c:	mov	r2, #5
   14a80:	ldr	r1, [pc, #676]	; 14d2c <__assert_fail@plt+0x3948>
   14a84:	mov	r0, r5
   14a88:	bl	11168 <dcgettext@plt>
   14a8c:	ldr	r1, [r6]
   14a90:	bl	1109c <fputs_unlocked@plt>
   14a94:	mov	r2, #5
   14a98:	ldr	r1, [pc, #656]	; 14d30 <__assert_fail@plt+0x394c>
   14a9c:	mov	r0, r5
   14aa0:	bl	11168 <dcgettext@plt>
   14aa4:	ldr	r1, [r6]
   14aa8:	bl	1109c <fputs_unlocked@plt>
   14aac:	mov	r2, #5
   14ab0:	ldr	r1, [pc, #636]	; 14d34 <__assert_fail@plt+0x3950>
   14ab4:	mov	r0, r5
   14ab8:	bl	11168 <dcgettext@plt>
   14abc:	ldr	r1, [r6]
   14ac0:	bl	1109c <fputs_unlocked@plt>
   14ac4:	mov	r2, #5
   14ac8:	ldr	r1, [pc, #616]	; 14d38 <__assert_fail@plt+0x3954>
   14acc:	mov	r0, r5
   14ad0:	bl	11168 <dcgettext@plt>
   14ad4:	ldr	r1, [r6]
   14ad8:	bl	1109c <fputs_unlocked@plt>
   14adc:	mov	r2, #5
   14ae0:	ldr	r1, [pc, #596]	; 14d3c <__assert_fail@plt+0x3958>
   14ae4:	mov	r0, r5
   14ae8:	bl	11168 <dcgettext@plt>
   14aec:	ldr	r1, [r6]
   14af0:	bl	1109c <fputs_unlocked@plt>
   14af4:	mov	r2, #5
   14af8:	ldr	r1, [pc, #576]	; 14d40 <__assert_fail@plt+0x395c>
   14afc:	mov	r0, r5
   14b00:	bl	11168 <dcgettext@plt>
   14b04:	ldr	r1, [r6]
   14b08:	bl	1109c <fputs_unlocked@plt>
   14b0c:	mov	r2, #5
   14b10:	ldr	r1, [pc, #556]	; 14d44 <__assert_fail@plt+0x3960>
   14b14:	mov	r0, r5
   14b18:	bl	11168 <dcgettext@plt>
   14b1c:	ldr	r1, [r6]
   14b20:	bl	1109c <fputs_unlocked@plt>
   14b24:	ldm	r4!, {r0, r1, r2, r3}
   14b28:	mov	lr, sp
   14b2c:	stmia	lr!, {r0, r1, r2, r3}
   14b30:	ldm	r4!, {r0, r1, r2, r3}
   14b34:	ldr	ip, [sp]
   14b38:	stmia	lr!, {r0, r1, r2, r3}
   14b3c:	cmp	ip, #0
   14b40:	ldm	r4!, {r0, r1, r2, r3}
   14b44:	stmia	lr!, {r0, r1, r2, r3}
   14b48:	ldm	r4, {r0, r1}
   14b4c:	moveq	r4, sp
   14b50:	stm	lr, {r0, r1}
   14b54:	beq	14b84 <__assert_fail@plt+0x37a0>
   14b58:	ldr	r7, [pc, #488]	; 14d48 <__assert_fail@plt+0x3964>
   14b5c:	mov	r4, sp
   14b60:	b	14b70 <__assert_fail@plt+0x378c>
   14b64:	ldr	ip, [r4, #8]!
   14b68:	cmp	ip, #0
   14b6c:	beq	14b84 <__assert_fail@plt+0x37a0>
   14b70:	mov	r1, ip
   14b74:	mov	r0, r7
   14b78:	bl	110c0 <strcmp@plt>
   14b7c:	cmp	r0, #0
   14b80:	bne	14b64 <__assert_fail@plt+0x3780>
   14b84:	ldr	r4, [r4, #4]
   14b88:	mov	r2, #5
   14b8c:	cmp	r4, #0
   14b90:	ldr	r1, [pc, #436]	; 14d4c <__assert_fail@plt+0x3968>
   14b94:	beq	14c3c <__assert_fail@plt+0x3858>
   14b98:	mov	r0, #0
   14b9c:	bl	11168 <dcgettext@plt>
   14ba0:	ldr	r3, [pc, #424]	; 14d50 <__assert_fail@plt+0x396c>
   14ba4:	ldr	r2, [pc, #424]	; 14d54 <__assert_fail@plt+0x3970>
   14ba8:	mov	r1, r0
   14bac:	mov	r0, #1
   14bb0:	bl	112f4 <__printf_chk@plt>
   14bb4:	mov	r1, #0
   14bb8:	mov	r0, #5
   14bbc:	bl	11354 <setlocale@plt>
   14bc0:	cmp	r0, #0
   14bc4:	ldreq	r7, [pc, #380]	; 14d48 <__assert_fail@plt+0x3964>
   14bc8:	beq	14be4 <__assert_fail@plt+0x3800>
   14bcc:	mov	r2, #3
   14bd0:	ldr	r1, [pc, #384]	; 14d58 <__assert_fail@plt+0x3974>
   14bd4:	bl	113c0 <strncmp@plt>
   14bd8:	ldr	r7, [pc, #360]	; 14d48 <__assert_fail@plt+0x3964>
   14bdc:	cmp	r0, #0
   14be0:	bne	14ccc <__assert_fail@plt+0x38e8>
   14be4:	mov	r2, #5
   14be8:	ldr	r1, [pc, #364]	; 14d5c <__assert_fail@plt+0x3978>
   14bec:	mov	r0, #0
   14bf0:	bl	11168 <dcgettext@plt>
   14bf4:	ldr	r3, [pc, #332]	; 14d48 <__assert_fail@plt+0x3964>
   14bf8:	ldr	r2, [pc, #336]	; 14d50 <__assert_fail@plt+0x396c>
   14bfc:	mov	r1, r0
   14c00:	mov	r0, #1
   14c04:	bl	112f4 <__printf_chk@plt>
   14c08:	mov	r2, #5
   14c0c:	ldr	r1, [pc, #332]	; 14d60 <__assert_fail@plt+0x397c>
   14c10:	mov	r0, #0
   14c14:	bl	11168 <dcgettext@plt>
   14c18:	ldr	r2, [pc, #324]	; 14d64 <__assert_fail@plt+0x3980>
   14c1c:	cmp	r4, r7
   14c20:	ldr	r3, [pc, #320]	; 14d68 <__assert_fail@plt+0x3984>
   14c24:	movne	r3, r2
   14c28:	mov	r1, r0
   14c2c:	mov	r2, r4
   14c30:	mov	r0, #1
   14c34:	bl	112f4 <__printf_chk@plt>
   14c38:	b	14944 <__assert_fail@plt+0x3560>
   14c3c:	mov	r0, r4
   14c40:	bl	11168 <dcgettext@plt>
   14c44:	ldr	r3, [pc, #260]	; 14d50 <__assert_fail@plt+0x396c>
   14c48:	ldr	r2, [pc, #260]	; 14d54 <__assert_fail@plt+0x3970>
   14c4c:	mov	r1, r0
   14c50:	mov	r0, #1
   14c54:	bl	112f4 <__printf_chk@plt>
   14c58:	mov	r1, r4
   14c5c:	mov	r0, #5
   14c60:	bl	11354 <setlocale@plt>
   14c64:	cmp	r0, #0
   14c68:	beq	14c80 <__assert_fail@plt+0x389c>
   14c6c:	mov	r2, #3
   14c70:	ldr	r1, [pc, #224]	; 14d58 <__assert_fail@plt+0x3974>
   14c74:	bl	113c0 <strncmp@plt>
   14c78:	cmp	r0, #0
   14c7c:	bne	14cc4 <__assert_fail@plt+0x38e0>
   14c80:	mov	r2, #5
   14c84:	ldr	r1, [pc, #208]	; 14d5c <__assert_fail@plt+0x3978>
   14c88:	mov	r0, #0
   14c8c:	bl	11168 <dcgettext@plt>
   14c90:	ldr	r3, [pc, #176]	; 14d48 <__assert_fail@plt+0x3964>
   14c94:	ldr	r2, [pc, #180]	; 14d50 <__assert_fail@plt+0x396c>
   14c98:	mov	r4, r3
   14c9c:	mov	r1, r0
   14ca0:	mov	r0, #1
   14ca4:	bl	112f4 <__printf_chk@plt>
   14ca8:	ldr	r1, [pc, #176]	; 14d60 <__assert_fail@plt+0x397c>
   14cac:	mov	r2, #5
   14cb0:	mov	r0, #0
   14cb4:	bl	11168 <dcgettext@plt>
   14cb8:	ldr	r3, [pc, #168]	; 14d68 <__assert_fail@plt+0x3984>
   14cbc:	mov	r1, r0
   14cc0:	b	14c2c <__assert_fail@plt+0x3848>
   14cc4:	ldr	r7, [pc, #124]	; 14d48 <__assert_fail@plt+0x3964>
   14cc8:	mov	r4, r7
   14ccc:	mov	r2, #5
   14cd0:	ldr	r1, [pc, #148]	; 14d6c <__assert_fail@plt+0x3988>
   14cd4:	mov	r0, #0
   14cd8:	bl	11168 <dcgettext@plt>
   14cdc:	ldr	r1, [r6]
   14ce0:	bl	1109c <fputs_unlocked@plt>
   14ce4:	b	14be4 <__assert_fail@plt+0x3800>
   14ce8:	ldrdeq	lr, [r2], -r8
   14cec:	andeq	ip, r1, r4, asr r0
   14cf0:			; <UNDEFINED> instruction: 0x0002e2b4
   14cf4:	andeq	ip, r1, ip, ror r0
   14cf8:	andeq	lr, r2, r4, ror #3
   14cfc:	strdeq	fp, [r1], -r8
   14d00:	andeq	ip, r1, r0, lsr #1
   14d04:	ldrdeq	ip, [r1], -r0
   14d08:	andeq	ip, r1, r8, lsl #2
   14d0c:	andeq	ip, r1, r4, asr r1
   14d10:	andeq	ip, r1, r4, lsr #5
   14d14:			; <UNDEFINED> instruction: 0x0001c3b4
   14d18:	andeq	ip, r1, r4, asr #10
   14d1c:	strdeq	ip, [r1], -r0
   14d20:	andeq	ip, r1, ip, asr #15
   14d24:	andeq	ip, r1, ip, asr r8
   14d28:			; <UNDEFINED> instruction: 0x0001c9b8
   14d2c:			; <UNDEFINED> instruction: 0x0001cab8
   14d30:	andeq	ip, r1, r0, lsl #24
   14d34:	andeq	ip, r1, ip, ror #25
   14d38:	andeq	ip, r1, r4, asr sp
   14d3c:	andeq	ip, r1, r8, ror #29
   14d40:	andeq	ip, r1, r0, asr #31
   14d44:	strdeq	ip, [r1], -r0
   14d48:	andeq	ip, r1, r0, asr r0
   14d4c:	andeq	sp, r1, r8, lsr #32
   14d50:	andeq	sp, r1, r0, asr #32
   14d54:	andeq	sp, r1, r8, rrx
   14d58:	andeq	sp, r1, r8, ror r0
   14d5c:	andeq	sp, r1, r4, asr #1
   14d60:	andeq	sp, r1, r0, ror #1
   14d64:	ldrdeq	fp, [r1], -ip
   14d68:	andeq	sp, r1, r8, ror #6
   14d6c:	andeq	sp, r1, ip, ror r0
   14d70:	push	{r4, r5, r6, r7, lr}
   14d74:	mov	r6, r1
   14d78:	ldrb	r1, [r0]
   14d7c:	mov	r5, r3
   14d80:	mov	r4, r0
   14d84:	sub	r3, r1, #48	; 0x30
   14d88:	cmp	r3, #9
   14d8c:	strbhi	r1, [r2]
   14d90:	ldrbhi	r1, [r0, #1]
   14d94:	addhi	r4, r0, #1
   14d98:	sub	sp, sp, #20
   14d9c:	cmp	r1, #0
   14da0:	bne	14dac <__assert_fail@plt+0x39c8>
   14da4:	add	sp, sp, #20
   14da8:	pop	{r4, r5, r6, r7, pc}
   14dac:	ldr	r2, [pc, #120]	; 14e2c <__assert_fail@plt+0x3a48>
   14db0:	add	r3, sp, #12
   14db4:	str	r2, [sp]
   14db8:	mov	r1, #0
   14dbc:	mov	r2, #10
   14dc0:	mov	r0, r4
   14dc4:	bl	1a670 <__assert_fail@plt+0x928c>
   14dc8:	cmp	r0, #0
   14dcc:	beq	14e14 <__assert_fail@plt+0x3a30>
   14dd0:	bl	112c4 <__errno_location@plt>
   14dd4:	mov	r2, #5
   14dd8:	ldr	r1, [pc, #80]	; 14e30 <__assert_fail@plt+0x3a4c>
   14ddc:	ldr	r7, [r0]
   14de0:	mov	r0, #0
   14de4:	bl	11168 <dcgettext@plt>
   14de8:	mov	r5, r0
   14dec:	mov	r0, r4
   14df0:	bl	18e40 <__assert_fail@plt+0x7a5c>
   14df4:	mov	r1, r7
   14df8:	mov	r2, r5
   14dfc:	mov	r3, r6
   14e00:	str	r0, [sp]
   14e04:	mov	r0, #0
   14e08:	bl	11204 <error@plt>
   14e0c:	mov	r0, #1
   14e10:	bl	14904 <__assert_fail@plt+0x3520>
   14e14:	ldr	r3, [sp, #12]
   14e18:	cmp	r3, #0
   14e1c:	strgt	r3, [r5]
   14e20:	ble	14dd0 <__assert_fail@plt+0x39ec>
   14e24:	add	sp, sp, #20
   14e28:	pop	{r4, r5, r6, r7, pc}
   14e2c:	ldrdeq	fp, [r1], -ip
   14e30:	andeq	sp, r1, r4, lsl r1
   14e34:	ldr	r3, [pc, #4]	; 14e40 <__assert_fail@plt+0x3a5c>
   14e38:	str	r0, [r3]
   14e3c:	bx	lr
   14e40:	andeq	lr, r2, ip, lsr #5
   14e44:	ldr	r3, [pc, #4]	; 14e50 <__assert_fail@plt+0x3a6c>
   14e48:	strb	r0, [r3, #4]
   14e4c:	bx	lr
   14e50:	andeq	lr, r2, ip, lsr #5
   14e54:	ldr	r3, [pc, #192]	; 14f1c <__assert_fail@plt+0x3b38>
   14e58:	push	{r4, r5, r6, lr}
   14e5c:	sub	sp, sp, #8
   14e60:	ldr	r0, [r3]
   14e64:	bl	1b308 <__assert_fail@plt+0x9f24>
   14e68:	cmp	r0, #0
   14e6c:	beq	14e90 <__assert_fail@plt+0x3aac>
   14e70:	ldr	r4, [pc, #168]	; 14f20 <__assert_fail@plt+0x3b3c>
   14e74:	ldrb	r3, [r4, #4]
   14e78:	cmp	r3, #0
   14e7c:	beq	14eac <__assert_fail@plt+0x3ac8>
   14e80:	bl	112c4 <__errno_location@plt>
   14e84:	ldr	r3, [r0]
   14e88:	cmp	r3, #32
   14e8c:	bne	14eac <__assert_fail@plt+0x3ac8>
   14e90:	ldr	r3, [pc, #140]	; 14f24 <__assert_fail@plt+0x3b40>
   14e94:	ldr	r0, [r3]
   14e98:	bl	1b308 <__assert_fail@plt+0x9f24>
   14e9c:	cmp	r0, #0
   14ea0:	bne	14ef4 <__assert_fail@plt+0x3b10>
   14ea4:	add	sp, sp, #8
   14ea8:	pop	{r4, r5, r6, pc}
   14eac:	mov	r2, #5
   14eb0:	ldr	r1, [pc, #112]	; 14f28 <__assert_fail@plt+0x3b44>
   14eb4:	mov	r0, #0
   14eb8:	bl	11168 <dcgettext@plt>
   14ebc:	ldr	r4, [r4]
   14ec0:	cmp	r4, #0
   14ec4:	mov	r5, r0
   14ec8:	beq	14f00 <__assert_fail@plt+0x3b1c>
   14ecc:	bl	112c4 <__errno_location@plt>
   14ed0:	ldr	r6, [r0]
   14ed4:	mov	r0, r4
   14ed8:	bl	18ca8 <__assert_fail@plt+0x78c4>
   14edc:	mov	r1, r6
   14ee0:	str	r5, [sp]
   14ee4:	ldr	r2, [pc, #64]	; 14f2c <__assert_fail@plt+0x3b48>
   14ee8:	mov	r3, r0
   14eec:	mov	r0, #0
   14ef0:	bl	11204 <error@plt>
   14ef4:	ldr	r3, [pc, #52]	; 14f30 <__assert_fail@plt+0x3b4c>
   14ef8:	ldr	r0, [r3]
   14efc:	bl	11120 <_exit@plt>
   14f00:	bl	112c4 <__errno_location@plt>
   14f04:	mov	r3, r5
   14f08:	ldr	r2, [pc, #36]	; 14f34 <__assert_fail@plt+0x3b50>
   14f0c:	ldr	r1, [r0]
   14f10:	mov	r0, r4
   14f14:	bl	11204 <error@plt>
   14f18:	b	14ef4 <__assert_fail@plt+0x3b10>
   14f1c:	andeq	lr, r2, r4, ror #3
   14f20:	andeq	lr, r2, ip, lsr #5
   14f24:	ldrdeq	lr, [r2], -r8
   14f28:	andeq	sp, r1, r8, lsl r5
   14f2c:	andeq	sp, r1, r4, lsr #10
   14f30:	andeq	lr, r2, r4, lsl #3
   14f34:	andeq	sp, r1, r8, lsr #10
   14f38:	push	{r4, r5}
   14f3c:	pop	{r4, r5}
   14f40:	b	110d8 <posix_fadvise64@plt>
   14f44:	cmp	r0, #0
   14f48:	bxeq	lr
   14f4c:	push	{r4, lr}
   14f50:	sub	sp, sp, #16
   14f54:	mov	r4, r1
   14f58:	bl	11300 <fileno@plt>
   14f5c:	mov	r2, #0
   14f60:	mov	r3, #0
   14f64:	str	r4, [sp, #8]
   14f68:	strd	r2, [sp]
   14f6c:	bl	110d8 <posix_fadvise64@plt>
   14f70:	add	sp, sp, #16
   14f74:	pop	{r4, pc}
   14f78:	push	{r4, r5, lr}
   14f7c:	sub	sp, sp, #12
   14f80:	mov	r4, r0
   14f84:	bl	11300 <fileno@plt>
   14f88:	cmp	r0, #0
   14f8c:	mov	r0, r4
   14f90:	blt	1500c <__assert_fail@plt+0x3c28>
   14f94:	bl	11240 <__freading@plt>
   14f98:	cmp	r0, #0
   14f9c:	bne	14fd8 <__assert_fail@plt+0x3bf4>
   14fa0:	mov	r0, r4
   14fa4:	bl	15018 <__assert_fail@plt+0x3c34>
   14fa8:	cmp	r0, #0
   14fac:	beq	15008 <__assert_fail@plt+0x3c24>
   14fb0:	bl	112c4 <__errno_location@plt>
   14fb4:	mov	r5, r0
   14fb8:	mov	r0, r4
   14fbc:	ldr	r4, [r5]
   14fc0:	bl	11318 <fclose@plt>
   14fc4:	cmp	r4, #0
   14fc8:	mvnne	r0, #0
   14fcc:	strne	r4, [r5]
   14fd0:	add	sp, sp, #12
   14fd4:	pop	{r4, r5, pc}
   14fd8:	mov	r0, r4
   14fdc:	bl	11300 <fileno@plt>
   14fe0:	mov	r3, #1
   14fe4:	str	r3, [sp]
   14fe8:	mov	r2, #0
   14fec:	mov	r3, #0
   14ff0:	bl	111d4 <lseek64@plt>
   14ff4:	mvn	r3, #0
   14ff8:	mvn	r2, #0
   14ffc:	cmp	r1, r3
   15000:	cmpeq	r0, r2
   15004:	bne	14fa0 <__assert_fail@plt+0x3bbc>
   15008:	mov	r0, r4
   1500c:	add	sp, sp, #12
   15010:	pop	{r4, r5, lr}
   15014:	b	11318 <fclose@plt>
   15018:	push	{r4, lr}
   1501c:	subs	r4, r0, #0
   15020:	sub	sp, sp, #8
   15024:	beq	15040 <__assert_fail@plt+0x3c5c>
   15028:	bl	11240 <__freading@plt>
   1502c:	cmp	r0, #0
   15030:	beq	15040 <__assert_fail@plt+0x3c5c>
   15034:	ldr	r3, [r4]
   15038:	tst	r3, #256	; 0x100
   1503c:	bne	15050 <__assert_fail@plt+0x3c6c>
   15040:	mov	r0, r4
   15044:	add	sp, sp, #8
   15048:	pop	{r4, lr}
   1504c:	b	110f0 <fflush@plt>
   15050:	mov	r3, #1
   15054:	str	r3, [sp]
   15058:	mov	r2, #0
   1505c:	mov	r3, #0
   15060:	mov	r0, r4
   15064:	bl	15168 <__assert_fail@plt+0x3d84>
   15068:	mov	r0, r4
   1506c:	add	sp, sp, #8
   15070:	pop	{r4, lr}
   15074:	b	110f0 <fflush@plt>
   15078:	push	{r4, r5, r6, lr}
   1507c:	mov	r5, r1
   15080:	bl	1139c <fopen64@plt>
   15084:	subs	r4, r0, #0
   15088:	beq	15098 <__assert_fail@plt+0x3cb4>
   1508c:	bl	11300 <fileno@plt>
   15090:	cmp	r0, #2
   15094:	bls	150a0 <__assert_fail@plt+0x3cbc>
   15098:	mov	r0, r4
   1509c:	pop	{r4, r5, r6, pc}
   150a0:	bl	1937c <__assert_fail@plt+0x7f98>
   150a4:	subs	r6, r0, #0
   150a8:	blt	150f0 <__assert_fail@plt+0x3d0c>
   150ac:	mov	r0, r4
   150b0:	bl	14f78 <__assert_fail@plt+0x3b94>
   150b4:	cmp	r0, #0
   150b8:	bne	150d0 <__assert_fail@plt+0x3cec>
   150bc:	mov	r1, r5
   150c0:	mov	r0, r6
   150c4:	bl	11084 <fdopen@plt>
   150c8:	subs	r4, r0, #0
   150cc:	bne	15098 <__assert_fail@plt+0x3cb4>
   150d0:	bl	112c4 <__errno_location@plt>
   150d4:	mov	r4, #0
   150d8:	mov	r5, r0
   150dc:	mov	r0, r6
   150e0:	ldr	r6, [r5]
   150e4:	bl	113d8 <close@plt>
   150e8:	str	r6, [r5]
   150ec:	b	15098 <__assert_fail@plt+0x3cb4>
   150f0:	bl	112c4 <__errno_location@plt>
   150f4:	mov	r5, r0
   150f8:	mov	r0, r4
   150fc:	ldr	r6, [r5]
   15100:	mov	r4, #0
   15104:	bl	14f78 <__assert_fail@plt+0x3b94>
   15108:	str	r6, [r5]
   1510c:	b	15098 <__assert_fail@plt+0x3cb4>
   15110:	push	{r4, r5, lr}
   15114:	sub	sp, sp, #12
   15118:	mov	r5, r0
   1511c:	bl	112c4 <__errno_location@plt>
   15120:	mov	r2, #0
   15124:	mov	r4, r0
   15128:	ldr	r3, [r0]
   1512c:	str	r2, [r4]
   15130:	mov	r0, r5
   15134:	str	r3, [sp]
   15138:	str	r3, [sp, #4]
   1513c:	bl	11108 <free@plt>
   15140:	ldr	r3, [r4]
   15144:	add	r2, sp, #8
   15148:	cmp	r3, #0
   1514c:	moveq	r3, #4
   15150:	movne	r3, #0
   15154:	add	r3, r2, r3
   15158:	ldr	r3, [r3, #-8]
   1515c:	str	r3, [r4]
   15160:	add	sp, sp, #12
   15164:	pop	{r4, r5, pc}
   15168:	push	{r4, r5, r6, r7, r8, lr}
   1516c:	sub	sp, sp, #8
   15170:	ldmib	r0, {ip, lr}
   15174:	mov	r4, r0
   15178:	ldr	r5, [sp, #32]
   1517c:	cmp	lr, ip
   15180:	beq	15198 <__assert_fail@plt+0x3db4>
   15184:	str	r5, [sp, #32]
   15188:	mov	r0, r4
   1518c:	add	sp, sp, #8
   15190:	pop	{r4, r5, r6, r7, r8, lr}
   15194:	b	11324 <fseeko64@plt>
   15198:	ldr	lr, [r0, #20]
   1519c:	ldr	ip, [r0, #16]
   151a0:	cmp	lr, ip
   151a4:	bne	15184 <__assert_fail@plt+0x3da0>
   151a8:	ldr	r8, [r0, #36]	; 0x24
   151ac:	cmp	r8, #0
   151b0:	bne	15184 <__assert_fail@plt+0x3da0>
   151b4:	mov	r6, r2
   151b8:	mov	r7, r3
   151bc:	bl	11300 <fileno@plt>
   151c0:	mov	r2, r6
   151c4:	mov	r3, r7
   151c8:	str	r5, [sp]
   151cc:	bl	111d4 <lseek64@plt>
   151d0:	mvn	r3, #0
   151d4:	mvn	r2, #0
   151d8:	cmp	r1, r3
   151dc:	cmpeq	r0, r2
   151e0:	beq	15200 <__assert_fail@plt+0x3e1c>
   151e4:	ldr	r3, [r4]
   151e8:	strd	r0, [r4, #80]	; 0x50
   151ec:	mov	r0, r8
   151f0:	bic	r3, r3, #16
   151f4:	str	r3, [r4]
   151f8:	add	sp, sp, #8
   151fc:	pop	{r4, r5, r6, r7, r8, pc}
   15200:	mvn	r0, #0
   15204:	b	151f8 <__assert_fail@plt+0x3e14>
   15208:	mov	r1, r0
   1520c:	mov	r0, #0
   15210:	b	11114 <clock_gettime@plt>
   15214:	push	{r4, r5, lr}
   15218:	sub	sp, sp, #12
   1521c:	mov	r4, r0
   15220:	mov	r1, sp
   15224:	mov	r0, #0
   15228:	bl	11114 <clock_gettime@plt>
   1522c:	ldm	sp, {r0, r1}
   15230:	stm	r4, {r0, r1}
   15234:	mov	r0, r4
   15238:	add	sp, sp, #12
   1523c:	pop	{r4, r5, pc}
   15240:	push	{lr}		; (str lr, [sp, #-4]!)
   15244:	sub	sp, sp, #268	; 0x10c
   15248:	add	r1, sp, #4
   1524c:	ldr	r2, [pc, #60]	; 15290 <__assert_fail@plt+0x3eac>
   15250:	bl	18e58 <__assert_fail@plt+0x7a74>
   15254:	cmp	r0, #0
   15258:	movne	r0, #0
   1525c:	bne	15288 <__assert_fail@plt+0x3ea4>
   15260:	ldr	r1, [pc, #44]	; 15294 <__assert_fail@plt+0x3eb0>
   15264:	add	r0, sp, #4
   15268:	bl	110c0 <strcmp@plt>
   1526c:	cmp	r0, #0
   15270:	beq	15288 <__assert_fail@plt+0x3ea4>
   15274:	add	r0, sp, #4
   15278:	ldr	r1, [pc, #24]	; 15298 <__assert_fail@plt+0x3eb4>
   1527c:	bl	110c0 <strcmp@plt>
   15280:	adds	r0, r0, #0
   15284:	movne	r0, #1
   15288:	add	sp, sp, #268	; 0x10c
   1528c:	pop	{pc}		; (ldr pc, [sp], #4)
   15290:	andeq	r0, r0, r1, lsl #2
   15294:	andeq	sp, r1, ip, lsr #10
   15298:	andeq	sp, r1, r0, lsr r5
   1529c:	cmp	r0, #0
   152a0:	sbcs	r3, r1, #0
   152a4:	mov	r3, #0
   152a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   152ac:	mov	r4, r0
   152b0:	mov	r5, r1
   152b4:	strb	r3, [r2, #20]
   152b8:	add	r6, r2, #20
   152bc:	mov	r8, #10
   152c0:	mov	r9, #0
   152c4:	blt	15314 <__assert_fail@plt+0x3f30>
   152c8:	mov	r0, r4
   152cc:	mov	r1, r5
   152d0:	mov	r2, r8
   152d4:	mov	r3, r9
   152d8:	bl	1ba78 <__assert_fail@plt+0xa694>
   152dc:	mov	r0, r4
   152e0:	mov	r1, r5
   152e4:	mov	r3, r9
   152e8:	add	r2, r2, #48	; 0x30
   152ec:	strb	r2, [r6, #-1]!
   152f0:	mov	r2, r8
   152f4:	bl	1ba78 <__assert_fail@plt+0xa694>
   152f8:	mov	r4, r0
   152fc:	mov	r5, r1
   15300:	orrs	r3, r4, r5
   15304:	bne	152c8 <__assert_fail@plt+0x3ee4>
   15308:	mov	r0, r6
   1530c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15310:	mov	r6, r7
   15314:	mov	r0, r4
   15318:	mov	r1, r5
   1531c:	mov	r2, r8
   15320:	mov	r3, r9
   15324:	bl	1ba78 <__assert_fail@plt+0xa694>
   15328:	mov	r0, r4
   1532c:	mov	r1, r5
   15330:	mov	r3, r9
   15334:	sub	r7, r6, #1
   15338:	rsb	r2, r2, #48	; 0x30
   1533c:	strb	r2, [r6, #-1]
   15340:	mov	r2, r8
   15344:	bl	1ba78 <__assert_fail@plt+0xa694>
   15348:	mov	r4, r0
   1534c:	mov	r5, r1
   15350:	orrs	r3, r4, r5
   15354:	bne	15310 <__assert_fail@plt+0x3f2c>
   15358:	mov	r3, #45	; 0x2d
   1535c:	sub	r6, r6, #2
   15360:	strb	r3, [r7, #-1]
   15364:	mov	r0, r6
   15368:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1536c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15370:	sub	sp, sp, #20
   15374:	mov	r5, r0
   15378:	add	r7, r0, r1
   1537c:	mov	sl, r2
   15380:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   15384:	cmp	r0, #1
   15388:	bls	154c8 <__assert_fail@plt+0x40e4>
   1538c:	cmp	r5, r7
   15390:	mov	r6, #0
   15394:	bcs	15490 <__assert_fail@plt+0x40ac>
   15398:	and	r9, sl, #2
   1539c:	mov	fp, r6
   153a0:	and	sl, sl, #1
   153a4:	mvn	r8, #-2147483648	; 0x80000000
   153a8:	b	153d0 <__assert_fail@plt+0x3fec>
   153ac:	cmp	r3, #37	; 0x25
   153b0:	bcs	153c0 <__assert_fail@plt+0x3fdc>
   153b4:	sub	r3, r3, #32
   153b8:	cmp	r3, #3
   153bc:	bhi	153f8 <__assert_fail@plt+0x4014>
   153c0:	add	r5, r5, #1
   153c4:	add	r6, r6, #1
   153c8:	cmp	r7, r5
   153cc:	bls	15490 <__assert_fail@plt+0x40ac>
   153d0:	ldrb	r3, [r5]
   153d4:	cmp	r3, #63	; 0x3f
   153d8:	bls	153ac <__assert_fail@plt+0x3fc8>
   153dc:	cmp	r3, #65	; 0x41
   153e0:	bcc	153f8 <__assert_fail@plt+0x4014>
   153e4:	cmp	r3, #95	; 0x5f
   153e8:	bls	153c0 <__assert_fail@plt+0x3fdc>
   153ec:	sub	r3, r3, #97	; 0x61
   153f0:	cmp	r3, #29
   153f4:	bls	153c0 <__assert_fail@plt+0x3fdc>
   153f8:	str	fp, [sp, #8]
   153fc:	str	fp, [sp, #12]
   15400:	b	15424 <__assert_fail@plt+0x4040>
   15404:	cmp	r0, r3
   15408:	bgt	1548c <__assert_fail@plt+0x40a8>
   1540c:	add	r6, r6, r0
   15410:	add	r0, sp, #8
   15414:	bl	11144 <mbsinit@plt>
   15418:	add	r5, r5, r4
   1541c:	cmp	r0, #0
   15420:	bne	153c8 <__assert_fail@plt+0x3fe4>
   15424:	add	r3, sp, #8
   15428:	sub	r2, r7, r5
   1542c:	mov	r1, r5
   15430:	add	r0, sp, #4
   15434:	bl	1b58c <__assert_fail@plt+0xa1a8>
   15438:	cmn	r0, #1
   1543c:	mov	r4, r0
   15440:	beq	1549c <__assert_fail@plt+0x40b8>
   15444:	cmn	r0, #2
   15448:	beq	154b4 <__assert_fail@plt+0x40d0>
   1544c:	ldr	r0, [sp, #4]
   15450:	bl	110fc <wcwidth@plt>
   15454:	cmp	r4, #0
   15458:	moveq	r4, #1
   1545c:	sub	r3, r8, r6
   15460:	cmp	r0, #0
   15464:	bge	15404 <__assert_fail@plt+0x4020>
   15468:	cmp	r9, #0
   1546c:	bne	154a4 <__assert_fail@plt+0x40c0>
   15470:	ldr	r0, [sp, #4]
   15474:	bl	11198 <iswcntrl@plt>
   15478:	cmp	r0, #0
   1547c:	bne	15410 <__assert_fail@plt+0x402c>
   15480:	cmn	r6, #-2147483647	; 0x80000001
   15484:	add	r6, r6, #1
   15488:	bne	15410 <__assert_fail@plt+0x402c>
   1548c:	mvn	r6, #-2147483648	; 0x80000000
   15490:	mov	r0, r6
   15494:	add	sp, sp, #20
   15498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1549c:	cmp	sl, #0
   154a0:	beq	153c0 <__assert_fail@plt+0x3fdc>
   154a4:	mvn	r6, #0
   154a8:	mov	r0, r6
   154ac:	add	sp, sp, #20
   154b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154b4:	cmp	sl, #0
   154b8:	bne	154a4 <__assert_fail@plt+0x40c0>
   154bc:	add	r6, r6, #1
   154c0:	mov	r5, r7
   154c4:	b	153c8 <__assert_fail@plt+0x3fe4>
   154c8:	cmp	r5, r7
   154cc:	movcs	r6, #0
   154d0:	bcs	15490 <__assert_fail@plt+0x40ac>
   154d4:	bl	1127c <__ctype_b_loc@plt>
   154d8:	mov	r6, #0
   154dc:	and	r2, sl, #2
   154e0:	ldr	r1, [r0]
   154e4:	ldrb	r3, [r5], #1
   154e8:	lsl	r3, r3, #1
   154ec:	ldrh	r3, [r1, r3]
   154f0:	tst	r3, #16384	; 0x4000
   154f4:	bne	15508 <__assert_fail@plt+0x4124>
   154f8:	cmp	r2, #0
   154fc:	bne	154a4 <__assert_fail@plt+0x40c0>
   15500:	tst	r3, #2
   15504:	bne	15514 <__assert_fail@plt+0x4130>
   15508:	cmn	r6, #-2147483647	; 0x80000001
   1550c:	beq	15490 <__assert_fail@plt+0x40ac>
   15510:	add	r6, r6, #1
   15514:	cmp	r7, r5
   15518:	bne	154e4 <__assert_fail@plt+0x4100>
   1551c:	mov	r0, r6
   15520:	add	sp, sp, #20
   15524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15528:	push	{r4, r5, r6, lr}
   1552c:	mov	r5, r1
   15530:	mov	r4, r0
   15534:	bl	11294 <strlen@plt>
   15538:	mov	r2, r5
   1553c:	mov	r1, r0
   15540:	mov	r0, r4
   15544:	pop	{r4, r5, r6, lr}
   15548:	b	1536c <__assert_fail@plt+0x3f88>
   1554c:	push	{r4, r5, r6, lr}
   15550:	subs	r4, r2, #0
   15554:	mov	r6, r0
   15558:	beq	15584 <__assert_fail@plt+0x41a0>
   1555c:	mov	r5, r1
   15560:	bl	1124c <__ctype_tolower_loc@plt>
   15564:	add	r3, r5, r4
   15568:	add	r2, r6, r4
   1556c:	ldrb	lr, [r3, #-1]!
   15570:	ldr	ip, [r0]
   15574:	cmp	r5, r3
   15578:	ldr	ip, [ip, lr, lsl #2]
   1557c:	strb	ip, [r2, #-1]!
   15580:	bne	1556c <__assert_fail@plt+0x4188>
   15584:	mov	r0, r6
   15588:	pop	{r4, r5, r6, pc}
   1558c:	push	{r4, r5, r6, lr}
   15590:	subs	r4, r2, #0
   15594:	mov	r6, r0
   15598:	beq	155c4 <__assert_fail@plt+0x41e0>
   1559c:	mov	r5, r1
   155a0:	bl	11258 <__ctype_toupper_loc@plt>
   155a4:	add	r3, r5, r4
   155a8:	add	r2, r6, r4
   155ac:	ldrb	lr, [r3, #-1]!
   155b0:	ldr	ip, [r0]
   155b4:	cmp	r5, r3
   155b8:	ldr	ip, [ip, lr, lsl #2]
   155bc:	strb	ip, [r2, #-1]!
   155c0:	bne	155ac <__assert_fail@plt+0x41c8>
   155c4:	mov	r0, r6
   155c8:	pop	{r4, r5, r6, pc}
   155cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155d0:	sub	sp, sp, #1104	; 0x450
   155d4:	sub	sp, sp, #12
   155d8:	mov	r4, r3
   155dc:	str	r3, [sp, #32]
   155e0:	str	r1, [sp, #28]
   155e4:	mov	r9, r2
   155e8:	mov	fp, r0
   155ec:	bl	112c4 <__errno_location@plt>
   155f0:	ldr	r3, [r4, #40]	; 0x28
   155f4:	ldr	r2, [r4, #8]
   155f8:	mov	r1, r3
   155fc:	ldr	r3, [pc, #3936]	; 16564 <__assert_fail@plt+0x5180>
   15600:	mov	ip, r2
   15604:	str	r2, [sp, #48]	; 0x30
   15608:	subs	r2, r1, #0
   1560c:	moveq	r2, r3
   15610:	cmp	ip, #12
   15614:	str	r2, [sp, #56]	; 0x38
   15618:	ldr	r6, [sp, #1160]	; 0x488
   1561c:	ldr	r3, [r0]
   15620:	str	r0, [sp, #44]	; 0x2c
   15624:	str	r3, [sp, #60]	; 0x3c
   15628:	ldrb	r3, [sp, #1152]	; 0x480
   1562c:	str	r3, [sp, #52]	; 0x34
   15630:	ble	15ab8 <__assert_fail@plt+0x46d4>
   15634:	mov	r2, ip
   15638:	sub	r3, ip, #12
   1563c:	str	r3, [sp, #48]	; 0x30
   15640:	ldrb	r3, [r9]
   15644:	cmp	r3, #0
   15648:	beq	16bfc <__assert_fail@plt+0x5818>
   1564c:	ldr	sl, [pc, #3860]	; 16568 <__assert_fail@plt+0x5184>
   15650:	mov	r8, #0
   15654:	cmp	r3, #37	; 0x25
   15658:	beq	15724 <__assert_fail@plt+0x4340>
   1565c:	bic	r6, r6, r6, asr #31
   15660:	ldr	r3, [sp, #28]
   15664:	cmp	r6, #1
   15668:	movcs	r4, r6
   1566c:	movcc	r4, #1
   15670:	sub	r3, r3, r8
   15674:	cmp	r4, r3
   15678:	bcs	15704 <__assert_fail@plt+0x4320>
   1567c:	cmp	fp, #0
   15680:	beq	156ac <__assert_fail@plt+0x42c8>
   15684:	cmp	r6, #1
   15688:	ble	156a4 <__assert_fail@plt+0x42c0>
   1568c:	sub	r6, r6, #1
   15690:	mov	r0, fp
   15694:	mov	r2, r6
   15698:	mov	r1, #32
   1569c:	bl	112e8 <memset@plt>
   156a0:	add	fp, fp, r6
   156a4:	ldrb	r3, [r9]
   156a8:	strb	r3, [fp], #1
   156ac:	add	r8, r8, r4
   156b0:	mov	r4, r9
   156b4:	ldrb	r3, [r4, #1]
   156b8:	add	r9, r4, #1
   156bc:	mvn	r6, #0
   156c0:	cmp	r3, #0
   156c4:	bne	15654 <__assert_fail@plt+0x4270>
   156c8:	ldr	r3, [sp, #28]
   156cc:	ldr	r2, [sp, #60]	; 0x3c
   156d0:	cmp	fp, #0
   156d4:	cmpne	r3, #0
   156d8:	movne	r3, #0
   156dc:	strbne	r3, [fp]
   156e0:	ldr	r3, [sp, #44]	; 0x2c
   156e4:	str	r2, [r3]
   156e8:	b	15714 <__assert_fail@plt+0x4330>
   156ec:	ldr	r2, [sp, #28]
   156f0:	add	r8, r8, r7
   156f4:	sub	r2, r2, r8
   156f8:	cmp	r2, #1
   156fc:	sub	r6, r6, r7
   15700:	bhi	15eb8 <__assert_fail@plt+0x4ad4>
   15704:	ldr	r2, [sp, #44]	; 0x2c
   15708:	mov	r3, #34	; 0x22
   1570c:	str	r3, [r2]
   15710:	mov	r8, #0
   15714:	mov	r0, r8
   15718:	add	sp, sp, #1104	; 0x450
   1571c:	add	sp, sp, #12
   15720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15724:	ldr	r3, [sp, #52]	; 0x34
   15728:	mov	r4, r9
   1572c:	mov	r5, #0
   15730:	str	r5, [sp, #24]
   15734:	str	r3, [sp, #40]	; 0x28
   15738:	ldrb	r1, [r4, #1]!
   1573c:	sub	r3, r1, #35	; 0x23
   15740:	mov	r7, r1
   15744:	cmp	r3, #60	; 0x3c
   15748:	ldrls	pc, [pc, r3, lsl #2]
   1574c:	b	15860 <__assert_fail@plt+0x447c>
   15750:	andeq	r5, r1, r8, asr r8
   15754:	andeq	r5, r1, r0, ror #16
   15758:	andeq	r5, r1, r0, ror #16
   1575c:	andeq	r5, r1, r0, ror #16
   15760:	andeq	r5, r1, r0, ror #16
   15764:	andeq	r5, r1, r0, ror #16
   15768:	andeq	r5, r1, r0, ror #16
   1576c:	andeq	r5, r1, r0, ror #16
   15770:	andeq	r5, r1, r0, asr r8
   15774:	andeq	r5, r1, r0, ror #16
   15778:	andeq	r5, r1, r0, asr r8
   1577c:	andeq	r5, r1, r0, ror #16
   15780:	andeq	r5, r1, r0, ror #16
   15784:	andeq	r5, r1, r0, asr r8
   15788:	andeq	r5, r1, r0, ror #16
   1578c:	andeq	r5, r1, r0, ror #16
   15790:	andeq	r5, r1, r0, ror #16
   15794:	andeq	r5, r1, r0, ror #16
   15798:	andeq	r5, r1, r0, ror #16
   1579c:	andeq	r5, r1, r0, ror #16
   157a0:	andeq	r5, r1, r0, ror #16
   157a4:	andeq	r5, r1, r0, ror #16
   157a8:	andeq	r5, r1, r0, ror #16
   157ac:	andeq	r5, r1, r0, ror #16
   157b0:	andeq	r5, r1, r0, ror #16
   157b4:	andeq	r5, r1, r0, ror #16
   157b8:	andeq	r5, r1, r0, ror #16
   157bc:	andeq	r5, r1, r0, ror #16
   157c0:	andeq	r5, r1, r0, ror #16
   157c4:	andeq	r5, r1, r0, ror #16
   157c8:	andeq	r5, r1, r0, ror #16
   157cc:	andeq	r5, r1, r0, ror #16
   157d0:	andeq	r5, r1, r0, ror #16
   157d4:	andeq	r5, r1, r0, ror #16
   157d8:	andeq	r5, r1, r0, ror #16
   157dc:	andeq	r5, r1, r0, ror #16
   157e0:	andeq	r5, r1, r0, ror #16
   157e4:	andeq	r5, r1, r0, ror #16
   157e8:	andeq	r5, r1, r0, ror #16
   157ec:	andeq	r5, r1, r0, ror #16
   157f0:	andeq	r5, r1, r0, ror #16
   157f4:	andeq	r5, r1, r0, ror #16
   157f8:	andeq	r5, r1, r0, ror #16
   157fc:	andeq	r5, r1, r0, ror #16
   15800:	andeq	r5, r1, r0, ror #16
   15804:	andeq	r5, r1, r0, ror #16
   15808:	andeq	r5, r1, r0, ror #16
   1580c:	andeq	r5, r1, r0, ror #16
   15810:	andeq	r5, r1, r0, ror #16
   15814:	andeq	r5, r1, r0, ror #16
   15818:	andeq	r5, r1, r0, ror #16
   1581c:	andeq	r5, r1, r0, ror #16
   15820:	andeq	r5, r1, r0, ror #16
   15824:	andeq	r5, r1, r0, ror #16
   15828:	andeq	r5, r1, r0, ror #16
   1582c:	andeq	r5, r1, r0, ror #16
   15830:	andeq	r5, r1, r0, ror #16
   15834:	andeq	r5, r1, r0, ror #16
   15838:	andeq	r5, r1, r0, ror #16
   1583c:	andeq	r5, r1, r4, asr #16
   15840:	andeq	r5, r1, r0, asr r8
   15844:	mov	r3, #1
   15848:	str	r3, [sp, #40]	; 0x28
   1584c:	b	15738 <__assert_fail@plt+0x4354>
   15850:	str	r1, [sp, #24]
   15854:	b	15738 <__assert_fail@plt+0x4354>
   15858:	mov	r5, #1
   1585c:	b	15738 <__assert_fail@plt+0x4354>
   15860:	sub	r3, r1, #48	; 0x30
   15864:	cmp	r3, #9
   15868:	bhi	158ac <__assert_fail@plt+0x44c8>
   1586c:	mov	r6, #0
   15870:	mvn	r7, #-2147483648	; 0x80000000
   15874:	cmp	r6, #0
   15878:	blt	15b7c <__assert_fail@plt+0x4798>
   1587c:	ldr	r3, [pc, #3304]	; 1656c <__assert_fail@plt+0x5188>
   15880:	cmp	r6, r3
   15884:	ble	15b98 <__assert_fail@plt+0x47b4>
   15888:	mov	r3, r4
   1588c:	ldrb	r1, [r3, #1]
   15890:	add	r4, r3, #1
   15894:	mov	r3, r4
   15898:	sub	r2, r1, #48	; 0x30
   1589c:	cmp	r2, #9
   158a0:	bls	1588c <__assert_fail@plt+0x44a8>
   158a4:	mov	r7, r1
   158a8:	mvn	r6, #-2147483648	; 0x80000000
   158ac:	cmp	r1, #69	; 0x45
   158b0:	beq	15acc <__assert_fail@plt+0x46e8>
   158b4:	cmp	r1, #79	; 0x4f
   158b8:	movne	r7, #0
   158bc:	beq	15acc <__assert_fail@plt+0x46e8>
   158c0:	cmp	r1, #122	; 0x7a
   158c4:	ldrls	pc, [pc, r1, lsl #2]
   158c8:	b	15adc <__assert_fail@plt+0x46f8>
   158cc:	ldrdeq	r5, [r1], -r8
   158d0:	ldrdeq	r5, [r1], -ip
   158d4:	ldrdeq	r5, [r1], -ip
   158d8:	ldrdeq	r5, [r1], -ip
   158dc:	ldrdeq	r5, [r1], -ip
   158e0:	ldrdeq	r5, [r1], -ip
   158e4:	ldrdeq	r5, [r1], -ip
   158e8:	ldrdeq	r5, [r1], -ip
   158ec:	ldrdeq	r5, [r1], -ip
   158f0:	ldrdeq	r5, [r1], -ip
   158f4:	ldrdeq	r5, [r1], -ip
   158f8:	ldrdeq	r5, [r1], -ip
   158fc:	ldrdeq	r5, [r1], -ip
   15900:	ldrdeq	r5, [r1], -ip
   15904:	ldrdeq	r5, [r1], -ip
   15908:	ldrdeq	r5, [r1], -ip
   1590c:	ldrdeq	r5, [r1], -ip
   15910:	ldrdeq	r5, [r1], -ip
   15914:	ldrdeq	r5, [r1], -ip
   15918:	ldrdeq	r5, [r1], -ip
   1591c:	ldrdeq	r5, [r1], -ip
   15920:	ldrdeq	r5, [r1], -ip
   15924:	ldrdeq	r5, [r1], -ip
   15928:	ldrdeq	r5, [r1], -ip
   1592c:	ldrdeq	r5, [r1], -ip
   15930:	ldrdeq	r5, [r1], -ip
   15934:	ldrdeq	r5, [r1], -ip
   15938:	ldrdeq	r5, [r1], -ip
   1593c:	ldrdeq	r5, [r1], -ip
   15940:	ldrdeq	r5, [r1], -ip
   15944:	ldrdeq	r5, [r1], -ip
   15948:	ldrdeq	r5, [r1], -ip
   1594c:	ldrdeq	r5, [r1], -ip
   15950:	ldrdeq	r5, [r1], -ip
   15954:	ldrdeq	r5, [r1], -ip
   15958:	ldrdeq	r5, [r1], -ip
   1595c:	ldrdeq	r5, [r1], -ip
   15960:	andeq	r6, r1, ip, ror #17
   15964:	ldrdeq	r5, [r1], -ip
   15968:	ldrdeq	r5, [r1], -ip
   1596c:	ldrdeq	r5, [r1], -ip
   15970:	ldrdeq	r5, [r1], -ip
   15974:	ldrdeq	r5, [r1], -ip
   15978:	ldrdeq	r5, [r1], -ip
   1597c:	ldrdeq	r5, [r1], -ip
   15980:	ldrdeq	r5, [r1], -ip
   15984:	ldrdeq	r5, [r1], -ip
   15988:	ldrdeq	r5, [r1], -ip
   1598c:	ldrdeq	r5, [r1], -ip
   15990:	ldrdeq	r5, [r1], -ip
   15994:	ldrdeq	r5, [r1], -ip
   15998:	ldrdeq	r5, [r1], -ip
   1599c:	ldrdeq	r5, [r1], -ip
   159a0:	ldrdeq	r5, [r1], -ip
   159a4:	ldrdeq	r5, [r1], -ip
   159a8:	ldrdeq	r5, [r1], -ip
   159ac:	ldrdeq	r5, [r1], -ip
   159b0:	ldrdeq	r5, [r1], -ip
   159b4:	andeq	r6, r1, ip, ror #21
   159b8:	ldrdeq	r5, [r1], -ip
   159bc:	ldrdeq	r5, [r1], -ip
   159c0:	ldrdeq	r5, [r1], -ip
   159c4:	ldrdeq	r5, [r1], -ip
   159c8:	ldrdeq	r5, [r1], -ip
   159cc:	ldrdeq	r5, [r1], -ip
   159d0:	andeq	r5, r1, r4, ror #30
   159d4:	andeq	r5, r1, r0, asr #24
   159d8:	andeq	r6, r1, r8, lsl #6
   159dc:	strdeq	r6, [r1], -r8
   159e0:	ldrdeq	r5, [r1], -ip
   159e4:	andeq	r6, r1, ip, asr #15
   159e8:	andeq	r6, r1, r4, asr #12
   159ec:	andeq	r6, r1, ip, asr #22
   159f0:	strdeq	r6, [r1], -r8
   159f4:	ldrdeq	r5, [r1], -ip
   159f8:	ldrdeq	r5, [r1], -ip
   159fc:	ldrdeq	r5, [r1], -ip
   15a00:	ldrdeq	r6, [r1], -r4
   15a04:			; <UNDEFINED> instruction: 0x000169b0
   15a08:	ldrdeq	r5, [r1], -ip
   15a0c:	andeq	r6, r1, r8, lsr #19
   15a10:	ldrdeq	r5, [r1], -ip
   15a14:	muleq	r1, ip, r9
   15a18:	andeq	r6, r1, r4, lsl #19
   15a1c:	andeq	r6, r1, r8, ror r9
   15a20:	muleq	r1, r4, r3
   15a24:	andeq	r6, r1, r4, asr #12
   15a28:	andeq	r6, r1, r0, lsl fp
   15a2c:	andeq	r5, r1, r8, asr pc
   15a30:	muleq	r1, r0, r1
   15a34:	andeq	r6, r1, r0, ror #1
   15a38:	ldrdeq	r5, [r1], -ip
   15a3c:	ldrdeq	r5, [r1], -ip
   15a40:	ldrdeq	r5, [r1], -ip
   15a44:	ldrdeq	r5, [r1], -ip
   15a48:	ldrdeq	r5, [r1], -ip
   15a4c:	ldrdeq	r5, [r1], -ip
   15a50:	andeq	r5, r1, r4, ror #30
   15a54:	andeq	r6, r1, r8, asr r0
   15a58:	andeq	r5, r1, r8, asr pc
   15a5c:	andeq	r5, r1, r8, ror #26
   15a60:	andeq	r6, r1, r8, lsl #8
   15a64:	ldrdeq	r5, [r1], -ip
   15a68:	andeq	r6, r1, r4, asr #12
   15a6c:	andeq	r6, r1, r8, asr r0
   15a70:	ldrdeq	r5, [r1], -ip
   15a74:	andeq	r6, r1, ip, asr #7
   15a78:	strdeq	r6, [r1], -ip
   15a7c:	andeq	r6, r1, ip, ror #9
   15a80:			; <UNDEFINED> instruction: 0x000164b0
   15a84:	andeq	r6, r1, r0, lsr r4
   15a88:	ldrdeq	r5, [r1], -ip
   15a8c:	andeq	r6, r1, r4, asr #10
   15a90:	andeq	r6, r1, r0, lsl r5
   15a94:	andeq	r5, r1, r4, asr ip
   15a98:	andeq	r6, r1, ip, lsr #11
   15a9c:	andeq	r6, r1, r8, asr r8
   15aa0:	andeq	r6, r1, r4, lsr #16
   15aa4:	ldrdeq	r5, [r1], -ip
   15aa8:	andeq	r6, r1, ip, lsl #16
   15aac:	andeq	r5, r1, r8, asr pc
   15ab0:	andeq	r6, r1, ip, ror r0
   15ab4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   15ab8:	ldr	r2, [sp, #48]	; 0x30
   15abc:	subs	r3, r2, #0
   15ac0:	moveq	r3, #12
   15ac4:	str	r3, [sp, #48]	; 0x30
   15ac8:	b	15640 <__assert_fail@plt+0x425c>
   15acc:	ldrb	r1, [r4, #1]
   15ad0:	add	r4, r4, #1
   15ad4:	b	158c0 <__assert_fail@plt+0x44dc>
   15ad8:	sub	r4, r4, #1
   15adc:	ldr	r3, [sp, #24]
   15ae0:	sub	r5, r4, r9
   15ae4:	subs	r3, r3, #45	; 0x2d
   15ae8:	movne	r3, #1
   15aec:	cmp	r6, #0
   15af0:	movlt	r3, #0
   15af4:	cmp	r3, #0
   15af8:	add	r5, r5, #1
   15afc:	moveq	r6, #0
   15b00:	ldr	r3, [sp, #28]
   15b04:	cmp	r5, r6
   15b08:	movcs	r7, r5
   15b0c:	movcc	r7, r6
   15b10:	sub	r3, r3, r8
   15b14:	cmp	r7, r3
   15b18:	bcs	15704 <__assert_fail@plt+0x4320>
   15b1c:	cmp	fp, #0
   15b20:	beq	15b74 <__assert_fail@plt+0x4790>
   15b24:	cmp	r5, r6
   15b28:	bcs	15b54 <__assert_fail@plt+0x4770>
   15b2c:	ldr	r3, [sp, #24]
   15b30:	sub	r6, r6, r5
   15b34:	cmp	r3, #43	; 0x2b
   15b38:	cmpne	r3, #48	; 0x30
   15b3c:	mov	r0, fp
   15b40:	mov	r2, r6
   15b44:	moveq	r1, #48	; 0x30
   15b48:	movne	r1, #32
   15b4c:	bl	112e8 <memset@plt>
   15b50:	add	fp, fp, r6
   15b54:	ldr	r3, [sp, #40]	; 0x28
   15b58:	mov	r1, r9
   15b5c:	cmp	r3, #0
   15b60:	mov	r2, r5
   15b64:	mov	r0, fp
   15b68:	beq	15f50 <__assert_fail@plt+0x4b6c>
   15b6c:	bl	1558c <__assert_fail@plt+0x41a8>
   15b70:	add	fp, fp, r5
   15b74:	add	r8, r8, r7
   15b78:	b	156b4 <__assert_fail@plt+0x42d0>
   15b7c:	cmn	r6, #1
   15b80:	beq	15c14 <__assert_fail@plt+0x4830>
   15b84:	mov	r1, r6
   15b88:	mov	r0, #-2147483648	; 0x80000000
   15b8c:	bl	1b838 <__assert_fail@plt+0xa454>
   15b90:	cmp	r0, #9
   15b94:	ble	15888 <__assert_fail@plt+0x44a4>
   15b98:	ldrb	r0, [r4]
   15b9c:	add	r6, r6, r6, lsl #2
   15ba0:	cmp	r0, #47	; 0x2f
   15ba4:	lsl	r3, r6, #1
   15ba8:	mov	r1, r3
   15bac:	ble	15c2c <__assert_fail@plt+0x4848>
   15bb0:	cmp	r3, #0
   15bb4:	blt	15bf0 <__assert_fail@plt+0x480c>
   15bb8:	sub	r2, r0, #48	; 0x30
   15bbc:	sub	r2, r7, r2
   15bc0:	cmp	r3, r2
   15bc4:	movle	r2, #0
   15bc8:	movgt	r2, #1
   15bcc:	cmp	r2, #0
   15bd0:	beq	15bf0 <__assert_fail@plt+0x480c>
   15bd4:	ldrb	r1, [r4, #1]
   15bd8:	add	r3, r4, #1
   15bdc:	sub	r2, r1, #48	; 0x30
   15be0:	cmp	r2, #9
   15be4:	bls	1588c <__assert_fail@plt+0x44a8>
   15be8:	mov	r4, r3
   15bec:	b	158a4 <__assert_fail@plt+0x44c0>
   15bf0:	ldrb	r1, [r4, #1]
   15bf4:	add	r3, r0, r3
   15bf8:	sub	r6, r3, #48	; 0x30
   15bfc:	sub	r3, r1, #48	; 0x30
   15c00:	cmp	r3, #9
   15c04:	add	r4, r4, #1
   15c08:	bls	15874 <__assert_fail@plt+0x4490>
   15c0c:	mov	r7, r1
   15c10:	b	158ac <__assert_fail@plt+0x44c8>
   15c14:	ldrb	r0, [r4]
   15c18:	cmp	r0, #47	; 0x2f
   15c1c:	mvngt	r3, #9
   15c20:	bgt	15bf0 <__assert_fail@plt+0x480c>
   15c24:	mvn	r1, #9
   15c28:	mov	r3, r1
   15c2c:	rsb	r2, r0, #-2147483600	; 0x80000030
   15c30:	cmp	r2, r1
   15c34:	movle	r2, #0
   15c38:	movgt	r2, #1
   15c3c:	b	15bcc <__assert_fail@plt+0x47e8>
   15c40:	cmp	r7, #69	; 0x45
   15c44:	beq	15adc <__assert_fail@plt+0x46f8>
   15c48:	cmp	r5, #0
   15c4c:	beq	15c58 <__assert_fail@plt+0x4874>
   15c50:	str	r5, [sp, #40]	; 0x28
   15c54:	mov	r5, #0
   15c58:	cmp	r7, #0
   15c5c:	mov	r2, #32
   15c60:	mov	r3, #37	; 0x25
   15c64:	strb	r2, [sp, #72]	; 0x48
   15c68:	strb	r3, [sp, #73]	; 0x49
   15c6c:	addeq	r9, sp, #72	; 0x48
   15c70:	addeq	ip, sp, #74	; 0x4a
   15c74:	bne	15d58 <__assert_fail@plt+0x4974>
   15c78:	mov	lr, #0
   15c7c:	strb	r1, [ip]
   15c80:	mov	r2, r9
   15c84:	add	r0, sp, #88	; 0x58
   15c88:	ldr	r3, [sp, #32]
   15c8c:	strb	lr, [ip, #1]
   15c90:	mov	r1, #1024	; 0x400
   15c94:	bl	11234 <strftime@plt>
   15c98:	cmp	r0, #0
   15c9c:	beq	156b4 <__assert_fail@plt+0x42d0>
   15ca0:	ldr	r2, [sp, #24]
   15ca4:	mvn	r3, r6
   15ca8:	cmp	r2, #45	; 0x2d
   15cac:	lsr	r3, r3, #31
   15cb0:	moveq	r3, #0
   15cb4:	cmp	r3, #0
   15cb8:	sub	r7, r0, #1
   15cbc:	moveq	r6, #0
   15cc0:	ldr	r3, [sp, #28]
   15cc4:	cmp	r7, r6
   15cc8:	movcs	r9, r7
   15ccc:	movcc	r9, r6
   15cd0:	sub	r3, r3, r8
   15cd4:	cmp	r9, r3
   15cd8:	bcs	15704 <__assert_fail@plt+0x4320>
   15cdc:	cmp	fp, #0
   15ce0:	beq	15d3c <__assert_fail@plt+0x4958>
   15ce4:	cmp	r7, r6
   15ce8:	bcs	15d14 <__assert_fail@plt+0x4930>
   15cec:	ldr	r3, [sp, #24]
   15cf0:	sub	r6, r6, r7
   15cf4:	cmp	r3, #43	; 0x2b
   15cf8:	cmpne	r3, #48	; 0x30
   15cfc:	mov	r0, fp
   15d00:	mov	r2, r6
   15d04:	moveq	r1, #48	; 0x30
   15d08:	movne	r1, #32
   15d0c:	bl	112e8 <memset@plt>
   15d10:	add	fp, fp, r6
   15d14:	cmp	r5, #0
   15d18:	bne	16b84 <__assert_fail@plt+0x57a0>
   15d1c:	ldr	r3, [sp, #40]	; 0x28
   15d20:	add	r1, sp, #89	; 0x59
   15d24:	cmp	r3, #0
   15d28:	mov	r2, r7
   15d2c:	mov	r0, fp
   15d30:	beq	15f48 <__assert_fail@plt+0x4b64>
   15d34:	bl	1558c <__assert_fail@plt+0x41a8>
   15d38:	add	fp, fp, r7
   15d3c:	add	r8, r8, r9
   15d40:	b	156b4 <__assert_fail@plt+0x42d0>
   15d44:	mov	r5, #0
   15d48:	mov	r2, #32
   15d4c:	mov	r3, #37	; 0x25
   15d50:	strb	r2, [sp, #72]	; 0x48
   15d54:	strb	r3, [sp, #73]	; 0x49
   15d58:	add	r9, sp, #72	; 0x48
   15d5c:	strb	r7, [sp, #74]	; 0x4a
   15d60:	add	ip, r9, #3
   15d64:	b	15c78 <__assert_fail@plt+0x4894>
   15d68:	cmp	r7, #69	; 0x45
   15d6c:	beq	15adc <__assert_fail@plt+0x46f8>
   15d70:	ldr	r3, [sp, #32]
   15d74:	mov	lr, #2
   15d78:	ldr	r2, [r3, #12]
   15d7c:	mov	r3, r2
   15d80:	mov	r0, #0
   15d84:	lsr	r2, r2, #31
   15d88:	cmp	r3, r0
   15d8c:	str	r2, [sp, #36]	; 0x24
   15d90:	mov	ip, r0
   15d94:	movlt	r2, #0
   15d98:	movge	r2, #1
   15d9c:	cmp	r7, #79	; 0x4f
   15da0:	movne	r2, #0
   15da4:	andeq	r2, r2, #1
   15da8:	cmp	r2, #0
   15dac:	uxtbne	r1, r1
   15db0:	bne	15d44 <__assert_fail@plt+0x4960>
   15db4:	ldr	r2, [sp, #36]	; 0x24
   15db8:	cmp	r2, #0
   15dbc:	rsbne	r3, r3, #0
   15dc0:	add	r9, sp, #72	; 0x48
   15dc4:	add	r5, r9, #14
   15dc8:	mov	r2, r5
   15dcc:	mov	r5, r3
   15dd0:	mov	r3, r2
   15dd4:	tst	r0, #1
   15dd8:	movne	r2, #58	; 0x3a
   15ddc:	mov	r7, r3
   15de0:	strbne	r2, [r3, #-1]
   15de4:	subne	r7, r3, #1
   15de8:	ldr	r3, [pc, #1920]	; 16570 <__assert_fail@plt+0x518c>
   15dec:	asrs	r0, r0, #1
   15df0:	movne	r1, #1
   15df4:	umull	r3, r2, r3, r5
   15df8:	moveq	r1, #0
   15dfc:	lsr	r2, r2, #3
   15e00:	cmp	r2, #0
   15e04:	orrne	r1, r1, #1
   15e08:	add	r3, r2, r2, lsl #2
   15e0c:	cmp	r1, #0
   15e10:	sub	r3, r5, r3, lsl #1
   15e14:	add	r3, r3, #48	; 0x30
   15e18:	strb	r3, [r7, #-1]
   15e1c:	mov	r5, r2
   15e20:	sub	r3, r7, #1
   15e24:	bne	15dd4 <__assert_fail@plt+0x49f0>
   15e28:	mov	r5, r3
   15e2c:	ldr	r3, [sp, #24]
   15e30:	cmp	r3, #0
   15e34:	beq	16b70 <__assert_fail@plt+0x578c>
   15e38:	subs	r3, r3, #45	; 0x2d
   15e3c:	movne	r3, #1
   15e40:	str	r3, [sp, #64]	; 0x40
   15e44:	ldr	r3, [sp, #36]	; 0x24
   15e48:	cmp	r6, #0
   15e4c:	movlt	r6, lr
   15e50:	cmp	r3, #0
   15e54:	bne	16b64 <__assert_fail@plt+0x5780>
   15e58:	cmp	ip, #0
   15e5c:	beq	16b98 <__assert_fail@plt+0x57b4>
   15e60:	mov	r3, #43	; 0x2b
   15e64:	str	r3, [sp, #36]	; 0x24
   15e68:	add	r3, r9, #14
   15e6c:	sub	r3, r3, r5
   15e70:	sub	r7, r6, #1
   15e74:	ldr	r2, [sp, #64]	; 0x40
   15e78:	sub	r7, r7, r3
   15e7c:	cmp	r7, #0
   15e80:	movle	r2, #0
   15e84:	andgt	r2, r2, #1
   15e88:	cmp	r2, #0
   15e8c:	ldr	r2, [sp, #24]
   15e90:	moveq	r7, #0
   15e94:	cmp	r2, #95	; 0x5f
   15e98:	beq	16bcc <__assert_fail@plt+0x57e8>
   15e9c:	ldr	r2, [sp, #28]
   15ea0:	sub	r2, r2, r8
   15ea4:	cmp	r2, #1
   15ea8:	bls	15704 <__assert_fail@plt+0x4320>
   15eac:	cmp	fp, #0
   15eb0:	ldrbne	r2, [sp, #36]	; 0x24
   15eb4:	strbne	r2, [fp], #1
   15eb8:	ldr	r9, [sp, #64]	; 0x40
   15ebc:	sub	r6, r6, #1
   15ec0:	cmp	r6, #0
   15ec4:	movlt	r9, #0
   15ec8:	andge	r9, r9, #1
   15ecc:	cmp	r9, #0
   15ed0:	add	r8, r8, #1
   15ed4:	mov	r7, r3
   15ed8:	moveq	r6, r9
   15edc:	ldr	r3, [sp, #28]
   15ee0:	cmp	r6, r7
   15ee4:	movcs	r9, r6
   15ee8:	movcc	r9, r7
   15eec:	sub	r3, r3, r8
   15ef0:	cmp	r9, r3
   15ef4:	bcs	15704 <__assert_fail@plt+0x4320>
   15ef8:	cmp	fp, #0
   15efc:	beq	15d3c <__assert_fail@plt+0x4958>
   15f00:	cmp	r6, r7
   15f04:	bls	15f30 <__assert_fail@plt+0x4b4c>
   15f08:	ldr	r3, [sp, #24]
   15f0c:	sub	r6, r6, r7
   15f10:	cmp	r3, #43	; 0x2b
   15f14:	cmpne	r3, #48	; 0x30
   15f18:	mov	r0, fp
   15f1c:	mov	r2, r6
   15f20:	moveq	r1, #48	; 0x30
   15f24:	movne	r1, #32
   15f28:	bl	112e8 <memset@plt>
   15f2c:	add	fp, fp, r6
   15f30:	ldr	r3, [sp, #40]	; 0x28
   15f34:	mov	r1, r5
   15f38:	cmp	r3, #0
   15f3c:	mov	r2, r7
   15f40:	mov	r0, fp
   15f44:	bne	15d34 <__assert_fail@plt+0x4950>
   15f48:	bl	1112c <memcpy@plt>
   15f4c:	b	15d38 <__assert_fail@plt+0x4954>
   15f50:	bl	1112c <memcpy@plt>
   15f54:	b	15b70 <__assert_fail@plt+0x478c>
   15f58:	cmp	r7, #79	; 0x4f
   15f5c:	bne	15c54 <__assert_fail@plt+0x4870>
   15f60:	b	15adc <__assert_fail@plt+0x46f8>
   15f64:	cmp	r7, #0
   15f68:	bne	15adc <__assert_fail@plt+0x46f8>
   15f6c:	ldr	r3, [sp, #40]	; 0x28
   15f70:	cmp	r5, #0
   15f74:	moveq	r5, r3
   15f78:	mov	r2, #32
   15f7c:	mov	r3, #37	; 0x25
   15f80:	add	r9, sp, #72	; 0x48
   15f84:	str	r5, [sp, #40]	; 0x28
   15f88:	strb	r2, [sp, #72]	; 0x48
   15f8c:	strb	r3, [sp, #73]	; 0x49
   15f90:	add	ip, r9, #2
   15f94:	mov	r5, #0
   15f98:	b	15c78 <__assert_fail@plt+0x4894>
   15f9c:	mov	lr, #0
   15fa0:	ldr	r2, [sp, #32]
   15fa4:	ldr	r3, [r2, #32]
   15fa8:	cmp	r3, #0
   15fac:	blt	156b4 <__assert_fail@plt+0x42d0>
   15fb0:	ldr	ip, [r2, #36]	; 0x24
   15fb4:	mov	r3, r2
   15fb8:	cmp	ip, #0
   15fbc:	blt	16e78 <__assert_fail@plt+0x5a94>
   15fc0:	movne	r3, #0
   15fc4:	strne	r3, [sp, #36]	; 0x24
   15fc8:	bne	15fe4 <__assert_fail@plt+0x4c00>
   15fcc:	ldr	r3, [sp, #56]	; 0x38
   15fd0:	ldrb	r3, [r3]
   15fd4:	sub	r3, r3, #45	; 0x2d
   15fd8:	clz	r3, r3
   15fdc:	lsr	r3, r3, #5
   15fe0:	str	r3, [sp, #36]	; 0x24
   15fe4:	ldr	r3, [pc, #1416]	; 16574 <__assert_fail@plt+0x5190>
   15fe8:	smull	r3, r2, r3, ip
   15fec:	ldr	r3, [pc, #1412]	; 16578 <__assert_fail@plt+0x5194>
   15ff0:	add	r2, r2, ip
   15ff4:	smull	r3, r5, r3, ip
   15ff8:	add	r0, r5, ip
   15ffc:	asr	r3, ip, #31
   16000:	str	r0, [sp, #64]	; 0x40
   16004:	ldr	r0, [pc, #1384]	; 16574 <__assert_fail@plt+0x5190>
   16008:	rsb	r2, r3, r2, asr #5
   1600c:	smull	r5, r0, r0, r2
   16010:	add	r0, r0, r2
   16014:	asr	r5, r2, #31
   16018:	rsb	r0, r5, r0, asr #5
   1601c:	rsb	r5, r2, r2, lsl #4
   16020:	rsb	r0, r0, r0, lsl #4
   16024:	str	r0, [sp, #68]	; 0x44
   16028:	ldr	r0, [sp, #64]	; 0x40
   1602c:	sub	ip, ip, r5, lsl #2
   16030:	rsb	r3, r3, r0, asr #11
   16034:	ldr	r0, [sp, #68]	; 0x44
   16038:	sub	r0, r2, r0, lsl #2
   1603c:	cmp	lr, #3
   16040:	ldrls	pc, [pc, lr, lsl #2]
   16044:	b	15adc <__assert_fail@plt+0x46f8>
   16048:	andeq	r6, r1, ip, lsl pc
   1604c:	strdeq	r6, [r1], -ip
   16050:	ldrdeq	r6, [r1], -r0
   16054:	andeq	r6, r1, ip, lsr #29
   16058:	ldr	r3, [sp, #40]	; 0x28
   1605c:	cmp	r5, #0
   16060:	movne	r3, r5
   16064:	cmp	r7, #69	; 0x45
   16068:	str	r3, [sp, #40]	; 0x28
   1606c:	beq	15adc <__assert_fail@plt+0x46f8>
   16070:	uxtb	r1, r1
   16074:	mov	r5, #0
   16078:	b	15c58 <__assert_fail@plt+0x4874>
   1607c:	cmp	r7, #69	; 0x45
   16080:	beq	15d44 <__assert_fail@plt+0x4960>
   16084:	ldr	r3, [sp, #32]
   16088:	mov	r0, #100	; 0x64
   1608c:	ldr	r2, [r3, #20]
   16090:	ldr	r3, [pc, #1272]	; 16590 <__assert_fail@plt+0x51ac>
   16094:	smull	r3, ip, r3, r2
   16098:	asr	r3, r2, #31
   1609c:	rsb	r3, r3, ip, asr #5
   160a0:	mul	r3, r0, r3
   160a4:	subs	r3, r2, r3
   160a8:	bmi	16ddc <__assert_fail@plt+0x59f8>
   160ac:	ldr	r2, [sp, #24]
   160b0:	cmp	r2, #0
   160b4:	beq	167a8 <__assert_fail@plt+0x53c4>
   160b8:	mov	r2, #1
   160bc:	mov	r0, #0
   160c0:	str	r0, [sp, #36]	; 0x24
   160c4:	ldr	r0, [sp, #24]
   160c8:	cmp	r0, #43	; 0x2b
   160cc:	beq	16c34 <__assert_fail@plt+0x5850>
   160d0:	mov	ip, #0
   160d4:	mov	lr, #2
   160d8:	mov	r0, #0
   160dc:	b	15d9c <__assert_fail@plt+0x49b8>
   160e0:	ldr	r0, [sp, #56]	; 0x38
   160e4:	bl	11294 <strlen@plt>
   160e8:	ldr	r2, [sp, #24]
   160ec:	mvn	r3, r6
   160f0:	cmp	r2, #45	; 0x2d
   160f4:	lsr	r3, r3, #31
   160f8:	moveq	r3, #0
   160fc:	cmp	r3, #0
   16100:	moveq	r6, #0
   16104:	ldr	r3, [sp, #40]	; 0x28
   16108:	cmp	r5, #0
   1610c:	movne	r3, #0
   16110:	str	r3, [sp, #40]	; 0x28
   16114:	ldr	r3, [sp, #28]
   16118:	sub	r3, r3, r8
   1611c:	cmp	r0, r6
   16120:	movcs	r9, r0
   16124:	movcc	r9, r6
   16128:	cmp	r9, r3
   1612c:	mov	r7, r0
   16130:	bcs	15704 <__assert_fail@plt+0x4320>
   16134:	cmp	fp, #0
   16138:	beq	15d3c <__assert_fail@plt+0x4958>
   1613c:	cmp	r0, r6
   16140:	bcs	1616c <__assert_fail@plt+0x4d88>
   16144:	ldr	r3, [sp, #24]
   16148:	sub	r6, r6, r0
   1614c:	cmp	r3, #43	; 0x2b
   16150:	cmpne	r3, #48	; 0x30
   16154:	mov	r0, fp
   16158:	mov	r2, r6
   1615c:	moveq	r1, #48	; 0x30
   16160:	movne	r1, #32
   16164:	bl	112e8 <memset@plt>
   16168:	add	fp, fp, r6
   1616c:	cmp	r5, #0
   16170:	bne	16d1c <__assert_fail@plt+0x5938>
   16174:	ldr	r3, [sp, #40]	; 0x28
   16178:	mov	r2, r7
   1617c:	cmp	r3, #0
   16180:	ldr	r1, [sp, #56]	; 0x38
   16184:	mov	r0, fp
   16188:	beq	15f48 <__assert_fail@plt+0x4b64>
   1618c:	b	15d34 <__assert_fail@plt+0x4950>
   16190:	cmp	r7, #69	; 0x45
   16194:	beq	15d44 <__assert_fail@plt+0x4960>
   16198:	cmp	r7, #79	; 0x4f
   1619c:	beq	15adc <__assert_fail@plt+0x46f8>
   161a0:	ldr	r3, [sp, #32]
   161a4:	ldr	r0, [pc, #1012]	; 165a0 <__assert_fail@plt+0x51bc>
   161a8:	ldr	r2, [r3, #20]
   161ac:	cmp	r2, r0
   161b0:	movge	ip, #0
   161b4:	movlt	ip, #1
   161b8:	str	ip, [sp, #36]	; 0x24
   161bc:	ldr	ip, [sp, #24]
   161c0:	add	r3, r2, #1888	; 0x760
   161c4:	cmp	ip, #0
   161c8:	add	r3, r3, #12
   161cc:	bne	16c04 <__assert_fail@plt+0x5820>
   161d0:	ldr	ip, [sp, #1156]	; 0x484
   161d4:	cmp	r2, r0
   161d8:	movlt	r2, #0
   161dc:	movge	r2, #1
   161e0:	cmp	ip, #43	; 0x2b
   161e4:	beq	16e84 <__assert_fail@plt+0x5aa0>
   161e8:	str	ip, [sp, #24]
   161ec:	mov	lr, #4
   161f0:	mov	ip, #0
   161f4:	b	160d8 <__assert_fail@plt+0x4cf4>
   161f8:	cmp	r7, #0
   161fc:	bne	15adc <__assert_fail@plt+0x46f8>
   16200:	ldr	r7, [pc, #884]	; 1657c <__assert_fail@plt+0x5198>
   16204:	mvn	r5, #0
   16208:	ldr	r3, [sp, #1172]	; 0x494
   1620c:	ldr	r2, [sp, #40]	; 0x28
   16210:	str	r3, [sp, #20]
   16214:	ldr	r3, [sp, #1168]	; 0x490
   16218:	str	r2, [sp]
   1621c:	str	r3, [sp, #16]
   16220:	ldr	r3, [sp, #1164]	; 0x48c
   16224:	str	r5, [sp, #8]
   16228:	str	r3, [sp, #12]
   1622c:	ldr	r3, [sp, #24]
   16230:	mov	r2, r7
   16234:	str	r3, [sp, #4]
   16238:	mvn	r1, #0
   1623c:	ldr	r3, [sp, #32]
   16240:	mov	r0, #0
   16244:	bl	155cc <__assert_fail@plt+0x41e8>
   16248:	ldr	r3, [sp, #24]
   1624c:	cmp	r3, #45	; 0x2d
   16250:	moveq	r3, #0
   16254:	bicne	r3, r6, r6, asr #31
   16258:	mov	r9, r0
   1625c:	ldr	r1, [sp, #28]
   16260:	cmp	r3, r9
   16264:	movcs	r2, r3
   16268:	movcc	r2, r9
   1626c:	sub	r1, r1, r8
   16270:	cmp	r2, r1
   16274:	str	r2, [sp, #36]	; 0x24
   16278:	str	r1, [sp, #64]	; 0x40
   1627c:	bcs	15704 <__assert_fail@plt+0x4320>
   16280:	cmp	fp, #0
   16284:	beq	162fc <__assert_fail@plt+0x4f18>
   16288:	cmp	r3, r9
   1628c:	bls	162b8 <__assert_fail@plt+0x4ed4>
   16290:	ldr	r2, [sp, #24]
   16294:	sub	r6, r3, r9
   16298:	cmp	r2, #43	; 0x2b
   1629c:	cmpne	r2, #48	; 0x30
   162a0:	mov	r0, fp
   162a4:	mov	r2, r6
   162a8:	moveq	r1, #48	; 0x30
   162ac:	movne	r1, #32
   162b0:	bl	112e8 <memset@plt>
   162b4:	add	fp, fp, r6
   162b8:	ldr	r3, [sp, #1172]	; 0x494
   162bc:	mov	r0, fp
   162c0:	str	r3, [sp, #20]
   162c4:	ldr	r3, [sp, #1168]	; 0x490
   162c8:	str	r5, [sp, #8]
   162cc:	str	r3, [sp, #16]
   162d0:	ldr	r3, [sp, #1164]	; 0x48c
   162d4:	mov	r2, r7
   162d8:	str	r3, [sp, #12]
   162dc:	ldr	r3, [sp, #24]
   162e0:	ldr	r1, [sp, #64]	; 0x40
   162e4:	str	r3, [sp, #4]
   162e8:	ldr	r3, [sp, #40]	; 0x28
   162ec:	add	fp, fp, r9
   162f0:	str	r3, [sp]
   162f4:	ldr	r3, [sp, #32]
   162f8:	bl	155cc <__assert_fail@plt+0x41e8>
   162fc:	ldr	r3, [sp, #36]	; 0x24
   16300:	add	r8, r8, r3
   16304:	b	156b4 <__assert_fail@plt+0x42d0>
   16308:	cmp	r7, #69	; 0x45
   1630c:	beq	15d44 <__assert_fail@plt+0x4960>
   16310:	ldr	r3, [sp, #32]
   16314:	ldr	r0, [pc, #612]	; 16580 <__assert_fail@plt+0x519c>
   16318:	mvn	ip, #98	; 0x62
   1631c:	ldr	r2, [r3, #20]
   16320:	add	r3, r2, #1888	; 0x760
   16324:	add	r3, r3, #12
   16328:	cmp	r3, r0
   1632c:	ldr	r0, [pc, #620]	; 165a0 <__assert_fail@plt+0x51bc>
   16330:	movhi	r3, #0
   16334:	movls	r3, #1
   16338:	cmp	r2, r0
   1633c:	mla	r3, ip, r3, r2
   16340:	movge	ip, #0
   16344:	movlt	ip, #1
   16348:	str	ip, [sp, #36]	; 0x24
   1634c:	ldr	ip, [sp, #24]
   16350:	cmp	ip, #0
   16354:	ldr	ip, [pc, #564]	; 16590 <__assert_fail@plt+0x51ac>
   16358:	smull	lr, ip, ip, r3
   1635c:	asr	r3, r3, #31
   16360:	rsb	r3, r3, ip, asr #5
   16364:	add	r3, r3, #19
   16368:	bne	16c24 <__assert_fail@plt+0x5840>
   1636c:	ldr	ip, [sp, #1156]	; 0x484
   16370:	cmp	r2, r0
   16374:	movlt	r2, #0
   16378:	movge	r2, #1
   1637c:	cmp	ip, #43	; 0x2b
   16380:	beq	16c34 <__assert_fail@plt+0x5850>
   16384:	str	ip, [sp, #24]
   16388:	mov	lr, #2
   1638c:	mov	ip, #0
   16390:	b	160d8 <__assert_fail@plt+0x4cf4>
   16394:	cmp	r7, #69	; 0x45
   16398:	beq	15adc <__assert_fail@plt+0x46f8>
   1639c:	ldr	r2, [sp, #32]
   163a0:	mov	lr, #2
   163a4:	ldr	r3, [r2, #28]
   163a8:	ldr	r2, [r2, #24]
   163ac:	sub	r3, r3, r2
   163b0:	ldr	r2, [pc, #484]	; 1659c <__assert_fail@plt+0x51b8>
   163b4:	add	r3, r3, #7
   163b8:	smull	r0, r2, r2, r3
   163bc:	add	r2, r2, r3
   163c0:	asr	r3, r3, #31
   163c4:	rsb	r2, r3, r2, asr lr
   163c8:	b	15d7c <__assert_fail@plt+0x4998>
   163cc:	cmp	r7, #69	; 0x45
   163d0:	beq	15adc <__assert_fail@plt+0x46f8>
   163d4:	ldr	r3, [sp, #32]
   163d8:	mov	r0, #0
   163dc:	mov	ip, r0
   163e0:	ldr	r3, [r3, #28]
   163e4:	mov	lr, #3
   163e8:	cmn	r3, #1
   163ec:	movlt	r2, #1
   163f0:	movge	r2, r0
   163f4:	str	r2, [sp, #36]	; 0x24
   163f8:	add	r3, r3, #1
   163fc:	movge	r2, #1
   16400:	movlt	r2, r0
   16404:	b	15d9c <__assert_fail@plt+0x49b8>
   16408:	cmp	r7, #69	; 0x45
   1640c:	beq	15adc <__assert_fail@plt+0x46f8>
   16410:	ldr	r3, [sp, #32]
   16414:	ldr	r2, [r3, #12]
   16418:	ldr	r3, [sp, #24]
   1641c:	mov	lr, #2
   16420:	cmp	r3, #0
   16424:	moveq	r3, #95	; 0x5f
   16428:	streq	r3, [sp, #24]
   1642c:	b	15d7c <__assert_fail@plt+0x4998>
   16430:	ldr	r2, [sp, #24]
   16434:	mvn	r3, r6
   16438:	cmp	r2, #45	; 0x2d
   1643c:	lsr	r3, r3, #31
   16440:	moveq	r3, #0
   16444:	cmp	r3, #0
   16448:	beq	16ea0 <__assert_fail@plt+0x5abc>
   1644c:	cmp	r6, #1
   16450:	movcs	r5, r6
   16454:	movcc	r5, #1
   16458:	ldr	r3, [sp, #28]
   1645c:	sub	r3, r3, r8
   16460:	cmp	r3, r5
   16464:	bls	15704 <__assert_fail@plt+0x4320>
   16468:	cmp	fp, #0
   1646c:	beq	164a8 <__assert_fail@plt+0x50c4>
   16470:	cmp	r6, #1
   16474:	bls	164a0 <__assert_fail@plt+0x50bc>
   16478:	ldr	r3, [sp, #24]
   1647c:	sub	r6, r6, #1
   16480:	cmp	r3, #43	; 0x2b
   16484:	cmpne	r3, #48	; 0x30
   16488:	mov	r0, fp
   1648c:	mov	r2, r6
   16490:	moveq	r1, #48	; 0x30
   16494:	movne	r1, #32
   16498:	bl	112e8 <memset@plt>
   1649c:	add	fp, fp, r6
   164a0:	mov	r3, #10
   164a4:	strb	r3, [fp], #1
   164a8:	add	r8, r8, r5
   164ac:	b	156b4 <__assert_fail@plt+0x42d0>
   164b0:	cmp	r7, #69	; 0x45
   164b4:	beq	15adc <__assert_fail@plt+0x46f8>
   164b8:	ldr	r3, [sp, #32]
   164bc:	mov	r0, #0
   164c0:	mov	ip, r0
   164c4:	ldr	r3, [r3, #16]
   164c8:	mov	lr, #2
   164cc:	cmn	r3, #1
   164d0:	movlt	r2, #1
   164d4:	movge	r2, r0
   164d8:	str	r2, [sp, #36]	; 0x24
   164dc:	add	r3, r3, #1
   164e0:	movge	r2, #1
   164e4:	movlt	r2, r0
   164e8:	b	15d9c <__assert_fail@plt+0x49b8>
   164ec:	cmp	r7, #69	; 0x45
   164f0:	beq	15adc <__assert_fail@plt+0x46f8>
   164f4:	ldr	r2, [sp, #48]	; 0x30
   164f8:	b	16418 <__assert_fail@plt+0x5034>
   164fc:	cmp	r7, #69	; 0x45
   16500:	beq	15adc <__assert_fail@plt+0x46f8>
   16504:	ldr	r3, [sp, #32]
   16508:	ldr	r2, [r3, #8]
   1650c:	b	16418 <__assert_fail@plt+0x5034>
   16510:	ldr	r3, [sp, #32]
   16514:	cmp	r7, #79	; 0x4f
   16518:	ldr	r3, [r3, #16]
   1651c:	beq	15d44 <__assert_fail@plt+0x4960>
   16520:	add	r2, r3, r3, lsl #2
   16524:	mov	ip, #0
   16528:	add	r3, r3, r2, lsl #1
   1652c:	str	ip, [sp, #36]	; 0x24
   16530:	asr	r3, r3, #5
   16534:	add	r3, r3, #1
   16538:	mov	r0, ip
   1653c:	mov	lr, #1
   16540:	b	15dc0 <__assert_fail@plt+0x49dc>
   16544:	mov	r3, #0
   16548:	cmp	r5, #0
   1654c:	moveq	r5, r3
   16550:	moveq	r1, #112	; 0x70
   16554:	movne	r3, #0
   16558:	movne	r1, #112	; 0x70
   1655c:	strne	r3, [sp, #40]	; 0x28
   16560:	b	15c58 <__assert_fail@plt+0x4874>
   16564:	ldrdeq	fp, [r1], -ip
   16568:	strbtvs	r6, [r6], -r7, ror #12
   1656c:	stcleq	12, cr12, [ip], {204}	; 0xcc
   16570:	stclgt	12, cr12, [ip], {205}	; 0xcd
   16574:	stmhi	r8, {r0, r3, r7, fp, pc}
   16578:			; <UNDEFINED> instruction: 0x91a2b3c5
   1657c:	andeq	sp, r1, r0, asr #10
   16580:	andeq	r0, r0, fp, ror #14
   16584:	andeq	sp, r1, ip, asr #10
   16588:	andeq	sp, r1, r8, lsr r5
   1658c:	andeq	sp, r1, r8, asr r5
   16590:	mvnpl	r8, pc, lsl r5
   16594:	andeq	r0, r0, lr, ror #2
   16598:	andeq	r0, r0, sp, ror #2
   1659c:	subls	r2, r9, #-1828716544	; 0x93000000
   165a0:			; <UNDEFINED> instruction: 0xfffff894
   165a4:	andeq	r2, r0, pc, lsl #14
   165a8:	andeq	r2, r0, r0, lsl r7
   165ac:	ldr	lr, [sp, #32]
   165b0:	add	ip, sp, #88	; 0x58
   165b4:	mvn	r5, #0
   165b8:	ldm	lr!, {r0, r1, r2, r3}
   165bc:	stmia	ip!, {r0, r1, r2, r3}
   165c0:	ldm	lr!, {r0, r1, r2, r3}
   165c4:	stmia	ip!, {r0, r1, r2, r3}
   165c8:	ldm	lr, {r0, r1, r2}
   165cc:	str	r5, [sp, #116]	; 0x74
   165d0:	stm	ip, {r0, r1, r2}
   165d4:	add	r1, sp, #88	; 0x58
   165d8:	ldr	r0, [sp, #1168]	; 0x490
   165dc:	bl	19294 <__assert_fail@plt+0x7eb0>
   165e0:	ldr	r3, [sp, #116]	; 0x74
   165e4:	cmp	r3, #0
   165e8:	blt	16e90 <__assert_fail@plt+0x5aac>
   165ec:	add	r9, sp, #72	; 0x48
   165f0:	add	lr, r9, #13
   165f4:	mov	r1, r0
   165f8:	lsr	r3, r0, #31
   165fc:	str	r3, [sp, #36]	; 0x24
   16600:	smull	r2, r3, sl, r1
   16604:	asr	ip, r1, #31
   16608:	rsb	ip, ip, r3, asr #2
   1660c:	cmp	r0, #0
   16610:	add	r3, ip, ip, lsl #2
   16614:	mov	r5, lr
   16618:	sub	r3, r1, r3, lsl #1
   1661c:	add	r2, r3, #48	; 0x30
   16620:	rsblt	r3, r3, #48	; 0x30
   16624:	uxtb	r2, r2
   16628:	uxtblt	r2, r3
   1662c:	cmp	ip, #0
   16630:	mov	r1, ip
   16634:	strb	r2, [lr], #-1
   16638:	bne	16600 <__assert_fail@plt+0x521c>
   1663c:	mov	lr, #1
   16640:	b	15e2c <__assert_fail@plt+0x4a48>
   16644:	cmp	r7, #69	; 0x45
   16648:	beq	15adc <__assert_fail@plt+0x46f8>
   1664c:	ldr	r3, [sp, #32]
   16650:	ldr	r9, [r3, #28]
   16654:	ldr	r2, [r3, #24]
   16658:	ldr	r5, [r3, #20]
   1665c:	str	r2, [sp, #36]	; 0x24
   16660:	sub	r2, r9, r2
   16664:	add	r2, r2, #380	; 0x17c
   16668:	ldr	r3, [pc, #-212]	; 1659c <__assert_fail@plt+0x51b8>
   1666c:	add	r2, r2, #2
   16670:	cmp	r5, #0
   16674:	smull	r0, r3, r3, r2
   16678:	add	r3, r3, r2
   1667c:	asr	r0, r2, #31
   16680:	rsb	r0, r0, r3, asr #2
   16684:	mvnge	r3, #99	; 0x63
   16688:	rsb	r0, r0, r0, lsl #3
   1668c:	sub	r2, r2, r0
   16690:	sub	r2, r9, r2
   16694:	movlt	r3, #300	; 0x12c
   16698:	adds	r2, r2, #3
   1669c:	str	r2, [sp, #64]	; 0x40
   166a0:	add	r3, r3, r5
   166a4:	bmi	16d30 <__assert_fail@plt+0x594c>
   166a8:	tst	r3, #3
   166ac:	ldrne	r3, [pc, #-284]	; 16598 <__assert_fail@plt+0x51b4>
   166b0:	bne	166f8 <__assert_fail@plt+0x5314>
   166b4:	ldr	r2, [pc, #-300]	; 16590 <__assert_fail@plt+0x51ac>
   166b8:	mov	r0, #100	; 0x64
   166bc:	smull	r2, ip, r2, r3
   166c0:	asr	r2, r3, #31
   166c4:	rsb	lr, r2, ip, asr #5
   166c8:	mul	r0, r0, lr
   166cc:	cmp	r3, r0
   166d0:	ldrne	r3, [pc, #-324]	; 16594 <__assert_fail@plt+0x51b0>
   166d4:	bne	166f8 <__assert_fail@plt+0x5314>
   166d8:	rsb	r2, r2, ip, asr #7
   166dc:	mov	ip, #400	; 0x190
   166e0:	ldr	r0, [pc, #-336]	; 16598 <__assert_fail@plt+0x51b4>
   166e4:	mul	r2, ip, r2
   166e8:	sub	ip, ip, #34	; 0x22
   166ec:	cmp	r3, r2
   166f0:	movne	r3, r0
   166f4:	moveq	r3, ip
   166f8:	ldr	r2, [sp, #36]	; 0x24
   166fc:	sub	r3, r9, r3
   16700:	sub	r2, r3, r2
   16704:	ldr	r0, [pc, #-368]	; 1659c <__assert_fail@plt+0x51b8>
   16708:	add	r2, r2, #380	; 0x17c
   1670c:	add	r2, r2, #2
   16710:	smull	r0, ip, r0, r2
   16714:	add	ip, ip, r2
   16718:	asr	r0, r2, #31
   1671c:	rsb	r0, r0, ip, asr #2
   16720:	rsb	r0, r0, r0, lsl #3
   16724:	sub	r2, r2, r0
   16728:	sub	r3, r3, r2
   1672c:	adds	r3, r3, #3
   16730:	movmi	lr, #0
   16734:	ldrmi	r3, [sp, #64]	; 0x40
   16738:	movpl	lr, #1
   1673c:	cmp	r1, #71	; 0x47
   16740:	beq	16e20 <__assert_fail@plt+0x5a3c>
   16744:	cmp	r1, #103	; 0x67
   16748:	bne	16e00 <__assert_fail@plt+0x5a1c>
   1674c:	ldr	r3, [pc, #-452]	; 16590 <__assert_fail@plt+0x51ac>
   16750:	mov	r0, #100	; 0x64
   16754:	smull	r2, r3, r3, r5
   16758:	asr	r2, r5, #31
   1675c:	rsb	r2, r2, r3, asr #5
   16760:	ldr	r3, [pc, #-472]	; 16590 <__assert_fail@plt+0x51ac>
   16764:	mul	r2, r0, r2
   16768:	sub	r2, r5, r2
   1676c:	add	r2, r2, lr
   16770:	smull	r3, ip, r3, r2
   16774:	asr	r3, r2, #31
   16778:	rsb	r3, r3, ip, asr #5
   1677c:	mul	r3, r0, r3
   16780:	subs	r3, r2, r3
   16784:	bpl	160ac <__assert_fail@plt+0x4cc8>
   16788:	ldr	r2, [pc, #-496]	; 165a0 <__assert_fail@plt+0x51bc>
   1678c:	sub	r2, r2, lr
   16790:	cmp	r5, r2
   16794:	ldr	r2, [sp, #24]
   16798:	bge	16df0 <__assert_fail@plt+0x5a0c>
   1679c:	cmp	r2, #0
   167a0:	rsb	r3, r3, #0
   167a4:	bne	160b8 <__assert_fail@plt+0x4cd4>
   167a8:	ldr	r2, [sp, #1156]	; 0x484
   167ac:	cmp	r2, #43	; 0x2b
   167b0:	beq	16dc4 <__assert_fail@plt+0x59e0>
   167b4:	mov	ip, #0
   167b8:	str	r2, [sp, #24]
   167bc:	str	ip, [sp, #36]	; 0x24
   167c0:	mov	r2, #1
   167c4:	mov	lr, #2
   167c8:	b	160d8 <__assert_fail@plt+0x4cf4>
   167cc:	cmp	r7, #0
   167d0:	bne	15adc <__assert_fail@plt+0x46f8>
   167d4:	ldr	r3, [sp, #24]
   167d8:	clz	r3, r3
   167dc:	lsr	r3, r3, #5
   167e0:	ands	r3, r3, r6, lsr #31
   167e4:	bne	16ca4 <__assert_fail@plt+0x58c0>
   167e8:	sub	r5, r6, #6
   167ec:	ldr	r7, [pc, #-616]	; 1658c <__assert_fail@plt+0x51a8>
   167f0:	bic	r5, r5, r5, asr #31
   167f4:	b	16208 <__assert_fail@plt+0x4e24>
   167f8:	cmp	r7, #69	; 0x45
   167fc:	beq	15adc <__assert_fail@plt+0x46f8>
   16800:	ldr	r2, [sp, #48]	; 0x30
   16804:	mov	lr, #2
   16808:	b	15d7c <__assert_fail@plt+0x4998>
   1680c:	cmp	r7, #69	; 0x45
   16810:	beq	15adc <__assert_fail@plt+0x46f8>
   16814:	ldr	r3, [sp, #32]
   16818:	mov	lr, #1
   1681c:	ldr	r2, [r3, #24]
   16820:	b	15d7c <__assert_fail@plt+0x4998>
   16824:	ldr	r3, [sp, #32]
   16828:	ldr	r2, [pc, #-660]	; 1659c <__assert_fail@plt+0x51b8>
   1682c:	mov	lr, #1
   16830:	ldr	r3, [r3, #24]
   16834:	add	r3, r3, #6
   16838:	smull	r0, r2, r2, r3
   1683c:	add	r0, r2, r3
   16840:	asr	r2, r3, #31
   16844:	rsb	r2, r2, r0, asr #2
   16848:	rsb	r2, r2, r2, lsl #3
   1684c:	sub	r3, r3, r2
   16850:	add	r2, r3, lr
   16854:	b	15d7c <__assert_fail@plt+0x4998>
   16858:	ldr	r3, [sp, #24]
   1685c:	subs	r3, r3, #45	; 0x2d
   16860:	movne	r3, #1
   16864:	cmp	r6, #0
   16868:	movlt	r3, #0
   1686c:	cmp	r3, #0
   16870:	beq	16d10 <__assert_fail@plt+0x592c>
   16874:	cmp	r6, #1
   16878:	movcs	r5, r6
   1687c:	movcc	r5, #1
   16880:	ldr	r3, [sp, #28]
   16884:	sub	r3, r3, r8
   16888:	cmp	r3, r5
   1688c:	bls	15704 <__assert_fail@plt+0x4320>
   16890:	cmp	fp, #0
   16894:	beq	164a8 <__assert_fail@plt+0x50c4>
   16898:	cmp	r6, #1
   1689c:	bls	168c8 <__assert_fail@plt+0x54e4>
   168a0:	ldr	r3, [sp, #24]
   168a4:	sub	r6, r6, #1
   168a8:	cmp	r3, #43	; 0x2b
   168ac:	cmpne	r3, #48	; 0x30
   168b0:	mov	r0, fp
   168b4:	mov	r2, r6
   168b8:	moveq	r1, #48	; 0x30
   168bc:	movne	r1, #32
   168c0:	bl	112e8 <memset@plt>
   168c4:	add	fp, fp, r6
   168c8:	mov	r3, #9
   168cc:	strb	r3, [fp], #1
   168d0:	b	164a8 <__assert_fail@plt+0x50c4>
   168d4:	cmp	r7, #69	; 0x45
   168d8:	beq	15adc <__assert_fail@plt+0x46f8>
   168dc:	ldr	r3, [sp, #32]
   168e0:	mov	lr, #2
   168e4:	ldr	r2, [r3, #4]
   168e8:	b	15d7c <__assert_fail@plt+0x4998>
   168ec:	sub	r3, r4, #1
   168f0:	cmp	r3, r9
   168f4:	movne	r4, r3
   168f8:	bne	15adc <__assert_fail@plt+0x46f8>
   168fc:	ldr	r2, [sp, #24]
   16900:	mvn	r3, r6
   16904:	cmp	r2, #45	; 0x2d
   16908:	lsr	r3, r3, #31
   1690c:	moveq	r3, #0
   16910:	cmp	r3, #0
   16914:	beq	16c60 <__assert_fail@plt+0x587c>
   16918:	cmp	r6, #1
   1691c:	movcs	r5, r6
   16920:	movcc	r5, #1
   16924:	ldr	r3, [sp, #28]
   16928:	sub	r3, r3, r8
   1692c:	cmp	r3, r5
   16930:	bls	15704 <__assert_fail@plt+0x4320>
   16934:	cmp	fp, #0
   16938:	beq	164a8 <__assert_fail@plt+0x50c4>
   1693c:	cmp	r6, #1
   16940:	bls	16970 <__assert_fail@plt+0x558c>
   16944:	ldr	r3, [sp, #24]
   16948:	sub	r6, r6, #1
   1694c:	cmp	r3, #43	; 0x2b
   16950:	cmpne	r3, #48	; 0x30
   16954:	mov	r2, r6
   16958:	bne	16c6c <__assert_fail@plt+0x5888>
   1695c:	mov	r1, #48	; 0x30
   16960:	mov	r0, fp
   16964:	bl	112e8 <memset@plt>
   16968:	ldrb	r1, [r4]
   1696c:	add	fp, fp, r6
   16970:	strb	r1, [fp], #1
   16974:	b	164a8 <__assert_fail@plt+0x50c4>
   16978:	ldr	r7, [pc, #-1020]	; 16584 <__assert_fail@plt+0x51a0>
   1697c:	mvn	r5, #0
   16980:	b	16208 <__assert_fail@plt+0x4e24>
   16984:	cmp	r7, #69	; 0x45
   16988:	beq	15adc <__assert_fail@plt+0x46f8>
   1698c:	ldr	r3, [sp, #32]
   16990:	mov	lr, #2
   16994:	ldr	r2, [r3]
   16998:	b	15d7c <__assert_fail@plt+0x4998>
   1699c:	mvn	r5, #0
   169a0:	ldr	r7, [pc, #-1056]	; 16588 <__assert_fail@plt+0x51a4>
   169a4:	b	16208 <__assert_fail@plt+0x4e24>
   169a8:	mov	r3, #1
   169ac:	b	16548 <__assert_fail@plt+0x5164>
   169b0:	cmp	r7, #69	; 0x45
   169b4:	beq	15adc <__assert_fail@plt+0x46f8>
   169b8:	cmp	r6, #0
   169bc:	movle	r6, #9
   169c0:	ldr	r3, [sp, #1172]	; 0x494
   169c4:	mov	r7, #9
   169c8:	b	169dc <__assert_fail@plt+0x55f8>
   169cc:	asr	r2, r3, #31
   169d0:	smull	r1, r3, sl, r3
   169d4:	sub	r7, r7, #1
   169d8:	rsb	r3, r2, r3, asr #2
   169dc:	cmp	r7, r6
   169e0:	bgt	169cc <__assert_fail@plt+0x55e8>
   169e4:	smull	r2, r1, sl, r3
   169e8:	asr	r2, r3, #31
   169ec:	rsb	r1, r2, r1, asr #2
   169f0:	cmp	r7, #1
   169f4:	add	r1, r1, r1, lsl #2
   169f8:	ble	16cfc <__assert_fail@plt+0x5918>
   169fc:	cmp	r3, r1, lsl #1
   16a00:	beq	169d0 <__assert_fail@plt+0x55ec>
   16a04:	add	r0, sp, #72	; 0x48
   16a08:	add	r1, r0, r7
   16a0c:	b	16a14 <__assert_fail@plt+0x5630>
   16a10:	asr	r2, r2, #31
   16a14:	smull	lr, ip, sl, r3
   16a18:	rsb	r2, r2, ip, asr #2
   16a1c:	add	ip, r2, r2, lsl #2
   16a20:	sub	r3, r3, ip, lsl #1
   16a24:	add	r3, r3, #48	; 0x30
   16a28:	strb	r3, [r1, #-1]!
   16a2c:	cmp	r1, r0
   16a30:	mov	r3, r2
   16a34:	bne	16a10 <__assert_fail@plt+0x562c>
   16a38:	ldr	r2, [sp, #24]
   16a3c:	subs	r3, r2, #0
   16a40:	moveq	r3, #48	; 0x30
   16a44:	str	r3, [sp, #24]
   16a48:	ldr	r3, [sp, #28]
   16a4c:	cmp	r7, #0
   16a50:	movcs	r5, r7
   16a54:	movcc	r5, #0
   16a58:	sub	r3, r3, r8
   16a5c:	cmp	r5, r3
   16a60:	bcs	15704 <__assert_fail@plt+0x4320>
   16a64:	cmp	fp, #0
   16a68:	beq	16a8c <__assert_fail@plt+0x56a8>
   16a6c:	ldr	r3, [sp, #40]	; 0x28
   16a70:	mov	r2, r7
   16a74:	cmp	r3, #0
   16a78:	add	r1, sp, #72	; 0x48
   16a7c:	mov	r0, fp
   16a80:	beq	16d08 <__assert_fail@plt+0x5924>
   16a84:	bl	1558c <__assert_fail@plt+0x41a8>
   16a88:	add	fp, fp, r7
   16a8c:	ldr	r3, [sp, #24]
   16a90:	add	r8, r5, r8
   16a94:	cmp	r3, #45	; 0x2d
   16a98:	subne	r5, r6, r7
   16a9c:	ldr	r3, [sp, #28]
   16aa0:	bicne	r5, r5, r5, asr #31
   16aa4:	moveq	r5, #0
   16aa8:	sub	r3, r3, r8
   16aac:	cmp	r5, r3
   16ab0:	bcs	15704 <__assert_fail@plt+0x4320>
   16ab4:	cmp	fp, #0
   16ab8:	beq	164a8 <__assert_fail@plt+0x50c4>
   16abc:	cmp	r5, #0
   16ac0:	beq	164a8 <__assert_fail@plt+0x50c4>
   16ac4:	ldr	r3, [sp, #24]
   16ac8:	mov	r0, fp
   16acc:	cmp	r3, #43	; 0x2b
   16ad0:	cmpne	r3, #48	; 0x30
   16ad4:	mov	r2, r5
   16ad8:	moveq	r1, #48	; 0x30
   16adc:	movne	r1, #32
   16ae0:	bl	112e8 <memset@plt>
   16ae4:	add	fp, fp, r5
   16ae8:	b	164a8 <__assert_fail@plt+0x50c4>
   16aec:	ldrb	r3, [r4, #1]
   16af0:	add	r0, r4, #1
   16af4:	cmp	r3, #58	; 0x3a
   16af8:	movne	lr, #1
   16afc:	beq	16c84 <__assert_fail@plt+0x58a0>
   16b00:	cmp	r3, #122	; 0x7a
   16b04:	moveq	r4, r0
   16b08:	bne	15adc <__assert_fail@plt+0x46f8>
   16b0c:	b	15fa0 <__assert_fail@plt+0x4bbc>
   16b10:	cmp	r7, #69	; 0x45
   16b14:	beq	15adc <__assert_fail@plt+0x46f8>
   16b18:	ldr	r3, [sp, #32]
   16b1c:	ldr	r0, [pc, #-1416]	; 1659c <__assert_fail@plt+0x51b8>
   16b20:	mov	lr, #2
   16b24:	ldr	r2, [r3, #24]
   16b28:	ldr	r3, [r3, #28]
   16b2c:	add	r2, r2, #6
   16b30:	smull	ip, r0, r0, r2
   16b34:	add	ip, r0, r2
   16b38:	asr	r0, r2, #31
   16b3c:	rsb	r0, r0, ip, asr #2
   16b40:	rsb	r0, r0, r0, lsl #3
   16b44:	sub	r2, r2, r0
   16b48:	b	163ac <__assert_fail@plt+0x4fc8>
   16b4c:	cmp	r7, #69	; 0x45
   16b50:	beq	15adc <__assert_fail@plt+0x46f8>
   16b54:	ldr	r3, [sp, #32]
   16b58:	mov	lr, #2
   16b5c:	ldr	r2, [r3, #8]
   16b60:	b	15d7c <__assert_fail@plt+0x4998>
   16b64:	mov	r3, #45	; 0x2d
   16b68:	str	r3, [sp, #36]	; 0x24
   16b6c:	b	15e68 <__assert_fail@plt+0x4a84>
   16b70:	mov	r3, #1
   16b74:	str	r3, [sp, #64]	; 0x40
   16b78:	mov	r3, #48	; 0x30
   16b7c:	str	r3, [sp, #24]
   16b80:	b	15e44 <__assert_fail@plt+0x4a60>
   16b84:	add	r1, sp, #89	; 0x59
   16b88:	mov	r2, r7
   16b8c:	mov	r0, fp
   16b90:	bl	1554c <__assert_fail@plt+0x4168>
   16b94:	b	15d38 <__assert_fail@plt+0x4954>
   16b98:	add	r7, r9, #14
   16b9c:	sub	r7, r7, r5
   16ba0:	ldr	r2, [sp, #64]	; 0x40
   16ba4:	sub	r3, r6, r7
   16ba8:	cmp	r3, #0
   16bac:	movle	r2, #0
   16bb0:	andgt	r2, r2, #1
   16bb4:	cmp	r2, #0
   16bb8:	bne	15edc <__assert_fail@plt+0x4af8>
   16bbc:	ldr	r3, [sp, #64]	; 0x40
   16bc0:	cmp	r3, #0
   16bc4:	moveq	r6, r3
   16bc8:	b	15edc <__assert_fail@plt+0x4af8>
   16bcc:	cmp	fp, #0
   16bd0:	beq	156ec <__assert_fail@plt+0x4308>
   16bd4:	mov	r0, fp
   16bd8:	mov	r2, r7
   16bdc:	mov	r1, #32
   16be0:	str	r3, [sp, #68]	; 0x44
   16be4:	add	r8, r8, r7
   16be8:	bl	112e8 <memset@plt>
   16bec:	sub	r6, r6, r7
   16bf0:	add	fp, fp, r7
   16bf4:	ldr	r3, [sp, #68]	; 0x44
   16bf8:	b	15e9c <__assert_fail@plt+0x4ab8>
   16bfc:	mov	r8, r3
   16c00:	b	156c8 <__assert_fail@plt+0x42e4>
   16c04:	ldr	r2, [sp, #24]
   16c08:	cmp	r2, #43	; 0x2b
   16c0c:	ldr	r2, [sp, #36]	; 0x24
   16c10:	eor	r2, r2, #1
   16c14:	beq	16e84 <__assert_fail@plt+0x5aa0>
   16c18:	mov	ip, #0
   16c1c:	mov	lr, #4
   16c20:	b	160d8 <__assert_fail@plt+0x4cf4>
   16c24:	cmp	r2, r0
   16c28:	movlt	r2, #0
   16c2c:	movge	r2, #1
   16c30:	b	160c4 <__assert_fail@plt+0x4ce0>
   16c34:	mov	lr, #2
   16c38:	mov	r0, #99	; 0x63
   16c3c:	cmp	r0, r3
   16c40:	movcs	r0, #0
   16c44:	movcc	r0, #1
   16c48:	cmp	r6, lr
   16c4c:	movle	ip, r0
   16c50:	orrgt	ip, r0, #1
   16c54:	mov	r0, #43	; 0x2b
   16c58:	str	r0, [sp, #24]
   16c5c:	b	160d8 <__assert_fail@plt+0x4cf4>
   16c60:	mov	r6, r3
   16c64:	mov	r5, #1
   16c68:	b	16924 <__assert_fail@plt+0x5540>
   16c6c:	mov	r1, #32
   16c70:	mov	r0, fp
   16c74:	bl	112e8 <memset@plt>
   16c78:	add	fp, fp, r6
   16c7c:	ldrb	r1, [r4]
   16c80:	b	16970 <__assert_fail@plt+0x558c>
   16c84:	add	r2, r4, #2
   16c88:	mov	lr, #1
   16c8c:	mov	r0, r2
   16c90:	ldrb	r3, [r2], #1
   16c94:	add	lr, lr, #1
   16c98:	cmp	r3, #58	; 0x3a
   16c9c:	bne	16b00 <__assert_fail@plt+0x571c>
   16ca0:	b	16c8c <__assert_fail@plt+0x58a8>
   16ca4:	ldr	r3, [sp, #1172]	; 0x494
   16ca8:	mov	ip, #43	; 0x2b
   16cac:	str	r3, [sp, #20]
   16cb0:	ldr	r3, [sp, #1168]	; 0x490
   16cb4:	mov	r5, #4
   16cb8:	str	r3, [sp, #16]
   16cbc:	ldr	r3, [sp, #1164]	; 0x48c
   16cc0:	mov	r0, r7
   16cc4:	str	r3, [sp, #12]
   16cc8:	ldr	r3, [sp, #40]	; 0x28
   16ccc:	str	r5, [sp, #8]
   16cd0:	str	r3, [sp]
   16cd4:	str	ip, [sp, #4]
   16cd8:	ldr	r3, [sp, #32]
   16cdc:	ldr	r2, [pc, #-1880]	; 1658c <__assert_fail@plt+0x51a8>
   16ce0:	mvn	r1, #0
   16ce4:	str	ip, [sp, #24]
   16ce8:	bl	155cc <__assert_fail@plt+0x41e8>
   16cec:	mov	r3, r7
   16cf0:	ldr	r7, [pc, #-1900]	; 1658c <__assert_fail@plt+0x51a8>
   16cf4:	mov	r9, r0
   16cf8:	b	1625c <__assert_fail@plt+0x4e78>
   16cfc:	cmp	r7, #0
   16d00:	bgt	16a04 <__assert_fail@plt+0x5620>
   16d04:	b	16a38 <__assert_fail@plt+0x5654>
   16d08:	bl	1112c <memcpy@plt>
   16d0c:	b	16a88 <__assert_fail@plt+0x56a4>
   16d10:	mov	r6, r3
   16d14:	mov	r5, #1
   16d18:	b	16880 <__assert_fail@plt+0x549c>
   16d1c:	mov	r2, r7
   16d20:	ldr	r1, [sp, #56]	; 0x38
   16d24:	mov	r0, fp
   16d28:	bl	1554c <__assert_fail@plt+0x4168>
   16d2c:	b	15d38 <__assert_fail@plt+0x4954>
   16d30:	sub	r3, r3, #1
   16d34:	tst	r3, #3
   16d38:	ldrne	r3, [pc, #-1960]	; 16598 <__assert_fail@plt+0x51b4>
   16d3c:	bne	16d84 <__assert_fail@plt+0x59a0>
   16d40:	ldr	r2, [pc, #-1976]	; 16590 <__assert_fail@plt+0x51ac>
   16d44:	mov	r0, #100	; 0x64
   16d48:	smull	r2, ip, r2, r3
   16d4c:	asr	r2, r3, #31
   16d50:	rsb	lr, r2, ip, asr #5
   16d54:	mul	r0, r0, lr
   16d58:	cmp	r3, r0
   16d5c:	ldrne	r3, [pc, #-2000]	; 16594 <__assert_fail@plt+0x51b0>
   16d60:	bne	16d84 <__assert_fail@plt+0x59a0>
   16d64:	rsb	r2, r2, ip, asr #7
   16d68:	mov	ip, #400	; 0x190
   16d6c:	ldr	r0, [pc, #-2012]	; 16598 <__assert_fail@plt+0x51b4>
   16d70:	mul	r2, ip, r2
   16d74:	sub	ip, ip, #34	; 0x22
   16d78:	cmp	r3, r2
   16d7c:	movne	r3, r0
   16d80:	moveq	r3, ip
   16d84:	ldr	r2, [sp, #36]	; 0x24
   16d88:	add	r3, r9, r3
   16d8c:	sub	r2, r3, r2
   16d90:	ldr	r0, [pc, #-2044]	; 1659c <__assert_fail@plt+0x51b8>
   16d94:	add	r2, r2, #380	; 0x17c
   16d98:	add	r2, r2, #2
   16d9c:	mvn	lr, #0
   16da0:	smull	r0, ip, r0, r2
   16da4:	add	ip, ip, r2
   16da8:	asr	r0, r2, #31
   16dac:	rsb	r0, r0, ip, asr #2
   16db0:	rsb	r0, r0, r0, lsl #3
   16db4:	sub	r2, r2, r0
   16db8:	sub	r3, r3, r2
   16dbc:	add	r3, r3, #3
   16dc0:	b	1673c <__assert_fail@plt+0x5358>
   16dc4:	ldr	r2, [sp, #24]
   16dc8:	mov	lr, #2
   16dcc:	str	r2, [sp, #36]	; 0x24
   16dd0:	mov	r0, #99	; 0x63
   16dd4:	mov	r2, #1
   16dd8:	b	16c3c <__assert_fail@plt+0x5858>
   16ddc:	sub	r0, r0, #2000	; 0x7d0
   16de0:	cmp	r2, r0
   16de4:	rsblt	r3, r3, #0
   16de8:	addge	r3, r3, #100	; 0x64
   16dec:	b	160ac <__assert_fail@plt+0x4cc8>
   16df0:	cmp	r2, #0
   16df4:	add	r3, r3, #100	; 0x64
   16df8:	beq	167a8 <__assert_fail@plt+0x53c4>
   16dfc:	b	160b8 <__assert_fail@plt+0x4cd4>
   16e00:	ldr	r2, [pc, #-2156]	; 1659c <__assert_fail@plt+0x51b8>
   16e04:	mov	lr, #2
   16e08:	smull	r0, r2, r2, r3
   16e0c:	add	r0, r2, r3
   16e10:	asr	r2, r3, #31
   16e14:	rsb	r2, r2, r0, asr #2
   16e18:	add	r2, r2, #1
   16e1c:	b	15d7c <__assert_fail@plt+0x4998>
   16e20:	ldr	r2, [pc, #-2184]	; 165a0 <__assert_fail@plt+0x51bc>
   16e24:	add	r3, r5, #1888	; 0x760
   16e28:	sub	r2, r2, lr
   16e2c:	cmp	r5, r2
   16e30:	movge	r0, #0
   16e34:	movlt	r0, #1
   16e38:	str	r0, [sp, #36]	; 0x24
   16e3c:	ldr	r0, [sp, #24]
   16e40:	add	r3, r3, #12
   16e44:	cmp	r0, #0
   16e48:	add	r3, r3, lr
   16e4c:	bne	16c04 <__assert_fail@plt+0x5820>
   16e50:	ldr	r0, [sp, #1156]	; 0x484
   16e54:	cmp	r5, r2
   16e58:	movlt	r2, #0
   16e5c:	movge	r2, #1
   16e60:	cmp	r0, #43	; 0x2b
   16e64:	beq	16e84 <__assert_fail@plt+0x5aa0>
   16e68:	str	r0, [sp, #24]
   16e6c:	mov	ip, #0
   16e70:	mov	lr, #4
   16e74:	b	160d8 <__assert_fail@plt+0x4cf4>
   16e78:	mov	r3, #1
   16e7c:	str	r3, [sp, #36]	; 0x24
   16e80:	b	15fe4 <__assert_fail@plt+0x4c00>
   16e84:	mov	lr, #4
   16e88:	ldr	r0, [pc, #-2284]	; 165a4 <__assert_fail@plt+0x51c0>
   16e8c:	b	16c3c <__assert_fail@plt+0x5858>
   16e90:	ldr	r2, [sp, #44]	; 0x2c
   16e94:	mov	r3, #75	; 0x4b
   16e98:	str	r3, [r2]
   16e9c:	b	15710 <__assert_fail@plt+0x432c>
   16ea0:	mov	r6, r3
   16ea4:	mov	r5, #1
   16ea8:	b	16458 <__assert_fail@plt+0x5074>
   16eac:	cmp	ip, #0
   16eb0:	bne	16ed0 <__assert_fail@plt+0x5aec>
   16eb4:	cmp	r0, #0
   16eb8:	bne	16efc <__assert_fail@plt+0x5b18>
   16ebc:	ldr	r2, [sp, #36]	; 0x24
   16ec0:	mov	ip, #1
   16ec4:	eor	r2, r2, #1
   16ec8:	mov	lr, #3
   16ecc:	b	15d9c <__assert_fail@plt+0x49b8>
   16ed0:	mov	r2, #100	; 0x64
   16ed4:	ldr	lr, [pc, #-2356]	; 165a8 <__assert_fail@plt+0x51c4>
   16ed8:	mul	r0, r2, r0
   16edc:	ldr	r2, [sp, #36]	; 0x24
   16ee0:	mla	r3, lr, r3, r0
   16ee4:	eor	r2, r2, #1
   16ee8:	add	r3, r3, ip
   16eec:	mov	r0, #20
   16ef0:	mov	ip, #1
   16ef4:	mov	lr, #9
   16ef8:	b	15d9c <__assert_fail@plt+0x49b8>
   16efc:	mov	ip, #100	; 0x64
   16f00:	ldr	r2, [sp, #36]	; 0x24
   16f04:	mla	r3, ip, r3, r0
   16f08:	eor	r2, r2, #1
   16f0c:	mov	ip, #1
   16f10:	mov	r0, #4
   16f14:	mov	lr, #6
   16f18:	b	15d9c <__assert_fail@plt+0x49b8>
   16f1c:	mov	ip, #100	; 0x64
   16f20:	ldr	r2, [sp, #36]	; 0x24
   16f24:	mla	r3, ip, r3, r0
   16f28:	eor	r2, r2, #1
   16f2c:	mov	ip, #1
   16f30:	mov	r0, #0
   16f34:	mov	lr, #5
   16f38:	b	15d9c <__assert_fail@plt+0x49b8>
   16f3c:	push	{r4, r5, lr}
   16f40:	sub	sp, sp, #36	; 0x24
   16f44:	add	lr, sp, #32
   16f48:	mov	ip, #0
   16f4c:	ldr	r5, [sp, #48]	; 0x30
   16f50:	ldr	r4, [sp, #52]	; 0x34
   16f54:	strb	ip, [lr, #-1]!
   16f58:	str	lr, [sp, #12]
   16f5c:	mvn	lr, #0
   16f60:	str	ip, [sp, #4]
   16f64:	str	ip, [sp]
   16f68:	str	r5, [sp, #16]
   16f6c:	str	r4, [sp, #20]
   16f70:	str	lr, [sp, #8]
   16f74:	bl	155cc <__assert_fail@plt+0x41e8>
   16f78:	add	sp, sp, #36	; 0x24
   16f7c:	pop	{r4, r5, pc}
   16f80:	push	{r4, r5, r6, lr}
   16f84:	subs	r4, r0, #0
   16f88:	beq	16ffc <__assert_fail@plt+0x5c18>
   16f8c:	mov	r1, #47	; 0x2f
   16f90:	bl	11360 <strrchr@plt>
   16f94:	subs	r5, r0, #0
   16f98:	beq	16fe8 <__assert_fail@plt+0x5c04>
   16f9c:	add	r6, r5, #1
   16fa0:	sub	r3, r6, r4
   16fa4:	cmp	r3, #6
   16fa8:	ble	16fe8 <__assert_fail@plt+0x5c04>
   16fac:	mov	r2, #7
   16fb0:	ldr	r1, [pc, #96]	; 17018 <__assert_fail@plt+0x5c34>
   16fb4:	sub	r0, r5, #6
   16fb8:	bl	113c0 <strncmp@plt>
   16fbc:	cmp	r0, #0
   16fc0:	bne	16fe8 <__assert_fail@plt+0x5c04>
   16fc4:	mov	r2, #3
   16fc8:	ldr	r1, [pc, #76]	; 1701c <__assert_fail@plt+0x5c38>
   16fcc:	mov	r0, r6
   16fd0:	bl	113c0 <strncmp@plt>
   16fd4:	cmp	r0, #0
   16fd8:	movne	r4, r6
   16fdc:	ldreq	r3, [pc, #60]	; 17020 <__assert_fail@plt+0x5c3c>
   16fe0:	addeq	r4, r5, #4
   16fe4:	streq	r4, [r3]
   16fe8:	ldr	r2, [pc, #52]	; 17024 <__assert_fail@plt+0x5c40>
   16fec:	ldr	r3, [pc, #52]	; 17028 <__assert_fail@plt+0x5c44>
   16ff0:	str	r4, [r2]
   16ff4:	str	r4, [r3]
   16ff8:	pop	{r4, r5, r6, pc}
   16ffc:	ldr	r3, [pc, #40]	; 1702c <__assert_fail@plt+0x5c48>
   17000:	mov	r2, #55	; 0x37
   17004:	mov	r1, #1
   17008:	ldr	r3, [r3]
   1700c:	ldr	r0, [pc, #28]	; 17030 <__assert_fail@plt+0x5c4c>
   17010:	bl	111c8 <fwrite@plt>
   17014:	bl	113cc <abort@plt>
   17018:	muleq	r1, ip, r5
   1701c:	andeq	sp, r1, r4, lsr #11
   17020:	andeq	lr, r2, r8, asr #3
   17024:			; <UNDEFINED> instruction: 0x0002e2b4
   17028:	andeq	lr, r2, ip, asr #3
   1702c:	ldrdeq	lr, [r2], -r8
   17030:	andeq	sp, r1, r4, ror #10
   17034:	push	{r4, r5, r6, lr}
   17038:	mov	r2, #48	; 0x30
   1703c:	mov	r4, r1
   17040:	mov	r1, #0
   17044:	mov	r5, r0
   17048:	bl	112e8 <memset@plt>
   1704c:	cmp	r4, #10
   17050:	beq	17060 <__assert_fail@plt+0x5c7c>
   17054:	str	r4, [r5]
   17058:	mov	r0, r5
   1705c:	pop	{r4, r5, r6, pc}
   17060:	bl	113cc <abort@plt>
   17064:	push	{r4, r5, r6, lr}
   17068:	mov	r4, r0
   1706c:	mov	r5, r1
   17070:	bl	1b558 <__assert_fail@plt+0xa174>
   17074:	ldrb	r3, [r0]
   17078:	bic	r3, r3, #32
   1707c:	cmp	r3, #85	; 0x55
   17080:	bne	170e0 <__assert_fail@plt+0x5cfc>
   17084:	ldrb	r3, [r0, #1]
   17088:	bic	r3, r3, #32
   1708c:	cmp	r3, #84	; 0x54
   17090:	bne	1711c <__assert_fail@plt+0x5d38>
   17094:	ldrb	r3, [r0, #2]
   17098:	bic	r3, r3, #32
   1709c:	cmp	r3, #70	; 0x46
   170a0:	bne	1711c <__assert_fail@plt+0x5d38>
   170a4:	ldrb	r3, [r0, #3]
   170a8:	cmp	r3, #45	; 0x2d
   170ac:	bne	1711c <__assert_fail@plt+0x5d38>
   170b0:	ldrb	r3, [r0, #4]
   170b4:	cmp	r3, #56	; 0x38
   170b8:	bne	1711c <__assert_fail@plt+0x5d38>
   170bc:	ldrb	r3, [r0, #5]
   170c0:	cmp	r3, #0
   170c4:	bne	1711c <__assert_fail@plt+0x5d38>
   170c8:	ldrb	r2, [r4]
   170cc:	ldr	r3, [pc, #152]	; 1716c <__assert_fail@plt+0x5d88>
   170d0:	ldr	r0, [pc, #152]	; 17170 <__assert_fail@plt+0x5d8c>
   170d4:	cmp	r2, #96	; 0x60
   170d8:	movne	r0, r3
   170dc:	pop	{r4, r5, r6, pc}
   170e0:	cmp	r3, #71	; 0x47
   170e4:	bne	1711c <__assert_fail@plt+0x5d38>
   170e8:	ldrb	r3, [r0, #1]
   170ec:	bic	r3, r3, #32
   170f0:	cmp	r3, #66	; 0x42
   170f4:	bne	1711c <__assert_fail@plt+0x5d38>
   170f8:	ldrb	r3, [r0, #2]
   170fc:	cmp	r3, #49	; 0x31
   17100:	bne	1711c <__assert_fail@plt+0x5d38>
   17104:	ldrb	r3, [r0, #3]
   17108:	cmp	r3, #56	; 0x38
   1710c:	bne	1711c <__assert_fail@plt+0x5d38>
   17110:	ldrb	r3, [r0, #4]
   17114:	cmp	r3, #48	; 0x30
   17118:	beq	17130 <__assert_fail@plt+0x5d4c>
   1711c:	ldr	r3, [pc, #80]	; 17174 <__assert_fail@plt+0x5d90>
   17120:	cmp	r5, #9
   17124:	ldr	r0, [pc, #76]	; 17178 <__assert_fail@plt+0x5d94>
   17128:	movne	r0, r3
   1712c:	pop	{r4, r5, r6, pc}
   17130:	ldrb	r3, [r0, #5]
   17134:	cmp	r3, #51	; 0x33
   17138:	bne	1711c <__assert_fail@plt+0x5d38>
   1713c:	ldrb	r3, [r0, #6]
   17140:	cmp	r3, #48	; 0x30
   17144:	bne	1711c <__assert_fail@plt+0x5d38>
   17148:	ldrb	r3, [r0, #7]
   1714c:	cmp	r3, #0
   17150:	bne	1711c <__assert_fail@plt+0x5d38>
   17154:	ldrb	r2, [r4]
   17158:	ldr	r3, [pc, #28]	; 1717c <__assert_fail@plt+0x5d98>
   1715c:	ldr	r0, [pc, #28]	; 17180 <__assert_fail@plt+0x5d9c>
   17160:	cmp	r2, #96	; 0x60
   17164:	movne	r0, r3
   17168:	pop	{r4, r5, r6, pc}
   1716c:	andeq	sp, r1, r0, lsl #12
   17170:	strdeq	sp, [r1], -ip
   17174:	andeq	sp, r1, r0, lsl r6
   17178:	andeq	sp, r1, ip, lsl #12
   1717c:	andeq	sp, r1, r8, lsl #12
   17180:	andeq	sp, r1, r4, lsl #12
   17184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17188:	sub	sp, sp, #116	; 0x74
   1718c:	mov	sl, r0
   17190:	str	r3, [sp, #24]
   17194:	mov	r3, #1
   17198:	mov	r8, r1
   1719c:	str	r2, [sp, #56]	; 0x38
   171a0:	str	r3, [sp, #36]	; 0x24
   171a4:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   171a8:	ldr	r3, [sp, #156]	; 0x9c
   171ac:	mov	fp, r8
   171b0:	mov	r2, #0
   171b4:	lsr	r3, r3, #1
   171b8:	and	r3, r3, #1
   171bc:	str	r2, [sp, #68]	; 0x44
   171c0:	str	r3, [sp, #28]
   171c4:	str	r2, [sp, #40]	; 0x28
   171c8:	str	r2, [sp, #44]	; 0x2c
   171cc:	str	r2, [sp, #52]	; 0x34
   171d0:	str	r2, [sp, #64]	; 0x40
   171d4:	str	r2, [sp, #72]	; 0x48
   171d8:	str	sl, [sp, #32]
   171dc:	str	r0, [sp, #76]	; 0x4c
   171e0:	ldr	r3, [sp, #152]	; 0x98
   171e4:	cmp	r3, #10
   171e8:	ldrls	pc, [pc, r3, lsl #2]
   171ec:	b	183ac <__assert_fail@plt+0x6fc8>
   171f0:	andeq	r7, r1, ip, lsl r2
   171f4:	andeq	r7, r1, r4, lsl #10
   171f8:	andeq	r7, r1, r8, lsr #10
   171fc:	andeq	r7, r1, ip, asr #10
   17200:	andeq	r7, r1, r8, ror r6
   17204:	andeq	r7, r1, ip, asr #12
   17208:	andeq	r7, r1, r4, lsr #12
   1720c:	andeq	r7, r1, r0, ror #10
   17210:	andeq	r7, r1, r8, ror r5
   17214:	andeq	r7, r1, r8, ror r5
   17218:	andeq	r7, r1, r8, ror r5
   1721c:	mov	r3, #0
   17220:	mov	r7, r3
   17224:	str	r3, [sp, #28]
   17228:	ldr	r3, [sp, #44]	; 0x2c
   1722c:	mov	sl, #0
   17230:	eor	r3, r3, #1
   17234:	str	r3, [sp, #60]	; 0x3c
   17238:	ldr	r3, [sp, #24]
   1723c:	cmn	r3, #1
   17240:	beq	177a4 <__assert_fail@plt+0x63c0>
   17244:	ldr	r3, [sp, #24]
   17248:	subs	r5, r3, sl
   1724c:	movne	r5, #1
   17250:	cmp	r5, #0
   17254:	beq	177bc <__assert_fail@plt+0x63d8>
   17258:	ldr	r3, [sp, #152]	; 0x98
   1725c:	ldr	r8, [sp, #44]	; 0x2c
   17260:	cmp	r3, #2
   17264:	moveq	r8, #0
   17268:	andne	r8, r8, #1
   1726c:	ldr	r3, [sp, #52]	; 0x34
   17270:	adds	r9, r3, #0
   17274:	movne	r9, #1
   17278:	ands	r6, r9, r8
   1727c:	beq	17c24 <__assert_fail@plt+0x6840>
   17280:	ldr	r2, [sp, #52]	; 0x34
   17284:	ldr	r1, [sp, #24]
   17288:	cmp	r2, #1
   1728c:	mov	r3, r2
   17290:	movls	r3, #0
   17294:	movhi	r3, #1
   17298:	cmn	r1, #1
   1729c:	movne	r3, #0
   172a0:	cmp	r3, #0
   172a4:	add	r4, sl, r2
   172a8:	beq	172b8 <__assert_fail@plt+0x5ed4>
   172ac:	ldr	r0, [sp, #56]	; 0x38
   172b0:	bl	11294 <strlen@plt>
   172b4:	str	r0, [sp, #24]
   172b8:	ldr	r3, [sp, #24]
   172bc:	cmp	r3, r4
   172c0:	ldr	r3, [sp, #56]	; 0x38
   172c4:	add	r3, r3, sl
   172c8:	str	r3, [sp, #48]	; 0x30
   172cc:	bcc	17c30 <__assert_fail@plt+0x684c>
   172d0:	mov	r0, r3
   172d4:	ldr	r2, [sp, #52]	; 0x34
   172d8:	ldr	r1, [sp, #64]	; 0x40
   172dc:	bl	11150 <memcmp@plt>
   172e0:	cmp	r0, #0
   172e4:	bne	17c30 <__assert_fail@plt+0x684c>
   172e8:	ldr	r3, [sp, #28]
   172ec:	cmp	r3, #0
   172f0:	bne	184ac <__assert_fail@plt+0x70c8>
   172f4:	ldr	r3, [sp, #48]	; 0x30
   172f8:	ldrb	r4, [r3]
   172fc:	cmp	r4, #126	; 0x7e
   17300:	ldrls	pc, [pc, r4, lsl #2]
   17304:	b	17bc4 <__assert_fail@plt+0x67e0>
   17308:	andeq	r7, r1, r8, ror #19
   1730c:	andeq	r7, r1, r4, asr #23
   17310:	andeq	r7, r1, r4, asr #23
   17314:	andeq	r7, r1, r4, asr #23
   17318:	andeq	r7, r1, r4, asr #23
   1731c:	andeq	r7, r1, r4, asr #23
   17320:	andeq	r7, r1, r4, asr #23
   17324:	andeq	r7, r1, ip, asr #19
   17328:			; <UNDEFINED> instruction: 0x000179b0
   1732c:	andeq	r7, r1, ip, lsr #23
   17330:	andeq	r7, r1, r0, lsl r9
   17334:	strdeq	r7, [r1], -r4
   17338:	andeq	r7, r1, r8, lsl #23
   1733c:	andeq	r7, r1, r4, ror #22
   17340:	andeq	r7, r1, r4, asr #23
   17344:	andeq	r7, r1, r4, asr #23
   17348:	andeq	r7, r1, r4, asr #23
   1734c:	andeq	r7, r1, r4, asr #23
   17350:	andeq	r7, r1, r4, asr #23
   17354:	andeq	r7, r1, r4, asr #23
   17358:	andeq	r7, r1, r4, asr #23
   1735c:	andeq	r7, r1, r4, asr #23
   17360:	andeq	r7, r1, r4, asr #23
   17364:	andeq	r7, r1, r4, asr #23
   17368:	andeq	r7, r1, r4, asr #23
   1736c:	andeq	r7, r1, r4, asr #23
   17370:	andeq	r7, r1, r4, asr #23
   17374:	andeq	r7, r1, r4, asr #23
   17378:	andeq	r7, r1, r4, asr #23
   1737c:	andeq	r7, r1, r4, asr #23
   17380:	andeq	r7, r1, r4, asr #23
   17384:	andeq	r7, r1, r4, asr #23
   17388:	andeq	r7, r1, r4, lsr #23
   1738c:	ldrdeq	r7, [r1], -r8
   17390:	ldrdeq	r7, [r1], -r8
   17394:	andeq	r7, r1, r8, ror #13
   17398:	ldrdeq	r7, [r1], -r8
   1739c:	andeq	r7, r1, r0, ror fp
   173a0:	ldrdeq	r7, [r1], -r8
   173a4:	andeq	r7, r1, r4, asr #22
   173a8:	ldrdeq	r7, [r1], -r8
   173ac:	ldrdeq	r7, [r1], -r8
   173b0:	ldrdeq	r7, [r1], -r8
   173b4:	andeq	r7, r1, r0, ror fp
   173b8:	andeq	r7, r1, r0, ror fp
   173bc:	andeq	r7, r1, r0, ror fp
   173c0:	andeq	r7, r1, r0, ror fp
   173c4:	andeq	r7, r1, r0, ror fp
   173c8:	andeq	r7, r1, r0, ror fp
   173cc:	andeq	r7, r1, r0, ror fp
   173d0:	andeq	r7, r1, r0, ror fp
   173d4:	andeq	r7, r1, r0, ror fp
   173d8:	andeq	r7, r1, r0, ror fp
   173dc:	andeq	r7, r1, r0, ror fp
   173e0:	andeq	r7, r1, r0, ror fp
   173e4:	andeq	r7, r1, r0, ror fp
   173e8:	andeq	r7, r1, r0, ror fp
   173ec:	andeq	r7, r1, r0, ror fp
   173f0:	andeq	r7, r1, r0, ror fp
   173f4:	ldrdeq	r7, [r1], -r8
   173f8:	ldrdeq	r7, [r1], -r8
   173fc:	ldrdeq	r7, [r1], -r8
   17400:	ldrdeq	r7, [r1], -r8
   17404:	andeq	r7, r1, r4, lsl fp
   17408:	andeq	r7, r1, r4, asr #23
   1740c:	andeq	r7, r1, r0, ror fp
   17410:	andeq	r7, r1, r0, ror fp
   17414:	andeq	r7, r1, r0, ror fp
   17418:	andeq	r7, r1, r0, ror fp
   1741c:	andeq	r7, r1, r0, ror fp
   17420:	andeq	r7, r1, r0, ror fp
   17424:	andeq	r7, r1, r0, ror fp
   17428:	andeq	r7, r1, r0, ror fp
   1742c:	andeq	r7, r1, r0, ror fp
   17430:	andeq	r7, r1, r0, ror fp
   17434:	andeq	r7, r1, r0, ror fp
   17438:	andeq	r7, r1, r0, ror fp
   1743c:	andeq	r7, r1, r0, ror fp
   17440:	andeq	r7, r1, r0, ror fp
   17444:	andeq	r7, r1, r0, ror fp
   17448:	andeq	r7, r1, r0, ror fp
   1744c:	andeq	r7, r1, r0, ror fp
   17450:	andeq	r7, r1, r0, ror fp
   17454:	andeq	r7, r1, r0, ror fp
   17458:	andeq	r7, r1, r0, ror fp
   1745c:	andeq	r7, r1, r0, ror fp
   17460:	andeq	r7, r1, r0, ror fp
   17464:	andeq	r7, r1, r0, ror fp
   17468:	andeq	r7, r1, r0, ror fp
   1746c:	andeq	r7, r1, r0, ror fp
   17470:	andeq	r7, r1, r0, ror fp
   17474:	ldrdeq	r7, [r1], -r8
   17478:	andeq	r7, r1, r4, lsr r8
   1747c:	andeq	r7, r1, r0, ror fp
   17480:	ldrdeq	r7, [r1], -r8
   17484:	andeq	r7, r1, r0, ror fp
   17488:	ldrdeq	r7, [r1], -r8
   1748c:	andeq	r7, r1, r0, ror fp
   17490:	andeq	r7, r1, r0, ror fp
   17494:	andeq	r7, r1, r0, ror fp
   17498:	andeq	r7, r1, r0, ror fp
   1749c:	andeq	r7, r1, r0, ror fp
   174a0:	andeq	r7, r1, r0, ror fp
   174a4:	andeq	r7, r1, r0, ror fp
   174a8:	andeq	r7, r1, r0, ror fp
   174ac:	andeq	r7, r1, r0, ror fp
   174b0:	andeq	r7, r1, r0, ror fp
   174b4:	andeq	r7, r1, r0, ror fp
   174b8:	andeq	r7, r1, r0, ror fp
   174bc:	andeq	r7, r1, r0, ror fp
   174c0:	andeq	r7, r1, r0, ror fp
   174c4:	andeq	r7, r1, r0, ror fp
   174c8:	andeq	r7, r1, r0, ror fp
   174cc:	andeq	r7, r1, r0, ror fp
   174d0:	andeq	r7, r1, r0, ror fp
   174d4:	andeq	r7, r1, r0, ror fp
   174d8:	andeq	r7, r1, r0, ror fp
   174dc:	andeq	r7, r1, r0, ror fp
   174e0:	andeq	r7, r1, r0, ror fp
   174e4:	andeq	r7, r1, r0, ror fp
   174e8:	andeq	r7, r1, r0, ror fp
   174ec:	andeq	r7, r1, r0, ror fp
   174f0:	andeq	r7, r1, r0, ror fp
   174f4:	andeq	r7, r1, r8, asr #13
   174f8:	ldrdeq	r7, [r1], -r8
   174fc:	andeq	r7, r1, r8, asr #13
   17500:	andeq	r7, r1, r8, ror #13
   17504:	mov	r3, #1
   17508:	str	r3, [sp, #28]
   1750c:	str	r3, [sp, #52]	; 0x34
   17510:	ldr	r3, [pc, #4000]	; 184b8 <__assert_fail@plt+0x70d4>
   17514:	mov	r7, #0
   17518:	str	r3, [sp, #64]	; 0x40
   1751c:	mov	r3, #2
   17520:	str	r3, [sp, #152]	; 0x98
   17524:	b	17228 <__assert_fail@plt+0x5e44>
   17528:	ldr	r3, [sp, #28]
   1752c:	cmp	r3, #0
   17530:	beq	1768c <__assert_fail@plt+0x62a8>
   17534:	mov	r3, #1
   17538:	str	r3, [sp, #52]	; 0x34
   1753c:	ldr	r3, [pc, #3956]	; 184b8 <__assert_fail@plt+0x70d4>
   17540:	mov	r7, #0
   17544:	str	r3, [sp, #64]	; 0x40
   17548:	b	17228 <__assert_fail@plt+0x5e44>
   1754c:	mov	r3, #1
   17550:	str	r3, [sp, #44]	; 0x2c
   17554:	str	r3, [sp, #52]	; 0x34
   17558:	str	r3, [sp, #28]
   1755c:	b	17510 <__assert_fail@plt+0x612c>
   17560:	mov	r3, #0
   17564:	str	r3, [sp, #28]
   17568:	mov	r3, #1
   1756c:	str	r3, [sp, #44]	; 0x2c
   17570:	mov	r7, #0
   17574:	b	17228 <__assert_fail@plt+0x5e44>
   17578:	ldr	r3, [sp, #152]	; 0x98
   1757c:	cmp	r3, #10
   17580:	beq	175c4 <__assert_fail@plt+0x61e0>
   17584:	mov	r2, #5
   17588:	ldr	r1, [pc, #3884]	; 184bc <__assert_fail@plt+0x70d8>
   1758c:	mov	r0, #0
   17590:	bl	11168 <dcgettext@plt>
   17594:	ldr	r2, [pc, #3872]	; 184bc <__assert_fail@plt+0x70d8>
   17598:	cmp	r0, r2
   1759c:	str	r0, [sp, #164]	; 0xa4
   175a0:	beq	185a8 <__assert_fail@plt+0x71c4>
   175a4:	mov	r2, #5
   175a8:	ldr	r1, [pc, #3848]	; 184b8 <__assert_fail@plt+0x70d4>
   175ac:	mov	r0, #0
   175b0:	bl	11168 <dcgettext@plt>
   175b4:	ldr	r2, [pc, #3836]	; 184b8 <__assert_fail@plt+0x70d4>
   175b8:	cmp	r0, r2
   175bc:	str	r0, [sp, #168]	; 0xa8
   175c0:	beq	18598 <__assert_fail@plt+0x71b4>
   175c4:	ldr	r7, [sp, #28]
   175c8:	cmp	r7, #0
   175cc:	movne	r7, #0
   175d0:	bne	17604 <__assert_fail@plt+0x6220>
   175d4:	ldr	r3, [sp, #164]	; 0xa4
   175d8:	ldrb	r3, [r3]
   175dc:	cmp	r3, #0
   175e0:	beq	185b8 <__assert_fail@plt+0x71d4>
   175e4:	ldr	r2, [sp, #164]	; 0xa4
   175e8:	ldr	r1, [sp, #32]
   175ec:	cmp	fp, r7
   175f0:	strbhi	r3, [r1, r7]
   175f4:	ldrb	r3, [r2, #1]!
   175f8:	add	r7, r7, #1
   175fc:	cmp	r3, #0
   17600:	bne	175ec <__assert_fail@plt+0x6208>
   17604:	ldr	r0, [sp, #168]	; 0xa8
   17608:	bl	11294 <strlen@plt>
   1760c:	ldr	r3, [sp, #168]	; 0xa8
   17610:	str	r3, [sp, #64]	; 0x40
   17614:	mov	r3, #1
   17618:	str	r3, [sp, #44]	; 0x2c
   1761c:	str	r0, [sp, #52]	; 0x34
   17620:	b	17228 <__assert_fail@plt+0x5e44>
   17624:	mov	r3, #1
   17628:	str	r3, [sp, #44]	; 0x2c
   1762c:	str	r3, [sp, #52]	; 0x34
   17630:	str	r3, [sp, #28]
   17634:	ldr	r3, [pc, #3716]	; 184c0 <__assert_fail@plt+0x70dc>
   17638:	mov	r7, #0
   1763c:	str	r3, [sp, #64]	; 0x40
   17640:	mov	r3, #5
   17644:	str	r3, [sp, #152]	; 0x98
   17648:	b	17228 <__assert_fail@plt+0x5e44>
   1764c:	ldr	r3, [sp, #28]
   17650:	cmp	r3, #0
   17654:	beq	18354 <__assert_fail@plt+0x6f70>
   17658:	ldr	r3, [sp, #28]
   1765c:	mov	r7, #0
   17660:	str	r3, [sp, #44]	; 0x2c
   17664:	mov	r3, #1
   17668:	str	r3, [sp, #52]	; 0x34
   1766c:	ldr	r3, [pc, #3660]	; 184c0 <__assert_fail@plt+0x70dc>
   17670:	str	r3, [sp, #64]	; 0x40
   17674:	b	17228 <__assert_fail@plt+0x5e44>
   17678:	ldr	r3, [sp, #28]
   1767c:	cmp	r3, #0
   17680:	mov	r3, #1
   17684:	streq	r3, [sp, #44]	; 0x2c
   17688:	bne	1750c <__assert_fail@plt+0x6128>
   1768c:	cmp	fp, #0
   17690:	beq	18384 <__assert_fail@plt+0x6fa0>
   17694:	ldr	r3, [sp, #32]
   17698:	mov	r2, #39	; 0x27
   1769c:	mov	r7, #1
   176a0:	strb	r2, [r3]
   176a4:	mov	r3, #0
   176a8:	str	r3, [sp, #28]
   176ac:	mov	r3, #1
   176b0:	str	r3, [sp, #52]	; 0x34
   176b4:	ldr	r3, [pc, #3580]	; 184b8 <__assert_fail@plt+0x70d4>
   176b8:	str	r3, [sp, #64]	; 0x40
   176bc:	mov	r3, #2
   176c0:	str	r3, [sp, #152]	; 0x98
   176c4:	b	17228 <__assert_fail@plt+0x5e44>
   176c8:	ldr	r3, [sp, #24]
   176cc:	cmn	r3, #1
   176d0:	beq	182e8 <__assert_fail@plt+0x6f04>
   176d4:	ldr	r3, [sp, #24]
   176d8:	subs	r3, r3, #1
   176dc:	movne	r3, #1
   176e0:	cmp	r3, #0
   176e4:	bne	176f0 <__assert_fail@plt+0x630c>
   176e8:	cmp	sl, #0
   176ec:	beq	17adc <__assert_fail@plt+0x66f8>
   176f0:	ldr	r3, [sp, #152]	; 0x98
   176f4:	mov	r5, #0
   176f8:	sub	r2, r3, #2
   176fc:	mov	r8, r5
   17700:	clz	r2, r2
   17704:	lsr	r2, r2, #5
   17708:	ldr	r3, [sp, #60]	; 0x3c
   1770c:	ldr	r1, [sp, #28]
   17710:	orr	r3, r2, r3
   17714:	eor	r3, r3, #1
   17718:	orr	r3, r1, r3
   1771c:	tst	r3, #255	; 0xff
   17720:	bne	17e4c <__assert_fail@plt+0x6a68>
   17724:	cmp	r6, #0
   17728:	bne	17878 <__assert_fail@plt+0x6494>
   1772c:	ldr	r3, [sp, #40]	; 0x28
   17730:	eor	r8, r8, #1
   17734:	and	r8, r8, r3
   17738:	add	sl, sl, #1
   1773c:	uxtb	r6, r8
   17740:	cmp	r6, #0
   17744:	beq	17778 <__assert_fail@plt+0x6394>
   17748:	cmp	fp, r7
   1774c:	movhi	r2, #39	; 0x27
   17750:	ldrhi	r3, [sp, #32]
   17754:	strbhi	r2, [r3, r7]
   17758:	add	r3, r7, #1
   1775c:	cmp	fp, r3
   17760:	movhi	r1, #39	; 0x27
   17764:	ldrhi	r2, [sp, #32]
   17768:	add	r7, r7, #2
   1776c:	strbhi	r1, [r2, r3]
   17770:	mov	r3, #0
   17774:	str	r3, [sp, #40]	; 0x28
   17778:	cmp	r7, fp
   1777c:	ldrcc	r3, [sp, #32]
   17780:	strbcc	r4, [r3, r7]
   17784:	ldr	r3, [sp, #36]	; 0x24
   17788:	cmp	r5, #0
   1778c:	moveq	r3, #0
   17790:	str	r3, [sp, #36]	; 0x24
   17794:	ldr	r3, [sp, #24]
   17798:	add	r7, r7, #1
   1779c:	cmn	r3, #1
   177a0:	bne	17244 <__assert_fail@plt+0x5e60>
   177a4:	ldr	r3, [sp, #56]	; 0x38
   177a8:	ldrb	r5, [r3, sl]
   177ac:	adds	r5, r5, #0
   177b0:	movne	r5, #1
   177b4:	cmp	r5, #0
   177b8:	bne	17258 <__assert_fail@plt+0x5e74>
   177bc:	ldr	r3, [sp, #152]	; 0x98
   177c0:	ldr	r1, [sp, #28]
   177c4:	sub	r3, r3, #2
   177c8:	clz	r3, r3
   177cc:	lsr	r3, r3, #5
   177d0:	and	r9, r1, r3
   177d4:	cmp	r7, #0
   177d8:	movne	r2, #0
   177dc:	andeq	r2, r9, #1
   177e0:	cmp	r2, #0
   177e4:	bne	181c0 <__assert_fail@plt+0x6ddc>
   177e8:	eor	r2, r1, #1
   177ec:	ands	r3, r3, r2
   177f0:	beq	1867c <__assert_fail@plt+0x7298>
   177f4:	ldr	r2, [sp, #68]	; 0x44
   177f8:	cmp	r2, #0
   177fc:	beq	18668 <__assert_fail@plt+0x7284>
   17800:	ldr	r3, [sp, #36]	; 0x24
   17804:	cmp	r3, #0
   17808:	bne	18620 <__assert_fail@plt+0x723c>
   1780c:	ldr	r2, [sp, #72]	; 0x48
   17810:	clz	r3, fp
   17814:	cmp	r2, #0
   17818:	lsr	r3, r3, #5
   1781c:	moveq	r3, #0
   17820:	cmp	r3, #0
   17824:	beq	185c0 <__assert_fail@plt+0x71dc>
   17828:	str	r3, [sp, #68]	; 0x44
   1782c:	ldr	fp, [sp, #72]	; 0x48
   17830:	b	171e0 <__assert_fail@plt+0x5dfc>
   17834:	ldr	r3, [sp, #152]	; 0x98
   17838:	cmp	r3, #2
   1783c:	beq	17e90 <__assert_fail@plt+0x6aac>
   17840:	ldr	r3, [sp, #44]	; 0x2c
   17844:	ldr	r2, [sp, #28]
   17848:	and	r2, r3, r2
   1784c:	ands	r2, r9, r2
   17850:	bne	17e9c <__assert_fail@plt+0x6ab8>
   17854:	mov	r4, #92	; 0x5c
   17858:	mov	r3, r4
   1785c:	ldr	r1, [sp, #44]	; 0x2c
   17860:	cmp	r1, #0
   17864:	moveq	r5, #0
   17868:	moveq	r8, r1
   1786c:	beq	17708 <__assert_fail@plt+0x6324>
   17870:	mov	r4, r3
   17874:	mov	r5, #0
   17878:	ldr	r3, [sp, #28]
   1787c:	cmp	r3, #0
   17880:	bne	17e84 <__assert_fail@plt+0x6aa0>
   17884:	ldr	r3, [sp, #40]	; 0x28
   17888:	eor	r9, r3, #1
   1788c:	and	r9, r9, r2
   17890:	ands	r9, r9, #255	; 0xff
   17894:	beq	178d8 <__assert_fail@plt+0x64f4>
   17898:	cmp	fp, r7
   1789c:	movhi	r2, #39	; 0x27
   178a0:	ldrhi	r3, [sp, #32]
   178a4:	str	r9, [sp, #40]	; 0x28
   178a8:	strbhi	r2, [r3, r7]
   178ac:	add	r3, r7, #1
   178b0:	cmp	fp, r3
   178b4:	movhi	r1, #36	; 0x24
   178b8:	ldrhi	r2, [sp, #32]
   178bc:	strbhi	r1, [r2, r3]
   178c0:	add	r3, r7, #2
   178c4:	cmp	fp, r3
   178c8:	add	r7, r7, #3
   178cc:	ldrhi	r2, [sp, #32]
   178d0:	movhi	r1, #39	; 0x27
   178d4:	strbhi	r1, [r2, r3]
   178d8:	cmp	fp, r7
   178dc:	movhi	r2, #92	; 0x5c
   178e0:	ldrhi	r3, [sp, #32]
   178e4:	add	sl, sl, #1
   178e8:	strbhi	r2, [r3, r7]
   178ec:	add	r7, r7, #1
   178f0:	b	17778 <__assert_fail@plt+0x6394>
   178f4:	ldr	r3, [sp, #152]	; 0x98
   178f8:	mov	r4, #11
   178fc:	sub	r2, r3, #2
   17900:	mov	r3, #118	; 0x76
   17904:	clz	r2, r2
   17908:	lsr	r2, r2, #5
   1790c:	b	1785c <__assert_fail@plt+0x6478>
   17910:	mov	r4, #10
   17914:	mov	r3, #110	; 0x6e
   17918:	ldr	r2, [sp, #152]	; 0x98
   1791c:	ldr	r1, [sp, #28]
   17920:	sub	r2, r2, #2
   17924:	clz	r2, r2
   17928:	lsr	r2, r2, #5
   1792c:	ands	r1, r1, r2
   17930:	beq	1785c <__assert_fail@plt+0x6478>
   17934:	ldr	sl, [sp, #32]
   17938:	mov	r8, fp
   1793c:	mov	r2, r1
   17940:	mov	r3, #2
   17944:	str	r3, [sp, #152]	; 0x98
   17948:	ldr	r9, [sp, #44]	; 0x2c
   1794c:	ldr	r3, [sp, #152]	; 0x98
   17950:	and	r9, r9, r2
   17954:	tst	r9, #255	; 0xff
   17958:	movne	r3, #4
   1795c:	str	r3, [sp, #152]	; 0x98
   17960:	ldr	r3, [sp, #156]	; 0x9c
   17964:	mov	ip, #0
   17968:	bic	r3, r3, #2
   1796c:	str	r3, [sp, #4]
   17970:	ldr	r3, [sp, #168]	; 0xa8
   17974:	ldr	r2, [sp, #56]	; 0x38
   17978:	str	r3, [sp, #16]
   1797c:	ldr	r3, [sp, #164]	; 0xa4
   17980:	mov	r1, r8
   17984:	str	r3, [sp, #12]
   17988:	ldr	r3, [sp, #152]	; 0x98
   1798c:	mov	r0, sl
   17990:	str	r3, [sp]
   17994:	str	ip, [sp, #8]
   17998:	ldr	r3, [sp, #24]
   1799c:	bl	17184 <__assert_fail@plt+0x5da0>
   179a0:	mov	fp, r0
   179a4:	mov	r0, fp
   179a8:	add	sp, sp, #116	; 0x74
   179ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179b0:	ldr	r3, [sp, #152]	; 0x98
   179b4:	mov	r4, #8
   179b8:	sub	r2, r3, #2
   179bc:	mov	r3, #98	; 0x62
   179c0:	clz	r2, r2
   179c4:	lsr	r2, r2, #5
   179c8:	b	1785c <__assert_fail@plt+0x6478>
   179cc:	ldr	r3, [sp, #152]	; 0x98
   179d0:	mov	r4, #7
   179d4:	sub	r2, r3, #2
   179d8:	mov	r3, #97	; 0x61
   179dc:	clz	r2, r2
   179e0:	lsr	r2, r2, #5
   179e4:	b	1785c <__assert_fail@plt+0x6478>
   179e8:	ldr	r3, [sp, #44]	; 0x2c
   179ec:	cmp	r3, #0
   179f0:	beq	181d4 <__assert_fail@plt+0x6df0>
   179f4:	ldr	r3, [sp, #28]
   179f8:	cmp	r3, #0
   179fc:	bne	184ac <__assert_fail@plt+0x70c8>
   17a00:	ldr	r3, [sp, #152]	; 0x98
   17a04:	sub	r2, r3, #2
   17a08:	ldr	r3, [sp, #40]	; 0x28
   17a0c:	clz	r2, r2
   17a10:	eor	r3, r3, #1
   17a14:	lsr	r2, r2, #5
   17a18:	ands	r3, r2, r3
   17a1c:	moveq	r1, r7
   17a20:	beq	17a64 <__assert_fail@plt+0x6680>
   17a24:	cmp	fp, r7
   17a28:	movhi	r0, #39	; 0x27
   17a2c:	ldrhi	r1, [sp, #32]
   17a30:	str	r3, [sp, #40]	; 0x28
   17a34:	strbhi	r0, [r1, r7]
   17a38:	add	r1, r7, #1
   17a3c:	cmp	fp, r1
   17a40:	movhi	ip, #36	; 0x24
   17a44:	ldrhi	r0, [sp, #32]
   17a48:	strbhi	ip, [r0, r1]
   17a4c:	add	r1, r7, #2
   17a50:	cmp	fp, r1
   17a54:	movhi	ip, #39	; 0x27
   17a58:	ldrhi	r0, [sp, #32]
   17a5c:	strbhi	ip, [r0, r1]
   17a60:	add	r1, r7, #3
   17a64:	cmp	fp, r1
   17a68:	movhi	r0, #92	; 0x5c
   17a6c:	ldrhi	r3, [sp, #32]
   17a70:	add	r7, r1, #1
   17a74:	strbhi	r0, [r3, r1]
   17a78:	cmp	r8, #0
   17a7c:	beq	183c0 <__assert_fail@plt+0x6fdc>
   17a80:	ldr	r0, [sp, #24]
   17a84:	add	r3, sl, #1
   17a88:	cmp	r3, r0
   17a8c:	bcs	182fc <__assert_fail@plt+0x6f18>
   17a90:	ldr	r0, [sp, #56]	; 0x38
   17a94:	ldrb	r3, [r0, r3]
   17a98:	sub	r3, r3, #48	; 0x30
   17a9c:	cmp	r3, #9
   17aa0:	bhi	182fc <__assert_fail@plt+0x6f18>
   17aa4:	cmp	fp, r7
   17aa8:	movhi	r3, #48	; 0x30
   17aac:	ldrhi	r0, [sp, #32]
   17ab0:	ldr	r5, [sp, #28]
   17ab4:	mov	r4, #48	; 0x30
   17ab8:	strbhi	r3, [r0, r7]
   17abc:	add	r3, r1, #2
   17ac0:	cmp	fp, r3
   17ac4:	movhi	r0, #48	; 0x30
   17ac8:	ldrhi	ip, [sp, #32]
   17acc:	add	r7, r1, #3
   17ad0:	strbhi	r0, [ip, r3]
   17ad4:	b	17708 <__assert_fail@plt+0x6324>
   17ad8:	mov	r5, #0
   17adc:	ldr	r3, [sp, #152]	; 0x98
   17ae0:	sub	r2, r3, #2
   17ae4:	ldr	r3, [sp, #28]
   17ae8:	clz	r2, r2
   17aec:	lsr	r2, r2, #5
   17af0:	ands	r8, r3, r2
   17af4:	beq	17708 <__assert_fail@plt+0x6324>
   17af8:	mov	r3, r8
   17afc:	mov	r2, r3
   17b00:	mov	r3, #2
   17b04:	ldr	sl, [sp, #32]
   17b08:	mov	r8, fp
   17b0c:	str	r3, [sp, #152]	; 0x98
   17b10:	b	17948 <__assert_fail@plt+0x6564>
   17b14:	ldr	r3, [sp, #152]	; 0x98
   17b18:	cmp	r3, #2
   17b1c:	beq	18240 <__assert_fail@plt+0x6e5c>
   17b20:	cmp	r3, #5
   17b24:	beq	18200 <__assert_fail@plt+0x6e1c>
   17b28:	mov	r5, #0
   17b2c:	sub	r2, r3, #2
   17b30:	mov	r8, r5
   17b34:	clz	r2, r2
   17b38:	mov	r4, #63	; 0x3f
   17b3c:	lsr	r2, r2, #5
   17b40:	b	17708 <__assert_fail@plt+0x6324>
   17b44:	ldr	r3, [sp, #152]	; 0x98
   17b48:	cmp	r3, #2
   17b4c:	beq	18260 <__assert_fail@plt+0x6e7c>
   17b50:	mov	r2, #0
   17b54:	str	r5, [sp, #68]	; 0x44
   17b58:	mov	r8, r2
   17b5c:	mov	r4, #39	; 0x27
   17b60:	b	17708 <__assert_fail@plt+0x6324>
   17b64:	mov	r4, #13
   17b68:	mov	r3, #114	; 0x72
   17b6c:	b	17918 <__assert_fail@plt+0x6534>
   17b70:	ldr	r3, [sp, #152]	; 0x98
   17b74:	mov	r8, #0
   17b78:	sub	r2, r3, #2
   17b7c:	clz	r2, r2
   17b80:	lsr	r2, r2, #5
   17b84:	b	17708 <__assert_fail@plt+0x6324>
   17b88:	ldr	r3, [sp, #152]	; 0x98
   17b8c:	mov	r4, #12
   17b90:	sub	r2, r3, #2
   17b94:	mov	r3, #102	; 0x66
   17b98:	clz	r2, r2
   17b9c:	lsr	r2, r2, #5
   17ba0:	b	1785c <__assert_fail@plt+0x6478>
   17ba4:	mov	r5, r6
   17ba8:	b	17adc <__assert_fail@plt+0x66f8>
   17bac:	ldr	r3, [sp, #152]	; 0x98
   17bb0:	sub	r2, r3, #2
   17bb4:	mov	r3, #116	; 0x74
   17bb8:	clz	r2, r2
   17bbc:	lsr	r2, r2, #5
   17bc0:	b	1785c <__assert_fail@plt+0x6478>
   17bc4:	ldr	r8, [sp, #76]	; 0x4c
   17bc8:	cmp	r8, #1
   17bcc:	bne	1807c <__assert_fail@plt+0x6c98>
   17bd0:	bl	1127c <__ctype_b_loc@plt>
   17bd4:	sxth	r3, r4
   17bd8:	mov	ip, r8
   17bdc:	lsl	r3, r3, #1
   17be0:	ldr	r2, [r0]
   17be4:	ldrh	r3, [r2, r3]
   17be8:	and	r3, r3, #16384	; 0x4000
   17bec:	cmp	r3, #0
   17bf0:	movne	r5, #1
   17bf4:	moveq	r5, #0
   17bf8:	moveq	r3, #1
   17bfc:	movne	r3, #0
   17c00:	ldr	r2, [sp, #44]	; 0x2c
   17c04:	and	r3, r3, r2
   17c08:	ands	r8, r3, #255	; 0xff
   17c0c:	bne	17f10 <__assert_fail@plt+0x6b2c>
   17c10:	ldr	r3, [sp, #152]	; 0x98
   17c14:	sub	r2, r3, #2
   17c18:	clz	r2, r2
   17c1c:	lsr	r2, r2, #5
   17c20:	b	17708 <__assert_fail@plt+0x6324>
   17c24:	ldr	r3, [sp, #56]	; 0x38
   17c28:	add	r3, r3, sl
   17c2c:	str	r3, [sp, #48]	; 0x30
   17c30:	ldr	r3, [sp, #48]	; 0x30
   17c34:	mov	r6, #0
   17c38:	ldrb	r4, [r3]
   17c3c:	cmp	r4, #126	; 0x7e
   17c40:	ldrls	pc, [pc, r4, lsl #2]
   17c44:	b	17bc4 <__assert_fail@plt+0x67e0>
   17c48:	andeq	r7, r1, r8, ror #19
   17c4c:	andeq	r7, r1, r4, asr #23
   17c50:	andeq	r7, r1, r4, asr #23
   17c54:	andeq	r7, r1, r4, asr #23
   17c58:	andeq	r7, r1, r4, asr #23
   17c5c:	andeq	r7, r1, r4, asr #23
   17c60:	andeq	r7, r1, r4, asr #23
   17c64:	andeq	r7, r1, ip, asr #19
   17c68:			; <UNDEFINED> instruction: 0x000179b0
   17c6c:	andeq	r7, r1, r4, asr #28
   17c70:	andeq	r7, r1, r0, lsl r9
   17c74:	strdeq	r7, [r1], -r4
   17c78:	andeq	r7, r1, r8, lsl #23
   17c7c:	andeq	r7, r1, r4, ror #22
   17c80:	andeq	r7, r1, r4, asr #23
   17c84:	andeq	r7, r1, r4, asr #23
   17c88:	andeq	r7, r1, r4, asr #23
   17c8c:	andeq	r7, r1, r4, asr #23
   17c90:	andeq	r7, r1, r4, asr #23
   17c94:	andeq	r7, r1, r4, asr #23
   17c98:	andeq	r7, r1, r4, asr #23
   17c9c:	andeq	r7, r1, r4, asr #23
   17ca0:	andeq	r7, r1, r4, asr #23
   17ca4:	andeq	r7, r1, r4, asr #23
   17ca8:	andeq	r7, r1, r4, asr #23
   17cac:	andeq	r7, r1, r4, asr #23
   17cb0:	andeq	r7, r1, r4, asr #23
   17cb4:	andeq	r7, r1, r4, asr #23
   17cb8:	andeq	r7, r1, r4, asr #23
   17cbc:	andeq	r7, r1, r4, asr #23
   17cc0:	andeq	r7, r1, r4, asr #23
   17cc4:	andeq	r7, r1, r4, asr #23
   17cc8:	ldrdeq	r7, [r1], -ip
   17ccc:	ldrdeq	r7, [r1], -r8
   17cd0:	ldrdeq	r7, [r1], -r8
   17cd4:	andeq	r7, r1, r8, ror #13
   17cd8:	ldrdeq	r7, [r1], -r8
   17cdc:	andeq	r7, r1, r0, ror fp
   17ce0:	ldrdeq	r7, [r1], -r8
   17ce4:	andeq	r7, r1, r4, asr #22
   17ce8:	ldrdeq	r7, [r1], -r8
   17cec:	ldrdeq	r7, [r1], -r8
   17cf0:	ldrdeq	r7, [r1], -r8
   17cf4:	andeq	r7, r1, r0, ror fp
   17cf8:	andeq	r7, r1, r0, ror fp
   17cfc:	andeq	r7, r1, r0, ror fp
   17d00:	andeq	r7, r1, r0, ror fp
   17d04:	andeq	r7, r1, r0, ror fp
   17d08:	andeq	r7, r1, r0, ror fp
   17d0c:	andeq	r7, r1, r0, ror fp
   17d10:	andeq	r7, r1, r0, ror fp
   17d14:	andeq	r7, r1, r0, ror fp
   17d18:	andeq	r7, r1, r0, ror fp
   17d1c:	andeq	r7, r1, r0, ror fp
   17d20:	andeq	r7, r1, r0, ror fp
   17d24:	andeq	r7, r1, r0, ror fp
   17d28:	andeq	r7, r1, r0, ror fp
   17d2c:	andeq	r7, r1, r0, ror fp
   17d30:	andeq	r7, r1, r0, ror fp
   17d34:	ldrdeq	r7, [r1], -r8
   17d38:	ldrdeq	r7, [r1], -r8
   17d3c:	ldrdeq	r7, [r1], -r8
   17d40:	ldrdeq	r7, [r1], -r8
   17d44:	andeq	r7, r1, r4, lsl fp
   17d48:	andeq	r7, r1, r4, asr #23
   17d4c:	andeq	r7, r1, r0, ror fp
   17d50:	andeq	r7, r1, r0, ror fp
   17d54:	andeq	r7, r1, r0, ror fp
   17d58:	andeq	r7, r1, r0, ror fp
   17d5c:	andeq	r7, r1, r0, ror fp
   17d60:	andeq	r7, r1, r0, ror fp
   17d64:	andeq	r7, r1, r0, ror fp
   17d68:	andeq	r7, r1, r0, ror fp
   17d6c:	andeq	r7, r1, r0, ror fp
   17d70:	andeq	r7, r1, r0, ror fp
   17d74:	andeq	r7, r1, r0, ror fp
   17d78:	andeq	r7, r1, r0, ror fp
   17d7c:	andeq	r7, r1, r0, ror fp
   17d80:	andeq	r7, r1, r0, ror fp
   17d84:	andeq	r7, r1, r0, ror fp
   17d88:	andeq	r7, r1, r0, ror fp
   17d8c:	andeq	r7, r1, r0, ror fp
   17d90:	andeq	r7, r1, r0, ror fp
   17d94:	andeq	r7, r1, r0, ror fp
   17d98:	andeq	r7, r1, r0, ror fp
   17d9c:	andeq	r7, r1, r0, ror fp
   17da0:	andeq	r7, r1, r0, ror fp
   17da4:	andeq	r7, r1, r0, ror fp
   17da8:	andeq	r7, r1, r0, ror fp
   17dac:	andeq	r7, r1, r0, ror fp
   17db0:	andeq	r7, r1, r0, ror fp
   17db4:	ldrdeq	r7, [r1], -r8
   17db8:	andeq	r7, r1, r4, lsr r8
   17dbc:	andeq	r7, r1, r0, ror fp
   17dc0:	ldrdeq	r7, [r1], -r8
   17dc4:	andeq	r7, r1, r0, ror fp
   17dc8:	ldrdeq	r7, [r1], -r8
   17dcc:	andeq	r7, r1, r0, ror fp
   17dd0:	andeq	r7, r1, r0, ror fp
   17dd4:	andeq	r7, r1, r0, ror fp
   17dd8:	andeq	r7, r1, r0, ror fp
   17ddc:	andeq	r7, r1, r0, ror fp
   17de0:	andeq	r7, r1, r0, ror fp
   17de4:	andeq	r7, r1, r0, ror fp
   17de8:	andeq	r7, r1, r0, ror fp
   17dec:	andeq	r7, r1, r0, ror fp
   17df0:	andeq	r7, r1, r0, ror fp
   17df4:	andeq	r7, r1, r0, ror fp
   17df8:	andeq	r7, r1, r0, ror fp
   17dfc:	andeq	r7, r1, r0, ror fp
   17e00:	andeq	r7, r1, r0, ror fp
   17e04:	andeq	r7, r1, r0, ror fp
   17e08:	andeq	r7, r1, r0, ror fp
   17e0c:	andeq	r7, r1, r0, ror fp
   17e10:	andeq	r7, r1, r0, ror fp
   17e14:	andeq	r7, r1, r0, ror fp
   17e18:	andeq	r7, r1, r0, ror fp
   17e1c:	andeq	r7, r1, r0, ror fp
   17e20:	andeq	r7, r1, r0, ror fp
   17e24:	andeq	r7, r1, r0, ror fp
   17e28:	andeq	r7, r1, r0, ror fp
   17e2c:	andeq	r7, r1, r0, ror fp
   17e30:	andeq	r7, r1, r0, ror fp
   17e34:	andeq	r7, r1, r8, asr #13
   17e38:	ldrdeq	r7, [r1], -r8
   17e3c:	andeq	r7, r1, r8, asr #13
   17e40:	andeq	r7, r1, r8, ror #13
   17e44:	mov	r3, #116	; 0x74
   17e48:	b	17918 <__assert_fail@plt+0x6534>
   17e4c:	ldr	r3, [sp, #160]	; 0xa0
   17e50:	cmp	r3, #0
   17e54:	beq	17724 <__assert_fail@plt+0x6340>
   17e58:	lsr	r3, r4, #5
   17e5c:	ldr	r0, [sp, #160]	; 0xa0
   17e60:	uxtb	r3, r3
   17e64:	and	r1, r4, #31
   17e68:	ldr	r0, [r0, r3, lsl #2]
   17e6c:	lsr	r3, r0, r1
   17e70:	tst	r3, #1
   17e74:	beq	17724 <__assert_fail@plt+0x6340>
   17e78:	ldr	r3, [sp, #28]
   17e7c:	cmp	r3, #0
   17e80:	beq	17884 <__assert_fail@plt+0x64a0>
   17e84:	ldr	sl, [sp, #32]
   17e88:	mov	r8, fp
   17e8c:	b	17948 <__assert_fail@plt+0x6564>
   17e90:	ldr	r3, [sp, #28]
   17e94:	cmp	r3, #0
   17e98:	bne	183ec <__assert_fail@plt+0x7008>
   17e9c:	add	sl, sl, #1
   17ea0:	ldr	r6, [sp, #40]	; 0x28
   17ea4:	mov	r5, #0
   17ea8:	mov	r4, #92	; 0x5c
   17eac:	b	17740 <__assert_fail@plt+0x635c>
   17eb0:	cmp	r9, r8
   17eb4:	bne	18124 <__assert_fail@plt+0x6d40>
   17eb8:	ldr	r0, [sp, #100]	; 0x64
   17ebc:	bl	111a4 <iswprint@plt>
   17ec0:	add	r5, r5, r4
   17ec4:	cmp	r0, #0
   17ec8:	add	r0, sp, #104	; 0x68
   17ecc:	moveq	r6, #0
   17ed0:	bl	11144 <mbsinit@plt>
   17ed4:	cmp	r0, #0
   17ed8:	beq	180b8 <__assert_fail@plt+0x6cd4>
   17edc:	mov	r2, r6
   17ee0:	mov	ip, r5
   17ee4:	eor	r5, r2, #1
   17ee8:	ldr	r4, [sp, #80]	; 0x50
   17eec:	ldr	r6, [sp, #84]	; 0x54
   17ef0:	ldr	r7, [sp, #88]	; 0x58
   17ef4:	uxtb	r5, r5
   17ef8:	cmp	ip, #1
   17efc:	bls	183fc <__assert_fail@plt+0x7018>
   17f00:	ldr	r3, [sp, #44]	; 0x2c
   17f04:	and	r8, r3, r5
   17f08:	mov	r5, r2
   17f0c:	uxtb	r8, r8
   17f10:	add	r2, sl, ip
   17f14:	ldr	r0, [sp, #48]	; 0x30
   17f18:	mov	r1, #0
   17f1c:	str	r5, [sp, #48]	; 0x30
   17f20:	ldr	r9, [sp, #28]
   17f24:	ldr	ip, [sp, #40]	; 0x28
   17f28:	ldr	r3, [sp, #32]
   17f2c:	ldr	r5, [sp, #152]	; 0x98
   17f30:	b	17fec <__assert_fail@plt+0x6c08>
   17f34:	cmp	r9, #0
   17f38:	bne	18310 <__assert_fail@plt+0x6f2c>
   17f3c:	eor	r1, ip, #1
   17f40:	cmp	r5, #2
   17f44:	movne	r1, #0
   17f48:	andeq	r1, r1, #1
   17f4c:	cmp	r1, #0
   17f50:	beq	17f88 <__assert_fail@plt+0x6ba4>
   17f54:	cmp	fp, r7
   17f58:	movhi	ip, #39	; 0x27
   17f5c:	strbhi	ip, [r3, r7]
   17f60:	add	ip, r7, #1
   17f64:	cmp	fp, ip
   17f68:	movhi	lr, #36	; 0x24
   17f6c:	strbhi	lr, [r3, ip]
   17f70:	add	ip, r7, #2
   17f74:	cmp	fp, ip
   17f78:	movhi	lr, #39	; 0x27
   17f7c:	strbhi	lr, [r3, ip]
   17f80:	add	r7, r7, #3
   17f84:	mov	ip, r1
   17f88:	cmp	fp, r7
   17f8c:	movhi	r1, #92	; 0x5c
   17f90:	strbhi	r1, [r3, r7]
   17f94:	add	r1, r7, #1
   17f98:	cmp	fp, r1
   17f9c:	lsrhi	lr, r4, #6
   17fa0:	addhi	lr, lr, #48	; 0x30
   17fa4:	strbhi	lr, [r3, r1]
   17fa8:	add	lr, r7, #2
   17fac:	cmp	fp, lr
   17fb0:	lsrhi	r1, r4, #3
   17fb4:	andhi	r1, r1, #7
   17fb8:	addhi	r1, r1, #48	; 0x30
   17fbc:	add	sl, sl, #1
   17fc0:	strbhi	r1, [r3, lr]
   17fc4:	and	r4, r4, #7
   17fc8:	cmp	r2, sl
   17fcc:	add	r4, r4, #48	; 0x30
   17fd0:	add	r7, r7, #3
   17fd4:	bls	18334 <__assert_fail@plt+0x6f50>
   17fd8:	mov	r1, r8
   17fdc:	cmp	fp, r7
   17fe0:	strbhi	r4, [r3, r7]
   17fe4:	ldrb	r4, [r0, #1]!
   17fe8:	add	r7, r7, #1
   17fec:	cmp	r8, #0
   17ff0:	bne	17f34 <__assert_fail@plt+0x6b50>
   17ff4:	cmp	r6, #0
   17ff8:	bne	18048 <__assert_fail@plt+0x6c64>
   17ffc:	eor	r6, r1, #1
   18000:	and	r6, r6, ip
   18004:	add	sl, sl, #1
   18008:	cmp	r2, sl
   1800c:	uxtb	r6, r6
   18010:	bls	18070 <__assert_fail@plt+0x6c8c>
   18014:	cmp	r6, #0
   18018:	beq	17fdc <__assert_fail@plt+0x6bf8>
   1801c:	cmp	fp, r7
   18020:	movhi	ip, #39	; 0x27
   18024:	strbhi	ip, [r3, r7]
   18028:	add	ip, r7, #1
   1802c:	cmp	fp, ip
   18030:	movhi	lr, #39	; 0x27
   18034:	strbhi	lr, [r3, ip]
   18038:	add	r7, r7, #2
   1803c:	mov	r6, r8
   18040:	mov	ip, r8
   18044:	b	17fdc <__assert_fail@plt+0x6bf8>
   18048:	cmp	fp, r7
   1804c:	eor	r6, r1, #1
   18050:	movhi	lr, #92	; 0x5c
   18054:	and	r6, r6, ip
   18058:	add	sl, sl, #1
   1805c:	strbhi	lr, [r3, r7]
   18060:	cmp	r2, sl
   18064:	add	r7, r7, #1
   18068:	uxtb	r6, r6
   1806c:	bhi	18014 <__assert_fail@plt+0x6c30>
   18070:	str	ip, [sp, #40]	; 0x28
   18074:	ldr	r5, [sp, #48]	; 0x30
   18078:	b	17740 <__assert_fail@plt+0x635c>
   1807c:	ldr	r3, [sp, #24]
   18080:	cmn	r3, #1
   18084:	mov	r3, #0
   18088:	str	r3, [sp, #104]	; 0x68
   1808c:	str	r3, [sp, #108]	; 0x6c
   18090:	beq	183b0 <__assert_fail@plt+0x6fcc>
   18094:	mov	r2, r5
   18098:	mov	r3, #0
   1809c:	str	r7, [sp, #88]	; 0x58
   180a0:	ldr	r7, [sp, #152]	; 0x98
   180a4:	str	r5, [sp, #92]	; 0x5c
   180a8:	str	r6, [sp, #84]	; 0x54
   180ac:	mov	r5, r3
   180b0:	mov	r6, r2
   180b4:	str	r4, [sp, #80]	; 0x50
   180b8:	ldr	r3, [sp, #56]	; 0x38
   180bc:	add	r9, sl, r5
   180c0:	add	r8, r3, r9
   180c4:	ldr	r3, [sp, #24]
   180c8:	mov	r1, r8
   180cc:	sub	r2, r3, r9
   180d0:	add	r0, sp, #100	; 0x64
   180d4:	add	r3, sp, #104	; 0x68
   180d8:	bl	1b58c <__assert_fail@plt+0xa1a8>
   180dc:	subs	r4, r0, #0
   180e0:	beq	18488 <__assert_fail@plt+0x70a4>
   180e4:	cmn	r4, #1
   180e8:	beq	18468 <__assert_fail@plt+0x7084>
   180ec:	cmn	r4, #2
   180f0:	beq	18408 <__assert_fail@plt+0x7024>
   180f4:	ldr	r2, [sp, #28]
   180f8:	cmp	r7, #2
   180fc:	movne	r2, #0
   18100:	andeq	r2, r2, #1
   18104:	cmp	r2, #0
   18108:	beq	17eb8 <__assert_fail@plt+0x6ad4>
   1810c:	cmp	r4, #1
   18110:	beq	17eb8 <__assert_fail@plt+0x6ad4>
   18114:	sub	r3, r4, #1
   18118:	add	r9, r3, r9
   1811c:	ldr	r3, [sp, #56]	; 0x38
   18120:	add	r9, r3, r9
   18124:	ldrb	r3, [r8, #1]!
   18128:	sub	r3, r3, #91	; 0x5b
   1812c:	cmp	r3, #33	; 0x21
   18130:	ldrls	pc, [pc, r3, lsl #2]
   18134:	b	17eb0 <__assert_fail@plt+0x6acc>
   18138:	andeq	r8, r1, r0, asr #3
   1813c:	andeq	r8, r1, r0, asr #3
   18140:			; <UNDEFINED> instruction: 0x00017eb0
   18144:	andeq	r8, r1, r0, asr #3
   18148:			; <UNDEFINED> instruction: 0x00017eb0
   1814c:	andeq	r8, r1, r0, asr #3
   18150:			; <UNDEFINED> instruction: 0x00017eb0
   18154:			; <UNDEFINED> instruction: 0x00017eb0
   18158:			; <UNDEFINED> instruction: 0x00017eb0
   1815c:			; <UNDEFINED> instruction: 0x00017eb0
   18160:			; <UNDEFINED> instruction: 0x00017eb0
   18164:			; <UNDEFINED> instruction: 0x00017eb0
   18168:			; <UNDEFINED> instruction: 0x00017eb0
   1816c:			; <UNDEFINED> instruction: 0x00017eb0
   18170:			; <UNDEFINED> instruction: 0x00017eb0
   18174:			; <UNDEFINED> instruction: 0x00017eb0
   18178:			; <UNDEFINED> instruction: 0x00017eb0
   1817c:			; <UNDEFINED> instruction: 0x00017eb0
   18180:			; <UNDEFINED> instruction: 0x00017eb0
   18184:			; <UNDEFINED> instruction: 0x00017eb0
   18188:			; <UNDEFINED> instruction: 0x00017eb0
   1818c:			; <UNDEFINED> instruction: 0x00017eb0
   18190:			; <UNDEFINED> instruction: 0x00017eb0
   18194:			; <UNDEFINED> instruction: 0x00017eb0
   18198:			; <UNDEFINED> instruction: 0x00017eb0
   1819c:			; <UNDEFINED> instruction: 0x00017eb0
   181a0:			; <UNDEFINED> instruction: 0x00017eb0
   181a4:			; <UNDEFINED> instruction: 0x00017eb0
   181a8:			; <UNDEFINED> instruction: 0x00017eb0
   181ac:			; <UNDEFINED> instruction: 0x00017eb0
   181b0:			; <UNDEFINED> instruction: 0x00017eb0
   181b4:			; <UNDEFINED> instruction: 0x00017eb0
   181b8:			; <UNDEFINED> instruction: 0x00017eb0
   181bc:	andeq	r8, r1, r0, asr #3
   181c0:	mov	r3, #2
   181c4:	ldr	sl, [sp, #32]
   181c8:	mov	r8, fp
   181cc:	str	r3, [sp, #152]	; 0x98
   181d0:	b	17948 <__assert_fail@plt+0x6564>
   181d4:	ldr	r3, [sp, #156]	; 0x9c
   181d8:	tst	r3, #1
   181dc:	bne	18308 <__assert_fail@plt+0x6f24>
   181e0:	ldr	r3, [sp, #152]	; 0x98
   181e4:	ldr	r4, [sp, #44]	; 0x2c
   181e8:	sub	r2, r3, #2
   181ec:	mov	r5, #0
   181f0:	clz	r2, r2
   181f4:	mov	r8, r4
   181f8:	lsr	r2, r2, #5
   181fc:	b	17708 <__assert_fail@plt+0x6324>
   18200:	ldr	r3, [sp, #156]	; 0x9c
   18204:	ands	r9, r3, #4
   18208:	beq	18340 <__assert_fail@plt+0x6f5c>
   1820c:	ldr	r2, [sp, #24]
   18210:	add	r3, sl, #2
   18214:	cmp	r3, r2
   18218:	bcs	1822c <__assert_fail@plt+0x6e48>
   1821c:	ldr	r2, [sp, #48]	; 0x30
   18220:	ldrb	r4, [r2, #1]
   18224:	cmp	r4, #63	; 0x3f
   18228:	beq	184c8 <__assert_fail@plt+0x70e4>
   1822c:	mov	r2, #0
   18230:	mov	r8, r2
   18234:	mov	r5, r2
   18238:	mov	r4, #63	; 0x3f
   1823c:	b	17708 <__assert_fail@plt+0x6324>
   18240:	ldr	r3, [sp, #28]
   18244:	cmp	r3, #0
   18248:	bne	1856c <__assert_fail@plt+0x7188>
   1824c:	mov	r2, r5
   18250:	mov	r8, r3
   18254:	mov	r5, #0
   18258:	mov	r4, #63	; 0x3f
   1825c:	b	17708 <__assert_fail@plt+0x6324>
   18260:	ldr	r3, [sp, #28]
   18264:	cmp	r3, #0
   18268:	bne	1856c <__assert_fail@plt+0x7188>
   1826c:	ldr	r2, [sp, #72]	; 0x48
   18270:	adds	r3, fp, #0
   18274:	movne	r3, #1
   18278:	cmp	r2, #0
   1827c:	movne	r3, #0
   18280:	cmp	r3, #0
   18284:	strne	fp, [sp, #72]	; 0x48
   18288:	movne	fp, #0
   1828c:	bne	182c8 <__assert_fail@plt+0x6ee4>
   18290:	cmp	fp, r7
   18294:	movhi	r2, #39	; 0x27
   18298:	ldrhi	r3, [sp, #32]
   1829c:	strbhi	r2, [r3, r7]
   182a0:	add	r3, r7, #1
   182a4:	cmp	fp, r3
   182a8:	movhi	r1, #92	; 0x5c
   182ac:	ldrhi	r2, [sp, #32]
   182b0:	strbhi	r1, [r2, r3]
   182b4:	add	r3, r7, #2
   182b8:	cmp	fp, r3
   182bc:	movhi	r1, #39	; 0x27
   182c0:	ldrhi	r2, [sp, #32]
   182c4:	strbhi	r1, [r2, r3]
   182c8:	ldr	r3, [sp, #28]
   182cc:	add	r7, r7, #3
   182d0:	mov	r2, r5
   182d4:	mov	r8, r3
   182d8:	str	r5, [sp, #68]	; 0x44
   182dc:	str	r3, [sp, #40]	; 0x28
   182e0:	mov	r4, #39	; 0x27
   182e4:	b	17708 <__assert_fail@plt+0x6324>
   182e8:	ldr	r3, [sp, #56]	; 0x38
   182ec:	ldrb	r3, [r3, #1]
   182f0:	adds	r3, r3, #0
   182f4:	movne	r3, #1
   182f8:	b	176e0 <__assert_fail@plt+0x62fc>
   182fc:	ldr	r5, [sp, #28]
   18300:	mov	r4, #48	; 0x30
   18304:	b	17708 <__assert_fail@plt+0x6324>
   18308:	add	sl, sl, #1
   1830c:	b	17238 <__assert_fail@plt+0x5e54>
   18310:	mov	sl, r3
   18314:	ldr	r3, [sp, #28]
   18318:	mov	r8, fp
   1831c:	str	r3, [sp, #44]	; 0x2c
   18320:	ldr	r3, [sp, #152]	; 0x98
   18324:	sub	r2, r3, #2
   18328:	clz	r2, r2
   1832c:	lsr	r2, r2, #5
   18330:	b	17948 <__assert_fail@plt+0x6564>
   18334:	str	ip, [sp, #40]	; 0x28
   18338:	ldr	r5, [sp, #48]	; 0x30
   1833c:	b	17778 <__assert_fail@plt+0x6394>
   18340:	mov	r2, r9
   18344:	mov	r8, r9
   18348:	mov	r5, #0
   1834c:	mov	r4, #63	; 0x3f
   18350:	b	17708 <__assert_fail@plt+0x6324>
   18354:	cmp	fp, #0
   18358:	beq	183d0 <__assert_fail@plt+0x6fec>
   1835c:	ldr	r1, [sp, #32]
   18360:	mov	r3, #34	; 0x22
   18364:	mov	r2, #1
   18368:	strb	r3, [r1]
   1836c:	ldr	r3, [pc, #332]	; 184c0 <__assert_fail@plt+0x70dc>
   18370:	str	r2, [sp, #52]	; 0x34
   18374:	mov	r7, r2
   18378:	str	r2, [sp, #44]	; 0x2c
   1837c:	str	r3, [sp, #64]	; 0x40
   18380:	b	17228 <__assert_fail@plt+0x5e44>
   18384:	ldr	r3, [pc, #300]	; 184b8 <__assert_fail@plt+0x70d4>
   18388:	str	r3, [sp, #64]	; 0x40
   1838c:	mov	r3, #0
   18390:	str	r3, [sp, #28]
   18394:	mov	r3, #1
   18398:	str	r3, [sp, #52]	; 0x34
   1839c:	mov	r7, r3
   183a0:	mov	r3, #2
   183a4:	str	r3, [sp, #152]	; 0x98
   183a8:	b	17228 <__assert_fail@plt+0x5e44>
   183ac:	bl	113cc <abort@plt>
   183b0:	ldr	r0, [sp, #56]	; 0x38
   183b4:	bl	11294 <strlen@plt>
   183b8:	str	r0, [sp, #24]
   183bc:	b	18094 <__assert_fail@plt+0x6cb0>
   183c0:	mov	r5, r8
   183c4:	mov	r4, #48	; 0x30
   183c8:	ldr	r8, [sp, #44]	; 0x2c
   183cc:	b	17708 <__assert_fail@plt+0x6324>
   183d0:	mov	r3, #1
   183d4:	str	r3, [sp, #52]	; 0x34
   183d8:	mov	r7, r3
   183dc:	str	r3, [sp, #44]	; 0x2c
   183e0:	ldr	r3, [pc, #216]	; 184c0 <__assert_fail@plt+0x70dc>
   183e4:	str	r3, [sp, #64]	; 0x40
   183e8:	b	17228 <__assert_fail@plt+0x5e44>
   183ec:	ldr	sl, [sp, #32]
   183f0:	mov	r8, fp
   183f4:	mov	r2, r3
   183f8:	b	17948 <__assert_fail@plt+0x6564>
   183fc:	mov	r3, r5
   18400:	mov	r5, r2
   18404:	b	17c00 <__assert_fail@plt+0x681c>
   18408:	ldr	r1, [sp, #24]
   1840c:	mov	r2, r5
   18410:	cmp	r1, r9
   18414:	mov	ip, r5
   18418:	ldr	r4, [sp, #80]	; 0x50
   1841c:	ldr	r5, [sp, #92]	; 0x5c
   18420:	ldr	r6, [sp, #84]	; 0x54
   18424:	ldr	r7, [sp, #88]	; 0x58
   18428:	bls	1845c <__assert_fail@plt+0x7078>
   1842c:	ldrb	r3, [r8]
   18430:	cmp	r3, #0
   18434:	bne	18448 <__assert_fail@plt+0x7064>
   18438:	b	18460 <__assert_fail@plt+0x707c>
   1843c:	ldrb	r3, [r8, #1]!
   18440:	cmp	r3, #0
   18444:	beq	18560 <__assert_fail@plt+0x717c>
   18448:	add	r2, r2, #1
   1844c:	add	r3, sl, r2
   18450:	cmp	r1, r3
   18454:	bhi	1843c <__assert_fail@plt+0x7058>
   18458:	mov	ip, r2
   1845c:	mov	r3, #0
   18460:	mov	r2, r3
   18464:	b	17ef8 <__assert_fail@plt+0x6b14>
   18468:	mov	r3, #0
   1846c:	mov	ip, r5
   18470:	ldr	r4, [sp, #80]	; 0x50
   18474:	ldr	r5, [sp, #92]	; 0x5c
   18478:	ldr	r6, [sp, #84]	; 0x54
   1847c:	ldr	r7, [sp, #88]	; 0x58
   18480:	mov	r2, r3
   18484:	b	17ef8 <__assert_fail@plt+0x6b14>
   18488:	mov	r3, r6
   1848c:	mov	ip, r5
   18490:	eor	r5, r3, #1
   18494:	mov	r2, r6
   18498:	ldr	r4, [sp, #80]	; 0x50
   1849c:	ldr	r6, [sp, #84]	; 0x54
   184a0:	ldr	r7, [sp, #88]	; 0x58
   184a4:	uxtb	r5, r5
   184a8:	b	17ef8 <__assert_fail@plt+0x6b14>
   184ac:	ldr	sl, [sp, #32]
   184b0:	mov	r8, fp
   184b4:	b	1831c <__assert_fail@plt+0x6f38>
   184b8:	andeq	sp, r1, r0, lsl r6
   184bc:	andeq	sp, r1, r4, lsl r6
   184c0:	andeq	sp, r1, ip, lsl #12
   184c4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   184c8:	ldr	r2, [sp, #56]	; 0x38
   184cc:	ldrb	r1, [r2, r3]
   184d0:	sub	r2, r1, #33	; 0x21
   184d4:	uxtb	r2, r2
   184d8:	cmp	r2, #29
   184dc:	bhi	1857c <__assert_fail@plt+0x7198>
   184e0:	ldr	r0, [pc, #-36]	; 184c4 <__assert_fail@plt+0x70e0>
   184e4:	mov	ip, #1
   184e8:	ands	r2, r0, ip, lsl r2
   184ec:	beq	1858c <__assert_fail@plt+0x71a8>
   184f0:	ldr	r2, [sp, #28]
   184f4:	cmp	r2, #0
   184f8:	bne	1868c <__assert_fail@plt+0x72a8>
   184fc:	cmp	fp, r7
   18500:	ldr	r8, [sp, #28]
   18504:	ldrhi	r2, [sp, #32]
   18508:	mov	sl, r3
   1850c:	mov	r5, r8
   18510:	strbhi	r4, [r2, r7]
   18514:	add	r2, r7, #1
   18518:	cmp	fp, r2
   1851c:	movhi	r0, #34	; 0x22
   18520:	ldrhi	ip, [sp, #32]
   18524:	mov	r4, r1
   18528:	strbhi	r0, [ip, r2]
   1852c:	add	r2, r7, #2
   18530:	cmp	fp, r2
   18534:	movhi	r0, #34	; 0x22
   18538:	ldrhi	ip, [sp, #32]
   1853c:	strbhi	r0, [ip, r2]
   18540:	add	r2, r7, #3
   18544:	cmp	fp, r2
   18548:	movhi	r0, #63	; 0x3f
   1854c:	ldrhi	ip, [sp, #32]
   18550:	add	r7, r7, #4
   18554:	strbhi	r0, [ip, r2]
   18558:	mov	r2, r8
   1855c:	b	17708 <__assert_fail@plt+0x6324>
   18560:	mov	ip, r2
   18564:	mov	r2, r3
   18568:	b	17ef8 <__assert_fail@plt+0x6b14>
   1856c:	ldr	sl, [sp, #32]
   18570:	mov	r8, fp
   18574:	ldr	r2, [sp, #28]
   18578:	b	17948 <__assert_fail@plt+0x6564>
   1857c:	mov	r2, #0
   18580:	mov	r8, r2
   18584:	mov	r5, r2
   18588:	b	17708 <__assert_fail@plt+0x6324>
   1858c:	mov	r8, r2
   18590:	mov	r5, #0
   18594:	b	17708 <__assert_fail@plt+0x6324>
   18598:	ldr	r1, [sp, #152]	; 0x98
   1859c:	bl	17064 <__assert_fail@plt+0x5c80>
   185a0:	str	r0, [sp, #168]	; 0xa8
   185a4:	b	175c4 <__assert_fail@plt+0x61e0>
   185a8:	ldr	r1, [sp, #152]	; 0x98
   185ac:	bl	17064 <__assert_fail@plt+0x5c80>
   185b0:	str	r0, [sp, #164]	; 0xa4
   185b4:	b	175a4 <__assert_fail@plt+0x61c0>
   185b8:	ldr	r7, [sp, #28]
   185bc:	b	17604 <__assert_fail@plt+0x6220>
   185c0:	ldr	sl, [sp, #32]
   185c4:	ldr	r2, [sp, #68]	; 0x44
   185c8:	mov	r8, fp
   185cc:	mov	fp, r7
   185d0:	ldr	r3, [sp, #64]	; 0x40
   185d4:	cmp	r3, #0
   185d8:	moveq	r2, #0
   185dc:	andne	r2, r2, #1
   185e0:	cmp	r2, #0
   185e4:	beq	18610 <__assert_fail@plt+0x722c>
   185e8:	mov	r2, r3
   185ec:	ldrb	r3, [r3]
   185f0:	cmp	r3, #0
   185f4:	beq	18610 <__assert_fail@plt+0x722c>
   185f8:	cmp	r8, fp
   185fc:	strbhi	r3, [sl, fp]
   18600:	ldrb	r3, [r2, #1]!
   18604:	add	fp, fp, #1
   18608:	cmp	r3, #0
   1860c:	bne	185f8 <__assert_fail@plt+0x7214>
   18610:	cmp	r8, fp
   18614:	movhi	r3, #0
   18618:	strbhi	r3, [sl, fp]
   1861c:	b	179a4 <__assert_fail@plt+0x65c0>
   18620:	ldr	r3, [sp, #168]	; 0xa8
   18624:	ldr	sl, [sp, #32]
   18628:	str	r3, [sp, #16]
   1862c:	ldr	r3, [sp, #164]	; 0xa4
   18630:	mov	ip, #5
   18634:	str	r3, [sp, #12]
   18638:	ldr	r3, [sp, #160]	; 0xa0
   1863c:	ldr	r2, [sp, #56]	; 0x38
   18640:	str	r3, [sp, #8]
   18644:	ldr	r3, [sp, #156]	; 0x9c
   18648:	ldr	r1, [sp, #72]	; 0x48
   1864c:	str	r3, [sp, #4]
   18650:	mov	r0, sl
   18654:	ldr	r3, [sp, #24]
   18658:	str	ip, [sp]
   1865c:	bl	17184 <__assert_fail@plt+0x5da0>
   18660:	mov	fp, r0
   18664:	b	179a4 <__assert_fail@plt+0x65c0>
   18668:	mov	r8, fp
   1866c:	ldr	sl, [sp, #32]
   18670:	mov	fp, r7
   18674:	mov	r2, r3
   18678:	b	185d0 <__assert_fail@plt+0x71ec>
   1867c:	mov	r8, fp
   18680:	ldr	sl, [sp, #32]
   18684:	mov	fp, r7
   18688:	b	185d0 <__assert_fail@plt+0x71ec>
   1868c:	ldr	sl, [sp, #32]
   18690:	mov	r8, fp
   18694:	b	17960 <__assert_fail@plt+0x657c>
   18698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1869c:	sub	sp, sp, #52	; 0x34
   186a0:	mov	r4, r0
   186a4:	mov	r5, r3
   186a8:	mov	sl, r1
   186ac:	mov	fp, r2
   186b0:	bl	112c4 <__errno_location@plt>
   186b4:	ldr	r7, [pc, #412]	; 18858 <__assert_fail@plt+0x7474>
   186b8:	cmn	r4, #-2147483647	; 0x80000001
   186bc:	ldr	r6, [r7]
   186c0:	mov	r8, r0
   186c4:	movne	r0, #0
   186c8:	moveq	r0, #1
   186cc:	ldr	r3, [r8]
   186d0:	orrs	r0, r0, r4, lsr #31
   186d4:	str	r3, [sp, #24]
   186d8:	bne	18854 <__assert_fail@plt+0x7470>
   186dc:	ldr	r2, [r7, #4]
   186e0:	cmp	r4, r2
   186e4:	blt	18744 <__assert_fail@plt+0x7360>
   186e8:	add	r9, r7, #8
   186ec:	cmp	r6, r9
   186f0:	str	r2, [sp, #44]	; 0x2c
   186f4:	beq	18824 <__assert_fail@plt+0x7440>
   186f8:	mov	r3, #8
   186fc:	sub	r2, r4, r2
   18700:	mov	r0, r6
   18704:	str	r3, [sp]
   18708:	add	r2, r2, #1
   1870c:	mvn	r3, #-2147483648	; 0x80000000
   18710:	add	r1, sp, #44	; 0x2c
   18714:	bl	19a34 <__assert_fail@plt+0x8650>
   18718:	mov	r6, r0
   1871c:	str	r0, [r7]
   18720:	ldr	r0, [r7, #4]
   18724:	ldr	r2, [sp, #44]	; 0x2c
   18728:	mov	r1, #0
   1872c:	sub	r2, r2, r0
   18730:	add	r0, r6, r0, lsl #3
   18734:	lsl	r2, r2, #3
   18738:	bl	112e8 <memset@plt>
   1873c:	ldr	r3, [sp, #44]	; 0x2c
   18740:	str	r3, [r7, #4]
   18744:	add	r3, r6, r4, lsl #3
   18748:	ldr	r1, [r5, #4]
   1874c:	ldr	r7, [r3, #4]
   18750:	ldr	r9, [r6, r4, lsl #3]
   18754:	ldr	r2, [r5, #40]	; 0x28
   18758:	ldr	ip, [r5, #44]	; 0x2c
   1875c:	add	r0, r5, #8
   18760:	str	r3, [sp, #28]
   18764:	ldr	r3, [r5]
   18768:	orr	r1, r1, #1
   1876c:	mov	lr, r0
   18770:	str	r1, [sp, #32]
   18774:	str	r0, [sp, #36]	; 0x24
   18778:	str	r1, [sp, #4]
   1877c:	str	r2, [sp, #12]
   18780:	str	r3, [sp]
   18784:	mov	r0, r7
   18788:	mov	r1, r9
   1878c:	str	ip, [sp, #16]
   18790:	str	lr, [sp, #8]
   18794:	mov	r3, fp
   18798:	mov	r2, sl
   1879c:	bl	17184 <__assert_fail@plt+0x5da0>
   187a0:	cmp	r9, r0
   187a4:	bhi	18810 <__assert_fail@plt+0x742c>
   187a8:	ldr	r3, [pc, #172]	; 1885c <__assert_fail@plt+0x7478>
   187ac:	add	r9, r0, #1
   187b0:	cmp	r7, r3
   187b4:	str	r9, [r6, r4, lsl #3]
   187b8:	beq	187c4 <__assert_fail@plt+0x73e0>
   187bc:	mov	r0, r7
   187c0:	bl	15110 <__assert_fail@plt+0x3d2c>
   187c4:	mov	r0, r9
   187c8:	bl	198d0 <__assert_fail@plt+0x84ec>
   187cc:	ldr	lr, [sp, #28]
   187d0:	ldr	ip, [r5, #44]	; 0x2c
   187d4:	ldr	r4, [r5, #40]	; 0x28
   187d8:	mov	r3, fp
   187dc:	mov	r2, sl
   187e0:	mov	r1, r9
   187e4:	str	r0, [lr, #4]
   187e8:	ldr	lr, [r5]
   187ec:	ldr	r5, [sp, #36]	; 0x24
   187f0:	str	ip, [sp, #16]
   187f4:	str	r5, [sp, #8]
   187f8:	ldr	r5, [sp, #32]
   187fc:	str	r4, [sp, #12]
   18800:	str	r5, [sp, #4]
   18804:	str	lr, [sp]
   18808:	mov	r7, r0
   1880c:	bl	17184 <__assert_fail@plt+0x5da0>
   18810:	ldr	r3, [sp, #24]
   18814:	mov	r0, r7
   18818:	str	r3, [r8]
   1881c:	add	sp, sp, #52	; 0x34
   18820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18824:	mov	r3, #8
   18828:	sub	r2, r4, r2
   1882c:	str	r3, [sp]
   18830:	add	r1, sp, #44	; 0x2c
   18834:	add	r2, r2, #1
   18838:	mvn	r3, #-2147483648	; 0x80000000
   1883c:	bl	19a34 <__assert_fail@plt+0x8650>
   18840:	mov	r6, r0
   18844:	ldm	r9, {r0, r1}
   18848:	str	r6, [r7]
   1884c:	stm	r6, {r0, r1}
   18850:	b	18720 <__assert_fail@plt+0x733c>
   18854:	bl	113cc <abort@plt>
   18858:	andeq	lr, r2, r8, lsl #3
   1885c:			; <UNDEFINED> instruction: 0x0002e2b8
   18860:	push	{r4, r5, r6, lr}
   18864:	mov	r5, r0
   18868:	bl	112c4 <__errno_location@plt>
   1886c:	cmp	r5, #0
   18870:	mov	r1, #48	; 0x30
   18874:	mov	r4, r0
   18878:	ldr	r0, [pc, #16]	; 18890 <__assert_fail@plt+0x74ac>
   1887c:	ldr	r6, [r4]
   18880:	movne	r0, r5
   18884:	bl	19d30 <__assert_fail@plt+0x894c>
   18888:	str	r6, [r4]
   1888c:	pop	{r4, r5, r6, pc}
   18890:			; <UNDEFINED> instruction: 0x0002e3b8
   18894:	ldr	r3, [pc, #12]	; 188a8 <__assert_fail@plt+0x74c4>
   18898:	cmp	r0, #0
   1889c:	moveq	r0, r3
   188a0:	ldr	r0, [r0]
   188a4:	bx	lr
   188a8:			; <UNDEFINED> instruction: 0x0002e3b8
   188ac:	ldr	r3, [pc, #12]	; 188c0 <__assert_fail@plt+0x74dc>
   188b0:	cmp	r0, #0
   188b4:	moveq	r0, r3
   188b8:	str	r1, [r0]
   188bc:	bx	lr
   188c0:			; <UNDEFINED> instruction: 0x0002e3b8
   188c4:	ldr	r3, [pc, #52]	; 18900 <__assert_fail@plt+0x751c>
   188c8:	cmp	r0, #0
   188cc:	moveq	r0, r3
   188d0:	add	r3, r0, #8
   188d4:	push	{lr}		; (str lr, [sp, #-4]!)
   188d8:	lsr	lr, r1, #5
   188dc:	and	r1, r1, #31
   188e0:	ldr	ip, [r3, lr, lsl #2]
   188e4:	lsr	r0, ip, r1
   188e8:	eor	r2, r2, r0
   188ec:	and	r2, r2, #1
   188f0:	and	r0, r0, #1
   188f4:	eor	r1, ip, r2, lsl r1
   188f8:	str	r1, [r3, lr, lsl #2]
   188fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18900:			; <UNDEFINED> instruction: 0x0002e3b8
   18904:	ldr	r3, [pc, #16]	; 1891c <__assert_fail@plt+0x7538>
   18908:	cmp	r0, #0
   1890c:	movne	r3, r0
   18910:	ldr	r0, [r3, #4]
   18914:	str	r1, [r3, #4]
   18918:	bx	lr
   1891c:			; <UNDEFINED> instruction: 0x0002e3b8
   18920:	ldr	r3, [pc, #44]	; 18954 <__assert_fail@plt+0x7570>
   18924:	cmp	r0, #0
   18928:	moveq	r0, r3
   1892c:	mov	ip, #10
   18930:	cmp	r2, #0
   18934:	cmpne	r1, #0
   18938:	str	ip, [r0]
   1893c:	beq	1894c <__assert_fail@plt+0x7568>
   18940:	str	r1, [r0, #40]	; 0x28
   18944:	str	r2, [r0, #44]	; 0x2c
   18948:	bx	lr
   1894c:	push	{r4, lr}
   18950:	bl	113cc <abort@plt>
   18954:			; <UNDEFINED> instruction: 0x0002e3b8
   18958:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1895c:	sub	sp, sp, #24
   18960:	ldr	ip, [pc, #108]	; 189d4 <__assert_fail@plt+0x75f0>
   18964:	ldr	r4, [sp, #56]	; 0x38
   18968:	mov	r9, r2
   1896c:	cmp	r4, #0
   18970:	moveq	r4, ip
   18974:	mov	sl, r3
   18978:	mov	r7, r0
   1897c:	mov	r8, r1
   18980:	bl	112c4 <__errno_location@plt>
   18984:	ldr	r3, [r4, #44]	; 0x2c
   18988:	mov	r1, r8
   1898c:	ldr	r6, [r0]
   18990:	str	r3, [sp, #16]
   18994:	ldr	r2, [r4, #40]	; 0x28
   18998:	add	r3, r4, #8
   1899c:	str	r3, [sp, #8]
   189a0:	str	r2, [sp, #12]
   189a4:	ldr	r2, [r4, #4]
   189a8:	mov	r5, r0
   189ac:	str	r2, [sp, #4]
   189b0:	ldr	ip, [r4]
   189b4:	mov	r3, sl
   189b8:	mov	r2, r9
   189bc:	mov	r0, r7
   189c0:	str	ip, [sp]
   189c4:	bl	17184 <__assert_fail@plt+0x5da0>
   189c8:	str	r6, [r5]
   189cc:	add	sp, sp, #24
   189d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   189d4:			; <UNDEFINED> instruction: 0x0002e3b8
   189d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189dc:	cmp	r3, #0
   189e0:	sub	sp, sp, #44	; 0x2c
   189e4:	ldr	r4, [pc, #192]	; 18aac <__assert_fail@plt+0x76c8>
   189e8:	mov	r6, r2
   189ec:	movne	r4, r3
   189f0:	mov	r9, r1
   189f4:	mov	r8, r0
   189f8:	bl	112c4 <__errno_location@plt>
   189fc:	ldr	r3, [r4, #44]	; 0x2c
   18a00:	ldr	r5, [r4, #4]
   18a04:	add	sl, r4, #8
   18a08:	cmp	r6, #0
   18a0c:	orreq	r5, r5, #1
   18a10:	mov	r1, #0
   18a14:	ldr	r2, [r0]
   18a18:	str	r3, [sp, #16]
   18a1c:	ldr	r3, [r4, #40]	; 0x28
   18a20:	stmib	sp, {r5, sl}
   18a24:	str	r3, [sp, #12]
   18a28:	ldr	r3, [r4]
   18a2c:	mov	r7, r0
   18a30:	str	r2, [sp, #28]
   18a34:	str	r3, [sp]
   18a38:	mov	r2, r8
   18a3c:	mov	r3, r9
   18a40:	mov	r0, r1
   18a44:	bl	17184 <__assert_fail@plt+0x5da0>
   18a48:	add	r1, r0, #1
   18a4c:	mov	fp, r0
   18a50:	mov	r0, r1
   18a54:	str	r1, [sp, #36]	; 0x24
   18a58:	bl	198d0 <__assert_fail@plt+0x84ec>
   18a5c:	ldr	r3, [r4, #44]	; 0x2c
   18a60:	mov	r2, r8
   18a64:	str	r3, [sp, #16]
   18a68:	ldr	r3, [r4, #40]	; 0x28
   18a6c:	str	r5, [sp, #4]
   18a70:	str	r3, [sp, #12]
   18a74:	str	sl, [sp, #8]
   18a78:	ldr	ip, [r4]
   18a7c:	ldr	r1, [sp, #36]	; 0x24
   18a80:	mov	r3, r9
   18a84:	str	ip, [sp]
   18a88:	str	r0, [sp, #32]
   18a8c:	bl	17184 <__assert_fail@plt+0x5da0>
   18a90:	ldr	r2, [sp, #28]
   18a94:	cmp	r6, #0
   18a98:	str	r2, [r7]
   18a9c:	ldr	r0, [sp, #32]
   18aa0:	strne	fp, [r6]
   18aa4:	add	sp, sp, #44	; 0x2c
   18aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18aac:			; <UNDEFINED> instruction: 0x0002e3b8
   18ab0:	mov	r3, r2
   18ab4:	mov	r2, #0
   18ab8:	b	189d8 <__assert_fail@plt+0x75f4>
   18abc:	push	{r4, r5, r6, r7, r8, lr}
   18ac0:	ldr	r6, [pc, #116]	; 18b3c <__assert_fail@plt+0x7758>
   18ac4:	ldr	r3, [r6, #4]
   18ac8:	ldr	r7, [r6]
   18acc:	cmp	r3, #1
   18ad0:	movgt	r5, r7
   18ad4:	movgt	r4, #1
   18ad8:	ble	18af8 <__assert_fail@plt+0x7714>
   18adc:	ldr	r0, [r5, #12]
   18ae0:	bl	15110 <__assert_fail@plt+0x3d2c>
   18ae4:	ldr	r3, [r6, #4]
   18ae8:	add	r4, r4, #1
   18aec:	cmp	r3, r4
   18af0:	add	r5, r5, #8
   18af4:	bgt	18adc <__assert_fail@plt+0x76f8>
   18af8:	ldr	r0, [r7, #4]
   18afc:	ldr	r4, [pc, #60]	; 18b40 <__assert_fail@plt+0x775c>
   18b00:	cmp	r0, r4
   18b04:	beq	18b18 <__assert_fail@plt+0x7734>
   18b08:	bl	15110 <__assert_fail@plt+0x3d2c>
   18b0c:	mov	r3, #256	; 0x100
   18b10:	str	r4, [r6, #12]
   18b14:	str	r3, [r6, #8]
   18b18:	ldr	r4, [pc, #36]	; 18b44 <__assert_fail@plt+0x7760>
   18b1c:	cmp	r7, r4
   18b20:	beq	18b30 <__assert_fail@plt+0x774c>
   18b24:	mov	r0, r7
   18b28:	bl	15110 <__assert_fail@plt+0x3d2c>
   18b2c:	str	r4, [r6]
   18b30:	mov	r3, #1
   18b34:	str	r3, [r6, #4]
   18b38:	pop	{r4, r5, r6, r7, r8, pc}
   18b3c:	andeq	lr, r2, r8, lsl #3
   18b40:			; <UNDEFINED> instruction: 0x0002e2b8
   18b44:	muleq	r2, r0, r1
   18b48:	ldr	r3, [pc, #4]	; 18b54 <__assert_fail@plt+0x7770>
   18b4c:	mvn	r2, #0
   18b50:	b	18698 <__assert_fail@plt+0x72b4>
   18b54:			; <UNDEFINED> instruction: 0x0002e3b8
   18b58:	ldr	r3, [pc]	; 18b60 <__assert_fail@plt+0x777c>
   18b5c:	b	18698 <__assert_fail@plt+0x72b4>
   18b60:			; <UNDEFINED> instruction: 0x0002e3b8
   18b64:	mov	r1, r0
   18b68:	ldr	r3, [pc, #8]	; 18b78 <__assert_fail@plt+0x7794>
   18b6c:	mvn	r2, #0
   18b70:	mov	r0, #0
   18b74:	b	18698 <__assert_fail@plt+0x72b4>
   18b78:			; <UNDEFINED> instruction: 0x0002e3b8
   18b7c:	mov	r2, r1
   18b80:	ldr	r3, [pc, #8]	; 18b90 <__assert_fail@plt+0x77ac>
   18b84:	mov	r1, r0
   18b88:	mov	r0, #0
   18b8c:	b	18698 <__assert_fail@plt+0x72b4>
   18b90:			; <UNDEFINED> instruction: 0x0002e3b8
   18b94:	push	{r4, r5, lr}
   18b98:	sub	sp, sp, #52	; 0x34
   18b9c:	mov	r5, r2
   18ba0:	mov	r4, r0
   18ba4:	mov	r0, sp
   18ba8:	bl	17034 <__assert_fail@plt+0x5c50>
   18bac:	mov	r3, sp
   18bb0:	mov	r1, r5
   18bb4:	mov	r0, r4
   18bb8:	mvn	r2, #0
   18bbc:	bl	18698 <__assert_fail@plt+0x72b4>
   18bc0:	add	sp, sp, #52	; 0x34
   18bc4:	pop	{r4, r5, pc}
   18bc8:	push	{r4, r5, r6, lr}
   18bcc:	sub	sp, sp, #48	; 0x30
   18bd0:	mov	r5, r2
   18bd4:	mov	r6, r3
   18bd8:	mov	r4, r0
   18bdc:	mov	r0, sp
   18be0:	bl	17034 <__assert_fail@plt+0x5c50>
   18be4:	mov	r3, sp
   18be8:	mov	r2, r6
   18bec:	mov	r1, r5
   18bf0:	mov	r0, r4
   18bf4:	bl	18698 <__assert_fail@plt+0x72b4>
   18bf8:	add	sp, sp, #48	; 0x30
   18bfc:	pop	{r4, r5, r6, pc}
   18c00:	mov	r2, r1
   18c04:	mov	r1, r0
   18c08:	mov	r0, #0
   18c0c:	b	18b94 <__assert_fail@plt+0x77b0>
   18c10:	mov	r3, r2
   18c14:	mov	r2, r1
   18c18:	mov	r1, r0
   18c1c:	mov	r0, #0
   18c20:	b	18bc8 <__assert_fail@plt+0x77e4>
   18c24:	push	{r4, r5, r6, r7, r8, lr}
   18c28:	mov	r7, r0
   18c2c:	ldr	lr, [pc, #100]	; 18c98 <__assert_fail@plt+0x78b4>
   18c30:	mov	r8, r1
   18c34:	mov	r4, r2
   18c38:	ldm	lr!, {r0, r1, r2, r3}
   18c3c:	sub	sp, sp, #48	; 0x30
   18c40:	mov	ip, sp
   18c44:	lsr	r5, r4, #5
   18c48:	stmia	ip!, {r0, r1, r2, r3}
   18c4c:	add	r6, sp, #8
   18c50:	ldm	lr!, {r0, r1, r2, r3}
   18c54:	and	r4, r4, #31
   18c58:	stmia	ip!, {r0, r1, r2, r3}
   18c5c:	ldm	lr, {r0, r1, r2, r3}
   18c60:	stm	ip, {r0, r1, r2, r3}
   18c64:	mov	r2, r8
   18c68:	ldr	lr, [r6, r5, lsl #2]
   18c6c:	mov	r1, r7
   18c70:	mov	r3, sp
   18c74:	lsr	ip, lr, r4
   18c78:	eor	ip, ip, #1
   18c7c:	and	ip, ip, #1
   18c80:	mov	r0, #0
   18c84:	eor	r4, lr, ip, lsl r4
   18c88:	str	r4, [r6, r5, lsl #2]
   18c8c:	bl	18698 <__assert_fail@plt+0x72b4>
   18c90:	add	sp, sp, #48	; 0x30
   18c94:	pop	{r4, r5, r6, r7, r8, pc}
   18c98:			; <UNDEFINED> instruction: 0x0002e3b8
   18c9c:	mov	r2, r1
   18ca0:	mvn	r1, #0
   18ca4:	b	18c24 <__assert_fail@plt+0x7840>
   18ca8:	mov	r2, #58	; 0x3a
   18cac:	mvn	r1, #0
   18cb0:	b	18c24 <__assert_fail@plt+0x7840>
   18cb4:	mov	r2, #58	; 0x3a
   18cb8:	b	18c24 <__assert_fail@plt+0x7840>
   18cbc:	push	{r4, r5, r6, r7, lr}
   18cc0:	sub	sp, sp, #100	; 0x64
   18cc4:	mov	r6, r0
   18cc8:	mov	r0, sp
   18ccc:	mov	r7, r2
   18cd0:	bl	17034 <__assert_fail@plt+0x5c50>
   18cd4:	mov	ip, sp
   18cd8:	add	lr, sp, #48	; 0x30
   18cdc:	ldm	ip!, {r0, r1, r2, r3}
   18ce0:	stmia	lr!, {r0, r1, r2, r3}
   18ce4:	ldm	ip!, {r0, r1, r2, r3}
   18ce8:	ldr	r5, [sp, #60]	; 0x3c
   18cec:	stmia	lr!, {r0, r1, r2, r3}
   18cf0:	mvn	r4, r5
   18cf4:	ldm	ip, {r0, r1, r2, r3}
   18cf8:	and	ip, r4, #67108864	; 0x4000000
   18cfc:	eor	ip, ip, r5
   18d00:	str	ip, [sp, #60]	; 0x3c
   18d04:	stm	lr, {r0, r1, r2, r3}
   18d08:	mov	r1, r7
   18d0c:	mov	r0, r6
   18d10:	add	r3, sp, #48	; 0x30
   18d14:	mvn	r2, #0
   18d18:	bl	18698 <__assert_fail@plt+0x72b4>
   18d1c:	add	sp, sp, #100	; 0x64
   18d20:	pop	{r4, r5, r6, r7, pc}
   18d24:	push	{r4, r5, r6, r7, r8, lr}
   18d28:	mov	r5, r1
   18d2c:	ldr	lr, [pc, #100]	; 18d98 <__assert_fail@plt+0x79b4>
   18d30:	mov	r4, r2
   18d34:	mov	r7, r0
   18d38:	mov	r8, r3
   18d3c:	ldm	lr!, {r0, r1, r2, r3}
   18d40:	sub	sp, sp, #48	; 0x30
   18d44:	mov	ip, sp
   18d48:	mov	r6, #10
   18d4c:	stmia	ip!, {r0, r1, r2, r3}
   18d50:	cmp	r4, #0
   18d54:	cmpne	r5, #0
   18d58:	ldm	lr!, {r0, r1, r2, r3}
   18d5c:	str	r6, [sp]
   18d60:	stmia	ip!, {r0, r1, r2, r3}
   18d64:	ldm	lr, {r0, r1, r2, r3}
   18d68:	stm	ip, {r0, r1, r2, r3}
   18d6c:	beq	18d94 <__assert_fail@plt+0x79b0>
   18d70:	mov	r3, sp
   18d74:	mov	r1, r8
   18d78:	mov	r0, r7
   18d7c:	ldr	r2, [sp, #72]	; 0x48
   18d80:	str	r5, [sp, #40]	; 0x28
   18d84:	str	r4, [sp, #44]	; 0x2c
   18d88:	bl	18698 <__assert_fail@plt+0x72b4>
   18d8c:	add	sp, sp, #48	; 0x30
   18d90:	pop	{r4, r5, r6, r7, r8, pc}
   18d94:	bl	113cc <abort@plt>
   18d98:			; <UNDEFINED> instruction: 0x0002e3b8
   18d9c:	push	{lr}		; (str lr, [sp, #-4]!)
   18da0:	sub	sp, sp, #12
   18da4:	mvn	ip, #0
   18da8:	str	ip, [sp]
   18dac:	bl	18d24 <__assert_fail@plt+0x7940>
   18db0:	add	sp, sp, #12
   18db4:	pop	{pc}		; (ldr pc, [sp], #4)
   18db8:	push	{lr}		; (str lr, [sp, #-4]!)
   18dbc:	sub	sp, sp, #12
   18dc0:	mvn	ip, #0
   18dc4:	mov	r3, r2
   18dc8:	str	ip, [sp]
   18dcc:	mov	r2, r1
   18dd0:	mov	r1, r0
   18dd4:	mov	r0, #0
   18dd8:	bl	18d24 <__assert_fail@plt+0x7940>
   18ddc:	add	sp, sp, #12
   18de0:	pop	{pc}		; (ldr pc, [sp], #4)
   18de4:	push	{lr}		; (str lr, [sp, #-4]!)
   18de8:	sub	sp, sp, #12
   18dec:	str	r3, [sp]
   18df0:	mov	r3, r2
   18df4:	mov	r2, r1
   18df8:	mov	r1, r0
   18dfc:	mov	r0, #0
   18e00:	bl	18d24 <__assert_fail@plt+0x7940>
   18e04:	add	sp, sp, #12
   18e08:	pop	{pc}		; (ldr pc, [sp], #4)
   18e0c:	ldr	r3, [pc]	; 18e14 <__assert_fail@plt+0x7a30>
   18e10:	b	18698 <__assert_fail@plt+0x72b4>
   18e14:	muleq	r2, r8, r1
   18e18:	mov	r2, r1
   18e1c:	ldr	r3, [pc, #8]	; 18e2c <__assert_fail@plt+0x7a48>
   18e20:	mov	r1, r0
   18e24:	mov	r0, #0
   18e28:	b	18698 <__assert_fail@plt+0x72b4>
   18e2c:	muleq	r2, r8, r1
   18e30:	ldr	r3, [pc, #4]	; 18e3c <__assert_fail@plt+0x7a58>
   18e34:	mvn	r2, #0
   18e38:	b	18698 <__assert_fail@plt+0x72b4>
   18e3c:	muleq	r2, r8, r1
   18e40:	mov	r1, r0
   18e44:	ldr	r3, [pc, #8]	; 18e54 <__assert_fail@plt+0x7a70>
   18e48:	mvn	r2, #0
   18e4c:	mov	r0, #0
   18e50:	b	18698 <__assert_fail@plt+0x72b4>
   18e54:	muleq	r2, r8, r1
   18e58:	push	{r4, r5, r6, lr}
   18e5c:	mov	r5, r1
   18e60:	mov	r1, #0
   18e64:	mov	r4, r2
   18e68:	bl	11354 <setlocale@plt>
   18e6c:	subs	r6, r0, #0
   18e70:	beq	18ecc <__assert_fail@plt+0x7ae8>
   18e74:	bl	11294 <strlen@plt>
   18e78:	cmp	r4, r0
   18e7c:	bhi	18eb4 <__assert_fail@plt+0x7ad0>
   18e80:	cmp	r4, #0
   18e84:	bne	18e90 <__assert_fail@plt+0x7aac>
   18e88:	mov	r0, #34	; 0x22
   18e8c:	pop	{r4, r5, r6, pc}
   18e90:	sub	r4, r4, #1
   18e94:	mov	r1, r6
   18e98:	mov	r2, r4
   18e9c:	mov	r0, r5
   18ea0:	bl	1112c <memcpy@plt>
   18ea4:	mov	r3, #0
   18ea8:	strb	r3, [r5, r4]
   18eac:	mov	r0, #34	; 0x22
   18eb0:	pop	{r4, r5, r6, pc}
   18eb4:	add	r2, r0, #1
   18eb8:	mov	r1, r6
   18ebc:	mov	r0, r5
   18ec0:	bl	1112c <memcpy@plt>
   18ec4:	mov	r0, #0
   18ec8:	pop	{r4, r5, r6, pc}
   18ecc:	cmp	r4, #0
   18ed0:	beq	18ee0 <__assert_fail@plt+0x7afc>
   18ed4:	strb	r6, [r5]
   18ed8:	mov	r0, #22
   18edc:	pop	{r4, r5, r6, pc}
   18ee0:	mov	r0, #22
   18ee4:	pop	{r4, r5, r6, pc}
   18ee8:	mov	r1, #0
   18eec:	b	11354 <setlocale@plt>
   18ef0:	push	{r4, lr}
   18ef4:	ldrb	r3, [r0, #4]
   18ef8:	cmp	r3, #0
   18efc:	bne	18f18 <__assert_fail@plt+0x7b34>
   18f00:	ldr	r0, [pc, #52]	; 18f3c <__assert_fail@plt+0x7b58>
   18f04:	bl	113b4 <unsetenv@plt>
   18f08:	cmp	r0, #0
   18f0c:	beq	18f30 <__assert_fail@plt+0x7b4c>
   18f10:	mov	r0, #0
   18f14:	pop	{r4, pc}
   18f18:	add	r1, r0, #5
   18f1c:	mov	r2, #1
   18f20:	ldr	r0, [pc, #20]	; 18f3c <__assert_fail@plt+0x7b58>
   18f24:	bl	112ac <setenv@plt>
   18f28:	cmp	r0, #0
   18f2c:	bne	18f10 <__assert_fail@plt+0x7b2c>
   18f30:	bl	111b0 <tzset@plt>
   18f34:	mov	r0, #1
   18f38:	pop	{r4, pc}
   18f3c:	andeq	sp, r1, r0, ror #5
   18f40:	cmp	r0, #1
   18f44:	push	{r4, r5, r6, r7, r8, lr}
   18f48:	mov	r4, r0
   18f4c:	moveq	r7, r0
   18f50:	beq	18f90 <__assert_fail@plt+0x7bac>
   18f54:	bl	112c4 <__errno_location@plt>
   18f58:	mov	r6, r0
   18f5c:	mov	r0, r4
   18f60:	ldr	r8, [r6]
   18f64:	bl	18ef0 <__assert_fail@plt+0x7b0c>
   18f68:	subs	r7, r0, #0
   18f6c:	ldreq	r8, [r6]
   18f70:	cmp	r4, #0
   18f74:	beq	18f8c <__assert_fail@plt+0x7ba8>
   18f78:	ldr	r5, [r4]
   18f7c:	mov	r0, r4
   18f80:	bl	15110 <__assert_fail@plt+0x3d2c>
   18f84:	subs	r4, r5, #0
   18f88:	bne	18f78 <__assert_fail@plt+0x7b94>
   18f8c:	str	r8, [r6]
   18f90:	mov	r0, r7
   18f94:	pop	{r4, r5, r6, r7, r8, pc}
   18f98:	push	{r4, r5, r6, r7, r8, lr}
   18f9c:	subs	r7, r0, #0
   18fa0:	beq	18ffc <__assert_fail@plt+0x7c18>
   18fa4:	bl	11294 <strlen@plt>
   18fa8:	add	r5, r0, #1
   18fac:	cmp	r5, #58	; 0x3a
   18fb0:	addhi	r0, r0, #10
   18fb4:	bichi	r0, r0, #3
   18fb8:	movls	r0, #64	; 0x40
   18fbc:	bl	1b280 <__assert_fail@plt+0x9e9c>
   18fc0:	subs	r4, r0, #0
   18fc4:	beq	18ff4 <__assert_fail@plt+0x7c10>
   18fc8:	mov	r3, r4
   18fcc:	mov	r6, #0
   18fd0:	mov	r2, #1
   18fd4:	strb	r2, [r4, #4]
   18fd8:	str	r6, [r4]
   18fdc:	mov	r1, r7
   18fe0:	strb	r6, [r3, #5]!
   18fe4:	mov	r2, r5
   18fe8:	mov	r0, r3
   18fec:	bl	1112c <memcpy@plt>
   18ff0:	strb	r6, [r0, r5]
   18ff4:	mov	r0, r4
   18ff8:	pop	{r4, r5, r6, r7, r8, pc}
   18ffc:	mov	r0, #64	; 0x40
   19000:	bl	1b280 <__assert_fail@plt+0x9e9c>
   19004:	subs	r4, r0, #0
   19008:	beq	18ff4 <__assert_fail@plt+0x7c10>
   1900c:	str	r7, [r4]
   19010:	strb	r7, [r4, #4]
   19014:	strb	r7, [r4, #5]
   19018:	mov	r0, r4
   1901c:	pop	{r4, r5, r6, r7, r8, pc}
   19020:	push	{r4, r5, r6, r7, r8, lr}
   19024:	ldr	r6, [r1, #40]	; 0x28
   19028:	cmp	r6, #0
   1902c:	beq	190f4 <__assert_fail@plt+0x7d10>
   19030:	cmp	r1, r6
   19034:	mov	r7, r1
   19038:	mov	r5, r0
   1903c:	bhi	1904c <__assert_fail@plt+0x7c68>
   19040:	add	r3, r1, #44	; 0x2c
   19044:	cmp	r6, r3
   19048:	bcc	190f4 <__assert_fail@plt+0x7d10>
   1904c:	ldrb	r3, [r6]
   19050:	cmp	r3, #0
   19054:	addne	r4, r5, #5
   19058:	beq	190ec <__assert_fail@plt+0x7d08>
   1905c:	mov	r1, r6
   19060:	mov	r0, r4
   19064:	bl	110c0 <strcmp@plt>
   19068:	add	r2, r5, #5
   1906c:	cmp	r0, #0
   19070:	mov	r0, r4
   19074:	beq	190e0 <__assert_fail@plt+0x7cfc>
   19078:	ldrb	r3, [r4]
   1907c:	cmp	r3, #0
   19080:	bne	19098 <__assert_fail@plt+0x7cb4>
   19084:	cmp	r4, r2
   19088:	bne	190fc <__assert_fail@plt+0x7d18>
   1908c:	ldrb	r3, [r5, #4]
   19090:	cmp	r3, #0
   19094:	beq	190fc <__assert_fail@plt+0x7d18>
   19098:	bl	11294 <strlen@plt>
   1909c:	add	r0, r0, #1
   190a0:	ldrb	r3, [r4, r0]!
   190a4:	cmp	r3, #0
   190a8:	bne	1905c <__assert_fail@plt+0x7c78>
   190ac:	ldr	r3, [r5]
   190b0:	cmp	r3, #0
   190b4:	addne	r4, r3, #5
   190b8:	movne	r5, r3
   190bc:	b	1905c <__assert_fail@plt+0x7c78>
   190c0:	mov	r0, r6
   190c4:	bl	18f98 <__assert_fail@plt+0x7bb4>
   190c8:	cmp	r0, #0
   190cc:	str	r0, [r5]
   190d0:	popeq	{r4, r5, r6, r7, r8, pc}
   190d4:	add	r4, r0, #5
   190d8:	mov	r3, #0
   190dc:	strb	r3, [r0, #4]
   190e0:	str	r4, [r7, #40]	; 0x28
   190e4:	mov	r0, #1
   190e8:	pop	{r4, r5, r6, r7, r8, pc}
   190ec:	ldr	r4, [pc, #64]	; 19134 <__assert_fail@plt+0x7d50>
   190f0:	b	190e0 <__assert_fail@plt+0x7cfc>
   190f4:	mov	r0, #1
   190f8:	pop	{r4, r5, r6, r7, r8, pc}
   190fc:	mov	r0, r6
   19100:	bl	11294 <strlen@plt>
   19104:	add	r3, r5, #64	; 0x40
   19108:	sub	r3, r3, r4
   1910c:	add	r8, r0, #1
   19110:	cmp	r8, r3
   19114:	bge	190c0 <__assert_fail@plt+0x7cdc>
   19118:	mov	r1, r6
   1911c:	mov	r2, r8
   19120:	mov	r0, r4
   19124:	bl	1112c <memcpy@plt>
   19128:	mov	r3, #0
   1912c:	strb	r3, [r4, r8]
   19130:	b	190e0 <__assert_fail@plt+0x7cfc>
   19134:	ldrdeq	fp, [r1], -ip
   19138:	push	{r4, r5, r6, r7, r8, lr}
   1913c:	mov	r4, r0
   19140:	ldr	r0, [pc, #152]	; 191e0 <__assert_fail@plt+0x7dfc>
   19144:	bl	11210 <getenv@plt>
   19148:	ldrb	r3, [r4, #4]
   1914c:	subs	r5, r0, #0
   19150:	beq	19198 <__assert_fail@plt+0x7db4>
   19154:	cmp	r3, #0
   19158:	beq	19170 <__assert_fail@plt+0x7d8c>
   1915c:	mov	r1, r5
   19160:	add	r0, r4, #5
   19164:	bl	110c0 <strcmp@plt>
   19168:	cmp	r0, #0
   1916c:	beq	191a0 <__assert_fail@plt+0x7dbc>
   19170:	mov	r0, r5
   19174:	bl	18f98 <__assert_fail@plt+0x7bb4>
   19178:	subs	r5, r0, #0
   1917c:	beq	19190 <__assert_fail@plt+0x7dac>
   19180:	mov	r0, r4
   19184:	bl	18ef0 <__assert_fail@plt+0x7b0c>
   19188:	cmp	r0, #0
   1918c:	beq	191ac <__assert_fail@plt+0x7dc8>
   19190:	mov	r0, r5
   19194:	pop	{r4, r5, r6, r7, r8, pc}
   19198:	cmp	r3, #0
   1919c:	bne	19170 <__assert_fail@plt+0x7d8c>
   191a0:	mov	r5, #1
   191a4:	mov	r0, r5
   191a8:	pop	{r4, r5, r6, r7, r8, pc}
   191ac:	bl	112c4 <__errno_location@plt>
   191b0:	cmp	r5, #1
   191b4:	mov	r6, r0
   191b8:	ldr	r7, [r0]
   191bc:	beq	191d4 <__assert_fail@plt+0x7df0>
   191c0:	ldr	r4, [r5]
   191c4:	mov	r0, r5
   191c8:	bl	15110 <__assert_fail@plt+0x3d2c>
   191cc:	subs	r5, r4, #0
   191d0:	bne	191c0 <__assert_fail@plt+0x7ddc>
   191d4:	str	r7, [r6]
   191d8:	mov	r5, #0
   191dc:	b	19190 <__assert_fail@plt+0x7dac>
   191e0:	andeq	sp, r1, r0, ror #5
   191e4:	cmp	r0, #1
   191e8:	bxeq	lr
   191ec:	cmp	r0, #0
   191f0:	beq	1920c <__assert_fail@plt+0x7e28>
   191f4:	push	{r4, lr}
   191f8:	ldr	r4, [r0]
   191fc:	bl	15110 <__assert_fail@plt+0x3d2c>
   19200:	subs	r0, r4, #0
   19204:	bne	191f8 <__assert_fail@plt+0x7e14>
   19208:	pop	{r4, pc}
   1920c:	bx	lr
   19210:	subs	ip, r0, #0
   19214:	push	{r4, r5, r6, r7, r8, lr}
   19218:	mov	r5, r1
   1921c:	beq	19284 <__assert_fail@plt+0x7ea0>
   19220:	mov	r4, r2
   19224:	mov	r6, ip
   19228:	bl	19138 <__assert_fail@plt+0x7d54>
   1922c:	subs	r7, r0, #0
   19230:	beq	1927c <__assert_fail@plt+0x7e98>
   19234:	mov	r0, r5
   19238:	mov	r1, r4
   1923c:	bl	11180 <localtime_r@plt>
   19240:	cmp	r0, #0
   19244:	beq	19274 <__assert_fail@plt+0x7e90>
   19248:	mov	r0, r6
   1924c:	mov	r1, r4
   19250:	bl	19020 <__assert_fail@plt+0x7c3c>
   19254:	cmp	r0, #0
   19258:	beq	19274 <__assert_fail@plt+0x7e90>
   1925c:	mov	r0, r7
   19260:	bl	18f40 <__assert_fail@plt+0x7b5c>
   19264:	cmp	r0, #0
   19268:	beq	1927c <__assert_fail@plt+0x7e98>
   1926c:	mov	r0, r4
   19270:	pop	{r4, r5, r6, r7, r8, pc}
   19274:	mov	r0, r7
   19278:	bl	18f40 <__assert_fail@plt+0x7b5c>
   1927c:	mov	r0, #0
   19280:	pop	{r4, r5, r6, r7, r8, pc}
   19284:	mov	r0, r5
   19288:	mov	r1, r2
   1928c:	pop	{r4, r5, r6, r7, r8, lr}
   19290:	b	110b4 <gmtime_r@plt>
   19294:	push	{r4, r5, r6, r7, lr}
   19298:	subs	r7, r0, #0
   1929c:	sub	sp, sp, #52	; 0x34
   192a0:	mov	r4, r1
   192a4:	beq	19364 <__assert_fail@plt+0x7f80>
   192a8:	bl	19138 <__assert_fail@plt+0x7d54>
   192ac:	subs	r6, r0, #0
   192b0:	beq	1935c <__assert_fail@plt+0x7f78>
   192b4:	ldm	r4, {r1, r2, ip}
   192b8:	ldr	r0, [r4, #12]
   192bc:	ldr	r3, [r4, #16]
   192c0:	str	r1, [sp, #4]
   192c4:	str	r2, [sp, #8]
   192c8:	ldr	r1, [r4, #20]
   192cc:	ldr	r2, [r4, #32]
   192d0:	str	r0, [sp, #16]
   192d4:	str	r3, [sp, #20]
   192d8:	add	r0, sp, #4
   192dc:	mvn	r3, #0
   192e0:	str	r3, [sp, #32]
   192e4:	str	ip, [sp, #12]
   192e8:	str	r1, [sp, #24]
   192ec:	str	r2, [sp, #36]	; 0x24
   192f0:	bl	110e4 <mktime@plt>
   192f4:	ldr	r3, [sp, #32]
   192f8:	cmp	r3, #0
   192fc:	mov	r5, r0
   19300:	blt	19354 <__assert_fail@plt+0x7f70>
   19304:	mov	r0, r7
   19308:	add	r1, sp, #4
   1930c:	bl	19020 <__assert_fail@plt+0x7c3c>
   19310:	cmp	r0, #0
   19314:	beq	19354 <__assert_fail@plt+0x7f70>
   19318:	mov	r0, r6
   1931c:	bl	18f40 <__assert_fail@plt+0x7b5c>
   19320:	cmp	r0, #0
   19324:	beq	1935c <__assert_fail@plt+0x7f78>
   19328:	add	lr, sp, #4
   1932c:	mov	ip, r4
   19330:	ldm	lr!, {r0, r1, r2, r3}
   19334:	stmia	ip!, {r0, r1, r2, r3}
   19338:	ldm	lr!, {r0, r1, r2, r3}
   1933c:	stmia	ip!, {r0, r1, r2, r3}
   19340:	ldm	lr, {r0, r1, r2}
   19344:	stm	ip, {r0, r1, r2}
   19348:	mov	r0, r5
   1934c:	add	sp, sp, #52	; 0x34
   19350:	pop	{r4, r5, r6, r7, pc}
   19354:	mov	r0, r6
   19358:	bl	18f40 <__assert_fail@plt+0x7b5c>
   1935c:	mvn	r5, #0
   19360:	b	19348 <__assert_fail@plt+0x7f64>
   19364:	mov	r0, r1
   19368:	bl	11378 <timegm@plt>
   1936c:	mov	r5, r0
   19370:	mov	r0, r5
   19374:	add	sp, sp, #52	; 0x34
   19378:	pop	{r4, r5, r6, r7, pc}
   1937c:	mov	r2, #3
   19380:	mov	r1, #0
   19384:	b	1b384 <__assert_fail@plt+0x9fa0>
   19388:	push	{r4, r5, r6, lr}
   1938c:	sub	sp, sp, #32
   19390:	cmp	r1, #0
   19394:	mov	r4, r0
   19398:	ldr	r5, [sp, #48]	; 0x30
   1939c:	ldr	r6, [sp, #52]	; 0x34
   193a0:	beq	196b8 <__assert_fail@plt+0x82d4>
   193a4:	stm	sp, {r2, r3}
   193a8:	mov	r3, r1
   193ac:	ldr	r2, [pc, #808]	; 196dc <__assert_fail@plt+0x82f8>
   193b0:	mov	r1, #1
   193b4:	bl	1130c <__fprintf_chk@plt>
   193b8:	mov	r2, #5
   193bc:	ldr	r1, [pc, #796]	; 196e0 <__assert_fail@plt+0x82fc>
   193c0:	mov	r0, #0
   193c4:	bl	11168 <dcgettext@plt>
   193c8:	ldr	r3, [pc, #788]	; 196e4 <__assert_fail@plt+0x8300>
   193cc:	ldr	r2, [pc, #788]	; 196e8 <__assert_fail@plt+0x8304>
   193d0:	str	r3, [sp]
   193d4:	mov	r1, #1
   193d8:	mov	r3, r0
   193dc:	mov	r0, r4
   193e0:	bl	1130c <__fprintf_chk@plt>
   193e4:	mov	r1, r4
   193e8:	mov	r0, #10
   193ec:	bl	1115c <fputc_unlocked@plt>
   193f0:	mov	r2, #5
   193f4:	ldr	r1, [pc, #752]	; 196ec <__assert_fail@plt+0x8308>
   193f8:	mov	r0, #0
   193fc:	bl	11168 <dcgettext@plt>
   19400:	mov	r1, #1
   19404:	ldr	r3, [pc, #740]	; 196f0 <__assert_fail@plt+0x830c>
   19408:	mov	r2, r0
   1940c:	mov	r0, r4
   19410:	bl	1130c <__fprintf_chk@plt>
   19414:	mov	r1, r4
   19418:	mov	r0, #10
   1941c:	bl	1115c <fputc_unlocked@plt>
   19420:	cmp	r6, #9
   19424:	ldrls	pc, [pc, r6, lsl #2]
   19428:	b	196d0 <__assert_fail@plt+0x82ec>
   1942c:			; <UNDEFINED> instruction: 0x000194b0
   19430:			; <UNDEFINED> instruction: 0x000194b8
   19434:	andeq	r9, r1, r4, ror #9
   19438:	andeq	r9, r1, r8, lsl r5
   1943c:	andeq	r9, r1, r4, asr r5
   19440:	muleq	r1, r0, r5
   19444:	andeq	r9, r1, ip, asr #11
   19448:	andeq	r9, r1, r0, lsl r6
   1944c:	andeq	r9, r1, r0, ror #12
   19450:	andeq	r9, r1, r4, asr r4
   19454:	ldr	r1, [pc, #664]	; 196f4 <__assert_fail@plt+0x8310>
   19458:	mov	r2, #5
   1945c:	mov	r0, #0
   19460:	bl	11168 <dcgettext@plt>
   19464:	ldr	ip, [r5, #32]
   19468:	ldr	r1, [r5, #28]
   1946c:	ldr	r2, [r5, #24]
   19470:	ldr	r3, [r5]
   19474:	ldr	r6, [r5, #20]
   19478:	str	ip, [sp, #28]
   1947c:	ldr	lr, [r5, #16]
   19480:	str	r1, [sp, #24]
   19484:	ldr	ip, [r5, #12]
   19488:	str	r2, [sp, #20]
   1948c:	ldr	r1, [r5, #8]
   19490:	ldr	r2, [r5, #4]
   19494:	str	r6, [sp, #16]
   19498:	stmib	sp, {r1, ip, lr}
   1949c:	mov	r1, #1
   194a0:	str	r2, [sp]
   194a4:	mov	r2, r0
   194a8:	mov	r0, r4
   194ac:	bl	1130c <__fprintf_chk@plt>
   194b0:	add	sp, sp, #32
   194b4:	pop	{r4, r5, r6, pc}
   194b8:	mov	r2, #5
   194bc:	ldr	r1, [pc, #564]	; 196f8 <__assert_fail@plt+0x8314>
   194c0:	mov	r0, #0
   194c4:	bl	11168 <dcgettext@plt>
   194c8:	ldr	r3, [r5]
   194cc:	mov	r1, #1
   194d0:	mov	r2, r0
   194d4:	mov	r0, r4
   194d8:	add	sp, sp, #32
   194dc:	pop	{r4, r5, r6, lr}
   194e0:	b	1130c <__fprintf_chk@plt>
   194e4:	mov	r2, #5
   194e8:	ldr	r1, [pc, #524]	; 196fc <__assert_fail@plt+0x8318>
   194ec:	mov	r0, #0
   194f0:	bl	11168 <dcgettext@plt>
   194f4:	ldr	r2, [r5, #4]
   194f8:	ldr	r3, [r5]
   194fc:	mov	r1, #1
   19500:	str	r2, [sp, #48]	; 0x30
   19504:	mov	r2, r0
   19508:	mov	r0, r4
   1950c:	add	sp, sp, #32
   19510:	pop	{r4, r5, r6, lr}
   19514:	b	1130c <__fprintf_chk@plt>
   19518:	mov	r2, #5
   1951c:	ldr	r1, [pc, #476]	; 19700 <__assert_fail@plt+0x831c>
   19520:	mov	r0, #0
   19524:	bl	11168 <dcgettext@plt>
   19528:	ldr	r1, [r5, #8]
   1952c:	ldr	r2, [r5, #4]
   19530:	ldr	r3, [r5]
   19534:	str	r1, [sp, #52]	; 0x34
   19538:	str	r2, [sp, #48]	; 0x30
   1953c:	mov	r1, #1
   19540:	mov	r2, r0
   19544:	mov	r0, r4
   19548:	add	sp, sp, #32
   1954c:	pop	{r4, r5, r6, lr}
   19550:	b	1130c <__fprintf_chk@plt>
   19554:	mov	r2, #5
   19558:	ldr	r1, [pc, #420]	; 19704 <__assert_fail@plt+0x8320>
   1955c:	mov	r0, #0
   19560:	bl	11168 <dcgettext@plt>
   19564:	ldr	r1, [r5, #8]
   19568:	ldr	ip, [r5, #12]
   1956c:	ldr	r2, [r5, #4]
   19570:	ldr	r3, [r5]
   19574:	stmib	sp, {r1, ip}
   19578:	str	r2, [sp]
   1957c:	mov	r1, #1
   19580:	mov	r2, r0
   19584:	mov	r0, r4
   19588:	bl	1130c <__fprintf_chk@plt>
   1958c:	b	194b0 <__assert_fail@plt+0x80cc>
   19590:	mov	r2, #5
   19594:	ldr	r1, [pc, #364]	; 19708 <__assert_fail@plt+0x8324>
   19598:	mov	r0, #0
   1959c:	bl	11168 <dcgettext@plt>
   195a0:	add	r1, r5, #8
   195a4:	ldr	r2, [r5, #4]
   195a8:	ldm	r1, {r1, ip, lr}
   195ac:	ldr	r3, [r5]
   195b0:	str	r2, [sp]
   195b4:	stmib	sp, {r1, ip, lr}
   195b8:	mov	r1, #1
   195bc:	mov	r2, r0
   195c0:	mov	r0, r4
   195c4:	bl	1130c <__fprintf_chk@plt>
   195c8:	b	194b0 <__assert_fail@plt+0x80cc>
   195cc:	mov	r2, #5
   195d0:	ldr	r1, [pc, #308]	; 1970c <__assert_fail@plt+0x8328>
   195d4:	mov	r0, #0
   195d8:	bl	11168 <dcgettext@plt>
   195dc:	add	r1, r5, #8
   195e0:	ldr	r2, [r5, #4]
   195e4:	ldm	r1, {r1, ip, lr}
   195e8:	ldr	r6, [r5, #20]
   195ec:	ldr	r3, [r5]
   195f0:	stmib	sp, {r1, ip, lr}
   195f4:	mov	r1, #1
   195f8:	str	r2, [sp]
   195fc:	str	r6, [sp, #16]
   19600:	mov	r2, r0
   19604:	mov	r0, r4
   19608:	bl	1130c <__fprintf_chk@plt>
   1960c:	b	194b0 <__assert_fail@plt+0x80cc>
   19610:	mov	r2, #5
   19614:	ldr	r1, [pc, #244]	; 19710 <__assert_fail@plt+0x832c>
   19618:	mov	r0, #0
   1961c:	bl	11168 <dcgettext@plt>
   19620:	ldr	r2, [r5, #24]
   19624:	ldr	r3, [r5]
   19628:	ldr	r6, [r5, #20]
   1962c:	ldr	lr, [r5, #16]
   19630:	ldr	ip, [r5, #12]
   19634:	str	r2, [sp, #20]
   19638:	ldr	r1, [r5, #8]
   1963c:	ldr	r2, [r5, #4]
   19640:	str	r6, [sp, #16]
   19644:	stmib	sp, {r1, ip, lr}
   19648:	mov	r1, #1
   1964c:	str	r2, [sp]
   19650:	mov	r2, r0
   19654:	mov	r0, r4
   19658:	bl	1130c <__fprintf_chk@plt>
   1965c:	b	194b0 <__assert_fail@plt+0x80cc>
   19660:	mov	r2, #5
   19664:	ldr	r1, [pc, #168]	; 19714 <__assert_fail@plt+0x8330>
   19668:	mov	r0, #0
   1966c:	bl	11168 <dcgettext@plt>
   19670:	ldr	r1, [r5, #28]
   19674:	ldr	r2, [r5, #24]
   19678:	ldr	r3, [r5]
   1967c:	ldr	r6, [r5, #20]
   19680:	ldr	lr, [r5, #16]
   19684:	str	r1, [sp, #24]
   19688:	ldr	ip, [r5, #12]
   1968c:	str	r2, [sp, #20]
   19690:	ldr	r1, [r5, #8]
   19694:	ldr	r2, [r5, #4]
   19698:	str	r6, [sp, #16]
   1969c:	stmib	sp, {r1, ip, lr}
   196a0:	mov	r1, #1
   196a4:	str	r2, [sp]
   196a8:	mov	r2, r0
   196ac:	mov	r0, r4
   196b0:	bl	1130c <__fprintf_chk@plt>
   196b4:	b	194b0 <__assert_fail@plt+0x80cc>
   196b8:	str	r3, [sp]
   196bc:	mov	r1, #1
   196c0:	mov	r3, r2
   196c4:	ldr	r2, [pc, #76]	; 19718 <__assert_fail@plt+0x8334>
   196c8:	bl	1130c <__fprintf_chk@plt>
   196cc:	b	193b8 <__assert_fail@plt+0x7fd4>
   196d0:	mov	r2, #5
   196d4:	ldr	r1, [pc, #64]	; 1971c <__assert_fail@plt+0x8338>
   196d8:	b	1945c <__assert_fail@plt+0x8078>
   196dc:	andeq	sp, r1, ip, ror r6
   196e0:	muleq	r1, r0, r6
   196e4:	andeq	r0, r0, r6, ror #15
   196e8:	andeq	sp, r1, r8, ror #18
   196ec:	muleq	r1, r4, r6
   196f0:	andeq	sp, r1, r0, asr #14
   196f4:	andeq	sp, r1, r0, ror r8
   196f8:	andeq	sp, r1, r4, ror #14
   196fc:	andeq	sp, r1, r4, ror r7
   19700:	andeq	sp, r1, ip, lsl #15
   19704:	andeq	sp, r1, r8, lsr #15
   19708:	andeq	sp, r1, r8, asr #15
   1970c:	andeq	sp, r1, ip, ror #15
   19710:	andeq	sp, r1, r4, lsl r8
   19714:	andeq	sp, r1, r0, asr #16
   19718:	andeq	sp, r1, r8, lsl #13
   1971c:	andeq	sp, r1, r4, lsr #17
   19720:	push	{r4, r5, lr}
   19724:	sub	sp, sp, #12
   19728:	ldr	r5, [sp, #24]
   1972c:	ldr	ip, [r5]
   19730:	cmp	ip, #0
   19734:	beq	19750 <__assert_fail@plt+0x836c>
   19738:	mov	lr, r5
   1973c:	mov	ip, #0
   19740:	ldr	r4, [lr, #4]!
   19744:	add	ip, ip, #1
   19748:	cmp	r4, #0
   1974c:	bne	19740 <__assert_fail@plt+0x835c>
   19750:	stm	sp, {r5, ip}
   19754:	bl	19388 <__assert_fail@plt+0x7fa4>
   19758:	add	sp, sp, #12
   1975c:	pop	{r4, r5, pc}
   19760:	push	{r4, r5, lr}
   19764:	sub	sp, sp, #52	; 0x34
   19768:	add	r5, sp, #4
   1976c:	ldr	r4, [sp, #64]	; 0x40
   19770:	mov	ip, #0
   19774:	sub	r4, r4, #4
   19778:	ldr	lr, [r4, #4]!
   1977c:	cmp	lr, #0
   19780:	str	lr, [r5, #4]!
   19784:	beq	19794 <__assert_fail@plt+0x83b0>
   19788:	add	ip, ip, #1
   1978c:	cmp	ip, #10
   19790:	bne	19778 <__assert_fail@plt+0x8394>
   19794:	add	lr, sp, #8
   19798:	str	ip, [sp, #4]
   1979c:	str	lr, [sp]
   197a0:	bl	19388 <__assert_fail@plt+0x7fa4>
   197a4:	add	sp, sp, #52	; 0x34
   197a8:	pop	{r4, r5, pc}
   197ac:	push	{r3}		; (str r3, [sp, #-4]!)
   197b0:	push	{r4, lr}
   197b4:	sub	sp, sp, #60	; 0x3c
   197b8:	add	lr, sp, #56	; 0x38
   197bc:	add	r3, sp, #72	; 0x48
   197c0:	str	r3, [lr, #-44]!	; 0xffffffd4
   197c4:	add	r4, sp, #68	; 0x44
   197c8:	mov	r3, #0
   197cc:	ldr	ip, [r4, #4]!
   197d0:	cmp	ip, #0
   197d4:	str	ip, [lr, #4]!
   197d8:	beq	197e8 <__assert_fail@plt+0x8404>
   197dc:	add	r3, r3, #1
   197e0:	cmp	r3, #10
   197e4:	bne	197cc <__assert_fail@plt+0x83e8>
   197e8:	add	ip, sp, #16
   197ec:	str	r3, [sp, #4]
   197f0:	str	ip, [sp]
   197f4:	ldr	r3, [sp, #68]	; 0x44
   197f8:	bl	19388 <__assert_fail@plt+0x7fa4>
   197fc:	add	sp, sp, #60	; 0x3c
   19800:	pop	{r4, lr}
   19804:	add	sp, sp, #4
   19808:	bx	lr
   1980c:	ldr	r3, [pc, #116]	; 19888 <__assert_fail@plt+0x84a4>
   19810:	push	{r4, lr}
   19814:	mov	r0, #10
   19818:	ldr	r1, [r3]
   1981c:	bl	1115c <fputc_unlocked@plt>
   19820:	mov	r2, #5
   19824:	ldr	r1, [pc, #96]	; 1988c <__assert_fail@plt+0x84a8>
   19828:	mov	r0, #0
   1982c:	bl	11168 <dcgettext@plt>
   19830:	ldr	r2, [pc, #88]	; 19890 <__assert_fail@plt+0x84ac>
   19834:	mov	r1, r0
   19838:	mov	r0, #1
   1983c:	bl	112f4 <__printf_chk@plt>
   19840:	mov	r2, #5
   19844:	ldr	r1, [pc, #72]	; 19894 <__assert_fail@plt+0x84b0>
   19848:	mov	r0, #0
   1984c:	bl	11168 <dcgettext@plt>
   19850:	ldr	r3, [pc, #64]	; 19898 <__assert_fail@plt+0x84b4>
   19854:	ldr	r2, [pc, #64]	; 1989c <__assert_fail@plt+0x84b8>
   19858:	mov	r1, r0
   1985c:	mov	r0, #1
   19860:	bl	112f4 <__printf_chk@plt>
   19864:	mov	r2, #5
   19868:	ldr	r1, [pc, #48]	; 198a0 <__assert_fail@plt+0x84bc>
   1986c:	mov	r0, #0
   19870:	bl	11168 <dcgettext@plt>
   19874:	ldr	r2, [pc, #40]	; 198a4 <__assert_fail@plt+0x84c0>
   19878:	pop	{r4, lr}
   1987c:	mov	r1, r0
   19880:	mov	r0, #1
   19884:	b	112f4 <__printf_chk@plt>
   19888:	andeq	lr, r2, r4, ror #3
   1988c:	andeq	sp, r1, r0, ror #17
   19890:	strdeq	sp, [r1], -r4
   19894:	andeq	sp, r1, ip, lsl #18
   19898:	andeq	sp, r1, r0, asr #32
   1989c:	andeq	sp, r1, r8, rrx
   198a0:	andeq	sp, r1, r0, lsr #18
   198a4:	andeq	sp, r1, r8, asr #18
   198a8:	push	{r4, lr}
   198ac:	bl	1b280 <__assert_fail@plt+0x9e9c>
   198b0:	cmp	r0, #0
   198b4:	popne	{r4, pc}
   198b8:	bl	19df0 <__assert_fail@plt+0x8a0c>
   198bc:	push	{r4, lr}
   198c0:	bl	1b280 <__assert_fail@plt+0x9e9c>
   198c4:	cmp	r0, #0
   198c8:	popne	{r4, pc}
   198cc:	bl	19df0 <__assert_fail@plt+0x8a0c>
   198d0:	push	{r4, lr}
   198d4:	bl	1b280 <__assert_fail@plt+0x9e9c>
   198d8:	cmp	r0, #0
   198dc:	popne	{r4, pc}
   198e0:	bl	19df0 <__assert_fail@plt+0x8a0c>
   198e4:	push	{r4, r5, r6, lr}
   198e8:	mov	r5, r0
   198ec:	mov	r4, r1
   198f0:	bl	1b2ac <__assert_fail@plt+0x9ec8>
   198f4:	cmp	r0, #0
   198f8:	popne	{r4, r5, r6, pc}
   198fc:	adds	r4, r4, #0
   19900:	movne	r4, #1
   19904:	cmp	r5, #0
   19908:	orreq	r4, r4, #1
   1990c:	cmp	r4, #0
   19910:	popeq	{r4, r5, r6, pc}
   19914:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19918:	push	{r4, lr}
   1991c:	cmp	r1, #0
   19920:	orreq	r1, r1, #1
   19924:	bl	1b2ac <__assert_fail@plt+0x9ec8>
   19928:	cmp	r0, #0
   1992c:	popne	{r4, pc}
   19930:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19934:	push	{r4, r5, r6, lr}
   19938:	mov	r6, r0
   1993c:	mov	r5, r1
   19940:	mov	r4, r2
   19944:	bl	1b5e0 <__assert_fail@plt+0xa1fc>
   19948:	cmp	r0, #0
   1994c:	popne	{r4, r5, r6, pc}
   19950:	cmp	r6, #0
   19954:	beq	19964 <__assert_fail@plt+0x8580>
   19958:	cmp	r5, #0
   1995c:	cmpne	r4, #0
   19960:	popeq	{r4, r5, r6, pc}
   19964:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19968:	b	19934 <__assert_fail@plt+0x8550>
   1996c:	cmp	r2, #0
   19970:	cmpne	r1, #0
   19974:	moveq	r2, #1
   19978:	moveq	r1, r2
   1997c:	push	{r4, lr}
   19980:	bl	1b5e0 <__assert_fail@plt+0xa1fc>
   19984:	cmp	r0, #0
   19988:	popne	{r4, pc}
   1998c:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19990:	mov	r2, r1
   19994:	mov	r1, r0
   19998:	mov	r0, #0
   1999c:	b	19934 <__assert_fail@plt+0x8550>
   199a0:	mov	r2, r1
   199a4:	mov	r1, r0
   199a8:	mov	r0, #0
   199ac:	b	1996c <__assert_fail@plt+0x8588>
   199b0:	push	{r4, r5, r6, lr}
   199b4:	subs	r6, r0, #0
   199b8:	sub	sp, sp, #8
   199bc:	mov	r5, r1
   199c0:	ldr	r4, [r1]
   199c4:	beq	19a00 <__assert_fail@plt+0x861c>
   199c8:	lsr	r1, r4, #1
   199cc:	add	r3, r1, #1
   199d0:	mvn	r3, r3
   199d4:	cmp	r4, r3
   199d8:	bhi	199fc <__assert_fail@plt+0x8618>
   199dc:	add	r4, r4, #1
   199e0:	add	r4, r4, r1
   199e4:	mov	r0, r6
   199e8:	mov	r1, r4
   199ec:	bl	19934 <__assert_fail@plt+0x8550>
   199f0:	str	r4, [r5]
   199f4:	add	sp, sp, #8
   199f8:	pop	{r4, r5, r6, pc}
   199fc:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19a00:	cmp	r4, #0
   19a04:	bne	199e4 <__assert_fail@plt+0x8600>
   19a08:	mov	r1, r2
   19a0c:	mov	r0, #64	; 0x40
   19a10:	str	r2, [sp, #4]
   19a14:	bl	1b62c <__assert_fail@plt+0xa248>
   19a18:	ldr	r2, [sp, #4]
   19a1c:	cmp	r0, #0
   19a20:	movne	r4, r0
   19a24:	addeq	r4, r0, #1
   19a28:	b	199e4 <__assert_fail@plt+0x8600>
   19a2c:	mov	r2, #1
   19a30:	b	199b0 <__assert_fail@plt+0x85cc>
   19a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a38:	sub	sp, sp, #12
   19a3c:	ldr	r6, [r1]
   19a40:	mov	sl, r1
   19a44:	mov	r9, r0
   19a48:	asrs	r4, r6, #1
   19a4c:	mov	r5, r2
   19a50:	mov	fp, r3
   19a54:	ldr	r7, [sp, #48]	; 0x30
   19a58:	bmi	19bc4 <__assert_fail@plt+0x87e0>
   19a5c:	mvn	r3, #-2147483648	; 0x80000000
   19a60:	sub	r3, r3, r4
   19a64:	cmp	r6, r3
   19a68:	movle	r3, #0
   19a6c:	movgt	r3, #1
   19a70:	mvn	r8, fp
   19a74:	cmp	r3, #0
   19a78:	addeq	r4, r4, r6
   19a7c:	mvnne	r4, #-2147483648	; 0x80000000
   19a80:	lsr	r8, r8, #31
   19a84:	cmp	fp, r4
   19a88:	movge	r3, #0
   19a8c:	andlt	r3, r8, #1
   19a90:	cmp	r3, #0
   19a94:	beq	19b7c <__assert_fail@plt+0x8798>
   19a98:	cmp	r7, #0
   19a9c:	blt	19c4c <__assert_fail@plt+0x8868>
   19aa0:	bne	19c44 <__assert_fail@plt+0x8860>
   19aa4:	mov	r2, #64	; 0x40
   19aa8:	mov	r1, r7
   19aac:	mov	r0, r2
   19ab0:	str	r2, [sp, #4]
   19ab4:	bl	1b838 <__assert_fail@plt+0xa454>
   19ab8:	ldr	r2, [sp, #4]
   19abc:	mov	r1, r7
   19ac0:	mov	r4, r0
   19ac4:	mov	r0, r2
   19ac8:	bl	1ba58 <__assert_fail@plt+0xa674>
   19acc:	ldr	r2, [sp, #4]
   19ad0:	sub	r1, r2, r1
   19ad4:	cmp	r9, #0
   19ad8:	sub	r3, r4, r6
   19adc:	streq	r9, [sl]
   19ae0:	cmp	r3, r5
   19ae4:	bge	19b68 <__assert_fail@plt+0x8784>
   19ae8:	cmp	r5, #0
   19aec:	blt	19bd8 <__assert_fail@plt+0x87f4>
   19af0:	cmp	r6, #0
   19af4:	blt	19b14 <__assert_fail@plt+0x8730>
   19af8:	mvn	r3, #-2147483648	; 0x80000000
   19afc:	sub	r3, r3, r5
   19b00:	cmp	r6, r3
   19b04:	movle	r3, #0
   19b08:	movgt	r3, #1
   19b0c:	cmp	r3, #0
   19b10:	bne	19cd4 <__assert_fail@plt+0x88f0>
   19b14:	add	r5, r6, r5
   19b18:	cmp	fp, r5
   19b1c:	movge	r8, #0
   19b20:	andlt	r8, r8, #1
   19b24:	cmp	r8, #0
   19b28:	mov	r4, r5
   19b2c:	bne	19cd4 <__assert_fail@plt+0x88f0>
   19b30:	cmp	r7, #0
   19b34:	blt	19bec <__assert_fail@plt+0x8808>
   19b38:	beq	19b64 <__assert_fail@plt+0x8780>
   19b3c:	cmp	r5, #0
   19b40:	blt	19c94 <__assert_fail@plt+0x88b0>
   19b44:	mov	r1, r7
   19b48:	mvn	r0, #-2147483648	; 0x80000000
   19b4c:	bl	1b838 <__assert_fail@plt+0xa454>
   19b50:	cmp	r5, r0
   19b54:	movle	r0, #0
   19b58:	movgt	r0, #1
   19b5c:	cmp	r0, #0
   19b60:	bne	19cd4 <__assert_fail@plt+0x88f0>
   19b64:	mul	r1, r5, r7
   19b68:	mov	r0, r9
   19b6c:	bl	198e4 <__assert_fail@plt+0x8500>
   19b70:	str	r4, [sl]
   19b74:	add	sp, sp, #12
   19b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b7c:	cmp	r7, #0
   19b80:	blt	19c18 <__assert_fail@plt+0x8834>
   19b84:	beq	19aa4 <__assert_fail@plt+0x86c0>
   19b88:	cmp	r4, #0
   19b8c:	blt	19c54 <__assert_fail@plt+0x8870>
   19b90:	mov	r1, r7
   19b94:	mvn	r0, #-2147483648	; 0x80000000
   19b98:	bl	1b838 <__assert_fail@plt+0xa454>
   19b9c:	cmp	r0, r4
   19ba0:	movge	r0, #0
   19ba4:	movlt	r0, #1
   19ba8:	cmp	r0, #0
   19bac:	mvnne	r2, #-2147483648	; 0x80000000
   19bb0:	bne	19aa8 <__assert_fail@plt+0x86c4>
   19bb4:	mul	r1, r7, r4
   19bb8:	cmp	r1, #63	; 0x3f
   19bbc:	bgt	19ad4 <__assert_fail@plt+0x86f0>
   19bc0:	b	19aa4 <__assert_fail@plt+0x86c0>
   19bc4:	rsb	r3, r4, #-2147483648	; 0x80000000
   19bc8:	cmp	r6, r3
   19bcc:	movge	r3, #0
   19bd0:	movlt	r3, #1
   19bd4:	b	19a70 <__assert_fail@plt+0x868c>
   19bd8:	rsb	r3, r5, #-2147483648	; 0x80000000
   19bdc:	cmp	r6, r3
   19be0:	movge	r3, #0
   19be4:	movlt	r3, #1
   19be8:	b	19b0c <__assert_fail@plt+0x8728>
   19bec:	cmp	r5, #0
   19bf0:	blt	19c78 <__assert_fail@plt+0x8894>
   19bf4:	cmn	r7, #1
   19bf8:	beq	19b64 <__assert_fail@plt+0x8780>
   19bfc:	mov	r1, r7
   19c00:	mov	r0, #-2147483648	; 0x80000000
   19c04:	bl	1b838 <__assert_fail@plt+0xa454>
   19c08:	cmp	r5, r0
   19c0c:	movle	r0, #0
   19c10:	movgt	r0, #1
   19c14:	b	19b5c <__assert_fail@plt+0x8778>
   19c18:	cmp	r4, #0
   19c1c:	blt	19cb8 <__assert_fail@plt+0x88d4>
   19c20:	cmn	r7, #1
   19c24:	beq	19bb4 <__assert_fail@plt+0x87d0>
   19c28:	mov	r1, r7
   19c2c:	mov	r0, #-2147483648	; 0x80000000
   19c30:	bl	1b838 <__assert_fail@plt+0xa454>
   19c34:	cmp	r0, r4
   19c38:	movge	r0, #0
   19c3c:	movlt	r0, #1
   19c40:	b	19ba8 <__assert_fail@plt+0x87c4>
   19c44:	mov	r4, fp
   19c48:	b	19b90 <__assert_fail@plt+0x87ac>
   19c4c:	mov	r4, fp
   19c50:	b	19c20 <__assert_fail@plt+0x883c>
   19c54:	cmn	r4, #1
   19c58:	beq	19bb4 <__assert_fail@plt+0x87d0>
   19c5c:	mov	r1, r4
   19c60:	mov	r0, #-2147483648	; 0x80000000
   19c64:	bl	1b838 <__assert_fail@plt+0xa454>
   19c68:	cmp	r7, r0
   19c6c:	movle	r0, #0
   19c70:	movgt	r0, #1
   19c74:	b	19ba8 <__assert_fail@plt+0x87c4>
   19c78:	mov	r1, r7
   19c7c:	mvn	r0, #-2147483648	; 0x80000000
   19c80:	bl	1b838 <__assert_fail@plt+0xa454>
   19c84:	cmp	r5, r0
   19c88:	movge	r0, #0
   19c8c:	movlt	r0, #1
   19c90:	b	19b5c <__assert_fail@plt+0x8778>
   19c94:	cmn	r5, #1
   19c98:	beq	19b64 <__assert_fail@plt+0x8780>
   19c9c:	mov	r1, r5
   19ca0:	mov	r0, #-2147483648	; 0x80000000
   19ca4:	bl	1b838 <__assert_fail@plt+0xa454>
   19ca8:	cmp	r7, r0
   19cac:	movle	r0, #0
   19cb0:	movgt	r0, #1
   19cb4:	b	19b5c <__assert_fail@plt+0x8778>
   19cb8:	mov	r1, r7
   19cbc:	mvn	r0, #-2147483648	; 0x80000000
   19cc0:	bl	1b838 <__assert_fail@plt+0xa454>
   19cc4:	cmp	r0, r4
   19cc8:	movle	r0, #0
   19ccc:	movgt	r0, #1
   19cd0:	b	19ba8 <__assert_fail@plt+0x87c4>
   19cd4:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19cd8:	push	{r4, lr}
   19cdc:	mov	r1, #1
   19ce0:	bl	1b238 <__assert_fail@plt+0x9e54>
   19ce4:	cmp	r0, #0
   19ce8:	popne	{r4, pc}
   19cec:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19cf0:	push	{r4, lr}
   19cf4:	mov	r1, #1
   19cf8:	bl	1b238 <__assert_fail@plt+0x9e54>
   19cfc:	cmp	r0, #0
   19d00:	popne	{r4, pc}
   19d04:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19d08:	push	{r4, lr}
   19d0c:	bl	1b238 <__assert_fail@plt+0x9e54>
   19d10:	cmp	r0, #0
   19d14:	popne	{r4, pc}
   19d18:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19d1c:	push	{r4, lr}
   19d20:	bl	1b238 <__assert_fail@plt+0x9e54>
   19d24:	cmp	r0, #0
   19d28:	popne	{r4, pc}
   19d2c:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19d30:	push	{r4, r5, r6, lr}
   19d34:	mov	r6, r0
   19d38:	mov	r0, r1
   19d3c:	mov	r4, r1
   19d40:	bl	1b280 <__assert_fail@plt+0x9e9c>
   19d44:	subs	r5, r0, #0
   19d48:	beq	19d60 <__assert_fail@plt+0x897c>
   19d4c:	mov	r2, r4
   19d50:	mov	r1, r6
   19d54:	bl	1112c <memcpy@plt>
   19d58:	mov	r0, r5
   19d5c:	pop	{r4, r5, r6, pc}
   19d60:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19d64:	push	{r4, r5, r6, lr}
   19d68:	mov	r6, r0
   19d6c:	mov	r0, r1
   19d70:	mov	r4, r1
   19d74:	bl	1b280 <__assert_fail@plt+0x9e9c>
   19d78:	subs	r5, r0, #0
   19d7c:	beq	19d94 <__assert_fail@plt+0x89b0>
   19d80:	mov	r2, r4
   19d84:	mov	r1, r6
   19d88:	bl	1112c <memcpy@plt>
   19d8c:	mov	r0, r5
   19d90:	pop	{r4, r5, r6, pc}
   19d94:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19d98:	push	{r4, r5, r6, lr}
   19d9c:	mov	r6, r0
   19da0:	add	r0, r1, #1
   19da4:	mov	r4, r1
   19da8:	bl	1b280 <__assert_fail@plt+0x9e9c>
   19dac:	subs	r5, r0, #0
   19db0:	beq	19dd0 <__assert_fail@plt+0x89ec>
   19db4:	mov	r3, #0
   19db8:	mov	r1, r6
   19dbc:	strb	r3, [r5, r4]
   19dc0:	mov	r2, r4
   19dc4:	bl	1112c <memcpy@plt>
   19dc8:	mov	r0, r5
   19dcc:	pop	{r4, r5, r6, pc}
   19dd0:	bl	19df0 <__assert_fail@plt+0x8a0c>
   19dd4:	push	{r4, lr}
   19dd8:	mov	r4, r0
   19ddc:	bl	11294 <strlen@plt>
   19de0:	add	r1, r0, #1
   19de4:	mov	r0, r4
   19de8:	pop	{r4, lr}
   19dec:	b	19d30 <__assert_fail@plt+0x894c>
   19df0:	ldr	r3, [pc, #44]	; 19e24 <__assert_fail@plt+0x8a40>
   19df4:	push	{r4, lr}
   19df8:	mov	r2, #5
   19dfc:	ldr	r1, [pc, #36]	; 19e28 <__assert_fail@plt+0x8a44>
   19e00:	mov	r0, #0
   19e04:	ldr	r4, [r3]
   19e08:	bl	11168 <dcgettext@plt>
   19e0c:	ldr	r2, [pc, #24]	; 19e2c <__assert_fail@plt+0x8a48>
   19e10:	mov	r1, #0
   19e14:	mov	r3, r0
   19e18:	mov	r0, r4
   19e1c:	bl	11204 <error@plt>
   19e20:	bl	113cc <abort@plt>
   19e24:	andeq	lr, r2, r4, lsl #3
   19e28:	muleq	r1, r8, r9
   19e2c:	andeq	sp, r1, r8, lsr #10
   19e30:	push	{r4, r5, r6, r7, lr}
   19e34:	sub	sp, sp, #20
   19e38:	mov	r6, r2
   19e3c:	ldr	ip, [sp, #48]	; 0x30
   19e40:	mov	r2, r1
   19e44:	mov	r7, r3
   19e48:	str	ip, [sp]
   19e4c:	add	r3, sp, #8
   19e50:	mov	r1, #0
   19e54:	mov	r5, r0
   19e58:	ldr	r4, [sp, #56]	; 0x38
   19e5c:	bl	1a0d8 <__assert_fail@plt+0x8cf4>
   19e60:	cmp	r0, #0
   19e64:	bne	19ee0 <__assert_fail@plt+0x8afc>
   19e68:	ldrd	r0, [sp, #8]
   19e6c:	cmp	r0, r6
   19e70:	sbcs	r3, r1, r7
   19e74:	ldrd	r6, [sp, #40]	; 0x28
   19e78:	movlt	r3, #1
   19e7c:	movge	r3, #0
   19e80:	cmp	r6, r0
   19e84:	sbcs	r2, r7, r1
   19e88:	orrlt	r3, r3, #1
   19e8c:	cmp	r3, #0
   19e90:	beq	19ed8 <__assert_fail@plt+0x8af4>
   19e94:	cmp	r0, #1073741824	; 0x40000000
   19e98:	sbcs	r3, r1, #0
   19e9c:	blt	19f0c <__assert_fail@plt+0x8b28>
   19ea0:	bl	112c4 <__errno_location@plt>
   19ea4:	mov	r3, #75	; 0x4b
   19ea8:	mov	r6, r3
   19eac:	str	r3, [r0]
   19eb0:	cmp	r4, #0
   19eb4:	moveq	r4, #1
   19eb8:	mov	r0, r5
   19ebc:	bl	18e40 <__assert_fail@plt+0x7a5c>
   19ec0:	mov	r1, r6
   19ec4:	ldr	r3, [sp, #52]	; 0x34
   19ec8:	ldr	r2, [pc, #164]	; 19f74 <__assert_fail@plt+0x8b90>
   19ecc:	str	r0, [sp]
   19ed0:	mov	r0, r4
   19ed4:	bl	11204 <error@plt>
   19ed8:	add	sp, sp, #20
   19edc:	pop	{r4, r5, r6, r7, pc}
   19ee0:	cmp	r0, #1
   19ee4:	beq	19f34 <__assert_fail@plt+0x8b50>
   19ee8:	cmp	r0, #3
   19eec:	beq	19f64 <__assert_fail@plt+0x8b80>
   19ef0:	cmp	r4, #0
   19ef4:	beq	19f54 <__assert_fail@plt+0x8b70>
   19ef8:	bl	112c4 <__errno_location@plt>
   19efc:	ldr	r6, [r0]
   19f00:	cmp	r6, #22
   19f04:	moveq	r6, #0
   19f08:	b	19eb8 <__assert_fail@plt+0x8ad4>
   19f0c:	mov	r2, #-1073741824	; 0xc0000000
   19f10:	mvn	r3, #0
   19f14:	cmp	r0, r2
   19f18:	sbcs	r3, r1, r3
   19f1c:	blt	19ea0 <__assert_fail@plt+0x8abc>
   19f20:	bl	112c4 <__errno_location@plt>
   19f24:	mov	r3, #34	; 0x22
   19f28:	mov	r6, r3
   19f2c:	str	r3, [r0]
   19f30:	b	19eb0 <__assert_fail@plt+0x8acc>
   19f34:	bl	112c4 <__errno_location@plt>
   19f38:	mov	r3, #75	; 0x4b
   19f3c:	mov	r6, r3
   19f40:	str	r3, [r0]
   19f44:	cmp	r4, #0
   19f48:	moveq	r4, #1
   19f4c:	bne	19f00 <__assert_fail@plt+0x8b1c>
   19f50:	b	19eb8 <__assert_fail@plt+0x8ad4>
   19f54:	bl	112c4 <__errno_location@plt>
   19f58:	mov	r4, #1
   19f5c:	ldr	r6, [r0]
   19f60:	b	19f00 <__assert_fail@plt+0x8b1c>
   19f64:	bl	112c4 <__errno_location@plt>
   19f68:	mov	r6, #0
   19f6c:	str	r6, [r0]
   19f70:	b	19f44 <__assert_fail@plt+0x8b60>
   19f74:	andeq	sp, r1, r4, lsr #10
   19f78:	push	{r4, r5}
   19f7c:	mov	r1, #10
   19f80:	pop	{r4, r5}
   19f84:	b	19e30 <__assert_fail@plt+0x8a4c>
   19f88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f8c:	subs	r5, r1, #0
   19f90:	mov	r4, r0
   19f94:	blt	19ff0 <__assert_fail@plt+0x8c0c>
   19f98:	moveq	r6, #0
   19f9c:	moveq	r7, #0
   19fa0:	beq	1a038 <__assert_fail@plt+0x8c54>
   19fa4:	ldrd	r8, [r0]
   19fa8:	cmp	r8, #0
   19fac:	sbcs	r3, r9, #0
   19fb0:	blt	1a090 <__assert_fail@plt+0x8cac>
   19fb4:	asr	r7, r5, #31
   19fb8:	mov	r3, r7
   19fbc:	mov	r2, r5
   19fc0:	mvn	r0, #0
   19fc4:	mvn	r1, #-2147483648	; 0x80000000
   19fc8:	bl	1ba78 <__assert_fail@plt+0xa694>
   19fcc:	mov	r6, r5
   19fd0:	cmp	r0, r8
   19fd4:	sbcs	r3, r1, r9
   19fd8:	bge	1a038 <__assert_fail@plt+0x8c54>
   19fdc:	mvn	r2, #0
   19fe0:	mvn	r3, #-2147483648	; 0x80000000
   19fe4:	mov	r0, #1
   19fe8:	strd	r2, [r4]
   19fec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ff0:	ldrd	r8, [r0]
   19ff4:	cmp	r8, #0
   19ff8:	sbcs	r3, r9, #0
   19ffc:	blt	1a05c <__assert_fail@plt+0x8c78>
   1a000:	cmn	r5, #1
   1a004:	mvneq	r6, #0
   1a008:	mvneq	r7, #0
   1a00c:	beq	1a038 <__assert_fail@plt+0x8c54>
   1a010:	asr	r7, r5, #31
   1a014:	mov	r3, r7
   1a018:	mov	r2, r5
   1a01c:	mov	r0, #0
   1a020:	mov	r1, #-2147483648	; 0x80000000
   1a024:	bl	1ba78 <__assert_fail@plt+0xa694>
   1a028:	mov	r6, r5
   1a02c:	cmp	r0, r8
   1a030:	sbcs	r3, r1, r9
   1a034:	blt	19fdc <__assert_fail@plt+0x8bf8>
   1a038:	ldr	r2, [r4]
   1a03c:	ldr	r1, [r4, #4]
   1a040:	mov	r0, #0
   1a044:	mul	ip, r2, r7
   1a048:	umull	r2, r3, r2, r5
   1a04c:	mla	r5, r5, r1, ip
   1a050:	add	r3, r5, r3
   1a054:	strd	r2, [r4]
   1a058:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a05c:	asr	r7, r5, #31
   1a060:	mov	r3, r7
   1a064:	mov	r2, r5
   1a068:	mvn	r0, #0
   1a06c:	mvn	r1, #-2147483648	; 0x80000000
   1a070:	bl	1ba78 <__assert_fail@plt+0xa694>
   1a074:	mov	r6, r5
   1a078:	cmp	r8, r0
   1a07c:	sbcs	r3, r9, r1
   1a080:	bge	1a038 <__assert_fail@plt+0x8c54>
   1a084:	mov	r2, #0
   1a088:	mov	r3, #-2147483648	; 0x80000000
   1a08c:	b	19fe4 <__assert_fail@plt+0x8c00>
   1a090:	mvn	r3, #0
   1a094:	cmp	r9, r3
   1a098:	mvn	r2, #0
   1a09c:	cmpeq	r8, r2
   1a0a0:	moveq	r6, r5
   1a0a4:	asreq	r7, r6, #31
   1a0a8:	beq	1a038 <__assert_fail@plt+0x8c54>
   1a0ac:	mov	r3, r9
   1a0b0:	mov	r2, r8
   1a0b4:	mov	r0, #0
   1a0b8:	mov	r1, #-2147483648	; 0x80000000
   1a0bc:	bl	1ba78 <__assert_fail@plt+0xa694>
   1a0c0:	asr	r7, r5, #31
   1a0c4:	mov	r6, r5
   1a0c8:	cmp	r0, r5
   1a0cc:	sbcs	r3, r1, r7
   1a0d0:	blt	1a084 <__assert_fail@plt+0x8ca0>
   1a0d4:	b	1a038 <__assert_fail@plt+0x8c54>
   1a0d8:	cmp	r2, #36	; 0x24
   1a0dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0e0:	sub	sp, sp, #20
   1a0e4:	bhi	1a598 <__assert_fail@plt+0x91b4>
   1a0e8:	cmp	r1, #0
   1a0ec:	mov	r6, r1
   1a0f0:	mov	r5, r2
   1a0f4:	addeq	r6, sp, #4
   1a0f8:	mov	r8, r0
   1a0fc:	mov	r7, r3
   1a100:	bl	112c4 <__errno_location@plt>
   1a104:	mov	r4, #0
   1a108:	mov	r2, r5
   1a10c:	mov	r3, r4
   1a110:	mov	r1, r6
   1a114:	str	r4, [r0]
   1a118:	mov	r9, r0
   1a11c:	mov	r0, r8
   1a120:	bl	11390 <__strtoll_internal@plt>
   1a124:	ldr	r5, [r6]
   1a128:	cmp	r8, r5
   1a12c:	strd	r0, [sp, #8]
   1a130:	beq	1a180 <__assert_fail@plt+0x8d9c>
   1a134:	ldr	r4, [r9]
   1a138:	cmp	r4, #0
   1a13c:	bne	1a168 <__assert_fail@plt+0x8d84>
   1a140:	ldr	r3, [sp, #56]	; 0x38
   1a144:	cmp	r3, #0
   1a148:	beq	1a158 <__assert_fail@plt+0x8d74>
   1a14c:	ldrb	r8, [r5]
   1a150:	cmp	r8, #0
   1a154:	bne	1a1b8 <__assert_fail@plt+0x8dd4>
   1a158:	strd	r0, [r7]
   1a15c:	mov	r0, r4
   1a160:	add	sp, sp, #20
   1a164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a168:	cmp	r4, #34	; 0x22
   1a16c:	beq	1a3c8 <__assert_fail@plt+0x8fe4>
   1a170:	mov	r4, #4
   1a174:	mov	r0, r4
   1a178:	add	sp, sp, #20
   1a17c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a180:	ldr	r3, [sp, #56]	; 0x38
   1a184:	cmp	r3, r4
   1a188:	beq	1a170 <__assert_fail@plt+0x8d8c>
   1a18c:	ldrb	r1, [r5]
   1a190:	cmp	r1, r4
   1a194:	beq	1a170 <__assert_fail@plt+0x8d8c>
   1a198:	mov	r0, r3
   1a19c:	bl	112a0 <strchr@plt>
   1a1a0:	cmp	r0, r4
   1a1a4:	beq	1a170 <__assert_fail@plt+0x8d8c>
   1a1a8:	ldrb	r8, [r5]
   1a1ac:	mov	r2, #1
   1a1b0:	mov	r3, #0
   1a1b4:	strd	r2, [sp, #8]
   1a1b8:	mov	r1, r8
   1a1bc:	ldr	r0, [sp, #56]	; 0x38
   1a1c0:	bl	112a0 <strchr@plt>
   1a1c4:	cmp	r0, #0
   1a1c8:	beq	1a588 <__assert_fail@plt+0x91a4>
   1a1cc:	sub	r3, r8, #69	; 0x45
   1a1d0:	cmp	r3, #47	; 0x2f
   1a1d4:	ldrls	pc, [pc, r3, lsl #2]
   1a1d8:	b	1a29c <__assert_fail@plt+0x8eb8>
   1a1dc:	andeq	sl, r1, ip, lsl #7
   1a1e0:	muleq	r1, ip, r2
   1a1e4:	andeq	sl, r1, ip, lsl #7
   1a1e8:	muleq	r1, ip, r2
   1a1ec:	muleq	r1, ip, r2
   1a1f0:	muleq	r1, ip, r2
   1a1f4:	andeq	sl, r1, ip, lsl #7
   1a1f8:	muleq	r1, ip, r2
   1a1fc:	andeq	sl, r1, ip, lsl #7
   1a200:	muleq	r1, ip, r2
   1a204:	muleq	r1, ip, r2
   1a208:	andeq	sl, r1, ip, lsl #7
   1a20c:	muleq	r1, ip, r2
   1a210:	muleq	r1, ip, r2
   1a214:	muleq	r1, ip, r2
   1a218:	andeq	sl, r1, ip, lsl #7
   1a21c:	muleq	r1, ip, r2
   1a220:	muleq	r1, ip, r2
   1a224:	muleq	r1, ip, r2
   1a228:	muleq	r1, ip, r2
   1a22c:	andeq	sl, r1, ip, lsl #7
   1a230:	andeq	sl, r1, ip, lsl #7
   1a234:	muleq	r1, ip, r2
   1a238:	muleq	r1, ip, r2
   1a23c:	muleq	r1, ip, r2
   1a240:	muleq	r1, ip, r2
   1a244:	muleq	r1, ip, r2
   1a248:	muleq	r1, ip, r2
   1a24c:	muleq	r1, ip, r2
   1a250:	muleq	r1, ip, r2
   1a254:	muleq	r1, ip, r2
   1a258:	muleq	r1, ip, r2
   1a25c:	muleq	r1, ip, r2
   1a260:	muleq	r1, ip, r2
   1a264:	andeq	sl, r1, ip, lsl #7
   1a268:	muleq	r1, ip, r2
   1a26c:	muleq	r1, ip, r2
   1a270:	muleq	r1, ip, r2
   1a274:	andeq	sl, r1, ip, lsl #7
   1a278:	muleq	r1, ip, r2
   1a27c:	andeq	sl, r1, ip, lsl #7
   1a280:	muleq	r1, ip, r2
   1a284:	muleq	r1, ip, r2
   1a288:	muleq	r1, ip, r2
   1a28c:	muleq	r1, ip, r2
   1a290:	muleq	r1, ip, r2
   1a294:	muleq	r1, ip, r2
   1a298:	andeq	sl, r1, ip, lsl #7
   1a29c:	mov	sl, #1
   1a2a0:	mov	r9, #1024	; 0x400
   1a2a4:	sub	r8, r8, #66	; 0x42
   1a2a8:	cmp	r8, #53	; 0x35
   1a2ac:	ldrls	pc, [pc, r8, lsl #2]
   1a2b0:	b	1a588 <__assert_fail@plt+0x91a4>
   1a2b4:	andeq	sl, r1, r0, lsr #9
   1a2b8:	andeq	sl, r1, r8, lsl #11
   1a2bc:	andeq	sl, r1, r8, lsl #11
   1a2c0:	andeq	sl, r1, r8, ror r4
   1a2c4:	andeq	sl, r1, r8, lsl #11
   1a2c8:	andeq	sl, r1, ip, asr #8
   1a2cc:	andeq	sl, r1, r8, lsl #11
   1a2d0:	andeq	sl, r1, r8, lsl #11
   1a2d4:	andeq	sl, r1, r8, lsl #11
   1a2d8:	andeq	sl, r1, r4, lsr r4
   1a2dc:	andeq	sl, r1, r8, lsl #11
   1a2e0:	andeq	sl, r1, ip, lsl #8
   1a2e4:	andeq	sl, r1, r8, lsl #11
   1a2e8:	andeq	sl, r1, r8, lsl #11
   1a2ec:	andeq	sl, r1, r0, ror #10
   1a2f0:	andeq	sl, r1, r8, lsl #11
   1a2f4:	andeq	sl, r1, r8, lsl #11
   1a2f8:	andeq	sl, r1, r8, lsl #11
   1a2fc:	andeq	sl, r1, r8, lsr r5
   1a300:	andeq	sl, r1, r8, lsl #11
   1a304:	andeq	sl, r1, r8, lsl #11
   1a308:	andeq	sl, r1, r8, lsl #11
   1a30c:	andeq	sl, r1, r8, lsl #11
   1a310:	andeq	sl, r1, r0, lsl r5
   1a314:	andeq	sl, r1, r8, ror #9
   1a318:	andeq	sl, r1, r8, lsl #11
   1a31c:	andeq	sl, r1, r8, lsl #11
   1a320:	andeq	sl, r1, r8, lsl #11
   1a324:	andeq	sl, r1, r8, lsl #11
   1a328:	andeq	sl, r1, r8, lsl #11
   1a32c:	andeq	sl, r1, r8, lsl #11
   1a330:	andeq	sl, r1, r8, lsl #11
   1a334:	ldrdeq	sl, [r1], -r0
   1a338:	andeq	sl, r1, r8, ror #7
   1a33c:	andeq	sl, r1, r8, lsl #11
   1a340:	andeq	sl, r1, r8, lsl #11
   1a344:	andeq	sl, r1, r8, lsl #11
   1a348:	andeq	sl, r1, ip, asr #8
   1a34c:	andeq	sl, r1, r8, lsl #11
   1a350:	andeq	sl, r1, r8, lsl #11
   1a354:	andeq	sl, r1, r8, lsl #11
   1a358:	andeq	sl, r1, r4, lsr r4
   1a35c:	andeq	sl, r1, r8, lsl #11
   1a360:	andeq	sl, r1, ip, lsl #8
   1a364:	andeq	sl, r1, r8, lsl #11
   1a368:	andeq	sl, r1, r8, lsl #11
   1a36c:	andeq	sl, r1, r8, lsl #11
   1a370:	andeq	sl, r1, r8, lsl #11
   1a374:	andeq	sl, r1, r8, lsl #11
   1a378:	andeq	sl, r1, r8, lsl #11
   1a37c:	andeq	sl, r1, r8, lsr r5
   1a380:	andeq	sl, r1, r8, lsl #11
   1a384:	andeq	sl, r1, r8, lsl #11
   1a388:			; <UNDEFINED> instruction: 0x0001a4b8
   1a38c:	mov	r1, #48	; 0x30
   1a390:	ldr	r0, [sp, #56]	; 0x38
   1a394:	bl	112a0 <strchr@plt>
   1a398:	cmp	r0, #0
   1a39c:	beq	1a29c <__assert_fail@plt+0x8eb8>
   1a3a0:	ldrb	r3, [r5, #1]
   1a3a4:	cmp	r3, #68	; 0x44
   1a3a8:	beq	1a3bc <__assert_fail@plt+0x8fd8>
   1a3ac:	cmp	r3, #105	; 0x69
   1a3b0:	beq	1a3d0 <__assert_fail@plt+0x8fec>
   1a3b4:	cmp	r3, #66	; 0x42
   1a3b8:	bne	1a29c <__assert_fail@plt+0x8eb8>
   1a3bc:	mov	sl, #2
   1a3c0:	mov	r9, #1000	; 0x3e8
   1a3c4:	b	1a2a4 <__assert_fail@plt+0x8ec0>
   1a3c8:	mov	r4, #1
   1a3cc:	b	1a140 <__assert_fail@plt+0x8d5c>
   1a3d0:	ldrb	sl, [r5, #2]
   1a3d4:	mov	r9, #1024	; 0x400
   1a3d8:	cmp	sl, #66	; 0x42
   1a3dc:	movne	sl, #1
   1a3e0:	moveq	sl, #3
   1a3e4:	b	1a2a4 <__assert_fail@plt+0x8ec0>
   1a3e8:	mov	r8, #0
   1a3ec:	add	r3, r5, sl
   1a3f0:	str	r3, [r6]
   1a3f4:	ldrb	r3, [r5, sl]
   1a3f8:	orr	r4, r4, r8
   1a3fc:	ldrd	r0, [sp, #8]
   1a400:	cmp	r3, #0
   1a404:	orrne	r4, r4, #2
   1a408:	b	1a158 <__assert_fail@plt+0x8d74>
   1a40c:	mov	r1, r9
   1a410:	add	r0, sp, #8
   1a414:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a418:	mov	r1, r9
   1a41c:	mov	r8, r0
   1a420:	add	r0, sp, #8
   1a424:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a428:	ldr	r5, [r6]
   1a42c:	orr	r8, r8, r0
   1a430:	b	1a3ec <__assert_fail@plt+0x9008>
   1a434:	mov	r1, r9
   1a438:	add	r0, sp, #8
   1a43c:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a440:	ldr	r5, [r6]
   1a444:	mov	r8, r0
   1a448:	b	1a3ec <__assert_fail@plt+0x9008>
   1a44c:	mov	fp, #3
   1a450:	mov	r8, #0
   1a454:	add	r5, sp, #8
   1a458:	mov	r1, r9
   1a45c:	mov	r0, r5
   1a460:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a464:	subs	fp, fp, #1
   1a468:	orr	r8, r8, r0
   1a46c:	bne	1a458 <__assert_fail@plt+0x9074>
   1a470:	ldr	r5, [r6]
   1a474:	b	1a3ec <__assert_fail@plt+0x9008>
   1a478:	mov	fp, #6
   1a47c:	mov	r8, #0
   1a480:	add	r5, sp, #8
   1a484:	mov	r1, r9
   1a488:	mov	r0, r5
   1a48c:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a490:	subs	fp, fp, #1
   1a494:	orr	r8, r8, r0
   1a498:	bne	1a484 <__assert_fail@plt+0x90a0>
   1a49c:	b	1a470 <__assert_fail@plt+0x908c>
   1a4a0:	mov	r1, #1024	; 0x400
   1a4a4:	add	r0, sp, #8
   1a4a8:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a4ac:	ldr	r5, [r6]
   1a4b0:	mov	r8, r0
   1a4b4:	b	1a3ec <__assert_fail@plt+0x9008>
   1a4b8:	mov	r1, #2
   1a4bc:	add	r0, sp, #8
   1a4c0:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a4c4:	ldr	r5, [r6]
   1a4c8:	mov	r8, r0
   1a4cc:	b	1a3ec <__assert_fail@plt+0x9008>
   1a4d0:	mov	r1, #512	; 0x200
   1a4d4:	add	r0, sp, #8
   1a4d8:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a4dc:	ldr	r5, [r6]
   1a4e0:	mov	r8, r0
   1a4e4:	b	1a3ec <__assert_fail@plt+0x9008>
   1a4e8:	mov	fp, #7
   1a4ec:	mov	r8, #0
   1a4f0:	add	r5, sp, #8
   1a4f4:	mov	r1, r9
   1a4f8:	mov	r0, r5
   1a4fc:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a500:	subs	fp, fp, #1
   1a504:	orr	r8, r8, r0
   1a508:	bne	1a4f4 <__assert_fail@plt+0x9110>
   1a50c:	b	1a470 <__assert_fail@plt+0x908c>
   1a510:	mov	fp, #8
   1a514:	mov	r8, #0
   1a518:	add	r5, sp, fp
   1a51c:	mov	r1, r9
   1a520:	mov	r0, r5
   1a524:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a528:	subs	fp, fp, #1
   1a52c:	orr	r8, r8, r0
   1a530:	bne	1a51c <__assert_fail@plt+0x9138>
   1a534:	b	1a470 <__assert_fail@plt+0x908c>
   1a538:	mov	fp, #4
   1a53c:	mov	r8, #0
   1a540:	add	r5, sp, #8
   1a544:	mov	r1, r9
   1a548:	mov	r0, r5
   1a54c:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a550:	subs	fp, fp, #1
   1a554:	orr	r8, r8, r0
   1a558:	bne	1a544 <__assert_fail@plt+0x9160>
   1a55c:	b	1a470 <__assert_fail@plt+0x908c>
   1a560:	mov	fp, #5
   1a564:	mov	r8, #0
   1a568:	add	r5, sp, #8
   1a56c:	mov	r1, r9
   1a570:	mov	r0, r5
   1a574:	bl	19f88 <__assert_fail@plt+0x8ba4>
   1a578:	subs	fp, fp, #1
   1a57c:	orr	r8, r8, r0
   1a580:	bne	1a56c <__assert_fail@plt+0x9188>
   1a584:	b	1a470 <__assert_fail@plt+0x908c>
   1a588:	ldrd	r2, [sp, #8]
   1a58c:	orr	r4, r4, #2
   1a590:	strd	r2, [r7]
   1a594:	b	1a15c <__assert_fail@plt+0x8d78>
   1a598:	ldr	r3, [pc, #12]	; 1a5ac <__assert_fail@plt+0x91c8>
   1a59c:	mov	r2, #85	; 0x55
   1a5a0:	ldr	r1, [pc, #8]	; 1a5b0 <__assert_fail@plt+0x91cc>
   1a5a4:	ldr	r0, [pc, #8]	; 1a5b4 <__assert_fail@plt+0x91d0>
   1a5a8:	bl	113e4 <__assert_fail@plt>
   1a5ac:	andeq	sp, r1, ip, lsr #19
   1a5b0:			; <UNDEFINED> instruction: 0x0001d9b8
   1a5b4:	andeq	sp, r1, r8, asr #19
   1a5b8:	push	{r4, r5, r6, lr}
   1a5bc:	subs	r6, r1, #0
   1a5c0:	mov	r4, r0
   1a5c4:	ldr	r5, [r0]
   1a5c8:	blt	1a5f8 <__assert_fail@plt+0x9214>
   1a5cc:	beq	1a618 <__assert_fail@plt+0x9234>
   1a5d0:	cmp	r5, #0
   1a5d4:	blt	1a64c <__assert_fail@plt+0x9268>
   1a5d8:	mvn	r0, #-2147483648	; 0x80000000
   1a5dc:	bl	1b838 <__assert_fail@plt+0xa454>
   1a5e0:	cmp	r5, r0
   1a5e4:	ble	1a618 <__assert_fail@plt+0x9234>
   1a5e8:	mvn	r3, #-2147483648	; 0x80000000
   1a5ec:	str	r3, [r4]
   1a5f0:	mov	r0, #1
   1a5f4:	pop	{r4, r5, r6, pc}
   1a5f8:	cmp	r5, #0
   1a5fc:	blt	1a628 <__assert_fail@plt+0x9244>
   1a600:	cmn	r6, #1
   1a604:	beq	1a618 <__assert_fail@plt+0x9234>
   1a608:	mov	r0, #-2147483648	; 0x80000000
   1a60c:	bl	1b838 <__assert_fail@plt+0xa454>
   1a610:	cmp	r5, r0
   1a614:	bgt	1a5e8 <__assert_fail@plt+0x9204>
   1a618:	mul	r5, r6, r5
   1a61c:	mov	r0, #0
   1a620:	str	r5, [r4]
   1a624:	pop	{r4, r5, r6, pc}
   1a628:	mvn	r0, #-2147483648	; 0x80000000
   1a62c:	bl	1b838 <__assert_fail@plt+0xa454>
   1a630:	cmp	r5, r0
   1a634:	movge	r0, #0
   1a638:	movlt	r0, #1
   1a63c:	cmp	r0, #0
   1a640:	movne	r3, #-2147483648	; 0x80000000
   1a644:	bne	1a5ec <__assert_fail@plt+0x9208>
   1a648:	b	1a618 <__assert_fail@plt+0x9234>
   1a64c:	cmn	r5, #1
   1a650:	beq	1a618 <__assert_fail@plt+0x9234>
   1a654:	mov	r1, r5
   1a658:	mov	r0, #-2147483648	; 0x80000000
   1a65c:	bl	1b838 <__assert_fail@plt+0xa454>
   1a660:	cmp	r6, r0
   1a664:	movle	r0, #0
   1a668:	movgt	r0, #1
   1a66c:	b	1a63c <__assert_fail@plt+0x9258>
   1a670:	cmp	r2, #36	; 0x24
   1a674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a678:	sub	sp, sp, #12
   1a67c:	bhi	1ab28 <__assert_fail@plt+0x9744>
   1a680:	cmp	r1, #0
   1a684:	mov	r8, r1
   1a688:	mov	r5, r2
   1a68c:	moveq	r8, sp
   1a690:	mov	r6, r0
   1a694:	mov	r9, r3
   1a698:	bl	112c4 <__errno_location@plt>
   1a69c:	mov	r4, #0
   1a6a0:	mov	r2, r5
   1a6a4:	mov	r1, r8
   1a6a8:	str	r4, [r0]
   1a6ac:	mov	r7, r0
   1a6b0:	mov	r0, r6
   1a6b4:	bl	110cc <strtol@plt>
   1a6b8:	ldr	r5, [r8]
   1a6bc:	cmp	r6, r5
   1a6c0:	str	r0, [sp, #4]
   1a6c4:	beq	1a714 <__assert_fail@plt+0x9330>
   1a6c8:	ldr	r4, [r7]
   1a6cc:	cmp	r4, #0
   1a6d0:	bne	1a6fc <__assert_fail@plt+0x9318>
   1a6d4:	ldr	r3, [sp, #48]	; 0x30
   1a6d8:	cmp	r3, #0
   1a6dc:	beq	1a6ec <__assert_fail@plt+0x9308>
   1a6e0:	ldrb	r6, [r5]
   1a6e4:	cmp	r6, #0
   1a6e8:	bne	1a748 <__assert_fail@plt+0x9364>
   1a6ec:	str	r0, [r9]
   1a6f0:	mov	r0, r4
   1a6f4:	add	sp, sp, #12
   1a6f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6fc:	cmp	r4, #34	; 0x22
   1a700:	beq	1a958 <__assert_fail@plt+0x9574>
   1a704:	mov	r4, #4
   1a708:	mov	r0, r4
   1a70c:	add	sp, sp, #12
   1a710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a714:	ldr	r3, [sp, #48]	; 0x30
   1a718:	cmp	r3, r4
   1a71c:	beq	1a704 <__assert_fail@plt+0x9320>
   1a720:	ldrb	r1, [r5]
   1a724:	cmp	r1, r4
   1a728:	beq	1a704 <__assert_fail@plt+0x9320>
   1a72c:	mov	r0, r3
   1a730:	bl	112a0 <strchr@plt>
   1a734:	cmp	r0, r4
   1a738:	beq	1a704 <__assert_fail@plt+0x9320>
   1a73c:	ldrb	r6, [r5]
   1a740:	mov	r3, #1
   1a744:	str	r3, [sp, #4]
   1a748:	mov	r1, r6
   1a74c:	ldr	r0, [sp, #48]	; 0x30
   1a750:	bl	112a0 <strchr@plt>
   1a754:	cmp	r0, #0
   1a758:	beq	1ab18 <__assert_fail@plt+0x9734>
   1a75c:	sub	r3, r6, #69	; 0x45
   1a760:	cmp	r3, #47	; 0x2f
   1a764:	ldrls	pc, [pc, r3, lsl #2]
   1a768:	b	1a82c <__assert_fail@plt+0x9448>
   1a76c:	andeq	sl, r1, ip, lsl r9
   1a770:	andeq	sl, r1, ip, lsr #16
   1a774:	andeq	sl, r1, ip, lsl r9
   1a778:	andeq	sl, r1, ip, lsr #16
   1a77c:	andeq	sl, r1, ip, lsr #16
   1a780:	andeq	sl, r1, ip, lsr #16
   1a784:	andeq	sl, r1, ip, lsl r9
   1a788:	andeq	sl, r1, ip, lsr #16
   1a78c:	andeq	sl, r1, ip, lsl r9
   1a790:	andeq	sl, r1, ip, lsr #16
   1a794:	andeq	sl, r1, ip, lsr #16
   1a798:	andeq	sl, r1, ip, lsl r9
   1a79c:	andeq	sl, r1, ip, lsr #16
   1a7a0:	andeq	sl, r1, ip, lsr #16
   1a7a4:	andeq	sl, r1, ip, lsr #16
   1a7a8:	andeq	sl, r1, ip, lsl r9
   1a7ac:	andeq	sl, r1, ip, lsr #16
   1a7b0:	andeq	sl, r1, ip, lsr #16
   1a7b4:	andeq	sl, r1, ip, lsr #16
   1a7b8:	andeq	sl, r1, ip, lsr #16
   1a7bc:	andeq	sl, r1, ip, lsl r9
   1a7c0:	andeq	sl, r1, ip, lsl r9
   1a7c4:	andeq	sl, r1, ip, lsr #16
   1a7c8:	andeq	sl, r1, ip, lsr #16
   1a7cc:	andeq	sl, r1, ip, lsr #16
   1a7d0:	andeq	sl, r1, ip, lsr #16
   1a7d4:	andeq	sl, r1, ip, lsr #16
   1a7d8:	andeq	sl, r1, ip, lsr #16
   1a7dc:	andeq	sl, r1, ip, lsr #16
   1a7e0:	andeq	sl, r1, ip, lsr #16
   1a7e4:	andeq	sl, r1, ip, lsr #16
   1a7e8:	andeq	sl, r1, ip, lsr #16
   1a7ec:	andeq	sl, r1, ip, lsr #16
   1a7f0:	andeq	sl, r1, ip, lsr #16
   1a7f4:	andeq	sl, r1, ip, lsl r9
   1a7f8:	andeq	sl, r1, ip, lsr #16
   1a7fc:	andeq	sl, r1, ip, lsr #16
   1a800:	andeq	sl, r1, ip, lsr #16
   1a804:	andeq	sl, r1, ip, lsl r9
   1a808:	andeq	sl, r1, ip, lsr #16
   1a80c:	andeq	sl, r1, ip, lsl r9
   1a810:	andeq	sl, r1, ip, lsr #16
   1a814:	andeq	sl, r1, ip, lsr #16
   1a818:	andeq	sl, r1, ip, lsr #16
   1a81c:	andeq	sl, r1, ip, lsr #16
   1a820:	andeq	sl, r1, ip, lsr #16
   1a824:	andeq	sl, r1, ip, lsr #16
   1a828:	andeq	sl, r1, ip, lsl r9
   1a82c:	mov	sl, #1
   1a830:	mov	r7, #1024	; 0x400
   1a834:	sub	r6, r6, #66	; 0x42
   1a838:	cmp	r6, #53	; 0x35
   1a83c:	ldrls	pc, [pc, r6, lsl #2]
   1a840:	b	1ab18 <__assert_fail@plt+0x9734>
   1a844:	andeq	sl, r1, r0, lsr sl
   1a848:	andeq	sl, r1, r8, lsl fp
   1a84c:	andeq	sl, r1, r8, lsl fp
   1a850:	andeq	sl, r1, r8, lsl #20
   1a854:	andeq	sl, r1, r8, lsl fp
   1a858:	ldrdeq	sl, [r1], -ip
   1a85c:	andeq	sl, r1, r8, lsl fp
   1a860:	andeq	sl, r1, r8, lsl fp
   1a864:	andeq	sl, r1, r8, lsl fp
   1a868:	andeq	sl, r1, r4, asr #19
   1a86c:	andeq	sl, r1, r8, lsl fp
   1a870:	muleq	r1, ip, r9
   1a874:	andeq	sl, r1, r8, lsl fp
   1a878:	andeq	sl, r1, r8, lsl fp
   1a87c:	strdeq	sl, [r1], -r0
   1a880:	andeq	sl, r1, r8, lsl fp
   1a884:	andeq	sl, r1, r8, lsl fp
   1a888:	andeq	sl, r1, r8, lsl fp
   1a88c:	andeq	sl, r1, r8, asr #21
   1a890:	andeq	sl, r1, r8, lsl fp
   1a894:	andeq	sl, r1, r8, lsl fp
   1a898:	andeq	sl, r1, r8, lsl fp
   1a89c:	andeq	sl, r1, r8, lsl fp
   1a8a0:	andeq	sl, r1, r0, lsr #21
   1a8a4:	andeq	sl, r1, r8, ror sl
   1a8a8:	andeq	sl, r1, r8, lsl fp
   1a8ac:	andeq	sl, r1, r8, lsl fp
   1a8b0:	andeq	sl, r1, r8, lsl fp
   1a8b4:	andeq	sl, r1, r8, lsl fp
   1a8b8:	andeq	sl, r1, r8, lsl fp
   1a8bc:	andeq	sl, r1, r8, lsl fp
   1a8c0:	andeq	sl, r1, r8, lsl fp
   1a8c4:	andeq	sl, r1, r0, ror #20
   1a8c8:	andeq	sl, r1, r8, ror r9
   1a8cc:	andeq	sl, r1, r8, lsl fp
   1a8d0:	andeq	sl, r1, r8, lsl fp
   1a8d4:	andeq	sl, r1, r8, lsl fp
   1a8d8:	ldrdeq	sl, [r1], -ip
   1a8dc:	andeq	sl, r1, r8, lsl fp
   1a8e0:	andeq	sl, r1, r8, lsl fp
   1a8e4:	andeq	sl, r1, r8, lsl fp
   1a8e8:	andeq	sl, r1, r4, asr #19
   1a8ec:	andeq	sl, r1, r8, lsl fp
   1a8f0:	muleq	r1, ip, r9
   1a8f4:	andeq	sl, r1, r8, lsl fp
   1a8f8:	andeq	sl, r1, r8, lsl fp
   1a8fc:	andeq	sl, r1, r8, lsl fp
   1a900:	andeq	sl, r1, r8, lsl fp
   1a904:	andeq	sl, r1, r8, lsl fp
   1a908:	andeq	sl, r1, r8, lsl fp
   1a90c:	andeq	sl, r1, r8, asr #21
   1a910:	andeq	sl, r1, r8, lsl fp
   1a914:	andeq	sl, r1, r8, lsl fp
   1a918:	andeq	sl, r1, r8, asr #20
   1a91c:	mov	r1, #48	; 0x30
   1a920:	ldr	r0, [sp, #48]	; 0x30
   1a924:	bl	112a0 <strchr@plt>
   1a928:	cmp	r0, #0
   1a92c:	beq	1a82c <__assert_fail@plt+0x9448>
   1a930:	ldrb	r3, [r5, #1]
   1a934:	cmp	r3, #68	; 0x44
   1a938:	beq	1a94c <__assert_fail@plt+0x9568>
   1a93c:	cmp	r3, #105	; 0x69
   1a940:	beq	1a960 <__assert_fail@plt+0x957c>
   1a944:	cmp	r3, #66	; 0x42
   1a948:	bne	1a82c <__assert_fail@plt+0x9448>
   1a94c:	mov	sl, #2
   1a950:	mov	r7, #1000	; 0x3e8
   1a954:	b	1a834 <__assert_fail@plt+0x9450>
   1a958:	mov	r4, #1
   1a95c:	b	1a6d4 <__assert_fail@plt+0x92f0>
   1a960:	ldrb	sl, [r5, #2]
   1a964:	mov	r7, #1024	; 0x400
   1a968:	cmp	sl, #66	; 0x42
   1a96c:	movne	sl, #1
   1a970:	moveq	sl, #3
   1a974:	b	1a834 <__assert_fail@plt+0x9450>
   1a978:	mov	r6, #0
   1a97c:	add	r3, r5, sl
   1a980:	str	r3, [r8]
   1a984:	ldrb	r3, [r5, sl]
   1a988:	orr	r4, r4, r6
   1a98c:	ldr	r0, [sp, #4]
   1a990:	cmp	r3, #0
   1a994:	orrne	r4, r4, #2
   1a998:	b	1a6ec <__assert_fail@plt+0x9308>
   1a99c:	mov	r1, r7
   1a9a0:	add	r0, sp, #4
   1a9a4:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1a9a8:	mov	r1, r7
   1a9ac:	mov	r6, r0
   1a9b0:	add	r0, sp, #4
   1a9b4:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1a9b8:	ldr	r5, [r8]
   1a9bc:	orr	r6, r6, r0
   1a9c0:	b	1a97c <__assert_fail@plt+0x9598>
   1a9c4:	mov	r1, r7
   1a9c8:	add	r0, sp, #4
   1a9cc:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1a9d0:	ldr	r5, [r8]
   1a9d4:	mov	r6, r0
   1a9d8:	b	1a97c <__assert_fail@plt+0x9598>
   1a9dc:	mov	fp, #3
   1a9e0:	mov	r6, #0
   1a9e4:	add	r5, sp, #4
   1a9e8:	mov	r1, r7
   1a9ec:	mov	r0, r5
   1a9f0:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1a9f4:	subs	fp, fp, #1
   1a9f8:	orr	r6, r6, r0
   1a9fc:	bne	1a9e8 <__assert_fail@plt+0x9604>
   1aa00:	ldr	r5, [r8]
   1aa04:	b	1a97c <__assert_fail@plt+0x9598>
   1aa08:	mov	fp, #6
   1aa0c:	mov	r6, #0
   1aa10:	add	r5, sp, #4
   1aa14:	mov	r1, r7
   1aa18:	mov	r0, r5
   1aa1c:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1aa20:	subs	fp, fp, #1
   1aa24:	orr	r6, r6, r0
   1aa28:	bne	1aa14 <__assert_fail@plt+0x9630>
   1aa2c:	b	1aa00 <__assert_fail@plt+0x961c>
   1aa30:	mov	r1, #1024	; 0x400
   1aa34:	add	r0, sp, #4
   1aa38:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1aa3c:	ldr	r5, [r8]
   1aa40:	mov	r6, r0
   1aa44:	b	1a97c <__assert_fail@plt+0x9598>
   1aa48:	mov	r1, #2
   1aa4c:	add	r0, sp, #4
   1aa50:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1aa54:	ldr	r5, [r8]
   1aa58:	mov	r6, r0
   1aa5c:	b	1a97c <__assert_fail@plt+0x9598>
   1aa60:	mov	r1, #512	; 0x200
   1aa64:	add	r0, sp, #4
   1aa68:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1aa6c:	ldr	r5, [r8]
   1aa70:	mov	r6, r0
   1aa74:	b	1a97c <__assert_fail@plt+0x9598>
   1aa78:	mov	fp, #7
   1aa7c:	mov	r6, #0
   1aa80:	add	r5, sp, #4
   1aa84:	mov	r1, r7
   1aa88:	mov	r0, r5
   1aa8c:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1aa90:	subs	fp, fp, #1
   1aa94:	orr	r6, r6, r0
   1aa98:	bne	1aa84 <__assert_fail@plt+0x96a0>
   1aa9c:	b	1aa00 <__assert_fail@plt+0x961c>
   1aaa0:	mov	fp, #8
   1aaa4:	mov	r6, #0
   1aaa8:	add	r5, sp, #4
   1aaac:	mov	r1, r7
   1aab0:	mov	r0, r5
   1aab4:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1aab8:	subs	fp, fp, #1
   1aabc:	orr	r6, r6, r0
   1aac0:	bne	1aaac <__assert_fail@plt+0x96c8>
   1aac4:	b	1aa00 <__assert_fail@plt+0x961c>
   1aac8:	mov	fp, #4
   1aacc:	mov	r6, #0
   1aad0:	add	r5, sp, fp
   1aad4:	mov	r1, r7
   1aad8:	mov	r0, r5
   1aadc:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1aae0:	subs	fp, fp, #1
   1aae4:	orr	r6, r6, r0
   1aae8:	bne	1aad4 <__assert_fail@plt+0x96f0>
   1aaec:	b	1aa00 <__assert_fail@plt+0x961c>
   1aaf0:	mov	fp, #5
   1aaf4:	mov	r6, #0
   1aaf8:	add	r5, sp, #4
   1aafc:	mov	r1, r7
   1ab00:	mov	r0, r5
   1ab04:	bl	1a5b8 <__assert_fail@plt+0x91d4>
   1ab08:	subs	fp, fp, #1
   1ab0c:	orr	r6, r6, r0
   1ab10:	bne	1aafc <__assert_fail@plt+0x9718>
   1ab14:	b	1aa00 <__assert_fail@plt+0x961c>
   1ab18:	ldr	r3, [sp, #4]
   1ab1c:	orr	r4, r4, #2
   1ab20:	str	r3, [r9]
   1ab24:	b	1a6f0 <__assert_fail@plt+0x930c>
   1ab28:	ldr	r3, [pc, #12]	; 1ab3c <__assert_fail@plt+0x9758>
   1ab2c:	mov	r2, #85	; 0x55
   1ab30:	ldr	r1, [pc, #8]	; 1ab40 <__assert_fail@plt+0x975c>
   1ab34:	ldr	r0, [pc, #8]	; 1ab44 <__assert_fail@plt+0x9760>
   1ab38:	bl	113e4 <__assert_fail@plt>
   1ab3c:	strdeq	sp, [r1], -r0
   1ab40:			; <UNDEFINED> instruction: 0x0001d9b8
   1ab44:	andeq	sp, r1, r8, asr #19
   1ab48:	ldr	ip, [pc, #148]	; 1abe4 <__assert_fail@plt+0x9800>
   1ab4c:	sub	r0, r0, #1
   1ab50:	push	{lr}		; (str lr, [sp, #-4]!)
   1ab54:	sub	sp, sp, #20
   1ab58:	ldr	r5, [ip]
   1ab5c:	cmp	r0, #3
   1ab60:	ldrls	pc, [pc, r0, lsl #2]
   1ab64:	b	1abd0 <__assert_fail@plt+0x97ec>
   1ab68:	ldrdeq	sl, [r1], -ip
   1ab6c:	ldrdeq	sl, [r1], -r4
   1ab70:	ldrdeq	sl, [r1], -r4
   1ab74:	andeq	sl, r1, r8, ror fp
   1ab78:	ldr	r0, [pc, #104]	; 1abe8 <__assert_fail@plt+0x9804>
   1ab7c:	cmp	r1, #0
   1ab80:	movlt	r3, #0
   1ab84:	ldrlt	r4, [pc, #96]	; 1abec <__assert_fail@plt+0x9808>
   1ab88:	ldrge	r6, [r3, r1, lsl #4]
   1ab8c:	sublt	r4, r4, r1
   1ab90:	strblt	r2, [sp, #12]
   1ab94:	mov	r1, r0
   1ab98:	mov	r2, #5
   1ab9c:	mov	r0, #0
   1aba0:	strblt	r3, [sp, #13]
   1aba4:	addlt	r6, sp, #12
   1aba8:	ldrge	r4, [pc, #60]	; 1abec <__assert_fail@plt+0x9808>
   1abac:	bl	11168 <dcgettext@plt>
   1abb0:	ldr	r3, [sp, #24]
   1abb4:	str	r6, [sp]
   1abb8:	str	r3, [sp, #4]
   1abbc:	mov	r1, #0
   1abc0:	mov	r3, r4
   1abc4:	mov	r2, r0
   1abc8:	mov	r0, r5
   1abcc:	bl	11204 <error@plt>
   1abd0:	bl	113cc <abort@plt>
   1abd4:	ldr	r0, [pc, #20]	; 1abf0 <__assert_fail@plt+0x980c>
   1abd8:	b	1ab7c <__assert_fail@plt+0x9798>
   1abdc:	ldr	r0, [pc, #16]	; 1abf4 <__assert_fail@plt+0x9810>
   1abe0:	b	1ab7c <__assert_fail@plt+0x9798>
   1abe4:	andeq	lr, r2, r4, lsl #3
   1abe8:	strdeq	sp, [r1], -r8
   1abec:	andeq	sp, r1, ip, asr sl
   1abf0:	andeq	sp, r1, r4, lsl sl
   1abf4:	andeq	sp, r1, ip, lsr sl
   1abf8:	push	{r4, r5, r6, r7, r8, lr}
   1abfc:	subs	r5, r1, #0
   1ac00:	mov	r4, r0
   1ac04:	blt	1ac78 <__assert_fail@plt+0x9894>
   1ac08:	moveq	r6, #0
   1ac0c:	moveq	r7, #0
   1ac10:	bne	1ac38 <__assert_fail@plt+0x9854>
   1ac14:	ldr	r2, [r4]
   1ac18:	ldr	r1, [r4, #4]
   1ac1c:	mov	r0, #0
   1ac20:	mul	ip, r2, r7
   1ac24:	umull	r2, r3, r2, r5
   1ac28:	mla	r5, r5, r1, ip
   1ac2c:	add	r3, r5, r3
   1ac30:	strd	r2, [r4]
   1ac34:	pop	{r4, r5, r6, r7, r8, pc}
   1ac38:	asr	r7, r5, #31
   1ac3c:	mov	r2, r5
   1ac40:	mov	r3, r7
   1ac44:	mvn	r0, #0
   1ac48:	mvn	r1, #0
   1ac4c:	bl	1bb4c <__assert_fail@plt+0xa768>
   1ac50:	ldrd	r2, [r4]
   1ac54:	mov	r6, r5
   1ac58:	cmp	r1, r3
   1ac5c:	cmpeq	r0, r2
   1ac60:	bcs	1ac14 <__assert_fail@plt+0x9830>
   1ac64:	mvn	r2, #0
   1ac68:	mvn	r3, #0
   1ac6c:	mov	r0, #1
   1ac70:	strd	r2, [r4]
   1ac74:	pop	{r4, r5, r6, r7, r8, pc}
   1ac78:	ldrd	r2, [r0]
   1ac7c:	orrs	r3, r2, r3
   1ac80:	moveq	r6, r5
   1ac84:	asreq	r7, r6, #31
   1ac88:	bne	1ac64 <__assert_fail@plt+0x9880>
   1ac8c:	b	1ac14 <__assert_fail@plt+0x9830>
   1ac90:	cmp	r2, #36	; 0x24
   1ac94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac98:	sub	sp, sp, #20
   1ac9c:	bhi	1b210 <__assert_fail@plt+0x9e2c>
   1aca0:	cmp	r1, #0
   1aca4:	mov	r8, r2
   1aca8:	mov	r7, r0
   1acac:	mov	r5, r1
   1acb0:	mov	r6, r3
   1acb4:	addeq	r5, sp, #4
   1acb8:	bl	112c4 <__errno_location@plt>
   1acbc:	mov	r3, #0
   1acc0:	str	r3, [r0]
   1acc4:	mov	r9, r0
   1acc8:	bl	1127c <__ctype_b_loc@plt>
   1accc:	ldrb	r3, [r7]
   1acd0:	mov	r2, r7
   1acd4:	ldr	r0, [r0]
   1acd8:	b	1ace0 <__assert_fail@plt+0x98fc>
   1acdc:	ldrb	r3, [r2, #1]!
   1ace0:	lsl	r1, r3, #1
   1ace4:	ldrh	r4, [r0, r1]
   1ace8:	ands	r4, r4, #8192	; 0x2000
   1acec:	bne	1acdc <__assert_fail@plt+0x98f8>
   1acf0:	cmp	r3, #45	; 0x2d
   1acf4:	bne	1ad08 <__assert_fail@plt+0x9924>
   1acf8:	mov	r4, #4
   1acfc:	mov	r0, r4
   1ad00:	add	sp, sp, #20
   1ad04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad08:	mov	r2, r8
   1ad0c:	mov	r3, r4
   1ad10:	mov	r1, r5
   1ad14:	mov	r0, r7
   1ad18:	bl	11138 <__strtoull_internal@plt>
   1ad1c:	ldr	r8, [r5]
   1ad20:	cmp	r7, r8
   1ad24:	mov	r2, r0
   1ad28:	str	r0, [sp, #8]
   1ad2c:	str	r1, [sp, #12]
   1ad30:	beq	1ad7c <__assert_fail@plt+0x9998>
   1ad34:	ldr	r4, [r9]
   1ad38:	cmp	r4, #0
   1ad3c:	bne	1ad6c <__assert_fail@plt+0x9988>
   1ad40:	ldr	r3, [sp, #56]	; 0x38
   1ad44:	cmp	r3, #0
   1ad48:	beq	1ad58 <__assert_fail@plt+0x9974>
   1ad4c:	ldrb	r9, [r8]
   1ad50:	cmp	r9, #0
   1ad54:	bne	1adb4 <__assert_fail@plt+0x99d0>
   1ad58:	mov	r0, r4
   1ad5c:	str	r2, [r6]
   1ad60:	str	r1, [r6, #4]
   1ad64:	add	sp, sp, #20
   1ad68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad6c:	cmp	r4, #34	; 0x22
   1ad70:	bne	1acf8 <__assert_fail@plt+0x9914>
   1ad74:	mov	r4, #1
   1ad78:	b	1ad40 <__assert_fail@plt+0x995c>
   1ad7c:	ldr	r3, [sp, #56]	; 0x38
   1ad80:	cmp	r3, #0
   1ad84:	beq	1acf8 <__assert_fail@plt+0x9914>
   1ad88:	ldrb	r1, [r8]
   1ad8c:	cmp	r1, #0
   1ad90:	beq	1acf8 <__assert_fail@plt+0x9914>
   1ad94:	mov	r0, r3
   1ad98:	bl	112a0 <strchr@plt>
   1ad9c:	cmp	r0, #0
   1ada0:	beq	1acf8 <__assert_fail@plt+0x9914>
   1ada4:	ldrb	r9, [r8]
   1ada8:	mov	r2, #1
   1adac:	mov	r3, #0
   1adb0:	strd	r2, [sp, #8]
   1adb4:	mov	r1, r9
   1adb8:	ldr	r0, [sp, #56]	; 0x38
   1adbc:	bl	112a0 <strchr@plt>
   1adc0:	cmp	r0, #0
   1adc4:	beq	1b1cc <__assert_fail@plt+0x9de8>
   1adc8:	sub	r3, r9, #69	; 0x45
   1adcc:	cmp	r3, #47	; 0x2f
   1add0:	ldrls	pc, [pc, r3, lsl #2]
   1add4:	b	1ae98 <__assert_fail@plt+0x9ab4>
   1add8:	andeq	sl, r1, r8, lsl #31
   1addc:	muleq	r1, r8, lr
   1ade0:	andeq	sl, r1, r8, lsl #31
   1ade4:	muleq	r1, r8, lr
   1ade8:	muleq	r1, r8, lr
   1adec:	muleq	r1, r8, lr
   1adf0:	andeq	sl, r1, r8, lsl #31
   1adf4:	muleq	r1, r8, lr
   1adf8:	andeq	sl, r1, r8, lsl #31
   1adfc:	muleq	r1, r8, lr
   1ae00:	muleq	r1, r8, lr
   1ae04:	andeq	sl, r1, r8, lsl #31
   1ae08:	muleq	r1, r8, lr
   1ae0c:	muleq	r1, r8, lr
   1ae10:	muleq	r1, r8, lr
   1ae14:	andeq	sl, r1, r8, lsl #31
   1ae18:	muleq	r1, r8, lr
   1ae1c:	muleq	r1, r8, lr
   1ae20:	muleq	r1, r8, lr
   1ae24:	muleq	r1, r8, lr
   1ae28:	andeq	sl, r1, r8, lsl #31
   1ae2c:	andeq	sl, r1, r8, lsl #31
   1ae30:	muleq	r1, r8, lr
   1ae34:	muleq	r1, r8, lr
   1ae38:	muleq	r1, r8, lr
   1ae3c:	muleq	r1, r8, lr
   1ae40:	muleq	r1, r8, lr
   1ae44:	muleq	r1, r8, lr
   1ae48:	muleq	r1, r8, lr
   1ae4c:	muleq	r1, r8, lr
   1ae50:	muleq	r1, r8, lr
   1ae54:	muleq	r1, r8, lr
   1ae58:	muleq	r1, r8, lr
   1ae5c:	muleq	r1, r8, lr
   1ae60:	andeq	sl, r1, r8, lsl #31
   1ae64:	muleq	r1, r8, lr
   1ae68:	muleq	r1, r8, lr
   1ae6c:	muleq	r1, r8, lr
   1ae70:	andeq	sl, r1, r8, lsl #31
   1ae74:	muleq	r1, r8, lr
   1ae78:	andeq	sl, r1, r8, lsl #31
   1ae7c:	muleq	r1, r8, lr
   1ae80:	muleq	r1, r8, lr
   1ae84:	muleq	r1, r8, lr
   1ae88:	muleq	r1, r8, lr
   1ae8c:	muleq	r1, r8, lr
   1ae90:	muleq	r1, r8, lr
   1ae94:	andeq	sl, r1, r8, lsl #31
   1ae98:	mov	r7, #1
   1ae9c:	mov	sl, #1024	; 0x400
   1aea0:	sub	r9, r9, #66	; 0x42
   1aea4:	cmp	r9, #53	; 0x35
   1aea8:	ldrls	pc, [pc, r9, lsl #2]
   1aeac:	b	1b1cc <__assert_fail@plt+0x9de8>
   1aeb0:	andeq	fp, r1, r8, lsl r1
   1aeb4:	andeq	fp, r1, ip, asr #3
   1aeb8:	andeq	fp, r1, ip, asr #3
   1aebc:	strdeq	fp, [r1], -r0
   1aec0:	andeq	fp, r1, ip, asr #3
   1aec4:	andeq	fp, r1, r8, asr #1
   1aec8:	andeq	fp, r1, ip, asr #3
   1aecc:	andeq	fp, r1, ip, asr #3
   1aed0:	andeq	fp, r1, ip, asr #3
   1aed4:	andeq	fp, r1, r8, lsr #1
   1aed8:	andeq	fp, r1, ip, asr #3
   1aedc:	andeq	fp, r1, r4, ror r1
   1aee0:	andeq	fp, r1, ip, asr #3
   1aee4:	andeq	fp, r1, ip, asr #3
   1aee8:	andeq	fp, r1, ip, asr #2
   1aeec:	andeq	fp, r1, ip, asr #3
   1aef0:	andeq	fp, r1, ip, asr #3
   1aef4:	andeq	fp, r1, ip, asr #3
   1aef8:	andeq	fp, r1, r4, lsr #3
   1aefc:	andeq	fp, r1, ip, asr #3
   1af00:	andeq	fp, r1, ip, asr #3
   1af04:	andeq	fp, r1, ip, asr #3
   1af08:	andeq	fp, r1, ip, asr #3
   1af0c:	andeq	fp, r1, r0, lsl #1
   1af10:	andeq	fp, r1, ip, asr #32
   1af14:	andeq	fp, r1, ip, asr #3
   1af18:	andeq	fp, r1, ip, asr #3
   1af1c:	andeq	fp, r1, ip, asr #3
   1af20:	andeq	fp, r1, ip, asr #3
   1af24:	andeq	fp, r1, ip, asr #3
   1af28:	andeq	fp, r1, ip, asr #3
   1af2c:	andeq	fp, r1, ip, asr #3
   1af30:	andeq	fp, r1, r8, lsl r0
   1af34:	andeq	fp, r1, r8
   1af38:	andeq	fp, r1, ip, asr #3
   1af3c:	andeq	fp, r1, ip, asr #3
   1af40:	andeq	fp, r1, ip, asr #3
   1af44:	andeq	fp, r1, r8, asr #1
   1af48:	andeq	fp, r1, ip, asr #3
   1af4c:	andeq	fp, r1, ip, asr #3
   1af50:	andeq	fp, r1, ip, asr #3
   1af54:	andeq	fp, r1, r8, lsr #1
   1af58:	andeq	fp, r1, ip, asr #3
   1af5c:	andeq	fp, r1, r4, ror r1
   1af60:	andeq	fp, r1, ip, asr #3
   1af64:	andeq	fp, r1, ip, asr #3
   1af68:	andeq	fp, r1, ip, asr #3
   1af6c:	andeq	fp, r1, ip, asr #3
   1af70:	andeq	fp, r1, ip, asr #3
   1af74:	andeq	fp, r1, ip, asr #3
   1af78:	andeq	fp, r1, r4, lsr #3
   1af7c:	andeq	fp, r1, ip, asr #3
   1af80:	andeq	fp, r1, ip, asr #3
   1af84:	andeq	sl, r1, r4, asr #31
   1af88:	mov	r1, #48	; 0x30
   1af8c:	ldr	r0, [sp, #56]	; 0x38
   1af90:	bl	112a0 <strchr@plt>
   1af94:	cmp	r0, #0
   1af98:	beq	1ae98 <__assert_fail@plt+0x9ab4>
   1af9c:	ldrb	r3, [r8, #1]
   1afa0:	cmp	r3, #68	; 0x44
   1afa4:	beq	1afb8 <__assert_fail@plt+0x9bd4>
   1afa8:	cmp	r3, #105	; 0x69
   1afac:	beq	1b1dc <__assert_fail@plt+0x9df8>
   1afb0:	cmp	r3, #66	; 0x42
   1afb4:	bne	1ae98 <__assert_fail@plt+0x9ab4>
   1afb8:	mov	r7, #2
   1afbc:	mov	sl, #1000	; 0x3e8
   1afc0:	b	1aea0 <__assert_fail@plt+0x9abc>
   1afc4:	ldrd	r2, [sp, #8]
   1afc8:	cmp	r2, #0
   1afcc:	sbcs	r1, r3, #0
   1afd0:	blt	1b1f4 <__assert_fail@plt+0x9e10>
   1afd4:	adds	r2, r2, r2
   1afd8:	adc	r3, r3, r3
   1afdc:	mov	r1, r3
   1afe0:	mov	r9, #0
   1afe4:	str	r2, [sp, #8]
   1afe8:	str	r3, [sp, #12]
   1afec:	add	r3, r8, r7
   1aff0:	str	r3, [r5]
   1aff4:	ldrb	r3, [r8, r7]
   1aff8:	orr	r4, r4, r9
   1affc:	cmp	r3, #0
   1b000:	orrne	r4, r4, #2
   1b004:	b	1ad58 <__assert_fail@plt+0x9974>
   1b008:	ldr	r2, [sp, #8]
   1b00c:	ldr	r1, [sp, #12]
   1b010:	mov	r9, #0
   1b014:	b	1afec <__assert_fail@plt+0x9c08>
   1b018:	ldrd	r2, [sp, #8]
   1b01c:	ldr	r1, [pc, #512]	; 1b224 <__assert_fail@plt+0x9e40>
   1b020:	mvn	r0, #0
   1b024:	cmp	r3, r1
   1b028:	cmpeq	r2, r0
   1b02c:	bhi	1b1f4 <__assert_fail@plt+0x9e10>
   1b030:	lsl	r1, r3, #9
   1b034:	orr	r1, r1, r2, lsr #23
   1b038:	lsl	r2, r2, #9
   1b03c:	str	r1, [sp, #12]
   1b040:	str	r2, [sp, #8]
   1b044:	mov	r9, #0
   1b048:	b	1afec <__assert_fail@plt+0x9c08>
   1b04c:	mov	fp, #7
   1b050:	mov	r9, #0
   1b054:	add	r8, sp, #8
   1b058:	mov	r1, sl
   1b05c:	mov	r0, r8
   1b060:	bl	1abf8 <__assert_fail@plt+0x9814>
   1b064:	subs	fp, fp, #1
   1b068:	orr	r9, r9, r0
   1b06c:	bne	1b058 <__assert_fail@plt+0x9c74>
   1b070:	ldr	r8, [r5]
   1b074:	ldr	r2, [sp, #8]
   1b078:	ldr	r1, [sp, #12]
   1b07c:	b	1afec <__assert_fail@plt+0x9c08>
   1b080:	mov	fp, #8
   1b084:	mov	r9, #0
   1b088:	add	r8, sp, fp
   1b08c:	mov	r1, sl
   1b090:	mov	r0, r8
   1b094:	bl	1abf8 <__assert_fail@plt+0x9814>
   1b098:	subs	fp, fp, #1
   1b09c:	orr	r9, r9, r0
   1b0a0:	bne	1b08c <__assert_fail@plt+0x9ca8>
   1b0a4:	b	1b070 <__assert_fail@plt+0x9c8c>
   1b0a8:	mov	r1, sl
   1b0ac:	add	r0, sp, #8
   1b0b0:	bl	1abf8 <__assert_fail@plt+0x9814>
   1b0b4:	ldr	r8, [r5]
   1b0b8:	ldr	r2, [sp, #8]
   1b0bc:	ldr	r1, [sp, #12]
   1b0c0:	mov	r9, r0
   1b0c4:	b	1afec <__assert_fail@plt+0x9c08>
   1b0c8:	mov	fp, #3
   1b0cc:	mov	r9, #0
   1b0d0:	add	r8, sp, #8
   1b0d4:	mov	r1, sl
   1b0d8:	mov	r0, r8
   1b0dc:	bl	1abf8 <__assert_fail@plt+0x9814>
   1b0e0:	subs	fp, fp, #1
   1b0e4:	orr	r9, r9, r0
   1b0e8:	bne	1b0d4 <__assert_fail@plt+0x9cf0>
   1b0ec:	b	1b070 <__assert_fail@plt+0x9c8c>
   1b0f0:	mov	fp, #6
   1b0f4:	mov	r9, #0
   1b0f8:	add	r8, sp, #8
   1b0fc:	mov	r1, sl
   1b100:	mov	r0, r8
   1b104:	bl	1abf8 <__assert_fail@plt+0x9814>
   1b108:	subs	fp, fp, #1
   1b10c:	orr	r9, r9, r0
   1b110:	bne	1b0fc <__assert_fail@plt+0x9d18>
   1b114:	b	1b070 <__assert_fail@plt+0x9c8c>
   1b118:	ldrd	r0, [sp, #8]
   1b11c:	ldr	r3, [pc, #260]	; 1b228 <__assert_fail@plt+0x9e44>
   1b120:	mvn	r2, #0
   1b124:	cmp	r1, r3
   1b128:	cmpeq	r0, r2
   1b12c:	bhi	1b1f4 <__assert_fail@plt+0x9e10>
   1b130:	lsl	r1, r1, #10
   1b134:	orr	r1, r1, r0, lsr #22
   1b138:	lsl	r2, r0, #10
   1b13c:	str	r1, [sp, #12]
   1b140:	str	r2, [sp, #8]
   1b144:	mov	r9, #0
   1b148:	b	1afec <__assert_fail@plt+0x9c08>
   1b14c:	mov	fp, #5
   1b150:	mov	r9, #0
   1b154:	add	r8, sp, #8
   1b158:	mov	r1, sl
   1b15c:	mov	r0, r8
   1b160:	bl	1abf8 <__assert_fail@plt+0x9814>
   1b164:	subs	fp, fp, #1
   1b168:	orr	r9, r9, r0
   1b16c:	bne	1b158 <__assert_fail@plt+0x9d74>
   1b170:	b	1b070 <__assert_fail@plt+0x9c8c>
   1b174:	mov	r1, sl
   1b178:	add	r0, sp, #8
   1b17c:	bl	1abf8 <__assert_fail@plt+0x9814>
   1b180:	mov	r1, sl
   1b184:	mov	r9, r0
   1b188:	add	r0, sp, #8
   1b18c:	bl	1abf8 <__assert_fail@plt+0x9814>
   1b190:	ldr	r8, [r5]
   1b194:	ldr	r2, [sp, #8]
   1b198:	ldr	r1, [sp, #12]
   1b19c:	orr	r9, r9, r0
   1b1a0:	b	1afec <__assert_fail@plt+0x9c08>
   1b1a4:	mov	fp, #4
   1b1a8:	mov	r9, #0
   1b1ac:	add	r8, sp, #8
   1b1b0:	mov	r1, sl
   1b1b4:	mov	r0, r8
   1b1b8:	bl	1abf8 <__assert_fail@plt+0x9814>
   1b1bc:	subs	fp, fp, #1
   1b1c0:	orr	r9, r9, r0
   1b1c4:	bne	1b1b0 <__assert_fail@plt+0x9dcc>
   1b1c8:	b	1b070 <__assert_fail@plt+0x9c8c>
   1b1cc:	ldrd	r2, [sp, #8]
   1b1d0:	orr	r4, r4, #2
   1b1d4:	strd	r2, [r6]
   1b1d8:	b	1acfc <__assert_fail@plt+0x9918>
   1b1dc:	ldrb	r7, [r8, #2]
   1b1e0:	mov	sl, #1024	; 0x400
   1b1e4:	cmp	r7, #66	; 0x42
   1b1e8:	movne	r7, #1
   1b1ec:	moveq	r7, #3
   1b1f0:	b	1aea0 <__assert_fail@plt+0x9abc>
   1b1f4:	mvn	r1, #0
   1b1f8:	mvn	r0, #0
   1b1fc:	mvn	r2, #0
   1b200:	strd	r0, [sp, #8]
   1b204:	mov	r9, #1
   1b208:	mov	r1, r2
   1b20c:	b	1afec <__assert_fail@plt+0x9c08>
   1b210:	ldr	r3, [pc, #20]	; 1b22c <__assert_fail@plt+0x9e48>
   1b214:	mov	r2, #85	; 0x55
   1b218:	ldr	r1, [pc, #16]	; 1b230 <__assert_fail@plt+0x9e4c>
   1b21c:	ldr	r0, [pc, #16]	; 1b234 <__assert_fail@plt+0x9e50>
   1b220:	bl	113e4 <__assert_fail@plt>
   1b224:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1b228:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1b22c:	andeq	sp, r1, r0, ror #20
   1b230:			; <UNDEFINED> instruction: 0x0001d9b8
   1b234:	andeq	sp, r1, r8, asr #19
   1b238:	cmp	r1, #0
   1b23c:	cmpne	r0, #0
   1b240:	moveq	r1, #1
   1b244:	moveq	r0, r1
   1b248:	umull	r2, r3, r0, r1
   1b24c:	adds	r3, r3, #0
   1b250:	movne	r3, #1
   1b254:	cmp	r2, #0
   1b258:	blt	1b268 <__assert_fail@plt+0x9e84>
   1b25c:	cmp	r3, #0
   1b260:	bne	1b268 <__assert_fail@plt+0x9e84>
   1b264:	b	11090 <calloc@plt>
   1b268:	push	{r4, lr}
   1b26c:	bl	112c4 <__errno_location@plt>
   1b270:	mov	r3, #12
   1b274:	str	r3, [r0]
   1b278:	mov	r0, #0
   1b27c:	pop	{r4, pc}
   1b280:	cmp	r0, #0
   1b284:	moveq	r0, #1
   1b288:	cmp	r0, #0
   1b28c:	blt	1b294 <__assert_fail@plt+0x9eb0>
   1b290:	b	1121c <malloc@plt>
   1b294:	push	{r4, lr}
   1b298:	bl	112c4 <__errno_location@plt>
   1b29c:	mov	r3, #12
   1b2a0:	str	r3, [r0]
   1b2a4:	mov	r0, #0
   1b2a8:	pop	{r4, pc}
   1b2ac:	cmp	r0, #0
   1b2b0:	beq	1b2d4 <__assert_fail@plt+0x9ef0>
   1b2b4:	cmp	r1, #0
   1b2b8:	push	{lr}		; (str lr, [sp, #-4]!)
   1b2bc:	sub	sp, sp, #12
   1b2c0:	beq	1b2dc <__assert_fail@plt+0x9ef8>
   1b2c4:	blt	1b2f4 <__assert_fail@plt+0x9f10>
   1b2c8:	add	sp, sp, #12
   1b2cc:	pop	{lr}		; (ldr lr, [sp], #4)
   1b2d0:	b	11174 <realloc@plt>
   1b2d4:	mov	r0, r1
   1b2d8:	b	1b280 <__assert_fail@plt+0x9e9c>
   1b2dc:	str	r1, [sp, #4]
   1b2e0:	bl	15110 <__assert_fail@plt+0x3d2c>
   1b2e4:	ldr	r3, [sp, #4]
   1b2e8:	mov	r0, r3
   1b2ec:	add	sp, sp, #12
   1b2f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2f4:	bl	112c4 <__errno_location@plt>
   1b2f8:	mov	r2, #12
   1b2fc:	mov	r3, #0
   1b300:	str	r2, [r0]
   1b304:	b	1b2e8 <__assert_fail@plt+0x9f04>
   1b308:	push	{r4, r5, r6, lr}
   1b30c:	mov	r4, r0
   1b310:	bl	111ec <__fpending@plt>
   1b314:	ldr	r5, [r4]
   1b318:	and	r5, r5, #32
   1b31c:	mov	r6, r0
   1b320:	mov	r0, r4
   1b324:	bl	14f78 <__assert_fail@plt+0x3b94>
   1b328:	cmp	r5, #0
   1b32c:	mov	r4, r0
   1b330:	bne	1b350 <__assert_fail@plt+0x9f6c>
   1b334:	cmp	r0, #0
   1b338:	beq	1b348 <__assert_fail@plt+0x9f64>
   1b33c:	cmp	r6, #0
   1b340:	beq	1b36c <__assert_fail@plt+0x9f88>
   1b344:	mvn	r4, #0
   1b348:	mov	r0, r4
   1b34c:	pop	{r4, r5, r6, pc}
   1b350:	cmp	r0, #0
   1b354:	bne	1b344 <__assert_fail@plt+0x9f60>
   1b358:	bl	112c4 <__errno_location@plt>
   1b35c:	str	r4, [r0]
   1b360:	mvn	r4, #0
   1b364:	mov	r0, r4
   1b368:	pop	{r4, r5, r6, pc}
   1b36c:	bl	112c4 <__errno_location@plt>
   1b370:	ldr	r4, [r0]
   1b374:	subs	r4, r4, #9
   1b378:	mvnne	r4, #0
   1b37c:	mov	r0, r4
   1b380:	pop	{r4, r5, r6, pc}
   1b384:	push	{r1, r2, r3}
   1b388:	push	{r4, r5, r6, r7, lr}
   1b38c:	sub	sp, sp, #8
   1b390:	add	r3, sp, #32
   1b394:	ldr	r1, [sp, #28]
   1b398:	str	r3, [sp, #4]
   1b39c:	cmp	r1, #0
   1b3a0:	beq	1b438 <__assert_fail@plt+0xa054>
   1b3a4:	ldr	r2, [pc, #412]	; 1b548 <__assert_fail@plt+0xa164>
   1b3a8:	mov	r5, r0
   1b3ac:	cmp	r1, r2
   1b3b0:	bne	1b3fc <__assert_fail@plt+0xa018>
   1b3b4:	ldr	r6, [pc, #400]	; 1b54c <__assert_fail@plt+0xa168>
   1b3b8:	ldr	r7, [r3]
   1b3bc:	add	r2, sp, #36	; 0x24
   1b3c0:	ldr	r3, [r6]
   1b3c4:	str	r2, [sp, #4]
   1b3c8:	cmp	r3, #0
   1b3cc:	mov	r2, r7
   1b3d0:	blt	1b4fc <__assert_fail@plt+0xa118>
   1b3d4:	bl	11330 <fcntl64@plt>
   1b3d8:	subs	r4, r0, #0
   1b3dc:	blt	1b480 <__assert_fail@plt+0xa09c>
   1b3e0:	mov	r3, #1
   1b3e4:	str	r3, [r6]
   1b3e8:	mov	r0, r4
   1b3ec:	add	sp, sp, #8
   1b3f0:	pop	{r4, r5, r6, r7, lr}
   1b3f4:	add	sp, sp, #12
   1b3f8:	bx	lr
   1b3fc:	cmp	r1, #11
   1b400:	beq	1b428 <__assert_fail@plt+0xa044>
   1b404:	bgt	1b448 <__assert_fail@plt+0xa064>
   1b408:	cmp	r1, #3
   1b40c:	beq	1b428 <__assert_fail@plt+0xa044>
   1b410:	ble	1b53c <__assert_fail@plt+0xa158>
   1b414:	cmp	r1, #8
   1b418:	beq	1b468 <__assert_fail@plt+0xa084>
   1b41c:	ble	1b468 <__assert_fail@plt+0xa084>
   1b420:	cmp	r1, #9
   1b424:	bne	1b468 <__assert_fail@plt+0xa084>
   1b428:	mov	r0, r5
   1b42c:	bl	11330 <fcntl64@plt>
   1b430:	mov	r4, r0
   1b434:	b	1b3e8 <__assert_fail@plt+0xa004>
   1b438:	ldr	r2, [sp, #32]
   1b43c:	bl	11330 <fcntl64@plt>
   1b440:	mov	r4, r0
   1b444:	b	1b3e8 <__assert_fail@plt+0xa004>
   1b448:	ldr	r3, [pc, #256]	; 1b550 <__assert_fail@plt+0xa16c>
   1b44c:	cmp	r1, r3
   1b450:	bgt	1b51c <__assert_fail@plt+0xa138>
   1b454:	cmp	r1, r2
   1b458:	bge	1b468 <__assert_fail@plt+0xa084>
   1b45c:	sub	r3, r3, #6
   1b460:	cmp	r1, r3
   1b464:	beq	1b428 <__assert_fail@plt+0xa044>
   1b468:	ldr	r3, [sp, #4]
   1b46c:	mov	r0, r5
   1b470:	ldr	r2, [r3]
   1b474:	bl	11330 <fcntl64@plt>
   1b478:	mov	r4, r0
   1b47c:	b	1b3e8 <__assert_fail@plt+0xa004>
   1b480:	bl	112c4 <__errno_location@plt>
   1b484:	ldr	r3, [r0]
   1b488:	cmp	r3, #22
   1b48c:	bne	1b3e0 <__assert_fail@plt+0x9ffc>
   1b490:	mov	r2, r7
   1b494:	mov	r0, r5
   1b498:	mov	r1, #0
   1b49c:	bl	11330 <fcntl64@plt>
   1b4a0:	subs	r4, r0, #0
   1b4a4:	blt	1b3e8 <__assert_fail@plt+0xa004>
   1b4a8:	mvn	r3, #0
   1b4ac:	str	r3, [r6]
   1b4b0:	mov	r1, #1
   1b4b4:	mov	r0, r4
   1b4b8:	bl	11330 <fcntl64@plt>
   1b4bc:	subs	r2, r0, #0
   1b4c0:	blt	1b4dc <__assert_fail@plt+0xa0f8>
   1b4c4:	orr	r2, r2, #1
   1b4c8:	mov	r1, #2
   1b4cc:	mov	r0, r4
   1b4d0:	bl	11330 <fcntl64@plt>
   1b4d4:	cmn	r0, #1
   1b4d8:	bne	1b3e8 <__assert_fail@plt+0xa004>
   1b4dc:	bl	112c4 <__errno_location@plt>
   1b4e0:	mov	r5, r0
   1b4e4:	mov	r0, r4
   1b4e8:	ldr	r6, [r5]
   1b4ec:	mvn	r4, #0
   1b4f0:	bl	113d8 <close@plt>
   1b4f4:	str	r6, [r5]
   1b4f8:	b	1b3e8 <__assert_fail@plt+0xa004>
   1b4fc:	mov	r1, #0
   1b500:	bl	11330 <fcntl64@plt>
   1b504:	subs	r4, r0, #0
   1b508:	blt	1b3e8 <__assert_fail@plt+0xa004>
   1b50c:	ldr	r3, [r6]
   1b510:	cmn	r3, #1
   1b514:	beq	1b4b0 <__assert_fail@plt+0xa0cc>
   1b518:	b	1b3e8 <__assert_fail@plt+0xa004>
   1b51c:	ldr	r3, [pc, #48]	; 1b554 <__assert_fail@plt+0xa170>
   1b520:	cmp	r1, r3
   1b524:	beq	1b468 <__assert_fail@plt+0xa084>
   1b528:	blt	1b428 <__assert_fail@plt+0xa044>
   1b52c:	add	r3, r3, #1
   1b530:	cmp	r1, r3
   1b534:	bne	1b468 <__assert_fail@plt+0xa084>
   1b538:	b	1b428 <__assert_fail@plt+0xa044>
   1b53c:	cmp	r1, #1
   1b540:	bne	1b468 <__assert_fail@plt+0xa084>
   1b544:	b	1b428 <__assert_fail@plt+0xa044>
   1b548:	andeq	r0, r0, r6, lsl #8
   1b54c:	andeq	lr, r2, r8, ror #7
   1b550:	andeq	r0, r0, r7, lsl #8
   1b554:	andeq	r0, r0, r9, lsl #8
   1b558:	push	{r4, lr}
   1b55c:	mov	r0, #14
   1b560:	bl	1136c <nl_langinfo@plt>
   1b564:	cmp	r0, #0
   1b568:	beq	1b580 <__assert_fail@plt+0xa19c>
   1b56c:	ldrb	r2, [r0]
   1b570:	ldr	r3, [pc, #16]	; 1b588 <__assert_fail@plt+0xa1a4>
   1b574:	cmp	r2, #0
   1b578:	moveq	r0, r3
   1b57c:	pop	{r4, pc}
   1b580:	ldr	r0, [pc]	; 1b588 <__assert_fail@plt+0xa1a4>
   1b584:	pop	{r4, pc}
   1b588:	andeq	sp, r1, ip, ror #20
   1b58c:	push	{r4, r5, r6, r7, lr}
   1b590:	subs	r6, r0, #0
   1b594:	sub	sp, sp, #12
   1b598:	addeq	r6, sp, #4
   1b59c:	mov	r0, r6
   1b5a0:	mov	r5, r2
   1b5a4:	mov	r7, r1
   1b5a8:	bl	111f8 <mbrtowc@plt>
   1b5ac:	cmp	r5, #0
   1b5b0:	cmnne	r0, #3
   1b5b4:	mov	r4, r0
   1b5b8:	bls	1b5d4 <__assert_fail@plt+0xa1f0>
   1b5bc:	mov	r0, #0
   1b5c0:	bl	15240 <__assert_fail@plt+0x3e5c>
   1b5c4:	cmp	r0, #0
   1b5c8:	moveq	r4, #1
   1b5cc:	ldrbeq	r3, [r7]
   1b5d0:	streq	r3, [r6]
   1b5d4:	mov	r0, r4
   1b5d8:	add	sp, sp, #12
   1b5dc:	pop	{r4, r5, r6, r7, pc}
   1b5e0:	push	{r4, r5, r6, lr}
   1b5e4:	subs	r4, r2, #0
   1b5e8:	mov	r6, r0
   1b5ec:	mov	r5, r1
   1b5f0:	beq	1b61c <__assert_fail@plt+0xa238>
   1b5f4:	mov	r1, r4
   1b5f8:	mvn	r0, #0
   1b5fc:	bl	1b62c <__assert_fail@plt+0xa248>
   1b600:	cmp	r0, r5
   1b604:	bcs	1b61c <__assert_fail@plt+0xa238>
   1b608:	bl	112c4 <__errno_location@plt>
   1b60c:	mov	r3, #12
   1b610:	str	r3, [r0]
   1b614:	mov	r0, #0
   1b618:	pop	{r4, r5, r6, pc}
   1b61c:	mul	r1, r5, r4
   1b620:	mov	r0, r6
   1b624:	pop	{r4, r5, r6, lr}
   1b628:	b	1b2ac <__assert_fail@plt+0x9ec8>
   1b62c:	subs	r2, r1, #1
   1b630:	bxeq	lr
   1b634:	bcc	1b80c <__assert_fail@plt+0xa428>
   1b638:	cmp	r0, r1
   1b63c:	bls	1b7f0 <__assert_fail@plt+0xa40c>
   1b640:	tst	r1, r2
   1b644:	beq	1b7fc <__assert_fail@plt+0xa418>
   1b648:	clz	r3, r0
   1b64c:	clz	r2, r1
   1b650:	sub	r3, r2, r3
   1b654:	rsbs	r3, r3, #31
   1b658:	addne	r3, r3, r3, lsl #1
   1b65c:	mov	r2, #0
   1b660:	addne	pc, pc, r3, lsl #2
   1b664:	nop			; (mov r0, r0)
   1b668:	cmp	r0, r1, lsl #31
   1b66c:	adc	r2, r2, r2
   1b670:	subcs	r0, r0, r1, lsl #31
   1b674:	cmp	r0, r1, lsl #30
   1b678:	adc	r2, r2, r2
   1b67c:	subcs	r0, r0, r1, lsl #30
   1b680:	cmp	r0, r1, lsl #29
   1b684:	adc	r2, r2, r2
   1b688:	subcs	r0, r0, r1, lsl #29
   1b68c:	cmp	r0, r1, lsl #28
   1b690:	adc	r2, r2, r2
   1b694:	subcs	r0, r0, r1, lsl #28
   1b698:	cmp	r0, r1, lsl #27
   1b69c:	adc	r2, r2, r2
   1b6a0:	subcs	r0, r0, r1, lsl #27
   1b6a4:	cmp	r0, r1, lsl #26
   1b6a8:	adc	r2, r2, r2
   1b6ac:	subcs	r0, r0, r1, lsl #26
   1b6b0:	cmp	r0, r1, lsl #25
   1b6b4:	adc	r2, r2, r2
   1b6b8:	subcs	r0, r0, r1, lsl #25
   1b6bc:	cmp	r0, r1, lsl #24
   1b6c0:	adc	r2, r2, r2
   1b6c4:	subcs	r0, r0, r1, lsl #24
   1b6c8:	cmp	r0, r1, lsl #23
   1b6cc:	adc	r2, r2, r2
   1b6d0:	subcs	r0, r0, r1, lsl #23
   1b6d4:	cmp	r0, r1, lsl #22
   1b6d8:	adc	r2, r2, r2
   1b6dc:	subcs	r0, r0, r1, lsl #22
   1b6e0:	cmp	r0, r1, lsl #21
   1b6e4:	adc	r2, r2, r2
   1b6e8:	subcs	r0, r0, r1, lsl #21
   1b6ec:	cmp	r0, r1, lsl #20
   1b6f0:	adc	r2, r2, r2
   1b6f4:	subcs	r0, r0, r1, lsl #20
   1b6f8:	cmp	r0, r1, lsl #19
   1b6fc:	adc	r2, r2, r2
   1b700:	subcs	r0, r0, r1, lsl #19
   1b704:	cmp	r0, r1, lsl #18
   1b708:	adc	r2, r2, r2
   1b70c:	subcs	r0, r0, r1, lsl #18
   1b710:	cmp	r0, r1, lsl #17
   1b714:	adc	r2, r2, r2
   1b718:	subcs	r0, r0, r1, lsl #17
   1b71c:	cmp	r0, r1, lsl #16
   1b720:	adc	r2, r2, r2
   1b724:	subcs	r0, r0, r1, lsl #16
   1b728:	cmp	r0, r1, lsl #15
   1b72c:	adc	r2, r2, r2
   1b730:	subcs	r0, r0, r1, lsl #15
   1b734:	cmp	r0, r1, lsl #14
   1b738:	adc	r2, r2, r2
   1b73c:	subcs	r0, r0, r1, lsl #14
   1b740:	cmp	r0, r1, lsl #13
   1b744:	adc	r2, r2, r2
   1b748:	subcs	r0, r0, r1, lsl #13
   1b74c:	cmp	r0, r1, lsl #12
   1b750:	adc	r2, r2, r2
   1b754:	subcs	r0, r0, r1, lsl #12
   1b758:	cmp	r0, r1, lsl #11
   1b75c:	adc	r2, r2, r2
   1b760:	subcs	r0, r0, r1, lsl #11
   1b764:	cmp	r0, r1, lsl #10
   1b768:	adc	r2, r2, r2
   1b76c:	subcs	r0, r0, r1, lsl #10
   1b770:	cmp	r0, r1, lsl #9
   1b774:	adc	r2, r2, r2
   1b778:	subcs	r0, r0, r1, lsl #9
   1b77c:	cmp	r0, r1, lsl #8
   1b780:	adc	r2, r2, r2
   1b784:	subcs	r0, r0, r1, lsl #8
   1b788:	cmp	r0, r1, lsl #7
   1b78c:	adc	r2, r2, r2
   1b790:	subcs	r0, r0, r1, lsl #7
   1b794:	cmp	r0, r1, lsl #6
   1b798:	adc	r2, r2, r2
   1b79c:	subcs	r0, r0, r1, lsl #6
   1b7a0:	cmp	r0, r1, lsl #5
   1b7a4:	adc	r2, r2, r2
   1b7a8:	subcs	r0, r0, r1, lsl #5
   1b7ac:	cmp	r0, r1, lsl #4
   1b7b0:	adc	r2, r2, r2
   1b7b4:	subcs	r0, r0, r1, lsl #4
   1b7b8:	cmp	r0, r1, lsl #3
   1b7bc:	adc	r2, r2, r2
   1b7c0:	subcs	r0, r0, r1, lsl #3
   1b7c4:	cmp	r0, r1, lsl #2
   1b7c8:	adc	r2, r2, r2
   1b7cc:	subcs	r0, r0, r1, lsl #2
   1b7d0:	cmp	r0, r1, lsl #1
   1b7d4:	adc	r2, r2, r2
   1b7d8:	subcs	r0, r0, r1, lsl #1
   1b7dc:	cmp	r0, r1
   1b7e0:	adc	r2, r2, r2
   1b7e4:	subcs	r0, r0, r1
   1b7e8:	mov	r0, r2
   1b7ec:	bx	lr
   1b7f0:	moveq	r0, #1
   1b7f4:	movne	r0, #0
   1b7f8:	bx	lr
   1b7fc:	clz	r2, r1
   1b800:	rsb	r2, r2, #31
   1b804:	lsr	r0, r0, r2
   1b808:	bx	lr
   1b80c:	cmp	r0, #0
   1b810:	mvnne	r0, #0
   1b814:	b	1bb88 <__assert_fail@plt+0xa7a4>
   1b818:	cmp	r1, #0
   1b81c:	beq	1b80c <__assert_fail@plt+0xa428>
   1b820:	push	{r0, r1, lr}
   1b824:	bl	1b62c <__assert_fail@plt+0xa248>
   1b828:	pop	{r1, r2, lr}
   1b82c:	mul	r3, r2, r0
   1b830:	sub	r1, r1, r3
   1b834:	bx	lr
   1b838:	cmp	r1, #0
   1b83c:	beq	1ba48 <__assert_fail@plt+0xa664>
   1b840:	eor	ip, r0, r1
   1b844:	rsbmi	r1, r1, #0
   1b848:	subs	r2, r1, #1
   1b84c:	beq	1ba14 <__assert_fail@plt+0xa630>
   1b850:	movs	r3, r0
   1b854:	rsbmi	r3, r0, #0
   1b858:	cmp	r3, r1
   1b85c:	bls	1ba20 <__assert_fail@plt+0xa63c>
   1b860:	tst	r1, r2
   1b864:	beq	1ba30 <__assert_fail@plt+0xa64c>
   1b868:	clz	r2, r3
   1b86c:	clz	r0, r1
   1b870:	sub	r2, r0, r2
   1b874:	rsbs	r2, r2, #31
   1b878:	addne	r2, r2, r2, lsl #1
   1b87c:	mov	r0, #0
   1b880:	addne	pc, pc, r2, lsl #2
   1b884:	nop			; (mov r0, r0)
   1b888:	cmp	r3, r1, lsl #31
   1b88c:	adc	r0, r0, r0
   1b890:	subcs	r3, r3, r1, lsl #31
   1b894:	cmp	r3, r1, lsl #30
   1b898:	adc	r0, r0, r0
   1b89c:	subcs	r3, r3, r1, lsl #30
   1b8a0:	cmp	r3, r1, lsl #29
   1b8a4:	adc	r0, r0, r0
   1b8a8:	subcs	r3, r3, r1, lsl #29
   1b8ac:	cmp	r3, r1, lsl #28
   1b8b0:	adc	r0, r0, r0
   1b8b4:	subcs	r3, r3, r1, lsl #28
   1b8b8:	cmp	r3, r1, lsl #27
   1b8bc:	adc	r0, r0, r0
   1b8c0:	subcs	r3, r3, r1, lsl #27
   1b8c4:	cmp	r3, r1, lsl #26
   1b8c8:	adc	r0, r0, r0
   1b8cc:	subcs	r3, r3, r1, lsl #26
   1b8d0:	cmp	r3, r1, lsl #25
   1b8d4:	adc	r0, r0, r0
   1b8d8:	subcs	r3, r3, r1, lsl #25
   1b8dc:	cmp	r3, r1, lsl #24
   1b8e0:	adc	r0, r0, r0
   1b8e4:	subcs	r3, r3, r1, lsl #24
   1b8e8:	cmp	r3, r1, lsl #23
   1b8ec:	adc	r0, r0, r0
   1b8f0:	subcs	r3, r3, r1, lsl #23
   1b8f4:	cmp	r3, r1, lsl #22
   1b8f8:	adc	r0, r0, r0
   1b8fc:	subcs	r3, r3, r1, lsl #22
   1b900:	cmp	r3, r1, lsl #21
   1b904:	adc	r0, r0, r0
   1b908:	subcs	r3, r3, r1, lsl #21
   1b90c:	cmp	r3, r1, lsl #20
   1b910:	adc	r0, r0, r0
   1b914:	subcs	r3, r3, r1, lsl #20
   1b918:	cmp	r3, r1, lsl #19
   1b91c:	adc	r0, r0, r0
   1b920:	subcs	r3, r3, r1, lsl #19
   1b924:	cmp	r3, r1, lsl #18
   1b928:	adc	r0, r0, r0
   1b92c:	subcs	r3, r3, r1, lsl #18
   1b930:	cmp	r3, r1, lsl #17
   1b934:	adc	r0, r0, r0
   1b938:	subcs	r3, r3, r1, lsl #17
   1b93c:	cmp	r3, r1, lsl #16
   1b940:	adc	r0, r0, r0
   1b944:	subcs	r3, r3, r1, lsl #16
   1b948:	cmp	r3, r1, lsl #15
   1b94c:	adc	r0, r0, r0
   1b950:	subcs	r3, r3, r1, lsl #15
   1b954:	cmp	r3, r1, lsl #14
   1b958:	adc	r0, r0, r0
   1b95c:	subcs	r3, r3, r1, lsl #14
   1b960:	cmp	r3, r1, lsl #13
   1b964:	adc	r0, r0, r0
   1b968:	subcs	r3, r3, r1, lsl #13
   1b96c:	cmp	r3, r1, lsl #12
   1b970:	adc	r0, r0, r0
   1b974:	subcs	r3, r3, r1, lsl #12
   1b978:	cmp	r3, r1, lsl #11
   1b97c:	adc	r0, r0, r0
   1b980:	subcs	r3, r3, r1, lsl #11
   1b984:	cmp	r3, r1, lsl #10
   1b988:	adc	r0, r0, r0
   1b98c:	subcs	r3, r3, r1, lsl #10
   1b990:	cmp	r3, r1, lsl #9
   1b994:	adc	r0, r0, r0
   1b998:	subcs	r3, r3, r1, lsl #9
   1b99c:	cmp	r3, r1, lsl #8
   1b9a0:	adc	r0, r0, r0
   1b9a4:	subcs	r3, r3, r1, lsl #8
   1b9a8:	cmp	r3, r1, lsl #7
   1b9ac:	adc	r0, r0, r0
   1b9b0:	subcs	r3, r3, r1, lsl #7
   1b9b4:	cmp	r3, r1, lsl #6
   1b9b8:	adc	r0, r0, r0
   1b9bc:	subcs	r3, r3, r1, lsl #6
   1b9c0:	cmp	r3, r1, lsl #5
   1b9c4:	adc	r0, r0, r0
   1b9c8:	subcs	r3, r3, r1, lsl #5
   1b9cc:	cmp	r3, r1, lsl #4
   1b9d0:	adc	r0, r0, r0
   1b9d4:	subcs	r3, r3, r1, lsl #4
   1b9d8:	cmp	r3, r1, lsl #3
   1b9dc:	adc	r0, r0, r0
   1b9e0:	subcs	r3, r3, r1, lsl #3
   1b9e4:	cmp	r3, r1, lsl #2
   1b9e8:	adc	r0, r0, r0
   1b9ec:	subcs	r3, r3, r1, lsl #2
   1b9f0:	cmp	r3, r1, lsl #1
   1b9f4:	adc	r0, r0, r0
   1b9f8:	subcs	r3, r3, r1, lsl #1
   1b9fc:	cmp	r3, r1
   1ba00:	adc	r0, r0, r0
   1ba04:	subcs	r3, r3, r1
   1ba08:	cmp	ip, #0
   1ba0c:	rsbmi	r0, r0, #0
   1ba10:	bx	lr
   1ba14:	teq	ip, r0
   1ba18:	rsbmi	r0, r0, #0
   1ba1c:	bx	lr
   1ba20:	movcc	r0, #0
   1ba24:	asreq	r0, ip, #31
   1ba28:	orreq	r0, r0, #1
   1ba2c:	bx	lr
   1ba30:	clz	r2, r1
   1ba34:	rsb	r2, r2, #31
   1ba38:	cmp	ip, #0
   1ba3c:	lsr	r0, r3, r2
   1ba40:	rsbmi	r0, r0, #0
   1ba44:	bx	lr
   1ba48:	cmp	r0, #0
   1ba4c:	mvngt	r0, #-2147483648	; 0x80000000
   1ba50:	movlt	r0, #-2147483648	; 0x80000000
   1ba54:	b	1bb88 <__assert_fail@plt+0xa7a4>
   1ba58:	cmp	r1, #0
   1ba5c:	beq	1ba48 <__assert_fail@plt+0xa664>
   1ba60:	push	{r0, r1, lr}
   1ba64:	bl	1b840 <__assert_fail@plt+0xa45c>
   1ba68:	pop	{r1, r2, lr}
   1ba6c:	mul	r3, r2, r0
   1ba70:	sub	r1, r1, r3
   1ba74:	bx	lr
   1ba78:	cmp	r3, #0
   1ba7c:	cmpeq	r2, #0
   1ba80:	bne	1baa4 <__assert_fail@plt+0xa6c0>
   1ba84:	cmp	r1, #0
   1ba88:	movlt	r1, #-2147483648	; 0x80000000
   1ba8c:	movlt	r0, #0
   1ba90:	blt	1baa0 <__assert_fail@plt+0xa6bc>
   1ba94:	cmpeq	r0, #0
   1ba98:	mvnne	r1, #-2147483648	; 0x80000000
   1ba9c:	mvnne	r0, #0
   1baa0:	b	1bb88 <__assert_fail@plt+0xa7a4>
   1baa4:	sub	sp, sp, #8
   1baa8:	push	{sp, lr}
   1baac:	cmp	r1, #0
   1bab0:	blt	1bad0 <__assert_fail@plt+0xa6ec>
   1bab4:	cmp	r3, #0
   1bab8:	blt	1bb04 <__assert_fail@plt+0xa720>
   1babc:	bl	1bb98 <__assert_fail@plt+0xa7b4>
   1bac0:	ldr	lr, [sp, #4]
   1bac4:	add	sp, sp, #8
   1bac8:	pop	{r2, r3}
   1bacc:	bx	lr
   1bad0:	rsbs	r0, r0, #0
   1bad4:	sbc	r1, r1, r1, lsl #1
   1bad8:	cmp	r3, #0
   1badc:	blt	1bb28 <__assert_fail@plt+0xa744>
   1bae0:	bl	1bb98 <__assert_fail@plt+0xa7b4>
   1bae4:	ldr	lr, [sp, #4]
   1bae8:	add	sp, sp, #8
   1baec:	pop	{r2, r3}
   1baf0:	rsbs	r0, r0, #0
   1baf4:	sbc	r1, r1, r1, lsl #1
   1baf8:	rsbs	r2, r2, #0
   1bafc:	sbc	r3, r3, r3, lsl #1
   1bb00:	bx	lr
   1bb04:	rsbs	r2, r2, #0
   1bb08:	sbc	r3, r3, r3, lsl #1
   1bb0c:	bl	1bb98 <__assert_fail@plt+0xa7b4>
   1bb10:	ldr	lr, [sp, #4]
   1bb14:	add	sp, sp, #8
   1bb18:	pop	{r2, r3}
   1bb1c:	rsbs	r0, r0, #0
   1bb20:	sbc	r1, r1, r1, lsl #1
   1bb24:	bx	lr
   1bb28:	rsbs	r2, r2, #0
   1bb2c:	sbc	r3, r3, r3, lsl #1
   1bb30:	bl	1bb98 <__assert_fail@plt+0xa7b4>
   1bb34:	ldr	lr, [sp, #4]
   1bb38:	add	sp, sp, #8
   1bb3c:	pop	{r2, r3}
   1bb40:	rsbs	r2, r2, #0
   1bb44:	sbc	r3, r3, r3, lsl #1
   1bb48:	bx	lr
   1bb4c:	cmp	r3, #0
   1bb50:	cmpeq	r2, #0
   1bb54:	bne	1bb6c <__assert_fail@plt+0xa788>
   1bb58:	cmp	r1, #0
   1bb5c:	cmpeq	r0, #0
   1bb60:	mvnne	r1, #0
   1bb64:	mvnne	r0, #0
   1bb68:	b	1bb88 <__assert_fail@plt+0xa7a4>
   1bb6c:	sub	sp, sp, #8
   1bb70:	push	{sp, lr}
   1bb74:	bl	1bb98 <__assert_fail@plt+0xa7b4>
   1bb78:	ldr	lr, [sp, #4]
   1bb7c:	add	sp, sp, #8
   1bb80:	pop	{r2, r3}
   1bb84:	bx	lr
   1bb88:	push	{r1, lr}
   1bb8c:	mov	r0, #8
   1bb90:	bl	110a8 <raise@plt>
   1bb94:	pop	{r1, pc}
   1bb98:	cmp	r1, r3
   1bb9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bba0:	cmpeq	r0, r2
   1bba4:	mov	r4, r0
   1bba8:	mov	r5, r1
   1bbac:	ldr	r9, [sp, #28]
   1bbb0:	movcc	r0, #0
   1bbb4:	movcc	r1, #0
   1bbb8:	bcc	1bcb0 <__assert_fail@plt+0xa8cc>
   1bbbc:	cmp	r3, #0
   1bbc0:	clzeq	ip, r2
   1bbc4:	clzne	ip, r3
   1bbc8:	addeq	ip, ip, #32
   1bbcc:	cmp	r5, #0
   1bbd0:	clzeq	r1, r4
   1bbd4:	addeq	r1, r1, #32
   1bbd8:	clzne	r1, r5
   1bbdc:	sub	ip, ip, r1
   1bbe0:	sub	lr, ip, #32
   1bbe4:	lsl	r7, r3, ip
   1bbe8:	rsb	r8, ip, #32
   1bbec:	orr	r7, r7, r2, lsl lr
   1bbf0:	orr	r7, r7, r2, lsr r8
   1bbf4:	lsl	r6, r2, ip
   1bbf8:	cmp	r5, r7
   1bbfc:	cmpeq	r4, r6
   1bc00:	movcc	r0, #0
   1bc04:	movcc	r1, #0
   1bc08:	bcc	1bc24 <__assert_fail@plt+0xa840>
   1bc0c:	mov	r3, #1
   1bc10:	subs	r4, r4, r6
   1bc14:	lsl	r1, r3, lr
   1bc18:	lsl	r0, r3, ip
   1bc1c:	orr	r1, r1, r3, lsr r8
   1bc20:	sbc	r5, r5, r7
   1bc24:	cmp	ip, #0
   1bc28:	beq	1bcb0 <__assert_fail@plt+0xa8cc>
   1bc2c:	lsrs	r3, r7, #1
   1bc30:	rrx	r2, r6
   1bc34:	mov	r6, ip
   1bc38:	b	1bc5c <__assert_fail@plt+0xa878>
   1bc3c:	subs	r4, r4, r2
   1bc40:	sbc	r5, r5, r3
   1bc44:	adds	r4, r4, r4
   1bc48:	adc	r5, r5, r5
   1bc4c:	adds	r4, r4, #1
   1bc50:	adc	r5, r5, #0
   1bc54:	subs	r6, r6, #1
   1bc58:	beq	1bc78 <__assert_fail@plt+0xa894>
   1bc5c:	cmp	r5, r3
   1bc60:	cmpeq	r4, r2
   1bc64:	bcs	1bc3c <__assert_fail@plt+0xa858>
   1bc68:	adds	r4, r4, r4
   1bc6c:	adc	r5, r5, r5
   1bc70:	subs	r6, r6, #1
   1bc74:	bne	1bc5c <__assert_fail@plt+0xa878>
   1bc78:	lsr	r6, r4, ip
   1bc7c:	lsr	r7, r5, ip
   1bc80:	orr	r6, r6, r5, lsl r8
   1bc84:	adds	r2, r0, r4
   1bc88:	orr	r6, r6, r5, lsr lr
   1bc8c:	adc	r3, r1, r5
   1bc90:	lsl	r1, r7, ip
   1bc94:	orr	r1, r1, r6, lsl lr
   1bc98:	lsl	r0, r6, ip
   1bc9c:	orr	r1, r1, r6, lsr r8
   1bca0:	subs	r0, r2, r0
   1bca4:	mov	r4, r6
   1bca8:	mov	r5, r7
   1bcac:	sbc	r1, r3, r1
   1bcb0:	cmp	r9, #0
   1bcb4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1bcb8:	strd	r4, [r9]
   1bcbc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bcc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bcc4:	mov	r7, r0
   1bcc8:	ldr	r6, [pc, #72]	; 1bd18 <__assert_fail@plt+0xa934>
   1bccc:	ldr	r5, [pc, #72]	; 1bd1c <__assert_fail@plt+0xa938>
   1bcd0:	add	r6, pc, r6
   1bcd4:	add	r5, pc, r5
   1bcd8:	sub	r6, r6, r5
   1bcdc:	mov	r8, r1
   1bce0:	mov	r9, r2
   1bce4:	bl	11064 <fdopen@plt-0x20>
   1bce8:	asrs	r6, r6, #2
   1bcec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bcf0:	mov	r4, #0
   1bcf4:	add	r4, r4, #1
   1bcf8:	ldr	r3, [r5], #4
   1bcfc:	mov	r2, r9
   1bd00:	mov	r1, r8
   1bd04:	mov	r0, r7
   1bd08:	blx	r3
   1bd0c:	cmp	r6, r4
   1bd10:	bne	1bcf4 <__assert_fail@plt+0xa910>
   1bd14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bd18:	andeq	r2, r1, r8, lsr r2
   1bd1c:	andeq	r2, r1, r0, lsr r2
   1bd20:	bx	lr
   1bd24:	ldr	r3, [pc, #12]	; 1bd38 <__assert_fail@plt+0xa954>
   1bd28:	mov	r1, #0
   1bd2c:	add	r3, pc, r3
   1bd30:	ldr	r2, [r3]
   1bd34:	b	112dc <__cxa_atexit@plt>
   1bd38:	andeq	r2, r1, r8, lsl #8

Disassembly of section .fini:

0001bd3c <.fini>:
   1bd3c:	push	{r3, lr}
   1bd40:	pop	{r3, pc}
