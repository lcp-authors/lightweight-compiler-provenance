
../repos/coreutils/src/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00010df4 <.init>:
   10df4:	push	{r3, lr}
   10df8:	bl	11ddc <__assert_fail@plt+0xd10>
   10dfc:	pop	{r3, pc}

Disassembly of section .plt:

00010e00 <calloc@plt-0x14>:
   10e00:	push	{lr}		; (str lr, [sp, #-4]!)
   10e04:	ldr	lr, [pc, #4]	; 10e10 <calloc@plt-0x4>
   10e08:	add	lr, pc, lr
   10e0c:	ldr	pc, [lr, #8]!
   10e10:	strdeq	fp, [r1], -r0

00010e14 <calloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #110592	; 0x1b000
   10e1c:	ldr	pc, [ip, #496]!	; 0x1f0

00010e20 <fputs_unlocked@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #110592	; 0x1b000
   10e28:	ldr	pc, [ip, #488]!	; 0x1e8

00010e2c <__strncat_chk@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #110592	; 0x1b000
   10e34:	ldr	pc, [ip, #480]!	; 0x1e0

00010e38 <strcmp@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #110592	; 0x1b000
   10e40:	ldr	pc, [ip, #472]!	; 0x1d8

00010e44 <strtol@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #110592	; 0x1b000
   10e4c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e50 <fflush@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #110592	; 0x1b000
   10e58:	ldr	pc, [ip, #456]!	; 0x1c8

00010e5c <wcwidth@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #110592	; 0x1b000
   10e64:	ldr	pc, [ip, #448]!	; 0x1c0

00010e68 <memmove@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #110592	; 0x1b000
   10e70:	ldr	pc, [ip, #440]!	; 0x1b8

00010e74 <free@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #110592	; 0x1b000
   10e7c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e80 <_exit@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #110592	; 0x1b000
   10e88:	ldr	pc, [ip, #424]!	; 0x1a8

00010e8c <memcpy@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #110592	; 0x1b000
   10e94:	ldr	pc, [ip, #416]!	; 0x1a0

00010e98 <__strtoull_internal@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #110592	; 0x1b000
   10ea0:	ldr	pc, [ip, #408]!	; 0x198

00010ea4 <mbsinit@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #110592	; 0x1b000
   10eac:	ldr	pc, [ip, #400]!	; 0x190

00010eb0 <memcmp@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #110592	; 0x1b000
   10eb8:	ldr	pc, [ip, #392]!	; 0x188

00010ebc <fputc_unlocked@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #110592	; 0x1b000
   10ec4:	ldr	pc, [ip, #384]!	; 0x180

00010ec8 <dcgettext@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #110592	; 0x1b000
   10ed0:	ldr	pc, [ip, #376]!	; 0x178

00010ed4 <realloc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #110592	; 0x1b000
   10edc:	ldr	pc, [ip, #368]!	; 0x170

00010ee0 <textdomain@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #110592	; 0x1b000
   10ee8:	ldr	pc, [ip, #360]!	; 0x168

00010eec <iswprint@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #110592	; 0x1b000
   10ef4:	ldr	pc, [ip, #352]!	; 0x160

00010ef8 <fwrite@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #110592	; 0x1b000
   10f00:	ldr	pc, [ip, #344]!	; 0x158

00010f04 <lseek64@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #110592	; 0x1b000
   10f0c:	ldr	pc, [ip, #336]!	; 0x150

00010f10 <__ctype_get_mb_cur_max@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #110592	; 0x1b000
   10f18:	ldr	pc, [ip, #328]!	; 0x148

00010f1c <strcpy@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #110592	; 0x1b000
   10f24:	ldr	pc, [ip, #320]!	; 0x140

00010f28 <__fpending@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #110592	; 0x1b000
   10f30:	ldr	pc, [ip, #312]!	; 0x138

00010f34 <mbrtowc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #110592	; 0x1b000
   10f3c:	ldr	pc, [ip, #304]!	; 0x130

00010f40 <wcstombs@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #110592	; 0x1b000
   10f48:	ldr	pc, [ip, #296]!	; 0x128

00010f4c <error@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #110592	; 0x1b000
   10f54:	ldr	pc, [ip, #288]!	; 0x120

00010f58 <malloc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #110592	; 0x1b000
   10f60:	ldr	pc, [ip, #280]!	; 0x118

00010f64 <__libc_start_main@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #110592	; 0x1b000
   10f6c:	ldr	pc, [ip, #272]!	; 0x110

00010f70 <__freading@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #110592	; 0x1b000
   10f78:	ldr	pc, [ip, #264]!	; 0x108

00010f7c <__gmon_start__@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #110592	; 0x1b000
   10f84:	ldr	pc, [ip, #256]!	; 0x100

00010f88 <mempcpy@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #110592	; 0x1b000
   10f90:	ldr	pc, [ip, #248]!	; 0xf8

00010f94 <getopt_long@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #110592	; 0x1b000
   10f9c:	ldr	pc, [ip, #240]!	; 0xf0

00010fa0 <__ctype_b_loc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #110592	; 0x1b000
   10fa8:	ldr	pc, [ip, #232]!	; 0xe8

00010fac <exit@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #110592	; 0x1b000
   10fb4:	ldr	pc, [ip, #224]!	; 0xe0

00010fb8 <strlen@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #110592	; 0x1b000
   10fc0:	ldr	pc, [ip, #216]!	; 0xd8

00010fc4 <strchr@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #110592	; 0x1b000
   10fcc:	ldr	pc, [ip, #208]!	; 0xd0

00010fd0 <__errno_location@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #110592	; 0x1b000
   10fd8:	ldr	pc, [ip, #200]!	; 0xc8

00010fdc <__cxa_atexit@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #110592	; 0x1b000
   10fe4:	ldr	pc, [ip, #192]!	; 0xc0

00010fe8 <memset@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #184]!	; 0xb8

00010ff4 <__printf_chk@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #176]!	; 0xb0

00011000 <fileno@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #168]!	; 0xa8

0001100c <__fprintf_chk@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #160]!	; 0xa0

00011018 <fclose@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #110592	; 0x1b000
   11020:	ldr	pc, [ip, #152]!	; 0x98

00011024 <fseeko64@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #110592	; 0x1b000
   1102c:	ldr	pc, [ip, #144]!	; 0x90

00011030 <__overflow@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #110592	; 0x1b000
   11038:	ldr	pc, [ip, #136]!	; 0x88

0001103c <setlocale@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #110592	; 0x1b000
   11044:	ldr	pc, [ip, #128]!	; 0x80

00011048 <wcswidth@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #110592	; 0x1b000
   11050:	ldr	pc, [ip, #120]!	; 0x78

00011054 <strrchr@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #110592	; 0x1b000
   1105c:	ldr	pc, [ip, #112]!	; 0x70

00011060 <nl_langinfo@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #104]!	; 0x68

0001106c <mbstowcs@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #96]!	; 0x60

00011078 <qsort@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #88]!	; 0x58

00011084 <bindtextdomain@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #110592	; 0x1b000
   1108c:	ldr	pc, [ip, #80]!	; 0x50

00011090 <getdelim@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #110592	; 0x1b000
   11098:	ldr	pc, [ip, #72]!	; 0x48

0001109c <strncmp@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #110592	; 0x1b000
   110a4:	ldr	pc, [ip, #64]!	; 0x40

000110a8 <abort@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #56]!	; 0x38

000110b4 <__snprintf_chk@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #48]!	; 0x30

000110c0 <strspn@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #40]!	; 0x28

000110cc <__assert_fail@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #32]!

Disassembly of section .text:

000110d8 <.text>:
   110d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   110dc:	movw	r4, #49576	; 0xc1a8
   110e0:	movt	r4, #2
   110e4:	strd	r6, [sp, #8]
   110e8:	mov	r7, r1
   110ec:	strd	r8, [sp, #16]
   110f0:	mov	r8, r0
   110f4:	strd	sl, [sp, #24]
   110f8:	str	lr, [sp, #32]
   110fc:	sub	sp, sp, #52	; 0x34
   11100:	ldr	r0, [r1]
   11104:	bl	14ebc <__assert_fail@plt+0x3df0>
   11108:	movw	r1, #43192	; 0xa8b8
   1110c:	movt	r1, #1
   11110:	mov	r0, #6
   11114:	bl	1103c <setlocale@plt>
   11118:	movw	r1, #44964	; 0xafa4
   1111c:	movt	r1, #1
   11120:	str	r0, [sp, #32]
   11124:	movw	r0, #44772	; 0xaee4
   11128:	movt	r0, #1
   1112c:	bl	11084 <bindtextdomain@plt>
   11130:	movw	r0, #44772	; 0xaee4
   11134:	movt	r0, #1
   11138:	bl	10ee0 <textdomain@plt>
   1113c:	mov	r0, #65536	; 0x10000
   11140:	bl	11060 <nl_langinfo@plt>
   11144:	cmp	r0, #0
   11148:	str	r0, [r4, #4]
   1114c:	beq	11220 <__assert_fail@plt+0x154>
   11150:	ldrb	r3, [r0]
   11154:	cmp	r3, #0
   11158:	beq	11220 <__assert_fail@plt+0x154>
   1115c:	movw	r3, #38520	; 0x9678
   11160:	movt	r3, #1
   11164:	ldr	r0, [r4, #4]
   11168:	mov	r5, r3
   1116c:	movw	r6, #44992	; 0xafc0
   11170:	movt	r6, #1
   11174:	str	r3, [sp, #28]
   11178:	movw	sl, #49568	; 0xc1a0
   1117c:	movt	sl, #2
   11180:	add	r9, r5, #180	; 0xb4
   11184:	bl	10fb8 <strlen@plt>
   11188:	str	r0, [r4]
   1118c:	movw	r0, #18744	; 0x4938
   11190:	movt	r0, #1
   11194:	bl	19654 <__assert_fail@plt+0x8588>
   11198:	mov	r5, #0
   1119c:	mov	r3, r9
   111a0:	mov	r2, r6
   111a4:	mov	r1, r7
   111a8:	mov	r0, r8
   111ac:	str	r5, [sp]
   111b0:	bl	10f94 <getopt_long@plt>
   111b4:	cmn	r0, #1
   111b8:	beq	1158c <__assert_fail@plt+0x4c0>
   111bc:	cmp	r0, #260	; 0x104
   111c0:	beq	11384 <__assert_fail@plt+0x2b8>
   111c4:	ble	112a0 <__assert_fail@plt+0x1d4>
   111c8:	movw	r3, #265	; 0x109
   111cc:	cmp	r0, r3
   111d0:	beq	11378 <__assert_fail@plt+0x2ac>
   111d4:	bgt	11230 <__assert_fail@plt+0x164>
   111d8:	movw	r3, #262	; 0x106
   111dc:	cmp	r0, r3
   111e0:	beq	1136c <__assert_fail@plt+0x2a0>
   111e4:	blt	11360 <__assert_fail@plt+0x294>
   111e8:	movw	r3, #263	; 0x107
   111ec:	cmp	r0, r3
   111f0:	beq	114d8 <__assert_fail@plt+0x40c>
   111f4:	cmp	r0, #264	; 0x108
   111f8:	bne	11304 <__assert_fail@plt+0x238>
   111fc:	movw	r3, #49652	; 0xc1f4
   11200:	movt	r3, #2
   11204:	ldr	r3, [r3]
   11208:	cmp	r3, #0
   1120c:	bne	11d4c <__assert_fail@plt+0xc80>
   11210:	mov	r1, #1
   11214:	ldr	r0, [sl]
   11218:	bl	13df0 <__assert_fail@plt+0x2d24>
   1121c:	b	11198 <__assert_fail@plt+0xcc>
   11220:	movw	r3, #44988	; 0xafbc
   11224:	movt	r3, #1
   11228:	str	r3, [r4, #4]
   1122c:	b	1115c <__assert_fail@plt+0x90>
   11230:	movw	r3, #267	; 0x10b
   11234:	cmp	r0, r3
   11238:	beq	11418 <__assert_fail@plt+0x34c>
   1123c:	blt	11408 <__assert_fail@plt+0x33c>
   11240:	cmp	r0, #268	; 0x10c
   11244:	beq	114cc <__assert_fail@plt+0x400>
   11248:	movw	r3, #269	; 0x10d
   1124c:	cmp	r0, r3
   11250:	bne	11304 <__assert_fail@plt+0x238>
   11254:	movw	r2, #49464	; 0xc138
   11258:	movt	r2, #2
   1125c:	ldr	r3, [pc, #2852]	; 11d88 <__assert_fail@plt+0xcbc>
   11260:	mov	r1, #1
   11264:	mov	lr, #4
   11268:	ldr	ip, [r2]
   1126c:	movw	r0, #45148	; 0xb05c
   11270:	movt	r0, #1
   11274:	str	lr, [sp]
   11278:	str	r1, [sp, #8]
   1127c:	add	r2, r3, #16
   11280:	ldr	r1, [sl]
   11284:	str	ip, [sp, #4]
   11288:	bl	1480c <__assert_fail@plt+0x3740>
   1128c:	ldr	r3, [sp, #28]
   11290:	add	r0, r3, r0, lsl #2
   11294:	ldr	r3, [r0, #608]	; 0x260
   11298:	str	r3, [r4, #36]	; 0x24
   1129c:	b	11198 <__assert_fail@plt+0xcc>
   112a0:	cmp	r0, #122	; 0x7a
   112a4:	beq	113f8 <__assert_fail@plt+0x32c>
   112a8:	ble	112ec <__assert_fail@plt+0x220>
   112ac:	movw	r3, #257	; 0x101
   112b0:	cmp	r0, r3
   112b4:	beq	113e0 <__assert_fail@plt+0x314>
   112b8:	ble	1130c <__assert_fail@plt+0x240>
   112bc:	movw	r3, #258	; 0x102
   112c0:	cmp	r0, r3
   112c4:	beq	11530 <__assert_fail@plt+0x464>
   112c8:	movw	r3, #259	; 0x103
   112cc:	cmp	r0, r3
   112d0:	bne	11304 <__assert_fail@plt+0x238>
   112d4:	movw	fp, #49416	; 0xc108
   112d8:	movt	fp, #2
   112dc:	ldr	r0, [sl]
   112e0:	bl	11e90 <__assert_fail@plt+0xdc4>
   112e4:	strd	r0, [fp, #16]
   112e8:	b	11198 <__assert_fail@plt+0xcc>
   112ec:	cmn	r0, #2
   112f0:	beq	113d8 <__assert_fail@plt+0x30c>
   112f4:	cmp	r0, #100	; 0x64
   112f8:	beq	11460 <__assert_fail@plt+0x394>
   112fc:	cmn	r0, #3
   11300:	beq	1148c <__assert_fail@plt+0x3c0>
   11304:	mov	r0, #1
   11308:	bl	13728 <__assert_fail@plt+0x265c>
   1130c:	cmp	r0, #256	; 0x100
   11310:	bne	11304 <__assert_fail@plt+0x238>
   11314:	movw	r2, #49464	; 0xc138
   11318:	movt	r2, #2
   1131c:	ldr	r3, [pc, #2664]	; 11d8c <__assert_fail@plt+0xcc0>
   11320:	mov	r1, #1
   11324:	mov	lr, #4
   11328:	ldr	ip, [r2]
   1132c:	movw	r0, #44996	; 0xafc4
   11330:	movt	r0, #1
   11334:	str	lr, [sp]
   11338:	str	r1, [sp, #8]
   1133c:	add	r2, r3, #20
   11340:	ldr	r1, [sl]
   11344:	str	ip, [sp, #4]
   11348:	bl	1480c <__assert_fail@plt+0x3740>
   1134c:	ldr	r3, [sp, #28]
   11350:	add	r0, r3, r0, lsl #2
   11354:	ldr	r3, [r0, #484]	; 0x1e4
   11358:	str	r3, [r4, #32]
   1135c:	b	11198 <__assert_fail@plt+0xcc>
   11360:	ldr	r3, [sl]
   11364:	str	r3, [r4, #16]
   11368:	b	11198 <__assert_fail@plt+0xcc>
   1136c:	mov	r3, #1
   11370:	str	r3, [r4, #48]	; 0x30
   11374:	b	11198 <__assert_fail@plt+0xcc>
   11378:	mov	r3, #1
   1137c:	strb	r3, [r4, #40]	; 0x28
   11380:	b	11198 <__assert_fail@plt+0xcc>
   11384:	movw	r2, #49464	; 0xc138
   11388:	movt	r2, #2
   1138c:	ldr	r3, [pc, #2556]	; 11d90 <__assert_fail@plt+0xcc4>
   11390:	mov	r1, #1
   11394:	mov	lr, #4
   11398:	ldr	ip, [r2]
   1139c:	movw	r0, #45012	; 0xafd4
   113a0:	movt	r0, #1
   113a4:	str	lr, [sp]
   113a8:	movw	fp, #49416	; 0xc108
   113ac:	movt	fp, #2
   113b0:	str	r1, [sp, #8]
   113b4:	add	r2, r3, #20
   113b8:	ldr	r1, [sl]
   113bc:	str	ip, [sp, #4]
   113c0:	bl	1480c <__assert_fail@plt+0x3740>
   113c4:	ldr	r3, [sp, #28]
   113c8:	add	r0, r3, r0, lsl #2
   113cc:	ldr	r3, [r0, #564]	; 0x234
   113d0:	str	r3, [fp, #28]
   113d4:	b	11198 <__assert_fail@plt+0xcc>
   113d8:	mov	r0, r5
   113dc:	bl	13728 <__assert_fail@plt+0x265c>
   113e0:	movw	fp, #49416	; 0xc108
   113e4:	movt	fp, #2
   113e8:	ldr	r0, [sl]
   113ec:	bl	11e90 <__assert_fail@plt+0xdc4>
   113f0:	strd	r0, [fp, #8]
   113f4:	b	11198 <__assert_fail@plt+0xcc>
   113f8:	movw	fp, #49416	; 0xc108
   113fc:	movt	fp, #2
   11400:	strb	r5, [fp, #40]	; 0x28
   11404:	b	11198 <__assert_fail@plt+0xcc>
   11408:	mov	r3, #1
   1140c:	strb	r3, [r4, #20]
   11410:	strb	r3, [r4, #40]	; 0x28
   11414:	b	11198 <__assert_fail@plt+0xcc>
   11418:	ldr	r0, [sl]
   1141c:	cmp	r0, #0
   11420:	beq	1157c <__assert_fail@plt+0x4b0>
   11424:	movw	r2, #43192	; 0xa8b8
   11428:	movt	r2, #1
   1142c:	ldr	r3, [pc, #2400]	; 11d94 <__assert_fail@plt+0xcc8>
   11430:	mov	r1, r5
   11434:	str	r2, [sp]
   11438:	mov	r2, #10
   1143c:	bl	18298 <__assert_fail@plt+0x71cc>
   11440:	cmp	r0, #0
   11444:	bne	11454 <__assert_fail@plt+0x388>
   11448:	ldrd	r2, [r4, #64]	; 0x40
   1144c:	orrs	r3, r2, r3
   11450:	bne	11198 <__assert_fail@plt+0xcc>
   11454:	movw	r1, #45124	; 0xb044
   11458:	movt	r1, #1
   1145c:	b	11d34 <__assert_fail@plt+0xc68>
   11460:	ldr	r2, [sl]
   11464:	ldrb	r3, [r2]
   11468:	cmp	r3, #0
   1146c:	beq	1147c <__assert_fail@plt+0x3b0>
   11470:	ldrb	r2, [r2, #1]
   11474:	cmp	r2, #0
   11478:	bne	11d7c <__assert_fail@plt+0xcb0>
   1147c:	movw	fp, #49416	; 0xc108
   11480:	movt	fp, #2
   11484:	str	r3, [fp, #36]	; 0x24
   11488:	b	11198 <__assert_fail@plt+0xcc>
   1148c:	movw	r2, #45160	; 0xb068
   11490:	movt	r2, #1
   11494:	movw	r3, #49460	; 0xc134
   11498:	movt	r3, #2
   1149c:	movw	r0, #49564	; 0xc19c
   114a0:	movt	r0, #2
   114a4:	stm	sp, {r2, r5}
   114a8:	movw	r1, #40396	; 0x9dcc
   114ac:	movt	r1, #1
   114b0:	ldr	r0, [r0]
   114b4:	movw	r2, #44768	; 0xaee0
   114b8:	movt	r2, #1
   114bc:	ldr	r3, [r3]
   114c0:	bl	17648 <__assert_fail@plt+0x657c>
   114c4:	mov	r0, r5
   114c8:	bl	10fac <exit@plt>
   114cc:	ldr	r3, [sl]
   114d0:	str	r3, [r4, #72]	; 0x48
   114d4:	b	11198 <__assert_fail@plt+0xcc>
   114d8:	movw	r0, #43192	; 0xa8b8
   114dc:	movt	r0, #1
   114e0:	ldr	r3, [pc, #2224]	; 11d98 <__assert_fail@plt+0xccc>
   114e4:	mov	r1, r5
   114e8:	mov	r2, #10
   114ec:	str	r0, [sp]
   114f0:	ldr	r0, [sl]
   114f4:	bl	17c14 <__assert_fail@plt+0x6b48>
   114f8:	cmp	r0, #0
   114fc:	bne	11d2c <__assert_fail@plt+0xc60>
   11500:	ldr	r3, [r4, #28]
   11504:	bics	r2, r3, #-2147483648	; 0x80000000
   11508:	beq	11d2c <__assert_fail@plt+0xc60>
   1150c:	cmp	r3, #0
   11510:	bge	11198 <__assert_fail@plt+0xcc>
   11514:	rsb	r3, r3, #0
   11518:	movw	fp, #49416	; 0xc108
   1151c:	movt	fp, #2
   11520:	mov	r2, #0
   11524:	str	r3, [r4, #28]
   11528:	str	r2, [fp, #32]
   1152c:	b	11198 <__assert_fail@plt+0xcc>
   11530:	movw	r2, #49464	; 0xc138
   11534:	movt	r2, #2
   11538:	ldr	r3, [pc, #2140]	; 11d9c <__assert_fail@plt+0xcd0>
   1153c:	mov	r1, #1
   11540:	mov	lr, #4
   11544:	ldr	ip, [r2]
   11548:	movw	r0, #45004	; 0xafcc
   1154c:	movt	r0, #1
   11550:	str	lr, [sp]
   11554:	str	r1, [sp, #8]
   11558:	add	r2, r3, #16
   1155c:	ldr	r1, [sl]
   11560:	str	ip, [sp, #4]
   11564:	bl	1480c <__assert_fail@plt+0x3740>
   11568:	ldr	r3, [sp, #28]
   1156c:	add	r0, r3, r0, lsl #2
   11570:	ldr	r3, [r0, #528]	; 0x210
   11574:	str	r3, [r4, #44]	; 0x2c
   11578:	b	11198 <__assert_fail@plt+0xcc>
   1157c:	mov	r2, #1
   11580:	mov	r3, #0
   11584:	strd	r2, [r4, #64]	; 0x40
   11588:	b	11198 <__assert_fail@plt+0xcc>
   1158c:	ldr	r3, [r4, #72]	; 0x48
   11590:	cmp	r3, #0
   11594:	beq	115ac <__assert_fail@plt+0x4e0>
   11598:	ldr	r3, [r4, #48]	; 0x30
   1159c:	cmp	r3, #0
   115a0:	movwne	r1, #45176	; 0xb078
   115a4:	movtne	r1, #1
   115a8:	bne	11d54 <__assert_fail@plt+0xc88>
   115ac:	ldrb	r3, [r4, #40]	; 0x28
   115b0:	ldr	r2, [sp, #32]
   115b4:	cmp	r2, #0
   115b8:	movne	r3, #0
   115bc:	andeq	r3, r3, #1
   115c0:	cmp	r3, #0
   115c4:	bne	11cb8 <__assert_fail@plt+0xbec>
   115c8:	ldrb	r3, [r4, #40]	; 0x28
   115cc:	cmp	r3, #0
   115d0:	beq	115e4 <__assert_fail@plt+0x518>
   115d4:	ldr	r2, [r4, #32]
   115d8:	ldr	r3, [r4, #44]	; 0x2c
   115dc:	orrs	r3, r2, r3
   115e0:	beq	11aa0 <__assert_fail@plt+0x9d4>
   115e4:	ldr	r5, [r4, #72]	; 0x48
   115e8:	cmp	r5, #0
   115ec:	beq	1172c <__assert_fail@plt+0x660>
   115f0:	mov	r3, #0
   115f4:	mov	r6, r3
   115f8:	str	r3, [sp, #44]	; 0x2c
   115fc:	b	11614 <__assert_fail@plt+0x548>
   11600:	cmp	r9, #0
   11604:	beq	11d20 <__assert_fail@plt+0xc54>
   11608:	mov	r2, #1
   1160c:	add	r3, r3, r2
   11610:	add	r6, r6, #1
   11614:	ldrb	r9, [r5, r3]
   11618:	cmp	r9, #37	; 0x25
   1161c:	bne	11600 <__assert_fail@plt+0x534>
   11620:	add	fp, r3, #1
   11624:	ldrb	r2, [r5, fp]
   11628:	cmp	r2, #37	; 0x25
   1162c:	bne	11820 <__assert_fail@plt+0x754>
   11630:	mov	r2, #2
   11634:	b	1160c <__assert_fail@plt+0x540>
   11638:	cmp	r6, #0
   1163c:	beq	11b58 <__assert_fail@plt+0xa8c>
   11640:	mov	r1, r6
   11644:	mov	r0, r5
   11648:	bl	17b58 <__assert_fail@plt+0x6a8c>
   1164c:	ldrb	r3, [r9]
   11650:	str	r0, [r4, #56]	; 0x38
   11654:	cmp	r3, #0
   11658:	bne	11b58 <__assert_fail@plt+0xa8c>
   1165c:	ldrb	r3, [r4, #20]
   11660:	cmp	r3, #0
   11664:	beq	1172c <__assert_fail@plt+0x660>
   11668:	mov	r1, r5
   1166c:	movw	r3, #49552	; 0xc190
   11670:	movt	r3, #2
   11674:	mov	r0, #0
   11678:	movw	r9, #49416	; 0xc108
   1167c:	movt	r9, #2
   11680:	ldr	sl, [r3]
   11684:	bl	1719c <__assert_fail@plt+0x60d0>
   11688:	ldr	r9, [r9, #32]
   1168c:	movw	r2, #43192	; 0xa8b8
   11690:	movt	r2, #1
   11694:	mov	r3, r0
   11698:	movw	r0, #44956	; 0xaf9c
   1169c:	movt	r0, #1
   116a0:	ldr	r1, [r4, #56]	; 0x38
   116a4:	movw	r5, #44948	; 0xaf94
   116a8:	movt	r5, #1
   116ac:	movw	ip, #44944	; 0xaf90
   116b0:	movt	ip, #1
   116b4:	movw	r6, #44940	; 0xaf8c
   116b8:	movt	r6, #1
   116bc:	ldr	lr, [r4, #48]	; 0x30
   116c0:	strd	r2, [sp, #28]
   116c4:	cmp	r1, #0
   116c8:	ldr	fp, [r4, #28]
   116cc:	moveq	r1, r2
   116d0:	cmp	r9, #0
   116d4:	movne	r5, r0
   116d8:	mov	r0, #1
   116dc:	cmp	lr, #0
   116e0:	moveq	r6, ip
   116e4:	bl	1719c <__assert_fail@plt+0x60d0>
   116e8:	ldr	r1, [r4, #60]	; 0x3c
   116ec:	mov	r9, r0
   116f0:	mov	r0, #2
   116f4:	ldr	r2, [sp, #28]
   116f8:	cmp	r1, #0
   116fc:	moveq	r1, r2
   11700:	bl	1719c <__assert_fail@plt+0x60d0>
   11704:	movw	r2, #45544	; 0xb1e8
   11708:	movt	r2, #1
   1170c:	stm	sp, {r6, fp}
   11710:	mov	r1, #1
   11714:	str	r5, [sp, #8]
   11718:	str	r9, [sp, #12]
   1171c:	str	r0, [sp, #16]
   11720:	mov	r0, sl
   11724:	ldr	r3, [sp, #32]
   11728:	bl	1100c <__fprintf_chk@plt>
   1172c:	ldr	r3, [r4, #48]	; 0x30
   11730:	cmp	r3, #0
   11734:	beq	11758 <__assert_fail@plt+0x68c>
   11738:	ldr	r3, [r4, #44]	; 0x2c
   1173c:	cmp	r3, #0
   11740:	movwne	r1, #45652	; 0xb254
   11744:	movtne	r1, #1
   11748:	bne	11d54 <__assert_fail@plt+0xc88>
   1174c:	ldrb	r3, [r4, #40]	; 0x28
   11750:	cmp	r3, #0
   11754:	bne	11b68 <__assert_fail@plt+0xa9c>
   11758:	ldr	r3, [r4, #8]
   1175c:	ldr	r0, [r4, #28]
   11760:	cmp	r0, r3
   11764:	bcc	1176c <__assert_fail@plt+0x6a0>
   11768:	bl	12108 <__assert_fail@plt+0x103c>
   1176c:	ldr	r3, [r4, #28]
   11770:	cmp	r3, #0
   11774:	movne	r3, #0
   11778:	bne	11794 <__assert_fail@plt+0x6c8>
   1177c:	movw	r9, #49416	; 0xc108
   11780:	movt	r9, #2
   11784:	ldr	r3, [r9, #36]	; 0x24
   11788:	sub	r3, r3, #256	; 0x100
   1178c:	clz	r3, r3
   11790:	lsr	r3, r3, #5
   11794:	ldr	r2, [r4, #36]	; 0x24
   11798:	str	r3, [r4, #24]
   1179c:	cmp	r2, #0
   117a0:	beq	117b4 <__assert_fail@plt+0x6e8>
   117a4:	movw	r9, #49416	; 0xc108
   117a8:	movt	r9, #2
   117ac:	mov	r3, #0
   117b0:	str	r3, [r9]
   117b4:	movw	r6, #49544	; 0xc188
   117b8:	movt	r6, #2
   117bc:	ldr	r3, [r6]
   117c0:	cmp	r3, r8
   117c4:	bge	1199c <__assert_fail@plt+0x8d0>
   117c8:	ldrb	r3, [r4, #40]	; 0x28
   117cc:	cmp	r3, #0
   117d0:	bne	11aec <__assert_fail@plt+0xa20>
   117d4:	mov	r5, #1
   117d8:	b	117f8 <__assert_fail@plt+0x72c>
   117dc:	mov	r1, #1
   117e0:	ldr	r0, [r7, r3, lsl #2]
   117e4:	bl	13530 <__assert_fail@plt+0x2464>
   117e8:	ldr	r3, [r6]
   117ec:	and	r5, r5, r0
   117f0:	add	r3, r3, #1
   117f4:	str	r3, [r6]
   117f8:	ldr	r3, [r6]
   117fc:	cmp	r3, r8
   11800:	blt	117dc <__assert_fail@plt+0x710>
   11804:	ldrb	r3, [r4, #40]	; 0x28
   11808:	cmp	r3, #0
   1180c:	beq	1197c <__assert_fail@plt+0x8b0>
   11810:	cmp	r5, #0
   11814:	beq	11ba8 <__assert_fail@plt+0xadc>
   11818:	mov	r0, #0
   1181c:	bl	10fac <exit@plt>
   11820:	mov	r3, #0
   11824:	movw	sl, #45308	; 0xb0fc
   11828:	movt	sl, #1
   1182c:	str	r3, [sp, #28]
   11830:	add	r3, r5, fp
   11834:	mov	r0, r3
   11838:	mov	r1, sl
   1183c:	bl	110c0 <strspn@plt>
   11840:	add	fp, fp, r0
   11844:	ldrb	r2, [r5, fp]
   11848:	add	r3, r5, fp
   1184c:	cmp	r2, #39	; 0x27
   11850:	beq	11954 <__assert_fail@plt+0x888>
   11854:	cmp	r2, #48	; 0x30
   11858:	beq	11968 <__assert_fail@plt+0x89c>
   1185c:	cmp	r0, #0
   11860:	bne	11834 <__assert_fail@plt+0x768>
   11864:	mov	r9, r0
   11868:	str	r3, [sp, #32]
   1186c:	add	sl, sp, #44	; 0x2c
   11870:	bl	10fd0 <__errno_location@plt>
   11874:	ldr	r3, [sp, #32]
   11878:	mov	ip, r0
   1187c:	mov	r1, sl
   11880:	mov	r2, #10
   11884:	str	r9, [ip]
   11888:	str	ip, [sp, #32]
   1188c:	mov	r0, r3
   11890:	str	r3, [sp, #36]	; 0x24
   11894:	bl	10e44 <strtol@plt>
   11898:	ldr	ip, [sp, #32]
   1189c:	mov	fp, r0
   118a0:	ldr	r2, [ip]
   118a4:	cmp	r0, #-2147483648	; 0x80000000
   118a8:	cmpne	r2, #34	; 0x22
   118ac:	moveq	r3, #1
   118b0:	movne	r3, #0
   118b4:	movweq	r1, #45312	; 0xb100
   118b8:	mov	r0, r3
   118bc:	ldr	r3, [sp, #36]	; 0x24
   118c0:	movteq	r1, #1
   118c4:	beq	11c48 <__assert_fail@plt+0xb7c>
   118c8:	ldr	r2, [sp, #44]	; 0x2c
   118cc:	cmp	r2, r3
   118d0:	cmpne	fp, #0
   118d4:	bne	11b20 <__assert_fail@plt+0xa54>
   118d8:	ldrb	r9, [r2]
   118dc:	sub	r2, r2, r5
   118e0:	cmp	r9, #0
   118e4:	movweq	r1, #45388	; 0xb14c
   118e8:	movteq	r1, #1
   118ec:	beq	11c48 <__assert_fail@plt+0xb7c>
   118f0:	cmp	r9, #46	; 0x2e
   118f4:	beq	11bd0 <__assert_fail@plt+0xb04>
   118f8:	ldrb	r3, [r5, r2]
   118fc:	cmp	r3, #102	; 0x66
   11900:	movwne	r1, #45444	; 0xb184
   11904:	movtne	r1, #1
   11908:	bne	11c48 <__assert_fail@plt+0xb7c>
   1190c:	add	r1, r2, #1
   11910:	ldrb	r3, [r5, r1]
   11914:	add	r9, r5, r1
   11918:	cmp	r3, #0
   1191c:	bne	11930 <__assert_fail@plt+0x864>
   11920:	b	11d14 <__assert_fail@plt+0xc48>
   11924:	cmp	r3, #0
   11928:	mov	r1, r2
   1192c:	beq	11638 <__assert_fail@plt+0x56c>
   11930:	cmp	r3, #37	; 0x25
   11934:	add	r2, r1, #1
   11938:	ldrb	r3, [r5, r2]
   1193c:	bne	11924 <__assert_fail@plt+0x858>
   11940:	cmp	r3, #37	; 0x25
   11944:	bne	11d70 <__assert_fail@plt+0xca4>
   11948:	add	r2, r1, #2
   1194c:	ldrb	r3, [r5, r2]
   11950:	b	11924 <__assert_fail@plt+0x858>
   11954:	mov	r3, #1
   11958:	add	fp, fp, #1
   1195c:	str	r3, [r4, #48]	; 0x30
   11960:	add	r3, r5, fp
   11964:	b	11834 <__assert_fail@plt+0x768>
   11968:	mov	r3, #1
   1196c:	add	fp, fp, #1
   11970:	str	r3, [sp, #28]
   11974:	add	r3, r5, fp
   11978:	b	11834 <__assert_fail@plt+0x768>
   1197c:	cmp	r5, #0
   11980:	bne	11818 <__assert_fail@plt+0x74c>
   11984:	ldr	r3, [r4, #36]	; 0x24
   11988:	sub	r3, r3, #2
   1198c:	cmp	r3, #1
   11990:	movhi	r0, #2
   11994:	bls	11818 <__assert_fail@plt+0x74c>
   11998:	b	1181c <__assert_fail@plt+0x750>
   1199c:	mov	r3, #0
   119a0:	movw	r9, #49416	; 0xc108
   119a4:	movt	r9, #2
   119a8:	movw	r6, #49560	; 0xc198
   119ac:	movt	r6, #2
   119b0:	movw	r5, #49564	; 0xc19c
   119b4:	movt	r5, #2
   119b8:	add	sl, sp, #44	; 0x2c
   119bc:	str	r3, [sp, #40]	; 0x28
   119c0:	str	r3, [sp, #44]	; 0x2c
   119c4:	b	119e8 <__assert_fail@plt+0x91c>
   119c8:	mov	r1, sl
   119cc:	add	r0, sp, #40	; 0x28
   119d0:	bl	11090 <getdelim@plt>
   119d4:	cmp	r0, #0
   119d8:	ble	11a0c <__assert_fail@plt+0x940>
   119dc:	ldr	r1, [r5]
   119e0:	ldr	r0, [sp, #40]	; 0x28
   119e4:	bl	10e20 <fputs_unlocked@plt>
   119e8:	ldrd	r0, [r4, #64]	; 0x40
   119ec:	ldrb	r2, [r9, #40]	; 0x28
   119f0:	ldr	r3, [r6]
   119f4:	subs	lr, r0, #1
   119f8:	sbc	ip, r1, #0
   119fc:	orrs	r1, r0, r1
   11a00:	str	lr, [r4, #64]	; 0x40
   11a04:	str	ip, [r4, #68]	; 0x44
   11a08:	bne	119c8 <__assert_fail@plt+0x8fc>
   11a0c:	mov	r5, #1
   11a10:	mov	r7, #0
   11a14:	b	11a44 <__assert_fail@plt+0x978>
   11a18:	ldr	r3, [sp, #40]	; 0x28
   11a1c:	sub	r0, r0, #1
   11a20:	ldrb	r2, [r9, #40]	; 0x28
   11a24:	ldrb	r1, [r3, r0]
   11a28:	cmp	r1, r2
   11a2c:	moveq	r1, #1
   11a30:	movne	r1, #0
   11a34:	strbeq	r7, [r3, r0]
   11a38:	ldr	r0, [sp, #40]	; 0x28
   11a3c:	bl	13530 <__assert_fail@plt+0x2464>
   11a40:	and	r5, r5, r0
   11a44:	ldrb	r2, [r9, #40]	; 0x28
   11a48:	mov	r1, sl
   11a4c:	add	r0, sp, #40	; 0x28
   11a50:	ldr	r3, [r6]
   11a54:	bl	11090 <getdelim@plt>
   11a58:	cmp	r0, #0
   11a5c:	bgt	11a18 <__assert_fail@plt+0x94c>
   11a60:	ldr	r3, [r6]
   11a64:	ldr	r3, [r3]
   11a68:	tst	r3, #32
   11a6c:	beq	11804 <__assert_fail@plt+0x738>
   11a70:	bl	10fd0 <__errno_location@plt>
   11a74:	ldr	r6, [r0]
   11a78:	mov	r2, #5
   11a7c:	movw	r1, #45776	; 0xb2d0
   11a80:	movt	r1, #1
   11a84:	mov	r0, #0
   11a88:	bl	10ec8 <dcgettext@plt>
   11a8c:	mov	r2, r0
   11a90:	mov	r0, #0
   11a94:	mov	r1, r6
   11a98:	bl	10f4c <error@plt>
   11a9c:	b	11804 <__assert_fail@plt+0x738>
   11aa0:	ldr	r3, [r4, #48]	; 0x30
   11aa4:	ldr	r5, [r4, #72]	; 0x48
   11aa8:	cmp	r3, #0
   11aac:	bne	11cfc <__assert_fail@plt+0xc30>
   11ab0:	ldr	r3, [r4, #28]
   11ab4:	cmp	r3, #0
   11ab8:	bne	11d08 <__assert_fail@plt+0xc3c>
   11abc:	cmp	r5, #0
   11ac0:	bne	115f0 <__assert_fail@plt+0x524>
   11ac4:	mov	r2, #5
   11ac8:	mov	r0, r5
   11acc:	movw	r1, #45244	; 0xb0bc
   11ad0:	movt	r1, #1
   11ad4:	bl	10ec8 <dcgettext@plt>
   11ad8:	mov	r2, r0
   11adc:	mov	r1, r5
   11ae0:	mov	r0, r5
   11ae4:	bl	10f4c <error@plt>
   11ae8:	b	115e4 <__assert_fail@plt+0x518>
   11aec:	ldrd	r2, [r4, #64]	; 0x40
   11af0:	orrs	r3, r2, r3
   11af4:	beq	117d4 <__assert_fail@plt+0x708>
   11af8:	mov	r2, #5
   11afc:	movw	r1, #45732	; 0xb2a4
   11b00:	movt	r1, #1
   11b04:	mov	r0, #0
   11b08:	bl	10ec8 <dcgettext@plt>
   11b0c:	mov	r1, #0
   11b10:	mov	r2, r0
   11b14:	mov	r0, r1
   11b18:	bl	10f4c <error@plt>
   11b1c:	b	117d4 <__assert_fail@plt+0x708>
   11b20:	ldrb	r3, [r4, #40]	; 0x28
   11b24:	cmp	r3, #0
   11b28:	beq	11c9c <__assert_fail@plt+0xbd0>
   11b2c:	ldr	r3, [r4, #28]
   11b30:	cmp	r3, #0
   11b34:	beq	11c9c <__assert_fail@plt+0xbd0>
   11b38:	ldr	r3, [sp, #28]
   11b3c:	eor	r3, r3, #1
   11b40:	cmp	fp, #0
   11b44:	orrle	r3, r3, #1
   11b48:	cmp	r3, #0
   11b4c:	bne	11c74 <__assert_fail@plt+0xba8>
   11b50:	str	fp, [r4, #52]	; 0x34
   11b54:	b	118d8 <__assert_fail@plt+0x80c>
   11b58:	mov	r0, r9
   11b5c:	bl	17ba8 <__assert_fail@plt+0x6adc>
   11b60:	str	r0, [r4, #60]	; 0x3c
   11b64:	b	1165c <__assert_fail@plt+0x590>
   11b68:	mov	r0, #1
   11b6c:	movt	r0, #1
   11b70:	bl	11060 <nl_langinfo@plt>
   11b74:	ldrb	r5, [r0]
   11b78:	cmp	r5, #0
   11b7c:	bne	11758 <__assert_fail@plt+0x68c>
   11b80:	mov	r2, #5
   11b84:	mov	r0, r5
   11b88:	movw	r1, #45692	; 0xb27c
   11b8c:	movt	r1, #1
   11b90:	bl	10ec8 <dcgettext@plt>
   11b94:	mov	r2, r0
   11b98:	mov	r1, r5
   11b9c:	mov	r0, r5
   11ba0:	bl	10f4c <error@plt>
   11ba4:	b	11758 <__assert_fail@plt+0x68c>
   11ba8:	mov	r2, #5
   11bac:	mov	r0, r5
   11bb0:	movw	r1, #45796	; 0xb2e4
   11bb4:	movt	r1, #1
   11bb8:	bl	10ec8 <dcgettext@plt>
   11bbc:	mov	r2, r0
   11bc0:	mov	r1, r5
   11bc4:	mov	r0, r5
   11bc8:	bl	10f4c <error@plt>
   11bcc:	b	11984 <__assert_fail@plt+0x8b8>
   11bd0:	mov	r1, sl
   11bd4:	ldr	sl, [sp, #32]
   11bd8:	mov	r3, #0
   11bdc:	add	fp, r2, #1
   11be0:	mov	r2, #10
   11be4:	add	r0, r5, fp
   11be8:	movw	r9, #49416	; 0xc108
   11bec:	movt	r9, #2
   11bf0:	str	r3, [sl]
   11bf4:	bl	10e44 <strtol@plt>
   11bf8:	ldr	r3, [sl]
   11bfc:	str	r0, [r9, #24]
   11c00:	sub	r3, r3, #34	; 0x22
   11c04:	clz	r3, r3
   11c08:	lsr	r3, r3, #5
   11c0c:	orrs	r3, r3, r0, lsr #31
   11c10:	bne	11c40 <__assert_fail@plt+0xb74>
   11c14:	bl	10fa0 <__ctype_b_loc@plt>
   11c18:	ldrb	r2, [r5, fp]
   11c1c:	ldr	r1, [r0]
   11c20:	lsl	r3, r2, #1
   11c24:	ldrh	r3, [r1, r3]
   11c28:	cmp	r2, #43	; 0x2b
   11c2c:	orreq	r3, r3, #1
   11c30:	tst	r3, #1
   11c34:	ldreq	r2, [sp, #44]	; 0x2c
   11c38:	subeq	r2, r2, r5
   11c3c:	beq	118f8 <__assert_fail@plt+0x82c>
   11c40:	movw	r1, #45412	; 0xb164
   11c44:	movt	r1, #1
   11c48:	mov	r2, #5
   11c4c:	mov	r0, #0
   11c50:	bl	10ec8 <dcgettext@plt>
   11c54:	mov	r4, r0
   11c58:	mov	r0, r5
   11c5c:	bl	171ac <__assert_fail@plt+0x60e0>
   11c60:	mov	r3, r0
   11c64:	mov	r2, r4
   11c68:	mov	r1, #0
   11c6c:	mov	r0, #1
   11c70:	bl	10f4c <error@plt>
   11c74:	mov	r2, #5
   11c78:	movw	r1, #45348	; 0xb124
   11c7c:	movt	r1, #1
   11c80:	mov	r9, r0
   11c84:	bl	10ec8 <dcgettext@plt>
   11c88:	mov	r2, r0
   11c8c:	mov	r1, r9
   11c90:	mov	r0, r9
   11c94:	bl	10f4c <error@plt>
   11c98:	ldr	r2, [sp, #44]	; 0x2c
   11c9c:	cmp	fp, #0
   11ca0:	blt	11ce0 <__assert_fail@plt+0xc14>
   11ca4:	ldr	r3, [sp, #28]
   11ca8:	cmp	r3, #0
   11cac:	bne	11b50 <__assert_fail@plt+0xa84>
   11cb0:	str	fp, [r4, #28]
   11cb4:	b	118d8 <__assert_fail@plt+0x80c>
   11cb8:	mov	r2, #5
   11cbc:	movw	r1, #45220	; 0xb0a4
   11cc0:	movt	r1, #1
   11cc4:	mov	r0, #0
   11cc8:	bl	10ec8 <dcgettext@plt>
   11ccc:	mov	r1, #0
   11cd0:	mov	r2, r0
   11cd4:	mov	r0, r1
   11cd8:	bl	10f4c <error@plt>
   11cdc:	b	115c8 <__assert_fail@plt+0x4fc>
   11ce0:	rsb	fp, fp, #0
   11ce4:	movw	r9, #49416	; 0xc108
   11ce8:	movt	r9, #2
   11cec:	mov	r3, #0
   11cf0:	str	fp, [r4, #28]
   11cf4:	str	r3, [r9, #32]
   11cf8:	b	118d8 <__assert_fail@plt+0x80c>
   11cfc:	cmp	r5, #0
   11d00:	bne	115f0 <__assert_fail@plt+0x524>
   11d04:	b	1174c <__assert_fail@plt+0x680>
   11d08:	cmp	r5, #0
   11d0c:	bne	115f0 <__assert_fail@plt+0x524>
   11d10:	b	11758 <__assert_fail@plt+0x68c>
   11d14:	cmp	r6, #0
   11d18:	beq	1165c <__assert_fail@plt+0x590>
   11d1c:	b	11640 <__assert_fail@plt+0x574>
   11d20:	movw	r1, #45276	; 0xb0dc
   11d24:	movt	r1, #1
   11d28:	b	11c48 <__assert_fail@plt+0xb7c>
   11d2c:	movw	r1, #45020	; 0xafdc
   11d30:	movt	r1, #1
   11d34:	mov	r2, #5
   11d38:	mov	r0, #0
   11d3c:	bl	10ec8 <dcgettext@plt>
   11d40:	mov	r4, r0
   11d44:	ldr	r0, [sl]
   11d48:	b	11c5c <__assert_fail@plt+0xb90>
   11d4c:	movw	r1, #45048	; 0xaff8
   11d50:	movt	r1, #1
   11d54:	mov	r2, #5
   11d58:	mov	r0, #0
   11d5c:	bl	10ec8 <dcgettext@plt>
   11d60:	mov	r2, r0
   11d64:	mov	r1, #0
   11d68:	mov	r0, #1
   11d6c:	bl	10f4c <error@plt>
   11d70:	movw	r1, #45504	; 0xb1c0
   11d74:	movt	r1, #1
   11d78:	b	11c48 <__assert_fail@plt+0xb7c>
   11d7c:	movw	r1, #45080	; 0xb018
   11d80:	movt	r1, #1
   11d84:	b	11d54 <__assert_fail@plt+0xc88>
   11d88:	ldrdeq	r9, [r1], -r8
   11d8c:	andeq	r9, r1, ip, asr r8
   11d90:	andeq	r9, r1, ip, lsr #17
   11d94:	andeq	ip, r2, r8, ror #3
   11d98:	andeq	ip, r2, r4, asr #3
   11d9c:	andeq	r9, r1, r8, lsl #17
   11da0:	mov	fp, #0
   11da4:	mov	lr, #0
   11da8:	pop	{r1}		; (ldr r1, [sp], #4)
   11dac:	mov	r2, sp
   11db0:	push	{r2}		; (str r2, [sp, #-4]!)
   11db4:	push	{r0}		; (str r0, [sp, #-4]!)
   11db8:	ldr	ip, [pc, #16]	; 11dd0 <__assert_fail@plt+0xd04>
   11dbc:	push	{ip}		; (str ip, [sp, #-4]!)
   11dc0:	ldr	r0, [pc, #12]	; 11dd4 <__assert_fail@plt+0xd08>
   11dc4:	ldr	r3, [pc, #12]	; 11dd8 <__assert_fail@plt+0xd0c>
   11dc8:	bl	10f64 <__libc_start_main@plt>
   11dcc:	bl	110a8 <abort@plt>
   11dd0:	andeq	r9, r1, r0, asr r6
   11dd4:	ldrdeq	r1, [r1], -r8
   11dd8:	strdeq	r9, [r1], -r0
   11ddc:	ldr	r3, [pc, #20]	; 11df8 <__assert_fail@plt+0xd2c>
   11de0:	ldr	r2, [pc, #20]	; 11dfc <__assert_fail@plt+0xd30>
   11de4:	add	r3, pc, r3
   11de8:	ldr	r2, [r3, r2]
   11dec:	cmp	r2, #0
   11df0:	bxeq	lr
   11df4:	b	10f7c <__gmon_start__@plt>
   11df8:	andeq	sl, r1, r4, lsl r2
   11dfc:	strdeq	r0, [r0], -r8
   11e00:	ldr	r0, [pc, #24]	; 11e20 <__assert_fail@plt+0xd54>
   11e04:	ldr	r3, [pc, #24]	; 11e24 <__assert_fail@plt+0xd58>
   11e08:	cmp	r3, r0
   11e0c:	bxeq	lr
   11e10:	ldr	r3, [pc, #16]	; 11e28 <__assert_fail@plt+0xd5c>
   11e14:	cmp	r3, #0
   11e18:	bxeq	lr
   11e1c:	bx	r3
   11e20:	andeq	ip, r2, r0, lsl #3
   11e24:	andeq	ip, r2, r0, lsl #3
   11e28:	andeq	r0, r0, r0
   11e2c:	ldr	r0, [pc, #36]	; 11e58 <__assert_fail@plt+0xd8c>
   11e30:	ldr	r1, [pc, #36]	; 11e5c <__assert_fail@plt+0xd90>
   11e34:	sub	r1, r1, r0
   11e38:	asr	r1, r1, #2
   11e3c:	add	r1, r1, r1, lsr #31
   11e40:	asrs	r1, r1, #1
   11e44:	bxeq	lr
   11e48:	ldr	r3, [pc, #16]	; 11e60 <__assert_fail@plt+0xd94>
   11e4c:	cmp	r3, #0
   11e50:	bxeq	lr
   11e54:	bx	r3
   11e58:	andeq	ip, r2, r0, lsl #3
   11e5c:	andeq	ip, r2, r0, lsl #3
   11e60:	andeq	r0, r0, r0
   11e64:	push	{r4, lr}
   11e68:	ldr	r4, [pc, #24]	; 11e88 <__assert_fail@plt+0xdbc>
   11e6c:	ldrb	r3, [r4]
   11e70:	cmp	r3, #0
   11e74:	popne	{r4, pc}
   11e78:	bl	11e00 <__assert_fail@plt+0xd34>
   11e7c:	mov	r3, #1
   11e80:	strb	r3, [r4]
   11e84:	pop	{r4, pc}
   11e88:	andeq	ip, r2, r4, lsr #3
   11e8c:	b	11e2c <__assert_fail@plt+0xd60>
   11e90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11e94:	mov	r5, r0
   11e98:	strd	r6, [sp, #8]
   11e9c:	mov	r6, #0
   11ea0:	str	r8, [sp, #16]
   11ea4:	str	lr, [sp, #20]
   11ea8:	sub	sp, sp, #24
   11eac:	bl	10fb8 <strlen@plt>
   11eb0:	subs	r4, r0, #0
   11eb4:	str	r6, [sp, #12]
   11eb8:	beq	11f3c <__assert_fail@plt+0xe70>
   11ebc:	sub	r7, r4, #1
   11ec0:	ldrb	r3, [r5, r7]
   11ec4:	sub	r3, r3, #48	; 0x30
   11ec8:	cmp	r3, #9
   11ecc:	bls	11f38 <__assert_fail@plt+0xe6c>
   11ed0:	add	r0, r4, #2
   11ed4:	bl	17758 <__assert_fail@plt+0x668c>
   11ed8:	add	r8, r0, r7
   11edc:	mov	r2, r4
   11ee0:	mov	r1, r5
   11ee4:	str	r8, [sp, #12]
   11ee8:	bl	10e8c <memcpy@plt>
   11eec:	ldrb	r1, [r0, r7]
   11ef0:	cmp	r4, #1
   11ef4:	mov	r3, r0
   11ef8:	sub	r2, r1, #105	; 0x69
   11efc:	clz	r2, r2
   11f00:	lsr	r2, r2, #5
   11f04:	moveq	r2, #0
   11f08:	cmp	r2, r6
   11f0c:	bne	11fa8 <__assert_fail@plt+0xedc>
   11f10:	add	r1, r8, #2
   11f14:	mov	r0, #66	; 0x42
   11f18:	mov	r2, #0
   11f1c:	mov	r4, r3
   11f20:	strb	r0, [r8, #1]
   11f24:	strb	r2, [r8, #2]
   11f28:	str	r1, [sp, #12]
   11f2c:	movw	r1, #39176	; 0x9908
   11f30:	movt	r1, #1
   11f34:	b	11f48 <__assert_fail@plt+0xe7c>
   11f38:	mov	r4, r6
   11f3c:	movw	r1, #39164	; 0x98fc
   11f40:	movt	r1, #1
   11f44:	mov	r3, r5
   11f48:	mov	r0, r3
   11f4c:	mov	r2, #10
   11f50:	str	r1, [sp]
   11f54:	add	r3, sp, #16
   11f58:	add	r1, sp, #12
   11f5c:	bl	18298 <__assert_fail@plt+0x71cc>
   11f60:	cmp	r0, #0
   11f64:	bne	11fcc <__assert_fail@plt+0xf00>
   11f68:	ldr	r3, [sp, #12]
   11f6c:	ldrb	r3, [r3]
   11f70:	cmp	r3, #0
   11f74:	bne	11fcc <__assert_fail@plt+0xf00>
   11f78:	ldrd	r2, [sp, #16]
   11f7c:	orrs	r3, r2, r3
   11f80:	beq	11fcc <__assert_fail@plt+0xf00>
   11f84:	mov	r0, r4
   11f88:	bl	14a24 <__assert_fail@plt+0x3958>
   11f8c:	ldrd	r0, [sp, #16]
   11f90:	add	sp, sp, #24
   11f94:	ldrd	r4, [sp]
   11f98:	ldrd	r6, [sp, #8]
   11f9c:	ldr	r8, [sp, #16]
   11fa0:	add	sp, sp, #20
   11fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   11fa8:	ldrb	r2, [r8, #-1]
   11fac:	sub	r2, r2, #48	; 0x30
   11fb0:	cmp	r2, #9
   11fb4:	bls	11f10 <__assert_fail@plt+0xe44>
   11fb8:	movw	r1, #39164	; 0x98fc
   11fbc:	movt	r1, #1
   11fc0:	strb	r6, [r8]
   11fc4:	mov	r4, r0
   11fc8:	b	11f48 <__assert_fail@plt+0xe7c>
   11fcc:	mov	r0, r4
   11fd0:	bl	14a24 <__assert_fail@plt+0x3958>
   11fd4:	mov	r2, #5
   11fd8:	movw	r1, #39188	; 0x9914
   11fdc:	movt	r1, #1
   11fe0:	mov	r0, #0
   11fe4:	bl	10ec8 <dcgettext@plt>
   11fe8:	mov	r4, r0
   11fec:	mov	r0, r5
   11ff0:	bl	171ac <__assert_fail@plt+0x60e0>
   11ff4:	mov	r3, r0
   11ff8:	mov	r2, r4
   11ffc:	mov	r1, #0
   12000:	mov	r0, #1
   12004:	bl	10f4c <error@plt>
   12008:	strd	r4, [sp, #-16]!
   1200c:	mov	r5, r1
   12010:	mov	r4, r2
   12014:	ldr	r1, [r0]
   12018:	str	r6, [sp, #8]
   1201c:	str	lr, [sp, #12]
   12020:	ldrb	r3, [r1]
   12024:	sub	r3, r3, #48	; 0x30
   12028:	cmp	r3, #9
   1202c:	bhi	120c0 <__assert_fail@plt+0xff4>
   12030:	vldr	d7, [pc, #192]	; 120f8 <__assert_fail@plt+0x102c>
   12034:	mov	ip, r0
   12038:	mov	r0, #0
   1203c:	mov	lr, r0
   12040:	vldr	d5, [pc, #184]	; 12100 <__assert_fail@plt+0x1034>
   12044:	vcmp.f64	d7, #0.0
   12048:	add	r1, r1, #1
   1204c:	vmrs	APSR_nzcv, fpscr
   12050:	movne	r2, #1
   12054:	moveq	r2, #0
   12058:	cmp	r3, #0
   1205c:	movne	r2, #1
   12060:	cmp	r2, #0
   12064:	addne	lr, lr, #1
   12068:	cmp	lr, #15
   1206c:	bls	1207c <__assert_fail@plt+0xfb0>
   12070:	cmp	lr, #27
   12074:	mov	r0, #1
   12078:	bhi	120ec <__assert_fail@plt+0x1020>
   1207c:	vmov	s13, r3
   12080:	str	r1, [ip]
   12084:	ldrb	r3, [r1]
   12088:	sub	r3, r3, #48	; 0x30
   1208c:	cmp	r3, #9
   12090:	vcvt.f64.s32	d6, s13
   12094:	vmla.f64	d6, d7, d5
   12098:	vmov.f64	d7, d6
   1209c:	bls	12044 <__assert_fail@plt+0xf78>
   120a0:	ldrb	r3, [r4]
   120a4:	cmp	r3, #0
   120a8:	vnegne.f64	d7, d7
   120ac:	vstr	d7, [r5]
   120b0:	ldrd	r4, [sp]
   120b4:	ldr	r6, [sp, #8]
   120b8:	add	sp, sp, #12
   120bc:	pop	{pc}		; (ldr pc, [sp], #4)
   120c0:	movw	r3, #49576	; 0xc1a8
   120c4:	movt	r3, #2
   120c8:	mov	r0, r1
   120cc:	ldr	r2, [r3]
   120d0:	ldr	r1, [r3, #4]
   120d4:	bl	1109c <strncmp@plt>
   120d8:	cmp	r0, #0
   120dc:	movne	r0, #3
   120e0:	bne	120b0 <__assert_fail@plt+0xfe4>
   120e4:	vldr	d7, [pc, #12]	; 120f8 <__assert_fail@plt+0x102c>
   120e8:	b	120a0 <__assert_fail@plt+0xfd4>
   120ec:	mov	r0, #2
   120f0:	b	120b0 <__assert_fail@plt+0xfe4>
   120f4:	nop	{0}
	...
   12104:	eormi	r0, r4, r0
   12108:	add	r3, r0, #1
   1210c:	str	r4, [sp, #-8]!
   12110:	movw	r4, #49576	; 0xc1a8
   12114:	movt	r4, #2
   12118:	mov	r1, r3
   1211c:	str	lr, [sp, #4]
   12120:	ldr	r0, [r4, #12]
   12124:	str	r3, [r4, #8]
   12128:	bl	177c4 <__assert_fail@plt+0x66f8>
   1212c:	str	r0, [r4, #12]
   12130:	ldr	r4, [sp]
   12134:	add	sp, sp, #4
   12138:	pop	{pc}		; (ldr pc, [sp], #4)
   1213c:	movw	r1, #49656	; 0xc1f8
   12140:	movt	r1, #2
   12144:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12148:	ldr	ip, [r1]
   1214c:	strd	r6, [sp, #8]
   12150:	mov	r6, r2
   12154:	mov	r7, r3
   12158:	strd	r8, [sp, #16]
   1215c:	mov	r8, r0
   12160:	strd	sl, [sp, #24]
   12164:	str	lr, [sp, #32]
   12168:	cmp	ip, #0
   1216c:	vpush	{d8-d11}
   12170:	sub	sp, sp, #252	; 0xfc
   12174:	beq	121f4 <__assert_fail@plt+0x1128>
   12178:	ldrd	r2, [ip]
   1217c:	mvn	r1, #0
   12180:	mvn	r0, #0
   12184:	cmp	r3, r1
   12188:	cmpeq	r2, r0
   1218c:	beq	121bc <__assert_fail@plt+0x10f0>
   12190:	cmp	r7, r3
   12194:	cmpeq	r6, r2
   12198:	bcc	121ac <__assert_fail@plt+0x10e0>
   1219c:	ldrd	r2, [ip, #8]
   121a0:	cmp	r7, r3
   121a4:	cmpeq	r6, r2
   121a8:	bls	12200 <__assert_fail@plt+0x1134>
   121ac:	ldrd	r2, [ip, #16]!
   121b0:	cmp	r3, r1
   121b4:	cmpeq	r2, r0
   121b8:	bne	12190 <__assert_fail@plt+0x10c4>
   121bc:	movw	r3, #49564	; 0xc19c
   121c0:	movt	r3, #2
   121c4:	mov	r0, r8
   121c8:	ldr	r1, [r3]
   121cc:	bl	10e20 <fputs_unlocked@plt>
   121d0:	mov	r0, #1
   121d4:	add	sp, sp, #252	; 0xfc
   121d8:	vpop	{d8-d11}
   121dc:	ldrd	r4, [sp]
   121e0:	ldrd	r6, [sp, #8]
   121e4:	ldrd	r8, [sp, #16]
   121e8:	ldrd	sl, [sp, #24]
   121ec:	add	sp, sp, #32
   121f0:	pop	{pc}		; (ldr pc, [sp], #4)
   121f4:	cmp	r3, #0
   121f8:	cmpeq	r2, #1
   121fc:	bne	121bc <__assert_fail@plt+0x10f0>
   12200:	movw	r4, #49576	; 0xc1a8
   12204:	movt	r4, #2
   12208:	ldr	r5, [r4, #16]
   1220c:	cmp	r5, #0
   12210:	beq	12258 <__assert_fail@plt+0x118c>
   12214:	mov	r0, r8
   12218:	bl	10fb8 <strlen@plt>
   1221c:	mov	r9, r0
   12220:	mov	r0, r5
   12224:	bl	10fb8 <strlen@plt>
   12228:	cmp	r9, r0
   1222c:	bls	12258 <__assert_fail@plt+0x118c>
   12230:	sub	r9, r9, r0
   12234:	mov	r0, r5
   12238:	add	r1, r8, r9
   1223c:	bl	10e38 <strcmp@plt>
   12240:	cmp	r0, #0
   12244:	ldrb	r3, [r4, #20]
   12248:	bne	128f8 <__assert_fail@plt+0x182c>
   1224c:	cmp	r3, #0
   12250:	strb	r0, [r8, r9]
   12254:	bne	12b64 <__assert_fail@plt+0x1a98>
   12258:	ldrb	r5, [r8]
   1225c:	cmp	r5, #0
   12260:	beq	12b94 <__assert_fail@plt+0x1ac8>
   12264:	bl	10fa0 <__ctype_b_loc@plt>
   12268:	mov	r9, r8
   1226c:	ldr	r2, [r0]
   12270:	b	12280 <__assert_fail@plt+0x11b4>
   12274:	ldrb	r5, [r9, #1]!
   12278:	cmp	r5, #0
   1227c:	beq	12290 <__assert_fail@plt+0x11c4>
   12280:	lsl	r5, r5, #1
   12284:	ldrh	r3, [r2, r5]
   12288:	tst	r3, #1
   1228c:	bne	12274 <__assert_fail@plt+0x11a8>
   12290:	ldr	r3, [r4, #24]
   12294:	cmp	r3, #0
   12298:	beq	12544 <__assert_fail@plt+0x1478>
   1229c:	cmp	r6, #1
   122a0:	cmple	r8, r9
   122a4:	moveq	r6, #0
   122a8:	movne	r6, #1
   122ac:	streq	r6, [r4, #28]
   122b0:	beq	122d0 <__assert_fail@plt+0x1204>
   122b4:	mov	r0, r8
   122b8:	bl	10fb8 <strlen@plt>
   122bc:	ldr	r2, [r4, #8]
   122c0:	str	r0, [r4, #28]
   122c4:	cmp	r0, r2
   122c8:	bcc	122d0 <__assert_fail@plt+0x1204>
   122cc:	bl	12108 <__assert_fail@plt+0x103c>
   122d0:	ldrb	r3, [r4, #20]
   122d4:	cmp	r3, #0
   122d8:	bne	12524 <__assert_fail@plt+0x1458>
   122dc:	ldr	sl, [r4, #32]
   122e0:	mov	r2, #0
   122e4:	mov	r3, #0
   122e8:	strd	r2, [sp, #56]	; 0x38
   122ec:	sub	r1, sl, #3
   122f0:	cmp	r1, #2
   122f4:	movcc	r1, #1024	; 0x400
   122f8:	movcs	r1, #1000	; 0x3e8
   122fc:	str	r1, [sp, #24]
   12300:	ldrb	r3, [r9]
   12304:	add	r2, sp, #46	; 0x2e
   12308:	add	r0, sp, #48	; 0x30
   1230c:	cmp	r3, #45	; 0x2d
   12310:	moveq	r1, #1
   12314:	movne	r1, #0
   12318:	addeq	r3, r9, #1
   1231c:	movne	r3, r9
   12320:	strb	r1, [sp, #46]	; 0x2e
   12324:	add	r1, sp, #56	; 0x38
   12328:	str	r3, [sp, #48]	; 0x30
   1232c:	bl	12008 <__assert_fail@plt+0xf3c>
   12330:	cmp	r0, #1
   12334:	mov	r6, r0
   12338:	bhi	1268c <__assert_fail@plt+0x15c0>
   1233c:	ldr	r5, [r4]
   12340:	ldr	r7, [sp, #48]	; 0x30
   12344:	ldr	r1, [r4, #4]
   12348:	mov	r2, r5
   1234c:	mov	r0, r7
   12350:	bl	1109c <strncmp@plt>
   12354:	cmp	r0, #0
   12358:	beq	125c4 <__assert_fail@plt+0x14f8>
   1235c:	mov	r7, #0
   12360:	ldrb	r3, [r4, #20]
   12364:	cmp	r3, #0
   12368:	bne	128cc <__assert_fail@plt+0x1800>
   1236c:	ldr	fp, [sp, #48]	; 0x30
   12370:	ldrb	r5, [fp]
   12374:	cmp	r5, #0
   12378:	beq	128b8 <__assert_fail@plt+0x17ec>
   1237c:	bl	10fa0 <__ctype_b_loc@plt>
   12380:	ldr	r1, [r0]
   12384:	b	12394 <__assert_fail@plt+0x12c8>
   12388:	add	fp, fp, #1
   1238c:	str	fp, [sp, #48]	; 0x30
   12390:	ldrb	r5, [fp]
   12394:	lsl	r2, r5, #1
   12398:	ldrh	r2, [r1, r2]
   1239c:	ands	r2, r2, #1
   123a0:	bne	12388 <__assert_fail@plt+0x12bc>
   123a4:	movw	r0, #39164	; 0x98fc
   123a8:	movt	r0, #1
   123ac:	str	r2, [sp, #36]	; 0x24
   123b0:	mov	r1, r5
   123b4:	bl	10fc4 <strchr@plt>
   123b8:	cmp	r0, #0
   123bc:	beq	130e4 <__assert_fail@plt+0x2018>
   123c0:	cmp	sl, #0
   123c4:	beq	130cc <__assert_fail@plt+0x2000>
   123c8:	ldr	r2, [sp, #36]	; 0x24
   123cc:	sub	r5, r5, #69	; 0x45
   123d0:	uxtb	r1, r5
   123d4:	cmp	r1, #21
   123d8:	movwls	r2, #38520	; 0x9678
   123dc:	movtls	r2, #1
   123e0:	movhi	r5, r2
   123e4:	ldrls	r5, [r2, r1, lsl #2]
   123e8:	add	r2, fp, #1
   123ec:	cmp	sl, #1
   123f0:	str	r2, [sp, #48]	; 0x30
   123f4:	beq	130b0 <__assert_fail@plt+0x1fe4>
   123f8:	cmp	sl, #4
   123fc:	beq	12a64 <__assert_fail@plt+0x1998>
   12400:	vldr	s15, [sp, #24]
   12404:	ldrb	r2, [r4, #20]
   12408:	vcvt.f64.s32	d7, s15
   1240c:	cmp	r5, #0
   12410:	mov	r7, r5
   12414:	beq	128c4 <__assert_fail@plt+0x17f8>
   12418:	subs	r7, r5, #1
   1241c:	vmov.f64	d8, d7
   12420:	beq	130dc <__assert_fail@plt+0x2010>
   12424:	subs	r7, r7, #1
   12428:	vmul.f64	d8, d8, d7
   1242c:	bne	12424 <__assert_fail@plt+0x1358>
   12430:	cmp	r2, #0
   12434:	bne	12924 <__assert_fail@plt+0x1858>
   12438:	vldr	d7, [sp, #56]	; 0x38
   1243c:	vmul.f64	d7, d7, d8
   12440:	vstr	d7, [sp, #56]	; 0x38
   12444:	ldr	r3, [sp, #48]	; 0x30
   12448:	cmp	r3, #0
   1244c:	beq	12668 <__assert_fail@plt+0x159c>
   12450:	ldrb	r3, [r3]
   12454:	cmp	r3, #0
   12458:	beq	12668 <__assert_fail@plt+0x159c>
   1245c:	ldr	r3, [r4, #36]	; 0x24
   12460:	movw	r5, #49416	; 0xc108
   12464:	movt	r5, #2
   12468:	cmp	r3, #3
   1246c:	moveq	r6, #5
   12470:	beq	124c8 <__assert_fail@plt+0x13fc>
   12474:	mov	r2, #5
   12478:	movw	r1, #39844	; 0x9ba4
   1247c:	movt	r1, #1
   12480:	mov	r0, #0
   12484:	ldr	sl, [r5]
   12488:	bl	10ec8 <dcgettext@plt>
   1248c:	mov	fp, r0
   12490:	mov	r1, r9
   12494:	mov	r0, #0
   12498:	mov	r6, #5
   1249c:	bl	1719c <__assert_fail@plt+0x60d0>
   124a0:	mov	r9, r0
   124a4:	mov	r0, #1
   124a8:	ldr	r1, [sp, #48]	; 0x30
   124ac:	bl	1719c <__assert_fail@plt+0x60d0>
   124b0:	mov	r3, r9
   124b4:	mov	r2, fp
   124b8:	str	r0, [sp]
   124bc:	mov	r1, #0
   124c0:	mov	r0, sl
   124c4:	bl	10f4c <error@plt>
   124c8:	ldrd	r0, [r5, #8]
   124cc:	ldrd	sl, [r5, #16]
   124d0:	vldr	d8, [sp, #56]	; 0x38
   124d4:	cmp	r1, #0
   124d8:	cmpeq	r0, #1
   124dc:	beq	126b0 <__assert_fail@plt+0x15e4>
   124e0:	bl	19510 <__assert_fail@plt+0x8444>
   124e4:	vmov	d7, r0, r1
   124e8:	mov	r0, sl
   124ec:	mov	r1, fp
   124f0:	vmul.f64	d9, d7, d8
   124f4:	bl	19510 <__assert_fail@plt+0x8444>
   124f8:	vmov	d7, r0, r1
   124fc:	vdiv.f64	d8, d9, d7
   12500:	cmp	r6, #1
   12504:	bls	126c0 <__assert_fail@plt+0x15f4>
   12508:	movw	r3, #49564	; 0xc19c
   1250c:	movt	r3, #2
   12510:	mov	r0, r8
   12514:	ldr	r1, [r3]
   12518:	bl	10e20 <fputs_unlocked@plt>
   1251c:	mov	r0, #0
   12520:	b	121d4 <__assert_fail@plt+0x1108>
   12524:	movw	r0, #49552	; 0xc190
   12528:	movt	r0, #2
   1252c:	ldr	r3, [r4, #28]
   12530:	movw	r2, #39544	; 0x9a78
   12534:	movt	r2, #1
   12538:	mov	r1, #1
   1253c:	ldr	r0, [r0]
   12540:	bl	1100c <__fprintf_chk@plt>
   12544:	ldr	sl, [r4, #32]
   12548:	mov	r0, #0
   1254c:	mov	r2, #0
   12550:	mov	r3, #0
   12554:	ldrb	r1, [r4, #20]
   12558:	str	r0, [sp, #48]	; 0x30
   1255c:	strd	r2, [sp, #56]	; 0x38
   12560:	sub	ip, sl, #3
   12564:	cmp	ip, #2
   12568:	movcc	ip, #1024	; 0x400
   1256c:	movcs	ip, #1000	; 0x3e8
   12570:	cmp	r1, r0
   12574:	str	ip, [sp, #24]
   12578:	beq	12300 <__assert_fail@plt+0x1234>
   1257c:	movw	r3, #49552	; 0xc190
   12580:	movt	r3, #2
   12584:	mov	r1, r9
   12588:	ldr	r5, [r3]
   1258c:	bl	1719c <__assert_fail@plt+0x60d0>
   12590:	mov	r6, r0
   12594:	mov	r0, #1
   12598:	ldr	r1, [r4, #4]
   1259c:	bl	1719c <__assert_fail@plt+0x60d0>
   125a0:	mov	r1, #15
   125a4:	mov	r3, r6
   125a8:	movw	r2, #39584	; 0x9aa0
   125ac:	movt	r2, #1
   125b0:	strd	r0, [sp]
   125b4:	mov	r0, r5
   125b8:	mov	r1, #1
   125bc:	bl	1100c <__fprintf_chk@plt>
   125c0:	b	12300 <__assert_fail@plt+0x1234>
   125c4:	vldr	d7, [pc, #956]	; 12988 <__assert_fail@plt+0x18bc>
   125c8:	add	r3, r7, r5
   125cc:	add	r1, sp, #120	; 0x78
   125d0:	str	r3, [sp, #48]	; 0x30
   125d4:	vstr	d7, [sp, #120]	; 0x78
   125d8:	ldrb	r2, [r7, r5]
   125dc:	cmp	r2, #45	; 0x2d
   125e0:	add	r2, sp, #47	; 0x2f
   125e4:	moveq	r0, #1
   125e8:	addeq	r3, r3, #1
   125ec:	strb	r0, [sp, #47]	; 0x2f
   125f0:	add	r0, sp, #52	; 0x34
   125f4:	str	r3, [sp, #52]	; 0x34
   125f8:	bl	12008 <__assert_fail@plt+0xf3c>
   125fc:	cmp	r0, #1
   12600:	bhi	12688 <__assert_fail@plt+0x15bc>
   12604:	ldrb	r3, [sp, #47]	; 0x2f
   12608:	moveq	r6, r0
   1260c:	cmp	r3, #0
   12610:	bne	12c3c <__assert_fail@plt+0x1b70>
   12614:	ldr	r7, [sp, #48]	; 0x30
   12618:	ldr	r2, [sp, #52]	; 0x34
   1261c:	vldr	d5, [sp, #120]	; 0x78
   12620:	subs	r7, r2, r7
   12624:	beq	12648 <__assert_fail@plt+0x157c>
   12628:	vldr	d7, [pc, #920]	; 129c8 <__assert_fail@plt+0x18fc>
   1262c:	subs	r3, r7, #1
   12630:	vmovne.f64	d6, d7
   12634:	beq	12644 <__assert_fail@plt+0x1578>
   12638:	subs	r3, r3, #1
   1263c:	vmul.f64	d7, d7, d6
   12640:	bne	12638 <__assert_fail@plt+0x156c>
   12644:	vdiv.f64	d5, d5, d7
   12648:	ldrb	r3, [sp, #46]	; 0x2e
   1264c:	str	r2, [sp, #48]	; 0x30
   12650:	vldr	d7, [sp, #56]	; 0x38
   12654:	cmp	r3, #0
   12658:	vsubne.f64	d5, d7, d5
   1265c:	vaddeq.f64	d5, d5, d7
   12660:	vstr	d5, [sp, #56]	; 0x38
   12664:	b	12360 <__assert_fail@plt+0x1294>
   12668:	cmp	r6, #1
   1266c:	bne	1267c <__assert_fail@plt+0x15b0>
   12670:	ldrb	r3, [r4, #40]	; 0x28
   12674:	cmp	r3, #0
   12678:	bne	12a24 <__assert_fail@plt+0x1958>
   1267c:	movw	r5, #49416	; 0xc108
   12680:	movt	r5, #2
   12684:	b	124c8 <__assert_fail@plt+0x13fc>
   12688:	mov	r6, r0
   1268c:	sub	r3, r6, #2
   12690:	cmp	r3, #4
   12694:	ldrls	pc, [pc, r3, lsl #2]
   12698:	b	13524 <__assert_fail@plt+0x2458>
   1269c:	andeq	r2, r1, r8, lsl #21
   126a0:	andeq	r2, r1, ip, lsr ip
   126a4:	andeq	r2, r1, r8, lsr #21
   126a8:	muleq	r1, r8, sl
   126ac:			; <UNDEFINED> instruction: 0x00012ab8
   126b0:	cmp	fp, #0
   126b4:	cmpeq	sl, #1
   126b8:	bne	124e0 <__assert_fail@plt+0x1414>
   126bc:	b	12500 <__assert_fail@plt+0x1434>
   126c0:	vldr	d7, [pc, #712]	; 12990 <__assert_fail@plt+0x18c4>
   126c4:	ldr	r3, [r5, #24]
   126c8:	vcmpe.f64	d8, d7
   126cc:	cmn	r3, #1
   126d0:	movne	r7, r3
   126d4:	vmrs	APSR_nzcv, fpscr
   126d8:	blt	1277c <__assert_fail@plt+0x16b0>
   126dc:	vldr	d7, [pc, #692]	; 12998 <__assert_fail@plt+0x18cc>
   126e0:	vcmpe.f64	d8, d7
   126e4:	vmrs	APSR_nzcv, fpscr
   126e8:	bhi	1277c <__assert_fail@plt+0x16b0>
   126ec:	vmov.f64	d7, d8
   126f0:	mov	r3, #0
   126f4:	vldr	d6, [pc, #716]	; 129c8 <__assert_fail@plt+0x18fc>
   126f8:	b	12704 <__assert_fail@plt+0x1638>
   126fc:	vdiv.f64	d7, d7, d6
   12700:	add	r3, r3, #1
   12704:	vcmpe.f64	d7, #0.0
   12708:	vmrs	APSR_nzcv, fpscr
   1270c:	vnegmi.f64	d5, d7
   12710:	vmovpl.f64	d5, d7
   12714:	vcmpe.f64	d5, d6
   12718:	vmrs	APSR_nzcv, fpscr
   1271c:	bge	126fc <__assert_fail@plt+0x1630>
   12720:	ldr	r2, [r4, #44]	; 0x2c
   12724:	subs	r6, r2, #0
   12728:	bne	12738 <__assert_fail@plt+0x166c>
   1272c:	add	r2, r3, r7
   12730:	cmp	r2, #15
   12734:	bhi	12bec <__assert_fail@plt+0x1b20>
   12738:	cmp	r3, #26
   1273c:	bls	12790 <__assert_fail@plt+0x16c4>
   12740:	ldr	r3, [r4, #36]	; 0x24
   12744:	cmp	r3, #3
   12748:	beq	12508 <__assert_fail@plt+0x143c>
   1274c:	ldr	r4, [r5]
   12750:	movw	r1, #40060	; 0x9c7c
   12754:	movt	r1, #1
   12758:	mov	r2, #5
   1275c:	mov	r0, #0
   12760:	bl	10ec8 <dcgettext@plt>
   12764:	mov	r2, r0
   12768:	mov	r1, #0
   1276c:	vstr	d8, [sp]
   12770:	mov	r0, r4
   12774:	bl	10f4c <error@plt>
   12778:	b	12508 <__assert_fail@plt+0x143c>
   1277c:	ldr	r3, [r4, #44]	; 0x2c
   12780:	subs	r6, r3, #0
   12784:	bne	12790 <__assert_fail@plt+0x16c4>
   12788:	cmp	r7, #15
   1278c:	bhi	12bec <__assert_fail@plt+0x1b20>
   12790:	mov	r3, #37	; 0x25
   12794:	ldr	sl, [r4, #48]	; 0x30
   12798:	strb	r3, [sp, #56]	; 0x38
   1279c:	ldr	r3, [r5, #28]
   127a0:	cmp	sl, #0
   127a4:	addne	r8, sp, #58	; 0x3a
   127a8:	addeq	r8, sp, #57	; 0x39
   127ac:	str	r3, [sp, #24]
   127b0:	movne	r3, #39	; 0x27
   127b4:	strbne	r3, [sp, #57]	; 0x39
   127b8:	ldr	r3, [r4, #52]	; 0x34
   127bc:	cmp	r3, #0
   127c0:	bne	12bc4 <__assert_fail@plt+0x1af8>
   127c4:	ldrb	r9, [r4, #20]
   127c8:	cmp	r9, #0
   127cc:	bne	12b9c <__assert_fail@plt+0x1ad0>
   127d0:	cmp	r6, #0
   127d4:	beq	12af0 <__assert_fail@plt+0x1a24>
   127d8:	vldr	d6, [pc, #432]	; 12990 <__assert_fail@plt+0x18c4>
   127dc:	sub	r3, r6, #3
   127e0:	cmp	r3, #2
   127e4:	vldr	d10, [pc, #436]	; 129a0 <__assert_fail@plt+0x18d4>
   127e8:	vldr	d7, [pc, #440]	; 129a8 <__assert_fail@plt+0x18dc>
   127ec:	vcmpe.f64	d8, d6
   127f0:	vmovcs.f64	d10, d7
   127f4:	vmrs	APSR_nzcv, fpscr
   127f8:	vmovlt.f64	d9, d8
   127fc:	movlt	r7, #0
   12800:	blt	1281c <__assert_fail@plt+0x1750>
   12804:	vldr	d7, [pc, #396]	; 12998 <__assert_fail@plt+0x18cc>
   12808:	vmov.f64	d9, d8
   1280c:	mov	r7, #0
   12810:	vcmpe.f64	d8, d7
   12814:	vmrs	APSR_nzcv, fpscr
   12818:	bls	12ad0 <__assert_fail@plt+0x1a04>
   1281c:	cmp	r9, #0
   12820:	bne	13214 <__assert_fail@plt+0x2148>
   12824:	ldr	fp, [r5, #24]
   12828:	cmn	fp, #1
   1282c:	beq	131a4 <__assert_fail@plt+0x20d8>
   12830:	add	sl, r7, r7, lsl #1
   12834:	cmp	sl, fp
   12838:	movcs	sl, fp
   1283c:	cmp	sl, #0
   12840:	beq	13124 <__assert_fail@plt+0x2058>
   12844:	subs	r3, sl, #1
   12848:	beq	131c4 <__assert_fail@plt+0x20f8>
   1284c:	vldr	d7, [pc, #372]	; 129c8 <__assert_fail@plt+0x18fc>
   12850:	mov	r2, r3
   12854:	vmov.f64	d6, d7
   12858:	subs	r2, r2, #1
   1285c:	vmul.f64	d7, d7, d6
   12860:	bne	12858 <__assert_fail@plt+0x178c>
   12864:	vmul.f64	d9, d9, d7
   12868:	vldr	d7, [pc, #328]	; 129b8 <__assert_fail@plt+0x18ec>
   1286c:	str	r3, [sp, #36]	; 0x24
   12870:	vldr	d11, [pc, #328]	; 129c0 <__assert_fail@plt+0x18f4>
   12874:	vmul.f64	d7, d9, d7
   12878:	vmov	r0, r1, d7
   1287c:	bl	19584 <__assert_fail@plt+0x84b8>
   12880:	bl	19524 <__assert_fail@plt+0x8458>
   12884:	vmov	d7, r0, r1
   12888:	ldr	r2, [sp, #24]
   1288c:	ldr	r3, [sp, #36]	; 0x24
   12890:	vmul.f64	d11, d7, d11
   12894:	vsub.f64	d9, d9, d11
   12898:	cmp	r2, #4
   1289c:	ldrls	pc, [pc, r2, lsl #2]
   128a0:	b	13514 <__assert_fail@plt+0x2448>
   128a4:	andeq	r2, r1, r4, asr ip
   128a8:	andeq	r2, r1, r8, asr #31
   128ac:	andeq	r3, r1, r8, lsl r0
   128b0:	muleq	r1, r0, r0
   128b4:	andeq	r3, r1, ip, lsr #32
   128b8:	cmp	sl, #4
   128bc:	beq	129d0 <__assert_fail@plt+0x1904>
   128c0:	ldrb	r2, [r4, #20]
   128c4:	vldr	d8, [pc, #228]	; 129b0 <__assert_fail@plt+0x18e4>
   128c8:	b	12430 <__assert_fail@plt+0x1364>
   128cc:	vldr	d7, [sp, #56]	; 0x38
   128d0:	movw	r3, #49552	; 0xc190
   128d4:	movt	r3, #2
   128d8:	movw	r2, #39680	; 0x9b00
   128dc:	movt	r2, #1
   128e0:	str	r7, [sp, #8]
   128e4:	mov	r1, #1
   128e8:	ldr	r0, [r3]
   128ec:	vstr	d7, [sp]
   128f0:	bl	1100c <__fprintf_chk@plt>
   128f4:	b	1236c <__assert_fail@plt+0x12a0>
   128f8:	cmp	r3, #0
   128fc:	beq	12258 <__assert_fail@plt+0x118c>
   12900:	movw	r3, #49552	; 0xc190
   12904:	movt	r3, #2
   12908:	movw	r0, #39520	; 0x9a60
   1290c:	movt	r0, #1
   12910:	ldr	r3, [r3]
   12914:	mov	r2, #22
   12918:	mov	r1, #1
   1291c:	bl	10ef8 <fwrite@plt>
   12920:	b	12258 <__assert_fail@plt+0x118c>
   12924:	movw	sl, #49552	; 0xc190
   12928:	movt	sl, #2
   1292c:	str	r5, [sp]
   12930:	movw	r2, #39784	; 0x9b68
   12934:	movt	r2, #1
   12938:	vstr	d8, [sp, #8]
   1293c:	mov	r1, #1
   12940:	ldr	r0, [sl]
   12944:	ldr	r3, [sp, #24]
   12948:	bl	1100c <__fprintf_chk@plt>
   1294c:	vldr	d7, [sp, #56]	; 0x38
   12950:	ldrb	r3, [r4, #20]
   12954:	vmul.f64	d8, d8, d7
   12958:	cmp	r3, #0
   1295c:	vstr	d8, [sp, #56]	; 0x38
   12960:	beq	12444 <__assert_fail@plt+0x1378>
   12964:	movw	r2, #39812	; 0x9b84
   12968:	movt	r2, #1
   1296c:	vstr	d8, [sp]
   12970:	mov	r1, #1
   12974:	vstr	d8, [sp, #8]
   12978:	ldr	r0, [sl]
   1297c:	bl	1100c <__fprintf_chk@plt>
   12980:	b	12444 <__assert_fail@plt+0x1378>
   12984:	nop	{0}
	...
   12990:			; <UNDEFINED> instruction: 0xffffffff
   12994:			; <UNDEFINED> instruction: 0xffefffff
   12998:			; <UNDEFINED> instruction: 0xffffffff
   1299c:	svcvc	0x00efffff
   129a0:	andeq	r0, r0, r0
   129a4:	addsmi	r0, r0, r0
   129a8:	andeq	r0, r0, r0
   129ac:	addmi	r4, pc, r0
   129b0:	andeq	r0, r0, r0
   129b4:	svccc	0x00f00000	; IMB
   129b8:	andeq	r0, r0, r0
   129bc:	stccc	0, cr0, [r0], {-0}
   129c0:	andeq	r0, r0, r0
   129c4:	mvnmi	r0, #0
   129c8:	andeq	r0, r0, r0
   129cc:	eormi	r0, r4, r0
   129d0:	movw	r1, #39212	; 0x992c
   129d4:	movt	r1, #1
   129d8:	mov	r6, #6
   129dc:	ldr	r3, [r4, #36]	; 0x24
   129e0:	movw	r5, #49416	; 0xc108
   129e4:	movt	r5, #2
   129e8:	cmp	r3, #3
   129ec:	beq	124c8 <__assert_fail@plt+0x13fc>
   129f0:	ldr	sl, [r5]
   129f4:	mov	r2, #5
   129f8:	mov	r0, #0
   129fc:	bl	10ec8 <dcgettext@plt>
   12a00:	mov	fp, r0
   12a04:	mov	r0, r9
   12a08:	bl	171ac <__assert_fail@plt+0x60e0>
   12a0c:	mov	r3, r0
   12a10:	mov	r2, fp
   12a14:	mov	r0, sl
   12a18:	mov	r1, #0
   12a1c:	bl	10f4c <error@plt>
   12a20:	b	124c8 <__assert_fail@plt+0x13fc>
   12a24:	mov	r2, #5
   12a28:	movw	r1, #39876	; 0x9bc4
   12a2c:	movt	r1, #1
   12a30:	mov	r0, #0
   12a34:	bl	10ec8 <dcgettext@plt>
   12a38:	mov	r5, r0
   12a3c:	mov	r0, r9
   12a40:	bl	171ac <__assert_fail@plt+0x60e0>
   12a44:	mov	r1, #0
   12a48:	mov	r3, r0
   12a4c:	mov	r2, r5
   12a50:	mov	r0, r1
   12a54:	movw	r5, #49416	; 0xc108
   12a58:	movt	r5, #2
   12a5c:	bl	10f4c <error@plt>
   12a60:	b	124c8 <__assert_fail@plt+0x13fc>
   12a64:	ldrb	r2, [fp, #1]
   12a68:	cmp	r2, #105	; 0x69
   12a6c:	bne	134c8 <__assert_fail@plt+0x23fc>
   12a70:	vldr	s15, [sp, #24]
   12a74:	add	r3, fp, #2
   12a78:	ldrb	r2, [r4, #20]
   12a7c:	str	r3, [sp, #48]	; 0x30
   12a80:	vcvt.f64.s32	d7, s15
   12a84:	b	1240c <__assert_fail@plt+0x1340>
   12a88:	movw	r1, #39364	; 0x99c4
   12a8c:	movt	r1, #1
   12a90:	mov	r7, #0
   12a94:	b	129dc <__assert_fail@plt+0x1910>
   12a98:	movw	r1, #39260	; 0x995c
   12a9c:	movt	r1, #1
   12aa0:	mov	r7, #0
   12aa4:	b	129dc <__assert_fail@plt+0x1910>
   12aa8:	movw	r1, #39308	; 0x998c
   12aac:	movt	r1, #1
   12ab0:	mov	r7, #0
   12ab4:	b	129dc <__assert_fail@plt+0x1910>
   12ab8:	movw	r1, #39212	; 0x992c
   12abc:	movt	r1, #1
   12ac0:	mov	r7, #0
   12ac4:	b	129dc <__assert_fail@plt+0x1910>
   12ac8:	vdiv.f64	d9, d9, d10
   12acc:	add	r7, r7, #1
   12ad0:	vcmpe.f64	d9, #0.0
   12ad4:	vmrs	APSR_nzcv, fpscr
   12ad8:	vnegmi.f64	d7, d9
   12adc:	vmovpl.f64	d7, d9
   12ae0:	vcmpe.f64	d7, d10
   12ae4:	vmrs	APSR_nzcv, fpscr
   12ae8:	bge	12ac8 <__assert_fail@plt+0x19fc>
   12aec:	b	1281c <__assert_fail@plt+0x1750>
   12af0:	cmp	r7, #0
   12af4:	beq	13320 <__assert_fail@plt+0x2254>
   12af8:	subs	r6, r7, #1
   12afc:	vldr	d9, [pc, #-316]	; 129c8 <__assert_fail@plt+0x18fc>
   12b00:	beq	13448 <__assert_fail@plt+0x237c>
   12b04:	vmov.f64	d6, d9
   12b08:	mov	r3, r6
   12b0c:	subs	r3, r3, #1
   12b10:	vmul.f64	d9, d9, d6
   12b14:	bne	12b0c <__assert_fail@plt+0x1a40>
   12b18:	vmul.f64	d9, d9, d8
   12b1c:	vldr	d7, [pc, #-364]	; 129b8 <__assert_fail@plt+0x18ec>
   12b20:	vldr	d10, [pc, #-360]	; 129c0 <__assert_fail@plt+0x18f4>
   12b24:	vmul.f64	d7, d9, d7
   12b28:	vmov	r0, r1, d7
   12b2c:	bl	19584 <__assert_fail@plt+0x84b8>
   12b30:	bl	19524 <__assert_fail@plt+0x8458>
   12b34:	vmov	d7, r0, r1
   12b38:	ldr	r3, [sp, #24]
   12b3c:	vmul.f64	d10, d7, d10
   12b40:	vsub.f64	d9, d9, d10
   12b44:	cmp	r3, #4
   12b48:	ldrls	pc, [pc, r3, lsl #2]
   12b4c:	b	1350c <__assert_fail@plt+0x2440>
   12b50:	andeq	r2, r1, r4, lsl #29
   12b54:	andeq	r2, r1, r8, ror pc
   12b58:	andeq	r2, r1, r8, ror lr
   12b5c:	andeq	r3, r1, ip, ror r0
   12b60:	andeq	r3, r1, r4, asr r0
   12b64:	movw	r3, #49552	; 0xc190
   12b68:	movt	r3, #2
   12b6c:	ldr	r9, [r3]
   12b70:	mov	r0, r5
   12b74:	bl	171ac <__assert_fail@plt+0x60e0>
   12b78:	mov	r3, r0
   12b7c:	movw	r2, #39500	; 0x9a4c
   12b80:	movt	r2, #1
   12b84:	mov	r1, #1
   12b88:	mov	r0, r9
   12b8c:	bl	1100c <__fprintf_chk@plt>
   12b90:	b	12258 <__assert_fail@plt+0x118c>
   12b94:	mov	r9, r8
   12b98:	b	12290 <__assert_fail@plt+0x11c4>
   12b9c:	movw	r3, #49552	; 0xc190
   12ba0:	movt	r3, #2
   12ba4:	movw	r0, #40136	; 0x9cc8
   12ba8:	movt	r0, #1
   12bac:	ldr	r3, [r3]
   12bb0:	mov	r2, #17
   12bb4:	mov	r1, #1
   12bb8:	bl	10ef8 <fwrite@plt>
   12bbc:	ldrb	r9, [r4, #20]
   12bc0:	b	127d0 <__assert_fail@plt+0x1704>
   12bc4:	movw	r0, #40128	; 0x9cc0
   12bc8:	movt	r0, #1
   12bcc:	mov	r2, #1
   12bd0:	mov	r1, #62	; 0x3e
   12bd4:	stm	sp, {r0, r3}
   12bd8:	mov	r0, r8
   12bdc:	mov	r3, #63	; 0x3f
   12be0:	bl	110b4 <__snprintf_chk@plt>
   12be4:	add	r8, r8, r0
   12be8:	b	127c4 <__assert_fail@plt+0x16f8>
   12bec:	ldr	r3, [r4, #36]	; 0x24
   12bf0:	cmp	r3, #3
   12bf4:	beq	12508 <__assert_fail@plt+0x143c>
   12bf8:	cmp	r7, #0
   12bfc:	ldr	r4, [r5]
   12c00:	beq	1339c <__assert_fail@plt+0x22d0>
   12c04:	mov	r2, #5
   12c08:	movw	r1, #39924	; 0x9bf4
   12c0c:	movt	r1, #1
   12c10:	mov	r0, #0
   12c14:	bl	10ec8 <dcgettext@plt>
   12c18:	mov	r3, #0
   12c1c:	mov	r2, r0
   12c20:	vstr	d8, [sp]
   12c24:	mov	r0, r4
   12c28:	mov	r1, r3
   12c2c:	str	r7, [sp, #8]
   12c30:	str	r3, [sp, #12]
   12c34:	bl	10f4c <error@plt>
   12c38:	b	12508 <__assert_fail@plt+0x143c>
   12c3c:	movw	r1, #39288	; 0x9978
   12c40:	movt	r1, #1
   12c44:	mov	r7, #0
   12c48:	mov	r6, #3
   12c4c:	b	129dc <__assert_fail@plt+0x1910>
   12c50:	mov	sl, #1
   12c54:	vmov	r0, r1, d9
   12c58:	bl	19584 <__assert_fail@plt+0x84b8>
   12c5c:	str	r1, [sp, #24]
   12c60:	str	r0, [sp, #36]	; 0x24
   12c64:	bl	19524 <__assert_fail@plt+0x8458>
   12c68:	vmov	d7, r0, r1
   12c6c:	vcmpe.f64	d7, d9
   12c70:	vmrs	APSR_nzcv, fpscr
   12c74:	bpl	12c90 <__assert_fail@plt+0x1bc4>
   12c78:	ldr	r2, [sp, #24]
   12c7c:	ldr	r3, [sp, #36]	; 0x24
   12c80:	adds	r0, r3, #1
   12c84:	adc	r1, r2, #0
   12c88:	bl	19524 <__assert_fail@plt+0x8458>
   12c8c:	vmov	d7, r0, r1
   12c90:	cmp	sl, #0
   12c94:	vadd.f64	d11, d7, d11
   12c98:	beq	12cbc <__assert_fail@plt+0x1bf0>
   12c9c:	subs	r3, sl, #1
   12ca0:	beq	1343c <__assert_fail@plt+0x2370>
   12ca4:	vldr	d7, [pc, #-740]	; 129c8 <__assert_fail@plt+0x18fc>
   12ca8:	vmov.f64	d6, d7
   12cac:	subs	r3, r3, #1
   12cb0:	vmul.f64	d7, d7, d6
   12cb4:	bne	12cac <__assert_fail@plt+0x1be0>
   12cb8:	vdiv.f64	d11, d11, d7
   12cbc:	vcmpe.f64	d11, #0.0
   12cc0:	vmrs	APSR_nzcv, fpscr
   12cc4:	bmi	130f4 <__assert_fail@plt+0x2028>
   12cc8:	vcmpe.f64	d11, d10
   12ccc:	vmrs	APSR_nzcv, fpscr
   12cd0:	blt	12cdc <__assert_fail@plt+0x1c10>
   12cd4:	vdiv.f64	d11, d11, d10
   12cd8:	add	r7, r7, #1
   12cdc:	vcmp.f64	d11, #0.0
   12ce0:	vmrs	APSR_nzcv, fpscr
   12ce4:	moveq	sl, #0
   12ce8:	bne	13388 <__assert_fail@plt+0x22bc>
   12cec:	cmp	r9, #0
   12cf0:	bne	13244 <__assert_fail@plt+0x2178>
   12cf4:	movw	r3, #40288	; 0x9d60
   12cf8:	movt	r3, #1
   12cfc:	ldrh	r1, [r3, #4]
   12d00:	cmn	fp, #1
   12d04:	moveq	fp, sl
   12d08:	cmp	r7, #8
   12d0c:	ldr	r2, [r3]
   12d10:	movwhi	ip, #39492	; 0x9a44
   12d14:	movthi	ip, #1
   12d18:	ldrb	r3, [r3, #6]
   12d1c:	str	r2, [r8]
   12d20:	strh	r1, [r8, #4]
   12d24:	strb	r3, [r8, #6]
   12d28:	bhi	12d3c <__assert_fail@plt+0x1c70>
   12d2c:	movw	r3, #38520	; 0x9678
   12d30:	movt	r3, #1
   12d34:	add	r3, r3, r7, lsl #2
   12d38:	ldr	ip, [r3, #88]	; 0x58
   12d3c:	add	r2, sp, #56	; 0x38
   12d40:	add	r9, sp, #120	; 0x78
   12d44:	mov	r3, #128	; 0x80
   12d48:	mov	r0, r9
   12d4c:	mov	r1, #127	; 0x7f
   12d50:	stm	sp, {r2, fp}
   12d54:	mov	r2, #1
   12d58:	vstr	d11, [sp, #8]
   12d5c:	str	ip, [sp, #16]
   12d60:	bl	110b4 <__snprintf_chk@plt>
   12d64:	cmp	r0, #126	; 0x7e
   12d68:	bhi	134a0 <__assert_fail@plt+0x23d4>
   12d6c:	sub	r6, r6, #4
   12d70:	cmp	r7, #0
   12d74:	clz	r6, r6
   12d78:	lsr	r6, r6, #5
   12d7c:	moveq	r6, #0
   12d80:	cmp	r6, #0
   12d84:	bne	133d8 <__assert_fail@plt+0x230c>
   12d88:	ldrb	r7, [r4, #20]
   12d8c:	cmp	r7, #0
   12d90:	bne	13274 <__assert_fail@plt+0x21a8>
   12d94:	ldr	r6, [r4, #16]
   12d98:	cmp	r6, #0
   12d9c:	beq	12df4 <__assert_fail@plt+0x1d28>
   12da0:	mov	r0, r9
   12da4:	bl	10fb8 <strlen@plt>
   12da8:	rsb	r2, r0, #127	; 0x7f
   12dac:	mov	r1, r6
   12db0:	mov	r3, #128	; 0x80
   12db4:	mov	r0, r9
   12db8:	bl	10e2c <__strncat_chk@plt>
   12dbc:	cmp	r7, #0
   12dc0:	beq	12df4 <__assert_fail@plt+0x1d28>
   12dc4:	movw	r3, #49552	; 0xc190
   12dc8:	movt	r3, #2
   12dcc:	ldr	r6, [r3]
   12dd0:	mov	r0, r9
   12dd4:	bl	171ac <__assert_fail@plt+0x60e0>
   12dd8:	movw	r2, #40320	; 0x9d80
   12ddc:	movt	r2, #1
   12de0:	vstr	d8, [sp]
   12de4:	mov	r1, #1
   12de8:	str	r0, [sp, #8]
   12dec:	mov	r0, r6
   12df0:	bl	1100c <__fprintf_chk@plt>
   12df4:	mov	r0, r9
   12df8:	bl	10fb8 <strlen@plt>
   12dfc:	ldr	r2, [r4, #8]
   12e00:	ldr	r6, [r4, #28]
   12e04:	cmp	r6, #0
   12e08:	beq	12e14 <__assert_fail@plt+0x1d48>
   12e0c:	cmp	r6, r0
   12e10:	bhi	132e0 <__assert_fail@plt+0x2214>
   12e14:	add	r0, r0, #1
   12e18:	cmp	r0, r2
   12e1c:	bcc	12e24 <__assert_fail@plt+0x1d58>
   12e20:	bl	12108 <__assert_fail@plt+0x103c>
   12e24:	mov	r1, r9
   12e28:	movw	r5, #49564	; 0xc19c
   12e2c:	movt	r5, #2
   12e30:	ldr	r0, [r4, #12]
   12e34:	bl	10f1c <strcpy@plt>
   12e38:	ldr	r1, [r5]
   12e3c:	ldr	r0, [r4, #56]	; 0x38
   12e40:	cmp	r0, #0
   12e44:	beq	12e50 <__assert_fail@plt+0x1d84>
   12e48:	bl	10e20 <fputs_unlocked@plt>
   12e4c:	ldr	r1, [r5]
   12e50:	ldr	r0, [r4, #12]
   12e54:	bl	10e20 <fputs_unlocked@plt>
   12e58:	ldr	r0, [r4, #60]	; 0x3c
   12e5c:	cmp	r0, #0
   12e60:	moveq	r0, #1
   12e64:	beq	121d4 <__assert_fail@plt+0x1108>
   12e68:	ldr	r1, [r5]
   12e6c:	bl	10e20 <fputs_unlocked@plt>
   12e70:	mov	r0, #1
   12e74:	b	121d4 <__assert_fail@plt+0x1108>
   12e78:	vcmpe.f64	d9, #0.0
   12e7c:	vmrs	APSR_nzcv, fpscr
   12e80:	bmi	12f78 <__assert_fail@plt+0x1eac>
   12e84:	vmov	r0, r1, d9
   12e88:	bl	19584 <__assert_fail@plt+0x84b8>
   12e8c:	mov	r6, r0
   12e90:	mov	fp, r1
   12e94:	bl	19524 <__assert_fail@plt+0x8458>
   12e98:	vmov	d7, r0, r1
   12e9c:	vcmpe.f64	d7, d9
   12ea0:	vmrs	APSR_nzcv, fpscr
   12ea4:	bpl	12eb8 <__assert_fail@plt+0x1dec>
   12ea8:	adds	r0, r6, #1
   12eac:	adc	r1, fp, #0
   12eb0:	bl	19524 <__assert_fail@plt+0x8458>
   12eb4:	vmov	d7, r0, r1
   12eb8:	cmp	r7, #0
   12ebc:	vadd.f64	d10, d10, d7
   12ec0:	beq	12ee4 <__assert_fail@plt+0x1e18>
   12ec4:	subs	r6, r7, #1
   12ec8:	beq	13494 <__assert_fail@plt+0x23c8>
   12ecc:	vldr	d7, [pc, #980]	; 132a8 <__assert_fail@plt+0x21dc>
   12ed0:	vmov.f64	d6, d7
   12ed4:	subs	r6, r6, #1
   12ed8:	vmul.f64	d7, d7, d6
   12edc:	bne	12ed4 <__assert_fail@plt+0x1e08>
   12ee0:	vdiv.f64	d10, d10, d7
   12ee4:	cmp	r9, #0
   12ee8:	beq	12f20 <__assert_fail@plt+0x1e54>
   12eec:	movw	r3, #49552	; 0xc190
   12ef0:	movt	r3, #2
   12ef4:	vstr	d10, [sp]
   12ef8:	cmp	sl, #0
   12efc:	ldr	r0, [r3]
   12f00:	movw	r3, #39452	; 0x9a1c
   12f04:	movt	r3, #1
   12f08:	movw	r2, #39400	; 0x99e8
   12f0c:	movt	r2, #1
   12f10:	mov	r1, #1
   12f14:	moveq	r2, r3
   12f18:	mov	r3, r7
   12f1c:	bl	1100c <__fprintf_chk@plt>
   12f20:	movw	r2, #40156	; 0x9cdc
   12f24:	movt	r2, #1
   12f28:	vstr	d10, [sp, #8]
   12f2c:	ldrb	lr, [r2, #4]
   12f30:	add	r3, sp, #56	; 0x38
   12f34:	add	r9, sp, #120	; 0x78
   12f38:	mov	r0, r9
   12f3c:	ldr	ip, [r2]
   12f40:	mov	r2, #1
   12f44:	stm	sp, {r3, r7}
   12f48:	mov	r3, #128	; 0x80
   12f4c:	mov	r1, r3
   12f50:	str	ip, [r8]
   12f54:	strb	lr, [r8, #4]
   12f58:	bl	110b4 <__snprintf_chk@plt>
   12f5c:	cmp	r0, #127	; 0x7f
   12f60:	bhi	134dc <__assert_fail@plt+0x2410>
   12f64:	ldr	r6, [r4, #16]
   12f68:	ldrb	r7, [r4, #20]
   12f6c:	cmp	r6, #0
   12f70:	bne	12da0 <__assert_fail@plt+0x1cd4>
   12f74:	b	12dbc <__assert_fail@plt+0x1cf0>
   12f78:	vneg.f64	d9, d9
   12f7c:	vmov	r0, r1, d9
   12f80:	bl	19584 <__assert_fail@plt+0x84b8>
   12f84:	mov	r2, r0
   12f88:	mov	r3, r1
   12f8c:	strd	r2, [sp, #24]
   12f90:	bl	19524 <__assert_fail@plt+0x8458>
   12f94:	vmov	d7, r0, r1
   12f98:	ldrd	r2, [sp, #24]
   12f9c:	vcmpe.f64	d9, d7
   12fa0:	vmrs	APSR_nzcv, fpscr
   12fa4:	ble	12fb0 <__assert_fail@plt+0x1ee4>
   12fa8:	adds	r2, r2, #1
   12fac:	adc	r3, r3, #0
   12fb0:	rsbs	r0, r2, #0
   12fb4:	rsc	r1, r3, #0
   12fb8:	bl	19524 <__assert_fail@plt+0x8458>
   12fbc:	vmov	d7, r0, r1
   12fc0:	b	12eb8 <__assert_fail@plt+0x1dec>
   12fc4:	ldr	sl, [sp, #24]
   12fc8:	vneg.f64	d9, d9
   12fcc:	vmov	r0, r1, d9
   12fd0:	bl	19584 <__assert_fail@plt+0x84b8>
   12fd4:	mov	r2, r0
   12fd8:	mov	r3, r1
   12fdc:	strd	r2, [sp, #24]
   12fe0:	bl	19524 <__assert_fail@plt+0x8458>
   12fe4:	vmov	d7, r0, r1
   12fe8:	ldrd	r2, [sp, #24]
   12fec:	vcmpe.f64	d9, d7
   12ff0:	vmrs	APSR_nzcv, fpscr
   12ff4:	ble	13000 <__assert_fail@plt+0x1f34>
   12ff8:	adds	r2, r2, #1
   12ffc:	adc	r3, r3, #0
   13000:	rsbs	r0, r2, #0
   13004:	rsc	r1, r3, #0
   13008:	bl	19524 <__assert_fail@plt+0x8458>
   1300c:	vmov	d7, r0, r1
   13010:	b	12c90 <__assert_fail@plt+0x1bc4>
   13014:	mov	sl, #1
   13018:	vcmpe.f64	d9, #0.0
   1301c:	vmrs	APSR_nzcv, fpscr
   13020:	bpl	12c54 <__assert_fail@plt+0x1b88>
   13024:	b	12fc8 <__assert_fail@plt+0x1efc>
   13028:	mov	sl, #1
   1302c:	vcmpe.f64	d9, #0.0
   13030:	vldr	d7, [pc, #632]	; 132b0 <__assert_fail@plt+0x21e4>
   13034:	vmrs	APSR_nzcv, fpscr
   13038:	vsubmi.f64	d7, d9, d7
   1303c:	vaddpl.f64	d7, d9, d7
   13040:	vmov	r0, r1, d7
   13044:	bl	19584 <__assert_fail@plt+0x84b8>
   13048:	bl	19524 <__assert_fail@plt+0x8458>
   1304c:	vmov	d7, r0, r1
   13050:	b	12c90 <__assert_fail@plt+0x1bc4>
   13054:	vcmpe.f64	d9, #0.0
   13058:	vldr	d7, [pc, #592]	; 132b0 <__assert_fail@plt+0x21e4>
   1305c:	vmrs	APSR_nzcv, fpscr
   13060:	vsubmi.f64	d7, d9, d7
   13064:	vaddpl.f64	d7, d9, d7
   13068:	vmov	r0, r1, d7
   1306c:	bl	19584 <__assert_fail@plt+0x84b8>
   13070:	bl	19524 <__assert_fail@plt+0x8458>
   13074:	vmov	d7, r0, r1
   13078:	b	12eb8 <__assert_fail@plt+0x1dec>
   1307c:	vmov	r0, r1, d9
   13080:	bl	19584 <__assert_fail@plt+0x84b8>
   13084:	bl	19524 <__assert_fail@plt+0x8458>
   13088:	vmov	d7, r0, r1
   1308c:	b	12eb8 <__assert_fail@plt+0x1dec>
   13090:	vmov	r0, r1, d9
   13094:	str	r3, [sp, #24]
   13098:	bl	19584 <__assert_fail@plt+0x84b8>
   1309c:	bl	19524 <__assert_fail@plt+0x8458>
   130a0:	vmov	d7, r0, r1
   130a4:	ldr	r3, [sp, #24]
   130a8:	vadd.f64	d11, d7, d11
   130ac:	b	12ca4 <__assert_fail@plt+0x1bd8>
   130b0:	ldrb	r1, [fp, #1]
   130b4:	ldrb	r2, [r4, #20]
   130b8:	cmp	r1, #105	; 0x69
   130bc:	beq	13368 <__assert_fail@plt+0x229c>
   130c0:	vldr	s15, [sp, #24]
   130c4:	vcvt.f64.s32	d7, s15
   130c8:	b	1240c <__assert_fail@plt+0x1340>
   130cc:	movw	r1, #39308	; 0x998c
   130d0:	movt	r1, #1
   130d4:	mov	r6, #4
   130d8:	b	129dc <__assert_fail@plt+0x1910>
   130dc:	mov	r5, #1
   130e0:	b	12430 <__assert_fail@plt+0x1364>
   130e4:	movw	r1, #39260	; 0x995c
   130e8:	movt	r1, #1
   130ec:	mov	r6, #5
   130f0:	b	129dc <__assert_fail@plt+0x1910>
   130f4:	vneg.f64	d7, d11
   130f8:	vcmpe.f64	d7, d10
   130fc:	vmrs	APSR_nzcv, fpscr
   13100:	bge	12cd4 <__assert_fail@plt+0x1c08>
   13104:	vldr	d6, [pc, #412]	; 132a8 <__assert_fail@plt+0x21dc>
   13108:	vcmpe.f64	d7, d6
   1310c:	vmrs	APSR_nzcv, fpscr
   13110:	movmi	sl, #1
   13114:	movpl	sl, #0
   13118:	cmp	r7, #0
   1311c:	moveq	sl, #0
   13120:	b	12cec <__assert_fail@plt+0x1c20>
   13124:	vldr	d7, [pc, #404]	; 132c0 <__assert_fail@plt+0x21f4>
   13128:	vldr	d11, [pc, #408]	; 132c8 <__assert_fail@plt+0x21fc>
   1312c:	vmul.f64	d7, d9, d7
   13130:	vmov	r0, r1, d7
   13134:	bl	19584 <__assert_fail@plt+0x84b8>
   13138:	bl	19524 <__assert_fail@plt+0x8458>
   1313c:	vmov	d7, r0, r1
   13140:	ldr	r3, [sp, #24]
   13144:	vmul.f64	d11, d7, d11
   13148:	vsub.f64	d9, d9, d11
   1314c:	cmp	r3, #4
   13150:	ldrls	pc, [pc, r3, lsl #2]
   13154:	b	1351c <__assert_fail@plt+0x2450>
   13158:	andeq	r3, r1, r4, lsl #3
   1315c:	andeq	r3, r1, ip, ror r1
   13160:	andeq	r3, r1, r4, ror r1
   13164:	andeq	r3, r1, ip, lsl #3
   13168:	andeq	r3, r1, ip, ror #2
   1316c:	mov	sl, #0
   13170:	b	1302c <__assert_fail@plt+0x1f60>
   13174:	mov	sl, #0
   13178:	b	13018 <__assert_fail@plt+0x1f4c>
   1317c:	mov	sl, #0
   13180:	b	12fc8 <__assert_fail@plt+0x1efc>
   13184:	ldr	sl, [sp, #24]
   13188:	b	12c54 <__assert_fail@plt+0x1b88>
   1318c:	vmov	r0, r1, d9
   13190:	bl	19584 <__assert_fail@plt+0x84b8>
   13194:	bl	19524 <__assert_fail@plt+0x8458>
   13198:	vmov	d7, r0, r1
   1319c:	vadd.f64	d11, d7, d11
   131a0:	b	12cbc <__assert_fail@plt+0x1bf0>
   131a4:	vcmpe.f64	d9, #0.0
   131a8:	vldr	d6, [pc, #248]	; 132a8 <__assert_fail@plt+0x21dc>
   131ac:	vmrs	APSR_nzcv, fpscr
   131b0:	vnegmi.f64	d7, d9
   131b4:	vmovpl.f64	d7, d9
   131b8:	vcmpe.f64	d7, d6
   131bc:	vmrs	APSR_nzcv, fpscr
   131c0:	bpl	13124 <__assert_fail@plt+0x2058>
   131c4:	vldr	d6, [pc, #220]	; 132a8 <__assert_fail@plt+0x21dc>
   131c8:	vldr	d7, [pc, #240]	; 132c0 <__assert_fail@plt+0x21f4>
   131cc:	vldr	d11, [pc, #244]	; 132c8 <__assert_fail@plt+0x21fc>
   131d0:	vmul.f64	d9, d9, d6
   131d4:	vmul.f64	d7, d9, d7
   131d8:	vmov	r0, r1, d7
   131dc:	bl	19584 <__assert_fail@plt+0x84b8>
   131e0:	bl	19524 <__assert_fail@plt+0x8458>
   131e4:	vmov	d7, r0, r1
   131e8:	ldr	r3, [sp, #24]
   131ec:	vmul.f64	d11, d7, d11
   131f0:	vsub.f64	d9, d9, d11
   131f4:	cmp	r3, #4
   131f8:	ldrls	pc, [pc, r3, lsl #2]
   131fc:	b	1351c <__assert_fail@plt+0x2450>
   13200:	andeq	r2, r1, r0, asr ip
   13204:	andeq	r2, r1, r4, asr #31
   13208:	andeq	r3, r1, r4, lsl r0
   1320c:	andeq	r3, r1, r8, lsr #8
   13210:	andeq	r3, r1, r8, lsr #32
   13214:	movw	r3, #49552	; 0xc190
   13218:	movt	r3, #2
   1321c:	vstr	d9, [sp]
   13220:	movw	r2, #40208	; 0x9d10
   13224:	movt	r2, #1
   13228:	vstr	d10, [sp, #8]
   1322c:	mov	r1, #1
   13230:	str	r7, [sp, #16]
   13234:	ldr	r0, [r3]
   13238:	bl	1100c <__fprintf_chk@plt>
   1323c:	ldrb	r9, [r4, #20]
   13240:	b	12824 <__assert_fail@plt+0x1758>
   13244:	movw	r3, #49552	; 0xc190
   13248:	movt	r3, #2
   1324c:	vstr	d11, [sp]
   13250:	movw	r2, #40244	; 0x9d34
   13254:	movt	r2, #1
   13258:	vstr	d10, [sp, #8]
   1325c:	mov	r1, #1
   13260:	str	r7, [sp, #16]
   13264:	ldr	r0, [r3]
   13268:	bl	1100c <__fprintf_chk@plt>
   1326c:	ldr	fp, [r5, #24]
   13270:	b	12cf4 <__assert_fail@plt+0x1c28>
   13274:	movw	r3, #49552	; 0xc190
   13278:	movt	r3, #2
   1327c:	ldr	r6, [r3]
   13280:	mov	r0, r9
   13284:	bl	171ac <__assert_fail@plt+0x60e0>
   13288:	mov	r3, r0
   1328c:	movw	r2, #40296	; 0x9d68
   13290:	movt	r2, #1
   13294:	mov	r1, #1
   13298:	mov	r0, r6
   1329c:	bl	1100c <__fprintf_chk@plt>
   132a0:	b	12f64 <__assert_fail@plt+0x1e98>
   132a4:	nop	{0}
   132a8:	andeq	r0, r0, r0
   132ac:	eormi	r0, r4, r0
   132b0:	andeq	r0, r0, r0
   132b4:	svccc	0x00e00000
   132b8:	andeq	r0, r0, r0
   132bc:	addsmi	r0, r0, r0
   132c0:	andeq	r0, r0, r0
   132c4:	stccc	0, cr0, [r0], {-0}
   132c8:	andeq	r0, r0, r0
   132cc:	mvnmi	r0, #0
   132d0:	andeq	r0, r0, r0
   132d4:	eormi	r0, r4, r0
	...
   132e0:	ldr	ip, [r5, #32]
   132e4:	mov	r1, #2
   132e8:	add	r3, sp, #56	; 0x38
   132ec:	mov	r0, r9
   132f0:	str	r1, [sp, #4]
   132f4:	ldr	r1, [r4, #12]
   132f8:	str	ip, [sp]
   132fc:	str	r6, [sp, #56]	; 0x38
   13300:	bl	14a84 <__assert_fail@plt+0x39b8>
   13304:	ldrb	r3, [r4, #20]
   13308:	cmp	r3, #0
   1330c:	bne	133a8 <__assert_fail@plt+0x22dc>
   13310:	movw	r5, #49564	; 0xc19c
   13314:	movt	r5, #2
   13318:	ldr	r1, [r5]
   1331c:	b	12e3c <__assert_fail@plt+0x1d70>
   13320:	vldr	d7, [pc, #-104]	; 132c0 <__assert_fail@plt+0x21f4>
   13324:	vldr	d10, [pc, #-100]	; 132c8 <__assert_fail@plt+0x21fc>
   13328:	vmul.f64	d7, d8, d7
   1332c:	vmov	r0, r1, d7
   13330:	bl	19584 <__assert_fail@plt+0x84b8>
   13334:	bl	19524 <__assert_fail@plt+0x8458>
   13338:	vmov	d7, r0, r1
   1333c:	ldr	r3, [sp, #24]
   13340:	vmul.f64	d10, d7, d10
   13344:	vsub.f64	d9, d8, d10
   13348:	cmp	r3, #4
   1334c:	ldrls	pc, [pc, r3, lsl #2]
   13350:	b	13504 <__assert_fail@plt+0x2438>
   13354:	andeq	r2, r1, r4, lsl #29
   13358:	andeq	r2, r1, r8, ror pc
   1335c:	andeq	r2, r1, r8, ror lr
   13360:	andeq	r3, r1, ip, ror r0
   13364:	andeq	r3, r1, r4, asr r0
   13368:	add	r3, fp, #2
   1336c:	cmp	r2, #0
   13370:	str	r3, [sp, #48]	; 0x30
   13374:	bne	133f4 <__assert_fail@plt+0x2328>
   13378:	mov	r3, #1024	; 0x400
   1337c:	vldr	d7, [pc, #-204]	; 132b8 <__assert_fail@plt+0x21ec>
   13380:	str	r3, [sp, #24]
   13384:	b	1240c <__assert_fail@plt+0x1340>
   13388:	vcmpe.f64	d11, #0.0
   1338c:	vmrs	APSR_nzcv, fpscr
   13390:	vnegmi.f64	d7, d11
   13394:	vmovpl.f64	d7, d11
   13398:	b	13104 <__assert_fail@plt+0x2038>
   1339c:	movw	r1, #40000	; 0x9c40
   133a0:	movt	r1, #1
   133a4:	b	12758 <__assert_fail@plt+0x168c>
   133a8:	movw	r3, #49552	; 0xc190
   133ac:	movt	r3, #2
   133b0:	ldr	r0, [r4, #12]
   133b4:	ldr	r5, [r3]
   133b8:	bl	171ac <__assert_fail@plt+0x60e0>
   133bc:	mov	r3, r0
   133c0:	movw	r2, #40372	; 0x9db4
   133c4:	movt	r2, #1
   133c8:	mov	r1, #1
   133cc:	mov	r0, r5
   133d0:	bl	1100c <__fprintf_chk@plt>
   133d4:	b	13310 <__assert_fail@plt+0x2244>
   133d8:	rsb	r2, r0, #127	; 0x7f
   133dc:	movw	r1, #46240	; 0xb4a0
   133e0:	movt	r1, #1
   133e4:	mov	r3, #128	; 0x80
   133e8:	mov	r0, r9
   133ec:	bl	10e2c <__strncat_chk@plt>
   133f0:	b	12d88 <__assert_fail@plt+0x1cbc>
   133f4:	movw	r0, #49552	; 0xc190
   133f8:	movt	r0, #2
   133fc:	mov	r3, #1024	; 0x400
   13400:	mov	r1, sl
   13404:	ldr	r0, [r0]
   13408:	movw	r2, #39732	; 0x9b34
   1340c:	movt	r2, #1
   13410:	bl	1100c <__fprintf_chk@plt>
   13414:	mov	r3, #1024	; 0x400
   13418:	ldrb	r2, [r4, #20]
   1341c:	vldr	d7, [pc, #-364]	; 132b8 <__assert_fail@plt+0x21ec>
   13420:	str	r3, [sp, #24]
   13424:	b	1240c <__assert_fail@plt+0x1340>
   13428:	vmov	r0, r1, d9
   1342c:	bl	19584 <__assert_fail@plt+0x84b8>
   13430:	bl	19524 <__assert_fail@plt+0x8458>
   13434:	vmov	d7, r0, r1
   13438:	vadd.f64	d11, d7, d11
   1343c:	vldr	d7, [pc, #-372]	; 132d0 <__assert_fail@plt+0x2204>
   13440:	vdiv.f64	d11, d11, d7
   13444:	b	12cbc <__assert_fail@plt+0x1bf0>
   13448:	vmul.f64	d9, d8, d9
   1344c:	vldr	d7, [pc, #-404]	; 132c0 <__assert_fail@plt+0x21f4>
   13450:	vldr	d10, [pc, #-400]	; 132c8 <__assert_fail@plt+0x21fc>
   13454:	vmul.f64	d7, d9, d7
   13458:	vmov	r0, r1, d7
   1345c:	bl	19584 <__assert_fail@plt+0x84b8>
   13460:	bl	19524 <__assert_fail@plt+0x8458>
   13464:	vmov	d7, r0, r1
   13468:	ldr	r3, [sp, #24]
   1346c:	vmul.f64	d10, d7, d10
   13470:	vsub.f64	d9, d9, d10
   13474:	cmp	r3, #4
   13478:	ldrls	pc, [pc, r3, lsl #2]
   1347c:	b	13504 <__assert_fail@plt+0x2438>
   13480:	andeq	r2, r1, r4, lsl #29
   13484:	andeq	r2, r1, r8, ror pc
   13488:	andeq	r2, r1, r8, ror lr
   1348c:	andeq	r3, r1, ip, ror r0
   13490:	andeq	r3, r1, r4, asr r0
   13494:	vldr	d7, [pc, #-460]	; 132d0 <__assert_fail@plt+0x2204>
   13498:	vdiv.f64	d10, d10, d7
   1349c:	b	12ee4 <__assert_fail@plt+0x1e18>
   134a0:	mov	r2, #5
   134a4:	movw	r1, #40164	; 0x9ce4
   134a8:	movt	r1, #1
   134ac:	mov	r0, #0
   134b0:	bl	10ec8 <dcgettext@plt>
   134b4:	mov	r2, r0
   134b8:	mov	r1, #0
   134bc:	vstr	d11, [sp]
   134c0:	mov	r0, #1
   134c4:	bl	10f4c <error@plt>
   134c8:	movw	r1, #39212	; 0x992c
   134cc:	movt	r1, #1
   134d0:	mov	r7, #0
   134d4:	mov	r6, #6
   134d8:	b	129dc <__assert_fail@plt+0x1910>
   134dc:	mov	r2, #5
   134e0:	movw	r1, #40164	; 0x9ce4
   134e4:	movt	r1, #1
   134e8:	mov	r0, #0
   134ec:	bl	10ec8 <dcgettext@plt>
   134f0:	mov	r2, r0
   134f4:	mov	r1, #0
   134f8:	vstr	d10, [sp]
   134fc:	mov	r0, #1
   13500:	bl	10f4c <error@plt>
   13504:	vldr	d10, [pc, #-564]	; 132d8 <__assert_fail@plt+0x220c>
   13508:	b	12ee4 <__assert_fail@plt+0x1e18>
   1350c:	vldr	d10, [pc, #-572]	; 132d8 <__assert_fail@plt+0x220c>
   13510:	b	12ecc <__assert_fail@plt+0x1e00>
   13514:	vldr	d11, [pc, #-580]	; 132d8 <__assert_fail@plt+0x220c>
   13518:	b	12ca4 <__assert_fail@plt+0x1bd8>
   1351c:	vldr	d11, [pc, #-588]	; 132d8 <__assert_fail@plt+0x220c>
   13520:	b	12cc8 <__assert_fail@plt+0x1bfc>
   13524:	mov	r7, #0
   13528:	mov	r1, r7
   1352c:	b	129dc <__assert_fail@plt+0x1910>
   13530:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13534:	mov	r5, #0
   13538:	strd	r6, [sp, #8]
   1353c:	mov	r6, r0
   13540:	mov	r7, r5
   13544:	strd	r8, [sp, #16]
   13548:	movw	r9, #49416	; 0xc108
   1354c:	movt	r9, #2
   13550:	ldr	r2, [r9, #36]	; 0x24
   13554:	mov	r8, #1
   13558:	strd	sl, [sp, #24]
   1355c:	movw	sl, #49564	; 0xc19c
   13560:	movt	sl, #2
   13564:	mov	fp, r5
   13568:	str	lr, [sp, #32]
   1356c:	sub	sp, sp, #12
   13570:	str	r1, [sp, #4]
   13574:	adds	r5, r5, #1
   13578:	ldrb	r3, [r6]
   1357c:	adc	r7, r7, #0
   13580:	cmp	r2, #256	; 0x100
   13584:	beq	13624 <__assert_fail@plt+0x2558>
   13588:	cmp	r3, r2
   1358c:	beq	13704 <__assert_fail@plt+0x2638>
   13590:	cmp	r3, #0
   13594:	beq	135b4 <__assert_fail@plt+0x24e8>
   13598:	mov	r4, r6
   1359c:	b	135a8 <__assert_fail@plt+0x24dc>
   135a0:	cmp	r3, r2
   135a4:	beq	136a0 <__assert_fail@plt+0x25d4>
   135a8:	ldrb	r3, [r4, #1]!
   135ac:	cmp	r3, #0
   135b0:	bne	135a0 <__assert_fail@plt+0x24d4>
   135b4:	mov	r3, r7
   135b8:	mov	r2, r5
   135bc:	mov	r0, r6
   135c0:	bl	1213c <__assert_fail@plt+0x1070>
   135c4:	ldr	r3, [sp, #4]
   135c8:	cmp	r0, #0
   135cc:	moveq	r8, #0
   135d0:	cmp	r3, #0
   135d4:	beq	13604 <__assert_fail@plt+0x2538>
   135d8:	movw	r3, #49564	; 0xc19c
   135dc:	movt	r3, #2
   135e0:	ldrb	r1, [r9, #40]	; 0x28
   135e4:	ldr	r0, [r3]
   135e8:	ldr	r3, [r0, #20]
   135ec:	ldr	r2, [r0, #24]
   135f0:	cmp	r3, r2
   135f4:	addcc	r2, r3, #1
   135f8:	strcc	r2, [r0, #20]
   135fc:	strbcc	r1, [r3]
   13600:	bcs	13720 <__assert_fail@plt+0x2654>
   13604:	mov	r0, r8
   13608:	add	sp, sp, #12
   1360c:	ldrd	r4, [sp]
   13610:	ldrd	r6, [sp, #8]
   13614:	ldrd	r8, [sp, #16]
   13618:	ldrd	sl, [sp, #24]
   1361c:	add	sp, sp, #32
   13620:	pop	{pc}		; (ldr pc, [sp], #4)
   13624:	cmp	r3, #0
   13628:	str	r3, [sp]
   1362c:	beq	135b4 <__assert_fail@plt+0x24e8>
   13630:	bl	10fa0 <__ctype_b_loc@plt>
   13634:	mov	r4, r6
   13638:	ldr	r1, [r0]
   1363c:	ldr	r3, [sp]
   13640:	b	13650 <__assert_fail@plt+0x2584>
   13644:	ldrb	r3, [r4, #1]!
   13648:	cmp	r3, #0
   1364c:	beq	135b4 <__assert_fail@plt+0x24e8>
   13650:	lsl	r2, r3, #1
   13654:	ldrh	r2, [r1, r2]
   13658:	cmp	r3, #10
   1365c:	movne	r3, r2
   13660:	orreq	r3, r2, #1
   13664:	tst	r3, #1
   13668:	bne	13644 <__assert_fail@plt+0x2578>
   1366c:	ldrb	r3, [r4]
   13670:	cmp	r3, #0
   13674:	beq	135b4 <__assert_fail@plt+0x24e8>
   13678:	lsl	r2, r3, #1
   1367c:	ldrh	r2, [r1, r2]
   13680:	cmp	r3, #10
   13684:	movne	r3, r2
   13688:	orreq	r3, r2, #1
   1368c:	tst	r3, #1
   13690:	beq	136f4 <__assert_fail@plt+0x2628>
   13694:	ldrb	r3, [r4]
   13698:	cmp	r3, #0
   1369c:	beq	135b4 <__assert_fail@plt+0x24e8>
   136a0:	mov	r2, r5
   136a4:	mov	r3, r7
   136a8:	strb	fp, [r4]
   136ac:	mov	r0, r6
   136b0:	bl	1213c <__assert_fail@plt+0x1070>
   136b4:	ldr	r3, [sl]
   136b8:	cmp	r0, #0
   136bc:	moveq	r8, #0
   136c0:	ldr	r2, [r9, #36]	; 0x24
   136c4:	ldr	r0, [r3, #20]
   136c8:	ldr	ip, [r3, #24]
   136cc:	cmp	r2, #256	; 0x100
   136d0:	movne	r1, r2
   136d4:	moveq	r1, #32
   136d8:	cmp	r0, ip
   136dc:	addcc	ip, r0, #1
   136e0:	strcc	ip, [r3, #20]
   136e4:	strbcc	r1, [r0]
   136e8:	bcs	1370c <__assert_fail@plt+0x2640>
   136ec:	add	r6, r4, #1
   136f0:	b	13574 <__assert_fail@plt+0x24a8>
   136f4:	ldrb	r3, [r4, #1]!
   136f8:	cmp	r3, #0
   136fc:	bne	13678 <__assert_fail@plt+0x25ac>
   13700:	b	135b4 <__assert_fail@plt+0x24e8>
   13704:	mov	r4, r6
   13708:	b	13698 <__assert_fail@plt+0x25cc>
   1370c:	uxtb	r1, r1
   13710:	mov	r0, r3
   13714:	bl	11030 <__overflow@plt>
   13718:	ldr	r2, [r9, #36]	; 0x24
   1371c:	b	136ec <__assert_fail@plt+0x2620>
   13720:	bl	11030 <__overflow@plt>
   13724:	b	13604 <__assert_fail@plt+0x2538>
   13728:	subs	r4, r0, #0
   1372c:	str	r7, [sp, #-8]!
   13730:	str	lr, [sp, #4]
   13734:	sub	sp, sp, #88	; 0x58
   13738:	beq	13780 <__assert_fail@plt+0x26b4>
   1373c:	movw	r3, #49552	; 0xc190
   13740:	movt	r3, #2
   13744:	ldr	r5, [r3]
   13748:	mov	r2, #5
   1374c:	movw	r1, #40404	; 0x9dd4
   13750:	movt	r1, #1
   13754:	mov	r0, #0
   13758:	bl	10ec8 <dcgettext@plt>
   1375c:	movw	r3, #49676	; 0xc20c
   13760:	movt	r3, #2
   13764:	mov	r2, r0
   13768:	mov	r1, #1
   1376c:	ldr	r3, [r3]
   13770:	mov	r0, r5
   13774:	bl	1100c <__fprintf_chk@plt>
   13778:	mov	r0, r4
   1377c:	bl	10fac <exit@plt>
   13780:	mov	r2, #5
   13784:	movw	r1, #40444	; 0x9dfc
   13788:	movt	r1, #1
   1378c:	movw	r6, #49676	; 0xc20c
   13790:	movt	r6, #2
   13794:	movw	r5, #49564	; 0xc19c
   13798:	movt	r5, #2
   1379c:	bl	10ec8 <dcgettext@plt>
   137a0:	mov	r1, r0
   137a4:	mov	r0, #1
   137a8:	ldr	r2, [r6]
   137ac:	bl	10ff4 <__printf_chk@plt>
   137b0:	mov	r2, #5
   137b4:	movw	r1, #40480	; 0x9e20
   137b8:	movt	r1, #1
   137bc:	mov	r0, r4
   137c0:	bl	10ec8 <dcgettext@plt>
   137c4:	ldr	r1, [r5]
   137c8:	bl	10e20 <fputs_unlocked@plt>
   137cc:	mov	r2, #5
   137d0:	movw	r1, #40560	; 0x9e70
   137d4:	movt	r1, #1
   137d8:	mov	r0, r4
   137dc:	bl	10ec8 <dcgettext@plt>
   137e0:	ldr	r1, [r5]
   137e4:	bl	10e20 <fputs_unlocked@plt>
   137e8:	mov	r2, #5
   137ec:	movw	r1, #40636	; 0x9ebc
   137f0:	movt	r1, #1
   137f4:	mov	r0, r4
   137f8:	bl	10ec8 <dcgettext@plt>
   137fc:	ldr	r1, [r5]
   13800:	bl	10e20 <fputs_unlocked@plt>
   13804:	mov	r2, #5
   13808:	movw	r1, #40696	; 0x9ef8
   1380c:	movt	r1, #1
   13810:	mov	r0, r4
   13814:	bl	10ec8 <dcgettext@plt>
   13818:	ldr	r1, [r5]
   1381c:	bl	10e20 <fputs_unlocked@plt>
   13820:	mov	r2, #5
   13824:	movw	r1, #40768	; 0x9f40
   13828:	movt	r1, #1
   1382c:	mov	r0, r4
   13830:	bl	10ec8 <dcgettext@plt>
   13834:	ldr	r1, [r5]
   13838:	bl	10e20 <fputs_unlocked@plt>
   1383c:	mov	r2, #5
   13840:	movw	r1, #40892	; 0x9fbc
   13844:	movt	r1, #1
   13848:	mov	r0, r4
   1384c:	bl	10ec8 <dcgettext@plt>
   13850:	ldr	r1, [r5]
   13854:	bl	10e20 <fputs_unlocked@plt>
   13858:	mov	r2, #5
   1385c:	movw	r1, #41012	; 0xa034
   13860:	movt	r1, #1
   13864:	mov	r0, r4
   13868:	bl	10ec8 <dcgettext@plt>
   1386c:	ldr	r1, [r5]
   13870:	bl	10e20 <fputs_unlocked@plt>
   13874:	mov	r2, #5
   13878:	movw	r1, #41132	; 0xa0ac
   1387c:	movt	r1, #1
   13880:	mov	r0, r4
   13884:	bl	10ec8 <dcgettext@plt>
   13888:	ldr	r1, [r5]
   1388c:	bl	10e20 <fputs_unlocked@plt>
   13890:	mov	r2, #5
   13894:	movw	r1, #41212	; 0xa0fc
   13898:	movt	r1, #1
   1389c:	mov	r0, r4
   138a0:	bl	10ec8 <dcgettext@plt>
   138a4:	ldr	r1, [r5]
   138a8:	bl	10e20 <fputs_unlocked@plt>
   138ac:	mov	r2, #5
   138b0:	movw	r1, #41368	; 0xa198
   138b4:	movt	r1, #1
   138b8:	mov	r0, r4
   138bc:	bl	10ec8 <dcgettext@plt>
   138c0:	ldr	r1, [r5]
   138c4:	bl	10e20 <fputs_unlocked@plt>
   138c8:	mov	r2, #5
   138cc:	movw	r1, #41504	; 0xa220
   138d0:	movt	r1, #1
   138d4:	mov	r0, r4
   138d8:	bl	10ec8 <dcgettext@plt>
   138dc:	ldr	r1, [r5]
   138e0:	bl	10e20 <fputs_unlocked@plt>
   138e4:	mov	r2, #5
   138e8:	movw	r1, #41636	; 0xa2a4
   138ec:	movt	r1, #1
   138f0:	mov	r0, r4
   138f4:	bl	10ec8 <dcgettext@plt>
   138f8:	ldr	r1, [r5]
   138fc:	bl	10e20 <fputs_unlocked@plt>
   13900:	mov	r2, #5
   13904:	movw	r1, #41960	; 0xa3e8
   13908:	movt	r1, #1
   1390c:	mov	r0, r4
   13910:	bl	10ec8 <dcgettext@plt>
   13914:	ldr	r1, [r5]
   13918:	bl	10e20 <fputs_unlocked@plt>
   1391c:	mov	r2, #5
   13920:	movw	r1, #42116	; 0xa484
   13924:	movt	r1, #1
   13928:	mov	r0, r4
   1392c:	bl	10ec8 <dcgettext@plt>
   13930:	ldr	r1, [r5]
   13934:	bl	10e20 <fputs_unlocked@plt>
   13938:	mov	r2, #5
   1393c:	movw	r1, #42240	; 0xa500
   13940:	movt	r1, #1
   13944:	mov	r0, r4
   13948:	bl	10ec8 <dcgettext@plt>
   1394c:	ldr	r1, [r5]
   13950:	bl	10e20 <fputs_unlocked@plt>
   13954:	mov	r2, #5
   13958:	movw	r1, #42316	; 0xa54c
   1395c:	movt	r1, #1
   13960:	mov	r0, r4
   13964:	bl	10ec8 <dcgettext@plt>
   13968:	ldr	r1, [r5]
   1396c:	bl	10e20 <fputs_unlocked@plt>
   13970:	mov	r2, #5
   13974:	movw	r1, #42388	; 0xa594
   13978:	movt	r1, #1
   1397c:	mov	r0, r4
   13980:	bl	10ec8 <dcgettext@plt>
   13984:	ldr	r1, [r5]
   13988:	bl	10e20 <fputs_unlocked@plt>
   1398c:	mov	r2, #5
   13990:	movw	r1, #42452	; 0xa5d4
   13994:	movt	r1, #1
   13998:	mov	r0, r4
   1399c:	bl	10ec8 <dcgettext@plt>
   139a0:	ldr	r1, [r5]
   139a4:	bl	10e20 <fputs_unlocked@plt>
   139a8:	mov	r2, #5
   139ac:	movw	r1, #42500	; 0xa604
   139b0:	movt	r1, #1
   139b4:	mov	r0, r4
   139b8:	bl	10ec8 <dcgettext@plt>
   139bc:	ldr	r1, [r5]
   139c0:	bl	10e20 <fputs_unlocked@plt>
   139c4:	mov	r2, #5
   139c8:	movw	r1, #42556	; 0xa63c
   139cc:	movt	r1, #1
   139d0:	mov	r0, r4
   139d4:	bl	10ec8 <dcgettext@plt>
   139d8:	ldr	r1, [r5]
   139dc:	bl	10e20 <fputs_unlocked@plt>
   139e0:	mov	r2, #5
   139e4:	movw	r1, #42572	; 0xa64c
   139e8:	movt	r1, #1
   139ec:	mov	r0, r4
   139f0:	bl	10ec8 <dcgettext@plt>
   139f4:	ldr	r1, [r5]
   139f8:	bl	10e20 <fputs_unlocked@plt>
   139fc:	mov	r2, #5
   13a00:	movw	r1, #42644	; 0xa694
   13a04:	movt	r1, #1
   13a08:	mov	r0, r4
   13a0c:	bl	10ec8 <dcgettext@plt>
   13a10:	ldr	r1, [r5]
   13a14:	bl	10e20 <fputs_unlocked@plt>
   13a18:	mov	r2, #5
   13a1c:	movw	r1, #42812	; 0xa73c
   13a20:	movt	r1, #1
   13a24:	mov	r0, r4
   13a28:	bl	10ec8 <dcgettext@plt>
   13a2c:	ldr	r1, [r5]
   13a30:	bl	10e20 <fputs_unlocked@plt>
   13a34:	mov	r2, #5
   13a38:	movw	r1, #42940	; 0xa7bc
   13a3c:	movt	r1, #1
   13a40:	mov	r0, r4
   13a44:	bl	10ec8 <dcgettext@plt>
   13a48:	ldr	r1, [r5]
   13a4c:	bl	10e20 <fputs_unlocked@plt>
   13a50:	mov	r2, #5
   13a54:	movw	r1, #43068	; 0xa83c
   13a58:	movt	r1, #1
   13a5c:	mov	r0, r4
   13a60:	bl	10ec8 <dcgettext@plt>
   13a64:	ldr	r1, [r5]
   13a68:	bl	10e20 <fputs_unlocked@plt>
   13a6c:	mov	r2, #5
   13a70:	movw	r1, #43196	; 0xa8bc
   13a74:	movt	r1, #1
   13a78:	mov	r0, r4
   13a7c:	bl	10ec8 <dcgettext@plt>
   13a80:	ldr	r1, [r5]
   13a84:	bl	10e20 <fputs_unlocked@plt>
   13a88:	mov	r2, #5
   13a8c:	movw	r1, #43472	; 0xa9d0
   13a90:	movt	r1, #1
   13a94:	mov	r0, r4
   13a98:	bl	10ec8 <dcgettext@plt>
   13a9c:	ldr	r1, [r5]
   13aa0:	bl	10e20 <fputs_unlocked@plt>
   13aa4:	mov	r2, #5
   13aa8:	movw	r1, #43844	; 0xab44
   13aac:	movt	r1, #1
   13ab0:	mov	r0, r4
   13ab4:	bl	10ec8 <dcgettext@plt>
   13ab8:	mov	r1, r0
   13abc:	mov	r0, #1
   13ac0:	ldr	r2, [r6]
   13ac4:	bl	10ff4 <__printf_chk@plt>
   13ac8:	mov	r2, #5
   13acc:	movw	r1, #44256	; 0xace0
   13ad0:	movt	r1, #1
   13ad4:	mov	r0, r4
   13ad8:	bl	10ec8 <dcgettext@plt>
   13adc:	ldr	ip, [r6]
   13ae0:	mov	r1, r0
   13ae4:	mov	r0, #1
   13ae8:	mov	r3, ip
   13aec:	mov	r2, ip
   13af0:	str	ip, [sp]
   13af4:	str	ip, [sp, #4]
   13af8:	str	ip, [sp, #8]
   13afc:	str	ip, [sp, #12]
   13b00:	str	ip, [sp, #16]
   13b04:	str	ip, [sp, #20]
   13b08:	str	ip, [sp, #24]
   13b0c:	bl	10ff4 <__printf_chk@plt>
   13b10:	movw	r0, #38520	; 0x9678
   13b14:	movt	r0, #1
   13b18:	ldr	ip, [r0, #124]	; 0x7c
   13b1c:	ldrd	r2, [r0, #132]	; 0x84
   13b20:	ldr	r6, [r0, #128]	; 0x80
   13b24:	subs	r1, ip, #0
   13b28:	str	ip, [sp, #32]
   13b2c:	ldrd	r8, [r0, #140]	; 0x8c
   13b30:	strd	r2, [sp, #40]	; 0x28
   13b34:	ldrd	r2, [r0, #148]	; 0x94
   13b38:	str	r6, [sp, #36]	; 0x24
   13b3c:	ldrd	r6, [r0, #156]	; 0x9c
   13b40:	strd	r8, [sp, #48]	; 0x30
   13b44:	ldrd	r8, [r0, #164]	; 0xa4
   13b48:	strd	r2, [sp, #56]	; 0x38
   13b4c:	ldrd	r2, [r0, #172]	; 0xac
   13b50:	strd	r6, [sp, #64]	; 0x40
   13b54:	movwne	r7, #40396	; 0x9dcc
   13b58:	add	r6, sp, #32
   13b5c:	movtne	r7, #1
   13b60:	strd	r8, [sp, #72]	; 0x48
   13b64:	strd	r2, [sp, #80]	; 0x50
   13b68:	bne	13c60 <__assert_fail@plt+0x2b94>
   13b6c:	ldr	r6, [r6, #4]
   13b70:	movw	r1, #44704	; 0xaea0
   13b74:	movt	r1, #1
   13b78:	mov	r2, #5
   13b7c:	cmp	r6, #0
   13b80:	beq	13c74 <__assert_fail@plt+0x2ba8>
   13b84:	mov	r0, #0
   13b88:	bl	10ec8 <dcgettext@plt>
   13b8c:	mov	r1, r0
   13b90:	movw	r3, #44728	; 0xaeb8
   13b94:	movt	r3, #1
   13b98:	movw	r2, #44768	; 0xaee0
   13b9c:	movt	r2, #1
   13ba0:	mov	r0, #1
   13ba4:	bl	10ff4 <__printf_chk@plt>
   13ba8:	mov	r1, #0
   13bac:	mov	r0, #5
   13bb0:	bl	1103c <setlocale@plt>
   13bb4:	cmp	r0, #0
   13bb8:	movweq	r7, #40396	; 0x9dcc
   13bbc:	movteq	r7, #1
   13bc0:	beq	13be4 <__assert_fail@plt+0x2b18>
   13bc4:	movw	r1, #44784	; 0xaef0
   13bc8:	movt	r1, #1
   13bcc:	mov	r2, #3
   13bd0:	movw	r7, #40396	; 0x9dcc
   13bd4:	movt	r7, #1
   13bd8:	bl	1109c <strncmp@plt>
   13bdc:	cmp	r0, #0
   13be0:	bne	13d2c <__assert_fail@plt+0x2c60>
   13be4:	mov	r2, #5
   13be8:	movw	r1, #44860	; 0xaf3c
   13bec:	movt	r1, #1
   13bf0:	mov	r0, #0
   13bf4:	bl	10ec8 <dcgettext@plt>
   13bf8:	mov	r1, r0
   13bfc:	movw	r3, #40396	; 0x9dcc
   13c00:	movt	r3, #1
   13c04:	movw	r2, #44728	; 0xaeb8
   13c08:	movt	r2, #1
   13c0c:	mov	r0, #1
   13c10:	bl	10ff4 <__printf_chk@plt>
   13c14:	mov	r2, #5
   13c18:	movw	r1, #44888	; 0xaf58
   13c1c:	movt	r1, #1
   13c20:	mov	r0, #0
   13c24:	bl	10ec8 <dcgettext@plt>
   13c28:	movw	r2, #45880	; 0xb338
   13c2c:	movt	r2, #1
   13c30:	cmp	r6, r7
   13c34:	movw	r3, #43192	; 0xa8b8
   13c38:	movt	r3, #1
   13c3c:	mov	r1, r0
   13c40:	moveq	r3, r2
   13c44:	mov	r2, r6
   13c48:	mov	r0, #1
   13c4c:	bl	10ff4 <__printf_chk@plt>
   13c50:	b	13778 <__assert_fail@plt+0x26ac>
   13c54:	ldr	r1, [r6, #8]!
   13c58:	cmp	r1, #0
   13c5c:	beq	13b6c <__assert_fail@plt+0x2aa0>
   13c60:	mov	r0, r7
   13c64:	bl	10e38 <strcmp@plt>
   13c68:	cmp	r0, #0
   13c6c:	bne	13c54 <__assert_fail@plt+0x2b88>
   13c70:	b	13b6c <__assert_fail@plt+0x2aa0>
   13c74:	mov	r0, r6
   13c78:	bl	10ec8 <dcgettext@plt>
   13c7c:	mov	r1, r0
   13c80:	movw	r3, #44728	; 0xaeb8
   13c84:	movt	r3, #1
   13c88:	movw	r2, #44768	; 0xaee0
   13c8c:	movt	r2, #1
   13c90:	mov	r0, #1
   13c94:	bl	10ff4 <__printf_chk@plt>
   13c98:	mov	r1, r6
   13c9c:	mov	r0, #5
   13ca0:	bl	1103c <setlocale@plt>
   13ca4:	cmp	r0, #0
   13ca8:	beq	13cc4 <__assert_fail@plt+0x2bf8>
   13cac:	movw	r1, #44784	; 0xaef0
   13cb0:	movt	r1, #1
   13cb4:	mov	r2, #3
   13cb8:	bl	1109c <strncmp@plt>
   13cbc:	cmp	r0, #0
   13cc0:	bne	13d20 <__assert_fail@plt+0x2c54>
   13cc4:	mov	r2, #5
   13cc8:	movw	r1, #44860	; 0xaf3c
   13ccc:	movt	r1, #1
   13cd0:	mov	r0, #0
   13cd4:	bl	10ec8 <dcgettext@plt>
   13cd8:	mov	r1, r0
   13cdc:	movw	r3, #40396	; 0x9dcc
   13ce0:	movt	r3, #1
   13ce4:	movw	r2, #44728	; 0xaeb8
   13ce8:	movt	r2, #1
   13cec:	mov	r0, #1
   13cf0:	bl	10ff4 <__printf_chk@plt>
   13cf4:	movw	r1, #44888	; 0xaf58
   13cf8:	movt	r1, #1
   13cfc:	mov	r2, #5
   13d00:	mov	r0, #0
   13d04:	bl	10ec8 <dcgettext@plt>
   13d08:	movw	r6, #40396	; 0x9dcc
   13d0c:	movt	r6, #1
   13d10:	movw	r3, #45880	; 0xb338
   13d14:	movt	r3, #1
   13d18:	mov	r1, r0
   13d1c:	b	13c44 <__assert_fail@plt+0x2b78>
   13d20:	movw	r7, #40396	; 0x9dcc
   13d24:	movt	r7, #1
   13d28:	mov	r6, r7
   13d2c:	mov	r2, #5
   13d30:	movw	r1, #44788	; 0xaef4
   13d34:	movt	r1, #1
   13d38:	mov	r0, #0
   13d3c:	bl	10ec8 <dcgettext@plt>
   13d40:	ldr	r1, [r5]
   13d44:	bl	10e20 <fputs_unlocked@plt>
   13d48:	b	13be4 <__assert_fail@plt+0x2b18>
   13d4c:	andeq	r0, r0, r0
   13d50:	ldr	r2, [r0]
   13d54:	ldr	r3, [r1]
   13d58:	cmp	r2, r3
   13d5c:	blt	13d6c <__assert_fail@plt+0x2ca0>
   13d60:	movgt	r0, #1
   13d64:	movle	r0, #0
   13d68:	bx	lr
   13d6c:	mvn	r0, #0
   13d70:	bx	lr
   13d74:	str	r4, [sp, #-24]!	; 0xffffffe8
   13d78:	movw	r4, #49652	; 0xc1f4
   13d7c:	movt	r4, #2
   13d80:	strd	r6, [sp, #4]
   13d84:	mov	r6, r0
   13d88:	mov	r7, r1
   13d8c:	strd	r8, [sp, #12]
   13d90:	mov	r9, r3
   13d94:	mov	r8, r2
   13d98:	ldr	ip, [r4]
   13d9c:	str	lr, [sp, #20]
   13da0:	ldmib	r4, {r0, r3}
   13da4:	cmp	ip, r3
   13da8:	beq	13dd8 <__assert_fail@plt+0x2d0c>
   13dac:	lsl	r3, ip, #4
   13db0:	add	ip, ip, #1
   13db4:	add	r2, r0, r3
   13db8:	strd	r6, [r0, r3]
   13dbc:	str	ip, [r4]
   13dc0:	ldr	r4, [sp]
   13dc4:	ldrd	r6, [sp, #4]
   13dc8:	strd	r8, [r2, #8]
   13dcc:	ldrd	r8, [sp, #12]
   13dd0:	add	sp, sp, #20
   13dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   13dd8:	mov	r2, #16
   13ddc:	add	r1, r4, #8
   13de0:	bl	178e0 <__assert_fail@plt+0x6814>
   13de4:	str	r0, [r4, #4]
   13de8:	ldr	ip, [r4]
   13dec:	b	13dac <__assert_fail@plt+0x2ce0>
   13df0:	ands	r3, r1, #1
   13df4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13df8:	mov	r5, r0
   13dfc:	strd	r6, [sp, #8]
   13e00:	strd	r8, [sp, #16]
   13e04:	strd	sl, [sp, #24]
   13e08:	str	lr, [sp, #32]
   13e0c:	sub	sp, sp, #44	; 0x2c
   13e10:	str	r3, [sp, #24]
   13e14:	str	r1, [sp, #28]
   13e18:	beq	13e30 <__assert_fail@plt+0x2d64>
   13e1c:	movw	r1, #46412	; 0xb54c
   13e20:	movt	r1, #1
   13e24:	bl	10e38 <strcmp@plt>
   13e28:	cmp	r0, #0
   13e2c:	beq	141c8 <__assert_fail@plt+0x30fc>
   13e30:	mov	r8, #0
   13e34:	mov	r9, #0
   13e38:	mov	sl, #0
   13e3c:	mov	r1, #0
   13e40:	mov	r3, sl
   13e44:	mov	r2, r1
   13e48:	mov	r6, #1
   13e4c:	mov	r7, #0
   13e50:	mov	fp, r1
   13e54:	mov	r1, r5
   13e58:	ldrb	r4, [r5], #1
   13e5c:	cmp	r4, #45	; 0x2d
   13e60:	beq	13f14 <__assert_fail@plt+0x2e48>
   13e64:	cmp	r4, #44	; 0x2c
   13e68:	str	r1, [sp, #4]
   13e6c:	beq	13ea4 <__assert_fail@plt+0x2dd8>
   13e70:	str	r3, [sp, #8]
   13e74:	str	r2, [sp, #12]
   13e78:	bl	10fa0 <__ctype_b_loc@plt>
   13e7c:	ldr	ip, [r0]
   13e80:	lsl	r0, r4, #1
   13e84:	cmp	r4, #0
   13e88:	ldmib	sp, {r1, r3}
   13e8c:	ldr	r2, [sp, #12]
   13e90:	ldrh	r0, [ip, r0]
   13e94:	moveq	r0, #1
   13e98:	andne	r0, r0, #1
   13e9c:	cmp	r0, #0
   13ea0:	beq	14110 <__assert_fail@plt+0x3044>
   13ea4:	cmp	r3, #0
   13ea8:	beq	13f50 <__assert_fail@plt+0x2e84>
   13eac:	orr	sl, sl, r2
   13eb0:	tst	sl, #255	; 0xff
   13eb4:	bne	140c8 <__assert_fail@plt+0x2ffc>
   13eb8:	ldr	r3, [sp, #24]
   13ebc:	cmp	r3, #0
   13ec0:	beq	143c8 <__assert_fail@plt+0x32fc>
   13ec4:	mov	r6, #1
   13ec8:	mov	r7, #0
   13ecc:	mvn	r2, #0
   13ed0:	mvn	r3, #0
   13ed4:	mov	r0, r6
   13ed8:	mov	r1, r7
   13edc:	bl	13d74 <__assert_fail@plt+0x2ca8>
   13ee0:	ldrb	ip, [r5, #-1]
   13ee4:	cmp	ip, #0
   13ee8:	beq	13f78 <__assert_fail@plt+0x2eac>
   13eec:	mov	r1, r5
   13ef0:	ldrb	r4, [r5], #1
   13ef4:	mov	fp, #0
   13ef8:	mov	r8, #0
   13efc:	mov	r9, #0
   13f00:	mov	r3, fp
   13f04:	mov	r2, fp
   13f08:	mov	sl, fp
   13f0c:	cmp	r4, #45	; 0x2d
   13f10:	bne	13e64 <__assert_fail@plt+0x2d98>
   13f14:	cmp	r3, #0
   13f18:	bne	14330 <__assert_fail@plt+0x3264>
   13f1c:	orrs	r1, r8, r9
   13f20:	movne	fp, #0
   13f24:	andeq	fp, sl, #1
   13f28:	cmp	fp, #0
   13f2c:	bne	142c8 <__assert_fail@plt+0x31fc>
   13f30:	cmp	sl, #0
   13f34:	beq	140f4 <__assert_fail@plt+0x3028>
   13f38:	mov	r6, r8
   13f3c:	mov	r7, r9
   13f40:	mov	r3, sl
   13f44:	mov	r8, #0
   13f48:	mov	r9, #0
   13f4c:	b	13e54 <__assert_fail@plt+0x2d88>
   13f50:	orrs	r2, r8, r9
   13f54:	beq	142c8 <__assert_fail@plt+0x31fc>
   13f58:	mov	r2, r8
   13f5c:	mov	r3, r9
   13f60:	mov	r0, r8
   13f64:	mov	r1, r9
   13f68:	bl	13d74 <__assert_fail@plt+0x2ca8>
   13f6c:	ldrb	ip, [r5, #-1]
   13f70:	cmp	ip, #0
   13f74:	bne	13eec <__assert_fail@plt+0x2e20>
   13f78:	movw	r4, #49652	; 0xc1f4
   13f7c:	movt	r4, #2
   13f80:	ldr	r1, [r4]
   13f84:	cmp	r1, #0
   13f88:	beq	14404 <__assert_fail@plt+0x3338>
   13f8c:	movw	r3, #15696	; 0x3d50
   13f90:	movt	r3, #1
   13f94:	ldr	r0, [r4, #4]
   13f98:	mov	r2, #16
   13f9c:	mov	r8, ip
   13fa0:	bl	11078 <qsort@plt>
   13fa4:	ldr	fp, [r4]
   13fa8:	ldr	sl, [r4, #4]
   13fac:	mov	r1, sl
   13fb0:	cmp	r8, fp
   13fb4:	bcs	14064 <__assert_fail@plt+0x2f98>
   13fb8:	add	r8, r8, #1
   13fbc:	cmp	r8, fp
   13fc0:	bcs	13fb0 <__assert_fail@plt+0x2ee4>
   13fc4:	lsl	r5, r8, #4
   13fc8:	sub	r9, r5, #16
   13fcc:	ldrd	r6, [r1, r5]
   13fd0:	add	r0, r1, r5
   13fd4:	add	ip, r1, r9
   13fd8:	ldrd	r2, [ip, #8]
   13fdc:	cmp	r3, r7
   13fe0:	cmpeq	r2, r6
   13fe4:	bcc	13fb0 <__assert_fail@plt+0x2ee4>
   13fe8:	movw	lr, #65535	; 0xffff
   13fec:	movt	lr, #4095	; 0xfff
   13ff0:	sub	lr, lr, r8
   13ff4:	add	sl, r5, #16
   13ff8:	str	lr, [sp, #4]
   13ffc:	ldrd	r6, [r0, #8]
   14000:	add	r1, r1, sl
   14004:	cmp	r7, r3
   14008:	cmpeq	r6, r2
   1400c:	movcc	r7, r3
   14010:	ldr	r3, [sp, #4]
   14014:	movcc	r6, r2
   14018:	strd	r6, [ip, #8]
   1401c:	add	r2, fp, r3
   14020:	lsl	r2, r2, #4
   14024:	bl	10e68 <memmove@plt>
   14028:	ldr	fp, [r4]
   1402c:	ldr	r1, [r4, #4]
   14030:	sub	fp, fp, #1
   14034:	cmp	fp, r8
   14038:	str	fp, [r4]
   1403c:	bls	13fb0 <__assert_fail@plt+0x2ee4>
   14040:	add	ip, r1, r9
   14044:	ldrd	r6, [r1, r5]
   14048:	add	r0, r1, r5
   1404c:	ldrd	r2, [ip, #8]
   14050:	cmp	r7, r3
   14054:	cmpeq	r6, r2
   14058:	bls	13ffc <__assert_fail@plt+0x2f30>
   1405c:	cmp	r8, fp
   14060:	bcc	13fb8 <__assert_fail@plt+0x2eec>
   14064:	ldr	r3, [sp, #28]
   14068:	mov	sl, r1
   1406c:	tst	r3, #2
   14070:	bne	141dc <__assert_fail@plt+0x3110>
   14074:	add	fp, fp, #1
   14078:	mov	r0, sl
   1407c:	lsl	r1, fp, #4
   14080:	mvn	r6, #0
   14084:	mvn	r7, #0
   14088:	str	fp, [r4]
   1408c:	bl	177c4 <__assert_fail@plt+0x66f8>
   14090:	ldr	r3, [r4]
   14094:	str	r0, [r4, #4]
   14098:	sub	r3, r3, #-268435455	; 0xf0000001
   1409c:	lsl	r3, r3, #4
   140a0:	add	r2, r0, r3
   140a4:	strd	r6, [r2, #8]
   140a8:	strd	r6, [r0, r3]
   140ac:	add	sp, sp, #44	; 0x2c
   140b0:	ldrd	r4, [sp]
   140b4:	ldrd	r6, [sp, #8]
   140b8:	ldrd	r8, [sp, #16]
   140bc:	ldrd	sl, [sp, #24]
   140c0:	add	sp, sp, #32
   140c4:	pop	{pc}		; (ldr pc, [sp], #4)
   140c8:	cmp	r2, #0
   140cc:	beq	13ecc <__assert_fail@plt+0x2e00>
   140d0:	cmp	r7, r9
   140d4:	cmpeq	r6, r8
   140d8:	bhi	14304 <__assert_fail@plt+0x3238>
   140dc:	mov	r2, r8
   140e0:	mov	r3, r9
   140e4:	mov	r0, r6
   140e8:	mov	r1, r7
   140ec:	bl	13d74 <__assert_fail@plt+0x2ca8>
   140f0:	b	13ee0 <__assert_fail@plt+0x2e14>
   140f4:	mov	fp, sl
   140f8:	mov	r8, #0
   140fc:	mov	r9, #0
   14100:	mov	r3, #1
   14104:	mov	r6, #1
   14108:	mov	r7, #0
   1410c:	b	13e54 <__assert_fail@plt+0x2d88>
   14110:	sub	r4, r4, #48	; 0x30
   14114:	cmp	r4, #9
   14118:	bhi	14428 <__assert_fail@plt+0x335c>
   1411c:	cmp	fp, #0
   14120:	movw	ip, #49652	; 0xc1f4
   14124:	movt	ip, #2
   14128:	beq	141c0 <__assert_fail@plt+0x30f4>
   1412c:	ldr	r0, [ip, #12]
   14130:	cmp	r0, #0
   14134:	beq	141c0 <__assert_fail@plt+0x30f4>
   14138:	add	r1, pc, #864	; 0x360
   1413c:	ldrd	r0, [r1]
   14140:	cmp	r3, #0
   14144:	moveq	sl, #1
   14148:	movne	r2, r3
   1414c:	cmp	r9, r1
   14150:	cmpeq	r8, r0
   14154:	bhi	14354 <__assert_fail@plt+0x3288>
   14158:	lsl	r0, r9, #2
   1415c:	lsl	r1, r8, #2
   14160:	orr	r0, r0, r8, lsr #30
   14164:	adds	r1, r1, r8
   14168:	adc	r0, r0, r9
   1416c:	adds	r1, r1, r1
   14170:	str	r1, [sp, #16]
   14174:	adc	r1, r0, r0
   14178:	str	r1, [sp, #20]
   1417c:	ldrd	r0, [sp, #16]
   14180:	adds	r0, r0, r4
   14184:	adc	r1, r1, r4, asr #31
   14188:	cmp	r1, r9
   1418c:	and	lr, r0, r1
   14190:	cmpeq	r0, r8
   14194:	movcc	r4, #1
   14198:	movcs	r4, #0
   1419c:	cmn	lr, #1
   141a0:	movne	lr, #0
   141a4:	moveq	lr, #1
   141a8:	orrs	lr, r4, lr
   141ac:	bne	14354 <__assert_fail@plt+0x3288>
   141b0:	mov	r8, r0
   141b4:	mov	r9, r1
   141b8:	mov	fp, #1
   141bc:	b	13e54 <__assert_fail@plt+0x2d88>
   141c0:	str	r1, [ip, #12]
   141c4:	b	14138 <__assert_fail@plt+0x306c>
   141c8:	add	r5, r5, #1
   141cc:	mov	r8, #1
   141d0:	mov	r9, #0
   141d4:	mov	sl, #1
   141d8:	b	13e3c <__assert_fail@plt+0x2d70>
   141dc:	ldrd	r6, [r1]
   141e0:	mov	r3, #0
   141e4:	str	r3, [r4]
   141e8:	str	r3, [r4, #4]
   141ec:	str	r3, [r4, #8]
   141f0:	cmp	r7, #0
   141f4:	cmpeq	r6, #1
   141f8:	bhi	142b0 <__assert_fail@plt+0x31e4>
   141fc:	cmp	fp, #1
   14200:	bls	14260 <__assert_fail@plt+0x3194>
   14204:	add	r5, sl, fp, lsl #4
   14208:	mov	r8, sl
   1420c:	mov	r9, fp
   14210:	str	sl, [sp, #4]
   14214:	sub	r5, r5, #16
   14218:	ldr	r3, [r8, #8]
   1421c:	ldr	r2, [r8, #12]
   14220:	ldrd	sl, [r8, #16]
   14224:	adds	r6, r3, #1
   14228:	adc	r7, r2, #0
   1422c:	cmp	r7, fp
   14230:	cmpeq	r6, sl
   14234:	beq	1424c <__assert_fail@plt+0x3180>
   14238:	subs	r2, sl, #1
   1423c:	mov	r0, r6
   14240:	mov	r1, r7
   14244:	sbc	r3, fp, #0
   14248:	bl	13d74 <__assert_fail@plt+0x2ca8>
   1424c:	add	r8, r8, #16
   14250:	cmp	r5, r8
   14254:	bne	14218 <__assert_fail@plt+0x314c>
   14258:	ldr	sl, [sp, #4]
   1425c:	mov	fp, r9
   14260:	add	fp, sl, fp, lsl #4
   14264:	mvn	r3, #0
   14268:	mvn	r2, #0
   1426c:	ldrd	r6, [fp, #-8]
   14270:	cmp	r7, r3
   14274:	cmpeq	r6, r2
   14278:	bne	14290 <__assert_fail@plt+0x31c4>
   1427c:	mov	r0, sl
   14280:	bl	14a24 <__assert_fail@plt+0x3958>
   14284:	ldr	fp, [r4]
   14288:	ldr	sl, [r4, #4]
   1428c:	b	14074 <__assert_fail@plt+0x2fa8>
   14290:	adds	r0, r6, #1
   14294:	adc	r1, r7, #0
   14298:	bl	13d74 <__assert_fail@plt+0x2ca8>
   1429c:	mov	r0, sl
   142a0:	bl	14a24 <__assert_fail@plt+0x3958>
   142a4:	ldr	fp, [r4]
   142a8:	ldr	sl, [r4, #4]
   142ac:	b	14074 <__assert_fail@plt+0x2fa8>
   142b0:	subs	r2, r6, #1
   142b4:	mov	r0, #1
   142b8:	mov	r1, #0
   142bc:	sbc	r3, r7, #0
   142c0:	bl	13d74 <__assert_fail@plt+0x2ca8>
   142c4:	b	141fc <__assert_fail@plt+0x3130>
   142c8:	ldr	r2, [sp, #28]
   142cc:	mov	r0, r3
   142d0:	tst	r2, #4
   142d4:	mov	r2, #5
   142d8:	movwne	r1, #46304	; 0xb4e0
   142dc:	movweq	r1, #46352	; 0xb510
   142e0:	movtne	r1, #1
   142e4:	movteq	r1, #1
   142e8:	bl	10ec8 <dcgettext@plt>
   142ec:	mov	r1, #0
   142f0:	mov	r2, r0
   142f4:	mov	r0, r1
   142f8:	bl	10f4c <error@plt>
   142fc:	mov	r0, #1
   14300:	bl	13728 <__assert_fail@plt+0x265c>
   14304:	movw	r1, #46416	; 0xb550
   14308:	movt	r1, #1
   1430c:	mov	r2, #5
   14310:	mov	r0, #0
   14314:	bl	10ec8 <dcgettext@plt>
   14318:	mov	r1, #0
   1431c:	mov	r2, r0
   14320:	mov	r0, r1
   14324:	bl	10f4c <error@plt>
   14328:	mov	r0, #1
   1432c:	bl	13728 <__assert_fail@plt+0x265c>
   14330:	ldr	r3, [sp, #28]
   14334:	ands	r0, r3, #4
   14338:	beq	143d8 <__assert_fail@plt+0x330c>
   1433c:	movw	r1, #46252	; 0xb4ac
   14340:	movt	r1, #1
   14344:	mov	r2, #5
   14348:	mov	r0, #0
   1434c:	bl	10ec8 <dcgettext@plt>
   14350:	b	142ec <__assert_fail@plt+0x3220>
   14354:	ldr	r4, [ip, #12]
   14358:	movw	r1, #46444	; 0xb56c
   1435c:	movt	r1, #1
   14360:	mov	r0, r4
   14364:	bl	110c0 <strspn@plt>
   14368:	mov	r1, r0
   1436c:	mov	r0, r4
   14370:	bl	17b58 <__assert_fail@plt+0x6a8c>
   14374:	ldr	r3, [sp, #28]
   14378:	mov	r4, r0
   1437c:	ands	r0, r3, #4
   14380:	beq	143ec <__assert_fail@plt+0x3320>
   14384:	movw	r1, #46456	; 0xb578
   14388:	movt	r1, #1
   1438c:	mov	r2, #5
   14390:	mov	r0, #0
   14394:	bl	10ec8 <dcgettext@plt>
   14398:	mov	r5, r0
   1439c:	mov	r0, r4
   143a0:	bl	171ac <__assert_fail@plt+0x60e0>
   143a4:	mov	r1, #0
   143a8:	mov	r3, r0
   143ac:	mov	r2, r5
   143b0:	mov	r0, r1
   143b4:	bl	10f4c <error@plt>
   143b8:	mov	r0, r4
   143bc:	bl	14a24 <__assert_fail@plt+0x3958>
   143c0:	mov	r0, #1
   143c4:	bl	13728 <__assert_fail@plt+0x265c>
   143c8:	movw	r1, #46380	; 0xb52c
   143cc:	movt	r1, #1
   143d0:	mov	r2, #5
   143d4:	b	14310 <__assert_fail@plt+0x3244>
   143d8:	movw	r1, #46284	; 0xb4cc
   143dc:	movt	r1, #1
   143e0:	mov	r2, #5
   143e4:	bl	10ec8 <dcgettext@plt>
   143e8:	b	142ec <__assert_fail@plt+0x3220>
   143ec:	movw	r1, #46496	; 0xb5a0
   143f0:	movt	r1, #1
   143f4:	mov	r2, #5
   143f8:	bl	10ec8 <dcgettext@plt>
   143fc:	mov	r5, r0
   14400:	b	1439c <__assert_fail@plt+0x32d0>
   14404:	ldr	r3, [sp, #28]
   14408:	ands	r0, r3, #4
   1440c:	beq	14470 <__assert_fail@plt+0x33a4>
   14410:	mov	r0, r1
   14414:	mov	r2, #5
   14418:	movw	r1, #46588	; 0xb5fc
   1441c:	movt	r1, #1
   14420:	bl	10ec8 <dcgettext@plt>
   14424:	b	142ec <__assert_fail@plt+0x3220>
   14428:	ldr	r3, [sp, #28]
   1442c:	mov	fp, r1
   14430:	ands	r3, r3, #4
   14434:	beq	14484 <__assert_fail@plt+0x33b8>
   14438:	movw	r1, #46528	; 0xb5c0
   1443c:	movt	r1, #1
   14440:	mov	r2, #5
   14444:	bl	10ec8 <dcgettext@plt>
   14448:	mov	r4, r0
   1444c:	mov	r0, fp
   14450:	bl	171ac <__assert_fail@plt+0x60e0>
   14454:	mov	r1, #0
   14458:	mov	r3, r0
   1445c:	mov	r2, r4
   14460:	mov	r0, r1
   14464:	bl	10f4c <error@plt>
   14468:	mov	r0, #1
   1446c:	bl	13728 <__assert_fail@plt+0x265c>
   14470:	movw	r1, #46632	; 0xb628
   14474:	movt	r1, #1
   14478:	mov	r2, #5
   1447c:	bl	10ec8 <dcgettext@plt>
   14480:	b	142ec <__assert_fail@plt+0x3220>
   14484:	mov	r0, r3
   14488:	movw	r1, #46564	; 0xb5e4
   1448c:	movt	r1, #1
   14490:	mov	r2, #5
   14494:	bl	10ec8 <dcgettext@plt>
   14498:	mov	r4, r0
   1449c:	b	1444c <__assert_fail@plt+0x3380>
   144a0:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   144a4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   144a8:	mov	r0, #1
   144ac:	b	13728 <__assert_fail@plt+0x265c>
   144b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   144b4:	mov	r5, r1
   144b8:	mov	r4, r2
   144bc:	strd	r6, [sp, #8]
   144c0:	mov	r7, r3
   144c4:	strd	r8, [sp, #16]
   144c8:	strd	sl, [sp, #24]
   144cc:	mov	sl, r0
   144d0:	str	lr, [sp, #32]
   144d4:	sub	sp, sp, #12
   144d8:	str	r2, [sp]
   144dc:	bl	10fb8 <strlen@plt>
   144e0:	ldr	fp, [r5]
   144e4:	cmp	fp, #0
   144e8:	beq	145b8 <__assert_fail@plt+0x34ec>
   144ec:	mov	r6, #0
   144f0:	mov	r8, r0
   144f4:	mvn	r9, #0
   144f8:	str	r6, [sp, #4]
   144fc:	b	14528 <__assert_fail@plt+0x345c>
   14500:	bl	10eb0 <memcmp@plt>
   14504:	ldr	r3, [sp, #4]
   14508:	cmp	r0, #0
   1450c:	movne	r3, #1
   14510:	str	r3, [sp, #4]
   14514:	ldr	fp, [r5, #4]!
   14518:	add	r6, r6, #1
   1451c:	add	r4, r4, r7
   14520:	cmp	fp, #0
   14524:	beq	14584 <__assert_fail@plt+0x34b8>
   14528:	mov	r2, r8
   1452c:	mov	r1, sl
   14530:	mov	r0, fp
   14534:	bl	1109c <strncmp@plt>
   14538:	cmp	r0, #0
   1453c:	mov	r0, fp
   14540:	bne	14514 <__assert_fail@plt+0x3448>
   14544:	bl	10fb8 <strlen@plt>
   14548:	ldr	r3, [sp]
   1454c:	cmp	r0, r8
   14550:	mov	r2, r7
   14554:	mov	r1, r4
   14558:	mla	r0, r7, r9, r3
   1455c:	beq	145b0 <__assert_fail@plt+0x34e4>
   14560:	cmn	r9, #1
   14564:	moveq	r9, r6
   14568:	beq	14514 <__assert_fail@plt+0x3448>
   1456c:	ldr	r3, [sp]
   14570:	cmp	r3, #0
   14574:	bne	14500 <__assert_fail@plt+0x3434>
   14578:	mov	r3, #1
   1457c:	str	r3, [sp, #4]
   14580:	b	14514 <__assert_fail@plt+0x3448>
   14584:	ldr	r3, [sp, #4]
   14588:	cmp	r3, #0
   1458c:	mvnne	r9, #1
   14590:	mov	r0, r9
   14594:	add	sp, sp, #12
   14598:	ldrd	r4, [sp]
   1459c:	ldrd	r6, [sp, #8]
   145a0:	ldrd	r8, [sp, #16]
   145a4:	ldrd	sl, [sp, #24]
   145a8:	add	sp, sp, #32
   145ac:	pop	{pc}		; (ldr pc, [sp], #4)
   145b0:	mov	r9, r6
   145b4:	b	14590 <__assert_fail@plt+0x34c4>
   145b8:	mvn	r9, #0
   145bc:	b	14590 <__assert_fail@plt+0x34c4>
   145c0:	strd	r4, [sp, #-16]!
   145c4:	str	r6, [sp, #8]
   145c8:	mov	r6, r0
   145cc:	ldr	r0, [r1]
   145d0:	str	lr, [sp, #12]
   145d4:	cmp	r0, #0
   145d8:	beq	1461c <__assert_fail@plt+0x3550>
   145dc:	mov	r4, r1
   145e0:	mov	r5, #0
   145e4:	b	145f8 <__assert_fail@plt+0x352c>
   145e8:	ldr	r0, [r4, #4]!
   145ec:	add	r5, r5, #1
   145f0:	cmp	r0, #0
   145f4:	beq	1461c <__assert_fail@plt+0x3550>
   145f8:	mov	r1, r6
   145fc:	bl	10e38 <strcmp@plt>
   14600:	cmp	r0, #0
   14604:	bne	145e8 <__assert_fail@plt+0x351c>
   14608:	mov	r0, r5
   1460c:	ldrd	r4, [sp]
   14610:	ldr	r6, [sp, #8]
   14614:	add	sp, sp, #12
   14618:	pop	{pc}		; (ldr pc, [sp], #4)
   1461c:	ldrd	r4, [sp]
   14620:	mvn	r0, #0
   14624:	ldr	r6, [sp, #8]
   14628:	add	sp, sp, #12
   1462c:	pop	{pc}		; (ldr pc, [sp], #4)
   14630:	cmn	r2, #1
   14634:	strd	r4, [sp, #-16]!
   14638:	mov	r5, r1
   1463c:	movweq	r1, #46672	; 0xb650
   14640:	movwne	r1, #46700	; 0xb66c
   14644:	str	r6, [sp, #8]
   14648:	movteq	r1, #1
   1464c:	movtne	r1, #1
   14650:	str	lr, [sp, #12]
   14654:	mov	r6, r0
   14658:	sub	sp, sp, #8
   1465c:	mov	r2, #5
   14660:	mov	r0, #0
   14664:	bl	10ec8 <dcgettext@plt>
   14668:	mov	r4, r0
   1466c:	mov	r2, r5
   14670:	mov	r1, #8
   14674:	mov	r0, #0
   14678:	bl	16e6c <__assert_fail@plt+0x5da0>
   1467c:	mov	r5, r0
   14680:	mov	r1, r6
   14684:	mov	r0, #1
   14688:	bl	1719c <__assert_fail@plt+0x60d0>
   1468c:	mov	r1, #0
   14690:	mov	r3, r5
   14694:	str	r0, [sp]
   14698:	mov	r2, r4
   1469c:	mov	r0, r1
   146a0:	bl	10f4c <error@plt>
   146a4:	add	sp, sp, #8
   146a8:	ldrd	r4, [sp]
   146ac:	ldr	r6, [sp, #8]
   146b0:	add	sp, sp, #12
   146b4:	pop	{pc}		; (ldr pc, [sp], #4)
   146b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   146bc:	mov	r4, r1
   146c0:	movw	r1, #46732	; 0xb68c
   146c4:	movt	r1, #1
   146c8:	strd	r6, [sp, #8]
   146cc:	mov	r6, r0
   146d0:	mov	r7, r2
   146d4:	mov	r0, #0
   146d8:	strd	r8, [sp, #16]
   146dc:	mov	r2, #5
   146e0:	strd	sl, [sp, #24]
   146e4:	movw	sl, #49552	; 0xc190
   146e8:	movt	sl, #2
   146ec:	str	lr, [sp, #32]
   146f0:	sub	sp, sp, #12
   146f4:	bl	10ec8 <dcgettext@plt>
   146f8:	ldr	r1, [sl]
   146fc:	bl	10e20 <fputs_unlocked@plt>
   14700:	ldr	fp, [r6]
   14704:	cmp	fp, #0
   14708:	beq	147a8 <__assert_fail@plt+0x36dc>
   1470c:	movw	r3, #46756	; 0xb6a4
   14710:	movt	r3, #1
   14714:	mov	r9, #0
   14718:	str	r3, [sp]
   1471c:	movw	r3, #46764	; 0xb6ac
   14720:	movt	r3, #1
   14724:	mov	r5, r9
   14728:	str	r3, [sp, #4]
   1472c:	b	14764 <__assert_fail@plt+0x3698>
   14730:	mov	r0, fp
   14734:	mov	r9, r4
   14738:	bl	171ac <__assert_fail@plt+0x60e0>
   1473c:	mov	r3, r0
   14740:	mov	r1, #1
   14744:	ldr	r2, [sp]
   14748:	mov	r0, r8
   1474c:	bl	1100c <__fprintf_chk@plt>
   14750:	ldr	fp, [r6, #4]!
   14754:	add	r5, r5, #1
   14758:	add	r4, r4, r7
   1475c:	cmp	fp, #0
   14760:	beq	147a8 <__assert_fail@plt+0x36dc>
   14764:	cmp	r5, #0
   14768:	mov	r1, r4
   1476c:	ldr	r8, [sl]
   14770:	mov	r2, r7
   14774:	mov	r0, r9
   14778:	beq	14730 <__assert_fail@plt+0x3664>
   1477c:	bl	10eb0 <memcmp@plt>
   14780:	cmp	r0, #0
   14784:	bne	14730 <__assert_fail@plt+0x3664>
   14788:	mov	r0, fp
   1478c:	bl	171ac <__assert_fail@plt+0x60e0>
   14790:	mov	r3, r0
   14794:	mov	r1, #1
   14798:	ldr	r2, [sp, #4]
   1479c:	mov	r0, r8
   147a0:	bl	1100c <__fprintf_chk@plt>
   147a4:	b	14750 <__assert_fail@plt+0x3684>
   147a8:	ldr	r0, [sl]
   147ac:	ldr	r3, [r0, #20]
   147b0:	ldr	r2, [r0, #24]
   147b4:	cmp	r3, r2
   147b8:	bcs	147e8 <__assert_fail@plt+0x371c>
   147bc:	add	r1, r3, #1
   147c0:	mov	r2, #10
   147c4:	str	r1, [r0, #20]
   147c8:	strb	r2, [r3]
   147cc:	add	sp, sp, #12
   147d0:	ldrd	r4, [sp]
   147d4:	ldrd	r6, [sp, #8]
   147d8:	ldrd	r8, [sp, #16]
   147dc:	ldrd	sl, [sp, #24]
   147e0:	add	sp, sp, #32
   147e4:	pop	{pc}		; (ldr pc, [sp], #4)
   147e8:	mov	r1, #10
   147ec:	add	sp, sp, #12
   147f0:	ldrd	r4, [sp]
   147f4:	ldrd	r6, [sp, #8]
   147f8:	ldrd	r8, [sp, #16]
   147fc:	ldrd	sl, [sp, #24]
   14800:	ldr	lr, [sp, #32]
   14804:	add	sp, sp, #36	; 0x24
   14808:	b	11030 <__overflow@plt>
   1480c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14810:	mov	r5, r1
   14814:	mov	r4, r2
   14818:	ldrb	ip, [sp, #32]
   1481c:	strd	r6, [sp, #8]
   14820:	mov	r7, r0
   14824:	mov	r6, r3
   14828:	str	r8, [sp, #16]
   1482c:	str	lr, [sp, #20]
   14830:	cmp	ip, #0
   14834:	beq	14868 <__assert_fail@plt+0x379c>
   14838:	mov	r2, r3
   1483c:	mov	r1, r4
   14840:	ldr	r3, [sp, #24]
   14844:	mov	r0, r5
   14848:	bl	144b0 <__assert_fail@plt+0x33e4>
   1484c:	cmp	r0, #0
   14850:	blt	14878 <__assert_fail@plt+0x37ac>
   14854:	ldrd	r4, [sp]
   14858:	ldrd	r6, [sp, #8]
   1485c:	ldr	r8, [sp, #16]
   14860:	add	sp, sp, #20
   14864:	pop	{pc}		; (ldr pc, [sp], #4)
   14868:	mov	r1, r2
   1486c:	mov	r0, r5
   14870:	bl	145c0 <__assert_fail@plt+0x34f4>
   14874:	b	1484c <__assert_fail@plt+0x3780>
   14878:	mov	r2, r0
   1487c:	mov	r1, r5
   14880:	mov	r0, r7
   14884:	bl	14630 <__assert_fail@plt+0x3564>
   14888:	mov	r0, r4
   1488c:	mov	r1, r6
   14890:	ldr	r2, [sp, #24]
   14894:	bl	146b8 <__assert_fail@plt+0x35ec>
   14898:	ldr	r3, [sp, #28]
   1489c:	blx	r3
   148a0:	mvn	r0, #0
   148a4:	b	14854 <__assert_fail@plt+0x3788>
   148a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   148ac:	strd	r6, [sp, #8]
   148b0:	ldr	r7, [r1]
   148b4:	str	r8, [sp, #16]
   148b8:	str	lr, [sp, #20]
   148bc:	cmp	r7, #0
   148c0:	beq	14900 <__assert_fail@plt+0x3834>
   148c4:	mov	r6, r3
   148c8:	mov	r8, r0
   148cc:	mov	r4, r2
   148d0:	mov	r5, r1
   148d4:	b	148e4 <__assert_fail@plt+0x3818>
   148d8:	ldr	r7, [r5, #4]!
   148dc:	cmp	r7, #0
   148e0:	beq	14900 <__assert_fail@plt+0x3834>
   148e4:	mov	r1, r4
   148e8:	mov	r2, r6
   148ec:	mov	r0, r8
   148f0:	add	r4, r4, r6
   148f4:	bl	10eb0 <memcmp@plt>
   148f8:	cmp	r0, #0
   148fc:	bne	148d8 <__assert_fail@plt+0x380c>
   14900:	mov	r0, r7
   14904:	ldrd	r4, [sp]
   14908:	ldrd	r6, [sp, #8]
   1490c:	ldr	r8, [sp, #16]
   14910:	add	sp, sp, #20
   14914:	pop	{pc}		; (ldr pc, [sp], #4)
   14918:	movw	r3, #49668	; 0xc204
   1491c:	movt	r3, #2
   14920:	str	r0, [r3]
   14924:	bx	lr
   14928:	movw	r3, #49668	; 0xc204
   1492c:	movt	r3, #2
   14930:	strb	r0, [r3, #4]
   14934:	bx	lr
   14938:	movw	r3, #49564	; 0xc19c
   1493c:	movt	r3, #2
   14940:	strd	r4, [sp, #-16]!
   14944:	ldr	r0, [r3]
   14948:	str	r6, [sp, #8]
   1494c:	str	lr, [sp, #12]
   14950:	sub	sp, sp, #8
   14954:	bl	18d48 <__assert_fail@plt+0x7c7c>
   14958:	cmp	r0, #0
   1495c:	beq	14988 <__assert_fail@plt+0x38bc>
   14960:	movw	r4, #49668	; 0xc204
   14964:	movt	r4, #2
   14968:	ldrb	r6, [r4, #4]
   1496c:	bl	10fd0 <__errno_location@plt>
   14970:	mov	r5, r0
   14974:	cmp	r6, #0
   14978:	beq	149b4 <__assert_fail@plt+0x38e8>
   1497c:	ldr	r3, [r0]
   14980:	cmp	r3, #32
   14984:	bne	149b4 <__assert_fail@plt+0x38e8>
   14988:	movw	r3, #49552	; 0xc190
   1498c:	movt	r3, #2
   14990:	ldr	r0, [r3]
   14994:	bl	18d48 <__assert_fail@plt+0x7c7c>
   14998:	cmp	r0, #0
   1499c:	bne	149fc <__assert_fail@plt+0x3930>
   149a0:	add	sp, sp, #8
   149a4:	ldrd	r4, [sp]
   149a8:	ldr	r6, [sp, #8]
   149ac:	add	sp, sp, #12
   149b0:	pop	{pc}		; (ldr pc, [sp], #4)
   149b4:	movw	r1, #46772	; 0xb6b4
   149b8:	movt	r1, #1
   149bc:	mov	r2, #5
   149c0:	mov	r0, #0
   149c4:	bl	10ec8 <dcgettext@plt>
   149c8:	mov	r6, r0
   149cc:	ldr	r0, [r4]
   149d0:	cmp	r0, #0
   149d4:	beq	14a0c <__assert_fail@plt+0x3940>
   149d8:	ldr	r4, [r5]
   149dc:	bl	16fc0 <__assert_fail@plt+0x5ef4>
   149e0:	mov	r3, r0
   149e4:	movw	r2, #39868	; 0x9bbc
   149e8:	movt	r2, #1
   149ec:	mov	r0, #0
   149f0:	str	r6, [sp]
   149f4:	mov	r1, r4
   149f8:	bl	10f4c <error@plt>
   149fc:	movw	r3, #49468	; 0xc13c
   14a00:	movt	r3, #2
   14a04:	ldr	r0, [r3]
   14a08:	bl	10e80 <_exit@plt>
   14a0c:	mov	r3, r6
   14a10:	movw	r2, #39304	; 0x9988
   14a14:	movt	r2, #1
   14a18:	ldr	r1, [r5]
   14a1c:	bl	10f4c <error@plt>
   14a20:	b	149fc <__assert_fail@plt+0x3930>
   14a24:	strd	r4, [sp, #-12]!
   14a28:	mov	r5, r0
   14a2c:	str	lr, [sp, #8]
   14a30:	sub	sp, sp, #12
   14a34:	bl	10fd0 <__errno_location@plt>
   14a38:	mov	r4, r0
   14a3c:	mov	r2, #0
   14a40:	ldr	r3, [r4]
   14a44:	mov	r0, r5
   14a48:	str	r2, [r4]
   14a4c:	str	r3, [sp]
   14a50:	str	r3, [sp, #4]
   14a54:	bl	10e74 <free@plt>
   14a58:	ldr	r3, [r4]
   14a5c:	add	r2, sp, #8
   14a60:	clz	r3, r3
   14a64:	lsr	r3, r3, #5
   14a68:	add	r3, r2, r3, lsl #2
   14a6c:	ldr	r3, [r3, #-8]
   14a70:	str	r3, [r4]
   14a74:	add	sp, sp, #12
   14a78:	ldrd	r4, [sp]
   14a7c:	add	sp, sp, #8
   14a80:	pop	{pc}		; (ldr pc, [sp], #4)
   14a84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14a88:	mov	r4, r2
   14a8c:	strd	r6, [sp, #8]
   14a90:	mov	r6, r1
   14a94:	strd	r8, [sp, #16]
   14a98:	mov	r9, r3
   14a9c:	strd	sl, [sp, #24]
   14aa0:	str	lr, [sp, #32]
   14aa4:	sub	sp, sp, #12
   14aa8:	ldr	r7, [sp, #52]	; 0x34
   14aac:	str	r0, [sp]
   14ab0:	bl	10fb8 <strlen@plt>
   14ab4:	mov	fp, r0
   14ab8:	ands	sl, r7, #2
   14abc:	beq	14c10 <__assert_fail@plt+0x3b44>
   14ac0:	mov	r8, #0
   14ac4:	mov	r5, fp
   14ac8:	mov	sl, r8
   14acc:	ldr	r2, [r9]
   14ad0:	cmp	r2, r5
   14ad4:	movcc	fp, r2
   14ad8:	movcc	r1, #0
   14adc:	bcs	14be0 <__assert_fail@plt+0x3b14>
   14ae0:	ldr	r3, [sp, #48]	; 0x30
   14ae4:	str	r2, [r9]
   14ae8:	cmp	r3, #0
   14aec:	beq	14c04 <__assert_fail@plt+0x3b38>
   14af0:	cmp	r3, #1
   14af4:	moveq	r5, #0
   14af8:	beq	14b08 <__assert_fail@plt+0x3a3c>
   14afc:	lsr	r5, r1, #1
   14b00:	and	r1, r1, #1
   14b04:	add	r1, r1, r5
   14b08:	tst	r7, #4
   14b0c:	addeq	r9, r1, fp
   14b10:	movne	r9, fp
   14b14:	movne	r1, #0
   14b18:	tst	r7, #8
   14b1c:	movne	r5, #0
   14b20:	cmp	r4, #0
   14b24:	beq	14ba8 <__assert_fail@plt+0x3adc>
   14b28:	sub	r4, r4, #1
   14b2c:	mov	r0, r6
   14b30:	add	r4, r6, r4
   14b34:	cmp	r1, #0
   14b38:	cmpne	r6, r4
   14b3c:	bcs	14b5c <__assert_fail@plt+0x3a90>
   14b40:	mov	lr, #32
   14b44:	rsb	r3, r1, #0
   14b48:	strb	lr, [r0], #1
   14b4c:	sub	r2, r6, r0
   14b50:	cmp	r3, r2
   14b54:	cmpne	r4, r0
   14b58:	bhi	14b44 <__assert_fail@plt+0x3a78>
   14b5c:	sub	r2, r4, r0
   14b60:	mov	ip, #0
   14b64:	ldr	r1, [sp]
   14b68:	cmp	r2, fp
   14b6c:	movcs	r2, fp
   14b70:	strb	ip, [r0]
   14b74:	bl	10f88 <mempcpy@plt>
   14b78:	cmp	r5, #0
   14b7c:	cmpne	r4, r0
   14b80:	mov	r3, r0
   14b84:	bls	14ba0 <__assert_fail@plt+0x3ad4>
   14b88:	mov	r1, #32
   14b8c:	strb	r1, [r3], #1
   14b90:	sub	r2, r3, r5
   14b94:	cmp	r0, r2
   14b98:	cmpne	r4, r3
   14b9c:	bhi	14b8c <__assert_fail@plt+0x3ac0>
   14ba0:	mov	r2, #0
   14ba4:	strb	r2, [r3]
   14ba8:	add	r5, r5, r9
   14bac:	mov	r0, r8
   14bb0:	bl	14a24 <__assert_fail@plt+0x3958>
   14bb4:	mov	r0, sl
   14bb8:	bl	14a24 <__assert_fail@plt+0x3958>
   14bbc:	mov	r0, r5
   14bc0:	add	sp, sp, #12
   14bc4:	ldrd	r4, [sp]
   14bc8:	ldrd	r6, [sp, #8]
   14bcc:	ldrd	r8, [sp, #16]
   14bd0:	ldrd	sl, [sp, #24]
   14bd4:	add	sp, sp, #32
   14bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bdc:	mov	sl, #0
   14be0:	ldr	r3, [sp, #48]	; 0x30
   14be4:	cmp	r2, r5
   14be8:	subhi	r1, r2, r5
   14bec:	movls	r2, r5
   14bf0:	movhi	r2, r5
   14bf4:	movls	r1, #0
   14bf8:	str	r2, [r9]
   14bfc:	cmp	r3, #0
   14c00:	bne	14af0 <__assert_fail@plt+0x3a24>
   14c04:	mov	r5, r1
   14c08:	ldr	r1, [sp, #48]	; 0x30
   14c0c:	b	14b08 <__assert_fail@plt+0x3a3c>
   14c10:	bl	10f10 <__ctype_get_mb_cur_max@plt>
   14c14:	cmp	r0, #1
   14c18:	bls	14ac0 <__assert_fail@plt+0x39f4>
   14c1c:	mov	r2, sl
   14c20:	mov	r0, sl
   14c24:	ldr	r1, [sp]
   14c28:	bl	1106c <mbstowcs@plt>
   14c2c:	cmn	r0, #1
   14c30:	bne	14c4c <__assert_fail@plt+0x3b80>
   14c34:	tst	r7, #1
   14c38:	bne	14ac0 <__assert_fail@plt+0x39f4>
   14c3c:	mov	r8, #0
   14c40:	mvn	r5, #0
   14c44:	mov	sl, r8
   14c48:	b	14bac <__assert_fail@plt+0x3ae0>
   14c4c:	add	r5, r0, #1
   14c50:	lsl	r3, r5, #2
   14c54:	mov	r0, r3
   14c58:	str	r3, [sp, #4]
   14c5c:	bl	18cb4 <__assert_fail@plt+0x7be8>
   14c60:	subs	r8, r0, #0
   14c64:	beq	14d90 <__assert_fail@plt+0x3cc4>
   14c68:	mov	r2, r5
   14c6c:	ldr	r1, [sp]
   14c70:	bl	1106c <mbstowcs@plt>
   14c74:	cmp	r0, #0
   14c78:	beq	14de8 <__assert_fail@plt+0x3d1c>
   14c7c:	ldr	r3, [sp, #4]
   14c80:	add	r3, r8, r3
   14c84:	str	sl, [r3, #-4]
   14c88:	ldr	r2, [r8]
   14c8c:	cmp	r2, #0
   14c90:	beq	14da4 <__assert_fail@plt+0x3cd8>
   14c94:	mov	r0, r2
   14c98:	str	r4, [sp, #4]
   14c9c:	mov	r4, r8
   14ca0:	bl	10eec <iswprint@plt>
   14ca4:	cmp	r0, #0
   14ca8:	bne	14cb8 <__assert_fail@plt+0x3bec>
   14cac:	movw	r3, #65533	; 0xfffd
   14cb0:	mov	sl, #1
   14cb4:	str	r3, [r4]
   14cb8:	ldr	r0, [r4, #4]!
   14cbc:	cmp	r0, #0
   14cc0:	bne	14ca0 <__assert_fail@plt+0x3bd4>
   14cc4:	mov	r2, r0
   14cc8:	mov	r1, r5
   14ccc:	ldr	r4, [sp, #4]
   14cd0:	mov	r0, r8
   14cd4:	str	r2, [sp, #4]
   14cd8:	bl	11048 <wcswidth@plt>
   14cdc:	cmp	sl, #0
   14ce0:	mov	r5, r0
   14ce4:	ldr	r2, [sp, #4]
   14ce8:	beq	14db4 <__assert_fail@plt+0x3ce8>
   14cec:	mov	r0, r2
   14cf0:	mov	r1, r8
   14cf4:	bl	10f40 <wcstombs@plt>
   14cf8:	add	r3, r0, #1
   14cfc:	str	r3, [sp, #4]
   14d00:	ldr	r0, [sp, #4]
   14d04:	bl	18cb4 <__assert_fail@plt+0x7be8>
   14d08:	subs	sl, r0, #0
   14d0c:	beq	14dd8 <__assert_fail@plt+0x3d0c>
   14d10:	ldr	r0, [r8]
   14d14:	ldr	r3, [r9]
   14d18:	cmp	r0, #0
   14d1c:	beq	14df4 <__assert_fail@plt+0x3d28>
   14d20:	mov	fp, r8
   14d24:	mov	r5, #0
   14d28:	str	r4, [sp]
   14d2c:	mov	r4, r3
   14d30:	b	14d44 <__assert_fail@plt+0x3c78>
   14d34:	ldr	r0, [fp, #4]!
   14d38:	mov	r5, r3
   14d3c:	cmp	r0, #0
   14d40:	beq	14d68 <__assert_fail@plt+0x3c9c>
   14d44:	bl	10e5c <wcwidth@plt>
   14d48:	cmn	r0, #1
   14d4c:	bne	14d5c <__assert_fail@plt+0x3c90>
   14d50:	movw	r3, #65533	; 0xfffd
   14d54:	mov	r0, #1
   14d58:	str	r3, [fp]
   14d5c:	add	r3, r0, r5
   14d60:	cmp	r4, r3
   14d64:	bcs	14d34 <__assert_fail@plt+0x3c68>
   14d68:	ldr	r4, [sp]
   14d6c:	mov	r0, #0
   14d70:	mov	r1, r8
   14d74:	str	sl, [sp]
   14d78:	ldr	r2, [sp, #4]
   14d7c:	str	r0, [fp]
   14d80:	mov	r0, sl
   14d84:	bl	10f40 <wcstombs@plt>
   14d88:	mov	fp, r0
   14d8c:	b	14acc <__assert_fail@plt+0x3a00>
   14d90:	tst	r7, #1
   14d94:	movne	r5, fp
   14d98:	movne	sl, r8
   14d9c:	bne	14acc <__assert_fail@plt+0x3a00>
   14da0:	b	14c3c <__assert_fail@plt+0x3b70>
   14da4:	mov	r1, r5
   14da8:	mov	r0, r8
   14dac:	bl	11048 <wcswidth@plt>
   14db0:	mov	r5, r0
   14db4:	ldr	r2, [r9]
   14db8:	cmp	r2, r5
   14dbc:	bcs	14bdc <__assert_fail@plt+0x3b10>
   14dc0:	add	r3, fp, #1
   14dc4:	str	r3, [sp, #4]
   14dc8:	ldr	r0, [sp, #4]
   14dcc:	bl	18cb4 <__assert_fail@plt+0x7be8>
   14dd0:	subs	sl, r0, #0
   14dd4:	bne	14d10 <__assert_fail@plt+0x3c44>
   14dd8:	tst	r7, #1
   14ddc:	mvneq	r5, #0
   14de0:	bne	14acc <__assert_fail@plt+0x3a00>
   14de4:	b	14bac <__assert_fail@plt+0x3ae0>
   14de8:	mov	sl, r0
   14dec:	mov	r5, fp
   14df0:	b	14acc <__assert_fail@plt+0x3a00>
   14df4:	mov	r5, r0
   14df8:	mov	fp, r8
   14dfc:	b	14d6c <__assert_fail@plt+0x3ca0>
   14e00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e04:	strd	r6, [sp, #8]
   14e08:	mov	r6, r1
   14e0c:	mov	r7, #0
   14e10:	strd	r8, [sp, #16]
   14e14:	mov	r9, r0
   14e18:	ldr	r8, [r1]
   14e1c:	strd	sl, [sp, #24]
   14e20:	mov	fp, r2
   14e24:	mov	sl, r3
   14e28:	str	lr, [sp, #32]
   14e2c:	sub	sp, sp, #12
   14e30:	mov	r0, r8
   14e34:	add	r4, r0, #1
   14e38:	mov	r0, r7
   14e3c:	mov	r1, r4
   14e40:	bl	18cf0 <__assert_fail@plt+0x7c24>
   14e44:	subs	r5, r0, #0
   14e48:	mov	r3, r6
   14e4c:	mov	r2, r4
   14e50:	mov	r0, r9
   14e54:	mov	r1, r5
   14e58:	beq	14ea0 <__assert_fail@plt+0x3dd4>
   14e5c:	str	r8, [r6]
   14e60:	mov	r7, r5
   14e64:	str	fp, [sp]
   14e68:	str	sl, [sp, #4]
   14e6c:	bl	14a84 <__assert_fail@plt+0x39b8>
   14e70:	cmn	r0, #1
   14e74:	beq	14eac <__assert_fail@plt+0x3de0>
   14e78:	cmp	r4, r0
   14e7c:	bls	14e34 <__assert_fail@plt+0x3d68>
   14e80:	mov	r0, r5
   14e84:	add	sp, sp, #12
   14e88:	ldrd	r4, [sp]
   14e8c:	ldrd	r6, [sp, #8]
   14e90:	ldrd	r8, [sp, #16]
   14e94:	ldrd	sl, [sp, #24]
   14e98:	add	sp, sp, #32
   14e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14ea0:	mov	r0, r7
   14ea4:	bl	14a24 <__assert_fail@plt+0x3958>
   14ea8:	b	14e80 <__assert_fail@plt+0x3db4>
   14eac:	mov	r0, r5
   14eb0:	mov	r5, #0
   14eb4:	bl	14a24 <__assert_fail@plt+0x3958>
   14eb8:	b	14e80 <__assert_fail@plt+0x3db4>
   14ebc:	strd	r4, [sp, #-16]!
   14ec0:	subs	r4, r0, #0
   14ec4:	str	r6, [sp, #8]
   14ec8:	str	lr, [sp, #12]
   14ecc:	beq	14f64 <__assert_fail@plt+0x3e98>
   14ed0:	mov	r1, #47	; 0x2f
   14ed4:	bl	11054 <strrchr@plt>
   14ed8:	subs	r5, r0, #0
   14edc:	beq	14f3c <__assert_fail@plt+0x3e70>
   14ee0:	add	r6, r5, #1
   14ee4:	sub	r3, r6, r4
   14ee8:	cmp	r3, #6
   14eec:	ble	14f3c <__assert_fail@plt+0x3e70>
   14ef0:	movw	r1, #46840	; 0xb6f8
   14ef4:	movt	r1, #1
   14ef8:	mov	r2, #7
   14efc:	sub	r0, r5, #6
   14f00:	bl	1109c <strncmp@plt>
   14f04:	cmp	r0, #0
   14f08:	bne	14f3c <__assert_fail@plt+0x3e70>
   14f0c:	movw	r1, #46848	; 0xb700
   14f10:	movt	r1, #1
   14f14:	mov	r2, #3
   14f18:	mov	r0, r6
   14f1c:	bl	1109c <strncmp@plt>
   14f20:	cmp	r0, #0
   14f24:	movne	r4, r6
   14f28:	bne	14f3c <__assert_fail@plt+0x3e70>
   14f2c:	add	r4, r5, #4
   14f30:	movw	r3, #49536	; 0xc180
   14f34:	movt	r3, #2
   14f38:	str	r4, [r3]
   14f3c:	movw	r2, #49676	; 0xc20c
   14f40:	movt	r2, #2
   14f44:	ldr	r6, [sp, #8]
   14f48:	movw	r3, #49540	; 0xc184
   14f4c:	movt	r3, #2
   14f50:	str	r4, [r2]
   14f54:	str	r4, [r3]
   14f58:	ldrd	r4, [sp]
   14f5c:	add	sp, sp, #12
   14f60:	pop	{pc}		; (ldr pc, [sp], #4)
   14f64:	movw	r3, #49552	; 0xc190
   14f68:	movt	r3, #2
   14f6c:	movw	r0, #46784	; 0xb6c0
   14f70:	movt	r0, #1
   14f74:	ldr	r3, [r3]
   14f78:	mov	r2, #55	; 0x37
   14f7c:	mov	r1, #1
   14f80:	bl	10ef8 <fwrite@plt>
   14f84:	bl	110a8 <abort@plt>
   14f88:	strd	r4, [sp, #-16]!
   14f8c:	mov	r4, #0
   14f90:	mov	r5, #0
   14f94:	cmp	r1, #10
   14f98:	str	r6, [sp, #8]
   14f9c:	strd	r4, [r0]
   14fa0:	strd	r4, [r0, #8]
   14fa4:	str	lr, [sp, #12]
   14fa8:	strd	r4, [r0, #16]
   14fac:	strd	r4, [r0, #24]
   14fb0:	strd	r4, [r0, #32]
   14fb4:	strd	r4, [r0, #40]	; 0x28
   14fb8:	beq	14fd0 <__assert_fail@plt+0x3f04>
   14fbc:	ldrd	r4, [sp]
   14fc0:	str	r1, [r0]
   14fc4:	ldr	r6, [sp, #8]
   14fc8:	add	sp, sp, #12
   14fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd0:	bl	110a8 <abort@plt>
   14fd4:	mov	r2, #5
   14fd8:	strd	r4, [sp, #-16]!
   14fdc:	mov	r5, r0
   14fe0:	str	r6, [sp, #8]
   14fe4:	mov	r6, r1
   14fe8:	mov	r1, r0
   14fec:	mov	r0, #0
   14ff0:	str	lr, [sp, #12]
   14ff4:	bl	10ec8 <dcgettext@plt>
   14ff8:	cmp	r5, r0
   14ffc:	mov	r4, r0
   15000:	beq	15018 <__assert_fail@plt+0x3f4c>
   15004:	mov	r0, r4
   15008:	ldrd	r4, [sp]
   1500c:	ldr	r6, [sp, #8]
   15010:	add	sp, sp, #12
   15014:	pop	{pc}		; (ldr pc, [sp], #4)
   15018:	bl	18fb4 <__assert_fail@plt+0x7ee8>
   1501c:	ldrb	r3, [r0]
   15020:	bic	r3, r3, #32
   15024:	cmp	r3, #85	; 0x55
   15028:	bne	15090 <__assert_fail@plt+0x3fc4>
   1502c:	ldrb	r3, [r0, #1]
   15030:	bic	r3, r3, #32
   15034:	cmp	r3, #84	; 0x54
   15038:	bne	15110 <__assert_fail@plt+0x4044>
   1503c:	ldrb	r3, [r0, #2]
   15040:	bic	r3, r3, #32
   15044:	cmp	r3, #70	; 0x46
   15048:	bne	15110 <__assert_fail@plt+0x4044>
   1504c:	ldrb	r3, [r0, #3]
   15050:	cmp	r3, #45	; 0x2d
   15054:	bne	15110 <__assert_fail@plt+0x4044>
   15058:	ldrb	r3, [r0, #4]
   1505c:	cmp	r3, #56	; 0x38
   15060:	bne	15110 <__assert_fail@plt+0x4044>
   15064:	ldrb	r3, [r0, #5]
   15068:	cmp	r3, #0
   1506c:	bne	15110 <__assert_fail@plt+0x4044>
   15070:	ldrb	r2, [r4]
   15074:	movw	r3, #46940	; 0xb75c
   15078:	movt	r3, #1
   1507c:	movw	r4, #46952	; 0xb768
   15080:	movt	r4, #1
   15084:	cmp	r2, #96	; 0x60
   15088:	movne	r4, r3
   1508c:	b	15004 <__assert_fail@plt+0x3f38>
   15090:	cmp	r3, #71	; 0x47
   15094:	bne	15110 <__assert_fail@plt+0x4044>
   15098:	ldrb	r3, [r0, #1]
   1509c:	bic	r3, r3, #32
   150a0:	cmp	r3, #66	; 0x42
   150a4:	bne	15110 <__assert_fail@plt+0x4044>
   150a8:	ldrb	r3, [r0, #2]
   150ac:	cmp	r3, #49	; 0x31
   150b0:	bne	15110 <__assert_fail@plt+0x4044>
   150b4:	ldrb	r3, [r0, #3]
   150b8:	cmp	r3, #56	; 0x38
   150bc:	bne	15110 <__assert_fail@plt+0x4044>
   150c0:	ldrb	r3, [r0, #4]
   150c4:	cmp	r3, #48	; 0x30
   150c8:	bne	15110 <__assert_fail@plt+0x4044>
   150cc:	ldrb	r3, [r0, #5]
   150d0:	cmp	r3, #51	; 0x33
   150d4:	bne	15110 <__assert_fail@plt+0x4044>
   150d8:	ldrb	r3, [r0, #6]
   150dc:	cmp	r3, #48	; 0x30
   150e0:	bne	15110 <__assert_fail@plt+0x4044>
   150e4:	ldrb	r3, [r0, #7]
   150e8:	cmp	r3, #0
   150ec:	bne	15110 <__assert_fail@plt+0x4044>
   150f0:	ldrb	r2, [r4]
   150f4:	movw	r3, #46944	; 0xb760
   150f8:	movt	r3, #1
   150fc:	movw	r4, #46948	; 0xb764
   15100:	movt	r4, #1
   15104:	cmp	r2, #96	; 0x60
   15108:	movne	r4, r3
   1510c:	b	15004 <__assert_fail@plt+0x3f38>
   15110:	movw	r3, #46956	; 0xb76c
   15114:	movt	r3, #1
   15118:	cmp	r6, #9
   1511c:	movw	r4, #46936	; 0xb758
   15120:	movt	r4, #1
   15124:	movne	r4, r3
   15128:	b	15004 <__assert_fail@plt+0x3f38>
   1512c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15130:	strd	r6, [sp, #8]
   15134:	strd	r8, [sp, #16]
   15138:	strd	sl, [sp, #24]
   1513c:	mov	fp, r0
   15140:	mov	sl, r1
   15144:	str	lr, [sp, #32]
   15148:	sub	sp, sp, #116	; 0x74
   1514c:	ldr	r8, [sp, #152]	; 0x98
   15150:	str	r3, [sp, #28]
   15154:	ldr	r3, [sp, #156]	; 0x9c
   15158:	str	r2, [sp, #32]
   1515c:	and	r4, r3, #2
   15160:	ubfx	r3, r3, #1, #1
   15164:	str	r3, [sp, #44]	; 0x2c
   15168:	bl	10f10 <__ctype_get_mb_cur_max@plt>
   1516c:	str	r0, [sp, #64]	; 0x40
   15170:	cmp	r8, #10
   15174:	ldrls	pc, [pc, r8, lsl #2]
   15178:	b	168e8 <__assert_fail@plt+0x581c>
   1517c:	andeq	r5, r1, r0, lsl #11
   15180:	andeq	r5, r1, ip, lsl r6
   15184:	strdeq	r5, [r1], -r8
   15188:	andeq	r5, r1, ip, lsr r6
   1518c:	andeq	r5, r1, r4, ror #9
   15190:	andeq	r5, r1, r0, lsr r5
   15194:			; <UNDEFINED> instruction: 0x000155b0
   15198:	andeq	r5, r1, ip, ror #11
   1519c:	andeq	r5, r1, r8, lsr #3
   151a0:	andeq	r5, r1, r8, lsr #3
   151a4:	andeq	r5, r1, r8, lsr #3
   151a8:	cmp	r8, #10
   151ac:	beq	151d8 <__assert_fail@plt+0x410c>
   151b0:	mov	r1, r8
   151b4:	movw	r0, #46960	; 0xb770
   151b8:	movt	r0, #1
   151bc:	bl	14fd4 <__assert_fail@plt+0x3f08>
   151c0:	mov	r1, r8
   151c4:	str	r0, [sp, #164]	; 0xa4
   151c8:	movw	r0, #46956	; 0xb76c
   151cc:	movt	r0, #1
   151d0:	bl	14fd4 <__assert_fail@plt+0x3f08>
   151d4:	str	r0, [sp, #168]	; 0xa8
   151d8:	cmp	r4, #0
   151dc:	movne	r4, #0
   151e0:	beq	165c4 <__assert_fail@plt+0x54f8>
   151e4:	mov	r3, #1
   151e8:	mov	r5, #0
   151ec:	ldr	r0, [sp, #168]	; 0xa8
   151f0:	str	r3, [sp, #36]	; 0x24
   151f4:	str	r3, [sp, #40]	; 0x28
   151f8:	str	r5, [sp, #68]	; 0x44
   151fc:	bl	10fb8 <strlen@plt>
   15200:	ldr	r3, [sp, #168]	; 0xa8
   15204:	str	r5, [sp, #48]	; 0x30
   15208:	str	r0, [sp, #56]	; 0x38
   1520c:	str	r3, [sp, #60]	; 0x3c
   15210:	str	r5, [sp, #72]	; 0x48
   15214:	str	r8, [sp, #152]	; 0x98
   15218:	mov	r8, fp
   1521c:	mov	r9, #0
   15220:	ldr	fp, [sp, #152]	; 0x98
   15224:	ldr	r3, [sp, #28]
   15228:	cmn	r3, #1
   1522c:	beq	1578c <__assert_fail@plt+0x46c0>
   15230:	ldr	r3, [sp, #28]
   15234:	subs	r6, r3, r9
   15238:	movne	r6, #1
   1523c:	cmp	r6, #0
   15240:	beq	157a4 <__assert_fail@plt+0x46d8>
   15244:	ldr	r0, [sp, #32]
   15248:	ldr	r7, [sp, #40]	; 0x28
   1524c:	add	r3, r0, r9
   15250:	cmp	fp, #2
   15254:	moveq	r7, #0
   15258:	andne	r7, r7, #1
   1525c:	str	r3, [sp, #52]	; 0x34
   15260:	cmp	r7, #0
   15264:	beq	15c40 <__assert_fail@plt+0x4b74>
   15268:	ldr	r2, [sp, #56]	; 0x38
   1526c:	cmp	r2, #0
   15270:	beq	15edc <__assert_fail@plt+0x4e10>
   15274:	ldr	r1, [sp, #28]
   15278:	cmp	r2, #1
   1527c:	mov	r3, r2
   15280:	movls	r3, #0
   15284:	movhi	r3, #1
   15288:	add	r5, r9, r2
   1528c:	cmn	r1, #1
   15290:	movne	r3, #0
   15294:	cmp	r3, #0
   15298:	beq	152a4 <__assert_fail@plt+0x41d8>
   1529c:	bl	10fb8 <strlen@plt>
   152a0:	str	r0, [sp, #28]
   152a4:	ldr	r3, [sp, #28]
   152a8:	cmp	r5, r3
   152ac:	bhi	15edc <__assert_fail@plt+0x4e10>
   152b0:	ldr	r0, [sp, #52]	; 0x34
   152b4:	ldr	r2, [sp, #56]	; 0x38
   152b8:	ldr	r1, [sp, #60]	; 0x3c
   152bc:	bl	10eb0 <memcmp@plt>
   152c0:	cmp	r0, #0
   152c4:	bne	15edc <__assert_fail@plt+0x4e10>
   152c8:	ldr	r3, [sp, #44]	; 0x2c
   152cc:	cmp	r3, #0
   152d0:	bne	1680c <__assert_fail@plt+0x5740>
   152d4:	ldr	r3, [sp, #52]	; 0x34
   152d8:	ldrb	r5, [r3]
   152dc:	cmp	r5, #126	; 0x7e
   152e0:	ldrls	pc, [pc, r5, lsl #2]
   152e4:	b	15b9c <__assert_fail@plt+0x4ad0>
   152e8:	andeq	r5, r1, r0, lsr #21
   152ec:	muleq	r1, ip, fp
   152f0:	muleq	r1, ip, fp
   152f4:	muleq	r1, ip, fp
   152f8:	muleq	r1, ip, fp
   152fc:	muleq	r1, ip, fp
   15300:	muleq	r1, ip, fp
   15304:	andeq	r5, r1, r4, ror sl
   15308:	andeq	r5, r1, ip, ror #20
   1530c:			; <UNDEFINED> instruction: 0x000159b4
   15310:	andeq	r5, r1, r0, ror #20
   15314:	andeq	r5, r1, ip, lsr #19
   15318:	andeq	r5, r1, ip, lsr sl
   1531c:	andeq	r5, r1, r8, lsl #21
   15320:	muleq	r1, ip, fp
   15324:	muleq	r1, ip, fp
   15328:	muleq	r1, ip, fp
   1532c:	muleq	r1, ip, fp
   15330:	muleq	r1, ip, fp
   15334:	muleq	r1, ip, fp
   15338:	muleq	r1, ip, fp
   1533c:	muleq	r1, ip, fp
   15340:	muleq	r1, ip, fp
   15344:	muleq	r1, ip, fp
   15348:	muleq	r1, ip, fp
   1534c:	muleq	r1, ip, fp
   15350:	muleq	r1, ip, fp
   15354:	muleq	r1, ip, fp
   15358:	muleq	r1, ip, fp
   1535c:	muleq	r1, ip, fp
   15360:	muleq	r1, ip, fp
   15364:	muleq	r1, ip, fp
   15368:	andeq	r5, r1, r8, ror fp
   1536c:	andeq	r5, r1, r0, lsl #21
   15370:	andeq	r5, r1, r0, lsl #21
   15374:	andeq	r5, r1, ip, asr fp
   15378:	andeq	r5, r1, r0, lsl #21
   1537c:	muleq	r1, r0, fp
   15380:	andeq	r5, r1, r0, lsl #21
   15384:	ldrdeq	r5, [r1], -ip
   15388:	andeq	r5, r1, r0, lsl #21
   1538c:	andeq	r5, r1, r0, lsl #21
   15390:	andeq	r5, r1, r0, lsl #21
   15394:	muleq	r1, r0, fp
   15398:	muleq	r1, r0, fp
   1539c:	muleq	r1, r0, fp
   153a0:	muleq	r1, r0, fp
   153a4:	muleq	r1, r0, fp
   153a8:	muleq	r1, r0, fp
   153ac:	muleq	r1, r0, fp
   153b0:	muleq	r1, r0, fp
   153b4:	muleq	r1, r0, fp
   153b8:	muleq	r1, r0, fp
   153bc:	muleq	r1, r0, fp
   153c0:	muleq	r1, r0, fp
   153c4:	muleq	r1, r0, fp
   153c8:	muleq	r1, r0, fp
   153cc:	muleq	r1, r0, fp
   153d0:	muleq	r1, r0, fp
   153d4:	andeq	r5, r1, r0, lsl #21
   153d8:	andeq	r5, r1, r0, lsl #21
   153dc:	andeq	r5, r1, r0, lsl #21
   153e0:	andeq	r5, r1, r0, lsl #21
   153e4:			; <UNDEFINED> instruction: 0x000158b0
   153e8:	muleq	r1, ip, fp
   153ec:	muleq	r1, r0, fp
   153f0:	muleq	r1, r0, fp
   153f4:	muleq	r1, r0, fp
   153f8:	muleq	r1, r0, fp
   153fc:	muleq	r1, r0, fp
   15400:	muleq	r1, r0, fp
   15404:	muleq	r1, r0, fp
   15408:	muleq	r1, r0, fp
   1540c:	muleq	r1, r0, fp
   15410:	muleq	r1, r0, fp
   15414:	muleq	r1, r0, fp
   15418:	muleq	r1, r0, fp
   1541c:	muleq	r1, r0, fp
   15420:	muleq	r1, r0, fp
   15424:	muleq	r1, r0, fp
   15428:	muleq	r1, r0, fp
   1542c:	muleq	r1, r0, fp
   15430:	muleq	r1, r0, fp
   15434:	muleq	r1, r0, fp
   15438:	muleq	r1, r0, fp
   1543c:	muleq	r1, r0, fp
   15440:	muleq	r1, r0, fp
   15444:	muleq	r1, r0, fp
   15448:	muleq	r1, r0, fp
   1544c:	muleq	r1, r0, fp
   15450:	muleq	r1, r0, fp
   15454:	andeq	r5, r1, r0, lsl #21
   15458:	andeq	r5, r1, r8, asr r8
   1545c:	muleq	r1, r0, fp
   15460:	andeq	r5, r1, r0, lsl #21
   15464:	muleq	r1, r0, fp
   15468:	andeq	r5, r1, r0, lsl #21
   1546c:	muleq	r1, r0, fp
   15470:	muleq	r1, r0, fp
   15474:	muleq	r1, r0, fp
   15478:	muleq	r1, r0, fp
   1547c:	muleq	r1, r0, fp
   15480:	muleq	r1, r0, fp
   15484:	muleq	r1, r0, fp
   15488:	muleq	r1, r0, fp
   1548c:	muleq	r1, r0, fp
   15490:	muleq	r1, r0, fp
   15494:	muleq	r1, r0, fp
   15498:	muleq	r1, r0, fp
   1549c:	muleq	r1, r0, fp
   154a0:	muleq	r1, r0, fp
   154a4:	muleq	r1, r0, fp
   154a8:	muleq	r1, r0, fp
   154ac:	muleq	r1, r0, fp
   154b0:	muleq	r1, r0, fp
   154b4:	muleq	r1, r0, fp
   154b8:	muleq	r1, r0, fp
   154bc:	muleq	r1, r0, fp
   154c0:	muleq	r1, r0, fp
   154c4:	muleq	r1, r0, fp
   154c8:	muleq	r1, r0, fp
   154cc:	muleq	r1, r0, fp
   154d0:	muleq	r1, r0, fp
   154d4:	andeq	r5, r1, ip, ror r6
   154d8:	andeq	r5, r1, r0, lsl #21
   154dc:	andeq	r5, r1, ip, ror r6
   154e0:	andeq	r5, r1, ip, asr fp
   154e4:	cmp	r4, #0
   154e8:	moveq	r3, #1
   154ec:	streq	r3, [sp, #40]	; 0x28
   154f0:	beq	15c04 <__assert_fail@plt+0x4b38>
   154f4:	mov	r3, #0
   154f8:	mov	r2, #1
   154fc:	mov	r4, r3
   15500:	str	r2, [sp, #36]	; 0x24
   15504:	str	r2, [sp, #44]	; 0x2c
   15508:	str	r2, [sp, #56]	; 0x38
   1550c:	str	r3, [sp, #68]	; 0x44
   15510:	movw	r3, #46956	; 0xb76c
   15514:	movt	r3, #1
   15518:	str	r4, [sp, #40]	; 0x28
   1551c:	mov	r8, #2
   15520:	str	r4, [sp, #48]	; 0x30
   15524:	str	r3, [sp, #60]	; 0x3c
   15528:	str	r4, [sp, #72]	; 0x48
   1552c:	b	15214 <__assert_fail@plt+0x4148>
   15530:	cmp	r4, #0
   15534:	bne	16780 <__assert_fail@plt+0x56b4>
   15538:	cmp	sl, #0
   1553c:	beq	16540 <__assert_fail@plt+0x5474>
   15540:	mov	r3, #34	; 0x22
   15544:	mov	r1, r4
   15548:	mov	r2, #1
   1554c:	strb	r3, [fp]
   15550:	movw	r3, #46936	; 0xb758
   15554:	movt	r3, #1
   15558:	mov	r4, r2
   1555c:	str	r2, [sp, #36]	; 0x24
   15560:	str	r2, [sp, #40]	; 0x28
   15564:	str	r1, [sp, #44]	; 0x2c
   15568:	str	r1, [sp, #48]	; 0x30
   1556c:	str	r2, [sp, #56]	; 0x38
   15570:	str	r3, [sp, #60]	; 0x3c
   15574:	str	r1, [sp, #68]	; 0x44
   15578:	str	r1, [sp, #72]	; 0x48
   1557c:	b	15214 <__assert_fail@plt+0x4148>
   15580:	mov	r3, #0
   15584:	mov	r4, r8
   15588:	str	r3, [sp, #40]	; 0x28
   1558c:	str	r3, [sp, #44]	; 0x2c
   15590:	str	r3, [sp, #48]	; 0x30
   15594:	str	r8, [sp, #56]	; 0x38
   15598:	str	r3, [sp, #60]	; 0x3c
   1559c:	str	r3, [sp, #68]	; 0x44
   155a0:	mov	r3, #1
   155a4:	str	r3, [sp, #36]	; 0x24
   155a8:	str	r8, [sp, #72]	; 0x48
   155ac:	b	15214 <__assert_fail@plt+0x4148>
   155b0:	mov	r3, #1
   155b4:	mov	r2, #0
   155b8:	mov	r4, r2
   155bc:	mov	r8, #5
   155c0:	str	r3, [sp, #36]	; 0x24
   155c4:	str	r3, [sp, #40]	; 0x28
   155c8:	str	r3, [sp, #44]	; 0x2c
   155cc:	str	r2, [sp, #48]	; 0x30
   155d0:	str	r3, [sp, #56]	; 0x38
   155d4:	movw	r3, #46936	; 0xb758
   155d8:	movt	r3, #1
   155dc:	str	r3, [sp, #60]	; 0x3c
   155e0:	str	r2, [sp, #68]	; 0x44
   155e4:	str	r2, [sp, #72]	; 0x48
   155e8:	b	15214 <__assert_fail@plt+0x4148>
   155ec:	mov	r3, #0
   155f0:	mov	r2, #1
   155f4:	mov	r4, r3
   155f8:	str	r2, [sp, #36]	; 0x24
   155fc:	str	r2, [sp, #40]	; 0x28
   15600:	str	r3, [sp, #44]	; 0x2c
   15604:	str	r3, [sp, #48]	; 0x30
   15608:	str	r3, [sp, #56]	; 0x38
   1560c:	str	r3, [sp, #60]	; 0x3c
   15610:	str	r3, [sp, #68]	; 0x44
   15614:	str	r3, [sp, #72]	; 0x48
   15618:	b	15214 <__assert_fail@plt+0x4148>
   1561c:	mov	r2, #1
   15620:	mov	r3, #0
   15624:	mov	r4, r3
   15628:	str	r2, [sp, #36]	; 0x24
   1562c:	str	r2, [sp, #44]	; 0x2c
   15630:	str	r8, [sp, #56]	; 0x38
   15634:	str	r3, [sp, #68]	; 0x44
   15638:	b	15510 <__assert_fail@plt+0x4444>
   1563c:	mov	r3, #1
   15640:	mov	r2, #0
   15644:	mov	r4, r2
   15648:	mov	r8, #2
   1564c:	str	r3, [sp, #36]	; 0x24
   15650:	str	r3, [sp, #40]	; 0x28
   15654:	str	r3, [sp, #44]	; 0x2c
   15658:	str	r2, [sp, #48]	; 0x30
   1565c:	str	r3, [sp, #56]	; 0x38
   15660:	movw	r3, #46956	; 0xb76c
   15664:	movt	r3, #1
   15668:	str	r3, [sp, #60]	; 0x3c
   1566c:	str	r2, [sp, #68]	; 0x44
   15670:	str	r2, [sp, #72]	; 0x48
   15674:	b	15214 <__assert_fail@plt+0x4148>
   15678:	mov	r7, #0
   1567c:	ldr	r3, [sp, #28]
   15680:	cmn	r3, #1
   15684:	beq	1615c <__assert_fail@plt+0x5090>
   15688:	ldr	r3, [sp, #28]
   1568c:	subs	r2, r3, #1
   15690:	movne	r2, #1
   15694:	sub	r3, fp, #2
   15698:	cmp	r2, #0
   1569c:	clz	r3, r3
   156a0:	lsr	r3, r3, #5
   156a4:	bne	156b0 <__assert_fail@plt+0x45e4>
   156a8:	cmp	r9, #0
   156ac:	beq	15ebc <__assert_fail@plt+0x4df0>
   156b0:	mov	r6, #0
   156b4:	ldr	r2, [sp, #40]	; 0x28
   156b8:	eor	r2, r2, #1
   156bc:	orrs	r3, r3, r2
   156c0:	bne	15898 <__assert_fail@plt+0x47cc>
   156c4:	ldr	r2, [sp, #160]	; 0xa0
   156c8:	cmp	r2, #0
   156cc:	beq	156ec <__assert_fail@plt+0x4620>
   156d0:	ldr	r0, [sp, #160]	; 0xa0
   156d4:	ubfx	r1, r5, #5, #8
   156d8:	and	r2, r5, #31
   156dc:	ldr	r1, [r0, r1, lsl #2]
   156e0:	lsr	r2, r1, r2
   156e4:	tst	r2, #1
   156e8:	bne	156f4 <__assert_fail@plt+0x4628>
   156ec:	cmp	r7, #0
   156f0:	beq	15964 <__assert_fail@plt+0x4898>
   156f4:	ldr	r2, [sp, #44]	; 0x2c
   156f8:	sub	r3, fp, #2
   156fc:	clz	r3, r3
   15700:	lsr	r3, r3, #5
   15704:	cmp	r2, #0
   15708:	bne	164b0 <__assert_fail@plt+0x53e4>
   1570c:	ldr	r2, [sp, #48]	; 0x30
   15710:	eor	r2, r2, #1
   15714:	ands	r3, r3, r2
   15718:	beq	15750 <__assert_fail@plt+0x4684>
   1571c:	cmp	sl, r4
   15720:	str	r3, [sp, #48]	; 0x30
   15724:	movhi	r2, #39	; 0x27
   15728:	strbhi	r2, [r8, r4]
   1572c:	add	r2, r4, #1
   15730:	cmp	sl, r2
   15734:	movhi	r1, #36	; 0x24
   15738:	strbhi	r1, [r8, r2]
   1573c:	add	r2, r4, #2
   15740:	add	r4, r4, #3
   15744:	cmp	sl, r2
   15748:	movhi	r1, #39	; 0x27
   1574c:	strbhi	r1, [r8, r2]
   15750:	cmp	r4, sl
   15754:	add	r9, r9, #1
   15758:	movcc	r3, #92	; 0x5c
   1575c:	strbcc	r3, [r8, r4]
   15760:	add	r4, r4, #1
   15764:	cmp	r4, sl
   15768:	ldr	r3, [sp, #36]	; 0x24
   1576c:	strbcc	r5, [r8, r4]
   15770:	cmp	r6, #0
   15774:	add	r4, r4, #1
   15778:	moveq	r3, #0
   1577c:	str	r3, [sp, #36]	; 0x24
   15780:	ldr	r3, [sp, #28]
   15784:	cmn	r3, #1
   15788:	bne	15230 <__assert_fail@plt+0x4164>
   1578c:	ldr	r3, [sp, #32]
   15790:	ldrb	r6, [r3, r9]
   15794:	adds	r6, r6, #0
   15798:	movne	r6, #1
   1579c:	cmp	r6, #0
   157a0:	bne	15244 <__assert_fail@plt+0x4178>
   157a4:	str	fp, [sp, #152]	; 0x98
   157a8:	mov	fp, r8
   157ac:	cmp	r4, #0
   157b0:	ldr	r1, [sp, #44]	; 0x2c
   157b4:	movne	r3, #0
   157b8:	ldr	r8, [sp, #152]	; 0x98
   157bc:	sub	r2, r8, #2
   157c0:	clz	r2, r2
   157c4:	lsr	r2, r2, #5
   157c8:	andeq	r3, r2, r1
   157cc:	cmp	r3, #0
   157d0:	bne	1688c <__assert_fail@plt+0x57c0>
   157d4:	eor	r3, r1, #1
   157d8:	ands	r2, r2, r3
   157dc:	beq	167b8 <__assert_fail@plt+0x56ec>
   157e0:	ldr	r3, [sp, #68]	; 0x44
   157e4:	cmp	r3, #0
   157e8:	beq	167bc <__assert_fail@plt+0x56f0>
   157ec:	ldr	r3, [sp, #36]	; 0x24
   157f0:	cmp	r3, #0
   157f4:	bne	16848 <__assert_fail@plt+0x577c>
   157f8:	ldr	r3, [sp, #72]	; 0x48
   157fc:	adds	r3, r3, #0
   15800:	movne	r3, #1
   15804:	cmp	sl, #0
   15808:	movne	r3, #0
   1580c:	cmp	r3, #0
   15810:	ldreq	r2, [sp, #68]	; 0x44
   15814:	beq	167bc <__assert_fail@plt+0x56f0>
   15818:	ldr	r2, [sp, #72]	; 0x48
   1581c:	str	r3, [sp, #68]	; 0x44
   15820:	movw	r3, #46956	; 0xb76c
   15824:	movt	r3, #1
   15828:	mov	r1, #39	; 0x27
   1582c:	mov	r4, #1
   15830:	ldr	sl, [sp, #72]	; 0x48
   15834:	mov	r8, #2
   15838:	str	r3, [sp, #60]	; 0x3c
   1583c:	mov	r3, #0
   15840:	strb	r1, [fp]
   15844:	str	r3, [sp, #44]	; 0x2c
   15848:	str	r4, [sp, #56]	; 0x38
   1584c:	str	r2, [sp, #72]	; 0x48
   15850:	b	15214 <__assert_fail@plt+0x4148>
   15854:	mov	r7, #0
   15858:	cmp	fp, #2
   1585c:	beq	1613c <__assert_fail@plt+0x5070>
   15860:	ldr	r2, [sp, #40]	; 0x28
   15864:	ldr	r3, [sp, #56]	; 0x38
   15868:	ldr	r1, [sp, #44]	; 0x2c
   1586c:	cmp	r3, #0
   15870:	moveq	r3, #0
   15874:	andne	r3, r2, r1
   15878:	cmp	r3, #0
   1587c:	moveq	r5, #92	; 0x5c
   15880:	moveq	r3, r5
   15884:	bne	16148 <__assert_fail@plt+0x507c>
   15888:	ldr	r2, [sp, #40]	; 0x28
   1588c:	cmp	r2, #0
   15890:	bne	16584 <__assert_fail@plt+0x54b8>
   15894:	mov	r6, #0
   15898:	ldr	r3, [sp, #44]	; 0x2c
   1589c:	cmp	r3, #0
   158a0:	beq	16134 <__assert_fail@plt+0x5068>
   158a4:	mov	r3, #0
   158a8:	b	156c4 <__assert_fail@plt+0x45f8>
   158ac:	mov	r7, #0
   158b0:	cmp	fp, #2
   158b4:	beq	161ac <__assert_fail@plt+0x50e0>
   158b8:	cmp	fp, #5
   158bc:	beq	16170 <__assert_fail@plt+0x50a4>
   158c0:	sub	r3, fp, #2
   158c4:	mov	r6, #0
   158c8:	clz	r3, r3
   158cc:	mov	r5, #63	; 0x3f
   158d0:	lsr	r3, r3, #5
   158d4:	b	156b4 <__assert_fail@plt+0x45e8>
   158d8:	mov	r7, #0
   158dc:	cmp	fp, #2
   158e0:	movne	r3, #0
   158e4:	movne	r5, #39	; 0x27
   158e8:	strne	r6, [sp, #68]	; 0x44
   158ec:	bne	156b4 <__assert_fail@plt+0x45e8>
   158f0:	ldr	r3, [sp, #44]	; 0x2c
   158f4:	cmp	r3, #0
   158f8:	bne	165b4 <__assert_fail@plt+0x54e8>
   158fc:	ldr	r3, [sp, #72]	; 0x48
   15900:	cmp	sl, #0
   15904:	clz	r3, r3
   15908:	lsr	r3, r3, #5
   1590c:	moveq	r3, #0
   15910:	cmp	r3, #0
   15914:	bne	164e0 <__assert_fail@plt+0x5414>
   15918:	cmp	sl, r4
   1591c:	movhi	r3, #39	; 0x27
   15920:	strbhi	r3, [r8, r4]
   15924:	add	r3, r4, #1
   15928:	cmp	sl, r3
   1592c:	movhi	r2, #92	; 0x5c
   15930:	strbhi	r2, [r8, r3]
   15934:	add	r3, r4, #2
   15938:	cmp	sl, r3
   1593c:	bls	15948 <__assert_fail@plt+0x487c>
   15940:	mov	r2, #39	; 0x27
   15944:	strb	r2, [r8, r3]
   15948:	mov	r3, #0
   1594c:	cmp	r7, #0
   15950:	add	r4, r4, #3
   15954:	mov	r5, #39	; 0x27
   15958:	str	r3, [sp, #48]	; 0x30
   1595c:	str	r6, [sp, #68]	; 0x44
   15960:	bne	156f4 <__assert_fail@plt+0x4628>
   15964:	ldr	r2, [sp, #48]	; 0x30
   15968:	eor	r3, r3, #1
   1596c:	add	r9, r9, #1
   15970:	and	r3, r3, r2
   15974:	uxtb	r3, r3
   15978:	cmp	r3, #0
   1597c:	beq	15764 <__assert_fail@plt+0x4698>
   15980:	cmp	sl, r4
   15984:	movhi	r3, #39	; 0x27
   15988:	strbhi	r3, [r8, r4]
   1598c:	add	r3, r4, #1
   15990:	add	r4, r4, #2
   15994:	cmp	sl, r3
   15998:	movhi	r2, #39	; 0x27
   1599c:	strbhi	r2, [r8, r3]
   159a0:	mov	r3, #0
   159a4:	str	r3, [sp, #48]	; 0x30
   159a8:	b	15764 <__assert_fail@plt+0x4698>
   159ac:	mov	r3, #118	; 0x76
   159b0:	b	15888 <__assert_fail@plt+0x47bc>
   159b4:	mov	r3, #116	; 0x74
   159b8:	ldr	r2, [sp, #44]	; 0x2c
   159bc:	cmp	fp, #2
   159c0:	movne	r2, #0
   159c4:	andeq	r2, r2, #1
   159c8:	cmp	r2, #0
   159cc:	beq	15888 <__assert_fail@plt+0x47bc>
   159d0:	mov	fp, r8
   159d4:	mov	r8, #2
   159d8:	ldr	r3, [sp, #40]	; 0x28
   159dc:	cmp	r3, #0
   159e0:	movne	r8, #4
   159e4:	mov	lr, #0
   159e8:	mov	r0, fp
   159ec:	ldr	r2, [sp, #32]
   159f0:	ldr	r3, [sp, #156]	; 0x9c
   159f4:	ldr	r1, [sp, #164]	; 0xa4
   159f8:	bic	ip, r3, #2
   159fc:	ldr	r3, [sp, #28]
   15a00:	stm	sp, {r8, ip, lr}
   15a04:	ldr	ip, [sp, #168]	; 0xa8
   15a08:	str	r1, [sp, #12]
   15a0c:	mov	r1, sl
   15a10:	str	ip, [sp, #16]
   15a14:	bl	1512c <__assert_fail@plt+0x4060>
   15a18:	mov	r4, r0
   15a1c:	mov	r0, r4
   15a20:	add	sp, sp, #116	; 0x74
   15a24:	ldrd	r4, [sp]
   15a28:	ldrd	r6, [sp, #8]
   15a2c:	ldrd	r8, [sp, #16]
   15a30:	ldrd	sl, [sp, #24]
   15a34:	add	sp, sp, #32
   15a38:	pop	{pc}		; (ldr pc, [sp], #4)
   15a3c:	mov	r5, #102	; 0x66
   15a40:	ldr	r2, [sp, #44]	; 0x2c
   15a44:	sub	r3, fp, #2
   15a48:	clz	r3, r3
   15a4c:	lsr	r3, r3, #5
   15a50:	cmp	r2, #0
   15a54:	bne	164b0 <__assert_fail@plt+0x53e4>
   15a58:	mov	r6, r2
   15a5c:	b	15750 <__assert_fail@plt+0x4684>
   15a60:	mov	r5, #110	; 0x6e
   15a64:	mov	r6, #0
   15a68:	b	156f4 <__assert_fail@plt+0x4628>
   15a6c:	mov	r5, #98	; 0x62
   15a70:	b	15a40 <__assert_fail@plt+0x4974>
   15a74:	mov	r5, #97	; 0x61
   15a78:	b	15a40 <__assert_fail@plt+0x4974>
   15a7c:	mov	r7, #0
   15a80:	mov	r6, #0
   15a84:	b	158a4 <__assert_fail@plt+0x47d8>
   15a88:	mov	r5, #114	; 0x72
   15a8c:	b	15a64 <__assert_fail@plt+0x4998>
   15a90:	ldr	r3, [sp, #44]	; 0x2c
   15a94:	cmp	r3, #0
   15a98:	bne	16828 <__assert_fail@plt+0x575c>
   15a9c:	mov	r7, r3
   15aa0:	ldr	r3, [sp, #48]	; 0x30
   15aa4:	sub	r2, fp, #2
   15aa8:	clz	r2, r2
   15aac:	lsr	r2, r2, #5
   15ab0:	eor	r3, r3, #1
   15ab4:	ands	r3, r2, r3
   15ab8:	beq	164cc <__assert_fail@plt+0x5400>
   15abc:	cmp	sl, r4
   15ac0:	movhi	r1, #39	; 0x27
   15ac4:	strbhi	r1, [r8, r4]
   15ac8:	add	r1, r4, #1
   15acc:	cmp	sl, r1
   15ad0:	movhi	r0, #36	; 0x24
   15ad4:	strbhi	r0, [r8, r1]
   15ad8:	add	r1, r4, #2
   15adc:	cmp	sl, r1
   15ae0:	movhi	r0, #39	; 0x27
   15ae4:	strbhi	r0, [r8, r1]
   15ae8:	add	r1, r4, #3
   15aec:	cmp	sl, r1
   15af0:	bls	16524 <__assert_fail@plt+0x5458>
   15af4:	mov	r4, r1
   15af8:	mov	r1, #92	; 0x5c
   15afc:	mov	r0, r4
   15b00:	str	r3, [sp, #48]	; 0x30
   15b04:	strb	r1, [r8, r4]
   15b08:	cmp	fp, #2
   15b0c:	add	r4, r4, #1
   15b10:	beq	16574 <__assert_fail@plt+0x54a8>
   15b14:	ldr	r1, [sp, #28]
   15b18:	add	r3, r9, #1
   15b1c:	cmp	r3, r1
   15b20:	bcs	15b38 <__assert_fail@plt+0x4a6c>
   15b24:	ldr	r1, [sp, #32]
   15b28:	ldrb	r3, [r1, r3]
   15b2c:	sub	r3, r3, #48	; 0x30
   15b30:	cmp	r3, #9
   15b34:	bls	1658c <__assert_fail@plt+0x54c0>
   15b38:	mov	r5, #48	; 0x30
   15b3c:	ldr	r3, [sp, #40]	; 0x28
   15b40:	eor	r3, r3, #1
   15b44:	orrs	r2, r2, r3
   15b48:	mov	r3, r6
   15b4c:	moveq	r6, r2
   15b50:	beq	156c4 <__assert_fail@plt+0x45f8>
   15b54:	mov	r6, #0
   15b58:	b	156ec <__assert_fail@plt+0x4620>
   15b5c:	cmp	r9, #0
   15b60:	mov	r2, r7
   15b64:	bne	16104 <__assert_fail@plt+0x5038>
   15b68:	mov	r6, r7
   15b6c:	mov	r3, r9
   15b70:	mov	r7, r2
   15b74:	b	156b4 <__assert_fail@plt+0x45e8>
   15b78:	mov	r2, r7
   15b7c:	mov	r6, r7
   15b80:	mov	r3, #0
   15b84:	mov	r7, r2
   15b88:	mov	r5, #32
   15b8c:	b	156b4 <__assert_fail@plt+0x45e8>
   15b90:	mov	r6, r7
   15b94:	b	158a4 <__assert_fail@plt+0x47d8>
   15b98:	mov	r7, #0
   15b9c:	ldr	r3, [sp, #64]	; 0x40
   15ba0:	cmp	r3, #1
   15ba4:	bne	161c4 <__assert_fail@plt+0x50f8>
   15ba8:	bl	10fa0 <__ctype_b_loc@plt>
   15bac:	ldr	r2, [r0]
   15bb0:	sxth	r3, r5
   15bb4:	lsl	r3, r3, #1
   15bb8:	ldr	r1, [sp, #64]	; 0x40
   15bbc:	ldrh	r3, [r2, r3]
   15bc0:	mov	ip, r1
   15bc4:	and	r3, r3, #16384	; 0x4000
   15bc8:	cmp	r3, #0
   15bcc:	ldr	r3, [sp, #40]	; 0x28
   15bd0:	movne	r6, #1
   15bd4:	moveq	r6, #0
   15bd8:	movne	r2, #0
   15bdc:	andeq	r2, r3, #1
   15be0:	cmp	r2, #0
   15be4:	bne	1650c <__assert_fail@plt+0x5440>
   15be8:	sub	r3, fp, #2
   15bec:	clz	r3, r3
   15bf0:	lsr	r3, r3, #5
   15bf4:	b	156b4 <__assert_fail@plt+0x45e8>
   15bf8:	cmp	r4, #0
   15bfc:	bne	1689c <__assert_fail@plt+0x57d0>
   15c00:	str	r4, [sp, #40]	; 0x28
   15c04:	cmp	sl, #0
   15c08:	bne	168cc <__assert_fail@plt+0x5800>
   15c0c:	mov	r3, #1
   15c10:	movw	r2, #46956	; 0xb76c
   15c14:	movt	r2, #1
   15c18:	mov	r4, r3
   15c1c:	mov	r8, #2
   15c20:	str	r3, [sp, #36]	; 0x24
   15c24:	str	sl, [sp, #44]	; 0x2c
   15c28:	str	sl, [sp, #48]	; 0x30
   15c2c:	str	r3, [sp, #56]	; 0x38
   15c30:	str	r2, [sp, #60]	; 0x3c
   15c34:	str	sl, [sp, #68]	; 0x44
   15c38:	str	sl, [sp, #72]	; 0x48
   15c3c:	b	15214 <__assert_fail@plt+0x4148>
   15c40:	ldr	r3, [sp, #32]
   15c44:	ldrb	r5, [r3, r9]
   15c48:	cmp	r5, #126	; 0x7e
   15c4c:	ldrls	pc, [pc, r5, lsl #2]
   15c50:	b	15b9c <__assert_fail@plt+0x4ad0>
   15c54:	andeq	r5, r1, r8, ror lr
   15c58:	muleq	r1, ip, fp
   15c5c:	muleq	r1, ip, fp
   15c60:	muleq	r1, ip, fp
   15c64:	muleq	r1, ip, fp
   15c68:	muleq	r1, ip, fp
   15c6c:	muleq	r1, ip, fp
   15c70:	andeq	r5, r1, r0, ror lr
   15c74:	andeq	r5, r1, r8, ror #28
   15c78:			; <UNDEFINED> instruction: 0x000159b4
   15c7c:	andeq	r5, r1, r0, ror #28
   15c80:	andeq	r5, r1, ip, lsr #19
   15c84:	andeq	r5, r1, r8, asr lr
   15c88:	andeq	r5, r1, r0, asr lr
   15c8c:	muleq	r1, ip, fp
   15c90:	muleq	r1, ip, fp
   15c94:	muleq	r1, ip, fp
   15c98:	muleq	r1, ip, fp
   15c9c:	muleq	r1, ip, fp
   15ca0:	muleq	r1, ip, fp
   15ca4:	muleq	r1, ip, fp
   15ca8:	muleq	r1, ip, fp
   15cac:	muleq	r1, ip, fp
   15cb0:	muleq	r1, ip, fp
   15cb4:	muleq	r1, ip, fp
   15cb8:	muleq	r1, ip, fp
   15cbc:	muleq	r1, ip, fp
   15cc0:	muleq	r1, ip, fp
   15cc4:	muleq	r1, ip, fp
   15cc8:	muleq	r1, ip, fp
   15ccc:	muleq	r1, ip, fp
   15cd0:	muleq	r1, ip, fp
   15cd4:	andeq	r5, r1, ip, asr #29
   15cd8:	andeq	r5, r1, ip, lsr #29
   15cdc:	andeq	r5, r1, ip, lsr #29
   15ce0:	muleq	r1, ip, lr
   15ce4:	andeq	r5, r1, ip, lsr #29
   15ce8:	andeq	r5, r1, r8, ror #23
   15cec:	andeq	r5, r1, ip, lsr #29
   15cf0:	ldrdeq	r5, [r1], -ip
   15cf4:	andeq	r5, r1, ip, lsr #29
   15cf8:	andeq	r5, r1, ip, lsr #29
   15cfc:	andeq	r5, r1, ip, lsr #29
   15d00:	andeq	r5, r1, r8, ror #23
   15d04:	andeq	r5, r1, r8, ror #23
   15d08:	andeq	r5, r1, r8, ror #23
   15d0c:	andeq	r5, r1, r8, ror #23
   15d10:	andeq	r5, r1, r8, ror #23
   15d14:	andeq	r5, r1, r8, ror #23
   15d18:	andeq	r5, r1, r8, ror #23
   15d1c:	andeq	r5, r1, r8, ror #23
   15d20:	andeq	r5, r1, r8, ror #23
   15d24:	andeq	r5, r1, r8, ror #23
   15d28:	andeq	r5, r1, r8, ror #23
   15d2c:	andeq	r5, r1, r8, ror #23
   15d30:	andeq	r5, r1, r8, ror #23
   15d34:	andeq	r5, r1, r8, ror #23
   15d38:	andeq	r5, r1, r8, ror #23
   15d3c:	andeq	r5, r1, r8, ror #23
   15d40:	andeq	r5, r1, ip, lsr #29
   15d44:	andeq	r5, r1, ip, lsr #29
   15d48:	andeq	r5, r1, ip, lsr #29
   15d4c:	andeq	r5, r1, ip, lsr #29
   15d50:			; <UNDEFINED> instruction: 0x000158b0
   15d54:	muleq	r1, ip, fp
   15d58:	andeq	r5, r1, r8, ror #23
   15d5c:	andeq	r5, r1, r8, ror #23
   15d60:	andeq	r5, r1, r8, ror #23
   15d64:	andeq	r5, r1, r8, ror #23
   15d68:	andeq	r5, r1, r8, ror #23
   15d6c:	andeq	r5, r1, r8, ror #23
   15d70:	andeq	r5, r1, r8, ror #23
   15d74:	andeq	r5, r1, r8, ror #23
   15d78:	andeq	r5, r1, r8, ror #23
   15d7c:	andeq	r5, r1, r8, ror #23
   15d80:	andeq	r5, r1, r8, ror #23
   15d84:	andeq	r5, r1, r8, ror #23
   15d88:	andeq	r5, r1, r8, ror #23
   15d8c:	andeq	r5, r1, r8, ror #23
   15d90:	andeq	r5, r1, r8, ror #23
   15d94:	andeq	r5, r1, r8, ror #23
   15d98:	andeq	r5, r1, r8, ror #23
   15d9c:	andeq	r5, r1, r8, ror #23
   15da0:	andeq	r5, r1, r8, ror #23
   15da4:	andeq	r5, r1, r8, ror #23
   15da8:	andeq	r5, r1, r8, ror #23
   15dac:	andeq	r5, r1, r8, ror #23
   15db0:	andeq	r5, r1, r8, ror #23
   15db4:	andeq	r5, r1, r8, ror #23
   15db8:	andeq	r5, r1, r8, ror #23
   15dbc:	andeq	r5, r1, r8, ror #23
   15dc0:	andeq	r5, r1, ip, lsr #29
   15dc4:	andeq	r5, r1, r8, asr r8
   15dc8:	andeq	r5, r1, r8, ror #23
   15dcc:	andeq	r5, r1, ip, lsr #29
   15dd0:	andeq	r5, r1, r8, ror #23
   15dd4:	andeq	r5, r1, ip, lsr #29
   15dd8:	andeq	r5, r1, r8, ror #23
   15ddc:	andeq	r5, r1, r8, ror #23
   15de0:	andeq	r5, r1, r8, ror #23
   15de4:	andeq	r5, r1, r8, ror #23
   15de8:	andeq	r5, r1, r8, ror #23
   15dec:	andeq	r5, r1, r8, ror #23
   15df0:	andeq	r5, r1, r8, ror #23
   15df4:	andeq	r5, r1, r8, ror #23
   15df8:	andeq	r5, r1, r8, ror #23
   15dfc:	andeq	r5, r1, r8, ror #23
   15e00:	andeq	r5, r1, r8, ror #23
   15e04:	andeq	r5, r1, r8, ror #23
   15e08:	andeq	r5, r1, r8, ror #23
   15e0c:	andeq	r5, r1, r8, ror #23
   15e10:	andeq	r5, r1, r8, ror #23
   15e14:	andeq	r5, r1, r8, ror #23
   15e18:	andeq	r5, r1, r8, ror #23
   15e1c:	andeq	r5, r1, r8, ror #23
   15e20:	andeq	r5, r1, r8, ror #23
   15e24:	andeq	r5, r1, r8, ror #23
   15e28:	andeq	r5, r1, r8, ror #23
   15e2c:	andeq	r5, r1, r8, ror #23
   15e30:	andeq	r5, r1, r8, ror #23
   15e34:	andeq	r5, r1, r8, ror #23
   15e38:	andeq	r5, r1, r8, ror #23
   15e3c:	andeq	r5, r1, r8, ror #23
   15e40:	andeq	r5, r1, ip, ror r6
   15e44:	andeq	r5, r1, ip, lsr #29
   15e48:	andeq	r5, r1, ip, ror r6
   15e4c:	muleq	r1, ip, lr
   15e50:	mov	r3, #114	; 0x72
   15e54:	b	159b8 <__assert_fail@plt+0x48ec>
   15e58:	mov	r3, #102	; 0x66
   15e5c:	b	15888 <__assert_fail@plt+0x47bc>
   15e60:	mov	r3, #110	; 0x6e
   15e64:	b	159b8 <__assert_fail@plt+0x48ec>
   15e68:	mov	r3, #98	; 0x62
   15e6c:	b	15888 <__assert_fail@plt+0x47bc>
   15e70:	mov	r3, #97	; 0x61
   15e74:	b	15888 <__assert_fail@plt+0x47bc>
   15e78:	ldr	r3, [sp, #40]	; 0x28
   15e7c:	cmp	r3, #0
   15e80:	bne	15a90 <__assert_fail@plt+0x49c4>
   15e84:	ldr	r3, [sp, #156]	; 0x9c
   15e88:	tst	r3, #1
   15e8c:	addne	r9, r9, #1
   15e90:	bne	15224 <__assert_fail@plt+0x4158>
   15e94:	ldr	r7, [sp, #40]	; 0x28
   15e98:	b	15894 <__assert_fail@plt+0x47c8>
   15e9c:	sub	r3, fp, #2
   15ea0:	clz	r3, r3
   15ea4:	lsr	r3, r3, #5
   15ea8:	b	156a8 <__assert_fail@plt+0x45dc>
   15eac:	sub	r3, fp, #2
   15eb0:	mov	r6, #0
   15eb4:	clz	r3, r3
   15eb8:	lsr	r3, r3, #5
   15ebc:	ldr	r2, [sp, #44]	; 0x2c
   15ec0:	tst	r2, r3
   15ec4:	beq	156b4 <__assert_fail@plt+0x45e8>
   15ec8:	b	159d0 <__assert_fail@plt+0x4904>
   15ecc:	sub	r3, fp, #2
   15ed0:	clz	r3, r3
   15ed4:	lsr	r3, r3, #5
   15ed8:	b	15ebc <__assert_fail@plt+0x4df0>
   15edc:	ldr	r3, [sp, #52]	; 0x34
   15ee0:	ldrb	r5, [r3]
   15ee4:	cmp	r5, #126	; 0x7e
   15ee8:	ldrls	pc, [pc, r5, lsl #2]
   15eec:	b	15b98 <__assert_fail@plt+0x4acc>
   15ef0:	muleq	r1, r0, sl
   15ef4:	muleq	r1, r8, fp
   15ef8:	muleq	r1, r8, fp
   15efc:	muleq	r1, r8, fp
   15f00:	muleq	r1, r8, fp
   15f04:	muleq	r1, r8, fp
   15f08:	muleq	r1, r8, fp
   15f0c:	andeq	r5, r1, r4, ror sl
   15f10:	andeq	r5, r1, ip, ror #20
   15f14:	andeq	r6, r1, r8, lsr #2
   15f18:	andeq	r5, r1, r0, ror #20
   15f1c:	andeq	r6, r1, ip, lsl r1
   15f20:	andeq	r5, r1, ip, lsr sl
   15f24:	andeq	r5, r1, r8, lsl #21
   15f28:	muleq	r1, r8, fp
   15f2c:	muleq	r1, r8, fp
   15f30:	muleq	r1, r8, fp
   15f34:	muleq	r1, r8, fp
   15f38:	muleq	r1, r8, fp
   15f3c:	muleq	r1, r8, fp
   15f40:	muleq	r1, r8, fp
   15f44:	muleq	r1, r8, fp
   15f48:	muleq	r1, r8, fp
   15f4c:	muleq	r1, r8, fp
   15f50:	muleq	r1, r8, fp
   15f54:	muleq	r1, r8, fp
   15f58:	muleq	r1, r8, fp
   15f5c:	muleq	r1, r8, fp
   15f60:	muleq	r1, r8, fp
   15f64:	muleq	r1, r8, fp
   15f68:	muleq	r1, r8, fp
   15f6c:	muleq	r1, r8, fp
   15f70:	andeq	r6, r1, r4, lsl r1
   15f74:	andeq	r5, r1, ip, ror sl
   15f78:	andeq	r5, r1, ip, ror sl
   15f7c:	strdeq	r6, [r1], -r8
   15f80:	andeq	r5, r1, ip, ror sl
   15f84:	andeq	r6, r1, ip, ror #1
   15f88:	andeq	r5, r1, ip, ror sl
   15f8c:	ldrdeq	r5, [r1], -r8
   15f90:	andeq	r5, r1, ip, ror sl
   15f94:	andeq	r5, r1, ip, ror sl
   15f98:	andeq	r5, r1, ip, ror sl
   15f9c:	andeq	r6, r1, ip, ror #1
   15fa0:	andeq	r6, r1, ip, ror #1
   15fa4:	andeq	r6, r1, ip, ror #1
   15fa8:	andeq	r6, r1, ip, ror #1
   15fac:	andeq	r6, r1, ip, ror #1
   15fb0:	andeq	r6, r1, ip, ror #1
   15fb4:	andeq	r6, r1, ip, ror #1
   15fb8:	andeq	r6, r1, ip, ror #1
   15fbc:	andeq	r6, r1, ip, ror #1
   15fc0:	andeq	r6, r1, ip, ror #1
   15fc4:	andeq	r6, r1, ip, ror #1
   15fc8:	andeq	r6, r1, ip, ror #1
   15fcc:	andeq	r6, r1, ip, ror #1
   15fd0:	andeq	r6, r1, ip, ror #1
   15fd4:	andeq	r6, r1, ip, ror #1
   15fd8:	andeq	r6, r1, ip, ror #1
   15fdc:	andeq	r5, r1, ip, ror sl
   15fe0:	andeq	r5, r1, ip, ror sl
   15fe4:	andeq	r5, r1, ip, ror sl
   15fe8:	andeq	r5, r1, ip, ror sl
   15fec:	andeq	r5, r1, ip, lsr #17
   15ff0:	muleq	r1, r8, fp
   15ff4:	andeq	r6, r1, ip, ror #1
   15ff8:	andeq	r6, r1, ip, ror #1
   15ffc:	andeq	r6, r1, ip, ror #1
   16000:	andeq	r6, r1, ip, ror #1
   16004:	andeq	r6, r1, ip, ror #1
   16008:	andeq	r6, r1, ip, ror #1
   1600c:	andeq	r6, r1, ip, ror #1
   16010:	andeq	r6, r1, ip, ror #1
   16014:	andeq	r6, r1, ip, ror #1
   16018:	andeq	r6, r1, ip, ror #1
   1601c:	andeq	r6, r1, ip, ror #1
   16020:	andeq	r6, r1, ip, ror #1
   16024:	andeq	r6, r1, ip, ror #1
   16028:	andeq	r6, r1, ip, ror #1
   1602c:	andeq	r6, r1, ip, ror #1
   16030:	andeq	r6, r1, ip, ror #1
   16034:	andeq	r6, r1, ip, ror #1
   16038:	andeq	r6, r1, ip, ror #1
   1603c:	andeq	r6, r1, ip, ror #1
   16040:	andeq	r6, r1, ip, ror #1
   16044:	andeq	r6, r1, ip, ror #1
   16048:	andeq	r6, r1, ip, ror #1
   1604c:	andeq	r6, r1, ip, ror #1
   16050:	andeq	r6, r1, ip, ror #1
   16054:	andeq	r6, r1, ip, ror #1
   16058:	andeq	r6, r1, ip, ror #1
   1605c:	andeq	r5, r1, ip, ror sl
   16060:	andeq	r5, r1, r4, asr r8
   16064:	andeq	r6, r1, ip, ror #1
   16068:	andeq	r5, r1, ip, ror sl
   1606c:	andeq	r6, r1, ip, ror #1
   16070:	andeq	r5, r1, ip, ror sl
   16074:	andeq	r6, r1, ip, ror #1
   16078:	andeq	r6, r1, ip, ror #1
   1607c:	andeq	r6, r1, ip, ror #1
   16080:	andeq	r6, r1, ip, ror #1
   16084:	andeq	r6, r1, ip, ror #1
   16088:	andeq	r6, r1, ip, ror #1
   1608c:	andeq	r6, r1, ip, ror #1
   16090:	andeq	r6, r1, ip, ror #1
   16094:	andeq	r6, r1, ip, ror #1
   16098:	andeq	r6, r1, ip, ror #1
   1609c:	andeq	r6, r1, ip, ror #1
   160a0:	andeq	r6, r1, ip, ror #1
   160a4:	andeq	r6, r1, ip, ror #1
   160a8:	andeq	r6, r1, ip, ror #1
   160ac:	andeq	r6, r1, ip, ror #1
   160b0:	andeq	r6, r1, ip, ror #1
   160b4:	andeq	r6, r1, ip, ror #1
   160b8:	andeq	r6, r1, ip, ror #1
   160bc:	andeq	r6, r1, ip, ror #1
   160c0:	andeq	r6, r1, ip, ror #1
   160c4:	andeq	r6, r1, ip, ror #1
   160c8:	andeq	r6, r1, ip, ror #1
   160cc:	andeq	r6, r1, ip, ror #1
   160d0:	andeq	r6, r1, ip, ror #1
   160d4:	andeq	r6, r1, ip, ror #1
   160d8:	andeq	r6, r1, ip, ror #1
   160dc:	andeq	r5, r1, r8, ror r6
   160e0:	andeq	r5, r1, ip, ror sl
   160e4:	andeq	r5, r1, r8, ror r6
   160e8:	strdeq	r6, [r1], -r8
   160ec:	mov	r6, r7
   160f0:	mov	r7, #0
   160f4:	b	158a4 <__assert_fail@plt+0x47d8>
   160f8:	cmp	r9, #0
   160fc:	mov	r2, #0
   16100:	beq	15b68 <__assert_fail@plt+0x4a9c>
   16104:	mov	r6, #0
   16108:	mov	r7, r2
   1610c:	mov	r3, r6
   16110:	b	156c4 <__assert_fail@plt+0x45f8>
   16114:	mov	r2, #0
   16118:	b	15b7c <__assert_fail@plt+0x4ab0>
   1611c:	mov	r7, #0
   16120:	mov	r3, #118	; 0x76
   16124:	b	15888 <__assert_fail@plt+0x47bc>
   16128:	mov	r7, #0
   1612c:	mov	r3, #116	; 0x74
   16130:	b	159b8 <__assert_fail@plt+0x48ec>
   16134:	ldr	r3, [sp, #44]	; 0x2c
   16138:	b	156ec <__assert_fail@plt+0x4620>
   1613c:	ldr	r3, [sp, #44]	; 0x2c
   16140:	cmp	r3, #0
   16144:	bne	165b4 <__assert_fail@plt+0x54e8>
   16148:	add	r9, r9, #1
   1614c:	mov	r6, #0
   16150:	ldr	r3, [sp, #48]	; 0x30
   16154:	mov	r5, #92	; 0x5c
   16158:	b	15978 <__assert_fail@plt+0x48ac>
   1615c:	ldr	r3, [sp, #32]
   16160:	ldrb	r2, [r3, #1]
   16164:	adds	r2, r2, #0
   16168:	movne	r2, #1
   1616c:	b	15694 <__assert_fail@plt+0x45c8>
   16170:	ldr	r3, [sp, #156]	; 0x9c
   16174:	ands	r3, r3, #4
   16178:	beq	161a0 <__assert_fail@plt+0x50d4>
   1617c:	ldr	r2, [sp, #28]
   16180:	add	r3, r9, #2
   16184:	cmp	r3, r2
   16188:	bcs	1619c <__assert_fail@plt+0x50d0>
   1618c:	ldr	r2, [sp, #52]	; 0x34
   16190:	ldrb	r5, [r2, #1]
   16194:	cmp	r5, #63	; 0x3f
   16198:	beq	16618 <__assert_fail@plt+0x554c>
   1619c:	mov	r3, #0
   161a0:	mov	r5, #63	; 0x3f
   161a4:	mov	r6, r3
   161a8:	b	156b4 <__assert_fail@plt+0x45e8>
   161ac:	ldr	r3, [sp, #44]	; 0x2c
   161b0:	cmp	r3, #0
   161b4:	bne	165b4 <__assert_fail@plt+0x54e8>
   161b8:	mov	r6, r3
   161bc:	mov	r5, #63	; 0x3f
   161c0:	b	156ec <__assert_fail@plt+0x4620>
   161c4:	ldr	r1, [sp, #28]
   161c8:	mov	r2, #0
   161cc:	mov	r3, #0
   161d0:	strd	r2, [sp, #104]	; 0x68
   161d4:	cmn	r1, #1
   161d8:	bne	161e8 <__assert_fail@plt+0x511c>
   161dc:	ldr	r0, [sp, #32]
   161e0:	bl	10fb8 <strlen@plt>
   161e4:	str	r0, [sp, #28]
   161e8:	str	r8, [sp, #76]	; 0x4c
   161ec:	mov	r3, #0
   161f0:	str	sl, [sp, #80]	; 0x50
   161f4:	ldr	sl, [sp, #32]
   161f8:	str	r5, [sp, #84]	; 0x54
   161fc:	mov	r5, r3
   16200:	ldr	r8, [sp, #44]	; 0x2c
   16204:	str	r7, [sp, #88]	; 0x58
   16208:	str	r4, [sp, #92]	; 0x5c
   1620c:	ldr	r2, [sp, #28]
   16210:	add	r4, r9, r5
   16214:	add	r3, sp, #104	; 0x68
   16218:	add	r7, sl, r4
   1621c:	add	r0, sp, #100	; 0x64
   16220:	mov	r1, r7
   16224:	sub	r2, r2, r4
   16228:	bl	19000 <__assert_fail@plt+0x7f34>
   1622c:	subs	r1, r0, #0
   16230:	beq	1627c <__assert_fail@plt+0x51b0>
   16234:	cmn	r1, #1
   16238:	beq	165f4 <__assert_fail@plt+0x5528>
   1623c:	cmn	r1, #2
   16240:	beq	16714 <__assert_fail@plt+0x5648>
   16244:	cmp	fp, #2
   16248:	movne	r3, #0
   1624c:	andeq	r3, r8, #1
   16250:	cmp	r3, #0
   16254:	bne	163e0 <__assert_fail@plt+0x5314>
   16258:	ldr	r0, [sp, #100]	; 0x64
   1625c:	add	r5, r5, r1
   16260:	bl	10eec <iswprint@plt>
   16264:	cmp	r0, #0
   16268:	add	r0, sp, #104	; 0x68
   1626c:	moveq	r6, #0
   16270:	bl	10ea4 <mbsinit@plt>
   16274:	cmp	r0, #0
   16278:	beq	1620c <__assert_fail@plt+0x5140>
   1627c:	ldr	r3, [sp, #40]	; 0x28
   16280:	mov	ip, r5
   16284:	eor	r2, r6, #1
   16288:	ldr	r8, [sp, #76]	; 0x4c
   1628c:	ldr	sl, [sp, #80]	; 0x50
   16290:	and	r2, r2, r3
   16294:	ldr	r5, [sp, #84]	; 0x54
   16298:	ldr	r7, [sp, #88]	; 0x58
   1629c:	ldr	r4, [sp, #92]	; 0x5c
   162a0:	cmp	ip, #1
   162a4:	bls	15be0 <__assert_fail@plt+0x4b14>
   162a8:	add	r1, ip, r9
   162ac:	mov	r0, #39	; 0x27
   162b0:	ldr	lr, [sp, #52]	; 0x34
   162b4:	mov	ip, #0
   162b8:	str	r6, [sp, #52]	; 0x34
   162bc:	ldr	r6, [sp, #48]	; 0x30
   162c0:	b	1637c <__assert_fail@plt+0x52b0>
   162c4:	ldr	ip, [sp, #44]	; 0x2c
   162c8:	sub	r3, fp, #2
   162cc:	clz	r3, r3
   162d0:	lsr	r3, r3, #5
   162d4:	cmp	ip, #0
   162d8:	bne	164ec <__assert_fail@plt+0x5420>
   162dc:	eor	ip, r6, #1
   162e0:	ands	r3, r3, ip
   162e4:	beq	16314 <__assert_fail@plt+0x5248>
   162e8:	cmp	sl, r4
   162ec:	add	ip, r4, #1
   162f0:	strbhi	r0, [r8, r4]
   162f4:	cmp	sl, ip
   162f8:	movhi	r6, #36	; 0x24
   162fc:	strbhi	r6, [r8, ip]
   16300:	add	ip, r4, #2
   16304:	mov	r6, r3
   16308:	cmp	sl, ip
   1630c:	add	r4, r4, #3
   16310:	strbhi	r0, [r8, ip]
   16314:	cmp	sl, r4
   16318:	movhi	r3, #92	; 0x5c
   1631c:	strbhi	r3, [r8, r4]
   16320:	add	r3, r4, #1
   16324:	cmp	sl, r3
   16328:	bls	16338 <__assert_fail@plt+0x526c>
   1632c:	lsr	ip, r5, #6
   16330:	add	ip, ip, #48	; 0x30
   16334:	strb	ip, [r8, r3]
   16338:	add	r3, r4, #2
   1633c:	cmp	sl, r3
   16340:	bls	16350 <__assert_fail@plt+0x5284>
   16344:	ubfx	ip, r5, #3, #3
   16348:	add	ip, ip, #48	; 0x30
   1634c:	strb	ip, [r8, r3]
   16350:	add	r9, r9, #1
   16354:	and	r5, r5, #7
   16358:	cmp	r9, r1
   1635c:	add	r5, r5, #48	; 0x30
   16360:	add	r4, r4, #3
   16364:	bcs	16518 <__assert_fail@plt+0x544c>
   16368:	mov	ip, r2
   1636c:	cmp	sl, r4
   16370:	strbhi	r5, [r8, r4]
   16374:	add	r4, r4, #1
   16378:	ldrb	r5, [lr, #1]!
   1637c:	cmp	r2, #0
   16380:	bne	162c4 <__assert_fail@plt+0x51f8>
   16384:	eor	r3, ip, #1
   16388:	cmp	r7, #0
   1638c:	and	r3, r3, r6
   16390:	uxtb	r3, r3
   16394:	beq	163a8 <__assert_fail@plt+0x52dc>
   16398:	cmp	sl, r4
   1639c:	movhi	r7, #92	; 0x5c
   163a0:	strbhi	r7, [r8, r4]
   163a4:	add	r4, r4, #1
   163a8:	add	r9, r9, #1
   163ac:	cmp	r9, r1
   163b0:	bcs	16500 <__assert_fail@plt+0x5434>
   163b4:	cmp	r3, #0
   163b8:	beq	16538 <__assert_fail@plt+0x546c>
   163bc:	cmp	sl, r4
   163c0:	add	r3, r4, #1
   163c4:	mov	r7, #0
   163c8:	strbhi	r0, [r8, r4]
   163cc:	cmp	sl, r3
   163d0:	add	r4, r4, #2
   163d4:	mov	r6, r7
   163d8:	strbhi	r0, [r8, r3]
   163dc:	b	1636c <__assert_fail@plt+0x52a0>
   163e0:	cmp	r1, #1
   163e4:	beq	16258 <__assert_fail@plt+0x518c>
   163e8:	add	r2, r4, #1
   163ec:	add	r3, sl, r1
   163f0:	add	r2, sl, r2
   163f4:	add	r4, r3, r4
   163f8:	ldrb	r3, [r2], #1
   163fc:	sub	r3, r3, #91	; 0x5b
   16400:	cmp	r3, #33	; 0x21
   16404:	ldrls	pc, [pc, r3, lsl #2]
   16408:	b	16494 <__assert_fail@plt+0x53c8>
   1640c:	andeq	r6, r1, r0, lsr #9
   16410:	andeq	r6, r1, r0, lsr #9
   16414:	muleq	r1, r4, r4
   16418:	andeq	r6, r1, r0, lsr #9
   1641c:	muleq	r1, r4, r4
   16420:	andeq	r6, r1, r0, lsr #9
   16424:	muleq	r1, r4, r4
   16428:	muleq	r1, r4, r4
   1642c:	muleq	r1, r4, r4
   16430:	muleq	r1, r4, r4
   16434:	muleq	r1, r4, r4
   16438:	muleq	r1, r4, r4
   1643c:	muleq	r1, r4, r4
   16440:	muleq	r1, r4, r4
   16444:	muleq	r1, r4, r4
   16448:	muleq	r1, r4, r4
   1644c:	muleq	r1, r4, r4
   16450:	muleq	r1, r4, r4
   16454:	muleq	r1, r4, r4
   16458:	muleq	r1, r4, r4
   1645c:	muleq	r1, r4, r4
   16460:	muleq	r1, r4, r4
   16464:	muleq	r1, r4, r4
   16468:	muleq	r1, r4, r4
   1646c:	muleq	r1, r4, r4
   16470:	muleq	r1, r4, r4
   16474:	muleq	r1, r4, r4
   16478:	muleq	r1, r4, r4
   1647c:	muleq	r1, r4, r4
   16480:	muleq	r1, r4, r4
   16484:	muleq	r1, r4, r4
   16488:	muleq	r1, r4, r4
   1648c:	muleq	r1, r4, r4
   16490:	andeq	r6, r1, r0, lsr #9
   16494:	cmp	r4, r2
   16498:	bne	163f8 <__assert_fail@plt+0x532c>
   1649c:	b	16258 <__assert_fail@plt+0x518c>
   164a0:	mov	r8, #2
   164a4:	ldr	fp, [sp, #76]	; 0x4c
   164a8:	ldr	sl, [sp, #80]	; 0x50
   164ac:	b	159d8 <__assert_fail@plt+0x490c>
   164b0:	ldr	r2, [sp, #40]	; 0x28
   164b4:	str	fp, [sp, #152]	; 0x98
   164b8:	mov	fp, r8
   164bc:	ldr	r8, [sp, #152]	; 0x98
   164c0:	and	r2, r2, r3
   164c4:	str	r2, [sp, #40]	; 0x28
   164c8:	b	159d8 <__assert_fail@plt+0x490c>
   164cc:	cmp	sl, r4
   164d0:	movls	r0, r4
   164d4:	bls	15b08 <__assert_fail@plt+0x4a3c>
   164d8:	ldr	r3, [sp, #48]	; 0x30
   164dc:	b	15af8 <__assert_fail@plt+0x4a2c>
   164e0:	str	sl, [sp, #72]	; 0x48
   164e4:	ldr	sl, [sp, #44]	; 0x2c
   164e8:	b	15948 <__assert_fail@plt+0x487c>
   164ec:	str	r3, [sp, #40]	; 0x28
   164f0:	str	fp, [sp, #152]	; 0x98
   164f4:	mov	fp, r8
   164f8:	ldr	r8, [sp, #152]	; 0x98
   164fc:	b	159d8 <__assert_fail@plt+0x490c>
   16500:	str	r6, [sp, #48]	; 0x30
   16504:	ldr	r6, [sp, #52]	; 0x34
   16508:	b	15978 <__assert_fail@plt+0x48ac>
   1650c:	mov	r6, #0
   16510:	ldr	r2, [sp, #40]	; 0x28
   16514:	b	162a8 <__assert_fail@plt+0x51dc>
   16518:	str	r6, [sp, #48]	; 0x30
   1651c:	ldr	r6, [sp, #52]	; 0x34
   16520:	b	15764 <__assert_fail@plt+0x4698>
   16524:	add	r4, r4, #4
   16528:	mov	r6, #0
   1652c:	str	r3, [sp, #48]	; 0x30
   16530:	mov	r5, #48	; 0x30
   16534:	b	156ec <__assert_fail@plt+0x4620>
   16538:	mov	r7, r3
   1653c:	b	1636c <__assert_fail@plt+0x52a0>
   16540:	mov	r3, #1
   16544:	movw	r2, #46936	; 0xb758
   16548:	movt	r2, #1
   1654c:	mov	r4, r3
   16550:	str	r3, [sp, #36]	; 0x24
   16554:	str	r3, [sp, #40]	; 0x28
   16558:	str	sl, [sp, #44]	; 0x2c
   1655c:	str	sl, [sp, #48]	; 0x30
   16560:	str	r3, [sp, #56]	; 0x38
   16564:	str	r2, [sp, #60]	; 0x3c
   16568:	str	sl, [sp, #68]	; 0x44
   1656c:	str	sl, [sp, #72]	; 0x48
   16570:	b	15214 <__assert_fail@plt+0x4148>
   16574:	mov	r3, r6
   16578:	mov	r5, #48	; 0x30
   1657c:	mov	r6, #0
   16580:	b	156ec <__assert_fail@plt+0x4620>
   16584:	mov	r5, r3
   16588:	b	15a64 <__assert_fail@plt+0x4998>
   1658c:	cmp	sl, r4
   16590:	mov	r5, #48	; 0x30
   16594:	movhi	r3, #48	; 0x30
   16598:	strbhi	r3, [r8, r4]
   1659c:	add	r3, r0, #2
   165a0:	add	r4, r0, #3
   165a4:	cmp	sl, r3
   165a8:	movhi	r1, #48	; 0x30
   165ac:	strbhi	r1, [r8, r3]
   165b0:	b	15b3c <__assert_fail@plt+0x4a70>
   165b4:	str	fp, [sp, #152]	; 0x98
   165b8:	mov	fp, r8
   165bc:	ldr	r8, [sp, #152]	; 0x98
   165c0:	b	159d8 <__assert_fail@plt+0x490c>
   165c4:	ldr	r3, [sp, #164]	; 0xa4
   165c8:	ldrb	r3, [r3]
   165cc:	cmp	r3, #0
   165d0:	beq	151e4 <__assert_fail@plt+0x4118>
   165d4:	ldr	r2, [sp, #164]	; 0xa4
   165d8:	cmp	sl, r4
   165dc:	strbhi	r3, [fp, r4]
   165e0:	add	r4, r4, #1
   165e4:	ldrb	r3, [r2, #1]!
   165e8:	cmp	r3, #0
   165ec:	bne	165d8 <__assert_fail@plt+0x550c>
   165f0:	b	151e4 <__assert_fail@plt+0x4118>
   165f4:	mov	ip, r5
   165f8:	mov	r6, #0
   165fc:	ldr	r2, [sp, #40]	; 0x28
   16600:	ldr	r8, [sp, #76]	; 0x4c
   16604:	ldr	sl, [sp, #80]	; 0x50
   16608:	ldr	r5, [sp, #84]	; 0x54
   1660c:	ldr	r7, [sp, #88]	; 0x58
   16610:	ldr	r4, [sp, #92]	; 0x5c
   16614:	b	162a0 <__assert_fail@plt+0x51d4>
   16618:	ldr	r2, [sp, #32]
   1661c:	ldrb	r1, [r2, r3]
   16620:	sub	r2, r1, #33	; 0x21
   16624:	cmp	r2, #29
   16628:	ldrls	pc, [pc, r2, lsl #2]
   1662c:	b	16708 <__assert_fail@plt+0x563c>
   16630:	andeq	r6, r1, r8, lsr #13
   16634:	andeq	r6, r1, r8, lsl #14
   16638:	andeq	r6, r1, r8, lsl #14
   1663c:	andeq	r6, r1, r8, lsl #14
   16640:	andeq	r6, r1, r8, lsl #14
   16644:	andeq	r6, r1, r8, lsl #14
   16648:	andeq	r6, r1, r8, lsr #13
   1664c:	andeq	r6, r1, r8, lsr #13
   16650:	andeq	r6, r1, r8, lsr #13
   16654:	andeq	r6, r1, r8, lsl #14
   16658:	andeq	r6, r1, r8, lsl #14
   1665c:	andeq	r6, r1, r8, lsl #14
   16660:	andeq	r6, r1, r8, lsr #13
   16664:	andeq	r6, r1, r8, lsl #14
   16668:	andeq	r6, r1, r8, lsr #13
   1666c:	andeq	r6, r1, r8, lsl #14
   16670:	andeq	r6, r1, r8, lsl #14
   16674:	andeq	r6, r1, r8, lsl #14
   16678:	andeq	r6, r1, r8, lsl #14
   1667c:	andeq	r6, r1, r8, lsl #14
   16680:	andeq	r6, r1, r8, lsl #14
   16684:	andeq	r6, r1, r8, lsl #14
   16688:	andeq	r6, r1, r8, lsl #14
   1668c:	andeq	r6, r1, r8, lsl #14
   16690:	andeq	r6, r1, r8, lsl #14
   16694:	andeq	r6, r1, r8, lsl #14
   16698:	andeq	r6, r1, r8, lsl #14
   1669c:	andeq	r6, r1, r8, lsr #13
   166a0:	andeq	r6, r1, r8, lsr #13
   166a4:	andeq	r6, r1, r8, lsr #13
   166a8:	ldr	r2, [sp, #44]	; 0x2c
   166ac:	cmp	r2, #0
   166b0:	bne	1680c <__assert_fail@plt+0x5740>
   166b4:	cmp	sl, r4
   166b8:	mov	r5, r1
   166bc:	movhi	r2, #63	; 0x3f
   166c0:	mov	r9, r3
   166c4:	strbhi	r2, [r8, r4]
   166c8:	add	r2, r4, #1
   166cc:	cmp	sl, r2
   166d0:	movhi	r0, #34	; 0x22
   166d4:	strbhi	r0, [r8, r2]
   166d8:	add	r2, r4, #2
   166dc:	cmp	sl, r2
   166e0:	movhi	r0, #34	; 0x22
   166e4:	strbhi	r0, [r8, r2]
   166e8:	add	r2, r4, #3
   166ec:	add	r4, r4, #4
   166f0:	cmp	sl, r2
   166f4:	movhi	r0, #63	; 0x3f
   166f8:	strbhi	r0, [r8, r2]
   166fc:	mov	r2, #0
   16700:	mov	r6, r2
   16704:	b	15b3c <__assert_fail@plt+0x4a70>
   16708:	mov	r3, #0
   1670c:	mov	r6, r3
   16710:	b	156b4 <__assert_fail@plt+0x45e8>
   16714:	ldr	r0, [sp, #28]
   16718:	mov	r1, r4
   1671c:	mov	r2, r7
   16720:	mov	r3, r5
   16724:	mov	ip, r5
   16728:	ldr	r8, [sp, #76]	; 0x4c
   1672c:	ldr	sl, [sp, #80]	; 0x50
   16730:	cmp	r1, r0
   16734:	ldr	r5, [sp, #84]	; 0x54
   16738:	ldr	r7, [sp, #88]	; 0x58
   1673c:	ldr	r4, [sp, #92]	; 0x5c
   16740:	bcs	16774 <__assert_fail@plt+0x56a8>
   16744:	ldrb	r6, [r2]
   16748:	cmp	r6, #0
   1674c:	bne	16760 <__assert_fail@plt+0x5694>
   16750:	b	16894 <__assert_fail@plt+0x57c8>
   16754:	ldrb	r6, [r2, #1]!
   16758:	cmp	r6, #0
   1675c:	beq	1681c <__assert_fail@plt+0x5750>
   16760:	add	r3, r3, #1
   16764:	add	r1, r9, r3
   16768:	cmp	r1, r0
   1676c:	bcc	16754 <__assert_fail@plt+0x5688>
   16770:	mov	ip, r3
   16774:	mov	r6, #0
   16778:	ldr	r2, [sp, #40]	; 0x28
   1677c:	b	162a0 <__assert_fail@plt+0x51d4>
   16780:	mov	r3, #1
   16784:	mov	r2, #0
   16788:	mov	r4, r2
   1678c:	str	r3, [sp, #36]	; 0x24
   16790:	str	r3, [sp, #40]	; 0x28
   16794:	str	r3, [sp, #44]	; 0x2c
   16798:	str	r2, [sp, #48]	; 0x30
   1679c:	str	r3, [sp, #56]	; 0x38
   167a0:	movw	r3, #46936	; 0xb758
   167a4:	movt	r3, #1
   167a8:	str	r3, [sp, #60]	; 0x3c
   167ac:	str	r2, [sp, #68]	; 0x44
   167b0:	str	r2, [sp, #72]	; 0x48
   167b4:	b	15214 <__assert_fail@plt+0x4148>
   167b8:	mov	r2, r3
   167bc:	ldr	r3, [sp, #60]	; 0x3c
   167c0:	cmp	r3, #0
   167c4:	moveq	r2, #0
   167c8:	andne	r2, r2, #1
   167cc:	cmp	r2, #0
   167d0:	beq	167fc <__assert_fail@plt+0x5730>
   167d4:	mov	r2, r3
   167d8:	ldrb	r3, [r3]
   167dc:	cmp	r3, #0
   167e0:	beq	167fc <__assert_fail@plt+0x5730>
   167e4:	cmp	sl, r4
   167e8:	strbhi	r3, [fp, r4]
   167ec:	add	r4, r4, #1
   167f0:	ldrb	r3, [r2, #1]!
   167f4:	cmp	r3, #0
   167f8:	bne	167e4 <__assert_fail@plt+0x5718>
   167fc:	cmp	sl, r4
   16800:	movhi	r3, #0
   16804:	strbhi	r3, [fp, r4]
   16808:	b	15a1c <__assert_fail@plt+0x4950>
   1680c:	str	fp, [sp, #152]	; 0x98
   16810:	mov	fp, r8
   16814:	ldr	r8, [sp, #152]	; 0x98
   16818:	b	159e4 <__assert_fail@plt+0x4918>
   1681c:	mov	ip, r3
   16820:	ldr	r2, [sp, #40]	; 0x28
   16824:	b	162a0 <__assert_fail@plt+0x51d4>
   16828:	str	fp, [sp, #152]	; 0x98
   1682c:	mov	fp, r8
   16830:	ldr	r8, [sp, #152]	; 0x98
   16834:	sub	r3, r8, #2
   16838:	clz	r3, r3
   1683c:	lsr	r3, r3, #5
   16840:	str	r3, [sp, #40]	; 0x28
   16844:	b	159d8 <__assert_fail@plt+0x490c>
   16848:	mov	ip, #5
   1684c:	ldr	r3, [sp, #28]
   16850:	str	ip, [sp]
   16854:	ldr	r2, [sp, #156]	; 0x9c
   16858:	ldr	ip, [sp, #164]	; 0xa4
   1685c:	ldr	r0, [sp, #160]	; 0xa0
   16860:	str	r2, [sp, #4]
   16864:	ldr	r2, [sp, #32]
   16868:	ldr	r1, [sp, #72]	; 0x48
   1686c:	str	ip, [sp, #12]
   16870:	ldr	ip, [sp, #168]	; 0xa8
   16874:	str	r0, [sp, #8]
   16878:	mov	r0, fp
   1687c:	str	ip, [sp, #16]
   16880:	bl	1512c <__assert_fail@plt+0x4060>
   16884:	mov	r4, r0
   16888:	b	15a1c <__assert_fail@plt+0x4950>
   1688c:	mov	r8, #2
   16890:	b	159d8 <__assert_fail@plt+0x490c>
   16894:	ldr	r2, [sp, #40]	; 0x28
   16898:	b	162a0 <__assert_fail@plt+0x51d4>
   1689c:	mov	r3, #0
   168a0:	mov	r2, #1
   168a4:	mov	r4, r3
   168a8:	strd	r2, [sp, #36]	; 0x24
   168ac:	strd	r2, [sp, #44]	; 0x2c
   168b0:	str	r2, [sp, #56]	; 0x38
   168b4:	str	r3, [sp, #68]	; 0x44
   168b8:	str	r3, [sp, #72]	; 0x48
   168bc:	movw	r3, #46956	; 0xb76c
   168c0:	movt	r3, #1
   168c4:	str	r3, [sp, #60]	; 0x3c
   168c8:	b	15214 <__assert_fail@plt+0x4148>
   168cc:	mov	r3, #0
   168d0:	mov	r1, #1
   168d4:	mov	r2, r3
   168d8:	str	r1, [sp, #36]	; 0x24
   168dc:	str	r3, [sp, #48]	; 0x30
   168e0:	str	sl, [sp, #72]	; 0x48
   168e4:	b	1581c <__assert_fail@plt+0x4750>
   168e8:	bl	110a8 <abort@plt>
   168ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   168f0:	mov	r4, r0
   168f4:	mov	r5, r3
   168f8:	strd	r6, [sp, #8]
   168fc:	movw	r7, #49472	; 0xc140
   16900:	movt	r7, #2
   16904:	strd	r8, [sp, #16]
   16908:	strd	sl, [sp, #24]
   1690c:	mov	sl, r1
   16910:	mov	fp, r2
   16914:	str	lr, [sp, #32]
   16918:	sub	sp, sp, #60	; 0x3c
   1691c:	bl	10fd0 <__errno_location@plt>
   16920:	mov	r8, r0
   16924:	cmn	r4, #-2147483647	; 0x80000001
   16928:	ldr	r6, [r7]
   1692c:	movne	r0, #0
   16930:	moveq	r0, #1
   16934:	ldr	r3, [r8]
   16938:	orrs	r0, r0, r4, lsr #31
   1693c:	str	r3, [sp, #28]
   16940:	bne	16ad0 <__assert_fail@plt+0x5a04>
   16944:	ldr	r3, [r7, #4]
   16948:	cmp	r3, r4
   1694c:	bgt	169ac <__assert_fail@plt+0x58e0>
   16950:	add	r1, r7, #8
   16954:	sub	r2, r4, r3
   16958:	str	r3, [sp, #52]	; 0x34
   1695c:	cmp	r6, r1
   16960:	add	r2, r2, #1
   16964:	beq	16aa8 <__assert_fail@plt+0x59dc>
   16968:	mov	r1, #8
   1696c:	mov	r0, r6
   16970:	mvn	r3, #-2147483648	; 0x80000000
   16974:	str	r1, [sp]
   16978:	add	r1, sp, #52	; 0x34
   1697c:	bl	17950 <__assert_fail@plt+0x6884>
   16980:	mov	r6, r0
   16984:	str	r0, [r7]
   16988:	ldr	r0, [r7, #4]
   1698c:	mov	r1, #0
   16990:	ldr	r2, [sp, #52]	; 0x34
   16994:	sub	r2, r2, r0
   16998:	add	r0, r6, r0, lsl #3
   1699c:	lsl	r2, r2, #3
   169a0:	bl	10fe8 <memset@plt>
   169a4:	ldr	r3, [sp, #52]	; 0x34
   169a8:	str	r3, [r7, #4]
   169ac:	ldr	r1, [r5, #4]
   169b0:	add	r0, r6, r4, lsl #3
   169b4:	add	ip, r5, #8
   169b8:	mov	r3, fp
   169bc:	mov	r2, sl
   169c0:	ldr	r7, [r0, #4]
   169c4:	str	r0, [sp, #36]	; 0x24
   169c8:	str	ip, [sp, #40]	; 0x28
   169cc:	orr	r0, r1, #1
   169d0:	ldr	r9, [r6, r4, lsl #3]
   169d4:	str	ip, [sp, #8]
   169d8:	ldr	lr, [r5, #44]	; 0x2c
   169dc:	str	r0, [sp, #4]
   169e0:	ldr	ip, [r5]
   169e4:	mov	r1, r9
   169e8:	str	ip, [sp, #32]
   169ec:	ldr	ip, [r5, #40]	; 0x28
   169f0:	str	ip, [sp, #12]
   169f4:	ldr	ip, [sp, #32]
   169f8:	str	lr, [sp, #16]
   169fc:	str	r0, [sp, #44]	; 0x2c
   16a00:	mov	r0, r7
   16a04:	str	ip, [sp]
   16a08:	bl	1512c <__assert_fail@plt+0x4060>
   16a0c:	cmp	r9, r0
   16a10:	bhi	16a80 <__assert_fail@plt+0x59b4>
   16a14:	add	r9, r0, #1
   16a18:	movw	r3, #49680	; 0xc210
   16a1c:	movt	r3, #2
   16a20:	cmp	r7, r3
   16a24:	str	r9, [r6, r4, lsl #3]
   16a28:	beq	16a34 <__assert_fail@plt+0x5968>
   16a2c:	mov	r0, r7
   16a30:	bl	14a24 <__assert_fail@plt+0x3958>
   16a34:	mov	r0, r9
   16a38:	bl	177a0 <__assert_fail@plt+0x66d4>
   16a3c:	ldr	ip, [r5]
   16a40:	mov	r3, fp
   16a44:	mov	r2, sl
   16a48:	mov	r1, r9
   16a4c:	mov	r7, r0
   16a50:	ldr	lr, [sp, #36]	; 0x24
   16a54:	ldr	r4, [r5, #40]	; 0x28
   16a58:	str	r0, [lr, #4]
   16a5c:	ldr	lr, [r5, #44]	; 0x2c
   16a60:	str	ip, [sp]
   16a64:	ldr	ip, [sp, #44]	; 0x2c
   16a68:	str	ip, [sp, #4]
   16a6c:	ldr	ip, [sp, #40]	; 0x28
   16a70:	str	r4, [sp, #12]
   16a74:	str	lr, [sp, #16]
   16a78:	str	ip, [sp, #8]
   16a7c:	bl	1512c <__assert_fail@plt+0x4060>
   16a80:	ldr	r3, [sp, #28]
   16a84:	mov	r0, r7
   16a88:	str	r3, [r8]
   16a8c:	add	sp, sp, #60	; 0x3c
   16a90:	ldrd	r4, [sp]
   16a94:	ldrd	r6, [sp, #8]
   16a98:	ldrd	r8, [sp, #16]
   16a9c:	ldrd	sl, [sp, #24]
   16aa0:	add	sp, sp, #32
   16aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   16aa8:	mov	r1, #8
   16aac:	mvn	r3, #-2147483648	; 0x80000000
   16ab0:	str	r1, [sp]
   16ab4:	add	r1, sp, #52	; 0x34
   16ab8:	bl	17950 <__assert_fail@plt+0x6884>
   16abc:	ldrd	r2, [r7, #8]
   16ac0:	mov	r6, r0
   16ac4:	str	r0, [r7]
   16ac8:	strd	r2, [r0]
   16acc:	b	16988 <__assert_fail@plt+0x58bc>
   16ad0:	bl	110a8 <abort@plt>
   16ad4:	strd	r4, [sp, #-16]!
   16ad8:	mov	r5, r0
   16adc:	str	r6, [sp, #8]
   16ae0:	str	lr, [sp, #12]
   16ae4:	bl	10fd0 <__errno_location@plt>
   16ae8:	mov	r4, r0
   16aec:	cmp	r5, #0
   16af0:	ldr	r0, [pc, #32]	; 16b18 <__assert_fail@plt+0x5a4c>
   16af4:	mov	r1, #48	; 0x30
   16af8:	movne	r0, r5
   16afc:	ldr	r6, [r4]
   16b00:	bl	17ac8 <__assert_fail@plt+0x69fc>
   16b04:	str	r6, [r4]
   16b08:	ldrd	r4, [sp]
   16b0c:	ldr	r6, [sp, #8]
   16b10:	add	sp, sp, #12
   16b14:	pop	{pc}		; (ldr pc, [sp], #4)
   16b18:	andeq	ip, r2, r0, lsl r3
   16b1c:	ldr	r3, [pc, #12]	; 16b30 <__assert_fail@plt+0x5a64>
   16b20:	cmp	r0, #0
   16b24:	moveq	r0, r3
   16b28:	ldr	r0, [r0]
   16b2c:	bx	lr
   16b30:	andeq	ip, r2, r0, lsl r3
   16b34:	ldr	r3, [pc, #12]	; 16b48 <__assert_fail@plt+0x5a7c>
   16b38:	cmp	r0, #0
   16b3c:	moveq	r0, r3
   16b40:	str	r1, [r0]
   16b44:	bx	lr
   16b48:	andeq	ip, r2, r0, lsl r3
   16b4c:	ldr	r3, [pc, #52]	; 16b88 <__assert_fail@plt+0x5abc>
   16b50:	cmp	r0, #0
   16b54:	push	{lr}		; (str lr, [sp, #-4]!)
   16b58:	lsr	lr, r1, #5
   16b5c:	and	r1, r1, #31
   16b60:	moveq	r0, r3
   16b64:	add	r3, r0, #8
   16b68:	ldr	ip, [r3, lr, lsl #2]
   16b6c:	lsr	r0, ip, r1
   16b70:	eor	r2, r2, r0
   16b74:	and	r0, r0, #1
   16b78:	and	r2, r2, #1
   16b7c:	eor	r1, ip, r2, lsl r1
   16b80:	str	r1, [r3, lr, lsl #2]
   16b84:	pop	{pc}		; (ldr pc, [sp], #4)
   16b88:	andeq	ip, r2, r0, lsl r3
   16b8c:	ldr	r3, [pc, #16]	; 16ba4 <__assert_fail@plt+0x5ad8>
   16b90:	cmp	r0, #0
   16b94:	movne	r3, r0
   16b98:	ldr	r0, [r3, #4]
   16b9c:	str	r1, [r3, #4]
   16ba0:	bx	lr
   16ba4:	andeq	ip, r2, r0, lsl r3
   16ba8:	ldr	r3, [pc, #48]	; 16be0 <__assert_fail@plt+0x5b14>
   16bac:	cmp	r0, #0
   16bb0:	mov	ip, #10
   16bb4:	moveq	r0, r3
   16bb8:	cmp	r2, #0
   16bbc:	cmpne	r1, #0
   16bc0:	str	ip, [r0]
   16bc4:	beq	16bd4 <__assert_fail@plt+0x5b08>
   16bc8:	str	r1, [r0, #40]	; 0x28
   16bcc:	str	r2, [r0, #44]	; 0x2c
   16bd0:	bx	lr
   16bd4:	str	r4, [sp, #-8]!
   16bd8:	str	lr, [sp, #4]
   16bdc:	bl	110a8 <abort@plt>
   16be0:	andeq	ip, r2, r0, lsl r3
   16be4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16be8:	strd	r6, [sp, #8]
   16bec:	mov	r7, r0
   16bf0:	mov	r6, r1
   16bf4:	strd	r8, [sp, #16]
   16bf8:	mov	r8, r2
   16bfc:	mov	r9, r3
   16c00:	str	lr, [sp, #24]
   16c04:	sub	sp, sp, #28
   16c08:	ldr	r4, [sp, #56]	; 0x38
   16c0c:	ldr	ip, [pc, #104]	; 16c7c <__assert_fail@plt+0x5bb0>
   16c10:	cmp	r4, #0
   16c14:	moveq	r4, ip
   16c18:	bl	10fd0 <__errno_location@plt>
   16c1c:	ldr	ip, [r4, #44]	; 0x2c
   16c20:	mov	r5, r0
   16c24:	mov	r1, r6
   16c28:	add	lr, r4, #8
   16c2c:	mov	r3, r9
   16c30:	ldr	r6, [r5]
   16c34:	mov	r2, r8
   16c38:	mov	r0, r7
   16c3c:	str	ip, [sp, #16]
   16c40:	ldr	ip, [r4, #40]	; 0x28
   16c44:	str	lr, [sp, #8]
   16c48:	str	ip, [sp, #12]
   16c4c:	ldr	ip, [r4, #4]
   16c50:	str	ip, [sp, #4]
   16c54:	ldr	ip, [r4]
   16c58:	str	ip, [sp]
   16c5c:	bl	1512c <__assert_fail@plt+0x4060>
   16c60:	str	r6, [r5]
   16c64:	add	sp, sp, #28
   16c68:	ldrd	r4, [sp]
   16c6c:	ldrd	r6, [sp, #8]
   16c70:	ldrd	r8, [sp, #16]
   16c74:	add	sp, sp, #24
   16c78:	pop	{pc}		; (ldr pc, [sp], #4)
   16c7c:	andeq	ip, r2, r0, lsl r3
   16c80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c84:	cmp	r3, #0
   16c88:	ldr	r4, [pc, #220]	; 16d6c <__assert_fail@plt+0x5ca0>
   16c8c:	movne	r4, r3
   16c90:	strd	r6, [sp, #8]
   16c94:	mov	r6, r2
   16c98:	strd	r8, [sp, #16]
   16c9c:	mov	r9, r0
   16ca0:	strd	sl, [sp, #24]
   16ca4:	mov	sl, r1
   16ca8:	str	lr, [sp, #32]
   16cac:	sub	sp, sp, #44	; 0x2c
   16cb0:	bl	10fd0 <__errno_location@plt>
   16cb4:	ldr	r5, [r4, #4]
   16cb8:	mov	r7, r0
   16cbc:	mov	r1, #0
   16cc0:	add	r8, r4, #8
   16cc4:	mov	r3, sl
   16cc8:	ldr	ip, [r4, #44]	; 0x2c
   16ccc:	mov	r2, r9
   16cd0:	mov	r0, r1
   16cd4:	ldr	lr, [r7]
   16cd8:	cmp	r6, r1
   16cdc:	orreq	r5, r5, #1
   16ce0:	str	ip, [sp, #16]
   16ce4:	ldr	ip, [r4, #40]	; 0x28
   16ce8:	stmib	sp, {r5, r8, ip}
   16cec:	ldr	ip, [r4]
   16cf0:	str	lr, [sp, #28]
   16cf4:	str	ip, [sp]
   16cf8:	bl	1512c <__assert_fail@plt+0x4060>
   16cfc:	add	r1, r0, #1
   16d00:	mov	fp, r0
   16d04:	mov	r0, r1
   16d08:	str	r1, [sp, #36]	; 0x24
   16d0c:	bl	177a0 <__assert_fail@plt+0x66d4>
   16d10:	ldr	ip, [r4, #44]	; 0x2c
   16d14:	mov	r3, sl
   16d18:	mov	r2, r9
   16d1c:	ldr	r1, [sp, #36]	; 0x24
   16d20:	str	ip, [sp, #16]
   16d24:	ldr	ip, [r4, #40]	; 0x28
   16d28:	str	r0, [sp, #32]
   16d2c:	stmib	sp, {r5, r8, ip}
   16d30:	ldr	ip, [r4]
   16d34:	str	ip, [sp]
   16d38:	bl	1512c <__assert_fail@plt+0x4060>
   16d3c:	ldr	lr, [sp, #28]
   16d40:	cmp	r6, #0
   16d44:	ldr	r0, [sp, #32]
   16d48:	str	lr, [r7]
   16d4c:	strne	fp, [r6]
   16d50:	add	sp, sp, #44	; 0x2c
   16d54:	ldrd	r4, [sp]
   16d58:	ldrd	r6, [sp, #8]
   16d5c:	ldrd	r8, [sp, #16]
   16d60:	ldrd	sl, [sp, #24]
   16d64:	add	sp, sp, #32
   16d68:	pop	{pc}		; (ldr pc, [sp], #4)
   16d6c:	andeq	ip, r2, r0, lsl r3
   16d70:	mov	r3, r2
   16d74:	mov	r2, #0
   16d78:	b	16c80 <__assert_fail@plt+0x5bb4>
   16d7c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16d80:	movw	r5, #49472	; 0xc140
   16d84:	movt	r5, #2
   16d88:	ldr	r3, [r5, #4]
   16d8c:	strd	r6, [sp, #8]
   16d90:	str	r8, [sp, #16]
   16d94:	str	lr, [sp, #20]
   16d98:	ldr	r7, [r5]
   16d9c:	cmp	r3, #1
   16da0:	ble	16dc4 <__assert_fail@plt+0x5cf8>
   16da4:	mov	r4, #1
   16da8:	add	r6, r7, #4
   16dac:	ldr	r0, [r6, r4, lsl #3]
   16db0:	add	r4, r4, #1
   16db4:	bl	14a24 <__assert_fail@plt+0x3958>
   16db8:	ldr	r3, [r5, #4]
   16dbc:	cmp	r3, r4
   16dc0:	bgt	16dac <__assert_fail@plt+0x5ce0>
   16dc4:	ldr	r0, [r7, #4]
   16dc8:	movw	r4, #49680	; 0xc210
   16dcc:	movt	r4, #2
   16dd0:	cmp	r0, r4
   16dd4:	beq	16de8 <__assert_fail@plt+0x5d1c>
   16dd8:	bl	14a24 <__assert_fail@plt+0x3958>
   16ddc:	mov	r3, #256	; 0x100
   16de0:	str	r3, [r5, #8]
   16de4:	str	r4, [r5, #12]
   16de8:	ldr	r4, [pc, #44]	; 16e1c <__assert_fail@plt+0x5d50>
   16dec:	cmp	r7, r4
   16df0:	beq	16e00 <__assert_fail@plt+0x5d34>
   16df4:	mov	r0, r7
   16df8:	bl	14a24 <__assert_fail@plt+0x3958>
   16dfc:	str	r4, [r5]
   16e00:	mov	r3, #1
   16e04:	ldrd	r6, [sp, #8]
   16e08:	str	r3, [r5, #4]
   16e0c:	ldrd	r4, [sp]
   16e10:	ldr	r8, [sp, #16]
   16e14:	add	sp, sp, #20
   16e18:	pop	{pc}		; (ldr pc, [sp], #4)
   16e1c:	andeq	ip, r2, r8, asr #2
   16e20:	ldr	r3, [pc, #4]	; 16e2c <__assert_fail@plt+0x5d60>
   16e24:	mvn	r2, #0
   16e28:	b	168ec <__assert_fail@plt+0x5820>
   16e2c:	andeq	ip, r2, r0, lsl r3
   16e30:	ldr	r3, [pc]	; 16e38 <__assert_fail@plt+0x5d6c>
   16e34:	b	168ec <__assert_fail@plt+0x5820>
   16e38:	andeq	ip, r2, r0, lsl r3
   16e3c:	mov	r1, r0
   16e40:	ldr	r3, [pc, #8]	; 16e50 <__assert_fail@plt+0x5d84>
   16e44:	mvn	r2, #0
   16e48:	mov	r0, #0
   16e4c:	b	168ec <__assert_fail@plt+0x5820>
   16e50:	andeq	ip, r2, r0, lsl r3
   16e54:	mov	r2, r1
   16e58:	ldr	r3, [pc, #8]	; 16e68 <__assert_fail@plt+0x5d9c>
   16e5c:	mov	r1, r0
   16e60:	mov	r0, #0
   16e64:	b	168ec <__assert_fail@plt+0x5820>
   16e68:	andeq	ip, r2, r0, lsl r3
   16e6c:	strd	r4, [sp, #-12]!
   16e70:	mov	r5, r2
   16e74:	mov	r4, r0
   16e78:	str	lr, [sp, #8]
   16e7c:	sub	sp, sp, #52	; 0x34
   16e80:	mov	r0, sp
   16e84:	bl	14f88 <__assert_fail@plt+0x3ebc>
   16e88:	mov	r3, sp
   16e8c:	mov	r1, r5
   16e90:	mov	r0, r4
   16e94:	mvn	r2, #0
   16e98:	bl	168ec <__assert_fail@plt+0x5820>
   16e9c:	add	sp, sp, #52	; 0x34
   16ea0:	ldrd	r4, [sp]
   16ea4:	add	sp, sp, #8
   16ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   16eac:	strd	r4, [sp, #-16]!
   16eb0:	mov	r5, r2
   16eb4:	mov	r4, r0
   16eb8:	str	r6, [sp, #8]
   16ebc:	mov	r6, r3
   16ec0:	str	lr, [sp, #12]
   16ec4:	sub	sp, sp, #48	; 0x30
   16ec8:	mov	r0, sp
   16ecc:	bl	14f88 <__assert_fail@plt+0x3ebc>
   16ed0:	mov	r3, sp
   16ed4:	mov	r2, r6
   16ed8:	mov	r1, r5
   16edc:	mov	r0, r4
   16ee0:	bl	168ec <__assert_fail@plt+0x5820>
   16ee4:	add	sp, sp, #48	; 0x30
   16ee8:	ldrd	r4, [sp]
   16eec:	ldr	r6, [sp, #8]
   16ef0:	add	sp, sp, #12
   16ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ef8:	mov	r2, r1
   16efc:	mov	r1, r0
   16f00:	mov	r0, #0
   16f04:	b	16e6c <__assert_fail@plt+0x5da0>
   16f08:	mov	r3, r2
   16f0c:	mov	r2, r1
   16f10:	mov	r1, r0
   16f14:	mov	r0, #0
   16f18:	b	16eac <__assert_fail@plt+0x5de0>
   16f1c:	ldr	ip, [pc, #140]	; 16fb0 <__assert_fail@plt+0x5ee4>
   16f20:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16f24:	ldrd	r4, [ip]
   16f28:	strd	r6, [sp, #8]
   16f2c:	ldrd	r6, [ip, #8]
   16f30:	strd	r8, [sp, #16]
   16f34:	lsr	r9, r2, #5
   16f38:	str	lr, [sp, #24]
   16f3c:	sub	sp, sp, #52	; 0x34
   16f40:	and	lr, r2, #31
   16f44:	add	r8, sp, #8
   16f48:	mov	r2, r1
   16f4c:	strd	r4, [sp]
   16f50:	mov	r1, r0
   16f54:	mov	r3, sp
   16f58:	strd	r6, [sp, #8]
   16f5c:	mov	r0, #0
   16f60:	ldrd	r4, [ip, #16]
   16f64:	ldrd	r6, [ip, #24]
   16f68:	strd	r4, [sp, #16]
   16f6c:	ldrd	r4, [ip, #32]
   16f70:	strd	r6, [sp, #24]
   16f74:	ldrd	r6, [ip, #40]	; 0x28
   16f78:	strd	r4, [sp, #32]
   16f7c:	strd	r6, [sp, #40]	; 0x28
   16f80:	ldr	ip, [r8, r9, lsl #2]
   16f84:	mvn	r4, ip, lsr lr
   16f88:	and	r4, r4, #1
   16f8c:	eor	lr, ip, r4, lsl lr
   16f90:	str	lr, [r8, r9, lsl #2]
   16f94:	bl	168ec <__assert_fail@plt+0x5820>
   16f98:	add	sp, sp, #52	; 0x34
   16f9c:	ldrd	r4, [sp]
   16fa0:	ldrd	r6, [sp, #8]
   16fa4:	ldrd	r8, [sp, #16]
   16fa8:	add	sp, sp, #24
   16fac:	pop	{pc}		; (ldr pc, [sp], #4)
   16fb0:	andeq	ip, r2, r0, lsl r3
   16fb4:	mov	r2, r1
   16fb8:	mvn	r1, #0
   16fbc:	b	16f1c <__assert_fail@plt+0x5e50>
   16fc0:	mov	r2, #58	; 0x3a
   16fc4:	mvn	r1, #0
   16fc8:	b	16f1c <__assert_fail@plt+0x5e50>
   16fcc:	mov	r2, #58	; 0x3a
   16fd0:	b	16f1c <__assert_fail@plt+0x5e50>
   16fd4:	strd	r4, [sp, #-20]!	; 0xffffffec
   16fd8:	strd	r6, [sp, #8]
   16fdc:	mov	r6, r0
   16fe0:	mov	r7, r2
   16fe4:	str	lr, [sp, #16]
   16fe8:	sub	sp, sp, #100	; 0x64
   16fec:	mov	r0, sp
   16ff0:	bl	14f88 <__assert_fail@plt+0x3ebc>
   16ff4:	ldrd	r4, [sp, #8]
   16ff8:	mov	r1, r7
   16ffc:	mov	r0, r6
   17000:	add	r3, sp, #48	; 0x30
   17004:	mvn	r2, #0
   17008:	ldrd	r6, [sp]
   1700c:	strd	r4, [sp, #56]	; 0x38
   17010:	ldrd	r4, [sp, #16]
   17014:	strd	r6, [sp, #48]	; 0x30
   17018:	ldrd	r6, [sp, #32]
   1701c:	ldr	lr, [sp, #60]	; 0x3c
   17020:	strd	r4, [sp, #64]	; 0x40
   17024:	ldrd	r4, [sp, #24]
   17028:	mvn	ip, lr
   1702c:	and	ip, ip, #67108864	; 0x4000000
   17030:	strd	r4, [sp, #72]	; 0x48
   17034:	eor	ip, ip, lr
   17038:	ldrd	r4, [sp, #40]	; 0x28
   1703c:	str	ip, [sp, #60]	; 0x3c
   17040:	strd	r6, [sp, #80]	; 0x50
   17044:	strd	r4, [sp, #88]	; 0x58
   17048:	bl	168ec <__assert_fail@plt+0x5820>
   1704c:	add	sp, sp, #100	; 0x64
   17050:	ldrd	r4, [sp]
   17054:	ldrd	r6, [sp, #8]
   17058:	add	sp, sp, #16
   1705c:	pop	{pc}		; (ldr pc, [sp], #4)
   17060:	ldr	ip, [pc, #156]	; 17104 <__assert_fail@plt+0x6038>
   17064:	cmp	r2, #0
   17068:	cmpne	r1, #0
   1706c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17070:	strd	r6, [sp, #8]
   17074:	mov	r6, r2
   17078:	str	r8, [sp, #16]
   1707c:	mov	r8, r3
   17080:	strd	sl, [sp, #20]
   17084:	ldrd	r4, [ip]
   17088:	str	lr, [sp, #28]
   1708c:	sub	sp, sp, #48	; 0x30
   17090:	mov	lr, #10
   17094:	ldrd	r2, [ip, #8]
   17098:	ldrd	sl, [ip, #16]
   1709c:	strd	r4, [sp]
   170a0:	ldrd	r4, [ip, #32]
   170a4:	str	lr, [sp]
   170a8:	strd	r2, [sp, #8]
   170ac:	strd	sl, [sp, #16]
   170b0:	ldrd	r2, [ip, #24]
   170b4:	ldrd	sl, [ip, #40]	; 0x28
   170b8:	strd	r2, [sp, #24]
   170bc:	strd	r4, [sp, #32]
   170c0:	strd	sl, [sp, #40]	; 0x28
   170c4:	beq	17100 <__assert_fail@plt+0x6034>
   170c8:	ldr	r2, [sp, #80]	; 0x50
   170cc:	mov	r7, r1
   170d0:	mov	r3, sp
   170d4:	mov	r1, r8
   170d8:	str	r7, [sp, #40]	; 0x28
   170dc:	str	r6, [sp, #44]	; 0x2c
   170e0:	bl	168ec <__assert_fail@plt+0x5820>
   170e4:	add	sp, sp, #48	; 0x30
   170e8:	ldrd	r4, [sp]
   170ec:	ldrd	r6, [sp, #8]
   170f0:	ldr	r8, [sp, #16]
   170f4:	ldrd	sl, [sp, #20]
   170f8:	add	sp, sp, #28
   170fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17100:	bl	110a8 <abort@plt>
   17104:	andeq	ip, r2, r0, lsl r3
   17108:	mvn	ip, #0
   1710c:	push	{lr}		; (str lr, [sp, #-4]!)
   17110:	sub	sp, sp, #12
   17114:	str	ip, [sp]
   17118:	bl	17060 <__assert_fail@plt+0x5f94>
   1711c:	add	sp, sp, #12
   17120:	pop	{pc}		; (ldr pc, [sp], #4)
   17124:	mvn	ip, #0
   17128:	push	{lr}		; (str lr, [sp, #-4]!)
   1712c:	sub	sp, sp, #12
   17130:	mov	r3, r2
   17134:	mov	r2, r1
   17138:	mov	r1, r0
   1713c:	mov	r0, #0
   17140:	str	ip, [sp]
   17144:	bl	17060 <__assert_fail@plt+0x5f94>
   17148:	add	sp, sp, #12
   1714c:	pop	{pc}		; (ldr pc, [sp], #4)
   17150:	push	{lr}		; (str lr, [sp, #-4]!)
   17154:	sub	sp, sp, #12
   17158:	str	r3, [sp]
   1715c:	mov	r3, r2
   17160:	mov	r2, r1
   17164:	mov	r1, r0
   17168:	mov	r0, #0
   1716c:	bl	17060 <__assert_fail@plt+0x5f94>
   17170:	add	sp, sp, #12
   17174:	pop	{pc}		; (ldr pc, [sp], #4)
   17178:	ldr	r3, [pc]	; 17180 <__assert_fail@plt+0x60b4>
   1717c:	b	168ec <__assert_fail@plt+0x5820>
   17180:	andeq	ip, r2, r0, asr r1
   17184:	mov	r2, r1
   17188:	ldr	r3, [pc, #8]	; 17198 <__assert_fail@plt+0x60cc>
   1718c:	mov	r1, r0
   17190:	mov	r0, #0
   17194:	b	168ec <__assert_fail@plt+0x5820>
   17198:	andeq	ip, r2, r0, asr r1
   1719c:	ldr	r3, [pc, #4]	; 171a8 <__assert_fail@plt+0x60dc>
   171a0:	mvn	r2, #0
   171a4:	b	168ec <__assert_fail@plt+0x5820>
   171a8:	andeq	ip, r2, r0, asr r1
   171ac:	mov	r1, r0
   171b0:	ldr	r3, [pc, #8]	; 171c0 <__assert_fail@plt+0x60f4>
   171b4:	mvn	r2, #0
   171b8:	mov	r0, #0
   171bc:	b	168ec <__assert_fail@plt+0x5820>
   171c0:	andeq	ip, r2, r0, asr r1
   171c4:	cmp	r1, #0
   171c8:	strd	r4, [sp, #-16]!
   171cc:	mov	ip, r3
   171d0:	str	r6, [sp, #8]
   171d4:	mov	r4, r0
   171d8:	str	lr, [sp, #12]
   171dc:	sub	sp, sp, #32
   171e0:	ldr	r5, [sp, #48]	; 0x30
   171e4:	ldr	r6, [sp, #52]	; 0x34
   171e8:	beq	1732c <__assert_fail@plt+0x6260>
   171ec:	mov	r3, r1
   171f0:	mov	r1, #1
   171f4:	stm	sp, {r2, ip}
   171f8:	movw	r2, #47064	; 0xb7d8
   171fc:	movt	r2, #1
   17200:	bl	1100c <__fprintf_chk@plt>
   17204:	mov	r2, #5
   17208:	movw	r1, #47084	; 0xb7ec
   1720c:	movt	r1, #1
   17210:	mov	r0, #0
   17214:	bl	10ec8 <dcgettext@plt>
   17218:	movw	ip, #2022	; 0x7e6
   1721c:	mov	r3, r0
   17220:	mov	r1, #1
   17224:	movw	r2, #47812	; 0xbac4
   17228:	movt	r2, #1
   1722c:	mov	r0, r4
   17230:	str	ip, [sp]
   17234:	bl	1100c <__fprintf_chk@plt>
   17238:	mov	r1, r4
   1723c:	mov	r0, #10
   17240:	bl	10ebc <fputc_unlocked@plt>
   17244:	mov	r2, #5
   17248:	movw	r1, #47088	; 0xb7f0
   1724c:	movt	r1, #1
   17250:	mov	r0, #0
   17254:	bl	10ec8 <dcgettext@plt>
   17258:	mov	r2, r0
   1725c:	mov	r1, #1
   17260:	movw	r3, #47260	; 0xb89c
   17264:	movt	r3, #1
   17268:	mov	r0, r4
   1726c:	bl	1100c <__fprintf_chk@plt>
   17270:	mov	r1, r4
   17274:	mov	r0, #10
   17278:	bl	10ebc <fputc_unlocked@plt>
   1727c:	cmp	r6, #9
   17280:	ldrls	pc, [pc, r6, lsl #2]
   17284:	b	17598 <__assert_fail@plt+0x64cc>
   17288:	andeq	r7, r1, r8, lsl r3
   1728c:	andeq	r7, r1, r8, asr #6
   17290:	andeq	r7, r1, r4, lsl #7
   17294:	andeq	r7, r1, r4, asr #7
   17298:	andeq	r7, r1, ip, lsl #8
   1729c:	andeq	r7, r1, r4, asr #8
   172a0:	andeq	r7, r1, ip, lsl #9
   172a4:	andeq	r7, r1, r0, ror #9
   172a8:	andeq	r7, r1, r8, lsr r5
   172ac:			; <UNDEFINED> instruction: 0x000172b0
   172b0:	movw	r1, #47564	; 0xb9cc
   172b4:	movt	r1, #1
   172b8:	mov	r2, #5
   172bc:	mov	r0, #0
   172c0:	bl	10ec8 <dcgettext@plt>
   172c4:	ldr	lr, [r5, #4]
   172c8:	mov	r2, r0
   172cc:	mov	r1, #1
   172d0:	mov	r0, r4
   172d4:	ldr	r3, [r5, #8]
   172d8:	ldr	ip, [r5, #32]
   172dc:	str	lr, [sp]
   172e0:	ldr	lr, [r5, #12]
   172e4:	str	ip, [sp, #28]
   172e8:	ldr	ip, [r5, #28]
   172ec:	str	r3, [sp, #4]
   172f0:	ldr	r3, [r5, #16]
   172f4:	str	lr, [sp, #8]
   172f8:	ldr	lr, [r5, #20]
   172fc:	str	ip, [sp, #24]
   17300:	ldr	ip, [r5, #24]
   17304:	str	r3, [sp, #12]
   17308:	ldr	r3, [r5]
   1730c:	str	lr, [sp, #16]
   17310:	str	ip, [sp, #20]
   17314:	bl	1100c <__fprintf_chk@plt>
   17318:	add	sp, sp, #32
   1731c:	ldrd	r4, [sp]
   17320:	ldr	r6, [sp, #8]
   17324:	add	sp, sp, #12
   17328:	pop	{pc}		; (ldr pc, [sp], #4)
   1732c:	mov	r3, r2
   17330:	mov	r1, #1
   17334:	str	ip, [sp]
   17338:	movw	r2, #47076	; 0xb7e4
   1733c:	movt	r2, #1
   17340:	bl	1100c <__fprintf_chk@plt>
   17344:	b	17204 <__assert_fail@plt+0x6138>
   17348:	mov	r2, #5
   1734c:	movw	r1, #47296	; 0xb8c0
   17350:	movt	r1, #1
   17354:	mov	r0, #0
   17358:	bl	10ec8 <dcgettext@plt>
   1735c:	ldr	r3, [r5]
   17360:	mov	r2, r0
   17364:	mov	r1, #1
   17368:	mov	r0, r4
   1736c:	add	sp, sp, #32
   17370:	ldrd	r4, [sp]
   17374:	ldr	r6, [sp, #8]
   17378:	ldr	lr, [sp, #12]
   1737c:	add	sp, sp, #16
   17380:	b	1100c <__fprintf_chk@plt>
   17384:	mov	r2, #5
   17388:	movw	r1, #47312	; 0xb8d0
   1738c:	movt	r1, #1
   17390:	mov	r0, #0
   17394:	bl	10ec8 <dcgettext@plt>
   17398:	ldm	r5, {r3, ip}
   1739c:	mov	r2, r0
   173a0:	mov	r1, #1
   173a4:	mov	r0, r4
   173a8:	str	ip, [sp, #48]	; 0x30
   173ac:	add	sp, sp, #32
   173b0:	ldrd	r4, [sp]
   173b4:	ldr	r6, [sp, #8]
   173b8:	ldr	lr, [sp, #12]
   173bc:	add	sp, sp, #16
   173c0:	b	1100c <__fprintf_chk@plt>
   173c4:	mov	r2, #5
   173c8:	movw	r1, #47336	; 0xb8e8
   173cc:	movt	r1, #1
   173d0:	mov	r0, #0
   173d4:	bl	10ec8 <dcgettext@plt>
   173d8:	ldm	r5, {r3, lr}
   173dc:	mov	r2, r0
   173e0:	mov	r1, #1
   173e4:	mov	r0, r4
   173e8:	ldr	ip, [r5, #8]
   173ec:	str	lr, [sp, #48]	; 0x30
   173f0:	str	ip, [sp, #52]	; 0x34
   173f4:	add	sp, sp, #32
   173f8:	ldrd	r4, [sp]
   173fc:	ldr	r6, [sp, #8]
   17400:	ldr	lr, [sp, #12]
   17404:	add	sp, sp, #16
   17408:	b	1100c <__fprintf_chk@plt>
   1740c:	mov	r2, #5
   17410:	movw	r1, #47364	; 0xb904
   17414:	movt	r1, #1
   17418:	mov	r0, #0
   1741c:	bl	10ec8 <dcgettext@plt>
   17420:	ldmib	r5, {r3, ip, lr}
   17424:	mov	r2, r0
   17428:	mov	r1, #1
   1742c:	mov	r0, r4
   17430:	str	r3, [sp]
   17434:	ldr	r3, [r5]
   17438:	stmib	sp, {ip, lr}
   1743c:	bl	1100c <__fprintf_chk@plt>
   17440:	b	17318 <__assert_fail@plt+0x624c>
   17444:	mov	r2, #5
   17448:	movw	r1, #47396	; 0xb924
   1744c:	movt	r1, #1
   17450:	mov	r0, #0
   17454:	bl	10ec8 <dcgettext@plt>
   17458:	ldmib	r5, {ip, lr}
   1745c:	mov	r2, r0
   17460:	mov	r1, #1
   17464:	mov	r0, r4
   17468:	ldr	r3, [r5, #16]
   1746c:	str	ip, [sp]
   17470:	ldr	ip, [r5, #12]
   17474:	str	r3, [sp, #12]
   17478:	ldr	r3, [r5]
   1747c:	str	lr, [sp, #4]
   17480:	str	ip, [sp, #8]
   17484:	bl	1100c <__fprintf_chk@plt>
   17488:	b	17318 <__assert_fail@plt+0x624c>
   1748c:	mov	r2, #5
   17490:	movw	r1, #47432	; 0xb948
   17494:	movt	r1, #1
   17498:	mov	r0, #0
   1749c:	bl	10ec8 <dcgettext@plt>
   174a0:	ldr	lr, [r5, #4]
   174a4:	mov	r2, r0
   174a8:	mov	r1, #1
   174ac:	mov	r0, r4
   174b0:	ldr	r3, [r5, #8]
   174b4:	ldr	ip, [r5, #20]
   174b8:	str	lr, [sp]
   174bc:	ldr	lr, [r5, #12]
   174c0:	str	ip, [sp, #16]
   174c4:	ldr	ip, [r5, #16]
   174c8:	str	r3, [sp, #4]
   174cc:	ldr	r3, [r5]
   174d0:	str	lr, [sp, #8]
   174d4:	str	ip, [sp, #12]
   174d8:	bl	1100c <__fprintf_chk@plt>
   174dc:	b	17318 <__assert_fail@plt+0x624c>
   174e0:	mov	r2, #5
   174e4:	movw	r1, #47472	; 0xb970
   174e8:	movt	r1, #1
   174ec:	mov	r0, #0
   174f0:	bl	10ec8 <dcgettext@plt>
   174f4:	ldmib	r5, {r3, ip}
   174f8:	mov	r2, r0
   174fc:	mov	r1, #1
   17500:	mov	r0, r4
   17504:	ldr	lr, [r5, #24]
   17508:	str	r3, [sp]
   1750c:	ldr	r3, [r5, #12]
   17510:	str	lr, [sp, #20]
   17514:	ldr	lr, [r5, #20]
   17518:	str	ip, [sp, #4]
   1751c:	ldr	ip, [r5, #16]
   17520:	str	r3, [sp, #8]
   17524:	ldr	r3, [r5]
   17528:	str	ip, [sp, #12]
   1752c:	str	lr, [sp, #16]
   17530:	bl	1100c <__fprintf_chk@plt>
   17534:	b	17318 <__assert_fail@plt+0x624c>
   17538:	mov	r2, #5
   1753c:	movw	r1, #47516	; 0xb99c
   17540:	movt	r1, #1
   17544:	mov	r0, #0
   17548:	bl	10ec8 <dcgettext@plt>
   1754c:	ldmib	r5, {ip, lr}
   17550:	mov	r2, r0
   17554:	mov	r1, #1
   17558:	mov	r0, r4
   1755c:	ldr	r3, [r5, #28]
   17560:	str	ip, [sp]
   17564:	ldr	ip, [r5, #12]
   17568:	str	r3, [sp, #24]
   1756c:	ldr	r3, [r5, #24]
   17570:	str	lr, [sp, #4]
   17574:	ldr	lr, [r5, #16]
   17578:	str	ip, [sp, #8]
   1757c:	ldr	ip, [r5, #20]
   17580:	str	r3, [sp, #20]
   17584:	ldr	r3, [r5]
   17588:	str	lr, [sp, #12]
   1758c:	str	ip, [sp, #16]
   17590:	bl	1100c <__fprintf_chk@plt>
   17594:	b	17318 <__assert_fail@plt+0x624c>
   17598:	movw	r1, #47616	; 0xba00
   1759c:	movt	r1, #1
   175a0:	b	172b8 <__assert_fail@plt+0x61ec>
   175a4:	strd	r4, [sp, #-12]!
   175a8:	str	lr, [sp, #8]
   175ac:	sub	sp, sp, #12
   175b0:	ldr	r5, [sp, #24]
   175b4:	ldr	ip, [r5]
   175b8:	cmp	ip, #0
   175bc:	beq	175d8 <__assert_fail@plt+0x650c>
   175c0:	mov	lr, r5
   175c4:	mov	ip, #0
   175c8:	ldr	r4, [lr, #4]!
   175cc:	add	ip, ip, #1
   175d0:	cmp	r4, #0
   175d4:	bne	175c8 <__assert_fail@plt+0x64fc>
   175d8:	stm	sp, {r5, ip}
   175dc:	bl	171c4 <__assert_fail@plt+0x60f8>
   175e0:	add	sp, sp, #12
   175e4:	ldrd	r4, [sp]
   175e8:	add	sp, sp, #8
   175ec:	pop	{pc}		; (ldr pc, [sp], #4)
   175f0:	strd	r4, [sp, #-16]!
   175f4:	mov	ip, #0
   175f8:	str	r6, [sp, #8]
   175fc:	str	lr, [sp, #12]
   17600:	sub	sp, sp, #48	; 0x30
   17604:	ldr	r5, [sp, #64]	; 0x40
   17608:	add	r6, sp, #8
   1760c:	mov	r4, r6
   17610:	ldr	lr, [r5], #4
   17614:	cmp	lr, #0
   17618:	str	lr, [r4], #4
   1761c:	beq	1762c <__assert_fail@plt+0x6560>
   17620:	add	ip, ip, #1
   17624:	cmp	ip, #10
   17628:	bne	17610 <__assert_fail@plt+0x6544>
   1762c:	stm	sp, {r6, ip}
   17630:	bl	171c4 <__assert_fail@plt+0x60f8>
   17634:	add	sp, sp, #48	; 0x30
   17638:	ldrd	r4, [sp]
   1763c:	ldr	r6, [sp, #8]
   17640:	add	sp, sp, #12
   17644:	pop	{pc}		; (ldr pc, [sp], #4)
   17648:	push	{r3}		; (str r3, [sp, #-4]!)
   1764c:	mov	ip, #0
   17650:	strd	r4, [sp, #-12]!
   17654:	str	lr, [sp, #8]
   17658:	sub	sp, sp, #56	; 0x38
   1765c:	add	r3, sp, #72	; 0x48
   17660:	add	r5, sp, #16
   17664:	mov	r4, r3
   17668:	mov	lr, r5
   1766c:	str	r3, [sp, #12]
   17670:	ldr	r3, [r4], #4
   17674:	cmp	r3, #0
   17678:	str	r3, [lr], #4
   1767c:	beq	1768c <__assert_fail@plt+0x65c0>
   17680:	add	ip, ip, #1
   17684:	cmp	ip, #10
   17688:	bne	17670 <__assert_fail@plt+0x65a4>
   1768c:	ldr	r3, [sp, #68]	; 0x44
   17690:	stm	sp, {r5, ip}
   17694:	bl	171c4 <__assert_fail@plt+0x60f8>
   17698:	add	sp, sp, #56	; 0x38
   1769c:	ldrd	r4, [sp]
   176a0:	ldr	lr, [sp, #8]
   176a4:	add	sp, sp, #12
   176a8:	add	sp, sp, #4
   176ac:	bx	lr
   176b0:	movw	r3, #49564	; 0xc19c
   176b4:	movt	r3, #2
   176b8:	str	r4, [sp, #-8]!
   176bc:	mov	r0, #10
   176c0:	ldr	r1, [r3]
   176c4:	str	lr, [sp, #4]
   176c8:	bl	10ebc <fputc_unlocked@plt>
   176cc:	mov	r2, #5
   176d0:	movw	r1, #47676	; 0xba3c
   176d4:	movt	r1, #1
   176d8:	mov	r0, #0
   176dc:	bl	10ec8 <dcgettext@plt>
   176e0:	mov	r1, r0
   176e4:	movw	r2, #47696	; 0xba50
   176e8:	movt	r2, #1
   176ec:	mov	r0, #1
   176f0:	bl	10ff4 <__printf_chk@plt>
   176f4:	mov	r2, #5
   176f8:	movw	r1, #47720	; 0xba68
   176fc:	movt	r1, #1
   17700:	mov	r0, #0
   17704:	bl	10ec8 <dcgettext@plt>
   17708:	mov	r1, r0
   1770c:	movw	r3, #44728	; 0xaeb8
   17710:	movt	r3, #1
   17714:	movw	r2, #44768	; 0xaee0
   17718:	movt	r2, #1
   1771c:	mov	r0, #1
   17720:	bl	10ff4 <__printf_chk@plt>
   17724:	mov	r2, #5
   17728:	movw	r1, #47740	; 0xba7c
   1772c:	movt	r1, #1
   17730:	mov	r0, #0
   17734:	bl	10ec8 <dcgettext@plt>
   17738:	mov	r1, r0
   1773c:	movw	r2, #47780	; 0xbaa4
   17740:	movt	r2, #1
   17744:	mov	r0, #1
   17748:	ldr	r4, [sp]
   1774c:	ldr	lr, [sp, #4]
   17750:	add	sp, sp, #8
   17754:	b	10ff4 <__printf_chk@plt>
   17758:	str	r4, [sp, #-8]!
   1775c:	str	lr, [sp, #4]
   17760:	bl	18cb4 <__assert_fail@plt+0x7be8>
   17764:	cmp	r0, #0
   17768:	beq	17778 <__assert_fail@plt+0x66ac>
   1776c:	ldr	r4, [sp]
   17770:	add	sp, sp, #4
   17774:	pop	{pc}		; (ldr pc, [sp], #4)
   17778:	bl	17bd0 <__assert_fail@plt+0x6b04>
   1777c:	str	r4, [sp, #-8]!
   17780:	str	lr, [sp, #4]
   17784:	bl	18cb4 <__assert_fail@plt+0x7be8>
   17788:	cmp	r0, #0
   1778c:	beq	1779c <__assert_fail@plt+0x66d0>
   17790:	ldr	r4, [sp]
   17794:	add	sp, sp, #4
   17798:	pop	{pc}		; (ldr pc, [sp], #4)
   1779c:	bl	17bd0 <__assert_fail@plt+0x6b04>
   177a0:	str	r4, [sp, #-8]!
   177a4:	str	lr, [sp, #4]
   177a8:	bl	18cb4 <__assert_fail@plt+0x7be8>
   177ac:	cmp	r0, #0
   177b0:	beq	177c0 <__assert_fail@plt+0x66f4>
   177b4:	ldr	r4, [sp]
   177b8:	add	sp, sp, #4
   177bc:	pop	{pc}		; (ldr pc, [sp], #4)
   177c0:	bl	17bd0 <__assert_fail@plt+0x6b04>
   177c4:	strd	r4, [sp, #-16]!
   177c8:	mov	r5, r0
   177cc:	mov	r4, r1
   177d0:	str	r6, [sp, #8]
   177d4:	str	lr, [sp, #12]
   177d8:	bl	18cf0 <__assert_fail@plt+0x7c24>
   177dc:	cmp	r0, #0
   177e0:	beq	177f4 <__assert_fail@plt+0x6728>
   177e4:	ldrd	r4, [sp]
   177e8:	ldr	r6, [sp, #8]
   177ec:	add	sp, sp, #12
   177f0:	pop	{pc}		; (ldr pc, [sp], #4)
   177f4:	adds	r4, r4, #0
   177f8:	movne	r4, #1
   177fc:	cmp	r5, #0
   17800:	moveq	r4, #1
   17804:	cmp	r4, #0
   17808:	beq	177e4 <__assert_fail@plt+0x6718>
   1780c:	bl	17bd0 <__assert_fail@plt+0x6b04>
   17810:	cmp	r1, #0
   17814:	orreq	r1, r1, #1
   17818:	str	r4, [sp, #-8]!
   1781c:	str	lr, [sp, #4]
   17820:	bl	18cf0 <__assert_fail@plt+0x7c24>
   17824:	cmp	r0, #0
   17828:	beq	17838 <__assert_fail@plt+0x676c>
   1782c:	ldr	r4, [sp]
   17830:	add	sp, sp, #4
   17834:	pop	{pc}		; (ldr pc, [sp], #4)
   17838:	bl	17bd0 <__assert_fail@plt+0x6b04>
   1783c:	strd	r4, [sp, #-16]!
   17840:	mov	r4, r0
   17844:	mov	r5, r2
   17848:	str	r6, [sp, #8]
   1784c:	mov	r6, r1
   17850:	str	lr, [sp, #12]
   17854:	bl	19070 <__assert_fail@plt+0x7fa4>
   17858:	cmp	r0, #0
   1785c:	beq	17870 <__assert_fail@plt+0x67a4>
   17860:	ldrd	r4, [sp]
   17864:	ldr	r6, [sp, #8]
   17868:	add	sp, sp, #12
   1786c:	pop	{pc}		; (ldr pc, [sp], #4)
   17870:	cmp	r4, #0
   17874:	beq	17884 <__assert_fail@plt+0x67b8>
   17878:	cmp	r6, #0
   1787c:	cmpne	r5, #0
   17880:	beq	17860 <__assert_fail@plt+0x6794>
   17884:	bl	17bd0 <__assert_fail@plt+0x6b04>
   17888:	b	1783c <__assert_fail@plt+0x6770>
   1788c:	cmp	r2, #0
   17890:	cmpne	r1, #0
   17894:	str	r4, [sp, #-8]!
   17898:	moveq	r2, #1
   1789c:	str	lr, [sp, #4]
   178a0:	moveq	r1, r2
   178a4:	bl	19070 <__assert_fail@plt+0x7fa4>
   178a8:	cmp	r0, #0
   178ac:	beq	178bc <__assert_fail@plt+0x67f0>
   178b0:	ldr	r4, [sp]
   178b4:	add	sp, sp, #4
   178b8:	pop	{pc}		; (ldr pc, [sp], #4)
   178bc:	bl	17bd0 <__assert_fail@plt+0x6b04>
   178c0:	mov	r2, r1
   178c4:	mov	r1, r0
   178c8:	mov	r0, #0
   178cc:	b	1783c <__assert_fail@plt+0x6770>
   178d0:	mov	r2, r1
   178d4:	mov	r1, r0
   178d8:	mov	r0, #0
   178dc:	b	1788c <__assert_fail@plt+0x67c0>
   178e0:	cmp	r0, #0
   178e4:	strd	r4, [sp, #-16]!
   178e8:	mov	r5, r1
   178ec:	ldr	r4, [r1]
   178f0:	str	r6, [sp, #8]
   178f4:	str	lr, [sp, #12]
   178f8:	beq	17928 <__assert_fail@plt+0x685c>
   178fc:	lsr	r3, r4, #1
   17900:	add	r3, r3, #1
   17904:	adds	r4, r4, r3
   17908:	bcs	17944 <__assert_fail@plt+0x6878>
   1790c:	mov	r1, r4
   17910:	bl	1783c <__assert_fail@plt+0x6770>
   17914:	ldr	r6, [sp, #8]
   17918:	str	r4, [r5]
   1791c:	ldrd	r4, [sp]
   17920:	add	sp, sp, #12
   17924:	pop	{pc}		; (ldr pc, [sp], #4)
   17928:	cmp	r4, #0
   1792c:	bne	1790c <__assert_fail@plt+0x6840>
   17930:	mov	r4, #64	; 0x40
   17934:	udiv	r4, r4, r2
   17938:	cmp	r2, #64	; 0x40
   1793c:	addhi	r4, r4, #1
   17940:	b	1790c <__assert_fail@plt+0x6840>
   17944:	bl	17bd0 <__assert_fail@plt+0x6b04>
   17948:	mov	r2, #1
   1794c:	b	178e0 <__assert_fail@plt+0x6814>
   17950:	ldr	ip, [r1]
   17954:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17958:	mov	r5, r1
   1795c:	strd	r6, [sp, #8]
   17960:	str	lr, [sp, #28]
   17964:	strd	r8, [sp, #16]
   17968:	asr	lr, ip, #1
   1796c:	ldr	r8, [sp, #32]
   17970:	str	sl, [sp, #24]
   17974:	adds	r4, ip, lr
   17978:	mvn	lr, r3
   1797c:	lsr	lr, lr, #31
   17980:	mvnvs	r4, #-2147483648	; 0x80000000
   17984:	cmp	r3, r4
   17988:	movge	r1, #0
   1798c:	andlt	r1, lr, #1
   17990:	cmp	r1, #0
   17994:	movne	r4, r3
   17998:	smull	r6, r7, r4, r8
   1799c:	cmp	r7, r6, asr #31
   179a0:	bne	17a28 <__assert_fail@plt+0x695c>
   179a4:	cmp	r6, #63	; 0x3f
   179a8:	mov	r1, r6
   179ac:	ble	17a10 <__assert_fail@plt+0x6944>
   179b0:	cmp	r0, #0
   179b4:	sub	r6, r4, ip
   179b8:	streq	r0, [r5]
   179bc:	cmp	r6, r2
   179c0:	bge	179f0 <__assert_fail@plt+0x6924>
   179c4:	adds	r4, ip, r2
   179c8:	bvs	17a24 <__assert_fail@plt+0x6958>
   179cc:	cmp	r4, r3
   179d0:	movle	r3, #0
   179d4:	andgt	r3, lr, #1
   179d8:	cmp	r3, #0
   179dc:	bne	17a24 <__assert_fail@plt+0x6958>
   179e0:	smull	r8, r9, r4, r8
   179e4:	cmp	r9, r8, asr #31
   179e8:	mov	r1, r8
   179ec:	bne	17a24 <__assert_fail@plt+0x6958>
   179f0:	bl	177c4 <__assert_fail@plt+0x66f8>
   179f4:	ldrd	r6, [sp, #8]
   179f8:	ldrd	r8, [sp, #16]
   179fc:	ldr	sl, [sp, #24]
   17a00:	str	r4, [r5]
   17a04:	ldrd	r4, [sp]
   17a08:	add	sp, sp, #28
   17a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a10:	mov	r6, #64	; 0x40
   17a14:	sdiv	r4, r6, r8
   17a18:	mls	r1, r8, r4, r6
   17a1c:	sub	r1, r6, r1
   17a20:	b	179b0 <__assert_fail@plt+0x68e4>
   17a24:	bl	17bd0 <__assert_fail@plt+0x6b04>
   17a28:	mvn	r6, #-2147483648	; 0x80000000
   17a2c:	b	17a14 <__assert_fail@plt+0x6948>
   17a30:	mov	r1, #1
   17a34:	str	r4, [sp, #-8]!
   17a38:	str	lr, [sp, #4]
   17a3c:	bl	18c40 <__assert_fail@plt+0x7b74>
   17a40:	cmp	r0, #0
   17a44:	beq	17a54 <__assert_fail@plt+0x6988>
   17a48:	ldr	r4, [sp]
   17a4c:	add	sp, sp, #4
   17a50:	pop	{pc}		; (ldr pc, [sp], #4)
   17a54:	bl	17bd0 <__assert_fail@plt+0x6b04>
   17a58:	mov	r1, #1
   17a5c:	str	r4, [sp, #-8]!
   17a60:	str	lr, [sp, #4]
   17a64:	bl	18c40 <__assert_fail@plt+0x7b74>
   17a68:	cmp	r0, #0
   17a6c:	beq	17a7c <__assert_fail@plt+0x69b0>
   17a70:	ldr	r4, [sp]
   17a74:	add	sp, sp, #4
   17a78:	pop	{pc}		; (ldr pc, [sp], #4)
   17a7c:	bl	17bd0 <__assert_fail@plt+0x6b04>
   17a80:	str	r4, [sp, #-8]!
   17a84:	str	lr, [sp, #4]
   17a88:	bl	18c40 <__assert_fail@plt+0x7b74>
   17a8c:	cmp	r0, #0
   17a90:	beq	17aa0 <__assert_fail@plt+0x69d4>
   17a94:	ldr	r4, [sp]
   17a98:	add	sp, sp, #4
   17a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   17aa0:	bl	17bd0 <__assert_fail@plt+0x6b04>
   17aa4:	str	r4, [sp, #-8]!
   17aa8:	str	lr, [sp, #4]
   17aac:	bl	18c40 <__assert_fail@plt+0x7b74>
   17ab0:	cmp	r0, #0
   17ab4:	beq	17ac4 <__assert_fail@plt+0x69f8>
   17ab8:	ldr	r4, [sp]
   17abc:	add	sp, sp, #4
   17ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ac4:	bl	17bd0 <__assert_fail@plt+0x6b04>
   17ac8:	strd	r4, [sp, #-16]!
   17acc:	mov	r4, r1
   17ad0:	str	r6, [sp, #8]
   17ad4:	mov	r6, r0
   17ad8:	mov	r0, r1
   17adc:	str	lr, [sp, #12]
   17ae0:	bl	18cb4 <__assert_fail@plt+0x7be8>
   17ae4:	subs	r5, r0, #0
   17ae8:	beq	17b0c <__assert_fail@plt+0x6a40>
   17aec:	mov	r2, r4
   17af0:	mov	r1, r6
   17af4:	bl	10e8c <memcpy@plt>
   17af8:	mov	r0, r5
   17afc:	ldrd	r4, [sp]
   17b00:	ldr	r6, [sp, #8]
   17b04:	add	sp, sp, #12
   17b08:	pop	{pc}		; (ldr pc, [sp], #4)
   17b0c:	bl	17bd0 <__assert_fail@plt+0x6b04>
   17b10:	strd	r4, [sp, #-16]!
   17b14:	mov	r4, r1
   17b18:	str	r6, [sp, #8]
   17b1c:	mov	r6, r0
   17b20:	mov	r0, r1
   17b24:	str	lr, [sp, #12]
   17b28:	bl	18cb4 <__assert_fail@plt+0x7be8>
   17b2c:	subs	r5, r0, #0
   17b30:	beq	17b54 <__assert_fail@plt+0x6a88>
   17b34:	mov	r2, r4
   17b38:	mov	r1, r6
   17b3c:	bl	10e8c <memcpy@plt>
   17b40:	mov	r0, r5
   17b44:	ldrd	r4, [sp]
   17b48:	ldr	r6, [sp, #8]
   17b4c:	add	sp, sp, #12
   17b50:	pop	{pc}		; (ldr pc, [sp], #4)
   17b54:	bl	17bd0 <__assert_fail@plt+0x6b04>
   17b58:	strd	r4, [sp, #-16]!
   17b5c:	mov	r4, r1
   17b60:	str	r6, [sp, #8]
   17b64:	mov	r6, r0
   17b68:	add	r0, r1, #1
   17b6c:	str	lr, [sp, #12]
   17b70:	bl	18cb4 <__assert_fail@plt+0x7be8>
   17b74:	subs	r5, r0, #0
   17b78:	beq	17ba4 <__assert_fail@plt+0x6ad8>
   17b7c:	mov	r3, #0
   17b80:	mov	r1, r6
   17b84:	mov	r2, r4
   17b88:	strb	r3, [r5, r4]
   17b8c:	bl	10e8c <memcpy@plt>
   17b90:	mov	r0, r5
   17b94:	ldrd	r4, [sp]
   17b98:	ldr	r6, [sp, #8]
   17b9c:	add	sp, sp, #12
   17ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ba4:	bl	17bd0 <__assert_fail@plt+0x6b04>
   17ba8:	str	r4, [sp, #-8]!
   17bac:	mov	r4, r0
   17bb0:	str	lr, [sp, #4]
   17bb4:	bl	10fb8 <strlen@plt>
   17bb8:	add	r1, r0, #1
   17bbc:	mov	r0, r4
   17bc0:	ldr	r4, [sp]
   17bc4:	ldr	lr, [sp, #4]
   17bc8:	add	sp, sp, #8
   17bcc:	b	17ac8 <__assert_fail@plt+0x69fc>
   17bd0:	movw	r3, #49468	; 0xc13c
   17bd4:	movt	r3, #2
   17bd8:	str	r4, [sp, #-8]!
   17bdc:	ldr	r4, [r3]
   17be0:	mov	r2, #5
   17be4:	movw	r1, #47860	; 0xbaf4
   17be8:	movt	r1, #1
   17bec:	mov	r0, #0
   17bf0:	str	lr, [sp, #4]
   17bf4:	bl	10ec8 <dcgettext@plt>
   17bf8:	mov	r3, r0
   17bfc:	movw	r2, #39304	; 0x9988
   17c00:	movt	r2, #1
   17c04:	mov	r1, #0
   17c08:	mov	r0, r4
   17c0c:	bl	10f4c <error@plt>
   17c10:	bl	110a8 <abort@plt>
   17c14:	cmp	r2, #36	; 0x24
   17c18:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17c1c:	strd	r6, [sp, #8]
   17c20:	strd	r8, [sp, #16]
   17c24:	str	sl, [sp, #24]
   17c28:	str	lr, [sp, #28]
   17c2c:	sub	sp, sp, #8
   17c30:	bhi	181f0 <__assert_fail@plt+0x7124>
   17c34:	cmp	r1, #0
   17c38:	mov	r6, r1
   17c3c:	mov	r5, r2
   17c40:	addeq	r6, sp, #4
   17c44:	mov	r9, r0
   17c48:	mov	r8, r3
   17c4c:	bl	10fd0 <__errno_location@plt>
   17c50:	mov	sl, r0
   17c54:	mov	r4, #0
   17c58:	mov	r2, r5
   17c5c:	mov	r1, r6
   17c60:	mov	r0, r9
   17c64:	str	r4, [sl]
   17c68:	bl	10e44 <strtol@plt>
   17c6c:	ldr	r7, [r6]
   17c70:	mov	r5, r0
   17c74:	cmp	r7, r9
   17c78:	beq	17cd0 <__assert_fail@plt+0x6c04>
   17c7c:	ldr	r4, [sl]
   17c80:	cmp	r4, #0
   17c84:	beq	17c94 <__assert_fail@plt+0x6bc8>
   17c88:	cmp	r4, #34	; 0x22
   17c8c:	bne	17dd0 <__assert_fail@plt+0x6d04>
   17c90:	mov	r4, #1
   17c94:	ldr	r3, [sp, #40]	; 0x28
   17c98:	cmp	r3, #0
   17c9c:	beq	17cac <__assert_fail@plt+0x6be0>
   17ca0:	ldrb	r9, [r7]
   17ca4:	cmp	r9, #0
   17ca8:	bne	17ed4 <__assert_fail@plt+0x6e08>
   17cac:	str	r5, [r8]
   17cb0:	mov	r0, r4
   17cb4:	add	sp, sp, #8
   17cb8:	ldrd	r4, [sp]
   17cbc:	ldrd	r6, [sp, #8]
   17cc0:	ldrd	r8, [sp, #16]
   17cc4:	ldr	sl, [sp, #24]
   17cc8:	add	sp, sp, #28
   17ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   17cd0:	ldr	r3, [sp, #40]	; 0x28
   17cd4:	cmp	r3, r4
   17cd8:	beq	17dd0 <__assert_fail@plt+0x6d04>
   17cdc:	ldrb	r9, [r9]
   17ce0:	cmp	r9, r4
   17ce4:	beq	17dd0 <__assert_fail@plt+0x6d04>
   17ce8:	mov	r1, r9
   17cec:	mov	r0, r3
   17cf0:	bl	10fc4 <strchr@plt>
   17cf4:	cmp	r0, r4
   17cf8:	movne	r5, #1
   17cfc:	beq	17dd0 <__assert_fail@plt+0x6d04>
   17d00:	sub	sl, r9, #69	; 0x45
   17d04:	cmp	sl, #47	; 0x2f
   17d08:	ldrls	pc, [pc, sl, lsl #2]
   17d0c:	b	17ef0 <__assert_fail@plt+0x6e24>
   17d10:	ldrdeq	r7, [r1], -r8
   17d14:	strdeq	r7, [r1], -r0
   17d18:	ldrdeq	r7, [r1], -r8
   17d1c:	strdeq	r7, [r1], -r0
   17d20:	strdeq	r7, [r1], -r0
   17d24:	strdeq	r7, [r1], -r0
   17d28:	ldrdeq	r7, [r1], -r8
   17d2c:	strdeq	r7, [r1], -r0
   17d30:	ldrdeq	r7, [r1], -r8
   17d34:	strdeq	r7, [r1], -r0
   17d38:	strdeq	r7, [r1], -r0
   17d3c:	ldrdeq	r7, [r1], -r8
   17d40:	strdeq	r7, [r1], -r0
   17d44:	strdeq	r7, [r1], -r0
   17d48:	strdeq	r7, [r1], -r0
   17d4c:	ldrdeq	r7, [r1], -r8
   17d50:	strdeq	r7, [r1], -r0
   17d54:	strdeq	r7, [r1], -r0
   17d58:	strdeq	r7, [r1], -r0
   17d5c:	strdeq	r7, [r1], -r0
   17d60:	ldrdeq	r7, [r1], -r8
   17d64:	ldrdeq	r7, [r1], -r8
   17d68:	strdeq	r7, [r1], -r0
   17d6c:	strdeq	r7, [r1], -r0
   17d70:	strdeq	r7, [r1], -r0
   17d74:	strdeq	r7, [r1], -r0
   17d78:	strdeq	r7, [r1], -r0
   17d7c:	strdeq	r7, [r1], -r0
   17d80:	strdeq	r7, [r1], -r0
   17d84:	strdeq	r7, [r1], -r0
   17d88:	strdeq	r7, [r1], -r0
   17d8c:	strdeq	r7, [r1], -r0
   17d90:	strdeq	r7, [r1], -r0
   17d94:	strdeq	r7, [r1], -r0
   17d98:	ldrdeq	r7, [r1], -r8
   17d9c:	strdeq	r7, [r1], -r0
   17da0:	strdeq	r7, [r1], -r0
   17da4:	strdeq	r7, [r1], -r0
   17da8:	ldrdeq	r7, [r1], -r8
   17dac:	strdeq	r7, [r1], -r0
   17db0:	ldrdeq	r7, [r1], -r8
   17db4:	strdeq	r7, [r1], -r0
   17db8:	strdeq	r7, [r1], -r0
   17dbc:	strdeq	r7, [r1], -r0
   17dc0:	strdeq	r7, [r1], -r0
   17dc4:	strdeq	r7, [r1], -r0
   17dc8:	strdeq	r7, [r1], -r0
   17dcc:	ldrdeq	r7, [r1], -r8
   17dd0:	mov	r4, #4
   17dd4:	b	17cb0 <__assert_fail@plt+0x6be4>
   17dd8:	mov	r1, #48	; 0x30
   17ddc:	ldr	r0, [sp, #40]	; 0x28
   17de0:	bl	10fc4 <strchr@plt>
   17de4:	cmp	r0, #0
   17de8:	beq	17ef0 <__assert_fail@plt+0x6e24>
   17dec:	ldrb	r3, [r7, #1]
   17df0:	cmp	r3, #68	; 0x44
   17df4:	beq	181c0 <__assert_fail@plt+0x70f4>
   17df8:	cmp	r3, #105	; 0x69
   17dfc:	beq	181cc <__assert_fail@plt+0x7100>
   17e00:	cmp	r3, #66	; 0x42
   17e04:	beq	181c0 <__assert_fail@plt+0x70f4>
   17e08:	cmp	sl, #47	; 0x2f
   17e0c:	ldrls	pc, [pc, sl, lsl #2]
   17e10:	b	17ee8 <__assert_fail@plt+0x6e1c>
   17e14:	andeq	r8, r1, r0, ror r1
   17e18:	andeq	r7, r1, r8, ror #29
   17e1c:	andeq	r8, r1, r4, asr #2
   17e20:	andeq	r7, r1, r8, ror #29
   17e24:	andeq	r7, r1, r8, ror #29
   17e28:	andeq	r7, r1, r8, ror #29
   17e2c:	andeq	r8, r1, ip, lsl r0
   17e30:	andeq	r7, r1, r8, ror #29
   17e34:	andeq	r8, r1, r4, ror #1
   17e38:	andeq	r7, r1, r8, ror #29
   17e3c:	andeq	r7, r1, r8, ror #29
   17e40:	andeq	r8, r1, r8, lsl r1
   17e44:	andeq	r7, r1, r8, ror #29
   17e48:	andeq	r7, r1, r8, ror #29
   17e4c:	andeq	r7, r1, r8, ror #29
   17e50:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17e54:	andeq	r7, r1, r8, ror #29
   17e58:	andeq	r7, r1, r8, ror #29
   17e5c:	andeq	r7, r1, r8, ror #29
   17e60:	andeq	r7, r1, r8, ror #29
   17e64:	andeq	r8, r1, ip, lsl #1
   17e68:	andeq	r8, r1, ip, asr r0
   17e6c:	andeq	r7, r1, r8, ror #29
   17e70:	andeq	r7, r1, r8, ror #29
   17e74:	andeq	r7, r1, r8, ror #29
   17e78:	andeq	r7, r1, r8, ror #29
   17e7c:	andeq	r7, r1, r8, ror #29
   17e80:	andeq	r7, r1, r8, ror #29
   17e84:	andeq	r7, r1, r8, ror #29
   17e88:	andeq	r8, r1, r8, lsr r0
   17e8c:			; <UNDEFINED> instruction: 0x000181b8
   17e90:	andeq	r7, r1, r8, ror #29
   17e94:	andeq	r7, r1, r8, ror #29
   17e98:	andeq	r7, r1, r8, ror #29
   17e9c:	andeq	r8, r1, r4, asr #2
   17ea0:	andeq	r7, r1, r8, ror #29
   17ea4:	andeq	r7, r1, r8, ror #29
   17ea8:	andeq	r7, r1, r8, ror #29
   17eac:	andeq	r8, r1, ip, lsl r0
   17eb0:	andeq	r7, r1, r8, ror #29
   17eb4:	andeq	r8, r1, r4, ror #1
   17eb8:	andeq	r7, r1, r8, ror #29
   17ebc:	andeq	r7, r1, r8, ror #29
   17ec0:	andeq	r7, r1, r8, ror #29
   17ec4:	andeq	r7, r1, r8, ror #29
   17ec8:	andeq	r7, r1, r8, ror #29
   17ecc:	andeq	r7, r1, r8, ror #29
   17ed0:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ed4:	mov	r1, r9
   17ed8:	ldr	r0, [sp, #40]	; 0x28
   17edc:	bl	10fc4 <strchr@plt>
   17ee0:	cmp	r0, #0
   17ee4:	bne	17d00 <__assert_fail@plt+0x6c34>
   17ee8:	orr	r4, r4, #2
   17eec:	b	17cac <__assert_fail@plt+0x6be0>
   17ef0:	mov	ip, #1
   17ef4:	mov	r2, #1024	; 0x400
   17ef8:	sub	r9, r9, #66	; 0x42
   17efc:	cmp	r9, #53	; 0x35
   17f00:	ldrls	pc, [pc, r9, lsl #2]
   17f04:	b	17ee8 <__assert_fail@plt+0x6e1c>
   17f08:	muleq	r1, ip, r1
   17f0c:	andeq	r7, r1, r8, ror #29
   17f10:	andeq	r7, r1, r8, ror #29
   17f14:	andeq	r8, r1, r8, ror r1
   17f18:	andeq	r7, r1, r8, ror #29
   17f1c:	andeq	r8, r1, ip, asr #2
   17f20:	andeq	r7, r1, r8, ror #29
   17f24:	andeq	r7, r1, r8, ror #29
   17f28:	andeq	r7, r1, r8, ror #29
   17f2c:	andeq	r8, r1, r4, lsr #32
   17f30:	andeq	r7, r1, r8, ror #29
   17f34:	andeq	r8, r1, ip, ror #1
   17f38:	andeq	r7, r1, r8, ror #29
   17f3c:	andeq	r7, r1, r8, ror #29
   17f40:	andeq	r8, r1, r0, lsr #2
   17f44:	andeq	r7, r1, r8, ror #29
   17f48:	andeq	r7, r1, r8, ror #29
   17f4c:	andeq	r7, r1, r8, ror #29
   17f50:	andeq	r8, r1, r0, asr #1
   17f54:	andeq	r7, r1, r8, ror #29
   17f58:	andeq	r7, r1, r8, ror #29
   17f5c:	andeq	r7, r1, r8, ror #29
   17f60:	andeq	r7, r1, r8, ror #29
   17f64:	muleq	r1, r4, r0
   17f68:	andeq	r8, r1, r4, rrx
   17f6c:	andeq	r7, r1, r8, ror #29
   17f70:	andeq	r7, r1, r8, ror #29
   17f74:	andeq	r7, r1, r8, ror #29
   17f78:	andeq	r7, r1, r8, ror #29
   17f7c:	andeq	r7, r1, r8, ror #29
   17f80:	andeq	r7, r1, r8, ror #29
   17f84:	andeq	r7, r1, r8, ror #29
   17f88:	andeq	r8, r1, ip, lsr r0
   17f8c:	andeq	r8, r1, r4
   17f90:	andeq	r7, r1, r8, ror #29
   17f94:	andeq	r7, r1, r8, ror #29
   17f98:	andeq	r7, r1, r8, ror #29
   17f9c:	andeq	r8, r1, ip, asr #2
   17fa0:	andeq	r7, r1, r8, ror #29
   17fa4:	andeq	r7, r1, r8, ror #29
   17fa8:	andeq	r7, r1, r8, ror #29
   17fac:	andeq	r8, r1, r4, lsr #32
   17fb0:	andeq	r7, r1, r8, ror #29
   17fb4:	andeq	r8, r1, ip, ror #1
   17fb8:	andeq	r7, r1, r8, ror #29
   17fbc:	andeq	r7, r1, r8, ror #29
   17fc0:	andeq	r7, r1, r8, ror #29
   17fc4:	andeq	r7, r1, r8, ror #29
   17fc8:	andeq	r7, r1, r8, ror #29
   17fcc:	andeq	r7, r1, r8, ror #29
   17fd0:	andeq	r8, r1, r0, asr #1
   17fd4:	andeq	r7, r1, r8, ror #29
   17fd8:	andeq	r7, r1, r8, ror #29
   17fdc:	andeq	r7, r1, r0, ror #31
   17fe0:	asr	r1, r5, #31
   17fe4:	adds	r2, r5, r5
   17fe8:	adc	r3, r1, r1
   17fec:	cmp	r3, r2, asr #31
   17ff0:	beq	18030 <__assert_fail@plt+0x6f64>
   17ff4:	cmp	r5, #0
   17ff8:	movge	r4, #1
   17ffc:	blt	181e4 <__assert_fail@plt+0x7118>
   18000:	mvn	r5, #-2147483648	; 0x80000000
   18004:	add	r3, r7, ip
   18008:	str	r3, [r6]
   1800c:	ldrb	r3, [r7, ip]
   18010:	cmp	r3, #0
   18014:	beq	17cac <__assert_fail@plt+0x6be0>
   18018:	b	17ee8 <__assert_fail@plt+0x6e1c>
   1801c:	mov	ip, #1
   18020:	mov	r2, #1024	; 0x400
   18024:	smull	r2, r3, r5, r2
   18028:	cmp	r3, r2, asr #31
   1802c:	bne	18210 <__assert_fail@plt+0x7144>
   18030:	mov	r5, r2
   18034:	b	18004 <__assert_fail@plt+0x6f38>
   18038:	mov	ip, #1
   1803c:	asr	r3, r5, #31
   18040:	lsl	r1, r5, #9
   18044:	lsl	r3, r3, #9
   18048:	orr	r3, r3, r5, lsr #23
   1804c:	cmp	r3, r1, asr #31
   18050:	bne	18210 <__assert_fail@plt+0x7144>
   18054:	mov	r5, r1
   18058:	b	18004 <__assert_fail@plt+0x6f38>
   1805c:	mov	ip, #1
   18060:	mov	r2, #1024	; 0x400
   18064:	mov	r3, #7
   18068:	mov	lr, #0
   1806c:	smull	r0, r1, r5, r2
   18070:	cmp	r1, r0, asr #31
   18074:	bne	1825c <__assert_fail@plt+0x7190>
   18078:	mov	r5, r0
   1807c:	subs	r3, r3, #1
   18080:	bne	1806c <__assert_fail@plt+0x6fa0>
   18084:	orr	r4, r4, lr
   18088:	b	18004 <__assert_fail@plt+0x6f38>
   1808c:	mov	ip, #1
   18090:	mov	r2, #1024	; 0x400
   18094:	mov	r3, #8
   18098:	mov	lr, #0
   1809c:	smull	r0, r1, r5, r2
   180a0:	cmp	r1, r0, asr #31
   180a4:	bne	18248 <__assert_fail@plt+0x717c>
   180a8:	mov	r5, r0
   180ac:	subs	r3, r3, #1
   180b0:	bne	1809c <__assert_fail@plt+0x6fd0>
   180b4:	b	18084 <__assert_fail@plt+0x6fb8>
   180b8:	mov	ip, #1
   180bc:	mov	r2, #1024	; 0x400
   180c0:	mov	r3, #4
   180c4:	mov	lr, #0
   180c8:	smull	r0, r1, r5, r2
   180cc:	cmp	r1, r0, asr #31
   180d0:	bne	18270 <__assert_fail@plt+0x71a4>
   180d4:	mov	r5, r0
   180d8:	subs	r3, r3, #1
   180dc:	bne	180c8 <__assert_fail@plt+0x6ffc>
   180e0:	b	18084 <__assert_fail@plt+0x6fb8>
   180e4:	mov	ip, #1
   180e8:	mov	r2, #1024	; 0x400
   180ec:	smull	r0, r1, r5, r2
   180f0:	cmp	r1, r0, asr #31
   180f4:	bne	18210 <__assert_fail@plt+0x7144>
   180f8:	smull	r2, r3, r0, r2
   180fc:	cmp	r3, r2, asr #31
   18100:	beq	18030 <__assert_fail@plt+0x6f64>
   18104:	cmp	r0, #0
   18108:	mov	r4, #1
   1810c:	movlt	r5, #-2147483648	; 0x80000000
   18110:	mvnge	r5, #-2147483648	; 0x80000000
   18114:	b	18004 <__assert_fail@plt+0x6f38>
   18118:	mov	ip, #1
   1811c:	mov	r2, #1024	; 0x400
   18120:	mov	r3, #5
   18124:	mov	lr, #0
   18128:	smull	r0, r1, r5, r2
   1812c:	cmp	r1, r0, asr #31
   18130:	bne	18284 <__assert_fail@plt+0x71b8>
   18134:	mov	r5, r0
   18138:	subs	r3, r3, #1
   1813c:	bne	18128 <__assert_fail@plt+0x705c>
   18140:	b	18084 <__assert_fail@plt+0x6fb8>
   18144:	mov	ip, #1
   18148:	mov	r2, #1024	; 0x400
   1814c:	mov	r3, #3
   18150:	mov	lr, #0
   18154:	smull	r0, r1, r5, r2
   18158:	cmp	r1, r0, asr #31
   1815c:	bne	18220 <__assert_fail@plt+0x7154>
   18160:	mov	r5, r0
   18164:	subs	r3, r3, #1
   18168:	bne	18154 <__assert_fail@plt+0x7088>
   1816c:	b	18084 <__assert_fail@plt+0x6fb8>
   18170:	mov	ip, #1
   18174:	mov	r2, #1024	; 0x400
   18178:	mov	r3, #6
   1817c:	mov	lr, #0
   18180:	smull	r0, r1, r5, r2
   18184:	cmp	r1, r0, asr #31
   18188:	bne	18234 <__assert_fail@plt+0x7168>
   1818c:	mov	r5, r0
   18190:	subs	r3, r3, #1
   18194:	bne	18180 <__assert_fail@plt+0x70b4>
   18198:	b	18084 <__assert_fail@plt+0x6fb8>
   1819c:	asr	r3, r5, #31
   181a0:	lsl	r1, r5, #10
   181a4:	lsl	r3, r3, #10
   181a8:	orr	r3, r3, r5, lsr #22
   181ac:	cmp	r3, r1, asr #31
   181b0:	beq	18054 <__assert_fail@plt+0x6f88>
   181b4:	b	17ff4 <__assert_fail@plt+0x6f28>
   181b8:	mov	ip, #1
   181bc:	b	18004 <__assert_fail@plt+0x6f38>
   181c0:	mov	ip, #2
   181c4:	mov	r2, #1000	; 0x3e8
   181c8:	b	17ef8 <__assert_fail@plt+0x6e2c>
   181cc:	ldrb	r3, [r7, #2]
   181d0:	mov	r2, #1024	; 0x400
   181d4:	cmp	r3, #66	; 0x42
   181d8:	movne	ip, #1
   181dc:	moveq	ip, #3
   181e0:	b	17ef8 <__assert_fail@plt+0x6e2c>
   181e4:	mov	r4, #1
   181e8:	mov	r5, #-2147483648	; 0x80000000
   181ec:	b	18004 <__assert_fail@plt+0x6f38>
   181f0:	movw	r3, #47880	; 0xbb08
   181f4:	movt	r3, #1
   181f8:	movw	r1, #47888	; 0xbb10
   181fc:	movt	r1, #1
   18200:	movw	r0, #47904	; 0xbb20
   18204:	movt	r0, #1
   18208:	mov	r2, #85	; 0x55
   1820c:	bl	110cc <__assert_fail@plt>
   18210:	cmp	r5, #0
   18214:	mov	r4, #1
   18218:	bge	18000 <__assert_fail@plt+0x6f34>
   1821c:	b	181e8 <__assert_fail@plt+0x711c>
   18220:	cmp	r5, #0
   18224:	mov	lr, #1
   18228:	mvnge	r5, #-2147483648	; 0x80000000
   1822c:	movlt	r5, #-2147483648	; 0x80000000
   18230:	b	18164 <__assert_fail@plt+0x7098>
   18234:	cmp	r5, #0
   18238:	mov	lr, #1
   1823c:	mvnge	r5, #-2147483648	; 0x80000000
   18240:	movlt	r5, #-2147483648	; 0x80000000
   18244:	b	18190 <__assert_fail@plt+0x70c4>
   18248:	cmp	r5, #0
   1824c:	mov	lr, #1
   18250:	mvnge	r5, #-2147483648	; 0x80000000
   18254:	movlt	r5, #-2147483648	; 0x80000000
   18258:	b	180ac <__assert_fail@plt+0x6fe0>
   1825c:	cmp	r5, #0
   18260:	mov	lr, #1
   18264:	mvnge	r5, #-2147483648	; 0x80000000
   18268:	movlt	r5, #-2147483648	; 0x80000000
   1826c:	b	1807c <__assert_fail@plt+0x6fb0>
   18270:	cmp	r5, #0
   18274:	mov	lr, #1
   18278:	mvnge	r5, #-2147483648	; 0x80000000
   1827c:	movlt	r5, #-2147483648	; 0x80000000
   18280:	b	180d8 <__assert_fail@plt+0x700c>
   18284:	cmp	r5, #0
   18288:	mov	lr, #1
   1828c:	mvnge	r5, #-2147483648	; 0x80000000
   18290:	movlt	r5, #-2147483648	; 0x80000000
   18294:	b	18138 <__assert_fail@plt+0x706c>
   18298:	cmp	r2, #36	; 0x24
   1829c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   182a0:	strd	r6, [sp, #8]
   182a4:	strd	r8, [sp, #16]
   182a8:	strd	sl, [sp, #24]
   182ac:	str	lr, [sp, #32]
   182b0:	sub	sp, sp, #36	; 0x24
   182b4:	bhi	18b44 <__assert_fail@plt+0x7a78>
   182b8:	cmp	r1, #0
   182bc:	mov	r8, r2
   182c0:	mov	r6, r0
   182c4:	mov	r5, r1
   182c8:	mov	sl, r3
   182cc:	addeq	r5, sp, #28
   182d0:	bl	10fd0 <__errno_location@plt>
   182d4:	mov	r3, #0
   182d8:	mov	r7, r0
   182dc:	str	r3, [r0]
   182e0:	bl	10fa0 <__ctype_b_loc@plt>
   182e4:	ldrb	r3, [r6]
   182e8:	mov	r2, r6
   182ec:	ldr	r0, [r0]
   182f0:	b	182f8 <__assert_fail@plt+0x722c>
   182f4:	ldrb	r3, [r2, #1]!
   182f8:	lsl	r1, r3, #1
   182fc:	ldrh	r4, [r0, r1]
   18300:	ands	r4, r4, #8192	; 0x2000
   18304:	bne	182f4 <__assert_fail@plt+0x7228>
   18308:	cmp	r3, #45	; 0x2d
   1830c:	beq	183ac <__assert_fail@plt+0x72e0>
   18310:	mov	r2, r8
   18314:	mov	r3, r4
   18318:	mov	r1, r5
   1831c:	mov	r0, r6
   18320:	bl	10e98 <__strtoull_internal@plt>
   18324:	ldr	fp, [r5]
   18328:	mov	r9, r0
   1832c:	mov	r8, r1
   18330:	cmp	fp, r6
   18334:	beq	18394 <__assert_fail@plt+0x72c8>
   18338:	ldr	r4, [r7]
   1833c:	cmp	r4, #0
   18340:	bne	18384 <__assert_fail@plt+0x72b8>
   18344:	ldr	r3, [sp, #72]	; 0x48
   18348:	cmp	r3, #0
   1834c:	beq	1835c <__assert_fail@plt+0x7290>
   18350:	ldrb	r6, [fp]
   18354:	cmp	r6, #0
   18358:	bne	1869c <__assert_fail@plt+0x75d0>
   1835c:	str	r9, [sl]
   18360:	str	r8, [sl, #4]
   18364:	mov	r0, r4
   18368:	add	sp, sp, #36	; 0x24
   1836c:	ldrd	r4, [sp]
   18370:	ldrd	r6, [sp, #8]
   18374:	ldrd	r8, [sp, #16]
   18378:	ldrd	sl, [sp, #24]
   1837c:	add	sp, sp, #32
   18380:	pop	{pc}		; (ldr pc, [sp], #4)
   18384:	cmp	r4, #34	; 0x22
   18388:	bne	183ac <__assert_fail@plt+0x72e0>
   1838c:	mov	r4, #1
   18390:	b	18344 <__assert_fail@plt+0x7278>
   18394:	ldr	r3, [sp, #72]	; 0x48
   18398:	cmp	r3, #0
   1839c:	beq	183ac <__assert_fail@plt+0x72e0>
   183a0:	ldrb	r6, [r6]
   183a4:	cmp	r6, #0
   183a8:	bne	183b4 <__assert_fail@plt+0x72e8>
   183ac:	mov	r4, #4
   183b0:	b	18364 <__assert_fail@plt+0x7298>
   183b4:	mov	r1, r6
   183b8:	mov	r0, r3
   183bc:	bl	10fc4 <strchr@plt>
   183c0:	cmp	r0, #0
   183c4:	movne	r9, #1
   183c8:	movne	r8, #0
   183cc:	beq	183ac <__assert_fail@plt+0x72e0>
   183d0:	sub	r3, r6, #69	; 0x45
   183d4:	cmp	r3, #47	; 0x2f
   183d8:	ldrls	pc, [pc, r3, lsl #2]
   183dc:	b	184e4 <__assert_fail@plt+0x7418>
   183e0:	andeq	r8, r1, r0, lsr #9
   183e4:	andeq	r8, r1, r4, ror #9
   183e8:	andeq	r8, r1, r0, lsr #9
   183ec:	andeq	r8, r1, r4, ror #9
   183f0:	andeq	r8, r1, r4, ror #9
   183f4:	andeq	r8, r1, r4, ror #9
   183f8:	andeq	r8, r1, r0, lsr #9
   183fc:	andeq	r8, r1, r4, ror #9
   18400:	andeq	r8, r1, r0, lsr #9
   18404:	andeq	r8, r1, r4, ror #9
   18408:	andeq	r8, r1, r4, ror #9
   1840c:	andeq	r8, r1, r0, lsr #9
   18410:	andeq	r8, r1, r4, ror #9
   18414:	andeq	r8, r1, r4, ror #9
   18418:	andeq	r8, r1, r4, ror #9
   1841c:	andeq	r8, r1, r0, lsr #9
   18420:	andeq	r8, r1, r4, ror #9
   18424:	andeq	r8, r1, r4, ror #9
   18428:	andeq	r8, r1, r4, ror #9
   1842c:	andeq	r8, r1, r4, ror #9
   18430:	andeq	r8, r1, r0, lsr #9
   18434:	andeq	r8, r1, r0, lsr #9
   18438:	andeq	r8, r1, r4, ror #9
   1843c:	andeq	r8, r1, r4, ror #9
   18440:	andeq	r8, r1, r4, ror #9
   18444:	andeq	r8, r1, r4, ror #9
   18448:	andeq	r8, r1, r4, ror #9
   1844c:	andeq	r8, r1, r4, ror #9
   18450:	andeq	r8, r1, r4, ror #9
   18454:	andeq	r8, r1, r4, ror #9
   18458:	andeq	r8, r1, r4, ror #9
   1845c:	andeq	r8, r1, r4, ror #9
   18460:	andeq	r8, r1, r4, ror #9
   18464:	andeq	r8, r1, r4, ror #9
   18468:	andeq	r8, r1, r0, lsr #9
   1846c:	andeq	r8, r1, r4, ror #9
   18470:	andeq	r8, r1, r4, ror #9
   18474:	andeq	r8, r1, r4, ror #9
   18478:	andeq	r8, r1, r0, lsr #9
   1847c:	andeq	r8, r1, r4, ror #9
   18480:	andeq	r8, r1, r0, lsr #9
   18484:	andeq	r8, r1, r4, ror #9
   18488:	andeq	r8, r1, r4, ror #9
   1848c:	andeq	r8, r1, r4, ror #9
   18490:	andeq	r8, r1, r4, ror #9
   18494:	andeq	r8, r1, r4, ror #9
   18498:	andeq	r8, r1, r4, ror #9
   1849c:	andeq	r8, r1, r0, lsr #9
   184a0:	mov	r1, #48	; 0x30
   184a4:	ldr	r0, [sp, #72]	; 0x48
   184a8:	bl	10fc4 <strchr@plt>
   184ac:	cmp	r0, #0
   184b0:	beq	184e4 <__assert_fail@plt+0x7418>
   184b4:	ldrb	r3, [fp, #1]
   184b8:	cmp	r3, #68	; 0x44
   184bc:	beq	18a10 <__assert_fail@plt+0x7944>
   184c0:	cmp	r3, #105	; 0x69
   184c4:	beq	186b4 <__assert_fail@plt+0x75e8>
   184c8:	cmp	r3, #66	; 0x42
   184cc:	moveq	r3, #2
   184d0:	movne	r3, #1
   184d4:	moveq	r7, #1000	; 0x3e8
   184d8:	movne	r7, #1024	; 0x400
   184dc:	str	r3, [sp, #4]
   184e0:	b	184f0 <__assert_fail@plt+0x7424>
   184e4:	mov	r3, #1
   184e8:	mov	r7, #1024	; 0x400
   184ec:	str	r3, [sp, #4]
   184f0:	sub	r6, r6, #66	; 0x42
   184f4:	cmp	r6, #53	; 0x35
   184f8:	ldrls	pc, [pc, r6, lsl #2]
   184fc:	b	18660 <__assert_fail@plt+0x7594>
   18500:			; <UNDEFINED> instruction: 0x000189b8
   18504:	andeq	r8, r1, r0, ror #12
   18508:	andeq	r8, r1, r0, ror #12
   1850c:	andeq	r8, r1, r4, asr #15
   18510:	andeq	r8, r1, r0, ror #12
   18514:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18518:	andeq	r8, r1, r0, ror #12
   1851c:	andeq	r8, r1, r0, ror #12
   18520:	andeq	r8, r1, r0, ror #12
   18524:	andeq	r8, r1, r8, ror #12
   18528:	andeq	r8, r1, r0, ror #12
   1852c:	andeq	r8, r1, r4, ror #18
   18530:	andeq	r8, r1, r0, ror #12
   18534:	andeq	r8, r1, r0, ror #12
   18538:			; <UNDEFINED> instruction: 0x000188b4
   1853c:	andeq	r8, r1, r0, ror #12
   18540:	andeq	r8, r1, r0, ror #12
   18544:	andeq	r8, r1, r0, ror #12
   18548:	andeq	r8, r1, ip, lsr r8
   1854c:	andeq	r8, r1, r0, ror #12
   18550:	andeq	r8, r1, r0, ror #12
   18554:	andeq	r8, r1, r0, ror #12
   18558:	andeq	r8, r1, r0, ror #12
   1855c:	andeq	r8, r1, ip, asr #14
   18560:	ldrdeq	r8, [r1], -r0
   18564:	andeq	r8, r1, r0, ror #12
   18568:	andeq	r8, r1, r0, ror #12
   1856c:	andeq	r8, r1, r0, ror #12
   18570:	andeq	r8, r1, r0, ror #12
   18574:	andeq	r8, r1, r0, ror #12
   18578:	andeq	r8, r1, r0, ror #12
   1857c:	andeq	r8, r1, r0, ror #12
   18580:	andeq	r8, r1, r4, asr #18
   18584:	andeq	r8, r1, r8, asr #12
   18588:	andeq	r8, r1, r0, ror #12
   1858c:	andeq	r8, r1, r0, ror #12
   18590:	andeq	r8, r1, r0, ror #12
   18594:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18598:	andeq	r8, r1, r0, ror #12
   1859c:	andeq	r8, r1, r0, ror #12
   185a0:	andeq	r8, r1, r0, ror #12
   185a4:	andeq	r8, r1, r8, ror #12
   185a8:	andeq	r8, r1, r0, ror #12
   185ac:	andeq	r8, r1, r4, ror #18
   185b0:	andeq	r8, r1, r0, ror #12
   185b4:	andeq	r8, r1, r0, ror #12
   185b8:	andeq	r8, r1, r0, ror #12
   185bc:	andeq	r8, r1, r0, ror #12
   185c0:	andeq	r8, r1, r0, ror #12
   185c4:	andeq	r8, r1, r0, ror #12
   185c8:	andeq	r8, r1, ip, lsr r8
   185cc:	andeq	r8, r1, r0, ror #12
   185d0:	andeq	r8, r1, r0, ror #12
   185d4:	andeq	r8, r1, ip, lsr #18
   185d8:	asr	r3, r7, #31
   185dc:	mov	r2, r7
   185e0:	cmp	r8, #0
   185e4:	umull	r0, r1, r9, r7
   185e8:	mov	ip, #0
   185ec:	strd	r2, [sp, #8]
   185f0:	bne	18a44 <__assert_fail@plt+0x7978>
   185f4:	mov	r2, r0
   185f8:	mov	r3, r1
   185fc:	cmp	ip, #0
   18600:	bne	1868c <__assert_fail@plt+0x75c0>
   18604:	cmp	r3, #0
   18608:	mov	lr, ip
   1860c:	bne	18aa8 <__assert_fail@plt+0x79dc>
   18610:	umull	r2, r3, r2, r7
   18614:	mov	ip, r2
   18618:	mov	r1, r3
   1861c:	subs	r0, lr, #0
   18620:	bne	1868c <__assert_fail@plt+0x75c0>
   18624:	cmp	r1, #0
   18628:	bne	18a88 <__assert_fail@plt+0x79bc>
   1862c:	umull	r2, r3, ip, r7
   18630:	mov	r6, r2
   18634:	mov	r2, r3
   18638:	cmp	r0, #0
   1863c:	mov	r9, r6
   18640:	mov	r8, r2
   18644:	bne	1868c <__assert_fail@plt+0x75c0>
   18648:	ldr	r2, [sp, #4]
   1864c:	add	r3, fp, r2
   18650:	str	r3, [r5]
   18654:	ldrb	r3, [fp, r2]
   18658:	cmp	r3, #0
   1865c:	beq	1835c <__assert_fail@plt+0x7290>
   18660:	orr	r4, r4, #2
   18664:	b	1835c <__assert_fail@plt+0x7290>
   18668:	cmp	r8, #0
   1866c:	umull	r2, r3, r9, r7
   18670:	mov	ip, #0
   18674:	asr	r1, r7, #31
   18678:	bne	189e0 <__assert_fail@plt+0x7914>
   1867c:	mov	r9, r2
   18680:	mov	r8, r3
   18684:	cmp	ip, #0
   18688:	beq	18648 <__assert_fail@plt+0x757c>
   1868c:	mvn	r9, #0
   18690:	mov	r4, #1
   18694:	mov	r8, r9
   18698:	b	18648 <__assert_fail@plt+0x757c>
   1869c:	mov	r1, r6
   186a0:	ldr	r0, [sp, #72]	; 0x48
   186a4:	bl	10fc4 <strchr@plt>
   186a8:	cmp	r0, #0
   186ac:	bne	183d0 <__assert_fail@plt+0x7304>
   186b0:	b	18660 <__assert_fail@plt+0x7594>
   186b4:	ldrb	r3, [fp, #2]
   186b8:	mov	r7, #1024	; 0x400
   186bc:	cmp	r3, #66	; 0x42
   186c0:	movne	r3, #1
   186c4:	moveq	r3, #3
   186c8:	str	r3, [sp, #4]
   186cc:	b	184f0 <__assert_fail@plt+0x7424>
   186d0:	asr	r3, r7, #31
   186d4:	mov	r2, r7
   186d8:	mov	ip, #0
   186dc:	mov	r0, #7
   186e0:	mov	lr, ip
   186e4:	mov	r6, r4
   186e8:	strd	r2, [sp, #8]
   186ec:	str	r5, [sp, #16]
   186f0:	b	1871c <__assert_fail@plt+0x7650>
   186f4:	umull	r2, r3, r9, r7
   186f8:	mov	r9, r2
   186fc:	mov	r8, r3
   18700:	cmp	r1, #0
   18704:	beq	18714 <__assert_fail@plt+0x7648>
   18708:	mvn	r9, #0
   1870c:	mov	ip, #1
   18710:	mov	r8, r9
   18714:	subs	r0, r0, #1
   18718:	beq	18a04 <__assert_fail@plt+0x7938>
   1871c:	cmp	r8, #0
   18720:	mov	r1, #0
   18724:	beq	186f4 <__assert_fail@plt+0x7628>
   18728:	umull	r4, r5, r9, r7
   1872c:	mov	r3, lr
   18730:	mov	r2, r5
   18734:	umlal	r2, r3, r8, r7
   18738:	cmp	r3, #0
   1873c:	bne	18b64 <__assert_fail@plt+0x7a98>
   18740:	mov	r9, r4
   18744:	mov	r8, r2
   18748:	b	18700 <__assert_fail@plt+0x7634>
   1874c:	asr	r3, r7, #31
   18750:	mov	r2, r7
   18754:	mov	r6, #0
   18758:	mov	lr, #8
   1875c:	mov	r0, r4
   18760:	mov	ip, r5
   18764:	strd	r2, [sp, #8]
   18768:	b	18794 <__assert_fail@plt+0x76c8>
   1876c:	umull	r2, r3, r9, r7
   18770:	mov	r9, r2
   18774:	mov	r8, r3
   18778:	cmp	r1, #0
   1877c:	beq	1878c <__assert_fail@plt+0x76c0>
   18780:	mvn	r9, #0
   18784:	mov	r6, #1
   18788:	mov	r8, r9
   1878c:	subs	lr, lr, #1
   18790:	beq	189d4 <__assert_fail@plt+0x7908>
   18794:	cmp	r8, #0
   18798:	mov	r1, #0
   1879c:	beq	1876c <__assert_fail@plt+0x76a0>
   187a0:	umull	r4, r5, r9, r7
   187a4:	mov	r3, #0
   187a8:	mov	r2, r5
   187ac:	umlal	r2, r3, r8, r7
   187b0:	cmp	r3, #0
   187b4:	bne	18bbc <__assert_fail@plt+0x7af0>
   187b8:	mov	r9, r4
   187bc:	mov	r8, r2
   187c0:	b	18778 <__assert_fail@plt+0x76ac>
   187c4:	asr	r3, r7, #31
   187c8:	mov	r2, r7
   187cc:	mov	r6, #0
   187d0:	mov	lr, #6
   187d4:	mov	r0, r4
   187d8:	mov	ip, r5
   187dc:	strd	r2, [sp, #8]
   187e0:	b	1880c <__assert_fail@plt+0x7740>
   187e4:	umull	r2, r3, r9, r7
   187e8:	mov	r9, r2
   187ec:	mov	r8, r3
   187f0:	cmp	r1, #0
   187f4:	beq	18804 <__assert_fail@plt+0x7738>
   187f8:	mvn	r9, #0
   187fc:	mov	r6, #1
   18800:	mov	r8, r9
   18804:	subs	lr, lr, #1
   18808:	beq	189d4 <__assert_fail@plt+0x7908>
   1880c:	cmp	r8, #0
   18810:	mov	r1, #0
   18814:	beq	187e4 <__assert_fail@plt+0x7718>
   18818:	umull	r4, r5, r9, r7
   1881c:	mov	r3, #0
   18820:	mov	r2, r5
   18824:	umlal	r2, r3, r8, r7
   18828:	cmp	r3, #0
   1882c:	bne	18b84 <__assert_fail@plt+0x7ab8>
   18830:	mov	r9, r4
   18834:	mov	r8, r2
   18838:	b	187f0 <__assert_fail@plt+0x7724>
   1883c:	asr	r3, r7, #31
   18840:	mov	r2, r7
   18844:	mov	r6, #0
   18848:	mov	lr, #4
   1884c:	mov	r0, r4
   18850:	mov	ip, r5
   18854:	strd	r2, [sp, #8]
   18858:	b	18884 <__assert_fail@plt+0x77b8>
   1885c:	umull	r2, r3, r9, r7
   18860:	mov	r9, r2
   18864:	mov	r8, r3
   18868:	cmp	r1, #0
   1886c:	beq	1887c <__assert_fail@plt+0x77b0>
   18870:	mvn	r9, #0
   18874:	mov	r6, #1
   18878:	mov	r8, r9
   1887c:	subs	lr, lr, #1
   18880:	beq	189d4 <__assert_fail@plt+0x7908>
   18884:	cmp	r8, #0
   18888:	mov	r1, #0
   1888c:	beq	1885c <__assert_fail@plt+0x7790>
   18890:	umull	r4, r5, r9, r7
   18894:	mov	r3, #0
   18898:	mov	r2, r5
   1889c:	umlal	r2, r3, r8, r7
   188a0:	cmp	r3, #0
   188a4:	bne	18ba0 <__assert_fail@plt+0x7ad4>
   188a8:	mov	r9, r4
   188ac:	mov	r8, r2
   188b0:	b	18868 <__assert_fail@plt+0x779c>
   188b4:	asr	r3, r7, #31
   188b8:	mov	r2, r7
   188bc:	mov	r6, #0
   188c0:	mov	lr, #5
   188c4:	mov	r0, r4
   188c8:	mov	ip, r5
   188cc:	strd	r2, [sp, #8]
   188d0:	b	188fc <__assert_fail@plt+0x7830>
   188d4:	umull	r2, r3, r9, r7
   188d8:	mov	r9, r2
   188dc:	mov	r8, r3
   188e0:	cmp	r1, #0
   188e4:	beq	188f4 <__assert_fail@plt+0x7828>
   188e8:	mvn	r9, #0
   188ec:	mov	r6, #1
   188f0:	mov	r8, r9
   188f4:	subs	lr, lr, #1
   188f8:	beq	189d4 <__assert_fail@plt+0x7908>
   188fc:	cmp	r8, #0
   18900:	mov	r1, #0
   18904:	beq	188d4 <__assert_fail@plt+0x7808>
   18908:	umull	r4, r5, r9, r7
   1890c:	mov	r3, #0
   18910:	mov	r2, r5
   18914:	umlal	r2, r3, r8, r7
   18918:	cmp	r3, #0
   1891c:	bne	18b0c <__assert_fail@plt+0x7a40>
   18920:	mov	r9, r4
   18924:	mov	r8, r2
   18928:	b	188e0 <__assert_fail@plt+0x7814>
   1892c:	lsr	r3, r8, #31
   18930:	adds	r9, r9, r9
   18934:	adc	r8, r8, r8
   18938:	cmp	r3, #0
   1893c:	beq	18648 <__assert_fail@plt+0x757c>
   18940:	b	1868c <__assert_fail@plt+0x75c0>
   18944:	lsr	r3, r8, #23
   18948:	lsl	r8, r8, #9
   1894c:	cmp	r3, #0
   18950:	lsl	r3, r9, #9
   18954:	orr	r8, r8, r9, lsr #23
   18958:	bne	1868c <__assert_fail@plt+0x75c0>
   1895c:	mov	r9, r3
   18960:	b	18648 <__assert_fail@plt+0x757c>
   18964:	asr	r3, r7, #31
   18968:	mov	r2, r7
   1896c:	cmp	r8, #0
   18970:	mov	r1, #0
   18974:	strd	r2, [sp, #8]
   18978:	umull	r2, r3, r9, r7
   1897c:	bne	18a20 <__assert_fail@plt+0x7954>
   18980:	mov	r0, r2
   18984:	mov	ip, r3
   18988:	cmp	r1, #0
   1898c:	bne	1868c <__assert_fail@plt+0x75c0>
   18990:	cmp	ip, #0
   18994:	bne	18a68 <__assert_fail@plt+0x799c>
   18998:	umull	r2, r3, r0, r7
   1899c:	mov	r6, r2
   189a0:	mov	r2, r3
   189a4:	cmp	r1, #0
   189a8:	mov	r9, r6
   189ac:	mov	r8, r2
   189b0:	beq	18648 <__assert_fail@plt+0x757c>
   189b4:	b	1868c <__assert_fail@plt+0x75c0>
   189b8:	lsr	r3, r8, #22
   189bc:	lsl	r8, r8, #10
   189c0:	cmp	r3, #0
   189c4:	lsl	r3, r9, #10
   189c8:	orr	r8, r8, r9, lsr #22
   189cc:	beq	1895c <__assert_fail@plt+0x7890>
   189d0:	b	1868c <__assert_fail@plt+0x75c0>
   189d4:	mov	r5, ip
   189d8:	orr	r4, r0, r6
   189dc:	b	18648 <__assert_fail@plt+0x757c>
   189e0:	strd	r2, [sp, #8]
   189e4:	mov	r3, ip
   189e8:	ldr	r2, [sp, #12]
   189ec:	umlal	r2, r3, r8, r7
   189f0:	cmp	r3, #0
   189f4:	bne	18b28 <__assert_fail@plt+0x7a5c>
   189f8:	mov	r8, r2
   189fc:	ldr	r9, [sp, #8]
   18a00:	b	18684 <__assert_fail@plt+0x75b8>
   18a04:	orr	r4, r6, ip
   18a08:	ldr	r5, [sp, #16]
   18a0c:	b	18648 <__assert_fail@plt+0x757c>
   18a10:	mov	r3, #2
   18a14:	mov	r7, #1000	; 0x3e8
   18a18:	str	r3, [sp, #4]
   18a1c:	b	184f0 <__assert_fail@plt+0x7424>
   18a20:	strd	r2, [sp, #16]
   18a24:	mov	r3, r1
   18a28:	ldr	r2, [sp, #20]
   18a2c:	umlal	r2, r3, r8, r7
   18a30:	cmp	r3, #0
   18a34:	bne	18bf8 <__assert_fail@plt+0x7b2c>
   18a38:	mov	ip, r2
   18a3c:	ldr	r0, [sp, #16]
   18a40:	b	18988 <__assert_fail@plt+0x78bc>
   18a44:	mov	r2, r1
   18a48:	mov	r3, ip
   18a4c:	umlal	r2, r3, r8, r7
   18a50:	cmp	r3, #0
   18a54:	strd	r2, [sp, #16]
   18a58:	bne	18acc <__assert_fail@plt+0x7a00>
   18a5c:	mov	r2, r0
   18a60:	ldr	r3, [sp, #16]
   18a64:	b	185fc <__assert_fail@plt+0x7530>
   18a68:	umull	r8, r9, r0, r7
   18a6c:	mov	r3, r1
   18a70:	mov	r2, r9
   18a74:	umlal	r2, r3, ip, r7
   18a78:	cmp	r3, #0
   18a7c:	bne	18bd8 <__assert_fail@plt+0x7b0c>
   18a80:	mov	r6, r8
   18a84:	b	189a4 <__assert_fail@plt+0x78d8>
   18a88:	umull	r8, r9, ip, r7
   18a8c:	mov	r3, r0
   18a90:	mov	r2, r9
   18a94:	umlal	r2, r3, r1, r7
   18a98:	cmp	r3, #0
   18a9c:	bne	18c20 <__assert_fail@plt+0x7b54>
   18aa0:	mov	r6, r8
   18aa4:	b	18638 <__assert_fail@plt+0x756c>
   18aa8:	umull	r8, r9, r2, r7
   18aac:	mov	r1, ip
   18ab0:	mov	r0, r9
   18ab4:	umlal	r0, r1, r3, r7
   18ab8:	cmp	r1, #0
   18abc:	bne	18aec <__assert_fail@plt+0x7a20>
   18ac0:	mov	ip, r8
   18ac4:	mov	r1, r0
   18ac8:	b	1861c <__assert_fail@plt+0x7550>
   18acc:	ldr	lr, [sp, #8]
   18ad0:	mov	r2, r0
   18ad4:	mov	ip, #1
   18ad8:	ldr	r3, [sp, #12]
   18adc:	mul	r3, r9, r3
   18ae0:	mla	r3, lr, r8, r3
   18ae4:	add	r3, r3, r1
   18ae8:	b	185fc <__assert_fail@plt+0x7530>
   18aec:	ldr	r1, [sp, #12]
   18af0:	mov	lr, #1
   18af4:	mov	ip, r8
   18af8:	mul	r1, r2, r1
   18afc:	ldr	r2, [sp, #8]
   18b00:	mla	r1, r3, r2, r1
   18b04:	add	r1, r1, r9
   18b08:	b	1861c <__assert_fail@plt+0x7550>
   18b0c:	ldrd	r2, [sp, #8]
   18b10:	mov	r1, #1
   18b14:	mul	r3, r9, r3
   18b18:	mov	r9, r4
   18b1c:	mla	r8, r2, r8, r3
   18b20:	add	r8, r8, r5
   18b24:	b	188e0 <__assert_fail@plt+0x7814>
   18b28:	mul	r3, r9, r1
   18b2c:	mov	ip, #1
   18b30:	mla	r8, r7, r8, r3
   18b34:	ldrd	r6, [sp, #8]
   18b38:	mov	r9, r6
   18b3c:	add	r8, r8, r7
   18b40:	b	18684 <__assert_fail@plt+0x75b8>
   18b44:	movw	r3, #47944	; 0xbb48
   18b48:	movt	r3, #1
   18b4c:	movw	r1, #47888	; 0xbb10
   18b50:	movt	r1, #1
   18b54:	movw	r0, #47904	; 0xbb20
   18b58:	movt	r0, #1
   18b5c:	mov	r2, #85	; 0x55
   18b60:	bl	110cc <__assert_fail@plt>
   18b64:	ldr	r3, [sp, #12]
   18b68:	mov	r1, #1
   18b6c:	mul	r2, r9, r3
   18b70:	ldr	r3, [sp, #8]
   18b74:	mov	r9, r4
   18b78:	mla	r8, r3, r8, r2
   18b7c:	add	r8, r8, r5
   18b80:	b	18700 <__assert_fail@plt+0x7634>
   18b84:	ldrd	r2, [sp, #8]
   18b88:	mov	r1, #1
   18b8c:	mul	r3, r9, r3
   18b90:	mov	r9, r4
   18b94:	mla	r8, r2, r8, r3
   18b98:	add	r8, r8, r5
   18b9c:	b	187f0 <__assert_fail@plt+0x7724>
   18ba0:	ldrd	r2, [sp, #8]
   18ba4:	mov	r1, #1
   18ba8:	mul	r3, r9, r3
   18bac:	mov	r9, r4
   18bb0:	mla	r8, r2, r8, r3
   18bb4:	add	r8, r8, r5
   18bb8:	b	18868 <__assert_fail@plt+0x779c>
   18bbc:	ldrd	r2, [sp, #8]
   18bc0:	mov	r1, #1
   18bc4:	mul	r3, r9, r3
   18bc8:	mov	r9, r4
   18bcc:	mla	r8, r2, r8, r3
   18bd0:	add	r8, r8, r5
   18bd4:	b	18778 <__assert_fail@plt+0x76ac>
   18bd8:	ldr	r3, [sp, #12]
   18bdc:	mov	r6, r8
   18be0:	mov	r1, #1
   18be4:	mul	r2, r0, r3
   18be8:	ldr	r3, [sp, #8]
   18bec:	mla	r2, ip, r3, r2
   18bf0:	add	r2, r2, r9
   18bf4:	b	189a4 <__assert_fail@plt+0x78d8>
   18bf8:	ldr	r3, [sp, #12]
   18bfc:	mov	r1, #1
   18c00:	ldr	r2, [sp, #16]
   18c04:	mul	ip, r9, r3
   18c08:	ldr	r3, [sp, #8]
   18c0c:	mov	r0, r2
   18c10:	mla	ip, r3, r8, ip
   18c14:	ldr	r3, [sp, #20]
   18c18:	add	ip, ip, r3
   18c1c:	b	18988 <__assert_fail@plt+0x78bc>
   18c20:	ldr	r3, [sp, #12]
   18c24:	mov	r6, r8
   18c28:	mov	r0, #1
   18c2c:	mul	r2, ip, r3
   18c30:	ldr	r3, [sp, #8]
   18c34:	mla	r2, r1, r3, r2
   18c38:	add	r2, r2, r9
   18c3c:	b	18638 <__assert_fail@plt+0x756c>
   18c40:	cmp	r1, #0
   18c44:	cmpne	r0, #0
   18c48:	beq	18c94 <__assert_fail@plt+0x7bc8>
   18c4c:	strd	r4, [sp, #-16]!
   18c50:	umull	r4, r5, r0, r1
   18c54:	str	r6, [sp, #8]
   18c58:	str	lr, [sp, #12]
   18c5c:	adds	r3, r5, #0
   18c60:	movne	r3, #1
   18c64:	cmp	r4, #0
   18c68:	blt	18c74 <__assert_fail@plt+0x7ba8>
   18c6c:	cmp	r3, #0
   18c70:	beq	18ca0 <__assert_fail@plt+0x7bd4>
   18c74:	bl	10fd0 <__errno_location@plt>
   18c78:	mov	r3, #12
   18c7c:	ldrd	r4, [sp]
   18c80:	ldr	r6, [sp, #8]
   18c84:	add	sp, sp, #12
   18c88:	str	r3, [r0]
   18c8c:	mov	r0, #0
   18c90:	pop	{pc}		; (ldr pc, [sp], #4)
   18c94:	mov	r1, #1
   18c98:	mov	r0, r1
   18c9c:	b	10e14 <calloc@plt>
   18ca0:	ldrd	r4, [sp]
   18ca4:	ldr	r6, [sp, #8]
   18ca8:	ldr	lr, [sp, #12]
   18cac:	add	sp, sp, #16
   18cb0:	b	10e14 <calloc@plt>
   18cb4:	cmp	r0, #0
   18cb8:	beq	18cc4 <__assert_fail@plt+0x7bf8>
   18cbc:	blt	18ccc <__assert_fail@plt+0x7c00>
   18cc0:	b	10f58 <malloc@plt>
   18cc4:	mov	r0, #1
   18cc8:	b	10f58 <malloc@plt>
   18ccc:	str	r4, [sp, #-8]!
   18cd0:	str	lr, [sp, #4]
   18cd4:	bl	10fd0 <__errno_location@plt>
   18cd8:	mov	r3, #12
   18cdc:	ldr	r4, [sp]
   18ce0:	add	sp, sp, #4
   18ce4:	str	r3, [r0]
   18ce8:	mov	r0, #0
   18cec:	pop	{pc}		; (ldr pc, [sp], #4)
   18cf0:	cmp	r0, #0
   18cf4:	beq	18d1c <__assert_fail@plt+0x7c50>
   18cf8:	cmp	r1, #0
   18cfc:	str	r4, [sp, #-8]!
   18d00:	str	lr, [sp, #4]
   18d04:	beq	18d24 <__assert_fail@plt+0x7c58>
   18d08:	blt	18d38 <__assert_fail@plt+0x7c6c>
   18d0c:	ldr	r4, [sp]
   18d10:	ldr	lr, [sp, #4]
   18d14:	add	sp, sp, #8
   18d18:	b	10ed4 <realloc@plt>
   18d1c:	mov	r0, r1
   18d20:	b	18cb4 <__assert_fail@plt+0x7be8>
   18d24:	bl	14a24 <__assert_fail@plt+0x3958>
   18d28:	ldr	r4, [sp]
   18d2c:	add	sp, sp, #4
   18d30:	mov	r0, #0
   18d34:	pop	{pc}		; (ldr pc, [sp], #4)
   18d38:	bl	10fd0 <__errno_location@plt>
   18d3c:	mov	r3, #12
   18d40:	str	r3, [r0]
   18d44:	b	18d28 <__assert_fail@plt+0x7c5c>
   18d48:	strd	r4, [sp, #-16]!
   18d4c:	mov	r4, r0
   18d50:	str	r6, [sp, #8]
   18d54:	str	lr, [sp, #12]
   18d58:	bl	10f28 <__fpending@plt>
   18d5c:	ldr	r5, [r4]
   18d60:	mov	r6, r0
   18d64:	mov	r0, r4
   18d68:	bl	18dd0 <__assert_fail@plt+0x7d04>
   18d6c:	mov	r4, r0
   18d70:	and	r5, r5, #32
   18d74:	cmp	r5, #0
   18d78:	bne	18db0 <__assert_fail@plt+0x7ce4>
   18d7c:	cmp	r0, #0
   18d80:	beq	18d9c <__assert_fail@plt+0x7cd0>
   18d84:	cmp	r6, #0
   18d88:	bne	18dc8 <__assert_fail@plt+0x7cfc>
   18d8c:	bl	10fd0 <__errno_location@plt>
   18d90:	ldr	r4, [r0]
   18d94:	subs	r4, r4, #9
   18d98:	mvnne	r4, #0
   18d9c:	mov	r0, r4
   18da0:	ldrd	r4, [sp]
   18da4:	ldr	r6, [sp, #8]
   18da8:	add	sp, sp, #12
   18dac:	pop	{pc}		; (ldr pc, [sp], #4)
   18db0:	cmp	r0, #0
   18db4:	bne	18dc8 <__assert_fail@plt+0x7cfc>
   18db8:	bl	10fd0 <__errno_location@plt>
   18dbc:	str	r4, [r0]
   18dc0:	mvn	r4, #0
   18dc4:	b	18d9c <__assert_fail@plt+0x7cd0>
   18dc8:	mvn	r4, #0
   18dcc:	b	18d9c <__assert_fail@plt+0x7cd0>
   18dd0:	strd	r4, [sp, #-12]!
   18dd4:	mov	r4, r0
   18dd8:	str	lr, [sp, #8]
   18ddc:	sub	sp, sp, #12
   18de0:	bl	11000 <fileno@plt>
   18de4:	cmp	r0, #0
   18de8:	mov	r0, r4
   18dec:	blt	18e70 <__assert_fail@plt+0x7da4>
   18df0:	bl	10f70 <__freading@plt>
   18df4:	cmp	r0, #0
   18df8:	bne	18e3c <__assert_fail@plt+0x7d70>
   18dfc:	mov	r0, r4
   18e00:	bl	18e84 <__assert_fail@plt+0x7db8>
   18e04:	cmp	r0, #0
   18e08:	beq	18e6c <__assert_fail@plt+0x7da0>
   18e0c:	bl	10fd0 <__errno_location@plt>
   18e10:	mov	r5, r0
   18e14:	mov	r0, r4
   18e18:	ldr	r4, [r5]
   18e1c:	bl	11018 <fclose@plt>
   18e20:	cmp	r4, #0
   18e24:	mvnne	r0, #0
   18e28:	strne	r4, [r5]
   18e2c:	add	sp, sp, #12
   18e30:	ldrd	r4, [sp]
   18e34:	add	sp, sp, #8
   18e38:	pop	{pc}		; (ldr pc, [sp], #4)
   18e3c:	mov	r0, r4
   18e40:	bl	11000 <fileno@plt>
   18e44:	mov	r1, #1
   18e48:	mov	r2, #0
   18e4c:	mov	r3, #0
   18e50:	str	r1, [sp]
   18e54:	bl	10f04 <lseek64@plt>
   18e58:	mvn	r3, #0
   18e5c:	mvn	r2, #0
   18e60:	cmp	r1, r3
   18e64:	cmpeq	r0, r2
   18e68:	bne	18dfc <__assert_fail@plt+0x7d30>
   18e6c:	mov	r0, r4
   18e70:	add	sp, sp, #12
   18e74:	ldrd	r4, [sp]
   18e78:	ldr	lr, [sp, #8]
   18e7c:	add	sp, sp, #12
   18e80:	b	11018 <fclose@plt>
   18e84:	str	r4, [sp, #-8]!
   18e88:	subs	r4, r0, #0
   18e8c:	str	lr, [sp, #4]
   18e90:	sub	sp, sp, #8
   18e94:	beq	18eb0 <__assert_fail@plt+0x7de4>
   18e98:	bl	10f70 <__freading@plt>
   18e9c:	cmp	r0, #0
   18ea0:	beq	18eb0 <__assert_fail@plt+0x7de4>
   18ea4:	ldr	r3, [r4]
   18ea8:	tst	r3, #256	; 0x100
   18eac:	bne	18ec8 <__assert_fail@plt+0x7dfc>
   18eb0:	mov	r0, r4
   18eb4:	add	sp, sp, #8
   18eb8:	ldr	r4, [sp]
   18ebc:	ldr	lr, [sp, #4]
   18ec0:	add	sp, sp, #8
   18ec4:	b	10e50 <fflush@plt>
   18ec8:	mov	r1, #1
   18ecc:	mov	r2, #0
   18ed0:	mov	r3, #0
   18ed4:	mov	r0, r4
   18ed8:	str	r1, [sp]
   18edc:	bl	18ee4 <__assert_fail@plt+0x7e18>
   18ee0:	b	18eb0 <__assert_fail@plt+0x7de4>
   18ee4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18ee8:	mov	r4, r0
   18eec:	ldr	ip, [r0, #4]
   18ef0:	strd	r6, [sp, #8]
   18ef4:	str	lr, [sp, #20]
   18ef8:	ldr	lr, [r0, #8]
   18efc:	str	r8, [sp, #16]
   18f00:	sub	sp, sp, #8
   18f04:	ldr	r5, [sp, #32]
   18f08:	cmp	lr, ip
   18f0c:	beq	18f34 <__assert_fail@plt+0x7e68>
   18f10:	mov	r0, r4
   18f14:	str	r5, [sp, #32]
   18f18:	add	sp, sp, #8
   18f1c:	ldrd	r4, [sp]
   18f20:	ldrd	r6, [sp, #8]
   18f24:	ldr	r8, [sp, #16]
   18f28:	ldr	lr, [sp, #20]
   18f2c:	add	sp, sp, #24
   18f30:	b	11024 <fseeko64@plt>
   18f34:	ldr	ip, [r0, #16]
   18f38:	ldr	lr, [r0, #20]
   18f3c:	cmp	lr, ip
   18f40:	bne	18f10 <__assert_fail@plt+0x7e44>
   18f44:	ldr	r8, [r0, #36]	; 0x24
   18f48:	cmp	r8, #0
   18f4c:	bne	18f10 <__assert_fail@plt+0x7e44>
   18f50:	mov	r6, r2
   18f54:	mov	r7, r3
   18f58:	bl	11000 <fileno@plt>
   18f5c:	mov	r2, r6
   18f60:	mov	r3, r7
   18f64:	str	r5, [sp]
   18f68:	bl	10f04 <lseek64@plt>
   18f6c:	mvn	r3, #0
   18f70:	mvn	r2, #0
   18f74:	cmp	r1, r3
   18f78:	cmpeq	r0, r2
   18f7c:	beq	18fac <__assert_fail@plt+0x7ee0>
   18f80:	ldr	r3, [r4]
   18f84:	strd	r0, [r4, #80]	; 0x50
   18f88:	bic	r3, r3, #16
   18f8c:	str	r3, [r4]
   18f90:	mov	r0, r8
   18f94:	add	sp, sp, #8
   18f98:	ldrd	r4, [sp]
   18f9c:	ldrd	r6, [sp, #8]
   18fa0:	ldr	r8, [sp, #16]
   18fa4:	add	sp, sp, #20
   18fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fac:	mvn	r8, #0
   18fb0:	b	18f90 <__assert_fail@plt+0x7ec4>
   18fb4:	mov	r0, #14
   18fb8:	str	r4, [sp, #-8]!
   18fbc:	str	lr, [sp, #4]
   18fc0:	bl	11060 <nl_langinfo@plt>
   18fc4:	cmp	r0, #0
   18fc8:	beq	18fec <__assert_fail@plt+0x7f20>
   18fcc:	ldrb	r2, [r0]
   18fd0:	movw	r3, #47956	; 0xbb54
   18fd4:	movt	r3, #1
   18fd8:	ldr	r4, [sp]
   18fdc:	add	sp, sp, #4
   18fe0:	cmp	r2, #0
   18fe4:	moveq	r0, r3
   18fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fec:	ldr	r4, [sp]
   18ff0:	add	sp, sp, #4
   18ff4:	movw	r0, #47956	; 0xbb54
   18ff8:	movt	r0, #1
   18ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   19000:	strd	r4, [sp, #-20]!	; 0xffffffec
   19004:	mov	r5, r2
   19008:	strd	r6, [sp, #8]
   1900c:	subs	r6, r0, #0
   19010:	mov	r7, r1
   19014:	str	lr, [sp, #16]
   19018:	sub	sp, sp, #12
   1901c:	addeq	r6, sp, #4
   19020:	mov	r0, r6
   19024:	bl	10f34 <mbrtowc@plt>
   19028:	cmp	r5, #0
   1902c:	cmnne	r0, #3
   19030:	mov	r4, r0
   19034:	bhi	19050 <__assert_fail@plt+0x7f84>
   19038:	mov	r0, r4
   1903c:	add	sp, sp, #12
   19040:	ldrd	r4, [sp]
   19044:	ldrd	r6, [sp, #8]
   19048:	add	sp, sp, #16
   1904c:	pop	{pc}		; (ldr pc, [sp], #4)
   19050:	mov	r0, #0
   19054:	bl	190a8 <__assert_fail@plt+0x7fdc>
   19058:	cmp	r0, #0
   1905c:	bne	19038 <__assert_fail@plt+0x7f6c>
   19060:	ldrb	r3, [r7]
   19064:	mov	r4, #1
   19068:	str	r3, [r6]
   1906c:	b	19038 <__assert_fail@plt+0x7f6c>
   19070:	umull	r2, r3, r1, r2
   19074:	cmp	r3, #0
   19078:	bne	19084 <__assert_fail@plt+0x7fb8>
   1907c:	mov	r1, r2
   19080:	b	18cf0 <__assert_fail@plt+0x7c24>
   19084:	str	r4, [sp, #-8]!
   19088:	str	lr, [sp, #4]
   1908c:	bl	10fd0 <__errno_location@plt>
   19090:	mov	r3, #12
   19094:	ldr	r4, [sp]
   19098:	add	sp, sp, #4
   1909c:	str	r3, [r0]
   190a0:	mov	r0, #0
   190a4:	pop	{pc}		; (ldr pc, [sp], #4)
   190a8:	push	{lr}		; (str lr, [sp, #-4]!)
   190ac:	sub	sp, sp, #268	; 0x10c
   190b0:	movw	r2, #257	; 0x101
   190b4:	add	r1, sp, #4
   190b8:	bl	19100 <__assert_fail@plt+0x8034>
   190bc:	cmp	r0, #0
   190c0:	movne	r0, #0
   190c4:	bne	190f8 <__assert_fail@plt+0x802c>
   190c8:	movw	r1, #47964	; 0xbb5c
   190cc:	movt	r1, #1
   190d0:	add	r0, sp, #4
   190d4:	bl	10e38 <strcmp@plt>
   190d8:	cmp	r0, #0
   190dc:	beq	190f8 <__assert_fail@plt+0x802c>
   190e0:	add	r0, sp, #4
   190e4:	movw	r1, #47968	; 0xbb60
   190e8:	movt	r1, #1
   190ec:	bl	10e38 <strcmp@plt>
   190f0:	adds	r0, r0, #0
   190f4:	movne	r0, #1
   190f8:	add	sp, sp, #268	; 0x10c
   190fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19100:	strd	r4, [sp, #-16]!
   19104:	mov	r5, r1
   19108:	mov	r1, #0
   1910c:	mov	r4, r2
   19110:	str	r6, [sp, #8]
   19114:	str	lr, [sp, #12]
   19118:	bl	1103c <setlocale@plt>
   1911c:	subs	r6, r0, #0
   19120:	beq	191a0 <__assert_fail@plt+0x80d4>
   19124:	bl	10fb8 <strlen@plt>
   19128:	cmp	r4, r0
   1912c:	bhi	1914c <__assert_fail@plt+0x8080>
   19130:	cmp	r4, #0
   19134:	moveq	r0, #34	; 0x22
   19138:	bne	19170 <__assert_fail@plt+0x80a4>
   1913c:	ldrd	r4, [sp]
   19140:	ldr	r6, [sp, #8]
   19144:	add	sp, sp, #12
   19148:	pop	{pc}		; (ldr pc, [sp], #4)
   1914c:	add	r2, r0, #1
   19150:	mov	r1, r6
   19154:	mov	r0, r5
   19158:	bl	10e8c <memcpy@plt>
   1915c:	ldrd	r4, [sp]
   19160:	mov	r0, #0
   19164:	ldr	r6, [sp, #8]
   19168:	add	sp, sp, #12
   1916c:	pop	{pc}		; (ldr pc, [sp], #4)
   19170:	sub	r4, r4, #1
   19174:	mov	r1, r6
   19178:	mov	r2, r4
   1917c:	mov	r0, r5
   19180:	bl	10e8c <memcpy@plt>
   19184:	mov	r3, #0
   19188:	mov	r0, #34	; 0x22
   1918c:	strb	r3, [r5, r4]
   19190:	ldrd	r4, [sp]
   19194:	ldr	r6, [sp, #8]
   19198:	add	sp, sp, #12
   1919c:	pop	{pc}		; (ldr pc, [sp], #4)
   191a0:	cmp	r4, #0
   191a4:	mov	r0, #22
   191a8:	strbne	r6, [r5]
   191ac:	ldrd	r4, [sp]
   191b0:	ldr	r6, [sp, #8]
   191b4:	add	sp, sp, #12
   191b8:	pop	{pc}		; (ldr pc, [sp], #4)
   191bc:	mov	r1, #0
   191c0:	b	1103c <setlocale@plt>
   191c4:	eor	r1, r1, #-2147483648	; 0x80000000
   191c8:	b	191d0 <__assert_fail@plt+0x8104>
   191cc:	eor	r3, r3, #-2147483648	; 0x80000000
   191d0:	push	{r4, r5, lr}
   191d4:	lsl	r4, r1, #1
   191d8:	lsl	r5, r3, #1
   191dc:	teq	r4, r5
   191e0:	teqeq	r0, r2
   191e4:	orrsne	ip, r4, r0
   191e8:	orrsne	ip, r5, r2
   191ec:	mvnsne	ip, r4, asr #21
   191f0:	mvnsne	ip, r5, asr #21
   191f4:	beq	193e0 <__assert_fail@plt+0x8314>
   191f8:	lsr	r4, r4, #21
   191fc:	rsbs	r5, r4, r5, lsr #21
   19200:	rsblt	r5, r5, #0
   19204:	ble	19224 <__assert_fail@plt+0x8158>
   19208:	add	r4, r4, r5
   1920c:	eor	r2, r0, r2
   19210:	eor	r3, r1, r3
   19214:	eor	r0, r2, r0
   19218:	eor	r1, r3, r1
   1921c:	eor	r2, r0, r2
   19220:	eor	r3, r1, r3
   19224:	cmp	r5, #54	; 0x36
   19228:	pophi	{r4, r5, pc}
   1922c:	tst	r1, #-2147483648	; 0x80000000
   19230:	lsl	r1, r1, #12
   19234:	mov	ip, #1048576	; 0x100000
   19238:	orr	r1, ip, r1, lsr #12
   1923c:	beq	19248 <__assert_fail@plt+0x817c>
   19240:	rsbs	r0, r0, #0
   19244:	rsc	r1, r1, #0
   19248:	tst	r3, #-2147483648	; 0x80000000
   1924c:	lsl	r3, r3, #12
   19250:	orr	r3, ip, r3, lsr #12
   19254:	beq	19260 <__assert_fail@plt+0x8194>
   19258:	rsbs	r2, r2, #0
   1925c:	rsc	r3, r3, #0
   19260:	teq	r4, r5
   19264:	beq	193c8 <__assert_fail@plt+0x82fc>
   19268:	sub	r4, r4, #1
   1926c:	rsbs	lr, r5, #32
   19270:	blt	1928c <__assert_fail@plt+0x81c0>
   19274:	lsl	ip, r2, lr
   19278:	adds	r0, r0, r2, lsr r5
   1927c:	adc	r1, r1, #0
   19280:	adds	r0, r0, r3, lsl lr
   19284:	adcs	r1, r1, r3, asr r5
   19288:	b	192a8 <__assert_fail@plt+0x81dc>
   1928c:	sub	r5, r5, #32
   19290:	add	lr, lr, #32
   19294:	cmp	r2, #1
   19298:	lsl	ip, r3, lr
   1929c:	orrcs	ip, ip, #2
   192a0:	adds	r0, r0, r3, asr r5
   192a4:	adcs	r1, r1, r3, asr #31
   192a8:	and	r5, r1, #-2147483648	; 0x80000000
   192ac:	bpl	192bc <__assert_fail@plt+0x81f0>
   192b0:	rsbs	ip, ip, #0
   192b4:	rscs	r0, r0, #0
   192b8:	rsc	r1, r1, #0
   192bc:	cmp	r1, #1048576	; 0x100000
   192c0:	bcc	19300 <__assert_fail@plt+0x8234>
   192c4:	cmp	r1, #2097152	; 0x200000
   192c8:	bcc	192e8 <__assert_fail@plt+0x821c>
   192cc:	lsrs	r1, r1, #1
   192d0:	rrxs	r0, r0
   192d4:	rrx	ip, ip
   192d8:	add	r4, r4, #1
   192dc:	lsl	r2, r4, #21
   192e0:	cmn	r2, #4194304	; 0x400000
   192e4:	bcs	19440 <__assert_fail@plt+0x8374>
   192e8:	cmp	ip, #-2147483648	; 0x80000000
   192ec:	lsrseq	ip, r0, #1
   192f0:	adcs	r0, r0, #0
   192f4:	adc	r1, r1, r4, lsl #20
   192f8:	orr	r1, r1, r5
   192fc:	pop	{r4, r5, pc}
   19300:	lsls	ip, ip, #1
   19304:	adcs	r0, r0, r0
   19308:	adc	r1, r1, r1
   1930c:	tst	r1, #1048576	; 0x100000
   19310:	sub	r4, r4, #1
   19314:	bne	192e8 <__assert_fail@plt+0x821c>
   19318:	teq	r1, #0
   1931c:	moveq	r1, r0
   19320:	moveq	r0, #0
   19324:	clz	r3, r1
   19328:	addeq	r3, r3, #32
   1932c:	sub	r3, r3, #11
   19330:	subs	r2, r3, #32
   19334:	bge	19358 <__assert_fail@plt+0x828c>
   19338:	adds	r2, r2, #12
   1933c:	ble	19354 <__assert_fail@plt+0x8288>
   19340:	add	ip, r2, #20
   19344:	rsb	r2, r2, #12
   19348:	lsl	r0, r1, ip
   1934c:	lsr	r1, r1, r2
   19350:	b	19368 <__assert_fail@plt+0x829c>
   19354:	add	r2, r2, #20
   19358:	rsble	ip, r2, #32
   1935c:	lsl	r1, r1, r2
   19360:	orrle	r1, r1, r0, lsr ip
   19364:	lslle	r0, r0, r2
   19368:	subs	r4, r4, r3
   1936c:	addge	r1, r1, r4, lsl #20
   19370:	orrge	r1, r1, r5
   19374:	popge	{r4, r5, pc}
   19378:	mvn	r4, r4
   1937c:	subs	r4, r4, #31
   19380:	bge	193bc <__assert_fail@plt+0x82f0>
   19384:	adds	r4, r4, #12
   19388:	bgt	193a4 <__assert_fail@plt+0x82d8>
   1938c:	add	r4, r4, #20
   19390:	rsb	r2, r4, #32
   19394:	lsr	r0, r0, r4
   19398:	orr	r0, r0, r1, lsl r2
   1939c:	orr	r1, r5, r1, lsr r4
   193a0:	pop	{r4, r5, pc}
   193a4:	rsb	r4, r4, #12
   193a8:	rsb	r2, r4, #32
   193ac:	lsr	r0, r0, r2
   193b0:	orr	r0, r0, r1, lsl r4
   193b4:	mov	r1, r5
   193b8:	pop	{r4, r5, pc}
   193bc:	lsr	r0, r1, r4
   193c0:	mov	r1, r5
   193c4:	pop	{r4, r5, pc}
   193c8:	teq	r4, #0
   193cc:	eor	r3, r3, #1048576	; 0x100000
   193d0:	eoreq	r1, r1, #1048576	; 0x100000
   193d4:	addeq	r4, r4, #1
   193d8:	subne	r5, r5, #1
   193dc:	b	19268 <__assert_fail@plt+0x819c>
   193e0:	mvns	ip, r4, asr #21
   193e4:	mvnsne	ip, r5, asr #21
   193e8:	beq	19450 <__assert_fail@plt+0x8384>
   193ec:	teq	r4, r5
   193f0:	teqeq	r0, r2
   193f4:	beq	19408 <__assert_fail@plt+0x833c>
   193f8:	orrs	ip, r4, r0
   193fc:	moveq	r1, r3
   19400:	moveq	r0, r2
   19404:	pop	{r4, r5, pc}
   19408:	teq	r1, r3
   1940c:	movne	r1, #0
   19410:	movne	r0, #0
   19414:	popne	{r4, r5, pc}
   19418:	lsrs	ip, r4, #21
   1941c:	bne	19430 <__assert_fail@plt+0x8364>
   19420:	lsls	r0, r0, #1
   19424:	adcs	r1, r1, r1
   19428:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1942c:	pop	{r4, r5, pc}
   19430:	adds	r4, r4, #4194304	; 0x400000
   19434:	addcc	r1, r1, #1048576	; 0x100000
   19438:	popcc	{r4, r5, pc}
   1943c:	and	r5, r1, #-2147483648	; 0x80000000
   19440:	orr	r1, r5, #2130706432	; 0x7f000000
   19444:	orr	r1, r1, #15728640	; 0xf00000
   19448:	mov	r0, #0
   1944c:	pop	{r4, r5, pc}
   19450:	mvns	ip, r4, asr #21
   19454:	movne	r1, r3
   19458:	movne	r0, r2
   1945c:	mvnseq	ip, r5, asr #21
   19460:	movne	r3, r1
   19464:	movne	r2, r0
   19468:	orrs	r4, r0, r1, lsl #12
   1946c:	orrseq	r5, r2, r3, lsl #12
   19470:	teqeq	r1, r3
   19474:	orrne	r1, r1, #524288	; 0x80000
   19478:	pop	{r4, r5, pc}
   1947c:	teq	r0, #0
   19480:	moveq	r1, #0
   19484:	bxeq	lr
   19488:	push	{r4, r5, lr}
   1948c:	mov	r4, #1024	; 0x400
   19490:	add	r4, r4, #50	; 0x32
   19494:	mov	r5, #0
   19498:	mov	r1, #0
   1949c:	b	19318 <__assert_fail@plt+0x824c>
   194a0:	teq	r0, #0
   194a4:	moveq	r1, #0
   194a8:	bxeq	lr
   194ac:	push	{r4, r5, lr}
   194b0:	mov	r4, #1024	; 0x400
   194b4:	add	r4, r4, #50	; 0x32
   194b8:	ands	r5, r0, #-2147483648	; 0x80000000
   194bc:	rsbmi	r0, r0, #0
   194c0:	mov	r1, #0
   194c4:	b	19318 <__assert_fail@plt+0x824c>
   194c8:	lsls	r2, r0, #1
   194cc:	asr	r1, r2, #3
   194d0:	rrx	r1, r1
   194d4:	lsl	r0, r2, #28
   194d8:	andsne	r3, r2, #-16777216	; 0xff000000
   194dc:	teqne	r3, #-16777216	; 0xff000000
   194e0:	eorne	r1, r1, #939524096	; 0x38000000
   194e4:	bxne	lr
   194e8:	bics	r2, r2, #-16777216	; 0xff000000
   194ec:	bxeq	lr
   194f0:	teq	r3, #-16777216	; 0xff000000
   194f4:	orreq	r1, r1, #524288	; 0x80000
   194f8:	bxeq	lr
   194fc:	push	{r4, r5, lr}
   19500:	mov	r4, #896	; 0x380
   19504:	and	r5, r1, #-2147483648	; 0x80000000
   19508:	bic	r1, r1, #-2147483648	; 0x80000000
   1950c:	b	19318 <__assert_fail@plt+0x824c>
   19510:	orrs	r2, r0, r1
   19514:	bxeq	lr
   19518:	push	{r4, r5, lr}
   1951c:	mov	r5, #0
   19520:	b	19540 <__assert_fail@plt+0x8474>
   19524:	orrs	r2, r0, r1
   19528:	bxeq	lr
   1952c:	push	{r4, r5, lr}
   19530:	ands	r5, r1, #-2147483648	; 0x80000000
   19534:	bpl	19540 <__assert_fail@plt+0x8474>
   19538:	rsbs	r0, r0, #0
   1953c:	rsc	r1, r1, #0
   19540:	mov	r4, #1024	; 0x400
   19544:	add	r4, r4, #50	; 0x32
   19548:	lsrs	ip, r1, #22
   1954c:	beq	192bc <__assert_fail@plt+0x81f0>
   19550:	mov	r2, #3
   19554:	lsrs	ip, ip, #3
   19558:	addne	r2, r2, #3
   1955c:	lsrs	ip, ip, #3
   19560:	addne	r2, r2, #3
   19564:	add	r2, r2, ip, lsr #3
   19568:	rsb	r3, r2, #32
   1956c:	lsl	ip, r0, r3
   19570:	lsr	r0, r0, r2
   19574:	orr	r0, r0, r1, lsl r3
   19578:	lsr	r1, r1, r2
   1957c:	add	r4, r4, r2
   19580:	b	192bc <__assert_fail@plt+0x81f0>
   19584:	vmov	d7, r0, r1
   19588:	vcmpe.f64	d7, #0.0
   1958c:	vmrs	APSR_nzcv, fpscr
   19590:	bmi	19598 <__assert_fail@plt+0x84cc>
   19594:	b	195b0 <__assert_fail@plt+0x84e4>
   19598:	push	{r4, lr}
   1959c:	eor	r1, r1, #-2147483648	; 0x80000000
   195a0:	bl	195b0 <__assert_fail@plt+0x84e4>
   195a4:	rsbs	r0, r0, #0
   195a8:	rsc	r1, r1, #0
   195ac:	pop	{r4, pc}
   195b0:	vmov	d6, r0, r1
   195b4:	vldr	d7, [pc, #36]	; 195e0 <__assert_fail@plt+0x8514>
   195b8:	vldr	d5, [pc, #40]	; 195e8 <__assert_fail@plt+0x851c>
   195bc:	vmul.f64	d7, d6, d7
   195c0:	vcvt.u32.f64	s14, d7
   195c4:	vcvt.f64.u32	d4, s14
   195c8:	vmov	r1, s14
   195cc:	vmls.f64	d6, d4, d5
   195d0:	vcvt.u32.f64	s15, d6
   195d4:	vmov	r0, s15
   195d8:	bx	lr
   195dc:	nop			; (mov r0, r0)
   195e0:	andeq	r0, r0, r0
   195e4:	ldclcc	0, cr0, [r0]
   195e8:	andeq	r0, r0, r0
   195ec:	mvnsmi	r0, r0
   195f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   195f4:	mov	r7, r0
   195f8:	ldr	r6, [pc, #72]	; 19648 <__assert_fail@plt+0x857c>
   195fc:	ldr	r5, [pc, #72]	; 1964c <__assert_fail@plt+0x8580>
   19600:	add	r6, pc, r6
   19604:	add	r5, pc, r5
   19608:	sub	r6, r6, r5
   1960c:	mov	r8, r1
   19610:	mov	r9, r2
   19614:	bl	10df4 <calloc@plt-0x20>
   19618:	asrs	r6, r6, #2
   1961c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19620:	mov	r4, #0
   19624:	add	r4, r4, #1
   19628:	ldr	r3, [r5], #4
   1962c:	mov	r2, r9
   19630:	mov	r1, r8
   19634:	mov	r0, r7
   19638:	blx	r3
   1963c:	cmp	r6, r4
   19640:	bne	19624 <__assert_fail@plt+0x8558>
   19644:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19648:	andeq	r2, r1, ip, lsl #18
   1964c:	andeq	r2, r1, r4, lsl #18
   19650:	bx	lr
   19654:	ldr	r3, [pc, #12]	; 19668 <__assert_fail@plt+0x859c>
   19658:	mov	r1, #0
   1965c:	add	r3, pc, r3
   19660:	ldr	r2, [r3]
   19664:	b	10fdc <__cxa_atexit@plt>
   19668:	andeq	r2, r1, r0, lsr #21

Disassembly of section .fini:

0001966c <.fini>:
   1966c:	push	{r3, lr}
   19670:	pop	{r3, pc}
