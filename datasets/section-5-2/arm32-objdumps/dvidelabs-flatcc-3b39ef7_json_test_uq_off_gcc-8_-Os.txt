
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uq_off:     file format elf32-littlearm


Disassembly of section .init:

000144f8 <.init>:
   144f8:	push	{r3, lr}
   144fc:	bl	14de0 <_start@@Base+0x3c>
   14500:	pop	{r3, pc}

Disassembly of section .plt:

00014504 <raise@plt-0x14>:
   14504:	push	{lr}		; (str lr, [sp, #-4]!)
   14508:	ldr	lr, [pc, #4]	; 14514 <raise@plt-0x4>
   1450c:	add	lr, pc, lr
   14510:	ldr	pc, [lr, #8]!
   14514:	andeq	pc, r2, ip, ror #21

00014518 <raise@plt>:
   14518:	add	ip, pc, #0, 12
   1451c:	add	ip, ip, #192512	; 0x2f000
   14520:	ldr	pc, [ip, #2796]!	; 0xaec

00014524 <strcmp@plt>:
   14524:	add	ip, pc, #0, 12
   14528:	add	ip, ip, #192512	; 0x2f000
   1452c:	ldr	pc, [ip, #2788]!	; 0xae4

00014530 <memmove@plt>:
   14530:	add	ip, pc, #0, 12
   14534:	add	ip, ip, #192512	; 0x2f000
   14538:	ldr	pc, [ip, #2780]!	; 0xadc

0001453c <free@plt>:
   1453c:	add	ip, pc, #0, 12
   14540:	add	ip, ip, #192512	; 0x2f000
   14544:	ldr	pc, [ip, #2772]!	; 0xad4

00014548 <memcpy@plt>:
   14548:	add	ip, pc, #0, 12
   1454c:	add	ip, ip, #192512	; 0x2f000
   14550:	ldr	pc, [ip, #2764]!	; 0xacc

00014554 <memcmp@plt>:
   14554:	add	ip, pc, #0, 12
   14558:	add	ip, ip, #192512	; 0x2f000
   1455c:	ldr	pc, [ip, #2756]!	; 0xac4

00014560 <realloc@plt>:
   14560:	add	ip, pc, #0, 12
   14564:	add	ip, ip, #192512	; 0x2f000
   14568:	ldr	pc, [ip, #2748]!	; 0xabc

0001456c <fwrite@plt>:
   1456c:	add	ip, pc, #0, 12
   14570:	add	ip, ip, #192512	; 0x2f000
   14574:	ldr	pc, [ip, #2740]!	; 0xab4

00014578 <malloc@plt>:
   14578:	add	ip, pc, #0, 12
   1457c:	add	ip, ip, #192512	; 0x2f000
   14580:	ldr	pc, [ip, #2732]!	; 0xaac

00014584 <__libc_start_main@plt>:
   14584:	add	ip, pc, #0, 12
   14588:	add	ip, ip, #192512	; 0x2f000
   1458c:	ldr	pc, [ip, #2724]!	; 0xaa4

00014590 <__gmon_start__@plt>:
   14590:	add	ip, pc, #0, 12
   14594:	add	ip, ip, #192512	; 0x2f000
   14598:	ldr	pc, [ip, #2716]!	; 0xa9c

0001459c <strlen@plt>:
   1459c:	add	ip, pc, #0, 12
   145a0:	add	ip, ip, #192512	; 0x2f000
   145a4:	ldr	pc, [ip, #2708]!	; 0xa94

000145a8 <fprintf@plt>:
   145a8:	add	ip, pc, #0, 12
   145ac:	add	ip, ip, #192512	; 0x2f000
   145b0:	ldr	pc, [ip, #2700]!	; 0xa8c

000145b4 <posix_memalign@plt>:
   145b4:	add	ip, pc, #0, 12
   145b8:	add	ip, ip, #192512	; 0x2f000
   145bc:	ldr	pc, [ip, #2692]!	; 0xa84

000145c0 <memset@plt>:
   145c0:	add	ip, pc, #0, 12
   145c4:	add	ip, ip, #192512	; 0x2f000
   145c8:	ldr	pc, [ip, #2684]!	; 0xa7c

000145cc <strncpy@plt>:
   145cc:	add	ip, pc, #0, 12
   145d0:	add	ip, ip, #192512	; 0x2f000
   145d4:	ldr	pc, [ip, #2676]!	; 0xa74

000145d8 <strtod@plt>:
   145d8:	add	ip, pc, #0, 12
   145dc:	add	ip, ip, #192512	; 0x2f000
   145e0:	ldr	pc, [ip, #2668]!	; 0xa6c

000145e4 <memchr@plt>:
   145e4:	add	ip, pc, #0, 12
   145e8:	add	ip, ip, #192512	; 0x2f000
   145ec:	ldr	pc, [ip, #2660]!	; 0xa64

000145f0 <fputc@plt>:
   145f0:	add	ip, pc, #0, 12
   145f4:	add	ip, ip, #192512	; 0x2f000
   145f8:	ldr	pc, [ip, #2652]!	; 0xa5c

000145fc <sprintf@plt>:
   145fc:	add	ip, pc, #0, 12
   14600:	add	ip, ip, #192512	; 0x2f000
   14604:	ldr	pc, [ip, #2644]!	; 0xa54

00014608 <fputs@plt>:
   14608:	add	ip, pc, #0, 12
   1460c:	add	ip, ip, #192512	; 0x2f000
   14610:	ldr	pc, [ip, #2636]!	; 0xa4c

00014614 <abort@plt>:
   14614:	add	ip, pc, #0, 12
   14618:	add	ip, ip, #192512	; 0x2f000
   1461c:	ldr	pc, [ip, #2628]!	; 0xa44

00014620 <__assert_fail@plt>:
   14620:	add	ip, pc, #0, 12
   14624:	add	ip, ip, #192512	; 0x2f000
   14628:	ldr	pc, [ip, #2620]!	; 0xa3c

Disassembly of section .text:

00014630 <main@@Base>:
   14630:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14634:	mov	r4, #0
   14638:	bl	1f52c <edge_case_tests@@Base>
   1463c:	ldr	r6, [pc, #1636]	; 14ca8 <main@@Base+0x678>
   14640:	mov	r5, r0
   14644:	bl	1f704 <error_case_tests@@Base>
   14648:	ldr	r7, [pc, #1628]	; 14cac <main@@Base+0x67c>
   1464c:	orr	r5, r5, r0
   14650:	bl	1fc24 <union_vector_tests@@Base>
   14654:	orr	r5, r5, r0
   14658:	ldr	r8, [pc, #1616]	; 14cb0 <main@@Base+0x680>
   1465c:	bl	1f92c <base64_tests@@Base>
   14660:	orr	r5, r5, r0
   14664:	ldr	sl, [pc, #1608]	; 14cb4 <main@@Base+0x684>
   14668:	bl	1fabc <mixed_type_union_tests@@Base>
   1466c:	movw	r3, #525	; 0x20d
   14670:	mov	r2, r7
   14674:	ldr	r1, [pc, #1596]	; 14cb8 <main@@Base+0x688>
   14678:	orr	r5, r5, r0
   1467c:	mov	r0, r6
   14680:	str	r4, [sp]
   14684:	str	r4, [sp, #4]
   14688:	str	r3, [sp, #8]
   1468c:	mov	r3, r4
   14690:	bl	1f168 <test_json@@Base>
   14694:	mov	r3, #528	; 0x210
   14698:	mov	r2, r8
   1469c:	ldr	r1, [pc, #1560]	; 14cbc <main@@Base+0x68c>
   146a0:	orr	r5, r5, r0
   146a4:	mov	r0, r6
   146a8:	str	r4, [sp]
   146ac:	str	r4, [sp, #4]
   146b0:	str	r3, [sp, #8]
   146b4:	mov	r3, r4
   146b8:	bl	1f168 <test_json@@Base>
   146bc:	ldr	r9, [pc, #1532]	; 14cc0 <main@@Base+0x690>
   146c0:	movw	r3, #531	; 0x213
   146c4:	mov	r2, sl
   146c8:	orr	r5, r5, r0
   146cc:	mov	r0, r6
   146d0:	str	r4, [sp]
   146d4:	ldr	r1, [pc, #1512]	; 14cc4 <main@@Base+0x694>
   146d8:	str	r4, [sp, #4]
   146dc:	str	r3, [sp, #8]
   146e0:	mov	r3, r4
   146e4:	bl	1f168 <test_json@@Base>
   146e8:	movw	r3, #534	; 0x216
   146ec:	mov	r2, r9
   146f0:	ldr	r1, [pc, #1488]	; 14cc8 <main@@Base+0x698>
   146f4:	orr	r5, r5, r0
   146f8:	mov	r0, r6
   146fc:	str	r4, [sp]
   14700:	str	r4, [sp, #4]
   14704:	str	r3, [sp, #8]
   14708:	mov	r3, r4
   1470c:	bl	1f168 <test_json@@Base>
   14710:	movw	r3, #537	; 0x219
   14714:	mov	r2, r9
   14718:	ldr	r1, [pc, #1452]	; 14ccc <main@@Base+0x69c>
   1471c:	orr	r5, r5, r0
   14720:	mov	r0, r6
   14724:	str	r4, [sp]
   14728:	str	r4, [sp, #4]
   1472c:	str	r3, [sp, #8]
   14730:	mov	r3, r4
   14734:	bl	1f168 <test_json@@Base>
   14738:	mov	r3, #540	; 0x21c
   1473c:	mov	r2, r8
   14740:	ldr	r1, [pc, #1416]	; 14cd0 <main@@Base+0x6a0>
   14744:	orr	r5, r5, r0
   14748:	mov	r0, r6
   1474c:	str	r4, [sp]
   14750:	str	r4, [sp, #4]
   14754:	str	r3, [sp, #8]
   14758:	mov	r3, r4
   1475c:	bl	1f168 <test_json@@Base>
   14760:	movw	r3, #543	; 0x21f
   14764:	mov	r2, sl
   14768:	ldr	r1, [pc, #1380]	; 14cd4 <main@@Base+0x6a4>
   1476c:	orr	r5, r5, r0
   14770:	mov	r0, r6
   14774:	str	r4, [sp]
   14778:	str	r4, [sp, #4]
   1477c:	str	r3, [sp, #8]
   14780:	mov	r3, r4
   14784:	bl	1f168 <test_json@@Base>
   14788:	movw	r3, #547	; 0x223
   1478c:	mov	r2, r7
   14790:	ldr	r1, [pc, #1344]	; 14cd8 <main@@Base+0x6a8>
   14794:	orr	r5, r5, r0
   14798:	mov	r0, r6
   1479c:	str	r4, [sp]
   147a0:	str	r4, [sp, #4]
   147a4:	str	r3, [sp, #8]
   147a8:	mov	r3, r4
   147ac:	bl	1f168 <test_json@@Base>
   147b0:	movw	r3, #551	; 0x227
   147b4:	mov	r2, r7
   147b8:	ldr	r1, [pc, #1308]	; 14cdc <main@@Base+0x6ac>
   147bc:	orr	r5, r5, r0
   147c0:	mov	r0, r6
   147c4:	str	r4, [sp]
   147c8:	str	r4, [sp, #4]
   147cc:	str	r3, [sp, #8]
   147d0:	mov	r3, r4
   147d4:	bl	1f168 <test_json@@Base>
   147d8:	movw	r3, #601	; 0x259
   147dc:	mov	r2, r8
   147e0:	ldr	r1, [pc, #1272]	; 14ce0 <main@@Base+0x6b0>
   147e4:	orr	r5, r5, r0
   147e8:	mov	r0, r6
   147ec:	str	r4, [sp]
   147f0:	str	r4, [sp, #4]
   147f4:	str	r3, [sp, #8]
   147f8:	mov	r3, r4
   147fc:	bl	1f168 <test_json@@Base>
   14800:	mov	r3, #604	; 0x25c
   14804:	mov	r2, sl
   14808:	ldr	r1, [pc, #1236]	; 14ce4 <main@@Base+0x6b4>
   1480c:	orr	r5, r5, r0
   14810:	mov	r0, r6
   14814:	str	r4, [sp]
   14818:	str	r4, [sp, #4]
   1481c:	str	r3, [sp, #8]
   14820:	mov	r3, r4
   14824:	bl	1f168 <test_json@@Base>
   14828:	movw	r3, #607	; 0x25f
   1482c:	orr	r5, r5, r0
   14830:	ldr	r2, [pc, #1200]	; 14ce8 <main@@Base+0x6b8>
   14834:	mov	r0, r6
   14838:	str	r4, [sp]
   1483c:	ldr	r1, [pc, #1192]	; 14cec <main@@Base+0x6bc>
   14840:	str	r4, [sp, #4]
   14844:	str	r3, [sp, #8]
   14848:	mov	r3, r4
   1484c:	bl	1f168 <test_json@@Base>
   14850:	movw	r3, #610	; 0x262
   14854:	mov	r2, r9
   14858:	ldr	r1, [pc, #1168]	; 14cf0 <main@@Base+0x6c0>
   1485c:	orr	r5, r5, r0
   14860:	mov	r0, r6
   14864:	str	r4, [sp]
   14868:	str	r4, [sp, #4]
   1486c:	str	r3, [sp, #8]
   14870:	mov	r3, r4
   14874:	bl	1f168 <test_json@@Base>
   14878:	movw	r3, #613	; 0x265
   1487c:	orr	r5, r5, r0
   14880:	ldr	r2, [pc, #1132]	; 14cf4 <main@@Base+0x6c4>
   14884:	mov	r0, r6
   14888:	str	r4, [sp]
   1488c:	ldr	r1, [pc, #1124]	; 14cf8 <main@@Base+0x6c8>
   14890:	str	r4, [sp, #4]
   14894:	str	r3, [sp, #8]
   14898:	mov	r3, r4
   1489c:	bl	1f168 <test_json@@Base>
   148a0:	mov	r3, #616	; 0x268
   148a4:	orr	r5, r5, r0
   148a8:	ldr	r2, [pc, #1100]	; 14cfc <main@@Base+0x6cc>
   148ac:	mov	r0, r6
   148b0:	str	r4, [sp]
   148b4:	ldr	r1, [pc, #1092]	; 14d00 <main@@Base+0x6d0>
   148b8:	str	r4, [sp, #4]
   148bc:	str	r3, [sp, #8]
   148c0:	mov	r3, r4
   148c4:	bl	1f168 <test_json@@Base>
   148c8:	movw	r3, #619	; 0x26b
   148cc:	orr	r5, r5, r0
   148d0:	ldr	r2, [pc, #1068]	; 14d04 <main@@Base+0x6d4>
   148d4:	mov	r0, r6
   148d8:	str	r4, [sp]
   148dc:	ldr	r1, [pc, #1060]	; 14d08 <main@@Base+0x6d8>
   148e0:	str	r4, [sp, #4]
   148e4:	str	r3, [sp, #8]
   148e8:	mov	r3, r4
   148ec:	bl	1f168 <test_json@@Base>
   148f0:	movw	r3, #622	; 0x26e
   148f4:	mov	r2, r8
   148f8:	ldr	r1, [pc, #1036]	; 14d0c <main@@Base+0x6dc>
   148fc:	orr	r5, r5, r0
   14900:	mov	r0, r6
   14904:	str	r4, [sp]
   14908:	str	r4, [sp, #4]
   1490c:	str	r3, [sp, #8]
   14910:	mov	r3, r4
   14914:	bl	1f168 <test_json@@Base>
   14918:	ldr	r9, [pc, #1008]	; 14d10 <main@@Base+0x6e0>
   1491c:	mov	r2, r8
   14920:	movw	r3, #625	; 0x271
   14924:	orr	r5, r5, r0
   14928:	mov	r0, r6
   1492c:	str	r4, [sp]
   14930:	ldr	r8, [pc, #988]	; 14d14 <main@@Base+0x6e4>
   14934:	str	r4, [sp, #4]
   14938:	ldr	r1, [pc, #984]	; 14d18 <main@@Base+0x6e8>
   1493c:	str	r3, [sp, #8]
   14940:	mov	r3, r4
   14944:	bl	1f168 <test_json@@Base>
   14948:	mov	r3, #628	; 0x274
   1494c:	mov	r2, r9
   14950:	str	r4, [sp]
   14954:	mov	r1, r8
   14958:	orr	r5, r5, r0
   1495c:	str	r4, [sp, #4]
   14960:	mov	r0, r6
   14964:	str	r3, [sp, #8]
   14968:	mov	r3, r4
   1496c:	bl	1f168 <test_json@@Base>
   14970:	movw	r3, #631	; 0x277
   14974:	mov	r2, r9
   14978:	str	r4, [sp]
   1497c:	mov	r1, r8
   14980:	orr	r5, r5, r0
   14984:	str	r4, [sp, #4]
   14988:	mov	r0, r6
   1498c:	str	r3, [sp, #8]
   14990:	mov	r3, r4
   14994:	bl	1f168 <test_json@@Base>
   14998:	movw	r3, #634	; 0x27a
   1499c:	orr	r5, r5, r0
   149a0:	ldr	r2, [pc, #884]	; 14d1c <main@@Base+0x6ec>
   149a4:	mov	r0, r6
   149a8:	str	r4, [sp]
   149ac:	ldr	r1, [pc, #876]	; 14d20 <main@@Base+0x6f0>
   149b0:	str	r4, [sp, #4]
   149b4:	str	r3, [sp, #8]
   149b8:	mov	r3, r4
   149bc:	bl	1f168 <test_json@@Base>
   149c0:	movw	r3, #638	; 0x27e
   149c4:	orr	r5, r5, r0
   149c8:	ldr	r2, [pc, #852]	; 14d24 <main@@Base+0x6f4>
   149cc:	mov	r0, r6
   149d0:	str	r4, [sp]
   149d4:	ldr	r1, [pc, #844]	; 14d28 <main@@Base+0x6f8>
   149d8:	str	r4, [sp, #4]
   149dc:	str	r3, [sp, #8]
   149e0:	mov	r3, r4
   149e4:	bl	1f168 <test_json@@Base>
   149e8:	movw	r3, #642	; 0x282
   149ec:	orr	r5, r5, r0
   149f0:	ldr	r2, [pc, #820]	; 14d2c <main@@Base+0x6fc>
   149f4:	mov	r0, r6
   149f8:	str	r4, [sp]
   149fc:	ldr	r1, [pc, #812]	; 14d30 <main@@Base+0x700>
   14a00:	str	r4, [sp, #4]
   14a04:	str	r3, [sp, #8]
   14a08:	mov	r3, r4
   14a0c:	bl	1f168 <test_json@@Base>
   14a10:	movw	r3, #646	; 0x286
   14a14:	mov	r2, r7
   14a18:	ldr	r1, [pc, #788]	; 14d34 <main@@Base+0x704>
   14a1c:	orr	r5, r5, r0
   14a20:	mov	r0, r6
   14a24:	str	r4, [sp]
   14a28:	str	r4, [sp, #4]
   14a2c:	str	r3, [sp, #8]
   14a30:	mov	r3, r4
   14a34:	bl	1f168 <test_json@@Base>
   14a38:	movw	r3, #649	; 0x289
   14a3c:	mov	r2, r7
   14a40:	ldr	r1, [pc, #752]	; 14d38 <main@@Base+0x708>
   14a44:	orr	r5, r5, r0
   14a48:	mov	r0, r6
   14a4c:	str	r4, [sp]
   14a50:	str	r4, [sp, #4]
   14a54:	str	r3, [sp, #8]
   14a58:	mov	r3, r4
   14a5c:	bl	1f168 <test_json@@Base>
   14a60:	mov	r3, #716	; 0x2cc
   14a64:	orr	r5, r5, r0
   14a68:	ldr	r2, [pc, #716]	; 14d3c <main@@Base+0x70c>
   14a6c:	mov	r0, r6
   14a70:	str	r4, [sp]
   14a74:	ldr	r1, [pc, #708]	; 14d40 <main@@Base+0x710>
   14a78:	str	r4, [sp, #4]
   14a7c:	str	r3, [sp, #8]
   14a80:	mov	r3, r4
   14a84:	bl	1f168 <test_json@@Base>
   14a88:	movw	r3, #731	; 0x2db
   14a8c:	orr	r5, r5, r0
   14a90:	ldr	r2, [pc, #684]	; 14d44 <main@@Base+0x714>
   14a94:	mov	r0, r6
   14a98:	str	r4, [sp]
   14a9c:	ldr	r1, [pc, #676]	; 14d48 <main@@Base+0x718>
   14aa0:	str	r4, [sp, #4]
   14aa4:	str	r3, [sp, #8]
   14aa8:	mov	r3, r4
   14aac:	bl	1f168 <test_json@@Base>
   14ab0:	ldr	r8, [pc, #660]	; 14d4c <main@@Base+0x71c>
   14ab4:	movw	r3, #734	; 0x2de
   14ab8:	orr	r5, r5, r0
   14abc:	mov	r0, r6
   14ac0:	str	r4, [sp]
   14ac4:	ldr	r2, [pc, #644]	; 14d50 <main@@Base+0x720>
   14ac8:	str	r4, [sp, #4]
   14acc:	ldr	r1, [pc, #640]	; 14d54 <main@@Base+0x724>
   14ad0:	str	r3, [sp, #8]
   14ad4:	mov	r3, r4
   14ad8:	bl	1f168 <test_json@@Base>
   14adc:	movw	r3, #738	; 0x2e2
   14ae0:	mov	r2, r8
   14ae4:	ldr	r1, [pc, #620]	; 14d58 <main@@Base+0x728>
   14ae8:	orr	r5, r5, r0
   14aec:	mov	r0, r6
   14af0:	str	r4, [sp]
   14af4:	str	r4, [sp, #4]
   14af8:	str	r3, [sp, #8]
   14afc:	mov	r3, r4
   14b00:	bl	1f168 <test_json@@Base>
   14b04:	movw	r3, #750	; 0x2ee
   14b08:	mov	r2, r8
   14b0c:	ldr	r1, [pc, #584]	; 14d5c <main@@Base+0x72c>
   14b10:	orr	r5, r5, r0
   14b14:	mov	r0, r6
   14b18:	str	r4, [sp]
   14b1c:	str	r4, [sp, #4]
   14b20:	str	r3, [sp, #8]
   14b24:	mov	r3, r4
   14b28:	bl	1f168 <test_json@@Base>
   14b2c:	movw	r3, #766	; 0x2fe
   14b30:	orr	r5, r5, r0
   14b34:	ldr	r2, [pc, #548]	; 14d60 <main@@Base+0x730>
   14b38:	mov	r0, r6
   14b3c:	str	r4, [sp]
   14b40:	ldr	r1, [pc, #540]	; 14d64 <main@@Base+0x734>
   14b44:	str	r4, [sp, #4]
   14b48:	str	r3, [sp, #8]
   14b4c:	mov	r3, r4
   14b50:	bl	1f168 <test_json@@Base>
   14b54:	movw	r3, #770	; 0x302
   14b58:	orr	r5, r5, r0
   14b5c:	ldr	r2, [pc, #516]	; 14d68 <main@@Base+0x738>
   14b60:	mov	r0, r6
   14b64:	str	r4, [sp]
   14b68:	ldr	r1, [pc, #508]	; 14d6c <main@@Base+0x73c>
   14b6c:	str	r4, [sp, #4]
   14b70:	str	r3, [sp, #8]
   14b74:	mov	r3, r4
   14b78:	bl	1f168 <test_json@@Base>
   14b7c:	mov	r3, #776	; 0x308
   14b80:	orr	r5, r5, r0
   14b84:	ldr	r2, [pc, #484]	; 14d70 <main@@Base+0x740>
   14b88:	mov	r0, r6
   14b8c:	str	r4, [sp]
   14b90:	ldr	r1, [pc, #476]	; 14d74 <main@@Base+0x744>
   14b94:	str	r4, [sp, #4]
   14b98:	str	r3, [sp, #8]
   14b9c:	mov	r3, r4
   14ba0:	bl	1f168 <test_json@@Base>
   14ba4:	movw	r3, #781	; 0x30d
   14ba8:	mov	r2, r7
   14bac:	ldr	r1, [pc, #452]	; 14d78 <main@@Base+0x748>
   14bb0:	orr	r5, r5, r0
   14bb4:	mov	r0, r6
   14bb8:	str	r4, [sp]
   14bbc:	str	r4, [sp, #4]
   14bc0:	str	r3, [sp, #8]
   14bc4:	mov	r3, r4
   14bc8:	bl	1f168 <test_json@@Base>
   14bcc:	movw	r3, #786	; 0x312
   14bd0:	orr	r5, r5, r0
   14bd4:	ldr	r2, [pc, #416]	; 14d7c <main@@Base+0x74c>
   14bd8:	mov	r0, r6
   14bdc:	str	r4, [sp]
   14be0:	ldr	r1, [pc, #408]	; 14d80 <main@@Base+0x750>
   14be4:	str	r4, [sp, #4]
   14be8:	str	r3, [sp, #8]
   14bec:	mov	r3, r4
   14bf0:	bl	1f168 <test_json@@Base>
   14bf4:	movw	r3, #791	; 0x317
   14bf8:	orr	r5, r5, r0
   14bfc:	ldr	r2, [pc, #384]	; 14d84 <main@@Base+0x754>
   14c00:	mov	r0, r6
   14c04:	str	r4, [sp]
   14c08:	ldr	r1, [pc, #376]	; 14d88 <main@@Base+0x758>
   14c0c:	str	r4, [sp, #4]
   14c10:	str	r3, [sp, #8]
   14c14:	mov	r3, r4
   14c18:	bl	1f168 <test_json@@Base>
   14c1c:	mov	r3, #796	; 0x31c
   14c20:	orr	r5, r5, r0
   14c24:	ldr	r2, [pc, #352]	; 14d8c <main@@Base+0x75c>
   14c28:	mov	r0, r6
   14c2c:	str	r4, [sp]
   14c30:	ldr	r1, [pc, #344]	; 14d90 <main@@Base+0x760>
   14c34:	str	r4, [sp, #4]
   14c38:	str	r3, [sp, #8]
   14c3c:	mov	r3, r4
   14c40:	bl	1f168 <test_json@@Base>
   14c44:	movw	r3, #801	; 0x321
   14c48:	orr	r5, r5, r0
   14c4c:	ldr	r2, [pc, #320]	; 14d94 <main@@Base+0x764>
   14c50:	mov	r0, r6
   14c54:	str	r4, [sp]
   14c58:	ldr	r1, [pc, #312]	; 14d98 <main@@Base+0x768>
   14c5c:	str	r4, [sp, #4]
   14c60:	str	r3, [sp, #8]
   14c64:	mov	r3, r4
   14c68:	bl	1f168 <test_json@@Base>
   14c6c:	movw	r3, #806	; 0x326
   14c70:	orr	r5, r5, r0
   14c74:	ldr	r2, [pc, #288]	; 14d9c <main@@Base+0x76c>
   14c78:	mov	r0, r6
   14c7c:	str	r4, [sp]
   14c80:	ldr	r1, [pc, #280]	; 14da0 <main@@Base+0x770>
   14c84:	str	r4, [sp, #4]
   14c88:	str	r3, [sp, #8]
   14c8c:	mov	r3, r4
   14c90:	bl	1f168 <test_json@@Base>
   14c94:	orrs	r3, r5, r0
   14c98:	mvnne	r0, #0
   14c9c:	moveq	r0, r4
   14ca0:	add	sp, sp, #16
   14ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ca8:	andeq	lr, r2, r4, lsr #32
   14cac:	andeq	lr, r2, r2, lsr #12
   14cb0:	andeq	pc, r2, r9, lsr #31
   14cb4:	strdeq	pc, [r2], -r1
   14cb8:	muleq	r2, r2, pc	; <UNPREDICTABLE>
   14cbc:	andeq	pc, r2, sl, asr #31
   14cc0:	andeq	r0, r3, ip, lsr r0
   14cc4:	andeq	r0, r3, r4, lsl r0
   14cc8:	andeq	r0, r3, r8, rrx
   14ccc:	muleq	r3, r9, r0
   14cd0:	ldrdeq	r0, [r3], -r3
   14cd4:	strdeq	r0, [r3], -r9
   14cd8:	andeq	r0, r3, r2, lsr #2
   14cdc:			; <UNDEFINED> instruction: 0x0002e5bd
   14ce0:	andeq	r0, r3, r9, asr #2
   14ce4:	andeq	r0, r3, sl, ror #2
   14ce8:	andeq	r0, r3, fp, lsl #3
   14cec:			; <UNDEFINED> instruction: 0x000301b1
   14cf0:	ldrdeq	r0, [r3], -r2
   14cf4:	strdeq	r0, [r3], -r4
   14cf8:	andeq	r0, r3, r2, lsl r2
   14cfc:	andeq	r0, r3, r4, lsr r2
   14d00:	andeq	r0, r3, r2, asr r2
   14d04:	andeq	r0, r3, r4, ror r2
   14d08:	muleq	r3, r1, r2
   14d0c:			; <UNDEFINED> instruction: 0x000302b2
   14d10:	andeq	r0, r3, r7, lsl r3
   14d14:	andeq	r0, r3, r1, lsr r3
   14d18:	ldrdeq	r0, [r3], -sp
   14d1c:	andeq	r0, r3, fp, asr r3
   14d20:	andeq	r0, r3, r2, lsr #7
   14d24:	strdeq	r0, [r3], -r3
   14d28:	andeq	r0, r3, sp, lsr r4
   14d2c:	muleq	r3, r2, r4
   14d30:	strdeq	r0, [r3], -r4
   14d34:	andeq	r0, r3, r3, ror #10
   14d38:	andeq	r0, r3, lr, lsl #11
   14d3c:			; <UNDEFINED> instruction: 0x000305b4
   14d40:	andeq	r0, r3, r2, lsl r6
   14d44:	andeq	r0, r3, pc, ror r6
   14d48:	andeq	r0, r3, pc, lsr #13
   14d4c:	andeq	r0, r3, r8, lsl r7
   14d50:	andeq	r0, r3, ip, ror #13
   14d54:	strdeq	r0, [r3], -lr
   14d58:	andeq	r0, r3, r9, asr r7
   14d5c:	andeq	r0, r3, r1, lsr #15
   14d60:	andeq	r0, r3, lr, lsr r8
   14d64:	andeq	r0, r3, r0, ror #16
   14d68:	andeq	r0, r3, r7, lsl #17
   14d6c:			; <UNDEFINED> instruction: 0x000308b1
   14d70:	andeq	r0, r3, r0, ror #17
   14d74:	andeq	r0, r3, r0, asr r9
   14d78:	andeq	r0, r3, fp, asr #19
   14d7c:	andeq	r0, r3, r3, asr #20
   14d80:			; <UNDEFINED> instruction: 0x00030ab2
   14d84:	andeq	r0, r3, ip, lsr #22
   14d88:	andeq	r0, r3, sl, lsr #23
   14d8c:	andeq	r0, r3, r5, lsr ip
   14d90:	andeq	r0, r3, r5, lsr #25
   14d94:	andeq	r0, r3, r0, lsr #26
   14d98:	muleq	r3, pc, sp	; <UNPREDICTABLE>
   14d9c:	andeq	r0, r3, r9, lsr #28
   14da0:	andeq	r0, r3, sp, lsr #29

00014da4 <_start@@Base>:
   14da4:	mov	fp, #0
   14da8:	mov	lr, #0
   14dac:	pop	{r1}		; (ldr r1, [sp], #4)
   14db0:	mov	r2, sp
   14db4:	push	{r2}		; (str r2, [sp, #-4]!)
   14db8:	push	{r0}		; (str r0, [sp, #-4]!)
   14dbc:	ldr	ip, [pc, #16]	; 14dd4 <_start@@Base+0x30>
   14dc0:	push	{ip}		; (str ip, [sp, #-4]!)
   14dc4:	ldr	r0, [pc, #12]	; 14dd8 <_start@@Base+0x34>
   14dc8:	ldr	r3, [pc, #12]	; 14ddc <_start@@Base+0x38>
   14dcc:	bl	14584 <__libc_start_main@plt>
   14dd0:	bl	14614 <abort@plt>
   14dd4:	andeq	lr, r2, r0, lsl r0
   14dd8:	andeq	r4, r1, r0, lsr r6
   14ddc:			; <UNDEFINED> instruction: 0x0002dfb0
   14de0:	ldr	r3, [pc, #20]	; 14dfc <_start@@Base+0x58>
   14de4:	ldr	r2, [pc, #20]	; 14e00 <_start@@Base+0x5c>
   14de8:	add	r3, pc, r3
   14dec:	ldr	r2, [r3, r2]
   14df0:	cmp	r2, #0
   14df4:	bxeq	lr
   14df8:	b	14590 <__gmon_start__@plt>
   14dfc:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   14e00:	andeq	r0, r0, r8, rrx
   14e04:	ldr	r0, [pc, #24]	; 14e24 <_start@@Base+0x80>
   14e08:	ldr	r3, [pc, #24]	; 14e28 <_start@@Base+0x84>
   14e0c:	cmp	r3, r0
   14e10:	bxeq	lr
   14e14:	ldr	r3, [pc, #16]	; 14e2c <_start@@Base+0x88>
   14e18:	cmp	r3, #0
   14e1c:	bxeq	lr
   14e20:	bx	r3
   14e24:			; <UNDEFINED> instruction: 0x000443b8
   14e28:			; <UNDEFINED> instruction: 0x000443b8
   14e2c:	andeq	r0, r0, r0
   14e30:	ldr	r0, [pc, #36]	; 14e5c <_start@@Base+0xb8>
   14e34:	ldr	r1, [pc, #36]	; 14e60 <_start@@Base+0xbc>
   14e38:	sub	r1, r1, r0
   14e3c:	asr	r1, r1, #2
   14e40:	add	r1, r1, r1, lsr #31
   14e44:	asrs	r1, r1, #1
   14e48:	bxeq	lr
   14e4c:	ldr	r3, [pc, #16]	; 14e64 <_start@@Base+0xc0>
   14e50:	cmp	r3, #0
   14e54:	bxeq	lr
   14e58:	bx	r3
   14e5c:			; <UNDEFINED> instruction: 0x000443b8
   14e60:			; <UNDEFINED> instruction: 0x000443b8
   14e64:	andeq	r0, r0, r0
   14e68:	push	{r4, lr}
   14e6c:	ldr	r4, [pc, #24]	; 14e8c <_start@@Base+0xe8>
   14e70:	ldrb	r3, [r4]
   14e74:	cmp	r3, #0
   14e78:	popne	{r4, pc}
   14e7c:	bl	14e04 <_start@@Base+0x60>
   14e80:	mov	r3, #1
   14e84:	strb	r3, [r4]
   14e88:	pop	{r4, pc}
   14e8c:	andeq	r4, r4, r0, asr #7
   14e90:	b	14e30 <_start@@Base+0x8c>
   14e94:	andeq	r0, r0, r0
   14e98:	sub	r1, r1, r0
   14e9c:	push	{r4, r5, lr}
   14ea0:	cmp	r1, #8
   14ea4:	bhi	14ed8 <_start@@Base+0x134>
   14ea8:	sub	r1, r1, #1
   14eac:	cmp	r1, #7
   14eb0:	ldrls	pc, [pc, r1, lsl #2]
   14eb4:	b	14f78 <_start@@Base+0x1d4>
   14eb8:	andeq	r4, r1, ip, ror #30
   14ebc:	andeq	r4, r1, r0, ror #30
   14ec0:	andeq	r4, r1, r4, asr pc
   14ec4:	andeq	r4, r1, r8, asr #30
   14ec8:	andeq	r4, r1, ip, lsr pc
   14ecc:	andeq	r4, r1, r0, lsr pc
   14ed0:	andeq	r4, r1, r8, lsr #30
   14ed4:	ldrdeq	r4, [r1], -r8
   14ed8:	ldrb	r4, [r0, #7]
   14edc:	mov	r5, #0
   14ee0:	ldrb	r2, [r0, #6]
   14ee4:	mov	r1, r5
   14ee8:	orr	r2, r4, r2, lsl #8
   14eec:	ldrb	r4, [r0, #5]
   14ef0:	orr	r2, r2, r4, lsl #16
   14ef4:	ldrb	r4, [r0, #4]
   14ef8:	orr	r2, r2, r4, lsl #24
   14efc:	ldrb	r4, [r0, #3]
   14f00:	orr	r1, r1, r4
   14f04:	ldrb	r4, [r0, #2]
   14f08:	orr	r1, r1, r4, lsl #8
   14f0c:	ldrb	r4, [r0, #1]
   14f10:	orr	r1, r1, r4, lsl #16
   14f14:	ldrb	r4, [r0]
   14f18:	mov	r5, #0
   14f1c:	mov	r0, r2
   14f20:	orr	r1, r1, r4, lsl #24
   14f24:	pop	{r4, r5, pc}
   14f28:	mov	r4, #0
   14f2c:	b	14edc <_start@@Base+0x138>
   14f30:	mov	r2, #0
   14f34:	mov	r1, r2
   14f38:	b	14eec <_start@@Base+0x148>
   14f3c:	mov	r2, #0
   14f40:	mov	r1, r2
   14f44:	b	14ef4 <_start@@Base+0x150>
   14f48:	mov	r2, #0
   14f4c:	mov	r1, r2
   14f50:	b	14efc <_start@@Base+0x158>
   14f54:	mov	r2, #0
   14f58:	mov	r1, r2
   14f5c:	b	14f04 <_start@@Base+0x160>
   14f60:	mov	r2, #0
   14f64:	mov	r1, r2
   14f68:	b	14f0c <_start@@Base+0x168>
   14f6c:	mov	r2, #0
   14f70:	mov	r1, r2
   14f74:	b	14f14 <_start@@Base+0x170>
   14f78:	mov	r0, #0
   14f7c:	mov	r1, r0
   14f80:	pop	{r4, r5, pc}
   14f84:	cmp	r0, #4
   14f88:	movhi	r0, #0
   14f8c:	movls	r0, #1
   14f90:	bx	lr
   14f94:	cmp	r0, #11
   14f98:	bhi	14fbc <_start@@Base+0x218>
   14f9c:	cmp	r0, #8
   14fa0:	bcs	14fc4 <_start@@Base+0x220>
   14fa4:	cmp	r0, #0
   14fa8:	beq	14fc4 <_start@@Base+0x220>
   14fac:	cmp	r0, #2
   14fb0:	movne	r0, #0
   14fb4:	moveq	r0, #1
   14fb8:	bx	lr
   14fbc:	cmp	r0, #255	; 0xff
   14fc0:	b	14fb0 <_start@@Base+0x20c>
   14fc4:	mov	r0, #1
   14fc8:	bx	lr
   14fcc:	bx	lr
   14fd0:	mov	r0, #0
   14fd4:	bx	lr
   14fd8:	mov	r3, #4
   14fdc:	mov	r1, #0
   14fe0:	mov	r2, r3
   14fe4:	b	232f0 <flatcc_verify_field@@Base>
   14fe8:	ldr	r3, [pc, #108]	; 1505c <_start@@Base+0x2b8>
   14fec:	mov	r2, #0
   14ff0:	push	{r0, r1, r4, r5, r6, lr}
   14ff4:	mov	r4, r0
   14ff8:	mov	r5, r1
   14ffc:	mov	r6, #22
   15000:	str	r3, [sp, #4]
   15004:	mov	r3, #21
   15008:	str	r3, [sp]
   1500c:	ldr	r3, [pc, #76]	; 15060 <_start@@Base+0x2bc>
   15010:	bl	2cd54 <flatcc_json_printer_table_field@@Base>
   15014:	ldr	r3, [pc, #72]	; 15064 <_start@@Base+0x2c0>
   15018:	mov	r1, r5
   1501c:	mov	r0, r4
   15020:	mov	r2, #1
   15024:	str	r6, [sp]
   15028:	str	r3, [sp, #4]
   1502c:	ldr	r3, [pc, #52]	; 15068 <_start@@Base+0x2c4>
   15030:	bl	2cd54 <flatcc_json_printer_table_field@@Base>
   15034:	ldr	r3, [pc, #48]	; 1506c <_start@@Base+0x2c8>
   15038:	mov	r2, #2
   1503c:	mov	r1, r5
   15040:	mov	r0, r4
   15044:	str	r6, [sp]
   15048:	str	r3, [sp, #4]
   1504c:	ldr	r3, [pc, #28]	; 15070 <_start@@Base+0x2cc>
   15050:	bl	2cd54 <flatcc_json_printer_table_field@@Base>
   15054:	add	sp, sp, #8
   15058:	pop	{r4, r5, r6, pc}
   1505c:	andeq	r5, r1, ip, asr r1
   15060:	andeq	lr, r2, r4, asr r0
   15064:	strdeq	r5, [r1], -ip
   15068:	andeq	lr, r2, sl, rrx
   1506c:	muleq	r1, ip, r0
   15070:	andeq	lr, r2, r1, lsl #1
   15074:	mov	r3, #19
   15078:	push	{r0, r1, r2, lr}
   1507c:	mov	r2, #0
   15080:	str	r3, [sp]
   15084:	ldr	r3, [pc, #12]	; 15098 <_start@@Base+0x2f4>
   15088:	str	r2, [sp, #4]
   1508c:	bl	291fc <flatcc_json_printer_int32_field@@Base>
   15090:	add	sp, sp, #12
   15094:	pop	{pc}		; (ldr pc, [sp], #4)
   15098:	muleq	r2, r8, r0
   1509c:	push	{r4, r5, lr}
   150a0:	mov	r2, #0
   150a4:	sub	sp, sp, #20
   150a8:	mov	r3, #0
   150ac:	mov	r4, r0
   150b0:	mov	r5, r1
   150b4:	strd	r2, [sp, #8]
   150b8:	mov	r3, #15
   150bc:	str	r3, [sp]
   150c0:	ldr	r3, [pc, #44]	; 150f4 <_start@@Base+0x350>
   150c4:	bl	292a4 <flatcc_json_printer_int64_field@@Base>
   150c8:	mov	r3, #0
   150cc:	mov	r2, #1
   150d0:	mov	r1, r5
   150d4:	mov	r0, r4
   150d8:	str	r3, [sp, #4]
   150dc:	mov	r3, #21
   150e0:	str	r3, [sp]
   150e4:	ldr	r3, [pc, #12]	; 150f8 <_start@@Base+0x354>
   150e8:	bl	28f50 <flatcc_json_printer_uint32_field@@Base>
   150ec:	add	sp, sp, #20
   150f0:	pop	{r4, r5, pc}
   150f4:	andeq	lr, r2, ip, lsr #1
   150f8:	strheq	lr, [r2], -ip
   150fc:	push	{r4, r5, lr}
   15100:	mov	r2, #0
   15104:	sub	sp, sp, #20
   15108:	mov	r3, #0
   1510c:	mov	r4, r0
   15110:	mov	r5, r1
   15114:	strd	r2, [sp, #8]
   15118:	mov	r3, #15
   1511c:	str	r3, [sp]
   15120:	ldr	r3, [pc, #44]	; 15154 <_start@@Base+0x3b0>
   15124:	bl	292a4 <flatcc_json_printer_int64_field@@Base>
   15128:	mov	r3, #0
   1512c:	mov	r2, #1
   15130:	mov	r1, r5
   15134:	mov	r0, r4
   15138:	str	r3, [sp, #4]
   1513c:	mov	r3, #16
   15140:	str	r3, [sp]
   15144:	ldr	r3, [pc, #12]	; 15158 <_start@@Base+0x3b4>
   15148:	bl	28f50 <flatcc_json_printer_uint32_field@@Base>
   1514c:	add	sp, sp, #20
   15150:	pop	{r4, r5, pc}
   15154:	andeq	lr, r2, ip, lsr #1
   15158:	ldrdeq	lr, [r2], -r2
   1515c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15160:	mov	r7, #4
   15164:	sub	sp, sp, #20
   15168:	mov	fp, #0
   1516c:	mov	sl, #9
   15170:	mov	r4, r0
   15174:	mov	r5, r1
   15178:	ldr	r3, [pc, #232]	; 15268 <_start@@Base+0x4c4>
   1517c:	mov	r2, #0
   15180:	mov	r6, #8
   15184:	str	r7, [sp]
   15188:	mov	r8, #0
   1518c:	mov	r9, #0
   15190:	bl	28bf8 <flatcc_json_printer_string_field@@Base>
   15194:	mov	r1, r5
   15198:	mov	r0, r4
   1519c:	ldr	r3, [pc, #200]	; 1526c <_start@@Base+0x4c8>
   151a0:	mov	r2, #1
   151a4:	strd	sl, [sp]
   151a8:	bl	28f50 <flatcc_json_printer_uint32_field@@Base>
   151ac:	mov	r1, r5
   151b0:	mov	r0, r4
   151b4:	ldr	r3, [pc, #180]	; 15270 <_start@@Base+0x4cc>
   151b8:	mov	r2, #2
   151bc:	str	r7, [sp]
   151c0:	bl	28bf8 <flatcc_json_printer_string_field@@Base>
   151c4:	mov	r1, r5
   151c8:	mov	r0, r4
   151cc:	ldr	r3, [pc, #160]	; 15274 <_start@@Base+0x4d0>
   151d0:	mov	r2, #3
   151d4:	str	r6, [sp]
   151d8:	strd	r8, [sp, #8]
   151dc:	bl	292a4 <flatcc_json_printer_int64_field@@Base>
   151e0:	mov	r2, r7
   151e4:	mov	r1, r5
   151e8:	ldr	r3, [pc, #136]	; 15278 <_start@@Base+0x4d4>
   151ec:	mov	r0, r4
   151f0:	str	r7, [sp]
   151f4:	bl	28bf8 <flatcc_json_printer_string_field@@Base>
   151f8:	mov	r1, r5
   151fc:	mov	r0, r4
   15200:	ldr	r3, [pc, #116]	; 1527c <_start@@Base+0x4d8>
   15204:	mov	r2, #5
   15208:	str	r6, [sp]
   1520c:	strd	r8, [sp, #8]
   15210:	bl	292a4 <flatcc_json_printer_int64_field@@Base>
   15214:	mov	r1, r5
   15218:	mov	r0, r4
   1521c:	ldr	r3, [pc, #92]	; 15280 <_start@@Base+0x4dc>
   15220:	mov	r2, #6
   15224:	strd	sl, [sp]
   15228:	bl	28f50 <flatcc_json_printer_uint32_field@@Base>
   1522c:	mov	r1, r5
   15230:	mov	r0, r4
   15234:	ldr	r3, [pc, #72]	; 15284 <_start@@Base+0x4e0>
   15238:	mov	r2, #7
   1523c:	str	r6, [sp]
   15240:	strd	r8, [sp, #8]
   15244:	bl	292a4 <flatcc_json_printer_int64_field@@Base>
   15248:	ldr	r3, [pc, #56]	; 15288 <_start@@Base+0x4e4>
   1524c:	mov	r2, r6
   15250:	mov	r1, r5
   15254:	mov	r0, r4
   15258:	strd	sl, [sp]
   1525c:	bl	28f50 <flatcc_json_printer_uint32_field@@Base>
   15260:	add	sp, sp, #20
   15264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15268:	andeq	lr, r2, r3, ror #1
   1526c:	andeq	lr, r2, r8, ror #1
   15270:	strdeq	lr, [r2], -r2
   15274:	strdeq	lr, [r2], -r7
   15278:	andeq	lr, r2, r0, lsl #2
   1527c:	andeq	lr, r2, r5, lsl #2
   15280:	andeq	lr, r2, lr, lsl #2
   15284:	andeq	lr, r2, r8, lsl r1
   15288:	andeq	lr, r2, r1, lsr #2
   1528c:	ldr	r3, [pc, #1080]	; 156cc <_start@@Base+0x928>
   15290:	mov	r2, #0
   15294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15298:	mov	r6, #3
   1529c:	sub	sp, sp, #20
   152a0:	mov	r4, r0
   152a4:	mov	r5, r1
   152a8:	mov	r7, #4
   152ac:	mov	r8, #9
   152b0:	str	r6, [sp]
   152b4:	mov	r9, #5
   152b8:	mov	fp, #8
   152bc:	str	r3, [sp, #4]
   152c0:	ldr	r3, [pc, #1032]	; 156d0 <_start@@Base+0x92c>
   152c4:	bl	2d124 <flatcc_json_printer_struct_field@@Base>
   152c8:	mov	r3, #150	; 0x96
   152cc:	mov	r1, r5
   152d0:	str	r7, [sp]
   152d4:	mov	r0, r4
   152d8:	mov	r2, #1
   152dc:	ldr	sl, [pc, #1008]	; 156d4 <_start@@Base+0x930>
   152e0:	str	r3, [sp, #4]
   152e4:	ldr	r3, [pc, #1004]	; 156d8 <_start@@Base+0x934>
   152e8:	bl	29154 <flatcc_json_printer_int16_field@@Base>
   152ec:	mov	r2, #2
   152f0:	mov	r3, #100	; 0x64
   152f4:	mov	r1, r5
   152f8:	mov	r0, r4
   152fc:	strd	r2, [sp]
   15300:	ldr	r3, [pc, #980]	; 156dc <_start@@Base+0x938>
   15304:	bl	29154 <flatcc_json_printer_int16_field@@Base>
   15308:	mov	r2, r6
   1530c:	mov	r1, r5
   15310:	ldr	r3, [pc, #968]	; 156e0 <_start@@Base+0x93c>
   15314:	mov	r0, r4
   15318:	str	r7, [sp]
   1531c:	mov	r6, #17
   15320:	bl	28bf8 <flatcc_json_printer_string_field@@Base>
   15324:	mov	r1, r5
   15328:	mov	r0, r4
   1532c:	ldr	r3, [pc, #944]	; 156e4 <_start@@Base+0x940>
   15330:	mov	r2, #5
   15334:	str	r8, [sp]
   15338:	bl	2a51c <flatcc_json_printer_uint8_vector_field@@Base>
   1533c:	ldr	r3, [pc, #932]	; 156e8 <_start@@Base+0x944>
   15340:	mov	r1, r5
   15344:	mov	r0, r4
   15348:	mov	r2, #6
   1534c:	stm	sp, {r9, fp}
   15350:	str	r3, [sp, #8]
   15354:	ldr	r3, [pc, #912]	; 156ec <_start@@Base+0x948>
   15358:	bl	298b0 <flatcc_json_printer_int8_enum_field@@Base>
   1535c:	ldr	r3, [pc, #908]	; 156f0 <_start@@Base+0x94c>
   15360:	mov	r2, fp
   15364:	mov	r1, r5
   15368:	mov	r0, r4
   1536c:	str	r7, [sp]
   15370:	str	r3, [sp, #8]
   15374:	ldr	r3, [pc, #888]	; 156f4 <_start@@Base+0x950>
   15378:	str	r3, [sp, #4]
   1537c:	ldr	r3, [pc, #884]	; 156f8 <_start@@Base+0x954>
   15380:	bl	2cdd4 <flatcc_json_printer_union_field@@Base>
   15384:	ldr	r3, [pc, #880]	; 156fc <_start@@Base+0x958>
   15388:	mov	r2, r8
   1538c:	mov	r1, r5
   15390:	mov	r0, r4
   15394:	str	r9, [sp]
   15398:	str	r7, [sp, #4]
   1539c:	str	r3, [sp, #8]
   153a0:	ldr	r3, [pc, #856]	; 15700 <_start@@Base+0x95c>
   153a4:	bl	2c580 <flatcc_json_printer_struct_vector_field@@Base>
   153a8:	mov	r1, r5
   153ac:	mov	r0, r4
   153b0:	ldr	r3, [pc, #844]	; 15704 <_start@@Base+0x960>
   153b4:	mov	r2, #10
   153b8:	str	r6, [sp]
   153bc:	bl	2c7dc <flatcc_json_printer_string_vector_field@@Base>
   153c0:	mov	r1, r5
   153c4:	mov	r0, r4
   153c8:	ldr	r3, [pc, #824]	; 15708 <_start@@Base+0x964>
   153cc:	mov	r2, #11
   153d0:	stm	sp, {r6, sl}
   153d4:	bl	2c970 <flatcc_json_printer_table_vector_field@@Base>
   153d8:	mov	r1, r5
   153dc:	mov	r0, r4
   153e0:	ldr	r3, [pc, #804]	; 1570c <_start@@Base+0x968>
   153e4:	mov	r2, #12
   153e8:	stm	sp, {r9, sl}
   153ec:	bl	2cd54 <flatcc_json_printer_table_field@@Base>
   153f0:	mov	r2, #20
   153f4:	mov	r1, r5
   153f8:	ldr	r3, [pc, #784]	; 15710 <_start@@Base+0x96c>
   153fc:	mov	r0, r4
   15400:	str	sl, [sp, #8]
   15404:	mov	sl, #0
   15408:	str	r2, [sp]
   1540c:	mov	r2, #13
   15410:	str	sl, [sp, #4]
   15414:	bl	2d490 <flatcc_json_printer_table_as_nested_root@@Base>
   15418:	ldr	r3, [pc, #756]	; 15714 <_start@@Base+0x970>
   1541c:	mov	r1, r5
   15420:	mov	r0, r4
   15424:	mov	r2, #14
   15428:	str	r8, [sp]
   1542c:	mov	r8, #16
   15430:	str	r3, [sp, #4]
   15434:	ldr	r3, [pc, #732]	; 15718 <_start@@Base+0x974>
   15438:	bl	2cd54 <flatcc_json_printer_table_field@@Base>
   1543c:	mov	r3, #1
   15440:	mov	r1, r5
   15444:	str	fp, [sp]
   15448:	mov	r0, r4
   1544c:	mov	r2, #15
   15450:	str	r3, [sp, #4]
   15454:	ldr	r3, [pc, #704]	; 1571c <_start@@Base+0x978>
   15458:	bl	29358 <flatcc_json_printer_bool_field@@Base>
   1545c:	mov	r2, r8
   15460:	mov	r1, r5
   15464:	ldr	r3, [pc, #692]	; 15720 <_start@@Base+0x97c>
   15468:	mov	r0, r4
   1546c:	stm	sp, {r8, sl}
   15470:	bl	291fc <flatcc_json_printer_int32_field@@Base>
   15474:	mov	r2, r6
   15478:	mov	r1, r5
   1547c:	ldr	r3, [pc, #672]	; 15724 <_start@@Base+0x980>
   15480:	mov	r0, r4
   15484:	stm	sp, {r8, sl}
   15488:	bl	28f50 <flatcc_json_printer_uint32_field@@Base>
   1548c:	mov	r2, #0
   15490:	mov	r3, #0
   15494:	str	r8, [sp]
   15498:	mov	r1, r5
   1549c:	mov	r0, r4
   154a0:	strd	r2, [sp, #8]
   154a4:	mov	r2, #18
   154a8:	ldr	r3, [pc, #632]	; 15728 <_start@@Base+0x984>
   154ac:	bl	292a4 <flatcc_json_printer_int64_field@@Base>
   154b0:	mov	r2, #0
   154b4:	mov	r3, #0
   154b8:	str	r8, [sp]
   154bc:	mov	r1, r5
   154c0:	mov	r0, r4
   154c4:	strd	r2, [sp, #8]
   154c8:	mov	r2, #19
   154cc:	ldr	r3, [pc, #600]	; 1572c <_start@@Base+0x988>
   154d0:	bl	28ff8 <flatcc_json_printer_uint64_field@@Base>
   154d4:	mov	r1, r5
   154d8:	mov	r0, r4
   154dc:	ldr	r3, [pc, #588]	; 15730 <_start@@Base+0x98c>
   154e0:	mov	r2, #20
   154e4:	stm	sp, {r6, sl}
   154e8:	bl	291fc <flatcc_json_printer_int32_field@@Base>
   154ec:	mov	r1, r5
   154f0:	mov	r0, r4
   154f4:	ldr	r3, [pc, #568]	; 15734 <_start@@Base+0x990>
   154f8:	mov	r2, #21
   154fc:	stm	sp, {r6, sl}
   15500:	bl	28f50 <flatcc_json_printer_uint32_field@@Base>
   15504:	mov	r2, #0
   15508:	mov	r3, #0
   1550c:	str	r6, [sp]
   15510:	mov	r1, r5
   15514:	mov	r0, r4
   15518:	strd	r2, [sp, #8]
   1551c:	mov	r2, #22
   15520:	ldr	r3, [pc, #528]	; 15738 <_start@@Base+0x994>
   15524:	bl	292a4 <flatcc_json_printer_int64_field@@Base>
   15528:	mov	r2, #0
   1552c:	mov	r3, #0
   15530:	str	r6, [sp]
   15534:	mov	r1, r5
   15538:	mov	r0, r4
   1553c:	strd	r2, [sp, #8]
   15540:	mov	r2, #23
   15544:	ldr	r3, [pc, #496]	; 1573c <_start@@Base+0x998>
   15548:	bl	28ff8 <flatcc_json_printer_uint64_field@@Base>
   1554c:	mov	r1, r5
   15550:	mov	r0, r4
   15554:	ldr	r3, [pc, #484]	; 15740 <_start@@Base+0x99c>
   15558:	mov	r2, #24
   1555c:	str	r8, [sp]
   15560:	mov	r8, #6
   15564:	bl	2b200 <flatcc_json_printer_bool_vector_field@@Base>
   15568:	mov	r1, r5
   1556c:	mov	r0, r4
   15570:	vldr	s0, [pc, #328]	; 156c0 <_start@@Base+0x91c>
   15574:	mov	r2, #25
   15578:	str	r9, [sp]
   1557c:	ldr	r3, [pc, #448]	; 15744 <_start@@Base+0x9a0>
   15580:	bl	29400 <flatcc_json_printer_float_field@@Base>
   15584:	mov	r1, r5
   15588:	mov	r0, r4
   1558c:	vldr	s0, [pc, #304]	; 156c4 <_start@@Base+0x920>
   15590:	mov	r2, #26
   15594:	str	r8, [sp]
   15598:	ldr	r3, [pc, #424]	; 15748 <_start@@Base+0x9a4>
   1559c:	bl	29400 <flatcc_json_printer_float_field@@Base>
   155a0:	vldr	s0, [pc, #288]	; 156c8 <_start@@Base+0x924>
   155a4:	mov	r1, r5
   155a8:	mov	r0, r4
   155ac:	mov	r2, #27
   155b0:	str	r8, [sp]
   155b4:	ldr	r3, [pc, #400]	; 1574c <_start@@Base+0x9a8>
   155b8:	bl	29400 <flatcc_json_printer_float_field@@Base>
   155bc:	mov	r3, #18
   155c0:	mov	r1, r5
   155c4:	mov	r0, r4
   155c8:	mov	r2, #28
   155cc:	str	r3, [sp]
   155d0:	ldr	r3, [pc, #376]	; 15750 <_start@@Base+0x9ac>
   155d4:	bl	2c7dc <flatcc_json_printer_string_vector_field@@Base>
   155d8:	ldr	r3, [pc, #372]	; 15754 <_start@@Base+0x9b0>
   155dc:	mov	r1, r5
   155e0:	mov	r0, r4
   155e4:	mov	r2, #29
   155e8:	str	fp, [sp, #4]
   155ec:	str	r3, [sp, #8]
   155f0:	mov	r3, #23
   155f4:	str	r3, [sp]
   155f8:	ldr	r3, [pc, #344]	; 15758 <_start@@Base+0x9b4>
   155fc:	bl	2c580 <flatcc_json_printer_struct_vector_field@@Base>
   15600:	mov	r1, r5
   15604:	mov	r0, r4
   15608:	ldr	r3, [pc, #332]	; 1575c <_start@@Base+0x9b8>
   1560c:	mov	r2, #30
   15610:	str	r7, [sp]
   15614:	bl	2a51c <flatcc_json_printer_uint8_vector_field@@Base>
   15618:	ldr	r3, [pc, #220]	; 156fc <_start@@Base+0x958>
   1561c:	mov	r1, r5
   15620:	mov	r0, r4
   15624:	mov	r2, #31
   15628:	str	r9, [sp]
   1562c:	str	r7, [sp, #4]
   15630:	str	r3, [sp, #8]
   15634:	ldr	r3, [pc, #292]	; 15760 <_start@@Base+0x9bc>
   15638:	bl	2c580 <flatcc_json_printer_struct_vector_field@@Base>
   1563c:	mov	r3, #15
   15640:	mov	r1, r5
   15644:	mov	r0, r4
   15648:	mov	r2, #32
   1564c:	str	r3, [sp]
   15650:	ldr	r3, [pc, #268]	; 15764 <_start@@Base+0x9c0>
   15654:	bl	2b064 <flatcc_json_printer_int64_vector_field@@Base>
   15658:	mov	r1, r5
   1565c:	mov	r0, r4
   15660:	ldr	r3, [pc, #256]	; 15768 <_start@@Base+0x9c4>
   15664:	mov	r2, #33	; 0x21
   15668:	str	r6, [sp]
   1566c:	bl	2b540 <flatcc_json_printer_double_vector_field@@Base>
   15670:	ldr	r3, [pc, #244]	; 1576c <_start@@Base+0x9c8>
   15674:	mov	r1, r5
   15678:	mov	r0, r4
   1567c:	mov	r2, #34	; 0x22
   15680:	str	r3, [sp, #4]
   15684:	mov	r3, #21
   15688:	str	r3, [sp]
   1568c:	ldr	r3, [pc, #220]	; 15770 <_start@@Base+0x9cc>
   15690:	bl	2cd54 <flatcc_json_printer_table_field@@Base>
   15694:	ldr	r3, [pc, #216]	; 15774 <_start@@Base+0x9d0>
   15698:	mov	r2, #35	; 0x23
   1569c:	mov	r1, r5
   156a0:	mov	r0, r4
   156a4:	str	r3, [sp, #4]
   156a8:	mov	r3, #10
   156ac:	str	r3, [sp]
   156b0:	ldr	r3, [pc, #192]	; 15778 <_start@@Base+0x9d4>
   156b4:	bl	2cd54 <flatcc_json_printer_table_field@@Base>
   156b8:	add	sp, sp, #20
   156bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156c0:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   156c4:	submi	r0, r0, r0
   156c8:	andeq	r0, r0, r0
   156cc:	muleq	r1, r8, sp
   156d0:	andeq	lr, r2, fp, lsr #2
   156d4:	andeq	r5, r1, ip, lsl #5
   156d8:	andeq	lr, r2, pc, lsr #2
   156dc:	andeq	lr, r2, r4, lsr r1
   156e0:	andeq	lr, r2, r7, lsr r1
   156e4:	andeq	lr, r2, ip, lsr r1
   156e8:	ldrdeq	r5, [r1], -ip
   156ec:	andeq	lr, r2, r6, asr #2
   156f0:	andeq	r5, r1, r4, lsr #18
   156f4:	andeq	r7, r1, r0, asr #7
   156f8:			; <UNDEFINED> instruction: 0x0002e2be
   156fc:	ldrdeq	r5, [r1], -r0
   15700:	andeq	lr, r2, ip, asr #2
   15704:	andeq	lr, r2, r2, asr r1
   15708:	andeq	lr, r2, r4, ror #2
   1570c:	andeq	lr, r2, r6, ror r1
   15710:	andeq	lr, r2, ip, ror r1
   15714:	andeq	r5, r1, r0, asr r8
   15718:	muleq	r2, r1, r1
   1571c:	muleq	r2, fp, r1
   15720:	andeq	lr, r2, r4, lsr #3
   15724:			; <UNDEFINED> instruction: 0x0002e1b5
   15728:	andeq	lr, r2, r6, asr #3
   1572c:	ldrdeq	lr, [r2], -r7
   15730:	andeq	lr, r2, r8, ror #3
   15734:	strdeq	lr, [r2], -sl
   15738:	andeq	lr, r2, ip, lsl #4
   1573c:	andeq	lr, r2, lr, lsl r2
   15740:	andeq	lr, r2, r0, lsr r2
   15744:	andeq	lr, r2, r1, asr #4
   15748:	andeq	lr, r2, r7, asr #4
   1574c:	andeq	lr, r2, lr, asr #4
   15750:	andeq	lr, r2, r5, asr r2
   15754:	strdeq	r5, [r1], -r0
   15758:	andeq	lr, r2, r8, ror #4
   1575c:	andeq	lr, r2, r0, lsl #5
   15760:	andeq	lr, r2, r5, lsl #5
   15764:	andeq	lr, r2, fp, lsl #5
   15768:	muleq	r2, fp, r2
   1576c:	andeq	r4, r1, ip, asr #31
   15770:	andeq	lr, r2, sp, lsr #5
   15774:	andeq	r5, r1, ip, ror r7
   15778:	andeq	lr, r2, r3, asr #5
   1577c:	push	{r0, r1, r4, r5, r6, lr}
   15780:	mov	r3, #4
   15784:	mov	r4, #0
   15788:	mov	r2, r4
   1578c:	mov	r5, r0
   15790:	mov	r6, r1
   15794:	stm	sp, {r3, r4}
   15798:	ldr	r3, [pc, #68]	; 157e4 <_start@@Base+0xa40>
   1579c:	bl	28c6c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   157a0:	mov	r2, #1
   157a4:	mov	r3, #7
   157a8:	mov	r1, r6
   157ac:	mov	r0, r5
   157b0:	str	r3, [sp]
   157b4:	ldr	r3, [pc, #44]	; 157e8 <_start@@Base+0xa44>
   157b8:	str	r2, [sp, #4]
   157bc:	bl	28c6c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   157c0:	mov	r3, #6
   157c4:	mov	r2, #2
   157c8:	mov	r1, r6
   157cc:	mov	r0, r5
   157d0:	stm	sp, {r3, r4}
   157d4:	ldr	r3, [pc, #16]	; 157ec <_start@@Base+0xa48>
   157d8:	bl	28c6c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   157dc:	add	sp, sp, #8
   157e0:	pop	{r4, r5, r6, pc}
   157e4:	ldrdeq	lr, [r2], -r1
   157e8:	andeq	lr, r2, lr, asr #5
   157ec:	ldrdeq	lr, [r2], -r6
   157f0:	mov	r3, #2
   157f4:	push	{r0, r1, r2, r4, r5, lr}
   157f8:	mov	r4, r1
   157fc:	mov	r2, r1
   15800:	mov	r5, r0
   15804:	str	r3, [sp, #4]
   15808:	ldr	r3, [pc, #56]	; 15848 <_start@@Base+0xaa4>
   1580c:	str	r3, [sp]
   15810:	mov	r3, #0
   15814:	mov	r1, r3
   15818:	bl	29d78 <flatcc_json_printer_uint32_struct_field@@Base>
   1581c:	mov	r3, #8
   15820:	mov	r2, r4
   15824:	mov	r1, #1
   15828:	mov	r0, r5
   1582c:	str	r3, [sp, #4]
   15830:	ldr	r3, [pc, #20]	; 1584c <_start@@Base+0xaa8>
   15834:	str	r3, [sp]
   15838:	mov	r3, #4
   1583c:	bl	29d78 <flatcc_json_printer_uint32_struct_field@@Base>
   15840:	add	sp, sp, #12
   15844:	pop	{r4, r5, pc}
   15848:	ldrdeq	lr, [r2], -sp
   1584c:	andeq	lr, r2, r0, ror #5
   15850:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   15854:	mov	r6, #2
   15858:	mov	r2, #0
   1585c:	mov	r4, r0
   15860:	mov	r5, r1
   15864:	ldr	r3, [pc, #88]	; 158c4 <_start@@Base+0xb20>
   15868:	str	r6, [sp]
   1586c:	bl	28bf8 <flatcc_json_printer_string_field@@Base>
   15870:	mov	r2, #0
   15874:	mov	r3, #0
   15878:	mov	r1, r5
   1587c:	mov	r0, r4
   15880:	strd	r2, [sp, #8]
   15884:	mov	r3, #3
   15888:	mov	r2, #1
   1588c:	str	r3, [sp]
   15890:	ldr	r3, [pc, #48]	; 158c8 <_start@@Base+0xb24>
   15894:	bl	292a4 <flatcc_json_printer_int64_field@@Base>
   15898:	mov	r3, #0
   1589c:	mov	r2, r6
   158a0:	mov	r1, r5
   158a4:	mov	r0, r4
   158a8:	str	r3, [sp, #4]
   158ac:	mov	r3, #5
   158b0:	str	r3, [sp]
   158b4:	ldr	r3, [pc, #16]	; 158cc <_start@@Base+0xb28>
   158b8:	bl	28ea8 <flatcc_json_printer_uint16_field@@Base>
   158bc:	add	sp, sp, #16
   158c0:	pop	{r4, r5, r6, pc}
   158c4:	ldrdeq	lr, [r2], -sp
   158c8:	andeq	lr, r2, r9, ror #5
   158cc:	andeq	r1, r3, sl, asr r8
   158d0:	ldr	r3, [pc, #68]	; 1591c <_start@@Base+0xb78>
   158d4:	mov	r2, r1
   158d8:	push	{r0, r1, r4, r5, r6, lr}
   158dc:	mov	r4, #1
   158e0:	mov	r5, r1
   158e4:	mov	r6, r0
   158e8:	stm	sp, {r3, r4}
   158ec:	mov	r3, #0
   158f0:	mov	r1, r3
   158f4:	bl	29e78 <flatcc_json_printer_int16_struct_field@@Base>
   158f8:	ldr	r3, [pc, #32]	; 15920 <_start@@Base+0xb7c>
   158fc:	mov	r2, r5
   15900:	mov	r1, r4
   15904:	mov	r0, r6
   15908:	stm	sp, {r3, r4}
   1590c:	mov	r3, #2
   15910:	bl	29e24 <flatcc_json_printer_int8_struct_field@@Base>
   15914:	add	sp, sp, #8
   15918:	pop	{r4, r5, r6, pc}
   1591c:	strdeq	lr, [r2], -r8
   15920:	strdeq	lr, [r2], -r5
   15924:	ldrb	r3, [r1, #8]
   15928:	sub	r3, r3, #1
   1592c:	cmp	r3, #3
   15930:	ldrls	pc, [pc, r3, lsl #2]
   15934:	b	15968 <_start@@Base+0xbc4>
   15938:	andeq	r5, r1, r8, asr #18
   1593c:	andeq	r5, r1, r0, asr r9
   15940:	andeq	r5, r1, r8, asr r9
   15944:	andeq	r5, r1, r0, ror #18
   15948:	ldr	r2, [pc, #28]	; 1596c <_start@@Base+0xbc8>
   1594c:	b	2cfb8 <flatcc_json_printer_union_table@@Base>
   15950:	ldr	r2, [pc, #24]	; 15970 <_start@@Base+0xbcc>
   15954:	b	1594c <_start@@Base+0xba8>
   15958:	ldr	r2, [pc, #20]	; 15974 <_start@@Base+0xbd0>
   1595c:	b	1594c <_start@@Base+0xba8>
   15960:	ldr	r2, [pc, #16]	; 15978 <_start@@Base+0xbd4>
   15964:	b	1594c <_start@@Base+0xba8>
   15968:	bx	lr
   1596c:	andeq	r5, r1, ip, lsl #5
   15970:	andeq	r5, r1, r4, asr #24
   15974:	andeq	r8, r1, r0, ror #21
   15978:	andeq	r5, r1, ip, ror r9
   1597c:	ldr	r3, [pc, #124]	; 15a00 <_start@@Base+0xc5c>
   15980:	mov	r2, #0
   15984:	push	{r4, r5, lr}
   15988:	sub	sp, sp, #20
   1598c:	mov	r4, r0
   15990:	mov	r5, r1
   15994:	str	r3, [sp, #4]
   15998:	mov	r3, #6
   1599c:	str	r3, [sp]
   159a0:	ldr	r3, [pc, #92]	; 15a04 <_start@@Base+0xc60>
   159a4:	bl	2cd54 <flatcc_json_printer_table_field@@Base>
   159a8:	ldr	r3, [pc, #88]	; 15a08 <_start@@Base+0xc64>
   159ac:	mov	r1, r5
   159b0:	mov	r0, r4
   159b4:	mov	r2, #1
   159b8:	str	r3, [sp, #4]
   159bc:	mov	r3, #5
   159c0:	str	r3, [sp]
   159c4:	ldr	r3, [pc, #64]	; 15a0c <_start@@Base+0xc68>
   159c8:	bl	2cd54 <flatcc_json_printer_table_field@@Base>
   159cc:	ldr	r3, [pc, #60]	; 15a10 <_start@@Base+0xc6c>
   159d0:	mov	r2, #3
   159d4:	mov	r1, r5
   159d8:	mov	r0, r4
   159dc:	str	r3, [sp, #8]
   159e0:	ldr	r3, [pc, #44]	; 15a14 <_start@@Base+0xc70>
   159e4:	str	r3, [sp, #4]
   159e8:	mov	r3, #7
   159ec:	str	r3, [sp]
   159f0:	ldr	r3, [pc, #32]	; 15a18 <_start@@Base+0xc74>
   159f4:	bl	2caa0 <flatcc_json_printer_union_vector_field@@Base>
   159f8:	add	sp, sp, #20
   159fc:	pop	{r4, r5, pc}
   15a00:	andeq	r4, r1, r8, ror #31
   15a04:	andeq	lr, r2, sp, ror #5
   15a08:	andeq	r5, r1, ip, lsl sl
   15a0c:	strdeq	lr, [r2], -r4
   15a10:	andeq	r5, r1, r4, lsr #18
   15a14:	andeq	r7, r1, r0, asr #7
   15a18:	strdeq	lr, [r2], -sl
   15a1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15a20:	mov	r3, #14
   15a24:	sub	sp, sp, #20
   15a28:	mov	r9, #10
   15a2c:	mov	r6, r0
   15a30:	mov	r7, r1
   15a34:	mov	r8, #9
   15a38:	ldr	r5, [pc, #136]	; 15ac8 <_start@@Base+0xd24>
   15a3c:	mov	r2, #1
   15a40:	ldr	r4, [pc, #132]	; 15acc <_start@@Base+0xd28>
   15a44:	stm	sp, {r3, r4, r5}
   15a48:	ldr	r3, [pc, #128]	; 15ad0 <_start@@Base+0xd2c>
   15a4c:	bl	2cdd4 <flatcc_json_printer_union_field@@Base>
   15a50:	mov	r1, r7
   15a54:	mov	r0, r6
   15a58:	ldr	r3, [pc, #116]	; 15ad4 <_start@@Base+0xd30>
   15a5c:	mov	r2, #3
   15a60:	str	r9, [sp]
   15a64:	strd	r4, [sp, #4]
   15a68:	bl	2cdd4 <flatcc_json_printer_union_field@@Base>
   15a6c:	mov	r1, r7
   15a70:	mov	r0, r6
   15a74:	ldr	r3, [pc, #92]	; 15ad8 <_start@@Base+0xd34>
   15a78:	mov	r2, #5
   15a7c:	str	r8, [sp]
   15a80:	strd	r4, [sp, #4]
   15a84:	bl	2cdd4 <flatcc_json_printer_union_field@@Base>
   15a88:	mov	r3, #5
   15a8c:	mov	r1, r7
   15a90:	mov	r0, r6
   15a94:	mov	r2, #7
   15a98:	stm	sp, {r3, r4, r5}
   15a9c:	ldr	r3, [pc, #56]	; 15adc <_start@@Base+0xd38>
   15aa0:	bl	2cdd4 <flatcc_json_printer_union_field@@Base>
   15aa4:	ldr	r3, [pc, #52]	; 15ae0 <_start@@Base+0xd3c>
   15aa8:	mov	r2, r8
   15aac:	mov	r1, r7
   15ab0:	mov	r0, r6
   15ab4:	str	r9, [sp]
   15ab8:	strd	r4, [sp, #4]
   15abc:	bl	2caa0 <flatcc_json_printer_union_vector_field@@Base>
   15ac0:	add	sp, sp, #20
   15ac4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15ac8:	andeq	r5, r1, r4, ror #21
   15acc:			; <UNDEFINED> instruction: 0x00015bb0
   15ad0:	andeq	lr, r2, r2, lsl #6
   15ad4:	andeq	lr, r2, r1, lsl r3
   15ad8:	andeq	lr, r2, ip, lsl r3
   15adc:	andeq	lr, r2, r6, lsr #6
   15ae0:	andeq	lr, r2, ip, lsr #6
   15ae4:	ldrb	r3, [r1, #8]
   15ae8:	mov	ip, r0
   15aec:	mov	r2, r1
   15af0:	cmp	r3, #10
   15af4:	bhi	15b18 <_start@@Base+0xd74>
   15af8:	cmp	r3, #9
   15afc:	bcs	15b3c <_start@@Base+0xd98>
   15b00:	cmp	r3, #2
   15b04:	beq	15b34 <_start@@Base+0xd90>
   15b08:	cmp	r3, #8
   15b0c:	bxne	lr
   15b10:	ldr	r2, [pc, #44]	; 15b44 <_start@@Base+0xda0>
   15b14:	b	2cfd8 <flatcc_json_printer_union_struct@@Base>
   15b18:	cmp	r3, #11
   15b1c:	beq	15b28 <_start@@Base+0xd84>
   15b20:	cmp	r3, #255	; 0xff
   15b24:	bxne	lr
   15b28:	mov	r1, r2
   15b2c:	mov	r0, ip
   15b30:	b	2d05c <flatcc_json_printer_union_string@@Base>
   15b34:	ldr	r2, [pc, #12]	; 15b48 <_start@@Base+0xda4>
   15b38:	b	2cfb8 <flatcc_json_printer_union_table@@Base>
   15b3c:	ldr	r2, [pc, #8]	; 15b4c <_start@@Base+0xda8>
   15b40:	b	15b14 <_start@@Base+0xd70>
   15b44:	andeq	r5, r1, r0, lsl #23
   15b48:	andeq	r5, r1, r4, ror r0
   15b4c:	andeq	r5, r1, r0, asr fp
   15b50:	mov	r3, #10
   15b54:	push	{r0, r1, r2, lr}
   15b58:	mov	r2, r1
   15b5c:	str	r3, [sp, #4]
   15b60:	ldr	r3, [pc, #20]	; 15b7c <_start@@Base+0xdd8>
   15b64:	str	r3, [sp]
   15b68:	mov	r3, #0
   15b6c:	mov	r1, r3
   15b70:	bl	29ecc <flatcc_json_printer_int32_struct_field@@Base>
   15b74:	add	sp, sp, #12
   15b78:	pop	{pc}		; (ldr pc, [sp], #4)
   15b7c:	andeq	lr, r2, r7, lsr r3
   15b80:	mov	r3, #11
   15b84:	push	{r0, r1, r2, lr}
   15b88:	mov	r2, r1
   15b8c:	str	r3, [sp, #4]
   15b90:	ldr	r3, [pc, #20]	; 15bac <_start@@Base+0xe08>
   15b94:	str	r3, [sp]
   15b98:	mov	r3, #0
   15b9c:	mov	r1, r3
   15ba0:	bl	29d24 <flatcc_json_printer_uint16_struct_field@@Base>
   15ba4:	add	sp, sp, #12
   15ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bac:	andeq	lr, r2, r2, asr #6
   15bb0:	cmp	r1, #9
   15bb4:	mov	r2, r1
   15bb8:	mov	r3, r0
   15bbc:	moveq	r2, #5
   15bc0:	ldreq	r1, [pc, #96]	; 15c28 <_start@@Base+0xe84>
   15bc4:	beq	15c24 <_start@@Base+0xe80>
   15bc8:	bhi	15bf8 <_start@@Base+0xe54>
   15bcc:	cmp	r2, #2
   15bd0:	moveq	r2, #5
   15bd4:	ldreq	r1, [pc, #80]	; 15c2c <_start@@Base+0xe88>
   15bd8:	beq	15c24 <_start@@Base+0xe80>
   15bdc:	cmp	r2, #8
   15be0:	ldreq	r1, [pc, #72]	; 15c30 <_start@@Base+0xe8c>
   15be4:	beq	15c24 <_start@@Base+0xe80>
   15be8:	mov	r2, #4
   15bec:	mov	r0, r3
   15bf0:	ldr	r1, [pc, #60]	; 15c34 <_start@@Base+0xe90>
   15bf4:	b	15c24 <_start@@Base+0xe80>
   15bf8:	cmp	r2, #11
   15bfc:	moveq	r2, #5
   15c00:	ldreq	r1, [pc, #48]	; 15c38 <_start@@Base+0xe94>
   15c04:	beq	15c24 <_start@@Base+0xe80>
   15c08:	movcc	r2, #7
   15c0c:	ldrcc	r1, [pc, #40]	; 15c3c <_start@@Base+0xe98>
   15c10:	bcc	15c24 <_start@@Base+0xe80>
   15c14:	cmp	r2, #255	; 0xff
   15c18:	moveq	r2, #6
   15c1c:	ldreq	r1, [pc, #28]	; 15c40 <_start@@Base+0xe9c>
   15c20:	bne	15be8 <_start@@Base+0xe44>
   15c24:	b	28b88 <flatcc_json_printer_enum@@Base>
   15c28:	andeq	lr, r2, sp, asr r3
   15c2c:	andeq	lr, r2, lr, asr #6
   15c30:	andeq	lr, r2, r4, asr r3
   15c34:	andeq	r1, r3, r5, ror #26
   15c38:	andeq	lr, r2, fp, ror #6
   15c3c:	andeq	lr, r2, r3, ror #6
   15c40:	andeq	lr, r2, r1, ror r3
   15c44:	push	{r4, r5, r6, r7, lr}
   15c48:	mov	r3, #5
   15c4c:	sub	sp, sp, #20
   15c50:	mov	r4, #2
   15c54:	mov	r2, #0
   15c58:	mov	r5, r0
   15c5c:	mov	r6, r1
   15c60:	ldr	r7, [pc, #96]	; 15cc8 <_start@@Base+0xf24>
   15c64:	stm	sp, {r3, r4, r7}
   15c68:	ldr	r3, [pc, #92]	; 15ccc <_start@@Base+0xf28>
   15c6c:	bl	298b0 <flatcc_json_printer_int8_enum_field@@Base>
   15c70:	mov	r3, #6
   15c74:	mov	r1, r6
   15c78:	mov	r0, r5
   15c7c:	mov	r2, #1
   15c80:	stm	sp, {r3, r4, r7}
   15c84:	ldr	r3, [pc, #68]	; 15cd0 <_start@@Base+0xf2c>
   15c88:	bl	298b0 <flatcc_json_printer_int8_enum_field@@Base>
   15c8c:	mov	r2, r4
   15c90:	mov	r1, r6
   15c94:	ldr	r3, [pc, #56]	; 15cd4 <_start@@Base+0xf30>
   15c98:	mov	r0, r5
   15c9c:	str	r4, [sp]
   15ca0:	str	r4, [sp, #4]
   15ca4:	bl	28e00 <flatcc_json_printer_uint8_field@@Base>
   15ca8:	ldr	r3, [pc, #40]	; 15cd8 <_start@@Base+0xf34>
   15cac:	mov	r2, #3
   15cb0:	mov	r1, r6
   15cb4:	mov	r0, r5
   15cb8:	stm	sp, {r2, r4}
   15cbc:	bl	28e00 <flatcc_json_printer_uint8_field@@Base>
   15cc0:	add	sp, sp, #20
   15cc4:	pop	{r4, r5, r6, r7, pc}
   15cc8:	ldrdeq	r5, [r1], -ip
   15ccc:	andeq	lr, r2, r6, asr #2
   15cd0:	andeq	lr, r2, r8, ror r3
   15cd4:	andeq	lr, r2, pc, ror r3
   15cd8:	andeq	lr, r2, r2, lsl #7
   15cdc:	push	{r4, r5, r6, r7, r8, lr}
   15ce0:	uxtb	r4, r1
   15ce4:	tst	r4, #244	; 0xf4
   15ce8:	movne	r6, #1
   15cec:	moveq	r6, #0
   15cf0:	cmp	r4, #0
   15cf4:	moveq	r6, #1
   15cf8:	cmp	r6, #0
   15cfc:	beq	15d08 <_start@@Base+0xf64>
   15d00:	pop	{r4, r5, r6, r7, r8, lr}
   15d04:	b	28ab0 <flatcc_json_printer_int8@@Base>
   15d08:	sub	r3, r4, #1
   15d0c:	mov	r5, r0
   15d10:	tst	r3, r4
   15d14:	movne	r7, #1
   15d18:	moveq	r7, #0
   15d1c:	mov	r1, r7
   15d20:	bl	28b8c <flatcc_json_printer_delimit_enum_flags@@Base>
   15d24:	ands	r1, r4, #1
   15d28:	beq	15d44 <_start@@Base+0xfa0>
   15d2c:	mov	r1, r6
   15d30:	mov	r3, #3
   15d34:	ldr	r2, [pc, #80]	; 15d8c <_start@@Base+0xfe8>
   15d38:	mov	r0, r5
   15d3c:	bl	28bc0 <flatcc_json_printer_enum_flag@@Base>
   15d40:	mov	r1, #1
   15d44:	tst	r4, #2
   15d48:	beq	15d64 <_start@@Base+0xfc0>
   15d4c:	add	r6, r1, #1
   15d50:	mov	r3, #5
   15d54:	ldr	r2, [pc, #52]	; 15d90 <_start@@Base+0xfec>
   15d58:	mov	r0, r5
   15d5c:	bl	28bc0 <flatcc_json_printer_enum_flag@@Base>
   15d60:	mov	r1, r6
   15d64:	tst	r4, #8
   15d68:	beq	15d7c <_start@@Base+0xfd8>
   15d6c:	mov	r3, #4
   15d70:	ldr	r2, [pc, #28]	; 15d94 <_start@@Base+0xff0>
   15d74:	mov	r0, r5
   15d78:	bl	28bc0 <flatcc_json_printer_enum_flag@@Base>
   15d7c:	mov	r1, r7
   15d80:	mov	r0, r5
   15d84:	pop	{r4, r5, r6, r7, r8, lr}
   15d88:	b	28b8c <flatcc_json_printer_delimit_enum_flags@@Base>
   15d8c:	andeq	lr, r2, r6, lsl #7
   15d90:	andeq	lr, r2, sl, lsl #7
   15d94:	muleq	r2, r0, r3
   15d98:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   15d9c:	mov	r6, #1
   15da0:	mov	r4, r1
   15da4:	mov	r2, r1
   15da8:	mov	r5, r0
   15dac:	ldr	r3, [pc, #188]	; 15e70 <_start@@Base+0x10cc>
   15db0:	stm	sp, {r3, r6}
   15db4:	mov	r3, #0
   15db8:	mov	r1, r3
   15dbc:	bl	29fcc <flatcc_json_printer_float_struct_field@@Base>
   15dc0:	ldr	r3, [pc, #172]	; 15e74 <_start@@Base+0x10d0>
   15dc4:	mov	r2, r4
   15dc8:	mov	r1, r6
   15dcc:	mov	r0, r5
   15dd0:	stm	sp, {r3, r6}
   15dd4:	mov	r3, #4
   15dd8:	bl	29fcc <flatcc_json_printer_float_struct_field@@Base>
   15ddc:	ldr	r3, [pc, #148]	; 15e78 <_start@@Base+0x10d4>
   15de0:	mov	r2, r4
   15de4:	mov	r0, r5
   15de8:	mov	r1, #2
   15dec:	stm	sp, {r3, r6}
   15df0:	mov	r3, #8
   15df4:	mov	r6, #5
   15df8:	bl	29fcc <flatcc_json_printer_float_struct_field@@Base>
   15dfc:	ldr	r3, [pc, #120]	; 15e7c <_start@@Base+0x10d8>
   15e00:	mov	r2, r4
   15e04:	mov	r0, r5
   15e08:	mov	r1, #3
   15e0c:	stm	sp, {r3, r6}
   15e10:	mov	r3, #16
   15e14:	bl	2a02c <flatcc_json_printer_double_struct_field@@Base>
   15e18:	ldr	r3, [pc, #96]	; 15e80 <_start@@Base+0x10dc>
   15e1c:	mov	r2, r4
   15e20:	mov	r0, r5
   15e24:	mov	r1, #4
   15e28:	str	r6, [sp, #4]
   15e2c:	str	r3, [sp, #8]
   15e30:	ldr	r3, [pc, #76]	; 15e84 <_start@@Base+0x10e0>
   15e34:	str	r3, [sp]
   15e38:	mov	r3, #24
   15e3c:	bl	2a294 <flatcc_json_printer_int8_enum_struct_field@@Base>
   15e40:	ldr	r3, [pc, #64]	; 15e88 <_start@@Base+0x10e4>
   15e44:	mov	r2, r4
   15e48:	mov	r1, r6
   15e4c:	mov	r0, r5
   15e50:	str	r6, [sp, #4]
   15e54:	str	r3, [sp, #8]
   15e58:	ldr	r3, [pc, #44]	; 15e8c <_start@@Base+0x10e8>
   15e5c:	str	r3, [sp]
   15e60:	mov	r3, #26
   15e64:	bl	2d06c <flatcc_json_printer_embedded_struct_field@@Base>
   15e68:	add	sp, sp, #16
   15e6c:	pop	{r4, r5, r6, pc}
   15e70:	andeq	lr, r2, r2, asr #10
   15e74:	andeq	r2, r3, pc, lsl #19
   15e78:	muleq	r2, r5, r3
   15e7c:	muleq	r2, r7, r3
   15e80:	ldrdeq	r5, [r1], -ip
   15e84:	muleq	r2, sp, r3
   15e88:	ldrdeq	r5, [r1], -r0
   15e8c:	andeq	lr, r2, r3, lsr #7
   15e90:	sub	r3, r2, r1
   15e94:	push	{r4, r5, r6, lr}
   15e98:	mov	r6, r0
   15e9c:	cmp	r3, #3
   15ea0:	mov	r4, r1
   15ea4:	mov	r5, r2
   15ea8:	ble	15ec4 <_start@@Base+0x1120>
   15eac:	mov	r2, #4
   15eb0:	ldr	r1, [pc, #44]	; 15ee4 <_start@@Base+0x1140>
   15eb4:	mov	r0, r4
   15eb8:	bl	14554 <memcmp@plt>
   15ebc:	cmp	r0, #0
   15ec0:	beq	15edc <_start@@Base+0x1138>
   15ec4:	mov	r2, r5
   15ec8:	mov	r1, r4
   15ecc:	mov	r0, r6
   15ed0:	mov	r3, #26
   15ed4:	pop	{r4, r5, r6, lr}
   15ed8:	b	24960 <flatcc_json_parser_set_error@@Base>
   15edc:	add	r0, r4, #4
   15ee0:	pop	{r4, r5, r6, pc}
   15ee4:	ldrdeq	r2, [r3], -lr
   15ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15eec:	mov	r4, r1
   15ef0:	sub	sp, sp, #20
   15ef4:	mov	r1, r2
   15ef8:	mov	r5, r0
   15efc:	mov	r0, r4
   15f00:	mov	sl, r3
   15f04:	add	r7, pc, #564	; 0x234
   15f08:	ldrd	r6, [r7]
   15f0c:	str	r2, [sp, #12]
   15f10:	ldr	fp, [sp, #56]	; 0x38
   15f14:	ldr	r3, [sp, #60]	; 0x3c
   15f18:	bl	14e98 <_start@@Base+0xf4>
   15f1c:	cmp	r1, r7
   15f20:	ldr	r2, [sp, #12]
   15f24:	cmpeq	r0, r6
   15f28:	bhi	1600c <_start@@Base+0x1268>
   15f2c:	add	r7, pc, #532	; 0x214
   15f30:	ldrd	r6, [r7]
   15f34:	and	r8, r0, #-16777216	; 0xff000000
   15f38:	mov	r9, r1
   15f3c:	cmp	r1, r7
   15f40:	cmpeq	r0, r6
   15f44:	bhi	15f88 <_start@@Base+0x11e4>
   15f48:	add	r1, pc, #512	; 0x200
   15f4c:	ldrd	r0, [r1]
   15f50:	cmp	r9, r1
   15f54:	cmpeq	r8, r0
   15f58:	bne	15f7c <_start@@Base+0x11d8>
   15f5c:	mov	r1, r4
   15f60:	mov	r0, r5
   15f64:	str	r3, [sp]
   15f68:	mov	r3, #5
   15f6c:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   15f70:	cmp	r4, r0
   15f74:	movne	r2, #9
   15f78:	bne	15fbc <_start@@Base+0x1218>
   15f7c:	mov	r0, r4
   15f80:	add	sp, sp, #20
   15f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f88:	add	r7, pc, #456	; 0x1c8
   15f8c:	ldrd	r6, [r7]
   15f90:	cmp	r1, r7
   15f94:	cmpeq	r8, r6
   15f98:	bne	15fd0 <_start@@Base+0x122c>
   15f9c:	mov	r1, r4
   15fa0:	mov	r0, r5
   15fa4:	str	r3, [sp]
   15fa8:	mov	r3, #5
   15fac:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   15fb0:	cmp	r4, r0
   15fb4:	movne	r2, #2
   15fb8:	beq	15f7c <_start@@Base+0x11d8>
   15fbc:	mov	r3, #0
   15fc0:	strd	r2, [fp]
   15fc4:	mov	r3, #0
   15fc8:	str	r3, [sl]
   15fcc:	b	16068 <_start@@Base+0x12c4>
   15fd0:	bic	r6, r0, #255	; 0xff
   15fd4:	add	r1, pc, #388	; 0x184
   15fd8:	ldrd	r0, [r1]
   15fdc:	cmp	r9, r1
   15fe0:	cmpeq	r6, r0
   15fe4:	bne	15f7c <_start@@Base+0x11d8>
   15fe8:	mov	r1, r4
   15fec:	mov	r0, r5
   15ff0:	str	r3, [sp]
   15ff4:	mov	r3, #7
   15ff8:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   15ffc:	cmp	r4, r0
   16000:	movne	r2, #10
   16004:	bne	15fbc <_start@@Base+0x1218>
   16008:	b	15f7c <_start@@Base+0x11d8>
   1600c:	add	r7, pc, #340	; 0x154
   16010:	ldrd	r6, [r7]
   16014:	cmp	r1, r7
   16018:	cmpeq	r0, r6
   1601c:	bhi	16070 <_start@@Base+0x12cc>
   16020:	mov	r7, r1
   16024:	add	r1, pc, #324	; 0x144
   16028:	ldrd	r0, [r1]
   1602c:	mov	r8, #0
   16030:	cmp	r7, r1
   16034:	cmpeq	r8, r0
   16038:	bne	15f7c <_start@@Base+0x11d8>
   1603c:	mov	r1, r4
   16040:	mov	r0, r5
   16044:	str	r3, [sp]
   16048:	mov	r3, #4
   1604c:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   16050:	cmp	r4, r0
   16054:	beq	15f7c <_start@@Base+0x11d8>
   16058:	mov	r2, #0
   1605c:	mov	r3, #0
   16060:	strd	r2, [fp]
   16064:	str	r8, [sl]
   16068:	mov	r4, r0
   1606c:	b	15f7c <_start@@Base+0x11d8>
   16070:	add	r7, pc, #256	; 0x100
   16074:	ldrd	r6, [r7]
   16078:	cmp	r1, r7
   1607c:	cmpeq	r0, r6
   16080:	bhi	160c4 <_start@@Base+0x1320>
   16084:	and	r6, r0, #-16777216	; 0xff000000
   16088:	mov	r7, r1
   1608c:	add	r1, pc, #236	; 0xec
   16090:	ldrd	r0, [r1]
   16094:	cmp	r7, r1
   16098:	cmpeq	r6, r0
   1609c:	bne	15f7c <_start@@Base+0x11d8>
   160a0:	mov	r1, r4
   160a4:	mov	r0, r5
   160a8:	str	r3, [sp]
   160ac:	mov	r3, #5
   160b0:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   160b4:	cmp	r4, r0
   160b8:	movne	r2, #11
   160bc:	bne	15fbc <_start@@Base+0x1218>
   160c0:	b	15f7c <_start@@Base+0x11d8>
   160c4:	add	r9, pc, #188	; 0xbc
   160c8:	ldrd	r8, [r9]
   160cc:	lsr	r6, r0, #16
   160d0:	lsl	r6, r6, #16
   160d4:	cmp	r1, r9
   160d8:	cmpeq	r6, r8
   160dc:	bne	16104 <_start@@Base+0x1360>
   160e0:	mov	r1, r4
   160e4:	mov	r0, r5
   160e8:	str	r3, [sp]
   160ec:	mov	r3, #6
   160f0:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   160f4:	cmp	r4, r0
   160f8:	movne	r2, #255	; 0xff
   160fc:	bne	15fbc <_start@@Base+0x1218>
   16100:	b	15f7c <_start@@Base+0x11d8>
   16104:	add	r7, pc, #132	; 0x84
   16108:	ldrd	r6, [r7]
   1610c:	cmp	r1, r7
   16110:	cmpeq	r0, r6
   16114:	bne	15f7c <_start@@Base+0x11d8>
   16118:	mov	r1, r4
   1611c:	mov	r0, r5
   16120:	str	r3, [sp]
   16124:	mov	r3, #8
   16128:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   1612c:	cmp	r4, r0
   16130:	beq	15f7c <_start@@Base+0x11d8>
   16134:	mov	r2, #8
   16138:	b	15fbc <_start@@Base+0x1218>
   1613c:	nop	{0}
   16140:			; <UNDEFINED> instruction: 0xffffffff
   16144:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16148:			; <UNDEFINED> instruction: 0x46616dff
   1614c:	rsbmi	r6, pc, #428	; 0x1ac
   16150:	strvs	r0, [r0, #-0]
   16154:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16158:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1615c:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16160:	strbtmi	r6, [r1], -r0, lsl #28
   16164:	rsbmi	r6, pc, #428	; 0x1ac
   16168:	ldrshvc	pc, [pc, #255]	; 1626f <_start@@Base+0x14cb>	; <UNPREDICTABLE>
   1616c:	svcmi	0x00746865
   16170:	andeq	r0, r0, r0
   16174:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16178:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   1617c:	rsbpl	r7, r1, #117	; 0x75
   16180:	andvc	r0, r0, #0
   16184:	svcmi	0x00746865
   16188:	strbvs	r0, [r4, #-0]!
   1618c:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   16190:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   16194:	rsbpl	r7, r1, #117	; 0x75
   16198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1619c:	mov	r5, r1
   161a0:	sub	sp, sp, #20
   161a4:	mov	r1, r2
   161a8:	mov	sl, r0
   161ac:	mov	r0, r5
   161b0:	mov	r6, r2
   161b4:	mov	r7, r3
   161b8:	bl	14e98 <_start@@Base+0xf4>
   161bc:	add	r3, pc, #532	; 0x214
   161c0:	ldrd	r2, [r3]
   161c4:	strd	r0, [sp, #8]
   161c8:	ldr	fp, [sp, #60]	; 0x3c
   161cc:	cmp	r1, r3
   161d0:	cmpeq	r0, r2
   161d4:	bhi	16244 <_start@@Base+0x14a0>
   161d8:	ldr	r1, [sp, #12]
   161dc:	mov	r8, #0
   161e0:	bic	r3, r1, #255	; 0xff
   161e4:	add	r1, pc, #500	; 0x1f4
   161e8:	ldrd	r0, [r1]
   161ec:	cmp	r3, r1
   161f0:	cmpeq	r8, r0
   161f4:	beq	16208 <_start@@Base+0x1464>
   161f8:	mov	r4, r5
   161fc:	mov	r0, r4
   16200:	add	sp, sp, #20
   16204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16208:	mov	r3, #3
   1620c:	mov	r2, r6
   16210:	str	fp, [sp]
   16214:	mov	r1, r5
   16218:	mov	r0, sl
   1621c:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   16220:	cmp	r5, r0
   16224:	mov	r4, r0
   16228:	beq	161fc <_start@@Base+0x1458>
   1622c:	ldr	r1, [sp, #56]	; 0x38
   16230:	mov	r2, #4
   16234:	mov	r3, #0
   16238:	strd	r2, [r1]
   1623c:	str	r8, [r7]
   16240:	b	161fc <_start@@Base+0x1458>
   16244:	add	r3, pc, #412	; 0x19c
   16248:	ldrd	r2, [r3]
   1624c:	ldrd	r0, [sp, #8]
   16250:	cmp	r1, r3
   16254:	cmpeq	r0, r2
   16258:	bne	162e0 <_start@@Base+0x153c>
   1625c:	mov	r2, r6
   16260:	mov	r3, #8
   16264:	str	fp, [sp]
   16268:	mov	r1, r5
   1626c:	mov	r0, sl
   16270:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   16274:	cmp	r5, r0
   16278:	mov	r4, r0
   1627c:	movne	r2, #3
   16280:	bne	1632c <_start@@Base+0x1588>
   16284:	add	r1, pc, #356	; 0x164
   16288:	ldrd	r0, [r1]
   1628c:	mov	r2, #0
   16290:	ldr	r3, [sp, #12]
   16294:	cmp	r3, r1
   16298:	cmpeq	r2, r0
   1629c:	bne	16344 <_start@@Base+0x15a0>
   162a0:	mov	r3, #4
   162a4:	mov	r2, r6
   162a8:	str	fp, [sp]
   162ac:	mov	r1, r4
   162b0:	mov	r0, sl
   162b4:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   162b8:	cmp	r4, r0
   162bc:	beq	161f8 <_start@@Base+0x1454>
   162c0:	ldr	r1, [sp, #56]	; 0x38
   162c4:	mov	r3, #0
   162c8:	mov	r2, #0
   162cc:	mov	r4, r0
   162d0:	strd	r2, [r1]
   162d4:	mov	r3, #0
   162d8:	str	r3, [r7]
   162dc:	b	161fc <_start@@Base+0x1458>
   162e0:	ldr	r1, [sp, #8]
   162e4:	ldr	r3, [sp, #12]
   162e8:	bic	r2, r1, #255	; 0xff
   162ec:	add	r1, pc, #260	; 0x104
   162f0:	ldrd	r0, [r1]
   162f4:	cmp	r3, r1
   162f8:	cmpeq	r2, r0
   162fc:	movne	r4, r5
   16300:	bne	16284 <_start@@Base+0x14e0>
   16304:	mov	r2, r6
   16308:	mov	r3, #7
   1630c:	str	fp, [sp]
   16310:	mov	r1, r5
   16314:	mov	r0, sl
   16318:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   1631c:	cmp	r5, r0
   16320:	mov	r4, r0
   16324:	movne	r2, #1
   16328:	beq	16284 <_start@@Base+0x14e0>
   1632c:	ldr	r1, [sp, #56]	; 0x38
   16330:	mov	r3, #0
   16334:	strd	r2, [r1]
   16338:	mov	r3, #0
   1633c:	str	r3, [r7]
   16340:	b	161fc <_start@@Base+0x1458>
   16344:	add	r3, pc, #180	; 0xb4
   16348:	ldrd	r2, [r3]
   1634c:	ldrd	r0, [sp, #8]
   16350:	cmp	r1, r3
   16354:	cmpeq	r0, r2
   16358:	bne	161f8 <_start@@Base+0x1454>
   1635c:	mov	r1, r6
   16360:	add	r0, r4, #8
   16364:	bl	14e98 <_start@@Base+0xf4>
   16368:	add	r3, pc, #152	; 0x98
   1636c:	ldrd	r2, [r3]
   16370:	cmp	r1, r3
   16374:	cmpeq	r0, r2
   16378:	bne	161f8 <_start@@Base+0x1454>
   1637c:	add	r8, r4, #16
   16380:	mov	r1, r6
   16384:	mov	r0, r8
   16388:	bl	14e98 <_start@@Base+0xf4>
   1638c:	bic	r2, r0, #255	; 0xff
   16390:	mov	r3, r1
   16394:	add	r1, pc, #116	; 0x74
   16398:	ldrd	r0, [r1]
   1639c:	cmp	r3, r1
   163a0:	cmpeq	r2, r0
   163a4:	bne	161f8 <_start@@Base+0x1454>
   163a8:	mov	r3, #7
   163ac:	mov	r2, r6
   163b0:	str	fp, [sp]
   163b4:	mov	r1, r8
   163b8:	mov	r0, sl
   163bc:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   163c0:	cmp	r8, r0
   163c4:	mov	r4, r0
   163c8:	beq	161f8 <_start@@Base+0x1454>
   163cc:	mov	r2, #2
   163d0:	b	1632c <_start@@Base+0x1588>
   163d4:	nop	{0}
   163d8:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   163dc:	stclmi	14, cr6, [pc, #-460]!	; 16218 <_start@@Base+0x1474>
   163e0:	andeq	r0, r0, r0
   163e4:	cmnmi	ip, r0, lsl #8
   163e8:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   163ec:	stclmi	14, cr6, [pc, #-460]!	; 16228 <_start@@Base+0x1484>
   163f0:	andeq	r0, r0, r0
   163f4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   163f8:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   163fc:	stclmi	14, cr6, [pc, #-460]!	; 16238 <_start@@Base+0x1494>
   16400:	cmnpl	r9, #112, 26	; 0x1c00
   16404:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16408:	rsbvs	r6, ip, #364904448	; 0x15c00000
   1640c:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16410:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   16414:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16418:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1641c:	mov	r4, r1
   16420:	mov	r5, r0
   16424:	mov	r1, r2
   16428:	mov	r0, r4
   1642c:	mov	sl, r2
   16430:	mov	fp, r3
   16434:	bl	14e98 <_start@@Base+0xf4>
   16438:	add	r3, pc, #280	; 0x118
   1643c:	ldrd	r2, [r3]
   16440:	mov	r6, #0
   16444:	cmp	r1, r3
   16448:	cmpeq	r0, r2
   1644c:	bhi	164a0 <_start@@Base+0x16fc>
   16450:	mov	r3, r1
   16454:	add	r1, pc, #260	; 0x104
   16458:	ldrd	r0, [r1]
   1645c:	cmp	r3, r1
   16460:	cmpeq	r6, r0
   16464:	bne	16494 <_start@@Base+0x16f0>
   16468:	ldr	r3, [sp, #52]	; 0x34
   1646c:	mov	r2, sl
   16470:	mov	r1, r4
   16474:	mov	r0, r5
   16478:	str	r3, [sp]
   1647c:	mov	r3, #4
   16480:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   16484:	cmp	r4, r0
   16488:	movne	r2, #3
   1648c:	movne	r3, #0
   16490:	bne	16548 <_start@@Base+0x17a4>
   16494:	mov	r0, r4
   16498:	add	sp, sp, #12
   1649c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164a0:	add	r9, pc, #192	; 0xc0
   164a4:	ldrd	r8, [r9]
   164a8:	lsr	r6, r0, #16
   164ac:	mov	r7, r1
   164b0:	lsl	r6, r6, #16
   164b4:	cmp	r1, r9
   164b8:	cmpeq	r6, r8
   164bc:	bne	16504 <_start@@Base+0x1760>
   164c0:	ldr	r3, [sp, #52]	; 0x34
   164c4:	mov	r2, sl
   164c8:	mov	r1, r4
   164cc:	mov	r0, r5
   164d0:	str	r3, [sp]
   164d4:	mov	r3, #6
   164d8:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   164dc:	cmp	r4, r0
   164e0:	beq	16494 <_start@@Base+0x16f0>
   164e4:	ldr	r1, [sp, #48]	; 0x30
   164e8:	mvn	r3, #0
   164ec:	mvn	r2, #1
   164f0:	strd	r2, [r1]
   164f4:	mov	r3, #1
   164f8:	str	r3, [fp]
   164fc:	mov	r4, r0
   16500:	b	16494 <_start@@Base+0x16f0>
   16504:	add	r1, pc, #100	; 0x64
   16508:	ldrd	r0, [r1]
   1650c:	mov	r6, #0
   16510:	cmp	r7, r1
   16514:	cmpeq	r6, r0
   16518:	bne	16494 <_start@@Base+0x16f0>
   1651c:	ldr	r3, [sp, #52]	; 0x34
   16520:	mov	r2, sl
   16524:	mov	r1, r4
   16528:	mov	r0, r5
   1652c:	str	r3, [sp]
   16530:	mov	r3, #4
   16534:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   16538:	cmp	r4, r0
   1653c:	beq	16494 <_start@@Base+0x16f0>
   16540:	add	r3, pc, #48	; 0x30
   16544:	ldrd	r2, [r3]
   16548:	ldr	r1, [sp, #48]	; 0x30
   1654c:	strd	r2, [r1]
   16550:	str	r6, [fp]
   16554:	b	164fc <_start@@Base+0x1758>
   16558:			; <UNDEFINED> instruction: 0xffffffff
   1655c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16560:	andeq	r0, r0, r0
   16564:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16568:	strbvs	r0, [r7, #-0]!
   1656c:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   16570:	andeq	r0, r0, r0
   16574:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16578:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   1657c:	andeq	r0, r0, r0
   16580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16584:	mov	r4, r1
   16588:	sub	sp, sp, #20
   1658c:	mov	r1, r2
   16590:	mov	r5, r0
   16594:	mov	r0, r4
   16598:	mov	sl, r3
   1659c:	add	r7, pc, #348	; 0x15c
   165a0:	ldrd	r6, [r7]
   165a4:	str	r2, [sp, #12]
   165a8:	ldr	fp, [sp, #56]	; 0x38
   165ac:	ldr	r3, [sp, #60]	; 0x3c
   165b0:	bl	14e98 <_start@@Base+0xf4>
   165b4:	cmp	r1, r7
   165b8:	ldr	r2, [sp, #12]
   165bc:	cmpeq	r0, r6
   165c0:	bhi	1660c <_start@@Base+0x1868>
   165c4:	mov	r7, r1
   165c8:	add	r1, pc, #312	; 0x138
   165cc:	ldrd	r0, [r1]
   165d0:	mov	r8, #0
   165d4:	cmp	r7, r1
   165d8:	cmpeq	r8, r0
   165dc:	bne	16600 <_start@@Base+0x185c>
   165e0:	mov	r1, r4
   165e4:	mov	r0, r5
   165e8:	str	r3, [sp]
   165ec:	mov	r3, #4
   165f0:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   165f4:	cmp	r4, r0
   165f8:	movne	r2, #2
   165fc:	bne	1665c <_start@@Base+0x18b8>
   16600:	mov	r0, r4
   16604:	add	sp, sp, #20
   16608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1660c:	add	r7, pc, #252	; 0xfc
   16610:	ldrd	r6, [r7]
   16614:	cmp	r1, r7
   16618:	cmpeq	r0, r6
   1661c:	bhi	16670 <_start@@Base+0x18cc>
   16620:	mov	r7, r1
   16624:	add	r1, pc, #236	; 0xec
   16628:	ldrd	r0, [r1]
   1662c:	mov	r8, #0
   16630:	cmp	r7, r1
   16634:	cmpeq	r8, r0
   16638:	bne	16600 <_start@@Base+0x185c>
   1663c:	mov	r1, r4
   16640:	mov	r0, r5
   16644:	str	r3, [sp]
   16648:	mov	r3, #4
   1664c:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   16650:	cmp	r4, r0
   16654:	beq	16600 <_start@@Base+0x185c>
   16658:	mov	r2, #42	; 0x2a
   1665c:	mov	r3, #0
   16660:	strd	r2, [fp]
   16664:	str	r8, [sl]
   16668:	mov	r4, r0
   1666c:	b	16600 <_start@@Base+0x185c>
   16670:	add	r9, pc, #168	; 0xa8
   16674:	ldrd	r8, [r9]
   16678:	bic	r6, r0, #255	; 0xff
   1667c:	mov	r7, r1
   16680:	cmp	r1, r9
   16684:	cmpeq	r6, r8
   16688:	bne	166c0 <_start@@Base+0x191c>
   1668c:	mov	r1, r4
   16690:	mov	r0, r5
   16694:	str	r3, [sp]
   16698:	mov	r3, #7
   1669c:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   166a0:	cmp	r4, r0
   166a4:	mvnne	r2, #0
   166a8:	beq	16600 <_start@@Base+0x185c>
   166ac:	mvn	r3, #0
   166b0:	strd	r2, [fp]
   166b4:	mov	r3, #1
   166b8:	str	r3, [sl]
   166bc:	b	16668 <_start@@Base+0x18c4>
   166c0:	lsr	r6, r0, #16
   166c4:	add	r1, pc, #92	; 0x5c
   166c8:	ldrd	r0, [r1]
   166cc:	lsl	r6, r6, #16
   166d0:	cmp	r7, r1
   166d4:	cmpeq	r6, r0
   166d8:	bne	16600 <_start@@Base+0x185c>
   166dc:	mov	r1, r4
   166e0:	mov	r0, r5
   166e4:	str	r3, [sp]
   166e8:	mov	r3, #6
   166ec:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   166f0:	cmp	r4, r0
   166f4:	beq	16600 <_start@@Base+0x185c>
   166f8:	mvn	r2, #1
   166fc:	b	166ac <_start@@Base+0x1908>
   16700:			; <UNDEFINED> instruction: 0xffffffff
   16704:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16708:	andeq	r0, r0, r0
   1670c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16710:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   16714:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16718:	andeq	r0, r0, r0
   1671c:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   16720:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   16724:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16728:	strbvs	r0, [r7, #-0]!
   1672c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16730:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16734:	mov	r4, r1
   16738:	mov	r5, r0
   1673c:	mov	r1, r2
   16740:	mov	r0, r4
   16744:	mov	sl, r2
   16748:	mov	fp, r3
   1674c:	add	r9, pc, #244	; 0xf4
   16750:	ldrd	r8, [r9]
   16754:	mov	r6, #0
   16758:	bl	14e98 <_start@@Base+0xf4>
   1675c:	cmp	r1, r9
   16760:	cmpeq	r0, r8
   16764:	bhi	167b0 <_start@@Base+0x1a0c>
   16768:	add	r3, pc, #224	; 0xe0
   1676c:	ldrd	r2, [r3]
   16770:	cmp	r1, r3
   16774:	cmpeq	r6, r2
   16778:	bne	167a4 <_start@@Base+0x1a00>
   1677c:	ldr	r3, [sp, #52]	; 0x34
   16780:	mov	r2, sl
   16784:	mov	r1, r4
   16788:	mov	r0, r5
   1678c:	str	r3, [sp]
   16790:	mov	r3, #4
   16794:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   16798:	cmp	r4, r0
   1679c:	mvnne	r2, #11
   167a0:	bne	167ec <_start@@Base+0x1a48>
   167a4:	mov	r0, r4
   167a8:	add	sp, sp, #12
   167ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167b0:	add	r3, pc, #160	; 0xa0
   167b4:	ldrd	r2, [r3]
   167b8:	cmp	r1, r3
   167bc:	cmpeq	r6, r2
   167c0:	bne	16808 <_start@@Base+0x1a64>
   167c4:	ldr	r3, [sp, #52]	; 0x34
   167c8:	mov	r2, sl
   167cc:	mov	r1, r4
   167d0:	mov	r0, r5
   167d4:	str	r3, [sp]
   167d8:	mov	r3, #4
   167dc:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   167e0:	cmp	r4, r0
   167e4:	mvnne	r2, #9
   167e8:	beq	167a4 <_start@@Base+0x1a00>
   167ec:	ldr	r1, [sp, #48]	; 0x30
   167f0:	mvn	r3, #0
   167f4:	mov	r4, r0
   167f8:	strd	r2, [r1]
   167fc:	mov	r3, #1
   16800:	str	r3, [fp]
   16804:	b	167a4 <_start@@Base+0x1a00>
   16808:	add	r3, pc, #80	; 0x50
   1680c:	ldrd	r2, [r3]
   16810:	cmp	r1, r3
   16814:	cmpeq	r6, r2
   16818:	bne	167a4 <_start@@Base+0x1a00>
   1681c:	ldr	r3, [sp, #52]	; 0x34
   16820:	mov	r2, sl
   16824:	mov	r1, r4
   16828:	mov	r0, r5
   1682c:	str	r3, [sp]
   16830:	mov	r3, #4
   16834:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   16838:	cmp	r4, r0
   1683c:	beq	167a4 <_start@@Base+0x1a00>
   16840:	mvn	r2, #10
   16844:	b	167ec <_start@@Base+0x1a48>
   16848:			; <UNDEFINED> instruction: 0xffffffff
   1684c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16850:	andeq	r0, r0, r0
   16854:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16858:	andeq	r0, r0, r0
   1685c:	mcrvs	7, 3, r6, cr5, cr3, {1}
   16860:	andeq	r0, r0, r0
   16864:	mcrvs	7, 3, r6, cr5, cr2, {1}
   16868:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1686c:	mov	r4, r1
   16870:	mov	r8, r0
   16874:	mov	r1, r2
   16878:	mov	r0, r4
   1687c:	mov	r9, r2
   16880:	mov	sl, r3
   16884:	bl	14e98 <_start@@Base+0xf4>
   16888:	add	r3, pc, #240	; 0xf0
   1688c:	ldrd	r2, [r3]
   16890:	mov	r5, #0
   16894:	ldr	fp, [sp, #52]	; 0x34
   16898:	cmp	r1, r3
   1689c:	cmpeq	r0, r2
   168a0:	bhi	168e8 <_start@@Base+0x1b44>
   168a4:	add	r3, pc, #220	; 0xdc
   168a8:	ldrd	r2, [r3]
   168ac:	cmp	r1, r3
   168b0:	cmpeq	r5, r2
   168b4:	bne	168dc <_start@@Base+0x1b38>
   168b8:	mov	r2, r9
   168bc:	mov	r3, #4
   168c0:	str	fp, [sp]
   168c4:	mov	r1, r4
   168c8:	mov	r0, r8
   168cc:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   168d0:	cmp	r4, r0
   168d4:	movne	r2, #8
   168d8:	bne	16924 <_start@@Base+0x1b80>
   168dc:	mov	r0, r4
   168e0:	add	sp, sp, #12
   168e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168e8:	add	r7, pc, #160	; 0xa0
   168ec:	ldrd	r6, [r7]
   168f0:	bic	r3, r1, #255	; 0xff
   168f4:	cmp	r3, r7
   168f8:	cmpeq	r5, r6
   168fc:	bne	1693c <_start@@Base+0x1b98>
   16900:	mov	r2, r9
   16904:	mov	r3, #3
   16908:	str	fp, [sp]
   1690c:	mov	r1, r4
   16910:	mov	r0, r8
   16914:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   16918:	cmp	r4, r0
   1691c:	movne	r2, #1
   16920:	beq	168dc <_start@@Base+0x1b38>
   16924:	ldr	r1, [sp, #48]	; 0x30
   16928:	mov	r3, #0
   1692c:	mov	r4, r0
   16930:	strd	r2, [r1]
   16934:	str	r5, [sl]
   16938:	b	168dc <_start@@Base+0x1b38>
   1693c:	add	r3, pc, #84	; 0x54
   16940:	ldrd	r2, [r3]
   16944:	and	r6, r0, #-16777216	; 0xff000000
   16948:	cmp	r1, r3
   1694c:	cmpeq	r6, r2
   16950:	bne	168dc <_start@@Base+0x1b38>
   16954:	mov	r3, #5
   16958:	mov	r2, r9
   1695c:	str	fp, [sp]
   16960:	mov	r1, r4
   16964:	mov	r0, r8
   16968:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   1696c:	cmp	r4, r0
   16970:	beq	168dc <_start@@Base+0x1b38>
   16974:	mov	r2, #2
   16978:	b	16924 <_start@@Base+0x1b80>
   1697c:	nop	{0}
   16980:	ldclvs	15, cr15, [pc, #1020]!	; 16d84 <_start@@Base+0x1fe0>
   16984:	ldrbmi	r6, [r2, -r5, ror #10]!
   16988:	andeq	r0, r0, r0
   1698c:	rsbmi	r7, ip, #423624704	; 0x19400000
   16990:	andeq	r0, r0, r0
   16994:	rsbpl	r6, r5, #0, 8
   16998:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1699c:	ldrbmi	r6, [r2, -r5, ror #10]!
   169a0:	sub	r3, r2, r1
   169a4:	cmp	r3, #1
   169a8:	ble	169cc <_start@@Base+0x1c28>
   169ac:	ldrb	r3, [r1]
   169b0:	cmp	r3, #32
   169b4:	bhi	169d0 <_start@@Base+0x1c2c>
   169b8:	bne	169cc <_start@@Base+0x1c28>
   169bc:	ldrb	r3, [r1, #1]
   169c0:	cmp	r3, #32
   169c4:	addhi	r1, r1, #1
   169c8:	bhi	169d0 <_start@@Base+0x1c2c>
   169cc:	b	24a94 <flatcc_json_parser_space_ext@@Base>
   169d0:	mov	r0, r1
   169d4:	bx	lr
   169d8:	push	{r4, r5, r6, lr}
   169dc:	mov	r4, r2
   169e0:	mov	r5, r3
   169e4:	mov	r6, r0
   169e8:	bl	169a0 <_start@@Base+0x1bfc>
   169ec:	cmp	r4, r0
   169f0:	moveq	r3, #0
   169f4:	beq	16a88 <_start@@Base+0x1ce4>
   169f8:	ldrb	r3, [r0]
   169fc:	cmp	r3, #44	; 0x2c
   16a00:	beq	16a38 <_start@@Base+0x1c94>
   16a04:	mov	r3, #0
   16a08:	str	r3, [r5]
   16a0c:	ldrb	r3, [r0]
   16a10:	cmp	r3, #93	; 0x5d
   16a14:	movne	r3, #9
   16a18:	movne	r2, r4
   16a1c:	movne	r1, r0
   16a20:	bne	16a64 <_start@@Base+0x1cc0>
   16a24:	mov	r2, r4
   16a28:	add	r1, r0, #1
   16a2c:	mov	r0, r6
   16a30:	pop	{r4, r5, r6, lr}
   16a34:	b	169a0 <_start@@Base+0x1bfc>
   16a38:	add	r1, r0, #1
   16a3c:	mov	r2, r4
   16a40:	mov	r0, r6
   16a44:	bl	169a0 <_start@@Base+0x1bfc>
   16a48:	cmp	r4, r0
   16a4c:	bne	16a70 <_start@@Base+0x1ccc>
   16a50:	mov	r3, #0
   16a54:	mov	r2, r4
   16a58:	mov	r1, r4
   16a5c:	str	r3, [r5]
   16a60:	mov	r3, #9
   16a64:	mov	r0, r6
   16a68:	pop	{r4, r5, r6, lr}
   16a6c:	b	24960 <flatcc_json_parser_set_error@@Base>
   16a70:	ldrb	r3, [r0]
   16a74:	cmp	r3, #93	; 0x5d
   16a78:	movne	r3, #1
   16a7c:	moveq	r3, #0
   16a80:	streq	r3, [r5]
   16a84:	beq	16a24 <_start@@Base+0x1c80>
   16a88:	str	r3, [r5]
   16a8c:	pop	{r4, r5, r6, pc}
   16a90:	push	{r4, r5, r6, lr}
   16a94:	mov	r4, r2
   16a98:	mov	r5, r3
   16a9c:	mov	r6, r0
   16aa0:	bl	169a0 <_start@@Base+0x1bfc>
   16aa4:	cmp	r4, r0
   16aa8:	moveq	r3, #0
   16aac:	beq	16b40 <_start@@Base+0x1d9c>
   16ab0:	ldrb	r3, [r0]
   16ab4:	cmp	r3, #44	; 0x2c
   16ab8:	beq	16af0 <_start@@Base+0x1d4c>
   16abc:	mov	r3, #0
   16ac0:	str	r3, [r5]
   16ac4:	ldrb	r3, [r0]
   16ac8:	cmp	r3, #125	; 0x7d
   16acc:	movne	r3, #10
   16ad0:	movne	r2, r4
   16ad4:	movne	r1, r0
   16ad8:	bne	16b1c <_start@@Base+0x1d78>
   16adc:	mov	r2, r4
   16ae0:	add	r1, r0, #1
   16ae4:	mov	r0, r6
   16ae8:	pop	{r4, r5, r6, lr}
   16aec:	b	169a0 <_start@@Base+0x1bfc>
   16af0:	add	r1, r0, #1
   16af4:	mov	r2, r4
   16af8:	mov	r0, r6
   16afc:	bl	169a0 <_start@@Base+0x1bfc>
   16b00:	cmp	r4, r0
   16b04:	bne	16b28 <_start@@Base+0x1d84>
   16b08:	mov	r3, #0
   16b0c:	mov	r2, r4
   16b10:	mov	r1, r4
   16b14:	str	r3, [r5]
   16b18:	mov	r3, #10
   16b1c:	mov	r0, r6
   16b20:	pop	{r4, r5, r6, lr}
   16b24:	b	24960 <flatcc_json_parser_set_error@@Base>
   16b28:	ldrb	r3, [r0]
   16b2c:	cmp	r3, #125	; 0x7d
   16b30:	movne	r3, #1
   16b34:	moveq	r3, #0
   16b38:	streq	r3, [r5]
   16b3c:	beq	16adc <_start@@Base+0x1d38>
   16b40:	str	r3, [r5]
   16b44:	pop	{r4, r5, r6, pc}
   16b48:	sub	r1, r1, r0
   16b4c:	cmp	r1, r2
   16b50:	bxle	lr
   16b54:	ldrb	r3, [r0, r2]
   16b58:	cmp	r3, #46	; 0x2e
   16b5c:	addeq	r2, r2, #1
   16b60:	addeq	r0, r0, r2
   16b64:	bx	lr
   16b68:	mov	r3, #8
   16b6c:	push	{r4, lr}
   16b70:	mov	r1, #0
   16b74:	mov	r2, r3
   16b78:	mov	r4, r0
   16b7c:	bl	232f0 <flatcc_verify_field@@Base>
   16b80:	cmp	r0, #0
   16b84:	popne	{r4, pc}
   16b88:	mov	r3, #4
   16b8c:	mov	r0, r4
   16b90:	pop	{r4, lr}
   16b94:	mov	r2, r3
   16b98:	mov	r1, #1
   16b9c:	b	232f0 <flatcc_verify_field@@Base>
   16ba0:	mov	r3, #1
   16ba4:	push	{r4, lr}
   16ba8:	mov	r1, #0
   16bac:	mov	r2, r3
   16bb0:	mov	r4, r0
   16bb4:	bl	232f0 <flatcc_verify_field@@Base>
   16bb8:	cmp	r0, #0
   16bbc:	popne	{r4, pc}
   16bc0:	mov	r3, #1
   16bc4:	mov	r0, r4
   16bc8:	mov	r2, r3
   16bcc:	mov	r1, r3
   16bd0:	bl	232f0 <flatcc_verify_field@@Base>
   16bd4:	cmp	r0, #0
   16bd8:	popne	{r4, pc}
   16bdc:	mov	r3, #1
   16be0:	mov	r1, #2
   16be4:	mov	r2, r3
   16be8:	mov	r0, r4
   16bec:	bl	232f0 <flatcc_verify_field@@Base>
   16bf0:	cmp	r0, #0
   16bf4:	popne	{r4, pc}
   16bf8:	mov	r3, #1
   16bfc:	mov	r0, r4
   16c00:	pop	{r4, lr}
   16c04:	mov	r2, r3
   16c08:	mov	r1, #3
   16c0c:	b	232f0 <flatcc_verify_field@@Base>
   16c10:	mov	r2, #0
   16c14:	push	{r4, lr}
   16c18:	mov	r4, r0
   16c1c:	mov	r1, r2
   16c20:	bl	23350 <flatcc_verify_string_field@@Base>
   16c24:	cmp	r0, #0
   16c28:	popne	{r4, pc}
   16c2c:	mov	r3, #8
   16c30:	mov	r1, #1
   16c34:	mov	r2, r3
   16c38:	mov	r0, r4
   16c3c:	bl	232f0 <flatcc_verify_field@@Base>
   16c40:	cmp	r0, #0
   16c44:	popne	{r4, pc}
   16c48:	mov	r3, #2
   16c4c:	mov	r0, r4
   16c50:	pop	{r4, lr}
   16c54:	mov	r2, r3
   16c58:	mov	r1, r3
   16c5c:	b	232f0 <flatcc_verify_field@@Base>
   16c60:	mov	r2, #0
   16c64:	push	{r4, lr}
   16c68:	mov	r4, r0
   16c6c:	mov	r1, r2
   16c70:	bl	23350 <flatcc_verify_string_field@@Base>
   16c74:	subs	r2, r0, #0
   16c78:	bne	16d48 <_start@@Base+0x1fa4>
   16c7c:	mov	r3, #4
   16c80:	mov	r1, #1
   16c84:	mov	r2, r3
   16c88:	mov	r0, r4
   16c8c:	bl	232f0 <flatcc_verify_field@@Base>
   16c90:	subs	r2, r0, #0
   16c94:	bne	16d48 <_start@@Base+0x1fa4>
   16c98:	mov	r1, #2
   16c9c:	mov	r0, r4
   16ca0:	bl	23350 <flatcc_verify_string_field@@Base>
   16ca4:	subs	r2, r0, #0
   16ca8:	bne	16d48 <_start@@Base+0x1fa4>
   16cac:	mov	r3, #8
   16cb0:	mov	r1, #3
   16cb4:	mov	r2, r3
   16cb8:	mov	r0, r4
   16cbc:	bl	232f0 <flatcc_verify_field@@Base>
   16cc0:	subs	r2, r0, #0
   16cc4:	bne	16d48 <_start@@Base+0x1fa4>
   16cc8:	mov	r1, #4
   16ccc:	mov	r0, r4
   16cd0:	bl	23350 <flatcc_verify_string_field@@Base>
   16cd4:	subs	r2, r0, #0
   16cd8:	bne	16d48 <_start@@Base+0x1fa4>
   16cdc:	mov	r3, #8
   16ce0:	mov	r1, #5
   16ce4:	mov	r2, r3
   16ce8:	mov	r0, r4
   16cec:	bl	232f0 <flatcc_verify_field@@Base>
   16cf0:	subs	r2, r0, #0
   16cf4:	bne	16d48 <_start@@Base+0x1fa4>
   16cf8:	mov	r3, #4
   16cfc:	mov	r1, #6
   16d00:	mov	r2, r3
   16d04:	mov	r0, r4
   16d08:	bl	232f0 <flatcc_verify_field@@Base>
   16d0c:	subs	r2, r0, #0
   16d10:	bne	16d48 <_start@@Base+0x1fa4>
   16d14:	mov	r3, #8
   16d18:	mov	r1, #7
   16d1c:	mov	r2, r3
   16d20:	mov	r0, r4
   16d24:	bl	232f0 <flatcc_verify_field@@Base>
   16d28:	subs	r2, r0, #0
   16d2c:	bne	16d48 <_start@@Base+0x1fa4>
   16d30:	mov	r3, #4
   16d34:	mov	r0, r4
   16d38:	pop	{r4, lr}
   16d3c:	mov	r2, r3
   16d40:	mov	r1, #8
   16d44:	b	232f0 <flatcc_verify_field@@Base>
   16d48:	mov	r0, r2
   16d4c:	pop	{r4, pc}
   16d50:	mov	r2, #0
   16d54:	push	{r4, lr}
   16d58:	mov	r4, r0
   16d5c:	mov	r1, r2
   16d60:	ldr	r3, [pc, #60]	; 16da4 <_start@@Base+0x2000>
   16d64:	bl	2348c <flatcc_verify_table_field@@Base>
   16d68:	subs	r2, r0, #0
   16d6c:	bne	16d9c <_start@@Base+0x1ff8>
   16d70:	ldr	r3, [pc, #48]	; 16da8 <_start@@Base+0x2004>
   16d74:	mov	r1, #1
   16d78:	mov	r0, r4
   16d7c:	bl	2348c <flatcc_verify_table_field@@Base>
   16d80:	subs	r2, r0, #0
   16d84:	bne	16d9c <_start@@Base+0x1ff8>
   16d88:	mov	r0, r4
   16d8c:	ldr	r3, [pc, #24]	; 16dac <_start@@Base+0x2008>
   16d90:	mov	r1, #2
   16d94:	pop	{r4, lr}
   16d98:	b	2348c <flatcc_verify_table_field@@Base>
   16d9c:	mov	r0, r2
   16da0:	pop	{r4, pc}
   16da4:	andeq	r6, r1, r0, ror #24
   16da8:	ldrdeq	lr, [r1], -r4
   16dac:	andeq	r6, r1, r8, ror #22
   16db0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   16db4:	mov	r2, #32
   16db8:	mov	r3, #16
   16dbc:	mov	r1, #0
   16dc0:	mov	r4, r0
   16dc4:	bl	232f0 <flatcc_verify_field@@Base>
   16dc8:	subs	r2, r0, #0
   16dcc:	bne	17180 <_start@@Base+0x23dc>
   16dd0:	mov	r3, #2
   16dd4:	mov	r0, r4
   16dd8:	mov	r2, r3
   16ddc:	mov	r1, r3
   16de0:	bl	232f0 <flatcc_verify_field@@Base>
   16de4:	subs	r2, r0, #0
   16de8:	bne	17180 <_start@@Base+0x23dc>
   16dec:	mov	r3, #2
   16df0:	mov	r1, #1
   16df4:	mov	r2, r3
   16df8:	mov	r0, r4
   16dfc:	bl	232f0 <flatcc_verify_field@@Base>
   16e00:	subs	r2, r0, #0
   16e04:	bne	17180 <_start@@Base+0x23dc>
   16e08:	mov	r2, #1
   16e0c:	mov	r1, #3
   16e10:	mov	r0, r4
   16e14:	bl	23350 <flatcc_verify_string_field@@Base>
   16e18:	subs	r2, r0, #0
   16e1c:	bne	17180 <_start@@Base+0x23dc>
   16e20:	mov	r3, #1
   16e24:	mov	r1, #6
   16e28:	mov	r2, r3
   16e2c:	mov	r0, r4
   16e30:	bl	232f0 <flatcc_verify_field@@Base>
   16e34:	subs	r2, r0, #0
   16e38:	bne	17180 <_start@@Base+0x23dc>
   16e3c:	mov	r5, #1
   16e40:	mvn	r6, #0
   16e44:	mov	r3, r5
   16e48:	mov	r1, #5
   16e4c:	mov	r0, r4
   16e50:	stm	sp, {r5, r6}
   16e54:	bl	23388 <flatcc_verify_vector_field@@Base>
   16e58:	subs	r2, r0, #0
   16e5c:	bne	17180 <_start@@Base+0x23dc>
   16e60:	ldr	r3, [pc, #804]	; 1718c <_start@@Base+0x23e8>
   16e64:	mov	r1, #11
   16e68:	mov	r0, r4
   16e6c:	bl	234d4 <flatcc_verify_table_vector_field@@Base>
   16e70:	subs	r2, r0, #0
   16e74:	bne	17180 <_start@@Base+0x23dc>
   16e78:	mov	r1, #10
   16e7c:	mov	r0, r4
   16e80:	bl	233dc <flatcc_verify_string_vector_field@@Base>
   16e84:	subs	r2, r0, #0
   16e88:	bne	17180 <_start@@Base+0x23dc>
   16e8c:	mov	r1, #28
   16e90:	mov	r0, r4
   16e94:	bl	233dc <flatcc_verify_string_vector_field@@Base>
   16e98:	subs	r2, r0, #0
   16e9c:	bne	17180 <_start@@Base+0x23dc>
   16ea0:	mov	r3, r5
   16ea4:	mov	r1, #24
   16ea8:	stm	sp, {r5, r6}
   16eac:	mov	r0, r4
   16eb0:	bl	23388 <flatcc_verify_vector_field@@Base>
   16eb4:	subs	r2, r0, #0
   16eb8:	bne	17180 <_start@@Base+0x23dc>
   16ebc:	mvn	r3, #-536870912	; 0xe0000000
   16ec0:	mov	r5, #4
   16ec4:	mov	r2, #0
   16ec8:	mov	r1, #29
   16ecc:	mov	r0, r4
   16ed0:	str	r5, [sp]
   16ed4:	str	r3, [sp, #4]
   16ed8:	mov	r3, #8
   16edc:	bl	23388 <flatcc_verify_vector_field@@Base>
   16ee0:	subs	r2, r0, #0
   16ee4:	bne	17180 <_start@@Base+0x23dc>
   16ee8:	ldr	r6, [pc, #668]	; 1718c <_start@@Base+0x23e8>
   16eec:	mov	r1, #12
   16ef0:	mov	r0, r4
   16ef4:	mov	r3, r6
   16ef8:	bl	2348c <flatcc_verify_table_field@@Base>
   16efc:	subs	r2, r0, #0
   16f00:	bne	17180 <_start@@Base+0x23dc>
   16f04:	ldr	r3, [pc, #644]	; 17190 <_start@@Base+0x23ec>
   16f08:	mov	r1, #8
   16f0c:	mov	r0, r4
   16f10:	bl	23970 <flatcc_verify_union_field@@Base>
   16f14:	subs	r2, r0, #0
   16f18:	bne	17180 <_start@@Base+0x23dc>
   16f1c:	mvn	r8, #-1073741824	; 0xc0000000
   16f20:	mov	r7, #2
   16f24:	mov	r3, r5
   16f28:	mov	r1, #9
   16f2c:	mov	r0, r4
   16f30:	stm	sp, {r7, r8}
   16f34:	bl	23388 <flatcc_verify_vector_field@@Base>
   16f38:	subs	r2, r0, #0
   16f3c:	bne	17180 <_start@@Base+0x23dc>
   16f40:	mov	r3, r5
   16f44:	mov	r1, #31
   16f48:	stm	sp, {r7, r8}
   16f4c:	mov	r0, r4
   16f50:	bl	23388 <flatcc_verify_vector_field@@Base>
   16f54:	subs	r2, r0, #0
   16f58:	bne	17180 <_start@@Base+0x23dc>
   16f5c:	str	r6, [sp, #4]
   16f60:	mov	r6, #1
   16f64:	mov	r3, r2
   16f68:	mov	r1, #13
   16f6c:	mov	r0, r4
   16f70:	str	r6, [sp]
   16f74:	bl	23894 <flatcc_verify_table_as_nested_root@@Base>
   16f78:	subs	r2, r0, #0
   16f7c:	bne	17180 <_start@@Base+0x23dc>
   16f80:	ldr	r3, [pc, #524]	; 17194 <_start@@Base+0x23f0>
   16f84:	mov	r1, #14
   16f88:	mov	r0, r4
   16f8c:	bl	2348c <flatcc_verify_table_field@@Base>
   16f90:	subs	r2, r0, #0
   16f94:	bne	17180 <_start@@Base+0x23dc>
   16f98:	mov	r2, r6
   16f9c:	mov	r3, r6
   16fa0:	mov	r1, #15
   16fa4:	mov	r0, r4
   16fa8:	bl	232f0 <flatcc_verify_field@@Base>
   16fac:	subs	r2, r0, #0
   16fb0:	bne	17180 <_start@@Base+0x23dc>
   16fb4:	mov	r2, r5
   16fb8:	mov	r3, r5
   16fbc:	mov	r1, #16
   16fc0:	mov	r0, r4
   16fc4:	bl	232f0 <flatcc_verify_field@@Base>
   16fc8:	subs	r2, r0, #0
   16fcc:	bne	17180 <_start@@Base+0x23dc>
   16fd0:	mov	r2, r5
   16fd4:	mov	r3, r5
   16fd8:	mov	r1, #17
   16fdc:	mov	r0, r4
   16fe0:	bl	232f0 <flatcc_verify_field@@Base>
   16fe4:	subs	r2, r0, #0
   16fe8:	bne	17180 <_start@@Base+0x23dc>
   16fec:	mov	r3, #8
   16ff0:	mov	r1, #18
   16ff4:	mov	r2, r3
   16ff8:	mov	r0, r4
   16ffc:	bl	232f0 <flatcc_verify_field@@Base>
   17000:	subs	r2, r0, #0
   17004:	bne	17180 <_start@@Base+0x23dc>
   17008:	mov	r3, #8
   1700c:	mov	r1, #19
   17010:	mov	r2, r3
   17014:	mov	r0, r4
   17018:	bl	232f0 <flatcc_verify_field@@Base>
   1701c:	subs	r2, r0, #0
   17020:	bne	17180 <_start@@Base+0x23dc>
   17024:	mov	r2, r5
   17028:	mov	r3, r5
   1702c:	mov	r1, #20
   17030:	mov	r0, r4
   17034:	bl	232f0 <flatcc_verify_field@@Base>
   17038:	subs	r2, r0, #0
   1703c:	bne	17180 <_start@@Base+0x23dc>
   17040:	mov	r2, r5
   17044:	mov	r3, r5
   17048:	mov	r1, #21
   1704c:	mov	r0, r4
   17050:	bl	232f0 <flatcc_verify_field@@Base>
   17054:	subs	r2, r0, #0
   17058:	bne	17180 <_start@@Base+0x23dc>
   1705c:	mov	r3, #8
   17060:	mov	r1, #22
   17064:	mov	r2, r3
   17068:	mov	r0, r4
   1706c:	bl	232f0 <flatcc_verify_field@@Base>
   17070:	subs	r2, r0, #0
   17074:	bne	17180 <_start@@Base+0x23dc>
   17078:	mov	r3, #8
   1707c:	mov	r1, #23
   17080:	mov	r2, r3
   17084:	mov	r0, r4
   17088:	bl	232f0 <flatcc_verify_field@@Base>
   1708c:	subs	r2, r0, #0
   17090:	bne	17180 <_start@@Base+0x23dc>
   17094:	mov	r2, r5
   17098:	mov	r3, r5
   1709c:	mov	r1, #25
   170a0:	mov	r0, r4
   170a4:	bl	232f0 <flatcc_verify_field@@Base>
   170a8:	subs	r2, r0, #0
   170ac:	bne	17180 <_start@@Base+0x23dc>
   170b0:	mov	r2, r5
   170b4:	mov	r3, r5
   170b8:	mov	r1, #26
   170bc:	mov	r0, r4
   170c0:	bl	232f0 <flatcc_verify_field@@Base>
   170c4:	subs	r2, r0, #0
   170c8:	bne	17180 <_start@@Base+0x23dc>
   170cc:	mov	r2, r5
   170d0:	mov	r3, r5
   170d4:	mov	r1, #27
   170d8:	mov	r0, r4
   170dc:	bl	232f0 <flatcc_verify_field@@Base>
   170e0:	subs	r2, r0, #0
   170e4:	bne	17180 <_start@@Base+0x23dc>
   170e8:	mvn	r3, #0
   170ec:	mov	r1, #30
   170f0:	str	r6, [sp]
   170f4:	mov	r0, r4
   170f8:	str	r3, [sp, #4]
   170fc:	mov	r3, r6
   17100:	bl	23388 <flatcc_verify_vector_field@@Base>
   17104:	subs	r2, r0, #0
   17108:	bne	17180 <_start@@Base+0x23dc>
   1710c:	mov	r5, #8
   17110:	mvn	r6, #-536870912	; 0xe0000000
   17114:	mov	r2, #0
   17118:	mov	r3, r5
   1711c:	mov	r1, #32
   17120:	mov	r0, r4
   17124:	stm	sp, {r5, r6}
   17128:	bl	23388 <flatcc_verify_vector_field@@Base>
   1712c:	subs	r2, r0, #0
   17130:	bne	17180 <_start@@Base+0x23dc>
   17134:	mov	r3, r5
   17138:	mov	r1, #33	; 0x21
   1713c:	stm	sp, {r5, r6}
   17140:	mov	r0, r4
   17144:	bl	23388 <flatcc_verify_vector_field@@Base>
   17148:	subs	r2, r0, #0
   1714c:	bne	17180 <_start@@Base+0x23dc>
   17150:	ldr	r3, [pc, #64]	; 17198 <_start@@Base+0x23f4>
   17154:	mov	r1, #34	; 0x22
   17158:	mov	r0, r4
   1715c:	bl	2348c <flatcc_verify_table_field@@Base>
   17160:	subs	r2, r0, #0
   17164:	bne	17180 <_start@@Base+0x23dc>
   17168:	ldr	r3, [pc, #44]	; 1719c <_start@@Base+0x23f8>
   1716c:	mov	r1, #35	; 0x23
   17170:	mov	r0, r4
   17174:	add	sp, sp, #8
   17178:	pop	{r4, r5, r6, r7, r8, lr}
   1717c:	b	2348c <flatcc_verify_table_field@@Base>
   17180:	mov	r0, r2
   17184:	add	sp, sp, #8
   17188:	pop	{r4, r5, r6, r7, r8, pc}
   1718c:			; <UNDEFINED> instruction: 0x00016db0
   17190:	andeq	r7, r1, r8, lsl r2
   17194:	andeq	r6, r1, r0, lsl ip
   17198:	ldrdeq	r4, [r1], -r0
   1719c:	andeq	r7, r1, r0, lsr #3
   171a0:	push	{r0, r1, r4, r5, r6, lr}
   171a4:	mov	r4, #1
   171a8:	mvn	r6, #0
   171ac:	mov	r2, #0
   171b0:	mov	r3, r4
   171b4:	mov	r1, r2
   171b8:	mov	r5, r0
   171bc:	stm	sp, {r4, r6}
   171c0:	bl	23388 <flatcc_verify_vector_field@@Base>
   171c4:	cmp	r0, #0
   171c8:	bne	1720c <_start@@Base+0x2468>
   171cc:	mov	r2, r0
   171d0:	mov	r3, r4
   171d4:	stm	sp, {r4, r6}
   171d8:	mov	r1, r4
   171dc:	mov	r0, r5
   171e0:	bl	23388 <flatcc_verify_vector_field@@Base>
   171e4:	cmp	r0, #0
   171e8:	bne	1720c <_start@@Base+0x2468>
   171ec:	ldr	r3, [pc, #32]	; 17214 <_start@@Base+0x2470>
   171f0:	mov	r2, r0
   171f4:	mov	r1, #2
   171f8:	str	r4, [sp]
   171fc:	str	r3, [sp, #4]
   17200:	mov	r3, r0
   17204:	mov	r0, r5
   17208:	bl	23894 <flatcc_verify_table_as_nested_root@@Base>
   1720c:	add	sp, sp, #8
   17210:	pop	{r4, r5, r6, pc}
   17214:			; <UNDEFINED> instruction: 0x00016db0
   17218:	ldrb	r3, [r0, #12]
   1721c:	sub	r3, r3, #1
   17220:	cmp	r3, #3
   17224:	ldrls	pc, [pc, r3, lsl #2]
   17228:	b	1725c <_start@@Base+0x24b8>
   1722c:	andeq	r7, r1, ip, lsr r2
   17230:	andeq	r7, r1, r4, asr #4
   17234:	andeq	r7, r1, ip, asr #4
   17238:	andeq	r7, r1, r4, asr r2
   1723c:	ldr	r1, [pc, #32]	; 17264 <_start@@Base+0x24c0>
   17240:	b	235c8 <flatcc_verify_union_table@@Base>
   17244:	ldr	r1, [pc, #28]	; 17268 <_start@@Base+0x24c4>
   17248:	b	17240 <_start@@Base+0x249c>
   1724c:	ldr	r1, [pc, #24]	; 1726c <_start@@Base+0x24c8>
   17250:	b	17240 <_start@@Base+0x249c>
   17254:	ldr	r1, [pc, #20]	; 17270 <_start@@Base+0x24cc>
   17258:	b	17240 <_start@@Base+0x249c>
   1725c:	mov	r0, #0
   17260:	bx	lr
   17264:			; <UNDEFINED> instruction: 0x00016db0
   17268:	andeq	r6, r1, r0, lsr #23
   1726c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17270:	andeq	r7, r1, r4, ror r2
   17274:	mov	r2, #0
   17278:	push	{r4, lr}
   1727c:	mov	r4, r0
   17280:	mov	r1, r2
   17284:	ldr	r3, [pc, #60]	; 172c8 <_start@@Base+0x2524>
   17288:	bl	2348c <flatcc_verify_table_field@@Base>
   1728c:	subs	r2, r0, #0
   17290:	bne	172c0 <_start@@Base+0x251c>
   17294:	ldr	r3, [pc, #48]	; 172cc <_start@@Base+0x2528>
   17298:	mov	r1, #1
   1729c:	mov	r0, r4
   172a0:	bl	2348c <flatcc_verify_table_field@@Base>
   172a4:	subs	r2, r0, #0
   172a8:	bne	172c0 <_start@@Base+0x251c>
   172ac:	mov	r0, r4
   172b0:	ldr	r3, [pc, #24]	; 172d0 <_start@@Base+0x252c>
   172b4:	mov	r1, #3
   172b8:	pop	{r4, lr}
   172bc:	b	23a7c <flatcc_verify_union_vector_field@@Base>
   172c0:	mov	r0, r2
   172c4:	pop	{r4, pc}
   172c8:	andeq	r6, r1, r0, asr sp
   172cc:	ldrdeq	r7, [r1], -r4
   172d0:	andeq	r7, r1, r8, lsl r2
   172d4:	push	{r4, lr}
   172d8:	mov	r2, #0
   172dc:	mov	r1, #1
   172e0:	mov	r4, r0
   172e4:	ldr	r3, [pc, #108]	; 17358 <_start@@Base+0x25b4>
   172e8:	bl	23970 <flatcc_verify_union_field@@Base>
   172ec:	subs	r2, r0, #0
   172f0:	bne	17350 <_start@@Base+0x25ac>
   172f4:	ldr	r3, [pc, #92]	; 17358 <_start@@Base+0x25b4>
   172f8:	mov	r1, #3
   172fc:	mov	r0, r4
   17300:	bl	23970 <flatcc_verify_union_field@@Base>
   17304:	subs	r2, r0, #0
   17308:	bne	17350 <_start@@Base+0x25ac>
   1730c:	ldr	r3, [pc, #68]	; 17358 <_start@@Base+0x25b4>
   17310:	mov	r1, #5
   17314:	mov	r0, r4
   17318:	bl	23970 <flatcc_verify_union_field@@Base>
   1731c:	subs	r2, r0, #0
   17320:	bne	17350 <_start@@Base+0x25ac>
   17324:	ldr	r3, [pc, #44]	; 17358 <_start@@Base+0x25b4>
   17328:	mov	r1, #7
   1732c:	mov	r0, r4
   17330:	bl	23970 <flatcc_verify_union_field@@Base>
   17334:	subs	r2, r0, #0
   17338:	bne	17350 <_start@@Base+0x25ac>
   1733c:	mov	r0, r4
   17340:	ldr	r3, [pc, #16]	; 17358 <_start@@Base+0x25b4>
   17344:	mov	r1, #9
   17348:	pop	{r4, lr}
   1734c:	b	23a7c <flatcc_verify_union_vector_field@@Base>
   17350:	mov	r0, r2
   17354:	pop	{r4, pc}
   17358:	andeq	r7, r1, ip, asr r3
   1735c:	ldrb	r3, [r0, #12]
   17360:	mov	r2, r0
   17364:	cmp	r3, #10
   17368:	bhi	17390 <_start@@Base+0x25ec>
   1736c:	cmp	r3, #9
   17370:	bcs	173b0 <_start@@Base+0x260c>
   17374:	cmp	r3, #2
   17378:	beq	173a8 <_start@@Base+0x2604>
   1737c:	cmp	r3, #8
   17380:	moveq	r2, #2
   17384:	beq	173b4 <_start@@Base+0x2610>
   17388:	mov	r0, #0
   1738c:	bx	lr
   17390:	cmp	r3, #11
   17394:	beq	173a0 <_start@@Base+0x25fc>
   17398:	cmp	r3, #255	; 0xff
   1739c:	bne	17388 <_start@@Base+0x25e4>
   173a0:	mov	r0, r2
   173a4:	b	23614 <flatcc_verify_union_string@@Base>
   173a8:	ldr	r1, [pc, #12]	; 173bc <_start@@Base+0x2618>
   173ac:	b	235c8 <flatcc_verify_union_table@@Base>
   173b0:	mov	r2, #4
   173b4:	mov	r1, r2
   173b8:	b	235f0 <flatcc_verify_union_struct@@Base>
   173bc:	ldrdeq	r4, [r1], -r8
   173c0:	sub	r1, r1, #1
   173c4:	cmp	r1, #3
   173c8:	ldrls	pc, [pc, r1, lsl #2]
   173cc:	b	17410 <_start@@Base+0x266c>
   173d0:	andeq	r7, r1, r0, ror #7
   173d4:	andeq	r7, r1, ip, ror #7
   173d8:	strdeq	r7, [r1], -r8
   173dc:	andeq	r7, r1, r4, lsl #8
   173e0:	ldr	r1, [pc, #52]	; 1741c <_start@@Base+0x2678>
   173e4:	mov	r2, #7
   173e8:	b	28b88 <flatcc_json_printer_enum@@Base>
   173ec:	mov	r2, #23
   173f0:	ldr	r1, [pc, #40]	; 17420 <_start@@Base+0x267c>
   173f4:	b	173e8 <_start@@Base+0x2644>
   173f8:	mov	r2, #8
   173fc:	ldr	r1, [pc, #32]	; 17424 <_start@@Base+0x2680>
   17400:	b	173e8 <_start@@Base+0x2644>
   17404:	mov	r2, #3
   17408:	ldr	r1, [pc, #24]	; 17428 <_start@@Base+0x2684>
   1740c:	b	173e8 <_start@@Base+0x2644>
   17410:	mov	r2, #4
   17414:	ldr	r1, [pc, #16]	; 1742c <_start@@Base+0x2688>
   17418:	b	173e8 <_start@@Base+0x2644>
   1741c:	andeq	lr, r2, r9, lsr #7
   17420:			; <UNDEFINED> instruction: 0x0002e3b1
   17424:	andeq	lr, r2, r9, asr #7
   17428:	ldrdeq	lr, [r2], -r2
   1742c:	andeq	r1, r3, r5, ror #26
   17430:	push	{r4, r5, r6, r7, r8, lr}
   17434:	mov	r4, #0
   17438:	sub	sp, sp, #24
   1743c:	mov	r5, #0
   17440:	mov	lr, #0
   17444:	cmp	r1, r2
   17448:	moveq	r0, r1
   1744c:	strd	r4, [r3]
   17450:	str	lr, [sp, #12]
   17454:	strd	r4, [sp, #16]
   17458:	beq	174d4 <_start@@Base+0x2730>
   1745c:	mov	r6, r3
   17460:	add	r3, sp, #16
   17464:	mov	r4, r1
   17468:	mov	r8, r0
   1746c:	str	r3, [sp]
   17470:	add	r3, sp, #12
   17474:	mov	r7, r2
   17478:	bl	25518 <flatcc_json_parser_integer@@Base>
   1747c:	cmp	r4, r0
   17480:	beq	174d4 <_start@@Base+0x2730>
   17484:	ldr	r3, [sp, #12]
   17488:	ldrd	r4, [sp, #16]
   1748c:	cmp	r3, #0
   17490:	beq	174b4 <_start@@Base+0x2710>
   17494:	cmp	r5, #-2147483648	; 0x80000000
   17498:	cmpeq	r4, #0
   1749c:	movhi	r3, #8
   174a0:	bhi	174c4 <_start@@Base+0x2720>
   174a4:	rsbs	r4, r4, #0
   174a8:	rsc	r5, r5, #0
   174ac:	strd	r4, [r6]
   174b0:	b	174d4 <_start@@Base+0x2730>
   174b4:	cmp	r4, #0
   174b8:	sbcs	r3, r5, #0
   174bc:	bge	174ac <_start@@Base+0x2708>
   174c0:	mov	r3, #7
   174c4:	mov	r1, r0
   174c8:	mov	r2, r7
   174cc:	mov	r0, r8
   174d0:	bl	24960 <flatcc_json_parser_set_error@@Base>
   174d4:	add	sp, sp, #24
   174d8:	pop	{r4, r5, r6, r7, r8, pc}
   174dc:	cmp	r1, r2
   174e0:	mov	r3, r2
   174e4:	beq	17500 <_start@@Base+0x275c>
   174e8:	ldrb	r3, [r1]
   174ec:	cmp	r3, #34	; 0x22
   174f0:	addeq	r3, r1, #1
   174f4:	beq	17500 <_start@@Base+0x275c>
   174f8:	mov	r3, #5
   174fc:	b	24960 <flatcc_json_parser_set_error@@Base>
   17500:	mov	r0, r3
   17504:	bx	lr
   17508:	push	{r4, r5, r6, lr}
   1750c:	mov	r4, r0
   17510:	mov	r5, r2
   17514:	bl	174dc <_start@@Base+0x2738>
   17518:	mov	r1, r0
   1751c:	mov	r2, r5
   17520:	mov	r0, r4
   17524:	pop	{r4, r5, r6, lr}
   17528:	b	169a0 <_start@@Base+0x1bfc>
   1752c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17530:	sub	sp, sp, #28
   17534:	mov	r6, #0
   17538:	mov	r5, r2
   1753c:	mov	r7, r0
   17540:	mov	sl, r3
   17544:	ldr	fp, [sp, #64]	; 0x40
   17548:	strb	r6, [fp]
   1754c:	bl	17508 <_start@@Base+0x2764>
   17550:	mov	r4, r0
   17554:	cmp	r5, r0
   17558:	beq	17620 <_start@@Base+0x287c>
   1755c:	mov	r8, sl
   17560:	mov	r9, r4
   17564:	add	r3, sp, #12
   17568:	mov	r1, r4
   1756c:	mov	r2, r5
   17570:	mov	r0, r7
   17574:	str	r3, [sp, #4]
   17578:	add	r3, sp, #16
   1757c:	str	r3, [sp]
   17580:	add	r3, sp, #8
   17584:	ldr	ip, [r8]
   17588:	blx	ip
   1758c:	cmp	r5, r0
   17590:	mov	r4, r0
   17594:	beq	17620 <_start@@Base+0x287c>
   17598:	cmp	r9, r0
   1759c:	bne	175f4 <_start@@Base+0x2850>
   175a0:	ldr	r3, [r8, #4]!
   175a4:	mov	r9, r0
   175a8:	cmp	r3, #0
   175ac:	bne	17564 <_start@@Base+0x27c0>
   175b0:	mov	r1, r0
   175b4:	mov	r3, #23
   175b8:	mov	r2, r5
   175bc:	mov	r0, r7
   175c0:	bl	24960 <flatcc_json_parser_set_error@@Base>
   175c4:	mov	r4, r0
   175c8:	b	17620 <_start@@Base+0x287c>
   175cc:	ldrd	r2, [sp, #16]
   175d0:	orrs	r3, r2, r3
   175d4:	movne	r6, #1
   175d8:	moveq	r6, #0
   175dc:	ldrb	r3, [fp]
   175e0:	add	r3, r6, r3
   175e4:	strb	r3, [fp]
   175e8:	ldr	r3, [sp, #12]
   175ec:	cmp	r3, #0
   175f0:	b	17558 <_start@@Base+0x27b4>
   175f4:	ldr	r3, [sp, #8]
   175f8:	cmp	r3, #0
   175fc:	beq	175cc <_start@@Base+0x2828>
   17600:	mov	r3, #8
   17604:	mov	r2, r5
   17608:	mov	r1, r4
   1760c:	mov	r0, r7
   17610:	bl	24960 <flatcc_json_parser_set_error@@Base>
   17614:	cmp	r5, r0
   17618:	bne	175dc <_start@@Base+0x2838>
   1761c:	mov	r4, r5
   17620:	mov	r0, r4
   17624:	add	sp, sp, #28
   17628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1762c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17630:	sub	sp, sp, #28
   17634:	mov	sl, r3
   17638:	mov	r3, #0
   1763c:	mov	r5, r2
   17640:	mov	r8, r0
   17644:	ldr	r6, [sp, #64]	; 0x40
   17648:	str	r3, [r6]
   1764c:	bl	17508 <_start@@Base+0x2764>
   17650:	cmp	r5, r0
   17654:	mov	r4, r0
   17658:	beq	176f8 <_start@@Base+0x2954>
   1765c:	add	fp, sp, #12
   17660:	mov	r7, sl
   17664:	mov	r9, r4
   17668:	add	r3, sp, #16
   1766c:	mov	r1, r4
   17670:	mov	r2, r5
   17674:	mov	r0, r8
   17678:	stm	sp, {r3, fp}
   1767c:	add	r3, sp, #8
   17680:	ldr	ip, [r7]
   17684:	blx	ip
   17688:	cmp	r5, r0
   1768c:	mov	r4, r0
   17690:	beq	176f8 <_start@@Base+0x2954>
   17694:	cmp	r9, r0
   17698:	bne	176c8 <_start@@Base+0x2924>
   1769c:	ldr	r3, [r7, #4]!
   176a0:	mov	r9, r0
   176a4:	cmp	r3, #0
   176a8:	bne	17668 <_start@@Base+0x28c4>
   176ac:	mov	r1, r0
   176b0:	mov	r3, #23
   176b4:	mov	r2, r5
   176b8:	mov	r0, r8
   176bc:	bl	24960 <flatcc_json_parser_set_error@@Base>
   176c0:	mov	r4, r0
   176c4:	b	176f8 <_start@@Base+0x2954>
   176c8:	ldrd	r0, [sp, #16]
   176cc:	bl	2dcdc <flatcc_json_printer_clear@@Base+0x5bc>
   176d0:	vmov	s15, r0
   176d4:	ldr	r3, [sp, #8]
   176d8:	vldr	s14, [r6]
   176dc:	cmp	r3, #0
   176e0:	ldr	r3, [sp, #12]
   176e4:	vnegne.f32	s15, s15
   176e8:	cmp	r3, #0
   176ec:	vadd.f32	s15, s14, s15
   176f0:	vstr	s15, [r6]
   176f4:	bne	17660 <_start@@Base+0x28bc>
   176f8:	mov	r0, r4
   176fc:	add	sp, sp, #28
   17700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17708:	sub	sp, sp, #28
   1770c:	mov	r5, r2
   17710:	mov	r8, r0
   17714:	mov	sl, r3
   17718:	vldr	d7, [pc, #192]	; 177e0 <_start@@Base+0x2a3c>
   1771c:	ldr	r6, [sp, #64]	; 0x40
   17720:	vstr	d7, [r6]
   17724:	bl	17508 <_start@@Base+0x2764>
   17728:	cmp	r5, r0
   1772c:	mov	r4, r0
   17730:	beq	177d0 <_start@@Base+0x2a2c>
   17734:	add	fp, sp, #12
   17738:	mov	r7, sl
   1773c:	mov	r9, r4
   17740:	add	r3, sp, #16
   17744:	mov	r1, r4
   17748:	mov	r2, r5
   1774c:	mov	r0, r8
   17750:	stm	sp, {r3, fp}
   17754:	add	r3, sp, #8
   17758:	ldr	ip, [r7]
   1775c:	blx	ip
   17760:	cmp	r5, r0
   17764:	mov	r4, r0
   17768:	beq	177d0 <_start@@Base+0x2a2c>
   1776c:	cmp	r9, r0
   17770:	bne	177a0 <_start@@Base+0x29fc>
   17774:	ldr	r3, [r7, #4]!
   17778:	mov	r9, r0
   1777c:	cmp	r3, #0
   17780:	bne	17740 <_start@@Base+0x299c>
   17784:	mov	r1, r0
   17788:	mov	r3, #23
   1778c:	mov	r2, r5
   17790:	mov	r0, r8
   17794:	bl	24960 <flatcc_json_parser_set_error@@Base>
   17798:	mov	r4, r0
   1779c:	b	177d0 <_start@@Base+0x2a2c>
   177a0:	ldrd	r0, [sp, #16]
   177a4:	bl	2daa4 <flatcc_json_printer_clear@@Base+0x384>
   177a8:	vmov	d7, r0, r1
   177ac:	ldr	r3, [sp, #8]
   177b0:	vldr	d6, [r6]
   177b4:	cmp	r3, #0
   177b8:	ldr	r3, [sp, #12]
   177bc:	vnegne.f64	d7, d7
   177c0:	cmp	r3, #0
   177c4:	vadd.f64	d7, d6, d7
   177c8:	vstr	d7, [r6]
   177cc:	bne	17738 <_start@@Base+0x2994>
   177d0:	mov	r0, r4
   177d4:	add	sp, sp, #28
   177d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177dc:	nop	{0}
	...
   177e8:	push	{r4, r5, r6, r7, r8, lr}
   177ec:	mov	r5, r1
   177f0:	mov	r7, r0
   177f4:	mov	r1, r2
   177f8:	mov	r0, r5
   177fc:	mov	r4, r2
   17800:	mov	r8, r3
   17804:	bl	14e98 <_start@@Base+0xf4>
   17808:	add	r3, pc, #104	; 0x68
   1780c:	ldrd	r2, [r3]
   17810:	cmp	r1, r3
   17814:	cmpeq	r0, r2
   17818:	bne	17870 <_start@@Base+0x2acc>
   1781c:	add	r6, r5, #8
   17820:	mov	r1, r4
   17824:	mov	r0, r6
   17828:	bl	14e98 <_start@@Base+0xf4>
   1782c:	and	r3, r1, #-16777216	; 0xff000000
   17830:	mov	r2, #0
   17834:	cmp	r3, #1912602624	; 0x72000000
   17838:	cmpeq	r2, #0
   1783c:	bne	17870 <_start@@Base+0x2acc>
   17840:	mov	r1, r4
   17844:	mov	r2, #1
   17848:	mov	r0, r6
   1784c:	bl	16b48 <_start@@Base+0x1da4>
   17850:	cmp	r6, r0
   17854:	mov	r1, r0
   17858:	beq	17870 <_start@@Base+0x2acc>
   1785c:	mov	r3, r8
   17860:	mov	r2, r4
   17864:	mov	r0, r7
   17868:	pop	{r4, r5, r6, r7, r8, lr}
   1786c:	b	15ee8 <_start@@Base+0x1144>
   17870:	mov	r0, r5
   17874:	pop	{r4, r5, r6, r7, r8, pc}
   17878:	cmnvs	r3, r5, ror #8
   1787c:	cmnmi	r8, #-2147483620	; 0x8000001c
   17880:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17884:	mov	r4, r1
   17888:	mov	r9, r0
   1788c:	mov	r1, r2
   17890:	mov	r0, r4
   17894:	mov	sl, r2
   17898:	mov	r5, r3
   1789c:	bl	14e98 <_start@@Base+0xf4>
   178a0:	add	r3, pc, #240	; 0xf0
   178a4:	ldrd	r2, [r3]
   178a8:	ldr	fp, [sp, #52]	; 0x34
   178ac:	cmp	r1, r3
   178b0:	cmpeq	r0, r2
   178b4:	bne	17940 <_start@@Base+0x2b9c>
   178b8:	mov	r1, sl
   178bc:	add	r0, r4, #8
   178c0:	bl	14e98 <_start@@Base+0xf4>
   178c4:	add	r3, pc, #212	; 0xd4
   178c8:	ldrd	r2, [r3]
   178cc:	cmp	r1, r3
   178d0:	cmpeq	r0, r2
   178d4:	beq	178e4 <_start@@Base+0x2b40>
   178d8:	mov	r0, r4
   178dc:	add	sp, sp, #12
   178e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178e4:	add	r6, r4, #16
   178e8:	mov	r1, sl
   178ec:	mov	r0, r6
   178f0:	mov	r7, #0
   178f4:	bl	14e98 <_start@@Base+0xf4>
   178f8:	and	r3, r1, #-16777216	; 0xff000000
   178fc:	cmp	r3, #1694498816	; 0x65000000
   17900:	cmpeq	r7, #0
   17904:	bne	178d8 <_start@@Base+0x2b34>
   17908:	mov	r3, #1
   1790c:	mov	r2, sl
   17910:	str	fp, [sp]
   17914:	mov	r1, r6
   17918:	mov	r0, r9
   1791c:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   17920:	cmp	r6, r0
   17924:	beq	178d8 <_start@@Base+0x2b34>
   17928:	ldr	r1, [sp, #48]	; 0x30
   1792c:	mov	r2, #1
   17930:	mov	r3, #0
   17934:	strd	r2, [r1]
   17938:	str	r7, [r5]
   1793c:	b	178dc <_start@@Base+0x2b38>
   17940:	mov	r7, r1
   17944:	add	r1, pc, #92	; 0x5c
   17948:	ldrd	r0, [r1]
   1794c:	mov	r8, #0
   17950:	cmp	r7, r1
   17954:	cmpeq	r8, r0
   17958:	bne	178d8 <_start@@Base+0x2b34>
   1795c:	mov	r3, #4
   17960:	mov	r2, sl
   17964:	str	fp, [sp]
   17968:	mov	r1, r4
   1796c:	mov	r0, r9
   17970:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   17974:	cmp	r4, r0
   17978:	beq	178dc <_start@@Base+0x2b38>
   1797c:	ldr	r1, [sp, #48]	; 0x30
   17980:	mov	r2, #0
   17984:	mov	r3, #0
   17988:	strd	r2, [r1]
   1798c:	str	r8, [r5]
   17990:	b	178dc <_start@@Base+0x2b38>
   17994:	nop	{0}
   17998:	rsbvc	r6, r5, #116, 28	; 0x740
   1799c:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   179a0:	cmnvc	r0, #-1073741800	; 0xc0000018
   179a4:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   179a8:	andeq	r0, r0, r0
   179ac:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   179b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179b4:	sub	sp, sp, #28
   179b8:	mov	r9, r3
   179bc:	mov	r5, r1
   179c0:	mov	r8, r0
   179c4:	mov	r1, r2
   179c8:	mov	r0, r5
   179cc:	ldr	r3, [sp, #64]	; 0x40
   179d0:	mov	r4, r2
   179d4:	ldr	fp, [sp, #68]	; 0x44
   179d8:	str	r3, [sp, #12]
   179dc:	bl	14e98 <_start@@Base+0xf4>
   179e0:	add	r3, pc, #944	; 0x3b0
   179e4:	ldrd	r2, [r3]
   179e8:	cmp	r1, r3
   179ec:	cmpeq	r0, r2
   179f0:	bhi	17a80 <_start@@Base+0x2cdc>
   179f4:	add	r3, pc, #932	; 0x3a4
   179f8:	ldrd	r2, [r3]
   179fc:	cmp	r1, r3
   17a00:	cmpeq	r0, r2
   17a04:	bne	17edc <_start@@Base+0x3138>
   17a08:	mov	r1, r4
   17a0c:	add	r0, r5, #8
   17a10:	bl	14e98 <_start@@Base+0xf4>
   17a14:	add	r3, pc, #908	; 0x38c
   17a18:	ldrd	r2, [r3]
   17a1c:	cmp	r1, r3
   17a20:	cmpeq	r0, r2
   17a24:	bne	17edc <_start@@Base+0x3138>
   17a28:	add	r6, r5, #16
   17a2c:	mov	r1, r4
   17a30:	mov	r0, r6
   17a34:	bl	14e98 <_start@@Base+0xf4>
   17a38:	and	r3, r1, #-16777216	; 0xff000000
   17a3c:	mov	r2, #0
   17a40:	cmp	r3, #1912602624	; 0x72000000
   17a44:	cmpeq	r2, #0
   17a48:	bne	17edc <_start@@Base+0x3138>
   17a4c:	mov	r1, r4
   17a50:	mov	r2, #1
   17a54:	mov	r0, r6
   17a58:	bl	16b48 <_start@@Base+0x1da4>
   17a5c:	cmp	r6, r0
   17a60:	mov	r1, r0
   17a64:	beq	17edc <_start@@Base+0x3138>
   17a68:	mov	r3, r9
   17a6c:	mov	r2, r4
   17a70:	mov	r0, r8
   17a74:	add	sp, sp, #28
   17a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a7c:	b	15ee8 <_start@@Base+0x1144>
   17a80:	add	r3, pc, #808	; 0x328
   17a84:	ldrd	r2, [r3]
   17a88:	cmp	r1, r3
   17a8c:	cmpeq	r0, r2
   17a90:	bne	17ee8 <_start@@Base+0x3144>
   17a94:	mov	r1, r4
   17a98:	add	r0, r5, #8
   17a9c:	bl	14e98 <_start@@Base+0xf4>
   17aa0:	add	r3, pc, #784	; 0x310
   17aa4:	ldrd	r2, [r3]
   17aa8:	cmp	r1, r3
   17aac:	cmpeq	r0, r2
   17ab0:	bhi	17c2c <_start@@Base+0x2e88>
   17ab4:	add	r3, pc, #772	; 0x304
   17ab8:	ldrd	r2, [r3]
   17abc:	cmp	r1, r3
   17ac0:	cmpeq	r0, r2
   17ac4:	bhi	17b40 <_start@@Base+0x2d9c>
   17ac8:	add	r3, pc, #760	; 0x2f8
   17acc:	ldrd	r2, [r3]
   17ad0:	cmp	r1, r3
   17ad4:	cmpeq	r0, r2
   17ad8:	bne	17edc <_start@@Base+0x3138>
   17adc:	add	r6, r5, #16
   17ae0:	mov	r1, r4
   17ae4:	mov	r0, r6
   17ae8:	bl	14e98 <_start@@Base+0xf4>
   17aec:	lsr	r3, r1, #16
   17af0:	ldr	r1, [pc, #808]	; 17e20 <_start@@Base+0x307c>
   17af4:	mov	r2, #0
   17af8:	mov	r0, #0
   17afc:	lsl	r3, r3, #16
   17b00:	cmp	r3, r1
   17b04:	cmpeq	r2, r0
   17b08:	bne	17edc <_start@@Base+0x3138>
   17b0c:	mov	r1, r4
   17b10:	mov	r2, #2
   17b14:	mov	r0, r6
   17b18:	bl	16b48 <_start@@Base+0x1da4>
   17b1c:	cmp	r6, r0
   17b20:	mov	r1, r0
   17b24:	beq	17edc <_start@@Base+0x3138>
   17b28:	mov	r3, r9
   17b2c:	mov	r2, r4
   17b30:	mov	r0, r8
   17b34:	add	sp, sp, #28
   17b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b3c:	b	16198 <_start@@Base+0x13f4>
   17b40:	add	r3, pc, #648	; 0x288
   17b44:	ldrd	r2, [r3]
   17b48:	cmp	r1, r3
   17b4c:	cmpeq	r0, r2
   17b50:	bne	17bb4 <_start@@Base+0x2e10>
   17b54:	add	r6, r5, #16
   17b58:	mov	r1, r4
   17b5c:	mov	r0, r6
   17b60:	bl	14e98 <_start@@Base+0xf4>
   17b64:	mov	r3, r1
   17b68:	add	r1, pc, #616	; 0x268
   17b6c:	ldrd	r0, [r1]
   17b70:	mov	r2, #0
   17b74:	cmp	r3, r1
   17b78:	cmpeq	r2, r0
   17b7c:	bne	17edc <_start@@Base+0x3138>
   17b80:	mov	r1, r4
   17b84:	mov	r2, #4
   17b88:	mov	r0, r6
   17b8c:	bl	16b48 <_start@@Base+0x1da4>
   17b90:	cmp	r6, r0
   17b94:	mov	r1, r0
   17b98:	beq	17edc <_start@@Base+0x3138>
   17b9c:	mov	r3, r9
   17ba0:	mov	r2, r4
   17ba4:	mov	r0, r8
   17ba8:	add	sp, sp, #28
   17bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bb0:	b	16868 <_start@@Base+0x1ac4>
   17bb4:	add	r3, pc, #548	; 0x224
   17bb8:	ldrd	r2, [r3]
   17bbc:	cmp	r1, r3
   17bc0:	cmpeq	r0, r2
   17bc4:	bne	17edc <_start@@Base+0x3138>
   17bc8:	add	r6, r5, #16
   17bcc:	mov	r1, r4
   17bd0:	mov	r0, r6
   17bd4:	bl	14e98 <_start@@Base+0xf4>
   17bd8:	lsr	r3, r1, #16
   17bdc:	ldr	r1, [pc, #576]	; 17e24 <_start@@Base+0x3080>
   17be0:	mov	r2, #0
   17be4:	mov	r0, #0
   17be8:	lsl	r3, r3, #16
   17bec:	cmp	r3, r1
   17bf0:	cmpeq	r2, r0
   17bf4:	bne	17edc <_start@@Base+0x3138>
   17bf8:	mov	r1, r4
   17bfc:	mov	r2, #2
   17c00:	mov	r0, r6
   17c04:	bl	16b48 <_start@@Base+0x1da4>
   17c08:	cmp	r6, r0
   17c0c:	mov	r1, r0
   17c10:	beq	17edc <_start@@Base+0x3138>
   17c14:	mov	r3, r9
   17c18:	mov	r2, r4
   17c1c:	mov	r0, r8
   17c20:	add	sp, sp, #28
   17c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c28:	b	17880 <_start@@Base+0x2adc>
   17c2c:	add	r3, pc, #436	; 0x1b4
   17c30:	ldrd	r2, [r3]
   17c34:	cmp	r1, r3
   17c38:	cmpeq	r0, r2
   17c3c:	bne	17ca0 <_start@@Base+0x2efc>
   17c40:	add	r6, r5, #16
   17c44:	mov	r1, r4
   17c48:	mov	r0, r6
   17c4c:	bl	14e98 <_start@@Base+0xf4>
   17c50:	bic	r2, r0, #255	; 0xff
   17c54:	mov	r3, r1
   17c58:	add	r1, pc, #400	; 0x190
   17c5c:	ldrd	r0, [r1]
   17c60:	cmp	r3, r1
   17c64:	cmpeq	r2, r0
   17c68:	bne	17edc <_start@@Base+0x3138>
   17c6c:	mov	r1, r4
   17c70:	mov	r2, #7
   17c74:	mov	r0, r6
   17c78:	bl	16b48 <_start@@Base+0x1da4>
   17c7c:	cmp	r6, r0
   17c80:	mov	r1, r0
   17c84:	beq	17edc <_start@@Base+0x3138>
   17c88:	mov	r3, r9
   17c8c:	mov	r2, r4
   17c90:	mov	r0, r8
   17c94:	add	sp, sp, #28
   17c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c9c:	b	16418 <_start@@Base+0x1674>
   17ca0:	add	r3, pc, #336	; 0x150
   17ca4:	ldrd	r2, [r3]
   17ca8:	cmp	r1, r3
   17cac:	cmpeq	r0, r2
   17cb0:	bhi	17d28 <_start@@Base+0x2f84>
   17cb4:	add	r3, pc, #324	; 0x144
   17cb8:	ldrd	r2, [r3]
   17cbc:	cmp	r1, r3
   17cc0:	cmpeq	r0, r2
   17cc4:	bne	17edc <_start@@Base+0x3138>
   17cc8:	add	r6, r5, #16
   17ccc:	mov	r1, r4
   17cd0:	mov	r0, r6
   17cd4:	bl	14e98 <_start@@Base+0xf4>
   17cd8:	bic	r2, r0, #255	; 0xff
   17cdc:	mov	r3, r1
   17ce0:	add	r1, pc, #288	; 0x120
   17ce4:	ldrd	r0, [r1]
   17ce8:	cmp	r3, r1
   17cec:	cmpeq	r2, r0
   17cf0:	bne	17edc <_start@@Base+0x3138>
   17cf4:	mov	r1, r4
   17cf8:	mov	r2, #7
   17cfc:	mov	r0, r6
   17d00:	bl	16b48 <_start@@Base+0x1da4>
   17d04:	cmp	r6, r0
   17d08:	mov	r1, r0
   17d0c:	beq	17edc <_start@@Base+0x3138>
   17d10:	mov	r3, r9
   17d14:	mov	r2, r4
   17d18:	mov	r0, r8
   17d1c:	add	sp, sp, #28
   17d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d24:	b	16580 <_start@@Base+0x17dc>
   17d28:	add	r3, pc, #224	; 0xe0
   17d2c:	ldrd	r2, [r3]
   17d30:	cmp	r1, r3
   17d34:	cmpeq	r0, r2
   17d38:	bne	17edc <_start@@Base+0x3138>
   17d3c:	add	r7, pc, #212	; 0xd4
   17d40:	ldrd	r6, [r7]
   17d44:	add	sl, r5, #16
   17d48:	mov	r1, r4
   17d4c:	mov	r0, sl
   17d50:	bl	14e98 <_start@@Base+0xf4>
   17d54:	bic	r2, r0, #255	; 0xff
   17d58:	cmp	r1, r7
   17d5c:	cmpeq	r2, r6
   17d60:	bne	17e28 <_start@@Base+0x3084>
   17d64:	mov	r1, r4
   17d68:	mov	r2, #7
   17d6c:	mov	r0, sl
   17d70:	bl	16b48 <_start@@Base+0x1da4>
   17d74:	cmp	sl, r0
   17d78:	mov	r1, r0
   17d7c:	beq	17edc <_start@@Base+0x3138>
   17d80:	mov	r3, r9
   17d84:	mov	r2, r4
   17d88:	mov	r0, r8
   17d8c:	add	sp, sp, #28
   17d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d94:	b	16730 <_start@@Base+0x198c>
   17d98:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   17d9c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17da0:	cmnvs	r3, lr, lsr #18
   17da4:			; <UNDEFINED> instruction: 0x46616e74
   17da8:	cmnvs	r3, r5, ror #8
   17dac:	cmnmi	r8, #-2147483620	; 0x8000001c
   17db0:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   17db4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17db8:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   17dbc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17dc0:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   17dc4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17dc8:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   17dcc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17dd0:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   17dd4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17dd8:	andeq	r0, r0, r0
   17ddc:	svcvs	0x006c6f72
   17de0:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   17de4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17de8:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   17dec:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17df0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17df4:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   17df8:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   17dfc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17e00:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   17e04:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17e08:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17e0c:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   17e10:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   17e14:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17e18:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17e1c:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   17e20:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   17e24:	svcvs	0x006f0000
   17e28:	add	r3, pc, #608	; 0x260
   17e2c:	ldrd	r2, [r3]
   17e30:	cmp	r1, r3
   17e34:	cmpeq	r0, r2
   17e38:	bne	17edc <_start@@Base+0x3138>
   17e3c:	add	r6, r5, #24
   17e40:	mov	r1, r4
   17e44:	mov	r0, r6
   17e48:	bl	14e98 <_start@@Base+0xf4>
   17e4c:	bic	r3, r1, #255	; 0xff
   17e50:	add	r1, pc, #576	; 0x240
   17e54:	ldrd	r0, [r1]
   17e58:	mov	r2, #0
   17e5c:	cmp	r3, r1
   17e60:	cmpeq	r2, r0
   17e64:	bne	17edc <_start@@Base+0x3138>
   17e68:	mov	r2, #3
   17e6c:	mov	r1, r4
   17e70:	mov	r0, r6
   17e74:	bl	16b48 <_start@@Base+0x1da4>
   17e78:	cmp	r6, r0
   17e7c:	mov	r7, r0
   17e80:	beq	17edc <_start@@Base+0x3138>
   17e84:	mov	r1, r4
   17e88:	mov	r6, #0
   17e8c:	bl	14e98 <_start@@Base+0xf4>
   17e90:	and	r3, r1, #-16777216	; 0xff000000
   17e94:	cmp	r3, #2013265920	; 0x78000000
   17e98:	cmpeq	r6, #0
   17e9c:	movne	r5, r7
   17ea0:	bne	17edc <_start@@Base+0x3138>
   17ea4:	mov	r3, #1
   17ea8:	mov	r2, r4
   17eac:	str	fp, [sp]
   17eb0:	mov	r1, r7
   17eb4:	mov	r0, r8
   17eb8:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   17ebc:	cmp	r7, r0
   17ec0:	mov	r5, r0
   17ec4:	beq	17edc <_start@@Base+0x3138>
   17ec8:	ldr	r1, [sp, #12]
   17ecc:	mov	r2, #0
   17ed0:	mov	r3, #0
   17ed4:	strd	r2, [r1]
   17ed8:	str	r6, [r9]
   17edc:	mov	r0, r5
   17ee0:	add	sp, sp, #28
   17ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ee8:	add	r3, pc, #432	; 0x1b0
   17eec:	ldrd	r2, [r3]
   17ef0:	cmp	r1, r3
   17ef4:	cmpeq	r0, r2
   17ef8:	bne	17edc <_start@@Base+0x3138>
   17efc:	mov	r1, r4
   17f00:	add	r0, r5, #8
   17f04:	bl	14e98 <_start@@Base+0xf4>
   17f08:	add	r3, pc, #408	; 0x198
   17f0c:	ldrd	r2, [r3]
   17f10:	cmp	r1, r3
   17f14:	cmpeq	r0, r2
   17f18:	bne	17edc <_start@@Base+0x3138>
   17f1c:	mov	r1, r4
   17f20:	add	r0, r5, #16
   17f24:	bl	14e98 <_start@@Base+0xf4>
   17f28:	add	r3, pc, #384	; 0x180
   17f2c:	ldrd	r2, [r3]
   17f30:	cmp	r1, r3
   17f34:	cmpeq	r0, r2
   17f38:	bne	17edc <_start@@Base+0x3138>
   17f3c:	mov	r1, r4
   17f40:	add	r0, r5, #24
   17f44:	bl	14e98 <_start@@Base+0xf4>
   17f48:	add	r3, pc, #360	; 0x168
   17f4c:	ldrd	r2, [r3]
   17f50:	cmp	r1, r3
   17f54:	cmpeq	r0, r2
   17f58:	bne	17edc <_start@@Base+0x3138>
   17f5c:	add	sl, r5, #32
   17f60:	mov	r1, r4
   17f64:	mov	r0, sl
   17f68:	mov	r7, #0
   17f6c:	bl	14e98 <_start@@Base+0xf4>
   17f70:	and	r3, r1, #-16777216	; 0xff000000
   17f74:	cmp	r3, #1694498816	; 0x65000000
   17f78:	cmpeq	r7, #0
   17f7c:	bne	17edc <_start@@Base+0x3138>
   17f80:	mov	r2, #1
   17f84:	mov	r1, r4
   17f88:	mov	r0, sl
   17f8c:	bl	16b48 <_start@@Base+0x1da4>
   17f90:	cmp	sl, r0
   17f94:	mov	r6, r0
   17f98:	beq	17edc <_start@@Base+0x3138>
   17f9c:	mov	r1, r4
   17fa0:	bl	14e98 <_start@@Base+0xf4>
   17fa4:	strd	r0, [sp, #16]
   17fa8:	ldr	r1, [sp, #20]
   17fac:	bic	r3, r1, #255	; 0xff
   17fb0:	add	r1, pc, #264	; 0x108
   17fb4:	ldrd	r0, [r1]
   17fb8:	cmp	r3, r1
   17fbc:	cmpeq	r7, r0
   17fc0:	bne	18000 <_start@@Base+0x325c>
   17fc4:	mov	r3, #3
   17fc8:	mov	r2, r4
   17fcc:	str	fp, [sp]
   17fd0:	mov	r1, r6
   17fd4:	mov	r0, r8
   17fd8:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   17fdc:	cmp	r6, r0
   17fe0:	mov	r5, r0
   17fe4:	beq	17edc <_start@@Base+0x3138>
   17fe8:	ldr	r1, [sp, #12]
   17fec:	mov	r2, #17
   17ff0:	mov	r3, #0
   17ff4:	strd	r2, [r1]
   17ff8:	str	r7, [r9]
   17ffc:	b	17edc <_start@@Base+0x3138>
   18000:	add	r3, pc, #192	; 0xc0
   18004:	ldrd	r2, [r3]
   18008:	ldrd	r0, [sp, #16]
   1800c:	cmp	r1, r3
   18010:	cmpeq	r0, r2
   18014:	bne	18084 <_start@@Base+0x32e0>
   18018:	add	r7, r6, #8
   1801c:	mov	r1, r4
   18020:	mov	r0, r7
   18024:	mov	sl, #0
   18028:	bl	14e98 <_start@@Base+0xf4>
   1802c:	lsr	r3, r1, #16
   18030:	ldr	r1, [pc, #152]	; 180d0 <_start@@Base+0x332c>
   18034:	mov	r0, #0
   18038:	lsl	r3, r3, #16
   1803c:	cmp	r3, r1
   18040:	cmpeq	sl, r0
   18044:	bne	18084 <_start@@Base+0x32e0>
   18048:	mov	r3, #2
   1804c:	mov	r2, r4
   18050:	str	fp, [sp]
   18054:	mov	r1, r7
   18058:	mov	r0, r8
   1805c:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   18060:	cmp	r7, r0
   18064:	mov	r5, r0
   18068:	beq	18084 <_start@@Base+0x32e0>
   1806c:	ldr	r1, [sp, #12]
   18070:	mov	r2, #0
   18074:	mov	r3, #0
   18078:	strd	r2, [r1]
   1807c:	str	sl, [r9]
   18080:	b	17edc <_start@@Base+0x3138>
   18084:	mov	r5, r6
   18088:	b	17edc <_start@@Base+0x3138>
   1808c:	nop	{0}
   18090:	rsbsvc	r7, r4, r5, ror #18
   18094:	svcvs	0x0074656d
   18098:	andeq	r0, r0, r0
   1809c:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   180a0:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   180a4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   180a8:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   180ac:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   180b0:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   180b4:	cmnpl	r0, #-1073741800	; 0xc0000018
   180b8:	cmnvs	ip, #100, 10	; 0x19000000
   180bc:	svcvs	0x006d496e
   180c0:	andeq	r0, r0, r0
   180c4:	strbtmi	r6, [pc], -r0, lsl #30
   180c8:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   180cc:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   180d0:	cmnvs	ip, r0
   180d4:	cmp	r1, r2
   180d8:	push	{r4, r5, r6, lr}
   180dc:	mov	ip, r2
   180e0:	mov	r6, r0
   180e4:	beq	180f4 <_start@@Base+0x3350>
   180e8:	ldrb	r4, [r1]
   180ec:	cmp	r4, #123	; 0x7b
   180f0:	beq	18110 <_start@@Base+0x336c>
   180f4:	mov	r2, #0
   180f8:	mov	r0, r6
   180fc:	pop	{r4, r5, r6, lr}
   18100:	str	r2, [r3]
   18104:	mov	r3, #21
   18108:	mov	r2, ip
   1810c:	b	24960 <flatcc_json_parser_set_error@@Base>
   18110:	add	r1, r1, #1
   18114:	mov	r4, r2
   18118:	mov	r5, r3
   1811c:	bl	169a0 <_start@@Base+0x1bfc>
   18120:	cmp	r4, r0
   18124:	beq	18150 <_start@@Base+0x33ac>
   18128:	ldrb	r3, [r0]
   1812c:	cmp	r3, #125	; 0x7d
   18130:	bne	18150 <_start@@Base+0x33ac>
   18134:	mov	r3, #0
   18138:	mov	r2, r4
   1813c:	add	r1, r0, #1
   18140:	mov	r0, r6
   18144:	str	r3, [r5]
   18148:	pop	{r4, r5, r6, lr}
   1814c:	b	169a0 <_start@@Base+0x1bfc>
   18150:	mov	r3, #1
   18154:	str	r3, [r5]
   18158:	pop	{r4, r5, r6, pc}
   1815c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18160:	mov	r5, r1
   18164:	mov	r1, #0
   18168:	mov	r4, r0
   1816c:	mov	r6, r2
   18170:	mov	r7, r3
   18174:	ldr	r0, [r0]
   18178:	str	r1, [r3]
   1817c:	bl	21480 <flatcc_builder_start_table@@Base>
   18180:	cmp	r0, #0
   18184:	bne	181cc <_start@@Base+0x3428>
   18188:	add	r3, sp, #4
   1818c:	mov	r2, r6
   18190:	mov	r1, r5
   18194:	mov	r0, r4
   18198:	bl	180d4 <_start@@Base+0x3330>
   1819c:	ldr	r3, [sp, #4]
   181a0:	mov	r5, r0
   181a4:	cmp	r3, #0
   181a8:	bne	181f0 <_start@@Base+0x344c>
   181ac:	ldr	r3, [r4, #20]
   181b0:	cmp	r3, #0
   181b4:	bne	181cc <_start@@Base+0x3428>
   181b8:	ldr	r0, [r4]
   181bc:	bl	21aa8 <flatcc_builder_end_table@@Base>
   181c0:	cmp	r0, #0
   181c4:	str	r0, [r7]
   181c8:	bne	181e4 <_start@@Base+0x3440>
   181cc:	mov	r1, r5
   181d0:	mov	r3, #33	; 0x21
   181d4:	mov	r2, r6
   181d8:	mov	r0, r4
   181dc:	bl	24960 <flatcc_json_parser_set_error@@Base>
   181e0:	mov	r5, r0
   181e4:	mov	r0, r5
   181e8:	add	sp, sp, #12
   181ec:	pop	{r4, r5, r6, r7, pc}
   181f0:	mov	r2, r6
   181f4:	mov	r1, r5
   181f8:	mov	r0, r4
   181fc:	bl	174dc <_start@@Base+0x2738>
   18200:	mov	r1, r0
   18204:	mov	r2, r6
   18208:	mov	r0, r4
   1820c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   18210:	mov	r1, r0
   18214:	add	r3, sp, #4
   18218:	mov	r2, r6
   1821c:	mov	r0, r4
   18220:	bl	16a90 <_start@@Base+0x1cec>
   18224:	b	1819c <_start@@Base+0x33f8>
   18228:	sub	ip, r2, r1
   1822c:	cmp	ip, r3
   18230:	ble	18298 <_start@@Base+0x34f4>
   18234:	ldrb	ip, [r1, r3]
   18238:	cmp	ip, #34	; 0x22
   1823c:	bne	18298 <_start@@Base+0x34f4>
   18240:	add	r3, r3, #1
   18244:	push	{r4, r5, r6, lr}
   18248:	mov	r4, r2
   1824c:	add	r1, r1, r3
   18250:	mov	r5, r0
   18254:	bl	169a0 <_start@@Base+0x1bfc>
   18258:	cmp	r4, r0
   1825c:	mov	r1, r0
   18260:	beq	18284 <_start@@Base+0x34e0>
   18264:	ldrb	r3, [r0]
   18268:	cmp	r3, #58	; 0x3a
   1826c:	bne	18284 <_start@@Base+0x34e0>
   18270:	mov	r2, r4
   18274:	add	r1, r0, #1
   18278:	mov	r0, r5
   1827c:	pop	{r4, r5, r6, lr}
   18280:	b	169a0 <_start@@Base+0x1bfc>
   18284:	mov	r2, r4
   18288:	mov	r0, r5
   1828c:	pop	{r4, r5, r6, lr}
   18290:	mov	r3, #4
   18294:	b	24960 <flatcc_json_parser_set_error@@Base>
   18298:	mov	r0, r1
   1829c:	bx	lr
   182a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182a4:	sub	sp, sp, #116	; 0x74
   182a8:	mov	r4, r2
   182ac:	mov	r8, r0
   182b0:	mov	r5, r1
   182b4:	mov	r1, #10
   182b8:	str	r3, [sp, #60]	; 0x3c
   182bc:	mov	r3, #0
   182c0:	ldr	r2, [sp, #60]	; 0x3c
   182c4:	ldr	r0, [r0]
   182c8:	str	r3, [r2]
   182cc:	bl	21480 <flatcc_builder_start_table@@Base>
   182d0:	cmp	r0, #0
   182d4:	bne	1835c <_start@@Base+0x35b8>
   182d8:	add	r3, sp, #108	; 0x6c
   182dc:	mov	r2, r4
   182e0:	mov	r1, r5
   182e4:	mov	r0, r8
   182e8:	str	r3, [sp]
   182ec:	mov	r3, #5
   182f0:	bl	260d0 <flatcc_json_parser_prepare_unions@@Base>
   182f4:	cmp	r4, r0
   182f8:	beq	1835c <_start@@Base+0x35b8>
   182fc:	add	r3, sp, #104	; 0x68
   18300:	mov	r2, r4
   18304:	mov	r1, r5
   18308:	mov	r0, r8
   1830c:	bl	180d4 <_start@@Base+0x3330>
   18310:	ldr	r3, [sp, #104]	; 0x68
   18314:	mov	r5, r0
   18318:	cmp	r3, #0
   1831c:	bne	18380 <_start@@Base+0x35dc>
   18320:	ldr	r3, [r8, #20]
   18324:	cmp	r3, #0
   18328:	bne	1835c <_start@@Base+0x35b8>
   1832c:	mov	r1, r0
   18330:	mov	r2, r4
   18334:	ldr	r3, [sp, #108]	; 0x6c
   18338:	mov	r0, r8
   1833c:	bl	26138 <flatcc_json_parser_finalize_unions@@Base>
   18340:	mov	r5, r0
   18344:	ldr	r0, [r8]
   18348:	bl	21aa8 <flatcc_builder_end_table@@Base>
   1834c:	ldr	r3, [sp, #60]	; 0x3c
   18350:	cmp	r0, #0
   18354:	str	r0, [r3]
   18358:	bne	18374 <_start@@Base+0x35d0>
   1835c:	mov	r1, r5
   18360:	mov	r3, #33	; 0x21
   18364:	mov	r2, r4
   18368:	mov	r0, r8
   1836c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   18370:	mov	r5, r0
   18374:	mov	r0, r5
   18378:	add	sp, sp, #116	; 0x74
   1837c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18380:	mov	r2, r4
   18384:	mov	r1, r5
   18388:	mov	r0, r8
   1838c:	bl	174dc <_start@@Base+0x2738>
   18390:	mov	r1, r4
   18394:	mov	r5, r0
   18398:	bl	14e98 <_start@@Base+0xf4>
   1839c:	add	r3, pc, #852	; 0x354
   183a0:	ldrd	r2, [r3]
   183a4:	cmp	r1, r3
   183a8:	cmpeq	r0, r2
   183ac:	bhi	185b4 <_start@@Base+0x3810>
   183b0:	add	r3, pc, #840	; 0x348
   183b4:	ldrd	r2, [r3]
   183b8:	cmp	r1, r3
   183bc:	cmpeq	r0, r2
   183c0:	bne	184b8 <_start@@Base+0x3714>
   183c4:	add	r5, r5, #8
   183c8:	mov	r1, r4
   183cc:	mov	r0, r5
   183d0:	bl	14e98 <_start@@Base+0xf4>
   183d4:	bic	r3, r0, #255	; 0xff
   183d8:	str	r3, [sp, #64]	; 0x40
   183dc:	str	r1, [sp, #68]	; 0x44
   183e0:	add	r3, pc, #800	; 0x320
   183e4:	ldrd	r2, [r3]
   183e8:	ldrd	r6, [sp, #64]	; 0x40
   183ec:	cmp	r7, r3
   183f0:	cmpeq	r6, r2
   183f4:	bne	1844c <_start@@Base+0x36a8>
   183f8:	mov	r1, r5
   183fc:	mov	r3, #7
   18400:	mov	r2, r4
   18404:	mov	r0, r8
   18408:	bl	18228 <_start@@Base+0x3484>
   1840c:	cmp	r5, r0
   18410:	mov	r1, r0
   18414:	beq	18980 <_start@@Base+0x3bdc>
   18418:	ldr	r3, [pc, #792]	; 18738 <_start@@Base+0x3994>
   1841c:	str	r3, [sp, #12]
   18420:	ldr	r3, [pc, #788]	; 1873c <_start@@Base+0x3998>
   18424:	str	r3, [sp, #8]
   18428:	ldr	r3, [sp, #108]	; 0x6c
   1842c:	str	r3, [sp, #4]
   18430:	mov	r3, #3
   18434:	str	r3, [sp]
   18438:	mov	r3, #1
   1843c:	mov	r2, r4
   18440:	mov	r0, r8
   18444:	bl	2629c <flatcc_json_parser_union_type@@Base>
   18448:	b	18668 <_start@@Base+0x38c4>
   1844c:	ldr	r3, [pc, #748]	; 18740 <_start@@Base+0x399c>
   18450:	lsr	fp, r1, #16
   18454:	mov	sl, #0
   18458:	mov	r2, #0
   1845c:	lsl	fp, fp, #16
   18460:	cmp	fp, r3
   18464:	cmpeq	sl, r2
   18468:	bne	18980 <_start@@Base+0x3bdc>
   1846c:	mov	r1, r5
   18470:	mov	r3, #2
   18474:	mov	r2, r4
   18478:	mov	r0, r8
   1847c:	bl	18228 <_start@@Base+0x3484>
   18480:	cmp	r5, r0
   18484:	mov	r1, r0
   18488:	beq	18980 <_start@@Base+0x3bdc>
   1848c:	ldr	r3, [pc, #676]	; 18738 <_start@@Base+0x3994>
   18490:	str	r3, [sp, #8]
   18494:	ldr	r3, [sp, #108]	; 0x6c
   18498:	str	r3, [sp, #4]
   1849c:	mov	r3, #3
   184a0:	str	r3, [sp]
   184a4:	mov	r3, #1
   184a8:	mov	r2, r4
   184ac:	mov	r0, r8
   184b0:	bl	26190 <flatcc_json_parser_union@@Base>
   184b4:	b	18668 <_start@@Base+0x38c4>
   184b8:	add	r3, pc, #592	; 0x250
   184bc:	ldrd	r2, [r3]
   184c0:	cmp	r1, r3
   184c4:	cmpeq	r0, r2
   184c8:	bne	18550 <_start@@Base+0x37ac>
   184cc:	add	r5, r5, #8
   184d0:	mov	r1, r4
   184d4:	mov	r0, r5
   184d8:	bl	14e98 <_start@@Base+0xf4>
   184dc:	mov	r3, #0
   184e0:	mov	r2, #0
   184e4:	str	r3, [sp, #24]
   184e8:	lsr	r3, r1, #16
   184ec:	lsl	r3, r3, #16
   184f0:	str	r3, [sp, #28]
   184f4:	ldr	r3, [pc, #584]	; 18744 <_start@@Base+0x39a0>
   184f8:	ldrd	r0, [sp, #24]
   184fc:	cmp	r1, r3
   18500:	cmpeq	r0, r2
   18504:	bne	18980 <_start@@Base+0x3bdc>
   18508:	mov	r1, r5
   1850c:	mov	r3, #2
   18510:	mov	r2, r4
   18514:	mov	r0, r8
   18518:	bl	18228 <_start@@Base+0x3484>
   1851c:	cmp	r5, r0
   18520:	mov	r1, r0
   18524:	beq	18980 <_start@@Base+0x3bdc>
   18528:	ldr	r3, [pc, #520]	; 18738 <_start@@Base+0x3994>
   1852c:	str	r3, [sp, #12]
   18530:	ldr	r3, [pc, #528]	; 18748 <_start@@Base+0x39a4>
   18534:	str	r3, [sp, #8]
   18538:	ldr	r3, [sp, #108]	; 0x6c
   1853c:	str	r3, [sp, #4]
   18540:	mov	r3, #7
   18544:	str	r3, [sp]
   18548:	mov	r3, #3
   1854c:	b	1843c <_start@@Base+0x3698>
   18550:	and	r3, r0, #-16777216	; 0xff000000
   18554:	str	r3, [sp, #72]	; 0x48
   18558:	str	r1, [sp, #76]	; 0x4c
   1855c:	add	r3, pc, #436	; 0x1b4
   18560:	ldrd	r2, [r3]
   18564:	ldrd	r0, [sp, #72]	; 0x48
   18568:	cmp	r1, r3
   1856c:	cmpeq	r0, r2
   18570:	bne	18980 <_start@@Base+0x3bdc>
   18574:	mov	r1, r5
   18578:	mov	r3, #5
   1857c:	mov	r2, r4
   18580:	mov	r0, r8
   18584:	bl	18228 <_start@@Base+0x3484>
   18588:	cmp	r5, r0
   1858c:	mov	r1, r0
   18590:	beq	18980 <_start@@Base+0x3bdc>
   18594:	ldr	r3, [pc, #412]	; 18738 <_start@@Base+0x3994>
   18598:	str	r3, [sp, #8]
   1859c:	ldr	r3, [sp, #108]	; 0x6c
   185a0:	str	r3, [sp, #4]
   185a4:	mov	r3, #7
   185a8:	str	r3, [sp]
   185ac:	mov	r3, #3
   185b0:	b	184a8 <_start@@Base+0x3704>
   185b4:	add	r3, pc, #356	; 0x164
   185b8:	ldrd	r2, [r3]
   185bc:	cmp	r1, r3
   185c0:	cmpeq	r0, r2
   185c4:	bhi	18758 <_start@@Base+0x39b4>
   185c8:	add	r3, pc, #344	; 0x158
   185cc:	ldrd	r2, [r3]
   185d0:	cmp	r1, r3
   185d4:	cmpeq	r0, r2
   185d8:	bne	18980 <_start@@Base+0x3bdc>
   185dc:	add	r5, r5, #8
   185e0:	mov	r1, r4
   185e4:	mov	r0, r5
   185e8:	bl	14e98 <_start@@Base+0xf4>
   185ec:	bic	r3, r0, #255	; 0xff
   185f0:	str	r3, [sp, #80]	; 0x50
   185f4:	str	r1, [sp, #84]	; 0x54
   185f8:	add	r3, pc, #304	; 0x130
   185fc:	ldrd	r2, [r3]
   18600:	ldrd	r6, [sp, #80]	; 0x50
   18604:	cmp	r7, r3
   18608:	cmpeq	r6, r2
   1860c:	bne	18680 <_start@@Base+0x38dc>
   18610:	mov	r1, r5
   18614:	mov	r3, #7
   18618:	mov	r2, r4
   1861c:	mov	r0, r8
   18620:	bl	18228 <_start@@Base+0x3484>
   18624:	cmp	r5, r0
   18628:	mov	r1, r0
   1862c:	beq	18980 <_start@@Base+0x3bdc>
   18630:	ldr	r3, [pc, #276]	; 1874c <_start@@Base+0x39a8>
   18634:	mov	r2, r4
   18638:	mov	r0, r8
   1863c:	str	r3, [sp, #16]
   18640:	ldr	r3, [pc, #240]	; 18738 <_start@@Base+0x3994>
   18644:	str	r3, [sp, #12]
   18648:	ldr	r3, [pc, #256]	; 18750 <_start@@Base+0x39ac>
   1864c:	str	r3, [sp, #8]
   18650:	ldr	r3, [sp, #108]	; 0x6c
   18654:	str	r3, [sp, #4]
   18658:	mov	r3, #9
   1865c:	str	r3, [sp]
   18660:	mov	r3, #4
   18664:	bl	264e8 <flatcc_json_parser_union_type_vector@@Base>
   18668:	mov	r1, r0
   1866c:	add	r3, sp, #104	; 0x68
   18670:	mov	r2, r4
   18674:	mov	r0, r8
   18678:	bl	16a90 <_start@@Base+0x1cec>
   1867c:	b	18310 <_start@@Base+0x356c>
   18680:	mov	r3, #0
   18684:	mov	r2, #0
   18688:	str	r3, [sp, #32]
   1868c:	lsr	r3, r1, #16
   18690:	lsl	r3, r3, #16
   18694:	str	r3, [sp, #36]	; 0x24
   18698:	ldr	r3, [pc, #180]	; 18754 <_start@@Base+0x39b0>
   1869c:	ldrd	r0, [sp, #32]
   186a0:	cmp	r1, r3
   186a4:	cmpeq	r0, r2
   186a8:	bne	18980 <_start@@Base+0x3bdc>
   186ac:	mov	r1, r5
   186b0:	mov	r3, #2
   186b4:	mov	r2, r4
   186b8:	mov	r0, r8
   186bc:	bl	18228 <_start@@Base+0x3484>
   186c0:	cmp	r5, r0
   186c4:	mov	r1, r0
   186c8:	beq	18980 <_start@@Base+0x3bdc>
   186cc:	ldr	r3, [pc, #100]	; 18738 <_start@@Base+0x3994>
   186d0:	mov	r2, r4
   186d4:	mov	r0, r8
   186d8:	str	r3, [sp, #8]
   186dc:	ldr	r3, [sp, #108]	; 0x6c
   186e0:	str	r3, [sp, #4]
   186e4:	mov	r3, #9
   186e8:	str	r3, [sp]
   186ec:	mov	r3, #4
   186f0:	bl	2641c <flatcc_json_parser_union_vector@@Base>
   186f4:	b	18668 <_start@@Base+0x38c4>
   186f8:	cmnvs	r3, r4, ror #8
   186fc:	cmnvs	r8, #-2147483620	; 0x8000001c
   18700:	strbvs	r6, [pc, -r9, ror #28]!
   18704:	cmnvs	lr, r1, ror #8
   18708:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1870c:	cmnvc	r4, #116, 30	; 0x1d0
   18710:	svcvs	0x005f7479
   18714:	cmnvs	r1, #6464	; 0x1940
   18718:	svcvs	0x00000000
   1871c:	cmnvs	r1, #6464	; 0x1940
   18720:	svcpl	0x00636860
   18724:			; <UNDEFINED> instruction: 0x6d61696e
   18728:	cmnvs	r3, r5, ror #8
   1872c:	cmnvs	r8, #-2147483620	; 0x8000001c
   18730:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   18734:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   18738:	muleq	r1, r4, r6
   1873c:	andeq	r4, r4, r8, ror r0
   18740:	cmnvc	r4, #0
   18744:	rsbvc	r0, r5, r0
   18748:	andeq	r4, r4, r8, lsl #1
   1874c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   18750:	muleq	r4, r8, r0
   18754:	rsbsvc	r0, r3, #0
   18758:	add	r3, pc, #560	; 0x230
   1875c:	ldrd	r2, [r3]
   18760:	cmp	r1, r3
   18764:	cmpeq	r0, r2
   18768:	bne	1888c <_start@@Base+0x3ae8>
   1876c:	add	r9, r5, #8
   18770:	mov	r1, r4
   18774:	mov	r0, r9
   18778:	bl	14e98 <_start@@Base+0xf4>
   1877c:	add	r3, pc, #532	; 0x214
   18780:	ldrd	r2, [r3]
   18784:	cmp	r1, r3
   18788:	cmpeq	r0, r2
   1878c:	bne	18810 <_start@@Base+0x3a6c>
   18790:	add	r5, r5, #16
   18794:	mov	r1, r4
   18798:	mov	r0, r5
   1879c:	mov	r9, #0
   187a0:	bl	14e98 <_start@@Base+0xf4>
   187a4:	bic	r3, r1, #255	; 0xff
   187a8:	str	r9, [sp, #88]	; 0x58
   187ac:	str	r3, [sp, #92]	; 0x5c
   187b0:	add	r3, pc, #488	; 0x1e8
   187b4:	ldrd	r2, [r3]
   187b8:	ldrd	r0, [sp, #88]	; 0x58
   187bc:	cmp	r1, r3
   187c0:	cmpeq	r0, r2
   187c4:	bne	18980 <_start@@Base+0x3bdc>
   187c8:	mov	r1, r5
   187cc:	mov	r3, #3
   187d0:	mov	r2, r4
   187d4:	mov	r0, r8
   187d8:	bl	18228 <_start@@Base+0x3484>
   187dc:	cmp	r5, r0
   187e0:	mov	r1, r0
   187e4:	beq	18980 <_start@@Base+0x3bdc>
   187e8:	ldr	r3, [pc, #464]	; 189c0 <_start@@Base+0x3c1c>
   187ec:	str	r3, [sp, #12]
   187f0:	ldr	r3, [pc, #460]	; 189c4 <_start@@Base+0x3c20>
   187f4:	str	r3, [sp, #8]
   187f8:	ldr	r3, [sp, #108]	; 0x6c
   187fc:	str	r3, [sp, #4]
   18800:	mov	r3, #1
   18804:	str	r3, [sp]
   18808:	mov	r3, r9
   1880c:	b	1843c <_start@@Base+0x3698>
   18810:	lsr	r3, r0, #16
   18814:	str	r1, [sp, #44]	; 0x2c
   18818:	lsl	r3, r3, #16
   1881c:	str	r3, [sp, #40]	; 0x28
   18820:	add	r3, pc, #384	; 0x180
   18824:	ldrd	r2, [r3]
   18828:	ldrd	r0, [sp, #40]	; 0x28
   1882c:	cmp	r1, r3
   18830:	cmpeq	r0, r2
   18834:	bne	18878 <_start@@Base+0x3ad4>
   18838:	mov	r1, r9
   1883c:	mov	r3, #6
   18840:	mov	r2, r4
   18844:	mov	r0, r8
   18848:	bl	18228 <_start@@Base+0x3484>
   1884c:	cmp	r9, r0
   18850:	mov	r1, r0
   18854:	beq	18878 <_start@@Base+0x3ad4>
   18858:	ldr	r3, [pc, #352]	; 189c0 <_start@@Base+0x3c1c>
   1885c:	str	r3, [sp, #8]
   18860:	ldr	r3, [sp, #108]	; 0x6c
   18864:	str	r3, [sp, #4]
   18868:	mov	r3, #1
   1886c:	str	r3, [sp]
   18870:	mov	r3, #0
   18874:	b	184a8 <_start@@Base+0x3704>
   18878:	mov	r2, r4
   1887c:	mov	r1, r9
   18880:	mov	r0, r8
   18884:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   18888:	b	18668 <_start@@Base+0x38c4>
   1888c:	add	r3, pc, #284	; 0x11c
   18890:	ldrd	r2, [r3]
   18894:	cmp	r1, r3
   18898:	cmpeq	r0, r2
   1889c:	bne	18980 <_start@@Base+0x3bdc>
   188a0:	add	r5, r5, #8
   188a4:	mov	r1, r4
   188a8:	mov	r0, r5
   188ac:	bl	14e98 <_start@@Base+0xf4>
   188b0:	lsr	r3, r0, #16
   188b4:	str	r1, [sp, #52]	; 0x34
   188b8:	lsl	r3, r3, #16
   188bc:	str	r3, [sp, #48]	; 0x30
   188c0:	add	r3, pc, #240	; 0xf0
   188c4:	ldrd	r2, [r3]
   188c8:	ldrd	r6, [sp, #48]	; 0x30
   188cc:	cmp	r7, r3
   188d0:	cmpeq	r6, r2
   188d4:	bne	18920 <_start@@Base+0x3b7c>
   188d8:	mov	r1, r5
   188dc:	mov	r3, #6
   188e0:	mov	r2, r4
   188e4:	mov	r0, r8
   188e8:	bl	18228 <_start@@Base+0x3484>
   188ec:	cmp	r5, r0
   188f0:	mov	r1, r0
   188f4:	beq	18980 <_start@@Base+0x3bdc>
   188f8:	ldr	r3, [pc, #192]	; 189c0 <_start@@Base+0x3c1c>
   188fc:	str	r3, [sp, #12]
   18900:	ldr	r3, [pc, #192]	; 189c8 <_start@@Base+0x3c24>
   18904:	str	r3, [sp, #8]
   18908:	ldr	r3, [sp, #108]	; 0x6c
   1890c:	str	r3, [sp, #4]
   18910:	mov	r3, #5
   18914:	str	r3, [sp]
   18918:	mov	r3, #2
   1891c:	b	1843c <_start@@Base+0x3698>
   18920:	mov	r3, #0
   18924:	str	r3, [sp, #96]	; 0x60
   18928:	and	r3, r1, #-16777216	; 0xff000000
   1892c:	str	r3, [sp, #100]	; 0x64
   18930:	ldrd	r2, [sp, #96]	; 0x60
   18934:	cmp	r3, #1795162112	; 0x6b000000
   18938:	cmpeq	r2, #0
   1893c:	bne	18980 <_start@@Base+0x3bdc>
   18940:	mov	r1, r5
   18944:	mov	r3, #1
   18948:	mov	r2, r4
   1894c:	mov	r0, r8
   18950:	bl	18228 <_start@@Base+0x3484>
   18954:	cmp	r5, r0
   18958:	mov	r1, r0
   1895c:	beq	18980 <_start@@Base+0x3bdc>
   18960:	ldr	r3, [pc, #88]	; 189c0 <_start@@Base+0x3c1c>
   18964:	str	r3, [sp, #8]
   18968:	ldr	r3, [sp, #108]	; 0x6c
   1896c:	str	r3, [sp, #4]
   18970:	mov	r3, #5
   18974:	str	r3, [sp]
   18978:	mov	r3, #2
   1897c:	b	184a8 <_start@@Base+0x3704>
   18980:	mov	r2, r4
   18984:	mov	r1, r5
   18988:	b	18880 <_start@@Base+0x3adc>
   1898c:	nop	{0}
   18990:	svcpl	0x00636861
   18994:			; <UNDEFINED> instruction: 0x6d61696e
   18998:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1899c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   189a0:	andeq	r0, r0, r0
   189a4:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   189a8:	ldrbvs	r0, [r2, #-0]!
   189ac:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   189b0:	svcpl	0x006b6963
   189b4:	cmnvc	r9, #1694498816	; 0x65000000
   189b8:	rsbvc	r0, r5, r0
   189bc:	blvs	17f5ba8 <__bss_end__@@Base+0x17b17e4>
   189c0:	muleq	r1, r4, r6
   189c4:	andeq	r4, r4, r8, lsr #1
   189c8:	strheq	r4, [r4], -r8
   189cc:	cmp	r1, r2
   189d0:	push	{r4, r5, r6, lr}
   189d4:	mov	ip, r2
   189d8:	mov	r6, r0
   189dc:	beq	189ec <_start@@Base+0x3c48>
   189e0:	ldrb	r4, [r1]
   189e4:	cmp	r4, #91	; 0x5b
   189e8:	beq	18a08 <_start@@Base+0x3c64>
   189ec:	mov	r2, #0
   189f0:	mov	r0, r6
   189f4:	pop	{r4, r5, r6, lr}
   189f8:	str	r2, [r3]
   189fc:	mov	r3, #22
   18a00:	mov	r2, ip
   18a04:	b	24960 <flatcc_json_parser_set_error@@Base>
   18a08:	add	r1, r1, #1
   18a0c:	mov	r4, r2
   18a10:	mov	r5, r3
   18a14:	bl	169a0 <_start@@Base+0x1bfc>
   18a18:	cmp	r4, r0
   18a1c:	beq	18a48 <_start@@Base+0x3ca4>
   18a20:	ldrb	r3, [r0]
   18a24:	cmp	r3, #93	; 0x5d
   18a28:	bne	18a48 <_start@@Base+0x3ca4>
   18a2c:	mov	r3, #0
   18a30:	mov	r2, r4
   18a34:	add	r1, r0, #1
   18a38:	mov	r0, r6
   18a3c:	str	r3, [r5]
   18a40:	pop	{r4, r5, r6, lr}
   18a44:	b	169a0 <_start@@Base+0x1bfc>
   18a48:	mov	r3, #1
   18a4c:	str	r3, [r5]
   18a50:	pop	{r4, r5, r6, pc}
   18a54:	push	{r4, r5, r6, r7, lr}
   18a58:	mov	r6, #0
   18a5c:	sub	sp, sp, #28
   18a60:	mov	r7, #0
   18a64:	mov	r5, #0
   18a68:	cmp	r1, r2
   18a6c:	moveq	r0, r1
   18a70:	strd	r6, [r3]
   18a74:	str	r5, [sp, #12]
   18a78:	strd	r6, [sp, #16]
   18a7c:	beq	18ad0 <_start@@Base+0x3d2c>
   18a80:	mov	r6, r3
   18a84:	add	r3, sp, #16
   18a88:	mov	r7, r1
   18a8c:	mov	r4, r0
   18a90:	str	r3, [sp]
   18a94:	add	r3, sp, #12
   18a98:	mov	r5, r2
   18a9c:	bl	25518 <flatcc_json_parser_integer@@Base>
   18aa0:	cmp	r7, r0
   18aa4:	beq	18ad0 <_start@@Base+0x3d2c>
   18aa8:	ldr	r3, [sp, #12]
   18aac:	cmp	r3, #0
   18ab0:	ldrdeq	r2, [sp, #16]
   18ab4:	strdeq	r2, [r6]
   18ab8:	beq	18ad0 <_start@@Base+0x3d2c>
   18abc:	mov	r1, r0
   18ac0:	mov	r3, #8
   18ac4:	mov	r2, r5
   18ac8:	mov	r0, r4
   18acc:	bl	24960 <flatcc_json_parser_set_error@@Base>
   18ad0:	add	sp, sp, #28
   18ad4:	pop	{r4, r5, r6, r7, pc}
   18ad8:	mov	r0, #0
   18adc:	bx	lr
   18ae0:	bx	lr
   18ae4:	push	{r4, r5, r6, r7, r8, r9, lr}
   18ae8:	mov	lr, #0
   18aec:	sub	sp, sp, #28
   18af0:	mov	r6, #0
   18af4:	mov	r7, #0
   18af8:	cmp	r1, r2
   18afc:	moveq	r0, r1
   18b00:	str	lr, [r3]
   18b04:	str	lr, [sp, #12]
   18b08:	strd	r6, [sp, #16]
   18b0c:	beq	18b78 <_start@@Base+0x3dd4>
   18b10:	mov	r6, r3
   18b14:	add	r3, sp, #16
   18b18:	mov	r7, r1
   18b1c:	mov	r5, r0
   18b20:	str	r3, [sp]
   18b24:	add	r3, sp, #12
   18b28:	mov	r4, r2
   18b2c:	bl	25518 <flatcc_json_parser_integer@@Base>
   18b30:	cmp	r7, r0
   18b34:	beq	18b78 <_start@@Base+0x3dd4>
   18b38:	ldr	r3, [sp, #12]
   18b3c:	cmp	r3, #0
   18b40:	movne	r3, #8
   18b44:	bne	18b68 <_start@@Base+0x3dc4>
   18b48:	ldrd	r2, [sp, #16]
   18b4c:	mov	r9, #0
   18b50:	mvn	r8, #0
   18b54:	cmp	r3, r9
   18b58:	cmpeq	r2, r8
   18b5c:	strls	r2, [r6]
   18b60:	bls	18b78 <_start@@Base+0x3dd4>
   18b64:	mov	r3, #7
   18b68:	mov	r1, r0
   18b6c:	mov	r2, r4
   18b70:	mov	r0, r5
   18b74:	bl	24960 <flatcc_json_parser_set_error@@Base>
   18b78:	add	sp, sp, #28
   18b7c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18b80:	push	{r4, r5, r6, r7, r8, r9, lr}
   18b84:	mov	lr, #0
   18b88:	sub	sp, sp, #28
   18b8c:	mov	r6, #0
   18b90:	mov	r7, #0
   18b94:	cmp	r1, r2
   18b98:	moveq	r0, r1
   18b9c:	strh	lr, [r3]
   18ba0:	str	lr, [sp, #12]
   18ba4:	strd	r6, [sp, #16]
   18ba8:	beq	18c14 <_start@@Base+0x3e70>
   18bac:	mov	r6, r3
   18bb0:	add	r3, sp, #16
   18bb4:	mov	r7, r1
   18bb8:	mov	r5, r0
   18bbc:	str	r3, [sp]
   18bc0:	add	r3, sp, #12
   18bc4:	mov	r4, r2
   18bc8:	bl	25518 <flatcc_json_parser_integer@@Base>
   18bcc:	cmp	r7, r0
   18bd0:	beq	18c14 <_start@@Base+0x3e70>
   18bd4:	ldr	r3, [sp, #12]
   18bd8:	cmp	r3, #0
   18bdc:	movne	r3, #8
   18be0:	bne	18c04 <_start@@Base+0x3e60>
   18be4:	ldrd	r2, [sp, #16]
   18be8:	mov	r9, #0
   18bec:	movw	r8, #65535	; 0xffff
   18bf0:	cmp	r3, r9
   18bf4:	cmpeq	r2, r8
   18bf8:	strhls	r2, [r6]
   18bfc:	bls	18c14 <_start@@Base+0x3e70>
   18c00:	mov	r3, #7
   18c04:	mov	r1, r0
   18c08:	mov	r2, r4
   18c0c:	mov	r0, r5
   18c10:	bl	24960 <flatcc_json_parser_set_error@@Base>
   18c14:	add	sp, sp, #28
   18c18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18c1c:	push	{r4, r5, r6, r7, lr}
   18c20:	mov	lr, #0
   18c24:	sub	sp, sp, #28
   18c28:	mov	r6, #0
   18c2c:	mov	r7, #0
   18c30:	cmp	r1, r2
   18c34:	moveq	r0, r1
   18c38:	strb	lr, [r3]
   18c3c:	str	lr, [sp, #12]
   18c40:	strd	r6, [sp, #16]
   18c44:	beq	18ca8 <_start@@Base+0x3f04>
   18c48:	mov	r6, r3
   18c4c:	add	r3, sp, #16
   18c50:	mov	r7, r1
   18c54:	mov	r5, r0
   18c58:	str	r3, [sp]
   18c5c:	add	r3, sp, #12
   18c60:	mov	r4, r2
   18c64:	bl	25518 <flatcc_json_parser_integer@@Base>
   18c68:	cmp	r7, r0
   18c6c:	beq	18ca8 <_start@@Base+0x3f04>
   18c70:	ldr	r3, [sp, #12]
   18c74:	cmp	r3, #0
   18c78:	movne	r3, #8
   18c7c:	bne	18c98 <_start@@Base+0x3ef4>
   18c80:	ldrd	r2, [sp, #16]
   18c84:	cmp	r3, #0
   18c88:	cmpeq	r2, #255	; 0xff
   18c8c:	strbls	r2, [r6]
   18c90:	bls	18ca8 <_start@@Base+0x3f04>
   18c94:	mov	r3, #7
   18c98:	mov	r1, r0
   18c9c:	mov	r2, r4
   18ca0:	mov	r0, r5
   18ca4:	bl	24960 <flatcc_json_parser_set_error@@Base>
   18ca8:	add	sp, sp, #28
   18cac:	pop	{r4, r5, r6, r7, pc}
   18cb0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   18cb4:	sub	r7, r2, r1
   18cb8:	mov	r8, r0
   18cbc:	cmp	r7, #3
   18cc0:	mov	r4, r1
   18cc4:	mov	r6, r2
   18cc8:	mov	r5, r3
   18ccc:	ble	18d1c <_start@@Base+0x3f78>
   18cd0:	mov	r2, #4
   18cd4:	ldr	r1, [pc, #108]	; 18d48 <_start@@Base+0x3fa4>
   18cd8:	mov	r0, r4
   18cdc:	bl	14554 <memcmp@plt>
   18ce0:	cmp	r0, #0
   18ce4:	moveq	r3, #1
   18ce8:	addeq	r0, r4, #4
   18cec:	strbeq	r3, [r5]
   18cf0:	beq	18d40 <_start@@Base+0x3f9c>
   18cf4:	cmp	r7, #4
   18cf8:	beq	18d1c <_start@@Base+0x3f78>
   18cfc:	mov	r2, #5
   18d00:	ldr	r1, [pc, #68]	; 18d4c <_start@@Base+0x3fa8>
   18d04:	mov	r0, r4
   18d08:	bl	14554 <memcmp@plt>
   18d0c:	cmp	r0, #0
   18d10:	strbeq	r0, [r5]
   18d14:	addeq	r0, r4, #5
   18d18:	beq	18d40 <_start@@Base+0x3f9c>
   18d1c:	add	r3, sp, #7
   18d20:	mov	r2, r6
   18d24:	mov	r1, r4
   18d28:	mov	r0, r8
   18d2c:	bl	18c1c <_start@@Base+0x3e78>
   18d30:	ldrb	r3, [sp, #7]
   18d34:	adds	r3, r3, #0
   18d38:	movne	r3, #1
   18d3c:	strb	r3, [r5]
   18d40:	add	sp, sp, #8
   18d44:	pop	{r4, r5, r6, r7, r8, pc}
   18d48:	ldrdeq	lr, [r2], -r6
   18d4c:	ldrdeq	lr, [r2], -fp
   18d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d54:	sub	sp, sp, #36	; 0x24
   18d58:	mov	r6, #0
   18d5c:	mov	r5, r2
   18d60:	mov	r8, r0
   18d64:	ldr	r7, [sp, #72]	; 0x48
   18d68:	str	r3, [sp, #12]
   18d6c:	str	r6, [r7]
   18d70:	str	r6, [r7, #4]
   18d74:	bl	17508 <_start@@Base+0x2764>
   18d78:	cmp	r5, r0
   18d7c:	mov	r4, r0
   18d80:	beq	18e54 <_start@@Base+0x40b0>
   18d84:	mov	fp, r6
   18d88:	ldr	r9, [sp, #12]
   18d8c:	mov	sl, r4
   18d90:	add	r3, sp, #20
   18d94:	mov	r1, r4
   18d98:	mov	r2, r5
   18d9c:	mov	r0, r8
   18da0:	str	r3, [sp, #4]
   18da4:	add	r3, sp, #24
   18da8:	str	r3, [sp]
   18dac:	add	r3, sp, #16
   18db0:	ldr	ip, [r9]
   18db4:	blx	ip
   18db8:	cmp	r5, r0
   18dbc:	mov	r4, r0
   18dc0:	beq	18e54 <_start@@Base+0x40b0>
   18dc4:	cmp	sl, r0
   18dc8:	bne	18e00 <_start@@Base+0x405c>
   18dcc:	ldr	r3, [r9, #4]!
   18dd0:	mov	sl, r0
   18dd4:	cmp	r3, #0
   18dd8:	bne	18d90 <_start@@Base+0x3fec>
   18ddc:	mov	r1, r0
   18de0:	mov	r3, #23
   18de4:	mov	r2, r5
   18de8:	mov	r0, r8
   18dec:	bl	24960 <flatcc_json_parser_set_error@@Base>
   18df0:	mov	r4, r0
   18df4:	b	18e54 <_start@@Base+0x40b0>
   18df8:	mov	r4, r5
   18dfc:	b	18e54 <_start@@Base+0x40b0>
   18e00:	ldr	r3, [sp, #16]
   18e04:	cmp	r3, #0
   18e08:	ldreq	r6, [sp, #24]
   18e0c:	ldreq	fp, [sp, #28]
   18e10:	beq	18e30 <_start@@Base+0x408c>
   18e14:	mov	r3, #8
   18e18:	mov	r2, r5
   18e1c:	mov	r1, r4
   18e20:	mov	r0, r8
   18e24:	bl	24960 <flatcc_json_parser_set_error@@Base>
   18e28:	cmp	r5, r0
   18e2c:	beq	18df8 <_start@@Base+0x4054>
   18e30:	ldr	r3, [r7]
   18e34:	ldr	r2, [r7, #4]
   18e38:	adds	r3, r3, r6
   18e3c:	str	r3, [r7]
   18e40:	adc	r2, r2, fp
   18e44:	ldr	r3, [sp, #20]
   18e48:	str	r2, [r7, #4]
   18e4c:	cmp	r3, #0
   18e50:	bne	18d88 <_start@@Base+0x3fe4>
   18e54:	mov	r0, r4
   18e58:	add	sp, sp, #36	; 0x24
   18e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e60:	push	{r4, r5, r6, r7, r8, lr}
   18e64:	mov	r4, #0
   18e68:	sub	sp, sp, #24
   18e6c:	mov	r5, #0
   18e70:	cmp	r1, r2
   18e74:	moveq	r0, r1
   18e78:	str	r4, [r3]
   18e7c:	str	r4, [sp, #12]
   18e80:	strd	r4, [sp, #16]
   18e84:	beq	18ee4 <_start@@Base+0x4140>
   18e88:	mov	r6, r3
   18e8c:	add	r3, sp, #16
   18e90:	mov	r4, r1
   18e94:	mov	r8, r0
   18e98:	str	r3, [sp]
   18e9c:	add	r3, sp, #12
   18ea0:	mov	r7, r2
   18ea4:	bl	25518 <flatcc_json_parser_integer@@Base>
   18ea8:	cmp	r4, r0
   18eac:	beq	18ee4 <_start@@Base+0x4140>
   18eb0:	ldr	r3, [sp, #12]
   18eb4:	ldrd	r4, [sp, #16]
   18eb8:	cmp	r3, #0
   18ebc:	beq	18eec <_start@@Base+0x4148>
   18ec0:	cmp	r5, #0
   18ec4:	cmpeq	r4, #-2147483648	; 0x80000000
   18ec8:	movhi	r3, #8
   18ecc:	rsbls	r4, r4, #0
   18ed0:	bls	18f04 <_start@@Base+0x4160>
   18ed4:	mov	r1, r0
   18ed8:	mov	r2, r7
   18edc:	mov	r0, r8
   18ee0:	bl	24960 <flatcc_json_parser_set_error@@Base>
   18ee4:	add	sp, sp, #24
   18ee8:	pop	{r4, r5, r6, r7, r8, pc}
   18eec:	mov	r3, #0
   18ef0:	mvn	r2, #-2147483648	; 0x80000000
   18ef4:	cmp	r5, r3
   18ef8:	cmpeq	r4, r2
   18efc:	movhi	r3, #7
   18f00:	bhi	18ed4 <_start@@Base+0x4130>
   18f04:	str	r4, [r6]
   18f08:	b	18ee4 <_start@@Base+0x4140>
   18f0c:	push	{r4, r5, r6, r7, r8, lr}
   18f10:	mov	r4, #0
   18f14:	sub	sp, sp, #24
   18f18:	mov	r5, #0
   18f1c:	cmp	r1, r2
   18f20:	moveq	r0, r1
   18f24:	strh	r4, [r3]
   18f28:	str	r4, [sp, #12]
   18f2c:	strd	r4, [sp, #16]
   18f30:	beq	18f90 <_start@@Base+0x41ec>
   18f34:	mov	r6, r3
   18f38:	add	r3, sp, #16
   18f3c:	mov	r4, r1
   18f40:	mov	r8, r0
   18f44:	str	r3, [sp]
   18f48:	add	r3, sp, #12
   18f4c:	mov	r7, r2
   18f50:	bl	25518 <flatcc_json_parser_integer@@Base>
   18f54:	cmp	r4, r0
   18f58:	beq	18f90 <_start@@Base+0x41ec>
   18f5c:	ldr	r3, [sp, #12]
   18f60:	ldrd	r4, [sp, #16]
   18f64:	cmp	r3, #0
   18f68:	beq	18f98 <_start@@Base+0x41f4>
   18f6c:	cmp	r5, #0
   18f70:	cmpeq	r4, #32768	; 0x8000
   18f74:	movhi	r3, #8
   18f78:	rsbls	r4, r4, #0
   18f7c:	bls	18fb0 <_start@@Base+0x420c>
   18f80:	mov	r1, r0
   18f84:	mov	r2, r7
   18f88:	mov	r0, r8
   18f8c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   18f90:	add	sp, sp, #24
   18f94:	pop	{r4, r5, r6, r7, r8, pc}
   18f98:	mov	r3, #0
   18f9c:	movw	r2, #32767	; 0x7fff
   18fa0:	cmp	r5, r3
   18fa4:	cmpeq	r4, r2
   18fa8:	movhi	r3, #7
   18fac:	bhi	18f80 <_start@@Base+0x41dc>
   18fb0:	strh	r4, [r6]
   18fb4:	b	18f90 <_start@@Base+0x41ec>
   18fb8:	push	{r4, r5, r6, r7, r8, lr}
   18fbc:	mov	lr, #0
   18fc0:	sub	sp, sp, #24
   18fc4:	mov	r4, #0
   18fc8:	mov	r5, #0
   18fcc:	cmp	r1, r2
   18fd0:	moveq	r0, r1
   18fd4:	strb	lr, [r3]
   18fd8:	str	lr, [sp, #12]
   18fdc:	strd	r4, [sp, #16]
   18fe0:	beq	19040 <_start@@Base+0x429c>
   18fe4:	mov	r6, r3
   18fe8:	add	r3, sp, #16
   18fec:	mov	r4, r1
   18ff0:	mov	r8, r0
   18ff4:	str	r3, [sp]
   18ff8:	add	r3, sp, #12
   18ffc:	mov	r7, r2
   19000:	bl	25518 <flatcc_json_parser_integer@@Base>
   19004:	cmp	r4, r0
   19008:	beq	19040 <_start@@Base+0x429c>
   1900c:	ldr	r3, [sp, #12]
   19010:	ldrd	r4, [sp, #16]
   19014:	cmp	r3, #0
   19018:	beq	19048 <_start@@Base+0x42a4>
   1901c:	cmp	r5, #0
   19020:	cmpeq	r4, #128	; 0x80
   19024:	movhi	r3, #8
   19028:	rsbls	r4, r4, #0
   1902c:	bls	19058 <_start@@Base+0x42b4>
   19030:	mov	r1, r0
   19034:	mov	r2, r7
   19038:	mov	r0, r8
   1903c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19040:	add	sp, sp, #24
   19044:	pop	{r4, r5, r6, r7, r8, pc}
   19048:	cmp	r5, #0
   1904c:	cmpeq	r4, #127	; 0x7f
   19050:	movhi	r3, #7
   19054:	bhi	19030 <_start@@Base+0x428c>
   19058:	strb	r4, [r6]
   1905c:	b	19040 <_start@@Base+0x429c>
   19060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19064:	sub	sp, sp, #28
   19068:	mov	r6, #0
   1906c:	mov	r5, r2
   19070:	mov	r7, r0
   19074:	mov	sl, r3
   19078:	ldr	fp, [sp, #64]	; 0x40
   1907c:	strb	r6, [fp]
   19080:	bl	17508 <_start@@Base+0x2764>
   19084:	mov	r4, r0
   19088:	cmp	r5, r0
   1908c:	beq	19120 <_start@@Base+0x437c>
   19090:	mov	r8, sl
   19094:	mov	r9, r4
   19098:	add	r3, sp, #12
   1909c:	mov	r1, r4
   190a0:	mov	r2, r5
   190a4:	mov	r0, r7
   190a8:	str	r3, [sp, #4]
   190ac:	add	r3, sp, #16
   190b0:	str	r3, [sp]
   190b4:	add	r3, sp, #8
   190b8:	ldr	ip, [r8]
   190bc:	blx	ip
   190c0:	cmp	r5, r0
   190c4:	mov	r4, r0
   190c8:	beq	19120 <_start@@Base+0x437c>
   190cc:	cmp	r9, r0
   190d0:	bne	1912c <_start@@Base+0x4388>
   190d4:	ldr	r3, [r8, #4]!
   190d8:	mov	r9, r0
   190dc:	cmp	r3, #0
   190e0:	bne	19098 <_start@@Base+0x42f4>
   190e4:	mov	r1, r0
   190e8:	mov	r3, #23
   190ec:	mov	r2, r5
   190f0:	mov	r0, r7
   190f4:	bl	24960 <flatcc_json_parser_set_error@@Base>
   190f8:	mov	r4, r0
   190fc:	b	19120 <_start@@Base+0x437c>
   19100:	ldrd	r2, [sp, #16]
   19104:	cmp	r3, #0
   19108:	cmpeq	r2, #255	; 0xff
   1910c:	uxtbls	r6, r2
   19110:	bls	19154 <_start@@Base+0x43b0>
   19114:	mov	r3, #7
   19118:	b	1913c <_start@@Base+0x4398>
   1911c:	mov	r4, r5
   19120:	mov	r0, r4
   19124:	add	sp, sp, #28
   19128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1912c:	ldr	r3, [sp, #8]
   19130:	cmp	r3, #0
   19134:	beq	19100 <_start@@Base+0x435c>
   19138:	mov	r3, #8
   1913c:	mov	r2, r5
   19140:	mov	r1, r4
   19144:	mov	r0, r7
   19148:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1914c:	cmp	r5, r0
   19150:	beq	1911c <_start@@Base+0x4378>
   19154:	ldrb	r3, [fp]
   19158:	add	r3, r6, r3
   1915c:	strb	r3, [fp]
   19160:	ldr	r3, [sp, #12]
   19164:	cmp	r3, #0
   19168:	b	1908c <_start@@Base+0x42e8>
   1916c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19170:	sub	sp, sp, #28
   19174:	mov	r6, #0
   19178:	mov	r5, r2
   1917c:	mov	r7, r0
   19180:	mov	fp, r3
   19184:	ldr	r8, [sp, #64]	; 0x40
   19188:	str	r6, [r8]
   1918c:	bl	17508 <_start@@Base+0x2764>
   19190:	mov	r4, r0
   19194:	cmp	r5, r0
   19198:	beq	19234 <_start@@Base+0x4490>
   1919c:	mov	r9, fp
   191a0:	mov	sl, r4
   191a4:	add	r3, sp, #12
   191a8:	mov	r1, r4
   191ac:	mov	r2, r5
   191b0:	mov	r0, r7
   191b4:	str	r3, [sp, #4]
   191b8:	add	r3, sp, #16
   191bc:	str	r3, [sp]
   191c0:	add	r3, sp, #8
   191c4:	ldr	ip, [r9]
   191c8:	blx	ip
   191cc:	cmp	r5, r0
   191d0:	mov	r4, r0
   191d4:	beq	19234 <_start@@Base+0x4490>
   191d8:	cmp	sl, r0
   191dc:	bne	19240 <_start@@Base+0x449c>
   191e0:	ldr	r3, [r9, #4]!
   191e4:	mov	sl, r0
   191e8:	cmp	r3, #0
   191ec:	bne	191a4 <_start@@Base+0x4400>
   191f0:	mov	r1, r0
   191f4:	mov	r3, #23
   191f8:	mov	r2, r5
   191fc:	mov	r0, r7
   19200:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19204:	mov	r4, r0
   19208:	b	19234 <_start@@Base+0x4490>
   1920c:	ldrd	r2, [sp, #16]
   19210:	mov	r1, #0
   19214:	mvn	r0, #0
   19218:	cmp	r3, r1
   1921c:	cmpeq	r2, r0
   19220:	movls	r6, r2
   19224:	bls	19268 <_start@@Base+0x44c4>
   19228:	mov	r3, #7
   1922c:	b	19250 <_start@@Base+0x44ac>
   19230:	mov	r4, r5
   19234:	mov	r0, r4
   19238:	add	sp, sp, #28
   1923c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19240:	ldr	r3, [sp, #8]
   19244:	cmp	r3, #0
   19248:	beq	1920c <_start@@Base+0x4468>
   1924c:	mov	r3, #8
   19250:	mov	r2, r5
   19254:	mov	r1, r4
   19258:	mov	r0, r7
   1925c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19260:	cmp	r5, r0
   19264:	beq	19230 <_start@@Base+0x448c>
   19268:	ldr	r3, [r8]
   1926c:	add	r3, r3, r6
   19270:	str	r3, [r8]
   19274:	ldr	r3, [sp, #12]
   19278:	cmp	r3, #0
   1927c:	b	19198 <_start@@Base+0x43f4>
   19280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19284:	sub	sp, sp, #28
   19288:	mov	fp, r3
   1928c:	mov	r6, #0
   19290:	mov	r5, r2
   19294:	mov	r7, r0
   19298:	ldr	r3, [sp, #64]	; 0x40
   1929c:	strh	r6, [r3]
   192a0:	bl	17508 <_start@@Base+0x2764>
   192a4:	mov	r4, r0
   192a8:	cmp	r5, r0
   192ac:	beq	19348 <_start@@Base+0x45a4>
   192b0:	mov	r8, fp
   192b4:	mov	r9, r4
   192b8:	add	sl, sp, #16
   192bc:	add	r3, sp, #12
   192c0:	mov	r1, r4
   192c4:	str	sl, [sp]
   192c8:	mov	r2, r5
   192cc:	mov	r0, r7
   192d0:	str	r3, [sp, #4]
   192d4:	add	r3, sp, #8
   192d8:	ldr	ip, [r8]
   192dc:	blx	ip
   192e0:	cmp	r5, r0
   192e4:	mov	r4, r0
   192e8:	beq	19348 <_start@@Base+0x45a4>
   192ec:	cmp	r9, r0
   192f0:	bne	19354 <_start@@Base+0x45b0>
   192f4:	ldr	r3, [r8, #4]!
   192f8:	mov	r9, r0
   192fc:	cmp	r3, #0
   19300:	bne	192bc <_start@@Base+0x4518>
   19304:	mov	r1, r0
   19308:	mov	r3, #23
   1930c:	mov	r2, r5
   19310:	mov	r0, r7
   19314:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19318:	mov	r4, r0
   1931c:	b	19348 <_start@@Base+0x45a4>
   19320:	ldrd	r2, [sp, #16]
   19324:	mov	r1, #0
   19328:	movw	r0, #65535	; 0xffff
   1932c:	cmp	r3, r1
   19330:	cmpeq	r2, r0
   19334:	uxthls	r6, r2
   19338:	bls	1937c <_start@@Base+0x45d8>
   1933c:	mov	r3, #7
   19340:	b	19364 <_start@@Base+0x45c0>
   19344:	mov	r4, r5
   19348:	mov	r0, r4
   1934c:	add	sp, sp, #28
   19350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19354:	ldr	r3, [sp, #8]
   19358:	cmp	r3, #0
   1935c:	beq	19320 <_start@@Base+0x457c>
   19360:	mov	r3, #8
   19364:	mov	r2, r5
   19368:	mov	r1, r4
   1936c:	mov	r0, r7
   19370:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19374:	cmp	r5, r0
   19378:	beq	19344 <_start@@Base+0x45a0>
   1937c:	ldr	r3, [sp, #64]	; 0x40
   19380:	ldr	r2, [sp, #64]	; 0x40
   19384:	ldrh	r3, [r3]
   19388:	add	r3, r6, r3
   1938c:	strh	r3, [r2]
   19390:	ldr	r3, [sp, #12]
   19394:	cmp	r3, #0
   19398:	b	192ac <_start@@Base+0x4508>
   1939c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193a0:	sub	sp, sp, #28
   193a4:	mov	r6, #0
   193a8:	mov	r5, r2
   193ac:	mov	r7, r0
   193b0:	mov	fp, r3
   193b4:	ldr	r8, [sp, #64]	; 0x40
   193b8:	str	r6, [r8]
   193bc:	bl	17508 <_start@@Base+0x2764>
   193c0:	mov	r4, r0
   193c4:	cmp	r5, r0
   193c8:	beq	19484 <_start@@Base+0x46e0>
   193cc:	mov	r9, fp
   193d0:	mov	sl, r4
   193d4:	add	r3, sp, #12
   193d8:	mov	r1, r4
   193dc:	mov	r2, r5
   193e0:	mov	r0, r7
   193e4:	str	r3, [sp, #4]
   193e8:	add	r3, sp, #16
   193ec:	str	r3, [sp]
   193f0:	add	r3, sp, #8
   193f4:	ldr	ip, [r9]
   193f8:	blx	ip
   193fc:	cmp	r5, r0
   19400:	mov	r4, r0
   19404:	beq	19484 <_start@@Base+0x46e0>
   19408:	cmp	sl, r0
   1940c:	bne	19490 <_start@@Base+0x46ec>
   19410:	ldr	r3, [r9, #4]!
   19414:	mov	sl, r0
   19418:	cmp	r3, #0
   1941c:	bne	193d4 <_start@@Base+0x4630>
   19420:	mov	r1, r0
   19424:	mov	r3, #23
   19428:	mov	r2, r5
   1942c:	mov	r0, r7
   19430:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19434:	mov	r4, r0
   19438:	b	19484 <_start@@Base+0x46e0>
   1943c:	cmp	r3, #0
   19440:	cmpeq	r2, #-2147483648	; 0x80000000
   19444:	movhi	r3, #8
   19448:	rsbls	r6, r2, #0
   1944c:	bls	19468 <_start@@Base+0x46c4>
   19450:	mov	r2, r5
   19454:	mov	r1, r4
   19458:	mov	r0, r7
   1945c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19460:	cmp	r5, r0
   19464:	beq	19480 <_start@@Base+0x46dc>
   19468:	ldr	r3, [r8]
   1946c:	add	r3, r3, r6
   19470:	str	r3, [r8]
   19474:	ldr	r3, [sp, #12]
   19478:	cmp	r3, #0
   1947c:	b	193c8 <_start@@Base+0x4624>
   19480:	mov	r4, r5
   19484:	mov	r0, r4
   19488:	add	sp, sp, #28
   1948c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19490:	ldr	r1, [sp, #8]
   19494:	ldrd	r2, [sp, #16]
   19498:	cmp	r1, #0
   1949c:	bne	1943c <_start@@Base+0x4698>
   194a0:	mov	r1, #0
   194a4:	mvn	r0, #-2147483648	; 0x80000000
   194a8:	cmp	r3, r1
   194ac:	cmpeq	r2, r0
   194b0:	movls	r6, r2
   194b4:	bls	19468 <_start@@Base+0x46c4>
   194b8:	mov	r3, #7
   194bc:	b	19450 <_start@@Base+0x46ac>
   194c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194c4:	mov	r8, r3
   194c8:	mov	r3, #0
   194cc:	mov	r4, r2
   194d0:	mov	r2, #4
   194d4:	sub	sp, sp, #28
   194d8:	mov	r5, r0
   194dc:	mov	r6, r1
   194e0:	mov	r1, r2
   194e4:	ldr	r0, [r0]
   194e8:	str	r3, [r8]
   194ec:	bl	20df8 <flatcc_builder_start_struct@@Base>
   194f0:	subs	r9, r0, #0
   194f4:	beq	19624 <_start@@Base+0x4880>
   194f8:	ldr	sl, [pc, #392]	; 19688 <_start@@Base+0x48e4>
   194fc:	mov	r1, r6
   19500:	add	r3, sp, #16
   19504:	mov	r2, r4
   19508:	mov	r0, r5
   1950c:	bl	180d4 <_start@@Base+0x3330>
   19510:	mov	r6, r0
   19514:	ldr	r3, [sp, #16]
   19518:	cmp	r3, #0
   1951c:	beq	19608 <_start@@Base+0x4864>
   19520:	mov	r2, r4
   19524:	mov	r1, r6
   19528:	mov	r0, r5
   1952c:	bl	174dc <_start@@Base+0x2738>
   19530:	mov	r1, r4
   19534:	mov	r6, r0
   19538:	bl	14e98 <_start@@Base+0xf4>
   1953c:	add	r3, pc, #316	; 0x13c
   19540:	ldrd	r2, [r3]
   19544:	cmp	r1, r3
   19548:	cmpeq	r0, r2
   1954c:	bne	1966c <_start@@Base+0x48c8>
   19550:	add	r6, r6, #8
   19554:	mov	r1, r4
   19558:	mov	r0, r6
   1955c:	mov	fp, #0
   19560:	bl	14e98 <_start@@Base+0xf4>
   19564:	and	r3, r1, sl
   19568:	str	fp, [sp, #8]
   1956c:	mov	r0, #0
   19570:	ldr	r1, [pc, #276]	; 1968c <_start@@Base+0x48e8>
   19574:	str	r3, [sp, #12]
   19578:	ldrd	r2, [sp, #8]
   1957c:	cmp	r3, r1
   19580:	cmpeq	r2, r0
   19584:	bne	1966c <_start@@Base+0x48c8>
   19588:	mov	r3, #2
   1958c:	mov	r2, r4
   19590:	mov	r1, r6
   19594:	mov	r0, r5
   19598:	bl	18228 <_start@@Base+0x3484>
   1959c:	cmp	r6, r0
   195a0:	mov	r7, r0
   195a4:	beq	1966c <_start@@Base+0x48c8>
   195a8:	add	r6, sp, #20
   195ac:	mov	r1, r0
   195b0:	str	fp, [sp, #20]
   195b4:	mov	r3, r6
   195b8:	mov	r2, r4
   195bc:	mov	r0, r5
   195c0:	bl	18e60 <_start@@Base+0x40bc>
   195c4:	cmp	r7, r0
   195c8:	bne	19648 <_start@@Base+0x48a4>
   195cc:	ldr	r3, [pc, #188]	; 19690 <_start@@Base+0x48ec>
   195d0:	mov	r2, r4
   195d4:	mov	r1, r7
   195d8:	mov	r0, r5
   195dc:	str	r6, [sp]
   195e0:	bl	1939c <_start@@Base+0x45f8>
   195e4:	cmp	r4, r0
   195e8:	cmpne	r7, r0
   195ec:	bne	19648 <_start@@Base+0x48a4>
   195f0:	mov	r1, r0
   195f4:	mov	r3, #33	; 0x21
   195f8:	mov	r2, r4
   195fc:	mov	r0, r5
   19600:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19604:	mov	r6, r0
   19608:	cmp	r4, r6
   1960c:	beq	19624 <_start@@Base+0x4880>
   19610:	ldr	r0, [r5]
   19614:	bl	20e48 <flatcc_builder_end_struct@@Base>
   19618:	cmp	r0, #0
   1961c:	str	r0, [r8]
   19620:	bne	1963c <_start@@Base+0x4898>
   19624:	mov	r1, r6
   19628:	mov	r3, #33	; 0x21
   1962c:	mov	r2, r4
   19630:	mov	r0, r5
   19634:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19638:	mov	r6, r0
   1963c:	mov	r0, r6
   19640:	add	sp, sp, #28
   19644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19648:	ldr	r3, [sp, #20]
   1964c:	str	r3, [r9]
   19650:	mov	r1, r0
   19654:	add	r3, sp, #16
   19658:	mov	r2, r4
   1965c:	mov	r0, r5
   19660:	bl	16a90 <_start@@Base+0x1cec>
   19664:	mov	r6, r0
   19668:	b	19514 <_start@@Base+0x4770>
   1966c:	mov	r2, r4
   19670:	mov	r1, r6
   19674:	mov	r0, r5
   19678:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1967c:	b	19650 <_start@@Base+0x48ac>
   19680:	cmpvc	pc, #1342177286	; 0x50000006
   19684:	rsbvs	r6, pc, #428	; 0x1ac
   19688:			; <UNDEFINED> instruction: 0xffff0000
   1968c:	cmnvs	r4, r0
   19690:	andeq	r4, r4, r8, asr #1
   19694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19698:	sub	sp, sp, #28
   1969c:	mov	ip, #0
   196a0:	cmp	r3, #9
   196a4:	mov	r4, r0
   196a8:	mov	r6, r1
   196ac:	mov	r5, r2
   196b0:	ldr	r7, [sp, #64]	; 0x40
   196b4:	str	ip, [r7]
   196b8:	beq	19aa0 <_start@@Base+0x4cfc>
   196bc:	bhi	196ec <_start@@Base+0x4948>
   196c0:	cmp	r3, #2
   196c4:	beq	19724 <_start@@Base+0x4980>
   196c8:	cmp	r3, #8
   196cc:	beq	1992c <_start@@Base+0x4b88>
   196d0:	cmp	r3, ip
   196d4:	bne	19700 <_start@@Base+0x495c>
   196d8:	bl	15e90 <_start@@Base+0x10ec>
   196dc:	mov	r6, r0
   196e0:	mov	r0, r6
   196e4:	add	sp, sp, #28
   196e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196ec:	cmp	r3, #11
   196f0:	beq	19ab8 <_start@@Base+0x4d14>
   196f4:	bcc	19aa0 <_start@@Base+0x4cfc>
   196f8:	cmp	r3, #255	; 0xff
   196fc:	beq	19ab8 <_start@@Base+0x4d14>
   19700:	ldr	r3, [r4, #8]
   19704:	tst	r3, #1
   19708:	moveq	r3, #15
   1970c:	beq	197b0 <_start@@Base+0x4a0c>
   19710:	mov	r2, r5
   19714:	mov	r1, r6
   19718:	mov	r0, r4
   1971c:	bl	25674 <flatcc_json_parser_generic_json@@Base>
   19720:	b	196dc <_start@@Base+0x4938>
   19724:	mov	r1, #1
   19728:	ldr	r0, [r0]
   1972c:	bl	21480 <flatcc_builder_start_table@@Base>
   19730:	cmp	r0, #0
   19734:	bne	1977c <_start@@Base+0x49d8>
   19738:	add	r3, sp, #16
   1973c:	mov	r2, r5
   19740:	mov	r1, r6
   19744:	mov	r0, r4
   19748:	bl	180d4 <_start@@Base+0x3330>
   1974c:	ldr	r3, [sp, #16]
   19750:	mov	r6, r0
   19754:	cmp	r3, #0
   19758:	bne	197c4 <_start@@Base+0x4a20>
   1975c:	ldr	r3, [r4, #20]
   19760:	cmp	r3, #0
   19764:	bne	1977c <_start@@Base+0x49d8>
   19768:	ldr	r0, [r4]
   1976c:	bl	21aa8 <flatcc_builder_end_table@@Base>
   19770:	cmp	r0, #0
   19774:	str	r0, [r7]
   19778:	bne	19794 <_start@@Base+0x49f0>
   1977c:	mov	r3, #33	; 0x21
   19780:	mov	r2, r5
   19784:	mov	r1, r6
   19788:	mov	r0, r4
   1978c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19790:	mov	r6, r0
   19794:	ldr	r3, [r4, #20]
   19798:	cmp	r3, #0
   1979c:	bne	196e0 <_start@@Base+0x493c>
   197a0:	ldr	r3, [r7]
   197a4:	cmp	r3, #0
   197a8:	bne	196e0 <_start@@Base+0x493c>
   197ac:	mov	r3, #33	; 0x21
   197b0:	mov	r2, r5
   197b4:	mov	r1, r6
   197b8:	mov	r0, r4
   197bc:	bl	24960 <flatcc_json_parser_set_error@@Base>
   197c0:	b	196dc <_start@@Base+0x4938>
   197c4:	mov	r2, r5
   197c8:	mov	r1, r6
   197cc:	mov	r0, r4
   197d0:	bl	174dc <_start@@Base+0x2738>
   197d4:	mov	r1, r5
   197d8:	mov	r6, r0
   197dc:	bl	14e98 <_start@@Base+0xf4>
   197e0:	add	r3, pc, #744	; 0x2e8
   197e4:	ldrd	r2, [r3]
   197e8:	cmp	r1, r3
   197ec:	cmpeq	r0, r2
   197f0:	bne	19920 <_start@@Base+0x4b7c>
   197f4:	add	fp, pc, #732	; 0x2dc
   197f8:	ldrd	sl, [fp]
   197fc:	add	r3, r6, #8
   19800:	mov	r1, r5
   19804:	mov	r0, r3
   19808:	bl	14e98 <_start@@Base+0xf4>
   1980c:	cmp	r1, fp
   19810:	cmpeq	r0, sl
   19814:	bne	19908 <_start@@Base+0x4b64>
   19818:	add	r6, r6, #16
   1981c:	mov	r1, r5
   19820:	mov	r0, r6
   19824:	mov	fp, #0
   19828:	bl	14e98 <_start@@Base+0xf4>
   1982c:	add	r3, pc, #684	; 0x2ac
   19830:	ldrd	r2, [r3]
   19834:	bic	r9, r1, #255	; 0xff
   19838:	cmp	r9, r3
   1983c:	cmpeq	fp, r2
   19840:	bne	19920 <_start@@Base+0x4b7c>
   19844:	mov	r3, #3
   19848:	mov	r2, r5
   1984c:	mov	r1, r6
   19850:	mov	r0, r4
   19854:	bl	18228 <_start@@Base+0x3484>
   19858:	cmp	r6, r0
   1985c:	mov	sl, r0
   19860:	beq	19920 <_start@@Base+0x4b7c>
   19864:	str	fp, [sp, #20]
   19868:	add	fp, sp, #20
   1986c:	mov	r1, r0
   19870:	mov	r2, r5
   19874:	mov	r0, r4
   19878:	mov	r3, fp
   1987c:	bl	18e60 <_start@@Base+0x40bc>
   19880:	cmp	sl, r0
   19884:	mov	r6, r0
   19888:	bne	198b4 <_start@@Base+0x4b10>
   1988c:	mov	r1, r0
   19890:	ldr	r3, [pc, #608]	; 19af8 <_start@@Base+0x4d54>
   19894:	mov	r2, r5
   19898:	mov	r0, r4
   1989c:	str	fp, [sp]
   198a0:	bl	1939c <_start@@Base+0x45f8>
   198a4:	cmp	r5, r0
   198a8:	cmpne	r6, r0
   198ac:	mov	r6, r0
   198b0:	beq	1977c <_start@@Base+0x49d8>
   198b4:	ldr	r3, [sp, #20]
   198b8:	cmp	r3, #0
   198bc:	bne	198cc <_start@@Base+0x4b28>
   198c0:	ldr	r3, [r4, #8]
   198c4:	tst	r3, #2
   198c8:	beq	198f0 <_start@@Base+0x4b4c>
   198cc:	mov	r3, #4
   198d0:	mov	r1, #0
   198d4:	ldr	r0, [r4]
   198d8:	mov	r2, r3
   198dc:	bl	22404 <flatcc_builder_table_add@@Base>
   198e0:	cmp	r0, #0
   198e4:	beq	1977c <_start@@Base+0x49d8>
   198e8:	ldr	r3, [sp, #20]
   198ec:	str	r3, [r0]
   198f0:	add	r3, sp, #16
   198f4:	mov	r2, r5
   198f8:	mov	r1, r6
   198fc:	mov	r0, r4
   19900:	bl	16a90 <_start@@Base+0x1cec>
   19904:	b	1974c <_start@@Base+0x49a8>
   19908:	mov	r2, r5
   1990c:	mov	r1, r3
   19910:	mov	r0, r4
   19914:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   19918:	mov	r6, r0
   1991c:	b	198f0 <_start@@Base+0x4b4c>
   19920:	mov	r2, r5
   19924:	mov	r1, r6
   19928:	b	19910 <_start@@Base+0x4b6c>
   1992c:	mov	r2, #2
   19930:	ldr	r0, [r0]
   19934:	mov	r1, r2
   19938:	bl	20df8 <flatcc_builder_start_struct@@Base>
   1993c:	subs	r9, r0, #0
   19940:	beq	1977c <_start@@Base+0x49d8>
   19944:	ldr	sl, [pc, #432]	; 19afc <_start@@Base+0x4d58>
   19948:	mov	r1, r6
   1994c:	add	r3, sp, #20
   19950:	mov	r2, r5
   19954:	mov	r0, r4
   19958:	bl	180d4 <_start@@Base+0x3330>
   1995c:	mov	r6, r0
   19960:	ldr	r3, [sp, #20]
   19964:	cmp	r3, #0
   19968:	beq	19a54 <_start@@Base+0x4cb0>
   1996c:	mov	r2, r5
   19970:	mov	r1, r6
   19974:	mov	r0, r4
   19978:	bl	174dc <_start@@Base+0x2738>
   1997c:	mov	r1, r5
   19980:	mov	r6, r0
   19984:	bl	14e98 <_start@@Base+0xf4>
   19988:	add	r3, pc, #344	; 0x158
   1998c:	ldrd	r2, [r3]
   19990:	cmp	r1, r3
   19994:	cmpeq	r0, r2
   19998:	bne	19a8c <_start@@Base+0x4ce8>
   1999c:	add	r6, r6, #8
   199a0:	mov	r1, r5
   199a4:	mov	r0, r6
   199a8:	mov	fp, #0
   199ac:	bl	14e98 <_start@@Base+0xf4>
   199b0:	bic	r3, r1, #255	; 0xff
   199b4:	str	fp, [sp, #8]
   199b8:	add	r1, pc, #304	; 0x130
   199bc:	ldrd	r0, [r1]
   199c0:	str	r3, [sp, #12]
   199c4:	ldrd	r2, [sp, #8]
   199c8:	cmp	r3, r1
   199cc:	cmpeq	r2, r0
   199d0:	bne	19a8c <_start@@Base+0x4ce8>
   199d4:	mov	r3, #3
   199d8:	mov	r2, r5
   199dc:	mov	r1, r6
   199e0:	mov	r0, r4
   199e4:	bl	18228 <_start@@Base+0x3484>
   199e8:	cmp	r6, r0
   199ec:	mov	r8, r0
   199f0:	beq	19a8c <_start@@Base+0x4ce8>
   199f4:	add	r6, sp, #16
   199f8:	mov	r1, r0
   199fc:	strh	fp, [sp, #16]
   19a00:	mov	r3, r6
   19a04:	mov	r2, r5
   19a08:	mov	r0, r4
   19a0c:	bl	18b80 <_start@@Base+0x3ddc>
   19a10:	cmp	r8, r0
   19a14:	bne	19a68 <_start@@Base+0x4cc4>
   19a18:	mov	r3, sl
   19a1c:	mov	r2, r5
   19a20:	str	r6, [sp]
   19a24:	mov	r1, r8
   19a28:	mov	r0, r4
   19a2c:	bl	19280 <_start@@Base+0x44dc>
   19a30:	cmp	r5, r0
   19a34:	cmpne	r8, r0
   19a38:	bne	19a68 <_start@@Base+0x4cc4>
   19a3c:	mov	r1, r0
   19a40:	mov	r3, #33	; 0x21
   19a44:	mov	r2, r5
   19a48:	mov	r0, r4
   19a4c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19a50:	mov	r6, r0
   19a54:	cmp	r5, r6
   19a58:	beq	1977c <_start@@Base+0x49d8>
   19a5c:	ldr	r0, [r4]
   19a60:	bl	20e48 <flatcc_builder_end_struct@@Base>
   19a64:	b	19770 <_start@@Base+0x49cc>
   19a68:	ldrh	r3, [sp, #16]
   19a6c:	strh	r3, [r9]
   19a70:	mov	r1, r0
   19a74:	add	r3, sp, #20
   19a78:	mov	r2, r5
   19a7c:	mov	r0, r4
   19a80:	bl	16a90 <_start@@Base+0x1cec>
   19a84:	mov	r6, r0
   19a88:	b	19960 <_start@@Base+0x4bbc>
   19a8c:	mov	r2, r5
   19a90:	mov	r1, r6
   19a94:	mov	r0, r4
   19a98:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   19a9c:	b	19a70 <_start@@Base+0x4ccc>
   19aa0:	mov	r3, r7
   19aa4:	mov	r2, r5
   19aa8:	mov	r1, r6
   19aac:	mov	r0, r4
   19ab0:	bl	194c0 <_start@@Base+0x471c>
   19ab4:	b	19790 <_start@@Base+0x49ec>
   19ab8:	mov	r3, r7
   19abc:	mov	r2, r5
   19ac0:	mov	r1, r6
   19ac4:	mov	r0, r4
   19ac8:	bl	25f9c <flatcc_json_parser_build_string@@Base>
   19acc:	b	19790 <_start@@Base+0x49ec>
   19ad0:	ldrbvs	r6, [pc], #-372	; 19ad8 <_start@@Base+0x4d34>
   19ad4:	cmnvc	r7, #456	; 0x1c8
   19ad8:	svcpl	0x0064616d
   19adc:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   19ae0:	andeq	r0, r0, r0
   19ae4:	cmnvs	r7, r0, lsl #10
   19ae8:	svcpl	0x006c656e
   19aec:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   19af0:	andeq	r0, r0, r0
   19af4:	ldrbvs	r6, [r4, -r0, lsl #16]!
   19af8:	ldrdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   19afc:	andeq	r4, r4, r0, ror #1
   19b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b04:	sub	sp, sp, #28
   19b08:	mov	fp, r3
   19b0c:	mov	r6, #0
   19b10:	mov	r5, r2
   19b14:	mov	r7, r0
   19b18:	ldr	r3, [sp, #64]	; 0x40
   19b1c:	strh	r6, [r3]
   19b20:	bl	17508 <_start@@Base+0x2764>
   19b24:	mov	r4, r0
   19b28:	cmp	r5, r0
   19b2c:	beq	19bf4 <_start@@Base+0x4e50>
   19b30:	mov	r8, fp
   19b34:	mov	r9, r4
   19b38:	add	sl, sp, #16
   19b3c:	add	r3, sp, #12
   19b40:	mov	r1, r4
   19b44:	str	sl, [sp]
   19b48:	mov	r2, r5
   19b4c:	mov	r0, r7
   19b50:	str	r3, [sp, #4]
   19b54:	add	r3, sp, #8
   19b58:	ldr	ip, [r8]
   19b5c:	blx	ip
   19b60:	cmp	r5, r0
   19b64:	mov	r4, r0
   19b68:	beq	19bf4 <_start@@Base+0x4e50>
   19b6c:	cmp	r9, r0
   19b70:	bne	19c00 <_start@@Base+0x4e5c>
   19b74:	ldr	r3, [r8, #4]!
   19b78:	mov	r9, r0
   19b7c:	cmp	r3, #0
   19b80:	bne	19b3c <_start@@Base+0x4d98>
   19b84:	mov	r1, r0
   19b88:	mov	r3, #23
   19b8c:	mov	r2, r5
   19b90:	mov	r0, r7
   19b94:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19b98:	mov	r4, r0
   19b9c:	b	19bf4 <_start@@Base+0x4e50>
   19ba0:	cmp	r3, #0
   19ba4:	cmpeq	r2, #32768	; 0x8000
   19ba8:	rsbls	r6, r2, #0
   19bac:	movhi	r3, #8
   19bb0:	sxthls	r6, r6
   19bb4:	bls	19bd0 <_start@@Base+0x4e2c>
   19bb8:	mov	r2, r5
   19bbc:	mov	r1, r4
   19bc0:	mov	r0, r7
   19bc4:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19bc8:	cmp	r5, r0
   19bcc:	beq	19bf0 <_start@@Base+0x4e4c>
   19bd0:	ldr	r3, [sp, #64]	; 0x40
   19bd4:	ldr	r2, [sp, #64]	; 0x40
   19bd8:	ldrh	r3, [r3]
   19bdc:	add	r3, r3, r6
   19be0:	strh	r3, [r2]
   19be4:	ldr	r3, [sp, #12]
   19be8:	cmp	r3, #0
   19bec:	b	19b2c <_start@@Base+0x4d88>
   19bf0:	mov	r4, r5
   19bf4:	mov	r0, r4
   19bf8:	add	sp, sp, #28
   19bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c00:	ldr	r1, [sp, #8]
   19c04:	ldrd	r2, [sp, #16]
   19c08:	cmp	r1, #0
   19c0c:	bne	19ba0 <_start@@Base+0x4dfc>
   19c10:	mov	r1, #0
   19c14:	movw	r0, #32767	; 0x7fff
   19c18:	cmp	r3, r1
   19c1c:	cmpeq	r2, r0
   19c20:	sxthls	r6, r2
   19c24:	bls	19bd0 <_start@@Base+0x4e2c>
   19c28:	mov	r3, #7
   19c2c:	b	19bb8 <_start@@Base+0x4e14>
   19c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c34:	sub	sp, sp, #28
   19c38:	mov	r6, #0
   19c3c:	mov	r5, r2
   19c40:	mov	r7, r0
   19c44:	mov	sl, r3
   19c48:	ldr	fp, [sp, #64]	; 0x40
   19c4c:	strb	r6, [fp]
   19c50:	bl	17508 <_start@@Base+0x2764>
   19c54:	mov	r4, r0
   19c58:	cmp	r5, r0
   19c5c:	beq	19d1c <_start@@Base+0x4f78>
   19c60:	mov	r8, sl
   19c64:	mov	r9, r4
   19c68:	add	r3, sp, #12
   19c6c:	mov	r1, r4
   19c70:	mov	r2, r5
   19c74:	mov	r0, r7
   19c78:	str	r3, [sp, #4]
   19c7c:	add	r3, sp, #16
   19c80:	str	r3, [sp]
   19c84:	add	r3, sp, #8
   19c88:	ldr	ip, [r8]
   19c8c:	blx	ip
   19c90:	cmp	r5, r0
   19c94:	mov	r4, r0
   19c98:	beq	19d1c <_start@@Base+0x4f78>
   19c9c:	cmp	r9, r0
   19ca0:	bne	19d28 <_start@@Base+0x4f84>
   19ca4:	ldr	r3, [r8, #4]!
   19ca8:	mov	r9, r0
   19cac:	cmp	r3, #0
   19cb0:	bne	19c68 <_start@@Base+0x4ec4>
   19cb4:	mov	r1, r0
   19cb8:	mov	r3, #23
   19cbc:	mov	r2, r5
   19cc0:	mov	r0, r7
   19cc4:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19cc8:	mov	r4, r0
   19ccc:	b	19d1c <_start@@Base+0x4f78>
   19cd0:	cmp	r3, #0
   19cd4:	cmpeq	r2, #128	; 0x80
   19cd8:	rsbls	r6, r2, #0
   19cdc:	movhi	r3, #8
   19ce0:	sxtbls	r6, r6
   19ce4:	bls	19d00 <_start@@Base+0x4f5c>
   19ce8:	mov	r2, r5
   19cec:	mov	r1, r4
   19cf0:	mov	r0, r7
   19cf4:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19cf8:	cmp	r5, r0
   19cfc:	beq	19d18 <_start@@Base+0x4f74>
   19d00:	ldrb	r3, [fp]
   19d04:	add	r3, r3, r6
   19d08:	strb	r3, [fp]
   19d0c:	ldr	r3, [sp, #12]
   19d10:	cmp	r3, #0
   19d14:	b	19c5c <_start@@Base+0x4eb8>
   19d18:	mov	r4, r5
   19d1c:	mov	r0, r4
   19d20:	add	sp, sp, #28
   19d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d28:	ldr	r1, [sp, #8]
   19d2c:	ldrd	r2, [sp, #16]
   19d30:	cmp	r1, #0
   19d34:	bne	19cd0 <_start@@Base+0x4f2c>
   19d38:	cmp	r3, #0
   19d3c:	cmpeq	r2, #127	; 0x7f
   19d40:	sxtbls	r6, r2
   19d44:	bls	19d00 <_start@@Base+0x4f5c>
   19d48:	mov	r3, #7
   19d4c:	b	19ce8 <_start@@Base+0x4f44>
   19d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d54:	sub	sp, sp, #20
   19d58:	mov	r9, r3
   19d5c:	add	r3, sp, #12
   19d60:	mov	r6, r0
   19d64:	mov	r4, r2
   19d68:	bl	180d4 <_start@@Base+0x3330>
   19d6c:	ldr	r3, [sp, #12]
   19d70:	cmp	r3, #0
   19d74:	bne	19d80 <_start@@Base+0x4fdc>
   19d78:	add	sp, sp, #20
   19d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d80:	mov	r1, r0
   19d84:	mov	r2, r4
   19d88:	mov	r0, r6
   19d8c:	mov	r8, #0
   19d90:	bl	174dc <_start@@Base+0x2738>
   19d94:	mov	r1, r4
   19d98:	mov	r5, r0
   19d9c:	bl	14e98 <_start@@Base+0xf4>
   19da0:	and	fp, r1, #-16777216	; 0xff000000
   19da4:	cmp	fp, #1644167168	; 0x62000000
   19da8:	cmpeq	r8, #0
   19dac:	bne	19e40 <_start@@Base+0x509c>
   19db0:	mov	r3, #1
   19db4:	mov	r2, r4
   19db8:	mov	r1, r5
   19dbc:	mov	r0, r6
   19dc0:	bl	18228 <_start@@Base+0x3484>
   19dc4:	cmp	r5, r0
   19dc8:	mov	r7, r0
   19dcc:	beq	19ec8 <_start@@Base+0x5124>
   19dd0:	strb	r8, [sp, #10]
   19dd4:	add	r8, sp, #10
   19dd8:	mov	r1, r0
   19ddc:	mov	r2, r4
   19de0:	mov	r0, r6
   19de4:	mov	r3, r8
   19de8:	bl	18fb8 <_start@@Base+0x4214>
   19dec:	cmp	r7, r0
   19df0:	mov	r5, r0
   19df4:	bne	19e20 <_start@@Base+0x507c>
   19df8:	mov	r1, r0
   19dfc:	ldr	r3, [pc, #244]	; 19ef8 <_start@@Base+0x5154>
   19e00:	mov	r2, r4
   19e04:	mov	r0, r6
   19e08:	str	r8, [sp]
   19e0c:	bl	19c30 <_start@@Base+0x4e8c>
   19e10:	cmp	r4, r0
   19e14:	cmpne	r5, r0
   19e18:	beq	19ee0 <_start@@Base+0x513c>
   19e1c:	mov	r5, r0
   19e20:	ldrb	r3, [sp, #10]
   19e24:	strb	r3, [r9, #2]
   19e28:	add	r3, sp, #12
   19e2c:	mov	r2, r4
   19e30:	mov	r1, r5
   19e34:	mov	r0, r6
   19e38:	bl	16a90 <_start@@Base+0x1cec>
   19e3c:	b	19d6c <_start@@Base+0x4fc8>
   19e40:	cmp	fp, #1627389952	; 0x61000000
   19e44:	cmpeq	r8, #0
   19e48:	bne	19ec8 <_start@@Base+0x5124>
   19e4c:	mov	r3, #1
   19e50:	mov	r2, r4
   19e54:	mov	r1, r5
   19e58:	mov	r0, r6
   19e5c:	bl	18228 <_start@@Base+0x3484>
   19e60:	cmp	r5, r0
   19e64:	mov	r7, r0
   19e68:	beq	19ec8 <_start@@Base+0x5124>
   19e6c:	strh	r8, [sp, #10]
   19e70:	add	r8, sp, #10
   19e74:	mov	r1, r0
   19e78:	mov	r2, r4
   19e7c:	mov	r0, r6
   19e80:	mov	r3, r8
   19e84:	bl	18f0c <_start@@Base+0x4168>
   19e88:	cmp	r7, r0
   19e8c:	mov	r5, r0
   19e90:	bne	19ebc <_start@@Base+0x5118>
   19e94:	mov	r1, r0
   19e98:	ldr	r3, [pc, #92]	; 19efc <_start@@Base+0x5158>
   19e9c:	mov	r2, r4
   19ea0:	mov	r0, r6
   19ea4:	str	r8, [sp]
   19ea8:	bl	19b00 <_start@@Base+0x4d5c>
   19eac:	cmp	r4, r0
   19eb0:	cmpne	r5, r0
   19eb4:	beq	19ee0 <_start@@Base+0x513c>
   19eb8:	mov	r5, r0
   19ebc:	ldrh	r3, [sp, #10]
   19ec0:	strh	r3, [r9]
   19ec4:	b	19e28 <_start@@Base+0x5084>
   19ec8:	mov	r1, r5
   19ecc:	mov	r2, r4
   19ed0:	mov	r0, r6
   19ed4:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   19ed8:	mov	r5, r0
   19edc:	b	19e28 <_start@@Base+0x5084>
   19ee0:	mov	r1, r0
   19ee4:	mov	r3, #33	; 0x21
   19ee8:	mov	r2, r4
   19eec:	mov	r0, r6
   19ef0:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19ef4:	b	19d78 <_start@@Base+0x4fd4>
   19ef8:	andeq	r4, r4, ip, ror #1
   19efc:	strdeq	r4, [r4], -r8
   19f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f04:	sub	sp, sp, #36	; 0x24
   19f08:	mov	r6, #0
   19f0c:	mov	r5, r2
   19f10:	mov	r8, r0
   19f14:	ldr	r7, [sp, #72]	; 0x48
   19f18:	str	r3, [sp, #12]
   19f1c:	str	r6, [r7]
   19f20:	str	r6, [r7, #4]
   19f24:	bl	17508 <_start@@Base+0x2764>
   19f28:	cmp	r5, r0
   19f2c:	mov	r4, r0
   19f30:	beq	1a030 <_start@@Base+0x528c>
   19f34:	mov	fp, r6
   19f38:	ldr	r9, [sp, #12]
   19f3c:	mov	sl, r4
   19f40:	add	r3, sp, #20
   19f44:	mov	r1, r4
   19f48:	mov	r2, r5
   19f4c:	mov	r0, r8
   19f50:	str	r3, [sp, #4]
   19f54:	add	r3, sp, #24
   19f58:	str	r3, [sp]
   19f5c:	add	r3, sp, #16
   19f60:	ldr	ip, [r9]
   19f64:	blx	ip
   19f68:	cmp	r5, r0
   19f6c:	mov	r4, r0
   19f70:	beq	1a030 <_start@@Base+0x528c>
   19f74:	cmp	sl, r0
   19f78:	bne	19fd4 <_start@@Base+0x5230>
   19f7c:	ldr	r3, [r9, #4]!
   19f80:	mov	sl, r0
   19f84:	cmp	r3, #0
   19f88:	bne	19f40 <_start@@Base+0x519c>
   19f8c:	mov	r1, r0
   19f90:	mov	r3, #23
   19f94:	mov	r2, r5
   19f98:	mov	r0, r8
   19f9c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   19fa0:	mov	r4, r0
   19fa4:	b	1a030 <_start@@Base+0x528c>
   19fa8:	cmp	r3, #-2147483648	; 0x80000000
   19fac:	cmpeq	r2, #0
   19fb0:	movhi	r3, #8
   19fb4:	bhi	19ff4 <_start@@Base+0x5250>
   19fb8:	rsbs	r2, r2, #0
   19fbc:	rsc	r3, r3, #0
   19fc0:	mov	r6, r2
   19fc4:	mov	fp, r3
   19fc8:	b	1a00c <_start@@Base+0x5268>
   19fcc:	mov	r4, r5
   19fd0:	b	1a030 <_start@@Base+0x528c>
   19fd4:	ldr	r1, [sp, #16]
   19fd8:	ldrd	r2, [sp, #24]
   19fdc:	cmp	r1, #0
   19fe0:	bne	19fa8 <_start@@Base+0x5204>
   19fe4:	cmp	r2, #0
   19fe8:	sbcs	r1, r3, #0
   19fec:	bge	19fc0 <_start@@Base+0x521c>
   19ff0:	mov	r3, #7
   19ff4:	mov	r2, r5
   19ff8:	mov	r1, r4
   19ffc:	mov	r0, r8
   1a000:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1a004:	cmp	r5, r0
   1a008:	beq	19fcc <_start@@Base+0x5228>
   1a00c:	ldr	r3, [r7]
   1a010:	ldr	r2, [r7, #4]
   1a014:	adds	r3, r3, r6
   1a018:	str	r3, [r7]
   1a01c:	adc	r2, r2, fp
   1a020:	ldr	r3, [sp, #20]
   1a024:	str	r2, [r7, #4]
   1a028:	cmp	r3, #0
   1a02c:	bne	19f38 <_start@@Base+0x5194>
   1a030:	mov	r0, r4
   1a034:	add	sp, sp, #36	; 0x24
   1a038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a03c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a040:	sub	sp, sp, #180	; 0xb4
   1a044:	mov	r6, r2
   1a048:	mov	r5, r0
   1a04c:	mov	r4, r1
   1a050:	mov	r1, #4
   1a054:	str	r3, [sp, #52]	; 0x34
   1a058:	mov	r3, #0
   1a05c:	ldr	r2, [sp, #52]	; 0x34
   1a060:	ldr	r0, [r0]
   1a064:	str	r3, [r2]
   1a068:	bl	21480 <flatcc_builder_start_table@@Base>
   1a06c:	cmp	r0, #0
   1a070:	bne	1a0f8 <_start@@Base+0x5354>
   1a074:	add	r3, sp, #152	; 0x98
   1a078:	mov	r2, r6
   1a07c:	mov	r1, r4
   1a080:	mov	r0, r5
   1a084:	str	r3, [sp]
   1a088:	mov	r3, #1
   1a08c:	bl	260d0 <flatcc_json_parser_prepare_unions@@Base>
   1a090:	cmp	r6, r0
   1a094:	beq	1a0f8 <_start@@Base+0x5354>
   1a098:	add	r3, sp, #144	; 0x90
   1a09c:	mov	r2, r6
   1a0a0:	mov	r1, r4
   1a0a4:	mov	r0, r5
   1a0a8:	bl	180d4 <_start@@Base+0x3330>
   1a0ac:	ldr	r3, [sp, #144]	; 0x90
   1a0b0:	mov	r4, r0
   1a0b4:	cmp	r3, #0
   1a0b8:	bne	1a11c <_start@@Base+0x5378>
   1a0bc:	ldr	r3, [r5, #20]
   1a0c0:	cmp	r3, #0
   1a0c4:	bne	1a0f8 <_start@@Base+0x5354>
   1a0c8:	mov	r1, r0
   1a0cc:	mov	r2, r6
   1a0d0:	ldr	r3, [sp, #152]	; 0x98
   1a0d4:	mov	r0, r5
   1a0d8:	bl	26138 <flatcc_json_parser_finalize_unions@@Base>
   1a0dc:	mov	r4, r0
   1a0e0:	ldr	r0, [r5]
   1a0e4:	bl	21aa8 <flatcc_builder_end_table@@Base>
   1a0e8:	ldr	r3, [sp, #52]	; 0x34
   1a0ec:	cmp	r0, #0
   1a0f0:	str	r0, [r3]
   1a0f4:	bne	1a110 <_start@@Base+0x536c>
   1a0f8:	mov	r1, r4
   1a0fc:	mov	r3, #33	; 0x21
   1a100:	mov	r2, r6
   1a104:	mov	r0, r5
   1a108:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1a10c:	mov	r4, r0
   1a110:	mov	r0, r4
   1a114:	add	sp, sp, #180	; 0xb4
   1a118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a11c:	mov	r2, r6
   1a120:	mov	r1, r4
   1a124:	mov	r0, r5
   1a128:	bl	174dc <_start@@Base+0x2738>
   1a12c:	mov	r1, r6
   1a130:	mov	r7, r0
   1a134:	bl	14e98 <_start@@Base+0xf4>
   1a138:	add	r3, pc, #832	; 0x340
   1a13c:	ldrd	r2, [r3]
   1a140:	mov	r8, r0
   1a144:	mov	r9, r1
   1a148:	cmp	r1, r3
   1a14c:	cmpeq	r0, r2
   1a150:	bne	1a1e8 <_start@@Base+0x5444>
   1a154:	add	r7, r7, #8
   1a158:	mov	r1, r6
   1a15c:	mov	r0, r7
   1a160:	mov	r4, #0
   1a164:	bl	14e98 <_start@@Base+0xf4>
   1a168:	str	r4, [sp, #56]	; 0x38
   1a16c:	str	r1, [sp, #60]	; 0x3c
   1a170:	add	r3, pc, #784	; 0x310
   1a174:	ldrd	r2, [r3]
   1a178:	ldrd	r0, [sp, #56]	; 0x38
   1a17c:	cmp	r1, r3
   1a180:	cmpeq	r0, r2
   1a184:	bne	1b218 <_start@@Base+0x6474>
   1a188:	mov	r1, r7
   1a18c:	mov	r3, #4
   1a190:	mov	r2, r6
   1a194:	mov	r0, r5
   1a198:	bl	18228 <_start@@Base+0x3484>
   1a19c:	cmp	r7, r0
   1a1a0:	mov	r1, r0
   1a1a4:	beq	1b218 <_start@@Base+0x6474>
   1a1a8:	ldr	r3, [pc, #784]	; 1a4c0 <_start@@Base+0x571c>
   1a1ac:	mov	r2, r6
   1a1b0:	mov	r0, r5
   1a1b4:	str	r3, [sp, #16]
   1a1b8:	ldr	r3, [pc, #772]	; 1a4c4 <_start@@Base+0x5720>
   1a1bc:	str	r3, [sp, #12]
   1a1c0:	ldr	r3, [pc, #768]	; 1a4c8 <_start@@Base+0x5724>
   1a1c4:	str	r3, [sp, #8]
   1a1c8:	ldr	r3, [sp, #152]	; 0x98
   1a1cc:	str	r3, [sp, #4]
   1a1d0:	mov	r3, #3
   1a1d4:	str	r3, [sp]
   1a1d8:	mov	r3, r4
   1a1dc:	bl	264e8 <flatcc_json_parser_union_type_vector@@Base>
   1a1e0:	mov	r4, r0
   1a1e4:	b	1a328 <_start@@Base+0x5584>
   1a1e8:	bic	r3, r0, #255	; 0xff
   1a1ec:	str	r3, [sp, #64]	; 0x40
   1a1f0:	str	r1, [sp, #68]	; 0x44
   1a1f4:	add	r3, pc, #660	; 0x294
   1a1f8:	ldrd	r2, [r3]
   1a1fc:	ldrd	r0, [sp, #64]	; 0x40
   1a200:	cmp	r1, r3
   1a204:	cmpeq	r0, r2
   1a208:	bne	1a258 <_start@@Base+0x54b4>
   1a20c:	mov	r1, r7
   1a210:	mov	r3, #7
   1a214:	mov	r2, r6
   1a218:	mov	r0, r5
   1a21c:	bl	18228 <_start@@Base+0x3484>
   1a220:	cmp	r7, r0
   1a224:	mov	r1, r0
   1a228:	beq	1a258 <_start@@Base+0x54b4>
   1a22c:	ldr	r3, [pc, #656]	; 1a4c4 <_start@@Base+0x5720>
   1a230:	mov	r2, r6
   1a234:	mov	r0, r5
   1a238:	str	r3, [sp, #8]
   1a23c:	ldr	r3, [sp, #152]	; 0x98
   1a240:	str	r3, [sp, #4]
   1a244:	mov	r3, #3
   1a248:	str	r3, [sp]
   1a24c:	mov	r3, #0
   1a250:	bl	2641c <flatcc_json_parser_union_vector@@Base>
   1a254:	b	1a1e0 <_start@@Base+0x543c>
   1a258:	lsr	r3, r8, #16
   1a25c:	str	r9, [sp, #36]	; 0x24
   1a260:	lsl	r3, r3, #16
   1a264:	str	r3, [sp, #32]
   1a268:	add	r3, pc, #552	; 0x228
   1a26c:	ldrd	r2, [r3]
   1a270:	ldrd	r0, [sp, #32]
   1a274:	cmp	r1, r3
   1a278:	cmpeq	r0, r2
   1a27c:	bne	1b1ac <_start@@Base+0x6408>
   1a280:	mov	r3, #6
   1a284:	mov	r2, r6
   1a288:	mov	r1, r7
   1a28c:	mov	r0, r5
   1a290:	bl	18228 <_start@@Base+0x3484>
   1a294:	cmp	r7, r0
   1a298:	mov	r4, r0
   1a29c:	beq	1b198 <_start@@Base+0x63f4>
   1a2a0:	mov	r3, #0
   1a2a4:	mov	r1, #3
   1a2a8:	ldr	r0, [r5]
   1a2ac:	str	r3, [sp, #148]	; 0x94
   1a2b0:	bl	21480 <flatcc_builder_start_table@@Base>
   1a2b4:	cmp	r0, #0
   1a2b8:	bne	1a460 <_start@@Base+0x56bc>
   1a2bc:	add	r3, sp, #156	; 0x9c
   1a2c0:	mov	r2, r6
   1a2c4:	mov	r1, r4
   1a2c8:	mov	r0, r5
   1a2cc:	bl	180d4 <_start@@Base+0x3330>
   1a2d0:	ldr	r3, [sp, #156]	; 0x9c
   1a2d4:	mov	r4, r0
   1a2d8:	cmp	r3, #0
   1a2dc:	bne	1a340 <_start@@Base+0x559c>
   1a2e0:	ldr	r3, [r5, #20]
   1a2e4:	cmp	r3, #0
   1a2e8:	bne	1a460 <_start@@Base+0x56bc>
   1a2ec:	ldr	r0, [r5]
   1a2f0:	bl	21aa8 <flatcc_builder_end_table@@Base>
   1a2f4:	cmp	r0, #0
   1a2f8:	str	r0, [sp, #148]	; 0x94
   1a2fc:	beq	1a460 <_start@@Base+0x56bc>
   1a300:	ldr	r3, [sp, #148]	; 0x94
   1a304:	cmp	r3, #0
   1a308:	beq	1a0f8 <_start@@Base+0x5354>
   1a30c:	mov	r1, #0
   1a310:	ldr	r0, [r5]
   1a314:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1a318:	cmp	r0, #0
   1a31c:	beq	1a0f8 <_start@@Base+0x5354>
   1a320:	ldr	r3, [sp, #148]	; 0x94
   1a324:	str	r3, [r0]
   1a328:	add	r3, sp, #144	; 0x90
   1a32c:	mov	r2, r6
   1a330:	mov	r1, r4
   1a334:	mov	r0, r5
   1a338:	bl	16a90 <_start@@Base+0x1cec>
   1a33c:	b	1a0ac <_start@@Base+0x5308>
   1a340:	mov	r2, r6
   1a344:	mov	r1, r4
   1a348:	mov	r0, r5
   1a34c:	bl	174dc <_start@@Base+0x2738>
   1a350:	mov	r1, r6
   1a354:	mov	r7, r0
   1a358:	bl	14e98 <_start@@Base+0xf4>
   1a35c:	add	r3, pc, #316	; 0x13c
   1a360:	ldrd	r2, [r3]
   1a364:	cmp	r1, r3
   1a368:	cmpeq	r0, r2
   1a36c:	bne	1b18c <_start@@Base+0x63e8>
   1a370:	add	r9, pc, #304	; 0x130
   1a374:	ldrd	r8, [r9]
   1a378:	add	r3, r7, #8
   1a37c:	mov	r1, r6
   1a380:	mov	r0, r3
   1a384:	bl	14e98 <_start@@Base+0xf4>
   1a388:	cmp	r1, r9
   1a38c:	cmpeq	r0, r8
   1a390:	bne	1b180 <_start@@Base+0x63dc>
   1a394:	add	r7, r7, #16
   1a398:	mov	r1, r6
   1a39c:	mov	r0, r7
   1a3a0:	bl	14e98 <_start@@Base+0xf4>
   1a3a4:	lsr	r3, r0, #16
   1a3a8:	str	r1, [sp, #28]
   1a3ac:	lsl	r3, r3, #16
   1a3b0:	str	r3, [sp, #24]
   1a3b4:	add	r3, pc, #244	; 0xf4
   1a3b8:	ldrd	r2, [r3]
   1a3bc:	ldrd	r8, [sp, #24]
   1a3c0:	cmp	r9, r3
   1a3c4:	cmpeq	r8, r2
   1a3c8:	bne	1a6d8 <_start@@Base+0x5934>
   1a3cc:	mov	r3, #6
   1a3d0:	mov	r2, r6
   1a3d4:	mov	r1, r7
   1a3d8:	mov	r0, r5
   1a3dc:	bl	18228 <_start@@Base+0x3484>
   1a3e0:	cmp	r7, r0
   1a3e4:	mov	r4, r0
   1a3e8:	beq	1b168 <_start@@Base+0x63c4>
   1a3ec:	mov	r1, #2
   1a3f0:	ldr	r0, [r5]
   1a3f4:	bl	21480 <flatcc_builder_start_table@@Base>
   1a3f8:	cmp	r0, #0
   1a3fc:	bne	1a448 <_start@@Base+0x56a4>
   1a400:	add	r9, pc, #176	; 0xb0
   1a404:	ldrd	r8, [r9]
   1a408:	mov	r1, r4
   1a40c:	add	r3, sp, #164	; 0xa4
   1a410:	mov	r2, r6
   1a414:	mov	r0, r5
   1a418:	bl	180d4 <_start@@Base+0x3330>
   1a41c:	mov	r4, r0
   1a420:	ldr	r3, [sp, #164]	; 0xa4
   1a424:	cmp	r3, #0
   1a428:	bne	1a4cc <_start@@Base+0x5728>
   1a42c:	ldr	r3, [r5, #20]
   1a430:	cmp	r3, #0
   1a434:	bne	1a448 <_start@@Base+0x56a4>
   1a438:	ldr	r0, [r5]
   1a43c:	bl	21aa8 <flatcc_builder_end_table@@Base>
   1a440:	subs	r7, r0, #0
   1a444:	bne	1b224 <_start@@Base+0x6480>
   1a448:	mov	r1, r4
   1a44c:	mov	r3, #33	; 0x21
   1a450:	mov	r2, r6
   1a454:	mov	r0, r5
   1a458:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1a45c:	mov	r4, r0
   1a460:	mov	r1, r4
   1a464:	mov	r3, #33	; 0x21
   1a468:	mov	r2, r6
   1a46c:	mov	r0, r5
   1a470:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1a474:	mov	r4, r0
   1a478:	b	1a300 <_start@@Base+0x555c>
   1a47c:	nop	{0}
   1a480:	cmnvs	lr, pc, asr r9
   1a484:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1a488:	andeq	r0, r0, r0
   1a48c:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1a490:	cmnvs	lr, r0, lsl #18
   1a494:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1a498:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1a49c:	rsbsvc	r6, r2, r6, ror #10
   1a4a0:	bvs	1cf6260 <__bss_end__@@Base+0x1cb1e9c>
   1a4a4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a4a8:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1a4ac:	rsbsvc	r6, r2, r6, ror #10
   1a4b0:	ldrvs	r0, [r2, -r0]!
   1a4b4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1a4b8:	svcpl	0x00626262
   1a4bc:	cmnvs	r1, r1, ror #2
   1a4c0:	andeq	r4, r1, r4, lsl #31
   1a4c4:	andeq	lr, r1, r8, ror #17
   1a4c8:	andeq	r4, r4, r4, lsl #2
   1a4cc:	mov	r1, r4
   1a4d0:	mov	r2, r6
   1a4d4:	mov	r0, r5
   1a4d8:	bl	174dc <_start@@Base+0x2738>
   1a4dc:	mov	r1, r6
   1a4e0:	mov	r4, r0
   1a4e4:	bl	14e98 <_start@@Base+0xf4>
   1a4e8:	cmp	r1, r9
   1a4ec:	cmpeq	r0, r8
   1a4f0:	bne	1a6c0 <_start@@Base+0x591c>
   1a4f4:	add	r4, r4, #8
   1a4f8:	mov	r1, r6
   1a4fc:	add	fp, pc, #956	; 0x3bc
   1a500:	ldrd	sl, [fp]
   1a504:	mov	r0, r4
   1a508:	bl	14e98 <_start@@Base+0xf4>
   1a50c:	bic	r3, r0, #255	; 0xff
   1a510:	str	r3, [sp, #72]	; 0x48
   1a514:	str	r1, [sp, #76]	; 0x4c
   1a518:	ldrd	r2, [sp, #72]	; 0x48
   1a51c:	cmp	r3, fp
   1a520:	cmpeq	r2, sl
   1a524:	bne	1a5f8 <_start@@Base+0x5854>
   1a528:	mov	r3, #7
   1a52c:	mov	r2, r6
   1a530:	mov	r1, r4
   1a534:	mov	r0, r5
   1a538:	bl	18228 <_start@@Base+0x3484>
   1a53c:	cmp	r4, r0
   1a540:	mov	r7, r0
   1a544:	beq	1a6c0 <_start@@Base+0x591c>
   1a548:	mov	r2, #0
   1a54c:	mov	r3, #0
   1a550:	add	sl, sp, #168	; 0xa8
   1a554:	mov	r1, r0
   1a558:	mov	r0, r5
   1a55c:	strd	r2, [sp, #168]	; 0xa8
   1a560:	mov	r3, sl
   1a564:	mov	r2, r6
   1a568:	bl	17430 <_start@@Base+0x268c>
   1a56c:	cmp	r7, r0
   1a570:	mov	r4, r0
   1a574:	bne	1a5a0 <_start@@Base+0x57fc>
   1a578:	mov	r1, r0
   1a57c:	ldr	r3, [pc, #868]	; 1a8e8 <_start@@Base+0x5b44>
   1a580:	mov	r2, r6
   1a584:	mov	r0, r5
   1a588:	str	sl, [sp]
   1a58c:	bl	19f00 <_start@@Base+0x515c>
   1a590:	cmp	r6, r0
   1a594:	cmpne	r4, r0
   1a598:	mov	r4, r0
   1a59c:	beq	1a448 <_start@@Base+0x56a4>
   1a5a0:	ldrd	r2, [sp, #168]	; 0xa8
   1a5a4:	orrs	r3, r2, r3
   1a5a8:	bne	1a5b8 <_start@@Base+0x5814>
   1a5ac:	ldr	r3, [r5, #8]
   1a5b0:	tst	r3, #2
   1a5b4:	beq	1a5dc <_start@@Base+0x5838>
   1a5b8:	mov	r3, #8
   1a5bc:	mov	r1, #0
   1a5c0:	ldr	r0, [r5]
   1a5c4:	mov	r2, r3
   1a5c8:	bl	22404 <flatcc_builder_table_add@@Base>
   1a5cc:	cmp	r0, #0
   1a5d0:	beq	1a448 <_start@@Base+0x56a4>
   1a5d4:	ldrd	r2, [sp, #168]	; 0xa8
   1a5d8:	strd	r2, [r0]
   1a5dc:	mov	r1, r4
   1a5e0:	add	r3, sp, #164	; 0xa4
   1a5e4:	mov	r2, r6
   1a5e8:	mov	r0, r5
   1a5ec:	bl	16a90 <_start@@Base+0x1cec>
   1a5f0:	mov	r4, r0
   1a5f4:	b	1a420 <_start@@Base+0x567c>
   1a5f8:	add	r3, pc, #712	; 0x2c8
   1a5fc:	ldrd	r2, [r3]
   1a600:	cmp	r1, r3
   1a604:	cmpeq	r0, r2
   1a608:	bne	1a6c0 <_start@@Base+0x591c>
   1a60c:	mov	r3, #8
   1a610:	mov	r2, r6
   1a614:	mov	r1, r4
   1a618:	mov	r0, r5
   1a61c:	bl	18228 <_start@@Base+0x3484>
   1a620:	cmp	r4, r0
   1a624:	mov	r7, r0
   1a628:	beq	1a6c0 <_start@@Base+0x591c>
   1a62c:	mov	r3, #0
   1a630:	add	sl, sp, #168	; 0xa8
   1a634:	mov	r1, r0
   1a638:	mov	r2, r6
   1a63c:	mov	r0, r5
   1a640:	str	r3, [sp, #168]	; 0xa8
   1a644:	mov	r3, sl
   1a648:	bl	18ae4 <_start@@Base+0x3d40>
   1a64c:	cmp	r7, r0
   1a650:	mov	r4, r0
   1a654:	bne	1a680 <_start@@Base+0x58dc>
   1a658:	mov	r1, r0
   1a65c:	ldr	r3, [pc, #648]	; 1a8ec <_start@@Base+0x5b48>
   1a660:	mov	r2, r6
   1a664:	mov	r0, r5
   1a668:	str	sl, [sp]
   1a66c:	bl	1916c <_start@@Base+0x43c8>
   1a670:	cmp	r6, r0
   1a674:	cmpne	r4, r0
   1a678:	mov	r4, r0
   1a67c:	beq	1a448 <_start@@Base+0x56a4>
   1a680:	ldr	r3, [sp, #168]	; 0xa8
   1a684:	cmp	r3, #0
   1a688:	bne	1a698 <_start@@Base+0x58f4>
   1a68c:	ldr	r3, [r5, #8]
   1a690:	tst	r3, #2
   1a694:	beq	1a5dc <_start@@Base+0x5838>
   1a698:	mov	r3, #4
   1a69c:	mov	r1, #1
   1a6a0:	ldr	r0, [r5]
   1a6a4:	mov	r2, r3
   1a6a8:	bl	22404 <flatcc_builder_table_add@@Base>
   1a6ac:	cmp	r0, #0
   1a6b0:	beq	1a448 <_start@@Base+0x56a4>
   1a6b4:	ldr	r3, [sp, #168]	; 0xa8
   1a6b8:	str	r3, [r0]
   1a6bc:	b	1a5dc <_start@@Base+0x5838>
   1a6c0:	mov	r1, r4
   1a6c4:	mov	r2, r6
   1a6c8:	mov	r0, r5
   1a6cc:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1a6d0:	mov	r4, r0
   1a6d4:	b	1a5dc <_start@@Base+0x5838>
   1a6d8:	and	r3, r0, #-16777216	; 0xff000000
   1a6dc:	str	r3, [sp, #80]	; 0x50
   1a6e0:	str	r1, [sp, #84]	; 0x54
   1a6e4:	add	r3, pc, #484	; 0x1e4
   1a6e8:	ldrd	r2, [r3]
   1a6ec:	ldrd	r0, [sp, #80]	; 0x50
   1a6f0:	cmp	r1, r3
   1a6f4:	cmpeq	r0, r2
   1a6f8:	bne	1ae78 <_start@@Base+0x60d4>
   1a6fc:	mov	r3, #5
   1a700:	mov	r2, r6
   1a704:	mov	r1, r7
   1a708:	mov	r0, r5
   1a70c:	bl	18228 <_start@@Base+0x3484>
   1a710:	cmp	r7, r0
   1a714:	mov	r4, r0
   1a718:	beq	1ae74 <_start@@Base+0x60d0>
   1a71c:	mov	r1, #9
   1a720:	ldr	r0, [r5]
   1a724:	bl	21480 <flatcc_builder_start_table@@Base>
   1a728:	cmp	r0, #0
   1a72c:	bne	1a448 <_start@@Base+0x56a4>
   1a730:	add	r3, sp, #160	; 0xa0
   1a734:	mov	r2, r6
   1a738:	mov	r1, r4
   1a73c:	mov	r0, r5
   1a740:	bl	180d4 <_start@@Base+0x3330>
   1a744:	ldr	r3, [sp, #160]	; 0xa0
   1a748:	mov	r4, r0
   1a74c:	cmp	r3, #0
   1a750:	bne	1a7a0 <_start@@Base+0x59fc>
   1a754:	ldr	r7, [r5, #20]
   1a758:	cmp	r7, #0
   1a75c:	bne	1a448 <_start@@Base+0x56a4>
   1a760:	ldr	r0, [r5]
   1a764:	bl	21aa8 <flatcc_builder_end_table@@Base>
   1a768:	subs	r8, r0, #0
   1a76c:	beq	1a448 <_start@@Base+0x56a4>
   1a770:	mov	r1, r7
   1a774:	ldr	r0, [r5]
   1a778:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1a77c:	cmp	r0, #0
   1a780:	beq	1a460 <_start@@Base+0x56bc>
   1a784:	str	r8, [r0]
   1a788:	add	r3, sp, #156	; 0x9c
   1a78c:	mov	r2, r6
   1a790:	mov	r1, r4
   1a794:	mov	r0, r5
   1a798:	bl	16a90 <_start@@Base+0x1cec>
   1a79c:	b	1a2d0 <_start@@Base+0x552c>
   1a7a0:	mov	r2, r6
   1a7a4:	mov	r1, r4
   1a7a8:	mov	r0, r5
   1a7ac:	bl	174dc <_start@@Base+0x2738>
   1a7b0:	mov	r1, r6
   1a7b4:	mov	r4, r0
   1a7b8:	bl	14e98 <_start@@Base+0xf4>
   1a7bc:	add	r3, pc, #276	; 0x114
   1a7c0:	ldrd	r2, [r3]
   1a7c4:	cmp	r1, r3
   1a7c8:	cmpeq	r0, r2
   1a7cc:	bhi	1aabc <_start@@Base+0x5d18>
   1a7d0:	add	r3, pc, #264	; 0x108
   1a7d4:	ldrd	r2, [r3]
   1a7d8:	cmp	r1, r3
   1a7dc:	cmpeq	r0, r2
   1a7e0:	bne	1a8f8 <_start@@Base+0x5b54>
   1a7e4:	add	r4, r4, #8
   1a7e8:	mov	r1, r6
   1a7ec:	mov	r0, r4
   1a7f0:	mov	r8, #0
   1a7f4:	bl	14e98 <_start@@Base+0xf4>
   1a7f8:	and	r3, r1, #-16777216	; 0xff000000
   1a7fc:	str	r8, [sp, #88]	; 0x58
   1a800:	str	r3, [sp, #92]	; 0x5c
   1a804:	ldrd	r2, [sp, #88]	; 0x58
   1a808:	cmp	r3, #889192448	; 0x35000000
   1a80c:	cmpeq	r2, #0
   1a810:	bne	1ae50 <_start@@Base+0x60ac>
   1a814:	mov	r3, #1
   1a818:	mov	r2, r6
   1a81c:	mov	r1, r4
   1a820:	mov	r0, r5
   1a824:	bl	18228 <_start@@Base+0x3484>
   1a828:	cmp	r4, r0
   1a82c:	mov	r7, r0
   1a830:	beq	1ae50 <_start@@Base+0x60ac>
   1a834:	str	r8, [sp, #168]	; 0xa8
   1a838:	add	r8, sp, #168	; 0xa8
   1a83c:	mov	r1, r0
   1a840:	mov	r2, r6
   1a844:	mov	r0, r5
   1a848:	mov	r3, r8
   1a84c:	bl	18ae4 <_start@@Base+0x3d40>
   1a850:	cmp	r7, r0
   1a854:	mov	r4, r0
   1a858:	bne	1a884 <_start@@Base+0x5ae0>
   1a85c:	mov	r1, r0
   1a860:	ldr	r3, [pc, #136]	; 1a8f0 <_start@@Base+0x5b4c>
   1a864:	mov	r2, r6
   1a868:	mov	r0, r5
   1a86c:	str	r8, [sp]
   1a870:	bl	1916c <_start@@Base+0x43c8>
   1a874:	cmp	r6, r0
   1a878:	cmpne	r4, r0
   1a87c:	mov	r4, r0
   1a880:	beq	1a448 <_start@@Base+0x56a4>
   1a884:	ldr	r3, [sp, #168]	; 0xa8
   1a888:	cmp	r3, #0
   1a88c:	bne	1a89c <_start@@Base+0x5af8>
   1a890:	ldr	r3, [r5, #8]
   1a894:	tst	r3, #2
   1a898:	beq	1aa44 <_start@@Base+0x5ca0>
   1a89c:	mov	r3, #4
   1a8a0:	mov	r1, #1
   1a8a4:	mov	r2, r3
   1a8a8:	ldr	r0, [r5]
   1a8ac:	bl	22404 <flatcc_builder_table_add@@Base>
   1a8b0:	cmp	r0, #0
   1a8b4:	beq	1a448 <_start@@Base+0x56a4>
   1a8b8:	ldr	r3, [sp, #168]	; 0xa8
   1a8bc:	b	1a974 <_start@@Base+0x5bd0>
   1a8c0:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1a8c4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1a8c8:	cmnvs	r2, pc, asr r4
   1a8cc:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1a8d0:	strvs	r0, [r0, -r0]
   1a8d4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1a8d8:			; <UNDEFINED> instruction: 0xffffffff
   1a8dc:	cmnvs	r3, #-2013265919	; 0x88000001
   1a8e0:	teqcc	r2, r4, lsr r3
   1a8e4:	cmnvs	r1, r1, ror #2
   1a8e8:	andeq	r4, r4, r4, lsl r1
   1a8ec:	andeq	r4, r4, r0, lsr #2
   1a8f0:	andeq	r4, r4, ip, lsr #2
   1a8f4:	cmnvs	r1, r1, ror #2
   1a8f8:	mov	r7, #0
   1a8fc:	ldr	r3, [pc, #-16]	; 1a8f4 <_start@@Base+0x5b50>
   1a900:	mov	r2, #0
   1a904:	str	r7, [sp, #40]	; 0x28
   1a908:	str	r1, [sp, #44]	; 0x2c
   1a90c:	ldrd	r8, [sp, #40]	; 0x28
   1a910:	cmp	r9, r3
   1a914:	cmpeq	r8, r2
   1a918:	bne	1a97c <_start@@Base+0x5bd8>
   1a91c:	mov	r1, r4
   1a920:	mov	r3, #4
   1a924:	mov	r2, r6
   1a928:	mov	r0, r5
   1a92c:	bl	18228 <_start@@Base+0x3484>
   1a930:	cmp	r4, r0
   1a934:	mov	r1, r0
   1a938:	beq	1ae6c <_start@@Base+0x60c8>
   1a93c:	add	r3, sp, #164	; 0xa4
   1a940:	mov	r2, r6
   1a944:	mov	r0, r5
   1a948:	bl	25f9c <flatcc_json_parser_build_string@@Base>
   1a94c:	ldr	r3, [sp, #164]	; 0xa4
   1a950:	mov	r4, r0
   1a954:	cmp	r3, r7
   1a958:	beq	1a448 <_start@@Base+0x56a4>
   1a95c:	mov	r1, r7
   1a960:	ldr	r0, [r5]
   1a964:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1a968:	cmp	r0, #0
   1a96c:	beq	1a448 <_start@@Base+0x56a4>
   1a970:	ldr	r3, [sp, #164]	; 0xa4
   1a974:	str	r3, [r0]
   1a978:	b	1aa44 <_start@@Base+0x5ca0>
   1a97c:	add	r3, pc, #980	; 0x3d4
   1a980:	ldrd	r2, [r3]
   1a984:	cmp	r1, r3
   1a988:	cmpeq	r0, r2
   1a98c:	bne	1aa5c <_start@@Base+0x5cb8>
   1a990:	mov	r3, #8
   1a994:	mov	r2, r6
   1a998:	mov	r1, r4
   1a99c:	mov	r0, r5
   1a9a0:	bl	18228 <_start@@Base+0x3484>
   1a9a4:	cmp	r4, r0
   1a9a8:	mov	r7, r0
   1a9ac:	beq	1ae50 <_start@@Base+0x60ac>
   1a9b0:	mov	r2, #0
   1a9b4:	mov	r3, #0
   1a9b8:	add	r8, sp, #168	; 0xa8
   1a9bc:	mov	r1, r0
   1a9c0:	mov	r0, r5
   1a9c4:	strd	r2, [sp, #168]	; 0xa8
   1a9c8:	mov	r3, r8
   1a9cc:	mov	r2, r6
   1a9d0:	bl	17430 <_start@@Base+0x268c>
   1a9d4:	cmp	r7, r0
   1a9d8:	mov	r4, r0
   1a9dc:	bne	1aa08 <_start@@Base+0x5c64>
   1a9e0:	mov	r1, r0
   1a9e4:	ldr	r3, [pc, #900]	; 1ad70 <_start@@Base+0x5fcc>
   1a9e8:	mov	r2, r6
   1a9ec:	mov	r0, r5
   1a9f0:	str	r8, [sp]
   1a9f4:	bl	19f00 <_start@@Base+0x515c>
   1a9f8:	cmp	r6, r0
   1a9fc:	cmpne	r4, r0
   1aa00:	mov	r4, r0
   1aa04:	beq	1a448 <_start@@Base+0x56a4>
   1aa08:	ldrd	r2, [sp, #168]	; 0xa8
   1aa0c:	orrs	r3, r2, r3
   1aa10:	bne	1aa20 <_start@@Base+0x5c7c>
   1aa14:	ldr	r3, [r5, #8]
   1aa18:	tst	r3, #2
   1aa1c:	beq	1aa44 <_start@@Base+0x5ca0>
   1aa20:	mov	r3, #8
   1aa24:	mov	r1, #3
   1aa28:	mov	r2, r3
   1aa2c:	ldr	r0, [r5]
   1aa30:	bl	22404 <flatcc_builder_table_add@@Base>
   1aa34:	cmp	r0, #0
   1aa38:	beq	1a448 <_start@@Base+0x56a4>
   1aa3c:	ldrd	r2, [sp, #168]	; 0xa8
   1aa40:	strd	r2, [r0]
   1aa44:	add	r3, sp, #160	; 0xa0
   1aa48:	mov	r2, r6
   1aa4c:	mov	r1, r4
   1aa50:	mov	r0, r5
   1aa54:	bl	16a90 <_start@@Base+0x1cec>
   1aa58:	b	1a744 <_start@@Base+0x59a0>
   1aa5c:	ldr	r3, [pc, #784]	; 1ad74 <_start@@Base+0x5fd0>
   1aa60:	mov	r2, #0
   1aa64:	ldrd	r0, [sp, #40]	; 0x28
   1aa68:	cmp	r1, r3
   1aa6c:	cmpeq	r0, r2
   1aa70:	bne	1ae68 <_start@@Base+0x60c4>
   1aa74:	mov	r1, r4
   1aa78:	mov	r3, #4
   1aa7c:	mov	r2, r6
   1aa80:	mov	r0, r5
   1aa84:	bl	18228 <_start@@Base+0x3484>
   1aa88:	cmp	r4, r0
   1aa8c:	mov	r1, r0
   1aa90:	beq	1ae50 <_start@@Base+0x60ac>
   1aa94:	add	r3, sp, #164	; 0xa4
   1aa98:	mov	r2, r6
   1aa9c:	mov	r0, r5
   1aaa0:	bl	25f9c <flatcc_json_parser_build_string@@Base>
   1aaa4:	ldr	r3, [sp, #164]	; 0xa4
   1aaa8:	mov	r4, r0
   1aaac:	cmp	r3, #0
   1aab0:	beq	1a448 <_start@@Base+0x56a4>
   1aab4:	mov	r1, #2
   1aab8:	b	1a960 <_start@@Base+0x5bbc>
   1aabc:	add	r3, pc, #668	; 0x29c
   1aac0:	ldrd	r2, [r3]
   1aac4:	cmp	r1, r3
   1aac8:	cmpeq	r0, r2
   1aacc:	bne	1ac38 <_start@@Base+0x5e94>
   1aad0:	mov	r3, #8
   1aad4:	mov	r2, r6
   1aad8:	mov	r1, r4
   1aadc:	mov	r0, r5
   1aae0:	bl	18228 <_start@@Base+0x3484>
   1aae4:	cmp	r4, r0
   1aae8:	mov	r7, r0
   1aaec:	beq	1ab70 <_start@@Base+0x5dcc>
   1aaf0:	mov	r2, #0
   1aaf4:	mov	r3, #0
   1aaf8:	add	r8, sp, #168	; 0xa8
   1aafc:	mov	r1, r0
   1ab00:	mov	r0, r5
   1ab04:	strd	r2, [sp, #168]	; 0xa8
   1ab08:	mov	r3, r8
   1ab0c:	mov	r2, r6
   1ab10:	bl	17430 <_start@@Base+0x268c>
   1ab14:	cmp	r7, r0
   1ab18:	mov	r4, r0
   1ab1c:	bne	1ab48 <_start@@Base+0x5da4>
   1ab20:	mov	r1, r0
   1ab24:	ldr	r3, [pc, #588]	; 1ad78 <_start@@Base+0x5fd4>
   1ab28:	mov	r2, r6
   1ab2c:	mov	r0, r5
   1ab30:	str	r8, [sp]
   1ab34:	bl	19f00 <_start@@Base+0x515c>
   1ab38:	cmp	r6, r0
   1ab3c:	cmpne	r4, r0
   1ab40:	mov	r4, r0
   1ab44:	beq	1a448 <_start@@Base+0x56a4>
   1ab48:	ldrd	r2, [sp, #168]	; 0xa8
   1ab4c:	orrs	r3, r2, r3
   1ab50:	bne	1ab60 <_start@@Base+0x5dbc>
   1ab54:	ldr	r3, [r5, #8]
   1ab58:	tst	r3, #2
   1ab5c:	beq	1aa44 <_start@@Base+0x5ca0>
   1ab60:	mov	r3, #8
   1ab64:	mov	r1, #5
   1ab68:	mov	r2, r3
   1ab6c:	b	1aa2c <_start@@Base+0x5c88>
   1ab70:	add	r4, r4, #8
   1ab74:	mov	r1, r6
   1ab78:	mov	r0, r4
   1ab7c:	mov	r8, #0
   1ab80:	bl	14e98 <_start@@Base+0xf4>
   1ab84:	and	r3, r1, #-16777216	; 0xff000000
   1ab88:	str	r8, [sp, #96]	; 0x60
   1ab8c:	str	r3, [sp, #100]	; 0x64
   1ab90:	ldrd	r2, [sp, #96]	; 0x60
   1ab94:	cmp	r3, #889192448	; 0x35000000
   1ab98:	cmpeq	r2, #0
   1ab9c:	bne	1ae50 <_start@@Base+0x60ac>
   1aba0:	mov	r3, #1
   1aba4:	mov	r2, r6
   1aba8:	mov	r1, r4
   1abac:	mov	r0, r5
   1abb0:	bl	18228 <_start@@Base+0x3484>
   1abb4:	cmp	r4, r0
   1abb8:	mov	r7, r0
   1abbc:	beq	1ae50 <_start@@Base+0x60ac>
   1abc0:	str	r8, [sp, #168]	; 0xa8
   1abc4:	add	r8, sp, #168	; 0xa8
   1abc8:	mov	r1, r0
   1abcc:	mov	r2, r6
   1abd0:	mov	r0, r5
   1abd4:	mov	r3, r8
   1abd8:	bl	18ae4 <_start@@Base+0x3d40>
   1abdc:	cmp	r7, r0
   1abe0:	mov	r4, r0
   1abe4:	bne	1ac10 <_start@@Base+0x5e6c>
   1abe8:	mov	r1, r0
   1abec:	ldr	r3, [pc, #392]	; 1ad7c <_start@@Base+0x5fd8>
   1abf0:	mov	r2, r6
   1abf4:	mov	r0, r5
   1abf8:	str	r8, [sp]
   1abfc:	bl	1916c <_start@@Base+0x43c8>
   1ac00:	cmp	r6, r0
   1ac04:	cmpne	r4, r0
   1ac08:	mov	r4, r0
   1ac0c:	beq	1a448 <_start@@Base+0x56a4>
   1ac10:	ldr	r3, [sp, #168]	; 0xa8
   1ac14:	cmp	r3, #0
   1ac18:	bne	1ac28 <_start@@Base+0x5e84>
   1ac1c:	ldr	r3, [r5, #8]
   1ac20:	tst	r3, #2
   1ac24:	beq	1aa44 <_start@@Base+0x5ca0>
   1ac28:	mov	r3, #4
   1ac2c:	mov	r1, #6
   1ac30:	mov	r2, r3
   1ac34:	b	1a8a8 <_start@@Base+0x5b04>
   1ac38:	mov	r8, #0
   1ac3c:	ldr	fp, [pc, #316]	; 1ad80 <_start@@Base+0x5fdc>
   1ac40:	mov	sl, #0
   1ac44:	str	r8, [sp, #104]	; 0x68
   1ac48:	str	r1, [sp, #108]	; 0x6c
   1ac4c:	ldrd	r2, [sp, #104]	; 0x68
   1ac50:	cmp	r3, fp
   1ac54:	cmpeq	r2, sl
   1ac58:	bne	1aca4 <_start@@Base+0x5f00>
   1ac5c:	mov	r1, r4
   1ac60:	mov	r3, #4
   1ac64:	mov	r2, r6
   1ac68:	mov	r0, r5
   1ac6c:	bl	18228 <_start@@Base+0x3484>
   1ac70:	cmp	r4, r0
   1ac74:	mov	r1, r0
   1ac78:	beq	1ae6c <_start@@Base+0x60c8>
   1ac7c:	add	r3, sp, #164	; 0xa4
   1ac80:	mov	r2, r6
   1ac84:	mov	r0, r5
   1ac88:	bl	25f9c <flatcc_json_parser_build_string@@Base>
   1ac8c:	ldr	r3, [sp, #164]	; 0xa4
   1ac90:	mov	r4, r0
   1ac94:	cmp	r3, r8
   1ac98:	beq	1a448 <_start@@Base+0x56a4>
   1ac9c:	mov	r1, #4
   1aca0:	b	1a960 <_start@@Base+0x5bbc>
   1aca4:	add	r3, pc, #188	; 0xbc
   1aca8:	ldrd	r2, [r3]
   1acac:	cmp	r1, r3
   1acb0:	cmpeq	r0, r2
   1acb4:	bne	1ae68 <_start@@Base+0x60c4>
   1acb8:	mov	r3, #8
   1acbc:	mov	r2, r6
   1acc0:	mov	r1, r4
   1acc4:	mov	r0, r5
   1acc8:	bl	18228 <_start@@Base+0x3484>
   1accc:	cmp	r4, r0
   1acd0:	mov	r7, r0
   1acd4:	beq	1ad8c <_start@@Base+0x5fe8>
   1acd8:	mov	r2, #0
   1acdc:	mov	r3, #0
   1ace0:	add	r8, sp, #168	; 0xa8
   1ace4:	mov	r1, r0
   1ace8:	mov	r0, r5
   1acec:	strd	r2, [sp, #168]	; 0xa8
   1acf0:	mov	r3, r8
   1acf4:	mov	r2, r6
   1acf8:	bl	17430 <_start@@Base+0x268c>
   1acfc:	cmp	r7, r0
   1ad00:	mov	r4, r0
   1ad04:	bne	1ad30 <_start@@Base+0x5f8c>
   1ad08:	mov	r1, r0
   1ad0c:	ldr	r3, [pc, #112]	; 1ad84 <_start@@Base+0x5fe0>
   1ad10:	mov	r2, r6
   1ad14:	mov	r0, r5
   1ad18:	str	r8, [sp]
   1ad1c:	bl	19f00 <_start@@Base+0x515c>
   1ad20:	cmp	r6, r0
   1ad24:	cmpne	r4, r0
   1ad28:	mov	r4, r0
   1ad2c:	beq	1a448 <_start@@Base+0x56a4>
   1ad30:	ldrd	r2, [sp, #168]	; 0xa8
   1ad34:	orrs	r3, r2, r3
   1ad38:	bne	1ad48 <_start@@Base+0x5fa4>
   1ad3c:	ldr	r3, [r5, #8]
   1ad40:	tst	r3, #2
   1ad44:	beq	1aa44 <_start@@Base+0x5ca0>
   1ad48:	mov	r3, #8
   1ad4c:	mov	r1, #7
   1ad50:	mov	r2, r3
   1ad54:	b	1aa2c <_start@@Base+0x5c88>
   1ad58:	teqcc	r2, r4, lsr r3
   1ad5c:	rsbvs	r6, r2, #536870918	; 0x20000006
   1ad60:	teqcc	r2, r4, lsr r3
   1ad64:	cmnvs	r3, #-1946157055	; 0x8c000001
   1ad68:	teqcc	r2, r4, lsr r3
   1ad6c:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1ad70:	andeq	r4, r4, r8, lsr r1
   1ad74:	rsbvs	r6, r2, #536870918	; 0x20000006
   1ad78:	andeq	r4, r4, r4, asr #2
   1ad7c:	andeq	r4, r4, r0, asr r1
   1ad80:	cmnvs	r3, #-1946157055	; 0x8c000001
   1ad84:	andeq	r4, r4, ip, asr r1
   1ad88:	andeq	r4, r4, r8, ror #2
   1ad8c:	add	r4, r4, #8
   1ad90:	mov	r1, r6
   1ad94:	mov	r0, r4
   1ad98:	bl	14e98 <_start@@Base+0xf4>
   1ad9c:	and	r3, r1, #-16777216	; 0xff000000
   1ada0:	str	r8, [sp, #112]	; 0x70
   1ada4:	str	r3, [sp, #116]	; 0x74
   1ada8:	ldrd	r2, [sp, #112]	; 0x70
   1adac:	cmp	r3, #889192448	; 0x35000000
   1adb0:	cmpeq	r2, #0
   1adb4:	bne	1ae50 <_start@@Base+0x60ac>
   1adb8:	mov	r3, #1
   1adbc:	mov	r2, r6
   1adc0:	mov	r1, r4
   1adc4:	mov	r0, r5
   1adc8:	bl	18228 <_start@@Base+0x3484>
   1adcc:	cmp	r4, r0
   1add0:	mov	r7, r0
   1add4:	beq	1ae50 <_start@@Base+0x60ac>
   1add8:	str	r8, [sp, #168]	; 0xa8
   1addc:	add	r8, sp, #168	; 0xa8
   1ade0:	mov	r1, r0
   1ade4:	mov	r2, r6
   1ade8:	mov	r0, r5
   1adec:	mov	r3, r8
   1adf0:	bl	18ae4 <_start@@Base+0x3d40>
   1adf4:	cmp	r7, r0
   1adf8:	mov	r4, r0
   1adfc:	bne	1ae28 <_start@@Base+0x6084>
   1ae00:	mov	r1, r0
   1ae04:	ldr	r3, [pc, #-132]	; 1ad88 <_start@@Base+0x5fe4>
   1ae08:	mov	r2, r6
   1ae0c:	mov	r0, r5
   1ae10:	str	r8, [sp]
   1ae14:	bl	1916c <_start@@Base+0x43c8>
   1ae18:	cmp	r6, r0
   1ae1c:	cmpne	r4, r0
   1ae20:	mov	r4, r0
   1ae24:	beq	1a448 <_start@@Base+0x56a4>
   1ae28:	ldr	r3, [sp, #168]	; 0xa8
   1ae2c:	cmp	r3, #0
   1ae30:	bne	1ae40 <_start@@Base+0x609c>
   1ae34:	ldr	r3, [r5, #8]
   1ae38:	tst	r3, #2
   1ae3c:	beq	1aa44 <_start@@Base+0x5ca0>
   1ae40:	mov	r3, #4
   1ae44:	mov	r1, #8
   1ae48:	mov	r2, r3
   1ae4c:	b	1a8a8 <_start@@Base+0x5b04>
   1ae50:	mov	r2, r6
   1ae54:	mov	r1, r4
   1ae58:	mov	r0, r5
   1ae5c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1ae60:	mov	r4, r0
   1ae64:	b	1aa44 <_start@@Base+0x5ca0>
   1ae68:	mov	r1, r4
   1ae6c:	mov	r2, r6
   1ae70:	b	1ae58 <_start@@Base+0x60b4>
   1ae74:	mov	r7, r0
   1ae78:	add	r3, pc, #960	; 0x3c0
   1ae7c:	ldrd	r2, [r3]
   1ae80:	ldrd	r0, [sp, #24]
   1ae84:	cmp	r1, r3
   1ae88:	cmpeq	r0, r2
   1ae8c:	movne	r4, r7
   1ae90:	bne	1b168 <_start@@Base+0x63c4>
   1ae94:	mov	r3, #6
   1ae98:	mov	r2, r6
   1ae9c:	mov	r1, r7
   1aea0:	mov	r0, r5
   1aea4:	bl	18228 <_start@@Base+0x3484>
   1aea8:	cmp	r7, r0
   1aeac:	mov	r4, r0
   1aeb0:	beq	1b168 <_start@@Base+0x63c4>
   1aeb4:	mov	r1, #2
   1aeb8:	ldr	r0, [r5]
   1aebc:	bl	21480 <flatcc_builder_start_table@@Base>
   1aec0:	cmp	r0, #0
   1aec4:	bne	1a448 <_start@@Base+0x56a4>
   1aec8:	ldr	sl, [pc, #928]	; 1b270 <_start@@Base+0x64cc>
   1aecc:	mov	r1, r4
   1aed0:	add	r3, sp, #164	; 0xa4
   1aed4:	mov	r2, r6
   1aed8:	mov	r0, r5
   1aedc:	add	r9, pc, #868	; 0x364
   1aee0:	ldrd	r8, [r9]
   1aee4:	bl	180d4 <_start@@Base+0x3330>
   1aee8:	mov	r4, r0
   1aeec:	ldr	r3, [sp, #164]	; 0xa4
   1aef0:	cmp	r3, #0
   1aef4:	bne	1af1c <_start@@Base+0x6178>
   1aef8:	ldr	r3, [r5, #20]
   1aefc:	cmp	r3, #0
   1af00:	bne	1a448 <_start@@Base+0x56a4>
   1af04:	ldr	r0, [r5]
   1af08:	bl	21aa8 <flatcc_builder_end_table@@Base>
   1af0c:	subs	r7, r0, #0
   1af10:	beq	1a448 <_start@@Base+0x56a4>
   1af14:	mov	r1, #2
   1af18:	b	1b228 <_start@@Base+0x6484>
   1af1c:	mov	r2, r6
   1af20:	mov	r1, r4
   1af24:	mov	r0, r5
   1af28:	bl	174dc <_start@@Base+0x2738>
   1af2c:	mov	r1, r6
   1af30:	mov	r4, r0
   1af34:	bl	14e98 <_start@@Base+0xf4>
   1af38:	add	r3, pc, #784	; 0x310
   1af3c:	ldrd	r2, [r3]
   1af40:	cmp	r1, r3
   1af44:	cmpeq	r0, r2
   1af48:	bne	1b15c <_start@@Base+0x63b8>
   1af4c:	add	r7, r4, #8
   1af50:	mov	r1, r6
   1af54:	mov	r0, r7
   1af58:	bl	14e98 <_start@@Base+0xf4>
   1af5c:	add	r3, pc, #756	; 0x2f4
   1af60:	ldrd	r2, [r3]
   1af64:	cmp	r1, r3
   1af68:	cmpeq	r0, r2
   1af6c:	bne	1b068 <_start@@Base+0x62c4>
   1af70:	add	r4, r4, #16
   1af74:	mov	r1, r6
   1af78:	mov	r0, r4
   1af7c:	bl	14e98 <_start@@Base+0xf4>
   1af80:	and	r3, r0, #-16777216	; 0xff000000
   1af84:	str	r3, [sp, #120]	; 0x78
   1af88:	str	r1, [sp, #124]	; 0x7c
   1af8c:	ldrd	r2, [sp, #120]	; 0x78
   1af90:	cmp	r3, r9
   1af94:	cmpeq	r2, r8
   1af98:	bne	1b15c <_start@@Base+0x63b8>
   1af9c:	mov	r3, #5
   1afa0:	mov	r2, r6
   1afa4:	mov	r1, r4
   1afa8:	mov	r0, r5
   1afac:	bl	18228 <_start@@Base+0x3484>
   1afb0:	cmp	r4, r0
   1afb4:	mov	r7, r0
   1afb8:	beq	1b15c <_start@@Base+0x63b8>
   1afbc:	mov	r3, #0
   1afc0:	add	fp, sp, #168	; 0xa8
   1afc4:	mov	r1, r0
   1afc8:	mov	r2, r6
   1afcc:	mov	r0, r5
   1afd0:	str	r3, [sp, #168]	; 0xa8
   1afd4:	mov	r3, fp
   1afd8:	bl	18ae4 <_start@@Base+0x3d40>
   1afdc:	cmp	r7, r0
   1afe0:	mov	r4, r0
   1afe4:	bne	1b010 <_start@@Base+0x626c>
   1afe8:	mov	r1, r0
   1afec:	ldr	r3, [pc, #640]	; 1b274 <_start@@Base+0x64d0>
   1aff0:	mov	r2, r6
   1aff4:	mov	r0, r5
   1aff8:	str	fp, [sp]
   1affc:	bl	1916c <_start@@Base+0x43c8>
   1b000:	cmp	r6, r0
   1b004:	cmpne	r4, r0
   1b008:	mov	r4, r0
   1b00c:	beq	1a448 <_start@@Base+0x56a4>
   1b010:	ldr	r3, [sp, #168]	; 0xa8
   1b014:	cmp	r3, #0
   1b018:	bne	1b028 <_start@@Base+0x6284>
   1b01c:	ldr	r3, [r5, #8]
   1b020:	tst	r3, #2
   1b024:	beq	1b04c <_start@@Base+0x62a8>
   1b028:	mov	r3, #4
   1b02c:	mov	r1, #1
   1b030:	ldr	r0, [r5]
   1b034:	mov	r2, r3
   1b038:	bl	22404 <flatcc_builder_table_add@@Base>
   1b03c:	cmp	r0, #0
   1b040:	beq	1a448 <_start@@Base+0x56a4>
   1b044:	ldr	r3, [sp, #168]	; 0xa8
   1b048:	str	r3, [r0]
   1b04c:	mov	r1, r4
   1b050:	add	r3, sp, #164	; 0xa4
   1b054:	mov	r2, r6
   1b058:	mov	r0, r5
   1b05c:	bl	16a90 <_start@@Base+0x1cec>
   1b060:	mov	r4, r0
   1b064:	b	1aeec <_start@@Base+0x6148>
   1b068:	bic	r3, r0, #255	; 0xff
   1b06c:	str	r3, [sp, #128]	; 0x80
   1b070:	str	r1, [sp, #132]	; 0x84
   1b074:	add	r1, pc, #484	; 0x1e4
   1b078:	ldrd	r0, [r1]
   1b07c:	ldrd	r2, [sp, #128]	; 0x80
   1b080:	cmp	r3, r1
   1b084:	cmpeq	r2, r0
   1b088:	bne	1b144 <_start@@Base+0x63a0>
   1b08c:	mov	r3, #7
   1b090:	mov	r2, r6
   1b094:	mov	r1, r7
   1b098:	mov	r0, r5
   1b09c:	bl	18228 <_start@@Base+0x3484>
   1b0a0:	cmp	r7, r0
   1b0a4:	mov	fp, r0
   1b0a8:	beq	1b144 <_start@@Base+0x63a0>
   1b0ac:	mov	r2, #0
   1b0b0:	mov	r3, #0
   1b0b4:	add	r7, sp, #168	; 0xa8
   1b0b8:	mov	r1, r0
   1b0bc:	mov	r0, r5
   1b0c0:	strd	r2, [sp, #168]	; 0xa8
   1b0c4:	mov	r3, r7
   1b0c8:	mov	r2, r6
   1b0cc:	bl	17430 <_start@@Base+0x268c>
   1b0d0:	cmp	fp, r0
   1b0d4:	mov	r4, r0
   1b0d8:	bne	1b104 <_start@@Base+0x6360>
   1b0dc:	mov	r1, r0
   1b0e0:	mov	r3, sl
   1b0e4:	str	r7, [sp]
   1b0e8:	mov	r2, r6
   1b0ec:	mov	r0, r5
   1b0f0:	bl	19f00 <_start@@Base+0x515c>
   1b0f4:	cmp	r6, r0
   1b0f8:	cmpne	r4, r0
   1b0fc:	mov	r4, r0
   1b100:	beq	1a448 <_start@@Base+0x56a4>
   1b104:	ldrd	r2, [sp, #168]	; 0xa8
   1b108:	orrs	r3, r2, r3
   1b10c:	bne	1b11c <_start@@Base+0x6378>
   1b110:	ldr	r3, [r5, #8]
   1b114:	tst	r3, #2
   1b118:	beq	1b04c <_start@@Base+0x62a8>
   1b11c:	mov	r3, #8
   1b120:	mov	r1, #0
   1b124:	ldr	r0, [r5]
   1b128:	mov	r2, r3
   1b12c:	bl	22404 <flatcc_builder_table_add@@Base>
   1b130:	cmp	r0, #0
   1b134:	beq	1a448 <_start@@Base+0x56a4>
   1b138:	ldrd	r2, [sp, #168]	; 0xa8
   1b13c:	strd	r2, [r0]
   1b140:	b	1b04c <_start@@Base+0x62a8>
   1b144:	mov	r2, r6
   1b148:	mov	r1, r7
   1b14c:	mov	r0, r5
   1b150:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b154:	mov	r4, r0
   1b158:	b	1b04c <_start@@Base+0x62a8>
   1b15c:	mov	r2, r6
   1b160:	mov	r1, r4
   1b164:	b	1b14c <_start@@Base+0x63a8>
   1b168:	mov	r2, r6
   1b16c:	mov	r1, r4
   1b170:	mov	r0, r5
   1b174:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b178:	mov	r4, r0
   1b17c:	b	1a788 <_start@@Base+0x59e4>
   1b180:	mov	r2, r6
   1b184:	mov	r1, r3
   1b188:	b	1b170 <_start@@Base+0x63cc>
   1b18c:	mov	r2, r6
   1b190:	mov	r1, r7
   1b194:	b	1b170 <_start@@Base+0x63cc>
   1b198:	mov	r2, r6
   1b19c:	mov	r1, r0
   1b1a0:	mov	r0, r5
   1b1a4:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b1a8:	b	1a1e0 <_start@@Base+0x543c>
   1b1ac:	and	r3, r8, #-16777216	; 0xff000000
   1b1b0:	str	r3, [sp, #136]	; 0x88
   1b1b4:	str	r9, [sp, #140]	; 0x8c
   1b1b8:	add	r3, pc, #168	; 0xa8
   1b1bc:	ldrd	r2, [r3]
   1b1c0:	ldrd	r0, [sp, #136]	; 0x88
   1b1c4:	cmp	r1, r3
   1b1c8:	cmpeq	r0, r2
   1b1cc:	bne	1b218 <_start@@Base+0x6474>
   1b1d0:	mov	r1, r7
   1b1d4:	mov	r3, #5
   1b1d8:	mov	r2, r6
   1b1dc:	mov	r0, r5
   1b1e0:	bl	18228 <_start@@Base+0x3484>
   1b1e4:	cmp	r7, r0
   1b1e8:	mov	r1, r0
   1b1ec:	beq	1b218 <_start@@Base+0x6474>
   1b1f0:	add	r3, sp, #148	; 0x94
   1b1f4:	mov	r2, r6
   1b1f8:	mov	r0, r5
   1b1fc:	bl	182a0 <_start@@Base+0x34fc>
   1b200:	ldr	r3, [sp, #148]	; 0x94
   1b204:	mov	r4, r0
   1b208:	cmp	r3, #0
   1b20c:	beq	1a0f8 <_start@@Base+0x5354>
   1b210:	mov	r1, #1
   1b214:	b	1a310 <_start@@Base+0x556c>
   1b218:	mov	r2, r6
   1b21c:	mov	r1, r7
   1b220:	b	1b1a0 <_start@@Base+0x63fc>
   1b224:	mov	r1, #1
   1b228:	ldr	r0, [r5]
   1b22c:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1b230:	cmp	r0, #0
   1b234:	beq	1a460 <_start@@Base+0x56bc>
   1b238:	str	r7, [r0]
   1b23c:	b	1a788 <_start@@Base+0x59e4>
   1b240:	ldrvs	r0, [r3, -r0]!
   1b244:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1b248:	movwvc	r0, #0
   1b24c:	cmnvc	r4, #112, 10	; 0x1c000000
   1b250:	svcpl	0x00626262
   1b254:	cmnvs	r1, r1, ror #2
   1b258:	cmnvs	r2, pc, asr r4
   1b25c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1b260:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1b264:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1b268:	strvs	r0, [r0, #-0]
   1b26c:	stclvs	6, cr7, [pc, #-420]!	; 1b0d0 <_start@@Base+0x632c>
   1b270:	andeq	r4, r4, r0, lsl #3
   1b274:	andeq	r4, r4, r4, ror r1
   1b278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b27c:	mov	r6, r2
   1b280:	mov	r5, r0
   1b284:	mov	r4, r1
   1b288:	mov	r1, #36	; 0x24
   1b28c:	vpush	{d8}
   1b290:	sub	sp, sp, #340	; 0x154
   1b294:	ldr	r0, [r0]
   1b298:	str	r3, [sp, #92]	; 0x5c
   1b29c:	mov	r3, #0
   1b2a0:	ldr	r2, [sp, #92]	; 0x5c
   1b2a4:	str	r3, [r2]
   1b2a8:	bl	21480 <flatcc_builder_start_table@@Base>
   1b2ac:	cmp	r0, #0
   1b2b0:	bne	1b680 <_start@@Base+0x68dc>
   1b2b4:	add	r3, sp, #316	; 0x13c
   1b2b8:	mov	r2, r6
   1b2bc:	mov	r1, r4
   1b2c0:	mov	r0, r5
   1b2c4:	str	r3, [sp]
   1b2c8:	mov	r3, #1
   1b2cc:	bl	260d0 <flatcc_json_parser_prepare_unions@@Base>
   1b2d0:	cmp	r6, r0
   1b2d4:	beq	1b680 <_start@@Base+0x68dc>
   1b2d8:	add	r3, sp, #308	; 0x134
   1b2dc:	mov	r2, r6
   1b2e0:	mov	r1, r4
   1b2e4:	mov	r0, r5
   1b2e8:	bl	180d4 <_start@@Base+0x3330>
   1b2ec:	ldr	r3, [sp, #308]	; 0x134
   1b2f0:	mov	r4, r0
   1b2f4:	cmp	r3, #0
   1b2f8:	bne	1b338 <_start@@Base+0x6594>
   1b2fc:	ldr	r3, [r5, #20]
   1b300:	cmp	r3, #0
   1b304:	bne	1b680 <_start@@Base+0x68dc>
   1b308:	mov	r1, #3
   1b30c:	ldr	r0, [r5]
   1b310:	bl	21938 <flatcc_builder_check_required_field@@Base>
   1b314:	cmp	r0, #0
   1b318:	bne	1e868 <_start@@Base+0x9ac4>
   1b31c:	mov	r1, r4
   1b320:	mov	r3, #29
   1b324:	mov	r2, r6
   1b328:	mov	r0, r5
   1b32c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1b330:	mov	r4, r0
   1b334:	b	1b680 <_start@@Base+0x68dc>
   1b338:	mov	r2, r6
   1b33c:	mov	r1, r4
   1b340:	mov	r0, r5
   1b344:	bl	174dc <_start@@Base+0x2738>
   1b348:	mov	r1, r6
   1b34c:	mov	r7, r0
   1b350:	bl	14e98 <_start@@Base+0xf4>
   1b354:	add	r3, pc, #916	; 0x394
   1b358:	ldrd	r2, [r3]
   1b35c:	mov	sl, r0
   1b360:	mov	fp, r1
   1b364:	cmp	r1, r3
   1b368:	cmpeq	r0, r2
   1b36c:	bhi	1c528 <_start@@Base+0x7784>
   1b370:	add	r3, pc, #896	; 0x380
   1b374:	ldrd	r2, [r3]
   1b378:	cmp	r1, r3
   1b37c:	cmpeq	r0, r2
   1b380:	bhi	1bb18 <_start@@Base+0x6d74>
   1b384:	add	r3, pc, #884	; 0x374
   1b388:	ldrd	r2, [r3]
   1b38c:	cmp	r1, r3
   1b390:	cmpeq	r0, r2
   1b394:	bhi	1b54c <_start@@Base+0x67a8>
   1b398:	and	r3, r0, #-16777216	; 0xff000000
   1b39c:	str	r3, [sp, #56]	; 0x38
   1b3a0:	str	r1, [sp, #60]	; 0x3c
   1b3a4:	add	r3, pc, #860	; 0x35c
   1b3a8:	ldrd	r2, [r3]
   1b3ac:	ldrd	r0, [sp, #56]	; 0x38
   1b3b0:	cmp	r1, r3
   1b3b4:	cmpeq	r0, r2
   1b3b8:	bne	1b448 <_start@@Base+0x66a4>
   1b3bc:	mov	r1, r7
   1b3c0:	mov	r3, #5
   1b3c4:	mov	r2, r6
   1b3c8:	mov	r0, r5
   1b3cc:	bl	18228 <_start@@Base+0x3484>
   1b3d0:	cmp	r7, r0
   1b3d4:	mov	r1, r0
   1b3d8:	beq	1b430 <_start@@Base+0x668c>
   1b3dc:	add	r3, sp, #312	; 0x138
   1b3e0:	mov	r2, r6
   1b3e4:	mov	r0, r5
   1b3e8:	bl	1b278 <_start@@Base+0x64d4>
   1b3ec:	ldr	r3, [sp, #312]	; 0x138
   1b3f0:	mov	r4, r0
   1b3f4:	cmp	r3, #0
   1b3f8:	beq	1b680 <_start@@Base+0x68dc>
   1b3fc:	mov	r1, #12
   1b400:	ldr	r0, [r5]
   1b404:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1b408:	cmp	r0, #0
   1b40c:	beq	1b680 <_start@@Base+0x68dc>
   1b410:	ldr	r3, [sp, #312]	; 0x138
   1b414:	str	r3, [r0]
   1b418:	add	r3, sp, #308	; 0x134
   1b41c:	mov	r2, r6
   1b420:	mov	r1, r4
   1b424:	mov	r0, r5
   1b428:	bl	16a90 <_start@@Base+0x1cec>
   1b42c:	b	1b2ec <_start@@Base+0x6548>
   1b430:	mov	r2, r6
   1b434:	mov	r1, r7
   1b438:	mov	r0, r5
   1b43c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b440:	mov	r4, r0
   1b444:	b	1b418 <_start@@Base+0x6674>
   1b448:	add	r3, pc, #704	; 0x2c0
   1b44c:	ldrd	r2, [r3]
   1b450:	ldrd	r0, [sp, #56]	; 0x38
   1b454:	cmp	r1, r3
   1b458:	cmpeq	r0, r2
   1b45c:	bne	1b534 <_start@@Base+0x6790>
   1b460:	mov	r3, #5
   1b464:	mov	r2, r6
   1b468:	mov	r1, r7
   1b46c:	mov	r0, r5
   1b470:	bl	18228 <_start@@Base+0x3484>
   1b474:	cmp	r7, r0
   1b478:	mov	r8, r0
   1b47c:	beq	1b51c <_start@@Base+0x6778>
   1b480:	mov	r3, #0
   1b484:	add	r7, sp, #328	; 0x148
   1b488:	mov	r1, r0
   1b48c:	mov	r2, r6
   1b490:	mov	r0, r5
   1b494:	strb	r3, [sp, #328]	; 0x148
   1b498:	mov	r3, r7
   1b49c:	bl	18fb8 <_start@@Base+0x4214>
   1b4a0:	cmp	r8, r0
   1b4a4:	mov	r4, r0
   1b4a8:	bne	1b4d4 <_start@@Base+0x6730>
   1b4ac:	mov	r1, r0
   1b4b0:	ldr	r3, [pc, #616]	; 1b720 <_start@@Base+0x697c>
   1b4b4:	mov	r2, r6
   1b4b8:	mov	r0, r5
   1b4bc:	str	r7, [sp]
   1b4c0:	bl	19c30 <_start@@Base+0x4e8c>
   1b4c4:	cmp	r6, r0
   1b4c8:	cmpne	r4, r0
   1b4cc:	mov	r4, r0
   1b4d0:	beq	1b680 <_start@@Base+0x68dc>
   1b4d4:	add	r3, sp, #328	; 0x148
   1b4d8:	ldrsb	r3, [r3]
   1b4dc:	cmp	r3, #8
   1b4e0:	bne	1b4f0 <_start@@Base+0x674c>
   1b4e4:	ldr	r3, [r5, #8]
   1b4e8:	tst	r3, #2
   1b4ec:	beq	1b418 <_start@@Base+0x6674>
   1b4f0:	mov	r3, #1
   1b4f4:	mov	r1, #6
   1b4f8:	ldr	r0, [r5]
   1b4fc:	mov	r2, r3
   1b500:	bl	22404 <flatcc_builder_table_add@@Base>
   1b504:	cmp	r0, #0
   1b508:	beq	1b680 <_start@@Base+0x68dc>
   1b50c:	add	r3, sp, #328	; 0x148
   1b510:	ldrsb	r3, [r3]
   1b514:	strb	r3, [r0]
   1b518:	b	1b418 <_start@@Base+0x6674>
   1b51c:	mov	r2, r6
   1b520:	mov	r1, r7
   1b524:	mov	r0, r5
   1b528:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b52c:	mov	r4, r0
   1b530:	b	1b418 <_start@@Base+0x6674>
   1b534:	mov	r2, r6
   1b538:	mov	r1, r7
   1b53c:	mov	r0, r5
   1b540:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b544:	mov	r4, r0
   1b548:	b	1b418 <_start@@Base+0x6674>
   1b54c:	ldr	r3, [pc, #464]	; 1b724 <_start@@Base+0x6980>
   1b550:	mvn	r2, #0
   1b554:	mov	r4, #0
   1b558:	cmp	r1, r3
   1b55c:	cmpeq	r0, r2
   1b560:	bhi	1b72c <_start@@Base+0x6988>
   1b564:	str	r4, [sp, #96]	; 0x60
   1b568:	str	r1, [sp, #100]	; 0x64
   1b56c:	add	r3, pc, #420	; 0x1a4
   1b570:	ldrd	r2, [r3]
   1b574:	ldrd	r0, [sp, #96]	; 0x60
   1b578:	cmp	r1, r3
   1b57c:	cmpeq	r0, r2
   1b580:	bne	1b6d8 <_start@@Base+0x6934>
   1b584:	mov	r3, #4
   1b588:	mov	r2, r6
   1b58c:	mov	r1, r7
   1b590:	mov	r0, r5
   1b594:	bl	18228 <_start@@Base+0x3484>
   1b598:	cmp	r7, r0
   1b59c:	mov	r4, r0
   1b5a0:	beq	1b6c0 <_start@@Base+0x691c>
   1b5a4:	mov	r2, #1
   1b5a8:	mvn	r3, #0
   1b5ac:	ldr	r0, [r5]
   1b5b0:	mov	r1, r2
   1b5b4:	bl	21368 <flatcc_builder_start_vector@@Base>
   1b5b8:	subs	r7, r0, #0
   1b5bc:	bne	1b680 <_start@@Base+0x68dc>
   1b5c0:	ldr	sl, [pc, #352]	; 1b728 <_start@@Base+0x6984>
   1b5c4:	mov	r1, r4
   1b5c8:	add	r3, sp, #308	; 0x134
   1b5cc:	mov	r2, r6
   1b5d0:	mov	r0, r5
   1b5d4:	bl	189cc <_start@@Base+0x3c28>
   1b5d8:	mov	r4, r0
   1b5dc:	ldr	r3, [sp, #308]	; 0x134
   1b5e0:	ldr	r0, [r5]
   1b5e4:	cmp	r3, #0
   1b5e8:	bne	1b61c <_start@@Base+0x6878>
   1b5ec:	bl	21cc4 <flatcc_builder_end_vector@@Base>
   1b5f0:	cmp	r0, #0
   1b5f4:	str	r0, [sp, #312]	; 0x138
   1b5f8:	beq	1b680 <_start@@Base+0x68dc>
   1b5fc:	mov	r1, #30
   1b600:	ldr	r0, [r5]
   1b604:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1b608:	cmp	r0, #0
   1b60c:	beq	1b680 <_start@@Base+0x68dc>
   1b610:	ldr	r3, [sp, #312]	; 0x138
   1b614:	str	r3, [r0]
   1b618:	b	1b418 <_start@@Base+0x6674>
   1b61c:	mov	r1, #1
   1b620:	strb	r7, [sp, #328]	; 0x148
   1b624:	bl	20ea8 <flatcc_builder_extend_vector@@Base>
   1b628:	subs	fp, r0, #0
   1b62c:	beq	1b680 <_start@@Base+0x68dc>
   1b630:	add	r9, sp, #328	; 0x148
   1b634:	mov	r1, r4
   1b638:	mov	r3, r9
   1b63c:	mov	r2, r6
   1b640:	mov	r0, r5
   1b644:	bl	18c1c <_start@@Base+0x3e78>
   1b648:	cmp	r4, r0
   1b64c:	mov	r8, r0
   1b650:	movne	r4, r0
   1b654:	bne	1b69c <_start@@Base+0x68f8>
   1b658:	mov	r1, r4
   1b65c:	mov	r3, sl
   1b660:	str	r9, [sp]
   1b664:	mov	r2, r6
   1b668:	mov	r0, r5
   1b66c:	bl	19060 <_start@@Base+0x42bc>
   1b670:	cmp	r6, r0
   1b674:	cmpne	r8, r0
   1b678:	mov	r4, r0
   1b67c:	bne	1b69c <_start@@Base+0x68f8>
   1b680:	mov	r1, r4
   1b684:	mov	r3, #33	; 0x21
   1b688:	mov	r2, r6
   1b68c:	mov	r0, r5
   1b690:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1b694:	mov	r4, r0
   1b698:	b	1e898 <_start@@Base+0x9af4>
   1b69c:	ldrb	r3, [sp, #328]	; 0x148
   1b6a0:	mov	r1, r4
   1b6a4:	mov	r2, r6
   1b6a8:	mov	r0, r5
   1b6ac:	strb	r3, [fp]
   1b6b0:	add	r3, sp, #308	; 0x134
   1b6b4:	bl	169d8 <_start@@Base+0x1c34>
   1b6b8:	mov	r4, r0
   1b6bc:	b	1b5dc <_start@@Base+0x6838>
   1b6c0:	mov	r1, r0
   1b6c4:	mov	r2, r6
   1b6c8:	mov	r0, r5
   1b6cc:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b6d0:	mov	r4, r0
   1b6d4:	b	1b418 <_start@@Base+0x6674>
   1b6d8:	mov	r2, r6
   1b6dc:	mov	r1, r7
   1b6e0:	mov	r0, r5
   1b6e4:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b6e8:	mov	r4, r0
   1b6ec:	b	1b418 <_start@@Base+0x6674>
   1b6f0:	cmnvs	r2, r0, ror #4
   1b6f4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b6f8:			; <UNDEFINED> instruction: 0xffffffff
   1b6fc:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1b700:			; <UNDEFINED> instruction: 0xffffffff
   1b704:			; <UNDEFINED> instruction: 0x666c6577
   1b708:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1b70c:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1b710:	andvc	r0, r0, #0
   1b714:	cmnvs	pc, #28416	; 0x6f00
   1b718:	andeq	r0, r0, r0
   1b71c:			; <UNDEFINED> instruction: 0x666c6578
   1b720:	andeq	r4, r4, ip, lsl #3
   1b724:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   1b728:	muleq	r4, ip, r1
   1b72c:	add	r3, pc, #956	; 0x3bc
   1b730:	ldrd	r2, [r3]
   1b734:	cmp	r1, r3
   1b738:	cmpeq	r0, r2
   1b73c:	bhi	1b850 <_start@@Base+0x6aac>
   1b740:	lsr	r3, r1, #16
   1b744:	str	r4, [sp, #16]
   1b748:	mov	r2, #0
   1b74c:	lsl	r3, r3, #16
   1b750:	str	r3, [sp, #20]
   1b754:	ldr	r3, [pc, #940]	; 1bb08 <_start@@Base+0x6d64>
   1b758:	ldrd	r0, [sp, #16]
   1b75c:	cmp	r1, r3
   1b760:	cmpeq	r0, r2
   1b764:	bne	1b838 <_start@@Base+0x6a94>
   1b768:	mov	r3, #2
   1b76c:	mov	r2, r6
   1b770:	mov	r1, r7
   1b774:	mov	r0, r5
   1b778:	bl	18228 <_start@@Base+0x3484>
   1b77c:	cmp	r7, r0
   1b780:	mov	r8, r0
   1b784:	beq	1b820 <_start@@Base+0x6a7c>
   1b788:	add	r3, sp, #328	; 0x148
   1b78c:	mov	r1, r0
   1b790:	mov	r2, r6
   1b794:	mov	r0, r5
   1b798:	mov	r7, r3
   1b79c:	strh	r4, [r3]
   1b7a0:	bl	18f0c <_start@@Base+0x4168>
   1b7a4:	cmp	r8, r0
   1b7a8:	mov	r4, r0
   1b7ac:	bne	1b7d8 <_start@@Base+0x6a34>
   1b7b0:	mov	r1, r0
   1b7b4:	ldr	r3, [pc, #848]	; 1bb0c <_start@@Base+0x6d68>
   1b7b8:	mov	r2, r6
   1b7bc:	mov	r0, r5
   1b7c0:	str	r7, [sp]
   1b7c4:	bl	19b00 <_start@@Base+0x4d5c>
   1b7c8:	cmp	r6, r0
   1b7cc:	cmpne	r4, r0
   1b7d0:	mov	r4, r0
   1b7d4:	beq	1b680 <_start@@Base+0x68dc>
   1b7d8:	add	r3, sp, #328	; 0x148
   1b7dc:	ldrsh	r3, [r3]
   1b7e0:	cmp	r3, #100	; 0x64
   1b7e4:	bne	1b7f4 <_start@@Base+0x6a50>
   1b7e8:	ldr	r3, [r5, #8]
   1b7ec:	tst	r3, #2
   1b7f0:	beq	1b418 <_start@@Base+0x6674>
   1b7f4:	mov	r3, #2
   1b7f8:	ldr	r0, [r5]
   1b7fc:	mov	r2, r3
   1b800:	mov	r1, r3
   1b804:	bl	22404 <flatcc_builder_table_add@@Base>
   1b808:	cmp	r0, #0
   1b80c:	beq	1b680 <_start@@Base+0x68dc>
   1b810:	add	r3, sp, #328	; 0x148
   1b814:	ldrsh	r3, [r3]
   1b818:	strh	r3, [r0]
   1b81c:	b	1b418 <_start@@Base+0x6674>
   1b820:	mov	r2, r6
   1b824:	mov	r1, r7
   1b828:	mov	r0, r5
   1b82c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b830:	mov	r4, r0
   1b834:	b	1b418 <_start@@Base+0x6674>
   1b838:	mov	r2, r6
   1b83c:	mov	r1, r7
   1b840:	mov	r0, r5
   1b844:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b848:	mov	r4, r0
   1b84c:	b	1b418 <_start@@Base+0x6674>
   1b850:	add	r3, pc, #672	; 0x2a0
   1b854:	ldrd	r2, [r3]
   1b858:	cmp	r1, r3
   1b85c:	cmpeq	r0, r2
   1b860:	bne	1b9e4 <_start@@Base+0x6c40>
   1b864:	add	r7, r7, #8
   1b868:	mov	r1, r6
   1b86c:	mov	r0, r7
   1b870:	bl	14e98 <_start@@Base+0xf4>
   1b874:	and	r3, r1, #-16777216	; 0xff000000
   1b878:	str	r4, [sp, #104]	; 0x68
   1b87c:	str	r3, [sp, #108]	; 0x6c
   1b880:	ldrd	r2, [sp, #104]	; 0x68
   1b884:	cmp	r3, #2030043136	; 0x79000000
   1b888:	cmpeq	r2, #0
   1b88c:	bne	1b9cc <_start@@Base+0x6c28>
   1b890:	mov	r3, #1
   1b894:	mov	r2, r6
   1b898:	mov	r1, r7
   1b89c:	mov	r0, r5
   1b8a0:	bl	18228 <_start@@Base+0x3484>
   1b8a4:	cmp	r7, r0
   1b8a8:	mov	r4, r0
   1b8ac:	beq	1b9b4 <_start@@Base+0x6c10>
   1b8b0:	mov	r2, #1
   1b8b4:	mvn	r3, #0
   1b8b8:	ldr	r0, [r5]
   1b8bc:	mov	r1, r2
   1b8c0:	bl	21368 <flatcc_builder_start_vector@@Base>
   1b8c4:	cmp	r0, #0
   1b8c8:	bne	1b680 <_start@@Base+0x68dc>
   1b8cc:	ldr	sl, [pc, #572]	; 1bb10 <_start@@Base+0x6d6c>
   1b8d0:	mov	r1, r4
   1b8d4:	add	r3, sp, #308	; 0x134
   1b8d8:	mov	r2, r6
   1b8dc:	mov	r0, r5
   1b8e0:	bl	189cc <_start@@Base+0x3c28>
   1b8e4:	mov	r4, r0
   1b8e8:	mov	r9, #0
   1b8ec:	ldr	r3, [sp, #308]	; 0x134
   1b8f0:	ldr	r0, [r5]
   1b8f4:	cmp	r3, #0
   1b8f8:	bne	1b92c <_start@@Base+0x6b88>
   1b8fc:	bl	21cc4 <flatcc_builder_end_vector@@Base>
   1b900:	cmp	r0, #0
   1b904:	str	r0, [sp, #312]	; 0x138
   1b908:	beq	1b680 <_start@@Base+0x68dc>
   1b90c:	mov	r1, #5
   1b910:	ldr	r0, [r5]
   1b914:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1b918:	cmp	r0, #0
   1b91c:	beq	1b680 <_start@@Base+0x68dc>
   1b920:	ldr	r3, [sp, #312]	; 0x138
   1b924:	str	r3, [r0]
   1b928:	b	1b418 <_start@@Base+0x6674>
   1b92c:	mov	r1, #1
   1b930:	strb	r9, [sp, #328]	; 0x148
   1b934:	bl	20ea8 <flatcc_builder_extend_vector@@Base>
   1b938:	subs	fp, r0, #0
   1b93c:	beq	1b680 <_start@@Base+0x68dc>
   1b940:	add	r8, sp, #328	; 0x148
   1b944:	mov	r1, r4
   1b948:	mov	r3, r8
   1b94c:	mov	r2, r6
   1b950:	mov	r0, r5
   1b954:	bl	18c1c <_start@@Base+0x3e78>
   1b958:	cmp	r4, r0
   1b95c:	mov	r7, r0
   1b960:	movne	r4, r0
   1b964:	bne	1b990 <_start@@Base+0x6bec>
   1b968:	mov	r1, r4
   1b96c:	mov	r3, sl
   1b970:	str	r8, [sp]
   1b974:	mov	r2, r6
   1b978:	mov	r0, r5
   1b97c:	bl	19060 <_start@@Base+0x42bc>
   1b980:	cmp	r6, r0
   1b984:	cmpne	r7, r0
   1b988:	mov	r4, r0
   1b98c:	beq	1b680 <_start@@Base+0x68dc>
   1b990:	ldrb	r3, [sp, #328]	; 0x148
   1b994:	mov	r1, r4
   1b998:	mov	r2, r6
   1b99c:	mov	r0, r5
   1b9a0:	strb	r3, [fp]
   1b9a4:	add	r3, sp, #308	; 0x134
   1b9a8:	bl	169d8 <_start@@Base+0x1c34>
   1b9ac:	mov	r4, r0
   1b9b0:	b	1b8ec <_start@@Base+0x6b48>
   1b9b4:	mov	r1, r0
   1b9b8:	mov	r2, r6
   1b9bc:	mov	r0, r5
   1b9c0:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b9c4:	mov	r4, r0
   1b9c8:	b	1b418 <_start@@Base+0x6674>
   1b9cc:	mov	r2, r6
   1b9d0:	mov	r1, r7
   1b9d4:	mov	r0, r5
   1b9d8:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1b9dc:	mov	r4, r0
   1b9e0:	b	1b418 <_start@@Base+0x6674>
   1b9e4:	str	r4, [sp, #112]	; 0x70
   1b9e8:	str	r1, [sp, #116]	; 0x74
   1b9ec:	add	r3, pc, #268	; 0x10c
   1b9f0:	ldrd	r2, [r3]
   1b9f4:	ldrd	r0, [sp, #112]	; 0x70
   1b9f8:	cmp	r1, r3
   1b9fc:	cmpeq	r0, r2
   1ba00:	bne	1bad4 <_start@@Base+0x6d30>
   1ba04:	mov	r3, #4
   1ba08:	mov	r2, r6
   1ba0c:	mov	r1, r7
   1ba10:	mov	r0, r5
   1ba14:	bl	18228 <_start@@Base+0x3484>
   1ba18:	cmp	r7, r0
   1ba1c:	mov	r8, r0
   1ba20:	beq	1babc <_start@@Base+0x6d18>
   1ba24:	add	r3, sp, #328	; 0x148
   1ba28:	mov	r1, r0
   1ba2c:	mov	r2, r6
   1ba30:	mov	r0, r5
   1ba34:	mov	r7, r3
   1ba38:	strh	r4, [r3]
   1ba3c:	bl	18f0c <_start@@Base+0x4168>
   1ba40:	cmp	r8, r0
   1ba44:	mov	r4, r0
   1ba48:	bne	1ba74 <_start@@Base+0x6cd0>
   1ba4c:	mov	r1, r0
   1ba50:	ldr	r3, [pc, #188]	; 1bb14 <_start@@Base+0x6d70>
   1ba54:	mov	r2, r6
   1ba58:	mov	r0, r5
   1ba5c:	str	r7, [sp]
   1ba60:	bl	19b00 <_start@@Base+0x4d5c>
   1ba64:	cmp	r6, r0
   1ba68:	cmpne	r4, r0
   1ba6c:	mov	r4, r0
   1ba70:	beq	1b680 <_start@@Base+0x68dc>
   1ba74:	add	r3, sp, #328	; 0x148
   1ba78:	ldrsh	r3, [r3]
   1ba7c:	cmp	r3, #150	; 0x96
   1ba80:	bne	1ba90 <_start@@Base+0x6cec>
   1ba84:	ldr	r3, [r5, #8]
   1ba88:	tst	r3, #2
   1ba8c:	beq	1b418 <_start@@Base+0x6674>
   1ba90:	mov	r3, #2
   1ba94:	mov	r1, #1
   1ba98:	ldr	r0, [r5]
   1ba9c:	mov	r2, r3
   1baa0:	bl	22404 <flatcc_builder_table_add@@Base>
   1baa4:	cmp	r0, #0
   1baa8:	beq	1b680 <_start@@Base+0x68dc>
   1baac:	add	r3, sp, #328	; 0x148
   1bab0:	ldrsh	r3, [r3]
   1bab4:	strh	r3, [r0]
   1bab8:	b	1b418 <_start@@Base+0x6674>
   1babc:	mov	r2, r6
   1bac0:	mov	r1, r7
   1bac4:	mov	r0, r5
   1bac8:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1bacc:	mov	r4, r0
   1bad0:	b	1b418 <_start@@Base+0x6674>
   1bad4:	mov	r2, r6
   1bad8:	mov	r1, r7
   1badc:	mov	r0, r5
   1bae0:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1bae4:	mov	r4, r0
   1bae8:	b	1b418 <_start@@Base+0x6674>
   1baec:	nop	{0}
   1baf0:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1baf4:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1baf8:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1bafc:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1bb00:	andeq	r0, r0, r0
   1bb04:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1bb08:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   1bb0c:	andeq	r4, r4, r8, lsr #3
   1bb10:			; <UNDEFINED> instruction: 0x000441b4
   1bb14:	andeq	r4, r4, r0, asr #3
   1bb18:	add	r3, pc, #880	; 0x370
   1bb1c:	ldrd	r2, [r3]
   1bb20:	cmp	r1, r3
   1bb24:	cmpeq	r0, r2
   1bb28:	bhi	1c214 <_start@@Base+0x7470>
   1bb2c:	add	r3, pc, #868	; 0x364
   1bb30:	ldrd	r2, [r3]
   1bb34:	cmp	r1, r3
   1bb38:	cmpeq	r0, r2
   1bb3c:	bhi	1bbf4 <_start@@Base+0x6e50>
   1bb40:	mov	r3, #0
   1bb44:	str	r3, [sp, #120]	; 0x78
   1bb48:	str	r1, [sp, #124]	; 0x7c
   1bb4c:	add	r3, pc, #844	; 0x34c
   1bb50:	ldrd	r2, [r3]
   1bb54:	ldrd	r0, [sp, #120]	; 0x78
   1bb58:	cmp	r1, r3
   1bb5c:	cmpeq	r0, r2
   1bb60:	bne	1bbdc <_start@@Base+0x6e38>
   1bb64:	mov	r1, r7
   1bb68:	mov	r3, #4
   1bb6c:	mov	r2, r6
   1bb70:	mov	r0, r5
   1bb74:	bl	18228 <_start@@Base+0x3484>
   1bb78:	cmp	r7, r0
   1bb7c:	mov	r1, r0
   1bb80:	beq	1bbc4 <_start@@Base+0x6e20>
   1bb84:	add	r3, sp, #312	; 0x138
   1bb88:	mov	r2, r6
   1bb8c:	mov	r0, r5
   1bb90:	bl	25f9c <flatcc_json_parser_build_string@@Base>
   1bb94:	ldr	r3, [sp, #312]	; 0x138
   1bb98:	mov	r4, r0
   1bb9c:	cmp	r3, #0
   1bba0:	beq	1b680 <_start@@Base+0x68dc>
   1bba4:	mov	r1, #3
   1bba8:	ldr	r0, [r5]
   1bbac:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1bbb0:	cmp	r0, #0
   1bbb4:	beq	1b680 <_start@@Base+0x68dc>
   1bbb8:	ldr	r3, [sp, #312]	; 0x138
   1bbbc:	str	r3, [r0]
   1bbc0:	b	1b418 <_start@@Base+0x6674>
   1bbc4:	mov	r2, r6
   1bbc8:	mov	r1, r7
   1bbcc:	mov	r0, r5
   1bbd0:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1bbd4:	mov	r4, r0
   1bbd8:	b	1b418 <_start@@Base+0x6674>
   1bbdc:	mov	r2, r6
   1bbe0:	mov	r1, r7
   1bbe4:	mov	r0, r5
   1bbe8:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1bbec:	mov	r4, r0
   1bbf0:	b	1b418 <_start@@Base+0x6674>
   1bbf4:	add	r3, pc, #684	; 0x2ac
   1bbf8:	ldrd	r2, [r3]
   1bbfc:	cmp	r1, r3
   1bc00:	cmpeq	r0, r2
   1bc04:	bne	1bd08 <_start@@Base+0x6f64>
   1bc08:	add	r4, r7, #8
   1bc0c:	mov	r1, r6
   1bc10:	mov	r0, r4
   1bc14:	bl	14e98 <_start@@Base+0xf4>
   1bc18:	add	r3, pc, #656	; 0x290
   1bc1c:	ldrd	r2, [r3]
   1bc20:	cmp	r1, r3
   1bc24:	cmpeq	r0, r2
   1bc28:	bne	1bcf0 <_start@@Base+0x6f4c>
   1bc2c:	add	r7, r7, #16
   1bc30:	mov	r1, r6
   1bc34:	mov	r0, r7
   1bc38:	bl	14e98 <_start@@Base+0xf4>
   1bc3c:	and	r3, r0, #-16777216	; 0xff000000
   1bc40:	str	r3, [sp, #128]	; 0x80
   1bc44:	str	r1, [sp, #132]	; 0x84
   1bc48:	add	r3, pc, #616	; 0x268
   1bc4c:	ldrd	r2, [r3]
   1bc50:	ldrd	r0, [sp, #128]	; 0x80
   1bc54:	cmp	r1, r3
   1bc58:	cmpeq	r0, r2
   1bc5c:	bne	1bcd8 <_start@@Base+0x6f34>
   1bc60:	mov	r1, r7
   1bc64:	mov	r3, #5
   1bc68:	mov	r2, r6
   1bc6c:	mov	r0, r5
   1bc70:	bl	18228 <_start@@Base+0x3484>
   1bc74:	cmp	r7, r0
   1bc78:	mov	r1, r0
   1bc7c:	beq	1bcc0 <_start@@Base+0x6f1c>
   1bc80:	add	r3, sp, #312	; 0x138
   1bc84:	mov	r2, r6
   1bc88:	mov	r0, r5
   1bc8c:	bl	1815c <_start@@Base+0x33b8>
   1bc90:	ldr	r3, [sp, #312]	; 0x138
   1bc94:	mov	r4, r0
   1bc98:	cmp	r3, #0
   1bc9c:	beq	1b680 <_start@@Base+0x68dc>
   1bca0:	mov	r1, #34	; 0x22
   1bca4:	ldr	r0, [r5]
   1bca8:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1bcac:	cmp	r0, #0
   1bcb0:	beq	1b680 <_start@@Base+0x68dc>
   1bcb4:	ldr	r3, [sp, #312]	; 0x138
   1bcb8:	str	r3, [r0]
   1bcbc:	b	1b418 <_start@@Base+0x6674>
   1bcc0:	mov	r2, r6
   1bcc4:	mov	r1, r7
   1bcc8:	mov	r0, r5
   1bccc:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1bcd0:	mov	r4, r0
   1bcd4:	b	1b418 <_start@@Base+0x6674>
   1bcd8:	mov	r2, r6
   1bcdc:	mov	r1, r7
   1bce0:	mov	r0, r5
   1bce4:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1bce8:	mov	r4, r0
   1bcec:	b	1b418 <_start@@Base+0x6674>
   1bcf0:	mov	r1, r4
   1bcf4:	mov	r2, r6
   1bcf8:	mov	r0, r5
   1bcfc:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1bd00:	mov	r4, r0
   1bd04:	b	1b418 <_start@@Base+0x6674>
   1bd08:	bic	r3, r1, #255	; 0xff
   1bd0c:	mov	r8, #0
   1bd10:	str	r8, [sp, #136]	; 0x88
   1bd14:	str	r3, [sp, #140]	; 0x8c
   1bd18:	add	r3, pc, #416	; 0x1a0
   1bd1c:	ldrd	r2, [r3]
   1bd20:	ldrd	r0, [sp, #136]	; 0x88
   1bd24:	cmp	r1, r3
   1bd28:	cmpeq	r0, r2
   1bd2c:	bne	1c1fc <_start@@Base+0x7458>
   1bd30:	mov	r3, #3
   1bd34:	mov	r2, r6
   1bd38:	mov	r1, r7
   1bd3c:	mov	r0, r5
   1bd40:	bl	18228 <_start@@Base+0x3484>
   1bd44:	cmp	r7, r0
   1bd48:	mov	r4, r0
   1bd4c:	beq	1c1e4 <_start@@Base+0x7440>
   1bd50:	mov	r3, #16
   1bd54:	mov	r2, #32
   1bd58:	ldr	r0, [r5]
   1bd5c:	mov	r1, r8
   1bd60:	bl	22404 <flatcc_builder_table_add@@Base>
   1bd64:	subs	r7, r0, #0
   1bd68:	beq	1b680 <_start@@Base+0x68dc>
   1bd6c:	vldr	d8, [pc, #340]	; 1bec8 <_start@@Base+0x7124>
   1bd70:	mov	r1, r4
   1bd74:	add	r3, sp, #324	; 0x144
   1bd78:	mov	r2, r6
   1bd7c:	mov	r0, r5
   1bd80:	add	r9, pc, #328	; 0x148
   1bd84:	ldrd	r8, [r9]
   1bd88:	bl	180d4 <_start@@Base+0x3330>
   1bd8c:	mov	r4, r0
   1bd90:	ldr	r3, [sp, #324]	; 0x144
   1bd94:	cmp	r3, #0
   1bd98:	beq	1b418 <_start@@Base+0x6674>
   1bd9c:	mov	r2, r6
   1bda0:	mov	r1, r4
   1bda4:	mov	r0, r5
   1bda8:	bl	174dc <_start@@Base+0x2738>
   1bdac:	mov	r1, r6
   1bdb0:	mov	r4, r0
   1bdb4:	bl	14e98 <_start@@Base+0xf4>
   1bdb8:	add	r3, pc, #280	; 0x118
   1bdbc:	ldrd	r2, [r3]
   1bdc0:	cmp	r1, r3
   1bdc4:	cmpeq	r0, r2
   1bdc8:	bhi	1bf80 <_start@@Base+0x71dc>
   1bdcc:	and	r3, r0, #-16777216	; 0xff000000
   1bdd0:	str	r3, [sp, #72]	; 0x48
   1bdd4:	str	r1, [sp, #76]	; 0x4c
   1bdd8:	add	r1, pc, #256	; 0x100
   1bddc:	ldrd	r0, [r1]
   1bde0:	ldrd	r2, [sp, #72]	; 0x48
   1bde4:	cmp	r3, r1
   1bde8:	cmpeq	r2, r0
   1bdec:	bne	1bef0 <_start@@Base+0x714c>
   1bdf0:	mov	r3, #5
   1bdf4:	mov	r2, r6
   1bdf8:	mov	r1, r4
   1bdfc:	mov	r0, r5
   1be00:	bl	18228 <_start@@Base+0x3484>
   1be04:	cmp	r4, r0
   1be08:	mov	sl, r0
   1be0c:	beq	1c1b4 <_start@@Base+0x7410>
   1be10:	mov	r3, #0
   1be14:	add	fp, sp, #328	; 0x148
   1be18:	mov	r1, r0
   1be1c:	mov	r2, r6
   1be20:	mov	r0, r5
   1be24:	strb	r3, [sp, #328]	; 0x148
   1be28:	mov	r3, fp
   1be2c:	bl	18fb8 <_start@@Base+0x4214>
   1be30:	cmp	sl, r0
   1be34:	mov	r4, r0
   1be38:	bne	1be64 <_start@@Base+0x70c0>
   1be3c:	mov	r1, r0
   1be40:	ldr	r3, [pc, #160]	; 1bee8 <_start@@Base+0x7144>
   1be44:	mov	r2, r6
   1be48:	mov	r0, r5
   1be4c:	str	fp, [sp]
   1be50:	bl	19c30 <_start@@Base+0x4e8c>
   1be54:	cmp	r6, r0
   1be58:	cmpne	r4, r0
   1be5c:	beq	1c1c8 <_start@@Base+0x7424>
   1be60:	mov	r4, r0
   1be64:	add	r3, sp, #328	; 0x148
   1be68:	ldrsb	r3, [r3]
   1be6c:	strb	r3, [r7, #24]
   1be70:	mov	r1, r4
   1be74:	add	r3, sp, #324	; 0x144
   1be78:	mov	r2, r6
   1be7c:	mov	r0, r5
   1be80:	bl	16a90 <_start@@Base+0x1cec>
   1be84:	mov	r4, r0
   1be88:	b	1bd90 <_start@@Base+0x6fec>
   1be8c:	nop	{0}
   1be90:			; <UNDEFINED> instruction: 0xffffffff
   1be94:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1be98:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1be9c:	rsbvc	r7, r1, r5, ror #4
   1bea0:	andeq	r0, r0, r0
   1bea4:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1bea8:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1beac:	rsbvc	r7, r1, r5, ror #4
   1beb0:	rsbvc	r6, r1, r5, ror #6
   1beb4:	smcvs	54867	; 0xd653
   1beb8:	strvc	r0, [r0], #-0
   1bebc:	svcpl	0x00746573
   1bec0:	andeq	r0, r0, r0
   1bec4:	rsbvc	r7, pc, r0, lsl #6
	...
   1bed0:	mrscc	r0, (UNDEF: 0)
   1bed4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bed8:	rscscc	pc, pc, #1020	; 0x3fc
   1bedc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bee0:	andcc	r0, r0, #0
   1bee4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bee8:	andeq	r4, r4, ip, asr #3
   1beec:	ldrdeq	r4, [r4], -ip
   1bef0:	ldrd	r2, [sp, #72]	; 0x48
   1bef4:	cmp	r3, r9
   1bef8:	cmpeq	r2, r8
   1befc:	bne	1c1b4 <_start@@Base+0x7410>
   1bf00:	mov	r3, #5
   1bf04:	mov	r2, r6
   1bf08:	mov	r1, r4
   1bf0c:	mov	r0, r5
   1bf10:	bl	18228 <_start@@Base+0x3484>
   1bf14:	cmp	r4, r0
   1bf18:	mov	sl, r0
   1bf1c:	beq	1c1b4 <_start@@Base+0x7410>
   1bf20:	add	fp, sp, #328	; 0x148
   1bf24:	mov	r1, r0
   1bf28:	vstr	d8, [sp, #328]	; 0x148
   1bf2c:	mov	r3, fp
   1bf30:	mov	r2, r6
   1bf34:	mov	r0, r5
   1bf38:	bl	25348 <flatcc_json_parser_double@@Base>
   1bf3c:	cmp	sl, r0
   1bf40:	mov	r4, r0
   1bf44:	bne	1bf70 <_start@@Base+0x71cc>
   1bf48:	mov	r1, r0
   1bf4c:	ldr	r3, [pc, #-104]	; 1beec <_start@@Base+0x7148>
   1bf50:	mov	r2, r6
   1bf54:	mov	r0, r5
   1bf58:	str	fp, [sp]
   1bf5c:	bl	17704 <_start@@Base+0x2960>
   1bf60:	cmp	r6, r0
   1bf64:	cmpne	r4, r0
   1bf68:	beq	1c1c8 <_start@@Base+0x7424>
   1bf6c:	mov	r4, r0
   1bf70:	add	r3, sp, #328	; 0x148
   1bf74:	ldrd	r2, [r3]
   1bf78:	strd	r2, [r7, #16]
   1bf7c:	b	1be70 <_start@@Base+0x70cc>
   1bf80:	mvn	r3, #-2013265920	; 0x88000000
   1bf84:	mvn	r2, #0
   1bf88:	cmp	r1, r3
   1bf8c:	cmpeq	r0, r2
   1bf90:	bhi	1bff0 <_start@@Base+0x724c>
   1bf94:	and	r3, r0, #-16777216	; 0xff000000
   1bf98:	str	r3, [sp, #144]	; 0x90
   1bf9c:	str	r1, [sp, #148]	; 0x94
   1bfa0:	add	r1, pc, #944	; 0x3b0
   1bfa4:	ldrd	r0, [r1]
   1bfa8:	ldrd	r2, [sp, #144]	; 0x90
   1bfac:	cmp	r3, r1
   1bfb0:	cmpeq	r2, r0
   1bfb4:	bne	1c1b4 <_start@@Base+0x7410>
   1bfb8:	mov	r1, r4
   1bfbc:	mov	r3, #5
   1bfc0:	mov	r2, r6
   1bfc4:	mov	r0, r5
   1bfc8:	bl	18228 <_start@@Base+0x3484>
   1bfcc:	cmp	r4, r0
   1bfd0:	mov	r1, r0
   1bfd4:	beq	1c1b4 <_start@@Base+0x7410>
   1bfd8:	add	r3, r7, #26
   1bfdc:	mov	r2, r6
   1bfe0:	mov	r0, r5
   1bfe4:	bl	19d50 <_start@@Base+0x4fac>
   1bfe8:	mov	r4, r0
   1bfec:	b	1be70 <_start@@Base+0x70cc>
   1bff0:	mvn	r3, #-2030043136	; 0x87000000
   1bff4:	mvn	r2, #0
   1bff8:	cmp	r1, r3
   1bffc:	cmpeq	r0, r2
   1c000:	bhi	1c084 <_start@@Base+0x72e0>
   1c004:	mov	r3, #1
   1c008:	mov	r2, r6
   1c00c:	mov	r1, r4
   1c010:	mov	r0, r5
   1c014:	bl	18228 <_start@@Base+0x3484>
   1c018:	cmp	r4, r0
   1c01c:	mov	sl, r0
   1c020:	beq	1c1b4 <_start@@Base+0x7410>
   1c024:	mov	r3, #0
   1c028:	add	fp, sp, #328	; 0x148
   1c02c:	mov	r1, r0
   1c030:	mov	r2, r6
   1c034:	mov	r0, r5
   1c038:	str	r3, [sp, #328]	; 0x148
   1c03c:	mov	r3, fp
   1c040:	bl	25418 <flatcc_json_parser_float@@Base>
   1c044:	cmp	sl, r0
   1c048:	mov	r4, r0
   1c04c:	bne	1c078 <_start@@Base+0x72d4>
   1c050:	mov	r1, r0
   1c054:	ldr	r3, [pc, #780]	; 1c368 <_start@@Base+0x75c4>
   1c058:	mov	r2, r6
   1c05c:	mov	r0, r5
   1c060:	str	fp, [sp]
   1c064:	bl	1762c <_start@@Base+0x2888>
   1c068:	cmp	r6, r0
   1c06c:	cmpne	r4, r0
   1c070:	beq	1c1c8 <_start@@Base+0x7424>
   1c074:	mov	r4, r0
   1c078:	ldr	r3, [sp, #328]	; 0x148
   1c07c:	str	r3, [r7]
   1c080:	b	1be70 <_start@@Base+0x70cc>
   1c084:	mov	r3, #0
   1c088:	str	r3, [sp, #80]	; 0x50
   1c08c:	and	r3, r1, #-16777216	; 0xff000000
   1c090:	str	r3, [sp, #84]	; 0x54
   1c094:	ldrd	r2, [sp, #80]	; 0x50
   1c098:	cmp	r3, #2046820352	; 0x7a000000
   1c09c:	cmpeq	r2, #0
   1c0a0:	bne	1c124 <_start@@Base+0x7380>
   1c0a4:	mov	r3, #1
   1c0a8:	mov	r2, r6
   1c0ac:	mov	r1, r4
   1c0b0:	mov	r0, r5
   1c0b4:	bl	18228 <_start@@Base+0x3484>
   1c0b8:	cmp	r4, r0
   1c0bc:	mov	sl, r0
   1c0c0:	beq	1c1b4 <_start@@Base+0x7410>
   1c0c4:	mov	r3, #0
   1c0c8:	add	fp, sp, #328	; 0x148
   1c0cc:	mov	r1, r0
   1c0d0:	mov	r2, r6
   1c0d4:	mov	r0, r5
   1c0d8:	str	r3, [sp, #328]	; 0x148
   1c0dc:	mov	r3, fp
   1c0e0:	bl	25418 <flatcc_json_parser_float@@Base>
   1c0e4:	cmp	sl, r0
   1c0e8:	mov	r4, r0
   1c0ec:	bne	1c118 <_start@@Base+0x7374>
   1c0f0:	mov	r1, r0
   1c0f4:	ldr	r3, [pc, #624]	; 1c36c <_start@@Base+0x75c8>
   1c0f8:	mov	r2, r6
   1c0fc:	mov	r0, r5
   1c100:	str	fp, [sp]
   1c104:	bl	1762c <_start@@Base+0x2888>
   1c108:	cmp	r6, r0
   1c10c:	cmpne	r4, r0
   1c110:	beq	1c1c8 <_start@@Base+0x7424>
   1c114:	mov	r4, r0
   1c118:	ldr	r3, [sp, #328]	; 0x148
   1c11c:	str	r3, [r7, #8]
   1c120:	b	1be70 <_start@@Base+0x70cc>
   1c124:	ldrd	r2, [sp, #80]	; 0x50
   1c128:	cmp	r3, #2030043136	; 0x79000000
   1c12c:	cmpeq	r2, #0
   1c130:	bne	1c1b4 <_start@@Base+0x7410>
   1c134:	mov	r3, #1
   1c138:	mov	r2, r6
   1c13c:	mov	r1, r4
   1c140:	mov	r0, r5
   1c144:	bl	18228 <_start@@Base+0x3484>
   1c148:	cmp	r4, r0
   1c14c:	mov	sl, r0
   1c150:	beq	1c1b4 <_start@@Base+0x7410>
   1c154:	mov	r3, #0
   1c158:	add	fp, sp, #328	; 0x148
   1c15c:	mov	r1, r0
   1c160:	mov	r2, r6
   1c164:	mov	r0, r5
   1c168:	str	r3, [sp, #328]	; 0x148
   1c16c:	mov	r3, fp
   1c170:	bl	25418 <flatcc_json_parser_float@@Base>
   1c174:	cmp	sl, r0
   1c178:	mov	r4, r0
   1c17c:	bne	1c1a8 <_start@@Base+0x7404>
   1c180:	mov	r1, r0
   1c184:	ldr	r3, [pc, #484]	; 1c370 <_start@@Base+0x75cc>
   1c188:	mov	r2, r6
   1c18c:	mov	r0, r5
   1c190:	str	fp, [sp]
   1c194:	bl	1762c <_start@@Base+0x2888>
   1c198:	cmp	r6, r0
   1c19c:	cmpne	r4, r0
   1c1a0:	beq	1c1c8 <_start@@Base+0x7424>
   1c1a4:	mov	r4, r0
   1c1a8:	ldr	r3, [sp, #328]	; 0x148
   1c1ac:	str	r3, [r7, #4]
   1c1b0:	b	1be70 <_start@@Base+0x70cc>
   1c1b4:	mov	r2, r6
   1c1b8:	mov	r1, r4
   1c1bc:	mov	r0, r5
   1c1c0:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1c1c4:	b	1bfe8 <_start@@Base+0x7244>
   1c1c8:	mov	r1, r0
   1c1cc:	mov	r3, #33	; 0x21
   1c1d0:	mov	r2, r6
   1c1d4:	mov	r0, r5
   1c1d8:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1c1dc:	mov	r4, r0
   1c1e0:	b	1b418 <_start@@Base+0x6674>
   1c1e4:	mov	r1, r0
   1c1e8:	mov	r2, r6
   1c1ec:	mov	r0, r5
   1c1f0:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1c1f4:	mov	r4, r0
   1c1f8:	b	1b418 <_start@@Base+0x6674>
   1c1fc:	mov	r2, r6
   1c200:	mov	r1, r7
   1c204:	mov	r0, r5
   1c208:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1c20c:	mov	r4, r0
   1c210:	b	1b418 <_start@@Base+0x6674>
   1c214:	and	r3, r0, #-16777216	; 0xff000000
   1c218:	str	r3, [sp, #64]	; 0x40
   1c21c:	str	r1, [sp, #68]	; 0x44
   1c220:	add	r3, pc, #312	; 0x138
   1c224:	ldrd	r2, [r3]
   1c228:	ldrd	r0, [sp, #64]	; 0x40
   1c22c:	cmp	r1, r3
   1c230:	cmpeq	r0, r2
   1c234:	bne	1c308 <_start@@Base+0x7564>
   1c238:	mov	r3, #5
   1c23c:	mov	r2, r6
   1c240:	mov	r1, r7
   1c244:	mov	r0, r5
   1c248:	bl	18228 <_start@@Base+0x3484>
   1c24c:	cmp	r7, r0
   1c250:	mov	r4, r0
   1c254:	beq	1e8a8 <_start@@Base+0x9b04>
   1c258:	mvn	r3, #-1073741824	; 0xc0000000
   1c25c:	mov	r2, #2
   1c260:	ldr	r0, [r5]
   1c264:	mov	r1, #4
   1c268:	bl	21368 <flatcc_builder_start_vector@@Base>
   1c26c:	cmp	r0, #0
   1c270:	bne	1b680 <_start@@Base+0x68dc>
   1c274:	add	r7, sp, #308	; 0x134
   1c278:	mov	r2, r6
   1c27c:	mov	r3, r7
   1c280:	mov	r1, r4
   1c284:	mov	r0, r5
   1c288:	bl	189cc <_start@@Base+0x3c28>
   1c28c:	ldr	r3, [sp, #308]	; 0x134
   1c290:	mov	r4, r0
   1c294:	ldr	r0, [r5]
   1c298:	cmp	r3, #0
   1c29c:	bne	1c2d0 <_start@@Base+0x752c>
   1c2a0:	bl	21cc4 <flatcc_builder_end_vector@@Base>
   1c2a4:	cmp	r0, #0
   1c2a8:	str	r0, [sp, #312]	; 0x138
   1c2ac:	beq	1b680 <_start@@Base+0x68dc>
   1c2b0:	mov	r1, #9
   1c2b4:	ldr	r0, [r5]
   1c2b8:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1c2bc:	cmp	r0, #0
   1c2c0:	beq	1b680 <_start@@Base+0x68dc>
   1c2c4:	ldr	r3, [sp, #312]	; 0x138
   1c2c8:	str	r3, [r0]
   1c2cc:	b	1b418 <_start@@Base+0x6674>
   1c2d0:	mov	r1, #1
   1c2d4:	bl	20ea8 <flatcc_builder_extend_vector@@Base>
   1c2d8:	subs	r3, r0, #0
   1c2dc:	beq	1b680 <_start@@Base+0x68dc>
   1c2e0:	mov	r2, r6
   1c2e4:	mov	r1, r4
   1c2e8:	mov	r0, r5
   1c2ec:	bl	19d50 <_start@@Base+0x4fac>
   1c2f0:	mov	r1, r0
   1c2f4:	mov	r3, r7
   1c2f8:	mov	r2, r6
   1c2fc:	mov	r0, r5
   1c300:	bl	169d8 <_start@@Base+0x1c34>
   1c304:	b	1c28c <_start@@Base+0x74e8>
   1c308:	mov	r1, r7
   1c30c:	mov	r3, #4
   1c310:	mov	r2, r6
   1c314:	mov	r0, r5
   1c318:	bl	18228 <_start@@Base+0x3484>
   1c31c:	cmp	r7, r0
   1c320:	mov	r1, r0
   1c324:	beq	1c378 <_start@@Base+0x75d4>
   1c328:	ldr	r3, [pc, #68]	; 1c374 <_start@@Base+0x75d0>
   1c32c:	mov	r2, r6
   1c330:	mov	r0, r5
   1c334:	str	r3, [sp, #8]
   1c338:	ldr	r3, [sp, #316]	; 0x13c
   1c33c:	str	r3, [sp, #4]
   1c340:	mov	r3, #8
   1c344:	str	r3, [sp]
   1c348:	mov	r3, #0
   1c34c:	bl	26190 <flatcc_json_parser_union@@Base>
   1c350:	mov	r4, r0
   1c354:	b	1b418 <_start@@Base+0x6674>
   1c358:	movwcc	r0, #0
   1c35c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c360:	strcc	r0, [r0], #-0
   1c364:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c368:	andeq	r4, r4, r8, ror #3
   1c36c:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   1c370:	andeq	r4, r4, r0, lsl #4
   1c374:	andeq	lr, r1, r8, ror #17
   1c378:	add	r3, pc, #808	; 0x328
   1c37c:	ldrd	r2, [r3]
   1c380:	ldrd	r8, [sp, #64]	; 0x40
   1c384:	cmp	r9, r3
   1c388:	cmpeq	r8, r2
   1c38c:	bne	1c460 <_start@@Base+0x76bc>
   1c390:	mov	r3, #5
   1c394:	mov	r2, r6
   1c398:	mov	r1, r7
   1c39c:	mov	r0, r5
   1c3a0:	bl	18228 <_start@@Base+0x3484>
   1c3a4:	cmp	r7, r0
   1c3a8:	mov	r4, r0
   1c3ac:	beq	1e8a8 <_start@@Base+0x9b04>
   1c3b0:	mvn	r3, #-1073741824	; 0xc0000000
   1c3b4:	mov	r2, #2
   1c3b8:	ldr	r0, [r5]
   1c3bc:	mov	r1, #4
   1c3c0:	bl	21368 <flatcc_builder_start_vector@@Base>
   1c3c4:	cmp	r0, #0
   1c3c8:	bne	1b680 <_start@@Base+0x68dc>
   1c3cc:	add	r7, sp, #308	; 0x134
   1c3d0:	mov	r2, r6
   1c3d4:	mov	r3, r7
   1c3d8:	mov	r1, r4
   1c3dc:	mov	r0, r5
   1c3e0:	bl	189cc <_start@@Base+0x3c28>
   1c3e4:	ldr	r3, [sp, #308]	; 0x134
   1c3e8:	mov	r4, r0
   1c3ec:	ldr	r0, [r5]
   1c3f0:	cmp	r3, #0
   1c3f4:	bne	1c428 <_start@@Base+0x7684>
   1c3f8:	bl	21cc4 <flatcc_builder_end_vector@@Base>
   1c3fc:	cmp	r0, #0
   1c400:	str	r0, [sp, #312]	; 0x138
   1c404:	beq	1b680 <_start@@Base+0x68dc>
   1c408:	mov	r1, #31
   1c40c:	ldr	r0, [r5]
   1c410:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1c414:	cmp	r0, #0
   1c418:	beq	1b680 <_start@@Base+0x68dc>
   1c41c:	ldr	r3, [sp, #312]	; 0x138
   1c420:	str	r3, [r0]
   1c424:	b	1b418 <_start@@Base+0x6674>
   1c428:	mov	r1, #1
   1c42c:	bl	20ea8 <flatcc_builder_extend_vector@@Base>
   1c430:	subs	r3, r0, #0
   1c434:	beq	1b680 <_start@@Base+0x68dc>
   1c438:	mov	r2, r6
   1c43c:	mov	r1, r4
   1c440:	mov	r0, r5
   1c444:	bl	19d50 <_start@@Base+0x4fac>
   1c448:	mov	r1, r0
   1c44c:	mov	r3, r7
   1c450:	mov	r2, r6
   1c454:	mov	r0, r5
   1c458:	bl	169d8 <_start@@Base+0x1c34>
   1c45c:	b	1c3e4 <_start@@Base+0x7640>
   1c460:	add	r3, pc, #584	; 0x248
   1c464:	ldrd	r2, [r3]
   1c468:	cmp	fp, r3
   1c46c:	cmpeq	sl, r2
   1c470:	bne	1e8ac <_start@@Base+0x9b08>
   1c474:	add	r7, r7, #8
   1c478:	mov	r1, r6
   1c47c:	mov	r0, r7
   1c480:	bl	14e98 <_start@@Base+0xf4>
   1c484:	mov	r3, #0
   1c488:	str	r3, [sp, #152]	; 0x98
   1c48c:	and	r3, r1, #-16777216	; 0xff000000
   1c490:	str	r3, [sp, #156]	; 0x9c
   1c494:	ldrd	r2, [sp, #152]	; 0x98
   1c498:	cmp	r3, #1694498816	; 0x65000000
   1c49c:	cmpeq	r2, #0
   1c4a0:	bne	1c510 <_start@@Base+0x776c>
   1c4a4:	mov	r1, r7
   1c4a8:	mov	r3, #1
   1c4ac:	mov	r2, r6
   1c4b0:	mov	r0, r5
   1c4b4:	bl	18228 <_start@@Base+0x3484>
   1c4b8:	cmp	r7, r0
   1c4bc:	mov	r1, r0
   1c4c0:	beq	1c4fc <_start@@Base+0x7758>
   1c4c4:	ldr	r3, [pc, #524]	; 1c6d8 <_start@@Base+0x7934>
   1c4c8:	mov	r2, r6
   1c4cc:	mov	r0, r5
   1c4d0:	str	r3, [sp, #12]
   1c4d4:	ldr	r3, [pc, #512]	; 1c6dc <_start@@Base+0x7938>
   1c4d8:	str	r3, [sp, #8]
   1c4dc:	ldr	r3, [sp, #316]	; 0x13c
   1c4e0:	str	r3, [sp, #4]
   1c4e4:	mov	r3, #8
   1c4e8:	str	r3, [sp]
   1c4ec:	mov	r3, #0
   1c4f0:	bl	2629c <flatcc_json_parser_union_type@@Base>
   1c4f4:	mov	r4, r0
   1c4f8:	b	1b418 <_start@@Base+0x6674>
   1c4fc:	mov	r2, r6
   1c500:	mov	r0, r5
   1c504:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1c508:	mov	r4, r0
   1c50c:	b	1b418 <_start@@Base+0x6674>
   1c510:	mov	r2, r6
   1c514:	mov	r1, r7
   1c518:	mov	r0, r5
   1c51c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1c520:	mov	r4, r0
   1c524:	b	1b418 <_start@@Base+0x6674>
   1c528:	add	r3, pc, #392	; 0x188
   1c52c:	ldrd	r2, [r3]
   1c530:	cmp	r1, r3
   1c534:	cmpeq	r0, r2
   1c538:	bhi	1d898 <_start@@Base+0x8af4>
   1c53c:	add	r3, pc, #380	; 0x17c
   1c540:	ldrd	r2, [r3]
   1c544:	cmp	r1, r3
   1c548:	cmpeq	r0, r2
   1c54c:	bne	1ce08 <_start@@Base+0x8064>
   1c550:	add	r8, r7, #8
   1c554:	mov	r1, r6
   1c558:	mov	r0, r8
   1c55c:	bl	14e98 <_start@@Base+0xf4>
   1c560:	add	r3, pc, #352	; 0x160
   1c564:	ldrd	r2, [r3]
   1c568:	cmp	r1, r3
   1c56c:	cmpeq	r0, r2
   1c570:	bhi	1c9ec <_start@@Base+0x7c48>
   1c574:	add	r3, pc, #340	; 0x154
   1c578:	ldrd	r2, [r3]
   1c57c:	cmp	r1, r3
   1c580:	cmpeq	r0, r2
   1c584:	bne	1c6e4 <_start@@Base+0x7940>
   1c588:	mov	r3, #8
   1c58c:	mov	r2, r6
   1c590:	mov	r1, r8
   1c594:	mov	r0, r5
   1c598:	bl	18228 <_start@@Base+0x3484>
   1c59c:	cmp	r8, r0
   1c5a0:	mov	r4, r0
   1c5a4:	beq	1c9d4 <_start@@Base+0x7c30>
   1c5a8:	mov	r2, #1
   1c5ac:	mvn	r3, #0
   1c5b0:	ldr	r0, [r5]
   1c5b4:	mov	r1, r2
   1c5b8:	bl	21368 <flatcc_builder_start_vector@@Base>
   1c5bc:	subs	r7, r0, #0
   1c5c0:	bne	1b680 <_start@@Base+0x68dc>
   1c5c4:	ldr	sl, [pc, #276]	; 1c6e0 <_start@@Base+0x793c>
   1c5c8:	mov	r1, r4
   1c5cc:	add	r3, sp, #308	; 0x134
   1c5d0:	mov	r2, r6
   1c5d4:	mov	r0, r5
   1c5d8:	bl	189cc <_start@@Base+0x3c28>
   1c5dc:	mov	r4, r0
   1c5e0:	ldr	r3, [sp, #308]	; 0x134
   1c5e4:	ldr	r0, [r5]
   1c5e8:	cmp	r3, #0
   1c5ec:	bne	1c620 <_start@@Base+0x787c>
   1c5f0:	bl	21cc4 <flatcc_builder_end_vector@@Base>
   1c5f4:	cmp	r0, #0
   1c5f8:	str	r0, [sp, #312]	; 0x138
   1c5fc:	beq	1b680 <_start@@Base+0x68dc>
   1c600:	mov	r1, #24
   1c604:	ldr	r0, [r5]
   1c608:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1c60c:	cmp	r0, #0
   1c610:	beq	1b680 <_start@@Base+0x68dc>
   1c614:	ldr	r3, [sp, #312]	; 0x138
   1c618:	str	r3, [r0]
   1c61c:	b	1b418 <_start@@Base+0x6674>
   1c620:	mov	r1, #1
   1c624:	strb	r7, [sp, #328]	; 0x148
   1c628:	bl	20ea8 <flatcc_builder_extend_vector@@Base>
   1c62c:	subs	fp, r0, #0
   1c630:	beq	1b680 <_start@@Base+0x68dc>
   1c634:	add	r9, sp, #328	; 0x148
   1c638:	mov	r1, r4
   1c63c:	mov	r3, r9
   1c640:	mov	r2, r6
   1c644:	mov	r0, r5
   1c648:	bl	18cb0 <_start@@Base+0x3f0c>
   1c64c:	cmp	r4, r0
   1c650:	mov	r8, r0
   1c654:	movne	r4, r0
   1c658:	bne	1c684 <_start@@Base+0x78e0>
   1c65c:	mov	r1, r4
   1c660:	mov	r3, sl
   1c664:	str	r9, [sp]
   1c668:	mov	r2, r6
   1c66c:	mov	r0, r5
   1c670:	bl	1752c <_start@@Base+0x2788>
   1c674:	cmp	r6, r0
   1c678:	cmpne	r8, r0
   1c67c:	mov	r4, r0
   1c680:	beq	1b680 <_start@@Base+0x68dc>
   1c684:	ldrb	r3, [sp, #328]	; 0x148
   1c688:	mov	r1, r4
   1c68c:	mov	r2, r6
   1c690:	mov	r0, r5
   1c694:	strb	r3, [fp]
   1c698:	add	r3, sp, #308	; 0x134
   1c69c:	bl	169d8 <_start@@Base+0x1c34>
   1c6a0:	mov	r4, r0
   1c6a4:	b	1c5e0 <_start@@Base+0x783c>
   1c6a8:	strcc	r0, [r0, #-0]
   1c6ac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c6b0:	svcpl	0x00747970
   1c6b4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c6b8:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1c6bc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c6c0:	cmnvs	r2, r1, ror #4
   1c6c4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c6c8:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1c6cc:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c6d0:	svcvs	0x006f6c73
   1c6d4:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c6d8:	andeq	lr, r1, r8, ror #17
   1c6dc:	andeq	r4, r4, ip, lsl #4
   1c6e0:	andeq	r4, r4, ip, lsl r2
   1c6e4:	add	r3, pc, #988	; 0x3dc
   1c6e8:	ldrd	r2, [r3]
   1c6ec:	cmp	r1, r3
   1c6f0:	cmpeq	r0, r2
   1c6f4:	bne	1c9d0 <_start@@Base+0x7c2c>
   1c6f8:	add	r7, r7, #16
   1c6fc:	mov	r1, r6
   1c700:	mov	r0, r7
   1c704:	bl	14e98 <_start@@Base+0xf4>
   1c708:	bic	r3, r0, #255	; 0xff
   1c70c:	str	r3, [sp, #160]	; 0xa0
   1c710:	str	r1, [sp, #164]	; 0xa4
   1c714:	add	r3, pc, #948	; 0x3b4
   1c718:	ldrd	r2, [r3]
   1c71c:	ldrd	r0, [sp, #160]	; 0xa0
   1c720:	cmp	r1, r3
   1c724:	cmpeq	r0, r2
   1c728:	bne	1c9b8 <_start@@Base+0x7c14>
   1c72c:	mov	r3, #7
   1c730:	mov	r2, r6
   1c734:	mov	r1, r7
   1c738:	mov	r0, r5
   1c73c:	bl	18228 <_start@@Base+0x3484>
   1c740:	cmp	r7, r0
   1c744:	mov	r4, r0
   1c748:	beq	1c9a0 <_start@@Base+0x7bfc>
   1c74c:	mvn	r3, #-536870912	; 0xe0000000
   1c750:	mov	r2, #4
   1c754:	ldr	r0, [r5]
   1c758:	mov	r1, #8
   1c75c:	bl	21368 <flatcc_builder_start_vector@@Base>
   1c760:	cmp	r0, #0
   1c764:	bne	1b680 <_start@@Base+0x68dc>
   1c768:	add	r3, sp, #308	; 0x134
   1c76c:	mov	r2, r6
   1c770:	mov	r1, r4
   1c774:	mov	r0, r5
   1c778:	bl	189cc <_start@@Base+0x3c28>
   1c77c:	ldr	r3, [sp, #308]	; 0x134
   1c780:	mov	r4, r0
   1c784:	ldr	r0, [r5]
   1c788:	cmp	r3, #0
   1c78c:	bne	1c7c0 <_start@@Base+0x7a1c>
   1c790:	bl	21cc4 <flatcc_builder_end_vector@@Base>
   1c794:	cmp	r0, #0
   1c798:	str	r0, [sp, #312]	; 0x138
   1c79c:	beq	1b680 <_start@@Base+0x68dc>
   1c7a0:	mov	r1, #29
   1c7a4:	ldr	r0, [r5]
   1c7a8:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1c7ac:	cmp	r0, #0
   1c7b0:	beq	1b680 <_start@@Base+0x68dc>
   1c7b4:	ldr	r3, [sp, #312]	; 0x138
   1c7b8:	str	r3, [r0]
   1c7bc:	b	1b418 <_start@@Base+0x6674>
   1c7c0:	mov	r1, #1
   1c7c4:	bl	20ea8 <flatcc_builder_extend_vector@@Base>
   1c7c8:	subs	r9, r0, #0
   1c7cc:	beq	1b680 <_start@@Base+0x68dc>
   1c7d0:	add	r3, sp, #324	; 0x144
   1c7d4:	mov	r2, r6
   1c7d8:	mov	r1, r4
   1c7dc:	mov	r0, r5
   1c7e0:	bl	180d4 <_start@@Base+0x3330>
   1c7e4:	ldr	r3, [sp, #324]	; 0x144
   1c7e8:	cmp	r3, #0
   1c7ec:	bne	1c808 <_start@@Base+0x7a64>
   1c7f0:	mov	r1, r0
   1c7f4:	add	r3, sp, #308	; 0x134
   1c7f8:	mov	r2, r6
   1c7fc:	mov	r0, r5
   1c800:	bl	169d8 <_start@@Base+0x1c34>
   1c804:	b	1c77c <_start@@Base+0x79d8>
   1c808:	mov	r2, r6
   1c80c:	mov	r1, r0
   1c810:	ldr	fp, [pc, #720]	; 1cae8 <_start@@Base+0x7d44>
   1c814:	mov	r0, r5
   1c818:	mov	r8, #0
   1c81c:	bl	174dc <_start@@Base+0x2738>
   1c820:	mov	r1, r6
   1c824:	mov	r4, r0
   1c828:	bl	14e98 <_start@@Base+0xf4>
   1c82c:	lsr	r3, r1, #16
   1c830:	str	r8, [sp, #168]	; 0xa8
   1c834:	mov	sl, #0
   1c838:	lsl	r3, r3, #16
   1c83c:	str	r3, [sp, #172]	; 0xac
   1c840:	ldrd	r2, [sp, #168]	; 0xa8
   1c844:	cmp	r3, fp
   1c848:	cmpeq	r2, sl
   1c84c:	bne	1c8e0 <_start@@Base+0x7b3c>
   1c850:	mov	r3, #2
   1c854:	mov	r2, r6
   1c858:	mov	r1, r4
   1c85c:	mov	r0, r5
   1c860:	bl	18228 <_start@@Base+0x3484>
   1c864:	cmp	r4, r0
   1c868:	mov	r7, r0
   1c86c:	beq	1c970 <_start@@Base+0x7bcc>
   1c870:	str	r8, [sp, #328]	; 0x148
   1c874:	add	r8, sp, #328	; 0x148
   1c878:	mov	r1, r0
   1c87c:	mov	r2, r6
   1c880:	mov	r0, r5
   1c884:	mov	r3, r8
   1c888:	bl	18ae4 <_start@@Base+0x3d40>
   1c88c:	cmp	r7, r0
   1c890:	mov	r4, r0
   1c894:	bne	1c8c0 <_start@@Base+0x7b1c>
   1c898:	mov	r1, r0
   1c89c:	ldr	r3, [pc, #584]	; 1caec <_start@@Base+0x7d48>
   1c8a0:	mov	r2, r6
   1c8a4:	mov	r0, r5
   1c8a8:	str	r8, [sp]
   1c8ac:	bl	1916c <_start@@Base+0x43c8>
   1c8b0:	cmp	r6, r0
   1c8b4:	cmpne	r4, r0
   1c8b8:	beq	1c988 <_start@@Base+0x7be4>
   1c8bc:	mov	r4, r0
   1c8c0:	ldr	r3, [sp, #328]	; 0x148
   1c8c4:	str	r3, [r9]
   1c8c8:	add	r3, sp, #324	; 0x144
   1c8cc:	mov	r2, r6
   1c8d0:	mov	r1, r4
   1c8d4:	mov	r0, r5
   1c8d8:	bl	16a90 <_start@@Base+0x1cec>
   1c8dc:	b	1c7e4 <_start@@Base+0x7a40>
   1c8e0:	add	r3, pc, #496	; 0x1f0
   1c8e4:	ldrd	r2, [r3]
   1c8e8:	cmp	r1, r3
   1c8ec:	cmpeq	r0, r2
   1c8f0:	bne	1c970 <_start@@Base+0x7bcc>
   1c8f4:	mov	r3, #8
   1c8f8:	mov	r2, r6
   1c8fc:	mov	r1, r4
   1c900:	mov	r0, r5
   1c904:	bl	18228 <_start@@Base+0x3484>
   1c908:	cmp	r4, r0
   1c90c:	mov	r7, r0
   1c910:	beq	1c970 <_start@@Base+0x7bcc>
   1c914:	str	r8, [sp, #328]	; 0x148
   1c918:	add	r8, sp, #328	; 0x148
   1c91c:	mov	r1, r0
   1c920:	mov	r2, r6
   1c924:	mov	r0, r5
   1c928:	mov	r3, r8
   1c92c:	bl	18ae4 <_start@@Base+0x3d40>
   1c930:	cmp	r7, r0
   1c934:	mov	r4, r0
   1c938:	bne	1c964 <_start@@Base+0x7bc0>
   1c93c:	mov	r1, r0
   1c940:	ldr	r3, [pc, #424]	; 1caf0 <_start@@Base+0x7d4c>
   1c944:	mov	r2, r6
   1c948:	mov	r0, r5
   1c94c:	str	r8, [sp]
   1c950:	bl	1916c <_start@@Base+0x43c8>
   1c954:	cmp	r6, r0
   1c958:	cmpne	r4, r0
   1c95c:	beq	1c988 <_start@@Base+0x7be4>
   1c960:	mov	r4, r0
   1c964:	ldr	r3, [sp, #328]	; 0x148
   1c968:	str	r3, [r9, #4]
   1c96c:	b	1c8c8 <_start@@Base+0x7b24>
   1c970:	mov	r1, r4
   1c974:	mov	r2, r6
   1c978:	mov	r0, r5
   1c97c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1c980:	mov	r4, r0
   1c984:	b	1c8c8 <_start@@Base+0x7b24>
   1c988:	mov	r1, r0
   1c98c:	mov	r3, #33	; 0x21
   1c990:	mov	r2, r6
   1c994:	mov	r0, r5
   1c998:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1c99c:	b	1c7f0 <_start@@Base+0x7a4c>
   1c9a0:	mov	r1, r0
   1c9a4:	mov	r2, r6
   1c9a8:	mov	r0, r5
   1c9ac:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1c9b0:	mov	r4, r0
   1c9b4:	b	1b418 <_start@@Base+0x6674>
   1c9b8:	mov	r2, r6
   1c9bc:	mov	r1, r7
   1c9c0:	mov	r0, r5
   1c9c4:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1c9c8:	mov	r4, r0
   1c9cc:	b	1b418 <_start@@Base+0x6674>
   1c9d0:	mov	r4, r8
   1c9d4:	mov	r1, r4
   1c9d8:	mov	r2, r6
   1c9dc:	mov	r0, r5
   1c9e0:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1c9e4:	mov	r4, r0
   1c9e8:	b	1b418 <_start@@Base+0x6674>
   1c9ec:	add	r3, pc, #236	; 0xec
   1c9f0:	ldrd	r2, [r3]
   1c9f4:	cmp	r1, r3
   1c9f8:	cmpeq	r0, r2
   1c9fc:	bne	1cc98 <_start@@Base+0x7ef4>
   1ca00:	add	r7, r7, #16
   1ca04:	mov	r1, r6
   1ca08:	mov	r0, r7
   1ca0c:	bl	14e98 <_start@@Base+0xf4>
   1ca10:	lsr	r3, r1, #16
   1ca14:	mov	r0, #0
   1ca18:	mov	r2, #0
   1ca1c:	lsl	r3, r3, #16
   1ca20:	str	r0, [sp, #24]
   1ca24:	str	r3, [sp, #28]
   1ca28:	ldr	r3, [pc, #196]	; 1caf4 <_start@@Base+0x7d50>
   1ca2c:	ldrd	r8, [sp, #24]
   1ca30:	cmp	r9, r3
   1ca34:	cmpeq	r8, r2
   1ca38:	bne	1cb68 <_start@@Base+0x7dc4>
   1ca3c:	mov	r3, #2
   1ca40:	mov	r2, r6
   1ca44:	mov	r1, r7
   1ca48:	mov	r0, r5
   1ca4c:	bl	18228 <_start@@Base+0x3484>
   1ca50:	cmp	r7, r0
   1ca54:	mov	r4, r0
   1ca58:	beq	1cb50 <_start@@Base+0x7dac>
   1ca5c:	ldr	r0, [r5]
   1ca60:	bl	213c0 <flatcc_builder_start_offset_vector@@Base>
   1ca64:	cmp	r0, #0
   1ca68:	bne	1b680 <_start@@Base+0x68dc>
   1ca6c:	add	r7, sp, #308	; 0x134
   1ca70:	mov	r2, r6
   1ca74:	mov	r3, r7
   1ca78:	mov	r1, r4
   1ca7c:	mov	r0, r5
   1ca80:	bl	189cc <_start@@Base+0x3c28>
   1ca84:	ldr	r3, [sp, #308]	; 0x134
   1ca88:	mov	r4, r0
   1ca8c:	cmp	r3, #0
   1ca90:	bne	1caf8 <_start@@Base+0x7d54>
   1ca94:	ldr	r0, [r5]
   1ca98:	bl	21d64 <flatcc_builder_end_offset_vector@@Base>
   1ca9c:	cmp	r0, #0
   1caa0:	str	r0, [sp, #312]	; 0x138
   1caa4:	beq	1b680 <_start@@Base+0x68dc>
   1caa8:	mov	r1, #28
   1caac:	ldr	r0, [r5]
   1cab0:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1cab4:	cmp	r0, #0
   1cab8:	beq	1b680 <_start@@Base+0x68dc>
   1cabc:	ldr	r3, [sp, #312]	; 0x138
   1cac0:	str	r3, [r0]
   1cac4:	b	1b418 <_start@@Base+0x6674>
   1cac8:	svcvs	0x00727465
   1cacc:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cad0:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1cad4:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1cad8:	cmnvs	lr, r5, ror #6
   1cadc:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1cae0:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1cae4:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cae8:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1caec:	andeq	r4, r4, r8, lsr #4
   1caf0:	andeq	r4, r4, r4, lsr r2
   1caf4:	ldrvs	r0, [r2, -r0]!
   1caf8:	add	r3, sp, #312	; 0x138
   1cafc:	mov	r1, r4
   1cb00:	mov	r2, r6
   1cb04:	mov	r0, r5
   1cb08:	bl	25f9c <flatcc_json_parser_build_string@@Base>
   1cb0c:	ldr	r3, [sp, #312]	; 0x138
   1cb10:	mov	r4, r0
   1cb14:	cmp	r3, #0
   1cb18:	beq	1b680 <_start@@Base+0x68dc>
   1cb1c:	mov	r1, #1
   1cb20:	ldr	r0, [r5]
   1cb24:	bl	20fd0 <flatcc_builder_extend_offset_vector@@Base>
   1cb28:	cmp	r0, #0
   1cb2c:	beq	1b680 <_start@@Base+0x68dc>
   1cb30:	ldr	r3, [sp, #312]	; 0x138
   1cb34:	mov	r2, r6
   1cb38:	mov	r1, r4
   1cb3c:	str	r3, [r0]
   1cb40:	mov	r3, r7
   1cb44:	mov	r0, r5
   1cb48:	bl	169d8 <_start@@Base+0x1c34>
   1cb4c:	b	1ca84 <_start@@Base+0x7ce0>
   1cb50:	mov	r1, r0
   1cb54:	mov	r2, r6
   1cb58:	mov	r0, r5
   1cb5c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1cb60:	mov	r4, r0
   1cb64:	b	1b418 <_start@@Base+0x6674>
   1cb68:	and	r3, r1, #-16777216	; 0xff000000
   1cb6c:	str	r0, [sp, #176]	; 0xb0
   1cb70:	str	r3, [sp, #180]	; 0xb4
   1cb74:	ldrd	r2, [sp, #176]	; 0xb0
   1cb78:	cmp	r3, #1728053248	; 0x67000000
   1cb7c:	cmpeq	r2, #0
   1cb80:	bne	1cc80 <_start@@Base+0x7edc>
   1cb84:	mov	r3, #1
   1cb88:	mov	r2, r6
   1cb8c:	mov	r1, r7
   1cb90:	mov	r0, r5
   1cb94:	bl	18228 <_start@@Base+0x3484>
   1cb98:	cmp	r7, r0
   1cb9c:	mov	r4, r0
   1cba0:	beq	1cc68 <_start@@Base+0x7ec4>
   1cba4:	ldr	r0, [r5]
   1cba8:	bl	213c0 <flatcc_builder_start_offset_vector@@Base>
   1cbac:	cmp	r0, #0
   1cbb0:	bne	1b680 <_start@@Base+0x68dc>
   1cbb4:	add	r7, sp, #308	; 0x134
   1cbb8:	mov	r2, r6
   1cbbc:	mov	r3, r7
   1cbc0:	mov	r1, r4
   1cbc4:	mov	r0, r5
   1cbc8:	bl	189cc <_start@@Base+0x3c28>
   1cbcc:	ldr	r3, [sp, #308]	; 0x134
   1cbd0:	mov	r4, r0
   1cbd4:	cmp	r3, #0
   1cbd8:	bne	1cc10 <_start@@Base+0x7e6c>
   1cbdc:	ldr	r0, [r5]
   1cbe0:	bl	21d64 <flatcc_builder_end_offset_vector@@Base>
   1cbe4:	cmp	r0, #0
   1cbe8:	str	r0, [sp, #312]	; 0x138
   1cbec:	beq	1b680 <_start@@Base+0x68dc>
   1cbf0:	mov	r1, #10
   1cbf4:	ldr	r0, [r5]
   1cbf8:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1cbfc:	cmp	r0, #0
   1cc00:	beq	1b680 <_start@@Base+0x68dc>
   1cc04:	ldr	r3, [sp, #312]	; 0x138
   1cc08:	str	r3, [r0]
   1cc0c:	b	1b418 <_start@@Base+0x6674>
   1cc10:	add	r3, sp, #312	; 0x138
   1cc14:	mov	r1, r4
   1cc18:	mov	r2, r6
   1cc1c:	mov	r0, r5
   1cc20:	bl	25f9c <flatcc_json_parser_build_string@@Base>
   1cc24:	ldr	r3, [sp, #312]	; 0x138
   1cc28:	mov	r4, r0
   1cc2c:	cmp	r3, #0
   1cc30:	beq	1b680 <_start@@Base+0x68dc>
   1cc34:	mov	r1, #1
   1cc38:	ldr	r0, [r5]
   1cc3c:	bl	20fd0 <flatcc_builder_extend_offset_vector@@Base>
   1cc40:	cmp	r0, #0
   1cc44:	beq	1b680 <_start@@Base+0x68dc>
   1cc48:	ldr	r3, [sp, #312]	; 0x138
   1cc4c:	mov	r2, r6
   1cc50:	mov	r1, r4
   1cc54:	str	r3, [r0]
   1cc58:	mov	r3, r7
   1cc5c:	mov	r0, r5
   1cc60:	bl	169d8 <_start@@Base+0x1c34>
   1cc64:	b	1cbcc <_start@@Base+0x7e28>
   1cc68:	mov	r1, r0
   1cc6c:	mov	r2, r6
   1cc70:	mov	r0, r5
   1cc74:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1cc78:	mov	r4, r0
   1cc7c:	b	1b418 <_start@@Base+0x6674>
   1cc80:	mov	r2, r6
   1cc84:	mov	r1, r7
   1cc88:	mov	r0, r5
   1cc8c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1cc90:	mov	r4, r0
   1cc94:	b	1b418 <_start@@Base+0x6674>
   1cc98:	add	r3, pc, #968	; 0x3c8
   1cc9c:	ldrd	r2, [r3]
   1cca0:	cmp	r1, r3
   1cca4:	cmpeq	r0, r2
   1cca8:	bne	1cdf0 <_start@@Base+0x804c>
   1ccac:	add	r7, r7, #16
   1ccb0:	mov	r1, r6
   1ccb4:	mov	r0, r7
   1ccb8:	bl	14e98 <_start@@Base+0xf4>
   1ccbc:	mov	r3, #0
   1ccc0:	str	r3, [sp, #184]	; 0xb8
   1ccc4:	and	r3, r1, #-16777216	; 0xff000000
   1ccc8:	str	r3, [sp, #188]	; 0xbc
   1cccc:	ldrd	r2, [sp, #184]	; 0xb8
   1ccd0:	cmp	r3, #1929379840	; 0x73000000
   1ccd4:	cmpeq	r2, #0
   1ccd8:	bne	1cdd8 <_start@@Base+0x8034>
   1ccdc:	mov	r3, #1
   1cce0:	mov	r2, r6
   1cce4:	mov	r1, r7
   1cce8:	mov	r0, r5
   1ccec:	bl	18228 <_start@@Base+0x3484>
   1ccf0:	cmp	r7, r0
   1ccf4:	mov	r4, r0
   1ccf8:	beq	1cdc0 <_start@@Base+0x801c>
   1ccfc:	ldr	r0, [r5]
   1cd00:	bl	213c0 <flatcc_builder_start_offset_vector@@Base>
   1cd04:	cmp	r0, #0
   1cd08:	bne	1b680 <_start@@Base+0x68dc>
   1cd0c:	add	r7, sp, #308	; 0x134
   1cd10:	mov	r2, r6
   1cd14:	mov	r3, r7
   1cd18:	mov	r1, r4
   1cd1c:	mov	r0, r5
   1cd20:	bl	189cc <_start@@Base+0x3c28>
   1cd24:	ldr	r3, [sp, #308]	; 0x134
   1cd28:	mov	r4, r0
   1cd2c:	cmp	r3, #0
   1cd30:	bne	1cd68 <_start@@Base+0x7fc4>
   1cd34:	ldr	r0, [r5]
   1cd38:	bl	21d64 <flatcc_builder_end_offset_vector@@Base>
   1cd3c:	cmp	r0, #0
   1cd40:	str	r0, [sp, #312]	; 0x138
   1cd44:	beq	1b680 <_start@@Base+0x68dc>
   1cd48:	mov	r1, #11
   1cd4c:	ldr	r0, [r5]
   1cd50:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1cd54:	cmp	r0, #0
   1cd58:	beq	1b680 <_start@@Base+0x68dc>
   1cd5c:	ldr	r3, [sp, #312]	; 0x138
   1cd60:	str	r3, [r0]
   1cd64:	b	1b418 <_start@@Base+0x6674>
   1cd68:	add	r3, sp, #312	; 0x138
   1cd6c:	mov	r1, r4
   1cd70:	mov	r2, r6
   1cd74:	mov	r0, r5
   1cd78:	bl	1b278 <_start@@Base+0x64d4>
   1cd7c:	ldr	r3, [sp, #312]	; 0x138
   1cd80:	mov	r4, r0
   1cd84:	cmp	r3, #0
   1cd88:	beq	1b680 <_start@@Base+0x68dc>
   1cd8c:	mov	r1, #1
   1cd90:	ldr	r0, [r5]
   1cd94:	bl	20fd0 <flatcc_builder_extend_offset_vector@@Base>
   1cd98:	cmp	r0, #0
   1cd9c:	beq	1b680 <_start@@Base+0x68dc>
   1cda0:	ldr	r3, [sp, #312]	; 0x138
   1cda4:	mov	r2, r6
   1cda8:	mov	r1, r4
   1cdac:	str	r3, [r0]
   1cdb0:	mov	r3, r7
   1cdb4:	mov	r0, r5
   1cdb8:	bl	169d8 <_start@@Base+0x1c34>
   1cdbc:	b	1cd24 <_start@@Base+0x7f80>
   1cdc0:	mov	r1, r0
   1cdc4:	mov	r2, r6
   1cdc8:	mov	r0, r5
   1cdcc:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1cdd0:	mov	r4, r0
   1cdd4:	b	1b418 <_start@@Base+0x6674>
   1cdd8:	mov	r2, r6
   1cddc:	mov	r1, r7
   1cde0:	mov	r0, r5
   1cde4:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1cde8:	mov	r4, r0
   1cdec:	b	1b418 <_start@@Base+0x6674>
   1cdf0:	mov	r2, r6
   1cdf4:	mov	r1, r8
   1cdf8:	mov	r0, r5
   1cdfc:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1ce00:	mov	r4, r0
   1ce04:	b	1b418 <_start@@Base+0x6674>
   1ce08:	add	r3, pc, #608	; 0x260
   1ce0c:	ldrd	r2, [r3]
   1ce10:	cmp	r1, r3
   1ce14:	cmpeq	r0, r2
   1ce18:	bhi	1d254 <_start@@Base+0x84b0>
   1ce1c:	add	r3, pc, #596	; 0x254
   1ce20:	ldrd	r2, [r3]
   1ce24:	cmp	r1, r3
   1ce28:	cmpeq	r0, r2
   1ce2c:	bne	1d15c <_start@@Base+0x83b8>
   1ce30:	add	r8, r7, #8
   1ce34:	ldr	r7, [pc, #604]	; 1d098 <_start@@Base+0x82f4>
   1ce38:	mov	r1, r6
   1ce3c:	mov	r0, r8
   1ce40:	mov	r9, #0
   1ce44:	bl	14e98 <_start@@Base+0xf4>
   1ce48:	str	r9, [sp, #192]	; 0xc0
   1ce4c:	mov	r2, #0
   1ce50:	and	r3, r1, r7
   1ce54:	str	r3, [sp, #196]	; 0xc4
   1ce58:	ldr	r3, [pc, #572]	; 1d09c <_start@@Base+0x82f8>
   1ce5c:	ldrd	r0, [sp, #192]	; 0xc0
   1ce60:	cmp	r1, r3
   1ce64:	cmpeq	r0, r2
   1ce68:	bne	1d144 <_start@@Base+0x83a0>
   1ce6c:	mov	r3, #2
   1ce70:	mov	r2, r6
   1ce74:	mov	r1, r8
   1ce78:	mov	r0, r5
   1ce7c:	bl	18228 <_start@@Base+0x3484>
   1ce80:	cmp	r8, r0
   1ce84:	mov	r4, r0
   1ce88:	beq	1d12c <_start@@Base+0x8388>
   1ce8c:	mov	r1, #3
   1ce90:	ldr	r0, [r5]
   1ce94:	str	r9, [sp, #312]	; 0x138
   1ce98:	bl	21480 <flatcc_builder_start_table@@Base>
   1ce9c:	cmp	r0, r9
   1cea0:	bne	1cef0 <_start@@Base+0x814c>
   1cea4:	add	r9, pc, #468	; 0x1d4
   1cea8:	ldrd	r8, [r9]
   1ceac:	mov	r1, r4
   1ceb0:	add	r3, sp, #324	; 0x144
   1ceb4:	mov	r2, r6
   1ceb8:	mov	r0, r5
   1cebc:	bl	180d4 <_start@@Base+0x3330>
   1cec0:	mov	r4, r0
   1cec4:	ldr	r3, [sp, #324]	; 0x144
   1cec8:	cmp	r3, #0
   1cecc:	bne	1cf34 <_start@@Base+0x8190>
   1ced0:	ldr	r3, [r5, #20]
   1ced4:	cmp	r3, #0
   1ced8:	bne	1cef0 <_start@@Base+0x814c>
   1cedc:	ldr	r0, [r5]
   1cee0:	bl	21aa8 <flatcc_builder_end_table@@Base>
   1cee4:	cmp	r0, #0
   1cee8:	str	r0, [sp, #312]	; 0x138
   1ceec:	bne	1cf08 <_start@@Base+0x8164>
   1cef0:	mov	r1, r4
   1cef4:	mov	r3, #33	; 0x21
   1cef8:	mov	r2, r6
   1cefc:	mov	r0, r5
   1cf00:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1cf04:	mov	r4, r0
   1cf08:	ldr	r3, [sp, #312]	; 0x138
   1cf0c:	cmp	r3, #0
   1cf10:	beq	1b680 <_start@@Base+0x68dc>
   1cf14:	mov	r1, #35	; 0x23
   1cf18:	ldr	r0, [r5]
   1cf1c:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1cf20:	cmp	r0, #0
   1cf24:	beq	1b680 <_start@@Base+0x68dc>
   1cf28:	ldr	r3, [sp, #312]	; 0x138
   1cf2c:	str	r3, [r0]
   1cf30:	b	1b418 <_start@@Base+0x6674>
   1cf34:	mov	r2, r6
   1cf38:	mov	r1, r4
   1cf3c:	mov	r0, r5
   1cf40:	bl	174dc <_start@@Base+0x2738>
   1cf44:	mov	r1, r6
   1cf48:	mov	r4, r0
   1cf4c:	bl	14e98 <_start@@Base+0xf4>
   1cf50:	add	r3, pc, #304	; 0x130
   1cf54:	ldrd	r2, [r3]
   1cf58:	cmp	r1, r3
   1cf5c:	cmpeq	r0, r2
   1cf60:	bhi	1cffc <_start@@Base+0x8258>
   1cf64:	mov	sl, #0
   1cf68:	str	sl, [sp, #200]	; 0xc8
   1cf6c:	str	r1, [sp, #204]	; 0xcc
   1cf70:	ldrd	r2, [sp, #200]	; 0xc8
   1cf74:	cmp	r3, r9
   1cf78:	cmpeq	r2, r8
   1cf7c:	bne	1d114 <_start@@Base+0x8370>
   1cf80:	mov	r1, r4
   1cf84:	mov	r3, #4
   1cf88:	mov	r2, r6
   1cf8c:	mov	r0, r5
   1cf90:	bl	18228 <_start@@Base+0x3484>
   1cf94:	cmp	r4, r0
   1cf98:	mov	r1, r0
   1cf9c:	beq	1d114 <_start@@Base+0x8370>
   1cfa0:	add	r3, sp, #328	; 0x148
   1cfa4:	mov	r2, r6
   1cfa8:	str	sl, [sp]
   1cfac:	mov	r0, r5
   1cfb0:	bl	25c74 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1cfb4:	ldr	r3, [sp, #328]	; 0x148
   1cfb8:	mov	r4, r0
   1cfbc:	cmp	r3, sl
   1cfc0:	beq	1cef0 <_start@@Base+0x814c>
   1cfc4:	mov	r1, sl
   1cfc8:	ldr	r0, [r5]
   1cfcc:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1cfd0:	cmp	r0, #0
   1cfd4:	beq	1cef0 <_start@@Base+0x814c>
   1cfd8:	ldr	r3, [sp, #328]	; 0x148
   1cfdc:	str	r3, [r0]
   1cfe0:	mov	r1, r4
   1cfe4:	add	r3, sp, #324	; 0x144
   1cfe8:	mov	r2, r6
   1cfec:	mov	r0, r5
   1cff0:	bl	16a90 <_start@@Base+0x1cec>
   1cff4:	mov	r4, r0
   1cff8:	b	1cec4 <_start@@Base+0x8120>
   1cffc:	bic	r3, r0, #255	; 0xff
   1d000:	add	fp, pc, #136	; 0x88
   1d004:	ldrd	sl, [fp]
   1d008:	str	r3, [sp, #208]	; 0xd0
   1d00c:	str	r1, [sp, #212]	; 0xd4
   1d010:	ldrd	r2, [sp, #208]	; 0xd0
   1d014:	cmp	r3, fp
   1d018:	cmpeq	r2, sl
   1d01c:	bne	1d0a0 <_start@@Base+0x82fc>
   1d020:	mov	r1, r4
   1d024:	mov	r3, #7
   1d028:	mov	r2, r6
   1d02c:	mov	r0, r5
   1d030:	bl	18228 <_start@@Base+0x3484>
   1d034:	cmp	r4, r0
   1d038:	mov	r1, r0
   1d03c:	beq	1d114 <_start@@Base+0x8370>
   1d040:	mov	sl, #1
   1d044:	add	r3, sp, #328	; 0x148
   1d048:	mov	r2, r6
   1d04c:	mov	r0, r5
   1d050:	str	sl, [sp]
   1d054:	bl	25c74 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d058:	ldr	r3, [sp, #328]	; 0x148
   1d05c:	mov	r4, r0
   1d060:	cmp	r3, #0
   1d064:	b	1cfc0 <_start@@Base+0x821c>
   1d068:	cmnvs	r2, r5, ror #24
   1d06c:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1d070:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1d074:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d078:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1d07c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d080:	andeq	r0, r0, r0
   1d084:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1d088:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1d08c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1d090:	cmnvs	r4, r0, lsl #2
   1d094:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1d098:			; <UNDEFINED> instruction: 0xffff0000
   1d09c:	ldrtcc	r0, [r4], -r0
   1d0a0:	and	r3, r0, r7
   1d0a4:	str	r3, [sp, #216]	; 0xd8
   1d0a8:	str	r1, [sp, #220]	; 0xdc
   1d0ac:	add	r1, pc, #996	; 0x3e4
   1d0b0:	ldrd	r0, [r1]
   1d0b4:	ldrd	r2, [sp, #216]	; 0xd8
   1d0b8:	cmp	r3, r1
   1d0bc:	cmpeq	r2, r0
   1d0c0:	bne	1d114 <_start@@Base+0x8370>
   1d0c4:	mov	r1, r4
   1d0c8:	mov	r3, #6
   1d0cc:	mov	r2, r6
   1d0d0:	mov	r0, r5
   1d0d4:	bl	18228 <_start@@Base+0x3484>
   1d0d8:	cmp	r4, r0
   1d0dc:	mov	r1, r0
   1d0e0:	beq	1d114 <_start@@Base+0x8370>
   1d0e4:	mov	r3, #0
   1d0e8:	mov	r2, r6
   1d0ec:	mov	r0, r5
   1d0f0:	str	r3, [sp]
   1d0f4:	add	r3, sp, #328	; 0x148
   1d0f8:	bl	25c74 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d0fc:	ldr	r3, [sp, #328]	; 0x148
   1d100:	mov	r4, r0
   1d104:	cmp	r3, #0
   1d108:	beq	1cef0 <_start@@Base+0x814c>
   1d10c:	mov	r1, #2
   1d110:	b	1cfc8 <_start@@Base+0x8224>
   1d114:	mov	r1, r4
   1d118:	mov	r2, r6
   1d11c:	mov	r0, r5
   1d120:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d124:	mov	r4, r0
   1d128:	b	1cfe0 <_start@@Base+0x823c>
   1d12c:	mov	r1, r0
   1d130:	mov	r2, r6
   1d134:	mov	r0, r5
   1d138:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d13c:	mov	r4, r0
   1d140:	b	1b418 <_start@@Base+0x6674>
   1d144:	mov	r2, r6
   1d148:	mov	r1, r8
   1d14c:	mov	r0, r5
   1d150:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d154:	mov	r4, r0
   1d158:	b	1b418 <_start@@Base+0x6674>
   1d15c:	add	r3, pc, #828	; 0x33c
   1d160:	ldrd	r2, [r3]
   1d164:	cmp	r1, r3
   1d168:	cmpeq	r0, r2
   1d16c:	bne	1d23c <_start@@Base+0x8498>
   1d170:	mov	r3, #8
   1d174:	mov	r2, r6
   1d178:	mov	r1, r7
   1d17c:	mov	r0, r5
   1d180:	bl	18228 <_start@@Base+0x3484>
   1d184:	cmp	r7, r0
   1d188:	mov	r8, r0
   1d18c:	beq	1d224 <_start@@Base+0x8480>
   1d190:	mov	r3, #0
   1d194:	add	r7, sp, #328	; 0x148
   1d198:	mov	r1, r0
   1d19c:	mov	r2, r6
   1d1a0:	mov	r0, r5
   1d1a4:	strb	r3, [sp, #328]	; 0x148
   1d1a8:	mov	r3, r7
   1d1ac:	bl	18cb0 <_start@@Base+0x3f0c>
   1d1b0:	cmp	r8, r0
   1d1b4:	mov	r4, r0
   1d1b8:	bne	1d1e4 <_start@@Base+0x8440>
   1d1bc:	mov	r1, r0
   1d1c0:	ldr	r3, [pc, #760]	; 1d4c0 <_start@@Base+0x871c>
   1d1c4:	mov	r2, r6
   1d1c8:	mov	r0, r5
   1d1cc:	str	r7, [sp]
   1d1d0:	bl	1752c <_start@@Base+0x2788>
   1d1d4:	cmp	r6, r0
   1d1d8:	cmpne	r4, r0
   1d1dc:	mov	r4, r0
   1d1e0:	beq	1b680 <_start@@Base+0x68dc>
   1d1e4:	ldrb	r3, [sp, #328]	; 0x148
   1d1e8:	cmp	r3, #1
   1d1ec:	bne	1d1fc <_start@@Base+0x8458>
   1d1f0:	ldr	r3, [r5, #8]
   1d1f4:	tst	r3, #2
   1d1f8:	beq	1b418 <_start@@Base+0x6674>
   1d1fc:	mov	r3, #1
   1d200:	mov	r1, #15
   1d204:	ldr	r0, [r5]
   1d208:	mov	r2, r3
   1d20c:	bl	22404 <flatcc_builder_table_add@@Base>
   1d210:	cmp	r0, #0
   1d214:	beq	1b680 <_start@@Base+0x68dc>
   1d218:	ldrb	r3, [sp, #328]	; 0x148
   1d21c:	strb	r3, [r0]
   1d220:	b	1b418 <_start@@Base+0x6674>
   1d224:	mov	r2, r6
   1d228:	mov	r1, r7
   1d22c:	mov	r0, r5
   1d230:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d234:	mov	r4, r0
   1d238:	b	1b418 <_start@@Base+0x6674>
   1d23c:	mov	r2, r6
   1d240:	mov	r1, r7
   1d244:	mov	r0, r5
   1d248:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d24c:	mov	r4, r0
   1d250:	b	1b418 <_start@@Base+0x6674>
   1d254:	add	r3, pc, #588	; 0x24c
   1d258:	ldrd	r2, [r3]
   1d25c:	cmp	r1, r3
   1d260:	cmpeq	r0, r2
   1d264:	bhi	1d6a0 <_start@@Base+0x88fc>
   1d268:	add	r3, pc, #576	; 0x240
   1d26c:	ldrd	r2, [r3]
   1d270:	cmp	r1, r3
   1d274:	cmpeq	r0, r2
   1d278:	bne	1d688 <_start@@Base+0x88e4>
   1d27c:	add	r7, r7, #8
   1d280:	mov	r1, r6
   1d284:	mov	r0, r7
   1d288:	mov	r8, #0
   1d28c:	bl	14e98 <_start@@Base+0xf4>
   1d290:	and	r3, r1, #-16777216	; 0xff000000
   1d294:	str	r8, [sp, #224]	; 0xe0
   1d298:	str	r3, [sp, #228]	; 0xe4
   1d29c:	ldrd	r2, [sp, #224]	; 0xe0
   1d2a0:	cmp	r3, #2030043136	; 0x79000000
   1d2a4:	cmpeq	r2, #0
   1d2a8:	bne	1d670 <_start@@Base+0x88cc>
   1d2ac:	mov	r3, #1
   1d2b0:	mov	r2, r6
   1d2b4:	mov	r1, r7
   1d2b8:	mov	r0, r5
   1d2bc:	bl	18228 <_start@@Base+0x3484>
   1d2c0:	cmp	r7, r0
   1d2c4:	mov	r4, r0
   1d2c8:	beq	1d658 <_start@@Base+0x88b4>
   1d2cc:	mov	r1, #3
   1d2d0:	ldr	r0, [r5]
   1d2d4:	str	r8, [sp, #312]	; 0x138
   1d2d8:	bl	21480 <flatcc_builder_start_table@@Base>
   1d2dc:	cmp	r0, r8
   1d2e0:	bne	1d330 <_start@@Base+0x858c>
   1d2e4:	add	r9, pc, #460	; 0x1cc
   1d2e8:	ldrd	r8, [r9]
   1d2ec:	mov	r1, r4
   1d2f0:	add	r3, sp, #320	; 0x140
   1d2f4:	mov	r2, r6
   1d2f8:	mov	r0, r5
   1d2fc:	bl	180d4 <_start@@Base+0x3330>
   1d300:	mov	r4, r0
   1d304:	ldr	r3, [sp, #320]	; 0x140
   1d308:	cmp	r3, #0
   1d30c:	bne	1d374 <_start@@Base+0x85d0>
   1d310:	ldr	r3, [r5, #20]
   1d314:	cmp	r3, #0
   1d318:	bne	1d330 <_start@@Base+0x858c>
   1d31c:	ldr	r0, [r5]
   1d320:	bl	21aa8 <flatcc_builder_end_table@@Base>
   1d324:	cmp	r0, #0
   1d328:	str	r0, [sp, #312]	; 0x138
   1d32c:	bne	1d348 <_start@@Base+0x85a4>
   1d330:	mov	r1, r4
   1d334:	mov	r3, #33	; 0x21
   1d338:	mov	r2, r6
   1d33c:	mov	r0, r5
   1d340:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1d344:	mov	r4, r0
   1d348:	ldr	r3, [sp, #312]	; 0x138
   1d34c:	cmp	r3, #0
   1d350:	beq	1b680 <_start@@Base+0x68dc>
   1d354:	mov	r1, #14
   1d358:	ldr	r0, [r5]
   1d35c:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1d360:	cmp	r0, #0
   1d364:	beq	1b680 <_start@@Base+0x68dc>
   1d368:	ldr	r3, [sp, #312]	; 0x138
   1d36c:	str	r3, [r0]
   1d370:	b	1b418 <_start@@Base+0x6674>
   1d374:	mov	r2, r6
   1d378:	mov	r1, r4
   1d37c:	mov	r0, r5
   1d380:	bl	174dc <_start@@Base+0x2738>
   1d384:	mov	r1, r6
   1d388:	mov	r4, r0
   1d38c:	bl	14e98 <_start@@Base+0xf4>
   1d390:	ldr	r3, [pc, #300]	; 1d4c4 <_start@@Base+0x8720>
   1d394:	mvn	r2, #0
   1d398:	cmp	r1, r3
   1d39c:	cmpeq	r0, r2
   1d3a0:	bhi	1d4cc <_start@@Base+0x8728>
   1d3a4:	and	r3, r0, #-16777216	; 0xff000000
   1d3a8:	str	r3, [sp, #232]	; 0xe8
   1d3ac:	str	r1, [sp, #236]	; 0xec
   1d3b0:	ldrd	r2, [sp, #232]	; 0xe8
   1d3b4:	cmp	r3, r9
   1d3b8:	cmpeq	r2, r8
   1d3bc:	bne	1d640 <_start@@Base+0x889c>
   1d3c0:	mov	r3, #5
   1d3c4:	mov	r2, r6
   1d3c8:	mov	r1, r4
   1d3cc:	mov	r0, r5
   1d3d0:	bl	18228 <_start@@Base+0x3484>
   1d3d4:	cmp	r4, r0
   1d3d8:	mov	r7, r0
   1d3dc:	beq	1d640 <_start@@Base+0x889c>
   1d3e0:	add	r2, sp, #328	; 0x148
   1d3e4:	mov	r3, #0
   1d3e8:	mov	r1, r0
   1d3ec:	mov	sl, r2
   1d3f0:	mov	r0, r5
   1d3f4:	strh	r3, [r2]
   1d3f8:	mov	r3, r2
   1d3fc:	mov	r2, r6
   1d400:	bl	18b80 <_start@@Base+0x3ddc>
   1d404:	cmp	r7, r0
   1d408:	mov	r4, r0
   1d40c:	bne	1d438 <_start@@Base+0x8694>
   1d410:	mov	r1, r0
   1d414:	ldr	r3, [pc, #172]	; 1d4c8 <_start@@Base+0x8724>
   1d418:	mov	r2, r6
   1d41c:	mov	r0, r5
   1d420:	str	sl, [sp]
   1d424:	bl	19280 <_start@@Base+0x44dc>
   1d428:	cmp	r6, r0
   1d42c:	cmpne	r4, r0
   1d430:	mov	r4, r0
   1d434:	beq	1d330 <_start@@Base+0x858c>
   1d438:	add	r3, sp, #328	; 0x148
   1d43c:	ldrh	r3, [r3]
   1d440:	cmp	r3, #0
   1d444:	bne	1d454 <_start@@Base+0x86b0>
   1d448:	ldr	r3, [r5, #8]
   1d44c:	tst	r3, #2
   1d450:	beq	1d47c <_start@@Base+0x86d8>
   1d454:	mov	r3, #2
   1d458:	ldr	r0, [r5]
   1d45c:	mov	r2, r3
   1d460:	mov	r1, r3
   1d464:	bl	22404 <flatcc_builder_table_add@@Base>
   1d468:	cmp	r0, #0
   1d46c:	beq	1d330 <_start@@Base+0x858c>
   1d470:	add	r3, sp, #328	; 0x148
   1d474:	ldrh	r3, [r3]
   1d478:	strh	r3, [r0]
   1d47c:	mov	r1, r4
   1d480:	add	r3, sp, #320	; 0x140
   1d484:	mov	r2, r6
   1d488:	mov	r0, r5
   1d48c:	bl	16a90 <_start@@Base+0x1cec>
   1d490:	mov	r4, r0
   1d494:	b	1d304 <_start@@Base+0x8560>
   1d498:	strbvs	r0, [r4, #-0]!
   1d49c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1d4a0:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1d4a4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d4a8:	ldrbvs	pc, [pc, #4095]!	; 1e4af <_start@@Base+0x970b>	; <UNPREDICTABLE>
   1d4ac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d4b0:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1d4b4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d4b8:	strvc	r0, [r0], #-0
   1d4bc:	cmnvs	pc, #461373440	; 0x1b800000
   1d4c0:	andeq	r4, r4, r0, asr #4
   1d4c4:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   1d4c8:	andeq	r4, r4, ip, asr #4
   1d4cc:	bic	r3, r1, #255	; 0xff
   1d4d0:	mov	r7, #0
   1d4d4:	add	fp, pc, #916	; 0x394
   1d4d8:	ldrd	sl, [fp]
   1d4dc:	str	r7, [sp, #240]	; 0xf0
   1d4e0:	str	r3, [sp, #244]	; 0xf4
   1d4e4:	ldrd	r2, [sp, #240]	; 0xf0
   1d4e8:	cmp	r3, fp
   1d4ec:	cmpeq	r2, sl
   1d4f0:	bne	1d5b8 <_start@@Base+0x8814>
   1d4f4:	mov	r3, #3
   1d4f8:	mov	r2, r6
   1d4fc:	mov	r1, r4
   1d500:	mov	r0, r5
   1d504:	bl	18228 <_start@@Base+0x3484>
   1d508:	cmp	r4, r0
   1d50c:	mov	r7, r0
   1d510:	beq	1d640 <_start@@Base+0x889c>
   1d514:	add	r1, sp, #328	; 0x148
   1d518:	mov	r2, #0
   1d51c:	mov	r3, #0
   1d520:	mov	sl, r1
   1d524:	mov	r0, r5
   1d528:	strd	r2, [r1]
   1d52c:	mov	r3, r1
   1d530:	mov	r2, r6
   1d534:	mov	r1, r7
   1d538:	bl	17430 <_start@@Base+0x268c>
   1d53c:	cmp	r7, r0
   1d540:	mov	r4, r0
   1d544:	bne	1d570 <_start@@Base+0x87cc>
   1d548:	mov	r1, r0
   1d54c:	ldr	r3, [pc, #820]	; 1d888 <_start@@Base+0x8ae4>
   1d550:	mov	r2, r6
   1d554:	mov	r0, r5
   1d558:	str	sl, [sp]
   1d55c:	bl	19f00 <_start@@Base+0x515c>
   1d560:	cmp	r6, r0
   1d564:	cmpne	r4, r0
   1d568:	mov	r4, r0
   1d56c:	beq	1d330 <_start@@Base+0x858c>
   1d570:	add	r3, sp, #328	; 0x148
   1d574:	ldrd	r2, [r3]
   1d578:	orrs	r3, r2, r3
   1d57c:	bne	1d58c <_start@@Base+0x87e8>
   1d580:	ldr	r3, [r5, #8]
   1d584:	tst	r3, #2
   1d588:	beq	1d47c <_start@@Base+0x86d8>
   1d58c:	mov	r3, #8
   1d590:	mov	r1, #1
   1d594:	ldr	r0, [r5]
   1d598:	mov	r2, r3
   1d59c:	bl	22404 <flatcc_builder_table_add@@Base>
   1d5a0:	cmp	r0, #0
   1d5a4:	beq	1d330 <_start@@Base+0x858c>
   1d5a8:	add	r3, sp, #328	; 0x148
   1d5ac:	ldrd	r2, [r3]
   1d5b0:	strd	r2, [r0]
   1d5b4:	b	1d47c <_start@@Base+0x86d8>
   1d5b8:	lsr	r3, r1, #16
   1d5bc:	str	r7, [sp, #32]
   1d5c0:	mov	r2, #0
   1d5c4:	lsl	r3, r3, #16
   1d5c8:	str	r3, [sp, #36]	; 0x24
   1d5cc:	ldr	r3, [pc, #696]	; 1d88c <_start@@Base+0x8ae8>
   1d5d0:	ldrd	r0, [sp, #32]
   1d5d4:	cmp	r1, r3
   1d5d8:	cmpeq	r0, r2
   1d5dc:	bne	1d640 <_start@@Base+0x889c>
   1d5e0:	mov	r1, r4
   1d5e4:	mov	r3, #2
   1d5e8:	mov	r2, r6
   1d5ec:	mov	r0, r5
   1d5f0:	bl	18228 <_start@@Base+0x3484>
   1d5f4:	cmp	r4, r0
   1d5f8:	mov	r1, r0
   1d5fc:	beq	1d640 <_start@@Base+0x889c>
   1d600:	add	r3, sp, #324	; 0x144
   1d604:	mov	r2, r6
   1d608:	mov	r0, r5
   1d60c:	bl	25f9c <flatcc_json_parser_build_string@@Base>
   1d610:	ldr	r3, [sp, #324]	; 0x144
   1d614:	mov	r4, r0
   1d618:	cmp	r3, #0
   1d61c:	beq	1d330 <_start@@Base+0x858c>
   1d620:	mov	r1, r7
   1d624:	ldr	r0, [r5]
   1d628:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1d62c:	cmp	r0, #0
   1d630:	beq	1d330 <_start@@Base+0x858c>
   1d634:	ldr	r3, [sp, #324]	; 0x144
   1d638:	str	r3, [r0]
   1d63c:	b	1d47c <_start@@Base+0x86d8>
   1d640:	mov	r1, r4
   1d644:	mov	r2, r6
   1d648:	mov	r0, r5
   1d64c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d650:	mov	r4, r0
   1d654:	b	1d47c <_start@@Base+0x86d8>
   1d658:	mov	r1, r0
   1d65c:	mov	r2, r6
   1d660:	mov	r0, r5
   1d664:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d668:	mov	r4, r0
   1d66c:	b	1b418 <_start@@Base+0x6674>
   1d670:	mov	r2, r6
   1d674:	mov	r1, r7
   1d678:	mov	r0, r5
   1d67c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d680:	mov	r4, r0
   1d684:	b	1b418 <_start@@Base+0x6674>
   1d688:	mov	r2, r6
   1d68c:	mov	r1, r7
   1d690:	mov	r0, r5
   1d694:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d698:	mov	r4, r0
   1d69c:	b	1b418 <_start@@Base+0x6674>
   1d6a0:	lsr	r3, r0, #16
   1d6a4:	str	r1, [sp, #44]	; 0x2c
   1d6a8:	lsl	r3, r3, #16
   1d6ac:	str	r3, [sp, #40]	; 0x28
   1d6b0:	add	r3, pc, #448	; 0x1c0
   1d6b4:	ldrd	r2, [r3]
   1d6b8:	ldrd	r0, [sp, #40]	; 0x28
   1d6bc:	cmp	r1, r3
   1d6c0:	cmpeq	r0, r2
   1d6c4:	bne	1d79c <_start@@Base+0x89f8>
   1d6c8:	mov	r3, #6
   1d6cc:	mov	r2, r6
   1d6d0:	mov	r1, r7
   1d6d4:	mov	r0, r5
   1d6d8:	bl	18228 <_start@@Base+0x3484>
   1d6dc:	cmp	r7, r0
   1d6e0:	mov	r8, r0
   1d6e4:	beq	1d784 <_start@@Base+0x89e0>
   1d6e8:	mov	r3, #0
   1d6ec:	add	r7, sp, #328	; 0x148
   1d6f0:	mov	r1, r0
   1d6f4:	mov	r2, r6
   1d6f8:	mov	r0, r5
   1d6fc:	str	r3, [sp, #328]	; 0x148
   1d700:	mov	r3, r7
   1d704:	bl	25418 <flatcc_json_parser_float@@Base>
   1d708:	cmp	r8, r0
   1d70c:	mov	r4, r0
   1d710:	bne	1d73c <_start@@Base+0x8998>
   1d714:	mov	r1, r0
   1d718:	ldr	r3, [pc, #368]	; 1d890 <_start@@Base+0x8aec>
   1d71c:	mov	r2, r6
   1d720:	mov	r0, r5
   1d724:	str	r7, [sp]
   1d728:	bl	1762c <_start@@Base+0x2888>
   1d72c:	cmp	r6, r0
   1d730:	cmpne	r4, r0
   1d734:	mov	r4, r0
   1d738:	beq	1b680 <_start@@Base+0x68dc>
   1d73c:	vldr	s15, [pc, #316]	; 1d880 <_start@@Base+0x8adc>
   1d740:	vldr	s14, [sp, #328]	; 0x148
   1d744:	vcmp.f32	s14, s15
   1d748:	vmrs	APSR_nzcv, fpscr
   1d74c:	bne	1d75c <_start@@Base+0x89b8>
   1d750:	ldr	r3, [r5, #8]
   1d754:	tst	r3, #2
   1d758:	beq	1b418 <_start@@Base+0x6674>
   1d75c:	mov	r3, #4
   1d760:	mov	r1, #26
   1d764:	ldr	r0, [r5]
   1d768:	mov	r2, r3
   1d76c:	bl	22404 <flatcc_builder_table_add@@Base>
   1d770:	cmp	r0, #0
   1d774:	beq	1b680 <_start@@Base+0x68dc>
   1d778:	ldr	r3, [sp, #328]	; 0x148
   1d77c:	str	r3, [r0]
   1d780:	b	1b418 <_start@@Base+0x6674>
   1d784:	mov	r2, r6
   1d788:	mov	r1, r7
   1d78c:	mov	r0, r5
   1d790:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d794:	mov	r4, r0
   1d798:	b	1b418 <_start@@Base+0x6674>
   1d79c:	mov	r3, #5
   1d7a0:	mov	r2, r6
   1d7a4:	mov	r1, r7
   1d7a8:	mov	r0, r5
   1d7ac:	bl	18228 <_start@@Base+0x3484>
   1d7b0:	cmp	r7, r0
   1d7b4:	mov	r8, r0
   1d7b8:	beq	1d858 <_start@@Base+0x8ab4>
   1d7bc:	mov	r3, #0
   1d7c0:	add	r7, sp, #328	; 0x148
   1d7c4:	mov	r1, r0
   1d7c8:	mov	r2, r6
   1d7cc:	mov	r0, r5
   1d7d0:	str	r3, [sp, #328]	; 0x148
   1d7d4:	mov	r3, r7
   1d7d8:	bl	25418 <flatcc_json_parser_float@@Base>
   1d7dc:	cmp	r8, r0
   1d7e0:	mov	r4, r0
   1d7e4:	bne	1d810 <_start@@Base+0x8a6c>
   1d7e8:	mov	r1, r0
   1d7ec:	ldr	r3, [pc, #160]	; 1d894 <_start@@Base+0x8af0>
   1d7f0:	mov	r2, r6
   1d7f4:	mov	r0, r5
   1d7f8:	str	r7, [sp]
   1d7fc:	bl	1762c <_start@@Base+0x2888>
   1d800:	cmp	r6, r0
   1d804:	cmpne	r4, r0
   1d808:	mov	r4, r0
   1d80c:	beq	1b680 <_start@@Base+0x68dc>
   1d810:	vldr	s15, [pc, #108]	; 1d884 <_start@@Base+0x8ae0>
   1d814:	vldr	s14, [sp, #328]	; 0x148
   1d818:	vcmp.f32	s14, s15
   1d81c:	vmrs	APSR_nzcv, fpscr
   1d820:	bne	1d830 <_start@@Base+0x8a8c>
   1d824:	ldr	r3, [r5, #8]
   1d828:	tst	r3, #2
   1d82c:	beq	1b418 <_start@@Base+0x6674>
   1d830:	mov	r3, #4
   1d834:	mov	r1, #25
   1d838:	ldr	r0, [r5]
   1d83c:	mov	r2, r3
   1d840:	bl	22404 <flatcc_builder_table_add@@Base>
   1d844:	cmp	r0, #0
   1d848:	beq	1b680 <_start@@Base+0x68dc>
   1d84c:	ldr	r3, [sp, #328]	; 0x148
   1d850:	str	r3, [r0]
   1d854:	b	1b418 <_start@@Base+0x6674>
   1d858:	mov	r2, r6
   1d85c:	mov	r1, r7
   1d860:	mov	r0, r5
   1d864:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d868:	mov	r4, r0
   1d86c:	b	1b418 <_start@@Base+0x6674>
   1d870:	andeq	r0, r0, r0
   1d874:	strbtvc	r6, [r1], -r0, lsl #24
   1d878:	ldrtvs	r0, [r2], -r0
   1d87c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d880:	submi	r0, r0, r0
   1d884:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1d888:	andeq	r4, r4, r8, asr r2
   1d88c:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1d890:	andeq	r4, r4, r4, ror #4
   1d894:	andeq	r4, r4, r0, ror r2
   1d898:	add	r3, pc, #840	; 0x348
   1d89c:	ldrd	r2, [r3]
   1d8a0:	cmp	r1, r3
   1d8a4:	cmpeq	r0, r2
   1d8a8:	bhi	1d9bc <_start@@Base+0x8c18>
   1d8ac:	lsr	r3, r0, #16
   1d8b0:	str	r1, [sp, #52]	; 0x34
   1d8b4:	lsl	r3, r3, #16
   1d8b8:	str	r3, [sp, #48]	; 0x30
   1d8bc:	add	r3, pc, #812	; 0x32c
   1d8c0:	ldrd	r2, [r3]
   1d8c4:	ldrd	r0, [sp, #48]	; 0x30
   1d8c8:	cmp	r1, r3
   1d8cc:	cmpeq	r0, r2
   1d8d0:	bne	1d9a4 <_start@@Base+0x8c00>
   1d8d4:	mov	r3, #6
   1d8d8:	mov	r2, r6
   1d8dc:	mov	r1, r7
   1d8e0:	mov	r0, r5
   1d8e4:	bl	18228 <_start@@Base+0x3484>
   1d8e8:	cmp	r7, r0
   1d8ec:	mov	r8, r0
   1d8f0:	beq	1d98c <_start@@Base+0x8be8>
   1d8f4:	mov	r3, #0
   1d8f8:	add	r7, sp, #328	; 0x148
   1d8fc:	mov	r1, r0
   1d900:	mov	r2, r6
   1d904:	mov	r0, r5
   1d908:	str	r3, [sp, #328]	; 0x148
   1d90c:	mov	r3, r7
   1d910:	bl	25418 <flatcc_json_parser_float@@Base>
   1d914:	cmp	r8, r0
   1d918:	mov	r4, r0
   1d91c:	bne	1d948 <_start@@Base+0x8ba4>
   1d920:	mov	r1, r0
   1d924:	ldr	r3, [pc, #740]	; 1dc10 <_start@@Base+0x8e6c>
   1d928:	mov	r2, r6
   1d92c:	mov	r0, r5
   1d930:	str	r7, [sp]
   1d934:	bl	1762c <_start@@Base+0x2888>
   1d938:	cmp	r6, r0
   1d93c:	cmpne	r4, r0
   1d940:	mov	r4, r0
   1d944:	beq	1b680 <_start@@Base+0x68dc>
   1d948:	vldr	s15, [sp, #328]	; 0x148
   1d94c:	vcmp.f32	s15, #0.0
   1d950:	vmrs	APSR_nzcv, fpscr
   1d954:	bne	1d964 <_start@@Base+0x8bc0>
   1d958:	ldr	r3, [r5, #8]
   1d95c:	tst	r3, #2
   1d960:	beq	1b418 <_start@@Base+0x6674>
   1d964:	mov	r3, #4
   1d968:	mov	r1, #27
   1d96c:	ldr	r0, [r5]
   1d970:	mov	r2, r3
   1d974:	bl	22404 <flatcc_builder_table_add@@Base>
   1d978:	cmp	r0, #0
   1d97c:	beq	1b680 <_start@@Base+0x68dc>
   1d980:	ldr	r3, [sp, #328]	; 0x148
   1d984:	str	r3, [r0]
   1d988:	b	1b418 <_start@@Base+0x6674>
   1d98c:	mov	r2, r6
   1d990:	mov	r1, r7
   1d994:	mov	r0, r5
   1d998:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d99c:	mov	r4, r0
   1d9a0:	b	1b418 <_start@@Base+0x6674>
   1d9a4:	mov	r2, r6
   1d9a8:	mov	r1, r7
   1d9ac:	mov	r0, r5
   1d9b0:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1d9b4:	mov	r4, r0
   1d9b8:	b	1b418 <_start@@Base+0x6674>
   1d9bc:	add	r3, pc, #564	; 0x234
   1d9c0:	ldrd	r2, [r3]
   1d9c4:	cmp	r1, r3
   1d9c8:	cmpeq	r0, r2
   1d9cc:	bne	1e268 <_start@@Base+0x94c4>
   1d9d0:	add	r7, r7, #8
   1d9d4:	mov	r1, r6
   1d9d8:	mov	r0, r7
   1d9dc:	bl	14e98 <_start@@Base+0xf4>
   1d9e0:	add	r3, pc, #536	; 0x218
   1d9e4:	ldrd	r2, [r3]
   1d9e8:	cmp	r1, r3
   1d9ec:	cmpeq	r0, r2
   1d9f0:	bhi	1dc1c <_start@@Base+0x8e78>
   1d9f4:	add	r3, pc, #524	; 0x20c
   1d9f8:	ldrd	r2, [r3]
   1d9fc:	cmp	r1, r3
   1da00:	cmpeq	r0, r2
   1da04:	bne	1dbd0 <_start@@Base+0x8e2c>
   1da08:	mov	r3, #8
   1da0c:	mov	r2, r6
   1da10:	mov	r1, r7
   1da14:	mov	r0, r5
   1da18:	bl	18228 <_start@@Base+0x3484>
   1da1c:	cmp	r7, r0
   1da20:	mov	r8, r0
   1da24:	beq	1dabc <_start@@Base+0x8d18>
   1da28:	mov	r3, #0
   1da2c:	add	r7, sp, #328	; 0x148
   1da30:	mov	r1, r0
   1da34:	mov	r2, r6
   1da38:	mov	r0, r5
   1da3c:	str	r3, [sp, #328]	; 0x148
   1da40:	mov	r3, r7
   1da44:	bl	18e60 <_start@@Base+0x40bc>
   1da48:	cmp	r8, r0
   1da4c:	mov	r4, r0
   1da50:	bne	1da7c <_start@@Base+0x8cd8>
   1da54:	mov	r1, r0
   1da58:	ldr	r3, [pc, #436]	; 1dc14 <_start@@Base+0x8e70>
   1da5c:	mov	r2, r6
   1da60:	mov	r0, r5
   1da64:	str	r7, [sp]
   1da68:	bl	1939c <_start@@Base+0x45f8>
   1da6c:	cmp	r6, r0
   1da70:	cmpne	r4, r0
   1da74:	mov	r4, r0
   1da78:	beq	1b680 <_start@@Base+0x68dc>
   1da7c:	ldr	r3, [sp, #328]	; 0x148
   1da80:	cmp	r3, #0
   1da84:	bne	1da94 <_start@@Base+0x8cf0>
   1da88:	ldr	r3, [r5, #8]
   1da8c:	tst	r3, #2
   1da90:	beq	1b418 <_start@@Base+0x6674>
   1da94:	mov	r3, #4
   1da98:	mov	r1, #16
   1da9c:	ldr	r0, [r5]
   1daa0:	mov	r2, r3
   1daa4:	bl	22404 <flatcc_builder_table_add@@Base>
   1daa8:	cmp	r0, #0
   1daac:	beq	1b680 <_start@@Base+0x68dc>
   1dab0:	ldr	r3, [sp, #328]	; 0x148
   1dab4:	str	r3, [r0]
   1dab8:	b	1b418 <_start@@Base+0x6674>
   1dabc:	add	r7, r7, #8
   1dac0:	mov	r1, r6
   1dac4:	mov	r0, r7
   1dac8:	bl	14e98 <_start@@Base+0xf4>
   1dacc:	mov	r3, #0
   1dad0:	str	r3, [sp, #248]	; 0xf8
   1dad4:	and	r3, r1, #-16777216	; 0xff000000
   1dad8:	str	r3, [sp, #252]	; 0xfc
   1dadc:	ldrd	r2, [sp, #248]	; 0xf8
   1dae0:	cmp	r3, #1627389952	; 0x61000000
   1dae4:	cmpeq	r2, #0
   1dae8:	bne	1dbb8 <_start@@Base+0x8e14>
   1daec:	mov	r3, #1
   1daf0:	mov	r2, r6
   1daf4:	mov	r1, r7
   1daf8:	mov	r0, r5
   1dafc:	bl	18228 <_start@@Base+0x3484>
   1db00:	cmp	r7, r0
   1db04:	mov	r8, r0
   1db08:	beq	1dba0 <_start@@Base+0x8dfc>
   1db0c:	mov	r3, #0
   1db10:	add	r7, sp, #328	; 0x148
   1db14:	mov	r1, r0
   1db18:	mov	r2, r6
   1db1c:	mov	r0, r5
   1db20:	str	r3, [sp, #328]	; 0x148
   1db24:	mov	r3, r7
   1db28:	bl	18e60 <_start@@Base+0x40bc>
   1db2c:	cmp	r8, r0
   1db30:	mov	r4, r0
   1db34:	bne	1db60 <_start@@Base+0x8dbc>
   1db38:	mov	r1, r0
   1db3c:	ldr	r3, [pc, #212]	; 1dc18 <_start@@Base+0x8e74>
   1db40:	mov	r2, r6
   1db44:	mov	r0, r5
   1db48:	str	r7, [sp]
   1db4c:	bl	1939c <_start@@Base+0x45f8>
   1db50:	cmp	r6, r0
   1db54:	cmpne	r4, r0
   1db58:	mov	r4, r0
   1db5c:	beq	1b680 <_start@@Base+0x68dc>
   1db60:	ldr	r3, [sp, #328]	; 0x148
   1db64:	cmp	r3, #0
   1db68:	bne	1db78 <_start@@Base+0x8dd4>
   1db6c:	ldr	r3, [r5, #8]
   1db70:	tst	r3, #2
   1db74:	beq	1b418 <_start@@Base+0x6674>
   1db78:	mov	r3, #4
   1db7c:	mov	r1, #20
   1db80:	ldr	r0, [r5]
   1db84:	mov	r2, r3
   1db88:	bl	22404 <flatcc_builder_table_add@@Base>
   1db8c:	cmp	r0, #0
   1db90:	beq	1b680 <_start@@Base+0x68dc>
   1db94:	ldr	r3, [sp, #328]	; 0x148
   1db98:	str	r3, [r0]
   1db9c:	b	1b418 <_start@@Base+0x6674>
   1dba0:	mov	r1, r0
   1dba4:	mov	r2, r6
   1dba8:	mov	r0, r5
   1dbac:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1dbb0:	mov	r4, r0
   1dbb4:	b	1b418 <_start@@Base+0x6674>
   1dbb8:	mov	r2, r6
   1dbbc:	mov	r1, r7
   1dbc0:	mov	r0, r5
   1dbc4:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1dbc8:	mov	r4, r0
   1dbcc:	b	1b418 <_start@@Base+0x6674>
   1dbd0:	mov	r2, r6
   1dbd4:	mov	r1, r7
   1dbd8:	mov	r0, r5
   1dbdc:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1dbe0:	mov	r4, r0
   1dbe4:	b	1b418 <_start@@Base+0x6674>
   1dbe8:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1dbec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dbf0:	ldrtvs	r0, [r3], -r0
   1dbf4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dbf8:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1dbfc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dc00:			; <UNDEFINED> instruction: 0x666e7630
   1dc04:	teqvc	r6, #1593835520	; 0x5f000000
   1dc08:			; <UNDEFINED> instruction: 0x666e7631
   1dc0c:	teqvc	r3, #-268435451	; 0xf0000005
   1dc10:	andeq	r4, r4, ip, ror r2
   1dc14:	andeq	r4, r4, r8, lsl #5
   1dc18:	muleq	r4, r4, r2
   1dc1c:	add	r3, pc, #1004	; 0x3ec
   1dc20:	ldrd	r2, [r3]
   1dc24:	cmp	r1, r3
   1dc28:	cmpeq	r0, r2
   1dc2c:	bhi	1de48 <_start@@Base+0x90a4>
   1dc30:	add	r3, pc, #992	; 0x3e0
   1dc34:	ldrd	r2, [r3]
   1dc38:	cmp	r1, r3
   1dc3c:	cmpeq	r0, r2
   1dc40:	bne	1de30 <_start@@Base+0x908c>
   1dc44:	mov	r3, #8
   1dc48:	mov	r2, r6
   1dc4c:	mov	r1, r7
   1dc50:	mov	r0, r5
   1dc54:	bl	18228 <_start@@Base+0x3484>
   1dc58:	cmp	r7, r0
   1dc5c:	mov	r8, r0
   1dc60:	beq	1dd08 <_start@@Base+0x8f64>
   1dc64:	add	r1, sp, #328	; 0x148
   1dc68:	mov	r2, #0
   1dc6c:	mov	r3, #0
   1dc70:	mov	r7, r1
   1dc74:	mov	r0, r5
   1dc78:	strd	r2, [r1]
   1dc7c:	mov	r3, r1
   1dc80:	mov	r2, r6
   1dc84:	mov	r1, r8
   1dc88:	bl	17430 <_start@@Base+0x268c>
   1dc8c:	cmp	r8, r0
   1dc90:	mov	r4, r0
   1dc94:	bne	1dcc0 <_start@@Base+0x8f1c>
   1dc98:	mov	r1, r0
   1dc9c:	ldr	r3, [pc, #900]	; 1e028 <_start@@Base+0x9284>
   1dca0:	mov	r2, r6
   1dca4:	mov	r0, r5
   1dca8:	str	r7, [sp]
   1dcac:	bl	19f00 <_start@@Base+0x515c>
   1dcb0:	cmp	r6, r0
   1dcb4:	cmpne	r4, r0
   1dcb8:	mov	r4, r0
   1dcbc:	beq	1b680 <_start@@Base+0x68dc>
   1dcc0:	add	r3, sp, #328	; 0x148
   1dcc4:	ldrd	r2, [r3]
   1dcc8:	orrs	r3, r2, r3
   1dccc:	bne	1dcdc <_start@@Base+0x8f38>
   1dcd0:	ldr	r3, [r5, #8]
   1dcd4:	tst	r3, #2
   1dcd8:	beq	1b418 <_start@@Base+0x6674>
   1dcdc:	mov	r3, #8
   1dce0:	mov	r1, #18
   1dce4:	ldr	r0, [r5]
   1dce8:	mov	r2, r3
   1dcec:	bl	22404 <flatcc_builder_table_add@@Base>
   1dcf0:	cmp	r0, #0
   1dcf4:	beq	1b680 <_start@@Base+0x68dc>
   1dcf8:	add	r3, sp, #328	; 0x148
   1dcfc:	ldrd	r2, [r3]
   1dd00:	strd	r2, [r0]
   1dd04:	b	1b418 <_start@@Base+0x6674>
   1dd08:	add	r7, r7, #8
   1dd0c:	mov	r1, r6
   1dd10:	mov	r0, r7
   1dd14:	bl	14e98 <_start@@Base+0xf4>
   1dd18:	mov	r3, #0
   1dd1c:	str	r3, [sp, #256]	; 0x100
   1dd20:	and	r3, r1, #-16777216	; 0xff000000
   1dd24:	str	r3, [sp, #260]	; 0x104
   1dd28:	add	r3, sp, #256	; 0x100
   1dd2c:	ldrd	r2, [r3]
   1dd30:	cmp	r3, #1627389952	; 0x61000000
   1dd34:	cmpeq	r2, #0
   1dd38:	bne	1de18 <_start@@Base+0x9074>
   1dd3c:	mov	r3, #1
   1dd40:	mov	r2, r6
   1dd44:	mov	r1, r7
   1dd48:	mov	r0, r5
   1dd4c:	bl	18228 <_start@@Base+0x3484>
   1dd50:	cmp	r7, r0
   1dd54:	mov	r8, r0
   1dd58:	beq	1de00 <_start@@Base+0x905c>
   1dd5c:	add	r1, sp, #328	; 0x148
   1dd60:	mov	r2, #0
   1dd64:	mov	r3, #0
   1dd68:	mov	r7, r1
   1dd6c:	mov	r0, r5
   1dd70:	strd	r2, [r1]
   1dd74:	mov	r3, r1
   1dd78:	mov	r2, r6
   1dd7c:	mov	r1, r8
   1dd80:	bl	17430 <_start@@Base+0x268c>
   1dd84:	cmp	r8, r0
   1dd88:	mov	r4, r0
   1dd8c:	bne	1ddb8 <_start@@Base+0x9014>
   1dd90:	mov	r1, r0
   1dd94:	ldr	r3, [pc, #656]	; 1e02c <_start@@Base+0x9288>
   1dd98:	mov	r2, r6
   1dd9c:	mov	r0, r5
   1dda0:	str	r7, [sp]
   1dda4:	bl	19f00 <_start@@Base+0x515c>
   1dda8:	cmp	r6, r0
   1ddac:	cmpne	r4, r0
   1ddb0:	mov	r4, r0
   1ddb4:	beq	1b680 <_start@@Base+0x68dc>
   1ddb8:	add	r3, sp, #328	; 0x148
   1ddbc:	ldrd	r2, [r3]
   1ddc0:	orrs	r3, r2, r3
   1ddc4:	bne	1ddd4 <_start@@Base+0x9030>
   1ddc8:	ldr	r3, [r5, #8]
   1ddcc:	tst	r3, #2
   1ddd0:	beq	1b418 <_start@@Base+0x6674>
   1ddd4:	mov	r3, #8
   1ddd8:	mov	r1, #22
   1dddc:	ldr	r0, [r5]
   1dde0:	mov	r2, r3
   1dde4:	bl	22404 <flatcc_builder_table_add@@Base>
   1dde8:	cmp	r0, #0
   1ddec:	beq	1b680 <_start@@Base+0x68dc>
   1ddf0:	add	r3, sp, #328	; 0x148
   1ddf4:	ldrd	r2, [r3]
   1ddf8:	strd	r2, [r0]
   1ddfc:	b	1b418 <_start@@Base+0x6674>
   1de00:	mov	r2, r6
   1de04:	mov	r1, r7
   1de08:	mov	r0, r5
   1de0c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1de10:	mov	r4, r0
   1de14:	b	1b418 <_start@@Base+0x6674>
   1de18:	mov	r2, r6
   1de1c:	mov	r1, r7
   1de20:	mov	r0, r5
   1de24:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1de28:	mov	r4, r0
   1de2c:	b	1b418 <_start@@Base+0x6674>
   1de30:	mov	r2, r6
   1de34:	mov	r1, r7
   1de38:	mov	r0, r5
   1de3c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1de40:	mov	r4, r0
   1de44:	b	1b418 <_start@@Base+0x6674>
   1de48:	add	r3, pc, #464	; 0x1d0
   1de4c:	ldrd	r2, [r3]
   1de50:	cmp	r1, r3
   1de54:	cmpeq	r0, r2
   1de58:	bne	1e050 <_start@@Base+0x92ac>
   1de5c:	mov	r3, #8
   1de60:	mov	r2, r6
   1de64:	mov	r1, r7
   1de68:	mov	r0, r5
   1de6c:	bl	18228 <_start@@Base+0x3484>
   1de70:	cmp	r7, r0
   1de74:	mov	r8, r0
   1de78:	beq	1df10 <_start@@Base+0x916c>
   1de7c:	mov	r3, #0
   1de80:	add	r7, sp, #328	; 0x148
   1de84:	mov	r1, r0
   1de88:	mov	r2, r6
   1de8c:	mov	r0, r5
   1de90:	str	r3, [sp, #328]	; 0x148
   1de94:	mov	r3, r7
   1de98:	bl	18ae4 <_start@@Base+0x3d40>
   1de9c:	cmp	r8, r0
   1dea0:	mov	r4, r0
   1dea4:	bne	1ded0 <_start@@Base+0x912c>
   1dea8:	mov	r1, r0
   1deac:	ldr	r3, [pc, #380]	; 1e030 <_start@@Base+0x928c>
   1deb0:	mov	r2, r6
   1deb4:	mov	r0, r5
   1deb8:	str	r7, [sp]
   1debc:	bl	1916c <_start@@Base+0x43c8>
   1dec0:	cmp	r6, r0
   1dec4:	cmpne	r4, r0
   1dec8:	mov	r4, r0
   1decc:	beq	1b680 <_start@@Base+0x68dc>
   1ded0:	ldr	r3, [sp, #328]	; 0x148
   1ded4:	cmp	r3, #0
   1ded8:	bne	1dee8 <_start@@Base+0x9144>
   1dedc:	ldr	r3, [r5, #8]
   1dee0:	tst	r3, #2
   1dee4:	beq	1b418 <_start@@Base+0x6674>
   1dee8:	mov	r3, #4
   1deec:	mov	r1, #17
   1def0:	ldr	r0, [r5]
   1def4:	mov	r2, r3
   1def8:	bl	22404 <flatcc_builder_table_add@@Base>
   1defc:	cmp	r0, #0
   1df00:	beq	1b680 <_start@@Base+0x68dc>
   1df04:	ldr	r3, [sp, #328]	; 0x148
   1df08:	str	r3, [r0]
   1df0c:	b	1b418 <_start@@Base+0x6674>
   1df10:	add	r7, r7, #8
   1df14:	mov	r1, r6
   1df18:	mov	r0, r7
   1df1c:	bl	14e98 <_start@@Base+0xf4>
   1df20:	mov	r3, #0
   1df24:	str	r3, [sp, #264]	; 0x108
   1df28:	and	r3, r1, #-16777216	; 0xff000000
   1df2c:	str	r3, [sp, #268]	; 0x10c
   1df30:	add	r3, sp, #264	; 0x108
   1df34:	ldrd	r2, [r3]
   1df38:	cmp	r3, #1627389952	; 0x61000000
   1df3c:	cmpeq	r2, #0
   1df40:	bne	1e038 <_start@@Base+0x9294>
   1df44:	mov	r3, #1
   1df48:	mov	r2, r6
   1df4c:	mov	r1, r7
   1df50:	mov	r0, r5
   1df54:	bl	18228 <_start@@Base+0x3484>
   1df58:	cmp	r7, r0
   1df5c:	mov	r8, r0
   1df60:	beq	1dff8 <_start@@Base+0x9254>
   1df64:	mov	r3, #0
   1df68:	add	r7, sp, #328	; 0x148
   1df6c:	mov	r1, r0
   1df70:	mov	r2, r6
   1df74:	mov	r0, r5
   1df78:	str	r3, [sp, #328]	; 0x148
   1df7c:	mov	r3, r7
   1df80:	bl	18ae4 <_start@@Base+0x3d40>
   1df84:	cmp	r8, r0
   1df88:	mov	r4, r0
   1df8c:	bne	1dfb8 <_start@@Base+0x9214>
   1df90:	mov	r1, r0
   1df94:	ldr	r3, [pc, #152]	; 1e034 <_start@@Base+0x9290>
   1df98:	mov	r2, r6
   1df9c:	mov	r0, r5
   1dfa0:	str	r7, [sp]
   1dfa4:	bl	1916c <_start@@Base+0x43c8>
   1dfa8:	cmp	r6, r0
   1dfac:	cmpne	r4, r0
   1dfb0:	mov	r4, r0
   1dfb4:	beq	1b680 <_start@@Base+0x68dc>
   1dfb8:	ldr	r3, [sp, #328]	; 0x148
   1dfbc:	cmp	r3, #0
   1dfc0:	bne	1dfd0 <_start@@Base+0x922c>
   1dfc4:	ldr	r3, [r5, #8]
   1dfc8:	tst	r3, #2
   1dfcc:	beq	1b418 <_start@@Base+0x6674>
   1dfd0:	mov	r3, #4
   1dfd4:	mov	r1, #21
   1dfd8:	ldr	r0, [r5]
   1dfdc:	mov	r2, r3
   1dfe0:	bl	22404 <flatcc_builder_table_add@@Base>
   1dfe4:	cmp	r0, #0
   1dfe8:	beq	1b680 <_start@@Base+0x68dc>
   1dfec:	ldr	r3, [sp, #328]	; 0x148
   1dff0:	str	r3, [r0]
   1dff4:	b	1b418 <_start@@Base+0x6674>
   1dff8:	mov	r2, r6
   1dffc:	mov	r1, r7
   1e000:	mov	r0, r5
   1e004:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e008:	mov	r4, r0
   1e00c:	b	1b418 <_start@@Base+0x6674>
   1e010:			; <UNDEFINED> instruction: 0x666e7630
   1e014:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1e018:			; <UNDEFINED> instruction: 0x666e7631
   1e01c:	teqvc	r6, #1593835520	; 0x5f000000
   1e020:			; <UNDEFINED> instruction: 0x666e7631
   1e024:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1e028:	andeq	r4, r4, r0, lsr #5
   1e02c:	andeq	r4, r4, ip, lsr #5
   1e030:			; <UNDEFINED> instruction: 0x000442b8
   1e034:	andeq	r4, r4, r4, asr #5
   1e038:	mov	r2, r6
   1e03c:	mov	r1, r7
   1e040:	mov	r0, r5
   1e044:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e048:	mov	r4, r0
   1e04c:	b	1b418 <_start@@Base+0x6674>
   1e050:	add	r3, pc, #976	; 0x3d0
   1e054:	ldrd	r2, [r3]
   1e058:	cmp	r1, r3
   1e05c:	cmpeq	r0, r2
   1e060:	bne	1e250 <_start@@Base+0x94ac>
   1e064:	mov	r3, #8
   1e068:	mov	r2, r6
   1e06c:	mov	r1, r7
   1e070:	mov	r0, r5
   1e074:	bl	18228 <_start@@Base+0x3484>
   1e078:	cmp	r7, r0
   1e07c:	mov	r8, r0
   1e080:	beq	1e128 <_start@@Base+0x9384>
   1e084:	add	r1, sp, #328	; 0x148
   1e088:	mov	r2, #0
   1e08c:	mov	r3, #0
   1e090:	mov	r7, r1
   1e094:	mov	r0, r5
   1e098:	strd	r2, [r1]
   1e09c:	mov	r3, r1
   1e0a0:	mov	r2, r6
   1e0a4:	mov	r1, r8
   1e0a8:	bl	18a54 <_start@@Base+0x3cb0>
   1e0ac:	cmp	r8, r0
   1e0b0:	mov	r4, r0
   1e0b4:	bne	1e0e0 <_start@@Base+0x933c>
   1e0b8:	mov	r1, r0
   1e0bc:	ldr	r3, [pc, #908]	; 1e450 <_start@@Base+0x96ac>
   1e0c0:	mov	r2, r6
   1e0c4:	mov	r0, r5
   1e0c8:	str	r7, [sp]
   1e0cc:	bl	18d50 <_start@@Base+0x3fac>
   1e0d0:	cmp	r6, r0
   1e0d4:	cmpne	r4, r0
   1e0d8:	mov	r4, r0
   1e0dc:	beq	1b680 <_start@@Base+0x68dc>
   1e0e0:	add	r3, sp, #328	; 0x148
   1e0e4:	ldrd	r2, [r3]
   1e0e8:	orrs	r3, r2, r3
   1e0ec:	bne	1e0fc <_start@@Base+0x9358>
   1e0f0:	ldr	r3, [r5, #8]
   1e0f4:	tst	r3, #2
   1e0f8:	beq	1b418 <_start@@Base+0x6674>
   1e0fc:	mov	r3, #8
   1e100:	mov	r1, #19
   1e104:	ldr	r0, [r5]
   1e108:	mov	r2, r3
   1e10c:	bl	22404 <flatcc_builder_table_add@@Base>
   1e110:	cmp	r0, #0
   1e114:	beq	1b680 <_start@@Base+0x68dc>
   1e118:	add	r3, sp, #328	; 0x148
   1e11c:	ldrd	r2, [r3]
   1e120:	strd	r2, [r0]
   1e124:	b	1b418 <_start@@Base+0x6674>
   1e128:	add	r8, r0, #8
   1e12c:	mov	r1, r6
   1e130:	mov	r0, r8
   1e134:	bl	14e98 <_start@@Base+0xf4>
   1e138:	mov	r3, #0
   1e13c:	str	r3, [sp, #272]	; 0x110
   1e140:	and	r3, r1, #-16777216	; 0xff000000
   1e144:	str	r3, [sp, #276]	; 0x114
   1e148:	add	r3, sp, #272	; 0x110
   1e14c:	ldrd	r2, [r3]
   1e150:	cmp	r3, #1627389952	; 0x61000000
   1e154:	cmpeq	r2, #0
   1e158:	bne	1e238 <_start@@Base+0x9494>
   1e15c:	mov	r3, #1
   1e160:	mov	r2, r6
   1e164:	mov	r1, r8
   1e168:	mov	r0, r5
   1e16c:	bl	18228 <_start@@Base+0x3484>
   1e170:	cmp	r8, r0
   1e174:	mov	r7, r0
   1e178:	beq	1e220 <_start@@Base+0x947c>
   1e17c:	add	r1, sp, #328	; 0x148
   1e180:	mov	r2, #0
   1e184:	mov	r3, #0
   1e188:	mov	r8, r1
   1e18c:	mov	r0, r5
   1e190:	strd	r2, [r1]
   1e194:	mov	r3, r1
   1e198:	mov	r2, r6
   1e19c:	mov	r1, r7
   1e1a0:	bl	18a54 <_start@@Base+0x3cb0>
   1e1a4:	cmp	r7, r0
   1e1a8:	mov	r4, r0
   1e1ac:	bne	1e1d8 <_start@@Base+0x9434>
   1e1b0:	mov	r1, r0
   1e1b4:	ldr	r3, [pc, #664]	; 1e454 <_start@@Base+0x96b0>
   1e1b8:	mov	r2, r6
   1e1bc:	mov	r0, r5
   1e1c0:	str	r8, [sp]
   1e1c4:	bl	18d50 <_start@@Base+0x3fac>
   1e1c8:	cmp	r6, r0
   1e1cc:	cmpne	r4, r0
   1e1d0:	mov	r4, r0
   1e1d4:	beq	1b680 <_start@@Base+0x68dc>
   1e1d8:	add	r3, sp, #328	; 0x148
   1e1dc:	ldrd	r2, [r3]
   1e1e0:	orrs	r3, r2, r3
   1e1e4:	bne	1e1f4 <_start@@Base+0x9450>
   1e1e8:	ldr	r3, [r5, #8]
   1e1ec:	tst	r3, #2
   1e1f0:	beq	1b418 <_start@@Base+0x6674>
   1e1f4:	mov	r3, #8
   1e1f8:	mov	r1, #23
   1e1fc:	ldr	r0, [r5]
   1e200:	mov	r2, r3
   1e204:	bl	22404 <flatcc_builder_table_add@@Base>
   1e208:	cmp	r0, #0
   1e20c:	beq	1b680 <_start@@Base+0x68dc>
   1e210:	add	r3, sp, #328	; 0x148
   1e214:	ldrd	r2, [r3]
   1e218:	strd	r2, [r0]
   1e21c:	b	1b418 <_start@@Base+0x6674>
   1e220:	mov	r2, r6
   1e224:	mov	r1, r8
   1e228:	mov	r0, r5
   1e22c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e230:	mov	r4, r0
   1e234:	b	1b418 <_start@@Base+0x6674>
   1e238:	mov	r2, r6
   1e23c:	mov	r1, r8
   1e240:	mov	r0, r5
   1e244:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e248:	mov	r4, r0
   1e24c:	b	1b418 <_start@@Base+0x6674>
   1e250:	mov	r2, r6
   1e254:	mov	r1, r7
   1e258:	mov	r0, r5
   1e25c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e260:	mov	r4, r0
   1e264:	b	1b418 <_start@@Base+0x6674>
   1e268:	add	r3, pc, #448	; 0x1c0
   1e26c:	ldrd	r2, [r3]
   1e270:	cmp	r1, r3
   1e274:	cmpeq	r0, r2
   1e278:	bhi	1e504 <_start@@Base+0x9760>
   1e27c:	add	r3, pc, #436	; 0x1b4
   1e280:	ldrd	r2, [r3]
   1e284:	cmp	r1, r3
   1e288:	cmpeq	r0, r2
   1e28c:	bne	1e4ec <_start@@Base+0x9748>
   1e290:	add	r4, r7, #8
   1e294:	mov	r1, r6
   1e298:	mov	r0, r4
   1e29c:	bl	14e98 <_start@@Base+0xf4>
   1e2a0:	add	r3, pc, #408	; 0x198
   1e2a4:	ldrd	r2, [r3]
   1e2a8:	cmp	r1, r3
   1e2ac:	cmpeq	r0, r2
   1e2b0:	bne	1e4d4 <_start@@Base+0x9730>
   1e2b4:	add	r7, r7, #16
   1e2b8:	mov	r1, r6
   1e2bc:	mov	r0, r7
   1e2c0:	bl	14e98 <_start@@Base+0xf4>
   1e2c4:	mov	r3, #0
   1e2c8:	str	r1, [sp, #284]	; 0x11c
   1e2cc:	add	r1, sp, #280	; 0x118
   1e2d0:	str	r3, [sp, #280]	; 0x118
   1e2d4:	add	r3, pc, #364	; 0x16c
   1e2d8:	ldrd	r2, [r3]
   1e2dc:	ldrd	r0, [r1]
   1e2e0:	cmp	r1, r3
   1e2e4:	cmpeq	r0, r2
   1e2e8:	bne	1e4bc <_start@@Base+0x9718>
   1e2ec:	mov	r3, #4
   1e2f0:	mov	r2, r6
   1e2f4:	mov	r1, r7
   1e2f8:	mov	r0, r5
   1e2fc:	bl	18228 <_start@@Base+0x3484>
   1e300:	cmp	r7, r0
   1e304:	mov	r4, r0
   1e308:	beq	1e4a4 <_start@@Base+0x9700>
   1e30c:	cmp	r6, r0
   1e310:	ldr	r0, [r5]
   1e314:	beq	1e45c <_start@@Base+0x96b8>
   1e318:	ldrb	r3, [r4]
   1e31c:	cmp	r3, #91	; 0x5b
   1e320:	bne	1e45c <_start@@Base+0x96b8>
   1e324:	mov	r2, #1
   1e328:	mvn	r3, #0
   1e32c:	mov	r1, r2
   1e330:	bl	21368 <flatcc_builder_start_vector@@Base>
   1e334:	subs	r7, r0, #0
   1e338:	bne	1b680 <_start@@Base+0x68dc>
   1e33c:	ldr	sl, [pc, #276]	; 1e458 <_start@@Base+0x96b4>
   1e340:	mov	r1, r4
   1e344:	add	r3, sp, #308	; 0x134
   1e348:	mov	r2, r6
   1e34c:	mov	r0, r5
   1e350:	bl	189cc <_start@@Base+0x3c28>
   1e354:	mov	r4, r0
   1e358:	ldr	r3, [sp, #308]	; 0x134
   1e35c:	ldr	r0, [r5]
   1e360:	cmp	r3, #0
   1e364:	bne	1e39c <_start@@Base+0x95f8>
   1e368:	bl	21cc4 <flatcc_builder_end_vector@@Base>
   1e36c:	str	r0, [sp, #312]	; 0x138
   1e370:	ldr	r3, [sp, #312]	; 0x138
   1e374:	cmp	r3, #0
   1e378:	beq	1b680 <_start@@Base+0x68dc>
   1e37c:	mov	r1, #13
   1e380:	ldr	r0, [r5]
   1e384:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1e388:	cmp	r0, #0
   1e38c:	beq	1b680 <_start@@Base+0x68dc>
   1e390:	ldr	r3, [sp, #312]	; 0x138
   1e394:	str	r3, [r0]
   1e398:	b	1b418 <_start@@Base+0x6674>
   1e39c:	mov	r1, #1
   1e3a0:	strb	r7, [sp, #328]	; 0x148
   1e3a4:	bl	20ea8 <flatcc_builder_extend_vector@@Base>
   1e3a8:	subs	fp, r0, #0
   1e3ac:	beq	1b680 <_start@@Base+0x68dc>
   1e3b0:	add	r9, sp, #328	; 0x148
   1e3b4:	mov	r1, r4
   1e3b8:	mov	r3, r9
   1e3bc:	mov	r2, r6
   1e3c0:	mov	r0, r5
   1e3c4:	bl	18c1c <_start@@Base+0x3e78>
   1e3c8:	cmp	r4, r0
   1e3cc:	mov	r8, r0
   1e3d0:	movne	r4, r0
   1e3d4:	bne	1e400 <_start@@Base+0x965c>
   1e3d8:	mov	r1, r4
   1e3dc:	mov	r3, sl
   1e3e0:	str	r9, [sp]
   1e3e4:	mov	r2, r6
   1e3e8:	mov	r0, r5
   1e3ec:	bl	19060 <_start@@Base+0x42bc>
   1e3f0:	cmp	r6, r0
   1e3f4:	cmpne	r8, r0
   1e3f8:	mov	r4, r0
   1e3fc:	beq	1b680 <_start@@Base+0x68dc>
   1e400:	ldrb	r3, [sp, #328]	; 0x148
   1e404:	mov	r1, r4
   1e408:	mov	r2, r6
   1e40c:	mov	r0, r5
   1e410:	strb	r3, [fp]
   1e414:	add	r3, sp, #308	; 0x134
   1e418:	bl	169d8 <_start@@Base+0x1c34>
   1e41c:	mov	r4, r0
   1e420:	b	1e358 <_start@@Base+0x95b4>
   1e424:	nop	{0}
   1e428:			; <UNDEFINED> instruction: 0x666e7631
   1e42c:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1e430:	svcvs	0x00725f6e
   1e434:			; <UNDEFINED> instruction: 0x76656374
   1e438:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1e43c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e440:	cmnvs	r4, r5, ror r2
   1e444:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1e448:	andeq	r0, r0, r0
   1e44c:			; <UNDEFINED> instruction: 0x66666572
   1e450:	ldrdeq	r4, [r4], -r0
   1e454:	ldrdeq	r4, [r4], -ip
   1e458:	andeq	r4, r4, r8, ror #5
   1e45c:	mov	r3, #0
   1e460:	mov	r2, r3
   1e464:	mov	r1, r3
   1e468:	bl	20ca4 <flatcc_builder_start_buffer@@Base>
   1e46c:	cmp	r0, #0
   1e470:	bne	1b680 <_start@@Base+0x68dc>
   1e474:	mov	r1, r4
   1e478:	add	r3, sp, #312	; 0x138
   1e47c:	mov	r2, r6
   1e480:	mov	r0, r5
   1e484:	bl	1b278 <_start@@Base+0x64d4>
   1e488:	ldr	r1, [sp, #312]	; 0x138
   1e48c:	mov	r4, r0
   1e490:	cmp	r1, #0
   1e494:	beq	1b680 <_start@@Base+0x68dc>
   1e498:	ldr	r0, [r5]
   1e49c:	bl	20d40 <flatcc_builder_end_buffer@@Base>
   1e4a0:	b	1e36c <_start@@Base+0x95c8>
   1e4a4:	mov	r1, r0
   1e4a8:	mov	r2, r6
   1e4ac:	mov	r0, r5
   1e4b0:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e4b4:	mov	r4, r0
   1e4b8:	b	1b418 <_start@@Base+0x6674>
   1e4bc:	mov	r2, r6
   1e4c0:	mov	r1, r7
   1e4c4:	mov	r0, r5
   1e4c8:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e4cc:	mov	r4, r0
   1e4d0:	b	1b418 <_start@@Base+0x6674>
   1e4d4:	mov	r1, r4
   1e4d8:	mov	r2, r6
   1e4dc:	mov	r0, r5
   1e4e0:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e4e4:	mov	r4, r0
   1e4e8:	b	1b418 <_start@@Base+0x6674>
   1e4ec:	mov	r2, r6
   1e4f0:	mov	r1, r7
   1e4f4:	mov	r0, r5
   1e4f8:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e4fc:	mov	r4, r0
   1e500:	b	1b418 <_start@@Base+0x6674>
   1e504:	add	r3, pc, #948	; 0x3b4
   1e508:	ldrd	r2, [r3]
   1e50c:	cmp	r1, r3
   1e510:	cmpeq	r0, r2
   1e514:	bne	1e850 <_start@@Base+0x9aac>
   1e518:	add	r8, r7, #8
   1e51c:	mov	r1, r6
   1e520:	mov	r0, r8
   1e524:	bl	14e98 <_start@@Base+0xf4>
   1e528:	add	r3, pc, #920	; 0x398
   1e52c:	ldrd	r2, [r3]
   1e530:	cmp	r1, r3
   1e534:	cmpeq	r0, r2
   1e538:	bne	1e6c8 <_start@@Base+0x9924>
   1e53c:	add	r7, r7, #16
   1e540:	mov	r1, r6
   1e544:	mov	r0, r7
   1e548:	bl	14e98 <_start@@Base+0xf4>
   1e54c:	mov	r3, #0
   1e550:	str	r3, [sp, #288]	; 0x120
   1e554:	and	r3, r1, #-16777216	; 0xff000000
   1e558:	str	r3, [sp, #292]	; 0x124
   1e55c:	add	r3, sp, #288	; 0x120
   1e560:	ldrd	r2, [r3]
   1e564:	cmp	r3, #1929379840	; 0x73000000
   1e568:	cmpeq	r2, #0
   1e56c:	bne	1e6b0 <_start@@Base+0x990c>
   1e570:	mov	r3, #1
   1e574:	mov	r2, r6
   1e578:	mov	r1, r7
   1e57c:	mov	r0, r5
   1e580:	bl	18228 <_start@@Base+0x3484>
   1e584:	cmp	r7, r0
   1e588:	mov	r4, r0
   1e58c:	beq	1e698 <_start@@Base+0x98f4>
   1e590:	mov	r2, #8
   1e594:	mvn	r3, #-536870912	; 0xe0000000
   1e598:	ldr	r0, [r5]
   1e59c:	mov	r1, r2
   1e5a0:	bl	21368 <flatcc_builder_start_vector@@Base>
   1e5a4:	cmp	r0, #0
   1e5a8:	bne	1b680 <_start@@Base+0x68dc>
   1e5ac:	vldr	d8, [pc, #796]	; 1e8d0 <_start@@Base+0x9b2c>
   1e5b0:	mov	r1, r4
   1e5b4:	add	r3, sp, #308	; 0x134
   1e5b8:	mov	r2, r6
   1e5bc:	mov	r0, r5
   1e5c0:	ldr	r9, [pc, #792]	; 1e8e0 <_start@@Base+0x9b3c>
   1e5c4:	bl	189cc <_start@@Base+0x3c28>
   1e5c8:	mov	r4, r0
   1e5cc:	ldr	r3, [sp, #308]	; 0x134
   1e5d0:	ldr	r0, [r5]
   1e5d4:	cmp	r3, #0
   1e5d8:	bne	1e60c <_start@@Base+0x9868>
   1e5dc:	bl	21cc4 <flatcc_builder_end_vector@@Base>
   1e5e0:	cmp	r0, #0
   1e5e4:	str	r0, [sp, #312]	; 0x138
   1e5e8:	beq	1b680 <_start@@Base+0x68dc>
   1e5ec:	mov	r1, #33	; 0x21
   1e5f0:	ldr	r0, [r5]
   1e5f4:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1e5f8:	cmp	r0, #0
   1e5fc:	beq	1b680 <_start@@Base+0x68dc>
   1e600:	ldr	r3, [sp, #312]	; 0x138
   1e604:	str	r3, [r0]
   1e608:	b	1b418 <_start@@Base+0x6674>
   1e60c:	mov	r1, #1
   1e610:	vstr	d8, [sp, #328]	; 0x148
   1e614:	bl	20ea8 <flatcc_builder_extend_vector@@Base>
   1e618:	subs	sl, r0, #0
   1e61c:	beq	1b680 <_start@@Base+0x68dc>
   1e620:	add	r8, sp, #328	; 0x148
   1e624:	mov	r1, r4
   1e628:	mov	r3, r8
   1e62c:	mov	r2, r6
   1e630:	mov	r0, r5
   1e634:	bl	25348 <flatcc_json_parser_double@@Base>
   1e638:	cmp	r4, r0
   1e63c:	mov	r7, r0
   1e640:	movne	r4, r0
   1e644:	bne	1e670 <_start@@Base+0x98cc>
   1e648:	mov	r1, r4
   1e64c:	mov	r3, r9
   1e650:	str	r8, [sp]
   1e654:	mov	r2, r6
   1e658:	mov	r0, r5
   1e65c:	bl	17704 <_start@@Base+0x2960>
   1e660:	cmp	r6, r0
   1e664:	cmpne	r7, r0
   1e668:	mov	r4, r0
   1e66c:	beq	1b680 <_start@@Base+0x68dc>
   1e670:	add	r3, sp, #328	; 0x148
   1e674:	ldrd	r2, [r3]
   1e678:	mov	r1, r4
   1e67c:	mov	r0, r5
   1e680:	strd	r2, [sl]
   1e684:	add	r3, sp, #308	; 0x134
   1e688:	mov	r2, r6
   1e68c:	bl	169d8 <_start@@Base+0x1c34>
   1e690:	mov	r4, r0
   1e694:	b	1e5cc <_start@@Base+0x9828>
   1e698:	mov	r1, r0
   1e69c:	mov	r2, r6
   1e6a0:	mov	r0, r5
   1e6a4:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e6a8:	mov	r4, r0
   1e6ac:	b	1b418 <_start@@Base+0x6674>
   1e6b0:	mov	r2, r6
   1e6b4:	mov	r1, r7
   1e6b8:	mov	r0, r5
   1e6bc:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e6c0:	mov	r4, r0
   1e6c4:	b	1b418 <_start@@Base+0x6674>
   1e6c8:	bic	r3, r0, #255	; 0xff
   1e6cc:	str	r1, [sp, #300]	; 0x12c
   1e6d0:	add	r1, sp, #296	; 0x128
   1e6d4:	str	r3, [sp, #296]	; 0x128
   1e6d8:	add	r3, pc, #504	; 0x1f8
   1e6dc:	ldrd	r2, [r3]
   1e6e0:	ldrd	r0, [r1]
   1e6e4:	cmp	r1, r3
   1e6e8:	cmpeq	r0, r2
   1e6ec:	bne	1e838 <_start@@Base+0x9a94>
   1e6f0:	mov	r3, #7
   1e6f4:	mov	r2, r6
   1e6f8:	mov	r1, r8
   1e6fc:	mov	r0, r5
   1e700:	bl	18228 <_start@@Base+0x3484>
   1e704:	cmp	r8, r0
   1e708:	mov	r4, r0
   1e70c:	beq	1e820 <_start@@Base+0x9a7c>
   1e710:	mov	r2, #8
   1e714:	mvn	r3, #-536870912	; 0xe0000000
   1e718:	ldr	r0, [r5]
   1e71c:	mov	r1, r2
   1e720:	bl	21368 <flatcc_builder_start_vector@@Base>
   1e724:	cmp	r0, #0
   1e728:	bne	1b680 <_start@@Base+0x68dc>
   1e72c:	ldr	r9, [pc, #432]	; 1e8e4 <_start@@Base+0x9b40>
   1e730:	mov	r1, r4
   1e734:	add	r3, sp, #308	; 0x134
   1e738:	mov	r2, r6
   1e73c:	mov	r0, r5
   1e740:	bl	189cc <_start@@Base+0x3c28>
   1e744:	mov	r4, r0
   1e748:	ldr	r3, [sp, #308]	; 0x134
   1e74c:	ldr	r0, [r5]
   1e750:	cmp	r3, #0
   1e754:	bne	1e788 <_start@@Base+0x99e4>
   1e758:	bl	21cc4 <flatcc_builder_end_vector@@Base>
   1e75c:	cmp	r0, #0
   1e760:	str	r0, [sp, #312]	; 0x138
   1e764:	beq	1b680 <_start@@Base+0x68dc>
   1e768:	mov	r1, #32
   1e76c:	ldr	r0, [r5]
   1e770:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   1e774:	cmp	r0, #0
   1e778:	beq	1b680 <_start@@Base+0x68dc>
   1e77c:	ldr	r3, [sp, #312]	; 0x138
   1e780:	str	r3, [r0]
   1e784:	b	1b418 <_start@@Base+0x6674>
   1e788:	mov	r2, #0
   1e78c:	mov	r3, #0
   1e790:	add	r1, sp, #328	; 0x148
   1e794:	strd	r2, [r1]
   1e798:	mov	r1, #1
   1e79c:	bl	20ea8 <flatcc_builder_extend_vector@@Base>
   1e7a0:	subs	sl, r0, #0
   1e7a4:	beq	1b680 <_start@@Base+0x68dc>
   1e7a8:	add	r8, sp, #328	; 0x148
   1e7ac:	mov	r1, r4
   1e7b0:	mov	r3, r8
   1e7b4:	mov	r2, r6
   1e7b8:	mov	r0, r5
   1e7bc:	bl	17430 <_start@@Base+0x268c>
   1e7c0:	cmp	r4, r0
   1e7c4:	mov	r7, r0
   1e7c8:	movne	r4, r0
   1e7cc:	bne	1e7f8 <_start@@Base+0x9a54>
   1e7d0:	mov	r1, r4
   1e7d4:	mov	r3, r9
   1e7d8:	str	r8, [sp]
   1e7dc:	mov	r2, r6
   1e7e0:	mov	r0, r5
   1e7e4:	bl	19f00 <_start@@Base+0x515c>
   1e7e8:	cmp	r6, r0
   1e7ec:	cmpne	r7, r0
   1e7f0:	mov	r4, r0
   1e7f4:	beq	1b680 <_start@@Base+0x68dc>
   1e7f8:	add	r3, sp, #328	; 0x148
   1e7fc:	mov	r1, r4
   1e800:	ldrd	r2, [r3]
   1e804:	mov	r0, r5
   1e808:	strd	r2, [sl]
   1e80c:	add	r3, sp, #308	; 0x134
   1e810:	mov	r2, r6
   1e814:	bl	169d8 <_start@@Base+0x1c34>
   1e818:	mov	r4, r0
   1e81c:	b	1e748 <_start@@Base+0x99a4>
   1e820:	mov	r1, r0
   1e824:	mov	r2, r6
   1e828:	mov	r0, r5
   1e82c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e830:	mov	r4, r0
   1e834:	b	1b418 <_start@@Base+0x6674>
   1e838:	mov	r2, r6
   1e83c:	mov	r1, r8
   1e840:	mov	r0, r5
   1e844:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e848:	mov	r4, r0
   1e84c:	b	1b418 <_start@@Base+0x6674>
   1e850:	mov	r2, r6
   1e854:	mov	r1, r7
   1e858:	mov	r0, r5
   1e85c:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e860:	mov	r4, r0
   1e864:	b	1b418 <_start@@Base+0x6674>
   1e868:	mov	r1, r4
   1e86c:	mov	r2, r6
   1e870:	ldr	r3, [sp, #316]	; 0x13c
   1e874:	mov	r0, r5
   1e878:	bl	26138 <flatcc_json_parser_finalize_unions@@Base>
   1e87c:	mov	r4, r0
   1e880:	ldr	r0, [r5]
   1e884:	bl	21aa8 <flatcc_builder_end_table@@Base>
   1e888:	ldr	r3, [sp, #92]	; 0x5c
   1e88c:	cmp	r0, #0
   1e890:	str	r0, [r3]
   1e894:	beq	1b680 <_start@@Base+0x68dc>
   1e898:	mov	r0, r4
   1e89c:	add	sp, sp, #340	; 0x154
   1e8a0:	vpop	{d8}
   1e8a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8a8:	mov	r1, r4
   1e8ac:	mov	r2, r6
   1e8b0:	mov	r0, r5
   1e8b4:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1e8b8:	mov	r4, r0
   1e8bc:	b	1b418 <_start@@Base+0x6674>
   1e8c0:	svcvs	0x00725f6f
   1e8c4:			; <UNDEFINED> instruction: 0x76656374
   1e8c8:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1e8cc:	ldrbvs	r6, [pc], -pc, ror #8
	...
   1e8d8:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1e8dc:	ldrbvs	r6, [pc], -pc, ror #24
   1e8e0:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   1e8e4:	andeq	r4, r4, r0, lsl #6
   1e8e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8ec:	sub	sp, sp, #44	; 0x2c
   1e8f0:	mov	r6, r2
   1e8f4:	mov	r2, #0
   1e8f8:	mov	r5, r0
   1e8fc:	mov	r4, r1
   1e900:	ldr	r8, [sp, #80]	; 0x50
   1e904:	str	r2, [r8]
   1e908:	cmp	r3, #4
   1e90c:	ldrls	pc, [pc, r3, lsl #2]
   1e910:	b	1ed84 <_start@@Base+0x9fe0>
   1e914:	andeq	lr, r1, r8, lsr #18
   1e918:	andeq	lr, r1, r8, lsr r9
   1e91c:	andeq	lr, r1, r4, ror r9
   1e920:	andeq	lr, r1, r4, ror #26
   1e924:	andeq	lr, r1, r4, ror sp
   1e928:	mov	r2, r6
   1e92c:	bl	15e90 <_start@@Base+0x10ec>
   1e930:	add	sp, sp, #44	; 0x2c
   1e934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e938:	mov	r3, r8
   1e93c:	mov	r2, r6
   1e940:	bl	1b278 <_start@@Base+0x64d4>
   1e944:	ldr	r3, [r5, #20]
   1e948:	cmp	r3, #0
   1e94c:	bne	1e930 <_start@@Base+0x9b8c>
   1e950:	ldr	r3, [r8]
   1e954:	cmp	r3, #0
   1e958:	bne	1e930 <_start@@Base+0x9b8c>
   1e95c:	mov	r3, #33	; 0x21
   1e960:	mov	r2, r6
   1e964:	mov	r1, r0
   1e968:	mov	r0, r5
   1e96c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1e970:	b	1e930 <_start@@Base+0x9b8c>
   1e974:	mov	r1, #4
   1e978:	ldr	r0, [r0]
   1e97c:	bl	21480 <flatcc_builder_start_table@@Base>
   1e980:	cmp	r0, #0
   1e984:	bne	1e9cc <_start@@Base+0x9c28>
   1e988:	add	r3, sp, #36	; 0x24
   1e98c:	mov	r2, r6
   1e990:	mov	r1, r4
   1e994:	mov	r0, r5
   1e998:	bl	180d4 <_start@@Base+0x3330>
   1e99c:	ldr	r3, [sp, #36]	; 0x24
   1e9a0:	mov	r4, r0
   1e9a4:	cmp	r3, #0
   1e9a8:	bne	1e9ec <_start@@Base+0x9c48>
   1e9ac:	ldr	r3, [r5, #20]
   1e9b0:	cmp	r3, #0
   1e9b4:	bne	1e9cc <_start@@Base+0x9c28>
   1e9b8:	ldr	r0, [r5]
   1e9bc:	bl	21aa8 <flatcc_builder_end_table@@Base>
   1e9c0:	cmp	r0, #0
   1e9c4:	str	r0, [r8]
   1e9c8:	bne	1e9e4 <_start@@Base+0x9c40>
   1e9cc:	mov	r1, r4
   1e9d0:	mov	r3, #33	; 0x21
   1e9d4:	mov	r2, r6
   1e9d8:	mov	r0, r5
   1e9dc:	bl	24960 <flatcc_json_parser_set_error@@Base>
   1e9e0:	mov	r4, r0
   1e9e4:	mov	r0, r4
   1e9e8:	b	1e944 <_start@@Base+0x9ba0>
   1e9ec:	mov	r2, r6
   1e9f0:	mov	r1, r4
   1e9f4:	mov	r0, r5
   1e9f8:	bl	174dc <_start@@Base+0x2738>
   1e9fc:	mov	r1, r6
   1ea00:	mov	r4, r0
   1ea04:	bl	14e98 <_start@@Base+0xf4>
   1ea08:	lsr	r3, r0, #16
   1ea0c:	mov	r9, r1
   1ea10:	mov	ip, r0
   1ea14:	add	r1, pc, #908	; 0x38c
   1ea18:	ldrd	r0, [r1]
   1ea1c:	lsl	r3, r3, #16
   1ea20:	str	r3, [sp, #8]
   1ea24:	str	r9, [sp, #12]
   1ea28:	ldrd	r2, [sp, #8]
   1ea2c:	cmp	r3, r1
   1ea30:	cmpeq	r2, r0
   1ea34:	bne	1eb00 <_start@@Base+0x9d5c>
   1ea38:	mov	r3, #6
   1ea3c:	mov	r2, r6
   1ea40:	mov	r1, r4
   1ea44:	mov	r0, r5
   1ea48:	bl	18228 <_start@@Base+0x3484>
   1ea4c:	cmp	r4, r0
   1ea50:	mov	r7, r0
   1ea54:	beq	1ebc4 <_start@@Base+0x9e20>
   1ea58:	mov	r3, #0
   1ea5c:	add	r9, sp, #35	; 0x23
   1ea60:	mov	r1, r0
   1ea64:	mov	r2, r6
   1ea68:	mov	r0, r5
   1ea6c:	strb	r3, [sp, #35]	; 0x23
   1ea70:	mov	r3, r9
   1ea74:	bl	18fb8 <_start@@Base+0x4214>
   1ea78:	cmp	r7, r0
   1ea7c:	mov	r4, r0
   1ea80:	bne	1eaac <_start@@Base+0x9d08>
   1ea84:	mov	r1, r0
   1ea88:	ldr	r3, [pc, #816]	; 1edc0 <_start@@Base+0xa01c>
   1ea8c:	mov	r2, r6
   1ea90:	mov	r0, r5
   1ea94:	str	r9, [sp]
   1ea98:	bl	19c30 <_start@@Base+0x4e8c>
   1ea9c:	cmp	r6, r0
   1eaa0:	cmpne	r4, r0
   1eaa4:	mov	r4, r0
   1eaa8:	beq	1e9cc <_start@@Base+0x9c28>
   1eaac:	ldrsb	r3, [sp, #35]	; 0x23
   1eab0:	cmp	r3, #2
   1eab4:	bne	1eac4 <_start@@Base+0x9d20>
   1eab8:	ldr	r3, [r5, #8]
   1eabc:	tst	r3, #2
   1eac0:	beq	1eae8 <_start@@Base+0x9d44>
   1eac4:	mov	r3, #1
   1eac8:	mov	r2, r3
   1eacc:	mov	r1, r3
   1ead0:	ldr	r0, [r5]
   1ead4:	bl	22404 <flatcc_builder_table_add@@Base>
   1ead8:	cmp	r0, #0
   1eadc:	beq	1e9cc <_start@@Base+0x9c28>
   1eae0:	ldrsb	r3, [sp, #35]	; 0x23
   1eae4:	strb	r3, [r0]
   1eae8:	add	r3, sp, #36	; 0x24
   1eaec:	mov	r2, r6
   1eaf0:	mov	r1, r4
   1eaf4:	mov	r0, r5
   1eaf8:	bl	16a90 <_start@@Base+0x1cec>
   1eafc:	b	1e99c <_start@@Base+0x9bf8>
   1eb00:	and	r3, ip, #-16777216	; 0xff000000
   1eb04:	add	r1, pc, #676	; 0x2a4
   1eb08:	ldrd	r0, [r1]
   1eb0c:	str	r3, [sp, #16]
   1eb10:	str	r9, [sp, #20]
   1eb14:	ldrd	r2, [sp, #16]
   1eb18:	cmp	r3, r1
   1eb1c:	cmpeq	r2, r0
   1eb20:	movne	r7, r4
   1eb24:	bne	1ebc4 <_start@@Base+0x9e20>
   1eb28:	mov	r3, #5
   1eb2c:	mov	r2, r6
   1eb30:	mov	r1, r4
   1eb34:	mov	r0, r5
   1eb38:	bl	18228 <_start@@Base+0x3484>
   1eb3c:	cmp	r4, r0
   1eb40:	mov	r7, r0
   1eb44:	beq	1ebc4 <_start@@Base+0x9e20>
   1eb48:	mov	r3, #0
   1eb4c:	add	r9, sp, #35	; 0x23
   1eb50:	mov	r1, r0
   1eb54:	mov	r2, r6
   1eb58:	mov	r0, r5
   1eb5c:	strb	r3, [sp, #35]	; 0x23
   1eb60:	mov	r3, r9
   1eb64:	bl	18fb8 <_start@@Base+0x4214>
   1eb68:	cmp	r7, r0
   1eb6c:	mov	r4, r0
   1eb70:	bne	1eb9c <_start@@Base+0x9df8>
   1eb74:	mov	r1, r0
   1eb78:	ldr	r3, [pc, #580]	; 1edc4 <_start@@Base+0xa020>
   1eb7c:	mov	r2, r6
   1eb80:	mov	r0, r5
   1eb84:	str	r9, [sp]
   1eb88:	bl	19c30 <_start@@Base+0x4e8c>
   1eb8c:	cmp	r6, r0
   1eb90:	cmpne	r4, r0
   1eb94:	mov	r4, r0
   1eb98:	beq	1e9cc <_start@@Base+0x9c28>
   1eb9c:	ldrsb	r3, [sp, #35]	; 0x23
   1eba0:	cmp	r3, #2
   1eba4:	bne	1ebb4 <_start@@Base+0x9e10>
   1eba8:	ldr	r3, [r5, #8]
   1ebac:	tst	r3, #2
   1ebb0:	beq	1eae8 <_start@@Base+0x9d44>
   1ebb4:	mov	r3, #1
   1ebb8:	mov	r1, #0
   1ebbc:	mov	r2, r3
   1ebc0:	b	1ead0 <_start@@Base+0x9d2c>
   1ebc4:	bic	r3, r9, #255	; 0xff
   1ebc8:	mov	r4, #0
   1ebcc:	add	r1, pc, #484	; 0x1e4
   1ebd0:	ldrd	r0, [r1]
   1ebd4:	str	r4, [sp, #24]
   1ebd8:	str	r3, [sp, #28]
   1ebdc:	ldrd	r2, [sp, #24]
   1ebe0:	cmp	r3, r1
   1ebe4:	cmpeq	r2, r0
   1ebe8:	bne	1ec98 <_start@@Base+0x9ef4>
   1ebec:	mov	r3, #3
   1ebf0:	mov	r2, r6
   1ebf4:	mov	r1, r7
   1ebf8:	mov	r0, r5
   1ebfc:	bl	18228 <_start@@Base+0x3484>
   1ec00:	cmp	r7, r0
   1ec04:	mov	r9, r0
   1ec08:	beq	1ed4c <_start@@Base+0x9fa8>
   1ec0c:	add	r7, sp, #35	; 0x23
   1ec10:	mov	r1, r0
   1ec14:	strb	r4, [sp, #35]	; 0x23
   1ec18:	mov	r3, r7
   1ec1c:	mov	r2, r6
   1ec20:	mov	r0, r5
   1ec24:	bl	18c1c <_start@@Base+0x3e78>
   1ec28:	cmp	r9, r0
   1ec2c:	mov	r4, r0
   1ec30:	bne	1ec5c <_start@@Base+0x9eb8>
   1ec34:	mov	r1, r0
   1ec38:	ldr	r3, [pc, #392]	; 1edc8 <_start@@Base+0xa024>
   1ec3c:	mov	r2, r6
   1ec40:	mov	r0, r5
   1ec44:	str	r7, [sp]
   1ec48:	bl	19060 <_start@@Base+0x42bc>
   1ec4c:	cmp	r6, r0
   1ec50:	cmpne	r4, r0
   1ec54:	mov	r4, r0
   1ec58:	beq	1e9cc <_start@@Base+0x9c28>
   1ec5c:	ldrb	r3, [sp, #35]	; 0x23
   1ec60:	cmp	r3, #2
   1ec64:	bne	1ec74 <_start@@Base+0x9ed0>
   1ec68:	ldr	r3, [r5, #8]
   1ec6c:	tst	r3, #2
   1ec70:	beq	1eae8 <_start@@Base+0x9d44>
   1ec74:	mov	r3, #1
   1ec78:	mov	r1, #3
   1ec7c:	mov	r2, r3
   1ec80:	ldr	r0, [r5]
   1ec84:	bl	22404 <flatcc_builder_table_add@@Base>
   1ec88:	cmp	r0, #0
   1ec8c:	beq	1e9cc <_start@@Base+0x9c28>
   1ec90:	ldrb	r3, [sp, #35]	; 0x23
   1ec94:	b	1eae4 <_start@@Base+0x9d40>
   1ec98:	ldr	r3, [pc, #300]	; 1edcc <_start@@Base+0xa028>
   1ec9c:	lsr	fp, r9, #16
   1eca0:	mov	r2, #0
   1eca4:	lsl	fp, fp, #16
   1eca8:	cmp	fp, r3
   1ecac:	cmpeq	r4, r2
   1ecb0:	bne	1ed4c <_start@@Base+0x9fa8>
   1ecb4:	mov	r3, #2
   1ecb8:	mov	r2, r6
   1ecbc:	mov	r1, r7
   1ecc0:	mov	r0, r5
   1ecc4:	bl	18228 <_start@@Base+0x3484>
   1ecc8:	cmp	r7, r0
   1eccc:	mov	r9, r0
   1ecd0:	beq	1ed4c <_start@@Base+0x9fa8>
   1ecd4:	add	r7, sp, #35	; 0x23
   1ecd8:	mov	r1, r0
   1ecdc:	strb	r4, [sp, #35]	; 0x23
   1ece0:	mov	r3, r7
   1ece4:	mov	r2, r6
   1ece8:	mov	r0, r5
   1ecec:	bl	18c1c <_start@@Base+0x3e78>
   1ecf0:	cmp	r9, r0
   1ecf4:	mov	r4, r0
   1ecf8:	bne	1ed24 <_start@@Base+0x9f80>
   1ecfc:	mov	r1, r0
   1ed00:	ldr	r3, [pc, #200]	; 1edd0 <_start@@Base+0xa02c>
   1ed04:	mov	r2, r6
   1ed08:	mov	r0, r5
   1ed0c:	str	r7, [sp]
   1ed10:	bl	19060 <_start@@Base+0x42bc>
   1ed14:	cmp	r6, r0
   1ed18:	cmpne	r4, r0
   1ed1c:	mov	r4, r0
   1ed20:	beq	1e9cc <_start@@Base+0x9c28>
   1ed24:	ldrb	r3, [sp, #35]	; 0x23
   1ed28:	cmp	r3, #2
   1ed2c:	bne	1ed3c <_start@@Base+0x9f98>
   1ed30:	ldr	r3, [r5, #8]
   1ed34:	tst	r3, #2
   1ed38:	beq	1eae8 <_start@@Base+0x9d44>
   1ed3c:	mov	r3, #1
   1ed40:	mov	r1, #2
   1ed44:	mov	r2, r3
   1ed48:	b	1ec80 <_start@@Base+0x9edc>
   1ed4c:	mov	r2, r6
   1ed50:	mov	r1, r7
   1ed54:	mov	r0, r5
   1ed58:	bl	25bfc <flatcc_json_parser_unmatched_symbol@@Base>
   1ed5c:	mov	r4, r0
   1ed60:	b	1eae8 <_start@@Base+0x9d44>
   1ed64:	mov	r3, r8
   1ed68:	mov	r2, r6
   1ed6c:	bl	1815c <_start@@Base+0x33b8>
   1ed70:	b	1e944 <_start@@Base+0x9ba0>
   1ed74:	mov	r3, r8
   1ed78:	mov	r2, r6
   1ed7c:	bl	1a03c <_start@@Base+0x5298>
   1ed80:	b	1e944 <_start@@Base+0x9ba0>
   1ed84:	ldr	r3, [r0, #8]
   1ed88:	tst	r3, #1
   1ed8c:	moveq	r3, #15
   1ed90:	moveq	r2, r6
   1ed94:	beq	1e968 <_start@@Base+0x9bc4>
   1ed98:	mov	r2, r6
   1ed9c:	mov	r1, r4
   1eda0:	bl	25674 <flatcc_json_parser_generic_json@@Base>
   1eda4:	b	1e930 <_start@@Base+0x9b8c>
   1eda8:	eorsvc	r0, r2, #0
   1edac:	cmnvs	pc, #28416	; 0x6f00
   1edb0:	andvc	r0, r0, #0
   1edb4:	cmnvs	pc, #28416	; 0x6f00
   1edb8:	andeq	r0, r0, r0
   1edbc:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   1edc0:	andeq	r4, r4, ip, lsl #6
   1edc4:	andeq	r4, r4, ip, lsl r3
   1edc8:	andeq	r4, r4, ip, lsr #6
   1edcc:	strbvc	r0, [r3, #-0]!
   1edd0:	andeq	r4, r4, r8, lsr r3
   1edd4:	mov	r3, #8
   1edd8:	push	{r4, lr}
   1eddc:	mov	r1, #0
   1ede0:	mov	r2, r3
   1ede4:	mov	r4, r0
   1ede8:	bl	232f0 <flatcc_verify_field@@Base>
   1edec:	cmp	r0, #0
   1edf0:	popne	{r4, pc}
   1edf4:	mov	r3, #4
   1edf8:	mov	r0, r4
   1edfc:	pop	{r4, lr}
   1ee00:	mov	r2, r3
   1ee04:	mov	r1, #1
   1ee08:	b	232f0 <flatcc_verify_field@@Base>
   1ee0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee10:	sub	sp, sp, #20
   1ee14:	mov	r6, r3
   1ee18:	mov	r4, r1
   1ee1c:	mov	r7, r0
   1ee20:	mov	r1, r2
   1ee24:	mov	r0, r4
   1ee28:	ldr	r3, [sp, #56]	; 0x38
   1ee2c:	mov	r5, r2
   1ee30:	ldr	sl, [sp, #60]	; 0x3c
   1ee34:	str	r3, [sp, #12]
   1ee38:	bl	14e98 <_start@@Base+0xf4>
   1ee3c:	add	r3, pc, #708	; 0x2c4
   1ee40:	ldrd	r2, [r3]
   1ee44:	cmp	r1, r3
   1ee48:	cmpeq	r0, r2
   1ee4c:	bhi	1ef4c <_start@@Base+0xa1a8>
   1ee50:	add	r3, pc, #696	; 0x2b8
   1ee54:	ldrd	r2, [r3]
   1ee58:	mov	r8, #0
   1ee5c:	bic	r9, r1, #255	; 0xff
   1ee60:	cmp	r1, r3
   1ee64:	cmpeq	r0, r2
   1ee68:	bhi	1eeb4 <_start@@Base+0xa110>
   1ee6c:	add	r3, pc, #676	; 0x2a4
   1ee70:	ldrd	r2, [r3]
   1ee74:	cmp	r9, r3
   1ee78:	cmpeq	r8, r2
   1ee7c:	bne	1f0fc <_start@@Base+0xa358>
   1ee80:	mov	r1, r5
   1ee84:	mov	r2, #3
   1ee88:	mov	r0, r4
   1ee8c:	bl	16b48 <_start@@Base+0x1da4>
   1ee90:	cmp	r4, r0
   1ee94:	mov	r1, r0
   1ee98:	beq	1f0fc <_start@@Base+0xa358>
   1ee9c:	mov	r3, r6
   1eea0:	mov	r2, r5
   1eea4:	mov	r0, r7
   1eea8:	add	sp, sp, #20
   1eeac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eeb0:	b	16198 <_start@@Base+0x13f4>
   1eeb4:	add	r3, pc, #612	; 0x264
   1eeb8:	ldrd	r2, [r3]
   1eebc:	cmp	r9, r3
   1eec0:	cmpeq	r8, r2
   1eec4:	bne	1eefc <_start@@Base+0xa158>
   1eec8:	mov	r1, r5
   1eecc:	mov	r2, #3
   1eed0:	mov	r0, r4
   1eed4:	bl	16b48 <_start@@Base+0x1da4>
   1eed8:	cmp	r4, r0
   1eedc:	mov	r1, r0
   1eee0:	beq	1f0fc <_start@@Base+0xa358>
   1eee4:	mov	r3, r6
   1eee8:	mov	r2, r5
   1eeec:	mov	r0, r7
   1eef0:	add	sp, sp, #20
   1eef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eef8:	b	17880 <_start@@Base+0x2adc>
   1eefc:	and	r2, r0, #-16777216	; 0xff000000
   1ef00:	mov	r3, r1
   1ef04:	add	r1, pc, #540	; 0x21c
   1ef08:	ldrd	r0, [r1]
   1ef0c:	cmp	r3, r1
   1ef10:	cmpeq	r2, r0
   1ef14:	bne	1f0fc <_start@@Base+0xa358>
   1ef18:	mov	r1, r5
   1ef1c:	mov	r2, #5
   1ef20:	mov	r0, r4
   1ef24:	bl	16b48 <_start@@Base+0x1da4>
   1ef28:	cmp	r4, r0
   1ef2c:	mov	r1, r0
   1ef30:	beq	1f0fc <_start@@Base+0xa358>
   1ef34:	mov	r3, r6
   1ef38:	mov	r2, r5
   1ef3c:	mov	r0, r7
   1ef40:	add	sp, sp, #20
   1ef44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef48:	b	16868 <_start@@Base+0x1ac4>
   1ef4c:	add	r3, pc, #476	; 0x1dc
   1ef50:	ldrd	r2, [r3]
   1ef54:	cmp	r1, r3
   1ef58:	cmpeq	r0, r2
   1ef5c:	bhi	1efa8 <_start@@Base+0xa204>
   1ef60:	add	r3, pc, #464	; 0x1d0
   1ef64:	ldrd	r2, [r3]
   1ef68:	cmp	r1, r3
   1ef6c:	cmpeq	r0, r2
   1ef70:	bne	1f0fc <_start@@Base+0xa358>
   1ef74:	mov	r1, r5
   1ef78:	mov	r2, #8
   1ef7c:	mov	r0, r4
   1ef80:	bl	16b48 <_start@@Base+0x1da4>
   1ef84:	cmp	r4, r0
   1ef88:	mov	r1, r0
   1ef8c:	beq	1f0fc <_start@@Base+0xa358>
   1ef90:	mov	r3, r6
   1ef94:	mov	r2, r5
   1ef98:	mov	r0, r7
   1ef9c:	add	sp, sp, #20
   1efa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efa4:	b	16418 <_start@@Base+0x1674>
   1efa8:	add	r3, pc, #400	; 0x190
   1efac:	ldrd	r2, [r3]
   1efb0:	cmp	r1, r3
   1efb4:	cmpeq	r0, r2
   1efb8:	bhi	1f004 <_start@@Base+0xa260>
   1efbc:	add	r3, pc, #388	; 0x184
   1efc0:	ldrd	r2, [r3]
   1efc4:	cmp	r1, r3
   1efc8:	cmpeq	r0, r2
   1efcc:	bne	1f0fc <_start@@Base+0xa358>
   1efd0:	mov	r1, r5
   1efd4:	mov	r2, #8
   1efd8:	mov	r0, r4
   1efdc:	bl	16b48 <_start@@Base+0x1da4>
   1efe0:	cmp	r4, r0
   1efe4:	mov	r1, r0
   1efe8:	beq	1f0fc <_start@@Base+0xa358>
   1efec:	mov	r3, r6
   1eff0:	mov	r2, r5
   1eff4:	mov	r0, r7
   1eff8:	add	sp, sp, #20
   1effc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f000:	b	16580 <_start@@Base+0x17dc>
   1f004:	add	r3, pc, #324	; 0x144
   1f008:	ldrd	r2, [r3]
   1f00c:	cmp	r1, r3
   1f010:	cmpeq	r0, r2
   1f014:	bne	1f04c <_start@@Base+0xa2a8>
   1f018:	mov	r1, r5
   1f01c:	mov	r2, #8
   1f020:	mov	r0, r4
   1f024:	bl	16b48 <_start@@Base+0x1da4>
   1f028:	cmp	r4, r0
   1f02c:	mov	r1, r0
   1f030:	beq	1f0fc <_start@@Base+0xa358>
   1f034:	mov	r3, r6
   1f038:	mov	r2, r5
   1f03c:	mov	r0, r7
   1f040:	add	sp, sp, #20
   1f044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f048:	b	16730 <_start@@Base+0x198c>
   1f04c:	add	r3, pc, #260	; 0x104
   1f050:	ldrd	r2, [r3]
   1f054:	cmp	r1, r3
   1f058:	cmpeq	r0, r2
   1f05c:	bne	1f0fc <_start@@Base+0xa358>
   1f060:	add	r8, r4, #8
   1f064:	mov	r1, r5
   1f068:	mov	r0, r8
   1f06c:	mov	r9, #0
   1f070:	bl	14e98 <_start@@Base+0xf4>
   1f074:	mov	r3, r1
   1f078:	add	r1, pc, #224	; 0xe0
   1f07c:	ldrd	r0, [r1]
   1f080:	cmp	r3, r1
   1f084:	cmpeq	r9, r0
   1f088:	bne	1f0fc <_start@@Base+0xa358>
   1f08c:	mov	r2, #4
   1f090:	mov	r1, r5
   1f094:	mov	r0, r8
   1f098:	bl	16b48 <_start@@Base+0x1da4>
   1f09c:	cmp	r8, r0
   1f0a0:	mov	fp, r0
   1f0a4:	beq	1f0fc <_start@@Base+0xa358>
   1f0a8:	mov	r1, r5
   1f0ac:	bl	14e98 <_start@@Base+0xf4>
   1f0b0:	and	r3, r1, #-16777216	; 0xff000000
   1f0b4:	cmp	r3, #2013265920	; 0x78000000
   1f0b8:	cmpeq	r9, #0
   1f0bc:	movne	r4, fp
   1f0c0:	bne	1f0fc <_start@@Base+0xa358>
   1f0c4:	mov	r3, #1
   1f0c8:	mov	r2, r5
   1f0cc:	str	sl, [sp]
   1f0d0:	mov	r1, fp
   1f0d4:	mov	r0, r7
   1f0d8:	bl	25294 <flatcc_json_parser_match_constant@@Base>
   1f0dc:	cmp	fp, r0
   1f0e0:	mov	r4, r0
   1f0e4:	beq	1f0fc <_start@@Base+0xa358>
   1f0e8:	ldr	r1, [sp, #12]
   1f0ec:	mov	r2, #0
   1f0f0:	mov	r3, #0
   1f0f4:	strd	r2, [r1]
   1f0f8:	str	r9, [r6]
   1f0fc:	mov	r0, r4
   1f100:	add	sp, sp, #20
   1f104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f108:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1f10c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1f110:	ldrshvc	pc, [pc, #255]	; 1f217 <test_json@@Base+0xaf>	; <UNPREDICTABLE>
   1f114:	cmnmi	pc, #28416	; 0x6f00
   1f118:	andeq	r0, r0, r0
   1f11c:	cmnmi	lr, r0, lsl #18
   1f120:	andeq	r0, r0, r0
   1f124:	strbtmi	r6, [pc], -r0, lsl #30
   1f128:	andvc	r0, r0, #0
   1f12c:	cmnmi	pc, #28416	; 0x6f00
   1f130:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1f134:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1f138:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1f13c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1f140:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1f144:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1f148:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1f14c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1f150:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1f154:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1f158:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   1f15c:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   1f160:	andeq	r0, r0, r0
   1f164:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93

0001f168 <test_json@@Base>:
   1f168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f16c:	sub	sp, sp, #380	; 0x17c
   1f170:	mov	r4, r0
   1f174:	add	r0, sp, #144	; 0x90
   1f178:	mov	r7, r1
   1f17c:	mov	r8, r2
   1f180:	mov	r6, r3
   1f184:	ldr	r5, [sp, #420]	; 0x1a4
   1f188:	bl	205c4 <flatcc_builder_init@@Base>
   1f18c:	mov	r1, #0
   1f190:	add	r0, sp, #96	; 0x60
   1f194:	bl	2d63c <flatcc_json_printer_init_dynamic_buffer@@Base>
   1f198:	mov	r0, r7
   1f19c:	and	r3, r5, #1
   1f1a0:	tst	r5, #16
   1f1a4:	strb	r3, [sp, #122]	; 0x7a
   1f1a8:	ubfx	r3, r5, #1, #1
   1f1ac:	strb	r3, [sp, #123]	; 0x7b
   1f1b0:	ubfx	r3, r5, #2, #1
   1f1b4:	strb	r3, [sp, #124]	; 0x7c
   1f1b8:	ubfx	r3, r5, #3, #1
   1f1bc:	strb	r3, [sp, #125]	; 0x7d
   1f1c0:	movne	r3, #2
   1f1c4:	strbne	r3, [sp, #121]	; 0x79
   1f1c8:	tst	r5, #32
   1f1cc:	movne	r3, #2
   1f1d0:	strbne	r3, [sp, #121]	; 0x79
   1f1d4:	movne	r3, #1
   1f1d8:	strhne	r3, [sp, #122]	; 0x7a
   1f1dc:	bl	1459c <strlen@plt>
   1f1e0:	ldr	r3, [r4, #4]
   1f1e4:	mov	r2, r7
   1f1e8:	add	r1, sp, #56	; 0x38
   1f1ec:	str	r3, [sp, #8]
   1f1f0:	ldr	r3, [r4]
   1f1f4:	str	r3, [sp, #4]
   1f1f8:	ldr	r3, [sp, #416]	; 0x1a0
   1f1fc:	str	r3, [sp]
   1f200:	mov	r3, r0
   1f204:	add	r0, sp, #144	; 0x90
   1f208:	bl	26768 <flatcc_json_parser_table_as_root@@Base>
   1f20c:	cmp	r0, r6
   1f210:	beq	1f300 <test_json@@Base+0x198>
   1f214:	ldr	r4, [pc, #716]	; 1f4e8 <test_json@@Base+0x380>
   1f218:	cmp	r6, #0
   1f21c:	ldr	r5, [r4]
   1f220:	beq	1f2dc <test_json@@Base+0x174>
   1f224:	cmp	r0, #0
   1f228:	beq	1f2bc <test_json@@Base+0x154>
   1f22c:	bl	24940 <flatcc_json_parser_error_string@@Base>
   1f230:	mov	r3, r0
   1f234:	ldr	r1, [pc, #688]	; 1f4ec <test_json@@Base+0x384>
   1f238:	mov	r0, r5
   1f23c:	ldr	r2, [sp, #424]	; 0x1a8
   1f240:	bl	145a8 <fprintf@plt>
   1f244:	ldr	r5, [r4]
   1f248:	mov	r0, r6
   1f24c:	bl	24940 <flatcc_json_parser_error_string@@Base>
   1f250:	mov	r2, r0
   1f254:	ldr	r1, [pc, #660]	; 1f4f0 <test_json@@Base+0x388>
   1f258:	mov	r0, r5
   1f25c:	bl	145a8 <fprintf@plt>
   1f260:	mov	r2, r7
   1f264:	ldr	r1, [pc, #648]	; 1f4f4 <test_json@@Base+0x38c>
   1f268:	mov	r5, #0
   1f26c:	ldr	r0, [r4]
   1f270:	bl	145a8 <fprintf@plt>
   1f274:	ldr	r3, [sp, #72]	; 0x48
   1f278:	ldr	r1, [r4]
   1f27c:	sub	r3, r3, #1
   1f280:	cmp	r3, r5
   1f284:	bgt	1f2f0 <test_json@@Base+0x188>
   1f288:	ldr	r0, [pc, #616]	; 1f4f8 <test_json@@Base+0x390>
   1f28c:	mov	r5, #0
   1f290:	bl	14608 <fputs@plt>
   1f294:	mvn	r4, #0
   1f298:	mov	r0, r5
   1f29c:	bl	22b14 <flatcc_builder_aligned_free@@Base>
   1f2a0:	add	r0, sp, #144	; 0x90
   1f2a4:	bl	20740 <flatcc_builder_clear@@Base>
   1f2a8:	add	r0, sp, #96	; 0x60
   1f2ac:	bl	2d720 <flatcc_json_printer_clear@@Base>
   1f2b0:	mov	r0, r4
   1f2b4:	add	sp, sp, #380	; 0x17c
   1f2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2bc:	mov	r0, r6
   1f2c0:	bl	24940 <flatcc_json_parser_error_string@@Base>
   1f2c4:	ldr	r1, [pc, #560]	; 1f4fc <test_json@@Base+0x394>
   1f2c8:	mov	r3, r0
   1f2cc:	ldr	r2, [sp, #424]	; 0x1a8
   1f2d0:	mov	r0, r5
   1f2d4:	bl	145a8 <fprintf@plt>
   1f2d8:	b	1f260 <test_json@@Base+0xf8>
   1f2dc:	bl	24940 <flatcc_json_parser_error_string@@Base>
   1f2e0:	mov	r3, r0
   1f2e4:	ldr	r1, [pc, #532]	; 1f500 <test_json@@Base+0x398>
   1f2e8:	ldr	r2, [sp, #424]	; 0x1a8
   1f2ec:	b	1f2d0 <test_json@@Base+0x168>
   1f2f0:	mov	r0, #32
   1f2f4:	add	r5, r5, #1
   1f2f8:	bl	145f0 <fputc@plt>
   1f2fc:	b	1f274 <test_json@@Base+0x10c>
   1f300:	cmp	r6, #0
   1f304:	movne	r5, #0
   1f308:	movne	r4, r5
   1f30c:	bne	1f298 <test_json@@Base+0x130>
   1f310:	add	r1, sp, #28
   1f314:	add	r0, sp, #144	; 0x90
   1f318:	bl	22a88 <flatcc_builder_finalize_aligned_buffer@@Base>
   1f31c:	ldr	r2, [r4]
   1f320:	mov	r5, r0
   1f324:	ldr	r3, [r4, #12]
   1f328:	ldr	r1, [sp, #28]
   1f32c:	bl	23764 <flatcc_verify_table_as_root@@Base>
   1f330:	cmp	r0, #0
   1f334:	beq	1f3c8 <test_json@@Base+0x260>
   1f338:	ldr	r3, [pc, #424]	; 1f4e8 <test_json@@Base+0x380>
   1f33c:	ldr	r4, [r3]
   1f340:	bl	232d4 <flatcc_verify_error_string@@Base>
   1f344:	ldr	r2, [pc, #440]	; 1f504 <test_json@@Base+0x39c>
   1f348:	str	r0, [sp]
   1f34c:	ldr	r1, [pc, #436]	; 1f508 <test_json@@Base+0x3a0>
   1f350:	mov	r0, r4
   1f354:	ldr	r3, [sp, #424]	; 0x1a8
   1f358:	bl	145a8 <fprintf@plt>
   1f35c:	cmp	r5, #0
   1f360:	beq	1f294 <test_json@@Base+0x12c>
   1f364:	ldr	r3, [sp, #28]
   1f368:	sub	r7, r5, #1
   1f36c:	mov	r8, #0
   1f370:	ldr	r2, [pc, #404]	; 1f50c <test_json@@Base+0x3a4>
   1f374:	ldr	r1, [pc, #404]	; 1f510 <test_json@@Base+0x3a8>
   1f378:	str	r3, [sp, #20]
   1f37c:	ldr	r3, [pc, #356]	; 1f4e8 <test_json@@Base+0x380>
   1f380:	ldr	r9, [pc, #396]	; 1f514 <test_json@@Base+0x3ac>
   1f384:	ldr	sl, [pc, #396]	; 1f518 <test_json@@Base+0x3b0>
   1f388:	ldr	r4, [r3]
   1f38c:	ldr	fp, [pc, #392]	; 1f51c <test_json@@Base+0x3b4>
   1f390:	mov	r0, r4
   1f394:	bl	145a8 <fprintf@plt>
   1f398:	ldr	r3, [sp, #20]
   1f39c:	and	r6, r8, #15
   1f3a0:	cmp	r3, r8
   1f3a4:	bne	1f450 <test_json@@Base+0x2e8>
   1f3a8:	ldr	r6, [pc, #368]	; 1f520 <test_json@@Base+0x3b8>
   1f3ac:	tst	r8, #15
   1f3b0:	bne	1f4d4 <test_json@@Base+0x36c>
   1f3b4:	add	r2, sp, #36	; 0x24
   1f3b8:	ldr	r1, [pc, #344]	; 1f518 <test_json@@Base+0x3b0>
   1f3bc:	mov	r0, r4
   1f3c0:	bl	145a8 <fprintf@plt>
   1f3c4:	b	1f294 <test_json@@Base+0x12c>
   1f3c8:	ldr	r3, [r4, #8]
   1f3cc:	mov	r1, r5
   1f3d0:	add	r0, sp, #96	; 0x60
   1f3d4:	ldr	r2, [sp, #28]
   1f3d8:	str	r3, [sp]
   1f3dc:	ldr	r3, [r4]
   1f3e0:	bl	2d2f8 <flatcc_json_printer_table_as_root@@Base>
   1f3e4:	add	r1, sp, #32
   1f3e8:	add	r0, sp, #96	; 0x60
   1f3ec:	bl	2d6c8 <flatcc_json_printer_get_buffer@@Base>
   1f3f0:	subs	r6, r0, #0
   1f3f4:	beq	1f40c <test_json@@Base+0x2a4>
   1f3f8:	mov	r1, r6
   1f3fc:	mov	r0, r8
   1f400:	bl	14524 <strcmp@plt>
   1f404:	subs	r4, r0, #0
   1f408:	beq	1f298 <test_json@@Base+0x130>
   1f40c:	ldr	r4, [pc, #212]	; 1f4e8 <test_json@@Base+0x380>
   1f410:	ldr	r1, [pc, #268]	; 1f524 <test_json@@Base+0x3bc>
   1f414:	ldr	r2, [sp, #424]	; 0x1a8
   1f418:	ldr	r0, [r4]
   1f41c:	bl	145a8 <fprintf@plt>
   1f420:	mov	r2, r6
   1f424:	ldr	r1, [pc, #200]	; 1f4f4 <test_json@@Base+0x38c>
   1f428:	ldr	r0, [r4]
   1f42c:	bl	145a8 <fprintf@plt>
   1f430:	ldr	r0, [pc, #240]	; 1f528 <test_json@@Base+0x3c0>
   1f434:	ldr	r1, [r4]
   1f438:	bl	14608 <fputs@plt>
   1f43c:	mov	r2, r8
   1f440:	ldr	r1, [pc, #172]	; 1f4f4 <test_json@@Base+0x38c>
   1f444:	ldr	r0, [r4]
   1f448:	bl	145a8 <fprintf@plt>
   1f44c:	b	1f35c <test_json@@Base+0x1f4>
   1f450:	cmp	r6, #0
   1f454:	bne	1f4bc <test_json@@Base+0x354>
   1f458:	cmp	r8, #0
   1f45c:	beq	1f470 <test_json@@Base+0x308>
   1f460:	add	r2, sp, #36	; 0x24
   1f464:	mov	r1, sl
   1f468:	mov	r0, r4
   1f46c:	bl	145a8 <fprintf@plt>
   1f470:	mov	r2, r8
   1f474:	mov	r1, r9
   1f478:	mov	r0, r4
   1f47c:	bl	145a8 <fprintf@plt>
   1f480:	ldrb	r2, [r7, #1]!
   1f484:	mov	r1, fp
   1f488:	mov	r0, r4
   1f48c:	bl	145a8 <fprintf@plt>
   1f490:	add	r3, sp, #376	; 0x178
   1f494:	add	r8, r8, #1
   1f498:	add	r6, r3, r6
   1f49c:	ldrb	r2, [r7]
   1f4a0:	sub	r1, r2, #32
   1f4a4:	cmp	r1, #94	; 0x5e
   1f4a8:	movhi	r2, #46	; 0x2e
   1f4ac:	strb	r2, [r6, #-340]	; 0xfffffeac
   1f4b0:	mov	r2, #0
   1f4b4:	strb	r2, [r6, #-339]	; 0xfffffead
   1f4b8:	b	1f398 <test_json@@Base+0x230>
   1f4bc:	tst	r8, #7
   1f4c0:	bne	1f480 <test_json@@Base+0x318>
   1f4c4:	mov	r1, r4
   1f4c8:	mov	r0, #32
   1f4cc:	bl	145f0 <fputc@plt>
   1f4d0:	b	1f480 <test_json@@Base+0x318>
   1f4d4:	mov	r1, r4
   1f4d8:	mov	r0, r6
   1f4dc:	bl	14608 <fputs@plt>
   1f4e0:	add	r8, r8, #1
   1f4e4:	b	1f3ac <test_json@@Base+0x244>
   1f4e8:			; <UNDEFINED> instruction: 0x000443b8
   1f4ec:	andeq	lr, r2, r1, ror #7
   1f4f0:	andeq	lr, r2, r8, lsr #8
   1f4f4:	andeq	lr, r2, r2, lsr r5
   1f4f8:	andeq	lr, r2, r8, ror #8
   1f4fc:	andeq	lr, r2, r7, lsl #8
   1f500:	andeq	lr, r2, r7, asr #8
   1f504:	andeq	lr, r2, fp, ror #8
   1f508:			; <UNDEFINED> instruction: 0x0002e4b6
   1f50c:	andeq	lr, r2, sp, lsl r5
   1f510:	andeq	lr, r2, fp, lsr #10
   1f514:	andeq	lr, r2, r6, lsr r5
   1f518:	andeq	lr, r2, r0, lsr r5
   1f51c:	andeq	lr, r2, lr, lsr r5
   1f520:	andeq	lr, r2, r4, asr #10
   1f524:	ldrdeq	lr, [r2], -sp
   1f528:	andeq	lr, r2, r2, lsl r5

0001f52c <edge_case_tests@@Base>:
   1f52c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f530:	mov	r3, #158	; 0x9e
   1f534:	sub	sp, sp, #20
   1f538:	mov	r4, #0
   1f53c:	mov	r7, #2
   1f540:	ldr	r6, [pc, #384]	; 1f6c8 <edge_case_tests@@Base+0x19c>
   1f544:	str	r4, [sp]
   1f548:	ldr	r8, [pc, #380]	; 1f6cc <edge_case_tests@@Base+0x1a0>
   1f54c:	str	r4, [sp, #4]
   1f550:	ldr	r9, [pc, #376]	; 1f6d0 <edge_case_tests@@Base+0x1a4>
   1f554:	mov	r0, r6
   1f558:	str	r3, [sp, #8]
   1f55c:	mov	r3, r4
   1f560:	ldr	r2, [pc, #364]	; 1f6d4 <edge_case_tests@@Base+0x1a8>
   1f564:	ldr	r1, [pc, #364]	; 1f6d8 <edge_case_tests@@Base+0x1ac>
   1f568:	bl	1f168 <test_json@@Base>
   1f56c:	mov	r3, #168	; 0xa8
   1f570:	mov	r2, r8
   1f574:	str	r7, [sp]
   1f578:	mov	r1, r9
   1f57c:	mov	r5, r0
   1f580:	str	r4, [sp, #4]
   1f584:	mov	r0, r6
   1f588:	str	r3, [sp, #8]
   1f58c:	mov	r3, r4
   1f590:	bl	1f168 <test_json@@Base>
   1f594:	mov	r3, #172	; 0xac
   1f598:	orr	r5, r5, r0
   1f59c:	ldr	r2, [pc, #312]	; 1f6dc <edge_case_tests@@Base+0x1b0>
   1f5a0:	mov	r0, r6
   1f5a4:	stm	sp, {r4, r7}
   1f5a8:	ldr	r1, [pc, #304]	; 1f6e0 <edge_case_tests@@Base+0x1b4>
   1f5ac:	str	r3, [sp, #8]
   1f5b0:	mov	r3, r4
   1f5b4:	bl	1f168 <test_json@@Base>
   1f5b8:	mov	r3, #176	; 0xb0
   1f5bc:	mov	r1, r9
   1f5c0:	ldr	r2, [pc, #284]	; 1f6e4 <edge_case_tests@@Base+0x1b8>
   1f5c4:	orr	r5, r5, r0
   1f5c8:	mov	r0, r6
   1f5cc:	str	r7, [sp]
   1f5d0:	str	r3, [sp, #8]
   1f5d4:	mov	r3, #4
   1f5d8:	ldr	r9, [pc, #264]	; 1f6e8 <edge_case_tests@@Base+0x1bc>
   1f5dc:	str	r3, [sp, #4]
   1f5e0:	mov	r3, r4
   1f5e4:	bl	1f168 <test_json@@Base>
   1f5e8:	mov	r3, #180	; 0xb4
   1f5ec:	orr	r5, r5, r0
   1f5f0:	ldr	r2, [pc, #244]	; 1f6ec <edge_case_tests@@Base+0x1c0>
   1f5f4:	mov	r0, r6
   1f5f8:	str	r4, [sp]
   1f5fc:	str	r3, [sp, #8]
   1f600:	mov	r3, #8
   1f604:	ldr	r1, [pc, #228]	; 1f6f0 <edge_case_tests@@Base+0x1c4>
   1f608:	str	r3, [sp, #4]
   1f60c:	mov	r3, r4
   1f610:	bl	1f168 <test_json@@Base>
   1f614:	mov	r2, r8
   1f618:	mov	r3, #195	; 0xc3
   1f61c:	ldr	r8, [pc, #208]	; 1f6f4 <edge_case_tests@@Base+0x1c8>
   1f620:	orr	r5, r5, r0
   1f624:	mov	r0, r6
   1f628:	str	r7, [sp]
   1f62c:	ldr	r1, [pc, #196]	; 1f6f8 <edge_case_tests@@Base+0x1cc>
   1f630:	mov	r7, #1
   1f634:	str	r4, [sp, #4]
   1f638:	str	r3, [sp, #8]
   1f63c:	mov	r3, r4
   1f640:	bl	1f168 <test_json@@Base>
   1f644:	mov	r3, #199	; 0xc7
   1f648:	mov	r2, r8
   1f64c:	str	r7, [sp]
   1f650:	mov	r1, r9
   1f654:	orr	r5, r5, r0
   1f658:	str	r4, [sp, #4]
   1f65c:	mov	r0, r6
   1f660:	str	r3, [sp, #8]
   1f664:	mov	r3, r4
   1f668:	bl	1f168 <test_json@@Base>
   1f66c:	mov	r3, #203	; 0xcb
   1f670:	mov	r1, r9
   1f674:	ldr	r2, [pc, #128]	; 1f6fc <edge_case_tests@@Base+0x1d0>
   1f678:	orr	r5, r5, r0
   1f67c:	mov	r0, r6
   1f680:	str	r7, [sp]
   1f684:	str	r7, [sp, #4]
   1f688:	str	r3, [sp, #8]
   1f68c:	mov	r3, r4
   1f690:	bl	1f168 <test_json@@Base>
   1f694:	mov	r3, #209	; 0xd1
   1f698:	ldr	r1, [pc, #96]	; 1f700 <edge_case_tests@@Base+0x1d4>
   1f69c:	orr	r5, r5, r0
   1f6a0:	mov	r2, r8
   1f6a4:	mov	r0, r6
   1f6a8:	str	r7, [sp]
   1f6ac:	str	r4, [sp, #4]
   1f6b0:	str	r3, [sp, #8]
   1f6b4:	mov	r3, r4
   1f6b8:	bl	1f168 <test_json@@Base>
   1f6bc:	orr	r0, r5, r0
   1f6c0:	add	sp, sp, #20
   1f6c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f6c8:	andeq	lr, r2, r4, lsr #32
   1f6cc:	muleq	r2, fp, r5
   1f6d0:			; <UNDEFINED> instruction: 0x0002e5bd
   1f6d4:	andeq	lr, r2, r8, asr #10
   1f6d8:	andeq	lr, r2, r6, ror #10
   1f6dc:	ldrdeq	lr, [r2], -lr	; <UNPREDICTABLE>
   1f6e0:	strdeq	lr, [r2], -fp
   1f6e4:	andeq	lr, r2, r2, lsr #12
   1f6e8:	andeq	lr, r2, sl, lsr #15
   1f6ec:	andeq	lr, r2, r5, lsr r6
   1f6f0:	andeq	lr, r2, r7, asr #14
   1f6f4:	andeq	lr, r2, pc, lsl #15
   1f6f8:	andeq	lr, r2, r9, ror #14
   1f6fc:	ldrdeq	lr, [r2], -ip
   1f700:	strdeq	lr, [r2], -r3

0001f704 <error_case_tests@@Base>:
   1f704:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1f708:	mov	r4, #0
   1f70c:	movw	r3, #285	; 0x11d
   1f710:	mov	r2, r4
   1f714:	ldr	r6, [pc, #476]	; 1f8f8 <error_case_tests@@Base+0x1f4>
   1f718:	str	r4, [sp]
   1f71c:	ldr	r1, [pc, #472]	; 1f8fc <error_case_tests@@Base+0x1f8>
   1f720:	str	r4, [sp, #4]
   1f724:	str	r3, [sp, #8]
   1f728:	mov	r3, #13
   1f72c:	mov	r0, r6
   1f730:	bl	1f168 <test_json@@Base>
   1f734:	movw	r3, #287	; 0x11f
   1f738:	mov	r2, r4
   1f73c:	ldr	r1, [pc, #444]	; 1f900 <error_case_tests@@Base+0x1fc>
   1f740:	mov	r5, r0
   1f744:	mov	r0, r6
   1f748:	str	r4, [sp]
   1f74c:	str	r4, [sp, #4]
   1f750:	str	r3, [sp, #8]
   1f754:	mov	r3, #13
   1f758:	bl	1f168 <test_json@@Base>
   1f75c:	movw	r3, #289	; 0x121
   1f760:	mov	r2, r4
   1f764:	ldr	r1, [pc, #408]	; 1f904 <error_case_tests@@Base+0x200>
   1f768:	orr	r5, r5, r0
   1f76c:	mov	r0, r6
   1f770:	str	r4, [sp]
   1f774:	str	r4, [sp, #4]
   1f778:	str	r3, [sp, #8]
   1f77c:	mov	r3, #13
   1f780:	bl	1f168 <test_json@@Base>
   1f784:	movw	r3, #291	; 0x123
   1f788:	mov	r2, r4
   1f78c:	ldr	r1, [pc, #372]	; 1f908 <error_case_tests@@Base+0x204>
   1f790:	orr	r5, r5, r0
   1f794:	mov	r0, r6
   1f798:	str	r4, [sp]
   1f79c:	str	r4, [sp, #4]
   1f7a0:	str	r3, [sp, #8]
   1f7a4:	mov	r3, #13
   1f7a8:	bl	1f168 <test_json@@Base>
   1f7ac:	movw	r3, #293	; 0x125
   1f7b0:	mov	r2, r4
   1f7b4:	ldr	r1, [pc, #336]	; 1f90c <error_case_tests@@Base+0x208>
   1f7b8:	orr	r5, r5, r0
   1f7bc:	mov	r0, r6
   1f7c0:	str	r4, [sp]
   1f7c4:	str	r4, [sp, #4]
   1f7c8:	str	r3, [sp, #8]
   1f7cc:	mov	r3, #13
   1f7d0:	bl	1f168 <test_json@@Base>
   1f7d4:	mov	r3, #296	; 0x128
   1f7d8:	mov	r2, r4
   1f7dc:	ldr	r1, [pc, #300]	; 1f910 <error_case_tests@@Base+0x20c>
   1f7e0:	orr	r5, r5, r0
   1f7e4:	mov	r0, r6
   1f7e8:	str	r4, [sp]
   1f7ec:	str	r4, [sp, #4]
   1f7f0:	str	r3, [sp, #8]
   1f7f4:	mov	r3, #13
   1f7f8:	bl	1f168 <test_json@@Base>
   1f7fc:	movw	r3, #299	; 0x12b
   1f800:	mov	r2, r4
   1f804:	ldr	r1, [pc, #264]	; 1f914 <error_case_tests@@Base+0x210>
   1f808:	orr	r5, r5, r0
   1f80c:	mov	r0, r6
   1f810:	str	r4, [sp]
   1f814:	str	r4, [sp, #4]
   1f818:	str	r3, [sp, #8]
   1f81c:	mov	r3, #13
   1f820:	bl	1f168 <test_json@@Base>
   1f824:	movw	r3, #303	; 0x12f
   1f828:	mov	r2, r4
   1f82c:	ldr	r1, [pc, #228]	; 1f918 <error_case_tests@@Base+0x214>
   1f830:	orr	r5, r5, r0
   1f834:	mov	r0, r6
   1f838:	str	r4, [sp]
   1f83c:	str	r4, [sp, #4]
   1f840:	str	r3, [sp, #8]
   1f844:	mov	r3, #13
   1f848:	bl	1f168 <test_json@@Base>
   1f84c:	movw	r3, #307	; 0x133
   1f850:	mov	r2, r4
   1f854:	ldr	r1, [pc, #192]	; 1f91c <error_case_tests@@Base+0x218>
   1f858:	orr	r5, r5, r0
   1f85c:	mov	r0, r6
   1f860:	str	r4, [sp]
   1f864:	str	r4, [sp, #4]
   1f868:	str	r3, [sp, #8]
   1f86c:	mov	r3, #13
   1f870:	bl	1f168 <test_json@@Base>
   1f874:	movw	r3, #311	; 0x137
   1f878:	mov	r2, r4
   1f87c:	ldr	r1, [pc, #156]	; 1f920 <error_case_tests@@Base+0x21c>
   1f880:	orr	r5, r5, r0
   1f884:	mov	r0, r6
   1f888:	str	r4, [sp]
   1f88c:	str	r4, [sp, #4]
   1f890:	str	r3, [sp, #8]
   1f894:	mov	r3, #5
   1f898:	bl	1f168 <test_json@@Base>
   1f89c:	movw	r3, #314	; 0x13a
   1f8a0:	mov	r2, r4
   1f8a4:	ldr	r1, [pc, #120]	; 1f924 <error_case_tests@@Base+0x220>
   1f8a8:	orr	r5, r5, r0
   1f8ac:	mov	r0, r6
   1f8b0:	str	r4, [sp]
   1f8b4:	str	r4, [sp, #4]
   1f8b8:	str	r3, [sp, #8]
   1f8bc:	mov	r3, #5
   1f8c0:	bl	1f168 <test_json@@Base>
   1f8c4:	movw	r3, #317	; 0x13d
   1f8c8:	ldr	r1, [pc, #88]	; 1f928 <error_case_tests@@Base+0x224>
   1f8cc:	orr	r5, r5, r0
   1f8d0:	mov	r2, r4
   1f8d4:	mov	r0, r6
   1f8d8:	str	r4, [sp]
   1f8dc:	str	r4, [sp, #4]
   1f8e0:	str	r3, [sp, #8]
   1f8e4:	mov	r3, #5
   1f8e8:	bl	1f168 <test_json@@Base>
   1f8ec:	orr	r0, r5, r0
   1f8f0:	add	sp, sp, #16
   1f8f4:	pop	{r4, r5, r6, pc}
   1f8f8:	andeq	lr, r2, r4, lsr #32
   1f8fc:	andeq	lr, r2, r4, ror #16
   1f900:	andeq	lr, r2, lr, ror r8
   1f904:	ldrdeq	lr, [r2], -pc	; <UNPREDICTABLE>
   1f908:	andeq	lr, r2, sp, lsr r9
   1f90c:	muleq	r2, r5, r9
   1f910:	andeq	lr, r2, sl, ror #19
   1f914:	andeq	lr, r2, r8, lsl #21
   1f918:	andeq	lr, r2, r3, lsr #22
   1f91c:	andeq	lr, r2, sl, ror #23
   1f920:			; <UNDEFINED> instruction: 0x0002ecb1
   1f924:	andeq	lr, r2, r9, asr #25
   1f928:	andeq	lr, r2, pc, ror #25

0001f92c <base64_tests@@Base>:
   1f92c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1f930:	mov	r4, #0
   1f934:	movw	r3, #369	; 0x171
   1f938:	ldr	r6, [pc, #328]	; 1fa88 <base64_tests@@Base+0x15c>
   1f93c:	str	r4, [sp]
   1f940:	ldr	r2, [pc, #324]	; 1fa8c <base64_tests@@Base+0x160>
   1f944:	str	r4, [sp, #4]
   1f948:	ldr	r1, [pc, #320]	; 1fa90 <base64_tests@@Base+0x164>
   1f94c:	mov	r0, r6
   1f950:	str	r3, [sp, #8]
   1f954:	mov	r3, r4
   1f958:	bl	1f168 <test_json@@Base>
   1f95c:	ldr	r8, [pc, #304]	; 1fa94 <base64_tests@@Base+0x168>
   1f960:	mov	r3, #372	; 0x174
   1f964:	mov	r5, r0
   1f968:	mov	r0, r6
   1f96c:	str	r4, [sp]
   1f970:	ldr	r2, [pc, #288]	; 1fa98 <base64_tests@@Base+0x16c>
   1f974:	str	r4, [sp, #4]
   1f978:	ldr	r1, [pc, #284]	; 1fa9c <base64_tests@@Base+0x170>
   1f97c:	str	r3, [sp, #8]
   1f980:	mov	r3, r4
   1f984:	bl	1f168 <test_json@@Base>
   1f988:	ldr	r7, [pc, #272]	; 1faa0 <base64_tests@@Base+0x174>
   1f98c:	mov	r3, #376	; 0x178
   1f990:	mov	r2, r8
   1f994:	orr	r5, r5, r0
   1f998:	mov	r0, r6
   1f99c:	str	r4, [sp]
   1f9a0:	ldr	r1, [pc, #252]	; 1faa4 <base64_tests@@Base+0x178>
   1f9a4:	str	r4, [sp, #4]
   1f9a8:	str	r3, [sp, #8]
   1f9ac:	mov	r3, r4
   1f9b0:	bl	1f168 <test_json@@Base>
   1f9b4:	movw	r3, #379	; 0x17b
   1f9b8:	mov	r2, r7
   1f9bc:	ldr	r1, [pc, #228]	; 1faa8 <base64_tests@@Base+0x17c>
   1f9c0:	orr	r5, r5, r0
   1f9c4:	mov	r0, r6
   1f9c8:	str	r4, [sp]
   1f9cc:	str	r4, [sp, #4]
   1f9d0:	str	r3, [sp, #8]
   1f9d4:	mov	r3, r4
   1f9d8:	bl	1f168 <test_json@@Base>
   1f9dc:	movw	r3, #382	; 0x17e
   1f9e0:	mov	r2, r8
   1f9e4:	ldr	r1, [pc, #192]	; 1faac <base64_tests@@Base+0x180>
   1f9e8:	orr	r5, r5, r0
   1f9ec:	mov	r0, r6
   1f9f0:	str	r4, [sp]
   1f9f4:	str	r4, [sp, #4]
   1f9f8:	str	r3, [sp, #8]
   1f9fc:	mov	r3, r4
   1fa00:	bl	1f168 <test_json@@Base>
   1fa04:	movw	r3, #385	; 0x181
   1fa08:	mov	r2, r7
   1fa0c:	ldr	r1, [pc, #156]	; 1fab0 <base64_tests@@Base+0x184>
   1fa10:	orr	r5, r5, r0
   1fa14:	mov	r0, r6
   1fa18:	str	r4, [sp]
   1fa1c:	str	r4, [sp, #4]
   1fa20:	str	r3, [sp, #8]
   1fa24:	mov	r3, r4
   1fa28:	bl	1f168 <test_json@@Base>
   1fa2c:	mov	r3, #388	; 0x184
   1fa30:	mov	r2, r4
   1fa34:	ldr	r1, [pc, #120]	; 1fab4 <base64_tests@@Base+0x188>
   1fa38:	orr	r5, r5, r0
   1fa3c:	mov	r0, r6
   1fa40:	str	r4, [sp]
   1fa44:	str	r4, [sp, #4]
   1fa48:	str	r3, [sp, #8]
   1fa4c:	mov	r3, #31
   1fa50:	bl	1f168 <test_json@@Base>
   1fa54:	movw	r3, #391	; 0x187
   1fa58:	ldr	r1, [pc, #88]	; 1fab8 <base64_tests@@Base+0x18c>
   1fa5c:	orr	r5, r5, r0
   1fa60:	mov	r2, r4
   1fa64:	mov	r0, r6
   1fa68:	str	r4, [sp]
   1fa6c:	str	r4, [sp, #4]
   1fa70:	str	r3, [sp, #8]
   1fa74:	mov	r3, #32
   1fa78:	bl	1f168 <test_json@@Base>
   1fa7c:	orr	r0, r5, r0
   1fa80:	add	sp, sp, #16
   1fa84:	pop	{r4, r5, r6, r7, r8, pc}
   1fa88:	andeq	lr, r2, r4, lsr #32
   1fa8c:	andeq	lr, r2, r2, lsr #12
   1fa90:	andeq	lr, r2, r7, lsr #26
   1fa94:	andeq	lr, r2, r7, lsl #27
   1fa98:	andeq	lr, r2, sp, lsr sp
   1fa9c:	andeq	lr, r2, r0, ror #26
   1faa0:	strdeq	lr, [r2], -r4
   1faa4:	andeq	lr, r2, fp, lsr lr
   1faa8:	andeq	lr, r2, fp, lsr #31
   1faac:	andeq	pc, r2, r7, rrx
   1fab0:	andeq	pc, r2, lr, lsl r1	; <UNPREDICTABLE>
   1fab4:	ldrdeq	pc, [r2], -r8
   1fab8:	muleq	r2, r1, r2

0001fabc <mixed_type_union_tests@@Base>:
   1fabc:	push	{r4, r5, r6, r7, lr}
   1fac0:	mov	r3, #432	; 0x1b0
   1fac4:	sub	sp, sp, #20
   1fac8:	mov	r4, #0
   1facc:	ldr	r6, [pc, #284]	; 1fbf0 <mixed_type_union_tests@@Base+0x134>
   1fad0:	str	r4, [sp]
   1fad4:	ldr	r7, [pc, #280]	; 1fbf4 <mixed_type_union_tests@@Base+0x138>
   1fad8:	str	r4, [sp, #4]
   1fadc:	ldr	r2, [pc, #276]	; 1fbf8 <mixed_type_union_tests@@Base+0x13c>
   1fae0:	mov	r0, r6
   1fae4:	str	r3, [sp, #8]
   1fae8:	mov	r3, r4
   1faec:	ldr	r1, [pc, #264]	; 1fbfc <mixed_type_union_tests@@Base+0x140>
   1faf0:	bl	1f168 <test_json@@Base>
   1faf4:	movw	r3, #437	; 0x1b5
   1faf8:	mov	r2, r7
   1fafc:	ldr	r1, [pc, #252]	; 1fc00 <mixed_type_union_tests@@Base+0x144>
   1fb00:	mov	r5, r0
   1fb04:	mov	r0, r6
   1fb08:	str	r4, [sp]
   1fb0c:	str	r4, [sp, #4]
   1fb10:	str	r3, [sp, #8]
   1fb14:	mov	r3, r4
   1fb18:	bl	1f168 <test_json@@Base>
   1fb1c:	movw	r3, #442	; 0x1ba
   1fb20:	mov	r2, r7
   1fb24:	ldr	r1, [pc, #216]	; 1fc04 <mixed_type_union_tests@@Base+0x148>
   1fb28:	orr	r5, r5, r0
   1fb2c:	mov	r0, r6
   1fb30:	str	r4, [sp]
   1fb34:	str	r4, [sp, #4]
   1fb38:	str	r3, [sp, #8]
   1fb3c:	mov	r3, r4
   1fb40:	bl	1f168 <test_json@@Base>
   1fb44:	movw	r3, #449	; 0x1c1
   1fb48:	orr	r5, r5, r0
   1fb4c:	ldr	r2, [pc, #180]	; 1fc08 <mixed_type_union_tests@@Base+0x14c>
   1fb50:	mov	r0, r6
   1fb54:	str	r4, [sp]
   1fb58:	ldr	r1, [pc, #172]	; 1fc0c <mixed_type_union_tests@@Base+0x150>
   1fb5c:	str	r4, [sp, #4]
   1fb60:	str	r3, [sp, #8]
   1fb64:	mov	r3, r4
   1fb68:	bl	1f168 <test_json@@Base>
   1fb6c:	movw	r3, #458	; 0x1ca
   1fb70:	orr	r5, r5, r0
   1fb74:	ldr	r2, [pc, #148]	; 1fc10 <mixed_type_union_tests@@Base+0x154>
   1fb78:	mov	r0, r6
   1fb7c:	str	r4, [sp]
   1fb80:	ldr	r1, [pc, #140]	; 1fc14 <mixed_type_union_tests@@Base+0x158>
   1fb84:	str	r4, [sp, #4]
   1fb88:	str	r3, [sp, #8]
   1fb8c:	mov	r3, r4
   1fb90:	bl	1f168 <test_json@@Base>
   1fb94:	movw	r3, #469	; 0x1d5
   1fb98:	orr	r5, r5, r0
   1fb9c:	ldr	r2, [pc, #116]	; 1fc18 <mixed_type_union_tests@@Base+0x15c>
   1fba0:	mov	r0, r6
   1fba4:	str	r4, [sp]
   1fba8:	ldr	r1, [pc, #108]	; 1fc1c <mixed_type_union_tests@@Base+0x160>
   1fbac:	str	r4, [sp, #4]
   1fbb0:	str	r3, [sp, #8]
   1fbb4:	mov	r3, r4
   1fbb8:	bl	1f168 <test_json@@Base>
   1fbbc:	movw	r3, #474	; 0x1da
   1fbc0:	ldr	r1, [pc, #88]	; 1fc20 <mixed_type_union_tests@@Base+0x164>
   1fbc4:	orr	r5, r5, r0
   1fbc8:	mov	r2, r7
   1fbcc:	mov	r0, r6
   1fbd0:	str	r4, [sp]
   1fbd4:	str	r4, [sp, #4]
   1fbd8:	str	r3, [sp, #8]
   1fbdc:	mov	r3, r4
   1fbe0:	bl	1f168 <test_json@@Base>
   1fbe4:	orr	r0, r5, r0
   1fbe8:	add	sp, sp, #20
   1fbec:	pop	{r4, r5, r6, r7, pc}
   1fbf0:	andeq	lr, r2, r4, lsr r0
   1fbf4:	andeq	pc, r2, r3, ror #7
   1fbf8:	andeq	pc, r2, sp, asr #6
   1fbfc:	muleq	r2, r4, r3
   1fc00:	andeq	pc, r2, sl, asr r4	; <UNPREDICTABLE>
   1fc04:	ldrdeq	pc, [r2], -sp
   1fc08:	andeq	pc, r2, r3, ror r5	; <UNPREDICTABLE>
   1fc0c:	andeq	pc, r2, ip, lsr #12
   1fc10:	andeq	pc, r2, r9, lsl #14
   1fc14:	andeq	pc, r2, r7, ror #15
   1fc18:	andeq	pc, r2, sp, ror #17
   1fc1c:	andeq	pc, r2, r3, lsr sl	; <UNPREDICTABLE>
   1fc20:			; <UNDEFINED> instruction: 0x0002fbb4

0001fc24 <union_vector_tests@@Base>:
   1fc24:	push	{r4, r5, r6, r7, lr}
   1fc28:	movw	r3, #485	; 0x1e5
   1fc2c:	sub	sp, sp, #20
   1fc30:	mov	r4, #0
   1fc34:	ldr	r6, [pc, #244]	; 1fd30 <union_vector_tests@@Base+0x10c>
   1fc38:	str	r4, [sp]
   1fc3c:	ldr	r7, [pc, #240]	; 1fd34 <union_vector_tests@@Base+0x110>
   1fc40:	str	r4, [sp, #4]
   1fc44:	ldr	r1, [pc, #236]	; 1fd38 <union_vector_tests@@Base+0x114>
   1fc48:	mov	r0, r6
   1fc4c:	str	r3, [sp, #8]
   1fc50:	mov	r3, r4
   1fc54:	mov	r2, r7
   1fc58:	bl	1f168 <test_json@@Base>
   1fc5c:	mov	r3, #488	; 0x1e8
   1fc60:	mov	r5, r0
   1fc64:	ldr	r2, [pc, #208]	; 1fd3c <union_vector_tests@@Base+0x118>
   1fc68:	mov	r0, r6
   1fc6c:	str	r4, [sp]
   1fc70:	ldr	r1, [pc, #200]	; 1fd40 <union_vector_tests@@Base+0x11c>
   1fc74:	str	r4, [sp, #4]
   1fc78:	str	r3, [sp, #8]
   1fc7c:	mov	r3, r4
   1fc80:	bl	1f168 <test_json@@Base>
   1fc84:	movw	r3, #491	; 0x1eb
   1fc88:	orr	r5, r5, r0
   1fc8c:	ldr	r2, [pc, #176]	; 1fd44 <union_vector_tests@@Base+0x120>
   1fc90:	mov	r0, r6
   1fc94:	str	r4, [sp]
   1fc98:	ldr	r1, [pc, #168]	; 1fd48 <union_vector_tests@@Base+0x124>
   1fc9c:	str	r4, [sp, #4]
   1fca0:	str	r3, [sp, #8]
   1fca4:	mov	r3, r4
   1fca8:	bl	1f168 <test_json@@Base>
   1fcac:	movw	r3, #494	; 0x1ee
   1fcb0:	orr	r5, r5, r0
   1fcb4:	ldr	r2, [pc, #144]	; 1fd4c <union_vector_tests@@Base+0x128>
   1fcb8:	mov	r0, r6
   1fcbc:	str	r4, [sp]
   1fcc0:	ldr	r1, [pc, #136]	; 1fd50 <union_vector_tests@@Base+0x12c>
   1fcc4:	str	r4, [sp, #4]
   1fcc8:	str	r3, [sp, #8]
   1fccc:	mov	r3, r4
   1fcd0:	bl	1f168 <test_json@@Base>
   1fcd4:	movw	r3, #497	; 0x1f1
   1fcd8:	mov	r2, r7
   1fcdc:	ldr	r1, [pc, #112]	; 1fd54 <union_vector_tests@@Base+0x130>
   1fce0:	orr	r5, r5, r0
   1fce4:	mov	r0, r6
   1fce8:	str	r4, [sp]
   1fcec:	str	r4, [sp, #4]
   1fcf0:	str	r3, [sp, #8]
   1fcf4:	mov	r3, r4
   1fcf8:	bl	1f168 <test_json@@Base>
   1fcfc:	mov	r3, #500	; 0x1f4
   1fd00:	ldr	r2, [pc, #80]	; 1fd58 <union_vector_tests@@Base+0x134>
   1fd04:	orr	r5, r5, r0
   1fd08:	mov	r0, r6
   1fd0c:	str	r4, [sp]
   1fd10:	ldr	r1, [pc, #68]	; 1fd5c <union_vector_tests@@Base+0x138>
   1fd14:	str	r4, [sp, #4]
   1fd18:	str	r3, [sp, #8]
   1fd1c:	mov	r3, r4
   1fd20:	bl	1f168 <test_json@@Base>
   1fd24:	orr	r0, r5, r0
   1fd28:	add	sp, sp, #20
   1fd2c:	pop	{r4, r5, r6, r7, pc}
   1fd30:	andeq	lr, r2, r4, asr #32
   1fd34:	andeq	pc, r2, r1, asr #24
   1fd38:	andeq	pc, r2, r9, ror ip	; <UNPREDICTABLE>
   1fd3c:			; <UNDEFINED> instruction: 0x0002fcb9
   1fd40:	andeq	pc, r2, r4, ror #25
   1fd44:	andeq	pc, r2, r7, lsl sp	; <UNPREDICTABLE>
   1fd48:	andeq	pc, r2, fp, asr sp	; <UNPREDICTABLE>
   1fd4c:	andeq	pc, r2, r8, lsr #27
   1fd50:	andeq	pc, r2, r4, lsl lr	; <UNPREDICTABLE>
   1fd54:	muleq	r2, r1, lr
   1fd58:	ldrdeq	pc, [r2], -r0
   1fd5c:	andeq	pc, r2, ip, lsr #30
   1fd60:	ldr	ip, [r0, #28]
   1fd64:	ldrd	r2, [r0, #60]	; 0x3c
   1fd68:	sub	r3, r3, ip
   1fd6c:	add	r2, r2, ip
   1fd70:	cmp	r3, r1
   1fd74:	strls	r3, [r0, #24]
   1fd78:	strhi	r1, [r0, #24]
   1fd7c:	ldr	r3, [r0, #32]
   1fd80:	str	r2, [r0, #16]
   1fd84:	str	r1, [r3, #4]
   1fd88:	bx	lr
   1fd8c:	push	{r0, r1, r4, r5, r6, lr}
   1fd90:	mov	r6, r2
   1fd94:	mov	r3, #1
   1fd98:	mov	r4, r0
   1fd9c:	ldr	r2, [r0, #28]
   1fda0:	str	r3, [sp]
   1fda4:	ldr	r5, [r0, #48]	; 0x30
   1fda8:	add	r2, r1, r2
   1fdac:	add	r1, r0, #60	; 0x3c
   1fdb0:	ldr	r0, [r0, #40]	; 0x28
   1fdb4:	blx	r5
   1fdb8:	subs	r5, r0, #0
   1fdbc:	mvnne	r5, #0
   1fdc0:	bne	1fdd0 <union_vector_tests@@Base+0x1ac>
   1fdc4:	mov	r1, r6
   1fdc8:	mov	r0, r4
   1fdcc:	bl	1fd60 <union_vector_tests@@Base+0x13c>
   1fdd0:	mov	r0, r5
   1fdd4:	add	sp, sp, #8
   1fdd8:	pop	{r4, r5, r6, pc}
   1fddc:	push	{r4, r5, r6, lr}
   1fde0:	mov	r4, r0
   1fde4:	ldr	r5, [r0, #20]
   1fde8:	ldr	r3, [r0, #24]
   1fdec:	add	r1, r5, r1
   1fdf0:	cmp	r1, r3
   1fdf4:	str	r1, [r0, #20]
   1fdf8:	bcs	1fe08 <union_vector_tests@@Base+0x1e4>
   1fdfc:	ldr	r0, [r4, #16]
   1fe00:	add	r0, r0, r5
   1fe04:	pop	{r4, r5, r6, pc}
   1fe08:	mvn	r2, #3
   1fe0c:	add	r1, r1, #1
   1fe10:	bl	1fd8c <union_vector_tests@@Base+0x168>
   1fe14:	cmp	r0, #0
   1fe18:	beq	1fdfc <union_vector_tests@@Base+0x1d8>
   1fe1c:	mov	r0, #0
   1fe20:	pop	{r4, r5, r6, pc}
   1fe24:	push	{r4, lr}
   1fe28:	mov	r1, #0
   1fe2c:	mov	r4, r0
   1fe30:	ldr	r2, [r0, #20]
   1fe34:	ldr	r0, [r0, #16]
   1fe38:	bl	145c0 <memset@plt>
   1fe3c:	ldr	r3, [r4, #32]
   1fe40:	mov	r0, r4
   1fe44:	ldmib	r3, {r1, r2}
   1fe48:	str	r2, [r4, #20]
   1fe4c:	ldr	r2, [r3]
   1fe50:	str	r2, [r4, #28]
   1fe54:	bl	1fd60 <union_vector_tests@@Base+0x13c>
   1fe58:	ldrh	r3, [r4, #130]	; 0x82
   1fe5c:	ldrh	r2, [r4, #128]	; 0x80
   1fe60:	cmp	r2, r3
   1fe64:	strhcc	r3, [r4, #128]	; 0x80
   1fe68:	ldr	r3, [r4, #32]
   1fe6c:	ldrh	r2, [r3, #12]
   1fe70:	sub	r3, r3, #36	; 0x24
   1fe74:	str	r3, [r4, #32]
   1fe78:	ldr	r3, [r4, #156]	; 0x9c
   1fe7c:	strh	r2, [r4, #130]	; 0x82
   1fe80:	sub	r3, r3, #1
   1fe84:	str	r3, [r4, #156]	; 0x9c
   1fe88:	pop	{r4, pc}
   1fe8c:	ldr	r3, [r0, #20]
   1fe90:	mov	r2, r1
   1fe94:	mov	r1, #0
   1fe98:	sub	r3, r3, r2
   1fe9c:	str	r3, [r0, #20]
   1fea0:	ldr	r0, [r0, #16]
   1fea4:	add	r0, r0, r3
   1fea8:	b	145c0 <memset@plt>
   1feac:	push	{r4, r5, r6, lr}
   1feb0:	mov	r6, r1
   1feb4:	mov	r1, r2
   1feb8:	mov	r4, r2
   1febc:	bl	1fddc <union_vector_tests@@Base+0x1b8>
   1fec0:	subs	r5, r0, #0
   1fec4:	beq	1fed4 <union_vector_tests@@Base+0x2b0>
   1fec8:	mov	r2, r4
   1fecc:	mov	r1, r6
   1fed0:	bl	14548 <memcpy@plt>
   1fed4:	mov	r0, r5
   1fed8:	pop	{r4, r5, r6, pc}
   1fedc:	push	{r0, r1, r4, lr}
   1fee0:	cmp	r0, #4
   1fee4:	mov	r4, #0
   1fee8:	mov	r2, r1
   1feec:	movcs	r1, r0
   1fef0:	movcc	r1, #4
   1fef4:	add	r0, sp, #4
   1fef8:	str	r4, [sp, #4]
   1fefc:	bl	145b4 <posix_memalign@plt>
   1ff00:	cmp	r0, r4
   1ff04:	beq	1ff1c <union_vector_tests@@Base+0x2f8>
   1ff08:	ldr	r0, [sp, #4]
   1ff0c:	cmp	r0, r4
   1ff10:	beq	1ff1c <union_vector_tests@@Base+0x2f8>
   1ff14:	bl	1453c <free@plt>
   1ff18:	str	r4, [sp, #4]
   1ff1c:	ldr	r0, [sp, #4]
   1ff20:	add	sp, sp, #8
   1ff24:	pop	{r4, pc}

0001ff28 <flatcc_builder_default_alloc@@Base>:
   1ff28:	push	{r4, r5, r6, r7, r8, lr}
   1ff2c:	subs	r6, r2, #0
   1ff30:	mov	r5, r1
   1ff34:	bne	1ff58 <flatcc_builder_default_alloc@@Base+0x30>
   1ff38:	ldr	r0, [r1]
   1ff3c:	cmp	r0, #0
   1ff40:	popeq	{r4, r5, r6, r7, r8, pc}
   1ff44:	bl	1453c <free@plt>
   1ff48:	str	r6, [r5]
   1ff4c:	str	r6, [r5, #4]
   1ff50:	mov	r0, #0
   1ff54:	pop	{r4, r5, r6, r7, r8, pc}
   1ff58:	ldr	r2, [sp, #24]
   1ff5c:	mov	r7, r3
   1ff60:	sub	r2, r2, #1
   1ff64:	cmp	r2, #6
   1ff68:	ldrls	pc, [pc, r2, lsl #2]
   1ff6c:	b	20000 <flatcc_builder_default_alloc@@Base+0xd8>
   1ff70:	andeq	r0, r2, r8
   1ff74:	andeq	r0, r2, r0
   1ff78:	andeq	r0, r2, r0
   1ff7c:	strdeq	pc, [r1], -r0
   1ff80:	andeq	pc, r1, ip, lsl #31
   1ff84:	andeq	r0, r2, r0
   1ff88:	strdeq	pc, [r1], -r8
   1ff8c:	mov	r4, r6
   1ff90:	cmp	r6, r4
   1ff94:	bhi	20010 <flatcc_builder_default_alloc@@Base+0xe8>
   1ff98:	ldr	r2, [r5, #4]
   1ff9c:	cmp	r6, r2
   1ffa0:	bhi	1ffac <flatcc_builder_default_alloc@@Base+0x84>
   1ffa4:	cmp	r4, r2, lsr #1
   1ffa8:	bls	1ff50 <flatcc_builder_default_alloc@@Base+0x28>
   1ffac:	mov	r1, r4
   1ffb0:	ldr	r0, [r5]
   1ffb4:	bl	14560 <realloc@plt>
   1ffb8:	subs	r6, r0, #0
   1ffbc:	beq	20018 <flatcc_builder_default_alloc@@Base+0xf0>
   1ffc0:	cmp	r7, #0
   1ffc4:	beq	1ffe4 <flatcc_builder_default_alloc@@Base+0xbc>
   1ffc8:	ldr	r0, [r5, #4]
   1ffcc:	cmp	r4, r0
   1ffd0:	bls	1ffe4 <flatcc_builder_default_alloc@@Base+0xbc>
   1ffd4:	sub	r2, r4, r0
   1ffd8:	mov	r1, #0
   1ffdc:	add	r0, r6, r0
   1ffe0:	bl	145c0 <memset@plt>
   1ffe4:	str	r6, [r5]
   1ffe8:	str	r4, [r5, #4]
   1ffec:	b	1ff50 <flatcc_builder_default_alloc@@Base+0x28>
   1fff0:	mov	r4, #288	; 0x120
   1fff4:	b	1ff90 <flatcc_builder_default_alloc@@Base+0x68>
   1fff8:	mov	r4, #64	; 0x40
   1fffc:	b	1ff90 <flatcc_builder_default_alloc@@Base+0x68>
   20000:	mov	r4, #32
   20004:	b	1ff90 <flatcc_builder_default_alloc@@Base+0x68>
   20008:	mov	r4, #256	; 0x100
   2000c:	b	1ff90 <flatcc_builder_default_alloc@@Base+0x68>
   20010:	lsl	r4, r4, #1
   20014:	b	1ff90 <flatcc_builder_default_alloc@@Base+0x68>
   20018:	mvn	r0, #0
   2001c:	pop	{r4, r5, r6, r7, r8, pc}
   20020:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20024:	add	r6, r0, #52	; 0x34
   20028:	mov	r4, r1
   2002c:	add	r1, r6, r1, lsl #3
   20030:	mov	r5, r2
   20034:	add	r2, r2, r3
   20038:	ldr	r3, [r1, #4]
   2003c:	cmp	r2, r3
   20040:	bls	20074 <flatcc_builder_default_alloc@@Base+0x14c>
   20044:	str	r4, [sp]
   20048:	ldr	r3, [sp, #32]
   2004c:	ldr	r7, [r0, #48]	; 0x30
   20050:	ldr	r0, [r0, #40]	; 0x28
   20054:	blx	r7
   20058:	cmp	r0, #0
   2005c:	beq	20074 <flatcc_builder_default_alloc@@Base+0x14c>
   20060:	ldr	r3, [pc, #28]	; 20084 <flatcc_builder_default_alloc@@Base+0x15c>
   20064:	mov	r2, #308	; 0x134
   20068:	ldr	r1, [pc, #24]	; 20088 <flatcc_builder_default_alloc@@Base+0x160>
   2006c:	ldr	r0, [pc, #24]	; 2008c <flatcc_builder_default_alloc@@Base+0x164>
   20070:	bl	14620 <__assert_fail@plt>
   20074:	ldr	r0, [r6, r4, lsl #3]
   20078:	add	r0, r0, r5
   2007c:	add	sp, sp, #12
   20080:	pop	{r4, r5, r6, r7, pc}
   20084:	andeq	r0, r3, fp, asr #30
   20088:	andeq	r1, r3, sl, asr #12
   2008c:			; <UNDEFINED> instruction: 0x000316b7
   20090:	ldrd	r2, [r0, #156]	; 0x9c
   20094:	push	{r0, r1, r4, r5, r6, lr}
   20098:	mov	r5, r1
   2009c:	mov	r4, r0
   200a0:	add	r1, r2, #1
   200a4:	cmp	r1, r3
   200a8:	str	r1, [r0, #156]	; 0x9c
   200ac:	ble	20158 <flatcc_builder_default_alloc@@Base+0x230>
   200b0:	ldr	r3, [r0, #176]	; 0xb0
   200b4:	cmp	r1, r3
   200b8:	cmpgt	r3, #0
   200bc:	movgt	r3, #1
   200c0:	movle	r3, #0
   200c4:	ble	200d4 <flatcc_builder_default_alloc@@Base+0x1ac>
   200c8:	mvn	r0, #0
   200cc:	add	sp, sp, #8
   200d0:	pop	{r4, r5, r6, pc}
   200d4:	mov	r6, #36	; 0x24
   200d8:	mov	r1, #4
   200dc:	str	r3, [sp]
   200e0:	mov	r3, r6
   200e4:	mul	r2, r6, r2
   200e8:	bl	20020 <flatcc_builder_default_alloc@@Base+0xf8>
   200ec:	cmp	r0, #0
   200f0:	str	r0, [r4, #32]
   200f4:	beq	200c8 <flatcc_builder_default_alloc@@Base+0x1a0>
   200f8:	ldr	r3, [r4, #88]	; 0x58
   200fc:	ldr	r2, [r4, #176]	; 0xb0
   20100:	udiv	r3, r3, r6
   20104:	cmp	r2, #0
   20108:	cmpgt	r3, r2
   2010c:	movgt	r3, r2
   20110:	str	r3, [r4, #160]	; 0xa0
   20114:	ldrh	r1, [r4, #130]	; 0x82
   20118:	mvn	r0, #3
   2011c:	ldr	r3, [r4, #20]
   20120:	ldr	r2, [r4, #32]
   20124:	str	r3, [r2, #8]
   20128:	strh	r1, [r2, #12]
   2012c:	ldr	r1, [r4, #28]
   20130:	strh	r5, [r4, #130]	; 0x82
   20134:	add	r3, r3, r1
   20138:	str	r0, [r2, #4]
   2013c:	mov	r0, #0
   20140:	add	r3, r3, #7
   20144:	str	r1, [r2]
   20148:	bic	r3, r3, #7
   2014c:	str	r0, [r4, #20]
   20150:	str	r3, [r4, #28]
   20154:	b	200cc <flatcc_builder_default_alloc@@Base+0x1a4>
   20158:	ldr	r3, [r0, #32]
   2015c:	add	r3, r3, #36	; 0x24
   20160:	str	r3, [r0, #32]
   20164:	b	20114 <flatcc_builder_default_alloc@@Base+0x1ec>
   20168:	ldr	r3, [r0, #32]
   2016c:	push	{r0, r1, r2, r4, r5, lr}
   20170:	add	r1, r1, #2
   20174:	mov	r4, r0
   20178:	lsl	r5, r1, #1
   2017c:	ldrh	r1, [r3, #28]
   20180:	ldr	r2, [r3, #16]
   20184:	mov	r3, #1
   20188:	str	r3, [sp]
   2018c:	mov	r3, r5
   20190:	add	r2, r2, r1, lsl #1
   20194:	mov	r1, #0
   20198:	bl	20020 <flatcc_builder_default_alloc@@Base+0xf8>
   2019c:	cmp	r0, #0
   201a0:	streq	r0, [r4, #4]
   201a4:	mvneq	r0, #0
   201a8:	beq	201e4 <flatcc_builder_default_alloc@@Base+0x2bc>
   201ac:	ldr	r2, [r4, #32]
   201b0:	add	r0, r0, #4
   201b4:	mov	r3, #0
   201b8:	mov	r1, #3
   201bc:	str	r0, [r4, #4]
   201c0:	mov	r0, r4
   201c4:	str	r3, [sp]
   201c8:	sub	r3, r5, #3
   201cc:	ldr	r2, [r2, #20]
   201d0:	bl	20020 <flatcc_builder_default_alloc@@Base+0xf8>
   201d4:	str	r0, [r4]
   201d8:	clz	r0, r0
   201dc:	lsr	r0, r0, #5
   201e0:	rsb	r0, r0, #0
   201e4:	add	sp, sp, #12
   201e8:	pop	{r4, r5, pc}
   201ec:	push	{r0, r1, r2, r4, r5, lr}
   201f0:	ldr	r3, [r1]
   201f4:	ldr	r4, [r0, #140]	; 0x8c
   201f8:	add	r2, r3, r4
   201fc:	cmp	r2, r4
   20200:	ldrlt	r3, [pc, #76]	; 20254 <flatcc_builder_default_alloc@@Base+0x32c>
   20204:	str	r2, [r0, #140]	; 0x8c
   20208:	movwlt	r2, #673	; 0x2a1
   2020c:	blt	2023c <flatcc_builder_default_alloc@@Base+0x314>
   20210:	add	r1, r1, #8
   20214:	str	r3, [sp]
   20218:	mov	r3, r4
   2021c:	ldr	r2, [r1, #-4]
   20220:	ldr	r5, [r0, #44]	; 0x2c
   20224:	ldr	r0, [r0, #36]	; 0x24
   20228:	blx	r5
   2022c:	cmp	r0, #0
   20230:	beq	20248 <flatcc_builder_default_alloc@@Base+0x320>
   20234:	ldr	r3, [pc, #24]	; 20254 <flatcc_builder_default_alloc@@Base+0x32c>
   20238:	movw	r2, #677	; 0x2a5
   2023c:	ldr	r1, [pc, #20]	; 20258 <flatcc_builder_default_alloc@@Base+0x330>
   20240:	ldr	r0, [pc, #20]	; 2025c <flatcc_builder_default_alloc@@Base+0x334>
   20244:	bl	14620 <__assert_fail@plt>
   20248:	add	r0, r4, #1
   2024c:	add	sp, sp, #12
   20250:	pop	{r4, r5, pc}
   20254:	andeq	r0, r3, sl, asr pc
   20258:	andeq	r1, r3, sl, asr #12
   2025c:			; <UNDEFINED> instruction: 0x000316b7
   20260:	cmp	r2, #0
   20264:	bne	20274 <flatcc_builder_default_alloc@@Base+0x34c>
   20268:	ldrh	r2, [r0, #132]	; 0x84
   2026c:	cmp	r2, #0
   20270:	moveq	r2, #1
   20274:	ldrh	ip, [r1]
   20278:	cmp	ip, #3
   2027c:	movls	ip, #4
   20280:	strhls	ip, [r1]
   20284:	ldrh	ip, [r1]
   20288:	cmp	ip, r2
   2028c:	strhcc	r2, [r1]
   20290:	cmp	r3, #0
   20294:	bne	202f4 <flatcc_builder_default_alloc@@Base+0x3cc>
   20298:	ldr	r3, [r0, #140]	; 0x8c
   2029c:	sub	r2, r2, #1
   202a0:	ands	r2, r2, r3
   202a4:	beq	202f4 <flatcc_builder_default_alloc@@Base+0x3cc>
   202a8:	push	{r4, lr}
   202ac:	mov	r3, #1
   202b0:	sub	sp, sp, #72	; 0x48
   202b4:	mov	r1, sp
   202b8:	ldr	r4, [pc, #60]	; 202fc <flatcc_builder_default_alloc@@Base+0x3d4>
   202bc:	strd	r2, [sp]
   202c0:	str	r4, [sp, #8]
   202c4:	str	r2, [sp, #12]
   202c8:	bl	201ec <flatcc_builder_default_alloc@@Base+0x2c4>
   202cc:	cmp	r0, #0
   202d0:	bne	202e8 <flatcc_builder_default_alloc@@Base+0x3c0>
   202d4:	add	r3, r4, #512	; 0x200
   202d8:	movw	r2, #702	; 0x2be
   202dc:	ldr	r1, [pc, #28]	; 20300 <flatcc_builder_default_alloc@@Base+0x3d8>
   202e0:	ldr	r0, [pc, #28]	; 20304 <flatcc_builder_default_alloc@@Base+0x3dc>
   202e4:	bl	14620 <__assert_fail@plt>
   202e8:	mov	r0, #0
   202ec:	add	sp, sp, #72	; 0x48
   202f0:	pop	{r4, pc}
   202f4:	mov	r0, #0
   202f8:	bx	lr
   202fc:	andeq	r0, r3, r4, ror #30
   20300:	andeq	r1, r3, sl, asr #12
   20304:			; <UNDEFINED> instruction: 0x000316b7
   20308:	ldr	r3, [r1]
   2030c:	push	{r0, r1, r4, r5, r6, lr}
   20310:	ldr	r2, [r0, #136]	; 0x88
   20314:	sub	r4, r2, r3
   20318:	cmp	r2, r4
   2031c:	ldrle	r3, [pc, #80]	; 20374 <flatcc_builder_default_alloc@@Base+0x44c>
   20320:	movwle	r2, #647	; 0x287
   20324:	ble	20358 <flatcc_builder_default_alloc@@Base+0x430>
   20328:	mov	r5, r0
   2032c:	add	r1, r1, #8
   20330:	str	r3, [sp]
   20334:	mov	r3, r4
   20338:	ldr	r2, [r1, #-4]
   2033c:	ldr	r0, [r0, #36]	; 0x24
   20340:	ldr	r6, [r5, #44]	; 0x2c
   20344:	blx	r6
   20348:	cmp	r0, #0
   2034c:	beq	20364 <flatcc_builder_default_alloc@@Base+0x43c>
   20350:	ldr	r3, [pc, #28]	; 20374 <flatcc_builder_default_alloc@@Base+0x44c>
   20354:	movw	r2, #651	; 0x28b
   20358:	ldr	r1, [pc, #24]	; 20378 <flatcc_builder_default_alloc@@Base+0x450>
   2035c:	ldr	r0, [pc, #24]	; 2037c <flatcc_builder_default_alloc@@Base+0x454>
   20360:	bl	14620 <__assert_fail@plt>
   20364:	mov	r0, r4
   20368:	str	r4, [r5, #136]	; 0x88
   2036c:	add	sp, sp, #8
   20370:	pop	{r4, r5, r6, pc}
   20374:	andeq	r1, r3, r3, ror r1
   20378:	andeq	r1, r3, sl, asr #12
   2037c:			; <UNDEFINED> instruction: 0x000316b7
   20380:	ldr	r3, [r0, #20]
   20384:	adds	r1, r3, r1
   20388:	movcs	r3, #1
   2038c:	movcc	r3, #0
   20390:	cmp	r1, r2
   20394:	movls	r2, r3
   20398:	orrhi	r2, r3, #1
   2039c:	cmp	r2, #0
   203a0:	beq	203bc <flatcc_builder_default_alloc@@Base+0x494>
   203a4:	push	{r4, lr}
   203a8:	mov	r2, #892	; 0x37c
   203ac:	ldr	r3, [pc, #20]	; 203c8 <flatcc_builder_default_alloc@@Base+0x4a0>
   203b0:	ldr	r1, [pc, #20]	; 203cc <flatcc_builder_default_alloc@@Base+0x4a4>
   203b4:	ldr	r0, [pc, #20]	; 203d0 <flatcc_builder_default_alloc@@Base+0x4a8>
   203b8:	bl	14620 <__assert_fail@plt>
   203bc:	str	r1, [r0, #20]
   203c0:	mov	r0, r2
   203c4:	bx	lr
   203c8:	andeq	r1, r3, lr, ror r1
   203cc:	andeq	r1, r3, sl, asr #12
   203d0:	muleq	r3, r0, r6
   203d4:	ldrh	ip, [r0, #128]	; 0x80
   203d8:	push	{r4, r5, r6, lr}
   203dc:	sub	sp, sp, #80	; 0x50
   203e0:	ldr	r5, [r0, #136]	; 0x88
   203e4:	cmp	ip, #3
   203e8:	movls	ip, #4
   203ec:	strhls	ip, [r0, #128]	; 0x80
   203f0:	mov	ip, #4
   203f4:	add	lr, sp, ip
   203f8:	and	r4, r5, #3
   203fc:	stmib	sp, {r2, ip}
   20400:	str	lr, [sp, #16]
   20404:	str	ip, [sp, #20]
   20408:	mov	ip, #1
   2040c:	str	ip, [sp, #12]
   20410:	lsls	ip, r2, #2
   20414:	beq	20430 <flatcc_builder_default_alloc@@Base+0x508>
   20418:	add	lr, ip, #4
   2041c:	str	ip, [sp, #28]
   20420:	mov	ip, #2
   20424:	str	lr, [sp, #8]
   20428:	str	ip, [sp, #12]
   2042c:	str	r1, [sp, #24]
   20430:	cmp	r4, #0
   20434:	beq	20464 <flatcc_builder_default_alloc@@Base+0x53c>
   20438:	ldr	ip, [sp, #8]
   2043c:	add	lr, sp, #80	; 0x50
   20440:	ldr	r6, [pc, #204]	; 20514 <flatcc_builder_default_alloc@@Base+0x5ec>
   20444:	add	ip, ip, r4
   20448:	str	ip, [sp, #8]
   2044c:	ldr	ip, [sp, #12]
   20450:	add	ip, ip, #1
   20454:	add	lr, lr, ip, lsl #3
   20458:	str	ip, [sp, #12]
   2045c:	str	r6, [lr, #-72]	; 0xffffffb8
   20460:	str	r4, [lr, #-68]	; 0xffffffbc
   20464:	ldr	lr, [sp, #8]
   20468:	mov	ip, #0
   2046c:	mvn	r6, #3
   20470:	sub	lr, lr, #4
   20474:	sub	lr, lr, r5
   20478:	cmp	r2, ip
   2047c:	bne	20490 <flatcc_builder_default_alloc@@Base+0x568>
   20480:	add	r1, sp, #8
   20484:	bl	20308 <flatcc_builder_default_alloc@@Base+0x3e0>
   20488:	add	sp, sp, #80	; 0x50
   2048c:	pop	{r4, r5, r6, pc}
   20490:	ldr	r5, [r1, ip, lsl #2]
   20494:	cmp	r5, #0
   20498:	beq	204d0 <flatcc_builder_default_alloc@@Base+0x5a8>
   2049c:	mla	r4, r6, ip, lr
   204a0:	cmp	r3, #0
   204a4:	add	r4, r4, r5
   204a8:	str	r4, [r1, ip, lsl #2]
   204ac:	beq	2050c <flatcc_builder_default_alloc@@Base+0x5e4>
   204b0:	ldrb	r4, [r3, ip]
   204b4:	cmp	r4, #0
   204b8:	bne	2050c <flatcc_builder_default_alloc@@Base+0x5e4>
   204bc:	ldr	r3, [pc, #84]	; 20518 <flatcc_builder_default_alloc@@Base+0x5f0>
   204c0:	movw	r2, #1457	; 0x5b1
   204c4:	ldr	r1, [pc, #80]	; 2051c <flatcc_builder_default_alloc@@Base+0x5f4>
   204c8:	ldr	r0, [pc, #80]	; 20520 <flatcc_builder_default_alloc@@Base+0x5f8>
   204cc:	bl	14620 <__assert_fail@plt>
   204d0:	cmp	r3, #0
   204d4:	beq	204f8 <flatcc_builder_default_alloc@@Base+0x5d0>
   204d8:	ldrb	r4, [r3, ip]
   204dc:	cmp	r4, #0
   204e0:	beq	2050c <flatcc_builder_default_alloc@@Base+0x5e4>
   204e4:	ldr	r3, [pc, #44]	; 20518 <flatcc_builder_default_alloc@@Base+0x5f0>
   204e8:	movw	r2, #1461	; 0x5b5
   204ec:	ldr	r1, [pc, #40]	; 2051c <flatcc_builder_default_alloc@@Base+0x5f4>
   204f0:	ldr	r0, [pc, #44]	; 20524 <flatcc_builder_default_alloc@@Base+0x5fc>
   204f4:	b	204cc <flatcc_builder_default_alloc@@Base+0x5a4>
   204f8:	ldr	r3, [pc, #24]	; 20518 <flatcc_builder_default_alloc@@Base+0x5f0>
   204fc:	movw	r2, #1463	; 0x5b7
   20500:	ldr	r1, [pc, #20]	; 2051c <flatcc_builder_default_alloc@@Base+0x5f4>
   20504:	ldr	r0, [pc, #28]	; 20528 <flatcc_builder_default_alloc@@Base+0x600>
   20508:	b	204cc <flatcc_builder_default_alloc@@Base+0x5a4>
   2050c:	add	ip, ip, #1
   20510:	b	20478 <flatcc_builder_default_alloc@@Base+0x550>
   20514:	andeq	r0, r3, r4, ror #30
   20518:	andeq	r1, r3, pc, lsl #3
   2051c:	andeq	r1, r3, sl, asr #12
   20520:	andeq	r1, r3, fp, lsr #13
   20524:			; <UNDEFINED> instruction: 0x000316b9
   20528:			; <UNDEFINED> instruction: 0x000316b7

0002052c <flatcc_builder_flush_vtable_cache@@Base>:
   2052c:	ldr	r3, [r0, #116]	; 0x74
   20530:	cmp	r3, #0
   20534:	bxeq	lr
   20538:	push	{r4, lr}
   2053c:	mov	r4, r0
   20540:	mov	r1, #0
   20544:	ldr	r0, [r0, #92]	; 0x5c
   20548:	ldr	r2, [r4, #96]	; 0x60
   2054c:	bl	145c0 <memset@plt>
   20550:	mov	r0, #0
   20554:	mov	r1, #16
   20558:	strd	r0, [r4, #120]	; 0x78
   2055c:	pop	{r4, pc}

00020560 <flatcc_builder_custom_init@@Base>:
   20560:	push	{r4, r5, r6, r7, r8, lr}
   20564:	mov	r6, r1
   20568:	mov	r7, r2
   2056c:	mov	r1, #0
   20570:	mov	r2, #232	; 0xe8
   20574:	mov	r4, r0
   20578:	mov	r5, r3
   2057c:	bl	145c0 <memset@plt>
   20580:	cmp	r6, #0
   20584:	mov	r0, #0
   20588:	moveq	r3, #1
   2058c:	addeq	r7, r4, #188	; 0xbc
   20590:	ldreq	r6, [pc, #36]	; 205bc <flatcc_builder_custom_init@@Base+0x5c>
   20594:	streq	r3, [r4, #184]	; 0xb8
   20598:	cmp	r5, #0
   2059c:	ldr	r3, [pc, #28]	; 205c0 <flatcc_builder_custom_init@@Base+0x60>
   205a0:	str	r7, [r4, #36]	; 0x24
   205a4:	str	r6, [r4, #44]	; 0x2c
   205a8:	moveq	r5, r3
   205ac:	ldr	r3, [sp, #24]
   205b0:	str	r3, [r4, #40]	; 0x28
   205b4:	str	r5, [r4, #48]	; 0x30
   205b8:	pop	{r4, r5, r6, r7, r8, pc}
   205bc:	andeq	r2, r2, r0, ror ip
   205c0:	andeq	pc, r1, r8, lsr #30

000205c4 <flatcc_builder_init@@Base>:
   205c4:	push	{r4, lr}
   205c8:	mov	r2, #232	; 0xe8
   205cc:	mov	r1, #0
   205d0:	bl	145c0 <memset@plt>
   205d4:	mov	r3, r0
   205d8:	mov	r2, #1
   205dc:	mov	r0, #0
   205e0:	str	r2, [r3, #184]	; 0xb8
   205e4:	ldr	r2, [pc, #20]	; 20600 <flatcc_builder_init@@Base+0x3c>
   205e8:	str	r2, [r3, #48]	; 0x30
   205ec:	add	r2, r3, #188	; 0xbc
   205f0:	str	r2, [r3, #36]	; 0x24
   205f4:	ldr	r2, [pc, #8]	; 20604 <flatcc_builder_init@@Base+0x40>
   205f8:	str	r2, [r3, #44]	; 0x2c
   205fc:	pop	{r4, pc}
   20600:	andeq	pc, r1, r8, lsr #30
   20604:	andeq	r2, r2, r0, ror ip

00020608 <flatcc_builder_custom_reset@@Base>:
   20608:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2060c:	mov	r4, r0
   20610:	mov	r7, r1
   20614:	mov	r8, r2
   20618:	mov	r5, r0
   2061c:	mov	r6, #0
   20620:	ldr	r3, [r5, #52]	; 0x34
   20624:	add	r1, r5, #52	; 0x34
   20628:	cmp	r3, #0
   2062c:	beq	20708 <flatcc_builder_custom_reset@@Base+0x100>
   20630:	cmp	r6, #5
   20634:	cmpne	r8, #0
   20638:	bne	206e0 <flatcc_builder_custom_reset@@Base+0xd8>
   2063c:	mov	r1, #0
   20640:	ldr	r0, [r5, #52]	; 0x34
   20644:	ldr	r2, [r5, #56]	; 0x38
   20648:	bl	145c0 <memset@plt>
   2064c:	add	r6, r6, #1
   20650:	add	r5, r5, #8
   20654:	cmp	r6, #8
   20658:	bne	20620 <flatcc_builder_custom_reset@@Base+0x18>
   2065c:	ldr	r2, [r4, #124]	; 0x7c
   20660:	mov	r3, #0
   20664:	ldr	r0, [r4, #184]	; 0xb8
   20668:	str	r3, [r4, #24]
   2066c:	str	r3, [r4, #32]
   20670:	cmp	r2, r3
   20674:	str	r3, [r4, #120]	; 0x78
   20678:	movne	r2, #16
   2067c:	strh	r3, [r4, #128]	; 0x80
   20680:	str	r3, [r4, #136]	; 0x88
   20684:	strne	r2, [r4, #124]	; 0x7c
   20688:	cmp	r7, #0
   2068c:	ldr	r2, [r4, #60]	; 0x3c
   20690:	strne	r3, [r4, #172]	; 0xac
   20694:	strne	r3, [r4, #176]	; 0xb0
   20698:	strne	r3, [r4, #180]	; 0xb4
   2069c:	cmp	r0, #0
   206a0:	strd	r2, [r4, #16]
   206a4:	ldr	r2, [r4, #76]	; 0x4c
   206a8:	str	r2, [r4]
   206ac:	ldr	r2, [r4, #52]	; 0x34
   206b0:	str	r3, [r4, #140]	; 0x8c
   206b4:	str	r3, [r4, #148]	; 0x94
   206b8:	str	r3, [r4, #152]	; 0x98
   206bc:	str	r3, [r4, #156]	; 0x9c
   206c0:	str	r2, [r4, #4]
   206c4:	str	r3, [r4, #160]	; 0xa0
   206c8:	beq	206d8 <flatcc_builder_custom_reset@@Base+0xd0>
   206cc:	add	r0, r4, #188	; 0xbc
   206d0:	bl	22b70 <flatcc_emitter_reset@@Base>
   206d4:	mov	r0, #0
   206d8:	add	sp, sp, #12
   206dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   206e0:	mov	r3, #1
   206e4:	ldr	r0, [r4, #40]	; 0x28
   206e8:	mov	r2, r3
   206ec:	ldr	r9, [r4, #48]	; 0x30
   206f0:	str	r6, [sp]
   206f4:	blx	r9
   206f8:	cmp	r0, #0
   206fc:	beq	2063c <flatcc_builder_custom_reset@@Base+0x34>
   20700:	mvn	r0, #0
   20704:	b	206d8 <flatcc_builder_custom_reset@@Base+0xd0>
   20708:	ldr	r3, [r5, #56]	; 0x38
   2070c:	cmp	r3, #0
   20710:	beq	2064c <flatcc_builder_custom_reset@@Base+0x44>
   20714:	ldr	r3, [pc, #12]	; 20728 <flatcc_builder_custom_reset@@Base+0x120>
   20718:	movw	r2, #434	; 0x1b2
   2071c:	ldr	r1, [pc, #8]	; 2072c <flatcc_builder_custom_reset@@Base+0x124>
   20720:	ldr	r0, [pc, #8]	; 20730 <flatcc_builder_custom_reset@@Base+0x128>
   20724:	bl	14620 <__assert_fail@plt>
   20728:	andeq	r1, r3, ip, lsr #3
   2072c:	andeq	r1, r3, sl, asr #12
   20730:	andeq	r1, r3, r7, asr #13

00020734 <flatcc_builder_reset@@Base>:
   20734:	mov	r2, #0
   20738:	mov	r1, r2
   2073c:	b	20608 <flatcc_builder_custom_reset@@Base>

00020740 <flatcc_builder_clear@@Base>:
   20740:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20744:	mov	r4, r0
   20748:	add	r6, r0, #52	; 0x34
   2074c:	mov	r5, #0
   20750:	mov	r3, #0
   20754:	mov	r1, r6
   20758:	mov	r2, r3
   2075c:	ldr	r0, [r4, #40]	; 0x28
   20760:	add	r6, r6, #8
   20764:	ldr	r7, [r4, #48]	; 0x30
   20768:	str	r5, [sp]
   2076c:	add	r5, r5, #1
   20770:	blx	r7
   20774:	cmp	r5, #8
   20778:	bne	20750 <flatcc_builder_clear@@Base+0x10>
   2077c:	ldr	r3, [r4, #184]	; 0xb8
   20780:	cmp	r3, #0
   20784:	beq	20790 <flatcc_builder_clear@@Base+0x50>
   20788:	add	r0, r4, #188	; 0xbc
   2078c:	bl	22c18 <flatcc_emitter_clear@@Base>
   20790:	mov	r2, #232	; 0xe8
   20794:	mov	r1, #0
   20798:	mov	r0, r4
   2079c:	add	sp, sp, #12
   207a0:	pop	{r4, r5, r6, r7, lr}
   207a4:	b	145c0 <memset@plt>

000207a8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   207a8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   207ac:	add	r5, r1, #3
   207b0:	mov	r7, #0
   207b4:	bic	r5, r5, #3
   207b8:	mov	r1, #7
   207bc:	add	r5, r5, #4
   207c0:	mov	r6, r0
   207c4:	mov	r3, r5
   207c8:	str	r7, [sp]
   207cc:	ldr	r2, [r0, #228]	; 0xe4
   207d0:	bl	20020 <flatcc_builder_default_alloc@@Base+0xf8>
   207d4:	subs	r4, r0, #0
   207d8:	beq	20804 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   207dc:	mov	r2, r5
   207e0:	mov	r1, r7
   207e4:	bl	145c0 <memset@plt>
   207e8:	ldr	r3, [r6, #224]	; 0xe0
   207ec:	str	r3, [r4], #4
   207f0:	ldr	r1, [r6, #228]	; 0xe4
   207f4:	add	r3, r1, #4
   207f8:	add	r5, r1, r5
   207fc:	str	r3, [r6, #224]	; 0xe0
   20800:	str	r5, [r6, #228]	; 0xe4
   20804:	mov	r0, r4
   20808:	add	sp, sp, #12
   2080c:	pop	{r4, r5, r6, r7, pc}

00020810 <flatcc_builder_enter_user_frame@@Base>:
   20810:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20814:	add	r4, r1, #3
   20818:	mov	r7, #0
   2081c:	bic	r4, r4, #3
   20820:	mov	r1, #7
   20824:	add	r4, r4, #4
   20828:	mov	r6, r0
   2082c:	mov	r3, r4
   20830:	str	r7, [sp]
   20834:	ldr	r2, [r0, #228]	; 0xe4
   20838:	bl	20020 <flatcc_builder_default_alloc@@Base+0xf8>
   2083c:	subs	r5, r0, #0
   20840:	moveq	r0, r5
   20844:	beq	20870 <flatcc_builder_enter_user_frame@@Base+0x60>
   20848:	mov	r2, r4
   2084c:	mov	r1, r7
   20850:	bl	145c0 <memset@plt>
   20854:	ldr	r3, [r6, #224]	; 0xe0
   20858:	str	r3, [r5]
   2085c:	ldr	r1, [r6, #228]	; 0xe4
   20860:	add	r0, r1, #4
   20864:	add	r4, r1, r4
   20868:	str	r0, [r6, #224]	; 0xe0
   2086c:	str	r4, [r6, #228]	; 0xe4
   20870:	add	sp, sp, #12
   20874:	pop	{r4, r5, r6, r7, pc}

00020878 <flatcc_builder_exit_user_frame@@Base>:
   20878:	ldr	r3, [r0, #224]	; 0xe0
   2087c:	cmp	r3, #0
   20880:	bne	2089c <flatcc_builder_exit_user_frame@@Base+0x24>
   20884:	push	{r4, lr}
   20888:	movw	r2, #542	; 0x21e
   2088c:	ldr	r3, [pc, #40]	; 208bc <flatcc_builder_exit_user_frame@@Base+0x44>
   20890:	ldr	r1, [pc, #40]	; 208c0 <flatcc_builder_exit_user_frame@@Base+0x48>
   20894:	ldr	r0, [pc, #40]	; 208c4 <flatcc_builder_exit_user_frame@@Base+0x4c>
   20898:	bl	14620 <__assert_fail@plt>
   2089c:	ldr	r1, [r0, #108]	; 0x6c
   208a0:	mov	r2, r0
   208a4:	add	r1, r1, r3
   208a8:	sub	r3, r3, #4
   208ac:	str	r3, [r0, #228]	; 0xe4
   208b0:	ldr	r0, [r1, #-4]
   208b4:	str	r0, [r2, #224]	; 0xe0
   208b8:	bx	lr
   208bc:	andeq	r1, r3, r8, asr #3
   208c0:	andeq	r1, r3, sl, asr #12
   208c4:	ldrdeq	r1, [r3], -r9

000208c8 <flatcc_builder_exit_user_frame_at@@Base>:
   208c8:	ldr	r2, [r0, #224]	; 0xe0
   208cc:	cmp	r2, r1
   208d0:	bcs	208ec <flatcc_builder_exit_user_frame_at@@Base+0x24>
   208d4:	push	{r4, lr}
   208d8:	movw	r2, #551	; 0x227
   208dc:	ldr	r3, [pc, #16]	; 208f4 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   208e0:	ldr	r1, [pc, #16]	; 208f8 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   208e4:	ldr	r0, [pc, #16]	; 208fc <flatcc_builder_exit_user_frame_at@@Base+0x34>
   208e8:	bl	14620 <__assert_fail@plt>
   208ec:	str	r1, [r0, #224]	; 0xe0
   208f0:	b	20878 <flatcc_builder_exit_user_frame@@Base>
   208f4:	andeq	r1, r3, r7, ror #3
   208f8:	andeq	r1, r3, sl, asr #12
   208fc:	strdeq	r1, [r3], -r2

00020900 <flatcc_builder_get_current_user_frame@@Base>:
   20900:	ldr	r0, [r0, #224]	; 0xe0
   20904:	bx	lr

00020908 <flatcc_builder_get_user_frame_ptr@@Base>:
   20908:	ldr	r0, [r0, #108]	; 0x6c
   2090c:	add	r0, r0, r1
   20910:	bx	lr

00020914 <flatcc_builder_embed_buffer@@Base>:
   20914:	push	{r4, r5, r6, lr}
   20918:	mov	r4, r3
   2091c:	sub	sp, sp, #80	; 0x50
   20920:	mov	r6, r2
   20924:	mov	r2, r1
   20928:	add	r1, sp, #96	; 0x60
   2092c:	mov	r5, r0
   20930:	ldr	r3, [r0, #152]	; 0x98
   20934:	adds	r3, r3, #0
   20938:	movne	r3, #1
   2093c:	bl	20260 <flatcc_builder_default_alloc@@Base+0x338>
   20940:	cmp	r0, #0
   20944:	movne	r0, #0
   20948:	bne	20a1c <flatcc_builder_embed_buffer@@Base+0x108>
   2094c:	ldr	r3, [sp, #100]	; 0x64
   20950:	str	r0, [sp, #8]
   20954:	str	r0, [sp, #12]
   20958:	tst	r3, #2
   2095c:	ldr	r3, [r5, #136]	; 0x88
   20960:	movne	r2, #4
   20964:	moveq	r2, #0
   20968:	sub	r3, r3, r4
   2096c:	sub	r3, r3, r2
   20970:	ldrh	r2, [sp, #96]	; 0x60
   20974:	sub	r2, r2, #1
   20978:	and	r3, r3, r2
   2097c:	add	r2, r4, r3
   20980:	str	r2, [sp, #4]
   20984:	ldr	r2, [r5, #152]	; 0x98
   20988:	cmp	r2, #0
   2098c:	beq	209ac <flatcc_builder_embed_buffer@@Base+0x98>
   20990:	mov	r2, #4
   20994:	add	r1, sp, r2
   20998:	str	r2, [sp, #8]
   2099c:	str	r1, [sp, #16]
   209a0:	str	r2, [sp, #20]
   209a4:	mov	r2, #1
   209a8:	str	r2, [sp, #12]
   209ac:	cmp	r4, #0
   209b0:	beq	209dc <flatcc_builder_embed_buffer@@Base+0xc8>
   209b4:	ldr	r2, [sp, #8]
   209b8:	add	r1, sp, #80	; 0x50
   209bc:	add	r2, r2, r4
   209c0:	str	r2, [sp, #8]
   209c4:	ldr	r2, [sp, #12]
   209c8:	add	r2, r2, #1
   209cc:	add	r1, r1, r2, lsl #3
   209d0:	str	r2, [sp, #12]
   209d4:	str	r6, [r1, #-72]	; 0xffffffb8
   209d8:	str	r4, [r1, #-68]	; 0xffffffbc
   209dc:	cmp	r3, #0
   209e0:	beq	20a10 <flatcc_builder_embed_buffer@@Base+0xfc>
   209e4:	ldr	r2, [sp, #8]
   209e8:	add	r1, sp, #80	; 0x50
   209ec:	ldr	r0, [pc, #48]	; 20a24 <flatcc_builder_embed_buffer@@Base+0x110>
   209f0:	add	r2, r2, r3
   209f4:	str	r2, [sp, #8]
   209f8:	ldr	r2, [sp, #12]
   209fc:	add	r2, r2, #1
   20a00:	add	r1, r1, r2, lsl #3
   20a04:	str	r2, [sp, #12]
   20a08:	str	r0, [r1, #-72]	; 0xffffffb8
   20a0c:	str	r3, [r1, #-68]	; 0xffffffbc
   20a10:	add	r1, sp, #8
   20a14:	mov	r0, r5
   20a18:	bl	20308 <flatcc_builder_default_alloc@@Base+0x3e0>
   20a1c:	add	sp, sp, #80	; 0x50
   20a20:	pop	{r4, r5, r6, pc}
   20a24:	andeq	r0, r3, r4, ror #30

00020a28 <flatcc_builder_create_buffer@@Base>:
   20a28:	push	{r4, r5, r6, r7, r8, r9, lr}
   20a2c:	sub	sp, sp, #92	; 0x5c
   20a30:	mov	r8, #0
   20a34:	mov	r9, r1
   20a38:	mov	r5, r3
   20a3c:	add	r1, sp, #120	; 0x78
   20a40:	mov	r4, r0
   20a44:	ldr	r7, [sp, #124]	; 0x7c
   20a48:	str	r8, [sp, #12]
   20a4c:	and	r6, r7, #1
   20a50:	mov	r3, r6
   20a54:	bl	20260 <flatcc_builder_default_alloc@@Base+0x338>
   20a58:	cmp	r0, r8
   20a5c:	bne	20bcc <flatcc_builder_create_buffer@@Base+0x1a4>
   20a60:	ldrh	r3, [r4, #128]	; 0x80
   20a64:	ldrh	r1, [sp, #120]	; 0x78
   20a68:	ldr	r2, [r4, #136]	; 0x88
   20a6c:	cmp	r3, r1
   20a70:	strhcc	r1, [r4, #128]	; 0x80
   20a74:	cmp	r9, #0
   20a78:	sub	r1, r1, #1
   20a7c:	ldrne	r3, [r9]
   20a80:	strne	r3, [sp, #12]
   20a84:	sub	r3, r2, #4
   20a88:	ldr	r0, [sp, #12]
   20a8c:	cmp	r0, #0
   20a90:	movne	r0, #4
   20a94:	tst	r7, #2
   20a98:	movne	ip, #4
   20a9c:	moveq	ip, #0
   20aa0:	sub	r3, r3, r0
   20aa4:	ands	r7, r7, #3
   20aa8:	sub	r3, r3, ip
   20aac:	and	r3, r3, r1
   20ab0:	mov	r1, #0
   20ab4:	str	r1, [sp, #16]
   20ab8:	str	r1, [sp, #20]
   20abc:	beq	20adc <flatcc_builder_create_buffer@@Base+0xb4>
   20ac0:	mov	r1, #4
   20ac4:	add	ip, sp, #8
   20ac8:	str	r1, [sp, #16]
   20acc:	str	ip, [sp, #24]
   20ad0:	str	r1, [sp, #28]
   20ad4:	mov	r1, #1
   20ad8:	str	r1, [sp, #20]
   20adc:	ldr	ip, [sp, #16]
   20ae0:	add	r8, sp, #88	; 0x58
   20ae4:	add	r9, sp, #4
   20ae8:	cmp	r0, #0
   20aec:	ldr	lr, [sp, #20]
   20af0:	add	ip, ip, #4
   20af4:	add	r1, lr, #1
   20af8:	str	ip, [sp, #16]
   20afc:	add	r8, r8, r1, lsl #3
   20b00:	str	r1, [sp, #20]
   20b04:	str	r9, [r8, #-72]	; 0xffffffb8
   20b08:	mov	r9, #4
   20b0c:	str	r9, [r8, #-68]	; 0xffffffbc
   20b10:	beq	20b3c <flatcc_builder_create_buffer@@Base+0x114>
   20b14:	add	ip, ip, r0
   20b18:	add	r1, lr, #2
   20b1c:	add	lr, lr, #2
   20b20:	str	ip, [sp, #16]
   20b24:	add	ip, sp, #88	; 0x58
   20b28:	add	r1, ip, r1, lsl #3
   20b2c:	add	ip, sp, #12
   20b30:	str	lr, [sp, #20]
   20b34:	str	ip, [r1, #-72]	; 0xffffffb8
   20b38:	str	r0, [r1, #-68]	; 0xffffffbc
   20b3c:	cmp	r3, #0
   20b40:	beq	20b70 <flatcc_builder_create_buffer@@Base+0x148>
   20b44:	ldr	r1, [sp, #16]
   20b48:	add	r0, sp, #88	; 0x58
   20b4c:	ldr	ip, [pc, #132]	; 20bd8 <flatcc_builder_create_buffer@@Base+0x1b0>
   20b50:	add	r1, r1, r3
   20b54:	str	r1, [sp, #16]
   20b58:	ldr	r1, [sp, #20]
   20b5c:	add	r1, r1, #1
   20b60:	add	r0, r0, r1, lsl #3
   20b64:	str	r1, [sp, #20]
   20b68:	str	ip, [r0, #-72]	; 0xffffffb8
   20b6c:	str	r3, [r0, #-68]	; 0xffffffbc
   20b70:	ldr	r3, [sp, #16]
   20b74:	cmp	r7, #0
   20b78:	add	r1, sp, #16
   20b7c:	mov	r0, r4
   20b80:	sub	r3, r2, r3
   20b84:	movne	r2, #4
   20b88:	moveq	r2, #0
   20b8c:	cmp	r6, #0
   20b90:	add	r3, r3, r2
   20b94:	ldrne	r2, [r4, #144]	; 0x90
   20b98:	ldreq	r2, [r4, #140]	; 0x8c
   20b9c:	sub	r2, r2, r3
   20ba0:	sub	r3, r5, r3
   20ba4:	str	r3, [sp, #4]
   20ba8:	str	r2, [sp, #8]
   20bac:	bl	20308 <flatcc_builder_default_alloc@@Base+0x3e0>
   20bb0:	cmp	r0, #0
   20bb4:	bne	20bd0 <flatcc_builder_create_buffer@@Base+0x1a8>
   20bb8:	ldr	r3, [pc, #28]	; 20bdc <flatcc_builder_create_buffer@@Base+0x1b4>
   20bbc:	mov	r2, #772	; 0x304
   20bc0:	ldr	r1, [pc, #24]	; 20be0 <flatcc_builder_create_buffer@@Base+0x1b8>
   20bc4:	ldr	r0, [pc, #24]	; 20be4 <flatcc_builder_create_buffer@@Base+0x1bc>
   20bc8:	bl	14620 <__assert_fail@plt>
   20bcc:	mov	r0, r8
   20bd0:	add	sp, sp, #92	; 0x5c
   20bd4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20bd8:	andeq	r0, r3, r4, ror #30
   20bdc:	andeq	r1, r3, r9, lsl #4
   20be0:	andeq	r1, r3, sl, asr #12
   20be4:			; <UNDEFINED> instruction: 0x000316b7

00020be8 <flatcc_builder_create_struct@@Base>:
   20be8:	cmp	r3, #0
   20bec:	push	{lr}		; (str lr, [sp, #-4]!)
   20bf0:	sub	sp, sp, #76	; 0x4c
   20bf4:	bne	20c0c <flatcc_builder_create_struct@@Base+0x24>
   20bf8:	ldr	r3, [pc, #148]	; 20c94 <flatcc_builder_create_struct@@Base+0xac>
   20bfc:	movw	r2, #783	; 0x30f
   20c00:	ldr	r1, [pc, #144]	; 20c98 <flatcc_builder_create_struct@@Base+0xb0>
   20c04:	ldr	r0, [pc, #144]	; 20c9c <flatcc_builder_create_struct@@Base+0xb4>
   20c08:	bl	14620 <__assert_fail@plt>
   20c0c:	ldrh	ip, [r0, #128]	; 0x80
   20c10:	cmp	ip, r3
   20c14:	ldr	ip, [r0, #136]	; 0x88
   20c18:	strhcc	r3, [r0, #128]	; 0x80
   20c1c:	sub	r3, r3, #1
   20c20:	sub	ip, ip, r2
   20c24:	and	r3, r3, ip
   20c28:	mov	ip, #0
   20c2c:	cmp	r2, ip
   20c30:	str	ip, [sp]
   20c34:	str	ip, [sp, #4]
   20c38:	beq	20c50 <flatcc_builder_create_struct@@Base+0x68>
   20c3c:	str	r2, [sp]
   20c40:	str	r1, [sp, #8]
   20c44:	str	r2, [sp, #12]
   20c48:	mov	r2, #1
   20c4c:	str	r2, [sp, #4]
   20c50:	cmp	r3, #0
   20c54:	beq	20c84 <flatcc_builder_create_struct@@Base+0x9c>
   20c58:	ldr	r2, [sp]
   20c5c:	add	r1, sp, #72	; 0x48
   20c60:	ldr	ip, [pc, #56]	; 20ca0 <flatcc_builder_create_struct@@Base+0xb8>
   20c64:	add	r2, r2, r3
   20c68:	str	r2, [sp]
   20c6c:	ldr	r2, [sp, #4]
   20c70:	add	r2, r2, #1
   20c74:	add	r1, r1, r2, lsl #3
   20c78:	str	r2, [sp, #4]
   20c7c:	str	ip, [r1, #-72]	; 0xffffffb8
   20c80:	str	r3, [r1, #-68]	; 0xffffffbc
   20c84:	mov	r1, sp
   20c88:	bl	20308 <flatcc_builder_default_alloc@@Base+0x3e0>
   20c8c:	add	sp, sp, #76	; 0x4c
   20c90:	pop	{pc}		; (ldr pc, [sp], #4)
   20c94:	andeq	r1, r3, r6, lsr #4
   20c98:	andeq	r1, r3, sl, asr #12
   20c9c:	andeq	r1, r3, r1, lsl r7
   20ca0:	andeq	r0, r3, r4, ror #30

00020ca4 <flatcc_builder_start_buffer@@Base>:
   20ca4:	push	{r4, r5, r6, r7, r8, lr}
   20ca8:	mov	r5, r1
   20cac:	mov	r4, r0
   20cb0:	mov	r7, r2
   20cb4:	mov	r6, r3
   20cb8:	ldrh	r1, [r0, #128]	; 0x80
   20cbc:	bl	20090 <flatcc_builder_default_alloc@@Base+0x168>
   20cc0:	cmp	r0, #0
   20cc4:	bne	20d34 <flatcc_builder_start_buffer@@Base+0x90>
   20cc8:	ldrh	r3, [r4, #132]	; 0x84
   20ccc:	mov	ip, #1
   20cd0:	cmp	r5, #0
   20cd4:	ldr	r1, [r4, #32]
   20cd8:	strh	ip, [r4, #128]	; 0x80
   20cdc:	strh	r3, [r1, #34]	; 0x22
   20ce0:	ldrh	r3, [r4, #164]	; 0xa4
   20ce4:	strh	r7, [r4, #132]	; 0x84
   20ce8:	strh	r3, [r1, #32]
   20cec:	ldr	r3, [r4, #144]	; 0x90
   20cf0:	strh	r6, [r4, #164]	; 0xa4
   20cf4:	str	r3, [r1, #20]
   20cf8:	ldr	r3, [r4, #152]	; 0x98
   20cfc:	str	r3, [r1, #28]
   20d00:	ldr	r3, [r4, #136]	; 0x88
   20d04:	str	r3, [r4, #144]	; 0x90
   20d08:	ldr	r3, [r4, #148]	; 0x94
   20d0c:	add	r2, r3, ip
   20d10:	strd	r2, [r4, #148]	; 0x94
   20d14:	ldr	r3, [r4, #168]	; 0xa8
   20d18:	str	r3, [r1, #16]
   20d1c:	ldr	r3, [pc, #24]	; 20d3c <flatcc_builder_start_buffer@@Base+0x98>
   20d20:	moveq	r5, r3
   20d24:	ldr	r3, [r5]
   20d28:	str	r3, [r4, #168]	; 0xa8
   20d2c:	strh	ip, [r1, #14]
   20d30:	pop	{r4, r5, r6, r7, r8, pc}
   20d34:	mvn	r0, #0
   20d38:	pop	{r4, r5, r6, r7, r8, pc}
   20d3c:	andeq	r0, r3, r4, ror #30

00020d40 <flatcc_builder_end_buffer@@Base>:
   20d40:	push	{r0, r1, r2, r4, r5, lr}
   20d44:	mov	r4, r0
   20d48:	ldrh	r0, [r0, #164]	; 0xa4
   20d4c:	ldr	r2, [r4, #152]	; 0x98
   20d50:	and	r0, r0, #2
   20d54:	cmp	r2, #0
   20d58:	orrne	r0, r0, #1
   20d5c:	ldr	r2, [r4, #32]
   20d60:	ldrh	r2, [r2, #14]
   20d64:	cmp	r2, #1
   20d68:	beq	20d80 <flatcc_builder_end_buffer@@Base+0x40>
   20d6c:	ldr	r3, [pc, #120]	; 20dec <flatcc_builder_end_buffer@@Base+0xac>
   20d70:	movw	r2, #838	; 0x346
   20d74:	ldr	r1, [pc, #116]	; 20df0 <flatcc_builder_end_buffer@@Base+0xb0>
   20d78:	ldr	r0, [pc, #116]	; 20df4 <flatcc_builder_end_buffer@@Base+0xb4>
   20d7c:	bl	14620 <__assert_fail@plt>
   20d80:	ldrh	r2, [r4, #132]	; 0x84
   20d84:	mov	r3, r1
   20d88:	ldrh	r1, [r4, #128]	; 0x80
   20d8c:	cmp	r1, r2
   20d90:	strhcc	r2, [r4, #128]	; 0x80
   20d94:	ldrh	r1, [r4, #128]	; 0x80
   20d98:	str	r1, [sp]
   20d9c:	add	r1, r4, #168	; 0xa8
   20da0:	str	r0, [sp, #4]
   20da4:	mov	r0, r4
   20da8:	bl	20a28 <flatcc_builder_create_buffer@@Base>
   20dac:	subs	r5, r0, #0
   20db0:	beq	20de0 <flatcc_builder_end_buffer@@Base+0xa0>
   20db4:	ldr	r3, [r4, #32]
   20db8:	mov	r0, r4
   20dbc:	ldr	r2, [r3, #20]
   20dc0:	str	r2, [r4, #144]	; 0x90
   20dc4:	ldr	r2, [r3, #28]
   20dc8:	str	r2, [r4, #152]	; 0x98
   20dcc:	ldr	r2, [r3, #16]
   20dd0:	ldrh	r3, [r3, #32]
   20dd4:	strh	r3, [r4, #164]	; 0xa4
   20dd8:	str	r2, [r4, #168]	; 0xa8
   20ddc:	bl	1fe24 <union_vector_tests@@Base+0x200>
   20de0:	mov	r0, r5
   20de4:	add	sp, sp, #12
   20de8:	pop	{r4, r5, pc}
   20dec:	andeq	r1, r3, r3, asr #4
   20df0:	andeq	r1, r3, sl, asr #12
   20df4:	andeq	r1, r3, ip, lsl r7

00020df8 <flatcc_builder_start_struct@@Base>:
   20df8:	push	{r4, r5, r6, lr}
   20dfc:	mov	r5, r1
   20e00:	mov	r1, r2
   20e04:	mov	r4, r0
   20e08:	bl	20090 <flatcc_builder_default_alloc@@Base+0x168>
   20e0c:	cmp	r0, #0
   20e10:	bne	20e38 <flatcc_builder_start_struct@@Base+0x40>
   20e14:	ldr	r3, [r4, #32]
   20e18:	mov	r2, #2
   20e1c:	mvn	r1, #3
   20e20:	mov	r0, r4
   20e24:	strh	r2, [r3, #14]
   20e28:	bl	1fd60 <union_vector_tests@@Base+0x13c>
   20e2c:	mov	r1, r5
   20e30:	pop	{r4, r5, r6, lr}
   20e34:	b	1fddc <union_vector_tests@@Base+0x1b8>
   20e38:	mov	r0, #0
   20e3c:	pop	{r4, r5, r6, pc}

00020e40 <flatcc_builder_struct_edit@@Base>:
   20e40:	ldr	r0, [r0, #16]
   20e44:	bx	lr

00020e48 <flatcc_builder_end_struct@@Base>:
   20e48:	ldr	r3, [r0, #32]
   20e4c:	push	{r4, r5, r6, lr}
   20e50:	ldrh	r3, [r3, #14]
   20e54:	cmp	r3, #2
   20e58:	beq	20e70 <flatcc_builder_end_struct@@Base+0x28>
   20e5c:	ldr	r3, [pc, #56]	; 20e9c <flatcc_builder_end_struct@@Base+0x54>
   20e60:	mov	r2, #872	; 0x368
   20e64:	ldr	r1, [pc, #52]	; 20ea0 <flatcc_builder_end_struct@@Base+0x58>
   20e68:	ldr	r0, [pc, #52]	; 20ea4 <flatcc_builder_end_struct@@Base+0x5c>
   20e6c:	bl	14620 <__assert_fail@plt>
   20e70:	ldrh	r3, [r0, #130]	; 0x82
   20e74:	mov	r4, r0
   20e78:	ldr	r1, [r0, #16]
   20e7c:	ldr	r2, [r0, #20]
   20e80:	bl	20be8 <flatcc_builder_create_struct@@Base>
   20e84:	subs	r5, r0, #0
   20e88:	beq	20e94 <flatcc_builder_end_struct@@Base+0x4c>
   20e8c:	mov	r0, r4
   20e90:	bl	1fe24 <union_vector_tests@@Base+0x200>
   20e94:	mov	r0, r5
   20e98:	pop	{r4, r5, r6, pc}
   20e9c:	andeq	r1, r3, sp, asr r2
   20ea0:	andeq	r1, r3, sl, asr #12
   20ea4:	andeq	r1, r3, r8, asr #14

00020ea8 <flatcc_builder_extend_vector@@Base>:
   20ea8:	push	{r4, r5, r6, lr}
   20eac:	mov	r4, r0
   20eb0:	mov	r5, r1
   20eb4:	ldr	r0, [r0, #32]
   20eb8:	ldr	r2, [r0, #24]
   20ebc:	bl	20380 <flatcc_builder_default_alloc@@Base+0x458>
   20ec0:	cmp	r0, #0
   20ec4:	bne	20ee0 <flatcc_builder_extend_vector@@Base+0x38>
   20ec8:	ldr	r3, [r4, #32]
   20ecc:	mov	r0, r4
   20ed0:	ldr	r1, [r3, #16]
   20ed4:	mul	r1, r1, r5
   20ed8:	pop	{r4, r5, r6, lr}
   20edc:	b	1fddc <union_vector_tests@@Base+0x1b8>
   20ee0:	mov	r0, #0
   20ee4:	pop	{r4, r5, r6, pc}

00020ee8 <flatcc_builder_vector_push@@Base>:
   20ee8:	ldr	r3, [r0, #32]
   20eec:	push	{r4, lr}
   20ef0:	ldrh	r2, [r3, #14]
   20ef4:	cmp	r2, #4
   20ef8:	beq	20f10 <flatcc_builder_vector_push@@Base+0x28>
   20efc:	ldr	r3, [pc, #68]	; 20f48 <flatcc_builder_vector_push@@Base+0x60>
   20f00:	movw	r2, #907	; 0x38b
   20f04:	ldr	r1, [pc, #64]	; 20f4c <flatcc_builder_vector_push@@Base+0x64>
   20f08:	ldr	r0, [pc, #64]	; 20f50 <flatcc_builder_vector_push@@Base+0x68>
   20f0c:	bl	14620 <__assert_fail@plt>
   20f10:	ldr	r2, [r3, #20]
   20f14:	ldr	ip, [r3, #24]
   20f18:	cmp	r2, ip
   20f1c:	bls	20f34 <flatcc_builder_vector_push@@Base+0x4c>
   20f20:	ldr	r3, [pc, #32]	; 20f48 <flatcc_builder_vector_push@@Base+0x60>
   20f24:	mov	r2, #908	; 0x38c
   20f28:	ldr	r1, [pc, #28]	; 20f4c <flatcc_builder_vector_push@@Base+0x64>
   20f2c:	ldr	r0, [pc, #32]	; 20f54 <flatcc_builder_vector_push@@Base+0x6c>
   20f30:	b	20f0c <flatcc_builder_vector_push@@Base+0x24>
   20f34:	add	r2, r2, #1
   20f38:	pop	{r4, lr}
   20f3c:	str	r2, [r3, #20]
   20f40:	ldr	r2, [r3, #16]
   20f44:	b	1feac <union_vector_tests@@Base+0x288>
   20f48:	andeq	r1, r3, r7, ror r2
   20f4c:	andeq	r1, r3, sl, asr #12
   20f50:	andeq	r1, r3, r4, ror r7
   20f54:	andeq	r1, r3, r0, lsr #15

00020f58 <flatcc_builder_append_vector@@Base>:
   20f58:	push	{r4, r5, r6, lr}
   20f5c:	mov	r4, r0
   20f60:	ldr	r0, [r0, #32]
   20f64:	ldrh	r3, [r0, #14]
   20f68:	cmp	r3, #4
   20f6c:	beq	20f84 <flatcc_builder_append_vector@@Base+0x2c>
   20f70:	ldr	r3, [pc, #76]	; 20fc4 <flatcc_builder_append_vector@@Base+0x6c>
   20f74:	movw	r2, #915	; 0x393
   20f78:	ldr	r1, [pc, #72]	; 20fc8 <flatcc_builder_append_vector@@Base+0x70>
   20f7c:	ldr	r0, [pc, #72]	; 20fcc <flatcc_builder_append_vector@@Base+0x74>
   20f80:	bl	14620 <__assert_fail@plt>
   20f84:	mov	r6, r1
   20f88:	mov	r5, r2
   20f8c:	mov	r1, r2
   20f90:	ldr	r2, [r0, #24]
   20f94:	bl	20380 <flatcc_builder_default_alloc@@Base+0x458>
   20f98:	cmp	r0, #0
   20f9c:	bne	20fbc <flatcc_builder_append_vector@@Base+0x64>
   20fa0:	ldr	r3, [r4, #32]
   20fa4:	mov	r1, r6
   20fa8:	mov	r0, r4
   20fac:	ldr	r2, [r3, #16]
   20fb0:	mul	r2, r2, r5
   20fb4:	pop	{r4, r5, r6, lr}
   20fb8:	b	1feac <union_vector_tests@@Base+0x288>
   20fbc:	mov	r0, #0
   20fc0:	pop	{r4, r5, r6, pc}
   20fc4:	muleq	r3, r2, r2
   20fc8:	andeq	r1, r3, sl, asr #12
   20fcc:	andeq	r1, r3, r4, ror r7

00020fd0 <flatcc_builder_extend_offset_vector@@Base>:
   20fd0:	push	{r4, r5, r6, lr}
   20fd4:	mvn	r2, #-1073741824	; 0xc0000000
   20fd8:	mov	r4, r0
   20fdc:	mov	r5, r1
   20fe0:	ldr	r0, [r0, #32]
   20fe4:	bl	20380 <flatcc_builder_default_alloc@@Base+0x458>
   20fe8:	cmp	r0, #0
   20fec:	bne	21000 <flatcc_builder_extend_offset_vector@@Base+0x30>
   20ff0:	lsl	r1, r5, #2
   20ff4:	mov	r0, r4
   20ff8:	pop	{r4, r5, r6, lr}
   20ffc:	b	1fddc <union_vector_tests@@Base+0x1b8>
   21000:	mov	r0, #0
   21004:	pop	{r4, r5, r6, pc}

00021008 <flatcc_builder_offset_vector_push@@Base>:
   21008:	ldr	r2, [r0, #32]
   2100c:	push	{r4, lr}
   21010:	ldrh	r3, [r2, #14]
   21014:	cmp	r3, #5
   21018:	beq	21030 <flatcc_builder_offset_vector_push@@Base+0x28>
   2101c:	ldr	r3, [pc, #64]	; 21064 <flatcc_builder_offset_vector_push@@Base+0x5c>
   21020:	movw	r2, #934	; 0x3a6
   21024:	ldr	r1, [pc, #60]	; 21068 <flatcc_builder_offset_vector_push@@Base+0x60>
   21028:	ldr	r0, [pc, #60]	; 2106c <flatcc_builder_offset_vector_push@@Base+0x64>
   2102c:	bl	14620 <__assert_fail@plt>
   21030:	ldr	r3, [r2, #20]
   21034:	cmn	r3, #-1073741823	; 0xc0000001
   21038:	beq	2105c <flatcc_builder_offset_vector_push@@Base+0x54>
   2103c:	add	r3, r3, #1
   21040:	mov	r4, r1
   21044:	mov	r1, #4
   21048:	str	r3, [r2, #20]
   2104c:	bl	1fddc <union_vector_tests@@Base+0x1b8>
   21050:	cmp	r0, #0
   21054:	strne	r4, [r0]
   21058:	pop	{r4, pc}
   2105c:	mov	r0, #0
   21060:	pop	{r4, pc}
   21064:	andeq	r1, r3, pc, lsr #5
   21068:	andeq	r1, r3, sl, asr #12
   2106c:	ldrdeq	r1, [r3], -sp

00021070 <flatcc_builder_append_offset_vector@@Base>:
   21070:	push	{r4, r5, r6, lr}
   21074:	mov	r4, r0
   21078:	ldr	r0, [r0, #32]
   2107c:	ldrh	r3, [r0, #14]
   21080:	cmp	r3, #5
   21084:	beq	2109c <flatcc_builder_append_offset_vector@@Base+0x2c>
   21088:	ldr	r3, [pc, #68]	; 210d4 <flatcc_builder_append_offset_vector@@Base+0x64>
   2108c:	mov	r2, #948	; 0x3b4
   21090:	ldr	r1, [pc, #64]	; 210d8 <flatcc_builder_append_offset_vector@@Base+0x68>
   21094:	ldr	r0, [pc, #64]	; 210dc <flatcc_builder_append_offset_vector@@Base+0x6c>
   21098:	bl	14620 <__assert_fail@plt>
   2109c:	mov	r5, r2
   210a0:	mov	r6, r1
   210a4:	mvn	r2, #-1073741824	; 0xc0000000
   210a8:	mov	r1, r5
   210ac:	bl	20380 <flatcc_builder_default_alloc@@Base+0x458>
   210b0:	cmp	r0, #0
   210b4:	bne	210cc <flatcc_builder_append_offset_vector@@Base+0x5c>
   210b8:	lsl	r2, r5, #2
   210bc:	mov	r1, r6
   210c0:	mov	r0, r4
   210c4:	pop	{r4, r5, r6, lr}
   210c8:	b	1feac <union_vector_tests@@Base+0x288>
   210cc:	mov	r0, #0
   210d0:	pop	{r4, r5, r6, pc}
   210d4:	ldrdeq	r1, [r3], -r1	; <UNPREDICTABLE>
   210d8:	andeq	r1, r3, sl, asr #12
   210dc:	ldrdeq	r1, [r3], -sp

000210e0 <flatcc_builder_extend_string@@Base>:
   210e0:	push	{r4, r5, r6, lr}
   210e4:	mov	r4, r0
   210e8:	ldr	r0, [r0, #32]
   210ec:	ldrh	r3, [r0, #14]
   210f0:	cmp	r3, #6
   210f4:	beq	2110c <flatcc_builder_extend_string@@Base+0x2c>
   210f8:	ldr	r3, [pc, #56]	; 21138 <flatcc_builder_extend_string@@Base+0x58>
   210fc:	movw	r2, #957	; 0x3bd
   21100:	ldr	r1, [pc, #52]	; 2113c <flatcc_builder_extend_string@@Base+0x5c>
   21104:	ldr	r0, [pc, #52]	; 21140 <flatcc_builder_extend_string@@Base+0x60>
   21108:	bl	14620 <__assert_fail@plt>
   2110c:	mvn	r2, #0
   21110:	mov	r5, r1
   21114:	bl	20380 <flatcc_builder_default_alloc@@Base+0x458>
   21118:	cmp	r0, #0
   2111c:	bne	21130 <flatcc_builder_extend_string@@Base+0x50>
   21120:	mov	r1, r5
   21124:	mov	r0, r4
   21128:	pop	{r4, r5, r6, lr}
   2112c:	b	1fddc <union_vector_tests@@Base+0x1b8>
   21130:	mov	r0, #0
   21134:	pop	{r4, r5, r6, pc}
   21138:	strdeq	r1, [r3], -r5
   2113c:	andeq	r1, r3, sl, asr #12
   21140:	andeq	r1, r3, r0, lsl r8

00021144 <flatcc_builder_append_string@@Base>:
   21144:	push	{r4, r5, r6, lr}
   21148:	mov	r4, r0
   2114c:	ldr	r0, [r0, #32]
   21150:	ldrh	r3, [r0, #14]
   21154:	cmp	r3, #6
   21158:	beq	21170 <flatcc_builder_append_string@@Base+0x2c>
   2115c:	ldr	r3, [pc, #68]	; 211a8 <flatcc_builder_append_string@@Base+0x64>
   21160:	movw	r2, #966	; 0x3c6
   21164:	ldr	r1, [pc, #64]	; 211ac <flatcc_builder_append_string@@Base+0x68>
   21168:	ldr	r0, [pc, #64]	; 211b0 <flatcc_builder_append_string@@Base+0x6c>
   2116c:	bl	14620 <__assert_fail@plt>
   21170:	mov	r5, r2
   21174:	mov	r6, r1
   21178:	mvn	r2, #0
   2117c:	mov	r1, r5
   21180:	bl	20380 <flatcc_builder_default_alloc@@Base+0x458>
   21184:	cmp	r0, #0
   21188:	bne	211a0 <flatcc_builder_append_string@@Base+0x5c>
   2118c:	mov	r2, r5
   21190:	mov	r1, r6
   21194:	mov	r0, r4
   21198:	pop	{r4, r5, r6, lr}
   2119c:	b	1feac <union_vector_tests@@Base+0x288>
   211a0:	mov	r0, #0
   211a4:	pop	{r4, r5, r6, pc}
   211a8:	andeq	r1, r3, r2, lsl r3
   211ac:	andeq	r1, r3, sl, asr #12
   211b0:	andeq	r1, r3, r0, lsl r8

000211b4 <flatcc_builder_append_string_str@@Base>:
   211b4:	push	{r4, r5, r6, lr}
   211b8:	mov	r5, r0
   211bc:	mov	r0, r1
   211c0:	mov	r4, r1
   211c4:	bl	1459c <strlen@plt>
   211c8:	mov	r2, r0
   211cc:	mov	r1, r4
   211d0:	mov	r0, r5
   211d4:	pop	{r4, r5, r6, lr}
   211d8:	b	21144 <flatcc_builder_append_string@@Base>

000211dc <flatcc_builder_append_string_strn@@Base>:
   211dc:	push	{r4, r5, r6, lr}
   211e0:	mov	r4, r1
   211e4:	mov	r6, r0
   211e8:	mov	r1, #0
   211ec:	mov	r0, r4
   211f0:	mov	r5, r2
   211f4:	bl	145e4 <memchr@plt>
   211f8:	cmp	r0, #0
   211fc:	mov	r1, r4
   21200:	subne	r5, r0, r4
   21204:	mov	r0, r6
   21208:	mov	r2, r5
   2120c:	pop	{r4, r5, r6, lr}
   21210:	b	21144 <flatcc_builder_append_string@@Base>

00021214 <flatcc_builder_truncate_vector@@Base>:
   21214:	ldr	r3, [r0, #32]
   21218:	push	{r4, lr}
   2121c:	ldrh	r2, [r3, #14]
   21220:	cmp	r2, #4
   21224:	beq	2123c <flatcc_builder_truncate_vector@@Base+0x28>
   21228:	ldr	r3, [pc, #72]	; 21278 <flatcc_builder_truncate_vector@@Base+0x64>
   2122c:	movw	r2, #985	; 0x3d9
   21230:	ldr	r1, [pc, #68]	; 2127c <flatcc_builder_truncate_vector@@Base+0x68>
   21234:	ldr	r0, [pc, #68]	; 21280 <flatcc_builder_truncate_vector@@Base+0x6c>
   21238:	bl	14620 <__assert_fail@plt>
   2123c:	ldr	r2, [r3, #20]
   21240:	cmp	r2, r1
   21244:	bcs	2125c <flatcc_builder_truncate_vector@@Base+0x48>
   21248:	ldr	r3, [pc, #40]	; 21278 <flatcc_builder_truncate_vector@@Base+0x64>
   2124c:	movw	r2, #986	; 0x3da
   21250:	ldr	r1, [pc, #36]	; 2127c <flatcc_builder_truncate_vector@@Base+0x68>
   21254:	ldr	r0, [pc, #40]	; 21284 <flatcc_builder_truncate_vector@@Base+0x70>
   21258:	b	21238 <flatcc_builder_truncate_vector@@Base+0x24>
   2125c:	sub	r2, r2, r1
   21260:	str	r2, [r3, #20]
   21264:	ldr	r3, [r3, #16]
   21268:	mul	r1, r3, r1
   2126c:	bl	1fe8c <union_vector_tests@@Base+0x268>
   21270:	mov	r0, #0
   21274:	pop	{r4, pc}
   21278:	andeq	r1, r3, pc, lsr #6
   2127c:	andeq	r1, r3, sl, asr #12
   21280:	andeq	r1, r3, r4, ror r7
   21284:	andeq	r1, r3, ip, lsr r8

00021288 <flatcc_builder_truncate_offset_vector@@Base>:
   21288:	ldr	r3, [r0, #32]
   2128c:	push	{r4, lr}
   21290:	ldrh	r2, [r3, #14]
   21294:	cmp	r2, #5
   21298:	beq	212b0 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   2129c:	ldr	r3, [pc, #72]	; 212ec <flatcc_builder_truncate_offset_vector@@Base+0x64>
   212a0:	movw	r2, #994	; 0x3e2
   212a4:	ldr	r1, [pc, #68]	; 212f0 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   212a8:	ldr	r0, [pc, #68]	; 212f4 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   212ac:	bl	14620 <__assert_fail@plt>
   212b0:	ldr	r2, [r3, #20]
   212b4:	cmp	r2, r1
   212b8:	bcs	212d0 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   212bc:	ldr	r3, [pc, #40]	; 212ec <flatcc_builder_truncate_offset_vector@@Base+0x64>
   212c0:	movw	r2, #995	; 0x3e3
   212c4:	ldr	r1, [pc, #36]	; 212f0 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   212c8:	ldr	r0, [pc, #40]	; 212f8 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   212cc:	b	212ac <flatcc_builder_truncate_offset_vector@@Base+0x24>
   212d0:	sub	r2, r2, r1
   212d4:	str	r2, [r3, #20]
   212d8:	ldr	r3, [r3, #16]
   212dc:	mul	r1, r3, r1
   212e0:	bl	1fe8c <union_vector_tests@@Base+0x268>
   212e4:	mov	r0, #0
   212e8:	pop	{r4, pc}
   212ec:	andeq	r1, r3, lr, asr #6
   212f0:	andeq	r1, r3, sl, asr #12
   212f4:	ldrdeq	r1, [r3], -sp
   212f8:	andeq	r1, r3, r0, ror #16

000212fc <flatcc_builder_truncate_string@@Base>:
   212fc:	ldr	r2, [r0, #32]
   21300:	push	{r4, lr}
   21304:	ldrh	r3, [r2, #14]
   21308:	cmp	r3, #6
   2130c:	beq	21324 <flatcc_builder_truncate_string@@Base+0x28>
   21310:	ldr	r3, [pc, #64]	; 21358 <flatcc_builder_truncate_string@@Base+0x5c>
   21314:	movw	r2, #1003	; 0x3eb
   21318:	ldr	r1, [pc, #60]	; 2135c <flatcc_builder_truncate_string@@Base+0x60>
   2131c:	ldr	r0, [pc, #60]	; 21360 <flatcc_builder_truncate_string@@Base+0x64>
   21320:	bl	14620 <__assert_fail@plt>
   21324:	ldr	r3, [r2, #20]
   21328:	cmp	r3, r1
   2132c:	bcs	21344 <flatcc_builder_truncate_string@@Base+0x48>
   21330:	ldr	r3, [pc, #32]	; 21358 <flatcc_builder_truncate_string@@Base+0x5c>
   21334:	mov	r2, #1004	; 0x3ec
   21338:	ldr	r1, [pc, #28]	; 2135c <flatcc_builder_truncate_string@@Base+0x60>
   2133c:	ldr	r0, [pc, #32]	; 21364 <flatcc_builder_truncate_string@@Base+0x68>
   21340:	b	21320 <flatcc_builder_truncate_string@@Base+0x24>
   21344:	sub	r3, r3, r1
   21348:	str	r3, [r2, #20]
   2134c:	bl	1fe8c <union_vector_tests@@Base+0x268>
   21350:	mov	r0, #0
   21354:	pop	{r4, pc}
   21358:	andeq	r1, r3, r4, ror r3
   2135c:	andeq	r1, r3, sl, asr #12
   21360:	andeq	r1, r3, r0, lsl r8
   21364:	muleq	r3, fp, r8

00021368 <flatcc_builder_start_vector@@Base>:
   21368:	cmp	r2, #4
   2136c:	push	{r4, r5, r6, r7, r8, lr}
   21370:	mov	r7, r1
   21374:	movcs	r1, r2
   21378:	movcc	r1, #4
   2137c:	mov	r5, r0
   21380:	mov	r6, r3
   21384:	bl	20090 <flatcc_builder_default_alloc@@Base+0x168>
   21388:	subs	r4, r0, #0
   2138c:	mvnne	r4, #0
   21390:	bne	213b8 <flatcc_builder_start_vector@@Base+0x50>
   21394:	ldr	r2, [r5, #32]
   21398:	mov	r3, #4
   2139c:	mvn	r1, #3
   213a0:	mov	r0, r5
   213a4:	strh	r3, [r2, #14]
   213a8:	str	r7, [r2, #16]
   213ac:	str	r4, [r2, #20]
   213b0:	str	r6, [r2, #24]
   213b4:	bl	1fd60 <union_vector_tests@@Base+0x13c>
   213b8:	mov	r0, r4
   213bc:	pop	{r4, r5, r6, r7, r8, pc}

000213c0 <flatcc_builder_start_offset_vector@@Base>:
   213c0:	push	{r4, r5, r6, lr}
   213c4:	mov	r1, #4
   213c8:	mov	r5, r0
   213cc:	bl	20090 <flatcc_builder_default_alloc@@Base+0x168>
   213d0:	subs	r4, r0, #0
   213d4:	mvnne	r4, #0
   213d8:	bne	21400 <flatcc_builder_start_offset_vector@@Base+0x40>
   213dc:	ldr	r3, [r5, #32]
   213e0:	mov	r2, #4
   213e4:	mvn	r1, #3
   213e8:	mov	r0, r5
   213ec:	str	r2, [r3, #16]
   213f0:	mov	r2, #5
   213f4:	strh	r2, [r3, #14]
   213f8:	str	r4, [r3, #20]
   213fc:	bl	1fd60 <union_vector_tests@@Base+0x13c>
   21400:	mov	r0, r4
   21404:	pop	{r4, r5, r6, pc}

00021408 <flatcc_builder_start_string@@Base>:
   21408:	push	{r4, r5, r6, lr}
   2140c:	mov	r1, #1
   21410:	mov	r5, r0
   21414:	bl	20090 <flatcc_builder_default_alloc@@Base+0x168>
   21418:	subs	r4, r0, #0
   2141c:	mvnne	r4, #0
   21420:	bne	21448 <flatcc_builder_start_string@@Base+0x40>
   21424:	ldr	r3, [r5, #32]
   21428:	mov	r2, #1
   2142c:	mvn	r1, #3
   21430:	mov	r0, r5
   21434:	str	r2, [r3, #16]
   21438:	mov	r2, #6
   2143c:	strh	r2, [r3, #14]
   21440:	str	r4, [r3, #20]
   21444:	bl	1fd60 <union_vector_tests@@Base+0x13c>
   21448:	mov	r0, r4
   2144c:	pop	{r4, r5, r6, pc}

00021450 <flatcc_builder_reserve_table@@Base>:
   21450:	cmp	r1, #0
   21454:	bge	21470 <flatcc_builder_reserve_table@@Base+0x20>
   21458:	push	{r4, lr}
   2145c:	movw	r2, #1065	; 0x429
   21460:	ldr	r3, [pc, #12]	; 21474 <flatcc_builder_reserve_table@@Base+0x24>
   21464:	ldr	r1, [pc, #12]	; 21478 <flatcc_builder_reserve_table@@Base+0x28>
   21468:	ldr	r0, [pc, #12]	; 2147c <flatcc_builder_reserve_table@@Base+0x2c>
   2146c:	bl	14620 <__assert_fail@plt>
   21470:	b	20168 <flatcc_builder_default_alloc@@Base+0x240>
   21474:	muleq	r3, r3, r3
   21478:	andeq	r1, r3, sl, asr #12
   2147c:	ldrdeq	r1, [r3], -r3

00021480 <flatcc_builder_start_table@@Base>:
   21480:	push	{r4, r5, r6, lr}
   21484:	mov	r5, r1
   21488:	mov	r1, #4
   2148c:	mov	r4, r0
   21490:	bl	20090 <flatcc_builder_default_alloc@@Base+0x168>
   21494:	cmp	r0, #0
   21498:	beq	214a8 <flatcc_builder_start_table@@Base+0x28>
   2149c:	mvn	r5, #0
   214a0:	mov	r0, r5
   214a4:	pop	{r4, r5, r6, pc}
   214a8:	ldr	r2, [r4, #4]
   214ac:	ldr	r3, [r4, #32]
   214b0:	ldr	r1, [r4, #52]	; 0x34
   214b4:	sub	r2, r2, r1
   214b8:	ldr	r1, [r4, #76]	; 0x4c
   214bc:	str	r2, [r3, #16]
   214c0:	ldr	r2, [r4]
   214c4:	sub	r2, r2, r1
   214c8:	mov	r1, r5
   214cc:	str	r2, [r3, #20]
   214d0:	ldr	r2, [r4, #12]
   214d4:	str	r2, [r3, #24]
   214d8:	ldrh	r2, [r4, #8]
   214dc:	strh	r2, [r3, #28]
   214e0:	ldr	r2, [pc, #44]	; 21514 <flatcc_builder_start_table@@Base+0x94>
   214e4:	strh	r0, [r4, #8]
   214e8:	mov	r0, r4
   214ec:	str	r2, [r4, #12]
   214f0:	mov	r2, #3
   214f4:	strh	r2, [r3, #14]
   214f8:	bl	20168 <flatcc_builder_default_alloc@@Base+0x240>
   214fc:	subs	r5, r0, #0
   21500:	bne	2149c <flatcc_builder_start_table@@Base+0x1c>
   21504:	movw	r1, #65532	; 0xfffc
   21508:	mov	r0, r4
   2150c:	bl	1fd60 <union_vector_tests@@Base+0x13c>
   21510:	b	214a0 <flatcc_builder_start_table@@Base+0x20>
   21514:	svccs	0x00693b52

00021518 <flatcc_builder_create_vtable@@Base>:
   21518:	mov	r3, #0
   2151c:	push	{lr}		; (str lr, [sp, #-4]!)
   21520:	sub	sp, sp, #76	; 0x4c
   21524:	cmp	r2, #0
   21528:	str	r3, [sp]
   2152c:	str	r3, [sp, #4]
   21530:	movne	r3, #1
   21534:	strne	r1, [sp, #8]
   21538:	mov	r1, sp
   2153c:	strdne	r2, [sp]
   21540:	ldr	r3, [r0, #152]	; 0x98
   21544:	strne	r2, [sp, #12]
   21548:	cmp	r3, #0
   2154c:	bne	21568 <flatcc_builder_create_vtable@@Base+0x50>
   21550:	ldr	r3, [r0, #180]	; 0xb4
   21554:	cmp	r3, #0
   21558:	bne	21568 <flatcc_builder_create_vtable@@Base+0x50>
   2155c:	bl	201ec <flatcc_builder_default_alloc@@Base+0x2c4>
   21560:	add	sp, sp, #76	; 0x4c
   21564:	pop	{pc}		; (ldr pc, [sp], #4)
   21568:	bl	20308 <flatcc_builder_default_alloc@@Base+0x3e0>
   2156c:	cmp	r0, #0
   21570:	addne	r0, r0, #1
   21574:	b	21560 <flatcc_builder_create_vtable@@Base+0x48>

00021578 <flatcc_builder_create_cached_vtable@@Base>:
   21578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2157c:	mov	r6, r3
   21580:	sub	sp, sp, #20
   21584:	mov	r4, r0
   21588:	mov	sl, r1
   2158c:	mov	r7, r2
   21590:	ldr	r3, [r0, #116]	; 0x74
   21594:	cmp	r3, #0
   21598:	bne	21640 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   2159c:	ldr	r5, [r0, #124]	; 0x7c
   215a0:	add	r9, r0, #92	; 0x5c
   215a4:	cmp	r5, #0
   215a8:	beq	215c0 <flatcc_builder_create_cached_vtable@@Base+0x48>
   215ac:	ldr	r3, [pc, #560]	; 217e4 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   215b0:	movw	r2, #342	; 0x156
   215b4:	ldr	r1, [pc, #556]	; 217e8 <flatcc_builder_create_cached_vtable@@Base+0x270>
   215b8:	ldr	r0, [pc, #556]	; 217ec <flatcc_builder_create_cached_vtable@@Base+0x274>
   215bc:	bl	14620 <__assert_fail@plt>
   215c0:	mov	r3, #16
   215c4:	mov	r2, r5
   215c8:	str	r5, [sp]
   215cc:	mov	r1, #6
   215d0:	bl	20020 <flatcc_builder_default_alloc@@Base+0xf8>
   215d4:	cmp	r0, #0
   215d8:	bne	215e8 <flatcc_builder_create_cached_vtable@@Base+0x70>
   215dc:	mov	r0, #0
   215e0:	add	sp, sp, #20
   215e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215e8:	mov	r3, #16
   215ec:	mov	r1, r9
   215f0:	ldr	r0, [r4, #40]	; 0x28
   215f4:	mov	r2, #256	; 0x100
   215f8:	str	r3, [r4, #124]	; 0x7c
   215fc:	mov	r3, #5
   21600:	ldr	r8, [r4, #48]	; 0x30
   21604:	str	r3, [sp]
   21608:	mov	r3, #1
   2160c:	blx	r8
   21610:	cmp	r0, #0
   21614:	moveq	r3, #256	; 0x100
   21618:	ldreq	r1, [r4, #96]	; 0x60
   2161c:	bne	215dc <flatcc_builder_create_cached_vtable@@Base+0x64>
   21620:	lsl	r2, r3, #1
   21624:	cmp	r2, r1
   21628:	bls	21700 <flatcc_builder_create_cached_vtable@@Base+0x188>
   2162c:	lsr	r3, r3, #2
   21630:	mov	r2, #1
   21634:	cmp	r3, r2, lsl r5
   21638:	bhi	21708 <flatcc_builder_create_cached_vtable@@Base+0x190>
   2163c:	str	r5, [r4, #116]	; 0x74
   21640:	ldr	r8, [r4, #92]	; 0x5c
   21644:	ldr	r3, [r4, #116]	; 0x74
   21648:	rsb	r3, r3, #32
   2164c:	lsr	r6, r6, r3
   21650:	adds	r3, r8, r6, lsl #2
   21654:	ldrne	r9, [r8, r6, lsl #2]
   21658:	movne	fp, #0
   2165c:	str	r3, [sp, #8]
   21660:	beq	215dc <flatcc_builder_create_cached_vtable@@Base+0x64>
   21664:	cmp	r9, #0
   21668:	bne	21710 <flatcc_builder_create_cached_vtable@@Base+0x198>
   2166c:	mov	r3, #16
   21670:	mov	r1, #6
   21674:	ldr	r2, [r4, #124]	; 0x7c
   21678:	mov	r0, r4
   2167c:	str	r9, [sp]
   21680:	bl	20020 <flatcc_builder_default_alloc@@Base+0xf8>
   21684:	subs	r5, r0, #0
   21688:	beq	215dc <flatcc_builder_create_cached_vtable@@Base+0x64>
   2168c:	ldr	r3, [r4, #124]	; 0x7c
   21690:	mov	r1, sl
   21694:	mov	r0, r4
   21698:	add	r2, r3, #16
   2169c:	str	r2, [r4, #124]	; 0x7c
   216a0:	ldr	r2, [r4, #152]	; 0x98
   216a4:	str	r2, [r5, #4]
   216a8:	ldr	r2, [r8, r6, lsl #2]
   216ac:	str	r2, [r5, #12]
   216b0:	mov	r2, r7
   216b4:	str	r3, [r8, r6, lsl #2]
   216b8:	bl	21518 <flatcc_builder_create_vtable@@Base>
   216bc:	cmp	r0, #0
   216c0:	str	r0, [r5]
   216c4:	beq	215dc <flatcc_builder_create_cached_vtable@@Base+0x64>
   216c8:	cmp	fp, #0
   216cc:	ldrne	r3, [fp, #8]
   216d0:	strne	r3, [r5, #8]
   216d4:	bne	21798 <flatcc_builder_create_cached_vtable@@Base+0x220>
   216d8:	ldr	r2, [r4, #120]	; 0x78
   216dc:	ldr	r3, [r4, #172]	; 0xac
   216e0:	cmp	r3, #0
   216e4:	beq	217a0 <flatcc_builder_create_cached_vtable@@Base+0x228>
   216e8:	add	r1, r7, r2
   216ec:	cmp	r3, r1
   216f0:	bcs	217a0 <flatcc_builder_create_cached_vtable@@Base+0x228>
   216f4:	mov	r0, r4
   216f8:	bl	2052c <flatcc_builder_flush_vtable_cache@@Base>
   216fc:	b	21798 <flatcc_builder_create_cached_vtable@@Base+0x220>
   21700:	mov	r3, r2
   21704:	b	21620 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   21708:	add	r5, r5, #1
   2170c:	b	21634 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   21710:	ldr	r0, [r4, #68]	; 0x44
   21714:	str	r3, [sp, #12]
   21718:	ldr	r5, [r4, #100]	; 0x64
   2171c:	add	r5, r5, r9
   21720:	ldr	r2, [r5, #8]
   21724:	add	r1, r0, r2
   21728:	ldrh	r2, [r0, r2]
   2172c:	cmp	r2, r7
   21730:	bne	2174c <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   21734:	mov	r2, r7
   21738:	mov	r0, sl
   2173c:	bl	14554 <memcmp@plt>
   21740:	cmp	r0, #0
   21744:	ldr	r3, [sp, #12]
   21748:	beq	21758 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   2174c:	add	r3, r5, #12
   21750:	ldr	r9, [r5, #12]
   21754:	b	21664 <flatcc_builder_create_cached_vtable@@Base+0xec>
   21758:	ldr	r1, [r5, #4]
   2175c:	ldr	r2, [r4, #152]	; 0x98
   21760:	cmp	r1, r2
   21764:	beq	21778 <flatcc_builder_create_cached_vtable@@Base+0x200>
   21768:	add	r3, r5, #12
   2176c:	mov	fp, r5
   21770:	ldr	r9, [r5, #12]
   21774:	b	21664 <flatcc_builder_create_cached_vtable@@Base+0xec>
   21778:	ldr	r2, [sp, #8]
   2177c:	cmp	r3, r2
   21780:	beq	21798 <flatcc_builder_create_cached_vtable@@Base+0x220>
   21784:	ldr	r2, [r5, #12]
   21788:	str	r2, [r3]
   2178c:	ldr	r3, [r8, r6, lsl #2]
   21790:	str	r3, [r5, #12]
   21794:	str	r9, [r8, r6, lsl #2]
   21798:	ldr	r0, [r5]
   2179c:	b	215e0 <flatcc_builder_create_cached_vtable@@Base+0x68>
   217a0:	mov	r3, #0
   217a4:	mov	r1, #2
   217a8:	mov	r0, r4
   217ac:	str	r3, [sp]
   217b0:	mov	r3, r7
   217b4:	bl	20020 <flatcc_builder_default_alloc@@Base+0xf8>
   217b8:	cmp	r0, #0
   217bc:	mvneq	r0, #0
   217c0:	beq	215e0 <flatcc_builder_create_cached_vtable@@Base+0x68>
   217c4:	ldr	r3, [r4, #120]	; 0x78
   217c8:	mov	r2, r7
   217cc:	mov	r1, sl
   217d0:	str	r3, [r5, #8]
   217d4:	add	r3, r3, r7
   217d8:	str	r3, [r4, #120]	; 0x78
   217dc:	bl	14548 <memcpy@plt>
   217e0:	b	21798 <flatcc_builder_create_cached_vtable@@Base+0x220>
   217e4:			; <UNDEFINED> instruction: 0x000313b0
   217e8:	andeq	r1, r3, sl, asr #12
   217ec:			; <UNDEFINED> instruction: 0x000318bd

000217f0 <flatcc_builder_create_table@@Base>:
   217f0:	push	{r4, r5, r6, r7, lr}
   217f4:	sub	sp, sp, #84	; 0x54
   217f8:	ldr	r4, [sp, #108]	; 0x6c
   217fc:	ldr	ip, [sp, #112]	; 0x70
   21800:	cmp	r4, #0
   21804:	bge	2181c <flatcc_builder_create_table@@Base+0x2c>
   21808:	ldr	r3, [pc, #276]	; 21924 <flatcc_builder_create_table@@Base+0x134>
   2180c:	movw	r2, #1237	; 0x4d5
   21810:	ldr	r1, [pc, #272]	; 21928 <flatcc_builder_create_table@@Base+0x138>
   21814:	ldr	r0, [pc, #272]	; 2192c <flatcc_builder_create_table@@Base+0x13c>
   21818:	bl	14620 <__assert_fail@plt>
   2181c:	tst	ip, #1
   21820:	bne	21838 <flatcc_builder_create_table@@Base+0x48>
   21824:	ldr	r3, [pc, #248]	; 21924 <flatcc_builder_create_table@@Base+0x134>
   21828:	movw	r2, #1243	; 0x4db
   2182c:	ldr	r1, [pc, #244]	; 21928 <flatcc_builder_create_table@@Base+0x138>
   21830:	ldr	r0, [pc, #248]	; 21930 <flatcc_builder_create_table@@Base+0x140>
   21834:	b	21818 <flatcc_builder_create_table@@Base+0x28>
   21838:	cmp	r3, #4
   2183c:	sub	ip, ip, #1
   21840:	movcs	lr, r3
   21844:	ldrh	r3, [r0, #128]	; 0x80
   21848:	movcc	lr, #4
   2184c:	cmp	r3, lr
   21850:	ldr	r3, [r0, #136]	; 0x88
   21854:	strhcc	lr, [r0, #128]	; 0x80
   21858:	sub	lr, lr, #1
   2185c:	sub	r5, r3, r2
   21860:	sub	r3, r5, #4
   21864:	and	lr, lr, r5
   21868:	sub	ip, r3, ip
   2186c:	sub	r3, lr, r3
   21870:	sub	ip, ip, lr
   21874:	sub	r3, r3, #4
   21878:	str	ip, [sp, #4]
   2187c:	ldr	ip, [sp, #104]	; 0x68
   21880:	add	r4, ip, r4, lsl #1
   21884:	cmp	r4, ip
   21888:	bne	2190c <flatcc_builder_create_table@@Base+0x11c>
   2188c:	mov	r3, #4
   21890:	cmp	r2, #0
   21894:	add	ip, sp, r3
   21898:	str	r3, [sp, #8]
   2189c:	str	ip, [sp, #16]
   218a0:	str	r3, [sp, #20]
   218a4:	mov	r3, #1
   218a8:	str	r3, [sp, #12]
   218ac:	beq	218c8 <flatcc_builder_create_table@@Base+0xd8>
   218b0:	add	r3, r2, #4
   218b4:	str	r3, [sp, #8]
   218b8:	mov	r3, #2
   218bc:	str	r1, [sp, #24]
   218c0:	str	r3, [sp, #12]
   218c4:	str	r2, [sp, #28]
   218c8:	cmp	lr, #0
   218cc:	beq	218fc <flatcc_builder_create_table@@Base+0x10c>
   218d0:	ldr	r3, [sp, #8]
   218d4:	add	r2, sp, #80	; 0x50
   218d8:	ldr	r1, [pc, #84]	; 21934 <flatcc_builder_create_table@@Base+0x144>
   218dc:	add	r3, r3, lr
   218e0:	str	r3, [sp, #8]
   218e4:	ldr	r3, [sp, #12]
   218e8:	add	r3, r3, #1
   218ec:	add	r2, r2, r3, lsl #3
   218f0:	str	r3, [sp, #12]
   218f4:	str	r1, [r2, #-72]	; 0xffffffb8
   218f8:	str	lr, [r2, #-68]	; 0xffffffbc
   218fc:	add	r1, sp, #8
   21900:	bl	20308 <flatcc_builder_default_alloc@@Base+0x3e0>
   21904:	add	sp, sp, #84	; 0x54
   21908:	pop	{r4, r5, r6, r7, pc}
   2190c:	ldrh	r5, [ip], #2
   21910:	ldr	r6, [r1, r5]
   21914:	sub	r7, r3, r5
   21918:	add	r6, r6, r7
   2191c:	str	r6, [r1, r5]
   21920:	b	21884 <flatcc_builder_create_table@@Base+0x94>
   21924:			; <UNDEFINED> instruction: 0x000313b9
   21928:	andeq	r1, r3, sl, asr #12
   2192c:	andeq	r1, r3, ip, asr #17
   21930:	ldrdeq	r1, [r3], -lr
   21934:	andeq	r0, r3, r4, ror #30

00021938 <flatcc_builder_check_required_field@@Base>:
   21938:	ldr	r3, [r0, #32]
   2193c:	ldrh	r3, [r3, #14]
   21940:	cmp	r3, #3
   21944:	beq	21960 <flatcc_builder_check_required_field@@Base+0x28>
   21948:	push	{r4, lr}
   2194c:	movw	r2, #1272	; 0x4f8
   21950:	ldr	r3, [pc, #52]	; 2198c <flatcc_builder_check_required_field@@Base+0x54>
   21954:	ldr	r1, [pc, #52]	; 21990 <flatcc_builder_check_required_field@@Base+0x58>
   21958:	ldr	r0, [pc, #52]	; 21994 <flatcc_builder_check_required_field@@Base+0x5c>
   2195c:	bl	14620 <__assert_fail@plt>
   21960:	ldrh	r3, [r0, #8]
   21964:	cmp	r3, r1
   21968:	bls	21984 <flatcc_builder_check_required_field@@Base+0x4c>
   2196c:	ldr	r3, [r0, #4]
   21970:	lsl	r1, r1, #1
   21974:	ldrh	r0, [r3, r1]
   21978:	adds	r0, r0, #0
   2197c:	movne	r0, #1
   21980:	bx	lr
   21984:	mov	r0, #0
   21988:	bx	lr
   2198c:	ldrdeq	r1, [r3], -r5
   21990:	andeq	r1, r3, sl, asr #12
   21994:	andeq	r1, r3, r9, ror #17

00021998 <flatcc_builder_check_union_field@@Base>:
   21998:	ldr	r3, [r0, #32]
   2199c:	ldrh	r3, [r3, #14]
   219a0:	cmp	r3, #3
   219a4:	beq	219c0 <flatcc_builder_check_union_field@@Base+0x28>
   219a8:	push	{r4, lr}
   219ac:	movw	r2, #1279	; 0x4ff
   219b0:	ldr	r3, [pc, #104]	; 21a20 <flatcc_builder_check_union_field@@Base+0x88>
   219b4:	ldr	r1, [pc, #104]	; 21a24 <flatcc_builder_check_union_field@@Base+0x8c>
   219b8:	ldr	r0, [pc, #104]	; 21a28 <flatcc_builder_check_union_field@@Base+0x90>
   219bc:	bl	14620 <__assert_fail@plt>
   219c0:	cmp	r1, #0
   219c4:	beq	21a18 <flatcc_builder_check_union_field@@Base+0x80>
   219c8:	ldrh	r3, [r0, #8]
   219cc:	cmp	r3, r1
   219d0:	bls	21a18 <flatcc_builder_check_union_field@@Base+0x80>
   219d4:	ldr	r3, [r0, #4]
   219d8:	sub	r1, r1, #-2147483647	; 0x80000001
   219dc:	lsl	r1, r1, #1
   219e0:	ldrh	r2, [r3, r1]!
   219e4:	cmp	r2, #0
   219e8:	ldrh	r1, [r3, #2]
   219ec:	bne	219fc <flatcc_builder_check_union_field@@Base+0x64>
   219f0:	clz	r0, r1
   219f4:	lsr	r0, r0, #5
   219f8:	bx	lr
   219fc:	ldr	r3, [r0, #16]
   21a00:	ldrb	r3, [r3, r2]
   21a04:	cmp	r3, #0
   21a08:	beq	219f0 <flatcc_builder_check_union_field@@Base+0x58>
   21a0c:	adds	r0, r1, #0
   21a10:	movne	r0, #1
   21a14:	bx	lr
   21a18:	mov	r0, #0
   21a1c:	bx	lr
   21a20:	strdeq	r1, [r3], -r9
   21a24:	andeq	r1, r3, sl, asr #12
   21a28:	andeq	r1, r3, r9, ror #17

00021a2c <flatcc_builder_check_required@@Base>:
   21a2c:	ldr	r3, [r0, #32]
   21a30:	push	{r4, lr}
   21a34:	ldrh	r3, [r3, #14]
   21a38:	cmp	r3, #3
   21a3c:	beq	21a54 <flatcc_builder_check_required@@Base+0x28>
   21a40:	ldr	r3, [pc, #84]	; 21a9c <flatcc_builder_check_required@@Base+0x70>
   21a44:	movw	r2, #1297	; 0x511
   21a48:	ldr	r1, [pc, #80]	; 21aa0 <flatcc_builder_check_required@@Base+0x74>
   21a4c:	ldr	r0, [pc, #80]	; 21aa4 <flatcc_builder_check_required@@Base+0x78>
   21a50:	bl	14620 <__assert_fail@plt>
   21a54:	ldrh	r3, [r0, #8]
   21a58:	cmp	r3, r2
   21a5c:	subge	r1, r1, #2
   21a60:	movge	ip, #0
   21a64:	bge	21a8c <flatcc_builder_check_required@@Base+0x60>
   21a68:	mov	r0, #0
   21a6c:	pop	{r4, pc}
   21a70:	ldrh	r3, [r1, #2]!
   21a74:	ldr	lr, [r0, #4]
   21a78:	lsl	r3, r3, #1
   21a7c:	ldrh	r3, [lr, r3]
   21a80:	cmp	r3, #0
   21a84:	beq	21a68 <flatcc_builder_check_required@@Base+0x3c>
   21a88:	add	ip, ip, #1
   21a8c:	cmp	ip, r2
   21a90:	blt	21a70 <flatcc_builder_check_required@@Base+0x44>
   21a94:	mov	r0, #1
   21a98:	pop	{r4, pc}
   21a9c:	andeq	r1, r3, sl, lsl r4
   21aa0:	andeq	r1, r3, sl, asr #12
   21aa4:	andeq	r1, r3, r9, ror #17

00021aa8 <flatcc_builder_end_table@@Base>:
   21aa8:	ldr	r3, [r0, #32]
   21aac:	push	{r4, r5, r6, r7, lr}
   21ab0:	sub	sp, sp, #20
   21ab4:	ldrh	r3, [r3, #14]
   21ab8:	cmp	r3, #3
   21abc:	beq	21ad4 <flatcc_builder_end_table@@Base+0x2c>
   21ac0:	ldr	r3, [pc, #260]	; 21bcc <flatcc_builder_end_table@@Base+0x124>
   21ac4:	movw	r2, #1317	; 0x525
   21ac8:	ldr	r1, [pc, #256]	; 21bd0 <flatcc_builder_end_table@@Base+0x128>
   21acc:	ldr	r0, [pc, #256]	; 21bd4 <flatcc_builder_end_table@@Base+0x12c>
   21ad0:	bl	14620 <__assert_fail@plt>
   21ad4:	ldrh	r5, [r0, #8]
   21ad8:	mov	r4, r0
   21adc:	ldr	r1, [r0, #4]
   21ae0:	ldr	r3, [r0, #20]
   21ae4:	add	r5, r5, #2
   21ae8:	lsl	r5, r5, #1
   21aec:	sub	r6, r1, #4
   21af0:	uxth	r5, r5
   21af4:	add	r3, r3, #4
   21af8:	uxth	r2, r3
   21afc:	ldr	r3, [r0, #12]
   21b00:	strh	r5, [r1, #-4]
   21b04:	strh	r2, [r1, #-2]
   21b08:	ldr	r1, [pc, #200]	; 21bd8 <flatcc_builder_end_table@@Base+0x130>
   21b0c:	eor	r3, r3, r5
   21b10:	mul	r3, r1, r3
   21b14:	eor	r3, r3, r2
   21b18:	mov	r2, r5
   21b1c:	mul	r3, r1, r3
   21b20:	mov	r1, r6
   21b24:	str	r3, [r0, #12]
   21b28:	bl	21578 <flatcc_builder_create_cached_vtable@@Base>
   21b2c:	subs	r7, r0, #0
   21b30:	beq	21bc0 <flatcc_builder_end_table@@Base+0x118>
   21b34:	mov	r2, r5
   21b38:	mov	r1, #0
   21b3c:	mov	r0, r6
   21b40:	bl	145c0 <memset@plt>
   21b44:	ldr	r3, [r4, #32]
   21b48:	mov	r0, r4
   21b4c:	ldr	r2, [r4, #76]	; 0x4c
   21b50:	ldr	r3, [r3, #20]
   21b54:	str	r7, [sp, #8]
   21b58:	add	r2, r2, r3
   21b5c:	ldr	r3, [r4]
   21b60:	sub	r3, r3, r2
   21b64:	asr	r3, r3, #1
   21b68:	strd	r2, [sp]
   21b6c:	ldrh	r3, [r4, #130]	; 0x82
   21b70:	ldr	r1, [r4, #16]
   21b74:	ldr	r2, [r4, #20]
   21b78:	bl	217f0 <flatcc_builder_create_table@@Base>
   21b7c:	subs	r7, r0, #0
   21b80:	beq	21bc0 <flatcc_builder_end_table@@Base+0x118>
   21b84:	ldr	r3, [r4, #32]
   21b88:	mov	r0, r4
   21b8c:	ldr	r1, [r3, #16]
   21b90:	ldr	r2, [r3, #24]
   21b94:	str	r2, [r4, #12]
   21b98:	ldrh	r2, [r3, #28]
   21b9c:	ldr	r3, [r3, #20]
   21ba0:	strh	r2, [r4, #8]
   21ba4:	ldr	r2, [r4, #52]	; 0x34
   21ba8:	add	r2, r2, r1
   21bac:	str	r2, [r4, #4]
   21bb0:	ldr	r2, [r4, #76]	; 0x4c
   21bb4:	add	r3, r2, r3
   21bb8:	str	r3, [r4]
   21bbc:	bl	1fe24 <union_vector_tests@@Base+0x200>
   21bc0:	mov	r0, r7
   21bc4:	add	sp, sp, #20
   21bc8:	pop	{r4, r5, r6, r7, pc}
   21bcc:	andeq	r1, r3, r8, lsr r4
   21bd0:	andeq	r1, r3, sl, asr #12
   21bd4:	andeq	r1, r3, r9, ror #17
   21bd8:			; <UNDEFINED> instruction: 0x9e3779b1

00021bdc <flatcc_builder_create_vector@@Base>:
   21bdc:	push	{lr}		; (str lr, [sp, #-4]!)
   21be0:	sub	sp, sp, #84	; 0x54
   21be4:	ldr	lr, [sp, #92]	; 0x5c
   21be8:	ldrh	ip, [sp, #88]	; 0x58
   21bec:	cmp	r2, lr
   21bf0:	bls	21c08 <flatcc_builder_create_vector@@Base+0x2c>
   21bf4:	ldr	r3, [pc, #184]	; 21cb4 <flatcc_builder_create_vector@@Base+0xd8>
   21bf8:	movw	r2, #1365	; 0x555
   21bfc:	ldr	r1, [pc, #180]	; 21cb8 <flatcc_builder_create_vector@@Base+0xdc>
   21c00:	ldr	r0, [pc, #180]	; 21cbc <flatcc_builder_create_vector@@Base+0xe0>
   21c04:	bl	14620 <__assert_fail@plt>
   21c08:	ldrh	lr, [r0, #128]	; 0x80
   21c0c:	mul	r3, r3, r2
   21c10:	cmp	ip, #4
   21c14:	str	r2, [sp, #4]
   21c18:	movcc	ip, #4
   21c1c:	ldr	r2, [r0, #136]	; 0x88
   21c20:	cmp	lr, ip
   21c24:	sub	r2, r2, r3
   21c28:	strhcc	ip, [r0, #128]	; 0x80
   21c2c:	sub	ip, ip, #1
   21c30:	and	ip, ip, r2
   21c34:	mov	r2, #4
   21c38:	add	lr, sp, r2
   21c3c:	cmp	r3, #0
   21c40:	str	r2, [sp, #8]
   21c44:	str	lr, [sp, #16]
   21c48:	str	r2, [sp, #20]
   21c4c:	mov	r2, #1
   21c50:	str	r2, [sp, #12]
   21c54:	beq	21c70 <flatcc_builder_create_vector@@Base+0x94>
   21c58:	add	r2, r3, #4
   21c5c:	str	r3, [sp, #28]
   21c60:	mov	r3, #2
   21c64:	str	r2, [sp, #8]
   21c68:	str	r3, [sp, #12]
   21c6c:	str	r1, [sp, #24]
   21c70:	cmp	ip, #0
   21c74:	beq	21ca4 <flatcc_builder_create_vector@@Base+0xc8>
   21c78:	ldr	r3, [sp, #8]
   21c7c:	add	r2, sp, #80	; 0x50
   21c80:	ldr	r1, [pc, #56]	; 21cc0 <flatcc_builder_create_vector@@Base+0xe4>
   21c84:	add	r3, r3, ip
   21c88:	str	r3, [sp, #8]
   21c8c:	ldr	r3, [sp, #12]
   21c90:	add	r3, r3, #1
   21c94:	add	r2, r2, r3, lsl #3
   21c98:	str	r3, [sp, #12]
   21c9c:	str	r1, [r2, #-72]	; 0xffffffb8
   21ca0:	str	ip, [r2, #-68]	; 0xffffffbc
   21ca4:	add	r1, sp, #8
   21ca8:	bl	20308 <flatcc_builder_default_alloc@@Base+0x3e0>
   21cac:	add	sp, sp, #84	; 0x54
   21cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   21cb4:	andeq	r1, r3, r1, asr r4
   21cb8:	andeq	r1, r3, sl, asr #12
   21cbc:	andeq	r1, r3, r4, lsl r9
   21cc0:	andeq	r0, r3, r4, ror #30

00021cc4 <flatcc_builder_end_vector@@Base>:
   21cc4:	push	{r0, r1, r2, r4, r5, lr}
   21cc8:	ldr	r2, [r0, #32]
   21ccc:	ldrh	r3, [r2, #14]
   21cd0:	cmp	r3, #4
   21cd4:	beq	21cec <flatcc_builder_end_vector@@Base+0x28>
   21cd8:	ldr	r3, [pc, #76]	; 21d2c <flatcc_builder_end_vector@@Base+0x68>
   21cdc:	movw	r2, #1400	; 0x578
   21ce0:	ldr	r1, [pc, #72]	; 21d30 <flatcc_builder_end_vector@@Base+0x6c>
   21ce4:	ldr	r0, [pc, #72]	; 21d34 <flatcc_builder_end_vector@@Base+0x70>
   21ce8:	bl	14620 <__assert_fail@plt>
   21cec:	ldr	r3, [r2, #24]
   21cf0:	mov	r4, r0
   21cf4:	str	r3, [sp, #4]
   21cf8:	ldrh	r3, [r0, #130]	; 0x82
   21cfc:	str	r3, [sp]
   21d00:	ldr	r3, [r2, #16]
   21d04:	ldr	r1, [r0, #16]
   21d08:	ldr	r2, [r2, #20]
   21d0c:	bl	21bdc <flatcc_builder_create_vector@@Base>
   21d10:	subs	r5, r0, #0
   21d14:	beq	21d20 <flatcc_builder_end_vector@@Base+0x5c>
   21d18:	mov	r0, r4
   21d1c:	bl	1fe24 <union_vector_tests@@Base+0x200>
   21d20:	mov	r0, r5
   21d24:	add	sp, sp, #12
   21d28:	pop	{r4, r5, pc}
   21d2c:	andeq	r1, r3, lr, ror #8
   21d30:	andeq	r1, r3, sl, asr #12
   21d34:	andeq	r1, r3, r4, ror r7

00021d38 <flatcc_builder_vector_count@@Base>:
   21d38:	ldr	r3, [r0, #32]
   21d3c:	ldr	r0, [r3, #20]
   21d40:	bx	lr

00021d44 <flatcc_builder_vector_edit@@Base>:
   21d44:	ldr	r0, [r0, #16]
   21d48:	bx	lr

00021d4c <flatcc_builder_create_offset_vector_direct@@Base>:
   21d4c:	cmn	r2, #-1073741823	; 0xc0000001
   21d50:	bhi	21d5c <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   21d54:	mov	r3, #0
   21d58:	b	203d4 <flatcc_builder_default_alloc@@Base+0x4ac>
   21d5c:	mov	r0, #0
   21d60:	bx	lr

00021d64 <flatcc_builder_end_offset_vector@@Base>:
   21d64:	ldr	r3, [r0, #32]
   21d68:	push	{r4, r5, r6, lr}
   21d6c:	ldrh	r2, [r3, #14]
   21d70:	cmp	r2, #5
   21d74:	beq	21d8c <flatcc_builder_end_offset_vector@@Base+0x28>
   21d78:	ldr	r3, [pc, #52]	; 21db4 <flatcc_builder_end_offset_vector@@Base+0x50>
   21d7c:	movw	r2, #1480	; 0x5c8
   21d80:	ldr	r1, [pc, #48]	; 21db8 <flatcc_builder_end_offset_vector@@Base+0x54>
   21d84:	ldr	r0, [pc, #48]	; 21dbc <flatcc_builder_end_offset_vector@@Base+0x58>
   21d88:	bl	14620 <__assert_fail@plt>
   21d8c:	ldr	r1, [r0, #16]
   21d90:	mov	r4, r0
   21d94:	ldr	r2, [r3, #20]
   21d98:	bl	21d4c <flatcc_builder_create_offset_vector_direct@@Base>
   21d9c:	subs	r5, r0, #0
   21da0:	beq	21dac <flatcc_builder_end_offset_vector@@Base+0x48>
   21da4:	mov	r0, r4
   21da8:	bl	1fe24 <union_vector_tests@@Base+0x200>
   21dac:	mov	r0, r5
   21db0:	pop	{r4, r5, r6, pc}
   21db4:	andeq	r1, r3, r8, lsl #9
   21db8:	andeq	r1, r3, sl, asr #12
   21dbc:	ldrdeq	r1, [r3], -sp

00021dc0 <flatcc_builder_create_offset_vector@@Base>:
   21dc0:	push	{r4, r5, r6, lr}
   21dc4:	mov	r4, r0
   21dc8:	mov	r6, r1
   21dcc:	mov	r5, r2
   21dd0:	bl	213c0 <flatcc_builder_start_offset_vector@@Base>
   21dd4:	cmp	r0, #0
   21dd8:	bne	21e08 <flatcc_builder_create_offset_vector@@Base+0x48>
   21ddc:	mov	r1, r5
   21de0:	mov	r0, r4
   21de4:	bl	20fd0 <flatcc_builder_extend_offset_vector@@Base>
   21de8:	cmp	r0, #0
   21dec:	beq	21e08 <flatcc_builder_create_offset_vector@@Base+0x48>
   21df0:	lsl	r2, r5, #2
   21df4:	mov	r1, r6
   21df8:	bl	14548 <memcpy@plt>
   21dfc:	mov	r0, r4
   21e00:	pop	{r4, r5, r6, lr}
   21e04:	b	21d64 <flatcc_builder_end_offset_vector@@Base>
   21e08:	mov	r0, #0
   21e0c:	pop	{r4, r5, r6, pc}

00021e10 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   21e10:	ldr	r2, [r0, #32]
   21e14:	mov	r3, r1
   21e18:	push	{r4, r5, r6, lr}
   21e1c:	ldrh	r1, [r2, #14]
   21e20:	cmp	r1, #5
   21e24:	beq	21e3c <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   21e28:	ldr	r3, [pc, #64]	; 21e70 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   21e2c:	movw	r2, #1493	; 0x5d5
   21e30:	ldr	r1, [pc, #60]	; 21e74 <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   21e34:	ldr	r0, [pc, #60]	; 21e78 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   21e38:	bl	14620 <__assert_fail@plt>
   21e3c:	ldr	r2, [r2, #20]
   21e40:	cmn	r2, #-1073741823	; 0xc0000001
   21e44:	movhi	r5, #0
   21e48:	bhi	21e68 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   21e4c:	ldr	r1, [r0, #16]
   21e50:	mov	r4, r0
   21e54:	bl	203d4 <flatcc_builder_default_alloc@@Base+0x4ac>
   21e58:	subs	r5, r0, #0
   21e5c:	beq	21e68 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   21e60:	mov	r0, r4
   21e64:	bl	1fe24 <union_vector_tests@@Base+0x200>
   21e68:	mov	r0, r5
   21e6c:	pop	{r4, r5, r6, pc}
   21e70:	andeq	r1, r3, r9, lsr #9
   21e74:	andeq	r1, r3, sl, asr #12
   21e78:	ldrdeq	r1, [r3], -sp

00021e7c <flatcc_builder_offset_vector_edit@@Base>:
   21e7c:	ldr	r0, [r0, #16]
   21e80:	bx	lr

00021e84 <flatcc_builder_offset_vector_count@@Base>:
   21e84:	ldr	r3, [r0, #32]
   21e88:	ldr	r0, [r3, #20]
   21e8c:	bx	lr

00021e90 <flatcc_builder_create_union_vector_direct@@Base>:
   21e90:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   21e94:	mov	r4, r0
   21e98:	ldr	r5, [sp, #32]
   21e9c:	cmn	r5, #-1073741823	; 0xc0000001
   21ea0:	bls	21ebc <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   21ea4:	mov	r3, #0
   21ea8:	str	r3, [r4]
   21eac:	str	r3, [r4, #4]
   21eb0:	mov	r0, r4
   21eb4:	add	sp, sp, #8
   21eb8:	pop	{r4, r5, r6, r7, r8, pc}
   21ebc:	mov	r7, r1
   21ec0:	mov	r8, r2
   21ec4:	mov	r1, r3
   21ec8:	mov	r0, r7
   21ecc:	mov	r3, r2
   21ed0:	mov	r2, r5
   21ed4:	bl	203d4 <flatcc_builder_default_alloc@@Base+0x4ac>
   21ed8:	subs	r6, r0, #0
   21edc:	beq	21ea4 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   21ee0:	mvn	r3, #0
   21ee4:	mov	r2, r5
   21ee8:	mov	r1, r8
   21eec:	mov	r0, r7
   21ef0:	str	r3, [sp, #4]
   21ef4:	mov	r3, #1
   21ef8:	str	r3, [sp]
   21efc:	bl	21bdc <flatcc_builder_create_vector@@Base>
   21f00:	stm	r4, {r0, r6}
   21f04:	b	21eb0 <flatcc_builder_create_union_vector_direct@@Base+0x20>

00021f08 <flatcc_builder_create_union_vector@@Base>:
   21f08:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   21f0c:	mov	r6, r0
   21f10:	mov	r0, r1
   21f14:	mov	r5, r1
   21f18:	mov	r8, r2
   21f1c:	mov	r7, r3
   21f20:	bl	213c0 <flatcc_builder_start_offset_vector@@Base>
   21f24:	subs	r4, r0, #0
   21f28:	beq	21f44 <flatcc_builder_create_union_vector@@Base+0x3c>
   21f2c:	mov	r3, #0
   21f30:	str	r3, [r6]
   21f34:	str	r3, [r6, #4]
   21f38:	mov	r0, r6
   21f3c:	add	sp, sp, #16
   21f40:	pop	{r4, r5, r6, r7, r8, pc}
   21f44:	mov	r1, r7
   21f48:	mov	r0, r5
   21f4c:	bl	20fd0 <flatcc_builder_extend_offset_vector@@Base>
   21f50:	cmp	r0, #0
   21f54:	beq	21f2c <flatcc_builder_create_union_vector@@Base+0x24>
   21f58:	mov	r1, r7
   21f5c:	mov	r0, r5
   21f60:	bl	1fddc <union_vector_tests@@Base+0x1b8>
   21f64:	subs	r2, r0, #0
   21f68:	movne	r1, r4
   21f6c:	addne	r0, r8, #4
   21f70:	ldrne	r3, [r5, #16]
   21f74:	beq	21f2c <flatcc_builder_create_union_vector@@Base+0x24>
   21f78:	cmp	r1, r7
   21f7c:	bne	21fac <flatcc_builder_create_union_vector@@Base+0xa4>
   21f80:	add	r0, sp, #8
   21f84:	str	r1, [sp]
   21f88:	mov	r1, r5
   21f8c:	bl	21e90 <flatcc_builder_create_union_vector_direct@@Base>
   21f90:	ldr	r7, [sp, #8]
   21f94:	mov	r0, r5
   21f98:	ldr	r4, [sp, #12]
   21f9c:	bl	1fe24 <union_vector_tests@@Base+0x200>
   21fa0:	str	r7, [r6]
   21fa4:	str	r4, [r6, #4]
   21fa8:	b	21f38 <flatcc_builder_create_union_vector@@Base+0x30>
   21fac:	ldrb	ip, [r8, r1, lsl #3]
   21fb0:	strb	ip, [r2, r1]
   21fb4:	ldr	ip, [r0, r1, lsl #3]
   21fb8:	str	ip, [r3, r1, lsl #2]
   21fbc:	add	r1, r1, #1
   21fc0:	b	21f78 <flatcc_builder_create_union_vector@@Base+0x70>

00021fc4 <flatcc_builder_start_union_vector@@Base>:
   21fc4:	push	{r4, r5, r6, lr}
   21fc8:	mov	r1, #4
   21fcc:	mov	r5, r0
   21fd0:	bl	20090 <flatcc_builder_default_alloc@@Base+0x168>
   21fd4:	subs	r4, r0, #0
   21fd8:	mvnne	r4, #0
   21fdc:	bne	22004 <flatcc_builder_start_union_vector@@Base+0x40>
   21fe0:	ldr	r3, [r5, #32]
   21fe4:	mov	r2, #8
   21fe8:	mvn	r1, #3
   21fec:	mov	r0, r5
   21ff0:	str	r2, [r3, #16]
   21ff4:	mov	r2, #7
   21ff8:	strh	r2, [r3, #14]
   21ffc:	str	r4, [r3, #20]
   22000:	bl	1fd60 <union_vector_tests@@Base+0x13c>
   22004:	mov	r0, r4
   22008:	pop	{r4, r5, r6, pc}

0002200c <flatcc_builder_end_union_vector@@Base>:
   2200c:	ldr	r3, [r1, #32]
   22010:	push	{r4, r5, r6, r7, lr}
   22014:	sub	sp, sp, #20
   22018:	ldrh	r2, [r3, #14]
   2201c:	cmp	r2, #7
   22020:	beq	22038 <flatcc_builder_end_union_vector@@Base+0x2c>
   22024:	ldr	r3, [pc, #156]	; 220c8 <flatcc_builder_end_union_vector@@Base+0xbc>
   22028:	movw	r2, #1617	; 0x651
   2202c:	ldr	r1, [pc, #152]	; 220cc <flatcc_builder_end_union_vector@@Base+0xc0>
   22030:	ldr	r0, [pc, #152]	; 220d0 <flatcc_builder_end_union_vector@@Base+0xc4>
   22034:	bl	14620 <__assert_fail@plt>
   22038:	ldr	r7, [r3, #20]
   2203c:	mov	r4, r0
   22040:	mov	r5, r1
   22044:	mov	r0, r1
   22048:	lsl	r6, r7, #2
   2204c:	add	r1, r6, r7
   22050:	bl	1fddc <union_vector_tests@@Base+0x1b8>
   22054:	subs	r3, r0, #0
   22058:	streq	r3, [r4]
   2205c:	streq	r3, [r4, #4]
   22060:	beq	220a4 <flatcc_builder_end_union_vector@@Base+0x98>
   22064:	ldr	r0, [r5, #16]
   22068:	add	r2, r3, r6
   2206c:	mov	r1, #0
   22070:	add	ip, r0, #4
   22074:	cmp	r1, r7
   22078:	bne	220b0 <flatcc_builder_end_union_vector@@Base+0xa4>
   2207c:	add	r0, sp, #8
   22080:	str	r1, [sp]
   22084:	mov	r1, r5
   22088:	bl	21e90 <flatcc_builder_create_union_vector_direct@@Base>
   2208c:	ldr	r7, [sp, #8]
   22090:	mov	r0, r5
   22094:	ldr	r6, [sp, #12]
   22098:	bl	1fe24 <union_vector_tests@@Base+0x200>
   2209c:	str	r7, [r4]
   220a0:	str	r6, [r4, #4]
   220a4:	mov	r0, r4
   220a8:	add	sp, sp, #20
   220ac:	pop	{r4, r5, r6, r7, pc}
   220b0:	ldrb	lr, [r0, r1, lsl #3]
   220b4:	strb	lr, [r2, r1]
   220b8:	ldr	lr, [ip, r1, lsl #3]
   220bc:	str	lr, [r3, r1, lsl #2]
   220c0:	add	r1, r1, #1
   220c4:	b	22074 <flatcc_builder_end_union_vector@@Base+0x68>
   220c8:	ldrdeq	r1, [r3], -r5
   220cc:	andeq	r1, r3, sl, asr #12
   220d0:	andeq	r1, r3, r7, lsr #18

000220d4 <flatcc_builder_union_vector_edit@@Base>:
   220d4:	ldr	r0, [r0, #16]
   220d8:	bx	lr

000220dc <flatcc_builder_union_vector_count@@Base>:
   220dc:	ldr	r3, [r0, #32]
   220e0:	ldr	r0, [r3, #20]
   220e4:	bx	lr

000220e8 <flatcc_builder_extend_union_vector@@Base>:
   220e8:	push	{r4, r5, r6, lr}
   220ec:	mvn	r2, #-536870912	; 0xe0000000
   220f0:	mov	r4, r0
   220f4:	mov	r5, r1
   220f8:	ldr	r0, [r0, #32]
   220fc:	bl	20380 <flatcc_builder_default_alloc@@Base+0x458>
   22100:	cmp	r0, #0
   22104:	bne	22118 <flatcc_builder_extend_union_vector@@Base+0x30>
   22108:	lsl	r1, r5, #3
   2210c:	mov	r0, r4
   22110:	pop	{r4, r5, r6, lr}
   22114:	b	1fddc <union_vector_tests@@Base+0x1b8>
   22118:	mov	r0, #0
   2211c:	pop	{r4, r5, r6, pc}

00022120 <flatcc_builder_truncate_union_vector@@Base>:
   22120:	ldr	r3, [r0, #32]
   22124:	push	{r4, lr}
   22128:	ldrh	r2, [r3, #14]
   2212c:	cmp	r2, #7
   22130:	beq	22148 <flatcc_builder_truncate_union_vector@@Base+0x28>
   22134:	ldr	r3, [pc, #72]	; 22184 <flatcc_builder_truncate_union_vector@@Base+0x64>
   22138:	movw	r2, #1665	; 0x681
   2213c:	ldr	r1, [pc, #68]	; 22188 <flatcc_builder_truncate_union_vector@@Base+0x68>
   22140:	ldr	r0, [pc, #68]	; 2218c <flatcc_builder_truncate_union_vector@@Base+0x6c>
   22144:	bl	14620 <__assert_fail@plt>
   22148:	ldr	r2, [r3, #20]
   2214c:	cmp	r2, r1
   22150:	bcs	22168 <flatcc_builder_truncate_union_vector@@Base+0x48>
   22154:	ldr	r3, [pc, #40]	; 22184 <flatcc_builder_truncate_union_vector@@Base+0x64>
   22158:	movw	r2, #1666	; 0x682
   2215c:	ldr	r1, [pc, #36]	; 22188 <flatcc_builder_truncate_union_vector@@Base+0x68>
   22160:	ldr	r0, [pc, #40]	; 22190 <flatcc_builder_truncate_union_vector@@Base+0x70>
   22164:	b	22144 <flatcc_builder_truncate_union_vector@@Base+0x24>
   22168:	sub	r2, r2, r1
   2216c:	str	r2, [r3, #20]
   22170:	ldr	r3, [r3, #16]
   22174:	mul	r1, r3, r1
   22178:	bl	1fe8c <union_vector_tests@@Base+0x268>
   2217c:	mov	r0, #0
   22180:	pop	{r4, pc}
   22184:	strdeq	r1, [r3], -r5
   22188:	andeq	r1, r3, sl, asr #12
   2218c:	andeq	r1, r3, r7, lsr #18
   22190:	andeq	r1, r3, r0, ror #16

00022194 <flatcc_builder_union_vector_push@@Base>:
   22194:	push	{r0, r1, r4, lr}
   22198:	mov	r4, sp
   2219c:	stm	r4, {r1, r2}
   221a0:	ldr	r2, [r0, #32]
   221a4:	ldrh	r3, [r2, #14]
   221a8:	cmp	r3, #7
   221ac:	beq	221c4 <flatcc_builder_union_vector_push@@Base+0x30>
   221b0:	ldr	r3, [pc, #68]	; 221fc <flatcc_builder_union_vector_push@@Base+0x68>
   221b4:	movw	r2, #1677	; 0x68d
   221b8:	ldr	r1, [pc, #64]	; 22200 <flatcc_builder_union_vector_push@@Base+0x6c>
   221bc:	ldr	r0, [pc, #64]	; 22204 <flatcc_builder_union_vector_push@@Base+0x70>
   221c0:	bl	14620 <__assert_fail@plt>
   221c4:	ldr	r3, [r2, #20]
   221c8:	cmn	r3, #-536870911	; 0xe0000001
   221cc:	moveq	r3, #0
   221d0:	beq	221f0 <flatcc_builder_union_vector_push@@Base+0x5c>
   221d4:	add	r3, r3, #1
   221d8:	mov	r1, #8
   221dc:	str	r3, [r2, #20]
   221e0:	bl	1fddc <union_vector_tests@@Base+0x1b8>
   221e4:	subs	r3, r0, #0
   221e8:	ldmne	r4, {r0, r1}
   221ec:	stmne	r3, {r0, r1}
   221f0:	mov	r0, r3
   221f4:	add	sp, sp, #8
   221f8:	pop	{r4, pc}
   221fc:	andeq	r1, r3, sl, lsl r5
   22200:	andeq	r1, r3, sl, asr #12
   22204:	andeq	r1, r3, r7, lsr #18

00022208 <flatcc_builder_append_union_vector@@Base>:
   22208:	push	{r4, r5, r6, lr}
   2220c:	mov	r4, r0
   22210:	ldr	r0, [r0, #32]
   22214:	ldrh	r3, [r0, #14]
   22218:	cmp	r3, #7
   2221c:	beq	22234 <flatcc_builder_append_union_vector@@Base+0x2c>
   22220:	ldr	r3, [pc, #68]	; 2226c <flatcc_builder_append_union_vector@@Base+0x64>
   22224:	movw	r2, #1692	; 0x69c
   22228:	ldr	r1, [pc, #64]	; 22270 <flatcc_builder_append_union_vector@@Base+0x68>
   2222c:	ldr	r0, [pc, #64]	; 22274 <flatcc_builder_append_union_vector@@Base+0x6c>
   22230:	bl	14620 <__assert_fail@plt>
   22234:	mov	r5, r2
   22238:	mov	r6, r1
   2223c:	mvn	r2, #-536870912	; 0xe0000000
   22240:	mov	r1, r5
   22244:	bl	20380 <flatcc_builder_default_alloc@@Base+0x458>
   22248:	cmp	r0, #0
   2224c:	bne	22264 <flatcc_builder_append_union_vector@@Base+0x5c>
   22250:	lsl	r2, r5, #3
   22254:	mov	r1, r6
   22258:	mov	r0, r4
   2225c:	pop	{r4, r5, r6, lr}
   22260:	b	1feac <union_vector_tests@@Base+0x288>
   22264:	mov	r0, #0
   22268:	pop	{r4, r5, r6, pc}
   2226c:	andeq	r1, r3, fp, lsr r5
   22270:	andeq	r1, r3, sl, asr #12
   22274:	andeq	r1, r3, r7, lsr #18

00022278 <flatcc_builder_create_string@@Base>:
   22278:	ldr	r3, [r0, #136]	; 0x88
   2227c:	mov	ip, #4
   22280:	cmp	r2, #0
   22284:	push	{lr}		; (str lr, [sp, #-4]!)
   22288:	sub	sp, sp, #84	; 0x54
   2228c:	add	lr, sp, ip
   22290:	stmib	sp, {r2, ip}
   22294:	sub	r3, r3, r2
   22298:	str	lr, [sp, #16]
   2229c:	sub	r3, r3, #1
   222a0:	str	ip, [sp, #20]
   222a4:	mov	ip, #1
   222a8:	and	r3, r3, #3
   222ac:	add	r3, r3, #1
   222b0:	str	ip, [sp, #12]
   222b4:	beq	222d0 <flatcc_builder_create_string@@Base+0x58>
   222b8:	add	ip, r2, #4
   222bc:	str	r2, [sp, #28]
   222c0:	mov	r2, #2
   222c4:	str	ip, [sp, #8]
   222c8:	str	r2, [sp, #12]
   222cc:	str	r1, [sp, #24]
   222d0:	ldr	r2, [sp, #8]
   222d4:	add	r1, sp, #80	; 0x50
   222d8:	ldr	ip, [pc, #44]	; 2230c <flatcc_builder_create_string@@Base+0x94>
   222dc:	add	r2, r2, r3
   222e0:	str	r2, [sp, #8]
   222e4:	ldr	r2, [sp, #12]
   222e8:	add	r2, r2, #1
   222ec:	add	r1, r1, r2, lsl #3
   222f0:	str	r2, [sp, #12]
   222f4:	str	ip, [r1, #-72]	; 0xffffffb8
   222f8:	str	r3, [r1, #-68]	; 0xffffffbc
   222fc:	add	r1, sp, #8
   22300:	bl	20308 <flatcc_builder_default_alloc@@Base+0x3e0>
   22304:	add	sp, sp, #84	; 0x54
   22308:	pop	{pc}		; (ldr pc, [sp], #4)
   2230c:	andeq	r0, r3, r4, ror #30

00022310 <flatcc_builder_create_string_str@@Base>:
   22310:	push	{r4, r5, r6, lr}
   22314:	mov	r5, r0
   22318:	mov	r0, r1
   2231c:	mov	r4, r1
   22320:	bl	1459c <strlen@plt>
   22324:	mov	r2, r0
   22328:	mov	r1, r4
   2232c:	mov	r0, r5
   22330:	pop	{r4, r5, r6, lr}
   22334:	b	22278 <flatcc_builder_create_string@@Base>

00022338 <flatcc_builder_create_string_strn@@Base>:
   22338:	push	{r4, r5, r6, lr}
   2233c:	mov	r4, r1
   22340:	mov	r6, r0
   22344:	mov	r1, #0
   22348:	mov	r0, r4
   2234c:	mov	r5, r2
   22350:	bl	145e4 <memchr@plt>
   22354:	cmp	r0, #0
   22358:	mov	r1, r4
   2235c:	subne	r5, r0, r4
   22360:	mov	r0, r6
   22364:	mov	r2, r5
   22368:	pop	{r4, r5, r6, lr}
   2236c:	b	22278 <flatcc_builder_create_string@@Base>

00022370 <flatcc_builder_end_string@@Base>:
   22370:	ldr	r3, [r0, #32]
   22374:	push	{r4, r5, r6, lr}
   22378:	ldrh	r2, [r3, #14]
   2237c:	cmp	r2, #6
   22380:	beq	22398 <flatcc_builder_end_string@@Base+0x28>
   22384:	ldr	r3, [pc, #84]	; 223e0 <flatcc_builder_end_string@@Base+0x70>
   22388:	movw	r2, #1732	; 0x6c4
   2238c:	ldr	r1, [pc, #80]	; 223e4 <flatcc_builder_end_string@@Base+0x74>
   22390:	ldr	r0, [pc, #80]	; 223e8 <flatcc_builder_end_string@@Base+0x78>
   22394:	bl	14620 <__assert_fail@plt>
   22398:	ldr	r2, [r3, #20]
   2239c:	mov	r4, r0
   223a0:	ldr	r1, [r0, #20]
   223a4:	cmp	r2, r1
   223a8:	beq	223c0 <flatcc_builder_end_string@@Base+0x50>
   223ac:	ldr	r3, [pc, #44]	; 223e0 <flatcc_builder_end_string@@Base+0x70>
   223b0:	movw	r2, #1733	; 0x6c5
   223b4:	ldr	r1, [pc, #40]	; 223e4 <flatcc_builder_end_string@@Base+0x74>
   223b8:	ldr	r0, [pc, #44]	; 223ec <flatcc_builder_end_string@@Base+0x7c>
   223bc:	b	22394 <flatcc_builder_end_string@@Base+0x24>
   223c0:	ldr	r1, [r0, #16]
   223c4:	bl	22278 <flatcc_builder_create_string@@Base>
   223c8:	subs	r5, r0, #0
   223cc:	beq	223d8 <flatcc_builder_end_string@@Base+0x68>
   223d0:	mov	r0, r4
   223d4:	bl	1fe24 <union_vector_tests@@Base+0x200>
   223d8:	mov	r0, r5
   223dc:	pop	{r4, r5, r6, pc}
   223e0:	andeq	r1, r3, lr, asr r5
   223e4:	andeq	r1, r3, sl, asr #12
   223e8:	andeq	r1, r3, r0, lsl r8
   223ec:	andeq	r1, r3, r9, asr r9

000223f0 <flatcc_builder_string_edit@@Base>:
   223f0:	ldr	r0, [r0, #16]
   223f4:	bx	lr

000223f8 <flatcc_builder_string_len@@Base>:
   223f8:	ldr	r3, [r0, #32]
   223fc:	ldr	r0, [r3, #20]
   22400:	bx	lr

00022404 <flatcc_builder_table_add@@Base>:
   22404:	push	{r4, r5, r6, r7, r8, lr}
   22408:	mov	r4, r0
   2240c:	ldr	r0, [r0, #32]
   22410:	ldrh	r0, [r0, #14]
   22414:	cmp	r0, #3
   22418:	beq	22430 <flatcc_builder_table_add@@Base+0x2c>
   2241c:	ldr	r3, [pc, #240]	; 22514 <flatcc_builder_table_add@@Base+0x110>
   22420:	movw	r2, #1773	; 0x6ed
   22424:	ldr	r1, [pc, #236]	; 22518 <flatcc_builder_table_add@@Base+0x114>
   22428:	ldr	r0, [pc, #236]	; 2251c <flatcc_builder_table_add@@Base+0x118>
   2242c:	bl	14620 <__assert_fail@plt>
   22430:	movw	r0, #32764	; 0x7ffc
   22434:	cmp	r1, r0
   22438:	bls	22450 <flatcc_builder_table_add@@Base+0x4c>
   2243c:	ldr	r3, [pc, #208]	; 22514 <flatcc_builder_table_add@@Base+0x110>
   22440:	movw	r2, #1774	; 0x6ee
   22444:	ldr	r1, [pc, #204]	; 22518 <flatcc_builder_table_add@@Base+0x114>
   22448:	ldr	r0, [pc, #208]	; 22520 <flatcc_builder_table_add@@Base+0x11c>
   2244c:	b	2242c <flatcc_builder_table_add@@Base+0x28>
   22450:	ldrh	r0, [r4, #130]	; 0x82
   22454:	lsl	r7, r1, #1
   22458:	cmp	r0, r3
   2245c:	ldr	r0, [r4, #4]
   22460:	strhcc	r3, [r4, #130]	; 0x82
   22464:	ldrh	r5, [r0, r7]
   22468:	cmp	r5, #0
   2246c:	beq	22484 <flatcc_builder_table_add@@Base+0x80>
   22470:	ldr	r3, [pc, #156]	; 22514 <flatcc_builder_table_add@@Base+0x110>
   22474:	movw	r2, #1784	; 0x6f8
   22478:	ldr	r1, [pc, #152]	; 22518 <flatcc_builder_table_add@@Base+0x114>
   2247c:	ldr	r0, [pc, #160]	; 22524 <flatcc_builder_table_add@@Base+0x120>
   22480:	b	2242c <flatcc_builder_table_add@@Base+0x28>
   22484:	ldr	ip, [r4, #12]
   22488:	sub	r0, r3, #1
   2248c:	rsb	r3, r3, #0
   22490:	uxth	r8, r1
   22494:	ldr	lr, [pc, #140]	; 22528 <flatcc_builder_table_add@@Base+0x124>
   22498:	ldr	r6, [r4, #20]
   2249c:	eor	ip, ip, r1
   224a0:	mul	ip, lr, ip
   224a4:	add	r0, r0, r6
   224a8:	and	r6, r0, r3
   224ac:	ldr	r3, [r4, #24]
   224b0:	eor	ip, ip, r2
   224b4:	add	r1, r2, r6
   224b8:	mul	ip, lr, ip
   224bc:	cmp	r1, r3
   224c0:	str	ip, [r4, #12]
   224c4:	str	r1, [r4, #20]
   224c8:	bcs	224f4 <flatcc_builder_table_add@@Base+0xf0>
   224cc:	ldr	r3, [r4, #4]
   224d0:	add	r2, r6, #4
   224d4:	ldr	r0, [r4, #16]
   224d8:	strh	r2, [r3, r7]
   224dc:	ldrh	r3, [r4, #8]
   224e0:	add	r0, r0, r6
   224e4:	cmp	r3, r8
   224e8:	addls	r1, r8, #1
   224ec:	strhls	r1, [r4, #8]
   224f0:	pop	{r4, r5, r6, r7, r8, pc}
   224f4:	movw	r2, #65532	; 0xfffc
   224f8:	add	r1, r1, #1
   224fc:	mov	r0, r4
   22500:	bl	1fd8c <union_vector_tests@@Base+0x168>
   22504:	cmp	r0, #0
   22508:	beq	224cc <flatcc_builder_table_add@@Base+0xc8>
   2250c:	mov	r0, r5
   22510:	pop	{r4, r5, r6, r7, r8, pc}
   22514:	andeq	r1, r3, r8, ror r5
   22518:	andeq	r1, r3, sl, asr #12
   2251c:	andeq	r1, r3, r9, ror #17
   22520:	andeq	r1, r3, sp, ror r9
   22524:			; <UNDEFINED> instruction: 0x000316b7
   22528:			; <UNDEFINED> instruction: 0x9e3779b1

0002252c <flatcc_builder_table_edit@@Base>:
   2252c:	ldr	r3, [r0, #32]
   22530:	ldrh	r3, [r3, #14]
   22534:	cmp	r3, #3
   22538:	beq	22554 <flatcc_builder_table_edit@@Base+0x28>
   2253c:	push	{r4, lr}
   22540:	movw	r2, #1794	; 0x702
   22544:	ldr	r3, [pc, #28]	; 22568 <flatcc_builder_table_edit@@Base+0x3c>
   22548:	ldr	r1, [pc, #28]	; 2256c <flatcc_builder_table_edit@@Base+0x40>
   2254c:	ldr	r0, [pc, #28]	; 22570 <flatcc_builder_table_edit@@Base+0x44>
   22550:	bl	14620 <__assert_fail@plt>
   22554:	ldr	r3, [r0, #20]
   22558:	ldr	r0, [r0, #16]
   2255c:	sub	r3, r3, r1
   22560:	add	r0, r0, r3
   22564:	bx	lr
   22568:	muleq	r3, r1, r5
   2256c:	andeq	r1, r3, sl, asr #12
   22570:	andeq	r1, r3, r9, ror #17

00022574 <flatcc_builder_table_add_copy@@Base>:
   22574:	push	{r4, r5, r6, lr}
   22578:	mov	r4, r3
   2257c:	mov	r6, r2
   22580:	mov	r2, r4
   22584:	ldrh	r3, [sp, #16]
   22588:	bl	22404 <flatcc_builder_table_add@@Base>
   2258c:	subs	r5, r0, #0
   22590:	beq	225a0 <flatcc_builder_table_add_copy@@Base+0x2c>
   22594:	mov	r2, r4
   22598:	mov	r1, r6
   2259c:	bl	14548 <memcpy@plt>
   225a0:	mov	r0, r5
   225a4:	pop	{r4, r5, r6, pc}

000225a8 <flatcc_builder_table_add_offset@@Base>:
   225a8:	ldr	r3, [r0, #32]
   225ac:	push	{r4, r5, r6, r7, r8, lr}
   225b0:	ldrh	r3, [r3, #14]
   225b4:	cmp	r3, #3
   225b8:	beq	225d0 <flatcc_builder_table_add_offset@@Base+0x28>
   225bc:	ldr	r3, [pc, #236]	; 226b0 <flatcc_builder_table_add_offset@@Base+0x108>
   225c0:	movw	r2, #1811	; 0x713
   225c4:	ldr	r1, [pc, #232]	; 226b4 <flatcc_builder_table_add_offset@@Base+0x10c>
   225c8:	ldr	r0, [pc, #232]	; 226b8 <flatcc_builder_table_add_offset@@Base+0x110>
   225cc:	bl	14620 <__assert_fail@plt>
   225d0:	movw	r3, #32764	; 0x7ffc
   225d4:	cmp	r1, r3
   225d8:	bls	225f0 <flatcc_builder_table_add_offset@@Base+0x48>
   225dc:	ldr	r3, [pc, #204]	; 226b0 <flatcc_builder_table_add_offset@@Base+0x108>
   225e0:	movw	r2, #1812	; 0x714
   225e4:	ldr	r1, [pc, #200]	; 226b4 <flatcc_builder_table_add_offset@@Base+0x10c>
   225e8:	ldr	r0, [pc, #204]	; 226bc <flatcc_builder_table_add_offset@@Base+0x114>
   225ec:	b	225cc <flatcc_builder_table_add_offset@@Base+0x24>
   225f0:	ldr	r3, [r0, #4]
   225f4:	lsl	r7, r1, #1
   225f8:	mov	r4, r0
   225fc:	ldrh	r6, [r3, r7]
   22600:	cmp	r6, #0
   22604:	beq	2261c <flatcc_builder_table_add_offset@@Base+0x74>
   22608:	ldr	r3, [pc, #160]	; 226b0 <flatcc_builder_table_add_offset@@Base+0x108>
   2260c:	movw	r2, #1819	; 0x71b
   22610:	ldr	r1, [pc, #156]	; 226b4 <flatcc_builder_table_add_offset@@Base+0x10c>
   22614:	ldr	r0, [pc, #164]	; 226c0 <flatcc_builder_table_add_offset@@Base+0x118>
   22618:	b	225cc <flatcc_builder_table_add_offset@@Base+0x24>
   2261c:	ldr	r3, [r0, #12]
   22620:	uxth	r5, r1
   22624:	ldr	r2, [pc, #152]	; 226c4 <flatcc_builder_table_add_offset@@Base+0x11c>
   22628:	ldr	r8, [r0, #20]
   2262c:	eor	r3, r3, r1
   22630:	mul	r3, r2, r3
   22634:	add	r8, r8, #3
   22638:	eor	r3, r3, #4
   2263c:	bic	r8, r8, #3
   22640:	add	r1, r8, #4
   22644:	mul	r3, r2, r3
   22648:	str	r3, [r0, #12]
   2264c:	ldr	r3, [r0, #24]
   22650:	str	r1, [r0, #20]
   22654:	cmp	r1, r3
   22658:	bhi	22698 <flatcc_builder_table_add_offset@@Base+0xf0>
   2265c:	ldr	r3, [r4, #4]
   22660:	uxth	r2, r8
   22664:	add	r1, r2, #4
   22668:	ldr	r0, [r4, #16]
   2266c:	strh	r1, [r3, r7]
   22670:	ldrh	r3, [r4, #8]
   22674:	add	r0, r0, r8
   22678:	cmp	r3, r5
   2267c:	ldr	r3, [r4]
   22680:	addls	r1, r5, #1
   22684:	strhls	r1, [r4, #8]
   22688:	add	r1, r3, #2
   2268c:	str	r1, [r4]
   22690:	strh	r2, [r3]
   22694:	pop	{r4, r5, r6, r7, r8, pc}
   22698:	movw	r2, #65532	; 0xfffc
   2269c:	bl	1fd8c <union_vector_tests@@Base+0x168>
   226a0:	cmp	r0, #0
   226a4:	beq	2265c <flatcc_builder_table_add_offset@@Base+0xb4>
   226a8:	mov	r0, r6
   226ac:	pop	{r4, r5, r6, r7, r8, pc}
   226b0:	andeq	r1, r3, fp, lsr #11
   226b4:	andeq	r1, r3, sl, asr #12
   226b8:	andeq	r1, r3, r9, ror #17
   226bc:	andeq	r1, r3, sp, ror r9
   226c0:			; <UNDEFINED> instruction: 0x000316b7
   226c4:			; <UNDEFINED> instruction: 0x9e3779b1

000226c8 <flatcc_builder_table_add_union@@Base>:
   226c8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   226cc:	add	ip, sp, #8
   226d0:	stmdb	ip, {r2, r3}
   226d4:	ldr	r3, [r0, #32]
   226d8:	ldrb	r5, [sp]
   226dc:	ldr	r4, [sp, #4]
   226e0:	ldrh	r3, [r3, #14]
   226e4:	cmp	r3, #3
   226e8:	beq	22700 <flatcc_builder_table_add_union@@Base+0x38>
   226ec:	ldr	r3, [pc, #164]	; 22798 <flatcc_builder_table_add_union@@Base+0xd0>
   226f0:	movw	r2, #1518	; 0x5ee
   226f4:	ldr	r1, [pc, #160]	; 2279c <flatcc_builder_table_add_union@@Base+0xd4>
   226f8:	ldr	r0, [pc, #160]	; 227a0 <flatcc_builder_table_add_union@@Base+0xd8>
   226fc:	bl	14620 <__assert_fail@plt>
   22700:	cmp	r5, #0
   22704:	mov	r6, r0
   22708:	mov	r7, r1
   2270c:	bne	2272c <flatcc_builder_table_add_union@@Base+0x64>
   22710:	cmp	r4, #0
   22714:	beq	22758 <flatcc_builder_table_add_union@@Base+0x90>
   22718:	ldr	r3, [pc, #120]	; 22798 <flatcc_builder_table_add_union@@Base+0xd0>
   2271c:	movw	r2, #1519	; 0x5ef
   22720:	ldr	r1, [pc, #116]	; 2279c <flatcc_builder_table_add_union@@Base+0xd4>
   22724:	ldr	r0, [pc, #120]	; 227a4 <flatcc_builder_table_add_union@@Base+0xdc>
   22728:	b	226fc <flatcc_builder_table_add_union@@Base+0x34>
   2272c:	cmp	r4, #0
   22730:	beq	22758 <flatcc_builder_table_add_union@@Base+0x90>
   22734:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   22738:	cmp	r0, #0
   2273c:	strne	r4, [r0]
   22740:	bne	22758 <flatcc_builder_table_add_union@@Base+0x90>
   22744:	ldr	r3, [pc, #76]	; 22798 <flatcc_builder_table_add_union@@Base+0xd0>
   22748:	movw	r2, #1522	; 0x5f2
   2274c:	ldr	r1, [pc, #72]	; 2279c <flatcc_builder_table_add_union@@Base+0xd4>
   22750:	ldr	r0, [pc, #80]	; 227a8 <flatcc_builder_table_add_union@@Base+0xe0>
   22754:	b	226fc <flatcc_builder_table_add_union@@Base+0x34>
   22758:	mov	r3, #1
   2275c:	sub	r1, r7, #1
   22760:	mov	r2, r3
   22764:	mov	r0, r6
   22768:	bl	22404 <flatcc_builder_table_add@@Base>
   2276c:	cmp	r0, #0
   22770:	bne	22788 <flatcc_builder_table_add_union@@Base+0xc0>
   22774:	ldr	r3, [pc, #28]	; 22798 <flatcc_builder_table_add_union@@Base+0xd0>
   22778:	movw	r2, #1526	; 0x5f6
   2277c:	ldr	r1, [pc, #24]	; 2279c <flatcc_builder_table_add_union@@Base+0xd4>
   22780:	ldr	r0, [pc, #36]	; 227ac <flatcc_builder_table_add_union@@Base+0xe4>
   22784:	b	226fc <flatcc_builder_table_add_union@@Base+0x34>
   22788:	strb	r5, [r0]
   2278c:	mov	r0, #0
   22790:	add	sp, sp, #12
   22794:	pop	{r4, r5, r6, r7, pc}
   22798:	andeq	r1, r3, fp, asr #11
   2279c:	andeq	r1, r3, sl, asr #12
   227a0:	andeq	r1, r3, r9, ror #17
   227a4:	andeq	r1, r3, r1, asr #19
   227a8:	andeq	r1, r3, r3, ror #19
   227ac:	andeq	r1, r3, sp, ror #19

000227b0 <flatcc_builder_table_add_union_vector@@Base>:
   227b0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   227b4:	mov	r7, r1
   227b8:	add	r1, sp, #8
   227bc:	stmdb	r1, {r2, r3}
   227c0:	ldr	r3, [r0, #32]
   227c4:	ldrd	r4, [sp]
   227c8:	ldrh	r3, [r3, #14]
   227cc:	cmp	r3, #3
   227d0:	beq	227e8 <flatcc_builder_table_add_union_vector@@Base+0x38>
   227d4:	ldr	r3, [pc, #176]	; 2288c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   227d8:	mov	r2, #1536	; 0x600
   227dc:	ldr	r1, [pc, #172]	; 22890 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   227e0:	ldr	r0, [pc, #172]	; 22894 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   227e4:	bl	14620 <__assert_fail@plt>
   227e8:	clz	r3, r5
   227ec:	clz	r2, r4
   227f0:	lsr	r3, r3, #5
   227f4:	lsr	r2, r2, #5
   227f8:	cmp	r2, r3
   227fc:	beq	22828 <flatcc_builder_table_add_union_vector@@Base+0x78>
   22800:	adds	r4, r4, #0
   22804:	movne	r4, #1
   22808:	cmp	r4, r3
   2280c:	mvnne	r4, #0
   22810:	bne	22880 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   22814:	ldr	r3, [pc, #112]	; 2288c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   22818:	movw	r2, #1537	; 0x601
   2281c:	ldr	r1, [pc, #108]	; 22890 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   22820:	ldr	r0, [pc, #112]	; 22898 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   22824:	b	227e4 <flatcc_builder_table_add_union_vector@@Base+0x34>
   22828:	cmp	r4, #0
   2282c:	beq	22880 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   22830:	sub	r1, r7, #1
   22834:	mov	r6, r0
   22838:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   2283c:	cmp	r0, #0
   22840:	ldreq	r3, [pc, #68]	; 2288c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   22844:	movweq	r2, #1540	; 0x604
   22848:	beq	22874 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   2284c:	mov	r1, r7
   22850:	str	r4, [r0]
   22854:	mov	r0, r6
   22858:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   2285c:	cmp	r0, #0
   22860:	movne	r4, #0
   22864:	strne	r5, [r0]
   22868:	bne	22880 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   2286c:	ldr	r3, [pc, #24]	; 2288c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   22870:	movw	r2, #1544	; 0x608
   22874:	ldr	r1, [pc, #20]	; 22890 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   22878:	ldr	r0, [pc, #28]	; 2289c <flatcc_builder_table_add_union_vector@@Base+0xec>
   2287c:	b	227e4 <flatcc_builder_table_add_union_vector@@Base+0x34>
   22880:	mov	r0, r4
   22884:	add	sp, sp, #12
   22888:	pop	{r4, r5, r6, r7, pc}
   2288c:	andeq	r1, r3, sl, ror #11
   22890:	andeq	r1, r3, sl, asr #12
   22894:	andeq	r1, r3, r9, ror #17
   22898:	strdeq	r1, [r3], -r9
   2289c:	andeq	r1, r3, r3, ror #19

000228a0 <flatcc_builder_push_buffer_alignment@@Base>:
   228a0:	mov	r3, r0
   228a4:	mov	r2, #4
   228a8:	ldrh	r0, [r0, #128]	; 0x80
   228ac:	strh	r2, [r3, #128]	; 0x80
   228b0:	bx	lr

000228b4 <flatcc_builder_pop_buffer_alignment@@Base>:
   228b4:	ldrh	r3, [r0, #128]	; 0x80
   228b8:	cmp	r3, r1
   228bc:	strhcc	r1, [r0, #128]	; 0x80
   228c0:	bx	lr

000228c4 <flatcc_builder_get_buffer_alignment@@Base>:
   228c4:	ldrh	r0, [r0, #128]	; 0x80
   228c8:	bx	lr

000228cc <flatcc_builder_set_vtable_clustering@@Base>:
   228cc:	clz	r1, r1
   228d0:	lsr	r1, r1, #5
   228d4:	str	r1, [r0, #180]	; 0xb4
   228d8:	bx	lr

000228dc <flatcc_builder_set_block_align@@Base>:
   228dc:	strh	r1, [r0, #132]	; 0x84
   228e0:	bx	lr

000228e4 <flatcc_builder_get_level@@Base>:
   228e4:	ldr	r0, [r0, #156]	; 0x9c
   228e8:	bx	lr

000228ec <flatcc_builder_set_max_level@@Base>:
   228ec:	ldr	r3, [r0, #160]	; 0xa0
   228f0:	str	r1, [r0, #176]	; 0xb0
   228f4:	cmp	r3, r1
   228f8:	strlt	r1, [r0, #160]	; 0xa0
   228fc:	bx	lr

00022900 <flatcc_builder_get_buffer_size@@Base>:
   22900:	ldr	r2, [r0, #140]	; 0x8c
   22904:	ldr	r0, [r0, #136]	; 0x88
   22908:	sub	r0, r2, r0
   2290c:	bx	lr

00022910 <flatcc_builder_get_buffer_start@@Base>:
   22910:	ldr	r0, [r0, #136]	; 0x88
   22914:	bx	lr

00022918 <flatcc_builder_get_buffer_end@@Base>:
   22918:	ldr	r0, [r0, #140]	; 0x8c
   2291c:	bx	lr

00022920 <flatcc_builder_set_vtable_cache_limit@@Base>:
   22920:	str	r1, [r0, #172]	; 0xac
   22924:	bx	lr

00022928 <flatcc_builder_set_identifier@@Base>:
   22928:	ldr	r3, [pc, #16]	; 22940 <flatcc_builder_set_identifier@@Base+0x18>
   2292c:	cmp	r1, #0
   22930:	moveq	r1, r3
   22934:	ldr	r3, [r1]
   22938:	str	r3, [r0, #168]	; 0xa8
   2293c:	bx	lr
   22940:	andeq	r0, r3, r4, ror #30

00022944 <flatcc_builder_get_type@@Base>:
   22944:	ldr	r0, [r0, #32]
   22948:	cmp	r0, #0
   2294c:	ldrhne	r0, [r0, #14]
   22950:	bx	lr

00022954 <flatcc_builder_get_type_at@@Base>:
   22954:	cmp	r1, #0
   22958:	ble	22980 <flatcc_builder_get_type_at@@Base+0x2c>
   2295c:	ldr	r3, [r0, #156]	; 0x9c
   22960:	cmp	r3, r1
   22964:	blt	22980 <flatcc_builder_get_type_at@@Base+0x2c>
   22968:	sub	r1, r1, r3
   2296c:	ldr	r3, [r0, #32]
   22970:	mov	r2, #36	; 0x24
   22974:	mla	r1, r2, r1, r3
   22978:	ldrh	r0, [r1, #14]
   2297c:	bx	lr
   22980:	mov	r0, #0
   22984:	bx	lr

00022988 <flatcc_builder_get_direct_buffer@@Base>:
   22988:	ldr	r3, [r0, #184]	; 0xb8
   2298c:	cmp	r3, #0
   22990:	beq	229b8 <flatcc_builder_get_direct_buffer@@Base+0x30>
   22994:	ldrd	r2, [r0, #188]	; 0xbc
   22998:	cmp	r2, r3
   2299c:	bne	229b8 <flatcc_builder_get_direct_buffer@@Base+0x30>
   229a0:	cmp	r1, #0
   229a4:	ldrne	r3, [r0, #212]	; 0xd4
   229a8:	strne	r3, [r1]
   229ac:	ldr	r1, [r0, #196]	; 0xc4
   229b0:	mov	r0, r1
   229b4:	bx	lr
   229b8:	cmp	r1, #0
   229bc:	movne	r3, #0
   229c0:	strne	r3, [r1]
   229c4:	movne	r1, r3
   229c8:	b	229b0 <flatcc_builder_get_direct_buffer@@Base+0x28>

000229cc <flatcc_builder_copy_buffer@@Base>:
   229cc:	ldr	r3, [r0, #184]	; 0xb8
   229d0:	cmp	r3, #0
   229d4:	beq	22a00 <flatcc_builder_copy_buffer@@Base+0x34>
   229d8:	push	{r4, lr}
   229dc:	add	r0, r0, #188	; 0xbc
   229e0:	bl	22f74 <flatcc_emitter_copy_buffer@@Base>
   229e4:	cmp	r0, #0
   229e8:	popne	{r4, pc}
   229ec:	ldr	r3, [pc, #20]	; 22a08 <flatcc_builder_copy_buffer@@Base+0x3c>
   229f0:	movw	r2, #1926	; 0x786
   229f4:	ldr	r1, [pc, #16]	; 22a0c <flatcc_builder_copy_buffer@@Base+0x40>
   229f8:	ldr	r0, [pc, #16]	; 22a10 <flatcc_builder_copy_buffer@@Base+0x44>
   229fc:	bl	14620 <__assert_fail@plt>
   22a00:	mov	r0, r3
   22a04:	bx	lr
   22a08:	andeq	r1, r3, r0, lsl r6
   22a0c:	andeq	r1, r3, sl, asr #12
   22a10:	andeq	lr, r2, r4, lsr #10

00022a14 <flatcc_builder_finalize_buffer@@Base>:
   22a14:	push	{r4, r5, r6, lr}
   22a18:	cmp	r1, #0
   22a1c:	mov	r5, r0
   22a20:	ldr	r2, [r0, #136]	; 0x88
   22a24:	ldr	r4, [r0, #140]	; 0x8c
   22a28:	sub	r4, r4, r2
   22a2c:	mov	r0, r4
   22a30:	strne	r4, [r1]
   22a34:	bl	14578 <malloc@plt>
   22a38:	subs	r6, r0, #0
   22a3c:	ldreq	r3, [pc, #56]	; 22a7c <flatcc_builder_finalize_buffer@@Base+0x68>
   22a40:	movweq	r2, #1944	; 0x798
   22a44:	beq	22a68 <flatcc_builder_finalize_buffer@@Base+0x54>
   22a48:	mov	r2, r4
   22a4c:	mov	r1, r6
   22a50:	mov	r0, r5
   22a54:	bl	229cc <flatcc_builder_copy_buffer@@Base>
   22a58:	cmp	r0, #0
   22a5c:	bne	22a74 <flatcc_builder_finalize_buffer@@Base+0x60>
   22a60:	ldr	r3, [pc, #20]	; 22a7c <flatcc_builder_finalize_buffer@@Base+0x68>
   22a64:	movw	r2, #1948	; 0x79c
   22a68:	ldr	r1, [pc, #16]	; 22a80 <flatcc_builder_finalize_buffer@@Base+0x6c>
   22a6c:	ldr	r0, [pc, #16]	; 22a84 <flatcc_builder_finalize_buffer@@Base+0x70>
   22a70:	bl	14620 <__assert_fail@plt>
   22a74:	mov	r0, r6
   22a78:	pop	{r4, r5, r6, pc}
   22a7c:	andeq	r1, r3, fp, lsr #12
   22a80:	andeq	r1, r3, sl, asr #12
   22a84:			; <UNDEFINED> instruction: 0x000316b7

00022a88 <flatcc_builder_finalize_aligned_buffer@@Base>:
   22a88:	push	{r4, r5, r6, r7, r8, lr}
   22a8c:	mov	r6, r0
   22a90:	subs	r7, r1, #0
   22a94:	ldr	r2, [r0, #136]	; 0x88
   22a98:	ldr	r4, [r0, #140]	; 0x8c
   22a9c:	ldrh	r0, [r0, #128]	; 0x80
   22aa0:	sub	r2, r4, r2
   22aa4:	sub	r4, r0, #1
   22aa8:	strne	r2, [r7]
   22aac:	add	r4, r4, r2
   22ab0:	rsb	r2, r0, #0
   22ab4:	and	r4, r4, r2
   22ab8:	mov	r1, r4
   22abc:	bl	1fedc <union_vector_tests@@Base+0x2b8>
   22ac0:	subs	r5, r0, #0
   22ac4:	beq	22aec <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   22ac8:	mov	r2, r4
   22acc:	mov	r1, r5
   22ad0:	mov	r0, r6
   22ad4:	bl	229cc <flatcc_builder_copy_buffer@@Base>
   22ad8:	subs	r4, r0, #0
   22adc:	bne	22aec <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   22ae0:	mov	r0, r5
   22ae4:	mov	r5, r4
   22ae8:	bl	1453c <free@plt>
   22aec:	adds	r3, r7, #0
   22af0:	mov	r0, r5
   22af4:	movne	r3, #1
   22af8:	cmp	r5, #0
   22afc:	movne	r3, #0
   22b00:	cmp	r3, #0
   22b04:	movne	r3, #0
   22b08:	strne	r3, [r7]
   22b0c:	pop	{r4, r5, r6, r7, r8, pc}

00022b10 <flatcc_builder_aligned_alloc@@Base>:
   22b10:	b	1fedc <union_vector_tests@@Base+0x2b8>

00022b14 <flatcc_builder_aligned_free@@Base>:
   22b14:	b	1453c <free@plt>

00022b18 <flatcc_builder_get_emit_context@@Base>:
   22b18:	ldr	r0, [r0, #36]	; 0x24
   22b1c:	bx	lr

00022b20 <flatcc_emitter_recycle_page@@Base>:
   22b20:	ldr	r3, [r0]
   22b24:	cmp	r3, r1
   22b28:	beq	22b68 <flatcc_emitter_recycle_page@@Base+0x48>
   22b2c:	ldr	r2, [r0, #4]
   22b30:	cmp	r2, r1
   22b34:	beq	22b68 <flatcc_emitter_recycle_page@@Base+0x48>
   22b38:	ldr	r0, [r1, #2944]	; 0xb80
   22b3c:	ldr	r2, [r1, #2948]	; 0xb84
   22b40:	str	r2, [r0, #2948]	; 0xb84
   22b44:	str	r0, [r2, #2944]	; 0xb80
   22b48:	mov	r0, #0
   22b4c:	ldr	r2, [r3, #2948]	; 0xb84
   22b50:	str	r3, [r1, #2944]	; 0xb80
   22b54:	str	r2, [r1, #2948]	; 0xb84
   22b58:	str	r1, [r2, #2944]	; 0xb80
   22b5c:	ldr	r3, [r1, #2944]	; 0xb80
   22b60:	str	r1, [r3, #2948]	; 0xb84
   22b64:	bx	lr
   22b68:	mvn	r0, #0
   22b6c:	bx	lr

00022b70 <flatcc_emitter_reset@@Base>:
   22b70:	ldr	r3, [r0]
   22b74:	cmp	r3, #0
   22b78:	bxeq	lr
   22b7c:	add	r2, r3, #1472	; 0x5c0
   22b80:	push	{r4, lr}
   22b84:	mov	r4, r0
   22b88:	str	r3, [r0, #4]
   22b8c:	str	r2, [r0, #8]
   22b90:	str	r2, [r0, #16]
   22b94:	mov	r2, #1472	; 0x5c0
   22b98:	str	r2, [r0, #12]
   22b9c:	str	r2, [r0, #20]
   22ba0:	sub	r2, r2, #2944	; 0xb80
   22ba4:	str	r2, [r3, #2952]	; 0xb88
   22ba8:	ldr	r3, [r0, #24]
   22bac:	ldr	r2, [r0, #32]
   22bb0:	cmp	r2, #0
   22bb4:	streq	r3, [r0, #32]
   22bb8:	lsr	r3, r3, #2
   22bbc:	ldr	r2, [r0, #32]
   22bc0:	add	r2, r2, r2, lsl #1
   22bc4:	add	r3, r3, r2, lsr #2
   22bc8:	str	r3, [r0, #32]
   22bcc:	mov	r3, #0
   22bd0:	str	r3, [r0, #24]
   22bd4:	ldr	r3, [r4, #28]
   22bd8:	ldr	r2, [r4, #32]
   22bdc:	cmp	r3, r2, lsl #1
   22be0:	popls	{r4, pc}
   22be4:	ldrd	r2, [r4]
   22be8:	ldr	r0, [r3, #2944]	; 0xb80
   22bec:	cmp	r0, r2
   22bf0:	popeq	{r4, pc}
   22bf4:	ldr	r2, [r0, #2944]	; 0xb80
   22bf8:	str	r2, [r3, #2944]	; 0xb80
   22bfc:	ldr	r2, [r0, #2944]	; 0xb80
   22c00:	str	r3, [r2, #2948]	; 0xb84
   22c04:	bl	1453c <free@plt>
   22c08:	ldr	r3, [r4, #28]
   22c0c:	sub	r3, r3, #2944	; 0xb80
   22c10:	str	r3, [r4, #28]
   22c14:	b	22bd4 <flatcc_emitter_reset@@Base+0x64>

00022c18 <flatcc_emitter_clear@@Base>:
   22c18:	ldr	r3, [r0]
   22c1c:	cmp	r3, #0
   22c20:	bxeq	lr
   22c24:	push	{r4, r5, r6, lr}
   22c28:	mov	r1, #0
   22c2c:	mov	r4, r0
   22c30:	ldr	r2, [r3, #2948]	; 0xb84
   22c34:	str	r1, [r2, #2944]	; 0xb80
   22c38:	ldr	r5, [r3, #2944]	; 0xb80
   22c3c:	cmp	r5, #0
   22c40:	bne	22c60 <flatcc_emitter_clear@@Base+0x48>
   22c44:	mov	r0, r3
   22c48:	bl	1453c <free@plt>
   22c4c:	mov	r1, r5
   22c50:	mov	r0, r4
   22c54:	pop	{r4, r5, r6, lr}
   22c58:	mov	r2, #36	; 0x24
   22c5c:	b	145c0 <memset@plt>
   22c60:	ldr	r0, [r5, #2948]	; 0xb84
   22c64:	bl	1453c <free@plt>
   22c68:	mov	r3, r5
   22c6c:	b	22c38 <flatcc_emitter_clear@@Base+0x20>

00022c70 <flatcc_emitter@@Base>:
   22c70:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c74:	mov	r4, r0
   22c78:	mov	r6, r2
   22c7c:	cmp	r3, #0
   22c80:	ldr	r0, [r0, #24]
   22c84:	ldr	r2, [sp, #40]	; 0x28
   22c88:	add	r0, r0, r2
   22c8c:	str	r0, [r4, #24]
   22c90:	bge	22e28 <flatcc_emitter@@Base+0x1b8>
   22c94:	ldr	r0, [r4, #12]
   22c98:	cmp	r0, r2
   22c9c:	bcc	22ce0 <flatcc_emitter@@Base+0x70>
   22ca0:	ldr	r3, [r4, #8]
   22ca4:	sub	r3, r3, r2
   22ca8:	sub	r2, r0, r2
   22cac:	str	r3, [r4, #8]
   22cb0:	str	r2, [r4, #12]
   22cb4:	mov	r4, r1
   22cb8:	sub	r6, r6, #1
   22cbc:	add	r4, r4, #8
   22cc0:	cmn	r6, #1
   22cc4:	beq	22cf4 <flatcc_emitter@@Base+0x84>
   22cc8:	mov	r0, r3
   22ccc:	ldmdb	r4, {r1, r2}
   22cd0:	bl	14548 <memcpy@plt>
   22cd4:	ldr	r2, [r4, #-4]
   22cd8:	add	r3, r0, r2
   22cdc:	b	22cb8 <flatcc_emitter@@Base+0x48>
   22ce0:	ldr	r9, [pc, #648]	; 22f70 <flatcc_emitter@@Base+0x300>
   22ce4:	add	r5, r1, r6, lsl #3
   22ce8:	mov	r8, #2944	; 0xb80
   22cec:	cmp	r6, #0
   22cf0:	bne	22cfc <flatcc_emitter@@Base+0x8c>
   22cf4:	mov	r0, #0
   22cf8:	b	22d94 <flatcc_emitter@@Base+0x124>
   22cfc:	ldr	sl, [r5, #-8]
   22d00:	ldr	r7, [r5, #-4]
   22d04:	add	sl, sl, r7
   22d08:	cmp	r7, #0
   22d0c:	subeq	r5, r5, #8
   22d10:	subeq	r6, r6, #1
   22d14:	beq	22cec <flatcc_emitter@@Base+0x7c>
   22d18:	ldr	r3, [r4, #12]
   22d1c:	cmp	r3, r7
   22d20:	bcs	22df8 <flatcc_emitter@@Base+0x188>
   22d24:	cmp	r3, #0
   22d28:	movne	r2, r3
   22d2c:	bne	22dfc <flatcc_emitter@@Base+0x18c>
   22d30:	ldr	fp, [r4]
   22d34:	cmp	fp, #0
   22d38:	beq	22d80 <flatcc_emitter@@Base+0x110>
   22d3c:	ldr	r2, [r4, #4]
   22d40:	ldr	r3, [fp, #2948]	; 0xb84
   22d44:	cmp	r3, r2
   22d48:	beq	22d80 <flatcc_emitter@@Base+0x110>
   22d4c:	ldr	r2, [fp, #2952]	; 0xb88
   22d50:	sub	r2, r2, #2944	; 0xb80
   22d54:	str	r2, [r3, #2952]	; 0xb88
   22d58:	str	r3, [r4]
   22d5c:	ldr	r3, [r4]
   22d60:	str	r8, [r4, #12]
   22d64:	add	r2, r3, #2944	; 0xb80
   22d68:	str	r2, [r4, #8]
   22d6c:	ldr	r2, [r3, #2944]	; 0xb80
   22d70:	ldr	r2, [r2, #2952]	; 0xb88
   22d74:	sub	r2, r2, #2944	; 0xb80
   22d78:	str	r2, [r3, #2952]	; 0xb88
   22d7c:	b	22d08 <flatcc_emitter@@Base+0x98>
   22d80:	movw	r0, #2956	; 0xb8c
   22d84:	bl	14578 <malloc@plt>
   22d88:	cmp	r0, #0
   22d8c:	bne	22d9c <flatcc_emitter@@Base+0x12c>
   22d90:	mvn	r0, #0
   22d94:	add	sp, sp, #4
   22d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d9c:	ldr	r3, [r4, #28]
   22da0:	cmp	fp, #0
   22da4:	add	r3, r3, #2944	; 0xb80
   22da8:	str	r3, [r4, #28]
   22dac:	beq	22dcc <flatcc_emitter@@Base+0x15c>
   22db0:	ldr	r3, [r4, #4]
   22db4:	str	fp, [r0, #2944]	; 0xb80
   22db8:	str	r3, [r0, #2948]	; 0xb84
   22dbc:	str	r0, [fp, #2948]	; 0xb84
   22dc0:	str	r0, [r3, #2944]	; 0xb80
   22dc4:	str	r0, [r4]
   22dc8:	b	22d5c <flatcc_emitter@@Base+0xec>
   22dcc:	add	r3, r0, #1472	; 0x5c0
   22dd0:	str	r0, [r4]
   22dd4:	str	r0, [r0, #2944]	; 0xb80
   22dd8:	stmib	r4, {r0, r3}
   22ddc:	str	r3, [r4, #16]
   22de0:	mov	r3, #1472	; 0x5c0
   22de4:	str	r0, [r0, #2948]	; 0xb84
   22de8:	str	r3, [r4, #12]
   22dec:	str	r3, [r4, #20]
   22df0:	str	r9, [r0, #2952]	; 0xb88
   22df4:	b	22d08 <flatcc_emitter@@Base+0x98>
   22df8:	mov	r2, r7
   22dfc:	ldr	r0, [r4, #8]
   22e00:	rsb	r1, r2, #0
   22e04:	sub	r3, r3, r2
   22e08:	add	sl, sl, r1
   22e0c:	sub	r7, r7, r2
   22e10:	str	r3, [r4, #12]
   22e14:	add	r0, r0, r1
   22e18:	mov	r1, sl
   22e1c:	str	r0, [r4, #8]
   22e20:	bl	14548 <memcpy@plt>
   22e24:	b	22d08 <flatcc_emitter@@Base+0x98>
   22e28:	ldr	r0, [r4, #20]
   22e2c:	cmp	r0, r2
   22e30:	bcs	22e64 <flatcc_emitter@@Base+0x1f4>
   22e34:	ldr	sl, [pc, #308]	; 22f70 <flatcc_emitter@@Base+0x300>
   22e38:	add	r5, r1, #8
   22e3c:	mov	r9, #2944	; 0xb80
   22e40:	cmp	r6, #0
   22e44:	beq	22cf4 <flatcc_emitter@@Base+0x84>
   22e48:	ldr	fp, [r5, #-8]
   22e4c:	ldr	r8, [r5, #-4]
   22e50:	cmp	r8, #0
   22e54:	bne	22e7c <flatcc_emitter@@Base+0x20c>
   22e58:	sub	r6, r6, #1
   22e5c:	add	r5, r5, #8
   22e60:	b	22e40 <flatcc_emitter@@Base+0x1d0>
   22e64:	ldr	r3, [r4, #16]
   22e68:	add	ip, r3, r2
   22e6c:	sub	r2, r0, r2
   22e70:	str	ip, [r4, #16]
   22e74:	str	r2, [r4, #20]
   22e78:	b	22cb4 <flatcc_emitter@@Base+0x44>
   22e7c:	ldr	r7, [r4, #20]
   22e80:	cmp	r7, r8
   22e84:	bcs	22f38 <flatcc_emitter@@Base+0x2c8>
   22e88:	cmp	r7, #0
   22e8c:	bne	22f3c <flatcc_emitter@@Base+0x2cc>
   22e90:	ldr	r7, [r4, #4]
   22e94:	cmp	r7, #0
   22e98:	beq	22eb0 <flatcc_emitter@@Base+0x240>
   22e9c:	ldr	r2, [r4]
   22ea0:	ldr	r3, [r7, #2944]	; 0xb80
   22ea4:	cmp	r3, r2
   22ea8:	strne	r3, [r4, #4]
   22eac:	bne	22eec <flatcc_emitter@@Base+0x27c>
   22eb0:	movw	r0, #2956	; 0xb8c
   22eb4:	bl	14578 <malloc@plt>
   22eb8:	cmp	r0, #0
   22ebc:	beq	22d90 <flatcc_emitter@@Base+0x120>
   22ec0:	ldr	r3, [r4, #28]
   22ec4:	cmp	r7, #0
   22ec8:	add	r3, r3, #2944	; 0xb80
   22ecc:	str	r3, [r4, #28]
   22ed0:	beq	22f0c <flatcc_emitter@@Base+0x29c>
   22ed4:	ldr	r3, [r4]
   22ed8:	str	r3, [r0, #2944]	; 0xb80
   22edc:	str	r7, [r0, #2948]	; 0xb84
   22ee0:	str	r0, [r3, #2948]	; 0xb84
   22ee4:	str	r0, [r7, #2944]	; 0xb80
   22ee8:	str	r0, [r4, #4]
   22eec:	ldr	r3, [r4, #4]
   22ef0:	ldr	r2, [r3, #2948]	; 0xb84
   22ef4:	ldr	r2, [r2, #2952]	; 0xb88
   22ef8:	str	r3, [r4, #16]
   22efc:	str	r9, [r4, #20]
   22f00:	add	r2, r2, #2944	; 0xb80
   22f04:	str	r2, [r3, #2952]	; 0xb88
   22f08:	b	22e50 <flatcc_emitter@@Base+0x1e0>
   22f0c:	add	r3, r0, #1472	; 0x5c0
   22f10:	str	r0, [r4]
   22f14:	str	r0, [r0, #2944]	; 0xb80
   22f18:	stmib	r4, {r0, r3}
   22f1c:	str	r3, [r4, #16]
   22f20:	mov	r3, #1472	; 0x5c0
   22f24:	str	r0, [r0, #2948]	; 0xb84
   22f28:	str	r3, [r4, #12]
   22f2c:	str	r3, [r4, #20]
   22f30:	str	sl, [r0, #2952]	; 0xb88
   22f34:	b	22e50 <flatcc_emitter@@Base+0x1e0>
   22f38:	mov	r7, r8
   22f3c:	mov	r2, r7
   22f40:	mov	r1, fp
   22f44:	ldr	r0, [r4, #16]
   22f48:	bl	14548 <memcpy@plt>
   22f4c:	ldr	r3, [r4, #16]
   22f50:	sub	r8, r8, r7
   22f54:	add	fp, fp, r7
   22f58:	add	r3, r3, r7
   22f5c:	str	r3, [r4, #16]
   22f60:	ldr	r3, [r4, #20]
   22f64:	sub	r7, r3, r7
   22f68:	str	r7, [r4, #20]
   22f6c:	b	22e50 <flatcc_emitter@@Base+0x1e0>
   22f70:			; <UNDEFINED> instruction: 0xfffffa40

00022f74 <flatcc_emitter_copy_buffer@@Base>:
   22f74:	ldr	ip, [r0, #24]
   22f78:	push	{r4, r5, r6, lr}
   22f7c:	cmp	ip, r2
   22f80:	movhi	r6, #0
   22f84:	bhi	22fbc <flatcc_emitter_copy_buffer@@Base+0x48>
   22f88:	ldr	r6, [r0]
   22f8c:	cmp	r6, #0
   22f90:	beq	22fbc <flatcc_emitter_copy_buffer@@Base+0x48>
   22f94:	ldr	r2, [r0, #4]
   22f98:	mov	r5, r1
   22f9c:	mov	r4, r0
   22fa0:	ldr	r1, [r0, #8]
   22fa4:	cmp	r6, r2
   22fa8:	bne	22fc4 <flatcc_emitter_copy_buffer@@Base+0x50>
   22fac:	mov	r2, ip
   22fb0:	mov	r0, r5
   22fb4:	mov	r6, r5
   22fb8:	bl	14548 <memcpy@plt>
   22fbc:	mov	r0, r6
   22fc0:	pop	{r4, r5, r6, pc}
   22fc4:	ldr	r3, [r4, #12]
   22fc8:	mov	r0, r5
   22fcc:	rsb	r6, r3, #2944	; 0xb80
   22fd0:	mov	r2, r6
   22fd4:	add	r6, r5, r6
   22fd8:	bl	14548 <memcpy@plt>
   22fdc:	ldr	r2, [r4]
   22fe0:	ldr	r5, [r2, #2944]	; 0xb80
   22fe4:	ldr	r2, [r4, #4]
   22fe8:	cmp	r2, r5
   22fec:	bne	23008 <flatcc_emitter_copy_buffer@@Base+0x94>
   22ff0:	ldr	r2, [r4, #20]
   22ff4:	mov	r1, r5
   22ff8:	mov	r0, r6
   22ffc:	rsb	r2, r2, #2944	; 0xb80
   23000:	bl	14548 <memcpy@plt>
   23004:	b	22fbc <flatcc_emitter_copy_buffer@@Base+0x48>
   23008:	mov	r1, r5
   2300c:	mov	r0, r6
   23010:	mov	r2, #2944	; 0xb80
   23014:	add	r6, r6, #2944	; 0xb80
   23018:	bl	14548 <memcpy@plt>
   2301c:	ldr	r5, [r5, #2944]	; 0xb80
   23020:	b	22fe4 <flatcc_emitter_copy_buffer@@Base+0x70>
   23024:	cmp	r2, #0
   23028:	beq	23070 <flatcc_emitter_copy_buffer@@Base+0xfc>
   2302c:	add	r1, r2, r1
   23030:	cmp	r1, r0
   23034:	bhi	23070 <flatcc_emitter_copy_buffer@@Base+0xfc>
   23038:	adds	r3, r1, r3
   2303c:	bcs	23050 <flatcc_emitter_copy_buffer@@Base+0xdc>
   23040:	cmp	r3, r0
   23044:	bls	23058 <flatcc_emitter_copy_buffer@@Base+0xe4>
   23048:	mov	r0, #9
   2304c:	bx	lr
   23050:	mov	r0, #10
   23054:	bx	lr
   23058:	ldrh	r3, [sp]
   2305c:	sub	r3, r3, #1
   23060:	tst	r3, r1
   23064:	moveq	r0, #0
   23068:	movne	r0, #11
   2306c:	bx	lr
   23070:	mov	r0, #18
   23074:	bx	lr
   23078:	ldrh	r3, [r0, #22]
   2307c:	add	r1, r1, #2
   23080:	lsl	r1, r1, #1
   23084:	uxth	r1, r1
   23088:	cmp	r3, r1
   2308c:	ldrhi	r3, [r0, #12]
   23090:	ldrhhi	r0, [r3, r1]
   23094:	movls	r0, #0
   23098:	bx	lr
   2309c:	push	{r4, lr}
   230a0:	mov	r2, r0
   230a4:	bl	23078 <flatcc_emitter_copy_buffer@@Base+0x104>
   230a8:	uxth	r3, r0
   230ac:	cmp	r3, #0
   230b0:	ldrne	r3, [r2, #16]
   230b4:	uxtahne	r0, r3, r0
   230b8:	ldrne	r3, [r2]
   230bc:	addne	r0, r3, r0
   230c0:	moveq	r0, r3
   230c4:	pop	{r4, pc}
   230c8:	push	{r4, r5, r6, lr}
   230cc:	mov	r4, r3
   230d0:	mov	r5, r0
   230d4:	bl	23078 <flatcc_emitter_copy_buffer@@Base+0x104>
   230d8:	uxth	r3, r0
   230dc:	cmp	r3, #0
   230e0:	bne	230f8 <flatcc_emitter_copy_buffer@@Base+0x184>
   230e4:	cmp	r2, #0
   230e8:	str	r3, [r4]
   230ec:	movne	r2, #4
   230f0:	mov	r0, r2
   230f4:	pop	{r4, r5, r6, pc}
   230f8:	ldrh	r2, [r5, #20]
   230fc:	uxth	r0, r0
   23100:	add	r3, r0, #4
   23104:	cmp	r2, r3
   23108:	movcc	r2, #13
   2310c:	bcc	230f0 <flatcc_emitter_copy_buffer@@Base+0x17c>
   23110:	ldr	r3, [r5, #16]
   23114:	add	r0, r0, r3
   23118:	ands	r2, r0, #3
   2311c:	movne	r2, #12
   23120:	streq	r0, [r4]
   23124:	b	230f0 <flatcc_emitter_copy_buffer@@Base+0x17c>
   23128:	add	r3, r2, r3
   2312c:	ldrh	ip, [sp, #4]
   23130:	cmp	r2, r3
   23134:	bcs	23188 <flatcc_emitter_copy_buffer@@Base+0x214>
   23138:	add	r2, r3, #4
   2313c:	cmp	r1, r2
   23140:	bcc	23188 <flatcc_emitter_copy_buffer@@Base+0x214>
   23144:	cmp	ip, #4
   23148:	movcc	ip, #4
   2314c:	sub	ip, ip, #1
   23150:	orr	ip, ip, #3
   23154:	tst	ip, r2
   23158:	bne	23188 <flatcc_emitter_copy_buffer@@Base+0x214>
   2315c:	ldr	r3, [r0, r3]
   23160:	ldr	r0, [sp, #8]
   23164:	cmp	r3, r0
   23168:	bhi	23190 <flatcc_emitter_copy_buffer@@Base+0x21c>
   2316c:	ldr	r0, [sp]
   23170:	sub	r1, r1, r2
   23174:	mul	r0, r0, r3
   23178:	cmp	r1, r0
   2317c:	movcc	r0, #26
   23180:	movcs	r0, #0
   23184:	bx	lr
   23188:	mov	r0, #16
   2318c:	bx	lr
   23190:	mov	r0, #25
   23194:	bx	lr
   23198:	push	{r4, lr}
   2319c:	sub	sp, sp, #24
   231a0:	ldr	ip, [sp, #32]
   231a4:	sub	ip, ip, #1
   231a8:	cmp	ip, #0
   231ac:	moveq	r0, #3
   231b0:	str	ip, [sp, #8]
   231b4:	beq	23258 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   231b8:	add	r3, r2, r3
   231bc:	cmp	r2, r3
   231c0:	bcs	23260 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   231c4:	add	r2, r3, #4
   231c8:	cmp	r1, r2
   231cc:	bcc	23260 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   231d0:	tst	r3, #3
   231d4:	bne	23260 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   231d8:	ldr	r2, [r0, r3]
   231dc:	str	r3, [sp, #16]
   231e0:	subs	r2, r3, r2
   231e4:	bmi	23268 <flatcc_emitter_copy_buffer@@Base+0x2f4>
   231e8:	tst	r2, #1
   231ec:	bne	23268 <flatcc_emitter_copy_buffer@@Base+0x2f4>
   231f0:	add	lr, r2, #2
   231f4:	cmp	lr, r1
   231f8:	movhi	r0, #27
   231fc:	bhi	23258 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23200:	ldrh	ip, [r0, r2]
   23204:	add	r4, r0, r2
   23208:	add	r2, ip, r2
   2320c:	strh	ip, [sp, #22]
   23210:	cmp	r1, r2
   23214:	bcc	23270 <flatcc_emitter_copy_buffer@@Base+0x2fc>
   23218:	tst	ip, #1
   2321c:	bne	23270 <flatcc_emitter_copy_buffer@@Base+0x2fc>
   23220:	cmp	ip, #3
   23224:	movls	r0, #28
   23228:	bls	23258 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   2322c:	ldrh	r2, [r0, lr]
   23230:	sub	r3, r1, r3
   23234:	cmp	r3, r2
   23238:	strh	r2, [sp, #20]
   2323c:	movcc	r0, #20
   23240:	bcc	23258 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23244:	strd	r0, [sp]
   23248:	mov	r0, sp
   2324c:	ldr	r3, [sp, #36]	; 0x24
   23250:	str	r4, [sp, #12]
   23254:	blx	r3
   23258:	add	sp, sp, #24
   2325c:	pop	{r4, pc}
   23260:	mov	r0, #15
   23264:	b	23258 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23268:	mov	r0, #29
   2326c:	b	23258 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23270:	mov	r0, #30
   23274:	b	23258 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   23278:	add	r3, r2, r3
   2327c:	cmp	r2, r3
   23280:	bcs	232c4 <flatcc_emitter_copy_buffer@@Base+0x350>
   23284:	add	r2, r3, #4
   23288:	cmp	r1, r2
   2328c:	bcc	232c4 <flatcc_emitter_copy_buffer@@Base+0x350>
   23290:	tst	r3, #3
   23294:	bne	232c4 <flatcc_emitter_copy_buffer@@Base+0x350>
   23298:	ldr	r3, [r0, r3]
   2329c:	sub	r1, r1, r2
   232a0:	add	ip, r3, #1
   232a4:	cmp	r1, ip
   232a8:	bcc	232cc <flatcc_emitter_copy_buffer@@Base+0x358>
   232ac:	add	r0, r0, r3
   232b0:	ldrb	r3, [r0, r2]
   232b4:	cmp	r3, #0
   232b8:	moveq	r0, #0
   232bc:	movne	r0, #7
   232c0:	bx	lr
   232c4:	mov	r0, #17
   232c8:	bx	lr
   232cc:	mov	r0, #8
   232d0:	bx	lr

000232d4 <flatcc_verify_error_string@@Base>:
   232d4:	cmp	r0, #36	; 0x24
   232d8:	ldrls	r3, [pc, #8]	; 232e8 <flatcc_verify_error_string@@Base+0x14>
   232dc:	ldrls	r0, [r3, r0, lsl #2]
   232e0:	ldrhi	r0, [pc, #4]	; 232ec <flatcc_verify_error_string@@Base+0x18>
   232e4:	bx	lr
   232e8:	andeq	r1, r3, r4, lsr #20
   232ec:			; <UNDEFINED> instruction: 0x00031ab8

000232f0 <flatcc_verify_field@@Base>:
   232f0:	push	{r4, r5, r6, lr}
   232f4:	mov	r5, r0
   232f8:	mov	r4, r3
   232fc:	bl	23078 <flatcc_emitter_copy_buffer@@Base+0x104>
   23300:	uxth	r1, r0
   23304:	cmp	r1, #0
   23308:	beq	23340 <flatcc_verify_field@@Base+0x50>
   2330c:	ldrh	r3, [r5, #20]
   23310:	add	r2, r2, r1
   23314:	cmp	r2, r3
   23318:	bhi	23348 <flatcc_verify_field@@Base+0x58>
   2331c:	ldr	r0, [r5]
   23320:	sub	r4, r4, #1
   23324:	ldr	r3, [r5, #16]
   23328:	add	r0, r0, r3
   2332c:	add	r0, r0, r1
   23330:	tst	r0, r4
   23334:	moveq	r0, #0
   23338:	movne	r0, #12
   2333c:	pop	{r4, r5, r6, pc}
   23340:	mov	r0, r1
   23344:	pop	{r4, r5, r6, pc}
   23348:	mov	r0, #13
   2334c:	pop	{r4, r5, r6, pc}

00023350 <flatcc_verify_string_field@@Base>:
   23350:	push	{r0, r1, r4, lr}
   23354:	add	r3, sp, #4
   23358:	mov	r4, r0
   2335c:	bl	230c8 <flatcc_emitter_copy_buffer@@Base+0x154>
   23360:	cmp	r0, #0
   23364:	bne	23380 <flatcc_verify_string_field@@Base+0x30>
   23368:	ldr	r2, [sp, #4]
   2336c:	cmp	r2, #0
   23370:	beq	23380 <flatcc_verify_string_field@@Base+0x30>
   23374:	ldrd	r0, [r4]
   23378:	ldr	r3, [r0, r2]
   2337c:	bl	23278 <flatcc_emitter_copy_buffer@@Base+0x304>
   23380:	add	sp, sp, #8
   23384:	pop	{r4, pc}

00023388 <flatcc_verify_vector_field@@Base>:
   23388:	push	{r4, r5, lr}
   2338c:	sub	sp, sp, #28
   23390:	mov	r5, r3
   23394:	add	r3, sp, #20
   23398:	mov	r4, r0
   2339c:	bl	230c8 <flatcc_emitter_copy_buffer@@Base+0x154>
   233a0:	cmp	r0, #0
   233a4:	bne	233d4 <flatcc_verify_vector_field@@Base+0x4c>
   233a8:	ldr	r2, [sp, #20]
   233ac:	cmp	r2, #0
   233b0:	beq	233d4 <flatcc_verify_vector_field@@Base+0x4c>
   233b4:	ldr	r3, [sp, #44]	; 0x2c
   233b8:	ldrd	r0, [r4]
   233bc:	str	r5, [sp]
   233c0:	str	r3, [sp, #8]
   233c4:	ldrh	r3, [sp, #40]	; 0x28
   233c8:	str	r3, [sp, #4]
   233cc:	ldr	r3, [r0, r2]
   233d0:	bl	23128 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   233d4:	add	sp, sp, #28
   233d8:	pop	{r4, r5, pc}

000233dc <flatcc_verify_string_vector_field@@Base>:
   233dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   233e0:	sub	sp, sp, #28
   233e4:	mov	r7, r0
   233e8:	add	r3, sp, #20
   233ec:	bl	230c8 <flatcc_emitter_copy_buffer@@Base+0x154>
   233f0:	subs	r6, r0, #0
   233f4:	bne	23454 <flatcc_verify_string_vector_field@@Base+0x78>
   233f8:	ldr	r4, [sp, #20]
   233fc:	cmp	r4, #0
   23400:	beq	23454 <flatcc_verify_string_vector_field@@Base+0x78>
   23404:	ldm	r7, {r5, r8}
   23408:	mvn	r3, #-1073741824	; 0xc0000000
   2340c:	mov	r2, r4
   23410:	ldr	r7, [r5, r4]
   23414:	mov	r1, r8
   23418:	mov	r0, r5
   2341c:	str	r3, [sp, #8]
   23420:	mov	r3, #4
   23424:	str	r3, [sp]
   23428:	str	r3, [sp, #4]
   2342c:	mov	r3, r7
   23430:	bl	23128 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   23434:	subs	r6, r0, #0
   23438:	bne	23454 <flatcc_verify_string_vector_field@@Base+0x78>
   2343c:	add	r4, r4, r7
   23440:	mov	r7, r6
   23444:	ldr	r9, [r5, r4]
   23448:	add	r4, r4, #4
   2344c:	cmp	r9, r7
   23450:	bne	23460 <flatcc_verify_string_vector_field@@Base+0x84>
   23454:	mov	r0, r6
   23458:	add	sp, sp, #28
   2345c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23460:	mov	r2, r4
   23464:	mov	r1, r8
   23468:	ldr	r3, [r5, r4]
   2346c:	mov	r0, r5
   23470:	bl	23278 <flatcc_emitter_copy_buffer@@Base+0x304>
   23474:	cmp	r0, #0
   23478:	addeq	r7, r7, #1
   2347c:	addeq	r4, r4, #4
   23480:	beq	2344c <flatcc_verify_string_vector_field@@Base+0x70>
   23484:	mov	r6, r0
   23488:	b	23454 <flatcc_verify_string_vector_field@@Base+0x78>

0002348c <flatcc_verify_table_field@@Base>:
   2348c:	push	{r4, r5, lr}
   23490:	sub	sp, sp, #20
   23494:	mov	r5, r3
   23498:	add	r3, sp, #12
   2349c:	mov	r4, r0
   234a0:	bl	230c8 <flatcc_emitter_copy_buffer@@Base+0x154>
   234a4:	cmp	r0, #0
   234a8:	bne	234cc <flatcc_verify_table_field@@Base+0x40>
   234ac:	ldr	r2, [sp, #12]
   234b0:	cmp	r2, #0
   234b4:	beq	234cc <flatcc_verify_table_field@@Base+0x40>
   234b8:	ldrd	r0, [r4]
   234bc:	ldr	r3, [r4, #8]
   234c0:	stm	sp, {r3, r5}
   234c4:	ldr	r3, [r0, r2]
   234c8:	bl	23198 <flatcc_emitter_copy_buffer@@Base+0x224>
   234cc:	add	sp, sp, #20
   234d0:	pop	{r4, r5, pc}

000234d4 <flatcc_verify_table_vector_field@@Base>:
   234d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234d8:	sub	sp, sp, #36	; 0x24
   234dc:	mov	sl, r3
   234e0:	add	r3, sp, #28
   234e4:	mov	r7, r0
   234e8:	bl	230c8 <flatcc_emitter_copy_buffer@@Base+0x154>
   234ec:	subs	r6, r0, #0
   234f0:	bne	2356c <flatcc_verify_table_vector_field@@Base+0x98>
   234f4:	ldr	r4, [sp, #28]
   234f8:	cmp	r4, #0
   234fc:	beq	2356c <flatcc_verify_table_vector_field@@Base+0x98>
   23500:	ldm	r7, {r5, r9}
   23504:	ldr	r7, [r7, #8]
   23508:	ldr	r8, [r5, r4]
   2350c:	cmp	r7, #0
   23510:	movle	r6, #3
   23514:	ble	2356c <flatcc_verify_table_vector_field@@Base+0x98>
   23518:	mvn	r3, #-1073741824	; 0xc0000000
   2351c:	mov	r2, r4
   23520:	mov	r1, r9
   23524:	mov	r0, r5
   23528:	str	r3, [sp, #8]
   2352c:	mov	r3, #4
   23530:	str	r3, [sp]
   23534:	str	r3, [sp, #4]
   23538:	mov	r3, r8
   2353c:	bl	23128 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   23540:	cmp	r0, #0
   23544:	bne	235b4 <flatcc_verify_table_vector_field@@Base+0xe0>
   23548:	add	r4, r4, r8
   2354c:	sub	r7, r7, #1
   23550:	ldr	r3, [r5, r4]
   23554:	mov	r8, r6
   23558:	add	r4, r4, #4
   2355c:	str	r3, [sp, #20]
   23560:	ldr	r3, [sp, #20]
   23564:	cmp	r3, r8
   23568:	bne	23578 <flatcc_verify_table_vector_field@@Base+0xa4>
   2356c:	mov	r0, r6
   23570:	add	sp, sp, #36	; 0x24
   23574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23578:	mov	r2, r4
   2357c:	mov	r1, r9
   23580:	stm	sp, {r7, sl}
   23584:	mov	r0, r5
   23588:	ldr	r3, [r5, r4]
   2358c:	add	fp, r5, r4
   23590:	bl	23198 <flatcc_emitter_copy_buffer@@Base+0x224>
   23594:	cmp	r0, #0
   23598:	beq	235bc <flatcc_verify_table_vector_field@@Base+0xe8>
   2359c:	mov	r2, r4
   235a0:	mov	r1, r9
   235a4:	stm	sp, {r7, sl}
   235a8:	mov	r0, r5
   235ac:	ldr	r3, [fp]
   235b0:	bl	23198 <flatcc_emitter_copy_buffer@@Base+0x224>
   235b4:	mov	r6, r0
   235b8:	b	2356c <flatcc_verify_table_vector_field@@Base+0x98>
   235bc:	add	r8, r8, #1
   235c0:	add	r4, r4, #4
   235c4:	b	23560 <flatcc_verify_table_vector_field@@Base+0x8c>

000235c8 <flatcc_verify_union_table@@Base>:
   235c8:	push	{r0, r1, r2, lr}
   235cc:	str	r1, [sp, #4]
   235d0:	ldr	r3, [r0, #8]
   235d4:	str	r3, [sp]
   235d8:	ldr	r1, [r0, #4]
   235dc:	ldrd	r2, [r0, #16]
   235e0:	ldr	r0, [r0]
   235e4:	bl	23198 <flatcc_emitter_copy_buffer@@Base+0x224>
   235e8:	add	sp, sp, #12
   235ec:	pop	{pc}		; (ldr pc, [sp], #4)

000235f0 <flatcc_verify_union_struct@@Base>:
   235f0:	push	{r0, r1, r2, lr}
   235f4:	mov	r3, r1
   235f8:	str	r2, [sp]
   235fc:	ldr	r1, [r0, #16]
   23600:	ldr	r2, [r0, #20]
   23604:	ldr	r0, [r0, #4]
   23608:	bl	23024 <flatcc_emitter_copy_buffer@@Base+0xb0>
   2360c:	add	sp, sp, #12
   23610:	pop	{pc}		; (ldr pc, [sp], #4)

00023614 <flatcc_verify_union_string@@Base>:
   23614:	ldr	r1, [r0, #4]
   23618:	ldrd	r2, [r0, #16]
   2361c:	ldr	r0, [r0]
   23620:	b	23278 <flatcc_emitter_copy_buffer@@Base+0x304>

00023624 <flatcc_verify_buffer_header@@Base>:
   23624:	tst	r0, #3
   23628:	push	{r0, r1, r4, lr}
   2362c:	movne	r0, #5
   23630:	bne	23658 <flatcc_verify_buffer_header@@Base+0x34>
   23634:	cmn	r1, #9
   23638:	movhi	r0, #6
   2363c:	bhi	23658 <flatcc_verify_buffer_header@@Base+0x34>
   23640:	cmp	r1, #7
   23644:	movls	r0, #1
   23648:	bls	23658 <flatcc_verify_buffer_header@@Base+0x34>
   2364c:	cmp	r2, #0
   23650:	bne	23660 <flatcc_verify_buffer_header@@Base+0x3c>
   23654:	mov	r0, #0
   23658:	add	sp, sp, #8
   2365c:	pop	{r4, pc}
   23660:	mov	r1, r2
   23664:	mov	r2, #4
   23668:	mov	r4, r0
   2366c:	add	r0, sp, r2
   23670:	bl	145cc <strncpy@plt>
   23674:	ldr	r2, [r4, #4]
   23678:	ldr	r3, [sp, #4]
   2367c:	cmp	r3, #0
   23680:	cmpne	r2, r3
   23684:	movne	r0, #2
   23688:	beq	23654 <flatcc_verify_buffer_header@@Base+0x30>
   2368c:	b	23658 <flatcc_verify_buffer_header@@Base+0x34>

00023690 <flatcc_verify_typed_buffer_header@@Base>:
   23690:	tst	r0, #3
   23694:	bne	236c4 <flatcc_verify_typed_buffer_header@@Base+0x34>
   23698:	cmn	r1, #9
   2369c:	bhi	236cc <flatcc_verify_typed_buffer_header@@Base+0x3c>
   236a0:	cmp	r1, #7
   236a4:	bls	236d4 <flatcc_verify_typed_buffer_header@@Base+0x44>
   236a8:	cmp	r2, #0
   236ac:	beq	236dc <flatcc_verify_typed_buffer_header@@Base+0x4c>
   236b0:	ldr	r0, [r0, #4]
   236b4:	cmp	r2, r0
   236b8:	movne	r0, #2
   236bc:	moveq	r0, #0
   236c0:	bx	lr
   236c4:	mov	r0, #5
   236c8:	bx	lr
   236cc:	mov	r0, #6
   236d0:	bx	lr
   236d4:	mov	r0, #1
   236d8:	bx	lr
   236dc:	mov	r0, r2
   236e0:	bx	lr

000236e4 <flatcc_verify_struct_as_root@@Base>:
   236e4:	push	{r4, r5, r6, r7, r8, lr}
   236e8:	mov	r4, r1
   236ec:	mov	r5, r0
   236f0:	mov	r8, r2
   236f4:	mov	r6, r3
   236f8:	ldrh	r7, [sp, #24]
   236fc:	bl	23624 <flatcc_verify_buffer_header@@Base>
   23700:	subs	r1, r0, #0
   23704:	beq	2371c <flatcc_verify_struct_as_root@@Base+0x38>
   23708:	mov	r2, r8
   2370c:	mov	r1, r4
   23710:	mov	r0, r5
   23714:	pop	{r4, r5, r6, r7, r8, lr}
   23718:	b	23624 <flatcc_verify_buffer_header@@Base>
   2371c:	mov	r3, r6
   23720:	mov	r0, r4
   23724:	ldr	r2, [r5]
   23728:	str	r7, [sp, #24]
   2372c:	pop	{r4, r5, r6, r7, r8, lr}
   23730:	b	23024 <flatcc_emitter_copy_buffer@@Base+0xb0>

00023734 <flatcc_verify_struct_as_typed_root@@Base>:
   23734:	push	{r4, r5, r6, lr}
   23738:	mov	r4, r1
   2373c:	mov	r5, r0
   23740:	bl	23690 <flatcc_verify_typed_buffer_header@@Base>
   23744:	subs	r1, r0, #0
   23748:	ldrh	r6, [sp, #16]
   2374c:	popne	{r4, r5, r6, pc}
   23750:	mov	r0, r4
   23754:	ldr	r2, [r5]
   23758:	str	r6, [sp, #16]
   2375c:	pop	{r4, r5, r6, lr}
   23760:	b	23024 <flatcc_emitter_copy_buffer@@Base+0xb0>

00023764 <flatcc_verify_table_as_root@@Base>:
   23764:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23768:	mov	r7, r2
   2376c:	mov	r4, r0
   23770:	mov	r5, r1
   23774:	mov	r6, r3
   23778:	bl	23624 <flatcc_verify_buffer_header@@Base>
   2377c:	subs	r2, r0, #0
   23780:	beq	2379c <flatcc_verify_table_as_root@@Base+0x38>
   23784:	mov	r2, r7
   23788:	mov	r1, r5
   2378c:	mov	r0, r4
   23790:	add	sp, sp, #12
   23794:	pop	{r4, r5, r6, r7, lr}
   23798:	b	23624 <flatcc_verify_buffer_header@@Base>
   2379c:	mov	r3, #100	; 0x64
   237a0:	mov	r1, r5
   237a4:	mov	r0, r4
   237a8:	stm	sp, {r3, r6}
   237ac:	ldr	r3, [r4]
   237b0:	bl	23198 <flatcc_emitter_copy_buffer@@Base+0x224>
   237b4:	add	sp, sp, #12
   237b8:	pop	{r4, r5, r6, r7, pc}

000237bc <flatcc_verify_table_as_typed_root@@Base>:
   237bc:	push	{r0, r1, r2, r4, r5, lr}
   237c0:	mov	r4, r0
   237c4:	bl	23690 <flatcc_verify_typed_buffer_header@@Base>
   237c8:	cmp	r0, #0
   237cc:	bne	237ec <flatcc_verify_table_as_typed_root@@Base+0x30>
   237d0:	str	r3, [sp, #4]
   237d4:	mov	r3, #100	; 0x64
   237d8:	mov	r2, r0
   237dc:	mov	r0, r4
   237e0:	str	r3, [sp]
   237e4:	ldr	r3, [r4]
   237e8:	bl	23198 <flatcc_emitter_copy_buffer@@Base+0x224>
   237ec:	add	sp, sp, #12
   237f0:	pop	{r4, r5, pc}

000237f4 <flatcc_verify_struct_as_nested_root@@Base>:
   237f4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237f8:	mvn	sl, #0
   237fc:	mov	r7, #1
   23800:	mov	r8, r3
   23804:	mov	r5, r0
   23808:	mov	r6, r1
   2380c:	mov	fp, r2
   23810:	ldrh	r4, [sp, #52]	; 0x34
   23814:	stm	sp, {r7, sl}
   23818:	ldr	r9, [sp, #48]	; 0x30
   2381c:	mov	r3, r4
   23820:	bl	23388 <flatcc_verify_vector_field@@Base>
   23824:	cmp	r0, #0
   23828:	beq	23850 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   2382c:	mov	r3, r4
   23830:	mov	r2, fp
   23834:	str	r7, [sp, #48]	; 0x30
   23838:	mov	r1, r6
   2383c:	mov	r0, r5
   23840:	str	sl, [sp, #52]	; 0x34
   23844:	add	sp, sp, #12
   23848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2384c:	b	23388 <flatcc_verify_vector_field@@Base>
   23850:	mov	r1, r6
   23854:	mov	r0, r5
   23858:	bl	2309c <flatcc_emitter_copy_buffer@@Base+0x128>
   2385c:	subs	r1, r0, #0
   23860:	beq	2388c <flatcc_verify_struct_as_nested_root@@Base+0x98>
   23864:	ldr	ip, [r1]
   23868:	mov	r3, r9
   2386c:	mov	r2, r8
   23870:	str	r4, [sp, #48]	; 0x30
   23874:	add	r0, r1, ip
   23878:	ldr	r1, [r1, ip]
   2387c:	add	r0, r0, #4
   23880:	add	sp, sp, #12
   23884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23888:	b	236e4 <flatcc_verify_struct_as_root@@Base>
   2388c:	add	sp, sp, #12
   23890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023894 <flatcc_verify_table_as_nested_root@@Base>:
   23894:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23898:	mvn	sl, #0
   2389c:	mov	r7, #1
   238a0:	mov	r8, r3
   238a4:	mov	r6, r0
   238a8:	mov	r4, r1
   238ac:	mov	fp, r2
   238b0:	ldrh	r5, [sp, #48]	; 0x30
   238b4:	stm	sp, {r7, sl}
   238b8:	ldr	r9, [sp, #52]	; 0x34
   238bc:	mov	r3, r5
   238c0:	bl	23388 <flatcc_verify_vector_field@@Base>
   238c4:	cmp	r0, #0
   238c8:	beq	238f0 <flatcc_verify_table_as_nested_root@@Base+0x5c>
   238cc:	mov	r3, r5
   238d0:	mov	r2, fp
   238d4:	str	r7, [sp, #48]	; 0x30
   238d8:	mov	r1, r4
   238dc:	mov	r0, r6
   238e0:	str	sl, [sp, #52]	; 0x34
   238e4:	add	sp, sp, #12
   238e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238ec:	b	23388 <flatcc_verify_vector_field@@Base>
   238f0:	mov	r1, r4
   238f4:	mov	r0, r6
   238f8:	bl	2309c <flatcc_emitter_copy_buffer@@Base+0x128>
   238fc:	subs	r3, r0, #0
   23900:	beq	23968 <flatcc_verify_table_as_nested_root@@Base+0xd4>
   23904:	ldr	r2, [r3]
   23908:	ldr	r5, [r3, r2]
   2390c:	add	r7, r3, r2
   23910:	mov	r2, r8
   23914:	add	r4, r7, #4
   23918:	mov	r0, r4
   2391c:	mov	r1, r5
   23920:	bl	23624 <flatcc_verify_buffer_header@@Base>
   23924:	subs	r2, r0, #0
   23928:	beq	23944 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   2392c:	mov	r2, r8
   23930:	mov	r1, r5
   23934:	mov	r0, r4
   23938:	add	sp, sp, #12
   2393c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23940:	b	23624 <flatcc_verify_buffer_header@@Base>
   23944:	ldr	r3, [r6, #8]
   23948:	mov	r1, r5
   2394c:	mov	r0, r4
   23950:	str	r3, [sp, #48]	; 0x30
   23954:	str	r9, [sp, #52]	; 0x34
   23958:	ldr	r3, [r7, #4]
   2395c:	add	sp, sp, #12
   23960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23964:	b	23198 <flatcc_emitter_copy_buffer@@Base+0x224>
   23968:	add	sp, sp, #12
   2396c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023970 <flatcc_verify_union_field@@Base>:
   23970:	push	{r4, r5, r6, r7, r8, lr}
   23974:	mov	r6, r1
   23978:	sub	r1, r1, #1
   2397c:	sub	sp, sp, #32
   23980:	uxth	r1, r1
   23984:	mov	r7, r3
   23988:	mov	r4, r0
   2398c:	bl	23078 <flatcc_emitter_copy_buffer@@Base+0x104>
   23990:	uxth	r3, r0
   23994:	cmp	r3, #0
   23998:	bne	239d0 <flatcc_verify_union_field@@Base+0x60>
   2399c:	mov	r1, r6
   239a0:	mov	r0, r4
   239a4:	bl	23078 <flatcc_emitter_copy_buffer@@Base+0x104>
   239a8:	uxth	r0, r0
   239ac:	cmp	r0, #0
   239b0:	movne	r0, #23
   239b4:	bne	239c8 <flatcc_verify_union_field@@Base+0x58>
   239b8:	cmp	r2, #0
   239bc:	movne	r0, #21
   239c0:	bne	239c8 <flatcc_verify_union_field@@Base+0x58>
   239c4:	mov	r0, #0
   239c8:	add	sp, sp, #32
   239cc:	pop	{r4, r5, r6, r7, r8, pc}
   239d0:	ldrh	r3, [r4, #20]
   239d4:	uxth	r5, r0
   239d8:	add	r1, r5, #1
   239dc:	cmp	r1, r3
   239e0:	movhi	r0, #13
   239e4:	bhi	239c8 <flatcc_verify_union_field@@Base+0x58>
   239e8:	ldr	r8, [r4]
   239ec:	ldr	r0, [r4, #16]
   239f0:	add	r5, r5, r0
   239f4:	ldrb	r3, [r8, r5]
   239f8:	cmp	r3, #0
   239fc:	bne	23a20 <flatcc_verify_union_field@@Base+0xb0>
   23a00:	mov	r1, r6
   23a04:	mov	r0, r4
   23a08:	bl	23078 <flatcc_emitter_copy_buffer@@Base+0x104>
   23a0c:	uxth	r0, r0
   23a10:	cmp	r0, #0
   23a14:	movne	r0, #24
   23a18:	beq	239c4 <flatcc_verify_union_field@@Base+0x54>
   23a1c:	b	239c8 <flatcc_verify_union_field@@Base+0x58>
   23a20:	add	r3, sp, #4
   23a24:	mov	r1, r6
   23a28:	mov	r0, r4
   23a2c:	bl	230c8 <flatcc_emitter_copy_buffer@@Base+0x154>
   23a30:	cmp	r0, #0
   23a34:	bne	239c8 <flatcc_verify_union_field@@Base+0x58>
   23a38:	ldr	r3, [sp, #4]
   23a3c:	cmp	r3, #0
   23a40:	beq	239c4 <flatcc_verify_union_field@@Base+0x54>
   23a44:	ldr	r2, [r4]
   23a48:	add	r0, sp, #8
   23a4c:	ldr	r1, [r4, #4]
   23a50:	str	r3, [sp, #24]
   23a54:	str	r2, [sp, #8]
   23a58:	str	r1, [sp, #12]
   23a5c:	ldr	r1, [r4, #8]
   23a60:	str	r1, [sp, #16]
   23a64:	ldr	r3, [r2, r3]
   23a68:	str	r3, [sp, #28]
   23a6c:	ldrb	r3, [r8, r5]
   23a70:	strb	r3, [sp, #20]
   23a74:	blx	r7
   23a78:	b	239c8 <flatcc_verify_union_field@@Base+0x58>

00023a7c <flatcc_verify_union_vector_field@@Base>:
   23a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a80:	sub	r4, r1, #1
   23a84:	sub	sp, sp, #60	; 0x3c
   23a88:	uxth	r4, r4
   23a8c:	mov	sl, r1
   23a90:	mov	r1, r4
   23a94:	mov	r8, r0
   23a98:	mov	r6, r2
   23a9c:	mov	r9, r3
   23aa0:	bl	23078 <flatcc_emitter_copy_buffer@@Base+0x104>
   23aa4:	uxth	r0, r0
   23aa8:	cmp	r0, #0
   23aac:	bne	23adc <flatcc_verify_union_vector_field@@Base+0x60>
   23ab0:	mov	r1, sl
   23ab4:	mov	r0, r8
   23ab8:	bl	23078 <flatcc_emitter_copy_buffer@@Base+0x104>
   23abc:	adds	r3, r2, #0
   23ac0:	uxth	r0, r0
   23ac4:	movne	r3, #1
   23ac8:	cmp	r0, #0
   23acc:	movne	r3, #0
   23ad0:	cmp	r3, #0
   23ad4:	movne	r3, #22
   23ad8:	bne	23b3c <flatcc_verify_union_vector_field@@Base+0xc0>
   23adc:	mov	r5, #1
   23ae0:	mvn	r7, #0
   23ae4:	mov	r3, r5
   23ae8:	mov	r2, r6
   23aec:	mov	r1, r4
   23af0:	mov	r0, r8
   23af4:	stm	sp, {r5, r7}
   23af8:	bl	23388 <flatcc_verify_vector_field@@Base>
   23afc:	cmp	r0, #0
   23b00:	beq	23b24 <flatcc_verify_union_vector_field@@Base+0xa8>
   23b04:	mov	r3, r5
   23b08:	mov	r2, r6
   23b0c:	stm	sp, {r5, r7}
   23b10:	mov	r1, r4
   23b14:	mov	r0, r8
   23b18:	bl	23388 <flatcc_verify_vector_field@@Base>
   23b1c:	mov	r3, r0
   23b20:	b	23b3c <flatcc_verify_union_vector_field@@Base+0xc0>
   23b24:	mov	r1, r4
   23b28:	mov	r0, r8
   23b2c:	bl	2309c <flatcc_emitter_copy_buffer@@Base+0x128>
   23b30:	cmp	r0, #0
   23b34:	bne	23b48 <flatcc_verify_union_vector_field@@Base+0xcc>
   23b38:	mov	r3, #0
   23b3c:	mov	r0, r3
   23b40:	add	sp, sp, #60	; 0x3c
   23b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b48:	ldr	r3, [r0]
   23b4c:	mov	r2, r6
   23b50:	mov	r1, sl
   23b54:	add	r5, r0, r3
   23b58:	ldr	r7, [r0, r3]
   23b5c:	add	r3, sp, #28
   23b60:	mov	r0, r8
   23b64:	bl	230c8 <flatcc_emitter_copy_buffer@@Base+0x154>
   23b68:	subs	r3, r0, #0
   23b6c:	bne	23b3c <flatcc_verify_union_vector_field@@Base+0xc0>
   23b70:	ldr	r4, [sp, #28]
   23b74:	cmp	r4, #0
   23b78:	beq	23b38 <flatcc_verify_union_vector_field@@Base+0xbc>
   23b7c:	ldm	r8, {r6, sl}
   23b80:	ldr	r8, [r8, #8]
   23b84:	ldr	fp, [r6, r4]
   23b88:	cmp	r8, #0
   23b8c:	movle	r3, #3
   23b90:	ble	23b3c <flatcc_verify_union_vector_field@@Base+0xc0>
   23b94:	mvn	r3, #-1073741824	; 0xc0000000
   23b98:	mov	r2, r4
   23b9c:	mov	r1, sl
   23ba0:	mov	r0, r6
   23ba4:	str	r3, [sp, #8]
   23ba8:	mov	r3, #4
   23bac:	str	r3, [sp]
   23bb0:	str	r3, [sp, #4]
   23bb4:	mov	r3, fp
   23bb8:	bl	23128 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   23bbc:	subs	r3, r0, #0
   23bc0:	bne	23b3c <flatcc_verify_union_vector_field@@Base+0xc0>
   23bc4:	add	r4, r4, fp
   23bc8:	ldr	r2, [r6, r4]
   23bcc:	cmp	r7, r2
   23bd0:	movne	r3, #34	; 0x22
   23bd4:	bne	23b3c <flatcc_verify_union_vector_field@@Base+0xc0>
   23bd8:	sub	r8, r8, #1
   23bdc:	add	r4, r4, #4
   23be0:	str	r6, [sp, #32]
   23be4:	add	r7, r5, r7
   23be8:	str	sl, [sp, #36]	; 0x24
   23bec:	str	r8, [sp, #40]	; 0x28
   23bf0:	cmp	r7, r5
   23bf4:	beq	23b3c <flatcc_verify_union_vector_field@@Base+0xc0>
   23bf8:	ldr	r1, [r6, r4]
   23bfc:	ldrb	r2, [r5, #4]
   23c00:	cmp	r1, #0
   23c04:	bne	23c18 <flatcc_verify_union_vector_field@@Base+0x19c>
   23c08:	cmp	r2, #0
   23c0c:	beq	23c50 <flatcc_verify_union_vector_field@@Base+0x1d4>
   23c10:	mov	r3, #32
   23c14:	b	23b3c <flatcc_verify_union_vector_field@@Base+0xc0>
   23c18:	cmp	r2, #0
   23c1c:	str	r3, [sp, #20]
   23c20:	beq	23c5c <flatcc_verify_union_vector_field@@Base+0x1e0>
   23c24:	add	r0, sp, #32
   23c28:	strb	r2, [sp, #44]	; 0x2c
   23c2c:	str	r4, [sp, #48]	; 0x30
   23c30:	str	r1, [sp, #52]	; 0x34
   23c34:	blx	r9
   23c38:	cmp	r0, #0
   23c3c:	ldr	r3, [sp, #20]
   23c40:	beq	23c50 <flatcc_verify_union_vector_field@@Base+0x1d4>
   23c44:	add	r0, sp, #32
   23c48:	blx	r9
   23c4c:	b	23b1c <flatcc_verify_union_vector_field@@Base+0xa0>
   23c50:	add	r4, r4, #4
   23c54:	add	r5, r5, #1
   23c58:	b	23bf0 <flatcc_verify_union_vector_field@@Base+0x174>
   23c5c:	mov	r3, #33	; 0x21
   23c60:	b	23b3c <flatcc_verify_union_vector_field@@Base+0xc0>
   23c64:	andeq	r0, r0, r0
   23c68:	push	{r4, lr}
   23c6c:	mov	r2, #260	; 0x104
   23c70:	ldr	r3, [pc, #8]	; 23c80 <flatcc_verify_union_vector_field@@Base+0x204>
   23c74:	ldr	r1, [pc, #8]	; 23c84 <flatcc_verify_union_vector_field@@Base+0x208>
   23c78:	ldr	r0, [pc, #8]	; 23c88 <flatcc_verify_union_vector_field@@Base+0x20c>
   23c7c:	bl	14620 <__assert_fail@plt>
   23c80:	strdeq	r1, [r3], -r0
   23c84:	andeq	r2, r3, r3, lsl #15
   23c88:	ldrdeq	r2, [r3], -r9

00023c8c <grisu3_diy_fp_encode_double@@Base>:
   23c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c90:	sub	sp, sp, #76	; 0x4c
   23c94:	sub	r2, r2, r3
   23c98:	ldr	ip, [sp, #112]	; 0x70
   23c9c:	strd	r0, [sp]
   23ca0:	str	r3, [sp, #24]
   23ca4:	cmp	ip, #0
   23ca8:	movne	ip, #4
   23cac:	orrs	r3, r0, r1
   23cb0:	bne	23d28 <grisu3_diy_fp_encode_double@@Base+0x9c>
   23cb4:	bl	23c68 <flatcc_verify_union_vector_field@@Base+0x1ec>
   23cb8:	ldm	sp, {r1, r3}
   23cbc:	lsl	r3, r3, #10
   23cc0:	lsl	sl, r1, #10
   23cc4:	orr	r3, r3, r1, lsr #22
   23cc8:	str	sl, [sp]
   23ccc:	str	r3, [sp, #4]
   23cd0:	mov	r3, r9
   23cd4:	ldr	r1, [sp, #4]
   23cd8:	mov	r6, r8
   23cdc:	sub	r9, r3, #10
   23ce0:	and	r7, r1, lr
   23ce4:	orrs	r1, r6, r7
   23ce8:	beq	23cb8 <grisu3_diy_fp_encode_double@@Base+0x2c>
   23cec:	ldrd	r0, [sp]
   23cf0:	mov	fp, r3
   23cf4:	sub	r3, r3, #1
   23cf8:	cmp	r0, #0
   23cfc:	sbcs	r1, r1, #0
   23d00:	bge	23d38 <grisu3_diy_fp_encode_double@@Base+0xac>
   23d04:	rsb	r3, fp, #0
   23d08:	cmn	r2, #348	; 0x15c
   23d0c:	lsl	ip, ip, r3
   23d10:	bge	23d54 <grisu3_diy_fp_encode_double@@Base+0xc8>
   23d14:	ldr	r3, [pc, #1128]	; 24184 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   23d18:	mov	r2, #80	; 0x50
   23d1c:	ldr	r1, [pc, #1124]	; 24188 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   23d20:	ldr	r0, [pc, #1124]	; 2418c <grisu3_diy_fp_encode_double@@Base+0x500>
   23d24:	bl	14620 <__assert_fail@plt>
   23d28:	mov	r3, #0
   23d2c:	ldr	lr, [pc, #1116]	; 24190 <grisu3_diy_fp_encode_double@@Base+0x504>
   23d30:	mov	r8, r3
   23d34:	b	23cd4 <grisu3_diy_fp_encode_double@@Base+0x48>
   23d38:	ldr	r1, [sp]
   23d3c:	adds	r1, r1, r1
   23d40:	str	r1, [sp]
   23d44:	ldr	r1, [sp, #4]
   23d48:	adc	r1, r1, r1
   23d4c:	str	r1, [sp, #4]
   23d50:	b	23cec <grisu3_diy_fp_encode_double@@Base+0x60>
   23d54:	cmp	r2, #348	; 0x15c
   23d58:	blt	23d70 <grisu3_diy_fp_encode_double@@Base+0xe4>
   23d5c:	ldr	r3, [pc, #1056]	; 24184 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   23d60:	mov	r2, #81	; 0x51
   23d64:	ldr	r1, [pc, #1052]	; 24188 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   23d68:	ldr	r0, [pc, #1060]	; 24194 <grisu3_diy_fp_encode_double@@Base+0x508>
   23d6c:	b	23d24 <grisu3_diy_fp_encode_double@@Base+0x98>
   23d70:	ldr	r3, [pc, #1056]	; 24198 <grisu3_diy_fp_encode_double@@Base+0x50c>
   23d74:	add	lr, r2, #348	; 0x15c
   23d78:	asr	lr, lr, #3
   23d7c:	add	lr, r3, lr, lsl #4
   23d80:	ldr	r1, [lr, #56]	; 0x38
   23d84:	ldrsh	r6, [lr, #66]	; 0x42
   23d88:	str	r1, [sp, #60]	; 0x3c
   23d8c:	ldr	r1, [lr, #60]	; 0x3c
   23d90:	cmp	r2, r6
   23d94:	str	r1, [sp, #64]	; 0x40
   23d98:	ldrsh	r1, [lr, #64]	; 0x40
   23d9c:	str	r1, [sp, #68]	; 0x44
   23da0:	bge	23db8 <grisu3_diy_fp_encode_double@@Base+0x12c>
   23da4:	add	r3, r3, #24
   23da8:	mov	r2, #88	; 0x58
   23dac:	ldr	r1, [pc, #980]	; 24188 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   23db0:	ldr	r0, [pc, #996]	; 2419c <grisu3_diy_fp_encode_double@@Base+0x510>
   23db4:	b	23d24 <grisu3_diy_fp_encode_double@@Base+0x98>
   23db8:	add	lr, r6, #7
   23dbc:	cmp	r2, lr
   23dc0:	ble	23dd8 <grisu3_diy_fp_encode_double@@Base+0x14c>
   23dc4:	add	r3, r3, #24
   23dc8:	mov	r2, #89	; 0x59
   23dcc:	ldr	r1, [pc, #948]	; 24188 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   23dd0:	ldr	r0, [pc, #968]	; 241a0 <grisu3_diy_fp_encode_double@@Base+0x514>
   23dd4:	b	23d24 <grisu3_diy_fp_encode_double@@Base+0x98>
   23dd8:	cmp	r2, r6
   23ddc:	beq	23eb8 <grisu3_diy_fp_encode_double@@Base+0x22c>
   23de0:	sub	r2, r2, r6
   23de4:	sub	r2, r2, #1
   23de8:	cmp	r2, #6
   23dec:	bls	23e04 <grisu3_diy_fp_encode_double@@Base+0x178>
   23df0:	ldr	r3, [pc, #940]	; 241a4 <grisu3_diy_fp_encode_double@@Base+0x518>
   23df4:	mov	r2, #185	; 0xb9
   23df8:	ldr	r1, [pc, #904]	; 24188 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   23dfc:	ldr	r0, [pc, #932]	; 241a8 <grisu3_diy_fp_encode_double@@Base+0x51c>
   23e00:	b	23d24 <grisu3_diy_fp_encode_double@@Base+0x98>
   23e04:	ldr	r3, [pc, #928]	; 241ac <grisu3_diy_fp_encode_double@@Base+0x520>
   23e08:	ldr	r1, [sp]
   23e0c:	add	lr, r3, r2, lsl #4
   23e10:	ldr	r6, [r3, r2, lsl #4]
   23e14:	ldr	r3, [lr, #4]
   23e18:	umull	r0, r1, r1, r3
   23e1c:	ldr	r3, [sp, #4]
   23e20:	umull	r8, r9, r3, r6
   23e24:	ldr	r3, [sp]
   23e28:	strd	r8, [sp, #16]
   23e2c:	ldr	sl, [sp, #16]
   23e30:	umull	r6, r7, r3, r6
   23e34:	mov	r3, #0
   23e38:	mov	r9, r3
   23e3c:	str	r3, [sp, #16]
   23e40:	mov	r6, r7
   23e44:	adds	r6, r6, sl
   23e48:	adc	r7, r3, r3
   23e4c:	adds	r6, r6, #-2147483648	; 0x80000000
   23e50:	adc	r7, r7, r3
   23e54:	adds	r6, r6, r0
   23e58:	ldr	r6, [sp, #20]
   23e5c:	adc	r7, r7, r3
   23e60:	mov	r8, r7
   23e64:	mov	r7, r1
   23e68:	ldr	r1, [sp, #4]
   23e6c:	adds	r3, r6, r7
   23e70:	str	r3, [sp, #32]
   23e74:	adc	r3, r9, r9
   23e78:	str	r3, [sp, #36]	; 0x24
   23e7c:	ldr	r3, [lr, #4]
   23e80:	ldrd	r6, [sp, #32]
   23e84:	umlal	r6, r7, r3, r1
   23e88:	adds	r3, r8, r6
   23e8c:	str	r3, [sp]
   23e90:	adc	r3, r9, r7
   23e94:	str	r3, [sp, #4]
   23e98:	ldr	r3, [lr, #8]
   23e9c:	add	r3, fp, r3
   23ea0:	add	fp, r3, #64	; 0x40
   23ea4:	ldr	r3, [sp, #24]
   23ea8:	add	r3, r3, #1
   23eac:	add	r2, r3, r2
   23eb0:	cmp	r2, #19
   23eb4:	addgt	ip, ip, #4
   23eb8:	ldr	r2, [sp]
   23ebc:	mov	lr, #0
   23ec0:	ldr	r3, [sp, #64]	; 0x40
   23ec4:	umull	r2, r3, r2, r3
   23ec8:	strd	r2, [sp, #16]
   23ecc:	ldr	r2, [sp, #4]
   23ed0:	ldr	r3, [sp, #60]	; 0x3c
   23ed4:	umull	r2, r3, r2, r3
   23ed8:	strd	r2, [sp, #24]
   23edc:	ldr	r2, [sp]
   23ee0:	ldr	r0, [sp, #24]
   23ee4:	ldr	r3, [sp, #60]	; 0x3c
   23ee8:	umull	r6, r7, r2, r3
   23eec:	ldr	r3, [sp, #20]
   23ef0:	mov	sl, r7
   23ef4:	adds	r0, sl, r0
   23ef8:	ldr	sl, [sp, #16]
   23efc:	adc	r6, lr, lr
   23f00:	adds	r0, r0, #-2147483648	; 0x80000000
   23f04:	adc	r6, r6, lr
   23f08:	adds	r0, r0, sl
   23f0c:	ldr	r0, [sp, #28]
   23f10:	adc	r6, r6, lr
   23f14:	mov	r2, r6
   23f18:	ldr	r6, [sp, #4]
   23f1c:	adds	r3, r0, r3
   23f20:	str	r3, [sp, #40]	; 0x28
   23f24:	adc	r3, lr, lr
   23f28:	str	r3, [sp, #44]	; 0x2c
   23f2c:	ldrd	r0, [sp, #40]	; 0x28
   23f30:	ldr	r3, [sp, #64]	; 0x40
   23f34:	umlal	r0, r1, r3, r6
   23f38:	ldr	r3, [sp, #68]	; 0x44
   23f3c:	adds	r4, r2, r0
   23f40:	adc	r5, lr, r1
   23f44:	cmp	ip, lr
   23f48:	add	r2, fp, r3
   23f4c:	movne	r3, #9
   23f50:	moveq	r3, #8
   23f54:	add	r2, r2, #64	; 0x40
   23f58:	add	ip, ip, r3
   23f5c:	orrs	r3, r4, r5
   23f60:	movne	r1, r2
   23f64:	ldrne	r0, [pc, #548]	; 24190 <grisu3_diy_fp_encode_double@@Base+0x504>
   23f68:	beq	23cb4 <grisu3_diy_fp_encode_double@@Base+0x28>
   23f6c:	and	r3, r5, r0
   23f70:	str	lr, [sp, #48]	; 0x30
   23f74:	sub	r6, r1, #10
   23f78:	str	r3, [sp, #52]	; 0x34
   23f7c:	ldrd	r8, [sp, #48]	; 0x30
   23f80:	orrs	r3, r8, r9
   23f84:	beq	24088 <grisu3_diy_fp_encode_double@@Base+0x3fc>
   23f88:	cmp	r4, #0
   23f8c:	mov	r8, r1
   23f90:	sbcs	r3, r5, #0
   23f94:	sub	r1, r1, #1
   23f98:	bge	240a4 <grisu3_diy_fp_encode_double@@Base+0x418>
   23f9c:	sub	r2, r2, r8
   23fa0:	add	r3, r8, #64	; 0x40
   23fa4:	lsl	ip, ip, r2
   23fa8:	ldr	r2, [pc, #512]	; 241b0 <grisu3_diy_fp_encode_double@@Base+0x524>
   23fac:	cmp	r3, r2
   23fb0:	movge	r3, #64	; 0x40
   23fb4:	bge	23fcc <grisu3_diy_fp_encode_double@@Base+0x340>
   23fb8:	mvn	r2, #1072	; 0x430
   23fbc:	cmp	r3, r2
   23fc0:	addge	r3, r8, #1136	; 0x470
   23fc4:	movlt	r3, #0
   23fc8:	addge	r3, r3, #2
   23fcc:	rsb	lr, r3, #64	; 0x40
   23fd0:	cmp	lr, #60	; 0x3c
   23fd4:	ble	2400c <grisu3_diy_fp_encode_double@@Base+0x380>
   23fd8:	rsb	r3, r3, #2
   23fdc:	mov	lr, #62	; 0x3e
   23fe0:	lsr	r2, r4, r3
   23fe4:	rsb	r0, r3, #32
   23fe8:	sub	r1, r3, #32
   23fec:	add	r8, r8, r3
   23ff0:	orr	r2, r2, r5, lsl r0
   23ff4:	orr	r2, r2, r5, lsr r1
   23ff8:	lsr	r1, r5, r3
   23ffc:	asr	r3, ip, r3
   24000:	mov	r4, r2
   24004:	mov	r5, r1
   24008:	add	ip, r3, #9
   2400c:	lsr	sl, r4, lr
   24010:	rsb	r0, lr, #32
   24014:	sub	r1, lr, #32
   24018:	lsr	fp, r5, lr
   2401c:	add	r8, lr, r8
   24020:	orr	sl, sl, r5, lsl r0
   24024:	mov	r0, #1
   24028:	orr	sl, sl, r5, lsr r1
   2402c:	sub	r1, lr, #1
   24030:	and	r4, r4, r0, lsl r1
   24034:	mov	r0, #8
   24038:	lsl	r0, r0, r1
   2403c:	lsl	r4, r4, #3
   24040:	add	r1, ip, r0
   24044:	cmp	r1, lr
   24048:	bgt	2407c <grisu3_diy_fp_encode_double@@Base+0x3f0>
   2404c:	adds	sl, sl, #1
   24050:	mov	r6, #0
   24054:	adc	fp, fp, #0
   24058:	and	r7, fp, #2097152	; 0x200000
   2405c:	orrs	r3, r6, r7
   24060:	beq	2407c <grisu3_diy_fp_encode_double@@Base+0x3f0>
   24064:	lsr	lr, sl, #1
   24068:	add	r8, r8, #1
   2406c:	lsr	r5, fp, #1
   24070:	orr	lr, lr, fp, lsl #31
   24074:	mov	fp, r5
   24078:	mov	sl, lr
   2407c:	mvn	r6, #0
   24080:	ldr	r7, [pc, #300]	; 241b4 <grisu3_diy_fp_encode_double@@Base+0x528>
   24084:	b	240c8 <grisu3_diy_fp_encode_double@@Base+0x43c>
   24088:	lsl	r3, r5, #10
   2408c:	lsl	r1, r4, #10
   24090:	orr	r3, r3, r4, lsr #22
   24094:	mov	r4, r1
   24098:	mov	r1, r6
   2409c:	mov	r5, r3
   240a0:	b	23f6c <grisu3_diy_fp_encode_double@@Base+0x2e0>
   240a4:	adds	r4, r4, r4
   240a8:	adc	r5, r5, r5
   240ac:	b	23f88 <grisu3_diy_fp_encode_double@@Base+0x2fc>
   240b0:	lsr	lr, sl, #1
   240b4:	lsr	r8, fp, #1
   240b8:	orr	lr, lr, fp, lsl #31
   240bc:	mov	fp, r8
   240c0:	mov	r8, r5
   240c4:	mov	sl, lr
   240c8:	cmp	fp, r7
   240cc:	add	r5, r8, #1
   240d0:	cmpeq	sl, r6
   240d4:	bhi	240b0 <grisu3_diy_fp_encode_double@@Base+0x424>
   240d8:	ldr	lr, [pc, #216]	; 241b8 <grisu3_diy_fp_encode_double@@Base+0x52c>
   240dc:	mov	r6, #0
   240e0:	cmp	r8, lr
   240e4:	movge	r5, lr
   240e8:	bge	240fc <grisu3_diy_fp_encode_double@@Base+0x470>
   240ec:	mov	r7, #0
   240f0:	b	24148 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   240f4:	adds	sl, sl, sl
   240f8:	adc	fp, fp, fp
   240fc:	and	r3, fp, #1048576	; 0x100000
   24100:	cmp	r8, r5
   24104:	str	r6, [sp, #8]
   24108:	mov	lr, r8
   2410c:	str	r3, [sp, #12]
   24110:	beq	24174 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   24114:	ldrd	r2, [sp, #8]
   24118:	sub	r8, r8, #1
   2411c:	orrs	r3, r2, r3
   24120:	beq	240f4 <grisu3_diy_fp_encode_double@@Base+0x468>
   24124:	add	lr, lr, #1072	; 0x430
   24128:	add	lr, lr, #3
   2412c:	asr	r3, lr, #31
   24130:	mov	r2, lr
   24134:	strd	r2, [sp, #8]
   24138:	ldr	r2, [sp, #8]
   2413c:	ubfx	r3, fp, #0, #20
   24140:	mov	r6, sl
   24144:	orr	r7, r3, r2, lsl #20
   24148:	ldr	r3, [sp, #116]	; 0x74
   2414c:	cmp	r1, r4
   24150:	sub	r0, r0, ip
   24154:	movgt	r1, #0
   24158:	movle	r1, #1
   2415c:	cmp	r0, r4
   24160:	movlt	r0, r1
   24164:	orrge	r0, r1, #1
   24168:	strd	r6, [r3]
   2416c:	add	sp, sp, #76	; 0x4c
   24170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24174:	ldrd	r2, [sp, #8]
   24178:	orrs	r3, r2, r3
   2417c:	beq	24138 <grisu3_diy_fp_encode_double@@Base+0x4ac>
   24180:	b	24124 <grisu3_diy_fp_encode_double@@Base+0x498>
   24184:	andeq	r1, r3, r8, lsl #30
   24188:	andeq	r2, r3, r2, ror #15
   2418c:	andeq	r2, r3, r9, lsr r8
   24190:			; <UNDEFINED> instruction: 0xffc00000
   24194:	andeq	r2, r3, r8, asr r8
   24198:	strdeq	r1, [r3], -r0
   2419c:	andeq	r2, r3, r3, lsl #17
   241a0:	muleq	r3, r2, r8
   241a4:	muleq	r3, r8, r4
   241a8:	andeq	r2, r3, sp, lsr #17
   241ac:	andeq	r4, r4, r8, asr #6
   241b0:			; <UNDEFINED> instruction: 0xfffffc0e
   241b4:			; <UNDEFINED> instruction: 0x001fffff
   241b8:			; <UNDEFINED> instruction: 0xfffffbce
   241bc:	cmp	r1, #1000	; 0x3e8
   241c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241c4:	mov	r3, #0
   241c8:	addle	r1, r1, #1
   241cc:	addgt	r1, r0, #1000	; 0x3e8
   241d0:	mov	r8, r2
   241d4:	addle	r1, r0, r1
   241d8:	mov	r2, #0
   241dc:	addgt	r1, r1, #1
   241e0:	cmp	r1, r0
   241e4:	sub	sp, sp, #44	; 0x2c
   241e8:	mov	r7, r0
   241ec:	strd	r2, [r8]
   241f0:	beq	242b4 <grisu3_diy_fp_encode_double@@Base+0x628>
   241f4:	ldrb	r3, [r0]
   241f8:	cmp	r3, #45	; 0x2d
   241fc:	movne	r6, r0
   24200:	movne	r3, #0
   24204:	bne	24220 <grisu3_diy_fp_encode_double@@Base+0x594>
   24208:	add	r6, r0, #1
   2420c:	cmp	r1, r6
   24210:	movne	r3, #1
   24214:	bne	24220 <grisu3_diy_fp_encode_double@@Base+0x594>
   24218:	mov	r7, #0
   2421c:	b	242b4 <grisu3_diy_fp_encode_double@@Base+0x628>
   24220:	ldrb	r0, [r6]
   24224:	str	r3, [sp, #20]
   24228:	cmp	r0, #48	; 0x30
   2422c:	bne	2429c <grisu3_diy_fp_encode_double@@Base+0x610>
   24230:	add	r3, r6, #1
   24234:	cmp	r1, r3
   24238:	beq	2424c <grisu3_diy_fp_encode_double@@Base+0x5c0>
   2423c:	ldrb	r2, [r6, #1]
   24240:	orr	r2, r2, #32
   24244:	cmp	r2, #120	; 0x78
   24248:	beq	242b4 <grisu3_diy_fp_encode_double@@Base+0x628>
   2424c:	cmp	r1, r3
   24250:	mov	r6, r3
   24254:	beq	24458 <grisu3_diy_fp_encode_double@@Base+0x7cc>
   24258:	ldrb	r2, [r3], #1
   2425c:	cmp	r2, #48	; 0x30
   24260:	beq	2424c <grisu3_diy_fp_encode_double@@Base+0x5c0>
   24264:	mov	sl, #0
   24268:	mov	fp, #0
   2426c:	mov	r2, r6
   24270:	mov	ip, #10
   24274:	cmp	r1, r2
   24278:	mov	r0, r2
   2427c:	beq	24294 <grisu3_diy_fp_encode_double@@Base+0x608>
   24280:	ldrb	r3, [r2]
   24284:	add	r2, r2, #1
   24288:	sub	lr, r3, #48	; 0x30
   2428c:	cmp	lr, #9
   24290:	bls	242d4 <grisu3_diy_fp_encode_double@@Base+0x648>
   24294:	mov	ip, #0
   24298:	b	24300 <grisu3_diy_fp_encode_double@@Base+0x674>
   2429c:	sub	r3, r0, #49	; 0x31
   242a0:	cmp	r3, #8
   242a4:	bls	242c0 <grisu3_diy_fp_encode_double@@Base+0x634>
   242a8:	ldr	r3, [sp, #20]
   242ac:	cmp	r3, #0
   242b0:	movne	r7, #0
   242b4:	mov	r0, r7
   242b8:	add	sp, sp, #44	; 0x2c
   242bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242c0:	sub	r0, r0, #48	; 0x30
   242c4:	add	r6, r6, #1
   242c8:	mov	sl, r0
   242cc:	asr	fp, r0, #31
   242d0:	b	2426c <grisu3_diy_fp_encode_double@@Base+0x5e0>
   242d4:	add	r5, pc, #748	; 0x2ec
   242d8:	ldrd	r4, [r5]
   242dc:	cmp	fp, r5
   242e0:	cmpeq	sl, r4
   242e4:	bls	24430 <grisu3_diy_fp_encode_double@@Base+0x7a4>
   242e8:	cmp	r3, #52	; 0x34
   242ec:	mov	ip, #1
   242f0:	movls	r3, #0
   242f4:	movhi	r3, #1
   242f8:	adds	sl, sl, r3
   242fc:	adc	fp, fp, #0
   24300:	sub	r6, r0, r6
   24304:	mov	lr, r0
   24308:	cmp	lr, r1
   2430c:	mov	r4, lr
   24310:	sub	r2, lr, r0
   24314:	beq	244a0 <grisu3_diy_fp_encode_double@@Base+0x814>
   24318:	ldrb	r3, [lr], #1
   2431c:	cmp	r3, #48	; 0x30
   24320:	beq	24308 <grisu3_diy_fp_encode_double@@Base+0x67c>
   24324:	sub	r3, r3, #49	; 0x31
   24328:	cmp	r3, #8
   2432c:	bhi	24358 <grisu3_diy_fp_encode_double@@Base+0x6cc>
   24330:	mov	r3, lr
   24334:	cmp	r3, r1
   24338:	mov	r4, r3
   2433c:	sub	r2, r3, r0
   24340:	beq	24570 <grisu3_diy_fp_encode_double@@Base+0x8e4>
   24344:	ldrb	ip, [r3], #1
   24348:	sub	ip, ip, #48	; 0x30
   2434c:	cmp	ip, #9
   24350:	bls	24334 <grisu3_diy_fp_encode_double@@Base+0x6a8>
   24354:	mov	ip, #1
   24358:	ldrb	r3, [r4]
   2435c:	cmp	r3, #46	; 0x2e
   24360:	bne	244a4 <grisu3_diy_fp_encode_double@@Base+0x818>
   24364:	ldrb	r3, [r4, #1]
   24368:	add	r0, r4, #1
   2436c:	sub	r3, r3, #48	; 0x30
   24370:	cmp	r3, #9
   24374:	movls	r9, #10
   24378:	strls	r0, [sp, #8]
   2437c:	bhi	24218 <grisu3_diy_fp_encode_double@@Base+0x58c>
   24380:	ldr	r3, [sp, #8]
   24384:	cmp	r3, r1
   24388:	beq	243d4 <grisu3_diy_fp_encode_double@@Base+0x748>
   2438c:	mov	lr, r3
   24390:	ldrb	r3, [lr], #1
   24394:	sub	r5, r3, #48	; 0x30
   24398:	cmp	r5, #9
   2439c:	bhi	243d4 <grisu3_diy_fp_encode_double@@Base+0x748>
   243a0:	add	r5, pc, #544	; 0x220
   243a4:	ldrd	r4, [r5]
   243a8:	cmp	fp, r5
   243ac:	cmpeq	sl, r4
   243b0:	bls	24470 <grisu3_diy_fp_encode_double@@Base+0x7e4>
   243b4:	cmp	ip, #0
   243b8:	bne	243d4 <grisu3_diy_fp_encode_double@@Base+0x748>
   243bc:	cmp	r3, #52	; 0x34
   243c0:	mov	ip, #1
   243c4:	movls	r3, #0
   243c8:	movhi	r3, #1
   243cc:	adds	sl, sl, r3
   243d0:	adc	fp, fp, #0
   243d4:	ldr	r3, [sp, #8]
   243d8:	sub	r0, r3, r0
   243dc:	sub	r5, r2, r3
   243e0:	add	r6, r6, r0
   243e4:	cmp	r1, r3
   243e8:	mov	r4, r3
   243ec:	add	r2, r5, r3
   243f0:	beq	244a0 <grisu3_diy_fp_encode_double@@Base+0x814>
   243f4:	ldrb	r0, [r3], #1
   243f8:	cmp	r0, #48	; 0x30
   243fc:	beq	243e4 <grisu3_diy_fp_encode_double@@Base+0x758>
   24400:	sub	r0, r0, #49	; 0x31
   24404:	cmp	r0, #8
   24408:	bhi	244a4 <grisu3_diy_fp_encode_double@@Base+0x818>
   2440c:	cmp	r3, r1
   24410:	mov	r4, r3
   24414:	beq	24570 <grisu3_diy_fp_encode_double@@Base+0x8e4>
   24418:	ldrb	r0, [r3], #1
   2441c:	sub	r0, r0, #48	; 0x30
   24420:	cmp	r0, #9
   24424:	bls	2440c <grisu3_diy_fp_encode_double@@Base+0x780>
   24428:	mov	ip, #1
   2442c:	b	244a4 <grisu3_diy_fp_encode_double@@Base+0x818>
   24430:	umull	r4, r5, sl, ip
   24434:	mla	r5, ip, fp, r5
   24438:	subs	r0, r4, #48	; 0x30
   2443c:	str	r0, [sp, #8]
   24440:	sbc	r0, r5, #0
   24444:	str	r0, [sp, #12]
   24448:	ldrd	sl, [sp, #8]
   2444c:	adds	sl, sl, r3
   24450:	adc	fp, fp, #0
   24454:	b	24274 <grisu3_diy_fp_encode_double@@Base+0x5e8>
   24458:	mov	r0, r1
   2445c:	mov	r6, r1
   24460:	mov	ip, #0
   24464:	mov	sl, #0
   24468:	mov	fp, #0
   2446c:	b	24300 <grisu3_diy_fp_encode_double@@Base+0x674>
   24470:	umull	r4, r5, sl, r9
   24474:	sub	r2, r2, #1
   24478:	str	lr, [sp, #8]
   2447c:	mla	r5, r9, fp, r5
   24480:	subs	sl, r4, #48	; 0x30
   24484:	str	sl, [sp, #24]
   24488:	sbc	r4, r5, #0
   2448c:	str	r4, [sp, #28]
   24490:	ldrd	sl, [sp, #24]
   24494:	adds	sl, sl, r3
   24498:	adc	fp, fp, #0
   2449c:	b	24380 <grisu3_diy_fp_encode_double@@Base+0x6f4>
   244a0:	mov	r4, r1
   244a4:	cmp	r4, r1
   244a8:	add	r5, r2, r6
   244ac:	beq	245bc <grisu3_diy_fp_encode_double@@Base+0x930>
   244b0:	ldrb	r3, [r4]
   244b4:	orr	r3, r3, #32
   244b8:	cmp	r3, #101	; 0x65
   244bc:	bne	245bc <grisu3_diy_fp_encode_double@@Base+0x930>
   244c0:	sub	r3, r1, r4
   244c4:	cmp	r3, #1
   244c8:	ble	24218 <grisu3_diy_fp_encode_double@@Base+0x58c>
   244cc:	ldrb	r3, [r4, #1]
   244d0:	cmp	r3, #43	; 0x2b
   244d4:	bne	24578 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   244d8:	add	r4, r4, #2
   244dc:	cmp	r1, r4
   244e0:	beq	24218 <grisu3_diy_fp_encode_double@@Base+0x58c>
   244e4:	mov	lr, #0
   244e8:	ldrb	r2, [r4]
   244ec:	sub	r2, r2, #48	; 0x30
   244f0:	uxtb	r3, r2
   244f4:	cmp	r3, #9
   244f8:	addls	r0, r4, #1
   244fc:	bhi	24218 <grisu3_diy_fp_encode_double@@Base+0x58c>
   24500:	cmp	r0, r1
   24504:	mov	r4, r0
   24508:	bne	24598 <grisu3_diy_fp_encode_double@@Base+0x90c>
   2450c:	cmp	lr, #0
   24510:	rsbne	r2, r2, #0
   24514:	cmp	r1, r4
   24518:	add	r5, r2, r5
   2451c:	beq	24218 <grisu3_diy_fp_encode_double@@Base+0x58c>
   24520:	orrs	r3, sl, fp
   24524:	moveq	r2, #1
   24528:	movne	r2, #0
   2452c:	cmn	r5, #324	; 0x144
   24530:	movge	r3, #0
   24534:	movlt	r3, #1
   24538:	orrs	r3, r2, r3
   2453c:	bne	24558 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   24540:	movw	r3, #310	; 0x136
   24544:	cmp	r5, r3
   24548:	ble	245d8 <grisu3_diy_fp_encode_double@@Base+0x94c>
   2454c:	ldr	r3, [pc, #124]	; 245d0 <grisu3_diy_fp_encode_double@@Base+0x944>
   24550:	mov	r2, #0
   24554:	strd	r2, [r8]
   24558:	ldr	r3, [sp, #20]
   2455c:	cmp	r3, #0
   24560:	vldrne	d7, [r8]
   24564:	vnegne.f64	d7, d7
   24568:	vstrne	d7, [r8]
   2456c:	b	24888 <grisu3_diy_fp_encode_double@@Base+0xbfc>
   24570:	mov	r4, r1
   24574:	b	24428 <grisu3_diy_fp_encode_double@@Base+0x79c>
   24578:	cmp	r3, #45	; 0x2d
   2457c:	addne	r4, r4, #1
   24580:	bne	244e4 <grisu3_diy_fp_encode_double@@Base+0x858>
   24584:	add	r4, r4, #2
   24588:	cmp	r1, r4
   2458c:	beq	24218 <grisu3_diy_fp_encode_double@@Base+0x58c>
   24590:	mov	lr, #1
   24594:	b	244e8 <grisu3_diy_fp_encode_double@@Base+0x85c>
   24598:	ldrb	r3, [r0], #1
   2459c:	sub	r9, r3, #48	; 0x30
   245a0:	cmp	r9, #9
   245a4:	bhi	2450c <grisu3_diy_fp_encode_double@@Base+0x880>
   245a8:	cmp	r2, #32768	; 0x8000
   245ac:	movlt	r4, #10
   245b0:	mlalt	r2, r4, r2, r3
   245b4:	sublt	r2, r2, #48	; 0x30
   245b8:	b	24500 <grisu3_diy_fp_encode_double@@Base+0x874>
   245bc:	mov	r2, #0
   245c0:	b	24514 <grisu3_diy_fp_encode_double@@Base+0x888>
   245c4:	nop	{0}
   245c8:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   245cc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   245d0:	svcvc	0x00f00000	; IMB
   245d4:			; <UNDEFINED> instruction: 0x001fffff
   245d8:	ldr	r3, [pc, #-12]	; 245d4 <grisu3_diy_fp_encode_double@@Base+0x948>
   245dc:	mvn	r2, #0
   245e0:	cmp	fp, r3
   245e4:	cmpeq	sl, r2
   245e8:	movls	r3, #1
   245ec:	movhi	r3, #0
   245f0:	cmp	r5, #22
   245f4:	movhi	r3, #0
   245f8:	andls	r3, r3, #1
   245fc:	cmp	r3, #0
   24600:	beq	24848 <grisu3_diy_fp_encode_double@@Base+0xbbc>
   24604:	mov	r0, sl
   24608:	mov	r1, fp
   2460c:	bl	2daa4 <flatcc_json_printer_clear@@Base+0x384>
   24610:	sub	r2, r5, r6
   24614:	vmov	d7, r0, r1
   24618:	add	r2, r2, #22
   2461c:	cmp	r2, #44	; 0x2c
   24620:	ldrls	pc, [pc, r2, lsl #2]
   24624:	b	246e4 <grisu3_diy_fp_encode_double@@Base+0xa58>
   24628:	ldrdeq	r4, [r2], -ip
   2462c:	andeq	r4, r2, ip, ror #13
   24630:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24634:	strdeq	r4, [r2], -ip
   24638:	andeq	r4, r2, r4, lsl #14
   2463c:	andeq	r4, r2, ip, lsl #14
   24640:	andeq	r4, r2, r4, lsl r7
   24644:	andeq	r4, r2, ip, lsl r7
   24648:	andeq	r4, r2, r4, lsr #14
   2464c:	andeq	r4, r2, ip, lsr #14
   24650:	andeq	r4, r2, r4, lsr r7
   24654:	andeq	r4, r2, ip, lsr r7
   24658:	andeq	r4, r2, r4, asr #14
   2465c:	andeq	r4, r2, ip, asr #14
   24660:	andeq	r4, r2, r4, asr r7
   24664:	andeq	r4, r2, ip, asr r7
   24668:	andeq	r4, r2, r4, ror #14
   2466c:	andeq	r4, r2, ip, ror #14
   24670:	andeq	r4, r2, r4, ror r7
   24674:	andeq	r4, r2, ip, ror r7
   24678:	andeq	r4, r2, r4, lsl #15
   2467c:	andeq	r4, r2, ip, lsl #15
   24680:	andeq	r4, r2, r4, ror #13
   24684:	muleq	r2, r4, r7
   24688:	andeq	r4, r2, r0, lsr #15
   2468c:	andeq	r4, r2, r8, lsr #15
   24690:			; <UNDEFINED> instruction: 0x000247b0
   24694:			; <UNDEFINED> instruction: 0x000247b8
   24698:	andeq	r4, r2, r0, asr #15
   2469c:	andeq	r4, r2, r8, asr #15
   246a0:	ldrdeq	r4, [r2], -r0
   246a4:	ldrdeq	r4, [r2], -r8
   246a8:	andeq	r4, r2, r0, ror #15
   246ac:	andeq	r4, r2, r8, ror #15
   246b0:	strdeq	r4, [r2], -r0
   246b4:	strdeq	r4, [r2], -r8
   246b8:	andeq	r4, r2, r0, lsl #16
   246bc:	andeq	r4, r2, r8, lsl #16
   246c0:	andeq	r4, r2, r0, lsl r8
   246c4:	andeq	r4, r2, r8, lsl r8
   246c8:	andeq	r4, r2, r0, lsr #16
   246cc:	andeq	r4, r2, r8, lsr #16
   246d0:	andeq	r4, r2, r0, lsr r8
   246d4:	andeq	r4, r2, r8, lsr r8
   246d8:	andeq	r4, r2, r0, asr #16
   246dc:	vldr	d6, [pc, #428]	; 24890 <grisu3_diy_fp_encode_double@@Base+0xc04>
   246e0:	vdiv.f64	d7, d7, d6
   246e4:	vstr	d7, [r8]
   246e8:	b	24558 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   246ec:	vldr	d6, [pc, #420]	; 24898 <grisu3_diy_fp_encode_double@@Base+0xc0c>
   246f0:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   246f4:	vldr	d6, [pc, #420]	; 248a0 <grisu3_diy_fp_encode_double@@Base+0xc14>
   246f8:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   246fc:	vldr	d6, [pc, #420]	; 248a8 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   24700:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24704:	vldr	d6, [pc, #420]	; 248b0 <grisu3_diy_fp_encode_double@@Base+0xc24>
   24708:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   2470c:	vldr	d6, [pc, #420]	; 248b8 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   24710:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24714:	vldr	d6, [pc, #420]	; 248c0 <grisu3_diy_fp_encode_double@@Base+0xc34>
   24718:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   2471c:	vldr	d6, [pc, #420]	; 248c8 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   24720:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24724:	vldr	d6, [pc, #420]	; 248d0 <grisu3_diy_fp_encode_double@@Base+0xc44>
   24728:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   2472c:	vldr	d6, [pc, #420]	; 248d8 <grisu3_diy_fp_encode_double@@Base+0xc4c>
   24730:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24734:	vldr	d6, [pc, #420]	; 248e0 <grisu3_diy_fp_encode_double@@Base+0xc54>
   24738:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   2473c:	vldr	d6, [pc, #420]	; 248e8 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   24740:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24744:	vldr	d6, [pc, #420]	; 248f0 <grisu3_diy_fp_encode_double@@Base+0xc64>
   24748:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   2474c:	vldr	d6, [pc, #420]	; 248f8 <grisu3_diy_fp_encode_double@@Base+0xc6c>
   24750:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24754:	vldr	d6, [pc, #420]	; 24900 <grisu3_diy_fp_encode_double@@Base+0xc74>
   24758:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   2475c:	vldr	d6, [pc, #420]	; 24908 <grisu3_diy_fp_encode_double@@Base+0xc7c>
   24760:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24764:	vldr	d6, [pc, #420]	; 24910 <grisu3_diy_fp_encode_double@@Base+0xc84>
   24768:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   2476c:	vldr	d6, [pc, #420]	; 24918 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   24770:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24774:	vldr	d6, [pc, #420]	; 24920 <grisu3_diy_fp_encode_double@@Base+0xc94>
   24778:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   2477c:	vldr	d6, [pc, #420]	; 24928 <grisu3_diy_fp_encode_double@@Base+0xc9c>
   24780:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24784:	vldr	d6, [pc, #420]	; 24930 <grisu3_diy_fp_encode_double@@Base+0xca4>
   24788:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   2478c:	vldr	d6, [pc, #420]	; 24938 <grisu3_diy_fp_encode_double@@Base+0xcac>
   24790:	b	246e0 <grisu3_diy_fp_encode_double@@Base+0xa54>
   24794:	vldr	d6, [pc, #412]	; 24938 <grisu3_diy_fp_encode_double@@Base+0xcac>
   24798:	vmul.f64	d7, d7, d6
   2479c:	b	246e4 <grisu3_diy_fp_encode_double@@Base+0xa58>
   247a0:	vldr	d6, [pc, #392]	; 24930 <grisu3_diy_fp_encode_double@@Base+0xca4>
   247a4:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   247a8:	vldr	d6, [pc, #376]	; 24928 <grisu3_diy_fp_encode_double@@Base+0xc9c>
   247ac:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   247b0:	vldr	d6, [pc, #360]	; 24920 <grisu3_diy_fp_encode_double@@Base+0xc94>
   247b4:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   247b8:	vldr	d6, [pc, #344]	; 24918 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   247bc:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   247c0:	vldr	d6, [pc, #328]	; 24910 <grisu3_diy_fp_encode_double@@Base+0xc84>
   247c4:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   247c8:	vldr	d6, [pc, #312]	; 24908 <grisu3_diy_fp_encode_double@@Base+0xc7c>
   247cc:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   247d0:	vldr	d6, [pc, #296]	; 24900 <grisu3_diy_fp_encode_double@@Base+0xc74>
   247d4:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   247d8:	vldr	d6, [pc, #280]	; 248f8 <grisu3_diy_fp_encode_double@@Base+0xc6c>
   247dc:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   247e0:	vldr	d6, [pc, #264]	; 248f0 <grisu3_diy_fp_encode_double@@Base+0xc64>
   247e4:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   247e8:	vldr	d6, [pc, #248]	; 248e8 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   247ec:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   247f0:	vldr	d6, [pc, #232]	; 248e0 <grisu3_diy_fp_encode_double@@Base+0xc54>
   247f4:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   247f8:	vldr	d6, [pc, #216]	; 248d8 <grisu3_diy_fp_encode_double@@Base+0xc4c>
   247fc:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   24800:	vldr	d6, [pc, #200]	; 248d0 <grisu3_diy_fp_encode_double@@Base+0xc44>
   24804:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   24808:	vldr	d6, [pc, #184]	; 248c8 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   2480c:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   24810:	vldr	d6, [pc, #168]	; 248c0 <grisu3_diy_fp_encode_double@@Base+0xc34>
   24814:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   24818:	vldr	d6, [pc, #152]	; 248b8 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   2481c:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   24820:	vldr	d6, [pc, #136]	; 248b0 <grisu3_diy_fp_encode_double@@Base+0xc24>
   24824:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   24828:	vldr	d6, [pc, #120]	; 248a8 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   2482c:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   24830:	vldr	d6, [pc, #104]	; 248a0 <grisu3_diy_fp_encode_double@@Base+0xc14>
   24834:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   24838:	vldr	d6, [pc, #88]	; 24898 <grisu3_diy_fp_encode_double@@Base+0xc0c>
   2483c:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   24840:	vldr	d6, [pc, #72]	; 24890 <grisu3_diy_fp_encode_double@@Base+0xc04>
   24844:	b	24798 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   24848:	mov	r3, r6
   2484c:	mov	r2, r5
   24850:	str	ip, [sp]
   24854:	mov	r0, sl
   24858:	mov	r1, fp
   2485c:	str	r8, [sp, #4]
   24860:	bl	23c8c <grisu3_diy_fp_encode_double@@Base>
   24864:	cmp	r0, #0
   24868:	bne	24558 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   2486c:	add	r1, sp, #36	; 0x24
   24870:	mov	r0, r7
   24874:	bl	145d8 <strtod@plt>
   24878:	ldr	r3, [sp, #36]	; 0x24
   2487c:	vstr	d0, [r8]
   24880:	cmp	r4, r3
   24884:	movcs	r4, r3
   24888:	mov	r7, r4
   2488c:	b	242b4 <grisu3_diy_fp_encode_double@@Base+0x628>
   24890:			; <UNDEFINED> instruction: 0x064dd592
   24894:	strmi	pc, [r0], #207	; 0xcf
   24898:	usatle	lr, #2, r0, asr #30
   2489c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   248a0:	ldmvc	r5!, {r6, sl, fp, pc}
   248a4:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   248a8:	addsvs	r3, r1, r0, lsl #26
   248ac:	mvnmi	r5, #228, 16	; 0xe40000
   248b0:	strbvs	ip, [lr, -r0, lsl #16]
   248b4:			; <UNDEFINED> instruction: 0x43abc16d
   248b8:	ldrbhi	sl, [r8]
   248bc:	cmnmi	r6, #1459617792	; 0x57000000
   248c0:	strbcc	r8, [r0, r0]!
   248c4:	movtmi	ip, #4985	; 0x1379
   248c8:	ldrtcs	r0, [r4], -r0
   248cc:	movwmi	r6, #52213	; 0xcbf5
   248d0:	cdpne	0, 9, cr0, cr0, cr0, {0}
   248d4:	sbcsmi	fp, r6, #196, 24	; 0xc400
   248d8:	strb	r0, [r0, #-0]
   248dc:	adcmi	r3, r2, #156	; 0x9c
   248e0:	andge	r0, r0, #0
   248e4:	rsbmi	r1, sp, #148, 20	; 0x94000
   248e8:	stmda	r0, {}	; <UNPREDICTABLE>
   248ec:	eorsmi	r4, r7, #7733248	; 0x760000
   248f0:	andcs	r0, r0, r0
   248f4:	andmi	sl, r2, #95	; 0x5f
   248f8:	andeq	r0, r0, r0
   248fc:	bicmi	ip, sp, r5, ror #26
   24900:	andeq	r0, r0, r0
   24904:	orrsmi	sp, r7, r4, lsl #15
   24908:	andeq	r0, r0, r0
   2490c:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   24910:	andeq	r0, r0, r0
   24914:	smlawbmi	lr, r0, r4, r8
   24918:	andeq	r0, r0, r0
   2491c:	rscsmi	r6, r8, r0, lsl #20
   24920:	andeq	r0, r0, r0
   24924:	sbcmi	r8, r3, r0, lsl #16
   24928:	andeq	r0, r0, r0
   2492c:	addmi	r4, pc, r0
   24930:	andeq	r0, r0, r0
   24934:	subsmi	r0, r9, r0
   24938:	andeq	r0, r0, r0
   2493c:	eormi	r0, r4, r0

00024940 <flatcc_json_parser_error_string@@Base>:
   24940:	cmp	r0, #34	; 0x22
   24944:	ldrls	r3, [pc, #12]	; 24958 <flatcc_json_parser_error_string@@Base+0x18>
   24948:	addls	r3, r3, r0, lsl #2
   2494c:	ldrls	r0, [r3, #1476]	; 0x5c4
   24950:	ldrhi	r0, [pc, #4]	; 2495c <flatcc_json_parser_error_string@@Base+0x1c>
   24954:	bx	lr
   24958:	strdeq	r1, [r3], -r0
   2495c:			; <UNDEFINED> instruction: 0x00031ab8

00024960 <flatcc_json_parser_set_error@@Base>:
   24960:	ldr	ip, [r0, #20]
   24964:	cmp	ip, #0
   24968:	bne	24984 <flatcc_json_parser_set_error@@Base+0x24>
   2496c:	str	r3, [r0, #20]
   24970:	ldr	r3, [r0, #4]
   24974:	str	r1, [r0, #32]
   24978:	sub	r3, r1, r3
   2497c:	add	r3, r3, #1
   24980:	str	r3, [r0, #16]
   24984:	mov	r0, r2
   24988:	bx	lr
   2498c:	cmp	r1, r2
   24990:	beq	249c8 <flatcc_json_parser_set_error@@Base+0x68>
   24994:	ldrb	r3, [r1]
   24998:	cmp	r3, #34	; 0x22
   2499c:	bne	249a8 <flatcc_json_parser_set_error@@Base+0x48>
   249a0:	add	r0, r1, #1
   249a4:	bx	lr
   249a8:	cmp	r3, #92	; 0x5c
   249ac:	bne	249c0 <flatcc_json_parser_set_error@@Base+0x60>
   249b0:	sub	r3, r2, r1
   249b4:	cmp	r3, #1
   249b8:	ble	249c8 <flatcc_json_parser_set_error@@Base+0x68>
   249bc:	add	r1, r1, #1
   249c0:	add	r1, r1, #1
   249c4:	b	2498c <flatcc_json_parser_set_error@@Base+0x2c>
   249c8:	mov	r3, #20
   249cc:	b	24960 <flatcc_json_parser_set_error@@Base>
   249d0:	cmp	r1, r2
   249d4:	beq	249e4 <flatcc_json_parser_set_error@@Base+0x84>
   249d8:	ldrb	r3, [r1]
   249dc:	cmp	r3, #34	; 0x22
   249e0:	beq	249ec <flatcc_json_parser_set_error@@Base+0x8c>
   249e4:	mov	r3, #16
   249e8:	b	24960 <flatcc_json_parser_set_error@@Base>
   249ec:	add	r0, r1, #1
   249f0:	bx	lr
   249f4:	cmp	r1, r2
   249f8:	beq	24a08 <flatcc_json_parser_set_error@@Base+0xa8>
   249fc:	ldrb	r3, [r1]
   24a00:	cmp	r3, #34	; 0x22
   24a04:	beq	24a10 <flatcc_json_parser_set_error@@Base+0xb0>
   24a08:	mov	r3, #20
   24a0c:	b	24960 <flatcc_json_parser_set_error@@Base>
   24a10:	add	r0, r1, #1
   24a14:	bx	lr

00024a18 <flatcc_json_parser_string_part@@Base>:
   24a18:	cmp	r2, r1
   24a1c:	bne	24a8c <flatcc_json_parser_string_part@@Base+0x74>
   24a20:	mov	r3, #20
   24a24:	mov	r1, r2
   24a28:	b	24a7c <flatcc_json_parser_string_part@@Base+0x64>
   24a2c:	cmp	r2, r1
   24a30:	beq	24a80 <flatcc_json_parser_string_part@@Base+0x68>
   24a34:	mov	lr, r1
   24a38:	ldrb	r3, [r1], #1
   24a3c:	cmp	r3, #34	; 0x22
   24a40:	cmpne	r3, #31
   24a44:	movhi	ip, #1
   24a48:	movls	ip, #0
   24a4c:	cmp	r3, #92	; 0x5c
   24a50:	moveq	ip, #0
   24a54:	andne	ip, ip, #1
   24a58:	cmp	ip, #0
   24a5c:	bne	24a2c <flatcc_json_parser_string_part@@Base+0x14>
   24a60:	cmp	r3, #31
   24a64:	bls	24a70 <flatcc_json_parser_string_part@@Base+0x58>
   24a68:	mov	r0, lr
   24a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   24a70:	mov	r3, #17
   24a74:	mov	r1, lr
   24a78:	pop	{lr}		; (ldr lr, [sp], #4)
   24a7c:	b	24960 <flatcc_json_parser_set_error@@Base>
   24a80:	mov	r3, #20
   24a84:	mov	r1, r2
   24a88:	b	24a78 <flatcc_json_parser_string_part@@Base+0x60>
   24a8c:	push	{lr}		; (str lr, [sp, #-4]!)
   24a90:	b	24a34 <flatcc_json_parser_string_part@@Base+0x1c>

00024a94 <flatcc_json_parser_space_ext@@Base>:
   24a94:	mov	r3, r1
   24a98:	cmp	r3, r2
   24a9c:	mov	r1, r3
   24aa0:	bne	24ab0 <flatcc_json_parser_space_ext@@Base+0x1c>
   24aa4:	mov	r1, r2
   24aa8:	mov	r0, r1
   24aac:	bx	lr
   24ab0:	ldrb	ip, [r1]
   24ab4:	add	r3, r3, #1
   24ab8:	cmp	ip, #32
   24abc:	beq	24a98 <flatcc_json_parser_space_ext@@Base+0x4>
   24ac0:	ldrb	r3, [r1]
   24ac4:	cmp	r3, #32
   24ac8:	bhi	24aa8 <flatcc_json_parser_space_ext@@Base+0x14>
   24acc:	cmp	r3, #10
   24ad0:	beq	24b1c <flatcc_json_parser_space_ext@@Base+0x88>
   24ad4:	bhi	24ae8 <flatcc_json_parser_space_ext@@Base+0x54>
   24ad8:	cmp	r3, #9
   24adc:	beq	24b3c <flatcc_json_parser_space_ext@@Base+0xa8>
   24ae0:	mov	r3, #5
   24ae4:	b	24960 <flatcc_json_parser_set_error@@Base>
   24ae8:	cmp	r3, #13
   24aec:	beq	24afc <flatcc_json_parser_space_ext@@Base+0x68>
   24af0:	cmp	r3, #32
   24af4:	beq	24a94 <flatcc_json_parser_space_ext@@Base>
   24af8:	b	24ae0 <flatcc_json_parser_space_ext@@Base+0x4c>
   24afc:	sub	r3, r2, r1
   24b00:	cmp	r3, #1
   24b04:	ldrbgt	r3, [r1, #1]
   24b08:	movle	r3, #0
   24b0c:	subgt	r3, r3, #10
   24b10:	clzgt	r3, r3
   24b14:	lsrgt	r3, r3, #5
   24b18:	add	r1, r1, r3
   24b1c:	ldr	r3, [r0, #12]
   24b20:	add	r1, r1, #1
   24b24:	str	r1, [r0, #4]
   24b28:	add	r3, r3, #1
   24b2c:	str	r3, [r0, #12]
   24b30:	cmp	r2, r1
   24b34:	bne	24ac0 <flatcc_json_parser_space_ext@@Base+0x2c>
   24b38:	b	24aa4 <flatcc_json_parser_space_ext@@Base+0x10>
   24b3c:	add	r1, r1, #1
   24b40:	b	24b30 <flatcc_json_parser_space_ext@@Base+0x9c>
   24b44:	sub	r3, r2, r1
   24b48:	cmp	r3, #1
   24b4c:	ble	24b70 <flatcc_json_parser_space_ext@@Base+0xdc>
   24b50:	ldrb	r3, [r1]
   24b54:	cmp	r3, #32
   24b58:	bhi	24b74 <flatcc_json_parser_space_ext@@Base+0xe0>
   24b5c:	bne	24b70 <flatcc_json_parser_space_ext@@Base+0xdc>
   24b60:	ldrb	r3, [r1, #1]
   24b64:	cmp	r3, #32
   24b68:	addhi	r1, r1, #1
   24b6c:	bhi	24b74 <flatcc_json_parser_space_ext@@Base+0xe0>
   24b70:	b	24a94 <flatcc_json_parser_space_ext@@Base>
   24b74:	mov	r0, r1
   24b78:	bx	lr
   24b7c:	push	{r4, r5, r6, lr}
   24b80:	mov	r5, r3
   24b84:	mov	r6, r0
   24b88:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   24b8c:	cmp	r2, r0
   24b90:	moveq	r3, #0
   24b94:	beq	24c20 <flatcc_json_parser_space_ext@@Base+0x18c>
   24b98:	ldrb	r3, [r0]
   24b9c:	mov	r4, r2
   24ba0:	cmp	r3, #44	; 0x2c
   24ba4:	beq	24bd8 <flatcc_json_parser_space_ext@@Base+0x144>
   24ba8:	mov	r3, #0
   24bac:	str	r3, [r5]
   24bb0:	ldrb	r3, [r0]
   24bb4:	cmp	r3, #93	; 0x5d
   24bb8:	movne	r3, #9
   24bbc:	movne	r1, r0
   24bc0:	bne	24bfc <flatcc_json_parser_space_ext@@Base+0x168>
   24bc4:	mov	r2, r4
   24bc8:	add	r1, r0, #1
   24bcc:	mov	r0, r6
   24bd0:	pop	{r4, r5, r6, lr}
   24bd4:	b	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   24bd8:	add	r1, r0, #1
   24bdc:	mov	r0, r6
   24be0:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   24be4:	cmp	r2, r0
   24be8:	bne	24c08 <flatcc_json_parser_space_ext@@Base+0x174>
   24bec:	mov	r3, #0
   24bf0:	mov	r1, r2
   24bf4:	str	r3, [r5]
   24bf8:	mov	r3, #9
   24bfc:	mov	r0, r6
   24c00:	pop	{r4, r5, r6, lr}
   24c04:	b	24960 <flatcc_json_parser_set_error@@Base>
   24c08:	ldrb	r3, [r0]
   24c0c:	cmp	r3, #93	; 0x5d
   24c10:	movne	r3, #1
   24c14:	moveq	r3, #0
   24c18:	streq	r3, [r5]
   24c1c:	beq	24bc4 <flatcc_json_parser_space_ext@@Base+0x130>
   24c20:	str	r3, [r5]
   24c24:	pop	{r4, r5, r6, pc}
   24c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c2c:	sub	sp, sp, #28
   24c30:	mov	sl, r3
   24c34:	mov	r3, #0
   24c38:	cmp	r1, r2
   24c3c:	mov	r6, r0
   24c40:	mov	r5, r2
   24c44:	ldr	fp, [sp, #64]	; 0x40
   24c48:	moveq	r1, r2
   24c4c:	strb	r3, [fp]
   24c50:	beq	24c70 <flatcc_json_parser_space_ext@@Base+0x1dc>
   24c54:	ldrb	r3, [r1]
   24c58:	cmp	r3, #34	; 0x22
   24c5c:	addeq	r1, r1, #1
   24c60:	beq	24c70 <flatcc_json_parser_space_ext@@Base+0x1dc>
   24c64:	mov	r3, #5
   24c68:	bl	24960 <flatcc_json_parser_set_error@@Base>
   24c6c:	mov	r1, r0
   24c70:	mov	r2, r5
   24c74:	mov	r0, r6
   24c78:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   24c7c:	cmp	r5, r0
   24c80:	mov	r4, r0
   24c84:	beq	24d60 <flatcc_json_parser_space_ext@@Base+0x2cc>
   24c88:	mov	r8, #0
   24c8c:	mov	r7, sl
   24c90:	mov	r9, r4
   24c94:	add	r3, sp, #12
   24c98:	mov	r1, r4
   24c9c:	mov	r2, r5
   24ca0:	mov	r0, r6
   24ca4:	str	r3, [sp, #4]
   24ca8:	add	r3, sp, #16
   24cac:	str	r3, [sp]
   24cb0:	add	r3, sp, #8
   24cb4:	ldr	ip, [r7]
   24cb8:	blx	ip
   24cbc:	cmp	r5, r0
   24cc0:	mov	r4, r0
   24cc4:	beq	24d60 <flatcc_json_parser_space_ext@@Base+0x2cc>
   24cc8:	cmp	r9, r0
   24ccc:	bne	24d20 <flatcc_json_parser_space_ext@@Base+0x28c>
   24cd0:	ldr	r3, [r7, #4]!
   24cd4:	mov	r9, r0
   24cd8:	cmp	r3, #0
   24cdc:	bne	24c94 <flatcc_json_parser_space_ext@@Base+0x200>
   24ce0:	mov	r1, r0
   24ce4:	mov	r3, #23
   24ce8:	mov	r2, r5
   24cec:	mov	r0, r6
   24cf0:	bl	24960 <flatcc_json_parser_set_error@@Base>
   24cf4:	mov	r4, r0
   24cf8:	b	24d60 <flatcc_json_parser_space_ext@@Base+0x2cc>
   24cfc:	ldrd	r2, [sp, #16]
   24d00:	cmp	r3, #0
   24d04:	cmpeq	r2, #255	; 0xff
   24d08:	uxtbls	r8, r2
   24d0c:	bls	24d48 <flatcc_json_parser_space_ext@@Base+0x2b4>
   24d10:	mov	r3, #7
   24d14:	b	24d30 <flatcc_json_parser_space_ext@@Base+0x29c>
   24d18:	mov	r4, r5
   24d1c:	b	24d60 <flatcc_json_parser_space_ext@@Base+0x2cc>
   24d20:	ldr	r3, [sp, #8]
   24d24:	cmp	r3, #0
   24d28:	beq	24cfc <flatcc_json_parser_space_ext@@Base+0x268>
   24d2c:	mov	r3, #8
   24d30:	mov	r2, r5
   24d34:	mov	r1, r4
   24d38:	mov	r0, r6
   24d3c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   24d40:	cmp	r5, r0
   24d44:	beq	24d18 <flatcc_json_parser_space_ext@@Base+0x284>
   24d48:	ldrb	r3, [fp]
   24d4c:	add	r3, r8, r3
   24d50:	strb	r3, [fp]
   24d54:	ldr	r3, [sp, #12]
   24d58:	cmp	r3, #0
   24d5c:	bne	24c8c <flatcc_json_parser_space_ext@@Base+0x1f8>
   24d60:	mov	r0, r4
   24d64:	add	sp, sp, #28
   24d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d6c:	cmp	r1, r2
   24d70:	push	{r4, r5, r6, lr}
   24d74:	mov	ip, r2
   24d78:	mov	r6, r0
   24d7c:	beq	24d8c <flatcc_json_parser_space_ext@@Base+0x2f8>
   24d80:	ldrb	r4, [r1]
   24d84:	cmp	r4, #91	; 0x5b
   24d88:	beq	24da8 <flatcc_json_parser_space_ext@@Base+0x314>
   24d8c:	mov	r2, #0
   24d90:	mov	r0, r6
   24d94:	pop	{r4, r5, r6, lr}
   24d98:	str	r2, [r3]
   24d9c:	mov	r3, #22
   24da0:	mov	r2, ip
   24da4:	b	24960 <flatcc_json_parser_set_error@@Base>
   24da8:	add	r1, r1, #1
   24dac:	mov	r5, r3
   24db0:	mov	r4, r2
   24db4:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   24db8:	cmp	r2, r0
   24dbc:	beq	24de4 <flatcc_json_parser_space_ext@@Base+0x350>
   24dc0:	ldrb	r3, [r0]
   24dc4:	cmp	r3, #93	; 0x5d
   24dc8:	bne	24de4 <flatcc_json_parser_space_ext@@Base+0x350>
   24dcc:	mov	r3, #0
   24dd0:	add	r1, r0, #1
   24dd4:	mov	r0, r6
   24dd8:	str	r3, [r5]
   24ddc:	pop	{r4, r5, r6, lr}
   24de0:	b	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   24de4:	mov	r3, #1
   24de8:	str	r3, [r5]
   24dec:	pop	{r4, r5, r6, pc}
   24df0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24df4:	mov	r8, r3
   24df8:	sub	sp, sp, #20
   24dfc:	mov	r3, #0
   24e00:	mov	r5, r0
   24e04:	mov	r4, r1
   24e08:	mov	r6, r2
   24e0c:	ldr	r0, [r0]
   24e10:	str	r3, [sp, #8]
   24e14:	ldr	r9, [sp, #56]	; 0x38
   24e18:	ldr	sl, [sp, #64]	; 0x40
   24e1c:	bl	213c0 <flatcc_builder_start_offset_vector@@Base>
   24e20:	subs	r7, r0, #0
   24e24:	bne	24e98 <flatcc_json_parser_space_ext@@Base+0x404>
   24e28:	mov	r1, r4
   24e2c:	add	r3, sp, #12
   24e30:	mov	r2, r6
   24e34:	mov	r0, r5
   24e38:	bl	24d6c <flatcc_json_parser_space_ext@@Base+0x2d8>
   24e3c:	mov	r4, r0
   24e40:	add	fp, sp, #8
   24e44:	ldr	r3, [sp, #12]
   24e48:	cmp	r3, #0
   24e4c:	bne	24ea0 <flatcc_json_parser_space_ext@@Base+0x40c>
   24e50:	cmp	r7, r9
   24e54:	bne	24ea8 <flatcc_json_parser_space_ext@@Base+0x414>
   24e58:	mov	r1, r8
   24e5c:	ldr	r0, [r5]
   24e60:	bl	20908 <flatcc_builder_get_user_frame_ptr@@Base>
   24e64:	mov	r1, r0
   24e68:	ldr	r0, [r5]
   24e6c:	bl	21e10 <flatcc_builder_end_offset_vector_for_unions@@Base>
   24e70:	cmp	r0, #0
   24e74:	str	r0, [sp, #8]
   24e78:	beq	24e98 <flatcc_json_parser_space_ext@@Base+0x404>
   24e7c:	ldrh	r1, [sp, #60]	; 0x3c
   24e80:	ldr	r0, [r5]
   24e84:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   24e88:	cmp	r0, #0
   24e8c:	ldrne	r3, [sp, #8]
   24e90:	strne	r3, [r0]
   24e94:	bne	24ec0 <flatcc_json_parser_space_ext@@Base+0x42c>
   24e98:	mov	r3, #33	; 0x21
   24e9c:	b	24eac <flatcc_json_parser_space_ext@@Base+0x418>
   24ea0:	cmp	r7, r9
   24ea4:	bne	24ecc <flatcc_json_parser_space_ext@@Base+0x438>
   24ea8:	mov	r3, #30
   24eac:	mov	r1, r4
   24eb0:	mov	r2, r6
   24eb4:	mov	r0, r5
   24eb8:	bl	24960 <flatcc_json_parser_set_error@@Base>
   24ebc:	mov	r4, r0
   24ec0:	mov	r0, r4
   24ec4:	add	sp, sp, #20
   24ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ecc:	mov	r1, r8
   24ed0:	ldr	r0, [r5]
   24ed4:	bl	20908 <flatcc_builder_get_user_frame_ptr@@Base>
   24ed8:	ldrb	r3, [r0, r7]
   24edc:	mov	r1, r4
   24ee0:	mov	r2, r6
   24ee4:	mov	r0, r5
   24ee8:	str	fp, [sp]
   24eec:	blx	sl
   24ef0:	cmp	r6, r0
   24ef4:	mov	r4, r0
   24ef8:	beq	24ec0 <flatcc_json_parser_space_ext@@Base+0x42c>
   24efc:	mov	r1, #1
   24f00:	ldr	r0, [r5]
   24f04:	bl	20fd0 <flatcc_builder_extend_offset_vector@@Base>
   24f08:	cmp	r0, #0
   24f0c:	beq	24e98 <flatcc_json_parser_space_ext@@Base+0x404>
   24f10:	ldr	r3, [sp, #8]
   24f14:	mov	r1, r4
   24f18:	mov	r2, r6
   24f1c:	add	r7, r7, #1
   24f20:	str	r3, [r0]
   24f24:	add	r3, sp, #12
   24f28:	mov	r0, r5
   24f2c:	bl	24b7c <flatcc_json_parser_space_ext@@Base+0xe8>
   24f30:	mov	r4, r0
   24f34:	b	24e44 <flatcc_json_parser_space_ext@@Base+0x3b0>

00024f38 <flatcc_json_parser_string_escape@@Base>:
   24f38:	push	{r4, r5, lr}
   24f3c:	sub	lr, r2, r1
   24f40:	cmp	lr, #1
   24f44:	ble	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   24f48:	ldrb	ip, [r1]
   24f4c:	cmp	ip, #92	; 0x5c
   24f50:	beq	24f68 <flatcc_json_parser_string_escape@@Base+0x30>
   24f54:	mov	ip, #0
   24f58:	strb	ip, [r3]
   24f5c:	mov	r3, #18
   24f60:	pop	{r4, r5, lr}
   24f64:	b	24960 <flatcc_json_parser_set_error@@Base>
   24f68:	ldrb	ip, [r1, #1]
   24f6c:	cmp	ip, #102	; 0x66
   24f70:	beq	25204 <flatcc_json_parser_string_escape@@Base+0x2cc>
   24f74:	bhi	24fc4 <flatcc_json_parser_string_escape@@Base+0x8c>
   24f78:	cmp	ip, #47	; 0x2f
   24f7c:	beq	24f8c <flatcc_json_parser_string_escape@@Base+0x54>
   24f80:	bhi	24f9c <flatcc_json_parser_string_escape@@Base+0x64>
   24f84:	cmp	ip, #34	; 0x22
   24f88:	bne	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   24f8c:	mov	r2, #1
   24f90:	strb	r2, [r3]
   24f94:	strb	ip, [r3, #1]
   24f98:	b	24fbc <flatcc_json_parser_string_escape@@Base+0x84>
   24f9c:	cmp	ip, #92	; 0x5c
   24fa0:	beq	24f8c <flatcc_json_parser_string_escape@@Base+0x54>
   24fa4:	cmp	ip, #98	; 0x62
   24fa8:	moveq	r2, #1
   24fac:	strbeq	r2, [r3]
   24fb0:	moveq	r2, #8
   24fb4:	bne	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   24fb8:	strb	r2, [r3, #1]
   24fbc:	add	r0, r1, #2
   24fc0:	pop	{r4, r5, pc}
   24fc4:	cmp	ip, #116	; 0x74
   24fc8:	beq	251e4 <flatcc_json_parser_string_escape@@Base+0x2ac>
   24fcc:	bhi	24ff0 <flatcc_json_parser_string_escape@@Base+0xb8>
   24fd0:	cmp	ip, #110	; 0x6e
   24fd4:	beq	251f4 <flatcc_json_parser_string_escape@@Base+0x2bc>
   24fd8:	cmp	ip, #114	; 0x72
   24fdc:	moveq	r2, #1
   24fe0:	strbeq	r2, [r3]
   24fe4:	moveq	r2, #13
   24fe8:	beq	24fb8 <flatcc_json_parser_string_escape@@Base+0x80>
   24fec:	b	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   24ff0:	cmp	ip, #117	; 0x75
   24ff4:	beq	25084 <flatcc_json_parser_string_escape@@Base+0x14c>
   24ff8:	cmp	ip, #120	; 0x78
   24ffc:	bne	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   25000:	mov	ip, #1
   25004:	cmp	lr, #3
   25008:	strb	ip, [r3]
   2500c:	ble	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   25010:	ldrb	ip, [r1, #2]
   25014:	sub	lr, ip, #48	; 0x30
   25018:	uxtb	r4, lr
   2501c:	cmp	r4, #9
   25020:	lslls	ip, lr, #4
   25024:	bls	25040 <flatcc_json_parser_string_escape@@Base+0x108>
   25028:	orr	ip, ip, #32
   2502c:	sub	lr, ip, #97	; 0x61
   25030:	cmp	lr, #5
   25034:	bhi	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   25038:	sub	ip, ip, #87	; 0x57
   2503c:	lsl	ip, ip, #4
   25040:	ldrb	lr, [r1, #3]
   25044:	uxtb	ip, ip
   25048:	sub	r4, lr, #48	; 0x30
   2504c:	uxtb	r4, r4
   25050:	cmp	r4, #9
   25054:	orrls	ip, r4, ip
   25058:	bls	25078 <flatcc_json_parser_string_escape@@Base+0x140>
   2505c:	orr	lr, lr, #32
   25060:	sub	r4, lr, #97	; 0x61
   25064:	cmp	r4, #5
   25068:	bhi	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   2506c:	sub	lr, lr, #87	; 0x57
   25070:	orr	ip, lr, ip
   25074:	uxtb	ip, ip
   25078:	add	r0, r1, #4
   2507c:	strb	ip, [r3, #1]
   25080:	pop	{r4, r5, pc}
   25084:	cmp	lr, #5
   25088:	ble	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   2508c:	ldrb	ip, [r1, #2]
   25090:	sub	lr, ip, #48	; 0x30
   25094:	uxtb	r4, lr
   25098:	cmp	r4, #9
   2509c:	lslls	ip, lr, #12
   250a0:	uxthls	ip, ip
   250a4:	bls	250c4 <flatcc_json_parser_string_escape@@Base+0x18c>
   250a8:	orr	ip, ip, #32
   250ac:	sub	lr, ip, #97	; 0x61
   250b0:	cmp	lr, #5
   250b4:	bhi	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   250b8:	sub	ip, ip, #87	; 0x57
   250bc:	lsl	ip, ip, #12
   250c0:	and	ip, ip, #61440	; 0xf000
   250c4:	ldrb	lr, [r1, #3]
   250c8:	sub	r4, lr, #48	; 0x30
   250cc:	uxtb	r5, r4
   250d0:	cmp	r5, #9
   250d4:	uxthls	r4, r4
   250d8:	orrls	ip, ip, r4, lsl #8
   250dc:	bls	250fc <flatcc_json_parser_string_escape@@Base+0x1c4>
   250e0:	orr	lr, lr, #32
   250e4:	sub	r4, lr, #97	; 0x61
   250e8:	cmp	r4, #5
   250ec:	bhi	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   250f0:	sub	lr, lr, #87	; 0x57
   250f4:	uxth	lr, lr
   250f8:	orr	ip, ip, lr, lsl #8
   250fc:	ldrb	lr, [r1, #4]
   25100:	and	ip, ip, #65280	; 0xff00
   25104:	sub	r4, lr, #48	; 0x30
   25108:	uxtb	r5, r4
   2510c:	cmp	r5, #9
   25110:	uxthls	r4, r4
   25114:	orrls	ip, ip, r4, lsl #4
   25118:	bls	25138 <flatcc_json_parser_string_escape@@Base+0x200>
   2511c:	orr	lr, lr, #32
   25120:	sub	r4, lr, #97	; 0x61
   25124:	cmp	r4, #5
   25128:	bhi	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   2512c:	sub	lr, lr, #87	; 0x57
   25130:	uxth	lr, lr
   25134:	orr	ip, ip, lr, lsl #4
   25138:	ldrb	lr, [r1, #5]
   2513c:	uxth	ip, ip
   25140:	sub	r4, lr, #48	; 0x30
   25144:	uxtb	r5, r4
   25148:	cmp	r5, #9
   2514c:	orrls	r2, ip, r4
   25150:	bls	2516c <flatcc_json_parser_string_escape@@Base+0x234>
   25154:	orr	lr, lr, #32
   25158:	sub	r4, lr, #97	; 0x61
   2515c:	cmp	r4, #5
   25160:	bhi	24f54 <flatcc_json_parser_string_escape@@Base+0x1c>
   25164:	sub	r2, lr, #87	; 0x57
   25168:	orr	r2, ip, r2
   2516c:	uxth	r2, r2
   25170:	cmp	r2, #127	; 0x7f
   25174:	movls	r0, #1
   25178:	strbls	r2, [r3, #1]
   2517c:	strbls	r0, [r3]
   25180:	bls	251b0 <flatcc_json_parser_string_escape@@Base+0x278>
   25184:	and	ip, r2, #63	; 0x3f
   25188:	cmp	r2, #2048	; 0x800
   2518c:	lsr	r0, r2, #6
   25190:	orr	ip, ip, #128	; 0x80
   25194:	bcs	251b8 <flatcc_json_parser_string_escape@@Base+0x280>
   25198:	mov	r2, #2
   2519c:	strb	r2, [r3]
   251a0:	mvn	r2, r0, lsl #26
   251a4:	strb	ip, [r3, #2]
   251a8:	mvn	r2, r2, lsr #26
   251ac:	strb	r2, [r3, #1]
   251b0:	add	r0, r1, #6
   251b4:	pop	{r4, r5, pc}
   251b8:	mov	lr, #3
   251bc:	strb	lr, [r3]
   251c0:	mvn	lr, #31
   251c4:	orr	r2, lr, r2, lsr #12
   251c8:	strb	ip, [r3, #3]
   251cc:	strb	r2, [r3, #1]
   251d0:	and	r2, r0, #63	; 0x3f
   251d4:	mvn	r2, r2, lsl #25
   251d8:	mvn	r2, r2, lsr #25
   251dc:	strb	r2, [r3, #2]
   251e0:	b	251b0 <flatcc_json_parser_string_escape@@Base+0x278>
   251e4:	mov	r2, #1
   251e8:	strb	r2, [r3]
   251ec:	mov	r2, #9
   251f0:	b	24fb8 <flatcc_json_parser_string_escape@@Base+0x80>
   251f4:	mov	r2, #1
   251f8:	strb	r2, [r3]
   251fc:	mov	r2, #10
   25200:	b	24fb8 <flatcc_json_parser_string_escape@@Base+0x80>
   25204:	mov	r2, #1
   25208:	strb	r2, [r3]
   2520c:	mov	r2, #12
   25210:	b	24fb8 <flatcc_json_parser_string_escape@@Base+0x80>

00025214 <flatcc_json_parser_skip_constant@@Base>:
   25214:	push	{r4, r5, r6, lr}
   25218:	mov	r6, r0
   2521c:	mov	r4, r1
   25220:	mov	r5, r2
   25224:	cmp	r4, r5
   25228:	bne	25234 <flatcc_json_parser_skip_constant@@Base+0x20>
   2522c:	mov	r0, r4
   25230:	pop	{r4, r5, r6, pc}
   25234:	ldrb	r3, [r4]
   25238:	sub	r2, r3, #95	; 0x5f
   2523c:	clz	r2, r2
   25240:	lsr	r2, r2, #5
   25244:	orrs	r2, r2, r3, lsr #7
   25248:	bne	2525c <flatcc_json_parser_skip_constant@@Base+0x48>
   2524c:	sub	r2, r3, #48	; 0x30
   25250:	cmp	r3, #46	; 0x2e
   25254:	cmpne	r2, #9
   25258:	bhi	25268 <flatcc_json_parser_skip_constant@@Base+0x54>
   2525c:	add	r0, r4, #1
   25260:	mov	r4, r0
   25264:	b	25224 <flatcc_json_parser_skip_constant@@Base+0x10>
   25268:	orr	r3, r3, #32
   2526c:	sub	r3, r3, #97	; 0x61
   25270:	cmp	r3, #25
   25274:	bls	2525c <flatcc_json_parser_skip_constant@@Base+0x48>
   25278:	mov	r2, r5
   2527c:	mov	r1, r4
   25280:	mov	r0, r6
   25284:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   25288:	cmp	r4, r0
   2528c:	bne	25260 <flatcc_json_parser_skip_constant@@Base+0x4c>
   25290:	pop	{r4, r5, r6, pc}

00025294 <flatcc_json_parser_match_constant@@Base>:
   25294:	push	{r4, r5, r6, lr}
   25298:	mov	ip, r1
   2529c:	sub	r1, r2, r1
   252a0:	cmp	r1, r3
   252a4:	movle	r3, #0
   252a8:	ldr	r4, [sp, #16]
   252ac:	strle	r3, [r4]
   252b0:	ble	2533c <flatcc_json_parser_match_constant@@Base+0xa8>
   252b4:	add	r1, ip, r3
   252b8:	ldrb	r3, [ip, r3]
   252bc:	mov	lr, r0
   252c0:	cmp	r3, #32
   252c4:	bne	25318 <flatcc_json_parser_match_constant@@Base+0x84>
   252c8:	mov	r5, r2
   252cc:	add	r3, r1, #1
   252d0:	cmp	r5, r3
   252d4:	mov	r1, r3
   252d8:	beq	2530c <flatcc_json_parser_match_constant@@Base+0x78>
   252dc:	ldrb	r2, [r3]
   252e0:	add	r3, r3, #1
   252e4:	cmp	r2, #32
   252e8:	beq	252d0 <flatcc_json_parser_match_constant@@Base+0x3c>
   252ec:	cmp	r2, #34	; 0x22
   252f0:	movne	r3, #1
   252f4:	bne	25310 <flatcc_json_parser_match_constant@@Base+0x7c>
   252f8:	add	r1, r1, #1
   252fc:	mov	r0, lr
   25300:	mov	r2, #0
   25304:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   25308:	mov	r1, r0
   2530c:	mov	r3, #0
   25310:	str	r3, [r4]
   25314:	b	25340 <flatcc_json_parser_match_constant@@Base+0xac>
   25318:	cmp	r3, #34	; 0x22
   2531c:	beq	252f8 <flatcc_json_parser_match_constant@@Base+0x64>
   25320:	cmp	r3, #92	; 0x5c
   25324:	mov	r3, #0
   25328:	str	r3, [r4]
   2532c:	bne	2533c <flatcc_json_parser_match_constant@@Base+0xa8>
   25330:	mov	r3, #18
   25334:	pop	{r4, r5, r6, lr}
   25338:	b	24960 <flatcc_json_parser_set_error@@Base>
   2533c:	mov	r1, ip
   25340:	mov	r0, r1
   25344:	pop	{r4, r5, r6, pc}

00025348 <flatcc_json_parser_double@@Base>:
   25348:	push	{r4, r5, r6, r7, r8, lr}
   2534c:	mov	r4, #0
   25350:	mov	r5, #0
   25354:	cmp	r1, r2
   25358:	strd	r4, [r3]
   2535c:	beq	25404 <flatcc_json_parser_double@@Base+0xbc>
   25360:	ldrb	ip, [r1]
   25364:	cmp	ip, #45	; 0x2d
   25368:	addeq	ip, r1, #1
   2536c:	movne	ip, r1
   25370:	sub	lr, r2, ip
   25374:	cmp	lr, #1
   25378:	ble	253a8 <flatcc_json_parser_double@@Base+0x60>
   2537c:	ldrb	lr, [ip]
   25380:	cmp	lr, #46	; 0x2e
   25384:	beq	2539c <flatcc_json_parser_double@@Base+0x54>
   25388:	cmp	lr, #48	; 0x30
   2538c:	bne	253a8 <flatcc_json_parser_double@@Base+0x60>
   25390:	ldrb	ip, [ip, #1]
   25394:	cmp	ip, #48	; 0x30
   25398:	bne	253a8 <flatcc_json_parser_double@@Base+0x60>
   2539c:	mov	r3, #6
   253a0:	pop	{r4, r5, r6, r7, r8, lr}
   253a4:	b	24960 <flatcc_json_parser_set_error@@Base>
   253a8:	mov	r6, r1
   253ac:	mov	r4, r2
   253b0:	sub	r1, r4, r1
   253b4:	mov	r5, r0
   253b8:	mov	r2, r3
   253bc:	mov	r0, r6
   253c0:	mov	r7, r3
   253c4:	bl	241bc <grisu3_diy_fp_encode_double@@Base+0x530>
   253c8:	cmp	r6, r0
   253cc:	cmpne	r0, #0
   253d0:	mov	r1, r0
   253d4:	bne	25404 <flatcc_json_parser_double@@Base+0xbc>
   253d8:	vldr	d7, [r7]
   253dc:	mov	r2, r4
   253e0:	mov	r1, r6
   253e4:	mov	r0, r5
   253e8:	vldr	d6, [pc, #32]	; 25410 <flatcc_json_parser_double@@Base+0xc8>
   253ec:	vabs.f64	d7, d7
   253f0:	vcmp.f64	d7, d6
   253f4:	vmrs	APSR_nzcv, fpscr
   253f8:	movgt	r3, #7
   253fc:	movle	r3, #6
   25400:	b	253a0 <flatcc_json_parser_double@@Base+0x58>
   25404:	mov	r0, r1
   25408:	pop	{r4, r5, r6, r7, r8, pc}
   2540c:	nop	{0}
   25410:			; <UNDEFINED> instruction: 0xffffffff
   25414:	svcvc	0x00efffff

00025418 <flatcc_json_parser_float@@Base>:
   25418:	mov	ip, #0
   2541c:	cmp	r1, r2
   25420:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25424:	moveq	r0, r1
   25428:	str	ip, [r3]
   2542c:	beq	25504 <flatcc_json_parser_float@@Base+0xec>
   25430:	ldrb	ip, [r1]
   25434:	mov	r7, r3
   25438:	mov	r4, r2
   2543c:	mov	r5, r1
   25440:	mov	r6, r0
   25444:	cmp	ip, #45	; 0x2d
   25448:	addeq	ip, r1, #1
   2544c:	movne	ip, r1
   25450:	sub	r3, r2, ip
   25454:	cmp	r3, #1
   25458:	ble	25484 <flatcc_json_parser_float@@Base+0x6c>
   2545c:	ldrb	r2, [ip]
   25460:	cmp	r2, #46	; 0x2e
   25464:	beq	2547c <flatcc_json_parser_float@@Base+0x64>
   25468:	cmp	r2, #48	; 0x30
   2546c:	bne	25484 <flatcc_json_parser_float@@Base+0x6c>
   25470:	ldrb	r3, [ip, #1]
   25474:	cmp	r3, #48	; 0x30
   25478:	bne	25484 <flatcc_json_parser_float@@Base+0x6c>
   2547c:	mov	r3, #6
   25480:	b	254f4 <flatcc_json_parser_float@@Base+0xdc>
   25484:	mov	r2, sp
   25488:	sub	r1, r4, r5
   2548c:	mov	r0, r5
   25490:	bl	241bc <grisu3_diy_fp_encode_double@@Base+0x530>
   25494:	vldr	d6, [sp]
   25498:	vldr	s15, [pc, #108]	; 2550c <flatcc_json_parser_float@@Base+0xf4>
   2549c:	vcvt.f32.f64	s14, d6
   254a0:	vabs.f32	s11, s14
   254a4:	vcmp.f32	s11, s15
   254a8:	vmrs	APSR_nzcv, fpscr
   254ac:	vstrle	s14, [r7]
   254b0:	ble	254d0 <flatcc_json_parser_float@@Base+0xb8>
   254b4:	vcmpe.f64	d6, #0.0
   254b8:	vldr	s14, [pc, #80]	; 25510 <flatcc_json_parser_float@@Base+0xf8>
   254bc:	mov	r0, r5
   254c0:	vldr	s13, [pc, #76]	; 25514 <flatcc_json_parser_float@@Base+0xfc>
   254c4:	vmrs	APSR_nzcv, fpscr
   254c8:	vmovpl.f32	s14, s13
   254cc:	vstr	s14, [r7]
   254d0:	cmp	r5, r0
   254d4:	cmpne	r0, #0
   254d8:	bne	25504 <flatcc_json_parser_float@@Base+0xec>
   254dc:	vldr	s14, [r7]
   254e0:	vabs.f32	s14, s14
   254e4:	vcmp.f32	s14, s15
   254e8:	vmrs	APSR_nzcv, fpscr
   254ec:	movgt	r3, #7
   254f0:	ble	2547c <flatcc_json_parser_float@@Base+0x64>
   254f4:	mov	r2, r4
   254f8:	mov	r1, r5
   254fc:	mov	r0, r6
   25500:	bl	24960 <flatcc_json_parser_set_error@@Base>
   25504:	add	sp, sp, #12
   25508:	pop	{r4, r5, r6, r7, pc}
   2550c:	svcvc	0x007fffff
   25510:			; <UNDEFINED> instruction: 0xff800000
   25514:	svcvc	0x00800000

00025518 <flatcc_json_parser_integer@@Base>:
   25518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2551c:	cmp	r1, r2
   25520:	ldr	r9, [sp, #36]	; 0x24
   25524:	beq	255d0 <flatcc_json_parser_integer@@Base+0xb8>
   25528:	mov	ip, r1
   2552c:	mov	r6, #0
   25530:	ldrb	r1, [r1]
   25534:	mov	r7, #0
   25538:	mov	r8, #10
   2553c:	sub	r1, r1, #45	; 0x2d
   25540:	clz	r1, r1
   25544:	lsr	r1, r1, #5
   25548:	str	r1, [r3]
   2554c:	add	r3, ip, r1
   25550:	cmp	r3, r2
   25554:	mov	r1, r3
   25558:	beq	255c8 <flatcc_json_parser_integer@@Base+0xb0>
   2555c:	ldrb	lr, [r3], #1
   25560:	sub	r4, lr, #48	; 0x30
   25564:	cmp	r4, #9
   25568:	bls	2558c <flatcc_json_parser_integer@@Base+0x74>
   2556c:	cmp	r1, ip
   25570:	beq	255d8 <flatcc_json_parser_integer@@Base+0xc0>
   25574:	and	r3, lr, #223	; 0xdf
   25578:	cmp	lr, #46	; 0x2e
   2557c:	cmpne	r3, #69	; 0x45
   25580:	bne	255c8 <flatcc_json_parser_integer@@Base+0xb0>
   25584:	mov	r3, #12
   25588:	b	255b4 <flatcc_json_parser_integer@@Base+0x9c>
   2558c:	umull	r4, r5, r6, r8
   25590:	mla	r5, r8, r7, r5
   25594:	subs	sl, r4, #48	; 0x30
   25598:	sbc	fp, r5, #0
   2559c:	adds	r4, sl, lr
   255a0:	adc	r5, fp, #0
   255a4:	cmp	r7, r5
   255a8:	cmpeq	r6, r4
   255ac:	bls	255bc <flatcc_json_parser_integer@@Base+0xa4>
   255b0:	mov	r3, #8
   255b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255b8:	b	24960 <flatcc_json_parser_set_error@@Base>
   255bc:	mov	r6, r4
   255c0:	mov	r7, r5
   255c4:	b	25550 <flatcc_json_parser_integer@@Base+0x38>
   255c8:	mov	r2, r1
   255cc:	strd	r6, [r9]
   255d0:	mov	r0, r2
   255d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   255d8:	mov	r2, ip
   255dc:	b	255d0 <flatcc_json_parser_integer@@Base+0xb8>
   255e0:	push	{r4, r5, r6, r7, lr}
   255e4:	mov	lr, #0
   255e8:	sub	sp, sp, #28
   255ec:	mov	r6, #0
   255f0:	mov	r7, #0
   255f4:	cmp	r1, r2
   255f8:	moveq	r0, r1
   255fc:	strb	lr, [r3]
   25600:	str	lr, [sp, #12]
   25604:	strd	r6, [sp, #16]
   25608:	beq	2566c <flatcc_json_parser_integer@@Base+0x154>
   2560c:	mov	r6, r3
   25610:	add	r3, sp, #16
   25614:	mov	r7, r1
   25618:	mov	r5, r0
   2561c:	str	r3, [sp]
   25620:	add	r3, sp, #12
   25624:	mov	r4, r2
   25628:	bl	25518 <flatcc_json_parser_integer@@Base>
   2562c:	cmp	r7, r0
   25630:	beq	2566c <flatcc_json_parser_integer@@Base+0x154>
   25634:	ldr	r3, [sp, #12]
   25638:	cmp	r3, #0
   2563c:	movne	r3, #8
   25640:	bne	2565c <flatcc_json_parser_integer@@Base+0x144>
   25644:	ldrd	r2, [sp, #16]
   25648:	cmp	r3, #0
   2564c:	cmpeq	r2, #255	; 0xff
   25650:	strbls	r2, [r6]
   25654:	bls	2566c <flatcc_json_parser_integer@@Base+0x154>
   25658:	mov	r3, #7
   2565c:	mov	r1, r0
   25660:	mov	r2, r4
   25664:	mov	r0, r5
   25668:	bl	24960 <flatcc_json_parser_set_error@@Base>
   2566c:	add	sp, sp, #28
   25670:	pop	{r4, r5, r6, r7, pc}

00025674 <flatcc_json_parser_generic_json@@Base>:
   25674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25678:	sub	sp, sp, #532	; 0x214
   2567c:	mov	r3, #0
   25680:	add	r6, sp, #16
   25684:	mov	r5, r0
   25688:	mov	r7, r1
   2568c:	mov	r4, r2
   25690:	ldr	sl, [pc, #1368]	; 25bf0 <flatcc_json_parser_generic_json@@Base+0x57c>
   25694:	mov	r8, r6
   25698:	mov	r9, #1
   2569c:	str	r3, [sp, #12]
   256a0:	cmp	r7, r4
   256a4:	beq	25b08 <flatcc_json_parser_generic_json@@Base+0x494>
   256a8:	cmp	r6, r8
   256ac:	beq	25744 <flatcc_json_parser_generic_json@@Base+0xd0>
   256b0:	ldrb	r3, [r6, #-1]
   256b4:	cmp	r3, #125	; 0x7d
   256b8:	bne	25744 <flatcc_json_parser_generic_json@@Base+0xd0>
   256bc:	ldrb	r3, [r7]
   256c0:	cmp	r3, #34	; 0x22
   256c4:	addeq	r1, r7, #1
   256c8:	beq	256e4 <flatcc_json_parser_generic_json@@Base+0x70>
   256cc:	mov	r1, r7
   256d0:	mov	r3, #5
   256d4:	mov	r2, r4
   256d8:	mov	r0, r5
   256dc:	bl	24960 <flatcc_json_parser_set_error@@Base>
   256e0:	mov	r1, r0
   256e4:	mov	r2, r4
   256e8:	mov	r0, r5
   256ec:	bl	2498c <flatcc_json_parser_set_error@@Base+0x2c>
   256f0:	mov	r1, r0
   256f4:	mov	r0, r5
   256f8:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   256fc:	cmp	r4, r0
   25700:	mov	r1, r0
   25704:	bne	25718 <flatcc_json_parser_generic_json@@Base+0xa4>
   25708:	mov	r3, #10
   2570c:	mov	r2, r4
   25710:	mov	r1, r4
   25714:	b	25728 <flatcc_json_parser_generic_json@@Base+0xb4>
   25718:	ldrb	r3, [r0]
   2571c:	cmp	r3, #58	; 0x3a
   25720:	beq	25734 <flatcc_json_parser_generic_json@@Base+0xc0>
   25724:	mov	r3, #4
   25728:	mov	r0, r5
   2572c:	bl	24960 <flatcc_json_parser_set_error@@Base>
   25730:	b	25b04 <flatcc_json_parser_generic_json@@Base+0x490>
   25734:	add	r1, r0, #1
   25738:	mov	r0, r5
   2573c:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   25740:	mov	r7, r0
   25744:	ldrb	r3, [r7]
   25748:	cmp	r3, #91	; 0x5b
   2574c:	beq	25a70 <flatcc_json_parser_generic_json@@Base+0x3fc>
   25750:	bhi	257b4 <flatcc_json_parser_generic_json@@Base+0x140>
   25754:	cmp	r3, #45	; 0x2d
   25758:	beq	2577c <flatcc_json_parser_generic_json@@Base+0x108>
   2575c:	bhi	25770 <flatcc_json_parser_generic_json@@Base+0xfc>
   25760:	cmp	r3, #34	; 0x22
   25764:	beq	2587c <flatcc_json_parser_generic_json@@Base+0x208>
   25768:	mov	r3, #5
   2576c:	b	25a80 <flatcc_json_parser_generic_json@@Base+0x40c>
   25770:	sub	r2, r3, #48	; 0x30
   25774:	cmp	r2, #9
   25778:	bhi	25768 <flatcc_json_parser_generic_json@@Base+0xf4>
   2577c:	cmp	r7, r4
   25780:	moveq	r0, r4
   25784:	beq	258b0 <flatcc_json_parser_generic_json@@Base+0x23c>
   25788:	cmp	r3, #45	; 0x2d
   2578c:	bne	258f0 <flatcc_json_parser_generic_json@@Base+0x27c>
   25790:	add	r7, r7, #1
   25794:	cmp	r4, r7
   25798:	bne	258f0 <flatcc_json_parser_generic_json@@Base+0x27c>
   2579c:	mov	r3, #6
   257a0:	mov	r2, r4
   257a4:	mov	r1, r4
   257a8:	mov	r0, r5
   257ac:	bl	24960 <flatcc_json_parser_set_error@@Base>
   257b0:	b	258b0 <flatcc_json_parser_generic_json@@Base+0x23c>
   257b4:	cmp	r3, #110	; 0x6e
   257b8:	beq	25a44 <flatcc_json_parser_generic_json@@Base+0x3d0>
   257bc:	bhi	25834 <flatcc_json_parser_generic_json@@Base+0x1c0>
   257c0:	cmp	r3, #102	; 0x66
   257c4:	bne	25768 <flatcc_json_parser_generic_json@@Base+0xf4>
   257c8:	sub	fp, r4, r7
   257cc:	cmp	fp, #3
   257d0:	ble	25814 <flatcc_json_parser_generic_json@@Base+0x1a0>
   257d4:	mov	r2, #4
   257d8:	ldr	r1, [pc, #1044]	; 25bf4 <flatcc_json_parser_generic_json@@Base+0x580>
   257dc:	mov	r0, r7
   257e0:	bl	14554 <memcmp@plt>
   257e4:	cmp	r0, #0
   257e8:	addeq	r0, r7, #4
   257ec:	beq	25828 <flatcc_json_parser_generic_json@@Base+0x1b4>
   257f0:	cmp	fp, #4
   257f4:	beq	25814 <flatcc_json_parser_generic_json@@Base+0x1a0>
   257f8:	mov	r2, #5
   257fc:	ldr	r1, [pc, #1012]	; 25bf8 <flatcc_json_parser_generic_json@@Base+0x584>
   25800:	mov	r0, r7
   25804:	bl	14554 <memcmp@plt>
   25808:	cmp	r0, #0
   2580c:	addeq	r0, r7, #5
   25810:	beq	25828 <flatcc_json_parser_generic_json@@Base+0x1b4>
   25814:	add	r3, sp, #7
   25818:	mov	r2, r4
   2581c:	mov	r1, r7
   25820:	mov	r0, r5
   25824:	bl	255e0 <flatcc_json_parser_integer@@Base+0xc8>
   25828:	cmp	r7, r0
   2582c:	bne	258b0 <flatcc_json_parser_generic_json@@Base+0x23c>
   25830:	b	25768 <flatcc_json_parser_generic_json@@Base+0xf4>
   25834:	cmp	r3, #116	; 0x74
   25838:	beq	257c8 <flatcc_json_parser_generic_json@@Base+0x154>
   2583c:	cmp	r3, #123	; 0x7b
   25840:	bne	25768 <flatcc_json_parser_generic_json@@Base+0xf4>
   25844:	add	r3, sp, #528	; 0x210
   25848:	cmp	r6, r3
   2584c:	beq	25a7c <flatcc_json_parser_generic_json@@Base+0x408>
   25850:	mov	r3, #125	; 0x7d
   25854:	mov	r2, r4
   25858:	add	r1, r7, #1
   2585c:	mov	r0, r5
   25860:	strb	r3, [r6], #1
   25864:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   25868:	cmp	r4, r0
   2586c:	beq	25ab8 <flatcc_json_parser_generic_json@@Base+0x444>
   25870:	ldrb	r3, [r0]
   25874:	cmp	r3, #125	; 0x7d
   25878:	b	25ab4 <flatcc_json_parser_generic_json@@Base+0x440>
   2587c:	mov	r2, r4
   25880:	mov	r1, r7
   25884:	mov	r0, r5
   25888:	bl	249d0 <flatcc_json_parser_set_error@@Base+0x70>
   2588c:	cmp	r0, r4
   25890:	mov	r1, r0
   25894:	beq	258a4 <flatcc_json_parser_generic_json@@Base+0x230>
   25898:	ldrb	r3, [r0]
   2589c:	cmp	r3, #34	; 0x22
   258a0:	bne	258b8 <flatcc_json_parser_generic_json@@Base+0x244>
   258a4:	mov	r2, r4
   258a8:	mov	r0, r5
   258ac:	bl	249f4 <flatcc_json_parser_set_error@@Base+0x94>
   258b0:	mov	r7, #0
   258b4:	b	25af4 <flatcc_json_parser_generic_json@@Base+0x480>
   258b8:	mov	r2, r4
   258bc:	mov	r0, r5
   258c0:	bl	24a18 <flatcc_json_parser_string_part@@Base>
   258c4:	cmp	r4, r0
   258c8:	mov	r1, r0
   258cc:	beq	258dc <flatcc_json_parser_generic_json@@Base+0x268>
   258d0:	ldrb	r3, [r0]
   258d4:	cmp	r3, #34	; 0x22
   258d8:	beq	258a4 <flatcc_json_parser_generic_json@@Base+0x230>
   258dc:	add	r3, sp, #8
   258e0:	mov	r2, r4
   258e4:	mov	r0, r5
   258e8:	bl	24f38 <flatcc_json_parser_string_escape@@Base>
   258ec:	b	2588c <flatcc_json_parser_generic_json@@Base+0x218>
   258f0:	ldrb	r3, [r7]
   258f4:	cmp	r3, #48	; 0x30
   258f8:	bne	25918 <flatcc_json_parser_generic_json@@Base+0x2a4>
   258fc:	add	r0, r7, #1
   25900:	cmp	r4, r0
   25904:	bne	25954 <flatcc_json_parser_generic_json@@Base+0x2e0>
   25908:	mov	r3, #6
   2590c:	mov	r2, r4
   25910:	mov	r1, r0
   25914:	b	257a8 <flatcc_json_parser_generic_json@@Base+0x134>
   25918:	sub	r3, r3, #49	; 0x31
   2591c:	cmp	r3, #8
   25920:	movhi	r3, #6
   25924:	movhi	r2, r4
   25928:	movhi	r1, r7
   2592c:	bhi	257a8 <flatcc_json_parser_generic_json@@Base+0x134>
   25930:	add	r7, r7, #1
   25934:	cmp	r4, r7
   25938:	mov	r0, r7
   2593c:	beq	25908 <flatcc_json_parser_generic_json@@Base+0x294>
   25940:	ldrb	r3, [r0]
   25944:	add	r7, r7, #1
   25948:	sub	r3, r3, #48	; 0x30
   2594c:	cmp	r3, #9
   25950:	bls	25934 <flatcc_json_parser_generic_json@@Base+0x2c0>
   25954:	ldrb	r3, [r0]
   25958:	cmp	r3, #46	; 0x2e
   2595c:	bne	259a0 <flatcc_json_parser_generic_json@@Base+0x32c>
   25960:	ldrb	r3, [r0, #1]
   25964:	sub	r3, r3, #48	; 0x30
   25968:	cmp	r3, #9
   2596c:	movhi	r3, #6
   25970:	movhi	r2, r4
   25974:	addhi	r1, r0, #1
   25978:	bhi	257a8 <flatcc_json_parser_generic_json@@Base+0x134>
   2597c:	add	r3, r0, #2
   25980:	cmp	r4, r3
   25984:	mov	r0, r3
   25988:	beq	25908 <flatcc_json_parser_generic_json@@Base+0x294>
   2598c:	ldrb	r2, [r0]
   25990:	add	r3, r3, #1
   25994:	sub	r2, r2, #48	; 0x30
   25998:	cmp	r2, #9
   2599c:	bls	25980 <flatcc_json_parser_generic_json@@Base+0x30c>
   259a0:	ldrb	r3, [r0]
   259a4:	and	r3, r3, #223	; 0xdf
   259a8:	cmp	r3, #69	; 0x45
   259ac:	bne	25a18 <flatcc_json_parser_generic_json@@Base+0x3a4>
   259b0:	add	r1, r0, #1
   259b4:	cmp	r4, r1
   259b8:	beq	2579c <flatcc_json_parser_generic_json@@Base+0x128>
   259bc:	ldrb	r3, [r0, #1]
   259c0:	sub	r3, r3, #43	; 0x2b
   259c4:	tst	r3, #253	; 0xfd
   259c8:	bne	259d8 <flatcc_json_parser_generic_json@@Base+0x364>
   259cc:	add	r1, r0, #2
   259d0:	cmp	r4, r1
   259d4:	beq	259e8 <flatcc_json_parser_generic_json@@Base+0x374>
   259d8:	ldrb	r3, [r1]
   259dc:	sub	r3, r3, #48	; 0x30
   259e0:	cmp	r3, #9
   259e4:	bls	259f4 <flatcc_json_parser_generic_json@@Base+0x380>
   259e8:	mov	r3, #6
   259ec:	mov	r2, r4
   259f0:	b	257a8 <flatcc_json_parser_generic_json@@Base+0x134>
   259f4:	add	r1, r1, #1
   259f8:	cmp	r1, r4
   259fc:	mov	r0, r1
   25a00:	beq	25908 <flatcc_json_parser_generic_json@@Base+0x294>
   25a04:	ldrb	r3, [r0]
   25a08:	add	r1, r1, #1
   25a0c:	sub	r3, r3, #48	; 0x30
   25a10:	cmp	r3, #9
   25a14:	bls	259f8 <flatcc_json_parser_generic_json@@Base+0x384>
   25a18:	ldrb	r3, [r0]
   25a1c:	cmp	r3, #32
   25a20:	beq	258b0 <flatcc_json_parser_generic_json@@Base+0x23c>
   25a24:	bhi	25bcc <flatcc_json_parser_generic_json@@Base+0x558>
   25a28:	cmp	r3, #9
   25a2c:	bcc	25908 <flatcc_json_parser_generic_json@@Base+0x294>
   25a30:	cmp	r3, #11
   25a34:	bls	258b0 <flatcc_json_parser_generic_json@@Base+0x23c>
   25a38:	cmp	r3, #13
   25a3c:	bne	25908 <flatcc_json_parser_generic_json@@Base+0x294>
   25a40:	b	258b0 <flatcc_json_parser_generic_json@@Base+0x23c>
   25a44:	sub	r3, r4, r7
   25a48:	cmp	r3, #3
   25a4c:	ble	25768 <flatcc_json_parser_generic_json@@Base+0xf4>
   25a50:	mov	r2, #4
   25a54:	mov	r1, sl
   25a58:	mov	r0, r7
   25a5c:	bl	14554 <memcmp@plt>
   25a60:	cmp	r0, #0
   25a64:	bne	25768 <flatcc_json_parser_generic_json@@Base+0xf4>
   25a68:	add	r0, r7, #4
   25a6c:	b	258b0 <flatcc_json_parser_generic_json@@Base+0x23c>
   25a70:	add	r3, sp, #528	; 0x210
   25a74:	cmp	r6, r3
   25a78:	bne	25a8c <flatcc_json_parser_generic_json@@Base+0x418>
   25a7c:	mov	r3, #2
   25a80:	mov	r2, r4
   25a84:	mov	r1, r7
   25a88:	b	25728 <flatcc_json_parser_generic_json@@Base+0xb4>
   25a8c:	mov	r3, #93	; 0x5d
   25a90:	mov	r2, r4
   25a94:	add	r1, r7, #1
   25a98:	mov	r0, r5
   25a9c:	strb	r3, [r6], #1
   25aa0:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   25aa4:	cmp	r4, r0
   25aa8:	beq	25ab8 <flatcc_json_parser_generic_json@@Base+0x444>
   25aac:	ldrb	r3, [r0]
   25ab0:	cmp	r3, #93	; 0x5d
   25ab4:	beq	258b0 <flatcc_json_parser_generic_json@@Base+0x23c>
   25ab8:	mov	r7, r0
   25abc:	b	256a0 <flatcc_json_parser_generic_json@@Base+0x2c>
   25ac0:	ldrb	r3, [r6, #-1]
   25ac4:	sub	fp, r6, #1
   25ac8:	cmp	r3, #93	; 0x5d
   25acc:	bne	25b14 <flatcc_json_parser_generic_json@@Base+0x4a0>
   25ad0:	mov	r1, r0
   25ad4:	add	r3, sp, #12
   25ad8:	mov	r2, r4
   25adc:	mov	r0, r5
   25ae0:	bl	24b7c <flatcc_json_parser_space_ext@@Base+0xe8>
   25ae4:	ldr	r3, [sp, #12]
   25ae8:	cmp	r3, #0
   25aec:	bne	25ab8 <flatcc_json_parser_generic_json@@Base+0x444>
   25af0:	mov	r6, fp
   25af4:	cmp	r0, r4
   25af8:	beq	25bb0 <flatcc_json_parser_generic_json@@Base+0x53c>
   25afc:	cmp	r6, r8
   25b00:	bne	25ac0 <flatcc_json_parser_generic_json@@Base+0x44c>
   25b04:	mov	r4, r0
   25b08:	mov	r0, r4
   25b0c:	add	sp, sp, #532	; 0x214
   25b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b14:	mov	r1, r0
   25b18:	mov	r2, r4
   25b1c:	mov	r0, r5
   25b20:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   25b24:	cmp	r4, r0
   25b28:	streq	r7, [sp, #12]
   25b2c:	beq	25ae4 <flatcc_json_parser_generic_json@@Base+0x470>
   25b30:	ldrb	r3, [r0]
   25b34:	cmp	r3, #44	; 0x2c
   25b38:	beq	25b6c <flatcc_json_parser_generic_json@@Base+0x4f8>
   25b3c:	str	r7, [sp, #12]
   25b40:	ldrb	r3, [r0]
   25b44:	cmp	r3, #125	; 0x7d
   25b48:	movne	r3, #10
   25b4c:	movne	r2, r4
   25b50:	movne	r1, r0
   25b54:	bne	25b8c <flatcc_json_parser_generic_json@@Base+0x518>
   25b58:	add	r1, r0, #1
   25b5c:	mov	r2, r4
   25b60:	mov	r0, r5
   25b64:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   25b68:	b	25ae4 <flatcc_json_parser_generic_json@@Base+0x470>
   25b6c:	add	r1, r0, #1
   25b70:	mov	r0, r5
   25b74:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   25b78:	cmp	r4, r0
   25b7c:	bne	25b98 <flatcc_json_parser_generic_json@@Base+0x524>
   25b80:	mov	r3, #10
   25b84:	mov	r1, r4
   25b88:	str	r7, [sp, #12]
   25b8c:	mov	r0, r5
   25b90:	bl	24960 <flatcc_json_parser_set_error@@Base>
   25b94:	b	25ae4 <flatcc_json_parser_generic_json@@Base+0x470>
   25b98:	ldrb	r3, [r0]
   25b9c:	cmp	r3, #125	; 0x7d
   25ba0:	strne	r9, [sp, #12]
   25ba4:	bne	25ae4 <flatcc_json_parser_generic_json@@Base+0x470>
   25ba8:	str	r7, [sp, #12]
   25bac:	b	25b58 <flatcc_json_parser_generic_json@@Base+0x4e4>
   25bb0:	cmp	r6, r8
   25bb4:	beq	25b08 <flatcc_json_parser_generic_json@@Base+0x494>
   25bb8:	ldrb	r3, [r6, #-1]
   25bbc:	cmp	r3, #93	; 0x5d
   25bc0:	moveq	r3, #9
   25bc4:	movne	r3, #10
   25bc8:	b	2570c <flatcc_json_parser_generic_json@@Base+0x98>
   25bcc:	cmp	r3, #58	; 0x3a
   25bd0:	beq	258b0 <flatcc_json_parser_generic_json@@Base+0x23c>
   25bd4:	bhi	25be0 <flatcc_json_parser_generic_json@@Base+0x56c>
   25bd8:	cmp	r3, #44	; 0x2c
   25bdc:	b	25a3c <flatcc_json_parser_generic_json@@Base+0x3c8>
   25be0:	cmp	r3, #93	; 0x5d
   25be4:	beq	258b0 <flatcc_json_parser_generic_json@@Base+0x23c>
   25be8:	cmp	r3, #125	; 0x7d
   25bec:	b	25a3c <flatcc_json_parser_generic_json@@Base+0x3c8>
   25bf0:	ldrdeq	r2, [r3], -lr
   25bf4:	ldrdeq	lr, [r2], -r6
   25bf8:	ldrdeq	lr, [r2], -fp

00025bfc <flatcc_json_parser_unmatched_symbol@@Base>:
   25bfc:	ldr	r3, [r0, #8]
   25c00:	tst	r3, #1
   25c04:	beq	25c6c <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   25c08:	push	{r4, r5, r6, lr}
   25c0c:	mov	r4, r0
   25c10:	mov	r5, r2
   25c14:	bl	2498c <flatcc_json_parser_set_error@@Base+0x2c>
   25c18:	mov	r1, r0
   25c1c:	mov	r0, r4
   25c20:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   25c24:	cmp	r2, r0
   25c28:	mov	r1, r0
   25c2c:	beq	25c58 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   25c30:	ldrb	r3, [r0]
   25c34:	cmp	r3, #58	; 0x3a
   25c38:	bne	25c58 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   25c3c:	add	r1, r0, #1
   25c40:	mov	r0, r4
   25c44:	bl	24b44 <flatcc_json_parser_space_ext@@Base+0xb0>
   25c48:	mov	r1, r0
   25c4c:	mov	r0, r4
   25c50:	pop	{r4, r5, r6, lr}
   25c54:	b	25674 <flatcc_json_parser_generic_json@@Base>
   25c58:	mov	r2, r5
   25c5c:	mov	r0, r4
   25c60:	pop	{r4, r5, r6, lr}
   25c64:	mov	r3, #4
   25c68:	b	24960 <flatcc_json_parser_set_error@@Base>
   25c6c:	mov	r3, #13
   25c70:	b	25c68 <flatcc_json_parser_unmatched_symbol@@Base+0x6c>

00025c74 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   25c74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c78:	sub	sp, sp, #36	; 0x24
   25c7c:	mov	r6, r0
   25c80:	mov	r8, r2
   25c84:	str	r3, [sp, #8]
   25c88:	ldr	r3, [sp, #72]	; 0x48
   25c8c:	str	r3, [sp, #20]
   25c90:	bl	249d0 <flatcc_json_parser_set_error@@Base+0x70>
   25c94:	mov	r1, r0
   25c98:	mov	r9, r0
   25c9c:	mov	r0, r6
   25ca0:	bl	24a18 <flatcc_json_parser_string_part@@Base>
   25ca4:	cmp	r2, r0
   25ca8:	mov	r7, r0
   25cac:	beq	25e08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x194>
   25cb0:	ldrb	r3, [r0]
   25cb4:	cmp	r3, #34	; 0x22
   25cb8:	bne	25e08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x194>
   25cbc:	sub	r2, r0, r9
   25cc0:	sub	r3, r0, r9
   25cc4:	lsr	r5, r2, #2
   25cc8:	str	r3, [sp, #12]
   25ccc:	and	r3, r3, #3
   25cd0:	add	r5, r5, r5, lsl #1
   25cd4:	cmp	r3, #2
   25cd8:	addeq	r5, r5, #1
   25cdc:	beq	25ce8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   25ce0:	cmp	r3, #3
   25ce4:	addeq	r5, r5, #2
   25ce8:	mov	r2, #1
   25cec:	mvn	r3, #0
   25cf0:	ldr	r0, [r6]
   25cf4:	mov	r1, r2
   25cf8:	bl	21368 <flatcc_builder_start_vector@@Base>
   25cfc:	subs	r4, r0, #0
   25d00:	bne	25f70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   25d04:	mov	r1, r5
   25d08:	ldr	r0, [r6]
   25d0c:	bl	20ea8 <flatcc_builder_extend_vector@@Base>
   25d10:	subs	r3, r0, #0
   25d14:	str	r3, [sp, #16]
   25d18:	beq	25f70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   25d1c:	ldr	r3, [pc, #628]	; 25f98 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x324>
   25d20:	mov	sl, r9
   25d24:	ldr	r1, [sp, #20]
   25d28:	add	r2, r3, #256	; 0x100
   25d2c:	cmp	r1, #0
   25d30:	mov	r1, r0
   25d34:	moveq	r3, r2
   25d38:	cmp	r5, #0
   25d3c:	mov	lr, r3
   25d40:	sub	r2, r7, r9
   25d44:	movne	r3, r5
   25d48:	mvneq	r3, #0
   25d4c:	str	r3, [sp, #4]
   25d50:	mov	ip, r2
   25d54:	mov	r0, #0
   25d58:	cmp	r0, ip
   25d5c:	beq	25e98 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   25d60:	ldrb	r3, [sl, r0]
   25d64:	add	fp, sp, #32
   25d68:	add	fp, fp, r0
   25d6c:	ldrb	r3, [lr, r3]
   25d70:	cmp	r3, #63	; 0x3f
   25d74:	strb	r3, [fp, #-4]
   25d78:	bls	25d90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   25d7c:	cmp	r3, #65	; 0x41
   25d80:	bne	25e28 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b4>
   25d84:	add	sl, sl, #1
   25d88:	sub	ip, ip, #1
   25d8c:	sub	r0, r0, #1
   25d90:	add	r0, r0, #1
   25d94:	cmp	r0, #3
   25d98:	bls	25d58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe4>
   25d9c:	ldr	r3, [sp, #4]
   25da0:	cmp	r3, #2
   25da4:	bls	25e88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   25da8:	ldrb	r0, [sp, #29]
   25dac:	add	sl, sl, #4
   25db0:	add	r1, r1, #3
   25db4:	ldrb	r3, [sp, #28]
   25db8:	lsr	r2, r0, #4
   25dbc:	orr	r2, r2, r3, lsl #2
   25dc0:	strb	r2, [r1, #-3]
   25dc4:	ldrb	r2, [sp, #30]
   25dc8:	lsr	r3, r2, #2
   25dcc:	orr	r3, r3, r0, lsl #4
   25dd0:	strb	r3, [r1, #-2]
   25dd4:	ldrb	r3, [sp, #31]
   25dd8:	orr	r2, r3, r2, lsl #6
   25ddc:	ldr	r3, [sp, #4]
   25de0:	strb	r2, [r1, #-1]
   25de4:	sub	r2, ip, #4
   25de8:	subs	r3, r3, #3
   25dec:	str	r3, [sp, #4]
   25df0:	bne	25d50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdc>
   25df4:	ldr	r3, [sp, #12]
   25df8:	cmp	r4, #0
   25dfc:	sub	r2, r3, r2
   25e00:	beq	25f10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x29c>
   25e04:	add	r7, r9, r2
   25e08:	ldr	r2, [sp, #8]
   25e0c:	mov	r3, #0
   25e10:	str	r3, [r2]
   25e14:	ldr	r3, [sp, #20]
   25e18:	cmp	r3, #0
   25e1c:	movne	r3, #32
   25e20:	moveq	r3, #31
   25e24:	b	25f80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x30c>
   25e28:	cmp	r3, #66	; 0x42
   25e2c:	addeq	r3, r0, #1
   25e30:	beq	25e54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e0>
   25e34:	mov	r3, r0
   25e38:	b	25e60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   25e3c:	ldrb	fp, [sl, r3]
   25e40:	ldrb	fp, [lr, fp]
   25e44:	sub	fp, fp, #65	; 0x41
   25e48:	cmp	fp, #1
   25e4c:	bhi	25e60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   25e50:	add	r3, r3, #1
   25e54:	cmp	r3, #7
   25e58:	cmpls	r3, ip
   25e5c:	bcc	25e3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   25e60:	sub	r3, ip, r3
   25e64:	mov	ip, r0
   25e68:	cmp	ip, #2
   25e6c:	beq	25ea0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x22c>
   25e70:	cmp	ip, #3
   25e74:	beq	25ec8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   25e78:	cmp	ip, #0
   25e7c:	movne	r4, #4
   25e80:	moveq	r2, r3
   25e84:	b	25df4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   25e88:	mov	r4, #1
   25e8c:	b	25df4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   25e90:	mov	r4, #5
   25e94:	b	25df4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   25e98:	mov	r3, #0
   25e9c:	b	25e68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   25ea0:	ldrb	r0, [sp, #29]
   25ea4:	lsl	r4, r0, #4
   25ea8:	ands	r4, r4, #255	; 0xff
   25eac:	bne	25e90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   25eb0:	ldrb	r2, [sp, #28]
   25eb4:	lsr	r0, r0, #4
   25eb8:	orr	r0, r0, r2, lsl #2
   25ebc:	strb	r0, [r1], #1
   25ec0:	mov	r2, r3
   25ec4:	b	25df4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   25ec8:	ldrb	r0, [sp, #30]
   25ecc:	lsl	r4, r0, #6
   25ed0:	ands	r4, r4, #255	; 0xff
   25ed4:	bne	25e90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   25ed8:	ldr	ip, [sp, #4]
   25edc:	cmp	ip, #1
   25ee0:	ldreq	r4, [sp, #4]
   25ee4:	beq	25df4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   25ee8:	lsr	r0, r0, #2
   25eec:	add	r1, r1, #2
   25ef0:	ldrb	ip, [sp, #29]
   25ef4:	ldrb	lr, [sp, #28]
   25ef8:	lsr	r2, ip, #4
   25efc:	orr	ip, r0, ip, lsl #4
   25f00:	orr	r2, r2, lr, lsl #2
   25f04:	strb	r2, [r1, #-2]
   25f08:	strb	ip, [r1, #-1]
   25f0c:	b	25ec0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x24c>
   25f10:	ldr	r3, [sp, #12]
   25f14:	cmp	r3, r2
   25f18:	bne	25e04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   25f1c:	ldr	r3, [sp, #16]
   25f20:	sub	r1, r1, r3
   25f24:	cmp	r5, r1
   25f28:	bhi	25f5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e8>
   25f2c:	ldr	r0, [r6]
   25f30:	bl	21cc4 <flatcc_builder_end_vector@@Base>
   25f34:	ldr	r3, [sp, #8]
   25f38:	cmp	r0, #0
   25f3c:	str	r0, [r3]
   25f40:	beq	25f70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   25f44:	mov	r2, r8
   25f48:	mov	r1, r7
   25f4c:	mov	r0, r6
   25f50:	add	sp, sp, #36	; 0x24
   25f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f58:	b	249f4 <flatcc_json_parser_set_error@@Base+0x94>
   25f5c:	sub	r1, r5, r1
   25f60:	ldr	r0, [r6]
   25f64:	bl	21214 <flatcc_builder_truncate_vector@@Base>
   25f68:	cmp	r0, #0
   25f6c:	beq	25f2c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   25f70:	ldr	r2, [sp, #8]
   25f74:	mov	r3, #0
   25f78:	str	r3, [r2]
   25f7c:	mov	r3, #33	; 0x21
   25f80:	mov	r2, r8
   25f84:	mov	r1, r7
   25f88:	mov	r0, r6
   25f8c:	add	sp, sp, #36	; 0x24
   25f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f94:	b	24960 <flatcc_json_parser_set_error@@Base>
   25f98:	andeq	r2, r3, r0, asr #10

00025f9c <flatcc_json_parser_build_string@@Base>:
   25f9c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   25fa0:	mov	r5, r0
   25fa4:	mov	r6, r2
   25fa8:	mov	r8, r3
   25fac:	bl	249d0 <flatcc_json_parser_set_error@@Base+0x70>
   25fb0:	mov	r1, r0
   25fb4:	mov	r7, r0
   25fb8:	mov	r0, r5
   25fbc:	bl	24a18 <flatcc_json_parser_string_part@@Base>
   25fc0:	cmp	r2, r0
   25fc4:	mov	r4, r0
   25fc8:	beq	2600c <flatcc_json_parser_build_string@@Base+0x70>
   25fcc:	ldrb	r3, [r0]
   25fd0:	cmp	r3, #34	; 0x22
   25fd4:	bne	2600c <flatcc_json_parser_build_string@@Base+0x70>
   25fd8:	sub	r2, r0, r7
   25fdc:	mov	r1, r7
   25fe0:	ldr	r0, [r5]
   25fe4:	bl	22278 <flatcc_builder_create_string@@Base>
   25fe8:	mov	r1, r4
   25fec:	mov	r2, r6
   25ff0:	str	r0, [r8]
   25ff4:	mov	r0, r5
   25ff8:	bl	249f4 <flatcc_json_parser_set_error@@Base+0x94>
   25ffc:	mov	r4, r0
   26000:	mov	r0, r4
   26004:	add	sp, sp, #8
   26008:	pop	{r4, r5, r6, r7, r8, pc}
   2600c:	ldr	r0, [r5]
   26010:	bl	21408 <flatcc_builder_start_string@@Base>
   26014:	cmp	r0, #0
   26018:	bne	260c4 <flatcc_json_parser_build_string@@Base+0x128>
   2601c:	sub	r2, r4, r7
   26020:	mov	r1, r7
   26024:	ldr	r0, [r5]
   26028:	bl	21144 <flatcc_builder_append_string@@Base>
   2602c:	cmp	r0, #0
   26030:	beq	260c4 <flatcc_json_parser_build_string@@Base+0x128>
   26034:	cmp	r4, r6
   26038:	beq	26048 <flatcc_json_parser_build_string@@Base+0xac>
   2603c:	ldrb	r3, [r4]
   26040:	cmp	r3, #34	; 0x22
   26044:	bne	26054 <flatcc_json_parser_build_string@@Base+0xb8>
   26048:	ldr	r0, [r5]
   2604c:	bl	22370 <flatcc_builder_end_string@@Base>
   26050:	b	25fe8 <flatcc_json_parser_build_string@@Base+0x4c>
   26054:	mov	r1, r4
   26058:	add	r3, sp, #4
   2605c:	mov	r2, r6
   26060:	mov	r0, r5
   26064:	bl	24f38 <flatcc_json_parser_string_escape@@Base>
   26068:	mov	r4, r0
   2606c:	ldrb	r2, [sp, #4]
   26070:	add	r1, sp, #5
   26074:	ldr	r0, [r5]
   26078:	bl	21144 <flatcc_builder_append_string@@Base>
   2607c:	cmp	r0, #0
   26080:	beq	260c4 <flatcc_json_parser_build_string@@Base+0x128>
   26084:	mov	r2, r6
   26088:	mov	r1, r4
   2608c:	mov	r0, r5
   26090:	bl	24a18 <flatcc_json_parser_string_part@@Base>
   26094:	cmp	r6, r0
   26098:	mov	r7, r0
   2609c:	bne	260a8 <flatcc_json_parser_build_string@@Base+0x10c>
   260a0:	mov	r4, r7
   260a4:	b	26034 <flatcc_json_parser_build_string@@Base+0x98>
   260a8:	sub	r2, r0, r4
   260ac:	mov	r1, r4
   260b0:	ldr	r0, [r5]
   260b4:	bl	21144 <flatcc_builder_append_string@@Base>
   260b8:	cmp	r0, #0
   260bc:	bne	260a0 <flatcc_json_parser_build_string@@Base+0x104>
   260c0:	mov	r4, r7
   260c4:	mov	r3, #0
   260c8:	str	r3, [r8]
   260cc:	b	26000 <flatcc_json_parser_build_string@@Base+0x64>

000260d0 <flatcc_json_parser_prepare_unions@@Base>:
   260d0:	push	{r4, r5, r6, r7, r8, lr}
   260d4:	mov	r5, r1
   260d8:	mov	r1, #24
   260dc:	mov	r4, r0
   260e0:	mov	r7, r2
   260e4:	mul	r1, r1, r3
   260e8:	mov	r6, r3
   260ec:	ldr	r8, [sp, #24]
   260f0:	add	r1, r1, #8
   260f4:	ldr	r0, [r0]
   260f8:	bl	20810 <flatcc_builder_enter_user_frame@@Base>
   260fc:	cmp	r0, #0
   26100:	str	r0, [r8]
   26104:	bne	26120 <flatcc_json_parser_prepare_unions@@Base+0x50>
   26108:	mov	r2, r7
   2610c:	mov	r1, r5
   26110:	mov	r0, r4
   26114:	mov	r3, #33	; 0x21
   26118:	pop	{r4, r5, r6, r7, r8, lr}
   2611c:	b	24960 <flatcc_json_parser_set_error@@Base>
   26120:	mov	r1, r0
   26124:	ldr	r0, [r4]
   26128:	bl	20908 <flatcc_builder_get_user_frame_ptr@@Base>
   2612c:	str	r6, [r0]
   26130:	mov	r0, r5
   26134:	pop	{r4, r5, r6, r7, r8, pc}

00026138 <flatcc_json_parser_finalize_unions@@Base>:
   26138:	push	{r4, r5, r6, r7, r8, lr}
   2613c:	mov	r5, r0
   26140:	mov	r4, r1
   26144:	mov	r1, r3
   26148:	mov	r6, r3
   2614c:	mov	r7, r2
   26150:	ldr	r0, [r0]
   26154:	bl	20908 <flatcc_builder_get_user_frame_ptr@@Base>
   26158:	ldr	r3, [r0, #4]
   2615c:	cmp	r3, #0
   26160:	beq	2617c <flatcc_json_parser_finalize_unions@@Base+0x44>
   26164:	mov	r1, r4
   26168:	mov	r3, #27
   2616c:	mov	r2, r7
   26170:	mov	r0, r5
   26174:	bl	24960 <flatcc_json_parser_set_error@@Base>
   26178:	mov	r4, r0
   2617c:	mov	r1, r6
   26180:	ldr	r0, [r5]
   26184:	bl	208c8 <flatcc_builder_exit_user_frame_at@@Base>
   26188:	mov	r0, r4
   2618c:	pop	{r4, r5, r6, r7, r8, pc}

00026190 <flatcc_json_parser_union@@Base>:
   26190:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   26194:	mov	r4, r0
   26198:	mov	r7, r1
   2619c:	mov	r5, r3
   261a0:	mov	r6, r2
   261a4:	ldr	r0, [r0]
   261a8:	ldr	r1, [sp, #44]	; 0x2c
   261ac:	bl	20908 <flatcc_builder_get_user_frame_ptr@@Base>
   261b0:	mov	r3, #24
   261b4:	mla	r3, r3, r5, r0
   261b8:	ldr	r2, [r3, #8]
   261bc:	cmp	r2, #0
   261c0:	movne	r3, #28
   261c4:	bne	26228 <flatcc_json_parser_union@@Base+0x98>
   261c8:	ldrb	r2, [r3, #20]
   261cc:	cmp	r2, #0
   261d0:	bne	26214 <flatcc_json_parser_union@@Base+0x84>
   261d4:	ldr	r2, [r0, #4]
   261d8:	mov	r1, r7
   261dc:	add	r2, r2, #1
   261e0:	str	r2, [r0, #4]
   261e4:	mov	r0, r4
   261e8:	ldr	r2, [r4, #12]
   261ec:	str	r2, [r3, #16]
   261f0:	ldr	r2, [r4, #4]
   261f4:	str	r7, [r3, #8]
   261f8:	str	r2, [r3, #12]
   261fc:	mov	r2, r6
   26200:	bl	25674 <flatcc_json_parser_generic_json@@Base>
   26204:	mov	r5, r0
   26208:	mov	r0, r5
   2620c:	add	sp, sp, #16
   26210:	pop	{r4, r5, r6, r7, r8, pc}
   26214:	ldrb	r3, [r3, #21]
   26218:	cmp	r3, #0
   2621c:	strb	r3, [sp, #8]
   26220:	bne	2623c <flatcc_json_parser_union@@Base+0xac>
   26224:	mov	r3, #25
   26228:	mov	r2, r6
   2622c:	mov	r1, r7
   26230:	mov	r0, r4
   26234:	bl	24960 <flatcc_json_parser_set_error@@Base>
   26238:	b	26204 <flatcc_json_parser_union@@Base+0x74>
   2623c:	ldr	r2, [r0, #4]
   26240:	mov	r1, r7
   26244:	add	r8, sp, #8
   26248:	ldr	r5, [sp, #48]	; 0x30
   2624c:	sub	r2, r2, #1
   26250:	str	r2, [r0, #4]
   26254:	add	r2, sp, #12
   26258:	mov	r0, r4
   2625c:	str	r2, [sp]
   26260:	mov	r2, r6
   26264:	blx	r5
   26268:	cmp	r6, r0
   2626c:	mov	r5, r0
   26270:	beq	26208 <flatcc_json_parser_union@@Base+0x78>
   26274:	ldrh	r1, [sp, #40]	; 0x28
   26278:	ldm	r8, {r2, r3}
   2627c:	ldr	r0, [r4]
   26280:	bl	226c8 <flatcc_builder_table_add_union@@Base>
   26284:	cmp	r0, #0
   26288:	beq	26208 <flatcc_json_parser_union@@Base+0x78>
   2628c:	mov	r3, #28
   26290:	mov	r2, r6
   26294:	mov	r1, r5
   26298:	b	26230 <flatcc_json_parser_union@@Base+0xa0>

0002629c <flatcc_json_parser_union_type@@Base>:
   2629c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262a0:	sub	sp, sp, #28
   262a4:	mov	r9, r1
   262a8:	mov	r4, r0
   262ac:	mov	r5, r3
   262b0:	mov	r6, r2
   262b4:	ldr	r0, [r0]
   262b8:	ldr	r1, [sp, #68]	; 0x44
   262bc:	bl	20908 <flatcc_builder_get_user_frame_ptr@@Base>
   262c0:	mov	r3, #24
   262c4:	add	sl, r0, #8
   262c8:	mul	r3, r3, r5
   262cc:	add	r7, sl, r3
   262d0:	str	r3, [sp, #12]
   262d4:	ldrb	r3, [r7, #12]
   262d8:	cmp	r3, #0
   262dc:	movne	r3, #28
   262e0:	movne	r2, r6
   262e4:	movne	r1, r9
   262e8:	bne	26400 <flatcc_json_parser_union_type@@Base+0x164>
   262ec:	mov	r3, #1
   262f0:	add	fp, r7, #13
   262f4:	mov	r8, r0
   262f8:	mov	r2, r6
   262fc:	mov	r1, r9
   26300:	mov	r0, r4
   26304:	strb	r3, [r7, #12]
   26308:	mov	r3, fp
   2630c:	bl	255e0 <flatcc_json_parser_integer@@Base+0xc8>
   26310:	cmp	r9, r0
   26314:	mov	r5, r0
   26318:	bne	26338 <flatcc_json_parser_union_type@@Base+0x9c>
   2631c:	mov	r1, r0
   26320:	mov	r2, r6
   26324:	str	fp, [sp]
   26328:	mov	r0, r4
   2632c:	ldr	r3, [sp, #72]	; 0x48
   26330:	bl	24c28 <flatcc_json_parser_space_ext@@Base+0x194>
   26334:	mov	r5, r0
   26338:	ldr	r3, [sp, #12]
   2633c:	ldr	r1, [sl, r3]
   26340:	ldr	r3, [r8, #4]
   26344:	cmp	r1, #0
   26348:	bne	26368 <flatcc_json_parser_union_type@@Base+0xcc>
   2634c:	ldrb	r2, [r7, #13]
   26350:	cmp	r2, #0
   26354:	addne	r3, r3, #1
   26358:	str	r3, [r8, #4]
   2635c:	mov	r0, r5
   26360:	add	sp, sp, #28
   26364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26368:	cmp	r3, #0
   2636c:	bne	26384 <flatcc_json_parser_union_type@@Base+0xe8>
   26370:	ldr	r3, [pc, #152]	; 26410 <flatcc_json_parser_union_type@@Base+0x174>
   26374:	movw	r2, #965	; 0x3c5
   26378:	ldr	r1, [pc, #148]	; 26414 <flatcc_json_parser_union_type@@Base+0x178>
   2637c:	ldr	r0, [pc, #148]	; 26418 <flatcc_json_parser_union_type@@Base+0x17c>
   26380:	bl	14620 <__assert_fail@plt>
   26384:	sub	r3, r3, #1
   26388:	ldr	r9, [r4, #12]
   2638c:	add	r2, sp, #20
   26390:	mov	r0, r4
   26394:	str	r3, [r8, #4]
   26398:	ldr	r3, [r7, #8]
   2639c:	ldr	r8, [r4, #4]
   263a0:	ldr	sl, [sp, #76]	; 0x4c
   263a4:	str	r3, [r4, #12]
   263a8:	ldr	r3, [r7, #4]
   263ac:	str	r3, [r4, #4]
   263b0:	ldrb	r3, [r7, #13]
   263b4:	add	r7, sp, #16
   263b8:	str	r2, [sp]
   263bc:	mov	r2, r6
   263c0:	strb	r3, [sp, #16]
   263c4:	blx	sl
   263c8:	cmp	r6, r0
   263cc:	moveq	r5, r6
   263d0:	beq	2635c <flatcc_json_parser_union_type@@Base+0xc0>
   263d4:	ldrh	r1, [sp, #64]	; 0x40
   263d8:	ldm	r7, {r2, r3}
   263dc:	ldr	r0, [r4]
   263e0:	bl	226c8 <flatcc_builder_table_add_union@@Base>
   263e4:	cmp	r0, #0
   263e8:	streq	r8, [r4, #4]
   263ec:	streq	r9, [r4, #12]
   263f0:	beq	2635c <flatcc_json_parser_union_type@@Base+0xc0>
   263f4:	mov	r3, #28
   263f8:	mov	r2, r6
   263fc:	mov	r1, r5
   26400:	mov	r0, r4
   26404:	bl	24960 <flatcc_json_parser_set_error@@Base>
   26408:	mov	r5, r0
   2640c:	b	2635c <flatcc_json_parser_union_type@@Base+0xc0>
   26410:	andeq	r2, r3, r0, asr #14
   26414:	andeq	r2, r3, r9, asr #17
   26418:	andeq	r2, r3, r3, lsl r9

0002641c <flatcc_json_parser_union_vector@@Base>:
   2641c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26420:	mov	r4, r0
   26424:	mov	r5, r1
   26428:	mov	r9, r3
   2642c:	mov	r6, r2
   26430:	ldr	r0, [r0]
   26434:	ldr	r1, [sp, #36]	; 0x24
   26438:	ldrh	r7, [sp, #32]
   2643c:	ldr	r8, [sp, #40]	; 0x28
   26440:	bl	20908 <flatcc_builder_get_user_frame_ptr@@Base>
   26444:	mov	r3, #24
   26448:	add	r2, r0, #8
   2644c:	mul	r3, r3, r9
   26450:	ldr	r1, [r2, r3]
   26454:	add	ip, r2, r3
   26458:	cmp	r1, #0
   2645c:	beq	26478 <flatcc_json_parser_union_vector@@Base+0x5c>
   26460:	mov	r2, r6
   26464:	mov	r1, r5
   26468:	mov	r0, r4
   2646c:	mov	r3, #28
   26470:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   26474:	b	24960 <flatcc_json_parser_set_error@@Base>
   26478:	ldrb	lr, [ip, #12]
   2647c:	ldr	r1, [r0, #4]
   26480:	cmp	lr, #0
   26484:	bne	264b8 <flatcc_json_parser_union_vector@@Base+0x9c>
   26488:	add	r1, r1, #1
   2648c:	str	r1, [r0, #4]
   26490:	mov	r0, r4
   26494:	ldr	r1, [r4, #12]
   26498:	str	r1, [ip, #8]
   2649c:	ldr	r1, [r4, #4]
   264a0:	str	r1, [ip, #4]
   264a4:	mov	r1, r5
   264a8:	str	r5, [r2, r3]
   264ac:	mov	r2, r6
   264b0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   264b4:	b	25674 <flatcc_json_parser_generic_json@@Base>
   264b8:	sub	r1, r1, #1
   264bc:	mov	r2, r6
   264c0:	str	r1, [r0, #4]
   264c4:	mov	r1, r5
   264c8:	mov	r0, r4
   264cc:	str	r7, [sp, #36]	; 0x24
   264d0:	str	r8, [sp, #40]	; 0x28
   264d4:	ldr	r3, [ip, #16]
   264d8:	str	r3, [sp, #32]
   264dc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   264e0:	ldr	r3, [ip, #20]
   264e4:	b	24df0 <flatcc_json_parser_space_ext@@Base+0x35c>

000264e8 <flatcc_json_parser_union_type_vector@@Base>:
   264e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264ec:	sub	sp, sp, #36	; 0x24
   264f0:	mov	r4, r0
   264f4:	mov	r5, r1
   264f8:	mov	r7, r3
   264fc:	mov	r6, r2
   26500:	ldr	r0, [r0]
   26504:	ldr	r1, [sp, #76]	; 0x4c
   26508:	ldrh	sl, [sp, #72]	; 0x48
   2650c:	bl	20908 <flatcc_builder_get_user_frame_ptr@@Base>
   26510:	mov	r3, #24
   26514:	add	r0, r0, #8
   26518:	mul	r7, r3, r7
   2651c:	add	r8, r0, r7
   26520:	ldrb	r3, [r8, #12]
   26524:	cmp	r3, #0
   26528:	movne	r3, #28
   2652c:	bne	266c0 <flatcc_json_parser_union_type_vector@@Base+0x1d8>
   26530:	mov	r2, #1
   26534:	mvn	r3, #0
   26538:	mov	r1, r2
   2653c:	strb	r2, [r8, #12]
   26540:	ldr	r0, [r4]
   26544:	bl	21368 <flatcc_builder_start_vector@@Base>
   26548:	cmp	r0, #0
   2654c:	bne	26694 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   26550:	mov	r1, r5
   26554:	add	r3, sp, #28
   26558:	mov	r2, r6
   2655c:	mov	r0, r4
   26560:	bl	24d6c <flatcc_json_parser_space_ext@@Base+0x2d8>
   26564:	mov	r5, r0
   26568:	add	fp, sp, #27
   2656c:	ldr	r3, [sp, #28]
   26570:	ldr	r0, [r4]
   26574:	cmp	r3, #0
   26578:	bne	26634 <flatcc_json_parser_union_type_vector@@Base+0x14c>
   2657c:	bl	21d38 <flatcc_builder_vector_count@@Base>
   26580:	mov	r9, r0
   26584:	mov	r1, r0
   26588:	ldr	r0, [r4]
   2658c:	str	r9, [r8, #16]
   26590:	bl	20810 <flatcc_builder_enter_user_frame@@Base>
   26594:	mov	r1, r0
   26598:	mov	r8, r0
   2659c:	ldr	r0, [r4]
   265a0:	bl	20908 <flatcc_builder_get_user_frame_ptr@@Base>
   265a4:	mov	fp, r0
   265a8:	ldr	r0, [r4]
   265ac:	bl	21d44 <flatcc_builder_vector_edit@@Base>
   265b0:	mov	r1, r0
   265b4:	mov	r2, r9
   265b8:	mov	r0, fp
   265bc:	bl	14548 <memcpy@plt>
   265c0:	ldr	r0, [r4]
   265c4:	bl	21cc4 <flatcc_builder_end_vector@@Base>
   265c8:	subs	fp, r0, #0
   265cc:	beq	26694 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   265d0:	sub	r1, sl, #1
   265d4:	ldr	r0, [r4]
   265d8:	bl	225a8 <flatcc_builder_table_add_offset@@Base>
   265dc:	cmp	r0, #0
   265e0:	beq	26694 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   265e4:	str	fp, [r0]
   265e8:	ldr	r0, [r4]
   265ec:	ldr	r1, [sp, #76]	; 0x4c
   265f0:	bl	20908 <flatcc_builder_get_user_frame_ptr@@Base>
   265f4:	add	r3, r0, #8
   265f8:	ldr	r1, [r3, r7]
   265fc:	add	r2, r3, r7
   26600:	ldr	r3, [r0, #4]
   26604:	str	r8, [r2, #20]
   26608:	cmp	r1, #0
   2660c:	addeq	r3, r3, #1
   26610:	streq	r3, [r0, #4]
   26614:	beq	266d4 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   26618:	cmp	r3, #0
   2661c:	bne	2670c <flatcc_json_parser_union_type_vector@@Base+0x224>
   26620:	ldr	r3, [pc, #308]	; 2675c <flatcc_json_parser_union_type_vector@@Base+0x274>
   26624:	movw	r2, #1122	; 0x462
   26628:	ldr	r1, [pc, #304]	; 26760 <flatcc_json_parser_union_type_vector@@Base+0x278>
   2662c:	ldr	r0, [pc, #304]	; 26764 <flatcc_json_parser_union_type_vector@@Base+0x27c>
   26630:	bl	14620 <__assert_fail@plt>
   26634:	mov	r1, #1
   26638:	bl	20ea8 <flatcc_builder_extend_vector@@Base>
   2663c:	subs	r3, r0, #0
   26640:	str	r3, [sp, #20]
   26644:	beq	26694 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   26648:	mov	r1, r5
   2664c:	mov	r3, fp
   26650:	mov	r2, r6
   26654:	mov	r0, r4
   26658:	bl	255e0 <flatcc_json_parser_integer@@Base+0xc8>
   2665c:	cmp	r5, r0
   26660:	mov	r9, r0
   26664:	movne	r5, r0
   26668:	bne	2669c <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   2666c:	mov	r1, r5
   26670:	mov	r2, r6
   26674:	str	fp, [sp]
   26678:	mov	r0, r4
   2667c:	ldr	r3, [sp, #80]	; 0x50
   26680:	bl	24c28 <flatcc_json_parser_space_ext@@Base+0x194>
   26684:	cmp	r6, r0
   26688:	cmpne	r9, r0
   2668c:	mov	r5, r0
   26690:	bne	2669c <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   26694:	mov	r3, #33	; 0x21
   26698:	b	266c0 <flatcc_json_parser_union_type_vector@@Base+0x1d8>
   2669c:	ldrb	r0, [sp, #27]
   266a0:	ldr	r3, [sp, #88]	; 0x58
   266a4:	blx	r3
   266a8:	cmp	r0, #0
   266ac:	bne	266e4 <flatcc_json_parser_union_type_vector@@Base+0x1fc>
   266b0:	ldr	r3, [r4, #8]
   266b4:	tst	r3, #1
   266b8:	bne	266e0 <flatcc_json_parser_union_type_vector@@Base+0x1f8>
   266bc:	mov	r3, #15
   266c0:	mov	r1, r5
   266c4:	mov	r2, r6
   266c8:	mov	r0, r4
   266cc:	bl	24960 <flatcc_json_parser_set_error@@Base>
   266d0:	mov	r5, r0
   266d4:	mov	r0, r5
   266d8:	add	sp, sp, #36	; 0x24
   266dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266e0:	strb	r0, [sp, #27]
   266e4:	ldrb	r3, [sp, #27]
   266e8:	mov	r1, r5
   266ec:	mov	r0, r4
   266f0:	ldr	r2, [sp, #20]
   266f4:	strb	r3, [r2]
   266f8:	add	r3, sp, #28
   266fc:	mov	r2, r6
   26700:	bl	24b7c <flatcc_json_parser_space_ext@@Base+0xe8>
   26704:	mov	r5, r0
   26708:	b	2656c <flatcc_json_parser_union_type_vector@@Base+0x84>
   2670c:	sub	r3, r3, #1
   26710:	ldr	r7, [r4, #4]
   26714:	ldr	fp, [r4, #12]
   26718:	str	r3, [r0, #4]
   2671c:	mov	r0, r4
   26720:	ldr	r3, [r2, #8]
   26724:	str	r3, [r4, #12]
   26728:	ldr	r3, [r2, #4]
   2672c:	mov	r2, r6
   26730:	str	r3, [r4, #4]
   26734:	ldr	r3, [sp, #84]	; 0x54
   26738:	stm	sp, {r9, sl}
   2673c:	str	r3, [sp, #8]
   26740:	mov	r3, r8
   26744:	bl	24df0 <flatcc_json_parser_space_ext@@Base+0x35c>
   26748:	cmp	r6, r0
   2674c:	strne	r7, [r4, #4]
   26750:	strne	fp, [r4, #12]
   26754:	moveq	r5, r6
   26758:	b	266d4 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   2675c:	andeq	r2, r3, lr, asr r7
   26760:	andeq	r2, r3, r9, asr #17
   26764:	andeq	r2, r3, r3, lsl r9

00026768 <flatcc_json_parser_table_as_root@@Base>:
   26768:	push	{r4, r5, r6, r7, r8, r9, lr}
   2676c:	sub	sp, sp, #52	; 0x34
   26770:	subs	r4, r1, #0
   26774:	addeq	r4, sp, #8
   26778:	mov	r5, r2
   2677c:	add	r6, r2, r3
   26780:	mov	r7, r0
   26784:	ldr	r9, [sp, #80]	; 0x50
   26788:	mov	r2, #24
   2678c:	mov	r1, #0
   26790:	add	r0, r4, #16
   26794:	bl	145c0 <memset@plt>
   26798:	mov	r3, #1
   2679c:	mov	r2, #0
   267a0:	str	r7, [r4]
   267a4:	mov	r0, r7
   267a8:	ldr	r1, [sp, #84]	; 0x54
   267ac:	asr	r8, r9, #1
   267b0:	stmib	r4, {r5, r9}
   267b4:	str	r3, [r4, #12]
   267b8:	and	r8, r8, #2
   267bc:	str	r5, [r4, #24]
   267c0:	mov	r3, r8
   267c4:	str	r6, [r4, #28]
   267c8:	str	r5, [r4, #32]
   267cc:	bl	20ca4 <flatcc_builder_start_buffer@@Base>
   267d0:	cmp	r0, #0
   267d4:	beq	267e8 <flatcc_json_parser_table_as_root@@Base+0x80>
   267d8:	mvn	r6, #0
   267dc:	mov	r0, r6
   267e0:	add	sp, sp, #52	; 0x34
   267e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   267e8:	mov	r2, r6
   267ec:	add	r3, sp, #4
   267f0:	ldr	r6, [sp, #88]	; 0x58
   267f4:	mov	r1, r5
   267f8:	mov	r0, r4
   267fc:	blx	r6
   26800:	ldr	r6, [r4, #20]
   26804:	cmp	r6, #0
   26808:	bne	267dc <flatcc_json_parser_table_as_root@@Base+0x74>
   2680c:	mov	r0, r7
   26810:	ldr	r1, [sp, #4]
   26814:	bl	20d40 <flatcc_builder_end_buffer@@Base>
   26818:	cmp	r0, #0
   2681c:	beq	267d8 <flatcc_json_parser_table_as_root@@Base+0x70>
   26820:	str	r5, [r4, #36]	; 0x24
   26824:	b	267dc <flatcc_json_parser_table_as_root@@Base+0x74>

00026828 <flatcc_json_parser_struct_as_root@@Base>:
   26828:	b	26768 <flatcc_json_parser_table_as_root@@Base>
   2682c:	andeq	r0, r0, r0
   26830:	cmp	r0, #1000	; 0x3e8
   26834:	push	{r4, r5, lr}
   26838:	mov	r3, r0
   2683c:	bcc	26888 <flatcc_json_parser_struct_as_root@@Base+0x60>
   26840:	movw	r0, #9999	; 0x270f
   26844:	cmp	r3, r0
   26848:	movhi	r0, #5
   2684c:	movls	r0, #4
   26850:	mov	ip, #0
   26854:	tst	r0, #1
   26858:	add	r2, r1, r0
   2685c:	strb	ip, [r1, r0]
   26860:	beq	26908 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   26864:	cmp	r0, #3
   26868:	beq	268d4 <flatcc_json_parser_struct_as_root@@Base+0xac>
   2686c:	cmp	r0, #5
   26870:	beq	268a4 <flatcc_json_parser_struct_as_root@@Base+0x7c>
   26874:	cmp	r0, #1
   26878:	popne	{r4, r5, pc}
   2687c:	add	r3, r3, #48	; 0x30
   26880:	strb	r3, [r2, #-1]
   26884:	pop	{r4, r5, pc}
   26888:	cmp	r0, #99	; 0x63
   2688c:	movhi	r0, #3
   26890:	bhi	26850 <flatcc_json_parser_struct_as_root@@Base+0x28>
   26894:	cmp	r3, #9
   26898:	movhi	r0, #2
   2689c:	movls	r0, #1
   268a0:	b	26850 <flatcc_json_parser_struct_as_root@@Base+0x28>
   268a4:	mov	ip, #100	; 0x64
   268a8:	ldr	lr, [pc, #192]	; 26970 <flatcc_json_parser_struct_as_root@@Base+0x148>
   268ac:	udiv	r4, r3, ip
   268b0:	mls	ip, ip, r4, r3
   268b4:	uxth	r3, r4
   268b8:	uxth	ip, ip
   268bc:	add	r5, lr, ip, lsl #1
   268c0:	ldrb	ip, [lr, ip, lsl #1]
   268c4:	strb	ip, [r2, #-2]
   268c8:	ldrb	ip, [r5, #1]
   268cc:	strb	ip, [r2, #-1]
   268d0:	add	r2, r1, #3
   268d4:	mov	r1, #100	; 0x64
   268d8:	ldr	ip, [pc, #144]	; 26970 <flatcc_json_parser_struct_as_root@@Base+0x148>
   268dc:	sub	r2, r2, #2
   268e0:	udiv	lr, r3, r1
   268e4:	mls	r1, r1, lr, r3
   268e8:	uxth	r3, lr
   268ec:	uxth	r1, r1
   268f0:	add	r4, ip, r1, lsl #1
   268f4:	ldrb	r1, [ip, r1, lsl #1]
   268f8:	strb	r1, [r2]
   268fc:	ldrb	r1, [r4, #1]
   26900:	strb	r1, [r2, #1]
   26904:	b	2687c <flatcc_json_parser_struct_as_root@@Base+0x54>
   26908:	cmp	r0, #2
   2690c:	beq	26948 <flatcc_json_parser_struct_as_root@@Base+0x120>
   26910:	cmp	r0, #4
   26914:	popne	{r4, r5, pc}
   26918:	mov	ip, #100	; 0x64
   2691c:	ldr	lr, [pc, #76]	; 26970 <flatcc_json_parser_struct_as_root@@Base+0x148>
   26920:	udiv	r4, r3, ip
   26924:	mls	ip, ip, r4, r3
   26928:	uxth	r3, r4
   2692c:	uxth	ip, ip
   26930:	add	r5, lr, ip, lsl #1
   26934:	ldrb	ip, [lr, ip, lsl #1]
   26938:	strb	ip, [r2, #-2]
   2693c:	ldrb	ip, [r5, #1]
   26940:	strb	ip, [r2, #-1]
   26944:	add	r2, r1, #2
   26948:	mov	lr, #100	; 0x64
   2694c:	ldr	ip, [pc, #28]	; 26970 <flatcc_json_parser_struct_as_root@@Base+0x148>
   26950:	udiv	r1, r3, lr
   26954:	mls	r3, lr, r1, r3
   26958:	uxth	r3, r3
   2695c:	add	r1, ip, r3, lsl #1
   26960:	ldrb	r3, [ip, r3, lsl #1]
   26964:	strb	r3, [r2, #-2]
   26968:	ldrb	r3, [r1, #1]
   2696c:	b	26880 <flatcc_json_parser_struct_as_root@@Base+0x58>
   26970:	andeq	r2, r3, r8, ror fp
   26974:	movw	r2, #9999	; 0x270f
   26978:	push	{r4, lr}
   2697c:	mov	r3, r0
   26980:	cmp	r0, r2
   26984:	bls	26a20 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   26988:	ldr	r2, [pc, #636]	; 26c0c <flatcc_json_parser_struct_as_root@@Base+0x3e4>
   2698c:	cmp	r0, r2
   26990:	bls	269fc <flatcc_json_parser_struct_as_root@@Base+0x1d4>
   26994:	ldr	r2, [pc, #628]	; 26c10 <flatcc_json_parser_struct_as_root@@Base+0x3e8>
   26998:	cmp	r0, r2
   2699c:	movhi	r0, #10
   269a0:	bhi	269b4 <flatcc_json_parser_struct_as_root@@Base+0x18c>
   269a4:	ldr	r0, [pc, #616]	; 26c14 <flatcc_json_parser_struct_as_root@@Base+0x3ec>
   269a8:	cmp	r3, r0
   269ac:	movhi	r0, #9
   269b0:	movls	r0, #8
   269b4:	mov	ip, #0
   269b8:	tst	r0, #1
   269bc:	add	r2, r1, r0
   269c0:	strb	ip, [r1, r0]
   269c4:	beq	26b04 <flatcc_json_parser_struct_as_root@@Base+0x2dc>
   269c8:	sub	r1, r0, #1
   269cc:	cmp	r1, #8
   269d0:	ldrls	pc, [pc, r1, lsl #2]
   269d4:	b	26b00 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   269d8:	strdeq	r6, [r2], -r8
   269dc:	andeq	r6, r2, r0, lsl #22
   269e0:	andeq	r6, r2, ip, asr #21
   269e4:	andeq	r6, r2, r0, lsl #22
   269e8:	andeq	r6, r2, r0, lsr #21
   269ec:	andeq	r6, r2, r0, lsl #22
   269f0:	andeq	r6, r2, r4, ror sl
   269f4:	andeq	r6, r2, r0, lsl #22
   269f8:	andeq	r6, r2, r8, asr #20
   269fc:	ldr	r2, [pc, #532]	; 26c18 <flatcc_json_parser_struct_as_root@@Base+0x3f0>
   26a00:	cmp	r0, r2
   26a04:	movhi	r0, #7
   26a08:	bhi	269b4 <flatcc_json_parser_struct_as_root@@Base+0x18c>
   26a0c:	ldr	r0, [pc, #520]	; 26c1c <flatcc_json_parser_struct_as_root@@Base+0x3f4>
   26a10:	cmp	r3, r0
   26a14:	movhi	r0, #6
   26a18:	movls	r0, #5
   26a1c:	b	269b4 <flatcc_json_parser_struct_as_root@@Base+0x18c>
   26a20:	cmp	r0, #99	; 0x63
   26a24:	bls	26a38 <flatcc_json_parser_struct_as_root@@Base+0x210>
   26a28:	cmp	r0, #1000	; 0x3e8
   26a2c:	movcs	r0, #4
   26a30:	movcc	r0, #3
   26a34:	b	269b4 <flatcc_json_parser_struct_as_root@@Base+0x18c>
   26a38:	cmp	r0, #9
   26a3c:	movhi	r0, #2
   26a40:	movls	r0, #1
   26a44:	b	269b4 <flatcc_json_parser_struct_as_root@@Base+0x18c>
   26a48:	mov	r1, #100	; 0x64
   26a4c:	ldr	ip, [pc, #460]	; 26c20 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   26a50:	sub	r2, r2, #2
   26a54:	udiv	lr, r3, r1
   26a58:	mls	r1, r1, lr, r3
   26a5c:	mov	r3, lr
   26a60:	add	r4, ip, r1, lsl #1
   26a64:	ldrb	r1, [ip, r1, lsl #1]
   26a68:	strb	r1, [r2]
   26a6c:	ldrb	r1, [r4, #1]
   26a70:	strb	r1, [r2, #1]
   26a74:	mov	r1, #100	; 0x64
   26a78:	ldr	ip, [pc, #416]	; 26c20 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   26a7c:	sub	r2, r2, #2
   26a80:	udiv	lr, r3, r1
   26a84:	mls	r1, r1, lr, r3
   26a88:	mov	r3, lr
   26a8c:	add	r4, ip, r1, lsl #1
   26a90:	ldrb	r1, [ip, r1, lsl #1]
   26a94:	strb	r1, [r2]
   26a98:	ldrb	r1, [r4, #1]
   26a9c:	strb	r1, [r2, #1]
   26aa0:	mov	r1, #100	; 0x64
   26aa4:	ldr	ip, [pc, #372]	; 26c20 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   26aa8:	sub	r2, r2, #2
   26aac:	udiv	lr, r3, r1
   26ab0:	mls	r1, r1, lr, r3
   26ab4:	mov	r3, lr
   26ab8:	add	r4, ip, r1, lsl #1
   26abc:	ldrb	r1, [ip, r1, lsl #1]
   26ac0:	strb	r1, [r2]
   26ac4:	ldrb	r1, [r4, #1]
   26ac8:	strb	r1, [r2, #1]
   26acc:	mov	r1, #100	; 0x64
   26ad0:	ldr	ip, [pc, #328]	; 26c20 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   26ad4:	sub	r2, r2, #2
   26ad8:	udiv	lr, r3, r1
   26adc:	mls	r1, r1, lr, r3
   26ae0:	mov	r3, lr
   26ae4:	add	r4, ip, r1, lsl #1
   26ae8:	ldrb	r1, [ip, r1, lsl #1]
   26aec:	strb	r1, [r2]
   26af0:	ldrb	r1, [r4, #1]
   26af4:	strb	r1, [r2, #1]
   26af8:	add	r3, r3, #48	; 0x30
   26afc:	strb	r3, [r2, #-1]
   26b00:	pop	{r4, pc}
   26b04:	sub	r1, r0, #2
   26b08:	cmp	r1, #8
   26b0c:	ldrls	pc, [pc, r1, lsl #2]
   26b10:	b	26b00 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   26b14:	andeq	r6, r2, r8, ror #23
   26b18:	andeq	r6, r2, r0, lsl #22
   26b1c:			; <UNDEFINED> instruction: 0x00026bbc
   26b20:	andeq	r6, r2, r0, lsl #22
   26b24:	muleq	r2, r0, fp
   26b28:	andeq	r6, r2, r0, lsl #22
   26b2c:	andeq	r6, r2, r4, ror #22
   26b30:	andeq	r6, r2, r0, lsl #22
   26b34:	andeq	r6, r2, r8, lsr fp
   26b38:	mov	r1, #100	; 0x64
   26b3c:	ldr	ip, [pc, #220]	; 26c20 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   26b40:	sub	r2, r2, #2
   26b44:	udiv	lr, r3, r1
   26b48:	mls	r1, r1, lr, r3
   26b4c:	mov	r3, lr
   26b50:	add	r4, ip, r1, lsl #1
   26b54:	ldrb	r1, [ip, r1, lsl #1]
   26b58:	strb	r1, [r2]
   26b5c:	ldrb	r1, [r4, #1]
   26b60:	strb	r1, [r2, #1]
   26b64:	mov	r1, #100	; 0x64
   26b68:	ldr	ip, [pc, #176]	; 26c20 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   26b6c:	sub	r2, r2, #2
   26b70:	udiv	lr, r3, r1
   26b74:	mls	r1, r1, lr, r3
   26b78:	mov	r3, lr
   26b7c:	add	r4, ip, r1, lsl #1
   26b80:	ldrb	r1, [ip, r1, lsl #1]
   26b84:	strb	r1, [r2]
   26b88:	ldrb	r1, [r4, #1]
   26b8c:	strb	r1, [r2, #1]
   26b90:	mov	r1, #100	; 0x64
   26b94:	ldr	ip, [pc, #132]	; 26c20 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   26b98:	sub	r2, r2, #2
   26b9c:	udiv	lr, r3, r1
   26ba0:	mls	r1, r1, lr, r3
   26ba4:	mov	r3, lr
   26ba8:	add	r4, ip, r1, lsl #1
   26bac:	ldrb	r1, [ip, r1, lsl #1]
   26bb0:	strb	r1, [r2]
   26bb4:	ldrb	r1, [r4, #1]
   26bb8:	strb	r1, [r2, #1]
   26bbc:	mov	r1, #100	; 0x64
   26bc0:	ldr	ip, [pc, #88]	; 26c20 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   26bc4:	sub	r2, r2, #2
   26bc8:	udiv	lr, r3, r1
   26bcc:	mls	r1, r1, lr, r3
   26bd0:	mov	r3, lr
   26bd4:	add	r4, ip, r1, lsl #1
   26bd8:	ldrb	r1, [ip, r1, lsl #1]
   26bdc:	strb	r1, [r2]
   26be0:	ldrb	r1, [r4, #1]
   26be4:	strb	r1, [r2, #1]
   26be8:	mov	lr, #100	; 0x64
   26bec:	ldr	ip, [pc, #44]	; 26c20 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   26bf0:	udiv	r1, r3, lr
   26bf4:	mls	r3, lr, r1, r3
   26bf8:	add	r1, ip, r3, lsl #1
   26bfc:	ldrb	r3, [ip, r3, lsl #1]
   26c00:	strb	r3, [r2, #-2]
   26c04:	ldrb	r3, [r1, #1]
   26c08:	b	26afc <flatcc_json_parser_struct_as_root@@Base+0x2d4>
   26c0c:	addseq	r9, r8, pc, ror r6
   26c10:	blcc	fe6d9414 <__bss_end__@@Base+0xfe695050>
   26c14:	ldrbeq	lr, [r5, #255]!	; 0xff
   26c18:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   26c1c:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   26c20:	andeq	r2, r3, r8, ror fp
   26c24:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c28:	mov	r6, r0
   26c2c:	mov	r7, r1
   26c30:	add	r1, pc, #992	; 0x3e0
   26c34:	ldrd	r0, [r1]
   26c38:	cmp	r7, r1
   26c3c:	cmpeq	r6, r0
   26c40:	bhi	26c58 <flatcc_json_parser_struct_as_root@@Base+0x430>
   26c44:	mov	r1, r2
   26c48:	mov	r0, r6
   26c4c:	add	sp, sp, #4
   26c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c54:	b	26974 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   26c58:	add	r1, pc, #960	; 0x3c0
   26c5c:	ldrd	r0, [r1]
   26c60:	cmp	r7, r1
   26c64:	cmpeq	r6, r0
   26c68:	bls	26d7c <flatcc_json_parser_struct_as_root@@Base+0x554>
   26c6c:	add	r1, pc, #948	; 0x3b4
   26c70:	ldrd	r0, [r1]
   26c74:	cmp	r7, r1
   26c78:	cmpeq	r6, r0
   26c7c:	bls	26d48 <flatcc_json_parser_struct_as_root@@Base+0x520>
   26c80:	add	r1, pc, #936	; 0x3a8
   26c84:	ldrd	r0, [r1]
   26c88:	cmp	r7, r1
   26c8c:	cmpeq	r6, r0
   26c90:	bls	26d2c <flatcc_json_parser_struct_as_root@@Base+0x504>
   26c94:	add	r1, pc, #924	; 0x39c
   26c98:	ldrd	r0, [r1]
   26c9c:	cmp	r7, r1
   26ca0:	cmpeq	r6, r0
   26ca4:	movhi	r8, #20
   26ca8:	movls	r8, #19
   26cac:	ldr	r9, [pc, #956]	; 27070 <flatcc_json_parser_struct_as_root@@Base+0x848>
   26cb0:	mov	r3, #0
   26cb4:	add	r4, r2, r8
   26cb8:	mov	r0, r6
   26cbc:	mov	r1, r7
   26cc0:	strb	r3, [r2, r8]
   26cc4:	mov	r2, #100	; 0x64
   26cc8:	mov	r3, #0
   26ccc:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26cd0:	mov	sl, r2
   26cd4:	mov	r3, #0
   26cd8:	add	fp, r9, r2, lsl #1
   26cdc:	mov	r0, r6
   26ce0:	mov	r2, #100	; 0x64
   26ce4:	mov	r1, r7
   26ce8:	mov	r5, r9
   26cec:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26cf0:	tst	r8, #1
   26cf4:	beq	27078 <flatcc_json_parser_struct_as_root@@Base+0x850>
   26cf8:	sub	r3, r8, #11
   26cfc:	cmp	r3, #8
   26d00:	ldrls	pc, [pc, r3, lsl #2]
   26d04:	b	26f48 <flatcc_json_parser_struct_as_root@@Base+0x720>
   26d08:	ldrdeq	r6, [r2], -r4
   26d0c:	andeq	r6, r2, r8, asr #30
   26d10:	andeq	r6, r2, r4, lsl #29
   26d14:	andeq	r6, r2, r8, asr #30
   26d18:	andeq	r6, r2, r4, lsr lr
   26d1c:	andeq	r6, r2, r8, asr #30
   26d20:	andeq	r6, r2, r4, ror #27
   26d24:	andeq	r6, r2, r8, asr #30
   26d28:	andeq	r6, r2, r8, asr #27
   26d2c:	add	r1, pc, #780	; 0x30c
   26d30:	ldrd	r0, [r1]
   26d34:	cmp	r7, r1
   26d38:	cmpeq	r6, r0
   26d3c:	movhi	r8, #18
   26d40:	movls	r8, #17
   26d44:	b	26cac <flatcc_json_parser_struct_as_root@@Base+0x484>
   26d48:	add	r1, pc, #760	; 0x2f8
   26d4c:	ldrd	r0, [r1]
   26d50:	cmp	r7, r1
   26d54:	cmpeq	r6, r0
   26d58:	movhi	r8, #16
   26d5c:	bhi	26cac <flatcc_json_parser_struct_as_root@@Base+0x484>
   26d60:	add	r1, pc, #744	; 0x2e8
   26d64:	ldrd	r0, [r1]
   26d68:	cmp	r7, r1
   26d6c:	cmpeq	r6, r0
   26d70:	movhi	r8, #15
   26d74:	movls	r8, #14
   26d78:	b	26cac <flatcc_json_parser_struct_as_root@@Base+0x484>
   26d7c:	add	r1, pc, #724	; 0x2d4
   26d80:	ldrd	r0, [r1]
   26d84:	cmp	r7, r1
   26d88:	cmpeq	r6, r0
   26d8c:	bls	26dac <flatcc_json_parser_struct_as_root@@Base+0x584>
   26d90:	add	r1, pc, #712	; 0x2c8
   26d94:	ldrd	r0, [r1]
   26d98:	cmp	r7, r1
   26d9c:	cmpeq	r6, r0
   26da0:	movhi	r8, #13
   26da4:	movls	r8, #12
   26da8:	b	26cac <flatcc_json_parser_struct_as_root@@Base+0x484>
   26dac:	add	r1, pc, #692	; 0x2b4
   26db0:	ldrd	r0, [r1]
   26db4:	cmp	r7, r1
   26db8:	cmpeq	r6, r0
   26dbc:	movhi	r8, #11
   26dc0:	movls	r8, #10
   26dc4:	b	26cac <flatcc_json_parser_struct_as_root@@Base+0x484>
   26dc8:	ldrb	r3, [r9, sl, lsl #1]
   26dcc:	mov	r6, r0
   26dd0:	mov	r7, r1
   26dd4:	sub	r4, r4, #2
   26dd8:	strb	r3, [r4]
   26ddc:	ldrb	r3, [fp, #1]
   26de0:	strb	r3, [r4, #1]
   26de4:	mov	r0, r6
   26de8:	mov	r1, r7
   26dec:	mov	r2, #100	; 0x64
   26df0:	mov	r3, #0
   26df4:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26df8:	mov	r9, r2
   26dfc:	add	fp, r5, r2, lsl #1
   26e00:	mov	r3, #0
   26e04:	mov	r0, r6
   26e08:	mov	r1, r7
   26e0c:	mov	r2, #100	; 0x64
   26e10:	sub	sl, r4, #2
   26e14:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26e18:	ldrb	r3, [r5, r9, lsl #1]
   26e1c:	mov	r6, r0
   26e20:	mov	r7, r1
   26e24:	strb	r3, [r4, #-2]
   26e28:	ldrb	r3, [fp, #1]
   26e2c:	strb	r3, [r4, #-1]
   26e30:	mov	r4, sl
   26e34:	mov	r0, r6
   26e38:	mov	r1, r7
   26e3c:	mov	r2, #100	; 0x64
   26e40:	mov	r3, #0
   26e44:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26e48:	mov	r9, r2
   26e4c:	add	fp, r5, r2, lsl #1
   26e50:	mov	r3, #0
   26e54:	mov	r0, r6
   26e58:	mov	r1, r7
   26e5c:	mov	r2, #100	; 0x64
   26e60:	sub	sl, r4, #2
   26e64:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26e68:	ldrb	r3, [r5, r9, lsl #1]
   26e6c:	mov	r6, r0
   26e70:	mov	r7, r1
   26e74:	strb	r3, [r4, #-2]
   26e78:	ldrb	r3, [fp, #1]
   26e7c:	strb	r3, [r4, #-1]
   26e80:	mov	r4, sl
   26e84:	mov	r0, r6
   26e88:	mov	r1, r7
   26e8c:	mov	r2, #100	; 0x64
   26e90:	mov	r3, #0
   26e94:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26e98:	mov	r9, r2
   26e9c:	add	fp, r5, r2, lsl #1
   26ea0:	mov	r3, #0
   26ea4:	mov	r0, r6
   26ea8:	mov	r1, r7
   26eac:	mov	r2, #100	; 0x64
   26eb0:	sub	sl, r4, #2
   26eb4:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26eb8:	ldrb	r3, [r5, r9, lsl #1]
   26ebc:	mov	r6, r0
   26ec0:	mov	r7, r1
   26ec4:	strb	r3, [r4, #-2]
   26ec8:	ldrb	r3, [fp, #1]
   26ecc:	strb	r3, [r4, #-1]
   26ed0:	mov	r4, sl
   26ed4:	mov	r0, r6
   26ed8:	mov	r1, r7
   26edc:	mov	r2, #100	; 0x64
   26ee0:	mov	r3, #0
   26ee4:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26ee8:	add	r3, r5, r2, lsl #1
   26eec:	ldrb	r2, [r5, r2, lsl #1]
   26ef0:	mov	r0, r6
   26ef4:	mov	r1, r7
   26ef8:	sub	r9, r4, #3
   26efc:	strb	r2, [r4, #-2]
   26f00:	mov	r2, #100	; 0x64
   26f04:	ldrb	r3, [r3, #1]
   26f08:	strb	r3, [r4, #-1]
   26f0c:	mov	r3, #0
   26f10:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26f14:	mov	r2, #10
   26f18:	mov	r3, #0
   26f1c:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26f20:	add	r2, r2, #48	; 0x30
   26f24:	mov	r0, r6
   26f28:	mov	r1, r7
   26f2c:	mov	r3, #0
   26f30:	strb	r2, [r4, #-3]
   26f34:	mov	r2, #1000	; 0x3e8
   26f38:	mov	r4, r9
   26f3c:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26f40:	mov	r6, r0
   26f44:	mov	r7, r1
   26f48:	mov	r0, r6
   26f4c:	mov	r1, r7
   26f50:	mov	r2, #100	; 0x64
   26f54:	mov	r3, #0
   26f58:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26f5c:	add	r3, r5, r2, lsl #1
   26f60:	ldrb	r2, [r5, r2, lsl #1]
   26f64:	mov	r0, r6
   26f68:	mov	r1, r7
   26f6c:	strb	r2, [r4, #-2]
   26f70:	mov	r2, #100	; 0x64
   26f74:	ldrb	r3, [r3, #1]
   26f78:	strb	r3, [r4, #-1]
   26f7c:	mov	r3, #0
   26f80:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26f84:	mov	r2, #100	; 0x64
   26f88:	mov	r3, #0
   26f8c:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26f90:	add	r3, r5, r2, lsl #1
   26f94:	ldrb	r2, [r5, r2, lsl #1]
   26f98:	mov	r0, r6
   26f9c:	mov	r1, r7
   26fa0:	strb	r2, [r4, #-4]
   26fa4:	movw	r2, #10000	; 0x2710
   26fa8:	ldrb	r3, [r3, #1]
   26fac:	strb	r3, [r4, #-3]
   26fb0:	mov	r3, #0
   26fb4:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26fb8:	mov	r2, #100	; 0x64
   26fbc:	mov	r3, #0
   26fc0:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26fc4:	add	r3, r5, r2, lsl #1
   26fc8:	ldrb	r2, [r5, r2, lsl #1]
   26fcc:	mov	r0, r6
   26fd0:	mov	r1, r7
   26fd4:	strb	r2, [r4, #-6]
   26fd8:	ldrb	r3, [r3, #1]
   26fdc:	ldr	r2, [pc, #144]	; 27074 <flatcc_json_parser_struct_as_root@@Base+0x84c>
   26fe0:	strb	r3, [r4, #-5]
   26fe4:	mov	r3, #0
   26fe8:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26fec:	mov	r2, #100	; 0x64
   26ff0:	mov	r3, #0
   26ff4:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   26ff8:	add	r3, r5, r2, lsl #1
   26ffc:	ldrb	r2, [r5, r2, lsl #1]
   27000:	mov	r0, r8
   27004:	strb	r2, [r4, #-8]
   27008:	ldrb	r3, [r3, #1]
   2700c:	strb	r3, [r4, #-7]
   27010:	add	sp, sp, #4
   27014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27018:	blcc	fe6d981c <__bss_end__@@Base+0xfe695458>
   2701c:	andeq	r0, r0, r0
   27020:	mrcmi	15, 3, r9, cr2, cr15, {7}
   27024:	andeq	r0, r0, r8, lsl r9
   27028:	svcvs	0x00c0ffff
   2702c:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   27030:			; <UNDEFINED> instruction: 0xa763ffff
   27034:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   27038:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   2703c:	bhi	ff1efc54 <__bss_end__@@Base+0xff1ab890>
   27040:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   27044:	smceq	13400	; 0x3458
   27048:	strbge	r7, [r6], #4095	; 0xfff
   2704c:	andeq	r8, r3, lr, ror sp
   27050:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   27054:	strdeq	r5, [r0], -r3
   27058:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   2705c:	andeq	r0, r0, r7, lsl r0
   27060:	strtle	r0, [r5], #4095	; 0xfff
   27064:	andeq	r0, r0, r8, ror #1
   27068:	strpl	lr, [fp], #-1023	; 0xfffffc01
   2706c:	andeq	r0, r0, r2
   27070:	andeq	r2, r3, r8, ror fp
   27074:	andeq	r4, pc, r0, asr #4
   27078:	sub	r3, r8, #10
   2707c:	cmp	r3, #10
   27080:	ldrls	pc, [pc, r3, lsl #2]
   27084:	b	26f48 <flatcc_json_parser_struct_as_root@@Base+0x720>
   27088:	andeq	r7, r2, r0, lsl r2
   2708c:	andeq	r6, r2, r8, asr #30
   27090:	andeq	r7, r2, r0, asr #3
   27094:	andeq	r6, r2, r8, asr #30
   27098:	andeq	r7, r2, r0, ror r1
   2709c:	andeq	r6, r2, r8, asr #30
   270a0:	andeq	r7, r2, r0, lsr #2
   270a4:	andeq	r6, r2, r8, asr #30
   270a8:	ldrdeq	r7, [r2], -r0
   270ac:	andeq	r6, r2, r8, asr #30
   270b0:	strheq	r7, [r2], -r4
   270b4:	ldrb	r3, [r9, sl, lsl #1]
   270b8:	mov	r6, r0
   270bc:	mov	r7, r1
   270c0:	sub	r4, r4, #2
   270c4:	strb	r3, [r4]
   270c8:	ldrb	r3, [fp, #1]
   270cc:	strb	r3, [r4, #1]
   270d0:	mov	r0, r6
   270d4:	mov	r1, r7
   270d8:	mov	r2, #100	; 0x64
   270dc:	mov	r3, #0
   270e0:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   270e4:	mov	r9, r2
   270e8:	add	fp, r5, r2, lsl #1
   270ec:	mov	r3, #0
   270f0:	mov	r0, r6
   270f4:	mov	r1, r7
   270f8:	mov	r2, #100	; 0x64
   270fc:	sub	sl, r4, #2
   27100:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   27104:	ldrb	r3, [r5, r9, lsl #1]
   27108:	mov	r6, r0
   2710c:	mov	r7, r1
   27110:	strb	r3, [r4, #-2]
   27114:	ldrb	r3, [fp, #1]
   27118:	strb	r3, [r4, #-1]
   2711c:	mov	r4, sl
   27120:	mov	r0, r6
   27124:	mov	r1, r7
   27128:	mov	r2, #100	; 0x64
   2712c:	mov	r3, #0
   27130:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   27134:	mov	r9, r2
   27138:	add	fp, r5, r2, lsl #1
   2713c:	mov	r3, #0
   27140:	mov	r0, r6
   27144:	mov	r1, r7
   27148:	mov	r2, #100	; 0x64
   2714c:	sub	sl, r4, #2
   27150:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   27154:	ldrb	r3, [r5, r9, lsl #1]
   27158:	mov	r6, r0
   2715c:	mov	r7, r1
   27160:	strb	r3, [r4, #-2]
   27164:	ldrb	r3, [fp, #1]
   27168:	strb	r3, [r4, #-1]
   2716c:	mov	r4, sl
   27170:	mov	r0, r6
   27174:	mov	r1, r7
   27178:	mov	r2, #100	; 0x64
   2717c:	mov	r3, #0
   27180:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   27184:	mov	r9, r2
   27188:	add	fp, r5, r2, lsl #1
   2718c:	mov	r3, #0
   27190:	mov	r0, r6
   27194:	mov	r1, r7
   27198:	mov	r2, #100	; 0x64
   2719c:	sub	sl, r4, #2
   271a0:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   271a4:	ldrb	r3, [r5, r9, lsl #1]
   271a8:	mov	r6, r0
   271ac:	mov	r7, r1
   271b0:	strb	r3, [r4, #-2]
   271b4:	ldrb	r3, [fp, #1]
   271b8:	strb	r3, [r4, #-1]
   271bc:	mov	r4, sl
   271c0:	mov	r0, r6
   271c4:	mov	r1, r7
   271c8:	mov	r2, #100	; 0x64
   271cc:	mov	r3, #0
   271d0:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   271d4:	mov	r9, r2
   271d8:	add	fp, r5, r2, lsl #1
   271dc:	mov	r3, #0
   271e0:	mov	r0, r6
   271e4:	mov	r1, r7
   271e8:	mov	r2, #100	; 0x64
   271ec:	sub	sl, r4, #2
   271f0:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   271f4:	ldrb	r3, [r5, r9, lsl #1]
   271f8:	mov	r6, r0
   271fc:	mov	r7, r1
   27200:	strb	r3, [r4, #-2]
   27204:	ldrb	r3, [fp, #1]
   27208:	strb	r3, [r4, #-1]
   2720c:	mov	r4, sl
   27210:	mov	r0, r6
   27214:	mov	r1, r7
   27218:	mov	r2, #100	; 0x64
   2721c:	mov	r3, #0
   27220:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   27224:	mov	r9, r2
   27228:	add	fp, r5, r2, lsl #1
   2722c:	mov	r3, #0
   27230:	mov	r0, r6
   27234:	mov	r1, r7
   27238:	mov	r2, #100	; 0x64
   2723c:	sub	sl, r4, #2
   27240:	bl	2de3c <flatcc_json_printer_clear@@Base+0x71c>
   27244:	ldrb	r3, [r5, r9, lsl #1]
   27248:	mov	r6, r0
   2724c:	mov	r7, r1
   27250:	strb	r3, [r4, #-2]
   27254:	ldrb	r3, [fp, #1]
   27258:	strb	r3, [r4, #-1]
   2725c:	mov	r4, sl
   27260:	b	26f48 <flatcc_json_parser_struct_as_root@@Base+0x720>
   27264:	cmp	r0, #0
   27268:	push	{r4, lr}
   2726c:	lsr	r4, r0, #31
   27270:	movlt	r3, #45	; 0x2d
   27274:	rsblt	r0, r0, #0
   27278:	sxthlt	r0, r0
   2727c:	strblt	r3, [r1], #1
   27280:	uxth	r0, r0
   27284:	bl	26830 <flatcc_json_parser_struct_as_root@@Base+0x8>
   27288:	add	r0, r0, r4
   2728c:	pop	{r4, pc}
   27290:	cmp	r0, #0
   27294:	push	{r4, lr}
   27298:	lsr	r4, r0, #31
   2729c:	movlt	r3, #45	; 0x2d
   272a0:	rsblt	r0, r0, #0
   272a4:	strblt	r3, [r1], #1
   272a8:	bl	26974 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   272ac:	add	r0, r0, r4
   272b0:	pop	{r4, pc}
   272b4:	cmp	r0, #0
   272b8:	push	{r4, lr}
   272bc:	lsr	r4, r1, #31
   272c0:	sbcs	r3, r1, #0
   272c4:	bge	272d8 <flatcc_json_parser_struct_as_root@@Base+0xab0>
   272c8:	rsbs	r0, r0, #0
   272cc:	mov	r3, #45	; 0x2d
   272d0:	rsc	r1, r1, #0
   272d4:	strb	r3, [r2], #1
   272d8:	bl	26c24 <flatcc_json_parser_struct_as_root@@Base+0x3fc>
   272dc:	add	r0, r0, r4
   272e0:	pop	{r4, pc}
   272e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   272e8:	sub	sp, sp, #108	; 0x6c
   272ec:	sub	r1, r1, #1
   272f0:	add	r1, r0, r1
   272f4:	ldr	lr, [sp, #144]	; 0x90
   272f8:	str	r1, [sp, #92]	; 0x5c
   272fc:	ldr	ip, [sp, #168]	; 0xa8
   27300:	ldr	r8, [sp, #172]	; 0xac
   27304:	ldr	r9, [sp, #148]	; 0x94
   27308:	subs	r6, r2, ip
   2730c:	ldrd	r4, [sp, #152]	; 0x98
   27310:	str	r6, [sp, #16]
   27314:	sbc	r6, r3, r8
   27318:	adds	sl, r2, ip
   2731c:	adc	fp, r3, r8
   27320:	str	r6, [sp, #20]
   27324:	subs	r6, lr, r4
   27328:	str	r6, [sp]
   2732c:	sbc	r6, r9, r5
   27330:	subs	r2, ip, r2
   27334:	sbc	r3, r8, r3
   27338:	str	r6, [sp, #4]
   2733c:	ldr	r6, [sp, #16]
   27340:	subs	r6, r6, lr
   27344:	str	r6, [sp, #96]	; 0x60
   27348:	ldr	r6, [sp, #20]
   2734c:	sbc	r6, r6, r9
   27350:	str	r6, [sp, #100]	; 0x64
   27354:	ldrd	r6, [sp, #16]
   27358:	cmp	r5, r7
   2735c:	cmpeq	r4, r6
   27360:	bcs	27464 <flatcc_json_parser_struct_as_root@@Base+0xc3c>
   27364:	ldrd	r0, [sp]
   27368:	ldrd	r6, [sp, #160]	; 0xa0
   2736c:	cmp	r7, r1
   27370:	cmpeq	r6, r0
   27374:	bls	273dc <flatcc_json_parser_struct_as_root@@Base+0xbb4>
   27378:	adds	r3, ip, ip
   2737c:	str	r3, [sp, #32]
   27380:	adc	r3, r8, r8
   27384:	str	r3, [sp, #36]	; 0x24
   27388:	ldrd	r2, [sp, #32]
   2738c:	cmp	r3, r5
   27390:	cmpeq	r2, r4
   27394:	bls	274fc <flatcc_json_parser_struct_as_root@@Base+0xcd4>
   27398:	mov	r0, #0
   2739c:	b	27528 <flatcc_json_parser_struct_as_root@@Base+0xd00>
   273a0:	ldrd	r4, [sp, #8]
   273a4:	ldr	r1, [sp, #92]	; 0x5c
   273a8:	ldr	r0, [sp, #92]	; 0x5c
   273ac:	ldrb	r1, [r1]
   273b0:	sub	r1, r1, #1
   273b4:	strb	r1, [r0]
   273b8:	ldr	r0, [sp]
   273bc:	ldr	r1, [sp, #160]	; 0xa0
   273c0:	subs	r1, r0, r1
   273c4:	ldr	r0, [sp, #4]
   273c8:	str	r1, [sp]
   273cc:	ldr	r1, [sp, #164]	; 0xa4
   273d0:	sbc	r1, r0, r1
   273d4:	str	r1, [sp, #4]
   273d8:	b	27354 <flatcc_json_parser_struct_as_root@@Base+0xb2c>
   273dc:	ldr	r1, [sp, #160]	; 0xa0
   273e0:	adds	r1, r4, r1
   273e4:	str	r1, [sp, #8]
   273e8:	ldr	r1, [sp, #164]	; 0xa4
   273ec:	adc	r1, r5, r1
   273f0:	str	r1, [sp, #12]
   273f4:	ldrd	r6, [sp, #8]
   273f8:	ldrd	r0, [sp, #16]
   273fc:	cmp	r7, r1
   27400:	cmpeq	r6, r0
   27404:	bcc	273a0 <flatcc_json_parser_struct_as_root@@Base+0xb78>
   27408:	ldr	r0, [sp]
   2740c:	ldr	r1, [sp, #8]
   27410:	adds	r1, r2, r1
   27414:	str	r1, [sp, #40]	; 0x28
   27418:	ldr	r1, [sp, #12]
   2741c:	adc	r1, r3, r1
   27420:	str	r1, [sp, #44]	; 0x2c
   27424:	ldr	r1, [sp, #96]	; 0x60
   27428:	adds	r1, r1, r0
   2742c:	ldr	r0, [sp, #4]
   27430:	str	r1, [sp, #48]	; 0x30
   27434:	ldr	r1, [sp, #100]	; 0x64
   27438:	adc	r1, r1, r0
   2743c:	str	r1, [sp, #52]	; 0x34
   27440:	ldrd	r0, [sp, #40]	; 0x28
   27444:	ldrd	r6, [sp, #48]	; 0x30
   27448:	cmp	r1, r7
   2744c:	cmpeq	r0, r6
   27450:	bls	273a0 <flatcc_json_parser_struct_as_root@@Base+0xb78>
   27454:	cmp	r5, fp
   27458:	cmpeq	r4, sl
   2745c:	bcc	27494 <flatcc_json_parser_struct_as_root@@Base+0xc6c>
   27460:	b	27378 <flatcc_json_parser_struct_as_root@@Base+0xb50>
   27464:	cmp	r5, fp
   27468:	cmpeq	r4, sl
   2746c:	bcs	27378 <flatcc_json_parser_struct_as_root@@Base+0xb50>
   27470:	subs	r3, lr, r4
   27474:	ldrd	r0, [sp, #160]	; 0xa0
   27478:	str	r3, [sp, #56]	; 0x38
   2747c:	sbc	r3, r9, r5
   27480:	str	r3, [sp, #60]	; 0x3c
   27484:	ldrd	r2, [sp, #56]	; 0x38
   27488:	cmp	r3, r1
   2748c:	cmpeq	r2, r0
   27490:	bcc	27378 <flatcc_json_parser_struct_as_root@@Base+0xb50>
   27494:	ldr	r3, [sp, #160]	; 0xa0
   27498:	adds	r3, r4, r3
   2749c:	str	r3, [sp, #24]
   274a0:	ldr	r3, [sp, #164]	; 0xa4
   274a4:	adc	r3, r5, r3
   274a8:	str	r3, [sp, #28]
   274ac:	ldrd	r2, [sp, #24]
   274b0:	cmp	r3, fp
   274b4:	cmpeq	r2, sl
   274b8:	bcc	27398 <flatcc_json_parser_struct_as_root@@Base+0xb70>
   274bc:	subs	r3, sl, r4
   274c0:	str	r3, [sp, #64]	; 0x40
   274c4:	sbc	r3, fp, r5
   274c8:	str	r3, [sp, #68]	; 0x44
   274cc:	ldr	r3, [sp, #24]
   274d0:	subs	r3, r3, sl
   274d4:	str	r3, [sp, #72]	; 0x48
   274d8:	ldr	r3, [sp, #28]
   274dc:	sbc	r3, r3, fp
   274e0:	str	r3, [sp, #76]	; 0x4c
   274e4:	ldrd	r2, [sp, #64]	; 0x40
   274e8:	ldrd	r0, [sp, #72]	; 0x48
   274ec:	cmp	r3, r1
   274f0:	cmpeq	r2, r0
   274f4:	bls	27378 <flatcc_json_parser_struct_as_root@@Base+0xb50>
   274f8:	b	27398 <flatcc_json_parser_struct_as_root@@Base+0xb70>
   274fc:	lsl	r3, r8, #2
   27500:	lsl	r2, ip, #2
   27504:	orr	r3, r3, ip, lsr #30
   27508:	subs	r2, lr, r2
   2750c:	sbc	r3, r9, r3
   27510:	strd	r2, [sp, #80]	; 0x50
   27514:	ldrd	r2, [sp, #80]	; 0x50
   27518:	cmp	r3, r5
   2751c:	cmpeq	r2, r4
   27520:	movcs	r0, #1
   27524:	movcc	r0, #0
   27528:	add	sp, sp, #108	; 0x6c
   2752c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27530:	subs	r3, r0, #0
   27534:	mov	r2, r1
   27538:	push	{r4, r5, lr}
   2753c:	movlt	r0, #45	; 0x2d
   27540:	rsblt	r3, r3, #0
   27544:	mov	r4, #10
   27548:	mvn	lr, #9
   2754c:	strblt	r0, [r2], #1
   27550:	mov	r0, r2
   27554:	udiv	ip, r3, r4
   27558:	mla	r3, lr, ip, r3
   2755c:	add	r3, r3, #48	; 0x30
   27560:	strb	r3, [r0], #1
   27564:	subs	r3, ip, #0
   27568:	bne	27554 <flatcc_json_parser_struct_as_root@@Base+0xd2c>
   2756c:	sub	r4, r0, r2
   27570:	sub	lr, r2, #1
   27574:	strb	r3, [r0]
   27578:	add	ip, r4, r4, lsr #31
   2757c:	add	r2, r2, r4
   27580:	mov	r3, r0
   27584:	asr	ip, ip, #1
   27588:	sub	r4, r2, r3
   2758c:	cmp	ip, r4
   27590:	bgt	2759c <flatcc_json_parser_struct_as_root@@Base+0xd74>
   27594:	sub	r0, r0, r1
   27598:	pop	{r4, r5, pc}
   2759c:	ldrb	r4, [lr, #1]!
   275a0:	ldrb	r5, [r3, #-1]!
   275a4:	strb	r5, [lr]
   275a8:	strb	r4, [r3]
   275ac:	b	27588 <flatcc_json_parser_struct_as_root@@Base+0xd60>
   275b0:	lsl	r0, r0, #2
   275b4:	mov	r3, #3
   275b8:	udiv	r0, r0, r3
   275bc:	add	r0, r0, r3
   275c0:	bic	r0, r0, #3
   275c4:	bx	lr
   275c8:	ldr	r3, [r0, #8]
   275cc:	add	r1, r1, #2
   275d0:	lsl	r1, r1, #1
   275d4:	cmp	r3, r1
   275d8:	ble	275f8 <flatcc_json_parser_struct_as_root@@Base+0xdd0>
   275dc:	ldr	r3, [r0, #4]
   275e0:	ldrh	r3, [r3, r1]
   275e4:	cmp	r3, #0
   275e8:	beq	275f8 <flatcc_json_parser_struct_as_root@@Base+0xdd0>
   275ec:	ldr	r0, [r0]
   275f0:	add	r0, r0, r3
   275f4:	bx	lr
   275f8:	mov	r0, #0
   275fc:	bx	lr
   27600:	ldrd	r2, [r0, #16]
   27604:	cmp	r3, r2
   27608:	bcc	27634 <flatcc_json_parser_struct_as_root@@Base+0xe0c>
   2760c:	ldr	r1, [r0]
   27610:	ldr	r2, [r0, #36]	; 0x24
   27614:	sub	r3, r3, r1
   27618:	str	r1, [r0, #20]
   2761c:	cmp	r2, #0
   27620:	moveq	r2, #3
   27624:	streq	r2, [r0, #36]	; 0x24
   27628:	ldr	r2, [r0, #12]
   2762c:	add	r3, r2, r3
   27630:	str	r3, [r0, #12]
   27634:	ldr	r3, [r0, #20]
   27638:	mov	r2, #0
   2763c:	strb	r2, [r3]
   27640:	bx	lr
   27644:	ldr	ip, [r0, #16]
   27648:	push	{r4, r5, r6, r7, r8, lr}
   2764c:	mov	r4, r0
   27650:	mov	r6, r2
   27654:	ldr	r3, [r0, #20]
   27658:	add	lr, r3, r2
   2765c:	cmp	ip, lr
   27660:	movhi	r0, r3
   27664:	bhi	2769c <flatcc_json_parser_struct_as_root@@Base+0xe74>
   27668:	cmp	r3, ip
   2766c:	mov	r7, r1
   27670:	ldrcs	r3, [r4, #44]	; 0x2c
   27674:	movcs	r1, #0
   27678:	bcs	276dc <flatcc_json_parser_struct_as_root@@Base+0xeb4>
   2767c:	ldr	r5, [r4, #16]
   27680:	ldr	r3, [r4, #20]
   27684:	ldr	r0, [r4, #20]
   27688:	sub	r5, r5, r3
   2768c:	cmp	r5, r6
   27690:	bcc	276b0 <flatcc_json_parser_struct_as_root@@Base+0xe88>
   27694:	mov	r2, r6
   27698:	mov	r1, r7
   2769c:	bl	14548 <memcpy@plt>
   276a0:	ldr	r3, [r4, #20]
   276a4:	add	r6, r3, r6
   276a8:	str	r6, [r4, #20]
   276ac:	pop	{r4, r5, r6, r7, r8, pc}
   276b0:	mov	r1, r7
   276b4:	mov	r2, r5
   276b8:	bl	14548 <memcpy@plt>
   276bc:	ldr	r3, [r4, #20]
   276c0:	add	r7, r7, r5
   276c4:	sub	r6, r6, r5
   276c8:	mov	r1, #0
   276cc:	mov	r0, r4
   276d0:	add	r3, r3, r5
   276d4:	str	r3, [r4, #20]
   276d8:	ldr	r3, [r4, #44]	; 0x2c
   276dc:	blx	r3
   276e0:	b	2767c <flatcc_json_parser_struct_as_root@@Base+0xe54>
   276e4:	ldr	r3, [r0, #20]
   276e8:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   276ec:	mov	sl, r2
   276f0:	mov	r4, r0
   276f4:	mov	r7, #92	; 0x5c
   276f8:	mov	r8, #102	; 0x66
   276fc:	mov	r9, #117	; 0x75
   27700:	add	r2, r3, #1
   27704:	str	r2, [r0, #20]
   27708:	mov	r2, #34	; 0x22
   2770c:	strb	r2, [r3]
   27710:	ldrb	r5, [r1]
   27714:	mov	r6, r1
   27718:	cmp	r5, #34	; 0x22
   2771c:	cmpne	r5, #31
   27720:	bls	2772c <flatcc_json_parser_struct_as_root@@Base+0xf04>
   27724:	cmp	r5, #92	; 0x5c
   27728:	bne	27798 <flatcc_json_parser_struct_as_root@@Base+0xf70>
   2772c:	sub	fp, r6, r1
   27730:	mov	r0, r4
   27734:	mov	r2, fp
   27738:	bl	27644 <flatcc_json_parser_struct_as_root@@Base+0xe1c>
   2773c:	ldr	r3, [r4, #20]
   27740:	subs	sl, sl, fp
   27744:	add	r2, r3, #1
   27748:	str	r2, [r4, #20]
   2774c:	beq	27880 <flatcc_json_parser_struct_as_root@@Base+0x1058>
   27750:	strb	r7, [r3]
   27754:	cmp	r5, #12
   27758:	ldr	r3, [r4, #20]
   2775c:	addeq	r2, r3, #1
   27760:	streq	r2, [r4, #20]
   27764:	strbeq	r8, [r3]
   27768:	beq	277d4 <flatcc_json_parser_struct_as_root@@Base+0xfac>
   2776c:	bhi	277a0 <flatcc_json_parser_struct_as_root@@Base+0xf78>
   27770:	cmp	r5, #9
   27774:	beq	277e0 <flatcc_json_parser_struct_as_root@@Base+0xfb8>
   27778:	cmp	r5, #10
   2777c:	beq	277f4 <flatcc_json_parser_struct_as_root@@Base+0xfcc>
   27780:	cmp	r5, #8
   27784:	bne	27804 <flatcc_json_parser_struct_as_root@@Base+0xfdc>
   27788:	add	r2, r3, #1
   2778c:	str	r2, [r4, #20]
   27790:	mov	r2, #98	; 0x62
   27794:	b	277ec <flatcc_json_parser_struct_as_root@@Base+0xfc4>
   27798:	ldrb	r5, [r6, #1]!
   2779c:	b	27718 <flatcc_json_parser_struct_as_root@@Base+0xef0>
   277a0:	cmp	r5, #34	; 0x22
   277a4:	beq	277c8 <flatcc_json_parser_struct_as_root@@Base+0xfa0>
   277a8:	cmp	r5, #92	; 0x5c
   277ac:	beq	277c8 <flatcc_json_parser_struct_as_root@@Base+0xfa0>
   277b0:	cmp	r5, #13
   277b4:	bne	27804 <flatcc_json_parser_struct_as_root@@Base+0xfdc>
   277b8:	add	r2, r3, #1
   277bc:	str	r2, [r4, #20]
   277c0:	mov	r2, #114	; 0x72
   277c4:	b	277ec <flatcc_json_parser_struct_as_root@@Base+0xfc4>
   277c8:	add	r2, r3, #1
   277cc:	str	r2, [r4, #20]
   277d0:	strb	r5, [r3]
   277d4:	sub	sl, sl, #1
   277d8:	add	r1, r6, #1
   277dc:	b	27710 <flatcc_json_parser_struct_as_root@@Base+0xee8>
   277e0:	add	r2, r3, #1
   277e4:	str	r2, [r4, #20]
   277e8:	mov	r2, #116	; 0x74
   277ec:	strb	r2, [r3]
   277f0:	b	277d4 <flatcc_json_parser_struct_as_root@@Base+0xfac>
   277f4:	add	r2, r3, #1
   277f8:	str	r2, [r4, #20]
   277fc:	mov	r2, #110	; 0x6e
   27800:	b	277ec <flatcc_json_parser_struct_as_root@@Base+0xfc4>
   27804:	add	r2, r3, #1
   27808:	str	r2, [r4, #20]
   2780c:	strb	r9, [r3]
   27810:	ldr	r3, [r4, #20]
   27814:	add	r2, r3, #1
   27818:	str	r2, [r4, #20]
   2781c:	mov	r2, #48	; 0x30
   27820:	strb	r2, [r3]
   27824:	ldr	r3, [r4, #20]
   27828:	add	r1, r3, #1
   2782c:	str	r1, [r4, #20]
   27830:	lsr	r1, r5, #4
   27834:	and	r5, r5, #15
   27838:	strb	r2, [r3]
   2783c:	cmp	r1, #10
   27840:	movcc	r3, r2
   27844:	ldr	r2, [r4, #20]
   27848:	movcs	r3, #87	; 0x57
   2784c:	add	r3, r3, r1
   27850:	cmp	r5, #10
   27854:	add	r0, r2, #1
   27858:	str	r0, [r4, #20]
   2785c:	strb	r3, [r2]
   27860:	movcc	r3, #48	; 0x30
   27864:	movcs	r3, #87	; 0x57
   27868:	ldr	r2, [r4, #20]
   2786c:	add	r5, r3, r5
   27870:	add	r1, r2, #1
   27874:	str	r1, [r4, #20]
   27878:	strb	r5, [r2]
   2787c:	b	277d4 <flatcc_json_parser_struct_as_root@@Base+0xfac>
   27880:	mov	r2, #34	; 0x22
   27884:	strb	r2, [r3]
   27888:	add	sp, sp, #4
   2788c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27890:	ldr	r2, [r1], #4
   27894:	b	276e4 <flatcc_json_parser_struct_as_root@@Base+0xebc>
   27898:	ldr	r3, [r0, #20]
   2789c:	mov	ip, #34	; 0x22
   278a0:	push	{r4, r5, r6, lr}
   278a4:	mov	r4, r0
   278a8:	strb	ip, [r3]
   278ac:	ldrb	ip, [r0, #26]
   278b0:	ldr	lr, [r0, #16]
   278b4:	ldr	r3, [r0, #20]
   278b8:	cmp	ip, #0
   278bc:	addeq	r3, r3, #1
   278c0:	add	ip, r3, r2
   278c4:	cmp	lr, ip
   278c8:	str	r3, [r0, #20]
   278cc:	bls	2790c <flatcc_json_parser_struct_as_root@@Base+0x10e4>
   278d0:	mov	r0, r3
   278d4:	mov	r5, r2
   278d8:	bl	14548 <memcpy@plt>
   278dc:	ldr	r2, [r4, #20]
   278e0:	add	r2, r2, r5
   278e4:	str	r2, [r4, #20]
   278e8:	ldr	r3, [r4, #20]
   278ec:	mov	r2, #34	; 0x22
   278f0:	strb	r2, [r3]
   278f4:	ldrb	r2, [r4, #26]
   278f8:	ldr	r3, [r4, #20]
   278fc:	cmp	r2, #0
   27900:	addeq	r3, r3, #1
   27904:	str	r3, [r4, #20]
   27908:	pop	{r4, r5, r6, pc}
   2790c:	bl	27644 <flatcc_json_parser_struct_as_root@@Base+0xe1c>
   27910:	b	278e8 <flatcc_json_parser_struct_as_root@@Base+0x10c0>
   27914:	push	{r4, r5, r6, lr}
   27918:	mov	r4, r0
   2791c:	ldrb	r3, [r0, #25]
   27920:	ldr	r2, [r0, #16]
   27924:	ldr	r5, [r0, #32]
   27928:	mul	r5, r5, r3
   2792c:	ldr	r3, [r0, #20]
   27930:	add	r1, r3, r5
   27934:	cmp	r2, r1
   27938:	movcs	r2, r5
   2793c:	movcs	r1, #32
   27940:	movcs	r0, r3
   27944:	bcs	27978 <flatcc_json_parser_struct_as_root@@Base+0x1150>
   27948:	cmp	r3, r2
   2794c:	movcs	r1, #0
   27950:	ldrcs	r3, [r4, #44]	; 0x2c
   27954:	bcs	279b4 <flatcc_json_parser_struct_as_root@@Base+0x118c>
   27958:	ldr	r6, [r4, #16]
   2795c:	ldr	r3, [r4, #20]
   27960:	ldr	r0, [r4, #20]
   27964:	sub	r6, r6, r3
   27968:	cmp	r6, r5
   2796c:	bcc	2798c <flatcc_json_parser_struct_as_root@@Base+0x1164>
   27970:	mov	r2, r5
   27974:	mov	r1, #32
   27978:	bl	145c0 <memset@plt>
   2797c:	ldr	r3, [r4, #20]
   27980:	add	r5, r3, r5
   27984:	str	r5, [r4, #20]
   27988:	pop	{r4, r5, r6, pc}
   2798c:	mov	r1, #32
   27990:	mov	r2, r6
   27994:	bl	145c0 <memset@plt>
   27998:	ldr	r3, [r4, #20]
   2799c:	sub	r5, r5, r6
   279a0:	mov	r1, #0
   279a4:	mov	r0, r4
   279a8:	add	r3, r3, r6
   279ac:	str	r3, [r4, #20]
   279b0:	ldr	r3, [r4, #44]	; 0x2c
   279b4:	blx	r3
   279b8:	b	27958 <flatcc_json_parser_struct_as_root@@Base+0x1130>
   279bc:	push	{r4, r5, r6, lr}
   279c0:	cmp	r1, #0
   279c4:	mov	r4, r0
   279c8:	ldr	r2, [r0, #20]
   279cc:	ldr	r0, [r0]
   279d0:	ldr	r3, [r4, #40]	; 0x28
   279d4:	bne	27a34 <flatcc_json_parser_struct_as_root@@Base+0x120c>
   279d8:	ldr	r5, [r4, #16]
   279dc:	cmp	r5, r2
   279e0:	bhi	27a34 <flatcc_json_parser_struct_as_root@@Base+0x120c>
   279e4:	sub	r5, r2, r5
   279e8:	mov	r2, #1
   279ec:	ldr	r1, [r4, #8]
   279f0:	bl	1456c <fwrite@plt>
   279f4:	ldr	r0, [r4]
   279f8:	mov	r2, r5
   279fc:	ldr	r1, [r4, #8]
   27a00:	add	r1, r0, r1
   27a04:	bl	14548 <memcpy@plt>
   27a08:	ldr	r2, [r4]
   27a0c:	ldr	r3, [r4, #12]
   27a10:	add	r2, r2, r5
   27a14:	str	r2, [r4, #20]
   27a18:	ldr	r2, [r4, #8]
   27a1c:	add	r3, r3, r2
   27a20:	str	r3, [r4, #12]
   27a24:	ldr	r3, [r4, #20]
   27a28:	mov	r2, #0
   27a2c:	strb	r2, [r3]
   27a30:	pop	{r4, r5, r6, pc}
   27a34:	sub	r5, r2, r0
   27a38:	mov	r2, #1
   27a3c:	mov	r1, r5
   27a40:	bl	1456c <fwrite@plt>
   27a44:	ldr	r3, [r4]
   27a48:	ldr	r2, [r4, #12]
   27a4c:	str	r3, [r4, #20]
   27a50:	add	r2, r2, r5
   27a54:	str	r2, [r4, #12]
   27a58:	b	27a24 <flatcc_json_parser_struct_as_root@@Base+0x11fc>
   27a5c:	push	{r4, r5, r6, lr}
   27a60:	mov	r2, #0
   27a64:	ldr	r3, [r0]
   27a68:	ldr	r5, [r0, #20]
   27a6c:	strb	r2, [r5]
   27a70:	ldr	r2, [r0, #16]
   27a74:	ldr	r1, [r0, #20]
   27a78:	cmp	r1, r2
   27a7c:	popcc	{r4, r5, r6, pc}
   27a80:	mov	r4, r0
   27a84:	sub	r5, r5, r3
   27a88:	ldrd	r0, [r0]
   27a8c:	lsl	r1, r1, #1
   27a90:	bl	14560 <realloc@plt>
   27a94:	cmp	r0, #0
   27a98:	bne	27ad0 <flatcc_json_parser_struct_as_root@@Base+0x12a8>
   27a9c:	ldr	r3, [r4, #36]	; 0x24
   27aa0:	cmp	r3, #0
   27aa4:	moveq	r3, #3
   27aa8:	streq	r3, [r4, #36]	; 0x24
   27aac:	ldr	r3, [r4, #12]
   27ab0:	add	r5, r3, r5
   27ab4:	ldr	r3, [r4]
   27ab8:	str	r5, [r4, #12]
   27abc:	str	r3, [r4, #20]
   27ac0:	ldr	r3, [r4, #20]
   27ac4:	mov	r2, #0
   27ac8:	strb	r2, [r3]
   27acc:	pop	{r4, r5, r6, pc}
   27ad0:	ldr	r3, [r4, #4]
   27ad4:	add	r5, r0, r5
   27ad8:	str	r5, [r4, #20]
   27adc:	lsl	r3, r3, #1
   27ae0:	stm	r4, {r0, r3}
   27ae4:	sub	r3, r3, #64	; 0x40
   27ae8:	add	r0, r0, r3
   27aec:	str	r3, [r4, #8]
   27af0:	str	r0, [r4, #16]
   27af4:	b	27ac0 <flatcc_json_parser_struct_as_root@@Base+0x1298>
   27af8:	ldr	r2, [r0, #16]
   27afc:	ldr	r1, [r0, #20]
   27b00:	cmp	r1, r2
   27b04:	bxcc	lr
   27b08:	mov	r1, #0
   27b0c:	ldr	r3, [r0, #44]	; 0x2c
   27b10:	bx	r3
   27b14:	push	{r4, r5, r6, lr}
   27b18:	mov	r4, r0
   27b1c:	mov	r5, r1
   27b20:	mov	r6, r2
   27b24:	ldrb	r3, [r0, #25]
   27b28:	cmp	r3, #0
   27b2c:	beq	27b90 <flatcc_json_parser_struct_as_root@@Base+0x1368>
   27b30:	ldr	r3, [r0, #20]
   27b34:	add	r2, r3, #1
   27b38:	str	r2, [r0, #20]
   27b3c:	mov	r2, #10
   27b40:	strb	r2, [r3]
   27b44:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   27b48:	mov	r2, r6
   27b4c:	mov	r1, r5
   27b50:	mov	r0, r4
   27b54:	bl	27898 <flatcc_json_parser_struct_as_root@@Base+0x1070>
   27b58:	ldr	r3, [r4, #20]
   27b5c:	add	r2, r3, #1
   27b60:	str	r2, [r4, #20]
   27b64:	mov	r2, #58	; 0x3a
   27b68:	strb	r2, [r3]
   27b6c:	mov	r2, #32
   27b70:	ldr	r3, [r4, #20]
   27b74:	strb	r2, [r3]
   27b78:	ldrb	r2, [r4, #25]
   27b7c:	ldr	r3, [r4, #20]
   27b80:	cmp	r2, #0
   27b84:	addne	r3, r3, #1
   27b88:	str	r3, [r4, #20]
   27b8c:	pop	{r4, r5, r6, pc}
   27b90:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   27b94:	b	27b48 <flatcc_json_parser_struct_as_root@@Base+0x1320>
   27b98:	cmp	r0, #99	; 0x63
   27b9c:	mov	r3, #0
   27ba0:	bls	27be0 <flatcc_json_parser_struct_as_root@@Base+0x13b8>
   27ba4:	strb	r3, [r1, #3]
   27ba8:	mov	r3, #100	; 0x64
   27bac:	ldr	ip, [pc, #112]	; 27c24 <flatcc_json_parser_struct_as_root@@Base+0x13fc>
   27bb0:	udiv	r2, r0, r3
   27bb4:	mls	r0, r3, r2, r0
   27bb8:	add	r2, r2, #48	; 0x30
   27bbc:	uxtb	r0, r0
   27bc0:	add	r3, ip, r0, lsl #1
   27bc4:	ldrb	r0, [ip, r0, lsl #1]
   27bc8:	strb	r0, [r1, #1]
   27bcc:	mov	r0, #3
   27bd0:	ldrb	r3, [r3, #1]
   27bd4:	strb	r2, [r1]
   27bd8:	strb	r3, [r1, #2]
   27bdc:	bx	lr
   27be0:	cmp	r0, #9
   27be4:	bls	27c10 <flatcc_json_parser_struct_as_root@@Base+0x13e8>
   27be8:	strb	r3, [r1, #2]
   27bec:	sxth	r0, r0
   27bf0:	ldr	r3, [pc, #44]	; 27c24 <flatcc_json_parser_struct_as_root@@Base+0x13fc>
   27bf4:	add	r2, r3, r0, lsl #1
   27bf8:	ldrb	r3, [r3, r0, lsl #1]
   27bfc:	mov	r0, #2
   27c00:	strb	r3, [r1]
   27c04:	ldrb	r3, [r2, #1]
   27c08:	strb	r3, [r1, #1]
   27c0c:	bx	lr
   27c10:	add	r0, r0, #48	; 0x30
   27c14:	strb	r0, [r1]
   27c18:	mov	r0, #1
   27c1c:	strb	r3, [r1, #1]
   27c20:	bx	lr
   27c24:	andeq	r2, r3, r8, ror fp
   27c28:	cmp	r0, #0
   27c2c:	push	{r4, lr}
   27c30:	lsr	r4, r0, #31
   27c34:	movlt	r3, #45	; 0x2d
   27c38:	rsblt	r0, r0, #0
   27c3c:	sxtblt	r0, r0
   27c40:	strblt	r3, [r1], #1
   27c44:	uxtb	r0, r0
   27c48:	bl	27b98 <flatcc_json_parser_struct_as_root@@Base+0x1370>
   27c4c:	add	r0, r0, r4
   27c50:	pop	{r4, pc}
   27c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c58:	sub	sp, sp, #20
   27c5c:	mov	sl, r3
   27c60:	ldr	r3, [sp, #64]	; 0x40
   27c64:	ldr	lr, [sp, #68]	; 0x44
   27c68:	umull	r6, r7, r2, lr
   27c6c:	strd	r6, [sp]
   27c70:	umull	r6, r7, sl, r3
   27c74:	umull	r2, r3, r2, r3
   27c78:	ldr	r8, [sp]
   27c7c:	mov	r2, #0
   27c80:	mov	r9, r2
   27c84:	strd	r6, [sp, #8]
   27c88:	ldr	fp, [sp, #8]
   27c8c:	mov	r1, r3
   27c90:	adds	r1, r1, fp
   27c94:	adc	r3, r2, r2
   27c98:	adds	r1, r1, #-2147483648	; 0x80000000
   27c9c:	adc	r3, r3, r2
   27ca0:	adds	r1, r1, r8
   27ca4:	ldr	r8, [sp, #4]
   27ca8:	adc	r3, r3, r2
   27cac:	mov	r1, r3
   27cb0:	ldr	r3, [sp, #12]
   27cb4:	ldr	r2, [sp, #72]	; 0x48
   27cb8:	adds	r4, r3, r8
   27cbc:	ldr	r3, [sp, #56]	; 0x38
   27cc0:	adc	r5, r9, r9
   27cc4:	umlal	r4, r5, lr, sl
   27cc8:	add	r3, r3, r2
   27ccc:	adds	r1, r1, r4
   27cd0:	add	r3, r3, #64	; 0x40
   27cd4:	adc	r6, r9, r5
   27cd8:	stm	r0, {r1, r6}
   27cdc:	str	r3, [r0, #8]
   27ce0:	add	sp, sp, #20
   27ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ce8:	push	{r4, lr}
   27cec:	mov	r2, #260	; 0x104
   27cf0:	ldr	r3, [pc, #8]	; 27d00 <flatcc_json_parser_struct_as_root@@Base+0x14d8>
   27cf4:	ldr	r1, [pc, #8]	; 27d04 <flatcc_json_parser_struct_as_root@@Base+0x14dc>
   27cf8:	ldr	r0, [pc, #8]	; 27d08 <flatcc_json_parser_struct_as_root@@Base+0x14e0>
   27cfc:	bl	14620 <__assert_fail@plt>
   27d00:	andeq	r2, r3, r1, asr #24
   27d04:	andeq	r2, r3, r3, lsl #15
   27d08:	ldrdeq	r2, [r3], -r9
   27d0c:	push	{r4, lr}
   27d10:	mov	r2, #239	; 0xef
   27d14:	ldr	r3, [pc, #8]	; 27d24 <flatcc_json_parser_struct_as_root@@Base+0x14fc>
   27d18:	ldr	r1, [pc, #8]	; 27d28 <flatcc_json_parser_struct_as_root@@Base+0x1500>
   27d1c:	ldr	r0, [pc, #8]	; 27d2c <flatcc_json_parser_struct_as_root@@Base+0x1504>
   27d20:	bl	14620 <__assert_fail@plt>
   27d24:	andeq	r2, r3, r9, asr ip
   27d28:	andeq	r2, r3, r3, lsl #15
   27d2c:			; <UNDEFINED> instruction: 0x000332bc
   27d30:	cmp	r0, #0
   27d34:	beq	27d54 <flatcc_json_parser_struct_as_root@@Base+0x152c>
   27d38:	ldr	r3, [pc, #48]	; 27d70 <flatcc_json_parser_struct_as_root@@Base+0x1548>
   27d3c:	mov	r0, #4
   27d40:	ldr	r2, [r3]
   27d44:	ldrb	r3, [r3, #4]
   27d48:	str	r2, [r1]
   27d4c:	strb	r3, [r1, #4]
   27d50:	bx	lr
   27d54:	ldr	r3, [pc, #24]	; 27d74 <flatcc_json_parser_struct_as_root@@Base+0x154c>
   27d58:	mov	r0, #5
   27d5c:	ldr	r2, [r3]
   27d60:	ldrh	r3, [r3, #4]
   27d64:	str	r2, [r1]
   27d68:	strh	r3, [r1, #4]
   27d6c:	bx	lr
   27d70:	andeq	r2, r3, sp, ror #24
   27d74:	andeq	r2, r3, r3, ror ip
   27d78:	subs	r2, r2, #1
   27d7c:	push	{r4, lr}
   27d80:	mov	r4, r0
   27d84:	sub	sp, sp, #24
   27d88:	bne	27da4 <flatcc_json_parser_struct_as_root@@Base+0x157c>
   27d8c:	ldr	r3, [r0, #36]	; 0x24
   27d90:	cmp	r3, #0
   27d94:	moveq	r3, #2
   27d98:	streq	r3, [r0, #36]	; 0x24
   27d9c:	add	sp, sp, #24
   27da0:	pop	{r4, pc}
   27da4:	ldr	ip, [r0, #32]
   27da8:	add	ip, ip, #1
   27dac:	str	ip, [r0, #32]
   27db0:	ldr	ip, [r0, #20]
   27db4:	add	lr, ip, #1
   27db8:	str	lr, [r0, #20]
   27dbc:	mov	lr, #123	; 0x7b
   27dc0:	strb	lr, [ip]
   27dc4:	mov	ip, #0
   27dc8:	str	r1, [sp, #4]
   27dcc:	str	r2, [sp, #16]
   27dd0:	ldr	r2, [r1]
   27dd4:	str	ip, [sp, #20]
   27dd8:	sub	r1, r1, r2
   27ddc:	ldrh	r2, [r1]
   27de0:	str	r1, [sp, #8]
   27de4:	add	r1, sp, #4
   27de8:	str	r2, [sp, #12]
   27dec:	blx	r3
   27df0:	ldrb	r3, [r4, #25]
   27df4:	cmp	r3, #0
   27df8:	beq	27e24 <flatcc_json_parser_struct_as_root@@Base+0x15fc>
   27dfc:	ldr	r3, [r4, #20]
   27e00:	mov	r0, r4
   27e04:	add	r2, r3, #1
   27e08:	str	r2, [r4, #20]
   27e0c:	mov	r2, #10
   27e10:	strb	r2, [r3]
   27e14:	ldr	r3, [r4, #32]
   27e18:	sub	r3, r3, #1
   27e1c:	str	r3, [r4, #32]
   27e20:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   27e24:	ldr	r3, [r4, #20]
   27e28:	add	r2, r3, #1
   27e2c:	str	r2, [r4, #20]
   27e30:	mov	r2, #125	; 0x7d
   27e34:	strb	r2, [r3]
   27e38:	b	27d9c <flatcc_json_parser_struct_as_root@@Base+0x1574>
   27e3c:	push	{r0, r1, r2, r4, r5, lr}
   27e40:	mov	r4, r0
   27e44:	mov	r0, #0
   27e48:	cmp	r1, r0
   27e4c:	cmpne	r2, #7
   27e50:	str	r0, [sp, #4]
   27e54:	bhi	27e7c <flatcc_json_parser_struct_as_root@@Base+0x1654>
   27e58:	ldr	r3, [r4, #36]	; 0x24
   27e5c:	movw	r2, #1019	; 0x3fb
   27e60:	ldr	r1, [pc, #116]	; 27edc <flatcc_json_parser_struct_as_root@@Base+0x16b4>
   27e64:	cmp	r3, r0
   27e68:	ldr	r0, [pc, #112]	; 27ee0 <flatcc_json_parser_struct_as_root@@Base+0x16b8>
   27e6c:	moveq	r3, #1
   27e70:	streq	r3, [r4, #36]	; 0x24
   27e74:	ldr	r3, [pc, #104]	; 27ee4 <flatcc_json_parser_struct_as_root@@Base+0x16bc>
   27e78:	bl	14620 <__assert_fail@plt>
   27e7c:	cmp	r3, #0
   27e80:	beq	27ed0 <flatcc_json_parser_struct_as_root@@Base+0x16a8>
   27e84:	mov	r2, #4
   27e88:	mov	r5, r1
   27e8c:	add	r0, sp, r2
   27e90:	mov	r1, r3
   27e94:	bl	145cc <strncpy@plt>
   27e98:	ldr	r2, [r5, #4]
   27e9c:	ldr	r3, [sp, #4]
   27ea0:	cmp	r2, r3
   27ea4:	cmpne	r3, #0
   27ea8:	beq	27ed0 <flatcc_json_parser_struct_as_root@@Base+0x16a8>
   27eac:	ldr	r3, [r4, #36]	; 0x24
   27eb0:	movw	r2, #1028	; 0x404
   27eb4:	ldr	r1, [pc, #32]	; 27edc <flatcc_json_parser_struct_as_root@@Base+0x16b4>
   27eb8:	ldr	r0, [pc, #40]	; 27ee8 <flatcc_json_parser_struct_as_root@@Base+0x16c0>
   27ebc:	cmp	r3, #0
   27ec0:	moveq	r3, #1
   27ec4:	streq	r3, [r4, #36]	; 0x24
   27ec8:	ldr	r3, [pc, #20]	; 27ee4 <flatcc_json_parser_struct_as_root@@Base+0x16bc>
   27ecc:	b	27e78 <flatcc_json_parser_struct_as_root@@Base+0x1650>
   27ed0:	mov	r0, #1
   27ed4:	add	sp, sp, #12
   27ed8:	pop	{r4, r5, pc}
   27edc:	ldrdeq	r3, [r3], -r5
   27ee0:	andeq	r3, r3, r0, lsr #6
   27ee4:	andeq	r2, r3, sl, ror ip
   27ee8:	andeq	r3, r3, pc, lsr r3
   27eec:	push	{r4, r5, lr}
   27ef0:	bics	lr, r3, #224	; 0xe0
   27ef4:	ldr	ip, [r2]
   27ef8:	beq	27f10 <flatcc_json_parser_struct_as_root@@Base+0x16e8>
   27efc:	cmp	lr, #1
   27f00:	ldreq	lr, [pc, #312]	; 28040 <flatcc_json_parser_struct_as_root@@Base+0x1818>
   27f04:	beq	27f14 <flatcc_json_parser_struct_as_root@@Base+0x16ec>
   27f08:	mov	r0, #3
   27f0c:	b	27f8c <flatcc_json_parser_struct_as_root@@Base+0x1764>
   27f10:	ldr	lr, [pc, #300]	; 28044 <flatcc_json_parser_struct_as_root@@Base+0x181c>
   27f14:	cmp	ip, #2
   27f18:	mov	r4, r0
   27f1c:	mov	r5, r1
   27f20:	add	r0, r0, #4
   27f24:	add	r1, r1, #3
   27f28:	bhi	27f9c <flatcc_json_parser_struct_as_root@@Base+0x1774>
   27f2c:	cmp	ip, #1
   27f30:	and	r3, r3, #128	; 0x80
   27f34:	beq	2800c <flatcc_json_parser_struct_as_root@@Base+0x17e4>
   27f38:	cmp	ip, #2
   27f3c:	bne	28000 <flatcc_json_parser_struct_as_root@@Base+0x17d8>
   27f40:	ldrb	r1, [r5]
   27f44:	cmp	r3, #0
   27f48:	ldrb	r1, [lr, r1, lsr #2]
   27f4c:	strb	r1, [r4]
   27f50:	ldrb	r1, [r5]
   27f54:	ldrb	r0, [r5, #1]
   27f58:	lsl	r1, r1, #4
   27f5c:	and	r1, r1, #48	; 0x30
   27f60:	orr	r1, r1, r0, lsr #4
   27f64:	ldrb	r1, [lr, r1]
   27f68:	strb	r1, [r4, #1]
   27f6c:	ldrb	r1, [r5, #1]
   27f70:	lsl	r1, r1, #2
   27f74:	and	r1, r1, #60	; 0x3c
   27f78:	ldrb	r1, [lr, r1]
   27f7c:	strb	r1, [r4, #2]
   27f80:	bne	27ff8 <flatcc_json_parser_struct_as_root@@Base+0x17d0>
   27f84:	mov	r0, #0
   27f88:	mov	ip, r0
   27f8c:	ldr	r3, [r2]
   27f90:	sub	ip, r3, ip
   27f94:	str	ip, [r2]
   27f98:	pop	{r4, r5, pc}
   27f9c:	ldrb	r4, [r1, #-3]
   27fa0:	sub	ip, ip, #3
   27fa4:	ldrb	r4, [lr, r4, lsr #2]
   27fa8:	strb	r4, [r0, #-4]
   27fac:	ldrb	r4, [r1, #-3]
   27fb0:	ldrb	r5, [r1, #-2]
   27fb4:	lsl	r4, r4, #4
   27fb8:	and	r4, r4, #48	; 0x30
   27fbc:	orr	r4, r4, r5, lsr #4
   27fc0:	ldrb	r4, [lr, r4]
   27fc4:	strb	r4, [r0, #-3]
   27fc8:	ldrb	r4, [r1, #-2]
   27fcc:	ldrb	r5, [r1, #-1]
   27fd0:	lsl	r4, r4, #2
   27fd4:	and	r4, r4, #60	; 0x3c
   27fd8:	orr	r4, r4, r5, lsr #6
   27fdc:	ldrb	r4, [lr, r4]
   27fe0:	strb	r4, [r0, #-2]
   27fe4:	ldrb	r4, [r1, #-1]
   27fe8:	and	r4, r4, #63	; 0x3f
   27fec:	ldrb	r4, [lr, r4]
   27ff0:	strb	r4, [r0, #-1]
   27ff4:	b	27f14 <flatcc_json_parser_struct_as_root@@Base+0x16ec>
   27ff8:	mov	r3, #61	; 0x3d
   27ffc:	strb	r3, [r4, #3]
   28000:	mov	ip, #0
   28004:	mov	r0, ip
   28008:	b	27f8c <flatcc_json_parser_struct_as_root@@Base+0x1764>
   2800c:	ldrb	r1, [r5]
   28010:	cmp	r3, #0
   28014:	ldrb	r1, [lr, r1, lsr #2]
   28018:	strb	r1, [r4]
   2801c:	ldrb	r1, [r5]
   28020:	lsl	r1, r1, #4
   28024:	and	r1, r1, #48	; 0x30
   28028:	ldrb	r1, [lr, r1]
   2802c:	strb	r1, [r4, #1]
   28030:	beq	27f84 <flatcc_json_parser_struct_as_root@@Base+0x175c>
   28034:	mov	r3, #61	; 0x3d
   28038:	strb	r3, [r4, #2]
   2803c:	b	27ffc <flatcc_json_parser_struct_as_root@@Base+0x17d4>
   28040:	andeq	r3, r3, sl, asr r3
   28044:	muleq	r3, fp, r3
   28048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2804c:	sub	sp, sp, #180	; 0xb4
   28050:	subs	r1, r0, #0
   28054:	vstr	d0, [sp, #64]	; 0x40
   28058:	str	r1, [sp, #104]	; 0x68
   2805c:	ldrd	r6, [sp, #64]	; 0x40
   28060:	bne	28078 <flatcc_json_parser_struct_as_root@@Base+0x1850>
   28064:	ldr	r3, [pc, #1140]	; 284e0 <flatcc_json_parser_struct_as_root@@Base+0x1cb8>
   28068:	mov	r2, #189	; 0xbd
   2806c:	ldr	r1, [pc, #1136]	; 284e4 <flatcc_json_parser_struct_as_root@@Base+0x1cbc>
   28070:	ldr	r0, [pc, #1136]	; 284e8 <flatcc_json_parser_struct_as_root@@Base+0x1cc0>
   28074:	bl	14620 <__assert_fail@plt>
   28078:	ldr	r5, [pc, #1132]	; 284ec <flatcc_json_parser_struct_as_root@@Base+0x1cc4>
   2807c:	adds	r2, r6, r6
   28080:	mov	r4, #0
   28084:	adc	r3, r7, r7
   28088:	cmp	r3, r5
   2808c:	cmpeq	r2, r4
   28090:	bls	280b0 <flatcc_json_parser_struct_as_root@@Base+0x1888>
   28094:	mov	r3, r6
   28098:	mov	r2, r7
   2809c:	ldr	r1, [pc, #1100]	; 284f0 <flatcc_json_parser_struct_as_root@@Base+0x1cc8>
   280a0:	bl	145fc <sprintf@plt>
   280a4:	mov	r0, #21
   280a8:	add	sp, sp, #180	; 0xb4
   280ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280b0:	cmp	r6, #0
   280b4:	ldr	r4, [sp, #104]	; 0x68
   280b8:	sbcs	r3, r7, #0
   280bc:	bge	280dc <flatcc_json_parser_struct_as_root@@Base+0x18b4>
   280c0:	vldr	d7, [sp, #64]	; 0x40
   280c4:	mov	r3, #45	; 0x2d
   280c8:	strb	r3, [r4], #1
   280cc:	add	r3, r7, #-2147483648	; 0x80000000
   280d0:	mov	r7, r3
   280d4:	vneg.f64	d7, d7
   280d8:	vstr	d7, [sp, #64]	; 0x40
   280dc:	orrs	r3, r6, r7
   280e0:	bne	28100 <flatcc_json_parser_struct_as_root@@Base+0x18d8>
   280e4:	mov	r3, #48	; 0x30
   280e8:	strb	r3, [r4]
   280ec:	mov	r3, #0
   280f0:	strb	r3, [r4, #1]!
   280f4:	ldr	r3, [sp, #104]	; 0x68
   280f8:	sub	r0, r4, r3
   280fc:	b	280a8 <flatcc_json_parser_struct_as_root@@Base+0x1880>
   28100:	ldr	r3, [pc, #1004]	; 284f4 <flatcc_json_parser_struct_as_root@@Base+0x1ccc>
   28104:	mov	r2, #0
   28108:	cmp	r7, r3
   2810c:	cmpeq	r6, r2
   28110:	bne	28138 <flatcc_json_parser_struct_as_root@@Base+0x1910>
   28114:	mov	r3, #105	; 0x69
   28118:	strb	r3, [r4]
   2811c:	mov	r3, #110	; 0x6e
   28120:	strb	r3, [r4, #1]
   28124:	mov	r3, #102	; 0x66
   28128:	strb	r3, [r4, #2]
   2812c:	mov	r3, #0
   28130:	strb	r3, [r4, #3]!
   28134:	b	280f4 <flatcc_json_parser_struct_as_root@@Base+0x18cc>
   28138:	ldrd	r2, [sp, #64]	; 0x40
   2813c:	mov	r0, #0
   28140:	mov	r1, #0
   28144:	strd	r0, [sp, #56]	; 0x38
   28148:	bic	r1, r3, #-2147483648	; 0x80000000
   2814c:	mov	sl, r2
   28150:	ubfx	fp, r3, #0, #20
   28154:	lsr	r1, r1, #20
   28158:	lsl	r1, r1, #20
   2815c:	str	r1, [sp, #60]	; 0x3c
   28160:	ldrd	r0, [sp, #56]	; 0x38
   28164:	orrs	r2, r0, r1
   28168:	bne	28198 <flatcc_json_parser_struct_as_root@@Base+0x1970>
   2816c:	orrs	r3, sl, fp
   28170:	beq	281b0 <flatcc_json_parser_struct_as_root@@Base+0x1988>
   28174:	ldr	r3, [pc, #892]	; 284f8 <flatcc_json_parser_struct_as_root@@Base+0x1cd0>
   28178:	mov	r1, sl
   2817c:	mov	lr, fp
   28180:	mov	r2, r3
   28184:	mov	ip, #0
   28188:	str	r1, [sp, #32]
   2818c:	ldr	r0, [pc, #872]	; 284fc <flatcc_json_parser_struct_as_root@@Base+0x1cd4>
   28190:	str	lr, [sp, #36]	; 0x24
   28194:	b	281d4 <flatcc_json_parser_struct_as_root@@Base+0x19ac>
   28198:	ubfx	r3, r3, #20, #11
   2819c:	adds	r1, sl, #0
   281a0:	adc	lr, fp, #1048576	; 0x100000
   281a4:	sub	r3, r3, #1072	; 0x430
   281a8:	sub	r3, r3, #3
   281ac:	b	28180 <flatcc_json_parser_struct_as_root@@Base+0x1958>
   281b0:	bl	27ce8 <flatcc_json_parser_struct_as_root@@Base+0x14c0>
   281b4:	ldr	r6, [sp, #32]
   281b8:	ldr	r2, [sp, #36]	; 0x24
   281bc:	lsl	r2, r2, #10
   281c0:	orr	r2, r2, r6, lsr #22
   281c4:	lsl	r6, r6, #10
   281c8:	str	r2, [sp, #36]	; 0x24
   281cc:	mov	r2, r5
   281d0:	str	r6, [sp, #32]
   281d4:	ldr	r6, [sp, #36]	; 0x24
   281d8:	sub	r5, r2, #10
   281dc:	str	ip, [sp, #88]	; 0x58
   281e0:	and	r6, r6, r0
   281e4:	str	r6, [sp, #92]	; 0x5c
   281e8:	ldrd	r6, [sp, #88]	; 0x58
   281ec:	orrs	r6, r6, r7
   281f0:	beq	281b4 <flatcc_json_parser_struct_as_root@@Base+0x198c>
   281f4:	ldrd	r6, [sp, #32]
   281f8:	mov	ip, r2
   281fc:	sub	r2, r2, #1
   28200:	cmp	r6, #0
   28204:	sbcs	r0, r7, #0
   28208:	bge	282b0 <flatcc_json_parser_struct_as_root@@Base+0x1a88>
   2820c:	adds	r2, r1, r1
   28210:	sub	r5, r3, #11
   28214:	adc	r0, lr, lr
   28218:	adds	r8, r2, #1
   2821c:	adc	r9, r0, #0
   28220:	str	r0, [sp, #88]	; 0x58
   28224:	sub	r0, r3, #1
   28228:	lsl	r6, r9, #10
   2822c:	lsl	r7, r8, #10
   28230:	orr	r6, r6, r8, lsr #22
   28234:	mov	r8, r7
   28238:	mov	r9, r6
   2823c:	mov	r6, #0
   28240:	str	r6, [sp, #72]	; 0x48
   28244:	lsr	r6, r9, #22
   28248:	lsl	r6, r6, #22
   2824c:	str	r6, [sp, #76]	; 0x4c
   28250:	sub	r6, r5, #10
   28254:	str	r6, [sp, #108]	; 0x6c
   28258:	ldrd	r6, [sp, #72]	; 0x48
   2825c:	orrs	r6, r6, r7
   28260:	beq	282cc <flatcc_json_parser_struct_as_root@@Base+0x1aa4>
   28264:	cmp	r8, #0
   28268:	mov	r6, r5
   2826c:	sbcs	r7, r9, #0
   28270:	sub	r5, r5, #1
   28274:	bge	282d4 <flatcc_json_parser_struct_as_root@@Base+0x1aac>
   28278:	vldr	d7, [sp, #64]	; 0x40
   2827c:	vcmpe.f64	d7, #0.0
   28280:	vmrs	APSR_nzcv, fpscr
   28284:	ble	2829c <flatcc_json_parser_struct_as_root@@Base+0x1a74>
   28288:	vldr	d7, [pc, #576]	; 284d0 <flatcc_json_parser_struct_as_root@@Base+0x1ca8>
   2828c:	vldr	d6, [sp, #64]	; 0x40
   28290:	vcmpe.f64	d6, d7
   28294:	vmrs	APSR_nzcv, fpscr
   28298:	bls	282e0 <flatcc_json_parser_struct_as_root@@Base+0x1ab8>
   2829c:	ldr	r3, [pc, #604]	; 28500 <flatcc_json_parser_struct_as_root@@Base+0x1cd8>
   282a0:	mov	r2, #138	; 0x8a
   282a4:	ldr	r1, [pc, #568]	; 284e4 <flatcc_json_parser_struct_as_root@@Base+0x1cbc>
   282a8:	ldr	r0, [pc, #596]	; 28504 <flatcc_json_parser_struct_as_root@@Base+0x1cdc>
   282ac:	b	28074 <flatcc_json_parser_struct_as_root@@Base+0x184c>
   282b0:	ldr	r0, [sp, #32]
   282b4:	adds	r0, r0, r0
   282b8:	str	r0, [sp, #32]
   282bc:	ldr	r0, [sp, #36]	; 0x24
   282c0:	adc	r0, r0, r0
   282c4:	str	r0, [sp, #36]	; 0x24
   282c8:	b	281f4 <flatcc_json_parser_struct_as_root@@Base+0x19cc>
   282cc:	ldr	r5, [sp, #108]	; 0x6c
   282d0:	b	28228 <flatcc_json_parser_struct_as_root@@Base+0x1a00>
   282d4:	adds	r8, r8, r8
   282d8:	adc	r9, r9, r9
   282dc:	b	28264 <flatcc_json_parser_struct_as_root@@Base+0x1a3c>
   282e0:	orrs	r5, sl, fp
   282e4:	ldr	r7, [sp, #56]	; 0x38
   282e8:	moveq	r5, #1
   282ec:	movne	r5, #0
   282f0:	ldr	sl, [sp, #60]	; 0x3c
   282f4:	orrs	r7, r7, sl
   282f8:	moveq	r5, #0
   282fc:	cmp	r5, #0
   28300:	beq	284bc <flatcc_json_parser_struct_as_root@@Base+0x1c94>
   28304:	lsl	fp, lr, #2
   28308:	sub	r0, r3, #2
   2830c:	lsl	r2, r1, #2
   28310:	orr	fp, fp, r1, lsr #30
   28314:	subs	r2, r2, #1
   28318:	sbc	fp, fp, #0
   2831c:	sub	r7, r0, r6
   28320:	vldr	d6, [pc, #432]	; 284d8 <flatcc_json_parser_struct_as_root@@Base+0x1cb0>
   28324:	lsl	fp, fp, r7
   28328:	sub	r1, r7, #32
   2832c:	rsb	r3, r7, #32
   28330:	lsl	r7, r2, r7
   28334:	orr	fp, fp, r2, lsl r1
   28338:	orr	fp, fp, r2, lsr r3
   2833c:	mvn	r3, #60	; 0x3c
   28340:	sub	r3, r3, ip
   28344:	vmov	s14, r3
   28348:	vcvt.f64.s32	d7, s14
   2834c:	vmul.f64	d7, d7, d6
   28350:	vcmpe.f64	d7, #0.0
   28354:	vcvt.s32.f64	s13, d7
   28358:	vmov	r3, s13
   2835c:	vmrs	APSR_nzcv, fpscr
   28360:	bmi	28378 <flatcc_json_parser_struct_as_root@@Base+0x1b50>
   28364:	vcvt.f64.s32	d6, s13
   28368:	vsub.f64	d7, d7, d6
   2836c:	vcmp.f64	d7, #0.0
   28370:	vmrs	APSR_nzcv, fpscr
   28374:	addne	r3, r3, #1
   28378:	add	r3, r3, #344	; 0x158
   2837c:	ldr	r5, [pc, #388]	; 28508 <flatcc_json_parser_struct_as_root@@Base+0x1ce0>
   28380:	add	r2, r3, #10
   28384:	add	r3, r3, #3
   28388:	str	ip, [sp]
   2838c:	cmp	r3, #0
   28390:	movlt	r3, r2
   28394:	asr	r3, r3, #3
   28398:	add	r1, r5, #304	; 0x130
   2839c:	add	r3, r3, #1
   283a0:	lsl	r3, r3, #4
   283a4:	add	r2, r1, r3
   283a8:	ldrd	r0, [r1, r3]
   283ac:	ldrsh	r3, [r2, #10]
   283b0:	ldrsh	sl, [r2, #8]
   283b4:	mov	r2, r0
   283b8:	str	r3, [sp, #108]	; 0x6c
   283bc:	mov	r3, r1
   283c0:	strd	r2, [sp, #8]
   283c4:	str	sl, [sp, #16]
   283c8:	strd	r0, [sp, #88]	; 0x58
   283cc:	add	r0, sp, #128	; 0x80
   283d0:	ldrd	r2, [sp, #32]
   283d4:	bl	27c54 <flatcc_json_parser_struct_as_root@@Base+0x142c>
   283d8:	ldrd	r2, [sp, #128]	; 0x80
   283dc:	add	r0, sp, #160	; 0xa0
   283e0:	str	r6, [sp]
   283e4:	str	sl, [sp, #16]
   283e8:	strd	r2, [sp, #56]	; 0x38
   283ec:	ldr	r3, [sp, #136]	; 0x88
   283f0:	str	r3, [sp, #72]	; 0x48
   283f4:	ldrd	r2, [sp, #88]	; 0x58
   283f8:	strd	r2, [sp, #8]
   283fc:	mov	r2, r7
   28400:	mov	r3, fp
   28404:	bl	27c54 <flatcc_json_parser_struct_as_root@@Base+0x142c>
   28408:	ldrd	r2, [sp, #88]	; 0x58
   2840c:	add	r0, sp, #144	; 0x90
   28410:	str	r6, [sp]
   28414:	ldr	r7, [sp, #160]	; 0xa0
   28418:	ldr	r1, [sp, #164]	; 0xa4
   2841c:	strd	r2, [sp, #8]
   28420:	mov	r2, r8
   28424:	mov	r3, r9
   28428:	str	sl, [sp, #16]
   2842c:	ldr	fp, [sp, #168]	; 0xa8
   28430:	str	r1, [sp, #32]
   28434:	bl	27c54 <flatcc_json_parser_struct_as_root@@Base+0x142c>
   28438:	ldr	r1, [sp, #32]
   2843c:	ldr	r3, [sp, #152]	; 0x98
   28440:	str	r3, [sp, #88]	; 0x58
   28444:	subs	r3, r7, #1
   28448:	str	r3, [sp, #80]	; 0x50
   2844c:	sbc	r3, r1, #0
   28450:	ldr	r2, [sp, #80]	; 0x50
   28454:	str	r3, [sp, #84]	; 0x54
   28458:	ldr	r3, [sp, #144]	; 0x90
   2845c:	adds	r3, r3, #1
   28460:	str	r3, [sp, #40]	; 0x28
   28464:	ldr	r3, [sp, #148]	; 0x94
   28468:	adc	r3, r3, #0
   2846c:	str	r3, [sp, #44]	; 0x2c
   28470:	ldr	r3, [sp, #40]	; 0x28
   28474:	ldrd	r0, [sp, #40]	; 0x28
   28478:	subs	r3, r3, r2
   2847c:	ldr	r2, [sp, #84]	; 0x54
   28480:	str	r3, [sp, #48]	; 0x30
   28484:	ldr	r3, [sp, #44]	; 0x2c
   28488:	sbc	r3, r3, r2
   2848c:	str	r3, [sp, #52]	; 0x34
   28490:	ldrd	r2, [sp, #80]	; 0x50
   28494:	cmp	r3, r1
   28498:	ldr	r3, [sp, #88]	; 0x58
   2849c:	cmpeq	r2, r0
   284a0:	movhi	r1, #1
   284a4:	movls	r1, #0
   284a8:	cmp	fp, r3
   284ac:	orrne	r1, r1, #1
   284b0:	cmp	r1, #0
   284b4:	beq	28510 <flatcc_json_parser_struct_as_root@@Base+0x1ce8>
   284b8:	bl	27d0c <flatcc_json_parser_struct_as_root@@Base+0x14e4>
   284bc:	ldr	r3, [sp, #88]	; 0x58
   284c0:	subs	r2, r2, #1
   284c4:	sbc	fp, r3, #0
   284c8:	b	2831c <flatcc_json_parser_struct_as_root@@Base+0x1af4>
   284cc:	nop	{0}
   284d0:			; <UNDEFINED> instruction: 0xffffffff
   284d4:	svcvc	0x00efffff
   284d8:			; <UNDEFINED> instruction: 0x509f79fe
   284dc:	svccc	0x00d34413
   284e0:	andeq	r2, r3, r8, lsl #25
   284e4:	ldrdeq	r3, [r3], -ip
   284e8:	andeq	r3, r3, r3, lsr r4
   284ec:			; <UNDEFINED> instruction: 0xffe00000
   284f0:	andeq	r3, r3, r7, lsr r4
   284f4:	svcvc	0x00f00000	; IMB
   284f8:			; <UNDEFINED> instruction: 0xfffffbce
   284fc:			; <UNDEFINED> instruction: 0xffc00000
   28500:	muleq	r3, ip, ip
   28504:	andeq	r3, r3, r5, asr #8
   28508:	andeq	r2, r3, r8, ror fp
   2850c:	andeq	r3, r3, sl, ror #8
   28510:	ldr	r2, [sp, #44]	; 0x2c
   28514:	movw	r0, #1233	; 0x4d1
   28518:	ldr	r3, [sp, #72]	; 0x48
   2851c:	rsb	ip, r3, #0
   28520:	mov	r3, #1
   28524:	sub	r7, ip, #32
   28528:	rsb	sl, ip, #32
   2852c:	orr	lr, r1, r3, lsl r7
   28530:	str	sl, [sp, #112]	; 0x70
   28534:	orr	lr, lr, r3, lsr sl
   28538:	lsl	r3, r3, ip
   2853c:	str	r3, [sp, #116]	; 0x74
   28540:	ldr	r3, [sp, #40]	; 0x28
   28544:	lsr	r3, r3, ip
   28548:	orr	r3, r3, r2, lsl sl
   2854c:	orr	r3, r3, r2, lsr r7
   28550:	str	r3, [sp, #32]
   28554:	ldr	r3, [sp, #116]	; 0x74
   28558:	subs	r3, r3, #1
   2855c:	str	r3, [sp, #120]	; 0x78
   28560:	sbc	r3, lr, #0
   28564:	ldr	r2, [sp, #120]	; 0x78
   28568:	str	r3, [sp, #124]	; 0x7c
   2856c:	ldr	r3, [sp, #40]	; 0x28
   28570:	and	r8, r3, r2
   28574:	ldr	r3, [sp, #44]	; 0x2c
   28578:	sbc	r2, lr, #0
   2857c:	and	r9, r3, r2
   28580:	ldr	r3, [sp, #72]	; 0x48
   28584:	add	r2, r3, #65	; 0x41
   28588:	ldr	r3, [sp, #32]
   2858c:	mul	r0, r0, r2
   28590:	asr	r0, r0, #12
   28594:	add	r2, r0, #1
   28598:	add	r6, r5, r2, lsl #2
   2859c:	ldr	r6, [r6, #1696]	; 0x6a0
   285a0:	cmp	r3, r6
   285a4:	sub	r3, r4, #1
   285a8:	movcc	r2, r0
   285ac:	add	r5, r5, r2, lsl #2
   285b0:	str	r3, [sp, #80]	; 0x50
   285b4:	ldr	r0, [r5, #1696]	; 0x6a0
   285b8:	cmp	r2, #0
   285bc:	add	r5, r1, #1
   285c0:	sub	r6, r2, #1
   285c4:	bgt	286e4 <flatcc_json_parser_struct_as_root@@Base+0x1ebc>
   285c8:	rsb	r6, ip, #32
   285cc:	mov	r5, r1
   285d0:	mov	r0, #1
   285d4:	mov	r1, #0
   285d8:	mov	r3, #10
   285dc:	add	r2, r5, r2
   285e0:	str	r6, [sp, #80]	; 0x50
   285e4:	sub	r6, ip, #32
   285e8:	str	r6, [sp, #96]	; 0x60
   285ec:	mul	sl, r3, r1
   285f0:	umull	r0, r1, r0, r3
   285f4:	umull	r6, r7, r8, r3
   285f8:	add	r1, sl, r1
   285fc:	ldr	sl, [sp, #52]	; 0x34
   28600:	mla	r7, r3, r9, r7
   28604:	mul	sl, r3, sl
   28608:	str	sl, [sp, #32]
   2860c:	ldr	sl, [sp, #48]	; 0x30
   28610:	umull	sl, fp, sl, r3
   28614:	strd	sl, [sp, #48]	; 0x30
   28618:	ldr	fp, [sp, #32]
   2861c:	ldr	sl, [sp, #52]	; 0x34
   28620:	add	sl, fp, sl
   28624:	ldr	fp, [sp, #80]	; 0x50
   28628:	str	sl, [sp, #52]	; 0x34
   2862c:	lsr	sl, r6, ip
   28630:	orr	sl, sl, r7, lsl fp
   28634:	ldr	fp, [sp, #96]	; 0x60
   28638:	orr	sl, sl, r7, lsr fp
   2863c:	add	sl, sl, #48	; 0x30
   28640:	strb	sl, [r4, r5]
   28644:	add	r5, r5, #1
   28648:	ldr	sl, [sp, #120]	; 0x78
   2864c:	and	r8, sl, r6
   28650:	ldr	sl, [sp, #124]	; 0x7c
   28654:	sub	r6, r2, r5
   28658:	and	r9, sl, r7
   2865c:	ldrd	sl, [sp, #48]	; 0x30
   28660:	cmp	fp, r9
   28664:	cmpeq	sl, r8
   28668:	bls	285ec <flatcc_json_parser_struct_as_root@@Base+0x1dc4>
   2866c:	ldr	r3, [sp, #40]	; 0x28
   28670:	ldr	r2, [sp, #56]	; 0x38
   28674:	ldrd	sl, [sp, #56]	; 0x38
   28678:	subs	r3, r3, r2
   2867c:	ldr	r2, [sp, #60]	; 0x3c
   28680:	str	r3, [sp, #32]
   28684:	ldr	r3, [sp, #44]	; 0x2c
   28688:	sbc	ip, r3, r2
   2868c:	ldrd	r2, [sp, #40]	; 0x28
   28690:	cmp	fp, r3
   28694:	ldr	r3, [sp, #72]	; 0x48
   28698:	cmpeq	sl, r2
   2869c:	ldr	r2, [sp, #88]	; 0x58
   286a0:	movhi	r7, #1
   286a4:	movls	r7, #0
   286a8:	cmp	r3, r2
   286ac:	orrne	r7, r7, #1
   286b0:	cmp	r7, #0
   286b4:	bne	284b8 <flatcc_json_parser_struct_as_root@@Base+0x1c90>
   286b8:	ldr	r2, [sp, #32]
   286bc:	mul	r3, r0, ip
   286c0:	strd	r8, [sp, #8]
   286c4:	strd	r0, [sp, #24]
   286c8:	str	lr, [sp, #20]
   286cc:	mla	ip, r2, r1, r3
   286d0:	ldr	r1, [sp, #116]	; 0x74
   286d4:	umull	r2, r3, r0, r2
   286d8:	add	r3, ip, r3
   286dc:	str	r1, [sp, #16]
   286e0:	b	287b4 <flatcc_json_parser_struct_as_root@@Base+0x1f8c>
   286e4:	ldr	r3, [sp, #32]
   286e8:	ldrd	sl, [sp, #48]	; 0x30
   286ec:	udiv	r2, r3, r0
   286f0:	ldr	r3, [sp, #80]	; 0x50
   286f4:	add	r1, r2, #48	; 0x30
   286f8:	strb	r1, [r3, #1]!
   286fc:	str	r3, [sp, #80]	; 0x50
   28700:	ldr	r3, [sp, #32]
   28704:	ldr	r1, [sp, #112]	; 0x70
   28708:	mls	r3, r0, r2, r3
   2870c:	mov	r2, #0
   28710:	orr	r2, r2, r3, lsl r7
   28714:	str	r3, [sp, #32]
   28718:	orr	r2, r2, r3, lsr r1
   2871c:	lsl	r1, r3, ip
   28720:	adds	r3, r1, r8
   28724:	str	r3, [sp, #96]	; 0x60
   28728:	adc	r3, r2, r9
   2872c:	str	r3, [sp, #100]	; 0x64
   28730:	ldrd	r2, [sp, #96]	; 0x60
   28734:	cmp	fp, r3
   28738:	cmpeq	sl, r2
   2873c:	bls	287f8 <flatcc_json_parser_struct_as_root@@Base+0x1fd0>
   28740:	ldr	r3, [sp, #40]	; 0x28
   28744:	ldrd	sl, [sp, #40]	; 0x28
   28748:	ldr	r2, [sp, #56]	; 0x38
   2874c:	ldrd	r8, [sp, #56]	; 0x38
   28750:	ldr	r1, [sp, #60]	; 0x3c
   28754:	subs	r2, r3, r2
   28758:	ldr	r3, [sp, #44]	; 0x2c
   2875c:	ldr	lr, [sp, #72]	; 0x48
   28760:	sbc	r3, r3, r1
   28764:	cmp	r9, fp
   28768:	cmpeq	r8, sl
   2876c:	ldr	r8, [sp, #88]	; 0x58
   28770:	movhi	r1, #1
   28774:	movls	r1, #0
   28778:	cmp	lr, r8
   2877c:	orrne	r1, r1, #1
   28780:	cmp	r1, #0
   28784:	bne	284b8 <flatcc_json_parser_struct_as_root@@Base+0x1c90>
   28788:	orr	r7, r1, r0, lsl r7
   2878c:	ldr	r1, [sp, #112]	; 0x70
   28790:	mov	r8, #1
   28794:	lsl	ip, r0, ip
   28798:	mov	r9, #0
   2879c:	str	ip, [sp, #16]
   287a0:	orr	r7, r7, r0, lsr r1
   287a4:	ldrd	r0, [sp, #96]	; 0x60
   287a8:	strd	r8, [sp, #24]
   287ac:	strd	r0, [sp, #8]
   287b0:	str	r7, [sp, #20]
   287b4:	ldrd	r0, [sp, #48]	; 0x30
   287b8:	strd	r0, [sp]
   287bc:	mov	r1, r5
   287c0:	mov	r0, r4
   287c4:	bl	272e4 <flatcc_json_parser_struct_as_root@@Base+0xabc>
   287c8:	ldr	r3, [sp, #108]	; 0x6c
   287cc:	cmp	r0, #0
   287d0:	sub	r7, r6, r3
   287d4:	bne	2880c <flatcc_json_parser_struct_as_root@@Base+0x1fe4>
   287d8:	mov	r0, r4
   287dc:	ldr	r1, [pc, #-728]	; 2850c <flatcc_json_parser_struct_as_root@@Base+0x1ce4>
   287e0:	ldrd	r2, [sp, #64]	; 0x40
   287e4:	bl	145fc <sprintf@plt>
   287e8:	ldr	r3, [sp, #104]	; 0x68
   287ec:	sub	r4, r4, r3
   287f0:	add	r0, r4, r0
   287f4:	b	280a8 <flatcc_json_parser_struct_as_root@@Base+0x1880>
   287f8:	mov	r3, #10
   287fc:	mov	r2, r6
   28800:	mov	r1, r5
   28804:	udiv	r0, r0, r3
   28808:	b	285b8 <flatcc_json_parser_struct_as_root@@Base+0x1d90>
   2880c:	ldr	r3, [sp, #108]	; 0x6c
   28810:	cmp	r5, #2
   28814:	movge	r0, r5
   28818:	movlt	r0, #2
   2881c:	sub	r6, r3, r6
   28820:	cmp	r0, r6
   28824:	suble	r0, r0, #1
   28828:	movgt	r0, r6
   2882c:	cmp	r7, #0
   28830:	bge	28928 <flatcc_json_parser_struct_as_root@@Base+0x2100>
   28834:	add	r3, r7, r5
   28838:	cmp	r6, r5
   2883c:	cmnge	r3, #2
   28840:	blt	288b0 <flatcc_json_parser_struct_as_root@@Base+0x2088>
   28844:	rsb	r0, r5, #2
   28848:	mov	r2, r5
   2884c:	sub	r0, r0, r7
   28850:	mov	r1, r4
   28854:	add	r0, r4, r0
   28858:	bl	14530 <memmove@plt>
   2885c:	mov	r3, #46	; 0x2e
   28860:	mov	r2, #2
   28864:	mov	r1, #48	; 0x30
   28868:	strb	r3, [r4, #1]
   2886c:	sub	r3, r2, r7
   28870:	sub	r3, r3, r5
   28874:	strb	r1, [r4]
   28878:	cmp	r3, r2
   2887c:	bgt	288a4 <flatcc_json_parser_struct_as_root@@Base+0x207c>
   28880:	cmp	r3, #2
   28884:	addge	r3, r5, r3
   28888:	addlt	r3, r5, #2
   2888c:	mov	r2, #0
   28890:	add	r0, r4, r3
   28894:	strb	r2, [r4, r3]
   28898:	ldr	r3, [sp, #104]	; 0x68
   2889c:	sub	r0, r0, r3
   288a0:	b	280a8 <flatcc_json_parser_struct_as_root@@Base+0x1880>
   288a4:	strb	r1, [r4, r2]
   288a8:	add	r2, r2, #1
   288ac:	b	28878 <flatcc_json_parser_struct_as_root@@Base+0x2050>
   288b0:	cmp	r5, #1
   288b4:	addne	r3, r4, r5
   288b8:	movne	r1, r3
   288bc:	bne	288e8 <flatcc_json_parser_struct_as_root@@Base+0x20c0>
   288c0:	mov	r3, #101	; 0x65
   288c4:	add	r6, r5, #1
   288c8:	add	r1, r4, r6
   288cc:	mov	r0, r7
   288d0:	strb	r3, [r4, r5]
   288d4:	bl	27530 <flatcc_json_parser_struct_as_root@@Base+0xd08>
   288d8:	add	r3, r6, r0
   288dc:	b	2888c <flatcc_json_parser_struct_as_root@@Base+0x2064>
   288e0:	ldrb	r2, [r3, #-1]
   288e4:	strb	r2, [r3], #-1
   288e8:	sub	r2, r1, r3
   288ec:	cmp	r0, r2
   288f0:	bgt	288e0 <flatcc_json_parser_struct_as_root@@Base+0x20b8>
   288f4:	sub	r2, r5, r0
   288f8:	mov	r1, #46	; 0x2e
   288fc:	adds	r0, r0, r7
   28900:	add	r3, r5, #1
   28904:	strb	r1, [r4, r2]
   28908:	beq	2888c <flatcc_json_parser_struct_as_root@@Base+0x2064>
   2890c:	mov	r2, #101	; 0x65
   28910:	add	r5, r5, #2
   28914:	add	r1, r4, r5
   28918:	strb	r2, [r4, r3]
   2891c:	bl	27530 <flatcc_json_parser_struct_as_root@@Base+0xd08>
   28920:	add	r3, r5, r0
   28924:	b	2888c <flatcc_json_parser_struct_as_root@@Base+0x2064>
   28928:	cmp	r7, #2
   2892c:	bgt	288c0 <flatcc_json_parser_struct_as_root@@Base+0x2098>
   28930:	cmp	r7, #0
   28934:	addne	r3, r4, r5
   28938:	movne	r1, #48	; 0x30
   2893c:	addne	r2, r3, r7
   28940:	bne	28950 <flatcc_json_parser_struct_as_root@@Base+0x2128>
   28944:	mov	r3, r5
   28948:	b	2888c <flatcc_json_parser_struct_as_root@@Base+0x2064>
   2894c:	strb	r1, [r3], #1
   28950:	cmp	r2, r3
   28954:	bne	2894c <flatcc_json_parser_struct_as_root@@Base+0x2124>
   28958:	add	r3, r7, r5
   2895c:	b	2888c <flatcc_json_parser_struct_as_root@@Base+0x2064>

00028960 <flatcc_json_printer_error_string@@Base>:
   28960:	cmp	r0, #3
   28964:	ldrls	r3, [pc, #12]	; 28978 <flatcc_json_printer_error_string@@Base+0x18>
   28968:	addls	r3, r3, r0, lsl #2
   2896c:	ldrls	r0, [r3, #1740]	; 0x6cc
   28970:	ldrhi	r0, [pc, #4]	; 2897c <flatcc_json_printer_error_string@@Base+0x1c>
   28974:	bx	lr
   28978:	andeq	r2, r3, r8, ror fp
   2897c:			; <UNDEFINED> instruction: 0x00031ab8

00028980 <flatcc_json_printer_fmt_float@@Base>:
   28980:	vcvt.f64.f32	d0, s0
   28984:	b	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>

00028988 <flatcc_json_printer_fmt_double@@Base>:
   28988:	b	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>

0002898c <flatcc_json_printer_fmt_bool@@Base>:
   2898c:	cmp	r1, #0
   28990:	beq	289a8 <flatcc_json_printer_fmt_bool@@Base+0x1c>
   28994:	ldr	r3, [pc, #40]	; 289c4 <flatcc_json_printer_fmt_bool@@Base+0x38>
   28998:	ldr	r3, [r3]
   2899c:	str	r3, [r0]
   289a0:	mov	r0, #4
   289a4:	bx	lr
   289a8:	ldr	r3, [pc, #24]	; 289c8 <flatcc_json_printer_fmt_bool@@Base+0x3c>
   289ac:	ldr	r2, [r3]
   289b0:	ldrb	r3, [r3, #4]
   289b4:	str	r2, [r0]
   289b8:	strb	r3, [r0, #4]
   289bc:	mov	r0, #5
   289c0:	bx	lr
   289c4:	ldrdeq	lr, [r2], -r6
   289c8:	ldrdeq	lr, [r2], -fp

000289cc <flatcc_json_printer_string@@Base>:
   289cc:	b	276e4 <flatcc_json_parser_struct_as_root@@Base+0xebc>

000289d0 <flatcc_json_printer_write@@Base>:
   289d0:	b	27644 <flatcc_json_parser_struct_as_root@@Base+0xe1c>

000289d4 <flatcc_json_printer_nl@@Base>:
   289d4:	ldr	r3, [r0, #20]
   289d8:	mov	r2, #10
   289dc:	add	r1, r3, #1
   289e0:	str	r1, [r0, #20]
   289e4:	strb	r2, [r3]
   289e8:	b	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>

000289ec <flatcc_json_printer_char@@Base>:
   289ec:	ldr	r3, [r0, #20]
   289f0:	add	r2, r3, #1
   289f4:	str	r2, [r0, #20]
   289f8:	strb	r1, [r3]
   289fc:	bx	lr

00028a00 <flatcc_json_printer_indent@@Base>:
   28a00:	b	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>

00028a04 <flatcc_json_printer_add_level@@Base>:
   28a04:	ldr	r3, [r0, #32]
   28a08:	add	r1, r3, r1
   28a0c:	str	r1, [r0, #32]
   28a10:	bx	lr

00028a14 <flatcc_json_printer_get_level@@Base>:
   28a14:	ldr	r0, [r0, #32]
   28a18:	bx	lr

00028a1c <flatcc_json_printer_uint8@@Base>:
   28a1c:	push	{r4, lr}
   28a20:	mov	r4, r0
   28a24:	mov	r0, r1
   28a28:	ldr	r1, [r4, #20]
   28a2c:	bl	27b98 <flatcc_json_parser_struct_as_root@@Base+0x1370>
   28a30:	ldr	r3, [r4, #20]
   28a34:	add	r0, r3, r0
   28a38:	str	r0, [r4, #20]
   28a3c:	pop	{r4, pc}

00028a40 <flatcc_json_printer_uint16@@Base>:
   28a40:	push	{r4, lr}
   28a44:	mov	r4, r0
   28a48:	mov	r0, r1
   28a4c:	ldr	r1, [r4, #20]
   28a50:	bl	26830 <flatcc_json_parser_struct_as_root@@Base+0x8>
   28a54:	ldr	r3, [r4, #20]
   28a58:	add	r0, r3, r0
   28a5c:	str	r0, [r4, #20]
   28a60:	pop	{r4, pc}

00028a64 <flatcc_json_printer_uint32@@Base>:
   28a64:	push	{r4, lr}
   28a68:	mov	r4, r0
   28a6c:	mov	r0, r1
   28a70:	ldr	r1, [r4, #20]
   28a74:	bl	26974 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   28a78:	ldr	r3, [r4, #20]
   28a7c:	add	r0, r3, r0
   28a80:	str	r0, [r4, #20]
   28a84:	pop	{r4, pc}

00028a88 <flatcc_json_printer_uint64@@Base>:
   28a88:	push	{r4, lr}
   28a8c:	mov	r4, r0
   28a90:	mov	r1, r3
   28a94:	mov	r0, r2
   28a98:	ldr	r2, [r4, #20]
   28a9c:	bl	26c24 <flatcc_json_parser_struct_as_root@@Base+0x3fc>
   28aa0:	ldr	r3, [r4, #20]
   28aa4:	add	r0, r3, r0
   28aa8:	str	r0, [r4, #20]
   28aac:	pop	{r4, pc}

00028ab0 <flatcc_json_printer_int8@@Base>:
   28ab0:	push	{r4, lr}
   28ab4:	mov	r4, r0
   28ab8:	mov	r0, r1
   28abc:	ldr	r1, [r4, #20]
   28ac0:	bl	27c28 <flatcc_json_parser_struct_as_root@@Base+0x1400>
   28ac4:	ldr	r3, [r4, #20]
   28ac8:	add	r0, r3, r0
   28acc:	str	r0, [r4, #20]
   28ad0:	pop	{r4, pc}

00028ad4 <flatcc_json_printer_int16@@Base>:
   28ad4:	push	{r4, lr}
   28ad8:	mov	r4, r0
   28adc:	mov	r0, r1
   28ae0:	ldr	r1, [r4, #20]
   28ae4:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0xa3c>
   28ae8:	ldr	r3, [r4, #20]
   28aec:	add	r0, r3, r0
   28af0:	str	r0, [r4, #20]
   28af4:	pop	{r4, pc}

00028af8 <flatcc_json_printer_int32@@Base>:
   28af8:	push	{r4, lr}
   28afc:	mov	r4, r0
   28b00:	mov	r0, r1
   28b04:	ldr	r1, [r4, #20]
   28b08:	bl	27290 <flatcc_json_parser_struct_as_root@@Base+0xa68>
   28b0c:	ldr	r3, [r4, #20]
   28b10:	add	r0, r3, r0
   28b14:	str	r0, [r4, #20]
   28b18:	pop	{r4, pc}

00028b1c <flatcc_json_printer_int64@@Base>:
   28b1c:	push	{r4, lr}
   28b20:	mov	r4, r0
   28b24:	mov	r1, r3
   28b28:	mov	r0, r2
   28b2c:	ldr	r2, [r4, #20]
   28b30:	bl	272b4 <flatcc_json_parser_struct_as_root@@Base+0xa8c>
   28b34:	ldr	r3, [r4, #20]
   28b38:	add	r0, r3, r0
   28b3c:	str	r0, [r4, #20]
   28b40:	pop	{r4, pc}

00028b44 <flatcc_json_printer_float@@Base>:
   28b44:	push	{r4, lr}
   28b48:	vcvt.f64.f32	d0, s0
   28b4c:	mov	r4, r0
   28b50:	ldr	r0, [r0, #20]
   28b54:	bl	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>
   28b58:	ldr	r3, [r4, #20]
   28b5c:	add	r0, r3, r0
   28b60:	str	r0, [r4, #20]
   28b64:	pop	{r4, pc}

00028b68 <flatcc_json_printer_double@@Base>:
   28b68:	push	{r4, lr}
   28b6c:	mov	r4, r0
   28b70:	ldr	r0, [r0, #20]
   28b74:	bl	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>
   28b78:	ldr	r3, [r4, #20]
   28b7c:	add	r0, r3, r0
   28b80:	str	r0, [r4, #20]
   28b84:	pop	{r4, pc}

00028b88 <flatcc_json_printer_enum@@Base>:
   28b88:	b	27898 <flatcc_json_parser_struct_as_root@@Base+0x1070>

00028b8c <flatcc_json_printer_delimit_enum_flags@@Base>:
   28b8c:	ldrb	r3, [r0, #26]
   28b90:	adds	r1, r1, #0
   28b94:	movne	r1, #1
   28b98:	ldr	r2, [r0, #20]
   28b9c:	cmp	r3, #0
   28ba0:	movne	r3, r1
   28ba4:	mov	r1, #34	; 0x22
   28ba8:	moveq	r3, #1
   28bac:	strb	r1, [r2]
   28bb0:	ldr	r1, [r0, #20]
   28bb4:	add	r1, r1, r3
   28bb8:	str	r1, [r0, #20]
   28bbc:	bx	lr

00028bc0 <flatcc_json_printer_enum_flag@@Base>:
   28bc0:	push	{r4, lr}
   28bc4:	mov	lr, r2
   28bc8:	mov	r4, #32
   28bcc:	ldr	r2, [r0, #20]
   28bd0:	strb	r4, [r2]
   28bd4:	ldr	r2, [r0, #20]
   28bd8:	cmp	r1, #0
   28bdc:	movle	r1, r2
   28be0:	addgt	r1, r2, #1
   28be4:	mov	r2, r3
   28be8:	str	r1, [r0, #20]
   28bec:	mov	r1, lr
   28bf0:	pop	{r4, lr}
   28bf4:	b	27644 <flatcc_json_parser_struct_as_root@@Base+0xe1c>

00028bf8 <flatcc_json_printer_string_field@@Base>:
   28bf8:	push	{r4, r5, r6, r7, r8, lr}
   28bfc:	mov	r5, r1
   28c00:	mov	r4, r0
   28c04:	mov	r1, r2
   28c08:	mov	r0, r5
   28c0c:	mov	r7, r3
   28c10:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   28c14:	subs	r6, r0, #0
   28c18:	ldr	r8, [sp, #24]
   28c1c:	popeq	{r4, r5, r6, r7, r8, pc}
   28c20:	ldr	r2, [r5, #16]
   28c24:	add	r3, r2, #1
   28c28:	cmp	r2, #0
   28c2c:	str	r3, [r5, #16]
   28c30:	beq	28c48 <flatcc_json_printer_string_field@@Base+0x50>
   28c34:	ldr	r2, [r4, #20]
   28c38:	add	r3, r2, #1
   28c3c:	str	r3, [r4, #20]
   28c40:	mov	r3, #44	; 0x2c
   28c44:	strb	r3, [r2]
   28c48:	mov	r1, r7
   28c4c:	mov	r0, r4
   28c50:	mov	r2, r8
   28c54:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   28c58:	ldr	r1, [r6]
   28c5c:	mov	r0, r4
   28c60:	add	r1, r6, r1
   28c64:	pop	{r4, r5, r6, r7, r8, lr}
   28c68:	b	27890 <flatcc_json_parser_struct_as_root@@Base+0x1068>

00028c6c <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   28c6c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28c70:	mov	r6, r1
   28c74:	mov	r4, r0
   28c78:	mov	r1, r2
   28c7c:	mov	r0, r6
   28c80:	mov	r9, r3
   28c84:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   28c88:	subs	r5, r0, #0
   28c8c:	beq	28d6c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x100>
   28c90:	ldr	r2, [r6, #16]
   28c94:	add	r3, r2, #1
   28c98:	cmp	r2, #0
   28c9c:	str	r3, [r6, #16]
   28ca0:	beq	28cb8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4c>
   28ca4:	ldr	r2, [r4, #20]
   28ca8:	add	r3, r2, #1
   28cac:	str	r3, [r4, #20]
   28cb0:	mov	r3, #44	; 0x2c
   28cb4:	strb	r3, [r2]
   28cb8:	mov	r1, r9
   28cbc:	mov	r0, r4
   28cc0:	ldr	r2, [sp, #40]	; 0x28
   28cc4:	ldr	r7, [sp, #44]	; 0x2c
   28cc8:	adds	r7, r7, #0
   28ccc:	movne	r7, #1
   28cd0:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   28cd4:	ldr	r3, [r5]
   28cd8:	orr	r8, r7, #128	; 0x80
   28cdc:	mov	r1, r8
   28ce0:	add	r6, r5, r3
   28ce4:	ldr	r3, [r5, r3]
   28ce8:	add	r6, r6, #4
   28cec:	str	r3, [sp]
   28cf0:	ldr	r3, [r4, #20]
   28cf4:	add	r2, r3, #1
   28cf8:	str	r2, [r4, #20]
   28cfc:	mov	r2, #34	; 0x22
   28d00:	strb	r2, [r3]
   28d04:	ldr	r0, [sp]
   28d08:	bl	275b0 <flatcc_json_parser_struct_as_root@@Base+0xd88>
   28d0c:	ldrd	r2, [r4, #16]
   28d10:	mov	r9, r0
   28d14:	add	r3, r3, r0
   28d18:	cmp	r2, r3
   28d1c:	bhi	28d30 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xc4>
   28d20:	mov	r1, #0
   28d24:	mov	r0, r4
   28d28:	ldr	r3, [r4, #44]	; 0x2c
   28d2c:	blx	r3
   28d30:	ldr	r5, [r4, #16]
   28d34:	ldr	r0, [r4, #20]
   28d38:	add	r3, r0, r9
   28d3c:	cmp	r5, r3
   28d40:	bcc	28d74 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x108>
   28d44:	mov	r3, r8
   28d48:	mov	r2, sp
   28d4c:	mov	r1, r6
   28d50:	bl	27eec <flatcc_json_parser_struct_as_root@@Base+0x16c4>
   28d54:	ldr	r2, [r4, #20]
   28d58:	add	r3, r2, r9
   28d5c:	add	r3, r3, #1
   28d60:	str	r3, [r4, #20]
   28d64:	mov	r3, #34	; 0x22
   28d68:	strb	r3, [r2, r9]
   28d6c:	add	sp, sp, #12
   28d70:	pop	{r4, r5, r6, r7, r8, r9, pc}
   28d74:	sub	r5, r5, r0
   28d78:	bic	r5, r5, #3
   28d7c:	add	r3, r5, r5, lsl #1
   28d80:	cmp	r3, #3
   28d84:	lsr	r9, r3, #2
   28d88:	bhi	28da0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x134>
   28d8c:	ldr	r3, [pc, #96]	; 28df4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x188>
   28d90:	movw	r2, #277	; 0x115
   28d94:	ldr	r1, [pc, #92]	; 28df8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x18c>
   28d98:	ldr	r0, [pc, #92]	; 28dfc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x190>
   28d9c:	bl	14620 <__assert_fail@plt>
   28da0:	add	r2, sp, #4
   28da4:	mov	r1, r6
   28da8:	str	r9, [sp, #4]
   28dac:	mov	r3, r7
   28db0:	add	r6, r6, r9
   28db4:	bl	27eec <flatcc_json_parser_struct_as_root@@Base+0x16c4>
   28db8:	ldr	r3, [r4, #20]
   28dbc:	mov	r1, #0
   28dc0:	mov	r0, r4
   28dc4:	add	r5, r3, r5
   28dc8:	ldr	r3, [sp]
   28dcc:	str	r5, [r4, #20]
   28dd0:	sub	r3, r3, r9
   28dd4:	str	r3, [sp]
   28dd8:	ldr	r3, [r4, #44]	; 0x2c
   28ddc:	blx	r3
   28de0:	mov	r1, r8
   28de4:	ldr	r0, [sp]
   28de8:	bl	275b0 <flatcc_json_parser_struct_as_root@@Base+0xd88>
   28dec:	mov	r9, r0
   28df0:	b	28d30 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xc4>
   28df4:	andeq	r3, r3, r4, asr r2
   28df8:	ldrdeq	r3, [r3], -r5
   28dfc:	andeq	r3, r3, r0, ror r4

00028e00 <flatcc_json_printer_uint8_field@@Base>:
   28e00:	push	{r4, r5, r6, r7, r8, lr}
   28e04:	mov	r6, r1
   28e08:	mov	r4, r0
   28e0c:	mov	r1, r2
   28e10:	mov	r0, r6
   28e14:	mov	r7, r3
   28e18:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   28e1c:	cmp	r0, #0
   28e20:	ldrb	r5, [sp, #28]
   28e24:	beq	28e98 <flatcc_json_printer_uint8_field@@Base+0x98>
   28e28:	ldrb	r2, [r0]
   28e2c:	cmp	r2, r5
   28e30:	movne	r5, r2
   28e34:	bne	28e44 <flatcc_json_printer_uint8_field@@Base+0x44>
   28e38:	ldrb	r3, [r4, #28]
   28e3c:	cmp	r3, #0
   28e40:	popne	{r4, r5, r6, r7, r8, pc}
   28e44:	ldr	r2, [r6, #16]
   28e48:	add	r3, r2, #1
   28e4c:	cmp	r2, #0
   28e50:	str	r3, [r6, #16]
   28e54:	beq	28e6c <flatcc_json_printer_uint8_field@@Base+0x6c>
   28e58:	ldr	r2, [r4, #20]
   28e5c:	add	r3, r2, #1
   28e60:	str	r3, [r4, #20]
   28e64:	mov	r3, #44	; 0x2c
   28e68:	strb	r3, [r2]
   28e6c:	mov	r1, r7
   28e70:	mov	r0, r4
   28e74:	ldr	r2, [sp, #24]
   28e78:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   28e7c:	mov	r0, r5
   28e80:	ldr	r1, [r4, #20]
   28e84:	bl	27b98 <flatcc_json_parser_struct_as_root@@Base+0x1370>
   28e88:	ldr	r3, [r4, #20]
   28e8c:	add	r0, r3, r0
   28e90:	str	r0, [r4, #20]
   28e94:	pop	{r4, r5, r6, r7, r8, pc}
   28e98:	ldrb	r3, [r4, #29]
   28e9c:	cmp	r3, #0
   28ea0:	bne	28e44 <flatcc_json_printer_uint8_field@@Base+0x44>
   28ea4:	pop	{r4, r5, r6, r7, r8, pc}

00028ea8 <flatcc_json_printer_uint16_field@@Base>:
   28ea8:	push	{r4, r5, r6, r7, r8, lr}
   28eac:	mov	r6, r1
   28eb0:	mov	r4, r0
   28eb4:	mov	r1, r2
   28eb8:	mov	r0, r6
   28ebc:	mov	r7, r3
   28ec0:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   28ec4:	cmp	r0, #0
   28ec8:	ldrh	r5, [sp, #28]
   28ecc:	beq	28f40 <flatcc_json_printer_uint16_field@@Base+0x98>
   28ed0:	ldrh	r2, [r0]
   28ed4:	cmp	r2, r5
   28ed8:	movne	r5, r2
   28edc:	bne	28eec <flatcc_json_printer_uint16_field@@Base+0x44>
   28ee0:	ldrb	r3, [r4, #28]
   28ee4:	cmp	r3, #0
   28ee8:	popne	{r4, r5, r6, r7, r8, pc}
   28eec:	ldr	r2, [r6, #16]
   28ef0:	add	r3, r2, #1
   28ef4:	cmp	r2, #0
   28ef8:	str	r3, [r6, #16]
   28efc:	beq	28f14 <flatcc_json_printer_uint16_field@@Base+0x6c>
   28f00:	ldr	r2, [r4, #20]
   28f04:	add	r3, r2, #1
   28f08:	str	r3, [r4, #20]
   28f0c:	mov	r3, #44	; 0x2c
   28f10:	strb	r3, [r2]
   28f14:	mov	r1, r7
   28f18:	mov	r0, r4
   28f1c:	ldr	r2, [sp, #24]
   28f20:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   28f24:	mov	r0, r5
   28f28:	ldr	r1, [r4, #20]
   28f2c:	bl	26830 <flatcc_json_parser_struct_as_root@@Base+0x8>
   28f30:	ldr	r3, [r4, #20]
   28f34:	add	r0, r3, r0
   28f38:	str	r0, [r4, #20]
   28f3c:	pop	{r4, r5, r6, r7, r8, pc}
   28f40:	ldrb	r3, [r4, #29]
   28f44:	cmp	r3, #0
   28f48:	bne	28eec <flatcc_json_printer_uint16_field@@Base+0x44>
   28f4c:	pop	{r4, r5, r6, r7, r8, pc}

00028f50 <flatcc_json_printer_uint32_field@@Base>:
   28f50:	push	{r4, r5, r6, r7, r8, lr}
   28f54:	mov	r6, r1
   28f58:	mov	r4, r0
   28f5c:	mov	r1, r2
   28f60:	mov	r0, r6
   28f64:	mov	r7, r3
   28f68:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   28f6c:	cmp	r0, #0
   28f70:	ldr	r5, [sp, #28]
   28f74:	beq	28fe8 <flatcc_json_printer_uint32_field@@Base+0x98>
   28f78:	ldr	r2, [r0]
   28f7c:	cmp	r2, r5
   28f80:	movne	r5, r2
   28f84:	bne	28f94 <flatcc_json_printer_uint32_field@@Base+0x44>
   28f88:	ldrb	r3, [r4, #28]
   28f8c:	cmp	r3, #0
   28f90:	popne	{r4, r5, r6, r7, r8, pc}
   28f94:	ldr	r2, [r6, #16]
   28f98:	add	r3, r2, #1
   28f9c:	cmp	r2, #0
   28fa0:	str	r3, [r6, #16]
   28fa4:	beq	28fbc <flatcc_json_printer_uint32_field@@Base+0x6c>
   28fa8:	ldr	r2, [r4, #20]
   28fac:	add	r3, r2, #1
   28fb0:	str	r3, [r4, #20]
   28fb4:	mov	r3, #44	; 0x2c
   28fb8:	strb	r3, [r2]
   28fbc:	mov	r1, r7
   28fc0:	mov	r0, r4
   28fc4:	ldr	r2, [sp, #24]
   28fc8:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   28fcc:	mov	r0, r5
   28fd0:	ldr	r1, [r4, #20]
   28fd4:	bl	26974 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   28fd8:	ldr	r3, [r4, #20]
   28fdc:	add	r0, r3, r0
   28fe0:	str	r0, [r4, #20]
   28fe4:	pop	{r4, r5, r6, r7, r8, pc}
   28fe8:	ldrb	r3, [r4, #29]
   28fec:	cmp	r3, #0
   28ff0:	bne	28f94 <flatcc_json_printer_uint32_field@@Base+0x44>
   28ff4:	pop	{r4, r5, r6, r7, r8, pc}

00028ff8 <flatcc_json_printer_uint64_field@@Base>:
   28ff8:	push	{r4, r5, r6, r7, r8, lr}
   28ffc:	mov	r5, r1
   29000:	mov	r4, r0
   29004:	mov	r1, r2
   29008:	mov	r0, r5
   2900c:	mov	r8, r3
   29010:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   29014:	cmp	r0, #0
   29018:	ldrd	r6, [sp, #32]
   2901c:	beq	2909c <flatcc_json_printer_uint64_field@@Base+0xa4>
   29020:	ldrd	r2, [r0]
   29024:	cmp	r3, r7
   29028:	cmpeq	r2, r6
   2902c:	movne	r6, r2
   29030:	movne	r7, r3
   29034:	bne	29044 <flatcc_json_printer_uint64_field@@Base+0x4c>
   29038:	ldrb	r3, [r4, #28]
   2903c:	cmp	r3, #0
   29040:	popne	{r4, r5, r6, r7, r8, pc}
   29044:	ldr	r2, [r5, #16]
   29048:	add	r3, r2, #1
   2904c:	cmp	r2, #0
   29050:	str	r3, [r5, #16]
   29054:	beq	2906c <flatcc_json_printer_uint64_field@@Base+0x74>
   29058:	ldr	r2, [r4, #20]
   2905c:	add	r3, r2, #1
   29060:	str	r3, [r4, #20]
   29064:	mov	r3, #44	; 0x2c
   29068:	strb	r3, [r2]
   2906c:	mov	r1, r8
   29070:	mov	r0, r4
   29074:	ldr	r2, [sp, #24]
   29078:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2907c:	mov	r0, r6
   29080:	mov	r1, r7
   29084:	ldr	r2, [r4, #20]
   29088:	bl	26c24 <flatcc_json_parser_struct_as_root@@Base+0x3fc>
   2908c:	ldr	r3, [r4, #20]
   29090:	add	r0, r3, r0
   29094:	str	r0, [r4, #20]
   29098:	pop	{r4, r5, r6, r7, r8, pc}
   2909c:	ldrb	r3, [r4, #29]
   290a0:	cmp	r3, #0
   290a4:	bne	29044 <flatcc_json_printer_uint64_field@@Base+0x4c>
   290a8:	pop	{r4, r5, r6, r7, r8, pc}

000290ac <flatcc_json_printer_int8_field@@Base>:
   290ac:	push	{r4, r5, r6, r7, r8, lr}
   290b0:	mov	r6, r1
   290b4:	mov	r4, r0
   290b8:	mov	r1, r2
   290bc:	mov	r0, r6
   290c0:	mov	r7, r3
   290c4:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   290c8:	cmp	r0, #0
   290cc:	ldrsb	r5, [sp, #28]
   290d0:	beq	29144 <flatcc_json_printer_int8_field@@Base+0x98>
   290d4:	ldrsb	r2, [r0]
   290d8:	cmp	r2, r5
   290dc:	movne	r5, r2
   290e0:	bne	290f0 <flatcc_json_printer_int8_field@@Base+0x44>
   290e4:	ldrb	r3, [r4, #28]
   290e8:	cmp	r3, #0
   290ec:	popne	{r4, r5, r6, r7, r8, pc}
   290f0:	ldr	r2, [r6, #16]
   290f4:	add	r3, r2, #1
   290f8:	cmp	r2, #0
   290fc:	str	r3, [r6, #16]
   29100:	beq	29118 <flatcc_json_printer_int8_field@@Base+0x6c>
   29104:	ldr	r2, [r4, #20]
   29108:	add	r3, r2, #1
   2910c:	str	r3, [r4, #20]
   29110:	mov	r3, #44	; 0x2c
   29114:	strb	r3, [r2]
   29118:	mov	r1, r7
   2911c:	mov	r0, r4
   29120:	ldr	r2, [sp, #24]
   29124:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29128:	mov	r0, r5
   2912c:	ldr	r1, [r4, #20]
   29130:	bl	27c28 <flatcc_json_parser_struct_as_root@@Base+0x1400>
   29134:	ldr	r3, [r4, #20]
   29138:	add	r0, r3, r0
   2913c:	str	r0, [r4, #20]
   29140:	pop	{r4, r5, r6, r7, r8, pc}
   29144:	ldrb	r3, [r4, #29]
   29148:	cmp	r3, #0
   2914c:	bne	290f0 <flatcc_json_printer_int8_field@@Base+0x44>
   29150:	pop	{r4, r5, r6, r7, r8, pc}

00029154 <flatcc_json_printer_int16_field@@Base>:
   29154:	push	{r4, r5, r6, r7, r8, lr}
   29158:	mov	r6, r1
   2915c:	mov	r4, r0
   29160:	mov	r1, r2
   29164:	mov	r0, r6
   29168:	mov	r7, r3
   2916c:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   29170:	cmp	r0, #0
   29174:	ldrsh	r5, [sp, #28]
   29178:	beq	291ec <flatcc_json_printer_int16_field@@Base+0x98>
   2917c:	ldrsh	r2, [r0]
   29180:	cmp	r2, r5
   29184:	movne	r5, r2
   29188:	bne	29198 <flatcc_json_printer_int16_field@@Base+0x44>
   2918c:	ldrb	r3, [r4, #28]
   29190:	cmp	r3, #0
   29194:	popne	{r4, r5, r6, r7, r8, pc}
   29198:	ldr	r2, [r6, #16]
   2919c:	add	r3, r2, #1
   291a0:	cmp	r2, #0
   291a4:	str	r3, [r6, #16]
   291a8:	beq	291c0 <flatcc_json_printer_int16_field@@Base+0x6c>
   291ac:	ldr	r2, [r4, #20]
   291b0:	add	r3, r2, #1
   291b4:	str	r3, [r4, #20]
   291b8:	mov	r3, #44	; 0x2c
   291bc:	strb	r3, [r2]
   291c0:	mov	r1, r7
   291c4:	mov	r0, r4
   291c8:	ldr	r2, [sp, #24]
   291cc:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   291d0:	mov	r0, r5
   291d4:	ldr	r1, [r4, #20]
   291d8:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0xa3c>
   291dc:	ldr	r3, [r4, #20]
   291e0:	add	r0, r3, r0
   291e4:	str	r0, [r4, #20]
   291e8:	pop	{r4, r5, r6, r7, r8, pc}
   291ec:	ldrb	r3, [r4, #29]
   291f0:	cmp	r3, #0
   291f4:	bne	29198 <flatcc_json_printer_int16_field@@Base+0x44>
   291f8:	pop	{r4, r5, r6, r7, r8, pc}

000291fc <flatcc_json_printer_int32_field@@Base>:
   291fc:	push	{r4, r5, r6, r7, r8, lr}
   29200:	mov	r6, r1
   29204:	mov	r4, r0
   29208:	mov	r1, r2
   2920c:	mov	r0, r6
   29210:	mov	r7, r3
   29214:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   29218:	cmp	r0, #0
   2921c:	ldr	r5, [sp, #28]
   29220:	beq	29294 <flatcc_json_printer_int32_field@@Base+0x98>
   29224:	ldr	r2, [r0]
   29228:	cmp	r2, r5
   2922c:	movne	r5, r2
   29230:	bne	29240 <flatcc_json_printer_int32_field@@Base+0x44>
   29234:	ldrb	r3, [r4, #28]
   29238:	cmp	r3, #0
   2923c:	popne	{r4, r5, r6, r7, r8, pc}
   29240:	ldr	r2, [r6, #16]
   29244:	add	r3, r2, #1
   29248:	cmp	r2, #0
   2924c:	str	r3, [r6, #16]
   29250:	beq	29268 <flatcc_json_printer_int32_field@@Base+0x6c>
   29254:	ldr	r2, [r4, #20]
   29258:	add	r3, r2, #1
   2925c:	str	r3, [r4, #20]
   29260:	mov	r3, #44	; 0x2c
   29264:	strb	r3, [r2]
   29268:	mov	r1, r7
   2926c:	mov	r0, r4
   29270:	ldr	r2, [sp, #24]
   29274:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29278:	mov	r0, r5
   2927c:	ldr	r1, [r4, #20]
   29280:	bl	27290 <flatcc_json_parser_struct_as_root@@Base+0xa68>
   29284:	ldr	r3, [r4, #20]
   29288:	add	r0, r3, r0
   2928c:	str	r0, [r4, #20]
   29290:	pop	{r4, r5, r6, r7, r8, pc}
   29294:	ldrb	r3, [r4, #29]
   29298:	cmp	r3, #0
   2929c:	bne	29240 <flatcc_json_printer_int32_field@@Base+0x44>
   292a0:	pop	{r4, r5, r6, r7, r8, pc}

000292a4 <flatcc_json_printer_int64_field@@Base>:
   292a4:	push	{r4, r5, r6, r7, r8, lr}
   292a8:	mov	r5, r1
   292ac:	mov	r4, r0
   292b0:	mov	r1, r2
   292b4:	mov	r0, r5
   292b8:	mov	r8, r3
   292bc:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   292c0:	cmp	r0, #0
   292c4:	ldrd	r6, [sp, #32]
   292c8:	beq	29348 <flatcc_json_printer_int64_field@@Base+0xa4>
   292cc:	ldrd	r2, [r0]
   292d0:	cmp	r3, r7
   292d4:	cmpeq	r2, r6
   292d8:	movne	r6, r2
   292dc:	movne	r7, r3
   292e0:	bne	292f0 <flatcc_json_printer_int64_field@@Base+0x4c>
   292e4:	ldrb	r3, [r4, #28]
   292e8:	cmp	r3, #0
   292ec:	popne	{r4, r5, r6, r7, r8, pc}
   292f0:	ldr	r2, [r5, #16]
   292f4:	add	r3, r2, #1
   292f8:	cmp	r2, #0
   292fc:	str	r3, [r5, #16]
   29300:	beq	29318 <flatcc_json_printer_int64_field@@Base+0x74>
   29304:	ldr	r2, [r4, #20]
   29308:	add	r3, r2, #1
   2930c:	str	r3, [r4, #20]
   29310:	mov	r3, #44	; 0x2c
   29314:	strb	r3, [r2]
   29318:	mov	r1, r8
   2931c:	mov	r0, r4
   29320:	ldr	r2, [sp, #24]
   29324:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29328:	mov	r0, r6
   2932c:	mov	r1, r7
   29330:	ldr	r2, [r4, #20]
   29334:	bl	272b4 <flatcc_json_parser_struct_as_root@@Base+0xa8c>
   29338:	ldr	r3, [r4, #20]
   2933c:	add	r0, r3, r0
   29340:	str	r0, [r4, #20]
   29344:	pop	{r4, r5, r6, r7, r8, pc}
   29348:	ldrb	r3, [r4, #29]
   2934c:	cmp	r3, #0
   29350:	bne	292f0 <flatcc_json_printer_int64_field@@Base+0x4c>
   29354:	pop	{r4, r5, r6, r7, r8, pc}

00029358 <flatcc_json_printer_bool_field@@Base>:
   29358:	push	{r4, r5, r6, r7, r8, lr}
   2935c:	mov	r6, r1
   29360:	mov	r4, r0
   29364:	mov	r1, r2
   29368:	mov	r0, r6
   2936c:	mov	r7, r3
   29370:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   29374:	cmp	r0, #0
   29378:	ldrb	r5, [sp, #28]
   2937c:	beq	293f0 <flatcc_json_printer_bool_field@@Base+0x98>
   29380:	ldrb	r2, [r0]
   29384:	cmp	r2, r5
   29388:	movne	r5, r2
   2938c:	bne	2939c <flatcc_json_printer_bool_field@@Base+0x44>
   29390:	ldrb	r3, [r4, #28]
   29394:	cmp	r3, #0
   29398:	popne	{r4, r5, r6, r7, r8, pc}
   2939c:	ldr	r2, [r6, #16]
   293a0:	add	r3, r2, #1
   293a4:	cmp	r2, #0
   293a8:	str	r3, [r6, #16]
   293ac:	beq	293c4 <flatcc_json_printer_bool_field@@Base+0x6c>
   293b0:	ldr	r2, [r4, #20]
   293b4:	add	r3, r2, #1
   293b8:	str	r3, [r4, #20]
   293bc:	mov	r3, #44	; 0x2c
   293c0:	strb	r3, [r2]
   293c4:	mov	r1, r7
   293c8:	mov	r0, r4
   293cc:	ldr	r2, [sp, #24]
   293d0:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   293d4:	mov	r0, r5
   293d8:	ldr	r1, [r4, #20]
   293dc:	bl	27d30 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   293e0:	ldr	r3, [r4, #20]
   293e4:	add	r0, r3, r0
   293e8:	str	r0, [r4, #20]
   293ec:	pop	{r4, r5, r6, r7, r8, pc}
   293f0:	ldrb	r3, [r4, #29]
   293f4:	cmp	r3, #0
   293f8:	bne	2939c <flatcc_json_printer_bool_field@@Base+0x44>
   293fc:	pop	{r4, r5, r6, r7, r8, pc}

00029400 <flatcc_json_printer_float_field@@Base>:
   29400:	push	{r4, r5, r6, lr}
   29404:	mov	r5, r1
   29408:	mov	r4, r0
   2940c:	mov	r1, r2
   29410:	mov	r0, r5
   29414:	mov	r6, r3
   29418:	vpush	{d8}
   2941c:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   29420:	cmp	r0, #0
   29424:	beq	2944c <flatcc_json_printer_float_field@@Base+0x4c>
   29428:	vldr	s16, [r0]
   2942c:	vcmp.f32	s16, s0
   29430:	vmrs	APSR_nzcv, fpscr
   29434:	bne	2945c <flatcc_json_printer_float_field@@Base+0x5c>
   29438:	ldrb	r3, [r4, #28]
   2943c:	cmp	r3, #0
   29440:	beq	2945c <flatcc_json_printer_float_field@@Base+0x5c>
   29444:	vpop	{d8}
   29448:	pop	{r4, r5, r6, pc}
   2944c:	ldrb	r3, [r4, #29]
   29450:	cmp	r3, #0
   29454:	beq	29444 <flatcc_json_printer_float_field@@Base+0x44>
   29458:	vmov.f32	s16, s0
   2945c:	ldr	r2, [r5, #16]
   29460:	add	r3, r2, #1
   29464:	cmp	r2, #0
   29468:	str	r3, [r5, #16]
   2946c:	beq	29484 <flatcc_json_printer_float_field@@Base+0x84>
   29470:	ldr	r2, [r4, #20]
   29474:	add	r3, r2, #1
   29478:	str	r3, [r4, #20]
   2947c:	mov	r3, #44	; 0x2c
   29480:	strb	r3, [r2]
   29484:	mov	r1, r6
   29488:	mov	r0, r4
   2948c:	ldr	r2, [sp, #24]
   29490:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29494:	vcvt.f64.f32	d0, s16
   29498:	ldr	r0, [r4, #20]
   2949c:	bl	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>
   294a0:	ldr	r3, [r4, #20]
   294a4:	add	r0, r3, r0
   294a8:	str	r0, [r4, #20]
   294ac:	b	29444 <flatcc_json_printer_float_field@@Base+0x44>

000294b0 <flatcc_json_printer_double_field@@Base>:
   294b0:	push	{r4, r5, r6, lr}
   294b4:	mov	r5, r1
   294b8:	mov	r4, r0
   294bc:	mov	r1, r2
   294c0:	mov	r0, r5
   294c4:	mov	r6, r3
   294c8:	vpush	{d8}
   294cc:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   294d0:	cmp	r0, #0
   294d4:	beq	294fc <flatcc_json_printer_double_field@@Base+0x4c>
   294d8:	vldr	d8, [r0]
   294dc:	vcmp.f64	d8, d0
   294e0:	vmrs	APSR_nzcv, fpscr
   294e4:	bne	2950c <flatcc_json_printer_double_field@@Base+0x5c>
   294e8:	ldrb	r3, [r4, #28]
   294ec:	cmp	r3, #0
   294f0:	beq	2950c <flatcc_json_printer_double_field@@Base+0x5c>
   294f4:	vpop	{d8}
   294f8:	pop	{r4, r5, r6, pc}
   294fc:	ldrb	r3, [r4, #29]
   29500:	cmp	r3, #0
   29504:	beq	294f4 <flatcc_json_printer_double_field@@Base+0x44>
   29508:	vmov.f64	d8, d0
   2950c:	ldr	r2, [r5, #16]
   29510:	add	r3, r2, #1
   29514:	cmp	r2, #0
   29518:	str	r3, [r5, #16]
   2951c:	beq	29534 <flatcc_json_printer_double_field@@Base+0x84>
   29520:	ldr	r2, [r4, #20]
   29524:	add	r3, r2, #1
   29528:	str	r3, [r4, #20]
   2952c:	mov	r3, #44	; 0x2c
   29530:	strb	r3, [r2]
   29534:	mov	r1, r6
   29538:	mov	r0, r4
   2953c:	ldr	r2, [sp, #24]
   29540:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29544:	vmov.f64	d0, d8
   29548:	ldr	r0, [r4, #20]
   2954c:	bl	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>
   29550:	ldr	r3, [r4, #20]
   29554:	add	r0, r3, r0
   29558:	str	r0, [r4, #20]
   2955c:	b	294f4 <flatcc_json_printer_double_field@@Base+0x44>

00029560 <flatcc_json_printer_uint8_enum_field@@Base>:
   29560:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29564:	mov	r6, r1
   29568:	mov	r4, r0
   2956c:	mov	r1, r2
   29570:	mov	r0, r6
   29574:	mov	r8, r3
   29578:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2957c:	cmp	r0, #0
   29580:	ldrb	r5, [sp, #36]	; 0x24
   29584:	ldr	r9, [sp, #32]
   29588:	ldr	r7, [sp, #40]	; 0x28
   2958c:	beq	2960c <flatcc_json_printer_uint8_enum_field@@Base+0xac>
   29590:	ldrb	r2, [r0]
   29594:	cmp	r2, r5
   29598:	movne	r5, r2
   2959c:	bne	295ac <flatcc_json_printer_uint8_enum_field@@Base+0x4c>
   295a0:	ldrb	r3, [r4, #28]
   295a4:	cmp	r3, #0
   295a8:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   295ac:	ldr	r2, [r6, #16]
   295b0:	add	r3, r2, #1
   295b4:	cmp	r2, #0
   295b8:	str	r3, [r6, #16]
   295bc:	beq	295d4 <flatcc_json_printer_uint8_enum_field@@Base+0x74>
   295c0:	ldr	r2, [r4, #20]
   295c4:	add	r3, r2, #1
   295c8:	str	r3, [r4, #20]
   295cc:	mov	r3, #44	; 0x2c
   295d0:	strb	r3, [r2]
   295d4:	mov	r2, r9
   295d8:	mov	r1, r8
   295dc:	mov	r0, r4
   295e0:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   295e4:	ldrb	r3, [r4, #27]
   295e8:	cmp	r3, #0
   295ec:	beq	2961c <flatcc_json_printer_uint8_enum_field@@Base+0xbc>
   295f0:	mov	r0, r5
   295f4:	ldr	r1, [r4, #20]
   295f8:	bl	27b98 <flatcc_json_parser_struct_as_root@@Base+0x1370>
   295fc:	ldr	r3, [r4, #20]
   29600:	add	r0, r3, r0
   29604:	str	r0, [r4, #20]
   29608:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2960c:	ldrb	r3, [r4, #29]
   29610:	cmp	r3, #0
   29614:	bne	295ac <flatcc_json_printer_uint8_enum_field@@Base+0x4c>
   29618:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2961c:	mov	r1, r5
   29620:	mov	r0, r4
   29624:	mov	r3, r7
   29628:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2962c:	bx	r3

00029630 <flatcc_json_printer_uint16_enum_field@@Base>:
   29630:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29634:	mov	r6, r1
   29638:	mov	r4, r0
   2963c:	mov	r1, r2
   29640:	mov	r0, r6
   29644:	mov	r8, r3
   29648:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2964c:	cmp	r0, #0
   29650:	ldrh	r5, [sp, #36]	; 0x24
   29654:	ldr	r9, [sp, #32]
   29658:	ldr	r7, [sp, #40]	; 0x28
   2965c:	beq	296dc <flatcc_json_printer_uint16_enum_field@@Base+0xac>
   29660:	ldrh	r2, [r0]
   29664:	cmp	r2, r5
   29668:	movne	r5, r2
   2966c:	bne	2967c <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
   29670:	ldrb	r3, [r4, #28]
   29674:	cmp	r3, #0
   29678:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   2967c:	ldr	r2, [r6, #16]
   29680:	add	r3, r2, #1
   29684:	cmp	r2, #0
   29688:	str	r3, [r6, #16]
   2968c:	beq	296a4 <flatcc_json_printer_uint16_enum_field@@Base+0x74>
   29690:	ldr	r2, [r4, #20]
   29694:	add	r3, r2, #1
   29698:	str	r3, [r4, #20]
   2969c:	mov	r3, #44	; 0x2c
   296a0:	strb	r3, [r2]
   296a4:	mov	r2, r9
   296a8:	mov	r1, r8
   296ac:	mov	r0, r4
   296b0:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   296b4:	ldrb	r3, [r4, #27]
   296b8:	cmp	r3, #0
   296bc:	beq	296ec <flatcc_json_printer_uint16_enum_field@@Base+0xbc>
   296c0:	mov	r0, r5
   296c4:	ldr	r1, [r4, #20]
   296c8:	bl	26830 <flatcc_json_parser_struct_as_root@@Base+0x8>
   296cc:	ldr	r3, [r4, #20]
   296d0:	add	r0, r3, r0
   296d4:	str	r0, [r4, #20]
   296d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   296dc:	ldrb	r3, [r4, #29]
   296e0:	cmp	r3, #0
   296e4:	bne	2967c <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
   296e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   296ec:	mov	r1, r5
   296f0:	mov	r0, r4
   296f4:	mov	r3, r7
   296f8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   296fc:	bx	r3

00029700 <flatcc_json_printer_uint32_enum_field@@Base>:
   29700:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29704:	mov	r6, r1
   29708:	mov	r4, r0
   2970c:	mov	r1, r2
   29710:	mov	r0, r6
   29714:	mov	r8, r3
   29718:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2971c:	cmp	r0, #0
   29720:	ldr	r9, [sp, #32]
   29724:	ldr	r5, [sp, #36]	; 0x24
   29728:	ldr	r7, [sp, #40]	; 0x28
   2972c:	beq	297ac <flatcc_json_printer_uint32_enum_field@@Base+0xac>
   29730:	ldr	r2, [r0]
   29734:	cmp	r2, r5
   29738:	movne	r5, r2
   2973c:	bne	2974c <flatcc_json_printer_uint32_enum_field@@Base+0x4c>
   29740:	ldrb	r3, [r4, #28]
   29744:	cmp	r3, #0
   29748:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   2974c:	ldr	r2, [r6, #16]
   29750:	add	r3, r2, #1
   29754:	cmp	r2, #0
   29758:	str	r3, [r6, #16]
   2975c:	beq	29774 <flatcc_json_printer_uint32_enum_field@@Base+0x74>
   29760:	ldr	r2, [r4, #20]
   29764:	add	r3, r2, #1
   29768:	str	r3, [r4, #20]
   2976c:	mov	r3, #44	; 0x2c
   29770:	strb	r3, [r2]
   29774:	mov	r2, r9
   29778:	mov	r1, r8
   2977c:	mov	r0, r4
   29780:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29784:	ldrb	r3, [r4, #27]
   29788:	cmp	r3, #0
   2978c:	beq	297bc <flatcc_json_printer_uint32_enum_field@@Base+0xbc>
   29790:	mov	r0, r5
   29794:	ldr	r1, [r4, #20]
   29798:	bl	26974 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   2979c:	ldr	r3, [r4, #20]
   297a0:	add	r0, r3, r0
   297a4:	str	r0, [r4, #20]
   297a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   297ac:	ldrb	r3, [r4, #29]
   297b0:	cmp	r3, #0
   297b4:	bne	2974c <flatcc_json_printer_uint32_enum_field@@Base+0x4c>
   297b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   297bc:	mov	r1, r5
   297c0:	mov	r0, r4
   297c4:	mov	r3, r7
   297c8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   297cc:	bx	r3

000297d0 <flatcc_json_printer_uint64_enum_field@@Base>:
   297d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   297d4:	mov	r5, r1
   297d8:	mov	r4, r0
   297dc:	mov	r1, r2
   297e0:	mov	r0, r5
   297e4:	mov	r9, r3
   297e8:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   297ec:	cmp	r0, #0
   297f0:	ldr	sl, [sp, #32]
   297f4:	ldrd	r6, [sp, #40]	; 0x28
   297f8:	ldr	r8, [sp, #48]	; 0x30
   297fc:	beq	29888 <flatcc_json_printer_uint64_enum_field@@Base+0xb8>
   29800:	ldrd	r2, [r0]
   29804:	cmp	r3, r7
   29808:	cmpeq	r2, r6
   2980c:	movne	r6, r2
   29810:	movne	r7, r3
   29814:	bne	29824 <flatcc_json_printer_uint64_enum_field@@Base+0x54>
   29818:	ldrb	r3, [r4, #28]
   2981c:	cmp	r3, #0
   29820:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   29824:	ldr	r2, [r5, #16]
   29828:	add	r3, r2, #1
   2982c:	cmp	r2, #0
   29830:	str	r3, [r5, #16]
   29834:	beq	2984c <flatcc_json_printer_uint64_enum_field@@Base+0x7c>
   29838:	ldr	r2, [r4, #20]
   2983c:	add	r3, r2, #1
   29840:	str	r3, [r4, #20]
   29844:	mov	r3, #44	; 0x2c
   29848:	strb	r3, [r2]
   2984c:	mov	r2, sl
   29850:	mov	r1, r9
   29854:	mov	r0, r4
   29858:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2985c:	ldrb	r3, [r4, #27]
   29860:	cmp	r3, #0
   29864:	beq	29898 <flatcc_json_printer_uint64_enum_field@@Base+0xc8>
   29868:	mov	r0, r6
   2986c:	mov	r1, r7
   29870:	ldr	r2, [r4, #20]
   29874:	bl	26c24 <flatcc_json_parser_struct_as_root@@Base+0x3fc>
   29878:	ldr	r3, [r4, #20]
   2987c:	add	r0, r3, r0
   29880:	str	r0, [r4, #20]
   29884:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29888:	ldrb	r3, [r4, #29]
   2988c:	cmp	r3, #0
   29890:	bne	29824 <flatcc_json_printer_uint64_enum_field@@Base+0x54>
   29894:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29898:	mov	r2, r6
   2989c:	mov	r3, r7
   298a0:	mov	r0, r4
   298a4:	mov	r1, r8
   298a8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   298ac:	bx	r1

000298b0 <flatcc_json_printer_int8_enum_field@@Base>:
   298b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   298b4:	mov	r6, r1
   298b8:	mov	r4, r0
   298bc:	mov	r1, r2
   298c0:	mov	r0, r6
   298c4:	mov	r8, r3
   298c8:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   298cc:	cmp	r0, #0
   298d0:	ldrsb	r5, [sp, #36]	; 0x24
   298d4:	ldr	r9, [sp, #32]
   298d8:	ldr	r7, [sp, #40]	; 0x28
   298dc:	beq	2995c <flatcc_json_printer_int8_enum_field@@Base+0xac>
   298e0:	ldrsb	r2, [r0]
   298e4:	cmp	r2, r5
   298e8:	movne	r5, r2
   298ec:	bne	298fc <flatcc_json_printer_int8_enum_field@@Base+0x4c>
   298f0:	ldrb	r3, [r4, #28]
   298f4:	cmp	r3, #0
   298f8:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   298fc:	ldr	r2, [r6, #16]
   29900:	add	r3, r2, #1
   29904:	cmp	r2, #0
   29908:	str	r3, [r6, #16]
   2990c:	beq	29924 <flatcc_json_printer_int8_enum_field@@Base+0x74>
   29910:	ldr	r2, [r4, #20]
   29914:	add	r3, r2, #1
   29918:	str	r3, [r4, #20]
   2991c:	mov	r3, #44	; 0x2c
   29920:	strb	r3, [r2]
   29924:	mov	r2, r9
   29928:	mov	r1, r8
   2992c:	mov	r0, r4
   29930:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29934:	ldrb	r3, [r4, #27]
   29938:	cmp	r3, #0
   2993c:	beq	2996c <flatcc_json_printer_int8_enum_field@@Base+0xbc>
   29940:	mov	r0, r5
   29944:	ldr	r1, [r4, #20]
   29948:	bl	27c28 <flatcc_json_parser_struct_as_root@@Base+0x1400>
   2994c:	ldr	r3, [r4, #20]
   29950:	add	r0, r3, r0
   29954:	str	r0, [r4, #20]
   29958:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2995c:	ldrb	r3, [r4, #29]
   29960:	cmp	r3, #0
   29964:	bne	298fc <flatcc_json_printer_int8_enum_field@@Base+0x4c>
   29968:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2996c:	mov	r1, r5
   29970:	mov	r0, r4
   29974:	mov	r3, r7
   29978:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2997c:	bx	r3

00029980 <flatcc_json_printer_int16_enum_field@@Base>:
   29980:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29984:	mov	r6, r1
   29988:	mov	r4, r0
   2998c:	mov	r1, r2
   29990:	mov	r0, r6
   29994:	mov	r8, r3
   29998:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2999c:	cmp	r0, #0
   299a0:	ldrsh	r5, [sp, #36]	; 0x24
   299a4:	ldr	r9, [sp, #32]
   299a8:	ldr	r7, [sp, #40]	; 0x28
   299ac:	beq	29a2c <flatcc_json_printer_int16_enum_field@@Base+0xac>
   299b0:	ldrsh	r2, [r0]
   299b4:	cmp	r2, r5
   299b8:	movne	r5, r2
   299bc:	bne	299cc <flatcc_json_printer_int16_enum_field@@Base+0x4c>
   299c0:	ldrb	r3, [r4, #28]
   299c4:	cmp	r3, #0
   299c8:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   299cc:	ldr	r2, [r6, #16]
   299d0:	add	r3, r2, #1
   299d4:	cmp	r2, #0
   299d8:	str	r3, [r6, #16]
   299dc:	beq	299f4 <flatcc_json_printer_int16_enum_field@@Base+0x74>
   299e0:	ldr	r2, [r4, #20]
   299e4:	add	r3, r2, #1
   299e8:	str	r3, [r4, #20]
   299ec:	mov	r3, #44	; 0x2c
   299f0:	strb	r3, [r2]
   299f4:	mov	r2, r9
   299f8:	mov	r1, r8
   299fc:	mov	r0, r4
   29a00:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29a04:	ldrb	r3, [r4, #27]
   29a08:	cmp	r3, #0
   29a0c:	beq	29a3c <flatcc_json_printer_int16_enum_field@@Base+0xbc>
   29a10:	mov	r0, r5
   29a14:	ldr	r1, [r4, #20]
   29a18:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0xa3c>
   29a1c:	ldr	r3, [r4, #20]
   29a20:	add	r0, r3, r0
   29a24:	str	r0, [r4, #20]
   29a28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29a2c:	ldrb	r3, [r4, #29]
   29a30:	cmp	r3, #0
   29a34:	bne	299cc <flatcc_json_printer_int16_enum_field@@Base+0x4c>
   29a38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29a3c:	mov	r1, r5
   29a40:	mov	r0, r4
   29a44:	mov	r3, r7
   29a48:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29a4c:	bx	r3

00029a50 <flatcc_json_printer_int32_enum_field@@Base>:
   29a50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29a54:	mov	r6, r1
   29a58:	mov	r4, r0
   29a5c:	mov	r1, r2
   29a60:	mov	r0, r6
   29a64:	mov	r8, r3
   29a68:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   29a6c:	cmp	r0, #0
   29a70:	ldr	r9, [sp, #32]
   29a74:	ldr	r5, [sp, #36]	; 0x24
   29a78:	ldr	r7, [sp, #40]	; 0x28
   29a7c:	beq	29afc <flatcc_json_printer_int32_enum_field@@Base+0xac>
   29a80:	ldr	r2, [r0]
   29a84:	cmp	r2, r5
   29a88:	movne	r5, r2
   29a8c:	bne	29a9c <flatcc_json_printer_int32_enum_field@@Base+0x4c>
   29a90:	ldrb	r3, [r4, #28]
   29a94:	cmp	r3, #0
   29a98:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   29a9c:	ldr	r2, [r6, #16]
   29aa0:	add	r3, r2, #1
   29aa4:	cmp	r2, #0
   29aa8:	str	r3, [r6, #16]
   29aac:	beq	29ac4 <flatcc_json_printer_int32_enum_field@@Base+0x74>
   29ab0:	ldr	r2, [r4, #20]
   29ab4:	add	r3, r2, #1
   29ab8:	str	r3, [r4, #20]
   29abc:	mov	r3, #44	; 0x2c
   29ac0:	strb	r3, [r2]
   29ac4:	mov	r2, r9
   29ac8:	mov	r1, r8
   29acc:	mov	r0, r4
   29ad0:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29ad4:	ldrb	r3, [r4, #27]
   29ad8:	cmp	r3, #0
   29adc:	beq	29b0c <flatcc_json_printer_int32_enum_field@@Base+0xbc>
   29ae0:	mov	r0, r5
   29ae4:	ldr	r1, [r4, #20]
   29ae8:	bl	27290 <flatcc_json_parser_struct_as_root@@Base+0xa68>
   29aec:	ldr	r3, [r4, #20]
   29af0:	add	r0, r3, r0
   29af4:	str	r0, [r4, #20]
   29af8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29afc:	ldrb	r3, [r4, #29]
   29b00:	cmp	r3, #0
   29b04:	bne	29a9c <flatcc_json_printer_int32_enum_field@@Base+0x4c>
   29b08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29b0c:	mov	r1, r5
   29b10:	mov	r0, r4
   29b14:	mov	r3, r7
   29b18:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29b1c:	bx	r3

00029b20 <flatcc_json_printer_int64_enum_field@@Base>:
   29b20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29b24:	mov	r5, r1
   29b28:	mov	r4, r0
   29b2c:	mov	r1, r2
   29b30:	mov	r0, r5
   29b34:	mov	r9, r3
   29b38:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   29b3c:	cmp	r0, #0
   29b40:	ldr	sl, [sp, #32]
   29b44:	ldrd	r6, [sp, #40]	; 0x28
   29b48:	ldr	r8, [sp, #48]	; 0x30
   29b4c:	beq	29bd8 <flatcc_json_printer_int64_enum_field@@Base+0xb8>
   29b50:	ldrd	r2, [r0]
   29b54:	cmp	r3, r7
   29b58:	cmpeq	r2, r6
   29b5c:	movne	r6, r2
   29b60:	movne	r7, r3
   29b64:	bne	29b74 <flatcc_json_printer_int64_enum_field@@Base+0x54>
   29b68:	ldrb	r3, [r4, #28]
   29b6c:	cmp	r3, #0
   29b70:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   29b74:	ldr	r2, [r5, #16]
   29b78:	add	r3, r2, #1
   29b7c:	cmp	r2, #0
   29b80:	str	r3, [r5, #16]
   29b84:	beq	29b9c <flatcc_json_printer_int64_enum_field@@Base+0x7c>
   29b88:	ldr	r2, [r4, #20]
   29b8c:	add	r3, r2, #1
   29b90:	str	r3, [r4, #20]
   29b94:	mov	r3, #44	; 0x2c
   29b98:	strb	r3, [r2]
   29b9c:	mov	r2, sl
   29ba0:	mov	r1, r9
   29ba4:	mov	r0, r4
   29ba8:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29bac:	ldrb	r3, [r4, #27]
   29bb0:	cmp	r3, #0
   29bb4:	beq	29be8 <flatcc_json_printer_int64_enum_field@@Base+0xc8>
   29bb8:	mov	r0, r6
   29bbc:	mov	r1, r7
   29bc0:	ldr	r2, [r4, #20]
   29bc4:	bl	272b4 <flatcc_json_parser_struct_as_root@@Base+0xa8c>
   29bc8:	ldr	r3, [r4, #20]
   29bcc:	add	r0, r3, r0
   29bd0:	str	r0, [r4, #20]
   29bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29bd8:	ldrb	r3, [r4, #29]
   29bdc:	cmp	r3, #0
   29be0:	bne	29b74 <flatcc_json_printer_int64_enum_field@@Base+0x54>
   29be4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29be8:	mov	r2, r6
   29bec:	mov	r3, r7
   29bf0:	mov	r0, r4
   29bf4:	mov	r1, r8
   29bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29bfc:	bx	r1

00029c00 <flatcc_json_printer_bool_enum_field@@Base>:
   29c00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29c04:	mov	r6, r1
   29c08:	mov	r4, r0
   29c0c:	mov	r1, r2
   29c10:	mov	r0, r6
   29c14:	mov	r8, r3
   29c18:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   29c1c:	cmp	r0, #0
   29c20:	ldrb	r5, [sp, #36]	; 0x24
   29c24:	ldr	r9, [sp, #32]
   29c28:	ldr	r7, [sp, #40]	; 0x28
   29c2c:	beq	29cac <flatcc_json_printer_bool_enum_field@@Base+0xac>
   29c30:	ldrb	r2, [r0]
   29c34:	cmp	r2, r5
   29c38:	movne	r5, r2
   29c3c:	bne	29c4c <flatcc_json_printer_bool_enum_field@@Base+0x4c>
   29c40:	ldrb	r3, [r4, #28]
   29c44:	cmp	r3, #0
   29c48:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   29c4c:	ldr	r2, [r6, #16]
   29c50:	add	r3, r2, #1
   29c54:	cmp	r2, #0
   29c58:	str	r3, [r6, #16]
   29c5c:	beq	29c74 <flatcc_json_printer_bool_enum_field@@Base+0x74>
   29c60:	ldr	r2, [r4, #20]
   29c64:	add	r3, r2, #1
   29c68:	str	r3, [r4, #20]
   29c6c:	mov	r3, #44	; 0x2c
   29c70:	strb	r3, [r2]
   29c74:	mov	r2, r9
   29c78:	mov	r1, r8
   29c7c:	mov	r0, r4
   29c80:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29c84:	ldrb	r3, [r4, #27]
   29c88:	cmp	r3, #0
   29c8c:	beq	29cbc <flatcc_json_printer_bool_enum_field@@Base+0xbc>
   29c90:	mov	r0, r5
   29c94:	ldr	r1, [r4, #20]
   29c98:	bl	27d30 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   29c9c:	ldr	r3, [r4, #20]
   29ca0:	add	r0, r3, r0
   29ca4:	str	r0, [r4, #20]
   29ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29cac:	ldrb	r3, [r4, #29]
   29cb0:	cmp	r3, #0
   29cb4:	bne	29c4c <flatcc_json_printer_bool_enum_field@@Base+0x4c>
   29cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29cbc:	mov	r1, r5
   29cc0:	mov	r0, r4
   29cc4:	mov	r3, r7
   29cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29ccc:	bx	r3

00029cd0 <flatcc_json_printer_uint8_struct_field@@Base>:
   29cd0:	cmp	r1, #0
   29cd4:	push	{r4, r5, r6, lr}
   29cd8:	mov	r4, r0
   29cdc:	ldrb	r5, [r2, r3]
   29ce0:	beq	29cf8 <flatcc_json_printer_uint8_struct_field@@Base+0x28>
   29ce4:	ldr	r3, [r0, #20]
   29ce8:	add	r2, r3, #1
   29cec:	str	r2, [r0, #20]
   29cf0:	mov	r2, #44	; 0x2c
   29cf4:	strb	r2, [r3]
   29cf8:	mov	r0, r4
   29cfc:	ldr	r1, [sp, #16]
   29d00:	ldr	r2, [sp, #20]
   29d04:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29d08:	mov	r0, r5
   29d0c:	ldr	r1, [r4, #20]
   29d10:	bl	27b98 <flatcc_json_parser_struct_as_root@@Base+0x1370>
   29d14:	ldr	r3, [r4, #20]
   29d18:	add	r0, r3, r0
   29d1c:	str	r0, [r4, #20]
   29d20:	pop	{r4, r5, r6, pc}

00029d24 <flatcc_json_printer_uint16_struct_field@@Base>:
   29d24:	cmp	r1, #0
   29d28:	push	{r4, r5, r6, lr}
   29d2c:	mov	r4, r0
   29d30:	ldrh	r5, [r2, r3]
   29d34:	beq	29d4c <flatcc_json_printer_uint16_struct_field@@Base+0x28>
   29d38:	ldr	r3, [r0, #20]
   29d3c:	add	r2, r3, #1
   29d40:	str	r2, [r0, #20]
   29d44:	mov	r2, #44	; 0x2c
   29d48:	strb	r2, [r3]
   29d4c:	mov	r0, r4
   29d50:	ldr	r1, [sp, #16]
   29d54:	ldr	r2, [sp, #20]
   29d58:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29d5c:	mov	r0, r5
   29d60:	ldr	r1, [r4, #20]
   29d64:	bl	26830 <flatcc_json_parser_struct_as_root@@Base+0x8>
   29d68:	ldr	r3, [r4, #20]
   29d6c:	add	r0, r3, r0
   29d70:	str	r0, [r4, #20]
   29d74:	pop	{r4, r5, r6, pc}

00029d78 <flatcc_json_printer_uint32_struct_field@@Base>:
   29d78:	cmp	r1, #0
   29d7c:	push	{r4, r5, r6, lr}
   29d80:	mov	r4, r0
   29d84:	ldr	r5, [r2, r3]
   29d88:	beq	29da0 <flatcc_json_printer_uint32_struct_field@@Base+0x28>
   29d8c:	ldr	r3, [r0, #20]
   29d90:	add	r2, r3, #1
   29d94:	str	r2, [r0, #20]
   29d98:	mov	r2, #44	; 0x2c
   29d9c:	strb	r2, [r3]
   29da0:	mov	r0, r4
   29da4:	ldr	r1, [sp, #16]
   29da8:	ldr	r2, [sp, #20]
   29dac:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29db0:	mov	r0, r5
   29db4:	ldr	r1, [r4, #20]
   29db8:	bl	26974 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   29dbc:	ldr	r3, [r4, #20]
   29dc0:	add	r0, r3, r0
   29dc4:	str	r0, [r4, #20]
   29dc8:	pop	{r4, r5, r6, pc}

00029dcc <flatcc_json_printer_uint64_struct_field@@Base>:
   29dcc:	cmp	r1, #0
   29dd0:	push	{r4, r6, r7, lr}
   29dd4:	mov	r4, r0
   29dd8:	ldrd	r6, [r2, r3]
   29ddc:	beq	29df4 <flatcc_json_printer_uint64_struct_field@@Base+0x28>
   29de0:	ldr	r3, [r0, #20]
   29de4:	add	r2, r3, #1
   29de8:	str	r2, [r0, #20]
   29dec:	mov	r2, #44	; 0x2c
   29df0:	strb	r2, [r3]
   29df4:	mov	r0, r4
   29df8:	ldr	r1, [sp, #16]
   29dfc:	ldr	r2, [sp, #20]
   29e00:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29e04:	mov	r0, r6
   29e08:	mov	r1, r7
   29e0c:	ldr	r2, [r4, #20]
   29e10:	bl	26c24 <flatcc_json_parser_struct_as_root@@Base+0x3fc>
   29e14:	ldr	r3, [r4, #20]
   29e18:	add	r0, r3, r0
   29e1c:	str	r0, [r4, #20]
   29e20:	pop	{r4, r6, r7, pc}

00029e24 <flatcc_json_printer_int8_struct_field@@Base>:
   29e24:	cmp	r1, #0
   29e28:	push	{r4, r5, r6, lr}
   29e2c:	mov	r4, r0
   29e30:	ldrsb	r5, [r2, r3]
   29e34:	beq	29e4c <flatcc_json_printer_int8_struct_field@@Base+0x28>
   29e38:	ldr	r3, [r0, #20]
   29e3c:	add	r2, r3, #1
   29e40:	str	r2, [r0, #20]
   29e44:	mov	r2, #44	; 0x2c
   29e48:	strb	r2, [r3]
   29e4c:	mov	r0, r4
   29e50:	ldr	r1, [sp, #16]
   29e54:	ldr	r2, [sp, #20]
   29e58:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29e5c:	mov	r0, r5
   29e60:	ldr	r1, [r4, #20]
   29e64:	bl	27c28 <flatcc_json_parser_struct_as_root@@Base+0x1400>
   29e68:	ldr	r3, [r4, #20]
   29e6c:	add	r0, r3, r0
   29e70:	str	r0, [r4, #20]
   29e74:	pop	{r4, r5, r6, pc}

00029e78 <flatcc_json_printer_int16_struct_field@@Base>:
   29e78:	cmp	r1, #0
   29e7c:	push	{r4, r5, r6, lr}
   29e80:	mov	r4, r0
   29e84:	ldrsh	r5, [r2, r3]
   29e88:	beq	29ea0 <flatcc_json_printer_int16_struct_field@@Base+0x28>
   29e8c:	ldr	r3, [r0, #20]
   29e90:	add	r2, r3, #1
   29e94:	str	r2, [r0, #20]
   29e98:	mov	r2, #44	; 0x2c
   29e9c:	strb	r2, [r3]
   29ea0:	mov	r0, r4
   29ea4:	ldr	r1, [sp, #16]
   29ea8:	ldr	r2, [sp, #20]
   29eac:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29eb0:	mov	r0, r5
   29eb4:	ldr	r1, [r4, #20]
   29eb8:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0xa3c>
   29ebc:	ldr	r3, [r4, #20]
   29ec0:	add	r0, r3, r0
   29ec4:	str	r0, [r4, #20]
   29ec8:	pop	{r4, r5, r6, pc}

00029ecc <flatcc_json_printer_int32_struct_field@@Base>:
   29ecc:	cmp	r1, #0
   29ed0:	push	{r4, r5, r6, lr}
   29ed4:	mov	r4, r0
   29ed8:	ldr	r5, [r2, r3]
   29edc:	beq	29ef4 <flatcc_json_printer_int32_struct_field@@Base+0x28>
   29ee0:	ldr	r3, [r0, #20]
   29ee4:	add	r2, r3, #1
   29ee8:	str	r2, [r0, #20]
   29eec:	mov	r2, #44	; 0x2c
   29ef0:	strb	r2, [r3]
   29ef4:	mov	r0, r4
   29ef8:	ldr	r1, [sp, #16]
   29efc:	ldr	r2, [sp, #20]
   29f00:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29f04:	mov	r0, r5
   29f08:	ldr	r1, [r4, #20]
   29f0c:	bl	27290 <flatcc_json_parser_struct_as_root@@Base+0xa68>
   29f10:	ldr	r3, [r4, #20]
   29f14:	add	r0, r3, r0
   29f18:	str	r0, [r4, #20]
   29f1c:	pop	{r4, r5, r6, pc}

00029f20 <flatcc_json_printer_int64_struct_field@@Base>:
   29f20:	cmp	r1, #0
   29f24:	push	{r4, r6, r7, lr}
   29f28:	mov	r4, r0
   29f2c:	ldrd	r6, [r2, r3]
   29f30:	beq	29f48 <flatcc_json_printer_int64_struct_field@@Base+0x28>
   29f34:	ldr	r3, [r0, #20]
   29f38:	add	r2, r3, #1
   29f3c:	str	r2, [r0, #20]
   29f40:	mov	r2, #44	; 0x2c
   29f44:	strb	r2, [r3]
   29f48:	mov	r0, r4
   29f4c:	ldr	r1, [sp, #16]
   29f50:	ldr	r2, [sp, #20]
   29f54:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29f58:	mov	r0, r6
   29f5c:	mov	r1, r7
   29f60:	ldr	r2, [r4, #20]
   29f64:	bl	272b4 <flatcc_json_parser_struct_as_root@@Base+0xa8c>
   29f68:	ldr	r3, [r4, #20]
   29f6c:	add	r0, r3, r0
   29f70:	str	r0, [r4, #20]
   29f74:	pop	{r4, r6, r7, pc}

00029f78 <flatcc_json_printer_bool_struct_field@@Base>:
   29f78:	cmp	r1, #0
   29f7c:	push	{r4, r5, r6, lr}
   29f80:	mov	r4, r0
   29f84:	ldrb	r5, [r2, r3]
   29f88:	beq	29fa0 <flatcc_json_printer_bool_struct_field@@Base+0x28>
   29f8c:	ldr	r3, [r0, #20]
   29f90:	add	r2, r3, #1
   29f94:	str	r2, [r0, #20]
   29f98:	mov	r2, #44	; 0x2c
   29f9c:	strb	r2, [r3]
   29fa0:	mov	r0, r4
   29fa4:	ldr	r1, [sp, #16]
   29fa8:	ldr	r2, [sp, #20]
   29fac:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   29fb0:	mov	r0, r5
   29fb4:	ldr	r1, [r4, #20]
   29fb8:	bl	27d30 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   29fbc:	ldr	r3, [r4, #20]
   29fc0:	add	r0, r3, r0
   29fc4:	str	r0, [r4, #20]
   29fc8:	pop	{r4, r5, r6, pc}

00029fcc <flatcc_json_printer_float_struct_field@@Base>:
   29fcc:	add	r3, r2, r3
   29fd0:	cmp	r1, #0
   29fd4:	push	{r4, lr}
   29fd8:	mov	r4, r0
   29fdc:	vpush	{d8}
   29fe0:	vldr	s16, [r3]
   29fe4:	beq	29ffc <flatcc_json_printer_float_struct_field@@Base+0x30>
   29fe8:	ldr	r3, [r0, #20]
   29fec:	add	r2, r3, #1
   29ff0:	str	r2, [r0, #20]
   29ff4:	mov	r2, #44	; 0x2c
   29ff8:	strb	r2, [r3]
   29ffc:	mov	r0, r4
   2a000:	ldr	r1, [sp, #16]
   2a004:	ldr	r2, [sp, #20]
   2a008:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a00c:	vcvt.f64.f32	d0, s16
   2a010:	ldr	r0, [r4, #20]
   2a014:	bl	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>
   2a018:	ldr	r3, [r4, #20]
   2a01c:	vpop	{d8}
   2a020:	add	r0, r3, r0
   2a024:	str	r0, [r4, #20]
   2a028:	pop	{r4, pc}

0002a02c <flatcc_json_printer_double_struct_field@@Base>:
   2a02c:	add	r3, r2, r3
   2a030:	cmp	r1, #0
   2a034:	push	{r4, lr}
   2a038:	mov	r4, r0
   2a03c:	vpush	{d8}
   2a040:	vldr	d8, [r3]
   2a044:	beq	2a05c <flatcc_json_printer_double_struct_field@@Base+0x30>
   2a048:	ldr	r3, [r0, #20]
   2a04c:	add	r2, r3, #1
   2a050:	str	r2, [r0, #20]
   2a054:	mov	r2, #44	; 0x2c
   2a058:	strb	r2, [r3]
   2a05c:	mov	r0, r4
   2a060:	ldr	r1, [sp, #16]
   2a064:	ldr	r2, [sp, #20]
   2a068:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a06c:	vmov.f64	d0, d8
   2a070:	ldr	r0, [r4, #20]
   2a074:	bl	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>
   2a078:	ldr	r3, [r4, #20]
   2a07c:	vpop	{d8}
   2a080:	add	r0, r3, r0
   2a084:	str	r0, [r4, #20]
   2a088:	pop	{r4, pc}

0002a08c <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   2a08c:	push	{r4, r5, r6, lr}
   2a090:	cmp	r1, #0
   2a094:	mov	r4, r0
   2a098:	ldrb	r5, [r2, r3]
   2a09c:	ldr	r0, [sp, #16]
   2a0a0:	ldr	ip, [sp, #20]
   2a0a4:	ldr	r6, [sp, #24]
   2a0a8:	beq	2a0c0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x34>
   2a0ac:	ldr	r3, [r4, #20]
   2a0b0:	add	r2, r3, #1
   2a0b4:	str	r2, [r4, #20]
   2a0b8:	mov	r2, #44	; 0x2c
   2a0bc:	strb	r2, [r3]
   2a0c0:	mov	r1, r0
   2a0c4:	mov	r2, ip
   2a0c8:	mov	r0, r4
   2a0cc:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a0d0:	ldrb	r3, [r4, #27]
   2a0d4:	cmp	r3, #0
   2a0d8:	beq	2a0f8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x6c>
   2a0dc:	mov	r0, r5
   2a0e0:	ldr	r1, [r4, #20]
   2a0e4:	bl	27b98 <flatcc_json_parser_struct_as_root@@Base+0x1370>
   2a0e8:	ldr	r3, [r4, #20]
   2a0ec:	add	r0, r3, r0
   2a0f0:	str	r0, [r4, #20]
   2a0f4:	pop	{r4, r5, r6, pc}
   2a0f8:	mov	r1, r5
   2a0fc:	mov	r0, r4
   2a100:	mov	r3, r6
   2a104:	pop	{r4, r5, r6, lr}
   2a108:	bx	r3

0002a10c <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   2a10c:	push	{r4, r5, r6, lr}
   2a110:	cmp	r1, #0
   2a114:	mov	r4, r0
   2a118:	ldrh	r5, [r2, r3]
   2a11c:	ldr	r0, [sp, #16]
   2a120:	ldr	ip, [sp, #20]
   2a124:	ldr	r6, [sp, #24]
   2a128:	beq	2a140 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x34>
   2a12c:	ldr	r3, [r4, #20]
   2a130:	add	r2, r3, #1
   2a134:	str	r2, [r4, #20]
   2a138:	mov	r2, #44	; 0x2c
   2a13c:	strb	r2, [r3]
   2a140:	mov	r1, r0
   2a144:	mov	r2, ip
   2a148:	mov	r0, r4
   2a14c:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a150:	ldrb	r3, [r4, #27]
   2a154:	cmp	r3, #0
   2a158:	beq	2a178 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x6c>
   2a15c:	mov	r0, r5
   2a160:	ldr	r1, [r4, #20]
   2a164:	bl	26830 <flatcc_json_parser_struct_as_root@@Base+0x8>
   2a168:	ldr	r3, [r4, #20]
   2a16c:	add	r0, r3, r0
   2a170:	str	r0, [r4, #20]
   2a174:	pop	{r4, r5, r6, pc}
   2a178:	mov	r1, r5
   2a17c:	mov	r0, r4
   2a180:	mov	r3, r6
   2a184:	pop	{r4, r5, r6, lr}
   2a188:	bx	r3

0002a18c <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   2a18c:	push	{r4, r5, r6, lr}
   2a190:	cmp	r1, #0
   2a194:	mov	r4, r0
   2a198:	ldr	r5, [r2, r3]
   2a19c:	ldr	r0, [sp, #16]
   2a1a0:	ldr	ip, [sp, #20]
   2a1a4:	ldr	r6, [sp, #24]
   2a1a8:	beq	2a1c0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x34>
   2a1ac:	ldr	r3, [r4, #20]
   2a1b0:	add	r2, r3, #1
   2a1b4:	str	r2, [r4, #20]
   2a1b8:	mov	r2, #44	; 0x2c
   2a1bc:	strb	r2, [r3]
   2a1c0:	mov	r1, r0
   2a1c4:	mov	r2, ip
   2a1c8:	mov	r0, r4
   2a1cc:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a1d0:	ldrb	r3, [r4, #27]
   2a1d4:	cmp	r3, #0
   2a1d8:	beq	2a1f8 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x6c>
   2a1dc:	mov	r0, r5
   2a1e0:	ldr	r1, [r4, #20]
   2a1e4:	bl	26974 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   2a1e8:	ldr	r3, [r4, #20]
   2a1ec:	add	r0, r3, r0
   2a1f0:	str	r0, [r4, #20]
   2a1f4:	pop	{r4, r5, r6, pc}
   2a1f8:	mov	r1, r5
   2a1fc:	mov	r0, r4
   2a200:	mov	r3, r6
   2a204:	pop	{r4, r5, r6, lr}
   2a208:	bx	r3

0002a20c <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   2a20c:	push	{r4, r5, r6, r7, r8, lr}
   2a210:	cmp	r1, #0
   2a214:	mov	r4, r0
   2a218:	ldrd	r6, [r2, r3]
   2a21c:	ldr	r0, [sp, #24]
   2a220:	ldr	ip, [sp, #28]
   2a224:	ldr	r5, [sp, #32]
   2a228:	beq	2a240 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x34>
   2a22c:	ldr	r3, [r4, #20]
   2a230:	add	r2, r3, #1
   2a234:	str	r2, [r4, #20]
   2a238:	mov	r2, #44	; 0x2c
   2a23c:	strb	r2, [r3]
   2a240:	mov	r1, r0
   2a244:	mov	r2, ip
   2a248:	mov	r0, r4
   2a24c:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a250:	ldrb	r3, [r4, #27]
   2a254:	cmp	r3, #0
   2a258:	beq	2a27c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>
   2a25c:	mov	r0, r6
   2a260:	mov	r1, r7
   2a264:	ldr	r2, [r4, #20]
   2a268:	bl	26c24 <flatcc_json_parser_struct_as_root@@Base+0x3fc>
   2a26c:	ldr	r3, [r4, #20]
   2a270:	add	r0, r3, r0
   2a274:	str	r0, [r4, #20]
   2a278:	pop	{r4, r5, r6, r7, r8, pc}
   2a27c:	mov	r2, r6
   2a280:	mov	r3, r7
   2a284:	mov	r0, r4
   2a288:	mov	r1, r5
   2a28c:	pop	{r4, r5, r6, r7, r8, lr}
   2a290:	bx	r1

0002a294 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   2a294:	push	{r4, r5, r6, lr}
   2a298:	cmp	r1, #0
   2a29c:	mov	r4, r0
   2a2a0:	ldrsb	r5, [r2, r3]
   2a2a4:	ldr	r0, [sp, #16]
   2a2a8:	ldr	ip, [sp, #20]
   2a2ac:	ldr	r6, [sp, #24]
   2a2b0:	beq	2a2c8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x34>
   2a2b4:	ldr	r3, [r4, #20]
   2a2b8:	add	r2, r3, #1
   2a2bc:	str	r2, [r4, #20]
   2a2c0:	mov	r2, #44	; 0x2c
   2a2c4:	strb	r2, [r3]
   2a2c8:	mov	r1, r0
   2a2cc:	mov	r2, ip
   2a2d0:	mov	r0, r4
   2a2d4:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a2d8:	ldrb	r3, [r4, #27]
   2a2dc:	cmp	r3, #0
   2a2e0:	beq	2a300 <flatcc_json_printer_int8_enum_struct_field@@Base+0x6c>
   2a2e4:	mov	r0, r5
   2a2e8:	ldr	r1, [r4, #20]
   2a2ec:	bl	27c28 <flatcc_json_parser_struct_as_root@@Base+0x1400>
   2a2f0:	ldr	r3, [r4, #20]
   2a2f4:	add	r0, r3, r0
   2a2f8:	str	r0, [r4, #20]
   2a2fc:	pop	{r4, r5, r6, pc}
   2a300:	mov	r1, r5
   2a304:	mov	r0, r4
   2a308:	mov	r3, r6
   2a30c:	pop	{r4, r5, r6, lr}
   2a310:	bx	r3

0002a314 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   2a314:	push	{r4, r5, r6, lr}
   2a318:	cmp	r1, #0
   2a31c:	mov	r4, r0
   2a320:	ldrsh	r5, [r2, r3]
   2a324:	ldr	r0, [sp, #16]
   2a328:	ldr	ip, [sp, #20]
   2a32c:	ldr	r6, [sp, #24]
   2a330:	beq	2a348 <flatcc_json_printer_int16_enum_struct_field@@Base+0x34>
   2a334:	ldr	r3, [r4, #20]
   2a338:	add	r2, r3, #1
   2a33c:	str	r2, [r4, #20]
   2a340:	mov	r2, #44	; 0x2c
   2a344:	strb	r2, [r3]
   2a348:	mov	r1, r0
   2a34c:	mov	r2, ip
   2a350:	mov	r0, r4
   2a354:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a358:	ldrb	r3, [r4, #27]
   2a35c:	cmp	r3, #0
   2a360:	beq	2a380 <flatcc_json_printer_int16_enum_struct_field@@Base+0x6c>
   2a364:	mov	r0, r5
   2a368:	ldr	r1, [r4, #20]
   2a36c:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0xa3c>
   2a370:	ldr	r3, [r4, #20]
   2a374:	add	r0, r3, r0
   2a378:	str	r0, [r4, #20]
   2a37c:	pop	{r4, r5, r6, pc}
   2a380:	mov	r1, r5
   2a384:	mov	r0, r4
   2a388:	mov	r3, r6
   2a38c:	pop	{r4, r5, r6, lr}
   2a390:	bx	r3

0002a394 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   2a394:	push	{r4, r5, r6, lr}
   2a398:	cmp	r1, #0
   2a39c:	mov	r4, r0
   2a3a0:	ldr	r5, [r2, r3]
   2a3a4:	ldr	r0, [sp, #16]
   2a3a8:	ldr	ip, [sp, #20]
   2a3ac:	ldr	r6, [sp, #24]
   2a3b0:	beq	2a3c8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x34>
   2a3b4:	ldr	r3, [r4, #20]
   2a3b8:	add	r2, r3, #1
   2a3bc:	str	r2, [r4, #20]
   2a3c0:	mov	r2, #44	; 0x2c
   2a3c4:	strb	r2, [r3]
   2a3c8:	mov	r1, r0
   2a3cc:	mov	r2, ip
   2a3d0:	mov	r0, r4
   2a3d4:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a3d8:	ldrb	r3, [r4, #27]
   2a3dc:	cmp	r3, #0
   2a3e0:	beq	2a400 <flatcc_json_printer_int32_enum_struct_field@@Base+0x6c>
   2a3e4:	mov	r0, r5
   2a3e8:	ldr	r1, [r4, #20]
   2a3ec:	bl	27290 <flatcc_json_parser_struct_as_root@@Base+0xa68>
   2a3f0:	ldr	r3, [r4, #20]
   2a3f4:	add	r0, r3, r0
   2a3f8:	str	r0, [r4, #20]
   2a3fc:	pop	{r4, r5, r6, pc}
   2a400:	mov	r1, r5
   2a404:	mov	r0, r4
   2a408:	mov	r3, r6
   2a40c:	pop	{r4, r5, r6, lr}
   2a410:	bx	r3

0002a414 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   2a414:	push	{r4, r5, r6, r7, r8, lr}
   2a418:	cmp	r1, #0
   2a41c:	mov	r4, r0
   2a420:	ldrd	r6, [r2, r3]
   2a424:	ldr	r0, [sp, #24]
   2a428:	ldr	ip, [sp, #28]
   2a42c:	ldr	r5, [sp, #32]
   2a430:	beq	2a448 <flatcc_json_printer_int64_enum_struct_field@@Base+0x34>
   2a434:	ldr	r3, [r4, #20]
   2a438:	add	r2, r3, #1
   2a43c:	str	r2, [r4, #20]
   2a440:	mov	r2, #44	; 0x2c
   2a444:	strb	r2, [r3]
   2a448:	mov	r1, r0
   2a44c:	mov	r2, ip
   2a450:	mov	r0, r4
   2a454:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a458:	ldrb	r3, [r4, #27]
   2a45c:	cmp	r3, #0
   2a460:	beq	2a484 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>
   2a464:	mov	r0, r6
   2a468:	mov	r1, r7
   2a46c:	ldr	r2, [r4, #20]
   2a470:	bl	272b4 <flatcc_json_parser_struct_as_root@@Base+0xa8c>
   2a474:	ldr	r3, [r4, #20]
   2a478:	add	r0, r3, r0
   2a47c:	str	r0, [r4, #20]
   2a480:	pop	{r4, r5, r6, r7, r8, pc}
   2a484:	mov	r2, r6
   2a488:	mov	r3, r7
   2a48c:	mov	r0, r4
   2a490:	mov	r1, r5
   2a494:	pop	{r4, r5, r6, r7, r8, lr}
   2a498:	bx	r1

0002a49c <flatcc_json_printer_bool_enum_struct_field@@Base>:
   2a49c:	push	{r4, r5, r6, lr}
   2a4a0:	cmp	r1, #0
   2a4a4:	mov	r4, r0
   2a4a8:	ldrb	r5, [r2, r3]
   2a4ac:	ldr	r0, [sp, #16]
   2a4b0:	ldr	ip, [sp, #20]
   2a4b4:	ldr	r6, [sp, #24]
   2a4b8:	beq	2a4d0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x34>
   2a4bc:	ldr	r3, [r4, #20]
   2a4c0:	add	r2, r3, #1
   2a4c4:	str	r2, [r4, #20]
   2a4c8:	mov	r2, #44	; 0x2c
   2a4cc:	strb	r2, [r3]
   2a4d0:	mov	r1, r0
   2a4d4:	mov	r2, ip
   2a4d8:	mov	r0, r4
   2a4dc:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a4e0:	ldrb	r3, [r4, #27]
   2a4e4:	cmp	r3, #0
   2a4e8:	beq	2a508 <flatcc_json_printer_bool_enum_struct_field@@Base+0x6c>
   2a4ec:	mov	r0, r5
   2a4f0:	ldr	r1, [r4, #20]
   2a4f4:	bl	27d30 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   2a4f8:	ldr	r3, [r4, #20]
   2a4fc:	add	r0, r3, r0
   2a500:	str	r0, [r4, #20]
   2a504:	pop	{r4, r5, r6, pc}
   2a508:	mov	r1, r5
   2a50c:	mov	r0, r4
   2a510:	mov	r3, r6
   2a514:	pop	{r4, r5, r6, lr}
   2a518:	bx	r3

0002a51c <flatcc_json_printer_uint8_vector_field@@Base>:
   2a51c:	push	{r4, r5, r6, r7, r8, lr}
   2a520:	mov	r5, r1
   2a524:	mov	r4, r0
   2a528:	mov	r1, r2
   2a52c:	mov	r0, r5
   2a530:	mov	r8, r3
   2a534:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2a538:	cmp	r0, #0
   2a53c:	popeq	{r4, r5, r6, r7, r8, pc}
   2a540:	ldr	r3, [r5, #16]
   2a544:	add	r2, r3, #1
   2a548:	cmp	r3, #0
   2a54c:	str	r2, [r5, #16]
   2a550:	beq	2a568 <flatcc_json_printer_uint8_vector_field@@Base+0x4c>
   2a554:	ldr	r2, [r4, #20]
   2a558:	add	r3, r2, #1
   2a55c:	str	r3, [r4, #20]
   2a560:	mov	r3, #44	; 0x2c
   2a564:	strb	r3, [r2]
   2a568:	ldr	r2, [r0]
   2a56c:	mov	r1, r8
   2a570:	add	r7, r0, r2
   2a574:	ldr	r5, [r0, r2]
   2a578:	mov	r0, r4
   2a57c:	add	r6, r7, #4
   2a580:	ldr	r2, [sp, #24]
   2a584:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a588:	ldr	r3, [r4, #32]
   2a58c:	cmp	r5, #0
   2a590:	add	r3, r3, #1
   2a594:	str	r3, [r4, #32]
   2a598:	ldr	r3, [r4, #20]
   2a59c:	add	r2, r3, #1
   2a5a0:	str	r2, [r4, #20]
   2a5a4:	mov	r2, #91	; 0x5b
   2a5a8:	strb	r2, [r3]
   2a5ac:	beq	2a5f8 <flatcc_json_printer_uint8_vector_field@@Base+0xdc>
   2a5b0:	ldrb	r3, [r4, #25]
   2a5b4:	cmp	r3, #0
   2a5b8:	beq	2a658 <flatcc_json_printer_uint8_vector_field@@Base+0x13c>
   2a5bc:	ldr	r3, [r4, #20]
   2a5c0:	mov	r0, r4
   2a5c4:	add	r2, r3, #1
   2a5c8:	str	r2, [r4, #20]
   2a5cc:	mov	r2, #10
   2a5d0:	strb	r2, [r3]
   2a5d4:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2a5d8:	ldrb	r0, [r7, #4]
   2a5dc:	add	r6, r7, #5
   2a5e0:	sub	r5, r5, #1
   2a5e4:	ldr	r1, [r4, #20]
   2a5e8:	bl	27b98 <flatcc_json_parser_struct_as_root@@Base+0x1370>
   2a5ec:	ldr	r3, [r4, #20]
   2a5f0:	add	r0, r3, r0
   2a5f4:	str	r0, [r4, #20]
   2a5f8:	add	r5, r6, r5
   2a5fc:	mov	r7, #44	; 0x2c
   2a600:	mov	r8, #10
   2a604:	ldr	r3, [r4, #20]
   2a608:	cmp	r6, r5
   2a60c:	add	r2, r3, #1
   2a610:	bne	2a664 <flatcc_json_printer_uint8_vector_field@@Base+0x148>
   2a614:	ldrb	r1, [r4, #25]
   2a618:	cmp	r1, #0
   2a61c:	beq	2a640 <flatcc_json_printer_uint8_vector_field@@Base+0x124>
   2a620:	str	r2, [r4, #20]
   2a624:	mov	r2, #10
   2a628:	mov	r0, r4
   2a62c:	strb	r2, [r3]
   2a630:	ldr	r3, [r4, #32]
   2a634:	sub	r3, r3, #1
   2a638:	str	r3, [r4, #32]
   2a63c:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2a640:	ldr	r3, [r4, #20]
   2a644:	add	r2, r3, #1
   2a648:	str	r2, [r4, #20]
   2a64c:	mov	r2, #93	; 0x5d
   2a650:	strb	r2, [r3]
   2a654:	pop	{r4, r5, r6, r7, r8, pc}
   2a658:	mov	r0, r4
   2a65c:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2a660:	b	2a5d8 <flatcc_json_printer_uint8_vector_field@@Base+0xbc>
   2a664:	str	r2, [r4, #20]
   2a668:	strb	r7, [r3]
   2a66c:	ldrb	r3, [r4, #25]
   2a670:	cmp	r3, #0
   2a674:	beq	2a6ac <flatcc_json_printer_uint8_vector_field@@Base+0x190>
   2a678:	ldr	r3, [r4, #20]
   2a67c:	mov	r0, r4
   2a680:	add	r2, r3, #1
   2a684:	str	r2, [r4, #20]
   2a688:	strb	r8, [r3]
   2a68c:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2a690:	ldrb	r0, [r6], #1
   2a694:	ldr	r1, [r4, #20]
   2a698:	bl	27b98 <flatcc_json_parser_struct_as_root@@Base+0x1370>
   2a69c:	ldr	r3, [r4, #20]
   2a6a0:	add	r0, r3, r0
   2a6a4:	str	r0, [r4, #20]
   2a6a8:	b	2a604 <flatcc_json_printer_uint8_vector_field@@Base+0xe8>
   2a6ac:	mov	r0, r4
   2a6b0:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2a6b4:	b	2a690 <flatcc_json_printer_uint8_vector_field@@Base+0x174>

0002a6b8 <flatcc_json_printer_utype_vector_field@@Base>:
   2a6b8:	b	2a51c <flatcc_json_printer_uint8_vector_field@@Base>

0002a6bc <flatcc_json_printer_uint16_vector_field@@Base>:
   2a6bc:	push	{r4, r5, r6, r7, r8, lr}
   2a6c0:	mov	r5, r1
   2a6c4:	mov	r4, r0
   2a6c8:	mov	r1, r2
   2a6cc:	mov	r0, r5
   2a6d0:	mov	r8, r3
   2a6d4:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2a6d8:	cmp	r0, #0
   2a6dc:	popeq	{r4, r5, r6, r7, r8, pc}
   2a6e0:	ldr	r3, [r5, #16]
   2a6e4:	add	r2, r3, #1
   2a6e8:	cmp	r3, #0
   2a6ec:	str	r2, [r5, #16]
   2a6f0:	beq	2a708 <flatcc_json_printer_uint16_vector_field@@Base+0x4c>
   2a6f4:	ldr	r2, [r4, #20]
   2a6f8:	add	r3, r2, #1
   2a6fc:	str	r3, [r4, #20]
   2a700:	mov	r3, #44	; 0x2c
   2a704:	strb	r3, [r2]
   2a708:	ldr	r2, [r0]
   2a70c:	mov	r1, r8
   2a710:	add	r7, r0, r2
   2a714:	ldr	r5, [r0, r2]
   2a718:	mov	r0, r4
   2a71c:	add	r6, r7, #4
   2a720:	ldr	r2, [sp, #24]
   2a724:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a728:	ldr	r3, [r4, #32]
   2a72c:	cmp	r5, #0
   2a730:	add	r3, r3, #1
   2a734:	str	r3, [r4, #32]
   2a738:	ldr	r3, [r4, #20]
   2a73c:	add	r2, r3, #1
   2a740:	str	r2, [r4, #20]
   2a744:	mov	r2, #91	; 0x5b
   2a748:	strb	r2, [r3]
   2a74c:	beq	2a798 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   2a750:	ldrb	r3, [r4, #25]
   2a754:	cmp	r3, #0
   2a758:	beq	2a7f8 <flatcc_json_printer_uint16_vector_field@@Base+0x13c>
   2a75c:	ldr	r3, [r4, #20]
   2a760:	mov	r0, r4
   2a764:	add	r2, r3, #1
   2a768:	str	r2, [r4, #20]
   2a76c:	mov	r2, #10
   2a770:	strb	r2, [r3]
   2a774:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2a778:	ldrh	r0, [r7, #4]
   2a77c:	add	r6, r7, #6
   2a780:	sub	r5, r5, #1
   2a784:	ldr	r1, [r4, #20]
   2a788:	bl	26830 <flatcc_json_parser_struct_as_root@@Base+0x8>
   2a78c:	ldr	r3, [r4, #20]
   2a790:	add	r0, r3, r0
   2a794:	str	r0, [r4, #20]
   2a798:	mov	r7, #44	; 0x2c
   2a79c:	mov	r8, #10
   2a7a0:	ldr	r3, [r4, #20]
   2a7a4:	sub	r5, r5, #1
   2a7a8:	cmn	r5, #1
   2a7ac:	add	r2, r3, #1
   2a7b0:	bne	2a804 <flatcc_json_printer_uint16_vector_field@@Base+0x148>
   2a7b4:	ldrb	r1, [r4, #25]
   2a7b8:	cmp	r1, #0
   2a7bc:	beq	2a7e0 <flatcc_json_printer_uint16_vector_field@@Base+0x124>
   2a7c0:	str	r2, [r4, #20]
   2a7c4:	mov	r2, #10
   2a7c8:	mov	r0, r4
   2a7cc:	strb	r2, [r3]
   2a7d0:	ldr	r3, [r4, #32]
   2a7d4:	sub	r3, r3, #1
   2a7d8:	str	r3, [r4, #32]
   2a7dc:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2a7e0:	ldr	r3, [r4, #20]
   2a7e4:	add	r2, r3, #1
   2a7e8:	str	r2, [r4, #20]
   2a7ec:	mov	r2, #93	; 0x5d
   2a7f0:	strb	r2, [r3]
   2a7f4:	pop	{r4, r5, r6, r7, r8, pc}
   2a7f8:	mov	r0, r4
   2a7fc:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2a800:	b	2a778 <flatcc_json_printer_uint16_vector_field@@Base+0xbc>
   2a804:	str	r2, [r4, #20]
   2a808:	strb	r7, [r3]
   2a80c:	ldrb	r3, [r4, #25]
   2a810:	cmp	r3, #0
   2a814:	beq	2a84c <flatcc_json_printer_uint16_vector_field@@Base+0x190>
   2a818:	ldr	r3, [r4, #20]
   2a81c:	mov	r0, r4
   2a820:	add	r2, r3, #1
   2a824:	str	r2, [r4, #20]
   2a828:	strb	r8, [r3]
   2a82c:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2a830:	ldrh	r0, [r6], #2
   2a834:	ldr	r1, [r4, #20]
   2a838:	bl	26830 <flatcc_json_parser_struct_as_root@@Base+0x8>
   2a83c:	ldr	r3, [r4, #20]
   2a840:	add	r0, r3, r0
   2a844:	str	r0, [r4, #20]
   2a848:	b	2a7a0 <flatcc_json_printer_uint16_vector_field@@Base+0xe4>
   2a84c:	mov	r0, r4
   2a850:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2a854:	b	2a830 <flatcc_json_printer_uint16_vector_field@@Base+0x174>

0002a858 <flatcc_json_printer_uint32_vector_field@@Base>:
   2a858:	push	{r4, r5, r6, r7, r8, lr}
   2a85c:	mov	r5, r1
   2a860:	mov	r4, r0
   2a864:	mov	r1, r2
   2a868:	mov	r0, r5
   2a86c:	mov	r8, r3
   2a870:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2a874:	cmp	r0, #0
   2a878:	popeq	{r4, r5, r6, r7, r8, pc}
   2a87c:	ldr	r3, [r5, #16]
   2a880:	add	r2, r3, #1
   2a884:	cmp	r3, #0
   2a888:	str	r2, [r5, #16]
   2a88c:	beq	2a8a4 <flatcc_json_printer_uint32_vector_field@@Base+0x4c>
   2a890:	ldr	r2, [r4, #20]
   2a894:	add	r3, r2, #1
   2a898:	str	r3, [r4, #20]
   2a89c:	mov	r3, #44	; 0x2c
   2a8a0:	strb	r3, [r2]
   2a8a4:	ldr	r2, [r0]
   2a8a8:	mov	r1, r8
   2a8ac:	add	r7, r0, r2
   2a8b0:	ldr	r5, [r0, r2]
   2a8b4:	mov	r0, r4
   2a8b8:	add	r6, r7, #4
   2a8bc:	ldr	r2, [sp, #24]
   2a8c0:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2a8c4:	ldr	r3, [r4, #32]
   2a8c8:	cmp	r5, #0
   2a8cc:	add	r3, r3, #1
   2a8d0:	str	r3, [r4, #32]
   2a8d4:	ldr	r3, [r4, #20]
   2a8d8:	add	r2, r3, #1
   2a8dc:	str	r2, [r4, #20]
   2a8e0:	mov	r2, #91	; 0x5b
   2a8e4:	strb	r2, [r3]
   2a8e8:	beq	2a934 <flatcc_json_printer_uint32_vector_field@@Base+0xdc>
   2a8ec:	ldrb	r3, [r4, #25]
   2a8f0:	cmp	r3, #0
   2a8f4:	beq	2a994 <flatcc_json_printer_uint32_vector_field@@Base+0x13c>
   2a8f8:	ldr	r3, [r4, #20]
   2a8fc:	mov	r0, r4
   2a900:	add	r2, r3, #1
   2a904:	str	r2, [r4, #20]
   2a908:	mov	r2, #10
   2a90c:	strb	r2, [r3]
   2a910:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2a914:	ldr	r0, [r7, #4]
   2a918:	add	r6, r7, #8
   2a91c:	sub	r5, r5, #1
   2a920:	ldr	r1, [r4, #20]
   2a924:	bl	26974 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   2a928:	ldr	r3, [r4, #20]
   2a92c:	add	r0, r3, r0
   2a930:	str	r0, [r4, #20]
   2a934:	mov	r7, #44	; 0x2c
   2a938:	mov	r8, #10
   2a93c:	ldr	r3, [r4, #20]
   2a940:	sub	r5, r5, #1
   2a944:	cmn	r5, #1
   2a948:	add	r2, r3, #1
   2a94c:	bne	2a9a0 <flatcc_json_printer_uint32_vector_field@@Base+0x148>
   2a950:	ldrb	r1, [r4, #25]
   2a954:	cmp	r1, #0
   2a958:	beq	2a97c <flatcc_json_printer_uint32_vector_field@@Base+0x124>
   2a95c:	str	r2, [r4, #20]
   2a960:	mov	r2, #10
   2a964:	mov	r0, r4
   2a968:	strb	r2, [r3]
   2a96c:	ldr	r3, [r4, #32]
   2a970:	sub	r3, r3, #1
   2a974:	str	r3, [r4, #32]
   2a978:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2a97c:	ldr	r3, [r4, #20]
   2a980:	add	r2, r3, #1
   2a984:	str	r2, [r4, #20]
   2a988:	mov	r2, #93	; 0x5d
   2a98c:	strb	r2, [r3]
   2a990:	pop	{r4, r5, r6, r7, r8, pc}
   2a994:	mov	r0, r4
   2a998:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2a99c:	b	2a914 <flatcc_json_printer_uint32_vector_field@@Base+0xbc>
   2a9a0:	str	r2, [r4, #20]
   2a9a4:	strb	r7, [r3]
   2a9a8:	ldrb	r3, [r4, #25]
   2a9ac:	cmp	r3, #0
   2a9b0:	beq	2a9e8 <flatcc_json_printer_uint32_vector_field@@Base+0x190>
   2a9b4:	ldr	r3, [r4, #20]
   2a9b8:	mov	r0, r4
   2a9bc:	add	r2, r3, #1
   2a9c0:	str	r2, [r4, #20]
   2a9c4:	strb	r8, [r3]
   2a9c8:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2a9cc:	ldr	r0, [r6], #4
   2a9d0:	ldr	r1, [r4, #20]
   2a9d4:	bl	26974 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   2a9d8:	ldr	r3, [r4, #20]
   2a9dc:	add	r0, r3, r0
   2a9e0:	str	r0, [r4, #20]
   2a9e4:	b	2a93c <flatcc_json_printer_uint32_vector_field@@Base+0xe4>
   2a9e8:	mov	r0, r4
   2a9ec:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2a9f0:	b	2a9cc <flatcc_json_printer_uint32_vector_field@@Base+0x174>

0002a9f4 <flatcc_json_printer_uint64_vector_field@@Base>:
   2a9f4:	push	{r4, r5, r6, r7, r8, lr}
   2a9f8:	mov	r5, r1
   2a9fc:	mov	r4, r0
   2aa00:	mov	r1, r2
   2aa04:	mov	r0, r5
   2aa08:	mov	r8, r3
   2aa0c:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2aa10:	cmp	r0, #0
   2aa14:	popeq	{r4, r5, r6, r7, r8, pc}
   2aa18:	ldr	r3, [r5, #16]
   2aa1c:	add	r2, r3, #1
   2aa20:	cmp	r3, #0
   2aa24:	str	r2, [r5, #16]
   2aa28:	beq	2aa40 <flatcc_json_printer_uint64_vector_field@@Base+0x4c>
   2aa2c:	ldr	r2, [r4, #20]
   2aa30:	add	r3, r2, #1
   2aa34:	str	r3, [r4, #20]
   2aa38:	mov	r3, #44	; 0x2c
   2aa3c:	strb	r3, [r2]
   2aa40:	ldr	r2, [r0]
   2aa44:	mov	r1, r8
   2aa48:	add	r7, r0, r2
   2aa4c:	ldr	r5, [r0, r2]
   2aa50:	mov	r0, r4
   2aa54:	add	r6, r7, #4
   2aa58:	ldr	r2, [sp, #24]
   2aa5c:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2aa60:	ldr	r3, [r4, #32]
   2aa64:	cmp	r5, #0
   2aa68:	add	r3, r3, #1
   2aa6c:	str	r3, [r4, #32]
   2aa70:	ldr	r3, [r4, #20]
   2aa74:	add	r2, r3, #1
   2aa78:	str	r2, [r4, #20]
   2aa7c:	mov	r2, #91	; 0x5b
   2aa80:	strb	r2, [r3]
   2aa84:	beq	2aad0 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   2aa88:	ldrb	r3, [r4, #25]
   2aa8c:	cmp	r3, #0
   2aa90:	beq	2ab30 <flatcc_json_printer_uint64_vector_field@@Base+0x13c>
   2aa94:	ldr	r3, [r4, #20]
   2aa98:	mov	r0, r4
   2aa9c:	add	r2, r3, #1
   2aaa0:	str	r2, [r4, #20]
   2aaa4:	mov	r2, #10
   2aaa8:	strb	r2, [r3]
   2aaac:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2aab0:	ldrd	r0, [r7, #4]
   2aab4:	add	r6, r7, #12
   2aab8:	sub	r5, r5, #1
   2aabc:	ldr	r2, [r4, #20]
   2aac0:	bl	26c24 <flatcc_json_parser_struct_as_root@@Base+0x3fc>
   2aac4:	ldr	r3, [r4, #20]
   2aac8:	add	r0, r3, r0
   2aacc:	str	r0, [r4, #20]
   2aad0:	mov	r7, #44	; 0x2c
   2aad4:	mov	r8, #10
   2aad8:	ldr	r3, [r4, #20]
   2aadc:	sub	r5, r5, #1
   2aae0:	cmn	r5, #1
   2aae4:	add	r2, r3, #1
   2aae8:	bne	2ab3c <flatcc_json_printer_uint64_vector_field@@Base+0x148>
   2aaec:	ldrb	r1, [r4, #25]
   2aaf0:	cmp	r1, #0
   2aaf4:	beq	2ab18 <flatcc_json_printer_uint64_vector_field@@Base+0x124>
   2aaf8:	str	r2, [r4, #20]
   2aafc:	mov	r2, #10
   2ab00:	mov	r0, r4
   2ab04:	strb	r2, [r3]
   2ab08:	ldr	r3, [r4, #32]
   2ab0c:	sub	r3, r3, #1
   2ab10:	str	r3, [r4, #32]
   2ab14:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2ab18:	ldr	r3, [r4, #20]
   2ab1c:	add	r2, r3, #1
   2ab20:	str	r2, [r4, #20]
   2ab24:	mov	r2, #93	; 0x5d
   2ab28:	strb	r2, [r3]
   2ab2c:	pop	{r4, r5, r6, r7, r8, pc}
   2ab30:	mov	r0, r4
   2ab34:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2ab38:	b	2aab0 <flatcc_json_printer_uint64_vector_field@@Base+0xbc>
   2ab3c:	str	r2, [r4, #20]
   2ab40:	strb	r7, [r3]
   2ab44:	ldrb	r3, [r4, #25]
   2ab48:	cmp	r3, #0
   2ab4c:	beq	2ab84 <flatcc_json_printer_uint64_vector_field@@Base+0x190>
   2ab50:	ldr	r3, [r4, #20]
   2ab54:	mov	r0, r4
   2ab58:	add	r2, r3, #1
   2ab5c:	str	r2, [r4, #20]
   2ab60:	strb	r8, [r3]
   2ab64:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2ab68:	ldrd	r0, [r6], #8
   2ab6c:	ldr	r2, [r4, #20]
   2ab70:	bl	26c24 <flatcc_json_parser_struct_as_root@@Base+0x3fc>
   2ab74:	ldr	r3, [r4, #20]
   2ab78:	add	r0, r3, r0
   2ab7c:	str	r0, [r4, #20]
   2ab80:	b	2aad8 <flatcc_json_printer_uint64_vector_field@@Base+0xe4>
   2ab84:	mov	r0, r4
   2ab88:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2ab8c:	b	2ab68 <flatcc_json_printer_uint64_vector_field@@Base+0x174>

0002ab90 <flatcc_json_printer_int8_vector_field@@Base>:
   2ab90:	push	{r4, r5, r6, r7, r8, lr}
   2ab94:	mov	r5, r1
   2ab98:	mov	r4, r0
   2ab9c:	mov	r1, r2
   2aba0:	mov	r0, r5
   2aba4:	mov	r8, r3
   2aba8:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2abac:	cmp	r0, #0
   2abb0:	popeq	{r4, r5, r6, r7, r8, pc}
   2abb4:	ldr	r3, [r5, #16]
   2abb8:	add	r2, r3, #1
   2abbc:	cmp	r3, #0
   2abc0:	str	r2, [r5, #16]
   2abc4:	beq	2abdc <flatcc_json_printer_int8_vector_field@@Base+0x4c>
   2abc8:	ldr	r2, [r4, #20]
   2abcc:	add	r3, r2, #1
   2abd0:	str	r3, [r4, #20]
   2abd4:	mov	r3, #44	; 0x2c
   2abd8:	strb	r3, [r2]
   2abdc:	ldr	r2, [r0]
   2abe0:	mov	r1, r8
   2abe4:	add	r7, r0, r2
   2abe8:	ldr	r5, [r0, r2]
   2abec:	mov	r0, r4
   2abf0:	add	r6, r7, #4
   2abf4:	ldr	r2, [sp, #24]
   2abf8:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2abfc:	ldr	r3, [r4, #32]
   2ac00:	cmp	r5, #0
   2ac04:	add	r3, r3, #1
   2ac08:	str	r3, [r4, #32]
   2ac0c:	ldr	r3, [r4, #20]
   2ac10:	add	r2, r3, #1
   2ac14:	str	r2, [r4, #20]
   2ac18:	mov	r2, #91	; 0x5b
   2ac1c:	strb	r2, [r3]
   2ac20:	beq	2ac6c <flatcc_json_printer_int8_vector_field@@Base+0xdc>
   2ac24:	ldrb	r3, [r4, #25]
   2ac28:	cmp	r3, #0
   2ac2c:	beq	2accc <flatcc_json_printer_int8_vector_field@@Base+0x13c>
   2ac30:	ldr	r3, [r4, #20]
   2ac34:	mov	r0, r4
   2ac38:	add	r2, r3, #1
   2ac3c:	str	r2, [r4, #20]
   2ac40:	mov	r2, #10
   2ac44:	strb	r2, [r3]
   2ac48:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2ac4c:	ldrsb	r0, [r7, #4]
   2ac50:	add	r6, r7, #5
   2ac54:	sub	r5, r5, #1
   2ac58:	ldr	r1, [r4, #20]
   2ac5c:	bl	27c28 <flatcc_json_parser_struct_as_root@@Base+0x1400>
   2ac60:	ldr	r3, [r4, #20]
   2ac64:	add	r0, r3, r0
   2ac68:	str	r0, [r4, #20]
   2ac6c:	add	r5, r6, r5
   2ac70:	mov	r7, #44	; 0x2c
   2ac74:	mov	r8, #10
   2ac78:	ldr	r3, [r4, #20]
   2ac7c:	cmp	r6, r5
   2ac80:	add	r2, r3, #1
   2ac84:	bne	2acd8 <flatcc_json_printer_int8_vector_field@@Base+0x148>
   2ac88:	ldrb	r1, [r4, #25]
   2ac8c:	cmp	r1, #0
   2ac90:	beq	2acb4 <flatcc_json_printer_int8_vector_field@@Base+0x124>
   2ac94:	str	r2, [r4, #20]
   2ac98:	mov	r2, #10
   2ac9c:	mov	r0, r4
   2aca0:	strb	r2, [r3]
   2aca4:	ldr	r3, [r4, #32]
   2aca8:	sub	r3, r3, #1
   2acac:	str	r3, [r4, #32]
   2acb0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2acb4:	ldr	r3, [r4, #20]
   2acb8:	add	r2, r3, #1
   2acbc:	str	r2, [r4, #20]
   2acc0:	mov	r2, #93	; 0x5d
   2acc4:	strb	r2, [r3]
   2acc8:	pop	{r4, r5, r6, r7, r8, pc}
   2accc:	mov	r0, r4
   2acd0:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2acd4:	b	2ac4c <flatcc_json_printer_int8_vector_field@@Base+0xbc>
   2acd8:	str	r2, [r4, #20]
   2acdc:	strb	r7, [r3]
   2ace0:	ldrb	r3, [r4, #25]
   2ace4:	cmp	r3, #0
   2ace8:	beq	2ad20 <flatcc_json_printer_int8_vector_field@@Base+0x190>
   2acec:	ldr	r3, [r4, #20]
   2acf0:	mov	r0, r4
   2acf4:	add	r2, r3, #1
   2acf8:	str	r2, [r4, #20]
   2acfc:	strb	r8, [r3]
   2ad00:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2ad04:	ldrsb	r0, [r6], #1
   2ad08:	ldr	r1, [r4, #20]
   2ad0c:	bl	27c28 <flatcc_json_parser_struct_as_root@@Base+0x1400>
   2ad10:	ldr	r3, [r4, #20]
   2ad14:	add	r0, r3, r0
   2ad18:	str	r0, [r4, #20]
   2ad1c:	b	2ac78 <flatcc_json_printer_int8_vector_field@@Base+0xe8>
   2ad20:	mov	r0, r4
   2ad24:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2ad28:	b	2ad04 <flatcc_json_printer_int8_vector_field@@Base+0x174>

0002ad2c <flatcc_json_printer_int16_vector_field@@Base>:
   2ad2c:	push	{r4, r5, r6, r7, r8, lr}
   2ad30:	mov	r5, r1
   2ad34:	mov	r4, r0
   2ad38:	mov	r1, r2
   2ad3c:	mov	r0, r5
   2ad40:	mov	r8, r3
   2ad44:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2ad48:	cmp	r0, #0
   2ad4c:	popeq	{r4, r5, r6, r7, r8, pc}
   2ad50:	ldr	r3, [r5, #16]
   2ad54:	add	r2, r3, #1
   2ad58:	cmp	r3, #0
   2ad5c:	str	r2, [r5, #16]
   2ad60:	beq	2ad78 <flatcc_json_printer_int16_vector_field@@Base+0x4c>
   2ad64:	ldr	r2, [r4, #20]
   2ad68:	add	r3, r2, #1
   2ad6c:	str	r3, [r4, #20]
   2ad70:	mov	r3, #44	; 0x2c
   2ad74:	strb	r3, [r2]
   2ad78:	ldr	r2, [r0]
   2ad7c:	mov	r1, r8
   2ad80:	add	r7, r0, r2
   2ad84:	ldr	r5, [r0, r2]
   2ad88:	mov	r0, r4
   2ad8c:	add	r6, r7, #4
   2ad90:	ldr	r2, [sp, #24]
   2ad94:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2ad98:	ldr	r3, [r4, #32]
   2ad9c:	cmp	r5, #0
   2ada0:	add	r3, r3, #1
   2ada4:	str	r3, [r4, #32]
   2ada8:	ldr	r3, [r4, #20]
   2adac:	add	r2, r3, #1
   2adb0:	str	r2, [r4, #20]
   2adb4:	mov	r2, #91	; 0x5b
   2adb8:	strb	r2, [r3]
   2adbc:	beq	2ae08 <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   2adc0:	ldrb	r3, [r4, #25]
   2adc4:	cmp	r3, #0
   2adc8:	beq	2ae68 <flatcc_json_printer_int16_vector_field@@Base+0x13c>
   2adcc:	ldr	r3, [r4, #20]
   2add0:	mov	r0, r4
   2add4:	add	r2, r3, #1
   2add8:	str	r2, [r4, #20]
   2addc:	mov	r2, #10
   2ade0:	strb	r2, [r3]
   2ade4:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2ade8:	ldrsh	r0, [r7, #4]
   2adec:	add	r6, r7, #6
   2adf0:	sub	r5, r5, #1
   2adf4:	ldr	r1, [r4, #20]
   2adf8:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0xa3c>
   2adfc:	ldr	r3, [r4, #20]
   2ae00:	add	r0, r3, r0
   2ae04:	str	r0, [r4, #20]
   2ae08:	mov	r7, #44	; 0x2c
   2ae0c:	mov	r8, #10
   2ae10:	ldr	r3, [r4, #20]
   2ae14:	sub	r5, r5, #1
   2ae18:	cmn	r5, #1
   2ae1c:	add	r2, r3, #1
   2ae20:	bne	2ae74 <flatcc_json_printer_int16_vector_field@@Base+0x148>
   2ae24:	ldrb	r1, [r4, #25]
   2ae28:	cmp	r1, #0
   2ae2c:	beq	2ae50 <flatcc_json_printer_int16_vector_field@@Base+0x124>
   2ae30:	str	r2, [r4, #20]
   2ae34:	mov	r2, #10
   2ae38:	mov	r0, r4
   2ae3c:	strb	r2, [r3]
   2ae40:	ldr	r3, [r4, #32]
   2ae44:	sub	r3, r3, #1
   2ae48:	str	r3, [r4, #32]
   2ae4c:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2ae50:	ldr	r3, [r4, #20]
   2ae54:	add	r2, r3, #1
   2ae58:	str	r2, [r4, #20]
   2ae5c:	mov	r2, #93	; 0x5d
   2ae60:	strb	r2, [r3]
   2ae64:	pop	{r4, r5, r6, r7, r8, pc}
   2ae68:	mov	r0, r4
   2ae6c:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2ae70:	b	2ade8 <flatcc_json_printer_int16_vector_field@@Base+0xbc>
   2ae74:	str	r2, [r4, #20]
   2ae78:	strb	r7, [r3]
   2ae7c:	ldrb	r3, [r4, #25]
   2ae80:	cmp	r3, #0
   2ae84:	beq	2aebc <flatcc_json_printer_int16_vector_field@@Base+0x190>
   2ae88:	ldr	r3, [r4, #20]
   2ae8c:	mov	r0, r4
   2ae90:	add	r2, r3, #1
   2ae94:	str	r2, [r4, #20]
   2ae98:	strb	r8, [r3]
   2ae9c:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2aea0:	ldrsh	r0, [r6], #2
   2aea4:	ldr	r1, [r4, #20]
   2aea8:	bl	27264 <flatcc_json_parser_struct_as_root@@Base+0xa3c>
   2aeac:	ldr	r3, [r4, #20]
   2aeb0:	add	r0, r3, r0
   2aeb4:	str	r0, [r4, #20]
   2aeb8:	b	2ae10 <flatcc_json_printer_int16_vector_field@@Base+0xe4>
   2aebc:	mov	r0, r4
   2aec0:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2aec4:	b	2aea0 <flatcc_json_printer_int16_vector_field@@Base+0x174>

0002aec8 <flatcc_json_printer_int32_vector_field@@Base>:
   2aec8:	push	{r4, r5, r6, r7, r8, lr}
   2aecc:	mov	r5, r1
   2aed0:	mov	r4, r0
   2aed4:	mov	r1, r2
   2aed8:	mov	r0, r5
   2aedc:	mov	r8, r3
   2aee0:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2aee4:	cmp	r0, #0
   2aee8:	popeq	{r4, r5, r6, r7, r8, pc}
   2aeec:	ldr	r3, [r5, #16]
   2aef0:	add	r2, r3, #1
   2aef4:	cmp	r3, #0
   2aef8:	str	r2, [r5, #16]
   2aefc:	beq	2af14 <flatcc_json_printer_int32_vector_field@@Base+0x4c>
   2af00:	ldr	r2, [r4, #20]
   2af04:	add	r3, r2, #1
   2af08:	str	r3, [r4, #20]
   2af0c:	mov	r3, #44	; 0x2c
   2af10:	strb	r3, [r2]
   2af14:	ldr	r2, [r0]
   2af18:	mov	r1, r8
   2af1c:	add	r7, r0, r2
   2af20:	ldr	r5, [r0, r2]
   2af24:	mov	r0, r4
   2af28:	add	r6, r7, #4
   2af2c:	ldr	r2, [sp, #24]
   2af30:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2af34:	ldr	r3, [r4, #32]
   2af38:	cmp	r5, #0
   2af3c:	add	r3, r3, #1
   2af40:	str	r3, [r4, #32]
   2af44:	ldr	r3, [r4, #20]
   2af48:	add	r2, r3, #1
   2af4c:	str	r2, [r4, #20]
   2af50:	mov	r2, #91	; 0x5b
   2af54:	strb	r2, [r3]
   2af58:	beq	2afa4 <flatcc_json_printer_int32_vector_field@@Base+0xdc>
   2af5c:	ldrb	r3, [r4, #25]
   2af60:	cmp	r3, #0
   2af64:	beq	2b004 <flatcc_json_printer_int32_vector_field@@Base+0x13c>
   2af68:	ldr	r3, [r4, #20]
   2af6c:	mov	r0, r4
   2af70:	add	r2, r3, #1
   2af74:	str	r2, [r4, #20]
   2af78:	mov	r2, #10
   2af7c:	strb	r2, [r3]
   2af80:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2af84:	ldr	r0, [r7, #4]
   2af88:	add	r6, r7, #8
   2af8c:	sub	r5, r5, #1
   2af90:	ldr	r1, [r4, #20]
   2af94:	bl	27290 <flatcc_json_parser_struct_as_root@@Base+0xa68>
   2af98:	ldr	r3, [r4, #20]
   2af9c:	add	r0, r3, r0
   2afa0:	str	r0, [r4, #20]
   2afa4:	mov	r7, #44	; 0x2c
   2afa8:	mov	r8, #10
   2afac:	ldr	r3, [r4, #20]
   2afb0:	sub	r5, r5, #1
   2afb4:	cmn	r5, #1
   2afb8:	add	r2, r3, #1
   2afbc:	bne	2b010 <flatcc_json_printer_int32_vector_field@@Base+0x148>
   2afc0:	ldrb	r1, [r4, #25]
   2afc4:	cmp	r1, #0
   2afc8:	beq	2afec <flatcc_json_printer_int32_vector_field@@Base+0x124>
   2afcc:	str	r2, [r4, #20]
   2afd0:	mov	r2, #10
   2afd4:	mov	r0, r4
   2afd8:	strb	r2, [r3]
   2afdc:	ldr	r3, [r4, #32]
   2afe0:	sub	r3, r3, #1
   2afe4:	str	r3, [r4, #32]
   2afe8:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2afec:	ldr	r3, [r4, #20]
   2aff0:	add	r2, r3, #1
   2aff4:	str	r2, [r4, #20]
   2aff8:	mov	r2, #93	; 0x5d
   2affc:	strb	r2, [r3]
   2b000:	pop	{r4, r5, r6, r7, r8, pc}
   2b004:	mov	r0, r4
   2b008:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b00c:	b	2af84 <flatcc_json_printer_int32_vector_field@@Base+0xbc>
   2b010:	str	r2, [r4, #20]
   2b014:	strb	r7, [r3]
   2b018:	ldrb	r3, [r4, #25]
   2b01c:	cmp	r3, #0
   2b020:	beq	2b058 <flatcc_json_printer_int32_vector_field@@Base+0x190>
   2b024:	ldr	r3, [r4, #20]
   2b028:	mov	r0, r4
   2b02c:	add	r2, r3, #1
   2b030:	str	r2, [r4, #20]
   2b034:	strb	r8, [r3]
   2b038:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b03c:	ldr	r0, [r6], #4
   2b040:	ldr	r1, [r4, #20]
   2b044:	bl	27290 <flatcc_json_parser_struct_as_root@@Base+0xa68>
   2b048:	ldr	r3, [r4, #20]
   2b04c:	add	r0, r3, r0
   2b050:	str	r0, [r4, #20]
   2b054:	b	2afac <flatcc_json_printer_int32_vector_field@@Base+0xe4>
   2b058:	mov	r0, r4
   2b05c:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b060:	b	2b03c <flatcc_json_printer_int32_vector_field@@Base+0x174>

0002b064 <flatcc_json_printer_int64_vector_field@@Base>:
   2b064:	push	{r4, r5, r6, r7, r8, lr}
   2b068:	mov	r5, r1
   2b06c:	mov	r4, r0
   2b070:	mov	r1, r2
   2b074:	mov	r0, r5
   2b078:	mov	r8, r3
   2b07c:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2b080:	cmp	r0, #0
   2b084:	popeq	{r4, r5, r6, r7, r8, pc}
   2b088:	ldr	r3, [r5, #16]
   2b08c:	add	r2, r3, #1
   2b090:	cmp	r3, #0
   2b094:	str	r2, [r5, #16]
   2b098:	beq	2b0b0 <flatcc_json_printer_int64_vector_field@@Base+0x4c>
   2b09c:	ldr	r2, [r4, #20]
   2b0a0:	add	r3, r2, #1
   2b0a4:	str	r3, [r4, #20]
   2b0a8:	mov	r3, #44	; 0x2c
   2b0ac:	strb	r3, [r2]
   2b0b0:	ldr	r2, [r0]
   2b0b4:	mov	r1, r8
   2b0b8:	add	r7, r0, r2
   2b0bc:	ldr	r5, [r0, r2]
   2b0c0:	mov	r0, r4
   2b0c4:	add	r6, r7, #4
   2b0c8:	ldr	r2, [sp, #24]
   2b0cc:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2b0d0:	ldr	r3, [r4, #32]
   2b0d4:	cmp	r5, #0
   2b0d8:	add	r3, r3, #1
   2b0dc:	str	r3, [r4, #32]
   2b0e0:	ldr	r3, [r4, #20]
   2b0e4:	add	r2, r3, #1
   2b0e8:	str	r2, [r4, #20]
   2b0ec:	mov	r2, #91	; 0x5b
   2b0f0:	strb	r2, [r3]
   2b0f4:	beq	2b140 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   2b0f8:	ldrb	r3, [r4, #25]
   2b0fc:	cmp	r3, #0
   2b100:	beq	2b1a0 <flatcc_json_printer_int64_vector_field@@Base+0x13c>
   2b104:	ldr	r3, [r4, #20]
   2b108:	mov	r0, r4
   2b10c:	add	r2, r3, #1
   2b110:	str	r2, [r4, #20]
   2b114:	mov	r2, #10
   2b118:	strb	r2, [r3]
   2b11c:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b120:	ldrd	r0, [r7, #4]
   2b124:	add	r6, r7, #12
   2b128:	sub	r5, r5, #1
   2b12c:	ldr	r2, [r4, #20]
   2b130:	bl	272b4 <flatcc_json_parser_struct_as_root@@Base+0xa8c>
   2b134:	ldr	r3, [r4, #20]
   2b138:	add	r0, r3, r0
   2b13c:	str	r0, [r4, #20]
   2b140:	mov	r7, #44	; 0x2c
   2b144:	mov	r8, #10
   2b148:	ldr	r3, [r4, #20]
   2b14c:	sub	r5, r5, #1
   2b150:	cmn	r5, #1
   2b154:	add	r2, r3, #1
   2b158:	bne	2b1ac <flatcc_json_printer_int64_vector_field@@Base+0x148>
   2b15c:	ldrb	r1, [r4, #25]
   2b160:	cmp	r1, #0
   2b164:	beq	2b188 <flatcc_json_printer_int64_vector_field@@Base+0x124>
   2b168:	str	r2, [r4, #20]
   2b16c:	mov	r2, #10
   2b170:	mov	r0, r4
   2b174:	strb	r2, [r3]
   2b178:	ldr	r3, [r4, #32]
   2b17c:	sub	r3, r3, #1
   2b180:	str	r3, [r4, #32]
   2b184:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b188:	ldr	r3, [r4, #20]
   2b18c:	add	r2, r3, #1
   2b190:	str	r2, [r4, #20]
   2b194:	mov	r2, #93	; 0x5d
   2b198:	strb	r2, [r3]
   2b19c:	pop	{r4, r5, r6, r7, r8, pc}
   2b1a0:	mov	r0, r4
   2b1a4:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b1a8:	b	2b120 <flatcc_json_printer_int64_vector_field@@Base+0xbc>
   2b1ac:	str	r2, [r4, #20]
   2b1b0:	strb	r7, [r3]
   2b1b4:	ldrb	r3, [r4, #25]
   2b1b8:	cmp	r3, #0
   2b1bc:	beq	2b1f4 <flatcc_json_printer_int64_vector_field@@Base+0x190>
   2b1c0:	ldr	r3, [r4, #20]
   2b1c4:	mov	r0, r4
   2b1c8:	add	r2, r3, #1
   2b1cc:	str	r2, [r4, #20]
   2b1d0:	strb	r8, [r3]
   2b1d4:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b1d8:	ldrd	r0, [r6], #8
   2b1dc:	ldr	r2, [r4, #20]
   2b1e0:	bl	272b4 <flatcc_json_parser_struct_as_root@@Base+0xa8c>
   2b1e4:	ldr	r3, [r4, #20]
   2b1e8:	add	r0, r3, r0
   2b1ec:	str	r0, [r4, #20]
   2b1f0:	b	2b148 <flatcc_json_printer_int64_vector_field@@Base+0xe4>
   2b1f4:	mov	r0, r4
   2b1f8:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b1fc:	b	2b1d8 <flatcc_json_printer_int64_vector_field@@Base+0x174>

0002b200 <flatcc_json_printer_bool_vector_field@@Base>:
   2b200:	push	{r4, r5, r6, r7, r8, lr}
   2b204:	mov	r5, r1
   2b208:	mov	r4, r0
   2b20c:	mov	r1, r2
   2b210:	mov	r0, r5
   2b214:	mov	r8, r3
   2b218:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2b21c:	cmp	r0, #0
   2b220:	popeq	{r4, r5, r6, r7, r8, pc}
   2b224:	ldr	r3, [r5, #16]
   2b228:	add	r2, r3, #1
   2b22c:	cmp	r3, #0
   2b230:	str	r2, [r5, #16]
   2b234:	beq	2b24c <flatcc_json_printer_bool_vector_field@@Base+0x4c>
   2b238:	ldr	r2, [r4, #20]
   2b23c:	add	r3, r2, #1
   2b240:	str	r3, [r4, #20]
   2b244:	mov	r3, #44	; 0x2c
   2b248:	strb	r3, [r2]
   2b24c:	ldr	r2, [r0]
   2b250:	mov	r1, r8
   2b254:	add	r7, r0, r2
   2b258:	ldr	r5, [r0, r2]
   2b25c:	mov	r0, r4
   2b260:	add	r6, r7, #4
   2b264:	ldr	r2, [sp, #24]
   2b268:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2b26c:	ldr	r3, [r4, #32]
   2b270:	cmp	r5, #0
   2b274:	add	r3, r3, #1
   2b278:	str	r3, [r4, #32]
   2b27c:	ldr	r3, [r4, #20]
   2b280:	add	r2, r3, #1
   2b284:	str	r2, [r4, #20]
   2b288:	mov	r2, #91	; 0x5b
   2b28c:	strb	r2, [r3]
   2b290:	beq	2b2dc <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   2b294:	ldrb	r3, [r4, #25]
   2b298:	cmp	r3, #0
   2b29c:	beq	2b33c <flatcc_json_printer_bool_vector_field@@Base+0x13c>
   2b2a0:	ldr	r3, [r4, #20]
   2b2a4:	mov	r0, r4
   2b2a8:	add	r2, r3, #1
   2b2ac:	str	r2, [r4, #20]
   2b2b0:	mov	r2, #10
   2b2b4:	strb	r2, [r3]
   2b2b8:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b2bc:	ldrb	r0, [r7, #4]
   2b2c0:	add	r6, r7, #5
   2b2c4:	sub	r5, r5, #1
   2b2c8:	ldr	r1, [r4, #20]
   2b2cc:	bl	27d30 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   2b2d0:	ldr	r3, [r4, #20]
   2b2d4:	add	r0, r3, r0
   2b2d8:	str	r0, [r4, #20]
   2b2dc:	add	r5, r6, r5
   2b2e0:	mov	r7, #44	; 0x2c
   2b2e4:	mov	r8, #10
   2b2e8:	ldr	r3, [r4, #20]
   2b2ec:	cmp	r6, r5
   2b2f0:	add	r2, r3, #1
   2b2f4:	bne	2b348 <flatcc_json_printer_bool_vector_field@@Base+0x148>
   2b2f8:	ldrb	r1, [r4, #25]
   2b2fc:	cmp	r1, #0
   2b300:	beq	2b324 <flatcc_json_printer_bool_vector_field@@Base+0x124>
   2b304:	str	r2, [r4, #20]
   2b308:	mov	r2, #10
   2b30c:	mov	r0, r4
   2b310:	strb	r2, [r3]
   2b314:	ldr	r3, [r4, #32]
   2b318:	sub	r3, r3, #1
   2b31c:	str	r3, [r4, #32]
   2b320:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b324:	ldr	r3, [r4, #20]
   2b328:	add	r2, r3, #1
   2b32c:	str	r2, [r4, #20]
   2b330:	mov	r2, #93	; 0x5d
   2b334:	strb	r2, [r3]
   2b338:	pop	{r4, r5, r6, r7, r8, pc}
   2b33c:	mov	r0, r4
   2b340:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b344:	b	2b2bc <flatcc_json_printer_bool_vector_field@@Base+0xbc>
   2b348:	str	r2, [r4, #20]
   2b34c:	strb	r7, [r3]
   2b350:	ldrb	r3, [r4, #25]
   2b354:	cmp	r3, #0
   2b358:	beq	2b390 <flatcc_json_printer_bool_vector_field@@Base+0x190>
   2b35c:	ldr	r3, [r4, #20]
   2b360:	mov	r0, r4
   2b364:	add	r2, r3, #1
   2b368:	str	r2, [r4, #20]
   2b36c:	strb	r8, [r3]
   2b370:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b374:	ldrb	r0, [r6], #1
   2b378:	ldr	r1, [r4, #20]
   2b37c:	bl	27d30 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   2b380:	ldr	r3, [r4, #20]
   2b384:	add	r0, r3, r0
   2b388:	str	r0, [r4, #20]
   2b38c:	b	2b2e8 <flatcc_json_printer_bool_vector_field@@Base+0xe8>
   2b390:	mov	r0, r4
   2b394:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b398:	b	2b374 <flatcc_json_printer_bool_vector_field@@Base+0x174>

0002b39c <flatcc_json_printer_float_vector_field@@Base>:
   2b39c:	push	{r4, r5, r6, r7, r8, lr}
   2b3a0:	mov	r5, r1
   2b3a4:	mov	r4, r0
   2b3a8:	mov	r1, r2
   2b3ac:	mov	r0, r5
   2b3b0:	mov	r8, r3
   2b3b4:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2b3b8:	cmp	r0, #0
   2b3bc:	popeq	{r4, r5, r6, r7, r8, pc}
   2b3c0:	ldr	r3, [r5, #16]
   2b3c4:	add	r2, r3, #1
   2b3c8:	cmp	r3, #0
   2b3cc:	str	r2, [r5, #16]
   2b3d0:	beq	2b3e8 <flatcc_json_printer_float_vector_field@@Base+0x4c>
   2b3d4:	ldr	r2, [r4, #20]
   2b3d8:	add	r3, r2, #1
   2b3dc:	str	r3, [r4, #20]
   2b3e0:	mov	r3, #44	; 0x2c
   2b3e4:	strb	r3, [r2]
   2b3e8:	ldr	r2, [r0]
   2b3ec:	mov	r1, r8
   2b3f0:	add	r7, r0, r2
   2b3f4:	ldr	r5, [r0, r2]
   2b3f8:	mov	r0, r4
   2b3fc:	add	r6, r7, #4
   2b400:	ldr	r2, [sp, #24]
   2b404:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2b408:	ldr	r3, [r4, #32]
   2b40c:	cmp	r5, #0
   2b410:	add	r3, r3, #1
   2b414:	str	r3, [r4, #32]
   2b418:	ldr	r3, [r4, #20]
   2b41c:	add	r2, r3, #1
   2b420:	str	r2, [r4, #20]
   2b424:	mov	r2, #91	; 0x5b
   2b428:	strb	r2, [r3]
   2b42c:	beq	2b47c <flatcc_json_printer_float_vector_field@@Base+0xe0>
   2b430:	ldrb	r3, [r4, #25]
   2b434:	cmp	r3, #0
   2b438:	beq	2b4dc <flatcc_json_printer_float_vector_field@@Base+0x140>
   2b43c:	ldr	r3, [r4, #20]
   2b440:	mov	r0, r4
   2b444:	add	r2, r3, #1
   2b448:	str	r2, [r4, #20]
   2b44c:	mov	r2, #10
   2b450:	strb	r2, [r3]
   2b454:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b458:	vldr	s0, [r7, #4]
   2b45c:	add	r6, r7, #8
   2b460:	sub	r5, r5, #1
   2b464:	ldr	r0, [r4, #20]
   2b468:	vcvt.f64.f32	d0, s0
   2b46c:	bl	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>
   2b470:	ldr	r3, [r4, #20]
   2b474:	add	r0, r3, r0
   2b478:	str	r0, [r4, #20]
   2b47c:	mov	r7, #44	; 0x2c
   2b480:	mov	r8, #10
   2b484:	ldr	r3, [r4, #20]
   2b488:	sub	r5, r5, #1
   2b48c:	cmn	r5, #1
   2b490:	add	r2, r3, #1
   2b494:	bne	2b4e8 <flatcc_json_printer_float_vector_field@@Base+0x14c>
   2b498:	ldrb	r1, [r4, #25]
   2b49c:	cmp	r1, #0
   2b4a0:	beq	2b4c4 <flatcc_json_printer_float_vector_field@@Base+0x128>
   2b4a4:	str	r2, [r4, #20]
   2b4a8:	mov	r2, #10
   2b4ac:	mov	r0, r4
   2b4b0:	strb	r2, [r3]
   2b4b4:	ldr	r3, [r4, #32]
   2b4b8:	sub	r3, r3, #1
   2b4bc:	str	r3, [r4, #32]
   2b4c0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b4c4:	ldr	r3, [r4, #20]
   2b4c8:	add	r2, r3, #1
   2b4cc:	str	r2, [r4, #20]
   2b4d0:	mov	r2, #93	; 0x5d
   2b4d4:	strb	r2, [r3]
   2b4d8:	pop	{r4, r5, r6, r7, r8, pc}
   2b4dc:	mov	r0, r4
   2b4e0:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b4e4:	b	2b458 <flatcc_json_printer_float_vector_field@@Base+0xbc>
   2b4e8:	str	r2, [r4, #20]
   2b4ec:	strb	r7, [r3]
   2b4f0:	ldrb	r3, [r4, #25]
   2b4f4:	cmp	r3, #0
   2b4f8:	beq	2b534 <flatcc_json_printer_float_vector_field@@Base+0x198>
   2b4fc:	ldr	r3, [r4, #20]
   2b500:	mov	r0, r4
   2b504:	add	r2, r3, #1
   2b508:	str	r2, [r4, #20]
   2b50c:	strb	r8, [r3]
   2b510:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b514:	vldmia	r6!, {s0}
   2b518:	ldr	r0, [r4, #20]
   2b51c:	vcvt.f64.f32	d0, s0
   2b520:	bl	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>
   2b524:	ldr	r3, [r4, #20]
   2b528:	add	r0, r3, r0
   2b52c:	str	r0, [r4, #20]
   2b530:	b	2b484 <flatcc_json_printer_float_vector_field@@Base+0xe8>
   2b534:	mov	r0, r4
   2b538:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b53c:	b	2b514 <flatcc_json_printer_float_vector_field@@Base+0x178>

0002b540 <flatcc_json_printer_double_vector_field@@Base>:
   2b540:	push	{r4, r5, r6, r7, r8, lr}
   2b544:	mov	r5, r1
   2b548:	mov	r4, r0
   2b54c:	mov	r1, r2
   2b550:	mov	r0, r5
   2b554:	mov	r8, r3
   2b558:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2b55c:	cmp	r0, #0
   2b560:	popeq	{r4, r5, r6, r7, r8, pc}
   2b564:	ldr	r3, [r5, #16]
   2b568:	add	r2, r3, #1
   2b56c:	cmp	r3, #0
   2b570:	str	r2, [r5, #16]
   2b574:	beq	2b58c <flatcc_json_printer_double_vector_field@@Base+0x4c>
   2b578:	ldr	r2, [r4, #20]
   2b57c:	add	r3, r2, #1
   2b580:	str	r3, [r4, #20]
   2b584:	mov	r3, #44	; 0x2c
   2b588:	strb	r3, [r2]
   2b58c:	ldr	r2, [r0]
   2b590:	mov	r1, r8
   2b594:	add	r7, r0, r2
   2b598:	ldr	r5, [r0, r2]
   2b59c:	mov	r0, r4
   2b5a0:	add	r6, r7, #4
   2b5a4:	ldr	r2, [sp, #24]
   2b5a8:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2b5ac:	ldr	r3, [r4, #32]
   2b5b0:	cmp	r5, #0
   2b5b4:	add	r3, r3, #1
   2b5b8:	str	r3, [r4, #32]
   2b5bc:	ldr	r3, [r4, #20]
   2b5c0:	add	r2, r3, #1
   2b5c4:	str	r2, [r4, #20]
   2b5c8:	mov	r2, #91	; 0x5b
   2b5cc:	strb	r2, [r3]
   2b5d0:	beq	2b61c <flatcc_json_printer_double_vector_field@@Base+0xdc>
   2b5d4:	ldrb	r3, [r4, #25]
   2b5d8:	cmp	r3, #0
   2b5dc:	beq	2b67c <flatcc_json_printer_double_vector_field@@Base+0x13c>
   2b5e0:	ldr	r3, [r4, #20]
   2b5e4:	mov	r0, r4
   2b5e8:	add	r2, r3, #1
   2b5ec:	str	r2, [r4, #20]
   2b5f0:	mov	r2, #10
   2b5f4:	strb	r2, [r3]
   2b5f8:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b5fc:	vldr	d0, [r7, #4]
   2b600:	add	r6, r7, #12
   2b604:	sub	r5, r5, #1
   2b608:	ldr	r0, [r4, #20]
   2b60c:	bl	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>
   2b610:	ldr	r3, [r4, #20]
   2b614:	add	r0, r3, r0
   2b618:	str	r0, [r4, #20]
   2b61c:	mov	r7, #44	; 0x2c
   2b620:	mov	r8, #10
   2b624:	ldr	r3, [r4, #20]
   2b628:	sub	r5, r5, #1
   2b62c:	cmn	r5, #1
   2b630:	add	r2, r3, #1
   2b634:	bne	2b688 <flatcc_json_printer_double_vector_field@@Base+0x148>
   2b638:	ldrb	r1, [r4, #25]
   2b63c:	cmp	r1, #0
   2b640:	beq	2b664 <flatcc_json_printer_double_vector_field@@Base+0x124>
   2b644:	str	r2, [r4, #20]
   2b648:	mov	r2, #10
   2b64c:	mov	r0, r4
   2b650:	strb	r2, [r3]
   2b654:	ldr	r3, [r4, #32]
   2b658:	sub	r3, r3, #1
   2b65c:	str	r3, [r4, #32]
   2b660:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b664:	ldr	r3, [r4, #20]
   2b668:	add	r2, r3, #1
   2b66c:	str	r2, [r4, #20]
   2b670:	mov	r2, #93	; 0x5d
   2b674:	strb	r2, [r3]
   2b678:	pop	{r4, r5, r6, r7, r8, pc}
   2b67c:	mov	r0, r4
   2b680:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b684:	b	2b5fc <flatcc_json_printer_double_vector_field@@Base+0xbc>
   2b688:	str	r2, [r4, #20]
   2b68c:	strb	r7, [r3]
   2b690:	ldrb	r3, [r4, #25]
   2b694:	cmp	r3, #0
   2b698:	beq	2b6d0 <flatcc_json_printer_double_vector_field@@Base+0x190>
   2b69c:	ldr	r3, [r4, #20]
   2b6a0:	mov	r0, r4
   2b6a4:	add	r2, r3, #1
   2b6a8:	str	r2, [r4, #20]
   2b6ac:	strb	r8, [r3]
   2b6b0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b6b4:	vldmia	r6!, {d0}
   2b6b8:	ldr	r0, [r4, #20]
   2b6bc:	bl	28048 <flatcc_json_parser_struct_as_root@@Base+0x1820>
   2b6c0:	ldr	r3, [r4, #20]
   2b6c4:	add	r0, r3, r0
   2b6c8:	str	r0, [r4, #20]
   2b6cc:	b	2b624 <flatcc_json_printer_double_vector_field@@Base+0xe4>
   2b6d0:	mov	r0, r4
   2b6d4:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b6d8:	b	2b6b4 <flatcc_json_printer_double_vector_field@@Base+0x174>

0002b6dc <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   2b6dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b6e0:	ldrb	lr, [r0, #27]
   2b6e4:	ldr	r9, [sp, #32]
   2b6e8:	ldr	r8, [sp, #36]	; 0x24
   2b6ec:	cmp	lr, #0
   2b6f0:	beq	2b6fc <flatcc_json_printer_uint8_enum_vector_field@@Base+0x20>
   2b6f4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b6f8:	b	2a51c <flatcc_json_printer_uint8_vector_field@@Base>
   2b6fc:	mov	r5, r1
   2b700:	mov	r4, r0
   2b704:	mov	r1, r2
   2b708:	mov	r0, r5
   2b70c:	mov	sl, r3
   2b710:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2b714:	cmp	r0, #0
   2b718:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b71c:	ldr	r3, [r5, #16]
   2b720:	add	r2, r3, #1
   2b724:	cmp	r3, #0
   2b728:	str	r2, [r5, #16]
   2b72c:	beq	2b744 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x68>
   2b730:	ldr	r3, [r4, #20]
   2b734:	add	r2, r3, #1
   2b738:	str	r2, [r4, #20]
   2b73c:	mov	r2, #44	; 0x2c
   2b740:	strb	r2, [r3]
   2b744:	ldr	r3, [r0]
   2b748:	mov	r2, r9
   2b74c:	mov	r1, sl
   2b750:	add	r7, r0, r3
   2b754:	ldr	r5, [r0, r3]
   2b758:	mov	r0, r4
   2b75c:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2b760:	ldr	r3, [r4, #32]
   2b764:	add	r6, r7, #4
   2b768:	cmp	r5, #0
   2b76c:	add	r3, r3, #1
   2b770:	str	r3, [r4, #32]
   2b774:	ldr	r3, [r4, #20]
   2b778:	add	r2, r3, #1
   2b77c:	str	r2, [r4, #20]
   2b780:	mov	r2, #91	; 0x5b
   2b784:	strb	r2, [r3]
   2b788:	beq	2b7c8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xec>
   2b78c:	ldrb	r3, [r4, #25]
   2b790:	cmp	r3, #0
   2b794:	beq	2b828 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x14c>
   2b798:	ldr	r3, [r4, #20]
   2b79c:	mov	r0, r4
   2b7a0:	add	r2, r3, #1
   2b7a4:	str	r2, [r4, #20]
   2b7a8:	mov	r2, #10
   2b7ac:	strb	r2, [r3]
   2b7b0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b7b4:	ldrb	r1, [r7, #4]
   2b7b8:	mov	r0, r4
   2b7bc:	add	r6, r7, #5
   2b7c0:	sub	r5, r5, #1
   2b7c4:	blx	r8
   2b7c8:	add	r5, r6, r5
   2b7cc:	mov	r7, #44	; 0x2c
   2b7d0:	mov	r9, #10
   2b7d4:	ldr	r3, [r4, #20]
   2b7d8:	cmp	r6, r5
   2b7dc:	add	r2, r3, #1
   2b7e0:	bne	2b834 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x158>
   2b7e4:	ldrb	r1, [r4, #25]
   2b7e8:	cmp	r1, #0
   2b7ec:	beq	2b810 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x134>
   2b7f0:	str	r2, [r4, #20]
   2b7f4:	mov	r2, #10
   2b7f8:	mov	r0, r4
   2b7fc:	strb	r2, [r3]
   2b800:	ldr	r3, [r4, #32]
   2b804:	sub	r3, r3, #1
   2b808:	str	r3, [r4, #32]
   2b80c:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b810:	ldr	r3, [r4, #20]
   2b814:	add	r2, r3, #1
   2b818:	str	r2, [r4, #20]
   2b81c:	mov	r2, #93	; 0x5d
   2b820:	strb	r2, [r3]
   2b824:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b828:	mov	r0, r4
   2b82c:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b830:	b	2b7b4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xd8>
   2b834:	str	r2, [r4, #20]
   2b838:	strb	r7, [r3]
   2b83c:	ldrb	r3, [r4, #25]
   2b840:	cmp	r3, #0
   2b844:	beq	2b870 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x194>
   2b848:	ldr	r3, [r4, #20]
   2b84c:	mov	r0, r4
   2b850:	add	r2, r3, #1
   2b854:	str	r2, [r4, #20]
   2b858:	strb	r9, [r3]
   2b85c:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b860:	ldrb	r1, [r6], #1
   2b864:	mov	r0, r4
   2b868:	blx	r8
   2b86c:	b	2b7d4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   2b870:	mov	r0, r4
   2b874:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b878:	b	2b860 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x184>

0002b87c <flatcc_json_printer_utype_enum_vector_field@@Base>:
   2b87c:	b	2b6dc <flatcc_json_printer_uint8_enum_vector_field@@Base>

0002b880 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   2b880:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b884:	ldrb	lr, [r0, #27]
   2b888:	ldr	r9, [sp, #32]
   2b88c:	ldr	r8, [sp, #36]	; 0x24
   2b890:	cmp	lr, #0
   2b894:	beq	2b8a0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x20>
   2b898:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b89c:	b	2a6bc <flatcc_json_printer_uint16_vector_field@@Base>
   2b8a0:	mov	r5, r1
   2b8a4:	mov	r4, r0
   2b8a8:	mov	r1, r2
   2b8ac:	mov	r0, r5
   2b8b0:	mov	sl, r3
   2b8b4:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2b8b8:	cmp	r0, #0
   2b8bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b8c0:	ldr	r3, [r5, #16]
   2b8c4:	add	r2, r3, #1
   2b8c8:	cmp	r3, #0
   2b8cc:	str	r2, [r5, #16]
   2b8d0:	beq	2b8e8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x68>
   2b8d4:	ldr	r3, [r4, #20]
   2b8d8:	add	r2, r3, #1
   2b8dc:	str	r2, [r4, #20]
   2b8e0:	mov	r2, #44	; 0x2c
   2b8e4:	strb	r2, [r3]
   2b8e8:	ldr	r3, [r0]
   2b8ec:	mov	r2, r9
   2b8f0:	mov	r1, sl
   2b8f4:	add	r7, r0, r3
   2b8f8:	ldr	r5, [r0, r3]
   2b8fc:	mov	r0, r4
   2b900:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2b904:	ldr	r3, [r4, #32]
   2b908:	add	r6, r7, #4
   2b90c:	cmp	r5, #0
   2b910:	add	r3, r3, #1
   2b914:	str	r3, [r4, #32]
   2b918:	ldr	r3, [r4, #20]
   2b91c:	add	r2, r3, #1
   2b920:	str	r2, [r4, #20]
   2b924:	mov	r2, #91	; 0x5b
   2b928:	strb	r2, [r3]
   2b92c:	beq	2b96c <flatcc_json_printer_uint16_enum_vector_field@@Base+0xec>
   2b930:	ldrb	r3, [r4, #25]
   2b934:	cmp	r3, #0
   2b938:	beq	2b9cc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x14c>
   2b93c:	ldr	r3, [r4, #20]
   2b940:	mov	r0, r4
   2b944:	add	r2, r3, #1
   2b948:	str	r2, [r4, #20]
   2b94c:	mov	r2, #10
   2b950:	strb	r2, [r3]
   2b954:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b958:	ldrh	r1, [r7, #4]
   2b95c:	mov	r0, r4
   2b960:	add	r6, r7, #6
   2b964:	sub	r5, r5, #1
   2b968:	blx	r8
   2b96c:	mov	r7, #44	; 0x2c
   2b970:	mov	r9, #10
   2b974:	ldr	r3, [r4, #20]
   2b978:	sub	r5, r5, #1
   2b97c:	cmn	r5, #1
   2b980:	add	r2, r3, #1
   2b984:	bne	2b9d8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x158>
   2b988:	ldrb	r1, [r4, #25]
   2b98c:	cmp	r1, #0
   2b990:	beq	2b9b4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x134>
   2b994:	str	r2, [r4, #20]
   2b998:	mov	r2, #10
   2b99c:	mov	r0, r4
   2b9a0:	strb	r2, [r3]
   2b9a4:	ldr	r3, [r4, #32]
   2b9a8:	sub	r3, r3, #1
   2b9ac:	str	r3, [r4, #32]
   2b9b0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2b9b4:	ldr	r3, [r4, #20]
   2b9b8:	add	r2, r3, #1
   2b9bc:	str	r2, [r4, #20]
   2b9c0:	mov	r2, #93	; 0x5d
   2b9c4:	strb	r2, [r3]
   2b9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b9cc:	mov	r0, r4
   2b9d0:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2b9d4:	b	2b958 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xd8>
   2b9d8:	str	r2, [r4, #20]
   2b9dc:	strb	r7, [r3]
   2b9e0:	ldrb	r3, [r4, #25]
   2b9e4:	cmp	r3, #0
   2b9e8:	beq	2ba14 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x194>
   2b9ec:	ldr	r3, [r4, #20]
   2b9f0:	mov	r0, r4
   2b9f4:	add	r2, r3, #1
   2b9f8:	str	r2, [r4, #20]
   2b9fc:	strb	r9, [r3]
   2ba00:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2ba04:	ldrh	r1, [r6], #2
   2ba08:	mov	r0, r4
   2ba0c:	blx	r8
   2ba10:	b	2b974 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   2ba14:	mov	r0, r4
   2ba18:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2ba1c:	b	2ba04 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x184>

0002ba20 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   2ba20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ba24:	ldrb	lr, [r0, #27]
   2ba28:	ldr	r9, [sp, #32]
   2ba2c:	ldr	r8, [sp, #36]	; 0x24
   2ba30:	cmp	lr, #0
   2ba34:	beq	2ba40 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x20>
   2ba38:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ba3c:	b	2a858 <flatcc_json_printer_uint32_vector_field@@Base>
   2ba40:	mov	r5, r1
   2ba44:	mov	r4, r0
   2ba48:	mov	r1, r2
   2ba4c:	mov	r0, r5
   2ba50:	mov	sl, r3
   2ba54:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2ba58:	cmp	r0, #0
   2ba5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ba60:	ldr	r3, [r5, #16]
   2ba64:	add	r2, r3, #1
   2ba68:	cmp	r3, #0
   2ba6c:	str	r2, [r5, #16]
   2ba70:	beq	2ba88 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x68>
   2ba74:	ldr	r3, [r4, #20]
   2ba78:	add	r2, r3, #1
   2ba7c:	str	r2, [r4, #20]
   2ba80:	mov	r2, #44	; 0x2c
   2ba84:	strb	r2, [r3]
   2ba88:	ldr	r3, [r0]
   2ba8c:	mov	r2, r9
   2ba90:	mov	r1, sl
   2ba94:	add	r7, r0, r3
   2ba98:	ldr	r5, [r0, r3]
   2ba9c:	mov	r0, r4
   2baa0:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2baa4:	ldr	r3, [r4, #32]
   2baa8:	add	r6, r7, #4
   2baac:	cmp	r5, #0
   2bab0:	add	r3, r3, #1
   2bab4:	str	r3, [r4, #32]
   2bab8:	ldr	r3, [r4, #20]
   2babc:	add	r2, r3, #1
   2bac0:	str	r2, [r4, #20]
   2bac4:	mov	r2, #91	; 0x5b
   2bac8:	strb	r2, [r3]
   2bacc:	beq	2bb0c <flatcc_json_printer_uint32_enum_vector_field@@Base+0xec>
   2bad0:	ldrb	r3, [r4, #25]
   2bad4:	cmp	r3, #0
   2bad8:	beq	2bb6c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x14c>
   2badc:	ldr	r3, [r4, #20]
   2bae0:	mov	r0, r4
   2bae4:	add	r2, r3, #1
   2bae8:	str	r2, [r4, #20]
   2baec:	mov	r2, #10
   2baf0:	strb	r2, [r3]
   2baf4:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2baf8:	mov	r0, r4
   2bafc:	ldr	r1, [r7, #4]
   2bb00:	add	r6, r7, #8
   2bb04:	sub	r5, r5, #1
   2bb08:	blx	r8
   2bb0c:	mov	r7, #44	; 0x2c
   2bb10:	mov	r9, #10
   2bb14:	ldr	r3, [r4, #20]
   2bb18:	sub	r5, r5, #1
   2bb1c:	cmn	r5, #1
   2bb20:	add	r2, r3, #1
   2bb24:	bne	2bb78 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x158>
   2bb28:	ldrb	r1, [r4, #25]
   2bb2c:	cmp	r1, #0
   2bb30:	beq	2bb54 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x134>
   2bb34:	str	r2, [r4, #20]
   2bb38:	mov	r2, #10
   2bb3c:	mov	r0, r4
   2bb40:	strb	r2, [r3]
   2bb44:	ldr	r3, [r4, #32]
   2bb48:	sub	r3, r3, #1
   2bb4c:	str	r3, [r4, #32]
   2bb50:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2bb54:	ldr	r3, [r4, #20]
   2bb58:	add	r2, r3, #1
   2bb5c:	str	r2, [r4, #20]
   2bb60:	mov	r2, #93	; 0x5d
   2bb64:	strb	r2, [r3]
   2bb68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bb6c:	mov	r0, r4
   2bb70:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2bb74:	b	2baf8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xd8>
   2bb78:	str	r2, [r4, #20]
   2bb7c:	strb	r7, [r3]
   2bb80:	ldrb	r3, [r4, #25]
   2bb84:	cmp	r3, #0
   2bb88:	beq	2bbb4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x194>
   2bb8c:	ldr	r3, [r4, #20]
   2bb90:	mov	r0, r4
   2bb94:	add	r2, r3, #1
   2bb98:	str	r2, [r4, #20]
   2bb9c:	strb	r9, [r3]
   2bba0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2bba4:	mov	r0, r4
   2bba8:	ldr	r1, [r6], #4
   2bbac:	blx	r8
   2bbb0:	b	2bb14 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   2bbb4:	mov	r0, r4
   2bbb8:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2bbbc:	b	2bba4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x184>

0002bbc0 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   2bbc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bbc4:	ldrb	lr, [r0, #27]
   2bbc8:	ldr	r9, [sp, #32]
   2bbcc:	ldr	r8, [sp, #36]	; 0x24
   2bbd0:	cmp	lr, #0
   2bbd4:	beq	2bbe0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x20>
   2bbd8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bbdc:	b	2a9f4 <flatcc_json_printer_uint64_vector_field@@Base>
   2bbe0:	mov	r5, r1
   2bbe4:	mov	r4, r0
   2bbe8:	mov	r1, r2
   2bbec:	mov	r0, r5
   2bbf0:	mov	sl, r3
   2bbf4:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2bbf8:	cmp	r0, #0
   2bbfc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bc00:	ldr	r3, [r5, #16]
   2bc04:	add	r2, r3, #1
   2bc08:	cmp	r3, #0
   2bc0c:	str	r2, [r5, #16]
   2bc10:	beq	2bc28 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x68>
   2bc14:	ldr	r3, [r4, #20]
   2bc18:	add	r2, r3, #1
   2bc1c:	str	r2, [r4, #20]
   2bc20:	mov	r2, #44	; 0x2c
   2bc24:	strb	r2, [r3]
   2bc28:	ldr	r3, [r0]
   2bc2c:	mov	r2, r9
   2bc30:	mov	r1, sl
   2bc34:	add	r7, r0, r3
   2bc38:	ldr	r5, [r0, r3]
   2bc3c:	mov	r0, r4
   2bc40:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2bc44:	ldr	r3, [r4, #32]
   2bc48:	add	r6, r7, #4
   2bc4c:	cmp	r5, #0
   2bc50:	add	r3, r3, #1
   2bc54:	str	r3, [r4, #32]
   2bc58:	ldr	r3, [r4, #20]
   2bc5c:	add	r2, r3, #1
   2bc60:	str	r2, [r4, #20]
   2bc64:	mov	r2, #91	; 0x5b
   2bc68:	strb	r2, [r3]
   2bc6c:	beq	2bcac <flatcc_json_printer_uint64_enum_vector_field@@Base+0xec>
   2bc70:	ldrb	r3, [r4, #25]
   2bc74:	cmp	r3, #0
   2bc78:	beq	2bd0c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x14c>
   2bc7c:	ldr	r3, [r4, #20]
   2bc80:	mov	r0, r4
   2bc84:	add	r2, r3, #1
   2bc88:	str	r2, [r4, #20]
   2bc8c:	mov	r2, #10
   2bc90:	strb	r2, [r3]
   2bc94:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2bc98:	mov	r0, r4
   2bc9c:	ldrd	r2, [r7, #4]
   2bca0:	add	r6, r7, #12
   2bca4:	sub	r5, r5, #1
   2bca8:	blx	r8
   2bcac:	mov	r7, #44	; 0x2c
   2bcb0:	mov	r9, #10
   2bcb4:	ldr	r3, [r4, #20]
   2bcb8:	sub	r5, r5, #1
   2bcbc:	cmn	r5, #1
   2bcc0:	add	r2, r3, #1
   2bcc4:	bne	2bd18 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x158>
   2bcc8:	ldrb	r1, [r4, #25]
   2bccc:	cmp	r1, #0
   2bcd0:	beq	2bcf4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x134>
   2bcd4:	str	r2, [r4, #20]
   2bcd8:	mov	r2, #10
   2bcdc:	mov	r0, r4
   2bce0:	strb	r2, [r3]
   2bce4:	ldr	r3, [r4, #32]
   2bce8:	sub	r3, r3, #1
   2bcec:	str	r3, [r4, #32]
   2bcf0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2bcf4:	ldr	r3, [r4, #20]
   2bcf8:	add	r2, r3, #1
   2bcfc:	str	r2, [r4, #20]
   2bd00:	mov	r2, #93	; 0x5d
   2bd04:	strb	r2, [r3]
   2bd08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bd0c:	mov	r0, r4
   2bd10:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2bd14:	b	2bc98 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xd8>
   2bd18:	str	r2, [r4, #20]
   2bd1c:	strb	r7, [r3]
   2bd20:	ldrb	r3, [r4, #25]
   2bd24:	cmp	r3, #0
   2bd28:	beq	2bd54 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x194>
   2bd2c:	ldr	r3, [r4, #20]
   2bd30:	mov	r0, r4
   2bd34:	add	r2, r3, #1
   2bd38:	str	r2, [r4, #20]
   2bd3c:	strb	r9, [r3]
   2bd40:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2bd44:	mov	r0, r4
   2bd48:	ldrd	r2, [r6], #8
   2bd4c:	blx	r8
   2bd50:	b	2bcb4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   2bd54:	mov	r0, r4
   2bd58:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2bd5c:	b	2bd44 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x184>

0002bd60 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   2bd60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bd64:	ldrb	lr, [r0, #27]
   2bd68:	ldr	r9, [sp, #32]
   2bd6c:	ldr	r8, [sp, #36]	; 0x24
   2bd70:	cmp	lr, #0
   2bd74:	beq	2bd80 <flatcc_json_printer_int8_enum_vector_field@@Base+0x20>
   2bd78:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bd7c:	b	2ab90 <flatcc_json_printer_int8_vector_field@@Base>
   2bd80:	mov	r5, r1
   2bd84:	mov	r4, r0
   2bd88:	mov	r1, r2
   2bd8c:	mov	r0, r5
   2bd90:	mov	sl, r3
   2bd94:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2bd98:	cmp	r0, #0
   2bd9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bda0:	ldr	r3, [r5, #16]
   2bda4:	add	r2, r3, #1
   2bda8:	cmp	r3, #0
   2bdac:	str	r2, [r5, #16]
   2bdb0:	beq	2bdc8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x68>
   2bdb4:	ldr	r3, [r4, #20]
   2bdb8:	add	r2, r3, #1
   2bdbc:	str	r2, [r4, #20]
   2bdc0:	mov	r2, #44	; 0x2c
   2bdc4:	strb	r2, [r3]
   2bdc8:	ldr	r3, [r0]
   2bdcc:	mov	r2, r9
   2bdd0:	mov	r1, sl
   2bdd4:	add	r7, r0, r3
   2bdd8:	ldr	r5, [r0, r3]
   2bddc:	mov	r0, r4
   2bde0:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2bde4:	ldr	r3, [r4, #32]
   2bde8:	add	r6, r7, #4
   2bdec:	cmp	r5, #0
   2bdf0:	add	r3, r3, #1
   2bdf4:	str	r3, [r4, #32]
   2bdf8:	ldr	r3, [r4, #20]
   2bdfc:	add	r2, r3, #1
   2be00:	str	r2, [r4, #20]
   2be04:	mov	r2, #91	; 0x5b
   2be08:	strb	r2, [r3]
   2be0c:	beq	2be4c <flatcc_json_printer_int8_enum_vector_field@@Base+0xec>
   2be10:	ldrb	r3, [r4, #25]
   2be14:	cmp	r3, #0
   2be18:	beq	2beac <flatcc_json_printer_int8_enum_vector_field@@Base+0x14c>
   2be1c:	ldr	r3, [r4, #20]
   2be20:	mov	r0, r4
   2be24:	add	r2, r3, #1
   2be28:	str	r2, [r4, #20]
   2be2c:	mov	r2, #10
   2be30:	strb	r2, [r3]
   2be34:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2be38:	ldrsb	r1, [r7, #4]
   2be3c:	mov	r0, r4
   2be40:	add	r6, r7, #5
   2be44:	sub	r5, r5, #1
   2be48:	blx	r8
   2be4c:	add	r5, r6, r5
   2be50:	mov	r7, #44	; 0x2c
   2be54:	mov	r9, #10
   2be58:	ldr	r3, [r4, #20]
   2be5c:	cmp	r6, r5
   2be60:	add	r2, r3, #1
   2be64:	bne	2beb8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x158>
   2be68:	ldrb	r1, [r4, #25]
   2be6c:	cmp	r1, #0
   2be70:	beq	2be94 <flatcc_json_printer_int8_enum_vector_field@@Base+0x134>
   2be74:	str	r2, [r4, #20]
   2be78:	mov	r2, #10
   2be7c:	mov	r0, r4
   2be80:	strb	r2, [r3]
   2be84:	ldr	r3, [r4, #32]
   2be88:	sub	r3, r3, #1
   2be8c:	str	r3, [r4, #32]
   2be90:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2be94:	ldr	r3, [r4, #20]
   2be98:	add	r2, r3, #1
   2be9c:	str	r2, [r4, #20]
   2bea0:	mov	r2, #93	; 0x5d
   2bea4:	strb	r2, [r3]
   2bea8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2beac:	mov	r0, r4
   2beb0:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2beb4:	b	2be38 <flatcc_json_printer_int8_enum_vector_field@@Base+0xd8>
   2beb8:	str	r2, [r4, #20]
   2bebc:	strb	r7, [r3]
   2bec0:	ldrb	r3, [r4, #25]
   2bec4:	cmp	r3, #0
   2bec8:	beq	2bef4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x194>
   2becc:	ldr	r3, [r4, #20]
   2bed0:	mov	r0, r4
   2bed4:	add	r2, r3, #1
   2bed8:	str	r2, [r4, #20]
   2bedc:	strb	r9, [r3]
   2bee0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2bee4:	ldrsb	r1, [r6], #1
   2bee8:	mov	r0, r4
   2beec:	blx	r8
   2bef0:	b	2be58 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   2bef4:	mov	r0, r4
   2bef8:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2befc:	b	2bee4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x184>

0002bf00 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   2bf00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bf04:	ldrb	lr, [r0, #27]
   2bf08:	ldr	r9, [sp, #32]
   2bf0c:	ldr	r8, [sp, #36]	; 0x24
   2bf10:	cmp	lr, #0
   2bf14:	beq	2bf20 <flatcc_json_printer_int16_enum_vector_field@@Base+0x20>
   2bf18:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bf1c:	b	2ad2c <flatcc_json_printer_int16_vector_field@@Base>
   2bf20:	mov	r5, r1
   2bf24:	mov	r4, r0
   2bf28:	mov	r1, r2
   2bf2c:	mov	r0, r5
   2bf30:	mov	sl, r3
   2bf34:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2bf38:	cmp	r0, #0
   2bf3c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bf40:	ldr	r3, [r5, #16]
   2bf44:	add	r2, r3, #1
   2bf48:	cmp	r3, #0
   2bf4c:	str	r2, [r5, #16]
   2bf50:	beq	2bf68 <flatcc_json_printer_int16_enum_vector_field@@Base+0x68>
   2bf54:	ldr	r3, [r4, #20]
   2bf58:	add	r2, r3, #1
   2bf5c:	str	r2, [r4, #20]
   2bf60:	mov	r2, #44	; 0x2c
   2bf64:	strb	r2, [r3]
   2bf68:	ldr	r3, [r0]
   2bf6c:	mov	r2, r9
   2bf70:	mov	r1, sl
   2bf74:	add	r7, r0, r3
   2bf78:	ldr	r5, [r0, r3]
   2bf7c:	mov	r0, r4
   2bf80:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2bf84:	ldr	r3, [r4, #32]
   2bf88:	add	r6, r7, #4
   2bf8c:	cmp	r5, #0
   2bf90:	add	r3, r3, #1
   2bf94:	str	r3, [r4, #32]
   2bf98:	ldr	r3, [r4, #20]
   2bf9c:	add	r2, r3, #1
   2bfa0:	str	r2, [r4, #20]
   2bfa4:	mov	r2, #91	; 0x5b
   2bfa8:	strb	r2, [r3]
   2bfac:	beq	2bfec <flatcc_json_printer_int16_enum_vector_field@@Base+0xec>
   2bfb0:	ldrb	r3, [r4, #25]
   2bfb4:	cmp	r3, #0
   2bfb8:	beq	2c04c <flatcc_json_printer_int16_enum_vector_field@@Base+0x14c>
   2bfbc:	ldr	r3, [r4, #20]
   2bfc0:	mov	r0, r4
   2bfc4:	add	r2, r3, #1
   2bfc8:	str	r2, [r4, #20]
   2bfcc:	mov	r2, #10
   2bfd0:	strb	r2, [r3]
   2bfd4:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2bfd8:	ldrsh	r1, [r7, #4]
   2bfdc:	mov	r0, r4
   2bfe0:	add	r6, r7, #6
   2bfe4:	sub	r5, r5, #1
   2bfe8:	blx	r8
   2bfec:	mov	r7, #44	; 0x2c
   2bff0:	mov	r9, #10
   2bff4:	ldr	r3, [r4, #20]
   2bff8:	sub	r5, r5, #1
   2bffc:	cmn	r5, #1
   2c000:	add	r2, r3, #1
   2c004:	bne	2c058 <flatcc_json_printer_int16_enum_vector_field@@Base+0x158>
   2c008:	ldrb	r1, [r4, #25]
   2c00c:	cmp	r1, #0
   2c010:	beq	2c034 <flatcc_json_printer_int16_enum_vector_field@@Base+0x134>
   2c014:	str	r2, [r4, #20]
   2c018:	mov	r2, #10
   2c01c:	mov	r0, r4
   2c020:	strb	r2, [r3]
   2c024:	ldr	r3, [r4, #32]
   2c028:	sub	r3, r3, #1
   2c02c:	str	r3, [r4, #32]
   2c030:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c034:	ldr	r3, [r4, #20]
   2c038:	add	r2, r3, #1
   2c03c:	str	r2, [r4, #20]
   2c040:	mov	r2, #93	; 0x5d
   2c044:	strb	r2, [r3]
   2c048:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c04c:	mov	r0, r4
   2c050:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c054:	b	2bfd8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xd8>
   2c058:	str	r2, [r4, #20]
   2c05c:	strb	r7, [r3]
   2c060:	ldrb	r3, [r4, #25]
   2c064:	cmp	r3, #0
   2c068:	beq	2c094 <flatcc_json_printer_int16_enum_vector_field@@Base+0x194>
   2c06c:	ldr	r3, [r4, #20]
   2c070:	mov	r0, r4
   2c074:	add	r2, r3, #1
   2c078:	str	r2, [r4, #20]
   2c07c:	strb	r9, [r3]
   2c080:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c084:	ldrsh	r1, [r6], #2
   2c088:	mov	r0, r4
   2c08c:	blx	r8
   2c090:	b	2bff4 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   2c094:	mov	r0, r4
   2c098:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c09c:	b	2c084 <flatcc_json_printer_int16_enum_vector_field@@Base+0x184>

0002c0a0 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   2c0a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c0a4:	ldrb	lr, [r0, #27]
   2c0a8:	ldr	r9, [sp, #32]
   2c0ac:	ldr	r8, [sp, #36]	; 0x24
   2c0b0:	cmp	lr, #0
   2c0b4:	beq	2c0c0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x20>
   2c0b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c0bc:	b	2aec8 <flatcc_json_printer_int32_vector_field@@Base>
   2c0c0:	mov	r5, r1
   2c0c4:	mov	r4, r0
   2c0c8:	mov	r1, r2
   2c0cc:	mov	r0, r5
   2c0d0:	mov	sl, r3
   2c0d4:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2c0d8:	cmp	r0, #0
   2c0dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c0e0:	ldr	r3, [r5, #16]
   2c0e4:	add	r2, r3, #1
   2c0e8:	cmp	r3, #0
   2c0ec:	str	r2, [r5, #16]
   2c0f0:	beq	2c108 <flatcc_json_printer_int32_enum_vector_field@@Base+0x68>
   2c0f4:	ldr	r3, [r4, #20]
   2c0f8:	add	r2, r3, #1
   2c0fc:	str	r2, [r4, #20]
   2c100:	mov	r2, #44	; 0x2c
   2c104:	strb	r2, [r3]
   2c108:	ldr	r3, [r0]
   2c10c:	mov	r2, r9
   2c110:	mov	r1, sl
   2c114:	add	r7, r0, r3
   2c118:	ldr	r5, [r0, r3]
   2c11c:	mov	r0, r4
   2c120:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2c124:	ldr	r3, [r4, #32]
   2c128:	add	r6, r7, #4
   2c12c:	cmp	r5, #0
   2c130:	add	r3, r3, #1
   2c134:	str	r3, [r4, #32]
   2c138:	ldr	r3, [r4, #20]
   2c13c:	add	r2, r3, #1
   2c140:	str	r2, [r4, #20]
   2c144:	mov	r2, #91	; 0x5b
   2c148:	strb	r2, [r3]
   2c14c:	beq	2c18c <flatcc_json_printer_int32_enum_vector_field@@Base+0xec>
   2c150:	ldrb	r3, [r4, #25]
   2c154:	cmp	r3, #0
   2c158:	beq	2c1ec <flatcc_json_printer_int32_enum_vector_field@@Base+0x14c>
   2c15c:	ldr	r3, [r4, #20]
   2c160:	mov	r0, r4
   2c164:	add	r2, r3, #1
   2c168:	str	r2, [r4, #20]
   2c16c:	mov	r2, #10
   2c170:	strb	r2, [r3]
   2c174:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c178:	mov	r0, r4
   2c17c:	ldr	r1, [r7, #4]
   2c180:	add	r6, r7, #8
   2c184:	sub	r5, r5, #1
   2c188:	blx	r8
   2c18c:	mov	r7, #44	; 0x2c
   2c190:	mov	r9, #10
   2c194:	ldr	r3, [r4, #20]
   2c198:	sub	r5, r5, #1
   2c19c:	cmn	r5, #1
   2c1a0:	add	r2, r3, #1
   2c1a4:	bne	2c1f8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x158>
   2c1a8:	ldrb	r1, [r4, #25]
   2c1ac:	cmp	r1, #0
   2c1b0:	beq	2c1d4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x134>
   2c1b4:	str	r2, [r4, #20]
   2c1b8:	mov	r2, #10
   2c1bc:	mov	r0, r4
   2c1c0:	strb	r2, [r3]
   2c1c4:	ldr	r3, [r4, #32]
   2c1c8:	sub	r3, r3, #1
   2c1cc:	str	r3, [r4, #32]
   2c1d0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c1d4:	ldr	r3, [r4, #20]
   2c1d8:	add	r2, r3, #1
   2c1dc:	str	r2, [r4, #20]
   2c1e0:	mov	r2, #93	; 0x5d
   2c1e4:	strb	r2, [r3]
   2c1e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c1ec:	mov	r0, r4
   2c1f0:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c1f4:	b	2c178 <flatcc_json_printer_int32_enum_vector_field@@Base+0xd8>
   2c1f8:	str	r2, [r4, #20]
   2c1fc:	strb	r7, [r3]
   2c200:	ldrb	r3, [r4, #25]
   2c204:	cmp	r3, #0
   2c208:	beq	2c234 <flatcc_json_printer_int32_enum_vector_field@@Base+0x194>
   2c20c:	ldr	r3, [r4, #20]
   2c210:	mov	r0, r4
   2c214:	add	r2, r3, #1
   2c218:	str	r2, [r4, #20]
   2c21c:	strb	r9, [r3]
   2c220:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c224:	mov	r0, r4
   2c228:	ldr	r1, [r6], #4
   2c22c:	blx	r8
   2c230:	b	2c194 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   2c234:	mov	r0, r4
   2c238:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c23c:	b	2c224 <flatcc_json_printer_int32_enum_vector_field@@Base+0x184>

0002c240 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   2c240:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c244:	ldrb	lr, [r0, #27]
   2c248:	ldr	r9, [sp, #32]
   2c24c:	ldr	r8, [sp, #36]	; 0x24
   2c250:	cmp	lr, #0
   2c254:	beq	2c260 <flatcc_json_printer_int64_enum_vector_field@@Base+0x20>
   2c258:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c25c:	b	2b064 <flatcc_json_printer_int64_vector_field@@Base>
   2c260:	mov	r5, r1
   2c264:	mov	r4, r0
   2c268:	mov	r1, r2
   2c26c:	mov	r0, r5
   2c270:	mov	sl, r3
   2c274:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2c278:	cmp	r0, #0
   2c27c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c280:	ldr	r3, [r5, #16]
   2c284:	add	r2, r3, #1
   2c288:	cmp	r3, #0
   2c28c:	str	r2, [r5, #16]
   2c290:	beq	2c2a8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x68>
   2c294:	ldr	r3, [r4, #20]
   2c298:	add	r2, r3, #1
   2c29c:	str	r2, [r4, #20]
   2c2a0:	mov	r2, #44	; 0x2c
   2c2a4:	strb	r2, [r3]
   2c2a8:	ldr	r3, [r0]
   2c2ac:	mov	r2, r9
   2c2b0:	mov	r1, sl
   2c2b4:	add	r7, r0, r3
   2c2b8:	ldr	r5, [r0, r3]
   2c2bc:	mov	r0, r4
   2c2c0:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2c2c4:	ldr	r3, [r4, #32]
   2c2c8:	add	r6, r7, #4
   2c2cc:	cmp	r5, #0
   2c2d0:	add	r3, r3, #1
   2c2d4:	str	r3, [r4, #32]
   2c2d8:	ldr	r3, [r4, #20]
   2c2dc:	add	r2, r3, #1
   2c2e0:	str	r2, [r4, #20]
   2c2e4:	mov	r2, #91	; 0x5b
   2c2e8:	strb	r2, [r3]
   2c2ec:	beq	2c32c <flatcc_json_printer_int64_enum_vector_field@@Base+0xec>
   2c2f0:	ldrb	r3, [r4, #25]
   2c2f4:	cmp	r3, #0
   2c2f8:	beq	2c38c <flatcc_json_printer_int64_enum_vector_field@@Base+0x14c>
   2c2fc:	ldr	r3, [r4, #20]
   2c300:	mov	r0, r4
   2c304:	add	r2, r3, #1
   2c308:	str	r2, [r4, #20]
   2c30c:	mov	r2, #10
   2c310:	strb	r2, [r3]
   2c314:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c318:	mov	r0, r4
   2c31c:	ldrd	r2, [r7, #4]
   2c320:	add	r6, r7, #12
   2c324:	sub	r5, r5, #1
   2c328:	blx	r8
   2c32c:	mov	r7, #44	; 0x2c
   2c330:	mov	r9, #10
   2c334:	ldr	r3, [r4, #20]
   2c338:	sub	r5, r5, #1
   2c33c:	cmn	r5, #1
   2c340:	add	r2, r3, #1
   2c344:	bne	2c398 <flatcc_json_printer_int64_enum_vector_field@@Base+0x158>
   2c348:	ldrb	r1, [r4, #25]
   2c34c:	cmp	r1, #0
   2c350:	beq	2c374 <flatcc_json_printer_int64_enum_vector_field@@Base+0x134>
   2c354:	str	r2, [r4, #20]
   2c358:	mov	r2, #10
   2c35c:	mov	r0, r4
   2c360:	strb	r2, [r3]
   2c364:	ldr	r3, [r4, #32]
   2c368:	sub	r3, r3, #1
   2c36c:	str	r3, [r4, #32]
   2c370:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c374:	ldr	r3, [r4, #20]
   2c378:	add	r2, r3, #1
   2c37c:	str	r2, [r4, #20]
   2c380:	mov	r2, #93	; 0x5d
   2c384:	strb	r2, [r3]
   2c388:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c38c:	mov	r0, r4
   2c390:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c394:	b	2c318 <flatcc_json_printer_int64_enum_vector_field@@Base+0xd8>
   2c398:	str	r2, [r4, #20]
   2c39c:	strb	r7, [r3]
   2c3a0:	ldrb	r3, [r4, #25]
   2c3a4:	cmp	r3, #0
   2c3a8:	beq	2c3d4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x194>
   2c3ac:	ldr	r3, [r4, #20]
   2c3b0:	mov	r0, r4
   2c3b4:	add	r2, r3, #1
   2c3b8:	str	r2, [r4, #20]
   2c3bc:	strb	r9, [r3]
   2c3c0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c3c4:	mov	r0, r4
   2c3c8:	ldrd	r2, [r6], #8
   2c3cc:	blx	r8
   2c3d0:	b	2c334 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   2c3d4:	mov	r0, r4
   2c3d8:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c3dc:	b	2c3c4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x184>

0002c3e0 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   2c3e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c3e4:	ldrb	lr, [r0, #27]
   2c3e8:	ldr	r9, [sp, #32]
   2c3ec:	ldr	r8, [sp, #36]	; 0x24
   2c3f0:	cmp	lr, #0
   2c3f4:	beq	2c400 <flatcc_json_printer_bool_enum_vector_field@@Base+0x20>
   2c3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c3fc:	b	2b200 <flatcc_json_printer_bool_vector_field@@Base>
   2c400:	mov	r5, r1
   2c404:	mov	r4, r0
   2c408:	mov	r1, r2
   2c40c:	mov	r0, r5
   2c410:	mov	sl, r3
   2c414:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2c418:	cmp	r0, #0
   2c41c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c420:	ldr	r3, [r5, #16]
   2c424:	add	r2, r3, #1
   2c428:	cmp	r3, #0
   2c42c:	str	r2, [r5, #16]
   2c430:	beq	2c448 <flatcc_json_printer_bool_enum_vector_field@@Base+0x68>
   2c434:	ldr	r3, [r4, #20]
   2c438:	add	r2, r3, #1
   2c43c:	str	r2, [r4, #20]
   2c440:	mov	r2, #44	; 0x2c
   2c444:	strb	r2, [r3]
   2c448:	ldr	r3, [r0]
   2c44c:	mov	r2, r9
   2c450:	mov	r1, sl
   2c454:	add	r7, r0, r3
   2c458:	ldr	r5, [r0, r3]
   2c45c:	mov	r0, r4
   2c460:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2c464:	ldr	r3, [r4, #32]
   2c468:	add	r6, r7, #4
   2c46c:	cmp	r5, #0
   2c470:	add	r3, r3, #1
   2c474:	str	r3, [r4, #32]
   2c478:	ldr	r3, [r4, #20]
   2c47c:	add	r2, r3, #1
   2c480:	str	r2, [r4, #20]
   2c484:	mov	r2, #91	; 0x5b
   2c488:	strb	r2, [r3]
   2c48c:	beq	2c4cc <flatcc_json_printer_bool_enum_vector_field@@Base+0xec>
   2c490:	ldrb	r3, [r4, #25]
   2c494:	cmp	r3, #0
   2c498:	beq	2c52c <flatcc_json_printer_bool_enum_vector_field@@Base+0x14c>
   2c49c:	ldr	r3, [r4, #20]
   2c4a0:	mov	r0, r4
   2c4a4:	add	r2, r3, #1
   2c4a8:	str	r2, [r4, #20]
   2c4ac:	mov	r2, #10
   2c4b0:	strb	r2, [r3]
   2c4b4:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c4b8:	ldrb	r1, [r7, #4]
   2c4bc:	mov	r0, r4
   2c4c0:	add	r6, r7, #5
   2c4c4:	sub	r5, r5, #1
   2c4c8:	blx	r8
   2c4cc:	add	r5, r6, r5
   2c4d0:	mov	r7, #44	; 0x2c
   2c4d4:	mov	r9, #10
   2c4d8:	ldr	r3, [r4, #20]
   2c4dc:	cmp	r6, r5
   2c4e0:	add	r2, r3, #1
   2c4e4:	bne	2c538 <flatcc_json_printer_bool_enum_vector_field@@Base+0x158>
   2c4e8:	ldrb	r1, [r4, #25]
   2c4ec:	cmp	r1, #0
   2c4f0:	beq	2c514 <flatcc_json_printer_bool_enum_vector_field@@Base+0x134>
   2c4f4:	str	r2, [r4, #20]
   2c4f8:	mov	r2, #10
   2c4fc:	mov	r0, r4
   2c500:	strb	r2, [r3]
   2c504:	ldr	r3, [r4, #32]
   2c508:	sub	r3, r3, #1
   2c50c:	str	r3, [r4, #32]
   2c510:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c514:	ldr	r3, [r4, #20]
   2c518:	add	r2, r3, #1
   2c51c:	str	r2, [r4, #20]
   2c520:	mov	r2, #93	; 0x5d
   2c524:	strb	r2, [r3]
   2c528:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c52c:	mov	r0, r4
   2c530:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c534:	b	2c4b8 <flatcc_json_printer_bool_enum_vector_field@@Base+0xd8>
   2c538:	str	r2, [r4, #20]
   2c53c:	strb	r7, [r3]
   2c540:	ldrb	r3, [r4, #25]
   2c544:	cmp	r3, #0
   2c548:	beq	2c574 <flatcc_json_printer_bool_enum_vector_field@@Base+0x194>
   2c54c:	ldr	r3, [r4, #20]
   2c550:	mov	r0, r4
   2c554:	add	r2, r3, #1
   2c558:	str	r2, [r4, #20]
   2c55c:	strb	r9, [r3]
   2c560:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c564:	ldrb	r1, [r6], #1
   2c568:	mov	r0, r4
   2c56c:	blx	r8
   2c570:	b	2c4d8 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   2c574:	mov	r0, r4
   2c578:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c57c:	b	2c564 <flatcc_json_printer_bool_enum_vector_field@@Base+0x184>

0002c580 <flatcc_json_printer_struct_vector_field@@Base>:
   2c580:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c584:	mov	r5, r1
   2c588:	mov	r4, r0
   2c58c:	mov	r1, r2
   2c590:	mov	r0, r5
   2c594:	mov	r8, r3
   2c598:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2c59c:	cmp	r0, #0
   2c5a0:	ldr	r9, [sp, #44]	; 0x2c
   2c5a4:	ldr	r7, [sp, #48]	; 0x30
   2c5a8:	beq	2c71c <flatcc_json_printer_struct_vector_field@@Base+0x19c>
   2c5ac:	ldr	r3, [r5, #16]
   2c5b0:	add	r2, r3, #1
   2c5b4:	cmp	r3, #0
   2c5b8:	str	r2, [r5, #16]
   2c5bc:	beq	2c5d4 <flatcc_json_printer_struct_vector_field@@Base+0x54>
   2c5c0:	ldr	r3, [r4, #20]
   2c5c4:	add	r2, r3, #1
   2c5c8:	str	r2, [r4, #20]
   2c5cc:	mov	r2, #44	; 0x2c
   2c5d0:	strb	r2, [r3]
   2c5d4:	ldr	r2, [r0]
   2c5d8:	mov	r1, r8
   2c5dc:	add	r6, r0, r2
   2c5e0:	ldr	r5, [r0, r2]
   2c5e4:	mov	r0, r4
   2c5e8:	add	r6, r6, #4
   2c5ec:	ldr	r2, [sp, #40]	; 0x28
   2c5f0:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2c5f4:	ldr	r3, [r4, #32]
   2c5f8:	cmp	r5, #0
   2c5fc:	add	r3, r3, #1
   2c600:	str	r3, [r4, #32]
   2c604:	ldr	r3, [r4, #20]
   2c608:	add	r2, r3, #1
   2c60c:	str	r2, [r4, #20]
   2c610:	mov	r2, #91	; 0x5b
   2c614:	strb	r2, [r3]
   2c618:	beq	2c6bc <flatcc_json_printer_struct_vector_field@@Base+0x13c>
   2c61c:	ldrb	r3, [r4, #25]
   2c620:	cmp	r3, #0
   2c624:	beq	2c724 <flatcc_json_printer_struct_vector_field@@Base+0x1a4>
   2c628:	ldr	r3, [r4, #20]
   2c62c:	mov	r0, r4
   2c630:	add	r2, r3, #1
   2c634:	str	r2, [r4, #20]
   2c638:	mov	r2, #10
   2c63c:	strb	r2, [r3]
   2c640:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c644:	ldr	r3, [r4, #32]
   2c648:	mov	r1, r6
   2c64c:	mov	r0, r4
   2c650:	add	r3, r3, #1
   2c654:	str	r3, [r4, #32]
   2c658:	ldr	r3, [r4, #20]
   2c65c:	add	r2, r3, #1
   2c660:	str	r2, [r4, #20]
   2c664:	mov	r2, #123	; 0x7b
   2c668:	strb	r2, [r3]
   2c66c:	blx	r7
   2c670:	ldrb	r3, [r4, #25]
   2c674:	cmp	r3, #0
   2c678:	beq	2c6a4 <flatcc_json_printer_struct_vector_field@@Base+0x124>
   2c67c:	ldr	r3, [r4, #20]
   2c680:	mov	r0, r4
   2c684:	add	r2, r3, #1
   2c688:	str	r2, [r4, #20]
   2c68c:	mov	r2, #10
   2c690:	strb	r2, [r3]
   2c694:	ldr	r3, [r4, #32]
   2c698:	sub	r3, r3, #1
   2c69c:	str	r3, [r4, #32]
   2c6a0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c6a4:	ldr	r3, [r4, #20]
   2c6a8:	sub	r5, r5, #1
   2c6ac:	add	r2, r3, #1
   2c6b0:	str	r2, [r4, #20]
   2c6b4:	mov	r2, #125	; 0x7d
   2c6b8:	strb	r2, [r3]
   2c6bc:	mov	sl, #44	; 0x2c
   2c6c0:	mov	r8, #10
   2c6c4:	mov	fp, #123	; 0x7b
   2c6c8:	ldr	r3, [r4, #20]
   2c6cc:	sub	r5, r5, #1
   2c6d0:	cmn	r5, #1
   2c6d4:	add	r2, r3, #1
   2c6d8:	bne	2c730 <flatcc_json_printer_struct_vector_field@@Base+0x1b0>
   2c6dc:	ldrb	r1, [r4, #25]
   2c6e0:	cmp	r1, #0
   2c6e4:	beq	2c708 <flatcc_json_printer_struct_vector_field@@Base+0x188>
   2c6e8:	str	r2, [r4, #20]
   2c6ec:	mov	r2, #10
   2c6f0:	mov	r0, r4
   2c6f4:	strb	r2, [r3]
   2c6f8:	ldr	r3, [r4, #32]
   2c6fc:	sub	r3, r3, #1
   2c700:	str	r3, [r4, #32]
   2c704:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c708:	ldr	r3, [r4, #20]
   2c70c:	add	r2, r3, #1
   2c710:	str	r2, [r4, #20]
   2c714:	mov	r2, #93	; 0x5d
   2c718:	strb	r2, [r3]
   2c71c:	add	sp, sp, #4
   2c720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c724:	mov	r0, r4
   2c728:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c72c:	b	2c644 <flatcc_json_printer_struct_vector_field@@Base+0xc4>
   2c730:	str	r2, [r4, #20]
   2c734:	add	r6, r6, r9
   2c738:	strb	sl, [r3]
   2c73c:	ldrb	r3, [r4, #25]
   2c740:	cmp	r3, #0
   2c744:	beq	2c7d0 <flatcc_json_printer_struct_vector_field@@Base+0x250>
   2c748:	ldr	r3, [r4, #20]
   2c74c:	mov	r0, r4
   2c750:	add	r2, r3, #1
   2c754:	str	r2, [r4, #20]
   2c758:	strb	r8, [r3]
   2c75c:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c760:	ldr	r3, [r4, #32]
   2c764:	mov	r1, r6
   2c768:	mov	r0, r4
   2c76c:	add	r3, r3, #1
   2c770:	str	r3, [r4, #32]
   2c774:	ldr	r3, [r4, #20]
   2c778:	add	r2, r3, #1
   2c77c:	str	r2, [r4, #20]
   2c780:	strb	fp, [r3]
   2c784:	blx	r7
   2c788:	ldrb	r3, [r4, #25]
   2c78c:	cmp	r3, #0
   2c790:	beq	2c7b8 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   2c794:	ldr	r3, [r4, #20]
   2c798:	mov	r0, r4
   2c79c:	add	r2, r3, #1
   2c7a0:	str	r2, [r4, #20]
   2c7a4:	strb	r8, [r3]
   2c7a8:	ldr	r3, [r4, #32]
   2c7ac:	sub	r3, r3, #1
   2c7b0:	str	r3, [r4, #32]
   2c7b4:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c7b8:	ldr	r3, [r4, #20]
   2c7bc:	add	r2, r3, #1
   2c7c0:	str	r2, [r4, #20]
   2c7c4:	mov	r2, #125	; 0x7d
   2c7c8:	strb	r2, [r3]
   2c7cc:	b	2c6c8 <flatcc_json_printer_struct_vector_field@@Base+0x148>
   2c7d0:	mov	r0, r4
   2c7d4:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c7d8:	b	2c760 <flatcc_json_printer_struct_vector_field@@Base+0x1e0>

0002c7dc <flatcc_json_printer_string_vector_field@@Base>:
   2c7dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c7e0:	mov	r5, r1
   2c7e4:	mov	r4, r0
   2c7e8:	mov	r1, r2
   2c7ec:	mov	r0, r5
   2c7f0:	mov	r7, r3
   2c7f4:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2c7f8:	cmp	r0, #0
   2c7fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c800:	ldr	r2, [r5, #16]
   2c804:	add	r3, r2, #1
   2c808:	cmp	r2, #0
   2c80c:	str	r3, [r5, #16]
   2c810:	beq	2c828 <flatcc_json_printer_string_vector_field@@Base+0x4c>
   2c814:	ldr	r2, [r4, #20]
   2c818:	add	r3, r2, #1
   2c81c:	str	r3, [r4, #20]
   2c820:	mov	r3, #44	; 0x2c
   2c824:	strb	r3, [r2]
   2c828:	ldr	r2, [r0]
   2c82c:	mov	r1, r7
   2c830:	add	r5, r0, r2
   2c834:	ldr	r6, [r0, r2]
   2c838:	mov	r0, r4
   2c83c:	ldr	r2, [sp, #32]
   2c840:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2c844:	ldr	r3, [r4, #32]
   2c848:	cmp	r6, #0
   2c84c:	add	r3, r3, #1
   2c850:	str	r3, [r4, #32]
   2c854:	ldr	r3, [r4, #20]
   2c858:	add	r2, r3, #1
   2c85c:	str	r2, [r4, #20]
   2c860:	mov	r2, #91	; 0x5b
   2c864:	strb	r2, [r3]
   2c868:	beq	2c8ac <flatcc_json_printer_string_vector_field@@Base+0xd0>
   2c86c:	ldrb	r3, [r4, #25]
   2c870:	cmp	r3, #0
   2c874:	beq	2c910 <flatcc_json_printer_string_vector_field@@Base+0x134>
   2c878:	ldr	r3, [r4, #20]
   2c87c:	mov	r0, r4
   2c880:	add	r2, r3, #1
   2c884:	str	r2, [r4, #20]
   2c888:	mov	r2, #10
   2c88c:	strb	r2, [r3]
   2c890:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c894:	ldr	r1, [r5, #4]
   2c898:	mov	r0, r4
   2c89c:	sub	r6, r6, #1
   2c8a0:	add	r1, r1, #4
   2c8a4:	add	r1, r5, r1
   2c8a8:	bl	27890 <flatcc_json_parser_struct_as_root@@Base+0x1068>
   2c8ac:	add	r5, r5, #8
   2c8b0:	mov	r8, #44	; 0x2c
   2c8b4:	mov	r9, #10
   2c8b8:	ldr	r3, [r4, #20]
   2c8bc:	sub	r6, r6, #1
   2c8c0:	cmn	r6, #1
   2c8c4:	add	r2, r3, #1
   2c8c8:	bne	2c91c <flatcc_json_printer_string_vector_field@@Base+0x140>
   2c8cc:	ldrb	r1, [r4, #25]
   2c8d0:	cmp	r1, #0
   2c8d4:	beq	2c8f8 <flatcc_json_printer_string_vector_field@@Base+0x11c>
   2c8d8:	str	r2, [r4, #20]
   2c8dc:	mov	r2, #10
   2c8e0:	mov	r0, r4
   2c8e4:	strb	r2, [r3]
   2c8e8:	ldr	r3, [r4, #32]
   2c8ec:	sub	r3, r3, #1
   2c8f0:	str	r3, [r4, #32]
   2c8f4:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c8f8:	ldr	r3, [r4, #20]
   2c8fc:	add	r2, r3, #1
   2c900:	str	r2, [r4, #20]
   2c904:	mov	r2, #93	; 0x5d
   2c908:	strb	r2, [r3]
   2c90c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c910:	mov	r0, r4
   2c914:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c918:	b	2c894 <flatcc_json_printer_string_vector_field@@Base+0xb8>
   2c91c:	str	r2, [r4, #20]
   2c920:	mov	r7, r5
   2c924:	strb	r8, [r3]
   2c928:	ldrb	r3, [r4, #25]
   2c92c:	cmp	r3, #0
   2c930:	beq	2c964 <flatcc_json_printer_string_vector_field@@Base+0x188>
   2c934:	ldr	r3, [r4, #20]
   2c938:	mov	r0, r4
   2c93c:	add	r2, r3, #1
   2c940:	str	r2, [r4, #20]
   2c944:	strb	r9, [r3]
   2c948:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2c94c:	ldr	r1, [r7]
   2c950:	mov	r0, r4
   2c954:	add	r5, r5, #4
   2c958:	add	r1, r7, r1
   2c95c:	bl	27890 <flatcc_json_parser_struct_as_root@@Base+0x1068>
   2c960:	b	2c8b8 <flatcc_json_printer_string_vector_field@@Base+0xdc>
   2c964:	mov	r0, r4
   2c968:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2c96c:	b	2c94c <flatcc_json_printer_string_vector_field@@Base+0x170>

0002c970 <flatcc_json_printer_table_vector_field@@Base>:
   2c970:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c974:	mov	r6, r1
   2c978:	mov	r4, r0
   2c97c:	mov	r1, r2
   2c980:	mov	r0, r6
   2c984:	mov	r9, r3
   2c988:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2c98c:	cmp	r0, #0
   2c990:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c994:	ldr	r3, [r6, #16]
   2c998:	add	r2, r3, #1
   2c99c:	cmp	r3, #0
   2c9a0:	str	r2, [r6, #16]
   2c9a4:	beq	2c9bc <flatcc_json_printer_table_vector_field@@Base+0x4c>
   2c9a8:	ldr	r2, [r4, #20]
   2c9ac:	add	r3, r2, #1
   2c9b0:	str	r3, [r4, #20]
   2c9b4:	mov	r3, #44	; 0x2c
   2c9b8:	strb	r3, [r2]
   2c9bc:	ldr	r2, [r0]
   2c9c0:	mov	r1, r9
   2c9c4:	add	r8, r0, r2
   2c9c8:	ldr	r5, [r0, r2]
   2c9cc:	mov	r0, r4
   2c9d0:	add	r7, r8, #4
   2c9d4:	ldr	r2, [sp, #32]
   2c9d8:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2c9dc:	ldr	r3, [r4, #32]
   2c9e0:	cmp	r5, #0
   2c9e4:	add	r3, r3, #1
   2c9e8:	str	r3, [r4, #32]
   2c9ec:	ldr	r3, [r4, #20]
   2c9f0:	add	r2, r3, #1
   2c9f4:	str	r2, [r4, #20]
   2c9f8:	mov	r2, #91	; 0x5b
   2c9fc:	strb	r2, [r3]
   2ca00:	beq	2ca20 <flatcc_json_printer_table_vector_field@@Base+0xb0>
   2ca04:	ldr	r1, [r8, #4]
   2ca08:	mov	r0, r4
   2ca0c:	sub	r5, r5, #1
   2ca10:	ldr	r2, [r6, #12]
   2ca14:	ldr	r3, [sp, #36]	; 0x24
   2ca18:	add	r1, r7, r1
   2ca1c:	bl	27d78 <flatcc_json_parser_struct_as_root@@Base+0x1550>
   2ca20:	mov	r8, #44	; 0x2c
   2ca24:	ldr	r3, [r4, #20]
   2ca28:	sub	r5, r5, #1
   2ca2c:	cmn	r5, #1
   2ca30:	add	r2, r3, #1
   2ca34:	bne	2ca7c <flatcc_json_printer_table_vector_field@@Base+0x10c>
   2ca38:	ldrb	r1, [r4, #25]
   2ca3c:	cmp	r1, #0
   2ca40:	beq	2ca64 <flatcc_json_printer_table_vector_field@@Base+0xf4>
   2ca44:	str	r2, [r4, #20]
   2ca48:	mov	r2, #10
   2ca4c:	mov	r0, r4
   2ca50:	strb	r2, [r3]
   2ca54:	ldr	r3, [r4, #32]
   2ca58:	sub	r3, r3, #1
   2ca5c:	str	r3, [r4, #32]
   2ca60:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2ca64:	ldr	r3, [r4, #20]
   2ca68:	add	r2, r3, #1
   2ca6c:	str	r2, [r4, #20]
   2ca70:	mov	r2, #93	; 0x5d
   2ca74:	strb	r2, [r3]
   2ca78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ca7c:	str	r2, [r4, #20]
   2ca80:	mov	r0, r4
   2ca84:	strb	r8, [r3]
   2ca88:	ldr	r1, [r7, #4]!
   2ca8c:	ldr	r2, [r6, #12]
   2ca90:	ldr	r3, [sp, #36]	; 0x24
   2ca94:	add	r1, r7, r1
   2ca98:	bl	27d78 <flatcc_json_parser_struct_as_root@@Base+0x1550>
   2ca9c:	b	2ca24 <flatcc_json_printer_table_vector_field@@Base+0xb4>

0002caa0 <flatcc_json_printer_union_vector_field@@Base>:
   2caa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2caa4:	mov	r7, r1
   2caa8:	sub	r6, r2, #1
   2caac:	sub	sp, sp, #132	; 0x84
   2cab0:	mov	r1, r6
   2cab4:	mov	r4, r0
   2cab8:	mov	r0, r7
   2cabc:	mov	fp, r3
   2cac0:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2cac4:	mov	r5, r0
   2cac8:	mov	r1, r2
   2cacc:	mov	r0, r7
   2cad0:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2cad4:	ldr	sl, [sp, #168]	; 0xa8
   2cad8:	ldr	r3, [r7, #12]
   2cadc:	ldr	r9, [sp, #176]	; 0xb0
   2cae0:	cmp	sl, #100	; 0x64
   2cae4:	str	r3, [sp, #12]
   2cae8:	ble	2cb10 <flatcc_json_printer_union_vector_field@@Base+0x70>
   2caec:	ldr	r3, [r4, #36]	; 0x24
   2caf0:	movw	r2, #843	; 0x34b
   2caf4:	ldr	r1, [pc, #584]	; 2cd44 <flatcc_json_printer_union_vector_field@@Base+0x2a4>
   2caf8:	ldr	r0, [pc, #584]	; 2cd48 <flatcc_json_printer_union_vector_field@@Base+0x2a8>
   2cafc:	cmp	r3, #0
   2cb00:	moveq	r3, #1
   2cb04:	streq	r3, [r4, #36]	; 0x24
   2cb08:	ldr	r3, [pc, #572]	; 2cd4c <flatcc_json_printer_union_vector_field@@Base+0x2ac>
   2cb0c:	bl	14620 <__assert_fail@plt>
   2cb10:	add	r3, sp, #20
   2cb14:	mov	r8, r0
   2cb18:	mov	r2, sl
   2cb1c:	mov	r1, fp
   2cb20:	mov	r0, r3
   2cb24:	bl	14548 <memcpy@plt>
   2cb28:	ldr	r2, [pc, #544]	; 2cd50 <flatcc_json_printer_union_vector_field@@Base+0x2b0>
   2cb2c:	mov	r3, r0
   2cb30:	add	r1, r0, sl
   2cb34:	cmp	r8, #0
   2cb38:	cmpne	r5, #0
   2cb3c:	ldr	r0, [r2]
   2cb40:	ldrb	r2, [r2, #4]
   2cb44:	str	r0, [r3, sl]
   2cb48:	strb	r2, [r1, #4]
   2cb4c:	beq	2cc74 <flatcc_json_printer_union_vector_field@@Base+0x1d4>
   2cb50:	ldr	r2, [sp, #172]	; 0xac
   2cb54:	mov	r1, r7
   2cb58:	mov	r0, r4
   2cb5c:	str	r2, [sp, #4]
   2cb60:	add	r2, sl, #5
   2cb64:	str	r2, [sp]
   2cb68:	mov	r2, r6
   2cb6c:	bl	2b6dc <flatcc_json_printer_uint8_enum_vector_field@@Base>
   2cb70:	ldr	r3, [r7, #16]
   2cb74:	add	r2, r3, #1
   2cb78:	cmp	r3, #0
   2cb7c:	str	r2, [r7, #16]
   2cb80:	beq	2cb98 <flatcc_json_printer_union_vector_field@@Base+0xf8>
   2cb84:	ldr	r3, [r4, #20]
   2cb88:	add	r2, r3, #1
   2cb8c:	str	r2, [r4, #20]
   2cb90:	mov	r2, #44	; 0x2c
   2cb94:	strb	r2, [r3]
   2cb98:	ldr	r3, [r8]
   2cb9c:	mov	r2, sl
   2cba0:	mov	r1, fp
   2cba4:	mov	r0, r4
   2cba8:	ldr	r6, [r5]
   2cbac:	add	r7, r8, r3
   2cbb0:	add	r7, r7, #4
   2cbb4:	add	r6, r5, r6
   2cbb8:	ldr	r5, [r8, r3]
   2cbbc:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2cbc0:	ldr	r3, [r4, #32]
   2cbc4:	add	r8, r6, #4
   2cbc8:	cmp	r5, #0
   2cbcc:	add	r3, r3, #1
   2cbd0:	str	r3, [r4, #32]
   2cbd4:	ldr	r3, [r4, #20]
   2cbd8:	add	r2, r3, #1
   2cbdc:	str	r2, [r4, #20]
   2cbe0:	mov	r2, #91	; 0x5b
   2cbe4:	strb	r2, [r3]
   2cbe8:	beq	2cc10 <flatcc_json_printer_union_vector_field@@Base+0x170>
   2cbec:	ldrb	r3, [r6, #4]
   2cbf0:	cmp	r3, #0
   2cbf4:	beq	2cc7c <flatcc_json_printer_union_vector_field@@Base+0x1dc>
   2cbf8:	add	r1, sp, #8
   2cbfc:	mov	r0, r4
   2cc00:	str	r7, [sp, #8]
   2cc04:	strb	r3, [sp, #16]
   2cc08:	blx	r9
   2cc0c:	sub	r5, r5, #1
   2cc10:	add	r5, r5, #4
   2cc14:	mov	sl, #110	; 0x6e
   2cc18:	add	r5, r6, r5
   2cc1c:	mov	fp, #117	; 0x75
   2cc20:	mov	r6, #44	; 0x2c
   2cc24:	ldr	r3, [r4, #20]
   2cc28:	cmp	r8, r5
   2cc2c:	add	r2, r3, #1
   2cc30:	bne	2cccc <flatcc_json_printer_union_vector_field@@Base+0x22c>
   2cc34:	ldrb	r1, [r4, #25]
   2cc38:	cmp	r1, #0
   2cc3c:	beq	2cc60 <flatcc_json_printer_union_vector_field@@Base+0x1c0>
   2cc40:	str	r2, [r4, #20]
   2cc44:	mov	r2, #10
   2cc48:	mov	r0, r4
   2cc4c:	strb	r2, [r3]
   2cc50:	ldr	r3, [r4, #32]
   2cc54:	sub	r3, r3, #1
   2cc58:	str	r3, [r4, #32]
   2cc5c:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2cc60:	ldr	r3, [r4, #20]
   2cc64:	add	r2, r3, #1
   2cc68:	str	r2, [r4, #20]
   2cc6c:	mov	r2, #93	; 0x5d
   2cc70:	strb	r2, [r3]
   2cc74:	add	sp, sp, #132	; 0x84
   2cc78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc7c:	ldr	r3, [r4, #20]
   2cc80:	add	r2, r3, #1
   2cc84:	str	r2, [r4, #20]
   2cc88:	mov	r2, #110	; 0x6e
   2cc8c:	strb	r2, [r3]
   2cc90:	ldr	r3, [r4, #20]
   2cc94:	add	r2, r3, #1
   2cc98:	str	r2, [r4, #20]
   2cc9c:	mov	r2, #117	; 0x75
   2cca0:	strb	r2, [r3]
   2cca4:	ldr	r3, [r4, #20]
   2cca8:	add	r2, r3, #1
   2ccac:	str	r2, [r4, #20]
   2ccb0:	mov	r2, #108	; 0x6c
   2ccb4:	strb	r2, [r3]
   2ccb8:	ldr	r3, [r4, #20]
   2ccbc:	add	r1, r3, #1
   2ccc0:	str	r1, [r4, #20]
   2ccc4:	strb	r2, [r3]
   2ccc8:	b	2cc0c <flatcc_json_printer_union_vector_field@@Base+0x16c>
   2cccc:	ldrb	r1, [r8, #1]!
   2ccd0:	add	r7, r7, #4
   2ccd4:	str	r2, [r4, #20]
   2ccd8:	strb	r6, [r3]
   2ccdc:	cmp	r1, #0
   2cce0:	beq	2ccfc <flatcc_json_printer_union_vector_field@@Base+0x25c>
   2cce4:	mov	r0, r4
   2cce8:	str	r7, [sp, #8]
   2ccec:	strb	r1, [sp, #16]
   2ccf0:	add	r1, sp, #8
   2ccf4:	blx	r9
   2ccf8:	b	2cc24 <flatcc_json_printer_union_vector_field@@Base+0x184>
   2ccfc:	ldr	r3, [r4, #20]
   2cd00:	add	r2, r3, #1
   2cd04:	str	r2, [r4, #20]
   2cd08:	strb	sl, [r3]
   2cd0c:	ldr	r3, [r4, #20]
   2cd10:	add	r2, r3, #1
   2cd14:	str	r2, [r4, #20]
   2cd18:	strb	fp, [r3]
   2cd1c:	ldr	r3, [r4, #20]
   2cd20:	add	r2, r3, #1
   2cd24:	str	r2, [r4, #20]
   2cd28:	mov	r2, #108	; 0x6c
   2cd2c:	strb	r2, [r3]
   2cd30:	ldr	r3, [r4, #20]
   2cd34:	add	r1, r3, #1
   2cd38:	str	r1, [r4, #20]
   2cd3c:	strb	r2, [r3]
   2cd40:	b	2cc24 <flatcc_json_printer_union_vector_field@@Base+0x184>
   2cd44:	ldrdeq	r3, [r3], -r5
   2cd48:	andeq	r3, r3, r6, ror r4
   2cd4c:	andeq	r3, r3, r5, ror r2
   2cd50:	muleq	r3, r1, r4

0002cd54 <flatcc_json_printer_table_field@@Base>:
   2cd54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2cd58:	mov	r5, r1
   2cd5c:	mov	r4, r0
   2cd60:	mov	r1, r2
   2cd64:	mov	r0, r5
   2cd68:	mov	r8, r3
   2cd6c:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2cd70:	subs	r6, r0, #0
   2cd74:	ldr	r9, [sp, #32]
   2cd78:	ldr	r7, [sp, #36]	; 0x24
   2cd7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cd80:	ldr	r2, [r5, #16]
   2cd84:	add	r3, r2, #1
   2cd88:	cmp	r2, #0
   2cd8c:	str	r3, [r5, #16]
   2cd90:	beq	2cda8 <flatcc_json_printer_table_field@@Base+0x54>
   2cd94:	ldr	r2, [r4, #20]
   2cd98:	add	r3, r2, #1
   2cd9c:	str	r3, [r4, #20]
   2cda0:	mov	r3, #44	; 0x2c
   2cda4:	strb	r3, [r2]
   2cda8:	mov	r2, r9
   2cdac:	mov	r1, r8
   2cdb0:	mov	r0, r4
   2cdb4:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2cdb8:	ldr	r1, [r6]
   2cdbc:	mov	r3, r7
   2cdc0:	mov	r0, r4
   2cdc4:	ldr	r2, [r5, #12]
   2cdc8:	add	r1, r6, r1
   2cdcc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2cdd0:	b	27d78 <flatcc_json_parser_struct_as_root@@Base+0x1550>

0002cdd4 <flatcc_json_printer_union_field@@Base>:
   2cdd4:	push	{r4, r5, r6, r7, r8, r9, lr}
   2cdd8:	mov	r5, r1
   2cddc:	sub	sp, sp, #20
   2cde0:	sub	r1, r2, #1
   2cde4:	mov	r4, r0
   2cde8:	mov	r0, r5
   2cdec:	mov	r8, r3
   2cdf0:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2cdf4:	mov	r7, r0
   2cdf8:	mov	r1, r2
   2cdfc:	mov	r0, r5
   2ce00:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2ce04:	cmp	r7, #0
   2ce08:	cmpne	r0, #0
   2ce0c:	ldr	r6, [sp, #48]	; 0x30
   2ce10:	beq	2cf80 <flatcc_json_printer_union_field@@Base+0x1ac>
   2ce14:	ldr	r3, [r5, #16]
   2ce18:	mov	r9, r0
   2ce1c:	ldrb	r7, [r7]
   2ce20:	add	r2, r3, #1
   2ce24:	cmp	r3, #0
   2ce28:	str	r2, [r5, #16]
   2ce2c:	beq	2ce44 <flatcc_json_printer_union_field@@Base+0x70>
   2ce30:	ldr	r3, [r4, #20]
   2ce34:	add	r2, r3, #1
   2ce38:	str	r2, [r4, #20]
   2ce3c:	mov	r2, #44	; 0x2c
   2ce40:	strb	r2, [r3]
   2ce44:	ldrb	r3, [r4, #25]
   2ce48:	cmp	r3, #0
   2ce4c:	beq	2cf88 <flatcc_json_printer_union_field@@Base+0x1b4>
   2ce50:	ldr	r3, [r4, #20]
   2ce54:	mov	r0, r4
   2ce58:	add	r2, r3, #1
   2ce5c:	str	r2, [r4, #20]
   2ce60:	mov	r2, #10
   2ce64:	strb	r2, [r3]
   2ce68:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2ce6c:	ldr	r3, [r4, #20]
   2ce70:	mov	r2, #34	; 0x22
   2ce74:	mov	r1, r8
   2ce78:	strb	r2, [r3]
   2ce7c:	ldrb	r3, [r4, #26]
   2ce80:	ldr	r2, [r4, #16]
   2ce84:	ldr	r0, [r4, #20]
   2ce88:	cmp	r3, #0
   2ce8c:	addeq	r0, r0, #1
   2ce90:	add	r3, r0, r6
   2ce94:	cmp	r2, r3
   2ce98:	mov	r2, r6
   2ce9c:	str	r0, [r4, #20]
   2cea0:	bls	2cf94 <flatcc_json_printer_union_field@@Base+0x1c0>
   2cea4:	bl	14548 <memcpy@plt>
   2cea8:	ldr	r3, [r4, #20]
   2ceac:	add	r3, r3, r6
   2ceb0:	str	r3, [r4, #20]
   2ceb4:	mov	r2, #5
   2ceb8:	ldr	r1, [pc, #244]	; 2cfb4 <flatcc_json_printer_union_field@@Base+0x1e0>
   2cebc:	mov	r0, r4
   2cec0:	bl	27644 <flatcc_json_parser_struct_as_root@@Base+0xe1c>
   2cec4:	ldr	r3, [r4, #20]
   2cec8:	mov	r2, #34	; 0x22
   2cecc:	strb	r2, [r3]
   2ced0:	ldrb	r3, [r4, #26]
   2ced4:	ldr	r1, [r4, #20]
   2ced8:	clz	r3, r3
   2cedc:	lsr	r3, r3, #5
   2cee0:	add	r2, r1, r3
   2cee4:	add	r2, r2, #1
   2cee8:	str	r2, [r4, #20]
   2ceec:	mov	r2, #58	; 0x3a
   2cef0:	strb	r2, [r1, r3]
   2cef4:	mov	r2, #32
   2cef8:	ldr	r3, [r4, #20]
   2cefc:	strb	r2, [r3]
   2cf00:	ldrb	r3, [r4, #25]
   2cf04:	ldr	r1, [r4, #20]
   2cf08:	cmp	r3, #0
   2cf0c:	addne	r1, r1, #1
   2cf10:	ldrb	r3, [r4, #27]
   2cf14:	str	r1, [r4, #20]
   2cf18:	cmp	r3, #0
   2cf1c:	beq	2cfa0 <flatcc_json_printer_union_field@@Base+0x1cc>
   2cf20:	mov	r0, r7
   2cf24:	bl	27b98 <flatcc_json_parser_struct_as_root@@Base+0x1370>
   2cf28:	ldr	r3, [r4, #20]
   2cf2c:	add	r0, r3, r0
   2cf30:	str	r0, [r4, #20]
   2cf34:	cmp	r7, #0
   2cf38:	beq	2cf80 <flatcc_json_printer_union_field@@Base+0x1ac>
   2cf3c:	ldr	r3, [r4, #20]
   2cf40:	mov	r1, r8
   2cf44:	mov	r0, r4
   2cf48:	add	r2, r3, #1
   2cf4c:	str	r2, [r4, #20]
   2cf50:	mov	r2, #44	; 0x2c
   2cf54:	strb	r2, [r3]
   2cf58:	mov	r2, r6
   2cf5c:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2cf60:	ldr	r3, [r5, #12]
   2cf64:	add	r1, sp, #4
   2cf68:	mov	r0, r4
   2cf6c:	str	r9, [sp, #4]
   2cf70:	str	r3, [sp, #8]
   2cf74:	ldr	r3, [sp, #56]	; 0x38
   2cf78:	strb	r7, [sp, #12]
   2cf7c:	blx	r3
   2cf80:	add	sp, sp, #20
   2cf84:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2cf88:	mov	r0, r4
   2cf8c:	bl	27af8 <flatcc_json_parser_struct_as_root@@Base+0x12d0>
   2cf90:	b	2ce6c <flatcc_json_printer_union_field@@Base+0x98>
   2cf94:	mov	r0, r4
   2cf98:	bl	27644 <flatcc_json_parser_struct_as_root@@Base+0xe1c>
   2cf9c:	b	2ceb4 <flatcc_json_printer_union_field@@Base+0xe0>
   2cfa0:	mov	r1, r7
   2cfa4:	mov	r0, r4
   2cfa8:	ldr	r3, [sp, #52]	; 0x34
   2cfac:	blx	r3
   2cfb0:	b	2cf34 <flatcc_json_printer_union_field@@Base+0x160>
   2cfb4:	muleq	r3, r1, r4

0002cfb8 <flatcc_json_printer_union_table@@Base>:
   2cfb8:	ldr	ip, [r1]
   2cfbc:	mov	r3, r2
   2cfc0:	push	{lr}		; (str lr, [sp, #-4]!)
   2cfc4:	ldr	r2, [r1, #4]
   2cfc8:	ldr	lr, [ip]
   2cfcc:	add	r1, ip, lr
   2cfd0:	pop	{lr}		; (ldr lr, [sp], #4)
   2cfd4:	b	27d78 <flatcc_json_parser_struct_as_root@@Base+0x1550>

0002cfd8 <flatcc_json_printer_union_struct@@Base>:
   2cfd8:	ldr	r3, [r0, #32]
   2cfdc:	push	{r4, lr}
   2cfe0:	mov	r4, r0
   2cfe4:	add	r3, r3, #1
   2cfe8:	str	r3, [r0, #32]
   2cfec:	ldr	r3, [r0, #20]
   2cff0:	add	ip, r3, #1
   2cff4:	str	ip, [r0, #20]
   2cff8:	mov	ip, #123	; 0x7b
   2cffc:	strb	ip, [r3]
   2d000:	ldr	r3, [r1]
   2d004:	ldr	r1, [r3]
   2d008:	add	r1, r3, r1
   2d00c:	blx	r2
   2d010:	ldrb	r3, [r4, #25]
   2d014:	cmp	r3, #0
   2d018:	beq	2d044 <flatcc_json_printer_union_struct@@Base+0x6c>
   2d01c:	ldr	r3, [r4, #20]
   2d020:	mov	r0, r4
   2d024:	add	r2, r3, #1
   2d028:	str	r2, [r4, #20]
   2d02c:	mov	r2, #10
   2d030:	strb	r2, [r3]
   2d034:	ldr	r3, [r4, #32]
   2d038:	sub	r3, r3, #1
   2d03c:	str	r3, [r4, #32]
   2d040:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2d044:	ldr	r3, [r4, #20]
   2d048:	add	r2, r3, #1
   2d04c:	str	r2, [r4, #20]
   2d050:	mov	r2, #125	; 0x7d
   2d054:	strb	r2, [r3]
   2d058:	pop	{r4, pc}

0002d05c <flatcc_json_printer_union_string@@Base>:
   2d05c:	ldr	r3, [r1]
   2d060:	ldr	r1, [r3]
   2d064:	add	r1, r3, r1
   2d068:	b	27890 <flatcc_json_parser_struct_as_root@@Base+0x1068>

0002d06c <flatcc_json_printer_embedded_struct_field@@Base>:
   2d06c:	cmp	r1, #0
   2d070:	push	{r4, r5, r6, lr}
   2d074:	mov	r4, r0
   2d078:	mov	r6, r2
   2d07c:	mov	r5, r3
   2d080:	beq	2d098 <flatcc_json_printer_embedded_struct_field@@Base+0x2c>
   2d084:	ldr	r2, [r0, #20]
   2d088:	add	r3, r2, #1
   2d08c:	str	r3, [r0, #20]
   2d090:	mov	r3, #44	; 0x2c
   2d094:	strb	r3, [r2]
   2d098:	mov	r0, r4
   2d09c:	ldr	r1, [sp, #16]
   2d0a0:	ldr	r2, [sp, #20]
   2d0a4:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2d0a8:	ldr	r2, [r4, #32]
   2d0ac:	add	r1, r6, r5
   2d0b0:	mov	r0, r4
   2d0b4:	add	r2, r2, #1
   2d0b8:	str	r2, [r4, #32]
   2d0bc:	ldr	r2, [r4, #20]
   2d0c0:	add	r3, r2, #1
   2d0c4:	str	r3, [r4, #20]
   2d0c8:	mov	r3, #123	; 0x7b
   2d0cc:	strb	r3, [r2]
   2d0d0:	ldr	r3, [sp, #24]
   2d0d4:	blx	r3
   2d0d8:	ldrb	r3, [r4, #25]
   2d0dc:	cmp	r3, #0
   2d0e0:	beq	2d10c <flatcc_json_printer_embedded_struct_field@@Base+0xa0>
   2d0e4:	ldr	r3, [r4, #20]
   2d0e8:	mov	r0, r4
   2d0ec:	add	r2, r3, #1
   2d0f0:	str	r2, [r4, #20]
   2d0f4:	mov	r2, #10
   2d0f8:	strb	r2, [r3]
   2d0fc:	ldr	r3, [r4, #32]
   2d100:	sub	r3, r3, #1
   2d104:	str	r3, [r4, #32]
   2d108:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2d10c:	ldr	r3, [r4, #20]
   2d110:	add	r2, r3, #1
   2d114:	str	r2, [r4, #20]
   2d118:	mov	r2, #125	; 0x7d
   2d11c:	strb	r2, [r3]
   2d120:	pop	{r4, r5, r6, pc}

0002d124 <flatcc_json_printer_struct_field@@Base>:
   2d124:	push	{r4, r5, r6, r7, r8, lr}
   2d128:	mov	r5, r1
   2d12c:	mov	r4, r0
   2d130:	mov	r1, r2
   2d134:	mov	r0, r5
   2d138:	mov	r7, r3
   2d13c:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2d140:	subs	r6, r0, #0
   2d144:	popeq	{r4, r5, r6, r7, r8, pc}
   2d148:	ldr	r2, [r5, #16]
   2d14c:	add	r3, r2, #1
   2d150:	cmp	r2, #0
   2d154:	str	r3, [r5, #16]
   2d158:	beq	2d170 <flatcc_json_printer_struct_field@@Base+0x4c>
   2d15c:	ldr	r2, [r4, #20]
   2d160:	add	r3, r2, #1
   2d164:	str	r3, [r4, #20]
   2d168:	mov	r3, #44	; 0x2c
   2d16c:	strb	r3, [r2]
   2d170:	mov	r1, r7
   2d174:	mov	r0, r4
   2d178:	ldr	r2, [sp, #24]
   2d17c:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2d180:	ldr	r3, [r4, #32]
   2d184:	mov	r1, r6
   2d188:	mov	r0, r4
   2d18c:	add	r3, r3, #1
   2d190:	str	r3, [r4, #32]
   2d194:	ldr	r3, [r4, #20]
   2d198:	add	r2, r3, #1
   2d19c:	str	r2, [r4, #20]
   2d1a0:	mov	r2, #123	; 0x7b
   2d1a4:	strb	r2, [r3]
   2d1a8:	ldr	r3, [sp, #28]
   2d1ac:	blx	r3
   2d1b0:	ldrb	r3, [r4, #25]
   2d1b4:	cmp	r3, #0
   2d1b8:	beq	2d1e4 <flatcc_json_printer_struct_field@@Base+0xc0>
   2d1bc:	ldr	r3, [r4, #20]
   2d1c0:	mov	r0, r4
   2d1c4:	add	r2, r3, #1
   2d1c8:	str	r2, [r4, #20]
   2d1cc:	mov	r2, #10
   2d1d0:	strb	r2, [r3]
   2d1d4:	ldr	r3, [r4, #32]
   2d1d8:	sub	r3, r3, #1
   2d1dc:	str	r3, [r4, #32]
   2d1e0:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2d1e4:	ldr	r3, [r4, #20]
   2d1e8:	add	r2, r3, #1
   2d1ec:	str	r2, [r4, #20]
   2d1f0:	mov	r2, #125	; 0x7d
   2d1f4:	strb	r2, [r3]
   2d1f8:	pop	{r4, r5, r6, r7, r8, pc}

0002d1fc <flatcc_json_printer_struct_as_root@@Base>:
   2d1fc:	push	{r4, r5, r6, lr}
   2d200:	mov	r4, r0
   2d204:	mov	r5, r1
   2d208:	bl	27e3c <flatcc_json_parser_struct_as_root@@Base+0x1614>
   2d20c:	cmp	r0, #0
   2d210:	bne	2d21c <flatcc_json_printer_struct_as_root@@Base+0x20>
   2d214:	mvn	r0, #0
   2d218:	pop	{r4, r5, r6, pc}
   2d21c:	ldr	r3, [r4, #32]
   2d220:	mov	r0, r4
   2d224:	add	r3, r3, #1
   2d228:	str	r3, [r4, #32]
   2d22c:	ldr	r3, [r4, #20]
   2d230:	add	r2, r3, #1
   2d234:	str	r2, [r4, #20]
   2d238:	mov	r2, #123	; 0x7b
   2d23c:	strb	r2, [r3]
   2d240:	ldr	r1, [r5]
   2d244:	ldr	r3, [sp, #16]
   2d248:	add	r1, r5, r1
   2d24c:	blx	r3
   2d250:	ldrb	r3, [r4, #25]
   2d254:	cmp	r3, #0
   2d258:	beq	2d284 <flatcc_json_printer_struct_as_root@@Base+0x88>
   2d25c:	ldr	r3, [r4, #20]
   2d260:	mov	r0, r4
   2d264:	add	r2, r3, #1
   2d268:	str	r2, [r4, #20]
   2d26c:	mov	r2, #10
   2d270:	strb	r2, [r3]
   2d274:	ldr	r3, [r4, #32]
   2d278:	sub	r3, r3, #1
   2d27c:	str	r3, [r4, #32]
   2d280:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2d284:	ldr	r3, [r4, #20]
   2d288:	add	r2, r3, #1
   2d28c:	str	r2, [r4, #20]
   2d290:	mov	r2, #125	; 0x7d
   2d294:	strb	r2, [r3]
   2d298:	ldrb	r3, [r4, #25]
   2d29c:	cmp	r3, #0
   2d2a0:	beq	2d2c4 <flatcc_json_printer_struct_as_root@@Base+0xc8>
   2d2a4:	ldr	r3, [r4, #32]
   2d2a8:	cmp	r3, #0
   2d2ac:	bne	2d2c4 <flatcc_json_printer_struct_as_root@@Base+0xc8>
   2d2b0:	ldr	r3, [r4, #20]
   2d2b4:	add	r2, r3, #1
   2d2b8:	str	r2, [r4, #20]
   2d2bc:	mov	r2, #10
   2d2c0:	strb	r2, [r3]
   2d2c4:	mov	r1, #1
   2d2c8:	mov	r0, r4
   2d2cc:	ldr	r3, [r4, #44]	; 0x2c
   2d2d0:	blx	r3
   2d2d4:	ldr	r3, [r4, #36]	; 0x24
   2d2d8:	cmp	r3, #0
   2d2dc:	bne	2d214 <flatcc_json_printer_struct_as_root@@Base+0x18>
   2d2e0:	ldr	r3, [r4]
   2d2e4:	ldr	r0, [r4, #20]
   2d2e8:	sub	r0, r0, r3
   2d2ec:	ldr	r3, [r4, #12]
   2d2f0:	add	r0, r0, r3
   2d2f4:	pop	{r4, r5, r6, pc}

0002d2f8 <flatcc_json_printer_table_as_root@@Base>:
   2d2f8:	push	{r4, r5, r6, lr}
   2d2fc:	mov	r4, r0
   2d300:	mov	r5, r1
   2d304:	bl	27e3c <flatcc_json_parser_struct_as_root@@Base+0x1614>
   2d308:	cmp	r0, #0
   2d30c:	bne	2d318 <flatcc_json_printer_table_as_root@@Base+0x20>
   2d310:	mvn	r0, #0
   2d314:	pop	{r4, r5, r6, pc}
   2d318:	ldr	r1, [r5]
   2d31c:	mov	r2, #100	; 0x64
   2d320:	mov	r0, r4
   2d324:	ldr	r3, [sp, #16]
   2d328:	add	r1, r5, r1
   2d32c:	bl	27d78 <flatcc_json_parser_struct_as_root@@Base+0x1550>
   2d330:	ldrb	r3, [r4, #25]
   2d334:	cmp	r3, #0
   2d338:	beq	2d35c <flatcc_json_printer_table_as_root@@Base+0x64>
   2d33c:	ldr	r3, [r4, #32]
   2d340:	cmp	r3, #0
   2d344:	bne	2d35c <flatcc_json_printer_table_as_root@@Base+0x64>
   2d348:	ldr	r3, [r4, #20]
   2d34c:	add	r2, r3, #1
   2d350:	str	r2, [r4, #20]
   2d354:	mov	r2, #10
   2d358:	strb	r2, [r3]
   2d35c:	mov	r1, #1
   2d360:	mov	r0, r4
   2d364:	ldr	r3, [r4, #44]	; 0x2c
   2d368:	blx	r3
   2d36c:	ldr	r3, [r4, #36]	; 0x24
   2d370:	cmp	r3, #0
   2d374:	bne	2d310 <flatcc_json_printer_table_as_root@@Base+0x18>
   2d378:	ldr	r3, [r4]
   2d37c:	ldr	r0, [r4, #20]
   2d380:	sub	r0, r0, r3
   2d384:	ldr	r3, [r4, #12]
   2d388:	add	r0, r0, r3
   2d38c:	pop	{r4, r5, r6, pc}

0002d390 <flatcc_json_printer_struct_as_nested_root@@Base>:
   2d390:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d394:	mov	r7, r1
   2d398:	mov	r4, r0
   2d39c:	mov	r1, r2
   2d3a0:	mov	r0, r7
   2d3a4:	mov	r9, r3
   2d3a8:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2d3ac:	subs	r5, r0, #0
   2d3b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d3b4:	mov	r0, r4
   2d3b8:	ldr	r6, [r5]
   2d3bc:	ldr	r3, [sp, #36]	; 0x24
   2d3c0:	add	r8, r5, r6
   2d3c4:	ldr	r2, [r5, r6]
   2d3c8:	mov	r1, r8
   2d3cc:	bl	27e3c <flatcc_json_parser_struct_as_root@@Base+0x1614>
   2d3d0:	cmp	r0, #0
   2d3d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d3d8:	ldr	r3, [r7, #16]
   2d3dc:	add	r2, r3, #1
   2d3e0:	cmp	r3, #0
   2d3e4:	str	r2, [r7, #16]
   2d3e8:	beq	2d400 <flatcc_json_printer_struct_as_nested_root@@Base+0x70>
   2d3ec:	ldr	r3, [r4, #20]
   2d3f0:	add	r2, r3, #1
   2d3f4:	str	r2, [r4, #20]
   2d3f8:	mov	r2, #44	; 0x2c
   2d3fc:	strb	r2, [r3]
   2d400:	mov	r1, r9
   2d404:	mov	r0, r4
   2d408:	ldr	r2, [sp, #32]
   2d40c:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2d410:	ldr	r3, [r4, #32]
   2d414:	mov	r0, r4
   2d418:	add	r3, r3, #1
   2d41c:	str	r3, [r4, #32]
   2d420:	ldr	r3, [r4, #20]
   2d424:	add	r2, r3, #1
   2d428:	str	r2, [r4, #20]
   2d42c:	mov	r2, #123	; 0x7b
   2d430:	strb	r2, [r3]
   2d434:	ldr	r1, [r5, r6]
   2d438:	ldr	r3, [sp, #40]	; 0x28
   2d43c:	add	r1, r8, r1
   2d440:	blx	r3
   2d444:	ldrb	r3, [r4, #25]
   2d448:	cmp	r3, #0
   2d44c:	beq	2d478 <flatcc_json_printer_struct_as_nested_root@@Base+0xe8>
   2d450:	ldr	r3, [r4, #20]
   2d454:	mov	r0, r4
   2d458:	add	r2, r3, #1
   2d45c:	str	r2, [r4, #20]
   2d460:	mov	r2, #10
   2d464:	strb	r2, [r3]
   2d468:	ldr	r3, [r4, #32]
   2d46c:	sub	r3, r3, #1
   2d470:	str	r3, [r4, #32]
   2d474:	bl	27914 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   2d478:	ldr	r3, [r4, #20]
   2d47c:	add	r2, r3, #1
   2d480:	str	r2, [r4, #20]
   2d484:	mov	r2, #125	; 0x7d
   2d488:	strb	r2, [r3]
   2d48c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002d490 <flatcc_json_printer_table_as_nested_root@@Base>:
   2d490:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d494:	mov	r5, r1
   2d498:	mov	r4, r0
   2d49c:	mov	r1, r2
   2d4a0:	mov	r0, r5
   2d4a4:	mov	r9, r3
   2d4a8:	bl	275c8 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   2d4ac:	cmp	r0, #0
   2d4b0:	ldrd	sl, [sp, #40]	; 0x28
   2d4b4:	ldr	r8, [sp, #48]	; 0x30
   2d4b8:	beq	2d53c <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   2d4bc:	mov	r3, fp
   2d4c0:	ldr	r2, [r0]
   2d4c4:	add	r7, r0, r2
   2d4c8:	ldr	r2, [r0, r2]
   2d4cc:	mov	r0, r4
   2d4d0:	add	r6, r7, #4
   2d4d4:	mov	r1, r6
   2d4d8:	bl	27e3c <flatcc_json_parser_struct_as_root@@Base+0x1614>
   2d4dc:	cmp	r0, #0
   2d4e0:	beq	2d53c <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   2d4e4:	ldr	r3, [r5, #16]
   2d4e8:	add	r2, r3, #1
   2d4ec:	cmp	r3, #0
   2d4f0:	str	r2, [r5, #16]
   2d4f4:	beq	2d50c <flatcc_json_printer_table_as_nested_root@@Base+0x7c>
   2d4f8:	ldr	r3, [r4, #20]
   2d4fc:	add	r2, r3, #1
   2d500:	str	r2, [r4, #20]
   2d504:	mov	r2, #44	; 0x2c
   2d508:	strb	r2, [r3]
   2d50c:	mov	r2, sl
   2d510:	mov	r1, r9
   2d514:	mov	r0, r4
   2d518:	bl	27b14 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   2d51c:	ldr	r1, [r7, #4]
   2d520:	mov	r3, r8
   2d524:	mov	r0, r4
   2d528:	ldr	r2, [r5, #12]
   2d52c:	add	r1, r6, r1
   2d530:	add	sp, sp, #4
   2d534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d538:	b	27d78 <flatcc_json_parser_struct_as_root@@Base+0x1550>
   2d53c:	add	sp, sp, #4
   2d540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d544 <flatcc_json_printer_init@@Base>:
   2d544:	push	{r4, r5, r6, lr}
   2d548:	mov	r2, #48	; 0x30
   2d54c:	mov	r5, r1
   2d550:	mov	r1, #0
   2d554:	mov	r4, r0
   2d558:	bl	145c0 <memset@plt>
   2d55c:	cmp	r5, #0
   2d560:	movw	r0, #16448	; 0x4040
   2d564:	ldreq	r3, [pc, #80]	; 2d5bc <flatcc_json_printer_init@@Base+0x78>
   2d568:	ldreq	r5, [r3]
   2d56c:	ldr	r3, [pc, #76]	; 2d5c0 <flatcc_json_printer_init@@Base+0x7c>
   2d570:	str	r5, [r4, #40]	; 0x28
   2d574:	str	r3, [r4, #44]	; 0x2c
   2d578:	bl	14578 <malloc@plt>
   2d57c:	cmp	r0, #0
   2d580:	str	r0, [r4]
   2d584:	beq	2d5b4 <flatcc_json_printer_init@@Base+0x70>
   2d588:	mov	r3, #1
   2d58c:	str	r0, [r4, #20]
   2d590:	strb	r3, [r4, #24]
   2d594:	movw	r3, #16448	; 0x4040
   2d598:	str	r3, [r4, #4]
   2d59c:	mov	r3, #16384	; 0x4000
   2d5a0:	add	r0, r0, r3
   2d5a4:	str	r3, [r4, #8]
   2d5a8:	str	r0, [r4, #16]
   2d5ac:	mov	r0, #0
   2d5b0:	pop	{r4, r5, r6, pc}
   2d5b4:	mvn	r0, #0
   2d5b8:	pop	{r4, r5, r6, pc}
   2d5bc:			; <UNDEFINED> instruction: 0x000443bc
   2d5c0:			; <UNDEFINED> instruction: 0x000279bc

0002d5c4 <flatcc_json_printer_init_buffer@@Base>:
   2d5c4:	cmp	r2, #63	; 0x3f
   2d5c8:	push	{r4, r5, r6, lr}
   2d5cc:	bhi	2d5e4 <flatcc_json_printer_init_buffer@@Base+0x20>
   2d5d0:	ldr	r3, [pc, #84]	; 2d62c <flatcc_json_printer_init_buffer@@Base+0x68>
   2d5d4:	movw	r2, #1165	; 0x48d
   2d5d8:	ldr	r1, [pc, #80]	; 2d630 <flatcc_json_printer_init_buffer@@Base+0x6c>
   2d5dc:	ldr	r0, [pc, #80]	; 2d634 <flatcc_json_printer_init_buffer@@Base+0x70>
   2d5e0:	bl	14620 <__assert_fail@plt>
   2d5e4:	mov	r4, r0
   2d5e8:	mov	r6, r1
   2d5ec:	mov	r5, r2
   2d5f0:	mov	r1, #0
   2d5f4:	mov	r2, #32
   2d5f8:	add	r0, r0, #12
   2d5fc:	bl	145c0 <memset@plt>
   2d600:	ldr	r3, [pc, #48]	; 2d638 <flatcc_json_printer_init_buffer@@Base+0x74>
   2d604:	mov	r0, #0
   2d608:	str	r6, [r4]
   2d60c:	str	r5, [r4, #4]
   2d610:	sub	r5, r5, #64	; 0x40
   2d614:	str	r5, [r4, #8]
   2d618:	add	r5, r6, r5
   2d61c:	str	r6, [r4, #20]
   2d620:	str	r5, [r4, #16]
   2d624:	str	r3, [r4, #44]	; 0x2c
   2d628:	pop	{r4, r5, r6, pc}
   2d62c:	muleq	r3, ip, r2
   2d630:	ldrdeq	r3, [r3], -r5
   2d634:	muleq	r3, r7, r4
   2d638:	andeq	r7, r2, r0, lsl #12

0002d63c <flatcc_json_printer_init_dynamic_buffer@@Base>:
   2d63c:	cmp	r1, #0
   2d640:	push	{r4, r5, r6, lr}
   2d644:	mov	r5, r0
   2d648:	moveq	r4, #4096	; 0x1000
   2d64c:	beq	2d65c <flatcc_json_printer_init_dynamic_buffer@@Base+0x20>
   2d650:	cmp	r1, #64	; 0x40
   2d654:	movcs	r4, r1
   2d658:	movcc	r4, #64	; 0x40
   2d65c:	mov	r2, #32
   2d660:	mov	r1, #0
   2d664:	add	r0, r5, #12
   2d668:	bl	145c0 <memset@plt>
   2d66c:	mov	r0, r4
   2d670:	bl	14578 <malloc@plt>
   2d674:	mov	r3, #1
   2d678:	stm	r5, {r0, r4}
   2d67c:	sub	r4, r4, #64	; 0x40
   2d680:	cmp	r0, #0
   2d684:	str	r4, [r5, #8]
   2d688:	add	r4, r0, r4
   2d68c:	strb	r3, [r5, #24]
   2d690:	ldr	r3, [pc, #44]	; 2d6c4 <flatcc_json_printer_init_dynamic_buffer@@Base+0x88>
   2d694:	str	r4, [r5, #16]
   2d698:	str	r0, [r5, #20]
   2d69c:	str	r3, [r5, #44]	; 0x2c
   2d6a0:	bne	2d6bc <flatcc_json_printer_init_dynamic_buffer@@Base+0x80>
   2d6a4:	ldr	r3, [r5, #36]	; 0x24
   2d6a8:	mvn	r0, #0
   2d6ac:	cmp	r3, #0
   2d6b0:	moveq	r3, #3
   2d6b4:	streq	r3, [r5, #36]	; 0x24
   2d6b8:	pop	{r4, r5, r6, pc}
   2d6bc:	mov	r0, #0
   2d6c0:	pop	{r4, r5, r6, pc}
   2d6c4:	andeq	r7, r2, ip, asr sl

0002d6c8 <flatcc_json_printer_get_buffer@@Base>:
   2d6c8:	push	{r4, r5, r6, lr}
   2d6cc:	mov	r5, r1
   2d6d0:	mov	r1, #0
   2d6d4:	mov	r4, r0
   2d6d8:	ldr	r3, [r0, #44]	; 0x2c
   2d6dc:	blx	r3
   2d6e0:	cmp	r5, #0
   2d6e4:	ldr	r0, [r4]
   2d6e8:	ldrne	r3, [r4, #20]
   2d6ec:	subne	r3, r3, r0
   2d6f0:	strne	r3, [r5]
   2d6f4:	pop	{r4, r5, r6, pc}

0002d6f8 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   2d6f8:	push	{r4, r5, r6, lr}
   2d6fc:	mov	r5, r0
   2d700:	bl	2d6c8 <flatcc_json_printer_get_buffer@@Base>
   2d704:	mov	r4, r0
   2d708:	mov	r2, #48	; 0x30
   2d70c:	mov	r1, #0
   2d710:	mov	r0, r5
   2d714:	bl	145c0 <memset@plt>
   2d718:	mov	r0, r4
   2d71c:	pop	{r4, r5, r6, pc}

0002d720 <flatcc_json_printer_clear@@Base>:
   2d720:	push	{r4, lr}
   2d724:	mov	r4, r0
   2d728:	ldrb	r3, [r0, #24]
   2d72c:	cmp	r3, #0
   2d730:	beq	2d744 <flatcc_json_printer_clear@@Base+0x24>
   2d734:	ldr	r0, [r0]
   2d738:	cmp	r0, #0
   2d73c:	beq	2d744 <flatcc_json_printer_clear@@Base+0x24>
   2d740:	bl	1453c <free@plt>
   2d744:	mov	r0, r4
   2d748:	mov	r2, #48	; 0x30
   2d74c:	pop	{r4, lr}
   2d750:	mov	r1, #0
   2d754:	b	145c0 <memset@plt>
   2d758:	eor	r1, r1, #-2147483648	; 0x80000000
   2d75c:	b	2d764 <flatcc_json_printer_clear@@Base+0x44>
   2d760:	eor	r3, r3, #-2147483648	; 0x80000000
   2d764:	push	{r4, r5, lr}
   2d768:	lsl	r4, r1, #1
   2d76c:	lsl	r5, r3, #1
   2d770:	teq	r4, r5
   2d774:	teqeq	r0, r2
   2d778:	orrsne	ip, r4, r0
   2d77c:	orrsne	ip, r5, r2
   2d780:	mvnsne	ip, r4, asr #21
   2d784:	mvnsne	ip, r5, asr #21
   2d788:	beq	2d974 <flatcc_json_printer_clear@@Base+0x254>
   2d78c:	lsr	r4, r4, #21
   2d790:	rsbs	r5, r4, r5, lsr #21
   2d794:	rsblt	r5, r5, #0
   2d798:	ble	2d7b8 <flatcc_json_printer_clear@@Base+0x98>
   2d79c:	add	r4, r4, r5
   2d7a0:	eor	r2, r0, r2
   2d7a4:	eor	r3, r1, r3
   2d7a8:	eor	r0, r2, r0
   2d7ac:	eor	r1, r3, r1
   2d7b0:	eor	r2, r0, r2
   2d7b4:	eor	r3, r1, r3
   2d7b8:	cmp	r5, #54	; 0x36
   2d7bc:	pophi	{r4, r5, pc}
   2d7c0:	tst	r1, #-2147483648	; 0x80000000
   2d7c4:	lsl	r1, r1, #12
   2d7c8:	mov	ip, #1048576	; 0x100000
   2d7cc:	orr	r1, ip, r1, lsr #12
   2d7d0:	beq	2d7dc <flatcc_json_printer_clear@@Base+0xbc>
   2d7d4:	rsbs	r0, r0, #0
   2d7d8:	rsc	r1, r1, #0
   2d7dc:	tst	r3, #-2147483648	; 0x80000000
   2d7e0:	lsl	r3, r3, #12
   2d7e4:	orr	r3, ip, r3, lsr #12
   2d7e8:	beq	2d7f4 <flatcc_json_printer_clear@@Base+0xd4>
   2d7ec:	rsbs	r2, r2, #0
   2d7f0:	rsc	r3, r3, #0
   2d7f4:	teq	r4, r5
   2d7f8:	beq	2d95c <flatcc_json_printer_clear@@Base+0x23c>
   2d7fc:	sub	r4, r4, #1
   2d800:	rsbs	lr, r5, #32
   2d804:	blt	2d820 <flatcc_json_printer_clear@@Base+0x100>
   2d808:	lsl	ip, r2, lr
   2d80c:	adds	r0, r0, r2, lsr r5
   2d810:	adc	r1, r1, #0
   2d814:	adds	r0, r0, r3, lsl lr
   2d818:	adcs	r1, r1, r3, asr r5
   2d81c:	b	2d83c <flatcc_json_printer_clear@@Base+0x11c>
   2d820:	sub	r5, r5, #32
   2d824:	add	lr, lr, #32
   2d828:	cmp	r2, #1
   2d82c:	lsl	ip, r3, lr
   2d830:	orrcs	ip, ip, #2
   2d834:	adds	r0, r0, r3, asr r5
   2d838:	adcs	r1, r1, r3, asr #31
   2d83c:	and	r5, r1, #-2147483648	; 0x80000000
   2d840:	bpl	2d850 <flatcc_json_printer_clear@@Base+0x130>
   2d844:	rsbs	ip, ip, #0
   2d848:	rscs	r0, r0, #0
   2d84c:	rsc	r1, r1, #0
   2d850:	cmp	r1, #1048576	; 0x100000
   2d854:	bcc	2d894 <flatcc_json_printer_clear@@Base+0x174>
   2d858:	cmp	r1, #2097152	; 0x200000
   2d85c:	bcc	2d87c <flatcc_json_printer_clear@@Base+0x15c>
   2d860:	lsrs	r1, r1, #1
   2d864:	rrxs	r0, r0
   2d868:	rrx	ip, ip
   2d86c:	add	r4, r4, #1
   2d870:	lsl	r2, r4, #21
   2d874:	cmn	r2, #4194304	; 0x400000
   2d878:	bcs	2d9d4 <flatcc_json_printer_clear@@Base+0x2b4>
   2d87c:	cmp	ip, #-2147483648	; 0x80000000
   2d880:	lsrseq	ip, r0, #1
   2d884:	adcs	r0, r0, #0
   2d888:	adc	r1, r1, r4, lsl #20
   2d88c:	orr	r1, r1, r5
   2d890:	pop	{r4, r5, pc}
   2d894:	lsls	ip, ip, #1
   2d898:	adcs	r0, r0, r0
   2d89c:	adc	r1, r1, r1
   2d8a0:	tst	r1, #1048576	; 0x100000
   2d8a4:	sub	r4, r4, #1
   2d8a8:	bne	2d87c <flatcc_json_printer_clear@@Base+0x15c>
   2d8ac:	teq	r1, #0
   2d8b0:	moveq	r1, r0
   2d8b4:	moveq	r0, #0
   2d8b8:	clz	r3, r1
   2d8bc:	addeq	r3, r3, #32
   2d8c0:	sub	r3, r3, #11
   2d8c4:	subs	r2, r3, #32
   2d8c8:	bge	2d8ec <flatcc_json_printer_clear@@Base+0x1cc>
   2d8cc:	adds	r2, r2, #12
   2d8d0:	ble	2d8e8 <flatcc_json_printer_clear@@Base+0x1c8>
   2d8d4:	add	ip, r2, #20
   2d8d8:	rsb	r2, r2, #12
   2d8dc:	lsl	r0, r1, ip
   2d8e0:	lsr	r1, r1, r2
   2d8e4:	b	2d8fc <flatcc_json_printer_clear@@Base+0x1dc>
   2d8e8:	add	r2, r2, #20
   2d8ec:	rsble	ip, r2, #32
   2d8f0:	lsl	r1, r1, r2
   2d8f4:	orrle	r1, r1, r0, lsr ip
   2d8f8:	lslle	r0, r0, r2
   2d8fc:	subs	r4, r4, r3
   2d900:	addge	r1, r1, r4, lsl #20
   2d904:	orrge	r1, r1, r5
   2d908:	popge	{r4, r5, pc}
   2d90c:	mvn	r4, r4
   2d910:	subs	r4, r4, #31
   2d914:	bge	2d950 <flatcc_json_printer_clear@@Base+0x230>
   2d918:	adds	r4, r4, #12
   2d91c:	bgt	2d938 <flatcc_json_printer_clear@@Base+0x218>
   2d920:	add	r4, r4, #20
   2d924:	rsb	r2, r4, #32
   2d928:	lsr	r0, r0, r4
   2d92c:	orr	r0, r0, r1, lsl r2
   2d930:	orr	r1, r5, r1, lsr r4
   2d934:	pop	{r4, r5, pc}
   2d938:	rsb	r4, r4, #12
   2d93c:	rsb	r2, r4, #32
   2d940:	lsr	r0, r0, r2
   2d944:	orr	r0, r0, r1, lsl r4
   2d948:	mov	r1, r5
   2d94c:	pop	{r4, r5, pc}
   2d950:	lsr	r0, r1, r4
   2d954:	mov	r1, r5
   2d958:	pop	{r4, r5, pc}
   2d95c:	teq	r4, #0
   2d960:	eor	r3, r3, #1048576	; 0x100000
   2d964:	eoreq	r1, r1, #1048576	; 0x100000
   2d968:	addeq	r4, r4, #1
   2d96c:	subne	r5, r5, #1
   2d970:	b	2d7fc <flatcc_json_printer_clear@@Base+0xdc>
   2d974:	mvns	ip, r4, asr #21
   2d978:	mvnsne	ip, r5, asr #21
   2d97c:	beq	2d9e4 <flatcc_json_printer_clear@@Base+0x2c4>
   2d980:	teq	r4, r5
   2d984:	teqeq	r0, r2
   2d988:	beq	2d99c <flatcc_json_printer_clear@@Base+0x27c>
   2d98c:	orrs	ip, r4, r0
   2d990:	moveq	r1, r3
   2d994:	moveq	r0, r2
   2d998:	pop	{r4, r5, pc}
   2d99c:	teq	r1, r3
   2d9a0:	movne	r1, #0
   2d9a4:	movne	r0, #0
   2d9a8:	popne	{r4, r5, pc}
   2d9ac:	lsrs	ip, r4, #21
   2d9b0:	bne	2d9c4 <flatcc_json_printer_clear@@Base+0x2a4>
   2d9b4:	lsls	r0, r0, #1
   2d9b8:	adcs	r1, r1, r1
   2d9bc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2d9c0:	pop	{r4, r5, pc}
   2d9c4:	adds	r4, r4, #4194304	; 0x400000
   2d9c8:	addcc	r1, r1, #1048576	; 0x100000
   2d9cc:	popcc	{r4, r5, pc}
   2d9d0:	and	r5, r1, #-2147483648	; 0x80000000
   2d9d4:	orr	r1, r5, #2130706432	; 0x7f000000
   2d9d8:	orr	r1, r1, #15728640	; 0xf00000
   2d9dc:	mov	r0, #0
   2d9e0:	pop	{r4, r5, pc}
   2d9e4:	mvns	ip, r4, asr #21
   2d9e8:	movne	r1, r3
   2d9ec:	movne	r0, r2
   2d9f0:	mvnseq	ip, r5, asr #21
   2d9f4:	movne	r3, r1
   2d9f8:	movne	r2, r0
   2d9fc:	orrs	r4, r0, r1, lsl #12
   2da00:	orrseq	r5, r2, r3, lsl #12
   2da04:	teqeq	r1, r3
   2da08:	orrne	r1, r1, #524288	; 0x80000
   2da0c:	pop	{r4, r5, pc}
   2da10:	teq	r0, #0
   2da14:	moveq	r1, #0
   2da18:	bxeq	lr
   2da1c:	push	{r4, r5, lr}
   2da20:	mov	r4, #1024	; 0x400
   2da24:	add	r4, r4, #50	; 0x32
   2da28:	mov	r5, #0
   2da2c:	mov	r1, #0
   2da30:	b	2d8ac <flatcc_json_printer_clear@@Base+0x18c>
   2da34:	teq	r0, #0
   2da38:	moveq	r1, #0
   2da3c:	bxeq	lr
   2da40:	push	{r4, r5, lr}
   2da44:	mov	r4, #1024	; 0x400
   2da48:	add	r4, r4, #50	; 0x32
   2da4c:	ands	r5, r0, #-2147483648	; 0x80000000
   2da50:	rsbmi	r0, r0, #0
   2da54:	mov	r1, #0
   2da58:	b	2d8ac <flatcc_json_printer_clear@@Base+0x18c>
   2da5c:	lsls	r2, r0, #1
   2da60:	asr	r1, r2, #3
   2da64:	rrx	r1, r1
   2da68:	lsl	r0, r2, #28
   2da6c:	andsne	r3, r2, #-16777216	; 0xff000000
   2da70:	teqne	r3, #-16777216	; 0xff000000
   2da74:	eorne	r1, r1, #939524096	; 0x38000000
   2da78:	bxne	lr
   2da7c:	bics	r2, r2, #-16777216	; 0xff000000
   2da80:	bxeq	lr
   2da84:	teq	r3, #-16777216	; 0xff000000
   2da88:	orreq	r1, r1, #524288	; 0x80000
   2da8c:	bxeq	lr
   2da90:	push	{r4, r5, lr}
   2da94:	mov	r4, #896	; 0x380
   2da98:	and	r5, r1, #-2147483648	; 0x80000000
   2da9c:	bic	r1, r1, #-2147483648	; 0x80000000
   2daa0:	b	2d8ac <flatcc_json_printer_clear@@Base+0x18c>
   2daa4:	orrs	r2, r0, r1
   2daa8:	bxeq	lr
   2daac:	push	{r4, r5, lr}
   2dab0:	mov	r5, #0
   2dab4:	b	2dad4 <flatcc_json_printer_clear@@Base+0x3b4>
   2dab8:	orrs	r2, r0, r1
   2dabc:	bxeq	lr
   2dac0:	push	{r4, r5, lr}
   2dac4:	ands	r5, r1, #-2147483648	; 0x80000000
   2dac8:	bpl	2dad4 <flatcc_json_printer_clear@@Base+0x3b4>
   2dacc:	rsbs	r0, r0, #0
   2dad0:	rsc	r1, r1, #0
   2dad4:	mov	r4, #1024	; 0x400
   2dad8:	add	r4, r4, #50	; 0x32
   2dadc:	lsrs	ip, r1, #22
   2dae0:	beq	2d850 <flatcc_json_printer_clear@@Base+0x130>
   2dae4:	mov	r2, #3
   2dae8:	lsrs	ip, ip, #3
   2daec:	addne	r2, r2, #3
   2daf0:	lsrs	ip, ip, #3
   2daf4:	addne	r2, r2, #3
   2daf8:	add	r2, r2, ip, lsr #3
   2dafc:	rsb	r3, r2, #32
   2db00:	lsl	ip, r0, r3
   2db04:	lsr	r0, r0, r2
   2db08:	orr	r0, r0, r1, lsl r3
   2db0c:	lsr	r1, r1, r2
   2db10:	add	r4, r4, r2
   2db14:	b	2d850 <flatcc_json_printer_clear@@Base+0x130>
   2db18:	eor	r0, r0, #-2147483648	; 0x80000000
   2db1c:	b	2db24 <flatcc_json_printer_clear@@Base+0x404>
   2db20:	eor	r1, r1, #-2147483648	; 0x80000000
   2db24:	lsls	r2, r0, #1
   2db28:	lslsne	r3, r1, #1
   2db2c:	teqne	r2, r3
   2db30:	mvnsne	ip, r2, asr #24
   2db34:	mvnsne	ip, r3, asr #24
   2db38:	beq	2dc30 <flatcc_json_printer_clear@@Base+0x510>
   2db3c:	lsr	r2, r2, #24
   2db40:	rsbs	r3, r2, r3, lsr #24
   2db44:	addgt	r2, r2, r3
   2db48:	eorgt	r1, r0, r1
   2db4c:	eorgt	r0, r1, r0
   2db50:	eorgt	r1, r0, r1
   2db54:	rsblt	r3, r3, #0
   2db58:	cmp	r3, #25
   2db5c:	bxhi	lr
   2db60:	tst	r0, #-2147483648	; 0x80000000
   2db64:	orr	r0, r0, #8388608	; 0x800000
   2db68:	bic	r0, r0, #-16777216	; 0xff000000
   2db6c:	rsbne	r0, r0, #0
   2db70:	tst	r1, #-2147483648	; 0x80000000
   2db74:	orr	r1, r1, #8388608	; 0x800000
   2db78:	bic	r1, r1, #-16777216	; 0xff000000
   2db7c:	rsbne	r1, r1, #0
   2db80:	teq	r2, r3
   2db84:	beq	2dc18 <flatcc_json_printer_clear@@Base+0x4f8>
   2db88:	sub	r2, r2, #1
   2db8c:	adds	r0, r0, r1, asr r3
   2db90:	rsb	r3, r3, #32
   2db94:	lsl	r1, r1, r3
   2db98:	and	r3, r0, #-2147483648	; 0x80000000
   2db9c:	bpl	2dba8 <flatcc_json_printer_clear@@Base+0x488>
   2dba0:	rsbs	r1, r1, #0
   2dba4:	rsc	r0, r0, #0
   2dba8:	cmp	r0, #8388608	; 0x800000
   2dbac:	bcc	2dbe0 <flatcc_json_printer_clear@@Base+0x4c0>
   2dbb0:	cmp	r0, #16777216	; 0x1000000
   2dbb4:	bcc	2dbcc <flatcc_json_printer_clear@@Base+0x4ac>
   2dbb8:	lsrs	r0, r0, #1
   2dbbc:	rrx	r1, r1
   2dbc0:	add	r2, r2, #1
   2dbc4:	cmp	r2, #254	; 0xfe
   2dbc8:	bcs	2dc84 <flatcc_json_printer_clear@@Base+0x564>
   2dbcc:	cmp	r1, #-2147483648	; 0x80000000
   2dbd0:	adc	r0, r0, r2, lsl #23
   2dbd4:	biceq	r0, r0, #1
   2dbd8:	orr	r0, r0, r3
   2dbdc:	bx	lr
   2dbe0:	lsls	r1, r1, #1
   2dbe4:	adc	r0, r0, r0
   2dbe8:	tst	r0, #8388608	; 0x800000
   2dbec:	sub	r2, r2, #1
   2dbf0:	bne	2dbcc <flatcc_json_printer_clear@@Base+0x4ac>
   2dbf4:	clz	ip, r0
   2dbf8:	sub	ip, ip, #8
   2dbfc:	subs	r2, r2, ip
   2dc00:	lsl	r0, r0, ip
   2dc04:	addge	r0, r0, r2, lsl #23
   2dc08:	rsblt	r2, r2, #0
   2dc0c:	orrge	r0, r0, r3
   2dc10:	orrlt	r0, r3, r0, lsr r2
   2dc14:	bx	lr
   2dc18:	teq	r2, #0
   2dc1c:	eor	r1, r1, #8388608	; 0x800000
   2dc20:	eoreq	r0, r0, #8388608	; 0x800000
   2dc24:	addeq	r2, r2, #1
   2dc28:	subne	r3, r3, #1
   2dc2c:	b	2db88 <flatcc_json_printer_clear@@Base+0x468>
   2dc30:	lsl	r3, r1, #1
   2dc34:	mvns	ip, r2, asr #24
   2dc38:	mvnsne	ip, r3, asr #24
   2dc3c:	beq	2dc90 <flatcc_json_printer_clear@@Base+0x570>
   2dc40:	teq	r2, r3
   2dc44:	beq	2dc54 <flatcc_json_printer_clear@@Base+0x534>
   2dc48:	teq	r2, #0
   2dc4c:	moveq	r0, r1
   2dc50:	bx	lr
   2dc54:	teq	r0, r1
   2dc58:	movne	r0, #0
   2dc5c:	bxne	lr
   2dc60:	tst	r2, #-16777216	; 0xff000000
   2dc64:	bne	2dc74 <flatcc_json_printer_clear@@Base+0x554>
   2dc68:	lsls	r0, r0, #1
   2dc6c:	orrcs	r0, r0, #-2147483648	; 0x80000000
   2dc70:	bx	lr
   2dc74:	adds	r2, r2, #33554432	; 0x2000000
   2dc78:	addcc	r0, r0, #8388608	; 0x800000
   2dc7c:	bxcc	lr
   2dc80:	and	r3, r0, #-2147483648	; 0x80000000
   2dc84:	orr	r0, r3, #2130706432	; 0x7f000000
   2dc88:	orr	r0, r0, #8388608	; 0x800000
   2dc8c:	bx	lr
   2dc90:	mvns	r2, r2, asr #24
   2dc94:	movne	r0, r1
   2dc98:	mvnseq	r3, r3, asr #24
   2dc9c:	movne	r1, r0
   2dca0:	lsls	r2, r0, #9
   2dca4:	lslseq	r3, r1, #9
   2dca8:	teqeq	r0, r1
   2dcac:	orrne	r0, r0, #4194304	; 0x400000
   2dcb0:	bx	lr
   2dcb4:	mov	r3, #0
   2dcb8:	b	2dcc4 <flatcc_json_printer_clear@@Base+0x5a4>
   2dcbc:	ands	r3, r0, #-2147483648	; 0x80000000
   2dcc0:	rsbmi	r0, r0, #0
   2dcc4:	movs	ip, r0
   2dcc8:	bxeq	lr
   2dccc:	orr	r3, r3, #1258291200	; 0x4b000000
   2dcd0:	mov	r1, r0
   2dcd4:	mov	r0, #0
   2dcd8:	b	2dd1c <flatcc_json_printer_clear@@Base+0x5fc>
   2dcdc:	orrs	r2, r0, r1
   2dce0:	bxeq	lr
   2dce4:	mov	r3, #0
   2dce8:	b	2dd04 <flatcc_json_printer_clear@@Base+0x5e4>
   2dcec:	orrs	r2, r0, r1
   2dcf0:	bxeq	lr
   2dcf4:	ands	r3, r1, #-2147483648	; 0x80000000
   2dcf8:	bpl	2dd04 <flatcc_json_printer_clear@@Base+0x5e4>
   2dcfc:	rsbs	r0, r0, #0
   2dd00:	rsc	r1, r1, #0
   2dd04:	movs	ip, r1
   2dd08:	moveq	ip, r0
   2dd0c:	moveq	r1, r0
   2dd10:	moveq	r0, #0
   2dd14:	orr	r3, r3, #1526726656	; 0x5b000000
   2dd18:	subeq	r3, r3, #268435456	; 0x10000000
   2dd1c:	sub	r3, r3, #8388608	; 0x800000
   2dd20:	clz	r2, ip
   2dd24:	subs	r2, r2, #8
   2dd28:	sub	r3, r3, r2, lsl #23
   2dd2c:	blt	2dd4c <flatcc_json_printer_clear@@Base+0x62c>
   2dd30:	add	r3, r3, r1, lsl r2
   2dd34:	lsl	ip, r0, r2
   2dd38:	rsb	r2, r2, #32
   2dd3c:	cmp	ip, #-2147483648	; 0x80000000
   2dd40:	adc	r0, r3, r0, lsr r2
   2dd44:	biceq	r0, r0, #1
   2dd48:	bx	lr
   2dd4c:	add	r2, r2, #32
   2dd50:	lsl	ip, r1, r2
   2dd54:	rsb	r2, r2, #32
   2dd58:	orrs	r0, r0, ip, lsl #1
   2dd5c:	adc	r0, r3, r1, lsr r2
   2dd60:	biceq	r0, r0, ip, lsr #31
   2dd64:	bx	lr
   2dd68:	cmp	r3, #0
   2dd6c:	cmpeq	r2, #0
   2dd70:	bne	2dd94 <flatcc_json_printer_clear@@Base+0x674>
   2dd74:	cmp	r1, #0
   2dd78:	movlt	r1, #-2147483648	; 0x80000000
   2dd7c:	movlt	r0, #0
   2dd80:	blt	2dd90 <flatcc_json_printer_clear@@Base+0x670>
   2dd84:	cmpeq	r0, #0
   2dd88:	mvnne	r1, #-2147483648	; 0x80000000
   2dd8c:	mvnne	r0, #0
   2dd90:	b	2de78 <flatcc_json_printer_clear@@Base+0x758>
   2dd94:	sub	sp, sp, #8
   2dd98:	push	{sp, lr}
   2dd9c:	cmp	r1, #0
   2dda0:	blt	2ddc0 <flatcc_json_printer_clear@@Base+0x6a0>
   2dda4:	cmp	r3, #0
   2dda8:	blt	2ddf4 <flatcc_json_printer_clear@@Base+0x6d4>
   2ddac:	bl	2de88 <flatcc_json_printer_clear@@Base+0x768>
   2ddb0:	ldr	lr, [sp, #4]
   2ddb4:	add	sp, sp, #8
   2ddb8:	pop	{r2, r3}
   2ddbc:	bx	lr
   2ddc0:	rsbs	r0, r0, #0
   2ddc4:	sbc	r1, r1, r1, lsl #1
   2ddc8:	cmp	r3, #0
   2ddcc:	blt	2de18 <flatcc_json_printer_clear@@Base+0x6f8>
   2ddd0:	bl	2de88 <flatcc_json_printer_clear@@Base+0x768>
   2ddd4:	ldr	lr, [sp, #4]
   2ddd8:	add	sp, sp, #8
   2dddc:	pop	{r2, r3}
   2dde0:	rsbs	r0, r0, #0
   2dde4:	sbc	r1, r1, r1, lsl #1
   2dde8:	rsbs	r2, r2, #0
   2ddec:	sbc	r3, r3, r3, lsl #1
   2ddf0:	bx	lr
   2ddf4:	rsbs	r2, r2, #0
   2ddf8:	sbc	r3, r3, r3, lsl #1
   2ddfc:	bl	2de88 <flatcc_json_printer_clear@@Base+0x768>
   2de00:	ldr	lr, [sp, #4]
   2de04:	add	sp, sp, #8
   2de08:	pop	{r2, r3}
   2de0c:	rsbs	r0, r0, #0
   2de10:	sbc	r1, r1, r1, lsl #1
   2de14:	bx	lr
   2de18:	rsbs	r2, r2, #0
   2de1c:	sbc	r3, r3, r3, lsl #1
   2de20:	bl	2de88 <flatcc_json_printer_clear@@Base+0x768>
   2de24:	ldr	lr, [sp, #4]
   2de28:	add	sp, sp, #8
   2de2c:	pop	{r2, r3}
   2de30:	rsbs	r2, r2, #0
   2de34:	sbc	r3, r3, r3, lsl #1
   2de38:	bx	lr
   2de3c:	cmp	r3, #0
   2de40:	cmpeq	r2, #0
   2de44:	bne	2de5c <flatcc_json_printer_clear@@Base+0x73c>
   2de48:	cmp	r1, #0
   2de4c:	cmpeq	r0, #0
   2de50:	mvnne	r1, #0
   2de54:	mvnne	r0, #0
   2de58:	b	2de78 <flatcc_json_printer_clear@@Base+0x758>
   2de5c:	sub	sp, sp, #8
   2de60:	push	{sp, lr}
   2de64:	bl	2de88 <flatcc_json_printer_clear@@Base+0x768>
   2de68:	ldr	lr, [sp, #4]
   2de6c:	add	sp, sp, #8
   2de70:	pop	{r2, r3}
   2de74:	bx	lr
   2de78:	push	{r1, lr}
   2de7c:	mov	r0, #8
   2de80:	bl	14518 <raise@plt>
   2de84:	pop	{r1, pc}
   2de88:	cmp	r1, r3
   2de8c:	cmpeq	r0, r2
   2de90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2de94:	mov	r4, r0
   2de98:	movcc	r0, #0
   2de9c:	mov	r5, r1
   2dea0:	ldr	lr, [sp, #36]	; 0x24
   2dea4:	movcc	r1, r0
   2dea8:	bcc	2dfa4 <flatcc_json_printer_clear@@Base+0x884>
   2deac:	cmp	r3, #0
   2deb0:	clzeq	ip, r2
   2deb4:	clzne	ip, r3
   2deb8:	addeq	ip, ip, #32
   2debc:	cmp	r5, #0
   2dec0:	clzeq	r1, r4
   2dec4:	addeq	r1, r1, #32
   2dec8:	clzne	r1, r5
   2decc:	sub	ip, ip, r1
   2ded0:	sub	sl, ip, #32
   2ded4:	lsl	r9, r3, ip
   2ded8:	rsb	fp, ip, #32
   2dedc:	orr	r9, r9, r2, lsl sl
   2dee0:	orr	r9, r9, r2, lsr fp
   2dee4:	lsl	r8, r2, ip
   2dee8:	cmp	r5, r9
   2deec:	cmpeq	r4, r8
   2def0:	movcc	r0, #0
   2def4:	movcc	r1, r0
   2def8:	bcc	2df14 <flatcc_json_printer_clear@@Base+0x7f4>
   2defc:	mov	r0, #1
   2df00:	subs	r4, r4, r8
   2df04:	lsl	r1, r0, sl
   2df08:	orr	r1, r1, r0, lsr fp
   2df0c:	lsl	r0, r0, ip
   2df10:	sbc	r5, r5, r9
   2df14:	cmp	ip, #0
   2df18:	beq	2dfa4 <flatcc_json_printer_clear@@Base+0x884>
   2df1c:	lsr	r6, r8, #1
   2df20:	orr	r6, r6, r9, lsl #31
   2df24:	lsr	r7, r9, #1
   2df28:	mov	r2, ip
   2df2c:	b	2df50 <flatcc_json_printer_clear@@Base+0x830>
   2df30:	subs	r3, r4, r6
   2df34:	sbc	r8, r5, r7
   2df38:	adds	r3, r3, r3
   2df3c:	adc	r8, r8, r8
   2df40:	adds	r4, r3, #1
   2df44:	adc	r5, r8, #0
   2df48:	subs	r2, r2, #1
   2df4c:	beq	2df6c <flatcc_json_printer_clear@@Base+0x84c>
   2df50:	cmp	r5, r7
   2df54:	cmpeq	r4, r6
   2df58:	bcs	2df30 <flatcc_json_printer_clear@@Base+0x810>
   2df5c:	adds	r4, r4, r4
   2df60:	adc	r5, r5, r5
   2df64:	subs	r2, r2, #1
   2df68:	bne	2df50 <flatcc_json_printer_clear@@Base+0x830>
   2df6c:	lsr	r3, r4, ip
   2df70:	orr	r3, r3, r5, lsl fp
   2df74:	lsr	r2, r5, ip
   2df78:	orr	r3, r3, r5, lsr sl
   2df7c:	adds	r0, r0, r4
   2df80:	mov	r4, r3
   2df84:	lsl	r3, r2, ip
   2df88:	orr	r3, r3, r4, lsl sl
   2df8c:	lsl	ip, r4, ip
   2df90:	orr	r3, r3, r4, lsr fp
   2df94:	adc	r1, r1, r5
   2df98:	subs	r0, r0, ip
   2df9c:	mov	r5, r2
   2dfa0:	sbc	r1, r1, r3
   2dfa4:	cmp	lr, #0
   2dfa8:	strdne	r4, [lr]
   2dfac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002dfb0 <__libc_csu_init@@Base>:
   2dfb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2dfb4:	mov	r7, r0
   2dfb8:	ldr	r6, [pc, #72]	; 2e008 <__libc_csu_init@@Base+0x58>
   2dfbc:	ldr	r5, [pc, #72]	; 2e00c <__libc_csu_init@@Base+0x5c>
   2dfc0:	add	r6, pc, r6
   2dfc4:	add	r5, pc, r5
   2dfc8:	sub	r6, r6, r5
   2dfcc:	mov	r8, r1
   2dfd0:	mov	r9, r2
   2dfd4:	bl	144f8 <raise@plt-0x20>
   2dfd8:	asrs	r6, r6, #2
   2dfdc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2dfe0:	mov	r4, #0
   2dfe4:	add	r4, r4, #1
   2dfe8:	ldr	r3, [r5], #4
   2dfec:	mov	r2, r9
   2dff0:	mov	r1, r8
   2dff4:	mov	r0, r7
   2dff8:	blx	r3
   2dffc:	cmp	r6, r4
   2e000:	bne	2dfe4 <__libc_csu_init@@Base+0x34>
   2e004:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e008:	andeq	r5, r1, ip, asr #30
   2e00c:	andeq	r5, r1, r4, asr #30

0002e010 <__libc_csu_fini@@Base>:
   2e010:	bx	lr

Disassembly of section .fini:

0002e014 <.fini>:
   2e014:	push	{r3, lr}
   2e018:	pop	{r3, pc}
