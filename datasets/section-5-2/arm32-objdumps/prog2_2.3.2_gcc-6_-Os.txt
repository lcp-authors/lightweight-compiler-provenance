
../repos/prog2/2.3.2:     file format elf32-littlearm


Disassembly of section .init:

000109c0 <.init>:
   109c0:	push	{r3, lr}
   109c4:	bl	10c18 <_start@@Base+0x3c>
   109c8:	pop	{r3, pc}

Disassembly of section .plt:

000109cc <calloc@plt-0x14>:
   109cc:	push	{lr}		; (str lr, [sp, #-4]!)
   109d0:	ldr	lr, [pc, #4]	; 109dc <calloc@plt-0x4>
   109d4:	add	lr, pc, lr
   109d8:	ldr	pc, [lr, #8]!
   109dc:	andeq	r1, r1, r4, lsr #12

000109e0 <calloc@plt>:
   109e0:	add	ip, pc, #0, 12
   109e4:	add	ip, ip, #69632	; 0x11000
   109e8:	ldr	pc, [ip, #1572]!	; 0x624

000109ec <raise@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #69632	; 0x11000
   109f4:	ldr	pc, [ip, #1564]!	; 0x61c

000109f8 <strcmp@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #69632	; 0x11000
   10a00:	ldr	pc, [ip, #1556]!	; 0x614

00010a04 <printf@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #69632	; 0x11000
   10a0c:	ldr	pc, [ip, #1548]!	; 0x60c

00010a10 <free@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #69632	; 0x11000
   10a18:	ldr	pc, [ip, #1540]!	; 0x604

00010a1c <fgets@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #69632	; 0x11000
   10a24:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a28 <time@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #69632	; 0x11000
   10a30:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a34 <realloc@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #69632	; 0x11000
   10a3c:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a40 <strcat@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #69632	; 0x11000
   10a48:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a4c <strcpy@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #69632	; 0x11000
   10a54:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a58 <puts@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #69632	; 0x11000
   10a60:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a64 <malloc@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #69632	; 0x11000
   10a6c:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a70 <__libc_start_main@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #69632	; 0x11000
   10a78:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a7c <__gmon_start__@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #69632	; 0x11000
   10a84:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a88 <strlen@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #69632	; 0x11000
   10a90:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a94 <srand@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #69632	; 0x11000
   10a9c:	ldr	pc, [ip, #1452]!	; 0x5ac

00010aa0 <rand@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #69632	; 0x11000
   10aa8:	ldr	pc, [ip, #1444]!	; 0x5a4

00010aac <__isoc99_scanf@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #69632	; 0x11000
   10ab4:	ldr	pc, [ip, #1436]!	; 0x59c

00010ab8 <abort@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #69632	; 0x11000
   10ac0:	ldr	pc, [ip, #1428]!	; 0x594

Disassembly of section .text:

00010ac4 <main@@Base>:
   10ac4:	push	{r4, r5, r6, r7, r8, lr}
   10ac8:	sub	sp, sp, #104	; 0x68
   10acc:	bl	10d44 <vetor_novo@@Base>
   10ad0:	ldr	r8, [pc, #232]	; 10bc0 <main@@Base+0xfc>
   10ad4:	ldr	r7, [pc, #232]	; 10bc4 <main@@Base+0x100>
   10ad8:	mov	r5, #0
   10adc:	mov	r4, r0
   10ae0:	add	r6, r5, #1
   10ae4:	mov	r1, r6
   10ae8:	mov	r0, r8
   10aec:	bl	10a04 <printf@plt>
   10af0:	ldr	r2, [r7]
   10af4:	mov	r1, #100	; 0x64
   10af8:	add	r0, sp, #4
   10afc:	bl	10a1c <fgets@plt>
   10b00:	add	r0, sp, #4
   10b04:	bl	10a88 <strlen@plt>
   10b08:	add	r3, sp, #104	; 0x68
   10b0c:	mov	r2, r5
   10b10:	add	r1, sp, #4
   10b14:	mov	r5, r6
   10b18:	add	r0, r3, r0
   10b1c:	mov	r3, #0
   10b20:	strb	r3, [r0, #-101]	; 0xffffff9b
   10b24:	mov	r0, r4
   10b28:	bl	10e88 <vetor_insere@@Base>
   10b2c:	cmp	r6, #5
   10b30:	bne	10ae0 <main@@Base+0x1c>
   10b34:	mov	r0, r4
   10b38:	bl	10d04 <imprime@@Base>
   10b3c:	ldr	r0, [pc, #132]	; 10bc8 <main@@Base+0x104>
   10b40:	bl	10a04 <printf@plt>
   10b44:	add	r1, sp, #4
   10b48:	ldr	r0, [pc, #124]	; 10bcc <main@@Base+0x108>
   10b4c:	bl	10aac <__isoc99_scanf@plt>
   10b50:	add	r1, sp, #4
   10b54:	mov	r0, r4
   10b58:	bl	10fe0 <vetor_pesquisa@@Base>
   10b5c:	mov	r1, r0
   10b60:	mov	r0, r4
   10b64:	bl	10f60 <vetor_remove@@Base>
   10b68:	cmp	r0, #0
   10b6c:	beq	10bb4 <main@@Base+0xf0>
   10b70:	ldr	r0, [pc, #88]	; 10bd0 <main@@Base+0x10c>
   10b74:	bl	10a58 <puts@plt>
   10b78:	mov	r0, r4
   10b7c:	bl	1102c <vetor_ordena@@Base>
   10b80:	cmp	r0, #0
   10b84:	beq	10b90 <main@@Base+0xcc>
   10b88:	ldr	r0, [pc, #68]	; 10bd4 <main@@Base+0x110>
   10b8c:	bl	10a04 <printf@plt>
   10b90:	ldr	r0, [pc, #64]	; 10bd8 <main@@Base+0x114>
   10b94:	bl	10a58 <puts@plt>
   10b98:	mov	r0, r4
   10b9c:	bl	10d04 <imprime@@Base>
   10ba0:	mov	r0, r4
   10ba4:	bl	10d68 <vetor_apaga@@Base>
   10ba8:	mov	r0, #0
   10bac:	add	sp, sp, #104	; 0x68
   10bb0:	pop	{r4, r5, r6, r7, r8, pc}
   10bb4:	mov	r0, r4
   10bb8:	bl	10d04 <imprime@@Base>
   10bbc:	b	10b78 <main@@Base+0xb4>
   10bc0:	andeq	r1, r1, r1, lsr #9
   10bc4:	andeq	r2, r2, r8, rrx
   10bc8:			; <UNDEFINED> instruction: 0x000114b4
   10bcc:	ldrdeq	r1, [r1], -r4
   10bd0:	ldrdeq	r1, [r1], -r7
   10bd4:	andeq	r1, r1, sp, ror #9
   10bd8:	andeq	r1, r1, pc, lsl #10

00010bdc <_start@@Base>:
   10bdc:	mov	fp, #0
   10be0:	mov	lr, #0
   10be4:	pop	{r1}		; (ldr r1, [sp], #4)
   10be8:	mov	r2, sp
   10bec:	push	{r2}		; (str r2, [sp, #-4]!)
   10bf0:	push	{r0}		; (str r0, [sp, #-4]!)
   10bf4:	ldr	ip, [pc, #16]	; 10c0c <_start@@Base+0x30>
   10bf8:	push	{ip}		; (str ip, [sp, #-4]!)
   10bfc:	ldr	r0, [pc, #12]	; 10c10 <_start@@Base+0x34>
   10c00:	ldr	r3, [pc, #12]	; 10c14 <_start@@Base+0x38>
   10c04:	bl	10a70 <__libc_start_main@plt>
   10c08:	bl	10ab8 <abort@plt>
   10c0c:	andeq	r1, r1, r4, ror r4
   10c10:	andeq	r0, r1, r4, asr #21
   10c14:	andeq	r1, r1, r4, lsl r4
   10c18:	ldr	r3, [pc, #20]	; 10c34 <_start@@Base+0x58>
   10c1c:	ldr	r2, [pc, #20]	; 10c38 <_start@@Base+0x5c>
   10c20:	add	r3, pc, r3
   10c24:	ldr	r2, [r3, r2]
   10c28:	cmp	r2, #0
   10c2c:	bxeq	lr
   10c30:	b	10a7c <__gmon_start__@plt>
   10c34:	ldrdeq	r1, [r1], -r8
   10c38:	andeq	r0, r0, r8, asr r0
   10c3c:	ldr	r3, [pc, #28]	; 10c60 <_start@@Base+0x84>
   10c40:	ldr	r0, [pc, #28]	; 10c64 <_start@@Base+0x88>
   10c44:	sub	r3, r3, r0
   10c48:	cmp	r3, #6
   10c4c:	bxls	lr
   10c50:	ldr	r3, [pc, #16]	; 10c68 <_start@@Base+0x8c>
   10c54:	cmp	r3, #0
   10c58:	bxeq	lr
   10c5c:	bx	r3
   10c60:	andeq	r2, r2, r7, rrx
   10c64:	andeq	r2, r2, r4, rrx
   10c68:	andeq	r0, r0, r0
   10c6c:	ldr	r1, [pc, #36]	; 10c98 <_start@@Base+0xbc>
   10c70:	ldr	r0, [pc, #36]	; 10c9c <_start@@Base+0xc0>
   10c74:	sub	r1, r1, r0
   10c78:	asr	r1, r1, #2
   10c7c:	add	r1, r1, r1, lsr #31
   10c80:	asrs	r1, r1, #1
   10c84:	bxeq	lr
   10c88:	ldr	r3, [pc, #16]	; 10ca0 <_start@@Base+0xc4>
   10c8c:	cmp	r3, #0
   10c90:	bxeq	lr
   10c94:	bx	r3
   10c98:	andeq	r2, r2, r4, rrx
   10c9c:	andeq	r2, r2, r4, rrx
   10ca0:	andeq	r0, r0, r0
   10ca4:	push	{r4, lr}
   10ca8:	ldr	r4, [pc, #24]	; 10cc8 <_start@@Base+0xec>
   10cac:	ldrb	r3, [r4]
   10cb0:	cmp	r3, #0
   10cb4:	popne	{r4, pc}
   10cb8:	bl	10c3c <_start@@Base+0x60>
   10cbc:	mov	r3, #1
   10cc0:	strb	r3, [r4]
   10cc4:	pop	{r4, pc}
   10cc8:	andeq	r2, r2, ip, rrx
   10ccc:	ldr	r0, [pc, #40]	; 10cfc <_start@@Base+0x120>
   10cd0:	ldr	r3, [r0]
   10cd4:	cmp	r3, #0
   10cd8:	bne	10ce0 <_start@@Base+0x104>
   10cdc:	b	10c6c <_start@@Base+0x90>
   10ce0:	ldr	r3, [pc, #24]	; 10d00 <_start@@Base+0x124>
   10ce4:	cmp	r3, #0
   10ce8:	beq	10cdc <_start@@Base+0x100>
   10cec:	push	{r4, lr}
   10cf0:	blx	r3
   10cf4:	pop	{r4, lr}
   10cf8:	b	10c6c <_start@@Base+0x90>
   10cfc:	andeq	r1, r2, r4, lsl pc
   10d00:	andeq	r0, r0, r0

00010d04 <imprime@@Base>:
   10d04:	push	{r4, r5, r6, lr}
   10d08:	mov	r1, #0
   10d0c:	ldr	r5, [pc, #44]	; 10d40 <imprime@@Base+0x3c>
   10d10:	mov	r6, r0
   10d14:	mov	r0, r6
   10d18:	add	r4, r1, #1
   10d1c:	bl	10e54 <vetor_elemento@@Base>
   10d20:	mov	r1, r4
   10d24:	mov	r2, r0
   10d28:	mov	r0, r5
   10d2c:	bl	10a04 <printf@plt>
   10d30:	cmp	r4, #5
   10d34:	mov	r1, r4
   10d38:	bne	10d14 <imprime@@Base+0x10>
   10d3c:	pop	{r4, r5, r6, pc}
   10d40:	andeq	r1, r1, r4, lsl #9

00010d44 <vetor_novo@@Base>:
   10d44:	push	{r4, lr}
   10d48:	mov	r0, #12
   10d4c:	bl	10a64 <malloc@plt>
   10d50:	cmp	r0, #0
   10d54:	movne	r3, #0
   10d58:	strne	r3, [r0]
   10d5c:	strne	r3, [r0, #4]
   10d60:	strne	r3, [r0, #8]
   10d64:	pop	{r4, pc}

00010d68 <vetor_apaga@@Base>:
   10d68:	push	{r4, r5, r6, lr}
   10d6c:	subs	r4, r0, #0
   10d70:	movne	r5, #0
   10d74:	bne	10d8c <vetor_apaga@@Base+0x24>
   10d78:	pop	{r4, r5, r6, pc}
   10d7c:	ldr	r3, [r4, #8]
   10d80:	ldr	r0, [r3, r5, lsl #2]
   10d84:	bl	10a10 <free@plt>
   10d88:	add	r5, r5, #1
   10d8c:	ldr	r3, [r4]
   10d90:	cmp	r5, r3
   10d94:	blt	10d7c <vetor_apaga@@Base+0x14>
   10d98:	ldr	r0, [r4, #8]
   10d9c:	bl	10a10 <free@plt>
   10da0:	mov	r0, r4
   10da4:	pop	{r4, r5, r6, lr}
   10da8:	b	10a10 <free@plt>

00010dac <vetor_atribui@@Base>:
   10dac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10db0:	mov	r5, r0
   10db4:	clz	r0, r0
   10db8:	lsr	r0, r0, #5
   10dbc:	orrs	r3, r0, r1, lsr #31
   10dc0:	beq	10dd0 <vetor_atribui@@Base+0x24>
   10dc4:	mvn	r4, #0
   10dc8:	mov	r0, r4
   10dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10dd0:	ldr	r3, [r5]
   10dd4:	mov	r4, r1
   10dd8:	cmp	r1, r3
   10ddc:	bge	10dc4 <vetor_atribui@@Base+0x18>
   10de0:	mov	r0, r2
   10de4:	mov	r9, r2
   10de8:	bl	10a88 <strlen@plt>
   10dec:	ldr	r6, [r5, #8]
   10df0:	lsl	sl, r4, #2
   10df4:	ldr	r7, [r6, r4, lsl #2]
   10df8:	mov	r8, r0
   10dfc:	mov	r0, r7
   10e00:	bl	10a88 <strlen@plt>
   10e04:	cmp	r8, r0
   10e08:	bhi	10e20 <vetor_atribui@@Base+0x74>
   10e0c:	ldr	r3, [r5, #8]
   10e10:	mov	r1, r9
   10e14:	ldr	r0, [r3, sl]
   10e18:	bl	10a4c <strcpy@plt>
   10e1c:	b	10dc8 <vetor_atribui@@Base+0x1c>
   10e20:	add	r1, r8, #1
   10e24:	mov	r0, r7
   10e28:	bl	10a34 <realloc@plt>
   10e2c:	ldr	r3, [r5, #8]
   10e30:	str	r0, [r6, r4, lsl #2]
   10e34:	ldr	r3, [r3, r4, lsl #2]
   10e38:	cmp	r3, #0
   10e3c:	bne	10e0c <vetor_atribui@@Base+0x60>
   10e40:	b	10dc4 <vetor_atribui@@Base+0x18>

00010e44 <vetor_tamanho@@Base>:
   10e44:	cmp	r0, #0
   10e48:	ldrne	r0, [r0]
   10e4c:	mvneq	r0, #0
   10e50:	bx	lr

00010e54 <vetor_elemento@@Base>:
   10e54:	lsr	r3, r1, #31
   10e58:	cmp	r0, #0
   10e5c:	orreq	r3, r3, #1
   10e60:	cmp	r3, #0
   10e64:	bne	10e80 <vetor_elemento@@Base+0x2c>
   10e68:	ldr	r2, [r0]
   10e6c:	cmp	r1, r2
   10e70:	bge	10e80 <vetor_elemento@@Base+0x2c>
   10e74:	ldr	r3, [r0, #8]
   10e78:	ldr	r0, [r3, r1, lsl #2]
   10e7c:	bx	lr
   10e80:	mov	r0, #0
   10e84:	bx	lr

00010e88 <vetor_insere@@Base>:
   10e88:	push	{r4, r5, r6, r7, r8, lr}
   10e8c:	mov	r4, r0
   10e90:	clz	r0, r0
   10e94:	lsr	r0, r0, #5
   10e98:	orrs	r3, r0, r2, lsr #31
   10e9c:	beq	10eac <vetor_insere@@Base+0x24>
   10ea0:	mvn	r5, #0
   10ea4:	mov	r0, r5
   10ea8:	pop	{r4, r5, r6, r7, r8, pc}
   10eac:	ldr	r3, [r4]
   10eb0:	mov	r5, r2
   10eb4:	cmp	r2, r3
   10eb8:	bgt	10ea0 <vetor_insere@@Base+0x18>
   10ebc:	ldr	r2, [r4, #4]
   10ec0:	mov	r8, r1
   10ec4:	cmp	r3, r2
   10ec8:	beq	10f1c <vetor_insere@@Base+0x94>
   10ecc:	ldr	r6, [r4]
   10ed0:	sub	r3, r6, #1
   10ed4:	lsl	r2, r6, #2
   10ed8:	cmp	r3, r5
   10edc:	sub	r1, r2, #4
   10ee0:	ldr	r7, [r4, #8]
   10ee4:	bge	10f4c <vetor_insere@@Base+0xc4>
   10ee8:	mov	r0, r8
   10eec:	bl	10a88 <strlen@plt>
   10ef0:	mov	r1, #1
   10ef4:	add	r0, r0, r1
   10ef8:	bl	109e0 <calloc@plt>
   10efc:	cmp	r0, #0
   10f00:	str	r0, [r7, r5, lsl #2]
   10f04:	beq	10ea0 <vetor_insere@@Base+0x18>
   10f08:	mov	r1, r8
   10f0c:	add	r6, r6, #1
   10f10:	bl	10a4c <strcpy@plt>
   10f14:	str	r6, [r4]
   10f18:	b	10ea4 <vetor_insere@@Base+0x1c>
   10f1c:	cmp	r3, #0
   10f20:	moveq	r3, #1
   10f24:	lslne	r3, r3, #1
   10f28:	str	r3, [r4, #4]
   10f2c:	ldr	r1, [r4, #4]
   10f30:	ldr	r0, [r4, #8]
   10f34:	lsl	r1, r1, #2
   10f38:	bl	10a34 <realloc@plt>
   10f3c:	cmp	r0, #0
   10f40:	str	r0, [r4, #8]
   10f44:	bne	10ecc <vetor_insere@@Base+0x44>
   10f48:	b	10ea0 <vetor_insere@@Base+0x18>
   10f4c:	ldr	r0, [r7, r1]
   10f50:	sub	r3, r3, #1
   10f54:	str	r0, [r7, r2]
   10f58:	mov	r2, r1
   10f5c:	b	10ed8 <vetor_insere@@Base+0x50>

00010f60 <vetor_remove@@Base>:
   10f60:	push	{r4, r5, r6, lr}
   10f64:	mov	r5, r0
   10f68:	clz	r0, r0
   10f6c:	lsr	r0, r0, #5
   10f70:	orrs	r3, r0, r1, lsr #31
   10f74:	bne	10fd8 <vetor_remove@@Base+0x78>
   10f78:	ldr	r3, [r5]
   10f7c:	cmp	r1, r3
   10f80:	bge	10fd8 <vetor_remove@@Base+0x78>
   10f84:	ldr	r3, [r5, #8]
   10f88:	mov	r4, r1
   10f8c:	lsl	r6, r1, #2
   10f90:	ldr	r0, [r3, r1, lsl #2]
   10f94:	bl	10a10 <free@plt>
   10f98:	add	r4, r4, #1
   10f9c:	mov	r3, r6
   10fa0:	ldr	r2, [r5]
   10fa4:	add	r1, r3, #4
   10fa8:	cmp	r4, r2
   10fac:	blt	10fc0 <vetor_remove@@Base+0x60>
   10fb0:	sub	r2, r2, #1
   10fb4:	str	r2, [r5]
   10fb8:	mov	r0, #0
   10fbc:	pop	{r4, r5, r6, pc}
   10fc0:	ldr	r2, [r5, #8]
   10fc4:	add	r4, r4, #1
   10fc8:	ldr	r0, [r2, r1]
   10fcc:	str	r0, [r2, r3]
   10fd0:	mov	r3, r1
   10fd4:	b	10fa0 <vetor_remove@@Base+0x40>
   10fd8:	mvn	r0, #0
   10fdc:	pop	{r4, r5, r6, pc}

00010fe0 <vetor_pesquisa@@Base>:
   10fe0:	push	{r4, r5, r6, r7, r8, lr}
   10fe4:	subs	r5, r0, #0
   10fe8:	movne	r6, r1
   10fec:	ldrne	r7, [r5]
   10ff0:	movne	r4, #0
   10ff4:	bne	11020 <vetor_pesquisa@@Base+0x40>
   10ff8:	mvn	r4, #0
   10ffc:	mov	r0, r4
   11000:	pop	{r4, r5, r6, r7, r8, pc}
   11004:	ldr	r3, [r5, #8]
   11008:	mov	r1, r6
   1100c:	ldr	r0, [r3, r4, lsl #2]
   11010:	bl	109f8 <strcmp@plt>
   11014:	cmp	r0, #0
   11018:	beq	10ffc <vetor_pesquisa@@Base+0x1c>
   1101c:	add	r4, r4, #1
   11020:	cmp	r4, r7
   11024:	blt	11004 <vetor_pesquisa@@Base+0x24>
   11028:	b	10ff8 <vetor_pesquisa@@Base+0x18>

0001102c <vetor_ordena@@Base>:
   1102c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11030:	subs	r5, r0, #0
   11034:	movne	r4, #1
   11038:	bne	11080 <vetor_ordena@@Base+0x54>
   1103c:	mvn	r0, #0
   11040:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11044:	ldr	r8, [r5, #8]
   11048:	mov	r6, r4
   1104c:	add	r7, r8, r4, lsl #2
   11050:	ldr	r9, [r8, r4, lsl #2]
   11054:	ldr	r1, [r7, #-4]
   11058:	mov	r0, r9
   1105c:	bl	109f8 <strcmp@plt>
   11060:	cmp	r0, #0
   11064:	bge	11078 <vetor_ordena@@Base+0x4c>
   11068:	ldr	r3, [r7, #-4]!
   1106c:	subs	r6, r6, #1
   11070:	str	r3, [r7, #4]
   11074:	bne	11054 <vetor_ordena@@Base+0x28>
   11078:	add	r4, r4, #1
   1107c:	str	r9, [r8, r6, lsl #2]
   11080:	ldr	r3, [r5]
   11084:	cmp	r4, r3
   11088:	blt	11044 <vetor_ordena@@Base+0x18>
   1108c:	mov	r0, #0
   11090:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00011094 <vetor_concatena@@Base>:
   11094:	cmp	r1, #0
   11098:	cmpne	r0, #0
   1109c:	push	{r4, r5, r6, lr}
   110a0:	moveq	r6, #0
   110a4:	beq	110fc <vetor_concatena@@Base+0x68>
   110a8:	mov	r4, r1
   110ac:	mov	r5, r0
   110b0:	bl	10d44 <vetor_novo@@Base>
   110b4:	ldr	r2, [r5]
   110b8:	ldr	r1, [r4, #4]
   110bc:	mov	r6, r0
   110c0:	ldr	r0, [r4]
   110c4:	add	r3, r2, r0, lsl #2
   110c8:	str	r3, [r6, #8]
   110cc:	ldr	r3, [r5, #4]
   110d0:	ldr	r0, [r2, r0, lsl #2]
   110d4:	add	r3, r3, r1
   110d8:	str	r3, [r6, #4]
   110dc:	ldr	r3, [r5, #8]
   110e0:	ldr	r1, [r3]
   110e4:	bl	10a4c <strcpy@plt>
   110e8:	ldr	r2, [r4, #8]
   110ec:	ldr	r3, [r6, #8]
   110f0:	ldr	r1, [r2]
   110f4:	ldr	r0, [r3]
   110f8:	bl	10a40 <strcat@plt>
   110fc:	mov	r0, r6
   11100:	pop	{r4, r5, r6, pc}

00011104 <vetor_inverte@@Base>:
   11104:	cmp	r0, #0
   11108:	beq	1115c <vetor_inverte@@Base+0x58>
   1110c:	ldr	r2, [r0]
   11110:	cmp	r2, #0
   11114:	ble	1115c <vetor_inverte@@Base+0x58>
   11118:	mov	r3, #0
   1111c:	push	{r4, lr}
   11120:	sub	r1, r2, r3
   11124:	cmp	r1, r2
   11128:	movlt	ip, r1
   1112c:	movge	ip, r2
   11130:	cmp	r3, ip
   11134:	blt	11140 <vetor_inverte@@Base+0x3c>
   11138:	mov	r0, #0
   1113c:	pop	{r4, pc}
   11140:	ldr	ip, [r0, #8]
   11144:	ldr	lr, [ip, r3, lsl #2]
   11148:	ldr	r4, [ip, r1, lsl #2]
   1114c:	str	r4, [ip, r3, lsl #2]
   11150:	str	lr, [ip, r1, lsl #2]
   11154:	add	r3, r3, #1
   11158:	b	11120 <vetor_inverte@@Base+0x1c>
   1115c:	mov	r0, #0
   11160:	bx	lr

00011164 <vetor_baralha@@Base>:
   11164:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11168:	mov	r4, #0
   1116c:	ldr	r7, [r0]
   11170:	bl	10d44 <vetor_novo@@Base>
   11174:	add	r8, r7, #1
   11178:	mov	r6, r0
   1117c:	add	r0, sp, #4
   11180:	bl	10a28 <time@plt>
   11184:	bl	10a94 <srand@plt>
   11188:	cmp	r4, r7
   1118c:	blt	1119c <vetor_baralha@@Base+0x38>
   11190:	mov	r0, r6
   11194:	add	sp, sp, #12
   11198:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1119c:	bl	10aa0 <rand@plt>
   111a0:	mov	r1, r8
   111a4:	bl	113e4 <vetor_baralha@@Base+0x280>
   111a8:	ldr	r5, [r6, #8]
   111ac:	ldr	r9, [r5, r4, lsl #2]
   111b0:	ldr	r3, [r5, r1, lsl #2]
   111b4:	str	r3, [r5, r4, lsl #2]
   111b8:	str	r9, [r5, r1, lsl #2]
   111bc:	add	r4, r4, #1
   111c0:	b	11188 <vetor_baralha@@Base+0x24>
   111c4:	cmp	r1, #0
   111c8:	beq	113d4 <vetor_baralha@@Base+0x270>
   111cc:	eor	ip, r0, r1
   111d0:	rsbmi	r1, r1, #0
   111d4:	subs	r2, r1, #1
   111d8:	beq	113a0 <vetor_baralha@@Base+0x23c>
   111dc:	movs	r3, r0
   111e0:	rsbmi	r3, r0, #0
   111e4:	cmp	r3, r1
   111e8:	bls	113ac <vetor_baralha@@Base+0x248>
   111ec:	tst	r1, r2
   111f0:	beq	113bc <vetor_baralha@@Base+0x258>
   111f4:	clz	r2, r3
   111f8:	clz	r0, r1
   111fc:	sub	r2, r0, r2
   11200:	rsbs	r2, r2, #31
   11204:	addne	r2, r2, r2, lsl #1
   11208:	mov	r0, #0
   1120c:	addne	pc, pc, r2, lsl #2
   11210:	nop			; (mov r0, r0)
   11214:	cmp	r3, r1, lsl #31
   11218:	adc	r0, r0, r0
   1121c:	subcs	r3, r3, r1, lsl #31
   11220:	cmp	r3, r1, lsl #30
   11224:	adc	r0, r0, r0
   11228:	subcs	r3, r3, r1, lsl #30
   1122c:	cmp	r3, r1, lsl #29
   11230:	adc	r0, r0, r0
   11234:	subcs	r3, r3, r1, lsl #29
   11238:	cmp	r3, r1, lsl #28
   1123c:	adc	r0, r0, r0
   11240:	subcs	r3, r3, r1, lsl #28
   11244:	cmp	r3, r1, lsl #27
   11248:	adc	r0, r0, r0
   1124c:	subcs	r3, r3, r1, lsl #27
   11250:	cmp	r3, r1, lsl #26
   11254:	adc	r0, r0, r0
   11258:	subcs	r3, r3, r1, lsl #26
   1125c:	cmp	r3, r1, lsl #25
   11260:	adc	r0, r0, r0
   11264:	subcs	r3, r3, r1, lsl #25
   11268:	cmp	r3, r1, lsl #24
   1126c:	adc	r0, r0, r0
   11270:	subcs	r3, r3, r1, lsl #24
   11274:	cmp	r3, r1, lsl #23
   11278:	adc	r0, r0, r0
   1127c:	subcs	r3, r3, r1, lsl #23
   11280:	cmp	r3, r1, lsl #22
   11284:	adc	r0, r0, r0
   11288:	subcs	r3, r3, r1, lsl #22
   1128c:	cmp	r3, r1, lsl #21
   11290:	adc	r0, r0, r0
   11294:	subcs	r3, r3, r1, lsl #21
   11298:	cmp	r3, r1, lsl #20
   1129c:	adc	r0, r0, r0
   112a0:	subcs	r3, r3, r1, lsl #20
   112a4:	cmp	r3, r1, lsl #19
   112a8:	adc	r0, r0, r0
   112ac:	subcs	r3, r3, r1, lsl #19
   112b0:	cmp	r3, r1, lsl #18
   112b4:	adc	r0, r0, r0
   112b8:	subcs	r3, r3, r1, lsl #18
   112bc:	cmp	r3, r1, lsl #17
   112c0:	adc	r0, r0, r0
   112c4:	subcs	r3, r3, r1, lsl #17
   112c8:	cmp	r3, r1, lsl #16
   112cc:	adc	r0, r0, r0
   112d0:	subcs	r3, r3, r1, lsl #16
   112d4:	cmp	r3, r1, lsl #15
   112d8:	adc	r0, r0, r0
   112dc:	subcs	r3, r3, r1, lsl #15
   112e0:	cmp	r3, r1, lsl #14
   112e4:	adc	r0, r0, r0
   112e8:	subcs	r3, r3, r1, lsl #14
   112ec:	cmp	r3, r1, lsl #13
   112f0:	adc	r0, r0, r0
   112f4:	subcs	r3, r3, r1, lsl #13
   112f8:	cmp	r3, r1, lsl #12
   112fc:	adc	r0, r0, r0
   11300:	subcs	r3, r3, r1, lsl #12
   11304:	cmp	r3, r1, lsl #11
   11308:	adc	r0, r0, r0
   1130c:	subcs	r3, r3, r1, lsl #11
   11310:	cmp	r3, r1, lsl #10
   11314:	adc	r0, r0, r0
   11318:	subcs	r3, r3, r1, lsl #10
   1131c:	cmp	r3, r1, lsl #9
   11320:	adc	r0, r0, r0
   11324:	subcs	r3, r3, r1, lsl #9
   11328:	cmp	r3, r1, lsl #8
   1132c:	adc	r0, r0, r0
   11330:	subcs	r3, r3, r1, lsl #8
   11334:	cmp	r3, r1, lsl #7
   11338:	adc	r0, r0, r0
   1133c:	subcs	r3, r3, r1, lsl #7
   11340:	cmp	r3, r1, lsl #6
   11344:	adc	r0, r0, r0
   11348:	subcs	r3, r3, r1, lsl #6
   1134c:	cmp	r3, r1, lsl #5
   11350:	adc	r0, r0, r0
   11354:	subcs	r3, r3, r1, lsl #5
   11358:	cmp	r3, r1, lsl #4
   1135c:	adc	r0, r0, r0
   11360:	subcs	r3, r3, r1, lsl #4
   11364:	cmp	r3, r1, lsl #3
   11368:	adc	r0, r0, r0
   1136c:	subcs	r3, r3, r1, lsl #3
   11370:	cmp	r3, r1, lsl #2
   11374:	adc	r0, r0, r0
   11378:	subcs	r3, r3, r1, lsl #2
   1137c:	cmp	r3, r1, lsl #1
   11380:	adc	r0, r0, r0
   11384:	subcs	r3, r3, r1, lsl #1
   11388:	cmp	r3, r1
   1138c:	adc	r0, r0, r0
   11390:	subcs	r3, r3, r1
   11394:	cmp	ip, #0
   11398:	rsbmi	r0, r0, #0
   1139c:	bx	lr
   113a0:	teq	ip, r0
   113a4:	rsbmi	r0, r0, #0
   113a8:	bx	lr
   113ac:	movcc	r0, #0
   113b0:	asreq	r0, ip, #31
   113b4:	orreq	r0, r0, #1
   113b8:	bx	lr
   113bc:	clz	r2, r1
   113c0:	rsb	r2, r2, #31
   113c4:	cmp	ip, #0
   113c8:	lsr	r0, r3, r2
   113cc:	rsbmi	r0, r0, #0
   113d0:	bx	lr
   113d4:	cmp	r0, #0
   113d8:	mvngt	r0, #-2147483648	; 0x80000000
   113dc:	movlt	r0, #-2147483648	; 0x80000000
   113e0:	b	11404 <vetor_baralha@@Base+0x2a0>
   113e4:	cmp	r1, #0
   113e8:	beq	113d4 <vetor_baralha@@Base+0x270>
   113ec:	push	{r0, r1, lr}
   113f0:	bl	111cc <vetor_baralha@@Base+0x68>
   113f4:	pop	{r1, r2, lr}
   113f8:	mul	r3, r2, r0
   113fc:	sub	r1, r1, r3
   11400:	bx	lr
   11404:	push	{r1, lr}
   11408:	mov	r0, #8
   1140c:	bl	109ec <raise@plt>
   11410:	pop	{r1, pc}

00011414 <__libc_csu_init@@Base>:
   11414:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11418:	mov	r7, r0
   1141c:	ldr	r6, [pc, #72]	; 1146c <__libc_csu_init@@Base+0x58>
   11420:	ldr	r5, [pc, #72]	; 11470 <__libc_csu_init@@Base+0x5c>
   11424:	add	r6, pc, r6
   11428:	add	r5, pc, r5
   1142c:	sub	r6, r6, r5
   11430:	mov	r8, r1
   11434:	mov	r9, r2
   11438:	bl	109c0 <calloc@plt-0x20>
   1143c:	asrs	r6, r6, #2
   11440:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11444:	mov	r4, #0
   11448:	add	r4, r4, #1
   1144c:	ldr	r3, [r5], #4
   11450:	mov	r2, r9
   11454:	mov	r1, r8
   11458:	mov	r0, r7
   1145c:	blx	r3
   11460:	cmp	r6, r4
   11464:	bne	11448 <__libc_csu_init@@Base+0x34>
   11468:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1146c:	andeq	r0, r1, r4, ror #21
   11470:	ldrdeq	r0, [r1], -ip

00011474 <__libc_csu_fini@@Base>:
   11474:	bx	lr

Disassembly of section .fini:

00011478 <.fini>:
   11478:	push	{r3, lr}
   1147c:	pop	{r3, pc}
