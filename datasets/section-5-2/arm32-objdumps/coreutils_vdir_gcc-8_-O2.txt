
../repos/coreutils/src/vdir:     file format elf32-littlearm


Disassembly of section .init:

00011838 <.init>:
   11838:	push	{r3, lr}
   1183c:	bl	13cac <__assert_fail@plt+0x1f38>
   11840:	pop	{r3, pc}

Disassembly of section .plt:

00011844 <calloc@plt-0x14>:
   11844:	push	{lr}		; (str lr, [sp, #-4]!)
   11848:	ldr	lr, [pc, #4]	; 11854 <calloc@plt-0x4>
   1184c:	add	lr, pc, lr
   11850:	ldr	pc, [lr, #8]!
   11854:	andeq	r8, r2, ip, lsr #15

00011858 <calloc@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #40, 20	; 0x28000
   11860:	ldr	pc, [ip, #1964]!	; 0x7ac

00011864 <fputs_unlocked@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #40, 20	; 0x28000
   1186c:	ldr	pc, [ip, #1956]!	; 0x7a4

00011870 <cap_to_text@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #40, 20	; 0x28000
   11878:	ldr	pc, [ip, #1948]!	; 0x79c

0001187c <raise@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #40, 20	; 0x28000
   11884:	ldr	pc, [ip, #1940]!	; 0x794

00011888 <gmtime_r@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #40, 20	; 0x28000
   11890:	ldr	pc, [ip, #1932]!	; 0x78c

00011894 <getpwnam@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #40, 20	; 0x28000
   1189c:	ldr	pc, [ip, #1924]!	; 0x784

000118a0 <strcmp@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #40, 20	; 0x28000
   118a8:	ldr	pc, [ip, #1916]!	; 0x77c

000118ac <getpwuid@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #40, 20	; 0x28000
   118b4:	ldr	pc, [ip, #1908]!	; 0x774

000118b8 <mktime@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #40, 20	; 0x28000
   118c0:	ldr	pc, [ip, #1900]!	; 0x76c

000118c4 <fflush@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #40, 20	; 0x28000
   118cc:	ldr	pc, [ip, #1892]!	; 0x764

000118d0 <wcwidth@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #40, 20	; 0x28000
   118d8:	ldr	pc, [ip, #1884]!	; 0x75c

000118dc <sigprocmask@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #40, 20	; 0x28000
   118e4:	ldr	pc, [ip, #1876]!	; 0x754

000118e8 <_setjmp@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #40, 20	; 0x28000
   118f0:	ldr	pc, [ip, #1868]!	; 0x74c

000118f4 <memmove@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #40, 20	; 0x28000
   118fc:	ldr	pc, [ip, #1860]!	; 0x744

00011900 <free@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #40, 20	; 0x28000
   11908:	ldr	pc, [ip, #1852]!	; 0x73c

0001190c <faccessat@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #40, 20	; 0x28000
   11914:	ldr	pc, [ip, #1844]!	; 0x734

00011918 <clock_gettime@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #40, 20	; 0x28000
   11920:	ldr	pc, [ip, #1836]!	; 0x72c

00011924 <_exit@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #40, 20	; 0x28000
   1192c:	ldr	pc, [ip, #1828]!	; 0x724

00011930 <memcpy@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #40, 20	; 0x28000
   11938:	ldr	pc, [ip, #1820]!	; 0x71c

0001193c <__strtoull_internal@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #40, 20	; 0x28000
   11944:	ldr	pc, [ip, #1812]!	; 0x714

00011948 <mbsinit@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #40, 20	; 0x28000
   11950:	ldr	pc, [ip, #1804]!	; 0x70c

00011954 <signal@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #40, 20	; 0x28000
   1195c:	ldr	pc, [ip, #1796]!	; 0x704

00011960 <fwrite_unlocked@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #40, 20	; 0x28000
   11968:	ldr	pc, [ip, #1788]!	; 0x6fc

0001196c <memcmp@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #40, 20	; 0x28000
   11974:	ldr	pc, [ip, #1780]!	; 0x6f4

00011978 <fputc_unlocked@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #40, 20	; 0x28000
   11980:	ldr	pc, [ip, #1772]!	; 0x6ec

00011984 <dcgettext@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #40, 20	; 0x28000
   1198c:	ldr	pc, [ip, #1764]!	; 0x6e4

00011990 <realloc@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #40, 20	; 0x28000
   11998:	ldr	pc, [ip, #1756]!	; 0x6dc

0001199c <sigismember@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #40, 20	; 0x28000
   119a4:	ldr	pc, [ip, #1748]!	; 0x6d4

000119a8 <fgetfilecon@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #40, 20	; 0x28000
   119b0:	ldr	pc, [ip, #1740]!	; 0x6cc

000119b4 <localtime_r@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #40, 20	; 0x28000
   119bc:	ldr	pc, [ip, #1732]!	; 0x6c4

000119c0 <textdomain@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #40, 20	; 0x28000
   119c8:	ldr	pc, [ip, #1724]!	; 0x6bc

000119cc <iswcntrl@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #40, 20	; 0x28000
   119d4:	ldr	pc, [ip, #1716]!	; 0x6b4

000119d8 <rawmemchr@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #40, 20	; 0x28000
   119e0:	ldr	pc, [ip, #1708]!	; 0x6ac

000119e4 <fflush_unlocked@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #40, 20	; 0x28000
   119ec:	ldr	pc, [ip, #1700]!	; 0x6a4

000119f0 <iswprint@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #40, 20	; 0x28000
   119f8:	ldr	pc, [ip, #1692]!	; 0x69c

000119fc <tzset@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #40, 20	; 0x28000
   11a04:	ldr	pc, [ip, #1684]!	; 0x694

00011a08 <readlink@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #40, 20	; 0x28000
   11a10:	ldr	pc, [ip, #1676]!	; 0x68c

00011a14 <sigaction@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #40, 20	; 0x28000
   11a1c:	ldr	pc, [ip, #1668]!	; 0x684

00011a20 <__memcpy_chk@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #40, 20	; 0x28000
   11a28:	ldr	pc, [ip, #1660]!	; 0x67c

00011a2c <fwrite@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #40, 20	; 0x28000
   11a34:	ldr	pc, [ip, #1652]!	; 0x674

00011a38 <ioctl@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #40, 20	; 0x28000
   11a40:	ldr	pc, [ip, #1644]!	; 0x66c

00011a44 <lseek64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #40, 20	; 0x28000
   11a4c:	ldr	pc, [ip, #1636]!	; 0x664

00011a50 <__ctype_get_mb_cur_max@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #40, 20	; 0x28000
   11a58:	ldr	pc, [ip, #1628]!	; 0x65c

00011a5c <strcpy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #40, 20	; 0x28000
   11a64:	ldr	pc, [ip, #1620]!	; 0x654

00011a68 <__fpending@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #40, 20	; 0x28000
   11a70:	ldr	pc, [ip, #1612]!	; 0x64c

00011a74 <mbrtowc@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #40, 20	; 0x28000
   11a7c:	ldr	pc, [ip, #1604]!	; 0x644

00011a80 <wcstombs@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #40, 20	; 0x28000
   11a88:	ldr	pc, [ip, #1596]!	; 0x63c

00011a8c <error@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #40, 20	; 0x28000
   11a94:	ldr	pc, [ip, #1588]!	; 0x634

00011a98 <gethostname@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #40, 20	; 0x28000
   11aa0:	ldr	pc, [ip, #1580]!	; 0x62c

00011aa4 <opendir@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #40, 20	; 0x28000
   11aac:	ldr	pc, [ip, #1572]!	; 0x624

00011ab0 <fnmatch@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #40, 20	; 0x28000
   11ab8:	ldr	pc, [ip, #1564]!	; 0x61c

00011abc <strcoll@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #40, 20	; 0x28000
   11ac4:	ldr	pc, [ip, #1556]!	; 0x614

00011ac8 <getenv@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #40, 20	; 0x28000
   11ad0:	ldr	pc, [ip, #1548]!	; 0x60c

00011ad4 <lgetfilecon@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #40, 20	; 0x28000
   11adc:	ldr	pc, [ip, #1540]!	; 0x604

00011ae0 <malloc@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #40, 20	; 0x28000
   11ae8:	ldr	pc, [ip, #1532]!	; 0x5fc

00011aec <sigaddset@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #40, 20	; 0x28000
   11af4:	ldr	pc, [ip, #1524]!	; 0x5f4

00011af8 <__libc_start_main@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #40, 20	; 0x28000
   11b00:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b04 <strftime@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #40, 20	; 0x28000
   11b0c:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b10 <__freading@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #40, 20	; 0x28000
   11b18:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b1c <__ctype_tolower_loc@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #40, 20	; 0x28000
   11b24:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b28 <__ctype_toupper_loc@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #40, 20	; 0x28000
   11b30:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b34 <__gmon_start__@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #40, 20	; 0x28000
   11b3c:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b40 <mempcpy@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #40, 20	; 0x28000
   11b48:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b4c <getopt_long@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #40, 20	; 0x28000
   11b54:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b58 <__ctype_b_loc@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #40, 20	; 0x28000
   11b60:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b64 <getcwd@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #40, 20	; 0x28000
   11b6c:	ldr	pc, [ip, #1444]!	; 0x5a4

00011b70 <exit@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #40, 20	; 0x28000
   11b78:	ldr	pc, [ip, #1436]!	; 0x59c

00011b7c <getfilecon@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #40, 20	; 0x28000
   11b84:	ldr	pc, [ip, #1428]!	; 0x594

00011b88 <tcgetpgrp@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #40, 20	; 0x28000
   11b90:	ldr	pc, [ip, #1420]!	; 0x58c

00011b94 <strlen@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #40, 20	; 0x28000
   11b9c:	ldr	pc, [ip, #1412]!	; 0x584

00011ba0 <strchr@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #40, 20	; 0x28000
   11ba8:	ldr	pc, [ip, #1404]!	; 0x57c

00011bac <setenv@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #40, 20	; 0x28000
   11bb4:	ldr	pc, [ip, #1396]!	; 0x574

00011bb8 <__errno_location@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #40, 20	; 0x28000
   11bc0:	ldr	pc, [ip, #1388]!	; 0x56c

00011bc4 <__sprintf_chk@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #40, 20	; 0x28000
   11bcc:	ldr	pc, [ip, #1380]!	; 0x564

00011bd0 <snprintf@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #40, 20	; 0x28000
   11bd8:	ldr	pc, [ip, #1372]!	; 0x55c

00011bdc <__cxa_atexit@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #40, 20	; 0x28000
   11be4:	ldr	pc, [ip, #1364]!	; 0x554

00011be8 <memset@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #40, 20	; 0x28000
   11bf0:	ldr	pc, [ip, #1356]!	; 0x54c

00011bf4 <__printf_chk@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #40, 20	; 0x28000
   11bfc:	ldr	pc, [ip, #1348]!	; 0x544

00011c00 <stpncpy@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #40, 20	; 0x28000
   11c08:	ldr	pc, [ip, #1340]!	; 0x53c

00011c0c <fileno@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #40, 20	; 0x28000
   11c14:	ldr	pc, [ip, #1332]!	; 0x534

00011c18 <__fprintf_chk@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #40, 20	; 0x28000
   11c20:	ldr	pc, [ip, #1324]!	; 0x52c

00011c24 <fclose@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #40, 20	; 0x28000
   11c2c:	ldr	pc, [ip, #1316]!	; 0x524

00011c30 <fseeko64@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #40, 20	; 0x28000
   11c38:	ldr	pc, [ip, #1308]!	; 0x51c

00011c3c <statx@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #40, 20	; 0x28000
   11c44:	ldr	pc, [ip, #1300]!	; 0x514

00011c48 <__overflow@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #40, 20	; 0x28000
   11c50:	ldr	pc, [ip, #1292]!	; 0x50c

00011c54 <setlocale@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #40, 20	; 0x28000
   11c5c:	ldr	pc, [ip, #1284]!	; 0x504

00011c60 <sigemptyset@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #40, 20	; 0x28000
   11c68:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c6c <wcswidth@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #40, 20	; 0x28000
   11c74:	ldr	pc, [ip, #1268]!	; 0x4f4

00011c78 <strrchr@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #40, 20	; 0x28000
   11c80:	ldr	pc, [ip, #1260]!	; 0x4ec

00011c84 <cap_get_file@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #40, 20	; 0x28000
   11c8c:	ldr	pc, [ip, #1252]!	; 0x4e4

00011c90 <nl_langinfo@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #40, 20	; 0x28000
   11c98:	ldr	pc, [ip, #1244]!	; 0x4dc

00011c9c <localeconv@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #40, 20	; 0x28000
   11ca4:	ldr	pc, [ip, #1236]!	; 0x4d4

00011ca8 <mbstowcs@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #40, 20	; 0x28000
   11cb0:	ldr	pc, [ip, #1228]!	; 0x4cc

00011cb4 <readdir64@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #40, 20	; 0x28000
   11cbc:	ldr	pc, [ip, #1220]!	; 0x4c4

00011cc0 <timegm@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #40, 20	; 0x28000
   11cc8:	ldr	pc, [ip, #1212]!	; 0x4bc

00011ccc <cap_free@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #40, 20	; 0x28000
   11cd4:	ldr	pc, [ip, #1204]!	; 0x4b4

00011cd8 <dirfd@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #40, 20	; 0x28000
   11ce0:	ldr	pc, [ip, #1196]!	; 0x4ac

00011ce4 <freecon@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #40, 20	; 0x28000
   11cec:	ldr	pc, [ip, #1188]!	; 0x4a4

00011cf0 <bindtextdomain@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #40, 20	; 0x28000
   11cf8:	ldr	pc, [ip, #1180]!	; 0x49c

00011cfc <__xstat64@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #40, 20	; 0x28000
   11d04:	ldr	pc, [ip, #1172]!	; 0x494

00011d08 <isatty@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #40, 20	; 0x28000
   11d10:	ldr	pc, [ip, #1164]!	; 0x48c

00011d14 <unsetenv@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #40, 20	; 0x28000
   11d1c:	ldr	pc, [ip, #1156]!	; 0x484

00011d20 <strncmp@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #40, 20	; 0x28000
   11d28:	ldr	pc, [ip, #1148]!	; 0x47c

00011d2c <abort@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #40, 20	; 0x28000
   11d34:	ldr	pc, [ip, #1140]!	; 0x474

00011d38 <closedir@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #40, 20	; 0x28000
   11d40:	ldr	pc, [ip, #1132]!	; 0x46c

00011d44 <getgrgid@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #40, 20	; 0x28000
   11d4c:	ldr	pc, [ip, #1124]!	; 0x464

00011d50 <getgrnam@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #40, 20	; 0x28000
   11d58:	ldr	pc, [ip, #1116]!	; 0x45c

00011d5c <__snprintf_chk@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #40, 20	; 0x28000
   11d64:	ldr	pc, [ip, #1108]!	; 0x454

00011d68 <strspn@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #40, 20	; 0x28000
   11d70:	ldr	pc, [ip, #1100]!	; 0x44c

00011d74 <__assert_fail@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #40, 20	; 0x28000
   11d7c:	ldr	pc, [ip, #1092]!	; 0x444

Disassembly of section .text:

00011d80 <_obstack_begin@@Base-0xe2b8>:
   11d80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11d84:	movw	r4, #41776	; 0xa330
   11d88:	movt	r4, #3
   11d8c:	add	r3, r4, #4016	; 0xfb0
   11d90:	strd	r6, [sp, #8]
   11d94:	mov	r6, r0
   11d98:	sub	r3, r3, #8
   11d9c:	strd	r8, [sp, #16]
   11da0:	movw	r5, #49960	; 0xc328
   11da4:	movt	r5, #3
   11da8:	strd	sl, [sp, #24]
   11dac:	mov	fp, r1
   11db0:	str	lr, [sp, #32]
   11db4:	sub	sp, sp, #84	; 0x54
   11db8:	ldr	r0, [r1]
   11dbc:	add	sl, sp, #64	; 0x40
   11dc0:	str	r3, [sp, #52]	; 0x34
   11dc4:	bl	202cc <_obstack_memory_used@@Base+0x34>
   11dc8:	movw	r1, #37260	; 0x918c
   11dcc:	movt	r1, #2
   11dd0:	ldr	r7, [pc, #4048]	; 12da8 <__assert_fail@plt+0x1034>
   11dd4:	mov	r0, #6
   11dd8:	bl	11c54 <setlocale@plt>
   11ddc:	movw	r1, #34880	; 0x8840
   11de0:	movt	r1, #2
   11de4:	movw	r0, #34688	; 0x8780
   11de8:	movt	r0, #2
   11dec:	bl	11cf0 <bindtextdomain@plt>
   11df0:	movw	r0, #34688	; 0x8780
   11df4:	movt	r0, #2
   11df8:	bl	119c0 <textdomain@plt>
   11dfc:	mov	r2, #2
   11e00:	movw	r3, #41668	; 0xa2c4
   11e04:	movt	r3, #3
   11e08:	movw	r0, #43212	; 0xa8cc
   11e0c:	movt	r0, #1
   11e10:	str	r2, [r3]
   11e14:	bl	2502c <_obstack_memory_used@@Base+0x4d94>
   11e18:	mov	r3, #0
   11e1c:	mvn	r2, #0
   11e20:	mov	r9, r3
   11e24:	mov	r1, #-2147483648	; 0x80000000
   11e28:	str	r3, [r4, #3080]	; 0xc08
   11e2c:	str	r3, [sp, #48]	; 0x30
   11e30:	str	r3, [r4, #3440]	; 0xd70
   11e34:	mov	r3, #1
   11e38:	str	r2, [sp, #24]
   11e3c:	strb	r3, [r5, #-3999]	; 0xfffff061
   11e40:	str	r2, [sp, #28]
   11e44:	str	r2, [sp, #32]
   11e48:	str	r2, [sp, #36]	; 0x24
   11e4c:	str	r2, [sp, #40]	; 0x28
   11e50:	str	r2, [sp, #44]	; 0x2c
   11e54:	str	r1, [r4, #4040]	; 0xfc8
   11e58:	str	r2, [r4, #4044]	; 0xfcc
   11e5c:	mvn	ip, #0
   11e60:	movw	r2, #34904	; 0x8858
   11e64:	movt	r2, #2
   11e68:	mov	r3, r7
   11e6c:	str	sl, [sp]
   11e70:	mov	r1, fp
   11e74:	mov	r0, r6
   11e78:	str	ip, [sp, #64]	; 0x40
   11e7c:	bl	11b4c <getopt_long@plt>
   11e80:	cmn	r0, #1
   11e84:	beq	122ec <__assert_fail@plt+0x578>
   11e88:	add	r0, r0, #3
   11e8c:	cmp	r0, #276	; 0x114
   11e90:	ldrls	pc, [pc, r0, lsl #2]
   11e94:	b	13ab4 <__assert_fail@plt+0x1d40>
   11e98:	andeq	r2, r1, r0, lsr #19
   11e9c:	andeq	r3, r1, r0, lsl sl
   11ea0:			; <UNDEFINED> instruction: 0x00013ab4
   11ea4:			; <UNDEFINED> instruction: 0x00013ab4
   11ea8:			; <UNDEFINED> instruction: 0x00013ab4
   11eac:			; <UNDEFINED> instruction: 0x00013ab4
   11eb0:			; <UNDEFINED> instruction: 0x00013ab4
   11eb4:			; <UNDEFINED> instruction: 0x00013ab4
   11eb8:			; <UNDEFINED> instruction: 0x00013ab4
   11ebc:			; <UNDEFINED> instruction: 0x00013ab4
   11ec0:			; <UNDEFINED> instruction: 0x00013ab4
   11ec4:			; <UNDEFINED> instruction: 0x00013ab4
   11ec8:			; <UNDEFINED> instruction: 0x00013ab4
   11ecc:			; <UNDEFINED> instruction: 0x00013ab4
   11ed0:			; <UNDEFINED> instruction: 0x00013ab4
   11ed4:			; <UNDEFINED> instruction: 0x00013ab4
   11ed8:			; <UNDEFINED> instruction: 0x00013ab4
   11edc:			; <UNDEFINED> instruction: 0x00013ab4
   11ee0:			; <UNDEFINED> instruction: 0x00013ab4
   11ee4:			; <UNDEFINED> instruction: 0x00013ab4
   11ee8:			; <UNDEFINED> instruction: 0x00013ab4
   11eec:			; <UNDEFINED> instruction: 0x00013ab4
   11ef0:			; <UNDEFINED> instruction: 0x00013ab4
   11ef4:			; <UNDEFINED> instruction: 0x00013ab4
   11ef8:			; <UNDEFINED> instruction: 0x00013ab4
   11efc:			; <UNDEFINED> instruction: 0x00013ab4
   11f00:			; <UNDEFINED> instruction: 0x00013ab4
   11f04:			; <UNDEFINED> instruction: 0x00013ab4
   11f08:			; <UNDEFINED> instruction: 0x00013ab4
   11f0c:			; <UNDEFINED> instruction: 0x00013ab4
   11f10:			; <UNDEFINED> instruction: 0x00013ab4
   11f14:			; <UNDEFINED> instruction: 0x00013ab4
   11f18:			; <UNDEFINED> instruction: 0x00013ab4
   11f1c:			; <UNDEFINED> instruction: 0x00013ab4
   11f20:			; <UNDEFINED> instruction: 0x00013ab4
   11f24:			; <UNDEFINED> instruction: 0x00013ab4
   11f28:			; <UNDEFINED> instruction: 0x00013ab4
   11f2c:			; <UNDEFINED> instruction: 0x00013ab4
   11f30:			; <UNDEFINED> instruction: 0x00013ab4
   11f34:			; <UNDEFINED> instruction: 0x00013ab4
   11f38:			; <UNDEFINED> instruction: 0x00013ab4
   11f3c:			; <UNDEFINED> instruction: 0x00013ab4
   11f40:			; <UNDEFINED> instruction: 0x00013ab4
   11f44:			; <UNDEFINED> instruction: 0x00013ab4
   11f48:			; <UNDEFINED> instruction: 0x00013ab4
   11f4c:			; <UNDEFINED> instruction: 0x00013ab4
   11f50:			; <UNDEFINED> instruction: 0x00013ab4
   11f54:			; <UNDEFINED> instruction: 0x00013ab4
   11f58:			; <UNDEFINED> instruction: 0x00013ab4
   11f5c:			; <UNDEFINED> instruction: 0x00013ab4
   11f60:			; <UNDEFINED> instruction: 0x00013ab4
   11f64:			; <UNDEFINED> instruction: 0x00013ab4
   11f68:	andeq	r2, r1, ip, lsl #19
   11f6c:			; <UNDEFINED> instruction: 0x00013ab4
   11f70:			; <UNDEFINED> instruction: 0x00013ab4
   11f74:			; <UNDEFINED> instruction: 0x00013ab4
   11f78:			; <UNDEFINED> instruction: 0x00013ab4
   11f7c:			; <UNDEFINED> instruction: 0x00013ab4
   11f80:			; <UNDEFINED> instruction: 0x00013ab4
   11f84:			; <UNDEFINED> instruction: 0x00013ab4
   11f88:			; <UNDEFINED> instruction: 0x00013ab4
   11f8c:			; <UNDEFINED> instruction: 0x00013ab4
   11f90:			; <UNDEFINED> instruction: 0x00013ab4
   11f94:			; <UNDEFINED> instruction: 0x00013ab4
   11f98:			; <UNDEFINED> instruction: 0x00013ab4
   11f9c:			; <UNDEFINED> instruction: 0x00013ab4
   11fa0:			; <UNDEFINED> instruction: 0x00013ab4
   11fa4:			; <UNDEFINED> instruction: 0x00013ab4
   11fa8:	andeq	r2, r1, r0, ror #20
   11fac:	andeq	r2, r1, r8, lsl sl
   11fb0:	andeq	r2, r1, ip, ror #20
   11fb4:	andeq	r2, r1, r0, lsl #19
   11fb8:			; <UNDEFINED> instruction: 0x00013ab4
   11fbc:	andeq	r2, r1, r4, lsl #18
   11fc0:	strdeq	r2, [r1], -r0
   11fc4:	andeq	r2, r1, r4, ror #17
   11fc8:			; <UNDEFINED> instruction: 0x000128bc
   11fcc:			; <UNDEFINED> instruction: 0x00013ab4
   11fd0:			; <UNDEFINED> instruction: 0x00013ab4
   11fd4:			; <UNDEFINED> instruction: 0x000128b0
   11fd8:			; <UNDEFINED> instruction: 0x00013ab4
   11fdc:	andeq	r2, r1, r4, lsr #17
   11fe0:			; <UNDEFINED> instruction: 0x00013ab4
   11fe4:			; <UNDEFINED> instruction: 0x00013ab4
   11fe8:	muleq	r1, r8, r8
   11fec:	andeq	r2, r1, ip, lsl #17
   11ff0:	andeq	r2, r1, r0, lsl #17
   11ff4:	andeq	r2, r1, r0, lsr #16
   11ff8:	andeq	r2, r1, r4, lsl r8
   11ffc:			; <UNDEFINED> instruction: 0x00013ab4
   12000:			; <UNDEFINED> instruction: 0x00013ab4
   12004:	andeq	r2, r1, r8, lsl #16
   12008:			; <UNDEFINED> instruction: 0x00013ab4
   1200c:	strdeq	r2, [r1], -ip
   12010:			; <UNDEFINED> instruction: 0x00013ab4
   12014:			; <UNDEFINED> instruction: 0x00013ab4
   12018:			; <UNDEFINED> instruction: 0x00013ab4
   1201c:			; <UNDEFINED> instruction: 0x00013ab4
   12020:			; <UNDEFINED> instruction: 0x00013ab4
   12024:			; <UNDEFINED> instruction: 0x00013ab4
   12028:	strdeq	r2, [r1], -r0
   1202c:	andeq	r2, r1, r8, asr #14
   12030:	andeq	r2, r1, r4, ror #15
   12034:	andeq	r2, r1, ip, asr #15
   12038:			; <UNDEFINED> instruction: 0x00013ab4
   1203c:	muleq	r1, r8, r7
   12040:	andeq	r2, r1, r0, lsl #15
   12044:	andeq	r2, r1, r4, asr r7
   12048:	ldrdeq	r2, [r1], -r8
   1204c:			; <UNDEFINED> instruction: 0x00013ab4
   12050:	andeq	r2, r1, ip, lsr r7
   12054:	andeq	r2, r1, r0, lsr r7
   12058:	ldrdeq	r2, [r1], -r0
   1205c:			; <UNDEFINED> instruction: 0x00012ebc
   12060:	andeq	r2, r1, r4, lsr #29
   12064:	muleq	r1, r8, lr
   12068:	andeq	r2, r1, ip, lsl #29
   1206c:	andeq	r2, r1, r0, lsl #29
   12070:	andeq	r2, r1, r4, ror lr
   12074:	andeq	r2, r1, r8, ror #28
   12078:	andeq	r2, r1, ip, asr #30
   1207c:	andeq	r2, r1, r0, asr #30
   12080:	andeq	r2, r1, r8, ror #29
   12084:	ldrdeq	r2, [r1], -ip
   12088:			; <UNDEFINED> instruction: 0x00013ab4
   1208c:			; <UNDEFINED> instruction: 0x00013ab4
   12090:			; <UNDEFINED> instruction: 0x00013ab4
   12094:			; <UNDEFINED> instruction: 0x00013ab4
   12098:			; <UNDEFINED> instruction: 0x00013ab4
   1209c:			; <UNDEFINED> instruction: 0x00013ab4
   120a0:			; <UNDEFINED> instruction: 0x00013ab4
   120a4:			; <UNDEFINED> instruction: 0x00013ab4
   120a8:			; <UNDEFINED> instruction: 0x00013ab4
   120ac:			; <UNDEFINED> instruction: 0x00013ab4
   120b0:			; <UNDEFINED> instruction: 0x00013ab4
   120b4:			; <UNDEFINED> instruction: 0x00013ab4
   120b8:			; <UNDEFINED> instruction: 0x00013ab4
   120bc:			; <UNDEFINED> instruction: 0x00013ab4
   120c0:			; <UNDEFINED> instruction: 0x00013ab4
   120c4:			; <UNDEFINED> instruction: 0x00013ab4
   120c8:			; <UNDEFINED> instruction: 0x00013ab4
   120cc:			; <UNDEFINED> instruction: 0x00013ab4
   120d0:			; <UNDEFINED> instruction: 0x00013ab4
   120d4:			; <UNDEFINED> instruction: 0x00013ab4
   120d8:			; <UNDEFINED> instruction: 0x00013ab4
   120dc:			; <UNDEFINED> instruction: 0x00013ab4
   120e0:			; <UNDEFINED> instruction: 0x00013ab4
   120e4:			; <UNDEFINED> instruction: 0x00013ab4
   120e8:			; <UNDEFINED> instruction: 0x00013ab4
   120ec:			; <UNDEFINED> instruction: 0x00013ab4
   120f0:			; <UNDEFINED> instruction: 0x00013ab4
   120f4:			; <UNDEFINED> instruction: 0x00013ab4
   120f8:			; <UNDEFINED> instruction: 0x00013ab4
   120fc:			; <UNDEFINED> instruction: 0x00013ab4
   12100:			; <UNDEFINED> instruction: 0x00013ab4
   12104:			; <UNDEFINED> instruction: 0x00013ab4
   12108:			; <UNDEFINED> instruction: 0x00013ab4
   1210c:			; <UNDEFINED> instruction: 0x00013ab4
   12110:			; <UNDEFINED> instruction: 0x00013ab4
   12114:			; <UNDEFINED> instruction: 0x00013ab4
   12118:			; <UNDEFINED> instruction: 0x00013ab4
   1211c:			; <UNDEFINED> instruction: 0x00013ab4
   12120:			; <UNDEFINED> instruction: 0x00013ab4
   12124:			; <UNDEFINED> instruction: 0x00013ab4
   12128:			; <UNDEFINED> instruction: 0x00013ab4
   1212c:			; <UNDEFINED> instruction: 0x00013ab4
   12130:			; <UNDEFINED> instruction: 0x00013ab4
   12134:			; <UNDEFINED> instruction: 0x00013ab4
   12138:			; <UNDEFINED> instruction: 0x00013ab4
   1213c:			; <UNDEFINED> instruction: 0x00013ab4
   12140:			; <UNDEFINED> instruction: 0x00013ab4
   12144:			; <UNDEFINED> instruction: 0x00013ab4
   12148:			; <UNDEFINED> instruction: 0x00013ab4
   1214c:			; <UNDEFINED> instruction: 0x00013ab4
   12150:			; <UNDEFINED> instruction: 0x00013ab4
   12154:			; <UNDEFINED> instruction: 0x00013ab4
   12158:			; <UNDEFINED> instruction: 0x00013ab4
   1215c:			; <UNDEFINED> instruction: 0x00013ab4
   12160:			; <UNDEFINED> instruction: 0x00013ab4
   12164:			; <UNDEFINED> instruction: 0x00013ab4
   12168:			; <UNDEFINED> instruction: 0x00013ab4
   1216c:			; <UNDEFINED> instruction: 0x00013ab4
   12170:			; <UNDEFINED> instruction: 0x00013ab4
   12174:			; <UNDEFINED> instruction: 0x00013ab4
   12178:			; <UNDEFINED> instruction: 0x00013ab4
   1217c:			; <UNDEFINED> instruction: 0x00013ab4
   12180:			; <UNDEFINED> instruction: 0x00013ab4
   12184:			; <UNDEFINED> instruction: 0x00013ab4
   12188:			; <UNDEFINED> instruction: 0x00013ab4
   1218c:			; <UNDEFINED> instruction: 0x00013ab4
   12190:			; <UNDEFINED> instruction: 0x00013ab4
   12194:			; <UNDEFINED> instruction: 0x00013ab4
   12198:			; <UNDEFINED> instruction: 0x00013ab4
   1219c:			; <UNDEFINED> instruction: 0x00013ab4
   121a0:			; <UNDEFINED> instruction: 0x00013ab4
   121a4:			; <UNDEFINED> instruction: 0x00013ab4
   121a8:			; <UNDEFINED> instruction: 0x00013ab4
   121ac:			; <UNDEFINED> instruction: 0x00013ab4
   121b0:			; <UNDEFINED> instruction: 0x00013ab4
   121b4:			; <UNDEFINED> instruction: 0x00013ab4
   121b8:			; <UNDEFINED> instruction: 0x00013ab4
   121bc:			; <UNDEFINED> instruction: 0x00013ab4
   121c0:			; <UNDEFINED> instruction: 0x00013ab4
   121c4:			; <UNDEFINED> instruction: 0x00013ab4
   121c8:			; <UNDEFINED> instruction: 0x00013ab4
   121cc:			; <UNDEFINED> instruction: 0x00013ab4
   121d0:			; <UNDEFINED> instruction: 0x00013ab4
   121d4:			; <UNDEFINED> instruction: 0x00013ab4
   121d8:			; <UNDEFINED> instruction: 0x00013ab4
   121dc:			; <UNDEFINED> instruction: 0x00013ab4
   121e0:			; <UNDEFINED> instruction: 0x00013ab4
   121e4:			; <UNDEFINED> instruction: 0x00013ab4
   121e8:			; <UNDEFINED> instruction: 0x00013ab4
   121ec:			; <UNDEFINED> instruction: 0x00013ab4
   121f0:			; <UNDEFINED> instruction: 0x00013ab4
   121f4:			; <UNDEFINED> instruction: 0x00013ab4
   121f8:			; <UNDEFINED> instruction: 0x00013ab4
   121fc:			; <UNDEFINED> instruction: 0x00013ab4
   12200:			; <UNDEFINED> instruction: 0x00013ab4
   12204:			; <UNDEFINED> instruction: 0x00013ab4
   12208:			; <UNDEFINED> instruction: 0x00013ab4
   1220c:			; <UNDEFINED> instruction: 0x00013ab4
   12210:			; <UNDEFINED> instruction: 0x00013ab4
   12214:			; <UNDEFINED> instruction: 0x00013ab4
   12218:			; <UNDEFINED> instruction: 0x00013ab4
   1221c:			; <UNDEFINED> instruction: 0x00013ab4
   12220:			; <UNDEFINED> instruction: 0x00013ab4
   12224:			; <UNDEFINED> instruction: 0x00013ab4
   12228:			; <UNDEFINED> instruction: 0x00013ab4
   1222c:			; <UNDEFINED> instruction: 0x00013ab4
   12230:			; <UNDEFINED> instruction: 0x00013ab4
   12234:			; <UNDEFINED> instruction: 0x00013ab4
   12238:			; <UNDEFINED> instruction: 0x00013ab4
   1223c:			; <UNDEFINED> instruction: 0x00013ab4
   12240:			; <UNDEFINED> instruction: 0x00013ab4
   12244:			; <UNDEFINED> instruction: 0x00013ab4
   12248:			; <UNDEFINED> instruction: 0x00013ab4
   1224c:			; <UNDEFINED> instruction: 0x00013ab4
   12250:			; <UNDEFINED> instruction: 0x00013ab4
   12254:			; <UNDEFINED> instruction: 0x00013ab4
   12258:			; <UNDEFINED> instruction: 0x00013ab4
   1225c:			; <UNDEFINED> instruction: 0x00013ab4
   12260:			; <UNDEFINED> instruction: 0x00013ab4
   12264:			; <UNDEFINED> instruction: 0x00013ab4
   12268:			; <UNDEFINED> instruction: 0x00013ab4
   1226c:			; <UNDEFINED> instruction: 0x00013ab4
   12270:			; <UNDEFINED> instruction: 0x00013ab4
   12274:			; <UNDEFINED> instruction: 0x00013ab4
   12278:			; <UNDEFINED> instruction: 0x00013ab4
   1227c:			; <UNDEFINED> instruction: 0x00013ab4
   12280:			; <UNDEFINED> instruction: 0x00013ab4
   12284:			; <UNDEFINED> instruction: 0x00013ab4
   12288:			; <UNDEFINED> instruction: 0x00013ab4
   1228c:			; <UNDEFINED> instruction: 0x00013ab4
   12290:			; <UNDEFINED> instruction: 0x00013ab4
   12294:			; <UNDEFINED> instruction: 0x00013ab4
   12298:			; <UNDEFINED> instruction: 0x00013ab4
   1229c:			; <UNDEFINED> instruction: 0x00013ab4
   122a0:			; <UNDEFINED> instruction: 0x00013ab4
   122a4:	andeq	r2, r1, r8, asr pc
   122a8:	andeq	r2, r1, r4, lsr #28
   122ac:			; <UNDEFINED> instruction: 0x00012db4
   122b0:	andeq	r2, r1, ip, asr sp
   122b4:	andeq	r2, r1, r0, asr sp
   122b8:	strdeq	r2, [r1], -r8
   122bc:	andeq	r2, r1, r4, ror #25
   122c0:	ldrdeq	r2, [r1], -r8
   122c4:			; <UNDEFINED> instruction: 0x00012cb0
   122c8:	andeq	r2, r1, r0, asr #24
   122cc:	andeq	r2, r1, r8, ror #23
   122d0:	muleq	r1, r0, fp
   122d4:	andeq	r2, r1, r4, lsl #23
   122d8:	andeq	r2, r1, ip, ror #22
   122dc:	andeq	r2, r1, r4, lsl fp
   122e0:			; <UNDEFINED> instruction: 0x00012abc
   122e4:	andeq	r2, r1, ip, lsr #21
   122e8:	andeq	r2, r1, r8, ror sl
   122ec:	ldr	r7, [pc, #2700]	; 12d80 <__assert_fail@plt+0x100c>
   122f0:	ldrd	r2, [r7, #-8]
   122f4:	orrs	r3, r2, r3
   122f8:	beq	131e8 <__assert_fail@plt+0x1474>
   122fc:	movw	r8, #41424	; 0xa1d0
   12300:	movt	r8, #3
   12304:	ldr	r3, [sp, #24]
   12308:	cmp	r3, #0
   1230c:	blt	13070 <__assert_fail@plt+0x12fc>
   12310:	ldr	r2, [sp, #24]
   12314:	sub	r3, r2, #2
   12318:	str	r2, [r4, #3088]	; 0xc10
   1231c:	cmp	r3, #2
   12320:	bhi	13094 <__assert_fail@plt+0x1320>
   12324:	ldr	r3, [sp, #40]	; 0x28
   12328:	cmn	r3, #1
   1232c:	beq	1378c <__assert_fail@plt+0x1a18>
   12330:	ldr	r0, [sp, #40]	; 0x28
   12334:	mov	r3, #3
   12338:	str	r0, [r4, #3596]	; 0xe0c
   1233c:	ldr	r2, [r4, #3088]	; 0xc10
   12340:	udiv	r3, r0, r3
   12344:	sub	r2, r2, #2
   12348:	add	r1, r3, r3, lsl #1
   1234c:	cmp	r0, r1
   12350:	addne	r3, r3, #1
   12354:	cmp	r2, #2
   12358:	str	r3, [r4, #4020]	; 0xfb4
   1235c:	bhi	12370 <__assert_fail@plt+0x5fc>
   12360:	ldr	r3, [sp, #44]	; 0x2c
   12364:	cmp	r3, #0
   12368:	strge	r3, [r4, #3432]	; 0xd68
   1236c:	blt	1336c <__assert_fail@plt+0x15f8>
   12370:	ldr	r3, [sp, #36]	; 0x24
   12374:	cmn	r3, #1
   12378:	ldrne	r3, [sp, #36]	; 0x24
   1237c:	andne	r3, r3, #1
   12380:	beq	13184 <__assert_fail@plt+0x1410>
   12384:	ldr	r2, [sp, #32]
   12388:	strb	r3, [r4, #3581]	; 0xdfd
   1238c:	cmp	r2, #0
   12390:	blt	136cc <__assert_fail@plt+0x1958>
   12394:	mov	r0, #0
   12398:	ldr	r1, [sp, #32]
   1239c:	bl	21f44 <_obstack_memory_used@@Base+0x1cac>
   123a0:	mov	r0, #0
   123a4:	bl	21f2c <_obstack_memory_used@@Base+0x1c94>
   123a8:	ldr	r3, [r4, #3088]	; 0xc10
   123ac:	mov	r7, r0
   123b0:	cmp	r3, #0
   123b4:	beq	130e0 <__assert_fail@plt+0x136c>
   123b8:	sub	r3, r3, #2
   123bc:	cmp	r3, #1
   123c0:	movhi	r3, #0
   123c4:	bls	130d4 <__assert_fail@plt+0x1360>
   123c8:	mov	r0, #0
   123cc:	strb	r3, [r4, #3582]	; 0xdfe
   123d0:	bl	21ee4 <_obstack_memory_used@@Base+0x1c4c>
   123d4:	cmp	r7, #7
   123d8:	str	r0, [r4, #3156]	; 0xc54
   123dc:	beq	1377c <__assert_fail@plt+0x1a08>
   123e0:	ldr	r7, [r4, #3444]	; 0xd74
   123e4:	cmp	r7, #1
   123e8:	bls	12420 <__assert_fail@plt+0x6ac>
   123ec:	sub	r7, r7, #2
   123f0:	movw	r3, #35388	; 0x8a3c
   123f4:	movt	r3, #2
   123f8:	ldrb	r1, [r3, r7]
   123fc:	add	r7, r7, r3
   12400:	cmp	r1, #0
   12404:	beq	12420 <__assert_fail@plt+0x6ac>
   12408:	mov	r2, #1
   1240c:	ldr	r0, [r4, #3156]	; 0xc54
   12410:	bl	21f5c <_obstack_memory_used@@Base+0x1cc4>
   12414:	ldrb	r1, [r7, #1]!
   12418:	cmp	r1, #0
   1241c:	bne	12408 <__assert_fail@plt+0x694>
   12420:	mov	r0, #0
   12424:	bl	21ee4 <_obstack_memory_used@@Base+0x1c4c>
   12428:	mov	r2, #1
   1242c:	mov	r1, #58	; 0x3a
   12430:	str	r0, [r5, #-3996]	; 0xfffff064
   12434:	bl	21f5c <_obstack_memory_used@@Base+0x1cc4>
   12438:	ldrb	r3, [r5, #-4088]	; 0xfffff008
   1243c:	ldr	r2, [r4, #3088]	; 0xc10
   12440:	ldrb	r0, [r4, #3588]	; 0xe04
   12444:	eor	r3, r3, #1
   12448:	ldrb	r1, [r8, #210]	; 0xd2
   1244c:	cmp	r2, #0
   12450:	movne	r3, #0
   12454:	andeq	r3, r3, #1
   12458:	and	r3, r3, r0
   1245c:	cmp	r1, r3
   12460:	strb	r3, [r4, #3588]	; 0xe04
   12464:	bcc	13c48 <__assert_fail@plt+0x1ed4>
   12468:	ldr	r3, [sp, #28]
   1246c:	cmp	r3, #0
   12470:	ldrge	r3, [sp, #28]
   12474:	blt	130f8 <__assert_fail@plt+0x1384>
   12478:	cmp	r2, #0
   1247c:	str	r3, [r4, #3100]	; 0xc1c
   12480:	beq	13104 <__assert_fail@plt+0x1390>
   12484:	movw	r3, #41752	; 0xa318
   12488:	movt	r3, #3
   1248c:	ldr	r7, [r3]
   12490:	ldrb	r3, [r4, #3580]	; 0xdfc
   12494:	cmp	r3, #0
   12498:	bne	12f64 <__assert_fail@plt+0x11f0>
   1249c:	ldrb	r3, [r4, #4001]	; 0xfa1
   124a0:	cmp	r3, #0
   124a4:	bne	13064 <__assert_fail@plt+0x12f0>
   124a8:	ldr	r3, [r5, #-4084]	; 0xfffff00c
   124ac:	cmp	r3, #0
   124b0:	bne	124c8 <__assert_fail@plt+0x754>
   124b4:	ldrb	r3, [r5, #-4048]	; 0xfffff030
   124b8:	cmp	r3, #0
   124bc:	beq	13248 <__assert_fail@plt+0x14d4>
   124c0:	mov	r3, #1
   124c4:	str	r3, [r5, #-4084]	; 0xfffff00c
   124c8:	ldrb	r3, [r5, #-4000]	; 0xfffff060
   124cc:	cmp	r3, #0
   124d0:	beq	1252c <__assert_fail@plt+0x7b8>
   124d4:	movw	r1, #15840	; 0x3de0
   124d8:	movt	r1, #1
   124dc:	movw	r3, #15752	; 0x3d88
   124e0:	movt	r3, #1
   124e4:	movw	r2, #15712	; 0x3d60
   124e8:	movt	r2, #1
   124ec:	str	r1, [sp]
   124f0:	mov	r0, #30
   124f4:	mov	r1, #0
   124f8:	bl	1bda0 <__assert_fail@plt+0xa02c>
   124fc:	cmp	r0, #0
   12500:	str	r0, [r4, #3160]	; 0xc58
   12504:	beq	13c6c <__assert_fail@plt+0x1ef8>
   12508:	movw	r1, #45748	; 0xb2b4
   1250c:	movt	r1, #1
   12510:	ldr	r0, [pc, #2128]	; 12d68 <__assert_fail@plt+0xff4>
   12514:	mov	r2, #0
   12518:	movw	r3, #17860	; 0x45c4
   1251c:	movt	r3, #2
   12520:	str	r1, [sp]
   12524:	mov	r1, r2
   12528:	bl	20038 <_obstack_begin@@Base>
   1252c:	movw	r0, #35720	; 0x8b88
   12530:	movt	r0, #2
   12534:	bl	11ac8 <getenv@plt>
   12538:	bl	229f0 <_obstack_memory_used@@Base+0x2758>
   1253c:	ldr	r3, [r4, #3100]	; 0xc1c
   12540:	str	r0, [r4, #4036]	; 0xfc4
   12544:	sub	r3, r3, #3
   12548:	bics	r3, r3, #2
   1254c:	beq	1255c <__assert_fail@plt+0x7e8>
   12550:	ldr	r3, [r4, #3088]	; 0xc10
   12554:	cmp	r3, #0
   12558:	bne	13268 <__assert_fail@plt+0x14f4>
   1255c:	mov	r2, #1
   12560:	mov	r3, #0
   12564:	strb	r2, [r5, #-4087]	; 0xfffff009
   12568:	ldrb	r2, [r4, #3588]	; 0xe04
   1256c:	and	r3, r3, #1
   12570:	strb	r3, [r5, #-4086]	; 0xfffff00a
   12574:	cmp	r2, #0
   12578:	bne	13630 <__assert_fail@plt+0x18bc>
   1257c:	ldrb	r3, [r5, #-4088]	; 0xfffff008
   12580:	cmp	r3, #0
   12584:	bne	135a4 <__assert_fail@plt+0x1830>
   12588:	mov	r3, #100	; 0x64
   1258c:	mov	r1, #152	; 0x98
   12590:	mov	r0, r3
   12594:	str	r3, [r4, #4092]	; 0xffc
   12598:	sub	r3, r6, r7
   1259c:	mov	r9, r3
   125a0:	str	r3, [sp, #24]
   125a4:	bl	23564 <_obstack_memory_used@@Base+0x32cc>
   125a8:	mov	r3, #0
   125ac:	str	r3, [r4, #3104]	; 0xc20
   125b0:	str	r0, [r4, #3604]	; 0xe14
   125b4:	bl	14818 <__assert_fail@plt+0x2aa4>
   125b8:	cmp	r9, #0
   125bc:	ble	131a4 <__assert_fail@plt+0x1430>
   125c0:	add	r9, fp, r7, lsl #2
   125c4:	movw	fp, #37260	; 0x918c
   125c8:	movt	fp, #2
   125cc:	add	r7, r7, #1
   125d0:	mov	r3, fp
   125d4:	ldr	r0, [r9], #4
   125d8:	mov	r2, #1
   125dc:	mov	r1, #0
   125e0:	bl	180e0 <__assert_fail@plt+0x636c>
   125e4:	cmp	r6, r7
   125e8:	bgt	125cc <__assert_fail@plt+0x858>
   125ec:	ldr	r3, [r4, #3104]	; 0xc20
   125f0:	cmp	r3, #0
   125f4:	bne	1356c <__assert_fail@plt+0x17f8>
   125f8:	ldr	r3, [sp, #24]
   125fc:	cmp	r3, #1
   12600:	ble	131cc <__assert_fail@plt+0x1458>
   12604:	mov	r7, #1
   12608:	b	12634 <__assert_fail@plt+0x8c0>
   1260c:	ldrb	r2, [r6, #8]
   12610:	ldr	r1, [r6, #4]
   12614:	bl	18e48 <__assert_fail@plt+0x70d4>
   12618:	ldr	r0, [r6]
   1261c:	bl	1b2b4 <__assert_fail@plt+0x9540>
   12620:	ldr	r0, [r6, #4]
   12624:	bl	1b2b4 <__assert_fail@plt+0x9540>
   12628:	mov	r0, r6
   1262c:	bl	1b2b4 <__assert_fail@plt+0x9540>
   12630:	strb	r7, [r5, #-3999]	; 0xfffff061
   12634:	ldr	r6, [r4, #3080]	; 0xc08
   12638:	cmp	r6, #0
   1263c:	beq	126c8 <__assert_fail@plt+0x954>
   12640:	ldr	r1, [r4, #3160]	; 0xc58
   12644:	ldr	r0, [r6]
   12648:	ldr	r3, [r6, #12]
   1264c:	cmp	r1, #0
   12650:	str	r3, [r4, #3080]	; 0xc08
   12654:	beq	1260c <__assert_fail@plt+0x898>
   12658:	cmp	r0, #0
   1265c:	bne	1260c <__assert_fail@plt+0x898>
   12660:	ldr	r3, [r5, #-4036]	; 0xfffff03c
   12664:	ldr	r0, [r5, #-4032]	; 0xfffff040
   12668:	sub	r3, r0, r3
   1266c:	cmp	r3, #15
   12670:	bls	13c10 <__assert_fail@plt+0x1e9c>
   12674:	ldrd	r2, [r0, #-16]
   12678:	sub	ip, r0, #16
   1267c:	mov	r0, r1
   12680:	mov	r1, sl
   12684:	str	ip, [r5, #-4032]	; 0xfffff040
   12688:	strd	r2, [sl]
   1268c:	ldrd	r2, [ip, #8]
   12690:	strd	r2, [sl, #8]
   12694:	bl	1c438 <__assert_fail@plt+0xa6c4>
   12698:	cmp	r0, #0
   1269c:	beq	13c2c <__assert_fail@plt+0x1eb8>
   126a0:	bl	1b2b4 <__assert_fail@plt+0x9540>
   126a4:	ldr	r0, [r6]
   126a8:	bl	1b2b4 <__assert_fail@plt+0x9540>
   126ac:	ldr	r0, [r6, #4]
   126b0:	bl	1b2b4 <__assert_fail@plt+0x9540>
   126b4:	mov	r0, r6
   126b8:	bl	1b2b4 <__assert_fail@plt+0x9540>
   126bc:	ldr	r6, [r4, #3080]	; 0xc08
   126c0:	cmp	r6, #0
   126c4:	bne	12640 <__assert_fail@plt+0x8cc>
   126c8:	ldrb	r3, [r4, #3580]	; 0xdfc
   126cc:	cmp	r3, #0
   126d0:	beq	126e0 <__assert_fail@plt+0x96c>
   126d4:	ldrb	r3, [r4, #3449]	; 0xd79
   126d8:	cmp	r3, #0
   126dc:	bne	132b4 <__assert_fail@plt+0x1540>
   126e0:	ldrb	r3, [r4, #3588]	; 0xe04
   126e4:	cmp	r3, #0
   126e8:	bne	13404 <__assert_fail@plt+0x1690>
   126ec:	ldr	r5, [r4, #3160]	; 0xc58
   126f0:	cmp	r5, #0
   126f4:	beq	12710 <__assert_fail@plt+0x99c>
   126f8:	mov	r0, r5
   126fc:	bl	1b810 <__assert_fail@plt+0x9a9c>
   12700:	cmp	r0, #0
   12704:	bne	13b70 <__assert_fail@plt+0x1dfc>
   12708:	mov	r0, r5
   1270c:	bl	1bfd4 <__assert_fail@plt+0xa260>
   12710:	ldr	r0, [r4, #3440]	; 0xd70
   12714:	add	sp, sp, #84	; 0x54
   12718:	ldrd	r4, [sp]
   1271c:	ldrd	r6, [sp, #8]
   12720:	ldrd	r8, [sp, #16]
   12724:	ldrd	sl, [sp, #24]
   12728:	add	sp, sp, #32
   1272c:	pop	{pc}		; (ldr pc, [sp], #4)
   12730:	mov	r3, #0
   12734:	str	r3, [sp, #24]
   12738:	b	11e5c <__assert_fail@plt+0xe8>
   1273c:	mov	r3, #1
   12740:	str	r3, [sp, #48]	; 0x30
   12744:	b	11e5c <__assert_fail@plt+0xe8>
   12748:	mov	r3, #7
   1274c:	str	r3, [sp, #32]
   12750:	b	11e5c <__assert_fail@plt+0xe8>
   12754:	movw	r1, #41424	; 0xa1d0
   12758:	movt	r1, #3
   1275c:	mov	r2, #1
   12760:	mov	r3, #0
   12764:	mov	r0, #176	; 0xb0
   12768:	ldr	ip, [pc, #1552]	; 12d80 <__assert_fail@plt+0x100c>
   1276c:	strd	r2, [r1, #216]	; 0xd8
   12770:	str	r0, [r4, #4004]	; 0xfa4
   12774:	str	r0, [r4, #4032]	; 0xfc0
   12778:	strd	r2, [ip, #-8]
   1277c:	b	11e5c <__assert_fail@plt+0xe8>
   12780:	mov	r3, #0
   12784:	movw	r1, #41424	; 0xa1d0
   12788:	movt	r1, #3
   1278c:	str	r3, [sp, #24]
   12790:	strb	r3, [r1, #204]	; 0xcc
   12794:	b	11e5c <__assert_fail@plt+0xe8>
   12798:	ldr	r1, [sp, #24]
   1279c:	mov	r2, #0
   127a0:	mov	r3, #2
   127a4:	strb	r2, [r5, #-4088]	; 0xfffff008
   127a8:	str	r3, [r5, #-3948]	; 0xfffff094
   127ac:	strb	r2, [r4, #3085]	; 0xc0d
   127b0:	cmp	r1, #0
   127b4:	strb	r2, [r4, #3580]	; 0xdfc
   127b8:	mvneq	r1, #0
   127bc:	str	r1, [sp, #24]
   127c0:	mov	r1, #6
   127c4:	str	r1, [sp, #28]
   127c8:	b	11e5c <__assert_fail@plt+0xe8>
   127cc:	mov	r3, #1
   127d0:	strb	r3, [r5, #-4048]	; 0xfffff030
   127d4:	b	11e5c <__assert_fail@plt+0xe8>
   127d8:	mov	r3, #1
   127dc:	strb	r3, [r4, #3084]	; 0xc0c
   127e0:	b	11e5c <__assert_fail@plt+0xe8>
   127e4:	mov	r3, #1
   127e8:	str	r3, [r4, #3092]	; 0xc14
   127ec:	b	11e5c <__assert_fail@plt+0xe8>
   127f0:	mov	r3, #2
   127f4:	str	r3, [r5, #-3948]	; 0xfffff094
   127f8:	b	11e5c <__assert_fail@plt+0xe8>
   127fc:	mov	r3, #1
   12800:	strb	r3, [r4, #4016]	; 0xfb0
   12804:	b	11e5c <__assert_fail@plt+0xe8>
   12808:	mov	r3, #1
   1280c:	str	r3, [sp, #28]
   12810:	b	11e5c <__assert_fail@plt+0xe8>
   12814:	mov	r3, #6
   12818:	str	r3, [sp, #28]
   1281c:	b	11e5c <__assert_fail@plt+0xe8>
   12820:	movw	r3, #41768	; 0xa328
   12824:	movt	r3, #3
   12828:	ldr	r8, [r3]
   1282c:	mov	r2, #5
   12830:	movw	r1, #34996	; 0x88b4
   12834:	movt	r1, #2
   12838:	mov	r0, #0
   1283c:	bl	11984 <dcgettext@plt>
   12840:	mov	ip, #2
   12844:	mvn	r2, #-2147483648	; 0x80000000
   12848:	str	r0, [sp, #12]
   1284c:	mov	r3, #0
   12850:	movw	r1, #37260	; 0x918c
   12854:	movt	r1, #2
   12858:	mov	r0, r8
   1285c:	strd	r2, [sp]
   12860:	mov	r2, #0
   12864:	mov	r3, #0
   12868:	str	r1, [sp, #8]
   1286c:	mov	r1, #0
   12870:	str	ip, [sp, #16]
   12874:	bl	238b8 <_obstack_memory_used@@Base+0x3620>
   12878:	str	r0, [sp, #44]	; 0x2c
   1287c:	b	11e5c <__assert_fail@plt+0xe8>
   12880:	mov	r3, #3
   12884:	str	r3, [sp, #28]
   12888:	b	11e5c <__assert_fail@plt+0xe8>
   1288c:	mov	r3, #1
   12890:	strb	r3, [r5, #-4000]	; 0xfffff060
   12894:	b	11e5c <__assert_fail@plt+0xe8>
   12898:	mov	r3, #5
   1289c:	str	r3, [sp, #32]
   128a0:	b	11e5c <__assert_fail@plt+0xe8>
   128a4:	mov	r3, #0
   128a8:	str	r3, [sp, #32]
   128ac:	b	11e5c <__assert_fail@plt+0xe8>
   128b0:	mov	r3, #4
   128b4:	str	r3, [r5, #-4084]	; 0xfffff00c
   128b8:	b	11e5c <__assert_fail@plt+0xe8>
   128bc:	movw	r3, #41768	; 0xa328
   128c0:	movt	r3, #3
   128c4:	mov	r0, #8
   128c8:	ldr	r8, [r3]
   128cc:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   128d0:	ldr	r3, [r5, #-3944]	; 0xfffff098
   128d4:	str	r0, [r5, #-3944]	; 0xfffff098
   128d8:	str	r8, [r0]
   128dc:	str	r3, [r0, #4]
   128e0:	b	11e5c <__assert_fail@plt+0xe8>
   128e4:	mov	r3, #2
   128e8:	str	r3, [r5, #-4084]	; 0xfffff00c
   128ec:	b	11e5c <__assert_fail@plt+0xe8>
   128f0:	movw	r1, #41424	; 0xa1d0
   128f4:	movt	r1, #3
   128f8:	mov	r3, #0
   128fc:	strb	r3, [r1, #205]	; 0xcd
   12900:	b	11e5c <__assert_fail@plt+0xe8>
   12904:	movw	r3, #41768	; 0xa328
   12908:	movt	r3, #3
   1290c:	ldr	r1, [r3]
   12910:	cmp	r1, #0
   12914:	beq	12974 <__assert_fail@plt+0xc00>
   12918:	movw	r2, #41664	; 0xa2c0
   1291c:	movt	r2, #3
   12920:	ldr	r3, [pc, #1108]	; 12d7c <__assert_fail@plt+0x1008>
   12924:	mov	r0, #1
   12928:	movw	r8, #20560	; 0x5050
   1292c:	movt	r8, #2
   12930:	ldr	ip, [r2]
   12934:	mov	r2, #4
   12938:	stm	sp, {r2, ip}
   1293c:	add	r2, r3, #36	; 0x24
   12940:	str	r0, [sp, #8]
   12944:	movw	r0, #34984	; 0x88a8
   12948:	movt	r0, #2
   1294c:	bl	19f34 <__assert_fail@plt+0x81c0>
   12950:	add	r0, r8, r0, lsl #2
   12954:	ldr	r3, [r0, #1268]	; 0x4f4
   12958:	cmp	r3, #1
   1295c:	beq	12974 <__assert_fail@plt+0xc00>
   12960:	cmp	r3, #2
   12964:	bne	11e5c <__assert_fail@plt+0xe8>
   12968:	bl	13eb8 <__assert_fail@plt+0x2144>
   1296c:	cmp	r0, #0
   12970:	beq	11e5c <__assert_fail@plt+0xe8>
   12974:	mov	r3, #3
   12978:	str	r3, [r4, #3444]	; 0xd74
   1297c:	b	11e5c <__assert_fail@plt+0xe8>
   12980:	mov	r3, #1
   12984:	strb	r3, [r4, #3588]	; 0xe04
   12988:	b	11e5c <__assert_fail@plt+0xe8>
   1298c:	ldr	r3, [sp, #24]
   12990:	adds	r3, r3, #0
   12994:	movne	r3, #1
   12998:	str	r3, [sp, #24]
   1299c:	b	11e5c <__assert_fail@plt+0xe8>
   129a0:	movw	r3, #41656	; 0xa2b8
   129a4:	movt	r3, #3
   129a8:	ldr	r1, [r3]
   129ac:	movw	r3, #41764	; 0xa324
   129b0:	movt	r3, #3
   129b4:	ldr	r0, [r3]
   129b8:	cmp	r1, #1
   129bc:	beq	13674 <__assert_fail@plt+0x1900>
   129c0:	cmp	r1, #2
   129c4:	movw	r3, #36576	; 0x8ee0
   129c8:	movt	r3, #2
   129cc:	movw	r2, #26992	; 0x6970
   129d0:	movt	r2, #2
   129d4:	moveq	r1, r3
   129d8:	movne	r1, r2
   129dc:	mov	r4, #0
   129e0:	movw	r2, #35100	; 0x891c
   129e4:	movt	r2, #2
   129e8:	movw	ip, #35116	; 0x892c
   129ec:	movt	ip, #2
   129f0:	movw	r3, #41660	; 0xa2bc
   129f4:	movt	r3, #3
   129f8:	str	ip, [sp]
   129fc:	stmib	sp, {r2, r4}
   12a00:	movw	r2, #34684	; 0x877c
   12a04:	movt	r2, #2
   12a08:	ldr	r3, [r3]
   12a0c:	bl	232ec <_obstack_memory_used@@Base+0x3054>
   12a10:	mov	r0, r4
   12a14:	bl	11b70 <exit@plt>
   12a18:	mov	r0, #8
   12a1c:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   12a20:	ldr	r1, [r5, #-3944]	; 0xfffff098
   12a24:	mov	r3, r0
   12a28:	movw	r2, #34976	; 0x88a0
   12a2c:	movt	r2, #2
   12a30:	mov	r0, #8
   12a34:	str	r3, [r5, #-3944]	; 0xfffff098
   12a38:	str	r2, [r3]
   12a3c:	str	r1, [r3, #4]
   12a40:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   12a44:	ldr	r2, [r5, #-3944]	; 0xfffff098
   12a48:	movw	r3, #34980	; 0x88a4
   12a4c:	movt	r3, #2
   12a50:	str	r0, [r5, #-3944]	; 0xfffff098
   12a54:	str	r3, [r0]
   12a58:	str	r2, [r0, #4]
   12a5c:	b	11e5c <__assert_fail@plt+0xe8>
   12a60:	mov	r3, #1
   12a64:	str	r3, [r5, #-3948]	; 0xfffff094
   12a68:	b	11e5c <__assert_fail@plt+0xe8>
   12a6c:	mov	r3, #2
   12a70:	str	r3, [sp, #24]
   12a74:	b	11e5c <__assert_fail@plt+0xe8>
   12a78:	ldr	r0, [sp, #24]
   12a7c:	mov	r2, #0
   12a80:	mov	r3, #0
   12a84:	movw	r1, #41424	; 0xa1d0
   12a88:	movt	r1, #3
   12a8c:	str	r2, [sp, #32]
   12a90:	str	r2, [sp, #36]	; 0x24
   12a94:	strb	r3, [r1, #210]	; 0xd2
   12a98:	subs	r0, r0, r2
   12a9c:	strb	r3, [r4, #3580]	; 0xdfc
   12aa0:	movne	r0, #1
   12aa4:	str	r0, [sp, #24]
   12aa8:	b	11e5c <__assert_fail@plt+0xe8>
   12aac:	movw	r3, #41768	; 0xa328
   12ab0:	movt	r3, #3
   12ab4:	ldr	r9, [r3]
   12ab8:	b	11e5c <__assert_fail@plt+0xe8>
   12abc:	movw	r2, #41664	; 0xa2c0
   12ac0:	movt	r2, #3
   12ac4:	ldr	r3, [pc, #672]	; 12d6c <__assert_fail@plt+0xff8>
   12ac8:	mov	r0, #1
   12acc:	movw	r8, #20560	; 0x5050
   12ad0:	movt	r8, #2
   12ad4:	ldr	ip, [r2]
   12ad8:	mov	r2, #4
   12adc:	movw	r1, #41768	; 0xa328
   12ae0:	movt	r1, #3
   12ae4:	str	r2, [sp]
   12ae8:	add	r2, r8, #1424	; 0x590
   12aec:	str	r0, [sp, #8]
   12af0:	movw	r0, #35024	; 0x88d0
   12af4:	movt	r0, #2
   12af8:	ldr	r1, [r1]
   12afc:	str	ip, [sp, #4]
   12b00:	bl	19f34 <__assert_fail@plt+0x81c0>
   12b04:	add	r0, r8, r0, lsl #2
   12b08:	ldr	r3, [r0, #1396]	; 0x574
   12b0c:	str	r3, [r4, #3092]	; 0xc14
   12b10:	b	11e5c <__assert_fail@plt+0xe8>
   12b14:	movw	r3, #41664	; 0xa2c0
   12b18:	movt	r3, #3
   12b1c:	ldr	r2, [pc, #588]	; 12d70 <__assert_fail@plt+0xffc>
   12b20:	mov	r0, #1
   12b24:	movw	r8, #20560	; 0x5050
   12b28:	movt	r8, #2
   12b2c:	ldr	ip, [r3]
   12b30:	mov	r3, #4
   12b34:	movw	r1, #41768	; 0xa328
   12b38:	movt	r1, #3
   12b3c:	str	r3, [sp]
   12b40:	add	r3, r8, #1344	; 0x540
   12b44:	str	r0, [sp, #8]
   12b48:	movw	r0, #35016	; 0x88c8
   12b4c:	movt	r0, #2
   12b50:	ldr	r1, [r1]
   12b54:	str	ip, [sp, #4]
   12b58:	bl	19f34 <__assert_fail@plt+0x81c0>
   12b5c:	add	r0, r8, r0, lsl #2
   12b60:	ldr	r3, [r0, #1344]	; 0x540
   12b64:	str	r3, [sp, #28]
   12b68:	b	11e5c <__assert_fail@plt+0xe8>
   12b6c:	movw	r1, #41424	; 0xa1d0
   12b70:	movt	r1, #3
   12b74:	mov	r2, #1
   12b78:	mov	r3, #0
   12b7c:	mov	r0, #144	; 0x90
   12b80:	b	12768 <__assert_fail@plt+0x9f4>
   12b84:	mov	r3, #0
   12b88:	str	r3, [sp, #36]	; 0x24
   12b8c:	b	11e5c <__assert_fail@plt+0xe8>
   12b90:	movw	r3, #41664	; 0xa2c0
   12b94:	movt	r3, #3
   12b98:	ldr	ip, [r3]
   12b9c:	mov	r2, #1
   12ba0:	mov	r3, #4
   12ba4:	movw	r8, #37516	; 0x928c
   12ba8:	movt	r8, #2
   12bac:	movw	r1, #41768	; 0xa328
   12bb0:	movt	r1, #3
   12bb4:	str	r3, [sp]
   12bb8:	movw	r0, #35084	; 0x890c
   12bbc:	movt	r0, #2
   12bc0:	str	r2, [sp, #8]
   12bc4:	mov	r3, r8
   12bc8:	movw	r2, #37556	; 0x92b4
   12bcc:	movt	r2, #2
   12bd0:	ldr	r1, [r1]
   12bd4:	str	ip, [sp, #4]
   12bd8:	bl	19f34 <__assert_fail@plt+0x81c0>
   12bdc:	ldr	r3, [r8, r0, lsl #2]
   12be0:	str	r3, [sp, #32]
   12be4:	b	11e5c <__assert_fail@plt+0xe8>
   12be8:	movw	r2, #41664	; 0xa2c0
   12bec:	movt	r2, #3
   12bf0:	ldr	r3, [pc, #380]	; 12d74 <__assert_fail@plt+0x1000>
   12bf4:	mov	r1, #1
   12bf8:	mov	r0, #4
   12bfc:	ldr	ip, [r2]
   12c00:	movw	r2, #41768	; 0xa328
   12c04:	movt	r2, #3
   12c08:	str	r0, [sp]
   12c0c:	movw	r0, #35064	; 0x88f8
   12c10:	movt	r0, #2
   12c14:	str	r1, [sp, #8]
   12c18:	movw	r8, #20560	; 0x5050
   12c1c:	movt	r8, #2
   12c20:	ldr	r1, [r2]
   12c24:	add	r2, r3, #16
   12c28:	str	ip, [sp, #4]
   12c2c:	bl	19f34 <__assert_fail@plt+0x81c0>
   12c30:	add	r0, r8, r0, lsl #2
   12c34:	ldr	r3, [r0, #1516]	; 0x5ec
   12c38:	str	r3, [r4, #3444]	; 0xd74
   12c3c:	b	11e5c <__assert_fail@plt+0xe8>
   12c40:	movw	r3, #41768	; 0xa328
   12c44:	movt	r3, #3
   12c48:	ldr	r1, [r3]
   12c4c:	cmp	r1, #0
   12c50:	beq	130b4 <__assert_fail@plt+0x1340>
   12c54:	movw	r2, #41664	; 0xa2c0
   12c58:	movt	r2, #3
   12c5c:	ldr	r3, [pc, #280]	; 12d7c <__assert_fail@plt+0x1008>
   12c60:	mov	r0, #1
   12c64:	movw	r8, #20560	; 0x5050
   12c68:	movt	r8, #2
   12c6c:	ldr	ip, [r2]
   12c70:	mov	r2, #4
   12c74:	stm	sp, {r2, ip}
   12c78:	add	r2, r3, #36	; 0x24
   12c7c:	str	r0, [sp, #8]
   12c80:	movw	r0, #35052	; 0x88ec
   12c84:	movt	r0, #2
   12c88:	bl	19f34 <__assert_fail@plt+0x81c0>
   12c8c:	add	r0, r8, r0, lsl #2
   12c90:	ldr	r3, [r0, #1268]	; 0x4f4
   12c94:	cmp	r3, #1
   12c98:	beq	130b4 <__assert_fail@plt+0x1340>
   12c9c:	cmp	r3, #2
   12ca0:	movne	r0, #0
   12ca4:	bne	130b8 <__assert_fail@plt+0x1344>
   12ca8:	bl	13eb8 <__assert_fail@plt+0x2144>
   12cac:	b	130b8 <__assert_fail@plt+0x1344>
   12cb0:	mov	r0, #8
   12cb4:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   12cb8:	movw	r3, #41768	; 0xa328
   12cbc:	movt	r3, #3
   12cc0:	ldr	r2, [r5, #-3940]	; 0xfffff09c
   12cc4:	str	r0, [r5, #-3940]	; 0xfffff09c
   12cc8:	ldr	r3, [r3]
   12ccc:	str	r3, [r0]
   12cd0:	str	r2, [r0, #4]
   12cd4:	b	11e5c <__assert_fail@plt+0xe8>
   12cd8:	mov	r3, #1
   12cdc:	strb	r3, [r4, #4001]	; 0xfa1
   12ce0:	b	11e5c <__assert_fail@plt+0xe8>
   12ce4:	mov	r3, #0
   12ce8:	movw	r9, #34856	; 0x8828
   12cec:	movt	r9, #2
   12cf0:	str	r3, [sp, #24]
   12cf4:	b	11e5c <__assert_fail@plt+0xe8>
   12cf8:	movw	r3, #41664	; 0xa2c0
   12cfc:	movt	r3, #3
   12d00:	ldr	r2, [pc, #112]	; 12d78 <__assert_fail@plt+0x1004>
   12d04:	mov	r0, #1
   12d08:	movw	r8, #20560	; 0x5050
   12d0c:	movt	r8, #2
   12d10:	ldr	ip, [r3]
   12d14:	mov	r3, #4
   12d18:	movw	r1, #41768	; 0xa328
   12d1c:	movt	r1, #3
   12d20:	str	r3, [sp]
   12d24:	add	r3, r8, #1456	; 0x5b0
   12d28:	str	r0, [sp, #8]
   12d2c:	movw	r0, #35032	; 0x88d8
   12d30:	movt	r0, #2
   12d34:	ldr	r1, [r1]
   12d38:	str	ip, [sp, #4]
   12d3c:	bl	19f34 <__assert_fail@plt+0x81c0>
   12d40:	add	r0, r8, r0, lsl #2
   12d44:	ldr	r3, [r0, #1456]	; 0x5b0
   12d48:	str	r3, [sp, #24]
   12d4c:	b	11e5c <__assert_fail@plt+0xe8>
   12d50:	mov	r3, #2
   12d54:	str	r3, [r4, #3444]	; 0xd74
   12d58:	b	11e5c <__assert_fail@plt+0xe8>
   12d5c:	mov	r3, #3
   12d60:	str	r3, [r5, #-4084]	; 0xfffff00c
   12d64:	b	11e5c <__assert_fail@plt+0xe8>
   12d68:	andeq	fp, r3, ip, asr r3
   12d6c:	andeq	r5, r2, r4, asr #11
   12d70:	andeq	r5, r2, r8, lsr #11
   12d74:	andeq	r5, r2, ip, lsr r6
   12d78:	andeq	r5, r2, ip, lsl r6
   12d7c:	andeq	r5, r2, r4, asr #10
   12d80:	andeq	fp, r3, r0, ror #5
   12d84:	andeq	r5, r2, r0, ror #12
   12d88:	andeq	r5, r2, r8, ror #12
   12d8c:	andeq	r5, r2, r0, rrx
   12d90:	andeq	fp, r3, ip, lsr #1
   12d94:	andeq	r5, r2, r8, ror r6
   12d98:	andeq	sl, r3, fp, lsl #31
   12d9c:	andeq	fp, r3, r0, lsl #6
   12da0:	muleq	r3, r0, r3
   12da4:	andeq	r5, r2, r0, ror #4
   12da8:	andeq	r5, r2, r4, ror r2
   12dac:	ldrdeq	r5, [r2], -ip
   12db0:	andeq	r5, r2, r8, ror #13
   12db4:	movw	r3, #41768	; 0xa328
   12db8:	movt	r3, #3
   12dbc:	ldr	r1, [r3]
   12dc0:	cmp	r1, #0
   12dc4:	beq	130c4 <__assert_fail@plt+0x1350>
   12dc8:	movw	r2, #41664	; 0xa2c0
   12dcc:	movt	r2, #3
   12dd0:	ldr	r3, [pc, #-92]	; 12d7c <__assert_fail@plt+0x1008>
   12dd4:	mov	r0, #1
   12dd8:	movw	r8, #20560	; 0x5050
   12ddc:	movt	r8, #2
   12de0:	ldr	ip, [r2]
   12de4:	mov	r2, #4
   12de8:	stm	sp, {r2, ip}
   12dec:	add	r2, r3, #36	; 0x24
   12df0:	str	r0, [sp, #8]
   12df4:	movw	r0, #35044	; 0x88e4
   12df8:	movt	r0, #2
   12dfc:	bl	19f34 <__assert_fail@plt+0x81c0>
   12e00:	add	r0, r8, r0, lsl #2
   12e04:	ldr	r3, [r0, #1268]	; 0x4f4
   12e08:	cmp	r3, #1
   12e0c:	beq	130c4 <__assert_fail@plt+0x1350>
   12e10:	cmp	r3, #2
   12e14:	movne	r0, #0
   12e18:	bne	130c8 <__assert_fail@plt+0x1354>
   12e1c:	bl	13eb8 <__assert_fail@plt+0x2144>
   12e20:	b	130c8 <__assert_fail@plt+0x1354>
   12e24:	ldr	r3, [sp, #52]	; 0x34
   12e28:	movw	r8, #41768	; 0xa328
   12e2c:	movt	r8, #3
   12e30:	ldr	r0, [r8]
   12e34:	mov	r2, r3
   12e38:	sub	r1, r3, #4
   12e3c:	bl	1d050 <__assert_fail@plt+0xb2dc>
   12e40:	cmp	r0, #0
   12e44:	bne	13bf8 <__assert_fail@plt+0x1e84>
   12e48:	ldr	r3, [pc, #-208]	; 12d80 <__assert_fail@plt+0x100c>
   12e4c:	movw	r1, #41424	; 0xa1d0
   12e50:	movt	r1, #3
   12e54:	ldr	r0, [r4, #4004]	; 0xfa4
   12e58:	ldrd	r2, [r3, #-8]
   12e5c:	str	r0, [r4, #4032]	; 0xfc0
   12e60:	strd	r2, [r1, #216]	; 0xd8
   12e64:	b	11e5c <__assert_fail@plt+0xe8>
   12e68:	mov	r3, #5
   12e6c:	str	r3, [sp, #28]
   12e70:	b	11e5c <__assert_fail@plt+0xe8>
   12e74:	mov	r3, #1
   12e78:	strb	r3, [r4, #3085]	; 0xc0d
   12e7c:	b	11e5c <__assert_fail@plt+0xe8>
   12e80:	mov	r3, #1
   12e84:	strb	r3, [r4, #4000]	; 0xfa0
   12e88:	b	11e5c <__assert_fail@plt+0xe8>
   12e8c:	mov	r3, #1
   12e90:	str	r3, [sp, #36]	; 0x24
   12e94:	b	11e5c <__assert_fail@plt+0xe8>
   12e98:	mov	r3, #1
   12e9c:	str	r3, [r4, #3444]	; 0xd74
   12ea0:	b	11e5c <__assert_fail@plt+0xe8>
   12ea4:	mov	r3, #0
   12ea8:	movw	r1, #41424	; 0xa1d0
   12eac:	movt	r1, #3
   12eb0:	str	r3, [sp, #24]
   12eb4:	strb	r3, [r1, #205]	; 0xcd
   12eb8:	b	11e5c <__assert_fail@plt+0xe8>
   12ebc:	mov	r3, #1
   12ec0:	mov	r2, #0
   12ec4:	str	r2, [sp, #24]
   12ec8:	strb	r3, [r4, #3448]	; 0xd78
   12ecc:	b	11e5c <__assert_fail@plt+0xe8>
   12ed0:	mov	r3, #4
   12ed4:	str	r3, [sp, #24]
   12ed8:	b	11e5c <__assert_fail@plt+0xe8>
   12edc:	mov	r3, #3
   12ee0:	str	r3, [sp, #24]
   12ee4:	b	11e5c <__assert_fail@plt+0xe8>
   12ee8:	movw	r8, #41768	; 0xa328
   12eec:	movt	r8, #3
   12ef0:	ldr	r0, [r8]
   12ef4:	bl	13de4 <__assert_fail@plt+0x2070>
   12ef8:	subs	r3, r0, #0
   12efc:	str	r3, [sp, #40]	; 0x28
   12f00:	bge	11e5c <__assert_fail@plt+0xe8>
   12f04:	mov	r2, #5
   12f08:	movw	r1, #34948	; 0x8884
   12f0c:	movt	r1, #2
   12f10:	mov	r0, #0
   12f14:	bl	11984 <dcgettext@plt>
   12f18:	mov	r4, r0
   12f1c:	ldr	r0, [r8]
   12f20:	bl	225bc <_obstack_memory_used@@Base+0x2324>
   12f24:	movw	r2, #34968	; 0x8898
   12f28:	movt	r2, #2
   12f2c:	str	r0, [sp]
   12f30:	mov	r3, r4
   12f34:	mov	r1, #0
   12f38:	mov	r0, #2
   12f3c:	bl	11a8c <error@plt>
   12f40:	mov	r3, #4
   12f44:	str	r3, [sp, #28]
   12f48:	b	11e5c <__assert_fail@plt+0xe8>
   12f4c:	mov	r3, #2
   12f50:	str	r3, [r4, #3092]	; 0xc14
   12f54:	b	11e5c <__assert_fail@plt+0xe8>
   12f58:	mov	r3, #1
   12f5c:	strb	r3, [r4, #3096]	; 0xc18
   12f60:	b	11e5c <__assert_fail@plt+0xe8>
   12f64:	movw	r0, #35648	; 0x8b40
   12f68:	movt	r0, #2
   12f6c:	bl	11ac8 <getenv@plt>
   12f70:	cmp	r0, #0
   12f74:	str	r0, [sp, #60]	; 0x3c
   12f78:	beq	13804 <__assert_fail@plt+0x1a90>
   12f7c:	ldrb	r3, [r0]
   12f80:	cmp	r3, #0
   12f84:	beq	13804 <__assert_fail@plt+0x1a90>
   12f88:	movw	r3, #35960	; 0x8c78
   12f8c:	movt	r3, #2
   12f90:	ldrh	r2, [r3]
   12f94:	movw	r1, #34876	; 0x883c
   12f98:	movt	r1, #2
   12f9c:	ldrb	r3, [r3, #2]
   12fa0:	str	r1, [sp, #28]
   12fa4:	strh	r2, [sp, #56]	; 0x38
   12fa8:	strb	r3, [sp, #58]	; 0x3a
   12fac:	bl	2384c <_obstack_memory_used@@Base+0x35b4>
   12fb0:	str	r0, [r5, #-3936]	; 0xfffff0a0
   12fb4:	str	r5, [sp, #24]
   12fb8:	str	r0, [sp, #64]	; 0x40
   12fbc:	ldr	r3, [sp, #60]	; 0x3c
   12fc0:	ldrb	r2, [r3]
   12fc4:	cmp	r2, #42	; 0x2a
   12fc8:	beq	139c0 <__assert_fail@plt+0x1c4c>
   12fcc:	cmp	r2, #58	; 0x3a
   12fd0:	beq	139b4 <__assert_fail@plt+0x1c40>
   12fd4:	cmp	r2, #0
   12fd8:	bne	1344c <__assert_fail@plt+0x16d8>
   12fdc:	ldr	r5, [sp, #24]
   12fe0:	ldr	r2, [r8, #56]	; 0x38
   12fe4:	cmp	r2, #6
   12fe8:	bne	13008 <__assert_fail@plt+0x1294>
   12fec:	movw	r1, #35712	; 0x8b80
   12ff0:	movt	r1, #2
   12ff4:	ldr	r0, [r8, #60]	; 0x3c
   12ff8:	bl	11d20 <strncmp@plt>
   12ffc:	cmp	r0, #0
   13000:	moveq	r3, #1
   13004:	strbeq	r3, [r4, #3589]	; 0xe05
   13008:	ldrb	r3, [r4, #3580]	; 0xdfc
   1300c:	ldrb	r2, [r4, #4001]	; 0xfa1
   13010:	cmp	r3, #0
   13014:	beq	1249c <__assert_fail@plt+0x728>
   13018:	mov	r3, #0
   1301c:	cmp	r2, r3
   13020:	str	r3, [r4, #3432]	; 0xd68
   13024:	bne	13064 <__assert_fail@plt+0x12f0>
   13028:	mov	r0, #13
   1302c:	bl	13e44 <__assert_fail@plt+0x20d0>
   13030:	cmp	r0, #0
   13034:	bne	13064 <__assert_fail@plt+0x12f0>
   13038:	mov	r0, #14
   1303c:	bl	13e44 <__assert_fail@plt+0x20d0>
   13040:	cmp	r0, #0
   13044:	bne	13928 <__assert_fail@plt+0x1bb4>
   13048:	mov	r0, #12
   1304c:	bl	13e44 <__assert_fail@plt+0x20d0>
   13050:	cmp	r0, #0
   13054:	beq	124a8 <__assert_fail@plt+0x734>
   13058:	ldr	r3, [r4, #3088]	; 0xc10
   1305c:	cmp	r3, #0
   13060:	bne	124a8 <__assert_fail@plt+0x734>
   13064:	mov	r3, #1
   13068:	strb	r3, [r5, #-4080]	; 0xfffff010
   1306c:	b	124a8 <__assert_fail@plt+0x734>
   13070:	movw	r3, #41656	; 0xa2b8
   13074:	movt	r3, #3
   13078:	ldr	r7, [r3]
   1307c:	cmp	r7, #1
   13080:	beq	138dc <__assert_fail@plt+0x1b68>
   13084:	cmp	r7, #2
   13088:	movne	r7, #0
   1308c:	beq	138e8 <__assert_fail@plt+0x1b74>
   13090:	str	r7, [r4, #3088]	; 0xc10
   13094:	ldrb	r3, [r4, #3580]	; 0xdfc
   13098:	cmp	r3, #0
   1309c:	bne	12324 <__assert_fail@plt+0x5b0>
   130a0:	ldr	r3, [sp, #40]	; 0x28
   130a4:	cmn	r3, #1
   130a8:	bne	12330 <__assert_fail@plt+0x5bc>
   130ac:	mov	r0, #80	; 0x50
   130b0:	b	12334 <__assert_fail@plt+0x5c0>
   130b4:	mov	r0, #1
   130b8:	and	r0, r0, #1
   130bc:	strb	r0, [r5, #-4088]	; 0xfffff008
   130c0:	b	11e5c <__assert_fail@plt+0xe8>
   130c4:	mov	r0, #1
   130c8:	and	r0, r0, #1
   130cc:	strb	r0, [r4, #3580]	; 0xdfc
   130d0:	b	11e5c <__assert_fail@plt+0xe8>
   130d4:	ldr	r3, [r4, #3596]	; 0xe0c
   130d8:	cmp	r3, #0
   130dc:	beq	123c8 <__assert_fail@plt+0x654>
   130e0:	bic	r3, r7, #2
   130e4:	cmp	r7, #6
   130e8:	cmpne	r3, #1
   130ec:	moveq	r3, #1
   130f0:	movne	r3, #0
   130f4:	b	123c8 <__assert_fail@plt+0x654>
   130f8:	cmp	r2, #0
   130fc:	bne	1332c <__assert_fail@plt+0x15b8>
   13100:	str	r2, [r4, #3100]	; 0xc1c
   13104:	cmp	r9, #0
   13108:	beq	13afc <__assert_fail@plt+0x1d88>
   1310c:	ldr	r7, [pc, #-912]	; 12d84 <__assert_fail@plt+0x1010>
   13110:	b	13128 <__assert_fail@plt+0x13b4>
   13114:	mov	r0, #2
   13118:	bl	1b358 <__assert_fail@plt+0x95e4>
   1311c:	cmp	r0, #0
   13120:	beq	12484 <__assert_fail@plt+0x710>
   13124:	add	r9, r9, #6
   13128:	mov	r2, #6
   1312c:	mov	r1, r7
   13130:	mov	r0, r9
   13134:	bl	11d20 <strncmp@plt>
   13138:	cmp	r0, #0
   1313c:	beq	13114 <__assert_fail@plt+0x13a0>
   13140:	ldrb	r3, [r9]
   13144:	cmp	r3, #43	; 0x2b
   13148:	beq	13680 <__assert_fail@plt+0x190c>
   1314c:	ldr	r2, [pc, #-972]	; 12d88 <__assert_fail@plt+0x1014>
   13150:	mov	r3, #4
   13154:	mov	r0, r9
   13158:	ldr	r1, [pc, #-956]	; 12da4 <__assert_fail@plt+0x1030>
   1315c:	bl	19bd8 <__assert_fail@plt+0x7e64>
   13160:	subs	r2, r0, #0
   13164:	blt	13a34 <__assert_fail@plt+0x1cc0>
   13168:	cmp	r2, #3
   1316c:	ldrls	pc, [pc, r2, lsl #2]
   13170:	b	136c4 <__assert_fail@plt+0x1950>
   13174:	andeq	r3, r1, r0, lsr #19
   13178:	andeq	r3, r1, r0, asr r9
   1317c:	andeq	r3, r1, r8, lsr r9
   13180:	andeq	r3, r1, r4, ror #18
   13184:	movw	r3, #41656	; 0xa2b8
   13188:	movt	r3, #3
   1318c:	ldr	r3, [r3]
   13190:	cmp	r3, #1
   13194:	movne	r0, #0
   13198:	beq	13900 <__assert_fail@plt+0x1b8c>
   1319c:	and	r3, r0, #1
   131a0:	b	12384 <__assert_fail@plt+0x610>
   131a4:	ldrb	r1, [r5, #-4048]	; 0xfffff030
   131a8:	cmp	r1, #0
   131ac:	bne	1334c <__assert_fail@plt+0x15d8>
   131b0:	movw	r0, #35724	; 0x8b8c
   131b4:	movt	r0, #2
   131b8:	mov	r2, #1
   131bc:	bl	14168 <__assert_fail@plt+0x23f4>
   131c0:	ldr	r3, [r4, #3104]	; 0xc20
   131c4:	cmp	r3, #0
   131c8:	bne	1356c <__assert_fail@plt+0x17f8>
   131cc:	ldr	r3, [r4, #3080]	; 0xc08
   131d0:	cmp	r3, #0
   131d4:	beq	126c8 <__assert_fail@plt+0x954>
   131d8:	ldr	r3, [r3, #12]
   131dc:	cmp	r3, #0
   131e0:	strbeq	r3, [r5, #-3999]	; 0xfffff061
   131e4:	b	12604 <__assert_fail@plt+0x890>
   131e8:	movw	r0, #35136	; 0x8940
   131ec:	movt	r0, #2
   131f0:	bl	11ac8 <getenv@plt>
   131f4:	mov	r8, r0
   131f8:	sub	r2, r7, #8
   131fc:	sub	r1, r7, #12
   13200:	bl	1d050 <__assert_fail@plt+0xb2dc>
   13204:	cmp	r8, #0
   13208:	beq	13b48 <__assert_fail@plt+0x1dd4>
   1320c:	ldrd	r2, [r7, #-8]
   13210:	movw	r8, #41424	; 0xa1d0
   13214:	movt	r8, #3
   13218:	ldr	r1, [r4, #4004]	; 0xfa4
   1321c:	strd	r2, [r8, #216]	; 0xd8
   13220:	str	r1, [r4, #4032]	; 0xfc0
   13224:	ldr	r3, [sp, #48]	; 0x30
   13228:	cmp	r3, #0
   1322c:	beq	12304 <__assert_fail@plt+0x590>
   13230:	mov	r3, #0
   13234:	mov	r0, #1024	; 0x400
   13238:	mov	r1, #0
   1323c:	str	r3, [r4, #4004]	; 0xfa4
   13240:	strd	r0, [r7, #-8]
   13244:	b	12304 <__assert_fail@plt+0x590>
   13248:	ldr	r3, [r4, #3444]	; 0xd74
   1324c:	cmp	r3, #3
   13250:	beq	124c0 <__assert_fail@plt+0x74c>
   13254:	ldr	r3, [r4, #3088]	; 0xc10
   13258:	cmp	r3, #0
   1325c:	moveq	r3, #1
   13260:	movne	r3, #3
   13264:	b	124c4 <__assert_fail@plt+0x750>
   13268:	ldrb	r3, [r4, #4016]	; 0xfb0
   1326c:	cmp	r3, #0
   13270:	bne	1255c <__assert_fail@plt+0x7e8>
   13274:	ldrb	r2, [r4, #3085]	; 0xc0d
   13278:	cmp	r2, #0
   1327c:	bne	1255c <__assert_fail@plt+0x7e8>
   13280:	ldrb	r3, [r5, #-4000]	; 0xfffff060
   13284:	strb	r2, [r5, #-4087]	; 0xfffff009
   13288:	cmp	r3, #0
   1328c:	bne	132ac <__assert_fail@plt+0x1538>
   13290:	ldrb	r3, [r4, #3580]	; 0xdfc
   13294:	cmp	r3, #0
   13298:	bne	132ac <__assert_fail@plt+0x1538>
   1329c:	ldr	r3, [r4, #3444]	; 0xd74
   132a0:	cmp	r3, #0
   132a4:	ldrbeq	r3, [r4, #4001]	; 0xfa1
   132a8:	beq	12568 <__assert_fail@plt+0x7f4>
   132ac:	mov	r3, #1
   132b0:	b	12568 <__assert_fail@plt+0x7f4>
   132b4:	ldr	r2, [r8]
   132b8:	cmp	r2, #2
   132bc:	bne	132d8 <__assert_fail@plt+0x1564>
   132c0:	movw	r1, #35792	; 0x8bd0
   132c4:	movt	r1, #2
   132c8:	ldr	r0, [r8, #4]
   132cc:	bl	1196c <memcmp@plt>
   132d0:	cmp	r0, #0
   132d4:	beq	13908 <__assert_fail@plt+0x1b94>
   132d8:	bl	1579c <__assert_fail@plt+0x3a28>
   132dc:	ldr	r5, [pc, #-1368]	; 12d8c <__assert_fail@plt+0x1018>
   132e0:	movw	r3, #41764	; 0xa324
   132e4:	movt	r3, #3
   132e8:	ldr	r0, [r3]
   132ec:	ldr	r8, [pc, #-1380]	; 12d90 <__assert_fail@plt+0x101c>
   132f0:	add	r7, r5, #48	; 0x30
   132f4:	bl	119e4 <fflush_unlocked@plt>
   132f8:	b	13304 <__assert_fail@plt+0x1590>
   132fc:	cmp	r7, r5
   13300:	beq	1374c <__assert_fail@plt+0x19d8>
   13304:	ldr	r6, [r5], #4
   13308:	mov	r0, r8
   1330c:	mov	r1, r6
   13310:	bl	1199c <sigismember@plt>
   13314:	cmp	r0, #0
   13318:	beq	132fc <__assert_fail@plt+0x1588>
   1331c:	mov	r0, r6
   13320:	mov	r1, #0
   13324:	bl	11954 <signal@plt>
   13328:	b	132fc <__assert_fail@plt+0x1588>
   1332c:	ldr	r3, [r4, #3092]	; 0xc14
   13330:	sub	r3, r3, #1
   13334:	cmp	r3, #2
   13338:	movhi	r3, #0
   1333c:	bhi	12478 <__assert_fail@plt+0x704>
   13340:	mov	r3, #5
   13344:	str	r3, [r4, #3100]	; 0xc1c
   13348:	b	12484 <__assert_fail@plt+0x710>
   1334c:	movw	r3, #37260	; 0x918c
   13350:	movt	r3, #2
   13354:	movw	r0, #35724	; 0x8b8c
   13358:	movt	r0, #2
   1335c:	mov	r2, #1
   13360:	mov	r1, #3
   13364:	bl	180e0 <__assert_fail@plt+0x636c>
   13368:	b	131c0 <__assert_fail@plt+0x144c>
   1336c:	mov	r3, #8
   13370:	movw	r0, #35232	; 0x89a0
   13374:	movt	r0, #2
   13378:	str	r3, [r4, #3432]	; 0xd68
   1337c:	bl	11ac8 <getenv@plt>
   13380:	subs	r7, r0, #0
   13384:	beq	12370 <__assert_fail@plt+0x5fc>
   13388:	movw	r1, #37260	; 0x918c
   1338c:	movt	r1, #2
   13390:	mov	r2, #0
   13394:	mov	r3, sl
   13398:	str	r1, [sp]
   1339c:	mov	r1, r2
   133a0:	bl	23ba8 <_obstack_memory_used@@Base+0x3910>
   133a4:	cmp	r0, #0
   133a8:	bne	133c8 <__assert_fail@plt+0x1654>
   133ac:	ldrd	r2, [sp, #64]	; 0x40
   133b0:	mov	r1, #0
   133b4:	mvn	r0, #0
   133b8:	cmp	r3, r1
   133bc:	cmpeq	r2, r0
   133c0:	strls	r2, [r4, #3432]	; 0xd68
   133c4:	bls	12370 <__assert_fail@plt+0x5fc>
   133c8:	mov	r2, #5
   133cc:	movw	r1, #35240	; 0x89a8
   133d0:	movt	r1, #2
   133d4:	mov	r0, #0
   133d8:	bl	11984 <dcgettext@plt>
   133dc:	mov	r2, r0
   133e0:	mov	r0, r7
   133e4:	str	r2, [sp, #24]
   133e8:	bl	225bc <_obstack_memory_used@@Base+0x2324>
   133ec:	mov	r1, #0
   133f0:	mov	r3, r0
   133f4:	ldr	r2, [sp, #24]
   133f8:	mov	r0, r1
   133fc:	bl	11a8c <error@plt>
   13400:	b	12370 <__assert_fail@plt+0x5fc>
   13404:	ldr	r1, [pc, #-1648]	; 12d9c <__assert_fail@plt+0x1028>
   13408:	movw	r0, #35796	; 0x8bd4
   1340c:	movt	r0, #2
   13410:	bl	14e78 <__assert_fail@plt+0x3104>
   13414:	ldr	r1, [pc, #-1660]	; 12da0 <__assert_fail@plt+0x102c>
   13418:	movw	r0, #35808	; 0x8be0
   1341c:	movt	r0, #2
   13420:	bl	14e78 <__assert_fail@plt+0x3104>
   13424:	ldr	r0, [r4, #3156]	; 0xc54
   13428:	bl	21f2c <_obstack_memory_used@@Base+0x1c94>
   1342c:	movw	r3, #37556	; 0x92b4
   13430:	movt	r3, #2
   13434:	movw	r1, #35824	; 0x8bf0
   13438:	movt	r1, #2
   1343c:	ldr	r2, [r3, r0, lsl #2]
   13440:	mov	r0, #1
   13444:	bl	11bf4 <__printf_chk@plt>
   13448:	b	126ec <__assert_fail@plt+0x978>
   1344c:	add	r2, r3, #1
   13450:	str	r2, [sp, #60]	; 0x3c
   13454:	ldrb	r2, [r3]
   13458:	strb	r2, [sp, #56]	; 0x38
   1345c:	ldrb	r2, [r3, #1]
   13460:	cmp	r2, #0
   13464:	beq	13a08 <__assert_fail@plt+0x1c94>
   13468:	add	r2, r3, #2
   1346c:	add	r1, r3, #3
   13470:	str	r2, [sp, #60]	; 0x3c
   13474:	ldrb	r2, [r3, #1]
   13478:	strb	r2, [sp, #57]	; 0x39
   1347c:	str	r1, [sp, #60]	; 0x3c
   13480:	ldrb	r3, [r3, #2]
   13484:	cmp	r3, #61	; 0x3d
   13488:	bne	13a08 <__assert_fail@plt+0x1c94>
   1348c:	ldr	r5, [pc, #-1792]	; 12d94 <__assert_fail@plt+0x1020>
   13490:	mov	r9, #0
   13494:	ldr	r1, [sp, #28]
   13498:	b	134ac <__assert_fail@plt+0x1738>
   1349c:	ldr	r1, [r5, #4]!
   134a0:	add	r9, r9, #1
   134a4:	cmp	r1, #0
   134a8:	beq	134e4 <__assert_fail@plt+0x1770>
   134ac:	add	r0, sp, #56	; 0x38
   134b0:	bl	118a0 <strcmp@plt>
   134b4:	cmp	r0, #0
   134b8:	bne	1349c <__assert_fail@plt+0x1728>
   134bc:	ldr	ip, [sp, #64]	; 0x40
   134c0:	add	r9, r8, r9, lsl #3
   134c4:	mov	r2, r0
   134c8:	add	r1, sp, #60	; 0x3c
   134cc:	mov	r0, sl
   134d0:	mov	r3, r9
   134d4:	str	ip, [r9, #4]
   134d8:	bl	14208 <__assert_fail@plt+0x2494>
   134dc:	cmp	r0, #0
   134e0:	bne	12fbc <__assert_fail@plt+0x1248>
   134e4:	mov	r2, #5
   134e8:	movw	r1, #35688	; 0x8b68
   134ec:	movt	r1, #2
   134f0:	mov	r0, #0
   134f4:	ldr	r5, [sp, #24]
   134f8:	bl	11984 <dcgettext@plt>
   134fc:	mov	r9, r0
   13500:	add	r0, sp, #56	; 0x38
   13504:	bl	225bc <_obstack_memory_used@@Base+0x2324>
   13508:	mov	r1, #0
   1350c:	mov	r3, r0
   13510:	mov	r2, r9
   13514:	mov	r0, r1
   13518:	bl	11a8c <error@plt>
   1351c:	mov	r2, #5
   13520:	movw	r1, #35908	; 0x8c44
   13524:	movt	r1, #2
   13528:	mov	r0, #0
   1352c:	bl	11984 <dcgettext@plt>
   13530:	mov	r1, #0
   13534:	mov	r2, r0
   13538:	mov	r0, r1
   1353c:	bl	11a8c <error@plt>
   13540:	ldr	r0, [r5, #-3936]	; 0xfffff0a0
   13544:	bl	1b2b4 <__assert_fail@plt+0x9540>
   13548:	ldr	r0, [r4, #3592]	; 0xe08
   1354c:	b	1355c <__assert_fail@plt+0x17e8>
   13550:	ldr	r9, [r0, #16]
   13554:	bl	1b2b4 <__assert_fail@plt+0x9540>
   13558:	mov	r0, r9
   1355c:	cmp	r0, #0
   13560:	bne	13550 <__assert_fail@plt+0x17dc>
   13564:	strb	r0, [r4, #3580]	; 0xdfc
   13568:	b	12fe0 <__assert_fail@plt+0x126c>
   1356c:	bl	165b0 <__assert_fail@plt+0x483c>
   13570:	ldrb	r0, [r5, #-4048]	; 0xfffff030
   13574:	cmp	r0, #0
   13578:	beq	138f4 <__assert_fail@plt+0x1b80>
   1357c:	ldr	r3, [r4, #3104]	; 0xc20
   13580:	cmp	r3, #0
   13584:	beq	125f8 <__assert_fail@plt+0x884>
   13588:	bl	17d2c <__assert_fail@plt+0x5fb8>
   1358c:	ldr	r3, [r4, #3080]	; 0xc08
   13590:	cmp	r3, #0
   13594:	beq	126c8 <__assert_fail@plt+0x954>
   13598:	mov	r0, #10
   1359c:	bl	14d20 <__assert_fail@plt+0x2fac>
   135a0:	b	12604 <__assert_fail@plt+0x890>
   135a4:	ldr	r1, [pc, #-2068]	; 12d98 <__assert_fail@plt+0x1024>
   135a8:	mov	r3, #0
   135ac:	b	135f8 <__assert_fail@plt+0x1884>
   135b0:	cmp	r3, #65	; 0x41
   135b4:	bge	1360c <__assert_fail@plt+0x1898>
   135b8:	sub	r2, r3, #48	; 0x30
   135bc:	cmp	r2, #9
   135c0:	bls	1360c <__assert_fail@plt+0x1898>
   135c4:	sub	r2, r3, #45	; 0x2d
   135c8:	cmp	r3, #126	; 0x7e
   135cc:	cmpne	r2, #1
   135d0:	bls	1360c <__assert_fail@plt+0x1898>
   135d4:	sub	r2, r3, #95	; 0x5f
   135d8:	clz	r2, r2
   135dc:	lsr	r2, r2, #5
   135e0:	ldrb	r0, [r1, #1]!
   135e4:	add	r3, r3, #1
   135e8:	cmp	r3, #256	; 0x100
   135ec:	orr	r2, r2, r0
   135f0:	strb	r2, [r1]
   135f4:	beq	13614 <__assert_fail@plt+0x18a0>
   135f8:	cmp	r3, #90	; 0x5a
   135fc:	ble	135b0 <__assert_fail@plt+0x183c>
   13600:	sub	r2, r3, #97	; 0x61
   13604:	cmp	r2, #25
   13608:	bhi	135c4 <__assert_fail@plt+0x1850>
   1360c:	mov	r2, #1
   13610:	b	135e0 <__assert_fail@plt+0x186c>
   13614:	bl	23a04 <_obstack_memory_used@@Base+0x376c>
   13618:	cmp	r0, #0
   1361c:	movweq	r3, #37260	; 0x918c
   13620:	movteq	r3, #2
   13624:	strne	r0, [r4, #3584]	; 0xe00
   13628:	streq	r3, [r4, #3584]	; 0xe00
   1362c:	b	12588 <__assert_fail@plt+0x814>
   13630:	movw	r9, #45748	; 0xb2b4
   13634:	movt	r9, #1
   13638:	ldr	r0, [pc, #-2212]	; 12d9c <__assert_fail@plt+0x1028>
   1363c:	mov	r2, #0
   13640:	movw	r3, #17860	; 0x45c4
   13644:	movt	r3, #2
   13648:	mov	r1, r2
   1364c:	str	r9, [sp]
   13650:	bl	20038 <_obstack_begin@@Base>
   13654:	mov	r2, #0
   13658:	movw	r3, #17860	; 0x45c4
   1365c:	movt	r3, #2
   13660:	mov	r1, r2
   13664:	ldr	r0, [pc, #-2252]	; 12da0 <__assert_fail@plt+0x102c>
   13668:	str	r9, [sp]
   1366c:	bl	20038 <_obstack_begin@@Base>
   13670:	b	1257c <__assert_fail@plt+0x808>
   13674:	movw	r1, #26988	; 0x696c
   13678:	movt	r1, #2
   1367c:	b	129dc <__assert_fail@plt+0xc68>
   13680:	add	r9, r9, #1
   13684:	mov	r1, #10
   13688:	mov	r0, r9
   1368c:	bl	11ba0 <strchr@plt>
   13690:	subs	r3, r0, #0
   13694:	beq	13b68 <__assert_fail@plt+0x1df4>
   13698:	add	r7, r3, #1
   1369c:	mov	r1, #10
   136a0:	str	r3, [sp, #24]
   136a4:	mov	r0, r7
   136a8:	bl	11ba0 <strchr@plt>
   136ac:	ldr	r3, [sp, #24]
   136b0:	cmp	r0, #0
   136b4:	strbeq	r0, [r3]
   136b8:	bne	13bc4 <__assert_fail@plt+0x1e50>
   136bc:	str	r9, [r8, #196]	; 0xc4
   136c0:	str	r7, [r8, #200]	; 0xc8
   136c4:	bl	13f04 <__assert_fail@plt+0x2190>
   136c8:	b	12484 <__assert_fail@plt+0x710>
   136cc:	movw	r0, #35304	; 0x89e8
   136d0:	movt	r0, #2
   136d4:	bl	11ac8 <getenv@plt>
   136d8:	subs	r3, r0, #0
   136dc:	str	r3, [sp, #24]
   136e0:	beq	13718 <__assert_fail@plt+0x19a4>
   136e4:	movw	r7, #37516	; 0x928c
   136e8:	movt	r7, #2
   136ec:	mov	r2, r7
   136f0:	movw	r1, #37556	; 0x92b4
   136f4:	movt	r1, #2
   136f8:	mov	r3, #4
   136fc:	bl	19bd8 <__assert_fail@plt+0x7e64>
   13700:	cmp	r0, #0
   13704:	blt	13b8c <__assert_fail@plt+0x1e18>
   13708:	ldr	r3, [r7, r0, lsl #2]
   1370c:	cmp	r3, #0
   13710:	str	r3, [sp, #32]
   13714:	bge	12394 <__assert_fail@plt+0x620>
   13718:	movw	r3, #41656	; 0xa2b8
   1371c:	movt	r3, #3
   13720:	ldr	r3, [r3]
   13724:	cmp	r3, #1
   13728:	movne	r3, #7
   1372c:	strne	r3, [sp, #32]
   13730:	bne	12394 <__assert_fail@plt+0x620>
   13734:	bl	13eb8 <__assert_fail@plt+0x2144>
   13738:	cmp	r0, #0
   1373c:	movne	r3, #3
   13740:	strne	r3, [sp, #32]
   13744:	bne	12394 <__assert_fail@plt+0x620>
   13748:	b	123a0 <__assert_fail@plt+0x62c>
   1374c:	ldr	r5, [r4, #3436]	; 0xd6c
   13750:	cmp	r5, #0
   13754:	beq	13768 <__assert_fail@plt+0x19f4>
   13758:	mov	r0, #19
   1375c:	bl	1187c <raise@plt>
   13760:	subs	r5, r5, #1
   13764:	bne	13758 <__assert_fail@plt+0x19e4>
   13768:	ldr	r0, [r4]
   1376c:	cmp	r0, #0
   13770:	beq	126e0 <__assert_fail@plt+0x96c>
   13774:	bl	1187c <raise@plt>
   13778:	b	126e0 <__assert_fail@plt+0x96c>
   1377c:	mov	r2, #1
   13780:	mov	r1, #32
   13784:	bl	21f5c <_obstack_memory_used@@Base+0x1cc4>
   13788:	b	123e0 <__assert_fail@plt+0x66c>
   1378c:	bl	13eb8 <__assert_fail@plt+0x2144>
   13790:	cmp	r0, #0
   13794:	bne	13b1c <__assert_fail@plt+0x1da8>
   13798:	movw	r0, #35164	; 0x895c
   1379c:	movt	r0, #2
   137a0:	bl	11ac8 <getenv@plt>
   137a4:	subs	r7, r0, #0
   137a8:	beq	130ac <__assert_fail@plt+0x1338>
   137ac:	ldrb	r3, [r7]
   137b0:	cmp	r3, #0
   137b4:	beq	130ac <__assert_fail@plt+0x1338>
   137b8:	bl	13de4 <__assert_fail@plt+0x2070>
   137bc:	subs	r3, r0, #0
   137c0:	str	r3, [sp, #40]	; 0x28
   137c4:	bge	12330 <__assert_fail@plt+0x5bc>
   137c8:	mov	r2, #5
   137cc:	movw	r1, #35172	; 0x8964
   137d0:	movt	r1, #2
   137d4:	mov	r0, #0
   137d8:	bl	11984 <dcgettext@plt>
   137dc:	mov	r2, r0
   137e0:	mov	r0, r7
   137e4:	str	r2, [sp, #24]
   137e8:	bl	225bc <_obstack_memory_used@@Base+0x2324>
   137ec:	mov	r1, #0
   137f0:	mov	r3, r0
   137f4:	ldr	r2, [sp, #24]
   137f8:	mov	r0, r1
   137fc:	bl	11a8c <error@plt>
   13800:	b	130ac <__assert_fail@plt+0x1338>
   13804:	movw	r0, #35660	; 0x8b4c
   13808:	movt	r0, #2
   1380c:	bl	11ac8 <getenv@plt>
   13810:	cmp	r0, #0
   13814:	beq	13824 <__assert_fail@plt+0x1ab0>
   13818:	ldrb	r3, [r0]
   1381c:	cmp	r3, #0
   13820:	bne	13008 <__assert_fail@plt+0x1294>
   13824:	movw	r0, #35672	; 0x8b58
   13828:	movt	r0, #2
   1382c:	bl	11ac8 <getenv@plt>
   13830:	subs	r3, r0, #0
   13834:	beq	13a28 <__assert_fail@plt+0x1cb4>
   13838:	mov	r2, r3
   1383c:	ldrb	r3, [r3]
   13840:	cmp	r3, #0
   13844:	beq	13a28 <__assert_fail@plt+0x1cb4>
   13848:	movw	r3, #22256	; 0x56f0
   1384c:	movt	r3, #2
   13850:	str	r7, [sp, #24]
   13854:	movw	r1, #35680	; 0x8b60
   13858:	movt	r1, #2
   1385c:	str	r6, [sp, #28]
   13860:	mov	r9, r5
   13864:	mov	r6, r3
   13868:	str	r4, [sp, #32]
   1386c:	mov	r5, r2
   13870:	mov	r7, r3
   13874:	mov	r4, r1
   13878:	b	1389c <__assert_fail@plt+0x1b28>
   1387c:	mov	r0, r6
   13880:	bl	11b94 <strlen@plt>
   13884:	add	r0, r0, #1
   13888:	movw	r2, #4309	; 0x10d5
   1388c:	add	r6, r6, r0
   13890:	sub	r1, r6, r7
   13894:	cmp	r1, r2
   13898:	bhi	13a18 <__assert_fail@plt+0x1ca4>
   1389c:	mov	r2, #5
   138a0:	mov	r1, r4
   138a4:	mov	r0, r6
   138a8:	bl	11d20 <strncmp@plt>
   138ac:	subs	r2, r0, #0
   138b0:	bne	1387c <__assert_fail@plt+0x1b08>
   138b4:	mov	r1, r5
   138b8:	add	r0, r6, #5
   138bc:	bl	11ab0 <fnmatch@plt>
   138c0:	cmp	r0, #0
   138c4:	bne	1387c <__assert_fail@plt+0x1b08>
   138c8:	mov	r5, r9
   138cc:	ldr	r7, [sp, #24]
   138d0:	ldr	r6, [sp, #28]
   138d4:	ldr	r4, [sp, #32]
   138d8:	b	13008 <__assert_fail@plt+0x1294>
   138dc:	bl	13eb8 <__assert_fail@plt+0x2144>
   138e0:	cmp	r0, #0
   138e4:	beq	13090 <__assert_fail@plt+0x131c>
   138e8:	mov	r3, #2
   138ec:	str	r3, [r4, #3088]	; 0xc10
   138f0:	b	12324 <__assert_fail@plt+0x5b0>
   138f4:	mov	r1, #1
   138f8:	bl	14af0 <__assert_fail@plt+0x2d7c>
   138fc:	b	1357c <__assert_fail@plt+0x1808>
   13900:	bl	13eb8 <__assert_fail@plt+0x2144>
   13904:	b	1319c <__assert_fail@plt+0x1428>
   13908:	ldr	r3, [r8, #8]
   1390c:	cmp	r3, #1
   13910:	bne	132d8 <__assert_fail@plt+0x1564>
   13914:	ldr	r3, [r8, #12]
   13918:	ldrb	r3, [r3]
   1391c:	cmp	r3, #109	; 0x6d
   13920:	bne	132d8 <__assert_fail@plt+0x1564>
   13924:	b	132dc <__assert_fail@plt+0x1568>
   13928:	ldrb	r3, [r4, #3589]	; 0xe05
   1392c:	cmp	r3, #0
   13930:	bne	13064 <__assert_fail@plt+0x12f0>
   13934:	b	13048 <__assert_fail@plt+0x12d4>
   13938:	movw	r2, #35624	; 0x8b28
   1393c:	movt	r2, #2
   13940:	movw	r3, #35636	; 0x8b34
   13944:	movt	r3, #2
   13948:	strd	r2, [r8, #196]	; 0xc4
   1394c:	b	136c4 <__assert_fail@plt+0x1950>
   13950:	movw	r3, #35608	; 0x8b18
   13954:	movt	r3, #2
   13958:	str	r3, [r8, #196]	; 0xc4
   1395c:	str	r3, [r8, #200]	; 0xc8
   13960:	b	136c4 <__assert_fail@plt+0x1950>
   13964:	mov	r0, #2
   13968:	bl	1b358 <__assert_fail@plt+0x95e4>
   1396c:	cmp	r0, #0
   13970:	beq	136c4 <__assert_fail@plt+0x1950>
   13974:	mov	r2, #2
   13978:	mov	r0, #0
   1397c:	ldr	r1, [r8, #196]	; 0xc4
   13980:	bl	11984 <dcgettext@plt>
   13984:	mov	r2, #2
   13988:	str	r0, [r8, #196]	; 0xc4
   1398c:	mov	r0, #0
   13990:	ldr	r1, [r8, #200]	; 0xc8
   13994:	bl	11984 <dcgettext@plt>
   13998:	str	r0, [r8, #200]	; 0xc8
   1399c:	b	136c4 <__assert_fail@plt+0x1950>
   139a0:	movw	r3, #35584	; 0x8b00
   139a4:	movt	r3, #2
   139a8:	str	r3, [r8, #196]	; 0xc4
   139ac:	str	r3, [r8, #200]	; 0xc8
   139b0:	b	136c4 <__assert_fail@plt+0x1950>
   139b4:	add	r3, r3, #1
   139b8:	str	r3, [sp, #60]	; 0x3c
   139bc:	b	12fbc <__assert_fail@plt+0x1248>
   139c0:	mov	r0, #20
   139c4:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   139c8:	ldr	ip, [sp, #60]	; 0x3c
   139cc:	mov	r2, #1
   139d0:	mov	r9, r0
   139d4:	mov	r3, r0
   139d8:	add	r1, sp, #60	; 0x3c
   139dc:	ldr	lr, [r4, #3592]	; 0xe08
   139e0:	mov	r0, sl
   139e4:	str	r9, [r4, #3592]	; 0xe08
   139e8:	add	ip, ip, r2
   139ec:	str	ip, [sp, #60]	; 0x3c
   139f0:	ldr	ip, [sp, #64]	; 0x40
   139f4:	str	ip, [r9, #4]
   139f8:	str	lr, [r9, #16]
   139fc:	bl	14208 <__assert_fail@plt+0x2494>
   13a00:	cmp	r0, #0
   13a04:	bne	13abc <__assert_fail@plt+0x1d48>
   13a08:	ldr	r5, [sp, #24]
   13a0c:	b	1351c <__assert_fail@plt+0x17a8>
   13a10:	mov	r0, #0
   13a14:	bl	1945c <__assert_fail@plt+0x76e8>
   13a18:	ldr	r7, [sp, #24]
   13a1c:	mov	r5, r9
   13a20:	ldr	r6, [sp, #28]
   13a24:	ldr	r4, [sp, #32]
   13a28:	mov	r3, #0
   13a2c:	strb	r3, [r4, #3580]	; 0xdfc
   13a30:	b	13008 <__assert_fail@plt+0x1294>
   13a34:	mov	r1, r9
   13a38:	movw	r0, #35476	; 0x8a94
   13a3c:	movt	r0, #2
   13a40:	ldr	r6, [pc, #-3236]	; 12da4 <__assert_fail@plt+0x1030>
   13a44:	movw	r4, #41760	; 0xa320
   13a48:	movt	r4, #3
   13a4c:	movw	r5, #35512	; 0x8ab8
   13a50:	movt	r5, #2
   13a54:	bl	19d58 <__assert_fail@plt+0x7fe4>
   13a58:	mov	r2, #5
   13a5c:	movw	r1, #35488	; 0x8aa0
   13a60:	movt	r1, #2
   13a64:	mov	r0, #0
   13a68:	bl	11984 <dcgettext@plt>
   13a6c:	ldr	r1, [r4]
   13a70:	bl	11864 <fputs_unlocked@plt>
   13a74:	movw	r3, #34856	; 0x8828
   13a78:	movt	r3, #2
   13a7c:	mov	r2, r5
   13a80:	mov	r1, #1
   13a84:	ldr	r0, [r4]
   13a88:	bl	11c18 <__fprintf_chk@plt>
   13a8c:	ldr	r3, [r6, #4]!
   13a90:	cmp	r3, #0
   13a94:	bne	13a7c <__assert_fail@plt+0x1d08>
   13a98:	mov	r0, r3
   13a9c:	movw	r1, #35528	; 0x8ac8
   13aa0:	movt	r1, #2
   13aa4:	mov	r2, #5
   13aa8:	bl	11984 <dcgettext@plt>
   13aac:	ldr	r1, [r4]
   13ab0:	bl	11864 <fputs_unlocked@plt>
   13ab4:	mov	r0, #2
   13ab8:	bl	1945c <__assert_fail@plt+0x76e8>
   13abc:	ldr	r3, [sp, #60]	; 0x3c
   13ac0:	add	r2, r3, #1
   13ac4:	str	r2, [sp, #60]	; 0x3c
   13ac8:	ldrb	r3, [r3]
   13acc:	cmp	r3, #61	; 0x3d
   13ad0:	bne	13a08 <__assert_fail@plt+0x1c94>
   13ad4:	ldr	ip, [sp, #64]	; 0x40
   13ad8:	add	r3, r9, #8
   13adc:	mov	r2, #0
   13ae0:	add	r1, sp, #60	; 0x3c
   13ae4:	mov	r0, sl
   13ae8:	str	ip, [r9, #12]
   13aec:	bl	14208 <__assert_fail@plt+0x2494>
   13af0:	cmp	r0, #0
   13af4:	bne	12fbc <__assert_fail@plt+0x1248>
   13af8:	b	13a08 <__assert_fail@plt+0x1c94>
   13afc:	movw	r0, #35432	; 0x8a68
   13b00:	movt	r0, #2
   13b04:	bl	11ac8 <getenv@plt>
   13b08:	subs	r9, r0, #0
   13b0c:	bne	1310c <__assert_fail@plt+0x1398>
   13b10:	movw	r9, #34868	; 0x8834
   13b14:	movt	r9, #2
   13b18:	b	1314c <__assert_fail@plt+0x13d8>
   13b1c:	mov	r2, sl
   13b20:	movw	r1, #21523	; 0x5413
   13b24:	mov	r0, #1
   13b28:	bl	11a38 <ioctl@plt>
   13b2c:	cmp	r0, #0
   13b30:	blt	13798 <__assert_fail@plt+0x1a24>
   13b34:	ldrh	r3, [sp, #66]	; 0x42
   13b38:	cmp	r3, #0
   13b3c:	strne	r3, [sp, #40]	; 0x28
   13b40:	bne	12330 <__assert_fail@plt+0x5bc>
   13b44:	b	13798 <__assert_fail@plt+0x1a24>
   13b48:	movw	r0, #35152	; 0x8950
   13b4c:	movt	r0, #2
   13b50:	bl	11ac8 <getenv@plt>
   13b54:	cmp	r0, #0
   13b58:	bne	1320c <__assert_fail@plt+0x1498>
   13b5c:	movw	r8, #41424	; 0xa1d0
   13b60:	movt	r8, #3
   13b64:	b	13224 <__assert_fail@plt+0x14b0>
   13b68:	mov	r7, r9
   13b6c:	b	136bc <__assert_fail@plt+0x1948>
   13b70:	movw	r1, #26640	; 0x6810
   13b74:	movt	r1, #2
   13b78:	ldr	r3, [pc, #-3536]	; 12db0 <__assert_fail@plt+0x103c>
   13b7c:	movw	r0, #35864	; 0x8c18
   13b80:	movt	r0, #2
   13b84:	movw	r2, #1857	; 0x741
   13b88:	bl	11d74 <__assert_fail@plt>
   13b8c:	mov	r2, #5
   13b90:	movw	r1, #35320	; 0x89f8
   13b94:	movt	r1, #2
   13b98:	mov	r0, #0
   13b9c:	bl	11984 <dcgettext@plt>
   13ba0:	mov	r7, r0
   13ba4:	ldr	r0, [sp, #24]
   13ba8:	bl	225bc <_obstack_memory_used@@Base+0x2324>
   13bac:	mov	r1, #0
   13bb0:	mov	r3, r0
   13bb4:	mov	r2, r7
   13bb8:	mov	r0, r1
   13bbc:	bl	11a8c <error@plt>
   13bc0:	b	13718 <__assert_fail@plt+0x19a4>
   13bc4:	mov	r2, #5
   13bc8:	movw	r1, #35444	; 0x8a74
   13bcc:	movt	r1, #2
   13bd0:	mov	r0, #0
   13bd4:	bl	11984 <dcgettext@plt>
   13bd8:	mov	r4, r0
   13bdc:	mov	r0, r9
   13be0:	bl	225bc <_obstack_memory_used@@Base+0x2324>
   13be4:	mov	r3, r0
   13be8:	mov	r2, r4
   13bec:	mov	r1, #0
   13bf0:	mov	r0, #2
   13bf4:	bl	11a8c <error@plt>
   13bf8:	ldr	ip, [r8]
   13bfc:	mov	r2, #0
   13c00:	ldr	r3, [pc, #-3680]	; 12da8 <__assert_fail@plt+0x1034>
   13c04:	ldr	r1, [sp, #64]	; 0x40
   13c08:	str	ip, [sp]
   13c0c:	bl	23b18 <_obstack_memory_used@@Base+0x3880>
   13c10:	movw	r1, #26640	; 0x6810
   13c14:	movt	r1, #2
   13c18:	ldr	r3, [pc, #-3700]	; 12dac <__assert_fail@plt+0x1038>
   13c1c:	movw	r0, #35728	; 0x8b90
   13c20:	movt	r0, #2
   13c24:	movw	r2, #1053	; 0x41d
   13c28:	bl	11d74 <__assert_fail@plt>
   13c2c:	movw	r1, #26640	; 0x6810
   13c30:	movt	r1, #2
   13c34:	ldr	r3, [pc, #-3724]	; 12db0 <__assert_fail@plt+0x103c>
   13c38:	movw	r0, #35784	; 0x8bc8
   13c3c:	movt	r0, #2
   13c40:	movw	r2, #1805	; 0x70d
   13c44:	bl	11d74 <__assert_fail@plt>
   13c48:	mov	r2, #5
   13c4c:	movw	r1, #35396	; 0x8a44
   13c50:	movt	r1, #2
   13c54:	mov	r0, #0
   13c58:	bl	11984 <dcgettext@plt>
   13c5c:	mov	r2, r0
   13c60:	mov	r1, #0
   13c64:	mov	r0, #2
   13c68:	bl	11a8c <error@plt>
   13c6c:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   13c70:	mov	fp, #0
   13c74:	mov	lr, #0
   13c78:	pop	{r1}		; (ldr r1, [sp], #4)
   13c7c:	mov	r2, sp
   13c80:	push	{r2}		; (str r2, [sp, #-4]!)
   13c84:	push	{r0}		; (str r0, [sp, #-4]!)
   13c88:	ldr	ip, [pc, #16]	; 13ca0 <__assert_fail@plt+0x1f2c>
   13c8c:	push	{ip}		; (str ip, [sp, #-4]!)
   13c90:	ldr	r0, [pc, #12]	; 13ca4 <__assert_fail@plt+0x1f30>
   13c94:	ldr	r3, [pc, #12]	; 13ca8 <__assert_fail@plt+0x1f34>
   13c98:	bl	11af8 <__libc_start_main@plt>
   13c9c:	bl	11d2c <abort@plt>
   13ca0:	andeq	r5, r2, r8, lsr #32
   13ca4:	andeq	r1, r1, r0, lsl #27
   13ca8:	andeq	r4, r2, r8, asr #31
   13cac:	ldr	r3, [pc, #20]	; 13cc8 <__assert_fail@plt+0x1f54>
   13cb0:	ldr	r2, [pc, #20]	; 13ccc <__assert_fail@plt+0x1f58>
   13cb4:	add	r3, pc, r3
   13cb8:	ldr	r2, [r3, r2]
   13cbc:	cmp	r2, #0
   13cc0:	bxeq	lr
   13cc4:	b	11b34 <__gmon_start__@plt>
   13cc8:	andeq	r6, r2, r4, asr #6
   13ccc:	andeq	r0, r0, r4, asr #3
   13cd0:	ldr	r0, [pc, #24]	; 13cf0 <__assert_fail@plt+0x1f7c>
   13cd4:	ldr	r3, [pc, #24]	; 13cf4 <__assert_fail@plt+0x1f80>
   13cd8:	cmp	r3, r0
   13cdc:	bxeq	lr
   13ce0:	ldr	r3, [pc, #16]	; 13cf8 <__assert_fail@plt+0x1f84>
   13ce4:	cmp	r3, #0
   13ce8:	bxeq	lr
   13cec:	bx	r3
   13cf0:	andeq	sl, r3, ip, lsl #6
   13cf4:	andeq	sl, r3, ip, lsl #6
   13cf8:	andeq	r0, r0, r0
   13cfc:	ldr	r0, [pc, #36]	; 13d28 <__assert_fail@plt+0x1fb4>
   13d00:	ldr	r1, [pc, #36]	; 13d2c <__assert_fail@plt+0x1fb8>
   13d04:	sub	r1, r1, r0
   13d08:	asr	r1, r1, #2
   13d0c:	add	r1, r1, r1, lsr #31
   13d10:	asrs	r1, r1, #1
   13d14:	bxeq	lr
   13d18:	ldr	r3, [pc, #16]	; 13d30 <__assert_fail@plt+0x1fbc>
   13d1c:	cmp	r3, #0
   13d20:	bxeq	lr
   13d24:	bx	r3
   13d28:	andeq	sl, r3, ip, lsl #6
   13d2c:	andeq	sl, r3, ip, lsl #6
   13d30:	andeq	r0, r0, r0
   13d34:	push	{r4, lr}
   13d38:	ldr	r4, [pc, #24]	; 13d58 <__assert_fail@plt+0x1fe4>
   13d3c:	ldrb	r3, [r4]
   13d40:	cmp	r3, #0
   13d44:	popne	{r4, pc}
   13d48:	bl	13cd0 <__assert_fail@plt+0x1f5c>
   13d4c:	mov	r3, #1
   13d50:	strb	r3, [r4]
   13d54:	pop	{r4, pc}
   13d58:	andeq	sl, r3, ip, lsr #6
   13d5c:	b	13cfc <__assert_fail@plt+0x1f88>
   13d60:	mov	r2, r1
   13d64:	mov	r3, #0
   13d68:	str	r4, [sp, #-8]!
   13d6c:	ldrd	r0, [r0]
   13d70:	str	lr, [sp, #4]
   13d74:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   13d78:	ldr	r4, [sp]
   13d7c:	add	sp, sp, #4
   13d80:	mov	r0, r2
   13d84:	pop	{pc}		; (ldr pc, [sp], #4)
   13d88:	strd	r4, [sp, #-8]!
   13d8c:	ldrd	r2, [r1]
   13d90:	ldrd	r4, [r0]
   13d94:	cmp	r5, r3
   13d98:	cmpeq	r4, r2
   13d9c:	movne	r0, #0
   13da0:	bne	13dbc <__assert_fail@plt+0x2048>
   13da4:	ldrd	r4, [r0, #8]
   13da8:	ldrd	r2, [r1, #8]
   13dac:	cmp	r5, r3
   13db0:	cmpeq	r4, r2
   13db4:	moveq	r0, #1
   13db8:	movne	r0, #0
   13dbc:	ldrd	r4, [sp]
   13dc0:	add	sp, sp, #8
   13dc4:	bx	lr
   13dc8:	movw	r3, #41776	; 0xa330
   13dcc:	movt	r3, #3
   13dd0:	ldr	r2, [r3]
   13dd4:	cmp	r2, #0
   13dd8:	streq	r0, [r3]
   13ddc:	bx	lr
   13de0:	b	1b2b4 <__assert_fail@plt+0x9540>
   13de4:	movw	ip, #37260	; 0x918c
   13de8:	movt	ip, #2
   13dec:	push	{lr}		; (str lr, [sp, #-4]!)
   13df0:	sub	sp, sp, #20
   13df4:	mov	r2, #0
   13df8:	add	r3, sp, #8
   13dfc:	mov	r1, r2
   13e00:	str	ip, [sp]
   13e04:	bl	23ba8 <_obstack_memory_used@@Base+0x3910>
   13e08:	cmp	r0, #0
   13e0c:	beq	13e24 <__assert_fail@plt+0x20b0>
   13e10:	cmp	r0, #1
   13e14:	moveq	r0, #0
   13e18:	mvnne	r0, #0
   13e1c:	add	sp, sp, #20
   13e20:	pop	{pc}		; (ldr pc, [sp], #4)
   13e24:	ldrd	r0, [sp, #8]
   13e28:	mov	r3, #0
   13e2c:	mvn	r2, #-2147483648	; 0x80000000
   13e30:	cmp	r1, r3
   13e34:	cmpeq	r0, r2
   13e38:	movhi	r0, #0
   13e3c:	add	sp, sp, #20
   13e40:	pop	{pc}		; (ldr pc, [sp], #4)
   13e44:	movw	r3, #41424	; 0xa1d0
   13e48:	movt	r3, #3
   13e4c:	ldr	r2, [r3, r0, lsl #3]
   13e50:	cmp	r2, #0
   13e54:	beq	13e78 <__assert_fail@plt+0x2104>
   13e58:	add	r3, r3, r0, lsl #3
   13e5c:	cmp	r2, #1
   13e60:	ldr	r0, [r3, #4]
   13e64:	beq	13e80 <__assert_fail@plt+0x210c>
   13e68:	cmp	r2, #2
   13e6c:	beq	13e90 <__assert_fail@plt+0x211c>
   13e70:	mov	r0, #1
   13e74:	bx	lr
   13e78:	mov	r0, r2
   13e7c:	bx	lr
   13e80:	ldrb	r2, [r0]
   13e84:	subs	r0, r2, #48	; 0x30
   13e88:	movne	r0, #1
   13e8c:	bx	lr
   13e90:	movw	r1, #26568	; 0x67c8
   13e94:	movt	r1, #2
   13e98:	str	r4, [sp, #-8]!
   13e9c:	str	lr, [sp, #4]
   13ea0:	bl	11d20 <strncmp@plt>
   13ea4:	adds	r0, r0, #0
   13ea8:	ldr	r4, [sp]
   13eac:	add	sp, sp, #4
   13eb0:	movne	r0, #1
   13eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   13eb8:	str	r4, [sp, #-8]!
   13ebc:	movw	r4, #41424	; 0xa1d0
   13ec0:	movt	r4, #3
   13ec4:	ldrsb	r0, [r4, #192]	; 0xc0
   13ec8:	str	lr, [sp, #4]
   13ecc:	cmp	r0, #0
   13ed0:	blt	13ee4 <__assert_fail@plt+0x2170>
   13ed4:	ldr	r4, [sp]
   13ed8:	add	sp, sp, #4
   13edc:	and	r0, r0, #1
   13ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ee4:	mov	r0, #1
   13ee8:	bl	11d08 <isatty@plt>
   13eec:	sxtb	r0, r0
   13ef0:	strb	r0, [r4, #192]	; 0xc0
   13ef4:	and	r0, r0, #1
   13ef8:	ldr	r4, [sp]
   13efc:	add	sp, sp, #4
   13f00:	pop	{pc}		; (ldr pc, [sp], #4)
   13f04:	ldr	r3, [pc, #596]	; 14160 <__assert_fail@plt+0x23ec>
   13f08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f0c:	strd	r6, [sp, #8]
   13f10:	strd	r8, [sp, #16]
   13f14:	strd	sl, [sp, #24]
   13f18:	str	lr, [sp, #32]
   13f1c:	sub	sp, sp, #1584	; 0x630
   13f20:	add	ip, r3, #8
   13f24:	sub	sp, sp, #12
   13f28:	mov	r1, r3
   13f2c:	add	r2, sp, #48	; 0x30
   13f30:	mov	r0, r2
   13f34:	str	r3, [sp, #24]
   13f38:	str	r2, [sp, #32]
   13f3c:	ldr	r2, [r1], #4
   13f40:	ldrb	r3, [r2]
   13f44:	cmp	r3, #0
   13f48:	bne	13f5c <__assert_fail@plt+0x21e8>
   13f4c:	b	1404c <__assert_fail@plt+0x22d8>
   13f50:	cmp	r3, #0
   13f54:	add	r2, r2, #1
   13f58:	beq	1404c <__assert_fail@plt+0x22d8>
   13f5c:	cmp	r3, #37	; 0x25
   13f60:	ldrb	r3, [r2, #1]
   13f64:	bne	13f50 <__assert_fail@plt+0x21dc>
   13f68:	cmp	r3, #37	; 0x25
   13f6c:	beq	14038 <__assert_fail@plt+0x22c4>
   13f70:	cmp	r3, #98	; 0x62
   13f74:	bne	13f50 <__assert_fail@plt+0x21dc>
   13f78:	cmp	r1, ip
   13f7c:	str	r2, [r0], #4
   13f80:	bne	13f3c <__assert_fail@plt+0x21c8>
   13f84:	ldr	r3, [sp, #48]	; 0x30
   13f88:	cmp	r3, #0
   13f8c:	beq	14084 <__assert_fail@plt+0x2310>
   13f90:	mov	fp, #26
   13f94:	movt	fp, #2
   13f98:	mov	r9, #12
   13f9c:	add	r6, sp, #56	; 0x38
   13fa0:	mov	r4, #14
   13fa4:	movt	r4, #2
   13fa8:	mov	r5, #0
   13fac:	sub	r7, r6, #12
   13fb0:	mov	r0, r4
   13fb4:	str	r9, [sp, #44]	; 0x2c
   13fb8:	add	r4, r4, #1
   13fbc:	bl	11c90 <nl_langinfo@plt>
   13fc0:	mov	r1, #37	; 0x25
   13fc4:	mov	sl, r0
   13fc8:	bl	11ba0 <strchr@plt>
   13fcc:	subs	r8, r0, #0
   13fd0:	bne	14064 <__assert_fail@plt+0x22f0>
   13fd4:	bl	11b58 <__ctype_b_loc@plt>
   13fd8:	str	r8, [sp, #4]
   13fdc:	mov	r2, #128	; 0x80
   13fe0:	mov	r1, r6
   13fe4:	ldrb	ip, [sl]
   13fe8:	mov	r3, r7
   13fec:	add	r6, r6, r2
   13ff0:	ldr	lr, [r0]
   13ff4:	mov	r0, sl
   13ff8:	lsl	ip, ip, #1
   13ffc:	ldrh	ip, [lr, ip]
   14000:	ubfx	ip, ip, #11, #1
   14004:	str	ip, [sp]
   14008:	bl	1d7a8 <__assert_fail@plt+0xba34>
   1400c:	cmp	r0, #127	; 0x7f
   14010:	bhi	14064 <__assert_fail@plt+0x22f0>
   14014:	ldr	r3, [sp, #44]	; 0x2c
   14018:	cmp	r5, r3
   1401c:	movcc	r5, r3
   14020:	cmp	r4, fp
   14024:	bne	13fb0 <__assert_fail@plt+0x223c>
   14028:	cmp	r9, r5
   1402c:	bls	14094 <__assert_fail@plt+0x2320>
   14030:	mov	r9, r5
   14034:	b	13f9c <__assert_fail@plt+0x2228>
   14038:	ldrb	r3, [r2, #2]
   1403c:	add	r2, r2, #1
   14040:	add	r2, r2, #1
   14044:	cmp	r3, #0
   14048:	bne	13f5c <__assert_fail@plt+0x21e8>
   1404c:	mov	r2, r3
   14050:	b	13f78 <__assert_fail@plt+0x2204>
   14054:	mov	fp, r3
   14058:	movw	r3, #41776	; 0xa330
   1405c:	movt	r3, #3
   14060:	strb	fp, [r3, #3076]	; 0xc04
   14064:	add	sp, sp, #1584	; 0x630
   14068:	add	sp, sp, #12
   1406c:	ldrd	r4, [sp]
   14070:	ldrd	r6, [sp, #8]
   14074:	ldrd	r8, [sp, #16]
   14078:	ldrd	sl, [sp, #24]
   1407c:	add	sp, sp, #32
   14080:	pop	{pc}		; (ldr pc, [sp], #4)
   14084:	ldr	r3, [sp, #52]	; 0x34
   14088:	cmp	r3, #0
   1408c:	bne	13f90 <__assert_fail@plt+0x221c>
   14090:	b	14064 <__assert_fail@plt+0x22f0>
   14094:	movw	r3, #35228	; 0x899c
   14098:	movt	r3, #2
   1409c:	ldr	sl, [pc, #192]	; 14164 <__assert_fail@plt+0x23f0>
   140a0:	mov	fp, r8
   140a4:	movw	r8, #26572	; 0x67cc
   140a8:	movt	r8, #2
   140ac:	ldr	r9, [sp, #32]
   140b0:	str	fp, [sp, #28]
   140b4:	str	r3, [sp, #36]	; 0x24
   140b8:	add	r3, sp, #56	; 0x38
   140bc:	add	r7, r3, #1536	; 0x600
   140c0:	ldr	r3, [sp, #24]
   140c4:	add	r4, sp, #56	; 0x38
   140c8:	mov	r5, sl
   140cc:	ldr	r6, [r3], #4
   140d0:	str	r3, [sp, #24]
   140d4:	b	1410c <__assert_fail@plt+0x2398>
   140d8:	cmp	lr, #128	; 0x80
   140dc:	bgt	14064 <__assert_fail@plt+0x22f0>
   140e0:	stm	sp, {r8, lr}
   140e4:	str	r6, [sp, #8]
   140e8:	str	r4, [sp, #12]
   140ec:	str	fp, [sp, #16]
   140f0:	bl	11d5c <__snprintf_chk@plt>
   140f4:	cmp	r0, #127	; 0x7f
   140f8:	add	r4, r4, #128	; 0x80
   140fc:	bhi	14064 <__assert_fail@plt+0x22f0>
   14100:	cmp	r4, r7
   14104:	add	r5, r5, #128	; 0x80
   14108:	beq	14140 <__assert_fail@plt+0x23cc>
   1410c:	ldr	ip, [r9]
   14110:	mov	r0, r5
   14114:	mvn	r3, #0
   14118:	mov	r2, #1
   1411c:	mov	r1, #128	; 0x80
   14120:	cmp	ip, #0
   14124:	add	fp, ip, #2
   14128:	sub	lr, ip, r6
   1412c:	bne	140d8 <__assert_fail@plt+0x2364>
   14130:	mov	r3, r6
   14134:	ldr	r2, [sp, #36]	; 0x24
   14138:	bl	11bd0 <snprintf@plt>
   1413c:	b	140f4 <__assert_fail@plt+0x2380>
   14140:	ldr	r3, [sp, #28]
   14144:	add	sl, sl, #1536	; 0x600
   14148:	add	r9, r9, #4
   1414c:	cmp	r3, #1
   14150:	beq	14054 <__assert_fail@plt+0x22e0>
   14154:	mov	r3, #1
   14158:	str	r3, [sp, #28]
   1415c:	b	140c0 <__assert_fail@plt+0x234c>
   14160:	muleq	r3, r4, r2
   14164:	andeq	sl, r3, r4, lsr r3
   14168:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1416c:	mov	r5, r0
   14170:	mov	r0, #16
   14174:	strd	r6, [sp, #8]
   14178:	mov	r6, r1
   1417c:	mov	r7, r2
   14180:	str	r8, [sp, #16]
   14184:	str	lr, [sp, #20]
   14188:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   1418c:	cmp	r6, #0
   14190:	mov	r4, r0
   14194:	beq	141a4 <__assert_fail@plt+0x2430>
   14198:	mov	r0, r6
   1419c:	bl	2384c <_obstack_memory_used@@Base+0x35b4>
   141a0:	mov	r6, r0
   141a4:	cmp	r5, #0
   141a8:	str	r6, [r4, #4]
   141ac:	beq	141bc <__assert_fail@plt+0x2448>
   141b0:	mov	r0, r5
   141b4:	bl	2384c <_obstack_memory_used@@Base+0x35b4>
   141b8:	mov	r5, r0
   141bc:	movw	r3, #41776	; 0xa330
   141c0:	movt	r3, #3
   141c4:	str	r5, [r4]
   141c8:	ldr	r2, [r3, #3080]	; 0xc08
   141cc:	strb	r7, [r4, #8]
   141d0:	ldrd	r6, [sp, #8]
   141d4:	ldr	r8, [sp, #16]
   141d8:	str	r2, [r4, #12]
   141dc:	str	r4, [r3, #3080]	; 0xc08
   141e0:	ldrd	r4, [sp]
   141e4:	add	sp, sp, #20
   141e8:	pop	{pc}		; (ldr pc, [sp], #4)
   141ec:	ldr	r0, [r0]
   141f0:	ldr	r1, [r1]
   141f4:	b	118a0 <strcmp@plt>
   141f8:	ldr	r3, [r1]
   141fc:	ldr	r1, [r0]
   14200:	mov	r0, r3
   14204:	b	118a0 <strcmp@plt>
   14208:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1420c:	mov	r5, #0
   14210:	strd	r6, [sp, #8]
   14214:	mov	r6, r0
   14218:	mov	r0, #127	; 0x7f
   1421c:	str	r8, [sp, #16]
   14220:	str	lr, [sp, #20]
   14224:	ldr	ip, [r1]
   14228:	ldr	lr, [r6]
   1422c:	b	14240 <__assert_fail@plt+0x24cc>
   14230:	and	r4, r4, #31
   14234:	add	ip, ip, #2
   14238:	add	r5, r5, #1
   1423c:	strb	r4, [lr], #1
   14240:	ldrb	r4, [ip]
   14244:	cmp	r4, #61	; 0x3d
   14248:	beq	144c4 <__assert_fail@plt+0x2750>
   1424c:	bls	1449c <__assert_fail@plt+0x2728>
   14250:	cmp	r4, #92	; 0x5c
   14254:	beq	142a4 <__assert_fail@plt+0x2530>
   14258:	cmp	r4, #94	; 0x5e
   1425c:	bne	144ac <__assert_fail@plt+0x2738>
   14260:	ldrb	r4, [ip, #1]
   14264:	add	r8, ip, #1
   14268:	sub	r7, r4, #64	; 0x40
   1426c:	cmp	r7, #62	; 0x3e
   14270:	bls	14230 <__assert_fail@plt+0x24bc>
   14274:	cmp	r4, #63	; 0x3f
   14278:	beq	144dc <__assert_fail@plt+0x2768>
   1427c:	mov	ip, r8
   14280:	mov	r0, #0
   14284:	ldr	r8, [sp, #16]
   14288:	str	lr, [r6]
   1428c:	str	ip, [r1]
   14290:	str	r5, [r3]
   14294:	ldrd	r4, [sp]
   14298:	ldrd	r6, [sp, #8]
   1429c:	add	sp, sp, #20
   142a0:	pop	{pc}		; (ldr pc, [sp], #4)
   142a4:	ldrb	r4, [ip, #1]
   142a8:	add	ip, ip, #2
   142ac:	cmp	r4, #120	; 0x78
   142b0:	ldrls	pc, [pc, r4, lsl #2]
   142b4:	b	14238 <__assert_fail@plt+0x24c4>
   142b8:	andeq	r4, r1, r0, lsl #5
   142bc:	andeq	r4, r1, r8, lsr r2
   142c0:	andeq	r4, r1, r8, lsr r2
   142c4:	andeq	r4, r1, r8, lsr r2
   142c8:	andeq	r4, r1, r8, lsr r2
   142cc:	andeq	r4, r1, r8, lsr r2
   142d0:	andeq	r4, r1, r8, lsr r2
   142d4:	andeq	r4, r1, r8, lsr r2
   142d8:	andeq	r4, r1, r8, lsr r2
   142dc:	andeq	r4, r1, r8, lsr r2
   142e0:	andeq	r4, r1, r8, lsr r2
   142e4:	andeq	r4, r1, r8, lsr r2
   142e8:	andeq	r4, r1, r8, lsr r2
   142ec:	andeq	r4, r1, r8, lsr r2
   142f0:	andeq	r4, r1, r8, lsr r2
   142f4:	andeq	r4, r1, r8, lsr r2
   142f8:	andeq	r4, r1, r8, lsr r2
   142fc:	andeq	r4, r1, r8, lsr r2
   14300:	andeq	r4, r1, r8, lsr r2
   14304:	andeq	r4, r1, r8, lsr r2
   14308:	andeq	r4, r1, r8, lsr r2
   1430c:	andeq	r4, r1, r8, lsr r2
   14310:	andeq	r4, r1, r8, lsr r2
   14314:	andeq	r4, r1, r8, lsr r2
   14318:	andeq	r4, r1, r8, lsr r2
   1431c:	andeq	r4, r1, r8, lsr r2
   14320:	andeq	r4, r1, r8, lsr r2
   14324:	andeq	r4, r1, r8, lsr r2
   14328:	andeq	r4, r1, r8, lsr r2
   1432c:	andeq	r4, r1, r8, lsr r2
   14330:	andeq	r4, r1, r8, lsr r2
   14334:	andeq	r4, r1, r8, lsr r2
   14338:	andeq	r4, r1, r8, lsr r2
   1433c:	andeq	r4, r1, r8, lsr r2
   14340:	andeq	r4, r1, r8, lsr r2
   14344:	andeq	r4, r1, r8, lsr r2
   14348:	andeq	r4, r1, r8, lsr r2
   1434c:	andeq	r4, r1, r8, lsr r2
   14350:	andeq	r4, r1, r8, lsr r2
   14354:	andeq	r4, r1, r8, lsr r2
   14358:	andeq	r4, r1, r8, lsr r2
   1435c:	andeq	r4, r1, r8, lsr r2
   14360:	andeq	r4, r1, r8, lsr r2
   14364:	andeq	r4, r1, r8, lsr r2
   14368:	andeq	r4, r1, r8, lsr r2
   1436c:	andeq	r4, r1, r8, lsr r2
   14370:	andeq	r4, r1, r8, lsr r2
   14374:	andeq	r4, r1, r8, lsr r2
   14378:	andeq	r4, r1, r8, asr r6
   1437c:	andeq	r4, r1, r8, asr r6
   14380:	andeq	r4, r1, r8, asr r6
   14384:	andeq	r4, r1, r8, asr r6
   14388:	andeq	r4, r1, r8, asr r6
   1438c:	andeq	r4, r1, r8, asr r6
   14390:	andeq	r4, r1, r8, asr r6
   14394:	andeq	r4, r1, r8, asr r6
   14398:	andeq	r4, r1, r8, lsr r2
   1439c:	andeq	r4, r1, r8, lsr r2
   143a0:	andeq	r4, r1, r8, lsr r2
   143a4:	andeq	r4, r1, r8, lsr r2
   143a8:	andeq	r4, r1, r8, lsr r2
   143ac:	andeq	r4, r1, r8, lsr r2
   143b0:	andeq	r4, r1, r8, lsr r2
   143b4:	andeq	r4, r1, r0, asr r6
   143b8:	andeq	r4, r1, r8, lsr r2
   143bc:	andeq	r4, r1, r8, lsr r2
   143c0:	andeq	r4, r1, r8, lsr r2
   143c4:	andeq	r4, r1, r8, lsr r2
   143c8:	andeq	r4, r1, r8, lsr r2
   143cc:	andeq	r4, r1, r8, lsr r2
   143d0:	andeq	r4, r1, r8, lsr r2
   143d4:	andeq	r4, r1, r8, lsr r2
   143d8:	andeq	r4, r1, r8, lsr r2
   143dc:	andeq	r4, r1, r8, lsr r2
   143e0:	andeq	r4, r1, r8, lsr r2
   143e4:	andeq	r4, r1, r8, lsr r2
   143e8:	andeq	r4, r1, r8, lsr r2
   143ec:	andeq	r4, r1, r8, lsr r2
   143f0:	andeq	r4, r1, r8, lsr r2
   143f4:	andeq	r4, r1, r8, lsr r2
   143f8:	andeq	r4, r1, r8, lsr r2
   143fc:	andeq	r4, r1, r8, lsr r2
   14400:	andeq	r4, r1, r8, lsr r2
   14404:	andeq	r4, r1, r8, lsr r2
   14408:	andeq	r4, r1, r8, lsr r2
   1440c:	andeq	r4, r1, r8, lsr r2
   14410:	andeq	r4, r1, r8, lsr r2
   14414:	andeq	r4, r1, r8, lsr r2
   14418:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1441c:	andeq	r4, r1, r8, lsr r2
   14420:	andeq	r4, r1, r8, lsr r2
   14424:	andeq	r4, r1, r8, lsr r2
   14428:	andeq	r4, r1, r8, lsr r2
   1442c:	andeq	r4, r1, r8, lsr r2
   14430:	andeq	r4, r1, r8, lsr r2
   14434:	andeq	r4, r1, r8, asr #12
   14438:	andeq	r4, r1, r8, lsr r2
   1443c:	andeq	r4, r1, ip, ror #9
   14440:	andeq	r4, r1, r0, asr #12
   14444:	andeq	r4, r1, r8, lsr r2
   14448:	andeq	r4, r1, r8, lsr r2
   1444c:	andeq	r4, r1, r8, lsr r6
   14450:	andeq	r4, r1, r0, lsr r6
   14454:	andeq	r4, r1, r8, lsr r2
   14458:	andeq	r4, r1, r8, lsr r2
   1445c:	andeq	r4, r1, r8, lsr r2
   14460:	andeq	r4, r1, r8, lsr r2
   14464:	andeq	r4, r1, r8, lsr r2
   14468:	andeq	r4, r1, r8, lsr r2
   1446c:	andeq	r4, r1, r8, lsr r2
   14470:	muleq	r1, ip, r6
   14474:	andeq	r4, r1, r8, lsr r2
   14478:	andeq	r4, r1, r8, lsr r2
   1447c:	andeq	r4, r1, r8, lsr r2
   14480:	muleq	r1, r4, r6
   14484:	andeq	r4, r1, r8, lsr r2
   14488:	andeq	r4, r1, ip, lsl #13
   1448c:	andeq	r4, r1, r8, lsr r2
   14490:	andeq	r4, r1, r4, lsl #13
   14494:	andeq	r4, r1, r8, lsr r2
   14498:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1449c:	cmp	r4, #0
   144a0:	beq	144d4 <__assert_fail@plt+0x2760>
   144a4:	cmp	r4, #58	; 0x3a
   144a8:	beq	144d4 <__assert_fail@plt+0x2760>
   144ac:	add	ip, ip, #1
   144b0:	strb	r4, [lr], #1
   144b4:	add	r5, r5, #1
   144b8:	ldrb	r4, [ip]
   144bc:	cmp	r4, #61	; 0x3d
   144c0:	bne	1424c <__assert_fail@plt+0x24d8>
   144c4:	cmp	r2, #0
   144c8:	beq	144ac <__assert_fail@plt+0x2738>
   144cc:	mov	r0, r2
   144d0:	b	14284 <__assert_fail@plt+0x2510>
   144d4:	mov	r0, #1
   144d8:	b	14284 <__assert_fail@plt+0x2510>
   144dc:	add	r5, r5, #1
   144e0:	mov	ip, r8
   144e4:	strb	r0, [lr], #1
   144e8:	b	14240 <__assert_fail@plt+0x24cc>
   144ec:	mov	r4, #7
   144f0:	b	14238 <__assert_fail@plt+0x24c4>
   144f4:	mov	r8, #0
   144f8:	ldrb	r4, [ip]
   144fc:	sub	r7, r4, #48	; 0x30
   14500:	cmp	r7, #54	; 0x36
   14504:	ldrls	pc, [pc, r7, lsl #2]
   14508:	b	14624 <__assert_fail@plt+0x28b0>
   1450c:	andeq	r4, r1, r0, lsl r6
   14510:	andeq	r4, r1, r0, lsl r6
   14514:	andeq	r4, r1, r0, lsl r6
   14518:	andeq	r4, r1, r0, lsl r6
   1451c:	andeq	r4, r1, r0, lsl r6
   14520:	andeq	r4, r1, r0, lsl r6
   14524:	andeq	r4, r1, r0, lsl r6
   14528:	andeq	r4, r1, r0, lsl r6
   1452c:	andeq	r4, r1, r0, lsl r6
   14530:	andeq	r4, r1, r0, lsl r6
   14534:	andeq	r4, r1, r4, lsr #12
   14538:	andeq	r4, r1, r4, lsr #12
   1453c:	andeq	r4, r1, r4, lsr #12
   14540:	andeq	r4, r1, r4, lsr #12
   14544:	andeq	r4, r1, r4, lsr #12
   14548:	andeq	r4, r1, r4, lsr #12
   1454c:	andeq	r4, r1, r4, lsr #12
   14550:	strdeq	r4, [r1], -ip
   14554:	strdeq	r4, [r1], -ip
   14558:	strdeq	r4, [r1], -ip
   1455c:	strdeq	r4, [r1], -ip
   14560:	strdeq	r4, [r1], -ip
   14564:	strdeq	r4, [r1], -ip
   14568:	andeq	r4, r1, r4, lsr #12
   1456c:	andeq	r4, r1, r4, lsr #12
   14570:	andeq	r4, r1, r4, lsr #12
   14574:	andeq	r4, r1, r4, lsr #12
   14578:	andeq	r4, r1, r4, lsr #12
   1457c:	andeq	r4, r1, r4, lsr #12
   14580:	andeq	r4, r1, r4, lsr #12
   14584:	andeq	r4, r1, r4, lsr #12
   14588:	andeq	r4, r1, r4, lsr #12
   1458c:	andeq	r4, r1, r4, lsr #12
   14590:	andeq	r4, r1, r4, lsr #12
   14594:	andeq	r4, r1, r4, lsr #12
   14598:	andeq	r4, r1, r4, lsr #12
   1459c:	andeq	r4, r1, r4, lsr #12
   145a0:	andeq	r4, r1, r4, lsr #12
   145a4:	andeq	r4, r1, r4, lsr #12
   145a8:	andeq	r4, r1, r4, lsr #12
   145ac:	andeq	r4, r1, r4, lsr #12
   145b0:	andeq	r4, r1, r4, lsr #12
   145b4:	andeq	r4, r1, r4, lsr #12
   145b8:	andeq	r4, r1, r4, lsr #12
   145bc:	andeq	r4, r1, r4, lsr #12
   145c0:	andeq	r4, r1, r4, lsr #12
   145c4:	andeq	r4, r1, r4, lsr #12
   145c8:	andeq	r4, r1, r4, lsr #12
   145cc:	andeq	r4, r1, r4, lsr #12
   145d0:	andeq	r4, r1, r8, ror #11
   145d4:	andeq	r4, r1, r8, ror #11
   145d8:	andeq	r4, r1, r8, ror #11
   145dc:	andeq	r4, r1, r8, ror #11
   145e0:	andeq	r4, r1, r8, ror #11
   145e4:	andeq	r4, r1, r8, ror #11
   145e8:	add	r4, r4, r8, lsl #4
   145ec:	add	ip, ip, #1
   145f0:	sub	r4, r4, #87	; 0x57
   145f4:	and	r8, r4, #255	; 0xff
   145f8:	b	144f8 <__assert_fail@plt+0x2784>
   145fc:	add	r4, r4, r8, lsl #4
   14600:	add	ip, ip, #1
   14604:	sub	r4, r4, #55	; 0x37
   14608:	and	r8, r4, #255	; 0xff
   1460c:	b	144f8 <__assert_fail@plt+0x2784>
   14610:	add	r4, r4, r8, lsl #4
   14614:	add	ip, ip, #1
   14618:	sub	r4, r4, #48	; 0x30
   1461c:	and	r8, r4, #255	; 0xff
   14620:	b	144f8 <__assert_fail@plt+0x2784>
   14624:	add	r5, r5, #1
   14628:	strb	r8, [lr], #1
   1462c:	b	14240 <__assert_fail@plt+0x24cc>
   14630:	mov	r4, #12
   14634:	b	14238 <__assert_fail@plt+0x24c4>
   14638:	mov	r4, #27
   1463c:	b	14238 <__assert_fail@plt+0x24c4>
   14640:	mov	r4, #8
   14644:	b	14238 <__assert_fail@plt+0x24c4>
   14648:	mov	r4, #32
   1464c:	b	14238 <__assert_fail@plt+0x24c4>
   14650:	mov	r4, #127	; 0x7f
   14654:	b	14238 <__assert_fail@plt+0x24c4>
   14658:	sub	r4, r4, #48	; 0x30
   1465c:	uxtb	r4, r4
   14660:	ldrb	r7, [ip]
   14664:	add	r8, r7, r4, lsl #3
   14668:	sub	r7, r7, #48	; 0x30
   1466c:	cmp	r7, #7
   14670:	sub	r8, r8, #48	; 0x30
   14674:	bhi	14238 <__assert_fail@plt+0x24c4>
   14678:	add	ip, ip, #1
   1467c:	and	r4, r8, #255	; 0xff
   14680:	b	14660 <__assert_fail@plt+0x28ec>
   14684:	mov	r4, #11
   14688:	b	14238 <__assert_fail@plt+0x24c4>
   1468c:	mov	r4, #9
   14690:	b	14238 <__assert_fail@plt+0x24c4>
   14694:	mov	r4, #13
   14698:	b	14238 <__assert_fail@plt+0x24c4>
   1469c:	mov	r4, #10
   146a0:	b	14238 <__assert_fail@plt+0x24c4>
   146a4:	movw	r3, #41776	; 0xa330
   146a8:	movt	r3, #3
   146ac:	str	r4, [sp, #-8]!
   146b0:	ldrb	r1, [r3, #3084]	; 0xc0c
   146b4:	movw	r0, #258	; 0x102
   146b8:	ldrb	r2, [r3, #3085]	; 0xc0d
   146bc:	str	lr, [sp, #4]
   146c0:	cmp	r1, #0
   146c4:	moveq	r0, #2
   146c8:	cmp	r2, #0
   146cc:	ldr	r2, [r3, #3088]	; 0xc10
   146d0:	orrne	r0, r0, #1024	; 0x400
   146d4:	cmp	r2, #0
   146d8:	bne	14794 <__assert_fail@plt+0x2a20>
   146dc:	ldr	ip, [r3, #3092]	; 0xc14
   146e0:	cmp	ip, #3
   146e4:	bhi	147c0 <__assert_fail@plt+0x2a4c>
   146e8:	movw	r2, #41424	; 0xa1d0
   146ec:	movt	r2, #3
   146f0:	movw	r1, #20560	; 0x5050
   146f4:	movt	r1, #2
   146f8:	ldrb	lr, [r2, #204]	; 0xcc
   146fc:	ldr	r1, [r1, ip, lsl #2]
   14700:	cmp	lr, #0
   14704:	orr	r0, r0, r1
   14708:	bne	1478c <__assert_fail@plt+0x2a18>
   1470c:	ldrb	ip, [r3, #3096]	; 0xc18
   14710:	cmp	ip, #0
   14714:	orreq	r0, r0, #516	; 0x204
   14718:	bne	1478c <__assert_fail@plt+0x2a18>
   1471c:	ldrb	r2, [r2, #205]	; 0xcd
   14720:	ldr	r3, [r3, #3100]	; 0xc1c
   14724:	cmp	r2, #0
   14728:	orrne	r0, r0, #16
   1472c:	cmp	r3, #6
   14730:	ldrls	pc, [pc, r3, lsl #2]
   14734:	b	147c0 <__assert_fail@plt+0x2a4c>
   14738:	andeq	r4, r1, r0, ror r7
   1473c:	andeq	r4, r1, r0, ror r7
   14740:	andeq	r4, r1, r0, ror r7
   14744:	andeq	r4, r1, ip, ror r7
   14748:	andeq	r4, r1, r0, ror r7
   1474c:	andeq	r4, r1, ip, ror #14
   14750:	andeq	r4, r1, r0, ror r7
   14754:	ldr	r2, [r3, #3092]	; 0xc14
   14758:	cmp	r2, #3
   1475c:	bhi	147c0 <__assert_fail@plt+0x2a4c>
   14760:	movw	r3, #20560	; 0x5050
   14764:	movt	r3, #2
   14768:	ldr	r1, [r3, r2, lsl #2]
   1476c:	orr	r0, r0, r1
   14770:	ldr	r4, [sp]
   14774:	add	sp, sp, #4
   14778:	pop	{pc}		; (ldr pc, [sp], #4)
   1477c:	ldr	r4, [sp]
   14780:	add	sp, sp, #4
   14784:	orr	r0, r0, #512	; 0x200
   14788:	pop	{pc}		; (ldr pc, [sp], #4)
   1478c:	orr	r0, r0, #524	; 0x20c
   14790:	b	1471c <__assert_fail@plt+0x29a8>
   14794:	ldr	r2, [r3, #3100]	; 0xc1c
   14798:	cmp	r2, #6
   1479c:	ldrls	pc, [pc, r2, lsl #2]
   147a0:	b	147c0 <__assert_fail@plt+0x2a4c>
   147a4:	andeq	r4, r1, r0, ror r7
   147a8:	andeq	r4, r1, r0, ror r7
   147ac:	andeq	r4, r1, r0, ror r7
   147b0:	andeq	r4, r1, ip, ror r7
   147b4:	andeq	r4, r1, r0, ror r7
   147b8:	andeq	r4, r1, r4, asr r7
   147bc:	andeq	r4, r1, r0, ror r7
   147c0:	bl	11d2c <abort@plt>
   147c4:	str	r4, [sp, #-8]!
   147c8:	mov	r4, r0
   147cc:	ldr	r0, [r0]
   147d0:	str	lr, [sp, #4]
   147d4:	bl	1b2b4 <__assert_fail@plt+0x9540>
   147d8:	ldr	r0, [r4, #4]
   147dc:	bl	1b2b4 <__assert_fail@plt+0x9540>
   147e0:	ldr	r0, [r4, #8]
   147e4:	bl	1b2b4 <__assert_fail@plt+0x9540>
   147e8:	ldr	r3, [pc, #36]	; 14814 <__assert_fail@plt+0x2aa0>
   147ec:	ldr	r0, [r4, #128]	; 0x80
   147f0:	cmp	r0, r3
   147f4:	beq	14808 <__assert_fail@plt+0x2a94>
   147f8:	ldr	r4, [sp]
   147fc:	ldr	lr, [sp, #4]
   14800:	add	sp, sp, #8
   14804:	b	11ce4 <freecon@plt>
   14808:	ldr	r4, [sp]
   1480c:	add	sp, sp, #4
   14810:	pop	{pc}		; (ldr pc, [sp], #4)
   14814:	andeq	sl, r3, r0, lsr #5
   14818:	strd	r4, [sp, #-16]!
   1481c:	movw	r5, #41776	; 0xa330
   14820:	movt	r5, #3
   14824:	ldr	r3, [r5, #3104]	; 0xc20
   14828:	str	r6, [sp, #8]
   1482c:	str	lr, [sp, #12]
   14830:	cmp	r3, #0
   14834:	beq	14858 <__assert_fail@plt+0x2ae4>
   14838:	mov	r4, #0
   1483c:	ldr	r3, [r5, #3108]	; 0xc24
   14840:	ldr	r0, [r3, r4, lsl #2]
   14844:	add	r4, r4, #1
   14848:	bl	147c4 <__assert_fail@plt+0x2a50>
   1484c:	ldr	r3, [r5, #3104]	; 0xc20
   14850:	cmp	r3, r4
   14854:	bhi	1483c <__assert_fail@plt+0x2ac8>
   14858:	mov	r3, #0
   1485c:	ldr	r6, [sp, #8]
   14860:	str	r3, [r5, #3104]	; 0xc20
   14864:	strb	r3, [r5, #3112]	; 0xc28
   14868:	strb	r3, [r5, #3113]	; 0xc29
   1486c:	str	r3, [r5, #3116]	; 0xc2c
   14870:	str	r3, [r5, #3120]	; 0xc30
   14874:	str	r3, [r5, #3124]	; 0xc34
   14878:	str	r3, [r5, #3128]	; 0xc38
   1487c:	str	r3, [r5, #3132]	; 0xc3c
   14880:	str	r3, [r5, #3136]	; 0xc40
   14884:	str	r3, [r5, #3140]	; 0xc44
   14888:	str	r3, [r5, #3144]	; 0xc48
   1488c:	str	r3, [r5, #3148]	; 0xc4c
   14890:	str	r3, [r5, #3152]	; 0xc50
   14894:	ldrd	r4, [sp]
   14898:	add	sp, sp, #12
   1489c:	pop	{pc}		; (ldr pc, [sp], #4)
   148a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   148a4:	strd	r6, [sp, #8]
   148a8:	strd	r8, [sp, #16]
   148ac:	mov	r8, r2
   148b0:	mov	r2, r3
   148b4:	str	sl, [sp, #24]
   148b8:	str	lr, [sp, #28]
   148bc:	sub	sp, sp, #264	; 0x108
   148c0:	add	r9, sp, #8
   148c4:	ldr	r3, [sp, #296]	; 0x128
   148c8:	str	r9, [sp]
   148cc:	bl	11c3c <statx@plt>
   148d0:	cmp	r0, #0
   148d4:	bge	148f4 <__assert_fail@plt+0x2b80>
   148d8:	add	sp, sp, #264	; 0x108
   148dc:	ldrd	r4, [sp]
   148e0:	ldrd	r6, [sp, #8]
   148e4:	ldrd	r8, [sp, #16]
   148e8:	ldr	sl, [sp, #24]
   148ec:	add	sp, sp, #28
   148f0:	pop	{pc}		; (ldr pc, [sp], #4)
   148f4:	mov	r6, #65280	; 0xff00
   148f8:	movt	r6, #15
   148fc:	ldr	sl, [sp, #80]	; 0x50
   14900:	mov	r1, #61440	; 0xf000
   14904:	movt	r1, #65535	; 0xffff
   14908:	ldr	r3, [sp, #296]	; 0x128
   1490c:	mov	r5, #0
   14910:	movt	r5, #65520	; 0xfff0
   14914:	ldr	lr, [sp, #144]	; 0x90
   14918:	str	sl, [r8, #76]	; 0x4c
   1491c:	ldr	r2, [sp, #148]	; 0x94
   14920:	tst	r3, #2048	; 0x800
   14924:	ldr	r4, [sp, #136]	; 0x88
   14928:	and	ip, r6, lr, lsl #8
   1492c:	and	lr, lr, r1
   14930:	ldr	r3, [sp, #140]	; 0x8c
   14934:	orr	lr, lr, r2, lsr #20
   14938:	uxtb	r7, r2
   1493c:	and	r2, r5, r2, lsl #12
   14940:	orr	r7, r7, ip
   14944:	ldr	ip, [sp, #12]
   14948:	and	r6, r6, r4, lsl #8
   1494c:	and	r1, r1, r4
   14950:	orr	r2, r2, r7
   14954:	ldrh	r4, [r9, #28]
   14958:	and	r5, r5, r3, lsl #12
   1495c:	orr	r1, r1, r3, lsr #20
   14960:	uxtb	r3, r3
   14964:	stm	r8, {r2, lr}
   14968:	orr	r3, r3, r6
   1496c:	ldr	r6, [sp, #24]
   14970:	orr	r3, r5, r3
   14974:	ldr	r5, [sp, #28]
   14978:	str	r4, [r8, #16]
   1497c:	ldr	r2, [sp, #32]
   14980:	str	r6, [r8, #20]
   14984:	ldrd	r6, [r9, #32]
   14988:	str	r5, [r8, #24]
   1498c:	str	r3, [r8, #32]
   14990:	str	r2, [r8, #28]
   14994:	str	r1, [r8, #36]	; 0x24
   14998:	str	ip, [r8, #56]	; 0x38
   1499c:	ldrd	r4, [r9, #40]	; 0x28
   149a0:	ldrd	r2, [r9, #48]	; 0x30
   149a4:	ldr	ip, [r9, #64]	; 0x40
   149a8:	strd	r4, [r8, #48]	; 0x30
   149ac:	ldr	r1, [r9, #112]	; 0x70
   149b0:	strd	r2, [r8, #64]	; 0x40
   149b4:	ldr	lr, [sp, #128]	; 0x80
   149b8:	str	ip, [r8, #72]	; 0x48
   149bc:	str	r1, [r8, #80]	; 0x50
   149c0:	str	lr, [r8, #84]	; 0x54
   149c4:	strd	r6, [r8, #96]	; 0x60
   149c8:	ldr	r3, [r9, #96]	; 0x60
   149cc:	ldr	r2, [sp, #112]	; 0x70
   149d0:	str	r3, [r8, #88]	; 0x58
   149d4:	str	r2, [r8, #92]	; 0x5c
   149d8:	beq	148d8 <__assert_fail@plt+0x2b64>
   149dc:	ldr	r3, [sp, #8]
   149e0:	tst	r3, #2048	; 0x800
   149e4:	beq	149fc <__assert_fail@plt+0x2c88>
   149e8:	ldr	r3, [r9, #80]	; 0x50
   149ec:	ldr	r2, [sp, #96]	; 0x60
   149f0:	str	r3, [r8, #80]	; 0x50
   149f4:	str	r2, [r8, #84]	; 0x54
   149f8:	b	148d8 <__assert_fail@plt+0x2b64>
   149fc:	mvn	r3, #0
   14a00:	str	r3, [r8, #80]	; 0x50
   14a04:	str	r3, [r8, #84]	; 0x54
   14a08:	b	148d8 <__assert_fail@plt+0x2b64>
   14a0c:	movw	r3, #41776	; 0xa330
   14a10:	movt	r3, #3
   14a14:	strd	r4, [sp, #-12]!
   14a18:	ldr	ip, [r3, #3156]	; 0xc54
   14a1c:	mov	r2, r0
   14a20:	mov	r5, r0
   14a24:	str	lr, [sp, #8]
   14a28:	sub	sp, sp, #20
   14a2c:	mvn	r3, #0
   14a30:	mov	r1, #2
   14a34:	add	r0, sp, #12
   14a38:	str	ip, [sp]
   14a3c:	bl	21ff4 <_obstack_memory_used@@Base+0x1d5c>
   14a40:	ldrb	r2, [r5]
   14a44:	ldrb	r3, [sp, #12]
   14a48:	cmp	r2, r3
   14a4c:	movne	r0, #1
   14a50:	bne	14a68 <__assert_fail@plt+0x2cf4>
   14a54:	mov	r4, r0
   14a58:	mov	r0, r5
   14a5c:	bl	11b94 <strlen@plt>
   14a60:	subs	r0, r0, r4
   14a64:	movne	r0, #1
   14a68:	add	sp, sp, #20
   14a6c:	ldrd	r4, [sp]
   14a70:	add	sp, sp, #8
   14a74:	pop	{pc}		; (ldr pc, [sp], #4)
   14a78:	strd	r4, [sp, #-16]!
   14a7c:	mov	r4, r0
   14a80:	mov	r5, r1
   14a84:	str	r6, [sp, #8]
   14a88:	str	lr, [sp, #12]
   14a8c:	bl	11bb8 <__errno_location@plt>
   14a90:	mov	r3, r0
   14a94:	mov	r2, #0
   14a98:	ldr	r6, [sp, #8]
   14a9c:	mov	r1, r5
   14aa0:	mov	r0, r4
   14aa4:	ldrd	r4, [sp]
   14aa8:	ldr	lr, [sp, #12]
   14aac:	add	sp, sp, #16
   14ab0:	str	r2, [r3]
   14ab4:	b	11abc <strcoll@plt>
   14ab8:	ldr	r0, [r0]
   14abc:	ldr	r1, [r1]
   14ac0:	b	14a78 <__assert_fail@plt+0x2d04>
   14ac4:	ldr	r3, [r1]
   14ac8:	ldr	r1, [r0]
   14acc:	mov	r0, r3
   14ad0:	b	14a78 <__assert_fail@plt+0x2d04>
   14ad4:	ldr	r3, [r1]
   14ad8:	ldr	r1, [r0]
   14adc:	mov	r0, r3
   14ae0:	b	1aef0 <__assert_fail@plt+0x917c>
   14ae4:	ldr	r0, [r0]
   14ae8:	ldr	r1, [r1]
   14aec:	b	1aef0 <__assert_fail@plt+0x917c>
   14af0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14af4:	strd	r6, [sp, #8]
   14af8:	movw	r6, #41776	; 0xa330
   14afc:	movt	r6, #3
   14b00:	strd	r8, [sp, #16]
   14b04:	subs	r8, r0, #0
   14b08:	mov	r9, r1
   14b0c:	str	sl, [sp, #24]
   14b10:	str	lr, [sp, #28]
   14b14:	beq	14b34 <__assert_fail@plt+0x2dc0>
   14b18:	ldr	r3, [r6, #3160]	; 0xc58
   14b1c:	cmp	r3, #0
   14b20:	beq	14b34 <__assert_fail@plt+0x2dc0>
   14b24:	mov	r2, #0
   14b28:	mov	r1, r8
   14b2c:	mov	r0, r2
   14b30:	bl	14168 <__assert_fail@plt+0x23f4>
   14b34:	ldr	r4, [r6, #3104]	; 0xc20
   14b38:	subs	r4, r4, #1
   14b3c:	bcc	14bc8 <__assert_fail@plt+0x2e54>
   14b40:	ldr	r3, [r6, #3108]	; 0xc24
   14b44:	ldr	r5, [r3, r4, lsl #2]
   14b48:	ldr	r3, [r5, #120]	; 0x78
   14b4c:	cmp	r3, #9
   14b50:	cmpne	r3, #3
   14b54:	bne	14b38 <__assert_fail@plt+0x2dc4>
   14b58:	cmp	r8, #0
   14b5c:	ldr	r7, [r5]
   14b60:	beq	14c1c <__assert_fail@plt+0x2ea8>
   14b64:	mov	r0, r7
   14b68:	bl	1a040 <__assert_fail@plt+0x82cc>
   14b6c:	ldrb	r3, [r0]
   14b70:	cmp	r3, #46	; 0x2e
   14b74:	beq	14c30 <__assert_fail@plt+0x2ebc>
   14b78:	ldrb	r3, [r7]
   14b7c:	mov	r2, #0
   14b80:	mov	r0, r8
   14b84:	mov	r1, r7
   14b88:	cmp	r3, #47	; 0x2f
   14b8c:	beq	14c1c <__assert_fail@plt+0x2ea8>
   14b90:	bl	1acfc <__assert_fail@plt+0x8f88>
   14b94:	mov	r7, r0
   14b98:	mov	r2, r9
   14b9c:	ldr	r1, [r5, #4]
   14ba0:	bl	14168 <__assert_fail@plt+0x23f4>
   14ba4:	mov	r0, r7
   14ba8:	bl	1b2b4 <__assert_fail@plt+0x9540>
   14bac:	ldr	r3, [r5, #120]	; 0x78
   14bb0:	cmp	r3, #9
   14bb4:	bne	14b38 <__assert_fail@plt+0x2dc4>
   14bb8:	mov	r0, r5
   14bbc:	bl	147c4 <__assert_fail@plt+0x2a50>
   14bc0:	subs	r4, r4, #1
   14bc4:	bcs	14b40 <__assert_fail@plt+0x2dcc>
   14bc8:	ldr	r3, [r6, #3104]	; 0xc20
   14bcc:	cmp	r3, #0
   14bd0:	beq	14c00 <__assert_fail@plt+0x2e8c>
   14bd4:	ldr	ip, [r6, #3108]	; 0xc24
   14bd8:	add	lr, ip, r3, lsl #2
   14bdc:	mov	r2, ip
   14be0:	mov	r3, #0
   14be4:	ldr	r1, [r2], #4
   14be8:	ldr	r0, [r1, #120]	; 0x78
   14bec:	str	r1, [ip, r3, lsl #2]
   14bf0:	cmp	r0, #9
   14bf4:	addne	r3, r3, #1
   14bf8:	cmp	lr, r2
   14bfc:	bne	14be4 <__assert_fail@plt+0x2e70>
   14c00:	str	r3, [r6, #3104]	; 0xc20
   14c04:	ldrd	r4, [sp]
   14c08:	ldrd	r6, [sp, #8]
   14c0c:	ldrd	r8, [sp, #16]
   14c10:	ldr	sl, [sp, #24]
   14c14:	add	sp, sp, #28
   14c18:	pop	{pc}		; (ldr pc, [sp], #4)
   14c1c:	mov	r2, r9
   14c20:	mov	r0, r7
   14c24:	ldr	r1, [r5, #4]
   14c28:	bl	14168 <__assert_fail@plt+0x23f4>
   14c2c:	b	14bac <__assert_fail@plt+0x2e38>
   14c30:	ldrb	r3, [r0, #1]
   14c34:	cmp	r3, #46	; 0x2e
   14c38:	moveq	r3, #2
   14c3c:	movne	r3, #1
   14c40:	ldrb	r3, [r0, r3]
   14c44:	cmp	r3, #47	; 0x2f
   14c48:	cmpne	r3, #0
   14c4c:	beq	14b38 <__assert_fail@plt+0x2dc4>
   14c50:	b	14b78 <__assert_fail@plt+0x2e04>
   14c54:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14c58:	sub	r5, r0, #1
   14c5c:	strd	r6, [sp, #8]
   14c60:	mov	r7, r1
   14c64:	movw	r6, #41776	; 0xa330
   14c68:	movt	r6, #3
   14c6c:	strd	r8, [sp, #16]
   14c70:	movw	r8, #26584	; 0x67d8
   14c74:	movt	r8, #2
   14c78:	str	lr, [sp, #24]
   14c7c:	sub	sp, sp, #12
   14c80:	bl	11b94 <strlen@plt>
   14c84:	add	r1, r0, #1
   14c88:	mov	r0, #3
   14c8c:	bl	23564 <_obstack_memory_used@@Base+0x32cc>
   14c90:	mov	r9, r0
   14c94:	mov	r4, r0
   14c98:	ldrb	r1, [r5, #1]!
   14c9c:	mov	r3, r4
   14ca0:	cmp	r1, #0
   14ca4:	add	r0, r6, r1
   14ca8:	beq	14d00 <__assert_fail@plt+0x2f8c>
   14cac:	cmp	r1, #47	; 0x2f
   14cb0:	movne	r2, #0
   14cb4:	andeq	r2, r7, #1
   14cb8:	cmp	r2, #0
   14cbc:	movne	r3, #47	; 0x2f
   14cc0:	strbne	r3, [r4], #1
   14cc4:	bne	14c98 <__assert_fail@plt+0x2f24>
   14cc8:	ldrb	r2, [r0, #3164]	; 0xc5c
   14ccc:	cmp	r2, #0
   14cd0:	beq	14ce0 <__assert_fail@plt+0x2f6c>
   14cd4:	strb	r1, [r3], #1
   14cd8:	mov	r4, r3
   14cdc:	b	14c98 <__assert_fail@plt+0x2f24>
   14ce0:	mov	r3, r8
   14ce4:	mvn	r2, #0
   14ce8:	str	r1, [sp]
   14cec:	mov	r0, r4
   14cf0:	mov	r1, #1
   14cf4:	add	r4, r4, #3
   14cf8:	bl	11bc4 <__sprintf_chk@plt>
   14cfc:	b	14c98 <__assert_fail@plt+0x2f24>
   14d00:	mov	r0, r9
   14d04:	strb	r1, [r4]
   14d08:	add	sp, sp, #12
   14d0c:	ldrd	r4, [sp]
   14d10:	ldrd	r6, [sp, #8]
   14d14:	ldrd	r8, [sp, #16]
   14d18:	add	sp, sp, #24
   14d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d20:	ldr	r2, [pc, #104]	; 14d90 <__assert_fail@plt+0x301c>
   14d24:	movw	r3, #41764	; 0xa324
   14d28:	movt	r3, #3
   14d2c:	str	r4, [sp, #-8]!
   14d30:	ldr	ip, [r3]
   14d34:	ldr	r3, [r2]
   14d38:	ldr	r4, [ip, #20]
   14d3c:	ldr	r1, [ip, #24]
   14d40:	str	lr, [sp, #4]
   14d44:	adds	r3, r3, #1
   14d48:	ldr	lr, [r2, #4]
   14d4c:	str	r3, [r2]
   14d50:	adc	lr, lr, #0
   14d54:	cmp	r4, r1
   14d58:	str	lr, [r2, #4]
   14d5c:	bcs	14d78 <__assert_fail@plt+0x3004>
   14d60:	add	r3, r4, #1
   14d64:	str	r3, [ip, #20]
   14d68:	strb	r0, [r4]
   14d6c:	ldr	r4, [sp]
   14d70:	add	sp, sp, #4
   14d74:	pop	{pc}		; (ldr pc, [sp], #4)
   14d78:	mov	r1, r0
   14d7c:	mov	r0, ip
   14d80:	ldr	r4, [sp]
   14d84:	ldr	lr, [sp, #4]
   14d88:	add	sp, sp, #8
   14d8c:	b	11c48 <__overflow@plt>
   14d90:	muleq	r3, r0, r0
   14d94:	cmp	r0, r1
   14d98:	bxcs	lr
   14d9c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14da0:	mov	r4, r0
   14da4:	strd	r6, [sp, #8]
   14da8:	movw	r7, #41776	; 0xa330
   14dac:	movt	r7, #3
   14db0:	mov	r6, r1
   14db4:	strd	r8, [sp, #16]
   14db8:	movw	r8, #41764	; 0xa324
   14dbc:	movt	r8, #3
   14dc0:	mov	r9, #32
   14dc4:	str	sl, [sp, #24]
   14dc8:	mov	sl, #9
   14dcc:	str	lr, [sp, #28]
   14dd0:	b	14e08 <__assert_fail@plt+0x3094>
   14dd4:	udiv	r1, r6, r2
   14dd8:	udiv	lr, r5, r2
   14ddc:	cmp	r1, lr
   14de0:	bls	14e24 <__assert_fail@plt+0x30b0>
   14de4:	cmp	r3, ip
   14de8:	addcc	r1, r3, #1
   14dec:	strcc	r1, [r0, #20]
   14df0:	strbcc	sl, [r3]
   14df4:	bcs	14e68 <__assert_fail@plt+0x30f4>
   14df8:	udiv	r4, r4, r2
   14dfc:	mla	r4, r2, r4, r2
   14e00:	cmp	r4, r6
   14e04:	bcs	14e44 <__assert_fail@plt+0x30d0>
   14e08:	ldr	r2, [r7, #3432]	; 0xd68
   14e0c:	add	r5, r4, #1
   14e10:	ldr	r0, [r8]
   14e14:	cmp	r2, #0
   14e18:	ldr	r3, [r0, #20]
   14e1c:	ldr	ip, [r0, #24]
   14e20:	bne	14dd4 <__assert_fail@plt+0x3060>
   14e24:	cmp	r3, ip
   14e28:	addcc	r2, r3, #1
   14e2c:	strcc	r2, [r0, #20]
   14e30:	strbcc	r9, [r3]
   14e34:	bcs	14e5c <__assert_fail@plt+0x30e8>
   14e38:	mov	r4, r5
   14e3c:	cmp	r4, r6
   14e40:	bcc	14e08 <__assert_fail@plt+0x3094>
   14e44:	ldrd	r4, [sp]
   14e48:	ldrd	r6, [sp, #8]
   14e4c:	ldrd	r8, [sp, #16]
   14e50:	ldr	sl, [sp, #24]
   14e54:	add	sp, sp, #28
   14e58:	pop	{pc}		; (ldr pc, [sp], #4)
   14e5c:	mov	r1, #32
   14e60:	bl	11c48 <__overflow@plt>
   14e64:	b	14e38 <__assert_fail@plt+0x30c4>
   14e68:	mov	r1, #9
   14e6c:	bl	11c48 <__overflow@plt>
   14e70:	ldr	r2, [r7, #3432]	; 0xd68
   14e74:	b	14df8 <__assert_fail@plt+0x3084>
   14e78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14e7c:	ldr	r4, [r1, #8]
   14e80:	ldr	r3, [r1, #12]
   14e84:	strd	r6, [sp, #8]
   14e88:	str	r8, [sp, #16]
   14e8c:	str	lr, [sp, #20]
   14e90:	sub	r5, r3, r4
   14e94:	cmp	r5, #7
   14e98:	bls	14f30 <__assert_fail@plt+0x31bc>
   14e9c:	cmp	r3, r4
   14ea0:	beq	14f44 <__assert_fail@plt+0x31d0>
   14ea4:	mov	r2, r1
   14ea8:	ldr	ip, [r1, #4]
   14eac:	movw	r6, #41764	; 0xa324
   14eb0:	movt	r6, #3
   14eb4:	bic	r5, r5, #7
   14eb8:	ldr	lr, [r1, #16]
   14ebc:	add	r5, r4, r5
   14ec0:	ldr	r1, [r1, #24]
   14ec4:	add	r3, r3, r1
   14ec8:	bic	r3, r3, r1
   14ecc:	ldr	r1, [r6]
   14ed0:	sub	r7, r3, ip
   14ed4:	sub	ip, lr, ip
   14ed8:	cmp	r7, ip
   14edc:	movw	r7, #26592	; 0x67e0
   14ee0:	movt	r7, #2
   14ee4:	movhi	r3, lr
   14ee8:	str	r3, [r2, #8]
   14eec:	str	r3, [r2, #12]
   14ef0:	bl	11864 <fputs_unlocked@plt>
   14ef4:	ldrd	r2, [r4], #8
   14ef8:	mov	r1, r7
   14efc:	mov	r0, #1
   14f00:	bl	11bf4 <__printf_chk@plt>
   14f04:	cmp	r5, r4
   14f08:	bne	14ef4 <__assert_fail@plt+0x3180>
   14f0c:	ldr	r0, [r6]
   14f10:	ldr	r3, [r0, #20]
   14f14:	ldr	r2, [r0, #24]
   14f18:	cmp	r3, r2
   14f1c:	addcc	r1, r3, #1
   14f20:	movcc	r2, #10
   14f24:	strcc	r1, [r0, #20]
   14f28:	strbcc	r2, [r3]
   14f2c:	bcs	14f54 <__assert_fail@plt+0x31e0>
   14f30:	ldrd	r4, [sp]
   14f34:	ldrd	r6, [sp, #8]
   14f38:	ldr	r8, [sp, #16]
   14f3c:	add	sp, sp, #20
   14f40:	pop	{pc}		; (ldr pc, [sp], #4)
   14f44:	ldrb	r2, [r1, #40]	; 0x28
   14f48:	orr	r2, r2, #2
   14f4c:	strb	r2, [r1, #40]	; 0x28
   14f50:	b	14ea4 <__assert_fail@plt+0x3130>
   14f54:	mov	r1, #10
   14f58:	ldrd	r4, [sp]
   14f5c:	ldrd	r6, [sp, #8]
   14f60:	ldr	r8, [sp, #16]
   14f64:	ldr	lr, [sp, #20]
   14f68:	add	sp, sp, #24
   14f6c:	b	11c48 <__overflow@plt>
   14f70:	movw	r3, #41776	; 0xa330
   14f74:	movt	r3, #3
   14f78:	ldr	r2, [r3]
   14f7c:	cmp	r2, #0
   14f80:	bne	14f90 <__assert_fail@plt+0x321c>
   14f84:	ldr	r2, [r3, #3436]	; 0xd6c
   14f88:	add	r2, r2, #1
   14f8c:	str	r2, [r3, #3436]	; 0xd6c
   14f90:	bx	lr
   14f94:	strd	r4, [sp, #-16]!
   14f98:	mov	r5, r2
   14f9c:	mov	r4, r0
   14fa0:	str	r6, [sp, #8]
   14fa4:	mov	r6, r1
   14fa8:	str	lr, [sp, #12]
   14fac:	bl	11bb8 <__errno_location@plt>
   14fb0:	mov	r1, r5
   14fb4:	ldr	r5, [r0]
   14fb8:	mov	r0, #4
   14fbc:	bl	22308 <_obstack_memory_used@@Base+0x2070>
   14fc0:	mov	r3, r0
   14fc4:	mov	r2, r6
   14fc8:	mov	r0, #0
   14fcc:	mov	r1, r5
   14fd0:	bl	11a8c <error@plt>
   14fd4:	cmp	r4, #0
   14fd8:	movw	r3, #41776	; 0xa330
   14fdc:	movt	r3, #3
   14fe0:	movne	r2, #2
   14fe4:	strne	r2, [r3, #3440]	; 0xd70
   14fe8:	bne	14ffc <__assert_fail@plt+0x3288>
   14fec:	ldr	r2, [r3, #3440]	; 0xd70
   14ff0:	cmp	r2, #0
   14ff4:	moveq	r2, #1
   14ff8:	streq	r2, [r3, #3440]	; 0xd70
   14ffc:	ldrd	r4, [sp]
   15000:	ldr	r6, [sp, #8]
   15004:	add	sp, sp, #12
   15008:	pop	{pc}		; (ldr pc, [sp], #4)
   1500c:	ldr	r3, [r0, #120]	; 0x78
   15010:	ldr	ip, [r1, #120]	; 0x78
   15014:	cmp	r3, #3
   15018:	cmpne	r3, #9
   1501c:	moveq	r3, #1
   15020:	movne	r3, #0
   15024:	cmp	ip, #9
   15028:	cmpne	ip, #3
   1502c:	beq	15054 <__assert_fail@plt+0x32e0>
   15030:	ldr	ip, [r1, #124]	; 0x7c
   15034:	and	ip, ip, #61440	; 0xf000
   15038:	cmp	ip, #16384	; 0x4000
   1503c:	beq	15054 <__assert_fail@plt+0x32e0>
   15040:	cmp	r3, #0
   15044:	beq	15060 <__assert_fail@plt+0x32ec>
   15048:	mvn	r3, #0
   1504c:	mov	r0, r3
   15050:	bx	lr
   15054:	cmp	r3, #0
   15058:	moveq	r3, #1
   1505c:	bne	15078 <__assert_fail@plt+0x3304>
   15060:	ldr	ip, [r0, #124]	; 0x7c
   15064:	and	ip, ip, #61440	; 0xf000
   15068:	cmp	ip, #16384	; 0x4000
   1506c:	subeq	r3, r3, #1
   15070:	cmp	r3, #0
   15074:	bne	1504c <__assert_fail@plt+0x32d8>
   15078:	bx	r2
   1507c:	movw	r2, #28160	; 0x6e00
   15080:	movt	r2, #1
   15084:	b	1500c <__assert_fail@plt+0x3298>
   15088:	movw	r2, #28172	; 0x6e0c
   1508c:	movt	r2, #1
   15090:	b	1500c <__assert_fail@plt+0x3298>
   15094:	movw	r2, #28184	; 0x6e18
   15098:	movt	r2, #1
   1509c:	b	1500c <__assert_fail@plt+0x3298>
   150a0:	movw	r2, #28208	; 0x6e30
   150a4:	movt	r2, #1
   150a8:	b	1500c <__assert_fail@plt+0x3298>
   150ac:	movw	r2, #28352	; 0x6ec0
   150b0:	movt	r2, #1
   150b4:	b	1500c <__assert_fail@plt+0x3298>
   150b8:	movw	r2, #28364	; 0x6ecc
   150bc:	movt	r2, #1
   150c0:	b	1500c <__assert_fail@plt+0x3298>
   150c4:	movw	r2, #28376	; 0x6ed8
   150c8:	movt	r2, #1
   150cc:	b	1500c <__assert_fail@plt+0x3298>
   150d0:	movw	r2, #28400	; 0x6ef0
   150d4:	movt	r2, #1
   150d8:	b	1500c <__assert_fail@plt+0x3298>
   150dc:	movw	r2, #28544	; 0x6f80
   150e0:	movt	r2, #1
   150e4:	b	1500c <__assert_fail@plt+0x3298>
   150e8:	movw	r2, #28556	; 0x6f8c
   150ec:	movt	r2, #1
   150f0:	b	1500c <__assert_fail@plt+0x3298>
   150f4:	movw	r2, #28568	; 0x6f98
   150f8:	movt	r2, #1
   150fc:	b	1500c <__assert_fail@plt+0x3298>
   15100:	movw	r2, #28592	; 0x6fb0
   15104:	movt	r2, #1
   15108:	b	1500c <__assert_fail@plt+0x3298>
   1510c:	movw	r2, #28736	; 0x7040
   15110:	movt	r2, #1
   15114:	b	1500c <__assert_fail@plt+0x3298>
   15118:	movw	r2, #28748	; 0x704c
   1511c:	movt	r2, #1
   15120:	b	1500c <__assert_fail@plt+0x3298>
   15124:	movw	r2, #28760	; 0x7058
   15128:	movt	r2, #1
   1512c:	b	1500c <__assert_fail@plt+0x3298>
   15130:	movw	r2, #28784	; 0x7070
   15134:	movt	r2, #1
   15138:	b	1500c <__assert_fail@plt+0x3298>
   1513c:	movw	r2, #27736	; 0x6c58
   15140:	movt	r2, #1
   15144:	b	1500c <__assert_fail@plt+0x3298>
   15148:	movw	r2, #27836	; 0x6cbc
   1514c:	movt	r2, #1
   15150:	b	1500c <__assert_fail@plt+0x3298>
   15154:	movw	r2, #27936	; 0x6d20
   15158:	movt	r2, #1
   1515c:	b	1500c <__assert_fail@plt+0x3298>
   15160:	movw	r2, #27632	; 0x6bf0
   15164:	movt	r2, #1
   15168:	b	1500c <__assert_fail@plt+0x3298>
   1516c:	movw	r2, #19128	; 0x4ab8
   15170:	movt	r2, #1
   15174:	b	1500c <__assert_fail@plt+0x3298>
   15178:	movw	r2, #16876	; 0x41ec
   1517c:	movt	r2, #1
   15180:	b	1500c <__assert_fail@plt+0x3298>
   15184:	movw	r2, #19140	; 0x4ac4
   15188:	movt	r2, #1
   1518c:	b	1500c <__assert_fail@plt+0x3298>
   15190:	movw	r2, #16888	; 0x41f8
   15194:	movt	r2, #1
   15198:	b	1500c <__assert_fail@plt+0x3298>
   1519c:	movw	r2, #21524	; 0x5414
   151a0:	movt	r2, #1
   151a4:	b	1500c <__assert_fail@plt+0x3298>
   151a8:	movw	r2, #21488	; 0x53f0
   151ac:	movt	r2, #1
   151b0:	b	1500c <__assert_fail@plt+0x3298>
   151b4:	movw	r2, #21500	; 0x53fc
   151b8:	movt	r2, #1
   151bc:	b	1500c <__assert_fail@plt+0x3298>
   151c0:	movw	r2, #21464	; 0x53d8
   151c4:	movt	r2, #1
   151c8:	b	1500c <__assert_fail@plt+0x3298>
   151cc:	movw	r2, #26020	; 0x65a4
   151d0:	movt	r2, #1
   151d4:	b	1500c <__assert_fail@plt+0x3298>
   151d8:	movw	r2, #25984	; 0x6580
   151dc:	movt	r2, #1
   151e0:	b	1500c <__assert_fail@plt+0x3298>
   151e4:	movw	r2, #25996	; 0x658c
   151e8:	movt	r2, #1
   151ec:	b	1500c <__assert_fail@plt+0x3298>
   151f0:	movw	r2, #25960	; 0x6568
   151f4:	movt	r2, #1
   151f8:	b	1500c <__assert_fail@plt+0x3298>
   151fc:	movw	r2, #19172	; 0x4ae4
   15200:	movt	r2, #1
   15204:	b	1500c <__assert_fail@plt+0x3298>
   15208:	movw	r2, #19156	; 0x4ad4
   1520c:	movt	r2, #1
   15210:	b	1500c <__assert_fail@plt+0x3298>
   15214:	cmp	r0, #0
   15218:	beq	152a4 <__assert_fail@plt+0x3530>
   1521c:	and	r3, r1, #61440	; 0xf000
   15220:	cmp	r3, #32768	; 0x8000
   15224:	beq	15288 <__assert_fail@plt+0x3514>
   15228:	sub	r3, r3, #16384	; 0x4000
   1522c:	clz	r3, r3
   15230:	lsr	r3, r3, #5
   15234:	cmp	r3, #0
   15238:	bne	152c4 <__assert_fail@plt+0x3550>
   1523c:	movw	ip, #41776	; 0xa330
   15240:	movt	ip, #3
   15244:	ldr	ip, [ip, #3444]	; 0xd74
   15248:	cmp	ip, #1
   1524c:	beq	1529c <__assert_fail@plt+0x3528>
   15250:	cmp	r0, #0
   15254:	beq	152cc <__assert_fail@plt+0x3558>
   15258:	and	r1, r1, #61440	; 0xf000
   1525c:	cmp	r1, #40960	; 0xa000
   15260:	beq	152f4 <__assert_fail@plt+0x3580>
   15264:	cmp	r1, #4096	; 0x1000
   15268:	beq	152dc <__assert_fail@plt+0x3568>
   1526c:	sub	r2, r1, #49152	; 0xc000
   15270:	clz	r2, r2
   15274:	lsr	r2, r2, #5
   15278:	cmp	r2, #0
   1527c:	moveq	r0, #0
   15280:	movne	r0, #61	; 0x3d
   15284:	bx	lr
   15288:	movw	r3, #41776	; 0xa330
   1528c:	movt	r3, #3
   15290:	ldr	r3, [r3, #3444]	; 0xd74
   15294:	cmp	r3, #3
   15298:	beq	152e4 <__assert_fail@plt+0x3570>
   1529c:	mov	r0, #0
   152a0:	bx	lr
   152a4:	cmp	r2, #5
   152a8:	beq	152e0 <__assert_fail@plt+0x356c>
   152ac:	cmp	r2, #9
   152b0:	cmpne	r2, #3
   152b4:	moveq	r3, #1
   152b8:	movne	r3, #0
   152bc:	cmp	r3, #0
   152c0:	beq	1523c <__assert_fail@plt+0x34c8>
   152c4:	mov	r0, #47	; 0x2f
   152c8:	bx	lr
   152cc:	cmp	r2, #6
   152d0:	beq	152f4 <__assert_fail@plt+0x3580>
   152d4:	cmp	r2, #1
   152d8:	bne	152fc <__assert_fail@plt+0x3588>
   152dc:	mov	r0, #124	; 0x7c
   152e0:	bx	lr
   152e4:	tst	r1, #73	; 0x49
   152e8:	moveq	r0, #0
   152ec:	movne	r0, #42	; 0x2a
   152f0:	bx	lr
   152f4:	mov	r0, #64	; 0x40
   152f8:	bx	lr
   152fc:	sub	r2, r2, #7
   15300:	clz	r2, r2
   15304:	lsr	r2, r2, #5
   15308:	b	15278 <__assert_fail@plt+0x3504>
   1530c:	str	r4, [sp, #-8]!
   15310:	str	lr, [sp, #4]
   15314:	bl	15214 <__assert_fail@plt+0x34a0>
   15318:	subs	r4, r0, #0
   1531c:	bne	15334 <__assert_fail@plt+0x35c0>
   15320:	adds	r0, r4, #0
   15324:	ldr	r4, [sp]
   15328:	add	sp, sp, #4
   1532c:	movne	r0, #1
   15330:	pop	{pc}		; (ldr pc, [sp], #4)
   15334:	bl	14d20 <__assert_fail@plt+0x2fac>
   15338:	b	15320 <__assert_fail@plt+0x35ac>
   1533c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15340:	mov	r5, r2
   15344:	strd	r6, [sp, #8]
   15348:	mov	r7, r1
   1534c:	mov	r6, r0
   15350:	mov	r1, #46	; 0x2e
   15354:	ldr	r0, [r0]
   15358:	str	r8, [sp, #16]
   1535c:	str	lr, [sp, #20]
   15360:	bl	11c78 <strrchr@plt>
   15364:	mov	r4, r0
   15368:	mov	r1, #46	; 0x2e
   1536c:	ldr	r0, [r7]
   15370:	bl	11c78 <strrchr@plt>
   15374:	cmp	r0, #0
   15378:	movw	r3, #37260	; 0x918c
   1537c:	movt	r3, #2
   15380:	movne	r1, r0
   15384:	moveq	r1, r3
   15388:	cmp	r4, #0
   1538c:	movne	r0, r4
   15390:	moveq	r0, r3
   15394:	blx	r5
   15398:	cmp	r0, #0
   1539c:	bne	153c4 <__assert_fail@plt+0x3650>
   153a0:	mov	r3, r5
   153a4:	ldr	r0, [r6]
   153a8:	ldr	r1, [r7]
   153ac:	ldrd	r4, [sp]
   153b0:	ldrd	r6, [sp, #8]
   153b4:	ldr	r8, [sp, #16]
   153b8:	ldr	lr, [sp, #20]
   153bc:	add	sp, sp, #24
   153c0:	bx	r3
   153c4:	ldrd	r4, [sp]
   153c8:	ldrd	r6, [sp, #8]
   153cc:	ldr	r8, [sp, #16]
   153d0:	add	sp, sp, #20
   153d4:	pop	{pc}		; (ldr pc, [sp], #4)
   153d8:	mov	r3, r1
   153dc:	movw	r2, #6304	; 0x18a0
   153e0:	movt	r2, #1
   153e4:	mov	r1, r0
   153e8:	mov	r0, r3
   153ec:	b	1533c <__assert_fail@plt+0x35c8>
   153f0:	movw	r2, #6304	; 0x18a0
   153f4:	movt	r2, #1
   153f8:	b	1533c <__assert_fail@plt+0x35c8>
   153fc:	mov	r3, r1
   15400:	movw	r2, #19064	; 0x4a78
   15404:	movt	r2, #1
   15408:	mov	r1, r0
   1540c:	mov	r0, r3
   15410:	b	1533c <__assert_fail@plt+0x35c8>
   15414:	movw	r2, #19064	; 0x4a78
   15418:	movt	r2, #1
   1541c:	b	1533c <__assert_fail@plt+0x35c8>
   15420:	ldr	ip, [pc, #68]	; 1546c <__assert_fail@plt+0x36f8>
   15424:	movw	r3, #41764	; 0xa324
   15428:	movt	r3, #3
   1542c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15430:	mov	r2, r1
   15434:	ldr	r3, [r3]
   15438:	strd	r6, [sp, #8]
   1543c:	str	lr, [sp, #16]
   15440:	mov	lr, r1
   15444:	mov	r1, #1
   15448:	ldrd	r4, [ip]
   1544c:	adds	r6, r4, lr
   15450:	ldr	lr, [sp, #16]
   15454:	adc	r7, r5, #0
   15458:	ldrd	r4, [sp]
   1545c:	strd	r6, [ip]
   15460:	ldrd	r6, [sp, #8]
   15464:	add	sp, sp, #20
   15468:	b	11960 <fwrite_unlocked@plt>
   1546c:	muleq	r3, r0, r0
   15470:	strd	r4, [sp, #-12]!
   15474:	subs	r5, r0, #0
   15478:	str	lr, [sp, #8]
   1547c:	sub	sp, sp, #12
   15480:	beq	154d0 <__assert_fail@plt+0x375c>
   15484:	mov	r1, #0
   15488:	bl	1ddac <__assert_fail@plt+0xc038>
   1548c:	ldr	r3, [sp, #24]
   15490:	sub	r4, r3, r0
   15494:	mov	r0, r5
   15498:	bl	11b94 <strlen@plt>
   1549c:	mov	r1, r0
   154a0:	mov	r0, r5
   154a4:	bic	r4, r4, r4, asr #31
   154a8:	bl	15420 <__assert_fail@plt+0x36ac>
   154ac:	sub	r4, r4, #1
   154b0:	mov	r0, #32
   154b4:	bl	14d20 <__assert_fail@plt+0x2fac>
   154b8:	cmn	r4, #1
   154bc:	bne	154ac <__assert_fail@plt+0x3738>
   154c0:	add	sp, sp, #12
   154c4:	ldrd	r4, [sp]
   154c8:	add	sp, sp, #8
   154cc:	pop	{pc}		; (ldr pc, [sp], #4)
   154d0:	movw	r1, #26600	; 0x67e8
   154d4:	movt	r1, #2
   154d8:	strd	r2, [sp]
   154dc:	mov	r0, #1
   154e0:	ldr	r2, [sp, #24]
   154e4:	bl	11bf4 <__printf_chk@plt>
   154e8:	ldr	ip, [pc, #36]	; 15514 <__assert_fail@plt+0x37a0>
   154ec:	ldrd	r2, [ip]
   154f0:	adds	r4, r2, r0
   154f4:	adc	r5, r3, r0, asr #31
   154f8:	mov	r0, r4
   154fc:	mov	r1, r5
   15500:	strd	r0, [ip]
   15504:	add	sp, sp, #12
   15508:	ldrd	r4, [sp]
   1550c:	add	sp, sp, #8
   15510:	pop	{pc}		; (ldr pc, [sp], #4)
   15514:	muleq	r3, r0, r0
   15518:	cmp	r2, #0
   1551c:	mov	r2, r0
   15520:	push	{lr}		; (str lr, [sp, #-4]!)
   15524:	movweq	r0, #26608	; 0x67f0
   15528:	sub	sp, sp, #20
   1552c:	movteq	r0, #2
   15530:	beq	1554c <__assert_fail@plt+0x37d8>
   15534:	movw	r3, #41776	; 0xa330
   15538:	movt	r3, #3
   1553c:	ldrb	r3, [r3, #3448]	; 0xd78
   15540:	cmp	r3, #0
   15544:	movne	r0, #0
   15548:	beq	15560 <__assert_fail@plt+0x37ec>
   1554c:	mov	r3, #0
   15550:	str	r1, [sp]
   15554:	bl	15470 <__assert_fail@plt+0x36fc>
   15558:	add	sp, sp, #20
   1555c:	pop	{pc}		; (ldr pc, [sp], #4)
   15560:	str	r2, [sp, #8]
   15564:	str	r1, [sp, #12]
   15568:	bl	1d22c <__assert_fail@plt+0xb4b8>
   1556c:	ldr	r2, [sp, #8]
   15570:	ldr	r1, [sp, #12]
   15574:	b	1554c <__assert_fail@plt+0x37d8>
   15578:	ldrd	r2, [r0, #12]
   1557c:	str	r4, [sp, #-8]!
   15580:	mov	r4, r0
   15584:	str	lr, [sp, #4]
   15588:	sub	r3, r3, r2
   1558c:	cmp	r3, #7
   15590:	bls	155c4 <__assert_fail@plt+0x3850>
   15594:	movw	r3, #41776	; 0xa330
   15598:	movt	r3, #3
   1559c:	ldr	r1, [r3, #3424]	; 0xd60
   155a0:	ldr	r3, [r3, #3428]	; 0xd64
   155a4:	str	r1, [r2]
   155a8:	str	r3, [r2, #4]
   155ac:	ldr	r3, [r4, #12]
   155b0:	add	r3, r3, #8
   155b4:	str	r3, [r4, #12]
   155b8:	ldr	r4, [sp]
   155bc:	add	sp, sp, #4
   155c0:	pop	{pc}		; (ldr pc, [sp], #4)
   155c4:	mov	r1, #8
   155c8:	bl	200a0 <_obstack_newchunk@@Base>
   155cc:	ldr	r2, [r4, #12]
   155d0:	b	15594 <__assert_fail@plt+0x3820>
   155d4:	str	r4, [sp, #-8]!
   155d8:	movw	r4, #41424	; 0xa1d0
   155dc:	movt	r4, #3
   155e0:	ldr	r3, [r4, #20]
   155e4:	str	lr, [sp, #4]
   155e8:	cmp	r3, #0
   155ec:	beq	15608 <__assert_fail@plt+0x3894>
   155f0:	add	r1, r4, #20
   155f4:	add	r0, r4, #16
   155f8:	ldr	r4, [sp]
   155fc:	ldr	lr, [sp, #4]
   15600:	add	sp, sp, #8
   15604:	b	15638 <__assert_fail@plt+0x38c4>
   15608:	add	r1, r4, #4
   1560c:	mov	r0, r4
   15610:	bl	15638 <__assert_fail@plt+0x38c4>
   15614:	add	r1, r4, #28
   15618:	add	r0, r4, #24
   1561c:	bl	15638 <__assert_fail@plt+0x38c4>
   15620:	add	r1, r4, #12
   15624:	add	r0, r4, #8
   15628:	ldr	r4, [sp]
   1562c:	ldr	lr, [sp, #4]
   15630:	add	sp, sp, #8
   15634:	b	15638 <__assert_fail@plt+0x38c4>
   15638:	movw	r3, #41776	; 0xa330
   1563c:	movt	r3, #3
   15640:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15644:	ldrb	r2, [r3, #3449]	; 0xd79
   15648:	strd	r6, [sp, #8]
   1564c:	mov	r7, r1
   15650:	strd	r8, [sp, #16]
   15654:	mov	r8, r0
   15658:	strd	sl, [sp, #24]
   1565c:	str	lr, [sp, #32]
   15660:	sub	sp, sp, #148	; 0x94
   15664:	cmp	r2, #0
   15668:	beq	156a4 <__assert_fail@plt+0x3930>
   1566c:	movw	r3, #41764	; 0xa324
   15670:	movt	r3, #3
   15674:	ldr	r1, [r8]
   15678:	mov	r2, #1
   1567c:	ldr	r3, [r3]
   15680:	ldr	r0, [r7]
   15684:	bl	11960 <fwrite_unlocked@plt>
   15688:	add	sp, sp, #148	; 0x94
   1568c:	ldrd	r4, [sp]
   15690:	ldrd	r6, [sp, #8]
   15694:	ldrd	r8, [sp, #16]
   15698:	ldrd	sl, [sp, #24]
   1569c:	add	sp, sp, #32
   156a0:	pop	{pc}		; (ldr pc, [sp], #4)
   156a4:	mov	r2, #1
   156a8:	mov	r0, r2
   156ac:	strb	r2, [r3, #3449]	; 0xd79
   156b0:	bl	11b88 <tcgetpgrp@plt>
   156b4:	cmp	r0, #0
   156b8:	bge	156c4 <__assert_fail@plt+0x3950>
   156bc:	bl	155d4 <__assert_fail@plt+0x3860>
   156c0:	b	1566c <__assert_fail@plt+0x38f8>
   156c4:	ldr	sl, [pc, #200]	; 15794 <__assert_fail@plt+0x3a20>
   156c8:	mov	r4, #20
   156cc:	ldr	r6, [pc, #196]	; 15798 <__assert_fail@plt+0x3a24>
   156d0:	mov	r0, sl
   156d4:	add	r9, r6, #44	; 0x2c
   156d8:	mov	r5, r6
   156dc:	bl	11c60 <sigemptyset@plt>
   156e0:	b	156e8 <__assert_fail@plt+0x3974>
   156e4:	ldr	r4, [r5, #4]!
   156e8:	mov	r1, #0
   156ec:	add	r2, sp, #4
   156f0:	mov	r0, r4
   156f4:	bl	11a14 <sigaction@plt>
   156f8:	ldr	r3, [sp, #4]
   156fc:	mov	r1, r4
   15700:	mov	r0, sl
   15704:	cmp	r3, #1
   15708:	beq	15710 <__assert_fail@plt+0x399c>
   1570c:	bl	11aec <sigaddset@plt>
   15710:	cmp	r9, r5
   15714:	bne	156e4 <__assert_fail@plt+0x3970>
   15718:	ldr	r9, [pc, #116]	; 15794 <__assert_fail@plt+0x3a20>
   1571c:	mov	r2, #128	; 0x80
   15720:	add	r0, sp, #8
   15724:	movw	fp, #20336	; 0x4f70
   15728:	movt	fp, #1
   1572c:	movw	sl, #15816	; 0x3dc8
   15730:	movt	sl, #1
   15734:	mov	r4, #20
   15738:	mov	r1, r9
   1573c:	bl	11930 <memcpy@plt>
   15740:	mov	r3, #268435456	; 0x10000000
   15744:	str	r3, [sp, #136]	; 0x88
   15748:	b	15750 <__assert_fail@plt+0x39dc>
   1574c:	ldr	r4, [r6, #4]!
   15750:	mov	r1, r4
   15754:	mov	r0, r9
   15758:	bl	1199c <sigismember@plt>
   1575c:	mov	r2, #0
   15760:	add	r1, sp, #4
   15764:	cmp	r0, r2
   15768:	mov	r0, r4
   1576c:	beq	15784 <__assert_fail@plt+0x3a10>
   15770:	cmp	r4, #20
   15774:	moveq	r4, fp
   15778:	movne	r4, sl
   1577c:	str	r4, [sp, #4]
   15780:	bl	11a14 <sigaction@plt>
   15784:	cmp	r5, r6
   15788:	bne	1574c <__assert_fail@plt+0x39d8>
   1578c:	bl	155d4 <__assert_fail@plt+0x3860>
   15790:	b	1566c <__assert_fail@plt+0x38f8>
   15794:	andeq	fp, r3, ip, lsr #1
   15798:	andeq	r5, r2, r0, rrx
   1579c:	str	r4, [sp, #-8]!
   157a0:	movw	r4, #41424	; 0xa1d0
   157a4:	movt	r4, #3
   157a8:	add	r1, r4, #4
   157ac:	mov	r0, r4
   157b0:	str	lr, [sp, #4]
   157b4:	bl	15638 <__assert_fail@plt+0x38c4>
   157b8:	add	r1, r4, #12
   157bc:	add	r0, r4, #8
   157c0:	ldr	r4, [sp]
   157c4:	ldr	lr, [sp, #4]
   157c8:	add	sp, sp, #8
   157cc:	b	15638 <__assert_fail@plt+0x38c4>
   157d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   157d4:	movw	r4, #41776	; 0xa330
   157d8:	movt	r4, #3
   157dc:	strd	r6, [sp, #8]
   157e0:	movw	r6, #41764	; 0xa324
   157e4:	movt	r6, #3
   157e8:	ldr	r7, [pc, #160]	; 15890 <__assert_fail@plt+0x3b1c>
   157ec:	str	lr, [sp, #16]
   157f0:	sub	sp, sp, #132	; 0x84
   157f4:	b	15844 <__assert_fail@plt+0x3ad0>
   157f8:	ldr	r0, [r6]
   157fc:	bl	119e4 <fflush_unlocked@plt>
   15800:	mov	r1, r7
   15804:	mov	r2, sp
   15808:	mov	r0, #0
   1580c:	bl	118dc <sigprocmask@plt>
   15810:	ldr	r5, [r4]
   15814:	ldr	r1, [r4, #3436]	; 0xd6c
   15818:	cmp	r1, #0
   1581c:	sub	r3, r1, #1
   15820:	beq	15870 <__assert_fail@plt+0x3afc>
   15824:	mov	r5, #19
   15828:	str	r3, [r4, #3436]	; 0xd6c
   1582c:	mov	r0, r5
   15830:	bl	1187c <raise@plt>
   15834:	mov	r2, #0
   15838:	mov	r1, sp
   1583c:	mov	r0, #2
   15840:	bl	118dc <sigprocmask@plt>
   15844:	ldr	r3, [r4]
   15848:	cmp	r3, #0
   1584c:	bne	1585c <__assert_fail@plt+0x3ae8>
   15850:	ldr	r3, [r4, #3436]	; 0xd6c
   15854:	cmp	r3, #0
   15858:	beq	1587c <__assert_fail@plt+0x3b08>
   1585c:	ldrb	r3, [r4, #3449]	; 0xd79
   15860:	cmp	r3, #0
   15864:	beq	157f8 <__assert_fail@plt+0x3a84>
   15868:	bl	1579c <__assert_fail@plt+0x3a28>
   1586c:	b	157f8 <__assert_fail@plt+0x3a84>
   15870:	mov	r0, r5
   15874:	bl	11954 <signal@plt>
   15878:	b	1582c <__assert_fail@plt+0x3ab8>
   1587c:	add	sp, sp, #132	; 0x84
   15880:	ldrd	r4, [sp]
   15884:	ldrd	r6, [sp, #8]
   15888:	add	sp, sp, #16
   1588c:	pop	{pc}		; (ldr pc, [sp], #4)
   15890:	andeq	fp, r3, ip, lsr #1
   15894:	movw	r3, #41776	; 0xa330
   15898:	movt	r3, #3
   1589c:	ldrb	r3, [r3, #3580]	; 0xdfc
   158a0:	cmp	r3, #0
   158a4:	bxeq	lr
   158a8:	mov	r0, #4
   158ac:	str	r4, [sp, #-8]!
   158b0:	str	lr, [sp, #4]
   158b4:	bl	13e44 <__assert_fail@plt+0x20d0>
   158b8:	cmp	r0, #0
   158bc:	bne	158cc <__assert_fail@plt+0x3b58>
   158c0:	ldr	r4, [sp]
   158c4:	add	sp, sp, #4
   158c8:	pop	{pc}		; (ldr pc, [sp], #4)
   158cc:	ldr	r1, [pc, #40]	; 158fc <__assert_fail@plt+0x3b88>
   158d0:	sub	r0, r1, #4
   158d4:	bl	15638 <__assert_fail@plt+0x38c4>
   158d8:	ldr	r1, [pc, #32]	; 15900 <__assert_fail@plt+0x3b8c>
   158dc:	sub	r0, r1, #4
   158e0:	bl	15638 <__assert_fail@plt+0x38c4>
   158e4:	ldr	r1, [pc, #24]	; 15904 <__assert_fail@plt+0x3b90>
   158e8:	ldr	r4, [sp]
   158ec:	ldr	lr, [sp, #4]
   158f0:	add	sp, sp, #8
   158f4:	sub	r0, r1, #4
   158f8:	b	15638 <__assert_fail@plt+0x38c4>
   158fc:	ldrdeq	sl, [r3], -r4
   15900:	strdeq	sl, [r3], -r4
   15904:	ldrdeq	sl, [r3], -ip
   15908:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1590c:	mov	r4, r1
   15910:	mov	r5, r3
   15914:	strd	r6, [sp, #8]
   15918:	mov	r6, r2
   1591c:	strd	r8, [sp, #16]
   15920:	strd	sl, [sp, #24]
   15924:	movw	fp, #41776	; 0xa330
   15928:	movt	fp, #3
   1592c:	str	lr, [sp, #32]
   15930:	sub	sp, sp, #36	; 0x24
   15934:	ldr	sl, [r0]
   15938:	str	r0, [sp, #12]
   1593c:	mov	r0, r6
   15940:	bl	21f2c <_obstack_memory_used@@Base+0x1c94>
   15944:	ldrb	r9, [fp, #3581]	; 0xdfd
   15948:	cmp	r0, #2
   1594c:	movhi	r9, #0
   15950:	andls	r9, r9, #1
   15954:	cmp	r9, #0
   15958:	str	r9, [sp, #8]
   1595c:	bne	15a90 <__assert_fail@plt+0x3d1c>
   15960:	cmp	r5, #0
   15964:	beq	159cc <__assert_fail@plt+0x3c58>
   15968:	ldr	r7, [sp, #8]
   1596c:	mvn	r3, #0
   15970:	mov	r2, r4
   15974:	str	r6, [sp]
   15978:	mov	r1, #8192	; 0x2000
   1597c:	mov	r0, sl
   15980:	bl	21ff4 <_obstack_memory_used@@Base+0x1d5c>
   15984:	cmp	r0, #8192	; 0x2000
   15988:	mov	r5, r0
   1598c:	bcs	15cdc <__assert_fail@plt+0x3f68>
   15990:	ldrb	r3, [sl]
   15994:	ldrb	r2, [r4]
   15998:	cmp	r2, r3
   1599c:	movne	r3, #1
   159a0:	strne	r3, [sp, #8]
   159a4:	bne	159bc <__assert_fail@plt+0x3c48>
   159a8:	mov	r0, r4
   159ac:	bl	11b94 <strlen@plt>
   159b0:	subs	r3, r5, r0
   159b4:	movne	r3, #1
   159b8:	str	r3, [sp, #8]
   159bc:	cmp	r7, #0
   159c0:	beq	159dc <__assert_fail@plt+0x3c68>
   159c4:	mov	r6, r5
   159c8:	b	15ac8 <__assert_fail@plt+0x3d54>
   159cc:	mov	r0, r4
   159d0:	mov	sl, r4
   159d4:	bl	11b94 <strlen@plt>
   159d8:	mov	r5, r0
   159dc:	ldr	r3, [sp, #72]	; 0x48
   159e0:	cmp	r3, #0
   159e4:	beq	15a74 <__assert_fail@plt+0x3d00>
   159e8:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   159ec:	cmp	r0, #1
   159f0:	bhi	15c88 <__assert_fail@plt+0x3f14>
   159f4:	add	r4, sl, r5
   159f8:	cmp	r4, sl
   159fc:	bls	15d04 <__assert_fail@plt+0x3f90>
   15a00:	bl	11b58 <__ctype_b_loc@plt>
   15a04:	ldr	r0, [r0]
   15a08:	sub	r1, r4, #1
   15a0c:	sub	r2, sl, #1
   15a10:	mov	r6, #0
   15a14:	ldrb	r3, [r2, #1]!
   15a18:	lsl	r3, r3, #1
   15a1c:	ldrh	r3, [r0, r3]
   15a20:	tst	r3, #16384	; 0x4000
   15a24:	addne	r6, r6, #1
   15a28:	cmp	r1, r2
   15a2c:	bne	15a14 <__assert_fail@plt+0x3ca0>
   15a30:	ldrb	r3, [fp, #3582]	; 0xdfe
   15a34:	cmp	r3, #0
   15a38:	bne	15be8 <__assert_fail@plt+0x3e74>
   15a3c:	ldr	r2, [sp, #76]	; 0x4c
   15a40:	strb	r3, [r2]
   15a44:	ldr	r3, [sp, #72]	; 0x48
   15a48:	str	r6, [r3]
   15a4c:	ldr	r3, [sp, #12]
   15a50:	mov	r0, r5
   15a54:	str	sl, [r3]
   15a58:	add	sp, sp, #36	; 0x24
   15a5c:	ldrd	r4, [sp]
   15a60:	ldrd	r6, [sp, #8]
   15a64:	ldrd	r8, [sp, #16]
   15a68:	ldrd	sl, [sp, #24]
   15a6c:	add	sp, sp, #32
   15a70:	pop	{pc}		; (ldr pc, [sp], #4)
   15a74:	ldrb	r3, [fp, #3582]	; 0xdfe
   15a78:	cmp	r3, #0
   15a7c:	bne	15be4 <__assert_fail@plt+0x3e70>
   15a80:	ldr	r3, [sp, #72]	; 0x48
   15a84:	ldr	r2, [sp, #76]	; 0x4c
   15a88:	strb	r3, [r2]
   15a8c:	b	15a4c <__assert_fail@plt+0x3cd8>
   15a90:	cmp	r5, #0
   15a94:	bne	15d18 <__assert_fail@plt+0x3fa4>
   15a98:	mov	r0, r4
   15a9c:	bl	11b94 <strlen@plt>
   15aa0:	cmp	r0, #8192	; 0x2000
   15aa4:	mov	r6, r0
   15aa8:	add	r5, r0, #1
   15aac:	bcs	15ccc <__assert_fail@plt+0x3f58>
   15ab0:	mov	r3, #0
   15ab4:	mov	r2, r5
   15ab8:	mov	r1, r4
   15abc:	mov	r0, sl
   15ac0:	str	r3, [sp, #8]
   15ac4:	bl	11930 <memcpy@plt>
   15ac8:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   15acc:	cmp	r0, #1
   15ad0:	add	r7, sl, r6
   15ad4:	bls	15c14 <__assert_fail@plt+0x3ea0>
   15ad8:	cmp	r7, sl
   15adc:	bls	15d0c <__assert_fail@plt+0x3f98>
   15ae0:	mov	r5, sl
   15ae4:	mov	r4, sl
   15ae8:	mov	r6, #0
   15aec:	b	15b18 <__assert_fail@plt+0x3da4>
   15af0:	cmp	r3, #37	; 0x25
   15af4:	bcs	15b04 <__assert_fail@plt+0x3d90>
   15af8:	sub	r2, r3, #32
   15afc:	cmp	r2, #3
   15b00:	bhi	15b40 <__assert_fail@plt+0x3dcc>
   15b04:	add	r4, r4, #1
   15b08:	add	r6, r6, #1
   15b0c:	strb	r3, [r5], #1
   15b10:	cmp	r7, r4
   15b14:	bls	15c80 <__assert_fail@plt+0x3f0c>
   15b18:	ldrb	r3, [r4]
   15b1c:	cmp	r3, #63	; 0x3f
   15b20:	bls	15af0 <__assert_fail@plt+0x3d7c>
   15b24:	cmp	r3, #65	; 0x41
   15b28:	bcc	15b40 <__assert_fail@plt+0x3dcc>
   15b2c:	cmp	r3, #95	; 0x5f
   15b30:	bls	15b04 <__assert_fail@plt+0x3d90>
   15b34:	sub	r2, r3, #97	; 0x61
   15b38:	cmp	r2, #29
   15b3c:	bls	15b04 <__assert_fail@plt+0x3d90>
   15b40:	mov	r2, #0
   15b44:	mov	r3, #0
   15b48:	strd	r2, [sp, #24]
   15b4c:	b	15b84 <__assert_fail@plt+0x3e10>
   15b50:	bl	118d0 <wcwidth@plt>
   15b54:	cmp	r0, #0
   15b58:	addlt	r8, r4, r8
   15b5c:	bge	15c60 <__assert_fail@plt+0x3eec>
   15b60:	mov	r3, #63	; 0x3f
   15b64:	add	r6, r6, #1
   15b68:	mov	r4, r8
   15b6c:	strb	r3, [r5]
   15b70:	mov	r5, r9
   15b74:	add	r0, sp, #24
   15b78:	bl	11948 <mbsinit@plt>
   15b7c:	cmp	r0, #0
   15b80:	bne	15b10 <__assert_fail@plt+0x3d9c>
   15b84:	add	r3, sp, #24
   15b88:	sub	r2, r7, r4
   15b8c:	mov	r1, r4
   15b90:	add	r0, sp, #20
   15b94:	bl	1d738 <__assert_fail@plt+0xb9c4>
   15b98:	cmn	r0, #1
   15b9c:	mov	r8, r0
   15ba0:	add	r9, r5, #1
   15ba4:	beq	15ca0 <__assert_fail@plt+0x3f2c>
   15ba8:	cmn	r0, #2
   15bac:	beq	15cb8 <__assert_fail@plt+0x3f44>
   15bb0:	cmp	r0, #0
   15bb4:	ldr	r0, [sp, #20]
   15bb8:	bne	15b50 <__assert_fail@plt+0x3ddc>
   15bbc:	bl	118d0 <wcwidth@plt>
   15bc0:	cmp	r0, #0
   15bc4:	add	r8, r4, #1
   15bc8:	blt	15b60 <__assert_fail@plt+0x3dec>
   15bcc:	ldrb	r3, [r4]
   15bd0:	mov	r4, r8
   15bd4:	strb	r3, [r5]
   15bd8:	mov	r5, r9
   15bdc:	add	r6, r6, r0
   15be0:	b	15b74 <__assert_fail@plt+0x3e00>
   15be4:	ldr	r6, [sp, #72]	; 0x48
   15be8:	ldrb	r3, [fp, #3112]	; 0xc28
   15bec:	ldr	r2, [sp, #8]
   15bf0:	eor	r3, r3, #1
   15bf4:	orr	r9, r2, r3
   15bf8:	eor	r3, r9, #1
   15bfc:	ldr	r2, [sp, #72]	; 0x48
   15c00:	cmp	r2, #0
   15c04:	ldr	r2, [sp, #76]	; 0x4c
   15c08:	strb	r3, [r2]
   15c0c:	bne	15a44 <__assert_fail@plt+0x3cd0>
   15c10:	b	15a4c <__assert_fail@plt+0x3cd8>
   15c14:	cmp	r7, sl
   15c18:	bls	15c4c <__assert_fail@plt+0x3ed8>
   15c1c:	bl	11b58 <__ctype_b_loc@plt>
   15c20:	sub	r7, r7, #1
   15c24:	sub	r2, sl, #1
   15c28:	mov	r1, #63	; 0x3f
   15c2c:	ldrb	r3, [r2, #1]!
   15c30:	ldr	ip, [r0]
   15c34:	lsl	r3, r3, #1
   15c38:	ldrh	r3, [ip, r3]
   15c3c:	tst	r3, #16384	; 0x4000
   15c40:	strbeq	r1, [r2]
   15c44:	cmp	r7, r2
   15c48:	bne	15c2c <__assert_fail@plt+0x3eb8>
   15c4c:	mov	r5, r6
   15c50:	ldrb	r3, [fp, #3582]	; 0xdfe
   15c54:	cmp	r3, #0
   15c58:	bne	15be8 <__assert_fail@plt+0x3e74>
   15c5c:	b	15bfc <__assert_fail@plt+0x3e88>
   15c60:	sub	r3, r5, #1
   15c64:	add	r1, r4, r8
   15c68:	ldrb	r2, [r4], #1
   15c6c:	cmp	r4, r1
   15c70:	strb	r2, [r3, #1]!
   15c74:	bne	15c68 <__assert_fail@plt+0x3ef4>
   15c78:	add	r5, r5, r8
   15c7c:	b	15bdc <__assert_fail@plt+0x3e68>
   15c80:	sub	r5, r5, sl
   15c84:	b	15c50 <__assert_fail@plt+0x3edc>
   15c88:	mov	r2, #0
   15c8c:	mov	r1, r5
   15c90:	mov	r0, sl
   15c94:	bl	1dbe0 <__assert_fail@plt+0xbe6c>
   15c98:	mov	r6, r0
   15c9c:	b	15a30 <__assert_fail@plt+0x3cbc>
   15ca0:	mov	r3, #63	; 0x3f
   15ca4:	add	r4, r4, #1
   15ca8:	add	r6, r6, #1
   15cac:	strb	r3, [r5]
   15cb0:	mov	r5, r9
   15cb4:	b	15b10 <__assert_fail@plt+0x3d9c>
   15cb8:	mov	r3, #63	; 0x3f
   15cbc:	add	r6, r6, #1
   15cc0:	mov	r4, r7
   15cc4:	strb	r3, [r5]
   15cc8:	b	15cb0 <__assert_fail@plt+0x3f3c>
   15ccc:	mov	r0, r5
   15cd0:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   15cd4:	mov	sl, r0
   15cd8:	b	15ab0 <__assert_fail@plt+0x3d3c>
   15cdc:	add	r8, r0, #1
   15ce0:	mov	r0, r8
   15ce4:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   15ce8:	mov	r1, r8
   15cec:	mvn	r3, #0
   15cf0:	str	r6, [sp]
   15cf4:	mov	r2, r4
   15cf8:	mov	sl, r0
   15cfc:	bl	21ff4 <_obstack_memory_used@@Base+0x1d5c>
   15d00:	b	15990 <__assert_fail@plt+0x3c1c>
   15d04:	mov	r6, #0
   15d08:	b	15a30 <__assert_fail@plt+0x3cbc>
   15d0c:	mov	r6, #0
   15d10:	mov	r5, r6
   15d14:	b	15c50 <__assert_fail@plt+0x3edc>
   15d18:	mov	r7, #1
   15d1c:	b	1596c <__assert_fail@plt+0x3bf8>
   15d20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d24:	mov	r5, r3
   15d28:	mov	r3, r2
   15d2c:	strd	r6, [sp, #8]
   15d30:	mov	r2, r1
   15d34:	strd	r8, [sp, #16]
   15d38:	strd	sl, [sp, #24]
   15d3c:	str	lr, [sp, #32]
   15d40:	sub	sp, sp, #8192	; 0x2000
   15d44:	mov	lr, #0
   15d48:	sub	sp, sp, #28
   15d4c:	add	r4, sp, #24
   15d50:	add	ip, sp, #8256	; 0x2040
   15d54:	ldrb	r7, [ip]
   15d58:	sub	ip, r4, #5
   15d5c:	str	lr, [sp]
   15d60:	str	ip, [sp, #4]
   15d64:	add	ip, sp, #8256	; 0x2040
   15d68:	str	r0, [sp, #8]
   15d6c:	add	ip, ip, #8
   15d70:	sub	r0, r4, #4
   15d74:	str	r4, [r4, #-4]
   15d78:	ldr	r1, [sp, #8]
   15d7c:	ldr	fp, [ip]
   15d80:	bl	15908 <__assert_fail@plt+0x3b94>
   15d84:	ldrb	r3, [r4, #-5]
   15d88:	mov	r6, r0
   15d8c:	tst	r7, r3
   15d90:	bne	16044 <__assert_fail@plt+0x42d0>
   15d94:	cmp	r5, #0
   15d98:	beq	15dd0 <__assert_fail@plt+0x405c>
   15d9c:	mov	r0, #4
   15da0:	bl	13e44 <__assert_fail@plt+0x20d0>
   15da4:	cmp	r0, #0
   15da8:	bne	1603c <__assert_fail@plt+0x42c8>
   15dac:	ldr	r1, [pc, #712]	; 1607c <__assert_fail@plt+0x4308>
   15db0:	sub	r0, r1, #4
   15db4:	bl	15638 <__assert_fail@plt+0x38c4>
   15db8:	add	r1, r5, #4
   15dbc:	mov	r0, r5
   15dc0:	bl	15638 <__assert_fail@plt+0x38c4>
   15dc4:	ldr	r1, [pc, #692]	; 16080 <__assert_fail@plt+0x430c>
   15dc8:	sub	r0, r1, #4
   15dcc:	bl	15638 <__assert_fail@plt+0x38c4>
   15dd0:	cmp	fp, #0
   15dd4:	beq	15fe8 <__assert_fail@plt+0x4274>
   15dd8:	movw	r9, #41776	; 0xa330
   15ddc:	movt	r9, #3
   15de0:	ldrb	r7, [r9, #3582]	; 0xdfe
   15de4:	cmp	r7, #0
   15de8:	bne	15f58 <__assert_fail@plt+0x41e4>
   15dec:	movw	r5, #41764	; 0xa324
   15df0:	movt	r5, #3
   15df4:	str	r7, [sp, #12]
   15df8:	mov	r8, r6
   15dfc:	mov	r1, #0
   15e00:	ldr	r0, [r9, #3584]	; 0xe00
   15e04:	bl	14c54 <__assert_fail@plt+0x2ee0>
   15e08:	mov	sl, r0
   15e0c:	mov	r1, #1
   15e10:	mov	r0, fp
   15e14:	bl	14c54 <__assert_fail@plt+0x2ee0>
   15e18:	ldrb	lr, [r0]
   15e1c:	mov	r9, r0
   15e20:	movw	ip, #35804	; 0x8bdc
   15e24:	movt	ip, #2
   15e28:	mov	r2, sl
   15e2c:	movw	r3, #37260	; 0x918c
   15e30:	movt	r3, #2
   15e34:	str	r9, [sp]
   15e38:	movw	r1, #26612	; 0x67f4
   15e3c:	movt	r1, #2
   15e40:	mov	r0, #1
   15e44:	cmp	lr, #47	; 0x2f
   15e48:	movne	r3, ip
   15e4c:	bl	11bf4 <__printf_chk@plt>
   15e50:	mov	r0, sl
   15e54:	bl	1b2b4 <__assert_fail@plt+0x9540>
   15e58:	mov	r0, r9
   15e5c:	bl	1b2b4 <__assert_fail@plt+0x9540>
   15e60:	add	r3, sp, #8256	; 0x2040
   15e64:	add	r3, r3, #4
   15e68:	ldr	r3, [r3]
   15e6c:	cmp	r3, #0
   15e70:	beq	16000 <__assert_fail@plt+0x428c>
   15e74:	movw	r9, #41776	; 0xa330
   15e78:	movt	r9, #3
   15e7c:	ldrb	r3, [r9, #3588]	; 0xe04
   15e80:	cmp	r3, #0
   15e84:	beq	15e98 <__assert_fail@plt+0x4124>
   15e88:	add	r3, sp, #8256	; 0x2040
   15e8c:	add	r3, r3, #4
   15e90:	ldr	r0, [r3]
   15e94:	bl	15578 <__assert_fail@plt+0x3804>
   15e98:	ldr	r0, [r4, #-4]
   15e9c:	mov	r2, r8
   15ea0:	mov	r1, #1
   15ea4:	ldr	ip, [sp, #12]
   15ea8:	ldr	r3, [r5]
   15eac:	add	r0, r0, ip
   15eb0:	bl	11960 <fwrite_unlocked@plt>
   15eb4:	ldr	r1, [pc, #456]	; 16084 <__assert_fail@plt+0x4310>
   15eb8:	ldrb	r0, [r9, #3588]	; 0xe04
   15ebc:	ldrd	r2, [r1]
   15ec0:	adds	r8, r2, r6
   15ec4:	adc	r9, r3, #0
   15ec8:	mov	r2, r8
   15ecc:	mov	r3, r9
   15ed0:	cmp	r0, #0
   15ed4:	strd	r2, [r1]
   15ed8:	bne	15f44 <__assert_fail@plt+0x41d0>
   15edc:	cmp	fp, #0
   15ee0:	beq	15f04 <__assert_fail@plt+0x4190>
   15ee4:	movw	r0, #26632	; 0x6808
   15ee8:	movt	r0, #2
   15eec:	ldr	r3, [r5]
   15ef0:	mov	r2, #6
   15ef4:	mov	r1, #1
   15ef8:	bl	11960 <fwrite_unlocked@plt>
   15efc:	cmp	r7, #0
   15f00:	bne	15fb4 <__assert_fail@plt+0x4240>
   15f04:	ldr	r0, [r4, #-4]
   15f08:	ldr	r3, [sp, #8]
   15f0c:	cmp	r0, r4
   15f10:	cmpne	r0, r3
   15f14:	beq	15f1c <__assert_fail@plt+0x41a8>
   15f18:	bl	1b2b4 <__assert_fail@plt+0x9540>
   15f1c:	ldrb	r0, [r4, #-5]
   15f20:	add	r0, r0, r6
   15f24:	add	sp, sp, #8192	; 0x2000
   15f28:	add	sp, sp, #28
   15f2c:	ldrd	r4, [sp]
   15f30:	ldrd	r6, [sp, #8]
   15f34:	ldrd	r8, [sp, #16]
   15f38:	ldrd	sl, [sp, #24]
   15f3c:	add	sp, sp, #32
   15f40:	pop	{pc}		; (ldr pc, [sp], #4)
   15f44:	add	r3, sp, #8256	; 0x2040
   15f48:	add	r3, r3, #4
   15f4c:	ldr	r0, [r3]
   15f50:	bl	15578 <__assert_fail@plt+0x3804>
   15f54:	b	15edc <__assert_fail@plt+0x4168>
   15f58:	ldrb	r7, [r9, #3112]	; 0xc28
   15f5c:	cmp	r7, #0
   15f60:	beq	15dec <__assert_fail@plt+0x4078>
   15f64:	ldrb	r3, [r4, #-5]
   15f68:	cmp	r3, #0
   15f6c:	bne	16050 <__assert_fail@plt+0x42dc>
   15f70:	movw	r5, #41764	; 0xa324
   15f74:	movt	r5, #3
   15f78:	ldr	r3, [r4, #-4]
   15f7c:	sub	r2, r6, #2
   15f80:	ldr	r0, [r5]
   15f84:	mov	r8, r2
   15f88:	ldrb	r1, [r3]
   15f8c:	ldr	r3, [r0, #20]
   15f90:	ldr	r2, [r0, #24]
   15f94:	cmp	r3, r2
   15f98:	bcs	1606c <__assert_fail@plt+0x42f8>
   15f9c:	add	r2, r3, #1
   15fa0:	mov	ip, #1
   15fa4:	str	ip, [sp, #12]
   15fa8:	str	r2, [r0, #20]
   15fac:	strb	r1, [r3]
   15fb0:	b	15dfc <__assert_fail@plt+0x4088>
   15fb4:	ldr	r0, [r5]
   15fb8:	ldr	r3, [r4, #-4]
   15fbc:	ldr	r2, [r0, #20]
   15fc0:	ldr	ip, [r0, #24]
   15fc4:	add	r3, r3, r6
   15fc8:	ldrb	r1, [r3, #-1]
   15fcc:	cmp	r2, ip
   15fd0:	addcc	r3, r2, #1
   15fd4:	strcc	r3, [r0, #20]
   15fd8:	strbcc	r1, [r2]
   15fdc:	bcc	15f04 <__assert_fail@plt+0x4190>
   15fe0:	bl	11c48 <__overflow@plt>
   15fe4:	b	15f04 <__assert_fail@plt+0x4190>
   15fe8:	movw	r5, #41764	; 0xa324
   15fec:	movt	r5, #3
   15ff0:	str	fp, [sp, #12]
   15ff4:	mov	r8, r6
   15ff8:	mov	r7, fp
   15ffc:	b	15e60 <__assert_fail@plt+0x40ec>
   16000:	ldr	r0, [r4, #-4]
   16004:	mov	r2, r8
   16008:	mov	r1, #1
   1600c:	ldr	ip, [sp, #12]
   16010:	ldr	r3, [r5]
   16014:	add	r0, r0, ip
   16018:	bl	11960 <fwrite_unlocked@plt>
   1601c:	ldr	r1, [pc, #96]	; 16084 <__assert_fail@plt+0x4310>
   16020:	ldrd	r2, [r1]
   16024:	adds	r8, r2, r6
   16028:	adc	r9, r3, #0
   1602c:	mov	r2, r8
   16030:	mov	r3, r9
   16034:	strd	r2, [r1]
   16038:	b	15edc <__assert_fail@plt+0x4168>
   1603c:	bl	1579c <__assert_fail@plt+0x3a28>
   16040:	b	15dac <__assert_fail@plt+0x4038>
   16044:	mov	r0, #32
   16048:	bl	14d20 <__assert_fail@plt+0x2fac>
   1604c:	b	15d94 <__assert_fail@plt+0x4020>
   16050:	mov	r3, #0
   16054:	movw	r5, #41764	; 0xa324
   16058:	movt	r5, #3
   1605c:	mov	r7, r3
   16060:	mov	r8, r6
   16064:	str	r3, [sp, #12]
   16068:	b	15dfc <__assert_fail@plt+0x4088>
   1606c:	bl	11c48 <__overflow@plt>
   16070:	mov	r3, #1
   16074:	str	r3, [sp, #12]
   16078:	b	15dfc <__assert_fail@plt+0x4088>
   1607c:	ldrdeq	sl, [r3], -r4
   16080:	ldrdeq	sl, [r3], -ip
   16084:	muleq	r3, r0, r0
   16088:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1608c:	movw	r5, #41776	; 0xa330
   16090:	movt	r5, #3
   16094:	strd	r6, [sp, #8]
   16098:	subs	r7, r1, #0
   1609c:	mov	r6, r0
   160a0:	strd	r8, [sp, #16]
   160a4:	mov	r9, r2
   160a8:	strd	sl, [sp, #24]
   160ac:	mov	sl, r3
   160b0:	ldrb	r3, [r5, #3580]	; 0xdfc
   160b4:	str	lr, [sp, #32]
   160b8:	sub	sp, sp, #20
   160bc:	beq	16144 <__assert_fail@plt+0x43d0>
   160c0:	cmp	r3, #0
   160c4:	ldr	r8, [r0, #4]
   160c8:	bne	16118 <__assert_fail@plt+0x43a4>
   160cc:	ldr	r1, [r6, #8]
   160d0:	eor	r7, r7, #1
   160d4:	mov	r0, r8
   160d8:	mov	r3, #0
   160dc:	stm	sp, {r7, r9}
   160e0:	ldr	r2, [r6, #144]	; 0x90
   160e4:	str	r1, [sp, #8]
   160e8:	ldr	r1, [r5, #3156]	; 0xc54
   160ec:	bl	15d20 <__assert_fail@plt+0x3fac>
   160f0:	mov	r4, r0
   160f4:	bl	157d0 <__assert_fail@plt+0x3a5c>
   160f8:	mov	r0, r4
   160fc:	add	sp, sp, #20
   16100:	ldrd	r4, [sp]
   16104:	ldrd	r6, [sp, #8]
   16108:	ldrd	r8, [sp, #16]
   1610c:	ldrd	sl, [sp, #24]
   16110:	add	sp, sp, #32
   16114:	pop	{pc}		; (ldr pc, [sp], #4)
   16118:	ldrb	r3, [r0, #133]	; 0x85
   1611c:	ldr	r4, [r0, #124]	; 0x7c
   16120:	cmp	r3, #0
   16124:	bne	16264 <__assert_fail@plt+0x44f0>
   16128:	mov	r0, #12
   1612c:	bl	13e44 <__assert_fail@plt+0x20d0>
   16130:	cmp	r0, #0
   16134:	mvneq	r2, #0
   16138:	beq	16168 <__assert_fail@plt+0x43f4>
   1613c:	mov	r4, #96	; 0x60
   16140:	b	161d8 <__assert_fail@plt+0x4464>
   16144:	cmp	r3, #0
   16148:	ldr	r8, [r0]
   1614c:	beq	160cc <__assert_fail@plt+0x4358>
   16150:	ldrb	r2, [r5, #3589]	; 0xe05
   16154:	ldrb	r3, [r0, #133]	; 0x85
   16158:	cmp	r2, #0
   1615c:	bne	162c4 <__assert_fail@plt+0x4550>
   16160:	ldr	r4, [r6, #32]
   16164:	mov	r2, r3
   16168:	ldrb	r3, [r6, #132]	; 0x84
   1616c:	cmp	r3, #0
   16170:	bne	16274 <__assert_fail@plt+0x4500>
   16174:	ldr	r1, [r6, #120]	; 0x78
   16178:	movw	r3, #20560	; 0x5050
   1617c:	movt	r3, #2
   16180:	add	r3, r3, r1, lsl #2
   16184:	ldr	r4, [r3, #64]	; 0x40
   16188:	cmp	r4, #5
   1618c:	beq	162d4 <__assert_fail@plt+0x4560>
   16190:	sub	r3, r4, #7
   16194:	clz	r3, r3
   16198:	lsr	r3, r3, #5
   1619c:	cmp	r2, #0
   161a0:	movne	r3, #0
   161a4:	andeq	r3, r3, #1
   161a8:	cmp	r3, #0
   161ac:	lsleq	r4, r4, #3
   161b0:	beq	161d8 <__assert_fail@plt+0x4464>
   161b4:	ldrb	r3, [r5, #3589]	; 0xe05
   161b8:	cmp	r3, #0
   161bc:	movne	r4, #104	; 0x68
   161c0:	bne	161d8 <__assert_fail@plt+0x4464>
   161c4:	mov	r0, #13
   161c8:	bl	13e44 <__assert_fail@plt+0x20d0>
   161cc:	cmp	r0, #0
   161d0:	movne	r4, #104	; 0x68
   161d4:	moveq	r4, #56	; 0x38
   161d8:	movw	r3, #41424	; 0xa1d0
   161dc:	movt	r3, #3
   161e0:	add	r3, r3, r4
   161e4:	ldr	r4, [r3, #4]
   161e8:	cmp	r4, #0
   161ec:	bne	16204 <__assert_fail@plt+0x4490>
   161f0:	mov	r0, #4
   161f4:	bl	13e44 <__assert_fail@plt+0x20d0>
   161f8:	cmp	r0, #0
   161fc:	beq	160cc <__assert_fail@plt+0x4358>
   16200:	mov	r3, r4
   16204:	ldr	r1, [r6, #8]
   16208:	eor	r7, r7, #1
   1620c:	mov	r0, r8
   16210:	stm	sp, {r7, r9}
   16214:	ldr	r2, [r6, #144]	; 0x90
   16218:	str	r1, [sp, #8]
   1621c:	ldr	r1, [r5, #3156]	; 0xc54
   16220:	bl	15d20 <__assert_fail@plt+0x3fac>
   16224:	mov	r4, r0
   16228:	bl	157d0 <__assert_fail@plt+0x3a5c>
   1622c:	bl	155d4 <__assert_fail@plt+0x3860>
   16230:	ldr	r3, [r5, #3596]	; 0xe0c
   16234:	cmp	r3, #0
   16238:	beq	160f8 <__assert_fail@plt+0x4384>
   1623c:	sub	r2, sl, #1
   16240:	udiv	sl, sl, r3
   16244:	add	r2, r2, r4
   16248:	udiv	r3, r2, r3
   1624c:	cmp	sl, r3
   16250:	beq	160f8 <__assert_fail@plt+0x4384>
   16254:	ldr	r1, [pc, #488]	; 16444 <__assert_fail@plt+0x46d0>
   16258:	sub	r0, r1, #4
   1625c:	bl	15638 <__assert_fail@plt+0x38c4>
   16260:	b	160f8 <__assert_fail@plt+0x4384>
   16264:	ldrb	r3, [r6, #132]	; 0x84
   16268:	mov	r2, #0
   1626c:	cmp	r3, #0
   16270:	beq	16174 <__assert_fail@plt+0x4400>
   16274:	and	r1, r4, #61440	; 0xf000
   16278:	cmp	r1, #32768	; 0x8000
   1627c:	beq	16330 <__assert_fail@plt+0x45bc>
   16280:	cmp	r1, #16384	; 0x4000
   16284:	beq	16394 <__assert_fail@plt+0x4620>
   16288:	cmp	r1, #40960	; 0xa000
   1628c:	beq	163e0 <__assert_fail@plt+0x466c>
   16290:	cmp	r1, #4096	; 0x1000
   16294:	moveq	r4, #64	; 0x40
   16298:	beq	161d8 <__assert_fail@plt+0x4464>
   1629c:	cmp	r1, #49152	; 0xc000
   162a0:	moveq	r4, #72	; 0x48
   162a4:	beq	161d8 <__assert_fail@plt+0x4464>
   162a8:	cmp	r1, #24576	; 0x6000
   162ac:	moveq	r4, #80	; 0x50
   162b0:	beq	161d8 <__assert_fail@plt+0x4464>
   162b4:	cmp	r1, #8192	; 0x2000
   162b8:	moveq	r4, #88	; 0x58
   162bc:	movne	r4, #104	; 0x68
   162c0:	b	161d8 <__assert_fail@plt+0x4464>
   162c4:	cmp	r3, #0
   162c8:	beq	16160 <__assert_fail@plt+0x43ec>
   162cc:	ldr	r4, [r0, #124]	; 0x7c
   162d0:	b	16164 <__assert_fail@plt+0x43f0>
   162d4:	mov	r0, r8
   162d8:	bl	11b94 <strlen@plt>
   162dc:	ldr	r4, [r5, #3592]	; 0xe08
   162e0:	mov	fp, r0
   162e4:	cmp	r4, #0
   162e8:	beq	16320 <__assert_fail@plt+0x45ac>
   162ec:	ldr	r3, [r4]
   162f0:	sub	r0, fp, r3
   162f4:	cmp	fp, r3
   162f8:	mov	r2, r3
   162fc:	add	r0, r8, r0
   16300:	bcc	16314 <__assert_fail@plt+0x45a0>
   16304:	ldr	r1, [r4, #4]
   16308:	bl	1a0f8 <__assert_fail@plt+0x8384>
   1630c:	cmp	r0, #0
   16310:	beq	16328 <__assert_fail@plt+0x45b4>
   16314:	ldr	r4, [r4, #16]
   16318:	cmp	r4, #0
   1631c:	bne	162ec <__assert_fail@plt+0x4578>
   16320:	mov	r4, #40	; 0x28
   16324:	b	161d8 <__assert_fail@plt+0x4464>
   16328:	add	r3, r4, #8
   1632c:	b	161e4 <__assert_fail@plt+0x4470>
   16330:	tst	r4, #2048	; 0x800
   16334:	beq	16350 <__assert_fail@plt+0x45dc>
   16338:	mov	r0, #16
   1633c:	bl	13e44 <__assert_fail@plt+0x20d0>
   16340:	cmp	r0, #0
   16344:	beq	16350 <__assert_fail@plt+0x45dc>
   16348:	mov	r4, #128	; 0x80
   1634c:	b	161d8 <__assert_fail@plt+0x4464>
   16350:	tst	r4, #1024	; 0x400
   16354:	bne	1637c <__assert_fail@plt+0x4608>
   16358:	mov	r0, #21
   1635c:	bl	13e44 <__assert_fail@plt+0x20d0>
   16360:	cmp	r0, #0
   16364:	beq	163e8 <__assert_fail@plt+0x4674>
   16368:	ldrb	r3, [r6, #140]	; 0x8c
   1636c:	cmp	r3, #0
   16370:	beq	163e8 <__assert_fail@plt+0x4674>
   16374:	mov	r4, #168	; 0xa8
   16378:	b	161d8 <__assert_fail@plt+0x4464>
   1637c:	mov	r0, #17
   16380:	bl	13e44 <__assert_fail@plt+0x20d0>
   16384:	cmp	r0, #0
   16388:	beq	16358 <__assert_fail@plt+0x45e4>
   1638c:	mov	r4, #136	; 0x88
   16390:	b	161d8 <__assert_fail@plt+0x4464>
   16394:	movw	r3, #514	; 0x202
   16398:	bics	r3, r3, r4
   1639c:	beq	1642c <__assert_fail@plt+0x46b8>
   163a0:	tst	r4, #2
   163a4:	beq	163bc <__assert_fail@plt+0x4648>
   163a8:	mov	r0, #19
   163ac:	bl	13e44 <__assert_fail@plt+0x20d0>
   163b0:	cmp	r0, #0
   163b4:	movne	r4, #152	; 0x98
   163b8:	bne	161d8 <__assert_fail@plt+0x4464>
   163bc:	tst	r4, #512	; 0x200
   163c0:	moveq	r4, #48	; 0x30
   163c4:	beq	161d8 <__assert_fail@plt+0x4464>
   163c8:	mov	r0, #18
   163cc:	bl	13e44 <__assert_fail@plt+0x20d0>
   163d0:	cmp	r0, #0
   163d4:	movne	r4, #144	; 0x90
   163d8:	moveq	r4, #48	; 0x30
   163dc:	b	161d8 <__assert_fail@plt+0x4464>
   163e0:	mov	r4, #7
   163e4:	b	1619c <__assert_fail@plt+0x4428>
   163e8:	tst	r4, #73	; 0x49
   163ec:	beq	16408 <__assert_fail@plt+0x4694>
   163f0:	mov	r0, #14
   163f4:	bl	13e44 <__assert_fail@plt+0x20d0>
   163f8:	cmp	r0, #0
   163fc:	beq	16408 <__assert_fail@plt+0x4694>
   16400:	mov	r4, #112	; 0x70
   16404:	b	161d8 <__assert_fail@plt+0x4464>
   16408:	ldr	r3, [r6, #36]	; 0x24
   1640c:	cmp	r3, #1
   16410:	bls	162d4 <__assert_fail@plt+0x4560>
   16414:	mov	r0, #22
   16418:	bl	13e44 <__assert_fail@plt+0x20d0>
   1641c:	cmp	r0, #0
   16420:	beq	162d4 <__assert_fail@plt+0x4560>
   16424:	mov	r4, #176	; 0xb0
   16428:	b	161d8 <__assert_fail@plt+0x4464>
   1642c:	mov	r0, #20
   16430:	bl	13e44 <__assert_fail@plt+0x20d0>
   16434:	cmp	r0, #0
   16438:	movne	r4, #160	; 0xa0
   1643c:	bne	161d8 <__assert_fail@plt+0x4464>
   16440:	b	163a0 <__assert_fail@plt+0x462c>
   16444:	andeq	sl, r3, ip, lsl #5
   16448:	strd	r4, [sp, #-12]!
   1644c:	mov	r3, r2
   16450:	mov	r5, r0
   16454:	str	lr, [sp, #8]
   16458:	sub	sp, sp, #8192	; 0x2000
   1645c:	mov	r2, r1
   16460:	sub	sp, sp, #28
   16464:	mov	r1, r0
   16468:	add	r4, sp, #24
   1646c:	sub	ip, r4, #9
   16470:	sub	r0, r4, #4
   16474:	str	r4, [r4, #-8]
   16478:	stm	sp, {r0, ip}
   1647c:	sub	r0, r4, #8
   16480:	bl	15908 <__assert_fail@plt+0x3b94>
   16484:	ldr	r0, [r4, #-8]
   16488:	cmp	r0, r4
   1648c:	cmpne	r0, r5
   16490:	beq	16498 <__assert_fail@plt+0x4724>
   16494:	bl	1b2b4 <__assert_fail@plt+0x9540>
   16498:	ldrb	r0, [r4, #-9]
   1649c:	ldr	r3, [r4, #-4]
   164a0:	add	r0, r0, r3
   164a4:	add	sp, sp, #8192	; 0x2000
   164a8:	add	sp, sp, #28
   164ac:	ldrd	r4, [sp]
   164b0:	add	sp, sp, #8
   164b4:	pop	{pc}		; (ldr pc, [sp], #4)
   164b8:	mov	r2, r0
   164bc:	movw	r3, #41776	; 0xa330
   164c0:	movt	r3, #3
   164c4:	ldr	r0, [r0]
   164c8:	ldr	r2, [r2, #144]	; 0x90
   164cc:	ldr	r1, [r3, #3156]	; 0xc54
   164d0:	b	16448 <__assert_fail@plt+0x46d4>
   164d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   164d8:	mov	r5, r1
   164dc:	ldr	r4, [r0, #148]	; 0x94
   164e0:	strd	r6, [sp, #8]
   164e4:	mov	r6, r0
   164e8:	mov	r7, r2
   164ec:	str	r8, [sp, #16]
   164f0:	str	lr, [sp, #20]
   164f4:	cmp	r4, #0
   164f8:	beq	16548 <__assert_fail@plt+0x47d4>
   164fc:	ldr	r0, [r5, #148]	; 0x94
   16500:	cmp	r0, #0
   16504:	beq	1655c <__assert_fail@plt+0x47e8>
   16508:	subs	r0, r4, r0
   1650c:	bne	16534 <__assert_fail@plt+0x47c0>
   16510:	mov	r3, r7
   16514:	ldr	r1, [r5]
   16518:	ldr	r0, [r6]
   1651c:	ldrd	r4, [sp]
   16520:	ldrd	r6, [sp, #8]
   16524:	ldr	r8, [sp, #16]
   16528:	ldr	lr, [sp, #20]
   1652c:	add	sp, sp, #24
   16530:	bx	r3
   16534:	ldrd	r4, [sp]
   16538:	ldrd	r6, [sp, #8]
   1653c:	ldr	r8, [sp, #16]
   16540:	add	sp, sp, #20
   16544:	pop	{pc}		; (ldr pc, [sp], #4)
   16548:	bl	164b8 <__assert_fail@plt+0x4744>
   1654c:	mov	r4, r0
   16550:	ldr	r0, [r5, #148]	; 0x94
   16554:	cmp	r0, #0
   16558:	bne	16508 <__assert_fail@plt+0x4794>
   1655c:	mov	r0, r5
   16560:	bl	164b8 <__assert_fail@plt+0x4744>
   16564:	b	16508 <__assert_fail@plt+0x4794>
   16568:	mov	r3, r1
   1656c:	movw	r2, #6304	; 0x18a0
   16570:	movt	r2, #1
   16574:	mov	r1, r0
   16578:	mov	r0, r3
   1657c:	b	164d4 <__assert_fail@plt+0x4760>
   16580:	movw	r2, #6304	; 0x18a0
   16584:	movt	r2, #1
   16588:	b	164d4 <__assert_fail@plt+0x4760>
   1658c:	mov	r3, r1
   16590:	movw	r2, #19064	; 0x4a78
   16594:	movt	r2, #1
   16598:	mov	r1, r0
   1659c:	mov	r0, r3
   165a0:	b	164d4 <__assert_fail@plt+0x4760>
   165a4:	movw	r2, #19064	; 0x4a78
   165a8:	movt	r2, #1
   165ac:	b	164d4 <__assert_fail@plt+0x4760>
   165b0:	strd	r4, [sp, #-16]!
   165b4:	movw	r4, #41776	; 0xa330
   165b8:	movt	r4, #3
   165bc:	ldr	ip, [r4, #3104]	; 0xc20
   165c0:	ldr	r3, [r4, #3600]	; 0xe10
   165c4:	str	r6, [sp, #8]
   165c8:	str	lr, [sp, #12]
   165cc:	add	r2, ip, ip, lsr #1
   165d0:	cmp	r2, r3
   165d4:	bhi	16750 <__assert_fail@plt+0x49dc>
   165d8:	cmp	ip, #0
   165dc:	beq	1677c <__assert_fail@plt+0x4a08>
   165e0:	movw	r2, #41776	; 0xa330
   165e4:	movt	r2, #3
   165e8:	ldr	r3, [r2, #3108]	; 0xc24
   165ec:	ldr	r2, [r2, #3604]	; 0xe14
   165f0:	add	r1, r3, ip, lsl #2
   165f4:	str	r2, [r3], #4
   165f8:	cmp	r3, r1
   165fc:	add	r2, r2, #152	; 0x98
   16600:	bne	165f4 <__assert_fail@plt+0x4880>
   16604:	movw	r3, #41776	; 0xa330
   16608:	movt	r3, #3
   1660c:	ldr	r3, [r3, #3100]	; 0xc1c
   16610:	cmp	r3, #2
   16614:	beq	16704 <__assert_fail@plt+0x4990>
   16618:	movw	r2, #41776	; 0xa330
   1661c:	movt	r2, #3
   16620:	ldr	r1, [r2, #3596]	; 0xe0c
   16624:	cmp	r1, #0
   16628:	bne	166ec <__assert_fail@plt+0x4978>
   1662c:	cmp	r3, #6
   16630:	beq	166d0 <__assert_fail@plt+0x495c>
   16634:	ldr	r0, [pc, #372]	; 167b0 <__assert_fail@plt+0x4a3c>
   16638:	bl	118e8 <_setjmp@plt>
   1663c:	subs	lr, r0, #0
   16640:	movw	r3, #41776	; 0xa330
   16644:	movt	r3, #3
   16648:	ldr	ip, [r3, #3100]	; 0xc1c
   1664c:	beq	166e0 <__assert_fail@plt+0x496c>
   16650:	cmp	ip, #4
   16654:	beq	16794 <__assert_fail@plt+0x4a20>
   16658:	ldr	r1, [r3, #3104]	; 0xc20
   1665c:	ldr	r0, [r3, #3108]	; 0xc24
   16660:	cmp	r1, #0
   16664:	beq	16684 <__assert_fail@plt+0x4910>
   16668:	add	lr, r0, r1, lsl #2
   1666c:	ldr	r2, [r3, #3604]	; 0xe14
   16670:	mov	r3, r0
   16674:	str	r2, [r3], #4
   16678:	cmp	lr, r3
   1667c:	add	r2, r2, #152	; 0x98
   16680:	bne	16674 <__assert_fail@plt+0x4900>
   16684:	mov	lr, #1
   16688:	cmp	ip, #5
   1668c:	bne	166a0 <__assert_fail@plt+0x492c>
   16690:	movw	r3, #41776	; 0xa330
   16694:	movt	r3, #3
   16698:	ldr	ip, [r3, #3092]	; 0xc14
   1669c:	add	ip, ip, #5
   166a0:	movw	r2, #41776	; 0xa330
   166a4:	movt	r2, #3
   166a8:	add	ip, lr, ip, lsl #1
   166ac:	ldrb	lr, [r2, #4000]	; 0xfa0
   166b0:	movw	r3, #20560	; 0x5050
   166b4:	movt	r3, #2
   166b8:	ldrb	r2, [r2, #4001]	; 0xfa1
   166bc:	add	ip, lr, ip, lsl #1
   166c0:	add	ip, r2, ip, lsl #1
   166c4:	add	r3, r3, ip, lsl #2
   166c8:	ldr	r2, [r3, #116]	; 0x74
   166cc:	bl	1dfe8 <__assert_fail@plt+0xc274>
   166d0:	ldrd	r4, [sp]
   166d4:	ldr	r6, [sp, #8]
   166d8:	add	sp, sp, #12
   166dc:	pop	{pc}		; (ldr pc, [sp], #4)
   166e0:	ldr	r1, [r3, #3104]	; 0xc20
   166e4:	ldr	r0, [r3, #3108]	; 0xc24
   166e8:	b	16688 <__assert_fail@plt+0x4914>
   166ec:	ldr	r2, [r2, #3088]	; 0xc10
   166f0:	sub	r2, r2, #2
   166f4:	cmp	r2, #1
   166f8:	bhi	1662c <__assert_fail@plt+0x48b8>
   166fc:	cmp	ip, #0
   16700:	beq	1662c <__assert_fail@plt+0x48b8>
   16704:	movw	r6, #41776	; 0xa330
   16708:	movt	r6, #3
   1670c:	mov	r4, #0
   16710:	b	16728 <__assert_fail@plt+0x49b4>
   16714:	ldr	r3, [r6, #3104]	; 0xc20
   16718:	add	r4, r4, #1
   1671c:	str	r0, [r5, #148]	; 0x94
   16720:	cmp	r4, r3
   16724:	bcs	16748 <__assert_fail@plt+0x49d4>
   16728:	ldr	r3, [r6, #3108]	; 0xc24
   1672c:	ldr	r5, [r3, r4, lsl #2]
   16730:	ldr	r0, [r5, #148]	; 0x94
   16734:	cmp	r0, #0
   16738:	bne	16714 <__assert_fail@plt+0x49a0>
   1673c:	mov	r0, r5
   16740:	bl	164b8 <__assert_fail@plt+0x4744>
   16744:	b	16714 <__assert_fail@plt+0x49a0>
   16748:	ldr	r3, [r6, #3100]	; 0xc1c
   1674c:	b	1662c <__assert_fail@plt+0x48b8>
   16750:	ldr	r0, [r4, #3108]	; 0xc24
   16754:	bl	1b2b4 <__assert_fail@plt+0x9540>
   16758:	mov	r1, #12
   1675c:	ldr	r0, [r4, #3104]	; 0xc20
   16760:	bl	23564 <_obstack_memory_used@@Base+0x32cc>
   16764:	ldr	ip, [r4, #3104]	; 0xc20
   16768:	str	r0, [r4, #3108]	; 0xc24
   1676c:	add	r3, ip, ip, lsl #1
   16770:	cmp	ip, #0
   16774:	str	r3, [r4, #3600]	; 0xe10
   16778:	bne	165e0 <__assert_fail@plt+0x486c>
   1677c:	movw	r3, #41776	; 0xa330
   16780:	movt	r3, #3
   16784:	ldr	r3, [r3, #3100]	; 0xc1c
   16788:	cmp	r3, #2
   1678c:	bne	16618 <__assert_fail@plt+0x48a4>
   16790:	b	16634 <__assert_fail@plt+0x48c0>
   16794:	movw	r1, #26640	; 0x6810
   16798:	movt	r1, #2
   1679c:	ldr	r3, [pc, #16]	; 167b4 <__assert_fail@plt+0x4a40>
   167a0:	movw	r0, #26652	; 0x681c
   167a4:	movt	r0, #2
   167a8:	movw	r2, #4102	; 0x1006
   167ac:	bl	11d74 <__assert_fail@plt>
   167b0:	andeq	fp, r3, r8, asr #2
   167b4:	strheq	r5, [r2], -r8
   167b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   167bc:	movw	r5, #41776	; 0xa330
   167c0:	movt	r5, #3
   167c4:	ldrb	r4, [r5, #3084]	; 0xc0c
   167c8:	strd	r6, [sp, #8]
   167cc:	str	r8, [sp, #16]
   167d0:	mov	r8, r0
   167d4:	str	lr, [sp, #20]
   167d8:	sub	sp, sp, #672	; 0x2a0
   167dc:	cmp	r4, #0
   167e0:	beq	16898 <__assert_fail@plt+0x4b24>
   167e4:	ldr	r3, [r5, #3088]	; 0xc10
   167e8:	cmp	r3, #4
   167ec:	beq	16884 <__assert_fail@plt+0x4b10>
   167f0:	ldrb	r3, [r5, #3085]	; 0xc0d
   167f4:	ldr	r4, [r5, #3116]	; 0xc2c
   167f8:	cmp	r3, #0
   167fc:	add	r4, r4, #1
   16800:	beq	16900 <__assert_fail@plt+0x4b8c>
   16804:	ldr	r0, [r5, #3120]	; 0xc30
   16808:	add	r0, r0, #1
   1680c:	add	r4, r4, r0
   16810:	ldrb	r3, [r5, #4016]	; 0xfb0
   16814:	cmp	r3, #0
   16818:	beq	16834 <__assert_fail@plt+0x4ac0>
   1681c:	ldr	r3, [r5, #3088]	; 0xc10
   16820:	cmp	r3, #4
   16824:	beq	16910 <__assert_fail@plt+0x4b9c>
   16828:	ldr	r0, [r5, #3140]	; 0xc44
   1682c:	add	r0, r0, #1
   16830:	add	r4, r4, r0
   16834:	ldr	r0, [r8, #148]	; 0x94
   16838:	cmp	r0, #0
   1683c:	beq	168f4 <__assert_fail@plt+0x4b80>
   16840:	ldr	r3, [r5, #3444]	; 0xd74
   16844:	add	r4, r4, r0
   16848:	cmp	r3, #0
   1684c:	beq	16868 <__assert_fail@plt+0x4af4>
   16850:	ldrb	r0, [r8, #132]	; 0x84
   16854:	ldr	r1, [r8, #32]
   16858:	ldr	r2, [r8, #120]	; 0x78
   1685c:	bl	15214 <__assert_fail@plt+0x34a0>
   16860:	cmp	r0, #0
   16864:	addne	r4, r4, #1
   16868:	mov	r0, r4
   1686c:	add	sp, sp, #672	; 0x2a0
   16870:	ldrd	r4, [sp]
   16874:	ldrd	r6, [sp, #8]
   16878:	ldr	r8, [sp, #16]
   1687c:	add	sp, sp, #20
   16880:	pop	{pc}		; (ldr pc, [sp], #4)
   16884:	add	r2, sp, #20
   16888:	ldrd	r0, [r0, #112]	; 0x70
   1688c:	bl	1d6c0 <__assert_fail@plt+0xb94c>
   16890:	bl	11b94 <strlen@plt>
   16894:	add	r4, r0, #1
   16898:	ldrb	r3, [r5, #3085]	; 0xc0d
   1689c:	cmp	r3, #0
   168a0:	beq	16810 <__assert_fail@plt+0x4a9c>
   168a4:	ldr	r3, [r5, #3088]	; 0xc10
   168a8:	cmp	r3, #4
   168ac:	bne	16804 <__assert_fail@plt+0x4a90>
   168b0:	ldrb	r3, [r8, #132]	; 0x84
   168b4:	cmp	r3, #0
   168b8:	moveq	r0, #2
   168bc:	beq	1680c <__assert_fail@plt+0x4a98>
   168c0:	ldr	r3, [pc, #88]	; 16920 <__assert_fail@plt+0x4bac>
   168c4:	mov	r0, #512	; 0x200
   168c8:	mov	r1, #0
   168cc:	add	r2, sp, #20
   168d0:	strd	r0, [sp]
   168d4:	ldrd	r0, [r8, #80]	; 0x50
   168d8:	ldrd	r6, [r3, #-8]
   168dc:	ldr	r3, [r5, #4004]	; 0xfa4
   168e0:	strd	r6, [sp, #8]
   168e4:	bl	1c630 <__assert_fail@plt+0xa8bc>
   168e8:	bl	11b94 <strlen@plt>
   168ec:	add	r0, r0, #1
   168f0:	b	1680c <__assert_fail@plt+0x4a98>
   168f4:	mov	r0, r8
   168f8:	bl	164b8 <__assert_fail@plt+0x4744>
   168fc:	b	16840 <__assert_fail@plt+0x4acc>
   16900:	ldrb	r3, [r5, #4016]	; 0xfb0
   16904:	cmp	r3, #0
   16908:	bne	16828 <__assert_fail@plt+0x4ab4>
   1690c:	b	16834 <__assert_fail@plt+0x4ac0>
   16910:	ldr	r0, [r8, #128]	; 0x80
   16914:	bl	11b94 <strlen@plt>
   16918:	add	r0, r0, #1
   1691c:	b	16830 <__assert_fail@plt+0x4abc>
   16920:	andeq	fp, r3, r0, ror #5
   16924:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16928:	strd	r6, [sp, #8]
   1692c:	movw	r7, #41776	; 0xa330
   16930:	movt	r7, #3
   16934:	strd	r8, [sp, #16]
   16938:	ldr	r1, [r7, #4020]	; 0xfb4
   1693c:	strd	sl, [sp, #24]
   16940:	mov	fp, r0
   16944:	str	lr, [sp, #32]
   16948:	sub	sp, sp, #12
   1694c:	ldr	r4, [r7, #3104]	; 0xc20
   16950:	cmp	r1, #0
   16954:	ldr	r3, [r7, #4024]	; 0xfb8
   16958:	beq	16bc4 <__assert_fail@plt+0x4e50>
   1695c:	cmp	r1, r4
   16960:	bcc	16b24 <__assert_fail@plt+0x4db0>
   16964:	cmp	r3, r4
   16968:	bcs	16bcc <__assert_fail@plt+0x4e58>
   1696c:	cmp	r4, r1, lsr #1
   16970:	ldr	r0, [r7, #4028]	; 0xfbc
   16974:	bcs	16b44 <__assert_fail@plt+0x4dd0>
   16978:	lsl	r5, r4, #1
   1697c:	mov	r2, #24
   16980:	mov	r1, r4
   16984:	bl	234e0 <_obstack_memory_used@@Base+0x3248>
   16988:	str	r0, [r7, #4028]	; 0xfbc
   1698c:	ldr	r3, [r7, #4024]	; 0xfb8
   16990:	add	r2, r3, #1
   16994:	sub	r3, r5, r3
   16998:	adds	r2, r5, r2
   1699c:	mul	r0, r2, r3
   169a0:	bcs	16bec <__assert_fail@plt+0x4e78>
   169a4:	udiv	r3, r0, r3
   169a8:	cmp	r2, r3
   169ac:	bne	16bec <__assert_fail@plt+0x4e78>
   169b0:	lsr	r0, r0, #1
   169b4:	mov	r1, #4
   169b8:	bl	23564 <_obstack_memory_used@@Base+0x32cc>
   169bc:	ldr	r3, [r7, #4024]	; 0xfb8
   169c0:	cmp	r5, r3
   169c4:	bls	169fc <__assert_fail@plt+0x4c88>
   169c8:	ldr	r2, [r7, #4028]	; 0xfbc
   169cc:	add	ip, r3, r3, lsl #1
   169d0:	add	r1, r5, #1
   169d4:	add	r3, r3, #1
   169d8:	lsl	r1, r1, #2
   169dc:	lsl	r3, r3, #2
   169e0:	add	r2, r2, ip, lsl #2
   169e4:	str	r0, [r2, #8]
   169e8:	add	r0, r0, r3
   169ec:	add	r3, r3, #4
   169f0:	cmp	r1, r3
   169f4:	add	r2, r2, #12
   169f8:	bne	169e4 <__assert_fail@plt+0x4c70>
   169fc:	cmp	r4, #0
   16a00:	str	r5, [r7, #4024]	; 0xfb8
   16a04:	ldr	r9, [r7, #3104]	; 0xc20
   16a08:	beq	16bd8 <__assert_fail@plt+0x4e64>
   16a0c:	mov	r0, #3
   16a10:	mov	ip, #0
   16a14:	ldr	lr, [r7, #4028]	; 0xfbc
   16a18:	mov	r1, r0
   16a1c:	mov	r8, #1
   16a20:	sub	r6, lr, #12
   16a24:	sub	r5, lr, #8
   16a28:	sub	lr, lr, #4
   16a2c:	ldr	r3, [lr, r0, lsl #2]
   16a30:	strb	r8, [r6, r0, lsl #2]
   16a34:	str	r0, [r5, r0, lsl #2]
   16a38:	add	r2, r3, ip, lsl #2
   16a3c:	sub	r3, r3, #4
   16a40:	str	r1, [r3, #4]!
   16a44:	cmp	r2, r3
   16a48:	bne	16a40 <__assert_fail@plt+0x4ccc>
   16a4c:	add	ip, ip, #1
   16a50:	add	r0, r0, #3
   16a54:	cmp	ip, r4
   16a58:	bcc	16a2c <__assert_fail@plt+0x4cb8>
   16a5c:	cmp	r9, #0
   16a60:	beq	16b64 <__assert_fail@plt+0x4df0>
   16a64:	mov	r5, #0
   16a68:	ldr	r3, [r7, #3108]	; 0xc24
   16a6c:	ldr	r0, [r3, r5, lsl #2]
   16a70:	bl	167b8 <__assert_fail@plt+0x4a44>
   16a74:	cmp	r4, #0
   16a78:	ldr	sl, [r7, #3104]	; 0xc20
   16a7c:	beq	16b58 <__assert_fail@plt+0x4de4>
   16a80:	ldr	r3, [r7, #3596]	; 0xe0c
   16a84:	mov	ip, #0
   16a88:	add	r9, r0, #2
   16a8c:	str	r3, [sp, #4]
   16a90:	ldr	r3, [r7, #4028]	; 0xfbc
   16a94:	b	16b00 <__assert_fail@plt+0x4d8c>
   16a98:	add	r2, sl, r1
   16a9c:	sub	r2, r2, #1
   16aa0:	udiv	r2, r2, r1
   16aa4:	udiv	r2, r5, r2
   16aa8:	ldr	r6, [r3, #8]
   16aac:	cmp	r2, ip
   16ab0:	moveq	ip, r0
   16ab4:	movne	ip, r9
   16ab8:	ldr	r8, [r6, r2, lsl #2]
   16abc:	cmp	r8, ip
   16ac0:	bcs	16af0 <__assert_fail@plt+0x4d7c>
   16ac4:	ldr	lr, [r3, #4]
   16ac8:	sub	lr, lr, r8
   16acc:	add	lr, lr, ip
   16ad0:	str	lr, [r3, #4]
   16ad4:	str	ip, [r6, r2, lsl #2]
   16ad8:	ldr	ip, [sp, #4]
   16adc:	ldr	r2, [r3, #4]
   16ae0:	cmp	r2, ip
   16ae4:	movcs	r2, #0
   16ae8:	movcc	r2, #1
   16aec:	strb	r2, [r3]
   16af0:	cmp	r4, r1
   16af4:	mov	ip, r1
   16af8:	add	r3, r3, #12
   16afc:	beq	16b58 <__assert_fail@plt+0x4de4>
   16b00:	ldrb	r2, [r3]
   16b04:	add	r1, ip, #1
   16b08:	cmp	r2, #0
   16b0c:	beq	16af0 <__assert_fail@plt+0x4d7c>
   16b10:	cmp	fp, #0
   16b14:	bne	16a98 <__assert_fail@plt+0x4d24>
   16b18:	udiv	r2, r5, r1
   16b1c:	mls	r2, r1, r2, r5
   16b20:	b	16aa8 <__assert_fail@plt+0x4d34>
   16b24:	cmp	r1, r3
   16b28:	movls	r9, r4
   16b2c:	movls	r4, r1
   16b30:	bls	16a0c <__assert_fail@plt+0x4c98>
   16b34:	mov	r4, r1
   16b38:	ldr	r0, [r7, #4028]	; 0xfbc
   16b3c:	cmp	r4, r1, lsr #1
   16b40:	bcc	16978 <__assert_fail@plt+0x4c04>
   16b44:	mov	r2, #12
   16b48:	bl	234e0 <_obstack_memory_used@@Base+0x3248>
   16b4c:	str	r0, [r7, #4028]	; 0xfbc
   16b50:	ldr	r5, [r7, #4020]	; 0xfb4
   16b54:	b	1698c <__assert_fail@plt+0x4c18>
   16b58:	add	r5, r5, #1
   16b5c:	cmp	r5, sl
   16b60:	bcc	16a68 <__assert_fail@plt+0x4cf4>
   16b64:	cmp	r4, #1
   16b68:	bls	16ba4 <__assert_fail@plt+0x4e30>
   16b6c:	ldr	r3, [r7, #4028]	; 0xfbc
   16b70:	add	r2, r4, r4, lsl #1
   16b74:	add	r3, r3, r2, lsl #2
   16b78:	ldrb	r2, [r3, #-12]
   16b7c:	cmp	r2, #0
   16b80:	beq	16b98 <__assert_fail@plt+0x4e24>
   16b84:	b	16ba4 <__assert_fail@plt+0x4e30>
   16b88:	sub	r3, r3, #12
   16b8c:	ldrb	r2, [r3, #-12]
   16b90:	cmp	r2, #0
   16b94:	bne	16ba4 <__assert_fail@plt+0x4e30>
   16b98:	sub	r4, r4, #1
   16b9c:	cmp	r4, #1
   16ba0:	bne	16b88 <__assert_fail@plt+0x4e14>
   16ba4:	mov	r0, r4
   16ba8:	add	sp, sp, #12
   16bac:	ldrd	r4, [sp]
   16bb0:	ldrd	r6, [sp, #8]
   16bb4:	ldrd	r8, [sp, #16]
   16bb8:	ldrd	sl, [sp, #24]
   16bbc:	add	sp, sp, #32
   16bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   16bc4:	cmp	r3, r4
   16bc8:	bcc	16be4 <__assert_fail@plt+0x4e70>
   16bcc:	cmp	r4, #0
   16bd0:	mov	r9, r4
   16bd4:	bne	16a0c <__assert_fail@plt+0x4c98>
   16bd8:	cmp	r9, #0
   16bdc:	bne	16a64 <__assert_fail@plt+0x4cf0>
   16be0:	b	16ba4 <__assert_fail@plt+0x4e30>
   16be4:	ldr	r0, [r7, #4028]	; 0xfbc
   16be8:	b	16978 <__assert_fail@plt+0x4c04>
   16bec:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   16bf0:	strd	r4, [sp, #-8]!
   16bf4:	mov	ip, r1
   16bf8:	ldrd	r2, [r0, #64]	; 0x40
   16bfc:	ldrd	r4, [r1, #64]	; 0x40
   16c00:	cmp	r2, r4
   16c04:	sbcs	r1, r3, r5
   16c08:	blt	16c2c <__assert_fail@plt+0x4eb8>
   16c0c:	cmp	r3, r5
   16c10:	cmpeq	r2, r4
   16c14:	bne	16c3c <__assert_fail@plt+0x4ec8>
   16c18:	ldr	r1, [r0]
   16c1c:	ldrd	r4, [sp]
   16c20:	add	sp, sp, #8
   16c24:	ldr	r0, [ip]
   16c28:	b	118a0 <strcmp@plt>
   16c2c:	mvn	r0, #0
   16c30:	ldrd	r4, [sp]
   16c34:	add	sp, sp, #8
   16c38:	bx	lr
   16c3c:	cmp	r4, r2
   16c40:	sbcs	r3, r5, r3
   16c44:	ldrd	r4, [sp]
   16c48:	add	sp, sp, #8
   16c4c:	movlt	r0, #1
   16c50:	movge	r0, #0
   16c54:	bx	lr
   16c58:	strd	r4, [sp, #-8]!
   16c5c:	ldrd	r2, [r1, #64]	; 0x40
   16c60:	ldrd	r4, [r0, #64]	; 0x40
   16c64:	cmp	r2, r4
   16c68:	sbcs	ip, r3, r5
   16c6c:	blt	16c90 <__assert_fail@plt+0x4f1c>
   16c70:	cmp	r3, r5
   16c74:	cmpeq	r2, r4
   16c78:	bne	16ca0 <__assert_fail@plt+0x4f2c>
   16c7c:	ldrd	r4, [sp]
   16c80:	add	sp, sp, #8
   16c84:	ldr	r0, [r0]
   16c88:	ldr	r1, [r1]
   16c8c:	b	14a78 <__assert_fail@plt+0x2d04>
   16c90:	mvn	r0, #0
   16c94:	ldrd	r4, [sp]
   16c98:	add	sp, sp, #8
   16c9c:	bx	lr
   16ca0:	cmp	r4, r2
   16ca4:	sbcs	r3, r5, r3
   16ca8:	ldrd	r4, [sp]
   16cac:	add	sp, sp, #8
   16cb0:	movlt	r0, #1
   16cb4:	movge	r0, #0
   16cb8:	bx	lr
   16cbc:	strd	r4, [sp, #-8]!
   16cc0:	ldrd	r2, [r1, #64]	; 0x40
   16cc4:	ldrd	r4, [r0, #64]	; 0x40
   16cc8:	cmp	r2, r4
   16ccc:	sbcs	ip, r3, r5
   16cd0:	blt	16cf4 <__assert_fail@plt+0x4f80>
   16cd4:	cmp	r3, r5
   16cd8:	cmpeq	r2, r4
   16cdc:	bne	16d04 <__assert_fail@plt+0x4f90>
   16ce0:	ldrd	r4, [sp]
   16ce4:	add	sp, sp, #8
   16ce8:	ldr	r0, [r0]
   16cec:	ldr	r1, [r1]
   16cf0:	b	118a0 <strcmp@plt>
   16cf4:	mvn	r0, #0
   16cf8:	ldrd	r4, [sp]
   16cfc:	add	sp, sp, #8
   16d00:	bx	lr
   16d04:	cmp	r4, r2
   16d08:	sbcs	r3, r5, r3
   16d0c:	ldrd	r4, [sp]
   16d10:	add	sp, sp, #8
   16d14:	movlt	r0, #1
   16d18:	movge	r0, #0
   16d1c:	bx	lr
   16d20:	strd	r4, [sp, #-8]!
   16d24:	mov	ip, r1
   16d28:	ldrd	r2, [r0, #64]	; 0x40
   16d2c:	ldrd	r4, [r1, #64]	; 0x40
   16d30:	cmp	r2, r4
   16d34:	sbcs	r1, r3, r5
   16d38:	blt	16d5c <__assert_fail@plt+0x4fe8>
   16d3c:	cmp	r3, r5
   16d40:	cmpeq	r2, r4
   16d44:	bne	16d6c <__assert_fail@plt+0x4ff8>
   16d48:	ldr	r1, [r0]
   16d4c:	ldrd	r4, [sp]
   16d50:	add	sp, sp, #8
   16d54:	ldr	r0, [ip]
   16d58:	b	14a78 <__assert_fail@plt+0x2d04>
   16d5c:	mvn	r0, #0
   16d60:	ldrd	r4, [sp]
   16d64:	add	sp, sp, #8
   16d68:	bx	lr
   16d6c:	cmp	r4, r2
   16d70:	sbcs	r3, r5, r3
   16d74:	ldrd	r4, [sp]
   16d78:	add	sp, sp, #8
   16d7c:	movlt	r0, #1
   16d80:	movge	r0, #0
   16d84:	bx	lr
   16d88:	strd	r4, [sp, #-12]!
   16d8c:	ldr	r3, [r0, #104]	; 0x68
   16d90:	ldr	r5, [r1, #104]	; 0x68
   16d94:	ldr	r4, [r1, #108]	; 0x6c
   16d98:	str	lr, [sp, #8]
   16d9c:	ldr	lr, [r0, #108]	; 0x6c
   16da0:	cmp	r5, r3
   16da4:	movge	ip, #0
   16da8:	movlt	ip, #1
   16dac:	cmp	r5, r3
   16db0:	rsble	ip, ip, #0
   16db4:	rsbgt	ip, ip, #1
   16db8:	cmp	r4, lr
   16dbc:	movge	r3, #0
   16dc0:	movlt	r3, #1
   16dc4:	cmp	r4, lr
   16dc8:	rsble	r3, r3, #0
   16dcc:	rsbgt	r3, r3, #1
   16dd0:	adds	r3, r3, ip, lsl #1
   16dd4:	bne	16df0 <__assert_fail@plt+0x507c>
   16dd8:	ldrd	r4, [sp]
   16ddc:	ldr	r0, [r0]
   16de0:	ldr	r1, [r1]
   16de4:	ldr	lr, [sp, #8]
   16de8:	add	sp, sp, #12
   16dec:	bx	r2
   16df0:	ldrd	r4, [sp]
   16df4:	add	sp, sp, #8
   16df8:	mov	r0, r3
   16dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   16e00:	movw	r2, #19064	; 0x4a78
   16e04:	movt	r2, #1
   16e08:	b	16d88 <__assert_fail@plt+0x5014>
   16e0c:	movw	r2, #6304	; 0x18a0
   16e10:	movt	r2, #1
   16e14:	b	16d88 <__assert_fail@plt+0x5014>
   16e18:	mov	r3, r1
   16e1c:	movw	r2, #19064	; 0x4a78
   16e20:	movt	r2, #1
   16e24:	mov	r1, r0
   16e28:	mov	r0, r3
   16e2c:	b	16d88 <__assert_fail@plt+0x5014>
   16e30:	mov	r3, r1
   16e34:	movw	r2, #6304	; 0x18a0
   16e38:	movt	r2, #1
   16e3c:	mov	r1, r0
   16e40:	mov	r0, r3
   16e44:	b	16d88 <__assert_fail@plt+0x5014>
   16e48:	strd	r4, [sp, #-12]!
   16e4c:	ldr	r3, [r0, #96]	; 0x60
   16e50:	ldr	r5, [r1, #96]	; 0x60
   16e54:	ldr	r4, [r1, #100]	; 0x64
   16e58:	str	lr, [sp, #8]
   16e5c:	ldr	lr, [r0, #100]	; 0x64
   16e60:	cmp	r5, r3
   16e64:	movge	ip, #0
   16e68:	movlt	ip, #1
   16e6c:	cmp	r5, r3
   16e70:	rsble	ip, ip, #0
   16e74:	rsbgt	ip, ip, #1
   16e78:	cmp	r4, lr
   16e7c:	movge	r3, #0
   16e80:	movlt	r3, #1
   16e84:	cmp	r4, lr
   16e88:	rsble	r3, r3, #0
   16e8c:	rsbgt	r3, r3, #1
   16e90:	adds	r3, r3, ip, lsl #1
   16e94:	bne	16eb0 <__assert_fail@plt+0x513c>
   16e98:	ldrd	r4, [sp]
   16e9c:	ldr	r0, [r0]
   16ea0:	ldr	r1, [r1]
   16ea4:	ldr	lr, [sp, #8]
   16ea8:	add	sp, sp, #12
   16eac:	bx	r2
   16eb0:	ldrd	r4, [sp]
   16eb4:	add	sp, sp, #8
   16eb8:	mov	r0, r3
   16ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   16ec0:	movw	r2, #19064	; 0x4a78
   16ec4:	movt	r2, #1
   16ec8:	b	16e48 <__assert_fail@plt+0x50d4>
   16ecc:	movw	r2, #6304	; 0x18a0
   16ed0:	movt	r2, #1
   16ed4:	b	16e48 <__assert_fail@plt+0x50d4>
   16ed8:	mov	r3, r1
   16edc:	movw	r2, #19064	; 0x4a78
   16ee0:	movt	r2, #1
   16ee4:	mov	r1, r0
   16ee8:	mov	r0, r3
   16eec:	b	16e48 <__assert_fail@plt+0x50d4>
   16ef0:	mov	r3, r1
   16ef4:	movw	r2, #6304	; 0x18a0
   16ef8:	movt	r2, #1
   16efc:	mov	r1, r0
   16f00:	mov	r0, r3
   16f04:	b	16e48 <__assert_fail@plt+0x50d4>
   16f08:	strd	r4, [sp, #-12]!
   16f0c:	ldr	r3, [r0, #88]	; 0x58
   16f10:	ldr	r5, [r1, #88]	; 0x58
   16f14:	ldr	r4, [r1, #92]	; 0x5c
   16f18:	str	lr, [sp, #8]
   16f1c:	ldr	lr, [r0, #92]	; 0x5c
   16f20:	cmp	r5, r3
   16f24:	movge	ip, #0
   16f28:	movlt	ip, #1
   16f2c:	cmp	r5, r3
   16f30:	rsble	ip, ip, #0
   16f34:	rsbgt	ip, ip, #1
   16f38:	cmp	r4, lr
   16f3c:	movge	r3, #0
   16f40:	movlt	r3, #1
   16f44:	cmp	r4, lr
   16f48:	rsble	r3, r3, #0
   16f4c:	rsbgt	r3, r3, #1
   16f50:	adds	r3, r3, ip, lsl #1
   16f54:	bne	16f70 <__assert_fail@plt+0x51fc>
   16f58:	ldrd	r4, [sp]
   16f5c:	ldr	r0, [r0]
   16f60:	ldr	r1, [r1]
   16f64:	ldr	lr, [sp, #8]
   16f68:	add	sp, sp, #12
   16f6c:	bx	r2
   16f70:	ldrd	r4, [sp]
   16f74:	add	sp, sp, #8
   16f78:	mov	r0, r3
   16f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f80:	movw	r2, #19064	; 0x4a78
   16f84:	movt	r2, #1
   16f88:	b	16f08 <__assert_fail@plt+0x5194>
   16f8c:	movw	r2, #6304	; 0x18a0
   16f90:	movt	r2, #1
   16f94:	b	16f08 <__assert_fail@plt+0x5194>
   16f98:	mov	r3, r1
   16f9c:	movw	r2, #19064	; 0x4a78
   16fa0:	movt	r2, #1
   16fa4:	mov	r1, r0
   16fa8:	mov	r0, r3
   16fac:	b	16f08 <__assert_fail@plt+0x5194>
   16fb0:	mov	r3, r1
   16fb4:	movw	r2, #6304	; 0x18a0
   16fb8:	movt	r2, #1
   16fbc:	mov	r1, r0
   16fc0:	mov	r0, r3
   16fc4:	b	16f08 <__assert_fail@plt+0x5194>
   16fc8:	strd	r4, [sp, #-12]!
   16fcc:	ldr	r3, [r1, #96]	; 0x60
   16fd0:	ldr	r5, [r0, #96]	; 0x60
   16fd4:	ldr	r4, [r0, #100]	; 0x64
   16fd8:	str	lr, [sp, #8]
   16fdc:	ldr	lr, [r1, #100]	; 0x64
   16fe0:	cmp	r5, r3
   16fe4:	movle	ip, #0
   16fe8:	movgt	ip, #1
   16fec:	cmp	r5, r3
   16ff0:	rsbge	ip, ip, #0
   16ff4:	rsblt	ip, ip, #1
   16ff8:	cmp	r4, lr
   16ffc:	movle	r3, #0
   17000:	movgt	r3, #1
   17004:	cmp	r4, lr
   17008:	rsbge	r3, r3, #0
   1700c:	rsblt	r3, r3, #1
   17010:	adds	r3, r3, ip, lsl #1
   17014:	bne	17030 <__assert_fail@plt+0x52bc>
   17018:	ldrd	r4, [sp]
   1701c:	ldr	r0, [r0]
   17020:	ldr	r1, [r1]
   17024:	ldr	lr, [sp, #8]
   17028:	add	sp, sp, #12
   1702c:	bx	r2
   17030:	ldrd	r4, [sp]
   17034:	add	sp, sp, #8
   17038:	mov	r0, r3
   1703c:	pop	{pc}		; (ldr pc, [sp], #4)
   17040:	movw	r2, #19064	; 0x4a78
   17044:	movt	r2, #1
   17048:	b	16fc8 <__assert_fail@plt+0x5254>
   1704c:	movw	r2, #6304	; 0x18a0
   17050:	movt	r2, #1
   17054:	b	16fc8 <__assert_fail@plt+0x5254>
   17058:	mov	r3, r1
   1705c:	movw	r2, #19064	; 0x4a78
   17060:	movt	r2, #1
   17064:	mov	r1, r0
   17068:	mov	r0, r3
   1706c:	b	16fc8 <__assert_fail@plt+0x5254>
   17070:	mov	r3, r1
   17074:	movw	r2, #6304	; 0x18a0
   17078:	movt	r2, #1
   1707c:	mov	r1, r0
   17080:	mov	r0, r3
   17084:	b	16fc8 <__assert_fail@plt+0x5254>
   17088:	movw	r3, #41776	; 0xa330
   1708c:	movt	r3, #3
   17090:	strd	r4, [sp, #-12]!
   17094:	ldrb	r4, [r3, #3448]	; 0xd78
   17098:	mov	r5, r0
   1709c:	str	lr, [sp, #8]
   170a0:	sub	sp, sp, #20
   170a4:	cmp	r4, #0
   170a8:	beq	170e8 <__assert_fail@plt+0x5374>
   170ac:	mov	ip, #0
   170b0:	movw	r2, #26680	; 0x6838
   170b4:	movt	r2, #2
   170b8:	mvn	r3, #0
   170bc:	mov	r1, ip
   170c0:	mov	r0, ip
   170c4:	str	r2, [sp]
   170c8:	mov	r2, #1
   170cc:	str	r5, [sp, #8]
   170d0:	str	ip, [sp, #12]
   170d4:	bl	11d5c <__snprintf_chk@plt>
   170d8:	add	sp, sp, #20
   170dc:	ldrd	r4, [sp]
   170e0:	add	sp, sp, #8
   170e4:	pop	{pc}		; (ldr pc, [sp], #4)
   170e8:	bl	1d22c <__assert_fail@plt+0xb4b8>
   170ec:	cmp	r0, #0
   170f0:	beq	170ac <__assert_fail@plt+0x5338>
   170f4:	mov	r1, r4
   170f8:	bl	1ddac <__assert_fail@plt+0xc038>
   170fc:	bic	r0, r0, r0, asr #31
   17100:	add	sp, sp, #20
   17104:	ldrd	r4, [sp]
   17108:	add	sp, sp, #8
   1710c:	pop	{pc}		; (ldr pc, [sp], #4)
   17110:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17114:	movw	r4, #41776	; 0xa330
   17118:	movt	r4, #3
   1711c:	strd	r6, [sp, #8]
   17120:	mov	r5, r0
   17124:	strd	r8, [sp, #16]
   17128:	mov	r8, r1
   1712c:	str	lr, [sp, #24]
   17130:	sub	sp, sp, #676	; 0x2a4
   17134:	bl	15894 <__assert_fail@plt+0x3b20>
   17138:	ldrb	r3, [r4, #3084]	; 0xc0c
   1713c:	cmp	r3, #0
   17140:	beq	1717c <__assert_fail@plt+0x5408>
   17144:	ldr	r3, [r4, #3088]	; 0xc10
   17148:	cmp	r3, #4
   1714c:	ldrb	r3, [r5, #132]	; 0x84
   17150:	moveq	r6, #0
   17154:	ldrne	r6, [r4, #3116]	; 0xc2c
   17158:	cmp	r3, #0
   1715c:	bne	17234 <__assert_fail@plt+0x54c0>
   17160:	movw	r3, #26608	; 0x67f0
   17164:	movt	r3, #2
   17168:	movw	r1, #26688	; 0x6840
   1716c:	movt	r1, #2
   17170:	mov	r2, r6
   17174:	mov	r0, #1
   17178:	bl	11bf4 <__printf_chk@plt>
   1717c:	ldrb	r3, [r4, #3085]	; 0xc0d
   17180:	cmp	r3, #0
   17184:	beq	171c0 <__assert_fail@plt+0x544c>
   17188:	ldr	r3, [r4, #3088]	; 0xc10
   1718c:	cmp	r3, #4
   17190:	ldrb	r3, [r5, #132]	; 0x84
   17194:	moveq	r9, #0
   17198:	ldrne	r9, [r4, #3120]	; 0xc30
   1719c:	cmp	r3, #0
   171a0:	movweq	r3, #26608	; 0x67f0
   171a4:	movteq	r3, #2
   171a8:	bne	17268 <__assert_fail@plt+0x54f4>
   171ac:	movw	r1, #26688	; 0x6840
   171b0:	movt	r1, #2
   171b4:	mov	r2, r9
   171b8:	mov	r0, #1
   171bc:	bl	11bf4 <__printf_chk@plt>
   171c0:	ldrb	r3, [r4, #4016]	; 0xfb0
   171c4:	cmp	r3, #0
   171c8:	bne	1720c <__assert_fail@plt+0x5498>
   171cc:	mov	r2, #0
   171d0:	mov	r3, r8
   171d4:	mov	r1, r2
   171d8:	mov	r0, r5
   171dc:	bl	16088 <__assert_fail@plt+0x4314>
   171e0:	ldr	r3, [r4, #3444]	; 0xd74
   171e4:	mov	r6, r0
   171e8:	cmp	r3, #0
   171ec:	bne	17250 <__assert_fail@plt+0x54dc>
   171f0:	mov	r0, r6
   171f4:	add	sp, sp, #676	; 0x2a4
   171f8:	ldrd	r4, [sp]
   171fc:	ldrd	r6, [sp, #8]
   17200:	ldrd	r8, [sp, #16]
   17204:	add	sp, sp, #24
   17208:	pop	{pc}		; (ldr pc, [sp], #4)
   1720c:	ldr	r3, [r4, #3088]	; 0xc10
   17210:	movw	r1, #26688	; 0x6840
   17214:	movt	r1, #2
   17218:	mov	r0, #1
   1721c:	cmp	r3, #4
   17220:	ldr	r3, [r5, #128]	; 0x80
   17224:	moveq	r2, #0
   17228:	ldrne	r2, [r4, #3140]	; 0xc44
   1722c:	bl	11bf4 <__printf_chk@plt>
   17230:	b	171cc <__assert_fail@plt+0x5458>
   17234:	ldrd	r0, [r5, #112]	; 0x70
   17238:	orrs	r3, r0, r1
   1723c:	beq	17160 <__assert_fail@plt+0x53ec>
   17240:	add	r2, sp, #20
   17244:	bl	1d6c0 <__assert_fail@plt+0xb94c>
   17248:	mov	r3, r0
   1724c:	b	17168 <__assert_fail@plt+0x53f4>
   17250:	ldrb	r0, [r5, #132]	; 0x84
   17254:	ldr	r1, [r5, #32]
   17258:	ldr	r2, [r5, #120]	; 0x78
   1725c:	bl	1530c <__assert_fail@plt+0x3598>
   17260:	add	r6, r6, r0
   17264:	b	171f0 <__assert_fail@plt+0x547c>
   17268:	ldr	r3, [pc, #40]	; 17298 <__assert_fail@plt+0x5524>
   1726c:	mov	r0, #512	; 0x200
   17270:	mov	r1, #0
   17274:	add	r2, sp, #20
   17278:	strd	r0, [sp]
   1727c:	ldrd	r0, [r5, #80]	; 0x50
   17280:	ldrd	r6, [r3, #-8]
   17284:	ldr	r3, [r4, #4004]	; 0xfa4
   17288:	strd	r6, [sp, #8]
   1728c:	bl	1c630 <__assert_fail@plt+0xa8bc>
   17290:	mov	r3, r0
   17294:	b	171ac <__assert_fail@plt+0x5438>
   17298:	andeq	fp, r3, r0, ror #5
   1729c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   172a0:	movw	r5, #41776	; 0xa330
   172a4:	movt	r5, #3
   172a8:	ldr	r3, [r5, #3104]	; 0xc20
   172ac:	strd	r6, [sp, #8]
   172b0:	strd	r8, [sp, #16]
   172b4:	strd	sl, [sp, #24]
   172b8:	str	lr, [sp, #32]
   172bc:	sub	sp, sp, #12
   172c0:	cmp	r3, #0
   172c4:	beq	173dc <__assert_fail@plt+0x5668>
   172c8:	mov	r8, #0
   172cc:	movw	fp, #41424	; 0xa1d0
   172d0:	movt	fp, #3
   172d4:	movw	r9, #41764	; 0xa324
   172d8:	movt	r9, #3
   172dc:	mov	sl, r0
   172e0:	mov	r4, r8
   172e4:	b	17318 <__assert_fail@plt+0x55a4>
   172e8:	cmp	r4, #0
   172ec:	addne	r8, r8, #2
   172f0:	movne	r6, r8
   172f4:	bne	17374 <__assert_fail@plt+0x5600>
   172f8:	mov	r6, r8
   172fc:	mov	r1, r6
   17300:	mov	r0, r7
   17304:	bl	17110 <__assert_fail@plt+0x539c>
   17308:	ldr	r3, [r5, #3104]	; 0xc20
   1730c:	add	r4, r4, #1
   17310:	cmp	r3, r4
   17314:	bls	173ec <__assert_fail@plt+0x5678>
   17318:	ldr	r3, [r5, #3108]	; 0xc24
   1731c:	ldr	r2, [r5, #3596]	; 0xe0c
   17320:	ldr	r7, [r3, r4, lsl #2]
   17324:	cmp	r2, #0
   17328:	beq	172e8 <__assert_fail@plt+0x5574>
   1732c:	mov	r0, r7
   17330:	bl	167b8 <__assert_fail@plt+0x4a44>
   17334:	cmp	r4, #0
   17338:	moveq	r6, r8
   1733c:	addeq	r8, r0, r8
   17340:	beq	172fc <__assert_fail@plt+0x5588>
   17344:	ldr	r3, [r5, #3596]	; 0xe0c
   17348:	add	r6, r8, #2
   1734c:	add	r2, r0, r6
   17350:	cmp	r3, #0
   17354:	beq	17370 <__assert_fail@plt+0x55fc>
   17358:	cmp	r3, r2
   1735c:	bls	173c8 <__assert_fail@plt+0x5654>
   17360:	mvn	r3, #2
   17364:	sub	r3, r3, r0
   17368:	cmp	r3, r8
   1736c:	bcc	173c8 <__assert_fail@plt+0x5654>
   17370:	mov	r8, r2
   17374:	mov	r2, #32
   17378:	mov	r3, r2
   1737c:	ldr	r0, [r9]
   17380:	ldr	r1, [r0, #20]
   17384:	ldr	ip, [r0, #24]
   17388:	cmp	r1, ip
   1738c:	addcc	ip, r1, #1
   17390:	strcc	ip, [r0, #20]
   17394:	strbcc	sl, [r1]
   17398:	bcs	1742c <__assert_fail@plt+0x56b8>
   1739c:	ldr	r0, [r9]
   173a0:	ldr	r1, [r0, #20]
   173a4:	ldr	ip, [r0, #24]
   173a8:	cmp	r1, ip
   173ac:	addcc	r2, r1, #1
   173b0:	strcc	r2, [r0, #20]
   173b4:	strbcc	r3, [r1]
   173b8:	bcc	172fc <__assert_fail@plt+0x5588>
   173bc:	mov	r1, r2
   173c0:	bl	11c48 <__overflow@plt>
   173c4:	b	172fc <__assert_fail@plt+0x5588>
   173c8:	ldrb	r3, [fp, #210]	; 0xd2
   173cc:	mov	r8, r0
   173d0:	mov	r6, #0
   173d4:	mov	r2, r3
   173d8:	b	1737c <__assert_fail@plt+0x5608>
   173dc:	movw	fp, #41424	; 0xa1d0
   173e0:	movt	fp, #3
   173e4:	movw	r9, #41764	; 0xa324
   173e8:	movt	r9, #3
   173ec:	ldr	r0, [r9]
   173f0:	ldrb	r1, [fp, #210]	; 0xd2
   173f4:	ldr	r3, [r0, #20]
   173f8:	ldr	r2, [r0, #24]
   173fc:	cmp	r3, r2
   17400:	bcs	17448 <__assert_fail@plt+0x56d4>
   17404:	add	r2, r3, #1
   17408:	str	r2, [r0, #20]
   1740c:	strb	r1, [r3]
   17410:	add	sp, sp, #12
   17414:	ldrd	r4, [sp]
   17418:	ldrd	r6, [sp, #8]
   1741c:	ldrd	r8, [sp, #16]
   17420:	ldrd	sl, [sp, #24]
   17424:	add	sp, sp, #32
   17428:	pop	{pc}		; (ldr pc, [sp], #4)
   1742c:	mov	r1, sl
   17430:	str	r3, [sp]
   17434:	str	r2, [sp, #4]
   17438:	bl	11c48 <__overflow@plt>
   1743c:	ldr	r3, [sp]
   17440:	ldr	r2, [sp, #4]
   17444:	b	1739c <__assert_fail@plt+0x5628>
   17448:	add	sp, sp, #12
   1744c:	ldrd	r4, [sp]
   17450:	ldrd	r6, [sp, #8]
   17454:	ldrd	r8, [sp, #16]
   17458:	ldrd	sl, [sp, #24]
   1745c:	ldr	lr, [sp, #32]
   17460:	add	sp, sp, #36	; 0x24
   17464:	b	11c48 <__overflow@plt>
   17468:	ldrb	r2, [r0, #132]	; 0x84
   1746c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17470:	strd	r6, [sp, #8]
   17474:	mov	r7, r0
   17478:	strd	r8, [sp, #16]
   1747c:	strd	sl, [sp, #24]
   17480:	cmp	r2, #0
   17484:	str	lr, [sp, #32]
   17488:	sub	sp, sp, #4736	; 0x1280
   1748c:	sub	sp, sp, #60	; 0x3c
   17490:	beq	17500 <__assert_fail@plt+0x578c>
   17494:	add	sl, sp, #56	; 0x38
   17498:	add	r0, r0, #16
   1749c:	sub	r1, sl, #12
   174a0:	bl	1acf4 <__assert_fail@plt+0x8f80>
   174a4:	movw	r6, #41776	; 0xa330
   174a8:	movt	r6, #3
   174ac:	ldrb	r3, [r6, #3113]	; 0xc29
   174b0:	cmp	r3, #0
   174b4:	beq	174f8 <__assert_fail@plt+0x5784>
   174b8:	ldr	r3, [r7, #136]	; 0x88
   174bc:	cmp	r3, #1
   174c0:	moveq	r3, #46	; 0x2e
   174c4:	strbeq	r3, [sp, #54]	; 0x36
   174c8:	beq	174d4 <__assert_fail@plt+0x5760>
   174cc:	cmp	r3, #2
   174d0:	beq	174f4 <__assert_fail@plt+0x5780>
   174d4:	ldr	r3, [r6, #3092]	; 0xc14
   174d8:	cmp	r3, #3
   174dc:	ldrls	pc, [pc, r3, lsl #2]
   174e0:	b	17d18 <__assert_fail@plt+0x5fa4>
   174e4:	andeq	r7, r1, ip, lsl #16
   174e8:	andeq	r7, r1, ip, lsr #16
   174ec:	andeq	r7, r1, ip, ror #15
   174f0:	andeq	r7, r1, r8, lsr r5
   174f4:	mov	r3, #43	; 0x2b
   174f8:	strb	r3, [sp, #54]	; 0x36
   174fc:	b	174d4 <__assert_fail@plt+0x5760>
   17500:	ldr	ip, [r0, #120]	; 0x78
   17504:	movw	r3, #20560	; 0x5050
   17508:	movt	r3, #2
   1750c:	add	sl, sp, #56	; 0x38
   17510:	movw	r1, #16191	; 0x3f3f
   17514:	movt	r1, #16191	; 0x3f3f
   17518:	add	r3, r3, ip
   1751c:	ldrb	r3, [r3, #404]	; 0x194
   17520:	strb	r3, [sp, #44]	; 0x2c
   17524:	str	r1, [sl, #-11]
   17528:	str	r1, [sl, #-7]
   1752c:	strh	r1, [sl, #-3]
   17530:	strb	r2, [sp, #55]	; 0x37
   17534:	b	174a4 <__assert_fail@plt+0x5730>
   17538:	ldr	r3, [r7, #96]	; 0x60
   1753c:	add	fp, sp, #696	; 0x2b8
   17540:	ldr	r2, [r7, #100]	; 0x64
   17544:	str	r3, [fp, #-660]	; 0xfffffd6c
   17548:	and	r3, r3, r2
   1754c:	str	r2, [fp, #-656]	; 0xfffffd70
   17550:	adds	r3, r3, #1
   17554:	movne	r3, #1
   17558:	str	r3, [sp, #24]
   1755c:	ldrb	r2, [r6, #3084]	; 0xc0c
   17560:	ldrb	r3, [r7, #132]	; 0x84
   17564:	cmp	r2, #0
   17568:	addeq	r9, sp, #1136	; 0x470
   1756c:	addeq	r9, r9, #12
   17570:	streq	r9, [sp, #20]
   17574:	bne	17858 <__assert_fail@plt+0x5ae4>
   17578:	ldrb	r2, [r6, #3085]	; 0xc0d
   1757c:	cmp	r2, #0
   17580:	beq	175f0 <__assert_fail@plt+0x587c>
   17584:	cmp	r3, #0
   17588:	movweq	r5, #26608	; 0x67f0
   1758c:	movteq	r5, #2
   17590:	bne	17c5c <__assert_fail@plt+0x5ee8>
   17594:	ldr	r8, [r6, #3120]	; 0xc30
   17598:	mov	r1, #0
   1759c:	mov	r0, r5
   175a0:	bl	1ddac <__assert_fail@plt+0xc038>
   175a4:	sub	r0, r8, r0
   175a8:	cmp	r0, #0
   175ac:	ble	17ca0 <__assert_fail@plt+0x5f2c>
   175b0:	ldr	r4, [sp, #20]
   175b4:	mov	r3, #32
   175b8:	add	r0, r4, r0
   175bc:	strb	r3, [r4], #1
   175c0:	cmp	r4, r0
   175c4:	bne	175bc <__assert_fail@plt+0x5848>
   175c8:	sub	r5, r5, #1
   175cc:	mov	r4, r0
   175d0:	ldrb	r3, [r5, #1]!
   175d4:	cmp	r3, #0
   175d8:	strb	r3, [r4], #1
   175dc:	bne	175d0 <__assert_fail@plt+0x585c>
   175e0:	mov	r3, #32
   175e4:	str	r4, [sp, #20]
   175e8:	strb	r3, [r4, #-1]
   175ec:	ldrb	r3, [r7, #132]	; 0x84
   175f0:	cmp	r3, #0
   175f4:	movweq	ip, #26608	; 0x67f0
   175f8:	ldr	r5, [r6, #3124]	; 0xc34
   175fc:	movteq	ip, #2
   17600:	bne	178d4 <__assert_fail@plt+0x5b60>
   17604:	ldr	r4, [sp, #20]
   17608:	sub	r1, sl, #12
   1760c:	movw	r3, #26696	; 0x6848
   17610:	movt	r3, #2
   17614:	mvn	r2, #0
   17618:	stm	sp, {r1, r5, ip}
   1761c:	mov	r1, #1
   17620:	mov	r0, r4
   17624:	bl	11bc4 <__sprintf_chk@plt>
   17628:	ldrb	r3, [r6, #3588]	; 0xe04
   1762c:	add	r4, r4, r0
   17630:	cmp	r3, #0
   17634:	bne	178c0 <__assert_fail@plt+0x5b4c>
   17638:	movw	r8, #41424	; 0xa1d0
   1763c:	movt	r8, #3
   17640:	ldrb	r3, [r8, #204]	; 0xcc
   17644:	cmp	r3, #0
   17648:	bne	17664 <__assert_fail@plt+0x58f0>
   1764c:	ldrb	r3, [r8, #205]	; 0xcd
   17650:	cmp	r3, #0
   17654:	bne	17664 <__assert_fail@plt+0x58f0>
   17658:	ldrb	r3, [r6, #3096]	; 0xc18
   1765c:	cmp	r3, #0
   17660:	beq	17a50 <__assert_fail@plt+0x5cdc>
   17664:	sub	r1, r4, r9
   17668:	mov	r0, r9
   1766c:	bl	15420 <__assert_fail@plt+0x36ac>
   17670:	ldrb	r3, [r8, #204]	; 0xcc
   17674:	cmp	r3, #0
   17678:	bne	1794c <__assert_fail@plt+0x5bd8>
   1767c:	ldrb	r3, [r8, #205]	; 0xcd
   17680:	cmp	r3, #0
   17684:	bne	17920 <__assert_fail@plt+0x5bac>
   17688:	ldrb	r3, [r6, #3096]	; 0xc18
   1768c:	cmp	r3, #0
   17690:	bne	1790c <__assert_fail@plt+0x5b98>
   17694:	ldrb	r3, [r6, #4016]	; 0xfb0
   17698:	cmp	r3, #0
   1769c:	moveq	r4, r9
   176a0:	bne	178ec <__assert_fail@plt+0x5b78>
   176a4:	ldrb	r3, [r7, #132]	; 0x84
   176a8:	cmp	r3, #0
   176ac:	beq	1784c <__assert_fail@plt+0x5ad8>
   176b0:	ldr	r3, [r7, #32]
   176b4:	and	r3, r3, #45056	; 0xb000
   176b8:	cmp	r3, #8192	; 0x2000
   176bc:	beq	17ba8 <__assert_fail@plt+0x5e34>
   176c0:	mov	r0, #1
   176c4:	mov	r1, #0
   176c8:	ldr	r3, [r6, #4032]	; 0xfc0
   176cc:	add	r2, sp, #144	; 0x90
   176d0:	strd	r0, [sp]
   176d4:	ldrd	r0, [r8, #216]	; 0xd8
   176d8:	strd	r0, [sp, #8]
   176dc:	ldrd	r0, [r7, #64]	; 0x40
   176e0:	bl	1c630 <__assert_fail@plt+0xa8bc>
   176e4:	mov	r2, r0
   176e8:	ldr	r5, [r6, #3152]	; 0xc50
   176ec:	mov	r0, r2
   176f0:	mov	r1, #0
   176f4:	str	r2, [sp, #20]
   176f8:	bl	1ddac <__assert_fail@plt+0xc038>
   176fc:	ldr	r2, [sp, #20]
   17700:	sub	r5, r5, r0
   17704:	cmp	r5, #0
   17708:	ble	17c8c <__assert_fail@plt+0x5f18>
   1770c:	add	r5, r4, r5
   17710:	mov	r3, #32
   17714:	strb	r3, [r4], #1
   17718:	cmp	r4, r5
   1771c:	bne	17714 <__assert_fail@plt+0x59a0>
   17720:	sub	r2, r2, #1
   17724:	ldrb	r3, [r2, #1]!
   17728:	cmp	r3, #0
   1772c:	strb	r3, [r5], #1
   17730:	bne	17724 <__assert_fail@plt+0x59b0>
   17734:	mov	r3, #32
   17738:	strb	r3, [r5, #-1]
   1773c:	mov	r3, #1
   17740:	ldr	r2, [sp, #24]
   17744:	strb	r3, [r5]
   17748:	ldrb	r3, [r7, #132]	; 0x84
   1774c:	tst	r2, r3
   17750:	bne	17a84 <__assert_fail@plt+0x5d10>
   17754:	ldr	r4, [r8, #224]	; 0xe0
   17758:	cmp	r4, #0
   1775c:	bge	17960 <__assert_fail@plt+0x5bec>
   17760:	mov	r3, #0
   17764:	sub	r1, sl, #24
   17768:	ldr	r0, [r6, #4036]	; 0xfc4
   1776c:	add	r2, sp, #100	; 0x64
   17770:	str	r3, [fp, #-664]	; 0xfffffd68
   17774:	bl	22c8c <_obstack_memory_used@@Base+0x29f4>
   17778:	cmp	r0, #0
   1777c:	beq	177bc <__assert_fail@plt+0x5a48>
   17780:	ldrb	r2, [r6, #3076]	; 0xc04
   17784:	mov	r4, #0
   17788:	add	r0, sp, #144	; 0x90
   1778c:	ldr	r3, [r6, #4036]	; 0xfc4
   17790:	cmp	r2, #0
   17794:	ldrne	r1, [fp, #-580]	; 0xfffffdbc
   17798:	ldrne	r2, [pc, #1404]	; 17d1c <__assert_fail@plt+0x5fa8>
   1779c:	ldreq	r2, [r8, #196]	; 0xc4
   177a0:	stm	sp, {r3, r4}
   177a4:	add	r3, sp, #100	; 0x64
   177a8:	addne	r2, r2, r1, lsl #7
   177ac:	movw	r1, #1001	; 0x3e9
   177b0:	bl	1fea0 <__assert_fail@plt+0xe12c>
   177b4:	subs	r1, r0, #0
   177b8:	bne	17cb8 <__assert_fail@plt+0x5f44>
   177bc:	ldr	r4, [r8, #224]	; 0xe0
   177c0:	cmp	r4, #0
   177c4:	blt	17ca8 <__assert_fail@plt+0x5f34>
   177c8:	ldrb	r3, [r7, #132]	; 0x84
   177cc:	ldr	r2, [sp, #24]
   177d0:	tst	r2, r3
   177d4:	beq	17960 <__assert_fail@plt+0x5bec>
   177d8:	ldr	r0, [fp, #-660]	; 0xfffffd6c
   177dc:	add	r2, sp, #144	; 0x90
   177e0:	asr	r1, r0, #31
   177e4:	bl	1d5e0 <__assert_fail@plt+0xb86c>
   177e8:	b	17968 <__assert_fail@plt+0x5bf4>
   177ec:	mov	r3, #1
   177f0:	ldr	r2, [r7, #92]	; 0x5c
   177f4:	add	fp, sp, #696	; 0x2b8
   177f8:	str	r3, [sp, #24]
   177fc:	ldr	r3, [r7, #88]	; 0x58
   17800:	str	r3, [fp, #-660]	; 0xfffffd6c
   17804:	str	r2, [fp, #-656]	; 0xfffffd70
   17808:	b	1755c <__assert_fail@plt+0x57e8>
   1780c:	mov	r3, #1
   17810:	ldr	r2, [r7, #100]	; 0x64
   17814:	add	fp, sp, #696	; 0x2b8
   17818:	str	r3, [sp, #24]
   1781c:	ldr	r3, [r7, #96]	; 0x60
   17820:	str	r3, [fp, #-660]	; 0xfffffd6c
   17824:	str	r2, [fp, #-656]	; 0xfffffd70
   17828:	b	1755c <__assert_fail@plt+0x57e8>
   1782c:	mov	r3, #1
   17830:	ldr	r2, [r7, #108]	; 0x6c
   17834:	add	fp, sp, #696	; 0x2b8
   17838:	str	r3, [sp, #24]
   1783c:	ldr	r3, [r7, #104]	; 0x68
   17840:	str	r3, [fp, #-660]	; 0xfffffd6c
   17844:	str	r2, [fp, #-656]	; 0xfffffd70
   17848:	b	1755c <__assert_fail@plt+0x57e8>
   1784c:	movw	r2, #26608	; 0x67f0
   17850:	movt	r2, #2
   17854:	b	176e8 <__assert_fail@plt+0x5974>
   17858:	cmp	r3, #0
   1785c:	ldr	r4, [r6, #3116]	; 0xc2c
   17860:	beq	17880 <__assert_fail@plt+0x5b0c>
   17864:	ldrd	r0, [r7, #112]	; 0x70
   17868:	orrs	r3, r0, r1
   1786c:	beq	17880 <__assert_fail@plt+0x5b0c>
   17870:	add	r2, sp, #144	; 0x90
   17874:	bl	1d6c0 <__assert_fail@plt+0xb94c>
   17878:	mov	r1, r0
   1787c:	b	17888 <__assert_fail@plt+0x5b14>
   17880:	movw	r1, #26608	; 0x67f0
   17884:	movt	r1, #2
   17888:	add	r9, sp, #1136	; 0x470
   1788c:	movw	r3, #26688	; 0x6840
   17890:	movt	r3, #2
   17894:	add	r9, r9, #12
   17898:	str	r4, [sp]
   1789c:	mov	r0, r9
   178a0:	movw	r2, #3643	; 0xe3b
   178a4:	str	r1, [sp, #4]
   178a8:	mov	r1, #1
   178ac:	bl	11bc4 <__sprintf_chk@plt>
   178b0:	add	r3, r9, r0
   178b4:	str	r3, [sp, #20]
   178b8:	ldrb	r3, [r7, #132]	; 0x84
   178bc:	b	17578 <__assert_fail@plt+0x5804>
   178c0:	movw	r0, #26704	; 0x6850
   178c4:	movt	r0, #2
   178c8:	mov	r1, #2
   178cc:	bl	15420 <__assert_fail@plt+0x36ac>
   178d0:	b	17638 <__assert_fail@plt+0x58c4>
   178d4:	add	r2, sp, #144	; 0x90
   178d8:	mov	r1, #0
   178dc:	ldr	r0, [r7, #36]	; 0x24
   178e0:	bl	1d6c0 <__assert_fail@plt+0xb94c>
   178e4:	mov	ip, r0
   178e8:	b	17604 <__assert_fail@plt+0x5890>
   178ec:	ldr	r1, [r6, #3140]	; 0xc44
   178f0:	mov	r2, #0
   178f4:	mov	r3, #0
   178f8:	mov	r4, r9
   178fc:	ldr	r0, [r7, #128]	; 0x80
   17900:	str	r1, [sp]
   17904:	bl	15470 <__assert_fail@plt+0x36fc>
   17908:	b	176a4 <__assert_fail@plt+0x5930>
   1790c:	ldrb	r2, [r7, #132]	; 0x84
   17910:	ldr	r0, [r7, #40]	; 0x28
   17914:	ldr	r1, [r6, #3136]	; 0xc40
   17918:	bl	15518 <__assert_fail@plt+0x37a4>
   1791c:	b	17694 <__assert_fail@plt+0x5920>
   17920:	ldrb	r3, [r7, #132]	; 0x84
   17924:	ldr	r2, [r7, #44]	; 0x2c
   17928:	ldr	r4, [r6, #3132]	; 0xc3c
   1792c:	cmp	r3, #0
   17930:	movweq	r0, #26608	; 0x67f0
   17934:	movteq	r0, #2
   17938:	bne	17a60 <__assert_fail@plt+0x5cec>
   1793c:	mov	r3, #0
   17940:	str	r4, [sp]
   17944:	bl	15470 <__assert_fail@plt+0x36fc>
   17948:	b	17688 <__assert_fail@plt+0x5914>
   1794c:	ldrb	r2, [r7, #132]	; 0x84
   17950:	ldr	r0, [r7, #40]	; 0x28
   17954:	ldr	r1, [r6, #3128]	; 0xc38
   17958:	bl	15518 <__assert_fail@plt+0x37a4>
   1795c:	b	1767c <__assert_fail@plt+0x5908>
   17960:	movw	r0, #26608	; 0x67f0
   17964:	movt	r0, #2
   17968:	movw	r3, #26688	; 0x6840
   1796c:	movt	r3, #2
   17970:	str	r4, [sp]
   17974:	mvn	r2, #0
   17978:	mov	r1, #1
   1797c:	str	r0, [sp, #4]
   17980:	mov	r0, r5
   17984:	bl	11bc4 <__sprintf_chk@plt>
   17988:	add	r5, r5, r0
   1798c:	sub	r5, r5, r9
   17990:	mov	r0, r9
   17994:	mov	r1, r5
   17998:	bl	15420 <__assert_fail@plt+0x36ac>
   1799c:	ldr	r2, [pc, #892]	; 17d20 <__assert_fail@plt+0x5fac>
   179a0:	mov	r3, r5
   179a4:	mov	r1, #0
   179a8:	mov	r0, r7
   179ac:	bl	16088 <__assert_fail@plt+0x4314>
   179b0:	ldr	r2, [r7, #120]	; 0x78
   179b4:	mov	r4, r0
   179b8:	cmp	r2, #6
   179bc:	beq	179ec <__assert_fail@plt+0x5c78>
   179c0:	ldr	r3, [r6, #3444]	; 0xd74
   179c4:	cmp	r3, #0
   179c8:	bne	17a40 <__assert_fail@plt+0x5ccc>
   179cc:	add	sp, sp, #4736	; 0x1280
   179d0:	add	sp, sp, #60	; 0x3c
   179d4:	ldrd	r4, [sp]
   179d8:	ldrd	r6, [sp, #8]
   179dc:	ldrd	r8, [sp, #16]
   179e0:	ldrd	sl, [sp, #24]
   179e4:	add	sp, sp, #32
   179e8:	pop	{pc}		; (ldr pc, [sp], #4)
   179ec:	ldr	r3, [r7, #4]
   179f0:	cmp	r3, #0
   179f4:	beq	179cc <__assert_fail@plt+0x5c58>
   179f8:	mov	r1, #4
   179fc:	movw	r0, #26720	; 0x6860
   17a00:	movt	r0, #2
   17a04:	bl	15420 <__assert_fail@plt+0x36ac>
   17a08:	add	r3, r4, #4
   17a0c:	mov	r2, #0
   17a10:	add	r3, r3, r5
   17a14:	mov	r1, #1
   17a18:	mov	r0, r7
   17a1c:	bl	16088 <__assert_fail@plt+0x4314>
   17a20:	ldr	r3, [r6, #3444]	; 0xd74
   17a24:	cmp	r3, #0
   17a28:	beq	179cc <__assert_fail@plt+0x5c58>
   17a2c:	mov	r2, #0
   17a30:	mov	r0, #1
   17a34:	ldr	r1, [r7, #124]	; 0x7c
   17a38:	bl	1530c <__assert_fail@plt+0x3598>
   17a3c:	b	179cc <__assert_fail@plt+0x5c58>
   17a40:	ldrb	r0, [r7, #132]	; 0x84
   17a44:	ldr	r1, [r7, #32]
   17a48:	bl	1530c <__assert_fail@plt+0x3598>
   17a4c:	b	179cc <__assert_fail@plt+0x5c58>
   17a50:	ldrb	r3, [r6, #4016]	; 0xfb0
   17a54:	cmp	r3, #0
   17a58:	beq	176a4 <__assert_fail@plt+0x5930>
   17a5c:	b	17664 <__assert_fail@plt+0x58f0>
   17a60:	ldrb	r3, [r6, #3448]	; 0xd78
   17a64:	cmp	r3, #0
   17a68:	movne	r0, #0
   17a6c:	bne	1793c <__assert_fail@plt+0x5bc8>
   17a70:	mov	r0, r2
   17a74:	str	r2, [sp, #20]
   17a78:	bl	1d408 <__assert_fail@plt+0xb694>
   17a7c:	ldr	r2, [sp, #20]
   17a80:	b	1793c <__assert_fail@plt+0x5bc8>
   17a84:	mov	r2, sl
   17a88:	sub	r1, sl, #20
   17a8c:	ldr	r0, [r6, #4036]	; 0xfc4
   17a90:	bl	22c8c <_obstack_memory_used@@Base+0x29f4>
   17a94:	cmp	r0, #0
   17a98:	beq	17b90 <__assert_fail@plt+0x5e1c>
   17a9c:	ldr	r3, [fp, #-660]	; 0xfffffd6c
   17aa0:	ldr	r0, [fp, #-656]	; 0xfffffd70
   17aa4:	ldr	r2, [r6, #4044]	; 0xfcc
   17aa8:	ldr	r1, [r6, #4040]	; 0xfc8
   17aac:	cmp	r2, r0
   17ab0:	movgt	r2, #1
   17ab4:	movle	r2, #0
   17ab8:	movlt	r4, #1
   17abc:	movge	r4, #0
   17ac0:	cmp	r1, r3
   17ac4:	sub	lr, r2, r4
   17ac8:	str	r2, [sp, #20]
   17acc:	movge	r2, #0
   17ad0:	movlt	r2, #1
   17ad4:	cmp	r1, r3
   17ad8:	rsble	r2, r2, #0
   17adc:	rsbgt	r2, r2, #1
   17ae0:	adds	r2, lr, r2, lsl #1
   17ae4:	bmi	17cd0 <__assert_fail@plt+0x5f5c>
   17ae8:	movw	r2, #15700	; 0x3d54
   17aec:	movt	r2, #65295	; 0xff0f
   17af0:	add	r2, r1, r2
   17af4:	cmp	r2, r3
   17af8:	movge	ip, #0
   17afc:	movlt	ip, #1
   17b00:	cmp	r2, r3
   17b04:	rsble	ip, ip, #0
   17b08:	rsbgt	ip, ip, #1
   17b0c:	mov	r2, ip
   17b10:	adds	r2, lr, r2, lsl #1
   17b14:	movpl	r3, #0
   17b18:	bpl	17b44 <__assert_fail@plt+0x5dd0>
   17b1c:	ldr	ip, [sp, #20]
   17b20:	cmp	r1, r3
   17b24:	movle	r2, #0
   17b28:	movgt	r2, #1
   17b2c:	cmp	r1, r3
   17b30:	rsbge	r3, r2, #0
   17b34:	rsblt	r3, r2, #1
   17b38:	sub	r4, r4, ip
   17b3c:	add	r3, r4, r3, lsl #1
   17b40:	lsr	r3, r3, #31
   17b44:	ldrb	r2, [r6, #3076]	; 0xc04
   17b48:	ldr	r1, [r6, #4036]	; 0xfc4
   17b4c:	cmp	r2, #0
   17b50:	beq	17c94 <__assert_fail@plt+0x5f20>
   17b54:	lsl	r2, r3, #1
   17b58:	ldr	ip, [fp, #-624]	; 0xfffffd90
   17b5c:	add	r3, r2, r3
   17b60:	ldr	r2, [pc, #436]	; 17d1c <__assert_fail@plt+0x5fa8>
   17b64:	add	r3, ip, r3, lsl #2
   17b68:	add	r2, r2, r3, lsl #7
   17b6c:	mov	r3, sl
   17b70:	str	r1, [sp]
   17b74:	movw	r1, #1001	; 0x3e9
   17b78:	str	r0, [sp, #4]
   17b7c:	mov	r0, r5
   17b80:	bl	1fea0 <__assert_fail@plt+0xe12c>
   17b84:	cmp	r0, #0
   17b88:	addne	r5, r5, r0
   17b8c:	bne	17b9c <__assert_fail@plt+0x5e28>
   17b90:	ldrb	r3, [r5]
   17b94:	cmp	r3, #0
   17b98:	bne	17d08 <__assert_fail@plt+0x5f94>
   17b9c:	mov	r3, #32
   17ba0:	strb	r3, [r5], #1
   17ba4:	b	1798c <__assert_fail@plt+0x5c18>
   17ba8:	ldr	r0, [r7, #48]	; 0x30
   17bac:	mov	r1, #0
   17bb0:	add	r2, sp, #100	; 0x64
   17bb4:	ldr	r3, [r7, #52]	; 0x34
   17bb8:	ldr	lr, [r6, #3144]	; 0xc48
   17bbc:	ubfx	r0, r0, #8, #12
   17bc0:	ldr	r5, [r6, #3148]	; 0xc4c
   17bc4:	bic	r3, r3, #4080	; 0xff0
   17bc8:	bic	r3, r3, #15
   17bcc:	orr	r0, r3, r0
   17bd0:	ldr	r3, [r6, #3152]	; 0xc50
   17bd4:	add	ip, lr, #2
   17bd8:	add	ip, ip, r5
   17bdc:	sub	ip, r3, ip
   17be0:	cmp	ip, r1
   17be4:	addge	lr, lr, ip
   17be8:	addlt	lr, lr, r1
   17bec:	str	lr, [sp, #20]
   17bf0:	bl	1d6c0 <__assert_fail@plt+0xb94c>
   17bf4:	str	r0, [sp, #28]
   17bf8:	add	r2, sp, #144	; 0x90
   17bfc:	mov	r1, #0
   17c00:	ldr	r0, [r7, #48]	; 0x30
   17c04:	ldr	ip, [r7, #52]	; 0x34
   17c08:	ldr	r5, [r6, #3148]	; 0xc4c
   17c0c:	lsr	r3, r0, #12
   17c10:	uxtb	r0, r0
   17c14:	orr	r3, r3, ip, lsl #20
   17c18:	bic	r3, r3, #255	; 0xff
   17c1c:	orr	r0, r3, r0
   17c20:	bl	1d6c0 <__assert_fail@plt+0xb94c>
   17c24:	ldr	lr, [sp, #20]
   17c28:	movw	r3, #26708	; 0x6854
   17c2c:	movt	r3, #2
   17c30:	mvn	r2, #0
   17c34:	mov	r1, #1
   17c38:	ldr	ip, [sp, #28]
   17c3c:	str	lr, [sp]
   17c40:	str	ip, [sp, #4]
   17c44:	str	r5, [sp, #8]
   17c48:	str	r0, [sp, #12]
   17c4c:	mov	r0, r4
   17c50:	bl	11bc4 <__sprintf_chk@plt>
   17c54:	add	r5, r4, r0
   17c58:	b	1773c <__assert_fail@plt+0x59c8>
   17c5c:	ldr	r3, [pc, #192]	; 17d24 <__assert_fail@plt+0x5fb0>
   17c60:	mov	r0, #512	; 0x200
   17c64:	mov	r1, #0
   17c68:	add	r2, sp, #144	; 0x90
   17c6c:	strd	r0, [sp]
   17c70:	ldrd	r0, [r7, #80]	; 0x50
   17c74:	ldrd	r4, [r3, #-8]
   17c78:	ldr	r3, [r6, #4004]	; 0xfa4
   17c7c:	strd	r4, [sp, #8]
   17c80:	bl	1c630 <__assert_fail@plt+0xa8bc>
   17c84:	mov	r5, r0
   17c88:	b	17594 <__assert_fail@plt+0x5820>
   17c8c:	mov	r5, r4
   17c90:	b	17720 <__assert_fail@plt+0x59ac>
   17c94:	add	r3, r8, r3, lsl #2
   17c98:	ldr	r2, [r3, #196]	; 0xc4
   17c9c:	b	17b6c <__assert_fail@plt+0x5df8>
   17ca0:	ldr	r0, [sp, #20]
   17ca4:	b	175c8 <__assert_fail@plt+0x5854>
   17ca8:	mov	r3, #0
   17cac:	mov	r4, r3
   17cb0:	str	r3, [r8, #224]	; 0xe0
   17cb4:	b	177c8 <__assert_fail@plt+0x5a54>
   17cb8:	mov	r2, r4
   17cbc:	add	r0, sp, #144	; 0x90
   17cc0:	bl	1dbe0 <__assert_fail@plt+0xbe6c>
   17cc4:	mov	r4, r0
   17cc8:	str	r0, [r8, #224]	; 0xe0
   17ccc:	b	177c0 <__assert_fail@plt+0x5a4c>
   17cd0:	ldr	r0, [pc, #80]	; 17d28 <__assert_fail@plt+0x5fb4>
   17cd4:	bl	1b314 <__assert_fail@plt+0x95a0>
   17cd8:	ldr	r3, [fp, #-660]	; 0xfffffd6c
   17cdc:	ldr	r0, [fp, #-656]	; 0xfffffd70
   17ce0:	ldr	r2, [r6, #4044]	; 0xfcc
   17ce4:	ldr	r1, [r6, #4040]	; 0xfc8
   17ce8:	cmp	r2, r0
   17cec:	movgt	r2, #1
   17cf0:	movle	r2, #0
   17cf4:	movlt	r4, #1
   17cf8:	movge	r4, #0
   17cfc:	sub	lr, r2, r4
   17d00:	str	r2, [sp, #20]
   17d04:	b	17ae8 <__assert_fail@plt+0x5d74>
   17d08:	ldr	r4, [r8, #224]	; 0xe0
   17d0c:	cmp	r4, #0
   17d10:	bge	177c8 <__assert_fail@plt+0x5a54>
   17d14:	b	17760 <__assert_fail@plt+0x59ec>
   17d18:	bl	11d2c <abort@plt>
   17d1c:	andeq	sl, r3, r4, lsr r3
   17d20:	andeq	fp, r3, r0, lsl #6
   17d24:	andeq	fp, r3, r0, ror #5
   17d28:	strdeq	fp, [r3], -r8
   17d2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17d30:	movw	r4, #41776	; 0xa330
   17d34:	movt	r4, #3
   17d38:	ldr	r5, [r4, #3088]	; 0xc10
   17d3c:	strd	r6, [sp, #8]
   17d40:	strd	r8, [sp, #16]
   17d44:	strd	sl, [sp, #24]
   17d48:	str	lr, [sp, #32]
   17d4c:	sub	sp, sp, #20
   17d50:	cmp	r5, #4
   17d54:	ldrls	pc, [pc, r5, lsl #2]
   17d58:	b	17d98 <__assert_fail@plt+0x6024>
   17d5c:	ldrdeq	r7, [r1], -r8
   17d60:	andeq	r7, r1, r8, lsl lr
   17d64:	andeq	r7, r1, r0, lsl #29
   17d68:	andeq	r7, r1, ip, lsl #31
   17d6c:			; <UNDEFINED> instruction: 0x00017db4
   17d70:	ldr	r8, [sp, #4]
   17d74:	ldr	r0, [r9]
   17d78:	ldrb	r1, [r8, #210]	; 0xd2
   17d7c:	ldr	r3, [r0, #20]
   17d80:	ldr	r2, [r0, #24]
   17d84:	cmp	r3, r2
   17d88:	addcc	r2, r3, #1
   17d8c:	strcc	r2, [r0, #20]
   17d90:	strbcc	r1, [r3]
   17d94:	bcs	180b8 <__assert_fail@plt+0x6344>
   17d98:	add	sp, sp, #20
   17d9c:	ldrd	r4, [sp]
   17da0:	ldrd	r6, [sp, #8]
   17da4:	ldrd	r8, [sp, #16]
   17da8:	ldrd	sl, [sp, #24]
   17dac:	add	sp, sp, #32
   17db0:	pop	{pc}		; (ldr pc, [sp], #4)
   17db4:	mov	r0, #44	; 0x2c
   17db8:	add	sp, sp, #20
   17dbc:	ldrd	r4, [sp]
   17dc0:	ldrd	r6, [sp, #8]
   17dc4:	ldrd	r8, [sp, #16]
   17dc8:	ldrd	sl, [sp, #24]
   17dcc:	ldr	lr, [sp, #32]
   17dd0:	add	sp, sp, #36	; 0x24
   17dd4:	b	1729c <__assert_fail@plt+0x5528>
   17dd8:	ldr	r3, [r4, #3104]	; 0xc20
   17ddc:	cmp	r3, #0
   17de0:	beq	17d98 <__assert_fail@plt+0x6024>
   17de4:	movw	r8, #41424	; 0xa1d0
   17de8:	movt	r8, #3
   17dec:	bl	15894 <__assert_fail@plt+0x3b20>
   17df0:	ldr	r3, [r4, #3108]	; 0xc24
   17df4:	ldr	r0, [r3, r5, lsl #2]
   17df8:	add	r5, r5, #1
   17dfc:	bl	17468 <__assert_fail@plt+0x56f4>
   17e00:	ldrb	r0, [r8, #210]	; 0xd2
   17e04:	bl	14d20 <__assert_fail@plt+0x2fac>
   17e08:	ldr	r3, [r4, #3104]	; 0xc20
   17e0c:	cmp	r3, r5
   17e10:	bhi	17dec <__assert_fail@plt+0x6078>
   17e14:	b	17d98 <__assert_fail@plt+0x6024>
   17e18:	ldr	r3, [r4, #3104]	; 0xc20
   17e1c:	cmp	r3, #0
   17e20:	beq	17d98 <__assert_fail@plt+0x6024>
   17e24:	movw	r8, #41424	; 0xa1d0
   17e28:	movt	r8, #3
   17e2c:	movw	r9, #41764	; 0xa324
   17e30:	movt	r9, #3
   17e34:	mov	r5, #0
   17e38:	ldr	r3, [r4, #3108]	; 0xc24
   17e3c:	mov	r1, #0
   17e40:	ldr	r0, [r3, r5, lsl #2]
   17e44:	bl	17110 <__assert_fail@plt+0x539c>
   17e48:	ldr	r0, [r9]
   17e4c:	ldrb	r1, [r8, #210]	; 0xd2
   17e50:	ldr	r3, [r0, #20]
   17e54:	ldr	r2, [r0, #24]
   17e58:	add	ip, r3, #1
   17e5c:	cmp	r3, r2
   17e60:	strcc	ip, [r0, #20]
   17e64:	strbcc	r1, [r3]
   17e68:	bcs	180a8 <__assert_fail@plt+0x6334>
   17e6c:	ldr	r3, [r4, #3104]	; 0xc20
   17e70:	add	r5, r5, #1
   17e74:	cmp	r3, r5
   17e78:	bhi	17e38 <__assert_fail@plt+0x60c4>
   17e7c:	b	17d98 <__assert_fail@plt+0x6024>
   17e80:	ldr	r3, [r4, #3596]	; 0xe0c
   17e84:	cmp	r3, #0
   17e88:	beq	180a0 <__assert_fail@plt+0x632c>
   17e8c:	mov	r0, #1
   17e90:	bl	16924 <__assert_fail@plt+0x4bb0>
   17e94:	ldr	r1, [r4, #3104]	; 0xc20
   17e98:	add	r3, r0, r0, lsl #1
   17e9c:	ldr	fp, [r4, #4028]	; 0xfbc
   17ea0:	lsl	r3, r3, #2
   17ea4:	sub	r3, r3, #12
   17ea8:	udiv	r2, r1, r0
   17eac:	add	fp, fp, r3
   17eb0:	mls	r0, r0, r2, r1
   17eb4:	cmp	r0, #0
   17eb8:	addne	r2, r2, #1
   17ebc:	cmp	r2, #0
   17ec0:	str	r2, [sp, #4]
   17ec4:	beq	17d98 <__assert_fail@plt+0x6024>
   17ec8:	movw	r8, #41424	; 0xa1d0
   17ecc:	movt	r8, #3
   17ed0:	movw	r9, #41764	; 0xa324
   17ed4:	movt	r9, #3
   17ed8:	mov	r3, #0
   17edc:	strd	r8, [sp, #8]
   17ee0:	mov	r8, r3
   17ee4:	mov	r7, #0
   17ee8:	mov	r6, r8
   17eec:	mov	r5, r7
   17ef0:	mov	sl, r4
   17ef4:	b	17efc <__assert_fail@plt+0x6188>
   17ef8:	bl	14d94 <__assert_fail@plt+0x3020>
   17efc:	ldr	r2, [sl, #3108]	; 0xc24
   17f00:	ldr	r3, [sp, #4]
   17f04:	ldr	r4, [r2, r6, lsl #2]
   17f08:	add	r6, r6, r3
   17f0c:	mov	r0, r4
   17f10:	bl	167b8 <__assert_fail@plt+0x4a44>
   17f14:	ldr	r2, [fp, #8]
   17f18:	mov	r1, r5
   17f1c:	mov	r9, r0
   17f20:	mov	r0, r4
   17f24:	ldr	r4, [r2, r7]
   17f28:	add	r7, r7, #4
   17f2c:	bl	17110 <__assert_fail@plt+0x539c>
   17f30:	ldr	r2, [sl, #3104]	; 0xc20
   17f34:	add	r0, r9, r5
   17f38:	add	r5, r5, r4
   17f3c:	mov	r1, r5
   17f40:	cmp	r6, r2
   17f44:	bcc	17ef8 <__assert_fail@plt+0x6184>
   17f48:	ldr	r3, [sp, #12]
   17f4c:	mov	r4, sl
   17f50:	ldr	r0, [r3]
   17f54:	ldr	r3, [sp, #8]
   17f58:	ldr	r2, [r0, #24]
   17f5c:	ldrb	r1, [r3, #210]	; 0xd2
   17f60:	ldr	r3, [r0, #20]
   17f64:	cmp	r3, r2
   17f68:	addcc	r2, r3, #1
   17f6c:	strcc	r2, [r0, #20]
   17f70:	strbcc	r1, [r3]
   17f74:	bcs	180b0 <__assert_fail@plt+0x633c>
   17f78:	ldr	r3, [sp, #4]
   17f7c:	add	r8, r8, #1
   17f80:	cmp	r3, r8
   17f84:	bne	17ee4 <__assert_fail@plt+0x6170>
   17f88:	b	17d98 <__assert_fail@plt+0x6024>
   17f8c:	ldr	r3, [r4, #3596]	; 0xe0c
   17f90:	cmp	r3, #0
   17f94:	beq	180a0 <__assert_fail@plt+0x632c>
   17f98:	mov	r0, #0
   17f9c:	movw	r8, #41424	; 0xa1d0
   17fa0:	movt	r8, #3
   17fa4:	movw	r9, #41764	; 0xa324
   17fa8:	movt	r9, #3
   17fac:	bl	16924 <__assert_fail@plt+0x4bb0>
   17fb0:	ldr	r2, [r4, #3108]	; 0xc24
   17fb4:	add	r3, r0, r0, lsl #1
   17fb8:	mov	sl, r0
   17fbc:	ldr	fp, [r4, #4028]	; 0xfbc
   17fc0:	lsl	r3, r3, #2
   17fc4:	sub	r3, r3, #12
   17fc8:	ldr	r5, [r2]
   17fcc:	add	fp, fp, r3
   17fd0:	mov	r0, r5
   17fd4:	bl	167b8 <__assert_fail@plt+0x4a44>
   17fd8:	ldr	r2, [fp, #8]
   17fdc:	mov	r3, r0
   17fe0:	mov	r1, #0
   17fe4:	mov	r0, r5
   17fe8:	ldr	r2, [r2]
   17fec:	strd	r2, [sp, #4]
   17ff0:	bl	17110 <__assert_fail@plt+0x539c>
   17ff4:	ldr	r1, [r4, #3104]	; 0xc20
   17ff8:	ldrd	r2, [sp, #4]
   17ffc:	cmp	r1, #1
   18000:	bls	17d74 <__assert_fail@plt+0x6000>
   18004:	mov	r7, #0
   18008:	mov	r5, #1
   1800c:	str	r8, [sp, #4]
   18010:	mov	r0, r3
   18014:	mov	r8, r4
   18018:	b	1807c <__assert_fail@plt+0x6308>
   1801c:	ldr	r0, [r9]
   18020:	mov	r7, r6
   18024:	ldr	r3, [sp, #4]
   18028:	ldr	r2, [r0, #20]
   1802c:	ldr	ip, [r0, #24]
   18030:	ldrb	r1, [r3, #210]	; 0xd2
   18034:	add	lr, r2, #1
   18038:	cmp	r2, ip
   1803c:	strcc	lr, [r0, #20]
   18040:	strbcc	r1, [r2]
   18044:	bcs	180d8 <__assert_fail@plt+0x6364>
   18048:	ldr	r2, [r8, #3108]	; 0xc24
   1804c:	mov	r1, r7
   18050:	ldr	r4, [r2, r5, lsl #2]
   18054:	add	r5, r5, #1
   18058:	mov	r0, r4
   1805c:	bl	17110 <__assert_fail@plt+0x539c>
   18060:	mov	r0, r4
   18064:	bl	167b8 <__assert_fail@plt+0x4a44>
   18068:	ldr	r1, [r8, #3104]	; 0xc20
   1806c:	ldr	r2, [fp, #8]
   18070:	cmp	r5, r1
   18074:	ldr	r2, [r2, r6, lsl #2]
   18078:	bcs	17d70 <__assert_fail@plt+0x5ffc>
   1807c:	udiv	r6, r5, sl
   18080:	mls	r6, sl, r6, r5
   18084:	cmp	r6, #0
   18088:	beq	1801c <__assert_fail@plt+0x62a8>
   1808c:	add	r0, r7, r0
   18090:	add	r7, r7, r2
   18094:	mov	r1, r7
   18098:	bl	14d94 <__assert_fail@plt+0x3020>
   1809c:	b	18048 <__assert_fail@plt+0x62d4>
   180a0:	mov	r0, #32
   180a4:	b	17db8 <__assert_fail@plt+0x6044>
   180a8:	bl	11c48 <__overflow@plt>
   180ac:	b	17e6c <__assert_fail@plt+0x60f8>
   180b0:	bl	11c48 <__overflow@plt>
   180b4:	b	17f78 <__assert_fail@plt+0x6204>
   180b8:	add	sp, sp, #20
   180bc:	ldrd	r4, [sp]
   180c0:	ldrd	r6, [sp, #8]
   180c4:	ldrd	r8, [sp, #16]
   180c8:	ldrd	sl, [sp, #24]
   180cc:	ldr	lr, [sp, #32]
   180d0:	add	sp, sp, #36	; 0x24
   180d4:	b	11c48 <__overflow@plt>
   180d8:	bl	11c48 <__overflow@plt>
   180dc:	b	18048 <__assert_fail@plt+0x62d4>
   180e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   180e4:	movw	r4, #41776	; 0xa330
   180e8:	movt	r4, #3
   180ec:	strd	r6, [sp, #8]
   180f0:	mov	r7, r3
   180f4:	strd	r8, [sp, #16]
   180f8:	strd	sl, [sp, #24]
   180fc:	add	fp, sp, #32
   18100:	str	lr, [sp, #32]
   18104:	sub	sp, sp, #732	; 0x2dc
   18108:	ldr	r5, [r4, #3104]	; 0xc20
   1810c:	str	r2, [fp, #-736]	; 0xfffffd20
   18110:	ldr	r3, [r4, #4092]	; 0xffc
   18114:	str	r1, [fp, #-724]	; 0xfffffd2c
   18118:	str	r0, [fp, #-720]	; 0xfffffd30
   1811c:	ldr	r0, [r4, #3604]	; 0xe14
   18120:	cmp	r5, r3
   18124:	beq	18978 <__assert_fail@plt+0x6c04>
   18128:	mov	r3, #152	; 0x98
   1812c:	mov	r1, #0
   18130:	mov	r2, r3
   18134:	mla	r5, r3, r5, r0
   18138:	mov	r0, r5
   1813c:	bl	11be8 <memset@plt>
   18140:	ldrb	r3, [r4, #3112]	; 0xc28
   18144:	mvn	r2, #0
   18148:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1814c:	cmp	r3, #0
   18150:	str	r1, [r5, #120]	; 0x78
   18154:	str	r2, [r5, #144]	; 0x90
   18158:	bne	18168 <__assert_fail@plt+0x63f4>
   1815c:	ldrb	r3, [r4, #3582]	; 0xdfe
   18160:	cmp	r3, #0
   18164:	bne	1899c <__assert_fail@plt+0x6c28>
   18168:	ldr	r3, [fp, #-736]	; 0xfffffd20
   1816c:	movw	r6, #49960	; 0xc328
   18170:	movt	r6, #3
   18174:	cmp	r3, #0
   18178:	ldrb	r3, [r6, #-4088]	; 0xfffff008
   1817c:	str	r3, [fp, #-740]	; 0xfffffd1c
   18180:	beq	182ec <__assert_fail@plt+0x6578>
   18184:	ldr	r3, [fp, #-720]	; 0xfffffd30
   18188:	ldrb	r9, [r3]
   1818c:	cmp	r9, #47	; 0x2f
   18190:	beq	181a0 <__assert_fail@plt+0x642c>
   18194:	ldrb	sl, [r7]
   18198:	cmp	sl, #0
   1819c:	bne	188b8 <__assert_fail@plt+0x6b44>
   181a0:	ldr	r3, [fp, #-720]	; 0xfffffd30
   181a4:	str	r3, [fp, #-732]	; 0xfffffd24
   181a8:	ldr	r3, [fp, #-740]	; 0xfffffd1c
   181ac:	cmp	r3, #0
   181b0:	bne	18804 <__assert_fail@plt+0x6a90>
   181b4:	bl	146a4 <__assert_fail@plt+0x2930>
   181b8:	ldr	r7, [r6, #-4084]	; 0xfffff00c
   181bc:	add	sl, r5, #16
   181c0:	cmp	r7, #2
   181c4:	bcc	18558 <__assert_fail@plt+0x67e4>
   181c8:	cmp	r7, #3
   181cc:	bls	18510 <__assert_fail@plt+0x679c>
   181d0:	cmp	r7, #4
   181d4:	bne	18558 <__assert_fail@plt+0x67e4>
   181d8:	mov	r3, #0
   181dc:	mov	r2, sl
   181e0:	str	r0, [sp]
   181e4:	mvn	r0, #99	; 0x63
   181e8:	ldr	r1, [fp, #-732]	; 0xfffffd24
   181ec:	mov	r9, #1
   181f0:	bl	148a0 <__assert_fail@plt+0x2b2c>
   181f4:	cmp	r0, #0
   181f8:	bne	1857c <__assert_fail@plt+0x6808>
   181fc:	ldr	r2, [fp, #-724]	; 0xfffffd2c
   18200:	mov	r3, #1
   18204:	strb	r3, [r5, #132]	; 0x84
   18208:	cmp	r2, #5
   1820c:	beq	1873c <__assert_fail@plt+0x69c8>
   18210:	ldr	r3, [r5, #32]
   18214:	and	r3, r3, #61440	; 0xf000
   18218:	cmp	r3, #32768	; 0x8000
   1821c:	beq	1873c <__assert_fail@plt+0x69c8>
   18220:	ldr	r3, [r4, #3088]	; 0xc10
   18224:	cmp	r3, #0
   18228:	beq	185c8 <__assert_fail@plt+0x6854>
   1822c:	ldrb	r3, [r4, #4016]	; 0xfb0
   18230:	cmp	r3, #0
   18234:	bne	185c8 <__assert_fail@plt+0x6854>
   18238:	ldr	r3, [r5, #32]
   1823c:	and	r3, r3, #61440	; 0xf000
   18240:	cmp	r3, #40960	; 0xa000
   18244:	beq	18a28 <__assert_fail@plt+0x6cb4>
   18248:	cmp	r3, #16384	; 0x4000
   1824c:	movne	r3, #5
   18250:	strne	r3, [r5, #120]	; 0x78
   18254:	beq	18ad4 <__assert_fail@plt+0x6d60>
   18258:	ldr	r3, [r4, #3088]	; 0xc10
   1825c:	sub	r2, fp, #732	; 0x2dc
   18260:	ldrd	r0, [r5, #80]	; 0x50
   18264:	cmp	r3, #0
   18268:	strd	r0, [r2]
   1826c:	beq	183b4 <__assert_fail@plt+0x6640>
   18270:	ldrb	r3, [r4, #3085]	; 0xc0d
   18274:	cmp	r3, #0
   18278:	bne	183b4 <__assert_fail@plt+0x6640>
   1827c:	ldrb	r3, [r4, #4016]	; 0xfb0
   18280:	cmp	r3, #0
   18284:	bne	18438 <__assert_fail@plt+0x66c4>
   18288:	ldrb	r3, [r4, #3084]	; 0xc0c
   1828c:	cmp	r3, #0
   18290:	beq	182b0 <__assert_fail@plt+0x653c>
   18294:	sub	r2, fp, #692	; 0x2b4
   18298:	ldrd	r0, [r5, #112]	; 0x70
   1829c:	bl	1d6c0 <__assert_fail@plt+0xb94c>
   182a0:	bl	11b94 <strlen@plt>
   182a4:	ldr	r3, [r4, #3116]	; 0xc2c
   182a8:	cmp	r0, r3
   182ac:	strgt	r0, [r4, #3116]	; 0xc2c
   182b0:	ldr	r0, [fp, #-720]	; 0xfffffd30
   182b4:	bl	2384c <_obstack_memory_used@@Base+0x35b4>
   182b8:	ldr	r3, [r4, #3104]	; 0xc20
   182bc:	str	r0, [r5]
   182c0:	add	r3, r3, #1
   182c4:	str	r3, [r4, #3104]	; 0xc20
   182c8:	sub	r3, fp, #732	; 0x2dc
   182cc:	ldrd	r0, [r3]
   182d0:	sub	sp, fp, #32
   182d4:	ldrd	r4, [sp]
   182d8:	ldrd	r6, [sp, #8]
   182dc:	ldrd	r8, [sp, #16]
   182e0:	ldrd	sl, [sp, #24]
   182e4:	add	sp, sp, #32
   182e8:	pop	{pc}		; (ldr pc, [sp], #4)
   182ec:	cmp	r3, #0
   182f0:	bne	187e0 <__assert_fail@plt+0x6a6c>
   182f4:	ldrb	r3, [r6, #-4087]	; 0xfffff009
   182f8:	cmp	r3, #0
   182fc:	bne	18368 <__assert_fail@plt+0x65f4>
   18300:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   18304:	cmp	r3, #3
   18308:	beq	18d10 <__assert_fail@plt+0x6f9c>
   1830c:	ldrb	r2, [r4, #3084]	; 0xc0c
   18310:	cmp	r2, #0
   18314:	bne	18bc4 <__assert_fail@plt+0x6e50>
   18318:	ldrb	r3, [r6, #-4086]	; 0xfffff00a
   1831c:	cmp	r3, #0
   18320:	beq	18ca8 <__assert_fail@plt+0x6f34>
   18324:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   18328:	cmp	r3, #0
   1832c:	cmpne	r3, #6
   18330:	clz	r3, r3
   18334:	lsr	r3, r3, #5
   18338:	bne	18c44 <__assert_fail@plt+0x6ed0>
   1833c:	ldr	r1, [r6, #-4084]	; 0xfffff00c
   18340:	cmp	r1, #4
   18344:	beq	18368 <__assert_fail@plt+0x65f4>
   18348:	ldrb	r1, [r4, #3589]	; 0xe05
   1834c:	cmp	r1, #0
   18350:	bne	18368 <__assert_fail@plt+0x65f4>
   18354:	ldrb	r1, [r6, #-4080]	; 0xfffff010
   18358:	cmp	r1, #0
   1835c:	bne	18368 <__assert_fail@plt+0x65f4>
   18360:	cmp	r2, #0
   18364:	beq	18c30 <__assert_fail@plt+0x6ebc>
   18368:	ldr	r3, [fp, #-720]	; 0xfffffd30
   1836c:	ldrb	r9, [r3]
   18370:	cmp	r9, #47	; 0x2f
   18374:	beq	18aa4 <__assert_fail@plt+0x6d30>
   18378:	ldrb	sl, [r7]
   1837c:	cmp	sl, #0
   18380:	bne	188b8 <__assert_fail@plt+0x6b44>
   18384:	bl	146a4 <__assert_fail@plt+0x2930>
   18388:	ldr	r7, [r6, #-4084]	; 0xfffff00c
   1838c:	add	sl, r5, #16
   18390:	cmp	r7, #2
   18394:	bcc	18ab8 <__assert_fail@plt+0x6d44>
   18398:	cmp	r7, #3
   1839c:	bls	18ab8 <__assert_fail@plt+0x6d44>
   183a0:	cmp	r7, #4
   183a4:	bne	18ab8 <__assert_fail@plt+0x6d44>
   183a8:	ldr	r3, [fp, #-720]	; 0xfffffd30
   183ac:	str	r3, [fp, #-732]	; 0xfffffd24
   183b0:	b	181d8 <__assert_fail@plt+0x6464>
   183b4:	ldr	ip, [pc, #2684]	; 18e38 <__assert_fail@plt+0x70c4>
   183b8:	mov	r0, #512	; 0x200
   183bc:	mov	r1, #0
   183c0:	sub	r3, fp, #732	; 0x2dc
   183c4:	sub	r2, fp, #692	; 0x2b4
   183c8:	strd	r0, [sp]
   183cc:	ldrd	r0, [r3]
   183d0:	ldrd	r6, [ip, #-8]
   183d4:	ldr	r3, [r4, #4004]	; 0xfa4
   183d8:	strd	r6, [sp, #8]
   183dc:	bl	1c630 <__assert_fail@plt+0xa8bc>
   183e0:	mov	r1, #0
   183e4:	bl	1ddac <__assert_fail@plt+0xc038>
   183e8:	ldr	r3, [r4, #3120]	; 0xc30
   183ec:	cmp	r0, r3
   183f0:	ldr	r3, [r4, #3088]	; 0xc10
   183f4:	strgt	r0, [r4, #3120]	; 0xc30
   183f8:	cmp	r3, #0
   183fc:	bne	1827c <__assert_fail@plt+0x6508>
   18400:	movw	r9, #41424	; 0xa1d0
   18404:	movt	r9, #3
   18408:	ldrb	r3, [r9, #204]	; 0xcc
   1840c:	cmp	r3, #0
   18410:	bne	18b64 <__assert_fail@plt+0x6df0>
   18414:	ldrb	r3, [r9, #205]	; 0xcd
   18418:	cmp	r3, #0
   1841c:	bne	18b18 <__assert_fail@plt+0x6da4>
   18420:	ldrb	r3, [r4, #3096]	; 0xc18
   18424:	cmp	r3, #0
   18428:	bne	18b00 <__assert_fail@plt+0x6d8c>
   1842c:	ldrb	r3, [r4, #4016]	; 0xfb0
   18430:	cmp	r3, #0
   18434:	beq	1844c <__assert_fail@plt+0x66d8>
   18438:	ldr	r0, [r5, #128]	; 0x80
   1843c:	bl	11b94 <strlen@plt>
   18440:	ldr	r3, [r4, #3140]	; 0xc44
   18444:	cmp	r0, r3
   18448:	strgt	r0, [r4, #3140]	; 0xc44
   1844c:	ldr	r1, [r4, #3088]	; 0xc10
   18450:	cmp	r1, #0
   18454:	bne	18288 <__assert_fail@plt+0x6514>
   18458:	sub	r2, fp, #716	; 0x2cc
   1845c:	ldr	r0, [r5, #36]	; 0x24
   18460:	bl	1d6c0 <__assert_fail@plt+0xb94c>
   18464:	bl	11b94 <strlen@plt>
   18468:	ldr	r3, [r4, #3124]	; 0xc34
   1846c:	cmp	r0, r3
   18470:	ldr	r3, [r5, #32]
   18474:	strgt	r0, [r4, #3124]	; 0xc34
   18478:	and	r3, r3, #45056	; 0xb000
   1847c:	cmp	r3, #8192	; 0x2000
   18480:	bne	189b8 <__assert_fail@plt+0x6c44>
   18484:	ldr	r0, [r5, #48]	; 0x30
   18488:	mov	r1, #0
   1848c:	sub	r2, fp, #692	; 0x2b4
   18490:	ldr	r3, [r5, #52]	; 0x34
   18494:	ubfx	r0, r0, #8, #12
   18498:	bic	r3, r3, #4080	; 0xff0
   1849c:	bic	r3, r3, #15
   184a0:	orr	r0, r3, r0
   184a4:	bl	1d6c0 <__assert_fail@plt+0xb94c>
   184a8:	bl	11b94 <strlen@plt>
   184ac:	ldr	r3, [r4, #3144]	; 0xc48
   184b0:	sub	r2, fp, #692	; 0x2b4
   184b4:	mov	r1, #0
   184b8:	ldr	ip, [r5, #52]	; 0x34
   184bc:	cmp	r0, r3
   184c0:	strgt	r0, [r4, #3144]	; 0xc48
   184c4:	ldr	r0, [r5, #48]	; 0x30
   184c8:	lsr	r3, r0, #12
   184cc:	uxtb	r0, r0
   184d0:	orr	r3, r3, ip, lsl #20
   184d4:	bic	r3, r3, #255	; 0xff
   184d8:	orr	r0, r3, r0
   184dc:	bl	1d6c0 <__assert_fail@plt+0xb94c>
   184e0:	bl	11b94 <strlen@plt>
   184e4:	ldr	r3, [r4, #3144]	; 0xc48
   184e8:	ldr	r2, [r4, #3148]	; 0xc4c
   184ec:	ldr	r1, [r4, #3152]	; 0xc50
   184f0:	add	r3, r3, #2
   184f4:	cmp	r0, r2
   184f8:	movgt	r2, r0
   184fc:	add	r3, r3, r2
   18500:	strgt	r0, [r4, #3148]	; 0xc4c
   18504:	cmp	r3, r1
   18508:	strgt	r3, [r4, #3152]	; 0xc50
   1850c:	b	18288 <__assert_fail@plt+0x6514>
   18510:	ldr	r3, [fp, #-736]	; 0xfffffd20
   18514:	cmp	r3, #0
   18518:	beq	18558 <__assert_fail@plt+0x67e4>
   1851c:	mov	r3, #0
   18520:	mov	r2, sl
   18524:	str	r0, [sp]
   18528:	mvn	r0, #99	; 0x63
   1852c:	ldr	r1, [fp, #-732]	; 0xfffffd24
   18530:	bl	148a0 <__assert_fail@plt+0x2b2c>
   18534:	cmp	r7, #2
   18538:	beq	18bb4 <__assert_fail@plt+0x6e40>
   1853c:	cmp	r0, #0
   18540:	blt	18be0 <__assert_fail@plt+0x6e6c>
   18544:	ldr	r3, [r5, #32]
   18548:	and	r3, r3, #61440	; 0xf000
   1854c:	cmp	r3, #16384	; 0x4000
   18550:	beq	18bb4 <__assert_fail@plt+0x6e40>
   18554:	bl	146a4 <__assert_fail@plt+0x2930>
   18558:	mov	r3, #256	; 0x100
   1855c:	mov	r2, sl
   18560:	str	r0, [sp]
   18564:	mvn	r0, #99	; 0x63
   18568:	ldr	r1, [fp, #-732]	; 0xfffffd24
   1856c:	mov	r9, #0
   18570:	bl	148a0 <__assert_fail@plt+0x2b2c>
   18574:	cmp	r0, #0
   18578:	beq	181fc <__assert_fail@plt+0x6488>
   1857c:	mov	r2, #5
   18580:	movw	r1, #26752	; 0x6880
   18584:	movt	r1, #2
   18588:	mov	r0, #0
   1858c:	bl	11984 <dcgettext@plt>
   18590:	ldr	r6, [fp, #-736]	; 0xfffffd20
   18594:	mov	r1, r0
   18598:	ldr	r2, [fp, #-732]	; 0xfffffd24
   1859c:	mov	r0, r6
   185a0:	bl	14f94 <__assert_fail@plt+0x3220>
   185a4:	ldr	r3, [pc, #2192]	; 18e3c <__assert_fail@plt+0x70c8>
   185a8:	cmp	r6, #0
   185ac:	str	r3, [r5, #128]	; 0x80
   185b0:	beq	189fc <__assert_fail@plt+0x6c88>
   185b4:	mov	r2, #0
   185b8:	mov	r3, #0
   185bc:	sub	r1, fp, #732	; 0x2dc
   185c0:	strd	r2, [r1]
   185c4:	b	182c8 <__assert_fail@plt+0x6554>
   185c8:	ldr	r7, [pc, #2160]	; 18e40 <__assert_fail@plt+0x70cc>
   185cc:	ldrd	r0, [r5, #16]
   185d0:	ldrd	r2, [r7]
   185d4:	cmp	r1, r3
   185d8:	cmpeq	r0, r2
   185dc:	beq	18e1c <__assert_fail@plt+0x70a8>
   185e0:	cmp	r9, #0
   185e4:	add	r1, r5, #128	; 0x80
   185e8:	ldr	r0, [fp, #-732]	; 0xfffffd24
   185ec:	beq	18840 <__assert_fail@plt+0x6acc>
   185f0:	bl	22808 <_obstack_memory_used@@Base+0x2570>
   185f4:	cmp	r0, #0
   185f8:	blt	1884c <__assert_fail@plt+0x6ad8>
   185fc:	movw	r0, #26804	; 0x68b4
   18600:	movt	r0, #2
   18604:	ldr	r1, [r5, #128]	; 0x80
   18608:	bl	118a0 <strcmp@plt>
   1860c:	ldr	r3, [r4, #3088]	; 0xc10
   18610:	adds	r7, r0, #0
   18614:	movne	r7, #1
   18618:	cmp	r3, #0
   1861c:	beq	18a40 <__assert_fail@plt+0x6ccc>
   18620:	cmp	r0, #0
   18624:	beq	18a14 <__assert_fail@plt+0x6ca0>
   18628:	mov	r3, #1
   1862c:	str	r3, [r5, #136]	; 0x88
   18630:	strb	r3, [r4, #3113]	; 0xc29
   18634:	ldr	r3, [r5, #32]
   18638:	and	r3, r3, #61440	; 0xf000
   1863c:	cmp	r3, #40960	; 0xa000
   18640:	bne	18248 <__assert_fail@plt+0x64d4>
   18644:	ldr	r3, [r4, #3088]	; 0xc10
   18648:	cmp	r3, #0
   1864c:	bne	18a28 <__assert_fail@plt+0x6cb4>
   18650:	ldr	r0, [fp, #-732]	; 0xfffffd24
   18654:	ldr	r1, [r5, #64]	; 0x40
   18658:	bl	19a8c <__assert_fail@plt+0x7d18>
   1865c:	cmp	r0, #0
   18660:	mov	r9, r0
   18664:	str	r0, [r5, #4]
   18668:	beq	18da4 <__assert_fail@plt+0x7030>
   1866c:	ldrb	r3, [r9]
   18670:	cmp	r3, #47	; 0x2f
   18674:	beq	18e0c <__assert_fail@plt+0x7098>
   18678:	ldr	r0, [fp, #-732]	; 0xfffffd24
   1867c:	bl	1a9b8 <__assert_fail@plt+0x8c44>
   18680:	subs	sl, r0, #0
   18684:	mov	r0, r9
   18688:	beq	18d50 <__assert_fail@plt+0x6fdc>
   1868c:	bl	11b94 <strlen@plt>
   18690:	add	r3, sl, #2
   18694:	add	r0, r3, r0
   18698:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   1869c:	ldr	r3, [fp, #-732]	; 0xfffffd24
   186a0:	mov	r7, r0
   186a4:	ldr	r1, [fp, #-732]	; 0xfffffd24
   186a8:	add	r3, r3, sl
   186ac:	ldrb	r3, [r3, #-1]
   186b0:	cmp	r3, #47	; 0x2f
   186b4:	addne	sl, sl, #1
   186b8:	mov	r2, sl
   186bc:	bl	11c00 <stpncpy@plt>
   186c0:	mov	r1, r9
   186c4:	bl	11a5c <strcpy@plt>
   186c8:	ldr	r3, [r5, #144]	; 0x90
   186cc:	cmp	r3, #0
   186d0:	beq	18d7c <__assert_fail@plt+0x7008>
   186d4:	ldr	r3, [r4, #3444]	; 0xd74
   186d8:	cmp	r3, #1
   186dc:	bhi	186ec <__assert_fail@plt+0x6978>
   186e0:	ldrb	r3, [r6, #-4080]	; 0xfffff010
   186e4:	cmp	r3, #0
   186e8:	beq	18720 <__assert_fail@plt+0x69ac>
   186ec:	mov	r0, #2
   186f0:	mov	r3, #0
   186f4:	sub	r2, fp, #692	; 0x2b4
   186f8:	mov	r1, r7
   186fc:	str	r0, [sp]
   18700:	mvn	r0, #99	; 0x63
   18704:	bl	148a0 <__assert_fail@plt+0x2b2c>
   18708:	cmp	r0, #0
   1870c:	bne	18720 <__assert_fail@plt+0x69ac>
   18710:	ldr	r3, [fp, #-676]	; 0xfffffd5c
   18714:	mov	r2, #1
   18718:	str	r3, [r5, #124]	; 0x7c
   1871c:	strb	r2, [r5, #133]	; 0x85
   18720:	mov	r0, r7
   18724:	bl	1b2b4 <__assert_fail@plt+0x9540>
   18728:	ldr	r3, [r5, #32]
   1872c:	and	r3, r3, #61440	; 0xf000
   18730:	cmp	r3, #40960	; 0xa000
   18734:	beq	18a34 <__assert_fail@plt+0x6cc0>
   18738:	b	18248 <__assert_fail@plt+0x64d4>
   1873c:	ldrb	r3, [r4, #3580]	; 0xdfc
   18740:	cmp	r3, #0
   18744:	beq	18220 <__assert_fail@plt+0x64ac>
   18748:	mov	r0, #21
   1874c:	bl	13e44 <__assert_fail@plt+0x20d0>
   18750:	subs	ip, r0, #0
   18754:	beq	18220 <__assert_fail@plt+0x64ac>
   18758:	ldr	r7, [pc, #1760]	; 18e40 <__assert_fail@plt+0x70cc>
   1875c:	ldrd	r0, [r5, #16]
   18760:	ldrd	r2, [r7, #-8]
   18764:	cmp	r1, r3
   18768:	cmpeq	r0, r2
   1876c:	beq	18cfc <__assert_fail@plt+0x6f88>
   18770:	ldr	r0, [fp, #-732]	; 0xfffffd24
   18774:	str	ip, [fp, #-724]	; 0xfffffd2c
   18778:	bl	11c84 <cap_get_file@plt>
   1877c:	subs	r3, r0, #0
   18780:	ldr	ip, [fp, #-724]	; 0xfffffd2c
   18784:	beq	18dd8 <__assert_fail@plt+0x7064>
   18788:	mov	r1, #0
   1878c:	str	ip, [fp, #-744]	; 0xfffffd18
   18790:	str	r3, [fp, #-740]	; 0xfffffd1c
   18794:	bl	11870 <cap_to_text@plt>
   18798:	ldr	r3, [fp, #-740]	; 0xfffffd1c
   1879c:	mov	r1, r0
   187a0:	str	r1, [fp, #-724]	; 0xfffffd2c
   187a4:	mov	r0, r3
   187a8:	bl	11ccc <cap_free@plt>
   187ac:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   187b0:	cmp	r1, #0
   187b4:	beq	18dd8 <__assert_fail@plt+0x7064>
   187b8:	ldrb	r3, [r1]
   187bc:	mov	r0, r1
   187c0:	str	r3, [fp, #-724]	; 0xfffffd2c
   187c4:	bl	11ccc <cap_free@plt>
   187c8:	ldr	ip, [fp, #-744]	; 0xfffffd18
   187cc:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   187d0:	cmp	r3, #0
   187d4:	beq	18dd8 <__assert_fail@plt+0x7064>
   187d8:	strb	ip, [r5, #140]	; 0x8c
   187dc:	b	18220 <__assert_fail@plt+0x64ac>
   187e0:	ldr	r3, [fp, #-720]	; 0xfffffd30
   187e4:	ldrb	r9, [r3]
   187e8:	cmp	r9, #47	; 0x2f
   187ec:	beq	187fc <__assert_fail@plt+0x6a88>
   187f0:	ldrb	sl, [r7]
   187f4:	cmp	sl, #0
   187f8:	bne	188b8 <__assert_fail@plt+0x6b44>
   187fc:	ldr	r3, [fp, #-720]	; 0xfffffd30
   18800:	str	r3, [fp, #-732]	; 0xfffffd24
   18804:	mov	r1, #2
   18808:	ldr	r0, [fp, #-732]	; 0xfffffd24
   1880c:	bl	1a19c <__assert_fail@plt+0x8428>
   18810:	cmp	r0, #0
   18814:	str	r0, [r5, #8]
   18818:	bne	181b4 <__assert_fail@plt+0x6440>
   1881c:	mov	r2, #5
   18820:	movw	r1, #26728	; 0x6868
   18824:	movt	r1, #2
   18828:	bl	11984 <dcgettext@plt>
   1882c:	mov	r1, r0
   18830:	ldr	r0, [fp, #-736]	; 0xfffffd20
   18834:	ldr	r2, [fp, #-732]	; 0xfffffd24
   18838:	bl	14f94 <__assert_fail@plt+0x3220>
   1883c:	b	181b4 <__assert_fail@plt+0x6440>
   18840:	bl	2282c <_obstack_memory_used@@Base+0x2594>
   18844:	cmp	r0, #0
   18848:	bge	185fc <__assert_fail@plt+0x6888>
   1884c:	bl	11bb8 <__errno_location@plt>
   18850:	ldr	r1, [r0]
   18854:	mov	ip, r0
   18858:	sub	r0, r1, #95	; 0x5f
   1885c:	sub	r3, r1, #22
   18860:	clz	r0, r0
   18864:	bics	r3, r3, #16
   18868:	lsr	r0, r0, #5
   1886c:	moveq	r3, #1
   18870:	movne	r3, r0
   18874:	cmp	r3, #0
   18878:	beq	18884 <__assert_fail@plt+0x6b10>
   1887c:	ldrd	r2, [r5, #16]
   18880:	strd	r2, [r7]
   18884:	ldr	r3, [pc, #1456]	; 18e3c <__assert_fail@plt+0x70c8>
   18888:	cmp	r1, #61	; 0x3d
   1888c:	movne	r1, r0
   18890:	orreq	r1, r0, #1
   18894:	cmp	r1, #0
   18898:	str	r3, [r5, #128]	; 0x80
   1889c:	beq	18b7c <__assert_fail@plt+0x6e08>
   188a0:	ldr	r7, [r4, #3088]	; 0xc10
   188a4:	cmp	r7, #0
   188a8:	beq	18a48 <__assert_fail@plt+0x6cd4>
   188ac:	mov	r3, #0
   188b0:	str	r3, [r5, #136]	; 0x88
   188b4:	b	18238 <__assert_fail@plt+0x64c4>
   188b8:	ldr	r0, [fp, #-720]	; 0xfffffd30
   188bc:	bl	11b94 <strlen@plt>
   188c0:	mov	r3, r0
   188c4:	mov	r0, r7
   188c8:	str	r3, [fp, #-732]	; 0xfffffd24
   188cc:	bl	11b94 <strlen@plt>
   188d0:	ldr	r3, [fp, #-732]	; 0xfffffd24
   188d4:	cmp	sl, #46	; 0x2e
   188d8:	ldrb	r2, [r7, #1]
   188dc:	add	r3, r3, r0
   188e0:	add	r3, r3, #9
   188e4:	bic	r3, r3, #7
   188e8:	sub	sp, sp, r3
   188ec:	add	r3, sp, #16
   188f0:	str	r3, [fp, #-732]	; 0xfffffd24
   188f4:	beq	18ac4 <__assert_fail@plt+0x6d50>
   188f8:	add	r1, r7, #1
   188fc:	ldr	r0, [fp, #-732]	; 0xfffffd24
   18900:	ldr	r8, [fp, #-720]	; 0xfffffd30
   18904:	b	18914 <__assert_fail@plt+0x6ba0>
   18908:	mov	sl, r2
   1890c:	ldrb	r2, [r1, #1]!
   18910:	mov	r0, r3
   18914:	mov	r3, r0
   18918:	cmp	r2, #0
   1891c:	strb	sl, [r3], #1
   18920:	bne	18908 <__assert_fail@plt+0x6b94>
   18924:	cmp	r7, r1
   18928:	str	r8, [fp, #-720]	; 0xfffffd30
   1892c:	bcs	18948 <__assert_fail@plt+0x6bd4>
   18930:	ldrb	r2, [r1, #-1]
   18934:	cmp	r2, #47	; 0x2f
   18938:	beq	18948 <__assert_fail@plt+0x6bd4>
   1893c:	mov	r2, #47	; 0x2f
   18940:	strb	r2, [r3]
   18944:	add	r3, r0, #2
   18948:	cmp	r9, #0
   1894c:	beq	1896c <__assert_fail@plt+0x6bf8>
   18950:	ldr	r8, [fp, #-720]	; 0xfffffd30
   18954:	mov	r2, r8
   18958:	strb	r9, [r3], #1
   1895c:	ldrb	r9, [r2, #1]!
   18960:	cmp	r9, #0
   18964:	bne	18958 <__assert_fail@plt+0x6be4>
   18968:	str	r8, [fp, #-720]	; 0xfffffd30
   1896c:	mov	r2, #0
   18970:	strb	r2, [r3]
   18974:	b	181a8 <__assert_fail@plt+0x6434>
   18978:	mov	r1, r5
   1897c:	mov	r2, #304	; 0x130
   18980:	bl	234e0 <_obstack_memory_used@@Base+0x3248>
   18984:	str	r0, [r4, #3604]	; 0xe14
   18988:	ldr	r3, [r4, #4092]	; 0xffc
   1898c:	ldr	r5, [r4, #3104]	; 0xc20
   18990:	lsl	r3, r3, #1
   18994:	str	r3, [r4, #4092]	; 0xffc
   18998:	b	18128 <__assert_fail@plt+0x63b4>
   1899c:	ldr	r0, [fp, #-720]	; 0xfffffd30
   189a0:	bl	14a0c <__assert_fail@plt+0x2c98>
   189a4:	cmp	r0, #0
   189a8:	str	r0, [r5, #144]	; 0x90
   189ac:	movne	r3, #1
   189b0:	strbne	r3, [r4, #3112]	; 0xc28
   189b4:	b	18168 <__assert_fail@plt+0x63f4>
   189b8:	movw	r3, #41424	; 0xa1d0
   189bc:	movt	r3, #3
   189c0:	ldrd	r0, [r5, #64]	; 0x40
   189c4:	sub	r2, fp, #692	; 0x2b4
   189c8:	ldrd	r6, [r3, #216]	; 0xd8
   189cc:	ldr	r3, [r4, #4032]	; 0xfc0
   189d0:	strd	r6, [sp, #8]
   189d4:	mov	r6, #1
   189d8:	mov	r7, #0
   189dc:	strd	r6, [sp]
   189e0:	bl	1c630 <__assert_fail@plt+0xa8bc>
   189e4:	mov	r1, #0
   189e8:	bl	1ddac <__assert_fail@plt+0xc038>
   189ec:	ldr	r3, [r4, #3152]	; 0xc50
   189f0:	cmp	r0, r3
   189f4:	strgt	r0, [r4, #3152]	; 0xc50
   189f8:	b	18288 <__assert_fail@plt+0x6514>
   189fc:	mov	r2, #0
   18a00:	mov	r3, #0
   18a04:	ldr	r0, [fp, #-720]	; 0xfffffd30
   18a08:	sub	r1, fp, #732	; 0x2dc
   18a0c:	strd	r2, [r1]
   18a10:	b	182b4 <__assert_fail@plt+0x6540>
   18a14:	ldr	r3, [r5, #32]
   18a18:	str	r0, [r5, #136]	; 0x88
   18a1c:	and	r3, r3, #61440	; 0xf000
   18a20:	cmp	r3, #40960	; 0xa000
   18a24:	bne	18248 <__assert_fail@plt+0x64d4>
   18a28:	ldrb	r3, [r6, #-4080]	; 0xfffff010
   18a2c:	cmp	r3, #0
   18a30:	bne	18650 <__assert_fail@plt+0x68dc>
   18a34:	mov	r3, #6
   18a38:	str	r3, [r5, #120]	; 0x78
   18a3c:	b	18258 <__assert_fail@plt+0x64e4>
   18a40:	bl	11bb8 <__errno_location@plt>
   18a44:	mov	ip, r0
   18a48:	ldr	r2, [pc, #1012]	; 18e44 <__assert_fail@plt+0x70d0>
   18a4c:	ldrd	r0, [r5, #16]
   18a50:	ldrd	r8, [r2, #-8]
   18a54:	cmp	r1, r9
   18a58:	cmpeq	r0, r8
   18a5c:	beq	18d94 <__assert_fail@plt+0x7020>
   18a60:	mov	r3, #0
   18a64:	mov	r1, sl
   18a68:	ldr	r0, [fp, #-732]	; 0xfffffd24
   18a6c:	mov	r8, ip
   18a70:	str	r3, [ip]
   18a74:	bl	1aaac <__assert_fail@plt+0x8d38>
   18a78:	cmp	r0, #0
   18a7c:	mov	r3, #0
   18a80:	ble	18cbc <__assert_fail@plt+0x6f48>
   18a84:	mov	r0, r3
   18a88:	mov	r7, #1
   18a8c:	mov	r3, #2
   18a90:	cmp	r0, #0
   18a94:	str	r3, [r5, #136]	; 0x88
   18a98:	strb	r7, [r4, #3113]	; 0xc29
   18a9c:	bne	18b80 <__assert_fail@plt+0x6e0c>
   18aa0:	b	18634 <__assert_fail@plt+0x68c0>
   18aa4:	bl	146a4 <__assert_fail@plt+0x2930>
   18aa8:	ldr	r7, [r6, #-4084]	; 0xfffff00c
   18aac:	add	sl, r5, #16
   18ab0:	cmp	r7, #4
   18ab4:	beq	183a8 <__assert_fail@plt+0x6634>
   18ab8:	ldr	r3, [fp, #-720]	; 0xfffffd30
   18abc:	str	r3, [fp, #-732]	; 0xfffffd24
   18ac0:	b	18558 <__assert_fail@plt+0x67e4>
   18ac4:	cmp	r2, #0
   18ac8:	bne	188f8 <__assert_fail@plt+0x6b84>
   18acc:	ldr	r3, [fp, #-732]	; 0xfffffd24
   18ad0:	b	18948 <__assert_fail@plt+0x6bd4>
   18ad4:	ldr	r3, [fp, #-736]	; 0xfffffd20
   18ad8:	cmp	r3, #0
   18adc:	beq	18af4 <__assert_fail@plt+0x6d80>
   18ae0:	ldrb	r3, [r6, #-4048]	; 0xfffff030
   18ae4:	cmp	r3, #0
   18ae8:	moveq	r3, #9
   18aec:	streq	r3, [r5, #120]	; 0x78
   18af0:	beq	18258 <__assert_fail@plt+0x64e4>
   18af4:	mov	r3, #3
   18af8:	str	r3, [r5, #120]	; 0x78
   18afc:	b	18258 <__assert_fail@plt+0x64e4>
   18b00:	ldr	r0, [r5, #40]	; 0x28
   18b04:	bl	17088 <__assert_fail@plt+0x5314>
   18b08:	ldr	r3, [r4, #3136]	; 0xc40
   18b0c:	cmp	r0, r3
   18b10:	strgt	r0, [r4, #3136]	; 0xc40
   18b14:	b	1842c <__assert_fail@plt+0x66b8>
   18b18:	ldrb	r9, [r4, #3448]	; 0xd78
   18b1c:	ldr	sl, [r5, #44]	; 0x2c
   18b20:	cmp	r9, #0
   18b24:	beq	18d5c <__assert_fail@plt+0x6fe8>
   18b28:	mov	ip, #0
   18b2c:	movw	r2, #26680	; 0x6838
   18b30:	movt	r2, #2
   18b34:	mvn	r3, #0
   18b38:	mov	r1, ip
   18b3c:	mov	r0, ip
   18b40:	str	r2, [sp]
   18b44:	mov	r2, #1
   18b48:	str	sl, [sp, #8]
   18b4c:	str	ip, [sp, #12]
   18b50:	bl	11d5c <__snprintf_chk@plt>
   18b54:	ldr	r3, [r4, #3132]	; 0xc3c
   18b58:	cmp	r3, r0
   18b5c:	strlt	r0, [r4, #3132]	; 0xc3c
   18b60:	b	18420 <__assert_fail@plt+0x66ac>
   18b64:	ldr	r0, [r5, #40]	; 0x28
   18b68:	bl	17088 <__assert_fail@plt+0x5314>
   18b6c:	ldr	r3, [r4, #3128]	; 0xc38
   18b70:	cmp	r0, r3
   18b74:	strgt	r0, [r4, #3128]	; 0xc38
   18b78:	b	18414 <__assert_fail@plt+0x66a0>
   18b7c:	str	r1, [r5, #136]	; 0x88
   18b80:	bl	11bb8 <__errno_location@plt>
   18b84:	ldr	r7, [r0]
   18b88:	mov	r1, #3
   18b8c:	mov	r0, #0
   18b90:	ldr	r2, [fp, #-732]	; 0xfffffd24
   18b94:	bl	223e4 <_obstack_memory_used@@Base+0x214c>
   18b98:	mov	r3, r0
   18b9c:	movw	r2, #35228	; 0x899c
   18ba0:	movt	r2, #2
   18ba4:	mov	r0, #0
   18ba8:	mov	r1, r7
   18bac:	bl	11a8c <error@plt>
   18bb0:	b	18634 <__assert_fail@plt+0x68c0>
   18bb4:	cmp	r0, #0
   18bb8:	bne	18bf0 <__assert_fail@plt+0x6e7c>
   18bbc:	ldr	r9, [fp, #-736]	; 0xfffffd20
   18bc0:	b	181fc <__assert_fail@plt+0x6488>
   18bc4:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   18bc8:	cmp	r3, #0
   18bcc:	cmpne	r3, #6
   18bd0:	clz	r3, r3
   18bd4:	lsr	r3, r3, #5
   18bd8:	bne	18368 <__assert_fail@plt+0x65f4>
   18bdc:	b	1833c <__assert_fail@plt+0x65c8>
   18be0:	bl	11bb8 <__errno_location@plt>
   18be4:	ldr	r3, [r0]
   18be8:	cmp	r3, #2
   18bec:	beq	18554 <__assert_fail@plt+0x67e0>
   18bf0:	mov	r2, #5
   18bf4:	movw	r1, #26752	; 0x6880
   18bf8:	movt	r1, #2
   18bfc:	mov	r0, #0
   18c00:	bl	11984 <dcgettext@plt>
   18c04:	mov	r6, #0
   18c08:	sub	r3, fp, #732	; 0x2dc
   18c0c:	ldr	r2, [fp, #-732]	; 0xfffffd24
   18c10:	mov	r7, #0
   18c14:	mov	r1, r0
   18c18:	mov	r0, #1
   18c1c:	strd	r6, [r3]
   18c20:	bl	14f94 <__assert_fail@plt+0x3220>
   18c24:	ldr	r3, [pc, #528]	; 18e3c <__assert_fail@plt+0x70c8>
   18c28:	str	r3, [r5, #128]	; 0x80
   18c2c:	b	182c8 <__assert_fail@plt+0x6554>
   18c30:	ldrb	r2, [r6, #-4086]	; 0xfffff00a
   18c34:	cmp	r2, #0
   18c38:	beq	18ca8 <__assert_fail@plt+0x6f34>
   18c3c:	cmp	r3, #0
   18c40:	bne	18368 <__assert_fail@plt+0x65f4>
   18c44:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   18c48:	cmp	r3, #5
   18c4c:	bne	18ca8 <__assert_fail@plt+0x6f34>
   18c50:	ldr	r3, [r4, #3444]	; 0xd74
   18c54:	cmp	r3, #3
   18c58:	beq	18368 <__assert_fail@plt+0x65f4>
   18c5c:	ldrb	r3, [r4, #3580]	; 0xdfc
   18c60:	cmp	r3, #0
   18c64:	beq	18ca8 <__assert_fail@plt+0x6f34>
   18c68:	mov	r0, #14
   18c6c:	bl	13e44 <__assert_fail@plt+0x20d0>
   18c70:	cmp	r0, #0
   18c74:	bne	18368 <__assert_fail@plt+0x65f4>
   18c78:	mov	r0, #16
   18c7c:	bl	13e44 <__assert_fail@plt+0x20d0>
   18c80:	cmp	r0, #0
   18c84:	bne	18368 <__assert_fail@plt+0x65f4>
   18c88:	mov	r0, #17
   18c8c:	bl	13e44 <__assert_fail@plt+0x20d0>
   18c90:	cmp	r0, #0
   18c94:	bne	18368 <__assert_fail@plt+0x65f4>
   18c98:	mov	r0, #21
   18c9c:	bl	13e44 <__assert_fail@plt+0x20d0>
   18ca0:	cmp	r0, #0
   18ca4:	bne	18368 <__assert_fail@plt+0x65f4>
   18ca8:	mov	r2, #0
   18cac:	mov	r3, #0
   18cb0:	sub	r1, fp, #732	; 0x2dc
   18cb4:	strd	r2, [r1]
   18cb8:	b	182b0 <__assert_fail@plt+0x653c>
   18cbc:	ldr	r1, [r8]
   18cc0:	lsr	r0, r0, #31
   18cc4:	ldr	r2, [pc, #376]	; 18e44 <__assert_fail@plt+0x70d0>
   18cc8:	sub	r3, r1, #22
   18ccc:	bic	r3, r3, #16
   18cd0:	cmp	r3, #0
   18cd4:	cmpne	r1, #95	; 0x5f
   18cd8:	bne	18ce4 <__assert_fail@plt+0x6f70>
   18cdc:	ldrd	r8, [r5, #16]
   18ce0:	strd	r8, [r2, #-8]
   18ce4:	cmp	r7, #0
   18ce8:	movne	r3, #1
   18cec:	bne	18a90 <__assert_fail@plt+0x6d1c>
   18cf0:	ldrb	r7, [r4, #3113]	; 0xc29
   18cf4:	mov	r3, #0
   18cf8:	b	18a90 <__assert_fail@plt+0x6d1c>
   18cfc:	bl	11bb8 <__errno_location@plt>
   18d00:	mov	r3, #95	; 0x5f
   18d04:	mov	ip, #0
   18d08:	str	r3, [r0]
   18d0c:	b	187d8 <__assert_fail@plt+0x6a64>
   18d10:	ldrb	r3, [r4, #3580]	; 0xdfc
   18d14:	cmp	r3, #0
   18d18:	beq	1830c <__assert_fail@plt+0x6598>
   18d1c:	mov	r0, #19
   18d20:	bl	13e44 <__assert_fail@plt+0x20d0>
   18d24:	cmp	r0, #0
   18d28:	bne	18368 <__assert_fail@plt+0x65f4>
   18d2c:	mov	r0, #18
   18d30:	bl	13e44 <__assert_fail@plt+0x20d0>
   18d34:	cmp	r0, #0
   18d38:	bne	18368 <__assert_fail@plt+0x65f4>
   18d3c:	mov	r0, #20
   18d40:	bl	13e44 <__assert_fail@plt+0x20d0>
   18d44:	cmp	r0, #0
   18d48:	bne	18368 <__assert_fail@plt+0x65f4>
   18d4c:	b	1830c <__assert_fail@plt+0x6598>
   18d50:	bl	2384c <_obstack_memory_used@@Base+0x35b4>
   18d54:	mov	r7, r0
   18d58:	b	186c8 <__assert_fail@plt+0x6954>
   18d5c:	mov	r0, sl
   18d60:	bl	1d408 <__assert_fail@plt+0xb694>
   18d64:	cmp	r0, #0
   18d68:	beq	18b28 <__assert_fail@plt+0x6db4>
   18d6c:	mov	r1, r9
   18d70:	bl	1ddac <__assert_fail@plt+0xc038>
   18d74:	bic	r0, r0, r0, asr #31
   18d78:	b	18b54 <__assert_fail@plt+0x6de0>
   18d7c:	ldr	r0, [r5, #4]
   18d80:	bl	14a0c <__assert_fail@plt+0x2c98>
   18d84:	cmp	r0, #0
   18d88:	mvnne	r3, #0
   18d8c:	strne	r3, [r5, #144]	; 0x90
   18d90:	b	186d4 <__assert_fail@plt+0x6960>
   18d94:	mov	r3, #95	; 0x5f
   18d98:	mov	r0, #0
   18d9c:	str	r3, [ip]
   18da0:	b	18ce4 <__assert_fail@plt+0x6f70>
   18da4:	mov	r2, #5
   18da8:	movw	r1, #26772	; 0x6894
   18dac:	movt	r1, #2
   18db0:	bl	11984 <dcgettext@plt>
   18db4:	mov	r1, r0
   18db8:	ldr	r0, [fp, #-736]	; 0xfffffd20
   18dbc:	ldr	r2, [fp, #-732]	; 0xfffffd24
   18dc0:	bl	14f94 <__assert_fail@plt+0x3220>
   18dc4:	ldr	r9, [r5, #4]
   18dc8:	cmp	r9, #0
   18dcc:	moveq	r7, r9
   18dd0:	bne	1866c <__assert_fail@plt+0x68f8>
   18dd4:	b	18720 <__assert_fail@plt+0x69ac>
   18dd8:	bl	11bb8 <__errno_location@plt>
   18ddc:	ldr	r2, [r0]
   18de0:	sub	r3, r2, #22
   18de4:	bic	r3, r3, #16
   18de8:	cmp	r3, #0
   18dec:	cmpne	r2, #95	; 0x5f
   18df0:	moveq	ip, #1
   18df4:	movne	ip, #0
   18df8:	bne	187d8 <__assert_fail@plt+0x6a64>
   18dfc:	ldrd	r0, [r5, #16]
   18e00:	mov	ip, #0
   18e04:	strd	r0, [r7, #-8]
   18e08:	b	187d8 <__assert_fail@plt+0x6a64>
   18e0c:	mov	r0, r9
   18e10:	bl	2384c <_obstack_memory_used@@Base+0x35b4>
   18e14:	mov	r7, r0
   18e18:	b	186c8 <__assert_fail@plt+0x6954>
   18e1c:	bl	11bb8 <__errno_location@plt>
   18e20:	ldr	r3, [pc, #20]	; 18e3c <__assert_fail@plt+0x70c8>
   18e24:	mov	r2, #95	; 0x5f
   18e28:	mov	ip, r0
   18e2c:	str	r2, [r0]
   18e30:	str	r3, [r5, #128]	; 0x80
   18e34:	b	188a0 <__assert_fail@plt+0x6b2c>
   18e38:	andeq	fp, r3, r0, ror #5
   18e3c:	andeq	sl, r3, r0, lsr #5
   18e40:	andeq	fp, r3, r8, asr #6
   18e44:	andeq	fp, r3, r8, asr r3
   18e48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e4c:	mov	r4, r0
   18e50:	mov	r5, r1
   18e54:	strd	r6, [sp, #8]
   18e58:	mov	r7, #0
   18e5c:	strd	r8, [sp, #16]
   18e60:	strd	sl, [sp, #24]
   18e64:	str	lr, [sp, #32]
   18e68:	sub	sp, sp, #708	; 0x2c4
   18e6c:	str	r0, [sp, #32]
   18e70:	str	r2, [sp, #36]	; 0x24
   18e74:	bl	11bb8 <__errno_location@plt>
   18e78:	mov	r6, r0
   18e7c:	mov	r0, r4
   18e80:	str	r7, [r6]
   18e84:	bl	11aa4 <opendir@plt>
   18e88:	subs	r8, r0, #0
   18e8c:	beq	19428 <__assert_fail@plt+0x76b4>
   18e90:	movw	fp, #41776	; 0xa330
   18e94:	movt	fp, #3
   18e98:	ldr	r3, [fp, #3160]	; 0xc58
   18e9c:	cmp	r3, #0
   18ea0:	movweq	r7, #49960	; 0xc328
   18ea4:	movteq	r7, #3
   18ea8:	beq	18ff0 <__assert_fail@plt+0x727c>
   18eac:	bl	11cd8 <dirfd@plt>
   18eb0:	cmp	r0, #0
   18eb4:	blt	19128 <__assert_fail@plt+0x73b4>
   18eb8:	mov	r3, #256	; 0x100
   18ebc:	add	r4, sp, #48	; 0x30
   18ec0:	mov	r2, r4
   18ec4:	movw	r1, #37260	; 0x918c
   18ec8:	movt	r1, #2
   18ecc:	str	r3, [sp]
   18ed0:	mov	r3, #4096	; 0x1000
   18ed4:	bl	148a0 <__assert_fail@plt+0x2b2c>
   18ed8:	lsr	r7, r0, #31
   18edc:	cmp	r7, #0
   18ee0:	bne	19154 <__assert_fail@plt+0x73e0>
   18ee4:	ldrd	r2, [r4]
   18ee8:	mov	r0, #16
   18eec:	strd	r2, [sp, #24]
   18ef0:	ldrd	r2, [r4, #96]	; 0x60
   18ef4:	strd	r2, [sp, #16]
   18ef8:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   18efc:	ldrd	r2, [sp, #24]
   18f00:	mov	r9, r0
   18f04:	mov	r1, r0
   18f08:	ldr	r0, [fp, #3160]	; 0xc58
   18f0c:	strd	r2, [r9, #8]
   18f10:	ldrd	r2, [sp, #16]
   18f14:	strd	r2, [r9]
   18f18:	bl	1c3f8 <__assert_fail@plt+0xa684>
   18f1c:	cmp	r0, #0
   18f20:	beq	1944c <__assert_fail@plt+0x76d8>
   18f24:	cmp	r9, r0
   18f28:	beq	18f9c <__assert_fail@plt+0x7228>
   18f2c:	mov	r0, r9
   18f30:	bl	1b2b4 <__assert_fail@plt+0x9540>
   18f34:	mov	r2, #5
   18f38:	movw	r1, #26884	; 0x6904
   18f3c:	movt	r1, #2
   18f40:	mov	r0, r7
   18f44:	bl	11984 <dcgettext@plt>
   18f48:	mov	r4, r0
   18f4c:	mov	r1, #3
   18f50:	ldr	r2, [sp, #32]
   18f54:	mov	r0, r7
   18f58:	bl	223e4 <_obstack_memory_used@@Base+0x214c>
   18f5c:	mov	r3, r0
   18f60:	mov	r2, r4
   18f64:	mov	r1, r7
   18f68:	mov	r0, r7
   18f6c:	bl	11a8c <error@plt>
   18f70:	mov	r0, r8
   18f74:	bl	11d38 <closedir@plt>
   18f78:	mov	r3, #2
   18f7c:	str	r3, [fp, #3440]	; 0xd70
   18f80:	add	sp, sp, #708	; 0x2c4
   18f84:	ldrd	r4, [sp]
   18f88:	ldrd	r6, [sp, #8]
   18f8c:	ldrd	r8, [sp, #16]
   18f90:	ldrd	sl, [sp, #24]
   18f94:	add	sp, sp, #32
   18f98:	pop	{pc}		; (ldr pc, [sp], #4)
   18f9c:	movw	r7, #49960	; 0xc328
   18fa0:	movt	r7, #3
   18fa4:	ldrd	r2, [r4]
   18fa8:	ldr	r1, [r7, #-4032]	; 0xfffff040
   18fac:	ldr	r0, [r7, #-4028]	; 0xfffff044
   18fb0:	strd	r2, [sp, #16]
   18fb4:	ldrd	r2, [r4, #96]	; 0x60
   18fb8:	sub	r0, r0, r1
   18fbc:	cmp	r0, #15
   18fc0:	bhi	18fdc <__assert_fail@plt+0x7268>
   18fc4:	mov	r1, #16
   18fc8:	ldr	r0, [pc, #1152]	; 19450 <__assert_fail@plt+0x76dc>
   18fcc:	strd	r2, [sp, #24]
   18fd0:	bl	200a0 <_obstack_newchunk@@Base>
   18fd4:	ldr	r1, [r7, #-4032]	; 0xfffff040
   18fd8:	ldrd	r2, [sp, #24]
   18fdc:	add	r0, r1, #16
   18fe0:	str	r0, [r7, #-4032]	; 0xfffff040
   18fe4:	strd	r2, [r1]
   18fe8:	ldrd	r2, [sp, #16]
   18fec:	strd	r2, [r1, #8]
   18ff0:	bl	14818 <__assert_fail@plt+0x2aa4>
   18ff4:	ldrb	r3, [r7, #-4000]	; 0xfffff060
   18ff8:	cmp	r3, #0
   18ffc:	beq	19118 <__assert_fail@plt+0x73a4>
   19000:	movw	r4, #41424	; 0xa1d0
   19004:	movt	r4, #3
   19008:	ldrb	r3, [r4, #228]	; 0xe4
   1900c:	cmp	r3, #0
   19010:	beq	19408 <__assert_fail@plt+0x7694>
   19014:	ldrb	r3, [fp, #3588]	; 0xe04
   19018:	mov	r2, #0
   1901c:	strb	r2, [r4, #228]	; 0xe4
   19020:	cmp	r3, r2
   19024:	bne	193f4 <__assert_fail@plt+0x7680>
   19028:	ldrb	r4, [r7, #-4088]	; 0xfffff008
   1902c:	cmp	r4, #0
   19030:	bne	193bc <__assert_fail@plt+0x7648>
   19034:	ldr	ip, [pc, #1048]	; 19454 <__assert_fail@plt+0x76e0>
   19038:	mov	r1, #1
   1903c:	cmp	r5, #0
   19040:	mov	r3, #0
   19044:	mvn	r2, #0
   19048:	str	r1, [sp]
   1904c:	str	r4, [sp, #8]
   19050:	ldr	r1, [r7, #-3996]	; 0xfffff064
   19054:	str	ip, [sp, #4]
   19058:	ldr	r0, [sp, #32]
   1905c:	movne	r0, r5
   19060:	bl	15d20 <__assert_fail@plt+0x3fac>
   19064:	mov	r0, r4
   19068:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1906c:	movw	r0, #26928	; 0x6930
   19070:	movt	r0, #2
   19074:	mov	r1, #2
   19078:	bl	15420 <__assert_fail@plt+0x36ac>
   1907c:	movw	r3, #26932	; 0x6934
   19080:	movt	r3, #2
   19084:	str	r3, [sp, #40]	; 0x28
   19088:	movw	r3, #20560	; 0x5050
   1908c:	movt	r3, #2
   19090:	str	r3, [sp, #44]	; 0x2c
   19094:	mov	r3, #0
   19098:	mov	r9, r3
   1909c:	str	r3, [sp, #16]
   190a0:	str	r3, [sp, #24]
   190a4:	mov	r0, r8
   190a8:	str	r9, [r6]
   190ac:	bl	11cb4 <readdir64@plt>
   190b0:	subs	r5, r0, #0
   190b4:	beq	19184 <__assert_fail@plt+0x7410>
   190b8:	ldr	r3, [r7, #-3948]	; 0xfffff094
   190bc:	add	r4, r5, #19
   190c0:	cmp	r3, #2
   190c4:	beq	192c0 <__assert_fail@plt+0x754c>
   190c8:	ldrb	r2, [r5, #19]
   190cc:	cmp	r2, #46	; 0x2e
   190d0:	beq	1929c <__assert_fail@plt+0x7528>
   190d4:	cmp	r3, #0
   190d8:	bne	192c0 <__assert_fail@plt+0x754c>
   190dc:	ldr	sl, [r7, #-3940]	; 0xfffff09c
   190e0:	cmp	sl, #0
   190e4:	bne	190f8 <__assert_fail@plt+0x7384>
   190e8:	b	192c0 <__assert_fail@plt+0x754c>
   190ec:	ldr	sl, [sl, #4]
   190f0:	cmp	sl, #0
   190f4:	beq	192c0 <__assert_fail@plt+0x754c>
   190f8:	mov	r2, #4
   190fc:	mov	r1, r4
   19100:	ldr	r0, [sl]
   19104:	bl	11ab0 <fnmatch@plt>
   19108:	cmp	r0, #0
   1910c:	bne	190ec <__assert_fail@plt+0x7378>
   19110:	bl	157d0 <__assert_fail@plt+0x3a5c>
   19114:	b	190a4 <__assert_fail@plt+0x7330>
   19118:	ldrb	r3, [r7, #-3999]	; 0xfffff061
   1911c:	cmp	r3, #0
   19120:	beq	1907c <__assert_fail@plt+0x7308>
   19124:	b	19000 <__assert_fail@plt+0x728c>
   19128:	mov	r0, #256	; 0x100
   1912c:	add	r4, sp, #48	; 0x30
   19130:	ldr	r1, [sp, #32]
   19134:	mov	r3, r7
   19138:	mov	r2, r4
   1913c:	str	r0, [sp]
   19140:	mvn	r0, #99	; 0x63
   19144:	bl	148a0 <__assert_fail@plt+0x2b2c>
   19148:	lsr	r7, r0, #31
   1914c:	cmp	r7, #0
   19150:	beq	18ee4 <__assert_fail@plt+0x7170>
   19154:	mov	r2, #5
   19158:	movw	r1, #26844	; 0x68dc
   1915c:	movt	r1, #2
   19160:	mov	r0, #0
   19164:	bl	11984 <dcgettext@plt>
   19168:	mov	r1, r0
   1916c:	ldr	r2, [sp, #32]
   19170:	ldr	r0, [sp, #36]	; 0x24
   19174:	bl	14f94 <__assert_fail@plt+0x3220>
   19178:	mov	r0, r8
   1917c:	bl	11d38 <closedir@plt>
   19180:	b	18f80 <__assert_fail@plt+0x720c>
   19184:	ldr	r3, [r6]
   19188:	cmp	r3, #0
   1918c:	beq	191b8 <__assert_fail@plt+0x7444>
   19190:	mov	r2, #5
   19194:	ldr	r1, [sp, #40]	; 0x28
   19198:	bl	11984 <dcgettext@plt>
   1919c:	mov	r1, r0
   191a0:	ldr	r2, [sp, #32]
   191a4:	ldr	r0, [sp, #36]	; 0x24
   191a8:	bl	14f94 <__assert_fail@plt+0x3220>
   191ac:	ldr	r3, [r6]
   191b0:	cmp	r3, #75	; 0x4b
   191b4:	beq	19110 <__assert_fail@plt+0x739c>
   191b8:	mov	r0, r8
   191bc:	bl	11d38 <closedir@plt>
   191c0:	cmp	r0, #0
   191c4:	bne	19394 <__assert_fail@plt+0x7620>
   191c8:	bl	165b0 <__assert_fail@plt+0x483c>
   191cc:	ldrb	r3, [r7, #-4000]	; 0xfffff060
   191d0:	cmp	r3, #0
   191d4:	bne	19384 <__assert_fail@plt+0x7610>
   191d8:	ldr	r3, [fp, #3088]	; 0xc10
   191dc:	cmp	r3, #0
   191e0:	beq	191f0 <__assert_fail@plt+0x747c>
   191e4:	ldrb	r3, [fp, #3085]	; 0xc0d
   191e8:	cmp	r3, #0
   191ec:	beq	19288 <__assert_fail@plt+0x7514>
   191f0:	ldr	ip, [pc, #608]	; 19458 <__assert_fail@plt+0x76e4>
   191f4:	mov	r2, #512	; 0x200
   191f8:	mov	r3, #0
   191fc:	strd	r2, [sp]
   19200:	add	r2, sp, #49	; 0x31
   19204:	ldr	r0, [sp, #16]
   19208:	ldrd	r4, [ip, #-8]
   1920c:	ldr	r1, [sp, #24]
   19210:	ldr	r3, [fp, #4004]	; 0xfa4
   19214:	strd	r4, [sp, #8]
   19218:	bl	1c630 <__assert_fail@plt+0xa8bc>
   1921c:	mov	r4, r0
   19220:	bl	11b94 <strlen@plt>
   19224:	movw	r3, #41424	; 0xa1d0
   19228:	movt	r3, #3
   1922c:	ldrb	r2, [fp, #3588]	; 0xe04
   19230:	mov	r1, #32
   19234:	add	r5, r4, r0
   19238:	ldrb	r3, [r3, #210]	; 0xd2
   1923c:	add	r5, r5, #1
   19240:	sub	r6, r4, #1
   19244:	strb	r1, [r4, #-1]
   19248:	cmp	r2, #0
   1924c:	strb	r3, [r4, r0]
   19250:	bne	19414 <__assert_fail@plt+0x76a0>
   19254:	mov	r2, #5
   19258:	movw	r1, #26980	; 0x6964
   1925c:	movt	r1, #2
   19260:	mov	r0, #0
   19264:	bl	11984 <dcgettext@plt>
   19268:	mov	r4, r0
   1926c:	bl	11b94 <strlen@plt>
   19270:	mov	r1, r0
   19274:	mov	r0, r4
   19278:	bl	15420 <__assert_fail@plt+0x36ac>
   1927c:	sub	r1, r5, r6
   19280:	mov	r0, r6
   19284:	bl	15420 <__assert_fail@plt+0x36ac>
   19288:	ldr	r3, [fp, #3104]	; 0xc20
   1928c:	cmp	r3, #0
   19290:	beq	18f80 <__assert_fail@plt+0x720c>
   19294:	bl	17d2c <__assert_fail@plt+0x5fb8>
   19298:	b	18f80 <__assert_fail@plt+0x720c>
   1929c:	cmp	r3, #0
   192a0:	beq	19110 <__assert_fail@plt+0x739c>
   192a4:	ldrb	r3, [r5, #20]
   192a8:	cmp	r3, #46	; 0x2e
   192ac:	moveq	r3, #2
   192b0:	movne	r3, #1
   192b4:	ldrb	r3, [r4, r3]
   192b8:	cmp	r3, #0
   192bc:	beq	19110 <__assert_fail@plt+0x739c>
   192c0:	ldr	sl, [r7, #-3944]	; 0xfffff098
   192c4:	cmp	sl, #0
   192c8:	bne	192dc <__assert_fail@plt+0x7568>
   192cc:	b	192f8 <__assert_fail@plt+0x7584>
   192d0:	ldr	sl, [sl, #4]
   192d4:	cmp	sl, #0
   192d8:	beq	192f8 <__assert_fail@plt+0x7584>
   192dc:	mov	r2, #4
   192e0:	mov	r1, r4
   192e4:	ldr	r0, [sl]
   192e8:	bl	11ab0 <fnmatch@plt>
   192ec:	cmp	r0, #0
   192f0:	bne	192d0 <__assert_fail@plt+0x755c>
   192f4:	b	19110 <__assert_fail@plt+0x739c>
   192f8:	ldrb	r3, [r5, #18]
   192fc:	sub	r3, r3, #1
   19300:	uxtb	r3, r3
   19304:	cmp	r3, #13
   19308:	movhi	r1, #0
   1930c:	bhi	1931c <__assert_fail@plt+0x75a8>
   19310:	ldr	r2, [sp, #44]	; 0x2c
   19314:	add	r3, r2, r3, lsl #2
   19318:	ldr	r1, [r3, #416]	; 0x1a0
   1931c:	mov	r2, #0
   19320:	mov	r0, r4
   19324:	ldr	r3, [sp, #32]
   19328:	bl	180e0 <__assert_fail@plt+0x636c>
   1932c:	ldr	r2, [sp, #16]
   19330:	ldr	r3, [fp, #3088]	; 0xc10
   19334:	adds	r2, r2, r0
   19338:	str	r2, [sp, #16]
   1933c:	ldr	r2, [sp, #24]
   19340:	adc	r2, r2, r1
   19344:	cmp	r3, #1
   19348:	str	r2, [sp, #24]
   1934c:	bne	19110 <__assert_fail@plt+0x739c>
   19350:	ldr	r3, [fp, #3100]	; 0xc1c
   19354:	cmp	r3, #6
   19358:	bne	19110 <__assert_fail@plt+0x739c>
   1935c:	ldrb	r3, [fp, #3085]	; 0xc0d
   19360:	cmp	r3, #0
   19364:	bne	19110 <__assert_fail@plt+0x739c>
   19368:	ldrb	r3, [r7, #-4000]	; 0xfffff060
   1936c:	cmp	r3, #0
   19370:	bne	19110 <__assert_fail@plt+0x739c>
   19374:	bl	165b0 <__assert_fail@plt+0x483c>
   19378:	bl	17d2c <__assert_fail@plt+0x5fb8>
   1937c:	bl	14818 <__assert_fail@plt+0x2aa4>
   19380:	b	19110 <__assert_fail@plt+0x739c>
   19384:	mov	r1, #0
   19388:	ldr	r0, [sp, #32]
   1938c:	bl	14af0 <__assert_fail@plt+0x2d7c>
   19390:	b	191d8 <__assert_fail@plt+0x7464>
   19394:	mov	r2, #5
   19398:	movw	r1, #26956	; 0x694c
   1939c:	movt	r1, #2
   193a0:	mov	r0, #0
   193a4:	bl	11984 <dcgettext@plt>
   193a8:	mov	r1, r0
   193ac:	ldr	r2, [sp, #32]
   193b0:	ldr	r0, [sp, #36]	; 0x24
   193b4:	bl	14f94 <__assert_fail@plt+0x3220>
   193b8:	b	191c8 <__assert_fail@plt+0x7454>
   193bc:	mov	r1, #2
   193c0:	ldr	r0, [sp, #32]
   193c4:	bl	1a19c <__assert_fail@plt+0x8428>
   193c8:	subs	r4, r0, #0
   193cc:	bne	19034 <__assert_fail@plt+0x72c0>
   193d0:	mov	r2, #5
   193d4:	movw	r1, #26728	; 0x6868
   193d8:	movt	r1, #2
   193dc:	bl	11984 <dcgettext@plt>
   193e0:	mov	r1, r0
   193e4:	ldr	r2, [sp, #32]
   193e8:	ldr	r0, [sp, #36]	; 0x24
   193ec:	bl	14f94 <__assert_fail@plt+0x3220>
   193f0:	b	19034 <__assert_fail@plt+0x72c0>
   193f4:	movw	r0, #26704	; 0x6850
   193f8:	movt	r0, #2
   193fc:	mov	r1, #2
   19400:	bl	15420 <__assert_fail@plt+0x36ac>
   19404:	b	19028 <__assert_fail@plt+0x72b4>
   19408:	mov	r0, #10
   1940c:	bl	14d20 <__assert_fail@plt+0x2fac>
   19410:	b	19014 <__assert_fail@plt+0x72a0>
   19414:	movw	r0, #26704	; 0x6850
   19418:	movt	r0, #2
   1941c:	mov	r1, #2
   19420:	bl	15420 <__assert_fail@plt+0x36ac>
   19424:	b	19254 <__assert_fail@plt+0x74e0>
   19428:	mov	r2, #5
   1942c:	movw	r1, #26816	; 0x68c0
   19430:	movt	r1, #2
   19434:	bl	11984 <dcgettext@plt>
   19438:	mov	r1, r0
   1943c:	ldr	r2, [sp, #32]
   19440:	ldr	r0, [sp, #36]	; 0x24
   19444:	bl	14f94 <__assert_fail@plt+0x3220>
   19448:	b	18f80 <__assert_fail@plt+0x720c>
   1944c:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   19450:	andeq	fp, r3, ip, asr r3
   19454:	muleq	r3, r0, r3
   19458:	andeq	fp, r3, r0, ror #5
   1945c:	subs	r4, r0, #0
   19460:	str	r7, [sp, #-12]!
   19464:	stmib	sp, {fp, lr}
   19468:	sub	sp, sp, #60	; 0x3c
   1946c:	beq	194b4 <__assert_fail@plt+0x7740>
   19470:	movw	r3, #41760	; 0xa320
   19474:	movt	r3, #3
   19478:	ldr	r5, [r3]
   1947c:	mov	r2, #5
   19480:	movw	r1, #27000	; 0x6978
   19484:	movt	r1, #2
   19488:	mov	r0, #0
   1948c:	bl	11984 <dcgettext@plt>
   19490:	movw	r3, #46052	; 0xb3e4
   19494:	movt	r3, #3
   19498:	mov	r2, r0
   1949c:	mov	r1, #1
   194a0:	ldr	r3, [r3]
   194a4:	mov	r0, r5
   194a8:	bl	11c18 <__fprintf_chk@plt>
   194ac:	mov	r0, r4
   194b0:	bl	11b70 <exit@plt>
   194b4:	mov	r2, #5
   194b8:	movw	r1, #27040	; 0x69a0
   194bc:	movt	r1, #2
   194c0:	movw	r5, #41764	; 0xa324
   194c4:	movt	r5, #3
   194c8:	bl	11984 <dcgettext@plt>
   194cc:	movw	r3, #46052	; 0xb3e4
   194d0:	movt	r3, #3
   194d4:	mov	r1, r0
   194d8:	mov	r0, #1
   194dc:	ldr	r2, [r3]
   194e0:	bl	11bf4 <__printf_chk@plt>
   194e4:	mov	r2, #5
   194e8:	movw	r1, #27076	; 0x69c4
   194ec:	movt	r1, #2
   194f0:	mov	r0, r4
   194f4:	bl	11984 <dcgettext@plt>
   194f8:	ldr	r1, [r5]
   194fc:	bl	11864 <fputs_unlocked@plt>
   19500:	mov	r2, #5
   19504:	movw	r1, #27220	; 0x6a54
   19508:	movt	r1, #2
   1950c:	mov	r0, r4
   19510:	bl	11984 <dcgettext@plt>
   19514:	ldr	r1, [r5]
   19518:	bl	11864 <fputs_unlocked@plt>
   1951c:	mov	r2, #5
   19520:	movw	r1, #27296	; 0x6aa0
   19524:	movt	r1, #2
   19528:	mov	r0, r4
   1952c:	bl	11984 <dcgettext@plt>
   19530:	ldr	r1, [r5]
   19534:	bl	11864 <fputs_unlocked@plt>
   19538:	mov	r2, #5
   1953c:	movw	r1, #27568	; 0x6bb0
   19540:	movt	r1, #2
   19544:	mov	r0, r4
   19548:	bl	11984 <dcgettext@plt>
   1954c:	ldr	r1, [r5]
   19550:	bl	11864 <fputs_unlocked@plt>
   19554:	mov	r2, #5
   19558:	movw	r1, #27724	; 0x6c4c
   1955c:	movt	r1, #2
   19560:	mov	r0, r4
   19564:	bl	11984 <dcgettext@plt>
   19568:	ldr	r1, [r5]
   1956c:	bl	11864 <fputs_unlocked@plt>
   19570:	mov	r2, #5
   19574:	movw	r1, #28088	; 0x6db8
   19578:	movt	r1, #2
   1957c:	mov	r0, r4
   19580:	bl	11984 <dcgettext@plt>
   19584:	ldr	r1, [r5]
   19588:	bl	11864 <fputs_unlocked@plt>
   1958c:	mov	r2, #5
   19590:	movw	r1, #28364	; 0x6ecc
   19594:	movt	r1, #2
   19598:	mov	r0, r4
   1959c:	bl	11984 <dcgettext@plt>
   195a0:	ldr	r1, [r5]
   195a4:	bl	11864 <fputs_unlocked@plt>
   195a8:	mov	r2, #5
   195ac:	movw	r1, #28780	; 0x706c
   195b0:	movt	r1, #2
   195b4:	mov	r0, r4
   195b8:	bl	11984 <dcgettext@plt>
   195bc:	ldr	r1, [r5]
   195c0:	bl	11864 <fputs_unlocked@plt>
   195c4:	mov	r2, #5
   195c8:	movw	r1, #28844	; 0x70ac
   195cc:	movt	r1, #2
   195d0:	mov	r0, r4
   195d4:	bl	11984 <dcgettext@plt>
   195d8:	ldr	r1, [r5]
   195dc:	bl	11864 <fputs_unlocked@plt>
   195e0:	mov	r2, #5
   195e4:	movw	r1, #29092	; 0x71a4
   195e8:	movt	r1, #2
   195ec:	mov	r0, r4
   195f0:	bl	11984 <dcgettext@plt>
   195f4:	ldr	r1, [r5]
   195f8:	bl	11864 <fputs_unlocked@plt>
   195fc:	mov	r2, #5
   19600:	movw	r1, #29168	; 0x71f0
   19604:	movt	r1, #2
   19608:	mov	r0, r4
   1960c:	bl	11984 <dcgettext@plt>
   19610:	ldr	r1, [r5]
   19614:	bl	11864 <fputs_unlocked@plt>
   19618:	mov	r2, #5
   1961c:	movw	r1, #29320	; 0x7288
   19620:	movt	r1, #2
   19624:	mov	r0, r4
   19628:	bl	11984 <dcgettext@plt>
   1962c:	ldr	r1, [r5]
   19630:	bl	11864 <fputs_unlocked@plt>
   19634:	mov	r2, #5
   19638:	movw	r1, #29744	; 0x7430
   1963c:	movt	r1, #2
   19640:	mov	r0, r4
   19644:	bl	11984 <dcgettext@plt>
   19648:	ldr	r1, [r5]
   1964c:	bl	11864 <fputs_unlocked@plt>
   19650:	mov	r2, #5
   19654:	movw	r1, #29800	; 0x7468
   19658:	movt	r1, #2
   1965c:	mov	r0, r4
   19660:	bl	11984 <dcgettext@plt>
   19664:	ldr	r1, [r5]
   19668:	bl	11864 <fputs_unlocked@plt>
   1966c:	mov	r2, #5
   19670:	movw	r1, #30156	; 0x75cc
   19674:	movt	r1, #2
   19678:	mov	r0, r4
   1967c:	bl	11984 <dcgettext@plt>
   19680:	ldr	r1, [r5]
   19684:	bl	11864 <fputs_unlocked@plt>
   19688:	mov	r2, #5
   1968c:	movw	r1, #30312	; 0x7668
   19690:	movt	r1, #2
   19694:	mov	r0, r4
   19698:	bl	11984 <dcgettext@plt>
   1969c:	ldr	r1, [r5]
   196a0:	bl	11864 <fputs_unlocked@plt>
   196a4:	mov	r2, #5
   196a8:	movw	r1, #30672	; 0x77d0
   196ac:	movt	r1, #2
   196b0:	mov	r0, r4
   196b4:	bl	11984 <dcgettext@plt>
   196b8:	ldr	r1, [r5]
   196bc:	bl	11864 <fputs_unlocked@plt>
   196c0:	mov	r2, #5
   196c4:	movw	r1, #30976	; 0x7900
   196c8:	movt	r1, #2
   196cc:	mov	r0, r4
   196d0:	bl	11984 <dcgettext@plt>
   196d4:	ldr	r1, [r5]
   196d8:	bl	11864 <fputs_unlocked@plt>
   196dc:	mov	r2, #5
   196e0:	movw	r1, #31564	; 0x7b4c
   196e4:	movt	r1, #2
   196e8:	mov	r0, r4
   196ec:	bl	11984 <dcgettext@plt>
   196f0:	ldr	r1, [r5]
   196f4:	bl	11864 <fputs_unlocked@plt>
   196f8:	mov	r2, #5
   196fc:	movw	r1, #31764	; 0x7c14
   19700:	movt	r1, #2
   19704:	mov	r0, r4
   19708:	bl	11984 <dcgettext@plt>
   1970c:	ldr	r1, [r5]
   19710:	bl	11864 <fputs_unlocked@plt>
   19714:	mov	r2, #5
   19718:	movw	r1, #32408	; 0x7e98
   1971c:	movt	r1, #2
   19720:	mov	r0, r4
   19724:	bl	11984 <dcgettext@plt>
   19728:	ldr	r1, [r5]
   1972c:	bl	11864 <fputs_unlocked@plt>
   19730:	mov	r2, #5
   19734:	movw	r1, #32488	; 0x7ee8
   19738:	movt	r1, #2
   1973c:	mov	r0, r4
   19740:	bl	11984 <dcgettext@plt>
   19744:	ldr	r1, [r5]
   19748:	bl	11864 <fputs_unlocked@plt>
   1974c:	mov	r2, #5
   19750:	movw	r1, #32632	; 0x7f78
   19754:	movt	r1, #2
   19758:	mov	r0, r4
   1975c:	bl	11984 <dcgettext@plt>
   19760:	ldr	r1, [r5]
   19764:	bl	11864 <fputs_unlocked@plt>
   19768:	mov	r2, #5
   1976c:	movw	r1, #33004	; 0x80ec
   19770:	movt	r1, #2
   19774:	mov	r0, r4
   19778:	bl	11984 <dcgettext@plt>
   1977c:	ldr	r1, [r5]
   19780:	bl	11864 <fputs_unlocked@plt>
   19784:	mov	r2, #5
   19788:	movw	r1, #33412	; 0x8284
   1978c:	movt	r1, #2
   19790:	mov	r0, r4
   19794:	bl	11984 <dcgettext@plt>
   19798:	ldr	r1, [r5]
   1979c:	bl	11864 <fputs_unlocked@plt>
   197a0:	mov	r2, #5
   197a4:	movw	r1, #33460	; 0x82b4
   197a8:	movt	r1, #2
   197ac:	mov	r0, r4
   197b0:	bl	11984 <dcgettext@plt>
   197b4:	ldr	r1, [r5]
   197b8:	bl	11864 <fputs_unlocked@plt>
   197bc:	mov	r2, #5
   197c0:	movw	r1, #33516	; 0x82ec
   197c4:	movt	r1, #2
   197c8:	mov	r0, r4
   197cc:	bl	11984 <dcgettext@plt>
   197d0:	ldr	r1, [r5]
   197d4:	bl	11864 <fputs_unlocked@plt>
   197d8:	mov	r2, #5
   197dc:	movw	r1, #33728	; 0x83c0
   197e0:	movt	r1, #2
   197e4:	mov	r0, r4
   197e8:	bl	11984 <dcgettext@plt>
   197ec:	ldr	r1, [r5]
   197f0:	bl	11864 <fputs_unlocked@plt>
   197f4:	mov	r2, #5
   197f8:	movw	r1, #34104	; 0x8538
   197fc:	movt	r1, #2
   19800:	mov	r0, r4
   19804:	bl	11984 <dcgettext@plt>
   19808:	ldr	r1, [r5]
   1980c:	bl	11864 <fputs_unlocked@plt>
   19810:	mov	r2, #5
   19814:	movw	r1, #34180	; 0x8584
   19818:	movt	r1, #2
   1981c:	mov	r0, r4
   19820:	bl	11984 <dcgettext@plt>
   19824:	ldr	r1, [r5]
   19828:	bl	11864 <fputs_unlocked@plt>
   1982c:	mov	r2, #5
   19830:	movw	r1, #34468	; 0x86a4
   19834:	movt	r1, #2
   19838:	mov	r0, r4
   1983c:	bl	11984 <dcgettext@plt>
   19840:	ldr	r1, [r5]
   19844:	bl	11864 <fputs_unlocked@plt>
   19848:	movw	r3, #41656	; 0xa2b8
   1984c:	movt	r3, #3
   19850:	ldr	r2, [r3]
   19854:	cmp	r2, #1
   19858:	beq	199b8 <__assert_fail@plt+0x7c44>
   1985c:	movw	r3, #26992	; 0x6970
   19860:	movt	r3, #2
   19864:	cmp	r2, #2
   19868:	movw	r6, #36576	; 0x8ee0
   1986c:	movt	r6, #2
   19870:	movne	r6, r3
   19874:	ldr	lr, [pc, #524]	; 19a88 <__assert_fail@plt+0x7d14>
   19878:	ldr	ip, [lr]
   1987c:	ldrd	sl, [lr, #8]
   19880:	ldrd	r2, [lr, #16]
   19884:	subs	r1, ip, #0
   19888:	str	ip, [sp]
   1988c:	ldrd	r8, [lr, #24]
   19890:	strd	sl, [sp, #8]
   19894:	ldr	r7, [lr, #4]
   19898:	ldrd	sl, [lr, #32]
   1989c:	strd	r2, [sp, #16]
   198a0:	strd	r8, [sp, #24]
   198a4:	ldrd	r2, [lr, #40]	; 0x28
   198a8:	str	r7, [sp, #4]
   198ac:	mov	r7, sp
   198b0:	ldrd	r8, [lr, #48]	; 0x30
   198b4:	strd	sl, [sp, #32]
   198b8:	strd	r2, [sp, #40]	; 0x28
   198bc:	strd	r8, [sp, #48]	; 0x30
   198c0:	bne	198d4 <__assert_fail@plt+0x7b60>
   198c4:	b	198e4 <__assert_fail@plt+0x7b70>
   198c8:	ldr	r1, [r7, #8]!
   198cc:	cmp	r1, #0
   198d0:	beq	198e4 <__assert_fail@plt+0x7b70>
   198d4:	mov	r0, r6
   198d8:	bl	118a0 <strcmp@plt>
   198dc:	cmp	r0, #0
   198e0:	bne	198c8 <__assert_fail@plt+0x7b54>
   198e4:	ldr	r7, [r7, #4]
   198e8:	movw	r1, #34620	; 0x873c
   198ec:	movt	r1, #2
   198f0:	mov	r2, #5
   198f4:	cmp	r7, #0
   198f8:	beq	199e8 <__assert_fail@plt+0x7c74>
   198fc:	mov	r0, #0
   19900:	bl	11984 <dcgettext@plt>
   19904:	mov	r1, r0
   19908:	movw	r3, #34644	; 0x8754
   1990c:	movt	r3, #2
   19910:	movw	r2, #34684	; 0x877c
   19914:	movt	r2, #2
   19918:	mov	r0, #1
   1991c:	bl	11bf4 <__printf_chk@plt>
   19920:	mov	r1, #0
   19924:	mov	r0, #5
   19928:	bl	11c54 <setlocale@plt>
   1992c:	cmp	r0, #0
   19930:	beq	1994c <__assert_fail@plt+0x7bd8>
   19934:	movw	r1, #34700	; 0x878c
   19938:	movt	r1, #2
   1993c:	mov	r2, #3
   19940:	bl	11d20 <strncmp@plt>
   19944:	cmp	r0, #0
   19948:	bne	199c8 <__assert_fail@plt+0x7c54>
   1994c:	mov	r2, #5
   19950:	movw	r1, #34776	; 0x87d8
   19954:	movt	r1, #2
   19958:	mov	r0, #0
   1995c:	bl	11984 <dcgettext@plt>
   19960:	mov	r1, r0
   19964:	mov	r3, r6
   19968:	movw	r2, #34644	; 0x8754
   1996c:	movt	r2, #2
   19970:	mov	r0, #1
   19974:	bl	11bf4 <__printf_chk@plt>
   19978:	mov	r2, #5
   1997c:	movw	r1, #34804	; 0x87f4
   19980:	movt	r1, #2
   19984:	mov	r0, #0
   19988:	bl	11984 <dcgettext@plt>
   1998c:	movw	r2, #37260	; 0x918c
   19990:	movt	r2, #2
   19994:	cmp	r6, r7
   19998:	movw	r3, #35972	; 0x8c84
   1999c:	movt	r3, #2
   199a0:	mov	r1, r0
   199a4:	movne	r3, r2
   199a8:	mov	r2, r7
   199ac:	mov	r0, #1
   199b0:	bl	11bf4 <__printf_chk@plt>
   199b4:	b	194ac <__assert_fail@plt+0x7738>
   199b8:	movw	r6, #26988	; 0x696c
   199bc:	movt	r6, #2
   199c0:	b	19874 <__assert_fail@plt+0x7b00>
   199c4:	mov	r7, r6
   199c8:	mov	r2, #5
   199cc:	movw	r1, #34704	; 0x8790
   199d0:	movt	r1, #2
   199d4:	mov	r0, #0
   199d8:	bl	11984 <dcgettext@plt>
   199dc:	ldr	r1, [r5]
   199e0:	bl	11864 <fputs_unlocked@plt>
   199e4:	b	1994c <__assert_fail@plt+0x7bd8>
   199e8:	mov	r0, r7
   199ec:	bl	11984 <dcgettext@plt>
   199f0:	mov	r1, r0
   199f4:	movw	r3, #34644	; 0x8754
   199f8:	movt	r3, #2
   199fc:	movw	r2, #34684	; 0x877c
   19a00:	movt	r2, #2
   19a04:	mov	r0, #1
   19a08:	bl	11bf4 <__printf_chk@plt>
   19a0c:	mov	r1, r7
   19a10:	mov	r0, #5
   19a14:	bl	11c54 <setlocale@plt>
   19a18:	cmp	r0, #0
   19a1c:	beq	19a38 <__assert_fail@plt+0x7cc4>
   19a20:	movw	r1, #34700	; 0x878c
   19a24:	movt	r1, #2
   19a28:	mov	r2, #3
   19a2c:	bl	11d20 <strncmp@plt>
   19a30:	cmp	r0, #0
   19a34:	bne	199c4 <__assert_fail@plt+0x7c50>
   19a38:	mov	r2, #5
   19a3c:	movw	r1, #34776	; 0x87d8
   19a40:	movt	r1, #2
   19a44:	bl	11984 <dcgettext@plt>
   19a48:	mov	r1, r0
   19a4c:	mov	r3, r6
   19a50:	movw	r2, #34644	; 0x8754
   19a54:	movt	r2, #2
   19a58:	mov	r0, #1
   19a5c:	bl	11bf4 <__printf_chk@plt>
   19a60:	mov	r0, r7
   19a64:	movw	r1, #34804	; 0x87f4
   19a68:	movt	r1, #2
   19a6c:	mov	r2, #5
   19a70:	bl	11984 <dcgettext@plt>
   19a74:	mov	r7, r6
   19a78:	movw	r3, #35972	; 0x8c84
   19a7c:	movt	r3, #2
   19a80:	mov	r1, r0
   19a84:	b	199a8 <__assert_fail@plt+0x7c34>
   19a88:	andeq	r5, r2, r8, lsr #4
   19a8c:	cmp	r1, #0
   19a90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19a94:	moveq	r4, #128	; 0x80
   19a98:	strd	r6, [sp, #8]
   19a9c:	movne	r7, #1
   19aa0:	moveq	r7, #0
   19aa4:	str	r8, [sp, #16]
   19aa8:	mov	r8, r0
   19aac:	str	lr, [sp, #20]
   19ab0:	sub	sp, sp, #128	; 0x80
   19ab4:	beq	19ac4 <__assert_fail@plt+0x7d50>
   19ab8:	cmp	r1, #1024	; 0x400
   19abc:	addls	r4, r1, #1
   19ac0:	movwhi	r4, #1025	; 0x401
   19ac4:	cmp	r4, #128	; 0x80
   19ac8:	moveq	r0, r7
   19acc:	orrne	r0, r7, #1
   19ad0:	mov	r6, sp
   19ad4:	cmp	r0, #0
   19ad8:	mov	r5, r0
   19adc:	bne	19b34 <__assert_fail@plt+0x7dc0>
   19ae0:	mov	r2, r4
   19ae4:	mov	r1, r6
   19ae8:	mov	r0, r8
   19aec:	bl	11a08 <readlink@plt>
   19af0:	subs	r3, r0, #0
   19af4:	mov	r0, r5
   19af8:	blt	19b58 <__assert_fail@plt+0x7de4>
   19afc:	cmp	r4, r3
   19b00:	bhi	19b7c <__assert_fail@plt+0x7e08>
   19b04:	bl	1b2b4 <__assert_fail@plt+0x9540>
   19b08:	cmn	r4, #-1073741823	; 0xc0000001
   19b0c:	lslls	r4, r4, #1
   19b10:	bls	19ac4 <__assert_fail@plt+0x7d50>
   19b14:	cmn	r4, #-2147483646	; 0x80000002
   19b18:	mvn	r4, #-2147483648	; 0x80000000
   19b1c:	bls	19ac4 <__assert_fail@plt+0x7d50>
   19b20:	bl	11bb8 <__errno_location@plt>
   19b24:	mov	r3, #12
   19b28:	mov	r5, #0
   19b2c:	str	r3, [r0]
   19b30:	b	19b60 <__assert_fail@plt+0x7dec>
   19b34:	mov	r0, r4
   19b38:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   19b3c:	subs	r6, r0, #0
   19b40:	mov	r5, r6
   19b44:	bne	19ae0 <__assert_fail@plt+0x7d6c>
   19b48:	bl	11bb8 <__errno_location@plt>
   19b4c:	mov	r3, #12
   19b50:	str	r3, [r0]
   19b54:	b	19b60 <__assert_fail@plt+0x7dec>
   19b58:	mov	r5, #0
   19b5c:	bl	1b2b4 <__assert_fail@plt+0x9540>
   19b60:	mov	r0, r5
   19b64:	add	sp, sp, #128	; 0x80
   19b68:	ldrd	r4, [sp]
   19b6c:	ldrd	r6, [sp, #8]
   19b70:	ldr	r8, [sp, #16]
   19b74:	add	sp, sp, #20
   19b78:	pop	{pc}		; (ldr pc, [sp], #4)
   19b7c:	mov	r2, #0
   19b80:	add	r7, r3, #1
   19b84:	cmp	r5, r2
   19b88:	strb	r2, [r6, r3]
   19b8c:	beq	19bac <__assert_fail@plt+0x7e38>
   19b90:	cmp	r4, r7
   19b94:	bls	19b60 <__assert_fail@plt+0x7dec>
   19b98:	mov	r1, r7
   19b9c:	bl	24600 <_obstack_memory_used@@Base+0x4368>
   19ba0:	cmp	r0, #0
   19ba4:	movne	r5, r0
   19ba8:	b	19b60 <__assert_fail@plt+0x7dec>
   19bac:	mov	r0, r7
   19bb0:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   19bb4:	subs	r5, r0, #0
   19bb8:	beq	19b60 <__assert_fail@plt+0x7dec>
   19bbc:	mov	r2, r7
   19bc0:	mov	r1, r6
   19bc4:	bl	11930 <memcpy@plt>
   19bc8:	mov	r5, r0
   19bcc:	b	19b60 <__assert_fail@plt+0x7dec>
   19bd0:	mov	r0, #1
   19bd4:	b	1945c <__assert_fail@plt+0x76e8>
   19bd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19bdc:	mov	r5, r1
   19be0:	mov	r4, r2
   19be4:	strd	r6, [sp, #8]
   19be8:	mov	r7, r3
   19bec:	strd	r8, [sp, #16]
   19bf0:	strd	sl, [sp, #24]
   19bf4:	mov	sl, r0
   19bf8:	str	lr, [sp, #32]
   19bfc:	sub	sp, sp, #12
   19c00:	str	r2, [sp]
   19c04:	bl	11b94 <strlen@plt>
   19c08:	ldr	fp, [r5]
   19c0c:	cmp	fp, #0
   19c10:	beq	19ce0 <__assert_fail@plt+0x7f6c>
   19c14:	mov	r6, #0
   19c18:	mov	r8, r0
   19c1c:	mvn	r9, #0
   19c20:	str	r6, [sp, #4]
   19c24:	b	19c50 <__assert_fail@plt+0x7edc>
   19c28:	bl	1196c <memcmp@plt>
   19c2c:	ldr	r3, [sp, #4]
   19c30:	cmp	r0, #0
   19c34:	movne	r3, #1
   19c38:	str	r3, [sp, #4]
   19c3c:	ldr	fp, [r5, #4]!
   19c40:	add	r6, r6, #1
   19c44:	add	r4, r4, r7
   19c48:	cmp	fp, #0
   19c4c:	beq	19cac <__assert_fail@plt+0x7f38>
   19c50:	mov	r2, r8
   19c54:	mov	r1, sl
   19c58:	mov	r0, fp
   19c5c:	bl	11d20 <strncmp@plt>
   19c60:	cmp	r0, #0
   19c64:	mov	r0, fp
   19c68:	bne	19c3c <__assert_fail@plt+0x7ec8>
   19c6c:	bl	11b94 <strlen@plt>
   19c70:	ldr	r3, [sp]
   19c74:	cmp	r0, r8
   19c78:	mov	r2, r7
   19c7c:	mov	r1, r4
   19c80:	mla	r0, r7, r9, r3
   19c84:	beq	19cd8 <__assert_fail@plt+0x7f64>
   19c88:	cmn	r9, #1
   19c8c:	moveq	r9, r6
   19c90:	beq	19c3c <__assert_fail@plt+0x7ec8>
   19c94:	ldr	r3, [sp]
   19c98:	cmp	r3, #0
   19c9c:	bne	19c28 <__assert_fail@plt+0x7eb4>
   19ca0:	mov	r3, #1
   19ca4:	str	r3, [sp, #4]
   19ca8:	b	19c3c <__assert_fail@plt+0x7ec8>
   19cac:	ldr	r3, [sp, #4]
   19cb0:	cmp	r3, #0
   19cb4:	mvnne	r9, #1
   19cb8:	mov	r0, r9
   19cbc:	add	sp, sp, #12
   19cc0:	ldrd	r4, [sp]
   19cc4:	ldrd	r6, [sp, #8]
   19cc8:	ldrd	r8, [sp, #16]
   19ccc:	ldrd	sl, [sp, #24]
   19cd0:	add	sp, sp, #32
   19cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   19cd8:	mov	r9, r6
   19cdc:	b	19cb8 <__assert_fail@plt+0x7f44>
   19ce0:	mvn	r9, #0
   19ce4:	b	19cb8 <__assert_fail@plt+0x7f44>
   19ce8:	strd	r4, [sp, #-16]!
   19cec:	str	r6, [sp, #8]
   19cf0:	mov	r6, r0
   19cf4:	ldr	r0, [r1]
   19cf8:	str	lr, [sp, #12]
   19cfc:	cmp	r0, #0
   19d00:	beq	19d44 <__assert_fail@plt+0x7fd0>
   19d04:	mov	r4, r1
   19d08:	mov	r5, #0
   19d0c:	b	19d20 <__assert_fail@plt+0x7fac>
   19d10:	ldr	r0, [r4, #4]!
   19d14:	add	r5, r5, #1
   19d18:	cmp	r0, #0
   19d1c:	beq	19d44 <__assert_fail@plt+0x7fd0>
   19d20:	mov	r1, r6
   19d24:	bl	118a0 <strcmp@plt>
   19d28:	cmp	r0, #0
   19d2c:	bne	19d10 <__assert_fail@plt+0x7f9c>
   19d30:	mov	r0, r5
   19d34:	ldrd	r4, [sp]
   19d38:	ldr	r6, [sp, #8]
   19d3c:	add	sp, sp, #12
   19d40:	pop	{pc}		; (ldr pc, [sp], #4)
   19d44:	ldrd	r4, [sp]
   19d48:	mvn	r0, #0
   19d4c:	ldr	r6, [sp, #8]
   19d50:	add	sp, sp, #12
   19d54:	pop	{pc}		; (ldr pc, [sp], #4)
   19d58:	cmn	r2, #1
   19d5c:	strd	r4, [sp, #-16]!
   19d60:	mov	r5, r1
   19d64:	movweq	r1, #37032	; 0x90a8
   19d68:	movwne	r1, #37060	; 0x90c4
   19d6c:	str	r6, [sp, #8]
   19d70:	movteq	r1, #2
   19d74:	movtne	r1, #2
   19d78:	str	lr, [sp, #12]
   19d7c:	mov	r6, r0
   19d80:	sub	sp, sp, #8
   19d84:	mov	r2, #5
   19d88:	mov	r0, #0
   19d8c:	bl	11984 <dcgettext@plt>
   19d90:	mov	r4, r0
   19d94:	mov	r2, r5
   19d98:	mov	r1, #8
   19d9c:	mov	r0, #0
   19da0:	bl	2227c <_obstack_memory_used@@Base+0x1fe4>
   19da4:	mov	r5, r0
   19da8:	mov	r1, r6
   19dac:	mov	r0, #1
   19db0:	bl	225ac <_obstack_memory_used@@Base+0x2314>
   19db4:	mov	r1, #0
   19db8:	mov	r3, r5
   19dbc:	str	r0, [sp]
   19dc0:	mov	r2, r4
   19dc4:	mov	r0, r1
   19dc8:	bl	11a8c <error@plt>
   19dcc:	add	sp, sp, #8
   19dd0:	ldrd	r4, [sp]
   19dd4:	ldr	r6, [sp, #8]
   19dd8:	add	sp, sp, #12
   19ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   19de0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19de4:	mov	r4, r1
   19de8:	movw	r1, #37092	; 0x90e4
   19dec:	movt	r1, #2
   19df0:	strd	r6, [sp, #8]
   19df4:	mov	r6, r0
   19df8:	mov	r7, r2
   19dfc:	mov	r0, #0
   19e00:	strd	r8, [sp, #16]
   19e04:	mov	r2, #5
   19e08:	strd	sl, [sp, #24]
   19e0c:	movw	sl, #41760	; 0xa320
   19e10:	movt	sl, #3
   19e14:	str	lr, [sp, #32]
   19e18:	sub	sp, sp, #12
   19e1c:	bl	11984 <dcgettext@plt>
   19e20:	ldr	r1, [sl]
   19e24:	bl	11864 <fputs_unlocked@plt>
   19e28:	ldr	fp, [r6]
   19e2c:	cmp	fp, #0
   19e30:	beq	19ed0 <__assert_fail@plt+0x815c>
   19e34:	movw	r3, #37116	; 0x90fc
   19e38:	movt	r3, #2
   19e3c:	mov	r9, #0
   19e40:	str	r3, [sp]
   19e44:	movw	r3, #37124	; 0x9104
   19e48:	movt	r3, #2
   19e4c:	mov	r5, r9
   19e50:	str	r3, [sp, #4]
   19e54:	b	19e8c <__assert_fail@plt+0x8118>
   19e58:	mov	r0, fp
   19e5c:	mov	r9, r4
   19e60:	bl	225bc <_obstack_memory_used@@Base+0x2324>
   19e64:	mov	r3, r0
   19e68:	mov	r1, #1
   19e6c:	ldr	r2, [sp]
   19e70:	mov	r0, r8
   19e74:	bl	11c18 <__fprintf_chk@plt>
   19e78:	ldr	fp, [r6, #4]!
   19e7c:	add	r5, r5, #1
   19e80:	add	r4, r4, r7
   19e84:	cmp	fp, #0
   19e88:	beq	19ed0 <__assert_fail@plt+0x815c>
   19e8c:	cmp	r5, #0
   19e90:	mov	r1, r4
   19e94:	ldr	r8, [sl]
   19e98:	mov	r2, r7
   19e9c:	mov	r0, r9
   19ea0:	beq	19e58 <__assert_fail@plt+0x80e4>
   19ea4:	bl	1196c <memcmp@plt>
   19ea8:	cmp	r0, #0
   19eac:	bne	19e58 <__assert_fail@plt+0x80e4>
   19eb0:	mov	r0, fp
   19eb4:	bl	225bc <_obstack_memory_used@@Base+0x2324>
   19eb8:	mov	r3, r0
   19ebc:	mov	r1, #1
   19ec0:	ldr	r2, [sp, #4]
   19ec4:	mov	r0, r8
   19ec8:	bl	11c18 <__fprintf_chk@plt>
   19ecc:	b	19e78 <__assert_fail@plt+0x8104>
   19ed0:	ldr	r0, [sl]
   19ed4:	ldr	r3, [r0, #20]
   19ed8:	ldr	r2, [r0, #24]
   19edc:	cmp	r3, r2
   19ee0:	bcs	19f10 <__assert_fail@plt+0x819c>
   19ee4:	add	r1, r3, #1
   19ee8:	mov	r2, #10
   19eec:	str	r1, [r0, #20]
   19ef0:	strb	r2, [r3]
   19ef4:	add	sp, sp, #12
   19ef8:	ldrd	r4, [sp]
   19efc:	ldrd	r6, [sp, #8]
   19f00:	ldrd	r8, [sp, #16]
   19f04:	ldrd	sl, [sp, #24]
   19f08:	add	sp, sp, #32
   19f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f10:	mov	r1, #10
   19f14:	add	sp, sp, #12
   19f18:	ldrd	r4, [sp]
   19f1c:	ldrd	r6, [sp, #8]
   19f20:	ldrd	r8, [sp, #16]
   19f24:	ldrd	sl, [sp, #24]
   19f28:	ldr	lr, [sp, #32]
   19f2c:	add	sp, sp, #36	; 0x24
   19f30:	b	11c48 <__overflow@plt>
   19f34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19f38:	mov	r5, r1
   19f3c:	mov	r4, r2
   19f40:	ldrb	ip, [sp, #32]
   19f44:	strd	r6, [sp, #8]
   19f48:	mov	r7, r0
   19f4c:	mov	r6, r3
   19f50:	str	r8, [sp, #16]
   19f54:	str	lr, [sp, #20]
   19f58:	cmp	ip, #0
   19f5c:	beq	19f90 <__assert_fail@plt+0x821c>
   19f60:	mov	r2, r3
   19f64:	mov	r1, r4
   19f68:	ldr	r3, [sp, #24]
   19f6c:	mov	r0, r5
   19f70:	bl	19bd8 <__assert_fail@plt+0x7e64>
   19f74:	cmp	r0, #0
   19f78:	blt	19fa0 <__assert_fail@plt+0x822c>
   19f7c:	ldrd	r4, [sp]
   19f80:	ldrd	r6, [sp, #8]
   19f84:	ldr	r8, [sp, #16]
   19f88:	add	sp, sp, #20
   19f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f90:	mov	r1, r2
   19f94:	mov	r0, r5
   19f98:	bl	19ce8 <__assert_fail@plt+0x7f74>
   19f9c:	b	19f74 <__assert_fail@plt+0x8200>
   19fa0:	mov	r2, r0
   19fa4:	mov	r1, r5
   19fa8:	mov	r0, r7
   19fac:	bl	19d58 <__assert_fail@plt+0x7fe4>
   19fb0:	mov	r0, r4
   19fb4:	mov	r1, r6
   19fb8:	ldr	r2, [sp, #24]
   19fbc:	bl	19de0 <__assert_fail@plt+0x806c>
   19fc0:	ldr	r3, [sp, #28]
   19fc4:	blx	r3
   19fc8:	mvn	r0, #0
   19fcc:	b	19f7c <__assert_fail@plt+0x8208>
   19fd0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19fd4:	strd	r6, [sp, #8]
   19fd8:	ldr	r7, [r1]
   19fdc:	str	r8, [sp, #16]
   19fe0:	str	lr, [sp, #20]
   19fe4:	cmp	r7, #0
   19fe8:	beq	1a028 <__assert_fail@plt+0x82b4>
   19fec:	mov	r6, r3
   19ff0:	mov	r8, r0
   19ff4:	mov	r4, r2
   19ff8:	mov	r5, r1
   19ffc:	b	1a00c <__assert_fail@plt+0x8298>
   1a000:	ldr	r7, [r5, #4]!
   1a004:	cmp	r7, #0
   1a008:	beq	1a028 <__assert_fail@plt+0x82b4>
   1a00c:	mov	r1, r4
   1a010:	mov	r2, r6
   1a014:	mov	r0, r8
   1a018:	add	r4, r4, r6
   1a01c:	bl	1196c <memcmp@plt>
   1a020:	cmp	r0, #0
   1a024:	bne	1a000 <__assert_fail@plt+0x828c>
   1a028:	mov	r0, r7
   1a02c:	ldrd	r4, [sp]
   1a030:	ldrd	r6, [sp, #8]
   1a034:	ldr	r8, [sp, #16]
   1a038:	add	sp, sp, #20
   1a03c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a040:	ldrb	r3, [r0]
   1a044:	cmp	r3, #47	; 0x2f
   1a048:	bne	1a058 <__assert_fail@plt+0x82e4>
   1a04c:	ldrb	r3, [r0, #1]!
   1a050:	cmp	r3, #47	; 0x2f
   1a054:	beq	1a04c <__assert_fail@plt+0x82d8>
   1a058:	cmp	r3, #0
   1a05c:	beq	1a08c <__assert_fail@plt+0x8318>
   1a060:	mov	r2, r0
   1a064:	mov	r1, #0
   1a068:	cmp	r3, #47	; 0x2f
   1a06c:	moveq	r1, #1
   1a070:	beq	1a080 <__assert_fail@plt+0x830c>
   1a074:	cmp	r1, #0
   1a078:	movne	r0, r2
   1a07c:	movne	r1, #0
   1a080:	ldrb	r3, [r2, #1]!
   1a084:	cmp	r3, #0
   1a088:	bne	1a068 <__assert_fail@plt+0x82f4>
   1a08c:	bx	lr
   1a090:	str	r4, [sp, #-8]!
   1a094:	mov	r4, r0
   1a098:	str	lr, [sp, #4]
   1a09c:	bl	11b94 <strlen@plt>
   1a0a0:	cmp	r0, #1
   1a0a4:	bls	1a0c8 <__assert_fail@plt+0x8354>
   1a0a8:	add	r2, r4, r0
   1a0ac:	mov	r3, r0
   1a0b0:	ldrb	r2, [r2, #-1]
   1a0b4:	cmp	r2, #47	; 0x2f
   1a0b8:	subeq	r3, r0, #2
   1a0bc:	rsbeq	r1, r4, #1
   1a0c0:	addeq	r3, r4, r3
   1a0c4:	beq	1a0d4 <__assert_fail@plt+0x8360>
   1a0c8:	ldr	r4, [sp]
   1a0cc:	add	sp, sp, #4
   1a0d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0d4:	cmp	r3, r4
   1a0d8:	add	r0, r1, r3
   1a0dc:	beq	1a0c8 <__assert_fail@plt+0x8354>
   1a0e0:	ldrb	r2, [r3], #-1
   1a0e4:	cmp	r2, #47	; 0x2f
   1a0e8:	beq	1a0d4 <__assert_fail@plt+0x8360>
   1a0ec:	ldr	r4, [sp]
   1a0f0:	add	sp, sp, #4
   1a0f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0f8:	cmp	r2, #0
   1a0fc:	cmpne	r0, r1
   1a100:	beq	1a194 <__assert_fail@plt+0x8420>
   1a104:	sub	r1, r1, #1
   1a108:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a10c:	sub	r4, r0, #1
   1a110:	strd	r6, [sp, #8]
   1a114:	str	lr, [sp, #16]
   1a118:	b	1a124 <__assert_fail@plt+0x83b0>
   1a11c:	cmp	r3, ip
   1a120:	bne	1a178 <__assert_fail@plt+0x8404>
   1a124:	ldrb	r3, [r4, #1]!
   1a128:	sub	ip, r3, #65	; 0x41
   1a12c:	mov	r5, r3
   1a130:	cmp	ip, #25
   1a134:	ldrb	ip, [r1, #1]!
   1a138:	mvn	lr, r4
   1a13c:	addls	r5, r3, #32
   1a140:	add	lr, lr, r2
   1a144:	uxtbls	r3, r5
   1a148:	sub	r7, ip, #65	; 0x41
   1a14c:	mov	r6, ip
   1a150:	cmp	r7, #25
   1a154:	addls	r6, ip, #32
   1a158:	uxtbls	ip, r6
   1a15c:	cmn	r0, lr
   1a160:	moveq	lr, #1
   1a164:	movne	lr, #0
   1a168:	cmp	r3, #0
   1a16c:	moveq	lr, #1
   1a170:	cmp	lr, #0
   1a174:	beq	1a11c <__assert_fail@plt+0x83a8>
   1a178:	uxtb	r5, r5
   1a17c:	uxtb	r0, r6
   1a180:	ldrd	r6, [sp, #8]
   1a184:	sub	r0, r5, r0
   1a188:	ldrd	r4, [sp]
   1a18c:	add	sp, sp, #16
   1a190:	pop	{pc}		; (ldr pc, [sp], #4)
   1a194:	mov	r0, #0
   1a198:	bx	lr
   1a19c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a1a0:	strd	r6, [sp, #8]
   1a1a4:	strd	sl, [sp, #24]
   1a1a8:	and	fp, r1, #3
   1a1ac:	sub	r3, fp, #1
   1a1b0:	strd	r8, [sp, #16]
   1a1b4:	tst	r3, fp
   1a1b8:	str	lr, [sp, #32]
   1a1bc:	sub	sp, sp, #3248	; 0xcb0
   1a1c0:	sub	sp, sp, #4
   1a1c4:	bne	1a2e0 <__assert_fail@plt+0x856c>
   1a1c8:	cmp	r0, #0
   1a1cc:	mov	r5, r0
   1a1d0:	beq	1a2e0 <__assert_fail@plt+0x856c>
   1a1d4:	ldrb	r9, [r0]
   1a1d8:	cmp	r9, #0
   1a1dc:	beq	1a6b0 <__assert_fail@plt+0x893c>
   1a1e0:	add	r3, sp, #1184	; 0x4a0
   1a1e4:	cmp	r9, #47	; 0x2f
   1a1e8:	add	r3, r3, #8
   1a1ec:	mov	r7, r1
   1a1f0:	addne	r4, sp, #160	; 0xa0
   1a1f4:	mov	r1, #1024	; 0x400
   1a1f8:	str	r3, [sp, #1184]	; 0x4a0
   1a1fc:	add	r3, sp, #160	; 0xa0
   1a200:	str	r3, [sp, #152]	; 0x98
   1a204:	add	r3, sp, #2224	; 0x8b0
   1a208:	str	r1, [sp, #156]	; 0x9c
   1a20c:	str	r1, [sp, #1188]	; 0x4a4
   1a210:	str	r3, [sp, #2216]	; 0x8a8
   1a214:	movne	r3, r4
   1a218:	subne	r6, r3, #8
   1a21c:	str	r1, [sp, #2220]	; 0x8ac
   1a220:	beq	1a2f4 <__assert_fail@plt+0x8580>
   1a224:	mov	r0, r4
   1a228:	bl	11b64 <getcwd@plt>
   1a22c:	cmp	r0, #0
   1a230:	bne	1a82c <__assert_fail@plt+0x8ab8>
   1a234:	bl	11bb8 <__errno_location@plt>
   1a238:	ldr	r3, [r0]
   1a23c:	cmp	r3, #12
   1a240:	beq	1a808 <__assert_fail@plt+0x8a94>
   1a244:	cmp	r3, #34	; 0x22
   1a248:	beq	1a2c4 <__assert_fail@plt+0x8550>
   1a24c:	mov	r6, r4
   1a250:	mov	r5, #1
   1a254:	ldr	r0, [sp, #1184]	; 0x4a0
   1a258:	add	r3, sp, #1184	; 0x4a0
   1a25c:	add	r3, r3, #8
   1a260:	cmp	r0, r3
   1a264:	beq	1a26c <__assert_fail@plt+0x84f8>
   1a268:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1a26c:	ldr	r0, [sp, #2216]	; 0x8a8
   1a270:	add	r3, sp, #2224	; 0x8b0
   1a274:	cmp	r0, r3
   1a278:	beq	1a280 <__assert_fail@plt+0x850c>
   1a27c:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1a280:	cmp	r5, #0
   1a284:	bne	1a690 <__assert_fail@plt+0x891c>
   1a288:	add	r0, sp, #152	; 0x98
   1a28c:	strb	r5, [r4], #1
   1a290:	sub	r1, r4, r6
   1a294:	bl	225d4 <_obstack_memory_used@@Base+0x233c>
   1a298:	subs	r9, r0, #0
   1a29c:	beq	1a808 <__assert_fail@plt+0x8a94>
   1a2a0:	mov	r0, r9
   1a2a4:	add	sp, sp, #3248	; 0xcb0
   1a2a8:	add	sp, sp, #4
   1a2ac:	ldrd	r4, [sp]
   1a2b0:	ldrd	r6, [sp, #8]
   1a2b4:	ldrd	r8, [sp, #16]
   1a2b8:	ldrd	sl, [sp, #24]
   1a2bc:	add	sp, sp, #32
   1a2c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2c4:	mov	r0, r6
   1a2c8:	bl	22644 <_obstack_memory_used@@Base+0x23ac>
   1a2cc:	cmp	r0, #0
   1a2d0:	beq	1a808 <__assert_fail@plt+0x8a94>
   1a2d4:	ldr	r4, [sp, #152]	; 0x98
   1a2d8:	ldr	r1, [sp, #156]	; 0x9c
   1a2dc:	b	1a224 <__assert_fail@plt+0x84b0>
   1a2e0:	bl	11bb8 <__errno_location@plt>
   1a2e4:	mov	r3, #22
   1a2e8:	mov	r9, #0
   1a2ec:	str	r3, [r0]
   1a2f0:	b	1a2a0 <__assert_fail@plt+0x852c>
   1a2f4:	add	r6, sp, #160	; 0xa0
   1a2f8:	strb	r9, [sp, #160]	; 0xa0
   1a2fc:	add	r4, r6, #1
   1a300:	mov	r3, #0
   1a304:	and	r2, r7, #4
   1a308:	str	r2, [sp, #12]
   1a30c:	str	r3, [sp, #20]
   1a310:	str	r3, [sp, #28]
   1a314:	str	r3, [sp, #32]
   1a318:	movw	r3, #35804	; 0x8bdc
   1a31c:	movt	r3, #2
   1a320:	str	fp, [sp, #16]
   1a324:	str	r3, [sp, #24]
   1a328:	movw	r3, #35724	; 0x8b8c
   1a32c:	movt	r3, #2
   1a330:	str	r3, [sp, #36]	; 0x24
   1a334:	movw	r3, #50696	; 0xc608
   1a338:	movt	r3, #1
   1a33c:	str	r3, [sp, #40]	; 0x28
   1a340:	cmp	r9, #0
   1a344:	beq	1a78c <__assert_fail@plt+0x8a18>
   1a348:	cmp	r9, #47	; 0x2f
   1a34c:	movne	r3, r9
   1a350:	bne	1a368 <__assert_fail@plt+0x85f4>
   1a354:	ldrb	r3, [r5, #1]!
   1a358:	cmp	r3, #47	; 0x2f
   1a35c:	beq	1a354 <__assert_fail@plt+0x85e0>
   1a360:	cmp	r3, #0
   1a364:	beq	1a78c <__assert_fail@plt+0x8a18>
   1a368:	mov	r8, r5
   1a36c:	b	1a374 <__assert_fail@plt+0x8600>
   1a370:	mov	r8, r7
   1a374:	ldrb	r9, [r8, #1]
   1a378:	add	r7, r8, #1
   1a37c:	cmp	r9, #0
   1a380:	cmpne	r9, #47	; 0x2f
   1a384:	bne	1a370 <__assert_fail@plt+0x85fc>
   1a388:	subs	sl, r7, r5
   1a38c:	beq	1a78c <__assert_fail@plt+0x8a18>
   1a390:	cmp	sl, #1
   1a394:	beq	1a5f8 <__assert_fail@plt+0x8884>
   1a398:	cmp	r3, #46	; 0x2e
   1a39c:	cmpeq	sl, #2
   1a3a0:	beq	1a604 <__assert_fail@plt+0x8890>
   1a3a4:	ldrb	r3, [r4, #-1]
   1a3a8:	cmp	r3, #47	; 0x2f
   1a3ac:	beq	1a3b8 <__assert_fail@plt+0x8644>
   1a3b0:	mov	r3, #47	; 0x2f
   1a3b4:	strb	r3, [r4], #1
   1a3b8:	ldr	r3, [sp, #156]	; 0x9c
   1a3bc:	add	r9, sl, #2
   1a3c0:	add	r3, r6, r3
   1a3c4:	sub	r3, r3, r4
   1a3c8:	cmp	r3, r9
   1a3cc:	bcs	1a3fc <__assert_fail@plt+0x8688>
   1a3d0:	add	r0, sp, #152	; 0x98
   1a3d4:	sub	r4, r4, r6
   1a3d8:	bl	226c4 <_obstack_memory_used@@Base+0x242c>
   1a3dc:	cmp	r0, #0
   1a3e0:	beq	1a808 <__assert_fail@plt+0x8a94>
   1a3e4:	ldr	r6, [sp, #152]	; 0x98
   1a3e8:	ldr	r3, [sp, #156]	; 0x9c
   1a3ec:	sub	r3, r3, r4
   1a3f0:	add	r4, r6, r4
   1a3f4:	cmp	r3, r9
   1a3f8:	bcc	1a3d0 <__assert_fail@plt+0x865c>
   1a3fc:	mov	r2, sl
   1a400:	mov	r0, r4
   1a404:	mov	r1, r5
   1a408:	bl	11b40 <mempcpy@plt>
   1a40c:	ldr	r2, [sp, #12]
   1a410:	mov	r3, #0
   1a414:	mov	r4, r0
   1a418:	strb	r3, [r0]
   1a41c:	cmp	r2, r3
   1a420:	beq	1a4f8 <__assert_fail@plt+0x8784>
   1a424:	ldr	r3, [sp, #16]
   1a428:	ldrb	r9, [r8, #1]
   1a42c:	cmp	r3, #2
   1a430:	movne	r3, r7
   1a434:	movne	r1, r9
   1a438:	beq	1a4f0 <__assert_fail@plt+0x877c>
   1a43c:	cmp	r1, #47	; 0x2f
   1a440:	beq	1a44c <__assert_fail@plt+0x86d8>
   1a444:	b	1a494 <__assert_fail@plt+0x8720>
   1a448:	mov	r3, r0
   1a44c:	ldrb	r2, [r3, #1]
   1a450:	add	r0, r3, #1
   1a454:	cmp	r2, #47	; 0x2f
   1a458:	beq	1a448 <__assert_fail@plt+0x86d4>
   1a45c:	cmp	r2, #0
   1a460:	add	r3, r3, #2
   1a464:	beq	1a664 <__assert_fail@plt+0x88f0>
   1a468:	cmp	r2, #46	; 0x2e
   1a46c:	bne	1a494 <__assert_fail@plt+0x8720>
   1a470:	ldrb	r1, [r0, #1]
   1a474:	cmp	r1, #0
   1a478:	beq	1a664 <__assert_fail@plt+0x88f0>
   1a47c:	cmp	r1, #46	; 0x2e
   1a480:	bne	1a43c <__assert_fail@plt+0x86c8>
   1a484:	ldrb	r3, [r0, #2]
   1a488:	cmp	r3, #47	; 0x2f
   1a48c:	cmpne	r3, #0
   1a490:	beq	1a664 <__assert_fail@plt+0x88f0>
   1a494:	ldr	r3, [sp, #12]
   1a498:	cmp	r3, #0
   1a49c:	bne	1a63c <__assert_fail@plt+0x88c8>
   1a4a0:	bl	11bb8 <__errno_location@plt>
   1a4a4:	ldr	r5, [r0]
   1a4a8:	subs	r5, r5, #22
   1a4ac:	movne	r5, #1
   1a4b0:	cmp	r5, #0
   1a4b4:	beq	1a4ec <__assert_fail@plt+0x8778>
   1a4b8:	ldr	r3, [sp, #16]
   1a4bc:	cmp	r3, #1
   1a4c0:	bne	1a5e0 <__assert_fail@plt+0x886c>
   1a4c4:	bl	11bb8 <__errno_location@plt>
   1a4c8:	ldr	r3, [r0]
   1a4cc:	cmp	r3, #2
   1a4d0:	bne	1a5e0 <__assert_fail@plt+0x886c>
   1a4d4:	mov	r0, r7
   1a4d8:	ldr	r1, [sp, #24]
   1a4dc:	bl	11d68 <strspn@plt>
   1a4e0:	ldrb	r3, [r7, r0]
   1a4e4:	cmp	r3, #0
   1a4e8:	bne	1a5e0 <__assert_fail@plt+0x886c>
   1a4ec:	ldrb	r9, [r8, #1]
   1a4f0:	mov	r5, r7
   1a4f4:	b	1a340 <__assert_fail@plt+0x85cc>
   1a4f8:	add	r3, sp, #2224	; 0x8b0
   1a4fc:	sub	r9, r3, #8
   1a500:	b	1a514 <__assert_fail@plt+0x87a0>
   1a504:	mov	r0, r9
   1a508:	bl	22644 <_obstack_memory_used@@Base+0x23ac>
   1a50c:	cmp	r0, #0
   1a510:	beq	1a808 <__assert_fail@plt+0x8a94>
   1a514:	ldr	sl, [sp, #2216]	; 0x8a8
   1a518:	mov	r0, r6
   1a51c:	ldr	fp, [sp, #2220]	; 0x8ac
   1a520:	mov	r1, sl
   1a524:	sub	fp, fp, #1
   1a528:	mov	r2, fp
   1a52c:	bl	11a08 <readlink@plt>
   1a530:	cmp	fp, r0
   1a534:	ble	1a504 <__assert_fail@plt+0x8790>
   1a538:	cmp	r0, #0
   1a53c:	mov	r9, r0
   1a540:	blt	1a424 <__assert_fail@plt+0x86b0>
   1a544:	ldr	r3, [sp, #32]
   1a548:	cmp	r3, #19
   1a54c:	addle	r3, r3, #1
   1a550:	strle	r3, [sp, #32]
   1a554:	ble	1a6d0 <__assert_fail@plt+0x895c>
   1a558:	ldrb	r3, [r5]
   1a55c:	cmp	r3, #0
   1a560:	beq	1a6d0 <__assert_fail@plt+0x895c>
   1a564:	mov	r3, #0
   1a568:	sub	fp, r5, r7
   1a56c:	mov	r0, #3
   1a570:	add	r2, sp, #48	; 0x30
   1a574:	strb	r3, [r4, fp]
   1a578:	ldrb	r1, [r6]
   1a57c:	ldr	r3, [sp, #36]	; 0x24
   1a580:	cmp	r1, #0
   1a584:	movne	r3, r6
   1a588:	mov	r1, r3
   1a58c:	bl	11cfc <__xstat64@plt>
   1a590:	cmp	r0, #0
   1a594:	bne	1a5dc <__assert_fail@plt+0x8868>
   1a598:	ldr	r2, [sp, #20]
   1a59c:	ldrb	r3, [r5]
   1a5a0:	cmp	r2, #0
   1a5a4:	strb	r3, [r4, fp]
   1a5a8:	beq	1a7d8 <__assert_fail@plt+0x8a64>
   1a5ac:	add	r2, sp, #48	; 0x30
   1a5b0:	mov	r1, r5
   1a5b4:	ldr	r0, [sp, #20]
   1a5b8:	bl	1ab4c <__assert_fail@plt+0x8dd8>
   1a5bc:	cmp	r0, #0
   1a5c0:	beq	1a6c0 <__assert_fail@plt+0x894c>
   1a5c4:	ldr	r3, [sp, #16]
   1a5c8:	cmp	r3, #2
   1a5cc:	beq	1a4ec <__assert_fail@plt+0x8778>
   1a5d0:	bl	11bb8 <__errno_location@plt>
   1a5d4:	mov	r3, #40	; 0x28
   1a5d8:	str	r3, [r0]
   1a5dc:	mov	r5, #1
   1a5e0:	ldr	r3, [sp, #20]
   1a5e4:	cmp	r3, #0
   1a5e8:	beq	1a254 <__assert_fail@plt+0x84e0>
   1a5ec:	mov	r0, r3
   1a5f0:	bl	1bfd4 <__assert_fail@plt+0xa260>
   1a5f4:	b	1a254 <__assert_fail@plt+0x84e0>
   1a5f8:	cmp	r3, #46	; 0x2e
   1a5fc:	bne	1a3a4 <__assert_fail@plt+0x8630>
   1a600:	b	1a4f0 <__assert_fail@plt+0x877c>
   1a604:	ldrb	r3, [r5, #1]
   1a608:	cmp	r3, #46	; 0x2e
   1a60c:	bne	1a3a4 <__assert_fail@plt+0x8630>
   1a610:	add	r3, r6, #1
   1a614:	cmp	r4, r3
   1a618:	bls	1a4f0 <__assert_fail@plt+0x877c>
   1a61c:	sub	r3, r4, #1
   1a620:	cmp	r6, r3
   1a624:	bcs	1a634 <__assert_fail@plt+0x88c0>
   1a628:	ldrb	r2, [r4, #-2]
   1a62c:	cmp	r2, #47	; 0x2f
   1a630:	bne	1a80c <__assert_fail@plt+0x8a98>
   1a634:	mov	r4, r3
   1a638:	b	1a4f0 <__assert_fail@plt+0x877c>
   1a63c:	cmp	r9, #0
   1a640:	bne	1a4f0 <__assert_fail@plt+0x877c>
   1a644:	mov	r2, r9
   1a648:	mov	r3, #512	; 0x200
   1a64c:	mov	r1, r6
   1a650:	mvn	r0, #99	; 0x63
   1a654:	bl	1190c <faccessat@plt>
   1a658:	adds	r5, r0, #0
   1a65c:	movne	r5, #1
   1a660:	b	1a4b0 <__assert_fail@plt+0x873c>
   1a664:	ldr	r3, [sp, #24]
   1a668:	mov	r2, #0
   1a66c:	mov	r1, r6
   1a670:	mvn	r0, #99	; 0x63
   1a674:	ldrh	ip, [r3]
   1a678:	mov	r3, #512	; 0x200
   1a67c:	strh	ip, [r4]
   1a680:	bl	1190c <faccessat@plt>
   1a684:	adds	r5, r0, #0
   1a688:	movne	r5, #1
   1a68c:	b	1a4b0 <__assert_fail@plt+0x873c>
   1a690:	ldr	r0, [sp, #152]	; 0x98
   1a694:	add	r3, sp, #160	; 0xa0
   1a698:	cmp	r0, r3
   1a69c:	moveq	r9, #0
   1a6a0:	beq	1a2a0 <__assert_fail@plt+0x852c>
   1a6a4:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1a6a8:	mov	r9, #0
   1a6ac:	b	1a2a0 <__assert_fail@plt+0x852c>
   1a6b0:	bl	11bb8 <__errno_location@plt>
   1a6b4:	mov	r3, #2
   1a6b8:	str	r3, [r0]
   1a6bc:	b	1a2a0 <__assert_fail@plt+0x852c>
   1a6c0:	add	r2, sp, #48	; 0x30
   1a6c4:	mov	r1, r5
   1a6c8:	ldr	r0, [sp, #20]
   1a6cc:	bl	1aab4 <__assert_fail@plt+0x8d40>
   1a6d0:	ldr	r2, [sp, #28]
   1a6d4:	mov	r3, #0
   1a6d8:	mov	r0, r7
   1a6dc:	strb	r3, [sl, r9]
   1a6e0:	ldr	fp, [sp, #1184]	; 0x4a0
   1a6e4:	cmp	r2, r3
   1a6e8:	beq	1a7b4 <__assert_fail@plt+0x8a40>
   1a6ec:	sub	r3, r7, fp
   1a6f0:	str	r3, [sp, #44]	; 0x2c
   1a6f4:	bl	11b94 <strlen@plt>
   1a6f8:	ldr	r2, [sp, #1188]	; 0x4a4
   1a6fc:	add	r5, r0, r9
   1a700:	mov	r8, r0
   1a704:	cmp	r5, r2
   1a708:	bcc	1a738 <__assert_fail@plt+0x89c4>
   1a70c:	add	r0, sp, #1184	; 0x4a0
   1a710:	bl	226c4 <_obstack_memory_used@@Base+0x242c>
   1a714:	cmp	r0, #0
   1a718:	beq	1a808 <__assert_fail@plt+0x8a94>
   1a71c:	ldr	r3, [sp, #1188]	; 0x4a4
   1a720:	cmp	r3, r5
   1a724:	bls	1a70c <__assert_fail@plt+0x8998>
   1a728:	ldr	r3, [sp, #28]
   1a72c:	ldr	fp, [sp, #1184]	; 0x4a0
   1a730:	cmp	r3, #0
   1a734:	beq	1a740 <__assert_fail@plt+0x89cc>
   1a738:	ldr	r3, [sp, #44]	; 0x2c
   1a73c:	add	r7, fp, r3
   1a740:	mov	r1, r7
   1a744:	add	r2, r8, #1
   1a748:	add	r0, fp, r9
   1a74c:	bl	118f4 <memmove@plt>
   1a750:	mov	r2, r9
   1a754:	mov	r1, sl
   1a758:	mov	r0, fp
   1a75c:	bl	11930 <memcpy@plt>
   1a760:	ldrb	r3, [sl]
   1a764:	mov	r7, r0
   1a768:	add	r2, r6, #1
   1a76c:	cmp	r3, #47	; 0x2f
   1a770:	beq	1a884 <__assert_fail@plt+0x8b10>
   1a774:	cmp	r4, r2
   1a778:	ldrb	r9, [r0]
   1a77c:	bhi	1a848 <__assert_fail@plt+0x8ad4>
   1a780:	mov	r3, #1
   1a784:	str	r3, [sp, #28]
   1a788:	b	1a4f0 <__assert_fail@plt+0x877c>
   1a78c:	add	r3, r6, #1
   1a790:	cmp	r4, r3
   1a794:	bls	1a7ac <__assert_fail@plt+0x8a38>
   1a798:	ldrb	r3, [r4, #-1]
   1a79c:	cmp	r3, #47	; 0x2f
   1a7a0:	subeq	r4, r4, #1
   1a7a4:	moveq	r5, #0
   1a7a8:	beq	1a5e0 <__assert_fail@plt+0x886c>
   1a7ac:	mov	r5, #0
   1a7b0:	b	1a5e0 <__assert_fail@plt+0x886c>
   1a7b4:	bl	11b94 <strlen@plt>
   1a7b8:	ldr	r2, [sp, #1188]	; 0x4a4
   1a7bc:	add	r5, r9, r0
   1a7c0:	mov	r8, r0
   1a7c4:	cmp	r5, r2
   1a7c8:	bcc	1a740 <__assert_fail@plt+0x89cc>
   1a7cc:	ldr	r3, [sp, #28]
   1a7d0:	str	r3, [sp, #44]	; 0x2c
   1a7d4:	b	1a70c <__assert_fail@plt+0x8998>
   1a7d8:	ldr	ip, [sp, #40]	; 0x28
   1a7dc:	mov	r1, r2
   1a7e0:	movw	r3, #50588	; 0xc59c
   1a7e4:	movt	r3, #1
   1a7e8:	movw	r2, #50516	; 0xc554
   1a7ec:	movt	r2, #1
   1a7f0:	mov	r0, #7
   1a7f4:	str	ip, [sp]
   1a7f8:	bl	1bda0 <__assert_fail@plt+0xa02c>
   1a7fc:	subs	r3, r0, #0
   1a800:	str	r3, [sp, #20]
   1a804:	bne	1a5ac <__assert_fail@plt+0x8838>
   1a808:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   1a80c:	sub	r3, r4, #2
   1a810:	cmp	r6, r3
   1a814:	mov	r4, r3
   1a818:	beq	1a4f0 <__assert_fail@plt+0x877c>
   1a81c:	ldrb	r2, [r3, #-1]!
   1a820:	cmp	r2, #47	; 0x2f
   1a824:	beq	1a4f0 <__assert_fail@plt+0x877c>
   1a828:	b	1a810 <__assert_fail@plt+0x8a9c>
   1a82c:	mov	r0, r4
   1a830:	mov	r1, #0
   1a834:	bl	119d8 <rawmemchr@plt>
   1a838:	mov	r6, r4
   1a83c:	ldrb	r9, [r5]
   1a840:	mov	r4, r0
   1a844:	b	1a300 <__assert_fail@plt+0x858c>
   1a848:	sub	r3, r4, #1
   1a84c:	cmp	r3, r6
   1a850:	bls	1a89c <__assert_fail@plt+0x8b28>
   1a854:	ldrb	r2, [r4, #-2]
   1a858:	cmp	r2, #47	; 0x2f
   1a85c:	beq	1a89c <__assert_fail@plt+0x8b28>
   1a860:	sub	r3, r4, #2
   1a864:	cmp	r6, r3
   1a868:	mov	r4, r3
   1a86c:	beq	1a780 <__assert_fail@plt+0x8a0c>
   1a870:	ldrb	r2, [r3, #-1]
   1a874:	sub	r3, r3, #1
   1a878:	cmp	r2, #47	; 0x2f
   1a87c:	beq	1a780 <__assert_fail@plt+0x8a0c>
   1a880:	b	1a864 <__assert_fail@plt+0x8af0>
   1a884:	mov	r4, r2
   1a888:	mov	r2, #1
   1a88c:	strb	r3, [r6]
   1a890:	ldrb	r9, [r0]
   1a894:	str	r2, [sp, #28]
   1a898:	b	1a4f0 <__assert_fail@plt+0x877c>
   1a89c:	mov	r4, r3
   1a8a0:	mov	r3, #1
   1a8a4:	str	r3, [sp, #28]
   1a8a8:	b	1a4f0 <__assert_fail@plt+0x877c>
   1a8ac:	movw	r3, #46028	; 0xb3cc
   1a8b0:	movt	r3, #3
   1a8b4:	str	r0, [r3]
   1a8b8:	bx	lr
   1a8bc:	movw	r3, #46028	; 0xb3cc
   1a8c0:	movt	r3, #3
   1a8c4:	strb	r0, [r3, #4]
   1a8c8:	bx	lr
   1a8cc:	movw	r3, #41764	; 0xa324
   1a8d0:	movt	r3, #3
   1a8d4:	strd	r4, [sp, #-16]!
   1a8d8:	ldr	r0, [r3]
   1a8dc:	str	r6, [sp, #8]
   1a8e0:	str	lr, [sp, #12]
   1a8e4:	sub	sp, sp, #8
   1a8e8:	bl	24658 <_obstack_memory_used@@Base+0x43c0>
   1a8ec:	cmp	r0, #0
   1a8f0:	beq	1a91c <__assert_fail@plt+0x8ba8>
   1a8f4:	movw	r4, #46028	; 0xb3cc
   1a8f8:	movt	r4, #3
   1a8fc:	ldrb	r6, [r4, #4]
   1a900:	bl	11bb8 <__errno_location@plt>
   1a904:	mov	r5, r0
   1a908:	cmp	r6, #0
   1a90c:	beq	1a948 <__assert_fail@plt+0x8bd4>
   1a910:	ldr	r3, [r0]
   1a914:	cmp	r3, #32
   1a918:	bne	1a948 <__assert_fail@plt+0x8bd4>
   1a91c:	movw	r3, #41760	; 0xa320
   1a920:	movt	r3, #3
   1a924:	ldr	r0, [r3]
   1a928:	bl	24658 <_obstack_memory_used@@Base+0x43c0>
   1a92c:	cmp	r0, #0
   1a930:	bne	1a990 <__assert_fail@plt+0x8c1c>
   1a934:	add	sp, sp, #8
   1a938:	ldrd	r4, [sp]
   1a93c:	ldr	r6, [sp, #8]
   1a940:	add	sp, sp, #12
   1a944:	pop	{pc}		; (ldr pc, [sp], #4)
   1a948:	movw	r1, #37132	; 0x910c
   1a94c:	movt	r1, #2
   1a950:	mov	r2, #5
   1a954:	mov	r0, #0
   1a958:	bl	11984 <dcgettext@plt>
   1a95c:	mov	r6, r0
   1a960:	ldr	r0, [r4]
   1a964:	cmp	r0, #0
   1a968:	beq	1a9a0 <__assert_fail@plt+0x8c2c>
   1a96c:	ldr	r4, [r5]
   1a970:	bl	223d0 <_obstack_memory_used@@Base+0x2138>
   1a974:	mov	r3, r0
   1a978:	movw	r2, #34968	; 0x8898
   1a97c:	movt	r2, #2
   1a980:	mov	r0, #0
   1a984:	str	r6, [sp]
   1a988:	mov	r1, r4
   1a98c:	bl	11a8c <error@plt>
   1a990:	movw	r3, #41668	; 0xa2c4
   1a994:	movt	r3, #3
   1a998:	ldr	r0, [r3]
   1a99c:	bl	11924 <_exit@plt>
   1a9a0:	mov	r3, r6
   1a9a4:	movw	r2, #35228	; 0x899c
   1a9a8:	movt	r2, #2
   1a9ac:	ldr	r1, [r5]
   1a9b0:	bl	11a8c <error@plt>
   1a9b4:	b	1a990 <__assert_fail@plt+0x8c1c>
   1a9b8:	strd	r4, [sp, #-16]!
   1a9bc:	mov	r4, r0
   1a9c0:	str	r6, [sp, #8]
   1a9c4:	str	lr, [sp, #12]
   1a9c8:	ldrb	ip, [r0]
   1a9cc:	sub	r5, ip, #47	; 0x2f
   1a9d0:	clz	r5, r5
   1a9d4:	bl	1a040 <__assert_fail@plt+0x82cc>
   1a9d8:	lsr	r5, r5, #5
   1a9dc:	sub	r0, r0, r4
   1a9e0:	cmp	r0, r5
   1a9e4:	bls	1aa28 <__assert_fail@plt+0x8cb4>
   1a9e8:	add	r3, r4, r0
   1a9ec:	ldrb	r3, [r3, #-1]
   1a9f0:	cmp	r3, #47	; 0x2f
   1a9f4:	bne	1aa28 <__assert_fail@plt+0x8cb4>
   1a9f8:	sub	r0, r0, #2
   1a9fc:	sub	ip, r4, #1
   1aa00:	add	r3, r4, r0
   1aa04:	add	ip, ip, r5
   1aa08:	rsb	r2, r4, #1
   1aa0c:	b	1aa1c <__assert_fail@plt+0x8ca8>
   1aa10:	ldrb	r1, [r3], #-1
   1aa14:	cmp	r1, #47	; 0x2f
   1aa18:	bne	1aa28 <__assert_fail@plt+0x8cb4>
   1aa1c:	cmp	r3, ip
   1aa20:	add	r0, r2, r3
   1aa24:	bne	1aa10 <__assert_fail@plt+0x8c9c>
   1aa28:	ldrd	r4, [sp]
   1aa2c:	ldr	r6, [sp, #8]
   1aa30:	add	sp, sp, #12
   1aa34:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa38:	strd	r4, [sp, #-16]!
   1aa3c:	str	r6, [sp, #8]
   1aa40:	mov	r6, r0
   1aa44:	str	lr, [sp, #12]
   1aa48:	bl	1a9b8 <__assert_fail@plt+0x8c44>
   1aa4c:	add	r3, r0, #1
   1aa50:	mov	r4, r0
   1aa54:	cmp	r0, #0
   1aa58:	movne	r0, r3
   1aa5c:	addeq	r0, r3, #1
   1aa60:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   1aa64:	subs	r5, r0, #0
   1aa68:	beq	1aa88 <__assert_fail@plt+0x8d14>
   1aa6c:	mov	r1, r6
   1aa70:	mov	r2, r4
   1aa74:	bl	11930 <memcpy@plt>
   1aa78:	cmp	r4, #0
   1aa7c:	beq	1aa9c <__assert_fail@plt+0x8d28>
   1aa80:	mov	r3, #0
   1aa84:	strb	r3, [r5, r4]
   1aa88:	mov	r0, r5
   1aa8c:	ldrd	r4, [sp]
   1aa90:	ldr	r6, [sp, #8]
   1aa94:	add	sp, sp, #12
   1aa98:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa9c:	mov	r3, #46	; 0x2e
   1aaa0:	mov	r4, #1
   1aaa4:	strb	r3, [r5]
   1aaa8:	b	1aa80 <__assert_fail@plt+0x8d0c>
   1aaac:	mov	r0, #0
   1aab0:	bx	lr
   1aab4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aab8:	strd	r6, [sp, #8]
   1aabc:	str	r8, [sp, #16]
   1aac0:	subs	r8, r0, #0
   1aac4:	str	lr, [sp, #20]
   1aac8:	beq	1ab34 <__assert_fail@plt+0x8dc0>
   1aacc:	mov	r0, #24
   1aad0:	mov	r4, r1
   1aad4:	mov	r7, r2
   1aad8:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   1aadc:	mov	r6, r0
   1aae0:	mov	r0, r4
   1aae4:	bl	2384c <_obstack_memory_used@@Base+0x35b4>
   1aae8:	ldrd	r4, [r7]
   1aaec:	mov	r1, r6
   1aaf0:	str	r0, [r6]
   1aaf4:	mov	r0, r8
   1aaf8:	ldrd	r2, [r7, #96]	; 0x60
   1aafc:	strd	r2, [r6, #8]
   1ab00:	strd	r4, [r6, #16]
   1ab04:	bl	1c3f8 <__assert_fail@plt+0xa684>
   1ab08:	cmp	r0, #0
   1ab0c:	beq	1ab48 <__assert_fail@plt+0x8dd4>
   1ab10:	cmp	r6, r0
   1ab14:	beq	1ab34 <__assert_fail@plt+0x8dc0>
   1ab18:	mov	r0, r6
   1ab1c:	ldrd	r4, [sp]
   1ab20:	ldrd	r6, [sp, #8]
   1ab24:	ldr	r8, [sp, #16]
   1ab28:	ldr	lr, [sp, #20]
   1ab2c:	add	sp, sp, #24
   1ab30:	b	1c608 <__assert_fail@plt+0xa894>
   1ab34:	ldrd	r4, [sp]
   1ab38:	ldrd	r6, [sp, #8]
   1ab3c:	ldr	r8, [sp, #16]
   1ab40:	add	sp, sp, #20
   1ab44:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab48:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   1ab4c:	subs	r3, r0, #0
   1ab50:	beq	1ab98 <__assert_fail@plt+0x8e24>
   1ab54:	mov	r3, r1
   1ab58:	strd	r4, [sp, #-12]!
   1ab5c:	ldrd	r4, [r2, #96]	; 0x60
   1ab60:	str	lr, [sp, #8]
   1ab64:	sub	sp, sp, #28
   1ab68:	mov	r1, sp
   1ab6c:	str	r3, [sp]
   1ab70:	ldrd	r2, [r2]
   1ab74:	strd	r4, [sp, #8]
   1ab78:	strd	r2, [sp, #16]
   1ab7c:	bl	1ba80 <__assert_fail@plt+0x9d0c>
   1ab80:	adds	r0, r0, #0
   1ab84:	movne	r0, #1
   1ab88:	add	sp, sp, #28
   1ab8c:	ldrd	r4, [sp]
   1ab90:	add	sp, sp, #8
   1ab94:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab98:	mov	r0, r3
   1ab9c:	bx	lr
   1aba0:	and	r3, r0, #61440	; 0xf000
   1aba4:	cmp	r3, #32768	; 0x8000
   1aba8:	moveq	r2, #45	; 0x2d
   1abac:	beq	1abf8 <__assert_fail@plt+0x8e84>
   1abb0:	cmp	r3, #16384	; 0x4000
   1abb4:	moveq	r2, #100	; 0x64
   1abb8:	beq	1abf8 <__assert_fail@plt+0x8e84>
   1abbc:	cmp	r3, #24576	; 0x6000
   1abc0:	moveq	r2, #98	; 0x62
   1abc4:	beq	1abf8 <__assert_fail@plt+0x8e84>
   1abc8:	cmp	r3, #8192	; 0x2000
   1abcc:	moveq	r2, #99	; 0x63
   1abd0:	beq	1abf8 <__assert_fail@plt+0x8e84>
   1abd4:	cmp	r3, #40960	; 0xa000
   1abd8:	moveq	r2, #108	; 0x6c
   1abdc:	beq	1abf8 <__assert_fail@plt+0x8e84>
   1abe0:	cmp	r3, #4096	; 0x1000
   1abe4:	moveq	r2, #112	; 0x70
   1abe8:	beq	1abf8 <__assert_fail@plt+0x8e84>
   1abec:	cmp	r3, #49152	; 0xc000
   1abf0:	moveq	r2, #115	; 0x73
   1abf4:	movne	r2, #63	; 0x3f
   1abf8:	tst	r0, #256	; 0x100
   1abfc:	strb	r2, [r1]
   1ac00:	and	r3, r0, #64	; 0x40
   1ac04:	movne	ip, #114	; 0x72
   1ac08:	moveq	ip, #45	; 0x2d
   1ac0c:	tst	r0, #128	; 0x80
   1ac10:	movne	r2, #119	; 0x77
   1ac14:	moveq	r2, #45	; 0x2d
   1ac18:	strb	ip, [r1, #1]
   1ac1c:	tst	r0, #2048	; 0x800
   1ac20:	strb	r2, [r1, #2]
   1ac24:	beq	1acc4 <__assert_fail@plt+0x8f50>
   1ac28:	cmp	r3, #0
   1ac2c:	movne	r2, #115	; 0x73
   1ac30:	moveq	r2, #83	; 0x53
   1ac34:	tst	r0, #32
   1ac38:	strb	r2, [r1, #3]
   1ac3c:	and	r3, r0, #8
   1ac40:	movne	ip, #114	; 0x72
   1ac44:	moveq	ip, #45	; 0x2d
   1ac48:	tst	r0, #16
   1ac4c:	movne	r2, #119	; 0x77
   1ac50:	moveq	r2, #45	; 0x2d
   1ac54:	strb	ip, [r1, #4]
   1ac58:	tst	r0, #1024	; 0x400
   1ac5c:	strb	r2, [r1, #5]
   1ac60:	beq	1acd4 <__assert_fail@plt+0x8f60>
   1ac64:	cmp	r3, #0
   1ac68:	movne	r2, #115	; 0x73
   1ac6c:	moveq	r2, #83	; 0x53
   1ac70:	tst	r0, #4
   1ac74:	strb	r2, [r1, #6]
   1ac78:	and	r3, r0, #1
   1ac7c:	movne	ip, #114	; 0x72
   1ac80:	moveq	ip, #45	; 0x2d
   1ac84:	tst	r0, #2
   1ac88:	movne	r2, #119	; 0x77
   1ac8c:	moveq	r2, #45	; 0x2d
   1ac90:	strb	ip, [r1, #7]
   1ac94:	tst	r0, #512	; 0x200
   1ac98:	strb	r2, [r1, #8]
   1ac9c:	beq	1ace4 <__assert_fail@plt+0x8f70>
   1aca0:	cmp	r3, #0
   1aca4:	movne	r0, #116	; 0x74
   1aca8:	moveq	r0, #84	; 0x54
   1acac:	mov	r2, #32
   1acb0:	mov	r3, #0
   1acb4:	strb	r0, [r1, #9]
   1acb8:	strb	r2, [r1, #10]
   1acbc:	strb	r3, [r1, #11]
   1acc0:	bx	lr
   1acc4:	cmp	r3, #0
   1acc8:	movne	r2, #120	; 0x78
   1accc:	moveq	r2, #45	; 0x2d
   1acd0:	b	1ac34 <__assert_fail@plt+0x8ec0>
   1acd4:	cmp	r3, #0
   1acd8:	movne	r2, #120	; 0x78
   1acdc:	moveq	r2, #45	; 0x2d
   1ace0:	b	1ac70 <__assert_fail@plt+0x8efc>
   1ace4:	cmp	r3, #0
   1ace8:	movne	r0, #120	; 0x78
   1acec:	moveq	r0, #45	; 0x2d
   1acf0:	b	1acac <__assert_fail@plt+0x8f38>
   1acf4:	ldr	r0, [r0, #16]
   1acf8:	b	1aba0 <__assert_fail@plt+0x8e2c>
   1acfc:	str	r4, [sp, #-8]!
   1ad00:	str	lr, [sp, #4]
   1ad04:	bl	1ad20 <__assert_fail@plt+0x8fac>
   1ad08:	cmp	r0, #0
   1ad0c:	beq	1ad1c <__assert_fail@plt+0x8fa8>
   1ad10:	ldr	r4, [sp]
   1ad14:	add	sp, sp, #4
   1ad18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad1c:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   1ad20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ad24:	strd	r6, [sp, #8]
   1ad28:	mov	r6, r1
   1ad2c:	mov	r7, r0
   1ad30:	strd	r8, [sp, #16]
   1ad34:	mov	r9, r2
   1ad38:	strd	sl, [sp, #24]
   1ad3c:	str	lr, [sp, #32]
   1ad40:	sub	sp, sp, #4
   1ad44:	bl	1a040 <__assert_fail@plt+0x82cc>
   1ad48:	mov	r4, r0
   1ad4c:	bl	1a090 <__assert_fail@plt+0x831c>
   1ad50:	mov	r5, r0
   1ad54:	mov	r0, r6
   1ad58:	bl	11b94 <strlen@plt>
   1ad5c:	sub	r4, r4, r7
   1ad60:	cmp	r5, #0
   1ad64:	add	r4, r4, r5
   1ad68:	mov	r8, r0
   1ad6c:	beq	1ae04 <__assert_fail@plt+0x9090>
   1ad70:	add	r3, r7, r4
   1ad74:	ldrb	r3, [r3, #-1]
   1ad78:	cmp	r3, #47	; 0x2f
   1ad7c:	beq	1adf8 <__assert_fail@plt+0x9084>
   1ad80:	ldrb	r3, [r6]
   1ad84:	cmp	r3, #47	; 0x2f
   1ad88:	beq	1adf8 <__assert_fail@plt+0x9084>
   1ad8c:	mov	r5, #1
   1ad90:	mov	sl, #47	; 0x2f
   1ad94:	add	r0, r8, #1
   1ad98:	add	r0, r0, r4
   1ad9c:	add	r0, r0, r5
   1ada0:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   1ada4:	subs	fp, r0, #0
   1ada8:	beq	1add8 <__assert_fail@plt+0x9064>
   1adac:	mov	r2, r4
   1adb0:	mov	r1, r7
   1adb4:	bl	11b40 <mempcpy@plt>
   1adb8:	cmp	r9, #0
   1adbc:	mov	r2, r8
   1adc0:	strb	sl, [r0], r5
   1adc4:	mov	r1, r6
   1adc8:	strne	r0, [r9]
   1adcc:	bl	11b40 <mempcpy@plt>
   1add0:	mov	r3, #0
   1add4:	strb	r3, [r0]
   1add8:	mov	r0, fp
   1addc:	add	sp, sp, #4
   1ade0:	ldrd	r4, [sp]
   1ade4:	ldrd	r6, [sp, #8]
   1ade8:	ldrd	r8, [sp, #16]
   1adec:	ldrd	sl, [sp, #24]
   1adf0:	add	sp, sp, #32
   1adf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1adf8:	mov	r5, #0
   1adfc:	mov	sl, r5
   1ae00:	b	1ad94 <__assert_fail@plt+0x9020>
   1ae04:	ldrb	r3, [r6]
   1ae08:	cmp	r3, #47	; 0x2f
   1ae0c:	moveq	r5, #1
   1ae10:	movne	sl, #0
   1ae14:	moveq	sl, #46	; 0x2e
   1ae18:	b	1ad94 <__assert_fail@plt+0x9020>
   1ae1c:	ldr	r2, [r0]
   1ae20:	ldrb	r3, [r2]
   1ae24:	cmp	r3, #0
   1ae28:	beq	1aee8 <__assert_fail@plt+0x9174>
   1ae2c:	mov	r1, #0
   1ae30:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae34:	mov	ip, r1
   1ae38:	b	1ae7c <__assert_fail@plt+0x9108>
   1ae3c:	cmp	r3, #65	; 0x41
   1ae40:	bcc	1ae58 <__assert_fail@plt+0x90e4>
   1ae44:	cmp	r3, #90	; 0x5a
   1ae48:	bls	1aeb4 <__assert_fail@plt+0x9140>
   1ae4c:	sub	r1, r3, #97	; 0x61
   1ae50:	cmp	r1, #25
   1ae54:	bls	1aeb4 <__assert_fail@plt+0x9140>
   1ae58:	cmp	r3, #126	; 0x7e
   1ae5c:	movne	ip, #0
   1ae60:	movne	r1, ip
   1ae64:	beq	1aeb4 <__assert_fail@plt+0x9140>
   1ae68:	add	r2, r2, #1
   1ae6c:	str	r2, [r0]
   1ae70:	ldrb	r3, [r2]
   1ae74:	cmp	r3, #0
   1ae78:	beq	1aee0 <__assert_fail@plt+0x916c>
   1ae7c:	cmp	r1, #0
   1ae80:	bne	1ae3c <__assert_fail@plt+0x90c8>
   1ae84:	cmp	r3, #46	; 0x2e
   1ae88:	beq	1aecc <__assert_fail@plt+0x9158>
   1ae8c:	cmp	r3, #90	; 0x5a
   1ae90:	bhi	1aebc <__assert_fail@plt+0x9148>
   1ae94:	cmp	r3, #65	; 0x41
   1ae98:	bcs	1ae68 <__assert_fail@plt+0x90f4>
   1ae9c:	sub	lr, r3, #48	; 0x30
   1aea0:	cmp	lr, #9
   1aea4:	bls	1ae68 <__assert_fail@plt+0x90f4>
   1aea8:	cmp	r3, #126	; 0x7e
   1aeac:	movne	ip, #0
   1aeb0:	b	1ae68 <__assert_fail@plt+0x90f4>
   1aeb4:	mov	r1, #0
   1aeb8:	b	1ae68 <__assert_fail@plt+0x90f4>
   1aebc:	sub	lr, r3, #97	; 0x61
   1aec0:	cmp	lr, #25
   1aec4:	bhi	1aea8 <__assert_fail@plt+0x9134>
   1aec8:	b	1ae68 <__assert_fail@plt+0x90f4>
   1aecc:	cmp	ip, #0
   1aed0:	moveq	ip, r2
   1aed4:	moveq	r1, #1
   1aed8:	movne	r1, #1
   1aedc:	b	1ae68 <__assert_fail@plt+0x90f4>
   1aee0:	mov	r0, ip
   1aee4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aee8:	mov	r0, r3
   1aeec:	bx	lr
   1aef0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aef4:	mov	r4, r0
   1aef8:	mov	r5, r1
   1aefc:	strd	r6, [sp, #8]
   1af00:	strd	r8, [sp, #16]
   1af04:	strd	sl, [sp, #24]
   1af08:	str	lr, [sp, #32]
   1af0c:	sub	sp, sp, #28
   1af10:	bl	118a0 <strcmp@plt>
   1af14:	subs	r6, r0, #0
   1af18:	beq	1b1ac <__assert_fail@plt+0x9438>
   1af1c:	ldrb	r8, [r4]
   1af20:	cmp	r8, #0
   1af24:	beq	1b220 <__assert_fail@plt+0x94ac>
   1af28:	ldrb	r7, [r5]
   1af2c:	cmp	r7, #0
   1af30:	beq	1b1a8 <__assert_fail@plt+0x9434>
   1af34:	movw	r0, #35724	; 0x8b8c
   1af38:	movt	r0, #2
   1af3c:	mov	r1, r4
   1af40:	bl	118a0 <strcmp@plt>
   1af44:	cmp	r0, #0
   1af48:	beq	1b220 <__assert_fail@plt+0x94ac>
   1af4c:	movw	r0, #35724	; 0x8b8c
   1af50:	movt	r0, #2
   1af54:	mov	r1, r5
   1af58:	bl	118a0 <strcmp@plt>
   1af5c:	cmp	r0, #0
   1af60:	beq	1b1a8 <__assert_fail@plt+0x9434>
   1af64:	movw	r0, #37144	; 0x9118
   1af68:	movt	r0, #2
   1af6c:	mov	r1, r4
   1af70:	bl	118a0 <strcmp@plt>
   1af74:	cmp	r0, #0
   1af78:	beq	1b220 <__assert_fail@plt+0x94ac>
   1af7c:	movw	r0, #37144	; 0x9118
   1af80:	movt	r0, #2
   1af84:	mov	r1, r5
   1af88:	bl	118a0 <strcmp@plt>
   1af8c:	cmp	r0, #0
   1af90:	beq	1b1a8 <__assert_fail@plt+0x9434>
   1af94:	sub	r3, r8, #46	; 0x2e
   1af98:	clz	r3, r3
   1af9c:	lsr	r3, r3, #5
   1afa0:	cmp	r7, #46	; 0x2e
   1afa4:	moveq	r2, #0
   1afa8:	andne	r2, r3, #1
   1afac:	cmp	r2, #0
   1afb0:	bne	1b220 <__assert_fail@plt+0x94ac>
   1afb4:	sub	r7, r7, #46	; 0x2e
   1afb8:	clz	r7, r7
   1afbc:	lsr	r7, r7, #5
   1afc0:	cmp	r8, #46	; 0x2e
   1afc4:	moveq	r8, #0
   1afc8:	andne	r8, r7, #1
   1afcc:	cmp	r8, #0
   1afd0:	bne	1b1a8 <__assert_fail@plt+0x9434>
   1afd4:	tst	r7, r3
   1afd8:	add	r0, sp, #16
   1afdc:	addne	r4, r4, #1
   1afe0:	addne	r5, r5, #1
   1afe4:	strd	r4, [sp, #16]
   1afe8:	bl	1ae1c <__assert_fail@plt+0x90a8>
   1afec:	mov	r7, r0
   1aff0:	add	r0, sp, #20
   1aff4:	bl	1ae1c <__assert_fail@plt+0x90a8>
   1aff8:	cmp	r7, #0
   1affc:	beq	1b238 <__assert_fail@plt+0x94c4>
   1b000:	cmp	r0, #0
   1b004:	sub	r7, r7, r4
   1b008:	beq	1b2a8 <__assert_fail@plt+0x9534>
   1b00c:	sub	sl, r0, r5
   1b010:	cmp	r7, sl
   1b014:	beq	1b254 <__assert_fail@plt+0x94e0>
   1b018:	mov	r3, #0
   1b01c:	rsb	r0, r4, #1
   1b020:	mov	r2, r3
   1b024:	rsb	fp, r5, #1
   1b028:	cmp	sl, r3
   1b02c:	cmpls	r7, r2
   1b030:	bls	1b1ac <__assert_fail@plt+0x9438>
   1b034:	cmp	r7, r2
   1b038:	sub	r8, r3, r2
   1b03c:	bls	1b0b4 <__assert_fail@plt+0x9340>
   1b040:	ldrb	ip, [r4, r2]
   1b044:	sub	r1, ip, #48	; 0x30
   1b048:	cmp	r1, #9
   1b04c:	bls	1b0b4 <__assert_fail@plt+0x9340>
   1b050:	cmp	ip, #65	; 0x41
   1b054:	mov	lr, ip
   1b058:	bcc	1b070 <__assert_fail@plt+0x92fc>
   1b05c:	cmp	ip, #90	; 0x5a
   1b060:	bls	1b228 <__assert_fail@plt+0x94b4>
   1b064:	sub	r1, ip, #97	; 0x61
   1b068:	cmp	r1, #25
   1b06c:	bls	1b228 <__assert_fail@plt+0x94b4>
   1b070:	cmp	ip, #126	; 0x7e
   1b074:	beq	1b288 <__assert_fail@plt+0x9514>
   1b078:	add	lr, ip, #256	; 0x100
   1b07c:	add	r1, r2, r8
   1b080:	cmp	sl, r1
   1b084:	beq	1b280 <__assert_fail@plt+0x950c>
   1b088:	ldrb	r1, [r5, r3]
   1b08c:	sub	ip, r1, #48	; 0x30
   1b090:	cmp	ip, #9
   1b094:	bhi	1b1e8 <__assert_fail@plt+0x9474>
   1b098:	mov	ip, #0
   1b09c:	cmp	ip, lr
   1b0a0:	bne	1b298 <__assert_fail@plt+0x9524>
   1b0a4:	add	r2, r2, #1
   1b0a8:	add	r3, r3, #1
   1b0ac:	cmp	r7, r2
   1b0b0:	bhi	1b040 <__assert_fail@plt+0x92cc>
   1b0b4:	cmp	sl, r3
   1b0b8:	ldrb	r1, [r5, r3]
   1b0bc:	bls	1b0cc <__assert_fail@plt+0x9358>
   1b0c0:	sub	ip, r1, #48	; 0x30
   1b0c4:	cmp	ip, #9
   1b0c8:	bhi	1b1cc <__assert_fail@plt+0x9458>
   1b0cc:	ldrb	ip, [r4, r2]
   1b0d0:	add	lr, r4, r2
   1b0d4:	cmp	ip, #48	; 0x30
   1b0d8:	bne	1b0ec <__assert_fail@plt+0x9378>
   1b0dc:	add	r2, r0, lr
   1b0e0:	ldrb	ip, [lr, #1]!
   1b0e4:	cmp	ip, #48	; 0x30
   1b0e8:	beq	1b0dc <__assert_fail@plt+0x9368>
   1b0ec:	cmp	r1, #48	; 0x30
   1b0f0:	bne	1b108 <__assert_fail@plt+0x9394>
   1b0f4:	add	lr, r5, r3
   1b0f8:	add	r3, fp, lr
   1b0fc:	ldrb	r1, [lr, #1]!
   1b100:	cmp	r1, #48	; 0x30
   1b104:	beq	1b0f8 <__assert_fail@plt+0x9384>
   1b108:	sub	lr, ip, #48	; 0x30
   1b10c:	sub	r8, r1, #48	; 0x30
   1b110:	cmp	lr, #9
   1b114:	bhi	1b218 <__assert_fail@plt+0x94a4>
   1b118:	cmp	r8, #9
   1b11c:	bhi	1b1a8 <__assert_fail@plt+0x9434>
   1b120:	add	lr, r4, r2
   1b124:	mov	r8, #0
   1b128:	str	lr, [sp, #8]
   1b12c:	add	lr, r5, r3
   1b130:	str	lr, [sp, #4]
   1b134:	mov	lr, r2
   1b138:	str	r8, [sp, #12]
   1b13c:	ldr	r9, [sp, #4]
   1b140:	add	lr, lr, #1
   1b144:	ldr	r8, [sp, #12]
   1b148:	cmp	r8, #0
   1b14c:	sub	r8, lr, r2
   1b150:	subeq	r1, ip, r1
   1b154:	add	r8, r8, r3
   1b158:	streq	r1, [sp, #12]
   1b15c:	ldr	r1, [sp, #8]
   1b160:	ldrb	ip, [r1, #1]!
   1b164:	str	r1, [sp, #8]
   1b168:	ldrb	r1, [r9, #1]!
   1b16c:	str	r9, [sp, #4]
   1b170:	sub	r9, ip, #48	; 0x30
   1b174:	cmp	r9, #9
   1b178:	sub	r9, r1, #48	; 0x30
   1b17c:	bls	1b1a0 <__assert_fail@plt+0x942c>
   1b180:	cmp	r9, #9
   1b184:	bls	1b220 <__assert_fail@plt+0x94ac>
   1b188:	ldr	r3, [sp, #12]
   1b18c:	cmp	r3, #0
   1b190:	bne	1b2a0 <__assert_fail@plt+0x952c>
   1b194:	mov	r2, lr
   1b198:	mov	r3, r8
   1b19c:	b	1b028 <__assert_fail@plt+0x92b4>
   1b1a0:	cmp	r9, #9
   1b1a4:	bls	1b13c <__assert_fail@plt+0x93c8>
   1b1a8:	mov	r6, #1
   1b1ac:	mov	r0, r6
   1b1b0:	add	sp, sp, #28
   1b1b4:	ldrd	r4, [sp]
   1b1b8:	ldrd	r6, [sp, #8]
   1b1bc:	ldrd	r8, [sp, #16]
   1b1c0:	ldrd	sl, [sp, #24]
   1b1c4:	add	sp, sp, #32
   1b1c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1cc:	cmp	r7, r2
   1b1d0:	beq	1b1e4 <__assert_fail@plt+0x9470>
   1b1d4:	ldrb	ip, [r4, r2]
   1b1d8:	sub	lr, ip, #48	; 0x30
   1b1dc:	cmp	lr, #9
   1b1e0:	bhi	1b050 <__assert_fail@plt+0x92dc>
   1b1e4:	mov	lr, #0
   1b1e8:	cmp	r1, #65	; 0x41
   1b1ec:	mov	ip, r1
   1b1f0:	bcc	1b208 <__assert_fail@plt+0x9494>
   1b1f4:	cmp	r1, #90	; 0x5a
   1b1f8:	bls	1b09c <__assert_fail@plt+0x9328>
   1b1fc:	sub	r9, r1, #97	; 0x61
   1b200:	cmp	r9, #25
   1b204:	bls	1b09c <__assert_fail@plt+0x9328>
   1b208:	cmp	r1, #126	; 0x7e
   1b20c:	beq	1b290 <__assert_fail@plt+0x951c>
   1b210:	add	ip, r1, #256	; 0x100
   1b214:	b	1b09c <__assert_fail@plt+0x9328>
   1b218:	cmp	r8, #9
   1b21c:	bhi	1b028 <__assert_fail@plt+0x92b4>
   1b220:	mvn	r6, #0
   1b224:	b	1b1ac <__assert_fail@plt+0x9438>
   1b228:	add	r1, r2, r8
   1b22c:	cmp	sl, r1
   1b230:	bne	1b088 <__assert_fail@plt+0x9314>
   1b234:	b	1b098 <__assert_fail@plt+0x9324>
   1b238:	ldr	r7, [sp, #16]
   1b23c:	cmp	r0, #0
   1b240:	sub	r7, r7, r4
   1b244:	bne	1b00c <__assert_fail@plt+0x9298>
   1b248:	ldr	r0, [sp, #20]
   1b24c:	sub	sl, r0, r5
   1b250:	b	1b018 <__assert_fail@plt+0x92a4>
   1b254:	mov	r2, r7
   1b258:	mov	r1, r5
   1b25c:	mov	r0, r4
   1b260:	bl	11d20 <strncmp@plt>
   1b264:	cmp	r0, #0
   1b268:	bne	1b018 <__assert_fail@plt+0x92a4>
   1b26c:	ldr	r7, [sp, #16]
   1b270:	ldr	r3, [sp, #20]
   1b274:	sub	r7, r7, r4
   1b278:	sub	sl, r3, r5
   1b27c:	b	1b018 <__assert_fail@plt+0x92a4>
   1b280:	mov	r6, lr
   1b284:	b	1b1ac <__assert_fail@plt+0x9438>
   1b288:	mvn	lr, #0
   1b28c:	b	1b07c <__assert_fail@plt+0x9308>
   1b290:	mvn	ip, #0
   1b294:	b	1b09c <__assert_fail@plt+0x9328>
   1b298:	sub	r6, lr, ip
   1b29c:	b	1b1ac <__assert_fail@plt+0x9438>
   1b2a0:	ldr	r6, [sp, #12]
   1b2a4:	b	1b1ac <__assert_fail@plt+0x9438>
   1b2a8:	ldr	r3, [sp, #20]
   1b2ac:	sub	sl, r3, r5
   1b2b0:	b	1b010 <__assert_fail@plt+0x929c>
   1b2b4:	strd	r4, [sp, #-12]!
   1b2b8:	mov	r5, r0
   1b2bc:	str	lr, [sp, #8]
   1b2c0:	sub	sp, sp, #12
   1b2c4:	bl	11bb8 <__errno_location@plt>
   1b2c8:	mov	r4, r0
   1b2cc:	mov	r2, #0
   1b2d0:	ldr	r3, [r4]
   1b2d4:	mov	r0, r5
   1b2d8:	str	r2, [r4]
   1b2dc:	str	r3, [sp]
   1b2e0:	str	r3, [sp, #4]
   1b2e4:	bl	11900 <free@plt>
   1b2e8:	ldr	r3, [r4]
   1b2ec:	add	r2, sp, #8
   1b2f0:	clz	r3, r3
   1b2f4:	lsr	r3, r3, #5
   1b2f8:	add	r3, r2, r3, lsl #2
   1b2fc:	ldr	r3, [r3, #-8]
   1b300:	str	r3, [r4]
   1b304:	add	sp, sp, #12
   1b308:	ldrd	r4, [sp]
   1b30c:	add	sp, sp, #8
   1b310:	pop	{pc}		; (ldr pc, [sp], #4)
   1b314:	mov	r1, r0
   1b318:	mov	r0, #0
   1b31c:	b	11918 <clock_gettime@plt>
   1b320:	str	r4, [sp, #-8]!
   1b324:	mov	r4, r0
   1b328:	mov	r0, #0
   1b32c:	str	lr, [sp, #4]
   1b330:	sub	sp, sp, #8
   1b334:	mov	r1, sp
   1b338:	bl	11918 <clock_gettime@plt>
   1b33c:	ldrd	r2, [sp]
   1b340:	mov	r0, r4
   1b344:	strd	r2, [r4]
   1b348:	add	sp, sp, #8
   1b34c:	ldr	r4, [sp]
   1b350:	add	sp, sp, #4
   1b354:	pop	{pc}		; (ldr pc, [sp], #4)
   1b358:	push	{lr}		; (str lr, [sp, #-4]!)
   1b35c:	sub	sp, sp, #268	; 0x10c
   1b360:	movw	r2, #257	; 0x101
   1b364:	add	r1, sp, #4
   1b368:	bl	22874 <_obstack_memory_used@@Base+0x25dc>
   1b36c:	cmp	r0, #0
   1b370:	movne	r0, #0
   1b374:	bne	1b3a8 <__assert_fail@plt+0x9634>
   1b378:	movw	r1, #37148	; 0x911c
   1b37c:	movt	r1, #2
   1b380:	add	r0, sp, #4
   1b384:	bl	118a0 <strcmp@plt>
   1b388:	cmp	r0, #0
   1b38c:	beq	1b3a8 <__assert_fail@plt+0x9634>
   1b390:	add	r0, sp, #4
   1b394:	movw	r1, #37152	; 0x9120
   1b398:	movt	r1, #2
   1b39c:	bl	118a0 <strcmp@plt>
   1b3a0:	adds	r0, r0, #0
   1b3a4:	movne	r0, #1
   1b3a8:	add	sp, sp, #268	; 0x10c
   1b3ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3b0:	cmp	r0, #10
   1b3b4:	movcc	r0, #10
   1b3b8:	orr	r0, r0, #1
   1b3bc:	cmn	r0, #1
   1b3c0:	bxeq	lr
   1b3c4:	push	{lr}		; (str lr, [sp, #-4]!)
   1b3c8:	movw	lr, #43691	; 0xaaab
   1b3cc:	movt	lr, #43690	; 0xaaaa
   1b3d0:	umull	r2, r3, lr, r0
   1b3d4:	cmp	r0, #9
   1b3d8:	lsr	r3, r3, #1
   1b3dc:	add	r3, r3, r3, lsl #1
   1b3e0:	sub	r3, r0, r3
   1b3e4:	bls	1b424 <__assert_fail@plt+0x96b0>
   1b3e8:	cmp	r3, #0
   1b3ec:	beq	1b42c <__assert_fail@plt+0x96b8>
   1b3f0:	mov	ip, #16
   1b3f4:	mov	r1, #9
   1b3f8:	mov	r2, #3
   1b3fc:	b	1b408 <__assert_fail@plt+0x9694>
   1b400:	cmp	r3, #0
   1b404:	beq	1b42c <__assert_fail@plt+0x96b8>
   1b408:	add	r2, r2, #2
   1b40c:	add	r1, r1, ip
   1b410:	cmp	r1, r0
   1b414:	add	ip, ip, #8
   1b418:	udiv	r3, r0, r2
   1b41c:	mls	r3, r2, r3, r0
   1b420:	bcc	1b400 <__assert_fail@plt+0x968c>
   1b424:	cmp	r3, #0
   1b428:	bne	1b438 <__assert_fail@plt+0x96c4>
   1b42c:	add	r0, r0, #2
   1b430:	cmn	r0, #1
   1b434:	bne	1b3d0 <__assert_fail@plt+0x965c>
   1b438:	pop	{pc}		; (ldr pc, [sp], #4)
   1b43c:	ror	r0, r0, #3
   1b440:	udiv	r3, r0, r1
   1b444:	mls	r0, r3, r1, r0
   1b448:	bx	lr
   1b44c:	sub	r0, r1, r0
   1b450:	clz	r0, r0
   1b454:	lsr	r0, r0, #5
   1b458:	bx	lr
   1b45c:	str	r4, [sp, #-8]!
   1b460:	mov	r4, r0
   1b464:	mov	r0, r1
   1b468:	ldr	r1, [r4, #8]
   1b46c:	ldr	r3, [r4, #24]
   1b470:	str	lr, [sp, #4]
   1b474:	blx	r3
   1b478:	ldr	r3, [r4, #8]
   1b47c:	cmp	r3, r0
   1b480:	bls	1b498 <__assert_fail@plt+0x9724>
   1b484:	ldr	r3, [r4]
   1b488:	ldr	r4, [sp]
   1b48c:	add	sp, sp, #4
   1b490:	add	r0, r3, r0, lsl #3
   1b494:	pop	{pc}		; (ldr pc, [sp], #4)
   1b498:	bl	11d2c <abort@plt>
   1b49c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b4a0:	mov	r5, r1
   1b4a4:	strd	r6, [sp, #8]
   1b4a8:	mov	r7, r3
   1b4ac:	mov	r6, r0
   1b4b0:	str	r8, [sp, #16]
   1b4b4:	mov	r8, r2
   1b4b8:	str	lr, [sp, #20]
   1b4bc:	bl	1b45c <__assert_fail@plt+0x96e8>
   1b4c0:	str	r0, [r8]
   1b4c4:	ldr	r1, [r0]
   1b4c8:	cmp	r1, #0
   1b4cc:	beq	1b5bc <__assert_fail@plt+0x9848>
   1b4d0:	cmp	r1, r5
   1b4d4:	mov	r4, r0
   1b4d8:	beq	1b584 <__assert_fail@plt+0x9810>
   1b4dc:	mov	r0, r5
   1b4e0:	ldr	r3, [r6, #28]
   1b4e4:	blx	r3
   1b4e8:	cmp	r0, #0
   1b4ec:	bne	1b580 <__assert_fail@plt+0x980c>
   1b4f0:	ldr	r3, [r4, #4]
   1b4f4:	cmp	r3, #0
   1b4f8:	beq	1b5bc <__assert_fail@plt+0x9848>
   1b4fc:	ldr	r1, [r3]
   1b500:	cmp	r5, r1
   1b504:	bne	1b528 <__assert_fail@plt+0x97b4>
   1b508:	b	1b544 <__assert_fail@plt+0x97d0>
   1b50c:	ldr	r4, [r4, #4]
   1b510:	ldr	r3, [r4, #4]
   1b514:	cmp	r3, #0
   1b518:	beq	1b5bc <__assert_fail@plt+0x9848>
   1b51c:	ldr	r1, [r3]
   1b520:	cmp	r1, r5
   1b524:	beq	1b544 <__assert_fail@plt+0x97d0>
   1b528:	mov	r0, r5
   1b52c:	ldr	r3, [r6, #28]
   1b530:	blx	r3
   1b534:	cmp	r0, #0
   1b538:	beq	1b50c <__assert_fail@plt+0x9798>
   1b53c:	ldr	r3, [r4, #4]
   1b540:	ldr	r1, [r3]
   1b544:	cmp	r7, #0
   1b548:	beq	1b568 <__assert_fail@plt+0x97f4>
   1b54c:	ldr	r0, [r3, #4]
   1b550:	mov	r2, #0
   1b554:	str	r0, [r4, #4]
   1b558:	str	r2, [r3]
   1b55c:	ldr	r2, [r6, #36]	; 0x24
   1b560:	str	r2, [r3, #4]
   1b564:	str	r3, [r6, #36]	; 0x24
   1b568:	ldrd	r4, [sp]
   1b56c:	mov	r0, r1
   1b570:	ldrd	r6, [sp, #8]
   1b574:	ldr	r8, [sp, #16]
   1b578:	add	sp, sp, #20
   1b57c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b580:	ldr	r1, [r4]
   1b584:	cmp	r7, #0
   1b588:	beq	1b568 <__assert_fail@plt+0x97f4>
   1b58c:	ldr	r0, [r4, #4]
   1b590:	cmp	r0, #0
   1b594:	streq	r0, [r4]
   1b598:	beq	1b568 <__assert_fail@plt+0x97f4>
   1b59c:	ldrd	r2, [r0]
   1b5a0:	mov	ip, #0
   1b5a4:	strd	r2, [r4]
   1b5a8:	str	ip, [r0]
   1b5ac:	ldr	r3, [r6, #36]	; 0x24
   1b5b0:	str	r3, [r0, #4]
   1b5b4:	str	r0, [r6, #36]	; 0x24
   1b5b8:	b	1b568 <__assert_fail@plt+0x97f4>
   1b5bc:	mov	r1, #0
   1b5c0:	b	1b568 <__assert_fail@plt+0x97f4>
   1b5c4:	ldr	r2, [r0]
   1b5c8:	movw	r3, #37160	; 0x9128
   1b5cc:	movt	r3, #2
   1b5d0:	mov	r1, r0
   1b5d4:	cmp	r2, r3
   1b5d8:	beq	1b660 <__assert_fail@plt+0x98ec>
   1b5dc:	vldr	s14, [pc, #132]	; 1b668 <__assert_fail@plt+0x98f4>
   1b5e0:	vldr	s15, [r2, #8]
   1b5e4:	vcmpe.f32	s15, s14
   1b5e8:	vmrs	APSR_nzcv, fpscr
   1b5ec:	ble	1b654 <__assert_fail@plt+0x98e0>
   1b5f0:	vldr	s13, [pc, #116]	; 1b66c <__assert_fail@plt+0x98f8>
   1b5f4:	vcmpe.f32	s15, s13
   1b5f8:	vmrs	APSR_nzcv, fpscr
   1b5fc:	bpl	1b654 <__assert_fail@plt+0x98e0>
   1b600:	vldr	s13, [pc, #104]	; 1b670 <__assert_fail@plt+0x98fc>
   1b604:	vldr	s12, [r2, #12]
   1b608:	vcmpe.f32	s12, s13
   1b60c:	vmrs	APSR_nzcv, fpscr
   1b610:	ble	1b654 <__assert_fail@plt+0x98e0>
   1b614:	vldr	s13, [r2]
   1b618:	vcmpe.f32	s13, #0.0
   1b61c:	vmrs	APSR_nzcv, fpscr
   1b620:	blt	1b654 <__assert_fail@plt+0x98e0>
   1b624:	vadd.f32	s14, s13, s14
   1b628:	vldr	s13, [r2, #4]
   1b62c:	vcmpe.f32	s14, s13
   1b630:	vmrs	APSR_nzcv, fpscr
   1b634:	bpl	1b654 <__assert_fail@plt+0x98e0>
   1b638:	vldr	s12, [pc, #52]	; 1b674 <__assert_fail@plt+0x9900>
   1b63c:	vcmpe.f32	s13, s12
   1b640:	vmrs	APSR_nzcv, fpscr
   1b644:	bhi	1b654 <__assert_fail@plt+0x98e0>
   1b648:	vcmpe.f32	s15, s14
   1b64c:	vmrs	APSR_nzcv, fpscr
   1b650:	bgt	1b660 <__assert_fail@plt+0x98ec>
   1b654:	mov	r0, #0
   1b658:	str	r3, [r1]
   1b65c:	bx	lr
   1b660:	mov	r0, #1
   1b664:	bx	lr
   1b668:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b66c:	svccc	0x00666666
   1b670:	svccc	0x008ccccd
   1b674:	svccc	0x00800000
   1b678:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b67c:	ldr	r3, [r1, #4]
   1b680:	strd	r6, [sp, #8]
   1b684:	ldr	r6, [r1]
   1b688:	strd	r8, [sp, #16]
   1b68c:	str	sl, [sp, #24]
   1b690:	str	lr, [sp, #28]
   1b694:	cmp	r6, r3
   1b698:	bcs	1b760 <__assert_fail@plt+0x99ec>
   1b69c:	mov	r8, r2
   1b6a0:	mov	r5, r0
   1b6a4:	mov	r7, r1
   1b6a8:	add	r6, r6, #8
   1b6ac:	mov	r9, #0
   1b6b0:	b	1b6c0 <__assert_fail@plt+0x994c>
   1b6b4:	cmp	r3, r6
   1b6b8:	add	r6, r6, #8
   1b6bc:	bls	1b760 <__assert_fail@plt+0x99ec>
   1b6c0:	ldr	sl, [r6, #-8]
   1b6c4:	cmp	sl, #0
   1b6c8:	beq	1b6b4 <__assert_fail@plt+0x9940>
   1b6cc:	ldr	r4, [r6, #-4]
   1b6d0:	cmp	r4, #0
   1b6d4:	bne	1b6f4 <__assert_fail@plt+0x9980>
   1b6d8:	b	1b744 <__assert_fail@plt+0x99d0>
   1b6dc:	ldr	r2, [r0, #4]
   1b6e0:	cmp	r3, #0
   1b6e4:	str	r2, [r4, #4]
   1b6e8:	str	r4, [r0, #4]
   1b6ec:	mov	r4, r3
   1b6f0:	beq	1b740 <__assert_fail@plt+0x99cc>
   1b6f4:	ldr	sl, [r4]
   1b6f8:	mov	r0, r5
   1b6fc:	mov	r1, sl
   1b700:	bl	1b45c <__assert_fail@plt+0x96e8>
   1b704:	ldr	r2, [r0]
   1b708:	ldr	r3, [r4, #4]
   1b70c:	cmp	r2, #0
   1b710:	bne	1b6dc <__assert_fail@plt+0x9968>
   1b714:	ldr	r1, [r5, #12]
   1b718:	cmp	r3, #0
   1b71c:	str	sl, [r0]
   1b720:	add	r1, r1, #1
   1b724:	str	r1, [r5, #12]
   1b728:	str	r2, [r4]
   1b72c:	ldr	r2, [r5, #36]	; 0x24
   1b730:	str	r2, [r4, #4]
   1b734:	str	r4, [r5, #36]	; 0x24
   1b738:	mov	r4, r3
   1b73c:	bne	1b6f4 <__assert_fail@plt+0x9980>
   1b740:	ldr	sl, [r6, #-8]
   1b744:	cmp	r8, #0
   1b748:	str	r9, [r6, #-4]
   1b74c:	beq	1b77c <__assert_fail@plt+0x9a08>
   1b750:	ldr	r3, [r7, #4]
   1b754:	cmp	r3, r6
   1b758:	add	r6, r6, #8
   1b75c:	bhi	1b6c0 <__assert_fail@plt+0x994c>
   1b760:	mov	r0, #1
   1b764:	ldrd	r4, [sp]
   1b768:	ldrd	r6, [sp, #8]
   1b76c:	ldrd	r8, [sp, #16]
   1b770:	ldr	sl, [sp, #24]
   1b774:	add	sp, sp, #28
   1b778:	pop	{pc}		; (ldr pc, [sp], #4)
   1b77c:	mov	r1, sl
   1b780:	mov	r0, r5
   1b784:	bl	1b45c <__assert_fail@plt+0x96e8>
   1b788:	ldr	r3, [r0]
   1b78c:	mov	r4, r0
   1b790:	cmp	r3, #0
   1b794:	beq	1b7d4 <__assert_fail@plt+0x9a60>
   1b798:	ldr	r0, [r5, #36]	; 0x24
   1b79c:	cmp	r0, #0
   1b7a0:	beq	1b7e8 <__assert_fail@plt+0x9a74>
   1b7a4:	ldr	r3, [r0, #4]
   1b7a8:	str	r3, [r5, #36]	; 0x24
   1b7ac:	ldr	r3, [r4, #4]
   1b7b0:	str	sl, [r0]
   1b7b4:	str	r3, [r0, #4]
   1b7b8:	str	r0, [r4, #4]
   1b7bc:	ldr	r2, [r7, #12]
   1b7c0:	str	r9, [r6, #-8]
   1b7c4:	ldr	r3, [r7, #4]
   1b7c8:	sub	r2, r2, #1
   1b7cc:	str	r2, [r7, #12]
   1b7d0:	b	1b6b4 <__assert_fail@plt+0x9940>
   1b7d4:	ldr	r3, [r5, #12]
   1b7d8:	str	sl, [r0]
   1b7dc:	add	r3, r3, #1
   1b7e0:	str	r3, [r5, #12]
   1b7e4:	b	1b7bc <__assert_fail@plt+0x9a48>
   1b7e8:	mov	r0, #8
   1b7ec:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   1b7f0:	cmp	r0, #0
   1b7f4:	bne	1b7ac <__assert_fail@plt+0x9a38>
   1b7f8:	mov	r0, r8
   1b7fc:	b	1b764 <__assert_fail@plt+0x99f0>
   1b800:	ldr	r0, [r0, #8]
   1b804:	bx	lr
   1b808:	ldr	r0, [r0, #12]
   1b80c:	bx	lr
   1b810:	ldr	r0, [r0, #16]
   1b814:	bx	lr
   1b818:	ldm	r0, {r1, r3}
   1b81c:	cmp	r1, r3
   1b820:	bcs	1b894 <__assert_fail@plt+0x9b20>
   1b824:	sub	ip, r3, #1
   1b828:	add	r3, r1, #16
   1b82c:	sub	ip, ip, r1
   1b830:	mov	r0, #0
   1b834:	bic	ip, ip, #7
   1b838:	add	r1, r1, #8
   1b83c:	add	ip, ip, r3
   1b840:	b	1b850 <__assert_fail@plt+0x9adc>
   1b844:	add	r1, r1, #8
   1b848:	cmp	r1, ip
   1b84c:	beq	1b890 <__assert_fail@plt+0x9b1c>
   1b850:	ldr	r3, [r1, #-8]
   1b854:	cmp	r3, #0
   1b858:	beq	1b844 <__assert_fail@plt+0x9ad0>
   1b85c:	ldr	r3, [r1, #-4]
   1b860:	mov	r2, #1
   1b864:	cmp	r3, #0
   1b868:	beq	1b87c <__assert_fail@plt+0x9b08>
   1b86c:	ldr	r3, [r3, #4]
   1b870:	add	r2, r2, #1
   1b874:	cmp	r3, #0
   1b878:	bne	1b86c <__assert_fail@plt+0x9af8>
   1b87c:	cmp	r0, r2
   1b880:	add	r1, r1, #8
   1b884:	movcc	r0, r2
   1b888:	cmp	r1, ip
   1b88c:	bne	1b850 <__assert_fail@plt+0x9adc>
   1b890:	bx	lr
   1b894:	mov	r0, #0
   1b898:	bx	lr
   1b89c:	ldm	r0, {r1, r3}
   1b8a0:	push	{lr}		; (str lr, [sp, #-4]!)
   1b8a4:	cmp	r1, r3
   1b8a8:	bcs	1b93c <__assert_fail@plt+0x9bc8>
   1b8ac:	sub	ip, r3, #1
   1b8b0:	mov	r2, #0
   1b8b4:	sub	ip, ip, r1
   1b8b8:	add	r3, r1, #16
   1b8bc:	bic	ip, ip, #7
   1b8c0:	add	r1, r1, #8
   1b8c4:	add	ip, ip, r3
   1b8c8:	mov	lr, r2
   1b8cc:	b	1b8dc <__assert_fail@plt+0x9b68>
   1b8d0:	add	r1, r1, #8
   1b8d4:	cmp	r1, ip
   1b8d8:	beq	1b918 <__assert_fail@plt+0x9ba4>
   1b8dc:	ldr	r3, [r1, #-8]
   1b8e0:	cmp	r3, #0
   1b8e4:	beq	1b8d0 <__assert_fail@plt+0x9b5c>
   1b8e8:	ldr	r3, [r1, #-4]
   1b8ec:	add	lr, lr, #1
   1b8f0:	add	r2, r2, #1
   1b8f4:	cmp	r3, #0
   1b8f8:	beq	1b8d0 <__assert_fail@plt+0x9b5c>
   1b8fc:	ldr	r3, [r3, #4]
   1b900:	add	r2, r2, #1
   1b904:	cmp	r3, #0
   1b908:	bne	1b8fc <__assert_fail@plt+0x9b88>
   1b90c:	add	r1, r1, #8
   1b910:	cmp	r1, ip
   1b914:	bne	1b8dc <__assert_fail@plt+0x9b68>
   1b918:	ldr	r3, [r0, #12]
   1b91c:	cmp	r3, lr
   1b920:	movne	r0, #0
   1b924:	bne	1b938 <__assert_fail@plt+0x9bc4>
   1b928:	ldr	r0, [r0, #16]
   1b92c:	sub	r0, r0, r2
   1b930:	clz	r0, r0
   1b934:	lsr	r0, r0, #5
   1b938:	pop	{pc}		; (ldr pc, [sp], #4)
   1b93c:	mov	r2, #0
   1b940:	mov	lr, r2
   1b944:	b	1b918 <__assert_fail@plt+0x9ba4>
   1b948:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b94c:	mov	r4, r1
   1b950:	ldr	r2, [r0]
   1b954:	ldr	r1, [r0, #4]
   1b958:	ldr	r3, [r0, #16]
   1b95c:	strd	r6, [sp, #8]
   1b960:	str	lr, [sp, #16]
   1b964:	sub	sp, sp, #12
   1b968:	cmp	r2, r1
   1b96c:	ldrd	r6, [r0, #8]
   1b970:	bcs	1ba70 <__assert_fail@plt+0x9cfc>
   1b974:	sub	ip, r1, #1
   1b978:	add	r1, r2, #16
   1b97c:	sub	ip, ip, r2
   1b980:	add	r0, r2, #8
   1b984:	bic	ip, ip, #7
   1b988:	mov	r5, #0
   1b98c:	add	ip, ip, r1
   1b990:	b	1b9a0 <__assert_fail@plt+0x9c2c>
   1b994:	add	r0, r0, #8
   1b998:	cmp	r0, ip
   1b99c:	beq	1b9e0 <__assert_fail@plt+0x9c6c>
   1b9a0:	ldr	r2, [r0, #-8]
   1b9a4:	cmp	r2, #0
   1b9a8:	beq	1b994 <__assert_fail@plt+0x9c20>
   1b9ac:	ldr	r2, [r0, #-4]
   1b9b0:	mov	r1, #1
   1b9b4:	cmp	r2, #0
   1b9b8:	beq	1b9cc <__assert_fail@plt+0x9c58>
   1b9bc:	ldr	r2, [r2, #4]
   1b9c0:	add	r1, r1, #1
   1b9c4:	cmp	r2, #0
   1b9c8:	bne	1b9bc <__assert_fail@plt+0x9c48>
   1b9cc:	cmp	r5, r1
   1b9d0:	add	r0, r0, #8
   1b9d4:	movcc	r5, r1
   1b9d8:	cmp	r0, ip
   1b9dc:	bne	1b9a0 <__assert_fail@plt+0x9c2c>
   1b9e0:	mov	r1, #1
   1b9e4:	mov	r0, r4
   1b9e8:	movw	r2, #37180	; 0x913c
   1b9ec:	movt	r2, #2
   1b9f0:	bl	11c18 <__fprintf_chk@plt>
   1b9f4:	mov	r3, r6
   1b9f8:	mov	r1, #1
   1b9fc:	mov	r0, r4
   1ba00:	movw	r2, #37204	; 0x9154
   1ba04:	movt	r2, #2
   1ba08:	bl	11c18 <__fprintf_chk@plt>
   1ba0c:	vmov	s15, r7
   1ba10:	mov	r3, r7
   1ba14:	mov	r1, #1
   1ba18:	vldr	d5, [pc, #88]	; 1ba78 <__assert_fail@plt+0x9d04>
   1ba1c:	mov	r0, r4
   1ba20:	movw	r2, #37228	; 0x916c
   1ba24:	movt	r2, #2
   1ba28:	vcvt.f64.u32	d6, s15
   1ba2c:	vmov	s15, r6
   1ba30:	vmul.f64	d6, d6, d5
   1ba34:	vcvt.f64.u32	d7, s15
   1ba38:	vdiv.f64	d5, d6, d7
   1ba3c:	vstr	d5, [sp]
   1ba40:	bl	11c18 <__fprintf_chk@plt>
   1ba44:	mov	r3, r5
   1ba48:	mov	r0, r4
   1ba4c:	movw	r2, #37264	; 0x9190
   1ba50:	movt	r2, #2
   1ba54:	mov	r1, #1
   1ba58:	add	sp, sp, #12
   1ba5c:	ldrd	r4, [sp]
   1ba60:	ldrd	r6, [sp, #8]
   1ba64:	ldr	lr, [sp, #16]
   1ba68:	add	sp, sp, #20
   1ba6c:	b	11c18 <__fprintf_chk@plt>
   1ba70:	mov	r5, #0
   1ba74:	b	1b9e0 <__assert_fail@plt+0x9c6c>
   1ba78:	andeq	r0, r0, r0
   1ba7c:	subsmi	r0, r9, r0
   1ba80:	strd	r4, [sp, #-16]!
   1ba84:	mov	r5, r1
   1ba88:	str	r6, [sp, #8]
   1ba8c:	mov	r6, r0
   1ba90:	str	lr, [sp, #12]
   1ba94:	bl	1b45c <__assert_fail@plt+0x96e8>
   1ba98:	ldr	r3, [r0]
   1ba9c:	cmp	r3, #0
   1baa0:	beq	1badc <__assert_fail@plt+0x9d68>
   1baa4:	mov	r4, r0
   1baa8:	b	1bab0 <__assert_fail@plt+0x9d3c>
   1baac:	ldr	r3, [r4]
   1bab0:	cmp	r3, r5
   1bab4:	mov	r1, r3
   1bab8:	mov	r0, r5
   1babc:	beq	1baf4 <__assert_fail@plt+0x9d80>
   1bac0:	ldr	r3, [r6, #28]
   1bac4:	blx	r3
   1bac8:	cmp	r0, #0
   1bacc:	bne	1baf0 <__assert_fail@plt+0x9d7c>
   1bad0:	ldr	r4, [r4, #4]
   1bad4:	cmp	r4, #0
   1bad8:	bne	1baac <__assert_fail@plt+0x9d38>
   1badc:	ldrd	r4, [sp]
   1bae0:	mov	r0, #0
   1bae4:	ldr	r6, [sp, #8]
   1bae8:	add	sp, sp, #12
   1baec:	pop	{pc}		; (ldr pc, [sp], #4)
   1baf0:	ldr	r5, [r4]
   1baf4:	mov	r0, r5
   1baf8:	ldrd	r4, [sp]
   1bafc:	ldr	r6, [sp, #8]
   1bb00:	add	sp, sp, #12
   1bb04:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb08:	ldr	r3, [r0, #16]
   1bb0c:	cmp	r3, #0
   1bb10:	beq	1bb64 <__assert_fail@plt+0x9df0>
   1bb14:	ldr	r3, [r0]
   1bb18:	ldr	r2, [r0, #4]
   1bb1c:	cmp	r3, r2
   1bb20:	bcs	1bb58 <__assert_fail@plt+0x9de4>
   1bb24:	ldr	r0, [r3]
   1bb28:	cmp	r0, #0
   1bb2c:	bxne	lr
   1bb30:	sub	r2, r2, #1
   1bb34:	sub	r2, r2, r3
   1bb38:	bic	r2, r2, #7
   1bb3c:	add	r2, r3, r2
   1bb40:	b	1bb50 <__assert_fail@plt+0x9ddc>
   1bb44:	ldr	r0, [r3, #8]!
   1bb48:	cmp	r0, #0
   1bb4c:	bxne	lr
   1bb50:	cmp	r3, r2
   1bb54:	bne	1bb44 <__assert_fail@plt+0x9dd0>
   1bb58:	str	r4, [sp, #-8]!
   1bb5c:	str	lr, [sp, #4]
   1bb60:	bl	11d2c <abort@plt>
   1bb64:	mov	r0, r3
   1bb68:	bx	lr
   1bb6c:	strd	r4, [sp, #-16]!
   1bb70:	mov	r5, r0
   1bb74:	mov	r4, r1
   1bb78:	str	r6, [sp, #8]
   1bb7c:	str	lr, [sp, #12]
   1bb80:	bl	1b45c <__assert_fail@plt+0x96e8>
   1bb84:	mov	r2, r0
   1bb88:	mov	r3, r0
   1bb8c:	b	1bb98 <__assert_fail@plt+0x9e24>
   1bb90:	cmp	r3, #0
   1bb94:	beq	1bbb0 <__assert_fail@plt+0x9e3c>
   1bb98:	ldm	r3, {r1, r3}
   1bb9c:	cmp	r1, r4
   1bba0:	bne	1bb90 <__assert_fail@plt+0x9e1c>
   1bba4:	cmp	r3, #0
   1bba8:	ldrne	r0, [r3]
   1bbac:	bne	1bbd4 <__assert_fail@plt+0x9e60>
   1bbb0:	ldr	r3, [r5, #4]
   1bbb4:	b	1bbc4 <__assert_fail@plt+0x9e50>
   1bbb8:	ldr	r0, [r2]
   1bbbc:	cmp	r0, #0
   1bbc0:	bne	1bbd4 <__assert_fail@plt+0x9e60>
   1bbc4:	add	r2, r2, #8
   1bbc8:	cmp	r3, r2
   1bbcc:	bhi	1bbb8 <__assert_fail@plt+0x9e44>
   1bbd0:	mov	r0, #0
   1bbd4:	ldrd	r4, [sp]
   1bbd8:	ldr	r6, [sp, #8]
   1bbdc:	add	sp, sp, #12
   1bbe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbe4:	strd	r4, [sp, #-12]!
   1bbe8:	ldr	r5, [r0]
   1bbec:	str	lr, [sp, #8]
   1bbf0:	ldr	lr, [r0, #4]
   1bbf4:	cmp	lr, r5
   1bbf8:	bls	1bc84 <__assert_fail@plt+0x9f10>
   1bbfc:	mov	ip, #0
   1bc00:	ldr	r3, [r5]
   1bc04:	cmp	r3, #0
   1bc08:	bne	1bc2c <__assert_fail@plt+0x9eb8>
   1bc0c:	add	r5, r5, #8
   1bc10:	cmp	lr, r5
   1bc14:	bhi	1bc00 <__assert_fail@plt+0x9e8c>
   1bc18:	mov	r2, ip
   1bc1c:	ldrd	r4, [sp]
   1bc20:	add	sp, sp, #8
   1bc24:	mov	r0, r2
   1bc28:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc2c:	cmp	r2, ip
   1bc30:	bls	1bc18 <__assert_fail@plt+0x9ea4>
   1bc34:	str	r3, [r1, ip, lsl #2]
   1bc38:	add	r4, ip, #1
   1bc3c:	add	lr, r1, ip, lsl #2
   1bc40:	ldr	r3, [r5, #4]
   1bc44:	cmp	r3, #0
   1bc48:	beq	1bc78 <__assert_fail@plt+0x9f04>
   1bc4c:	mov	ip, r4
   1bc50:	cmp	r2, ip
   1bc54:	add	ip, ip, #1
   1bc58:	beq	1bc1c <__assert_fail@plt+0x9ea8>
   1bc5c:	ldr	r4, [r3]
   1bc60:	str	r4, [lr, #4]!
   1bc64:	ldr	r3, [r3, #4]
   1bc68:	cmp	r3, #0
   1bc6c:	bne	1bc50 <__assert_fail@plt+0x9edc>
   1bc70:	ldr	lr, [r0, #4]
   1bc74:	b	1bc0c <__assert_fail@plt+0x9e98>
   1bc78:	mov	ip, r4
   1bc7c:	ldr	lr, [r0, #4]
   1bc80:	b	1bc0c <__assert_fail@plt+0x9e98>
   1bc84:	mov	r2, #0
   1bc88:	b	1bc1c <__assert_fail@plt+0x9ea8>
   1bc8c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1bc90:	ldr	r3, [r0, #4]
   1bc94:	strd	r6, [sp, #8]
   1bc98:	strd	r8, [sp, #16]
   1bc9c:	ldr	r8, [r0]
   1bca0:	str	sl, [sp, #24]
   1bca4:	str	lr, [sp, #28]
   1bca8:	cmp	r3, r8
   1bcac:	bls	1bd28 <__assert_fail@plt+0x9fb4>
   1bcb0:	mov	r7, r2
   1bcb4:	mov	r6, r1
   1bcb8:	mov	r9, r0
   1bcbc:	mov	r5, #0
   1bcc0:	ldr	r0, [r8]
   1bcc4:	cmp	r0, #0
   1bcc8:	bne	1bcf4 <__assert_fail@plt+0x9f80>
   1bccc:	add	r8, r8, #8
   1bcd0:	cmp	r3, r8
   1bcd4:	bhi	1bcc0 <__assert_fail@plt+0x9f4c>
   1bcd8:	mov	r0, r5
   1bcdc:	ldrd	r4, [sp]
   1bce0:	ldrd	r6, [sp, #8]
   1bce4:	ldrd	r8, [sp, #16]
   1bce8:	ldr	sl, [sp, #24]
   1bcec:	add	sp, sp, #28
   1bcf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcf4:	mov	r4, r8
   1bcf8:	b	1bd00 <__assert_fail@plt+0x9f8c>
   1bcfc:	ldr	r0, [r4]
   1bd00:	mov	r1, r7
   1bd04:	blx	r6
   1bd08:	cmp	r0, #0
   1bd0c:	beq	1bcd8 <__assert_fail@plt+0x9f64>
   1bd10:	ldr	r4, [r4, #4]
   1bd14:	add	r5, r5, #1
   1bd18:	cmp	r4, #0
   1bd1c:	bne	1bcfc <__assert_fail@plt+0x9f88>
   1bd20:	ldr	r3, [r9, #4]
   1bd24:	b	1bccc <__assert_fail@plt+0x9f58>
   1bd28:	mov	r5, #0
   1bd2c:	b	1bcd8 <__assert_fail@plt+0x9f64>
   1bd30:	ldrb	r2, [r0]
   1bd34:	cmp	r2, #0
   1bd38:	beq	1bd64 <__assert_fail@plt+0x9ff0>
   1bd3c:	mov	r3, #0
   1bd40:	rsb	r3, r3, r3, lsl #5
   1bd44:	add	r3, r3, r2
   1bd48:	ldrb	r2, [r0, #1]!
   1bd4c:	udiv	ip, r3, r1
   1bd50:	cmp	r2, #0
   1bd54:	mls	r3, r1, ip, r3
   1bd58:	bne	1bd40 <__assert_fail@plt+0x9fcc>
   1bd5c:	mov	r0, r3
   1bd60:	bx	lr
   1bd64:	mov	r3, r2
   1bd68:	mov	r0, r3
   1bd6c:	bx	lr
   1bd70:	movw	r3, #37160	; 0x9128
   1bd74:	movt	r3, #2
   1bd78:	strd	r4, [sp, #-8]!
   1bd7c:	ldrd	r4, [r3]
   1bd80:	ldr	r1, [r3, #16]
   1bd84:	ldrd	r2, [r3, #8]
   1bd88:	strd	r4, [r0]
   1bd8c:	ldrd	r4, [sp]
   1bd90:	add	sp, sp, #8
   1bd94:	strd	r2, [r0, #8]
   1bd98:	str	r1, [r0, #16]
   1bd9c:	bx	lr
   1bda0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1bda4:	cmp	r2, #0
   1bda8:	movw	ip, #46156	; 0xb44c
   1bdac:	movt	ip, #1
   1bdb0:	strd	r6, [sp, #8]
   1bdb4:	movne	r6, r2
   1bdb8:	str	lr, [sp, #16]
   1bdbc:	sub	sp, sp, #12
   1bdc0:	movw	lr, #46140	; 0xb43c
   1bdc4:	movt	lr, #1
   1bdc8:	mov	r7, r1
   1bdcc:	moveq	r6, lr
   1bdd0:	cmp	r3, #0
   1bdd4:	str	r0, [sp, #4]
   1bdd8:	mov	r0, #40	; 0x28
   1bddc:	movne	r5, r3
   1bde0:	moveq	r5, ip
   1bde4:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   1bde8:	subs	r4, r0, #0
   1bdec:	beq	1be84 <__assert_fail@plt+0xa110>
   1bdf0:	cmp	r7, #0
   1bdf4:	add	r0, r4, #20
   1bdf8:	beq	1be9c <__assert_fail@plt+0xa128>
   1bdfc:	str	r7, [r4, #20]
   1be00:	bl	1b5c4 <__assert_fail@plt+0x9850>
   1be04:	cmp	r0, #0
   1be08:	beq	1bee4 <__assert_fail@plt+0xa170>
   1be0c:	ldrb	r3, [r7, #16]
   1be10:	cmp	r3, #0
   1be14:	beq	1bef4 <__assert_fail@plt+0xa180>
   1be18:	ldr	r0, [sp, #4]
   1be1c:	bl	1b3b0 <__assert_fail@plt+0x963c>
   1be20:	lsrs	r2, r0, #30
   1be24:	movne	r7, #1
   1be28:	moveq	r7, #0
   1be2c:	tst	r0, #536870912	; 0x20000000
   1be30:	bne	1bedc <__assert_fail@plt+0xa168>
   1be34:	cmp	r7, #0
   1be38:	bne	1bedc <__assert_fail@plt+0xa168>
   1be3c:	cmp	r0, #0
   1be40:	str	r0, [r4, #8]
   1be44:	beq	1bee4 <__assert_fail@plt+0xa170>
   1be48:	mov	r1, #8
   1be4c:	bl	24550 <_obstack_memory_used@@Base+0x42b8>
   1be50:	cmp	r0, #0
   1be54:	str	r0, [r4]
   1be58:	beq	1bee4 <__assert_fail@plt+0xa170>
   1be5c:	ldr	r3, [r4, #8]
   1be60:	str	r7, [r4, #12]
   1be64:	str	r7, [r4, #16]
   1be68:	str	r6, [r4, #24]
   1be6c:	str	r5, [r4, #28]
   1be70:	add	r0, r0, r3, lsl #3
   1be74:	ldr	r3, [sp, #32]
   1be78:	str	r0, [r4, #4]
   1be7c:	str	r3, [r4, #32]
   1be80:	str	r7, [r4, #36]	; 0x24
   1be84:	mov	r0, r4
   1be88:	add	sp, sp, #12
   1be8c:	ldrd	r4, [sp]
   1be90:	ldrd	r6, [sp, #8]
   1be94:	add	sp, sp, #16
   1be98:	pop	{pc}		; (ldr pc, [sp], #4)
   1be9c:	movw	r3, #37160	; 0x9128
   1bea0:	movt	r3, #2
   1bea4:	str	r3, [r4, #20]
   1bea8:	bl	1b5c4 <__assert_fail@plt+0x9850>
   1beac:	cmp	r0, #0
   1beb0:	beq	1bee4 <__assert_fail@plt+0xa170>
   1beb4:	vldr	s13, [pc, #64]	; 1befc <__assert_fail@plt+0xa188>
   1beb8:	vldr	s15, [sp, #4]
   1bebc:	vldr	s14, [pc, #60]	; 1bf00 <__assert_fail@plt+0xa18c>
   1bec0:	vcvt.f32.u32	s12, s15
   1bec4:	vdiv.f32	s15, s12, s13
   1bec8:	vcmpe.f32	s15, s14
   1becc:	vmrs	APSR_nzcv, fpscr
   1bed0:	vcvtlt.u32.f32	s15, s15
   1bed4:	vstrlt	s15, [sp, #4]
   1bed8:	blt	1be18 <__assert_fail@plt+0xa0a4>
   1bedc:	mov	r3, #0
   1bee0:	str	r3, [r4, #8]
   1bee4:	mov	r0, r4
   1bee8:	mov	r4, #0
   1beec:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1bef0:	b	1be84 <__assert_fail@plt+0xa110>
   1bef4:	vldr	s13, [r7, #8]
   1bef8:	b	1beb8 <__assert_fail@plt+0xa144>
   1befc:	svccc	0x004ccccd
   1bf00:	svcmi	0x00800000
   1bf04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bf08:	mov	r5, r0
   1bf0c:	ldr	r2, [r0, #4]
   1bf10:	strd	r6, [sp, #8]
   1bf14:	ldr	r6, [r0]
   1bf18:	str	r8, [sp, #16]
   1bf1c:	str	lr, [sp, #20]
   1bf20:	cmp	r6, r2
   1bf24:	addcc	r6, r6, #8
   1bf28:	movcc	r7, #0
   1bf2c:	bcc	1bf40 <__assert_fail@plt+0xa1cc>
   1bf30:	b	1bfb4 <__assert_fail@plt+0xa240>
   1bf34:	cmp	r2, r6
   1bf38:	add	r6, r6, #8
   1bf3c:	bls	1bfb4 <__assert_fail@plt+0xa240>
   1bf40:	ldr	r3, [r6, #-8]
   1bf44:	cmp	r3, #0
   1bf48:	beq	1bf34 <__assert_fail@plt+0xa1c0>
   1bf4c:	ldr	r4, [r6, #-4]
   1bf50:	ldr	r2, [r5, #32]
   1bf54:	cmp	r4, #0
   1bf58:	beq	1bf8c <__assert_fail@plt+0xa218>
   1bf5c:	cmp	r2, #0
   1bf60:	beq	1bf70 <__assert_fail@plt+0xa1fc>
   1bf64:	ldr	r0, [r4]
   1bf68:	blx	r2
   1bf6c:	ldr	r2, [r5, #32]
   1bf70:	ldr	r3, [r4, #4]
   1bf74:	ldr	r1, [r5, #36]	; 0x24
   1bf78:	str	r7, [r4]
   1bf7c:	str	r1, [r4, #4]
   1bf80:	str	r4, [r5, #36]	; 0x24
   1bf84:	subs	r4, r3, #0
   1bf88:	bne	1bf5c <__assert_fail@plt+0xa1e8>
   1bf8c:	cmp	r2, #0
   1bf90:	beq	1bf9c <__assert_fail@plt+0xa228>
   1bf94:	ldr	r0, [r6, #-8]
   1bf98:	blx	r2
   1bf9c:	str	r7, [r6, #-8]
   1bfa0:	str	r7, [r6, #-4]
   1bfa4:	ldr	r2, [r5, #4]
   1bfa8:	cmp	r2, r6
   1bfac:	add	r6, r6, #8
   1bfb0:	bhi	1bf40 <__assert_fail@plt+0xa1cc>
   1bfb4:	mov	r3, #0
   1bfb8:	ldrd	r6, [sp, #8]
   1bfbc:	ldr	r8, [sp, #16]
   1bfc0:	str	r3, [r5, #12]
   1bfc4:	str	r3, [r5, #16]
   1bfc8:	ldrd	r4, [sp]
   1bfcc:	add	sp, sp, #20
   1bfd0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfd4:	strd	r4, [sp, #-16]!
   1bfd8:	ldr	r2, [r0, #32]
   1bfdc:	ldr	r5, [r0]
   1bfe0:	ldr	r3, [r0, #4]
   1bfe4:	cmp	r2, #0
   1bfe8:	str	r6, [sp, #8]
   1bfec:	mov	r6, r0
   1bff0:	str	lr, [sp, #12]
   1bff4:	beq	1c05c <__assert_fail@plt+0xa2e8>
   1bff8:	ldr	r2, [r0, #16]
   1bffc:	cmp	r2, #0
   1c000:	beq	1c05c <__assert_fail@plt+0xa2e8>
   1c004:	cmp	r5, r3
   1c008:	bcc	1c01c <__assert_fail@plt+0xa2a8>
   1c00c:	b	1c090 <__assert_fail@plt+0xa31c>
   1c010:	add	r5, r5, #8
   1c014:	cmp	r3, r5
   1c018:	bls	1c058 <__assert_fail@plt+0xa2e4>
   1c01c:	ldr	r0, [r5]
   1c020:	cmp	r0, #0
   1c024:	beq	1c010 <__assert_fail@plt+0xa29c>
   1c028:	mov	r4, r5
   1c02c:	b	1c034 <__assert_fail@plt+0xa2c0>
   1c030:	ldr	r0, [r4]
   1c034:	ldr	r3, [r6, #32]
   1c038:	blx	r3
   1c03c:	ldr	r4, [r4, #4]
   1c040:	cmp	r4, #0
   1c044:	bne	1c030 <__assert_fail@plt+0xa2bc>
   1c048:	ldr	r3, [r6, #4]
   1c04c:	add	r5, r5, #8
   1c050:	cmp	r3, r5
   1c054:	bhi	1c01c <__assert_fail@plt+0xa2a8>
   1c058:	ldr	r5, [r6]
   1c05c:	cmp	r5, r3
   1c060:	bcs	1c090 <__assert_fail@plt+0xa31c>
   1c064:	ldr	r0, [r5, #4]
   1c068:	cmp	r0, #0
   1c06c:	beq	1c084 <__assert_fail@plt+0xa310>
   1c070:	ldr	r4, [r0, #4]
   1c074:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1c078:	subs	r0, r4, #0
   1c07c:	bne	1c070 <__assert_fail@plt+0xa2fc>
   1c080:	ldr	r3, [r6, #4]
   1c084:	add	r5, r5, #8
   1c088:	cmp	r3, r5
   1c08c:	bhi	1c064 <__assert_fail@plt+0xa2f0>
   1c090:	ldr	r0, [r6, #36]	; 0x24
   1c094:	cmp	r0, #0
   1c098:	beq	1c0ac <__assert_fail@plt+0xa338>
   1c09c:	ldr	r4, [r0, #4]
   1c0a0:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1c0a4:	subs	r0, r4, #0
   1c0a8:	bne	1c09c <__assert_fail@plt+0xa328>
   1c0ac:	ldr	r0, [r6]
   1c0b0:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1c0b4:	mov	r0, r6
   1c0b8:	ldrd	r4, [sp]
   1c0bc:	ldr	r6, [sp, #8]
   1c0c0:	ldr	lr, [sp, #12]
   1c0c4:	add	sp, sp, #16
   1c0c8:	b	1b2b4 <__assert_fail@plt+0x9540>
   1c0cc:	ldr	r3, [r0, #20]
   1c0d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c0d4:	ldrb	r2, [r3, #16]
   1c0d8:	strd	r6, [sp, #8]
   1c0dc:	mov	r6, r0
   1c0e0:	str	lr, [sp, #16]
   1c0e4:	sub	sp, sp, #52	; 0x34
   1c0e8:	str	r1, [sp, #4]
   1c0ec:	cmp	r2, #0
   1c0f0:	bne	1c11c <__assert_fail@plt+0xa3a8>
   1c0f4:	vmov	s15, r1
   1c0f8:	vldr	s13, [r3, #8]
   1c0fc:	vldr	s14, [pc, #340]	; 1c258 <__assert_fail@plt+0xa4e4>
   1c100:	vcvt.f32.u32	s12, s15
   1c104:	vdiv.f32	s15, s12, s13
   1c108:	vcmpe.f32	s15, s14
   1c10c:	vmrs	APSR_nzcv, fpscr
   1c110:	vcvtlt.u32.f32	s15, s15
   1c114:	vstrlt	s15, [sp, #4]
   1c118:	bge	1c14c <__assert_fail@plt+0xa3d8>
   1c11c:	ldr	r0, [sp, #4]
   1c120:	bl	1b3b0 <__assert_fail@plt+0x963c>
   1c124:	lsrs	r3, r0, #30
   1c128:	mov	r5, r0
   1c12c:	movne	r4, #1
   1c130:	moveq	r4, #0
   1c134:	tst	r0, #536870912	; 0x20000000
   1c138:	movne	r4, #1
   1c13c:	cmp	r0, #0
   1c140:	moveq	r4, #1
   1c144:	cmp	r4, #0
   1c148:	beq	1c168 <__assert_fail@plt+0xa3f4>
   1c14c:	mov	r4, #0
   1c150:	mov	r0, r4
   1c154:	add	sp, sp, #52	; 0x34
   1c158:	ldrd	r4, [sp]
   1c15c:	ldrd	r6, [sp, #8]
   1c160:	add	sp, sp, #16
   1c164:	pop	{pc}		; (ldr pc, [sp], #4)
   1c168:	ldr	r3, [r6, #8]
   1c16c:	cmp	r3, r0
   1c170:	beq	1c220 <__assert_fail@plt+0xa4ac>
   1c174:	mov	r1, #8
   1c178:	bl	24550 <_obstack_memory_used@@Base+0x42b8>
   1c17c:	cmp	r0, #0
   1c180:	str	r0, [sp, #8]
   1c184:	beq	1c14c <__assert_fail@plt+0xa3d8>
   1c188:	add	r3, r0, r5, lsl #3
   1c18c:	ldr	r7, [r6, #20]
   1c190:	mov	r2, r4
   1c194:	add	r0, sp, #8
   1c198:	mov	r1, r6
   1c19c:	ldr	lr, [r6, #28]
   1c1a0:	str	r3, [sp, #12]
   1c1a4:	str	r5, [sp, #16]
   1c1a8:	ldr	r5, [r6, #24]
   1c1ac:	str	r4, [sp, #20]
   1c1b0:	ldr	ip, [r6, #32]
   1c1b4:	str	r4, [sp, #24]
   1c1b8:	ldr	r3, [r6, #36]	; 0x24
   1c1bc:	str	r7, [sp, #28]
   1c1c0:	str	r5, [sp, #32]
   1c1c4:	str	lr, [sp, #36]	; 0x24
   1c1c8:	str	ip, [sp, #40]	; 0x28
   1c1cc:	str	r3, [sp, #44]	; 0x2c
   1c1d0:	bl	1b678 <__assert_fail@plt+0x9904>
   1c1d4:	subs	r4, r0, #0
   1c1d8:	bne	1c228 <__assert_fail@plt+0xa4b4>
   1c1dc:	ldr	r3, [sp, #44]	; 0x2c
   1c1e0:	mov	r2, #1
   1c1e4:	add	r1, sp, #8
   1c1e8:	mov	r0, r6
   1c1ec:	str	r3, [r6, #36]	; 0x24
   1c1f0:	bl	1b678 <__assert_fail@plt+0x9904>
   1c1f4:	cmp	r0, #0
   1c1f8:	beq	1c254 <__assert_fail@plt+0xa4e0>
   1c1fc:	add	r1, sp, #8
   1c200:	mov	r0, r6
   1c204:	mov	r2, r4
   1c208:	bl	1b678 <__assert_fail@plt+0x9904>
   1c20c:	cmp	r0, #0
   1c210:	beq	1c254 <__assert_fail@plt+0xa4e0>
   1c214:	ldr	r0, [sp, #8]
   1c218:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1c21c:	b	1c150 <__assert_fail@plt+0xa3dc>
   1c220:	mov	r4, #1
   1c224:	b	1c150 <__assert_fail@plt+0xa3dc>
   1c228:	ldr	r0, [r6]
   1c22c:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1c230:	ldrd	r2, [sp, #8]
   1c234:	ldr	r1, [sp, #16]
   1c238:	strd	r2, [r6]
   1c23c:	ldr	r2, [sp, #20]
   1c240:	str	r1, [r6, #8]
   1c244:	ldr	r3, [sp, #44]	; 0x2c
   1c248:	str	r2, [r6, #12]
   1c24c:	str	r3, [r6, #36]	; 0x24
   1c250:	b	1c150 <__assert_fail@plt+0xa3dc>
   1c254:	bl	11d2c <abort@plt>
   1c258:	svcmi	0x00800000
   1c25c:	strd	r4, [sp, #-16]!
   1c260:	str	r6, [sp, #8]
   1c264:	subs	r6, r1, #0
   1c268:	str	lr, [sp, #12]
   1c26c:	sub	sp, sp, #8
   1c270:	beq	1c3f0 <__assert_fail@plt+0xa67c>
   1c274:	mov	r3, #0
   1c278:	mov	r5, r2
   1c27c:	add	r2, sp, #4
   1c280:	mov	r4, r0
   1c284:	bl	1b49c <__assert_fail@plt+0x9728>
   1c288:	subs	r3, r0, #0
   1c28c:	beq	1c2b8 <__assert_fail@plt+0xa544>
   1c290:	cmp	r5, #0
   1c294:	moveq	r0, r5
   1c298:	beq	1c2a4 <__assert_fail@plt+0xa530>
   1c29c:	mov	r0, #0
   1c2a0:	str	r3, [r5]
   1c2a4:	add	sp, sp, #8
   1c2a8:	ldrd	r4, [sp]
   1c2ac:	ldr	r6, [sp, #8]
   1c2b0:	add	sp, sp, #12
   1c2b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2b8:	vldr	s15, [r4, #8]
   1c2bc:	vldr	s14, [r4, #12]
   1c2c0:	ldr	r3, [r4, #20]
   1c2c4:	vcvt.f32.u32	s15, s15
   1c2c8:	vcvt.f32.u32	s14, s14
   1c2cc:	vldr	s13, [r3, #8]
   1c2d0:	vmul.f32	s15, s15, s13
   1c2d4:	vcmpe.f32	s14, s15
   1c2d8:	vmrs	APSR_nzcv, fpscr
   1c2dc:	bgt	1c324 <__assert_fail@plt+0xa5b0>
   1c2e0:	ldr	r2, [sp, #4]
   1c2e4:	ldr	r3, [r2]
   1c2e8:	cmp	r3, #0
   1c2ec:	beq	1c380 <__assert_fail@plt+0xa60c>
   1c2f0:	ldr	r3, [r4, #36]	; 0x24
   1c2f4:	cmp	r3, #0
   1c2f8:	beq	1c3a4 <__assert_fail@plt+0xa630>
   1c2fc:	ldr	r1, [r3, #4]
   1c300:	str	r1, [r4, #36]	; 0x24
   1c304:	ldr	r1, [r4, #16]
   1c308:	mov	r0, #1
   1c30c:	ldr	ip, [r2, #4]
   1c310:	add	r1, r1, r0
   1c314:	stm	r3, {r6, ip}
   1c318:	str	r3, [r2, #4]
   1c31c:	str	r1, [r4, #16]
   1c320:	b	1c2a4 <__assert_fail@plt+0xa530>
   1c324:	add	r0, r4, #20
   1c328:	bl	1b5c4 <__assert_fail@plt+0x9850>
   1c32c:	vldr	s15, [r4, #8]
   1c330:	vldr	s14, [r4, #12]
   1c334:	ldr	r3, [r4, #20]
   1c338:	vcvt.f32.u32	s15, s15
   1c33c:	vcvt.f32.u32	s14, s14
   1c340:	vldr	s13, [r3, #8]
   1c344:	vmul.f32	s12, s13, s15
   1c348:	vcmpe.f32	s14, s12
   1c34c:	vmrs	APSR_nzcv, fpscr
   1c350:	ble	1c2e0 <__assert_fail@plt+0xa56c>
   1c354:	vldr	s14, [r3, #12]
   1c358:	ldrb	r2, [r3, #16]
   1c35c:	vmul.f32	s15, s15, s14
   1c360:	vldr	s14, [pc, #140]	; 1c3f4 <__assert_fail@plt+0xa680>
   1c364:	cmp	r2, #0
   1c368:	vmuleq.f32	s15, s15, s13
   1c36c:	vcmpe.f32	s15, s14
   1c370:	vmrs	APSR_nzcv, fpscr
   1c374:	blt	1c3bc <__assert_fail@plt+0xa648>
   1c378:	mvn	r0, #0
   1c37c:	b	1c2a4 <__assert_fail@plt+0xa530>
   1c380:	ldr	r1, [r4, #12]
   1c384:	mov	r0, #1
   1c388:	ldr	r3, [r4, #16]
   1c38c:	str	r6, [r2]
   1c390:	add	r2, r1, r0
   1c394:	add	r3, r3, r0
   1c398:	str	r2, [r4, #12]
   1c39c:	str	r3, [r4, #16]
   1c3a0:	b	1c2a4 <__assert_fail@plt+0xa530>
   1c3a4:	mov	r0, #8
   1c3a8:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   1c3ac:	subs	r3, r0, #0
   1c3b0:	beq	1c378 <__assert_fail@plt+0xa604>
   1c3b4:	ldr	r2, [sp, #4]
   1c3b8:	b	1c304 <__assert_fail@plt+0xa590>
   1c3bc:	vcvt.u32.f32	s15, s15
   1c3c0:	mov	r0, r4
   1c3c4:	vmov	r1, s15
   1c3c8:	bl	1c0cc <__assert_fail@plt+0xa358>
   1c3cc:	cmp	r0, #0
   1c3d0:	beq	1c378 <__assert_fail@plt+0xa604>
   1c3d4:	add	r2, sp, #4
   1c3d8:	mov	r3, #0
   1c3dc:	mov	r1, r6
   1c3e0:	mov	r0, r4
   1c3e4:	bl	1b49c <__assert_fail@plt+0x9728>
   1c3e8:	cmp	r0, #0
   1c3ec:	beq	1c2e0 <__assert_fail@plt+0xa56c>
   1c3f0:	bl	11d2c <abort@plt>
   1c3f4:	svcmi	0x00800000
   1c3f8:	str	r4, [sp, #-8]!
   1c3fc:	mov	r4, r1
   1c400:	str	lr, [sp, #4]
   1c404:	sub	sp, sp, #8
   1c408:	add	r2, sp, #4
   1c40c:	bl	1c25c <__assert_fail@plt+0xa4e8>
   1c410:	cmn	r0, #1
   1c414:	moveq	r0, #0
   1c418:	beq	1c428 <__assert_fail@plt+0xa6b4>
   1c41c:	cmp	r0, #0
   1c420:	ldreq	r0, [sp, #4]
   1c424:	movne	r0, r4
   1c428:	add	sp, sp, #8
   1c42c:	ldr	r4, [sp]
   1c430:	add	sp, sp, #4
   1c434:	pop	{pc}		; (ldr pc, [sp], #4)
   1c438:	strd	r4, [sp, #-16]!
   1c43c:	mov	r3, #1
   1c440:	mov	r4, r0
   1c444:	str	r6, [sp, #8]
   1c448:	str	lr, [sp, #12]
   1c44c:	sub	sp, sp, #8
   1c450:	add	r2, sp, #4
   1c454:	bl	1b49c <__assert_fail@plt+0x9728>
   1c458:	subs	r5, r0, #0
   1c45c:	beq	1c47c <__assert_fail@plt+0xa708>
   1c460:	ldr	r2, [sp, #4]
   1c464:	ldr	r3, [r4, #16]
   1c468:	ldr	r2, [r2]
   1c46c:	sub	r3, r3, #1
   1c470:	str	r3, [r4, #16]
   1c474:	cmp	r2, #0
   1c478:	beq	1c494 <__assert_fail@plt+0xa720>
   1c47c:	mov	r0, r5
   1c480:	add	sp, sp, #8
   1c484:	ldrd	r4, [sp]
   1c488:	ldr	r6, [sp, #8]
   1c48c:	add	sp, sp, #12
   1c490:	pop	{pc}		; (ldr pc, [sp], #4)
   1c494:	vldr	s15, [r4, #8]
   1c498:	ldr	r3, [r4, #12]
   1c49c:	ldr	r2, [r4, #20]
   1c4a0:	vcvt.f32.u32	s15, s15
   1c4a4:	sub	r3, r3, #1
   1c4a8:	vmov	s14, r3
   1c4ac:	vldr	s13, [r2]
   1c4b0:	str	r3, [r4, #12]
   1c4b4:	vmul.f32	s15, s15, s13
   1c4b8:	vcvt.f32.u32	s14, s14
   1c4bc:	vcmpe.f32	s14, s15
   1c4c0:	vmrs	APSR_nzcv, fpscr
   1c4c4:	bpl	1c47c <__assert_fail@plt+0xa708>
   1c4c8:	add	r0, r4, #20
   1c4cc:	bl	1b5c4 <__assert_fail@plt+0x9850>
   1c4d0:	vldr	s15, [r4, #8]
   1c4d4:	vldr	s13, [r4, #12]
   1c4d8:	ldr	r3, [r4, #20]
   1c4dc:	vcvt.f32.u32	s15, s15
   1c4e0:	vcvt.f32.u32	s13, s13
   1c4e4:	vldr	s14, [r3]
   1c4e8:	vmul.f32	s14, s15, s14
   1c4ec:	vcmpe.f32	s13, s14
   1c4f0:	vmrs	APSR_nzcv, fpscr
   1c4f4:	bpl	1c47c <__assert_fail@plt+0xa708>
   1c4f8:	ldrb	r2, [r3, #16]
   1c4fc:	mov	r0, r4
   1c500:	vldr	s14, [r3, #4]
   1c504:	cmp	r2, #0
   1c508:	vmul.f32	s15, s15, s14
   1c50c:	vldreq	s14, [r3, #8]
   1c510:	vmuleq.f32	s15, s15, s14
   1c514:	vcvt.u32.f32	s15, s15
   1c518:	vmov	r1, s15
   1c51c:	bl	1c0cc <__assert_fail@plt+0xa358>
   1c520:	cmp	r0, #0
   1c524:	bne	1c47c <__assert_fail@plt+0xa708>
   1c528:	ldr	r0, [r4, #36]	; 0x24
   1c52c:	cmp	r0, #0
   1c530:	beq	1c544 <__assert_fail@plt+0xa7d0>
   1c534:	ldr	r6, [r0, #4]
   1c538:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1c53c:	subs	r0, r6, #0
   1c540:	bne	1c534 <__assert_fail@plt+0xa7c0>
   1c544:	mov	r3, #0
   1c548:	str	r3, [r4, #36]	; 0x24
   1c54c:	b	1c47c <__assert_fail@plt+0xa708>
   1c550:	b	1c438 <__assert_fail@plt+0xa6c4>
   1c554:	strd	r4, [sp, #-16]!
   1c558:	mov	r4, r0
   1c55c:	mov	r5, r1
   1c560:	ldr	r0, [r0]
   1c564:	str	r6, [sp, #8]
   1c568:	str	lr, [sp, #12]
   1c56c:	bl	248c4 <_obstack_memory_used@@Base+0x462c>
   1c570:	ldr	ip, [r4, #8]
   1c574:	mov	r2, r5
   1c578:	mov	r3, #0
   1c57c:	ldr	r1, [r4, #12]
   1c580:	eor	r0, r0, ip
   1c584:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   1c588:	ldrd	r4, [sp]
   1c58c:	mov	r0, r2
   1c590:	ldr	r6, [sp, #8]
   1c594:	add	sp, sp, #12
   1c598:	pop	{pc}		; (ldr pc, [sp], #4)
   1c59c:	strd	r4, [sp, #-16]!
   1c5a0:	ldrd	r2, [r1, #8]
   1c5a4:	ldrd	r4, [r0, #8]
   1c5a8:	str	r6, [sp, #8]
   1c5ac:	str	lr, [sp, #12]
   1c5b0:	cmp	r5, r3
   1c5b4:	cmpeq	r4, r2
   1c5b8:	beq	1c5d0 <__assert_fail@plt+0xa85c>
   1c5bc:	ldrd	r4, [sp]
   1c5c0:	mov	r0, #0
   1c5c4:	ldr	r6, [sp, #8]
   1c5c8:	add	sp, sp, #12
   1c5cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5d0:	ldrd	r4, [r0, #16]
   1c5d4:	ldrd	r2, [r1, #16]
   1c5d8:	cmp	r5, r3
   1c5dc:	cmpeq	r4, r2
   1c5e0:	bne	1c5bc <__assert_fail@plt+0xa848>
   1c5e4:	ldr	r0, [r0]
   1c5e8:	ldr	r1, [r1]
   1c5ec:	bl	118a0 <strcmp@plt>
   1c5f0:	clz	r0, r0
   1c5f4:	ldrd	r4, [sp]
   1c5f8:	lsr	r0, r0, #5
   1c5fc:	ldr	r6, [sp, #8]
   1c600:	add	sp, sp, #12
   1c604:	pop	{pc}		; (ldr pc, [sp], #4)
   1c608:	str	r4, [sp, #-8]!
   1c60c:	mov	r4, r0
   1c610:	ldr	r0, [r0]
   1c614:	str	lr, [sp, #4]
   1c618:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1c61c:	mov	r0, r4
   1c620:	ldr	r4, [sp]
   1c624:	ldr	lr, [sp, #4]
   1c628:	add	sp, sp, #8
   1c62c:	b	1b2b4 <__assert_fail@plt+0x9540>
   1c630:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c634:	strd	r6, [sp, #8]
   1c638:	mov	r7, r1
   1c63c:	mov	r6, r0
   1c640:	strd	r8, [sp, #16]
   1c644:	mov	r9, r3
   1c648:	ands	r3, r3, #32
   1c64c:	strd	sl, [sp, #24]
   1c650:	str	lr, [sp, #32]
   1c654:	vpush	{d8-d9}
   1c658:	sub	sp, sp, #124	; 0x7c
   1c65c:	str	r2, [sp, #20]
   1c660:	str	r3, [sp, #48]	; 0x30
   1c664:	movne	r3, #1024	; 0x400
   1c668:	moveq	r3, #1000	; 0x3e8
   1c66c:	strd	r6, [sp, #32]
   1c670:	str	r3, [sp, #44]	; 0x2c
   1c674:	add	r3, r2, #644	; 0x284
   1c678:	mov	r5, r3
   1c67c:	bl	11c9c <localeconv@plt>
   1c680:	ldr	fp, [r0]
   1c684:	add	r3, r5, #3
   1c688:	mov	r4, r0
   1c68c:	str	r3, [sp, #16]
   1c690:	and	r3, r9, #3
   1c694:	str	r3, [sp, #40]	; 0x28
   1c698:	mov	r0, fp
   1c69c:	bl	11b94 <strlen@plt>
   1c6a0:	sub	r2, r0, #1
   1c6a4:	ldr	sl, [r4, #4]
   1c6a8:	movw	r3, #35724	; 0x8b8c
   1c6ac:	movt	r3, #2
   1c6b0:	cmp	r2, #16
   1c6b4:	ldr	r2, [r4, #8]
   1c6b8:	movcs	fp, r3
   1c6bc:	str	r2, [sp, #52]	; 0x34
   1c6c0:	mov	r2, r0
   1c6c4:	movcc	r2, r0
   1c6c8:	movcs	r2, #1
   1c6cc:	mov	r0, sl
   1c6d0:	str	r2, [sp, #12]
   1c6d4:	bl	11b94 <strlen@plt>
   1c6d8:	cmp	r0, #16
   1c6dc:	movw	r3, #37260	; 0x918c
   1c6e0:	movt	r3, #2
   1c6e4:	ldrd	r4, [sp, #176]	; 0xb0
   1c6e8:	movhi	sl, r3
   1c6ec:	ldrd	r2, [sp, #184]	; 0xb8
   1c6f0:	cmp	r3, r5
   1c6f4:	cmpeq	r2, r4
   1c6f8:	bhi	1c9b0 <__assert_fail@plt+0xac3c>
   1c6fc:	mov	r0, r4
   1c700:	mov	r1, r5
   1c704:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   1c708:	orrs	r3, r2, r3
   1c70c:	bne	1c74c <__assert_fail@plt+0xa9d8>
   1c710:	mul	ip, r0, r7
   1c714:	mov	r4, r6
   1c718:	mov	r5, r7
   1c71c:	mov	r3, r1
   1c720:	umull	r6, r7, r0, r6
   1c724:	mov	r2, r0
   1c728:	mla	r1, r4, r1, ip
   1c72c:	strd	r6, [sp, #24]
   1c730:	add	r1, r1, r7
   1c734:	str	r1, [sp, #28]
   1c738:	ldrd	r0, [sp, #24]
   1c73c:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   1c740:	cmp	r1, r5
   1c744:	cmpeq	r0, r4
   1c748:	beq	1ccfc <__assert_fail@plt+0xaf88>
   1c74c:	ldrd	r0, [sp, #176]	; 0xb0
   1c750:	bl	24cc8 <_obstack_memory_used@@Base+0x4a30>
   1c754:	vmov	d9, r0, r1
   1c758:	ldrd	r0, [sp, #184]	; 0xb8
   1c75c:	bl	24cc8 <_obstack_memory_used@@Base+0x4a30>
   1c760:	vmov	d7, r0, r1
   1c764:	ldrd	r0, [sp, #32]
   1c768:	vdiv.f64	d8, d9, d7
   1c76c:	bl	24cc8 <_obstack_memory_used@@Base+0x4a30>
   1c770:	vmov	d7, r0, r1
   1c774:	tst	r9, #16
   1c778:	vmul.f64	d8, d8, d7
   1c77c:	beq	1c8f4 <__assert_fail@plt+0xab80>
   1c780:	ldr	r6, [sp, #12]
   1c784:	mov	r7, #0
   1c788:	vldr	s15, [sp, #44]	; 0x2c
   1c78c:	vcvt.f64.s32	d6, s15
   1c790:	vmov.f64	d7, d6
   1c794:	vmov.f64	d5, d7
   1c798:	vmul.f64	d7, d7, d6
   1c79c:	add	r7, r7, #1
   1c7a0:	vcmpe.f64	d7, d8
   1c7a4:	vmrs	APSR_nzcv, fpscr
   1c7a8:	bhi	1c7b4 <__assert_fail@plt+0xaa40>
   1c7ac:	cmp	r7, #8
   1c7b0:	bne	1c794 <__assert_fail@plt+0xaa20>
   1c7b4:	ldr	fp, [sp, #40]	; 0x28
   1c7b8:	add	r8, r6, #1
   1c7bc:	vdiv.f64	d9, d8, d5
   1c7c0:	str	r6, [sp, #12]
   1c7c4:	ldr	r3, [sp, #48]	; 0x30
   1c7c8:	cmp	fp, #1
   1c7cc:	clz	r4, r3
   1c7d0:	lsr	r4, r4, #5
   1c7d4:	add	r4, r4, #1
   1c7d8:	add	r4, r4, r8
   1c7dc:	beq	1cdcc <__assert_fail@plt+0xb058>
   1c7e0:	vldr	d7, [pc, #1000]	; 1cbd0 <__assert_fail@plt+0xae5c>
   1c7e4:	vcmpe.f64	d9, d7
   1c7e8:	vmrs	APSR_nzcv, fpscr
   1c7ec:	vmovpl.f64	d7, d9
   1c7f0:	bpl	1c830 <__assert_fail@plt+0xaabc>
   1c7f4:	vmov	r0, r1, d9
   1c7f8:	bl	24e60 <_obstack_memory_used@@Base+0x4bc8>
   1c7fc:	mov	r5, r0
   1c800:	mov	r6, r1
   1c804:	bl	24cc8 <_obstack_memory_used@@Base+0x4a30>
   1c808:	cmp	fp, #0
   1c80c:	vmov	d7, r0, r1
   1c810:	bne	1c830 <__assert_fail@plt+0xaabc>
   1c814:	vcmp.f64	d9, d7
   1c818:	vmrs	APSR_nzcv, fpscr
   1c81c:	beq	1c830 <__assert_fail@plt+0xaabc>
   1c820:	adds	r0, r5, #1
   1c824:	adc	r1, r6, #0
   1c828:	bl	24cc8 <_obstack_memory_used@@Base+0x4a30>
   1c82c:	vmov	d7, r0, r1
   1c830:	ldr	r5, [sp, #20]
   1c834:	mvn	r2, #0
   1c838:	mov	r1, #1
   1c83c:	movw	r3, #37328	; 0x91d0
   1c840:	movt	r3, #2
   1c844:	vstr	d7, [sp]
   1c848:	mov	r0, r5
   1c84c:	bl	11bc4 <__sprintf_chk@plt>
   1c850:	mov	r0, r5
   1c854:	bl	11b94 <strlen@plt>
   1c858:	cmp	r0, r4
   1c85c:	bls	1cc94 <__assert_fail@plt+0xaf20>
   1c860:	vldr	d7, [pc, #880]	; 1cbd8 <__assert_fail@plt+0xae64>
   1c864:	vmul.f64	d9, d9, d7
   1c868:	vldr	d7, [pc, #864]	; 1cbd0 <__assert_fail@plt+0xae5c>
   1c86c:	vcmpe.f64	d9, d7
   1c870:	vmrs	APSR_nzcv, fpscr
   1c874:	bpl	1c8bc <__assert_fail@plt+0xab48>
   1c878:	vmov	r0, r1, d9
   1c87c:	bl	24e60 <_obstack_memory_used@@Base+0x4bc8>
   1c880:	mov	r4, r0
   1c884:	mov	r5, r1
   1c888:	bl	24cc8 <_obstack_memory_used@@Base+0x4a30>
   1c88c:	ldr	r3, [sp, #40]	; 0x28
   1c890:	vmov	d7, r0, r1
   1c894:	cmp	r3, #0
   1c898:	bne	1c8b8 <__assert_fail@plt+0xab44>
   1c89c:	vcmp.f64	d9, d7
   1c8a0:	vmrs	APSR_nzcv, fpscr
   1c8a4:	beq	1c8b8 <__assert_fail@plt+0xab44>
   1c8a8:	adds	r0, r4, #1
   1c8ac:	adc	r1, r5, #0
   1c8b0:	bl	24cc8 <_obstack_memory_used@@Base+0x4a30>
   1c8b4:	vmov	d7, r0, r1
   1c8b8:	vmov.f64	d9, d7
   1c8bc:	vldr	d6, [pc, #788]	; 1cbd8 <__assert_fail@plt+0xae64>
   1c8c0:	mvn	r2, #0
   1c8c4:	mov	r1, #1
   1c8c8:	movw	r3, #37320	; 0x91c8
   1c8cc:	movt	r3, #2
   1c8d0:	ldr	r4, [sp, #20]
   1c8d4:	vdiv.f64	d7, d9, d6
   1c8d8:	mov	r0, r4
   1c8dc:	vstr	d7, [sp]
   1c8e0:	bl	11bc4 <__sprintf_chk@plt>
   1c8e4:	mov	r0, r4
   1c8e8:	bl	11b94 <strlen@plt>
   1c8ec:	mov	r8, r0
   1c8f0:	b	1c940 <__assert_fail@plt+0xabcc>
   1c8f4:	and	r6, r9, #3
   1c8f8:	cmp	r6, #1
   1c8fc:	beq	1c910 <__assert_fail@plt+0xab9c>
   1c900:	vldr	d7, [pc, #712]	; 1cbd0 <__assert_fail@plt+0xae5c>
   1c904:	vcmpe.f64	d8, d7
   1c908:	vmrs	APSR_nzcv, fpscr
   1c90c:	bmi	1ccb8 <__assert_fail@plt+0xaf44>
   1c910:	ldr	r4, [sp, #20]
   1c914:	mvn	r2, #0
   1c918:	mov	r1, #1
   1c91c:	movw	r3, #37320	; 0x91c8
   1c920:	movt	r3, #2
   1c924:	vstr	d8, [sp]
   1c928:	mov	r7, r2
   1c92c:	mov	r0, r4
   1c930:	bl	11bc4 <__sprintf_chk@plt>
   1c934:	mov	r0, r4
   1c938:	bl	11b94 <strlen@plt>
   1c93c:	mov	r8, r0
   1c940:	ldr	r3, [sp, #16]
   1c944:	mov	r2, r0
   1c948:	ldr	r1, [sp, #20]
   1c94c:	sub	r6, r3, r0
   1c950:	mov	r0, r6
   1c954:	add	r8, r6, r8
   1c958:	bl	118f4 <memmove@plt>
   1c95c:	tst	r9, #4
   1c960:	bne	1cb24 <__assert_fail@plt+0xadb0>
   1c964:	tst	r9, #128	; 0x80
   1c968:	beq	1c980 <__assert_fail@plt+0xac0c>
   1c96c:	cmn	r7, #1
   1c970:	beq	1cbe0 <__assert_fail@plt+0xae6c>
   1c974:	and	r3, r9, #256	; 0x100
   1c978:	orrs	r2, r3, r7
   1c97c:	bne	1ce54 <__assert_fail@plt+0xb0e0>
   1c980:	ldr	r2, [sp, #16]
   1c984:	mov	r3, #0
   1c988:	mov	r0, r6
   1c98c:	strb	r3, [r2]
   1c990:	add	sp, sp, #124	; 0x7c
   1c994:	vpop	{d8-d9}
   1c998:	ldrd	r4, [sp]
   1c99c:	ldrd	r6, [sp, #8]
   1c9a0:	ldrd	r8, [sp, #16]
   1c9a4:	ldrd	sl, [sp, #24]
   1c9a8:	add	sp, sp, #32
   1c9ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9b0:	ldrd	r2, [sp, #176]	; 0xb0
   1c9b4:	orrs	r3, r2, r3
   1c9b8:	beq	1c74c <__assert_fail@plt+0xa9d8>
   1c9bc:	ldrd	r2, [sp, #176]	; 0xb0
   1c9c0:	ldrd	r0, [sp, #184]	; 0xb8
   1c9c4:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   1c9c8:	orrs	r3, r2, r3
   1c9cc:	mov	r4, r0
   1c9d0:	mov	r5, r1
   1c9d4:	bne	1c74c <__assert_fail@plt+0xa9d8>
   1c9d8:	mov	r2, r4
   1c9dc:	mov	r3, r5
   1c9e0:	ldrd	r0, [sp, #32]
   1c9e4:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   1c9e8:	mov	lr, r2
   1c9ec:	mov	r8, r1
   1c9f0:	lsl	r1, r3, #2
   1c9f4:	mov	r7, r0
   1c9f8:	lsl	r0, lr, #2
   1c9fc:	mov	ip, r3
   1ca00:	orr	r1, r1, lr, lsr #30
   1ca04:	mov	r2, r4
   1ca08:	mov	r3, r5
   1ca0c:	adds	r0, r0, lr
   1ca10:	adc	r1, r1, ip
   1ca14:	adds	r0, r0, r0
   1ca18:	adc	r1, r1, r1
   1ca1c:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   1ca20:	adds	r1, r2, r2
   1ca24:	mov	r2, r4
   1ca28:	str	r7, [sp, #24]
   1ca2c:	adc	r3, r3, r3
   1ca30:	mov	lr, r0
   1ca34:	str	r8, [sp, #28]
   1ca38:	str	r1, [sp, #56]	; 0x38
   1ca3c:	str	r3, [sp, #60]	; 0x3c
   1ca40:	mov	r3, r5
   1ca44:	ldrd	r4, [sp, #56]	; 0x38
   1ca48:	cmp	r3, r5
   1ca4c:	cmpeq	r2, r4
   1ca50:	bls	1ce3c <__assert_fail@plt+0xb0c8>
   1ca54:	mov	r3, r4
   1ca58:	orrs	r3, r3, r5
   1ca5c:	movne	r3, #1
   1ca60:	moveq	r3, #0
   1ca64:	mov	r6, r3
   1ca68:	ands	r3, r9, #16
   1ca6c:	str	r3, [sp, #56]	; 0x38
   1ca70:	beq	1cd14 <__assert_fail@plt+0xafa0>
   1ca74:	ldrd	r4, [sp, #24]
   1ca78:	mov	r3, #0
   1ca7c:	mov	r7, #0
   1ca80:	ldr	r8, [sp, #44]	; 0x2c
   1ca84:	cmp	r3, r5
   1ca88:	mov	r2, r8
   1ca8c:	cmpeq	r8, r4
   1ca90:	strd	r2, [sp, #32]
   1ca94:	bhi	1cd18 <__assert_fail@plt+0xafa4>
   1ca98:	str	fp, [sp, #64]	; 0x40
   1ca9c:	mov	fp, r6
   1caa0:	mov	r6, lr
   1caa4:	str	r9, [sp, #68]	; 0x44
   1caa8:	ldr	r9, [sp, #12]
   1caac:	b	1cad4 <__assert_fail@plt+0xad60>
   1cab0:	adds	fp, fp, #0
   1cab4:	movne	fp, #1
   1cab8:	ldrd	r2, [sp, #32]
   1cabc:	add	r7, r7, #1
   1cac0:	cmp	r3, r1
   1cac4:	cmpeq	r2, r0
   1cac8:	bhi	1ced8 <__assert_fail@plt+0xb164>
   1cacc:	cmp	r7, #8
   1cad0:	beq	1cea0 <__assert_fail@plt+0xb12c>
   1cad4:	mov	r0, r4
   1cad8:	mov	r1, r5
   1cadc:	ldrd	r2, [sp, #32]
   1cae0:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   1cae4:	add	r2, r2, r2, lsl #2
   1cae8:	mov	r4, r0
   1caec:	mov	r5, r1
   1caf0:	asr	r3, fp, #1
   1caf4:	add	r6, r6, r2, lsl #1
   1caf8:	udiv	ip, r6, r8
   1cafc:	mls	r2, r8, ip, r6
   1cb00:	mov	r6, ip
   1cb04:	add	r3, r3, r2, lsl #1
   1cb08:	cmp	r8, r3
   1cb0c:	add	fp, fp, r3
   1cb10:	bhi	1cab0 <__assert_fail@plt+0xad3c>
   1cb14:	cmp	r8, fp
   1cb18:	movcc	fp, #3
   1cb1c:	movcs	fp, #2
   1cb20:	b	1cab8 <__assert_fail@plt+0xad44>
   1cb24:	mov	r0, sl
   1cb28:	sub	r4, r8, r6
   1cb2c:	bl	11b94 <strlen@plt>
   1cb30:	mov	fp, r0
   1cb34:	mov	r1, r6
   1cb38:	mov	r2, r4
   1cb3c:	add	r0, sp, #76	; 0x4c
   1cb40:	mov	r3, #41	; 0x29
   1cb44:	mvn	r5, #0
   1cb48:	bl	11a20 <__memcpy_chk@plt>
   1cb4c:	ldr	r6, [sp, #52]	; 0x34
   1cb50:	str	r7, [sp, #12]
   1cb54:	ldrb	r3, [r6]
   1cb58:	cmp	r3, #0
   1cb5c:	beq	1cb70 <__assert_fail@plt+0xadfc>
   1cb60:	cmp	r3, #255	; 0xff
   1cb64:	add	r6, r6, #1
   1cb68:	movne	r5, r3
   1cb6c:	moveq	r5, r4
   1cb70:	sub	r7, r8, r5
   1cb74:	cmp	r5, r4
   1cb78:	mov	r2, r5
   1cb7c:	mov	r0, r7
   1cb80:	bls	1cba0 <__assert_fail@plt+0xae2c>
   1cb84:	sub	r6, r8, r4
   1cb88:	mov	r2, r4
   1cb8c:	ldr	r7, [sp, #12]
   1cb90:	add	r1, sp, #76	; 0x4c
   1cb94:	mov	r0, r6
   1cb98:	bl	11930 <memcpy@plt>
   1cb9c:	b	1c964 <__assert_fail@plt+0xabf0>
   1cba0:	sub	r4, r4, r5
   1cba4:	add	r3, sp, #76	; 0x4c
   1cba8:	add	r1, r3, r4
   1cbac:	sub	r8, r7, fp
   1cbb0:	bl	11930 <memcpy@plt>
   1cbb4:	cmp	r4, #0
   1cbb8:	mov	r2, fp
   1cbbc:	mov	r1, sl
   1cbc0:	mov	r0, r8
   1cbc4:	beq	1d044 <__assert_fail@plt+0xb2d0>
   1cbc8:	bl	11930 <memcpy@plt>
   1cbcc:	b	1cb54 <__assert_fail@plt+0xade0>
   1cbd0:	andeq	r0, r0, r0
   1cbd4:	mvnsmi	r0, #0
   1cbd8:	andeq	r0, r0, r0
   1cbdc:	eormi	r0, r4, r0
   1cbe0:	ldrd	r2, [sp, #184]	; 0xb8
   1cbe4:	cmp	r3, #0
   1cbe8:	cmpeq	r2, #1
   1cbec:	bls	1ce98 <__assert_fail@plt+0xb124>
   1cbf0:	ldr	r1, [sp, #44]	; 0x2c
   1cbf4:	mov	r7, #1
   1cbf8:	mov	r2, #1
   1cbfc:	mov	r3, #0
   1cc00:	ldrd	r4, [sp, #184]	; 0xb8
   1cc04:	mul	r0, r1, r3
   1cc08:	umull	r2, r3, r2, r1
   1cc0c:	add	r3, r0, r3
   1cc10:	cmp	r5, r3
   1cc14:	cmpeq	r4, r2
   1cc18:	bls	1cc28 <__assert_fail@plt+0xaeb4>
   1cc1c:	add	r7, r7, #1
   1cc20:	cmp	r7, #8
   1cc24:	bne	1cc04 <__assert_fail@plt+0xae90>
   1cc28:	tst	r9, #64	; 0x40
   1cc2c:	and	r3, r9, #256	; 0x100
   1cc30:	beq	1cc50 <__assert_fail@plt+0xaedc>
   1cc34:	ldr	r1, [sp, #20]
   1cc38:	mov	r2, #32
   1cc3c:	add	r0, r1, #648	; 0x288
   1cc40:	strb	r2, [r1, #647]	; 0x287
   1cc44:	str	r0, [sp, #16]
   1cc48:	cmp	r7, #0
   1cc4c:	beq	1d034 <__assert_fail@plt+0xb2c0>
   1cc50:	ldr	r0, [sp, #48]	; 0x30
   1cc54:	cmp	r0, #0
   1cc58:	cmpeq	r7, #1
   1cc5c:	beq	1cebc <__assert_fail@plt+0xb148>
   1cc60:	movw	r2, #37288	; 0x91a8
   1cc64:	movt	r2, #2
   1cc68:	ldrb	r1, [r2, r7]
   1cc6c:	cmp	r3, #0
   1cc70:	ldr	r2, [sp, #16]
   1cc74:	strb	r1, [r2], #1
   1cc78:	beq	1ced0 <__assert_fail@plt+0xb15c>
   1cc7c:	cmp	r0, #0
   1cc80:	bne	1ce60 <__assert_fail@plt+0xb0ec>
   1cc84:	mov	r3, #66	; 0x42
   1cc88:	strb	r3, [r2], #1
   1cc8c:	str	r2, [sp, #16]
   1cc90:	b	1c980 <__assert_fail@plt+0xac0c>
   1cc94:	tst	r9, #8
   1cc98:	beq	1ccb0 <__assert_fail@plt+0xaf3c>
   1cc9c:	ldr	r3, [sp, #20]
   1cca0:	add	r3, r3, r0
   1cca4:	ldrb	r3, [r3, #-1]
   1cca8:	cmp	r3, #48	; 0x30
   1ccac:	beq	1cf84 <__assert_fail@plt+0xb210>
   1ccb0:	sub	r8, r0, r8
   1ccb4:	b	1c940 <__assert_fail@plt+0xabcc>
   1ccb8:	vmov	r0, r1, d8
   1ccbc:	bl	24e60 <_obstack_memory_used@@Base+0x4bc8>
   1ccc0:	mov	r4, r0
   1ccc4:	mov	r5, r1
   1ccc8:	bl	24cc8 <_obstack_memory_used@@Base+0x4a30>
   1cccc:	cmp	r6, #0
   1ccd0:	vmov	d7, r0, r1
   1ccd4:	bne	1ccf4 <__assert_fail@plt+0xaf80>
   1ccd8:	vcmp.f64	d8, d7
   1ccdc:	vmrs	APSR_nzcv, fpscr
   1cce0:	beq	1ccf4 <__assert_fail@plt+0xaf80>
   1cce4:	adds	r0, r4, #1
   1cce8:	adc	r1, r5, #0
   1ccec:	bl	24cc8 <_obstack_memory_used@@Base+0x4a30>
   1ccf0:	vmov	d7, r0, r1
   1ccf4:	vmov.f64	d8, d7
   1ccf8:	b	1c910 <__assert_fail@plt+0xab9c>
   1ccfc:	mov	r3, #0
   1cd00:	mov	r6, r3
   1cd04:	mov	lr, r3
   1cd08:	ands	r3, r9, #16
   1cd0c:	str	r3, [sp, #56]	; 0x38
   1cd10:	bne	1ca74 <__assert_fail@plt+0xad00>
   1cd14:	mvn	r7, #0
   1cd18:	ldr	r3, [sp, #40]	; 0x28
   1cd1c:	cmp	r3, #1
   1cd20:	beq	1ce08 <__assert_fail@plt+0xb094>
   1cd24:	ldr	r8, [sp, #16]
   1cd28:	ldr	r3, [sp, #40]	; 0x28
   1cd2c:	cmp	r3, #0
   1cd30:	bne	1cd7c <__assert_fail@plt+0xb008>
   1cd34:	add	r3, r6, lr
   1cd38:	cmp	r3, #0
   1cd3c:	ble	1cd7c <__assert_fail@plt+0xb008>
   1cd40:	ldr	r3, [sp, #24]
   1cd44:	adds	r3, r3, #1
   1cd48:	str	r3, [sp, #24]
   1cd4c:	ldr	r3, [sp, #28]
   1cd50:	adc	r3, r3, #0
   1cd54:	str	r3, [sp, #28]
   1cd58:	ldr	r3, [sp, #56]	; 0x38
   1cd5c:	cmp	r3, #0
   1cd60:	beq	1cd7c <__assert_fail@plt+0xb008>
   1cd64:	ldrd	r0, [sp, #24]
   1cd68:	mov	r3, #0
   1cd6c:	ldr	r2, [sp, #44]	; 0x2c
   1cd70:	cmp	r3, r1
   1cd74:	cmpeq	r2, r0
   1cd78:	beq	1ce74 <__assert_fail@plt+0xb100>
   1cd7c:	ldrd	r4, [sp, #24]
   1cd80:	mov	r6, r8
   1cd84:	mov	r0, r4
   1cd88:	mov	r1, r5
   1cd8c:	mov	r2, #10
   1cd90:	mov	r3, #0
   1cd94:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   1cd98:	add	r2, r2, #48	; 0x30
   1cd9c:	mov	r0, r4
   1cda0:	mov	r1, r5
   1cda4:	mov	r3, #0
   1cda8:	strb	r2, [r6, #-1]!
   1cdac:	mov	r2, #10
   1cdb0:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   1cdb4:	cmp	r5, #0
   1cdb8:	mov	r5, r1
   1cdbc:	cmpeq	r4, #9
   1cdc0:	mov	r4, r0
   1cdc4:	bhi	1cd84 <__assert_fail@plt+0xb010>
   1cdc8:	b	1c95c <__assert_fail@plt+0xabe8>
   1cdcc:	ldr	r5, [sp, #20]
   1cdd0:	mvn	r2, #0
   1cdd4:	movw	r3, #37328	; 0x91d0
   1cdd8:	movt	r3, #2
   1cddc:	vstr	d9, [sp]
   1cde0:	ldr	r1, [sp, #40]	; 0x28
   1cde4:	mov	r0, r5
   1cde8:	bl	11bc4 <__sprintf_chk@plt>
   1cdec:	mov	r0, r5
   1cdf0:	bl	11b94 <strlen@plt>
   1cdf4:	cmp	r0, r4
   1cdf8:	bls	1cc94 <__assert_fail@plt+0xaf20>
   1cdfc:	vldr	d7, [pc, #-556]	; 1cbd8 <__assert_fail@plt+0xae64>
   1ce00:	vmul.f64	d9, d9, d7
   1ce04:	b	1c8bc <__assert_fail@plt+0xab48>
   1ce08:	mov	r5, #0
   1ce0c:	ldr	r8, [sp, #16]
   1ce10:	ldr	r3, [sp, #24]
   1ce14:	and	r4, r3, #1
   1ce18:	adds	r2, r4, r6
   1ce1c:	adc	r3, r5, r6, asr #31
   1ce20:	orr	r2, r2, r3
   1ce24:	mov	r3, lr
   1ce28:	cmp	r2, r5
   1ce2c:	addne	r3, r3, #1
   1ce30:	cmp	r3, #5
   1ce34:	bgt	1cd40 <__assert_fail@plt+0xafcc>
   1ce38:	b	1cd7c <__assert_fail@plt+0xb008>
   1ce3c:	movcs	r3, #2
   1ce40:	movcs	r6, r3
   1ce44:	bcs	1ca68 <__assert_fail@plt+0xacf4>
   1ce48:	mov	r3, #3
   1ce4c:	mov	r6, r3
   1ce50:	b	1ca68 <__assert_fail@plt+0xacf4>
   1ce54:	tst	r9, #64	; 0x40
   1ce58:	beq	1cc48 <__assert_fail@plt+0xaed4>
   1ce5c:	b	1cc34 <__assert_fail@plt+0xaec0>
   1ce60:	ldr	r1, [sp, #16]
   1ce64:	mov	r3, #105	; 0x69
   1ce68:	add	r2, r1, #2
   1ce6c:	strb	r3, [r1, #1]
   1ce70:	b	1cc84 <__assert_fail@plt+0xaf10>
   1ce74:	cmp	r7, #8
   1ce78:	beq	1cd7c <__assert_fail@plt+0xb008>
   1ce7c:	tst	r9, #8
   1ce80:	add	r7, r7, #1
   1ce84:	beq	1cffc <__assert_fail@plt+0xb288>
   1ce88:	mov	r3, #49	; 0x31
   1ce8c:	sub	r6, r8, #1
   1ce90:	strb	r3, [r8, #-1]
   1ce94:	b	1c95c <__assert_fail@plt+0xabe8>
   1ce98:	mov	r7, #0
   1ce9c:	b	1c974 <__assert_fail@plt+0xac00>
   1cea0:	mov	lr, r6
   1cea4:	mov	r6, fp
   1cea8:	str	r9, [sp, #12]
   1ceac:	strd	r4, [sp, #24]
   1ceb0:	ldr	fp, [sp, #64]	; 0x40
   1ceb4:	ldr	r9, [sp, #68]	; 0x44
   1ceb8:	b	1cd18 <__assert_fail@plt+0xafa4>
   1cebc:	ldr	r2, [sp, #16]
   1cec0:	mov	r1, #107	; 0x6b
   1cec4:	cmp	r3, #0
   1cec8:	strb	r1, [r2], #1
   1cecc:	bne	1cc84 <__assert_fail@plt+0xaf10>
   1ced0:	str	r2, [sp, #16]
   1ced4:	b	1c980 <__assert_fail@plt+0xac0c>
   1ced8:	cmp	r1, #0
   1cedc:	mov	lr, r6
   1cee0:	str	r9, [sp, #12]
   1cee4:	cmpeq	r0, #9
   1cee8:	mov	r6, fp
   1ceec:	strd	r4, [sp, #24]
   1cef0:	ldr	fp, [sp, #64]	; 0x40
   1cef4:	ldr	r9, [sp, #68]	; 0x44
   1cef8:	bhi	1cd18 <__assert_fail@plt+0xafa4>
   1cefc:	ldr	r3, [sp, #40]	; 0x28
   1cf00:	cmp	r3, #1
   1cf04:	beq	1cfb0 <__assert_fail@plt+0xb23c>
   1cf08:	ldr	r2, [sp, #40]	; 0x28
   1cf0c:	adds	r3, r6, #0
   1cf10:	movne	r3, #1
   1cf14:	cmp	r2, #0
   1cf18:	movne	r3, #0
   1cf1c:	cmp	r3, #0
   1cf20:	bne	1cf9c <__assert_fail@plt+0xb228>
   1cf24:	cmp	ip, #0
   1cf28:	addne	r3, ip, #48	; 0x30
   1cf2c:	uxtbne	r3, r3
   1cf30:	bne	1cf40 <__assert_fail@plt+0xb1cc>
   1cf34:	tst	r9, #8
   1cf38:	bne	1cff4 <__assert_fail@plt+0xb280>
   1cf3c:	mov	r3, #48	; 0x30
   1cf40:	ldr	r2, [sp, #12]
   1cf44:	ldr	r1, [sp, #20]
   1cf48:	add	r8, r1, #644	; 0x284
   1cf4c:	strb	r3, [r1, #646]	; 0x286
   1cf50:	mov	r3, #0
   1cf54:	add	r8, r8, #2
   1cf58:	mov	r1, fp
   1cf5c:	sub	r8, r8, r2
   1cf60:	mov	r6, r3
   1cf64:	mov	r0, r8
   1cf68:	bl	11930 <memcpy@plt>
   1cf6c:	ldr	r3, [sp, #40]	; 0x28
   1cf70:	cmp	r3, #1
   1cf74:	beq	1cd7c <__assert_fail@plt+0xb008>
   1cf78:	mov	r3, #0
   1cf7c:	mov	lr, r3
   1cf80:	b	1cd28 <__assert_fail@plt+0xafb4>
   1cf84:	vldr	d7, [pc, #-948]	; 1cbd8 <__assert_fail@plt+0xae64>
   1cf88:	ldr	r3, [sp, #40]	; 0x28
   1cf8c:	vmul.f64	d9, d9, d7
   1cf90:	cmp	r3, #1
   1cf94:	bne	1c868 <__assert_fail@plt+0xaaf4>
   1cf98:	b	1c8bc <__assert_fail@plt+0xab48>
   1cf9c:	cmp	ip, #9
   1cfa0:	beq	1cfc8 <__assert_fail@plt+0xb254>
   1cfa4:	add	r3, ip, #49	; 0x31
   1cfa8:	uxtb	r3, r3
   1cfac:	b	1cf40 <__assert_fail@plt+0xb1cc>
   1cfb0:	and	r3, ip, #1
   1cfb4:	add	r3, r3, r6
   1cfb8:	cmp	r3, #2
   1cfbc:	movle	r3, #0
   1cfc0:	movgt	r3, #1
   1cfc4:	b	1cf1c <__assert_fail@plt+0xb1a8>
   1cfc8:	adds	r3, r0, #1
   1cfcc:	str	r3, [sp, #24]
   1cfd0:	adc	r3, r1, #0
   1cfd4:	str	r3, [sp, #28]
   1cfd8:	ldrd	r2, [sp, #24]
   1cfdc:	cmp	r3, #0
   1cfe0:	cmpeq	r2, #10
   1cfe4:	beq	1d024 <__assert_fail@plt+0xb2b0>
   1cfe8:	mov	r3, #0
   1cfec:	mov	r6, r3
   1cff0:	b	1cf34 <__assert_fail@plt+0xb1c0>
   1cff4:	ldr	r8, [sp, #16]
   1cff8:	b	1cf6c <__assert_fail@plt+0xb1f8>
   1cffc:	ldr	r3, [sp, #12]
   1d000:	mov	r0, #48	; 0x30
   1d004:	mov	r1, fp
   1d008:	strb	r0, [r8, #-1]
   1d00c:	ldr	r2, [sp, #12]
   1d010:	mvn	r3, r3
   1d014:	add	r8, r8, r3
   1d018:	mov	r0, r8
   1d01c:	bl	11930 <memcpy@plt>
   1d020:	b	1ce88 <__assert_fail@plt+0xb114>
   1d024:	mov	r3, #0
   1d028:	ldr	r8, [sp, #16]
   1d02c:	mov	r6, r3
   1d030:	b	1cf6c <__assert_fail@plt+0xb1f8>
   1d034:	cmp	r3, #0
   1d038:	ldrne	r2, [sp, #16]
   1d03c:	bne	1cc84 <__assert_fail@plt+0xaf10>
   1d040:	b	1c980 <__assert_fail@plt+0xac0c>
   1d044:	mov	r6, r7
   1d048:	ldr	r7, [sp, #12]
   1d04c:	b	1c964 <__assert_fail@plt+0xabf0>
   1d050:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1d054:	subs	r4, r0, #0
   1d058:	strd	r6, [sp, #8]
   1d05c:	mov	r7, r1
   1d060:	mov	r6, r2
   1d064:	str	r8, [sp, #16]
   1d068:	strd	sl, [sp, #20]
   1d06c:	str	lr, [sp, #28]
   1d070:	sub	sp, sp, #16
   1d074:	beq	1d194 <__assert_fail@plt+0xb420>
   1d078:	ldrb	r3, [r4]
   1d07c:	movw	r5, #37288	; 0x91a8
   1d080:	movt	r5, #2
   1d084:	add	r2, r5, #12
   1d088:	add	r1, r5, #20
   1d08c:	cmp	r3, #39	; 0x27
   1d090:	mov	r3, #4
   1d094:	addeq	r4, r4, #1
   1d098:	moveq	r8, #4
   1d09c:	mov	r0, r4
   1d0a0:	movne	r8, #0
   1d0a4:	bl	19bd8 <__assert_fail@plt+0x7e64>
   1d0a8:	cmp	r0, #0
   1d0ac:	blt	1d0ec <__assert_fail@plt+0xb378>
   1d0b0:	add	r5, r5, r0, lsl #2
   1d0b4:	mov	sl, #1
   1d0b8:	mov	fp, #0
   1d0bc:	mov	r0, #0
   1d0c0:	ldr	r3, [r5, #12]
   1d0c4:	strd	sl, [r6]
   1d0c8:	orr	r3, r8, r3
   1d0cc:	str	r3, [r7]
   1d0d0:	add	sp, sp, #16
   1d0d4:	ldrd	r4, [sp]
   1d0d8:	ldrd	r6, [sp, #8]
   1d0dc:	ldr	r8, [sp, #16]
   1d0e0:	ldrd	sl, [sp, #20]
   1d0e4:	add	sp, sp, #28
   1d0e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0ec:	movw	r0, #37364	; 0x91f4
   1d0f0:	movt	r0, #2
   1d0f4:	mov	r3, r6
   1d0f8:	mov	r2, #0
   1d0fc:	add	r1, sp, #12
   1d100:	str	r0, [sp]
   1d104:	mov	r0, r4
   1d108:	bl	23ba8 <_obstack_memory_used@@Base+0x3910>
   1d10c:	cmp	r0, #0
   1d110:	bne	1d158 <__assert_fail@plt+0xb3e4>
   1d114:	ldrb	r3, [r4]
   1d118:	sub	r3, r3, #48	; 0x30
   1d11c:	cmp	r3, #9
   1d120:	bls	1d14c <__assert_fail@plt+0xb3d8>
   1d124:	ldr	r2, [sp, #12]
   1d128:	cmp	r4, r2
   1d12c:	bne	1d13c <__assert_fail@plt+0xb3c8>
   1d130:	b	1d1e8 <__assert_fail@plt+0xb474>
   1d134:	cmp	r2, r4
   1d138:	beq	1d1e8 <__assert_fail@plt+0xb474>
   1d13c:	ldrb	r3, [r4, #1]!
   1d140:	sub	r3, r3, #48	; 0x30
   1d144:	cmp	r3, #9
   1d148:	bhi	1d134 <__assert_fail@plt+0xb3c0>
   1d14c:	ldrd	r2, [r6]
   1d150:	str	r8, [r7]
   1d154:	b	1d164 <__assert_fail@plt+0xb3f0>
   1d158:	mov	r1, #0
   1d15c:	ldrd	r2, [r6]
   1d160:	str	r1, [r7]
   1d164:	orrs	r3, r2, r3
   1d168:	bne	1d0d0 <__assert_fail@plt+0xb35c>
   1d16c:	movw	r0, #37348	; 0x91e4
   1d170:	movt	r0, #2
   1d174:	bl	11ac8 <getenv@plt>
   1d178:	cmp	r0, #0
   1d17c:	mov	r3, #0
   1d180:	moveq	r2, #1024	; 0x400
   1d184:	movne	r2, #512	; 0x200
   1d188:	mov	r0, #4
   1d18c:	strd	r2, [r6]
   1d190:	b	1d0d0 <__assert_fail@plt+0xb35c>
   1d194:	movw	r0, #35152	; 0x8950
   1d198:	movt	r0, #2
   1d19c:	bl	11ac8 <getenv@plt>
   1d1a0:	subs	r4, r0, #0
   1d1a4:	bne	1d078 <__assert_fail@plt+0xb304>
   1d1a8:	movw	r0, #37336	; 0x91d8
   1d1ac:	movt	r0, #2
   1d1b0:	bl	11ac8 <getenv@plt>
   1d1b4:	subs	r4, r0, #0
   1d1b8:	bne	1d078 <__assert_fail@plt+0xb304>
   1d1bc:	movw	r0, #37348	; 0x91e4
   1d1c0:	movt	r0, #2
   1d1c4:	bl	11ac8 <getenv@plt>
   1d1c8:	subs	r3, r0, #0
   1d1cc:	beq	1d214 <__assert_fail@plt+0xb4a0>
   1d1d0:	mov	r2, #512	; 0x200
   1d1d4:	mov	r3, #0
   1d1d8:	mov	r0, r4
   1d1dc:	strd	r2, [r6]
   1d1e0:	str	r4, [r7]
   1d1e4:	b	1d0d0 <__assert_fail@plt+0xb35c>
   1d1e8:	ldrb	r3, [r2, #-1]
   1d1ec:	cmp	r3, #66	; 0x42
   1d1f0:	orrne	r8, r8, #128	; 0x80
   1d1f4:	beq	1d200 <__assert_fail@plt+0xb48c>
   1d1f8:	orr	r8, r8, #32
   1d1fc:	b	1d14c <__assert_fail@plt+0xb3d8>
   1d200:	ldrb	r3, [r2, #-2]
   1d204:	orr	r8, r8, #384	; 0x180
   1d208:	cmp	r3, #105	; 0x69
   1d20c:	bne	1d14c <__assert_fail@plt+0xb3d8>
   1d210:	b	1d1f8 <__assert_fail@plt+0xb484>
   1d214:	mov	r4, #1024	; 0x400
   1d218:	mov	r5, #0
   1d21c:	mov	r0, r3
   1d220:	strd	r4, [r6]
   1d224:	str	r3, [r7]
   1d228:	b	1d0d0 <__assert_fail@plt+0xb35c>
   1d22c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d230:	strd	r6, [sp, #8]
   1d234:	movw	r6, #46036	; 0xb3d4
   1d238:	movt	r6, #3
   1d23c:	ldr	r4, [r6]
   1d240:	str	r8, [sp, #16]
   1d244:	str	lr, [sp, #20]
   1d248:	cmp	r4, #0
   1d24c:	beq	1d278 <__assert_fail@plt+0xb504>
   1d250:	ldr	r3, [r4]
   1d254:	cmp	r0, r3
   1d258:	bne	1d26c <__assert_fail@plt+0xb4f8>
   1d25c:	b	1d2c8 <__assert_fail@plt+0xb554>
   1d260:	ldr	r3, [r4]
   1d264:	cmp	r3, r0
   1d268:	beq	1d2c8 <__assert_fail@plt+0xb554>
   1d26c:	ldr	r4, [r4, #4]
   1d270:	cmp	r4, #0
   1d274:	bne	1d260 <__assert_fail@plt+0xb4ec>
   1d278:	mov	r5, r0
   1d27c:	bl	118ac <getpwuid@plt>
   1d280:	cmp	r0, #0
   1d284:	movweq	r7, #37260	; 0x918c
   1d288:	moveq	r0, #12
   1d28c:	movteq	r7, #2
   1d290:	beq	1d2a8 <__assert_fail@plt+0xb534>
   1d294:	ldr	r7, [r0]
   1d298:	mov	r0, r7
   1d29c:	bl	11b94 <strlen@plt>
   1d2a0:	add	r0, r0, #12
   1d2a4:	bic	r0, r0, #3
   1d2a8:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   1d2ac:	mov	r4, r0
   1d2b0:	mov	r1, r7
   1d2b4:	str	r5, [r0], #8
   1d2b8:	bl	11a5c <strcpy@plt>
   1d2bc:	ldr	r3, [r6]
   1d2c0:	str	r4, [r6]
   1d2c4:	str	r3, [r4, #4]
   1d2c8:	ldrb	r0, [r4, #8]
   1d2cc:	ldrd	r6, [sp, #8]
   1d2d0:	ldr	r8, [sp, #16]
   1d2d4:	cmp	r0, #0
   1d2d8:	addne	r0, r4, #8
   1d2dc:	ldrd	r4, [sp]
   1d2e0:	add	sp, sp, #20
   1d2e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d2ec:	mov	r5, r0
   1d2f0:	strd	r6, [sp, #8]
   1d2f4:	movw	r6, #46036	; 0xb3d4
   1d2f8:	movt	r6, #3
   1d2fc:	ldr	r4, [r6]
   1d300:	str	r8, [sp, #16]
   1d304:	str	lr, [sp, #20]
   1d308:	cmp	r4, #0
   1d30c:	beq	1d35c <__assert_fail@plt+0xb5e8>
   1d310:	ldrb	r7, [r0]
   1d314:	b	1d324 <__assert_fail@plt+0xb5b0>
   1d318:	ldr	r4, [r4, #4]
   1d31c:	cmp	r4, #0
   1d320:	beq	1d35c <__assert_fail@plt+0xb5e8>
   1d324:	ldrb	r3, [r4, #8]
   1d328:	cmp	r3, r7
   1d32c:	bne	1d318 <__assert_fail@plt+0xb5a4>
   1d330:	mov	r1, r5
   1d334:	add	r0, r4, #8
   1d338:	bl	118a0 <strcmp@plt>
   1d33c:	cmp	r0, #0
   1d340:	bne	1d318 <__assert_fail@plt+0xb5a4>
   1d344:	mov	r0, r4
   1d348:	ldrd	r4, [sp]
   1d34c:	ldrd	r6, [sp, #8]
   1d350:	ldr	r8, [sp, #16]
   1d354:	add	sp, sp, #20
   1d358:	pop	{pc}		; (ldr pc, [sp], #4)
   1d35c:	ldr	r4, [r6, #4]
   1d360:	cmp	r4, #0
   1d364:	beq	1d3a4 <__assert_fail@plt+0xb630>
   1d368:	ldrb	r7, [r5]
   1d36c:	b	1d37c <__assert_fail@plt+0xb608>
   1d370:	ldr	r4, [r4, #4]
   1d374:	cmp	r4, #0
   1d378:	beq	1d3a4 <__assert_fail@plt+0xb630>
   1d37c:	ldrb	r3, [r4, #8]
   1d380:	cmp	r3, r7
   1d384:	bne	1d370 <__assert_fail@plt+0xb5fc>
   1d388:	mov	r1, r5
   1d38c:	add	r0, r4, #8
   1d390:	bl	118a0 <strcmp@plt>
   1d394:	cmp	r0, #0
   1d398:	bne	1d370 <__assert_fail@plt+0xb5fc>
   1d39c:	mov	r4, r0
   1d3a0:	b	1d344 <__assert_fail@plt+0xb5d0>
   1d3a4:	mov	r0, r5
   1d3a8:	bl	11894 <getpwnam@plt>
   1d3ac:	mov	r4, r0
   1d3b0:	mov	r0, r5
   1d3b4:	bl	11b94 <strlen@plt>
   1d3b8:	add	r0, r0, #12
   1d3bc:	bic	r0, r0, #3
   1d3c0:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   1d3c4:	mov	r7, r0
   1d3c8:	mov	r1, r5
   1d3cc:	add	r0, r0, #8
   1d3d0:	bl	11a5c <strcpy@plt>
   1d3d4:	cmp	r4, #0
   1d3d8:	beq	1d3f8 <__assert_fail@plt+0xb684>
   1d3dc:	ldr	r2, [r6]
   1d3e0:	str	r7, [r6]
   1d3e4:	ldr	r3, [r4, #8]
   1d3e8:	mov	r4, r7
   1d3ec:	str	r3, [r7]
   1d3f0:	str	r2, [r7, #4]
   1d3f4:	b	1d344 <__assert_fail@plt+0xb5d0>
   1d3f8:	ldr	r3, [r6, #4]
   1d3fc:	str	r7, [r6, #4]
   1d400:	str	r3, [r7, #4]
   1d404:	b	1d344 <__assert_fail@plt+0xb5d0>
   1d408:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d40c:	strd	r6, [sp, #8]
   1d410:	movw	r6, #46036	; 0xb3d4
   1d414:	movt	r6, #3
   1d418:	ldr	r4, [r6, #8]
   1d41c:	str	r8, [sp, #16]
   1d420:	str	lr, [sp, #20]
   1d424:	cmp	r4, #0
   1d428:	beq	1d454 <__assert_fail@plt+0xb6e0>
   1d42c:	ldr	r3, [r4]
   1d430:	cmp	r0, r3
   1d434:	bne	1d448 <__assert_fail@plt+0xb6d4>
   1d438:	b	1d4a4 <__assert_fail@plt+0xb730>
   1d43c:	ldr	r3, [r4]
   1d440:	cmp	r3, r0
   1d444:	beq	1d4a4 <__assert_fail@plt+0xb730>
   1d448:	ldr	r4, [r4, #4]
   1d44c:	cmp	r4, #0
   1d450:	bne	1d43c <__assert_fail@plt+0xb6c8>
   1d454:	mov	r5, r0
   1d458:	bl	11d44 <getgrgid@plt>
   1d45c:	cmp	r0, #0
   1d460:	movweq	r7, #37260	; 0x918c
   1d464:	moveq	r0, #12
   1d468:	movteq	r7, #2
   1d46c:	beq	1d484 <__assert_fail@plt+0xb710>
   1d470:	ldr	r7, [r0]
   1d474:	mov	r0, r7
   1d478:	bl	11b94 <strlen@plt>
   1d47c:	add	r0, r0, #12
   1d480:	bic	r0, r0, #3
   1d484:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   1d488:	mov	r4, r0
   1d48c:	mov	r1, r7
   1d490:	str	r5, [r0], #8
   1d494:	bl	11a5c <strcpy@plt>
   1d498:	ldr	r3, [r6, #8]
   1d49c:	str	r4, [r6, #8]
   1d4a0:	str	r3, [r4, #4]
   1d4a4:	ldrb	r0, [r4, #8]
   1d4a8:	ldrd	r6, [sp, #8]
   1d4ac:	ldr	r8, [sp, #16]
   1d4b0:	cmp	r0, #0
   1d4b4:	addne	r0, r4, #8
   1d4b8:	ldrd	r4, [sp]
   1d4bc:	add	sp, sp, #20
   1d4c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d4c8:	mov	r5, r0
   1d4cc:	strd	r6, [sp, #8]
   1d4d0:	movw	r6, #46036	; 0xb3d4
   1d4d4:	movt	r6, #3
   1d4d8:	ldr	r4, [r6, #8]
   1d4dc:	str	r8, [sp, #16]
   1d4e0:	str	lr, [sp, #20]
   1d4e4:	cmp	r4, #0
   1d4e8:	beq	1d538 <__assert_fail@plt+0xb7c4>
   1d4ec:	ldrb	r7, [r0]
   1d4f0:	b	1d500 <__assert_fail@plt+0xb78c>
   1d4f4:	ldr	r4, [r4, #4]
   1d4f8:	cmp	r4, #0
   1d4fc:	beq	1d538 <__assert_fail@plt+0xb7c4>
   1d500:	ldrb	r3, [r4, #8]
   1d504:	cmp	r3, r7
   1d508:	bne	1d4f4 <__assert_fail@plt+0xb780>
   1d50c:	mov	r1, r5
   1d510:	add	r0, r4, #8
   1d514:	bl	118a0 <strcmp@plt>
   1d518:	cmp	r0, #0
   1d51c:	bne	1d4f4 <__assert_fail@plt+0xb780>
   1d520:	mov	r0, r4
   1d524:	ldrd	r4, [sp]
   1d528:	ldrd	r6, [sp, #8]
   1d52c:	ldr	r8, [sp, #16]
   1d530:	add	sp, sp, #20
   1d534:	pop	{pc}		; (ldr pc, [sp], #4)
   1d538:	ldr	r4, [r6, #12]
   1d53c:	cmp	r4, #0
   1d540:	beq	1d580 <__assert_fail@plt+0xb80c>
   1d544:	ldrb	r7, [r5]
   1d548:	b	1d558 <__assert_fail@plt+0xb7e4>
   1d54c:	ldr	r4, [r4, #4]
   1d550:	cmp	r4, #0
   1d554:	beq	1d580 <__assert_fail@plt+0xb80c>
   1d558:	ldrb	r3, [r4, #8]
   1d55c:	cmp	r3, r7
   1d560:	bne	1d54c <__assert_fail@plt+0xb7d8>
   1d564:	mov	r1, r5
   1d568:	add	r0, r4, #8
   1d56c:	bl	118a0 <strcmp@plt>
   1d570:	cmp	r0, #0
   1d574:	bne	1d54c <__assert_fail@plt+0xb7d8>
   1d578:	mov	r4, r0
   1d57c:	b	1d520 <__assert_fail@plt+0xb7ac>
   1d580:	mov	r0, r5
   1d584:	bl	11d50 <getgrnam@plt>
   1d588:	mov	r4, r0
   1d58c:	mov	r0, r5
   1d590:	bl	11b94 <strlen@plt>
   1d594:	add	r0, r0, #12
   1d598:	bic	r0, r0, #3
   1d59c:	bl	233fc <_obstack_memory_used@@Base+0x3164>
   1d5a0:	mov	r7, r0
   1d5a4:	mov	r1, r5
   1d5a8:	add	r0, r0, #8
   1d5ac:	bl	11a5c <strcpy@plt>
   1d5b0:	cmp	r4, #0
   1d5b4:	beq	1d5d0 <__assert_fail@plt+0xb85c>
   1d5b8:	ldr	r2, [r4, #8]
   1d5bc:	mov	r4, r7
   1d5c0:	ldr	r3, [r6, #8]
   1d5c4:	str	r7, [r6, #8]
   1d5c8:	strd	r2, [r7]
   1d5cc:	b	1d520 <__assert_fail@plt+0xb7ac>
   1d5d0:	ldr	r3, [r6, #12]
   1d5d4:	str	r7, [r6, #12]
   1d5d8:	str	r3, [r7, #4]
   1d5dc:	b	1d520 <__assert_fail@plt+0xb7ac>
   1d5e0:	mov	r3, #0
   1d5e4:	cmp	r0, #0
   1d5e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d5ec:	mov	r5, r1
   1d5f0:	sbcs	r1, r1, #0
   1d5f4:	strd	r6, [sp, #8]
   1d5f8:	mov	r4, r0
   1d5fc:	add	r6, r2, #20
   1d600:	str	r8, [sp, #16]
   1d604:	str	lr, [sp, #20]
   1d608:	strb	r3, [r2, #20]
   1d60c:	blt	1d66c <__assert_fail@plt+0xb8f8>
   1d610:	mov	r0, r4
   1d614:	mov	r1, r5
   1d618:	mov	r2, #10
   1d61c:	mov	r3, #0
   1d620:	bl	24d3c <_obstack_memory_used@@Base+0x4aa4>
   1d624:	add	ip, r2, #48	; 0x30
   1d628:	mov	r0, r4
   1d62c:	mov	r1, r5
   1d630:	mov	r3, #0
   1d634:	mov	r2, #10
   1d638:	strb	ip, [r6, #-1]!
   1d63c:	bl	24d3c <_obstack_memory_used@@Base+0x4aa4>
   1d640:	mov	r4, r0
   1d644:	mov	r5, r1
   1d648:	orrs	r3, r4, r5
   1d64c:	bne	1d610 <__assert_fail@plt+0xb89c>
   1d650:	mov	r0, r6
   1d654:	ldrd	r4, [sp]
   1d658:	ldrd	r6, [sp, #8]
   1d65c:	ldr	r8, [sp, #16]
   1d660:	add	sp, sp, #20
   1d664:	pop	{pc}		; (ldr pc, [sp], #4)
   1d668:	mov	r6, r7
   1d66c:	mov	r0, r4
   1d670:	mov	r1, r5
   1d674:	mov	r2, #10
   1d678:	mov	r3, #0
   1d67c:	bl	24d3c <_obstack_memory_used@@Base+0x4aa4>
   1d680:	rsb	ip, r2, #48	; 0x30
   1d684:	mov	r0, r4
   1d688:	mov	r1, r5
   1d68c:	mov	r3, #0
   1d690:	mov	r2, #10
   1d694:	strb	ip, [r6, #-1]
   1d698:	sub	r7, r6, #1
   1d69c:	bl	24d3c <_obstack_memory_used@@Base+0x4aa4>
   1d6a0:	mov	r4, r0
   1d6a4:	mov	r5, r1
   1d6a8:	orrs	r3, r4, r5
   1d6ac:	bne	1d668 <__assert_fail@plt+0xb8f4>
   1d6b0:	mov	r3, #45	; 0x2d
   1d6b4:	sub	r6, r6, #2
   1d6b8:	strb	r3, [r7, #-1]
   1d6bc:	b	1d650 <__assert_fail@plt+0xb8dc>
   1d6c0:	mov	r3, #0
   1d6c4:	strd	r4, [sp, #-16]!
   1d6c8:	mov	r4, r0
   1d6cc:	mov	r5, r1
   1d6d0:	str	r6, [sp, #8]
   1d6d4:	add	r6, r2, #20
   1d6d8:	str	lr, [sp, #12]
   1d6dc:	strb	r3, [r2, #20]
   1d6e0:	mov	r0, r4
   1d6e4:	mov	r1, r5
   1d6e8:	mov	r2, #10
   1d6ec:	mov	r3, #0
   1d6f0:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   1d6f4:	add	ip, r2, #48	; 0x30
   1d6f8:	mov	r0, r4
   1d6fc:	mov	r1, r5
   1d700:	mov	r2, #10
   1d704:	mov	r3, #0
   1d708:	strb	ip, [r6, #-1]!
   1d70c:	bl	24e10 <_obstack_memory_used@@Base+0x4b78>
   1d710:	cmp	r5, #0
   1d714:	mov	r5, r1
   1d718:	cmpeq	r4, #9
   1d71c:	mov	r4, r0
   1d720:	bhi	1d6e0 <__assert_fail@plt+0xb96c>
   1d724:	mov	r0, r6
   1d728:	ldrd	r4, [sp]
   1d72c:	ldr	r6, [sp, #8]
   1d730:	add	sp, sp, #12
   1d734:	pop	{pc}		; (ldr pc, [sp], #4)
   1d738:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d73c:	mov	r5, r2
   1d740:	strd	r6, [sp, #8]
   1d744:	subs	r6, r0, #0
   1d748:	mov	r7, r1
   1d74c:	str	lr, [sp, #16]
   1d750:	sub	sp, sp, #12
   1d754:	addeq	r6, sp, #4
   1d758:	mov	r0, r6
   1d75c:	bl	11a74 <mbrtowc@plt>
   1d760:	cmp	r5, #0
   1d764:	cmnne	r0, #3
   1d768:	mov	r4, r0
   1d76c:	bhi	1d788 <__assert_fail@plt+0xba14>
   1d770:	mov	r0, r4
   1d774:	add	sp, sp, #12
   1d778:	ldrd	r4, [sp]
   1d77c:	ldrd	r6, [sp, #8]
   1d780:	add	sp, sp, #16
   1d784:	pop	{pc}		; (ldr pc, [sp], #4)
   1d788:	mov	r0, #0
   1d78c:	bl	1b358 <__assert_fail@plt+0x95e4>
   1d790:	cmp	r0, #0
   1d794:	bne	1d770 <__assert_fail@plt+0xb9fc>
   1d798:	ldrb	r3, [r7]
   1d79c:	mov	r4, #1
   1d7a0:	str	r3, [r6]
   1d7a4:	b	1d770 <__assert_fail@plt+0xb9fc>
   1d7a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d7ac:	mov	r4, r2
   1d7b0:	strd	r6, [sp, #8]
   1d7b4:	mov	r6, r1
   1d7b8:	strd	r8, [sp, #16]
   1d7bc:	mov	r9, r3
   1d7c0:	strd	sl, [sp, #24]
   1d7c4:	str	lr, [sp, #32]
   1d7c8:	sub	sp, sp, #12
   1d7cc:	ldr	r7, [sp, #52]	; 0x34
   1d7d0:	str	r0, [sp]
   1d7d4:	bl	11b94 <strlen@plt>
   1d7d8:	mov	fp, r0
   1d7dc:	ands	sl, r7, #2
   1d7e0:	beq	1d934 <__assert_fail@plt+0xbbc0>
   1d7e4:	mov	r8, #0
   1d7e8:	mov	r5, fp
   1d7ec:	mov	sl, r8
   1d7f0:	ldr	r2, [r9]
   1d7f4:	cmp	r2, r5
   1d7f8:	movcc	fp, r2
   1d7fc:	movcc	r1, #0
   1d800:	bcs	1d904 <__assert_fail@plt+0xbb90>
   1d804:	ldr	r3, [sp, #48]	; 0x30
   1d808:	str	r2, [r9]
   1d80c:	cmp	r3, #0
   1d810:	beq	1d928 <__assert_fail@plt+0xbbb4>
   1d814:	cmp	r3, #1
   1d818:	moveq	r5, #0
   1d81c:	beq	1d82c <__assert_fail@plt+0xbab8>
   1d820:	lsr	r5, r1, #1
   1d824:	and	r1, r1, #1
   1d828:	add	r1, r1, r5
   1d82c:	tst	r7, #4
   1d830:	addeq	r9, r1, fp
   1d834:	movne	r9, fp
   1d838:	movne	r1, #0
   1d83c:	tst	r7, #8
   1d840:	movne	r5, #0
   1d844:	cmp	r4, #0
   1d848:	beq	1d8cc <__assert_fail@plt+0xbb58>
   1d84c:	sub	r4, r4, #1
   1d850:	mov	r0, r6
   1d854:	add	r4, r6, r4
   1d858:	cmp	r1, #0
   1d85c:	cmpne	r6, r4
   1d860:	bcs	1d880 <__assert_fail@plt+0xbb0c>
   1d864:	mov	lr, #32
   1d868:	rsb	r3, r1, #0
   1d86c:	strb	lr, [r0], #1
   1d870:	sub	r2, r6, r0
   1d874:	cmp	r3, r2
   1d878:	cmpne	r4, r0
   1d87c:	bhi	1d868 <__assert_fail@plt+0xbaf4>
   1d880:	sub	r2, r4, r0
   1d884:	mov	ip, #0
   1d888:	ldr	r1, [sp]
   1d88c:	cmp	r2, fp
   1d890:	movcs	r2, fp
   1d894:	strb	ip, [r0]
   1d898:	bl	11b40 <mempcpy@plt>
   1d89c:	cmp	r5, #0
   1d8a0:	cmpne	r4, r0
   1d8a4:	mov	r3, r0
   1d8a8:	bls	1d8c4 <__assert_fail@plt+0xbb50>
   1d8ac:	mov	r1, #32
   1d8b0:	strb	r1, [r3], #1
   1d8b4:	sub	r2, r3, r5
   1d8b8:	cmp	r0, r2
   1d8bc:	cmpne	r4, r3
   1d8c0:	bhi	1d8b0 <__assert_fail@plt+0xbb3c>
   1d8c4:	mov	r2, #0
   1d8c8:	strb	r2, [r3]
   1d8cc:	add	r5, r5, r9
   1d8d0:	mov	r0, r8
   1d8d4:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1d8d8:	mov	r0, sl
   1d8dc:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1d8e0:	mov	r0, r5
   1d8e4:	add	sp, sp, #12
   1d8e8:	ldrd	r4, [sp]
   1d8ec:	ldrd	r6, [sp, #8]
   1d8f0:	ldrd	r8, [sp, #16]
   1d8f4:	ldrd	sl, [sp, #24]
   1d8f8:	add	sp, sp, #32
   1d8fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d900:	mov	sl, #0
   1d904:	ldr	r3, [sp, #48]	; 0x30
   1d908:	cmp	r2, r5
   1d90c:	subhi	r1, r2, r5
   1d910:	movls	r2, r5
   1d914:	movhi	r2, r5
   1d918:	movls	r1, #0
   1d91c:	str	r2, [r9]
   1d920:	cmp	r3, #0
   1d924:	bne	1d814 <__assert_fail@plt+0xbaa0>
   1d928:	mov	r5, r1
   1d92c:	ldr	r1, [sp, #48]	; 0x30
   1d930:	b	1d82c <__assert_fail@plt+0xbab8>
   1d934:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1d938:	cmp	r0, #1
   1d93c:	bls	1d7e4 <__assert_fail@plt+0xba70>
   1d940:	mov	r2, sl
   1d944:	mov	r0, sl
   1d948:	ldr	r1, [sp]
   1d94c:	bl	11ca8 <mbstowcs@plt>
   1d950:	cmn	r0, #1
   1d954:	bne	1d970 <__assert_fail@plt+0xbbfc>
   1d958:	tst	r7, #1
   1d95c:	bne	1d7e4 <__assert_fail@plt+0xba70>
   1d960:	mov	r8, #0
   1d964:	mvn	r5, #0
   1d968:	mov	sl, r8
   1d96c:	b	1d8d0 <__assert_fail@plt+0xbb5c>
   1d970:	add	r5, r0, #1
   1d974:	lsl	r3, r5, #2
   1d978:	mov	r0, r3
   1d97c:	str	r3, [sp, #4]
   1d980:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   1d984:	subs	r8, r0, #0
   1d988:	beq	1dab4 <__assert_fail@plt+0xbd40>
   1d98c:	mov	r2, r5
   1d990:	ldr	r1, [sp]
   1d994:	bl	11ca8 <mbstowcs@plt>
   1d998:	cmp	r0, #0
   1d99c:	beq	1db0c <__assert_fail@plt+0xbd98>
   1d9a0:	ldr	r3, [sp, #4]
   1d9a4:	add	r3, r8, r3
   1d9a8:	str	sl, [r3, #-4]
   1d9ac:	ldr	r2, [r8]
   1d9b0:	cmp	r2, #0
   1d9b4:	beq	1dac8 <__assert_fail@plt+0xbd54>
   1d9b8:	mov	r0, r2
   1d9bc:	str	r4, [sp, #4]
   1d9c0:	mov	r4, r8
   1d9c4:	bl	119f0 <iswprint@plt>
   1d9c8:	cmp	r0, #0
   1d9cc:	bne	1d9dc <__assert_fail@plt+0xbc68>
   1d9d0:	movw	r3, #65533	; 0xfffd
   1d9d4:	mov	sl, #1
   1d9d8:	str	r3, [r4]
   1d9dc:	ldr	r0, [r4, #4]!
   1d9e0:	cmp	r0, #0
   1d9e4:	bne	1d9c4 <__assert_fail@plt+0xbc50>
   1d9e8:	mov	r2, r0
   1d9ec:	mov	r1, r5
   1d9f0:	ldr	r4, [sp, #4]
   1d9f4:	mov	r0, r8
   1d9f8:	str	r2, [sp, #4]
   1d9fc:	bl	11c6c <wcswidth@plt>
   1da00:	cmp	sl, #0
   1da04:	mov	r5, r0
   1da08:	ldr	r2, [sp, #4]
   1da0c:	beq	1dad8 <__assert_fail@plt+0xbd64>
   1da10:	mov	r0, r2
   1da14:	mov	r1, r8
   1da18:	bl	11a80 <wcstombs@plt>
   1da1c:	add	r3, r0, #1
   1da20:	str	r3, [sp, #4]
   1da24:	ldr	r0, [sp, #4]
   1da28:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   1da2c:	subs	sl, r0, #0
   1da30:	beq	1dafc <__assert_fail@plt+0xbd88>
   1da34:	ldr	r0, [r8]
   1da38:	ldr	r3, [r9]
   1da3c:	cmp	r0, #0
   1da40:	beq	1db18 <__assert_fail@plt+0xbda4>
   1da44:	mov	fp, r8
   1da48:	mov	r5, #0
   1da4c:	str	r4, [sp]
   1da50:	mov	r4, r3
   1da54:	b	1da68 <__assert_fail@plt+0xbcf4>
   1da58:	ldr	r0, [fp, #4]!
   1da5c:	mov	r5, r3
   1da60:	cmp	r0, #0
   1da64:	beq	1da8c <__assert_fail@plt+0xbd18>
   1da68:	bl	118d0 <wcwidth@plt>
   1da6c:	cmn	r0, #1
   1da70:	bne	1da80 <__assert_fail@plt+0xbd0c>
   1da74:	movw	r3, #65533	; 0xfffd
   1da78:	mov	r0, #1
   1da7c:	str	r3, [fp]
   1da80:	add	r3, r0, r5
   1da84:	cmp	r4, r3
   1da88:	bcs	1da58 <__assert_fail@plt+0xbce4>
   1da8c:	ldr	r4, [sp]
   1da90:	mov	r0, #0
   1da94:	mov	r1, r8
   1da98:	str	sl, [sp]
   1da9c:	ldr	r2, [sp, #4]
   1daa0:	str	r0, [fp]
   1daa4:	mov	r0, sl
   1daa8:	bl	11a80 <wcstombs@plt>
   1daac:	mov	fp, r0
   1dab0:	b	1d7f0 <__assert_fail@plt+0xba7c>
   1dab4:	tst	r7, #1
   1dab8:	movne	r5, fp
   1dabc:	movne	sl, r8
   1dac0:	bne	1d7f0 <__assert_fail@plt+0xba7c>
   1dac4:	b	1d960 <__assert_fail@plt+0xbbec>
   1dac8:	mov	r1, r5
   1dacc:	mov	r0, r8
   1dad0:	bl	11c6c <wcswidth@plt>
   1dad4:	mov	r5, r0
   1dad8:	ldr	r2, [r9]
   1dadc:	cmp	r2, r5
   1dae0:	bcs	1d900 <__assert_fail@plt+0xbb8c>
   1dae4:	add	r3, fp, #1
   1dae8:	str	r3, [sp, #4]
   1daec:	ldr	r0, [sp, #4]
   1daf0:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   1daf4:	subs	sl, r0, #0
   1daf8:	bne	1da34 <__assert_fail@plt+0xbcc0>
   1dafc:	tst	r7, #1
   1db00:	mvneq	r5, #0
   1db04:	bne	1d7f0 <__assert_fail@plt+0xba7c>
   1db08:	b	1d8d0 <__assert_fail@plt+0xbb5c>
   1db0c:	mov	sl, r0
   1db10:	mov	r5, fp
   1db14:	b	1d7f0 <__assert_fail@plt+0xba7c>
   1db18:	mov	r5, r0
   1db1c:	mov	fp, r8
   1db20:	b	1da90 <__assert_fail@plt+0xbd1c>
   1db24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1db28:	strd	r6, [sp, #8]
   1db2c:	mov	r6, r1
   1db30:	mov	r7, #0
   1db34:	strd	r8, [sp, #16]
   1db38:	mov	r9, r0
   1db3c:	ldr	r8, [r1]
   1db40:	strd	sl, [sp, #24]
   1db44:	mov	fp, r2
   1db48:	mov	sl, r3
   1db4c:	str	lr, [sp, #32]
   1db50:	sub	sp, sp, #12
   1db54:	mov	r0, r8
   1db58:	add	r4, r0, #1
   1db5c:	mov	r0, r7
   1db60:	mov	r1, r4
   1db64:	bl	24600 <_obstack_memory_used@@Base+0x4368>
   1db68:	subs	r5, r0, #0
   1db6c:	mov	r3, r6
   1db70:	mov	r2, r4
   1db74:	mov	r0, r9
   1db78:	mov	r1, r5
   1db7c:	beq	1dbc4 <__assert_fail@plt+0xbe50>
   1db80:	str	r8, [r6]
   1db84:	mov	r7, r5
   1db88:	str	fp, [sp]
   1db8c:	str	sl, [sp, #4]
   1db90:	bl	1d7a8 <__assert_fail@plt+0xba34>
   1db94:	cmn	r0, #1
   1db98:	beq	1dbd0 <__assert_fail@plt+0xbe5c>
   1db9c:	cmp	r4, r0
   1dba0:	bls	1db58 <__assert_fail@plt+0xbde4>
   1dba4:	mov	r0, r5
   1dba8:	add	sp, sp, #12
   1dbac:	ldrd	r4, [sp]
   1dbb0:	ldrd	r6, [sp, #8]
   1dbb4:	ldrd	r8, [sp, #16]
   1dbb8:	ldrd	sl, [sp, #24]
   1dbbc:	add	sp, sp, #32
   1dbc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbc4:	mov	r0, r7
   1dbc8:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1dbcc:	b	1dba4 <__assert_fail@plt+0xbe30>
   1dbd0:	mov	r0, r5
   1dbd4:	mov	r5, #0
   1dbd8:	bl	1b2b4 <__assert_fail@plt+0x9540>
   1dbdc:	b	1dba4 <__assert_fail@plt+0xbe30>
   1dbe0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1dbe4:	mov	r4, r0
   1dbe8:	strd	r6, [sp, #8]
   1dbec:	add	r6, r0, r1
   1dbf0:	str	r8, [sp, #16]
   1dbf4:	strd	sl, [sp, #20]
   1dbf8:	mov	fp, r2
   1dbfc:	str	lr, [sp, #28]
   1dc00:	sub	sp, sp, #16
   1dc04:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1dc08:	cmp	r0, #1
   1dc0c:	bls	1dd30 <__assert_fail@plt+0xbfbc>
   1dc10:	cmp	r4, r6
   1dc14:	mov	r5, #0
   1dc18:	bcs	1dd10 <__assert_fail@plt+0xbf9c>
   1dc1c:	and	sl, fp, #2
   1dc20:	b	1dc48 <__assert_fail@plt+0xbed4>
   1dc24:	cmp	r3, #37	; 0x25
   1dc28:	bcs	1dc38 <__assert_fail@plt+0xbec4>
   1dc2c:	sub	r3, r3, #32
   1dc30:	cmp	r3, #3
   1dc34:	bhi	1dc70 <__assert_fail@plt+0xbefc>
   1dc38:	add	r4, r4, #1
   1dc3c:	add	r5, r5, #1
   1dc40:	cmp	r4, r6
   1dc44:	bcs	1dd10 <__assert_fail@plt+0xbf9c>
   1dc48:	ldrb	r3, [r4]
   1dc4c:	cmp	r3, #63	; 0x3f
   1dc50:	bls	1dc24 <__assert_fail@plt+0xbeb0>
   1dc54:	cmp	r3, #65	; 0x41
   1dc58:	bcc	1dc70 <__assert_fail@plt+0xbefc>
   1dc5c:	cmp	r3, #95	; 0x5f
   1dc60:	bls	1dc38 <__assert_fail@plt+0xbec4>
   1dc64:	sub	r3, r3, #97	; 0x61
   1dc68:	cmp	r3, #29
   1dc6c:	bls	1dc38 <__assert_fail@plt+0xbec4>
   1dc70:	mov	r2, #0
   1dc74:	mov	r3, #0
   1dc78:	mvn	r7, #-2147483648	; 0x80000000
   1dc7c:	strd	r2, [sp, #8]
   1dc80:	b	1dca4 <__assert_fail@plt+0xbf30>
   1dc84:	cmp	r2, r0
   1dc88:	add	r5, r5, r0
   1dc8c:	blt	1dd0c <__assert_fail@plt+0xbf98>
   1dc90:	add	r0, sp, #8
   1dc94:	add	r4, r4, r8
   1dc98:	bl	11948 <mbsinit@plt>
   1dc9c:	cmp	r0, #0
   1dca0:	bne	1dc40 <__assert_fail@plt+0xbecc>
   1dca4:	add	r3, sp, #8
   1dca8:	sub	r2, r6, r4
   1dcac:	mov	r1, r4
   1dcb0:	add	r0, sp, #4
   1dcb4:	bl	1d738 <__assert_fail@plt+0xb9c4>
   1dcb8:	cmn	r0, #1
   1dcbc:	mov	r8, r0
   1dcc0:	beq	1dd88 <__assert_fail@plt+0xc014>
   1dcc4:	cmn	r0, #2
   1dcc8:	beq	1dd98 <__assert_fail@plt+0xc024>
   1dccc:	cmp	r0, #0
   1dcd0:	ldr	r0, [sp, #4]
   1dcd4:	moveq	r8, #1
   1dcd8:	bl	118d0 <wcwidth@plt>
   1dcdc:	cmp	r0, #0
   1dce0:	sub	r2, r7, r5
   1dce4:	bge	1dc84 <__assert_fail@plt+0xbf10>
   1dce8:	cmp	sl, #0
   1dcec:	bne	1dd90 <__assert_fail@plt+0xc01c>
   1dcf0:	ldr	r0, [sp, #4]
   1dcf4:	bl	119cc <iswcntrl@plt>
   1dcf8:	cmp	r0, #0
   1dcfc:	bne	1dc90 <__assert_fail@plt+0xbf1c>
   1dd00:	cmn	r5, #-2147483647	; 0x80000001
   1dd04:	add	r5, r5, #1
   1dd08:	bne	1dc90 <__assert_fail@plt+0xbf1c>
   1dd0c:	mvn	r5, #-2147483648	; 0x80000000
   1dd10:	mov	r0, r5
   1dd14:	add	sp, sp, #16
   1dd18:	ldrd	r4, [sp]
   1dd1c:	ldrd	r6, [sp, #8]
   1dd20:	ldr	r8, [sp, #16]
   1dd24:	ldrd	sl, [sp, #20]
   1dd28:	add	sp, sp, #28
   1dd2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd30:	cmp	r4, r6
   1dd34:	movcs	r5, #0
   1dd38:	bcs	1dd10 <__assert_fail@plt+0xbf9c>
   1dd3c:	bl	11b58 <__ctype_b_loc@plt>
   1dd40:	ldr	r2, [r0]
   1dd44:	and	fp, fp, #2
   1dd48:	mov	r5, #0
   1dd4c:	ldrb	r3, [r4], #1
   1dd50:	lsl	r3, r3, #1
   1dd54:	ldrh	r3, [r2, r3]
   1dd58:	tst	r3, #16384	; 0x4000
   1dd5c:	bne	1dd70 <__assert_fail@plt+0xbffc>
   1dd60:	cmp	fp, #0
   1dd64:	bne	1dd90 <__assert_fail@plt+0xc01c>
   1dd68:	tst	r3, #2
   1dd6c:	bne	1dd7c <__assert_fail@plt+0xc008>
   1dd70:	cmn	r5, #-2147483647	; 0x80000001
   1dd74:	beq	1dd10 <__assert_fail@plt+0xbf9c>
   1dd78:	add	r5, r5, #1
   1dd7c:	cmp	r6, r4
   1dd80:	bne	1dd4c <__assert_fail@plt+0xbfd8>
   1dd84:	b	1dd10 <__assert_fail@plt+0xbf9c>
   1dd88:	tst	fp, #1
   1dd8c:	beq	1dc38 <__assert_fail@plt+0xbec4>
   1dd90:	mvn	r5, #0
   1dd94:	b	1dd10 <__assert_fail@plt+0xbf9c>
   1dd98:	tst	fp, #1
   1dd9c:	bne	1dd90 <__assert_fail@plt+0xc01c>
   1dda0:	add	r5, r5, #1
   1dda4:	mov	r4, r6
   1dda8:	b	1dc40 <__assert_fail@plt+0xbecc>
   1ddac:	strd	r4, [sp, #-16]!
   1ddb0:	mov	r5, r1
   1ddb4:	mov	r4, r0
   1ddb8:	str	r6, [sp, #8]
   1ddbc:	str	lr, [sp, #12]
   1ddc0:	bl	11b94 <strlen@plt>
   1ddc4:	mov	r1, r0
   1ddc8:	mov	r2, r5
   1ddcc:	ldr	r6, [sp, #8]
   1ddd0:	mov	r0, r4
   1ddd4:	ldrd	r4, [sp]
   1ddd8:	ldr	lr, [sp, #12]
   1dddc:	add	sp, sp, #16
   1dde0:	b	1dbe0 <__assert_fail@plt+0xbe6c>
   1dde4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1dde8:	cmp	r1, #2
   1ddec:	mov	r4, r0
   1ddf0:	strd	r6, [sp, #8]
   1ddf4:	mov	r5, r3
   1ddf8:	strd	r8, [sp, #16]
   1ddfc:	strd	sl, [sp, #24]
   1de00:	str	lr, [sp, #32]
   1de04:	sub	sp, sp, #20
   1de08:	str	r2, [sp, #8]
   1de0c:	bhi	1de50 <__assert_fail@plt+0xc0dc>
   1de10:	beq	1de30 <__assert_fail@plt+0xc0bc>
   1de14:	add	sp, sp, #20
   1de18:	ldrd	r4, [sp]
   1de1c:	ldrd	r6, [sp, #8]
   1de20:	ldrd	r8, [sp, #16]
   1de24:	ldrd	sl, [sp, #24]
   1de28:	add	sp, sp, #32
   1de2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1de30:	ldrd	r6, [r0]
   1de34:	mov	r0, r6
   1de38:	mov	r1, r7
   1de3c:	blx	r3
   1de40:	cmp	r0, #0
   1de44:	strgt	r7, [r4]
   1de48:	strgt	r6, [r4, #4]
   1de4c:	b	1de14 <__assert_fail@plt+0xc0a0>
   1de50:	mov	r6, r1
   1de54:	lsr	r1, r1, #1
   1de58:	mov	r0, r1
   1de5c:	sub	r1, r6, r1
   1de60:	str	r0, [sp, #4]
   1de64:	add	r0, r4, r0, lsl #2
   1de68:	bl	1dde4 <__assert_fail@plt+0xc070>
   1de6c:	cmp	r6, #3
   1de70:	bne	1df20 <__assert_fail@plt+0xc1ac>
   1de74:	ldr	sl, [r4]
   1de78:	ldr	r3, [sp, #8]
   1de7c:	str	sl, [r3]
   1de80:	ldr	r3, [sp, #4]
   1de84:	mov	r8, #0
   1de88:	mov	fp, r8
   1de8c:	mov	r7, r3
   1de90:	ldr	r9, [r4, r3, lsl #2]
   1de94:	b	1deb0 <__assert_fail@plt+0xc13c>
   1de98:	add	r7, r7, #1
   1de9c:	str	r9, [r4, r8, lsl #2]
   1dea0:	cmp	r6, r7
   1dea4:	beq	1dee8 <__assert_fail@plt+0xc174>
   1dea8:	ldr	r9, [r4, r7, lsl #2]
   1deac:	mov	r8, r0
   1deb0:	mov	r1, r9
   1deb4:	mov	r0, sl
   1deb8:	blx	r5
   1debc:	cmp	r0, #0
   1dec0:	add	r0, r8, #1
   1dec4:	bgt	1de98 <__assert_fail@plt+0xc124>
   1dec8:	ldr	r3, [sp, #4]
   1decc:	add	fp, fp, #1
   1ded0:	str	sl, [r4, r8, lsl #2]
   1ded4:	cmp	r3, fp
   1ded8:	beq	1de14 <__assert_fail@plt+0xc0a0>
   1dedc:	ldr	r3, [sp, #8]
   1dee0:	ldr	sl, [r3, fp, lsl #2]
   1dee4:	b	1deac <__assert_fail@plt+0xc138>
   1dee8:	ldr	r3, [sp, #4]
   1deec:	add	r0, r4, r0, lsl #2
   1def0:	sub	r2, r3, fp
   1def4:	ldr	r3, [sp, #8]
   1def8:	lsl	r2, r2, #2
   1defc:	add	r1, r3, fp, lsl #2
   1df00:	add	sp, sp, #20
   1df04:	ldrd	r4, [sp]
   1df08:	ldrd	r6, [sp, #8]
   1df0c:	ldrd	r8, [sp, #16]
   1df10:	ldrd	sl, [sp, #24]
   1df14:	ldr	lr, [sp, #32]
   1df18:	add	sp, sp, #36	; 0x24
   1df1c:	b	11930 <memcpy@plt>
   1df20:	ldmib	sp, {r1, r7}
   1df24:	lsr	r9, r6, #2
   1df28:	bic	sl, r6, #3
   1df2c:	add	r0, r4, sl
   1df30:	mov	r3, r5
   1df34:	mov	r8, r9
   1df38:	mov	fp, #0
   1df3c:	str	r9, [sp, #12]
   1df40:	sub	r1, r1, r9
   1df44:	mov	r2, r7
   1df48:	bl	1dde4 <__assert_fail@plt+0xc070>
   1df4c:	mov	r1, r9
   1df50:	mov	r3, r5
   1df54:	mov	r2, r7
   1df58:	mov	r0, r4
   1df5c:	bl	1dde4 <__assert_fail@plt+0xc070>
   1df60:	ldr	r9, [r4, sl]
   1df64:	ldr	sl, [r4]
   1df68:	mov	r1, r9
   1df6c:	mov	r0, sl
   1df70:	blx	r5
   1df74:	cmp	r0, #0
   1df78:	add	r7, r7, #4
   1df7c:	ble	1df9c <__assert_fail@plt+0xc228>
   1df80:	ldr	r3, [sp, #4]
   1df84:	add	r8, r8, #1
   1df88:	str	r9, [r7, #-4]
   1df8c:	cmp	r3, r8
   1df90:	beq	1dfc4 <__assert_fail@plt+0xc250>
   1df94:	ldr	r9, [r4, r8, lsl #2]
   1df98:	b	1df68 <__assert_fail@plt+0xc1f4>
   1df9c:	ldr	r3, [sp, #12]
   1dfa0:	add	fp, fp, #1
   1dfa4:	str	sl, [r7, #-4]
   1dfa8:	cmp	r3, fp
   1dfac:	beq	1dfb8 <__assert_fail@plt+0xc244>
   1dfb0:	ldr	sl, [r4, fp, lsl #2]
   1dfb4:	b	1df68 <__assert_fail@plt+0xc1f4>
   1dfb8:	ldr	r3, [sp, #4]
   1dfbc:	mov	fp, r8
   1dfc0:	str	r3, [sp, #12]
   1dfc4:	ldr	r3, [sp, #12]
   1dfc8:	add	r1, r4, fp, lsl #2
   1dfcc:	mov	r0, r7
   1dfd0:	sub	r2, r3, fp
   1dfd4:	lsl	r2, r2, #2
   1dfd8:	bl	11930 <memcpy@plt>
   1dfdc:	ldr	r3, [sp, #8]
   1dfe0:	ldr	sl, [r3]
   1dfe4:	b	1de80 <__assert_fail@plt+0xc10c>
   1dfe8:	mov	r3, r2
   1dfec:	add	r2, r0, r1, lsl #2
   1dff0:	b	1dde4 <__assert_fail@plt+0xc070>
   1dff4:	strd	r4, [sp, #-16]!
   1dff8:	subs	r4, r2, #0
   1dffc:	str	r6, [sp, #8]
   1e000:	mov	r6, r0
   1e004:	str	lr, [sp, #12]
   1e008:	beq	1e034 <__assert_fail@plt+0xc2c0>
   1e00c:	mov	r5, r1
   1e010:	bl	11b1c <__ctype_tolower_loc@plt>
   1e014:	add	r3, r5, r4
   1e018:	add	r2, r6, r4
   1e01c:	ldrb	lr, [r3, #-1]!
   1e020:	ldr	ip, [r0]
   1e024:	cmp	r5, r3
   1e028:	ldr	ip, [ip, lr, lsl #2]
   1e02c:	strb	ip, [r2, #-1]!
   1e030:	bne	1e01c <__assert_fail@plt+0xc2a8>
   1e034:	mov	r0, r6
   1e038:	ldrd	r4, [sp]
   1e03c:	ldr	r6, [sp, #8]
   1e040:	add	sp, sp, #12
   1e044:	pop	{pc}		; (ldr pc, [sp], #4)
   1e048:	strd	r4, [sp, #-16]!
   1e04c:	subs	r4, r2, #0
   1e050:	str	r6, [sp, #8]
   1e054:	mov	r6, r0
   1e058:	str	lr, [sp, #12]
   1e05c:	beq	1e088 <__assert_fail@plt+0xc314>
   1e060:	mov	r5, r1
   1e064:	bl	11b28 <__ctype_toupper_loc@plt>
   1e068:	add	r3, r5, r4
   1e06c:	add	r2, r6, r4
   1e070:	ldrb	lr, [r3, #-1]!
   1e074:	ldr	ip, [r0]
   1e078:	cmp	r5, r3
   1e07c:	ldr	ip, [ip, lr, lsl #2]
   1e080:	strb	ip, [r2, #-1]!
   1e084:	bne	1e070 <__assert_fail@plt+0xc2fc>
   1e088:	mov	r0, r6
   1e08c:	ldrd	r4, [sp]
   1e090:	ldr	r6, [sp, #8]
   1e094:	add	sp, sp, #12
   1e098:	pop	{pc}		; (ldr pc, [sp], #4)
   1e09c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e0a0:	mov	r4, r3
   1e0a4:	strd	r6, [sp, #8]
   1e0a8:	mov	r6, r0
   1e0ac:	strd	r8, [sp, #16]
   1e0b0:	mov	r9, r2
   1e0b4:	strd	sl, [sp, #24]
   1e0b8:	str	lr, [sp, #32]
   1e0bc:	sub	sp, sp, #1136	; 0x470
   1e0c0:	sub	sp, sp, #4
   1e0c4:	str	r1, [sp, #28]
   1e0c8:	str	r3, [sp, #48]	; 0x30
   1e0cc:	ldrb	r3, [sp, #1176]	; 0x498
   1e0d0:	str	r3, [sp, #40]	; 0x28
   1e0d4:	bl	11bb8 <__errno_location@plt>
   1e0d8:	ldr	r1, [r0]
   1e0dc:	movw	r3, #37260	; 0x918c
   1e0e0:	movt	r3, #2
   1e0e4:	str	r0, [sp, #36]	; 0x24
   1e0e8:	ldr	r2, [r4, #40]	; 0x28
   1e0ec:	ldr	ip, [r4, #8]
   1e0f0:	ldr	r5, [sp, #1184]	; 0x4a0
   1e0f4:	cmp	r2, #0
   1e0f8:	str	r1, [sp, #52]	; 0x34
   1e0fc:	mov	r1, r2
   1e100:	moveq	r1, r3
   1e104:	cmp	ip, #12
   1e108:	str	ip, [sp, #32]
   1e10c:	subgt	r3, ip, #12
   1e110:	str	r1, [sp, #56]	; 0x38
   1e114:	strgt	r3, [sp, #32]
   1e118:	bgt	1e12c <__assert_fail@plt+0xc3b8>
   1e11c:	ldr	r3, [sp, #32]
   1e120:	cmp	r3, #0
   1e124:	moveq	r3, #12
   1e128:	str	r3, [sp, #32]
   1e12c:	ldrb	r3, [r9]
   1e130:	cmp	r3, #0
   1e134:	beq	1fadc <__assert_fail@plt+0xdd68>
   1e138:	movw	r2, #46021	; 0xb3c5
   1e13c:	movt	r2, #37282	; 0x91a2
   1e140:	movw	sl, #9363	; 0x2493
   1e144:	movt	sl, #37449	; 0x9249
   1e148:	movw	r7, #26215	; 0x6667
   1e14c:	movt	r7, #26214	; 0x6666
   1e150:	str	r2, [sp, #76]	; 0x4c
   1e154:	movw	r2, #34953	; 0x8889
   1e158:	movt	r2, #34952	; 0x8888
   1e15c:	mov	fp, #0
   1e160:	str	sl, [sp, #64]	; 0x40
   1e164:	str	r7, [sp, #72]	; 0x48
   1e168:	str	r2, [sp, #80]	; 0x50
   1e16c:	movw	r2, #34079	; 0x851f
   1e170:	movt	r2, #20971	; 0x51eb
   1e174:	str	r2, [sp, #68]	; 0x44
   1e178:	cmp	r3, #37	; 0x25
   1e17c:	beq	1e260 <__assert_fail@plt+0xc4ec>
   1e180:	ldr	r3, [sp, #28]
   1e184:	cmp	r5, #0
   1e188:	sub	r3, r3, fp
   1e18c:	blt	1e214 <__assert_fail@plt+0xc4a0>
   1e190:	cmp	r5, #1
   1e194:	movcs	r4, r5
   1e198:	movcc	r4, #1
   1e19c:	cmp	r4, r3
   1e1a0:	bcs	1e21c <__assert_fail@plt+0xc4a8>
   1e1a4:	cmp	r6, #0
   1e1a8:	beq	1e1d4 <__assert_fail@plt+0xc460>
   1e1ac:	cmp	r5, #1
   1e1b0:	ble	1e1cc <__assert_fail@plt+0xc458>
   1e1b4:	sub	r5, r5, #1
   1e1b8:	mov	r0, r6
   1e1bc:	mov	r1, #32
   1e1c0:	mov	r2, r5
   1e1c4:	add	r6, r6, r5
   1e1c8:	bl	11be8 <memset@plt>
   1e1cc:	ldrb	r3, [r9]
   1e1d0:	strb	r3, [r6], #1
   1e1d4:	add	fp, fp, r4
   1e1d8:	mov	r4, r9
   1e1dc:	ldrb	r3, [r4, #1]
   1e1e0:	add	r9, r4, #1
   1e1e4:	mvn	r5, #0
   1e1e8:	cmp	r3, #0
   1e1ec:	bne	1e178 <__assert_fail@plt+0xc404>
   1e1f0:	ldr	r3, [sp, #28]
   1e1f4:	ldr	r2, [sp, #52]	; 0x34
   1e1f8:	cmp	r6, #0
   1e1fc:	cmpne	r3, #0
   1e200:	movne	r3, #0
   1e204:	strbne	r3, [r6]
   1e208:	ldr	r3, [sp, #36]	; 0x24
   1e20c:	str	r2, [r3]
   1e210:	b	1e22c <__assert_fail@plt+0xc4b8>
   1e214:	cmp	r3, #1
   1e218:	bhi	1e250 <__assert_fail@plt+0xc4dc>
   1e21c:	ldr	r2, [sp, #36]	; 0x24
   1e220:	mov	r3, #34	; 0x22
   1e224:	str	r3, [r2]
   1e228:	mov	fp, #0
   1e22c:	mov	r0, fp
   1e230:	add	sp, sp, #1136	; 0x470
   1e234:	add	sp, sp, #4
   1e238:	ldrd	r4, [sp]
   1e23c:	ldrd	r6, [sp, #8]
   1e240:	ldrd	r8, [sp, #16]
   1e244:	ldrd	sl, [sp, #24]
   1e248:	add	sp, sp, #32
   1e24c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e250:	cmp	r6, #0
   1e254:	mov	r4, #1
   1e258:	bne	1e1cc <__assert_fail@plt+0xc458>
   1e25c:	b	1e1d4 <__assert_fail@plt+0xc460>
   1e260:	ldr	r3, [sp, #40]	; 0x28
   1e264:	mov	sl, #0
   1e268:	mov	r8, r9
   1e26c:	str	sl, [sp, #44]	; 0x2c
   1e270:	str	r3, [sp, #60]	; 0x3c
   1e274:	ldrb	r3, [r8, #1]!
   1e278:	sub	r2, r3, #35	; 0x23
   1e27c:	mov	r7, r3
   1e280:	cmp	r2, #60	; 0x3c
   1e284:	ldrls	pc, [pc, r2, lsl #2]
   1e288:	b	1e39c <__assert_fail@plt+0xc628>
   1e28c:	muleq	r1, r4, r3
   1e290:	muleq	r1, ip, r3
   1e294:	muleq	r1, ip, r3
   1e298:	muleq	r1, ip, r3
   1e29c:	muleq	r1, ip, r3
   1e2a0:	muleq	r1, ip, r3
   1e2a4:	muleq	r1, ip, r3
   1e2a8:	muleq	r1, ip, r3
   1e2ac:	andeq	lr, r1, ip, lsl #7
   1e2b0:	muleq	r1, ip, r3
   1e2b4:	andeq	lr, r1, ip, lsl #7
   1e2b8:	muleq	r1, ip, r3
   1e2bc:	muleq	r1, ip, r3
   1e2c0:	andeq	lr, r1, ip, lsl #7
   1e2c4:	muleq	r1, ip, r3
   1e2c8:	muleq	r1, ip, r3
   1e2cc:	muleq	r1, ip, r3
   1e2d0:	muleq	r1, ip, r3
   1e2d4:	muleq	r1, ip, r3
   1e2d8:	muleq	r1, ip, r3
   1e2dc:	muleq	r1, ip, r3
   1e2e0:	muleq	r1, ip, r3
   1e2e4:	muleq	r1, ip, r3
   1e2e8:	muleq	r1, ip, r3
   1e2ec:	muleq	r1, ip, r3
   1e2f0:	muleq	r1, ip, r3
   1e2f4:	muleq	r1, ip, r3
   1e2f8:	muleq	r1, ip, r3
   1e2fc:	muleq	r1, ip, r3
   1e300:	muleq	r1, ip, r3
   1e304:	muleq	r1, ip, r3
   1e308:	muleq	r1, ip, r3
   1e30c:	muleq	r1, ip, r3
   1e310:	muleq	r1, ip, r3
   1e314:	muleq	r1, ip, r3
   1e318:	muleq	r1, ip, r3
   1e31c:	muleq	r1, ip, r3
   1e320:	muleq	r1, ip, r3
   1e324:	muleq	r1, ip, r3
   1e328:	muleq	r1, ip, r3
   1e32c:	muleq	r1, ip, r3
   1e330:	muleq	r1, ip, r3
   1e334:	muleq	r1, ip, r3
   1e338:	muleq	r1, ip, r3
   1e33c:	muleq	r1, ip, r3
   1e340:	muleq	r1, ip, r3
   1e344:	muleq	r1, ip, r3
   1e348:	muleq	r1, ip, r3
   1e34c:	muleq	r1, ip, r3
   1e350:	muleq	r1, ip, r3
   1e354:	muleq	r1, ip, r3
   1e358:	muleq	r1, ip, r3
   1e35c:	muleq	r1, ip, r3
   1e360:	muleq	r1, ip, r3
   1e364:	muleq	r1, ip, r3
   1e368:	muleq	r1, ip, r3
   1e36c:	muleq	r1, ip, r3
   1e370:	muleq	r1, ip, r3
   1e374:	muleq	r1, ip, r3
   1e378:	andeq	lr, r1, r0, lsl #7
   1e37c:	andeq	lr, r1, ip, lsl #7
   1e380:	mov	r3, #1
   1e384:	str	r3, [sp, #60]	; 0x3c
   1e388:	b	1e274 <__assert_fail@plt+0xc500>
   1e38c:	str	r3, [sp, #44]	; 0x2c
   1e390:	b	1e274 <__assert_fail@plt+0xc500>
   1e394:	mov	sl, #1
   1e398:	b	1e274 <__assert_fail@plt+0xc500>
   1e39c:	sub	r2, r3, #48	; 0x30
   1e3a0:	cmp	r2, #9
   1e3a4:	bls	1e860 <__assert_fail@plt+0xcaec>
   1e3a8:	cmp	r3, #69	; 0x45
   1e3ac:	beq	1e5b0 <__assert_fail@plt+0xc83c>
   1e3b0:	cmp	r3, #79	; 0x4f
   1e3b4:	beq	1e5b0 <__assert_fail@plt+0xc83c>
   1e3b8:	cmp	r3, #122	; 0x7a
   1e3bc:	ldrls	pc, [pc, r3, lsl #2]
   1e3c0:	b	1f9a8 <__assert_fail@plt+0xdc34>
   1e3c4:			; <UNDEFINED> instruction: 0x0001e7b0
   1e3c8:	andeq	pc, r1, r8, lsr #19
   1e3cc:	andeq	pc, r1, r8, lsr #19
   1e3d0:	andeq	pc, r1, r8, lsr #19
   1e3d4:	andeq	pc, r1, r8, lsr #19
   1e3d8:	andeq	pc, r1, r8, lsr #19
   1e3dc:	andeq	pc, r1, r8, lsr #19
   1e3e0:	andeq	pc, r1, r8, lsr #19
   1e3e4:	andeq	pc, r1, r8, lsr #19
   1e3e8:	andeq	pc, r1, r8, lsr #19
   1e3ec:	andeq	pc, r1, r8, lsr #19
   1e3f0:	andeq	pc, r1, r8, lsr #19
   1e3f4:	andeq	pc, r1, r8, lsr #19
   1e3f8:	andeq	pc, r1, r8, lsr #19
   1e3fc:	andeq	pc, r1, r8, lsr #19
   1e400:	andeq	pc, r1, r8, lsr #19
   1e404:	andeq	pc, r1, r8, lsr #19
   1e408:	andeq	pc, r1, r8, lsr #19
   1e40c:	andeq	pc, r1, r8, lsr #19
   1e410:	andeq	pc, r1, r8, lsr #19
   1e414:	andeq	pc, r1, r8, lsr #19
   1e418:	andeq	pc, r1, r8, lsr #19
   1e41c:	andeq	pc, r1, r8, lsr #19
   1e420:	andeq	pc, r1, r8, lsr #19
   1e424:	andeq	pc, r1, r8, lsr #19
   1e428:	andeq	pc, r1, r8, lsr #19
   1e42c:	andeq	pc, r1, r8, lsr #19
   1e430:	andeq	pc, r1, r8, lsr #19
   1e434:	andeq	pc, r1, r8, lsr #19
   1e438:	andeq	pc, r1, r8, lsr #19
   1e43c:	andeq	pc, r1, r8, lsr #19
   1e440:	andeq	pc, r1, r8, lsr #19
   1e444:	andeq	pc, r1, r8, lsr #19
   1e448:	andeq	pc, r1, r8, lsr #19
   1e44c:	andeq	pc, r1, r8, lsr #19
   1e450:	andeq	pc, r1, r8, lsr #19
   1e454:	andeq	pc, r1, r8, lsr #19
   1e458:	andeq	pc, r1, ip, lsl #1
   1e45c:	andeq	pc, r1, r8, lsr #19
   1e460:	andeq	pc, r1, r8, lsr #19
   1e464:	andeq	pc, r1, r8, lsr #19
   1e468:	andeq	pc, r1, r8, lsr #19
   1e46c:	andeq	pc, r1, r8, lsr #19
   1e470:	andeq	pc, r1, r8, lsr #19
   1e474:	andeq	pc, r1, r8, lsr #19
   1e478:	andeq	pc, r1, r8, lsr #19
   1e47c:	andeq	pc, r1, r8, lsr #19
   1e480:	andeq	pc, r1, r8, lsr #19
   1e484:	andeq	pc, r1, r8, lsr #19
   1e488:	andeq	pc, r1, r8, lsr #19
   1e48c:	andeq	pc, r1, r8, lsr #19
   1e490:	andeq	pc, r1, r8, lsr #19
   1e494:	andeq	pc, r1, r8, lsr #19
   1e498:	andeq	pc, r1, r8, lsr #19
   1e49c:	andeq	pc, r1, r8, lsr #19
   1e4a0:	andeq	pc, r1, r8, lsr #19
   1e4a4:	andeq	pc, r1, r8, lsr #19
   1e4a8:	andeq	pc, r1, r8, lsr #19
   1e4ac:	andeq	pc, r1, r0, asr r8	; <UNPREDICTABLE>
   1e4b0:	andeq	pc, r1, r8, lsr #19
   1e4b4:	andeq	pc, r1, r8, lsr #19
   1e4b8:	andeq	pc, r1, r8, lsr #19
   1e4bc:	andeq	pc, r1, r8, lsr #19
   1e4c0:	andeq	pc, r1, r8, lsr #19
   1e4c4:	andeq	pc, r1, r8, lsr #19
   1e4c8:	andeq	pc, r1, r8, lsl #17
   1e4cc:	andeq	pc, r1, r4, lsr #17
   1e4d0:	andeq	pc, r1, r4, lsl #18
   1e4d4:	ldrdeq	pc, [r1], -r8
   1e4d8:	andeq	pc, r1, r8, lsr #19
   1e4dc:	andeq	pc, r1, r0, lsl #12
   1e4e0:	andeq	pc, r1, r0, lsl r9	; <UNPREDICTABLE>
   1e4e4:	andeq	pc, r1, ip, lsl r9	; <UNPREDICTABLE>
   1e4e8:	andeq	pc, r1, r8, lsr #18
   1e4ec:	andeq	pc, r1, r8, lsr #19
   1e4f0:	andeq	pc, r1, r8, lsr #19
   1e4f4:	andeq	pc, r1, r8, lsr #19
   1e4f8:	andeq	pc, r1, r4, lsr r9	; <UNPREDICTABLE>
   1e4fc:	ldrdeq	pc, [r1], -r4
   1e500:	andeq	pc, r1, r8, lsr #19
   1e504:	andeq	pc, r1, r4, ror #14
   1e508:	andeq	pc, r1, r8, lsr #19
   1e50c:	andeq	pc, r1, r4, ror r7	; <UNPREDICTABLE>
   1e510:	muleq	r1, ip, r9
   1e514:			; <UNDEFINED> instruction: 0x0001f1b8
   1e518:	andeq	pc, r1, r4, ror #18
   1e51c:	andeq	pc, r1, r0, lsl r9	; <UNPREDICTABLE>
   1e520:	andeq	pc, r1, r0, ror r9	; <UNPREDICTABLE>
   1e524:	andeq	pc, r1, ip, ror r9	; <UNPREDICTABLE>
   1e528:	andeq	pc, r1, r8, lsl #19
   1e52c:	andeq	lr, r1, r4, asr #30
   1e530:	andeq	pc, r1, r8, lsr #19
   1e534:	andeq	pc, r1, r8, lsr #19
   1e538:	andeq	pc, r1, r8, lsr #19
   1e53c:	andeq	pc, r1, r8, lsr #19
   1e540:	andeq	pc, r1, r8, lsr #19
   1e544:	andeq	pc, r1, r8, lsr #19
   1e548:	muleq	r1, r4, r9
   1e54c:	andeq	lr, r1, r8, ror #29
   1e550:	andeq	pc, r1, r8, asr #17
   1e554:	ldrdeq	pc, [r1], -r4
   1e558:	andeq	pc, r1, r0, ror #17
   1e55c:	andeq	pc, r1, r8, lsr #19
   1e560:	andeq	pc, r1, r0, lsl r9	; <UNPREDICTABLE>
   1e564:	andeq	lr, r1, r8, ror #29
   1e568:	andeq	pc, r1, r8, lsr #19
   1e56c:	andeq	pc, r1, ip, ror #17
   1e570:	strdeq	pc, [r1], -r8
   1e574:			; <UNDEFINED> instruction: 0x0001f8b0
   1e578:			; <UNDEFINED> instruction: 0x0001f8bc
   1e57c:	muleq	r1, r4, sp
   1e580:	andeq	pc, r1, r8, lsr #19
   1e584:	andeq	pc, r1, ip, lsr r7	; <UNPREDICTABLE>
   1e588:	andeq	lr, r1, r4, ror #25
   1e58c:	andeq	pc, r1, r8, lsr #14
   1e590:	andeq	lr, r1, r8, asr #22
   1e594:	andeq	lr, r1, ip, asr #21
   1e598:	andeq	lr, r1, ip, lsl #21
   1e59c:	andeq	pc, r1, r8, lsr #19
   1e5a0:	andeq	pc, r1, ip, asr #18
   1e5a4:	andeq	pc, r1, r8, asr r9	; <UNPREDICTABLE>
   1e5a8:	andeq	pc, r1, r0, asr #18
   1e5ac:	muleq	r1, r4, r7
   1e5b0:	ldrb	r3, [r8, #1]
   1e5b4:	add	r4, r8, #1
   1e5b8:	cmp	r3, #122	; 0x7a
   1e5bc:	ldrls	pc, [pc, r3, lsl #2]
   1e5c0:	b	1e7b8 <__assert_fail@plt+0xca44>
   1e5c4:			; <UNDEFINED> instruction: 0x0001e7b4
   1e5c8:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5cc:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5d0:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5d4:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5d8:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5dc:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5e0:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5e4:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5e8:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5ec:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5f0:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5f4:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5f8:			; <UNDEFINED> instruction: 0x0001e7b8
   1e5fc:			; <UNDEFINED> instruction: 0x0001e7b8
   1e600:			; <UNDEFINED> instruction: 0x0001e7b8
   1e604:			; <UNDEFINED> instruction: 0x0001e7b8
   1e608:			; <UNDEFINED> instruction: 0x0001e7b8
   1e60c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e610:			; <UNDEFINED> instruction: 0x0001e7b8
   1e614:			; <UNDEFINED> instruction: 0x0001e7b8
   1e618:			; <UNDEFINED> instruction: 0x0001e7b8
   1e61c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e620:			; <UNDEFINED> instruction: 0x0001e7b8
   1e624:			; <UNDEFINED> instruction: 0x0001e7b8
   1e628:			; <UNDEFINED> instruction: 0x0001e7b8
   1e62c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e630:			; <UNDEFINED> instruction: 0x0001e7b8
   1e634:			; <UNDEFINED> instruction: 0x0001e7b8
   1e638:			; <UNDEFINED> instruction: 0x0001e7b8
   1e63c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e640:			; <UNDEFINED> instruction: 0x0001e7b8
   1e644:			; <UNDEFINED> instruction: 0x0001e7b8
   1e648:			; <UNDEFINED> instruction: 0x0001e7b8
   1e64c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e650:			; <UNDEFINED> instruction: 0x0001e7b8
   1e654:			; <UNDEFINED> instruction: 0x0001e7b8
   1e658:	andeq	pc, r1, r8, lsl #1
   1e65c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e660:			; <UNDEFINED> instruction: 0x0001e7b8
   1e664:			; <UNDEFINED> instruction: 0x0001e7b8
   1e668:			; <UNDEFINED> instruction: 0x0001e7b8
   1e66c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e670:			; <UNDEFINED> instruction: 0x0001e7b8
   1e674:			; <UNDEFINED> instruction: 0x0001e7b8
   1e678:			; <UNDEFINED> instruction: 0x0001e7b8
   1e67c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e680:			; <UNDEFINED> instruction: 0x0001e7b8
   1e684:			; <UNDEFINED> instruction: 0x0001e7b8
   1e688:			; <UNDEFINED> instruction: 0x0001e7b8
   1e68c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e690:			; <UNDEFINED> instruction: 0x0001e7b8
   1e694:			; <UNDEFINED> instruction: 0x0001e7b8
   1e698:			; <UNDEFINED> instruction: 0x0001e7b8
   1e69c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6a0:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6a4:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6a8:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6ac:	andeq	pc, r1, r8, asr r8	; <UNPREDICTABLE>
   1e6b0:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6b4:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6b8:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6bc:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6c0:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6c4:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6c8:	andeq	pc, r1, ip, ror r8	; <UNPREDICTABLE>
   1e6cc:	andeq	pc, r1, r4, lsl #14
   1e6d0:	andeq	pc, r1, r4, asr #12
   1e6d4:	andeq	pc, r1, r0, ror #13
   1e6d8:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6dc:	andeq	pc, r1, r8, lsl #12
   1e6e0:	andeq	pc, r1, r4, ror r4	; <UNPREDICTABLE>
   1e6e4:	andeq	pc, r1, r8, asr r4	; <UNPREDICTABLE>
   1e6e8:	andeq	pc, r1, r0, asr #8
   1e6ec:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6f0:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6f4:			; <UNDEFINED> instruction: 0x0001e7b8
   1e6f8:	andeq	pc, r1, r4, lsr #8
   1e6fc:	ldrdeq	pc, [r1], -ip
   1e700:			; <UNDEFINED> instruction: 0x0001e7b8
   1e704:	andeq	pc, r1, ip, ror #14
   1e708:			; <UNDEFINED> instruction: 0x0001e7b8
   1e70c:	andeq	pc, r1, r8, ror r7	; <UNPREDICTABLE>
   1e710:			; <UNDEFINED> instruction: 0x0001f2b8
   1e714:			; <UNDEFINED> instruction: 0x0001f1bc
   1e718:	andeq	pc, r1, ip, ror r1	; <UNPREDICTABLE>
   1e71c:	andeq	pc, r1, r4, ror r4	; <UNPREDICTABLE>
   1e720:	andeq	pc, r1, r4, lsr #2
   1e724:	andeq	pc, r1, r4, lsl r1	; <UNPREDICTABLE>
   1e728:	andeq	pc, r1, ip
   1e72c:	andeq	lr, r1, r8, asr #30
   1e730:			; <UNDEFINED> instruction: 0x0001e7b8
   1e734:			; <UNDEFINED> instruction: 0x0001e7b8
   1e738:			; <UNDEFINED> instruction: 0x0001e7b8
   1e73c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e740:			; <UNDEFINED> instruction: 0x0001e7b8
   1e744:			; <UNDEFINED> instruction: 0x0001e7b8
   1e748:	andeq	lr, r1, r0, lsl pc
   1e74c:	strdeq	lr, [r1], -r0
   1e750:	ldrdeq	lr, [r1], -r4
   1e754:			; <UNDEFINED> instruction: 0x0001eeb8
   1e758:	andeq	lr, r1, r4, lsr #29
   1e75c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e760:	andeq	pc, r1, r4, ror r4	; <UNPREDICTABLE>
   1e764:	strdeq	lr, [r1], -r0
   1e768:			; <UNDEFINED> instruction: 0x0001e7b8
   1e76c:	andeq	lr, r1, r8, lsl #29
   1e770:	andeq	lr, r1, r4, ror lr
   1e774:	andeq	lr, r1, ip, asr #28
   1e778:	andeq	lr, r1, ip, lsl #28
   1e77c:	muleq	r1, r8, sp
   1e780:			; <UNDEFINED> instruction: 0x0001e7b8
   1e784:	andeq	pc, r1, r4, asr #14
   1e788:	andeq	lr, r1, ip, ror #25
   1e78c:	andeq	pc, r1, r0, lsr r7	; <UNPREDICTABLE>
   1e790:	andeq	lr, r1, ip, asr #22
   1e794:	ldrdeq	lr, [r1], -r0
   1e798:	muleq	r1, r4, sl
   1e79c:			; <UNDEFINED> instruction: 0x0001e7b8
   1e7a0:	andeq	lr, r1, r0, asr sl
   1e7a4:	andeq	lr, r1, r4, lsr #20
   1e7a8:	andeq	lr, r1, r8, lsr #17
   1e7ac:	muleq	r1, ip, r7
   1e7b0:	mov	r4, r8
   1e7b4:	sub	r4, r4, #1
   1e7b8:	ldr	r3, [sp, #28]
   1e7bc:	sub	sl, r3, fp
   1e7c0:	ldr	r2, [sp, #44]	; 0x2c
   1e7c4:	mvn	r3, r5
   1e7c8:	sub	r7, r4, r9
   1e7cc:	lsr	r3, r3, #31
   1e7d0:	add	r7, r7, #1
   1e7d4:	cmp	r2, #45	; 0x2d
   1e7d8:	moveq	r3, #0
   1e7dc:	cmp	r3, #0
   1e7e0:	moveq	r5, r3
   1e7e4:	moveq	r8, r7
   1e7e8:	beq	1e7f8 <__assert_fail@plt+0xca84>
   1e7ec:	cmp	r7, r5
   1e7f0:	movcs	r8, r7
   1e7f4:	movcc	r8, r5
   1e7f8:	cmp	r8, sl
   1e7fc:	bcs	1e21c <__assert_fail@plt+0xc4a8>
   1e800:	cmp	r6, #0
   1e804:	beq	1e858 <__assert_fail@plt+0xcae4>
   1e808:	cmp	r7, r5
   1e80c:	bcs	1e838 <__assert_fail@plt+0xcac4>
   1e810:	ldr	r3, [sp, #44]	; 0x2c
   1e814:	sub	r2, r5, r7
   1e818:	mov	r0, r6
   1e81c:	cmp	r3, #43	; 0x2b
   1e820:	cmpne	r3, #48	; 0x30
   1e824:	add	r3, r6, r2
   1e828:	moveq	r1, #48	; 0x30
   1e82c:	movne	r1, #32
   1e830:	mov	r6, r3
   1e834:	bl	11be8 <memset@plt>
   1e838:	ldr	r3, [sp, #60]	; 0x3c
   1e83c:	mov	r1, r9
   1e840:	mov	r2, r7
   1e844:	mov	r0, r6
   1e848:	cmp	r3, #0
   1e84c:	bne	1e8a0 <__assert_fail@plt+0xcb2c>
   1e850:	bl	11930 <memcpy@plt>
   1e854:	add	r6, r6, r7
   1e858:	add	fp, fp, r8
   1e85c:	b	1e1dc <__assert_fail@plt+0xc468>
   1e860:	mov	r5, #0
   1e864:	mov	r1, #10
   1e868:	smull	r2, r3, r5, r1
   1e86c:	mvn	r5, #-2147483648	; 0x80000000
   1e870:	cmp	r3, r2, asr #31
   1e874:	bne	1e888 <__assert_fail@plt+0xcb14>
   1e878:	ldrb	r3, [r8]
   1e87c:	sub	r5, r3, #48	; 0x30
   1e880:	adds	r5, r2, r5
   1e884:	mvnvs	r5, #-2147483648	; 0x80000000
   1e888:	ldrb	r3, [r8, #1]!
   1e88c:	sub	r2, r3, #48	; 0x30
   1e890:	cmp	r2, #9
   1e894:	bls	1e868 <__assert_fail@plt+0xcaf4>
   1e898:	mov	r7, r3
   1e89c:	b	1e3a8 <__assert_fail@plt+0xc634>
   1e8a0:	bl	1e048 <__assert_fail@plt+0xc2d4>
   1e8a4:	b	1e854 <__assert_fail@plt+0xcae0>
   1e8a8:	cmp	r7, #69	; 0x45
   1e8ac:	beq	1fc08 <__assert_fail@plt+0xde94>
   1e8b0:	ldr	r2, [sp, #48]	; 0x30
   1e8b4:	mov	r1, #100	; 0x64
   1e8b8:	ldr	r0, [sp, #68]	; 0x44
   1e8bc:	ldr	r2, [r2, #20]
   1e8c0:	smull	ip, r0, r0, r2
   1e8c4:	asr	ip, r2, #31
   1e8c8:	rsb	ip, ip, r0, asr #5
   1e8cc:	mls	ip, r1, ip, r2
   1e8d0:	cmp	ip, #0
   1e8d4:	bge	1e8ec <__assert_fail@plt+0xcb78>
   1e8d8:	movw	r1, #63636	; 0xf894
   1e8dc:	movt	r1, #65535	; 0xffff
   1e8e0:	cmp	r2, r1
   1e8e4:	rsblt	ip, ip, #0
   1e8e8:	addge	ip, ip, #100	; 0x64
   1e8ec:	ldr	r2, [sp, #44]	; 0x2c
   1e8f0:	cmp	r2, #0
   1e8f4:	bne	1f5d4 <__assert_fail@plt+0xd860>
   1e8f8:	ldr	r2, [sp, #1180]	; 0x49c
   1e8fc:	cmp	r2, #43	; 0x2b
   1e900:	beq	1fde4 <__assert_fail@plt+0xe070>
   1e904:	ldr	r1, [sp, #1180]	; 0x49c
   1e908:	mov	r2, #0
   1e90c:	str	r1, [sp, #44]	; 0x2c
   1e910:	mov	r1, #2
   1e914:	str	r2, [sp, #84]	; 0x54
   1e918:	str	r2, [sp, #92]	; 0x5c
   1e91c:	mov	r2, #1
   1e920:	str	r1, [sp, #88]	; 0x58
   1e924:	mov	lr, #0
   1e928:	cmp	r7, #79	; 0x4f
   1e92c:	movne	r2, #0
   1e930:	andeq	r2, r2, #1
   1e934:	cmp	r2, #0
   1e938:	beq	1f078 <__assert_fail@plt+0xd304>
   1e93c:	add	r2, sp, #96	; 0x60
   1e940:	movw	r1, #9504	; 0x2520
   1e944:	mov	r8, #0
   1e948:	strh	r1, [r2]
   1e94c:	add	r1, r2, #3
   1e950:	strb	r7, [sp, #98]	; 0x62
   1e954:	mov	ip, #0
   1e958:	add	r0, sp, #112	; 0x70
   1e95c:	strb	r3, [r1]
   1e960:	ldr	r3, [sp, #48]	; 0x30
   1e964:	strb	ip, [r1, #1]
   1e968:	mov	r1, #1024	; 0x400
   1e96c:	bl	11b04 <strftime@plt>
   1e970:	cmp	r0, #0
   1e974:	beq	1e1dc <__assert_fail@plt+0xc468>
   1e978:	ldr	r2, [sp, #44]	; 0x2c
   1e97c:	mvn	r3, r5
   1e980:	sub	r7, r0, #1
   1e984:	lsr	r3, r3, #31
   1e988:	cmp	r2, #45	; 0x2d
   1e98c:	moveq	r3, #0
   1e990:	cmp	r3, #0
   1e994:	moveq	r5, r3
   1e998:	moveq	r9, r7
   1e99c:	beq	1e9ac <__assert_fail@plt+0xcc38>
   1e9a0:	cmp	r7, r5
   1e9a4:	movcs	r9, r7
   1e9a8:	movcc	r9, r5
   1e9ac:	ldr	r3, [sp, #28]
   1e9b0:	sub	r3, r3, fp
   1e9b4:	cmp	r3, r9
   1e9b8:	bls	1e21c <__assert_fail@plt+0xc4a8>
   1e9bc:	cmp	r6, #0
   1e9c0:	beq	1ea1c <__assert_fail@plt+0xcca8>
   1e9c4:	cmp	r7, r5
   1e9c8:	bcs	1e9f4 <__assert_fail@plt+0xcc80>
   1e9cc:	ldr	r3, [sp, #44]	; 0x2c
   1e9d0:	sub	r2, r5, r7
   1e9d4:	mov	r0, r6
   1e9d8:	cmp	r3, #43	; 0x2b
   1e9dc:	cmpne	r3, #48	; 0x30
   1e9e0:	add	r3, r6, r2
   1e9e4:	moveq	r1, #48	; 0x30
   1e9e8:	movne	r1, #32
   1e9ec:	mov	r6, r3
   1e9f0:	bl	11be8 <memset@plt>
   1e9f4:	cmp	r8, #0
   1e9f8:	bne	1faf4 <__assert_fail@plt+0xdd80>
   1e9fc:	ldr	r3, [sp, #60]	; 0x3c
   1ea00:	add	r1, sp, #113	; 0x71
   1ea04:	mov	r2, r7
   1ea08:	mov	r0, r6
   1ea0c:	cmp	r3, #0
   1ea10:	beq	1faec <__assert_fail@plt+0xdd78>
   1ea14:	bl	1e048 <__assert_fail@plt+0xc2d4>
   1ea18:	add	r6, r6, r7
   1ea1c:	add	fp, fp, r9
   1ea20:	b	1e1dc <__assert_fail@plt+0xc468>
   1ea24:	cmp	r7, #79	; 0x4f
   1ea28:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1ea2c:	mov	r3, #120	; 0x78
   1ea30:	mov	r8, #0
   1ea34:	add	r2, sp, #96	; 0x60
   1ea38:	movw	r1, #9504	; 0x2520
   1ea3c:	cmp	r7, #0
   1ea40:	strh	r1, [r2]
   1ea44:	addeq	r1, r2, #2
   1ea48:	beq	1e954 <__assert_fail@plt+0xcbe0>
   1ea4c:	b	1e94c <__assert_fail@plt+0xcbd8>
   1ea50:	cmp	r7, #69	; 0x45
   1ea54:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1ea58:	mov	r2, #1
   1ea5c:	str	r2, [sp, #88]	; 0x58
   1ea60:	ldr	r2, [sp, #48]	; 0x30
   1ea64:	ldr	r2, [r2, #24]
   1ea68:	mov	ip, r2
   1ea6c:	lsr	r2, r2, #31
   1ea70:	mov	lr, #0
   1ea74:	cmp	ip, lr
   1ea78:	str	r2, [sp, #84]	; 0x54
   1ea7c:	movlt	r2, #0
   1ea80:	movge	r2, #1
   1ea84:	str	lr, [sp, #92]	; 0x5c
   1ea88:	b	1e928 <__assert_fail@plt+0xcbb4>
   1ea8c:	mov	r4, r8
   1ea90:	mov	r7, #0
   1ea94:	ldr	r2, [sp, #48]	; 0x30
   1ea98:	mov	r1, #1
   1ea9c:	ldr	r0, [sp, #64]	; 0x40
   1eaa0:	str	r1, [sp, #88]	; 0x58
   1eaa4:	ldr	r2, [r2, #24]
   1eaa8:	add	r2, r2, #6
   1eaac:	asr	r1, r2, #31
   1eab0:	smull	ip, r0, r0, r2
   1eab4:	add	r0, r0, r2
   1eab8:	rsb	r1, r1, r0, asr #2
   1eabc:	rsb	r1, r1, r1, lsl #3
   1eac0:	sub	r2, r2, r1
   1eac4:	add	r2, r2, #1
   1eac8:	b	1ea68 <__assert_fail@plt+0xccf4>
   1eacc:	mov	r4, r8
   1ead0:	ldr	r3, [sp, #44]	; 0x2c
   1ead4:	cmp	r3, #45	; 0x2d
   1ead8:	ldr	r3, [sp, #28]
   1eadc:	sub	r3, r3, fp
   1eae0:	beq	1fb60 <__assert_fail@plt+0xddec>
   1eae4:	cmp	r5, #0
   1eae8:	blt	1fb60 <__assert_fail@plt+0xddec>
   1eaec:	cmp	r5, #1
   1eaf0:	movcs	r7, r5
   1eaf4:	movcc	r7, #1
   1eaf8:	cmp	r7, r3
   1eafc:	bcs	1e21c <__assert_fail@plt+0xc4a8>
   1eb00:	cmp	r6, #0
   1eb04:	beq	1eb40 <__assert_fail@plt+0xcdcc>
   1eb08:	cmp	r5, #1
   1eb0c:	ble	1eb38 <__assert_fail@plt+0xcdc4>
   1eb10:	ldr	r3, [sp, #44]	; 0x2c
   1eb14:	sub	r2, r5, #1
   1eb18:	mov	r0, r6
   1eb1c:	cmp	r3, #43	; 0x2b
   1eb20:	cmpne	r3, #48	; 0x30
   1eb24:	add	r3, r6, r2
   1eb28:	moveq	r1, #48	; 0x30
   1eb2c:	movne	r1, #32
   1eb30:	mov	r6, r3
   1eb34:	bl	11be8 <memset@plt>
   1eb38:	mov	r3, #9
   1eb3c:	strb	r3, [r6], #1
   1eb40:	add	fp, fp, r7
   1eb44:	b	1e1dc <__assert_fail@plt+0xc468>
   1eb48:	mov	r4, r8
   1eb4c:	ldr	lr, [sp, #48]	; 0x30
   1eb50:	mvn	ip, #0
   1eb54:	add	r1, sp, #112	; 0x70
   1eb58:	ldr	r0, [sp, #1192]	; 0x4a8
   1eb5c:	ldrd	r8, [lr]
   1eb60:	ldrd	r2, [lr, #24]
   1eb64:	strd	r8, [sp, #112]	; 0x70
   1eb68:	ldrd	r8, [lr, #8]
   1eb6c:	strd	r2, [sp, #136]	; 0x88
   1eb70:	ldr	r3, [lr, #40]	; 0x28
   1eb74:	strd	r8, [sp, #120]	; 0x78
   1eb78:	ldrd	r8, [lr, #32]
   1eb7c:	str	ip, [sp, #140]	; 0x8c
   1eb80:	str	r3, [sp, #152]	; 0x98
   1eb84:	ldrd	r2, [lr, #16]
   1eb88:	strd	r2, [sp, #128]	; 0x80
   1eb8c:	strd	r8, [sp, #144]	; 0x90
   1eb90:	bl	22d50 <_obstack_memory_used@@Base+0x2ab8>
   1eb94:	ldr	r3, [sp, #140]	; 0x8c
   1eb98:	cmp	r3, #0
   1eb9c:	blt	1fe90 <__assert_fail@plt+0xe11c>
   1eba0:	ldr	ip, [sp, #72]	; 0x48
   1eba4:	add	r2, sp, #96	; 0x60
   1eba8:	lsr	r3, r0, #31
   1ebac:	mov	r1, r0
   1ebb0:	add	r7, r2, #14
   1ebb4:	str	r3, [sp, #84]	; 0x54
   1ebb8:	smull	r3, lr, ip, r1
   1ebbc:	cmp	r0, #0
   1ebc0:	asr	r8, r1, #31
   1ebc4:	asr	lr, lr, #2
   1ebc8:	sub	r3, lr, r8
   1ebcc:	add	r3, r3, r3, lsl #2
   1ebd0:	sub	r3, r1, r3, lsl #1
   1ebd4:	sub	r1, lr, r8
   1ebd8:	uxtb	r3, r3
   1ebdc:	rsblt	r3, r3, #48	; 0x30
   1ebe0:	addge	r3, r3, #48	; 0x30
   1ebe4:	uxtb	r3, r3
   1ebe8:	cmp	r1, #0
   1ebec:	strb	r3, [r7, #-1]!
   1ebf0:	bne	1ebb8 <__assert_fail@plt+0xce44>
   1ebf4:	mov	r3, #1
   1ebf8:	str	r3, [sp, #88]	; 0x58
   1ebfc:	str	r1, [sp, #92]	; 0x5c
   1ec00:	ldr	r3, [sp, #44]	; 0x2c
   1ec04:	cmp	r3, #0
   1ec08:	beq	1facc <__assert_fail@plt+0xdd58>
   1ec0c:	subs	r3, r3, #45	; 0x2d
   1ec10:	movne	r3, #1
   1ec14:	ldr	r1, [sp, #88]	; 0x58
   1ec18:	cmp	r5, #0
   1ec1c:	add	r2, r2, #14
   1ec20:	sub	r8, r2, r7
   1ec24:	movlt	r5, r1
   1ec28:	ldr	r1, [sp, #84]	; 0x54
   1ec2c:	cmp	r1, #0
   1ec30:	bne	1fa60 <__assert_fail@plt+0xdcec>
   1ec34:	ldr	r1, [sp, #92]	; 0x5c
   1ec38:	cmp	r1, #0
   1ec3c:	bne	1fb14 <__assert_fail@plt+0xdda0>
   1ec40:	sub	r2, r5, r8
   1ec44:	cmp	r2, #0
   1ec48:	movle	r3, #0
   1ec4c:	andgt	r3, r3, #1
   1ec50:	cmp	r3, #0
   1ec54:	bne	1ec6c <__assert_fail@plt+0xcef8>
   1ec58:	ldr	r3, [sp, #44]	; 0x2c
   1ec5c:	cmp	r3, #45	; 0x2d
   1ec60:	moveq	r5, r1
   1ec64:	moveq	r9, r8
   1ec68:	beq	1ec78 <__assert_fail@plt+0xcf04>
   1ec6c:	cmp	r5, r8
   1ec70:	movcs	r9, r5
   1ec74:	movcc	r9, r8
   1ec78:	ldr	r3, [sp, #28]
   1ec7c:	sub	r3, r3, fp
   1ec80:	cmp	r3, r9
   1ec84:	bls	1e21c <__assert_fail@plt+0xc4a8>
   1ec88:	cmp	r6, #0
   1ec8c:	beq	1ea1c <__assert_fail@plt+0xcca8>
   1ec90:	cmp	r5, r8
   1ec94:	bls	1ecc0 <__assert_fail@plt+0xcf4c>
   1ec98:	ldr	r3, [sp, #44]	; 0x2c
   1ec9c:	sub	r2, r5, r8
   1eca0:	mov	r0, r6
   1eca4:	cmp	r3, #43	; 0x2b
   1eca8:	cmpne	r3, #48	; 0x30
   1ecac:	add	r3, r6, r2
   1ecb0:	moveq	r1, #48	; 0x30
   1ecb4:	movne	r1, #32
   1ecb8:	mov	r6, r3
   1ecbc:	bl	11be8 <memset@plt>
   1ecc0:	ldr	r3, [sp, #60]	; 0x3c
   1ecc4:	mov	r1, r7
   1ecc8:	mov	r2, r8
   1eccc:	mov	r0, r6
   1ecd0:	cmp	r3, #0
   1ecd4:	beq	1fae4 <__assert_fail@plt+0xdd70>
   1ecd8:	bl	1e048 <__assert_fail@plt+0xc2d4>
   1ecdc:	add	r6, r6, r8
   1ece0:	b	1ea1c <__assert_fail@plt+0xcca8>
   1ece4:	mov	r4, r8
   1ece8:	mov	r7, #0
   1ecec:	ldr	r3, [sp, #48]	; 0x30
   1ecf0:	cmp	r7, #79	; 0x4f
   1ecf4:	ldr	r3, [r3, #16]
   1ecf8:	moveq	r3, #113	; 0x71
   1ecfc:	beq	1e93c <__assert_fail@plt+0xcbc8>
   1ed00:	mov	ip, #11
   1ed04:	mov	lr, #0
   1ed08:	mul	ip, ip, r3
   1ed0c:	mov	r3, #1
   1ed10:	str	lr, [sp, #84]	; 0x54
   1ed14:	str	r3, [sp, #88]	; 0x58
   1ed18:	asr	ip, ip, #5
   1ed1c:	str	lr, [sp, #92]	; 0x5c
   1ed20:	add	ip, ip, r3
   1ed24:	add	r2, sp, #96	; 0x60
   1ed28:	movw	r9, #52429	; 0xcccd
   1ed2c:	movt	r9, #52428	; 0xcccc
   1ed30:	add	r0, r2, #14
   1ed34:	mov	sl, #58	; 0x3a
   1ed38:	tst	lr, #1
   1ed3c:	umull	r3, r1, r9, ip
   1ed40:	sub	r7, r0, #1
   1ed44:	sub	r3, r0, #2
   1ed48:	beq	1ed58 <__assert_fail@plt+0xcfe4>
   1ed4c:	strb	sl, [r0, #-1]
   1ed50:	mov	r0, r7
   1ed54:	mov	r7, r3
   1ed58:	lsr	r1, r1, #3
   1ed5c:	asrs	lr, lr, #1
   1ed60:	add	r3, r1, r1, lsl #2
   1ed64:	movne	r8, #1
   1ed68:	moveq	r8, #0
   1ed6c:	sub	r3, ip, r3, lsl #1
   1ed70:	cmp	ip, #9
   1ed74:	orrhi	r8, r8, #1
   1ed78:	mov	ip, r1
   1ed7c:	cmp	r8, #0
   1ed80:	add	r3, r3, #48	; 0x30
   1ed84:	strb	r3, [r0, #-1]
   1ed88:	mov	r0, r7
   1ed8c:	bne	1ed38 <__assert_fail@plt+0xcfc4>
   1ed90:	b	1ec00 <__assert_fail@plt+0xce8c>
   1ed94:	mov	r4, r8
   1ed98:	ldr	r3, [sp, #44]	; 0x2c
   1ed9c:	cmp	r3, #45	; 0x2d
   1eda0:	ldr	r3, [sp, #28]
   1eda4:	sub	r3, r3, fp
   1eda8:	beq	1fb48 <__assert_fail@plt+0xddd4>
   1edac:	cmp	r5, #0
   1edb0:	blt	1fb48 <__assert_fail@plt+0xddd4>
   1edb4:	cmp	r5, #1
   1edb8:	movcs	r7, r5
   1edbc:	movcc	r7, #1
   1edc0:	cmp	r7, r3
   1edc4:	bcs	1e21c <__assert_fail@plt+0xc4a8>
   1edc8:	cmp	r6, #0
   1edcc:	beq	1eb40 <__assert_fail@plt+0xcdcc>
   1edd0:	cmp	r5, #1
   1edd4:	ble	1ee00 <__assert_fail@plt+0xd08c>
   1edd8:	ldr	r3, [sp, #44]	; 0x2c
   1eddc:	sub	r2, r5, #1
   1ede0:	mov	r0, r6
   1ede4:	cmp	r3, #43	; 0x2b
   1ede8:	cmpne	r3, #48	; 0x30
   1edec:	add	r3, r6, r2
   1edf0:	moveq	r1, #48	; 0x30
   1edf4:	movne	r1, #32
   1edf8:	mov	r6, r3
   1edfc:	bl	11be8 <memset@plt>
   1ee00:	mov	r3, #10
   1ee04:	strb	r3, [r6], #1
   1ee08:	b	1eb40 <__assert_fail@plt+0xcdcc>
   1ee0c:	cmp	r7, #69	; 0x45
   1ee10:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1ee14:	ldr	r2, [sp, #48]	; 0x30
   1ee18:	mov	lr, #0
   1ee1c:	ldr	ip, [r2, #16]
   1ee20:	mov	r2, #2
   1ee24:	cmn	ip, #1
   1ee28:	str	r2, [sp, #88]	; 0x58
   1ee2c:	add	ip, ip, #1
   1ee30:	movlt	r2, #1
   1ee34:	movge	r2, lr
   1ee38:	str	r2, [sp, #84]	; 0x54
   1ee3c:	movge	r2, #1
   1ee40:	movlt	r2, lr
   1ee44:	str	lr, [sp, #92]	; 0x5c
   1ee48:	b	1e928 <__assert_fail@plt+0xcbb4>
   1ee4c:	cmp	r7, #69	; 0x45
   1ee50:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1ee54:	ldr	r2, [sp, #32]
   1ee58:	ldr	r1, [sp, #44]	; 0x2c
   1ee5c:	cmp	r1, #0
   1ee60:	mov	r1, #2
   1ee64:	str	r1, [sp, #88]	; 0x58
   1ee68:	moveq	r1, #95	; 0x5f
   1ee6c:	streq	r1, [sp, #44]	; 0x2c
   1ee70:	b	1ea68 <__assert_fail@plt+0xccf4>
   1ee74:	cmp	r7, #69	; 0x45
   1ee78:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1ee7c:	ldr	r2, [sp, #48]	; 0x30
   1ee80:	ldr	r2, [r2, #8]
   1ee84:	b	1ee58 <__assert_fail@plt+0xd0e4>
   1ee88:	cmp	r7, #69	; 0x45
   1ee8c:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1ee90:	ldr	r2, [sp, #48]	; 0x30
   1ee94:	mov	lr, #0
   1ee98:	ldr	ip, [r2, #28]
   1ee9c:	mov	r2, #3
   1eea0:	b	1ee24 <__assert_fail@plt+0xd0b0>
   1eea4:	cmp	r7, #69	; 0x45
   1eea8:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1eeac:	ldr	r2, [sp, #48]	; 0x30
   1eeb0:	ldr	r2, [r2, #12]
   1eeb4:	b	1ee58 <__assert_fail@plt+0xd0e4>
   1eeb8:	cmp	r7, #69	; 0x45
   1eebc:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1eec0:	mov	r2, #2
   1eec4:	str	r2, [sp, #88]	; 0x58
   1eec8:	ldr	r2, [sp, #48]	; 0x30
   1eecc:	ldr	r2, [r2, #12]
   1eed0:	b	1ea68 <__assert_fail@plt+0xccf4>
   1eed4:	cmp	r7, #79	; 0x4f
   1eed8:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1eedc:	mov	r3, #99	; 0x63
   1eee0:	mov	r8, #0
   1eee4:	b	1ea34 <__assert_fail@plt+0xccc0>
   1eee8:	mov	r4, r8
   1eeec:	mov	r7, #0
   1eef0:	ldr	r2, [sp, #60]	; 0x3c
   1eef4:	cmp	sl, #0
   1eef8:	movne	r2, sl
   1eefc:	cmp	r7, #69	; 0x45
   1ef00:	str	r2, [sp, #60]	; 0x3c
   1ef04:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1ef08:	mov	r8, #0
   1ef0c:	b	1ea34 <__assert_fail@plt+0xccc0>
   1ef10:	cmp	r7, #0
   1ef14:	bne	1e7b8 <__assert_fail@plt+0xca44>
   1ef18:	ldr	r2, [sp, #60]	; 0x3c
   1ef1c:	cmp	sl, #0
   1ef20:	mov	r3, #97	; 0x61
   1ef24:	movne	r2, sl
   1ef28:	str	r2, [sp, #60]	; 0x3c
   1ef2c:	add	r2, sp, #96	; 0x60
   1ef30:	movw	r0, #9504	; 0x2520
   1ef34:	mov	r1, r2
   1ef38:	mov	r8, #0
   1ef3c:	strh	r0, [r1], #2
   1ef40:	b	1e954 <__assert_fail@plt+0xcbe0>
   1ef44:	mov	r4, r8
   1ef48:	cmp	sl, #0
   1ef4c:	ldr	r0, [sp, #56]	; 0x38
   1ef50:	ldr	r3, [sp, #60]	; 0x3c
   1ef54:	movne	r3, #0
   1ef58:	str	r3, [sp, #60]	; 0x3c
   1ef5c:	bl	11b94 <strlen@plt>
   1ef60:	ldr	r3, [sp, #44]	; 0x2c
   1ef64:	mov	r7, r0
   1ef68:	subs	r3, r3, #45	; 0x2d
   1ef6c:	movne	r3, #1
   1ef70:	cmp	r5, #0
   1ef74:	movlt	r3, #0
   1ef78:	cmp	r3, #0
   1ef7c:	moveq	r5, r0
   1ef80:	beq	1ef94 <__assert_fail@plt+0xd220>
   1ef84:	mov	r3, r5
   1ef88:	cmp	r0, r5
   1ef8c:	movcs	r5, r0
   1ef90:	movcc	r5, r3
   1ef94:	ldr	r2, [sp, #28]
   1ef98:	sub	r2, r2, fp
   1ef9c:	cmp	r2, r5
   1efa0:	bls	1e21c <__assert_fail@plt+0xc4a8>
   1efa4:	cmp	r6, #0
   1efa8:	beq	1f004 <__assert_fail@plt+0xd290>
   1efac:	cmp	r7, r3
   1efb0:	bcs	1efdc <__assert_fail@plt+0xd268>
   1efb4:	sub	r2, r3, r7
   1efb8:	ldr	r3, [sp, #44]	; 0x2c
   1efbc:	mov	r0, r6
   1efc0:	cmp	r3, #43	; 0x2b
   1efc4:	cmpne	r3, #48	; 0x30
   1efc8:	add	r3, r6, r2
   1efcc:	moveq	r1, #48	; 0x30
   1efd0:	movne	r1, #32
   1efd4:	mov	r6, r3
   1efd8:	bl	11be8 <memset@plt>
   1efdc:	cmp	sl, #0
   1efe0:	bne	1fda8 <__assert_fail@plt+0xe034>
   1efe4:	mov	r2, r7
   1efe8:	mov	r0, r6
   1efec:	ldr	r1, [sp, #56]	; 0x38
   1eff0:	ldr	r3, [sp, #60]	; 0x3c
   1eff4:	cmp	r3, #0
   1eff8:	beq	1fda0 <__assert_fail@plt+0xe02c>
   1effc:	bl	1e048 <__assert_fail@plt+0xc2d4>
   1f000:	add	r6, r6, r7
   1f004:	add	fp, fp, r5
   1f008:	b	1e1dc <__assert_fail@plt+0xc468>
   1f00c:	cmp	r7, #69	; 0x45
   1f010:	beq	1fd98 <__assert_fail@plt+0xe024>
   1f014:	cmp	r7, #79	; 0x4f
   1f018:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1f01c:	ldr	r1, [sp, #44]	; 0x2c
   1f020:	ldr	r2, [sp, #48]	; 0x30
   1f024:	ldr	ip, [r2, #20]
   1f028:	movw	r2, #63636	; 0xf894
   1f02c:	movt	r2, #65535	; 0xffff
   1f030:	cmp	ip, r2
   1f034:	add	ip, ip, #1888	; 0x760
   1f038:	movlt	r2, #1
   1f03c:	movge	r2, #0
   1f040:	add	ip, ip, #12
   1f044:	str	r2, [sp, #84]	; 0x54
   1f048:	movge	r2, #1
   1f04c:	movlt	r2, #0
   1f050:	cmp	r1, #0
   1f054:	bne	1fb8c <__assert_fail@plt+0xde18>
   1f058:	ldr	r1, [sp, #1180]	; 0x49c
   1f05c:	cmp	r1, #43	; 0x2b
   1f060:	beq	1fba4 <__assert_fail@plt+0xde30>
   1f064:	ldr	lr, [sp, #44]	; 0x2c
   1f068:	mov	r3, #4
   1f06c:	str	r1, [sp, #44]	; 0x2c
   1f070:	str	r3, [sp, #88]	; 0x58
   1f074:	str	lr, [sp, #92]	; 0x5c
   1f078:	ldr	r3, [sp, #84]	; 0x54
   1f07c:	cmp	r3, #0
   1f080:	rsbne	ip, ip, #0
   1f084:	b	1ed24 <__assert_fail@plt+0xcfb0>
   1f088:	mov	r8, r4
   1f08c:	ldr	r3, [sp, #28]
   1f090:	sub	r4, r8, #1
   1f094:	cmp	r4, r9
   1f098:	sub	sl, r3, fp
   1f09c:	bne	1e7c0 <__assert_fail@plt+0xca4c>
   1f0a0:	ldr	r3, [sp, #44]	; 0x2c
   1f0a4:	cmp	r3, #45	; 0x2d
   1f0a8:	beq	1fd00 <__assert_fail@plt+0xdf8c>
   1f0ac:	cmp	r5, #0
   1f0b0:	blt	1fd00 <__assert_fail@plt+0xdf8c>
   1f0b4:	cmp	r5, #1
   1f0b8:	movcs	r4, r5
   1f0bc:	movcc	r4, #1
   1f0c0:	cmp	r4, sl
   1f0c4:	bcs	1e21c <__assert_fail@plt+0xc4a8>
   1f0c8:	cmp	r6, #0
   1f0cc:	beq	1f108 <__assert_fail@plt+0xd394>
   1f0d0:	cmp	r5, #1
   1f0d4:	ble	1f100 <__assert_fail@plt+0xd38c>
   1f0d8:	ldr	r3, [sp, #44]	; 0x2c
   1f0dc:	sub	r2, r5, #1
   1f0e0:	mov	r0, r6
   1f0e4:	cmp	r3, #43	; 0x2b
   1f0e8:	cmpne	r3, #48	; 0x30
   1f0ec:	add	r3, r6, r2
   1f0f0:	moveq	r1, #48	; 0x30
   1f0f4:	movne	r1, #32
   1f0f8:	mov	r6, r3
   1f0fc:	bl	11be8 <memset@plt>
   1f100:	ldrb	r3, [r8]
   1f104:	strb	r3, [r6], #1
   1f108:	add	fp, fp, r4
   1f10c:	mov	r4, r8
   1f110:	b	1e1dc <__assert_fail@plt+0xc468>
   1f114:	cmp	r7, #79	; 0x4f
   1f118:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1f11c:	mov	r3, #88	; 0x58
   1f120:	b	1ef08 <__assert_fail@plt+0xd194>
   1f124:	cmp	r7, #69	; 0x45
   1f128:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1f12c:	ldr	r1, [sp, #48]	; 0x30
   1f130:	mov	r0, #2
   1f134:	ldr	lr, [sp, #64]	; 0x40
   1f138:	str	r0, [sp, #88]	; 0x58
   1f13c:	ldr	r2, [r1, #24]
   1f140:	ldr	r1, [r1, #28]
   1f144:	add	r2, r2, #6
   1f148:	asr	r0, r2, #31
   1f14c:	smull	r8, ip, lr, r2
   1f150:	add	ip, ip, r2
   1f154:	rsb	r0, r0, ip, asr #2
   1f158:	rsb	r0, r0, r0, lsl #3
   1f15c:	sub	r2, r2, r0
   1f160:	sub	r1, r1, r2
   1f164:	add	r1, r1, #7
   1f168:	asr	r2, r1, #31
   1f16c:	smull	ip, r0, lr, r1
   1f170:	add	r1, r0, r1
   1f174:	rsb	r2, r2, r1, asr #2
   1f178:	b	1ea68 <__assert_fail@plt+0xccf4>
   1f17c:	cmp	r7, #69	; 0x45
   1f180:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1f184:	ldr	r1, [sp, #48]	; 0x30
   1f188:	mov	r0, #2
   1f18c:	str	r0, [sp, #88]	; 0x58
   1f190:	ldr	r2, [r1, #24]
   1f194:	ldr	r1, [r1, #28]
   1f198:	sub	r1, r1, r2
   1f19c:	ldr	r2, [sp, #64]	; 0x40
   1f1a0:	add	r1, r1, #7
   1f1a4:	smull	r2, r0, r2, r1
   1f1a8:	asr	r2, r1, #31
   1f1ac:	add	r1, r0, r1
   1f1b0:	rsb	r2, r2, r1, asr #2
   1f1b4:	b	1ea68 <__assert_fail@plt+0xccf4>
   1f1b8:	mov	r4, r8
   1f1bc:	ldr	r3, [sp, #28]
   1f1c0:	movw	r9, #37384	; 0x9208
   1f1c4:	movt	r9, #2
   1f1c8:	sub	sl, r3, fp
   1f1cc:	mvn	r3, #0
   1f1d0:	str	r3, [sp, #84]	; 0x54
   1f1d4:	ldr	r7, [sp, #44]	; 0x2c
   1f1d8:	mov	r2, r9
   1f1dc:	mov	r0, #0
   1f1e0:	ldr	r3, [sp, #48]	; 0x30
   1f1e4:	ldr	r1, [sp, #60]	; 0x3c
   1f1e8:	ldr	ip, [sp, #84]	; 0x54
   1f1ec:	stm	sp, {r1, r7, ip}
   1f1f0:	mvn	r1, #0
   1f1f4:	ldr	ip, [sp, #1188]	; 0x4a4
   1f1f8:	str	ip, [sp, #12]
   1f1fc:	ldr	ip, [sp, #1192]	; 0x4a8
   1f200:	str	ip, [sp, #16]
   1f204:	ldr	ip, [sp, #1196]	; 0x4ac
   1f208:	str	ip, [sp, #20]
   1f20c:	bl	1e09c <__assert_fail@plt+0xc328>
   1f210:	cmp	r7, #45	; 0x2d
   1f214:	mov	r8, r0
   1f218:	beq	1fb08 <__assert_fail@plt+0xdd94>
   1f21c:	cmp	r5, #0
   1f220:	blt	1fb08 <__assert_fail@plt+0xdd94>
   1f224:	cmp	r0, r5
   1f228:	movcs	r7, r0
   1f22c:	movcc	r7, r5
   1f230:	cmp	r7, sl
   1f234:	bcs	1e21c <__assert_fail@plt+0xc4a8>
   1f238:	cmp	r6, #0
   1f23c:	beq	1eb40 <__assert_fail@plt+0xcdcc>
   1f240:	cmp	r5, r8
   1f244:	bls	1f270 <__assert_fail@plt+0xd4fc>
   1f248:	ldr	r3, [sp, #44]	; 0x2c
   1f24c:	sub	r2, r5, r8
   1f250:	mov	r0, r6
   1f254:	cmp	r3, #43	; 0x2b
   1f258:	cmpne	r3, #48	; 0x30
   1f25c:	add	r3, r6, r2
   1f260:	moveq	r1, #48	; 0x30
   1f264:	movne	r1, #32
   1f268:	mov	r6, r3
   1f26c:	bl	11be8 <memset@plt>
   1f270:	ldr	r0, [sp, #44]	; 0x2c
   1f274:	mov	r2, r9
   1f278:	mov	r1, sl
   1f27c:	ldr	r3, [sp, #60]	; 0x3c
   1f280:	ldr	ip, [sp, #84]	; 0x54
   1f284:	str	r3, [sp]
   1f288:	ldr	r3, [sp, #48]	; 0x30
   1f28c:	stmib	sp, {r0, ip}
   1f290:	mov	r0, r6
   1f294:	add	r6, r6, r8
   1f298:	ldr	ip, [sp, #1188]	; 0x4a4
   1f29c:	str	ip, [sp, #12]
   1f2a0:	ldr	ip, [sp, #1192]	; 0x4a8
   1f2a4:	str	ip, [sp, #16]
   1f2a8:	ldr	ip, [sp, #1196]	; 0x4ac
   1f2ac:	str	ip, [sp, #20]
   1f2b0:	bl	1e09c <__assert_fail@plt+0xc328>
   1f2b4:	b	1eb40 <__assert_fail@plt+0xcdcc>
   1f2b8:	cmp	r7, #69	; 0x45
   1f2bc:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1f2c0:	mov	r2, #2
   1f2c4:	str	r2, [sp, #88]	; 0x58
   1f2c8:	ldr	r2, [sp, #48]	; 0x30
   1f2cc:	ldr	r2, [r2]
   1f2d0:	b	1ea68 <__assert_fail@plt+0xccf4>
   1f2d4:	mov	r4, r8
   1f2d8:	mov	r7, #0
   1f2dc:	ldr	r3, [sp, #28]
   1f2e0:	cmp	r7, #69	; 0x45
   1f2e4:	sub	sl, r3, fp
   1f2e8:	beq	1e7c0 <__assert_fail@plt+0xca4c>
   1f2ec:	cmp	r5, #0
   1f2f0:	mov	r7, #9
   1f2f4:	ldr	r0, [sp, #72]	; 0x48
   1f2f8:	movle	r5, #9
   1f2fc:	ldr	r3, [sp, #1196]	; 0x4ac
   1f300:	b	1f310 <__assert_fail@plt+0xd59c>
   1f304:	smull	r2, r3, r0, r3
   1f308:	sub	r7, r7, #1
   1f30c:	rsb	r3, r1, r3, asr #2
   1f310:	cmp	r7, r5
   1f314:	asr	r1, r3, #31
   1f318:	bgt	1f304 <__assert_fail@plt+0xd590>
   1f31c:	cmp	r7, #1
   1f320:	smull	r1, r2, r0, r3
   1f324:	asr	r1, r3, #31
   1f328:	ble	1fbcc <__assert_fail@plt+0xde58>
   1f32c:	rsb	r2, r1, r2, asr #2
   1f330:	add	r2, r2, r2, lsl #2
   1f334:	cmp	r3, r2, lsl #1
   1f338:	beq	1f304 <__assert_fail@plt+0xd590>
   1f33c:	ldr	lr, [sp, #72]	; 0x48
   1f340:	add	r2, sp, #96	; 0x60
   1f344:	sub	ip, r7, #1
   1f348:	add	ip, r2, ip
   1f34c:	rsb	r2, r2, #1
   1f350:	smull	r8, r0, lr, r3
   1f354:	rsb	r1, r1, r0, asr #2
   1f358:	add	r0, r1, r1, lsl #2
   1f35c:	sub	r0, r3, r0, lsl #1
   1f360:	mov	r3, r1
   1f364:	asr	r1, r1, #31
   1f368:	add	r0, r0, #48	; 0x30
   1f36c:	strb	r0, [ip], #-1
   1f370:	add	r0, r2, ip
   1f374:	cmp	r0, #0
   1f378:	bgt	1f350 <__assert_fail@plt+0xd5dc>
   1f37c:	ldr	r3, [sp, #44]	; 0x2c
   1f380:	cmp	r3, #0
   1f384:	bne	1fcc8 <__assert_fail@plt+0xdf54>
   1f388:	cmp	sl, r7
   1f38c:	bls	1e21c <__assert_fail@plt+0xc4a8>
   1f390:	ldr	r3, [sp, #28]
   1f394:	cmp	r6, #0
   1f398:	add	fp, fp, r7
   1f39c:	sub	r8, r3, fp
   1f3a0:	movne	r3, #48	; 0x30
   1f3a4:	strne	r3, [sp, #44]	; 0x2c
   1f3a8:	beq	1fe0c <__assert_fail@plt+0xe098>
   1f3ac:	ldr	r3, [sp, #60]	; 0x3c
   1f3b0:	mov	r2, r7
   1f3b4:	add	r1, sp, #96	; 0x60
   1f3b8:	mov	r0, r6
   1f3bc:	cmp	r3, #0
   1f3c0:	beq	1fdbc <__assert_fail@plt+0xe048>
   1f3c4:	bl	1e048 <__assert_fail@plt+0xc2d4>
   1f3c8:	ldr	r3, [sp, #44]	; 0x2c
   1f3cc:	add	r6, r6, r7
   1f3d0:	cmp	r3, #45	; 0x2d
   1f3d4:	beq	1fcf0 <__assert_fail@plt+0xdf7c>
   1f3d8:	sub	r2, r5, r7
   1f3dc:	cmp	r2, r8
   1f3e0:	bcs	1e21c <__assert_fail@plt+0xc4a8>
   1f3e4:	cmp	r6, #0
   1f3e8:	addeq	fp, fp, r2
   1f3ec:	beq	1e1dc <__assert_fail@plt+0xc468>
   1f3f0:	cmp	r2, #0
   1f3f4:	beq	1e1dc <__assert_fail@plt+0xc468>
   1f3f8:	ldr	r3, [sp, #44]	; 0x2c
   1f3fc:	mov	r0, r6
   1f400:	add	fp, fp, r2
   1f404:	cmp	r3, #43	; 0x2b
   1f408:	cmpne	r3, #48	; 0x30
   1f40c:	add	r3, r6, r2
   1f410:	moveq	r1, #48	; 0x30
   1f414:	movne	r1, #32
   1f418:	mov	r6, r3
   1f41c:	bl	11be8 <memset@plt>
   1f420:	b	1e1dc <__assert_fail@plt+0xc468>
   1f424:	cmp	r7, #69	; 0x45
   1f428:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1f42c:	mov	r2, #2
   1f430:	str	r2, [sp, #88]	; 0x58
   1f434:	ldr	r2, [sp, #48]	; 0x30
   1f438:	ldr	r2, [r2, #4]
   1f43c:	b	1ea68 <__assert_fail@plt+0xccf4>
   1f440:	cmp	r7, #69	; 0x45
   1f444:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1f448:	mov	r1, #2
   1f44c:	ldr	r2, [sp, #32]
   1f450:	str	r1, [sp, #88]	; 0x58
   1f454:	b	1ea68 <__assert_fail@plt+0xccf4>
   1f458:	cmp	r7, #69	; 0x45
   1f45c:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1f460:	mov	r2, #2
   1f464:	str	r2, [sp, #88]	; 0x58
   1f468:	ldr	r2, [sp, #48]	; 0x30
   1f46c:	ldr	r2, [r2, #8]
   1f470:	b	1ea68 <__assert_fail@plt+0xccf4>
   1f474:	cmp	r7, #69	; 0x45
   1f478:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1f47c:	ldr	r2, [sp, #48]	; 0x30
   1f480:	ldr	r8, [r2, #20]
   1f484:	ldr	r1, [r2, #24]
   1f488:	ldr	r9, [r2, #28]
   1f48c:	cmp	r8, #0
   1f490:	ldr	r2, [sp, #64]	; 0x40
   1f494:	str	r1, [sp, #84]	; 0x54
   1f498:	sub	r1, r9, r1
   1f49c:	add	r1, r1, #380	; 0x17c
   1f4a0:	add	r1, r1, #2
   1f4a4:	asr	r0, r1, #31
   1f4a8:	smull	r2, ip, r2, r1
   1f4ac:	movlt	r2, #300	; 0x12c
   1f4b0:	mvnge	r2, #99	; 0x63
   1f4b4:	add	ip, ip, r1
   1f4b8:	add	r2, r8, r2
   1f4bc:	rsb	r0, r0, ip, asr #2
   1f4c0:	rsb	r0, r0, r0, lsl #3
   1f4c4:	sub	r0, r1, r0
   1f4c8:	sub	sl, r9, r0
   1f4cc:	adds	sl, sl, #3
   1f4d0:	bmi	1fc10 <__assert_fail@plt+0xde9c>
   1f4d4:	tst	r2, #3
   1f4d8:	movwne	r2, #365	; 0x16d
   1f4dc:	bne	1f524 <__assert_fail@plt+0xd7b0>
   1f4e0:	ldr	r1, [sp, #68]	; 0x44
   1f4e4:	mov	ip, #100	; 0x64
   1f4e8:	smull	r1, r0, r1, r2
   1f4ec:	asr	r1, r2, #31
   1f4f0:	rsb	r1, r1, r0, asr #5
   1f4f4:	mls	r1, ip, r1, r2
   1f4f8:	cmp	r1, #0
   1f4fc:	movwne	r2, #366	; 0x16e
   1f500:	bne	1f524 <__assert_fail@plt+0xd7b0>
   1f504:	mov	ip, #400	; 0x190
   1f508:	movw	r1, #365	; 0x16d
   1f50c:	movw	lr, #366	; 0x16e
   1f510:	sdiv	r0, r2, ip
   1f514:	mls	r2, ip, r0, r2
   1f518:	cmp	r2, #0
   1f51c:	movne	r2, r1
   1f520:	moveq	r2, lr
   1f524:	sub	r9, r9, r2
   1f528:	ldr	r0, [sp, #64]	; 0x40
   1f52c:	ldr	r2, [sp, #84]	; 0x54
   1f530:	sub	r2, r9, r2
   1f534:	add	r2, r2, #380	; 0x17c
   1f538:	add	r2, r2, #2
   1f53c:	asr	r1, r2, #31
   1f540:	smull	ip, r0, r0, r2
   1f544:	add	r0, r0, r2
   1f548:	rsb	r1, r1, r0, asr #2
   1f54c:	rsb	r1, r1, r1, lsl #3
   1f550:	sub	r2, r2, r1
   1f554:	sub	r2, r9, r2
   1f558:	add	r2, r2, #3
   1f55c:	cmp	r2, #0
   1f560:	movge	sl, r2
   1f564:	movge	lr, #1
   1f568:	movlt	lr, #0
   1f56c:	cmp	r3, #71	; 0x47
   1f570:	beq	1fd3c <__assert_fail@plt+0xdfc8>
   1f574:	cmp	r3, #103	; 0x67
   1f578:	bne	1fd18 <__assert_fail@plt+0xdfa4>
   1f57c:	ldr	ip, [sp, #68]	; 0x44
   1f580:	mov	r0, #100	; 0x64
   1f584:	smull	r2, r1, ip, r8
   1f588:	asr	r2, r8, #31
   1f58c:	rsb	r2, r2, r1, asr #5
   1f590:	mls	r2, r0, r2, r8
   1f594:	add	r2, r2, lr
   1f598:	asr	r1, r2, #31
   1f59c:	smull	r9, ip, ip, r2
   1f5a0:	rsb	ip, r1, ip, asr #5
   1f5a4:	mls	ip, r0, ip, r2
   1f5a8:	cmp	ip, #0
   1f5ac:	bge	1e8ec <__assert_fail@plt+0xcb78>
   1f5b0:	movw	r2, #63636	; 0xf894
   1f5b4:	movt	r2, #65535	; 0xffff
   1f5b8:	sub	r2, r2, lr
   1f5bc:	cmp	r2, r8
   1f5c0:	ldr	r2, [sp, #44]	; 0x2c
   1f5c4:	ble	1fe80 <__assert_fail@plt+0xe10c>
   1f5c8:	cmp	r2, #0
   1f5cc:	rsb	ip, ip, #0
   1f5d0:	beq	1e8f8 <__assert_fail@plt+0xcb84>
   1f5d4:	ldr	r2, [sp, #44]	; 0x2c
   1f5d8:	cmp	r2, #43	; 0x2b
   1f5dc:	beq	1fbd8 <__assert_fail@plt+0xde64>
   1f5e0:	mov	r2, #0
   1f5e4:	mov	r1, r2
   1f5e8:	mov	r2, #1
   1f5ec:	str	r1, [sp, #84]	; 0x54
   1f5f0:	str	r1, [sp, #92]	; 0x5c
   1f5f4:	mov	r1, #2
   1f5f8:	str	r1, [sp, #88]	; 0x58
   1f5fc:	b	1e924 <__assert_fail@plt+0xcbb0>
   1f600:	mov	r4, r8
   1f604:	mov	r7, #0
   1f608:	ldr	r3, [sp, #28]
   1f60c:	cmp	r7, #0
   1f610:	sub	sl, r3, fp
   1f614:	bne	1e7c0 <__assert_fail@plt+0xca4c>
   1f618:	ldr	r3, [sp, #44]	; 0x2c
   1f61c:	clz	r3, r3
   1f620:	lsr	r3, r3, #5
   1f624:	ands	r3, r3, r5, lsr #31
   1f628:	bne	1fe24 <__assert_fail@plt+0xe0b0>
   1f62c:	sub	r3, r5, #6
   1f630:	movw	r9, #37396	; 0x9214
   1f634:	movt	r9, #2
   1f638:	bic	r3, r3, r3, asr #31
   1f63c:	str	r3, [sp, #84]	; 0x54
   1f640:	b	1f1d4 <__assert_fail@plt+0xd460>
   1f644:	cmp	r7, #69	; 0x45
   1f648:	beq	1fcc0 <__assert_fail@plt+0xdf4c>
   1f64c:	ldr	r2, [sp, #48]	; 0x30
   1f650:	movw	ip, #1899	; 0x76b
   1f654:	ldr	r0, [r2, #20]
   1f658:	movw	r2, #63636	; 0xf894
   1f65c:	movt	r2, #65535	; 0xffff
   1f660:	add	r1, r0, #1888	; 0x760
   1f664:	cmp	r0, r2
   1f668:	add	r1, r1, #12
   1f66c:	movge	lr, #0
   1f670:	movlt	lr, #1
   1f674:	cmp	r1, ip
   1f678:	mvnls	r1, #98	; 0x62
   1f67c:	movhi	r1, #0
   1f680:	add	r1, r1, r0
   1f684:	cmp	r0, r2
   1f688:	ldr	r0, [sp, #44]	; 0x2c
   1f68c:	movlt	r2, #0
   1f690:	movge	r2, #1
   1f694:	asr	ip, r1, #31
   1f698:	str	lr, [sp, #84]	; 0x54
   1f69c:	cmp	r0, #0
   1f6a0:	ldr	r0, [sp, #68]	; 0x44
   1f6a4:	smull	r0, r1, r0, r1
   1f6a8:	rsb	r1, ip, r1, asr #5
   1f6ac:	add	ip, r1, #19
   1f6b0:	bne	1fca4 <__assert_fail@plt+0xdf30>
   1f6b4:	ldr	r1, [sp, #1180]	; 0x49c
   1f6b8:	cmp	r1, #43	; 0x2b
   1f6bc:	beq	1fdfc <__assert_fail@plt+0xe088>
   1f6c0:	ldr	r1, [sp, #1180]	; 0x49c
   1f6c4:	mov	r0, #2
   1f6c8:	str	r1, [sp, #44]	; 0x2c
   1f6cc:	mov	r1, #0
   1f6d0:	strd	r0, [sp, #88]	; 0x58
   1f6d4:	b	1e924 <__assert_fail@plt+0xcbb0>
   1f6d8:	mov	r4, r8
   1f6dc:	mov	r7, #0
   1f6e0:	ldr	r3, [sp, #28]
   1f6e4:	cmp	r7, #0
   1f6e8:	sub	sl, r3, fp
   1f6ec:	bne	1e7c0 <__assert_fail@plt+0xca4c>
   1f6f0:	mvn	r3, #0
   1f6f4:	movw	r9, #37416	; 0x9228
   1f6f8:	movt	r9, #2
   1f6fc:	str	r3, [sp, #84]	; 0x54
   1f700:	b	1f1d4 <__assert_fail@plt+0xd460>
   1f704:	cmp	r7, #69	; 0x45
   1f708:	beq	1e7b8 <__assert_fail@plt+0xca44>
   1f70c:	ldr	r2, [sp, #60]	; 0x3c
   1f710:	cmp	sl, #0
   1f714:	mov	r3, #66	; 0x42
   1f718:	movne	r2, sl
   1f71c:	mov	r8, #0
   1f720:	str	r2, [sp, #60]	; 0x3c
   1f724:	b	1ea34 <__assert_fail@plt+0xccc0>
   1f728:	mov	r4, r8
   1f72c:	mov	r7, #0
   1f730:	mov	r3, #114	; 0x72
   1f734:	mov	r8, #0
   1f738:	b	1ea34 <__assert_fail@plt+0xccc0>
   1f73c:	mov	r4, r8
   1f740:	mov	r7, #0
   1f744:	mov	r8, #0
   1f748:	ldr	r2, [sp, #60]	; 0x3c
   1f74c:	cmp	sl, #0
   1f750:	mov	r3, #112	; 0x70
   1f754:	movne	r2, #0
   1f758:	movne	r8, sl
   1f75c:	str	r2, [sp, #60]	; 0x3c
   1f760:	b	1ea34 <__assert_fail@plt+0xccc0>
   1f764:	mov	r4, r8
   1f768:	mov	r7, #0
   1f76c:	mov	r8, #1
   1f770:	b	1f748 <__assert_fail@plt+0xd9d4>
   1f774:	mov	r4, r8
   1f778:	ldr	r3, [sp, #28]
   1f77c:	movw	r9, #37408	; 0x9220
   1f780:	movt	r9, #2
   1f784:	sub	sl, r3, fp
   1f788:	mvn	r3, #0
   1f78c:	str	r3, [sp, #84]	; 0x54
   1f790:	b	1f1d4 <__assert_fail@plt+0xd460>
   1f794:	mov	r4, r8
   1f798:	mov	r7, #0
   1f79c:	mov	sl, #0
   1f7a0:	ldr	r1, [sp, #48]	; 0x30
   1f7a4:	ldr	r2, [r1, #32]
   1f7a8:	cmp	r2, #0
   1f7ac:	blt	1e1dc <__assert_fail@plt+0xc468>
   1f7b0:	ldr	r1, [r1, #36]	; 0x24
   1f7b4:	cmp	r1, #0
   1f7b8:	movlt	r2, #1
   1f7bc:	strlt	r2, [sp, #84]	; 0x54
   1f7c0:	blt	1f7e8 <__assert_fail@plt+0xda74>
   1f7c4:	movne	r2, #0
   1f7c8:	strne	r2, [sp, #84]	; 0x54
   1f7cc:	bne	1f7e8 <__assert_fail@plt+0xda74>
   1f7d0:	ldr	r2, [sp, #56]	; 0x38
   1f7d4:	ldrb	r2, [r2]
   1f7d8:	sub	r2, r2, #45	; 0x2d
   1f7dc:	clz	r2, r2
   1f7e0:	lsr	r2, r2, #5
   1f7e4:	str	r2, [sp, #84]	; 0x54
   1f7e8:	ldr	r0, [sp, #80]	; 0x50
   1f7ec:	asr	r8, r1, #31
   1f7f0:	smull	ip, r2, r0, r1
   1f7f4:	ldr	ip, [sp, #76]	; 0x4c
   1f7f8:	add	r2, r2, r1
   1f7fc:	rsb	r2, r8, r2, asr #5
   1f800:	smull	lr, ip, ip, r1
   1f804:	asr	lr, r2, #31
   1f808:	add	ip, ip, r1
   1f80c:	str	ip, [sp, #88]	; 0x58
   1f810:	smull	ip, r0, r0, r2
   1f814:	ldr	ip, [sp, #88]	; 0x58
   1f818:	add	r0, r0, r2
   1f81c:	rsb	lr, lr, r0, asr #5
   1f820:	rsb	r8, r8, ip, asr #11
   1f824:	rsb	lr, lr, lr, lsl #4
   1f828:	rsb	ip, r2, r2, lsl #4
   1f82c:	sub	lr, r2, lr, lsl #2
   1f830:	sub	r1, r1, ip, lsl #2
   1f834:	cmp	sl, #3
   1f838:	ldrls	pc, [pc, sl, lsl #2]
   1f83c:	b	1e7b8 <__assert_fail@plt+0xca44>
   1f840:	andeq	pc, r1, ip, lsr sl	; <UNPREDICTABLE>
   1f844:	andeq	pc, r1, r4, ror #19
   1f848:			; <UNDEFINED> instruction: 0x0001f9b0
   1f84c:	andeq	pc, r1, ip, lsl #20
   1f850:	mov	r4, r8
   1f854:	mov	r7, #0
   1f858:	ldrb	r2, [r4, #1]
   1f85c:	add	r1, r4, #1
   1f860:	cmp	r2, #58	; 0x3a
   1f864:	movne	sl, #1
   1f868:	beq	1fdc4 <__assert_fail@plt+0xe050>
   1f86c:	cmp	r2, #122	; 0x7a
   1f870:	bne	1e7b8 <__assert_fail@plt+0xca44>
   1f874:	mov	r4, r1
   1f878:	b	1f7a0 <__assert_fail@plt+0xda2c>
   1f87c:	cmp	r7, #0
   1f880:	bne	1e7b8 <__assert_fail@plt+0xca44>
   1f884:	mov	r8, r4
   1f888:	ldr	r3, [sp, #60]	; 0x3c
   1f88c:	cmp	sl, #0
   1f890:	mov	r4, r8
   1f894:	movne	r3, sl
   1f898:	str	r3, [sp, #60]	; 0x3c
   1f89c:	mov	r3, #65	; 0x41
   1f8a0:	b	1ef2c <__assert_fail@plt+0xd1b8>
   1f8a4:	mov	r4, r8
   1f8a8:	mov	r7, #0
   1f8ac:	b	1f70c <__assert_fail@plt+0xd998>
   1f8b0:	mov	r4, r8
   1f8b4:	mov	r7, #0
   1f8b8:	b	1ee54 <__assert_fail@plt+0xd0e0>
   1f8bc:	mov	r4, r8
   1f8c0:	mov	r7, #0
   1f8c4:	b	1ee14 <__assert_fail@plt+0xd0a0>
   1f8c8:	mov	r4, r8
   1f8cc:	mov	r7, #0
   1f8d0:	b	1eedc <__assert_fail@plt+0xd168>
   1f8d4:	mov	r4, r8
   1f8d8:	mov	r7, #0
   1f8dc:	b	1eec0 <__assert_fail@plt+0xd14c>
   1f8e0:	mov	r4, r8
   1f8e4:	mov	r7, #0
   1f8e8:	b	1eeac <__assert_fail@plt+0xd138>
   1f8ec:	mov	r4, r8
   1f8f0:	mov	r7, #0
   1f8f4:	b	1ee90 <__assert_fail@plt+0xd11c>
   1f8f8:	mov	r4, r8
   1f8fc:	mov	r7, #0
   1f900:	b	1ee7c <__assert_fail@plt+0xd108>
   1f904:	mov	r4, r8
   1f908:	mov	r7, #0
   1f90c:	b	1f64c <__assert_fail@plt+0xd8d8>
   1f910:	mov	r4, r8
   1f914:	mov	r7, #0
   1f918:	b	1f47c <__assert_fail@plt+0xd708>
   1f91c:	mov	r4, r8
   1f920:	mov	r7, #0
   1f924:	b	1f460 <__assert_fail@plt+0xd6ec>
   1f928:	mov	r4, r8
   1f92c:	mov	r7, #0
   1f930:	b	1f448 <__assert_fail@plt+0xd6d4>
   1f934:	mov	r4, r8
   1f938:	mov	r7, #0
   1f93c:	b	1f42c <__assert_fail@plt+0xd6b8>
   1f940:	mov	r4, r8
   1f944:	mov	r7, #0
   1f948:	b	1e8b0 <__assert_fail@plt+0xcb3c>
   1f94c:	mov	r4, r8
   1f950:	mov	r7, #0
   1f954:	b	1ea58 <__assert_fail@plt+0xcce4>
   1f958:	mov	r4, r8
   1f95c:	mov	r7, #0
   1f960:	b	1ea2c <__assert_fail@plt+0xccb8>
   1f964:	mov	r4, r8
   1f968:	mov	r7, #0
   1f96c:	b	1f184 <__assert_fail@plt+0xd410>
   1f970:	mov	r4, r8
   1f974:	mov	r7, #0
   1f978:	b	1f12c <__assert_fail@plt+0xd3b8>
   1f97c:	mov	r4, r8
   1f980:	mov	r7, #0
   1f984:	b	1f11c <__assert_fail@plt+0xd3a8>
   1f988:	mov	r4, r8
   1f98c:	mov	r7, #0
   1f990:	b	1f01c <__assert_fail@plt+0xd2a8>
   1f994:	mov	r4, r8
   1f998:	b	1ef18 <__assert_fail@plt+0xd1a4>
   1f99c:	mov	r4, r8
   1f9a0:	mov	r7, #0
   1f9a4:	b	1f2c0 <__assert_fail@plt+0xd54c>
   1f9a8:	mov	r4, r8
   1f9ac:	b	1e7b8 <__assert_fail@plt+0xca44>
   1f9b0:	mov	ip, #100	; 0x64
   1f9b4:	movw	r0, #10000	; 0x2710
   1f9b8:	ldr	r2, [sp, #84]	; 0x54
   1f9bc:	mul	ip, ip, lr
   1f9c0:	mov	lr, #1
   1f9c4:	str	lr, [sp, #92]	; 0x5c
   1f9c8:	mov	lr, #20
   1f9cc:	mla	ip, r0, r8, ip
   1f9d0:	mov	r0, #9
   1f9d4:	eor	r2, r2, #1
   1f9d8:	str	r0, [sp, #88]	; 0x58
   1f9dc:	add	ip, ip, r1
   1f9e0:	b	1e928 <__assert_fail@plt+0xcbb4>
   1f9e4:	ldr	r2, [sp, #84]	; 0x54
   1f9e8:	mov	r1, #1
   1f9ec:	mov	ip, #100	; 0x64
   1f9f0:	str	r1, [sp, #92]	; 0x5c
   1f9f4:	mov	r1, #6
   1f9f8:	mla	ip, ip, r8, lr
   1f9fc:	mov	lr, #4
   1fa00:	str	r1, [sp, #88]	; 0x58
   1fa04:	eor	r2, r2, #1
   1fa08:	b	1e928 <__assert_fail@plt+0xcbb4>
   1fa0c:	cmp	r1, #0
   1fa10:	bne	1f9b0 <__assert_fail@plt+0xdc3c>
   1fa14:	cmp	lr, #0
   1fa18:	bne	1f9e4 <__assert_fail@plt+0xdc70>
   1fa1c:	ldr	r2, [sp, #84]	; 0x54
   1fa20:	mov	r1, #1
   1fa24:	mov	ip, r8
   1fa28:	str	r1, [sp, #92]	; 0x5c
   1fa2c:	mov	r1, #3
   1fa30:	str	r1, [sp, #88]	; 0x58
   1fa34:	eor	r2, r2, #1
   1fa38:	b	1e928 <__assert_fail@plt+0xcbb4>
   1fa3c:	ldr	r2, [sp, #84]	; 0x54
   1fa40:	mov	r1, #1
   1fa44:	mov	ip, #100	; 0x64
   1fa48:	str	r1, [sp, #92]	; 0x5c
   1fa4c:	mov	r1, #5
   1fa50:	mla	ip, ip, r8, lr
   1fa54:	str	r1, [sp, #88]	; 0x58
   1fa58:	eor	r2, r2, #1
   1fa5c:	b	1e924 <__assert_fail@plt+0xcbb0>
   1fa60:	mov	r9, #45	; 0x2d
   1fa64:	sub	r2, r5, #1
   1fa68:	sub	r2, r2, r8
   1fa6c:	cmp	r2, #0
   1fa70:	movle	r3, #0
   1fa74:	andgt	r3, r3, #1
   1fa78:	cmp	r3, #0
   1fa7c:	ldr	r3, [sp, #44]	; 0x2c
   1fa80:	moveq	r2, #0
   1fa84:	cmp	r3, #95	; 0x5f
   1fa88:	beq	1fb1c <__assert_fail@plt+0xdda8>
   1fa8c:	ldr	r3, [sp, #28]
   1fa90:	sub	sl, r3, fp
   1fa94:	cmp	sl, #1
   1fa98:	bls	1e21c <__assert_fail@plt+0xc4a8>
   1fa9c:	ldr	r3, [sp, #44]	; 0x2c
   1faa0:	cmp	r6, #0
   1faa4:	add	fp, fp, #1
   1faa8:	strbne	r9, [r6], #1
   1faac:	cmp	r3, #45	; 0x2d
   1fab0:	beq	1fac0 <__assert_fail@plt+0xdd4c>
   1fab4:	sub	r5, r5, #1
   1fab8:	cmp	r5, #0
   1fabc:	bge	1ec6c <__assert_fail@plt+0xcef8>
   1fac0:	mov	r9, r8
   1fac4:	mov	r5, #0
   1fac8:	b	1ec78 <__assert_fail@plt+0xcf04>
   1facc:	mov	r1, #48	; 0x30
   1fad0:	mov	r3, #1
   1fad4:	str	r1, [sp, #44]	; 0x2c
   1fad8:	b	1ec14 <__assert_fail@plt+0xcea0>
   1fadc:	mov	fp, r3
   1fae0:	b	1e1f0 <__assert_fail@plt+0xc47c>
   1fae4:	bl	11930 <memcpy@plt>
   1fae8:	b	1ecdc <__assert_fail@plt+0xcf68>
   1faec:	bl	11930 <memcpy@plt>
   1faf0:	b	1ea18 <__assert_fail@plt+0xcca4>
   1faf4:	add	r1, sp, #113	; 0x71
   1faf8:	mov	r2, r7
   1fafc:	mov	r0, r6
   1fb00:	bl	1dff4 <__assert_fail@plt+0xc280>
   1fb04:	b	1ea18 <__assert_fail@plt+0xcca4>
   1fb08:	mov	r7, r8
   1fb0c:	mov	r5, #0
   1fb10:	b	1f230 <__assert_fail@plt+0xd4bc>
   1fb14:	mov	r9, #43	; 0x2b
   1fb18:	b	1fa64 <__assert_fail@plt+0xdcf0>
   1fb1c:	ldr	r3, [sp, #28]
   1fb20:	add	fp, fp, r2
   1fb24:	cmp	r6, #0
   1fb28:	sub	r5, r5, r2
   1fb2c:	sub	sl, r3, fp
   1fb30:	beq	1fb78 <__assert_fail@plt+0xde04>
   1fb34:	mov	r1, #32
   1fb38:	mov	r0, r6
   1fb3c:	add	r6, r6, r2
   1fb40:	bl	11be8 <memset@plt>
   1fb44:	b	1fa94 <__assert_fail@plt+0xdd20>
   1fb48:	cmp	r3, #1
   1fb4c:	bls	1e21c <__assert_fail@plt+0xc4a8>
   1fb50:	cmp	r6, #0
   1fb54:	mov	r7, #1
   1fb58:	bne	1ee00 <__assert_fail@plt+0xd08c>
   1fb5c:	b	1eb40 <__assert_fail@plt+0xcdcc>
   1fb60:	cmp	r3, #1
   1fb64:	bls	1e21c <__assert_fail@plt+0xc4a8>
   1fb68:	cmp	r6, #0
   1fb6c:	mov	r7, #1
   1fb70:	bne	1eb38 <__assert_fail@plt+0xcdc4>
   1fb74:	b	1eb40 <__assert_fail@plt+0xcdcc>
   1fb78:	cmp	sl, #1
   1fb7c:	bls	1e21c <__assert_fail@plt+0xc4a8>
   1fb80:	add	fp, fp, #1
   1fb84:	sub	r5, r5, #1
   1fb88:	b	1fab8 <__assert_fail@plt+0xdd44>
   1fb8c:	ldr	r1, [sp, #44]	; 0x2c
   1fb90:	cmp	r1, #43	; 0x2b
   1fb94:	movne	r0, #4
   1fb98:	movne	r1, #0
   1fb9c:	strdne	r0, [sp, #88]	; 0x58
   1fba0:	bne	1e924 <__assert_fail@plt+0xcbb0>
   1fba4:	mov	r1, #4
   1fba8:	str	r1, [sp, #88]	; 0x58
   1fbac:	movw	r1, #9999	; 0x270f
   1fbb0:	cmp	r1, ip
   1fbb4:	bcs	1fbe8 <__assert_fail@plt+0xde74>
   1fbb8:	mov	r1, #1
   1fbbc:	str	r1, [sp, #92]	; 0x5c
   1fbc0:	mov	r1, #43	; 0x2b
   1fbc4:	str	r1, [sp, #44]	; 0x2c
   1fbc8:	b	1e924 <__assert_fail@plt+0xcbb0>
   1fbcc:	asreq	r1, r3, #31
   1fbd0:	beq	1f33c <__assert_fail@plt+0xd5c8>
   1fbd4:	b	1f37c <__assert_fail@plt+0xd608>
   1fbd8:	mov	r0, #0
   1fbdc:	mov	r1, #2
   1fbe0:	mov	r2, #1
   1fbe4:	strd	r0, [sp, #84]	; 0x54
   1fbe8:	ldr	r1, [sp, #88]	; 0x58
   1fbec:	cmp	r5, r1
   1fbf0:	movle	r1, #0
   1fbf4:	movgt	r1, #1
   1fbf8:	str	r1, [sp, #92]	; 0x5c
   1fbfc:	mov	r1, #43	; 0x2b
   1fc00:	str	r1, [sp, #44]	; 0x2c
   1fc04:	b	1e924 <__assert_fail@plt+0xcbb0>
   1fc08:	mov	r3, #121	; 0x79
   1fc0c:	b	1e93c <__assert_fail@plt+0xcbc8>
   1fc10:	sub	r2, r2, #1
   1fc14:	tst	r2, #3
   1fc18:	movwne	r2, #365	; 0x16d
   1fc1c:	bne	1fc64 <__assert_fail@plt+0xdef0>
   1fc20:	ldr	r1, [sp, #68]	; 0x44
   1fc24:	mov	ip, #100	; 0x64
   1fc28:	smull	r1, r0, r1, r2
   1fc2c:	asr	r1, r2, #31
   1fc30:	rsb	r1, r1, r0, asr #5
   1fc34:	mls	r1, ip, r1, r2
   1fc38:	cmp	r1, #0
   1fc3c:	movwne	r2, #366	; 0x16e
   1fc40:	bne	1fc64 <__assert_fail@plt+0xdef0>
   1fc44:	mov	ip, #400	; 0x190
   1fc48:	movw	r1, #365	; 0x16d
   1fc4c:	movw	lr, #366	; 0x16e
   1fc50:	sdiv	r0, r2, ip
   1fc54:	mls	r2, ip, r0, r2
   1fc58:	cmp	r2, #0
   1fc5c:	movne	r2, r1
   1fc60:	moveq	r2, lr
   1fc64:	add	r9, r9, r2
   1fc68:	ldr	r0, [sp, #64]	; 0x40
   1fc6c:	mvn	lr, #0
   1fc70:	ldr	r2, [sp, #84]	; 0x54
   1fc74:	sub	r2, r9, r2
   1fc78:	add	r2, r2, #380	; 0x17c
   1fc7c:	add	r2, r2, #2
   1fc80:	asr	r1, r2, #31
   1fc84:	smull	ip, r0, r0, r2
   1fc88:	add	r0, r0, r2
   1fc8c:	rsb	r1, r1, r0, asr #2
   1fc90:	rsb	r1, r1, r1, lsl #3
   1fc94:	sub	r2, r2, r1
   1fc98:	sub	r2, r9, r2
   1fc9c:	add	sl, r2, #3
   1fca0:	b	1f56c <__assert_fail@plt+0xd7f8>
   1fca4:	ldr	r1, [sp, #44]	; 0x2c
   1fca8:	cmp	r1, #43	; 0x2b
   1fcac:	beq	1fdfc <__assert_fail@plt+0xe088>
   1fcb0:	mov	r0, #2
   1fcb4:	mov	r1, #0
   1fcb8:	strd	r0, [sp, #88]	; 0x58
   1fcbc:	b	1e924 <__assert_fail@plt+0xcbb0>
   1fcc0:	mov	r3, #67	; 0x43
   1fcc4:	b	1e93c <__assert_fail@plt+0xcbc8>
   1fcc8:	cmp	r7, sl
   1fccc:	bcs	1e21c <__assert_fail@plt+0xc4a8>
   1fcd0:	ldr	r3, [sp, #28]
   1fcd4:	add	fp, fp, r7
   1fcd8:	cmp	r6, #0
   1fcdc:	sub	r8, r3, fp
   1fce0:	bne	1f3ac <__assert_fail@plt+0xd638>
   1fce4:	ldr	r3, [sp, #44]	; 0x2c
   1fce8:	cmp	r3, #45	; 0x2d
   1fcec:	bne	1fe0c <__assert_fail@plt+0xe098>
   1fcf0:	ldr	r3, [sp, #28]
   1fcf4:	cmp	r3, fp
   1fcf8:	bne	1e1dc <__assert_fail@plt+0xc468>
   1fcfc:	b	1e21c <__assert_fail@plt+0xc4a8>
   1fd00:	cmp	sl, #1
   1fd04:	bls	1e21c <__assert_fail@plt+0xc4a8>
   1fd08:	cmp	r6, #0
   1fd0c:	mov	r4, #1
   1fd10:	bne	1f100 <__assert_fail@plt+0xd38c>
   1fd14:	b	1f108 <__assert_fail@plt+0xd394>
   1fd18:	ldr	r2, [sp, #64]	; 0x40
   1fd1c:	smull	r2, r1, r2, sl
   1fd20:	mov	r2, #2
   1fd24:	str	r2, [sp, #88]	; 0x58
   1fd28:	asr	r2, sl, #31
   1fd2c:	add	sl, r1, sl
   1fd30:	rsb	r2, r2, sl, asr #2
   1fd34:	add	r2, r2, #1
   1fd38:	b	1ea68 <__assert_fail@plt+0xccf4>
   1fd3c:	movw	r2, #63636	; 0xf894
   1fd40:	movt	r2, #65535	; 0xffff
   1fd44:	ldr	r1, [sp, #44]	; 0x2c
   1fd48:	sub	r2, r2, lr
   1fd4c:	add	ip, r8, #1888	; 0x760
   1fd50:	cmp	r8, r2
   1fd54:	add	ip, ip, #12
   1fd58:	movlt	r2, #1
   1fd5c:	movge	r2, #0
   1fd60:	add	ip, ip, lr
   1fd64:	str	r2, [sp, #84]	; 0x54
   1fd68:	movge	r2, #1
   1fd6c:	movlt	r2, #0
   1fd70:	cmp	r1, #0
   1fd74:	bne	1fb8c <__assert_fail@plt+0xde18>
   1fd78:	ldr	r1, [sp, #1180]	; 0x49c
   1fd7c:	cmp	r1, #43	; 0x2b
   1fd80:	beq	1fba4 <__assert_fail@plt+0xde30>
   1fd84:	mov	r0, #4
   1fd88:	str	r1, [sp, #44]	; 0x2c
   1fd8c:	mov	r1, #0
   1fd90:	strd	r0, [sp, #88]	; 0x58
   1fd94:	b	1e924 <__assert_fail@plt+0xcbb0>
   1fd98:	mov	r3, #89	; 0x59
   1fd9c:	b	1e93c <__assert_fail@plt+0xcbc8>
   1fda0:	bl	11930 <memcpy@plt>
   1fda4:	b	1f000 <__assert_fail@plt+0xd28c>
   1fda8:	mov	r2, r7
   1fdac:	mov	r0, r6
   1fdb0:	ldr	r1, [sp, #56]	; 0x38
   1fdb4:	bl	1dff4 <__assert_fail@plt+0xc280>
   1fdb8:	b	1f000 <__assert_fail@plt+0xd28c>
   1fdbc:	bl	11930 <memcpy@plt>
   1fdc0:	b	1f3c8 <__assert_fail@plt+0xd654>
   1fdc4:	add	r0, r4, #2
   1fdc8:	mov	sl, #1
   1fdcc:	mov	r1, r0
   1fdd0:	ldrb	r2, [r0], #1
   1fdd4:	add	sl, sl, #1
   1fdd8:	cmp	r2, #58	; 0x3a
   1fddc:	bne	1f86c <__assert_fail@plt+0xdaf8>
   1fde0:	b	1fdcc <__assert_fail@plt+0xe058>
   1fde4:	ldr	r2, [sp, #44]	; 0x2c
   1fde8:	mov	r1, #2
   1fdec:	str	r2, [sp, #84]	; 0x54
   1fdf0:	mov	r2, #1
   1fdf4:	str	r1, [sp, #88]	; 0x58
   1fdf8:	b	1fbe8 <__assert_fail@plt+0xde74>
   1fdfc:	mov	r1, #2
   1fe00:	str	r1, [sp, #88]	; 0x58
   1fe04:	mov	r1, #99	; 0x63
   1fe08:	b	1fbb0 <__assert_fail@plt+0xde3c>
   1fe0c:	sub	r5, r5, r7
   1fe10:	cmp	r8, r5
   1fe14:	bls	1e21c <__assert_fail@plt+0xc4a8>
   1fe18:	add	fp, fp, r5
   1fe1c:	mov	r6, #0
   1fe20:	b	1e1dc <__assert_fail@plt+0xc468>
   1fe24:	ldr	r3, [sp, #60]	; 0x3c
   1fe28:	mov	lr, #4
   1fe2c:	mov	ip, #43	; 0x2b
   1fe30:	mov	r0, r7
   1fe34:	movw	r2, #37396	; 0x9214
   1fe38:	movt	r2, #2
   1fe3c:	mvn	r1, #0
   1fe40:	mov	r9, r2
   1fe44:	mov	r5, r7
   1fe48:	stm	sp, {r3, ip, lr}
   1fe4c:	str	ip, [sp, #44]	; 0x2c
   1fe50:	str	lr, [sp, #84]	; 0x54
   1fe54:	ldr	r3, [sp, #1188]	; 0x4a4
   1fe58:	ldr	lr, [sp, #1192]	; 0x4a8
   1fe5c:	ldr	ip, [sp, #1196]	; 0x4ac
   1fe60:	str	r3, [sp, #12]
   1fe64:	ldr	r3, [sp, #48]	; 0x30
   1fe68:	str	lr, [sp, #16]
   1fe6c:	str	ip, [sp, #20]
   1fe70:	bl	1e09c <__assert_fail@plt+0xc328>
   1fe74:	mov	r8, r0
   1fe78:	mov	r7, r0
   1fe7c:	b	1f230 <__assert_fail@plt+0xd4bc>
   1fe80:	cmp	r2, #0
   1fe84:	add	ip, ip, #100	; 0x64
   1fe88:	beq	1e8f8 <__assert_fail@plt+0xcb84>
   1fe8c:	b	1f5d4 <__assert_fail@plt+0xd860>
   1fe90:	ldr	r2, [sp, #36]	; 0x24
   1fe94:	mov	r3, #75	; 0x4b
   1fe98:	str	r3, [r2]
   1fe9c:	b	1e228 <__assert_fail@plt+0xc4b4>
   1fea0:	strd	r4, [sp, #-16]!
   1fea4:	mov	ip, #0
   1fea8:	str	r6, [sp, #8]
   1feac:	mvn	r6, #0
   1feb0:	str	lr, [sp, #12]
   1feb4:	sub	sp, sp, #32
   1feb8:	ldr	r4, [sp, #48]	; 0x30
   1febc:	add	r5, sp, #31
   1fec0:	str	ip, [sp]
   1fec4:	ldr	lr, [sp, #52]	; 0x34
   1fec8:	str	ip, [sp, #4]
   1fecc:	str	r6, [sp, #8]
   1fed0:	str	r5, [sp, #12]
   1fed4:	str	r4, [sp, #16]
   1fed8:	str	lr, [sp, #20]
   1fedc:	strb	ip, [sp, #31]
   1fee0:	bl	1e09c <__assert_fail@plt+0xc328>
   1fee4:	add	sp, sp, #32
   1fee8:	ldrd	r4, [sp]
   1feec:	ldr	r6, [sp, #8]
   1fef0:	add	sp, sp, #12
   1fef4:	pop	{pc}		; (ldr pc, [sp], #4)
   1fef8:	movw	r3, #41760	; 0xa320
   1fefc:	movt	r3, #3
   1ff00:	str	r4, [sp, #-8]!
   1ff04:	ldr	r4, [r3]
   1ff08:	mov	r2, #5
   1ff0c:	movw	r1, #37428	; 0x9234
   1ff10:	movt	r1, #2
   1ff14:	mov	r0, #0
   1ff18:	str	lr, [sp, #4]
   1ff1c:	bl	11984 <dcgettext@plt>
   1ff20:	mov	r3, r0
   1ff24:	movw	r2, #37712	; 0x9350
   1ff28:	movt	r2, #2
   1ff2c:	mov	r1, #1
   1ff30:	mov	r0, r4
   1ff34:	bl	11c18 <__fprintf_chk@plt>
   1ff38:	movw	r3, #41668	; 0xa2c4
   1ff3c:	movt	r3, #3
   1ff40:	ldr	r0, [r3]
   1ff44:	bl	11b70 <exit@plt>
   1ff48:	ldrb	r2, [r0, #40]	; 0x28
   1ff4c:	ldr	r3, [r0, #28]
   1ff50:	tst	r2, #1
   1ff54:	beq	1ff60 <__assert_fail@plt+0xe1ec>
   1ff58:	ldr	r0, [r0, #36]	; 0x24
   1ff5c:	bx	r3
   1ff60:	mov	r0, r1
   1ff64:	bx	r3
   1ff68:	ldrb	r2, [r0, #40]	; 0x28
   1ff6c:	ldr	r3, [r0, #32]
   1ff70:	tst	r2, #1
   1ff74:	beq	1ff80 <__assert_fail@plt+0xe20c>
   1ff78:	ldr	r0, [r0, #36]	; 0x24
   1ff7c:	bx	r3
   1ff80:	mov	r0, r1
   1ff84:	bx	r3
   1ff88:	strd	r4, [sp, #-16]!
   1ff8c:	subs	r5, r2, #0
   1ff90:	movw	r2, #4072	; 0xfe8
   1ff94:	moveq	r5, #8
   1ff98:	str	r6, [sp, #8]
   1ff9c:	subne	r6, r5, #1
   1ffa0:	moveq	r6, #7
   1ffa4:	cmp	r1, #0
   1ffa8:	str	lr, [sp, #12]
   1ffac:	mov	r3, r1
   1ffb0:	moveq	r3, r2
   1ffb4:	mov	r1, r3
   1ffb8:	mov	r4, r0
   1ffbc:	str	r3, [r0]
   1ffc0:	str	r6, [r0, #24]
   1ffc4:	bl	1ff48 <__assert_fail@plt+0xe1d4>
   1ffc8:	cmp	r0, #0
   1ffcc:	mov	r3, r0
   1ffd0:	str	r0, [r4, #4]
   1ffd4:	beq	20028 <__assert_fail@plt+0xe2b4>
   1ffd8:	ldrb	lr, [r4, #40]	; 0x28
   1ffdc:	add	r1, r0, #8
   1ffe0:	rsb	r2, r5, #0
   1ffe4:	add	r1, r1, r6
   1ffe8:	mov	r5, #0
   1ffec:	ldr	ip, [r4]
   1fff0:	and	r2, r2, r1
   1fff4:	mov	r0, #1
   1fff8:	ldr	r6, [sp, #8]
   1fffc:	bic	lr, lr, #6
   20000:	str	r2, [r4, #8]
   20004:	str	r2, [r4, #12]
   20008:	add	r2, r3, ip
   2000c:	str	r2, [r3]
   20010:	str	r2, [r4, #16]
   20014:	str	r5, [r3, #4]
   20018:	strb	lr, [r4, #40]	; 0x28
   2001c:	ldrd	r4, [sp]
   20020:	add	sp, sp, #12
   20024:	pop	{pc}		; (ldr pc, [sp], #4)
   20028:	movw	r3, #41672	; 0xa2c8
   2002c:	movt	r3, #3
   20030:	ldr	r3, [r3]
   20034:	blx	r3

00020038 <_obstack_begin@@Base>:
   20038:	str	r4, [sp, #-8]!
   2003c:	str	lr, [sp, #4]
   20040:	ldrb	lr, [r0, #40]	; 0x28
   20044:	str	r3, [r0, #28]
   20048:	ldr	r4, [sp, #8]
   2004c:	bfc	lr, #0, #1
   20050:	str	r4, [r0, #32]
   20054:	ldr	r4, [sp]
   20058:	strb	lr, [r0, #40]	; 0x28
   2005c:	ldr	lr, [sp, #4]
   20060:	add	sp, sp, #8
   20064:	b	1ff88 <__assert_fail@plt+0xe214>

00020068 <_obstack_begin_1@@Base>:
   20068:	str	r4, [sp, #-8]!
   2006c:	str	lr, [sp, #4]
   20070:	ldrb	lr, [r0, #40]	; 0x28
   20074:	str	r3, [r0, #28]
   20078:	ldr	r4, [sp, #8]
   2007c:	ldr	r3, [sp, #12]
   20080:	orr	lr, lr, #1
   20084:	str	r4, [r0, #32]
   20088:	ldr	r4, [sp]
   2008c:	str	r3, [r0, #36]	; 0x24
   20090:	strb	lr, [r0, #40]	; 0x28
   20094:	ldr	lr, [sp, #4]
   20098:	add	sp, sp, #8
   2009c:	b	1ff88 <__assert_fail@plt+0xe214>

000200a0 <_obstack_newchunk@@Base>:
   200a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   200a4:	ldr	r2, [r0, #8]
   200a8:	ldr	r3, [r0, #24]
   200ac:	strd	r6, [sp, #8]
   200b0:	str	r8, [sp, #16]
   200b4:	ldr	r6, [r0, #12]
   200b8:	str	lr, [sp, #20]
   200bc:	ldr	lr, [r0]
   200c0:	ldr	r7, [r0, #4]
   200c4:	sub	r6, r6, r2
   200c8:	adds	r1, r6, r1
   200cc:	movcs	ip, #1
   200d0:	movcc	ip, #0
   200d4:	adds	r3, r3, r1
   200d8:	eor	ip, ip, #1
   200dc:	add	r4, r3, r6, lsr #3
   200e0:	movcs	r2, #1
   200e4:	movcc	r2, #0
   200e8:	cmp	r3, lr
   200ec:	eor	r2, r2, #1
   200f0:	add	r4, r4, #100	; 0x64
   200f4:	movcc	r3, lr
   200f8:	cmp	r3, r4
   200fc:	movcs	r4, r3
   20100:	tst	ip, r2
   20104:	beq	201bc <_obstack_newchunk@@Base+0x11c>
   20108:	mov	r1, r4
   2010c:	mov	r5, r0
   20110:	bl	1ff48 <__assert_fail@plt+0xe1d4>
   20114:	subs	r8, r0, #0
   20118:	beq	201bc <_obstack_newchunk@@Base+0x11c>
   2011c:	add	r3, r8, r4
   20120:	mov	r4, r8
   20124:	str	r8, [r5, #4]
   20128:	ldr	r0, [r5, #24]
   2012c:	mov	r2, r6
   20130:	ldr	r1, [r5, #8]
   20134:	str	r7, [r8, #4]
   20138:	str	r3, [r5, #16]
   2013c:	str	r3, [r4], #8
   20140:	add	r4, r4, r0
   20144:	bic	r4, r4, r0
   20148:	mov	r0, r4
   2014c:	bl	11930 <memcpy@plt>
   20150:	ldrb	r3, [r5, #40]	; 0x28
   20154:	tst	r3, #2
   20158:	bne	20178 <_obstack_newchunk@@Base+0xd8>
   2015c:	ldr	r1, [r5, #8]
   20160:	add	r3, r7, #8
   20164:	ldr	r2, [r5, #24]
   20168:	add	r3, r3, r2
   2016c:	bic	r3, r3, r2
   20170:	cmp	r1, r3
   20174:	beq	201a4 <_obstack_newchunk@@Base+0x104>
   20178:	ldrb	r3, [r5, #40]	; 0x28
   2017c:	add	r6, r4, r6
   20180:	ldr	r8, [sp, #16]
   20184:	str	r4, [r5, #8]
   20188:	str	r6, [r5, #12]
   2018c:	bfc	r3, #1, #1
   20190:	ldrd	r6, [sp, #8]
   20194:	strb	r3, [r5, #40]	; 0x28
   20198:	ldrd	r4, [sp]
   2019c:	add	sp, sp, #20
   201a0:	pop	{pc}		; (ldr pc, [sp], #4)
   201a4:	ldr	r3, [r7, #4]
   201a8:	mov	r1, r7
   201ac:	mov	r0, r5
   201b0:	str	r3, [r8, #4]
   201b4:	bl	1ff68 <__assert_fail@plt+0xe1f4>
   201b8:	b	20178 <_obstack_newchunk@@Base+0xd8>
   201bc:	movw	r3, #41672	; 0xa2c8
   201c0:	movt	r3, #3
   201c4:	ldr	r3, [r3]
   201c8:	blx	r3

000201cc <_obstack_allocated_p@@Base>:
   201cc:	ldr	r0, [r0, #4]
   201d0:	cmp	r0, #0
   201d4:	beq	20204 <_obstack_allocated_p@@Base+0x38>
   201d8:	cmp	r1, r0
   201dc:	bls	201ec <_obstack_allocated_p@@Base+0x20>
   201e0:	ldr	r3, [r0]
   201e4:	cmp	r3, r1
   201e8:	bcs	201fc <_obstack_allocated_p@@Base+0x30>
   201ec:	ldr	r0, [r0, #4]
   201f0:	cmp	r0, #0
   201f4:	bne	201d8 <_obstack_allocated_p@@Base+0xc>
   201f8:	bx	lr
   201fc:	mov	r0, #1
   20200:	bx	lr
   20204:	bx	lr

00020208 <_obstack_free@@Base>:
   20208:	strd	r4, [sp, #-16]!
   2020c:	ldr	r4, [r0, #4]
   20210:	str	r6, [sp, #8]
   20214:	mov	r6, r1
   20218:	str	lr, [sp, #12]
   2021c:	cmp	r4, #0
   20220:	movne	r5, r0
   20224:	beq	20260 <_obstack_free@@Base+0x58>
   20228:	cmp	r4, r6
   2022c:	bcs	2023c <_obstack_free@@Base+0x34>
   20230:	ldr	r2, [r4]
   20234:	cmp	r2, r6
   20238:	bcs	20278 <_obstack_free@@Base+0x70>
   2023c:	mov	r1, r4
   20240:	mov	r0, r5
   20244:	ldr	r4, [r4, #4]
   20248:	bl	1ff68 <__assert_fail@plt+0xe1f4>
   2024c:	ldrb	r2, [r5, #40]	; 0x28
   20250:	cmp	r4, #0
   20254:	orr	r2, r2, #2
   20258:	strb	r2, [r5, #40]	; 0x28
   2025c:	bne	20228 <_obstack_free@@Base+0x20>
   20260:	cmp	r6, #0
   20264:	bne	20294 <_obstack_free@@Base+0x8c>
   20268:	ldrd	r4, [sp]
   2026c:	ldr	r6, [sp, #8]
   20270:	add	sp, sp, #12
   20274:	pop	{pc}		; (ldr pc, [sp], #4)
   20278:	stmib	r5, {r4, r6}
   2027c:	str	r6, [r5, #12]
   20280:	str	r2, [r5, #16]
   20284:	ldrd	r4, [sp]
   20288:	ldr	r6, [sp, #8]
   2028c:	add	sp, sp, #12
   20290:	pop	{pc}		; (ldr pc, [sp], #4)
   20294:	bl	11d2c <abort@plt>

00020298 <_obstack_memory_used@@Base>:
   20298:	ldr	r3, [r0, #4]
   2029c:	cmp	r3, #0
   202a0:	beq	202c4 <_obstack_memory_used@@Base+0x2c>
   202a4:	mov	r0, #0
   202a8:	ldr	r2, [r3]
   202ac:	sub	r2, r2, r3
   202b0:	ldr	r3, [r3, #4]
   202b4:	add	r0, r0, r2
   202b8:	cmp	r3, #0
   202bc:	bne	202a8 <_obstack_memory_used@@Base+0x10>
   202c0:	bx	lr
   202c4:	mov	r0, r3
   202c8:	bx	lr
   202cc:	strd	r4, [sp, #-16]!
   202d0:	subs	r4, r0, #0
   202d4:	str	r6, [sp, #8]
   202d8:	str	lr, [sp, #12]
   202dc:	beq	20374 <_obstack_memory_used@@Base+0xdc>
   202e0:	mov	r1, #47	; 0x2f
   202e4:	bl	11c78 <strrchr@plt>
   202e8:	subs	r5, r0, #0
   202ec:	beq	2034c <_obstack_memory_used@@Base+0xb4>
   202f0:	add	r6, r5, #1
   202f4:	sub	r3, r6, r4
   202f8:	cmp	r3, #6
   202fc:	ble	2034c <_obstack_memory_used@@Base+0xb4>
   20300:	movw	r1, #37504	; 0x9280
   20304:	movt	r1, #2
   20308:	mov	r2, #7
   2030c:	sub	r0, r5, #6
   20310:	bl	11d20 <strncmp@plt>
   20314:	cmp	r0, #0
   20318:	bne	2034c <_obstack_memory_used@@Base+0xb4>
   2031c:	movw	r1, #37512	; 0x9288
   20320:	movt	r1, #2
   20324:	mov	r2, #3
   20328:	mov	r0, r6
   2032c:	bl	11d20 <strncmp@plt>
   20330:	cmp	r0, #0
   20334:	movne	r4, r6
   20338:	bne	2034c <_obstack_memory_used@@Base+0xb4>
   2033c:	add	r4, r5, #4
   20340:	movw	r3, #41744	; 0xa310
   20344:	movt	r3, #3
   20348:	str	r4, [r3]
   2034c:	movw	r2, #46052	; 0xb3e4
   20350:	movt	r2, #3
   20354:	ldr	r6, [sp, #8]
   20358:	movw	r3, #41748	; 0xa314
   2035c:	movt	r3, #3
   20360:	str	r4, [r2]
   20364:	str	r4, [r3]
   20368:	ldrd	r4, [sp]
   2036c:	add	sp, sp, #12
   20370:	pop	{pc}		; (ldr pc, [sp], #4)
   20374:	movw	r3, #41760	; 0xa320
   20378:	movt	r3, #3
   2037c:	movw	r0, #37448	; 0x9248
   20380:	movt	r0, #2
   20384:	ldr	r3, [r3]
   20388:	mov	r2, #55	; 0x37
   2038c:	mov	r1, #1
   20390:	bl	11a2c <fwrite@plt>
   20394:	bl	11d2c <abort@plt>
   20398:	strd	r4, [sp, #-16]!
   2039c:	mov	r4, #0
   203a0:	mov	r5, #0
   203a4:	cmp	r1, #10
   203a8:	str	r6, [sp, #8]
   203ac:	strd	r4, [r0]
   203b0:	strd	r4, [r0, #8]
   203b4:	str	lr, [sp, #12]
   203b8:	strd	r4, [r0, #16]
   203bc:	strd	r4, [r0, #24]
   203c0:	strd	r4, [r0, #32]
   203c4:	strd	r4, [r0, #40]	; 0x28
   203c8:	beq	203e0 <_obstack_memory_used@@Base+0x148>
   203cc:	ldrd	r4, [sp]
   203d0:	str	r1, [r0]
   203d4:	ldr	r6, [sp, #8]
   203d8:	add	sp, sp, #12
   203dc:	pop	{pc}		; (ldr pc, [sp], #4)
   203e0:	bl	11d2c <abort@plt>
   203e4:	mov	r2, #5
   203e8:	strd	r4, [sp, #-16]!
   203ec:	mov	r5, r0
   203f0:	str	r6, [sp, #8]
   203f4:	mov	r6, r1
   203f8:	mov	r1, r0
   203fc:	mov	r0, #0
   20400:	str	lr, [sp, #12]
   20404:	bl	11984 <dcgettext@plt>
   20408:	cmp	r5, r0
   2040c:	mov	r4, r0
   20410:	beq	20428 <_obstack_memory_used@@Base+0x190>
   20414:	mov	r0, r4
   20418:	ldrd	r4, [sp]
   2041c:	ldr	r6, [sp, #8]
   20420:	add	sp, sp, #12
   20424:	pop	{pc}		; (ldr pc, [sp], #4)
   20428:	bl	248f8 <_obstack_memory_used@@Base+0x4660>
   2042c:	ldrb	r3, [r0]
   20430:	bic	r3, r3, #32
   20434:	cmp	r3, #85	; 0x55
   20438:	bne	204a0 <_obstack_memory_used@@Base+0x208>
   2043c:	ldrb	r3, [r0, #1]
   20440:	bic	r3, r3, #32
   20444:	cmp	r3, #84	; 0x54
   20448:	bne	20520 <_obstack_memory_used@@Base+0x288>
   2044c:	ldrb	r3, [r0, #2]
   20450:	bic	r3, r3, #32
   20454:	cmp	r3, #70	; 0x46
   20458:	bne	20520 <_obstack_memory_used@@Base+0x288>
   2045c:	ldrb	r3, [r0, #3]
   20460:	cmp	r3, #45	; 0x2d
   20464:	bne	20520 <_obstack_memory_used@@Base+0x288>
   20468:	ldrb	r3, [r0, #4]
   2046c:	cmp	r3, #56	; 0x38
   20470:	bne	20520 <_obstack_memory_used@@Base+0x288>
   20474:	ldrb	r3, [r0, #5]
   20478:	cmp	r3, #0
   2047c:	bne	20520 <_obstack_memory_used@@Base+0x288>
   20480:	ldrb	r2, [r4]
   20484:	movw	r3, #37604	; 0x92e4
   20488:	movt	r3, #2
   2048c:	movw	r4, #37616	; 0x92f0
   20490:	movt	r4, #2
   20494:	cmp	r2, #96	; 0x60
   20498:	movne	r4, r3
   2049c:	b	20414 <_obstack_memory_used@@Base+0x17c>
   204a0:	cmp	r3, #71	; 0x47
   204a4:	bne	20520 <_obstack_memory_used@@Base+0x288>
   204a8:	ldrb	r3, [r0, #1]
   204ac:	bic	r3, r3, #32
   204b0:	cmp	r3, #66	; 0x42
   204b4:	bne	20520 <_obstack_memory_used@@Base+0x288>
   204b8:	ldrb	r3, [r0, #2]
   204bc:	cmp	r3, #49	; 0x31
   204c0:	bne	20520 <_obstack_memory_used@@Base+0x288>
   204c4:	ldrb	r3, [r0, #3]
   204c8:	cmp	r3, #56	; 0x38
   204cc:	bne	20520 <_obstack_memory_used@@Base+0x288>
   204d0:	ldrb	r3, [r0, #4]
   204d4:	cmp	r3, #48	; 0x30
   204d8:	bne	20520 <_obstack_memory_used@@Base+0x288>
   204dc:	ldrb	r3, [r0, #5]
   204e0:	cmp	r3, #51	; 0x33
   204e4:	bne	20520 <_obstack_memory_used@@Base+0x288>
   204e8:	ldrb	r3, [r0, #6]
   204ec:	cmp	r3, #48	; 0x30
   204f0:	bne	20520 <_obstack_memory_used@@Base+0x288>
   204f4:	ldrb	r3, [r0, #7]
   204f8:	cmp	r3, #0
   204fc:	bne	20520 <_obstack_memory_used@@Base+0x288>
   20500:	ldrb	r2, [r4]
   20504:	movw	r3, #37608	; 0x92e8
   20508:	movt	r3, #2
   2050c:	movw	r4, #37612	; 0x92ec
   20510:	movt	r4, #2
   20514:	cmp	r2, #96	; 0x60
   20518:	movne	r4, r3
   2051c:	b	20414 <_obstack_memory_used@@Base+0x17c>
   20520:	movw	r3, #37620	; 0x92f4
   20524:	movt	r3, #2
   20528:	cmp	r6, #9
   2052c:	movw	r4, #37600	; 0x92e0
   20530:	movt	r4, #2
   20534:	movne	r4, r3
   20538:	b	20414 <_obstack_memory_used@@Base+0x17c>
   2053c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20540:	strd	r6, [sp, #8]
   20544:	strd	r8, [sp, #16]
   20548:	strd	sl, [sp, #24]
   2054c:	mov	fp, r0
   20550:	mov	sl, r1
   20554:	str	lr, [sp, #32]
   20558:	sub	sp, sp, #116	; 0x74
   2055c:	ldr	r8, [sp, #152]	; 0x98
   20560:	str	r3, [sp, #28]
   20564:	ldr	r3, [sp, #156]	; 0x9c
   20568:	str	r2, [sp, #32]
   2056c:	and	r4, r3, #2
   20570:	ubfx	r3, r3, #1, #1
   20574:	str	r3, [sp, #44]	; 0x2c
   20578:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   2057c:	str	r0, [sp, #64]	; 0x40
   20580:	cmp	r8, #10
   20584:	ldrls	pc, [pc, r8, lsl #2]
   20588:	b	21cf8 <_obstack_memory_used@@Base+0x1a60>
   2058c:	muleq	r2, r0, r9
   20590:	andeq	r0, r2, ip, lsr #20
   20594:	andeq	r1, r2, r8
   20598:	andeq	r0, r2, ip, asr #20
   2059c:	strdeq	r0, [r2], -r4
   205a0:	andeq	r0, r2, r0, asr #18
   205a4:	andeq	r0, r2, r0, asr #19
   205a8:	strdeq	r0, [r2], -ip
   205ac:			; <UNDEFINED> instruction: 0x000205b8
   205b0:			; <UNDEFINED> instruction: 0x000205b8
   205b4:			; <UNDEFINED> instruction: 0x000205b8
   205b8:	cmp	r8, #10
   205bc:	beq	205e8 <_obstack_memory_used@@Base+0x350>
   205c0:	mov	r1, r8
   205c4:	movw	r0, #37624	; 0x92f8
   205c8:	movt	r0, #2
   205cc:	bl	203e4 <_obstack_memory_used@@Base+0x14c>
   205d0:	mov	r1, r8
   205d4:	str	r0, [sp, #164]	; 0xa4
   205d8:	movw	r0, #37620	; 0x92f4
   205dc:	movt	r0, #2
   205e0:	bl	203e4 <_obstack_memory_used@@Base+0x14c>
   205e4:	str	r0, [sp, #168]	; 0xa8
   205e8:	cmp	r4, #0
   205ec:	movne	r4, #0
   205f0:	beq	219d4 <_obstack_memory_used@@Base+0x173c>
   205f4:	mov	r3, #1
   205f8:	mov	r5, #0
   205fc:	ldr	r0, [sp, #168]	; 0xa8
   20600:	str	r3, [sp, #36]	; 0x24
   20604:	str	r3, [sp, #40]	; 0x28
   20608:	str	r5, [sp, #68]	; 0x44
   2060c:	bl	11b94 <strlen@plt>
   20610:	ldr	r3, [sp, #168]	; 0xa8
   20614:	str	r5, [sp, #48]	; 0x30
   20618:	str	r0, [sp, #56]	; 0x38
   2061c:	str	r3, [sp, #60]	; 0x3c
   20620:	str	r5, [sp, #72]	; 0x48
   20624:	str	r8, [sp, #152]	; 0x98
   20628:	mov	r8, fp
   2062c:	mov	r9, #0
   20630:	ldr	fp, [sp, #152]	; 0x98
   20634:	ldr	r3, [sp, #28]
   20638:	cmn	r3, #1
   2063c:	beq	20b9c <_obstack_memory_used@@Base+0x904>
   20640:	ldr	r3, [sp, #28]
   20644:	subs	r6, r3, r9
   20648:	movne	r6, #1
   2064c:	cmp	r6, #0
   20650:	beq	20bb4 <_obstack_memory_used@@Base+0x91c>
   20654:	ldr	r0, [sp, #32]
   20658:	ldr	r7, [sp, #40]	; 0x28
   2065c:	add	r3, r0, r9
   20660:	cmp	fp, #2
   20664:	moveq	r7, #0
   20668:	andne	r7, r7, #1
   2066c:	str	r3, [sp, #52]	; 0x34
   20670:	cmp	r7, #0
   20674:	beq	21050 <_obstack_memory_used@@Base+0xdb8>
   20678:	ldr	r2, [sp, #56]	; 0x38
   2067c:	cmp	r2, #0
   20680:	beq	212ec <_obstack_memory_used@@Base+0x1054>
   20684:	ldr	r1, [sp, #28]
   20688:	cmp	r2, #1
   2068c:	mov	r3, r2
   20690:	movls	r3, #0
   20694:	movhi	r3, #1
   20698:	add	r5, r9, r2
   2069c:	cmn	r1, #1
   206a0:	movne	r3, #0
   206a4:	cmp	r3, #0
   206a8:	beq	206b4 <_obstack_memory_used@@Base+0x41c>
   206ac:	bl	11b94 <strlen@plt>
   206b0:	str	r0, [sp, #28]
   206b4:	ldr	r3, [sp, #28]
   206b8:	cmp	r5, r3
   206bc:	bhi	212ec <_obstack_memory_used@@Base+0x1054>
   206c0:	ldr	r0, [sp, #52]	; 0x34
   206c4:	ldr	r2, [sp, #56]	; 0x38
   206c8:	ldr	r1, [sp, #60]	; 0x3c
   206cc:	bl	1196c <memcmp@plt>
   206d0:	cmp	r0, #0
   206d4:	bne	212ec <_obstack_memory_used@@Base+0x1054>
   206d8:	ldr	r3, [sp, #44]	; 0x2c
   206dc:	cmp	r3, #0
   206e0:	bne	21c1c <_obstack_memory_used@@Base+0x1984>
   206e4:	ldr	r3, [sp, #52]	; 0x34
   206e8:	ldrb	r5, [r3]
   206ec:	cmp	r5, #126	; 0x7e
   206f0:	ldrls	pc, [pc, r5, lsl #2]
   206f4:	b	20fac <_obstack_memory_used@@Base+0xd14>
   206f8:			; <UNDEFINED> instruction: 0x00020eb0
   206fc:	andeq	r0, r2, ip, lsr #31
   20700:	andeq	r0, r2, ip, lsr #31
   20704:	andeq	r0, r2, ip, lsr #31
   20708:	andeq	r0, r2, ip, lsr #31
   2070c:	andeq	r0, r2, ip, lsr #31
   20710:	andeq	r0, r2, ip, lsr #31
   20714:	andeq	r0, r2, r4, lsl #29
   20718:	andeq	r0, r2, ip, ror lr
   2071c:	andeq	r0, r2, r4, asr #27
   20720:	andeq	r0, r2, r0, ror lr
   20724:			; <UNDEFINED> instruction: 0x00020dbc
   20728:	andeq	r0, r2, ip, asr #28
   2072c:	muleq	r2, r8, lr
   20730:	andeq	r0, r2, ip, lsr #31
   20734:	andeq	r0, r2, ip, lsr #31
   20738:	andeq	r0, r2, ip, lsr #31
   2073c:	andeq	r0, r2, ip, lsr #31
   20740:	andeq	r0, r2, ip, lsr #31
   20744:	andeq	r0, r2, ip, lsr #31
   20748:	andeq	r0, r2, ip, lsr #31
   2074c:	andeq	r0, r2, ip, lsr #31
   20750:	andeq	r0, r2, ip, lsr #31
   20754:	andeq	r0, r2, ip, lsr #31
   20758:	andeq	r0, r2, ip, lsr #31
   2075c:	andeq	r0, r2, ip, lsr #31
   20760:	andeq	r0, r2, ip, lsr #31
   20764:	andeq	r0, r2, ip, lsr #31
   20768:	andeq	r0, r2, ip, lsr #31
   2076c:	andeq	r0, r2, ip, lsr #31
   20770:	andeq	r0, r2, ip, lsr #31
   20774:	andeq	r0, r2, ip, lsr #31
   20778:	andeq	r0, r2, r8, lsl #31
   2077c:	muleq	r2, r0, lr
   20780:	muleq	r2, r0, lr
   20784:	andeq	r0, r2, ip, ror #30
   20788:	muleq	r2, r0, lr
   2078c:	andeq	r0, r2, r0, lsr #31
   20790:	muleq	r2, r0, lr
   20794:	andeq	r0, r2, ip, ror #25
   20798:	muleq	r2, r0, lr
   2079c:	muleq	r2, r0, lr
   207a0:	muleq	r2, r0, lr
   207a4:	andeq	r0, r2, r0, lsr #31
   207a8:	andeq	r0, r2, r0, lsr #31
   207ac:	andeq	r0, r2, r0, lsr #31
   207b0:	andeq	r0, r2, r0, lsr #31
   207b4:	andeq	r0, r2, r0, lsr #31
   207b8:	andeq	r0, r2, r0, lsr #31
   207bc:	andeq	r0, r2, r0, lsr #31
   207c0:	andeq	r0, r2, r0, lsr #31
   207c4:	andeq	r0, r2, r0, lsr #31
   207c8:	andeq	r0, r2, r0, lsr #31
   207cc:	andeq	r0, r2, r0, lsr #31
   207d0:	andeq	r0, r2, r0, lsr #31
   207d4:	andeq	r0, r2, r0, lsr #31
   207d8:	andeq	r0, r2, r0, lsr #31
   207dc:	andeq	r0, r2, r0, lsr #31
   207e0:	andeq	r0, r2, r0, lsr #31
   207e4:	muleq	r2, r0, lr
   207e8:	muleq	r2, r0, lr
   207ec:	muleq	r2, r0, lr
   207f0:	muleq	r2, r0, lr
   207f4:	andeq	r0, r2, r0, asr #25
   207f8:	andeq	r0, r2, ip, lsr #31
   207fc:	andeq	r0, r2, r0, lsr #31
   20800:	andeq	r0, r2, r0, lsr #31
   20804:	andeq	r0, r2, r0, lsr #31
   20808:	andeq	r0, r2, r0, lsr #31
   2080c:	andeq	r0, r2, r0, lsr #31
   20810:	andeq	r0, r2, r0, lsr #31
   20814:	andeq	r0, r2, r0, lsr #31
   20818:	andeq	r0, r2, r0, lsr #31
   2081c:	andeq	r0, r2, r0, lsr #31
   20820:	andeq	r0, r2, r0, lsr #31
   20824:	andeq	r0, r2, r0, lsr #31
   20828:	andeq	r0, r2, r0, lsr #31
   2082c:	andeq	r0, r2, r0, lsr #31
   20830:	andeq	r0, r2, r0, lsr #31
   20834:	andeq	r0, r2, r0, lsr #31
   20838:	andeq	r0, r2, r0, lsr #31
   2083c:	andeq	r0, r2, r0, lsr #31
   20840:	andeq	r0, r2, r0, lsr #31
   20844:	andeq	r0, r2, r0, lsr #31
   20848:	andeq	r0, r2, r0, lsr #31
   2084c:	andeq	r0, r2, r0, lsr #31
   20850:	andeq	r0, r2, r0, lsr #31
   20854:	andeq	r0, r2, r0, lsr #31
   20858:	andeq	r0, r2, r0, lsr #31
   2085c:	andeq	r0, r2, r0, lsr #31
   20860:	andeq	r0, r2, r0, lsr #31
   20864:	muleq	r2, r0, lr
   20868:	andeq	r0, r2, r8, ror #24
   2086c:	andeq	r0, r2, r0, lsr #31
   20870:	muleq	r2, r0, lr
   20874:	andeq	r0, r2, r0, lsr #31
   20878:	muleq	r2, r0, lr
   2087c:	andeq	r0, r2, r0, lsr #31
   20880:	andeq	r0, r2, r0, lsr #31
   20884:	andeq	r0, r2, r0, lsr #31
   20888:	andeq	r0, r2, r0, lsr #31
   2088c:	andeq	r0, r2, r0, lsr #31
   20890:	andeq	r0, r2, r0, lsr #31
   20894:	andeq	r0, r2, r0, lsr #31
   20898:	andeq	r0, r2, r0, lsr #31
   2089c:	andeq	r0, r2, r0, lsr #31
   208a0:	andeq	r0, r2, r0, lsr #31
   208a4:	andeq	r0, r2, r0, lsr #31
   208a8:	andeq	r0, r2, r0, lsr #31
   208ac:	andeq	r0, r2, r0, lsr #31
   208b0:	andeq	r0, r2, r0, lsr #31
   208b4:	andeq	r0, r2, r0, lsr #31
   208b8:	andeq	r0, r2, r0, lsr #31
   208bc:	andeq	r0, r2, r0, lsr #31
   208c0:	andeq	r0, r2, r0, lsr #31
   208c4:	andeq	r0, r2, r0, lsr #31
   208c8:	andeq	r0, r2, r0, lsr #31
   208cc:	andeq	r0, r2, r0, lsr #31
   208d0:	andeq	r0, r2, r0, lsr #31
   208d4:	andeq	r0, r2, r0, lsr #31
   208d8:	andeq	r0, r2, r0, lsr #31
   208dc:	andeq	r0, r2, r0, lsr #31
   208e0:	andeq	r0, r2, r0, lsr #31
   208e4:	andeq	r0, r2, ip, lsl #21
   208e8:	muleq	r2, r0, lr
   208ec:	andeq	r0, r2, ip, lsl #21
   208f0:	andeq	r0, r2, ip, ror #30
   208f4:	cmp	r4, #0
   208f8:	moveq	r3, #1
   208fc:	streq	r3, [sp, #40]	; 0x28
   20900:	beq	21014 <_obstack_memory_used@@Base+0xd7c>
   20904:	mov	r3, #0
   20908:	mov	r2, #1
   2090c:	mov	r4, r3
   20910:	str	r2, [sp, #36]	; 0x24
   20914:	str	r2, [sp, #44]	; 0x2c
   20918:	str	r2, [sp, #56]	; 0x38
   2091c:	str	r3, [sp, #68]	; 0x44
   20920:	movw	r3, #37620	; 0x92f4
   20924:	movt	r3, #2
   20928:	str	r4, [sp, #40]	; 0x28
   2092c:	mov	r8, #2
   20930:	str	r4, [sp, #48]	; 0x30
   20934:	str	r3, [sp, #60]	; 0x3c
   20938:	str	r4, [sp, #72]	; 0x48
   2093c:	b	20624 <_obstack_memory_used@@Base+0x38c>
   20940:	cmp	r4, #0
   20944:	bne	21b90 <_obstack_memory_used@@Base+0x18f8>
   20948:	cmp	sl, #0
   2094c:	beq	21950 <_obstack_memory_used@@Base+0x16b8>
   20950:	mov	r3, #34	; 0x22
   20954:	mov	r1, r4
   20958:	mov	r2, #1
   2095c:	strb	r3, [fp]
   20960:	movw	r3, #37600	; 0x92e0
   20964:	movt	r3, #2
   20968:	mov	r4, r2
   2096c:	str	r2, [sp, #36]	; 0x24
   20970:	str	r2, [sp, #40]	; 0x28
   20974:	str	r1, [sp, #44]	; 0x2c
   20978:	str	r1, [sp, #48]	; 0x30
   2097c:	str	r2, [sp, #56]	; 0x38
   20980:	str	r3, [sp, #60]	; 0x3c
   20984:	str	r1, [sp, #68]	; 0x44
   20988:	str	r1, [sp, #72]	; 0x48
   2098c:	b	20624 <_obstack_memory_used@@Base+0x38c>
   20990:	mov	r3, #0
   20994:	mov	r4, r8
   20998:	str	r3, [sp, #40]	; 0x28
   2099c:	str	r3, [sp, #44]	; 0x2c
   209a0:	str	r3, [sp, #48]	; 0x30
   209a4:	str	r8, [sp, #56]	; 0x38
   209a8:	str	r3, [sp, #60]	; 0x3c
   209ac:	str	r3, [sp, #68]	; 0x44
   209b0:	mov	r3, #1
   209b4:	str	r3, [sp, #36]	; 0x24
   209b8:	str	r8, [sp, #72]	; 0x48
   209bc:	b	20624 <_obstack_memory_used@@Base+0x38c>
   209c0:	mov	r3, #1
   209c4:	mov	r2, #0
   209c8:	mov	r4, r2
   209cc:	mov	r8, #5
   209d0:	str	r3, [sp, #36]	; 0x24
   209d4:	str	r3, [sp, #40]	; 0x28
   209d8:	str	r3, [sp, #44]	; 0x2c
   209dc:	str	r2, [sp, #48]	; 0x30
   209e0:	str	r3, [sp, #56]	; 0x38
   209e4:	movw	r3, #37600	; 0x92e0
   209e8:	movt	r3, #2
   209ec:	str	r3, [sp, #60]	; 0x3c
   209f0:	str	r2, [sp, #68]	; 0x44
   209f4:	str	r2, [sp, #72]	; 0x48
   209f8:	b	20624 <_obstack_memory_used@@Base+0x38c>
   209fc:	mov	r3, #0
   20a00:	mov	r2, #1
   20a04:	mov	r4, r3
   20a08:	str	r2, [sp, #36]	; 0x24
   20a0c:	str	r2, [sp, #40]	; 0x28
   20a10:	str	r3, [sp, #44]	; 0x2c
   20a14:	str	r3, [sp, #48]	; 0x30
   20a18:	str	r3, [sp, #56]	; 0x38
   20a1c:	str	r3, [sp, #60]	; 0x3c
   20a20:	str	r3, [sp, #68]	; 0x44
   20a24:	str	r3, [sp, #72]	; 0x48
   20a28:	b	20624 <_obstack_memory_used@@Base+0x38c>
   20a2c:	mov	r2, #1
   20a30:	mov	r3, #0
   20a34:	mov	r4, r3
   20a38:	str	r2, [sp, #36]	; 0x24
   20a3c:	str	r2, [sp, #44]	; 0x2c
   20a40:	str	r8, [sp, #56]	; 0x38
   20a44:	str	r3, [sp, #68]	; 0x44
   20a48:	b	20920 <_obstack_memory_used@@Base+0x688>
   20a4c:	mov	r3, #1
   20a50:	mov	r2, #0
   20a54:	mov	r4, r2
   20a58:	mov	r8, #2
   20a5c:	str	r3, [sp, #36]	; 0x24
   20a60:	str	r3, [sp, #40]	; 0x28
   20a64:	str	r3, [sp, #44]	; 0x2c
   20a68:	str	r2, [sp, #48]	; 0x30
   20a6c:	str	r3, [sp, #56]	; 0x38
   20a70:	movw	r3, #37620	; 0x92f4
   20a74:	movt	r3, #2
   20a78:	str	r3, [sp, #60]	; 0x3c
   20a7c:	str	r2, [sp, #68]	; 0x44
   20a80:	str	r2, [sp, #72]	; 0x48
   20a84:	b	20624 <_obstack_memory_used@@Base+0x38c>
   20a88:	mov	r7, #0
   20a8c:	ldr	r3, [sp, #28]
   20a90:	cmn	r3, #1
   20a94:	beq	2156c <_obstack_memory_used@@Base+0x12d4>
   20a98:	ldr	r3, [sp, #28]
   20a9c:	subs	r2, r3, #1
   20aa0:	movne	r2, #1
   20aa4:	sub	r3, fp, #2
   20aa8:	cmp	r2, #0
   20aac:	clz	r3, r3
   20ab0:	lsr	r3, r3, #5
   20ab4:	bne	20ac0 <_obstack_memory_used@@Base+0x828>
   20ab8:	cmp	r9, #0
   20abc:	beq	212cc <_obstack_memory_used@@Base+0x1034>
   20ac0:	mov	r6, #0
   20ac4:	ldr	r2, [sp, #40]	; 0x28
   20ac8:	eor	r2, r2, #1
   20acc:	orrs	r3, r3, r2
   20ad0:	bne	20ca8 <_obstack_memory_used@@Base+0xa10>
   20ad4:	ldr	r2, [sp, #160]	; 0xa0
   20ad8:	cmp	r2, #0
   20adc:	beq	20afc <_obstack_memory_used@@Base+0x864>
   20ae0:	ldr	r0, [sp, #160]	; 0xa0
   20ae4:	ubfx	r1, r5, #5, #8
   20ae8:	and	r2, r5, #31
   20aec:	ldr	r1, [r0, r1, lsl #2]
   20af0:	lsr	r2, r1, r2
   20af4:	tst	r2, #1
   20af8:	bne	20b04 <_obstack_memory_used@@Base+0x86c>
   20afc:	cmp	r7, #0
   20b00:	beq	20d74 <_obstack_memory_used@@Base+0xadc>
   20b04:	ldr	r2, [sp, #44]	; 0x2c
   20b08:	sub	r3, fp, #2
   20b0c:	clz	r3, r3
   20b10:	lsr	r3, r3, #5
   20b14:	cmp	r2, #0
   20b18:	bne	218c0 <_obstack_memory_used@@Base+0x1628>
   20b1c:	ldr	r2, [sp, #48]	; 0x30
   20b20:	eor	r2, r2, #1
   20b24:	ands	r3, r3, r2
   20b28:	beq	20b60 <_obstack_memory_used@@Base+0x8c8>
   20b2c:	cmp	sl, r4
   20b30:	str	r3, [sp, #48]	; 0x30
   20b34:	movhi	r2, #39	; 0x27
   20b38:	strbhi	r2, [r8, r4]
   20b3c:	add	r2, r4, #1
   20b40:	cmp	sl, r2
   20b44:	movhi	r1, #36	; 0x24
   20b48:	strbhi	r1, [r8, r2]
   20b4c:	add	r2, r4, #2
   20b50:	add	r4, r4, #3
   20b54:	cmp	sl, r2
   20b58:	movhi	r1, #39	; 0x27
   20b5c:	strbhi	r1, [r8, r2]
   20b60:	cmp	r4, sl
   20b64:	add	r9, r9, #1
   20b68:	movcc	r3, #92	; 0x5c
   20b6c:	strbcc	r3, [r8, r4]
   20b70:	add	r4, r4, #1
   20b74:	cmp	r4, sl
   20b78:	ldr	r3, [sp, #36]	; 0x24
   20b7c:	strbcc	r5, [r8, r4]
   20b80:	cmp	r6, #0
   20b84:	add	r4, r4, #1
   20b88:	moveq	r3, #0
   20b8c:	str	r3, [sp, #36]	; 0x24
   20b90:	ldr	r3, [sp, #28]
   20b94:	cmn	r3, #1
   20b98:	bne	20640 <_obstack_memory_used@@Base+0x3a8>
   20b9c:	ldr	r3, [sp, #32]
   20ba0:	ldrb	r6, [r3, r9]
   20ba4:	adds	r6, r6, #0
   20ba8:	movne	r6, #1
   20bac:	cmp	r6, #0
   20bb0:	bne	20654 <_obstack_memory_used@@Base+0x3bc>
   20bb4:	str	fp, [sp, #152]	; 0x98
   20bb8:	mov	fp, r8
   20bbc:	cmp	r4, #0
   20bc0:	ldr	r1, [sp, #44]	; 0x2c
   20bc4:	movne	r3, #0
   20bc8:	ldr	r8, [sp, #152]	; 0x98
   20bcc:	sub	r2, r8, #2
   20bd0:	clz	r2, r2
   20bd4:	lsr	r2, r2, #5
   20bd8:	andeq	r3, r2, r1
   20bdc:	cmp	r3, #0
   20be0:	bne	21c9c <_obstack_memory_used@@Base+0x1a04>
   20be4:	eor	r3, r1, #1
   20be8:	ands	r2, r2, r3
   20bec:	beq	21bc8 <_obstack_memory_used@@Base+0x1930>
   20bf0:	ldr	r3, [sp, #68]	; 0x44
   20bf4:	cmp	r3, #0
   20bf8:	beq	21bcc <_obstack_memory_used@@Base+0x1934>
   20bfc:	ldr	r3, [sp, #36]	; 0x24
   20c00:	cmp	r3, #0
   20c04:	bne	21c58 <_obstack_memory_used@@Base+0x19c0>
   20c08:	ldr	r3, [sp, #72]	; 0x48
   20c0c:	adds	r3, r3, #0
   20c10:	movne	r3, #1
   20c14:	cmp	sl, #0
   20c18:	movne	r3, #0
   20c1c:	cmp	r3, #0
   20c20:	ldreq	r2, [sp, #68]	; 0x44
   20c24:	beq	21bcc <_obstack_memory_used@@Base+0x1934>
   20c28:	ldr	r2, [sp, #72]	; 0x48
   20c2c:	str	r3, [sp, #68]	; 0x44
   20c30:	movw	r3, #37620	; 0x92f4
   20c34:	movt	r3, #2
   20c38:	mov	r1, #39	; 0x27
   20c3c:	mov	r4, #1
   20c40:	ldr	sl, [sp, #72]	; 0x48
   20c44:	mov	r8, #2
   20c48:	str	r3, [sp, #60]	; 0x3c
   20c4c:	mov	r3, #0
   20c50:	strb	r1, [fp]
   20c54:	str	r3, [sp, #44]	; 0x2c
   20c58:	str	r4, [sp, #56]	; 0x38
   20c5c:	str	r2, [sp, #72]	; 0x48
   20c60:	b	20624 <_obstack_memory_used@@Base+0x38c>
   20c64:	mov	r7, #0
   20c68:	cmp	fp, #2
   20c6c:	beq	2154c <_obstack_memory_used@@Base+0x12b4>
   20c70:	ldr	r2, [sp, #40]	; 0x28
   20c74:	ldr	r3, [sp, #56]	; 0x38
   20c78:	ldr	r1, [sp, #44]	; 0x2c
   20c7c:	cmp	r3, #0
   20c80:	moveq	r3, #0
   20c84:	andne	r3, r2, r1
   20c88:	cmp	r3, #0
   20c8c:	moveq	r5, #92	; 0x5c
   20c90:	moveq	r3, r5
   20c94:	bne	21558 <_obstack_memory_used@@Base+0x12c0>
   20c98:	ldr	r2, [sp, #40]	; 0x28
   20c9c:	cmp	r2, #0
   20ca0:	bne	21994 <_obstack_memory_used@@Base+0x16fc>
   20ca4:	mov	r6, #0
   20ca8:	ldr	r3, [sp, #44]	; 0x2c
   20cac:	cmp	r3, #0
   20cb0:	beq	21544 <_obstack_memory_used@@Base+0x12ac>
   20cb4:	mov	r3, #0
   20cb8:	b	20ad4 <_obstack_memory_used@@Base+0x83c>
   20cbc:	mov	r7, #0
   20cc0:	cmp	fp, #2
   20cc4:	beq	215bc <_obstack_memory_used@@Base+0x1324>
   20cc8:	cmp	fp, #5
   20ccc:	beq	21580 <_obstack_memory_used@@Base+0x12e8>
   20cd0:	sub	r3, fp, #2
   20cd4:	mov	r6, #0
   20cd8:	clz	r3, r3
   20cdc:	mov	r5, #63	; 0x3f
   20ce0:	lsr	r3, r3, #5
   20ce4:	b	20ac4 <_obstack_memory_used@@Base+0x82c>
   20ce8:	mov	r7, #0
   20cec:	cmp	fp, #2
   20cf0:	movne	r3, #0
   20cf4:	movne	r5, #39	; 0x27
   20cf8:	strne	r6, [sp, #68]	; 0x44
   20cfc:	bne	20ac4 <_obstack_memory_used@@Base+0x82c>
   20d00:	ldr	r3, [sp, #44]	; 0x2c
   20d04:	cmp	r3, #0
   20d08:	bne	219c4 <_obstack_memory_used@@Base+0x172c>
   20d0c:	ldr	r3, [sp, #72]	; 0x48
   20d10:	cmp	sl, #0
   20d14:	clz	r3, r3
   20d18:	lsr	r3, r3, #5
   20d1c:	moveq	r3, #0
   20d20:	cmp	r3, #0
   20d24:	bne	218f0 <_obstack_memory_used@@Base+0x1658>
   20d28:	cmp	sl, r4
   20d2c:	movhi	r3, #39	; 0x27
   20d30:	strbhi	r3, [r8, r4]
   20d34:	add	r3, r4, #1
   20d38:	cmp	sl, r3
   20d3c:	movhi	r2, #92	; 0x5c
   20d40:	strbhi	r2, [r8, r3]
   20d44:	add	r3, r4, #2
   20d48:	cmp	sl, r3
   20d4c:	bls	20d58 <_obstack_memory_used@@Base+0xac0>
   20d50:	mov	r2, #39	; 0x27
   20d54:	strb	r2, [r8, r3]
   20d58:	mov	r3, #0
   20d5c:	cmp	r7, #0
   20d60:	add	r4, r4, #3
   20d64:	mov	r5, #39	; 0x27
   20d68:	str	r3, [sp, #48]	; 0x30
   20d6c:	str	r6, [sp, #68]	; 0x44
   20d70:	bne	20b04 <_obstack_memory_used@@Base+0x86c>
   20d74:	ldr	r2, [sp, #48]	; 0x30
   20d78:	eor	r3, r3, #1
   20d7c:	add	r9, r9, #1
   20d80:	and	r3, r3, r2
   20d84:	uxtb	r3, r3
   20d88:	cmp	r3, #0
   20d8c:	beq	20b74 <_obstack_memory_used@@Base+0x8dc>
   20d90:	cmp	sl, r4
   20d94:	movhi	r3, #39	; 0x27
   20d98:	strbhi	r3, [r8, r4]
   20d9c:	add	r3, r4, #1
   20da0:	add	r4, r4, #2
   20da4:	cmp	sl, r3
   20da8:	movhi	r2, #39	; 0x27
   20dac:	strbhi	r2, [r8, r3]
   20db0:	mov	r3, #0
   20db4:	str	r3, [sp, #48]	; 0x30
   20db8:	b	20b74 <_obstack_memory_used@@Base+0x8dc>
   20dbc:	mov	r3, #118	; 0x76
   20dc0:	b	20c98 <_obstack_memory_used@@Base+0xa00>
   20dc4:	mov	r3, #116	; 0x74
   20dc8:	ldr	r2, [sp, #44]	; 0x2c
   20dcc:	cmp	fp, #2
   20dd0:	movne	r2, #0
   20dd4:	andeq	r2, r2, #1
   20dd8:	cmp	r2, #0
   20ddc:	beq	20c98 <_obstack_memory_used@@Base+0xa00>
   20de0:	mov	fp, r8
   20de4:	mov	r8, #2
   20de8:	ldr	r3, [sp, #40]	; 0x28
   20dec:	cmp	r3, #0
   20df0:	movne	r8, #4
   20df4:	mov	lr, #0
   20df8:	mov	r0, fp
   20dfc:	ldr	r2, [sp, #32]
   20e00:	ldr	r3, [sp, #156]	; 0x9c
   20e04:	ldr	r1, [sp, #164]	; 0xa4
   20e08:	bic	ip, r3, #2
   20e0c:	ldr	r3, [sp, #28]
   20e10:	stm	sp, {r8, ip, lr}
   20e14:	ldr	ip, [sp, #168]	; 0xa8
   20e18:	str	r1, [sp, #12]
   20e1c:	mov	r1, sl
   20e20:	str	ip, [sp, #16]
   20e24:	bl	2053c <_obstack_memory_used@@Base+0x2a4>
   20e28:	mov	r4, r0
   20e2c:	mov	r0, r4
   20e30:	add	sp, sp, #116	; 0x74
   20e34:	ldrd	r4, [sp]
   20e38:	ldrd	r6, [sp, #8]
   20e3c:	ldrd	r8, [sp, #16]
   20e40:	ldrd	sl, [sp, #24]
   20e44:	add	sp, sp, #32
   20e48:	pop	{pc}		; (ldr pc, [sp], #4)
   20e4c:	mov	r5, #102	; 0x66
   20e50:	ldr	r2, [sp, #44]	; 0x2c
   20e54:	sub	r3, fp, #2
   20e58:	clz	r3, r3
   20e5c:	lsr	r3, r3, #5
   20e60:	cmp	r2, #0
   20e64:	bne	218c0 <_obstack_memory_used@@Base+0x1628>
   20e68:	mov	r6, r2
   20e6c:	b	20b60 <_obstack_memory_used@@Base+0x8c8>
   20e70:	mov	r5, #110	; 0x6e
   20e74:	mov	r6, #0
   20e78:	b	20b04 <_obstack_memory_used@@Base+0x86c>
   20e7c:	mov	r5, #98	; 0x62
   20e80:	b	20e50 <_obstack_memory_used@@Base+0xbb8>
   20e84:	mov	r5, #97	; 0x61
   20e88:	b	20e50 <_obstack_memory_used@@Base+0xbb8>
   20e8c:	mov	r7, #0
   20e90:	mov	r6, #0
   20e94:	b	20cb4 <_obstack_memory_used@@Base+0xa1c>
   20e98:	mov	r5, #114	; 0x72
   20e9c:	b	20e74 <_obstack_memory_used@@Base+0xbdc>
   20ea0:	ldr	r3, [sp, #44]	; 0x2c
   20ea4:	cmp	r3, #0
   20ea8:	bne	21c38 <_obstack_memory_used@@Base+0x19a0>
   20eac:	mov	r7, r3
   20eb0:	ldr	r3, [sp, #48]	; 0x30
   20eb4:	sub	r2, fp, #2
   20eb8:	clz	r2, r2
   20ebc:	lsr	r2, r2, #5
   20ec0:	eor	r3, r3, #1
   20ec4:	ands	r3, r2, r3
   20ec8:	beq	218dc <_obstack_memory_used@@Base+0x1644>
   20ecc:	cmp	sl, r4
   20ed0:	movhi	r1, #39	; 0x27
   20ed4:	strbhi	r1, [r8, r4]
   20ed8:	add	r1, r4, #1
   20edc:	cmp	sl, r1
   20ee0:	movhi	r0, #36	; 0x24
   20ee4:	strbhi	r0, [r8, r1]
   20ee8:	add	r1, r4, #2
   20eec:	cmp	sl, r1
   20ef0:	movhi	r0, #39	; 0x27
   20ef4:	strbhi	r0, [r8, r1]
   20ef8:	add	r1, r4, #3
   20efc:	cmp	sl, r1
   20f00:	bls	21934 <_obstack_memory_used@@Base+0x169c>
   20f04:	mov	r4, r1
   20f08:	mov	r1, #92	; 0x5c
   20f0c:	mov	r0, r4
   20f10:	str	r3, [sp, #48]	; 0x30
   20f14:	strb	r1, [r8, r4]
   20f18:	cmp	fp, #2
   20f1c:	add	r4, r4, #1
   20f20:	beq	21984 <_obstack_memory_used@@Base+0x16ec>
   20f24:	ldr	r1, [sp, #28]
   20f28:	add	r3, r9, #1
   20f2c:	cmp	r3, r1
   20f30:	bcs	20f48 <_obstack_memory_used@@Base+0xcb0>
   20f34:	ldr	r1, [sp, #32]
   20f38:	ldrb	r3, [r1, r3]
   20f3c:	sub	r3, r3, #48	; 0x30
   20f40:	cmp	r3, #9
   20f44:	bls	2199c <_obstack_memory_used@@Base+0x1704>
   20f48:	mov	r5, #48	; 0x30
   20f4c:	ldr	r3, [sp, #40]	; 0x28
   20f50:	eor	r3, r3, #1
   20f54:	orrs	r2, r2, r3
   20f58:	mov	r3, r6
   20f5c:	moveq	r6, r2
   20f60:	beq	20ad4 <_obstack_memory_used@@Base+0x83c>
   20f64:	mov	r6, #0
   20f68:	b	20afc <_obstack_memory_used@@Base+0x864>
   20f6c:	cmp	r9, #0
   20f70:	mov	r2, r7
   20f74:	bne	21514 <_obstack_memory_used@@Base+0x127c>
   20f78:	mov	r6, r7
   20f7c:	mov	r3, r9
   20f80:	mov	r7, r2
   20f84:	b	20ac4 <_obstack_memory_used@@Base+0x82c>
   20f88:	mov	r2, r7
   20f8c:	mov	r6, r7
   20f90:	mov	r3, #0
   20f94:	mov	r7, r2
   20f98:	mov	r5, #32
   20f9c:	b	20ac4 <_obstack_memory_used@@Base+0x82c>
   20fa0:	mov	r6, r7
   20fa4:	b	20cb4 <_obstack_memory_used@@Base+0xa1c>
   20fa8:	mov	r7, #0
   20fac:	ldr	r3, [sp, #64]	; 0x40
   20fb0:	cmp	r3, #1
   20fb4:	bne	215d4 <_obstack_memory_used@@Base+0x133c>
   20fb8:	bl	11b58 <__ctype_b_loc@plt>
   20fbc:	ldr	r2, [r0]
   20fc0:	sxth	r3, r5
   20fc4:	lsl	r3, r3, #1
   20fc8:	ldr	r1, [sp, #64]	; 0x40
   20fcc:	ldrh	r3, [r2, r3]
   20fd0:	mov	ip, r1
   20fd4:	and	r3, r3, #16384	; 0x4000
   20fd8:	cmp	r3, #0
   20fdc:	ldr	r3, [sp, #40]	; 0x28
   20fe0:	movne	r6, #1
   20fe4:	moveq	r6, #0
   20fe8:	movne	r2, #0
   20fec:	andeq	r2, r3, #1
   20ff0:	cmp	r2, #0
   20ff4:	bne	2191c <_obstack_memory_used@@Base+0x1684>
   20ff8:	sub	r3, fp, #2
   20ffc:	clz	r3, r3
   21000:	lsr	r3, r3, #5
   21004:	b	20ac4 <_obstack_memory_used@@Base+0x82c>
   21008:	cmp	r4, #0
   2100c:	bne	21cac <_obstack_memory_used@@Base+0x1a14>
   21010:	str	r4, [sp, #40]	; 0x28
   21014:	cmp	sl, #0
   21018:	bne	21cdc <_obstack_memory_used@@Base+0x1a44>
   2101c:	mov	r3, #1
   21020:	movw	r2, #37620	; 0x92f4
   21024:	movt	r2, #2
   21028:	mov	r4, r3
   2102c:	mov	r8, #2
   21030:	str	r3, [sp, #36]	; 0x24
   21034:	str	sl, [sp, #44]	; 0x2c
   21038:	str	sl, [sp, #48]	; 0x30
   2103c:	str	r3, [sp, #56]	; 0x38
   21040:	str	r2, [sp, #60]	; 0x3c
   21044:	str	sl, [sp, #68]	; 0x44
   21048:	str	sl, [sp, #72]	; 0x48
   2104c:	b	20624 <_obstack_memory_used@@Base+0x38c>
   21050:	ldr	r3, [sp, #32]
   21054:	ldrb	r5, [r3, r9]
   21058:	cmp	r5, #126	; 0x7e
   2105c:	ldrls	pc, [pc, r5, lsl #2]
   21060:	b	20fac <_obstack_memory_used@@Base+0xd14>
   21064:	andeq	r1, r2, r8, lsl #5
   21068:	andeq	r0, r2, ip, lsr #31
   2106c:	andeq	r0, r2, ip, lsr #31
   21070:	andeq	r0, r2, ip, lsr #31
   21074:	andeq	r0, r2, ip, lsr #31
   21078:	andeq	r0, r2, ip, lsr #31
   2107c:	andeq	r0, r2, ip, lsr #31
   21080:	andeq	r1, r2, r0, lsl #5
   21084:	andeq	r1, r2, r8, ror r2
   21088:	andeq	r0, r2, r4, asr #27
   2108c:	andeq	r1, r2, r0, ror r2
   21090:			; <UNDEFINED> instruction: 0x00020dbc
   21094:	andeq	r1, r2, r8, ror #4
   21098:	andeq	r1, r2, r0, ror #4
   2109c:	andeq	r0, r2, ip, lsr #31
   210a0:	andeq	r0, r2, ip, lsr #31
   210a4:	andeq	r0, r2, ip, lsr #31
   210a8:	andeq	r0, r2, ip, lsr #31
   210ac:	andeq	r0, r2, ip, lsr #31
   210b0:	andeq	r0, r2, ip, lsr #31
   210b4:	andeq	r0, r2, ip, lsr #31
   210b8:	andeq	r0, r2, ip, lsr #31
   210bc:	andeq	r0, r2, ip, lsr #31
   210c0:	andeq	r0, r2, ip, lsr #31
   210c4:	andeq	r0, r2, ip, lsr #31
   210c8:	andeq	r0, r2, ip, lsr #31
   210cc:	andeq	r0, r2, ip, lsr #31
   210d0:	andeq	r0, r2, ip, lsr #31
   210d4:	andeq	r0, r2, ip, lsr #31
   210d8:	andeq	r0, r2, ip, lsr #31
   210dc:	andeq	r0, r2, ip, lsr #31
   210e0:	andeq	r0, r2, ip, lsr #31
   210e4:	ldrdeq	r1, [r2], -ip
   210e8:			; <UNDEFINED> instruction: 0x000212bc
   210ec:			; <UNDEFINED> instruction: 0x000212bc
   210f0:	andeq	r1, r2, ip, lsr #5
   210f4:			; <UNDEFINED> instruction: 0x000212bc
   210f8:	strdeq	r0, [r2], -r8
   210fc:			; <UNDEFINED> instruction: 0x000212bc
   21100:	andeq	r0, r2, ip, ror #25
   21104:			; <UNDEFINED> instruction: 0x000212bc
   21108:			; <UNDEFINED> instruction: 0x000212bc
   2110c:			; <UNDEFINED> instruction: 0x000212bc
   21110:	strdeq	r0, [r2], -r8
   21114:	strdeq	r0, [r2], -r8
   21118:	strdeq	r0, [r2], -r8
   2111c:	strdeq	r0, [r2], -r8
   21120:	strdeq	r0, [r2], -r8
   21124:	strdeq	r0, [r2], -r8
   21128:	strdeq	r0, [r2], -r8
   2112c:	strdeq	r0, [r2], -r8
   21130:	strdeq	r0, [r2], -r8
   21134:	strdeq	r0, [r2], -r8
   21138:	strdeq	r0, [r2], -r8
   2113c:	strdeq	r0, [r2], -r8
   21140:	strdeq	r0, [r2], -r8
   21144:	strdeq	r0, [r2], -r8
   21148:	strdeq	r0, [r2], -r8
   2114c:	strdeq	r0, [r2], -r8
   21150:			; <UNDEFINED> instruction: 0x000212bc
   21154:			; <UNDEFINED> instruction: 0x000212bc
   21158:			; <UNDEFINED> instruction: 0x000212bc
   2115c:			; <UNDEFINED> instruction: 0x000212bc
   21160:	andeq	r0, r2, r0, asr #25
   21164:	andeq	r0, r2, ip, lsr #31
   21168:	strdeq	r0, [r2], -r8
   2116c:	strdeq	r0, [r2], -r8
   21170:	strdeq	r0, [r2], -r8
   21174:	strdeq	r0, [r2], -r8
   21178:	strdeq	r0, [r2], -r8
   2117c:	strdeq	r0, [r2], -r8
   21180:	strdeq	r0, [r2], -r8
   21184:	strdeq	r0, [r2], -r8
   21188:	strdeq	r0, [r2], -r8
   2118c:	strdeq	r0, [r2], -r8
   21190:	strdeq	r0, [r2], -r8
   21194:	strdeq	r0, [r2], -r8
   21198:	strdeq	r0, [r2], -r8
   2119c:	strdeq	r0, [r2], -r8
   211a0:	strdeq	r0, [r2], -r8
   211a4:	strdeq	r0, [r2], -r8
   211a8:	strdeq	r0, [r2], -r8
   211ac:	strdeq	r0, [r2], -r8
   211b0:	strdeq	r0, [r2], -r8
   211b4:	strdeq	r0, [r2], -r8
   211b8:	strdeq	r0, [r2], -r8
   211bc:	strdeq	r0, [r2], -r8
   211c0:	strdeq	r0, [r2], -r8
   211c4:	strdeq	r0, [r2], -r8
   211c8:	strdeq	r0, [r2], -r8
   211cc:	strdeq	r0, [r2], -r8
   211d0:			; <UNDEFINED> instruction: 0x000212bc
   211d4:	andeq	r0, r2, r8, ror #24
   211d8:	strdeq	r0, [r2], -r8
   211dc:			; <UNDEFINED> instruction: 0x000212bc
   211e0:	strdeq	r0, [r2], -r8
   211e4:			; <UNDEFINED> instruction: 0x000212bc
   211e8:	strdeq	r0, [r2], -r8
   211ec:	strdeq	r0, [r2], -r8
   211f0:	strdeq	r0, [r2], -r8
   211f4:	strdeq	r0, [r2], -r8
   211f8:	strdeq	r0, [r2], -r8
   211fc:	strdeq	r0, [r2], -r8
   21200:	strdeq	r0, [r2], -r8
   21204:	strdeq	r0, [r2], -r8
   21208:	strdeq	r0, [r2], -r8
   2120c:	strdeq	r0, [r2], -r8
   21210:	strdeq	r0, [r2], -r8
   21214:	strdeq	r0, [r2], -r8
   21218:	strdeq	r0, [r2], -r8
   2121c:	strdeq	r0, [r2], -r8
   21220:	strdeq	r0, [r2], -r8
   21224:	strdeq	r0, [r2], -r8
   21228:	strdeq	r0, [r2], -r8
   2122c:	strdeq	r0, [r2], -r8
   21230:	strdeq	r0, [r2], -r8
   21234:	strdeq	r0, [r2], -r8
   21238:	strdeq	r0, [r2], -r8
   2123c:	strdeq	r0, [r2], -r8
   21240:	strdeq	r0, [r2], -r8
   21244:	strdeq	r0, [r2], -r8
   21248:	strdeq	r0, [r2], -r8
   2124c:	strdeq	r0, [r2], -r8
   21250:	andeq	r0, r2, ip, lsl #21
   21254:			; <UNDEFINED> instruction: 0x000212bc
   21258:	andeq	r0, r2, ip, lsl #21
   2125c:	andeq	r1, r2, ip, lsr #5
   21260:	mov	r3, #114	; 0x72
   21264:	b	20dc8 <_obstack_memory_used@@Base+0xb30>
   21268:	mov	r3, #102	; 0x66
   2126c:	b	20c98 <_obstack_memory_used@@Base+0xa00>
   21270:	mov	r3, #110	; 0x6e
   21274:	b	20dc8 <_obstack_memory_used@@Base+0xb30>
   21278:	mov	r3, #98	; 0x62
   2127c:	b	20c98 <_obstack_memory_used@@Base+0xa00>
   21280:	mov	r3, #97	; 0x61
   21284:	b	20c98 <_obstack_memory_used@@Base+0xa00>
   21288:	ldr	r3, [sp, #40]	; 0x28
   2128c:	cmp	r3, #0
   21290:	bne	20ea0 <_obstack_memory_used@@Base+0xc08>
   21294:	ldr	r3, [sp, #156]	; 0x9c
   21298:	tst	r3, #1
   2129c:	addne	r9, r9, #1
   212a0:	bne	20634 <_obstack_memory_used@@Base+0x39c>
   212a4:	ldr	r7, [sp, #40]	; 0x28
   212a8:	b	20ca4 <_obstack_memory_used@@Base+0xa0c>
   212ac:	sub	r3, fp, #2
   212b0:	clz	r3, r3
   212b4:	lsr	r3, r3, #5
   212b8:	b	20ab8 <_obstack_memory_used@@Base+0x820>
   212bc:	sub	r3, fp, #2
   212c0:	mov	r6, #0
   212c4:	clz	r3, r3
   212c8:	lsr	r3, r3, #5
   212cc:	ldr	r2, [sp, #44]	; 0x2c
   212d0:	tst	r2, r3
   212d4:	beq	20ac4 <_obstack_memory_used@@Base+0x82c>
   212d8:	b	20de0 <_obstack_memory_used@@Base+0xb48>
   212dc:	sub	r3, fp, #2
   212e0:	clz	r3, r3
   212e4:	lsr	r3, r3, #5
   212e8:	b	212cc <_obstack_memory_used@@Base+0x1034>
   212ec:	ldr	r3, [sp, #52]	; 0x34
   212f0:	ldrb	r5, [r3]
   212f4:	cmp	r5, #126	; 0x7e
   212f8:	ldrls	pc, [pc, r5, lsl #2]
   212fc:	b	20fa8 <_obstack_memory_used@@Base+0xd10>
   21300:	andeq	r0, r2, r0, lsr #29
   21304:	andeq	r0, r2, r8, lsr #31
   21308:	andeq	r0, r2, r8, lsr #31
   2130c:	andeq	r0, r2, r8, lsr #31
   21310:	andeq	r0, r2, r8, lsr #31
   21314:	andeq	r0, r2, r8, lsr #31
   21318:	andeq	r0, r2, r8, lsr #31
   2131c:	andeq	r0, r2, r4, lsl #29
   21320:	andeq	r0, r2, ip, ror lr
   21324:	andeq	r1, r2, r8, lsr r5
   21328:	andeq	r0, r2, r0, ror lr
   2132c:	andeq	r1, r2, ip, lsr #10
   21330:	andeq	r0, r2, ip, asr #28
   21334:	muleq	r2, r8, lr
   21338:	andeq	r0, r2, r8, lsr #31
   2133c:	andeq	r0, r2, r8, lsr #31
   21340:	andeq	r0, r2, r8, lsr #31
   21344:	andeq	r0, r2, r8, lsr #31
   21348:	andeq	r0, r2, r8, lsr #31
   2134c:	andeq	r0, r2, r8, lsr #31
   21350:	andeq	r0, r2, r8, lsr #31
   21354:	andeq	r0, r2, r8, lsr #31
   21358:	andeq	r0, r2, r8, lsr #31
   2135c:	andeq	r0, r2, r8, lsr #31
   21360:	andeq	r0, r2, r8, lsr #31
   21364:	andeq	r0, r2, r8, lsr #31
   21368:	andeq	r0, r2, r8, lsr #31
   2136c:	andeq	r0, r2, r8, lsr #31
   21370:	andeq	r0, r2, r8, lsr #31
   21374:	andeq	r0, r2, r8, lsr #31
   21378:	andeq	r0, r2, r8, lsr #31
   2137c:	andeq	r0, r2, r8, lsr #31
   21380:	andeq	r1, r2, r4, lsr #10
   21384:	andeq	r0, r2, ip, lsl #29
   21388:	andeq	r0, r2, ip, lsl #29
   2138c:	andeq	r1, r2, r8, lsl #10
   21390:	andeq	r0, r2, ip, lsl #29
   21394:	strdeq	r1, [r2], -ip
   21398:	andeq	r0, r2, ip, lsl #29
   2139c:	andeq	r0, r2, r8, ror #25
   213a0:	andeq	r0, r2, ip, lsl #29
   213a4:	andeq	r0, r2, ip, lsl #29
   213a8:	andeq	r0, r2, ip, lsl #29
   213ac:	strdeq	r1, [r2], -ip
   213b0:	strdeq	r1, [r2], -ip
   213b4:	strdeq	r1, [r2], -ip
   213b8:	strdeq	r1, [r2], -ip
   213bc:	strdeq	r1, [r2], -ip
   213c0:	strdeq	r1, [r2], -ip
   213c4:	strdeq	r1, [r2], -ip
   213c8:	strdeq	r1, [r2], -ip
   213cc:	strdeq	r1, [r2], -ip
   213d0:	strdeq	r1, [r2], -ip
   213d4:	strdeq	r1, [r2], -ip
   213d8:	strdeq	r1, [r2], -ip
   213dc:	strdeq	r1, [r2], -ip
   213e0:	strdeq	r1, [r2], -ip
   213e4:	strdeq	r1, [r2], -ip
   213e8:	strdeq	r1, [r2], -ip
   213ec:	andeq	r0, r2, ip, lsl #29
   213f0:	andeq	r0, r2, ip, lsl #29
   213f4:	andeq	r0, r2, ip, lsl #29
   213f8:	andeq	r0, r2, ip, lsl #29
   213fc:			; <UNDEFINED> instruction: 0x00020cbc
   21400:	andeq	r0, r2, r8, lsr #31
   21404:	strdeq	r1, [r2], -ip
   21408:	strdeq	r1, [r2], -ip
   2140c:	strdeq	r1, [r2], -ip
   21410:	strdeq	r1, [r2], -ip
   21414:	strdeq	r1, [r2], -ip
   21418:	strdeq	r1, [r2], -ip
   2141c:	strdeq	r1, [r2], -ip
   21420:	strdeq	r1, [r2], -ip
   21424:	strdeq	r1, [r2], -ip
   21428:	strdeq	r1, [r2], -ip
   2142c:	strdeq	r1, [r2], -ip
   21430:	strdeq	r1, [r2], -ip
   21434:	strdeq	r1, [r2], -ip
   21438:	strdeq	r1, [r2], -ip
   2143c:	strdeq	r1, [r2], -ip
   21440:	strdeq	r1, [r2], -ip
   21444:	strdeq	r1, [r2], -ip
   21448:	strdeq	r1, [r2], -ip
   2144c:	strdeq	r1, [r2], -ip
   21450:	strdeq	r1, [r2], -ip
   21454:	strdeq	r1, [r2], -ip
   21458:	strdeq	r1, [r2], -ip
   2145c:	strdeq	r1, [r2], -ip
   21460:	strdeq	r1, [r2], -ip
   21464:	strdeq	r1, [r2], -ip
   21468:	strdeq	r1, [r2], -ip
   2146c:	andeq	r0, r2, ip, lsl #29
   21470:	andeq	r0, r2, r4, ror #24
   21474:	strdeq	r1, [r2], -ip
   21478:	andeq	r0, r2, ip, lsl #29
   2147c:	strdeq	r1, [r2], -ip
   21480:	andeq	r0, r2, ip, lsl #29
   21484:	strdeq	r1, [r2], -ip
   21488:	strdeq	r1, [r2], -ip
   2148c:	strdeq	r1, [r2], -ip
   21490:	strdeq	r1, [r2], -ip
   21494:	strdeq	r1, [r2], -ip
   21498:	strdeq	r1, [r2], -ip
   2149c:	strdeq	r1, [r2], -ip
   214a0:	strdeq	r1, [r2], -ip
   214a4:	strdeq	r1, [r2], -ip
   214a8:	strdeq	r1, [r2], -ip
   214ac:	strdeq	r1, [r2], -ip
   214b0:	strdeq	r1, [r2], -ip
   214b4:	strdeq	r1, [r2], -ip
   214b8:	strdeq	r1, [r2], -ip
   214bc:	strdeq	r1, [r2], -ip
   214c0:	strdeq	r1, [r2], -ip
   214c4:	strdeq	r1, [r2], -ip
   214c8:	strdeq	r1, [r2], -ip
   214cc:	strdeq	r1, [r2], -ip
   214d0:	strdeq	r1, [r2], -ip
   214d4:	strdeq	r1, [r2], -ip
   214d8:	strdeq	r1, [r2], -ip
   214dc:	strdeq	r1, [r2], -ip
   214e0:	strdeq	r1, [r2], -ip
   214e4:	strdeq	r1, [r2], -ip
   214e8:	strdeq	r1, [r2], -ip
   214ec:	andeq	r0, r2, r8, lsl #21
   214f0:	andeq	r0, r2, ip, lsl #29
   214f4:	andeq	r0, r2, r8, lsl #21
   214f8:	andeq	r1, r2, r8, lsl #10
   214fc:	mov	r6, r7
   21500:	mov	r7, #0
   21504:	b	20cb4 <_obstack_memory_used@@Base+0xa1c>
   21508:	cmp	r9, #0
   2150c:	mov	r2, #0
   21510:	beq	20f78 <_obstack_memory_used@@Base+0xce0>
   21514:	mov	r6, #0
   21518:	mov	r7, r2
   2151c:	mov	r3, r6
   21520:	b	20ad4 <_obstack_memory_used@@Base+0x83c>
   21524:	mov	r2, #0
   21528:	b	20f8c <_obstack_memory_used@@Base+0xcf4>
   2152c:	mov	r7, #0
   21530:	mov	r3, #118	; 0x76
   21534:	b	20c98 <_obstack_memory_used@@Base+0xa00>
   21538:	mov	r7, #0
   2153c:	mov	r3, #116	; 0x74
   21540:	b	20dc8 <_obstack_memory_used@@Base+0xb30>
   21544:	ldr	r3, [sp, #44]	; 0x2c
   21548:	b	20afc <_obstack_memory_used@@Base+0x864>
   2154c:	ldr	r3, [sp, #44]	; 0x2c
   21550:	cmp	r3, #0
   21554:	bne	219c4 <_obstack_memory_used@@Base+0x172c>
   21558:	add	r9, r9, #1
   2155c:	mov	r6, #0
   21560:	ldr	r3, [sp, #48]	; 0x30
   21564:	mov	r5, #92	; 0x5c
   21568:	b	20d88 <_obstack_memory_used@@Base+0xaf0>
   2156c:	ldr	r3, [sp, #32]
   21570:	ldrb	r2, [r3, #1]
   21574:	adds	r2, r2, #0
   21578:	movne	r2, #1
   2157c:	b	20aa4 <_obstack_memory_used@@Base+0x80c>
   21580:	ldr	r3, [sp, #156]	; 0x9c
   21584:	ands	r3, r3, #4
   21588:	beq	215b0 <_obstack_memory_used@@Base+0x1318>
   2158c:	ldr	r2, [sp, #28]
   21590:	add	r3, r9, #2
   21594:	cmp	r3, r2
   21598:	bcs	215ac <_obstack_memory_used@@Base+0x1314>
   2159c:	ldr	r2, [sp, #52]	; 0x34
   215a0:	ldrb	r5, [r2, #1]
   215a4:	cmp	r5, #63	; 0x3f
   215a8:	beq	21a28 <_obstack_memory_used@@Base+0x1790>
   215ac:	mov	r3, #0
   215b0:	mov	r5, #63	; 0x3f
   215b4:	mov	r6, r3
   215b8:	b	20ac4 <_obstack_memory_used@@Base+0x82c>
   215bc:	ldr	r3, [sp, #44]	; 0x2c
   215c0:	cmp	r3, #0
   215c4:	bne	219c4 <_obstack_memory_used@@Base+0x172c>
   215c8:	mov	r6, r3
   215cc:	mov	r5, #63	; 0x3f
   215d0:	b	20afc <_obstack_memory_used@@Base+0x864>
   215d4:	ldr	r1, [sp, #28]
   215d8:	mov	r2, #0
   215dc:	mov	r3, #0
   215e0:	strd	r2, [sp, #104]	; 0x68
   215e4:	cmn	r1, #1
   215e8:	bne	215f8 <_obstack_memory_used@@Base+0x1360>
   215ec:	ldr	r0, [sp, #32]
   215f0:	bl	11b94 <strlen@plt>
   215f4:	str	r0, [sp, #28]
   215f8:	str	r8, [sp, #76]	; 0x4c
   215fc:	mov	r3, #0
   21600:	str	sl, [sp, #80]	; 0x50
   21604:	ldr	sl, [sp, #32]
   21608:	str	r5, [sp, #84]	; 0x54
   2160c:	mov	r5, r3
   21610:	ldr	r8, [sp, #44]	; 0x2c
   21614:	str	r7, [sp, #88]	; 0x58
   21618:	str	r4, [sp, #92]	; 0x5c
   2161c:	ldr	r2, [sp, #28]
   21620:	add	r4, r9, r5
   21624:	add	r3, sp, #104	; 0x68
   21628:	add	r7, sl, r4
   2162c:	add	r0, sp, #100	; 0x64
   21630:	mov	r1, r7
   21634:	sub	r2, r2, r4
   21638:	bl	1d738 <__assert_fail@plt+0xb9c4>
   2163c:	subs	r1, r0, #0
   21640:	beq	2168c <_obstack_memory_used@@Base+0x13f4>
   21644:	cmn	r1, #1
   21648:	beq	21a04 <_obstack_memory_used@@Base+0x176c>
   2164c:	cmn	r1, #2
   21650:	beq	21b24 <_obstack_memory_used@@Base+0x188c>
   21654:	cmp	fp, #2
   21658:	movne	r3, #0
   2165c:	andeq	r3, r8, #1
   21660:	cmp	r3, #0
   21664:	bne	217f0 <_obstack_memory_used@@Base+0x1558>
   21668:	ldr	r0, [sp, #100]	; 0x64
   2166c:	add	r5, r5, r1
   21670:	bl	119f0 <iswprint@plt>
   21674:	cmp	r0, #0
   21678:	add	r0, sp, #104	; 0x68
   2167c:	moveq	r6, #0
   21680:	bl	11948 <mbsinit@plt>
   21684:	cmp	r0, #0
   21688:	beq	2161c <_obstack_memory_used@@Base+0x1384>
   2168c:	ldr	r3, [sp, #40]	; 0x28
   21690:	mov	ip, r5
   21694:	eor	r2, r6, #1
   21698:	ldr	r8, [sp, #76]	; 0x4c
   2169c:	ldr	sl, [sp, #80]	; 0x50
   216a0:	and	r2, r2, r3
   216a4:	ldr	r5, [sp, #84]	; 0x54
   216a8:	ldr	r7, [sp, #88]	; 0x58
   216ac:	ldr	r4, [sp, #92]	; 0x5c
   216b0:	cmp	ip, #1
   216b4:	bls	20ff0 <_obstack_memory_used@@Base+0xd58>
   216b8:	add	r1, ip, r9
   216bc:	mov	r0, #39	; 0x27
   216c0:	ldr	lr, [sp, #52]	; 0x34
   216c4:	mov	ip, #0
   216c8:	str	r6, [sp, #52]	; 0x34
   216cc:	ldr	r6, [sp, #48]	; 0x30
   216d0:	b	2178c <_obstack_memory_used@@Base+0x14f4>
   216d4:	ldr	ip, [sp, #44]	; 0x2c
   216d8:	sub	r3, fp, #2
   216dc:	clz	r3, r3
   216e0:	lsr	r3, r3, #5
   216e4:	cmp	ip, #0
   216e8:	bne	218fc <_obstack_memory_used@@Base+0x1664>
   216ec:	eor	ip, r6, #1
   216f0:	ands	r3, r3, ip
   216f4:	beq	21724 <_obstack_memory_used@@Base+0x148c>
   216f8:	cmp	sl, r4
   216fc:	add	ip, r4, #1
   21700:	strbhi	r0, [r8, r4]
   21704:	cmp	sl, ip
   21708:	movhi	r6, #36	; 0x24
   2170c:	strbhi	r6, [r8, ip]
   21710:	add	ip, r4, #2
   21714:	mov	r6, r3
   21718:	cmp	sl, ip
   2171c:	add	r4, r4, #3
   21720:	strbhi	r0, [r8, ip]
   21724:	cmp	sl, r4
   21728:	movhi	r3, #92	; 0x5c
   2172c:	strbhi	r3, [r8, r4]
   21730:	add	r3, r4, #1
   21734:	cmp	sl, r3
   21738:	bls	21748 <_obstack_memory_used@@Base+0x14b0>
   2173c:	lsr	ip, r5, #6
   21740:	add	ip, ip, #48	; 0x30
   21744:	strb	ip, [r8, r3]
   21748:	add	r3, r4, #2
   2174c:	cmp	sl, r3
   21750:	bls	21760 <_obstack_memory_used@@Base+0x14c8>
   21754:	ubfx	ip, r5, #3, #3
   21758:	add	ip, ip, #48	; 0x30
   2175c:	strb	ip, [r8, r3]
   21760:	add	r9, r9, #1
   21764:	and	r5, r5, #7
   21768:	cmp	r9, r1
   2176c:	add	r5, r5, #48	; 0x30
   21770:	add	r4, r4, #3
   21774:	bcs	21928 <_obstack_memory_used@@Base+0x1690>
   21778:	mov	ip, r2
   2177c:	cmp	sl, r4
   21780:	strbhi	r5, [r8, r4]
   21784:	add	r4, r4, #1
   21788:	ldrb	r5, [lr, #1]!
   2178c:	cmp	r2, #0
   21790:	bne	216d4 <_obstack_memory_used@@Base+0x143c>
   21794:	eor	r3, ip, #1
   21798:	cmp	r7, #0
   2179c:	and	r3, r3, r6
   217a0:	uxtb	r3, r3
   217a4:	beq	217b8 <_obstack_memory_used@@Base+0x1520>
   217a8:	cmp	sl, r4
   217ac:	movhi	r7, #92	; 0x5c
   217b0:	strbhi	r7, [r8, r4]
   217b4:	add	r4, r4, #1
   217b8:	add	r9, r9, #1
   217bc:	cmp	r9, r1
   217c0:	bcs	21910 <_obstack_memory_used@@Base+0x1678>
   217c4:	cmp	r3, #0
   217c8:	beq	21948 <_obstack_memory_used@@Base+0x16b0>
   217cc:	cmp	sl, r4
   217d0:	add	r3, r4, #1
   217d4:	mov	r7, #0
   217d8:	strbhi	r0, [r8, r4]
   217dc:	cmp	sl, r3
   217e0:	add	r4, r4, #2
   217e4:	mov	r6, r7
   217e8:	strbhi	r0, [r8, r3]
   217ec:	b	2177c <_obstack_memory_used@@Base+0x14e4>
   217f0:	cmp	r1, #1
   217f4:	beq	21668 <_obstack_memory_used@@Base+0x13d0>
   217f8:	add	r2, r4, #1
   217fc:	add	r3, sl, r1
   21800:	add	r2, sl, r2
   21804:	add	r4, r3, r4
   21808:	ldrb	r3, [r2], #1
   2180c:	sub	r3, r3, #91	; 0x5b
   21810:	cmp	r3, #33	; 0x21
   21814:	ldrls	pc, [pc, r3, lsl #2]
   21818:	b	218a4 <_obstack_memory_used@@Base+0x160c>
   2181c:			; <UNDEFINED> instruction: 0x000218b0
   21820:			; <UNDEFINED> instruction: 0x000218b0
   21824:	andeq	r1, r2, r4, lsr #17
   21828:			; <UNDEFINED> instruction: 0x000218b0
   2182c:	andeq	r1, r2, r4, lsr #17
   21830:			; <UNDEFINED> instruction: 0x000218b0
   21834:	andeq	r1, r2, r4, lsr #17
   21838:	andeq	r1, r2, r4, lsr #17
   2183c:	andeq	r1, r2, r4, lsr #17
   21840:	andeq	r1, r2, r4, lsr #17
   21844:	andeq	r1, r2, r4, lsr #17
   21848:	andeq	r1, r2, r4, lsr #17
   2184c:	andeq	r1, r2, r4, lsr #17
   21850:	andeq	r1, r2, r4, lsr #17
   21854:	andeq	r1, r2, r4, lsr #17
   21858:	andeq	r1, r2, r4, lsr #17
   2185c:	andeq	r1, r2, r4, lsr #17
   21860:	andeq	r1, r2, r4, lsr #17
   21864:	andeq	r1, r2, r4, lsr #17
   21868:	andeq	r1, r2, r4, lsr #17
   2186c:	andeq	r1, r2, r4, lsr #17
   21870:	andeq	r1, r2, r4, lsr #17
   21874:	andeq	r1, r2, r4, lsr #17
   21878:	andeq	r1, r2, r4, lsr #17
   2187c:	andeq	r1, r2, r4, lsr #17
   21880:	andeq	r1, r2, r4, lsr #17
   21884:	andeq	r1, r2, r4, lsr #17
   21888:	andeq	r1, r2, r4, lsr #17
   2188c:	andeq	r1, r2, r4, lsr #17
   21890:	andeq	r1, r2, r4, lsr #17
   21894:	andeq	r1, r2, r4, lsr #17
   21898:	andeq	r1, r2, r4, lsr #17
   2189c:	andeq	r1, r2, r4, lsr #17
   218a0:			; <UNDEFINED> instruction: 0x000218b0
   218a4:	cmp	r4, r2
   218a8:	bne	21808 <_obstack_memory_used@@Base+0x1570>
   218ac:	b	21668 <_obstack_memory_used@@Base+0x13d0>
   218b0:	mov	r8, #2
   218b4:	ldr	fp, [sp, #76]	; 0x4c
   218b8:	ldr	sl, [sp, #80]	; 0x50
   218bc:	b	20de8 <_obstack_memory_used@@Base+0xb50>
   218c0:	ldr	r2, [sp, #40]	; 0x28
   218c4:	str	fp, [sp, #152]	; 0x98
   218c8:	mov	fp, r8
   218cc:	ldr	r8, [sp, #152]	; 0x98
   218d0:	and	r2, r2, r3
   218d4:	str	r2, [sp, #40]	; 0x28
   218d8:	b	20de8 <_obstack_memory_used@@Base+0xb50>
   218dc:	cmp	sl, r4
   218e0:	movls	r0, r4
   218e4:	bls	20f18 <_obstack_memory_used@@Base+0xc80>
   218e8:	ldr	r3, [sp, #48]	; 0x30
   218ec:	b	20f08 <_obstack_memory_used@@Base+0xc70>
   218f0:	str	sl, [sp, #72]	; 0x48
   218f4:	ldr	sl, [sp, #44]	; 0x2c
   218f8:	b	20d58 <_obstack_memory_used@@Base+0xac0>
   218fc:	str	r3, [sp, #40]	; 0x28
   21900:	str	fp, [sp, #152]	; 0x98
   21904:	mov	fp, r8
   21908:	ldr	r8, [sp, #152]	; 0x98
   2190c:	b	20de8 <_obstack_memory_used@@Base+0xb50>
   21910:	str	r6, [sp, #48]	; 0x30
   21914:	ldr	r6, [sp, #52]	; 0x34
   21918:	b	20d88 <_obstack_memory_used@@Base+0xaf0>
   2191c:	mov	r6, #0
   21920:	ldr	r2, [sp, #40]	; 0x28
   21924:	b	216b8 <_obstack_memory_used@@Base+0x1420>
   21928:	str	r6, [sp, #48]	; 0x30
   2192c:	ldr	r6, [sp, #52]	; 0x34
   21930:	b	20b74 <_obstack_memory_used@@Base+0x8dc>
   21934:	add	r4, r4, #4
   21938:	mov	r6, #0
   2193c:	str	r3, [sp, #48]	; 0x30
   21940:	mov	r5, #48	; 0x30
   21944:	b	20afc <_obstack_memory_used@@Base+0x864>
   21948:	mov	r7, r3
   2194c:	b	2177c <_obstack_memory_used@@Base+0x14e4>
   21950:	mov	r3, #1
   21954:	movw	r2, #37600	; 0x92e0
   21958:	movt	r2, #2
   2195c:	mov	r4, r3
   21960:	str	r3, [sp, #36]	; 0x24
   21964:	str	r3, [sp, #40]	; 0x28
   21968:	str	sl, [sp, #44]	; 0x2c
   2196c:	str	sl, [sp, #48]	; 0x30
   21970:	str	r3, [sp, #56]	; 0x38
   21974:	str	r2, [sp, #60]	; 0x3c
   21978:	str	sl, [sp, #68]	; 0x44
   2197c:	str	sl, [sp, #72]	; 0x48
   21980:	b	20624 <_obstack_memory_used@@Base+0x38c>
   21984:	mov	r3, r6
   21988:	mov	r5, #48	; 0x30
   2198c:	mov	r6, #0
   21990:	b	20afc <_obstack_memory_used@@Base+0x864>
   21994:	mov	r5, r3
   21998:	b	20e74 <_obstack_memory_used@@Base+0xbdc>
   2199c:	cmp	sl, r4
   219a0:	mov	r5, #48	; 0x30
   219a4:	movhi	r3, #48	; 0x30
   219a8:	strbhi	r3, [r8, r4]
   219ac:	add	r3, r0, #2
   219b0:	add	r4, r0, #3
   219b4:	cmp	sl, r3
   219b8:	movhi	r1, #48	; 0x30
   219bc:	strbhi	r1, [r8, r3]
   219c0:	b	20f4c <_obstack_memory_used@@Base+0xcb4>
   219c4:	str	fp, [sp, #152]	; 0x98
   219c8:	mov	fp, r8
   219cc:	ldr	r8, [sp, #152]	; 0x98
   219d0:	b	20de8 <_obstack_memory_used@@Base+0xb50>
   219d4:	ldr	r3, [sp, #164]	; 0xa4
   219d8:	ldrb	r3, [r3]
   219dc:	cmp	r3, #0
   219e0:	beq	205f4 <_obstack_memory_used@@Base+0x35c>
   219e4:	ldr	r2, [sp, #164]	; 0xa4
   219e8:	cmp	sl, r4
   219ec:	strbhi	r3, [fp, r4]
   219f0:	add	r4, r4, #1
   219f4:	ldrb	r3, [r2, #1]!
   219f8:	cmp	r3, #0
   219fc:	bne	219e8 <_obstack_memory_used@@Base+0x1750>
   21a00:	b	205f4 <_obstack_memory_used@@Base+0x35c>
   21a04:	mov	ip, r5
   21a08:	mov	r6, #0
   21a0c:	ldr	r2, [sp, #40]	; 0x28
   21a10:	ldr	r8, [sp, #76]	; 0x4c
   21a14:	ldr	sl, [sp, #80]	; 0x50
   21a18:	ldr	r5, [sp, #84]	; 0x54
   21a1c:	ldr	r7, [sp, #88]	; 0x58
   21a20:	ldr	r4, [sp, #92]	; 0x5c
   21a24:	b	216b0 <_obstack_memory_used@@Base+0x1418>
   21a28:	ldr	r2, [sp, #32]
   21a2c:	ldrb	r1, [r2, r3]
   21a30:	sub	r2, r1, #33	; 0x21
   21a34:	cmp	r2, #29
   21a38:	ldrls	pc, [pc, r2, lsl #2]
   21a3c:	b	21b18 <_obstack_memory_used@@Base+0x1880>
   21a40:			; <UNDEFINED> instruction: 0x00021ab8
   21a44:	andeq	r1, r2, r8, lsl fp
   21a48:	andeq	r1, r2, r8, lsl fp
   21a4c:	andeq	r1, r2, r8, lsl fp
   21a50:	andeq	r1, r2, r8, lsl fp
   21a54:	andeq	r1, r2, r8, lsl fp
   21a58:			; <UNDEFINED> instruction: 0x00021ab8
   21a5c:			; <UNDEFINED> instruction: 0x00021ab8
   21a60:			; <UNDEFINED> instruction: 0x00021ab8
   21a64:	andeq	r1, r2, r8, lsl fp
   21a68:	andeq	r1, r2, r8, lsl fp
   21a6c:	andeq	r1, r2, r8, lsl fp
   21a70:			; <UNDEFINED> instruction: 0x00021ab8
   21a74:	andeq	r1, r2, r8, lsl fp
   21a78:			; <UNDEFINED> instruction: 0x00021ab8
   21a7c:	andeq	r1, r2, r8, lsl fp
   21a80:	andeq	r1, r2, r8, lsl fp
   21a84:	andeq	r1, r2, r8, lsl fp
   21a88:	andeq	r1, r2, r8, lsl fp
   21a8c:	andeq	r1, r2, r8, lsl fp
   21a90:	andeq	r1, r2, r8, lsl fp
   21a94:	andeq	r1, r2, r8, lsl fp
   21a98:	andeq	r1, r2, r8, lsl fp
   21a9c:	andeq	r1, r2, r8, lsl fp
   21aa0:	andeq	r1, r2, r8, lsl fp
   21aa4:	andeq	r1, r2, r8, lsl fp
   21aa8:	andeq	r1, r2, r8, lsl fp
   21aac:			; <UNDEFINED> instruction: 0x00021ab8
   21ab0:			; <UNDEFINED> instruction: 0x00021ab8
   21ab4:			; <UNDEFINED> instruction: 0x00021ab8
   21ab8:	ldr	r2, [sp, #44]	; 0x2c
   21abc:	cmp	r2, #0
   21ac0:	bne	21c1c <_obstack_memory_used@@Base+0x1984>
   21ac4:	cmp	sl, r4
   21ac8:	mov	r5, r1
   21acc:	movhi	r2, #63	; 0x3f
   21ad0:	mov	r9, r3
   21ad4:	strbhi	r2, [r8, r4]
   21ad8:	add	r2, r4, #1
   21adc:	cmp	sl, r2
   21ae0:	movhi	r0, #34	; 0x22
   21ae4:	strbhi	r0, [r8, r2]
   21ae8:	add	r2, r4, #2
   21aec:	cmp	sl, r2
   21af0:	movhi	r0, #34	; 0x22
   21af4:	strbhi	r0, [r8, r2]
   21af8:	add	r2, r4, #3
   21afc:	add	r4, r4, #4
   21b00:	cmp	sl, r2
   21b04:	movhi	r0, #63	; 0x3f
   21b08:	strbhi	r0, [r8, r2]
   21b0c:	mov	r2, #0
   21b10:	mov	r6, r2
   21b14:	b	20f4c <_obstack_memory_used@@Base+0xcb4>
   21b18:	mov	r3, #0
   21b1c:	mov	r6, r3
   21b20:	b	20ac4 <_obstack_memory_used@@Base+0x82c>
   21b24:	ldr	r0, [sp, #28]
   21b28:	mov	r1, r4
   21b2c:	mov	r2, r7
   21b30:	mov	r3, r5
   21b34:	mov	ip, r5
   21b38:	ldr	r8, [sp, #76]	; 0x4c
   21b3c:	ldr	sl, [sp, #80]	; 0x50
   21b40:	cmp	r1, r0
   21b44:	ldr	r5, [sp, #84]	; 0x54
   21b48:	ldr	r7, [sp, #88]	; 0x58
   21b4c:	ldr	r4, [sp, #92]	; 0x5c
   21b50:	bcs	21b84 <_obstack_memory_used@@Base+0x18ec>
   21b54:	ldrb	r6, [r2]
   21b58:	cmp	r6, #0
   21b5c:	bne	21b70 <_obstack_memory_used@@Base+0x18d8>
   21b60:	b	21ca4 <_obstack_memory_used@@Base+0x1a0c>
   21b64:	ldrb	r6, [r2, #1]!
   21b68:	cmp	r6, #0
   21b6c:	beq	21c2c <_obstack_memory_used@@Base+0x1994>
   21b70:	add	r3, r3, #1
   21b74:	add	r1, r9, r3
   21b78:	cmp	r1, r0
   21b7c:	bcc	21b64 <_obstack_memory_used@@Base+0x18cc>
   21b80:	mov	ip, r3
   21b84:	mov	r6, #0
   21b88:	ldr	r2, [sp, #40]	; 0x28
   21b8c:	b	216b0 <_obstack_memory_used@@Base+0x1418>
   21b90:	mov	r3, #1
   21b94:	mov	r2, #0
   21b98:	mov	r4, r2
   21b9c:	str	r3, [sp, #36]	; 0x24
   21ba0:	str	r3, [sp, #40]	; 0x28
   21ba4:	str	r3, [sp, #44]	; 0x2c
   21ba8:	str	r2, [sp, #48]	; 0x30
   21bac:	str	r3, [sp, #56]	; 0x38
   21bb0:	movw	r3, #37600	; 0x92e0
   21bb4:	movt	r3, #2
   21bb8:	str	r3, [sp, #60]	; 0x3c
   21bbc:	str	r2, [sp, #68]	; 0x44
   21bc0:	str	r2, [sp, #72]	; 0x48
   21bc4:	b	20624 <_obstack_memory_used@@Base+0x38c>
   21bc8:	mov	r2, r3
   21bcc:	ldr	r3, [sp, #60]	; 0x3c
   21bd0:	cmp	r3, #0
   21bd4:	moveq	r2, #0
   21bd8:	andne	r2, r2, #1
   21bdc:	cmp	r2, #0
   21be0:	beq	21c0c <_obstack_memory_used@@Base+0x1974>
   21be4:	mov	r2, r3
   21be8:	ldrb	r3, [r3]
   21bec:	cmp	r3, #0
   21bf0:	beq	21c0c <_obstack_memory_used@@Base+0x1974>
   21bf4:	cmp	sl, r4
   21bf8:	strbhi	r3, [fp, r4]
   21bfc:	add	r4, r4, #1
   21c00:	ldrb	r3, [r2, #1]!
   21c04:	cmp	r3, #0
   21c08:	bne	21bf4 <_obstack_memory_used@@Base+0x195c>
   21c0c:	cmp	sl, r4
   21c10:	movhi	r3, #0
   21c14:	strbhi	r3, [fp, r4]
   21c18:	b	20e2c <_obstack_memory_used@@Base+0xb94>
   21c1c:	str	fp, [sp, #152]	; 0x98
   21c20:	mov	fp, r8
   21c24:	ldr	r8, [sp, #152]	; 0x98
   21c28:	b	20df4 <_obstack_memory_used@@Base+0xb5c>
   21c2c:	mov	ip, r3
   21c30:	ldr	r2, [sp, #40]	; 0x28
   21c34:	b	216b0 <_obstack_memory_used@@Base+0x1418>
   21c38:	str	fp, [sp, #152]	; 0x98
   21c3c:	mov	fp, r8
   21c40:	ldr	r8, [sp, #152]	; 0x98
   21c44:	sub	r3, r8, #2
   21c48:	clz	r3, r3
   21c4c:	lsr	r3, r3, #5
   21c50:	str	r3, [sp, #40]	; 0x28
   21c54:	b	20de8 <_obstack_memory_used@@Base+0xb50>
   21c58:	mov	ip, #5
   21c5c:	ldr	r3, [sp, #28]
   21c60:	str	ip, [sp]
   21c64:	ldr	r2, [sp, #156]	; 0x9c
   21c68:	ldr	ip, [sp, #164]	; 0xa4
   21c6c:	ldr	r0, [sp, #160]	; 0xa0
   21c70:	str	r2, [sp, #4]
   21c74:	ldr	r2, [sp, #32]
   21c78:	ldr	r1, [sp, #72]	; 0x48
   21c7c:	str	ip, [sp, #12]
   21c80:	ldr	ip, [sp, #168]	; 0xa8
   21c84:	str	r0, [sp, #8]
   21c88:	mov	r0, fp
   21c8c:	str	ip, [sp, #16]
   21c90:	bl	2053c <_obstack_memory_used@@Base+0x2a4>
   21c94:	mov	r4, r0
   21c98:	b	20e2c <_obstack_memory_used@@Base+0xb94>
   21c9c:	mov	r8, #2
   21ca0:	b	20de8 <_obstack_memory_used@@Base+0xb50>
   21ca4:	ldr	r2, [sp, #40]	; 0x28
   21ca8:	b	216b0 <_obstack_memory_used@@Base+0x1418>
   21cac:	mov	r3, #0
   21cb0:	mov	r2, #1
   21cb4:	mov	r4, r3
   21cb8:	strd	r2, [sp, #36]	; 0x24
   21cbc:	strd	r2, [sp, #44]	; 0x2c
   21cc0:	str	r2, [sp, #56]	; 0x38
   21cc4:	str	r3, [sp, #68]	; 0x44
   21cc8:	str	r3, [sp, #72]	; 0x48
   21ccc:	movw	r3, #37620	; 0x92f4
   21cd0:	movt	r3, #2
   21cd4:	str	r3, [sp, #60]	; 0x3c
   21cd8:	b	20624 <_obstack_memory_used@@Base+0x38c>
   21cdc:	mov	r3, #0
   21ce0:	mov	r1, #1
   21ce4:	mov	r2, r3
   21ce8:	str	r1, [sp, #36]	; 0x24
   21cec:	str	r3, [sp, #48]	; 0x30
   21cf0:	str	sl, [sp, #72]	; 0x48
   21cf4:	b	20c2c <_obstack_memory_used@@Base+0x994>
   21cf8:	bl	11d2c <abort@plt>
   21cfc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21d00:	mov	r4, r0
   21d04:	mov	r5, r3
   21d08:	strd	r6, [sp, #8]
   21d0c:	movw	r7, #41676	; 0xa2cc
   21d10:	movt	r7, #3
   21d14:	strd	r8, [sp, #16]
   21d18:	strd	sl, [sp, #24]
   21d1c:	mov	sl, r1
   21d20:	mov	fp, r2
   21d24:	str	lr, [sp, #32]
   21d28:	sub	sp, sp, #60	; 0x3c
   21d2c:	bl	11bb8 <__errno_location@plt>
   21d30:	mov	r8, r0
   21d34:	cmn	r4, #-2147483647	; 0x80000001
   21d38:	ldr	r6, [r7]
   21d3c:	movne	r0, #0
   21d40:	moveq	r0, #1
   21d44:	ldr	r3, [r8]
   21d48:	orrs	r0, r0, r4, lsr #31
   21d4c:	str	r3, [sp, #28]
   21d50:	bne	21ee0 <_obstack_memory_used@@Base+0x1c48>
   21d54:	ldr	r3, [r7, #4]
   21d58:	cmp	r3, r4
   21d5c:	bgt	21dbc <_obstack_memory_used@@Base+0x1b24>
   21d60:	add	r1, r7, #8
   21d64:	sub	r2, r4, r3
   21d68:	str	r3, [sp, #52]	; 0x34
   21d6c:	cmp	r6, r1
   21d70:	add	r2, r2, #1
   21d74:	beq	21eb8 <_obstack_memory_used@@Base+0x1c20>
   21d78:	mov	r1, #8
   21d7c:	mov	r0, r6
   21d80:	mvn	r3, #-2147483648	; 0x80000000
   21d84:	str	r1, [sp]
   21d88:	add	r1, sp, #52	; 0x34
   21d8c:	bl	235f4 <_obstack_memory_used@@Base+0x335c>
   21d90:	mov	r6, r0
   21d94:	str	r0, [r7]
   21d98:	ldr	r0, [r7, #4]
   21d9c:	mov	r1, #0
   21da0:	ldr	r2, [sp, #52]	; 0x34
   21da4:	sub	r2, r2, r0
   21da8:	add	r0, r6, r0, lsl #3
   21dac:	lsl	r2, r2, #3
   21db0:	bl	11be8 <memset@plt>
   21db4:	ldr	r3, [sp, #52]	; 0x34
   21db8:	str	r3, [r7, #4]
   21dbc:	ldr	r1, [r5, #4]
   21dc0:	add	r0, r6, r4, lsl #3
   21dc4:	add	ip, r5, #8
   21dc8:	mov	r3, fp
   21dcc:	mov	r2, sl
   21dd0:	ldr	r7, [r0, #4]
   21dd4:	str	r0, [sp, #36]	; 0x24
   21dd8:	str	ip, [sp, #40]	; 0x28
   21ddc:	orr	r0, r1, #1
   21de0:	ldr	r9, [r6, r4, lsl #3]
   21de4:	str	ip, [sp, #8]
   21de8:	ldr	lr, [r5, #44]	; 0x2c
   21dec:	str	r0, [sp, #4]
   21df0:	ldr	ip, [r5]
   21df4:	mov	r1, r9
   21df8:	str	ip, [sp, #32]
   21dfc:	ldr	ip, [r5, #40]	; 0x28
   21e00:	str	ip, [sp, #12]
   21e04:	ldr	ip, [sp, #32]
   21e08:	str	lr, [sp, #16]
   21e0c:	str	r0, [sp, #44]	; 0x2c
   21e10:	mov	r0, r7
   21e14:	str	ip, [sp]
   21e18:	bl	2053c <_obstack_memory_used@@Base+0x2a4>
   21e1c:	cmp	r9, r0
   21e20:	bhi	21e90 <_obstack_memory_used@@Base+0x1bf8>
   21e24:	add	r9, r0, #1
   21e28:	movw	r3, #46056	; 0xb3e8
   21e2c:	movt	r3, #3
   21e30:	cmp	r7, r3
   21e34:	str	r9, [r6, r4, lsl #3]
   21e38:	beq	21e44 <_obstack_memory_used@@Base+0x1bac>
   21e3c:	mov	r0, r7
   21e40:	bl	1b2b4 <__assert_fail@plt+0x9540>
   21e44:	mov	r0, r9
   21e48:	bl	23444 <_obstack_memory_used@@Base+0x31ac>
   21e4c:	ldr	ip, [r5]
   21e50:	mov	r3, fp
   21e54:	mov	r2, sl
   21e58:	mov	r1, r9
   21e5c:	mov	r7, r0
   21e60:	ldr	lr, [sp, #36]	; 0x24
   21e64:	ldr	r4, [r5, #40]	; 0x28
   21e68:	str	r0, [lr, #4]
   21e6c:	ldr	lr, [r5, #44]	; 0x2c
   21e70:	str	ip, [sp]
   21e74:	ldr	ip, [sp, #44]	; 0x2c
   21e78:	str	ip, [sp, #4]
   21e7c:	ldr	ip, [sp, #40]	; 0x28
   21e80:	str	r4, [sp, #12]
   21e84:	str	lr, [sp, #16]
   21e88:	str	ip, [sp, #8]
   21e8c:	bl	2053c <_obstack_memory_used@@Base+0x2a4>
   21e90:	ldr	r3, [sp, #28]
   21e94:	mov	r0, r7
   21e98:	str	r3, [r8]
   21e9c:	add	sp, sp, #60	; 0x3c
   21ea0:	ldrd	r4, [sp]
   21ea4:	ldrd	r6, [sp, #8]
   21ea8:	ldrd	r8, [sp, #16]
   21eac:	ldrd	sl, [sp, #24]
   21eb0:	add	sp, sp, #32
   21eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   21eb8:	mov	r1, #8
   21ebc:	mvn	r3, #-2147483648	; 0x80000000
   21ec0:	str	r1, [sp]
   21ec4:	add	r1, sp, #52	; 0x34
   21ec8:	bl	235f4 <_obstack_memory_used@@Base+0x335c>
   21ecc:	ldrd	r2, [r7, #8]
   21ed0:	mov	r6, r0
   21ed4:	str	r0, [r7]
   21ed8:	strd	r2, [r0]
   21edc:	b	21d98 <_obstack_memory_used@@Base+0x1b00>
   21ee0:	bl	11d2c <abort@plt>
   21ee4:	strd	r4, [sp, #-16]!
   21ee8:	mov	r5, r0
   21eec:	str	r6, [sp, #8]
   21ef0:	str	lr, [sp, #12]
   21ef4:	bl	11bb8 <__errno_location@plt>
   21ef8:	mov	r4, r0
   21efc:	cmp	r5, #0
   21f00:	ldr	r0, [pc, #32]	; 21f28 <_obstack_memory_used@@Base+0x1c90>
   21f04:	mov	r1, #48	; 0x30
   21f08:	movne	r0, r5
   21f0c:	ldr	r6, [r4]
   21f10:	bl	2376c <_obstack_memory_used@@Base+0x34d4>
   21f14:	str	r6, [r4]
   21f18:	ldrd	r4, [sp]
   21f1c:	ldr	r6, [sp, #8]
   21f20:	add	sp, sp, #12
   21f24:	pop	{pc}		; (ldr pc, [sp], #4)
   21f28:	andeq	fp, r3, r8, ror #9
   21f2c:	ldr	r3, [pc, #12]	; 21f40 <_obstack_memory_used@@Base+0x1ca8>
   21f30:	cmp	r0, #0
   21f34:	moveq	r0, r3
   21f38:	ldr	r0, [r0]
   21f3c:	bx	lr
   21f40:	andeq	fp, r3, r8, ror #9
   21f44:	ldr	r3, [pc, #12]	; 21f58 <_obstack_memory_used@@Base+0x1cc0>
   21f48:	cmp	r0, #0
   21f4c:	moveq	r0, r3
   21f50:	str	r1, [r0]
   21f54:	bx	lr
   21f58:	andeq	fp, r3, r8, ror #9
   21f5c:	ldr	r3, [pc, #52]	; 21f98 <_obstack_memory_used@@Base+0x1d00>
   21f60:	cmp	r0, #0
   21f64:	push	{lr}		; (str lr, [sp, #-4]!)
   21f68:	lsr	lr, r1, #5
   21f6c:	and	r1, r1, #31
   21f70:	moveq	r0, r3
   21f74:	add	r3, r0, #8
   21f78:	ldr	ip, [r3, lr, lsl #2]
   21f7c:	lsr	r0, ip, r1
   21f80:	eor	r2, r2, r0
   21f84:	and	r0, r0, #1
   21f88:	and	r2, r2, #1
   21f8c:	eor	r1, ip, r2, lsl r1
   21f90:	str	r1, [r3, lr, lsl #2]
   21f94:	pop	{pc}		; (ldr pc, [sp], #4)
   21f98:	andeq	fp, r3, r8, ror #9
   21f9c:	ldr	r3, [pc, #16]	; 21fb4 <_obstack_memory_used@@Base+0x1d1c>
   21fa0:	cmp	r0, #0
   21fa4:	movne	r3, r0
   21fa8:	ldr	r0, [r3, #4]
   21fac:	str	r1, [r3, #4]
   21fb0:	bx	lr
   21fb4:	andeq	fp, r3, r8, ror #9
   21fb8:	ldr	r3, [pc, #48]	; 21ff0 <_obstack_memory_used@@Base+0x1d58>
   21fbc:	cmp	r0, #0
   21fc0:	mov	ip, #10
   21fc4:	moveq	r0, r3
   21fc8:	cmp	r2, #0
   21fcc:	cmpne	r1, #0
   21fd0:	str	ip, [r0]
   21fd4:	beq	21fe4 <_obstack_memory_used@@Base+0x1d4c>
   21fd8:	str	r1, [r0, #40]	; 0x28
   21fdc:	str	r2, [r0, #44]	; 0x2c
   21fe0:	bx	lr
   21fe4:	str	r4, [sp, #-8]!
   21fe8:	str	lr, [sp, #4]
   21fec:	bl	11d2c <abort@plt>
   21ff0:	andeq	fp, r3, r8, ror #9
   21ff4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   21ff8:	strd	r6, [sp, #8]
   21ffc:	mov	r7, r0
   22000:	mov	r6, r1
   22004:	strd	r8, [sp, #16]
   22008:	mov	r8, r2
   2200c:	mov	r9, r3
   22010:	str	lr, [sp, #24]
   22014:	sub	sp, sp, #28
   22018:	ldr	r4, [sp, #56]	; 0x38
   2201c:	ldr	ip, [pc, #104]	; 2208c <_obstack_memory_used@@Base+0x1df4>
   22020:	cmp	r4, #0
   22024:	moveq	r4, ip
   22028:	bl	11bb8 <__errno_location@plt>
   2202c:	ldr	ip, [r4, #44]	; 0x2c
   22030:	mov	r5, r0
   22034:	mov	r1, r6
   22038:	add	lr, r4, #8
   2203c:	mov	r3, r9
   22040:	ldr	r6, [r5]
   22044:	mov	r2, r8
   22048:	mov	r0, r7
   2204c:	str	ip, [sp, #16]
   22050:	ldr	ip, [r4, #40]	; 0x28
   22054:	str	lr, [sp, #8]
   22058:	str	ip, [sp, #12]
   2205c:	ldr	ip, [r4, #4]
   22060:	str	ip, [sp, #4]
   22064:	ldr	ip, [r4]
   22068:	str	ip, [sp]
   2206c:	bl	2053c <_obstack_memory_used@@Base+0x2a4>
   22070:	str	r6, [r5]
   22074:	add	sp, sp, #28
   22078:	ldrd	r4, [sp]
   2207c:	ldrd	r6, [sp, #8]
   22080:	ldrd	r8, [sp, #16]
   22084:	add	sp, sp, #24
   22088:	pop	{pc}		; (ldr pc, [sp], #4)
   2208c:	andeq	fp, r3, r8, ror #9
   22090:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22094:	cmp	r3, #0
   22098:	ldr	r4, [pc, #220]	; 2217c <_obstack_memory_used@@Base+0x1ee4>
   2209c:	movne	r4, r3
   220a0:	strd	r6, [sp, #8]
   220a4:	mov	r6, r2
   220a8:	strd	r8, [sp, #16]
   220ac:	mov	r9, r0
   220b0:	strd	sl, [sp, #24]
   220b4:	mov	sl, r1
   220b8:	str	lr, [sp, #32]
   220bc:	sub	sp, sp, #44	; 0x2c
   220c0:	bl	11bb8 <__errno_location@plt>
   220c4:	ldr	r5, [r4, #4]
   220c8:	mov	r7, r0
   220cc:	mov	r1, #0
   220d0:	add	r8, r4, #8
   220d4:	mov	r3, sl
   220d8:	ldr	ip, [r4, #44]	; 0x2c
   220dc:	mov	r2, r9
   220e0:	mov	r0, r1
   220e4:	ldr	lr, [r7]
   220e8:	cmp	r6, r1
   220ec:	orreq	r5, r5, #1
   220f0:	str	ip, [sp, #16]
   220f4:	ldr	ip, [r4, #40]	; 0x28
   220f8:	stmib	sp, {r5, r8, ip}
   220fc:	ldr	ip, [r4]
   22100:	str	lr, [sp, #28]
   22104:	str	ip, [sp]
   22108:	bl	2053c <_obstack_memory_used@@Base+0x2a4>
   2210c:	add	r1, r0, #1
   22110:	mov	fp, r0
   22114:	mov	r0, r1
   22118:	str	r1, [sp, #36]	; 0x24
   2211c:	bl	23444 <_obstack_memory_used@@Base+0x31ac>
   22120:	ldr	ip, [r4, #44]	; 0x2c
   22124:	mov	r3, sl
   22128:	mov	r2, r9
   2212c:	ldr	r1, [sp, #36]	; 0x24
   22130:	str	ip, [sp, #16]
   22134:	ldr	ip, [r4, #40]	; 0x28
   22138:	str	r0, [sp, #32]
   2213c:	stmib	sp, {r5, r8, ip}
   22140:	ldr	ip, [r4]
   22144:	str	ip, [sp]
   22148:	bl	2053c <_obstack_memory_used@@Base+0x2a4>
   2214c:	ldr	lr, [sp, #28]
   22150:	cmp	r6, #0
   22154:	ldr	r0, [sp, #32]
   22158:	str	lr, [r7]
   2215c:	strne	fp, [r6]
   22160:	add	sp, sp, #44	; 0x2c
   22164:	ldrd	r4, [sp]
   22168:	ldrd	r6, [sp, #8]
   2216c:	ldrd	r8, [sp, #16]
   22170:	ldrd	sl, [sp, #24]
   22174:	add	sp, sp, #32
   22178:	pop	{pc}		; (ldr pc, [sp], #4)
   2217c:	andeq	fp, r3, r8, ror #9
   22180:	mov	r3, r2
   22184:	mov	r2, #0
   22188:	b	22090 <_obstack_memory_used@@Base+0x1df8>
   2218c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22190:	movw	r5, #41676	; 0xa2cc
   22194:	movt	r5, #3
   22198:	ldr	r3, [r5, #4]
   2219c:	strd	r6, [sp, #8]
   221a0:	str	r8, [sp, #16]
   221a4:	str	lr, [sp, #20]
   221a8:	ldr	r7, [r5]
   221ac:	cmp	r3, #1
   221b0:	ble	221d4 <_obstack_memory_used@@Base+0x1f3c>
   221b4:	mov	r4, #1
   221b8:	add	r6, r7, #4
   221bc:	ldr	r0, [r6, r4, lsl #3]
   221c0:	add	r4, r4, #1
   221c4:	bl	1b2b4 <__assert_fail@plt+0x9540>
   221c8:	ldr	r3, [r5, #4]
   221cc:	cmp	r3, r4
   221d0:	bgt	221bc <_obstack_memory_used@@Base+0x1f24>
   221d4:	ldr	r0, [r7, #4]
   221d8:	movw	r4, #46056	; 0xb3e8
   221dc:	movt	r4, #3
   221e0:	cmp	r0, r4
   221e4:	beq	221f8 <_obstack_memory_used@@Base+0x1f60>
   221e8:	bl	1b2b4 <__assert_fail@plt+0x9540>
   221ec:	mov	r3, #256	; 0x100
   221f0:	str	r3, [r5, #8]
   221f4:	str	r4, [r5, #12]
   221f8:	ldr	r4, [pc, #44]	; 2222c <_obstack_memory_used@@Base+0x1f94>
   221fc:	cmp	r7, r4
   22200:	beq	22210 <_obstack_memory_used@@Base+0x1f78>
   22204:	mov	r0, r7
   22208:	bl	1b2b4 <__assert_fail@plt+0x9540>
   2220c:	str	r4, [r5]
   22210:	mov	r3, #1
   22214:	ldrd	r6, [sp, #8]
   22218:	str	r3, [r5, #4]
   2221c:	ldrd	r4, [sp]
   22220:	ldr	r8, [sp, #16]
   22224:	add	sp, sp, #20
   22228:	pop	{pc}		; (ldr pc, [sp], #4)
   2222c:	ldrdeq	sl, [r3], -r4
   22230:	ldr	r3, [pc, #4]	; 2223c <_obstack_memory_used@@Base+0x1fa4>
   22234:	mvn	r2, #0
   22238:	b	21cfc <_obstack_memory_used@@Base+0x1a64>
   2223c:	andeq	fp, r3, r8, ror #9
   22240:	ldr	r3, [pc]	; 22248 <_obstack_memory_used@@Base+0x1fb0>
   22244:	b	21cfc <_obstack_memory_used@@Base+0x1a64>
   22248:	andeq	fp, r3, r8, ror #9
   2224c:	mov	r1, r0
   22250:	ldr	r3, [pc, #8]	; 22260 <_obstack_memory_used@@Base+0x1fc8>
   22254:	mvn	r2, #0
   22258:	mov	r0, #0
   2225c:	b	21cfc <_obstack_memory_used@@Base+0x1a64>
   22260:	andeq	fp, r3, r8, ror #9
   22264:	mov	r2, r1
   22268:	ldr	r3, [pc, #8]	; 22278 <_obstack_memory_used@@Base+0x1fe0>
   2226c:	mov	r1, r0
   22270:	mov	r0, #0
   22274:	b	21cfc <_obstack_memory_used@@Base+0x1a64>
   22278:	andeq	fp, r3, r8, ror #9
   2227c:	strd	r4, [sp, #-12]!
   22280:	mov	r5, r2
   22284:	mov	r4, r0
   22288:	str	lr, [sp, #8]
   2228c:	sub	sp, sp, #52	; 0x34
   22290:	mov	r0, sp
   22294:	bl	20398 <_obstack_memory_used@@Base+0x100>
   22298:	mov	r3, sp
   2229c:	mov	r1, r5
   222a0:	mov	r0, r4
   222a4:	mvn	r2, #0
   222a8:	bl	21cfc <_obstack_memory_used@@Base+0x1a64>
   222ac:	add	sp, sp, #52	; 0x34
   222b0:	ldrd	r4, [sp]
   222b4:	add	sp, sp, #8
   222b8:	pop	{pc}		; (ldr pc, [sp], #4)
   222bc:	strd	r4, [sp, #-16]!
   222c0:	mov	r5, r2
   222c4:	mov	r4, r0
   222c8:	str	r6, [sp, #8]
   222cc:	mov	r6, r3
   222d0:	str	lr, [sp, #12]
   222d4:	sub	sp, sp, #48	; 0x30
   222d8:	mov	r0, sp
   222dc:	bl	20398 <_obstack_memory_used@@Base+0x100>
   222e0:	mov	r3, sp
   222e4:	mov	r2, r6
   222e8:	mov	r1, r5
   222ec:	mov	r0, r4
   222f0:	bl	21cfc <_obstack_memory_used@@Base+0x1a64>
   222f4:	add	sp, sp, #48	; 0x30
   222f8:	ldrd	r4, [sp]
   222fc:	ldr	r6, [sp, #8]
   22300:	add	sp, sp, #12
   22304:	pop	{pc}		; (ldr pc, [sp], #4)
   22308:	mov	r2, r1
   2230c:	mov	r1, r0
   22310:	mov	r0, #0
   22314:	b	2227c <_obstack_memory_used@@Base+0x1fe4>
   22318:	mov	r3, r2
   2231c:	mov	r2, r1
   22320:	mov	r1, r0
   22324:	mov	r0, #0
   22328:	b	222bc <_obstack_memory_used@@Base+0x2024>
   2232c:	ldr	ip, [pc, #140]	; 223c0 <_obstack_memory_used@@Base+0x2128>
   22330:	strd	r4, [sp, #-28]!	; 0xffffffe4
   22334:	ldrd	r4, [ip]
   22338:	strd	r6, [sp, #8]
   2233c:	ldrd	r6, [ip, #8]
   22340:	strd	r8, [sp, #16]
   22344:	lsr	r9, r2, #5
   22348:	str	lr, [sp, #24]
   2234c:	sub	sp, sp, #52	; 0x34
   22350:	and	lr, r2, #31
   22354:	add	r8, sp, #8
   22358:	mov	r2, r1
   2235c:	strd	r4, [sp]
   22360:	mov	r1, r0
   22364:	mov	r3, sp
   22368:	strd	r6, [sp, #8]
   2236c:	mov	r0, #0
   22370:	ldrd	r4, [ip, #16]
   22374:	ldrd	r6, [ip, #24]
   22378:	strd	r4, [sp, #16]
   2237c:	ldrd	r4, [ip, #32]
   22380:	strd	r6, [sp, #24]
   22384:	ldrd	r6, [ip, #40]	; 0x28
   22388:	strd	r4, [sp, #32]
   2238c:	strd	r6, [sp, #40]	; 0x28
   22390:	ldr	ip, [r8, r9, lsl #2]
   22394:	mvn	r4, ip, lsr lr
   22398:	and	r4, r4, #1
   2239c:	eor	lr, ip, r4, lsl lr
   223a0:	str	lr, [r8, r9, lsl #2]
   223a4:	bl	21cfc <_obstack_memory_used@@Base+0x1a64>
   223a8:	add	sp, sp, #52	; 0x34
   223ac:	ldrd	r4, [sp]
   223b0:	ldrd	r6, [sp, #8]
   223b4:	ldrd	r8, [sp, #16]
   223b8:	add	sp, sp, #24
   223bc:	pop	{pc}		; (ldr pc, [sp], #4)
   223c0:	andeq	fp, r3, r8, ror #9
   223c4:	mov	r2, r1
   223c8:	mvn	r1, #0
   223cc:	b	2232c <_obstack_memory_used@@Base+0x2094>
   223d0:	mov	r2, #58	; 0x3a
   223d4:	mvn	r1, #0
   223d8:	b	2232c <_obstack_memory_used@@Base+0x2094>
   223dc:	mov	r2, #58	; 0x3a
   223e0:	b	2232c <_obstack_memory_used@@Base+0x2094>
   223e4:	strd	r4, [sp, #-20]!	; 0xffffffec
   223e8:	strd	r6, [sp, #8]
   223ec:	mov	r6, r0
   223f0:	mov	r7, r2
   223f4:	str	lr, [sp, #16]
   223f8:	sub	sp, sp, #100	; 0x64
   223fc:	mov	r0, sp
   22400:	bl	20398 <_obstack_memory_used@@Base+0x100>
   22404:	ldrd	r4, [sp, #8]
   22408:	mov	r1, r7
   2240c:	mov	r0, r6
   22410:	add	r3, sp, #48	; 0x30
   22414:	mvn	r2, #0
   22418:	ldrd	r6, [sp]
   2241c:	strd	r4, [sp, #56]	; 0x38
   22420:	ldrd	r4, [sp, #16]
   22424:	strd	r6, [sp, #48]	; 0x30
   22428:	ldrd	r6, [sp, #32]
   2242c:	ldr	lr, [sp, #60]	; 0x3c
   22430:	strd	r4, [sp, #64]	; 0x40
   22434:	ldrd	r4, [sp, #24]
   22438:	mvn	ip, lr
   2243c:	and	ip, ip, #67108864	; 0x4000000
   22440:	strd	r4, [sp, #72]	; 0x48
   22444:	eor	ip, ip, lr
   22448:	ldrd	r4, [sp, #40]	; 0x28
   2244c:	str	ip, [sp, #60]	; 0x3c
   22450:	strd	r6, [sp, #80]	; 0x50
   22454:	strd	r4, [sp, #88]	; 0x58
   22458:	bl	21cfc <_obstack_memory_used@@Base+0x1a64>
   2245c:	add	sp, sp, #100	; 0x64
   22460:	ldrd	r4, [sp]
   22464:	ldrd	r6, [sp, #8]
   22468:	add	sp, sp, #16
   2246c:	pop	{pc}		; (ldr pc, [sp], #4)
   22470:	ldr	ip, [pc, #156]	; 22514 <_obstack_memory_used@@Base+0x227c>
   22474:	cmp	r2, #0
   22478:	cmpne	r1, #0
   2247c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22480:	strd	r6, [sp, #8]
   22484:	mov	r6, r2
   22488:	str	r8, [sp, #16]
   2248c:	mov	r8, r3
   22490:	strd	sl, [sp, #20]
   22494:	ldrd	r4, [ip]
   22498:	str	lr, [sp, #28]
   2249c:	sub	sp, sp, #48	; 0x30
   224a0:	mov	lr, #10
   224a4:	ldrd	r2, [ip, #8]
   224a8:	ldrd	sl, [ip, #16]
   224ac:	strd	r4, [sp]
   224b0:	ldrd	r4, [ip, #32]
   224b4:	str	lr, [sp]
   224b8:	strd	r2, [sp, #8]
   224bc:	strd	sl, [sp, #16]
   224c0:	ldrd	r2, [ip, #24]
   224c4:	ldrd	sl, [ip, #40]	; 0x28
   224c8:	strd	r2, [sp, #24]
   224cc:	strd	r4, [sp, #32]
   224d0:	strd	sl, [sp, #40]	; 0x28
   224d4:	beq	22510 <_obstack_memory_used@@Base+0x2278>
   224d8:	ldr	r2, [sp, #80]	; 0x50
   224dc:	mov	r7, r1
   224e0:	mov	r3, sp
   224e4:	mov	r1, r8
   224e8:	str	r7, [sp, #40]	; 0x28
   224ec:	str	r6, [sp, #44]	; 0x2c
   224f0:	bl	21cfc <_obstack_memory_used@@Base+0x1a64>
   224f4:	add	sp, sp, #48	; 0x30
   224f8:	ldrd	r4, [sp]
   224fc:	ldrd	r6, [sp, #8]
   22500:	ldr	r8, [sp, #16]
   22504:	ldrd	sl, [sp, #20]
   22508:	add	sp, sp, #28
   2250c:	pop	{pc}		; (ldr pc, [sp], #4)
   22510:	bl	11d2c <abort@plt>
   22514:	andeq	fp, r3, r8, ror #9
   22518:	mvn	ip, #0
   2251c:	push	{lr}		; (str lr, [sp, #-4]!)
   22520:	sub	sp, sp, #12
   22524:	str	ip, [sp]
   22528:	bl	22470 <_obstack_memory_used@@Base+0x21d8>
   2252c:	add	sp, sp, #12
   22530:	pop	{pc}		; (ldr pc, [sp], #4)
   22534:	mvn	ip, #0
   22538:	push	{lr}		; (str lr, [sp, #-4]!)
   2253c:	sub	sp, sp, #12
   22540:	mov	r3, r2
   22544:	mov	r2, r1
   22548:	mov	r1, r0
   2254c:	mov	r0, #0
   22550:	str	ip, [sp]
   22554:	bl	22470 <_obstack_memory_used@@Base+0x21d8>
   22558:	add	sp, sp, #12
   2255c:	pop	{pc}		; (ldr pc, [sp], #4)
   22560:	push	{lr}		; (str lr, [sp, #-4]!)
   22564:	sub	sp, sp, #12
   22568:	str	r3, [sp]
   2256c:	mov	r3, r2
   22570:	mov	r2, r1
   22574:	mov	r1, r0
   22578:	mov	r0, #0
   2257c:	bl	22470 <_obstack_memory_used@@Base+0x21d8>
   22580:	add	sp, sp, #12
   22584:	pop	{pc}		; (ldr pc, [sp], #4)
   22588:	ldr	r3, [pc]	; 22590 <_obstack_memory_used@@Base+0x22f8>
   2258c:	b	21cfc <_obstack_memory_used@@Base+0x1a64>
   22590:	ldrdeq	sl, [r3], -ip
   22594:	mov	r2, r1
   22598:	ldr	r3, [pc, #8]	; 225a8 <_obstack_memory_used@@Base+0x2310>
   2259c:	mov	r1, r0
   225a0:	mov	r0, #0
   225a4:	b	21cfc <_obstack_memory_used@@Base+0x1a64>
   225a8:	ldrdeq	sl, [r3], -ip
   225ac:	ldr	r3, [pc, #4]	; 225b8 <_obstack_memory_used@@Base+0x2320>
   225b0:	mvn	r2, #0
   225b4:	b	21cfc <_obstack_memory_used@@Base+0x1a64>
   225b8:	ldrdeq	sl, [r3], -ip
   225bc:	mov	r1, r0
   225c0:	ldr	r3, [pc, #8]	; 225d0 <_obstack_memory_used@@Base+0x2338>
   225c4:	mvn	r2, #0
   225c8:	mov	r0, #0
   225cc:	b	21cfc <_obstack_memory_used@@Base+0x1a64>
   225d0:	ldrdeq	sl, [r3], -ip
   225d4:	strd	r4, [sp, #-16]!
   225d8:	ldr	r4, [r0], #8
   225dc:	str	r6, [sp, #8]
   225e0:	str	lr, [sp, #12]
   225e4:	cmp	r4, r0
   225e8:	beq	22614 <_obstack_memory_used@@Base+0x237c>
   225ec:	mov	r0, r4
   225f0:	bl	24600 <_obstack_memory_used@@Base+0x4368>
   225f4:	cmp	r0, #0
   225f8:	movne	r3, r0
   225fc:	moveq	r3, r4
   22600:	ldrd	r4, [sp]
   22604:	mov	r0, r3
   22608:	ldr	r6, [sp, #8]
   2260c:	add	sp, sp, #12
   22610:	pop	{pc}		; (ldr pc, [sp], #4)
   22614:	mov	r0, r1
   22618:	mov	r5, r1
   2261c:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   22620:	subs	r3, r0, #0
   22624:	beq	22600 <_obstack_memory_used@@Base+0x2368>
   22628:	mov	r2, r5
   2262c:	mov	r1, r4
   22630:	ldrd	r4, [sp]
   22634:	ldr	r6, [sp, #8]
   22638:	ldr	lr, [sp, #12]
   2263c:	add	sp, sp, #16
   22640:	b	11930 <memcpy@plt>
   22644:	strd	r4, [sp, #-16]!
   22648:	mov	r5, r0
   2264c:	mov	r4, r0
   22650:	ldr	r3, [r0, #4]
   22654:	ldr	r0, [r5], #8
   22658:	str	r6, [sp, #8]
   2265c:	str	lr, [sp, #12]
   22660:	lsl	r6, r3, #1
   22664:	cmp	r0, r5
   22668:	beq	22674 <_obstack_memory_used@@Base+0x23dc>
   2266c:	bl	1b2b4 <__assert_fail@plt+0x9540>
   22670:	ldr	r3, [r4, #4]
   22674:	cmp	r3, r6
   22678:	bhi	226a4 <_obstack_memory_used@@Base+0x240c>
   2267c:	mov	r0, r6
   22680:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   22684:	subs	r3, r0, #0
   22688:	beq	226b0 <_obstack_memory_used@@Base+0x2418>
   2268c:	mov	r0, #1
   22690:	stm	r4, {r3, r6}
   22694:	ldrd	r4, [sp]
   22698:	ldr	r6, [sp, #8]
   2269c:	add	sp, sp, #12
   226a0:	pop	{pc}		; (ldr pc, [sp], #4)
   226a4:	bl	11bb8 <__errno_location@plt>
   226a8:	mov	r3, #12
   226ac:	str	r3, [r0]
   226b0:	mov	r3, #1024	; 0x400
   226b4:	mov	r0, #0
   226b8:	str	r5, [r4]
   226bc:	str	r3, [r4, #4]
   226c0:	b	22694 <_obstack_memory_used@@Base+0x23fc>
   226c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   226c8:	mov	r5, r0
   226cc:	mov	r4, r0
   226d0:	ldr	r3, [r0, #4]
   226d4:	strd	r6, [sp, #8]
   226d8:	ldr	r7, [r5], #8
   226dc:	str	r8, [sp, #16]
   226e0:	str	lr, [sp, #20]
   226e4:	lsl	r6, r3, #1
   226e8:	cmp	r7, r5
   226ec:	beq	22730 <_obstack_memory_used@@Base+0x2498>
   226f0:	cmp	r3, r6
   226f4:	bhi	22754 <_obstack_memory_used@@Base+0x24bc>
   226f8:	mov	r0, r7
   226fc:	mov	r1, r6
   22700:	bl	24600 <_obstack_memory_used@@Base+0x4368>
   22704:	subs	r8, r0, #0
   22708:	ldreq	r7, [r4]
   2270c:	beq	22760 <_obstack_memory_used@@Base+0x24c8>
   22710:	mov	r0, #1
   22714:	str	r8, [r4]
   22718:	str	r6, [r4, #4]
   2271c:	ldrd	r4, [sp]
   22720:	ldrd	r6, [sp, #8]
   22724:	ldr	r8, [sp, #16]
   22728:	add	sp, sp, #20
   2272c:	pop	{pc}		; (ldr pc, [sp], #4)
   22730:	mov	r0, r6
   22734:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   22738:	subs	r8, r0, #0
   2273c:	moveq	r0, r8
   22740:	beq	2271c <_obstack_memory_used@@Base+0x2484>
   22744:	mov	r1, r7
   22748:	ldr	r2, [r4, #4]
   2274c:	bl	11930 <memcpy@plt>
   22750:	b	22710 <_obstack_memory_used@@Base+0x2478>
   22754:	bl	11bb8 <__errno_location@plt>
   22758:	mov	r3, #12
   2275c:	str	r3, [r0]
   22760:	mov	r0, r7
   22764:	bl	1b2b4 <__assert_fail@plt+0x9540>
   22768:	mov	r3, #1024	; 0x400
   2276c:	mov	r0, #0
   22770:	str	r5, [r4]
   22774:	str	r3, [r4, #4]
   22778:	b	2271c <_obstack_memory_used@@Base+0x2484>
   2277c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22780:	subs	r4, r0, #0
   22784:	strd	r6, [sp, #8]
   22788:	str	r8, [sp, #16]
   2278c:	str	lr, [sp, #20]
   22790:	beq	227f4 <_obstack_memory_used@@Base+0x255c>
   22794:	cmp	r4, #10
   22798:	beq	227b4 <_obstack_memory_used@@Base+0x251c>
   2279c:	mov	r0, r4
   227a0:	ldrd	r4, [sp]
   227a4:	ldrd	r6, [sp, #8]
   227a8:	ldr	r8, [sp, #16]
   227ac:	add	sp, sp, #20
   227b0:	pop	{pc}		; (ldr pc, [sp], #4)
   227b4:	mov	r5, r1
   227b8:	movw	r1, #26804	; 0x68b4
   227bc:	movt	r1, #2
   227c0:	ldr	r6, [r5]
   227c4:	mov	r0, r6
   227c8:	bl	118a0 <strcmp@plt>
   227cc:	subs	r7, r0, #0
   227d0:	bne	2279c <_obstack_memory_used@@Base+0x2504>
   227d4:	mov	r0, r6
   227d8:	mvn	r4, #0
   227dc:	bl	11ce4 <freecon@plt>
   227e0:	str	r7, [r5]
   227e4:	bl	11bb8 <__errno_location@plt>
   227e8:	mov	r3, #61	; 0x3d
   227ec:	str	r3, [r0]
   227f0:	b	2279c <_obstack_memory_used@@Base+0x2504>
   227f4:	bl	11bb8 <__errno_location@plt>
   227f8:	mov	r3, #95	; 0x5f
   227fc:	mvn	r4, #0
   22800:	str	r3, [r0]
   22804:	b	2279c <_obstack_memory_used@@Base+0x2504>
   22808:	str	r4, [sp, #-8]!
   2280c:	mov	r4, r1
   22810:	str	lr, [sp, #4]
   22814:	bl	11b7c <getfilecon@plt>
   22818:	mov	r1, r4
   2281c:	ldr	r4, [sp]
   22820:	ldr	lr, [sp, #4]
   22824:	add	sp, sp, #8
   22828:	b	2277c <_obstack_memory_used@@Base+0x24e4>
   2282c:	str	r4, [sp, #-8]!
   22830:	mov	r4, r1
   22834:	str	lr, [sp, #4]
   22838:	bl	11ad4 <lgetfilecon@plt>
   2283c:	mov	r1, r4
   22840:	ldr	r4, [sp]
   22844:	ldr	lr, [sp, #4]
   22848:	add	sp, sp, #8
   2284c:	b	2277c <_obstack_memory_used@@Base+0x24e4>
   22850:	str	r4, [sp, #-8]!
   22854:	mov	r4, r1
   22858:	str	lr, [sp, #4]
   2285c:	bl	119a8 <fgetfilecon@plt>
   22860:	mov	r1, r4
   22864:	ldr	r4, [sp]
   22868:	ldr	lr, [sp, #4]
   2286c:	add	sp, sp, #8
   22870:	b	2277c <_obstack_memory_used@@Base+0x24e4>
   22874:	strd	r4, [sp, #-16]!
   22878:	mov	r5, r1
   2287c:	mov	r1, #0
   22880:	mov	r4, r2
   22884:	str	r6, [sp, #8]
   22888:	str	lr, [sp, #12]
   2288c:	bl	11c54 <setlocale@plt>
   22890:	subs	r6, r0, #0
   22894:	beq	22914 <_obstack_memory_used@@Base+0x267c>
   22898:	bl	11b94 <strlen@plt>
   2289c:	cmp	r4, r0
   228a0:	bhi	228c0 <_obstack_memory_used@@Base+0x2628>
   228a4:	cmp	r4, #0
   228a8:	moveq	r0, #34	; 0x22
   228ac:	bne	228e4 <_obstack_memory_used@@Base+0x264c>
   228b0:	ldrd	r4, [sp]
   228b4:	ldr	r6, [sp, #8]
   228b8:	add	sp, sp, #12
   228bc:	pop	{pc}		; (ldr pc, [sp], #4)
   228c0:	add	r2, r0, #1
   228c4:	mov	r1, r6
   228c8:	mov	r0, r5
   228cc:	bl	11930 <memcpy@plt>
   228d0:	ldrd	r4, [sp]
   228d4:	mov	r0, #0
   228d8:	ldr	r6, [sp, #8]
   228dc:	add	sp, sp, #12
   228e0:	pop	{pc}		; (ldr pc, [sp], #4)
   228e4:	sub	r4, r4, #1
   228e8:	mov	r1, r6
   228ec:	mov	r2, r4
   228f0:	mov	r0, r5
   228f4:	bl	11930 <memcpy@plt>
   228f8:	mov	r3, #0
   228fc:	mov	r0, #34	; 0x22
   22900:	strb	r3, [r5, r4]
   22904:	ldrd	r4, [sp]
   22908:	ldr	r6, [sp, #8]
   2290c:	add	sp, sp, #12
   22910:	pop	{pc}		; (ldr pc, [sp], #4)
   22914:	cmp	r4, #0
   22918:	mov	r0, #22
   2291c:	strbne	r6, [r5]
   22920:	ldrd	r4, [sp]
   22924:	ldr	r6, [sp, #8]
   22928:	add	sp, sp, #12
   2292c:	pop	{pc}		; (ldr pc, [sp], #4)
   22930:	mov	r1, #0
   22934:	b	11c54 <setlocale@plt>
   22938:	subs	r1, r0, #0
   2293c:	movw	r0, #35720	; 0x8b88
   22940:	movt	r0, #2
   22944:	beq	22950 <_obstack_memory_used@@Base+0x26b8>
   22948:	mov	r2, #1
   2294c:	b	11bac <setenv@plt>
   22950:	b	11d14 <unsetenv@plt>
   22954:	cmp	r0, #0
   22958:	bxeq	lr
   2295c:	str	r4, [sp, #-8]!
   22960:	str	lr, [sp, #4]
   22964:	ldr	r4, [r0]
   22968:	bl	1b2b4 <__assert_fail@plt+0x9540>
   2296c:	subs	r0, r4, #0
   22970:	bne	22964 <_obstack_memory_used@@Base+0x26cc>
   22974:	ldr	r4, [sp]
   22978:	add	sp, sp, #4
   2297c:	pop	{pc}		; (ldr pc, [sp], #4)
   22980:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22984:	mov	r5, r0
   22988:	strd	r6, [sp, #8]
   2298c:	str	r8, [sp, #16]
   22990:	str	lr, [sp, #20]
   22994:	bl	11bb8 <__errno_location@plt>
   22998:	mov	r4, r0
   2299c:	ldrb	r0, [r5, #4]
   229a0:	ldr	r6, [r4]
   229a4:	cmp	r0, #0
   229a8:	addne	r0, r5, #5
   229ac:	bl	22938 <_obstack_memory_used@@Base+0x26a0>
   229b0:	cmp	r0, #0
   229b4:	beq	229e4 <_obstack_memory_used@@Base+0x274c>
   229b8:	ldr	r6, [r4]
   229bc:	mov	r7, #0
   229c0:	mov	r0, r5
   229c4:	bl	22954 <_obstack_memory_used@@Base+0x26bc>
   229c8:	mov	r0, r7
   229cc:	ldr	r8, [sp, #16]
   229d0:	str	r6, [r4]
   229d4:	ldrd	r4, [sp]
   229d8:	ldrd	r6, [sp, #8]
   229dc:	add	sp, sp, #20
   229e0:	pop	{pc}		; (ldr pc, [sp], #4)
   229e4:	mov	r7, #1
   229e8:	bl	119fc <tzset@plt>
   229ec:	b	229c0 <_obstack_memory_used@@Base+0x2728>
   229f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   229f4:	strd	r6, [sp, #8]
   229f8:	subs	r6, r0, #0
   229fc:	str	r8, [sp, #16]
   22a00:	str	lr, [sp, #20]
   22a04:	beq	22a70 <_obstack_memory_used@@Base+0x27d8>
   22a08:	bl	11b94 <strlen@plt>
   22a0c:	add	r5, r0, #1
   22a10:	cmp	r5, #58	; 0x3a
   22a14:	movcs	r0, r5
   22a18:	movcc	r0, #58	; 0x3a
   22a1c:	add	r0, r0, #9
   22a20:	bic	r0, r0, #3
   22a24:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   22a28:	subs	r4, r0, #0
   22a2c:	beq	22a58 <_obstack_memory_used@@Base+0x27c0>
   22a30:	mov	r7, #0
   22a34:	mov	ip, #1
   22a38:	add	r3, r4, #5
   22a3c:	mov	r1, r6
   22a40:	mov	r0, r3
   22a44:	mov	r2, r5
   22a48:	str	r7, [r4]
   22a4c:	strh	ip, [r4, #4]
   22a50:	bl	11930 <memcpy@plt>
   22a54:	strb	r7, [r0, r5]
   22a58:	mov	r0, r4
   22a5c:	ldrd	r4, [sp]
   22a60:	ldrd	r6, [sp, #8]
   22a64:	ldr	r8, [sp, #16]
   22a68:	add	sp, sp, #20
   22a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   22a70:	mov	r0, #64	; 0x40
   22a74:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   22a78:	subs	r4, r0, #0
   22a7c:	strne	r6, [r4]
   22a80:	strhne	r6, [r4, #4]
   22a84:	b	22a58 <_obstack_memory_used@@Base+0x27c0>
   22a88:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22a8c:	strd	r6, [sp, #8]
   22a90:	ldr	r6, [r1, #40]	; 0x28
   22a94:	str	r8, [sp, #16]
   22a98:	str	lr, [sp, #20]
   22a9c:	cmp	r6, #0
   22aa0:	beq	22b7c <_obstack_memory_used@@Base+0x28e4>
   22aa4:	cmp	r1, r6
   22aa8:	mov	r7, r1
   22aac:	mov	r5, r0
   22ab0:	bhi	22ac0 <_obstack_memory_used@@Base+0x2828>
   22ab4:	add	r3, r1, #44	; 0x2c
   22ab8:	cmp	r6, r3
   22abc:	bcc	22b7c <_obstack_memory_used@@Base+0x28e4>
   22ac0:	ldrb	r3, [r6]
   22ac4:	cmp	r3, #0
   22ac8:	addne	r4, r5, #5
   22acc:	beq	22b70 <_obstack_memory_used@@Base+0x28d8>
   22ad0:	mov	r1, r6
   22ad4:	mov	r0, r4
   22ad8:	bl	118a0 <strcmp@plt>
   22adc:	cmp	r0, #0
   22ae0:	add	r2, r5, #5
   22ae4:	mov	r0, r4
   22ae8:	beq	22b54 <_obstack_memory_used@@Base+0x28bc>
   22aec:	ldrb	r3, [r4]
   22af0:	cmp	r3, #0
   22af4:	bne	22b0c <_obstack_memory_used@@Base+0x2874>
   22af8:	cmp	r4, r2
   22afc:	bne	22b84 <_obstack_memory_used@@Base+0x28ec>
   22b00:	ldrb	r3, [r5, #4]
   22b04:	cmp	r3, #0
   22b08:	beq	22b84 <_obstack_memory_used@@Base+0x28ec>
   22b0c:	bl	11b94 <strlen@plt>
   22b10:	add	r0, r0, #1
   22b14:	ldrb	r3, [r4, r0]!
   22b18:	cmp	r3, #0
   22b1c:	bne	22ad0 <_obstack_memory_used@@Base+0x2838>
   22b20:	ldr	r3, [r5]
   22b24:	cmp	r3, #0
   22b28:	addne	r4, r3, #5
   22b2c:	movne	r5, r3
   22b30:	b	22ad0 <_obstack_memory_used@@Base+0x2838>
   22b34:	mov	r0, r6
   22b38:	bl	229f0 <_obstack_memory_used@@Base+0x2758>
   22b3c:	cmp	r0, #0
   22b40:	str	r0, [r5]
   22b44:	beq	22b5c <_obstack_memory_used@@Base+0x28c4>
   22b48:	mov	r3, #0
   22b4c:	add	r4, r0, #5
   22b50:	strb	r3, [r0, #4]
   22b54:	mov	r0, #1
   22b58:	str	r4, [r7, #40]	; 0x28
   22b5c:	ldrd	r4, [sp]
   22b60:	ldrd	r6, [sp, #8]
   22b64:	ldr	r8, [sp, #16]
   22b68:	add	sp, sp, #20
   22b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   22b70:	movw	r4, #37260	; 0x918c
   22b74:	movt	r4, #2
   22b78:	b	22b54 <_obstack_memory_used@@Base+0x28bc>
   22b7c:	mov	r0, #1
   22b80:	b	22b5c <_obstack_memory_used@@Base+0x28c4>
   22b84:	mov	r0, r6
   22b88:	bl	11b94 <strlen@plt>
   22b8c:	add	r3, r5, #64	; 0x40
   22b90:	add	r8, r0, #1
   22b94:	sub	r3, r3, r4
   22b98:	cmp	r3, r8
   22b9c:	ble	22b34 <_obstack_memory_used@@Base+0x289c>
   22ba0:	mov	r1, r6
   22ba4:	mov	r2, r8
   22ba8:	mov	r0, r4
   22bac:	bl	11930 <memcpy@plt>
   22bb0:	mov	r3, #0
   22bb4:	strb	r3, [r4, r8]
   22bb8:	b	22b54 <_obstack_memory_used@@Base+0x28bc>
   22bbc:	strd	r4, [sp, #-16]!
   22bc0:	mov	r4, r0
   22bc4:	movw	r0, #35720	; 0x8b88
   22bc8:	movt	r0, #2
   22bcc:	str	r6, [sp, #8]
   22bd0:	str	lr, [sp, #12]
   22bd4:	bl	11ac8 <getenv@plt>
   22bd8:	subs	r5, r0, #0
   22bdc:	ldrb	r3, [r4, #4]
   22be0:	beq	22c68 <_obstack_memory_used@@Base+0x29d0>
   22be4:	cmp	r3, #0
   22be8:	bne	22c3c <_obstack_memory_used@@Base+0x29a4>
   22bec:	mov	r0, r5
   22bf0:	bl	229f0 <_obstack_memory_used@@Base+0x2758>
   22bf4:	subs	r5, r0, #0
   22bf8:	beq	22c54 <_obstack_memory_used@@Base+0x29bc>
   22bfc:	ldrb	r0, [r4, #4]
   22c00:	cmp	r0, #0
   22c04:	addne	r0, r4, #5
   22c08:	bl	22938 <_obstack_memory_used@@Base+0x26a0>
   22c0c:	cmp	r0, #0
   22c10:	beq	22c74 <_obstack_memory_used@@Base+0x29dc>
   22c14:	bl	11bb8 <__errno_location@plt>
   22c18:	cmp	r5, #1
   22c1c:	mov	r4, r0
   22c20:	ldr	r6, [r0]
   22c24:	beq	22c30 <_obstack_memory_used@@Base+0x2998>
   22c28:	mov	r0, r5
   22c2c:	bl	22954 <_obstack_memory_used@@Base+0x26bc>
   22c30:	mov	r5, #0
   22c34:	str	r6, [r4]
   22c38:	b	22c54 <_obstack_memory_used@@Base+0x29bc>
   22c3c:	mov	r1, r5
   22c40:	add	r0, r4, #5
   22c44:	bl	118a0 <strcmp@plt>
   22c48:	cmp	r0, #0
   22c4c:	bne	22bec <_obstack_memory_used@@Base+0x2954>
   22c50:	mov	r5, #1
   22c54:	mov	r0, r5
   22c58:	ldrd	r4, [sp]
   22c5c:	ldr	r6, [sp, #8]
   22c60:	add	sp, sp, #12
   22c64:	pop	{pc}		; (ldr pc, [sp], #4)
   22c68:	cmp	r3, #0
   22c6c:	beq	22c50 <_obstack_memory_used@@Base+0x29b8>
   22c70:	b	22bec <_obstack_memory_used@@Base+0x2954>
   22c74:	bl	119fc <tzset@plt>
   22c78:	b	22c54 <_obstack_memory_used@@Base+0x29bc>
   22c7c:	cmp	r0, #1
   22c80:	beq	22c88 <_obstack_memory_used@@Base+0x29f0>
   22c84:	b	22954 <_obstack_memory_used@@Base+0x26bc>
   22c88:	bx	lr
   22c8c:	subs	ip, r0, #0
   22c90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22c94:	mov	r5, r1
   22c98:	strd	r6, [sp, #8]
   22c9c:	str	r8, [sp, #16]
   22ca0:	str	lr, [sp, #20]
   22ca4:	beq	22d30 <_obstack_memory_used@@Base+0x2a98>
   22ca8:	mov	r4, r2
   22cac:	mov	r6, ip
   22cb0:	bl	22bbc <_obstack_memory_used@@Base+0x2924>
   22cb4:	subs	r7, r0, #0
   22cb8:	beq	22d04 <_obstack_memory_used@@Base+0x2a6c>
   22cbc:	mov	r0, r5
   22cc0:	mov	r1, r4
   22cc4:	bl	119b4 <localtime_r@plt>
   22cc8:	cmp	r0, #0
   22ccc:	beq	22cf4 <_obstack_memory_used@@Base+0x2a5c>
   22cd0:	mov	r0, r6
   22cd4:	mov	r1, r4
   22cd8:	bl	22a88 <_obstack_memory_used@@Base+0x27f0>
   22cdc:	cmp	r0, #0
   22ce0:	beq	22cf4 <_obstack_memory_used@@Base+0x2a5c>
   22ce4:	cmp	r7, #1
   22ce8:	bne	22d1c <_obstack_memory_used@@Base+0x2a84>
   22cec:	mov	r0, r4
   22cf0:	b	22d08 <_obstack_memory_used@@Base+0x2a70>
   22cf4:	cmp	r7, #1
   22cf8:	beq	22d04 <_obstack_memory_used@@Base+0x2a6c>
   22cfc:	mov	r0, r7
   22d00:	bl	22980 <_obstack_memory_used@@Base+0x26e8>
   22d04:	mov	r0, #0
   22d08:	ldrd	r4, [sp]
   22d0c:	ldrd	r6, [sp, #8]
   22d10:	ldr	r8, [sp, #16]
   22d14:	add	sp, sp, #20
   22d18:	pop	{pc}		; (ldr pc, [sp], #4)
   22d1c:	mov	r0, r7
   22d20:	bl	22980 <_obstack_memory_used@@Base+0x26e8>
   22d24:	cmp	r0, #0
   22d28:	bne	22cec <_obstack_memory_used@@Base+0x2a54>
   22d2c:	b	22d04 <_obstack_memory_used@@Base+0x2a6c>
   22d30:	mov	r0, r5
   22d34:	mov	r1, r2
   22d38:	ldrd	r4, [sp]
   22d3c:	ldrd	r6, [sp, #8]
   22d40:	ldr	r8, [sp, #16]
   22d44:	ldr	lr, [sp, #20]
   22d48:	add	sp, sp, #24
   22d4c:	b	11888 <gmtime_r@plt>
   22d50:	strd	r4, [sp, #-20]!	; 0xffffffec
   22d54:	subs	r5, r0, #0
   22d58:	strd	r6, [sp, #8]
   22d5c:	mov	r6, r1
   22d60:	str	lr, [sp, #16]
   22d64:	sub	sp, sp, #52	; 0x34
   22d68:	beq	22e58 <_obstack_memory_used@@Base+0x2bc0>
   22d6c:	bl	22bbc <_obstack_memory_used@@Base+0x2924>
   22d70:	subs	r4, r0, #0
   22d74:	beq	22dd8 <_obstack_memory_used@@Base+0x2b40>
   22d78:	ldr	r3, [r6]
   22d7c:	mvn	r2, #0
   22d80:	add	r0, sp, #4
   22d84:	ldr	r1, [r6, #4]
   22d88:	str	r3, [sp, #4]
   22d8c:	str	r2, [sp, #32]
   22d90:	ldrd	r2, [r6, #8]
   22d94:	str	r1, [sp, #8]
   22d98:	ldr	r1, [r6, #16]
   22d9c:	strd	r2, [sp, #12]
   22da0:	ldr	r2, [r6, #20]
   22da4:	str	r1, [sp, #20]
   22da8:	ldr	r3, [r6, #32]
   22dac:	str	r2, [sp, #24]
   22db0:	str	r3, [sp, #36]	; 0x24
   22db4:	bl	118b8 <mktime@plt>
   22db8:	ldr	r3, [sp, #32]
   22dbc:	mov	r7, r0
   22dc0:	cmp	r3, #0
   22dc4:	bge	22df4 <_obstack_memory_used@@Base+0x2b5c>
   22dc8:	cmp	r4, #1
   22dcc:	beq	22dd8 <_obstack_memory_used@@Base+0x2b40>
   22dd0:	mov	r0, r4
   22dd4:	bl	22980 <_obstack_memory_used@@Base+0x26e8>
   22dd8:	mvn	r7, #0
   22ddc:	mov	r0, r7
   22de0:	add	sp, sp, #52	; 0x34
   22de4:	ldrd	r4, [sp]
   22de8:	ldrd	r6, [sp, #8]
   22dec:	add	sp, sp, #16
   22df0:	pop	{pc}		; (ldr pc, [sp], #4)
   22df4:	mov	r0, r5
   22df8:	add	r1, sp, #4
   22dfc:	bl	22a88 <_obstack_memory_used@@Base+0x27f0>
   22e00:	cmp	r0, #0
   22e04:	beq	22dc8 <_obstack_memory_used@@Base+0x2b30>
   22e08:	cmp	r4, #1
   22e0c:	bne	22e44 <_obstack_memory_used@@Base+0x2bac>
   22e10:	ldrd	r0, [sp, #4]
   22e14:	ldrd	r2, [sp, #12]
   22e18:	ldrd	r4, [sp, #20]
   22e1c:	strd	r0, [r6]
   22e20:	ldrd	r0, [sp, #28]
   22e24:	strd	r2, [r6, #8]
   22e28:	ldrd	r2, [sp, #36]	; 0x24
   22e2c:	strd	r4, [r6, #16]
   22e30:	ldr	ip, [sp, #44]	; 0x2c
   22e34:	strd	r0, [r6, #24]
   22e38:	strd	r2, [r6, #32]
   22e3c:	str	ip, [r6, #40]	; 0x28
   22e40:	b	22ddc <_obstack_memory_used@@Base+0x2b44>
   22e44:	mov	r0, r4
   22e48:	bl	22980 <_obstack_memory_used@@Base+0x26e8>
   22e4c:	cmp	r0, #0
   22e50:	bne	22e10 <_obstack_memory_used@@Base+0x2b78>
   22e54:	b	22dd8 <_obstack_memory_used@@Base+0x2b40>
   22e58:	mov	r0, r1
   22e5c:	bl	11cc0 <timegm@plt>
   22e60:	mov	r7, r0
   22e64:	b	22ddc <_obstack_memory_used@@Base+0x2b44>
   22e68:	cmp	r1, #0
   22e6c:	strd	r4, [sp, #-16]!
   22e70:	mov	ip, r3
   22e74:	str	r6, [sp, #8]
   22e78:	mov	r4, r0
   22e7c:	str	lr, [sp, #12]
   22e80:	sub	sp, sp, #32
   22e84:	ldr	r5, [sp, #48]	; 0x30
   22e88:	ldr	r6, [sp, #52]	; 0x34
   22e8c:	beq	22fd0 <_obstack_memory_used@@Base+0x2d38>
   22e90:	mov	r3, r1
   22e94:	mov	r1, #1
   22e98:	stm	sp, {r2, ip}
   22e9c:	movw	r2, #37704	; 0x9348
   22ea0:	movt	r2, #2
   22ea4:	bl	11c18 <__fprintf_chk@plt>
   22ea8:	mov	r2, #5
   22eac:	movw	r1, #37724	; 0x935c
   22eb0:	movt	r1, #2
   22eb4:	mov	r0, #0
   22eb8:	bl	11984 <dcgettext@plt>
   22ebc:	movw	ip, #2022	; 0x7e6
   22ec0:	mov	r3, r0
   22ec4:	mov	r1, #1
   22ec8:	movw	r2, #38452	; 0x9634
   22ecc:	movt	r2, #2
   22ed0:	mov	r0, r4
   22ed4:	str	ip, [sp]
   22ed8:	bl	11c18 <__fprintf_chk@plt>
   22edc:	mov	r1, r4
   22ee0:	mov	r0, #10
   22ee4:	bl	11978 <fputc_unlocked@plt>
   22ee8:	mov	r2, #5
   22eec:	movw	r1, #37728	; 0x9360
   22ef0:	movt	r1, #2
   22ef4:	mov	r0, #0
   22ef8:	bl	11984 <dcgettext@plt>
   22efc:	mov	r2, r0
   22f00:	mov	r1, #1
   22f04:	movw	r3, #37900	; 0x940c
   22f08:	movt	r3, #2
   22f0c:	mov	r0, r4
   22f10:	bl	11c18 <__fprintf_chk@plt>
   22f14:	mov	r1, r4
   22f18:	mov	r0, #10
   22f1c:	bl	11978 <fputc_unlocked@plt>
   22f20:	cmp	r6, #9
   22f24:	ldrls	pc, [pc, r6, lsl #2]
   22f28:	b	2323c <_obstack_memory_used@@Base+0x2fa4>
   22f2c:			; <UNDEFINED> instruction: 0x00022fbc
   22f30:	andeq	r2, r2, ip, ror #31
   22f34:	andeq	r3, r2, r8, lsr #32
   22f38:	andeq	r3, r2, r8, rrx
   22f3c:	strheq	r3, [r2], -r0
   22f40:	andeq	r3, r2, r8, ror #1
   22f44:	andeq	r3, r2, r0, lsr r1
   22f48:	andeq	r3, r2, r4, lsl #3
   22f4c:	ldrdeq	r3, [r2], -ip
   22f50:	andeq	r2, r2, r4, asr pc
   22f54:	movw	r1, #38204	; 0x953c
   22f58:	movt	r1, #2
   22f5c:	mov	r2, #5
   22f60:	mov	r0, #0
   22f64:	bl	11984 <dcgettext@plt>
   22f68:	ldr	lr, [r5, #4]
   22f6c:	mov	r2, r0
   22f70:	mov	r1, #1
   22f74:	mov	r0, r4
   22f78:	ldr	r3, [r5, #8]
   22f7c:	ldr	ip, [r5, #32]
   22f80:	str	lr, [sp]
   22f84:	ldr	lr, [r5, #12]
   22f88:	str	ip, [sp, #28]
   22f8c:	ldr	ip, [r5, #28]
   22f90:	str	r3, [sp, #4]
   22f94:	ldr	r3, [r5, #16]
   22f98:	str	lr, [sp, #8]
   22f9c:	ldr	lr, [r5, #20]
   22fa0:	str	ip, [sp, #24]
   22fa4:	ldr	ip, [r5, #24]
   22fa8:	str	r3, [sp, #12]
   22fac:	ldr	r3, [r5]
   22fb0:	str	lr, [sp, #16]
   22fb4:	str	ip, [sp, #20]
   22fb8:	bl	11c18 <__fprintf_chk@plt>
   22fbc:	add	sp, sp, #32
   22fc0:	ldrd	r4, [sp]
   22fc4:	ldr	r6, [sp, #8]
   22fc8:	add	sp, sp, #12
   22fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   22fd0:	mov	r3, r2
   22fd4:	mov	r1, #1
   22fd8:	str	ip, [sp]
   22fdc:	movw	r2, #37716	; 0x9354
   22fe0:	movt	r2, #2
   22fe4:	bl	11c18 <__fprintf_chk@plt>
   22fe8:	b	22ea8 <_obstack_memory_used@@Base+0x2c10>
   22fec:	mov	r2, #5
   22ff0:	movw	r1, #37936	; 0x9430
   22ff4:	movt	r1, #2
   22ff8:	mov	r0, #0
   22ffc:	bl	11984 <dcgettext@plt>
   23000:	ldr	r3, [r5]
   23004:	mov	r2, r0
   23008:	mov	r1, #1
   2300c:	mov	r0, r4
   23010:	add	sp, sp, #32
   23014:	ldrd	r4, [sp]
   23018:	ldr	r6, [sp, #8]
   2301c:	ldr	lr, [sp, #12]
   23020:	add	sp, sp, #16
   23024:	b	11c18 <__fprintf_chk@plt>
   23028:	mov	r2, #5
   2302c:	movw	r1, #37952	; 0x9440
   23030:	movt	r1, #2
   23034:	mov	r0, #0
   23038:	bl	11984 <dcgettext@plt>
   2303c:	ldm	r5, {r3, ip}
   23040:	mov	r2, r0
   23044:	mov	r1, #1
   23048:	mov	r0, r4
   2304c:	str	ip, [sp, #48]	; 0x30
   23050:	add	sp, sp, #32
   23054:	ldrd	r4, [sp]
   23058:	ldr	r6, [sp, #8]
   2305c:	ldr	lr, [sp, #12]
   23060:	add	sp, sp, #16
   23064:	b	11c18 <__fprintf_chk@plt>
   23068:	mov	r2, #5
   2306c:	movw	r1, #37976	; 0x9458
   23070:	movt	r1, #2
   23074:	mov	r0, #0
   23078:	bl	11984 <dcgettext@plt>
   2307c:	ldm	r5, {r3, lr}
   23080:	mov	r2, r0
   23084:	mov	r1, #1
   23088:	mov	r0, r4
   2308c:	ldr	ip, [r5, #8]
   23090:	str	lr, [sp, #48]	; 0x30
   23094:	str	ip, [sp, #52]	; 0x34
   23098:	add	sp, sp, #32
   2309c:	ldrd	r4, [sp]
   230a0:	ldr	r6, [sp, #8]
   230a4:	ldr	lr, [sp, #12]
   230a8:	add	sp, sp, #16
   230ac:	b	11c18 <__fprintf_chk@plt>
   230b0:	mov	r2, #5
   230b4:	movw	r1, #38004	; 0x9474
   230b8:	movt	r1, #2
   230bc:	mov	r0, #0
   230c0:	bl	11984 <dcgettext@plt>
   230c4:	ldmib	r5, {r3, ip, lr}
   230c8:	mov	r2, r0
   230cc:	mov	r1, #1
   230d0:	mov	r0, r4
   230d4:	str	r3, [sp]
   230d8:	ldr	r3, [r5]
   230dc:	stmib	sp, {ip, lr}
   230e0:	bl	11c18 <__fprintf_chk@plt>
   230e4:	b	22fbc <_obstack_memory_used@@Base+0x2d24>
   230e8:	mov	r2, #5
   230ec:	movw	r1, #38036	; 0x9494
   230f0:	movt	r1, #2
   230f4:	mov	r0, #0
   230f8:	bl	11984 <dcgettext@plt>
   230fc:	ldmib	r5, {ip, lr}
   23100:	mov	r2, r0
   23104:	mov	r1, #1
   23108:	mov	r0, r4
   2310c:	ldr	r3, [r5, #16]
   23110:	str	ip, [sp]
   23114:	ldr	ip, [r5, #12]
   23118:	str	r3, [sp, #12]
   2311c:	ldr	r3, [r5]
   23120:	str	lr, [sp, #4]
   23124:	str	ip, [sp, #8]
   23128:	bl	11c18 <__fprintf_chk@plt>
   2312c:	b	22fbc <_obstack_memory_used@@Base+0x2d24>
   23130:	mov	r2, #5
   23134:	movw	r1, #38072	; 0x94b8
   23138:	movt	r1, #2
   2313c:	mov	r0, #0
   23140:	bl	11984 <dcgettext@plt>
   23144:	ldr	lr, [r5, #4]
   23148:	mov	r2, r0
   2314c:	mov	r1, #1
   23150:	mov	r0, r4
   23154:	ldr	r3, [r5, #8]
   23158:	ldr	ip, [r5, #20]
   2315c:	str	lr, [sp]
   23160:	ldr	lr, [r5, #12]
   23164:	str	ip, [sp, #16]
   23168:	ldr	ip, [r5, #16]
   2316c:	str	r3, [sp, #4]
   23170:	ldr	r3, [r5]
   23174:	str	lr, [sp, #8]
   23178:	str	ip, [sp, #12]
   2317c:	bl	11c18 <__fprintf_chk@plt>
   23180:	b	22fbc <_obstack_memory_used@@Base+0x2d24>
   23184:	mov	r2, #5
   23188:	movw	r1, #38112	; 0x94e0
   2318c:	movt	r1, #2
   23190:	mov	r0, #0
   23194:	bl	11984 <dcgettext@plt>
   23198:	ldmib	r5, {r3, ip}
   2319c:	mov	r2, r0
   231a0:	mov	r1, #1
   231a4:	mov	r0, r4
   231a8:	ldr	lr, [r5, #24]
   231ac:	str	r3, [sp]
   231b0:	ldr	r3, [r5, #12]
   231b4:	str	lr, [sp, #20]
   231b8:	ldr	lr, [r5, #20]
   231bc:	str	ip, [sp, #4]
   231c0:	ldr	ip, [r5, #16]
   231c4:	str	r3, [sp, #8]
   231c8:	ldr	r3, [r5]
   231cc:	str	ip, [sp, #12]
   231d0:	str	lr, [sp, #16]
   231d4:	bl	11c18 <__fprintf_chk@plt>
   231d8:	b	22fbc <_obstack_memory_used@@Base+0x2d24>
   231dc:	mov	r2, #5
   231e0:	movw	r1, #38156	; 0x950c
   231e4:	movt	r1, #2
   231e8:	mov	r0, #0
   231ec:	bl	11984 <dcgettext@plt>
   231f0:	ldmib	r5, {ip, lr}
   231f4:	mov	r2, r0
   231f8:	mov	r1, #1
   231fc:	mov	r0, r4
   23200:	ldr	r3, [r5, #28]
   23204:	str	ip, [sp]
   23208:	ldr	ip, [r5, #12]
   2320c:	str	r3, [sp, #24]
   23210:	ldr	r3, [r5, #24]
   23214:	str	lr, [sp, #4]
   23218:	ldr	lr, [r5, #16]
   2321c:	str	ip, [sp, #8]
   23220:	ldr	ip, [r5, #20]
   23224:	str	r3, [sp, #20]
   23228:	ldr	r3, [r5]
   2322c:	str	lr, [sp, #12]
   23230:	str	ip, [sp, #16]
   23234:	bl	11c18 <__fprintf_chk@plt>
   23238:	b	22fbc <_obstack_memory_used@@Base+0x2d24>
   2323c:	movw	r1, #38256	; 0x9570
   23240:	movt	r1, #2
   23244:	b	22f5c <_obstack_memory_used@@Base+0x2cc4>
   23248:	strd	r4, [sp, #-12]!
   2324c:	str	lr, [sp, #8]
   23250:	sub	sp, sp, #12
   23254:	ldr	r5, [sp, #24]
   23258:	ldr	ip, [r5]
   2325c:	cmp	ip, #0
   23260:	beq	2327c <_obstack_memory_used@@Base+0x2fe4>
   23264:	mov	lr, r5
   23268:	mov	ip, #0
   2326c:	ldr	r4, [lr, #4]!
   23270:	add	ip, ip, #1
   23274:	cmp	r4, #0
   23278:	bne	2326c <_obstack_memory_used@@Base+0x2fd4>
   2327c:	stm	sp, {r5, ip}
   23280:	bl	22e68 <_obstack_memory_used@@Base+0x2bd0>
   23284:	add	sp, sp, #12
   23288:	ldrd	r4, [sp]
   2328c:	add	sp, sp, #8
   23290:	pop	{pc}		; (ldr pc, [sp], #4)
   23294:	strd	r4, [sp, #-16]!
   23298:	mov	ip, #0
   2329c:	str	r6, [sp, #8]
   232a0:	str	lr, [sp, #12]
   232a4:	sub	sp, sp, #48	; 0x30
   232a8:	ldr	r5, [sp, #64]	; 0x40
   232ac:	add	r6, sp, #8
   232b0:	mov	r4, r6
   232b4:	ldr	lr, [r5], #4
   232b8:	cmp	lr, #0
   232bc:	str	lr, [r4], #4
   232c0:	beq	232d0 <_obstack_memory_used@@Base+0x3038>
   232c4:	add	ip, ip, #1
   232c8:	cmp	ip, #10
   232cc:	bne	232b4 <_obstack_memory_used@@Base+0x301c>
   232d0:	stm	sp, {r6, ip}
   232d4:	bl	22e68 <_obstack_memory_used@@Base+0x2bd0>
   232d8:	add	sp, sp, #48	; 0x30
   232dc:	ldrd	r4, [sp]
   232e0:	ldr	r6, [sp, #8]
   232e4:	add	sp, sp, #12
   232e8:	pop	{pc}		; (ldr pc, [sp], #4)
   232ec:	push	{r3}		; (str r3, [sp, #-4]!)
   232f0:	mov	ip, #0
   232f4:	strd	r4, [sp, #-12]!
   232f8:	str	lr, [sp, #8]
   232fc:	sub	sp, sp, #56	; 0x38
   23300:	add	r3, sp, #72	; 0x48
   23304:	add	r5, sp, #16
   23308:	mov	r4, r3
   2330c:	mov	lr, r5
   23310:	str	r3, [sp, #12]
   23314:	ldr	r3, [r4], #4
   23318:	cmp	r3, #0
   2331c:	str	r3, [lr], #4
   23320:	beq	23330 <_obstack_memory_used@@Base+0x3098>
   23324:	add	ip, ip, #1
   23328:	cmp	ip, #10
   2332c:	bne	23314 <_obstack_memory_used@@Base+0x307c>
   23330:	ldr	r3, [sp, #68]	; 0x44
   23334:	stm	sp, {r5, ip}
   23338:	bl	22e68 <_obstack_memory_used@@Base+0x2bd0>
   2333c:	add	sp, sp, #56	; 0x38
   23340:	ldrd	r4, [sp]
   23344:	ldr	lr, [sp, #8]
   23348:	add	sp, sp, #12
   2334c:	add	sp, sp, #4
   23350:	bx	lr
   23354:	movw	r3, #41764	; 0xa324
   23358:	movt	r3, #3
   2335c:	str	r4, [sp, #-8]!
   23360:	mov	r0, #10
   23364:	ldr	r1, [r3]
   23368:	str	lr, [sp, #4]
   2336c:	bl	11978 <fputc_unlocked@plt>
   23370:	mov	r2, #5
   23374:	movw	r1, #38316	; 0x95ac
   23378:	movt	r1, #2
   2337c:	mov	r0, #0
   23380:	bl	11984 <dcgettext@plt>
   23384:	mov	r1, r0
   23388:	movw	r2, #38336	; 0x95c0
   2338c:	movt	r2, #2
   23390:	mov	r0, #1
   23394:	bl	11bf4 <__printf_chk@plt>
   23398:	mov	r2, #5
   2339c:	movw	r1, #38360	; 0x95d8
   233a0:	movt	r1, #2
   233a4:	mov	r0, #0
   233a8:	bl	11984 <dcgettext@plt>
   233ac:	mov	r1, r0
   233b0:	movw	r3, #34644	; 0x8754
   233b4:	movt	r3, #2
   233b8:	movw	r2, #34684	; 0x877c
   233bc:	movt	r2, #2
   233c0:	mov	r0, #1
   233c4:	bl	11bf4 <__printf_chk@plt>
   233c8:	mov	r2, #5
   233cc:	movw	r1, #38380	; 0x95ec
   233d0:	movt	r1, #2
   233d4:	mov	r0, #0
   233d8:	bl	11984 <dcgettext@plt>
   233dc:	mov	r1, r0
   233e0:	movw	r2, #38420	; 0x9614
   233e4:	movt	r2, #2
   233e8:	mov	r0, #1
   233ec:	ldr	r4, [sp]
   233f0:	ldr	lr, [sp, #4]
   233f4:	add	sp, sp, #8
   233f8:	b	11bf4 <__printf_chk@plt>
   233fc:	str	r4, [sp, #-8]!
   23400:	str	lr, [sp, #4]
   23404:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   23408:	cmp	r0, #0
   2340c:	beq	2341c <_obstack_memory_used@@Base+0x3184>
   23410:	ldr	r4, [sp]
   23414:	add	sp, sp, #4
   23418:	pop	{pc}		; (ldr pc, [sp], #4)
   2341c:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   23420:	str	r4, [sp, #-8]!
   23424:	str	lr, [sp, #4]
   23428:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   2342c:	cmp	r0, #0
   23430:	beq	23440 <_obstack_memory_used@@Base+0x31a8>
   23434:	ldr	r4, [sp]
   23438:	add	sp, sp, #4
   2343c:	pop	{pc}		; (ldr pc, [sp], #4)
   23440:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   23444:	str	r4, [sp, #-8]!
   23448:	str	lr, [sp, #4]
   2344c:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   23450:	cmp	r0, #0
   23454:	beq	23464 <_obstack_memory_used@@Base+0x31cc>
   23458:	ldr	r4, [sp]
   2345c:	add	sp, sp, #4
   23460:	pop	{pc}		; (ldr pc, [sp], #4)
   23464:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   23468:	strd	r4, [sp, #-16]!
   2346c:	mov	r5, r0
   23470:	mov	r4, r1
   23474:	str	r6, [sp, #8]
   23478:	str	lr, [sp, #12]
   2347c:	bl	24600 <_obstack_memory_used@@Base+0x4368>
   23480:	cmp	r0, #0
   23484:	beq	23498 <_obstack_memory_used@@Base+0x3200>
   23488:	ldrd	r4, [sp]
   2348c:	ldr	r6, [sp, #8]
   23490:	add	sp, sp, #12
   23494:	pop	{pc}		; (ldr pc, [sp], #4)
   23498:	adds	r4, r4, #0
   2349c:	movne	r4, #1
   234a0:	cmp	r5, #0
   234a4:	moveq	r4, #1
   234a8:	cmp	r4, #0
   234ac:	beq	23488 <_obstack_memory_used@@Base+0x31f0>
   234b0:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   234b4:	cmp	r1, #0
   234b8:	orreq	r1, r1, #1
   234bc:	str	r4, [sp, #-8]!
   234c0:	str	lr, [sp, #4]
   234c4:	bl	24600 <_obstack_memory_used@@Base+0x4368>
   234c8:	cmp	r0, #0
   234cc:	beq	234dc <_obstack_memory_used@@Base+0x3244>
   234d0:	ldr	r4, [sp]
   234d4:	add	sp, sp, #4
   234d8:	pop	{pc}		; (ldr pc, [sp], #4)
   234dc:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   234e0:	strd	r4, [sp, #-16]!
   234e4:	mov	r4, r0
   234e8:	mov	r5, r2
   234ec:	str	r6, [sp, #8]
   234f0:	mov	r6, r1
   234f4:	str	lr, [sp, #12]
   234f8:	bl	24944 <_obstack_memory_used@@Base+0x46ac>
   234fc:	cmp	r0, #0
   23500:	beq	23514 <_obstack_memory_used@@Base+0x327c>
   23504:	ldrd	r4, [sp]
   23508:	ldr	r6, [sp, #8]
   2350c:	add	sp, sp, #12
   23510:	pop	{pc}		; (ldr pc, [sp], #4)
   23514:	cmp	r4, #0
   23518:	beq	23528 <_obstack_memory_used@@Base+0x3290>
   2351c:	cmp	r6, #0
   23520:	cmpne	r5, #0
   23524:	beq	23504 <_obstack_memory_used@@Base+0x326c>
   23528:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   2352c:	b	234e0 <_obstack_memory_used@@Base+0x3248>
   23530:	cmp	r2, #0
   23534:	cmpne	r1, #0
   23538:	str	r4, [sp, #-8]!
   2353c:	moveq	r2, #1
   23540:	str	lr, [sp, #4]
   23544:	moveq	r1, r2
   23548:	bl	24944 <_obstack_memory_used@@Base+0x46ac>
   2354c:	cmp	r0, #0
   23550:	beq	23560 <_obstack_memory_used@@Base+0x32c8>
   23554:	ldr	r4, [sp]
   23558:	add	sp, sp, #4
   2355c:	pop	{pc}		; (ldr pc, [sp], #4)
   23560:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   23564:	mov	r2, r1
   23568:	mov	r1, r0
   2356c:	mov	r0, #0
   23570:	b	234e0 <_obstack_memory_used@@Base+0x3248>
   23574:	mov	r2, r1
   23578:	mov	r1, r0
   2357c:	mov	r0, #0
   23580:	b	23530 <_obstack_memory_used@@Base+0x3298>
   23584:	cmp	r0, #0
   23588:	strd	r4, [sp, #-16]!
   2358c:	mov	r5, r1
   23590:	ldr	r4, [r1]
   23594:	str	r6, [sp, #8]
   23598:	str	lr, [sp, #12]
   2359c:	beq	235cc <_obstack_memory_used@@Base+0x3334>
   235a0:	lsr	r3, r4, #1
   235a4:	add	r3, r3, #1
   235a8:	adds	r4, r4, r3
   235ac:	bcs	235e8 <_obstack_memory_used@@Base+0x3350>
   235b0:	mov	r1, r4
   235b4:	bl	234e0 <_obstack_memory_used@@Base+0x3248>
   235b8:	ldr	r6, [sp, #8]
   235bc:	str	r4, [r5]
   235c0:	ldrd	r4, [sp]
   235c4:	add	sp, sp, #12
   235c8:	pop	{pc}		; (ldr pc, [sp], #4)
   235cc:	cmp	r4, #0
   235d0:	bne	235b0 <_obstack_memory_used@@Base+0x3318>
   235d4:	mov	r4, #64	; 0x40
   235d8:	udiv	r4, r4, r2
   235dc:	cmp	r2, #64	; 0x40
   235e0:	addhi	r4, r4, #1
   235e4:	b	235b0 <_obstack_memory_used@@Base+0x3318>
   235e8:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   235ec:	mov	r2, #1
   235f0:	b	23584 <_obstack_memory_used@@Base+0x32ec>
   235f4:	ldr	ip, [r1]
   235f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   235fc:	mov	r5, r1
   23600:	strd	r6, [sp, #8]
   23604:	str	lr, [sp, #28]
   23608:	strd	r8, [sp, #16]
   2360c:	asr	lr, ip, #1
   23610:	ldr	r8, [sp, #32]
   23614:	str	sl, [sp, #24]
   23618:	adds	r4, ip, lr
   2361c:	mvn	lr, r3
   23620:	lsr	lr, lr, #31
   23624:	mvnvs	r4, #-2147483648	; 0x80000000
   23628:	cmp	r3, r4
   2362c:	movge	r1, #0
   23630:	andlt	r1, lr, #1
   23634:	cmp	r1, #0
   23638:	movne	r4, r3
   2363c:	smull	r6, r7, r4, r8
   23640:	cmp	r7, r6, asr #31
   23644:	bne	236cc <_obstack_memory_used@@Base+0x3434>
   23648:	cmp	r6, #63	; 0x3f
   2364c:	mov	r1, r6
   23650:	ble	236b4 <_obstack_memory_used@@Base+0x341c>
   23654:	cmp	r0, #0
   23658:	sub	r6, r4, ip
   2365c:	streq	r0, [r5]
   23660:	cmp	r6, r2
   23664:	bge	23694 <_obstack_memory_used@@Base+0x33fc>
   23668:	adds	r4, ip, r2
   2366c:	bvs	236c8 <_obstack_memory_used@@Base+0x3430>
   23670:	cmp	r4, r3
   23674:	movle	r3, #0
   23678:	andgt	r3, lr, #1
   2367c:	cmp	r3, #0
   23680:	bne	236c8 <_obstack_memory_used@@Base+0x3430>
   23684:	smull	r8, r9, r4, r8
   23688:	cmp	r9, r8, asr #31
   2368c:	mov	r1, r8
   23690:	bne	236c8 <_obstack_memory_used@@Base+0x3430>
   23694:	bl	23468 <_obstack_memory_used@@Base+0x31d0>
   23698:	ldrd	r6, [sp, #8]
   2369c:	ldrd	r8, [sp, #16]
   236a0:	ldr	sl, [sp, #24]
   236a4:	str	r4, [r5]
   236a8:	ldrd	r4, [sp]
   236ac:	add	sp, sp, #28
   236b0:	pop	{pc}		; (ldr pc, [sp], #4)
   236b4:	mov	r6, #64	; 0x40
   236b8:	sdiv	r4, r6, r8
   236bc:	mls	r1, r8, r4, r6
   236c0:	sub	r1, r6, r1
   236c4:	b	23654 <_obstack_memory_used@@Base+0x33bc>
   236c8:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   236cc:	mvn	r6, #-2147483648	; 0x80000000
   236d0:	b	236b8 <_obstack_memory_used@@Base+0x3420>
   236d4:	mov	r1, #1
   236d8:	str	r4, [sp, #-8]!
   236dc:	str	lr, [sp, #4]
   236e0:	bl	24550 <_obstack_memory_used@@Base+0x42b8>
   236e4:	cmp	r0, #0
   236e8:	beq	236f8 <_obstack_memory_used@@Base+0x3460>
   236ec:	ldr	r4, [sp]
   236f0:	add	sp, sp, #4
   236f4:	pop	{pc}		; (ldr pc, [sp], #4)
   236f8:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   236fc:	mov	r1, #1
   23700:	str	r4, [sp, #-8]!
   23704:	str	lr, [sp, #4]
   23708:	bl	24550 <_obstack_memory_used@@Base+0x42b8>
   2370c:	cmp	r0, #0
   23710:	beq	23720 <_obstack_memory_used@@Base+0x3488>
   23714:	ldr	r4, [sp]
   23718:	add	sp, sp, #4
   2371c:	pop	{pc}		; (ldr pc, [sp], #4)
   23720:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   23724:	str	r4, [sp, #-8]!
   23728:	str	lr, [sp, #4]
   2372c:	bl	24550 <_obstack_memory_used@@Base+0x42b8>
   23730:	cmp	r0, #0
   23734:	beq	23744 <_obstack_memory_used@@Base+0x34ac>
   23738:	ldr	r4, [sp]
   2373c:	add	sp, sp, #4
   23740:	pop	{pc}		; (ldr pc, [sp], #4)
   23744:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   23748:	str	r4, [sp, #-8]!
   2374c:	str	lr, [sp, #4]
   23750:	bl	24550 <_obstack_memory_used@@Base+0x42b8>
   23754:	cmp	r0, #0
   23758:	beq	23768 <_obstack_memory_used@@Base+0x34d0>
   2375c:	ldr	r4, [sp]
   23760:	add	sp, sp, #4
   23764:	pop	{pc}		; (ldr pc, [sp], #4)
   23768:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   2376c:	strd	r4, [sp, #-16]!
   23770:	mov	r4, r1
   23774:	str	r6, [sp, #8]
   23778:	mov	r6, r0
   2377c:	mov	r0, r1
   23780:	str	lr, [sp, #12]
   23784:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   23788:	subs	r5, r0, #0
   2378c:	beq	237b0 <_obstack_memory_used@@Base+0x3518>
   23790:	mov	r2, r4
   23794:	mov	r1, r6
   23798:	bl	11930 <memcpy@plt>
   2379c:	mov	r0, r5
   237a0:	ldrd	r4, [sp]
   237a4:	ldr	r6, [sp, #8]
   237a8:	add	sp, sp, #12
   237ac:	pop	{pc}		; (ldr pc, [sp], #4)
   237b0:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   237b4:	strd	r4, [sp, #-16]!
   237b8:	mov	r4, r1
   237bc:	str	r6, [sp, #8]
   237c0:	mov	r6, r0
   237c4:	mov	r0, r1
   237c8:	str	lr, [sp, #12]
   237cc:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   237d0:	subs	r5, r0, #0
   237d4:	beq	237f8 <_obstack_memory_used@@Base+0x3560>
   237d8:	mov	r2, r4
   237dc:	mov	r1, r6
   237e0:	bl	11930 <memcpy@plt>
   237e4:	mov	r0, r5
   237e8:	ldrd	r4, [sp]
   237ec:	ldr	r6, [sp, #8]
   237f0:	add	sp, sp, #12
   237f4:	pop	{pc}		; (ldr pc, [sp], #4)
   237f8:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   237fc:	strd	r4, [sp, #-16]!
   23800:	mov	r4, r1
   23804:	str	r6, [sp, #8]
   23808:	mov	r6, r0
   2380c:	add	r0, r1, #1
   23810:	str	lr, [sp, #12]
   23814:	bl	245c4 <_obstack_memory_used@@Base+0x432c>
   23818:	subs	r5, r0, #0
   2381c:	beq	23848 <_obstack_memory_used@@Base+0x35b0>
   23820:	mov	r3, #0
   23824:	mov	r1, r6
   23828:	mov	r2, r4
   2382c:	strb	r3, [r5, r4]
   23830:	bl	11930 <memcpy@plt>
   23834:	mov	r0, r5
   23838:	ldrd	r4, [sp]
   2383c:	ldr	r6, [sp, #8]
   23840:	add	sp, sp, #12
   23844:	pop	{pc}		; (ldr pc, [sp], #4)
   23848:	bl	23874 <_obstack_memory_used@@Base+0x35dc>
   2384c:	str	r4, [sp, #-8]!
   23850:	mov	r4, r0
   23854:	str	lr, [sp, #4]
   23858:	bl	11b94 <strlen@plt>
   2385c:	add	r1, r0, #1
   23860:	mov	r0, r4
   23864:	ldr	r4, [sp]
   23868:	ldr	lr, [sp, #4]
   2386c:	add	sp, sp, #8
   23870:	b	2376c <_obstack_memory_used@@Base+0x34d4>
   23874:	movw	r3, #41668	; 0xa2c4
   23878:	movt	r3, #3
   2387c:	str	r4, [sp, #-8]!
   23880:	ldr	r4, [r3]
   23884:	mov	r2, #5
   23888:	movw	r1, #37428	; 0x9234
   2388c:	movt	r1, #2
   23890:	mov	r0, #0
   23894:	str	lr, [sp, #4]
   23898:	bl	11984 <dcgettext@plt>
   2389c:	mov	r3, r0
   238a0:	movw	r2, #35228	; 0x899c
   238a4:	movt	r2, #2
   238a8:	mov	r1, #0
   238ac:	mov	r0, r4
   238b0:	bl	11a8c <error@plt>
   238b4:	bl	11d2c <abort@plt>
   238b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   238bc:	strd	r6, [sp, #8]
   238c0:	mov	r6, r2
   238c4:	mov	r7, r3
   238c8:	str	r8, [sp, #16]
   238cc:	mov	r2, r1
   238d0:	mov	r1, #0
   238d4:	str	lr, [sp, #20]
   238d8:	sub	sp, sp, #16
   238dc:	mov	r8, r0
   238e0:	ldr	ip, [sp, #48]	; 0x30
   238e4:	add	r3, sp, #8
   238e8:	str	ip, [sp]
   238ec:	bl	23ba8 <_obstack_memory_used@@Base+0x3910>
   238f0:	subs	r4, r0, #0
   238f4:	bne	23944 <_obstack_memory_used@@Base+0x36ac>
   238f8:	ldrd	r4, [sp, #8]
   238fc:	ldrd	r0, [sp, #40]	; 0x28
   23900:	cmp	r5, r7
   23904:	cmpeq	r4, r6
   23908:	movcc	r3, #1
   2390c:	movcs	r3, #0
   23910:	cmp	r5, r1
   23914:	cmpeq	r4, r0
   23918:	orrhi	r3, r3, #1
   2391c:	cmp	r3, #0
   23920:	bne	239c4 <_obstack_memory_used@@Base+0x372c>
   23924:	mov	r0, r4
   23928:	mov	r1, r5
   2392c:	add	sp, sp, #16
   23930:	ldrd	r4, [sp]
   23934:	ldrd	r6, [sp, #8]
   23938:	ldr	r8, [sp, #16]
   2393c:	add	sp, sp, #20
   23940:	pop	{pc}		; (ldr pc, [sp], #4)
   23944:	bl	11bb8 <__errno_location@plt>
   23948:	cmp	r4, #1
   2394c:	moveq	r3, #75	; 0x4b
   23950:	moveq	r4, r3
   23954:	streq	r3, [r0]
   23958:	beq	239ac <_obstack_memory_used@@Base+0x3714>
   2395c:	cmp	r4, #3
   23960:	beq	239a0 <_obstack_memory_used@@Base+0x3708>
   23964:	ldr	r3, [sp, #56]	; 0x38
   23968:	ldr	r4, [r0]
   2396c:	cmp	r3, #0
   23970:	beq	239b8 <_obstack_memory_used@@Base+0x3720>
   23974:	cmp	r4, #22
   23978:	moveq	r4, #0
   2397c:	mov	r0, r8
   23980:	bl	225bc <_obstack_memory_used@@Base+0x2324>
   23984:	movw	r2, #34968	; 0x8898
   23988:	movt	r2, #2
   2398c:	str	r0, [sp]
   23990:	mov	r1, r4
   23994:	ldr	r3, [sp, #52]	; 0x34
   23998:	ldr	r0, [sp, #56]	; 0x38
   2399c:	bl	11a8c <error@plt>
   239a0:	mov	r3, #0
   239a4:	mov	r4, r3
   239a8:	str	r3, [r0]
   239ac:	ldr	r3, [sp, #56]	; 0x38
   239b0:	cmp	r3, #0
   239b4:	bne	2397c <_obstack_memory_used@@Base+0x36e4>
   239b8:	mov	r3, #1
   239bc:	str	r3, [sp, #56]	; 0x38
   239c0:	b	23974 <_obstack_memory_used@@Base+0x36dc>
   239c4:	bl	11bb8 <__errno_location@plt>
   239c8:	mov	r3, #0
   239cc:	mvn	r2, #-1073741824	; 0xc0000000
   239d0:	cmp	r5, r3
   239d4:	cmpeq	r4, r2
   239d8:	movhi	r3, #75	; 0x4b
   239dc:	movls	r3, #34	; 0x22
   239e0:	mov	r4, r3
   239e4:	str	r3, [r0]
   239e8:	ldr	r3, [sp, #56]	; 0x38
   239ec:	cmp	r3, #0
   239f0:	moveq	r3, #1
   239f4:	str	r3, [sp, #56]	; 0x38
   239f8:	b	2397c <_obstack_memory_used@@Base+0x36e4>
   239fc:	mov	r1, #10
   23a00:	b	238b8 <_obstack_memory_used@@Base+0x3620>
   23a04:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23a08:	mov	r4, #100	; 0x64
   23a0c:	strd	r6, [sp, #8]
   23a10:	mov	r7, #1
   23a14:	strd	r8, [sp, #16]
   23a18:	mov	r9, #0
   23a1c:	str	sl, [sp, #24]
   23a20:	mov	r6, r9
   23a24:	str	lr, [sp, #28]
   23a28:	sub	sp, sp, #112	; 0x70
   23a2c:	add	r8, sp, #12
   23a30:	str	r4, [sp, #8]
   23a34:	bl	11bb8 <__errno_location@plt>
   23a38:	mov	r5, r0
   23a3c:	b	23aa0 <_obstack_memory_used@@Base+0x3808>
   23a40:	str	sl, [r5]
   23a44:	mov	r0, r9
   23a48:	bl	1b2b4 <__assert_fail@plt+0x9540>
   23a4c:	ldr	r0, [r5]
   23a50:	mvn	r3, #0
   23a54:	mov	r2, #1
   23a58:	add	r1, sp, #8
   23a5c:	subs	ip, r0, #36	; 0x24
   23a60:	movne	ip, #1
   23a64:	cmp	r0, #0
   23a68:	moveq	ip, #0
   23a6c:	cmp	r0, #22
   23a70:	moveq	ip, #0
   23a74:	andne	ip, ip, #1
   23a78:	cmp	r0, #12
   23a7c:	moveq	ip, #0
   23a80:	andne	ip, ip, #1
   23a84:	subs	r0, ip, #0
   23a88:	bne	23afc <_obstack_memory_used@@Base+0x3864>
   23a8c:	str	r7, [sp]
   23a90:	bl	235f4 <_obstack_memory_used@@Base+0x335c>
   23a94:	ldr	r4, [sp, #8]
   23a98:	mov	r8, r0
   23a9c:	mov	r9, r0
   23aa0:	sub	r4, r4, #1
   23aa4:	mov	r0, r8
   23aa8:	mov	r1, r4
   23aac:	strb	r6, [r8, r4]
   23ab0:	str	r6, [r5]
   23ab4:	bl	11a98 <gethostname@plt>
   23ab8:	subs	sl, r0, #0
   23abc:	mov	r0, r8
   23ac0:	bne	23a44 <_obstack_memory_used@@Base+0x37ac>
   23ac4:	bl	11b94 <strlen@plt>
   23ac8:	add	r0, r0, #1
   23acc:	cmp	r4, r0
   23ad0:	ble	23a40 <_obstack_memory_used@@Base+0x37a8>
   23ad4:	cmp	r9, #0
   23ad8:	beq	23b04 <_obstack_memory_used@@Base+0x386c>
   23adc:	mov	r0, r9
   23ae0:	add	sp, sp, #112	; 0x70
   23ae4:	ldrd	r4, [sp]
   23ae8:	ldrd	r6, [sp, #8]
   23aec:	ldrd	r8, [sp, #16]
   23af0:	ldr	sl, [sp, #24]
   23af4:	add	sp, sp, #28
   23af8:	pop	{pc}		; (ldr pc, [sp], #4)
   23afc:	mov	r9, #0
   23b00:	b	23adc <_obstack_memory_used@@Base+0x3844>
   23b04:	mov	r1, r0
   23b08:	mov	r0, r8
   23b0c:	bl	237b4 <_obstack_memory_used@@Base+0x351c>
   23b10:	mov	r9, r0
   23b14:	b	23adc <_obstack_memory_used@@Base+0x3844>
   23b18:	sub	r0, r0, #1
   23b1c:	movw	ip, #41668	; 0xa2c4
   23b20:	movt	ip, #3
   23b24:	cmp	r0, #3
   23b28:	push	{lr}		; (str lr, [sp, #-4]!)
   23b2c:	sub	sp, sp, #20
   23b30:	ldr	r5, [ip]
   23b34:	bhi	23b84 <_obstack_memory_used@@Base+0x38ec>
   23b38:	movw	ip, #38500	; 0x9664
   23b3c:	movt	ip, #2
   23b40:	cmp	r1, #0
   23b44:	ldr	r0, [ip, r0, lsl #2]
   23b48:	blt	23b88 <_obstack_memory_used@@Base+0x38f0>
   23b4c:	ldr	r6, [r3, r1, lsl #4]
   23b50:	movw	r4, #38516	; 0x9674
   23b54:	movt	r4, #2
   23b58:	mov	r1, r0
   23b5c:	mov	r2, #5
   23b60:	mov	r0, #0
   23b64:	bl	11984 <dcgettext@plt>
   23b68:	ldr	ip, [sp, #24]
   23b6c:	mov	r2, r0
   23b70:	mov	r3, r4
   23b74:	mov	r0, r5
   23b78:	mov	r1, #0
   23b7c:	stm	sp, {r6, ip}
   23b80:	bl	11a8c <error@plt>
   23b84:	bl	11d2c <abort@plt>
   23b88:	mov	r3, #0
   23b8c:	movw	r4, #38516	; 0x9674
   23b90:	movt	r4, #2
   23b94:	add	r6, sp, #12
   23b98:	strb	r2, [sp, #12]
   23b9c:	sub	r4, r4, r1
   23ba0:	strb	r3, [sp, #13]
   23ba4:	b	23b58 <_obstack_memory_used@@Base+0x38c0>
   23ba8:	cmp	r2, #36	; 0x24
   23bac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23bb0:	strd	r6, [sp, #8]
   23bb4:	strd	r8, [sp, #16]
   23bb8:	strd	sl, [sp, #24]
   23bbc:	str	lr, [sp, #32]
   23bc0:	sub	sp, sp, #36	; 0x24
   23bc4:	bhi	24454 <_obstack_memory_used@@Base+0x41bc>
   23bc8:	cmp	r1, #0
   23bcc:	mov	r8, r2
   23bd0:	mov	r6, r0
   23bd4:	mov	r5, r1
   23bd8:	mov	sl, r3
   23bdc:	addeq	r5, sp, #28
   23be0:	bl	11bb8 <__errno_location@plt>
   23be4:	mov	r3, #0
   23be8:	mov	r7, r0
   23bec:	str	r3, [r0]
   23bf0:	bl	11b58 <__ctype_b_loc@plt>
   23bf4:	ldrb	r3, [r6]
   23bf8:	mov	r2, r6
   23bfc:	ldr	r0, [r0]
   23c00:	b	23c08 <_obstack_memory_used@@Base+0x3970>
   23c04:	ldrb	r3, [r2, #1]!
   23c08:	lsl	r1, r3, #1
   23c0c:	ldrh	r4, [r0, r1]
   23c10:	ands	r4, r4, #8192	; 0x2000
   23c14:	bne	23c04 <_obstack_memory_used@@Base+0x396c>
   23c18:	cmp	r3, #45	; 0x2d
   23c1c:	beq	23cbc <_obstack_memory_used@@Base+0x3a24>
   23c20:	mov	r2, r8
   23c24:	mov	r3, r4
   23c28:	mov	r1, r5
   23c2c:	mov	r0, r6
   23c30:	bl	1193c <__strtoull_internal@plt>
   23c34:	ldr	fp, [r5]
   23c38:	mov	r9, r0
   23c3c:	mov	r8, r1
   23c40:	cmp	fp, r6
   23c44:	beq	23ca4 <_obstack_memory_used@@Base+0x3a0c>
   23c48:	ldr	r4, [r7]
   23c4c:	cmp	r4, #0
   23c50:	bne	23c94 <_obstack_memory_used@@Base+0x39fc>
   23c54:	ldr	r3, [sp, #72]	; 0x48
   23c58:	cmp	r3, #0
   23c5c:	beq	23c6c <_obstack_memory_used@@Base+0x39d4>
   23c60:	ldrb	r6, [fp]
   23c64:	cmp	r6, #0
   23c68:	bne	23fac <_obstack_memory_used@@Base+0x3d14>
   23c6c:	str	r9, [sl]
   23c70:	str	r8, [sl, #4]
   23c74:	mov	r0, r4
   23c78:	add	sp, sp, #36	; 0x24
   23c7c:	ldrd	r4, [sp]
   23c80:	ldrd	r6, [sp, #8]
   23c84:	ldrd	r8, [sp, #16]
   23c88:	ldrd	sl, [sp, #24]
   23c8c:	add	sp, sp, #32
   23c90:	pop	{pc}		; (ldr pc, [sp], #4)
   23c94:	cmp	r4, #34	; 0x22
   23c98:	bne	23cbc <_obstack_memory_used@@Base+0x3a24>
   23c9c:	mov	r4, #1
   23ca0:	b	23c54 <_obstack_memory_used@@Base+0x39bc>
   23ca4:	ldr	r3, [sp, #72]	; 0x48
   23ca8:	cmp	r3, #0
   23cac:	beq	23cbc <_obstack_memory_used@@Base+0x3a24>
   23cb0:	ldrb	r6, [r6]
   23cb4:	cmp	r6, #0
   23cb8:	bne	23cc4 <_obstack_memory_used@@Base+0x3a2c>
   23cbc:	mov	r4, #4
   23cc0:	b	23c74 <_obstack_memory_used@@Base+0x39dc>
   23cc4:	mov	r1, r6
   23cc8:	mov	r0, r3
   23ccc:	bl	11ba0 <strchr@plt>
   23cd0:	cmp	r0, #0
   23cd4:	movne	r9, #1
   23cd8:	movne	r8, #0
   23cdc:	beq	23cbc <_obstack_memory_used@@Base+0x3a24>
   23ce0:	sub	r3, r6, #69	; 0x45
   23ce4:	cmp	r3, #47	; 0x2f
   23ce8:	ldrls	pc, [pc, r3, lsl #2]
   23cec:	b	23df4 <_obstack_memory_used@@Base+0x3b5c>
   23cf0:			; <UNDEFINED> instruction: 0x00023db0
   23cf4:	strdeq	r3, [r2], -r4
   23cf8:			; <UNDEFINED> instruction: 0x00023db0
   23cfc:	strdeq	r3, [r2], -r4
   23d00:	strdeq	r3, [r2], -r4
   23d04:	strdeq	r3, [r2], -r4
   23d08:			; <UNDEFINED> instruction: 0x00023db0
   23d0c:	strdeq	r3, [r2], -r4
   23d10:			; <UNDEFINED> instruction: 0x00023db0
   23d14:	strdeq	r3, [r2], -r4
   23d18:	strdeq	r3, [r2], -r4
   23d1c:			; <UNDEFINED> instruction: 0x00023db0
   23d20:	strdeq	r3, [r2], -r4
   23d24:	strdeq	r3, [r2], -r4
   23d28:	strdeq	r3, [r2], -r4
   23d2c:			; <UNDEFINED> instruction: 0x00023db0
   23d30:	strdeq	r3, [r2], -r4
   23d34:	strdeq	r3, [r2], -r4
   23d38:	strdeq	r3, [r2], -r4
   23d3c:	strdeq	r3, [r2], -r4
   23d40:			; <UNDEFINED> instruction: 0x00023db0
   23d44:			; <UNDEFINED> instruction: 0x00023db0
   23d48:	strdeq	r3, [r2], -r4
   23d4c:	strdeq	r3, [r2], -r4
   23d50:	strdeq	r3, [r2], -r4
   23d54:	strdeq	r3, [r2], -r4
   23d58:	strdeq	r3, [r2], -r4
   23d5c:	strdeq	r3, [r2], -r4
   23d60:	strdeq	r3, [r2], -r4
   23d64:	strdeq	r3, [r2], -r4
   23d68:	strdeq	r3, [r2], -r4
   23d6c:	strdeq	r3, [r2], -r4
   23d70:	strdeq	r3, [r2], -r4
   23d74:	strdeq	r3, [r2], -r4
   23d78:			; <UNDEFINED> instruction: 0x00023db0
   23d7c:	strdeq	r3, [r2], -r4
   23d80:	strdeq	r3, [r2], -r4
   23d84:	strdeq	r3, [r2], -r4
   23d88:			; <UNDEFINED> instruction: 0x00023db0
   23d8c:	strdeq	r3, [r2], -r4
   23d90:			; <UNDEFINED> instruction: 0x00023db0
   23d94:	strdeq	r3, [r2], -r4
   23d98:	strdeq	r3, [r2], -r4
   23d9c:	strdeq	r3, [r2], -r4
   23da0:	strdeq	r3, [r2], -r4
   23da4:	strdeq	r3, [r2], -r4
   23da8:	strdeq	r3, [r2], -r4
   23dac:			; <UNDEFINED> instruction: 0x00023db0
   23db0:	mov	r1, #48	; 0x30
   23db4:	ldr	r0, [sp, #72]	; 0x48
   23db8:	bl	11ba0 <strchr@plt>
   23dbc:	cmp	r0, #0
   23dc0:	beq	23df4 <_obstack_memory_used@@Base+0x3b5c>
   23dc4:	ldrb	r3, [fp, #1]
   23dc8:	cmp	r3, #68	; 0x44
   23dcc:	beq	24320 <_obstack_memory_used@@Base+0x4088>
   23dd0:	cmp	r3, #105	; 0x69
   23dd4:	beq	23fc4 <_obstack_memory_used@@Base+0x3d2c>
   23dd8:	cmp	r3, #66	; 0x42
   23ddc:	moveq	r3, #2
   23de0:	movne	r3, #1
   23de4:	moveq	r7, #1000	; 0x3e8
   23de8:	movne	r7, #1024	; 0x400
   23dec:	str	r3, [sp, #4]
   23df0:	b	23e00 <_obstack_memory_used@@Base+0x3b68>
   23df4:	mov	r3, #1
   23df8:	mov	r7, #1024	; 0x400
   23dfc:	str	r3, [sp, #4]
   23e00:	sub	r6, r6, #66	; 0x42
   23e04:	cmp	r6, #53	; 0x35
   23e08:	ldrls	pc, [pc, r6, lsl #2]
   23e0c:	b	23f70 <_obstack_memory_used@@Base+0x3cd8>
   23e10:	andeq	r4, r2, r8, asr #5
   23e14:	andeq	r3, r2, r0, ror pc
   23e18:	andeq	r3, r2, r0, ror pc
   23e1c:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23e20:	andeq	r3, r2, r0, ror pc
   23e24:	andeq	r3, r2, r8, ror #29
   23e28:	andeq	r3, r2, r0, ror pc
   23e2c:	andeq	r3, r2, r0, ror pc
   23e30:	andeq	r3, r2, r0, ror pc
   23e34:	andeq	r3, r2, r8, ror pc
   23e38:	andeq	r3, r2, r0, ror pc
   23e3c:	andeq	r4, r2, r4, ror r2
   23e40:	andeq	r3, r2, r0, ror pc
   23e44:	andeq	r3, r2, r0, ror pc
   23e48:	andeq	r4, r2, r4, asr #3
   23e4c:	andeq	r3, r2, r0, ror pc
   23e50:	andeq	r3, r2, r0, ror pc
   23e54:	andeq	r3, r2, r0, ror pc
   23e58:	andeq	r4, r2, ip, asr #2
   23e5c:	andeq	r3, r2, r0, ror pc
   23e60:	andeq	r3, r2, r0, ror pc
   23e64:	andeq	r3, r2, r0, ror pc
   23e68:	andeq	r3, r2, r0, ror pc
   23e6c:	andeq	r4, r2, ip, asr r0
   23e70:	andeq	r3, r2, r0, ror #31
   23e74:	andeq	r3, r2, r0, ror pc
   23e78:	andeq	r3, r2, r0, ror pc
   23e7c:	andeq	r3, r2, r0, ror pc
   23e80:	andeq	r3, r2, r0, ror pc
   23e84:	andeq	r3, r2, r0, ror pc
   23e88:	andeq	r3, r2, r0, ror pc
   23e8c:	andeq	r3, r2, r0, ror pc
   23e90:	andeq	r4, r2, r4, asr r2
   23e94:	andeq	r3, r2, r8, asr pc
   23e98:	andeq	r3, r2, r0, ror pc
   23e9c:	andeq	r3, r2, r0, ror pc
   23ea0:	andeq	r3, r2, r0, ror pc
   23ea4:	andeq	r3, r2, r8, ror #29
   23ea8:	andeq	r3, r2, r0, ror pc
   23eac:	andeq	r3, r2, r0, ror pc
   23eb0:	andeq	r3, r2, r0, ror pc
   23eb4:	andeq	r3, r2, r8, ror pc
   23eb8:	andeq	r3, r2, r0, ror pc
   23ebc:	andeq	r4, r2, r4, ror r2
   23ec0:	andeq	r3, r2, r0, ror pc
   23ec4:	andeq	r3, r2, r0, ror pc
   23ec8:	andeq	r3, r2, r0, ror pc
   23ecc:	andeq	r3, r2, r0, ror pc
   23ed0:	andeq	r3, r2, r0, ror pc
   23ed4:	andeq	r3, r2, r0, ror pc
   23ed8:	andeq	r4, r2, ip, asr #2
   23edc:	andeq	r3, r2, r0, ror pc
   23ee0:	andeq	r3, r2, r0, ror pc
   23ee4:	andeq	r4, r2, ip, lsr r2
   23ee8:	asr	r3, r7, #31
   23eec:	mov	r2, r7
   23ef0:	cmp	r8, #0
   23ef4:	umull	r0, r1, r9, r7
   23ef8:	mov	ip, #0
   23efc:	strd	r2, [sp, #8]
   23f00:	bne	24354 <_obstack_memory_used@@Base+0x40bc>
   23f04:	mov	r2, r0
   23f08:	mov	r3, r1
   23f0c:	cmp	ip, #0
   23f10:	bne	23f9c <_obstack_memory_used@@Base+0x3d04>
   23f14:	cmp	r3, #0
   23f18:	mov	lr, ip
   23f1c:	bne	243b8 <_obstack_memory_used@@Base+0x4120>
   23f20:	umull	r2, r3, r2, r7
   23f24:	mov	ip, r2
   23f28:	mov	r1, r3
   23f2c:	subs	r0, lr, #0
   23f30:	bne	23f9c <_obstack_memory_used@@Base+0x3d04>
   23f34:	cmp	r1, #0
   23f38:	bne	24398 <_obstack_memory_used@@Base+0x4100>
   23f3c:	umull	r2, r3, ip, r7
   23f40:	mov	r6, r2
   23f44:	mov	r2, r3
   23f48:	cmp	r0, #0
   23f4c:	mov	r9, r6
   23f50:	mov	r8, r2
   23f54:	bne	23f9c <_obstack_memory_used@@Base+0x3d04>
   23f58:	ldr	r2, [sp, #4]
   23f5c:	add	r3, fp, r2
   23f60:	str	r3, [r5]
   23f64:	ldrb	r3, [fp, r2]
   23f68:	cmp	r3, #0
   23f6c:	beq	23c6c <_obstack_memory_used@@Base+0x39d4>
   23f70:	orr	r4, r4, #2
   23f74:	b	23c6c <_obstack_memory_used@@Base+0x39d4>
   23f78:	cmp	r8, #0
   23f7c:	umull	r2, r3, r9, r7
   23f80:	mov	ip, #0
   23f84:	asr	r1, r7, #31
   23f88:	bne	242f0 <_obstack_memory_used@@Base+0x4058>
   23f8c:	mov	r9, r2
   23f90:	mov	r8, r3
   23f94:	cmp	ip, #0
   23f98:	beq	23f58 <_obstack_memory_used@@Base+0x3cc0>
   23f9c:	mvn	r9, #0
   23fa0:	mov	r4, #1
   23fa4:	mov	r8, r9
   23fa8:	b	23f58 <_obstack_memory_used@@Base+0x3cc0>
   23fac:	mov	r1, r6
   23fb0:	ldr	r0, [sp, #72]	; 0x48
   23fb4:	bl	11ba0 <strchr@plt>
   23fb8:	cmp	r0, #0
   23fbc:	bne	23ce0 <_obstack_memory_used@@Base+0x3a48>
   23fc0:	b	23f70 <_obstack_memory_used@@Base+0x3cd8>
   23fc4:	ldrb	r3, [fp, #2]
   23fc8:	mov	r7, #1024	; 0x400
   23fcc:	cmp	r3, #66	; 0x42
   23fd0:	movne	r3, #1
   23fd4:	moveq	r3, #3
   23fd8:	str	r3, [sp, #4]
   23fdc:	b	23e00 <_obstack_memory_used@@Base+0x3b68>
   23fe0:	asr	r3, r7, #31
   23fe4:	mov	r2, r7
   23fe8:	mov	ip, #0
   23fec:	mov	r0, #7
   23ff0:	mov	lr, ip
   23ff4:	mov	r6, r4
   23ff8:	strd	r2, [sp, #8]
   23ffc:	str	r5, [sp, #16]
   24000:	b	2402c <_obstack_memory_used@@Base+0x3d94>
   24004:	umull	r2, r3, r9, r7
   24008:	mov	r9, r2
   2400c:	mov	r8, r3
   24010:	cmp	r1, #0
   24014:	beq	24024 <_obstack_memory_used@@Base+0x3d8c>
   24018:	mvn	r9, #0
   2401c:	mov	ip, #1
   24020:	mov	r8, r9
   24024:	subs	r0, r0, #1
   24028:	beq	24314 <_obstack_memory_used@@Base+0x407c>
   2402c:	cmp	r8, #0
   24030:	mov	r1, #0
   24034:	beq	24004 <_obstack_memory_used@@Base+0x3d6c>
   24038:	umull	r4, r5, r9, r7
   2403c:	mov	r3, lr
   24040:	mov	r2, r5
   24044:	umlal	r2, r3, r8, r7
   24048:	cmp	r3, #0
   2404c:	bne	24474 <_obstack_memory_used@@Base+0x41dc>
   24050:	mov	r9, r4
   24054:	mov	r8, r2
   24058:	b	24010 <_obstack_memory_used@@Base+0x3d78>
   2405c:	asr	r3, r7, #31
   24060:	mov	r2, r7
   24064:	mov	r6, #0
   24068:	mov	lr, #8
   2406c:	mov	r0, r4
   24070:	mov	ip, r5
   24074:	strd	r2, [sp, #8]
   24078:	b	240a4 <_obstack_memory_used@@Base+0x3e0c>
   2407c:	umull	r2, r3, r9, r7
   24080:	mov	r9, r2
   24084:	mov	r8, r3
   24088:	cmp	r1, #0
   2408c:	beq	2409c <_obstack_memory_used@@Base+0x3e04>
   24090:	mvn	r9, #0
   24094:	mov	r6, #1
   24098:	mov	r8, r9
   2409c:	subs	lr, lr, #1
   240a0:	beq	242e4 <_obstack_memory_used@@Base+0x404c>
   240a4:	cmp	r8, #0
   240a8:	mov	r1, #0
   240ac:	beq	2407c <_obstack_memory_used@@Base+0x3de4>
   240b0:	umull	r4, r5, r9, r7
   240b4:	mov	r3, #0
   240b8:	mov	r2, r5
   240bc:	umlal	r2, r3, r8, r7
   240c0:	cmp	r3, #0
   240c4:	bne	244cc <_obstack_memory_used@@Base+0x4234>
   240c8:	mov	r9, r4
   240cc:	mov	r8, r2
   240d0:	b	24088 <_obstack_memory_used@@Base+0x3df0>
   240d4:	asr	r3, r7, #31
   240d8:	mov	r2, r7
   240dc:	mov	r6, #0
   240e0:	mov	lr, #6
   240e4:	mov	r0, r4
   240e8:	mov	ip, r5
   240ec:	strd	r2, [sp, #8]
   240f0:	b	2411c <_obstack_memory_used@@Base+0x3e84>
   240f4:	umull	r2, r3, r9, r7
   240f8:	mov	r9, r2
   240fc:	mov	r8, r3
   24100:	cmp	r1, #0
   24104:	beq	24114 <_obstack_memory_used@@Base+0x3e7c>
   24108:	mvn	r9, #0
   2410c:	mov	r6, #1
   24110:	mov	r8, r9
   24114:	subs	lr, lr, #1
   24118:	beq	242e4 <_obstack_memory_used@@Base+0x404c>
   2411c:	cmp	r8, #0
   24120:	mov	r1, #0
   24124:	beq	240f4 <_obstack_memory_used@@Base+0x3e5c>
   24128:	umull	r4, r5, r9, r7
   2412c:	mov	r3, #0
   24130:	mov	r2, r5
   24134:	umlal	r2, r3, r8, r7
   24138:	cmp	r3, #0
   2413c:	bne	24494 <_obstack_memory_used@@Base+0x41fc>
   24140:	mov	r9, r4
   24144:	mov	r8, r2
   24148:	b	24100 <_obstack_memory_used@@Base+0x3e68>
   2414c:	asr	r3, r7, #31
   24150:	mov	r2, r7
   24154:	mov	r6, #0
   24158:	mov	lr, #4
   2415c:	mov	r0, r4
   24160:	mov	ip, r5
   24164:	strd	r2, [sp, #8]
   24168:	b	24194 <_obstack_memory_used@@Base+0x3efc>
   2416c:	umull	r2, r3, r9, r7
   24170:	mov	r9, r2
   24174:	mov	r8, r3
   24178:	cmp	r1, #0
   2417c:	beq	2418c <_obstack_memory_used@@Base+0x3ef4>
   24180:	mvn	r9, #0
   24184:	mov	r6, #1
   24188:	mov	r8, r9
   2418c:	subs	lr, lr, #1
   24190:	beq	242e4 <_obstack_memory_used@@Base+0x404c>
   24194:	cmp	r8, #0
   24198:	mov	r1, #0
   2419c:	beq	2416c <_obstack_memory_used@@Base+0x3ed4>
   241a0:	umull	r4, r5, r9, r7
   241a4:	mov	r3, #0
   241a8:	mov	r2, r5
   241ac:	umlal	r2, r3, r8, r7
   241b0:	cmp	r3, #0
   241b4:	bne	244b0 <_obstack_memory_used@@Base+0x4218>
   241b8:	mov	r9, r4
   241bc:	mov	r8, r2
   241c0:	b	24178 <_obstack_memory_used@@Base+0x3ee0>
   241c4:	asr	r3, r7, #31
   241c8:	mov	r2, r7
   241cc:	mov	r6, #0
   241d0:	mov	lr, #5
   241d4:	mov	r0, r4
   241d8:	mov	ip, r5
   241dc:	strd	r2, [sp, #8]
   241e0:	b	2420c <_obstack_memory_used@@Base+0x3f74>
   241e4:	umull	r2, r3, r9, r7
   241e8:	mov	r9, r2
   241ec:	mov	r8, r3
   241f0:	cmp	r1, #0
   241f4:	beq	24204 <_obstack_memory_used@@Base+0x3f6c>
   241f8:	mvn	r9, #0
   241fc:	mov	r6, #1
   24200:	mov	r8, r9
   24204:	subs	lr, lr, #1
   24208:	beq	242e4 <_obstack_memory_used@@Base+0x404c>
   2420c:	cmp	r8, #0
   24210:	mov	r1, #0
   24214:	beq	241e4 <_obstack_memory_used@@Base+0x3f4c>
   24218:	umull	r4, r5, r9, r7
   2421c:	mov	r3, #0
   24220:	mov	r2, r5
   24224:	umlal	r2, r3, r8, r7
   24228:	cmp	r3, #0
   2422c:	bne	2441c <_obstack_memory_used@@Base+0x4184>
   24230:	mov	r9, r4
   24234:	mov	r8, r2
   24238:	b	241f0 <_obstack_memory_used@@Base+0x3f58>
   2423c:	lsr	r3, r8, #31
   24240:	adds	r9, r9, r9
   24244:	adc	r8, r8, r8
   24248:	cmp	r3, #0
   2424c:	beq	23f58 <_obstack_memory_used@@Base+0x3cc0>
   24250:	b	23f9c <_obstack_memory_used@@Base+0x3d04>
   24254:	lsr	r3, r8, #23
   24258:	lsl	r8, r8, #9
   2425c:	cmp	r3, #0
   24260:	lsl	r3, r9, #9
   24264:	orr	r8, r8, r9, lsr #23
   24268:	bne	23f9c <_obstack_memory_used@@Base+0x3d04>
   2426c:	mov	r9, r3
   24270:	b	23f58 <_obstack_memory_used@@Base+0x3cc0>
   24274:	asr	r3, r7, #31
   24278:	mov	r2, r7
   2427c:	cmp	r8, #0
   24280:	mov	r1, #0
   24284:	strd	r2, [sp, #8]
   24288:	umull	r2, r3, r9, r7
   2428c:	bne	24330 <_obstack_memory_used@@Base+0x4098>
   24290:	mov	r0, r2
   24294:	mov	ip, r3
   24298:	cmp	r1, #0
   2429c:	bne	23f9c <_obstack_memory_used@@Base+0x3d04>
   242a0:	cmp	ip, #0
   242a4:	bne	24378 <_obstack_memory_used@@Base+0x40e0>
   242a8:	umull	r2, r3, r0, r7
   242ac:	mov	r6, r2
   242b0:	mov	r2, r3
   242b4:	cmp	r1, #0
   242b8:	mov	r9, r6
   242bc:	mov	r8, r2
   242c0:	beq	23f58 <_obstack_memory_used@@Base+0x3cc0>
   242c4:	b	23f9c <_obstack_memory_used@@Base+0x3d04>
   242c8:	lsr	r3, r8, #22
   242cc:	lsl	r8, r8, #10
   242d0:	cmp	r3, #0
   242d4:	lsl	r3, r9, #10
   242d8:	orr	r8, r8, r9, lsr #22
   242dc:	beq	2426c <_obstack_memory_used@@Base+0x3fd4>
   242e0:	b	23f9c <_obstack_memory_used@@Base+0x3d04>
   242e4:	mov	r5, ip
   242e8:	orr	r4, r0, r6
   242ec:	b	23f58 <_obstack_memory_used@@Base+0x3cc0>
   242f0:	strd	r2, [sp, #8]
   242f4:	mov	r3, ip
   242f8:	ldr	r2, [sp, #12]
   242fc:	umlal	r2, r3, r8, r7
   24300:	cmp	r3, #0
   24304:	bne	24438 <_obstack_memory_used@@Base+0x41a0>
   24308:	mov	r8, r2
   2430c:	ldr	r9, [sp, #8]
   24310:	b	23f94 <_obstack_memory_used@@Base+0x3cfc>
   24314:	orr	r4, r6, ip
   24318:	ldr	r5, [sp, #16]
   2431c:	b	23f58 <_obstack_memory_used@@Base+0x3cc0>
   24320:	mov	r3, #2
   24324:	mov	r7, #1000	; 0x3e8
   24328:	str	r3, [sp, #4]
   2432c:	b	23e00 <_obstack_memory_used@@Base+0x3b68>
   24330:	strd	r2, [sp, #16]
   24334:	mov	r3, r1
   24338:	ldr	r2, [sp, #20]
   2433c:	umlal	r2, r3, r8, r7
   24340:	cmp	r3, #0
   24344:	bne	24508 <_obstack_memory_used@@Base+0x4270>
   24348:	mov	ip, r2
   2434c:	ldr	r0, [sp, #16]
   24350:	b	24298 <_obstack_memory_used@@Base+0x4000>
   24354:	mov	r2, r1
   24358:	mov	r3, ip
   2435c:	umlal	r2, r3, r8, r7
   24360:	cmp	r3, #0
   24364:	strd	r2, [sp, #16]
   24368:	bne	243dc <_obstack_memory_used@@Base+0x4144>
   2436c:	mov	r2, r0
   24370:	ldr	r3, [sp, #16]
   24374:	b	23f0c <_obstack_memory_used@@Base+0x3c74>
   24378:	umull	r8, r9, r0, r7
   2437c:	mov	r3, r1
   24380:	mov	r2, r9
   24384:	umlal	r2, r3, ip, r7
   24388:	cmp	r3, #0
   2438c:	bne	244e8 <_obstack_memory_used@@Base+0x4250>
   24390:	mov	r6, r8
   24394:	b	242b4 <_obstack_memory_used@@Base+0x401c>
   24398:	umull	r8, r9, ip, r7
   2439c:	mov	r3, r0
   243a0:	mov	r2, r9
   243a4:	umlal	r2, r3, r1, r7
   243a8:	cmp	r3, #0
   243ac:	bne	24530 <_obstack_memory_used@@Base+0x4298>
   243b0:	mov	r6, r8
   243b4:	b	23f48 <_obstack_memory_used@@Base+0x3cb0>
   243b8:	umull	r8, r9, r2, r7
   243bc:	mov	r1, ip
   243c0:	mov	r0, r9
   243c4:	umlal	r0, r1, r3, r7
   243c8:	cmp	r1, #0
   243cc:	bne	243fc <_obstack_memory_used@@Base+0x4164>
   243d0:	mov	ip, r8
   243d4:	mov	r1, r0
   243d8:	b	23f2c <_obstack_memory_used@@Base+0x3c94>
   243dc:	ldr	lr, [sp, #8]
   243e0:	mov	r2, r0
   243e4:	mov	ip, #1
   243e8:	ldr	r3, [sp, #12]
   243ec:	mul	r3, r9, r3
   243f0:	mla	r3, lr, r8, r3
   243f4:	add	r3, r3, r1
   243f8:	b	23f0c <_obstack_memory_used@@Base+0x3c74>
   243fc:	ldr	r1, [sp, #12]
   24400:	mov	lr, #1
   24404:	mov	ip, r8
   24408:	mul	r1, r2, r1
   2440c:	ldr	r2, [sp, #8]
   24410:	mla	r1, r3, r2, r1
   24414:	add	r1, r1, r9
   24418:	b	23f2c <_obstack_memory_used@@Base+0x3c94>
   2441c:	ldrd	r2, [sp, #8]
   24420:	mov	r1, #1
   24424:	mul	r3, r9, r3
   24428:	mov	r9, r4
   2442c:	mla	r8, r2, r8, r3
   24430:	add	r8, r8, r5
   24434:	b	241f0 <_obstack_memory_used@@Base+0x3f58>
   24438:	mul	r3, r9, r1
   2443c:	mov	ip, #1
   24440:	mla	r8, r7, r8, r3
   24444:	ldrd	r6, [sp, #8]
   24448:	mov	r9, r6
   2444c:	add	r8, r8, r7
   24450:	b	23f94 <_obstack_memory_used@@Base+0x3cfc>
   24454:	movw	r3, #38620	; 0x96dc
   24458:	movt	r3, #2
   2445c:	movw	r1, #38632	; 0x96e8
   24460:	movt	r1, #2
   24464:	movw	r0, #38648	; 0x96f8
   24468:	movt	r0, #2
   2446c:	mov	r2, #85	; 0x55
   24470:	bl	11d74 <__assert_fail@plt>
   24474:	ldr	r3, [sp, #12]
   24478:	mov	r1, #1
   2447c:	mul	r2, r9, r3
   24480:	ldr	r3, [sp, #8]
   24484:	mov	r9, r4
   24488:	mla	r8, r3, r8, r2
   2448c:	add	r8, r8, r5
   24490:	b	24010 <_obstack_memory_used@@Base+0x3d78>
   24494:	ldrd	r2, [sp, #8]
   24498:	mov	r1, #1
   2449c:	mul	r3, r9, r3
   244a0:	mov	r9, r4
   244a4:	mla	r8, r2, r8, r3
   244a8:	add	r8, r8, r5
   244ac:	b	24100 <_obstack_memory_used@@Base+0x3e68>
   244b0:	ldrd	r2, [sp, #8]
   244b4:	mov	r1, #1
   244b8:	mul	r3, r9, r3
   244bc:	mov	r9, r4
   244c0:	mla	r8, r2, r8, r3
   244c4:	add	r8, r8, r5
   244c8:	b	24178 <_obstack_memory_used@@Base+0x3ee0>
   244cc:	ldrd	r2, [sp, #8]
   244d0:	mov	r1, #1
   244d4:	mul	r3, r9, r3
   244d8:	mov	r9, r4
   244dc:	mla	r8, r2, r8, r3
   244e0:	add	r8, r8, r5
   244e4:	b	24088 <_obstack_memory_used@@Base+0x3df0>
   244e8:	ldr	r3, [sp, #12]
   244ec:	mov	r6, r8
   244f0:	mov	r1, #1
   244f4:	mul	r2, r0, r3
   244f8:	ldr	r3, [sp, #8]
   244fc:	mla	r2, ip, r3, r2
   24500:	add	r2, r2, r9
   24504:	b	242b4 <_obstack_memory_used@@Base+0x401c>
   24508:	ldr	r3, [sp, #12]
   2450c:	mov	r1, #1
   24510:	ldr	r2, [sp, #16]
   24514:	mul	ip, r9, r3
   24518:	ldr	r3, [sp, #8]
   2451c:	mov	r0, r2
   24520:	mla	ip, r3, r8, ip
   24524:	ldr	r3, [sp, #20]
   24528:	add	ip, ip, r3
   2452c:	b	24298 <_obstack_memory_used@@Base+0x4000>
   24530:	ldr	r3, [sp, #12]
   24534:	mov	r6, r8
   24538:	mov	r0, #1
   2453c:	mul	r2, ip, r3
   24540:	ldr	r3, [sp, #8]
   24544:	mla	r2, r1, r3, r2
   24548:	add	r2, r2, r9
   2454c:	b	23f48 <_obstack_memory_used@@Base+0x3cb0>
   24550:	cmp	r1, #0
   24554:	cmpne	r0, #0
   24558:	beq	245a4 <_obstack_memory_used@@Base+0x430c>
   2455c:	strd	r4, [sp, #-16]!
   24560:	umull	r4, r5, r0, r1
   24564:	str	r6, [sp, #8]
   24568:	str	lr, [sp, #12]
   2456c:	adds	r3, r5, #0
   24570:	movne	r3, #1
   24574:	cmp	r4, #0
   24578:	blt	24584 <_obstack_memory_used@@Base+0x42ec>
   2457c:	cmp	r3, #0
   24580:	beq	245b0 <_obstack_memory_used@@Base+0x4318>
   24584:	bl	11bb8 <__errno_location@plt>
   24588:	mov	r3, #12
   2458c:	ldrd	r4, [sp]
   24590:	ldr	r6, [sp, #8]
   24594:	add	sp, sp, #12
   24598:	str	r3, [r0]
   2459c:	mov	r0, #0
   245a0:	pop	{pc}		; (ldr pc, [sp], #4)
   245a4:	mov	r1, #1
   245a8:	mov	r0, r1
   245ac:	b	11858 <calloc@plt>
   245b0:	ldrd	r4, [sp]
   245b4:	ldr	r6, [sp, #8]
   245b8:	ldr	lr, [sp, #12]
   245bc:	add	sp, sp, #16
   245c0:	b	11858 <calloc@plt>
   245c4:	cmp	r0, #0
   245c8:	beq	245d4 <_obstack_memory_used@@Base+0x433c>
   245cc:	blt	245dc <_obstack_memory_used@@Base+0x4344>
   245d0:	b	11ae0 <malloc@plt>
   245d4:	mov	r0, #1
   245d8:	b	11ae0 <malloc@plt>
   245dc:	str	r4, [sp, #-8]!
   245e0:	str	lr, [sp, #4]
   245e4:	bl	11bb8 <__errno_location@plt>
   245e8:	mov	r3, #12
   245ec:	ldr	r4, [sp]
   245f0:	add	sp, sp, #4
   245f4:	str	r3, [r0]
   245f8:	mov	r0, #0
   245fc:	pop	{pc}		; (ldr pc, [sp], #4)
   24600:	cmp	r0, #0
   24604:	beq	2462c <_obstack_memory_used@@Base+0x4394>
   24608:	cmp	r1, #0
   2460c:	str	r4, [sp, #-8]!
   24610:	str	lr, [sp, #4]
   24614:	beq	24634 <_obstack_memory_used@@Base+0x439c>
   24618:	blt	24648 <_obstack_memory_used@@Base+0x43b0>
   2461c:	ldr	r4, [sp]
   24620:	ldr	lr, [sp, #4]
   24624:	add	sp, sp, #8
   24628:	b	11990 <realloc@plt>
   2462c:	mov	r0, r1
   24630:	b	245c4 <_obstack_memory_used@@Base+0x432c>
   24634:	bl	1b2b4 <__assert_fail@plt+0x9540>
   24638:	ldr	r4, [sp]
   2463c:	add	sp, sp, #4
   24640:	mov	r0, #0
   24644:	pop	{pc}		; (ldr pc, [sp], #4)
   24648:	bl	11bb8 <__errno_location@plt>
   2464c:	mov	r3, #12
   24650:	str	r3, [r0]
   24654:	b	24638 <_obstack_memory_used@@Base+0x43a0>
   24658:	strd	r4, [sp, #-16]!
   2465c:	mov	r4, r0
   24660:	str	r6, [sp, #8]
   24664:	str	lr, [sp, #12]
   24668:	bl	11a68 <__fpending@plt>
   2466c:	ldr	r5, [r4]
   24670:	mov	r6, r0
   24674:	mov	r0, r4
   24678:	bl	246e0 <_obstack_memory_used@@Base+0x4448>
   2467c:	mov	r4, r0
   24680:	and	r5, r5, #32
   24684:	cmp	r5, #0
   24688:	bne	246c0 <_obstack_memory_used@@Base+0x4428>
   2468c:	cmp	r0, #0
   24690:	beq	246ac <_obstack_memory_used@@Base+0x4414>
   24694:	cmp	r6, #0
   24698:	bne	246d8 <_obstack_memory_used@@Base+0x4440>
   2469c:	bl	11bb8 <__errno_location@plt>
   246a0:	ldr	r4, [r0]
   246a4:	subs	r4, r4, #9
   246a8:	mvnne	r4, #0
   246ac:	mov	r0, r4
   246b0:	ldrd	r4, [sp]
   246b4:	ldr	r6, [sp, #8]
   246b8:	add	sp, sp, #12
   246bc:	pop	{pc}		; (ldr pc, [sp], #4)
   246c0:	cmp	r0, #0
   246c4:	bne	246d8 <_obstack_memory_used@@Base+0x4440>
   246c8:	bl	11bb8 <__errno_location@plt>
   246cc:	str	r4, [r0]
   246d0:	mvn	r4, #0
   246d4:	b	246ac <_obstack_memory_used@@Base+0x4414>
   246d8:	mvn	r4, #0
   246dc:	b	246ac <_obstack_memory_used@@Base+0x4414>
   246e0:	strd	r4, [sp, #-12]!
   246e4:	mov	r4, r0
   246e8:	str	lr, [sp, #8]
   246ec:	sub	sp, sp, #12
   246f0:	bl	11c0c <fileno@plt>
   246f4:	cmp	r0, #0
   246f8:	mov	r0, r4
   246fc:	blt	24780 <_obstack_memory_used@@Base+0x44e8>
   24700:	bl	11b10 <__freading@plt>
   24704:	cmp	r0, #0
   24708:	bne	2474c <_obstack_memory_used@@Base+0x44b4>
   2470c:	mov	r0, r4
   24710:	bl	24794 <_obstack_memory_used@@Base+0x44fc>
   24714:	cmp	r0, #0
   24718:	beq	2477c <_obstack_memory_used@@Base+0x44e4>
   2471c:	bl	11bb8 <__errno_location@plt>
   24720:	mov	r5, r0
   24724:	mov	r0, r4
   24728:	ldr	r4, [r5]
   2472c:	bl	11c24 <fclose@plt>
   24730:	cmp	r4, #0
   24734:	mvnne	r0, #0
   24738:	strne	r4, [r5]
   2473c:	add	sp, sp, #12
   24740:	ldrd	r4, [sp]
   24744:	add	sp, sp, #8
   24748:	pop	{pc}		; (ldr pc, [sp], #4)
   2474c:	mov	r0, r4
   24750:	bl	11c0c <fileno@plt>
   24754:	mov	r1, #1
   24758:	mov	r2, #0
   2475c:	mov	r3, #0
   24760:	str	r1, [sp]
   24764:	bl	11a44 <lseek64@plt>
   24768:	mvn	r3, #0
   2476c:	mvn	r2, #0
   24770:	cmp	r1, r3
   24774:	cmpeq	r0, r2
   24778:	bne	2470c <_obstack_memory_used@@Base+0x4474>
   2477c:	mov	r0, r4
   24780:	add	sp, sp, #12
   24784:	ldrd	r4, [sp]
   24788:	ldr	lr, [sp, #8]
   2478c:	add	sp, sp, #12
   24790:	b	11c24 <fclose@plt>
   24794:	str	r4, [sp, #-8]!
   24798:	subs	r4, r0, #0
   2479c:	str	lr, [sp, #4]
   247a0:	sub	sp, sp, #8
   247a4:	beq	247c0 <_obstack_memory_used@@Base+0x4528>
   247a8:	bl	11b10 <__freading@plt>
   247ac:	cmp	r0, #0
   247b0:	beq	247c0 <_obstack_memory_used@@Base+0x4528>
   247b4:	ldr	r3, [r4]
   247b8:	tst	r3, #256	; 0x100
   247bc:	bne	247d8 <_obstack_memory_used@@Base+0x4540>
   247c0:	mov	r0, r4
   247c4:	add	sp, sp, #8
   247c8:	ldr	r4, [sp]
   247cc:	ldr	lr, [sp, #4]
   247d0:	add	sp, sp, #8
   247d4:	b	118c4 <fflush@plt>
   247d8:	mov	r1, #1
   247dc:	mov	r2, #0
   247e0:	mov	r3, #0
   247e4:	mov	r0, r4
   247e8:	str	r1, [sp]
   247ec:	bl	247f4 <_obstack_memory_used@@Base+0x455c>
   247f0:	b	247c0 <_obstack_memory_used@@Base+0x4528>
   247f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   247f8:	mov	r4, r0
   247fc:	ldr	ip, [r0, #4]
   24800:	strd	r6, [sp, #8]
   24804:	str	lr, [sp, #20]
   24808:	ldr	lr, [r0, #8]
   2480c:	str	r8, [sp, #16]
   24810:	sub	sp, sp, #8
   24814:	ldr	r5, [sp, #32]
   24818:	cmp	lr, ip
   2481c:	beq	24844 <_obstack_memory_used@@Base+0x45ac>
   24820:	mov	r0, r4
   24824:	str	r5, [sp, #32]
   24828:	add	sp, sp, #8
   2482c:	ldrd	r4, [sp]
   24830:	ldrd	r6, [sp, #8]
   24834:	ldr	r8, [sp, #16]
   24838:	ldr	lr, [sp, #20]
   2483c:	add	sp, sp, #24
   24840:	b	11c30 <fseeko64@plt>
   24844:	ldr	ip, [r0, #16]
   24848:	ldr	lr, [r0, #20]
   2484c:	cmp	lr, ip
   24850:	bne	24820 <_obstack_memory_used@@Base+0x4588>
   24854:	ldr	r8, [r0, #36]	; 0x24
   24858:	cmp	r8, #0
   2485c:	bne	24820 <_obstack_memory_used@@Base+0x4588>
   24860:	mov	r6, r2
   24864:	mov	r7, r3
   24868:	bl	11c0c <fileno@plt>
   2486c:	mov	r2, r6
   24870:	mov	r3, r7
   24874:	str	r5, [sp]
   24878:	bl	11a44 <lseek64@plt>
   2487c:	mvn	r3, #0
   24880:	mvn	r2, #0
   24884:	cmp	r1, r3
   24888:	cmpeq	r0, r2
   2488c:	beq	248bc <_obstack_memory_used@@Base+0x4624>
   24890:	ldr	r3, [r4]
   24894:	strd	r0, [r4, #80]	; 0x50
   24898:	bic	r3, r3, #16
   2489c:	str	r3, [r4]
   248a0:	mov	r0, r8
   248a4:	add	sp, sp, #8
   248a8:	ldrd	r4, [sp]
   248ac:	ldrd	r6, [sp, #8]
   248b0:	ldr	r8, [sp, #16]
   248b4:	add	sp, sp, #20
   248b8:	pop	{pc}		; (ldr pc, [sp], #4)
   248bc:	mvn	r8, #0
   248c0:	b	248a0 <_obstack_memory_used@@Base+0x4608>
   248c4:	ldrb	r3, [r0]
   248c8:	cmp	r3, #0
   248cc:	beq	248f0 <_obstack_memory_used@@Base+0x4658>
   248d0:	mov	r2, #0
   248d4:	add	r2, r3, r2, ror #23
   248d8:	ldrb	r3, [r0, #1]!
   248dc:	cmp	r3, #0
   248e0:	bne	248d4 <_obstack_memory_used@@Base+0x463c>
   248e4:	udiv	r3, r2, r1
   248e8:	mls	r0, r1, r3, r2
   248ec:	bx	lr
   248f0:	mov	r0, r3
   248f4:	bx	lr
   248f8:	mov	r0, #14
   248fc:	str	r4, [sp, #-8]!
   24900:	str	lr, [sp, #4]
   24904:	bl	11c90 <nl_langinfo@plt>
   24908:	cmp	r0, #0
   2490c:	beq	24930 <_obstack_memory_used@@Base+0x4698>
   24910:	ldrb	r2, [r0]
   24914:	movw	r3, #38688	; 0x9720
   24918:	movt	r3, #2
   2491c:	ldr	r4, [sp]
   24920:	add	sp, sp, #4
   24924:	cmp	r2, #0
   24928:	moveq	r0, r3
   2492c:	pop	{pc}		; (ldr pc, [sp], #4)
   24930:	ldr	r4, [sp]
   24934:	add	sp, sp, #4
   24938:	movw	r0, #38688	; 0x9720
   2493c:	movt	r0, #2
   24940:	pop	{pc}		; (ldr pc, [sp], #4)
   24944:	umull	r2, r3, r1, r2
   24948:	cmp	r3, #0
   2494c:	bne	24958 <_obstack_memory_used@@Base+0x46c0>
   24950:	mov	r1, r2
   24954:	b	24600 <_obstack_memory_used@@Base+0x4368>
   24958:	str	r4, [sp, #-8]!
   2495c:	str	lr, [sp, #4]
   24960:	bl	11bb8 <__errno_location@plt>
   24964:	mov	r3, #12
   24968:	ldr	r4, [sp]
   2496c:	add	sp, sp, #4
   24970:	str	r3, [r0]
   24974:	mov	r0, #0
   24978:	pop	{pc}		; (ldr pc, [sp], #4)
   2497c:	eor	r1, r1, #-2147483648	; 0x80000000
   24980:	b	24988 <_obstack_memory_used@@Base+0x46f0>
   24984:	eor	r3, r3, #-2147483648	; 0x80000000
   24988:	push	{r4, r5, lr}
   2498c:	lsl	r4, r1, #1
   24990:	lsl	r5, r3, #1
   24994:	teq	r4, r5
   24998:	teqeq	r0, r2
   2499c:	orrsne	ip, r4, r0
   249a0:	orrsne	ip, r5, r2
   249a4:	mvnsne	ip, r4, asr #21
   249a8:	mvnsne	ip, r5, asr #21
   249ac:	beq	24b98 <_obstack_memory_used@@Base+0x4900>
   249b0:	lsr	r4, r4, #21
   249b4:	rsbs	r5, r4, r5, lsr #21
   249b8:	rsblt	r5, r5, #0
   249bc:	ble	249dc <_obstack_memory_used@@Base+0x4744>
   249c0:	add	r4, r4, r5
   249c4:	eor	r2, r0, r2
   249c8:	eor	r3, r1, r3
   249cc:	eor	r0, r2, r0
   249d0:	eor	r1, r3, r1
   249d4:	eor	r2, r0, r2
   249d8:	eor	r3, r1, r3
   249dc:	cmp	r5, #54	; 0x36
   249e0:	pophi	{r4, r5, pc}
   249e4:	tst	r1, #-2147483648	; 0x80000000
   249e8:	lsl	r1, r1, #12
   249ec:	mov	ip, #1048576	; 0x100000
   249f0:	orr	r1, ip, r1, lsr #12
   249f4:	beq	24a00 <_obstack_memory_used@@Base+0x4768>
   249f8:	rsbs	r0, r0, #0
   249fc:	rsc	r1, r1, #0
   24a00:	tst	r3, #-2147483648	; 0x80000000
   24a04:	lsl	r3, r3, #12
   24a08:	orr	r3, ip, r3, lsr #12
   24a0c:	beq	24a18 <_obstack_memory_used@@Base+0x4780>
   24a10:	rsbs	r2, r2, #0
   24a14:	rsc	r3, r3, #0
   24a18:	teq	r4, r5
   24a1c:	beq	24b80 <_obstack_memory_used@@Base+0x48e8>
   24a20:	sub	r4, r4, #1
   24a24:	rsbs	lr, r5, #32
   24a28:	blt	24a44 <_obstack_memory_used@@Base+0x47ac>
   24a2c:	lsl	ip, r2, lr
   24a30:	adds	r0, r0, r2, lsr r5
   24a34:	adc	r1, r1, #0
   24a38:	adds	r0, r0, r3, lsl lr
   24a3c:	adcs	r1, r1, r3, asr r5
   24a40:	b	24a60 <_obstack_memory_used@@Base+0x47c8>
   24a44:	sub	r5, r5, #32
   24a48:	add	lr, lr, #32
   24a4c:	cmp	r2, #1
   24a50:	lsl	ip, r3, lr
   24a54:	orrcs	ip, ip, #2
   24a58:	adds	r0, r0, r3, asr r5
   24a5c:	adcs	r1, r1, r3, asr #31
   24a60:	and	r5, r1, #-2147483648	; 0x80000000
   24a64:	bpl	24a74 <_obstack_memory_used@@Base+0x47dc>
   24a68:	rsbs	ip, ip, #0
   24a6c:	rscs	r0, r0, #0
   24a70:	rsc	r1, r1, #0
   24a74:	cmp	r1, #1048576	; 0x100000
   24a78:	bcc	24ab8 <_obstack_memory_used@@Base+0x4820>
   24a7c:	cmp	r1, #2097152	; 0x200000
   24a80:	bcc	24aa0 <_obstack_memory_used@@Base+0x4808>
   24a84:	lsrs	r1, r1, #1
   24a88:	rrxs	r0, r0
   24a8c:	rrx	ip, ip
   24a90:	add	r4, r4, #1
   24a94:	lsl	r2, r4, #21
   24a98:	cmn	r2, #4194304	; 0x400000
   24a9c:	bcs	24bf8 <_obstack_memory_used@@Base+0x4960>
   24aa0:	cmp	ip, #-2147483648	; 0x80000000
   24aa4:	lsrseq	ip, r0, #1
   24aa8:	adcs	r0, r0, #0
   24aac:	adc	r1, r1, r4, lsl #20
   24ab0:	orr	r1, r1, r5
   24ab4:	pop	{r4, r5, pc}
   24ab8:	lsls	ip, ip, #1
   24abc:	adcs	r0, r0, r0
   24ac0:	adc	r1, r1, r1
   24ac4:	tst	r1, #1048576	; 0x100000
   24ac8:	sub	r4, r4, #1
   24acc:	bne	24aa0 <_obstack_memory_used@@Base+0x4808>
   24ad0:	teq	r1, #0
   24ad4:	moveq	r1, r0
   24ad8:	moveq	r0, #0
   24adc:	clz	r3, r1
   24ae0:	addeq	r3, r3, #32
   24ae4:	sub	r3, r3, #11
   24ae8:	subs	r2, r3, #32
   24aec:	bge	24b10 <_obstack_memory_used@@Base+0x4878>
   24af0:	adds	r2, r2, #12
   24af4:	ble	24b0c <_obstack_memory_used@@Base+0x4874>
   24af8:	add	ip, r2, #20
   24afc:	rsb	r2, r2, #12
   24b00:	lsl	r0, r1, ip
   24b04:	lsr	r1, r1, r2
   24b08:	b	24b20 <_obstack_memory_used@@Base+0x4888>
   24b0c:	add	r2, r2, #20
   24b10:	rsble	ip, r2, #32
   24b14:	lsl	r1, r1, r2
   24b18:	orrle	r1, r1, r0, lsr ip
   24b1c:	lslle	r0, r0, r2
   24b20:	subs	r4, r4, r3
   24b24:	addge	r1, r1, r4, lsl #20
   24b28:	orrge	r1, r1, r5
   24b2c:	popge	{r4, r5, pc}
   24b30:	mvn	r4, r4
   24b34:	subs	r4, r4, #31
   24b38:	bge	24b74 <_obstack_memory_used@@Base+0x48dc>
   24b3c:	adds	r4, r4, #12
   24b40:	bgt	24b5c <_obstack_memory_used@@Base+0x48c4>
   24b44:	add	r4, r4, #20
   24b48:	rsb	r2, r4, #32
   24b4c:	lsr	r0, r0, r4
   24b50:	orr	r0, r0, r1, lsl r2
   24b54:	orr	r1, r5, r1, lsr r4
   24b58:	pop	{r4, r5, pc}
   24b5c:	rsb	r4, r4, #12
   24b60:	rsb	r2, r4, #32
   24b64:	lsr	r0, r0, r2
   24b68:	orr	r0, r0, r1, lsl r4
   24b6c:	mov	r1, r5
   24b70:	pop	{r4, r5, pc}
   24b74:	lsr	r0, r1, r4
   24b78:	mov	r1, r5
   24b7c:	pop	{r4, r5, pc}
   24b80:	teq	r4, #0
   24b84:	eor	r3, r3, #1048576	; 0x100000
   24b88:	eoreq	r1, r1, #1048576	; 0x100000
   24b8c:	addeq	r4, r4, #1
   24b90:	subne	r5, r5, #1
   24b94:	b	24a20 <_obstack_memory_used@@Base+0x4788>
   24b98:	mvns	ip, r4, asr #21
   24b9c:	mvnsne	ip, r5, asr #21
   24ba0:	beq	24c08 <_obstack_memory_used@@Base+0x4970>
   24ba4:	teq	r4, r5
   24ba8:	teqeq	r0, r2
   24bac:	beq	24bc0 <_obstack_memory_used@@Base+0x4928>
   24bb0:	orrs	ip, r4, r0
   24bb4:	moveq	r1, r3
   24bb8:	moveq	r0, r2
   24bbc:	pop	{r4, r5, pc}
   24bc0:	teq	r1, r3
   24bc4:	movne	r1, #0
   24bc8:	movne	r0, #0
   24bcc:	popne	{r4, r5, pc}
   24bd0:	lsrs	ip, r4, #21
   24bd4:	bne	24be8 <_obstack_memory_used@@Base+0x4950>
   24bd8:	lsls	r0, r0, #1
   24bdc:	adcs	r1, r1, r1
   24be0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   24be4:	pop	{r4, r5, pc}
   24be8:	adds	r4, r4, #4194304	; 0x400000
   24bec:	addcc	r1, r1, #1048576	; 0x100000
   24bf0:	popcc	{r4, r5, pc}
   24bf4:	and	r5, r1, #-2147483648	; 0x80000000
   24bf8:	orr	r1, r5, #2130706432	; 0x7f000000
   24bfc:	orr	r1, r1, #15728640	; 0xf00000
   24c00:	mov	r0, #0
   24c04:	pop	{r4, r5, pc}
   24c08:	mvns	ip, r4, asr #21
   24c0c:	movne	r1, r3
   24c10:	movne	r0, r2
   24c14:	mvnseq	ip, r5, asr #21
   24c18:	movne	r3, r1
   24c1c:	movne	r2, r0
   24c20:	orrs	r4, r0, r1, lsl #12
   24c24:	orrseq	r5, r2, r3, lsl #12
   24c28:	teqeq	r1, r3
   24c2c:	orrne	r1, r1, #524288	; 0x80000
   24c30:	pop	{r4, r5, pc}
   24c34:	teq	r0, #0
   24c38:	moveq	r1, #0
   24c3c:	bxeq	lr
   24c40:	push	{r4, r5, lr}
   24c44:	mov	r4, #1024	; 0x400
   24c48:	add	r4, r4, #50	; 0x32
   24c4c:	mov	r5, #0
   24c50:	mov	r1, #0
   24c54:	b	24ad0 <_obstack_memory_used@@Base+0x4838>
   24c58:	teq	r0, #0
   24c5c:	moveq	r1, #0
   24c60:	bxeq	lr
   24c64:	push	{r4, r5, lr}
   24c68:	mov	r4, #1024	; 0x400
   24c6c:	add	r4, r4, #50	; 0x32
   24c70:	ands	r5, r0, #-2147483648	; 0x80000000
   24c74:	rsbmi	r0, r0, #0
   24c78:	mov	r1, #0
   24c7c:	b	24ad0 <_obstack_memory_used@@Base+0x4838>
   24c80:	lsls	r2, r0, #1
   24c84:	asr	r1, r2, #3
   24c88:	rrx	r1, r1
   24c8c:	lsl	r0, r2, #28
   24c90:	andsne	r3, r2, #-16777216	; 0xff000000
   24c94:	teqne	r3, #-16777216	; 0xff000000
   24c98:	eorne	r1, r1, #939524096	; 0x38000000
   24c9c:	bxne	lr
   24ca0:	bics	r2, r2, #-16777216	; 0xff000000
   24ca4:	bxeq	lr
   24ca8:	teq	r3, #-16777216	; 0xff000000
   24cac:	orreq	r1, r1, #524288	; 0x80000
   24cb0:	bxeq	lr
   24cb4:	push	{r4, r5, lr}
   24cb8:	mov	r4, #896	; 0x380
   24cbc:	and	r5, r1, #-2147483648	; 0x80000000
   24cc0:	bic	r1, r1, #-2147483648	; 0x80000000
   24cc4:	b	24ad0 <_obstack_memory_used@@Base+0x4838>
   24cc8:	orrs	r2, r0, r1
   24ccc:	bxeq	lr
   24cd0:	push	{r4, r5, lr}
   24cd4:	mov	r5, #0
   24cd8:	b	24cf8 <_obstack_memory_used@@Base+0x4a60>
   24cdc:	orrs	r2, r0, r1
   24ce0:	bxeq	lr
   24ce4:	push	{r4, r5, lr}
   24ce8:	ands	r5, r1, #-2147483648	; 0x80000000
   24cec:	bpl	24cf8 <_obstack_memory_used@@Base+0x4a60>
   24cf0:	rsbs	r0, r0, #0
   24cf4:	rsc	r1, r1, #0
   24cf8:	mov	r4, #1024	; 0x400
   24cfc:	add	r4, r4, #50	; 0x32
   24d00:	lsrs	ip, r1, #22
   24d04:	beq	24a74 <_obstack_memory_used@@Base+0x47dc>
   24d08:	mov	r2, #3
   24d0c:	lsrs	ip, ip, #3
   24d10:	addne	r2, r2, #3
   24d14:	lsrs	ip, ip, #3
   24d18:	addne	r2, r2, #3
   24d1c:	add	r2, r2, ip, lsr #3
   24d20:	rsb	r3, r2, #32
   24d24:	lsl	ip, r0, r3
   24d28:	lsr	r0, r0, r2
   24d2c:	orr	r0, r0, r1, lsl r3
   24d30:	lsr	r1, r1, r2
   24d34:	add	r4, r4, r2
   24d38:	b	24a74 <_obstack_memory_used@@Base+0x47dc>
   24d3c:	cmp	r3, #0
   24d40:	cmpeq	r2, #0
   24d44:	bne	24d68 <_obstack_memory_used@@Base+0x4ad0>
   24d48:	cmp	r1, #0
   24d4c:	movlt	r1, #-2147483648	; 0x80000000
   24d50:	movlt	r0, #0
   24d54:	blt	24d64 <_obstack_memory_used@@Base+0x4acc>
   24d58:	cmpeq	r0, #0
   24d5c:	mvnne	r1, #-2147483648	; 0x80000000
   24d60:	mvnne	r0, #0
   24d64:	b	24e4c <_obstack_memory_used@@Base+0x4bb4>
   24d68:	sub	sp, sp, #8
   24d6c:	push	{sp, lr}
   24d70:	cmp	r1, #0
   24d74:	blt	24d94 <_obstack_memory_used@@Base+0x4afc>
   24d78:	cmp	r3, #0
   24d7c:	blt	24dc8 <_obstack_memory_used@@Base+0x4b30>
   24d80:	bl	24ea0 <_obstack_memory_used@@Base+0x4c08>
   24d84:	ldr	lr, [sp, #4]
   24d88:	add	sp, sp, #8
   24d8c:	pop	{r2, r3}
   24d90:	bx	lr
   24d94:	rsbs	r0, r0, #0
   24d98:	sbc	r1, r1, r1, lsl #1
   24d9c:	cmp	r3, #0
   24da0:	blt	24dec <_obstack_memory_used@@Base+0x4b54>
   24da4:	bl	24ea0 <_obstack_memory_used@@Base+0x4c08>
   24da8:	ldr	lr, [sp, #4]
   24dac:	add	sp, sp, #8
   24db0:	pop	{r2, r3}
   24db4:	rsbs	r0, r0, #0
   24db8:	sbc	r1, r1, r1, lsl #1
   24dbc:	rsbs	r2, r2, #0
   24dc0:	sbc	r3, r3, r3, lsl #1
   24dc4:	bx	lr
   24dc8:	rsbs	r2, r2, #0
   24dcc:	sbc	r3, r3, r3, lsl #1
   24dd0:	bl	24ea0 <_obstack_memory_used@@Base+0x4c08>
   24dd4:	ldr	lr, [sp, #4]
   24dd8:	add	sp, sp, #8
   24ddc:	pop	{r2, r3}
   24de0:	rsbs	r0, r0, #0
   24de4:	sbc	r1, r1, r1, lsl #1
   24de8:	bx	lr
   24dec:	rsbs	r2, r2, #0
   24df0:	sbc	r3, r3, r3, lsl #1
   24df4:	bl	24ea0 <_obstack_memory_used@@Base+0x4c08>
   24df8:	ldr	lr, [sp, #4]
   24dfc:	add	sp, sp, #8
   24e00:	pop	{r2, r3}
   24e04:	rsbs	r2, r2, #0
   24e08:	sbc	r3, r3, r3, lsl #1
   24e0c:	bx	lr
   24e10:	cmp	r3, #0
   24e14:	cmpeq	r2, #0
   24e18:	bne	24e30 <_obstack_memory_used@@Base+0x4b98>
   24e1c:	cmp	r1, #0
   24e20:	cmpeq	r0, #0
   24e24:	mvnne	r1, #0
   24e28:	mvnne	r0, #0
   24e2c:	b	24e4c <_obstack_memory_used@@Base+0x4bb4>
   24e30:	sub	sp, sp, #8
   24e34:	push	{sp, lr}
   24e38:	bl	24ea0 <_obstack_memory_used@@Base+0x4c08>
   24e3c:	ldr	lr, [sp, #4]
   24e40:	add	sp, sp, #8
   24e44:	pop	{r2, r3}
   24e48:	bx	lr
   24e4c:	push	{r1, lr}
   24e50:	mov	r0, #8
   24e54:	bl	1187c <raise@plt>
   24e58:	pop	{r1, pc}
   24e5c:	andeq	r0, r0, r0
   24e60:	vmov	d6, r0, r1
   24e64:	vldr	d7, [pc, #36]	; 24e90 <_obstack_memory_used@@Base+0x4bf8>
   24e68:	vldr	d5, [pc, #40]	; 24e98 <_obstack_memory_used@@Base+0x4c00>
   24e6c:	vmul.f64	d7, d6, d7
   24e70:	vcvt.u32.f64	s14, d7
   24e74:	vcvt.f64.u32	d4, s14
   24e78:	vmov	r1, s14
   24e7c:	vmls.f64	d6, d4, d5
   24e80:	vcvt.u32.f64	s15, d6
   24e84:	vmov	r0, s15
   24e88:	bx	lr
   24e8c:	nop			; (mov r0, r0)
   24e90:	andeq	r0, r0, r0
   24e94:	ldclcc	0, cr0, [r0]
   24e98:	andeq	r0, r0, r0
   24e9c:	mvnsmi	r0, r0
   24ea0:	cmp	r1, r3
   24ea4:	cmpeq	r0, r2
   24ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24eac:	mov	r4, r0
   24eb0:	movcc	r0, #0
   24eb4:	mov	r5, r1
   24eb8:	ldr	lr, [sp, #36]	; 0x24
   24ebc:	movcc	r1, r0
   24ec0:	bcc	24fbc <_obstack_memory_used@@Base+0x4d24>
   24ec4:	cmp	r3, #0
   24ec8:	clzeq	ip, r2
   24ecc:	clzne	ip, r3
   24ed0:	addeq	ip, ip, #32
   24ed4:	cmp	r5, #0
   24ed8:	clzeq	r1, r4
   24edc:	addeq	r1, r1, #32
   24ee0:	clzne	r1, r5
   24ee4:	sub	ip, ip, r1
   24ee8:	sub	sl, ip, #32
   24eec:	lsl	r9, r3, ip
   24ef0:	rsb	fp, ip, #32
   24ef4:	orr	r9, r9, r2, lsl sl
   24ef8:	orr	r9, r9, r2, lsr fp
   24efc:	lsl	r8, r2, ip
   24f00:	cmp	r5, r9
   24f04:	cmpeq	r4, r8
   24f08:	movcc	r0, #0
   24f0c:	movcc	r1, r0
   24f10:	bcc	24f2c <_obstack_memory_used@@Base+0x4c94>
   24f14:	mov	r0, #1
   24f18:	subs	r4, r4, r8
   24f1c:	lsl	r1, r0, sl
   24f20:	orr	r1, r1, r0, lsr fp
   24f24:	lsl	r0, r0, ip
   24f28:	sbc	r5, r5, r9
   24f2c:	cmp	ip, #0
   24f30:	beq	24fbc <_obstack_memory_used@@Base+0x4d24>
   24f34:	lsr	r6, r8, #1
   24f38:	orr	r6, r6, r9, lsl #31
   24f3c:	lsr	r7, r9, #1
   24f40:	mov	r2, ip
   24f44:	b	24f68 <_obstack_memory_used@@Base+0x4cd0>
   24f48:	subs	r3, r4, r6
   24f4c:	sbc	r8, r5, r7
   24f50:	adds	r3, r3, r3
   24f54:	adc	r8, r8, r8
   24f58:	adds	r4, r3, #1
   24f5c:	adc	r5, r8, #0
   24f60:	subs	r2, r2, #1
   24f64:	beq	24f84 <_obstack_memory_used@@Base+0x4cec>
   24f68:	cmp	r5, r7
   24f6c:	cmpeq	r4, r6
   24f70:	bcs	24f48 <_obstack_memory_used@@Base+0x4cb0>
   24f74:	adds	r4, r4, r4
   24f78:	adc	r5, r5, r5
   24f7c:	subs	r2, r2, #1
   24f80:	bne	24f68 <_obstack_memory_used@@Base+0x4cd0>
   24f84:	lsr	r3, r4, ip
   24f88:	orr	r3, r3, r5, lsl fp
   24f8c:	lsr	r2, r5, ip
   24f90:	orr	r3, r3, r5, lsr sl
   24f94:	adds	r0, r0, r4
   24f98:	mov	r4, r3
   24f9c:	lsl	r3, r2, ip
   24fa0:	orr	r3, r3, r4, lsl sl
   24fa4:	lsl	ip, r4, ip
   24fa8:	orr	r3, r3, r4, lsr fp
   24fac:	adc	r1, r1, r5
   24fb0:	subs	r0, r0, ip
   24fb4:	mov	r5, r2
   24fb8:	sbc	r1, r1, r3
   24fbc:	cmp	lr, #0
   24fc0:	strdne	r4, [lr]
   24fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24fc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24fcc:	mov	r7, r0
   24fd0:	ldr	r6, [pc, #72]	; 25020 <_obstack_memory_used@@Base+0x4d88>
   24fd4:	ldr	r5, [pc, #72]	; 25024 <_obstack_memory_used@@Base+0x4d8c>
   24fd8:	add	r6, pc, r6
   24fdc:	add	r5, pc, r5
   24fe0:	sub	r6, r6, r5
   24fe4:	mov	r8, r1
   24fe8:	mov	r9, r2
   24fec:	bl	11838 <calloc@plt-0x20>
   24ff0:	asrs	r6, r6, #2
   24ff4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24ff8:	mov	r4, #0
   24ffc:	add	r4, r4, #1
   25000:	ldr	r3, [r5], #4
   25004:	mov	r2, r9
   25008:	mov	r1, r8
   2500c:	mov	r0, r7
   25010:	blx	r3
   25014:	cmp	r6, r4
   25018:	bne	24ffc <_obstack_memory_used@@Base+0x4d64>
   2501c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25020:	andeq	r4, r1, r4, lsr #30
   25024:	andeq	r4, r1, ip, lsl pc
   25028:	bx	lr
   2502c:	ldr	r3, [pc, #12]	; 25040 <_obstack_memory_used@@Base+0x4da8>
   25030:	mov	r1, #0
   25034:	add	r3, pc, r3
   25038:	ldr	r2, [r3]
   2503c:	b	11bdc <__cxa_atexit@plt>
   25040:	muleq	r1, r0, r1

Disassembly of section .fini:

00025044 <.fini>:
   25044:	push	{r3, lr}
   25048:	pop	{r3, pc}
