
../repos/prog2/0.7:     file format elf32-littlearm


Disassembly of section .init:

00010664 <.init>:
   10664:	push	{r3, lr}
   10668:	bl	1070c <_start@@Base+0x3c>
   1066c:	pop	{r3, pc}

Disassembly of section .plt:

00010670 <printf@plt-0x14>:
   10670:	push	{lr}		; (str lr, [sp, #-4]!)
   10674:	ldr	lr, [pc, #4]	; 10680 <printf@plt-0x4>
   10678:	add	lr, pc, lr
   1067c:	ldr	pc, [lr, #8]!
   10680:	andeq	r0, r1, r0, lsl #19

00010684 <printf@plt>:
   10684:	add	ip, pc, #0, 12
   10688:	add	ip, ip, #16, 20	; 0x10000
   1068c:	ldr	pc, [ip, #2432]!	; 0x980

00010690 <__libc_start_main@plt>:
   10690:	add	ip, pc, #0, 12
   10694:	add	ip, ip, #16, 20	; 0x10000
   10698:	ldr	pc, [ip, #2424]!	; 0x978

0001069c <__gmon_start__@plt>:
   1069c:	add	ip, pc, #0, 12
   106a0:	add	ip, ip, #16, 20	; 0x10000
   106a4:	ldr	pc, [ip, #2416]!	; 0x970

000106a8 <memset@plt>:
   106a8:	add	ip, pc, #0, 12
   106ac:	add	ip, ip, #16, 20	; 0x10000
   106b0:	ldr	pc, [ip, #2408]!	; 0x968

000106b4 <__isoc99_scanf@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2400]!	; 0x960

000106c0 <abort@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #16, 20	; 0x10000
   106c8:	ldr	pc, [ip, #2392]!	; 0x958

Disassembly of section .text:

000106d0 <_start@@Base>:
   106d0:	mov	fp, #0
   106d4:	mov	lr, #0
   106d8:	pop	{r1}		; (ldr r1, [sp], #4)
   106dc:	mov	r2, sp
   106e0:	push	{r2}		; (str r2, [sp, #-4]!)
   106e4:	push	{r0}		; (str r0, [sp, #-4]!)
   106e8:	ldr	ip, [pc, #16]	; 10700 <_start@@Base+0x30>
   106ec:	push	{ip}		; (str ip, [sp, #-4]!)
   106f0:	ldr	r0, [pc, #12]	; 10704 <_start@@Base+0x34>
   106f4:	ldr	r3, [pc, #12]	; 10708 <_start@@Base+0x38>
   106f8:	bl	10690 <__libc_start_main@plt>
   106fc:	bl	106c0 <abort@plt>
   10700:	andeq	r0, r1, r8, lsl #21
   10704:	andeq	r0, r1, r0, ror #17
   10708:	andeq	r0, r1, r8, lsr #20
   1070c:	ldr	r3, [pc, #20]	; 10728 <_start@@Base+0x58>
   10710:	ldr	r2, [pc, #20]	; 1072c <_start@@Base+0x5c>
   10714:	add	r3, pc, r3
   10718:	ldr	r2, [r3, r2]
   1071c:	cmp	r2, #0
   10720:	bxeq	lr
   10724:	b	1069c <__gmon_start__@plt>
   10728:	andeq	r0, r1, r4, ror #17
   1072c:	andeq	r0, r0, r4, lsr #32
   10730:	ldr	r0, [pc, #24]	; 10750 <_start@@Base+0x80>
   10734:	ldr	r3, [pc, #24]	; 10754 <_start@@Base+0x84>
   10738:	cmp	r3, r0
   1073c:	bxeq	lr
   10740:	ldr	r3, [pc, #16]	; 10758 <_start@@Base+0x88>
   10744:	cmp	r3, #0
   10748:	bxeq	lr
   1074c:	bx	r3
   10750:	andeq	r1, r2, r0, lsr r0
   10754:	andeq	r1, r2, r0, lsr r0
   10758:	andeq	r0, r0, r0
   1075c:	ldr	r0, [pc, #36]	; 10788 <_start@@Base+0xb8>
   10760:	ldr	r1, [pc, #36]	; 1078c <_start@@Base+0xbc>
   10764:	sub	r1, r1, r0
   10768:	asr	r1, r1, #2
   1076c:	add	r1, r1, r1, lsr #31
   10770:	asrs	r1, r1, #1
   10774:	bxeq	lr
   10778:	ldr	r3, [pc, #16]	; 10790 <_start@@Base+0xc0>
   1077c:	cmp	r3, #0
   10780:	bxeq	lr
   10784:	bx	r3
   10788:	andeq	r1, r2, r0, lsr r0
   1078c:	andeq	r1, r2, r0, lsr r0
   10790:	andeq	r0, r0, r0
   10794:	push	{r4, lr}
   10798:	ldr	r4, [pc, #24]	; 107b8 <_start@@Base+0xe8>
   1079c:	ldrb	r3, [r4]
   107a0:	cmp	r3, #0
   107a4:	popne	{r4, pc}
   107a8:	bl	10730 <_start@@Base+0x60>
   107ac:	mov	r3, #1
   107b0:	strb	r3, [r4]
   107b4:	pop	{r4, pc}
   107b8:	andeq	r1, r2, r0, lsr r0
   107bc:	b	1075c <_start@@Base+0x8c>

000107c0 <media@@Base>:
   107c0:	vldr	s0, [pc, #88]	; 10820 <media@@Base+0x60>
   107c4:	cmp	r1, #1
   107c8:	blt	10808 <media@@Base+0x48>
   107cc:	vldr	d16, [pc, #68]	; 10818 <media@@Base+0x58>
   107d0:	vmov.f32	s2, #35	; 0x41180000  9.5
   107d4:	mov	r2, r1
   107d8:	vldr	s4, [r0]
   107dc:	add	r0, r0, #4
   107e0:	vcvt.f64.f32	d17, s4
   107e4:	vcmpe.f64	d17, d16
   107e8:	vmrs	APSR_nzcv, fpscr
   107ec:	vselge.f32	s6, s2, s4
   107f0:	vcmpe.f32	s2, s4
   107f4:	vmrs	APSR_nzcv, fpscr
   107f8:	vselgt.f32	s4, s6, s4
   107fc:	subs	r2, r2, #1
   10800:	vadd.f32	s0, s0, s4
   10804:	bne	107d8 <media@@Base+0x18>
   10808:	vmov	s2, r1
   1080c:	vcvt.f32.s32	s2, s2
   10810:	vdiv.f32	s0, s0, s2
   10814:	bx	lr
   10818:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1081c:	mlami	r2, r9, r9, r9
   10820:	andeq	r0, r0, r0
   10824:	nop	{0}

00010828 <lernotas@@Base>:
   10828:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1082c:	add	fp, sp, #24
   10830:	vpush	{d8-d9}
   10834:	sub	sp, sp, #8
   10838:	mov	r4, r0
   1083c:	ldr	r0, [pc, #148]	; 108d8 <lernotas@@Base+0xb0>
   10840:	add	r1, sp, #4
   10844:	mov	r2, sp
   10848:	add	r0, pc, r0
   1084c:	bl	106b4 <__isoc99_scanf@plt>
   10850:	mov	r5, #0
   10854:	cmp	r0, #2
   10858:	bne	108b8 <lernotas@@Base+0x90>
   1085c:	ldr	r8, [pc, #120]	; 108dc <lernotas@@Base+0xb4>
   10860:	vldr	d8, [pc, #96]	; 108c8 <lernotas@@Base+0xa0>
   10864:	vldr	d9, [pc, #100]	; 108d0 <lernotas@@Base+0xa8>
   10868:	mov	r5, #0
   1086c:	add	r7, sp, #4
   10870:	mov	r6, sp
   10874:	add	r8, pc, r8
   10878:	vldr	s0, [sp]
   1087c:	vldr	s2, [sp, #4]
   10880:	mov	r0, r8
   10884:	mov	r1, r7
   10888:	mov	r2, r6
   1088c:	vcvt.f64.f32	d16, s0
   10890:	vcvt.f64.f32	d17, s2
   10894:	vmul.f64	d16, d16, d8
   10898:	vmla.f64	d16, d17, d9
   1089c:	vcvt.f32.f64	s0, d16
   108a0:	vstr	s0, [r4]
   108a4:	bl	106b4 <__isoc99_scanf@plt>
   108a8:	add	r4, r4, #4
   108ac:	add	r5, r5, #1
   108b0:	cmp	r0, #2
   108b4:	beq	10878 <lernotas@@Base+0x50>
   108b8:	mov	r0, r5
   108bc:	sub	sp, fp, #40	; 0x28
   108c0:	vpop	{d8-d9}
   108c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   108c8:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   108cc:	svccc	0x00d99999
   108d0:	teqcc	r3, #-872415232	; 0xcc000000
   108d4:	svccc	0x00e33333
   108d8:	andeq	r0, r0, r8, asr #4
   108dc:	andeq	r0, r0, ip, lsl r2

000108e0 <main@@Base>:
   108e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   108e4:	add	fp, sp, #24
   108e8:	vpush	{d8-d9}
   108ec:	sub	sp, sp, #408	; 0x198
   108f0:	mov	r4, sp
   108f4:	mov	r1, #0
   108f8:	mov	r2, #400	; 0x190
   108fc:	mov	r5, #0
   10900:	mov	r0, r4
   10904:	bl	106a8 <memset@plt>
   10908:	ldr	r0, [pc, #268]	; 10a1c <main@@Base+0x13c>
   1090c:	sub	r1, fp, #44	; 0x2c
   10910:	sub	r2, fp, #48	; 0x30
   10914:	add	r0, pc, r0
   10918:	bl	106b4 <__isoc99_scanf@plt>
   1091c:	cmp	r0, #2
   10920:	bne	109cc <main@@Base+0xec>
   10924:	ldr	r8, [pc, #244]	; 10a20 <main@@Base+0x140>
   10928:	vldr	d8, [pc, #208]	; 10a00 <main@@Base+0x120>
   1092c:	vldr	d9, [pc, #212]	; 10a08 <main@@Base+0x128>
   10930:	sub	r6, fp, #44	; 0x2c
   10934:	sub	r7, fp, #48	; 0x30
   10938:	add	r8, pc, r8
   1093c:	vldr	s0, [fp, #-48]	; 0xffffffd0
   10940:	vldr	s2, [fp, #-44]	; 0xffffffd4
   10944:	mov	r0, r8
   10948:	mov	r1, r6
   1094c:	mov	r2, r7
   10950:	vcvt.f64.f32	d16, s0
   10954:	vcvt.f64.f32	d17, s2
   10958:	vmul.f64	d16, d16, d8
   1095c:	vmla.f64	d16, d17, d9
   10960:	vcvt.f32.f64	s0, d16
   10964:	vstr	s0, [r4]
   10968:	bl	106b4 <__isoc99_scanf@plt>
   1096c:	add	r4, r4, #4
   10970:	add	r5, r5, #1
   10974:	cmp	r0, #2
   10978:	beq	1093c <main@@Base+0x5c>
   1097c:	vldr	s0, [pc, #148]	; 10a18 <main@@Base+0x138>
   10980:	vldr	d16, [pc, #136]	; 10a10 <main@@Base+0x130>
   10984:	vmov.f32	s2, #35	; 0x41180000  9.5
   10988:	mov	r0, sp
   1098c:	mov	r1, r5
   10990:	vldr	s4, [r0]
   10994:	add	r0, r0, #4
   10998:	vcvt.f64.f32	d17, s4
   1099c:	vcmpe.f64	d17, d16
   109a0:	vmrs	APSR_nzcv, fpscr
   109a4:	vselge.f32	s6, s2, s4
   109a8:	vcmpe.f32	s2, s4
   109ac:	vmrs	APSR_nzcv, fpscr
   109b0:	vselgt.f32	s4, s6, s4
   109b4:	subs	r1, r1, #1
   109b8:	vadd.f32	s0, s0, s4
   109bc:	bne	10990 <main@@Base+0xb0>
   109c0:	vmov	s2, r5
   109c4:	vcvt.f32.s32	s2, s2
   109c8:	b	109d4 <main@@Base+0xf4>
   109cc:	vldr	s2, [pc, #68]	; 10a18 <main@@Base+0x138>
   109d0:	vmov.f32	s0, s2
   109d4:	vdiv.f32	s0, s0, s2
   109d8:	ldr	r0, [pc, #68]	; 10a24 <main@@Base+0x144>
   109dc:	add	r0, pc, r0
   109e0:	vcvt.f64.f32	d16, s0
   109e4:	vmov	r2, r3, d16
   109e8:	bl	10684 <printf@plt>
   109ec:	mov	r0, #0
   109f0:	sub	sp, fp, #40	; 0x28
   109f4:	vpop	{d8-d9}
   109f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   109fc:	nop	{0}
   10a00:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   10a04:	svccc	0x00d99999
   10a08:	teqcc	r3, #-872415232	; 0xcc000000
   10a0c:	svccc	0x00e33333
   10a10:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   10a14:	mlami	r2, r9, r9, r9
   10a18:	andeq	r0, r0, r0
   10a1c:	andeq	r0, r0, ip, ror r1
   10a20:	andeq	r0, r0, r8, asr r1
   10a24:	strheq	r0, [r0], -sl

00010a28 <__libc_csu_init@@Base>:
   10a28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a2c:	mov	r7, r0
   10a30:	ldr	r6, [pc, #72]	; 10a80 <__libc_csu_init@@Base+0x58>
   10a34:	ldr	r5, [pc, #72]	; 10a84 <__libc_csu_init@@Base+0x5c>
   10a38:	add	r6, pc, r6
   10a3c:	add	r5, pc, r5
   10a40:	sub	r6, r6, r5
   10a44:	mov	r8, r1
   10a48:	mov	r9, r2
   10a4c:	bl	10664 <printf@plt-0x20>
   10a50:	asrs	r6, r6, #2
   10a54:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a58:	mov	r4, #0
   10a5c:	add	r4, r4, #1
   10a60:	ldr	r3, [r5], #4
   10a64:	mov	r2, r9
   10a68:	mov	r1, r8
   10a6c:	mov	r0, r7
   10a70:	blx	r3
   10a74:	cmp	r6, r4
   10a78:	bne	10a5c <__libc_csu_init@@Base+0x34>
   10a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a80:	andeq	r0, r1, ip, asr #9
   10a84:	andeq	r0, r1, r4, asr #9

00010a88 <__libc_csu_fini@@Base>:
   10a88:	bx	lr

Disassembly of section .fini:

00010a8c <.fini>:
   10a8c:	push	{r3, lr}
   10a90:	pop	{r3, pc}
