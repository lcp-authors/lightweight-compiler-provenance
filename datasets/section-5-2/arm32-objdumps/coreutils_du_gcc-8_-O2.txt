
../repos/coreutils/src/du:     file format elf32-littlearm


Disassembly of section .init:

00011674 <.init>:
   11674:	push	{r3, lr}
   11678:	bl	13804 <__assert_fail@plt+0x1c60>
   1167c:	pop	{r3, pc}

Disassembly of section .plt:

00011680 <pthread_mutex_unlock@plt-0x14>:
   11680:	push	{lr}		; (str lr, [sp, #-4]!)
   11684:	ldr	lr, [pc, #4]	; 11690 <pthread_mutex_unlock@plt-0x4>
   11688:	add	lr, pc, lr
   1168c:	ldr	pc, [lr, #8]!
   11690:	andeq	r2, r3, r0, ror r9

00011694 <pthread_mutex_unlock@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #204800	; 0x32000
   1169c:	ldr	pc, [ip, #2416]!	; 0x970

000116a0 <fstatfs64@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #204800	; 0x32000
   116a8:	ldr	pc, [ip, #2408]!	; 0x968

000116ac <calloc@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #204800	; 0x32000
   116b4:	ldr	pc, [ip, #2400]!	; 0x960

000116b8 <fputs_unlocked@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #204800	; 0x32000
   116c0:	ldr	pc, [ip, #2392]!	; 0x958

000116c4 <wctype@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #204800	; 0x32000
   116cc:	ldr	pc, [ip, #2384]!	; 0x950

000116d0 <raise@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #204800	; 0x32000
   116d8:	ldr	pc, [ip, #2376]!	; 0x948

000116dc <wcrtomb@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #204800	; 0x32000
   116e4:	ldr	pc, [ip, #2368]!	; 0x940

000116e8 <gmtime_r@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #204800	; 0x32000
   116f0:	ldr	pc, [ip, #2360]!	; 0x938

000116f4 <__getdelim@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #204800	; 0x32000
   116fc:	ldr	pc, [ip, #2352]!	; 0x930

00011700 <iswctype@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #204800	; 0x32000
   11708:	ldr	pc, [ip, #2344]!	; 0x928

0001170c <strcmp@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #204800	; 0x32000
   11714:	ldr	pc, [ip, #2336]!	; 0x920

00011718 <pthread_mutex_destroy@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #204800	; 0x32000
   11720:	ldr	pc, [ip, #2328]!	; 0x918

00011724 <mktime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #204800	; 0x32000
   1172c:	ldr	pc, [ip, #2320]!	; 0x910

00011730 <fflush@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #204800	; 0x32000
   11738:	ldr	pc, [ip, #2312]!	; 0x908

0001173c <wcwidth@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #204800	; 0x32000
   11744:	ldr	pc, [ip, #2304]!	; 0x900

00011748 <memmove@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #204800	; 0x32000
   11750:	ldr	pc, [ip, #2296]!	; 0x8f8

00011754 <free@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #204800	; 0x32000
   1175c:	ldr	pc, [ip, #2288]!	; 0x8f0

00011760 <pthread_mutex_lock@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #204800	; 0x32000
   11768:	ldr	pc, [ip, #2280]!	; 0x8e8

0001176c <ferror@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #204800	; 0x32000
   11774:	ldr	pc, [ip, #2272]!	; 0x8e0

00011778 <_exit@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #204800	; 0x32000
   11780:	ldr	pc, [ip, #2264]!	; 0x8d8

00011784 <memcpy@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #204800	; 0x32000
   1178c:	ldr	pc, [ip, #2256]!	; 0x8d0

00011790 <pthread_mutex_init@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #204800	; 0x32000
   11798:	ldr	pc, [ip, #2248]!	; 0x8c8

0001179c <__strtoull_internal@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #204800	; 0x32000
   117a4:	ldr	pc, [ip, #2240]!	; 0x8c0

000117a8 <towlower@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #204800	; 0x32000
   117b0:	ldr	pc, [ip, #2232]!	; 0x8b8

000117b4 <mbsinit@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #204800	; 0x32000
   117bc:	ldr	pc, [ip, #2224]!	; 0x8b0

000117c0 <memcmp@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #204800	; 0x32000
   117c8:	ldr	pc, [ip, #2216]!	; 0x8a8

000117cc <fputc_unlocked@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #204800	; 0x32000
   117d4:	ldr	pc, [ip, #2208]!	; 0x8a0

000117d8 <dcgettext@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #204800	; 0x32000
   117e0:	ldr	pc, [ip, #2200]!	; 0x898

000117e4 <dup2@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #204800	; 0x32000
   117ec:	ldr	pc, [ip, #2192]!	; 0x890

000117f0 <realloc@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #204800	; 0x32000
   117f8:	ldr	pc, [ip, #2184]!	; 0x888

000117fc <localtime_r@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #204800	; 0x32000
   11804:	ldr	pc, [ip, #2176]!	; 0x880

00011808 <textdomain@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #204800	; 0x32000
   11810:	ldr	pc, [ip, #2168]!	; 0x878

00011814 <iswcntrl@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #204800	; 0x32000
   1181c:	ldr	pc, [ip, #2160]!	; 0x870

00011820 <__fxstatat64@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #204800	; 0x32000
   11828:	ldr	pc, [ip, #2152]!	; 0x868

0001182c <fflush_unlocked@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #204800	; 0x32000
   11834:	ldr	pc, [ip, #2144]!	; 0x860

00011838 <iswprint@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #204800	; 0x32000
   11840:	ldr	pc, [ip, #2136]!	; 0x858

00011844 <tzset@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #204800	; 0x32000
   1184c:	ldr	pc, [ip, #2128]!	; 0x850

00011850 <__fxstat64@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #204800	; 0x32000
   11858:	ldr	pc, [ip, #2120]!	; 0x848

0001185c <__memcpy_chk@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #204800	; 0x32000
   11864:	ldr	pc, [ip, #2112]!	; 0x840

00011868 <fwrite@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #204800	; 0x32000
   11870:	ldr	pc, [ip, #2104]!	; 0x838

00011874 <lseek64@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #204800	; 0x32000
   1187c:	ldr	pc, [ip, #2096]!	; 0x830

00011880 <__ctype_get_mb_cur_max@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #204800	; 0x32000
   11888:	ldr	pc, [ip, #2088]!	; 0x828

0001188c <hasmntopt@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #204800	; 0x32000
   11894:	ldr	pc, [ip, #2080]!	; 0x820

00011898 <strcpy@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #204800	; 0x32000
   118a0:	ldr	pc, [ip, #2072]!	; 0x818

000118a4 <__fpending@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #204800	; 0x32000
   118ac:	ldr	pc, [ip, #2064]!	; 0x810

000118b0 <mbrtowc@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #204800	; 0x32000
   118b8:	ldr	pc, [ip, #2056]!	; 0x808

000118bc <error@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #204800	; 0x32000
   118c4:	ldr	pc, [ip, #2048]!	; 0x800

000118c8 <getmntent@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #204800	; 0x32000
   118d0:	ldr	pc, [ip, #2040]!	; 0x7f8

000118d4 <fnmatch@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #204800	; 0x32000
   118dc:	ldr	pc, [ip, #2032]!	; 0x7f0

000118e0 <open64@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #204800	; 0x32000
   118e8:	ldr	pc, [ip, #2024]!	; 0x7e8

000118ec <getenv@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #204800	; 0x32000
   118f4:	ldr	pc, [ip, #2016]!	; 0x7e0

000118f8 <malloc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #204800	; 0x32000
   11900:	ldr	pc, [ip, #2008]!	; 0x7d8

00011904 <__libc_start_main@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #204800	; 0x32000
   1190c:	ldr	pc, [ip, #2000]!	; 0x7d0

00011910 <strftime@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #204800	; 0x32000
   11918:	ldr	pc, [ip, #1992]!	; 0x7c8

0001191c <__freading@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #204800	; 0x32000
   11924:	ldr	pc, [ip, #1984]!	; 0x7c0

00011928 <__ctype_tolower_loc@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #204800	; 0x32000
   11930:	ldr	pc, [ip, #1976]!	; 0x7b8

00011934 <__ctype_toupper_loc@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #204800	; 0x32000
   1193c:	ldr	pc, [ip, #1968]!	; 0x7b0

00011940 <__gmon_start__@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #204800	; 0x32000
   11948:	ldr	pc, [ip, #1960]!	; 0x7a8

0001194c <freopen64@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #204800	; 0x32000
   11954:	ldr	pc, [ip, #1952]!	; 0x7a0

00011958 <getopt_long@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #204800	; 0x32000
   11960:	ldr	pc, [ip, #1944]!	; 0x798

00011964 <__ctype_b_loc@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #204800	; 0x32000
   1196c:	ldr	pc, [ip, #1936]!	; 0x790

00011970 <exit@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #204800	; 0x32000
   11978:	ldr	pc, [ip, #1928]!	; 0x788

0001197c <feof@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #204800	; 0x32000
   11984:	ldr	pc, [ip, #1920]!	; 0x780

00011988 <strlen@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #204800	; 0x32000
   11990:	ldr	pc, [ip, #1912]!	; 0x778

00011994 <strchr@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #204800	; 0x32000
   1199c:	ldr	pc, [ip, #1904]!	; 0x770

000119a0 <setenv@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #204800	; 0x32000
   119a8:	ldr	pc, [ip, #1896]!	; 0x768

000119ac <openat64@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #204800	; 0x32000
   119b4:	ldr	pc, [ip, #1888]!	; 0x760

000119b8 <__errno_location@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #204800	; 0x32000
   119c0:	ldr	pc, [ip, #1880]!	; 0x758

000119c4 <iswalnum@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #204800	; 0x32000
   119cc:	ldr	pc, [ip, #1872]!	; 0x750

000119d0 <__sprintf_chk@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #204800	; 0x32000
   119d8:	ldr	pc, [ip, #1864]!	; 0x748

000119dc <__cxa_atexit@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #204800	; 0x32000
   119e4:	ldr	pc, [ip, #1856]!	; 0x740

000119e8 <memset@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #204800	; 0x32000
   119f0:	ldr	pc, [ip, #1848]!	; 0x738

000119f4 <btowc@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #204800	; 0x32000
   119fc:	ldr	pc, [ip, #1840]!	; 0x730

00011a00 <__printf_chk@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #204800	; 0x32000
   11a08:	ldr	pc, [ip, #1832]!	; 0x728

00011a0c <fileno@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #204800	; 0x32000
   11a14:	ldr	pc, [ip, #1824]!	; 0x720

00011a18 <__fprintf_chk@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #204800	; 0x32000
   11a20:	ldr	pc, [ip, #1816]!	; 0x718

00011a24 <memchr@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #204800	; 0x32000
   11a2c:	ldr	pc, [ip, #1808]!	; 0x710

00011a30 <fclose@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #204800	; 0x32000
   11a38:	ldr	pc, [ip, #1800]!	; 0x708

00011a3c <fseeko64@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #204800	; 0x32000
   11a44:	ldr	pc, [ip, #1792]!	; 0x700

00011a48 <endmntent@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #204800	; 0x32000
   11a50:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a54 <fcntl64@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #204800	; 0x32000
   11a5c:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a60 <__overflow@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #204800	; 0x32000
   11a68:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a6c <setlocale@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #204800	; 0x32000
   11a74:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a78 <strrchr@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #204800	; 0x32000
   11a80:	ldr	pc, [ip, #1752]!	; 0x6d8

00011a84 <nl_langinfo@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #204800	; 0x32000
   11a8c:	ldr	pc, [ip, #1744]!	; 0x6d0

00011a90 <fputc@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #204800	; 0x32000
   11a98:	ldr	pc, [ip, #1736]!	; 0x6c8

00011a9c <sscanf@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #204800	; 0x32000
   11aa4:	ldr	pc, [ip, #1728]!	; 0x6c0

00011aa8 <localeconv@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #204800	; 0x32000
   11ab0:	ldr	pc, [ip, #1720]!	; 0x6b8

00011ab4 <readdir64@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #204800	; 0x32000
   11abc:	ldr	pc, [ip, #1712]!	; 0x6b0

00011ac0 <fdopendir@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #204800	; 0x32000
   11ac8:	ldr	pc, [ip, #1704]!	; 0x6a8

00011acc <timegm@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #204800	; 0x32000
   11ad4:	ldr	pc, [ip, #1696]!	; 0x6a0

00011ad8 <dirfd@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #204800	; 0x32000
   11ae0:	ldr	pc, [ip, #1688]!	; 0x698

00011ae4 <fchdir@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #204800	; 0x32000
   11aec:	ldr	pc, [ip, #1680]!	; 0x690

00011af0 <__strtoll_internal@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #204800	; 0x32000
   11af8:	ldr	pc, [ip, #1672]!	; 0x688

00011afc <fopen64@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #204800	; 0x32000
   11b04:	ldr	pc, [ip, #1664]!	; 0x680

00011b08 <qsort@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #204800	; 0x32000
   11b10:	ldr	pc, [ip, #1656]!	; 0x678

00011b14 <setmntent@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #204800	; 0x32000
   11b1c:	ldr	pc, [ip, #1648]!	; 0x670

00011b20 <bindtextdomain@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #204800	; 0x32000
   11b28:	ldr	pc, [ip, #1640]!	; 0x668

00011b2c <getdelim@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #204800	; 0x32000
   11b34:	ldr	pc, [ip, #1632]!	; 0x660

00011b38 <__xstat64@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #204800	; 0x32000
   11b40:	ldr	pc, [ip, #1624]!	; 0x658

00011b44 <unsetenv@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #204800	; 0x32000
   11b4c:	ldr	pc, [ip, #1616]!	; 0x650

00011b50 <towupper@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #204800	; 0x32000
   11b58:	ldr	pc, [ip, #1608]!	; 0x648

00011b5c <strncmp@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #204800	; 0x32000
   11b64:	ldr	pc, [ip, #1600]!	; 0x640

00011b68 <abort@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #204800	; 0x32000
   11b70:	ldr	pc, [ip, #1592]!	; 0x638

00011b74 <getc@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #204800	; 0x32000
   11b7c:	ldr	pc, [ip, #1584]!	; 0x630

00011b80 <close@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #204800	; 0x32000
   11b88:	ldr	pc, [ip, #1576]!	; 0x628

00011b8c <__lxstat64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #204800	; 0x32000
   11b94:	ldr	pc, [ip, #1568]!	; 0x620

00011b98 <closedir@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #204800	; 0x32000
   11ba0:	ldr	pc, [ip, #1560]!	; 0x618

00011ba4 <__assert_fail@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #204800	; 0x32000
   11bac:	ldr	pc, [ip, #1552]!	; 0x610

Disassembly of section .text:

00011bb0 <.text>:
   11bb0:	movw	r3, #9828	; 0x2664
   11bb4:	movt	r3, #3
   11bb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11bbc:	strd	r6, [sp, #8]
   11bc0:	mov	r2, #0
   11bc4:	mov	r6, r0
   11bc8:	strd	r8, [sp, #16]
   11bcc:	mov	r7, r2
   11bd0:	mov	r5, r1
   11bd4:	strd	sl, [sp, #24]
   11bd8:	movw	r9, #16968	; 0x4248
   11bdc:	movt	r9, #4
   11be0:	str	lr, [sp, #32]
   11be4:	sub	sp, sp, #236	; 0xec
   11be8:	mov	fp, #8
   11bec:	ldr	r0, [r1]
   11bf0:	add	sl, sp, #116	; 0x74
   11bf4:	str	r2, [sp, #28]
   11bf8:	str	r3, [sp, #120]	; 0x78
   11bfc:	mov	r3, #16
   11c00:	ldr	r4, [pc, #4052]	; 12bdc <__assert_fail@plt+0x1038>
   11c04:	str	r3, [sp, #32]
   11c08:	str	r2, [sp, #40]	; 0x28
   11c0c:	str	r2, [sp, #124]	; 0x7c
   11c10:	bl	1d470 <__assert_fail@plt+0xb8cc>
   11c14:	movw	r1, #11844	; 0x2e44
   11c18:	movt	r1, #3
   11c1c:	mov	r0, #6
   11c20:	bl	11a6c <setlocale@plt>
   11c24:	movw	r1, #9832	; 0x2668
   11c28:	movt	r1, #3
   11c2c:	movw	r0, #9648	; 0x25b0
   11c30:	movt	r0, #3
   11c34:	bl	11b20 <bindtextdomain@plt>
   11c38:	movw	r0, #9648	; 0x25b0
   11c3c:	movt	r0, #3
   11c40:	bl	11808 <textdomain@plt>
   11c44:	movw	r0, #17660	; 0x44fc
   11c48:	movt	r0, #1
   11c4c:	bl	3147c <__assert_fail@plt+0x1f8d8>
   11c50:	bl	14f8c <__assert_fail@plt+0x33e8>
   11c54:	str	r0, [r9, #32]
   11c58:	movw	r0, #9856	; 0x2680
   11c5c:	movt	r0, #3
   11c60:	bl	118ec <getenv@plt>
   11c64:	add	r3, r4, #416	; 0x1a0
   11c68:	add	r2, r9, fp
   11c6c:	mov	r1, r9
   11c70:	str	r3, [sp, #44]	; 0x2c
   11c74:	mov	r3, #1
   11c78:	str	r3, [sp, #60]	; 0x3c
   11c7c:	bl	1bc90 <__assert_fail@plt+0xa0ec>
   11c80:	mvn	ip, #0
   11c84:	movw	r2, #9872	; 0x2690
   11c88:	movt	r2, #3
   11c8c:	mov	r3, r4
   11c90:	str	sl, [sp]
   11c94:	mov	r1, r5
   11c98:	mov	r0, r6
   11c9c:	str	ip, [sp, #116]	; 0x74
   11ca0:	bl	11958 <getopt_long@plt>
   11ca4:	cmn	r0, #1
   11ca8:	beq	124e0 <__assert_fail@plt+0x93c>
   11cac:	add	r0, r0, #3
   11cb0:	movw	r3, #266	; 0x10a
   11cb4:	cmp	r0, r3
   11cb8:	ldrls	pc, [pc, r0, lsl #2]
   11cbc:	b	12490 <__assert_fail@plt+0x8ec>
   11cc0:	andeq	r2, r1, r8, asr #5
   11cc4:	ldrdeq	r3, [r1], -r0
   11cc8:	muleq	r1, r0, r4
   11ccc:	muleq	r1, r0, r4
   11cd0:	muleq	r1, r0, r4
   11cd4:	muleq	r1, r0, r4
   11cd8:	muleq	r1, r0, r4
   11cdc:	muleq	r1, r0, r4
   11ce0:	muleq	r1, r0, r4
   11ce4:	muleq	r1, r0, r4
   11ce8:	muleq	r1, r0, r4
   11cec:	muleq	r1, r0, r4
   11cf0:	muleq	r1, r0, r4
   11cf4:	muleq	r1, r0, r4
   11cf8:	muleq	r1, r0, r4
   11cfc:	muleq	r1, r0, r4
   11d00:	muleq	r1, r0, r4
   11d04:	muleq	r1, r0, r4
   11d08:	muleq	r1, r0, r4
   11d0c:	muleq	r1, r0, r4
   11d10:	muleq	r1, r0, r4
   11d14:	muleq	r1, r0, r4
   11d18:	muleq	r1, r0, r4
   11d1c:	muleq	r1, r0, r4
   11d20:	muleq	r1, r0, r4
   11d24:	muleq	r1, r0, r4
   11d28:	muleq	r1, r0, r4
   11d2c:	muleq	r1, r0, r4
   11d30:	muleq	r1, r0, r4
   11d34:	muleq	r1, r0, r4
   11d38:	muleq	r1, r0, r4
   11d3c:	muleq	r1, r0, r4
   11d40:	muleq	r1, r0, r4
   11d44:	muleq	r1, r0, r4
   11d48:	muleq	r1, r0, r4
   11d4c:	muleq	r1, r0, r4
   11d50:	muleq	r1, r0, r4
   11d54:	muleq	r1, r0, r4
   11d58:	muleq	r1, r0, r4
   11d5c:	muleq	r1, r0, r4
   11d60:	muleq	r1, r0, r4
   11d64:	muleq	r1, r0, r4
   11d68:	muleq	r1, r0, r4
   11d6c:	muleq	r1, r0, r4
   11d70:	muleq	r1, r0, r4
   11d74:	muleq	r1, r0, r4
   11d78:	muleq	r1, r0, r4
   11d7c:	muleq	r1, r0, r4
   11d80:	muleq	r1, r0, r4
   11d84:	muleq	r1, r0, r4
   11d88:	muleq	r1, r0, r4
   11d8c:			; <UNDEFINED> instruction: 0x000122bc
   11d90:	muleq	r1, r0, r4
   11d94:	muleq	r1, r0, r4
   11d98:	muleq	r1, r0, r4
   11d9c:	muleq	r1, r0, r4
   11da0:	muleq	r1, r0, r4
   11da4:	muleq	r1, r0, r4
   11da8:	muleq	r1, r0, r4
   11dac:	muleq	r1, r0, r4
   11db0:	muleq	r1, r0, r4
   11db4:	muleq	r1, r0, r4
   11db8:	muleq	r1, r0, r4
   11dbc:	muleq	r1, r0, r4
   11dc0:	muleq	r1, r0, r4
   11dc4:	muleq	r1, r0, r4
   11dc8:	muleq	r1, r0, r4
   11dcc:	muleq	r1, r0, r4
   11dd0:	muleq	r1, r0, r4
   11dd4:	andeq	r2, r1, r4, lsl #5
   11dd8:	muleq	r1, r0, r4
   11ddc:	andeq	r2, r1, r8, ror r2
   11de0:	muleq	r1, r0, r4
   11de4:	muleq	r1, r0, r4
   11de8:	muleq	r1, r0, r4
   11dec:	andeq	r2, r1, r8, ror r2
   11df0:	muleq	r1, r0, r4
   11df4:	muleq	r1, r0, r4
   11df8:	muleq	r1, r0, r4
   11dfc:	andeq	r2, r1, ip, ror #4
   11e00:	muleq	r1, r0, r4
   11e04:	muleq	r1, r0, r4
   11e08:	muleq	r1, r0, r4
   11e0c:	andeq	r2, r1, r0, ror #4
   11e10:	muleq	r1, r0, r4
   11e14:	muleq	r1, r0, r4
   11e18:	andeq	r2, r1, r4, asr r2
   11e1c:	muleq	r1, r0, r4
   11e20:	muleq	r1, r0, r4
   11e24:	muleq	r1, r0, r4
   11e28:	muleq	r1, r0, r4
   11e2c:	andeq	r2, r1, r8, ror #3
   11e30:	muleq	r1, r0, r4
   11e34:	muleq	r1, r0, r4
   11e38:	muleq	r1, r0, r4
   11e3c:	muleq	r1, r0, r4
   11e40:	muleq	r1, r0, r4
   11e44:	muleq	r1, r0, r4
   11e48:	muleq	r1, r0, r4
   11e4c:	muleq	r1, r0, r4
   11e50:	ldrdeq	r2, [r1], -ip
   11e54:			; <UNDEFINED> instruction: 0x000121bc
   11e58:			; <UNDEFINED> instruction: 0x000121b0
   11e5c:	andeq	r2, r1, r8, asr #2
   11e60:	muleq	r1, r0, r4
   11e64:	muleq	r1, r0, r4
   11e68:	muleq	r1, r0, r4
   11e6c:	andeq	r2, r1, r0, lsr r1
   11e70:	muleq	r1, r0, r4
   11e74:	muleq	r1, r0, r4
   11e78:	andeq	r2, r1, r8, lsl r1
   11e7c:	andeq	r2, r1, ip, lsl #2
   11e80:	strdeq	r2, [r1], -r4
   11e84:	muleq	r1, r0, r4
   11e88:	muleq	r1, r0, r4
   11e8c:	muleq	r1, r0, r4
   11e90:	muleq	r1, r0, r4
   11e94:	muleq	r1, r0, r4
   11e98:	andeq	r2, r1, ip, ror #1
   11e9c:	andeq	r2, r1, r0, lsr #8
   11ea0:	muleq	r1, r0, r4
   11ea4:	muleq	r1, r0, r4
   11ea8:	muleq	r1, r0, r4
   11eac:	andeq	r2, r1, r8, lsl r4
   11eb0:	muleq	r1, r0, r4
   11eb4:	muleq	r1, r0, r4
   11eb8:	muleq	r1, r0, r4
   11ebc:	muleq	r1, r0, r4
   11ec0:	muleq	r1, r0, r4
   11ec4:	muleq	r1, r0, r4
   11ec8:	muleq	r1, r0, r4
   11ecc:	muleq	r1, r0, r4
   11ed0:	muleq	r1, r0, r4
   11ed4:	muleq	r1, r0, r4
   11ed8:	muleq	r1, r0, r4
   11edc:	muleq	r1, r0, r4
   11ee0:	muleq	r1, r0, r4
   11ee4:	muleq	r1, r0, r4
   11ee8:	muleq	r1, r0, r4
   11eec:	muleq	r1, r0, r4
   11ef0:	muleq	r1, r0, r4
   11ef4:	muleq	r1, r0, r4
   11ef8:	muleq	r1, r0, r4
   11efc:	muleq	r1, r0, r4
   11f00:	muleq	r1, r0, r4
   11f04:	muleq	r1, r0, r4
   11f08:	muleq	r1, r0, r4
   11f0c:	muleq	r1, r0, r4
   11f10:	muleq	r1, r0, r4
   11f14:	muleq	r1, r0, r4
   11f18:	muleq	r1, r0, r4
   11f1c:	muleq	r1, r0, r4
   11f20:	muleq	r1, r0, r4
   11f24:	muleq	r1, r0, r4
   11f28:	muleq	r1, r0, r4
   11f2c:	muleq	r1, r0, r4
   11f30:	muleq	r1, r0, r4
   11f34:	muleq	r1, r0, r4
   11f38:	muleq	r1, r0, r4
   11f3c:	muleq	r1, r0, r4
   11f40:	muleq	r1, r0, r4
   11f44:	muleq	r1, r0, r4
   11f48:	muleq	r1, r0, r4
   11f4c:	muleq	r1, r0, r4
   11f50:	muleq	r1, r0, r4
   11f54:	muleq	r1, r0, r4
   11f58:	muleq	r1, r0, r4
   11f5c:	muleq	r1, r0, r4
   11f60:	muleq	r1, r0, r4
   11f64:	muleq	r1, r0, r4
   11f68:	muleq	r1, r0, r4
   11f6c:	muleq	r1, r0, r4
   11f70:	muleq	r1, r0, r4
   11f74:	muleq	r1, r0, r4
   11f78:	muleq	r1, r0, r4
   11f7c:	muleq	r1, r0, r4
   11f80:	muleq	r1, r0, r4
   11f84:	muleq	r1, r0, r4
   11f88:	muleq	r1, r0, r4
   11f8c:	muleq	r1, r0, r4
   11f90:	muleq	r1, r0, r4
   11f94:	muleq	r1, r0, r4
   11f98:	muleq	r1, r0, r4
   11f9c:	muleq	r1, r0, r4
   11fa0:	muleq	r1, r0, r4
   11fa4:	muleq	r1, r0, r4
   11fa8:	muleq	r1, r0, r4
   11fac:	muleq	r1, r0, r4
   11fb0:	muleq	r1, r0, r4
   11fb4:	muleq	r1, r0, r4
   11fb8:	muleq	r1, r0, r4
   11fbc:	muleq	r1, r0, r4
   11fc0:	muleq	r1, r0, r4
   11fc4:	muleq	r1, r0, r4
   11fc8:	muleq	r1, r0, r4
   11fcc:	muleq	r1, r0, r4
   11fd0:	muleq	r1, r0, r4
   11fd4:	muleq	r1, r0, r4
   11fd8:	muleq	r1, r0, r4
   11fdc:	muleq	r1, r0, r4
   11fe0:	muleq	r1, r0, r4
   11fe4:	muleq	r1, r0, r4
   11fe8:	muleq	r1, r0, r4
   11fec:	muleq	r1, r0, r4
   11ff0:	muleq	r1, r0, r4
   11ff4:	muleq	r1, r0, r4
   11ff8:	muleq	r1, r0, r4
   11ffc:	muleq	r1, r0, r4
   12000:	muleq	r1, r0, r4
   12004:	muleq	r1, r0, r4
   12008:	muleq	r1, r0, r4
   1200c:	muleq	r1, r0, r4
   12010:	muleq	r1, r0, r4
   12014:	muleq	r1, r0, r4
   12018:	muleq	r1, r0, r4
   1201c:	muleq	r1, r0, r4
   12020:	muleq	r1, r0, r4
   12024:	muleq	r1, r0, r4
   12028:	muleq	r1, r0, r4
   1202c:	muleq	r1, r0, r4
   12030:	muleq	r1, r0, r4
   12034:	muleq	r1, r0, r4
   12038:	muleq	r1, r0, r4
   1203c:	muleq	r1, r0, r4
   12040:	muleq	r1, r0, r4
   12044:	muleq	r1, r0, r4
   12048:	muleq	r1, r0, r4
   1204c:	muleq	r1, r0, r4
   12050:	muleq	r1, r0, r4
   12054:	muleq	r1, r0, r4
   12058:	muleq	r1, r0, r4
   1205c:	muleq	r1, r0, r4
   12060:	muleq	r1, r0, r4
   12064:	muleq	r1, r0, r4
   12068:	muleq	r1, r0, r4
   1206c:	muleq	r1, r0, r4
   12070:	muleq	r1, r0, r4
   12074:	muleq	r1, r0, r4
   12078:	muleq	r1, r0, r4
   1207c:	muleq	r1, r0, r4
   12080:	muleq	r1, r0, r4
   12084:	muleq	r1, r0, r4
   12088:	muleq	r1, r0, r4
   1208c:	muleq	r1, r0, r4
   12090:	muleq	r1, r0, r4
   12094:	muleq	r1, r0, r4
   12098:	muleq	r1, r0, r4
   1209c:	muleq	r1, r0, r4
   120a0:	muleq	r1, r0, r4
   120a4:	muleq	r1, r0, r4
   120a8:	muleq	r1, r0, r4
   120ac:	muleq	r1, r0, r4
   120b0:	muleq	r1, r0, r4
   120b4:	muleq	r1, r0, r4
   120b8:	muleq	r1, r0, r4
   120bc:	muleq	r1, r0, r4
   120c0:	muleq	r1, r0, r4
   120c4:	muleq	r1, r0, r4
   120c8:	muleq	r1, r0, r4
   120cc:	andeq	r2, r1, ip, lsl #8
   120d0:	strdeq	r2, [r1], -r0
   120d4:	ldrdeq	r2, [r1], -ip
   120d8:	andeq	r2, r1, r4, asr #7
   120dc:	muleq	r1, r0, r4
   120e0:	andeq	r2, r1, r0, asr r3
   120e4:	andeq	r2, r1, ip, lsr r3
   120e8:	andeq	r2, r1, r0, lsr r3
   120ec:	mov	r7, #1
   120f0:	b	11c80 <__assert_fail@plt+0xdc>
   120f4:	mov	r1, #0
   120f8:	mov	r2, #1048576	; 0x100000
   120fc:	mov	r3, #0
   12100:	str	r1, [r9]
   12104:	strd	r2, [r9, #8]
   12108:	b	11c80 <__assert_fail@plt+0xdc>
   1210c:	mov	r3, #1
   12110:	strb	r3, [r9, #39]	; 0x27
   12114:	b	11c80 <__assert_fail@plt+0xdc>
   12118:	mov	r1, #0
   1211c:	mov	r2, #1024	; 0x400
   12120:	mov	r3, #0
   12124:	str	r1, [r9]
   12128:	strd	r2, [r9, #8]
   1212c:	b	11c80 <__assert_fail@plt+0xdc>
   12130:	mov	r1, #176	; 0xb0
   12134:	mov	r2, #1
   12138:	mov	r3, #0
   1213c:	str	r1, [r9]
   12140:	strd	r2, [r9, #8]
   12144:	b	11c80 <__assert_fail@plt+0xdc>
   12148:	movw	r1, #11844	; 0x2e44
   1214c:	movt	r1, #3
   12150:	mov	r2, #0
   12154:	movw	r8, #16960	; 0x4240
   12158:	movt	r8, #4
   1215c:	add	r3, sp, #128	; 0x80
   12160:	str	r1, [sp]
   12164:	mov	r1, r2
   12168:	ldr	r0, [r8]
   1216c:	bl	2f368 <__assert_fail@plt+0x1d7c4>
   12170:	cmp	r0, #0
   12174:	bne	1249c <__assert_fail@plt+0x8f8>
   12178:	ldrd	r2, [sp, #128]	; 0x80
   1217c:	mov	r1, #0
   12180:	mvn	r0, #0
   12184:	cmp	r3, r1
   12188:	strd	r2, [sp, #48]	; 0x30
   1218c:	cmpeq	r2, r0
   12190:	bhi	1249c <__assert_fail@plt+0x8f8>
   12194:	mov	r2, #1
   12198:	movw	r3, #16844	; 0x41cc
   1219c:	movt	r3, #4
   121a0:	str	r2, [sp, #40]	; 0x28
   121a4:	ldr	r2, [sp, #48]	; 0x30
   121a8:	str	r2, [r3]
   121ac:	b	11c80 <__assert_fail@plt+0xdc>
   121b0:	mov	r3, #1
   121b4:	strb	r3, [r9, #38]	; 0x26
   121b8:	b	11c80 <__assert_fail@plt+0xdc>
   121bc:	mov	r3, #1
   121c0:	mov	r2, #0
   121c4:	mov	r0, #1
   121c8:	mov	r1, #0
   121cc:	str	r2, [r9]
   121d0:	strd	r0, [r9, #8]
   121d4:	strb	r3, [r9, #37]	; 0x25
   121d8:	b	11c80 <__assert_fail@plt+0xdc>
   121dc:	mov	r3, #1
   121e0:	strb	r3, [r9, #36]	; 0x24
   121e4:	b	11c80 <__assert_fail@plt+0xdc>
   121e8:	mov	r2, #10
   121ec:	movw	r8, #16960	; 0x4240
   121f0:	movt	r8, #4
   121f4:	movw	r0, #21276	; 0x531c
   121f8:	movt	r0, #1
   121fc:	mov	r3, #268435456	; 0x10000000
   12200:	str	r2, [sp]
   12204:	ldr	r2, [r8]
   12208:	ldr	r1, [r9, #32]
   1220c:	bl	1584c <__assert_fail@plt+0x3ca8>
   12210:	cmp	r0, #0
   12214:	beq	11c80 <__assert_fail@plt+0xdc>
   12218:	bl	119b8 <__errno_location@plt>
   1221c:	ldr	r3, [r0]
   12220:	mov	r0, #0
   12224:	mov	r1, #3
   12228:	ldr	r2, [r8]
   1222c:	str	r3, [sp, #48]	; 0x30
   12230:	str	r0, [sp, #60]	; 0x3c
   12234:	bl	1f588 <__assert_fail@plt+0xd9e4>
   12238:	mov	r3, r0
   1223c:	movw	r2, #11532	; 0x2d0c
   12240:	movt	r2, #3
   12244:	mov	r0, #0
   12248:	ldr	r1, [sp, #48]	; 0x30
   1224c:	bl	118bc <error@plt>
   12250:	b	11c80 <__assert_fail@plt+0xdc>
   12254:	mov	r3, #1
   12258:	strb	r3, [r9, #48]	; 0x30
   1225c:	b	11c80 <__assert_fail@plt+0xdc>
   12260:	mov	r3, #16
   12264:	str	r3, [sp, #32]
   12268:	b	11c80 <__assert_fail@plt+0xdc>
   1226c:	mov	r3, #2
   12270:	str	r3, [sp, #32]
   12274:	b	11c80 <__assert_fail@plt+0xdc>
   12278:	mov	r3, #17
   1227c:	str	r3, [sp, #32]
   12280:	b	11c80 <__assert_fail@plt+0xdc>
   12284:	ldr	r2, [pc, #2388]	; 12be0 <__assert_fail@plt+0x103c>
   12288:	movw	r8, #16960	; 0x4240
   1228c:	movt	r8, #4
   12290:	ldr	r0, [r8]
   12294:	sub	r1, r2, #8
   12298:	bl	1bc90 <__assert_fail@plt+0xa0ec>
   1229c:	cmp	r0, #0
   122a0:	beq	11c80 <__assert_fail@plt+0xdc>
   122a4:	ldr	ip, [r8]
   122a8:	mov	r2, #66	; 0x42
   122ac:	ldr	r3, [pc, #2344]	; 12bdc <__assert_fail@plt+0x1038>
   122b0:	ldr	r1, [sp, #116]	; 0x74
   122b4:	str	ip, [sp]
   122b8:	bl	2f2d8 <__assert_fail@plt+0x1d734>
   122bc:	mov	r3, #1
   122c0:	strb	r3, [r9, #28]
   122c4:	b	11c80 <__assert_fail@plt+0xdc>
   122c8:	movw	r2, #9984	; 0x2700
   122cc:	movt	r2, #3
   122d0:	movw	r3, #10000	; 0x2710
   122d4:	movt	r3, #3
   122d8:	movw	r1, #10012	; 0x271c
   122dc:	movt	r1, #3
   122e0:	mov	r4, #0
   122e4:	movw	r0, #16956	; 0x423c
   122e8:	movt	r0, #4
   122ec:	str	r2, [sp, #12]
   122f0:	movw	r2, #10028	; 0x272c
   122f4:	movt	r2, #3
   122f8:	stmib	sp, {r1, r3}
   122fc:	movw	r3, #16848	; 0x41d0
   12300:	movt	r3, #4
   12304:	movw	r1, #5900	; 0x170c
   12308:	movt	r1, #3
   1230c:	str	r2, [sp]
   12310:	movw	r2, #9644	; 0x25ac
   12314:	movt	r2, #3
   12318:	str	r4, [sp, #16]
   1231c:	ldr	r0, [r0]
   12320:	ldr	r3, [r3]
   12324:	bl	2df40 <__assert_fail@plt+0x1c39c>
   12328:	mov	r0, r4
   1232c:	bl	11970 <exit@plt>
   12330:	mov	r3, #1
   12334:	strb	r3, [r9, #16]
   12338:	b	11c80 <__assert_fail@plt+0xdc>
   1233c:	movw	r3, #16960	; 0x4240
   12340:	movt	r3, #4
   12344:	ldr	r3, [r3]
   12348:	str	r3, [r9, #56]	; 0x38
   1234c:	b	11c80 <__assert_fail@plt+0xdc>
   12350:	movw	r3, #16960	; 0x4240
   12354:	movt	r3, #4
   12358:	ldr	r1, [r3]
   1235c:	mov	r3, #1
   12360:	strb	r3, [r9, #17]
   12364:	cmp	r1, #0
   12368:	beq	123a8 <__assert_fail@plt+0x804>
   1236c:	movw	r0, #16852	; 0x41d4
   12370:	movt	r0, #4
   12374:	str	r3, [sp, #8]
   12378:	ldr	ip, [r0]
   1237c:	mov	r3, #4
   12380:	movw	r0, #9972	; 0x26f4
   12384:	movt	r0, #3
   12388:	ldr	r2, [pc, #2132]	; 12be4 <__assert_fail@plt+0x1040>
   1238c:	stm	sp, {r3, ip}
   12390:	ldr	r3, [sp, #44]	; 0x2c
   12394:	bl	14248 <__assert_fail@plt+0x26a4>
   12398:	movw	r3, #5280	; 0x14a0
   1239c:	movt	r3, #3
   123a0:	add	r0, r3, r0, lsl #2
   123a4:	ldr	r1, [r0, #472]	; 0x1d8
   123a8:	movw	r0, #9980	; 0x26fc
   123ac:	movt	r0, #3
   123b0:	str	r1, [r9, #52]	; 0x34
   123b4:	bl	118ec <getenv@plt>
   123b8:	bl	2d5e8 <__assert_fail@plt+0x1ba44>
   123bc:	str	r0, [r9, #24]
   123c0:	b	11c80 <__assert_fail@plt+0xdc>
   123c4:	mov	r1, #144	; 0x90
   123c8:	mov	r2, #1
   123cc:	mov	r3, #0
   123d0:	str	r1, [r9]
   123d4:	strd	r2, [r9, #8]
   123d8:	b	11c80 <__assert_fail@plt+0xdc>
   123dc:	movw	r3, #16960	; 0x4240
   123e0:	movt	r3, #4
   123e4:	ldr	r3, [r3]
   123e8:	str	r3, [sp, #28]
   123ec:	b	11c80 <__assert_fail@plt+0xdc>
   123f0:	movw	r3, #16960	; 0x4240
   123f4:	movt	r3, #4
   123f8:	ldr	r0, [r9, #32]
   123fc:	mov	r2, #268435456	; 0x10000000
   12400:	ldr	r1, [r3]
   12404:	bl	1531c <__assert_fail@plt+0x3778>
   12408:	b	11c80 <__assert_fail@plt+0xdc>
   1240c:	mov	r3, #1
   12410:	strb	r3, [r9, #37]	; 0x25
   12414:	b	11c80 <__assert_fail@plt+0xdc>
   12418:	mov	fp, #72	; 0x48
   1241c:	b	11c80 <__assert_fail@plt+0xdc>
   12420:	movw	r1, #9924	; 0x26c4
   12424:	movt	r1, #3
   12428:	ldr	r3, [pc, #1976]	; 12be8 <__assert_fail@plt+0x1044>
   1242c:	mov	r2, #0
   12430:	movw	r8, #16960	; 0x4240
   12434:	movt	r8, #4
   12438:	str	r1, [sp]
   1243c:	mov	r1, r2
   12440:	ldr	r0, [r8]
   12444:	bl	2e59c <__assert_fail@plt+0x1c9f8>
   12448:	subs	r1, r0, #0
   1244c:	bne	137b0 <__assert_fail@plt+0x1c0c>
   12450:	ldrd	r2, [r9, #40]	; 0x28
   12454:	orrs	r3, r2, r3
   12458:	bne	11c80 <__assert_fail@plt+0xdc>
   1245c:	ldr	r3, [r8]
   12460:	ldrb	r3, [r3]
   12464:	cmp	r3, #45	; 0x2d
   12468:	bne	11c80 <__assert_fail@plt+0xdc>
   1246c:	mov	r4, r1
   12470:	mov	r2, #5
   12474:	movw	r1, #9936	; 0x26d0
   12478:	movt	r1, #3
   1247c:	bl	117d8 <dcgettext@plt>
   12480:	mov	r2, r0
   12484:	mov	r1, r4
   12488:	mov	r0, #1
   1248c:	bl	118bc <error@plt>
   12490:	mov	r3, #0
   12494:	str	r3, [sp, #60]	; 0x3c
   12498:	b	11c80 <__assert_fail@plt+0xdc>
   1249c:	mov	r2, #5
   124a0:	movw	r1, #9896	; 0x26a8
   124a4:	movt	r1, #3
   124a8:	mov	r0, #0
   124ac:	bl	117d8 <dcgettext@plt>
   124b0:	mov	r2, r0
   124b4:	mov	r3, #0
   124b8:	ldr	r0, [r8]
   124bc:	str	r2, [sp, #48]	; 0x30
   124c0:	str	r3, [sp, #60]	; 0x3c
   124c4:	bl	1f760 <__assert_fail@plt+0xdbbc>
   124c8:	mov	r1, #0
   124cc:	mov	r3, r0
   124d0:	ldr	r2, [sp, #48]	; 0x30
   124d4:	mov	r0, r1
   124d8:	bl	118bc <error@plt>
   124dc:	b	11c80 <__assert_fail@plt+0xdc>
   124e0:	ldr	r3, [sp, #60]	; 0x3c
   124e4:	cmp	r3, #0
   124e8:	beq	1362c <__assert_fail@plt+0x1a88>
   124ec:	ldrb	r3, [r9, #36]	; 0x24
   124f0:	cmp	r3, #0
   124f4:	beq	12a38 <__assert_fail@plt+0xe94>
   124f8:	cmp	r7, #0
   124fc:	bne	13608 <__assert_fail@plt+0x1a64>
   12500:	ldrb	r3, [r9, #16]
   12504:	cmp	r3, #0
   12508:	beq	12524 <__assert_fail@plt+0x980>
   1250c:	ldrb	r3, [r9, #37]	; 0x25
   12510:	cmp	r3, #0
   12514:	bne	134a8 <__assert_fail@plt+0x1904>
   12518:	mov	r2, #1
   1251c:	mov	r3, #0
   12520:	strd	r2, [r9, #8]
   12524:	ldrb	r3, [r9, #17]
   12528:	cmp	r3, #0
   1252c:	beq	12554 <__assert_fail@plt+0x9b0>
   12530:	ldr	r4, [r9, #56]	; 0x38
   12534:	cmp	r4, #0
   12538:	beq	134d8 <__assert_fail@plt+0x1934>
   1253c:	ldr	r7, [r9, #56]	; 0x38
   12540:	ldrb	r3, [r7]
   12544:	cmp	r3, #43	; 0x2b
   12548:	bne	13264 <__assert_fail@plt+0x16c0>
   1254c:	add	r7, r7, #1
   12550:	str	r7, [r9, #20]
   12554:	ldr	r3, [sp, #28]
   12558:	movw	r4, #16936	; 0x4228
   1255c:	movt	r4, #4
   12560:	cmp	r3, #0
   12564:	ldr	r3, [r4]
   12568:	beq	13138 <__assert_fail@plt+0x1594>
   1256c:	cmp	r6, r3
   12570:	bgt	136a0 <__assert_fail@plt+0x1afc>
   12574:	movw	r1, #10428	; 0x28bc
   12578:	movt	r1, #3
   1257c:	ldr	r0, [sp, #28]
   12580:	bl	1170c <strcmp@plt>
   12584:	cmp	r0, #0
   12588:	movw	r4, #16952	; 0x4238
   1258c:	movt	r4, #4
   12590:	beq	125b0 <__assert_fail@plt+0xa0c>
   12594:	movw	r1, #13088	; 0x3320
   12598:	movt	r1, #3
   1259c:	ldr	r2, [r4]
   125a0:	ldr	r0, [sp, #28]
   125a4:	bl	17b94 <__assert_fail@plt+0x5ff0>
   125a8:	subs	r5, r0, #0
   125ac:	beq	13634 <__assert_fail@plt+0x1a90>
   125b0:	ldr	r0, [r4]
   125b4:	bl	1438c <__assert_fail@plt+0x27e8>
   125b8:	mov	r3, #1
   125bc:	str	r0, [sp, #48]	; 0x30
   125c0:	strb	r3, [r9, #60]	; 0x3c
   125c4:	ldr	r3, [sp, #48]	; 0x30
   125c8:	cmp	r3, #0
   125cc:	beq	135e0 <__assert_fail@plt+0x1a3c>
   125d0:	bl	147b8 <__assert_fail@plt+0x2c14>
   125d4:	cmp	r0, #0
   125d8:	str	r0, [r9, #64]	; 0x40
   125dc:	beq	135e0 <__assert_fail@plt+0x1a3c>
   125e0:	ldrb	r3, [r9, #39]	; 0x27
   125e4:	cmp	r3, #0
   125e8:	bne	125f8 <__assert_fail@plt+0xa54>
   125ec:	ldrb	r3, [r9, #60]	; 0x3c
   125f0:	cmp	r3, #0
   125f4:	bne	125fc <__assert_fail@plt+0xa58>
   125f8:	orr	fp, fp, #256	; 0x100
   125fc:	ldr	r3, [sp, #32]
   12600:	mov	r8, r9
   12604:	orr	r3, fp, r3
   12608:	str	r3, [sp, #92]	; 0x5c
   1260c:	movw	r3, #16844	; 0x41cc
   12610:	movt	r3, #4
   12614:	str	r3, [sp, #88]	; 0x58
   12618:	ldr	r3, [sp, #60]	; 0x3c
   1261c:	str	r3, [sp, #76]	; 0x4c
   12620:	mov	r1, sl
   12624:	ldr	r0, [sp, #48]	; 0x30
   12628:	bl	143cc <__assert_fail@plt+0x2828>
   1262c:	subs	r4, r0, #0
   12630:	beq	12c68 <__assert_fail@plt+0x10c4>
   12634:	ldr	r3, [sp, #28]
   12638:	cmp	r3, #0
   1263c:	beq	12b44 <__assert_fail@plt+0xfa0>
   12640:	movw	r1, #10428	; 0x28bc
   12644:	movt	r1, #3
   12648:	ldr	r0, [sp, #28]
   1264c:	bl	1170c <strcmp@plt>
   12650:	cmp	r0, #0
   12654:	bne	12670 <__assert_fail@plt+0xacc>
   12658:	movw	r1, #10428	; 0x28bc
   1265c:	movt	r1, #3
   12660:	mov	r0, r4
   12664:	bl	1170c <strcmp@plt>
   12668:	subs	r5, r0, #0
   1266c:	beq	12aa0 <__assert_fail@plt+0xefc>
   12670:	ldrb	r3, [r4]
   12674:	cmp	r3, #0
   12678:	beq	12ae4 <__assert_fail@plt+0xf40>
   1267c:	ldr	r3, [sp, #60]	; 0x3c
   12680:	mov	r2, #0
   12684:	str	r4, [r8, #68]	; 0x44
   12688:	ldr	r0, [pc, #1372]	; 12bec <__assert_fail@plt+0x1048>
   1268c:	ldr	r1, [sp, #92]	; 0x5c
   12690:	str	r3, [sp, #56]	; 0x38
   12694:	bl	2e50c <__assert_fail@plt+0x1c968>
   12698:	str	r0, [sp, #72]	; 0x48
   1269c:	b	12730 <__assert_fail@plt+0xb8c>
   126a0:	ldr	r0, [r8, #32]
   126a4:	ldr	r1, [sp, #68]	; 0x44
   126a8:	bl	15174 <__assert_fail@plt+0x35d0>
   126ac:	cmp	r0, #0
   126b0:	bne	12708 <__assert_fail@plt+0xb64>
   126b4:	cmp	r4, #11
   126b8:	beq	133a0 <__assert_fail@plt+0x17fc>
   126bc:	ldr	r3, [sp, #44]	; 0x2c
   126c0:	cmp	r3, #13
   126c4:	cmpne	r3, #10
   126c8:	moveq	r3, #1
   126cc:	movne	r3, #0
   126d0:	str	r3, [sp, #64]	; 0x40
   126d4:	beq	13358 <__assert_fail@plt+0x17b4>
   126d8:	ldr	r2, [sp, #72]	; 0x48
   126dc:	ldr	r3, [r2, #48]	; 0x30
   126e0:	tst	r3, #64	; 0x40
   126e4:	beq	12d70 <__assert_fail@plt+0x11cc>
   126e8:	ldr	r3, [r5, #48]	; 0x30
   126ec:	cmp	r3, #0
   126f0:	ble	12d70 <__assert_fail@plt+0x11cc>
   126f4:	ldrd	r0, [r2, #16]
   126f8:	ldrd	r2, [r5, #64]	; 0x40
   126fc:	cmp	r1, r3
   12700:	cmpeq	r0, r2
   12704:	beq	12d70 <__assert_fail@plt+0x11cc>
   12708:	ldr	r3, [sp, #44]	; 0x2c
   1270c:	cmp	r3, #1
   12710:	beq	130d4 <__assert_fail@plt+0x1530>
   12714:	ldr	r3, [sp, #60]	; 0x3c
   12718:	str	r3, [sp, #64]	; 0x40
   1271c:	ldr	r3, [sp, #56]	; 0x38
   12720:	ldr	r2, [sp, #64]	; 0x40
   12724:	and	r3, r3, r2
   12728:	uxtb	r3, r3
   1272c:	str	r3, [sp, #56]	; 0x38
   12730:	ldr	r0, [sp, #72]	; 0x48
   12734:	bl	19868 <__assert_fail@plt+0x7cc4>
   12738:	subs	r5, r0, #0
   1273c:	beq	13054 <__assert_fail@plt+0x14b0>
   12740:	ldrh	r2, [r5, #56]	; 0x38
   12744:	ldr	r3, [r5, #28]
   12748:	cmp	r2, #4
   1274c:	str	r2, [sp, #44]	; 0x2c
   12750:	str	r3, [sp, #68]	; 0x44
   12754:	beq	12c04 <__assert_fail@plt+0x1060>
   12758:	ldr	r4, [sp, #44]	; 0x2c
   1275c:	cmp	r4, #6
   12760:	bne	126a0 <__assert_fail@plt+0xafc>
   12764:	ldr	r3, [sp, #60]	; 0x3c
   12768:	str	r3, [sp, #64]	; 0x40
   1276c:	ldrb	r3, [r8, #37]	; 0x25
   12770:	cmp	r3, #0
   12774:	beq	12ba0 <__assert_fail@plt+0xffc>
   12778:	ldrd	r2, [r5, #112]	; 0x70
   1277c:	cmp	r2, #0
   12780:	strd	r2, [sp, #32]
   12784:	sbcs	r3, r3, #0
   12788:	bge	12798 <__assert_fail@plt+0xbf4>
   1278c:	mov	r2, #0
   12790:	mov	r3, #0
   12794:	strd	r2, [sp, #32]
   12798:	ldr	r3, [r8, #52]	; 0x34
   1279c:	cmp	r3, #0
   127a0:	bne	12b88 <__assert_fail@plt+0xfe4>
   127a4:	ldr	r9, [r5, #144]	; 0x90
   127a8:	ldr	fp, [r5, #148]	; 0x94
   127ac:	ldrd	r0, [sp, #32]
   127b0:	ldr	r3, [r8, #84]	; 0x54
   127b4:	ldr	r2, [r5, #48]	; 0x30
   127b8:	cmp	r3, #0
   127bc:	strd	r0, [sp, #128]	; 0x80
   127c0:	mov	r0, #1
   127c4:	mov	r1, #0
   127c8:	str	r2, [sp, #40]	; 0x28
   127cc:	strd	r0, [sp, #136]	; 0x88
   127d0:	str	r9, [sp, #144]	; 0x90
   127d4:	str	fp, [sp, #148]	; 0x94
   127d8:	beq	12bc0 <__assert_fail@plt+0x101c>
   127dc:	ldr	r2, [sp, #40]	; 0x28
   127e0:	ldr	r6, [r8, #76]	; 0x4c
   127e4:	cmp	r2, r6
   127e8:	beq	1285c <__assert_fail@plt+0xcb8>
   127ec:	bls	12dec <__assert_fail@plt+0x1248>
   127f0:	cmp	r2, r3
   127f4:	bcs	13230 <__assert_fail@plt+0x168c>
   127f8:	ldr	r3, [r8, #76]	; 0x4c
   127fc:	ldr	r5, [sp, #40]	; 0x28
   12800:	add	r2, r3, #1
   12804:	cmp	r5, r2
   12808:	bcc	1285c <__assert_fail@plt+0xcb8>
   1280c:	ldr	ip, [r8, #88]	; 0x58
   12810:	mov	lr, #48	; 0x30
   12814:	mov	r0, #-2147483648	; 0x80000000
   12818:	mvn	r1, #0
   1281c:	ldr	r4, [sp, #44]	; 0x2c
   12820:	mla	r3, lr, r3, ip
   12824:	mov	r6, #0
   12828:	mov	r7, #0
   1282c:	add	r2, r2, #1
   12830:	add	r3, r3, #48	; 0x30
   12834:	cmp	r5, r2
   12838:	strd	r6, [r3]
   1283c:	strd	r6, [r3, #8]
   12840:	strd	r0, [r3, #16]
   12844:	strd	r6, [r3, #24]
   12848:	strd	r6, [r3, #32]
   1284c:	strd	r0, [r3, #40]	; 0x28
   12850:	bcs	12824 <__assert_fail@plt+0xc80>
   12854:	str	r5, [sp, #40]	; 0x28
   12858:	str	r4, [sp, #44]	; 0x2c
   1285c:	ldrb	r3, [r8, #48]	; 0x30
   12860:	ldr	r2, [sp, #44]	; 0x2c
   12864:	ldr	r1, [sp, #40]	; 0x28
   12868:	cmp	r3, #0
   1286c:	bic	r2, r2, #2
   12870:	str	r2, [sp, #44]	; 0x2c
   12874:	str	r1, [r8, #76]	; 0x4c
   12878:	beq	12884 <__assert_fail@plt+0xce0>
   1287c:	cmp	r2, #4
   12880:	beq	12938 <__assert_fail@plt+0xd94>
   12884:	ldr	r3, [sp, #40]	; 0x28
   12888:	mov	r2, #0
   1288c:	ldr	r6, [r8, #88]	; 0x58
   12890:	add	ip, r3, r3, lsl #1
   12894:	mov	r3, #0
   12898:	lsl	ip, ip, #4
   1289c:	strd	r2, [sp, #80]	; 0x50
   128a0:	ldrd	r2, [sp, #32]
   128a4:	add	lr, r6, ip
   128a8:	ldrd	r4, [r6, ip]
   128ac:	adds	r0, r2, r4
   128b0:	adcs	r1, r3, r5
   128b4:	bcs	13690 <__assert_fail@plt+0x1aec>
   128b8:	ldrd	r2, [sp, #80]	; 0x50
   128bc:	orrs	r3, r2, r3
   128c0:	mov	r2, r0
   128c4:	mvnne	r2, #0
   128c8:	mov	r3, r1
   128cc:	ldr	r1, [lr, #12]
   128d0:	movne	r3, r2
   128d4:	add	r0, r6, ip
   128d8:	str	r2, [r6, ip]
   128dc:	str	r3, [r0, #4]
   128e0:	ldr	r3, [lr, #8]
   128e4:	ldr	ip, [lr, #16]
   128e8:	ldr	r0, [lr, #20]
   128ec:	adds	r3, r3, #1
   128f0:	adc	r1, r1, #0
   128f4:	cmp	r9, ip
   128f8:	str	r3, [lr, #8]
   128fc:	movle	r2, #0
   12900:	movgt	r2, #1
   12904:	str	r1, [lr, #12]
   12908:	cmp	r9, ip
   1290c:	rsbge	r2, r2, #0
   12910:	rsblt	r2, r2, #1
   12914:	cmp	fp, r0
   12918:	movle	r3, #0
   1291c:	movgt	r3, #1
   12920:	cmp	fp, r0
   12924:	rsbge	r0, r3, #0
   12928:	rsblt	r0, r3, #1
   1292c:	adds	r3, r0, r2, lsl #1
   12930:	strmi	r9, [lr, #16]
   12934:	strmi	fp, [lr, #20]
   12938:	ldrd	r0, [sp, #32]
   1293c:	mov	r6, #0
   12940:	mov	r7, #0
   12944:	ldrd	r2, [r8, #96]	; 0x60
   12948:	adds	r4, r0, r2
   1294c:	adcs	r5, r1, r3
   12950:	mov	r0, r4
   12954:	ldr	r1, [r8, #116]	; 0x74
   12958:	movcs	r6, #1
   1295c:	movcs	r7, #0
   12960:	orrs	r3, r6, r7
   12964:	ldr	r3, [r8, #104]	; 0x68
   12968:	mov	r2, r5
   1296c:	mvnne	r0, #0
   12970:	movne	r2, r0
   12974:	str	r0, [r8, #96]	; 0x60
   12978:	ldr	r0, [r8, #108]	; 0x6c
   1297c:	adds	r3, r3, #1
   12980:	strd	r2, [r8, #100]	; 0x64
   12984:	ldr	r2, [r8, #112]	; 0x70
   12988:	adc	r0, r0, #0
   1298c:	str	r0, [r8, #108]	; 0x6c
   12990:	cmp	r9, r2
   12994:	movle	r3, #0
   12998:	movgt	r3, #1
   1299c:	cmp	r9, r2
   129a0:	rsbge	r2, r3, #0
   129a4:	rsblt	r2, r3, #1
   129a8:	cmp	fp, r1
   129ac:	movle	r3, #0
   129b0:	movgt	r3, #1
   129b4:	cmp	fp, r1
   129b8:	rsbge	r3, r3, #0
   129bc:	rsblt	r3, r3, #1
   129c0:	adds	r3, r3, r2, lsl #1
   129c4:	ldr	r3, [sp, #44]	; 0x2c
   129c8:	strmi	r9, [r8, #112]	; 0x70
   129cc:	strmi	fp, [r8, #116]	; 0x74
   129d0:	cmp	r3, #4
   129d4:	beq	12a88 <__assert_fail@plt+0xee4>
   129d8:	ldrb	r3, [r8, #36]	; 0x24
   129dc:	cmp	r3, #0
   129e0:	bne	12a88 <__assert_fail@plt+0xee4>
   129e4:	ldr	r3, [sp, #40]	; 0x28
   129e8:	cmp	r3, #0
   129ec:	bne	1271c <__assert_fail@plt+0xb78>
   129f0:	ldrb	r3, [r8, #16]
   129f4:	cmp	r3, #0
   129f8:	ldrd	r2, [r8, #40]	; 0x28
   129fc:	ldrdne	r0, [sp, #136]	; 0x88
   12a00:	ldrdeq	r0, [sp, #128]	; 0x80
   12a04:	cmp	r2, #0
   12a08:	sbcs	ip, r3, #0
   12a0c:	blt	12c4c <__assert_fail@plt+0x10a8>
   12a10:	cmp	r1, r3
   12a14:	cmpeq	r0, r2
   12a18:	movcs	r3, #1
   12a1c:	movcc	r3, #0
   12a20:	cmp	r3, #0
   12a24:	beq	1271c <__assert_fail@plt+0xb78>
   12a28:	add	r0, sp, #128	; 0x80
   12a2c:	ldr	r1, [sp, #68]	; 0x44
   12a30:	bl	13940 <__assert_fail@plt+0x1d9c>
   12a34:	b	1271c <__assert_fail@plt+0xb78>
   12a38:	ldr	r3, [sp, #40]	; 0x28
   12a3c:	tst	r3, r7
   12a40:	beq	1379c <__assert_fail@plt+0x1bf8>
   12a44:	movw	r4, #16844	; 0x41cc
   12a48:	movt	r4, #4
   12a4c:	ldr	r7, [r4]
   12a50:	cmp	r7, #0
   12a54:	beq	13098 <__assert_fail@plt+0x14f4>
   12a58:	mov	r2, #5
   12a5c:	movw	r1, #10148	; 0x27a4
   12a60:	movt	r1, #3
   12a64:	mov	r0, #0
   12a68:	bl	117d8 <dcgettext@plt>
   12a6c:	mov	r1, #0
   12a70:	mov	r2, r0
   12a74:	mov	r3, r7
   12a78:	mov	r0, r1
   12a7c:	bl	118bc <error@plt>
   12a80:	mov	r0, #1
   12a84:	bl	13aa4 <__assert_fail@plt+0x1f00>
   12a88:	ldr	r2, [sp, #40]	; 0x28
   12a8c:	ldr	r3, [sp, #88]	; 0x58
   12a90:	ldr	r3, [r3]
   12a94:	cmp	r2, r3
   12a98:	bls	129f0 <__assert_fail@plt+0xe4c>
   12a9c:	b	129e4 <__assert_fail@plt+0xe40>
   12aa0:	mov	r2, #5
   12aa4:	movw	r1, #10528	; 0x2920
   12aa8:	movt	r1, #3
   12aac:	bl	117d8 <dcgettext@plt>
   12ab0:	mov	r6, r0
   12ab4:	mov	r1, r4
   12ab8:	mov	r0, #4
   12abc:	bl	1f4ac <__assert_fail@plt+0xd908>
   12ac0:	mov	r3, r0
   12ac4:	mov	r2, r6
   12ac8:	mov	r1, r5
   12acc:	mov	r0, r5
   12ad0:	bl	118bc <error@plt>
   12ad4:	ldrb	r3, [r4]
   12ad8:	cmp	r3, #0
   12adc:	strne	r5, [sp, #76]	; 0x4c
   12ae0:	bne	12620 <__assert_fail@plt+0xa7c>
   12ae4:	mov	r3, #0
   12ae8:	ldr	r0, [sp, #48]	; 0x30
   12aec:	str	r3, [sp, #76]	; 0x4c
   12af0:	bl	14480 <__assert_fail@plt+0x28dc>
   12af4:	mov	r4, r0
   12af8:	mov	r1, #3
   12afc:	ldr	r2, [sp, #28]
   12b00:	mov	r0, #0
   12b04:	bl	1f588 <__assert_fail@plt+0xd9e4>
   12b08:	mov	r5, r0
   12b0c:	mov	r2, #5
   12b10:	movw	r1, #10744	; 0x29f8
   12b14:	movt	r1, #3
   12b18:	mov	r0, #0
   12b1c:	bl	117d8 <dcgettext@plt>
   12b20:	mov	r1, #0
   12b24:	mov	r3, r5
   12b28:	str	r4, [sp]
   12b2c:	movw	r2, #10776	; 0x2a18
   12b30:	movt	r2, #3
   12b34:	str	r0, [sp, #4]
   12b38:	mov	r0, r1
   12b3c:	bl	118bc <error@plt>
   12b40:	b	12620 <__assert_fail@plt+0xa7c>
   12b44:	ldrb	r3, [r4]
   12b48:	cmp	r3, #0
   12b4c:	bne	1267c <__assert_fail@plt+0xad8>
   12b50:	ldr	r4, [sp, #28]
   12b54:	mov	r2, #5
   12b58:	movw	r1, #10744	; 0x29f8
   12b5c:	movt	r1, #3
   12b60:	mov	r0, r4
   12b64:	bl	117d8 <dcgettext@plt>
   12b68:	mov	r3, r0
   12b6c:	movw	r2, #11532	; 0x2d0c
   12b70:	movt	r2, #3
   12b74:	mov	r1, r4
   12b78:	str	r4, [sp, #76]	; 0x4c
   12b7c:	mov	r0, r4
   12b80:	bl	118bc <error@plt>
   12b84:	b	12620 <__assert_fail@plt+0xa7c>
   12b88:	cmp	r3, #2
   12b8c:	ldreq	r9, [r5, #136]	; 0x88
   12b90:	ldreq	fp, [r5, #140]	; 0x8c
   12b94:	ldrne	r9, [r5, #152]	; 0x98
   12b98:	ldrne	fp, [r5, #156]	; 0x9c
   12b9c:	b	127ac <__assert_fail@plt+0xc08>
   12ba0:	ldr	r3, [r5, #128]	; 0x80
   12ba4:	ldr	r2, [r5, #132]	; 0x84
   12ba8:	lsl	r2, r2, #9
   12bac:	orr	r2, r2, r3, lsr #23
   12bb0:	lsl	r3, r3, #9
   12bb4:	str	r3, [sp, #32]
   12bb8:	str	r2, [sp, #36]	; 0x24
   12bbc:	b	12798 <__assert_fail@plt+0xbf4>
   12bc0:	add	r3, r2, #10
   12bc4:	mov	r1, #48	; 0x30
   12bc8:	mov	r0, r3
   12bcc:	str	r3, [r8, #84]	; 0x54
   12bd0:	bl	2e378 <__assert_fail@plt+0x1c7d4>
   12bd4:	str	r0, [r8, #88]	; 0x58
   12bd8:	b	1285c <__assert_fail@plt+0xcb8>
   12bdc:	ldrdeq	r1, [r3], -r8
   12be0:	andeq	r4, r4, r0, asr r2
   12be4:	andeq	r1, r3, ip, lsl #13
   12be8:	andeq	r4, r4, r0, ror r2
   12bec:	andeq	r4, r4, ip, lsl #5
   12bf0:	andeq	r1, r3, r8, asr #13
   12bf4:	andeq	r4, r4, r8, lsr #5
   12bf8:	andeq	r1, r3, r4, lsr #13
   12bfc:	ldrdeq	r1, [r3], -r0
   12c00:	ldrdeq	r1, [r3], -r8
   12c04:	ldr	r6, [r5, #32]
   12c08:	mov	r2, #5
   12c0c:	movw	r1, #10612	; 0x2974
   12c10:	movt	r1, #3
   12c14:	mov	r0, #0
   12c18:	bl	117d8 <dcgettext@plt>
   12c1c:	mov	r3, #0
   12c20:	mov	r7, r0
   12c24:	ldr	r0, [sp, #44]	; 0x2c
   12c28:	ldr	r1, [sp, #68]	; 0x44
   12c2c:	str	r3, [sp, #64]	; 0x40
   12c30:	bl	1f4ac <__assert_fail@plt+0xd908>
   12c34:	mov	r3, r0
   12c38:	mov	r2, r7
   12c3c:	mov	r1, r6
   12c40:	mov	r0, #0
   12c44:	bl	118bc <error@plt>
   12c48:	b	1276c <__assert_fail@plt+0xbc8>
   12c4c:	rsbs	r2, r2, #0
   12c50:	rsc	r3, r3, #0
   12c54:	cmp	r3, r1
   12c58:	cmpeq	r2, r0
   12c5c:	movcs	r3, #1
   12c60:	movcc	r3, #0
   12c64:	b	12a20 <__assert_fail@plt+0xe7c>
   12c68:	ldr	r3, [sp, #116]	; 0x74
   12c6c:	mov	r9, r8
   12c70:	cmp	r3, #3
   12c74:	beq	135e0 <__assert_fail@plt+0x1a3c>
   12c78:	cmp	r3, #4
   12c7c:	bne	12d4c <__assert_fail@plt+0x11a8>
   12c80:	bl	119b8 <__errno_location@plt>
   12c84:	ldr	r5, [r0]
   12c88:	mov	r2, #5
   12c8c:	movw	r1, #10460	; 0x28dc
   12c90:	movt	r1, #3
   12c94:	mov	r0, r4
   12c98:	bl	117d8 <dcgettext@plt>
   12c9c:	mov	r6, r0
   12ca0:	mov	r1, #3
   12ca4:	ldr	r2, [sp, #28]
   12ca8:	mov	r0, r4
   12cac:	bl	1f588 <__assert_fail@plt+0xd9e4>
   12cb0:	mov	r3, r0
   12cb4:	mov	r2, r6
   12cb8:	mov	r1, r5
   12cbc:	mov	r0, r4
   12cc0:	bl	118bc <error@plt>
   12cc4:	str	r4, [sp, #76]	; 0x4c
   12cc8:	ldr	r0, [sp, #48]	; 0x30
   12ccc:	bl	144a8 <__assert_fail@plt+0x2904>
   12cd0:	ldr	r0, [r9, #64]	; 0x40
   12cd4:	bl	1483c <__assert_fail@plt+0x2c98>
   12cd8:	ldr	r0, [r9, #80]	; 0x50
   12cdc:	cmp	r0, #0
   12ce0:	beq	12ce8 <__assert_fail@plt+0x1144>
   12ce4:	bl	1483c <__assert_fail@plt+0x2c98>
   12ce8:	ldr	r3, [sp, #28]
   12cec:	cmp	r3, #0
   12cf0:	beq	12d18 <__assert_fail@plt+0x1174>
   12cf4:	movw	r3, #16952	; 0x4238
   12cf8:	movt	r3, #4
   12cfc:	ldr	r0, [r3]
   12d00:	ldr	r3, [r0]
   12d04:	tst	r3, #32
   12d08:	beq	13348 <__assert_fail@plt+0x17a4>
   12d0c:	ldr	r3, [sp, #76]	; 0x4c
   12d10:	cmp	r3, #0
   12d14:	bne	13734 <__assert_fail@plt+0x1b90>
   12d18:	ldrb	r3, [r9, #38]	; 0x26
   12d1c:	cmp	r3, #0
   12d20:	bne	13114 <__assert_fail@plt+0x1570>
   12d24:	ldr	r3, [sp, #76]	; 0x4c
   12d28:	eor	r0, r3, #1
   12d2c:	uxtb	r0, r0
   12d30:	add	sp, sp, #236	; 0xec
   12d34:	ldrd	r4, [sp]
   12d38:	ldrd	r6, [sp, #8]
   12d3c:	ldrd	r8, [sp, #16]
   12d40:	ldrd	sl, [sp, #24]
   12d44:	add	sp, sp, #32
   12d48:	pop	{pc}		; (ldr pc, [sp], #4)
   12d4c:	cmp	r3, #2
   12d50:	beq	12cc8 <__assert_fail@plt+0x1124>
   12d54:	movw	r1, #10476	; 0x28ec
   12d58:	movt	r1, #3
   12d5c:	ldr	r3, [pc, #-372]	; 12bf0 <__assert_fail@plt+0x104c>
   12d60:	movw	r0, #10488	; 0x28f8
   12d64:	movt	r0, #3
   12d68:	movw	r2, #1081	; 0x439
   12d6c:	bl	11ba4 <__assert_fail@plt>
   12d70:	ldrb	r3, [r8, #39]	; 0x27
   12d74:	cmp	r3, #0
   12d78:	bne	12dc4 <__assert_fail@plt+0x1220>
   12d7c:	ldrb	r3, [r8, #60]	; 0x3c
   12d80:	cmp	r3, #0
   12d84:	bne	12da4 <__assert_fail@plt+0x1200>
   12d88:	ldr	r3, [r5, #80]	; 0x50
   12d8c:	and	r3, r3, #61440	; 0xf000
   12d90:	cmp	r3, #16384	; 0x4000
   12d94:	beq	12dc4 <__assert_fail@plt+0x1220>
   12d98:	ldr	r3, [r5, #84]	; 0x54
   12d9c:	cmp	r3, #1
   12da0:	bls	12dc4 <__assert_fail@plt+0x1220>
   12da4:	ldrd	r2, [r5, #160]	; 0xa0
   12da8:	ldr	r0, [r8, #64]	; 0x40
   12dac:	strd	r2, [sp]
   12db0:	ldrd	r2, [r5, #64]	; 0x40
   12db4:	bl	1487c <__assert_fail@plt+0x2cd8>
   12db8:	cmp	r0, #0
   12dbc:	blt	135e0 <__assert_fail@plt+0x1a3c>
   12dc0:	beq	12708 <__assert_fail@plt+0xb64>
   12dc4:	ldr	r3, [sp, #44]	; 0x2c
   12dc8:	cmp	r3, #2
   12dcc:	beq	13400 <__assert_fail@plt+0x185c>
   12dd0:	cmp	r3, #7
   12dd4:	beq	133d0 <__assert_fail@plt+0x182c>
   12dd8:	cmp	r3, #1
   12ddc:	ldr	r3, [sp, #60]	; 0x3c
   12de0:	str	r3, [sp, #64]	; 0x40
   12de4:	bne	1276c <__assert_fail@plt+0xbc8>
   12de8:	b	1271c <__assert_fail@plt+0xb78>
   12dec:	ldr	r2, [sp, #40]	; 0x28
   12df0:	sub	r3, r6, #1
   12df4:	cmp	r2, r3
   12df8:	bne	13718 <__assert_fail@plt+0x1b74>
   12dfc:	mov	r1, #48	; 0x30
   12e00:	mov	r2, #0
   12e04:	ldr	lr, [r8, #88]	; 0x58
   12e08:	mov	r3, #0
   12e0c:	strd	r2, [sp, #96]	; 0x60
   12e10:	mul	r3, r1, r6
   12e14:	str	r3, [sp, #80]	; 0x50
   12e18:	add	ip, lr, r3
   12e1c:	ldrd	r2, [sp, #32]
   12e20:	ldr	r1, [sp, #80]	; 0x50
   12e24:	ldrd	r4, [lr, r1]
   12e28:	adds	r0, r2, r4
   12e2c:	adcs	r1, r3, r5
   12e30:	bcs	1378c <__assert_fail@plt+0x1be8>
   12e34:	ldrd	r2, [sp, #96]	; 0x60
   12e38:	mov	r4, r0
   12e3c:	mov	r5, r1
   12e40:	orrs	r3, r2, r3
   12e44:	beq	12e58 <__assert_fail@plt+0x12b4>
   12e48:	mvn	r2, #0
   12e4c:	mvn	r3, #0
   12e50:	mov	r4, r2
   12e54:	mov	r5, r3
   12e58:	ldr	r1, [ip, #8]
   12e5c:	mov	r2, r4
   12e60:	mov	r3, r5
   12e64:	ldr	r0, [ip, #12]
   12e68:	strd	r2, [sp, #128]	; 0x80
   12e6c:	adds	r1, r1, #1
   12e70:	adc	r0, r0, #0
   12e74:	str	r1, [sp, #136]	; 0x88
   12e78:	str	r0, [sp, #140]	; 0x8c
   12e7c:	ldr	r3, [ip, #16]
   12e80:	ldr	r7, [ip, #20]
   12e84:	cmp	r9, r3
   12e88:	movge	r2, #0
   12e8c:	movlt	r2, #1
   12e90:	cmp	r9, r3
   12e94:	rsble	r2, r2, #0
   12e98:	rsbgt	r2, r2, #1
   12e9c:	cmp	fp, r7
   12ea0:	movge	r3, #0
   12ea4:	movlt	r3, #1
   12ea8:	cmp	fp, r7
   12eac:	rsble	r3, r3, #0
   12eb0:	rsbgt	r3, r3, #1
   12eb4:	adds	r3, r3, r2, lsl #1
   12eb8:	ldrdmi	r2, [ip, #16]
   12ebc:	strdmi	r2, [sp, #144]	; 0x90
   12ec0:	ldrb	r3, [r8, #48]	; 0x30
   12ec4:	cmp	r3, #0
   12ec8:	beq	13178 <__assert_fail@plt+0x15d4>
   12ecc:	ldr	r0, [sp, #40]	; 0x28
   12ed0:	mov	r1, #48	; 0x30
   12ed4:	mov	r2, #0
   12ed8:	ldr	r3, [sp, #80]	; 0x50
   12edc:	ldrd	r6, [lr, r3]
   12ee0:	mla	lr, r1, r0, lr
   12ee4:	mov	r3, #0
   12ee8:	ldrd	r4, [lr, #24]
   12eec:	adds	r0, r4, r6
   12ef0:	adcs	r1, r5, r7
   12ef4:	movcs	r2, #1
   12ef8:	movcs	r3, #0
   12efc:	orrs	r3, r2, r3
   12f00:	strd	r0, [sp, #80]	; 0x50
   12f04:	beq	12f14 <__assert_fail@plt+0x1370>
   12f08:	mvn	r2, #0
   12f0c:	mvn	r3, #0
   12f10:	strd	r2, [sp, #80]	; 0x50
   12f14:	ldr	r2, [ip, #8]
   12f18:	ldr	r3, [lr, #32]
   12f1c:	ldrd	r0, [sp, #80]	; 0x50
   12f20:	ldr	r7, [lr, #40]	; 0x28
   12f24:	adds	r3, r3, r2
   12f28:	ldr	r6, [lr, #44]	; 0x2c
   12f2c:	strd	r0, [lr, #24]
   12f30:	str	r3, [sp, #104]	; 0x68
   12f34:	ldr	r0, [ip, #12]
   12f38:	str	r3, [lr, #32]
   12f3c:	ldr	r3, [lr, #36]	; 0x24
   12f40:	adc	r3, r3, r0
   12f44:	str	r3, [lr, #36]	; 0x24
   12f48:	str	r3, [sp, #108]	; 0x6c
   12f4c:	ldr	r3, [ip, #16]
   12f50:	ldr	r1, [ip, #20]
   12f54:	cmp	r7, r3
   12f58:	movge	r2, #0
   12f5c:	movlt	r2, #1
   12f60:	cmp	r7, r3
   12f64:	rsble	r2, r2, #0
   12f68:	rsbgt	r2, r2, #1
   12f6c:	ldr	r3, [ip, #20]
   12f70:	cmp	r6, r3
   12f74:	movge	r3, #0
   12f78:	movlt	r3, #1
   12f7c:	cmp	r6, r1
   12f80:	rsble	r3, r3, #0
   12f84:	rsbgt	r3, r3, #1
   12f88:	adds	r3, r3, r2, lsl #1
   12f8c:	bpl	12fa4 <__assert_fail@plt+0x1400>
   12f90:	ldr	r3, [ip, #16]
   12f94:	mov	r6, r1
   12f98:	mov	r7, r3
   12f9c:	str	r3, [lr, #40]	; 0x28
   12fa0:	str	r1, [lr, #44]	; 0x2c
   12fa4:	ldrd	r4, [ip, #24]
   12fa8:	mov	r2, #0
   12fac:	mov	r3, #0
   12fb0:	ldrd	r0, [sp, #80]	; 0x50
   12fb4:	strd	r2, [sp, #96]	; 0x60
   12fb8:	adds	r2, r4, r0
   12fbc:	adcs	r3, r5, r1
   12fc0:	bcs	1377c <__assert_fail@plt+0x1bd8>
   12fc4:	ldrd	r0, [sp, #96]	; 0x60
   12fc8:	orrs	r1, r0, r1
   12fcc:	mov	r1, r2
   12fd0:	mov	r2, r3
   12fd4:	beq	12fe4 <__assert_fail@plt+0x1440>
   12fd8:	mvn	r3, #0
   12fdc:	mov	r1, r3
   12fe0:	mov	r2, r3
   12fe4:	mov	r3, r1
   12fe8:	str	r2, [lr, #28]
   12fec:	ldr	r2, [ip, #32]
   12ff0:	str	r3, [lr, #24]
   12ff4:	ldr	r1, [sp, #104]	; 0x68
   12ff8:	ldr	r3, [ip, #36]	; 0x24
   12ffc:	adds	r2, r2, r1
   13000:	ldr	r1, [sp, #108]	; 0x6c
   13004:	adc	r3, r3, r1
   13008:	strd	r2, [lr, #32]
   1300c:	ldr	r1, [ip, #40]	; 0x28
   13010:	ldr	r2, [ip, #44]	; 0x2c
   13014:	cmp	r7, r1
   13018:	movge	r3, #0
   1301c:	movlt	r3, #1
   13020:	cmp	r7, r1
   13024:	rsble	r7, r3, #0
   13028:	rsbgt	r7, r3, #1
   1302c:	cmp	r6, r2
   13030:	movge	r3, #0
   13034:	movlt	r3, #1
   13038:	cmp	r6, r2
   1303c:	rsble	r6, r3, #0
   13040:	rsbgt	r6, r3, #1
   13044:	adds	r3, r6, r7, lsl #1
   13048:	ldrdmi	r2, [ip, #40]	; 0x28
   1304c:	strdmi	r2, [lr, #40]	; 0x28
   13050:	b	1285c <__assert_fail@plt+0xcb8>
   13054:	bl	119b8 <__errno_location@plt>
   13058:	ldr	r6, [r0]
   1305c:	mov	r4, r0
   13060:	cmp	r6, #0
   13064:	bne	13300 <__assert_fail@plt+0x175c>
   13068:	mov	r5, #0
   1306c:	ldr	r0, [sp, #72]	; 0x48
   13070:	str	r5, [r8, #76]	; 0x4c
   13074:	bl	196dc <__assert_fail@plt+0x7b38>
   13078:	cmp	r0, r5
   1307c:	bne	132d0 <__assert_fail@plt+0x172c>
   13080:	ldr	r3, [sp, #56]	; 0x38
   13084:	ldr	fp, [sp, #76]	; 0x4c
   13088:	and	fp, fp, r3
   1308c:	uxtb	r3, fp
   13090:	str	r3, [sp, #76]	; 0x4c
   13094:	b	12620 <__assert_fail@plt+0xa7c>
   13098:	mov	r2, #5
   1309c:	mov	r0, r7
   130a0:	movw	r1, #10092	; 0x276c
   130a4:	movt	r1, #3
   130a8:	bl	117d8 <dcgettext@plt>
   130ac:	mov	r2, r0
   130b0:	mov	r1, r7
   130b4:	mov	r0, r7
   130b8:	bl	118bc <error@plt>
   130bc:	ldr	r7, [r4]
   130c0:	cmp	r7, #0
   130c4:	bne	12a58 <__assert_fail@plt+0xeb4>
   130c8:	mov	r3, #0
   130cc:	str	r3, [r4]
   130d0:	b	12500 <__assert_fail@plt+0x95c>
   130d4:	ldr	r4, [sp, #72]	; 0x48
   130d8:	mov	r2, #4
   130dc:	mov	r1, r5
   130e0:	mov	r0, r4
   130e4:	bl	19f1c <__assert_fail@plt+0x8378>
   130e8:	mov	r0, r4
   130ec:	bl	19868 <__assert_fail@plt+0x7cc4>
   130f0:	cmp	r5, r0
   130f4:	beq	12714 <__assert_fail@plt+0xb70>
   130f8:	movw	r1, #10476	; 0x28ec
   130fc:	movt	r1, #3
   13100:	ldr	r3, [pc, #-1292]	; 12bfc <__assert_fail@plt+0x1058>
   13104:	movw	r0, #10640	; 0x2990
   13108:	movt	r0, #3
   1310c:	mov	r2, #560	; 0x230
   13110:	bl	11ba4 <__assert_fail@plt>
   13114:	mov	r2, #5
   13118:	movw	r1, #10736	; 0x29f0
   1311c:	movt	r1, #3
   13120:	mov	r0, #0
   13124:	bl	117d8 <dcgettext@plt>
   13128:	mov	r1, r0
   1312c:	ldr	r0, [pc, #-1344]	; 12bf4 <__assert_fail@plt+0x1050>
   13130:	bl	13940 <__assert_fail@plt+0x1d9c>
   13134:	b	12d24 <__assert_fail@plt+0x1180>
   13138:	cmp	r6, r3
   1313c:	addgt	r0, r5, r3, lsl #2
   13140:	addle	r0, sp, #120	; 0x78
   13144:	bl	14354 <__assert_fail@plt+0x27b0>
   13148:	ldr	r3, [sp, #32]
   1314c:	str	r0, [sp, #48]	; 0x30
   13150:	ldr	r2, [r4]
   13154:	sub	r3, r3, #2
   13158:	clz	r3, r3
   1315c:	lsr	r3, r3, #5
   13160:	add	r2, r2, #1
   13164:	cmp	r2, r6
   13168:	movge	r6, r3
   1316c:	orrlt	r6, r3, #1
   13170:	strb	r6, [r9, #60]	; 0x3c
   13174:	b	125c4 <__assert_fail@plt+0xa20>
   13178:	mov	r2, #0
   1317c:	mov	r3, #0
   13180:	strd	r2, [sp, #96]	; 0x60
   13184:	mov	r2, r4
   13188:	mov	r3, r5
   1318c:	ldrd	r4, [ip, #24]
   13190:	adds	r6, r2, r4
   13194:	adcs	r7, r3, r5
   13198:	mov	r4, r6
   1319c:	mov	r5, r7
   131a0:	bcs	1376c <__assert_fail@plt+0x1bc8>
   131a4:	ldrd	r2, [sp, #96]	; 0x60
   131a8:	mov	r7, r5
   131ac:	orrs	r3, r2, r3
   131b0:	mov	r2, r4
   131b4:	ldr	r3, [ip, #32]
   131b8:	mvnne	r2, #0
   131bc:	movne	r7, r2
   131c0:	str	r2, [sp, #128]	; 0x80
   131c4:	ldr	r2, [ip, #36]	; 0x24
   131c8:	adds	r3, r3, r1
   131cc:	str	r7, [sp, #132]	; 0x84
   131d0:	ldr	r7, [sp, #144]	; 0x90
   131d4:	str	r3, [sp, #136]	; 0x88
   131d8:	adc	r2, r2, r0
   131dc:	ldr	r0, [sp, #148]	; 0x94
   131e0:	str	r2, [sp, #140]	; 0x8c
   131e4:	ldr	r3, [ip, #40]	; 0x28
   131e8:	ldr	r1, [ip, #44]	; 0x2c
   131ec:	cmp	r7, r3
   131f0:	movge	r2, #0
   131f4:	movlt	r2, #1
   131f8:	cmp	r7, r3
   131fc:	rsble	r2, r2, #0
   13200:	rsbgt	r2, r2, #1
   13204:	ldr	r3, [sp, #148]	; 0x94
   13208:	cmp	r3, r1
   1320c:	movge	r3, #0
   13210:	movlt	r3, #1
   13214:	cmp	r0, r1
   13218:	rsble	r3, r3, #0
   1321c:	rsbgt	r3, r3, #1
   13220:	adds	r3, r3, r2, lsl #1
   13224:	ldrdmi	r2, [ip, #40]	; 0x28
   13228:	strdmi	r2, [sp, #144]	; 0x90
   1322c:	b	12ecc <__assert_fail@plt+0x1328>
   13230:	ldr	r4, [sp, #40]	; 0x28
   13234:	mov	r2, #96	; 0x60
   13238:	ldr	r0, [r8, #88]	; 0x58
   1323c:	mov	r1, r4
   13240:	bl	2e134 <__assert_fail@plt+0x1c590>
   13244:	lsl	r3, r4, #1
   13248:	str	r3, [r8, #84]	; 0x54
   1324c:	str	r0, [r8, #88]	; 0x58
   13250:	b	127f8 <__assert_fail@plt+0xc54>
   13254:	movw	r3, #9816	; 0x2658
   13258:	movt	r3, #3
   1325c:	mov	r7, r3
   13260:	str	r3, [r9, #56]	; 0x38
   13264:	movw	r3, #16852	; 0x41d4
   13268:	movt	r3, #4
   1326c:	ldr	ip, [r3]
   13270:	mov	r2, #1
   13274:	mov	r0, #4
   13278:	movw	r4, #5280	; 0x14a0
   1327c:	movt	r4, #3
   13280:	add	r3, r4, #524	; 0x20c
   13284:	mov	r1, r7
   13288:	stm	sp, {r0, ip}
   1328c:	movw	r0, #10292	; 0x2834
   13290:	movt	r0, #3
   13294:	str	r2, [sp, #8]
   13298:	add	r2, r4, #536	; 0x218
   1329c:	bl	14248 <__assert_fail@plt+0x26a4>
   132a0:	add	r0, r4, r0, lsl #2
   132a4:	ldr	r3, [r0, #524]	; 0x20c
   132a8:	cmp	r3, #1
   132ac:	beq	13554 <__assert_fail@plt+0x19b0>
   132b0:	cmp	r3, #0
   132b4:	beq	13544 <__assert_fail@plt+0x19a0>
   132b8:	cmp	r3, #2
   132bc:	bne	12554 <__assert_fail@plt+0x9b0>
   132c0:	movw	r3, #10344	; 0x2868
   132c4:	movt	r3, #3
   132c8:	str	r3, [r9, #20]
   132cc:	b	12554 <__assert_fail@plt+0x9b0>
   132d0:	ldr	r4, [r4]
   132d4:	mov	r2, #5
   132d8:	mov	r0, r5
   132dc:	movw	r1, #10696	; 0x29c8
   132e0:	movt	r1, #3
   132e4:	bl	117d8 <dcgettext@plt>
   132e8:	mov	r2, r0
   132ec:	mov	r0, r5
   132f0:	str	r5, [sp, #56]	; 0x38
   132f4:	mov	r1, r4
   132f8:	bl	118bc <error@plt>
   132fc:	b	13080 <__assert_fail@plt+0x14dc>
   13300:	mov	r2, #5
   13304:	mov	r0, r5
   13308:	movw	r1, #10592	; 0x2960
   1330c:	movt	r1, #3
   13310:	bl	117d8 <dcgettext@plt>
   13314:	ldr	r3, [sp, #72]	; 0x48
   13318:	mov	r7, r0
   1331c:	mov	r1, #3
   13320:	mov	r0, r5
   13324:	str	r5, [sp, #56]	; 0x38
   13328:	ldr	r2, [r3, #24]
   1332c:	bl	1f588 <__assert_fail@plt+0xd9e4>
   13330:	mov	r3, r0
   13334:	mov	r2, r7
   13338:	mov	r1, r6
   1333c:	mov	r0, r5
   13340:	bl	118bc <error@plt>
   13344:	b	13068 <__assert_fail@plt+0x14c4>
   13348:	bl	15940 <__assert_fail@plt+0x3d9c>
   1334c:	cmp	r0, #0
   13350:	bne	12d0c <__assert_fail@plt+0x1168>
   13354:	b	12d18 <__assert_fail@plt+0x1174>
   13358:	ldr	r4, [r5, #32]
   1335c:	mov	r2, #5
   13360:	movw	r1, #10652	; 0x299c
   13364:	movt	r1, #3
   13368:	mov	r0, #0
   1336c:	bl	117d8 <dcgettext@plt>
   13370:	mov	r3, #0
   13374:	mov	r5, r0
   13378:	ldr	r1, [sp, #68]	; 0x44
   1337c:	mov	r0, #4
   13380:	str	r3, [sp, #64]	; 0x40
   13384:	bl	1f4ac <__assert_fail@plt+0xd908>
   13388:	mov	r3, r0
   1338c:	mov	r2, r5
   13390:	mov	r1, r4
   13394:	mov	r0, #0
   13398:	bl	118bc <error@plt>
   1339c:	b	1271c <__assert_fail@plt+0xb78>
   133a0:	ldr	r4, [sp, #72]	; 0x48
   133a4:	mov	r2, #1
   133a8:	mov	r1, r5
   133ac:	mov	r0, r4
   133b0:	bl	19f1c <__assert_fail@plt+0x8378>
   133b4:	mov	r0, r4
   133b8:	bl	19868 <__assert_fail@plt+0x7cc4>
   133bc:	cmp	r5, r0
   133c0:	bne	13674 <__assert_fail@plt+0x1ad0>
   133c4:	ldrh	r3, [r5, #56]	; 0x38
   133c8:	str	r3, [sp, #44]	; 0x2c
   133cc:	b	126bc <__assert_fail@plt+0xb18>
   133d0:	ldr	r6, [r5, #32]
   133d4:	mov	r1, #3
   133d8:	mov	r0, #0
   133dc:	ldr	r2, [sp, #68]	; 0x44
   133e0:	bl	1f588 <__assert_fail@plt+0xd9e4>
   133e4:	mov	r3, r0
   133e8:	movw	r2, #11532	; 0x2d0c
   133ec:	movt	r2, #3
   133f0:	mov	r0, #0
   133f4:	mov	r1, r6
   133f8:	bl	118bc <error@plt>
   133fc:	b	1276c <__assert_fail@plt+0xbc8>
   13400:	mov	r1, r5
   13404:	ldr	r0, [sp, #72]	; 0x48
   13408:	bl	2e564 <__assert_fail@plt+0x1c9c0>
   1340c:	cmp	r0, #0
   13410:	beq	12714 <__assert_fail@plt+0xb70>
   13414:	ldr	r6, [r8, #80]	; 0x50
   13418:	ldr	r4, [r5]
   1341c:	cmp	r6, #0
   13420:	bne	13448 <__assert_fail@plt+0x18a4>
   13424:	b	13564 <__assert_fail@plt+0x19c0>
   13428:	ldrd	r2, [r5, #160]	; 0xa0
   1342c:	ldr	r0, [r8, #80]	; 0x50
   13430:	strd	r2, [sp]
   13434:	ldrd	r2, [r5, #64]	; 0x40
   13438:	bl	148f8 <__assert_fail@plt+0x2d54>
   1343c:	cmp	r0, #0
   13440:	bgt	12714 <__assert_fail@plt+0xb70>
   13444:	ldr	r5, [r5, #4]
   13448:	subs	r3, r4, r5
   1344c:	movne	r3, #1
   13450:	cmp	r5, #0
   13454:	moveq	r3, #0
   13458:	cmp	r3, #0
   1345c:	bne	13428 <__assert_fail@plt+0x1884>
   13460:	mov	r0, r3
   13464:	mov	r2, #5
   13468:	str	r3, [sp, #64]	; 0x40
   1346c:	movw	r1, #10788	; 0x2a24
   13470:	movt	r1, #3
   13474:	mov	r5, r3
   13478:	bl	117d8 <dcgettext@plt>
   1347c:	mov	r4, r0
   13480:	mov	r1, #3
   13484:	ldr	r2, [sp, #68]	; 0x44
   13488:	mov	r0, r5
   1348c:	bl	1f588 <__assert_fail@plt+0xd9e4>
   13490:	mov	r3, r0
   13494:	mov	r2, r4
   13498:	mov	r1, r5
   1349c:	mov	r0, r5
   134a0:	bl	118bc <error@plt>
   134a4:	b	1271c <__assert_fail@plt+0xb78>
   134a8:	mov	r2, #5
   134ac:	movw	r1, #10200	; 0x27d8
   134b0:	movt	r1, #3
   134b4:	mov	r0, #0
   134b8:	bl	117d8 <dcgettext@plt>
   134bc:	mov	r1, #0
   134c0:	mov	r2, r0
   134c4:	mov	r0, r1
   134c8:	bl	118bc <error@plt>
   134cc:	b	12518 <__assert_fail@plt+0x974>
   134d0:	mov	r0, #0
   134d4:	bl	13aa4 <__assert_fail@plt+0x1f00>
   134d8:	movw	r0, #10272	; 0x2820
   134dc:	movt	r0, #3
   134e0:	bl	118ec <getenv@plt>
   134e4:	cmp	r0, #0
   134e8:	mov	r7, r0
   134ec:	str	r0, [r9, #56]	; 0x38
   134f0:	beq	13254 <__assert_fail@plt+0x16b0>
   134f4:	movw	r1, #10284	; 0x282c
   134f8:	movt	r1, #3
   134fc:	bl	1170c <strcmp@plt>
   13500:	cmp	r0, #0
   13504:	beq	13254 <__assert_fail@plt+0x16b0>
   13508:	ldrb	r3, [r7]
   1350c:	cmp	r3, #43	; 0x2b
   13510:	beq	135ec <__assert_fail@plt+0x1a48>
   13514:	ldr	r4, [pc, #-2340]	; 12bf8 <__assert_fail@plt+0x1054>
   13518:	b	13524 <__assert_fail@plt+0x1980>
   1351c:	add	r7, r7, #6
   13520:	str	r7, [r9, #56]	; 0x38
   13524:	ldr	r7, [r9, #56]	; 0x38
   13528:	mov	r2, #6
   1352c:	mov	r1, r4
   13530:	mov	r0, r7
   13534:	bl	11b5c <strncmp@plt>
   13538:	cmp	r0, #0
   1353c:	beq	1351c <__assert_fail@plt+0x1978>
   13540:	b	1253c <__assert_fail@plt+0x998>
   13544:	movw	r3, #10304	; 0x2840
   13548:	movt	r3, #3
   1354c:	str	r3, [r9, #20]
   13550:	b	12554 <__assert_fail@plt+0x9b0>
   13554:	movw	r3, #10328	; 0x2858
   13558:	movt	r3, #3
   1355c:	str	r3, [r9, #20]
   13560:	b	12554 <__assert_fail@plt+0x9b0>
   13564:	bl	147b8 <__assert_fail@plt+0x2c14>
   13568:	cmp	r0, #0
   1356c:	str	r0, [r8, #80]	; 0x50
   13570:	beq	135e0 <__assert_fail@plt+0x1a3c>
   13574:	mov	r0, r6
   13578:	mov	fp, r8
   1357c:	bl	1cab4 <__assert_fail@plt+0xaf10>
   13580:	mov	r6, r0
   13584:	b	13598 <__assert_fail@plt+0x19f4>
   13588:	ldr	r7, [r6, #28]
   1358c:	mov	r0, r6
   13590:	bl	1ca64 <__assert_fail@plt+0xaec0>
   13594:	mov	r6, r7
   13598:	cmp	r6, #0
   1359c:	beq	135e4 <__assert_fail@plt+0x1a40>
   135a0:	ldrb	r3, [r6, #24]
   135a4:	tst	r3, #3
   135a8:	bne	13588 <__assert_fail@plt+0x19e4>
   135ac:	add	r2, sp, #128	; 0x80
   135b0:	mov	r0, #3
   135b4:	ldr	r1, [r6, #4]
   135b8:	bl	11b38 <__xstat64@plt>
   135bc:	cmp	r0, #0
   135c0:	bne	13588 <__assert_fail@plt+0x19e4>
   135c4:	ldr	r0, [fp, #80]	; 0x50
   135c8:	ldrd	r8, [sp, #224]	; 0xe0
   135cc:	ldrd	r2, [sp, #128]	; 0x80
   135d0:	strd	r8, [sp]
   135d4:	bl	1487c <__assert_fail@plt+0x2cd8>
   135d8:	cmp	r0, #0
   135dc:	bge	13588 <__assert_fail@plt+0x19e4>
   135e0:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   135e4:	mov	r8, fp
   135e8:	b	13448 <__assert_fail@plt+0x18a4>
   135ec:	mov	r1, #10
   135f0:	mov	r0, r7
   135f4:	bl	11994 <strchr@plt>
   135f8:	cmp	r0, #0
   135fc:	strbne	r4, [r0]
   13600:	bne	1253c <__assert_fail@plt+0x998>
   13604:	b	1254c <__assert_fail@plt+0x9a8>
   13608:	mov	r2, #5
   1360c:	movw	r1, #10048	; 0x2740
   13610:	movt	r1, #3
   13614:	mov	r0, #0
   13618:	bl	117d8 <dcgettext@plt>
   1361c:	mov	r1, #0
   13620:	mov	r2, r0
   13624:	mov	r0, r1
   13628:	bl	118bc <error@plt>
   1362c:	mov	r0, #1
   13630:	bl	13aa4 <__assert_fail@plt+0x1f00>
   13634:	bl	119b8 <__errno_location@plt>
   13638:	ldr	r4, [r0]
   1363c:	mov	r2, #5
   13640:	mov	r0, r5
   13644:	movw	r1, #10432	; 0x28c0
   13648:	movt	r1, #3
   1364c:	bl	117d8 <dcgettext@plt>
   13650:	mov	r5, r0
   13654:	mov	r0, #4
   13658:	ldr	r1, [sp, #28]
   1365c:	bl	1f4ac <__assert_fail@plt+0xd908>
   13660:	mov	r3, r0
   13664:	mov	r2, r5
   13668:	mov	r1, r4
   1366c:	mov	r0, #1
   13670:	bl	118bc <error@plt>
   13674:	movw	r1, #10476	; 0x28ec
   13678:	movt	r1, #3
   1367c:	ldr	r3, [pc, #-2696]	; 12bfc <__assert_fail@plt+0x1058>
   13680:	movw	r0, #10640	; 0x2990
   13684:	movt	r0, #3
   13688:	movw	r2, #527	; 0x20f
   1368c:	bl	11ba4 <__assert_fail@plt>
   13690:	mov	r2, #1
   13694:	mov	r3, #0
   13698:	strd	r2, [sp, #80]	; 0x50
   1369c:	b	128b8 <__assert_fail@plt+0xd14>
   136a0:	mov	r2, #5
   136a4:	movw	r1, #10356	; 0x2874
   136a8:	movt	r1, #3
   136ac:	mov	r0, #0
   136b0:	bl	117d8 <dcgettext@plt>
   136b4:	ldr	r3, [r4]
   136b8:	mov	r6, r0
   136bc:	ldr	r0, [r5, r3, lsl #2]
   136c0:	bl	1f760 <__assert_fail@plt+0xdbbc>
   136c4:	mov	r1, #0
   136c8:	mov	r3, r0
   136cc:	mov	r2, r6
   136d0:	mov	r0, r1
   136d4:	bl	118bc <error@plt>
   136d8:	movw	r3, #16944	; 0x4230
   136dc:	movt	r3, #4
   136e0:	ldr	r4, [r3]
   136e4:	mov	r2, #5
   136e8:	movw	r1, #10376	; 0x2888
   136ec:	movt	r1, #3
   136f0:	mov	r0, #0
   136f4:	bl	117d8 <dcgettext@plt>
   136f8:	mov	r3, r0
   136fc:	movw	r2, #13188	; 0x3384
   13700:	movt	r2, #3
   13704:	mov	r1, #1
   13708:	mov	r0, r4
   1370c:	bl	11a18 <__fprintf_chk@plt>
   13710:	mov	r0, #1
   13714:	bl	13aa4 <__assert_fail@plt+0x1f00>
   13718:	movw	r1, #10476	; 0x28ec
   1371c:	movt	r1, #3
   13720:	ldr	r3, [pc, #-2860]	; 12bfc <__assert_fail@plt+0x1058>
   13724:	movw	r0, #10672	; 0x29b0
   13728:	movt	r0, #3
   1372c:	movw	r2, #638	; 0x27e
   13730:	bl	11ba4 <__assert_fail@plt>
   13734:	mov	r2, #5
   13738:	movw	r1, #10716	; 0x29dc
   1373c:	movt	r1, #3
   13740:	mov	r0, #0
   13744:	bl	117d8 <dcgettext@plt>
   13748:	mov	r4, r0
   1374c:	mov	r0, #4
   13750:	ldr	r1, [sp, #28]
   13754:	bl	1f4ac <__assert_fail@plt+0xd908>
   13758:	mov	r3, r0
   1375c:	mov	r2, r4
   13760:	mov	r1, #0
   13764:	mov	r0, #1
   13768:	bl	118bc <error@plt>
   1376c:	mov	r2, #1
   13770:	mov	r3, #0
   13774:	strd	r2, [sp, #96]	; 0x60
   13778:	b	131a4 <__assert_fail@plt+0x1600>
   1377c:	mov	r0, #1
   13780:	mov	r1, #0
   13784:	strd	r0, [sp, #96]	; 0x60
   13788:	b	12fc4 <__assert_fail@plt+0x1420>
   1378c:	mov	r2, #1
   13790:	mov	r3, #0
   13794:	strd	r2, [sp, #96]	; 0x60
   13798:	b	12e34 <__assert_fail@plt+0x1290>
   1379c:	cmp	r7, #0
   137a0:	beq	12500 <__assert_fail@plt+0x95c>
   137a4:	movw	r4, #16844	; 0x41cc
   137a8:	movt	r4, #4
   137ac:	b	130c8 <__assert_fail@plt+0x1524>
   137b0:	ldr	ip, [r8]
   137b4:	mov	r2, #116	; 0x74
   137b8:	ldr	r3, [pc, #-3008]	; 12c00 <__assert_fail@plt+0x105c>
   137bc:	ldr	r1, [sp, #116]	; 0x74
   137c0:	str	ip, [sp]
   137c4:	bl	2f2d8 <__assert_fail@plt+0x1d734>
   137c8:	mov	fp, #0
   137cc:	mov	lr, #0
   137d0:	pop	{r1}		; (ldr r1, [sp], #4)
   137d4:	mov	r2, sp
   137d8:	push	{r2}		; (str r2, [sp, #-4]!)
   137dc:	push	{r0}		; (str r0, [sp, #-4]!)
   137e0:	ldr	ip, [pc, #16]	; 137f8 <__assert_fail@plt+0x1c54>
   137e4:	push	{ip}		; (str ip, [sp, #-4]!)
   137e8:	ldr	r0, [pc, #12]	; 137fc <__assert_fail@plt+0x1c58>
   137ec:	ldr	r3, [pc, #12]	; 13800 <__assert_fail@plt+0x1c5c>
   137f0:	bl	11904 <__libc_start_main@plt>
   137f4:	bl	11b68 <abort@plt>
   137f8:	andeq	r1, r3, r8, ror r4
   137fc:			; <UNDEFINED> instruction: 0x00011bb0
   13800:	andeq	r1, r3, r8, lsl r4
   13804:	ldr	r3, [pc, #20]	; 13820 <__assert_fail@plt+0x1c7c>
   13808:	ldr	r2, [pc, #20]	; 13824 <__assert_fail@plt+0x1c80>
   1380c:	add	r3, pc, r3
   13810:	ldr	r2, [r3, r2]
   13814:	cmp	r2, #0
   13818:	bxeq	lr
   1381c:	b	11940 <__gmon_start__@plt>
   13820:	andeq	r0, r3, ip, ror #15
   13824:	andeq	r0, r0, r0, asr #3
   13828:	ldr	r0, [pc, #24]	; 13848 <__assert_fail@plt+0x1ca4>
   1382c:	ldr	r3, [pc, #24]	; 1384c <__assert_fail@plt+0x1ca8>
   13830:	cmp	r3, r0
   13834:	bxeq	lr
   13838:	ldr	r3, [pc, #16]	; 13850 <__assert_fail@plt+0x1cac>
   1383c:	cmp	r3, #0
   13840:	bxeq	lr
   13844:	bx	r3
   13848:	andeq	r4, r4, ip, lsl r2
   1384c:	andeq	r4, r4, ip, lsl r2
   13850:	andeq	r0, r0, r0
   13854:	ldr	r0, [pc, #36]	; 13880 <__assert_fail@plt+0x1cdc>
   13858:	ldr	r1, [pc, #36]	; 13884 <__assert_fail@plt+0x1ce0>
   1385c:	sub	r1, r1, r0
   13860:	asr	r1, r1, #2
   13864:	add	r1, r1, r1, lsr #31
   13868:	asrs	r1, r1, #1
   1386c:	bxeq	lr
   13870:	ldr	r3, [pc, #16]	; 13888 <__assert_fail@plt+0x1ce4>
   13874:	cmp	r3, #0
   13878:	bxeq	lr
   1387c:	bx	r3
   13880:	andeq	r4, r4, ip, lsl r2
   13884:	andeq	r4, r4, ip, lsl r2
   13888:	andeq	r0, r0, r0
   1388c:	push	{r4, lr}
   13890:	ldr	r4, [pc, #24]	; 138b0 <__assert_fail@plt+0x1d0c>
   13894:	ldrb	r3, [r4]
   13898:	cmp	r3, #0
   1389c:	popne	{r4, pc}
   138a0:	bl	13828 <__assert_fail@plt+0x1c84>
   138a4:	mov	r3, #1
   138a8:	strb	r3, [r4]
   138ac:	pop	{r4, pc}
   138b0:	andeq	r4, r4, r4, asr #4
   138b4:	b	13854 <__assert_fail@plt+0x1cb0>
   138b8:	mvn	r3, #0
   138bc:	mvn	r2, #0
   138c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   138c4:	cmp	r1, r3
   138c8:	strd	r6, [sp, #8]
   138cc:	cmpeq	r0, r2
   138d0:	str	lr, [sp, #16]
   138d4:	sub	sp, sp, #676	; 0x2a4
   138d8:	beq	13928 <__assert_fail@plt+0x1d84>
   138dc:	movw	r3, #16968	; 0x4248
   138e0:	movt	r3, #4
   138e4:	ldrd	r4, [r3, #8]
   138e8:	mov	r6, #1
   138ec:	mov	r7, #0
   138f0:	add	r2, sp, #20
   138f4:	strd	r6, [sp]
   138f8:	ldr	r3, [r3]
   138fc:	strd	r4, [sp, #8]
   13900:	bl	1b270 <__assert_fail@plt+0x96cc>
   13904:	movw	r3, #16956	; 0x423c
   13908:	movt	r3, #4
   1390c:	ldr	r1, [r3]
   13910:	bl	116b8 <fputs_unlocked@plt>
   13914:	add	sp, sp, #676	; 0x2a4
   13918:	ldrd	r4, [sp]
   1391c:	ldrd	r6, [sp, #8]
   13920:	add	sp, sp, #16
   13924:	pop	{pc}		; (ldr pc, [sp], #4)
   13928:	movw	r1, #5856	; 0x16e0
   1392c:	movt	r1, #3
   13930:	mov	r2, #5
   13934:	mov	r0, #0
   13938:	bl	117d8 <dcgettext@plt>
   1393c:	b	13904 <__assert_fail@plt+0x1d60>
   13940:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13944:	movw	r4, #16968	; 0x4248
   13948:	movt	r4, #4
   1394c:	ldrb	r3, [r4, #16]
   13950:	movw	r5, #16956	; 0x423c
   13954:	movt	r5, #4
   13958:	strd	r6, [sp, #8]
   1395c:	mov	r6, r0
   13960:	strd	r8, [sp, #16]
   13964:	mov	r8, r1
   13968:	str	sl, [sp, #24]
   1396c:	str	lr, [sp, #28]
   13970:	sub	sp, sp, #88	; 0x58
   13974:	cmp	r3, #0
   13978:	ldrdne	r0, [r0, #8]
   1397c:	ldrdeq	r0, [r6]
   13980:	bl	138b8 <__assert_fail@plt+0x1d14>
   13984:	ldrb	r3, [r4, #17]
   13988:	cmp	r3, #0
   1398c:	beq	139f8 <__assert_fail@plt+0x1e54>
   13990:	ldr	r0, [r5]
   13994:	ldr	r3, [r0, #20]
   13998:	ldr	r2, [r0, #24]
   1399c:	cmp	r3, r2
   139a0:	addcc	r1, r3, #1
   139a4:	movcc	r2, #9
   139a8:	strcc	r1, [r0, #20]
   139ac:	strbcc	r2, [r3]
   139b0:	bcs	13a40 <__assert_fail@plt+0x1e9c>
   139b4:	ldrd	r6, [r6, #16]
   139b8:	add	r1, sp, #12
   139bc:	add	r2, sp, #44	; 0x2c
   139c0:	ldr	r9, [r4, #24]
   139c4:	ldr	sl, [r4, #20]
   139c8:	strd	r6, [sp, #12]
   139cc:	mov	r0, r9
   139d0:	bl	2d884 <__assert_fail@plt+0x1bce0>
   139d4:	subs	r6, r0, #0
   139d8:	beq	13a4c <__assert_fail@plt+0x1ea8>
   139dc:	ldr	ip, [sp, #16]
   139e0:	mov	r3, r9
   139e4:	add	r2, sp, #44	; 0x2c
   139e8:	mov	r1, sl
   139ec:	ldr	r0, [r5]
   139f0:	str	ip, [sp]
   139f4:	bl	17a7c <__assert_fail@plt+0x5ed8>
   139f8:	ldrb	r3, [r4, #28]
   139fc:	mov	r2, r8
   13a00:	movw	r1, #5892	; 0x1704
   13a04:	movt	r1, #3
   13a08:	mov	r0, #1
   13a0c:	cmp	r3, #0
   13a10:	moveq	r3, #10
   13a14:	movne	r3, #0
   13a18:	bl	11a00 <__printf_chk@plt>
   13a1c:	ldr	r0, [r5]
   13a20:	bl	1182c <fflush_unlocked@plt>
   13a24:	add	sp, sp, #88	; 0x58
   13a28:	ldrd	r4, [sp]
   13a2c:	ldrd	r6, [sp, #8]
   13a30:	ldrd	r8, [sp, #16]
   13a34:	ldr	sl, [sp, #24]
   13a38:	add	sp, sp, #28
   13a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a40:	mov	r1, #9
   13a44:	bl	11a60 <__overflow@plt>
   13a48:	b	139b4 <__assert_fail@plt+0x1e10>
   13a4c:	ldr	r0, [sp, #12]
   13a50:	add	r2, sp, #20
   13a54:	asr	r1, r0, #31
   13a58:	bl	1c100 <__assert_fail@plt+0xa55c>
   13a5c:	mov	r7, r0
   13a60:	mov	r2, #5
   13a64:	mov	r0, r6
   13a68:	movw	r1, #5868	; 0x16ec
   13a6c:	movt	r1, #3
   13a70:	bl	117d8 <dcgettext@plt>
   13a74:	mov	r9, r0
   13a78:	mov	r0, r7
   13a7c:	bl	1f760 <__assert_fail@plt+0xdbbc>
   13a80:	mov	r3, r0
   13a84:	mov	r1, r6
   13a88:	mov	r0, r6
   13a8c:	mov	r2, r9
   13a90:	bl	118bc <error@plt>
   13a94:	mov	r0, r7
   13a98:	ldr	r1, [r5]
   13a9c:	bl	116b8 <fputs_unlocked@plt>
   13aa0:	b	139f8 <__assert_fail@plt+0x1e54>
   13aa4:	subs	r6, r0, #0
   13aa8:	str	r7, [sp, #-8]!
   13aac:	str	lr, [sp, #4]
   13ab0:	sub	sp, sp, #56	; 0x38
   13ab4:	beq	13afc <__assert_fail@plt+0x1f58>
   13ab8:	movw	r3, #16944	; 0x4230
   13abc:	movt	r3, #4
   13ac0:	ldr	r4, [r3]
   13ac4:	mov	r2, #5
   13ac8:	movw	r1, #5904	; 0x1710
   13acc:	movt	r1, #3
   13ad0:	mov	r0, #0
   13ad4:	bl	117d8 <dcgettext@plt>
   13ad8:	movw	r3, #17096	; 0x42c8
   13adc:	movt	r3, #4
   13ae0:	mov	r2, r0
   13ae4:	mov	r1, #1
   13ae8:	ldr	r3, [r3]
   13aec:	mov	r0, r4
   13af0:	bl	11a18 <__fprintf_chk@plt>
   13af4:	mov	r0, r6
   13af8:	bl	11970 <exit@plt>
   13afc:	mov	r2, #5
   13b00:	movw	r1, #5944	; 0x1738
   13b04:	movt	r1, #3
   13b08:	movw	r7, #16956	; 0x423c
   13b0c:	movt	r7, #4
   13b10:	bl	117d8 <dcgettext@plt>
   13b14:	movw	r3, #17096	; 0x42c8
   13b18:	movt	r3, #4
   13b1c:	ldr	r3, [r3]
   13b20:	mov	r1, r0
   13b24:	mov	r0, #1
   13b28:	mov	r2, r3
   13b2c:	bl	11a00 <__printf_chk@plt>
   13b30:	mov	r2, #5
   13b34:	movw	r1, #6016	; 0x1780
   13b38:	movt	r1, #3
   13b3c:	mov	r0, r6
   13b40:	bl	117d8 <dcgettext@plt>
   13b44:	ldr	r1, [r7]
   13b48:	bl	116b8 <fputs_unlocked@plt>
   13b4c:	mov	r2, #5
   13b50:	movw	r1, #6092	; 0x17cc
   13b54:	movt	r1, #3
   13b58:	mov	r0, r6
   13b5c:	bl	117d8 <dcgettext@plt>
   13b60:	ldr	r1, [r7]
   13b64:	bl	116b8 <fputs_unlocked@plt>
   13b68:	mov	r2, #5
   13b6c:	movw	r1, #6168	; 0x1818
   13b70:	movt	r1, #3
   13b74:	mov	r0, r6
   13b78:	bl	117d8 <dcgettext@plt>
   13b7c:	ldr	r1, [r7]
   13b80:	bl	116b8 <fputs_unlocked@plt>
   13b84:	mov	r2, #5
   13b88:	movw	r1, #6612	; 0x19d4
   13b8c:	movt	r1, #3
   13b90:	mov	r0, r6
   13b94:	bl	117d8 <dcgettext@plt>
   13b98:	ldr	r1, [r7]
   13b9c:	bl	116b8 <fputs_unlocked@plt>
   13ba0:	mov	r2, #5
   13ba4:	movw	r1, #7304	; 0x1c88
   13ba8:	movt	r1, #3
   13bac:	mov	r0, r6
   13bb0:	bl	117d8 <dcgettext@plt>
   13bb4:	ldr	r1, [r7]
   13bb8:	bl	116b8 <fputs_unlocked@plt>
   13bbc:	mov	r2, #5
   13bc0:	movw	r1, #7724	; 0x1e2c
   13bc4:	movt	r1, #3
   13bc8:	mov	r0, r6
   13bcc:	bl	117d8 <dcgettext@plt>
   13bd0:	ldr	r1, [r7]
   13bd4:	bl	116b8 <fputs_unlocked@plt>
   13bd8:	mov	r2, #5
   13bdc:	movw	r1, #7932	; 0x1efc
   13be0:	movt	r1, #3
   13be4:	mov	r0, r6
   13be8:	bl	117d8 <dcgettext@plt>
   13bec:	ldr	r1, [r7]
   13bf0:	bl	116b8 <fputs_unlocked@plt>
   13bf4:	mov	r2, #5
   13bf8:	movw	r1, #8220	; 0x201c
   13bfc:	movt	r1, #3
   13c00:	mov	r0, r6
   13c04:	bl	117d8 <dcgettext@plt>
   13c08:	ldr	r1, [r7]
   13c0c:	bl	116b8 <fputs_unlocked@plt>
   13c10:	mov	r2, #5
   13c14:	movw	r1, #8832	; 0x2280
   13c18:	movt	r1, #3
   13c1c:	mov	r0, r6
   13c20:	bl	117d8 <dcgettext@plt>
   13c24:	ldr	r1, [r7]
   13c28:	bl	116b8 <fputs_unlocked@plt>
   13c2c:	mov	r2, #5
   13c30:	movw	r1, #9036	; 0x234c
   13c34:	movt	r1, #3
   13c38:	mov	r0, r6
   13c3c:	bl	117d8 <dcgettext@plt>
   13c40:	ldr	r1, [r7]
   13c44:	bl	116b8 <fputs_unlocked@plt>
   13c48:	mov	r2, #5
   13c4c:	movw	r1, #9084	; 0x237c
   13c50:	movt	r1, #3
   13c54:	mov	r0, r6
   13c58:	bl	117d8 <dcgettext@plt>
   13c5c:	ldr	r1, [r7]
   13c60:	bl	116b8 <fputs_unlocked@plt>
   13c64:	mov	r2, #5
   13c68:	movw	r1, #9140	; 0x23b4
   13c6c:	movt	r1, #3
   13c70:	mov	r0, r6
   13c74:	bl	117d8 <dcgettext@plt>
   13c78:	mov	r1, r0
   13c7c:	movw	r2, #9364	; 0x2494
   13c80:	movt	r2, #3
   13c84:	mov	r0, #1
   13c88:	bl	11a00 <__printf_chk@plt>
   13c8c:	mov	r2, #5
   13c90:	movw	r1, #9368	; 0x2498
   13c94:	movt	r1, #3
   13c98:	mov	r0, r6
   13c9c:	bl	117d8 <dcgettext@plt>
   13ca0:	ldr	r1, [r7]
   13ca4:	bl	116b8 <fputs_unlocked@plt>
   13ca8:	movw	lr, #5280	; 0x14a0
   13cac:	movt	lr, #3
   13cb0:	ldr	ip, [lr]
   13cb4:	ldr	r4, [lr, #4]
   13cb8:	ldrd	r8, [lr, #8]
   13cbc:	subs	r1, ip, #0
   13cc0:	str	ip, [sp]
   13cc4:	ldrd	r2, [lr, #16]
   13cc8:	str	r4, [sp, #4]
   13ccc:	ldrd	r4, [lr, #24]
   13cd0:	strd	r8, [sp, #8]
   13cd4:	ldrd	r8, [lr, #32]
   13cd8:	strd	r2, [sp, #16]
   13cdc:	ldrd	r2, [lr, #40]	; 0x28
   13ce0:	strd	r4, [sp, #24]
   13ce4:	ldrd	r4, [lr, #48]	; 0x30
   13ce8:	strd	r8, [sp, #32]
   13cec:	strd	r2, [sp, #40]	; 0x28
   13cf0:	strd	r4, [sp, #48]	; 0x30
   13cf4:	movwne	r5, #5900	; 0x170c
   13cf8:	mov	r4, sp
   13cfc:	movtne	r5, #3
   13d00:	bne	13df8 <__assert_fail@plt+0x2254>
   13d04:	ldr	r4, [r4, #4]
   13d08:	movw	r1, #9580	; 0x256c
   13d0c:	movt	r1, #3
   13d10:	mov	r2, #5
   13d14:	cmp	r4, #0
   13d18:	beq	13e0c <__assert_fail@plt+0x2268>
   13d1c:	mov	r0, #0
   13d20:	bl	117d8 <dcgettext@plt>
   13d24:	mov	r1, r0
   13d28:	movw	r3, #9604	; 0x2584
   13d2c:	movt	r3, #3
   13d30:	movw	r2, #9644	; 0x25ac
   13d34:	movt	r2, #3
   13d38:	mov	r0, #1
   13d3c:	bl	11a00 <__printf_chk@plt>
   13d40:	mov	r1, #0
   13d44:	mov	r0, #5
   13d48:	bl	11a6c <setlocale@plt>
   13d4c:	cmp	r0, #0
   13d50:	movweq	r5, #5900	; 0x170c
   13d54:	movteq	r5, #3
   13d58:	beq	13d7c <__assert_fail@plt+0x21d8>
   13d5c:	movw	r1, #9660	; 0x25bc
   13d60:	movt	r1, #3
   13d64:	mov	r2, #3
   13d68:	movw	r5, #5900	; 0x170c
   13d6c:	movt	r5, #3
   13d70:	bl	11b5c <strncmp@plt>
   13d74:	cmp	r0, #0
   13d78:	bne	13ec4 <__assert_fail@plt+0x2320>
   13d7c:	mov	r2, #5
   13d80:	movw	r1, #9736	; 0x2608
   13d84:	movt	r1, #3
   13d88:	mov	r0, #0
   13d8c:	bl	117d8 <dcgettext@plt>
   13d90:	mov	r1, r0
   13d94:	movw	r3, #5900	; 0x170c
   13d98:	movt	r3, #3
   13d9c:	movw	r2, #9604	; 0x2584
   13da0:	movt	r2, #3
   13da4:	mov	r0, #1
   13da8:	bl	11a00 <__printf_chk@plt>
   13dac:	mov	r2, #5
   13db0:	movw	r1, #9764	; 0x2624
   13db4:	movt	r1, #3
   13db8:	mov	r0, #0
   13dbc:	bl	117d8 <dcgettext@plt>
   13dc0:	movw	r2, #10984	; 0x2ae8
   13dc4:	movt	r2, #3
   13dc8:	cmp	r4, r5
   13dcc:	movw	r3, #11844	; 0x2e44
   13dd0:	movt	r3, #3
   13dd4:	mov	r1, r0
   13dd8:	moveq	r3, r2
   13ddc:	mov	r2, r4
   13de0:	mov	r0, #1
   13de4:	bl	11a00 <__printf_chk@plt>
   13de8:	b	13af4 <__assert_fail@plt+0x1f50>
   13dec:	ldr	r1, [r4, #8]!
   13df0:	cmp	r1, #0
   13df4:	beq	13d04 <__assert_fail@plt+0x2160>
   13df8:	mov	r0, r5
   13dfc:	bl	1170c <strcmp@plt>
   13e00:	cmp	r0, #0
   13e04:	bne	13dec <__assert_fail@plt+0x2248>
   13e08:	b	13d04 <__assert_fail@plt+0x2160>
   13e0c:	mov	r0, r4
   13e10:	bl	117d8 <dcgettext@plt>
   13e14:	mov	r1, r0
   13e18:	movw	r3, #9604	; 0x2584
   13e1c:	movt	r3, #3
   13e20:	movw	r2, #9644	; 0x25ac
   13e24:	movt	r2, #3
   13e28:	mov	r0, #1
   13e2c:	bl	11a00 <__printf_chk@plt>
   13e30:	mov	r1, r4
   13e34:	mov	r0, #5
   13e38:	bl	11a6c <setlocale@plt>
   13e3c:	cmp	r0, #0
   13e40:	beq	13e5c <__assert_fail@plt+0x22b8>
   13e44:	movw	r1, #9660	; 0x25bc
   13e48:	movt	r1, #3
   13e4c:	mov	r2, #3
   13e50:	bl	11b5c <strncmp@plt>
   13e54:	cmp	r0, #0
   13e58:	bne	13eb8 <__assert_fail@plt+0x2314>
   13e5c:	mov	r2, #5
   13e60:	movw	r1, #9736	; 0x2608
   13e64:	movt	r1, #3
   13e68:	mov	r0, #0
   13e6c:	bl	117d8 <dcgettext@plt>
   13e70:	mov	r1, r0
   13e74:	movw	r3, #5900	; 0x170c
   13e78:	movt	r3, #3
   13e7c:	movw	r2, #9604	; 0x2584
   13e80:	movt	r2, #3
   13e84:	mov	r0, #1
   13e88:	bl	11a00 <__printf_chk@plt>
   13e8c:	movw	r1, #9764	; 0x2624
   13e90:	movt	r1, #3
   13e94:	mov	r2, #5
   13e98:	mov	r0, #0
   13e9c:	bl	117d8 <dcgettext@plt>
   13ea0:	movw	r4, #5900	; 0x170c
   13ea4:	movt	r4, #3
   13ea8:	movw	r3, #10984	; 0x2ae8
   13eac:	movt	r3, #3
   13eb0:	mov	r1, r0
   13eb4:	b	13ddc <__assert_fail@plt+0x2238>
   13eb8:	movw	r5, #5900	; 0x170c
   13ebc:	movt	r5, #3
   13ec0:	mov	r4, r5
   13ec4:	mov	r2, #5
   13ec8:	movw	r1, #9664	; 0x25c0
   13ecc:	movt	r1, #3
   13ed0:	mov	r0, #0
   13ed4:	bl	117d8 <dcgettext@plt>
   13ed8:	ldr	r1, [r7]
   13edc:	bl	116b8 <fputs_unlocked@plt>
   13ee0:	b	13d7c <__assert_fail@plt+0x21d8>
   13ee4:	mov	r0, #1
   13ee8:	b	13aa4 <__assert_fail@plt+0x1f00>
   13eec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ef0:	mov	r5, r1
   13ef4:	mov	r4, r2
   13ef8:	strd	r6, [sp, #8]
   13efc:	mov	r7, r3
   13f00:	strd	r8, [sp, #16]
   13f04:	strd	sl, [sp, #24]
   13f08:	mov	sl, r0
   13f0c:	str	lr, [sp, #32]
   13f10:	sub	sp, sp, #12
   13f14:	str	r2, [sp]
   13f18:	bl	11988 <strlen@plt>
   13f1c:	ldr	fp, [r5]
   13f20:	cmp	fp, #0
   13f24:	beq	13ff4 <__assert_fail@plt+0x2450>
   13f28:	mov	r6, #0
   13f2c:	mov	r8, r0
   13f30:	mvn	r9, #0
   13f34:	str	r6, [sp, #4]
   13f38:	b	13f64 <__assert_fail@plt+0x23c0>
   13f3c:	bl	117c0 <memcmp@plt>
   13f40:	ldr	r3, [sp, #4]
   13f44:	cmp	r0, #0
   13f48:	movne	r3, #1
   13f4c:	str	r3, [sp, #4]
   13f50:	ldr	fp, [r5, #4]!
   13f54:	add	r6, r6, #1
   13f58:	add	r4, r4, r7
   13f5c:	cmp	fp, #0
   13f60:	beq	13fc0 <__assert_fail@plt+0x241c>
   13f64:	mov	r2, r8
   13f68:	mov	r1, sl
   13f6c:	mov	r0, fp
   13f70:	bl	11b5c <strncmp@plt>
   13f74:	cmp	r0, #0
   13f78:	mov	r0, fp
   13f7c:	bne	13f50 <__assert_fail@plt+0x23ac>
   13f80:	bl	11988 <strlen@plt>
   13f84:	ldr	r3, [sp]
   13f88:	cmp	r0, r8
   13f8c:	mov	r2, r7
   13f90:	mov	r1, r4
   13f94:	mla	r0, r7, r9, r3
   13f98:	beq	13fec <__assert_fail@plt+0x2448>
   13f9c:	cmn	r9, #1
   13fa0:	moveq	r9, r6
   13fa4:	beq	13f50 <__assert_fail@plt+0x23ac>
   13fa8:	ldr	r3, [sp]
   13fac:	cmp	r3, #0
   13fb0:	bne	13f3c <__assert_fail@plt+0x2398>
   13fb4:	mov	r3, #1
   13fb8:	str	r3, [sp, #4]
   13fbc:	b	13f50 <__assert_fail@plt+0x23ac>
   13fc0:	ldr	r3, [sp, #4]
   13fc4:	cmp	r3, #0
   13fc8:	mvnne	r9, #1
   13fcc:	mov	r0, r9
   13fd0:	add	sp, sp, #12
   13fd4:	ldrd	r4, [sp]
   13fd8:	ldrd	r6, [sp, #8]
   13fdc:	ldrd	r8, [sp, #16]
   13fe0:	ldrd	sl, [sp, #24]
   13fe4:	add	sp, sp, #32
   13fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   13fec:	mov	r9, r6
   13ff0:	b	13fcc <__assert_fail@plt+0x2428>
   13ff4:	mvn	r9, #0
   13ff8:	b	13fcc <__assert_fail@plt+0x2428>
   13ffc:	strd	r4, [sp, #-16]!
   14000:	str	r6, [sp, #8]
   14004:	mov	r6, r0
   14008:	ldr	r0, [r1]
   1400c:	str	lr, [sp, #12]
   14010:	cmp	r0, #0
   14014:	beq	14058 <__assert_fail@plt+0x24b4>
   14018:	mov	r4, r1
   1401c:	mov	r5, #0
   14020:	b	14034 <__assert_fail@plt+0x2490>
   14024:	ldr	r0, [r4, #4]!
   14028:	add	r5, r5, #1
   1402c:	cmp	r0, #0
   14030:	beq	14058 <__assert_fail@plt+0x24b4>
   14034:	mov	r1, r6
   14038:	bl	1170c <strcmp@plt>
   1403c:	cmp	r0, #0
   14040:	bne	14024 <__assert_fail@plt+0x2480>
   14044:	mov	r0, r5
   14048:	ldrd	r4, [sp]
   1404c:	ldr	r6, [sp, #8]
   14050:	add	sp, sp, #12
   14054:	pop	{pc}		; (ldr pc, [sp], #4)
   14058:	ldrd	r4, [sp]
   1405c:	mvn	r0, #0
   14060:	ldr	r6, [sp, #8]
   14064:	add	sp, sp, #12
   14068:	pop	{pc}		; (ldr pc, [sp], #4)
   1406c:	cmn	r2, #1
   14070:	strd	r4, [sp, #-16]!
   14074:	mov	r5, r1
   14078:	movweq	r1, #11416	; 0x2c98
   1407c:	movwne	r1, #11444	; 0x2cb4
   14080:	str	r6, [sp, #8]
   14084:	movteq	r1, #3
   14088:	movtne	r1, #3
   1408c:	str	lr, [sp, #12]
   14090:	mov	r6, r0
   14094:	sub	sp, sp, #8
   14098:	mov	r2, #5
   1409c:	mov	r0, #0
   140a0:	bl	117d8 <dcgettext@plt>
   140a4:	mov	r4, r0
   140a8:	mov	r2, r5
   140ac:	mov	r1, #8
   140b0:	mov	r0, #0
   140b4:	bl	1f420 <__assert_fail@plt+0xd87c>
   140b8:	mov	r5, r0
   140bc:	mov	r1, r6
   140c0:	mov	r0, #1
   140c4:	bl	1f750 <__assert_fail@plt+0xdbac>
   140c8:	mov	r1, #0
   140cc:	mov	r3, r5
   140d0:	str	r0, [sp]
   140d4:	mov	r2, r4
   140d8:	mov	r0, r1
   140dc:	bl	118bc <error@plt>
   140e0:	add	sp, sp, #8
   140e4:	ldrd	r4, [sp]
   140e8:	ldr	r6, [sp, #8]
   140ec:	add	sp, sp, #12
   140f0:	pop	{pc}		; (ldr pc, [sp], #4)
   140f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   140f8:	mov	r4, r1
   140fc:	movw	r1, #11476	; 0x2cd4
   14100:	movt	r1, #3
   14104:	strd	r6, [sp, #8]
   14108:	mov	r6, r0
   1410c:	mov	r7, r2
   14110:	mov	r0, #0
   14114:	strd	r8, [sp, #16]
   14118:	mov	r2, #5
   1411c:	strd	sl, [sp, #24]
   14120:	movw	sl, #16944	; 0x4230
   14124:	movt	sl, #4
   14128:	str	lr, [sp, #32]
   1412c:	sub	sp, sp, #12
   14130:	bl	117d8 <dcgettext@plt>
   14134:	ldr	r1, [sl]
   14138:	bl	116b8 <fputs_unlocked@plt>
   1413c:	ldr	fp, [r6]
   14140:	cmp	fp, #0
   14144:	beq	141e4 <__assert_fail@plt+0x2640>
   14148:	movw	r3, #11500	; 0x2cec
   1414c:	movt	r3, #3
   14150:	mov	r9, #0
   14154:	str	r3, [sp]
   14158:	movw	r3, #11508	; 0x2cf4
   1415c:	movt	r3, #3
   14160:	mov	r5, r9
   14164:	str	r3, [sp, #4]
   14168:	b	141a0 <__assert_fail@plt+0x25fc>
   1416c:	mov	r0, fp
   14170:	mov	r9, r4
   14174:	bl	1f760 <__assert_fail@plt+0xdbbc>
   14178:	mov	r3, r0
   1417c:	mov	r1, #1
   14180:	ldr	r2, [sp]
   14184:	mov	r0, r8
   14188:	bl	11a18 <__fprintf_chk@plt>
   1418c:	ldr	fp, [r6, #4]!
   14190:	add	r5, r5, #1
   14194:	add	r4, r4, r7
   14198:	cmp	fp, #0
   1419c:	beq	141e4 <__assert_fail@plt+0x2640>
   141a0:	cmp	r5, #0
   141a4:	mov	r1, r4
   141a8:	ldr	r8, [sl]
   141ac:	mov	r2, r7
   141b0:	mov	r0, r9
   141b4:	beq	1416c <__assert_fail@plt+0x25c8>
   141b8:	bl	117c0 <memcmp@plt>
   141bc:	cmp	r0, #0
   141c0:	bne	1416c <__assert_fail@plt+0x25c8>
   141c4:	mov	r0, fp
   141c8:	bl	1f760 <__assert_fail@plt+0xdbbc>
   141cc:	mov	r3, r0
   141d0:	mov	r1, #1
   141d4:	ldr	r2, [sp, #4]
   141d8:	mov	r0, r8
   141dc:	bl	11a18 <__fprintf_chk@plt>
   141e0:	b	1418c <__assert_fail@plt+0x25e8>
   141e4:	ldr	r0, [sl]
   141e8:	ldr	r3, [r0, #20]
   141ec:	ldr	r2, [r0, #24]
   141f0:	cmp	r3, r2
   141f4:	bcs	14224 <__assert_fail@plt+0x2680>
   141f8:	add	r1, r3, #1
   141fc:	mov	r2, #10
   14200:	str	r1, [r0, #20]
   14204:	strb	r2, [r3]
   14208:	add	sp, sp, #12
   1420c:	ldrd	r4, [sp]
   14210:	ldrd	r6, [sp, #8]
   14214:	ldrd	r8, [sp, #16]
   14218:	ldrd	sl, [sp, #24]
   1421c:	add	sp, sp, #32
   14220:	pop	{pc}		; (ldr pc, [sp], #4)
   14224:	mov	r1, #10
   14228:	add	sp, sp, #12
   1422c:	ldrd	r4, [sp]
   14230:	ldrd	r6, [sp, #8]
   14234:	ldrd	r8, [sp, #16]
   14238:	ldrd	sl, [sp, #24]
   1423c:	ldr	lr, [sp, #32]
   14240:	add	sp, sp, #36	; 0x24
   14244:	b	11a60 <__overflow@plt>
   14248:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1424c:	mov	r5, r1
   14250:	mov	r4, r2
   14254:	ldrb	ip, [sp, #32]
   14258:	strd	r6, [sp, #8]
   1425c:	mov	r7, r0
   14260:	mov	r6, r3
   14264:	str	r8, [sp, #16]
   14268:	str	lr, [sp, #20]
   1426c:	cmp	ip, #0
   14270:	beq	142a4 <__assert_fail@plt+0x2700>
   14274:	mov	r2, r3
   14278:	mov	r1, r4
   1427c:	ldr	r3, [sp, #24]
   14280:	mov	r0, r5
   14284:	bl	13eec <__assert_fail@plt+0x2348>
   14288:	cmp	r0, #0
   1428c:	blt	142b4 <__assert_fail@plt+0x2710>
   14290:	ldrd	r4, [sp]
   14294:	ldrd	r6, [sp, #8]
   14298:	ldr	r8, [sp, #16]
   1429c:	add	sp, sp, #20
   142a0:	pop	{pc}		; (ldr pc, [sp], #4)
   142a4:	mov	r1, r2
   142a8:	mov	r0, r5
   142ac:	bl	13ffc <__assert_fail@plt+0x2458>
   142b0:	b	14288 <__assert_fail@plt+0x26e4>
   142b4:	mov	r2, r0
   142b8:	mov	r1, r5
   142bc:	mov	r0, r7
   142c0:	bl	1406c <__assert_fail@plt+0x24c8>
   142c4:	mov	r0, r4
   142c8:	mov	r1, r6
   142cc:	ldr	r2, [sp, #24]
   142d0:	bl	140f4 <__assert_fail@plt+0x2550>
   142d4:	ldr	r3, [sp, #28]
   142d8:	blx	r3
   142dc:	mvn	r0, #0
   142e0:	b	14290 <__assert_fail@plt+0x26ec>
   142e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   142e8:	strd	r6, [sp, #8]
   142ec:	ldr	r7, [r1]
   142f0:	str	r8, [sp, #16]
   142f4:	str	lr, [sp, #20]
   142f8:	cmp	r7, #0
   142fc:	beq	1433c <__assert_fail@plt+0x2798>
   14300:	mov	r6, r3
   14304:	mov	r8, r0
   14308:	mov	r4, r2
   1430c:	mov	r5, r1
   14310:	b	14320 <__assert_fail@plt+0x277c>
   14314:	ldr	r7, [r5, #4]!
   14318:	cmp	r7, #0
   1431c:	beq	1433c <__assert_fail@plt+0x2798>
   14320:	mov	r1, r4
   14324:	mov	r2, r6
   14328:	mov	r0, r8
   1432c:	add	r4, r4, r6
   14330:	bl	117c0 <memcmp@plt>
   14334:	cmp	r0, #0
   14338:	bne	14314 <__assert_fail@plt+0x2770>
   1433c:	mov	r0, r7
   14340:	ldrd	r4, [sp]
   14344:	ldrd	r6, [sp, #8]
   14348:	ldr	r8, [sp, #16]
   1434c:	add	sp, sp, #20
   14350:	pop	{pc}		; (ldr pc, [sp], #4)
   14354:	str	r4, [sp, #-8]!
   14358:	mov	r4, r0
   1435c:	mov	r0, #24
   14360:	str	lr, [sp, #4]
   14364:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   14368:	cmp	r0, #0
   1436c:	beq	14380 <__assert_fail@plt+0x27dc>
   14370:	mov	r3, #0
   14374:	str	r3, [r0]
   14378:	str	r4, [r0, #16]
   1437c:	str	r4, [r0, #20]
   14380:	ldr	r4, [sp]
   14384:	add	sp, sp, #4
   14388:	pop	{pc}		; (ldr pc, [sp], #4)
   1438c:	str	r4, [sp, #-8]!
   14390:	mov	r4, r0
   14394:	mov	r0, #24
   14398:	str	lr, [sp, #4]
   1439c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   143a0:	cmp	r0, #0
   143a4:	beq	143c0 <__assert_fail@plt+0x281c>
   143a8:	mov	r3, #0
   143ac:	str	r4, [r0]
   143b0:	str	r3, [r0, #4]
   143b4:	str	r3, [r0, #8]
   143b8:	str	r3, [r0, #12]
   143bc:	str	r3, [r0, #16]
   143c0:	ldr	r4, [sp]
   143c4:	add	sp, sp, #4
   143c8:	pop	{pc}		; (ldr pc, [sp], #4)
   143cc:	ldr	r3, [r0]
   143d0:	cmp	r3, #0
   143d4:	beq	14430 <__assert_fail@plt+0x288c>
   143d8:	mov	r2, #0
   143dc:	strd	r4, [sp, #-16]!
   143e0:	mov	r5, r1
   143e4:	mov	r4, r0
   143e8:	add	r1, r0, #12
   143ec:	str	r6, [sp, #8]
   143f0:	add	r0, r0, #8
   143f4:	str	lr, [sp, #12]
   143f8:	bl	11b2c <getdelim@plt>
   143fc:	cmp	r0, #0
   14400:	blt	14460 <__assert_fail@plt+0x28bc>
   14404:	mov	r3, #1
   14408:	ldr	r2, [r4, #4]
   1440c:	str	r3, [r5]
   14410:	ldr	r3, [r4, #8]
   14414:	add	r2, r2, #1
   14418:	str	r2, [r4, #4]
   1441c:	ldrd	r4, [sp]
   14420:	mov	r0, r3
   14424:	ldr	r6, [sp, #8]
   14428:	add	sp, sp, #12
   1442c:	pop	{pc}		; (ldr pc, [sp], #4)
   14430:	ldr	r2, [r0, #20]
   14434:	ldr	r3, [r2]
   14438:	cmp	r3, #0
   1443c:	moveq	r2, #2
   14440:	streq	r2, [r1]
   14444:	beq	14458 <__assert_fail@plt+0x28b4>
   14448:	add	r2, r2, #4
   1444c:	mov	ip, #1
   14450:	str	ip, [r1]
   14454:	str	r2, [r0, #20]
   14458:	mov	r0, r3
   1445c:	bx	lr
   14460:	ldr	r0, [r4]
   14464:	bl	1197c <feof@plt>
   14468:	cmp	r0, #0
   1446c:	mov	r3, #0
   14470:	movne	r2, #2
   14474:	moveq	r2, #4
   14478:	str	r2, [r5]
   1447c:	b	1441c <__assert_fail@plt+0x2878>
   14480:	ldr	r3, [r0]
   14484:	cmp	r3, #0
   14488:	beq	14494 <__assert_fail@plt+0x28f0>
   1448c:	ldr	r0, [r0, #4]
   14490:	bx	lr
   14494:	ldr	r3, [r0, #16]
   14498:	ldr	r0, [r0, #20]
   1449c:	sub	r0, r0, r3
   144a0:	asr	r0, r0, #2
   144a4:	bx	lr
   144a8:	ldr	r3, [r0]
   144ac:	str	r4, [sp, #-8]!
   144b0:	mov	r4, r0
   144b4:	str	lr, [sp, #4]
   144b8:	cmp	r3, #0
   144bc:	beq	144c8 <__assert_fail@plt+0x2924>
   144c0:	ldr	r0, [r0, #8]
   144c4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   144c8:	mov	r0, r4
   144cc:	ldr	r4, [sp]
   144d0:	ldr	lr, [sp, #4]
   144d4:	add	sp, sp, #8
   144d8:	b	17ac8 <__assert_fail@plt+0x5f24>
   144dc:	movw	r3, #17088	; 0x42c0
   144e0:	movt	r3, #4
   144e4:	str	r0, [r3]
   144e8:	bx	lr
   144ec:	movw	r3, #17088	; 0x42c0
   144f0:	movt	r3, #4
   144f4:	strb	r0, [r3, #4]
   144f8:	bx	lr
   144fc:	movw	r3, #16956	; 0x423c
   14500:	movt	r3, #4
   14504:	strd	r4, [sp, #-16]!
   14508:	ldr	r0, [r3]
   1450c:	str	r6, [sp, #8]
   14510:	str	lr, [sp, #12]
   14514:	sub	sp, sp, #8
   14518:	bl	30788 <__assert_fail@plt+0x1ebe4>
   1451c:	cmp	r0, #0
   14520:	beq	1454c <__assert_fail@plt+0x29a8>
   14524:	movw	r4, #17088	; 0x42c0
   14528:	movt	r4, #4
   1452c:	ldrb	r6, [r4, #4]
   14530:	bl	119b8 <__errno_location@plt>
   14534:	mov	r5, r0
   14538:	cmp	r6, #0
   1453c:	beq	14578 <__assert_fail@plt+0x29d4>
   14540:	ldr	r3, [r0]
   14544:	cmp	r3, #32
   14548:	bne	14578 <__assert_fail@plt+0x29d4>
   1454c:	movw	r3, #16944	; 0x4230
   14550:	movt	r3, #4
   14554:	ldr	r0, [r3]
   14558:	bl	30788 <__assert_fail@plt+0x1ebe4>
   1455c:	cmp	r0, #0
   14560:	bne	145c0 <__assert_fail@plt+0x2a1c>
   14564:	add	sp, sp, #8
   14568:	ldrd	r4, [sp]
   1456c:	ldr	r6, [sp, #8]
   14570:	add	sp, sp, #12
   14574:	pop	{pc}		; (ldr pc, [sp], #4)
   14578:	movw	r1, #11516	; 0x2cfc
   1457c:	movt	r1, #3
   14580:	mov	r2, #5
   14584:	mov	r0, #0
   14588:	bl	117d8 <dcgettext@plt>
   1458c:	mov	r6, r0
   14590:	ldr	r0, [r4]
   14594:	cmp	r0, #0
   14598:	beq	145d0 <__assert_fail@plt+0x2a2c>
   1459c:	ldr	r4, [r5]
   145a0:	bl	1f574 <__assert_fail@plt+0xd9d0>
   145a4:	mov	r3, r0
   145a8:	movw	r2, #11528	; 0x2d08
   145ac:	movt	r2, #3
   145b0:	mov	r0, #0
   145b4:	str	r6, [sp]
   145b8:	mov	r1, r4
   145bc:	bl	118bc <error@plt>
   145c0:	movw	r3, #16856	; 0x41d8
   145c4:	movt	r3, #4
   145c8:	ldr	r0, [r3]
   145cc:	bl	11778 <_exit@plt>
   145d0:	mov	r3, r6
   145d4:	movw	r2, #11532	; 0x2d0c
   145d8:	movt	r2, #3
   145dc:	ldr	r1, [r5]
   145e0:	bl	118bc <error@plt>
   145e4:	b	145c0 <__assert_fail@plt+0x2a1c>
   145e8:	ldm	r0, {r0, r3}
   145ec:	eor	r3, r3, r0
   145f0:	udiv	r0, r3, r1
   145f4:	mls	r0, r0, r1, r3
   145f8:	bx	lr
   145fc:	strd	r4, [sp, #-8]!
   14600:	ldrd	r2, [r1]
   14604:	ldrd	r4, [r0]
   14608:	cmp	r5, r3
   1460c:	cmpeq	r4, r2
   14610:	ldrd	r4, [sp]
   14614:	add	sp, sp, #8
   14618:	moveq	r0, #1
   1461c:	movne	r0, #0
   14620:	bx	lr
   14624:	udiv	r3, r0, r1
   14628:	mls	r0, r3, r1, r0
   1462c:	bx	lr
   14630:	str	r4, [sp, #-8]!
   14634:	mov	r4, r0
   14638:	ldr	r0, [r0, #8]
   1463c:	str	lr, [sp, #4]
   14640:	bl	1acec <__assert_fail@plt+0x9148>
   14644:	mov	r0, r4
   14648:	ldr	r4, [sp]
   1464c:	ldr	lr, [sp, #4]
   14650:	add	sp, sp, #8
   14654:	b	17ac8 <__assert_fail@plt+0x5f24>
   14658:	strd	r4, [sp, #-16]!
   1465c:	mov	r5, r1
   14660:	ldr	r4, [r1]
   14664:	str	r6, [sp, #8]
   14668:	mov	r6, r0
   1466c:	str	lr, [sp, #12]
   14670:	sub	sp, sp, #16
   14674:	cmp	r4, #0
   14678:	beq	146c8 <__assert_fail@plt+0x2b24>
   1467c:	ldrd	r0, [r4]
   14680:	cmp	r1, r3
   14684:	cmpeq	r0, r2
   14688:	beq	146f0 <__assert_fail@plt+0x2b4c>
   1468c:	mov	r1, r4
   14690:	ldr	r0, [r6]
   14694:	strd	r2, [r4]
   14698:	bl	1b110 <__assert_fail@plt+0x956c>
   1469c:	cmp	r0, #0
   146a0:	beq	146e8 <__assert_fail@plt+0x2b44>
   146a4:	cmp	r4, r0
   146a8:	beq	146f8 <__assert_fail@plt+0x2b54>
   146ac:	ldr	r0, [r0, #8]
   146b0:	str	r0, [r4, #8]
   146b4:	add	sp, sp, #16
   146b8:	ldrd	r4, [sp]
   146bc:	ldr	r6, [sp, #8]
   146c0:	add	sp, sp, #12
   146c4:	pop	{pc}		; (ldr pc, [sp], #4)
   146c8:	mov	r0, #16
   146cc:	strd	r2, [sp, #8]
   146d0:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   146d4:	cmp	r0, #0
   146d8:	mov	r4, r0
   146dc:	str	r0, [r5]
   146e0:	ldrd	r2, [sp, #8]
   146e4:	bne	1468c <__assert_fail@plt+0x2ae8>
   146e8:	mov	r0, #0
   146ec:	b	146b4 <__assert_fail@plt+0x2b10>
   146f0:	ldr	r0, [r4, #8]
   146f4:	b	146b4 <__assert_fail@plt+0x2b10>
   146f8:	mov	ip, #0
   146fc:	movw	r2, #17956	; 0x4624
   14700:	movt	r2, #1
   14704:	mov	r3, ip
   14708:	mov	r1, ip
   1470c:	movw	r0, #1021	; 0x3fd
   14710:	str	ip, [r5]
   14714:	str	ip, [sp]
   14718:	bl	1aab8 <__assert_fail@plt+0x8f14>
   1471c:	str	r0, [r4, #8]
   14720:	b	146b4 <__assert_fail@plt+0x2b10>
   14724:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14728:	subs	r4, r2, #1
   1472c:	sbc	r5, r3, #0
   14730:	strd	r6, [sp, #8]
   14734:	mov	r7, #0
   14738:	cmp	r5, r7
   1473c:	mvn	r6, #-2147483646	; 0x80000002
   14740:	str	r8, [sp, #16]
   14744:	cmpeq	r4, r6
   14748:	str	lr, [sp, #20]
   1474c:	movls	r0, r2
   14750:	bls	147a4 <__assert_fail@plt+0x2c00>
   14754:	mov	r4, r0
   14758:	ldr	r0, [r0]
   1475c:	mov	r5, r3
   14760:	mov	r6, r2
   14764:	cmp	r0, #0
   14768:	beq	1478c <__assert_fail@plt+0x2be8>
   1476c:	mov	r2, r6
   14770:	mov	r3, r5
   14774:	ldrd	r4, [sp]
   14778:	ldrd	r6, [sp, #8]
   1477c:	ldr	r8, [sp, #16]
   14780:	ldr	lr, [sp, #20]
   14784:	add	sp, sp, #24
   14788:	b	1c02c <__assert_fail@plt+0xa488>
   1478c:	mvn	r0, #-2147483648	; 0x80000000
   14790:	bl	1bf74 <__assert_fail@plt+0xa3d0>
   14794:	cmp	r0, #0
   14798:	str	r0, [r4]
   1479c:	bne	1476c <__assert_fail@plt+0x2bc8>
   147a0:	mvn	r0, #0
   147a4:	ldrd	r4, [sp]
   147a8:	ldrd	r6, [sp, #8]
   147ac:	ldr	r8, [sp, #16]
   147b0:	add	sp, sp, #20
   147b4:	pop	{pc}		; (ldr pc, [sp], #4)
   147b8:	mov	r0, #12
   147bc:	str	r4, [sp, #-8]!
   147c0:	str	lr, [sp, #4]
   147c4:	sub	sp, sp, #8
   147c8:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   147cc:	subs	r4, r0, #0
   147d0:	beq	14818 <__assert_fail@plt+0x2c74>
   147d4:	movw	r1, #17968	; 0x4630
   147d8:	movt	r1, #1
   147dc:	movw	r3, #17916	; 0x45fc
   147e0:	movt	r3, #1
   147e4:	movw	r2, #17896	; 0x45e8
   147e8:	movt	r2, #1
   147ec:	str	r1, [sp]
   147f0:	mov	r0, #11
   147f4:	mov	r1, #0
   147f8:	bl	1aab8 <__assert_fail@plt+0x8f14>
   147fc:	cmp	r0, #0
   14800:	mov	r3, r0
   14804:	str	r0, [r4]
   14808:	movne	r3, #0
   1480c:	strne	r3, [r4, #4]
   14810:	strne	r3, [r4, #8]
   14814:	beq	1482c <__assert_fail@plt+0x2c88>
   14818:	mov	r0, r4
   1481c:	add	sp, sp, #8
   14820:	ldr	r4, [sp]
   14824:	add	sp, sp, #4
   14828:	pop	{pc}		; (ldr pc, [sp], #4)
   1482c:	mov	r0, r4
   14830:	mov	r4, r3
   14834:	bl	17ac8 <__assert_fail@plt+0x5f24>
   14838:	b	14818 <__assert_fail@plt+0x2c74>
   1483c:	str	r4, [sp, #-8]!
   14840:	mov	r4, r0
   14844:	ldr	r0, [r0]
   14848:	str	lr, [sp, #4]
   1484c:	bl	1acec <__assert_fail@plt+0x9148>
   14850:	ldr	r0, [r4, #4]
   14854:	cmp	r0, #0
   14858:	beq	14860 <__assert_fail@plt+0x2cbc>
   1485c:	bl	1bffc <__assert_fail@plt+0xa458>
   14860:	ldr	r0, [r4, #8]
   14864:	bl	17ac8 <__assert_fail@plt+0x5f24>
   14868:	mov	r0, r4
   1486c:	ldr	r4, [sp]
   14870:	ldr	lr, [sp, #4]
   14874:	add	sp, sp, #8
   14878:	b	17ac8 <__assert_fail@plt+0x5f24>
   1487c:	add	r1, r0, #8
   14880:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14884:	mov	r4, r0
   14888:	strd	r6, [sp, #8]
   1488c:	str	r8, [sp, #16]
   14890:	str	lr, [sp, #20]
   14894:	ldrd	r6, [sp, #24]
   14898:	bl	14658 <__assert_fail@plt+0x2ab4>
   1489c:	subs	r5, r0, #0
   148a0:	beq	148e0 <__assert_fail@plt+0x2d3c>
   148a4:	mov	r2, r6
   148a8:	mov	r3, r7
   148ac:	add	r0, r4, #4
   148b0:	bl	14724 <__assert_fail@plt+0x2b80>
   148b4:	cmn	r0, #1
   148b8:	beq	148e0 <__assert_fail@plt+0x2d3c>
   148bc:	mov	r1, r0
   148c0:	mov	r2, #0
   148c4:	ldrd	r6, [sp, #8]
   148c8:	mov	r0, r5
   148cc:	ldrd	r4, [sp]
   148d0:	ldr	r8, [sp, #16]
   148d4:	ldr	lr, [sp, #20]
   148d8:	add	sp, sp, #24
   148dc:	b	1af74 <__assert_fail@plt+0x93d0>
   148e0:	ldrd	r4, [sp]
   148e4:	mvn	r0, #0
   148e8:	ldrd	r6, [sp, #8]
   148ec:	ldr	r8, [sp, #16]
   148f0:	add	sp, sp, #20
   148f4:	pop	{pc}		; (ldr pc, [sp], #4)
   148f8:	add	r1, r0, #8
   148fc:	strd	r4, [sp, #-16]!
   14900:	mov	r4, r0
   14904:	str	r6, [sp, #8]
   14908:	str	lr, [sp, #12]
   1490c:	bl	14658 <__assert_fail@plt+0x2ab4>
   14910:	subs	r5, r0, #0
   14914:	beq	14950 <__assert_fail@plt+0x2dac>
   14918:	add	r0, r4, #4
   1491c:	ldrd	r2, [sp, #16]
   14920:	bl	14724 <__assert_fail@plt+0x2b80>
   14924:	cmn	r0, #1
   14928:	beq	14950 <__assert_fail@plt+0x2dac>
   1492c:	mov	r1, r0
   14930:	mov	r0, r5
   14934:	bl	1a798 <__assert_fail@plt+0x8bf4>
   14938:	adds	r0, r0, #0
   1493c:	ldrd	r4, [sp]
   14940:	movne	r0, #1
   14944:	ldr	r6, [sp, #8]
   14948:	add	sp, sp, #12
   1494c:	pop	{pc}		; (ldr pc, [sp], #4)
   14950:	ldrd	r4, [sp]
   14954:	mvn	r0, #0
   14958:	ldr	r6, [sp, #8]
   1495c:	add	sp, sp, #12
   14960:	pop	{pc}		; (ldr pc, [sp], #4)
   14964:	ldr	r3, [r3]
   14968:	bx	r3
   1496c:	b	17ac8 <__assert_fail@plt+0x5f24>
   14970:	str	r4, [sp, #-8]!
   14974:	str	lr, [sp, #4]
   14978:	bl	1c338 <__assert_fail@plt+0xa794>
   1497c:	clz	r0, r0
   14980:	ldr	r4, [sp]
   14984:	add	sp, sp, #4
   14988:	lsr	r0, r0, #5
   1498c:	pop	{pc}		; (ldr pc, [sp], #4)
   14990:	str	r4, [sp, #-8]!
   14994:	str	lr, [sp, #4]
   14998:	bl	1170c <strcmp@plt>
   1499c:	clz	r0, r0
   149a0:	ldr	r4, [sp]
   149a4:	add	sp, sp, #4
   149a8:	lsr	r0, r0, #5
   149ac:	pop	{pc}		; (ldr pc, [sp], #4)
   149b0:	b	1aa48 <__assert_fail@plt+0x8ea4>
   149b4:	tst	r2, #8
   149b8:	and	r2, r2, #16
   149bc:	beq	14a88 <__assert_fail@plt+0x2ee4>
   149c0:	cmp	r2, #0
   149c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   149c8:	mov	r5, r0
   149cc:	strd	r6, [sp, #8]
   149d0:	mov	r6, r1
   149d4:	str	r8, [sp, #16]
   149d8:	str	lr, [sp, #20]
   149dc:	bne	14a24 <__assert_fail@plt+0x2e80>
   149e0:	bl	11988 <strlen@plt>
   149e4:	mov	r2, r0
   149e8:	mov	r7, r0
   149ec:	mov	r1, r6
   149f0:	mov	r0, r5
   149f4:	bl	11b5c <strncmp@plt>
   149f8:	subs	r4, r0, #0
   149fc:	bne	14a0c <__assert_fail@plt+0x2e68>
   14a00:	ldrb	r3, [r6, r7]
   14a04:	cmp	r3, #47	; 0x2f
   14a08:	movne	r4, r3
   14a0c:	mov	r0, r4
   14a10:	ldrd	r4, [sp]
   14a14:	ldrd	r6, [sp, #8]
   14a18:	ldr	r8, [sp, #16]
   14a1c:	add	sp, sp, #20
   14a20:	pop	{pc}		; (ldr pc, [sp], #4)
   14a24:	mov	r0, r1
   14a28:	mov	r8, #47	; 0x2f
   14a2c:	bl	2e4a0 <__assert_fail@plt+0x1c8fc>
   14a30:	mov	r6, r0
   14a34:	mov	r7, #0
   14a38:	mov	r3, r0
   14a3c:	b	14a58 <__assert_fail@plt+0x2eb4>
   14a40:	strb	r7, [r4]
   14a44:	bl	1c338 <__assert_fail@plt+0xa794>
   14a48:	mov	r3, r4
   14a4c:	subs	r4, r0, #0
   14a50:	ble	14a7c <__assert_fail@plt+0x2ed8>
   14a54:	strb	r8, [r3], #1
   14a58:	mov	r1, #47	; 0x2f
   14a5c:	mov	r0, r3
   14a60:	bl	11994 <strchr@plt>
   14a64:	subs	r4, r0, #0
   14a68:	mov	r1, r6
   14a6c:	mov	r0, r5
   14a70:	bne	14a40 <__assert_fail@plt+0x2e9c>
   14a74:	bl	1c338 <__assert_fail@plt+0xa794>
   14a78:	mov	r4, r0
   14a7c:	mov	r0, r6
   14a80:	bl	17ac8 <__assert_fail@plt+0x5f24>
   14a84:	b	14a0c <__assert_fail@plt+0x2e68>
   14a88:	cmp	r2, #0
   14a8c:	beq	14a94 <__assert_fail@plt+0x2ef0>
   14a90:	b	1c338 <__assert_fail@plt+0xa794>
   14a94:	b	1170c <strcmp@plt>
   14a98:	mov	r3, #0
   14a9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14aa0:	strd	r6, [sp, #8]
   14aa4:	mov	r4, r3
   14aa8:	movw	r7, #11980	; 0x2ecc
   14aac:	movt	r7, #3
   14ab0:	strd	r8, [sp, #16]
   14ab4:	mov	r6, #1
   14ab8:	strd	sl, [sp, #24]
   14abc:	mov	sl, #0
   14ac0:	mov	fp, #0
   14ac4:	str	lr, [sp, #32]
   14ac8:	sub	sp, sp, #60	; 0x3c
   14acc:	mov	r8, r1
   14ad0:	strb	r3, [sp]
   14ad4:	strd	sl, [sp, #4]
   14ad8:	strb	r3, [sp, #12]
   14adc:	str	r0, [sp, #16]
   14ae0:	b	14b08 <__assert_fail@plt+0x2f64>
   14ae4:	mov	r0, r9
   14ae8:	bl	117a8 <towlower@plt>
   14aec:	ldr	r3, [sp, #20]
   14af0:	rsb	r4, r4, r4, lsl #5
   14af4:	mov	r2, #0
   14af8:	add	r4, r4, r0
   14afc:	strb	r2, [sp, #12]
   14b00:	add	r5, r5, r3
   14b04:	str	r5, [sp, #16]
   14b08:	ldrb	r3, [sp]
   14b0c:	ldr	r5, [sp, #16]
   14b10:	cmp	r3, #0
   14b14:	addne	sl, sp, #4
   14b18:	bne	14b84 <__assert_fail@plt+0x2fe0>
   14b1c:	ldrb	r3, [r5]
   14b20:	lsr	r2, r3, #5
   14b24:	and	r3, r3, #31
   14b28:	ldr	r2, [r7, r2, lsl #2]
   14b2c:	lsr	r3, r2, r3
   14b30:	tst	r3, #1
   14b34:	beq	14b6c <__assert_fail@plt+0x2fc8>
   14b38:	str	r6, [sp, #20]
   14b3c:	ldrb	r9, [r5]
   14b40:	strb	r6, [sp, #12]
   14b44:	strb	r6, [sp, #24]
   14b48:	cmp	r9, #0
   14b4c:	str	r9, [sp, #28]
   14b50:	beq	14c08 <__assert_fail@plt+0x3064>
   14b54:	ldrb	r3, [sp, #24]
   14b58:	ldr	r5, [sp, #16]
   14b5c:	cmp	r3, #0
   14b60:	bne	14ae4 <__assert_fail@plt+0x2f40>
   14b64:	ldrb	r0, [r5]
   14b68:	b	14aec <__assert_fail@plt+0x2f48>
   14b6c:	add	sl, sp, #4
   14b70:	mov	r0, sl
   14b74:	bl	117b4 <mbsinit@plt>
   14b78:	cmp	r0, #0
   14b7c:	beq	14c6c <__assert_fail@plt+0x30c8>
   14b80:	strb	r6, [sp]
   14b84:	bl	11880 <__ctype_get_mb_cur_max@plt>
   14b88:	mov	r1, r0
   14b8c:	mov	r0, r5
   14b90:	bl	2d4f0 <__assert_fail@plt+0x1b94c>
   14b94:	mov	r2, r0
   14b98:	mov	r3, sl
   14b9c:	mov	r1, r5
   14ba0:	add	r0, sp, #28
   14ba4:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   14ba8:	cmn	r0, #1
   14bac:	str	r0, [sp, #20]
   14bb0:	beq	14c2c <__assert_fail@plt+0x3088>
   14bb4:	cmn	r0, #2
   14bb8:	beq	14c44 <__assert_fail@plt+0x30a0>
   14bbc:	cmp	r0, #0
   14bc0:	bne	14c64 <__assert_fail@plt+0x30c0>
   14bc4:	ldr	r3, [sp, #16]
   14bc8:	str	r6, [sp, #20]
   14bcc:	ldrb	r3, [r3]
   14bd0:	cmp	r3, #0
   14bd4:	bne	14cac <__assert_fail@plt+0x3108>
   14bd8:	ldr	r9, [sp, #28]
   14bdc:	cmp	r9, #0
   14be0:	bne	14c8c <__assert_fail@plt+0x30e8>
   14be4:	mov	r0, sl
   14be8:	strb	r6, [sp, #24]
   14bec:	bl	117b4 <mbsinit@plt>
   14bf0:	cmp	r0, #0
   14bf4:	strb	r6, [sp, #12]
   14bf8:	movne	r3, #0
   14bfc:	strbne	r3, [sp]
   14c00:	cmp	r9, #0
   14c04:	bne	14b54 <__assert_fail@plt+0x2fb0>
   14c08:	udiv	r0, r4, r8
   14c0c:	mls	r0, r8, r0, r4
   14c10:	add	sp, sp, #60	; 0x3c
   14c14:	ldrd	r4, [sp]
   14c18:	ldrd	r6, [sp, #8]
   14c1c:	ldrd	r8, [sp, #16]
   14c20:	ldrd	sl, [sp, #24]
   14c24:	add	sp, sp, #32
   14c28:	pop	{pc}		; (ldr pc, [sp], #4)
   14c2c:	mov	r3, #0
   14c30:	strb	r6, [sp, #12]
   14c34:	str	r6, [sp, #20]
   14c38:	strb	r3, [sp, #24]
   14c3c:	ldr	r9, [sp, #28]
   14c40:	b	14b54 <__assert_fail@plt+0x2fb0>
   14c44:	ldr	r0, [sp, #16]
   14c48:	bl	11988 <strlen@plt>
   14c4c:	mov	r3, #0
   14c50:	strb	r6, [sp, #12]
   14c54:	str	r0, [sp, #20]
   14c58:	strb	r3, [sp, #24]
   14c5c:	ldr	r9, [sp, #28]
   14c60:	b	14b54 <__assert_fail@plt+0x2fb0>
   14c64:	ldr	r9, [sp, #28]
   14c68:	b	14be4 <__assert_fail@plt+0x3040>
   14c6c:	movw	r3, #11536	; 0x2d10
   14c70:	movt	r3, #3
   14c74:	movw	r1, #11556	; 0x2d24
   14c78:	movt	r1, #3
   14c7c:	movw	r0, #11572	; 0x2d34
   14c80:	movt	r0, #3
   14c84:	mov	r2, #143	; 0x8f
   14c88:	bl	11ba4 <__assert_fail@plt>
   14c8c:	movw	r3, #11536	; 0x2d10
   14c90:	movt	r3, #3
   14c94:	movw	r1, #11556	; 0x2d24
   14c98:	movt	r1, #3
   14c9c:	movw	r0, #11620	; 0x2d64
   14ca0:	movt	r0, #3
   14ca4:	mov	r2, #172	; 0xac
   14ca8:	bl	11ba4 <__assert_fail@plt>
   14cac:	movw	r3, #11536	; 0x2d10
   14cb0:	movt	r3, #3
   14cb4:	movw	r1, #11556	; 0x2d24
   14cb8:	movt	r1, #3
   14cbc:	movw	r0, #11596	; 0x2d4c
   14cc0:	movt	r0, #3
   14cc4:	mov	r2, #171	; 0xab
   14cc8:	bl	11ba4 <__assert_fail@plt>
   14ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   14cd0:	and	ip, r1, #134217728	; 0x8000000
   14cd4:	and	lr, r1, #32
   14cd8:	ldrb	r3, [r0]
   14cdc:	and	r1, r1, #2
   14ce0:	add	r2, r0, #1
   14ce4:	cmp	r3, #125	; 0x7d
   14ce8:	ldrls	pc, [pc, r3, lsl #2]
   14cec:	b	14ef8 <__assert_fail@plt+0x3354>
   14cf0:	andeq	r4, r1, r8, asr #30
   14cf4:	strdeq	r4, [r1], -r8
   14cf8:	strdeq	r4, [r1], -r8
   14cfc:	strdeq	r4, [r1], -r8
   14d00:	strdeq	r4, [r1], -r8
   14d04:	strdeq	r4, [r1], -r8
   14d08:	strdeq	r4, [r1], -r8
   14d0c:	strdeq	r4, [r1], -r8
   14d10:	strdeq	r4, [r1], -r8
   14d14:	strdeq	r4, [r1], -r8
   14d18:	strdeq	r4, [r1], -r8
   14d1c:	strdeq	r4, [r1], -r8
   14d20:	strdeq	r4, [r1], -r8
   14d24:	strdeq	r4, [r1], -r8
   14d28:	strdeq	r4, [r1], -r8
   14d2c:	strdeq	r4, [r1], -r8
   14d30:	strdeq	r4, [r1], -r8
   14d34:	strdeq	r4, [r1], -r8
   14d38:	strdeq	r4, [r1], -r8
   14d3c:	strdeq	r4, [r1], -r8
   14d40:	strdeq	r4, [r1], -r8
   14d44:	strdeq	r4, [r1], -r8
   14d48:	strdeq	r4, [r1], -r8
   14d4c:	strdeq	r4, [r1], -r8
   14d50:	strdeq	r4, [r1], -r8
   14d54:	strdeq	r4, [r1], -r8
   14d58:	strdeq	r4, [r1], -r8
   14d5c:	strdeq	r4, [r1], -r8
   14d60:	strdeq	r4, [r1], -r8
   14d64:	strdeq	r4, [r1], -r8
   14d68:	strdeq	r4, [r1], -r8
   14d6c:	strdeq	r4, [r1], -r8
   14d70:	strdeq	r4, [r1], -r8
   14d74:	andeq	r4, r1, ip, lsr #30
   14d78:	strdeq	r4, [r1], -r8
   14d7c:	strdeq	r4, [r1], -r8
   14d80:	strdeq	r4, [r1], -r8
   14d84:	strdeq	r4, [r1], -r8
   14d88:	strdeq	r4, [r1], -r8
   14d8c:	strdeq	r4, [r1], -r8
   14d90:	andeq	r4, r1, r8, ror #29
   14d94:	andeq	r4, r1, r8, ror #29
   14d98:	strdeq	r4, [r1], -r0
   14d9c:	andeq	r4, r1, ip, lsr #30
   14da0:	strdeq	r4, [r1], -r8
   14da4:	strdeq	r4, [r1], -r8
   14da8:	andeq	r4, r1, r8, ror #29
   14dac:	strdeq	r4, [r1], -r8
   14db0:	strdeq	r4, [r1], -r8
   14db4:	strdeq	r4, [r1], -r8
   14db8:	strdeq	r4, [r1], -r8
   14dbc:	strdeq	r4, [r1], -r8
   14dc0:	strdeq	r4, [r1], -r8
   14dc4:	strdeq	r4, [r1], -r8
   14dc8:	strdeq	r4, [r1], -r8
   14dcc:	strdeq	r4, [r1], -r8
   14dd0:	strdeq	r4, [r1], -r8
   14dd4:	strdeq	r4, [r1], -r8
   14dd8:	strdeq	r4, [r1], -r8
   14ddc:	strdeq	r4, [r1], -r8
   14de0:	strdeq	r4, [r1], -r8
   14de4:	strdeq	r4, [r1], -r8
   14de8:	strdeq	r4, [r1], -r8
   14dec:	strdeq	r4, [r1], -r0
   14df0:	andeq	r4, r1, ip, lsr #30
   14df4:	strdeq	r4, [r1], -r8
   14df8:	strdeq	r4, [r1], -r8
   14dfc:	strdeq	r4, [r1], -r8
   14e00:	strdeq	r4, [r1], -r8
   14e04:	strdeq	r4, [r1], -r8
   14e08:	strdeq	r4, [r1], -r8
   14e0c:	strdeq	r4, [r1], -r8
   14e10:	strdeq	r4, [r1], -r8
   14e14:	strdeq	r4, [r1], -r8
   14e18:	strdeq	r4, [r1], -r8
   14e1c:	strdeq	r4, [r1], -r8
   14e20:	strdeq	r4, [r1], -r8
   14e24:	strdeq	r4, [r1], -r8
   14e28:	strdeq	r4, [r1], -r8
   14e2c:	strdeq	r4, [r1], -r8
   14e30:	strdeq	r4, [r1], -r8
   14e34:	strdeq	r4, [r1], -r8
   14e38:	strdeq	r4, [r1], -r8
   14e3c:	strdeq	r4, [r1], -r8
   14e40:	strdeq	r4, [r1], -r8
   14e44:	strdeq	r4, [r1], -r8
   14e48:	strdeq	r4, [r1], -r8
   14e4c:	strdeq	r4, [r1], -r8
   14e50:	strdeq	r4, [r1], -r8
   14e54:	strdeq	r4, [r1], -r8
   14e58:	strdeq	r4, [r1], -r8
   14e5c:	strdeq	r4, [r1], -r0
   14e60:	andeq	r4, r1, r4, lsl #30
   14e64:	strdeq	r4, [r1], -r8
   14e68:	strdeq	r4, [r1], -r8
   14e6c:	strdeq	r4, [r1], -r8
   14e70:	strdeq	r4, [r1], -r8
   14e74:	strdeq	r4, [r1], -r8
   14e78:	strdeq	r4, [r1], -r8
   14e7c:	strdeq	r4, [r1], -r8
   14e80:	strdeq	r4, [r1], -r8
   14e84:	strdeq	r4, [r1], -r8
   14e88:	strdeq	r4, [r1], -r8
   14e8c:	strdeq	r4, [r1], -r8
   14e90:	strdeq	r4, [r1], -r8
   14e94:	strdeq	r4, [r1], -r8
   14e98:	strdeq	r4, [r1], -r8
   14e9c:	strdeq	r4, [r1], -r8
   14ea0:	strdeq	r4, [r1], -r8
   14ea4:	strdeq	r4, [r1], -r8
   14ea8:	strdeq	r4, [r1], -r8
   14eac:	strdeq	r4, [r1], -r8
   14eb0:	strdeq	r4, [r1], -r8
   14eb4:	strdeq	r4, [r1], -r8
   14eb8:	strdeq	r4, [r1], -r8
   14ebc:	strdeq	r4, [r1], -r8
   14ec0:	strdeq	r4, [r1], -r8
   14ec4:	strdeq	r4, [r1], -r8
   14ec8:	strdeq	r4, [r1], -r8
   14ecc:	strdeq	r4, [r1], -r8
   14ed0:	strdeq	r4, [r1], -r8
   14ed4:	strdeq	r4, [r1], -r8
   14ed8:	strdeq	r4, [r1], -r8
   14edc:	andeq	r4, r1, r8, ror #29
   14ee0:	strdeq	r4, [r1], -r8
   14ee4:	andeq	r4, r1, r8, ror #29
   14ee8:	cmp	ip, #0
   14eec:	beq	14ef8 <__assert_fail@plt+0x3354>
   14ef0:	mov	r0, #1
   14ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef8:	ldrb	r3, [r0, #1]
   14efc:	mov	r0, r2
   14f00:	b	14ce0 <__assert_fail@plt+0x313c>
   14f04:	cmp	ip, #0
   14f08:	bne	14ef8 <__assert_fail@plt+0x3354>
   14f0c:	cmp	r1, #0
   14f10:	bne	14f20 <__assert_fail@plt+0x337c>
   14f14:	ldrb	r3, [r0, #1]
   14f18:	cmp	r3, #0
   14f1c:	addne	r2, r0, #2
   14f20:	ldrb	r3, [r2]
   14f24:	mov	r0, r2
   14f28:	b	14ce0 <__assert_fail@plt+0x313c>
   14f2c:	cmp	lr, #0
   14f30:	beq	14ef8 <__assert_fail@plt+0x3354>
   14f34:	ldrb	r3, [r0, #1]
   14f38:	cmp	r3, #40	; 0x28
   14f3c:	beq	14ef0 <__assert_fail@plt+0x334c>
   14f40:	mov	r0, r2
   14f44:	b	14ce0 <__assert_fail@plt+0x313c>
   14f48:	mov	r0, #0
   14f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f50:	strd	r4, [sp, #-16]!
   14f54:	mov	r4, r0
   14f58:	mov	r0, #8
   14f5c:	mov	r5, r1
   14f60:	str	r6, [sp, #8]
   14f64:	str	lr, [sp, #12]
   14f68:	bl	2e050 <__assert_fail@plt+0x1c4ac>
   14f6c:	ldr	r3, [r4, #4]
   14f70:	ldr	r6, [sp, #8]
   14f74:	str	r0, [r4, #4]
   14f78:	stm	r0, {r3, r5}
   14f7c:	ldrd	r4, [sp]
   14f80:	add	sp, sp, #12
   14f84:	pop	{pc}		; (ldr pc, [sp], #4)
   14f88:	b	14ccc <__assert_fail@plt+0x3128>
   14f8c:	mov	r0, #8
   14f90:	b	2e328 <__assert_fail@plt+0x1c784>
   14f94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14f98:	ldr	r4, [r0]
   14f9c:	strd	r6, [sp, #8]
   14fa0:	mov	r6, r0
   14fa4:	str	r8, [sp, #16]
   14fa8:	str	lr, [sp, #20]
   14fac:	cmp	r4, #0
   14fb0:	beq	15030 <__assert_fail@plt+0x348c>
   14fb4:	ldr	r7, [r4]
   14fb8:	ldr	r3, [r4, #4]
   14fbc:	cmp	r3, #0
   14fc0:	beq	15074 <__assert_fail@plt+0x34d0>
   14fc4:	cmp	r3, #1
   14fc8:	bne	15020 <__assert_fail@plt+0x347c>
   14fcc:	ldr	r0, [r4, #12]
   14fd0:	ldr	r2, [r4, #20]
   14fd4:	cmp	r2, #0
   14fd8:	ble	1501c <__assert_fail@plt+0x3478>
   14fdc:	mov	r5, #0
   14fe0:	b	14fec <__assert_fail@plt+0x3448>
   14fe4:	cmp	r5, r2
   14fe8:	bge	1501c <__assert_fail@plt+0x3478>
   14fec:	add	r3, r5, r5, lsl #3
   14ff0:	add	r5, r5, #1
   14ff4:	ldr	r1, [r0, r3, lsl #2]
   14ff8:	add	r3, r0, r3, lsl #2
   14ffc:	tst	r1, #134217728	; 0x8000000
   15000:	beq	14fe4 <__assert_fail@plt+0x3440>
   15004:	add	r0, r3, #4
   15008:	bl	2d1d8 <__assert_fail@plt+0x1b634>
   1500c:	ldr	r0, [r4, #12]
   15010:	ldr	r2, [r4, #20]
   15014:	cmp	r5, r2
   15018:	blt	14fec <__assert_fail@plt+0x3448>
   1501c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   15020:	mov	r0, r4
   15024:	bl	17ac8 <__assert_fail@plt+0x5f24>
   15028:	subs	r4, r7, #0
   1502c:	bne	14fb4 <__assert_fail@plt+0x3410>
   15030:	ldr	r4, [r6, #4]
   15034:	cmp	r4, #0
   15038:	beq	15058 <__assert_fail@plt+0x34b4>
   1503c:	ldr	r5, [r4]
   15040:	ldr	r0, [r4, #4]
   15044:	bl	17ac8 <__assert_fail@plt+0x5f24>
   15048:	mov	r0, r4
   1504c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   15050:	subs	r4, r5, #0
   15054:	bne	1503c <__assert_fail@plt+0x3498>
   15058:	mov	r0, r6
   1505c:	ldrd	r4, [sp]
   15060:	ldrd	r6, [sp, #8]
   15064:	ldr	r8, [sp, #16]
   15068:	ldr	lr, [sp, #20]
   1506c:	add	sp, sp, #24
   15070:	b	17ac8 <__assert_fail@plt+0x5f24>
   15074:	ldr	r0, [r4, #12]
   15078:	bl	1acec <__assert_fail@plt+0x9148>
   1507c:	mov	r0, r4
   15080:	bl	17ac8 <__assert_fail@plt+0x5f24>
   15084:	subs	r4, r7, #0
   15088:	bne	14fb4 <__assert_fail@plt+0x3410>
   1508c:	b	15030 <__assert_fail@plt+0x348c>
   15090:	tst	r2, #268435456	; 0x10000000
   15094:	movw	r3, #18868	; 0x49b4
   15098:	movt	r3, #1
   1509c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   150a0:	mov	r4, r1
   150a4:	strd	r6, [sp, #8]
   150a8:	movw	r6, #6356	; 0x18d4
   150ac:	movt	r6, #1
   150b0:	moveq	r6, r3
   150b4:	str	r8, [sp, #16]
   150b8:	mov	r7, r0
   150bc:	str	lr, [sp, #20]
   150c0:	mov	r8, r2
   150c4:	blx	r6
   150c8:	clz	r2, r0
   150cc:	tst	r8, #1073741824	; 0x40000000
   150d0:	lsr	r2, r2, #5
   150d4:	bne	1510c <__assert_fail@plt+0x3568>
   150d8:	ldrb	r3, [r4]
   150dc:	cmp	r3, #0
   150e0:	beq	1510c <__assert_fail@plt+0x3568>
   150e4:	cmp	r0, #0
   150e8:	beq	15160 <__assert_fail@plt+0x35bc>
   150ec:	cmp	r3, #47	; 0x2f
   150f0:	add	r5, r4, #1
   150f4:	ldrb	r3, [r4, #1]
   150f8:	beq	15130 <__assert_fail@plt+0x358c>
   150fc:	cmp	r3, #0
   15100:	mov	r4, r5
   15104:	bne	150ec <__assert_fail@plt+0x3548>
   15108:	mov	r2, r3
   1510c:	ldrd	r4, [sp]
   15110:	mov	r0, r2
   15114:	ldrd	r6, [sp, #8]
   15118:	ldr	r8, [sp, #16]
   1511c:	add	sp, sp, #20
   15120:	pop	{pc}		; (ldr pc, [sp], #4)
   15124:	ldrb	r3, [r5, #1]
   15128:	mov	r4, r5
   1512c:	add	r5, r5, #1
   15130:	cmp	r3, #47	; 0x2f
   15134:	beq	15124 <__assert_fail@plt+0x3580>
   15138:	mov	r2, r8
   1513c:	mov	r1, r5
   15140:	mov	r0, r7
   15144:	blx	r6
   15148:	ldrb	r3, [r4, #1]
   1514c:	cmp	r3, #0
   15150:	beq	15168 <__assert_fail@plt+0x35c4>
   15154:	cmp	r0, #0
   15158:	mov	r4, r5
   1515c:	bne	150ec <__assert_fail@plt+0x3548>
   15160:	mov	r2, #1
   15164:	b	1510c <__assert_fail@plt+0x3568>
   15168:	clz	r2, r0
   1516c:	lsr	r2, r2, #5
   15170:	b	1510c <__assert_fail@plt+0x3568>
   15174:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15178:	strd	r6, [sp, #8]
   1517c:	ldr	r6, [r0]
   15180:	strd	r8, [sp, #16]
   15184:	strd	sl, [sp, #24]
   15188:	str	lr, [sp, #32]
   1518c:	sub	sp, sp, #12
   15190:	cmp	r6, #0
   15194:	moveq	r0, r6
   15198:	beq	152e0 <__assert_fail@plt+0x373c>
   1519c:	ldr	r3, [r6, #4]
   151a0:	mov	r7, r1
   151a4:	mov	r5, #0
   151a8:	cmp	r3, #0
   151ac:	bne	1524c <__assert_fail@plt+0x36a8>
   151b0:	cmp	r5, #0
   151b4:	beq	152fc <__assert_fail@plt+0x3758>
   151b8:	ldr	r8, [r6, #8]
   151bc:	mov	r4, r7
   151c0:	ldr	sl, [r6, #12]
   151c4:	and	r9, r8, #8
   151c8:	mov	r1, r4
   151cc:	mov	r0, r5
   151d0:	bl	11898 <strcpy@plt>
   151d4:	mov	r1, r5
   151d8:	mov	r0, sl
   151dc:	bl	1a798 <__assert_fail@plt+0x8bf4>
   151e0:	subs	fp, r0, #0
   151e4:	mov	r1, #47	; 0x2f
   151e8:	mov	r0, r5
   151ec:	bne	152c4 <__assert_fail@plt+0x3720>
   151f0:	cmp	r9, #0
   151f4:	beq	1520c <__assert_fail@plt+0x3668>
   151f8:	bl	11a78 <strrchr@plt>
   151fc:	cmp	r0, #0
   15200:	beq	1520c <__assert_fail@plt+0x3668>
   15204:	strb	fp, [r0]
   15208:	b	151d4 <__assert_fail@plt+0x3630>
   1520c:	tst	r8, #1073741824	; 0x40000000
   15210:	bne	15230 <__assert_fail@plt+0x368c>
   15214:	mov	r0, r4
   15218:	mov	r1, #47	; 0x2f
   1521c:	bl	11994 <strchr@plt>
   15220:	cmp	r0, #0
   15224:	beq	15230 <__assert_fail@plt+0x368c>
   15228:	adds	r4, r0, #1
   1522c:	bne	151c8 <__assert_fail@plt+0x3624>
   15230:	ldr	r3, [r6]
   15234:	cmp	r3, #0
   15238:	beq	15314 <__assert_fail@plt+0x3770>
   1523c:	mov	r6, r3
   15240:	ldr	r3, [r6, #4]
   15244:	cmp	r3, #0
   15248:	beq	151b0 <__assert_fail@plt+0x360c>
   1524c:	ldr	r4, [r6, #12]
   15250:	ldr	r9, [r6, #20]
   15254:	cmp	r9, #0
   15258:	ble	15230 <__assert_fail@plt+0x368c>
   1525c:	add	r4, r4, #4
   15260:	mov	r8, #0
   15264:	b	15290 <__assert_fail@plt+0x36ec>
   15268:	str	r3, [sp]
   1526c:	add	r8, r8, #1
   15270:	bl	2d26c <__assert_fail@plt+0x1b6c8>
   15274:	clz	r0, r0
   15278:	lsr	r0, r0, #5
   1527c:	cmp	r0, #0
   15280:	bne	152c4 <__assert_fail@plt+0x3720>
   15284:	cmp	r9, r8
   15288:	add	r4, r4, #36	; 0x24
   1528c:	beq	15230 <__assert_fail@plt+0x368c>
   15290:	ldr	ip, [r4, #-4]
   15294:	mov	r3, #0
   15298:	mov	r1, r7
   1529c:	mov	r2, r3
   152a0:	mov	r0, r4
   152a4:	tst	ip, #134217728	; 0x8000000
   152a8:	bne	15268 <__assert_fail@plt+0x36c4>
   152ac:	mov	r2, ip
   152b0:	ldr	r0, [r4]
   152b4:	add	r8, r8, #1
   152b8:	bl	15090 <__assert_fail@plt+0x34ec>
   152bc:	cmp	r0, #0
   152c0:	beq	15284 <__assert_fail@plt+0x36e0>
   152c4:	mov	r4, #0
   152c8:	mov	r0, r5
   152cc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   152d0:	ldr	r0, [r6, #8]
   152d4:	eor	r0, r0, #536870912	; 0x20000000
   152d8:	ubfx	r0, r0, #29, #1
   152dc:	eor	r0, r0, r4
   152e0:	add	sp, sp, #12
   152e4:	ldrd	r4, [sp]
   152e8:	ldrd	r6, [sp, #8]
   152ec:	ldrd	r8, [sp, #16]
   152f0:	ldrd	sl, [sp, #24]
   152f4:	add	sp, sp, #32
   152f8:	pop	{pc}		; (ldr pc, [sp], #4)
   152fc:	mov	r0, r7
   15300:	bl	11988 <strlen@plt>
   15304:	add	r0, r0, #1
   15308:	bl	2e050 <__assert_fail@plt+0x1c4ac>
   1530c:	mov	r5, r0
   15310:	b	151b8 <__assert_fail@plt+0x3614>
   15314:	mov	r4, #1
   15318:	b	152c8 <__assert_fail@plt+0x3724>
   1531c:	tst	r2, #402653184	; 0x18000000
   15320:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15324:	mov	r5, r2
   15328:	ldr	r4, [r0]
   1532c:	strd	r6, [sp, #8]
   15330:	mov	r6, r0
   15334:	mov	r7, r1
   15338:	strd	r8, [sp, #16]
   1533c:	str	lr, [sp, #24]
   15340:	sub	sp, sp, #12
   15344:	beq	15430 <__assert_fail@plt+0x388c>
   15348:	mov	r1, r2
   1534c:	mov	r0, r7
   15350:	bl	14ccc <__assert_fail@plt+0x3128>
   15354:	cmp	r0, #0
   15358:	beq	15430 <__assert_fail@plt+0x388c>
   1535c:	cmp	r4, #0
   15360:	beq	15370 <__assert_fail@plt+0x37cc>
   15364:	ldr	r3, [r4, #4]
   15368:	cmp	r3, #1
   1536c:	beq	1556c <__assert_fail@plt+0x39c8>
   15370:	mov	r0, #24
   15374:	bl	2e328 <__assert_fail@plt+0x1c784>
   15378:	ldr	r3, [r6]
   1537c:	mov	r2, #1
   15380:	mov	r4, r0
   15384:	str	r0, [r6]
   15388:	str	r3, [r0]
   1538c:	stmib	r0, {r2, r5}
   15390:	add	r0, r4, #12
   15394:	ldm	r0, {r0, r3, r9}
   15398:	cmp	r9, r3
   1539c:	beq	15580 <__assert_fail@plt+0x39dc>
   153a0:	add	r3, r9, r9, lsl #3
   153a4:	add	r2, r9, #1
   153a8:	tst	r5, #134217728	; 0x8000000
   153ac:	lsl	r3, r3, #2
   153b0:	str	r2, [r4, #20]
   153b4:	add	r8, r0, r3
   153b8:	str	r5, [r0, r3]
   153bc:	beq	1555c <__assert_fail@plt+0x39b8>
   153c0:	asr	r3, r5, #3
   153c4:	tst	r5, #8
   153c8:	and	r5, r3, #2
   153cc:	orr	r5, r5, #9
   153d0:	beq	155c8 <__assert_fail@plt+0x3a24>
   153d4:	mov	r0, r7
   153d8:	bl	11988 <strlen@plt>
   153dc:	subs	r3, r0, #0
   153e0:	mov	r6, r0
   153e4:	beq	15414 <__assert_fail@plt+0x3870>
   153e8:	sub	r2, r3, #1
   153ec:	ldrb	r1, [r7, r2]
   153f0:	add	r2, r7, r2
   153f4:	cmp	r1, #47	; 0x2f
   153f8:	beq	1540c <__assert_fail@plt+0x3868>
   153fc:	b	155f4 <__assert_fail@plt+0x3a50>
   15400:	ldrb	r1, [r2, #-1]!
   15404:	cmp	r1, #47	; 0x2f
   15408:	bne	155f0 <__assert_fail@plt+0x3a4c>
   1540c:	subs	r3, r3, #1
   15410:	bne	15400 <__assert_fail@plt+0x385c>
   15414:	str	r9, [r4, #20]
   15418:	add	sp, sp, #12
   1541c:	ldrd	r4, [sp]
   15420:	ldrd	r6, [sp, #8]
   15424:	ldrd	r8, [sp, #16]
   15428:	add	sp, sp, #24
   1542c:	pop	{pc}		; (ldr pc, [sp], #4)
   15430:	cmp	r4, #0
   15434:	beq	15444 <__assert_fail@plt+0x38a0>
   15438:	ldr	r3, [r4, #4]
   1543c:	cmp	r3, #0
   15440:	beq	154f8 <__assert_fail@plt+0x3954>
   15444:	mov	r0, #24
   15448:	bl	2e328 <__assert_fail@plt+0x1c784>
   1544c:	mov	r4, r0
   15450:	mov	r1, #0
   15454:	and	r3, r5, #16
   15458:	movw	r2, #18796	; 0x496c
   1545c:	movt	r2, #1
   15460:	cmp	r3, r1
   15464:	stmib	r4, {r1, r5}
   15468:	movw	ip, #18800	; 0x4970
   1546c:	movt	ip, #1
   15470:	movw	r0, #19096	; 0x4a98
   15474:	movt	r0, #1
   15478:	str	r2, [sp]
   1547c:	movw	r3, #18832	; 0x4990
   15480:	movt	r3, #1
   15484:	movw	r2, #18864	; 0x49b0
   15488:	movt	r2, #1
   1548c:	movne	r3, ip
   15490:	movne	r2, r0
   15494:	mov	r0, r1
   15498:	bl	1aab8 <__assert_fail@plt+0x8f14>
   1549c:	ldr	r3, [r6]
   154a0:	str	r4, [r6]
   154a4:	str	r3, [r4]
   154a8:	str	r0, [r4, #12]
   154ac:	mov	r0, r7
   154b0:	and	r5, r5, #268435458	; 0x10000002
   154b4:	bl	2e4a0 <__assert_fail@plt+0x1c8fc>
   154b8:	cmp	r5, #268435456	; 0x10000000
   154bc:	mov	r6, r0
   154c0:	beq	15514 <__assert_fail@plt+0x3970>
   154c4:	mov	r1, r6
   154c8:	ldr	r0, [r4, #12]
   154cc:	bl	1b110 <__assert_fail@plt+0x956c>
   154d0:	cmp	r6, r0
   154d4:	beq	15418 <__assert_fail@plt+0x3874>
   154d8:	mov	r0, r6
   154dc:	add	sp, sp, #12
   154e0:	ldrd	r4, [sp]
   154e4:	ldrd	r6, [sp, #8]
   154e8:	ldrd	r8, [sp, #16]
   154ec:	ldr	lr, [sp, #24]
   154f0:	add	sp, sp, #28
   154f4:	b	17ac8 <__assert_fail@plt+0x5f24>
   154f8:	ldr	r3, [r4, #8]
   154fc:	mov	r2, #24
   15500:	movt	r2, #24576	; 0x6000
   15504:	eor	r3, r3, r5
   15508:	tst	r3, r2
   1550c:	beq	154ac <__assert_fail@plt+0x3908>
   15510:	b	15444 <__assert_fail@plt+0x38a0>
   15514:	mov	r1, r0
   15518:	b	1552c <__assert_fail@plt+0x3988>
   1551c:	cmp	r2, #0
   15520:	strb	r2, [r0], #1
   15524:	beq	154c4 <__assert_fail@plt+0x3920>
   15528:	mov	r1, r3
   1552c:	mov	r3, r1
   15530:	ldrb	r2, [r3], #1
   15534:	cmp	r2, #92	; 0x5c
   15538:	bne	1551c <__assert_fail@plt+0x3978>
   1553c:	ldrb	ip, [r1, #1]
   15540:	cmp	ip, #0
   15544:	beq	15554 <__assert_fail@plt+0x39b0>
   15548:	mov	r2, ip
   1554c:	add	r3, r1, #2
   15550:	b	1551c <__assert_fail@plt+0x3978>
   15554:	strb	r2, [r0], #1
   15558:	b	15528 <__assert_fail@plt+0x3984>
   1555c:	tst	r5, #67108864	; 0x4000000
   15560:	bne	155a4 <__assert_fail@plt+0x3a00>
   15564:	str	r7, [r8, #4]
   15568:	b	15418 <__assert_fail@plt+0x3874>
   1556c:	ldr	r3, [r4, #8]
   15570:	eor	r3, r3, r5
   15574:	tst	r3, #536870912	; 0x20000000
   15578:	beq	15390 <__assert_fail@plt+0x37ec>
   1557c:	b	15370 <__assert_fail@plt+0x37cc>
   15580:	mov	r1, #36	; 0x24
   15584:	mvn	r3, #0
   15588:	mov	r2, #1
   1558c:	str	r1, [sp]
   15590:	add	r1, r4, #16
   15594:	bl	2e248 <__assert_fail@plt+0x1c6a4>
   15598:	str	r0, [r4, #12]
   1559c:	ldr	r9, [r4, #20]
   155a0:	b	153a0 <__assert_fail@plt+0x37fc>
   155a4:	mov	r0, r7
   155a8:	bl	2e4a0 <__assert_fail@plt+0x1c8fc>
   155ac:	mov	r7, r0
   155b0:	mov	r0, #8
   155b4:	bl	2e050 <__assert_fail@plt+0x1c4ac>
   155b8:	ldr	r3, [r6, #4]
   155bc:	str	r0, [r6, #4]
   155c0:	stm	r0, {r3, r7}
   155c4:	b	15564 <__assert_fail@plt+0x39c0>
   155c8:	mov	r2, r5
   155cc:	mov	r1, r7
   155d0:	add	r0, r8, #4
   155d4:	bl	2d038 <__assert_fail@plt+0x1b494>
   155d8:	mov	r5, r0
   155dc:	cmp	r5, #0
   155e0:	beq	15418 <__assert_fail@plt+0x3874>
   155e4:	ldr	r9, [r4, #20]
   155e8:	sub	r9, r9, #1
   155ec:	b	15414 <__assert_fail@plt+0x3870>
   155f0:	mov	r6, r3
   155f4:	add	r0, r3, #7
   155f8:	bl	2e074 <__assert_fail@plt+0x1c4d0>
   155fc:	mov	r2, r6
   15600:	mov	r1, r7
   15604:	mov	r9, r0
   15608:	bl	11784 <memcpy@plt>
   1560c:	movw	r3, #11640	; 0x2d78
   15610:	movt	r3, #3
   15614:	ldrh	lr, [r3, #4]
   15618:	mov	r2, r5
   1561c:	add	ip, r9, r6
   15620:	add	r0, r8, #4
   15624:	mov	r1, r9
   15628:	ldr	r5, [r3]
   1562c:	ldrb	r3, [r3, #6]
   15630:	str	r5, [r9, r6]
   15634:	strh	lr, [ip, #4]
   15638:	strb	r3, [ip, #6]
   1563c:	bl	2d038 <__assert_fail@plt+0x1b494>
   15640:	mov	r5, r0
   15644:	mov	r0, r9
   15648:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1564c:	b	155dc <__assert_fail@plt+0x3a38>
   15650:	mov	ip, #0
   15654:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15658:	strd	r6, [sp, #8]
   1565c:	mov	r4, ip
   15660:	mov	r6, ip
   15664:	strd	r8, [sp, #16]
   15668:	mov	r9, r1
   1566c:	mov	r8, r2
   15670:	strd	sl, [sp, #24]
   15674:	mov	fp, #1
   15678:	str	lr, [sp, #32]
   1567c:	sub	sp, sp, #36	; 0x24
   15680:	ldrb	r7, [sp, #72]	; 0x48
   15684:	str	r0, [sp, #8]
   15688:	str	r3, [sp, #12]
   1568c:	str	ip, [sp, #28]
   15690:	b	1569c <__assert_fail@plt+0x3af8>
   15694:	strb	r5, [r6, r4]
   15698:	add	r4, r4, #1
   1569c:	mov	r0, r8
   156a0:	bl	11b74 <getc@plt>
   156a4:	cmn	r0, #1
   156a8:	mov	r5, r0
   156ac:	beq	156dc <__assert_fail@plt+0x3b38>
   156b0:	ldr	r3, [sp, #28]
   156b4:	cmp	r3, r4
   156b8:	bne	15694 <__assert_fail@plt+0x3af0>
   156bc:	mov	r0, r6
   156c0:	mvn	r3, #0
   156c4:	str	fp, [sp]
   156c8:	mov	r2, #1
   156cc:	add	r1, sp, #28
   156d0:	bl	2e248 <__assert_fail@plt+0x1c6a4>
   156d4:	mov	r6, r0
   156d8:	b	15694 <__assert_fail@plt+0x3af0>
   156dc:	mov	r0, r8
   156e0:	bl	1176c <ferror@plt>
   156e4:	mov	r5, r0
   156e8:	bl	119b8 <__errno_location@plt>
   156ec:	cmp	r5, #0
   156f0:	str	r0, [sp, #16]
   156f4:	streq	r5, [sp, #20]
   156f8:	beq	15710 <__assert_fail@plt+0x3b6c>
   156fc:	ldr	r5, [r0]
   15700:	adds	r3, r5, #0
   15704:	movne	r3, #1
   15708:	rsb	r3, r3, #0
   1570c:	str	r3, [sp, #20]
   15710:	mov	r0, r6
   15714:	add	r1, r4, #1
   15718:	bl	2e108 <__assert_fail@plt+0x1c564>
   1571c:	cmp	r4, #0
   15720:	mov	fp, r0
   15724:	strb	r7, [r0, r4]
   15728:	bne	15768 <__assert_fail@plt+0x3bc4>
   1572c:	mov	r0, #8
   15730:	bl	2e050 <__assert_fail@plt+0x1c4ac>
   15734:	ldr	r3, [r9, #4]
   15738:	str	r0, [r9, #4]
   1573c:	stm	r0, {r3, fp}
   15740:	ldr	r3, [sp, #16]
   15744:	ldr	r0, [sp, #20]
   15748:	str	r5, [r3]
   1574c:	add	sp, sp, #36	; 0x24
   15750:	ldrd	r4, [sp]
   15754:	ldrd	r6, [sp, #8]
   15758:	ldrd	r8, [sp, #16]
   1575c:	ldrd	sl, [sp, #24]
   15760:	add	sp, sp, #32
   15764:	pop	{pc}		; (ldr pc, [sp], #4)
   15768:	add	r3, r0, r4
   1576c:	mov	r0, #8
   15770:	ldrb	r3, [r3, #-1]
   15774:	cmp	r3, r7
   15778:	addne	r4, r4, #1
   1577c:	bl	2e050 <__assert_fail@plt+0x1c4ac>
   15780:	ldr	r3, [r9, #4]
   15784:	add	r4, fp, r4
   15788:	cmp	fp, r4
   1578c:	str	r0, [r9, #4]
   15790:	stm	r0, {r3, fp}
   15794:	bcs	15740 <__assert_fail@plt+0x3b9c>
   15798:	mov	r3, r9
   1579c:	lsl	r8, r7, #1
   157a0:	mov	r9, fp
   157a4:	mov	sl, r3
   157a8:	b	157b8 <__assert_fail@plt+0x3c14>
   157ac:	cmp	r4, r6
   157b0:	mov	r9, r6
   157b4:	beq	15740 <__assert_fail@plt+0x3b9c>
   157b8:	mov	r6, r9
   157bc:	ldrb	r3, [r6], #1
   157c0:	cmp	r3, r7
   157c4:	bne	157ac <__assert_fail@plt+0x3c08>
   157c8:	bl	11964 <__ctype_b_loc@plt>
   157cc:	ldr	ip, [r0]
   157d0:	ldrh	r3, [ip, r8]
   157d4:	tst	r3, #8192	; 0x2000
   157d8:	bne	15804 <__assert_fail@plt+0x3c60>
   157dc:	mov	r2, #0
   157e0:	mov	r1, fp
   157e4:	ldr	ip, [sp, #8]
   157e8:	mov	r0, sl
   157ec:	strb	r2, [r9]
   157f0:	ldr	r2, [sp, #12]
   157f4:	ldr	r3, [sp, #76]	; 0x4c
   157f8:	blx	ip
   157fc:	mov	fp, r6
   15800:	b	157ac <__assert_fail@plt+0x3c08>
   15804:	cmp	fp, r9
   15808:	beq	157fc <__assert_fail@plt+0x3c58>
   1580c:	ldrb	r3, [r6, #-2]
   15810:	lsl	r3, r3, #1
   15814:	ldrh	r3, [ip, r3]
   15818:	tst	r3, #8192	; 0x2000
   1581c:	beq	157dc <__assert_fail@plt+0x3c38>
   15820:	sub	r3, r9, #1
   15824:	b	1583c <__assert_fail@plt+0x3c98>
   15828:	ldrb	r2, [r3, #-1]!
   1582c:	lsl	r2, r2, #1
   15830:	ldrh	r2, [ip, r2]
   15834:	tst	r2, #8192	; 0x2000
   15838:	beq	157dc <__assert_fail@plt+0x3c38>
   1583c:	cmp	fp, r3
   15840:	mov	r9, r3
   15844:	bne	15828 <__assert_fail@plt+0x3c84>
   15848:	b	157fc <__assert_fail@plt+0x3c58>
   1584c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15850:	mov	r5, r1
   15854:	movw	r1, #10428	; 0x28bc
   15858:	movt	r1, #3
   1585c:	strd	r6, [sp, #8]
   15860:	mov	r4, r2
   15864:	str	r8, [sp, #16]
   15868:	mov	r7, r3
   1586c:	str	lr, [sp, #20]
   15870:	sub	sp, sp, #16
   15874:	ldrb	r6, [sp, #40]	; 0x28
   15878:	str	r0, [sp, #12]
   1587c:	mov	r0, r2
   15880:	bl	1170c <strcmp@plt>
   15884:	cmp	r0, #0
   15888:	beq	15908 <__assert_fail@plt+0x3d64>
   1588c:	mov	r0, r4
   15890:	movw	r1, #12188	; 0x2f9c
   15894:	movt	r1, #3
   15898:	bl	11afc <fopen64@plt>
   1589c:	subs	r8, r0, #0
   158a0:	beq	15938 <__assert_fail@plt+0x3d94>
   158a4:	add	r2, sp, #12
   158a8:	mov	r1, r5
   158ac:	str	r6, [sp]
   158b0:	mov	r3, r7
   158b4:	movw	r0, #18788	; 0x4964
   158b8:	movt	r0, #1
   158bc:	str	r2, [sp, #4]
   158c0:	mov	r2, r8
   158c4:	bl	15650 <__assert_fail@plt+0x3aac>
   158c8:	mov	r4, r0
   158cc:	bl	119b8 <__errno_location@plt>
   158d0:	mov	r5, r0
   158d4:	mov	r0, r8
   158d8:	ldr	r6, [r5]
   158dc:	bl	15940 <__assert_fail@plt+0x3d9c>
   158e0:	cmp	r0, #0
   158e4:	bne	15938 <__assert_fail@plt+0x3d94>
   158e8:	str	r6, [r5]
   158ec:	mov	r0, r4
   158f0:	add	sp, sp, #16
   158f4:	ldrd	r4, [sp]
   158f8:	ldrd	r6, [sp, #8]
   158fc:	ldr	r8, [sp, #16]
   15900:	add	sp, sp, #20
   15904:	pop	{pc}		; (ldr pc, [sp], #4)
   15908:	add	ip, sp, #12
   1590c:	movw	r2, #16952	; 0x4238
   15910:	movt	r2, #4
   15914:	mov	r3, r7
   15918:	mov	r1, r5
   1591c:	movw	r0, #18788	; 0x4964
   15920:	movt	r0, #1
   15924:	stm	sp, {r6, ip}
   15928:	ldr	r2, [r2]
   1592c:	bl	15650 <__assert_fail@plt+0x3aac>
   15930:	mov	r4, r0
   15934:	b	158ec <__assert_fail@plt+0x3d48>
   15938:	mvn	r4, #0
   1593c:	b	158ec <__assert_fail@plt+0x3d48>
   15940:	strd	r4, [sp, #-12]!
   15944:	mov	r4, r0
   15948:	str	lr, [sp, #8]
   1594c:	sub	sp, sp, #12
   15950:	bl	11a0c <fileno@plt>
   15954:	cmp	r0, #0
   15958:	mov	r0, r4
   1595c:	blt	159e0 <__assert_fail@plt+0x3e3c>
   15960:	bl	1191c <__freading@plt>
   15964:	cmp	r0, #0
   15968:	bne	159ac <__assert_fail@plt+0x3e08>
   1596c:	mov	r0, r4
   15970:	bl	159f4 <__assert_fail@plt+0x3e50>
   15974:	cmp	r0, #0
   15978:	beq	159dc <__assert_fail@plt+0x3e38>
   1597c:	bl	119b8 <__errno_location@plt>
   15980:	mov	r5, r0
   15984:	mov	r0, r4
   15988:	ldr	r4, [r5]
   1598c:	bl	11a30 <fclose@plt>
   15990:	cmp	r4, #0
   15994:	mvnne	r0, #0
   15998:	strne	r4, [r5]
   1599c:	add	sp, sp, #12
   159a0:	ldrd	r4, [sp]
   159a4:	add	sp, sp, #8
   159a8:	pop	{pc}		; (ldr pc, [sp], #4)
   159ac:	mov	r0, r4
   159b0:	bl	11a0c <fileno@plt>
   159b4:	mov	r1, #1
   159b8:	mov	r2, #0
   159bc:	mov	r3, #0
   159c0:	str	r1, [sp]
   159c4:	bl	11874 <lseek64@plt>
   159c8:	mvn	r3, #0
   159cc:	mvn	r2, #0
   159d0:	cmp	r1, r3
   159d4:	cmpeq	r0, r2
   159d8:	bne	1596c <__assert_fail@plt+0x3dc8>
   159dc:	mov	r0, r4
   159e0:	add	sp, sp, #12
   159e4:	ldrd	r4, [sp]
   159e8:	ldr	lr, [sp, #8]
   159ec:	add	sp, sp, #12
   159f0:	b	11a30 <fclose@plt>
   159f4:	str	r4, [sp, #-8]!
   159f8:	subs	r4, r0, #0
   159fc:	str	lr, [sp, #4]
   15a00:	sub	sp, sp, #8
   15a04:	beq	15a20 <__assert_fail@plt+0x3e7c>
   15a08:	bl	1191c <__freading@plt>
   15a0c:	cmp	r0, #0
   15a10:	beq	15a20 <__assert_fail@plt+0x3e7c>
   15a14:	ldr	r3, [r4]
   15a18:	tst	r3, #256	; 0x100
   15a1c:	bne	15a38 <__assert_fail@plt+0x3e94>
   15a20:	mov	r0, r4
   15a24:	add	sp, sp, #8
   15a28:	ldr	r4, [sp]
   15a2c:	ldr	lr, [sp, #4]
   15a30:	add	sp, sp, #8
   15a34:	b	11730 <fflush@plt>
   15a38:	mov	r1, #1
   15a3c:	mov	r2, #0
   15a40:	mov	r3, #0
   15a44:	mov	r0, r4
   15a48:	str	r1, [sp]
   15a4c:	bl	17d30 <__assert_fail@plt+0x618c>
   15a50:	b	15a20 <__assert_fail@plt+0x3e7c>
   15a54:	cmp	r2, #0
   15a58:	bxeq	lr
   15a5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15a60:	mov	r4, r1
   15a64:	add	r5, r1, r2
   15a68:	strd	r6, [sp, #8]
   15a6c:	mov	r6, r0
   15a70:	str	r8, [sp, #16]
   15a74:	str	lr, [sp, #20]
   15a78:	bl	11928 <__ctype_tolower_loc@plt>
   15a7c:	mov	r7, r0
   15a80:	ldrb	r2, [r4], #1
   15a84:	mov	r1, r6
   15a88:	ldr	r3, [r7]
   15a8c:	ldr	r0, [r3, r2, lsl #2]
   15a90:	bl	11a90 <fputc@plt>
   15a94:	cmp	r4, r5
   15a98:	bne	15a80 <__assert_fail@plt+0x3edc>
   15a9c:	ldrd	r4, [sp]
   15aa0:	ldrd	r6, [sp, #8]
   15aa4:	ldr	r8, [sp, #16]
   15aa8:	add	sp, sp, #20
   15aac:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab0:	cmp	r2, #0
   15ab4:	bxeq	lr
   15ab8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15abc:	mov	r4, r1
   15ac0:	add	r5, r1, r2
   15ac4:	strd	r6, [sp, #8]
   15ac8:	mov	r6, r0
   15acc:	str	r8, [sp, #16]
   15ad0:	str	lr, [sp, #20]
   15ad4:	bl	11934 <__ctype_toupper_loc@plt>
   15ad8:	mov	r7, r0
   15adc:	ldrb	r2, [r4], #1
   15ae0:	mov	r1, r6
   15ae4:	ldr	r3, [r7]
   15ae8:	ldr	r0, [r3, r2, lsl #2]
   15aec:	bl	11a90 <fputc@plt>
   15af0:	cmp	r4, r5
   15af4:	bne	15adc <__assert_fail@plt+0x3f38>
   15af8:	ldrd	r4, [sp]
   15afc:	ldrd	r6, [sp, #8]
   15b00:	ldr	r8, [sp, #16]
   15b04:	add	sp, sp, #20
   15b08:	pop	{pc}		; (ldr pc, [sp], #4)
   15b0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b10:	mov	r4, r2
   15b14:	strd	r6, [sp, #8]
   15b18:	mov	r7, r0
   15b1c:	strd	r8, [sp, #16]
   15b20:	mov	r8, r1
   15b24:	strd	sl, [sp, #24]
   15b28:	str	lr, [sp, #32]
   15b2c:	sub	sp, sp, #1120	; 0x460
   15b30:	sub	sp, sp, #12
   15b34:	str	r3, [sp, #32]
   15b38:	str	r2, [sp, #40]	; 0x28
   15b3c:	bl	119b8 <__errno_location@plt>
   15b40:	ldr	r1, [r0]
   15b44:	movw	r3, #11844	; 0x2e44
   15b48:	movt	r3, #3
   15b4c:	str	r0, [sp, #28]
   15b50:	ldr	r2, [r4, #40]	; 0x28
   15b54:	ldr	ip, [r4, #8]
   15b58:	ldr	r5, [sp, #1172]	; 0x494
   15b5c:	cmp	r2, #0
   15b60:	str	r1, [sp, #44]	; 0x2c
   15b64:	mov	r1, r2
   15b68:	moveq	r1, r3
   15b6c:	cmp	ip, #12
   15b70:	str	ip, [sp, #24]
   15b74:	subgt	r3, ip, #12
   15b78:	str	r1, [sp, #48]	; 0x30
   15b7c:	strgt	r3, [sp, #24]
   15b80:	bgt	15b94 <__assert_fail@plt+0x3ff0>
   15b84:	ldr	r3, [sp, #24]
   15b88:	cmp	r3, #0
   15b8c:	moveq	r3, #12
   15b90:	str	r3, [sp, #24]
   15b94:	ldrb	r3, [r8]
   15b98:	cmp	r3, #0
   15b9c:	beq	1764c <__assert_fail@plt+0x5aa8>
   15ba0:	movw	r2, #46021	; 0xb3c5
   15ba4:	movt	r2, #37282	; 0x91a2
   15ba8:	movw	r9, #26215	; 0x6667
   15bac:	movt	r9, #26214	; 0x6666
   15bb0:	mov	fp, #0
   15bb4:	str	r2, [sp, #68]	; 0x44
   15bb8:	movw	r2, #34953	; 0x8889
   15bbc:	movt	r2, #34952	; 0x8888
   15bc0:	str	r9, [sp, #64]	; 0x40
   15bc4:	str	r2, [sp, #72]	; 0x48
   15bc8:	movw	r2, #34079	; 0x851f
   15bcc:	movt	r2, #20971	; 0x51eb
   15bd0:	str	r2, [sp, #60]	; 0x3c
   15bd4:	movw	r2, #9363	; 0x2493
   15bd8:	movt	r2, #37449	; 0x9249
   15bdc:	str	r2, [sp, #56]	; 0x38
   15be0:	cmp	r3, #37	; 0x25
   15be4:	beq	15cc8 <__assert_fail@plt+0x4124>
   15be8:	cmp	r5, #0
   15bec:	blt	15c70 <__assert_fail@plt+0x40cc>
   15bf0:	cmp	r5, #1
   15bf4:	mvn	r3, fp
   15bf8:	movcs	r6, r5
   15bfc:	movcc	r6, #1
   15c00:	cmp	r6, r3
   15c04:	bcs	15c78 <__assert_fail@plt+0x40d4>
   15c08:	cmp	r7, #0
   15c0c:	beq	15c44 <__assert_fail@plt+0x40a0>
   15c10:	cmp	r5, #1
   15c14:	ble	15cb8 <__assert_fail@plt+0x4114>
   15c18:	sub	r5, r5, #1
   15c1c:	mov	r4, #0
   15c20:	add	r4, r4, #1
   15c24:	mov	r1, r7
   15c28:	mov	r0, #32
   15c2c:	bl	11a90 <fputc@plt>
   15c30:	cmp	r5, r4
   15c34:	bne	15c20 <__assert_fail@plt+0x407c>
   15c38:	mov	r1, r7
   15c3c:	ldrb	r0, [r8]
   15c40:	bl	11a90 <fputc@plt>
   15c44:	add	fp, fp, r6
   15c48:	mov	r4, r8
   15c4c:	ldrb	r3, [r4, #1]
   15c50:	add	r8, r4, #1
   15c54:	mvn	r5, #0
   15c58:	cmp	r3, #0
   15c5c:	bne	15be0 <__assert_fail@plt+0x403c>
   15c60:	ldr	r3, [sp, #28]
   15c64:	ldr	r2, [sp, #44]	; 0x2c
   15c68:	str	r2, [r3]
   15c6c:	b	15c88 <__assert_fail@plt+0x40e4>
   15c70:	cmn	fp, #3
   15c74:	bls	15cac <__assert_fail@plt+0x4108>
   15c78:	ldr	r2, [sp, #28]
   15c7c:	mov	r3, #34	; 0x22
   15c80:	str	r3, [r2]
   15c84:	mov	fp, #0
   15c88:	mov	r0, fp
   15c8c:	add	sp, sp, #1120	; 0x460
   15c90:	add	sp, sp, #12
   15c94:	ldrd	r4, [sp]
   15c98:	ldrd	r6, [sp, #8]
   15c9c:	ldrd	r8, [sp, #16]
   15ca0:	ldrd	sl, [sp, #24]
   15ca4:	add	sp, sp, #32
   15ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cac:	cmp	r7, #0
   15cb0:	mov	r6, #1
   15cb4:	beq	15c44 <__assert_fail@plt+0x40a0>
   15cb8:	mov	r1, r7
   15cbc:	ldrb	r0, [r8]
   15cc0:	bl	11a90 <fputc@plt>
   15cc4:	b	15c44 <__assert_fail@plt+0x40a0>
   15cc8:	ldr	r3, [sp, #32]
   15ccc:	mov	r9, #0
   15cd0:	mov	sl, r8
   15cd4:	str	r9, [sp, #36]	; 0x24
   15cd8:	str	r3, [sp, #52]	; 0x34
   15cdc:	ldrb	r3, [sl, #1]!
   15ce0:	sub	r2, r3, #35	; 0x23
   15ce4:	mov	r6, r3
   15ce8:	cmp	r2, #60	; 0x3c
   15cec:	ldrls	pc, [pc, r2, lsl #2]
   15cf0:	b	15e04 <__assert_fail@plt+0x4260>
   15cf4:	strdeq	r5, [r1], -ip
   15cf8:	andeq	r5, r1, r4, lsl #28
   15cfc:	andeq	r5, r1, r4, lsl #28
   15d00:	andeq	r5, r1, r4, lsl #28
   15d04:	andeq	r5, r1, r4, lsl #28
   15d08:	andeq	r5, r1, r4, lsl #28
   15d0c:	andeq	r5, r1, r4, lsl #28
   15d10:	andeq	r5, r1, r4, lsl #28
   15d14:	strdeq	r5, [r1], -r4
   15d18:	andeq	r5, r1, r4, lsl #28
   15d1c:	strdeq	r5, [r1], -r4
   15d20:	andeq	r5, r1, r4, lsl #28
   15d24:	andeq	r5, r1, r4, lsl #28
   15d28:	strdeq	r5, [r1], -r4
   15d2c:	andeq	r5, r1, r4, lsl #28
   15d30:	andeq	r5, r1, r4, lsl #28
   15d34:	andeq	r5, r1, r4, lsl #28
   15d38:	andeq	r5, r1, r4, lsl #28
   15d3c:	andeq	r5, r1, r4, lsl #28
   15d40:	andeq	r5, r1, r4, lsl #28
   15d44:	andeq	r5, r1, r4, lsl #28
   15d48:	andeq	r5, r1, r4, lsl #28
   15d4c:	andeq	r5, r1, r4, lsl #28
   15d50:	andeq	r5, r1, r4, lsl #28
   15d54:	andeq	r5, r1, r4, lsl #28
   15d58:	andeq	r5, r1, r4, lsl #28
   15d5c:	andeq	r5, r1, r4, lsl #28
   15d60:	andeq	r5, r1, r4, lsl #28
   15d64:	andeq	r5, r1, r4, lsl #28
   15d68:	andeq	r5, r1, r4, lsl #28
   15d6c:	andeq	r5, r1, r4, lsl #28
   15d70:	andeq	r5, r1, r4, lsl #28
   15d74:	andeq	r5, r1, r4, lsl #28
   15d78:	andeq	r5, r1, r4, lsl #28
   15d7c:	andeq	r5, r1, r4, lsl #28
   15d80:	andeq	r5, r1, r4, lsl #28
   15d84:	andeq	r5, r1, r4, lsl #28
   15d88:	andeq	r5, r1, r4, lsl #28
   15d8c:	andeq	r5, r1, r4, lsl #28
   15d90:	andeq	r5, r1, r4, lsl #28
   15d94:	andeq	r5, r1, r4, lsl #28
   15d98:	andeq	r5, r1, r4, lsl #28
   15d9c:	andeq	r5, r1, r4, lsl #28
   15da0:	andeq	r5, r1, r4, lsl #28
   15da4:	andeq	r5, r1, r4, lsl #28
   15da8:	andeq	r5, r1, r4, lsl #28
   15dac:	andeq	r5, r1, r4, lsl #28
   15db0:	andeq	r5, r1, r4, lsl #28
   15db4:	andeq	r5, r1, r4, lsl #28
   15db8:	andeq	r5, r1, r4, lsl #28
   15dbc:	andeq	r5, r1, r4, lsl #28
   15dc0:	andeq	r5, r1, r4, lsl #28
   15dc4:	andeq	r5, r1, r4, lsl #28
   15dc8:	andeq	r5, r1, r4, lsl #28
   15dcc:	andeq	r5, r1, r4, lsl #28
   15dd0:	andeq	r5, r1, r4, lsl #28
   15dd4:	andeq	r5, r1, r4, lsl #28
   15dd8:	andeq	r5, r1, r4, lsl #28
   15ddc:	andeq	r5, r1, r4, lsl #28
   15de0:	andeq	r5, r1, r8, ror #27
   15de4:	strdeq	r5, [r1], -r4
   15de8:	mov	r3, #1
   15dec:	str	r3, [sp, #52]	; 0x34
   15df0:	b	15cdc <__assert_fail@plt+0x4138>
   15df4:	str	r3, [sp, #36]	; 0x24
   15df8:	b	15cdc <__assert_fail@plt+0x4138>
   15dfc:	mov	r9, #1
   15e00:	b	15cdc <__assert_fail@plt+0x4138>
   15e04:	sub	r2, r3, #48	; 0x30
   15e08:	cmp	r2, #9
   15e0c:	bls	162d8 <__assert_fail@plt+0x4734>
   15e10:	cmp	r3, #69	; 0x45
   15e14:	beq	16018 <__assert_fail@plt+0x4474>
   15e18:	cmp	r3, #79	; 0x4f
   15e1c:	beq	16018 <__assert_fail@plt+0x4474>
   15e20:	cmp	r3, #122	; 0x7a
   15e24:	ldrls	pc, [pc, r3, lsl #2]
   15e28:	b	17514 <__assert_fail@plt+0x5970>
   15e2c:	andeq	r6, r1, r8, lsl r2
   15e30:	andeq	r7, r1, r4, lsl r5
   15e34:	andeq	r7, r1, r4, lsl r5
   15e38:	andeq	r7, r1, r4, lsl r5
   15e3c:	andeq	r7, r1, r4, lsl r5
   15e40:	andeq	r7, r1, r4, lsl r5
   15e44:	andeq	r7, r1, r4, lsl r5
   15e48:	andeq	r7, r1, r4, lsl r5
   15e4c:	andeq	r7, r1, r4, lsl r5
   15e50:	andeq	r7, r1, r4, lsl r5
   15e54:	andeq	r7, r1, r4, lsl r5
   15e58:	andeq	r7, r1, r4, lsl r5
   15e5c:	andeq	r7, r1, r4, lsl r5
   15e60:	andeq	r7, r1, r4, lsl r5
   15e64:	andeq	r7, r1, r4, lsl r5
   15e68:	andeq	r7, r1, r4, lsl r5
   15e6c:	andeq	r7, r1, r4, lsl r5
   15e70:	andeq	r7, r1, r4, lsl r5
   15e74:	andeq	r7, r1, r4, lsl r5
   15e78:	andeq	r7, r1, r4, lsl r5
   15e7c:	andeq	r7, r1, r4, lsl r5
   15e80:	andeq	r7, r1, r4, lsl r5
   15e84:	andeq	r7, r1, r4, lsl r5
   15e88:	andeq	r7, r1, r4, lsl r5
   15e8c:	andeq	r7, r1, r4, lsl r5
   15e90:	andeq	r7, r1, r4, lsl r5
   15e94:	andeq	r7, r1, r4, lsl r5
   15e98:	andeq	r7, r1, r4, lsl r5
   15e9c:	andeq	r7, r1, r4, lsl r5
   15ea0:	andeq	r7, r1, r4, lsl r5
   15ea4:	andeq	r7, r1, r4, lsl r5
   15ea8:	andeq	r7, r1, r4, lsl r5
   15eac:	andeq	r7, r1, r4, lsl r5
   15eb0:	andeq	r7, r1, r4, lsl r5
   15eb4:	andeq	r7, r1, r4, lsl r5
   15eb8:	andeq	r7, r1, r4, lsl r5
   15ebc:	andeq	r7, r1, r4, lsl r5
   15ec0:	andeq	r6, r1, r4, lsr #23
   15ec4:	andeq	r7, r1, r4, lsl r5
   15ec8:	andeq	r7, r1, r4, lsl r5
   15ecc:	andeq	r7, r1, r4, lsl r5
   15ed0:	andeq	r7, r1, r4, lsl r5
   15ed4:	andeq	r7, r1, r4, lsl r5
   15ed8:	andeq	r7, r1, r4, lsl r5
   15edc:	andeq	r7, r1, r4, lsl r5
   15ee0:	andeq	r7, r1, r4, lsl r5
   15ee4:	andeq	r7, r1, r4, lsl r5
   15ee8:	andeq	r7, r1, r4, lsl r5
   15eec:	andeq	r7, r1, r4, lsl r5
   15ef0:	andeq	r7, r1, r4, lsl r5
   15ef4:	andeq	r7, r1, r4, lsl r5
   15ef8:	andeq	r7, r1, r4, lsl r5
   15efc:	andeq	r7, r1, r4, lsl r5
   15f00:	andeq	r7, r1, r4, lsl r5
   15f04:	andeq	r7, r1, r4, lsl r5
   15f08:	andeq	r7, r1, r4, lsl r5
   15f0c:	andeq	r7, r1, r4, lsl r5
   15f10:	andeq	r7, r1, r4, lsl r5
   15f14:			; <UNDEFINED> instruction: 0x000173bc
   15f18:	andeq	r7, r1, r4, lsl r5
   15f1c:	andeq	r7, r1, r4, lsl r5
   15f20:	andeq	r7, r1, r4, lsl r5
   15f24:	andeq	r7, r1, r4, lsl r5
   15f28:	andeq	r7, r1, r4, lsl r5
   15f2c:	andeq	r7, r1, r4, lsl r5
   15f30:	strdeq	r7, [r1], -r4
   15f34:	andeq	r7, r1, r0, lsl r4
   15f38:	muleq	r1, r4, r4
   15f3c:	andeq	r7, r1, ip, asr #4
   15f40:	andeq	r7, r1, r4, lsl r5
   15f44:	andeq	r7, r1, r4, ror r1
   15f48:	andeq	r7, r1, r0, lsr #9
   15f4c:	andeq	r7, r1, ip, lsr #9
   15f50:			; <UNDEFINED> instruction: 0x000174b8
   15f54:	andeq	r7, r1, r4, lsl r5
   15f58:	andeq	r7, r1, r4, lsl r5
   15f5c:	andeq	r7, r1, r4, lsl r5
   15f60:	andeq	r7, r1, r4, asr #9
   15f64:	andeq	r6, r1, r8, lsr #28
   15f68:	andeq	r7, r1, r4, lsl r5
   15f6c:	strdeq	r7, [r1], -r0
   15f70:	andeq	r7, r1, r4, lsl r5
   15f74:	ldrdeq	r7, [r1], -r4
   15f78:	andeq	r7, r1, r8, lsl #10
   15f7c:	andeq	r6, r1, r4, lsl #26
   15f80:	ldrdeq	r7, [r1], -r0
   15f84:	andeq	r7, r1, r0, lsr #9
   15f88:	ldrdeq	r7, [r1], -ip
   15f8c:	andeq	r7, r1, r8, ror #9
   15f90:	strdeq	r7, [r1], -r4
   15f94:	andeq	r6, r1, r0, ror r9
   15f98:	andeq	r7, r1, r4, lsl r5
   15f9c:	andeq	r7, r1, r4, lsl r5
   15fa0:	andeq	r7, r1, r4, lsl r5
   15fa4:	andeq	r7, r1, r4, lsl r5
   15fa8:	andeq	r7, r1, r4, lsl r5
   15fac:	andeq	r7, r1, r4, lsl r5
   15fb0:	andeq	r7, r1, r0, lsl #10
   15fb4:	andeq	r6, r1, r4, lsl r9
   15fb8:	andeq	r7, r1, r8, asr r4
   15fbc:	andeq	r7, r1, r4, ror #8
   15fc0:	andeq	r7, r1, r0, ror r4
   15fc4:	andeq	r7, r1, r4, lsl r5
   15fc8:	andeq	r7, r1, r0, lsr #9
   15fcc:	andeq	r6, r1, r4, lsl r9
   15fd0:	andeq	r7, r1, r4, lsl r5
   15fd4:	andeq	r7, r1, ip, ror r4
   15fd8:	andeq	r7, r1, r8, lsl #9
   15fdc:	andeq	r7, r1, r0, asr #8
   15fe0:	andeq	r7, r1, ip, asr #8
   15fe4:			; <UNDEFINED> instruction: 0x00016abc
   15fe8:	andeq	r7, r1, r4, lsl r5
   15fec:	andeq	r7, r1, ip, lsr #5
   15ff0:	andeq	r6, r1, r8, asr #15
   15ff4:	muleq	r1, r8, r2
   15ff8:	andeq	r6, r1, r0, lsr #12
   15ffc:	andeq	r6, r1, r8, ror r5
   16000:	andeq	r6, r1, r8, lsr r5
   16004:	andeq	r7, r1, r4, lsl r5
   16008:	andeq	r7, r1, r8, lsr #8
   1600c:	andeq	r7, r1, r4, lsr r4
   16010:	andeq	r7, r1, ip, lsl r4
   16014:	andeq	r7, r1, r0, lsl #6
   16018:	ldrb	r3, [sl, #1]
   1601c:	add	r4, sl, #1
   16020:	cmp	r3, #122	; 0x7a
   16024:	ldrls	pc, [pc, r3, lsl #2]
   16028:	b	16220 <__assert_fail@plt+0x467c>
   1602c:	andeq	r6, r1, ip, lsl r2
   16030:	andeq	r6, r1, r0, lsr #4
   16034:	andeq	r6, r1, r0, lsr #4
   16038:	andeq	r6, r1, r0, lsr #4
   1603c:	andeq	r6, r1, r0, lsr #4
   16040:	andeq	r6, r1, r0, lsr #4
   16044:	andeq	r6, r1, r0, lsr #4
   16048:	andeq	r6, r1, r0, lsr #4
   1604c:	andeq	r6, r1, r0, lsr #4
   16050:	andeq	r6, r1, r0, lsr #4
   16054:	andeq	r6, r1, r0, lsr #4
   16058:	andeq	r6, r1, r0, lsr #4
   1605c:	andeq	r6, r1, r0, lsr #4
   16060:	andeq	r6, r1, r0, lsr #4
   16064:	andeq	r6, r1, r0, lsr #4
   16068:	andeq	r6, r1, r0, lsr #4
   1606c:	andeq	r6, r1, r0, lsr #4
   16070:	andeq	r6, r1, r0, lsr #4
   16074:	andeq	r6, r1, r0, lsr #4
   16078:	andeq	r6, r1, r0, lsr #4
   1607c:	andeq	r6, r1, r0, lsr #4
   16080:	andeq	r6, r1, r0, lsr #4
   16084:	andeq	r6, r1, r0, lsr #4
   16088:	andeq	r6, r1, r0, lsr #4
   1608c:	andeq	r6, r1, r0, lsr #4
   16090:	andeq	r6, r1, r0, lsr #4
   16094:	andeq	r6, r1, r0, lsr #4
   16098:	andeq	r6, r1, r0, lsr #4
   1609c:	andeq	r6, r1, r0, lsr #4
   160a0:	andeq	r6, r1, r0, lsr #4
   160a4:	andeq	r6, r1, r0, lsr #4
   160a8:	andeq	r6, r1, r0, lsr #4
   160ac:	andeq	r6, r1, r0, lsr #4
   160b0:	andeq	r6, r1, r0, lsr #4
   160b4:	andeq	r6, r1, r0, lsr #4
   160b8:	andeq	r6, r1, r0, lsr #4
   160bc:	andeq	r6, r1, r0, lsr #4
   160c0:	andeq	r6, r1, r0, lsr #23
   160c4:	andeq	r6, r1, r0, lsr #4
   160c8:	andeq	r6, r1, r0, lsr #4
   160cc:	andeq	r6, r1, r0, lsr #4
   160d0:	andeq	r6, r1, r0, lsr #4
   160d4:	andeq	r6, r1, r0, lsr #4
   160d8:	andeq	r6, r1, r0, lsr #4
   160dc:	andeq	r6, r1, r0, lsr #4
   160e0:	andeq	r6, r1, r0, lsr #4
   160e4:	andeq	r6, r1, r0, lsr #4
   160e8:	andeq	r6, r1, r0, lsr #4
   160ec:	andeq	r6, r1, r0, lsr #4
   160f0:	andeq	r6, r1, r0, lsr #4
   160f4:	andeq	r6, r1, r0, lsr #4
   160f8:	andeq	r6, r1, r0, lsr #4
   160fc:	andeq	r6, r1, r0, lsr #4
   16100:	andeq	r6, r1, r0, lsr #4
   16104:	andeq	r6, r1, r0, lsr #4
   16108:	andeq	r6, r1, r0, lsr #4
   1610c:	andeq	r6, r1, r0, lsr #4
   16110:	andeq	r6, r1, r0, lsr #4
   16114:	andeq	r7, r1, r4, asr #7
   16118:	andeq	r6, r1, r0, lsr #4
   1611c:	andeq	r6, r1, r0, lsr #4
   16120:	andeq	r6, r1, r0, lsr #4
   16124:	andeq	r6, r1, r0, lsr #4
   16128:	andeq	r6, r1, r0, lsr #4
   1612c:	andeq	r6, r1, r0, lsr #4
   16130:	andeq	r7, r1, r8, ror #7
   16134:	andeq	r7, r1, r4, ror r2
   16138:			; <UNDEFINED> instruction: 0x000171b8
   1613c:	andeq	r7, r1, r4, asr r2
   16140:	andeq	r6, r1, r0, lsr #4
   16144:	andeq	r7, r1, ip, ror r1
   16148:	andeq	r6, r1, r8, ror #31
   1614c:	andeq	r6, r1, ip, asr #31
   16150:			; <UNDEFINED> instruction: 0x00016fb4
   16154:	andeq	r6, r1, r0, lsr #4
   16158:	andeq	r6, r1, r0, lsr #4
   1615c:	andeq	r6, r1, r0, lsr #4
   16160:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16164:	andeq	r6, r1, r0, lsr lr
   16168:	andeq	r6, r1, r0, lsr #4
   1616c:	strdeq	r7, [r1], -r8
   16170:	andeq	r6, r1, r0, lsr #4
   16174:	ldrdeq	r7, [r1], -r8
   16178:	andeq	r6, r1, ip, lsl #28
   1617c:	andeq	r6, r1, r8, lsl #26
   16180:	andeq	r6, r1, r8, asr #25
   16184:	andeq	r6, r1, r8, ror #31
   16188:	andeq	r6, r1, r0, ror ip
   1618c:	andeq	r6, r1, r0, ror #24
   16190:	andeq	r6, r1, r0, asr #20
   16194:	andeq	r6, r1, r4, ror r9
   16198:	andeq	r6, r1, r0, lsr #4
   1619c:	andeq	r6, r1, r0, lsr #4
   161a0:	andeq	r6, r1, r0, lsr #4
   161a4:	andeq	r6, r1, r0, lsr #4
   161a8:	andeq	r6, r1, r0, lsr #4
   161ac:	andeq	r6, r1, r0, lsr #4
   161b0:	andeq	r6, r1, ip, lsr r9
   161b4:	andeq	r6, r1, ip, lsl r9
   161b8:	andeq	r6, r1, r0, lsl #18
   161bc:	andeq	r6, r1, r4, ror #17
   161c0:			; <UNDEFINED> instruction: 0x000168b8
   161c4:	andeq	r6, r1, r0, lsr #4
   161c8:	andeq	r6, r1, r8, ror #31
   161cc:	andeq	r6, r1, ip, lsl r9
   161d0:	andeq	r6, r1, r0, lsr #4
   161d4:	andeq	r6, r1, r8, ror r8
   161d8:	andeq	r6, r1, ip, lsl #23
   161dc:	andeq	r6, r1, ip, ror fp
   161e0:	andeq	r6, r1, r0, ror #22
   161e4:	andeq	r6, r1, r0, asr #21
   161e8:	andeq	r6, r1, r0, lsr #4
   161ec:			; <UNDEFINED> instruction: 0x000172b4
   161f0:	ldrdeq	r6, [r1], -r0
   161f4:	andeq	r7, r1, r0, lsr #5
   161f8:	andeq	r6, r1, r4, lsr #12
   161fc:	andeq	r6, r1, ip, ror r5
   16200:	andeq	r6, r1, r0, asr #10
   16204:	andeq	r6, r1, r0, lsr #4
   16208:	strdeq	r6, [r1], -ip
   1620c:	ldrdeq	r6, [r1], -r0
   16210:	andeq	r6, r1, ip, asr #6
   16214:	andeq	r7, r1, r8, lsl #6
   16218:	mov	r4, sl
   1621c:	sub	r4, r4, #1
   16220:	mvn	r3, fp
   16224:	str	r3, [sp, #76]	; 0x4c
   16228:	ldr	r3, [sp, #36]	; 0x24
   1622c:	sub	r6, r4, r8
   16230:	add	r6, r6, #1
   16234:	subs	r3, r3, #45	; 0x2d
   16238:	movne	r3, #1
   1623c:	cmp	r5, #0
   16240:	movlt	r3, #0
   16244:	cmp	r3, #0
   16248:	moveq	r5, r3
   1624c:	moveq	r9, r6
   16250:	beq	16260 <__assert_fail@plt+0x46bc>
   16254:	cmp	r5, r6
   16258:	movcs	r9, r5
   1625c:	movcc	r9, r6
   16260:	ldr	r3, [sp, #76]	; 0x4c
   16264:	cmp	r9, r3
   16268:	bcs	15c78 <__assert_fail@plt+0x40d4>
   1626c:	cmp	r7, #0
   16270:	beq	162d0 <__assert_fail@plt+0x472c>
   16274:	cmp	r5, r6
   16278:	bls	162b4 <__assert_fail@plt+0x4710>
   1627c:	ldr	r3, [sp, #36]	; 0x24
   16280:	sub	r5, r5, r6
   16284:	cmp	r3, #43	; 0x2b
   16288:	cmpne	r3, #48	; 0x30
   1628c:	moveq	sl, #1
   16290:	movne	sl, #0
   16294:	bne	16330 <__assert_fail@plt+0x478c>
   16298:	mov	sl, #0
   1629c:	add	sl, sl, #1
   162a0:	mov	r1, r7
   162a4:	mov	r0, #48	; 0x30
   162a8:	bl	11a90 <fputc@plt>
   162ac:	cmp	r5, sl
   162b0:	bne	1629c <__assert_fail@plt+0x46f8>
   162b4:	ldr	r3, [sp, #52]	; 0x34
   162b8:	cmp	r3, #0
   162bc:	beq	16318 <__assert_fail@plt+0x4774>
   162c0:	mov	r2, r6
   162c4:	mov	r1, r8
   162c8:	mov	r0, r7
   162cc:	bl	15ab0 <__assert_fail@plt+0x3f0c>
   162d0:	add	fp, fp, r9
   162d4:	b	15c4c <__assert_fail@plt+0x40a8>
   162d8:	mov	r5, #0
   162dc:	mov	r1, #10
   162e0:	smull	r2, r3, r5, r1
   162e4:	mvn	r5, #-2147483648	; 0x80000000
   162e8:	cmp	r3, r2, asr #31
   162ec:	bne	16300 <__assert_fail@plt+0x475c>
   162f0:	ldrb	r3, [sl]
   162f4:	sub	r5, r3, #48	; 0x30
   162f8:	adds	r5, r2, r5
   162fc:	mvnvs	r5, #-2147483648	; 0x80000000
   16300:	ldrb	r3, [sl, #1]!
   16304:	sub	r2, r3, #48	; 0x30
   16308:	cmp	r2, #9
   1630c:	bls	162e0 <__assert_fail@plt+0x473c>
   16310:	mov	r6, r3
   16314:	b	15e10 <__assert_fail@plt+0x426c>
   16318:	mov	r1, r6
   1631c:	mov	r0, r8
   16320:	mov	r3, r7
   16324:	mov	r2, #1
   16328:	bl	11868 <fwrite@plt>
   1632c:	b	162d0 <__assert_fail@plt+0x472c>
   16330:	add	sl, sl, #1
   16334:	mov	r1, r7
   16338:	mov	r0, #32
   1633c:	bl	11a90 <fputc@plt>
   16340:	cmp	r5, sl
   16344:	bne	16330 <__assert_fail@plt+0x478c>
   16348:	b	162b4 <__assert_fail@plt+0x4710>
   1634c:	cmp	r6, #69	; 0x45
   16350:	beq	178a0 <__assert_fail@plt+0x5cfc>
   16354:	ldr	r2, [sp, #40]	; 0x28
   16358:	mov	r1, #100	; 0x64
   1635c:	ldr	r0, [sp, #60]	; 0x3c
   16360:	ldr	r2, [r2, #20]
   16364:	smull	ip, r0, r0, r2
   16368:	asr	ip, r2, #31
   1636c:	rsb	ip, ip, r0, asr #5
   16370:	mls	ip, r1, ip, r2
   16374:	cmp	ip, #0
   16378:	bge	16390 <__assert_fail@plt+0x47ec>
   1637c:	movw	r1, #63636	; 0xf894
   16380:	movt	r1, #65535	; 0xffff
   16384:	cmp	r2, r1
   16388:	rsblt	ip, ip, #0
   1638c:	addge	ip, ip, #100	; 0x64
   16390:	ldr	r2, [sp, #36]	; 0x24
   16394:	cmp	r2, #0
   16398:	bne	17148 <__assert_fail@plt+0x55a4>
   1639c:	ldr	r2, [sp, #1168]	; 0x490
   163a0:	cmp	r2, #43	; 0x2b
   163a4:	beq	179b8 <__assert_fail@plt+0x5e14>
   163a8:	ldr	r1, [sp, #1168]	; 0x490
   163ac:	mov	r2, #0
   163b0:	str	r1, [sp, #36]	; 0x24
   163b4:	mov	r1, #2
   163b8:	str	r2, [sp, #76]	; 0x4c
   163bc:	str	r2, [sp, #84]	; 0x54
   163c0:	mov	r2, #1
   163c4:	str	r1, [sp, #80]	; 0x50
   163c8:	mov	lr, #0
   163cc:	cmp	r6, #79	; 0x4f
   163d0:	movne	r2, #0
   163d4:	andeq	r2, r2, #1
   163d8:	cmp	r2, #0
   163dc:	beq	16aac <__assert_fail@plt+0x4f08>
   163e0:	add	r2, sp, #88	; 0x58
   163e4:	movw	r1, #9504	; 0x2520
   163e8:	mov	r8, #0
   163ec:	strh	r1, [r2]
   163f0:	add	r1, r2, #3
   163f4:	strb	r6, [sp, #90]	; 0x5a
   163f8:	mov	ip, #0
   163fc:	add	r0, sp, #104	; 0x68
   16400:	strb	r3, [r1]
   16404:	ldr	r3, [sp, #40]	; 0x28
   16408:	strb	ip, [r1, #1]
   1640c:	mov	r1, #1024	; 0x400
   16410:	bl	11910 <strftime@plt>
   16414:	cmp	r0, #0
   16418:	beq	15c4c <__assert_fail@plt+0x40a8>
   1641c:	ldr	r3, [sp, #36]	; 0x24
   16420:	sub	r6, r0, #1
   16424:	subs	r3, r3, #45	; 0x2d
   16428:	movne	r3, #1
   1642c:	cmp	r5, #0
   16430:	movlt	r3, #0
   16434:	cmp	r3, #0
   16438:	moveq	r5, r3
   1643c:	moveq	r9, r6
   16440:	beq	16450 <__assert_fail@plt+0x48ac>
   16444:	cmp	r6, r5
   16448:	movcs	r9, r6
   1644c:	movcc	r9, r5
   16450:	mvn	r3, fp
   16454:	cmp	r3, r9
   16458:	bls	15c78 <__assert_fail@plt+0x40d4>
   1645c:	cmp	r7, #0
   16460:	beq	162d0 <__assert_fail@plt+0x472c>
   16464:	cmp	r6, r5
   16468:	bcs	164a8 <__assert_fail@plt+0x4904>
   1646c:	ldr	r3, [sp, #36]	; 0x24
   16470:	sub	r5, r5, r6
   16474:	cmp	r3, #43	; 0x2b
   16478:	cmpne	r3, #48	; 0x30
   1647c:	moveq	sl, #1
   16480:	movne	sl, #0
   16484:	beq	176b0 <__assert_fail@plt+0x5b0c>
   16488:	cmp	r5, #0
   1648c:	beq	164a8 <__assert_fail@plt+0x4904>
   16490:	add	sl, sl, #1
   16494:	mov	r1, r7
   16498:	mov	r0, #32
   1649c:	bl	11a90 <fputc@plt>
   164a0:	cmp	r5, sl
   164a4:	bne	16490 <__assert_fail@plt+0x48ec>
   164a8:	cmp	r8, #0
   164ac:	bne	17684 <__assert_fail@plt+0x5ae0>
   164b0:	ldr	r3, [sp, #52]	; 0x34
   164b4:	cmp	r3, #0
   164b8:	beq	1766c <__assert_fail@plt+0x5ac8>
   164bc:	mov	r2, r6
   164c0:	add	r1, sp, #105	; 0x69
   164c4:	mov	r0, r7
   164c8:	bl	15ab0 <__assert_fail@plt+0x3f0c>
   164cc:	b	162d0 <__assert_fail@plt+0x472c>
   164d0:	cmp	r6, #79	; 0x4f
   164d4:	beq	16220 <__assert_fail@plt+0x467c>
   164d8:	mov	r3, #120	; 0x78
   164dc:	mov	r8, #0
   164e0:	add	r2, sp, #88	; 0x58
   164e4:	movw	r1, #9504	; 0x2520
   164e8:	cmp	r6, #0
   164ec:	strh	r1, [r2]
   164f0:	addeq	r1, r2, #2
   164f4:	beq	163f8 <__assert_fail@plt+0x4854>
   164f8:	b	163f0 <__assert_fail@plt+0x484c>
   164fc:	cmp	r6, #69	; 0x45
   16500:	beq	16220 <__assert_fail@plt+0x467c>
   16504:	mov	r2, #1
   16508:	str	r2, [sp, #80]	; 0x50
   1650c:	ldr	r2, [sp, #40]	; 0x28
   16510:	ldr	r2, [r2, #24]
   16514:	mov	ip, r2
   16518:	lsr	r2, r2, #31
   1651c:	mov	lr, #0
   16520:	cmp	ip, lr
   16524:	str	r2, [sp, #76]	; 0x4c
   16528:	movlt	r2, #0
   1652c:	movge	r2, #1
   16530:	str	lr, [sp, #84]	; 0x54
   16534:	b	163cc <__assert_fail@plt+0x4828>
   16538:	mov	r4, sl
   1653c:	mov	r6, #0
   16540:	ldr	r2, [sp, #40]	; 0x28
   16544:	mov	r1, #1
   16548:	ldr	r0, [sp, #56]	; 0x38
   1654c:	str	r1, [sp, #80]	; 0x50
   16550:	ldr	r2, [r2, #24]
   16554:	add	r2, r2, #6
   16558:	asr	r1, r2, #31
   1655c:	smull	ip, r0, r0, r2
   16560:	add	r0, r0, r2
   16564:	rsb	r1, r1, r0, asr #2
   16568:	rsb	r1, r1, r1, lsl #3
   1656c:	sub	r2, r2, r1
   16570:	add	r2, r2, #1
   16574:	b	16514 <__assert_fail@plt+0x4970>
   16578:	mov	r4, sl
   1657c:	ldr	r3, [sp, #36]	; 0x24
   16580:	cmp	r3, #45	; 0x2d
   16584:	beq	1772c <__assert_fail@plt+0x5b88>
   16588:	cmp	r5, #0
   1658c:	blt	1772c <__assert_fail@plt+0x5b88>
   16590:	cmp	r5, #1
   16594:	mvn	r3, fp
   16598:	movcs	r8, r5
   1659c:	movcc	r8, #1
   165a0:	cmp	r3, r8
   165a4:	bls	15c78 <__assert_fail@plt+0x40d4>
   165a8:	cmp	r7, #0
   165ac:	beq	165fc <__assert_fail@plt+0x4a58>
   165b0:	cmp	r5, #1
   165b4:	ble	165f0 <__assert_fail@plt+0x4a4c>
   165b8:	ldr	r3, [sp, #36]	; 0x24
   165bc:	sub	r5, r5, #1
   165c0:	cmp	r3, #43	; 0x2b
   165c4:	cmpne	r3, #48	; 0x30
   165c8:	moveq	r6, #1
   165cc:	movne	r6, #0
   165d0:	bne	16604 <__assert_fail@plt+0x4a60>
   165d4:	mov	r6, #0
   165d8:	add	r6, r6, #1
   165dc:	mov	r1, r7
   165e0:	mov	r0, #48	; 0x30
   165e4:	bl	11a90 <fputc@plt>
   165e8:	cmp	r5, r6
   165ec:	bne	165d8 <__assert_fail@plt+0x4a34>
   165f0:	mov	r1, r7
   165f4:	mov	r0, #9
   165f8:	bl	11a90 <fputc@plt>
   165fc:	add	fp, fp, r8
   16600:	b	15c4c <__assert_fail@plt+0x40a8>
   16604:	add	r6, r6, #1
   16608:	mov	r1, r7
   1660c:	mov	r0, #32
   16610:	bl	11a90 <fputc@plt>
   16614:	cmp	r5, r6
   16618:	bne	16604 <__assert_fail@plt+0x4a60>
   1661c:	b	165f0 <__assert_fail@plt+0x4a4c>
   16620:	mov	r4, sl
   16624:	ldr	lr, [sp, #40]	; 0x28
   16628:	mvn	ip, #0
   1662c:	add	r1, sp, #104	; 0x68
   16630:	ldr	r0, [sp, #1180]	; 0x49c
   16634:	ldrd	r8, [lr]
   16638:	ldrd	r2, [lr, #24]
   1663c:	strd	r8, [sp, #104]	; 0x68
   16640:	ldrd	r8, [lr, #8]
   16644:	strd	r2, [sp, #128]	; 0x80
   16648:	ldr	r3, [lr, #40]	; 0x28
   1664c:	strd	r8, [sp, #112]	; 0x70
   16650:	ldrd	r8, [lr, #32]
   16654:	str	ip, [sp, #132]	; 0x84
   16658:	str	r3, [sp, #144]	; 0x90
   1665c:	ldrd	r2, [lr, #16]
   16660:	strd	r2, [sp, #120]	; 0x78
   16664:	strd	r8, [sp, #136]	; 0x88
   16668:	bl	2d948 <__assert_fail@plt+0x1bda4>
   1666c:	ldr	r3, [sp, #132]	; 0x84
   16670:	cmp	r3, #0
   16674:	blt	17a6c <__assert_fail@plt+0x5ec8>
   16678:	ldr	ip, [sp, #64]	; 0x40
   1667c:	add	r2, sp, #88	; 0x58
   16680:	lsr	r3, r0, #31
   16684:	mov	r1, r0
   16688:	add	r6, r2, #14
   1668c:	str	r3, [sp, #76]	; 0x4c
   16690:	smull	r3, lr, ip, r1
   16694:	cmp	r0, #0
   16698:	asr	r8, r1, #31
   1669c:	asr	lr, lr, #2
   166a0:	sub	r3, lr, r8
   166a4:	add	r3, r3, r3, lsl #2
   166a8:	sub	r3, r1, r3, lsl #1
   166ac:	sub	r1, lr, r8
   166b0:	uxtb	r3, r3
   166b4:	rsblt	r3, r3, #48	; 0x30
   166b8:	addge	r3, r3, #48	; 0x30
   166bc:	uxtb	r3, r3
   166c0:	cmp	r1, #0
   166c4:	strb	r3, [r6, #-1]!
   166c8:	bne	16690 <__assert_fail@plt+0x4aec>
   166cc:	mov	r3, #1
   166d0:	str	r3, [sp, #80]	; 0x50
   166d4:	str	r1, [sp, #84]	; 0x54
   166d8:	ldr	r3, [sp, #36]	; 0x24
   166dc:	cmp	r3, #0
   166e0:	beq	1763c <__assert_fail@plt+0x5a98>
   166e4:	subs	r3, r3, #45	; 0x2d
   166e8:	movne	r3, #1
   166ec:	ldr	r1, [sp, #80]	; 0x50
   166f0:	cmp	r5, #0
   166f4:	add	r2, r2, #14
   166f8:	sub	r8, r2, r6
   166fc:	movlt	r5, r1
   16700:	ldr	r1, [sp, #76]	; 0x4c
   16704:	cmp	r1, #0
   16708:	bne	175cc <__assert_fail@plt+0x5a28>
   1670c:	ldr	r1, [sp, #84]	; 0x54
   16710:	cmp	r1, #0
   16714:	bne	176a4 <__assert_fail@plt+0x5b00>
   16718:	sub	r2, r5, r8
   1671c:	cmp	r2, #0
   16720:	movle	r3, #0
   16724:	andgt	r3, r3, #1
   16728:	cmp	r3, #0
   1672c:	bne	16744 <__assert_fail@plt+0x4ba0>
   16730:	ldr	r3, [sp, #36]	; 0x24
   16734:	cmp	r3, #45	; 0x2d
   16738:	moveq	r5, r1
   1673c:	moveq	r9, r8
   16740:	beq	16750 <__assert_fail@plt+0x4bac>
   16744:	cmp	r5, r8
   16748:	movcs	r9, r5
   1674c:	movcc	r9, r8
   16750:	mvn	r3, fp
   16754:	cmp	r3, r9
   16758:	bls	15c78 <__assert_fail@plt+0x40d4>
   1675c:	cmp	r7, #0
   16760:	beq	162d0 <__assert_fail@plt+0x472c>
   16764:	cmp	r5, r8
   16768:	bls	167a8 <__assert_fail@plt+0x4c04>
   1676c:	ldr	r3, [sp, #36]	; 0x24
   16770:	sub	r5, r5, r8
   16774:	cmp	r3, #43	; 0x2b
   16778:	cmpne	r3, #48	; 0x30
   1677c:	moveq	sl, #1
   16780:	movne	sl, #0
   16784:	beq	176d8 <__assert_fail@plt+0x5b34>
   16788:	cmp	r5, #0
   1678c:	beq	167a8 <__assert_fail@plt+0x4c04>
   16790:	add	sl, sl, #1
   16794:	mov	r1, r7
   16798:	mov	r0, #32
   1679c:	bl	11a90 <fputc@plt>
   167a0:	cmp	r5, sl
   167a4:	bne	16790 <__assert_fail@plt+0x4bec>
   167a8:	ldr	r3, [sp, #52]	; 0x34
   167ac:	cmp	r3, #0
   167b0:	beq	17654 <__assert_fail@plt+0x5ab0>
   167b4:	mov	r2, r8
   167b8:	mov	r1, r6
   167bc:	mov	r0, r7
   167c0:	bl	15ab0 <__assert_fail@plt+0x3f0c>
   167c4:	b	162d0 <__assert_fail@plt+0x472c>
   167c8:	mov	r4, sl
   167cc:	mov	r6, #0
   167d0:	ldr	r3, [sp, #40]	; 0x28
   167d4:	cmp	r6, #79	; 0x4f
   167d8:	ldr	r3, [r3, #16]
   167dc:	moveq	r3, #113	; 0x71
   167e0:	beq	163e0 <__assert_fail@plt+0x483c>
   167e4:	mov	ip, #11
   167e8:	mov	lr, #0
   167ec:	mul	ip, ip, r3
   167f0:	mov	r3, #1
   167f4:	str	lr, [sp, #76]	; 0x4c
   167f8:	str	r3, [sp, #80]	; 0x50
   167fc:	asr	ip, ip, #5
   16800:	str	lr, [sp, #84]	; 0x54
   16804:	add	ip, ip, r3
   16808:	add	r2, sp, #88	; 0x58
   1680c:	movw	r9, #52429	; 0xcccd
   16810:	movt	r9, #52428	; 0xcccc
   16814:	add	r0, r2, #14
   16818:	mov	sl, #58	; 0x3a
   1681c:	tst	lr, #1
   16820:	umull	r3, r1, r9, ip
   16824:	sub	r6, r0, #1
   16828:	sub	r3, r0, #2
   1682c:	beq	1683c <__assert_fail@plt+0x4c98>
   16830:	strb	sl, [r0, #-1]
   16834:	mov	r0, r6
   16838:	mov	r6, r3
   1683c:	lsr	r1, r1, #3
   16840:	asrs	lr, lr, #1
   16844:	add	r3, r1, r1, lsl #2
   16848:	movne	r8, #1
   1684c:	moveq	r8, #0
   16850:	sub	r3, ip, r3, lsl #1
   16854:	cmp	ip, #9
   16858:	orrhi	r8, r8, #1
   1685c:	mov	ip, r1
   16860:	cmp	r8, #0
   16864:	add	r3, r3, #48	; 0x30
   16868:	strb	r3, [r0, #-1]
   1686c:	mov	r0, r6
   16870:	bne	1681c <__assert_fail@plt+0x4c78>
   16874:	b	166d8 <__assert_fail@plt+0x4b34>
   16878:	cmp	r6, #69	; 0x45
   1687c:	beq	16220 <__assert_fail@plt+0x467c>
   16880:	ldr	r2, [sp, #40]	; 0x28
   16884:	mov	lr, #0
   16888:	ldr	ip, [r2, #28]
   1688c:	mov	r2, #3
   16890:	cmn	ip, #1
   16894:	str	r2, [sp, #80]	; 0x50
   16898:	add	ip, ip, #1
   1689c:	movlt	r2, #1
   168a0:	movge	r2, lr
   168a4:	str	r2, [sp, #76]	; 0x4c
   168a8:	movge	r2, #1
   168ac:	movlt	r2, lr
   168b0:	str	lr, [sp, #84]	; 0x54
   168b4:	b	163cc <__assert_fail@plt+0x4828>
   168b8:	cmp	r6, #69	; 0x45
   168bc:	beq	16220 <__assert_fail@plt+0x467c>
   168c0:	ldr	r2, [sp, #40]	; 0x28
   168c4:	ldr	r2, [r2, #12]
   168c8:	ldr	r1, [sp, #36]	; 0x24
   168cc:	cmp	r1, #0
   168d0:	mov	r1, #2
   168d4:	str	r1, [sp, #80]	; 0x50
   168d8:	moveq	r1, #95	; 0x5f
   168dc:	streq	r1, [sp, #36]	; 0x24
   168e0:	b	16514 <__assert_fail@plt+0x4970>
   168e4:	cmp	r6, #69	; 0x45
   168e8:	beq	16220 <__assert_fail@plt+0x467c>
   168ec:	mov	r2, #2
   168f0:	str	r2, [sp, #80]	; 0x50
   168f4:	ldr	r2, [sp, #40]	; 0x28
   168f8:	ldr	r2, [r2, #12]
   168fc:	b	16514 <__assert_fail@plt+0x4970>
   16900:	cmp	r6, #79	; 0x4f
   16904:	beq	16220 <__assert_fail@plt+0x467c>
   16908:	mov	r3, #99	; 0x63
   1690c:	mov	r8, #0
   16910:	b	164e0 <__assert_fail@plt+0x493c>
   16914:	mov	r4, sl
   16918:	mov	r6, #0
   1691c:	ldr	r2, [sp, #52]	; 0x34
   16920:	cmp	r9, #0
   16924:	movne	r2, r9
   16928:	cmp	r6, #69	; 0x45
   1692c:	str	r2, [sp, #52]	; 0x34
   16930:	beq	16220 <__assert_fail@plt+0x467c>
   16934:	mov	r8, #0
   16938:	b	164e0 <__assert_fail@plt+0x493c>
   1693c:	cmp	r6, #0
   16940:	bne	16220 <__assert_fail@plt+0x467c>
   16944:	ldr	r2, [sp, #52]	; 0x34
   16948:	cmp	r9, #0
   1694c:	mov	r3, #97	; 0x61
   16950:	movne	r2, r9
   16954:	str	r2, [sp, #52]	; 0x34
   16958:	add	r2, sp, #88	; 0x58
   1695c:	movw	r0, #9504	; 0x2520
   16960:	mov	r1, r2
   16964:	mov	r8, #0
   16968:	strh	r0, [r1], #2
   1696c:	b	163f8 <__assert_fail@plt+0x4854>
   16970:	mov	r4, sl
   16974:	cmp	r9, #0
   16978:	ldr	r0, [sp, #48]	; 0x30
   1697c:	ldr	r3, [sp, #52]	; 0x34
   16980:	movne	r3, #0
   16984:	str	r3, [sp, #52]	; 0x34
   16988:	bl	11988 <strlen@plt>
   1698c:	ldr	r3, [sp, #36]	; 0x24
   16990:	mov	r6, r0
   16994:	subs	r3, r3, #45	; 0x2d
   16998:	movne	r3, #1
   1699c:	cmp	r5, #0
   169a0:	movlt	r3, #0
   169a4:	cmp	r3, #0
   169a8:	moveq	r5, r3
   169ac:	moveq	r8, r0
   169b0:	beq	169c0 <__assert_fail@plt+0x4e1c>
   169b4:	cmp	r0, r5
   169b8:	movcs	r8, r0
   169bc:	movcc	r8, r5
   169c0:	mvn	r3, fp
   169c4:	cmp	r3, r8
   169c8:	bls	15c78 <__assert_fail@plt+0x40d4>
   169cc:	cmp	r7, #0
   169d0:	beq	165fc <__assert_fail@plt+0x4a58>
   169d4:	cmp	r6, r5
   169d8:	bcs	16a18 <__assert_fail@plt+0x4e74>
   169dc:	ldr	r3, [sp, #36]	; 0x24
   169e0:	sub	r5, r5, r6
   169e4:	cmp	r3, #43	; 0x2b
   169e8:	cmpne	r3, #48	; 0x30
   169ec:	moveq	sl, #1
   169f0:	movne	sl, #0
   169f4:	beq	179d0 <__assert_fail@plt+0x5e2c>
   169f8:	cmp	r5, #0
   169fc:	beq	16a18 <__assert_fail@plt+0x4e74>
   16a00:	add	sl, sl, #1
   16a04:	mov	r1, r7
   16a08:	mov	r0, #32
   16a0c:	bl	11a90 <fputc@plt>
   16a10:	cmp	r5, sl
   16a14:	bne	16a00 <__assert_fail@plt+0x4e5c>
   16a18:	cmp	r9, #0
   16a1c:	bne	17958 <__assert_fail@plt+0x5db4>
   16a20:	ldr	r3, [sp, #52]	; 0x34
   16a24:	cmp	r3, #0
   16a28:	beq	17940 <__assert_fail@plt+0x5d9c>
   16a2c:	mov	r2, r6
   16a30:	mov	r0, r7
   16a34:	ldr	r1, [sp, #48]	; 0x30
   16a38:	bl	15ab0 <__assert_fail@plt+0x3f0c>
   16a3c:	b	165fc <__assert_fail@plt+0x4a58>
   16a40:	cmp	r6, #69	; 0x45
   16a44:	beq	1796c <__assert_fail@plt+0x5dc8>
   16a48:	cmp	r6, #79	; 0x4f
   16a4c:	beq	16220 <__assert_fail@plt+0x467c>
   16a50:	ldr	r1, [sp, #36]	; 0x24
   16a54:	ldr	r2, [sp, #40]	; 0x28
   16a58:	ldr	ip, [r2, #20]
   16a5c:	movw	r2, #63636	; 0xf894
   16a60:	movt	r2, #65535	; 0xffff
   16a64:	cmp	ip, r2
   16a68:	add	ip, ip, #1888	; 0x760
   16a6c:	movlt	r2, #1
   16a70:	movge	r2, #0
   16a74:	add	ip, ip, #12
   16a78:	str	r2, [sp, #76]	; 0x4c
   16a7c:	movge	r2, #1
   16a80:	movlt	r2, #0
   16a84:	cmp	r1, #0
   16a88:	bne	17744 <__assert_fail@plt+0x5ba0>
   16a8c:	ldr	r1, [sp, #1168]	; 0x490
   16a90:	cmp	r1, #43	; 0x2b
   16a94:	beq	1775c <__assert_fail@plt+0x5bb8>
   16a98:	ldr	lr, [sp, #36]	; 0x24
   16a9c:	mov	r3, #4
   16aa0:	str	r1, [sp, #36]	; 0x24
   16aa4:	str	r3, [sp, #80]	; 0x50
   16aa8:	str	lr, [sp, #84]	; 0x54
   16aac:	ldr	r3, [sp, #76]	; 0x4c
   16ab0:	cmp	r3, #0
   16ab4:	rsbne	ip, ip, #0
   16ab8:	b	16808 <__assert_fail@plt+0x4c64>
   16abc:	mov	r4, sl
   16ac0:	ldr	r3, [sp, #36]	; 0x24
   16ac4:	cmp	r3, #45	; 0x2d
   16ac8:	beq	17714 <__assert_fail@plt+0x5b70>
   16acc:	cmp	r5, #0
   16ad0:	blt	17714 <__assert_fail@plt+0x5b70>
   16ad4:	cmp	r5, #1
   16ad8:	mvn	r3, fp
   16adc:	movcs	r8, r5
   16ae0:	movcc	r8, #1
   16ae4:	cmp	r8, r3
   16ae8:	bcs	15c78 <__assert_fail@plt+0x40d4>
   16aec:	cmp	r7, #0
   16af0:	beq	165fc <__assert_fail@plt+0x4a58>
   16af4:	cmp	r5, #1
   16af8:	ble	16b34 <__assert_fail@plt+0x4f90>
   16afc:	ldr	r3, [sp, #36]	; 0x24
   16b00:	sub	r5, r5, #1
   16b04:	cmp	r3, #43	; 0x2b
   16b08:	cmpne	r3, #48	; 0x30
   16b0c:	moveq	r6, #1
   16b10:	movne	r6, #0
   16b14:	bne	16b44 <__assert_fail@plt+0x4fa0>
   16b18:	mov	r6, #0
   16b1c:	add	r6, r6, #1
   16b20:	mov	r1, r7
   16b24:	mov	r0, #48	; 0x30
   16b28:	bl	11a90 <fputc@plt>
   16b2c:	cmp	r5, r6
   16b30:	bne	16b1c <__assert_fail@plt+0x4f78>
   16b34:	mov	r1, r7
   16b38:	mov	r0, #10
   16b3c:	bl	11a90 <fputc@plt>
   16b40:	b	165fc <__assert_fail@plt+0x4a58>
   16b44:	add	r6, r6, #1
   16b48:	mov	r1, r7
   16b4c:	mov	r0, #32
   16b50:	bl	11a90 <fputc@plt>
   16b54:	cmp	r5, r6
   16b58:	bne	16b44 <__assert_fail@plt+0x4fa0>
   16b5c:	b	16b34 <__assert_fail@plt+0x4f90>
   16b60:	cmp	r6, #69	; 0x45
   16b64:	beq	16220 <__assert_fail@plt+0x467c>
   16b68:	ldr	r2, [sp, #40]	; 0x28
   16b6c:	mov	lr, #0
   16b70:	ldr	ip, [r2, #16]
   16b74:	mov	r2, #2
   16b78:	b	16890 <__assert_fail@plt+0x4cec>
   16b7c:	cmp	r6, #69	; 0x45
   16b80:	beq	16220 <__assert_fail@plt+0x467c>
   16b84:	ldr	r2, [sp, #24]
   16b88:	b	168c8 <__assert_fail@plt+0x4d24>
   16b8c:	cmp	r6, #69	; 0x45
   16b90:	beq	16220 <__assert_fail@plt+0x467c>
   16b94:	ldr	r2, [sp, #40]	; 0x28
   16b98:	ldr	r2, [r2, #8]
   16b9c:	b	168c8 <__assert_fail@plt+0x4d24>
   16ba0:	mov	sl, r4
   16ba4:	sub	r4, sl, #1
   16ba8:	mvn	r3, fp
   16bac:	cmp	r4, r8
   16bb0:	str	r3, [sp, #76]	; 0x4c
   16bb4:	bne	16228 <__assert_fail@plt+0x4684>
   16bb8:	ldr	r3, [sp, #36]	; 0x24
   16bbc:	cmp	r3, #45	; 0x2d
   16bc0:	beq	178a8 <__assert_fail@plt+0x5d04>
   16bc4:	cmp	r5, #0
   16bc8:	blt	178a8 <__assert_fail@plt+0x5d04>
   16bcc:	ldr	r3, [sp, #76]	; 0x4c
   16bd0:	cmp	r5, #1
   16bd4:	movcs	r4, r5
   16bd8:	movcc	r4, #1
   16bdc:	cmp	r4, r3
   16be0:	bcs	15c78 <__assert_fail@plt+0x40d4>
   16be4:	cmp	r7, #0
   16be8:	beq	16c38 <__assert_fail@plt+0x5094>
   16bec:	cmp	r5, #1
   16bf0:	ble	16c2c <__assert_fail@plt+0x5088>
   16bf4:	ldr	r3, [sp, #36]	; 0x24
   16bf8:	sub	r5, r5, #1
   16bfc:	cmp	r3, #43	; 0x2b
   16c00:	cmpne	r3, #48	; 0x30
   16c04:	moveq	r6, #1
   16c08:	movne	r6, #0
   16c0c:	bne	16c44 <__assert_fail@plt+0x50a0>
   16c10:	mov	r6, #0
   16c14:	add	r6, r6, #1
   16c18:	mov	r1, r7
   16c1c:	mov	r0, #48	; 0x30
   16c20:	bl	11a90 <fputc@plt>
   16c24:	cmp	r5, r6
   16c28:	bne	16c14 <__assert_fail@plt+0x5070>
   16c2c:	mov	r1, r7
   16c30:	ldrb	r0, [sl]
   16c34:	bl	11a90 <fputc@plt>
   16c38:	add	fp, fp, r4
   16c3c:	mov	r4, sl
   16c40:	b	15c4c <__assert_fail@plt+0x40a8>
   16c44:	add	r6, r6, #1
   16c48:	mov	r1, r7
   16c4c:	mov	r0, #32
   16c50:	bl	11a90 <fputc@plt>
   16c54:	cmp	r5, r6
   16c58:	bne	16c44 <__assert_fail@plt+0x50a0>
   16c5c:	b	16c2c <__assert_fail@plt+0x5088>
   16c60:	cmp	r6, #79	; 0x4f
   16c64:	beq	16220 <__assert_fail@plt+0x467c>
   16c68:	mov	r3, #88	; 0x58
   16c6c:	b	16934 <__assert_fail@plt+0x4d90>
   16c70:	cmp	r6, #69	; 0x45
   16c74:	beq	16220 <__assert_fail@plt+0x467c>
   16c78:	ldr	r1, [sp, #40]	; 0x28
   16c7c:	mov	r0, #2
   16c80:	ldr	lr, [sp, #56]	; 0x38
   16c84:	str	r0, [sp, #80]	; 0x50
   16c88:	ldr	r2, [r1, #24]
   16c8c:	ldr	r1, [r1, #28]
   16c90:	add	r2, r2, #6
   16c94:	asr	r0, r2, #31
   16c98:	smull	r8, ip, lr, r2
   16c9c:	add	ip, ip, r2
   16ca0:	rsb	r0, r0, ip, asr #2
   16ca4:	rsb	r0, r0, r0, lsl #3
   16ca8:	sub	r2, r2, r0
   16cac:	sub	r1, r1, r2
   16cb0:	add	r1, r1, #7
   16cb4:	asr	r2, r1, #31
   16cb8:	smull	ip, r0, lr, r1
   16cbc:	add	r1, r0, r1
   16cc0:	rsb	r2, r2, r1, asr #2
   16cc4:	b	16514 <__assert_fail@plt+0x4970>
   16cc8:	cmp	r6, #69	; 0x45
   16ccc:	beq	16220 <__assert_fail@plt+0x467c>
   16cd0:	ldr	r1, [sp, #40]	; 0x28
   16cd4:	mov	r0, #2
   16cd8:	str	r0, [sp, #80]	; 0x50
   16cdc:	ldr	r2, [r1, #24]
   16ce0:	ldr	r1, [r1, #28]
   16ce4:	sub	r1, r1, r2
   16ce8:	ldr	r2, [sp, #56]	; 0x38
   16cec:	add	r1, r1, #7
   16cf0:	smull	r2, r0, r2, r1
   16cf4:	asr	r2, r1, #31
   16cf8:	add	r1, r0, r1
   16cfc:	rsb	r2, r2, r1, asr #2
   16d00:	b	16514 <__assert_fail@plt+0x4970>
   16d04:	mov	r4, sl
   16d08:	movw	r8, #11648	; 0x2d80
   16d0c:	movt	r8, #3
   16d10:	mvn	r3, fp
   16d14:	mvn	sl, #0
   16d18:	str	r3, [sp, #76]	; 0x4c
   16d1c:	ldr	r6, [sp, #36]	; 0x24
   16d20:	mov	r1, r8
   16d24:	mov	r0, #0
   16d28:	ldr	r2, [sp, #40]	; 0x28
   16d2c:	ldr	ip, [sp, #1176]	; 0x498
   16d30:	ldr	r3, [sp, #52]	; 0x34
   16d34:	stm	sp, {r6, sl, ip}
   16d38:	ldr	ip, [sp, #1180]	; 0x49c
   16d3c:	str	ip, [sp, #12]
   16d40:	ldr	ip, [sp, #1184]	; 0x4a0
   16d44:	str	ip, [sp, #16]
   16d48:	bl	15b0c <__assert_fail@plt+0x3f68>
   16d4c:	cmp	r6, #45	; 0x2d
   16d50:	beq	17698 <__assert_fail@plt+0x5af4>
   16d54:	cmp	r5, #0
   16d58:	blt	17698 <__assert_fail@plt+0x5af4>
   16d5c:	cmp	r0, r5
   16d60:	movcs	r9, r0
   16d64:	movcc	r9, r5
   16d68:	ldr	r3, [sp, #76]	; 0x4c
   16d6c:	cmp	r9, r3
   16d70:	bcs	15c78 <__assert_fail@plt+0x40d4>
   16d74:	cmp	r7, #0
   16d78:	beq	162d0 <__assert_fail@plt+0x472c>
   16d7c:	cmp	r5, r0
   16d80:	bls	16dbc <__assert_fail@plt+0x5218>
   16d84:	ldr	r3, [sp, #36]	; 0x24
   16d88:	sub	r5, r5, r0
   16d8c:	cmp	r3, #43	; 0x2b
   16d90:	cmpne	r3, #48	; 0x30
   16d94:	moveq	r6, #1
   16d98:	movne	r6, #0
   16d9c:	bne	16df0 <__assert_fail@plt+0x524c>
   16da0:	mov	r6, #0
   16da4:	add	r6, r6, #1
   16da8:	mov	r1, r7
   16dac:	mov	r0, #48	; 0x30
   16db0:	bl	11a90 <fputc@plt>
   16db4:	cmp	r5, r6
   16db8:	bne	16da4 <__assert_fail@plt+0x5200>
   16dbc:	ldr	r2, [sp, #36]	; 0x24
   16dc0:	mov	r1, r8
   16dc4:	mov	r0, r7
   16dc8:	ldr	r3, [sp, #52]	; 0x34
   16dcc:	ldr	ip, [sp, #1176]	; 0x498
   16dd0:	stm	sp, {r2, sl, ip}
   16dd4:	ldr	r2, [sp, #40]	; 0x28
   16dd8:	ldr	ip, [sp, #1180]	; 0x49c
   16ddc:	str	ip, [sp, #12]
   16de0:	ldr	ip, [sp, #1184]	; 0x4a0
   16de4:	str	ip, [sp, #16]
   16de8:	bl	15b0c <__assert_fail@plt+0x3f68>
   16dec:	b	162d0 <__assert_fail@plt+0x472c>
   16df0:	add	r6, r6, #1
   16df4:	mov	r1, r7
   16df8:	mov	r0, #32
   16dfc:	bl	11a90 <fputc@plt>
   16e00:	cmp	r5, r6
   16e04:	bne	16df0 <__assert_fail@plt+0x524c>
   16e08:	b	16dbc <__assert_fail@plt+0x5218>
   16e0c:	cmp	r6, #69	; 0x45
   16e10:	beq	16220 <__assert_fail@plt+0x467c>
   16e14:	mov	r2, #2
   16e18:	str	r2, [sp, #80]	; 0x50
   16e1c:	ldr	r2, [sp, #40]	; 0x28
   16e20:	ldr	r2, [r2]
   16e24:	b	16514 <__assert_fail@plt+0x4970>
   16e28:	mov	r4, sl
   16e2c:	mov	r6, #0
   16e30:	mvn	r3, fp
   16e34:	cmp	r6, #69	; 0x45
   16e38:	str	r3, [sp, #76]	; 0x4c
   16e3c:	beq	16228 <__assert_fail@plt+0x4684>
   16e40:	cmp	r5, #0
   16e44:	mov	r6, #9
   16e48:	ldr	r0, [sp, #64]	; 0x40
   16e4c:	movle	r5, #9
   16e50:	ldr	r3, [sp, #1184]	; 0x4a0
   16e54:	b	16e64 <__assert_fail@plt+0x52c0>
   16e58:	smull	r2, r3, r0, r3
   16e5c:	sub	r6, r6, #1
   16e60:	rsb	r3, r1, r3, asr #2
   16e64:	cmp	r6, r5
   16e68:	asr	r1, r3, #31
   16e6c:	bgt	16e58 <__assert_fail@plt+0x52b4>
   16e70:	cmp	r6, #1
   16e74:	smull	r1, r2, r0, r3
   16e78:	asr	r1, r3, #31
   16e7c:	ble	177ac <__assert_fail@plt+0x5c08>
   16e80:	rsb	r2, r1, r2, asr #2
   16e84:	add	r2, r2, r2, lsl #2
   16e88:	cmp	r3, r2, lsl #1
   16e8c:	beq	16e58 <__assert_fail@plt+0x52b4>
   16e90:	ldr	lr, [sp, #64]	; 0x40
   16e94:	add	r2, sp, #88	; 0x58
   16e98:	sub	ip, r6, #1
   16e9c:	add	ip, r2, ip
   16ea0:	rsb	r2, r2, #1
   16ea4:	smull	r8, r0, lr, r3
   16ea8:	rsb	r1, r1, r0, asr #2
   16eac:	add	r0, r1, r1, lsl #2
   16eb0:	sub	r0, r3, r0, lsl #1
   16eb4:	mov	r3, r1
   16eb8:	asr	r1, r1, #31
   16ebc:	add	r0, r0, #48	; 0x30
   16ec0:	strb	r0, [ip], #-1
   16ec4:	add	r0, r2, ip
   16ec8:	cmp	r0, #0
   16ecc:	bgt	16ea4 <__assert_fail@plt+0x5300>
   16ed0:	ldr	r3, [sp, #36]	; 0x24
   16ed4:	cmp	r3, #0
   16ed8:	moveq	r3, #48	; 0x30
   16edc:	str	r3, [sp, #36]	; 0x24
   16ee0:	ldr	r3, [sp, #76]	; 0x4c
   16ee4:	cmp	r6, r3
   16ee8:	bcs	15c78 <__assert_fail@plt+0x40d4>
   16eec:	cmp	r7, #0
   16ef0:	beq	16f10 <__assert_fail@plt+0x536c>
   16ef4:	ldr	r3, [sp, #52]	; 0x34
   16ef8:	cmp	r3, #0
   16efc:	beq	17980 <__assert_fail@plt+0x5ddc>
   16f00:	mov	r2, r6
   16f04:	add	r1, sp, #88	; 0x58
   16f08:	mov	r0, r7
   16f0c:	bl	15ab0 <__assert_fail@plt+0x3f0c>
   16f10:	ldr	r3, [sp, #36]	; 0x24
   16f14:	add	fp, fp, r6
   16f18:	cmp	r3, #45	; 0x2d
   16f1c:	beq	17974 <__assert_fail@plt+0x5dd0>
   16f20:	sub	r5, r5, r6
   16f24:	mvn	r3, fp
   16f28:	cmp	r5, r3
   16f2c:	bcs	15c78 <__assert_fail@plt+0x40d4>
   16f30:	cmp	r7, #0
   16f34:	beq	16f74 <__assert_fail@plt+0x53d0>
   16f38:	cmp	r5, #0
   16f3c:	beq	15c4c <__assert_fail@plt+0x40a8>
   16f40:	ldr	r3, [sp, #36]	; 0x24
   16f44:	cmp	r3, #43	; 0x2b
   16f48:	cmpne	r3, #48	; 0x30
   16f4c:	moveq	r6, #1
   16f50:	movne	r6, #0
   16f54:	bne	16f7c <__assert_fail@plt+0x53d8>
   16f58:	mov	r6, #0
   16f5c:	add	r6, r6, #1
   16f60:	mov	r1, r7
   16f64:	mov	r0, #48	; 0x30
   16f68:	bl	11a90 <fputc@plt>
   16f6c:	cmp	r5, r6
   16f70:	bne	16f5c <__assert_fail@plt+0x53b8>
   16f74:	add	fp, fp, r5
   16f78:	b	15c4c <__assert_fail@plt+0x40a8>
   16f7c:	add	r6, r6, #1
   16f80:	mov	r1, r7
   16f84:	mov	r0, #32
   16f88:	bl	11a90 <fputc@plt>
   16f8c:	cmp	r5, r6
   16f90:	bne	16f7c <__assert_fail@plt+0x53d8>
   16f94:	b	16f74 <__assert_fail@plt+0x53d0>
   16f98:	cmp	r6, #69	; 0x45
   16f9c:	beq	16220 <__assert_fail@plt+0x467c>
   16fa0:	mov	r2, #2
   16fa4:	str	r2, [sp, #80]	; 0x50
   16fa8:	ldr	r2, [sp, #40]	; 0x28
   16fac:	ldr	r2, [r2, #4]
   16fb0:	b	16514 <__assert_fail@plt+0x4970>
   16fb4:	cmp	r6, #69	; 0x45
   16fb8:	beq	16220 <__assert_fail@plt+0x467c>
   16fbc:	mov	r1, #2
   16fc0:	ldr	r2, [sp, #24]
   16fc4:	str	r1, [sp, #80]	; 0x50
   16fc8:	b	16514 <__assert_fail@plt+0x4970>
   16fcc:	cmp	r6, #69	; 0x45
   16fd0:	beq	16220 <__assert_fail@plt+0x467c>
   16fd4:	mov	r2, #2
   16fd8:	str	r2, [sp, #80]	; 0x50
   16fdc:	ldr	r2, [sp, #40]	; 0x28
   16fe0:	ldr	r2, [r2, #8]
   16fe4:	b	16514 <__assert_fail@plt+0x4970>
   16fe8:	cmp	r6, #69	; 0x45
   16fec:	beq	16220 <__assert_fail@plt+0x467c>
   16ff0:	ldr	r2, [sp, #40]	; 0x28
   16ff4:	ldr	r8, [r2, #20]
   16ff8:	ldr	r1, [r2, #24]
   16ffc:	ldr	r9, [r2, #28]
   17000:	cmp	r8, #0
   17004:	ldr	r2, [sp, #56]	; 0x38
   17008:	str	r1, [sp, #76]	; 0x4c
   1700c:	sub	r1, r9, r1
   17010:	add	r1, r1, #380	; 0x17c
   17014:	add	r1, r1, #2
   17018:	asr	r0, r1, #31
   1701c:	smull	r2, ip, r2, r1
   17020:	movlt	r2, #300	; 0x12c
   17024:	mvnge	r2, #99	; 0x63
   17028:	add	ip, ip, r1
   1702c:	add	r2, r8, r2
   17030:	rsb	r0, r0, ip, asr #2
   17034:	rsb	r0, r0, r0, lsl #3
   17038:	sub	r0, r1, r0
   1703c:	sub	sl, r9, r0
   17040:	adds	sl, sl, #3
   17044:	bmi	1780c <__assert_fail@plt+0x5c68>
   17048:	tst	r2, #3
   1704c:	movwne	r2, #365	; 0x16d
   17050:	bne	17098 <__assert_fail@plt+0x54f4>
   17054:	ldr	r1, [sp, #60]	; 0x3c
   17058:	mov	ip, #100	; 0x64
   1705c:	smull	r1, r0, r1, r2
   17060:	asr	r1, r2, #31
   17064:	rsb	r1, r1, r0, asr #5
   17068:	mls	r1, ip, r1, r2
   1706c:	cmp	r1, #0
   17070:	movwne	r2, #366	; 0x16e
   17074:	bne	17098 <__assert_fail@plt+0x54f4>
   17078:	mov	ip, #400	; 0x190
   1707c:	movw	r1, #365	; 0x16d
   17080:	movw	lr, #366	; 0x16e
   17084:	sdiv	r0, r2, ip
   17088:	mls	r2, ip, r0, r2
   1708c:	cmp	r2, #0
   17090:	movne	r2, r1
   17094:	moveq	r2, lr
   17098:	sub	r9, r9, r2
   1709c:	ldr	r0, [sp, #56]	; 0x38
   170a0:	ldr	r2, [sp, #76]	; 0x4c
   170a4:	sub	r2, r9, r2
   170a8:	add	r2, r2, #380	; 0x17c
   170ac:	add	r2, r2, #2
   170b0:	asr	r1, r2, #31
   170b4:	smull	ip, r0, r0, r2
   170b8:	add	r0, r0, r2
   170bc:	rsb	r1, r1, r0, asr #2
   170c0:	rsb	r1, r1, r1, lsl #3
   170c4:	sub	r2, r2, r1
   170c8:	sub	r2, r9, r2
   170cc:	add	r2, r2, #3
   170d0:	cmp	r2, #0
   170d4:	movge	sl, r2
   170d8:	movge	lr, #1
   170dc:	movlt	lr, #0
   170e0:	cmp	r3, #71	; 0x47
   170e4:	beq	178e4 <__assert_fail@plt+0x5d40>
   170e8:	cmp	r3, #103	; 0x67
   170ec:	bne	178c0 <__assert_fail@plt+0x5d1c>
   170f0:	ldr	ip, [sp, #60]	; 0x3c
   170f4:	mov	r0, #100	; 0x64
   170f8:	smull	r2, r1, ip, r8
   170fc:	asr	r2, r8, #31
   17100:	rsb	r2, r2, r1, asr #5
   17104:	mls	r2, r0, r2, r8
   17108:	add	r2, r2, lr
   1710c:	asr	r1, r2, #31
   17110:	smull	r9, ip, ip, r2
   17114:	rsb	ip, r1, ip, asr #5
   17118:	mls	ip, r0, ip, r2
   1711c:	cmp	ip, #0
   17120:	bge	16390 <__assert_fail@plt+0x47ec>
   17124:	movw	r2, #63636	; 0xf894
   17128:	movt	r2, #65535	; 0xffff
   1712c:	sub	r2, r2, lr
   17130:	cmp	r2, r8
   17134:	ldr	r2, [sp, #36]	; 0x24
   17138:	ble	17a5c <__assert_fail@plt+0x5eb8>
   1713c:	cmp	r2, #0
   17140:	rsb	ip, ip, #0
   17144:	beq	1639c <__assert_fail@plt+0x47f8>
   17148:	ldr	r2, [sp, #36]	; 0x24
   1714c:	cmp	r2, #43	; 0x2b
   17150:	beq	177b8 <__assert_fail@plt+0x5c14>
   17154:	mov	r2, #0
   17158:	mov	r1, r2
   1715c:	mov	r2, #1
   17160:	str	r1, [sp, #76]	; 0x4c
   17164:	str	r1, [sp, #84]	; 0x54
   17168:	mov	r1, #2
   1716c:	str	r1, [sp, #80]	; 0x50
   17170:	b	163c8 <__assert_fail@plt+0x4824>
   17174:	mov	r4, sl
   17178:	mov	r6, #0
   1717c:	mvn	r3, fp
   17180:	cmp	r6, #0
   17184:	str	r3, [sp, #76]	; 0x4c
   17188:	bne	16228 <__assert_fail@plt+0x4684>
   1718c:	ldr	r3, [sp, #36]	; 0x24
   17190:	cmp	r3, #0
   17194:	lsreq	r3, r5, #31
   17198:	movne	r3, #0
   1719c:	cmp	r3, #0
   171a0:	bne	17a08 <__assert_fail@plt+0x5e64>
   171a4:	sub	sl, r5, #6
   171a8:	movw	r8, #10344	; 0x2868
   171ac:	movt	r8, #3
   171b0:	bic	sl, sl, sl, asr #31
   171b4:	b	16d1c <__assert_fail@plt+0x5178>
   171b8:	cmp	r6, #69	; 0x45
   171bc:	beq	17804 <__assert_fail@plt+0x5c60>
   171c0:	ldr	r2, [sp, #40]	; 0x28
   171c4:	movw	ip, #1899	; 0x76b
   171c8:	ldr	r0, [r2, #20]
   171cc:	movw	r2, #63636	; 0xf894
   171d0:	movt	r2, #65535	; 0xffff
   171d4:	add	r1, r0, #1888	; 0x760
   171d8:	cmp	r0, r2
   171dc:	add	r1, r1, #12
   171e0:	movge	lr, #0
   171e4:	movlt	lr, #1
   171e8:	cmp	r1, ip
   171ec:	mvnls	r1, #98	; 0x62
   171f0:	movhi	r1, #0
   171f4:	add	r1, r1, r0
   171f8:	cmp	r0, r2
   171fc:	ldr	r0, [sp, #36]	; 0x24
   17200:	movlt	r2, #0
   17204:	movge	r2, #1
   17208:	asr	ip, r1, #31
   1720c:	str	lr, [sp, #76]	; 0x4c
   17210:	cmp	r0, #0
   17214:	ldr	r0, [sp, #60]	; 0x3c
   17218:	smull	r0, r1, r0, r1
   1721c:	rsb	r1, ip, r1, asr #5
   17220:	add	ip, r1, #19
   17224:	bne	177e8 <__assert_fail@plt+0x5c44>
   17228:	ldr	r1, [sp, #1168]	; 0x490
   1722c:	cmp	r1, #43	; 0x2b
   17230:	beq	179f8 <__assert_fail@plt+0x5e54>
   17234:	ldr	r1, [sp, #1168]	; 0x490
   17238:	mov	r0, #2
   1723c:	str	r1, [sp, #36]	; 0x24
   17240:	mov	r1, #0
   17244:	strd	r0, [sp, #80]	; 0x50
   17248:	b	163c8 <__assert_fail@plt+0x4824>
   1724c:	mov	r4, sl
   17250:	mov	r6, #0
   17254:	mvn	r3, fp
   17258:	cmp	r6, #0
   1725c:	str	r3, [sp, #76]	; 0x4c
   17260:	bne	16228 <__assert_fail@plt+0x4684>
   17264:	movw	r8, #11668	; 0x2d94
   17268:	movt	r8, #3
   1726c:	mvn	sl, #0
   17270:	b	16d1c <__assert_fail@plt+0x5178>
   17274:	cmp	r6, #69	; 0x45
   17278:	beq	16220 <__assert_fail@plt+0x467c>
   1727c:	ldr	r2, [sp, #52]	; 0x34
   17280:	cmp	r9, #0
   17284:	mov	r3, #66	; 0x42
   17288:	movne	r2, r9
   1728c:	mov	r8, #0
   17290:	str	r2, [sp, #52]	; 0x34
   17294:	b	164e0 <__assert_fail@plt+0x493c>
   17298:	mov	r4, sl
   1729c:	mov	r6, #0
   172a0:	mov	r3, #114	; 0x72
   172a4:	mov	r8, #0
   172a8:	b	164e0 <__assert_fail@plt+0x493c>
   172ac:	mov	r4, sl
   172b0:	mov	r6, #0
   172b4:	mov	r8, #0
   172b8:	ldr	r2, [sp, #52]	; 0x34
   172bc:	cmp	r9, #0
   172c0:	mov	r3, #112	; 0x70
   172c4:	movne	r2, #0
   172c8:	movne	r8, r9
   172cc:	str	r2, [sp, #52]	; 0x34
   172d0:	b	164e0 <__assert_fail@plt+0x493c>
   172d4:	mov	r4, sl
   172d8:	mvn	r3, fp
   172dc:	movw	r8, #11660	; 0x2d8c
   172e0:	movt	r8, #3
   172e4:	mvn	sl, #0
   172e8:	str	r3, [sp, #76]	; 0x4c
   172ec:	b	16d1c <__assert_fail@plt+0x5178>
   172f0:	mov	r4, sl
   172f4:	mov	r6, #0
   172f8:	mov	r8, #1
   172fc:	b	172b8 <__assert_fail@plt+0x5714>
   17300:	mov	r4, sl
   17304:	mov	r6, #0
   17308:	mov	sl, #0
   1730c:	ldr	r1, [sp, #40]	; 0x28
   17310:	ldr	r2, [r1, #32]
   17314:	cmp	r2, #0
   17318:	blt	15c4c <__assert_fail@plt+0x40a8>
   1731c:	ldr	r1, [r1, #36]	; 0x24
   17320:	cmp	r1, #0
   17324:	movlt	r2, #1
   17328:	strlt	r2, [sp, #76]	; 0x4c
   1732c:	blt	17354 <__assert_fail@plt+0x57b0>
   17330:	movne	r2, #0
   17334:	strne	r2, [sp, #76]	; 0x4c
   17338:	bne	17354 <__assert_fail@plt+0x57b0>
   1733c:	ldr	r2, [sp, #48]	; 0x30
   17340:	ldrb	r2, [r2]
   17344:	sub	r2, r2, #45	; 0x2d
   17348:	clz	r2, r2
   1734c:	lsr	r2, r2, #5
   17350:	str	r2, [sp, #76]	; 0x4c
   17354:	ldr	r0, [sp, #72]	; 0x48
   17358:	asr	r9, r1, #31
   1735c:	smull	ip, r2, r0, r1
   17360:	ldr	ip, [sp, #68]	; 0x44
   17364:	add	r2, r2, r1
   17368:	rsb	r2, r9, r2, asr #5
   1736c:	smull	lr, ip, ip, r1
   17370:	asr	lr, r2, #31
   17374:	add	ip, ip, r1
   17378:	str	ip, [sp, #80]	; 0x50
   1737c:	smull	ip, r0, r0, r2
   17380:	ldr	ip, [sp, #80]	; 0x50
   17384:	add	r0, r0, r2
   17388:	rsb	lr, lr, r0, asr #5
   1738c:	rsb	r9, r9, ip, asr #11
   17390:	rsb	lr, lr, lr, lsl #4
   17394:	rsb	ip, r2, r2, lsl #4
   17398:	sub	lr, r2, lr, lsl #2
   1739c:	sub	r1, r1, ip, lsl #2
   173a0:	cmp	sl, #3
   173a4:	ldrls	pc, [pc, sl, lsl #2]
   173a8:	b	16220 <__assert_fail@plt+0x467c>
   173ac:	andeq	r7, r1, r8, ror r5
   173b0:	andeq	r7, r1, r0, asr r5
   173b4:	andeq	r7, r1, ip, lsl r5
   173b8:	muleq	r1, ip, r5
   173bc:	mov	r4, sl
   173c0:	mov	r6, #0
   173c4:	ldrb	r2, [r4, #1]
   173c8:	add	r1, r4, #1
   173cc:	cmp	r2, #58	; 0x3a
   173d0:	movne	sl, #1
   173d4:	beq	17998 <__assert_fail@plt+0x5df4>
   173d8:	cmp	r2, #122	; 0x7a
   173dc:	bne	16220 <__assert_fail@plt+0x467c>
   173e0:	mov	r4, r1
   173e4:	b	1730c <__assert_fail@plt+0x5768>
   173e8:	cmp	r6, #0
   173ec:	bne	16220 <__assert_fail@plt+0x467c>
   173f0:	mov	sl, r4
   173f4:	ldr	r3, [sp, #52]	; 0x34
   173f8:	cmp	r9, #0
   173fc:	mov	r4, sl
   17400:	movne	r3, r9
   17404:	str	r3, [sp, #52]	; 0x34
   17408:	mov	r3, #65	; 0x41
   1740c:	b	16958 <__assert_fail@plt+0x4db4>
   17410:	mov	r4, sl
   17414:	mov	r6, #0
   17418:	b	1727c <__assert_fail@plt+0x56d8>
   1741c:	mov	r4, sl
   17420:	mov	r6, #0
   17424:	b	16354 <__assert_fail@plt+0x47b0>
   17428:	mov	r4, sl
   1742c:	mov	r6, #0
   17430:	b	16504 <__assert_fail@plt+0x4960>
   17434:	mov	r4, sl
   17438:	mov	r6, #0
   1743c:	b	164d8 <__assert_fail@plt+0x4934>
   17440:	mov	r4, sl
   17444:	mov	r6, #0
   17448:	b	16b84 <__assert_fail@plt+0x4fe0>
   1744c:	mov	r4, sl
   17450:	mov	r6, #0
   17454:	b	16b68 <__assert_fail@plt+0x4fc4>
   17458:	mov	r4, sl
   1745c:	mov	r6, #0
   17460:	b	16908 <__assert_fail@plt+0x4d64>
   17464:	mov	r4, sl
   17468:	mov	r6, #0
   1746c:	b	168ec <__assert_fail@plt+0x4d48>
   17470:	mov	r4, sl
   17474:	mov	r6, #0
   17478:	b	168c0 <__assert_fail@plt+0x4d1c>
   1747c:	mov	r4, sl
   17480:	mov	r6, #0
   17484:	b	16880 <__assert_fail@plt+0x4cdc>
   17488:	mov	r4, sl
   1748c:	mov	r6, #0
   17490:	b	16b94 <__assert_fail@plt+0x4ff0>
   17494:	mov	r4, sl
   17498:	mov	r6, #0
   1749c:	b	171c0 <__assert_fail@plt+0x561c>
   174a0:	mov	r4, sl
   174a4:	mov	r6, #0
   174a8:	b	16ff0 <__assert_fail@plt+0x544c>
   174ac:	mov	r4, sl
   174b0:	mov	r6, #0
   174b4:	b	16fd4 <__assert_fail@plt+0x5430>
   174b8:	mov	r4, sl
   174bc:	mov	r6, #0
   174c0:	b	16fbc <__assert_fail@plt+0x5418>
   174c4:	mov	r4, sl
   174c8:	mov	r6, #0
   174cc:	b	16fa0 <__assert_fail@plt+0x53fc>
   174d0:	mov	r4, sl
   174d4:	mov	r6, #0
   174d8:	b	16cd0 <__assert_fail@plt+0x512c>
   174dc:	mov	r4, sl
   174e0:	mov	r6, #0
   174e4:	b	16c78 <__assert_fail@plt+0x50d4>
   174e8:	mov	r4, sl
   174ec:	mov	r6, #0
   174f0:	b	16c68 <__assert_fail@plt+0x50c4>
   174f4:	mov	r4, sl
   174f8:	mov	r6, #0
   174fc:	b	16a50 <__assert_fail@plt+0x4eac>
   17500:	mov	r4, sl
   17504:	b	16944 <__assert_fail@plt+0x4da0>
   17508:	mov	r4, sl
   1750c:	mov	r6, #0
   17510:	b	16e14 <__assert_fail@plt+0x5270>
   17514:	mov	r4, sl
   17518:	b	16220 <__assert_fail@plt+0x467c>
   1751c:	mov	ip, #100	; 0x64
   17520:	movw	r0, #10000	; 0x2710
   17524:	ldr	r2, [sp, #76]	; 0x4c
   17528:	mul	ip, ip, lr
   1752c:	mov	lr, #1
   17530:	str	lr, [sp, #84]	; 0x54
   17534:	mov	lr, #20
   17538:	mla	ip, r0, r9, ip
   1753c:	mov	r0, #9
   17540:	eor	r2, r2, #1
   17544:	str	r0, [sp, #80]	; 0x50
   17548:	add	ip, ip, r1
   1754c:	b	163cc <__assert_fail@plt+0x4828>
   17550:	ldr	r2, [sp, #76]	; 0x4c
   17554:	mov	r1, #1
   17558:	mov	ip, #100	; 0x64
   1755c:	str	r1, [sp, #84]	; 0x54
   17560:	mov	r1, #6
   17564:	mla	ip, ip, r9, lr
   17568:	mov	lr, #4
   1756c:	str	r1, [sp, #80]	; 0x50
   17570:	eor	r2, r2, #1
   17574:	b	163cc <__assert_fail@plt+0x4828>
   17578:	ldr	r2, [sp, #76]	; 0x4c
   1757c:	mov	r1, #1
   17580:	mov	ip, #100	; 0x64
   17584:	str	r1, [sp, #84]	; 0x54
   17588:	mov	r1, #5
   1758c:	mla	ip, ip, r9, lr
   17590:	str	r1, [sp, #80]	; 0x50
   17594:	eor	r2, r2, #1
   17598:	b	163c8 <__assert_fail@plt+0x4824>
   1759c:	cmp	r1, #0
   175a0:	bne	1751c <__assert_fail@plt+0x5978>
   175a4:	cmp	lr, #0
   175a8:	bne	17550 <__assert_fail@plt+0x59ac>
   175ac:	ldr	r2, [sp, #76]	; 0x4c
   175b0:	mov	r1, #1
   175b4:	mov	ip, r9
   175b8:	str	r1, [sp, #84]	; 0x54
   175bc:	mov	r1, #3
   175c0:	str	r1, [sp, #80]	; 0x50
   175c4:	eor	r2, r2, #1
   175c8:	b	163cc <__assert_fail@plt+0x4828>
   175cc:	mov	r2, #45	; 0x2d
   175d0:	str	r2, [sp, #76]	; 0x4c
   175d4:	sub	sl, r5, #1
   175d8:	sub	sl, sl, r8
   175dc:	cmp	sl, #0
   175e0:	movle	r3, #0
   175e4:	andgt	r3, r3, #1
   175e8:	cmp	r3, #0
   175ec:	ldr	r3, [sp, #36]	; 0x24
   175f0:	moveq	sl, #0
   175f4:	cmp	r3, #95	; 0x5f
   175f8:	beq	17700 <__assert_fail@plt+0x5b5c>
   175fc:	cmn	fp, #3
   17600:	bhi	15c78 <__assert_fail@plt+0x40d4>
   17604:	cmp	r7, #0
   17608:	beq	17618 <__assert_fail@plt+0x5a74>
   1760c:	mov	r1, r7
   17610:	ldr	r0, [sp, #76]	; 0x4c
   17614:	bl	11a90 <fputc@plt>
   17618:	ldr	r3, [sp, #36]	; 0x24
   1761c:	add	fp, fp, #1
   17620:	cmp	r3, #45	; 0x2d
   17624:	beq	17630 <__assert_fail@plt+0x5a8c>
   17628:	subs	r5, r5, #1
   1762c:	bpl	16744 <__assert_fail@plt+0x4ba0>
   17630:	mov	r9, r8
   17634:	mov	r5, #0
   17638:	b	16750 <__assert_fail@plt+0x4bac>
   1763c:	mov	r1, #48	; 0x30
   17640:	mov	r3, #1
   17644:	str	r1, [sp, #36]	; 0x24
   17648:	b	166ec <__assert_fail@plt+0x4b48>
   1764c:	mov	fp, r3
   17650:	b	15c60 <__assert_fail@plt+0x40bc>
   17654:	mov	r1, r8
   17658:	mov	r0, r6
   1765c:	mov	r3, r7
   17660:	mov	r2, #1
   17664:	bl	11868 <fwrite@plt>
   17668:	b	162d0 <__assert_fail@plt+0x472c>
   1766c:	mov	r1, r6
   17670:	add	r0, sp, #105	; 0x69
   17674:	mov	r3, r7
   17678:	mov	r2, #1
   1767c:	bl	11868 <fwrite@plt>
   17680:	b	162d0 <__assert_fail@plt+0x472c>
   17684:	mov	r2, r6
   17688:	add	r1, sp, #105	; 0x69
   1768c:	mov	r0, r7
   17690:	bl	15a54 <__assert_fail@plt+0x3eb0>
   17694:	b	162d0 <__assert_fail@plt+0x472c>
   17698:	mov	r9, r0
   1769c:	mov	r5, #0
   176a0:	b	16d68 <__assert_fail@plt+0x51c4>
   176a4:	mov	r2, #43	; 0x2b
   176a8:	str	r2, [sp, #76]	; 0x4c
   176ac:	b	175d4 <__assert_fail@plt+0x5a30>
   176b0:	cmp	r5, #0
   176b4:	beq	164a8 <__assert_fail@plt+0x4904>
   176b8:	mov	sl, #0
   176bc:	add	sl, sl, #1
   176c0:	mov	r1, r7
   176c4:	mov	r0, #48	; 0x30
   176c8:	bl	11a90 <fputc@plt>
   176cc:	cmp	r5, sl
   176d0:	bne	176bc <__assert_fail@plt+0x5b18>
   176d4:	b	164a8 <__assert_fail@plt+0x4904>
   176d8:	cmp	r5, #0
   176dc:	beq	167a8 <__assert_fail@plt+0x4c04>
   176e0:	mov	sl, #0
   176e4:	add	sl, sl, #1
   176e8:	mov	r1, r7
   176ec:	mov	r0, #48	; 0x30
   176f0:	bl	11a90 <fputc@plt>
   176f4:	cmp	r5, sl
   176f8:	bne	176e4 <__assert_fail@plt+0x5b40>
   176fc:	b	167a8 <__assert_fail@plt+0x4c04>
   17700:	cmp	r7, #0
   17704:	bne	17784 <__assert_fail@plt+0x5be0>
   17708:	add	fp, fp, sl
   1770c:	sub	r5, r5, sl
   17710:	b	175fc <__assert_fail@plt+0x5a58>
   17714:	cmn	fp, #3
   17718:	bhi	15c78 <__assert_fail@plt+0x40d4>
   1771c:	cmp	r7, #0
   17720:	mov	r8, #1
   17724:	bne	16b34 <__assert_fail@plt+0x4f90>
   17728:	b	165fc <__assert_fail@plt+0x4a58>
   1772c:	cmn	fp, #3
   17730:	bhi	15c78 <__assert_fail@plt+0x40d4>
   17734:	cmp	r7, #0
   17738:	mov	r8, #1
   1773c:	bne	165f0 <__assert_fail@plt+0x4a4c>
   17740:	b	165fc <__assert_fail@plt+0x4a58>
   17744:	ldr	r1, [sp, #36]	; 0x24
   17748:	cmp	r1, #43	; 0x2b
   1774c:	movne	r0, #4
   17750:	movne	r1, #0
   17754:	strdne	r0, [sp, #80]	; 0x50
   17758:	bne	163c8 <__assert_fail@plt+0x4824>
   1775c:	mov	r1, #4
   17760:	str	r1, [sp, #80]	; 0x50
   17764:	movw	r1, #9999	; 0x270f
   17768:	cmp	r1, ip
   1776c:	bcs	177c8 <__assert_fail@plt+0x5c24>
   17770:	mov	r1, #1
   17774:	str	r1, [sp, #84]	; 0x54
   17778:	mov	r1, #43	; 0x2b
   1777c:	str	r1, [sp, #36]	; 0x24
   17780:	b	163c8 <__assert_fail@plt+0x4824>
   17784:	cmp	sl, #0
   17788:	beq	17708 <__assert_fail@plt+0x5b64>
   1778c:	mov	r9, #0
   17790:	add	r9, r9, #1
   17794:	mov	r1, r7
   17798:	mov	r0, #32
   1779c:	bl	11a90 <fputc@plt>
   177a0:	cmp	r9, sl
   177a4:	bne	17790 <__assert_fail@plt+0x5bec>
   177a8:	b	17708 <__assert_fail@plt+0x5b64>
   177ac:	asreq	r1, r3, #31
   177b0:	beq	16e90 <__assert_fail@plt+0x52ec>
   177b4:	b	16ed0 <__assert_fail@plt+0x532c>
   177b8:	mov	r0, #0
   177bc:	mov	r1, #2
   177c0:	mov	r2, #1
   177c4:	strd	r0, [sp, #76]	; 0x4c
   177c8:	ldr	r1, [sp, #80]	; 0x50
   177cc:	cmp	r5, r1
   177d0:	movle	r1, #0
   177d4:	movgt	r1, #1
   177d8:	str	r1, [sp, #84]	; 0x54
   177dc:	mov	r1, #43	; 0x2b
   177e0:	str	r1, [sp, #36]	; 0x24
   177e4:	b	163c8 <__assert_fail@plt+0x4824>
   177e8:	ldr	r1, [sp, #36]	; 0x24
   177ec:	cmp	r1, #43	; 0x2b
   177f0:	beq	179f8 <__assert_fail@plt+0x5e54>
   177f4:	mov	r0, #2
   177f8:	mov	r1, #0
   177fc:	strd	r0, [sp, #80]	; 0x50
   17800:	b	163c8 <__assert_fail@plt+0x4824>
   17804:	mov	r3, #67	; 0x43
   17808:	b	163e0 <__assert_fail@plt+0x483c>
   1780c:	sub	r2, r2, #1
   17810:	tst	r2, #3
   17814:	movwne	r2, #365	; 0x16d
   17818:	bne	17860 <__assert_fail@plt+0x5cbc>
   1781c:	ldr	r1, [sp, #60]	; 0x3c
   17820:	mov	ip, #100	; 0x64
   17824:	smull	r1, r0, r1, r2
   17828:	asr	r1, r2, #31
   1782c:	rsb	r1, r1, r0, asr #5
   17830:	mls	r1, ip, r1, r2
   17834:	cmp	r1, #0
   17838:	movwne	r2, #366	; 0x16e
   1783c:	bne	17860 <__assert_fail@plt+0x5cbc>
   17840:	mov	ip, #400	; 0x190
   17844:	movw	r1, #365	; 0x16d
   17848:	movw	lr, #366	; 0x16e
   1784c:	sdiv	r0, r2, ip
   17850:	mls	r2, ip, r0, r2
   17854:	cmp	r2, #0
   17858:	movne	r2, r1
   1785c:	moveq	r2, lr
   17860:	add	r9, r9, r2
   17864:	ldr	r0, [sp, #56]	; 0x38
   17868:	mvn	lr, #0
   1786c:	ldr	r2, [sp, #76]	; 0x4c
   17870:	sub	r2, r9, r2
   17874:	add	r2, r2, #380	; 0x17c
   17878:	add	r2, r2, #2
   1787c:	asr	r1, r2, #31
   17880:	smull	ip, r0, r0, r2
   17884:	add	r0, r0, r2
   17888:	rsb	r1, r1, r0, asr #2
   1788c:	rsb	r1, r1, r1, lsl #3
   17890:	sub	r2, r2, r1
   17894:	sub	r2, r9, r2
   17898:	add	sl, r2, #3
   1789c:	b	170e0 <__assert_fail@plt+0x553c>
   178a0:	mov	r3, #121	; 0x79
   178a4:	b	163e0 <__assert_fail@plt+0x483c>
   178a8:	cmn	fp, #3
   178ac:	bhi	15c78 <__assert_fail@plt+0x40d4>
   178b0:	cmp	r7, #0
   178b4:	mov	r4, #1
   178b8:	bne	16c2c <__assert_fail@plt+0x5088>
   178bc:	b	16c38 <__assert_fail@plt+0x5094>
   178c0:	ldr	r2, [sp, #56]	; 0x38
   178c4:	smull	r2, r1, r2, sl
   178c8:	mov	r2, #2
   178cc:	str	r2, [sp, #80]	; 0x50
   178d0:	asr	r2, sl, #31
   178d4:	add	sl, r1, sl
   178d8:	rsb	r2, r2, sl, asr #2
   178dc:	add	r2, r2, #1
   178e0:	b	16514 <__assert_fail@plt+0x4970>
   178e4:	movw	r2, #63636	; 0xf894
   178e8:	movt	r2, #65535	; 0xffff
   178ec:	ldr	r1, [sp, #36]	; 0x24
   178f0:	sub	r2, r2, lr
   178f4:	add	ip, r8, #1888	; 0x760
   178f8:	cmp	r8, r2
   178fc:	add	ip, ip, #12
   17900:	movlt	r2, #1
   17904:	movge	r2, #0
   17908:	add	ip, ip, lr
   1790c:	str	r2, [sp, #76]	; 0x4c
   17910:	movge	r2, #1
   17914:	movlt	r2, #0
   17918:	cmp	r1, #0
   1791c:	bne	17744 <__assert_fail@plt+0x5ba0>
   17920:	ldr	r1, [sp, #1168]	; 0x490
   17924:	cmp	r1, #43	; 0x2b
   17928:	beq	1775c <__assert_fail@plt+0x5bb8>
   1792c:	mov	r0, #4
   17930:	str	r1, [sp, #36]	; 0x24
   17934:	mov	r1, #0
   17938:	strd	r0, [sp, #80]	; 0x50
   1793c:	b	163c8 <__assert_fail@plt+0x4824>
   17940:	mov	r1, r6
   17944:	mov	r3, r7
   17948:	ldr	r0, [sp, #48]	; 0x30
   1794c:	mov	r2, #1
   17950:	bl	11868 <fwrite@plt>
   17954:	b	165fc <__assert_fail@plt+0x4a58>
   17958:	mov	r2, r6
   1795c:	mov	r0, r7
   17960:	ldr	r1, [sp, #48]	; 0x30
   17964:	bl	15a54 <__assert_fail@plt+0x3eb0>
   17968:	b	165fc <__assert_fail@plt+0x4a58>
   1796c:	mov	r3, #89	; 0x59
   17970:	b	163e0 <__assert_fail@plt+0x483c>
   17974:	cmn	fp, #1
   17978:	bne	15c4c <__assert_fail@plt+0x40a8>
   1797c:	b	15c78 <__assert_fail@plt+0x40d4>
   17980:	mov	r3, r7
   17984:	mov	r2, #1
   17988:	mov	r1, r6
   1798c:	add	r0, sp, #88	; 0x58
   17990:	bl	11868 <fwrite@plt>
   17994:	b	16f10 <__assert_fail@plt+0x536c>
   17998:	add	r0, r4, #2
   1799c:	mov	sl, #1
   179a0:	mov	r1, r0
   179a4:	ldrb	r2, [r0], #1
   179a8:	add	sl, sl, #1
   179ac:	cmp	r2, #58	; 0x3a
   179b0:	bne	173d8 <__assert_fail@plt+0x5834>
   179b4:	b	179a0 <__assert_fail@plt+0x5dfc>
   179b8:	ldr	r2, [sp, #36]	; 0x24
   179bc:	mov	r1, #2
   179c0:	str	r2, [sp, #76]	; 0x4c
   179c4:	mov	r2, #1
   179c8:	str	r1, [sp, #80]	; 0x50
   179cc:	b	177c8 <__assert_fail@plt+0x5c24>
   179d0:	cmp	r5, #0
   179d4:	beq	16a18 <__assert_fail@plt+0x4e74>
   179d8:	mov	sl, #0
   179dc:	add	sl, sl, #1
   179e0:	mov	r1, r7
   179e4:	mov	r0, #48	; 0x30
   179e8:	bl	11a90 <fputc@plt>
   179ec:	cmp	r5, sl
   179f0:	bne	179dc <__assert_fail@plt+0x5e38>
   179f4:	b	16a18 <__assert_fail@plt+0x4e74>
   179f8:	mov	r1, #2
   179fc:	str	r1, [sp, #80]	; 0x50
   17a00:	mov	r1, #99	; 0x63
   17a04:	b	17768 <__assert_fail@plt+0x5bc4>
   17a08:	mov	ip, #43	; 0x2b
   17a0c:	mov	sl, #4
   17a10:	ldr	r2, [sp, #40]	; 0x28
   17a14:	movw	r1, #10344	; 0x2868
   17a18:	movt	r1, #3
   17a1c:	ldr	r3, [sp, #1176]	; 0x498
   17a20:	mov	r0, r6
   17a24:	mov	r8, r1
   17a28:	str	ip, [sp]
   17a2c:	mov	r5, r6
   17a30:	ldr	lr, [sp, #1184]	; 0x4a0
   17a34:	str	sl, [sp, #4]
   17a38:	str	r3, [sp, #8]
   17a3c:	ldr	r3, [sp, #1180]	; 0x49c
   17a40:	str	ip, [sp, #36]	; 0x24
   17a44:	str	r3, [sp, #12]
   17a48:	str	lr, [sp, #16]
   17a4c:	ldr	r3, [sp, #52]	; 0x34
   17a50:	bl	15b0c <__assert_fail@plt+0x3f68>
   17a54:	mov	r9, r0
   17a58:	b	16d68 <__assert_fail@plt+0x51c4>
   17a5c:	cmp	r2, #0
   17a60:	add	ip, ip, #100	; 0x64
   17a64:	beq	1639c <__assert_fail@plt+0x47f8>
   17a68:	b	17148 <__assert_fail@plt+0x55a4>
   17a6c:	ldr	r2, [sp, #28]
   17a70:	mov	r3, #75	; 0x4b
   17a74:	str	r3, [r2]
   17a78:	b	15c84 <__assert_fail@plt+0x40e0>
   17a7c:	str	r4, [sp, #-8]!
   17a80:	mov	ip, #0
   17a84:	str	lr, [sp, #4]
   17a88:	sub	sp, sp, #32
   17a8c:	ldr	lr, [sp, #40]	; 0x28
   17a90:	add	r4, sp, #31
   17a94:	str	ip, [sp]
   17a98:	str	r3, [sp, #12]
   17a9c:	mvn	r3, #0
   17aa0:	str	r3, [sp, #4]
   17aa4:	mov	r3, ip
   17aa8:	str	r4, [sp, #8]
   17aac:	str	lr, [sp, #16]
   17ab0:	strb	ip, [sp, #31]
   17ab4:	bl	15b0c <__assert_fail@plt+0x3f68>
   17ab8:	add	sp, sp, #32
   17abc:	ldr	r4, [sp]
   17ac0:	add	sp, sp, #4
   17ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ac8:	strd	r4, [sp, #-12]!
   17acc:	mov	r5, r0
   17ad0:	str	lr, [sp, #8]
   17ad4:	sub	sp, sp, #12
   17ad8:	bl	119b8 <__errno_location@plt>
   17adc:	mov	r4, r0
   17ae0:	mov	r2, #0
   17ae4:	ldr	r3, [r4]
   17ae8:	mov	r0, r5
   17aec:	str	r2, [r4]
   17af0:	str	r3, [sp]
   17af4:	str	r3, [sp, #4]
   17af8:	bl	11754 <free@plt>
   17afc:	ldr	r3, [r4]
   17b00:	add	r2, sp, #8
   17b04:	clz	r3, r3
   17b08:	lsr	r3, r3, #5
   17b0c:	add	r3, r2, r3, lsl #2
   17b10:	ldr	r3, [r3, #-8]
   17b14:	str	r3, [r4]
   17b18:	add	sp, sp, #12
   17b1c:	ldrd	r4, [sp]
   17b20:	add	sp, sp, #8
   17b24:	pop	{pc}		; (ldr pc, [sp], #4)
   17b28:	mov	r1, #0
   17b2c:	str	r4, [sp, #-8]!
   17b30:	mov	r4, r0
   17b34:	movw	r0, #11680	; 0x2da0
   17b38:	movt	r0, #3
   17b3c:	str	lr, [sp, #4]
   17b40:	bl	118e0 <open64@plt>
   17b44:	cmp	r4, r0
   17b48:	moveq	r3, #1
   17b4c:	beq	17b60 <__assert_fail@plt+0x5fbc>
   17b50:	cmp	r0, #0
   17b54:	mov	r3, r0
   17b58:	movlt	r3, #0
   17b5c:	bge	17b70 <__assert_fail@plt+0x5fcc>
   17b60:	ldr	r4, [sp]
   17b64:	add	sp, sp, #4
   17b68:	mov	r0, r3
   17b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b70:	bl	11b80 <close@plt>
   17b74:	bl	119b8 <__errno_location@plt>
   17b78:	mov	r2, #9
   17b7c:	mov	r3, #0
   17b80:	ldr	r4, [sp]
   17b84:	add	sp, sp, #4
   17b88:	str	r2, [r0]
   17b8c:	mov	r0, r3
   17b90:	pop	{pc}		; (ldr pc, [sp], #4)
   17b94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17b98:	strd	r6, [sp, #8]
   17b9c:	strd	r8, [sp, #16]
   17ba0:	mov	r8, r2
   17ba4:	strd	sl, [sp, #24]
   17ba8:	mov	sl, r0
   17bac:	mov	r0, r2
   17bb0:	str	lr, [sp, #32]
   17bb4:	sub	sp, sp, #4
   17bb8:	mov	fp, r1
   17bbc:	bl	11a0c <fileno@plt>
   17bc0:	mov	r4, r0
   17bc4:	bl	119b8 <__errno_location@plt>
   17bc8:	cmp	r4, #1
   17bcc:	mov	r9, r0
   17bd0:	beq	17d1c <__assert_fail@plt+0x6178>
   17bd4:	cmp	r4, #2
   17bd8:	beq	17cbc <__assert_fail@plt+0x6118>
   17bdc:	cmp	r4, #0
   17be0:	beq	17cb0 <__assert_fail@plt+0x610c>
   17be4:	mov	r1, #2
   17be8:	mov	r0, r1
   17bec:	bl	117e4 <dup2@plt>
   17bf0:	subs	r4, r0, #2
   17bf4:	movne	r4, #1
   17bf8:	mov	r1, #1
   17bfc:	mov	r0, r1
   17c00:	bl	117e4 <dup2@plt>
   17c04:	subs	r7, r0, #1
   17c08:	movne	r7, #1
   17c0c:	mov	r1, #0
   17c10:	mov	r0, r1
   17c14:	bl	117e4 <dup2@plt>
   17c18:	subs	r5, r0, #0
   17c1c:	beq	17c38 <__assert_fail@plt+0x6094>
   17c20:	mov	r0, #0
   17c24:	bl	17b28 <__assert_fail@plt+0x5f84>
   17c28:	cmp	r0, #0
   17c2c:	mov	r5, r0
   17c30:	mov	r6, r0
   17c34:	beq	17d28 <__assert_fail@plt+0x6184>
   17c38:	cmp	r7, #0
   17c3c:	bne	17cd0 <__assert_fail@plt+0x612c>
   17c40:	cmp	r4, #0
   17c44:	beq	17c58 <__assert_fail@plt+0x60b4>
   17c48:	mov	r0, #2
   17c4c:	bl	17b28 <__assert_fail@plt+0x5f84>
   17c50:	subs	r4, r0, #0
   17c54:	beq	17d08 <__assert_fail@plt+0x6164>
   17c58:	mov	r2, r8
   17c5c:	mov	r1, fp
   17c60:	mov	r0, sl
   17c64:	bl	1194c <freopen64@plt>
   17c68:	mov	r6, r0
   17c6c:	cmp	r4, #0
   17c70:	ldr	r8, [r9]
   17c74:	bne	17d10 <__assert_fail@plt+0x616c>
   17c78:	cmp	r7, #0
   17c7c:	bne	17cfc <__assert_fail@plt+0x6158>
   17c80:	cmp	r5, #0
   17c84:	bne	17cc4 <__assert_fail@plt+0x6120>
   17c88:	cmp	r6, #0
   17c8c:	mov	r0, r6
   17c90:	streq	r8, [r9]
   17c94:	add	sp, sp, #4
   17c98:	ldrd	r4, [sp]
   17c9c:	ldrd	r6, [sp, #8]
   17ca0:	ldrd	r8, [sp, #16]
   17ca4:	ldrd	sl, [sp, #24]
   17ca8:	add	sp, sp, #32
   17cac:	pop	{pc}		; (ldr pc, [sp], #4)
   17cb0:	mov	r7, r4
   17cb4:	mov	r5, r4
   17cb8:	b	17c58 <__assert_fail@plt+0x60b4>
   17cbc:	mov	r4, #0
   17cc0:	b	17bf8 <__assert_fail@plt+0x6054>
   17cc4:	mov	r0, #0
   17cc8:	bl	11b80 <close@plt>
   17ccc:	b	17c88 <__assert_fail@plt+0x60e4>
   17cd0:	mov	r0, #1
   17cd4:	bl	17b28 <__assert_fail@plt+0x5f84>
   17cd8:	subs	r7, r0, #0
   17cdc:	bne	17c40 <__assert_fail@plt+0x609c>
   17ce0:	cmp	r4, #0
   17ce4:	ldr	r8, [r9]
   17ce8:	moveq	r6, r4
   17cec:	beq	17cfc <__assert_fail@plt+0x6158>
   17cf0:	mov	r0, #2
   17cf4:	mov	r6, r7
   17cf8:	bl	11b80 <close@plt>
   17cfc:	mov	r0, #1
   17d00:	bl	11b80 <close@plt>
   17d04:	b	17c80 <__assert_fail@plt+0x60dc>
   17d08:	ldr	r8, [r9]
   17d0c:	mov	r6, r4
   17d10:	mov	r0, #2
   17d14:	bl	11b80 <close@plt>
   17d18:	b	17c78 <__assert_fail@plt+0x60d4>
   17d1c:	mov	r4, #0
   17d20:	mov	r7, r4
   17d24:	b	17c0c <__assert_fail@plt+0x6068>
   17d28:	mov	r5, #1
   17d2c:	b	17c6c <__assert_fail@plt+0x60c8>
   17d30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17d34:	mov	r4, r0
   17d38:	ldr	ip, [r0, #4]
   17d3c:	strd	r6, [sp, #8]
   17d40:	str	lr, [sp, #20]
   17d44:	ldr	lr, [r0, #8]
   17d48:	str	r8, [sp, #16]
   17d4c:	sub	sp, sp, #8
   17d50:	ldr	r5, [sp, #32]
   17d54:	cmp	lr, ip
   17d58:	beq	17d80 <__assert_fail@plt+0x61dc>
   17d5c:	mov	r0, r4
   17d60:	str	r5, [sp, #32]
   17d64:	add	sp, sp, #8
   17d68:	ldrd	r4, [sp]
   17d6c:	ldrd	r6, [sp, #8]
   17d70:	ldr	r8, [sp, #16]
   17d74:	ldr	lr, [sp, #20]
   17d78:	add	sp, sp, #24
   17d7c:	b	11a3c <fseeko64@plt>
   17d80:	ldr	ip, [r0, #16]
   17d84:	ldr	lr, [r0, #20]
   17d88:	cmp	lr, ip
   17d8c:	bne	17d5c <__assert_fail@plt+0x61b8>
   17d90:	ldr	r8, [r0, #36]	; 0x24
   17d94:	cmp	r8, #0
   17d98:	bne	17d5c <__assert_fail@plt+0x61b8>
   17d9c:	mov	r6, r2
   17da0:	mov	r7, r3
   17da4:	bl	11a0c <fileno@plt>
   17da8:	mov	r2, r6
   17dac:	mov	r3, r7
   17db0:	str	r5, [sp]
   17db4:	bl	11874 <lseek64@plt>
   17db8:	mvn	r3, #0
   17dbc:	mvn	r2, #0
   17dc0:	cmp	r1, r3
   17dc4:	cmpeq	r0, r2
   17dc8:	beq	17df8 <__assert_fail@plt+0x6254>
   17dcc:	ldr	r3, [r4]
   17dd0:	strd	r0, [r4, #80]	; 0x50
   17dd4:	bic	r3, r3, #16
   17dd8:	str	r3, [r4]
   17ddc:	mov	r0, r8
   17de0:	add	sp, sp, #8
   17de4:	ldrd	r4, [sp]
   17de8:	ldrd	r6, [sp, #8]
   17dec:	ldr	r8, [sp, #16]
   17df0:	add	sp, sp, #20
   17df4:	pop	{pc}		; (ldr pc, [sp], #4)
   17df8:	mvn	r8, #0
   17dfc:	b	17ddc <__assert_fail@plt+0x6238>
   17e00:	strd	r4, [sp, #-8]!
   17e04:	ldrd	r2, [r1, #8]
   17e08:	ldrd	r4, [r0, #8]
   17e0c:	cmp	r5, r3
   17e10:	cmpeq	r4, r2
   17e14:	movne	r0, #0
   17e18:	bne	17e34 <__assert_fail@plt+0x6290>
   17e1c:	ldrd	r4, [r0]
   17e20:	ldrd	r2, [r1]
   17e24:	cmp	r5, r3
   17e28:	cmpeq	r4, r2
   17e2c:	moveq	r0, #1
   17e30:	movne	r0, #0
   17e34:	ldrd	r4, [sp]
   17e38:	add	sp, sp, #8
   17e3c:	bx	lr
   17e40:	mov	r2, r1
   17e44:	mov	r3, #0
   17e48:	str	r4, [sp, #-8]!
   17e4c:	ldrd	r0, [r0, #8]
   17e50:	str	lr, [sp, #4]
   17e54:	bl	31264 <__assert_fail@plt+0x1f6c0>
   17e58:	ldr	r4, [sp]
   17e5c:	add	sp, sp, #4
   17e60:	mov	r0, r2
   17e64:	pop	{pc}		; (ldr pc, [sp], #4)
   17e68:	mov	r2, r1
   17e6c:	mov	r3, #0
   17e70:	str	r4, [sp, #-8]!
   17e74:	ldrd	r0, [r0]
   17e78:	str	lr, [sp, #4]
   17e7c:	bl	31264 <__assert_fail@plt+0x1f6c0>
   17e80:	ldr	r4, [sp]
   17e84:	add	sp, sp, #4
   17e88:	mov	r0, r2
   17e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e90:	strd	r4, [sp, #-8]!
   17e94:	ldrd	r2, [r1]
   17e98:	ldrd	r4, [r0]
   17e9c:	cmp	r5, r3
   17ea0:	cmpeq	r4, r2
   17ea4:	ldrd	r4, [sp]
   17ea8:	add	sp, sp, #8
   17eac:	moveq	r0, #1
   17eb0:	movne	r0, #0
   17eb4:	bx	lr
   17eb8:	ldr	r2, [r0]
   17ebc:	ldr	r3, [r1]
   17ec0:	ldrd	r0, [r2, #160]	; 0xa0
   17ec4:	ldrd	r2, [r3, #160]	; 0xa0
   17ec8:	cmp	r1, r3
   17ecc:	cmpeq	r0, r2
   17ed0:	movhi	r0, #1
   17ed4:	movls	r0, #0
   17ed8:	movcc	r3, #1
   17edc:	movcs	r3, #0
   17ee0:	sub	r0, r0, r3
   17ee4:	bx	lr
   17ee8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17eec:	mov	r5, r2
   17ef0:	mov	r4, r1
   17ef4:	ldr	r2, [r0, #40]	; 0x28
   17ef8:	strd	r6, [sp, #8]
   17efc:	mov	r6, r0
   17f00:	str	r8, [sp, #16]
   17f04:	str	lr, [sp, #20]
   17f08:	ldr	r0, [r0, #8]
   17f0c:	cmp	r2, r5
   17f10:	ldr	r7, [r6, #44]	; 0x2c
   17f14:	bcs	17f3c <__assert_fail@plt+0x6398>
   17f18:	add	r1, r5, #40	; 0x28
   17f1c:	cmn	r1, #-1073741823	; 0xc0000001
   17f20:	str	r1, [r6, #40]	; 0x28
   17f24:	bhi	17fc4 <__assert_fail@plt+0x6420>
   17f28:	lsl	r1, r1, #2
   17f2c:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   17f30:	cmp	r0, #0
   17f34:	strne	r0, [r6, #8]
   17f38:	beq	17fc0 <__assert_fail@plt+0x641c>
   17f3c:	cmp	r4, #0
   17f40:	movne	r2, r0
   17f44:	beq	17f58 <__assert_fail@plt+0x63b4>
   17f48:	str	r4, [r2], #4
   17f4c:	ldr	r4, [r4, #8]
   17f50:	cmp	r4, #0
   17f54:	bne	17f48 <__assert_fail@plt+0x63a4>
   17f58:	mov	r3, r7
   17f5c:	mov	r2, #4
   17f60:	mov	r1, r5
   17f64:	bl	11b08 <qsort@plt>
   17f68:	ldr	lr, [r6, #8]
   17f6c:	subs	r3, r5, #1
   17f70:	ldr	r0, [lr]
   17f74:	moveq	r2, r0
   17f78:	beq	17fa4 <__assert_fail@plt+0x6400>
   17f7c:	mov	ip, r0
   17f80:	mov	r2, lr
   17f84:	b	17f8c <__assert_fail@plt+0x63e8>
   17f88:	ldr	ip, [r2]
   17f8c:	subs	r3, r3, #1
   17f90:	ldr	r1, [r2, #4]!
   17f94:	str	r1, [ip, #8]
   17f98:	bne	17f88 <__assert_fail@plt+0x63e4>
   17f9c:	add	r5, lr, r5, lsl #2
   17fa0:	ldr	r2, [r5, #-4]
   17fa4:	mov	r3, #0
   17fa8:	str	r3, [r2, #8]
   17fac:	ldrd	r4, [sp]
   17fb0:	ldrd	r6, [sp, #8]
   17fb4:	ldr	r8, [sp, #16]
   17fb8:	add	sp, sp, #20
   17fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   17fc0:	ldr	r0, [r6, #8]
   17fc4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   17fc8:	mov	r3, #0
   17fcc:	mov	r0, r4
   17fd0:	str	r3, [r6, #8]
   17fd4:	str	r3, [r6, #40]	; 0x28
   17fd8:	b	17fac <__assert_fail@plt+0x6408>
   17fdc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17fe0:	mov	r5, r2
   17fe4:	strd	r6, [sp, #8]
   17fe8:	mov	r6, r0
   17fec:	add	r0, r2, #176	; 0xb0
   17ff0:	bic	r0, r0, #7
   17ff4:	mov	r7, r1
   17ff8:	str	r8, [sp, #16]
   17ffc:	str	lr, [sp, #20]
   18000:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   18004:	subs	r4, r0, #0
   18008:	beq	18054 <__assert_fail@plt+0x64b0>
   1800c:	mov	r1, r7
   18010:	mov	r2, r5
   18014:	add	r0, r4, #168	; 0xa8
   18018:	bl	11784 <memcpy@plt>
   1801c:	ldr	r1, [r6, #24]
   18020:	mov	r3, #0
   18024:	add	r0, r4, r5
   18028:	mov	r2, #3
   1802c:	strb	r3, [r0, #168]	; 0xa8
   18030:	str	r3, [r4, #12]
   18034:	str	r3, [r4, #16]
   18038:	str	r3, [r4, #20]
   1803c:	str	r1, [r4, #28]
   18040:	str	r3, [r4, #32]
   18044:	str	r6, [r4, #44]	; 0x2c
   18048:	str	r5, [r4, #52]	; 0x34
   1804c:	strh	r3, [r4, #58]	; 0x3a
   18050:	strh	r2, [r4, #60]	; 0x3c
   18054:	mov	r0, r4
   18058:	ldrd	r4, [sp]
   1805c:	ldrd	r6, [sp, #8]
   18060:	ldr	r8, [sp, #16]
   18064:	add	sp, sp, #20
   18068:	pop	{pc}		; (ldr pc, [sp], #4)
   1806c:	strd	r4, [sp, #-16]!
   18070:	subs	r4, r0, #0
   18074:	str	r6, [sp, #8]
   18078:	str	lr, [sp, #12]
   1807c:	beq	180a4 <__assert_fail@plt+0x6500>
   18080:	ldr	r5, [r4, #8]
   18084:	ldr	r3, [r4, #12]
   18088:	subs	r0, r3, #0
   1808c:	beq	18094 <__assert_fail@plt+0x64f0>
   18090:	bl	11b98 <closedir@plt>
   18094:	mov	r0, r4
   18098:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1809c:	subs	r4, r5, #0
   180a0:	bne	18080 <__assert_fail@plt+0x64dc>
   180a4:	ldrd	r4, [sp]
   180a8:	ldr	r6, [sp, #8]
   180ac:	add	sp, sp, #12
   180b0:	pop	{pc}		; (ldr pc, [sp], #4)
   180b4:	str	r4, [sp, #-8]!
   180b8:	mov	r4, r0
   180bc:	str	lr, [sp, #4]
   180c0:	b	180d0 <__assert_fail@plt+0x652c>
   180c4:	bl	1bee8 <__assert_fail@plt+0xa344>
   180c8:	cmp	r0, #0
   180cc:	bge	180f0 <__assert_fail@plt+0x654c>
   180d0:	mov	r0, r4
   180d4:	bl	1be98 <__assert_fail@plt+0xa2f4>
   180d8:	cmp	r0, #0
   180dc:	mov	r0, r4
   180e0:	beq	180c4 <__assert_fail@plt+0x6520>
   180e4:	ldr	r4, [sp]
   180e8:	add	sp, sp, #4
   180ec:	pop	{pc}		; (ldr pc, [sp], #4)
   180f0:	bl	11b80 <close@plt>
   180f4:	b	180d0 <__assert_fail@plt+0x652c>
   180f8:	strd	r4, [sp, #-20]!	; 0xffffffec
   180fc:	ldr	r5, [r0, #44]	; 0x2c
   18100:	ldr	r3, [r5, #48]	; 0x30
   18104:	strd	r6, [sp, #8]
   18108:	str	lr, [sp, #16]
   1810c:	sub	sp, sp, #100	; 0x64
   18110:	tst	r3, #512	; 0x200
   18114:	beq	181a4 <__assert_fail@plt+0x6600>
   18118:	ldr	r4, [r5, #52]	; 0x34
   1811c:	mov	r7, r1
   18120:	mov	r6, r0
   18124:	cmp	r4, #0
   18128:	beq	18150 <__assert_fail@plt+0x65ac>
   1812c:	ldrd	r2, [r6, #64]	; 0x40
   18130:	add	r1, sp, #8
   18134:	mov	r0, r4
   18138:	strd	r2, [sp, #8]
   1813c:	bl	1a798 <__assert_fail@plt+0x8bf4>
   18140:	cmp	r0, #0
   18144:	beq	18188 <__assert_fail@plt+0x65e4>
   18148:	ldr	r0, [r0, #8]
   1814c:	b	181a8 <__assert_fail@plt+0x6604>
   18150:	movw	r0, #31432	; 0x7ac8
   18154:	movt	r0, #1
   18158:	mov	r1, r4
   1815c:	movw	r3, #32400	; 0x7e90
   18160:	movt	r3, #1
   18164:	movw	r2, #32360	; 0x7e68
   18168:	movt	r2, #1
   1816c:	str	r0, [sp]
   18170:	mov	r0, #13
   18174:	bl	1aab8 <__assert_fail@plt+0x8f14>
   18178:	cmp	r0, #0
   1817c:	mov	r4, r0
   18180:	str	r0, [r5, #52]	; 0x34
   18184:	bne	1812c <__assert_fail@plt+0x6588>
   18188:	cmp	r7, #0
   1818c:	blt	181a4 <__assert_fail@plt+0x6600>
   18190:	mov	r0, r7
   18194:	add	r1, sp, #8
   18198:	bl	116a0 <fstatfs64@plt>
   1819c:	cmp	r0, #0
   181a0:	beq	181bc <__assert_fail@plt+0x6618>
   181a4:	mov	r0, #0
   181a8:	add	sp, sp, #100	; 0x64
   181ac:	ldrd	r4, [sp]
   181b0:	ldrd	r6, [sp, #8]
   181b4:	add	sp, sp, #16
   181b8:	pop	{pc}		; (ldr pc, [sp], #4)
   181bc:	cmp	r4, #0
   181c0:	beq	18200 <__assert_fail@plt+0x665c>
   181c4:	mov	r0, #16
   181c8:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   181cc:	subs	r5, r0, #0
   181d0:	beq	18200 <__assert_fail@plt+0x665c>
   181d4:	ldr	ip, [sp, #8]
   181d8:	mov	r0, r4
   181dc:	mov	r1, r5
   181e0:	ldrd	r2, [r6, #64]	; 0x40
   181e4:	strd	r2, [r5]
   181e8:	str	ip, [r5, #8]
   181ec:	bl	1b110 <__assert_fail@plt+0x956c>
   181f0:	cmp	r0, #0
   181f4:	beq	18208 <__assert_fail@plt+0x6664>
   181f8:	cmp	r5, r0
   181fc:	bne	18214 <__assert_fail@plt+0x6670>
   18200:	ldr	r0, [sp, #8]
   18204:	b	181a8 <__assert_fail@plt+0x6604>
   18208:	mov	r0, r5
   1820c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   18210:	b	18200 <__assert_fail@plt+0x665c>
   18214:	bl	11b68 <abort@plt>
   18218:	strd	r4, [sp, #-16]!
   1821c:	mov	r5, r1
   18220:	ldr	r1, [r0, #32]
   18224:	str	r6, [sp, #8]
   18228:	str	lr, [sp, #12]
   1822c:	sub	r3, r1, r5
   18230:	cmn	r1, #100	; 0x64
   18234:	clz	r3, r3
   18238:	lsr	r3, r3, #5
   1823c:	moveq	r3, #0
   18240:	cmp	r3, #0
   18244:	bne	182a4 <__assert_fail@plt+0x6700>
   18248:	cmp	r2, #0
   1824c:	mov	r4, r0
   18250:	bne	18280 <__assert_fail@plt+0x66dc>
   18254:	ldr	r3, [r0, #48]	; 0x30
   18258:	mvn	r2, r1
   1825c:	lsr	r2, r2, #31
   18260:	eor	r3, r3, #4
   18264:	ands	r3, r2, r3, lsr #2
   18268:	bne	18298 <__assert_fail@plt+0x66f4>
   1826c:	ldr	r6, [sp, #8]
   18270:	str	r5, [r4, #32]
   18274:	ldrd	r4, [sp]
   18278:	add	sp, sp, #12
   1827c:	pop	{pc}		; (ldr pc, [sp], #4)
   18280:	add	r0, r0, #60	; 0x3c
   18284:	bl	1bea0 <__assert_fail@plt+0xa2fc>
   18288:	cmp	r0, #0
   1828c:	blt	1826c <__assert_fail@plt+0x66c8>
   18290:	bl	11b80 <close@plt>
   18294:	b	1826c <__assert_fail@plt+0x66c8>
   18298:	mov	r0, r1
   1829c:	bl	11b80 <close@plt>
   182a0:	b	1826c <__assert_fail@plt+0x66c8>
   182a4:	bl	11b68 <abort@plt>
   182a8:	ldr	r3, [r0, #48]	; 0x30
   182ac:	strd	r4, [sp, #-16]!
   182b0:	mov	r4, r0
   182b4:	str	r6, [sp, #8]
   182b8:	str	lr, [sp, #12]
   182bc:	ands	r5, r3, #4
   182c0:	movne	r5, #0
   182c4:	bne	182dc <__assert_fail@plt+0x6738>
   182c8:	tst	r3, #512	; 0x200
   182cc:	beq	182f8 <__assert_fail@plt+0x6754>
   182d0:	mov	r2, #1
   182d4:	mvn	r1, #99	; 0x63
   182d8:	bl	18218 <__assert_fail@plt+0x6674>
   182dc:	add	r0, r4, #60	; 0x3c
   182e0:	bl	180b4 <__assert_fail@plt+0x6510>
   182e4:	mov	r0, r5
   182e8:	ldrd	r4, [sp]
   182ec:	ldr	r6, [sp, #8]
   182f0:	add	sp, sp, #12
   182f4:	pop	{pc}		; (ldr pc, [sp], #4)
   182f8:	ldr	r0, [r0, #28]
   182fc:	bl	11ae4 <fchdir@plt>
   18300:	adds	r5, r0, #0
   18304:	movne	r5, #1
   18308:	b	182dc <__assert_fail@plt+0x6738>
   1830c:	ldr	ip, [r2, #48]	; 0x30
   18310:	strd	r4, [sp, #-16]!
   18314:	mov	r4, r2
   18318:	add	r5, r2, #64	; 0x40
   1831c:	ldr	r2, [r2, #24]
   18320:	str	r6, [sp, #8]
   18324:	str	lr, [sp, #12]
   18328:	sub	sp, sp, #8
   1832c:	cmp	ip, #0
   18330:	bne	183a8 <__assert_fail@plt+0x6804>
   18334:	tst	r1, #1
   18338:	beq	183a8 <__assert_fail@plt+0x6804>
   1833c:	mov	r1, r2
   18340:	mov	r0, #3
   18344:	mov	r2, r5
   18348:	bl	11b38 <__xstat64@plt>
   1834c:	cmp	r0, #0
   18350:	beq	183d4 <__assert_fail@plt+0x6830>
   18354:	bl	119b8 <__errno_location@plt>
   18358:	ldr	r3, [r0]
   1835c:	mov	r6, r0
   18360:	cmp	r3, #2
   18364:	bne	1838c <__assert_fail@plt+0x67e8>
   18368:	mov	r2, r5
   1836c:	mov	r0, #3
   18370:	ldr	r1, [r4, #24]
   18374:	bl	11b8c <__lxstat64@plt>
   18378:	subs	r3, r0, #0
   1837c:	moveq	r0, #13
   18380:	streq	r3, [r6]
   18384:	beq	183f8 <__assert_fail@plt+0x6854>
   18388:	ldr	r3, [r6]
   1838c:	mov	r0, r5
   18390:	mov	r2, #104	; 0x68
   18394:	str	r3, [r4, #32]
   18398:	mov	r1, #0
   1839c:	bl	119e8 <memset@plt>
   183a0:	mov	r0, #10
   183a4:	b	183f8 <__assert_fail@plt+0x6854>
   183a8:	ubfx	ip, r1, #1, #1
   183ac:	orrs	r3, r3, ip
   183b0:	bne	1833c <__assert_fail@plt+0x6798>
   183b4:	mov	ip, #256	; 0x100
   183b8:	mov	r1, r0
   183bc:	mov	r3, r5
   183c0:	mov	r0, #3
   183c4:	str	ip, [sp]
   183c8:	bl	11820 <__fxstatat64@plt>
   183cc:	cmp	r0, #0
   183d0:	bne	18454 <__assert_fail@plt+0x68b0>
   183d4:	ldr	r3, [r4, #80]	; 0x50
   183d8:	and	r3, r3, #61440	; 0xf000
   183dc:	cmp	r3, #16384	; 0x4000
   183e0:	beq	1840c <__assert_fail@plt+0x6868>
   183e4:	cmp	r3, #40960	; 0xa000
   183e8:	beq	18460 <__assert_fail@plt+0x68bc>
   183ec:	cmp	r3, #32768	; 0x8000
   183f0:	movne	r0, #3
   183f4:	moveq	r0, #8
   183f8:	add	sp, sp, #8
   183fc:	ldrd	r4, [sp]
   18400:	ldr	r6, [sp, #8]
   18404:	add	sp, sp, #12
   18408:	pop	{pc}		; (ldr pc, [sp], #4)
   1840c:	ldrb	r3, [r4, #168]	; 0xa8
   18410:	cmp	r3, #46	; 0x2e
   18414:	bne	18438 <__assert_fail@plt+0x6894>
   18418:	ldrb	r3, [r4, #169]	; 0xa9
   1841c:	cmp	r3, #0
   18420:	beq	18440 <__assert_fail@plt+0x689c>
   18424:	ldr	r3, [r4, #168]	; 0xa8
   18428:	bic	r3, r3, #-16777216	; 0xff000000
   1842c:	bic	r3, r3, #255	; 0xff
   18430:	cmp	r3, #11776	; 0x2e00
   18434:	beq	18440 <__assert_fail@plt+0x689c>
   18438:	mov	r0, #1
   1843c:	b	183f8 <__assert_fail@plt+0x6854>
   18440:	ldr	r3, [r4, #48]	; 0x30
   18444:	cmp	r3, #0
   18448:	moveq	r0, #1
   1844c:	movne	r0, #5
   18450:	b	183f8 <__assert_fail@plt+0x6854>
   18454:	bl	119b8 <__errno_location@plt>
   18458:	ldr	r3, [r0]
   1845c:	b	1838c <__assert_fail@plt+0x67e8>
   18460:	mov	r0, #12
   18464:	b	183f8 <__assert_fail@plt+0x6854>
   18468:	mov	ip, r1
   1846c:	ldr	r1, [r1]
   18470:	strd	r4, [sp, #-16]!
   18474:	mov	r4, r0
   18478:	ldr	r0, [r0]
   1847c:	str	r6, [sp, #8]
   18480:	str	lr, [sp, #12]
   18484:	add	r3, r1, #256	; 0x100
   18488:	add	r2, r3, r2
   1848c:	cmp	r1, r2
   18490:	bhi	184c4 <__assert_fail@plt+0x6920>
   18494:	mov	r1, r2
   18498:	str	r2, [ip]
   1849c:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   184a0:	subs	r5, r0, #0
   184a4:	movne	r3, #1
   184a8:	strne	r5, [r4]
   184ac:	beq	184e4 <__assert_fail@plt+0x6940>
   184b0:	ldrd	r4, [sp]
   184b4:	mov	r0, r3
   184b8:	ldr	r6, [sp, #8]
   184bc:	add	sp, sp, #12
   184c0:	pop	{pc}		; (ldr pc, [sp], #4)
   184c4:	mov	r5, #0
   184c8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   184cc:	str	r5, [r4]
   184d0:	bl	119b8 <__errno_location@plt>
   184d4:	mov	r2, #36	; 0x24
   184d8:	mov	r3, r5
   184dc:	str	r2, [r0]
   184e0:	b	184b0 <__assert_fail@plt+0x690c>
   184e4:	ldr	r0, [r4]
   184e8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   184ec:	mov	r3, r5
   184f0:	str	r5, [r4]
   184f4:	b	184b0 <__assert_fail@plt+0x690c>
   184f8:	movw	r3, #258	; 0x102
   184fc:	str	r4, [sp, #-8]!
   18500:	mov	r4, r1
   18504:	tst	r0, r3
   18508:	str	lr, [sp, #4]
   1850c:	sub	sp, sp, #8
   18510:	beq	1855c <__assert_fail@plt+0x69b8>
   18514:	movw	r1, #31432	; 0x7ac8
   18518:	movt	r1, #1
   1851c:	movw	r3, #32256	; 0x7e00
   18520:	movt	r3, #1
   18524:	movw	r2, #32320	; 0x7e40
   18528:	movt	r2, #1
   1852c:	str	r1, [sp]
   18530:	mov	r0, #31
   18534:	mov	r1, #0
   18538:	bl	1aab8 <__assert_fail@plt+0x8f14>
   1853c:	mov	r3, r0
   18540:	adds	r0, r0, #0
   18544:	movne	r0, #1
   18548:	str	r3, [r4]
   1854c:	add	sp, sp, #8
   18550:	ldr	r4, [sp]
   18554:	add	sp, sp, #4
   18558:	pop	{pc}		; (ldr pc, [sp], #4)
   1855c:	mov	r0, #32
   18560:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   18564:	cmp	r0, #0
   18568:	str	r0, [r4]
   1856c:	beq	1854c <__assert_fail@plt+0x69a8>
   18570:	bl	30810 <__assert_fail@plt+0x1ec6c>
   18574:	mov	r0, #1
   18578:	add	sp, sp, #8
   1857c:	ldr	r4, [sp]
   18580:	add	sp, sp, #4
   18584:	pop	{pc}		; (ldr pc, [sp], #4)
   18588:	mov	r3, r2
   1858c:	lsl	r2, r1, #11
   18590:	tst	r1, #512	; 0x200
   18594:	and	r2, r2, #32768	; 0x8000
   18598:	orr	r2, r2, #540672	; 0x84000
   1859c:	orr	r2, r2, #2304	; 0x900
   185a0:	beq	185ac <__assert_fail@plt+0x6a08>
   185a4:	mov	r1, r3
   185a8:	b	1d3cc <__assert_fail@plt+0xb828>
   185ac:	mov	r1, r2
   185b0:	mov	r0, r3
   185b4:	b	30be4 <__assert_fail@plt+0x1f040>
   185b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   185bc:	mov	r5, r0
   185c0:	mov	r4, r2
   185c4:	strd	r6, [sp, #8]
   185c8:	mov	r7, r1
   185cc:	strd	r8, [sp, #16]
   185d0:	ldr	r9, [r0, #48]	; 0x30
   185d4:	str	sl, [sp, #24]
   185d8:	subs	sl, r3, #0
   185dc:	str	lr, [sp, #28]
   185e0:	sub	sp, sp, #104	; 0x68
   185e4:	and	r8, r9, #4
   185e8:	beq	186c0 <__assert_fail@plt+0x6b1c>
   185ec:	movw	r1, #11740	; 0x2ddc
   185f0:	movt	r1, #3
   185f4:	mov	r0, sl
   185f8:	bl	1170c <strcmp@plt>
   185fc:	cmp	r0, #0
   18600:	bne	186c0 <__assert_fail@plt+0x6b1c>
   18604:	cmp	r8, #0
   18608:	bne	18700 <__assert_fail@plt+0x6b5c>
   1860c:	cmp	r4, #0
   18610:	bge	187c0 <__assert_fail@plt+0x6c1c>
   18614:	tst	r9, #512	; 0x200
   18618:	bne	18744 <__assert_fail@plt+0x6ba0>
   1861c:	mov	r8, #1
   18620:	mov	r1, r9
   18624:	mov	r2, sl
   18628:	ldr	r0, [r5, #32]
   1862c:	bl	18588 <__assert_fail@plt+0x69e4>
   18630:	subs	r6, r0, #0
   18634:	blt	187b8 <__assert_fail@plt+0x6c14>
   18638:	ldr	r9, [r5, #48]	; 0x30
   1863c:	tst	r9, #2
   18640:	beq	186dc <__assert_fail@plt+0x6b38>
   18644:	mov	r2, sp
   18648:	mov	r1, r6
   1864c:	mov	r0, #3
   18650:	bl	11850 <__fxstat64@plt>
   18654:	cmp	r0, #0
   18658:	bne	1873c <__assert_fail@plt+0x6b98>
   1865c:	ldrd	r2, [sp]
   18660:	ldrd	r0, [r7, #64]	; 0x40
   18664:	cmp	r1, r3
   18668:	cmpeq	r0, r2
   1866c:	bne	18730 <__assert_fail@plt+0x6b8c>
   18670:	ldrd	r2, [sp, #96]	; 0x60
   18674:	ldrd	r0, [r7, #160]	; 0xa0
   18678:	cmp	r1, r3
   1867c:	cmpeq	r0, r2
   18680:	bne	18730 <__assert_fail@plt+0x6b8c>
   18684:	ldr	r9, [r5, #48]	; 0x30
   18688:	tst	r9, #512	; 0x200
   1868c:	bne	18780 <__assert_fail@plt+0x6bdc>
   18690:	mov	r0, r6
   18694:	bl	11ae4 <fchdir@plt>
   18698:	mov	r9, r0
   1869c:	cmp	r4, #0
   186a0:	bge	18710 <__assert_fail@plt+0x6b6c>
   186a4:	bl	119b8 <__errno_location@plt>
   186a8:	mov	r4, r0
   186ac:	mov	r0, r6
   186b0:	ldr	r5, [r4]
   186b4:	bl	11b80 <close@plt>
   186b8:	str	r5, [r4]
   186bc:	b	18710 <__assert_fail@plt+0x6b6c>
   186c0:	cmp	r8, #0
   186c4:	bne	18700 <__assert_fail@plt+0x6b5c>
   186c8:	cmp	r4, #0
   186cc:	movge	r6, r4
   186d0:	blt	18620 <__assert_fail@plt+0x6a7c>
   186d4:	tst	r9, #2
   186d8:	bne	18644 <__assert_fail@plt+0x6aa0>
   186dc:	cmp	sl, #0
   186e0:	beq	18688 <__assert_fail@plt+0x6ae4>
   186e4:	mov	r0, sl
   186e8:	movw	r1, #11740	; 0x2ddc
   186ec:	movt	r1, #3
   186f0:	bl	1170c <strcmp@plt>
   186f4:	cmp	r0, #0
   186f8:	bne	18688 <__assert_fail@plt+0x6ae4>
   186fc:	b	18644 <__assert_fail@plt+0x6aa0>
   18700:	mvn	r3, r4
   18704:	lsr	r3, r3, #31
   18708:	ands	r9, r3, r9, lsr #9
   1870c:	bne	1879c <__assert_fail@plt+0x6bf8>
   18710:	mov	r0, r9
   18714:	add	sp, sp, #104	; 0x68
   18718:	ldrd	r4, [sp]
   1871c:	ldrd	r6, [sp, #8]
   18720:	ldrd	r8, [sp, #16]
   18724:	ldr	sl, [sp, #24]
   18728:	add	sp, sp, #28
   1872c:	pop	{pc}		; (ldr pc, [sp], #4)
   18730:	bl	119b8 <__errno_location@plt>
   18734:	mov	r3, #2
   18738:	str	r3, [r0]
   1873c:	mvn	r9, #0
   18740:	b	1869c <__assert_fail@plt+0x6af8>
   18744:	add	r6, r5, #60	; 0x3c
   18748:	mov	r0, r6
   1874c:	bl	1be98 <__assert_fail@plt+0xa2f4>
   18750:	subs	r8, r0, #0
   18754:	bne	18620 <__assert_fail@plt+0x6a7c>
   18758:	mov	r0, r6
   1875c:	bl	1bee8 <__assert_fail@plt+0xa344>
   18760:	subs	r6, r0, #0
   18764:	blt	187ac <__assert_fail@plt+0x6c08>
   18768:	ldr	r9, [r5, #48]	; 0x30
   1876c:	mov	r4, r6
   18770:	mov	r8, #1
   18774:	tst	r9, #2
   18778:	beq	18688 <__assert_fail@plt+0x6ae4>
   1877c:	b	18644 <__assert_fail@plt+0x6aa0>
   18780:	eor	r2, r8, #1
   18784:	mov	r1, r6
   18788:	uxtb	r2, r2
   1878c:	mov	r0, r5
   18790:	bl	18218 <__assert_fail@plt+0x6674>
   18794:	mov	r9, #0
   18798:	b	18710 <__assert_fail@plt+0x6b6c>
   1879c:	mov	r0, r4
   187a0:	mov	r9, #0
   187a4:	bl	11b80 <close@plt>
   187a8:	b	18710 <__assert_fail@plt+0x6b6c>
   187ac:	mov	r8, #1
   187b0:	ldr	r9, [r5, #48]	; 0x30
   187b4:	b	18620 <__assert_fail@plt+0x6a7c>
   187b8:	mvn	r9, #0
   187bc:	b	18710 <__assert_fail@plt+0x6b6c>
   187c0:	tst	r9, #2
   187c4:	mov	r6, r4
   187c8:	mov	r8, #1
   187cc:	beq	186e4 <__assert_fail@plt+0x6b40>
   187d0:	b	18644 <__assert_fail@plt+0x6aa0>
   187d4:	movw	r3, #258	; 0x102
   187d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   187dc:	tst	r0, r3
   187e0:	strd	r6, [sp, #8]
   187e4:	strd	r8, [sp, #16]
   187e8:	mov	r8, r2
   187ec:	str	sl, [sp, #24]
   187f0:	mov	sl, r1
   187f4:	str	lr, [sp, #28]
   187f8:	beq	1887c <__assert_fail@plt+0x6cd8>
   187fc:	mov	r0, #24
   18800:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   18804:	subs	r9, r0, #0
   18808:	beq	188a0 <__assert_fail@plt+0x6cfc>
   1880c:	ldrd	r6, [r8, #64]	; 0x40
   18810:	mov	r1, r9
   18814:	ldrd	r4, [r8, #160]	; 0xa0
   18818:	ldr	r0, [sl]
   1881c:	strd	r6, [r9]
   18820:	str	r8, [r9, #16]
   18824:	strd	r4, [r9, #8]
   18828:	bl	1b110 <__assert_fail@plt+0x956c>
   1882c:	cmp	r9, r0
   18830:	mov	r4, r0
   18834:	beq	18860 <__assert_fail@plt+0x6cbc>
   18838:	mov	r0, r9
   1883c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   18840:	cmp	r4, #0
   18844:	beq	188a0 <__assert_fail@plt+0x6cfc>
   18848:	ldr	r3, [r4, #16]
   1884c:	mov	r2, #2
   18850:	mov	r0, #1
   18854:	str	r3, [r8]
   18858:	strh	r2, [r8, #56]	; 0x38
   1885c:	b	18864 <__assert_fail@plt+0x6cc0>
   18860:	mov	r0, #1
   18864:	ldrd	r4, [sp]
   18868:	ldrd	r6, [sp, #8]
   1886c:	ldrd	r8, [sp, #16]
   18870:	ldr	sl, [sp, #24]
   18874:	add	sp, sp, #28
   18878:	pop	{pc}		; (ldr pc, [sp], #4)
   1887c:	add	r1, r2, #64	; 0x40
   18880:	ldr	r0, [sl]
   18884:	bl	30838 <__assert_fail@plt+0x1ec94>
   18888:	cmp	r0, #0
   1888c:	beq	18860 <__assert_fail@plt+0x6cbc>
   18890:	mov	r3, #2
   18894:	str	r8, [r8]
   18898:	strh	r3, [r8, #56]	; 0x38
   1889c:	b	18864 <__assert_fail@plt+0x6cc0>
   188a0:	mov	r0, #0
   188a4:	b	18864 <__assert_fail@plt+0x6cc0>
   188a8:	movw	r3, #258	; 0x102
   188ac:	mov	ip, r1
   188b0:	strd	r4, [sp, #-12]!
   188b4:	tst	r0, r3
   188b8:	str	lr, [sp, #8]
   188bc:	sub	sp, sp, #28
   188c0:	bne	18910 <__assert_fail@plt+0x6d6c>
   188c4:	ldr	r3, [r2, #4]
   188c8:	cmp	r3, #0
   188cc:	beq	18900 <__assert_fail@plt+0x6d5c>
   188d0:	ldr	r1, [r3, #48]	; 0x30
   188d4:	cmp	r1, #0
   188d8:	blt	18900 <__assert_fail@plt+0x6d5c>
   188dc:	ldr	ip, [ip]
   188e0:	ldrd	r0, [ip, #16]
   188e4:	orrs	r1, r0, r1
   188e8:	beq	18970 <__assert_fail@plt+0x6dcc>
   188ec:	ldrd	r4, [ip]
   188f0:	ldrd	r0, [r2, #160]	; 0xa0
   188f4:	cmp	r5, r1
   188f8:	cmpeq	r4, r0
   188fc:	beq	18948 <__assert_fail@plt+0x6da4>
   18900:	add	sp, sp, #28
   18904:	ldrd	r4, [sp]
   18908:	add	sp, sp, #8
   1890c:	pop	{pc}		; (ldr pc, [sp], #4)
   18910:	ldrd	r4, [r2, #64]	; 0x40
   18914:	mov	r1, sp
   18918:	ldrd	r2, [r2, #160]	; 0xa0
   1891c:	ldr	r0, [ip]
   18920:	strd	r4, [sp]
   18924:	strd	r2, [sp, #8]
   18928:	bl	1b150 <__assert_fail@plt+0x95ac>
   1892c:	cmp	r0, #0
   18930:	beq	18970 <__assert_fail@plt+0x6dcc>
   18934:	bl	17ac8 <__assert_fail@plt+0x5f24>
   18938:	add	sp, sp, #28
   1893c:	ldrd	r4, [sp]
   18940:	add	sp, sp, #8
   18944:	pop	{pc}		; (ldr pc, [sp], #4)
   18948:	ldrd	r0, [ip, #8]
   1894c:	ldrd	r4, [r2, #64]	; 0x40
   18950:	cmp	r1, r5
   18954:	cmpeq	r0, r4
   18958:	bne	18900 <__assert_fail@plt+0x6d5c>
   1895c:	ldrd	r0, [r3, #64]	; 0x40
   18960:	ldrd	r2, [r3, #160]	; 0xa0
   18964:	strd	r2, [ip]
   18968:	strd	r0, [ip, #8]
   1896c:	b	18900 <__assert_fail@plt+0x6d5c>
   18970:	bl	11b68 <abort@plt>
   18974:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18978:	mov	r5, r0
   1897c:	strd	r6, [sp, #8]
   18980:	strd	r8, [sp, #16]
   18984:	ldr	r9, [r0]
   18988:	strd	sl, [sp, #24]
   1898c:	str	lr, [sp, #32]
   18990:	sub	sp, sp, #68	; 0x44
   18994:	str	r1, [sp, #32]
   18998:	ldr	r0, [r9, #12]
   1899c:	cmp	r0, #0
   189a0:	str	r0, [sp, #40]	; 0x28
   189a4:	beq	18ce4 <__assert_fail@plt+0x7140>
   189a8:	bl	11ad8 <dirfd@plt>
   189ac:	cmp	r0, #0
   189b0:	str	r0, [sp, #60]	; 0x3c
   189b4:	blt	19228 <__assert_fail@plt+0x7684>
   189b8:	ldr	r3, [r5, #44]	; 0x2c
   189bc:	cmp	r3, #0
   189c0:	beq	1910c <__assert_fail@plt+0x7568>
   189c4:	ldr	r3, [r5, #48]	; 0x30
   189c8:	mvn	r2, #0
   189cc:	str	r2, [sp, #16]
   189d0:	mov	r2, #1
   189d4:	str	r2, [sp, #52]	; 0x34
   189d8:	ldr	r2, [r9, #28]
   189dc:	ldr	r1, [r9, #40]	; 0x28
   189e0:	sub	r0, r1, #1
   189e4:	str	r1, [sp]
   189e8:	ldrb	r2, [r2, r0]
   189ec:	str	r0, [sp, #28]
   189f0:	cmp	r2, #47	; 0x2f
   189f4:	beq	18a04 <__assert_fail@plt+0x6e60>
   189f8:	add	r2, r1, #1
   189fc:	str	r2, [sp]
   18a00:	str	r1, [sp, #28]
   18a04:	ands	r3, r3, #4
   18a08:	streq	r3, [sp, #20]
   18a0c:	beq	18a2c <__assert_fail@plt+0x6e88>
   18a10:	ldr	r3, [r5, #24]
   18a14:	mov	r1, #47	; 0x2f
   18a18:	ldr	r0, [sp, #28]
   18a1c:	add	r2, r3, r0
   18a20:	strb	r1, [r3, r0]
   18a24:	add	r3, r2, #1
   18a28:	str	r3, [sp, #20]
   18a2c:	mov	sl, #0
   18a30:	movw	r3, #6548	; 0x1994
   18a34:	movt	r3, #258	; 0x102
   18a38:	mov	r2, sl
   18a3c:	ldr	fp, [r5, #36]	; 0x24
   18a40:	mov	r7, sl
   18a44:	stmib	sp, {r2, r9}
   18a48:	movw	r2, #19778	; 0x4d42
   18a4c:	movt	r2, #65363	; 0xff53
   18a50:	str	sl, [sp, #24]
   18a54:	str	r3, [sp, #44]	; 0x2c
   18a58:	ldr	r3, [r9, #48]	; 0x30
   18a5c:	str	sl, [sp, #36]	; 0x24
   18a60:	str	r2, [sp, #48]	; 0x30
   18a64:	ldr	r2, [sp]
   18a68:	add	r3, r3, #1
   18a6c:	str	r3, [sp, #12]
   18a70:	sub	fp, fp, r2
   18a74:	b	18a8c <__assert_fail@plt+0x6ee8>
   18a78:	ldr	r3, [sp, #16]
   18a7c:	add	r7, r7, #1
   18a80:	cmp	r7, r3
   18a84:	bcs	18e44 <__assert_fail@plt+0x72a0>
   18a88:	mov	sl, r4
   18a8c:	ldr	r3, [sp, #8]
   18a90:	ldr	r4, [r3, #12]
   18a94:	cmp	r4, #0
   18a98:	beq	18fcc <__assert_fail@plt+0x7428>
   18a9c:	bl	119b8 <__errno_location@plt>
   18aa0:	mov	r8, r0
   18aa4:	mov	r3, #0
   18aa8:	mov	r0, r4
   18aac:	str	r3, [r8]
   18ab0:	bl	11ab4 <readdir64@plt>
   18ab4:	subs	r9, r0, #0
   18ab8:	beq	1909c <__assert_fail@plt+0x74f8>
   18abc:	ldr	r3, [r5, #48]	; 0x30
   18ac0:	tst	r3, #32
   18ac4:	bne	18ad4 <__assert_fail@plt+0x6f30>
   18ac8:	ldrb	r3, [r9, #19]
   18acc:	cmp	r3, #46	; 0x2e
   18ad0:	beq	18c68 <__assert_fail@plt+0x70c4>
   18ad4:	add	r4, r9, #19
   18ad8:	mov	r0, r4
   18adc:	bl	11988 <strlen@plt>
   18ae0:	mov	r2, r0
   18ae4:	mov	r1, r4
   18ae8:	mov	r6, r0
   18aec:	mov	r0, r5
   18af0:	bl	17fdc <__assert_fail@plt+0x6438>
   18af4:	subs	r4, r0, #0
   18af8:	beq	18efc <__assert_fail@plt+0x7358>
   18afc:	cmp	fp, r6
   18b00:	bls	18bc8 <__assert_fail@plt+0x7024>
   18b04:	ldr	r3, [sp]
   18b08:	adds	r6, r6, r3
   18b0c:	bcs	192fc <__assert_fail@plt+0x7758>
   18b10:	ldr	r3, [sp, #12]
   18b14:	add	r1, r4, #168	; 0xa8
   18b18:	ldr	ip, [r5]
   18b1c:	ldr	r0, [r5, #48]	; 0x30
   18b20:	str	r6, [r4, #40]	; 0x28
   18b24:	str	r3, [r4, #48]	; 0x30
   18b28:	ldrd	r2, [r9]
   18b2c:	str	ip, [r4, #4]
   18b30:	tst	r0, #4
   18b34:	streq	r1, [r4, #24]
   18b38:	strd	r2, [r4, #160]	; 0xa0
   18b3c:	bne	18c48 <__assert_fail@plt+0x70a4>
   18b40:	ldr	r3, [r5, #44]	; 0x2c
   18b44:	cmp	r3, #0
   18b48:	beq	18b54 <__assert_fail@plt+0x6fb0>
   18b4c:	ands	r3, r0, #1024	; 0x400
   18b50:	beq	18c88 <__assert_fail@plt+0x70e4>
   18b54:	ldrb	r3, [r9, #18]
   18b58:	tst	r0, #8
   18b5c:	sub	r2, r3, #1
   18b60:	beq	18b6c <__assert_fail@plt+0x6fc8>
   18b64:	tst	r3, #251	; 0xfb
   18b68:	bne	18ca0 <__assert_fail@plt+0x70fc>
   18b6c:	mov	r3, #11
   18b70:	cmp	r2, r3
   18b74:	strh	r3, [r4, #56]	; 0x38
   18b78:	bls	18c2c <__assert_fail@plt+0x7088>
   18b7c:	mov	r1, #0
   18b80:	mov	r2, #2
   18b84:	mov	r3, #0
   18b88:	str	r1, [r4, #80]	; 0x50
   18b8c:	strd	r2, [r4, #112]	; 0x70
   18b90:	ldr	r2, [sp, #4]
   18b94:	mov	r3, #0
   18b98:	str	r3, [r4, #8]
   18b9c:	cmp	r2, r3
   18ba0:	movw	r3, #10000	; 0x2710
   18ba4:	strne	r4, [sl, #8]
   18ba8:	streq	r4, [sp, #4]
   18bac:	cmp	r7, r3
   18bb0:	bne	18a78 <__assert_fail@plt+0x6ed4>
   18bb4:	ldr	r6, [r5, #44]	; 0x2c
   18bb8:	cmp	r6, #0
   18bbc:	beq	18df8 <__assert_fail@plt+0x7254>
   18bc0:	movw	r7, #10001	; 0x2711
   18bc4:	b	18a88 <__assert_fail@plt+0x6ee4>
   18bc8:	ldr	r3, [sp, #28]
   18bcc:	add	r1, r5, #36	; 0x24
   18bd0:	add	r0, r5, #24
   18bd4:	ldr	fp, [r5, #24]
   18bd8:	add	r2, r3, #2
   18bdc:	add	r2, r2, r6
   18be0:	bl	18468 <__assert_fail@plt+0x68c4>
   18be4:	cmp	r0, #0
   18be8:	beq	18efc <__assert_fail@plt+0x7358>
   18bec:	ldr	r3, [r5, #24]
   18bf0:	cmp	r3, fp
   18bf4:	beq	18cdc <__assert_fail@plt+0x7138>
   18bf8:	ldr	r2, [r5, #48]	; 0x30
   18bfc:	tst	r2, #4
   18c00:	beq	18c10 <__assert_fail@plt+0x706c>
   18c04:	ldr	r2, [sp]
   18c08:	add	r3, r3, r2
   18c0c:	str	r3, [sp, #20]
   18c10:	ldr	r3, [sp]
   18c14:	str	r0, [sp, #24]
   18c18:	ldr	fp, [r5, #36]	; 0x24
   18c1c:	sub	fp, fp, r3
   18c20:	b	18b04 <__assert_fail@plt+0x6f60>
   18c24:	mov	r3, #11
   18c28:	strh	r3, [r4, #56]	; 0x38
   18c2c:	movw	r3, #11692	; 0x2dac
   18c30:	movt	r3, #3
   18c34:	ldr	r1, [r3, r2, lsl #2]
   18c38:	mov	r2, #2
   18c3c:	mov	r3, #0
   18c40:	str	r1, [r4, #80]	; 0x50
   18c44:	b	18b8c <__assert_fail@plt+0x6fe8>
   18c48:	ldr	r3, [r4, #28]
   18c4c:	ldr	r2, [r4, #52]	; 0x34
   18c50:	ldr	r0, [sp, #20]
   18c54:	str	r3, [r4, #24]
   18c58:	add	r2, r2, #1
   18c5c:	bl	11748 <memmove@plt>
   18c60:	ldr	r0, [r5, #48]	; 0x30
   18c64:	b	18b40 <__assert_fail@plt+0x6f9c>
   18c68:	ldrb	r3, [r9, #20]
   18c6c:	cmp	r3, #0
   18c70:	beq	18c80 <__assert_fail@plt+0x70dc>
   18c74:	ldrh	r3, [r9, #20]
   18c78:	cmp	r3, #46	; 0x2e
   18c7c:	bne	18ad4 <__assert_fail@plt+0x6f30>
   18c80:	mov	r4, sl
   18c84:	b	18a88 <__assert_fail@plt+0x6ee4>
   18c88:	mov	r1, r0
   18c8c:	mov	r2, r4
   18c90:	ldr	r0, [r5, #32]
   18c94:	bl	1830c <__assert_fail@plt+0x6768>
   18c98:	strh	r0, [r4, #56]	; 0x38
   18c9c:	b	18b90 <__assert_fail@plt+0x6fec>
   18ca0:	ubfx	r0, r0, #4, #1
   18ca4:	cmp	r3, #10
   18ca8:	moveq	r3, r0
   18cac:	orrne	r3, r0, #1
   18cb0:	cmp	r3, #0
   18cb4:	beq	18c24 <__assert_fail@plt+0x7080>
   18cb8:	mov	r3, #11
   18cbc:	cmp	r2, r3
   18cc0:	strh	r3, [r4, #56]	; 0x38
   18cc4:	bls	18ee0 <__assert_fail@plt+0x733c>
   18cc8:	mov	r1, #0
   18ccc:	mov	r2, #1
   18cd0:	mov	r3, #0
   18cd4:	str	r1, [r4, #80]	; 0x50
   18cd8:	b	18b8c <__assert_fail@plt+0x6fe8>
   18cdc:	ldr	r0, [sp, #24]
   18ce0:	b	18c10 <__assert_fail@plt+0x706c>
   18ce4:	ldr	r3, [r5, #48]	; 0x30
   18ce8:	ldr	r1, [r9, #24]
   18cec:	and	r2, r3, #516	; 0x204
   18cf0:	cmp	r2, #512	; 0x200
   18cf4:	ldreq	r0, [r5, #32]
   18cf8:	mvnne	r0, #99	; 0x63
   18cfc:	ands	r2, r3, #16
   18d00:	beq	18d10 <__assert_fail@plt+0x716c>
   18d04:	tst	r3, #1
   18d08:	moveq	r2, #32768	; 0x8000
   18d0c:	bne	18f60 <__assert_fail@plt+0x73bc>
   18d10:	add	r3, sp, #60	; 0x3c
   18d14:	bl	1d40c <__assert_fail@plt+0xb868>
   18d18:	cmp	r0, #0
   18d1c:	str	r0, [sp, #4]
   18d20:	str	r0, [r9, #12]
   18d24:	beq	19270 <__assert_fail@plt+0x76cc>
   18d28:	ldrh	r3, [r9, #56]	; 0x38
   18d2c:	ldr	r0, [r5, #48]	; 0x30
   18d30:	cmp	r3, #11
   18d34:	beq	191bc <__assert_fail@plt+0x7618>
   18d38:	tst	r0, #256	; 0x100
   18d3c:	bne	19138 <__assert_fail@plt+0x7594>
   18d40:	ldr	r2, [r5, #44]	; 0x2c
   18d44:	movw	r3, #34464	; 0x86a0
   18d48:	movt	r3, #1
   18d4c:	cmp	r2, #0
   18d50:	mvnne	r3, #0
   18d54:	str	r3, [sp, #16]
   18d58:	ldr	r3, [sp, #32]
   18d5c:	cmp	r3, #2
   18d60:	beq	19128 <__assert_fail@plt+0x7584>
   18d64:	ldr	r3, [r5, #48]	; 0x30
   18d68:	ldr	r0, [sp, #60]	; 0x3c
   18d6c:	and	r3, r3, #56	; 0x38
   18d70:	cmp	r3, #24
   18d74:	beq	18f70 <__assert_fail@plt+0x73cc>
   18d78:	ldr	r3, [sp, #32]
   18d7c:	mov	r4, #1
   18d80:	sub	r6, r3, #3
   18d84:	clz	r6, r6
   18d88:	lsr	r6, r6, #5
   18d8c:	ldr	r3, [r5, #48]	; 0x30
   18d90:	tst	r3, #512	; 0x200
   18d94:	bne	1925c <__assert_fail@plt+0x76b8>
   18d98:	cmp	r0, #0
   18d9c:	bge	191fc <__assert_fail@plt+0x7658>
   18da0:	tst	r6, r4
   18da4:	beq	18db4 <__assert_fail@plt+0x7210>
   18da8:	bl	119b8 <__errno_location@plt>
   18dac:	ldr	r3, [r0]
   18db0:	str	r3, [r9, #32]
   18db4:	ldrh	r3, [r9, #58]	; 0x3a
   18db8:	ldr	r0, [r9, #12]
   18dbc:	orr	r3, r3, #1
   18dc0:	strh	r3, [r9, #58]	; 0x3a
   18dc4:	bl	11b98 <closedir@plt>
   18dc8:	ldr	r3, [r5, #48]	; 0x30
   18dcc:	mov	r2, #0
   18dd0:	str	r2, [r9, #12]
   18dd4:	tst	r3, #512	; 0x200
   18dd8:	beq	18de8 <__assert_fail@plt+0x7244>
   18ddc:	ldr	r0, [sp, #60]	; 0x3c
   18de0:	cmp	r0, r2
   18de4:	bge	19250 <__assert_fail@plt+0x76ac>
   18de8:	mov	r2, #0
   18dec:	str	r2, [r9, #12]
   18df0:	str	r2, [sp, #52]	; 0x34
   18df4:	b	189d8 <__assert_fail@plt+0x6e34>
   18df8:	ldr	r0, [sp, #8]
   18dfc:	ldr	r1, [sp, #60]	; 0x3c
   18e00:	bl	180f8 <__assert_fail@plt+0x6554>
   18e04:	movw	r3, #26985	; 0x6969
   18e08:	cmp	r0, r3
   18e0c:	beq	18e30 <__assert_fail@plt+0x728c>
   18e10:	ldr	r3, [sp, #44]	; 0x2c
   18e14:	cmp	r0, r3
   18e18:	beq	18e30 <__assert_fail@plt+0x728c>
   18e1c:	ldr	r3, [sp, #48]	; 0x30
   18e20:	cmp	r0, r3
   18e24:	movne	r3, #1
   18e28:	strne	r3, [sp, #36]	; 0x24
   18e2c:	bne	18bc0 <__assert_fail@plt+0x701c>
   18e30:	ldr	r3, [sp, #16]
   18e34:	add	r7, r7, #1
   18e38:	str	r6, [sp, #36]	; 0x24
   18e3c:	cmp	r7, r3
   18e40:	bcc	18a88 <__assert_fail@plt+0x6ee4>
   18e44:	ldr	r9, [sp, #8]
   18e48:	ldr	r3, [sp, #24]
   18e4c:	cmp	r3, #0
   18e50:	beq	18fdc <__assert_fail@plt+0x7438>
   18e54:	ldr	r3, [r5, #4]
   18e58:	ldr	r1, [r5, #24]
   18e5c:	cmp	r3, #0
   18e60:	beq	18e94 <__assert_fail@plt+0x72f0>
   18e64:	ldr	r2, [r3, #24]
   18e68:	add	r0, r3, #168	; 0xa8
   18e6c:	cmp	r2, r0
   18e70:	beq	18e84 <__assert_fail@plt+0x72e0>
   18e74:	ldr	r0, [r3, #28]
   18e78:	sub	r2, r2, r0
   18e7c:	add	r2, r1, r2
   18e80:	str	r2, [r3, #24]
   18e84:	str	r1, [r3, #28]
   18e88:	ldr	r3, [r3, #8]
   18e8c:	cmp	r3, #0
   18e90:	bne	18e64 <__assert_fail@plt+0x72c0>
   18e94:	ldr	r3, [sp, #4]
   18e98:	b	18ecc <__assert_fail@plt+0x7328>
   18e9c:	ldr	r2, [r3, #24]
   18ea0:	cmp	r2, r0
   18ea4:	beq	18eb8 <__assert_fail@plt+0x7314>
   18ea8:	ldr	r0, [r3, #28]
   18eac:	sub	r2, r2, r0
   18eb0:	add	r2, r1, r2
   18eb4:	str	r2, [r3, #24]
   18eb8:	ldr	r2, [r3, #8]
   18ebc:	str	r1, [r3, #28]
   18ec0:	cmp	r2, #0
   18ec4:	ldreq	r2, [r3, #4]
   18ec8:	mov	r3, r2
   18ecc:	ldr	r2, [r3, #48]	; 0x30
   18ed0:	add	r0, r3, #168	; 0xa8
   18ed4:	cmp	r2, #0
   18ed8:	bge	18e9c <__assert_fail@plt+0x72f8>
   18edc:	b	18fdc <__assert_fail@plt+0x7438>
   18ee0:	movw	r3, #11692	; 0x2dac
   18ee4:	movt	r3, #3
   18ee8:	ldr	r1, [r3, r2, lsl #2]
   18eec:	mov	r2, #1
   18ef0:	mov	r3, #0
   18ef4:	str	r1, [r4, #80]	; 0x50
   18ef8:	b	18b8c <__assert_fail@plt+0x6fe8>
   18efc:	ldr	r9, [sp, #8]
   18f00:	mov	r0, r4
   18f04:	ldr	r4, [r8]
   18f08:	bl	17ac8 <__assert_fail@plt+0x5f24>
   18f0c:	ldr	r0, [sp, #4]
   18f10:	bl	1806c <__assert_fail@plt+0x64c8>
   18f14:	ldr	r0, [r9, #12]
   18f18:	bl	11b98 <closedir@plt>
   18f1c:	ldr	r3, [r5, #48]	; 0x30
   18f20:	mov	r2, #0
   18f24:	mov	r1, #7
   18f28:	str	r2, [sp, #4]
   18f2c:	str	r2, [r9, #12]
   18f30:	strh	r1, [r9, #56]	; 0x38
   18f34:	orr	r3, r3, #8192	; 0x2000
   18f38:	str	r3, [r5, #48]	; 0x30
   18f3c:	str	r4, [r8]
   18f40:	ldr	r0, [sp, #4]
   18f44:	add	sp, sp, #68	; 0x44
   18f48:	ldrd	r4, [sp]
   18f4c:	ldrd	r6, [sp, #8]
   18f50:	ldrd	r8, [sp, #16]
   18f54:	ldrd	sl, [sp, #24]
   18f58:	add	sp, sp, #32
   18f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f60:	ldr	r2, [r9, #48]	; 0x30
   18f64:	cmp	r2, #0
   18f68:	movne	r2, #32768	; 0x8000
   18f6c:	b	18d10 <__assert_fail@plt+0x716c>
   18f70:	ldr	r3, [r9, #84]	; 0x54
   18f74:	cmp	r3, #2
   18f78:	bne	18d78 <__assert_fail@plt+0x71d4>
   18f7c:	mov	r1, r0
   18f80:	mov	r0, r9
   18f84:	bl	180f8 <__assert_fail@plt+0x6554>
   18f88:	movw	r3, #26985	; 0x6969
   18f8c:	cmp	r0, r3
   18f90:	beq	192f4 <__assert_fail@plt+0x7750>
   18f94:	bgt	192d8 <__assert_fail@plt+0x7734>
   18f98:	movw	r3, #19778	; 0x4d42
   18f9c:	movt	r3, #65363	; 0xff53
   18fa0:	cmp	r0, r3
   18fa4:	beq	192f4 <__assert_fail@plt+0x7750>
   18fa8:	cmp	r0, #0
   18fac:	beq	192f4 <__assert_fail@plt+0x7750>
   18fb0:	ldr	r3, [sp, #32]
   18fb4:	cmp	r3, #3
   18fb8:	bne	19128 <__assert_fail@plt+0x7584>
   18fbc:	mov	r4, #0
   18fc0:	mov	r6, #1
   18fc4:	ldr	r0, [sp, #60]	; 0x3c
   18fc8:	b	18d8c <__assert_fail@plt+0x71e8>
   18fcc:	mov	r9, r3
   18fd0:	ldr	r3, [sp, #24]
   18fd4:	cmp	r3, #0
   18fd8:	bne	18e54 <__assert_fail@plt+0x72b0>
   18fdc:	ldr	r3, [r5, #48]	; 0x30
   18fe0:	tst	r3, #4
   18fe4:	beq	19014 <__assert_fail@plt+0x7470>
   18fe8:	ldr	r2, [sp]
   18fec:	ldr	r3, [r5, #36]	; 0x24
   18ff0:	cmp	r7, #0
   18ff4:	cmpne	r3, r2
   18ff8:	bne	19008 <__assert_fail@plt+0x7464>
   18ffc:	ldr	r3, [sp, #20]
   19000:	sub	r3, r3, #1
   19004:	str	r3, [sp, #20]
   19008:	ldr	r2, [sp, #20]
   1900c:	mov	r3, #0
   19010:	strb	r3, [r2]
   19014:	ldr	r2, [sp, #40]	; 0x28
   19018:	ldr	r3, [sp, #52]	; 0x34
   1901c:	cmp	r2, #0
   19020:	movne	r3, #0
   19024:	cmp	r3, #0
   19028:	beq	19060 <__assert_fail@plt+0x74bc>
   1902c:	ldr	r3, [sp, #32]
   19030:	cmp	r7, #0
   19034:	cmpne	r3, #1
   19038:	bne	19068 <__assert_fail@plt+0x74c4>
   1903c:	ldr	r3, [r9, #48]	; 0x30
   19040:	cmp	r3, #0
   19044:	bne	191d8 <__assert_fail@plt+0x7634>
   19048:	mov	r0, r5
   1904c:	bl	182a8 <__assert_fail@plt+0x6704>
   19050:	adds	r0, r0, #0
   19054:	movne	r0, #1
   19058:	cmp	r0, #0
   1905c:	bne	192b0 <__assert_fail@plt+0x770c>
   19060:	cmp	r7, #0
   19064:	beq	19188 <__assert_fail@plt+0x75e4>
   19068:	ldr	r3, [sp, #36]	; 0x24
   1906c:	cmp	r3, #0
   19070:	bne	190e0 <__assert_fail@plt+0x753c>
   19074:	ldr	r3, [r5, #44]	; 0x2c
   19078:	cmp	r3, #0
   1907c:	cmpne	r7, #1
   19080:	beq	18f40 <__assert_fail@plt+0x739c>
   19084:	mov	r2, r7
   19088:	mov	r0, r5
   1908c:	ldr	r1, [sp, #4]
   19090:	bl	17ee8 <__assert_fail@plt+0x6344>
   19094:	str	r0, [sp, #4]
   19098:	b	18f40 <__assert_fail@plt+0x739c>
   1909c:	ldr	r3, [r8]
   190a0:	ldr	r9, [sp, #8]
   190a4:	cmp	r3, #0
   190a8:	beq	190c4 <__assert_fail@plt+0x7520>
   190ac:	ldr	r2, [sp, #40]	; 0x28
   190b0:	str	r3, [r9, #32]
   190b4:	orrs	r2, r2, r7
   190b8:	moveq	r3, #4
   190bc:	movne	r3, #7
   190c0:	strh	r3, [r9, #56]	; 0x38
   190c4:	ldr	r0, [r9, #12]
   190c8:	cmp	r0, #0
   190cc:	beq	18fd0 <__assert_fail@plt+0x742c>
   190d0:	bl	11b98 <closedir@plt>
   190d4:	mov	r3, #0
   190d8:	str	r3, [r9, #12]
   190dc:	b	18fd0 <__assert_fail@plt+0x742c>
   190e0:	movw	r3, #32440	; 0x7eb8
   190e4:	movt	r3, #1
   190e8:	ldr	r1, [sp, #4]
   190ec:	mov	r2, r7
   190f0:	mov	r0, r5
   190f4:	str	r3, [r5, #44]	; 0x2c
   190f8:	bl	17ee8 <__assert_fail@plt+0x6344>
   190fc:	mov	r3, #0
   19100:	str	r0, [sp, #4]
   19104:	str	r3, [r5, #44]	; 0x2c
   19108:	b	18f40 <__assert_fail@plt+0x739c>
   1910c:	movw	r3, #34464	; 0x86a0
   19110:	movt	r3, #1
   19114:	mov	r2, #1
   19118:	str	r3, [sp, #16]
   1911c:	str	r2, [sp, #52]	; 0x34
   19120:	ldr	r3, [r5, #48]	; 0x30
   19124:	b	189d8 <__assert_fail@plt+0x6e34>
   19128:	mov	r3, #0
   1912c:	str	r3, [sp, #52]	; 0x34
   19130:	ldr	r3, [r5, #48]	; 0x30
   19134:	b	189d8 <__assert_fail@plt+0x6e34>
   19138:	add	r4, r5, #56	; 0x38
   1913c:	mov	r2, r9
   19140:	mov	r1, r4
   19144:	bl	188a8 <__assert_fail@plt+0x6d04>
   19148:	mov	r3, #0
   1914c:	mov	r2, r9
   19150:	ldr	r0, [r5, #32]
   19154:	ldr	r1, [r5, #48]	; 0x30
   19158:	bl	1830c <__assert_fail@plt+0x6768>
   1915c:	mov	r1, r4
   19160:	mov	r2, r9
   19164:	ldr	r0, [r5, #48]	; 0x30
   19168:	bl	187d4 <__assert_fail@plt+0x6c30>
   1916c:	subs	r4, r0, #0
   19170:	bne	18d40 <__assert_fail@plt+0x719c>
   19174:	bl	119b8 <__errno_location@plt>
   19178:	mov	r3, #12
   1917c:	str	r4, [sp, #4]
   19180:	str	r3, [r0]
   19184:	b	18f40 <__assert_fail@plt+0x739c>
   19188:	ldr	r3, [sp, #32]
   1918c:	cmp	r3, #3
   19190:	bne	191a8 <__assert_fail@plt+0x7604>
   19194:	ldrh	r3, [r9, #56]	; 0x38
   19198:	cmp	r3, #7
   1919c:	cmpne	r3, #4
   191a0:	movne	r3, #6
   191a4:	strhne	r3, [r9, #56]	; 0x38
   191a8:	mov	r3, #0
   191ac:	ldr	r0, [sp, #4]
   191b0:	str	r3, [sp, #4]
   191b4:	bl	1806c <__assert_fail@plt+0x64c8>
   191b8:	b	18f40 <__assert_fail@plt+0x739c>
   191bc:	mov	r1, r0
   191c0:	mov	r3, #0
   191c4:	ldr	r0, [r5, #32]
   191c8:	mov	r2, r9
   191cc:	bl	1830c <__assert_fail@plt+0x6768>
   191d0:	strh	r0, [r9, #56]	; 0x38
   191d4:	b	18d40 <__assert_fail@plt+0x719c>
   191d8:	movw	r3, #11740	; 0x2ddc
   191dc:	movt	r3, #3
   191e0:	ldr	r1, [r9, #4]
   191e4:	mvn	r2, #0
   191e8:	mov	r0, r5
   191ec:	bl	185b8 <__assert_fail@plt+0x6a14>
   191f0:	adds	r0, r0, #0
   191f4:	movne	r0, #1
   191f8:	b	19058 <__assert_fail@plt+0x74b4>
   191fc:	mov	r2, r0
   19200:	mov	r3, #0
   19204:	mov	r1, r9
   19208:	mov	r0, r5
   1920c:	bl	185b8 <__assert_fail@plt+0x6a14>
   19210:	cmp	r0, #0
   19214:	bne	18da0 <__assert_fail@plt+0x71fc>
   19218:	mov	r3, #1
   1921c:	str	r3, [sp, #52]	; 0x34
   19220:	ldr	r3, [r5, #48]	; 0x30
   19224:	b	189d8 <__assert_fail@plt+0x6e34>
   19228:	ldr	r0, [r9, #12]
   1922c:	mov	r4, #0
   19230:	bl	11b98 <closedir@plt>
   19234:	ldr	r3, [sp, #32]
   19238:	str	r4, [r9, #12]
   1923c:	cmp	r3, #3
   19240:	beq	19294 <__assert_fail@plt+0x76f0>
   19244:	mov	r3, #0
   19248:	str	r3, [sp, #4]
   1924c:	b	18f40 <__assert_fail@plt+0x739c>
   19250:	bl	11b80 <close@plt>
   19254:	ldr	r3, [r5, #48]	; 0x30
   19258:	b	18de8 <__assert_fail@plt+0x7244>
   1925c:	mov	r2, #3
   19260:	movw	r1, #1030	; 0x406
   19264:	bl	309fc <__assert_fail@plt+0x1ee58>
   19268:	str	r0, [sp, #60]	; 0x3c
   1926c:	b	18d98 <__assert_fail@plt+0x71f4>
   19270:	ldr	r3, [sp, #32]
   19274:	cmp	r3, #3
   19278:	bne	19244 <__assert_fail@plt+0x76a0>
   1927c:	mov	r3, #4
   19280:	strh	r3, [r9, #56]	; 0x38
   19284:	bl	119b8 <__errno_location@plt>
   19288:	ldr	r3, [r0]
   1928c:	str	r3, [r9, #32]
   19290:	b	18f40 <__assert_fail@plt+0x739c>
   19294:	mov	r3, #4
   19298:	str	r4, [sp, #4]
   1929c:	strh	r3, [r9, #56]	; 0x38
   192a0:	bl	119b8 <__errno_location@plt>
   192a4:	ldr	r3, [r0]
   192a8:	str	r3, [r9, #32]
   192ac:	b	18f40 <__assert_fail@plt+0x739c>
   192b0:	ldr	r3, [r5, #48]	; 0x30
   192b4:	mov	r2, #7
   192b8:	mov	r1, #0
   192bc:	strh	r2, [r9, #56]	; 0x38
   192c0:	ldr	r0, [sp, #4]
   192c4:	str	r1, [sp, #4]
   192c8:	orr	r3, r3, #8192	; 0x2000
   192cc:	str	r3, [r5, #48]	; 0x30
   192d0:	bl	1806c <__assert_fail@plt+0x64c8>
   192d4:	b	18f40 <__assert_fail@plt+0x739c>
   192d8:	movw	r3, #40864	; 0x9fa0
   192dc:	cmp	r0, r3
   192e0:	beq	192f4 <__assert_fail@plt+0x7750>
   192e4:	movw	r3, #16719	; 0x414f
   192e8:	movt	r3, #21318	; 0x5346
   192ec:	cmp	r0, r3
   192f0:	bne	18fb0 <__assert_fail@plt+0x740c>
   192f4:	ldr	r0, [sp, #60]	; 0x3c
   192f8:	b	18d78 <__assert_fail@plt+0x71d4>
   192fc:	ldr	r9, [sp, #8]
   19300:	mov	r0, r4
   19304:	bl	17ac8 <__assert_fail@plt+0x5f24>
   19308:	ldr	r0, [sp, #4]
   1930c:	bl	1806c <__assert_fail@plt+0x64c8>
   19310:	ldr	r0, [r9, #12]
   19314:	bl	11b98 <closedir@plt>
   19318:	ldr	r3, [r5, #48]	; 0x30
   1931c:	mov	r2, #0
   19320:	mov	r0, #7
   19324:	mov	r1, #36	; 0x24
   19328:	str	r2, [sp, #4]
   1932c:	str	r2, [r9, #12]
   19330:	strh	r0, [r9, #56]	; 0x38
   19334:	orr	r3, r3, #8192	; 0x2000
   19338:	str	r3, [r5, #48]	; 0x30
   1933c:	str	r1, [r8]
   19340:	b	18f40 <__assert_fail@plt+0x739c>
   19344:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19348:	bic	r5, r1, #4080	; 0xff0
   1934c:	bic	r5, r5, #15
   19350:	strd	r6, [sp, #8]
   19354:	cmp	r5, #0
   19358:	strd	r8, [sp, #16]
   1935c:	strd	sl, [sp, #24]
   19360:	str	lr, [sp, #32]
   19364:	sub	sp, sp, #12
   19368:	bne	19684 <__assert_fail@plt+0x7ae0>
   1936c:	and	r3, r1, #516	; 0x204
   19370:	mov	r7, r1
   19374:	cmp	r3, #516	; 0x204
   19378:	beq	19620 <__assert_fail@plt+0x7a7c>
   1937c:	ands	r5, r1, #18
   19380:	beq	19620 <__assert_fail@plt+0x7a7c>
   19384:	mov	r6, r0
   19388:	mov	r1, #96	; 0x60
   1938c:	mov	r0, #1
   19390:	mov	r9, r2
   19394:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   19398:	subs	r5, r0, #0
   1939c:	beq	195d8 <__assert_fail@plt+0x7a34>
   193a0:	tst	r7, #2
   193a4:	mvn	r2, #99	; 0x63
   193a8:	bicne	r3, r7, #512	; 0x200
   193ac:	orrne	r3, r3, #4
   193b0:	streq	r7, [r5, #48]	; 0x30
   193b4:	str	r2, [r5, #32]
   193b8:	strne	r3, [r5, #48]	; 0x30
   193bc:	ldr	r3, [r6]
   193c0:	str	r9, [r5, #44]	; 0x2c
   193c4:	cmp	r3, #0
   193c8:	beq	19698 <__assert_fail@plt+0x7af4>
   193cc:	mov	r8, r6
   193d0:	mov	r4, #0
   193d4:	mov	r0, r3
   193d8:	bl	11988 <strlen@plt>
   193dc:	ldr	r3, [r8, #4]!
   193e0:	cmp	r4, r0
   193e4:	movcc	r4, r0
   193e8:	cmp	r3, #0
   193ec:	bne	193d4 <__assert_fail@plt+0x7830>
   193f0:	add	r2, r4, #1
   193f4:	cmp	r2, #4096	; 0x1000
   193f8:	movcc	r2, #4096	; 0x1000
   193fc:	add	r1, r5, #36	; 0x24
   19400:	add	r0, r5, #24
   19404:	bl	18468 <__assert_fail@plt+0x68c4>
   19408:	subs	fp, r0, #0
   1940c:	beq	19610 <__assert_fail@plt+0x7a6c>
   19410:	ldr	sl, [r6]
   19414:	cmp	sl, #0
   19418:	beq	19674 <__assert_fail@plt+0x7ad0>
   1941c:	movw	r1, #11844	; 0x2e44
   19420:	movt	r1, #3
   19424:	mov	r2, #0
   19428:	mov	r0, r5
   1942c:	bl	17fdc <__assert_fail@plt+0x6438>
   19430:	subs	sl, r0, #0
   19434:	beq	19608 <__assert_fail@plt+0x7a64>
   19438:	mvn	r3, #0
   1943c:	cmp	r9, #0
   19440:	ldr	r4, [r6]
   19444:	str	r3, [sl, #48]	; 0x30
   19448:	beq	19454 <__assert_fail@plt+0x78b0>
   1944c:	ldr	fp, [r5, #48]	; 0x30
   19450:	ubfx	fp, fp, #10, #1
   19454:	cmp	r4, #0
   19458:	beq	196d4 <__assert_fail@plt+0x7b30>
   1945c:	eor	r7, r7, #2048	; 0x800
   19460:	mov	r3, #0
   19464:	ubfx	r2, r7, #11, #1
   19468:	mov	r8, r3
   1946c:	mov	r7, r3
   19470:	strd	r2, [sp]
   19474:	b	194ac <__assert_fail@plt+0x7908>
   19478:	mov	r3, #11
   1947c:	mov	r2, #2
   19480:	cmp	r9, r1
   19484:	strh	r3, [r4, #56]	; 0x38
   19488:	mov	r3, #0
   1948c:	strd	r2, [r4, #112]	; 0x70
   19490:	beq	19660 <__assert_fail@plt+0x7abc>
   19494:	str	r7, [r4, #8]
   19498:	mov	r7, r4
   1949c:	ldr	r4, [r6, #4]!
   194a0:	add	r8, r8, #1
   194a4:	cmp	r4, #0
   194a8:	beq	19558 <__assert_fail@plt+0x79b4>
   194ac:	mov	r0, r4
   194b0:	bl	11988 <strlen@plt>
   194b4:	ldr	r3, [sp]
   194b8:	mov	r2, r0
   194bc:	cmp	r0, #2
   194c0:	movls	r3, #0
   194c4:	andhi	r3, r3, #1
   194c8:	cmp	r3, #0
   194cc:	bne	19630 <__assert_fail@plt+0x7a8c>
   194d0:	mov	r1, r4
   194d4:	mov	r0, r5
   194d8:	bl	17fdc <__assert_fail@plt+0x6438>
   194dc:	subs	r4, r0, #0
   194e0:	beq	195f8 <__assert_fail@plt+0x7a54>
   194e4:	add	r2, r4, #168	; 0xa8
   194e8:	cmp	r7, #0
   194ec:	moveq	r3, #0
   194f0:	andne	r3, fp, #1
   194f4:	str	sl, [r4, #4]
   194f8:	mov	r1, #0
   194fc:	cmp	r3, #0
   19500:	str	r2, [r4, #24]
   19504:	str	r1, [r4, #48]	; 0x30
   19508:	bne	19478 <__assert_fail@plt+0x78d4>
   1950c:	mov	r2, r4
   19510:	ldr	r0, [r5, #32]
   19514:	ldr	r1, [r5, #48]	; 0x30
   19518:	bl	1830c <__assert_fail@plt+0x6768>
   1951c:	cmp	r9, #0
   19520:	strh	r0, [r4, #56]	; 0x38
   19524:	bne	19494 <__assert_fail@plt+0x78f0>
   19528:	cmp	r7, #0
   1952c:	str	r9, [r4, #8]
   19530:	moveq	r7, r4
   19534:	streq	r4, [sp, #4]
   19538:	beq	1949c <__assert_fail@plt+0x78f8>
   1953c:	ldr	r3, [sp, #4]
   19540:	str	r4, [sp, #4]
   19544:	str	r4, [r3, #8]
   19548:	ldr	r4, [r6, #4]!
   1954c:	add	r8, r8, #1
   19550:	cmp	r4, #0
   19554:	bne	194ac <__assert_fail@plt+0x7908>
   19558:	cmp	r9, #0
   1955c:	cmpne	r8, #1
   19560:	bls	19578 <__assert_fail@plt+0x79d4>
   19564:	mov	r1, r7
   19568:	mov	r2, r8
   1956c:	mov	r0, r5
   19570:	bl	17ee8 <__assert_fail@plt+0x6344>
   19574:	mov	r7, r0
   19578:	movw	r1, #11844	; 0x2e44
   1957c:	movt	r1, #3
   19580:	mov	r2, #0
   19584:	mov	r0, r5
   19588:	bl	17fdc <__assert_fail@plt+0x6438>
   1958c:	cmp	r0, #0
   19590:	str	r0, [r5]
   19594:	beq	195f8 <__assert_fail@plt+0x7a54>
   19598:	mov	r2, #1
   1959c:	mov	r3, #9
   195a0:	str	r7, [r0, #8]
   195a4:	add	r1, r5, #56	; 0x38
   195a8:	str	r2, [r0, #48]	; 0x30
   195ac:	strh	r3, [r0, #56]	; 0x38
   195b0:	ldr	r0, [r5, #48]	; 0x30
   195b4:	bl	184f8 <__assert_fail@plt+0x6954>
   195b8:	cmp	r0, #0
   195bc:	beq	195f8 <__assert_fail@plt+0x7a54>
   195c0:	ldr	r1, [r5, #48]	; 0x30
   195c4:	tst	r1, #516	; 0x204
   195c8:	beq	196a0 <__assert_fail@plt+0x7afc>
   195cc:	mvn	r1, #0
   195d0:	add	r0, r5, #60	; 0x3c
   195d4:	bl	1be6c <__assert_fail@plt+0xa2c8>
   195d8:	mov	r0, r5
   195dc:	add	sp, sp, #12
   195e0:	ldrd	r4, [sp]
   195e4:	ldrd	r6, [sp, #8]
   195e8:	ldrd	r8, [sp, #16]
   195ec:	ldrd	sl, [sp, #24]
   195f0:	add	sp, sp, #32
   195f4:	pop	{pc}		; (ldr pc, [sp], #4)
   195f8:	mov	r0, r7
   195fc:	bl	1806c <__assert_fail@plt+0x64c8>
   19600:	mov	r0, sl
   19604:	bl	17ac8 <__assert_fail@plt+0x5f24>
   19608:	ldr	r0, [r5, #24]
   1960c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   19610:	mov	r0, r5
   19614:	mov	r5, #0
   19618:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1961c:	b	195d8 <__assert_fail@plt+0x7a34>
   19620:	bl	119b8 <__errno_location@plt>
   19624:	mov	r3, #22
   19628:	str	r3, [r0]
   1962c:	b	195d8 <__assert_fail@plt+0x7a34>
   19630:	sub	r3, r0, #1
   19634:	ldrb	r1, [r4, r3]
   19638:	add	r3, r4, r3
   1963c:	cmp	r1, #47	; 0x2f
   19640:	bne	194d0 <__assert_fail@plt+0x792c>
   19644:	ldrb	r1, [r3, #-1]!
   19648:	cmp	r1, #47	; 0x2f
   1964c:	bne	194d0 <__assert_fail@plt+0x792c>
   19650:	sub	r2, r2, #1
   19654:	cmp	r2, #1
   19658:	bne	19644 <__assert_fail@plt+0x7aa0>
   1965c:	b	194d0 <__assert_fail@plt+0x792c>
   19660:	ldr	r3, [sp, #4]
   19664:	str	r4, [sp, #4]
   19668:	str	r9, [r4, #8]
   1966c:	str	r4, [r3, #8]
   19670:	b	19548 <__assert_fail@plt+0x79a4>
   19674:	cmp	r9, #0
   19678:	beq	196cc <__assert_fail@plt+0x7b28>
   1967c:	mov	r4, sl
   19680:	b	1944c <__assert_fail@plt+0x78a8>
   19684:	bl	119b8 <__errno_location@plt>
   19688:	mov	r3, #22
   1968c:	mov	r5, #0
   19690:	str	r3, [r0]
   19694:	b	195d8 <__assert_fail@plt+0x7a34>
   19698:	mov	r2, #4096	; 0x1000
   1969c:	b	193fc <__assert_fail@plt+0x7858>
   196a0:	movw	r2, #9828	; 0x2664
   196a4:	movt	r2, #3
   196a8:	ldr	r0, [r5, #32]
   196ac:	bl	18588 <__assert_fail@plt+0x69e4>
   196b0:	cmp	r0, #0
   196b4:	str	r0, [r5, #28]
   196b8:	bge	195cc <__assert_fail@plt+0x7a28>
   196bc:	ldr	r3, [r5, #48]	; 0x30
   196c0:	orr	r3, r3, #4
   196c4:	str	r3, [r5, #48]	; 0x30
   196c8:	b	195cc <__assert_fail@plt+0x7a28>
   196cc:	mov	r7, sl
   196d0:	b	19578 <__assert_fail@plt+0x79d4>
   196d4:	mov	r7, r4
   196d8:	b	19578 <__assert_fail@plt+0x79d4>
   196dc:	ldr	r3, [r0]
   196e0:	strd	r4, [sp, #-16]!
   196e4:	mov	r5, r0
   196e8:	str	r6, [sp, #8]
   196ec:	str	lr, [sp, #12]
   196f0:	cmp	r3, #0
   196f4:	beq	19730 <__assert_fail@plt+0x7b8c>
   196f8:	ldr	r2, [r3, #48]	; 0x30
   196fc:	cmp	r2, #0
   19700:	blt	19850 <__assert_fail@plt+0x7cac>
   19704:	ldr	r4, [r3, #8]
   19708:	mov	r0, r3
   1970c:	cmp	r4, #0
   19710:	ldreq	r4, [r3, #4]
   19714:	bl	17ac8 <__assert_fail@plt+0x5f24>
   19718:	ldr	r2, [r4, #48]	; 0x30
   1971c:	mov	r3, r4
   19720:	cmp	r2, #0
   19724:	bge	19704 <__assert_fail@plt+0x7b60>
   19728:	mov	r0, r4
   1972c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   19730:	ldr	r0, [r5, #4]
   19734:	cmp	r0, #0
   19738:	beq	19740 <__assert_fail@plt+0x7b9c>
   1973c:	bl	1806c <__assert_fail@plt+0x64c8>
   19740:	ldr	r0, [r5, #8]
   19744:	bl	17ac8 <__assert_fail@plt+0x5f24>
   19748:	ldr	r0, [r5, #24]
   1974c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   19750:	ldr	r3, [r5, #48]	; 0x30
   19754:	tst	r3, #512	; 0x200
   19758:	bne	197c4 <__assert_fail@plt+0x7c20>
   1975c:	tst	r3, #4
   19760:	beq	197f0 <__assert_fail@plt+0x7c4c>
   19764:	mov	r4, #0
   19768:	add	r0, r5, #60	; 0x3c
   1976c:	bl	180b4 <__assert_fail@plt+0x6510>
   19770:	ldr	r0, [r5, #52]	; 0x34
   19774:	cmp	r0, #0
   19778:	beq	19780 <__assert_fail@plt+0x7bdc>
   1977c:	bl	1acec <__assert_fail@plt+0x9148>
   19780:	ldr	r3, [r5, #48]	; 0x30
   19784:	movw	r2, #258	; 0x102
   19788:	ldr	r0, [r5, #56]	; 0x38
   1978c:	tst	r2, r3
   19790:	beq	197e8 <__assert_fail@plt+0x7c44>
   19794:	cmp	r0, #0
   19798:	beq	197a0 <__assert_fail@plt+0x7bfc>
   1979c:	bl	1acec <__assert_fail@plt+0x9148>
   197a0:	mov	r0, r5
   197a4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   197a8:	cmp	r4, #0
   197ac:	bne	19858 <__assert_fail@plt+0x7cb4>
   197b0:	mov	r0, r4
   197b4:	ldrd	r4, [sp]
   197b8:	ldr	r6, [sp, #8]
   197bc:	add	sp, sp, #12
   197c0:	pop	{pc}		; (ldr pc, [sp], #4)
   197c4:	ldr	r0, [r5, #32]
   197c8:	cmp	r0, #0
   197cc:	blt	19764 <__assert_fail@plt+0x7bc0>
   197d0:	bl	11b80 <close@plt>
   197d4:	cmp	r0, #0
   197d8:	beq	19764 <__assert_fail@plt+0x7bc0>
   197dc:	bl	119b8 <__errno_location@plt>
   197e0:	ldr	r4, [r0]
   197e4:	b	19768 <__assert_fail@plt+0x7bc4>
   197e8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   197ec:	b	197a0 <__assert_fail@plt+0x7bfc>
   197f0:	ldr	r0, [r5, #28]
   197f4:	bl	11ae4 <fchdir@plt>
   197f8:	cmp	r0, #0
   197fc:	bne	19820 <__assert_fail@plt+0x7c7c>
   19800:	ldr	r0, [r5, #28]
   19804:	bl	11b80 <close@plt>
   19808:	cmp	r0, #0
   1980c:	beq	19764 <__assert_fail@plt+0x7bc0>
   19810:	bl	119b8 <__errno_location@plt>
   19814:	mov	r6, r0
   19818:	ldr	r4, [r6]
   1981c:	b	19768 <__assert_fail@plt+0x7bc4>
   19820:	bl	119b8 <__errno_location@plt>
   19824:	mov	r6, r0
   19828:	ldr	r0, [r5, #28]
   1982c:	ldr	r4, [r6]
   19830:	bl	11b80 <close@plt>
   19834:	adds	r3, r0, #0
   19838:	movne	r3, #1
   1983c:	cmp	r4, #0
   19840:	movne	r3, #0
   19844:	cmp	r3, #0
   19848:	beq	19768 <__assert_fail@plt+0x7bc4>
   1984c:	b	19818 <__assert_fail@plt+0x7c74>
   19850:	mov	r4, r3
   19854:	b	19728 <__assert_fail@plt+0x7b84>
   19858:	bl	119b8 <__errno_location@plt>
   1985c:	str	r4, [r0]
   19860:	mvn	r4, #0
   19864:	b	197b0 <__assert_fail@plt+0x7c0c>
   19868:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1986c:	ldr	r4, [r0]
   19870:	strd	r6, [sp, #8]
   19874:	str	r8, [sp, #16]
   19878:	str	lr, [sp, #20]
   1987c:	cmp	r4, #0
   19880:	beq	199a0 <__assert_fail@plt+0x7dfc>
   19884:	ldr	r1, [r0, #48]	; 0x30
   19888:	ands	r3, r1, #8192	; 0x2000
   1988c:	bne	199a0 <__assert_fail@plt+0x7dfc>
   19890:	ldrh	r2, [r4, #60]	; 0x3c
   19894:	mov	r8, r0
   19898:	mov	r0, #3
   1989c:	strh	r0, [r4, #60]	; 0x3c
   198a0:	cmp	r2, #1
   198a4:	beq	19c4c <__assert_fail@plt+0x80a8>
   198a8:	cmp	r2, #2
   198ac:	ldrh	r3, [r4, #56]	; 0x38
   198b0:	beq	199bc <__assert_fail@plt+0x7e18>
   198b4:	cmp	r3, #1
   198b8:	bne	198e8 <__assert_fail@plt+0x7d44>
   198bc:	b	19a68 <__assert_fail@plt+0x7ec4>
   198c0:	mov	r0, r4
   198c4:	str	r5, [r8]
   198c8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   198cc:	ldr	r4, [r5, #48]	; 0x30
   198d0:	cmp	r4, #0
   198d4:	beq	19ab0 <__assert_fail@plt+0x7f0c>
   198d8:	ldrh	r3, [r5, #60]	; 0x3c
   198dc:	mov	r4, r5
   198e0:	cmp	r3, #4
   198e4:	bne	19b68 <__assert_fail@plt+0x7fc4>
   198e8:	ldr	r5, [r4, #8]
   198ec:	cmp	r5, #0
   198f0:	bne	198c0 <__assert_fail@plt+0x7d1c>
   198f4:	ldr	r6, [r4, #4]
   198f8:	ldr	r3, [r6, #12]
   198fc:	cmp	r3, #0
   19900:	bne	19d70 <__assert_fail@plt+0x81cc>
   19904:	mov	r0, r4
   19908:	str	r6, [r8]
   1990c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   19910:	ldr	r3, [r6, #48]	; 0x30
   19914:	cmn	r3, #1
   19918:	beq	19d14 <__assert_fail@plt+0x8170>
   1991c:	ldrh	r3, [r6, #56]	; 0x38
   19920:	cmp	r3, #11
   19924:	beq	19c48 <__assert_fail@plt+0x80a4>
   19928:	ldr	r2, [r8, #24]
   1992c:	mov	r1, #0
   19930:	ldr	r3, [r6, #40]	; 0x28
   19934:	strb	r1, [r2, r3]
   19938:	ldr	r3, [r6, #48]	; 0x30
   1993c:	cmp	r3, r1
   19940:	beq	19d34 <__assert_fail@plt+0x8190>
   19944:	ldrh	r3, [r6, #58]	; 0x3a
   19948:	tst	r3, #2
   1994c:	bne	19cc8 <__assert_fail@plt+0x8124>
   19950:	tst	r3, #1
   19954:	beq	19e08 <__assert_fail@plt+0x8264>
   19958:	ldrh	r3, [r6, #56]	; 0x38
   1995c:	ldr	r0, [r8, #48]	; 0x30
   19960:	cmp	r3, #2
   19964:	beq	19994 <__assert_fail@plt+0x7df0>
   19968:	ldr	r3, [r6, #32]
   1996c:	cmp	r3, #0
   19970:	movne	r3, #7
   19974:	strhne	r3, [r6, #56]	; 0x38
   19978:	bne	19994 <__assert_fail@plt+0x7df0>
   1997c:	mov	r3, #6
   19980:	mov	r2, r6
   19984:	add	r1, r8, #56	; 0x38
   19988:	strh	r3, [r6, #56]	; 0x38
   1998c:	bl	188a8 <__assert_fail@plt+0x6d04>
   19990:	ldr	r0, [r8, #48]	; 0x30
   19994:	tst	r0, #8192	; 0x2000
   19998:	moveq	r4, r6
   1999c:	beq	199a4 <__assert_fail@plt+0x7e00>
   199a0:	mov	r4, #0
   199a4:	mov	r0, r4
   199a8:	ldrd	r4, [sp]
   199ac:	ldrd	r6, [sp, #8]
   199b0:	ldr	r8, [sp, #16]
   199b4:	add	sp, sp, #20
   199b8:	pop	{pc}		; (ldr pc, [sp], #4)
   199bc:	sub	r2, r3, #12
   199c0:	cmp	r2, #1
   199c4:	bls	19c04 <__assert_fail@plt+0x8060>
   199c8:	cmp	r3, #1
   199cc:	bne	198e8 <__assert_fail@plt+0x7d44>
   199d0:	tst	r1, #64	; 0x40
   199d4:	beq	199ec <__assert_fail@plt+0x7e48>
   199d8:	ldrd	r2, [r8, #16]
   199dc:	ldrd	r6, [r4, #64]	; 0x40
   199e0:	cmp	r7, r3
   199e4:	cmpeq	r6, r2
   199e8:	bne	19a70 <__assert_fail@plt+0x7ecc>
   199ec:	ldr	r0, [r8, #4]
   199f0:	cmp	r0, #0
   199f4:	beq	19c74 <__assert_fail@plt+0x80d0>
   199f8:	tst	r1, #4096	; 0x1000
   199fc:	bne	19c60 <__assert_fail@plt+0x80bc>
   19a00:	mvn	r2, #0
   19a04:	mov	r1, r4
   19a08:	ldr	r3, [r4, #24]
   19a0c:	mov	r0, r8
   19a10:	bl	185b8 <__assert_fail@plt+0x6a14>
   19a14:	cmp	r0, #0
   19a18:	beq	19cfc <__assert_fail@plt+0x8158>
   19a1c:	bl	119b8 <__errno_location@plt>
   19a20:	ldrh	r3, [r4, #58]	; 0x3a
   19a24:	ldr	r2, [r0]
   19a28:	orr	r3, r3, #1
   19a2c:	str	r2, [r4, #32]
   19a30:	strh	r3, [r4, #58]	; 0x3a
   19a34:	ldr	r4, [r8, #4]
   19a38:	cmp	r4, #0
   19a3c:	beq	19a5c <__assert_fail@plt+0x7eb8>
   19a40:	mov	r3, r4
   19a44:	ldr	r2, [r3, #4]
   19a48:	ldr	r2, [r2, #24]
   19a4c:	str	r2, [r3, #24]
   19a50:	ldr	r3, [r3, #8]
   19a54:	cmp	r3, #0
   19a58:	bne	19a44 <__assert_fail@plt+0x7ea0>
   19a5c:	mov	r3, #0
   19a60:	str	r3, [r8, #4]
   19a64:	b	19b70 <__assert_fail@plt+0x7fcc>
   19a68:	cmp	r2, #4
   19a6c:	bne	199d0 <__assert_fail@plt+0x7e2c>
   19a70:	ldrh	r3, [r4, #58]	; 0x3a
   19a74:	tst	r3, #2
   19a78:	bne	19db0 <__assert_fail@plt+0x820c>
   19a7c:	ldr	r0, [r8, #4]
   19a80:	cmp	r0, #0
   19a84:	beq	19a94 <__assert_fail@plt+0x7ef0>
   19a88:	bl	1806c <__assert_fail@plt+0x64c8>
   19a8c:	mov	r3, #0
   19a90:	str	r3, [r8, #4]
   19a94:	mov	r3, #6
   19a98:	mov	r2, r4
   19a9c:	ldr	r0, [r8, #48]	; 0x30
   19aa0:	add	r1, r8, #56	; 0x38
   19aa4:	strh	r3, [r4, #56]	; 0x38
   19aa8:	bl	188a8 <__assert_fail@plt+0x6d04>
   19aac:	b	199a4 <__assert_fail@plt+0x7e00>
   19ab0:	mov	r0, r8
   19ab4:	bl	182a8 <__assert_fail@plt+0x6704>
   19ab8:	ldr	r3, [r8, #48]	; 0x30
   19abc:	cmp	r0, #0
   19ac0:	orrne	r3, r3, #8192	; 0x2000
   19ac4:	strne	r3, [r8, #48]	; 0x30
   19ac8:	bne	199a4 <__assert_fail@plt+0x7e00>
   19acc:	movw	r2, #258	; 0x102
   19ad0:	ldr	r0, [r8, #56]	; 0x38
   19ad4:	tst	r2, r3
   19ad8:	beq	19da8 <__assert_fail@plt+0x8204>
   19adc:	cmp	r0, #0
   19ae0:	beq	19ae8 <__assert_fail@plt+0x7f44>
   19ae4:	bl	1acec <__assert_fail@plt+0x9148>
   19ae8:	ldr	r2, [r5, #52]	; 0x34
   19aec:	add	r4, r5, #168	; 0xa8
   19af0:	mov	r1, r4
   19af4:	ldr	r0, [r8, #24]
   19af8:	str	r2, [r5, #40]	; 0x28
   19afc:	add	r2, r2, #1
   19b00:	bl	11748 <memmove@plt>
   19b04:	mov	r0, r4
   19b08:	mov	r1, #47	; 0x2f
   19b0c:	bl	11a78 <strrchr@plt>
   19b10:	cmp	r0, #0
   19b14:	beq	19b44 <__assert_fail@plt+0x7fa0>
   19b18:	cmp	r4, r0
   19b1c:	beq	19d04 <__assert_fail@plt+0x8160>
   19b20:	add	r6, r0, #1
   19b24:	mov	r0, r6
   19b28:	bl	11988 <strlen@plt>
   19b2c:	mov	r7, r0
   19b30:	mov	r1, r6
   19b34:	mov	r0, r4
   19b38:	add	r2, r7, #1
   19b3c:	bl	11748 <memmove@plt>
   19b40:	str	r7, [r5, #52]	; 0x34
   19b44:	ldr	r3, [r8, #24]
   19b48:	add	r1, r8, #56	; 0x38
   19b4c:	mov	r4, r5
   19b50:	ldr	r0, [r8, #48]	; 0x30
   19b54:	str	r3, [r5, #24]
   19b58:	str	r3, [r5, #28]
   19b5c:	bl	184f8 <__assert_fail@plt+0x6954>
   19b60:	ldrh	r0, [r5, #56]	; 0x38
   19b64:	b	19bb4 <__assert_fail@plt+0x8010>
   19b68:	cmp	r3, #2
   19b6c:	beq	19dd8 <__assert_fail@plt+0x8234>
   19b70:	ldr	r0, [r4, #4]
   19b74:	mov	ip, #47	; 0x2f
   19b78:	add	r1, r4, #168	; 0xa8
   19b7c:	ldr	r3, [r8, #24]
   19b80:	ldr	lr, [r0, #28]
   19b84:	ldr	r2, [r0, #40]	; 0x28
   19b88:	sub	r0, r2, #1
   19b8c:	ldrb	lr, [lr, r0]
   19b90:	cmp	lr, ip
   19b94:	movne	r0, r2
   19b98:	strb	ip, [r3, r0]
   19b9c:	add	r0, r3, r0
   19ba0:	ldr	r2, [r4, #52]	; 0x34
   19ba4:	add	r0, r0, #1
   19ba8:	add	r2, r2, #1
   19bac:	bl	11748 <memmove@plt>
   19bb0:	ldrh	r0, [r4, #56]	; 0x38
   19bb4:	cmp	r0, #11
   19bb8:	str	r4, [r8]
   19bbc:	beq	19c2c <__assert_fail@plt+0x8088>
   19bc0:	cmp	r0, #1
   19bc4:	bne	199a4 <__assert_fail@plt+0x7e00>
   19bc8:	ldr	r3, [r4, #48]	; 0x30
   19bcc:	add	r1, r8, #56	; 0x38
   19bd0:	ldr	r0, [r8, #48]	; 0x30
   19bd4:	cmp	r3, #0
   19bd8:	ldrdeq	r2, [r4, #64]	; 0x40
   19bdc:	strdeq	r2, [r8, #16]
   19be0:	mov	r2, r4
   19be4:	bl	187d4 <__assert_fail@plt+0x6c30>
   19be8:	subs	r5, r0, #0
   19bec:	bne	199a4 <__assert_fail@plt+0x7e00>
   19bf0:	bl	119b8 <__errno_location@plt>
   19bf4:	mov	r3, #12
   19bf8:	mov	r4, r5
   19bfc:	str	r3, [r0]
   19c00:	b	199a4 <__assert_fail@plt+0x7e00>
   19c04:	mov	r3, #1
   19c08:	mov	r2, r4
   19c0c:	ldr	r0, [r8, #32]
   19c10:	bl	1830c <__assert_fail@plt+0x6768>
   19c14:	cmp	r0, #1
   19c18:	strh	r0, [r4, #56]	; 0x38
   19c1c:	beq	19e50 <__assert_fail@plt+0x82ac>
   19c20:	cmp	r0, #11
   19c24:	str	r4, [r8]
   19c28:	bne	199a4 <__assert_fail@plt+0x7e00>
   19c2c:	ldrd	r2, [r4, #112]	; 0x70
   19c30:	cmp	r3, #0
   19c34:	cmpeq	r2, #2
   19c38:	beq	19dbc <__assert_fail@plt+0x8218>
   19c3c:	cmp	r3, #0
   19c40:	cmpeq	r2, #1
   19c44:	beq	199a4 <__assert_fail@plt+0x7e00>
   19c48:	bl	11b68 <abort@plt>
   19c4c:	mov	r2, r4
   19c50:	ldr	r0, [r8, #32]
   19c54:	bl	1830c <__assert_fail@plt+0x6768>
   19c58:	strh	r0, [r4, #56]	; 0x38
   19c5c:	b	199a4 <__assert_fail@plt+0x7e00>
   19c60:	bic	r1, r1, #4096	; 0x1000
   19c64:	str	r1, [r8, #48]	; 0x30
   19c68:	bl	1806c <__assert_fail@plt+0x64c8>
   19c6c:	mov	r3, #0
   19c70:	str	r3, [r8, #4]
   19c74:	mov	r1, #3
   19c78:	mov	r0, r8
   19c7c:	bl	18974 <__assert_fail@plt+0x6dd0>
   19c80:	cmp	r0, #0
   19c84:	str	r0, [r8, #4]
   19c88:	movne	r4, r0
   19c8c:	bne	19a5c <__assert_fail@plt+0x7eb8>
   19c90:	ldr	r0, [r8, #48]	; 0x30
   19c94:	tst	r0, #8192	; 0x2000
   19c98:	bne	199a0 <__assert_fail@plt+0x7dfc>
   19c9c:	ldr	r3, [r4, #32]
   19ca0:	cmp	r3, #0
   19ca4:	beq	19cb8 <__assert_fail@plt+0x8114>
   19ca8:	ldrh	r3, [r4, #56]	; 0x38
   19cac:	cmp	r3, #4
   19cb0:	movne	r3, #7
   19cb4:	strhne	r3, [r4, #56]	; 0x38
   19cb8:	add	r1, r8, #56	; 0x38
   19cbc:	mov	r2, r4
   19cc0:	bl	188a8 <__assert_fail@plt+0x6d04>
   19cc4:	b	199a4 <__assert_fail@plt+0x7e00>
   19cc8:	ldr	r3, [r8, #48]	; 0x30
   19ccc:	ldr	r0, [r6, #36]	; 0x24
   19cd0:	tst	r3, #4
   19cd4:	bne	19cf4 <__assert_fail@plt+0x8150>
   19cd8:	tst	r3, #512	; 0x200
   19cdc:	beq	19e3c <__assert_fail@plt+0x8298>
   19ce0:	mov	r1, r0
   19ce4:	mov	r2, #1
   19ce8:	mov	r0, r8
   19cec:	bl	18218 <__assert_fail@plt+0x6674>
   19cf0:	ldr	r0, [r6, #36]	; 0x24
   19cf4:	bl	11b80 <close@plt>
   19cf8:	b	19958 <__assert_fail@plt+0x7db4>
   19cfc:	ldr	r4, [r8, #4]
   19d00:	b	19a5c <__assert_fail@plt+0x7eb8>
   19d04:	ldrb	r3, [r4, #1]
   19d08:	cmp	r3, #0
   19d0c:	beq	19b44 <__assert_fail@plt+0x7fa0>
   19d10:	b	19b20 <__assert_fail@plt+0x7f7c>
   19d14:	mov	r0, r6
   19d18:	bl	17ac8 <__assert_fail@plt+0x5f24>
   19d1c:	bl	119b8 <__errno_location@plt>
   19d20:	mov	r3, #0
   19d24:	mov	r4, r3
   19d28:	str	r3, [r0]
   19d2c:	str	r3, [r8]
   19d30:	b	199a4 <__assert_fail@plt+0x7e00>
   19d34:	mov	r0, r8
   19d38:	bl	182a8 <__assert_fail@plt+0x6704>
   19d3c:	cmp	r0, #0
   19d40:	beq	19958 <__assert_fail@plt+0x7db4>
   19d44:	bl	119b8 <__errno_location@plt>
   19d48:	ldr	r3, [r8, #48]	; 0x30
   19d4c:	ldr	r2, [r0]
   19d50:	orr	r3, r3, #8192	; 0x2000
   19d54:	str	r2, [r6, #32]
   19d58:	str	r3, [r8, #48]	; 0x30
   19d5c:	ldrh	r3, [r6, #56]	; 0x38
   19d60:	cmp	r3, #2
   19d64:	beq	199a0 <__assert_fail@plt+0x7dfc>
   19d68:	ldr	r0, [r8, #48]	; 0x30
   19d6c:	b	19968 <__assert_fail@plt+0x7dc4>
   19d70:	ldr	r2, [r8, #24]
   19d74:	mov	r1, #3
   19d78:	mov	r0, r8
   19d7c:	ldr	r3, [r6, #40]	; 0x28
   19d80:	str	r6, [r8]
   19d84:	strb	r5, [r2, r3]
   19d88:	bl	18974 <__assert_fail@plt+0x6dd0>
   19d8c:	subs	r3, r0, #0
   19d90:	bne	19e2c <__assert_fail@plt+0x8288>
   19d94:	ldr	r3, [r8, #48]	; 0x30
   19d98:	tst	r3, #8192	; 0x2000
   19d9c:	bne	199a0 <__assert_fail@plt+0x7dfc>
   19da0:	ldr	r6, [r4, #4]
   19da4:	b	19904 <__assert_fail@plt+0x7d60>
   19da8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   19dac:	b	19ae8 <__assert_fail@plt+0x7f44>
   19db0:	ldr	r0, [r4, #36]	; 0x24
   19db4:	bl	11b80 <close@plt>
   19db8:	b	19a7c <__assert_fail@plt+0x7ed8>
   19dbc:	mov	r3, #0
   19dc0:	mov	r2, r4
   19dc4:	ldr	r0, [r8, #32]
   19dc8:	ldr	r1, [r8, #48]	; 0x30
   19dcc:	bl	1830c <__assert_fail@plt+0x6768>
   19dd0:	strh	r0, [r4, #56]	; 0x38
   19dd4:	b	19bc0 <__assert_fail@plt+0x801c>
   19dd8:	mov	r3, #1
   19ddc:	mov	r2, r5
   19de0:	ldr	r0, [r8, #32]
   19de4:	ldr	r1, [r8, #48]	; 0x30
   19de8:	bl	1830c <__assert_fail@plt+0x6768>
   19dec:	cmp	r0, #1
   19df0:	strh	r0, [r5, #56]	; 0x38
   19df4:	beq	19e90 <__assert_fail@plt+0x82ec>
   19df8:	mov	r3, #3
   19dfc:	mov	r4, r5
   19e00:	strh	r3, [r5, #60]	; 0x3c
   19e04:	b	19b70 <__assert_fail@plt+0x7fcc>
   19e08:	movw	r3, #11740	; 0x2ddc
   19e0c:	movt	r3, #3
   19e10:	ldr	r1, [r6, #4]
   19e14:	mvn	r2, #0
   19e18:	mov	r0, r8
   19e1c:	bl	185b8 <__assert_fail@plt+0x6a14>
   19e20:	cmp	r0, #0
   19e24:	beq	19958 <__assert_fail@plt+0x7db4>
   19e28:	b	19d44 <__assert_fail@plt+0x81a0>
   19e2c:	mov	r0, r4
   19e30:	mov	r4, r3
   19e34:	bl	17ac8 <__assert_fail@plt+0x5f24>
   19e38:	b	19b70 <__assert_fail@plt+0x7fcc>
   19e3c:	bl	11ae4 <fchdir@plt>
   19e40:	cmp	r0, #0
   19e44:	bne	19ec8 <__assert_fail@plt+0x8324>
   19e48:	ldr	r0, [r6, #36]	; 0x24
   19e4c:	b	19cf4 <__assert_fail@plt+0x8150>
   19e50:	ldr	r1, [r8, #48]	; 0x30
   19e54:	tst	r1, #4
   19e58:	strne	r4, [r8]
   19e5c:	bne	19bc8 <__assert_fail@plt+0x8024>
   19e60:	movw	r2, #9828	; 0x2664
   19e64:	movt	r2, #3
   19e68:	ldr	r0, [r8, #32]
   19e6c:	bl	18588 <__assert_fail@plt+0x69e4>
   19e70:	cmp	r0, #0
   19e74:	str	r0, [r4, #36]	; 0x24
   19e78:	blt	19ee8 <__assert_fail@plt+0x8344>
   19e7c:	ldrh	r3, [r4, #58]	; 0x3a
   19e80:	ldrh	r0, [r4, #56]	; 0x38
   19e84:	orr	r3, r3, #2
   19e88:	strh	r3, [r4, #58]	; 0x3a
   19e8c:	b	19bb4 <__assert_fail@plt+0x8010>
   19e90:	ldr	r1, [r8, #48]	; 0x30
   19e94:	tst	r1, #4
   19e98:	bne	19df8 <__assert_fail@plt+0x8254>
   19e9c:	movw	r2, #9828	; 0x2664
   19ea0:	movt	r2, #3
   19ea4:	ldr	r0, [r8, #32]
   19ea8:	bl	18588 <__assert_fail@plt+0x69e4>
   19eac:	cmp	r0, #0
   19eb0:	str	r0, [r5, #36]	; 0x24
   19eb4:	blt	19f04 <__assert_fail@plt+0x8360>
   19eb8:	ldrh	r3, [r5, #58]	; 0x3a
   19ebc:	orr	r3, r3, #2
   19ec0:	strh	r3, [r5, #58]	; 0x3a
   19ec4:	b	19df8 <__assert_fail@plt+0x8254>
   19ec8:	bl	119b8 <__errno_location@plt>
   19ecc:	ldr	r3, [r8, #48]	; 0x30
   19ed0:	ldr	r2, [r0]
   19ed4:	ldr	r0, [r6, #36]	; 0x24
   19ed8:	orr	r3, r3, #8192	; 0x2000
   19edc:	str	r2, [r6, #32]
   19ee0:	str	r3, [r8, #48]	; 0x30
   19ee4:	b	19cf4 <__assert_fail@plt+0x8150>
   19ee8:	bl	119b8 <__errno_location@plt>
   19eec:	ldr	r3, [r0]
   19ef0:	mov	r2, #7
   19ef4:	str	r3, [r4, #32]
   19ef8:	strh	r2, [r4, #56]	; 0x38
   19efc:	str	r4, [r8]
   19f00:	b	199a4 <__assert_fail@plt+0x7e00>
   19f04:	bl	119b8 <__errno_location@plt>
   19f08:	ldr	r3, [r0]
   19f0c:	mov	r2, #7
   19f10:	str	r3, [r5, #32]
   19f14:	strh	r2, [r5, #56]	; 0x38
   19f18:	b	19df8 <__assert_fail@plt+0x8254>
   19f1c:	cmp	r2, #4
   19f20:	bhi	19f34 <__assert_fail@plt+0x8390>
   19f24:	mov	r3, #0
   19f28:	strh	r2, [r1, #60]	; 0x3c
   19f2c:	mov	r0, r3
   19f30:	bx	lr
   19f34:	str	r4, [sp, #-8]!
   19f38:	str	lr, [sp, #4]
   19f3c:	bl	119b8 <__errno_location@plt>
   19f40:	mov	r2, #22
   19f44:	mov	r3, #1
   19f48:	ldr	r4, [sp]
   19f4c:	add	sp, sp, #4
   19f50:	str	r2, [r0]
   19f54:	mov	r0, r3
   19f58:	pop	{pc}		; (ldr pc, [sp], #4)
   19f5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19f60:	mov	r4, r1
   19f64:	mov	r5, r0
   19f68:	strd	r6, [sp, #8]
   19f6c:	str	r8, [sp, #16]
   19f70:	str	lr, [sp, #20]
   19f74:	bl	119b8 <__errno_location@plt>
   19f78:	bics	r2, r4, #4096	; 0x1000
   19f7c:	mov	r7, r0
   19f80:	movne	r3, #22
   19f84:	movne	r0, #0
   19f88:	strne	r3, [r7]
   19f8c:	bne	1a020 <__assert_fail@plt+0x847c>
   19f90:	ldr	r6, [r5]
   19f94:	str	r2, [r7]
   19f98:	ldr	r3, [r5, #48]	; 0x30
   19f9c:	ands	r0, r3, #8192	; 0x2000
   19fa0:	movne	r0, r2
   19fa4:	bne	1a020 <__assert_fail@plt+0x847c>
   19fa8:	ldrh	r3, [r6, #56]	; 0x38
   19fac:	cmp	r3, #9
   19fb0:	beq	1a090 <__assert_fail@plt+0x84ec>
   19fb4:	cmp	r3, #1
   19fb8:	bne	1a020 <__assert_fail@plt+0x847c>
   19fbc:	ldr	r0, [r5, #4]
   19fc0:	cmp	r0, #0
   19fc4:	beq	19fcc <__assert_fail@plt+0x8428>
   19fc8:	bl	1806c <__assert_fail@plt+0x64c8>
   19fcc:	cmp	r4, #4096	; 0x1000
   19fd0:	movne	r4, #1
   19fd4:	bne	19fe8 <__assert_fail@plt+0x8444>
   19fd8:	ldr	r3, [r5, #48]	; 0x30
   19fdc:	mov	r4, #2
   19fe0:	orr	r3, r3, #4096	; 0x1000
   19fe4:	str	r3, [r5, #48]	; 0x30
   19fe8:	ldr	r3, [r6, #48]	; 0x30
   19fec:	cmp	r3, #0
   19ff0:	bne	1a010 <__assert_fail@plt+0x846c>
   19ff4:	ldr	r3, [r6, #24]
   19ff8:	ldrb	r3, [r3]
   19ffc:	cmp	r3, #47	; 0x2f
   1a000:	beq	1a010 <__assert_fail@plt+0x846c>
   1a004:	ldr	r1, [r5, #48]	; 0x30
   1a008:	ands	r6, r1, #4
   1a00c:	beq	1a034 <__assert_fail@plt+0x8490>
   1a010:	mov	r1, r4
   1a014:	mov	r0, r5
   1a018:	bl	18974 <__assert_fail@plt+0x6dd0>
   1a01c:	str	r0, [r5, #4]
   1a020:	ldrd	r4, [sp]
   1a024:	ldrd	r6, [sp, #8]
   1a028:	ldr	r8, [sp, #16]
   1a02c:	add	sp, sp, #20
   1a030:	pop	{pc}		; (ldr pc, [sp], #4)
   1a034:	movw	r2, #9828	; 0x2664
   1a038:	movt	r2, #3
   1a03c:	ldr	r0, [r5, #32]
   1a040:	bl	18588 <__assert_fail@plt+0x69e4>
   1a044:	subs	r8, r0, #0
   1a048:	movlt	r0, r6
   1a04c:	strlt	r6, [r5, #4]
   1a050:	blt	1a020 <__assert_fail@plt+0x847c>
   1a054:	mov	r1, r4
   1a058:	mov	r0, r5
   1a05c:	bl	18974 <__assert_fail@plt+0x6dd0>
   1a060:	ldr	r3, [r5, #48]	; 0x30
   1a064:	str	r0, [r5, #4]
   1a068:	ands	r4, r3, #512	; 0x200
   1a06c:	bne	1a098 <__assert_fail@plt+0x84f4>
   1a070:	mov	r0, r8
   1a074:	bl	11ae4 <fchdir@plt>
   1a078:	cmp	r0, #0
   1a07c:	bne	1a0ac <__assert_fail@plt+0x8508>
   1a080:	mov	r0, r8
   1a084:	bl	11b80 <close@plt>
   1a088:	ldr	r0, [r5, #4]
   1a08c:	b	1a020 <__assert_fail@plt+0x847c>
   1a090:	ldr	r0, [r6, #8]
   1a094:	b	1a020 <__assert_fail@plt+0x847c>
   1a098:	mov	r1, r8
   1a09c:	mov	r2, #1
   1a0a0:	mov	r0, r5
   1a0a4:	bl	18218 <__assert_fail@plt+0x6674>
   1a0a8:	b	1a088 <__assert_fail@plt+0x84e4>
   1a0ac:	ldr	r5, [r7]
   1a0b0:	mov	r0, r8
   1a0b4:	bl	11b80 <close@plt>
   1a0b8:	mov	r0, r4
   1a0bc:	str	r5, [r7]
   1a0c0:	b	1a020 <__assert_fail@plt+0x847c>
   1a0c4:	andeq	r0, r0, r0
   1a0c8:	cmp	r0, #10
   1a0cc:	movcc	r0, #10
   1a0d0:	orr	r0, r0, #1
   1a0d4:	cmn	r0, #1
   1a0d8:	bxeq	lr
   1a0dc:	push	{lr}		; (str lr, [sp, #-4]!)
   1a0e0:	movw	lr, #43691	; 0xaaab
   1a0e4:	movt	lr, #43690	; 0xaaaa
   1a0e8:	umull	r2, r3, lr, r0
   1a0ec:	cmp	r0, #9
   1a0f0:	lsr	r3, r3, #1
   1a0f4:	add	r3, r3, r3, lsl #1
   1a0f8:	sub	r3, r0, r3
   1a0fc:	bls	1a13c <__assert_fail@plt+0x8598>
   1a100:	cmp	r3, #0
   1a104:	beq	1a144 <__assert_fail@plt+0x85a0>
   1a108:	mov	ip, #16
   1a10c:	mov	r1, #9
   1a110:	mov	r2, #3
   1a114:	b	1a120 <__assert_fail@plt+0x857c>
   1a118:	cmp	r3, #0
   1a11c:	beq	1a144 <__assert_fail@plt+0x85a0>
   1a120:	add	r2, r2, #2
   1a124:	add	r1, r1, ip
   1a128:	cmp	r1, r0
   1a12c:	add	ip, ip, #8
   1a130:	udiv	r3, r0, r2
   1a134:	mls	r3, r2, r3, r0
   1a138:	bcc	1a118 <__assert_fail@plt+0x8574>
   1a13c:	cmp	r3, #0
   1a140:	bne	1a150 <__assert_fail@plt+0x85ac>
   1a144:	add	r0, r0, #2
   1a148:	cmn	r0, #1
   1a14c:	bne	1a0e8 <__assert_fail@plt+0x8544>
   1a150:	pop	{pc}		; (ldr pc, [sp], #4)
   1a154:	ror	r0, r0, #3
   1a158:	udiv	r3, r0, r1
   1a15c:	mls	r0, r3, r1, r0
   1a160:	bx	lr
   1a164:	sub	r0, r1, r0
   1a168:	clz	r0, r0
   1a16c:	lsr	r0, r0, #5
   1a170:	bx	lr
   1a174:	str	r4, [sp, #-8]!
   1a178:	mov	r4, r0
   1a17c:	mov	r0, r1
   1a180:	ldr	r1, [r4, #8]
   1a184:	ldr	r3, [r4, #24]
   1a188:	str	lr, [sp, #4]
   1a18c:	blx	r3
   1a190:	ldr	r3, [r4, #8]
   1a194:	cmp	r3, r0
   1a198:	bls	1a1b0 <__assert_fail@plt+0x860c>
   1a19c:	ldr	r3, [r4]
   1a1a0:	ldr	r4, [sp]
   1a1a4:	add	sp, sp, #4
   1a1a8:	add	r0, r3, r0, lsl #3
   1a1ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1b0:	bl	11b68 <abort@plt>
   1a1b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a1b8:	mov	r5, r1
   1a1bc:	strd	r6, [sp, #8]
   1a1c0:	mov	r7, r3
   1a1c4:	mov	r6, r0
   1a1c8:	str	r8, [sp, #16]
   1a1cc:	mov	r8, r2
   1a1d0:	str	lr, [sp, #20]
   1a1d4:	bl	1a174 <__assert_fail@plt+0x85d0>
   1a1d8:	str	r0, [r8]
   1a1dc:	ldr	r1, [r0]
   1a1e0:	cmp	r1, #0
   1a1e4:	beq	1a2d4 <__assert_fail@plt+0x8730>
   1a1e8:	cmp	r1, r5
   1a1ec:	mov	r4, r0
   1a1f0:	beq	1a29c <__assert_fail@plt+0x86f8>
   1a1f4:	mov	r0, r5
   1a1f8:	ldr	r3, [r6, #28]
   1a1fc:	blx	r3
   1a200:	cmp	r0, #0
   1a204:	bne	1a298 <__assert_fail@plt+0x86f4>
   1a208:	ldr	r3, [r4, #4]
   1a20c:	cmp	r3, #0
   1a210:	beq	1a2d4 <__assert_fail@plt+0x8730>
   1a214:	ldr	r1, [r3]
   1a218:	cmp	r5, r1
   1a21c:	bne	1a240 <__assert_fail@plt+0x869c>
   1a220:	b	1a25c <__assert_fail@plt+0x86b8>
   1a224:	ldr	r4, [r4, #4]
   1a228:	ldr	r3, [r4, #4]
   1a22c:	cmp	r3, #0
   1a230:	beq	1a2d4 <__assert_fail@plt+0x8730>
   1a234:	ldr	r1, [r3]
   1a238:	cmp	r1, r5
   1a23c:	beq	1a25c <__assert_fail@plt+0x86b8>
   1a240:	mov	r0, r5
   1a244:	ldr	r3, [r6, #28]
   1a248:	blx	r3
   1a24c:	cmp	r0, #0
   1a250:	beq	1a224 <__assert_fail@plt+0x8680>
   1a254:	ldr	r3, [r4, #4]
   1a258:	ldr	r1, [r3]
   1a25c:	cmp	r7, #0
   1a260:	beq	1a280 <__assert_fail@plt+0x86dc>
   1a264:	ldr	r0, [r3, #4]
   1a268:	mov	r2, #0
   1a26c:	str	r0, [r4, #4]
   1a270:	str	r2, [r3]
   1a274:	ldr	r2, [r6, #36]	; 0x24
   1a278:	str	r2, [r3, #4]
   1a27c:	str	r3, [r6, #36]	; 0x24
   1a280:	ldrd	r4, [sp]
   1a284:	mov	r0, r1
   1a288:	ldrd	r6, [sp, #8]
   1a28c:	ldr	r8, [sp, #16]
   1a290:	add	sp, sp, #20
   1a294:	pop	{pc}		; (ldr pc, [sp], #4)
   1a298:	ldr	r1, [r4]
   1a29c:	cmp	r7, #0
   1a2a0:	beq	1a280 <__assert_fail@plt+0x86dc>
   1a2a4:	ldr	r0, [r4, #4]
   1a2a8:	cmp	r0, #0
   1a2ac:	streq	r0, [r4]
   1a2b0:	beq	1a280 <__assert_fail@plt+0x86dc>
   1a2b4:	ldrd	r2, [r0]
   1a2b8:	mov	ip, #0
   1a2bc:	strd	r2, [r4]
   1a2c0:	str	ip, [r0]
   1a2c4:	ldr	r3, [r6, #36]	; 0x24
   1a2c8:	str	r3, [r0, #4]
   1a2cc:	str	r0, [r6, #36]	; 0x24
   1a2d0:	b	1a280 <__assert_fail@plt+0x86dc>
   1a2d4:	mov	r1, #0
   1a2d8:	b	1a280 <__assert_fail@plt+0x86dc>
   1a2dc:	ldr	r2, [r0]
   1a2e0:	movw	r3, #11744	; 0x2de0
   1a2e4:	movt	r3, #3
   1a2e8:	mov	r1, r0
   1a2ec:	cmp	r2, r3
   1a2f0:	beq	1a378 <__assert_fail@plt+0x87d4>
   1a2f4:	vldr	s14, [pc, #132]	; 1a380 <__assert_fail@plt+0x87dc>
   1a2f8:	vldr	s15, [r2, #8]
   1a2fc:	vcmpe.f32	s15, s14
   1a300:	vmrs	APSR_nzcv, fpscr
   1a304:	ble	1a36c <__assert_fail@plt+0x87c8>
   1a308:	vldr	s13, [pc, #116]	; 1a384 <__assert_fail@plt+0x87e0>
   1a30c:	vcmpe.f32	s15, s13
   1a310:	vmrs	APSR_nzcv, fpscr
   1a314:	bpl	1a36c <__assert_fail@plt+0x87c8>
   1a318:	vldr	s13, [pc, #104]	; 1a388 <__assert_fail@plt+0x87e4>
   1a31c:	vldr	s12, [r2, #12]
   1a320:	vcmpe.f32	s12, s13
   1a324:	vmrs	APSR_nzcv, fpscr
   1a328:	ble	1a36c <__assert_fail@plt+0x87c8>
   1a32c:	vldr	s13, [r2]
   1a330:	vcmpe.f32	s13, #0.0
   1a334:	vmrs	APSR_nzcv, fpscr
   1a338:	blt	1a36c <__assert_fail@plt+0x87c8>
   1a33c:	vadd.f32	s14, s13, s14
   1a340:	vldr	s13, [r2, #4]
   1a344:	vcmpe.f32	s14, s13
   1a348:	vmrs	APSR_nzcv, fpscr
   1a34c:	bpl	1a36c <__assert_fail@plt+0x87c8>
   1a350:	vldr	s12, [pc, #52]	; 1a38c <__assert_fail@plt+0x87e8>
   1a354:	vcmpe.f32	s13, s12
   1a358:	vmrs	APSR_nzcv, fpscr
   1a35c:	bhi	1a36c <__assert_fail@plt+0x87c8>
   1a360:	vcmpe.f32	s15, s14
   1a364:	vmrs	APSR_nzcv, fpscr
   1a368:	bgt	1a378 <__assert_fail@plt+0x87d4>
   1a36c:	mov	r0, #0
   1a370:	str	r3, [r1]
   1a374:	bx	lr
   1a378:	mov	r0, #1
   1a37c:	bx	lr
   1a380:	stclcc	12, cr12, [ip, #820]	; 0x334
   1a384:	svccc	0x00666666
   1a388:	svccc	0x008ccccd
   1a38c:	svccc	0x00800000
   1a390:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a394:	ldr	r3, [r1, #4]
   1a398:	strd	r6, [sp, #8]
   1a39c:	ldr	r6, [r1]
   1a3a0:	strd	r8, [sp, #16]
   1a3a4:	str	sl, [sp, #24]
   1a3a8:	str	lr, [sp, #28]
   1a3ac:	cmp	r6, r3
   1a3b0:	bcs	1a478 <__assert_fail@plt+0x88d4>
   1a3b4:	mov	r8, r2
   1a3b8:	mov	r5, r0
   1a3bc:	mov	r7, r1
   1a3c0:	add	r6, r6, #8
   1a3c4:	mov	r9, #0
   1a3c8:	b	1a3d8 <__assert_fail@plt+0x8834>
   1a3cc:	cmp	r3, r6
   1a3d0:	add	r6, r6, #8
   1a3d4:	bls	1a478 <__assert_fail@plt+0x88d4>
   1a3d8:	ldr	sl, [r6, #-8]
   1a3dc:	cmp	sl, #0
   1a3e0:	beq	1a3cc <__assert_fail@plt+0x8828>
   1a3e4:	ldr	r4, [r6, #-4]
   1a3e8:	cmp	r4, #0
   1a3ec:	bne	1a40c <__assert_fail@plt+0x8868>
   1a3f0:	b	1a45c <__assert_fail@plt+0x88b8>
   1a3f4:	ldr	r2, [r0, #4]
   1a3f8:	cmp	r3, #0
   1a3fc:	str	r2, [r4, #4]
   1a400:	str	r4, [r0, #4]
   1a404:	mov	r4, r3
   1a408:	beq	1a458 <__assert_fail@plt+0x88b4>
   1a40c:	ldr	sl, [r4]
   1a410:	mov	r0, r5
   1a414:	mov	r1, sl
   1a418:	bl	1a174 <__assert_fail@plt+0x85d0>
   1a41c:	ldr	r2, [r0]
   1a420:	ldr	r3, [r4, #4]
   1a424:	cmp	r2, #0
   1a428:	bne	1a3f4 <__assert_fail@plt+0x8850>
   1a42c:	ldr	r1, [r5, #12]
   1a430:	cmp	r3, #0
   1a434:	str	sl, [r0]
   1a438:	add	r1, r1, #1
   1a43c:	str	r1, [r5, #12]
   1a440:	str	r2, [r4]
   1a444:	ldr	r2, [r5, #36]	; 0x24
   1a448:	str	r2, [r4, #4]
   1a44c:	str	r4, [r5, #36]	; 0x24
   1a450:	mov	r4, r3
   1a454:	bne	1a40c <__assert_fail@plt+0x8868>
   1a458:	ldr	sl, [r6, #-8]
   1a45c:	cmp	r8, #0
   1a460:	str	r9, [r6, #-4]
   1a464:	beq	1a494 <__assert_fail@plt+0x88f0>
   1a468:	ldr	r3, [r7, #4]
   1a46c:	cmp	r3, r6
   1a470:	add	r6, r6, #8
   1a474:	bhi	1a3d8 <__assert_fail@plt+0x8834>
   1a478:	mov	r0, #1
   1a47c:	ldrd	r4, [sp]
   1a480:	ldrd	r6, [sp, #8]
   1a484:	ldrd	r8, [sp, #16]
   1a488:	ldr	sl, [sp, #24]
   1a48c:	add	sp, sp, #28
   1a490:	pop	{pc}		; (ldr pc, [sp], #4)
   1a494:	mov	r1, sl
   1a498:	mov	r0, r5
   1a49c:	bl	1a174 <__assert_fail@plt+0x85d0>
   1a4a0:	ldr	r3, [r0]
   1a4a4:	mov	r4, r0
   1a4a8:	cmp	r3, #0
   1a4ac:	beq	1a4ec <__assert_fail@plt+0x8948>
   1a4b0:	ldr	r0, [r5, #36]	; 0x24
   1a4b4:	cmp	r0, #0
   1a4b8:	beq	1a500 <__assert_fail@plt+0x895c>
   1a4bc:	ldr	r3, [r0, #4]
   1a4c0:	str	r3, [r5, #36]	; 0x24
   1a4c4:	ldr	r3, [r4, #4]
   1a4c8:	str	sl, [r0]
   1a4cc:	str	r3, [r0, #4]
   1a4d0:	str	r0, [r4, #4]
   1a4d4:	ldr	r2, [r7, #12]
   1a4d8:	str	r9, [r6, #-8]
   1a4dc:	ldr	r3, [r7, #4]
   1a4e0:	sub	r2, r2, #1
   1a4e4:	str	r2, [r7, #12]
   1a4e8:	b	1a3cc <__assert_fail@plt+0x8828>
   1a4ec:	ldr	r3, [r5, #12]
   1a4f0:	str	sl, [r0]
   1a4f4:	add	r3, r3, #1
   1a4f8:	str	r3, [r5, #12]
   1a4fc:	b	1a4d4 <__assert_fail@plt+0x8930>
   1a500:	mov	r0, #8
   1a504:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   1a508:	cmp	r0, #0
   1a50c:	bne	1a4c4 <__assert_fail@plt+0x8920>
   1a510:	mov	r0, r8
   1a514:	b	1a47c <__assert_fail@plt+0x88d8>
   1a518:	ldr	r0, [r0, #8]
   1a51c:	bx	lr
   1a520:	ldr	r0, [r0, #12]
   1a524:	bx	lr
   1a528:	ldr	r0, [r0, #16]
   1a52c:	bx	lr
   1a530:	ldm	r0, {r1, r3}
   1a534:	cmp	r1, r3
   1a538:	bcs	1a5ac <__assert_fail@plt+0x8a08>
   1a53c:	sub	ip, r3, #1
   1a540:	add	r3, r1, #16
   1a544:	sub	ip, ip, r1
   1a548:	mov	r0, #0
   1a54c:	bic	ip, ip, #7
   1a550:	add	r1, r1, #8
   1a554:	add	ip, ip, r3
   1a558:	b	1a568 <__assert_fail@plt+0x89c4>
   1a55c:	add	r1, r1, #8
   1a560:	cmp	r1, ip
   1a564:	beq	1a5a8 <__assert_fail@plt+0x8a04>
   1a568:	ldr	r3, [r1, #-8]
   1a56c:	cmp	r3, #0
   1a570:	beq	1a55c <__assert_fail@plt+0x89b8>
   1a574:	ldr	r3, [r1, #-4]
   1a578:	mov	r2, #1
   1a57c:	cmp	r3, #0
   1a580:	beq	1a594 <__assert_fail@plt+0x89f0>
   1a584:	ldr	r3, [r3, #4]
   1a588:	add	r2, r2, #1
   1a58c:	cmp	r3, #0
   1a590:	bne	1a584 <__assert_fail@plt+0x89e0>
   1a594:	cmp	r0, r2
   1a598:	add	r1, r1, #8
   1a59c:	movcc	r0, r2
   1a5a0:	cmp	r1, ip
   1a5a4:	bne	1a568 <__assert_fail@plt+0x89c4>
   1a5a8:	bx	lr
   1a5ac:	mov	r0, #0
   1a5b0:	bx	lr
   1a5b4:	ldm	r0, {r1, r3}
   1a5b8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a5bc:	cmp	r1, r3
   1a5c0:	bcs	1a654 <__assert_fail@plt+0x8ab0>
   1a5c4:	sub	ip, r3, #1
   1a5c8:	mov	r2, #0
   1a5cc:	sub	ip, ip, r1
   1a5d0:	add	r3, r1, #16
   1a5d4:	bic	ip, ip, #7
   1a5d8:	add	r1, r1, #8
   1a5dc:	add	ip, ip, r3
   1a5e0:	mov	lr, r2
   1a5e4:	b	1a5f4 <__assert_fail@plt+0x8a50>
   1a5e8:	add	r1, r1, #8
   1a5ec:	cmp	r1, ip
   1a5f0:	beq	1a630 <__assert_fail@plt+0x8a8c>
   1a5f4:	ldr	r3, [r1, #-8]
   1a5f8:	cmp	r3, #0
   1a5fc:	beq	1a5e8 <__assert_fail@plt+0x8a44>
   1a600:	ldr	r3, [r1, #-4]
   1a604:	add	lr, lr, #1
   1a608:	add	r2, r2, #1
   1a60c:	cmp	r3, #0
   1a610:	beq	1a5e8 <__assert_fail@plt+0x8a44>
   1a614:	ldr	r3, [r3, #4]
   1a618:	add	r2, r2, #1
   1a61c:	cmp	r3, #0
   1a620:	bne	1a614 <__assert_fail@plt+0x8a70>
   1a624:	add	r1, r1, #8
   1a628:	cmp	r1, ip
   1a62c:	bne	1a5f4 <__assert_fail@plt+0x8a50>
   1a630:	ldr	r3, [r0, #12]
   1a634:	cmp	r3, lr
   1a638:	movne	r0, #0
   1a63c:	bne	1a650 <__assert_fail@plt+0x8aac>
   1a640:	ldr	r0, [r0, #16]
   1a644:	sub	r0, r0, r2
   1a648:	clz	r0, r0
   1a64c:	lsr	r0, r0, #5
   1a650:	pop	{pc}		; (ldr pc, [sp], #4)
   1a654:	mov	r2, #0
   1a658:	mov	lr, r2
   1a65c:	b	1a630 <__assert_fail@plt+0x8a8c>
   1a660:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a664:	mov	r4, r1
   1a668:	ldr	r2, [r0]
   1a66c:	ldr	r1, [r0, #4]
   1a670:	ldr	r3, [r0, #16]
   1a674:	strd	r6, [sp, #8]
   1a678:	str	lr, [sp, #16]
   1a67c:	sub	sp, sp, #12
   1a680:	cmp	r2, r1
   1a684:	ldrd	r6, [r0, #8]
   1a688:	bcs	1a788 <__assert_fail@plt+0x8be4>
   1a68c:	sub	ip, r1, #1
   1a690:	add	r1, r2, #16
   1a694:	sub	ip, ip, r2
   1a698:	add	r0, r2, #8
   1a69c:	bic	ip, ip, #7
   1a6a0:	mov	r5, #0
   1a6a4:	add	ip, ip, r1
   1a6a8:	b	1a6b8 <__assert_fail@plt+0x8b14>
   1a6ac:	add	r0, r0, #8
   1a6b0:	cmp	r0, ip
   1a6b4:	beq	1a6f8 <__assert_fail@plt+0x8b54>
   1a6b8:	ldr	r2, [r0, #-8]
   1a6bc:	cmp	r2, #0
   1a6c0:	beq	1a6ac <__assert_fail@plt+0x8b08>
   1a6c4:	ldr	r2, [r0, #-4]
   1a6c8:	mov	r1, #1
   1a6cc:	cmp	r2, #0
   1a6d0:	beq	1a6e4 <__assert_fail@plt+0x8b40>
   1a6d4:	ldr	r2, [r2, #4]
   1a6d8:	add	r1, r1, #1
   1a6dc:	cmp	r2, #0
   1a6e0:	bne	1a6d4 <__assert_fail@plt+0x8b30>
   1a6e4:	cmp	r5, r1
   1a6e8:	add	r0, r0, #8
   1a6ec:	movcc	r5, r1
   1a6f0:	cmp	r0, ip
   1a6f4:	bne	1a6b8 <__assert_fail@plt+0x8b14>
   1a6f8:	mov	r1, #1
   1a6fc:	mov	r0, r4
   1a700:	movw	r2, #11764	; 0x2df4
   1a704:	movt	r2, #3
   1a708:	bl	11a18 <__fprintf_chk@plt>
   1a70c:	mov	r3, r6
   1a710:	mov	r1, #1
   1a714:	mov	r0, r4
   1a718:	movw	r2, #11788	; 0x2e0c
   1a71c:	movt	r2, #3
   1a720:	bl	11a18 <__fprintf_chk@plt>
   1a724:	vmov	s15, r7
   1a728:	mov	r3, r7
   1a72c:	mov	r1, #1
   1a730:	vldr	d5, [pc, #88]	; 1a790 <__assert_fail@plt+0x8bec>
   1a734:	mov	r0, r4
   1a738:	movw	r2, #11812	; 0x2e24
   1a73c:	movt	r2, #3
   1a740:	vcvt.f64.u32	d6, s15
   1a744:	vmov	s15, r6
   1a748:	vmul.f64	d6, d6, d5
   1a74c:	vcvt.f64.u32	d7, s15
   1a750:	vdiv.f64	d5, d6, d7
   1a754:	vstr	d5, [sp]
   1a758:	bl	11a18 <__fprintf_chk@plt>
   1a75c:	mov	r3, r5
   1a760:	mov	r0, r4
   1a764:	movw	r2, #11848	; 0x2e48
   1a768:	movt	r2, #3
   1a76c:	mov	r1, #1
   1a770:	add	sp, sp, #12
   1a774:	ldrd	r4, [sp]
   1a778:	ldrd	r6, [sp, #8]
   1a77c:	ldr	lr, [sp, #16]
   1a780:	add	sp, sp, #20
   1a784:	b	11a18 <__fprintf_chk@plt>
   1a788:	mov	r5, #0
   1a78c:	b	1a6f8 <__assert_fail@plt+0x8b54>
   1a790:	andeq	r0, r0, r0
   1a794:	subsmi	r0, r9, r0
   1a798:	strd	r4, [sp, #-16]!
   1a79c:	mov	r5, r1
   1a7a0:	str	r6, [sp, #8]
   1a7a4:	mov	r6, r0
   1a7a8:	str	lr, [sp, #12]
   1a7ac:	bl	1a174 <__assert_fail@plt+0x85d0>
   1a7b0:	ldr	r3, [r0]
   1a7b4:	cmp	r3, #0
   1a7b8:	beq	1a7f4 <__assert_fail@plt+0x8c50>
   1a7bc:	mov	r4, r0
   1a7c0:	b	1a7c8 <__assert_fail@plt+0x8c24>
   1a7c4:	ldr	r3, [r4]
   1a7c8:	cmp	r3, r5
   1a7cc:	mov	r1, r3
   1a7d0:	mov	r0, r5
   1a7d4:	beq	1a80c <__assert_fail@plt+0x8c68>
   1a7d8:	ldr	r3, [r6, #28]
   1a7dc:	blx	r3
   1a7e0:	cmp	r0, #0
   1a7e4:	bne	1a808 <__assert_fail@plt+0x8c64>
   1a7e8:	ldr	r4, [r4, #4]
   1a7ec:	cmp	r4, #0
   1a7f0:	bne	1a7c4 <__assert_fail@plt+0x8c20>
   1a7f4:	ldrd	r4, [sp]
   1a7f8:	mov	r0, #0
   1a7fc:	ldr	r6, [sp, #8]
   1a800:	add	sp, sp, #12
   1a804:	pop	{pc}		; (ldr pc, [sp], #4)
   1a808:	ldr	r5, [r4]
   1a80c:	mov	r0, r5
   1a810:	ldrd	r4, [sp]
   1a814:	ldr	r6, [sp, #8]
   1a818:	add	sp, sp, #12
   1a81c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a820:	ldr	r3, [r0, #16]
   1a824:	cmp	r3, #0
   1a828:	beq	1a87c <__assert_fail@plt+0x8cd8>
   1a82c:	ldr	r3, [r0]
   1a830:	ldr	r2, [r0, #4]
   1a834:	cmp	r3, r2
   1a838:	bcs	1a870 <__assert_fail@plt+0x8ccc>
   1a83c:	ldr	r0, [r3]
   1a840:	cmp	r0, #0
   1a844:	bxne	lr
   1a848:	sub	r2, r2, #1
   1a84c:	sub	r2, r2, r3
   1a850:	bic	r2, r2, #7
   1a854:	add	r2, r3, r2
   1a858:	b	1a868 <__assert_fail@plt+0x8cc4>
   1a85c:	ldr	r0, [r3, #8]!
   1a860:	cmp	r0, #0
   1a864:	bxne	lr
   1a868:	cmp	r3, r2
   1a86c:	bne	1a85c <__assert_fail@plt+0x8cb8>
   1a870:	str	r4, [sp, #-8]!
   1a874:	str	lr, [sp, #4]
   1a878:	bl	11b68 <abort@plt>
   1a87c:	mov	r0, r3
   1a880:	bx	lr
   1a884:	strd	r4, [sp, #-16]!
   1a888:	mov	r5, r0
   1a88c:	mov	r4, r1
   1a890:	str	r6, [sp, #8]
   1a894:	str	lr, [sp, #12]
   1a898:	bl	1a174 <__assert_fail@plt+0x85d0>
   1a89c:	mov	r2, r0
   1a8a0:	mov	r3, r0
   1a8a4:	b	1a8b0 <__assert_fail@plt+0x8d0c>
   1a8a8:	cmp	r3, #0
   1a8ac:	beq	1a8c8 <__assert_fail@plt+0x8d24>
   1a8b0:	ldm	r3, {r1, r3}
   1a8b4:	cmp	r1, r4
   1a8b8:	bne	1a8a8 <__assert_fail@plt+0x8d04>
   1a8bc:	cmp	r3, #0
   1a8c0:	ldrne	r0, [r3]
   1a8c4:	bne	1a8ec <__assert_fail@plt+0x8d48>
   1a8c8:	ldr	r3, [r5, #4]
   1a8cc:	b	1a8dc <__assert_fail@plt+0x8d38>
   1a8d0:	ldr	r0, [r2]
   1a8d4:	cmp	r0, #0
   1a8d8:	bne	1a8ec <__assert_fail@plt+0x8d48>
   1a8dc:	add	r2, r2, #8
   1a8e0:	cmp	r3, r2
   1a8e4:	bhi	1a8d0 <__assert_fail@plt+0x8d2c>
   1a8e8:	mov	r0, #0
   1a8ec:	ldrd	r4, [sp]
   1a8f0:	ldr	r6, [sp, #8]
   1a8f4:	add	sp, sp, #12
   1a8f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8fc:	strd	r4, [sp, #-12]!
   1a900:	ldr	r5, [r0]
   1a904:	str	lr, [sp, #8]
   1a908:	ldr	lr, [r0, #4]
   1a90c:	cmp	lr, r5
   1a910:	bls	1a99c <__assert_fail@plt+0x8df8>
   1a914:	mov	ip, #0
   1a918:	ldr	r3, [r5]
   1a91c:	cmp	r3, #0
   1a920:	bne	1a944 <__assert_fail@plt+0x8da0>
   1a924:	add	r5, r5, #8
   1a928:	cmp	lr, r5
   1a92c:	bhi	1a918 <__assert_fail@plt+0x8d74>
   1a930:	mov	r2, ip
   1a934:	ldrd	r4, [sp]
   1a938:	add	sp, sp, #8
   1a93c:	mov	r0, r2
   1a940:	pop	{pc}		; (ldr pc, [sp], #4)
   1a944:	cmp	r2, ip
   1a948:	bls	1a930 <__assert_fail@plt+0x8d8c>
   1a94c:	str	r3, [r1, ip, lsl #2]
   1a950:	add	r4, ip, #1
   1a954:	add	lr, r1, ip, lsl #2
   1a958:	ldr	r3, [r5, #4]
   1a95c:	cmp	r3, #0
   1a960:	beq	1a990 <__assert_fail@plt+0x8dec>
   1a964:	mov	ip, r4
   1a968:	cmp	r2, ip
   1a96c:	add	ip, ip, #1
   1a970:	beq	1a934 <__assert_fail@plt+0x8d90>
   1a974:	ldr	r4, [r3]
   1a978:	str	r4, [lr, #4]!
   1a97c:	ldr	r3, [r3, #4]
   1a980:	cmp	r3, #0
   1a984:	bne	1a968 <__assert_fail@plt+0x8dc4>
   1a988:	ldr	lr, [r0, #4]
   1a98c:	b	1a924 <__assert_fail@plt+0x8d80>
   1a990:	mov	ip, r4
   1a994:	ldr	lr, [r0, #4]
   1a998:	b	1a924 <__assert_fail@plt+0x8d80>
   1a99c:	mov	r2, #0
   1a9a0:	b	1a934 <__assert_fail@plt+0x8d90>
   1a9a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a9a8:	ldr	r3, [r0, #4]
   1a9ac:	strd	r6, [sp, #8]
   1a9b0:	strd	r8, [sp, #16]
   1a9b4:	ldr	r8, [r0]
   1a9b8:	str	sl, [sp, #24]
   1a9bc:	str	lr, [sp, #28]
   1a9c0:	cmp	r3, r8
   1a9c4:	bls	1aa40 <__assert_fail@plt+0x8e9c>
   1a9c8:	mov	r7, r2
   1a9cc:	mov	r6, r1
   1a9d0:	mov	r9, r0
   1a9d4:	mov	r5, #0
   1a9d8:	ldr	r0, [r8]
   1a9dc:	cmp	r0, #0
   1a9e0:	bne	1aa0c <__assert_fail@plt+0x8e68>
   1a9e4:	add	r8, r8, #8
   1a9e8:	cmp	r3, r8
   1a9ec:	bhi	1a9d8 <__assert_fail@plt+0x8e34>
   1a9f0:	mov	r0, r5
   1a9f4:	ldrd	r4, [sp]
   1a9f8:	ldrd	r6, [sp, #8]
   1a9fc:	ldrd	r8, [sp, #16]
   1aa00:	ldr	sl, [sp, #24]
   1aa04:	add	sp, sp, #28
   1aa08:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa0c:	mov	r4, r8
   1aa10:	b	1aa18 <__assert_fail@plt+0x8e74>
   1aa14:	ldr	r0, [r4]
   1aa18:	mov	r1, r7
   1aa1c:	blx	r6
   1aa20:	cmp	r0, #0
   1aa24:	beq	1a9f0 <__assert_fail@plt+0x8e4c>
   1aa28:	ldr	r4, [r4, #4]
   1aa2c:	add	r5, r5, #1
   1aa30:	cmp	r4, #0
   1aa34:	bne	1aa14 <__assert_fail@plt+0x8e70>
   1aa38:	ldr	r3, [r9, #4]
   1aa3c:	b	1a9e4 <__assert_fail@plt+0x8e40>
   1aa40:	mov	r5, #0
   1aa44:	b	1a9f0 <__assert_fail@plt+0x8e4c>
   1aa48:	ldrb	r2, [r0]
   1aa4c:	cmp	r2, #0
   1aa50:	beq	1aa7c <__assert_fail@plt+0x8ed8>
   1aa54:	mov	r3, #0
   1aa58:	rsb	r3, r3, r3, lsl #5
   1aa5c:	add	r3, r3, r2
   1aa60:	ldrb	r2, [r0, #1]!
   1aa64:	udiv	ip, r3, r1
   1aa68:	cmp	r2, #0
   1aa6c:	mls	r3, r1, ip, r3
   1aa70:	bne	1aa58 <__assert_fail@plt+0x8eb4>
   1aa74:	mov	r0, r3
   1aa78:	bx	lr
   1aa7c:	mov	r3, r2
   1aa80:	mov	r0, r3
   1aa84:	bx	lr
   1aa88:	movw	r3, #11744	; 0x2de0
   1aa8c:	movt	r3, #3
   1aa90:	strd	r4, [sp, #-8]!
   1aa94:	ldrd	r4, [r3]
   1aa98:	ldr	r1, [r3, #16]
   1aa9c:	ldrd	r2, [r3, #8]
   1aaa0:	strd	r4, [r0]
   1aaa4:	ldrd	r4, [sp]
   1aaa8:	add	sp, sp, #8
   1aaac:	strd	r2, [r0, #8]
   1aab0:	str	r1, [r0, #16]
   1aab4:	bx	lr
   1aab8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1aabc:	cmp	r2, #0
   1aac0:	movw	ip, #41316	; 0xa164
   1aac4:	movt	ip, #1
   1aac8:	strd	r6, [sp, #8]
   1aacc:	movne	r6, r2
   1aad0:	str	lr, [sp, #16]
   1aad4:	sub	sp, sp, #12
   1aad8:	movw	lr, #41300	; 0xa154
   1aadc:	movt	lr, #1
   1aae0:	mov	r7, r1
   1aae4:	moveq	r6, lr
   1aae8:	cmp	r3, #0
   1aaec:	str	r0, [sp, #4]
   1aaf0:	mov	r0, #40	; 0x28
   1aaf4:	movne	r5, r3
   1aaf8:	moveq	r5, ip
   1aafc:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   1ab00:	subs	r4, r0, #0
   1ab04:	beq	1ab9c <__assert_fail@plt+0x8ff8>
   1ab08:	cmp	r7, #0
   1ab0c:	add	r0, r4, #20
   1ab10:	beq	1abb4 <__assert_fail@plt+0x9010>
   1ab14:	str	r7, [r4, #20]
   1ab18:	bl	1a2dc <__assert_fail@plt+0x8738>
   1ab1c:	cmp	r0, #0
   1ab20:	beq	1abfc <__assert_fail@plt+0x9058>
   1ab24:	ldrb	r3, [r7, #16]
   1ab28:	cmp	r3, #0
   1ab2c:	beq	1ac0c <__assert_fail@plt+0x9068>
   1ab30:	ldr	r0, [sp, #4]
   1ab34:	bl	1a0c8 <__assert_fail@plt+0x8524>
   1ab38:	lsrs	r2, r0, #30
   1ab3c:	movne	r7, #1
   1ab40:	moveq	r7, #0
   1ab44:	tst	r0, #536870912	; 0x20000000
   1ab48:	bne	1abf4 <__assert_fail@plt+0x9050>
   1ab4c:	cmp	r7, #0
   1ab50:	bne	1abf4 <__assert_fail@plt+0x9050>
   1ab54:	cmp	r0, #0
   1ab58:	str	r0, [r4, #8]
   1ab5c:	beq	1abfc <__assert_fail@plt+0x9058>
   1ab60:	mov	r1, #8
   1ab64:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   1ab68:	cmp	r0, #0
   1ab6c:	str	r0, [r4]
   1ab70:	beq	1abfc <__assert_fail@plt+0x9058>
   1ab74:	ldr	r3, [r4, #8]
   1ab78:	str	r7, [r4, #12]
   1ab7c:	str	r7, [r4, #16]
   1ab80:	str	r6, [r4, #24]
   1ab84:	str	r5, [r4, #28]
   1ab88:	add	r0, r0, r3, lsl #3
   1ab8c:	ldr	r3, [sp, #32]
   1ab90:	str	r0, [r4, #4]
   1ab94:	str	r3, [r4, #32]
   1ab98:	str	r7, [r4, #36]	; 0x24
   1ab9c:	mov	r0, r4
   1aba0:	add	sp, sp, #12
   1aba4:	ldrd	r4, [sp]
   1aba8:	ldrd	r6, [sp, #8]
   1abac:	add	sp, sp, #16
   1abb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1abb4:	movw	r3, #11744	; 0x2de0
   1abb8:	movt	r3, #3
   1abbc:	str	r3, [r4, #20]
   1abc0:	bl	1a2dc <__assert_fail@plt+0x8738>
   1abc4:	cmp	r0, #0
   1abc8:	beq	1abfc <__assert_fail@plt+0x9058>
   1abcc:	vldr	s13, [pc, #64]	; 1ac14 <__assert_fail@plt+0x9070>
   1abd0:	vldr	s15, [sp, #4]
   1abd4:	vldr	s14, [pc, #60]	; 1ac18 <__assert_fail@plt+0x9074>
   1abd8:	vcvt.f32.u32	s12, s15
   1abdc:	vdiv.f32	s15, s12, s13
   1abe0:	vcmpe.f32	s15, s14
   1abe4:	vmrs	APSR_nzcv, fpscr
   1abe8:	vcvtlt.u32.f32	s15, s15
   1abec:	vstrlt	s15, [sp, #4]
   1abf0:	blt	1ab30 <__assert_fail@plt+0x8f8c>
   1abf4:	mov	r3, #0
   1abf8:	str	r3, [r4, #8]
   1abfc:	mov	r0, r4
   1ac00:	mov	r4, #0
   1ac04:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1ac08:	b	1ab9c <__assert_fail@plt+0x8ff8>
   1ac0c:	vldr	s13, [r7, #8]
   1ac10:	b	1abd0 <__assert_fail@plt+0x902c>
   1ac14:	svccc	0x004ccccd
   1ac18:	svcmi	0x00800000
   1ac1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ac20:	mov	r5, r0
   1ac24:	ldr	r2, [r0, #4]
   1ac28:	strd	r6, [sp, #8]
   1ac2c:	ldr	r6, [r0]
   1ac30:	str	r8, [sp, #16]
   1ac34:	str	lr, [sp, #20]
   1ac38:	cmp	r6, r2
   1ac3c:	addcc	r6, r6, #8
   1ac40:	movcc	r7, #0
   1ac44:	bcc	1ac58 <__assert_fail@plt+0x90b4>
   1ac48:	b	1accc <__assert_fail@plt+0x9128>
   1ac4c:	cmp	r2, r6
   1ac50:	add	r6, r6, #8
   1ac54:	bls	1accc <__assert_fail@plt+0x9128>
   1ac58:	ldr	r3, [r6, #-8]
   1ac5c:	cmp	r3, #0
   1ac60:	beq	1ac4c <__assert_fail@plt+0x90a8>
   1ac64:	ldr	r4, [r6, #-4]
   1ac68:	ldr	r2, [r5, #32]
   1ac6c:	cmp	r4, #0
   1ac70:	beq	1aca4 <__assert_fail@plt+0x9100>
   1ac74:	cmp	r2, #0
   1ac78:	beq	1ac88 <__assert_fail@plt+0x90e4>
   1ac7c:	ldr	r0, [r4]
   1ac80:	blx	r2
   1ac84:	ldr	r2, [r5, #32]
   1ac88:	ldr	r3, [r4, #4]
   1ac8c:	ldr	r1, [r5, #36]	; 0x24
   1ac90:	str	r7, [r4]
   1ac94:	str	r1, [r4, #4]
   1ac98:	str	r4, [r5, #36]	; 0x24
   1ac9c:	subs	r4, r3, #0
   1aca0:	bne	1ac74 <__assert_fail@plt+0x90d0>
   1aca4:	cmp	r2, #0
   1aca8:	beq	1acb4 <__assert_fail@plt+0x9110>
   1acac:	ldr	r0, [r6, #-8]
   1acb0:	blx	r2
   1acb4:	str	r7, [r6, #-8]
   1acb8:	str	r7, [r6, #-4]
   1acbc:	ldr	r2, [r5, #4]
   1acc0:	cmp	r2, r6
   1acc4:	add	r6, r6, #8
   1acc8:	bhi	1ac58 <__assert_fail@plt+0x90b4>
   1accc:	mov	r3, #0
   1acd0:	ldrd	r6, [sp, #8]
   1acd4:	ldr	r8, [sp, #16]
   1acd8:	str	r3, [r5, #12]
   1acdc:	str	r3, [r5, #16]
   1ace0:	ldrd	r4, [sp]
   1ace4:	add	sp, sp, #20
   1ace8:	pop	{pc}		; (ldr pc, [sp], #4)
   1acec:	strd	r4, [sp, #-16]!
   1acf0:	ldr	r2, [r0, #32]
   1acf4:	ldr	r5, [r0]
   1acf8:	ldr	r3, [r0, #4]
   1acfc:	cmp	r2, #0
   1ad00:	str	r6, [sp, #8]
   1ad04:	mov	r6, r0
   1ad08:	str	lr, [sp, #12]
   1ad0c:	beq	1ad74 <__assert_fail@plt+0x91d0>
   1ad10:	ldr	r2, [r0, #16]
   1ad14:	cmp	r2, #0
   1ad18:	beq	1ad74 <__assert_fail@plt+0x91d0>
   1ad1c:	cmp	r5, r3
   1ad20:	bcc	1ad34 <__assert_fail@plt+0x9190>
   1ad24:	b	1ada8 <__assert_fail@plt+0x9204>
   1ad28:	add	r5, r5, #8
   1ad2c:	cmp	r3, r5
   1ad30:	bls	1ad70 <__assert_fail@plt+0x91cc>
   1ad34:	ldr	r0, [r5]
   1ad38:	cmp	r0, #0
   1ad3c:	beq	1ad28 <__assert_fail@plt+0x9184>
   1ad40:	mov	r4, r5
   1ad44:	b	1ad4c <__assert_fail@plt+0x91a8>
   1ad48:	ldr	r0, [r4]
   1ad4c:	ldr	r3, [r6, #32]
   1ad50:	blx	r3
   1ad54:	ldr	r4, [r4, #4]
   1ad58:	cmp	r4, #0
   1ad5c:	bne	1ad48 <__assert_fail@plt+0x91a4>
   1ad60:	ldr	r3, [r6, #4]
   1ad64:	add	r5, r5, #8
   1ad68:	cmp	r3, r5
   1ad6c:	bhi	1ad34 <__assert_fail@plt+0x9190>
   1ad70:	ldr	r5, [r6]
   1ad74:	cmp	r5, r3
   1ad78:	bcs	1ada8 <__assert_fail@plt+0x9204>
   1ad7c:	ldr	r0, [r5, #4]
   1ad80:	cmp	r0, #0
   1ad84:	beq	1ad9c <__assert_fail@plt+0x91f8>
   1ad88:	ldr	r4, [r0, #4]
   1ad8c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1ad90:	subs	r0, r4, #0
   1ad94:	bne	1ad88 <__assert_fail@plt+0x91e4>
   1ad98:	ldr	r3, [r6, #4]
   1ad9c:	add	r5, r5, #8
   1ada0:	cmp	r3, r5
   1ada4:	bhi	1ad7c <__assert_fail@plt+0x91d8>
   1ada8:	ldr	r0, [r6, #36]	; 0x24
   1adac:	cmp	r0, #0
   1adb0:	beq	1adc4 <__assert_fail@plt+0x9220>
   1adb4:	ldr	r4, [r0, #4]
   1adb8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1adbc:	subs	r0, r4, #0
   1adc0:	bne	1adb4 <__assert_fail@plt+0x9210>
   1adc4:	ldr	r0, [r6]
   1adc8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1adcc:	mov	r0, r6
   1add0:	ldrd	r4, [sp]
   1add4:	ldr	r6, [sp, #8]
   1add8:	ldr	lr, [sp, #12]
   1addc:	add	sp, sp, #16
   1ade0:	b	17ac8 <__assert_fail@plt+0x5f24>
   1ade4:	ldr	r3, [r0, #20]
   1ade8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1adec:	ldrb	r2, [r3, #16]
   1adf0:	strd	r6, [sp, #8]
   1adf4:	mov	r6, r0
   1adf8:	str	lr, [sp, #16]
   1adfc:	sub	sp, sp, #52	; 0x34
   1ae00:	str	r1, [sp, #4]
   1ae04:	cmp	r2, #0
   1ae08:	bne	1ae34 <__assert_fail@plt+0x9290>
   1ae0c:	vmov	s15, r1
   1ae10:	vldr	s13, [r3, #8]
   1ae14:	vldr	s14, [pc, #340]	; 1af70 <__assert_fail@plt+0x93cc>
   1ae18:	vcvt.f32.u32	s12, s15
   1ae1c:	vdiv.f32	s15, s12, s13
   1ae20:	vcmpe.f32	s15, s14
   1ae24:	vmrs	APSR_nzcv, fpscr
   1ae28:	vcvtlt.u32.f32	s15, s15
   1ae2c:	vstrlt	s15, [sp, #4]
   1ae30:	bge	1ae64 <__assert_fail@plt+0x92c0>
   1ae34:	ldr	r0, [sp, #4]
   1ae38:	bl	1a0c8 <__assert_fail@plt+0x8524>
   1ae3c:	lsrs	r3, r0, #30
   1ae40:	mov	r5, r0
   1ae44:	movne	r4, #1
   1ae48:	moveq	r4, #0
   1ae4c:	tst	r0, #536870912	; 0x20000000
   1ae50:	movne	r4, #1
   1ae54:	cmp	r0, #0
   1ae58:	moveq	r4, #1
   1ae5c:	cmp	r4, #0
   1ae60:	beq	1ae80 <__assert_fail@plt+0x92dc>
   1ae64:	mov	r4, #0
   1ae68:	mov	r0, r4
   1ae6c:	add	sp, sp, #52	; 0x34
   1ae70:	ldrd	r4, [sp]
   1ae74:	ldrd	r6, [sp, #8]
   1ae78:	add	sp, sp, #16
   1ae7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae80:	ldr	r3, [r6, #8]
   1ae84:	cmp	r3, r0
   1ae88:	beq	1af38 <__assert_fail@plt+0x9394>
   1ae8c:	mov	r1, #8
   1ae90:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   1ae94:	cmp	r0, #0
   1ae98:	str	r0, [sp, #8]
   1ae9c:	beq	1ae64 <__assert_fail@plt+0x92c0>
   1aea0:	add	r3, r0, r5, lsl #3
   1aea4:	ldr	r7, [r6, #20]
   1aea8:	mov	r2, r4
   1aeac:	add	r0, sp, #8
   1aeb0:	mov	r1, r6
   1aeb4:	ldr	lr, [r6, #28]
   1aeb8:	str	r3, [sp, #12]
   1aebc:	str	r5, [sp, #16]
   1aec0:	ldr	r5, [r6, #24]
   1aec4:	str	r4, [sp, #20]
   1aec8:	ldr	ip, [r6, #32]
   1aecc:	str	r4, [sp, #24]
   1aed0:	ldr	r3, [r6, #36]	; 0x24
   1aed4:	str	r7, [sp, #28]
   1aed8:	str	r5, [sp, #32]
   1aedc:	str	lr, [sp, #36]	; 0x24
   1aee0:	str	ip, [sp, #40]	; 0x28
   1aee4:	str	r3, [sp, #44]	; 0x2c
   1aee8:	bl	1a390 <__assert_fail@plt+0x87ec>
   1aeec:	subs	r4, r0, #0
   1aef0:	bne	1af40 <__assert_fail@plt+0x939c>
   1aef4:	ldr	r3, [sp, #44]	; 0x2c
   1aef8:	mov	r2, #1
   1aefc:	add	r1, sp, #8
   1af00:	mov	r0, r6
   1af04:	str	r3, [r6, #36]	; 0x24
   1af08:	bl	1a390 <__assert_fail@plt+0x87ec>
   1af0c:	cmp	r0, #0
   1af10:	beq	1af6c <__assert_fail@plt+0x93c8>
   1af14:	add	r1, sp, #8
   1af18:	mov	r0, r6
   1af1c:	mov	r2, r4
   1af20:	bl	1a390 <__assert_fail@plt+0x87ec>
   1af24:	cmp	r0, #0
   1af28:	beq	1af6c <__assert_fail@plt+0x93c8>
   1af2c:	ldr	r0, [sp, #8]
   1af30:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1af34:	b	1ae68 <__assert_fail@plt+0x92c4>
   1af38:	mov	r4, #1
   1af3c:	b	1ae68 <__assert_fail@plt+0x92c4>
   1af40:	ldr	r0, [r6]
   1af44:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1af48:	ldrd	r2, [sp, #8]
   1af4c:	ldr	r1, [sp, #16]
   1af50:	strd	r2, [r6]
   1af54:	ldr	r2, [sp, #20]
   1af58:	str	r1, [r6, #8]
   1af5c:	ldr	r3, [sp, #44]	; 0x2c
   1af60:	str	r2, [r6, #12]
   1af64:	str	r3, [r6, #36]	; 0x24
   1af68:	b	1ae68 <__assert_fail@plt+0x92c4>
   1af6c:	bl	11b68 <abort@plt>
   1af70:	svcmi	0x00800000
   1af74:	strd	r4, [sp, #-16]!
   1af78:	str	r6, [sp, #8]
   1af7c:	subs	r6, r1, #0
   1af80:	str	lr, [sp, #12]
   1af84:	sub	sp, sp, #8
   1af88:	beq	1b108 <__assert_fail@plt+0x9564>
   1af8c:	mov	r3, #0
   1af90:	mov	r5, r2
   1af94:	add	r2, sp, #4
   1af98:	mov	r4, r0
   1af9c:	bl	1a1b4 <__assert_fail@plt+0x8610>
   1afa0:	subs	r3, r0, #0
   1afa4:	beq	1afd0 <__assert_fail@plt+0x942c>
   1afa8:	cmp	r5, #0
   1afac:	moveq	r0, r5
   1afb0:	beq	1afbc <__assert_fail@plt+0x9418>
   1afb4:	mov	r0, #0
   1afb8:	str	r3, [r5]
   1afbc:	add	sp, sp, #8
   1afc0:	ldrd	r4, [sp]
   1afc4:	ldr	r6, [sp, #8]
   1afc8:	add	sp, sp, #12
   1afcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1afd0:	vldr	s15, [r4, #8]
   1afd4:	vldr	s14, [r4, #12]
   1afd8:	ldr	r3, [r4, #20]
   1afdc:	vcvt.f32.u32	s15, s15
   1afe0:	vcvt.f32.u32	s14, s14
   1afe4:	vldr	s13, [r3, #8]
   1afe8:	vmul.f32	s15, s15, s13
   1afec:	vcmpe.f32	s14, s15
   1aff0:	vmrs	APSR_nzcv, fpscr
   1aff4:	bgt	1b03c <__assert_fail@plt+0x9498>
   1aff8:	ldr	r2, [sp, #4]
   1affc:	ldr	r3, [r2]
   1b000:	cmp	r3, #0
   1b004:	beq	1b098 <__assert_fail@plt+0x94f4>
   1b008:	ldr	r3, [r4, #36]	; 0x24
   1b00c:	cmp	r3, #0
   1b010:	beq	1b0bc <__assert_fail@plt+0x9518>
   1b014:	ldr	r1, [r3, #4]
   1b018:	str	r1, [r4, #36]	; 0x24
   1b01c:	ldr	r1, [r4, #16]
   1b020:	mov	r0, #1
   1b024:	ldr	ip, [r2, #4]
   1b028:	add	r1, r1, r0
   1b02c:	stm	r3, {r6, ip}
   1b030:	str	r3, [r2, #4]
   1b034:	str	r1, [r4, #16]
   1b038:	b	1afbc <__assert_fail@plt+0x9418>
   1b03c:	add	r0, r4, #20
   1b040:	bl	1a2dc <__assert_fail@plt+0x8738>
   1b044:	vldr	s15, [r4, #8]
   1b048:	vldr	s14, [r4, #12]
   1b04c:	ldr	r3, [r4, #20]
   1b050:	vcvt.f32.u32	s15, s15
   1b054:	vcvt.f32.u32	s14, s14
   1b058:	vldr	s13, [r3, #8]
   1b05c:	vmul.f32	s12, s13, s15
   1b060:	vcmpe.f32	s14, s12
   1b064:	vmrs	APSR_nzcv, fpscr
   1b068:	ble	1aff8 <__assert_fail@plt+0x9454>
   1b06c:	vldr	s14, [r3, #12]
   1b070:	ldrb	r2, [r3, #16]
   1b074:	vmul.f32	s15, s15, s14
   1b078:	vldr	s14, [pc, #140]	; 1b10c <__assert_fail@plt+0x9568>
   1b07c:	cmp	r2, #0
   1b080:	vmuleq.f32	s15, s15, s13
   1b084:	vcmpe.f32	s15, s14
   1b088:	vmrs	APSR_nzcv, fpscr
   1b08c:	blt	1b0d4 <__assert_fail@plt+0x9530>
   1b090:	mvn	r0, #0
   1b094:	b	1afbc <__assert_fail@plt+0x9418>
   1b098:	ldr	r1, [r4, #12]
   1b09c:	mov	r0, #1
   1b0a0:	ldr	r3, [r4, #16]
   1b0a4:	str	r6, [r2]
   1b0a8:	add	r2, r1, r0
   1b0ac:	add	r3, r3, r0
   1b0b0:	str	r2, [r4, #12]
   1b0b4:	str	r3, [r4, #16]
   1b0b8:	b	1afbc <__assert_fail@plt+0x9418>
   1b0bc:	mov	r0, #8
   1b0c0:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   1b0c4:	subs	r3, r0, #0
   1b0c8:	beq	1b090 <__assert_fail@plt+0x94ec>
   1b0cc:	ldr	r2, [sp, #4]
   1b0d0:	b	1b01c <__assert_fail@plt+0x9478>
   1b0d4:	vcvt.u32.f32	s15, s15
   1b0d8:	mov	r0, r4
   1b0dc:	vmov	r1, s15
   1b0e0:	bl	1ade4 <__assert_fail@plt+0x9240>
   1b0e4:	cmp	r0, #0
   1b0e8:	beq	1b090 <__assert_fail@plt+0x94ec>
   1b0ec:	add	r2, sp, #4
   1b0f0:	mov	r3, #0
   1b0f4:	mov	r1, r6
   1b0f8:	mov	r0, r4
   1b0fc:	bl	1a1b4 <__assert_fail@plt+0x8610>
   1b100:	cmp	r0, #0
   1b104:	beq	1aff8 <__assert_fail@plt+0x9454>
   1b108:	bl	11b68 <abort@plt>
   1b10c:	svcmi	0x00800000
   1b110:	str	r4, [sp, #-8]!
   1b114:	mov	r4, r1
   1b118:	str	lr, [sp, #4]
   1b11c:	sub	sp, sp, #8
   1b120:	add	r2, sp, #4
   1b124:	bl	1af74 <__assert_fail@plt+0x93d0>
   1b128:	cmn	r0, #1
   1b12c:	moveq	r0, #0
   1b130:	beq	1b140 <__assert_fail@plt+0x959c>
   1b134:	cmp	r0, #0
   1b138:	ldreq	r0, [sp, #4]
   1b13c:	movne	r0, r4
   1b140:	add	sp, sp, #8
   1b144:	ldr	r4, [sp]
   1b148:	add	sp, sp, #4
   1b14c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b150:	strd	r4, [sp, #-16]!
   1b154:	mov	r3, #1
   1b158:	mov	r4, r0
   1b15c:	str	r6, [sp, #8]
   1b160:	str	lr, [sp, #12]
   1b164:	sub	sp, sp, #8
   1b168:	add	r2, sp, #4
   1b16c:	bl	1a1b4 <__assert_fail@plt+0x8610>
   1b170:	subs	r5, r0, #0
   1b174:	beq	1b194 <__assert_fail@plt+0x95f0>
   1b178:	ldr	r2, [sp, #4]
   1b17c:	ldr	r3, [r4, #16]
   1b180:	ldr	r2, [r2]
   1b184:	sub	r3, r3, #1
   1b188:	str	r3, [r4, #16]
   1b18c:	cmp	r2, #0
   1b190:	beq	1b1ac <__assert_fail@plt+0x9608>
   1b194:	mov	r0, r5
   1b198:	add	sp, sp, #8
   1b19c:	ldrd	r4, [sp]
   1b1a0:	ldr	r6, [sp, #8]
   1b1a4:	add	sp, sp, #12
   1b1a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1ac:	vldr	s15, [r4, #8]
   1b1b0:	ldr	r3, [r4, #12]
   1b1b4:	ldr	r2, [r4, #20]
   1b1b8:	vcvt.f32.u32	s15, s15
   1b1bc:	sub	r3, r3, #1
   1b1c0:	vmov	s14, r3
   1b1c4:	vldr	s13, [r2]
   1b1c8:	str	r3, [r4, #12]
   1b1cc:	vmul.f32	s15, s15, s13
   1b1d0:	vcvt.f32.u32	s14, s14
   1b1d4:	vcmpe.f32	s14, s15
   1b1d8:	vmrs	APSR_nzcv, fpscr
   1b1dc:	bpl	1b194 <__assert_fail@plt+0x95f0>
   1b1e0:	add	r0, r4, #20
   1b1e4:	bl	1a2dc <__assert_fail@plt+0x8738>
   1b1e8:	vldr	s15, [r4, #8]
   1b1ec:	vldr	s13, [r4, #12]
   1b1f0:	ldr	r3, [r4, #20]
   1b1f4:	vcvt.f32.u32	s15, s15
   1b1f8:	vcvt.f32.u32	s13, s13
   1b1fc:	vldr	s14, [r3]
   1b200:	vmul.f32	s14, s15, s14
   1b204:	vcmpe.f32	s13, s14
   1b208:	vmrs	APSR_nzcv, fpscr
   1b20c:	bpl	1b194 <__assert_fail@plt+0x95f0>
   1b210:	ldrb	r2, [r3, #16]
   1b214:	mov	r0, r4
   1b218:	vldr	s14, [r3, #4]
   1b21c:	cmp	r2, #0
   1b220:	vmul.f32	s15, s15, s14
   1b224:	vldreq	s14, [r3, #8]
   1b228:	vmuleq.f32	s15, s15, s14
   1b22c:	vcvt.u32.f32	s15, s15
   1b230:	vmov	r1, s15
   1b234:	bl	1ade4 <__assert_fail@plt+0x9240>
   1b238:	cmp	r0, #0
   1b23c:	bne	1b194 <__assert_fail@plt+0x95f0>
   1b240:	ldr	r0, [r4, #36]	; 0x24
   1b244:	cmp	r0, #0
   1b248:	beq	1b25c <__assert_fail@plt+0x96b8>
   1b24c:	ldr	r6, [r0, #4]
   1b250:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1b254:	subs	r0, r6, #0
   1b258:	bne	1b24c <__assert_fail@plt+0x96a8>
   1b25c:	mov	r3, #0
   1b260:	str	r3, [r4, #36]	; 0x24
   1b264:	b	1b194 <__assert_fail@plt+0x95f0>
   1b268:	b	1b150 <__assert_fail@plt+0x95ac>
   1b26c:	andeq	r0, r0, r0
   1b270:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b274:	strd	r6, [sp, #8]
   1b278:	mov	r7, r1
   1b27c:	mov	r6, r0
   1b280:	strd	r8, [sp, #16]
   1b284:	mov	r9, r3
   1b288:	ands	r3, r3, #32
   1b28c:	strd	sl, [sp, #24]
   1b290:	str	lr, [sp, #32]
   1b294:	vpush	{d8-d9}
   1b298:	sub	sp, sp, #124	; 0x7c
   1b29c:	str	r2, [sp, #20]
   1b2a0:	str	r3, [sp, #48]	; 0x30
   1b2a4:	movne	r3, #1024	; 0x400
   1b2a8:	moveq	r3, #1000	; 0x3e8
   1b2ac:	strd	r6, [sp, #32]
   1b2b0:	str	r3, [sp, #44]	; 0x2c
   1b2b4:	add	r3, r2, #644	; 0x284
   1b2b8:	mov	r5, r3
   1b2bc:	bl	11aa8 <localeconv@plt>
   1b2c0:	ldr	fp, [r0]
   1b2c4:	add	r3, r5, #3
   1b2c8:	mov	r4, r0
   1b2cc:	str	r3, [sp, #16]
   1b2d0:	and	r3, r9, #3
   1b2d4:	str	r3, [sp, #40]	; 0x28
   1b2d8:	mov	r0, fp
   1b2dc:	bl	11988 <strlen@plt>
   1b2e0:	sub	r2, r0, #1
   1b2e4:	ldr	sl, [r4, #4]
   1b2e8:	movw	r3, #9828	; 0x2664
   1b2ec:	movt	r3, #3
   1b2f0:	cmp	r2, #16
   1b2f4:	ldr	r2, [r4, #8]
   1b2f8:	movcs	fp, r3
   1b2fc:	str	r2, [sp, #52]	; 0x34
   1b300:	mov	r2, r0
   1b304:	movcc	r2, r0
   1b308:	movcs	r2, #1
   1b30c:	mov	r0, sl
   1b310:	str	r2, [sp, #12]
   1b314:	bl	11988 <strlen@plt>
   1b318:	cmp	r0, #16
   1b31c:	movw	r3, #11844	; 0x2e44
   1b320:	movt	r3, #3
   1b324:	ldrd	r4, [sp, #176]	; 0xb0
   1b328:	movhi	sl, r3
   1b32c:	ldrd	r2, [sp, #184]	; 0xb8
   1b330:	cmp	r3, r5
   1b334:	cmpeq	r2, r4
   1b338:	bhi	1b5f0 <__assert_fail@plt+0x9a4c>
   1b33c:	mov	r0, r4
   1b340:	mov	r1, r5
   1b344:	bl	31264 <__assert_fail@plt+0x1f6c0>
   1b348:	orrs	r3, r2, r3
   1b34c:	bne	1b38c <__assert_fail@plt+0x97e8>
   1b350:	mul	ip, r0, r7
   1b354:	mov	r4, r6
   1b358:	mov	r5, r7
   1b35c:	mov	r3, r1
   1b360:	umull	r6, r7, r0, r6
   1b364:	mov	r2, r0
   1b368:	mla	r1, r4, r1, ip
   1b36c:	strd	r6, [sp, #24]
   1b370:	add	r1, r1, r7
   1b374:	str	r1, [sp, #28]
   1b378:	ldrd	r0, [sp, #24]
   1b37c:	bl	31264 <__assert_fail@plt+0x1f6c0>
   1b380:	cmp	r1, r5
   1b384:	cmpeq	r0, r4
   1b388:	beq	1b93c <__assert_fail@plt+0x9d98>
   1b38c:	ldrd	r0, [sp, #176]	; 0xb0
   1b390:	bl	3111c <__assert_fail@plt+0x1f578>
   1b394:	vmov	d9, r0, r1
   1b398:	ldrd	r0, [sp, #184]	; 0xb8
   1b39c:	bl	3111c <__assert_fail@plt+0x1f578>
   1b3a0:	vmov	d7, r0, r1
   1b3a4:	ldrd	r0, [sp, #32]
   1b3a8:	vdiv.f64	d8, d9, d7
   1b3ac:	bl	3111c <__assert_fail@plt+0x1f578>
   1b3b0:	vmov	d7, r0, r1
   1b3b4:	tst	r9, #16
   1b3b8:	vmul.f64	d8, d8, d7
   1b3bc:	beq	1b534 <__assert_fail@plt+0x9990>
   1b3c0:	ldr	r6, [sp, #12]
   1b3c4:	mov	r7, #0
   1b3c8:	vldr	s15, [sp, #44]	; 0x2c
   1b3cc:	vcvt.f64.s32	d6, s15
   1b3d0:	vmov.f64	d7, d6
   1b3d4:	vmov.f64	d5, d7
   1b3d8:	vmul.f64	d7, d7, d6
   1b3dc:	add	r7, r7, #1
   1b3e0:	vcmpe.f64	d7, d8
   1b3e4:	vmrs	APSR_nzcv, fpscr
   1b3e8:	bhi	1b3f4 <__assert_fail@plt+0x9850>
   1b3ec:	cmp	r7, #8
   1b3f0:	bne	1b3d4 <__assert_fail@plt+0x9830>
   1b3f4:	ldr	fp, [sp, #40]	; 0x28
   1b3f8:	add	r8, r6, #1
   1b3fc:	vdiv.f64	d9, d8, d5
   1b400:	str	r6, [sp, #12]
   1b404:	ldr	r3, [sp, #48]	; 0x30
   1b408:	cmp	fp, #1
   1b40c:	clz	r4, r3
   1b410:	lsr	r4, r4, #5
   1b414:	add	r4, r4, #1
   1b418:	add	r4, r4, r8
   1b41c:	beq	1ba0c <__assert_fail@plt+0x9e68>
   1b420:	vldr	d7, [pc, #1000]	; 1b810 <__assert_fail@plt+0x9c6c>
   1b424:	vcmpe.f64	d9, d7
   1b428:	vmrs	APSR_nzcv, fpscr
   1b42c:	vmovpl.f64	d7, d9
   1b430:	bpl	1b470 <__assert_fail@plt+0x98cc>
   1b434:	vmov	r0, r1, d9
   1b438:	bl	312b0 <__assert_fail@plt+0x1f70c>
   1b43c:	mov	r5, r0
   1b440:	mov	r6, r1
   1b444:	bl	3111c <__assert_fail@plt+0x1f578>
   1b448:	cmp	fp, #0
   1b44c:	vmov	d7, r0, r1
   1b450:	bne	1b470 <__assert_fail@plt+0x98cc>
   1b454:	vcmp.f64	d9, d7
   1b458:	vmrs	APSR_nzcv, fpscr
   1b45c:	beq	1b470 <__assert_fail@plt+0x98cc>
   1b460:	adds	r0, r5, #1
   1b464:	adc	r1, r6, #0
   1b468:	bl	3111c <__assert_fail@plt+0x1f578>
   1b46c:	vmov	d7, r0, r1
   1b470:	ldr	r5, [sp, #20]
   1b474:	mvn	r2, #0
   1b478:	mov	r1, #1
   1b47c:	movw	r3, #11912	; 0x2e88
   1b480:	movt	r3, #3
   1b484:	vstr	d7, [sp]
   1b488:	mov	r0, r5
   1b48c:	bl	119d0 <__sprintf_chk@plt>
   1b490:	mov	r0, r5
   1b494:	bl	11988 <strlen@plt>
   1b498:	cmp	r0, r4
   1b49c:	bls	1b8d4 <__assert_fail@plt+0x9d30>
   1b4a0:	vldr	d7, [pc, #880]	; 1b818 <__assert_fail@plt+0x9c74>
   1b4a4:	vmul.f64	d9, d9, d7
   1b4a8:	vldr	d7, [pc, #864]	; 1b810 <__assert_fail@plt+0x9c6c>
   1b4ac:	vcmpe.f64	d9, d7
   1b4b0:	vmrs	APSR_nzcv, fpscr
   1b4b4:	bpl	1b4fc <__assert_fail@plt+0x9958>
   1b4b8:	vmov	r0, r1, d9
   1b4bc:	bl	312b0 <__assert_fail@plt+0x1f70c>
   1b4c0:	mov	r4, r0
   1b4c4:	mov	r5, r1
   1b4c8:	bl	3111c <__assert_fail@plt+0x1f578>
   1b4cc:	ldr	r3, [sp, #40]	; 0x28
   1b4d0:	vmov	d7, r0, r1
   1b4d4:	cmp	r3, #0
   1b4d8:	bne	1b4f8 <__assert_fail@plt+0x9954>
   1b4dc:	vcmp.f64	d9, d7
   1b4e0:	vmrs	APSR_nzcv, fpscr
   1b4e4:	beq	1b4f8 <__assert_fail@plt+0x9954>
   1b4e8:	adds	r0, r4, #1
   1b4ec:	adc	r1, r5, #0
   1b4f0:	bl	3111c <__assert_fail@plt+0x1f578>
   1b4f4:	vmov	d7, r0, r1
   1b4f8:	vmov.f64	d9, d7
   1b4fc:	vldr	d6, [pc, #788]	; 1b818 <__assert_fail@plt+0x9c74>
   1b500:	mvn	r2, #0
   1b504:	mov	r1, #1
   1b508:	movw	r3, #11904	; 0x2e80
   1b50c:	movt	r3, #3
   1b510:	ldr	r4, [sp, #20]
   1b514:	vdiv.f64	d7, d9, d6
   1b518:	mov	r0, r4
   1b51c:	vstr	d7, [sp]
   1b520:	bl	119d0 <__sprintf_chk@plt>
   1b524:	mov	r0, r4
   1b528:	bl	11988 <strlen@plt>
   1b52c:	mov	r8, r0
   1b530:	b	1b580 <__assert_fail@plt+0x99dc>
   1b534:	and	r6, r9, #3
   1b538:	cmp	r6, #1
   1b53c:	beq	1b550 <__assert_fail@plt+0x99ac>
   1b540:	vldr	d7, [pc, #712]	; 1b810 <__assert_fail@plt+0x9c6c>
   1b544:	vcmpe.f64	d8, d7
   1b548:	vmrs	APSR_nzcv, fpscr
   1b54c:	bmi	1b8f8 <__assert_fail@plt+0x9d54>
   1b550:	ldr	r4, [sp, #20]
   1b554:	mvn	r2, #0
   1b558:	mov	r1, #1
   1b55c:	movw	r3, #11904	; 0x2e80
   1b560:	movt	r3, #3
   1b564:	vstr	d8, [sp]
   1b568:	mov	r7, r2
   1b56c:	mov	r0, r4
   1b570:	bl	119d0 <__sprintf_chk@plt>
   1b574:	mov	r0, r4
   1b578:	bl	11988 <strlen@plt>
   1b57c:	mov	r8, r0
   1b580:	ldr	r3, [sp, #16]
   1b584:	mov	r2, r0
   1b588:	ldr	r1, [sp, #20]
   1b58c:	sub	r6, r3, r0
   1b590:	mov	r0, r6
   1b594:	add	r8, r6, r8
   1b598:	bl	11748 <memmove@plt>
   1b59c:	tst	r9, #4
   1b5a0:	bne	1b764 <__assert_fail@plt+0x9bc0>
   1b5a4:	tst	r9, #128	; 0x80
   1b5a8:	beq	1b5c0 <__assert_fail@plt+0x9a1c>
   1b5ac:	cmn	r7, #1
   1b5b0:	beq	1b820 <__assert_fail@plt+0x9c7c>
   1b5b4:	and	r3, r9, #256	; 0x100
   1b5b8:	orrs	r2, r3, r7
   1b5bc:	bne	1ba94 <__assert_fail@plt+0x9ef0>
   1b5c0:	ldr	r2, [sp, #16]
   1b5c4:	mov	r3, #0
   1b5c8:	mov	r0, r6
   1b5cc:	strb	r3, [r2]
   1b5d0:	add	sp, sp, #124	; 0x7c
   1b5d4:	vpop	{d8-d9}
   1b5d8:	ldrd	r4, [sp]
   1b5dc:	ldrd	r6, [sp, #8]
   1b5e0:	ldrd	r8, [sp, #16]
   1b5e4:	ldrd	sl, [sp, #24]
   1b5e8:	add	sp, sp, #32
   1b5ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5f0:	ldrd	r2, [sp, #176]	; 0xb0
   1b5f4:	orrs	r3, r2, r3
   1b5f8:	beq	1b38c <__assert_fail@plt+0x97e8>
   1b5fc:	ldrd	r2, [sp, #176]	; 0xb0
   1b600:	ldrd	r0, [sp, #184]	; 0xb8
   1b604:	bl	31264 <__assert_fail@plt+0x1f6c0>
   1b608:	orrs	r3, r2, r3
   1b60c:	mov	r4, r0
   1b610:	mov	r5, r1
   1b614:	bne	1b38c <__assert_fail@plt+0x97e8>
   1b618:	mov	r2, r4
   1b61c:	mov	r3, r5
   1b620:	ldrd	r0, [sp, #32]
   1b624:	bl	31264 <__assert_fail@plt+0x1f6c0>
   1b628:	mov	lr, r2
   1b62c:	mov	r8, r1
   1b630:	lsl	r1, r3, #2
   1b634:	mov	r7, r0
   1b638:	lsl	r0, lr, #2
   1b63c:	mov	ip, r3
   1b640:	orr	r1, r1, lr, lsr #30
   1b644:	mov	r2, r4
   1b648:	mov	r3, r5
   1b64c:	adds	r0, r0, lr
   1b650:	adc	r1, r1, ip
   1b654:	adds	r0, r0, r0
   1b658:	adc	r1, r1, r1
   1b65c:	bl	31264 <__assert_fail@plt+0x1f6c0>
   1b660:	adds	r1, r2, r2
   1b664:	mov	r2, r4
   1b668:	str	r7, [sp, #24]
   1b66c:	adc	r3, r3, r3
   1b670:	mov	lr, r0
   1b674:	str	r8, [sp, #28]
   1b678:	str	r1, [sp, #56]	; 0x38
   1b67c:	str	r3, [sp, #60]	; 0x3c
   1b680:	mov	r3, r5
   1b684:	ldrd	r4, [sp, #56]	; 0x38
   1b688:	cmp	r3, r5
   1b68c:	cmpeq	r2, r4
   1b690:	bls	1ba7c <__assert_fail@plt+0x9ed8>
   1b694:	mov	r3, r4
   1b698:	orrs	r3, r3, r5
   1b69c:	movne	r3, #1
   1b6a0:	moveq	r3, #0
   1b6a4:	mov	r6, r3
   1b6a8:	ands	r3, r9, #16
   1b6ac:	str	r3, [sp, #56]	; 0x38
   1b6b0:	beq	1b954 <__assert_fail@plt+0x9db0>
   1b6b4:	ldrd	r4, [sp, #24]
   1b6b8:	mov	r3, #0
   1b6bc:	mov	r7, #0
   1b6c0:	ldr	r8, [sp, #44]	; 0x2c
   1b6c4:	cmp	r3, r5
   1b6c8:	mov	r2, r8
   1b6cc:	cmpeq	r8, r4
   1b6d0:	strd	r2, [sp, #32]
   1b6d4:	bhi	1b958 <__assert_fail@plt+0x9db4>
   1b6d8:	str	fp, [sp, #64]	; 0x40
   1b6dc:	mov	fp, r6
   1b6e0:	mov	r6, lr
   1b6e4:	str	r9, [sp, #68]	; 0x44
   1b6e8:	ldr	r9, [sp, #12]
   1b6ec:	b	1b714 <__assert_fail@plt+0x9b70>
   1b6f0:	adds	fp, fp, #0
   1b6f4:	movne	fp, #1
   1b6f8:	ldrd	r2, [sp, #32]
   1b6fc:	add	r7, r7, #1
   1b700:	cmp	r3, r1
   1b704:	cmpeq	r2, r0
   1b708:	bhi	1bb18 <__assert_fail@plt+0x9f74>
   1b70c:	cmp	r7, #8
   1b710:	beq	1bae0 <__assert_fail@plt+0x9f3c>
   1b714:	mov	r0, r4
   1b718:	mov	r1, r5
   1b71c:	ldrd	r2, [sp, #32]
   1b720:	bl	31264 <__assert_fail@plt+0x1f6c0>
   1b724:	add	r2, r2, r2, lsl #2
   1b728:	mov	r4, r0
   1b72c:	mov	r5, r1
   1b730:	asr	r3, fp, #1
   1b734:	add	r6, r6, r2, lsl #1
   1b738:	udiv	ip, r6, r8
   1b73c:	mls	r2, r8, ip, r6
   1b740:	mov	r6, ip
   1b744:	add	r3, r3, r2, lsl #1
   1b748:	cmp	r8, r3
   1b74c:	add	fp, fp, r3
   1b750:	bhi	1b6f0 <__assert_fail@plt+0x9b4c>
   1b754:	cmp	r8, fp
   1b758:	movcc	fp, #3
   1b75c:	movcs	fp, #2
   1b760:	b	1b6f8 <__assert_fail@plt+0x9b54>
   1b764:	mov	r0, sl
   1b768:	sub	r4, r8, r6
   1b76c:	bl	11988 <strlen@plt>
   1b770:	mov	fp, r0
   1b774:	mov	r1, r6
   1b778:	mov	r2, r4
   1b77c:	add	r0, sp, #76	; 0x4c
   1b780:	mov	r3, #41	; 0x29
   1b784:	mvn	r5, #0
   1b788:	bl	1185c <__memcpy_chk@plt>
   1b78c:	ldr	r6, [sp, #52]	; 0x34
   1b790:	str	r7, [sp, #12]
   1b794:	ldrb	r3, [r6]
   1b798:	cmp	r3, #0
   1b79c:	beq	1b7b0 <__assert_fail@plt+0x9c0c>
   1b7a0:	cmp	r3, #255	; 0xff
   1b7a4:	add	r6, r6, #1
   1b7a8:	movne	r5, r3
   1b7ac:	moveq	r5, r4
   1b7b0:	sub	r7, r8, r5
   1b7b4:	cmp	r5, r4
   1b7b8:	mov	r2, r5
   1b7bc:	mov	r0, r7
   1b7c0:	bls	1b7e0 <__assert_fail@plt+0x9c3c>
   1b7c4:	sub	r6, r8, r4
   1b7c8:	mov	r2, r4
   1b7cc:	ldr	r7, [sp, #12]
   1b7d0:	add	r1, sp, #76	; 0x4c
   1b7d4:	mov	r0, r6
   1b7d8:	bl	11784 <memcpy@plt>
   1b7dc:	b	1b5a4 <__assert_fail@plt+0x9a00>
   1b7e0:	sub	r4, r4, r5
   1b7e4:	add	r3, sp, #76	; 0x4c
   1b7e8:	add	r1, r3, r4
   1b7ec:	sub	r8, r7, fp
   1b7f0:	bl	11784 <memcpy@plt>
   1b7f4:	cmp	r4, #0
   1b7f8:	mov	r2, fp
   1b7fc:	mov	r1, sl
   1b800:	mov	r0, r8
   1b804:	beq	1bc84 <__assert_fail@plt+0xa0e0>
   1b808:	bl	11784 <memcpy@plt>
   1b80c:	b	1b794 <__assert_fail@plt+0x9bf0>
   1b810:	andeq	r0, r0, r0
   1b814:	mvnsmi	r0, #0
   1b818:	andeq	r0, r0, r0
   1b81c:	eormi	r0, r4, r0
   1b820:	ldrd	r2, [sp, #184]	; 0xb8
   1b824:	cmp	r3, #0
   1b828:	cmpeq	r2, #1
   1b82c:	bls	1bad8 <__assert_fail@plt+0x9f34>
   1b830:	ldr	r1, [sp, #44]	; 0x2c
   1b834:	mov	r7, #1
   1b838:	mov	r2, #1
   1b83c:	mov	r3, #0
   1b840:	ldrd	r4, [sp, #184]	; 0xb8
   1b844:	mul	r0, r1, r3
   1b848:	umull	r2, r3, r2, r1
   1b84c:	add	r3, r0, r3
   1b850:	cmp	r5, r3
   1b854:	cmpeq	r4, r2
   1b858:	bls	1b868 <__assert_fail@plt+0x9cc4>
   1b85c:	add	r7, r7, #1
   1b860:	cmp	r7, #8
   1b864:	bne	1b844 <__assert_fail@plt+0x9ca0>
   1b868:	tst	r9, #64	; 0x40
   1b86c:	and	r3, r9, #256	; 0x100
   1b870:	beq	1b890 <__assert_fail@plt+0x9cec>
   1b874:	ldr	r1, [sp, #20]
   1b878:	mov	r2, #32
   1b87c:	add	r0, r1, #648	; 0x288
   1b880:	strb	r2, [r1, #647]	; 0x287
   1b884:	str	r0, [sp, #16]
   1b888:	cmp	r7, #0
   1b88c:	beq	1bc74 <__assert_fail@plt+0xa0d0>
   1b890:	ldr	r0, [sp, #48]	; 0x30
   1b894:	cmp	r0, #0
   1b898:	cmpeq	r7, #1
   1b89c:	beq	1bafc <__assert_fail@plt+0x9f58>
   1b8a0:	movw	r2, #11872	; 0x2e60
   1b8a4:	movt	r2, #3
   1b8a8:	ldrb	r1, [r2, r7]
   1b8ac:	cmp	r3, #0
   1b8b0:	ldr	r2, [sp, #16]
   1b8b4:	strb	r1, [r2], #1
   1b8b8:	beq	1bb10 <__assert_fail@plt+0x9f6c>
   1b8bc:	cmp	r0, #0
   1b8c0:	bne	1baa0 <__assert_fail@plt+0x9efc>
   1b8c4:	mov	r3, #66	; 0x42
   1b8c8:	strb	r3, [r2], #1
   1b8cc:	str	r2, [sp, #16]
   1b8d0:	b	1b5c0 <__assert_fail@plt+0x9a1c>
   1b8d4:	tst	r9, #8
   1b8d8:	beq	1b8f0 <__assert_fail@plt+0x9d4c>
   1b8dc:	ldr	r3, [sp, #20]
   1b8e0:	add	r3, r3, r0
   1b8e4:	ldrb	r3, [r3, #-1]
   1b8e8:	cmp	r3, #48	; 0x30
   1b8ec:	beq	1bbc4 <__assert_fail@plt+0xa020>
   1b8f0:	sub	r8, r0, r8
   1b8f4:	b	1b580 <__assert_fail@plt+0x99dc>
   1b8f8:	vmov	r0, r1, d8
   1b8fc:	bl	312b0 <__assert_fail@plt+0x1f70c>
   1b900:	mov	r4, r0
   1b904:	mov	r5, r1
   1b908:	bl	3111c <__assert_fail@plt+0x1f578>
   1b90c:	cmp	r6, #0
   1b910:	vmov	d7, r0, r1
   1b914:	bne	1b934 <__assert_fail@plt+0x9d90>
   1b918:	vcmp.f64	d8, d7
   1b91c:	vmrs	APSR_nzcv, fpscr
   1b920:	beq	1b934 <__assert_fail@plt+0x9d90>
   1b924:	adds	r0, r4, #1
   1b928:	adc	r1, r5, #0
   1b92c:	bl	3111c <__assert_fail@plt+0x1f578>
   1b930:	vmov	d7, r0, r1
   1b934:	vmov.f64	d8, d7
   1b938:	b	1b550 <__assert_fail@plt+0x99ac>
   1b93c:	mov	r3, #0
   1b940:	mov	r6, r3
   1b944:	mov	lr, r3
   1b948:	ands	r3, r9, #16
   1b94c:	str	r3, [sp, #56]	; 0x38
   1b950:	bne	1b6b4 <__assert_fail@plt+0x9b10>
   1b954:	mvn	r7, #0
   1b958:	ldr	r3, [sp, #40]	; 0x28
   1b95c:	cmp	r3, #1
   1b960:	beq	1ba48 <__assert_fail@plt+0x9ea4>
   1b964:	ldr	r8, [sp, #16]
   1b968:	ldr	r3, [sp, #40]	; 0x28
   1b96c:	cmp	r3, #0
   1b970:	bne	1b9bc <__assert_fail@plt+0x9e18>
   1b974:	add	r3, r6, lr
   1b978:	cmp	r3, #0
   1b97c:	ble	1b9bc <__assert_fail@plt+0x9e18>
   1b980:	ldr	r3, [sp, #24]
   1b984:	adds	r3, r3, #1
   1b988:	str	r3, [sp, #24]
   1b98c:	ldr	r3, [sp, #28]
   1b990:	adc	r3, r3, #0
   1b994:	str	r3, [sp, #28]
   1b998:	ldr	r3, [sp, #56]	; 0x38
   1b99c:	cmp	r3, #0
   1b9a0:	beq	1b9bc <__assert_fail@plt+0x9e18>
   1b9a4:	ldrd	r0, [sp, #24]
   1b9a8:	mov	r3, #0
   1b9ac:	ldr	r2, [sp, #44]	; 0x2c
   1b9b0:	cmp	r3, r1
   1b9b4:	cmpeq	r2, r0
   1b9b8:	beq	1bab4 <__assert_fail@plt+0x9f10>
   1b9bc:	ldrd	r4, [sp, #24]
   1b9c0:	mov	r6, r8
   1b9c4:	mov	r0, r4
   1b9c8:	mov	r1, r5
   1b9cc:	mov	r2, #10
   1b9d0:	mov	r3, #0
   1b9d4:	bl	31264 <__assert_fail@plt+0x1f6c0>
   1b9d8:	add	r2, r2, #48	; 0x30
   1b9dc:	mov	r0, r4
   1b9e0:	mov	r1, r5
   1b9e4:	mov	r3, #0
   1b9e8:	strb	r2, [r6, #-1]!
   1b9ec:	mov	r2, #10
   1b9f0:	bl	31264 <__assert_fail@plt+0x1f6c0>
   1b9f4:	cmp	r5, #0
   1b9f8:	mov	r5, r1
   1b9fc:	cmpeq	r4, #9
   1ba00:	mov	r4, r0
   1ba04:	bhi	1b9c4 <__assert_fail@plt+0x9e20>
   1ba08:	b	1b59c <__assert_fail@plt+0x99f8>
   1ba0c:	ldr	r5, [sp, #20]
   1ba10:	mvn	r2, #0
   1ba14:	movw	r3, #11912	; 0x2e88
   1ba18:	movt	r3, #3
   1ba1c:	vstr	d9, [sp]
   1ba20:	ldr	r1, [sp, #40]	; 0x28
   1ba24:	mov	r0, r5
   1ba28:	bl	119d0 <__sprintf_chk@plt>
   1ba2c:	mov	r0, r5
   1ba30:	bl	11988 <strlen@plt>
   1ba34:	cmp	r0, r4
   1ba38:	bls	1b8d4 <__assert_fail@plt+0x9d30>
   1ba3c:	vldr	d7, [pc, #-556]	; 1b818 <__assert_fail@plt+0x9c74>
   1ba40:	vmul.f64	d9, d9, d7
   1ba44:	b	1b4fc <__assert_fail@plt+0x9958>
   1ba48:	mov	r5, #0
   1ba4c:	ldr	r8, [sp, #16]
   1ba50:	ldr	r3, [sp, #24]
   1ba54:	and	r4, r3, #1
   1ba58:	adds	r2, r4, r6
   1ba5c:	adc	r3, r5, r6, asr #31
   1ba60:	orr	r2, r2, r3
   1ba64:	mov	r3, lr
   1ba68:	cmp	r2, r5
   1ba6c:	addne	r3, r3, #1
   1ba70:	cmp	r3, #5
   1ba74:	bgt	1b980 <__assert_fail@plt+0x9ddc>
   1ba78:	b	1b9bc <__assert_fail@plt+0x9e18>
   1ba7c:	movcs	r3, #2
   1ba80:	movcs	r6, r3
   1ba84:	bcs	1b6a8 <__assert_fail@plt+0x9b04>
   1ba88:	mov	r3, #3
   1ba8c:	mov	r6, r3
   1ba90:	b	1b6a8 <__assert_fail@plt+0x9b04>
   1ba94:	tst	r9, #64	; 0x40
   1ba98:	beq	1b888 <__assert_fail@plt+0x9ce4>
   1ba9c:	b	1b874 <__assert_fail@plt+0x9cd0>
   1baa0:	ldr	r1, [sp, #16]
   1baa4:	mov	r3, #105	; 0x69
   1baa8:	add	r2, r1, #2
   1baac:	strb	r3, [r1, #1]
   1bab0:	b	1b8c4 <__assert_fail@plt+0x9d20>
   1bab4:	cmp	r7, #8
   1bab8:	beq	1b9bc <__assert_fail@plt+0x9e18>
   1babc:	tst	r9, #8
   1bac0:	add	r7, r7, #1
   1bac4:	beq	1bc3c <__assert_fail@plt+0xa098>
   1bac8:	mov	r3, #49	; 0x31
   1bacc:	sub	r6, r8, #1
   1bad0:	strb	r3, [r8, #-1]
   1bad4:	b	1b59c <__assert_fail@plt+0x99f8>
   1bad8:	mov	r7, #0
   1badc:	b	1b5b4 <__assert_fail@plt+0x9a10>
   1bae0:	mov	lr, r6
   1bae4:	mov	r6, fp
   1bae8:	str	r9, [sp, #12]
   1baec:	strd	r4, [sp, #24]
   1baf0:	ldr	fp, [sp, #64]	; 0x40
   1baf4:	ldr	r9, [sp, #68]	; 0x44
   1baf8:	b	1b958 <__assert_fail@plt+0x9db4>
   1bafc:	ldr	r2, [sp, #16]
   1bb00:	mov	r1, #107	; 0x6b
   1bb04:	cmp	r3, #0
   1bb08:	strb	r1, [r2], #1
   1bb0c:	bne	1b8c4 <__assert_fail@plt+0x9d20>
   1bb10:	str	r2, [sp, #16]
   1bb14:	b	1b5c0 <__assert_fail@plt+0x9a1c>
   1bb18:	cmp	r1, #0
   1bb1c:	mov	lr, r6
   1bb20:	str	r9, [sp, #12]
   1bb24:	cmpeq	r0, #9
   1bb28:	mov	r6, fp
   1bb2c:	strd	r4, [sp, #24]
   1bb30:	ldr	fp, [sp, #64]	; 0x40
   1bb34:	ldr	r9, [sp, #68]	; 0x44
   1bb38:	bhi	1b958 <__assert_fail@plt+0x9db4>
   1bb3c:	ldr	r3, [sp, #40]	; 0x28
   1bb40:	cmp	r3, #1
   1bb44:	beq	1bbf0 <__assert_fail@plt+0xa04c>
   1bb48:	ldr	r2, [sp, #40]	; 0x28
   1bb4c:	adds	r3, r6, #0
   1bb50:	movne	r3, #1
   1bb54:	cmp	r2, #0
   1bb58:	movne	r3, #0
   1bb5c:	cmp	r3, #0
   1bb60:	bne	1bbdc <__assert_fail@plt+0xa038>
   1bb64:	cmp	ip, #0
   1bb68:	addne	r3, ip, #48	; 0x30
   1bb6c:	uxtbne	r3, r3
   1bb70:	bne	1bb80 <__assert_fail@plt+0x9fdc>
   1bb74:	tst	r9, #8
   1bb78:	bne	1bc34 <__assert_fail@plt+0xa090>
   1bb7c:	mov	r3, #48	; 0x30
   1bb80:	ldr	r2, [sp, #12]
   1bb84:	ldr	r1, [sp, #20]
   1bb88:	add	r8, r1, #644	; 0x284
   1bb8c:	strb	r3, [r1, #646]	; 0x286
   1bb90:	mov	r3, #0
   1bb94:	add	r8, r8, #2
   1bb98:	mov	r1, fp
   1bb9c:	sub	r8, r8, r2
   1bba0:	mov	r6, r3
   1bba4:	mov	r0, r8
   1bba8:	bl	11784 <memcpy@plt>
   1bbac:	ldr	r3, [sp, #40]	; 0x28
   1bbb0:	cmp	r3, #1
   1bbb4:	beq	1b9bc <__assert_fail@plt+0x9e18>
   1bbb8:	mov	r3, #0
   1bbbc:	mov	lr, r3
   1bbc0:	b	1b968 <__assert_fail@plt+0x9dc4>
   1bbc4:	vldr	d7, [pc, #-948]	; 1b818 <__assert_fail@plt+0x9c74>
   1bbc8:	ldr	r3, [sp, #40]	; 0x28
   1bbcc:	vmul.f64	d9, d9, d7
   1bbd0:	cmp	r3, #1
   1bbd4:	bne	1b4a8 <__assert_fail@plt+0x9904>
   1bbd8:	b	1b4fc <__assert_fail@plt+0x9958>
   1bbdc:	cmp	ip, #9
   1bbe0:	beq	1bc08 <__assert_fail@plt+0xa064>
   1bbe4:	add	r3, ip, #49	; 0x31
   1bbe8:	uxtb	r3, r3
   1bbec:	b	1bb80 <__assert_fail@plt+0x9fdc>
   1bbf0:	and	r3, ip, #1
   1bbf4:	add	r3, r3, r6
   1bbf8:	cmp	r3, #2
   1bbfc:	movle	r3, #0
   1bc00:	movgt	r3, #1
   1bc04:	b	1bb5c <__assert_fail@plt+0x9fb8>
   1bc08:	adds	r3, r0, #1
   1bc0c:	str	r3, [sp, #24]
   1bc10:	adc	r3, r1, #0
   1bc14:	str	r3, [sp, #28]
   1bc18:	ldrd	r2, [sp, #24]
   1bc1c:	cmp	r3, #0
   1bc20:	cmpeq	r2, #10
   1bc24:	beq	1bc64 <__assert_fail@plt+0xa0c0>
   1bc28:	mov	r3, #0
   1bc2c:	mov	r6, r3
   1bc30:	b	1bb74 <__assert_fail@plt+0x9fd0>
   1bc34:	ldr	r8, [sp, #16]
   1bc38:	b	1bbac <__assert_fail@plt+0xa008>
   1bc3c:	ldr	r3, [sp, #12]
   1bc40:	mov	r0, #48	; 0x30
   1bc44:	mov	r1, fp
   1bc48:	strb	r0, [r8, #-1]
   1bc4c:	ldr	r2, [sp, #12]
   1bc50:	mvn	r3, r3
   1bc54:	add	r8, r8, r3
   1bc58:	mov	r0, r8
   1bc5c:	bl	11784 <memcpy@plt>
   1bc60:	b	1bac8 <__assert_fail@plt+0x9f24>
   1bc64:	mov	r3, #0
   1bc68:	ldr	r8, [sp, #16]
   1bc6c:	mov	r6, r3
   1bc70:	b	1bbac <__assert_fail@plt+0xa008>
   1bc74:	cmp	r3, #0
   1bc78:	ldrne	r2, [sp, #16]
   1bc7c:	bne	1b8c4 <__assert_fail@plt+0x9d20>
   1bc80:	b	1b5c0 <__assert_fail@plt+0x9a1c>
   1bc84:	mov	r6, r7
   1bc88:	ldr	r7, [sp, #12]
   1bc8c:	b	1b5a4 <__assert_fail@plt+0x9a00>
   1bc90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1bc94:	subs	r4, r0, #0
   1bc98:	strd	r6, [sp, #8]
   1bc9c:	mov	r7, r1
   1bca0:	mov	r6, r2
   1bca4:	str	r8, [sp, #16]
   1bca8:	strd	sl, [sp, #20]
   1bcac:	str	lr, [sp, #28]
   1bcb0:	sub	sp, sp, #16
   1bcb4:	beq	1bdd4 <__assert_fail@plt+0xa230>
   1bcb8:	ldrb	r3, [r4]
   1bcbc:	movw	r5, #11872	; 0x2e60
   1bcc0:	movt	r5, #3
   1bcc4:	add	r2, r5, #12
   1bcc8:	add	r1, r5, #20
   1bccc:	cmp	r3, #39	; 0x27
   1bcd0:	mov	r3, #4
   1bcd4:	addeq	r4, r4, #1
   1bcd8:	moveq	r8, #4
   1bcdc:	mov	r0, r4
   1bce0:	movne	r8, #0
   1bce4:	bl	13eec <__assert_fail@plt+0x2348>
   1bce8:	cmp	r0, #0
   1bcec:	blt	1bd2c <__assert_fail@plt+0xa188>
   1bcf0:	add	r5, r5, r0, lsl #2
   1bcf4:	mov	sl, #1
   1bcf8:	mov	fp, #0
   1bcfc:	mov	r0, #0
   1bd00:	ldr	r3, [r5, #12]
   1bd04:	strd	sl, [r6]
   1bd08:	orr	r3, r8, r3
   1bd0c:	str	r3, [r7]
   1bd10:	add	sp, sp, #16
   1bd14:	ldrd	r4, [sp]
   1bd18:	ldrd	r6, [sp, #8]
   1bd1c:	ldr	r8, [sp, #16]
   1bd20:	ldrd	sl, [sp, #20]
   1bd24:	add	sp, sp, #28
   1bd28:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd2c:	movw	r0, #11960	; 0x2eb8
   1bd30:	movt	r0, #3
   1bd34:	mov	r3, r6
   1bd38:	mov	r2, #0
   1bd3c:	add	r1, sp, #12
   1bd40:	str	r0, [sp]
   1bd44:	mov	r0, r4
   1bd48:	bl	2f368 <__assert_fail@plt+0x1d7c4>
   1bd4c:	cmp	r0, #0
   1bd50:	bne	1bd98 <__assert_fail@plt+0xa1f4>
   1bd54:	ldrb	r3, [r4]
   1bd58:	sub	r3, r3, #48	; 0x30
   1bd5c:	cmp	r3, #9
   1bd60:	bls	1bd8c <__assert_fail@plt+0xa1e8>
   1bd64:	ldr	r2, [sp, #12]
   1bd68:	cmp	r4, r2
   1bd6c:	bne	1bd7c <__assert_fail@plt+0xa1d8>
   1bd70:	b	1be28 <__assert_fail@plt+0xa284>
   1bd74:	cmp	r2, r4
   1bd78:	beq	1be28 <__assert_fail@plt+0xa284>
   1bd7c:	ldrb	r3, [r4, #1]!
   1bd80:	sub	r3, r3, #48	; 0x30
   1bd84:	cmp	r3, #9
   1bd88:	bhi	1bd74 <__assert_fail@plt+0xa1d0>
   1bd8c:	ldrd	r2, [r6]
   1bd90:	str	r8, [r7]
   1bd94:	b	1bda4 <__assert_fail@plt+0xa200>
   1bd98:	mov	r1, #0
   1bd9c:	ldrd	r2, [r6]
   1bda0:	str	r1, [r7]
   1bda4:	orrs	r3, r2, r3
   1bda8:	bne	1bd10 <__assert_fail@plt+0xa16c>
   1bdac:	movw	r0, #11944	; 0x2ea8
   1bdb0:	movt	r0, #3
   1bdb4:	bl	118ec <getenv@plt>
   1bdb8:	cmp	r0, #0
   1bdbc:	mov	r3, #0
   1bdc0:	moveq	r2, #1024	; 0x400
   1bdc4:	movne	r2, #512	; 0x200
   1bdc8:	mov	r0, #4
   1bdcc:	strd	r2, [r6]
   1bdd0:	b	1bd10 <__assert_fail@plt+0xa16c>
   1bdd4:	movw	r0, #11920	; 0x2e90
   1bdd8:	movt	r0, #3
   1bddc:	bl	118ec <getenv@plt>
   1bde0:	subs	r4, r0, #0
   1bde4:	bne	1bcb8 <__assert_fail@plt+0xa114>
   1bde8:	movw	r0, #11932	; 0x2e9c
   1bdec:	movt	r0, #3
   1bdf0:	bl	118ec <getenv@plt>
   1bdf4:	subs	r4, r0, #0
   1bdf8:	bne	1bcb8 <__assert_fail@plt+0xa114>
   1bdfc:	movw	r0, #11944	; 0x2ea8
   1be00:	movt	r0, #3
   1be04:	bl	118ec <getenv@plt>
   1be08:	subs	r3, r0, #0
   1be0c:	beq	1be54 <__assert_fail@plt+0xa2b0>
   1be10:	mov	r2, #512	; 0x200
   1be14:	mov	r3, #0
   1be18:	mov	r0, r4
   1be1c:	strd	r2, [r6]
   1be20:	str	r4, [r7]
   1be24:	b	1bd10 <__assert_fail@plt+0xa16c>
   1be28:	ldrb	r3, [r2, #-1]
   1be2c:	cmp	r3, #66	; 0x42
   1be30:	orrne	r8, r8, #128	; 0x80
   1be34:	beq	1be40 <__assert_fail@plt+0xa29c>
   1be38:	orr	r8, r8, #32
   1be3c:	b	1bd8c <__assert_fail@plt+0xa1e8>
   1be40:	ldrb	r3, [r2, #-2]
   1be44:	orr	r8, r8, #384	; 0x180
   1be48:	cmp	r3, #105	; 0x69
   1be4c:	bne	1bd8c <__assert_fail@plt+0xa1e8>
   1be50:	b	1be38 <__assert_fail@plt+0xa294>
   1be54:	mov	r4, #1024	; 0x400
   1be58:	mov	r5, #0
   1be5c:	mov	r0, r3
   1be60:	strd	r4, [r6]
   1be64:	str	r3, [r7]
   1be68:	b	1bd10 <__assert_fail@plt+0xa16c>
   1be6c:	mov	r3, #0
   1be70:	mov	r2, #1
   1be74:	str	r1, [r0]
   1be78:	str	r1, [r0, #4]
   1be7c:	str	r1, [r0, #8]
   1be80:	str	r1, [r0, #12]
   1be84:	str	r1, [r0, #16]
   1be88:	str	r3, [r0, #20]
   1be8c:	str	r3, [r0, #24]
   1be90:	strb	r2, [r0, #28]
   1be94:	bx	lr
   1be98:	ldrb	r0, [r0, #28]
   1be9c:	bx	lr
   1bea0:	ldrb	ip, [r0, #28]
   1bea4:	mov	r2, r0
   1bea8:	ldr	r3, [r0, #20]
   1beac:	eor	ip, ip, #1
   1beb0:	add	r3, ip, r3
   1beb4:	and	r3, r3, #3
   1beb8:	ldr	r0, [r0, r3, lsl #2]
   1bebc:	str	r1, [r2, r3, lsl #2]
   1bec0:	ldr	r1, [r2, #24]
   1bec4:	str	r3, [r2, #20]
   1bec8:	cmp	r1, r3
   1becc:	bne	1bedc <__assert_fail@plt+0xa338>
   1bed0:	add	ip, ip, r1
   1bed4:	and	ip, ip, #3
   1bed8:	str	ip, [r2, #24]
   1bedc:	mov	r3, #0
   1bee0:	strb	r3, [r2, #28]
   1bee4:	bx	lr
   1bee8:	ldrb	r3, [r0, #28]
   1beec:	cmp	r3, #0
   1bef0:	bne	1bf2c <__assert_fail@plt+0xa388>
   1bef4:	ldr	r1, [r0, #16]
   1bef8:	ldr	r3, [r0, #20]
   1befc:	ldr	r2, [r0, r3, lsl #2]
   1bf00:	str	r1, [r0, r3, lsl #2]
   1bf04:	ldr	r1, [r0, #24]
   1bf08:	cmp	r3, r1
   1bf0c:	moveq	r3, #1
   1bf10:	strbeq	r3, [r0, #28]
   1bf14:	beq	1bf24 <__assert_fail@plt+0xa380>
   1bf18:	add	r3, r3, #3
   1bf1c:	and	r3, r3, #3
   1bf20:	str	r3, [r0, #20]
   1bf24:	mov	r0, r2
   1bf28:	bx	lr
   1bf2c:	str	r4, [sp, #-8]!
   1bf30:	str	lr, [sp, #4]
   1bf34:	bl	11b68 <abort@plt>
   1bf38:	ldm	r0, {r0, r3}
   1bf3c:	eor	r3, r3, r0
   1bf40:	udiv	r0, r3, r1
   1bf44:	mls	r0, r0, r1, r3
   1bf48:	bx	lr
   1bf4c:	strd	r4, [sp, #-8]!
   1bf50:	ldrd	r2, [r1]
   1bf54:	ldrd	r4, [r0]
   1bf58:	cmp	r5, r3
   1bf5c:	cmpeq	r4, r2
   1bf60:	ldrd	r4, [sp]
   1bf64:	add	sp, sp, #8
   1bf68:	moveq	r0, #1
   1bf6c:	movne	r0, #0
   1bf70:	bx	lr
   1bf74:	strd	r4, [sp, #-12]!
   1bf78:	mov	r5, r0
   1bf7c:	mov	r0, #12
   1bf80:	str	lr, [sp, #8]
   1bf84:	sub	sp, sp, #12
   1bf88:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   1bf8c:	subs	r4, r0, #0
   1bf90:	beq	1bfd8 <__assert_fail@plt+0xa434>
   1bf94:	movw	r1, #31432	; 0x7ac8
   1bf98:	movt	r1, #1
   1bf9c:	movw	r3, #48972	; 0xbf4c
   1bfa0:	movt	r3, #1
   1bfa4:	movw	r2, #48952	; 0xbf38
   1bfa8:	movt	r2, #1
   1bfac:	str	r1, [sp]
   1bfb0:	movw	r0, #1021	; 0x3fd
   1bfb4:	mov	r1, #0
   1bfb8:	bl	1aab8 <__assert_fail@plt+0x8f14>
   1bfbc:	cmp	r0, #0
   1bfc0:	mov	r3, r0
   1bfc4:	str	r0, [r4]
   1bfc8:	movne	r3, #0
   1bfcc:	strne	r5, [r4, #4]
   1bfd0:	strne	r3, [r4, #8]
   1bfd4:	beq	1bfec <__assert_fail@plt+0xa448>
   1bfd8:	mov	r0, r4
   1bfdc:	add	sp, sp, #12
   1bfe0:	ldrd	r4, [sp]
   1bfe4:	add	sp, sp, #8
   1bfe8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfec:	mov	r0, r4
   1bff0:	mov	r4, r3
   1bff4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1bff8:	b	1bfd8 <__assert_fail@plt+0xa434>
   1bffc:	str	r4, [sp, #-8]!
   1c000:	mov	r4, r0
   1c004:	ldr	r0, [r0]
   1c008:	str	lr, [sp, #4]
   1c00c:	bl	1acec <__assert_fail@plt+0x9148>
   1c010:	ldr	r0, [r4, #8]
   1c014:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1c018:	mov	r0, r4
   1c01c:	ldr	r4, [sp]
   1c020:	ldr	lr, [sp, #4]
   1c024:	add	sp, sp, #8
   1c028:	b	17ac8 <__assert_fail@plt+0x5f24>
   1c02c:	strd	r4, [sp, #-12]!
   1c030:	mov	r5, r0
   1c034:	ldr	r4, [r0, #8]
   1c038:	str	lr, [sp, #8]
   1c03c:	sub	sp, sp, #12
   1c040:	cmp	r4, #0
   1c044:	beq	1c0b8 <__assert_fail@plt+0xa514>
   1c048:	ldrd	r0, [r4]
   1c04c:	cmp	r1, r3
   1c050:	cmpeq	r0, r2
   1c054:	beq	1c0ec <__assert_fail@plt+0xa548>
   1c058:	mov	r1, r4
   1c05c:	ldr	r0, [r5]
   1c060:	strd	r2, [r4]
   1c064:	bl	1b110 <__assert_fail@plt+0x956c>
   1c068:	cmp	r0, #0
   1c06c:	beq	1c0d8 <__assert_fail@plt+0xa534>
   1c070:	cmp	r4, r0
   1c074:	beq	1c090 <__assert_fail@plt+0xa4ec>
   1c078:	ldr	r0, [r0, #8]
   1c07c:	str	r0, [r4, #8]
   1c080:	add	sp, sp, #12
   1c084:	ldrd	r4, [sp]
   1c088:	add	sp, sp, #8
   1c08c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c090:	ldr	r0, [r5, #4]
   1c094:	mov	r3, #0
   1c098:	str	r3, [r5, #8]
   1c09c:	add	r3, r0, #1
   1c0a0:	str	r3, [r5, #4]
   1c0a4:	str	r0, [r4, #8]
   1c0a8:	add	sp, sp, #12
   1c0ac:	ldrd	r4, [sp]
   1c0b0:	add	sp, sp, #8
   1c0b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0b8:	mov	r0, #16
   1c0bc:	strd	r2, [sp]
   1c0c0:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   1c0c4:	cmp	r0, #0
   1c0c8:	mov	r4, r0
   1c0cc:	str	r0, [r5, #8]
   1c0d0:	ldrd	r2, [sp]
   1c0d4:	bne	1c058 <__assert_fail@plt+0xa4b4>
   1c0d8:	mvn	r0, #0
   1c0dc:	add	sp, sp, #12
   1c0e0:	ldrd	r4, [sp]
   1c0e4:	add	sp, sp, #8
   1c0e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0ec:	ldr	r0, [r4, #8]
   1c0f0:	add	sp, sp, #12
   1c0f4:	ldrd	r4, [sp]
   1c0f8:	add	sp, sp, #8
   1c0fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c100:	mov	r3, #0
   1c104:	cmp	r0, #0
   1c108:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c10c:	mov	r5, r1
   1c110:	sbcs	r1, r1, #0
   1c114:	strd	r6, [sp, #8]
   1c118:	mov	r4, r0
   1c11c:	add	r6, r2, #20
   1c120:	str	r8, [sp, #16]
   1c124:	str	lr, [sp, #20]
   1c128:	strb	r3, [r2, #20]
   1c12c:	blt	1c18c <__assert_fail@plt+0xa5e8>
   1c130:	mov	r0, r4
   1c134:	mov	r1, r5
   1c138:	mov	r2, #10
   1c13c:	mov	r3, #0
   1c140:	bl	31190 <__assert_fail@plt+0x1f5ec>
   1c144:	add	ip, r2, #48	; 0x30
   1c148:	mov	r0, r4
   1c14c:	mov	r1, r5
   1c150:	mov	r3, #0
   1c154:	mov	r2, #10
   1c158:	strb	ip, [r6, #-1]!
   1c15c:	bl	31190 <__assert_fail@plt+0x1f5ec>
   1c160:	mov	r4, r0
   1c164:	mov	r5, r1
   1c168:	orrs	r3, r4, r5
   1c16c:	bne	1c130 <__assert_fail@plt+0xa58c>
   1c170:	mov	r0, r6
   1c174:	ldrd	r4, [sp]
   1c178:	ldrd	r6, [sp, #8]
   1c17c:	ldr	r8, [sp, #16]
   1c180:	add	sp, sp, #20
   1c184:	pop	{pc}		; (ldr pc, [sp], #4)
   1c188:	mov	r6, r7
   1c18c:	mov	r0, r4
   1c190:	mov	r1, r5
   1c194:	mov	r2, #10
   1c198:	mov	r3, #0
   1c19c:	bl	31190 <__assert_fail@plt+0x1f5ec>
   1c1a0:	rsb	ip, r2, #48	; 0x30
   1c1a4:	mov	r0, r4
   1c1a8:	mov	r1, r5
   1c1ac:	mov	r3, #0
   1c1b0:	mov	r2, #10
   1c1b4:	strb	ip, [r6, #-1]
   1c1b8:	sub	r7, r6, #1
   1c1bc:	bl	31190 <__assert_fail@plt+0x1f5ec>
   1c1c0:	mov	r4, r0
   1c1c4:	mov	r5, r1
   1c1c8:	orrs	r3, r4, r5
   1c1cc:	bne	1c188 <__assert_fail@plt+0xa5e4>
   1c1d0:	mov	r3, #45	; 0x2d
   1c1d4:	sub	r6, r6, #2
   1c1d8:	strb	r3, [r7, #-1]
   1c1dc:	b	1c170 <__assert_fail@plt+0xa5cc>
   1c1e0:	str	r4, [sp, #-8]!
   1c1e4:	mov	r4, r0
   1c1e8:	str	lr, [sp, #4]
   1c1ec:	bl	1173c <wcwidth@plt>
   1c1f0:	cmp	r0, #0
   1c1f4:	bge	1c208 <__assert_fail@plt+0xa664>
   1c1f8:	mov	r0, r4
   1c1fc:	bl	11814 <iswcntrl@plt>
   1c200:	clz	r0, r0
   1c204:	lsr	r0, r0, #5
   1c208:	ldr	r4, [sp]
   1c20c:	add	sp, sp, #4
   1c210:	pop	{pc}		; (ldr pc, [sp], #4)
   1c214:	mov	r3, r1
   1c218:	strd	r4, [sp, #-16]!
   1c21c:	mov	r4, r1
   1c220:	ldr	r2, [r1, #4]
   1c224:	mov	r5, r0
   1c228:	ldr	r1, [r3], #16
   1c22c:	str	r6, [sp, #8]
   1c230:	str	lr, [sp, #12]
   1c234:	cmp	r1, r3
   1c238:	strne	r1, [r0]
   1c23c:	beq	1c268 <__assert_fail@plt+0xa6c4>
   1c240:	ldrb	r3, [r4, #8]
   1c244:	str	r2, [r5, #4]
   1c248:	ldr	r6, [sp, #8]
   1c24c:	cmp	r3, #0
   1c250:	strb	r3, [r5, #8]
   1c254:	ldrne	r3, [r4, #12]
   1c258:	strne	r3, [r5, #12]
   1c25c:	ldrd	r4, [sp]
   1c260:	add	sp, sp, #12
   1c264:	pop	{pc}		; (ldr pc, [sp], #4)
   1c268:	add	r3, r0, #16
   1c26c:	mov	r0, r3
   1c270:	bl	11784 <memcpy@plt>
   1c274:	ldr	r2, [r4, #4]
   1c278:	str	r0, [r5]
   1c27c:	b	1c240 <__assert_fail@plt+0xa69c>
   1c280:	lsr	r2, r0, #5
   1c284:	movw	r3, #11980	; 0x2ecc
   1c288:	movt	r3, #3
   1c28c:	and	r0, r0, #31
   1c290:	ldr	r3, [r3, r2, lsl #2]
   1c294:	lsr	r0, r3, r0
   1c298:	and	r0, r0, #1
   1c29c:	bx	lr
   1c2a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c2a4:	mov	r5, r2
   1c2a8:	strd	r6, [sp, #8]
   1c2ac:	subs	r6, r0, #0
   1c2b0:	mov	r7, r1
   1c2b4:	str	lr, [sp, #16]
   1c2b8:	sub	sp, sp, #12
   1c2bc:	addeq	r6, sp, #4
   1c2c0:	mov	r0, r6
   1c2c4:	bl	118b0 <mbrtowc@plt>
   1c2c8:	cmp	r5, #0
   1c2cc:	cmnne	r0, #3
   1c2d0:	mov	r4, r0
   1c2d4:	bhi	1c2f0 <__assert_fail@plt+0xa74c>
   1c2d8:	mov	r0, r4
   1c2dc:	add	sp, sp, #12
   1c2e0:	ldrd	r4, [sp]
   1c2e4:	ldrd	r6, [sp, #8]
   1c2e8:	add	sp, sp, #16
   1c2ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2f0:	mov	r0, #0
   1c2f4:	bl	30c24 <__assert_fail@plt+0x1f080>
   1c2f8:	cmp	r0, #0
   1c2fc:	bne	1c2d8 <__assert_fail@plt+0xa734>
   1c300:	ldrb	r3, [r7]
   1c304:	mov	r4, #1
   1c308:	str	r3, [r6]
   1c30c:	b	1c2d8 <__assert_fail@plt+0xa734>
   1c310:	movw	r3, #12012	; 0x2eec
   1c314:	movt	r3, #3
   1c318:	str	r4, [sp, #-8]!
   1c31c:	movw	r1, #11556	; 0x2d24
   1c320:	movt	r1, #3
   1c324:	str	lr, [sp, #4]
   1c328:	movw	r0, #11620	; 0x2d64
   1c32c:	movt	r0, #3
   1c330:	mov	r2, #172	; 0xac
   1c334:	bl	11ba4 <__assert_fail@plt>
   1c338:	cmp	r1, r0
   1c33c:	beq	1c70c <__assert_fail@plt+0xab68>
   1c340:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c344:	mov	r4, r0
   1c348:	strd	r6, [sp, #8]
   1c34c:	mov	r6, r1
   1c350:	str	r8, [sp, #16]
   1c354:	str	lr, [sp, #20]
   1c358:	sub	sp, sp, #112	; 0x70
   1c35c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1c360:	cmp	r0, #1
   1c364:	bls	1c504 <__assert_fail@plt+0xa960>
   1c368:	mov	r3, #0
   1c36c:	mov	r0, #0
   1c370:	mov	r1, #0
   1c374:	mov	r5, #1
   1c378:	strb	r3, [sp]
   1c37c:	strd	r0, [sp, #4]
   1c380:	strb	r3, [sp, #12]
   1c384:	str	r4, [sp, #16]
   1c388:	strb	r3, [sp, #56]	; 0x38
   1c38c:	strd	r0, [sp, #60]	; 0x3c
   1c390:	strb	r3, [sp, #68]	; 0x44
   1c394:	str	r6, [sp, #72]	; 0x48
   1c398:	movw	r6, #11980	; 0x2ecc
   1c39c:	movt	r6, #3
   1c3a0:	b	1c490 <__assert_fail@plt+0xa8ec>
   1c3a4:	ldrb	r3, [r4]
   1c3a8:	lsr	r2, r3, #5
   1c3ac:	and	r3, r3, #31
   1c3b0:	ldr	r2, [r6, r2, lsl #2]
   1c3b4:	lsr	r3, r2, r3
   1c3b8:	tst	r3, #1
   1c3bc:	beq	1c640 <__assert_fail@plt+0xaa9c>
   1c3c0:	str	r5, [sp, #20]
   1c3c4:	ldrb	r3, [r4]
   1c3c8:	strb	r5, [sp, #12]
   1c3cc:	strb	r5, [sp, #24]
   1c3d0:	mov	r4, r3
   1c3d4:	str	r3, [sp, #28]
   1c3d8:	cmp	r4, #0
   1c3dc:	beq	1c72c <__assert_fail@plt+0xab88>
   1c3e0:	ldrb	r3, [sp, #68]	; 0x44
   1c3e4:	cmp	r3, #0
   1c3e8:	bne	1c608 <__assert_fail@plt+0xaa64>
   1c3ec:	ldrb	r3, [sp, #56]	; 0x38
   1c3f0:	ldr	r4, [sp, #72]	; 0x48
   1c3f4:	cmp	r3, #0
   1c3f8:	addne	r8, sp, #60	; 0x3c
   1c3fc:	bne	1c5a4 <__assert_fail@plt+0xaa00>
   1c400:	ldrb	r3, [r4]
   1c404:	lsr	r2, r3, #5
   1c408:	and	r3, r3, #31
   1c40c:	ldr	r2, [r6, r2, lsl #2]
   1c410:	lsr	r3, r2, r3
   1c414:	tst	r3, #1
   1c418:	beq	1c58c <__assert_fail@plt+0xa9e8>
   1c41c:	str	r5, [sp, #76]	; 0x4c
   1c420:	ldrb	r3, [r4]
   1c424:	strb	r5, [sp, #68]	; 0x44
   1c428:	strb	r5, [sp, #80]	; 0x50
   1c42c:	mov	r7, r3
   1c430:	str	r3, [sp, #84]	; 0x54
   1c434:	cmp	r7, #0
   1c438:	beq	1c85c <__assert_fail@plt+0xacb8>
   1c43c:	ldrb	r3, [sp, #24]
   1c440:	cmp	r3, #0
   1c444:	beq	1c724 <__assert_fail@plt+0xab80>
   1c448:	ldr	r0, [sp, #28]
   1c44c:	bl	117a8 <towlower@plt>
   1c450:	mov	r4, r0
   1c454:	mov	r0, r7
   1c458:	bl	117a8 <towlower@plt>
   1c45c:	sub	r0, r4, r0
   1c460:	cmp	r0, #0
   1c464:	bne	1c574 <__assert_fail@plt+0xa9d0>
   1c468:	ldr	r4, [sp, #16]
   1c46c:	strb	r0, [sp, #12]
   1c470:	ldr	r1, [sp, #20]
   1c474:	strb	r0, [sp, #68]	; 0x44
   1c478:	ldr	r3, [sp, #72]	; 0x48
   1c47c:	ldr	r2, [sp, #76]	; 0x4c
   1c480:	add	r4, r4, r1
   1c484:	str	r4, [sp, #16]
   1c488:	add	r3, r3, r2
   1c48c:	str	r3, [sp, #72]	; 0x48
   1c490:	ldrb	r3, [sp]
   1c494:	cmp	r3, #0
   1c498:	addne	r7, sp, #4
   1c49c:	beq	1c3a4 <__assert_fail@plt+0xa800>
   1c4a0:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1c4a4:	mov	r1, r0
   1c4a8:	mov	r0, r4
   1c4ac:	bl	2d4f0 <__assert_fail@plt+0x1b94c>
   1c4b0:	mov	r2, r0
   1c4b4:	mov	r3, r7
   1c4b8:	mov	r1, r4
   1c4bc:	add	r0, sp, #28
   1c4c0:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   1c4c4:	cmn	r0, #1
   1c4c8:	str	r0, [sp, #20]
   1c4cc:	beq	1c65c <__assert_fail@plt+0xaab8>
   1c4d0:	cmn	r0, #2
   1c4d4:	beq	1c684 <__assert_fail@plt+0xaae0>
   1c4d8:	cmp	r0, #0
   1c4dc:	beq	1c6bc <__assert_fail@plt+0xab18>
   1c4e0:	ldr	r4, [sp, #28]
   1c4e4:	mov	r0, r7
   1c4e8:	strb	r5, [sp, #24]
   1c4ec:	bl	117b4 <mbsinit@plt>
   1c4f0:	cmp	r0, #0
   1c4f4:	strb	r5, [sp, #12]
   1c4f8:	movne	r3, #0
   1c4fc:	strbne	r3, [sp]
   1c500:	b	1c3d8 <__assert_fail@plt+0xa834>
   1c504:	bl	11964 <__ctype_b_loc@plt>
   1c508:	sub	r5, r4, #1
   1c50c:	sub	r6, r6, #1
   1c510:	ldr	r8, [r0]
   1c514:	b	1c520 <__assert_fail@plt+0xa97c>
   1c518:	cmp	r4, r0
   1c51c:	bne	1c570 <__assert_fail@plt+0xa9cc>
   1c520:	ldrb	r4, [r5, #1]!
   1c524:	sxth	r7, r4
   1c528:	lsl	r3, r7, #1
   1c52c:	ldrh	r3, [r8, r3]
   1c530:	tst	r3, #256	; 0x100
   1c534:	beq	1c544 <__assert_fail@plt+0xa9a0>
   1c538:	bl	11928 <__ctype_tolower_loc@plt>
   1c53c:	ldr	r3, [r0]
   1c540:	ldrb	r4, [r3, r7, lsl #2]
   1c544:	ldrb	r0, [r6, #1]!
   1c548:	sxth	r7, r0
   1c54c:	lsl	r3, r7, #1
   1c550:	ldrh	r3, [r8, r3]
   1c554:	tst	r3, #256	; 0x100
   1c558:	beq	1c568 <__assert_fail@plt+0xa9c4>
   1c55c:	bl	11928 <__ctype_tolower_loc@plt>
   1c560:	ldr	r3, [r0]
   1c564:	ldrb	r0, [r3, r7, lsl #2]
   1c568:	cmp	r4, #0
   1c56c:	bne	1c518 <__assert_fail@plt+0xa974>
   1c570:	sub	r0, r4, r0
   1c574:	add	sp, sp, #112	; 0x70
   1c578:	ldrd	r4, [sp]
   1c57c:	ldrd	r6, [sp, #8]
   1c580:	ldr	r8, [sp, #16]
   1c584:	add	sp, sp, #20
   1c588:	pop	{pc}		; (ldr pc, [sp], #4)
   1c58c:	add	r8, sp, #60	; 0x3c
   1c590:	mov	r0, r8
   1c594:	bl	117b4 <mbsinit@plt>
   1c598:	cmp	r0, #0
   1c59c:	beq	1c968 <__assert_fail@plt+0xadc4>
   1c5a0:	strb	r5, [sp, #56]	; 0x38
   1c5a4:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1c5a8:	mov	r1, r0
   1c5ac:	mov	r0, r4
   1c5b0:	bl	2d4f0 <__assert_fail@plt+0x1b94c>
   1c5b4:	mov	r2, r0
   1c5b8:	mov	r3, r8
   1c5bc:	mov	r1, r4
   1c5c0:	add	r0, sp, #84	; 0x54
   1c5c4:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   1c5c8:	cmn	r0, #1
   1c5cc:	str	r0, [sp, #76]	; 0x4c
   1c5d0:	beq	1c670 <__assert_fail@plt+0xaacc>
   1c5d4:	cmn	r0, #2
   1c5d8:	beq	1c6a0 <__assert_fail@plt+0xaafc>
   1c5dc:	cmp	r0, #0
   1c5e0:	beq	1c6e0 <__assert_fail@plt+0xab3c>
   1c5e4:	ldr	r7, [sp, #84]	; 0x54
   1c5e8:	mov	r0, r8
   1c5ec:	strb	r5, [sp, #80]	; 0x50
   1c5f0:	bl	117b4 <mbsinit@plt>
   1c5f4:	cmp	r0, #0
   1c5f8:	strb	r5, [sp, #68]	; 0x44
   1c5fc:	movne	r3, #0
   1c600:	strbne	r3, [sp, #56]	; 0x38
   1c604:	b	1c434 <__assert_fail@plt+0xa890>
   1c608:	ldrb	r3, [sp, #80]	; 0x50
   1c60c:	cmp	r3, #0
   1c610:	bne	1c704 <__assert_fail@plt+0xab60>
   1c614:	ldrb	r3, [sp, #24]
   1c618:	cmp	r3, #0
   1c61c:	bne	1c854 <__assert_fail@plt+0xacb0>
   1c620:	ldr	r0, [sp, #16]
   1c624:	ldr	r2, [sp, #20]
   1c628:	ldr	r3, [sp, #76]	; 0x4c
   1c62c:	ldr	r1, [sp, #72]	; 0x48
   1c630:	cmp	r2, r3
   1c634:	bne	1c714 <__assert_fail@plt+0xab70>
   1c638:	bl	117c0 <memcmp@plt>
   1c63c:	b	1c460 <__assert_fail@plt+0xa8bc>
   1c640:	add	r7, sp, #4
   1c644:	mov	r0, r7
   1c648:	bl	117b4 <mbsinit@plt>
   1c64c:	cmp	r0, #0
   1c650:	beq	1c968 <__assert_fail@plt+0xadc4>
   1c654:	strb	r5, [sp]
   1c658:	b	1c4a0 <__assert_fail@plt+0xa8fc>
   1c65c:	mov	r3, #0
   1c660:	strb	r5, [sp, #12]
   1c664:	str	r5, [sp, #20]
   1c668:	strb	r3, [sp, #24]
   1c66c:	b	1c3e0 <__assert_fail@plt+0xa83c>
   1c670:	mov	r3, #0
   1c674:	strb	r5, [sp, #68]	; 0x44
   1c678:	str	r5, [sp, #76]	; 0x4c
   1c67c:	strb	r3, [sp, #80]	; 0x50
   1c680:	b	1c614 <__assert_fail@plt+0xaa70>
   1c684:	ldr	r0, [sp, #16]
   1c688:	bl	11988 <strlen@plt>
   1c68c:	mov	r3, #0
   1c690:	strb	r5, [sp, #12]
   1c694:	str	r0, [sp, #20]
   1c698:	strb	r3, [sp, #24]
   1c69c:	b	1c3e0 <__assert_fail@plt+0xa83c>
   1c6a0:	ldr	r0, [sp, #72]	; 0x48
   1c6a4:	bl	11988 <strlen@plt>
   1c6a8:	mov	r3, #0
   1c6ac:	strb	r5, [sp, #68]	; 0x44
   1c6b0:	str	r0, [sp, #76]	; 0x4c
   1c6b4:	strb	r3, [sp, #80]	; 0x50
   1c6b8:	b	1c614 <__assert_fail@plt+0xaa70>
   1c6bc:	ldr	r3, [sp, #16]
   1c6c0:	str	r5, [sp, #20]
   1c6c4:	ldrb	r3, [r3]
   1c6c8:	cmp	r3, #0
   1c6cc:	bne	1c988 <__assert_fail@plt+0xade4>
   1c6d0:	ldr	r4, [sp, #28]
   1c6d4:	cmp	r4, #0
   1c6d8:	beq	1c4e4 <__assert_fail@plt+0xa940>
   1c6dc:	b	1c928 <__assert_fail@plt+0xad84>
   1c6e0:	ldr	r3, [sp, #72]	; 0x48
   1c6e4:	str	r5, [sp, #76]	; 0x4c
   1c6e8:	ldrb	r3, [r3]
   1c6ec:	cmp	r3, #0
   1c6f0:	bne	1c988 <__assert_fail@plt+0xade4>
   1c6f4:	ldr	r7, [sp, #84]	; 0x54
   1c6f8:	cmp	r7, #0
   1c6fc:	beq	1c5e8 <__assert_fail@plt+0xaa44>
   1c700:	b	1c928 <__assert_fail@plt+0xad84>
   1c704:	ldr	r7, [sp, #84]	; 0x54
   1c708:	b	1c434 <__assert_fail@plt+0xa890>
   1c70c:	mov	r0, #0
   1c710:	bx	lr
   1c714:	bcs	1c89c <__assert_fail@plt+0xacf8>
   1c718:	bl	117c0 <memcmp@plt>
   1c71c:	cmp	r0, #0
   1c720:	ble	1c854 <__assert_fail@plt+0xacb0>
   1c724:	mov	r0, #1
   1c728:	b	1c574 <__assert_fail@plt+0xa9d0>
   1c72c:	ldrb	r3, [sp, #12]
   1c730:	cmp	r3, #0
   1c734:	bne	1c7f8 <__assert_fail@plt+0xac54>
   1c738:	ldrb	r3, [sp]
   1c73c:	ldr	r4, [sp, #16]
   1c740:	cmp	r3, #0
   1c744:	addne	r7, sp, #4
   1c748:	bne	1c78c <__assert_fail@plt+0xabe8>
   1c74c:	ldrb	r3, [r4]
   1c750:	movw	r2, #11980	; 0x2ecc
   1c754:	movt	r2, #3
   1c758:	lsr	r1, r3, #5
   1c75c:	and	r3, r3, #31
   1c760:	ldr	r2, [r2, r1, lsl #2]
   1c764:	lsr	r3, r2, r3
   1c768:	tst	r3, #1
   1c76c:	bne	1c87c <__assert_fail@plt+0xacd8>
   1c770:	add	r7, sp, #4
   1c774:	mov	r0, r7
   1c778:	bl	117b4 <mbsinit@plt>
   1c77c:	cmp	r0, #0
   1c780:	beq	1c968 <__assert_fail@plt+0xadc4>
   1c784:	mov	r3, #1
   1c788:	strb	r3, [sp]
   1c78c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1c790:	mov	r1, r0
   1c794:	mov	r0, r4
   1c798:	bl	2d4f0 <__assert_fail@plt+0x1b94c>
   1c79c:	mov	r2, r0
   1c7a0:	mov	r3, r7
   1c7a4:	mov	r1, r4
   1c7a8:	add	r0, sp, #28
   1c7ac:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   1c7b0:	cmn	r0, #1
   1c7b4:	str	r0, [sp, #20]
   1c7b8:	beq	1c724 <__assert_fail@plt+0xab80>
   1c7bc:	cmn	r0, #2
   1c7c0:	beq	1c724 <__assert_fail@plt+0xab80>
   1c7c4:	cmp	r0, #0
   1c7c8:	beq	1c940 <__assert_fail@plt+0xad9c>
   1c7cc:	ldr	r4, [sp, #28]
   1c7d0:	mov	r5, #1
   1c7d4:	mov	r0, r7
   1c7d8:	strb	r5, [sp, #24]
   1c7dc:	bl	117b4 <mbsinit@plt>
   1c7e0:	cmp	r0, #0
   1c7e4:	strb	r5, [sp, #12]
   1c7e8:	movne	r3, #0
   1c7ec:	strbne	r3, [sp]
   1c7f0:	cmp	r4, #0
   1c7f4:	bne	1c724 <__assert_fail@plt+0xab80>
   1c7f8:	ldrb	r3, [sp, #68]	; 0x44
   1c7fc:	cmp	r3, #0
   1c800:	bne	1c92c <__assert_fail@plt+0xad88>
   1c804:	ldrb	r3, [sp, #56]	; 0x38
   1c808:	ldr	r4, [sp, #72]	; 0x48
   1c80c:	cmp	r3, #0
   1c810:	addne	r8, sp, #60	; 0x3c
   1c814:	bne	1c8cc <__assert_fail@plt+0xad28>
   1c818:	ldrb	r3, [r4]
   1c81c:	movw	r2, #11980	; 0x2ecc
   1c820:	movt	r2, #3
   1c824:	lsr	r1, r3, #5
   1c828:	and	r3, r3, #31
   1c82c:	ldr	r2, [r2, r1, lsl #2]
   1c830:	lsr	r3, r2, r3
   1c834:	tst	r3, #1
   1c838:	beq	1c8b0 <__assert_fail@plt+0xad0c>
   1c83c:	mov	r3, #1
   1c840:	str	r3, [sp, #76]	; 0x4c
   1c844:	ldrb	r7, [r4]
   1c848:	cmp	r7, #0
   1c84c:	moveq	r0, r7
   1c850:	beq	1c574 <__assert_fail@plt+0xa9d0>
   1c854:	mvn	r0, #0
   1c858:	b	1c574 <__assert_fail@plt+0xa9d0>
   1c85c:	ldrb	r3, [sp, #12]
   1c860:	cmp	r3, #0
   1c864:	beq	1c738 <__assert_fail@plt+0xab94>
   1c868:	ldrb	r3, [sp, #24]
   1c86c:	cmp	r3, #0
   1c870:	beq	1c724 <__assert_fail@plt+0xab80>
   1c874:	ldr	r4, [sp, #28]
   1c878:	b	1c7f0 <__assert_fail@plt+0xac4c>
   1c87c:	mov	r3, #1
   1c880:	str	r3, [sp, #20]
   1c884:	ldrb	r2, [r4]
   1c888:	strb	r3, [sp, #12]
   1c88c:	strb	r3, [sp, #24]
   1c890:	mov	r4, r2
   1c894:	str	r2, [sp, #28]
   1c898:	b	1c7f0 <__assert_fail@plt+0xac4c>
   1c89c:	mov	r2, r3
   1c8a0:	bl	117c0 <memcmp@plt>
   1c8a4:	cmp	r0, #0
   1c8a8:	bge	1c724 <__assert_fail@plt+0xab80>
   1c8ac:	b	1c854 <__assert_fail@plt+0xacb0>
   1c8b0:	add	r8, sp, #60	; 0x3c
   1c8b4:	mov	r0, r8
   1c8b8:	bl	117b4 <mbsinit@plt>
   1c8bc:	cmp	r0, #0
   1c8c0:	beq	1c968 <__assert_fail@plt+0xadc4>
   1c8c4:	mov	r3, #1
   1c8c8:	strb	r3, [sp, #56]	; 0x38
   1c8cc:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1c8d0:	mov	r1, r0
   1c8d4:	mov	r0, r4
   1c8d8:	bl	2d4f0 <__assert_fail@plt+0x1b94c>
   1c8dc:	mov	r2, r0
   1c8e0:	mov	r3, r8
   1c8e4:	mov	r1, r4
   1c8e8:	add	r0, sp, #84	; 0x54
   1c8ec:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   1c8f0:	add	r3, r0, #2
   1c8f4:	cmp	r3, #1
   1c8f8:	bls	1c854 <__assert_fail@plt+0xacb0>
   1c8fc:	cmp	r0, #0
   1c900:	bne	1c938 <__assert_fail@plt+0xad94>
   1c904:	ldr	r3, [sp, #72]	; 0x48
   1c908:	mov	r2, #1
   1c90c:	str	r2, [sp, #76]	; 0x4c
   1c910:	ldrb	r3, [r3]
   1c914:	cmp	r3, #0
   1c918:	bne	1c988 <__assert_fail@plt+0xade4>
   1c91c:	ldr	r7, [sp, #84]	; 0x54
   1c920:	cmp	r7, #0
   1c924:	beq	1c848 <__assert_fail@plt+0xaca4>
   1c928:	bl	1c310 <__assert_fail@plt+0xa76c>
   1c92c:	ldrb	r3, [sp, #80]	; 0x50
   1c930:	cmp	r3, #0
   1c934:	beq	1c854 <__assert_fail@plt+0xacb0>
   1c938:	ldr	r7, [sp, #84]	; 0x54
   1c93c:	b	1c848 <__assert_fail@plt+0xaca4>
   1c940:	ldr	r3, [sp, #16]
   1c944:	mov	r2, #1
   1c948:	str	r2, [sp, #20]
   1c94c:	ldrb	r3, [r3]
   1c950:	cmp	r3, #0
   1c954:	bne	1c988 <__assert_fail@plt+0xade4>
   1c958:	ldr	r4, [sp, #28]
   1c95c:	cmp	r4, #0
   1c960:	beq	1c7d0 <__assert_fail@plt+0xac2c>
   1c964:	b	1c928 <__assert_fail@plt+0xad84>
   1c968:	movw	r3, #12012	; 0x2eec
   1c96c:	movt	r3, #3
   1c970:	movw	r1, #11556	; 0x2d24
   1c974:	movt	r1, #3
   1c978:	movw	r0, #11572	; 0x2d34
   1c97c:	movt	r0, #3
   1c980:	mov	r2, #143	; 0x8f
   1c984:	bl	11ba4 <__assert_fail@plt>
   1c988:	movw	r3, #12012	; 0x2eec
   1c98c:	movt	r3, #3
   1c990:	movw	r1, #11556	; 0x2d24
   1c994:	movt	r1, #3
   1c998:	movw	r0, #11596	; 0x2d4c
   1c99c:	movt	r0, #3
   1c9a0:	mov	r2, #171	; 0xab
   1c9a4:	bl	11ba4 <__assert_fail@plt>
   1c9a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c9ac:	mov	r4, r0
   1c9b0:	strd	r6, [sp, #8]
   1c9b4:	str	r8, [sp, #16]
   1c9b8:	str	lr, [sp, #20]
   1c9bc:	bl	11988 <strlen@plt>
   1c9c0:	add	r0, r0, #1
   1c9c4:	mov	ip, r4
   1c9c8:	mov	r3, #0
   1c9cc:	b	1c9e0 <__assert_fail@plt+0xae3c>
   1c9d0:	cmp	r0, r2
   1c9d4:	strb	r1, [ip], #1
   1c9d8:	bls	1ca50 <__assert_fail@plt+0xaeac>
   1c9dc:	mov	r3, r2
   1c9e0:	ldrb	r1, [r4, r3]
   1c9e4:	add	r2, r3, #1
   1c9e8:	cmp	r1, #92	; 0x5c
   1c9ec:	bne	1c9d0 <__assert_fail@plt+0xae2c>
   1c9f0:	add	lr, r3, #4
   1c9f4:	cmp	lr, r0
   1c9f8:	bcs	1c9d0 <__assert_fail@plt+0xae2c>
   1c9fc:	ldrb	r5, [r4, r2]
   1ca00:	sub	r5, r5, #48	; 0x30
   1ca04:	uxtb	r6, r5
   1ca08:	cmp	r6, #3
   1ca0c:	bhi	1c9d0 <__assert_fail@plt+0xae2c>
   1ca10:	add	r3, r4, r3
   1ca14:	ldrb	r6, [r3, #2]
   1ca18:	sub	r6, r6, #48	; 0x30
   1ca1c:	uxtb	r7, r6
   1ca20:	cmp	r7, #7
   1ca24:	bhi	1c9d0 <__assert_fail@plt+0xae2c>
   1ca28:	ldrb	r3, [r3, #3]
   1ca2c:	sub	r3, r3, #48	; 0x30
   1ca30:	uxtb	r3, r3
   1ca34:	cmp	r3, #7
   1ca38:	bhi	1c9d0 <__assert_fail@plt+0xae2c>
   1ca3c:	add	r5, r6, r5, lsl #3
   1ca40:	mov	r2, lr
   1ca44:	add	r5, r3, r5, lsl #3
   1ca48:	strb	r5, [ip], #1
   1ca4c:	b	1c9dc <__assert_fail@plt+0xae38>
   1ca50:	ldrd	r4, [sp]
   1ca54:	ldrd	r6, [sp, #8]
   1ca58:	ldr	r8, [sp, #16]
   1ca5c:	add	sp, sp, #20
   1ca60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca64:	str	r4, [sp, #-8]!
   1ca68:	mov	r4, r0
   1ca6c:	ldr	r0, [r0]
   1ca70:	str	lr, [sp, #4]
   1ca74:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1ca78:	ldr	r0, [r4, #4]
   1ca7c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1ca80:	ldr	r0, [r4, #8]
   1ca84:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1ca88:	ldrb	r3, [r4, #24]
   1ca8c:	tst	r3, #4
   1ca90:	bne	1caa8 <__assert_fail@plt+0xaf04>
   1ca94:	mov	r0, r4
   1ca98:	ldr	r4, [sp]
   1ca9c:	ldr	lr, [sp, #4]
   1caa0:	add	sp, sp, #8
   1caa4:	b	17ac8 <__assert_fail@plt+0x5f24>
   1caa8:	ldr	r0, [r4, #12]
   1caac:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1cab0:	b	1ca94 <__assert_fail@plt+0xaef0>
   1cab4:	movw	r1, #12188	; 0x2f9c
   1cab8:	movt	r1, #3
   1cabc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cac0:	movw	r0, #12032	; 0x2f00
   1cac4:	movt	r0, #3
   1cac8:	strd	r6, [sp, #8]
   1cacc:	strd	r8, [sp, #16]
   1cad0:	strd	sl, [sp, #24]
   1cad4:	str	lr, [sp, #32]
   1cad8:	sub	sp, sp, #44	; 0x2c
   1cadc:	bl	11afc <fopen64@plt>
   1cae0:	subs	r8, r0, #0
   1cae4:	beq	1cf6c <__assert_fail@plt+0xb3c8>
   1cae8:	movw	r2, #12076	; 0x2f2c
   1caec:	movt	r2, #3
   1caf0:	mov	r3, #0
   1caf4:	movw	r9, #12056	; 0x2f18
   1caf8:	movt	r9, #3
   1cafc:	add	sl, sp, #16
   1cb00:	str	r2, [sp, #8]
   1cb04:	mov	r2, #65280	; 0xff00
   1cb08:	movt	r2, #15
   1cb0c:	str	r2, [sp, #12]
   1cb10:	str	r3, [sp, #20]
   1cb14:	str	r3, [sp, #24]
   1cb18:	mov	r3, r8
   1cb1c:	mov	r2, #10
   1cb20:	add	r1, sp, #24
   1cb24:	add	r0, sp, #20
   1cb28:	bl	116f4 <__getdelim@plt>
   1cb2c:	cmn	r0, #1
   1cb30:	beq	1ccf8 <__assert_fail@plt+0xb154>
   1cb34:	add	ip, sp, #36	; 0x24
   1cb38:	add	r3, sp, #32
   1cb3c:	ldr	r0, [sp, #20]
   1cb40:	add	r2, sp, #28
   1cb44:	mov	r1, r9
   1cb48:	str	ip, [sp]
   1cb4c:	bl	11a9c <sscanf@plt>
   1cb50:	sub	r0, r0, #2
   1cb54:	cmp	r0, #1
   1cb58:	bhi	1cb18 <__assert_fail@plt+0xaf74>
   1cb5c:	ldr	r5, [sp, #20]
   1cb60:	mov	r1, #32
   1cb64:	ldr	r3, [sp, #36]	; 0x24
   1cb68:	add	r5, r5, r3
   1cb6c:	mov	r0, r5
   1cb70:	bl	11994 <strchr@plt>
   1cb74:	subs	r4, r0, #0
   1cb78:	beq	1cb18 <__assert_fail@plt+0xaf74>
   1cb7c:	mov	r6, #0
   1cb80:	mov	r1, #32
   1cb84:	strb	r6, [r4], #1
   1cb88:	mov	r0, r4
   1cb8c:	bl	11994 <strchr@plt>
   1cb90:	cmp	r0, #0
   1cb94:	beq	1cb18 <__assert_fail@plt+0xaf74>
   1cb98:	strb	r6, [r0], #1
   1cb9c:	ldr	r1, [sp, #8]
   1cba0:	bl	30378 <__assert_fail@plt+0x1e7d4>
   1cba4:	cmp	r0, #0
   1cba8:	beq	1cb18 <__assert_fail@plt+0xaf74>
   1cbac:	add	r7, r0, #3
   1cbb0:	mov	r1, #32
   1cbb4:	mov	r0, r7
   1cbb8:	bl	11994 <strchr@plt>
   1cbbc:	subs	fp, r0, #0
   1cbc0:	beq	1cb18 <__assert_fail@plt+0xaf74>
   1cbc4:	mov	r1, #32
   1cbc8:	strb	r6, [fp], #1
   1cbcc:	mov	r0, fp
   1cbd0:	bl	11994 <strchr@plt>
   1cbd4:	cmp	r0, #0
   1cbd8:	beq	1cb18 <__assert_fail@plt+0xaf74>
   1cbdc:	strb	r6, [r0]
   1cbe0:	mov	r0, fp
   1cbe4:	bl	1c9a8 <__assert_fail@plt+0xae04>
   1cbe8:	mov	r0, r4
   1cbec:	bl	1c9a8 <__assert_fail@plt+0xae04>
   1cbf0:	mov	r0, r5
   1cbf4:	bl	1c9a8 <__assert_fail@plt+0xae04>
   1cbf8:	mov	r0, r7
   1cbfc:	bl	1c9a8 <__assert_fail@plt+0xae04>
   1cc00:	mov	r0, #32
   1cc04:	bl	2e050 <__assert_fail@plt+0x1c4ac>
   1cc08:	mov	r6, r0
   1cc0c:	mov	r0, fp
   1cc10:	bl	2e4a0 <__assert_fail@plt+0x1c8fc>
   1cc14:	str	r0, [r6]
   1cc18:	mov	r0, r4
   1cc1c:	bl	2e4a0 <__assert_fail@plt+0x1c8fc>
   1cc20:	str	r0, [r6, #4]
   1cc24:	mov	r0, r5
   1cc28:	bl	2e4a0 <__assert_fail@plt+0x1c8fc>
   1cc2c:	str	r0, [r6, #8]
   1cc30:	mov	r0, r7
   1cc34:	bl	2e4a0 <__assert_fail@plt+0x1c8fc>
   1cc38:	ldr	r1, [sp, #12]
   1cc3c:	mov	r2, #0
   1cc40:	movt	r2, #65520	; 0xfff0
   1cc44:	str	r0, [r6, #12]
   1cc48:	mov	r4, r0
   1cc4c:	ldr	ip, [sp, #28]
   1cc50:	ldr	r5, [sp, #32]
   1cc54:	ldrb	r3, [r6, #24]
   1cc58:	and	lr, r1, ip, lsl #8
   1cc5c:	bic	ip, ip, #4080	; 0xff0
   1cc60:	bic	ip, ip, #15
   1cc64:	and	r1, r2, r5, lsl #12
   1cc68:	uxtb	r2, r5
   1cc6c:	orr	ip, ip, r5, lsr #20
   1cc70:	orr	r2, r2, lr
   1cc74:	orr	r2, r1, r2
   1cc78:	orr	r3, r3, #4
   1cc7c:	movw	r1, #12080	; 0x2f30
   1cc80:	movt	r1, #3
   1cc84:	str	r2, [r6, #16]
   1cc88:	str	ip, [r6, #20]
   1cc8c:	strb	r3, [r6, #24]
   1cc90:	bl	1170c <strcmp@plt>
   1cc94:	cmp	r0, #0
   1cc98:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1cc9c:	movw	r1, #12088	; 0x2f38
   1cca0:	movt	r1, #3
   1cca4:	mov	r0, r4
   1cca8:	bl	1170c <strcmp@plt>
   1ccac:	cmp	r0, #0
   1ccb0:	bne	1cd48 <__assert_fail@plt+0xb1a4>
   1ccb4:	mov	r0, #1
   1ccb8:	ldrb	r3, [r6, #24]
   1ccbc:	mov	r1, #58	; 0x3a
   1ccc0:	ldr	r5, [r6]
   1ccc4:	bfi	r3, r0, #0, #1
   1ccc8:	mov	r0, r5
   1cccc:	strb	r3, [r6, #24]
   1ccd0:	bl	11994 <strchr@plt>
   1ccd4:	cmp	r0, #0
   1ccd8:	beq	1ce6c <__assert_fail@plt+0xb2c8>
   1ccdc:	mov	r0, #1
   1cce0:	ldrb	r3, [r6, #24]
   1cce4:	bfi	r3, r0, #1, #1
   1cce8:	strb	r3, [r6, #24]
   1ccec:	str	r6, [sl]
   1ccf0:	add	sl, r6, #28
   1ccf4:	b	1cb18 <__assert_fail@plt+0xaf74>
   1ccf8:	ldr	r0, [sp, #20]
   1ccfc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1cd00:	ldr	r3, [r8]
   1cd04:	tst	r3, #32
   1cd08:	bne	1d300 <__assert_fail@plt+0xb75c>
   1cd0c:	mov	r0, r8
   1cd10:	bl	15940 <__assert_fail@plt+0x3d9c>
   1cd14:	cmn	r0, #1
   1cd18:	beq	1d1c0 <__assert_fail@plt+0xb61c>
   1cd1c:	mov	r3, #0
   1cd20:	str	r3, [sl]
   1cd24:	ldr	r6, [sp, #16]
   1cd28:	mov	r0, r6
   1cd2c:	add	sp, sp, #44	; 0x2c
   1cd30:	ldrd	r4, [sp]
   1cd34:	ldrd	r6, [sp, #8]
   1cd38:	ldrd	r8, [sp, #16]
   1cd3c:	ldrd	sl, [sp, #24]
   1cd40:	add	sp, sp, #32
   1cd44:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd48:	movw	r1, #12096	; 0x2f40
   1cd4c:	movt	r1, #3
   1cd50:	mov	r0, r4
   1cd54:	bl	1170c <strcmp@plt>
   1cd58:	cmp	r0, #0
   1cd5c:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1cd60:	movw	r1, #12104	; 0x2f48
   1cd64:	movt	r1, #3
   1cd68:	mov	r0, r4
   1cd6c:	bl	1170c <strcmp@plt>
   1cd70:	cmp	r0, #0
   1cd74:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1cd78:	movw	r1, #12112	; 0x2f50
   1cd7c:	movt	r1, #3
   1cd80:	mov	r0, r4
   1cd84:	bl	1170c <strcmp@plt>
   1cd88:	cmp	r0, #0
   1cd8c:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1cd90:	movw	r1, #12120	; 0x2f58
   1cd94:	movt	r1, #3
   1cd98:	mov	r0, r4
   1cd9c:	bl	1170c <strcmp@plt>
   1cda0:	cmp	r0, #0
   1cda4:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1cda8:	movw	r1, #12128	; 0x2f60
   1cdac:	movt	r1, #3
   1cdb0:	mov	r0, r4
   1cdb4:	bl	1170c <strcmp@plt>
   1cdb8:	cmp	r0, #0
   1cdbc:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1cdc0:	movw	r1, #12140	; 0x2f6c
   1cdc4:	movt	r1, #3
   1cdc8:	mov	r0, r4
   1cdcc:	bl	1170c <strcmp@plt>
   1cdd0:	cmp	r0, #0
   1cdd4:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1cdd8:	movw	r1, #12148	; 0x2f74
   1cddc:	movt	r1, #3
   1cde0:	mov	r0, r4
   1cde4:	bl	1170c <strcmp@plt>
   1cde8:	cmp	r0, #0
   1cdec:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1cdf0:	movw	r1, #12160	; 0x2f80
   1cdf4:	movt	r1, #3
   1cdf8:	mov	r0, r4
   1cdfc:	bl	1170c <strcmp@plt>
   1ce00:	cmp	r0, #0
   1ce04:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1ce08:	movw	r1, #12168	; 0x2f88
   1ce0c:	movt	r1, #3
   1ce10:	mov	r0, r4
   1ce14:	bl	1170c <strcmp@plt>
   1ce18:	cmp	r0, #0
   1ce1c:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1ce20:	movw	r1, #12176	; 0x2f90
   1ce24:	movt	r1, #3
   1ce28:	mov	r0, r4
   1ce2c:	bl	1170c <strcmp@plt>
   1ce30:	cmp	r0, #0
   1ce34:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1ce38:	movw	r1, #12184	; 0x2f98
   1ce3c:	movt	r1, #3
   1ce40:	mov	r0, r4
   1ce44:	bl	1170c <strcmp@plt>
   1ce48:	cmp	r0, #0
   1ce4c:	beq	1ccb4 <__assert_fail@plt+0xb110>
   1ce50:	movw	r1, #12192	; 0x2fa0
   1ce54:	movt	r1, #3
   1ce58:	mov	r0, r4
   1ce5c:	bl	1170c <strcmp@plt>
   1ce60:	clz	r0, r0
   1ce64:	lsr	r0, r0, #5
   1ce68:	b	1ccb8 <__assert_fail@plt+0xb114>
   1ce6c:	ldrb	r3, [r5]
   1ce70:	cmp	r3, #47	; 0x2f
   1ce74:	beq	1d374 <__assert_fail@plt+0xb7d0>
   1ce78:	movw	r1, #12224	; 0x2fc0
   1ce7c:	movt	r1, #3
   1ce80:	mov	r0, r4
   1ce84:	bl	1170c <strcmp@plt>
   1ce88:	cmp	r0, #0
   1ce8c:	beq	1ccdc <__assert_fail@plt+0xb138>
   1ce90:	movw	r1, #12232	; 0x2fc8
   1ce94:	movt	r1, #3
   1ce98:	mov	r0, r4
   1ce9c:	bl	1170c <strcmp@plt>
   1cea0:	cmp	r0, #0
   1cea4:	beq	1ccdc <__assert_fail@plt+0xb138>
   1cea8:	movw	r1, #12236	; 0x2fcc
   1ceac:	movt	r1, #3
   1ceb0:	mov	r0, r4
   1ceb4:	bl	1170c <strcmp@plt>
   1ceb8:	cmp	r0, #0
   1cebc:	beq	1ccdc <__assert_fail@plt+0xb138>
   1cec0:	movw	r1, #12244	; 0x2fd4
   1cec4:	movt	r1, #3
   1cec8:	mov	r0, r4
   1cecc:	bl	1170c <strcmp@plt>
   1ced0:	cmp	r0, #0
   1ced4:	beq	1ccdc <__assert_fail@plt+0xb138>
   1ced8:	movw	r1, #12256	; 0x2fe0
   1cedc:	movt	r1, #3
   1cee0:	mov	r0, r4
   1cee4:	bl	1170c <strcmp@plt>
   1cee8:	cmp	r0, #0
   1ceec:	beq	1ccdc <__assert_fail@plt+0xb138>
   1cef0:	movw	r1, #12264	; 0x2fe8
   1cef4:	movt	r1, #3
   1cef8:	mov	r0, r4
   1cefc:	bl	1170c <strcmp@plt>
   1cf00:	cmp	r0, #0
   1cf04:	beq	1ccdc <__assert_fail@plt+0xb138>
   1cf08:	movw	r1, #12272	; 0x2ff0
   1cf0c:	movt	r1, #3
   1cf10:	mov	r0, r4
   1cf14:	bl	1170c <strcmp@plt>
   1cf18:	cmp	r0, #0
   1cf1c:	beq	1ccdc <__assert_fail@plt+0xb138>
   1cf20:	movw	r1, #12280	; 0x2ff8
   1cf24:	movt	r1, #3
   1cf28:	mov	r0, r4
   1cf2c:	bl	1170c <strcmp@plt>
   1cf30:	cmp	r0, #0
   1cf34:	beq	1ccdc <__assert_fail@plt+0xb138>
   1cf38:	mov	r0, r4
   1cf3c:	movw	r1, #12288	; 0x3000
   1cf40:	movt	r1, #3
   1cf44:	bl	1170c <strcmp@plt>
   1cf48:	cmp	r0, #0
   1cf4c:	beq	1ccdc <__assert_fail@plt+0xb138>
   1cf50:	mov	r1, r5
   1cf54:	movw	r0, #12296	; 0x3008
   1cf58:	movt	r0, #3
   1cf5c:	bl	1170c <strcmp@plt>
   1cf60:	clz	r0, r0
   1cf64:	lsr	r0, r0, #5
   1cf68:	b	1cce0 <__assert_fail@plt+0xb13c>
   1cf6c:	movw	r1, #13088	; 0x3320
   1cf70:	movt	r1, #3
   1cf74:	movw	r0, #12304	; 0x3010
   1cf78:	movt	r0, #3
   1cf7c:	bl	11b14 <setmntent@plt>
   1cf80:	subs	r6, r0, #0
   1cf84:	beq	1cd28 <__assert_fail@plt+0xb184>
   1cf88:	mov	r0, r6
   1cf8c:	movw	r8, #12316	; 0x301c
   1cf90:	movt	r8, #3
   1cf94:	movw	r7, #12080	; 0x2f30
   1cf98:	movt	r7, #3
   1cf9c:	movw	fp, #12088	; 0x2f38
   1cfa0:	movt	fp, #3
   1cfa4:	add	sl, sp, #16
   1cfa8:	bl	118c8 <getmntent@plt>
   1cfac:	subs	r5, r0, #0
   1cfb0:	beq	1d1b0 <__assert_fail@plt+0xb60c>
   1cfb4:	mov	r1, r8
   1cfb8:	bl	1188c <hasmntopt@plt>
   1cfbc:	mov	r9, r0
   1cfc0:	mov	r0, #32
   1cfc4:	bl	2e050 <__assert_fail@plt+0x1c4ac>
   1cfc8:	mov	r4, r0
   1cfcc:	ldr	r0, [r5]
   1cfd0:	bl	2e4a0 <__assert_fail@plt+0x1c8fc>
   1cfd4:	str	r0, [r4]
   1cfd8:	ldr	r0, [r5, #4]
   1cfdc:	bl	2e4a0 <__assert_fail@plt+0x1c8fc>
   1cfe0:	mov	r3, #0
   1cfe4:	str	r0, [r4, #4]
   1cfe8:	ldr	r0, [r5, #8]
   1cfec:	str	r3, [r4, #8]
   1cff0:	bl	2e4a0 <__assert_fail@plt+0x1c8fc>
   1cff4:	ldrb	r3, [r4, #24]
   1cff8:	mov	r1, r7
   1cffc:	mov	r5, r0
   1d000:	str	r0, [r4, #12]
   1d004:	orr	r3, r3, #4
   1d008:	strb	r3, [r4, #24]
   1d00c:	bl	1170c <strcmp@plt>
   1d010:	cmp	r0, #0
   1d014:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d018:	mov	r1, fp
   1d01c:	mov	r0, r5
   1d020:	bl	1170c <strcmp@plt>
   1d024:	cmp	r0, #0
   1d028:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d02c:	movw	r1, #12096	; 0x2f40
   1d030:	movt	r1, #3
   1d034:	mov	r0, r5
   1d038:	bl	1170c <strcmp@plt>
   1d03c:	cmp	r0, #0
   1d040:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d044:	movw	r1, #12104	; 0x2f48
   1d048:	movt	r1, #3
   1d04c:	mov	r0, r5
   1d050:	bl	1170c <strcmp@plt>
   1d054:	cmp	r0, #0
   1d058:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d05c:	movw	r1, #12112	; 0x2f50
   1d060:	movt	r1, #3
   1d064:	mov	r0, r5
   1d068:	bl	1170c <strcmp@plt>
   1d06c:	cmp	r0, #0
   1d070:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d074:	movw	r1, #12120	; 0x2f58
   1d078:	movt	r1, #3
   1d07c:	mov	r0, r5
   1d080:	bl	1170c <strcmp@plt>
   1d084:	cmp	r0, #0
   1d088:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d08c:	movw	r1, #12128	; 0x2f60
   1d090:	movt	r1, #3
   1d094:	mov	r0, r5
   1d098:	bl	1170c <strcmp@plt>
   1d09c:	cmp	r0, #0
   1d0a0:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d0a4:	movw	r1, #12140	; 0x2f6c
   1d0a8:	movt	r1, #3
   1d0ac:	mov	r0, r5
   1d0b0:	bl	1170c <strcmp@plt>
   1d0b4:	cmp	r0, #0
   1d0b8:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d0bc:	movw	r1, #12148	; 0x2f74
   1d0c0:	movt	r1, #3
   1d0c4:	mov	r0, r5
   1d0c8:	bl	1170c <strcmp@plt>
   1d0cc:	cmp	r0, #0
   1d0d0:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d0d4:	movw	r1, #12160	; 0x2f80
   1d0d8:	movt	r1, #3
   1d0dc:	mov	r0, r5
   1d0e0:	bl	1170c <strcmp@plt>
   1d0e4:	cmp	r0, #0
   1d0e8:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d0ec:	movw	r1, #12168	; 0x2f88
   1d0f0:	movt	r1, #3
   1d0f4:	mov	r0, r5
   1d0f8:	bl	1170c <strcmp@plt>
   1d0fc:	cmp	r0, #0
   1d100:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d104:	movw	r1, #12176	; 0x2f90
   1d108:	movt	r1, #3
   1d10c:	mov	r0, r5
   1d110:	bl	1170c <strcmp@plt>
   1d114:	cmp	r0, #0
   1d118:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d11c:	movw	r1, #12184	; 0x2f98
   1d120:	movt	r1, #3
   1d124:	mov	r0, r5
   1d128:	bl	1170c <strcmp@plt>
   1d12c:	cmp	r0, #0
   1d130:	beq	1d154 <__assert_fail@plt+0xb5b0>
   1d134:	movw	r1, #12192	; 0x2fa0
   1d138:	movt	r1, #3
   1d13c:	mov	r0, r5
   1d140:	bl	1170c <strcmp@plt>
   1d144:	orrs	r3, r9, r0
   1d148:	moveq	r2, #1
   1d14c:	movne	r2, #0
   1d150:	b	1d158 <__assert_fail@plt+0xb5b4>
   1d154:	mov	r2, #1
   1d158:	ldrb	r3, [r4, #24]
   1d15c:	mov	r1, #58	; 0x3a
   1d160:	ldr	r9, [r4]
   1d164:	bfi	r3, r2, #0, #1
   1d168:	mov	r0, r9
   1d16c:	strb	r3, [r4, #24]
   1d170:	bl	11994 <strchr@plt>
   1d174:	cmp	r0, #0
   1d178:	beq	1d200 <__assert_fail@plt+0xb65c>
   1d17c:	mov	r0, #1
   1d180:	ldrb	r1, [r4, #24]
   1d184:	mvn	r2, #0
   1d188:	mvn	r3, #0
   1d18c:	strd	r2, [r4, #16]
   1d190:	bfi	r1, r0, #1, #1
   1d194:	mov	r0, r6
   1d198:	strb	r1, [r4, #24]
   1d19c:	str	r4, [sl]
   1d1a0:	add	sl, r4, #28
   1d1a4:	bl	118c8 <getmntent@plt>
   1d1a8:	subs	r5, r0, #0
   1d1ac:	bne	1cfb4 <__assert_fail@plt+0xb410>
   1d1b0:	mov	r0, r6
   1d1b4:	bl	11a48 <endmntent@plt>
   1d1b8:	cmp	r0, #0
   1d1bc:	bne	1cd1c <__assert_fail@plt+0xb178>
   1d1c0:	bl	119b8 <__errno_location@plt>
   1d1c4:	ldr	r7, [r0]
   1d1c8:	mov	r5, r0
   1d1cc:	mov	r3, #0
   1d1d0:	str	r3, [sl]
   1d1d4:	ldr	r0, [sp, #16]
   1d1d8:	cmp	r0, r3
   1d1dc:	beq	1d1f4 <__assert_fail@plt+0xb650>
   1d1e0:	ldr	r4, [r0, #28]
   1d1e4:	bl	1ca64 <__assert_fail@plt+0xaec0>
   1d1e8:	subs	r0, r4, #0
   1d1ec:	str	r4, [sp, #16]
   1d1f0:	bne	1d1e0 <__assert_fail@plt+0xb63c>
   1d1f4:	mov	r6, #0
   1d1f8:	str	r7, [r5]
   1d1fc:	b	1cd28 <__assert_fail@plt+0xb184>
   1d200:	ldrb	r3, [r9]
   1d204:	cmp	r3, #47	; 0x2f
   1d208:	beq	1d31c <__assert_fail@plt+0xb778>
   1d20c:	movw	r1, #12224	; 0x2fc0
   1d210:	movt	r1, #3
   1d214:	mov	r0, r5
   1d218:	bl	1170c <strcmp@plt>
   1d21c:	cmp	r0, #0
   1d220:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d224:	movw	r1, #12232	; 0x2fc8
   1d228:	movt	r1, #3
   1d22c:	mov	r0, r5
   1d230:	bl	1170c <strcmp@plt>
   1d234:	cmp	r0, #0
   1d238:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d23c:	movw	r1, #12236	; 0x2fcc
   1d240:	movt	r1, #3
   1d244:	mov	r0, r5
   1d248:	bl	1170c <strcmp@plt>
   1d24c:	cmp	r0, #0
   1d250:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d254:	movw	r1, #12244	; 0x2fd4
   1d258:	movt	r1, #3
   1d25c:	mov	r0, r5
   1d260:	bl	1170c <strcmp@plt>
   1d264:	cmp	r0, #0
   1d268:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d26c:	movw	r1, #12256	; 0x2fe0
   1d270:	movt	r1, #3
   1d274:	mov	r0, r5
   1d278:	bl	1170c <strcmp@plt>
   1d27c:	cmp	r0, #0
   1d280:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d284:	movw	r1, #12264	; 0x2fe8
   1d288:	movt	r1, #3
   1d28c:	mov	r0, r5
   1d290:	bl	1170c <strcmp@plt>
   1d294:	cmp	r0, #0
   1d298:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d29c:	movw	r1, #12272	; 0x2ff0
   1d2a0:	movt	r1, #3
   1d2a4:	mov	r0, r5
   1d2a8:	bl	1170c <strcmp@plt>
   1d2ac:	cmp	r0, #0
   1d2b0:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d2b4:	movw	r1, #12280	; 0x2ff8
   1d2b8:	movt	r1, #3
   1d2bc:	mov	r0, r5
   1d2c0:	bl	1170c <strcmp@plt>
   1d2c4:	cmp	r0, #0
   1d2c8:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d2cc:	mov	r0, r5
   1d2d0:	movw	r1, #12288	; 0x3000
   1d2d4:	movt	r1, #3
   1d2d8:	bl	1170c <strcmp@plt>
   1d2dc:	cmp	r0, #0
   1d2e0:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d2e4:	mov	r1, r9
   1d2e8:	movw	r0, #12296	; 0x3008
   1d2ec:	movt	r0, #3
   1d2f0:	bl	1170c <strcmp@plt>
   1d2f4:	clz	r0, r0
   1d2f8:	lsr	r0, r0, #5
   1d2fc:	b	1d180 <__assert_fail@plt+0xb5dc>
   1d300:	bl	119b8 <__errno_location@plt>
   1d304:	mov	r5, r0
   1d308:	mov	r0, r8
   1d30c:	ldr	r7, [r5]
   1d310:	bl	15940 <__assert_fail@plt+0x3d9c>
   1d314:	str	r7, [r5]
   1d318:	b	1d1cc <__assert_fail@plt+0xb628>
   1d31c:	ldrb	r3, [r9, #1]
   1d320:	cmp	r3, #47	; 0x2f
   1d324:	bne	1d20c <__assert_fail@plt+0xb668>
   1d328:	movw	r1, #12200	; 0x2fa8
   1d32c:	movt	r1, #3
   1d330:	mov	r0, r5
   1d334:	bl	1170c <strcmp@plt>
   1d338:	cmp	r0, #0
   1d33c:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d340:	movw	r1, #12208	; 0x2fb0
   1d344:	movt	r1, #3
   1d348:	mov	r0, r5
   1d34c:	bl	1170c <strcmp@plt>
   1d350:	cmp	r0, #0
   1d354:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d358:	movw	r1, #12216	; 0x2fb8
   1d35c:	movt	r1, #3
   1d360:	mov	r0, r5
   1d364:	bl	1170c <strcmp@plt>
   1d368:	cmp	r0, #0
   1d36c:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1d370:	b	1d20c <__assert_fail@plt+0xb668>
   1d374:	ldrb	r3, [r5, #1]
   1d378:	cmp	r3, #47	; 0x2f
   1d37c:	bne	1ce78 <__assert_fail@plt+0xb2d4>
   1d380:	movw	r1, #12200	; 0x2fa8
   1d384:	movt	r1, #3
   1d388:	mov	r0, r4
   1d38c:	bl	1170c <strcmp@plt>
   1d390:	cmp	r0, #0
   1d394:	beq	1ccdc <__assert_fail@plt+0xb138>
   1d398:	movw	r1, #12208	; 0x2fb0
   1d39c:	movt	r1, #3
   1d3a0:	mov	r0, r4
   1d3a4:	bl	1170c <strcmp@plt>
   1d3a8:	cmp	r0, #0
   1d3ac:	beq	1ccdc <__assert_fail@plt+0xb138>
   1d3b0:	movw	r1, #12216	; 0x2fb8
   1d3b4:	movt	r1, #3
   1d3b8:	mov	r0, r4
   1d3bc:	bl	1170c <strcmp@plt>
   1d3c0:	cmp	r0, #0
   1d3c4:	beq	1ccdc <__assert_fail@plt+0xb138>
   1d3c8:	b	1ce78 <__assert_fail@plt+0xb2d4>
   1d3cc:	push	{r2, r3}
   1d3d0:	push	{lr}		; (str lr, [sp, #-4]!)
   1d3d4:	sub	sp, sp, #12
   1d3d8:	ldr	r2, [sp, #16]
   1d3dc:	ands	r3, r2, #64	; 0x40
   1d3e0:	bne	1d3fc <__assert_fail@plt+0xb858>
   1d3e4:	bl	119ac <openat64@plt>
   1d3e8:	bl	2da60 <__assert_fail@plt+0x1bebc>
   1d3ec:	add	sp, sp, #12
   1d3f0:	pop	{lr}		; (ldr lr, [sp], #4)
   1d3f4:	add	sp, sp, #8
   1d3f8:	bx	lr
   1d3fc:	add	ip, sp, #20
   1d400:	ldr	r3, [sp, #20]
   1d404:	str	ip, [sp, #4]
   1d408:	b	1d3e4 <__assert_fail@plt+0xb840>
   1d40c:	orr	r2, r2, #540672	; 0x84000
   1d410:	strd	r4, [sp, #-16]!
   1d414:	orr	r2, r2, #2304	; 0x900
   1d418:	str	r6, [sp, #8]
   1d41c:	mov	r6, r3
   1d420:	str	lr, [sp, #12]
   1d424:	bl	1d3cc <__assert_fail@plt+0xb828>
   1d428:	subs	r5, r0, #0
   1d42c:	movlt	r4, #0
   1d430:	blt	1d444 <__assert_fail@plt+0xb8a0>
   1d434:	bl	11ac0 <fdopendir@plt>
   1d438:	subs	r4, r0, #0
   1d43c:	beq	1d458 <__assert_fail@plt+0xb8b4>
   1d440:	str	r5, [r6]
   1d444:	mov	r0, r4
   1d448:	ldrd	r4, [sp]
   1d44c:	ldr	r6, [sp, #8]
   1d450:	add	sp, sp, #12
   1d454:	pop	{pc}		; (ldr pc, [sp], #4)
   1d458:	bl	119b8 <__errno_location@plt>
   1d45c:	mov	r6, r0
   1d460:	mov	r0, r5
   1d464:	ldr	r5, [r6]
   1d468:	bl	11b80 <close@plt>
   1d46c:	b	1d440 <__assert_fail@plt+0xb89c>
   1d470:	strd	r4, [sp, #-16]!
   1d474:	subs	r4, r0, #0
   1d478:	str	r6, [sp, #8]
   1d47c:	str	lr, [sp, #12]
   1d480:	beq	1d518 <__assert_fail@plt+0xb974>
   1d484:	mov	r1, #47	; 0x2f
   1d488:	bl	11a78 <strrchr@plt>
   1d48c:	subs	r5, r0, #0
   1d490:	beq	1d4f0 <__assert_fail@plt+0xb94c>
   1d494:	add	r6, r5, #1
   1d498:	sub	r3, r6, r4
   1d49c:	cmp	r3, #6
   1d4a0:	ble	1d4f0 <__assert_fail@plt+0xb94c>
   1d4a4:	movw	r1, #12380	; 0x305c
   1d4a8:	movt	r1, #3
   1d4ac:	mov	r2, #7
   1d4b0:	sub	r0, r5, #6
   1d4b4:	bl	11b5c <strncmp@plt>
   1d4b8:	cmp	r0, #0
   1d4bc:	bne	1d4f0 <__assert_fail@plt+0xb94c>
   1d4c0:	movw	r1, #12388	; 0x3064
   1d4c4:	movt	r1, #3
   1d4c8:	mov	r2, #3
   1d4cc:	mov	r0, r6
   1d4d0:	bl	11b5c <strncmp@plt>
   1d4d4:	cmp	r0, #0
   1d4d8:	movne	r4, r6
   1d4dc:	bne	1d4f0 <__assert_fail@plt+0xb94c>
   1d4e0:	add	r4, r5, #4
   1d4e4:	movw	r3, #16928	; 0x4220
   1d4e8:	movt	r3, #4
   1d4ec:	str	r4, [r3]
   1d4f0:	movw	r2, #17096	; 0x42c8
   1d4f4:	movt	r2, #4
   1d4f8:	ldr	r6, [sp, #8]
   1d4fc:	movw	r3, #16932	; 0x4224
   1d500:	movt	r3, #4
   1d504:	str	r4, [r2]
   1d508:	str	r4, [r3]
   1d50c:	ldrd	r4, [sp]
   1d510:	add	sp, sp, #12
   1d514:	pop	{pc}		; (ldr pc, [sp], #4)
   1d518:	movw	r3, #16944	; 0x4230
   1d51c:	movt	r3, #4
   1d520:	movw	r0, #12324	; 0x3024
   1d524:	movt	r0, #3
   1d528:	ldr	r3, [r3]
   1d52c:	mov	r2, #55	; 0x37
   1d530:	mov	r1, #1
   1d534:	bl	11868 <fwrite@plt>
   1d538:	bl	11b68 <abort@plt>
   1d53c:	strd	r4, [sp, #-16]!
   1d540:	mov	r4, #0
   1d544:	mov	r5, #0
   1d548:	cmp	r1, #10
   1d54c:	str	r6, [sp, #8]
   1d550:	strd	r4, [r0]
   1d554:	strd	r4, [r0, #8]
   1d558:	str	lr, [sp, #12]
   1d55c:	strd	r4, [r0, #16]
   1d560:	strd	r4, [r0, #24]
   1d564:	strd	r4, [r0, #32]
   1d568:	strd	r4, [r0, #40]	; 0x28
   1d56c:	beq	1d584 <__assert_fail@plt+0xb9e0>
   1d570:	ldrd	r4, [sp]
   1d574:	str	r1, [r0]
   1d578:	ldr	r6, [sp, #8]
   1d57c:	add	sp, sp, #12
   1d580:	pop	{pc}		; (ldr pc, [sp], #4)
   1d584:	bl	11b68 <abort@plt>
   1d588:	mov	r2, #5
   1d58c:	strd	r4, [sp, #-16]!
   1d590:	mov	r5, r0
   1d594:	str	r6, [sp, #8]
   1d598:	mov	r6, r1
   1d59c:	mov	r1, r0
   1d5a0:	mov	r0, #0
   1d5a4:	str	lr, [sp, #12]
   1d5a8:	bl	117d8 <dcgettext@plt>
   1d5ac:	cmp	r5, r0
   1d5b0:	mov	r4, r0
   1d5b4:	beq	1d5cc <__assert_fail@plt+0xba28>
   1d5b8:	mov	r0, r4
   1d5bc:	ldrd	r4, [sp]
   1d5c0:	ldr	r6, [sp, #8]
   1d5c4:	add	sp, sp, #12
   1d5c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5cc:	bl	30c7c <__assert_fail@plt+0x1f0d8>
   1d5d0:	ldrb	r3, [r0]
   1d5d4:	bic	r3, r3, #32
   1d5d8:	cmp	r3, #85	; 0x55
   1d5dc:	bne	1d644 <__assert_fail@plt+0xbaa0>
   1d5e0:	ldrb	r3, [r0, #1]
   1d5e4:	bic	r3, r3, #32
   1d5e8:	cmp	r3, #84	; 0x54
   1d5ec:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d5f0:	ldrb	r3, [r0, #2]
   1d5f4:	bic	r3, r3, #32
   1d5f8:	cmp	r3, #70	; 0x46
   1d5fc:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d600:	ldrb	r3, [r0, #3]
   1d604:	cmp	r3, #45	; 0x2d
   1d608:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d60c:	ldrb	r3, [r0, #4]
   1d610:	cmp	r3, #56	; 0x38
   1d614:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d618:	ldrb	r3, [r0, #5]
   1d61c:	cmp	r3, #0
   1d620:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d624:	ldrb	r2, [r4]
   1d628:	movw	r3, #12480	; 0x30c0
   1d62c:	movt	r3, #3
   1d630:	movw	r4, #12492	; 0x30cc
   1d634:	movt	r4, #3
   1d638:	cmp	r2, #96	; 0x60
   1d63c:	movne	r4, r3
   1d640:	b	1d5b8 <__assert_fail@plt+0xba14>
   1d644:	cmp	r3, #71	; 0x47
   1d648:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d64c:	ldrb	r3, [r0, #1]
   1d650:	bic	r3, r3, #32
   1d654:	cmp	r3, #66	; 0x42
   1d658:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d65c:	ldrb	r3, [r0, #2]
   1d660:	cmp	r3, #49	; 0x31
   1d664:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d668:	ldrb	r3, [r0, #3]
   1d66c:	cmp	r3, #56	; 0x38
   1d670:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d674:	ldrb	r3, [r0, #4]
   1d678:	cmp	r3, #48	; 0x30
   1d67c:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d680:	ldrb	r3, [r0, #5]
   1d684:	cmp	r3, #51	; 0x33
   1d688:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d68c:	ldrb	r3, [r0, #6]
   1d690:	cmp	r3, #48	; 0x30
   1d694:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d698:	ldrb	r3, [r0, #7]
   1d69c:	cmp	r3, #0
   1d6a0:	bne	1d6c4 <__assert_fail@plt+0xbb20>
   1d6a4:	ldrb	r2, [r4]
   1d6a8:	movw	r3, #12484	; 0x30c4
   1d6ac:	movt	r3, #3
   1d6b0:	movw	r4, #12488	; 0x30c8
   1d6b4:	movt	r4, #3
   1d6b8:	cmp	r2, #96	; 0x60
   1d6bc:	movne	r4, r3
   1d6c0:	b	1d5b8 <__assert_fail@plt+0xba14>
   1d6c4:	movw	r3, #9968	; 0x26f0
   1d6c8:	movt	r3, #3
   1d6cc:	cmp	r6, #9
   1d6d0:	movw	r4, #12476	; 0x30bc
   1d6d4:	movt	r4, #3
   1d6d8:	movne	r4, r3
   1d6dc:	b	1d5b8 <__assert_fail@plt+0xba14>
   1d6e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d6e4:	strd	r6, [sp, #8]
   1d6e8:	strd	r8, [sp, #16]
   1d6ec:	strd	sl, [sp, #24]
   1d6f0:	mov	fp, r0
   1d6f4:	mov	sl, r1
   1d6f8:	str	lr, [sp, #32]
   1d6fc:	sub	sp, sp, #116	; 0x74
   1d700:	ldr	r8, [sp, #152]	; 0x98
   1d704:	str	r3, [sp, #28]
   1d708:	ldr	r3, [sp, #156]	; 0x9c
   1d70c:	str	r2, [sp, #32]
   1d710:	and	r4, r3, #2
   1d714:	ubfx	r3, r3, #1, #1
   1d718:	str	r3, [sp, #44]	; 0x2c
   1d71c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1d720:	str	r0, [sp, #64]	; 0x40
   1d724:	cmp	r8, #10
   1d728:	ldrls	pc, [pc, r8, lsl #2]
   1d72c:	b	1ee9c <__assert_fail@plt+0xd2f8>
   1d730:	andeq	sp, r1, r4, lsr fp
   1d734:	ldrdeq	sp, [r1], -r0
   1d738:	andeq	lr, r1, ip, lsr #3
   1d73c:	strdeq	sp, [r1], -r0
   1d740:	muleq	r1, r8, sl
   1d744:	andeq	sp, r1, r4, ror #21
   1d748:	andeq	sp, r1, r4, ror #22
   1d74c:	andeq	sp, r1, r0, lsr #23
   1d750:	andeq	sp, r1, ip, asr r7
   1d754:	andeq	sp, r1, ip, asr r7
   1d758:	andeq	sp, r1, ip, asr r7
   1d75c:	cmp	r8, #10
   1d760:	beq	1d78c <__assert_fail@plt+0xbbe8>
   1d764:	mov	r1, r8
   1d768:	movw	r0, #12496	; 0x30d0
   1d76c:	movt	r0, #3
   1d770:	bl	1d588 <__assert_fail@plt+0xb9e4>
   1d774:	mov	r1, r8
   1d778:	str	r0, [sp, #164]	; 0xa4
   1d77c:	movw	r0, #9968	; 0x26f0
   1d780:	movt	r0, #3
   1d784:	bl	1d588 <__assert_fail@plt+0xb9e4>
   1d788:	str	r0, [sp, #168]	; 0xa8
   1d78c:	cmp	r4, #0
   1d790:	movne	r4, #0
   1d794:	beq	1eb78 <__assert_fail@plt+0xcfd4>
   1d798:	mov	r3, #1
   1d79c:	mov	r5, #0
   1d7a0:	ldr	r0, [sp, #168]	; 0xa8
   1d7a4:	str	r3, [sp, #36]	; 0x24
   1d7a8:	str	r3, [sp, #40]	; 0x28
   1d7ac:	str	r5, [sp, #68]	; 0x44
   1d7b0:	bl	11988 <strlen@plt>
   1d7b4:	ldr	r3, [sp, #168]	; 0xa8
   1d7b8:	str	r5, [sp, #48]	; 0x30
   1d7bc:	str	r0, [sp, #56]	; 0x38
   1d7c0:	str	r3, [sp, #60]	; 0x3c
   1d7c4:	str	r5, [sp, #72]	; 0x48
   1d7c8:	str	r8, [sp, #152]	; 0x98
   1d7cc:	mov	r8, fp
   1d7d0:	mov	r9, #0
   1d7d4:	ldr	fp, [sp, #152]	; 0x98
   1d7d8:	ldr	r3, [sp, #28]
   1d7dc:	cmn	r3, #1
   1d7e0:	beq	1dd40 <__assert_fail@plt+0xc19c>
   1d7e4:	ldr	r3, [sp, #28]
   1d7e8:	subs	r6, r3, r9
   1d7ec:	movne	r6, #1
   1d7f0:	cmp	r6, #0
   1d7f4:	beq	1dd58 <__assert_fail@plt+0xc1b4>
   1d7f8:	ldr	r0, [sp, #32]
   1d7fc:	ldr	r7, [sp, #40]	; 0x28
   1d800:	add	r3, r0, r9
   1d804:	cmp	fp, #2
   1d808:	moveq	r7, #0
   1d80c:	andne	r7, r7, #1
   1d810:	str	r3, [sp, #52]	; 0x34
   1d814:	cmp	r7, #0
   1d818:	beq	1e1f4 <__assert_fail@plt+0xc650>
   1d81c:	ldr	r2, [sp, #56]	; 0x38
   1d820:	cmp	r2, #0
   1d824:	beq	1e490 <__assert_fail@plt+0xc8ec>
   1d828:	ldr	r1, [sp, #28]
   1d82c:	cmp	r2, #1
   1d830:	mov	r3, r2
   1d834:	movls	r3, #0
   1d838:	movhi	r3, #1
   1d83c:	add	r5, r9, r2
   1d840:	cmn	r1, #1
   1d844:	movne	r3, #0
   1d848:	cmp	r3, #0
   1d84c:	beq	1d858 <__assert_fail@plt+0xbcb4>
   1d850:	bl	11988 <strlen@plt>
   1d854:	str	r0, [sp, #28]
   1d858:	ldr	r3, [sp, #28]
   1d85c:	cmp	r5, r3
   1d860:	bhi	1e490 <__assert_fail@plt+0xc8ec>
   1d864:	ldr	r0, [sp, #52]	; 0x34
   1d868:	ldr	r2, [sp, #56]	; 0x38
   1d86c:	ldr	r1, [sp, #60]	; 0x3c
   1d870:	bl	117c0 <memcmp@plt>
   1d874:	cmp	r0, #0
   1d878:	bne	1e490 <__assert_fail@plt+0xc8ec>
   1d87c:	ldr	r3, [sp, #44]	; 0x2c
   1d880:	cmp	r3, #0
   1d884:	bne	1edc0 <__assert_fail@plt+0xd21c>
   1d888:	ldr	r3, [sp, #52]	; 0x34
   1d88c:	ldrb	r5, [r3]
   1d890:	cmp	r5, #126	; 0x7e
   1d894:	ldrls	pc, [pc, r5, lsl #2]
   1d898:	b	1e150 <__assert_fail@plt+0xc5ac>
   1d89c:	andeq	lr, r1, r4, asr r0
   1d8a0:	andeq	lr, r1, r0, asr r1
   1d8a4:	andeq	lr, r1, r0, asr r1
   1d8a8:	andeq	lr, r1, r0, asr r1
   1d8ac:	andeq	lr, r1, r0, asr r1
   1d8b0:	andeq	lr, r1, r0, asr r1
   1d8b4:	andeq	lr, r1, r0, asr r1
   1d8b8:	andeq	lr, r1, r8, lsr #32
   1d8bc:	andeq	lr, r1, r0, lsr #32
   1d8c0:	andeq	sp, r1, r8, ror #30
   1d8c4:	andeq	lr, r1, r4, lsl r0
   1d8c8:	andeq	sp, r1, r0, ror #30
   1d8cc:	strdeq	sp, [r1], -r0
   1d8d0:	andeq	lr, r1, ip, lsr r0
   1d8d4:	andeq	lr, r1, r0, asr r1
   1d8d8:	andeq	lr, r1, r0, asr r1
   1d8dc:	andeq	lr, r1, r0, asr r1
   1d8e0:	andeq	lr, r1, r0, asr r1
   1d8e4:	andeq	lr, r1, r0, asr r1
   1d8e8:	andeq	lr, r1, r0, asr r1
   1d8ec:	andeq	lr, r1, r0, asr r1
   1d8f0:	andeq	lr, r1, r0, asr r1
   1d8f4:	andeq	lr, r1, r0, asr r1
   1d8f8:	andeq	lr, r1, r0, asr r1
   1d8fc:	andeq	lr, r1, r0, asr r1
   1d900:	andeq	lr, r1, r0, asr r1
   1d904:	andeq	lr, r1, r0, asr r1
   1d908:	andeq	lr, r1, r0, asr r1
   1d90c:	andeq	lr, r1, r0, asr r1
   1d910:	andeq	lr, r1, r0, asr r1
   1d914:	andeq	lr, r1, r0, asr r1
   1d918:	andeq	lr, r1, r0, asr r1
   1d91c:	andeq	lr, r1, ip, lsr #2
   1d920:	andeq	lr, r1, r4, lsr r0
   1d924:	andeq	lr, r1, r4, lsr r0
   1d928:	andeq	lr, r1, r0, lsl r1
   1d92c:	andeq	lr, r1, r4, lsr r0
   1d930:	andeq	lr, r1, r4, asr #2
   1d934:	andeq	lr, r1, r4, lsr r0
   1d938:	muleq	r1, r0, lr
   1d93c:	andeq	lr, r1, r4, lsr r0
   1d940:	andeq	lr, r1, r4, lsr r0
   1d944:	andeq	lr, r1, r4, lsr r0
   1d948:	andeq	lr, r1, r4, asr #2
   1d94c:	andeq	lr, r1, r4, asr #2
   1d950:	andeq	lr, r1, r4, asr #2
   1d954:	andeq	lr, r1, r4, asr #2
   1d958:	andeq	lr, r1, r4, asr #2
   1d95c:	andeq	lr, r1, r4, asr #2
   1d960:	andeq	lr, r1, r4, asr #2
   1d964:	andeq	lr, r1, r4, asr #2
   1d968:	andeq	lr, r1, r4, asr #2
   1d96c:	andeq	lr, r1, r4, asr #2
   1d970:	andeq	lr, r1, r4, asr #2
   1d974:	andeq	lr, r1, r4, asr #2
   1d978:	andeq	lr, r1, r4, asr #2
   1d97c:	andeq	lr, r1, r4, asr #2
   1d980:	andeq	lr, r1, r4, asr #2
   1d984:	andeq	lr, r1, r4, asr #2
   1d988:	andeq	lr, r1, r4, lsr r0
   1d98c:	andeq	lr, r1, r4, lsr r0
   1d990:	andeq	lr, r1, r4, lsr r0
   1d994:	andeq	lr, r1, r4, lsr r0
   1d998:	andeq	sp, r1, r4, ror #28
   1d99c:	andeq	lr, r1, r0, asr r1
   1d9a0:	andeq	lr, r1, r4, asr #2
   1d9a4:	andeq	lr, r1, r4, asr #2
   1d9a8:	andeq	lr, r1, r4, asr #2
   1d9ac:	andeq	lr, r1, r4, asr #2
   1d9b0:	andeq	lr, r1, r4, asr #2
   1d9b4:	andeq	lr, r1, r4, asr #2
   1d9b8:	andeq	lr, r1, r4, asr #2
   1d9bc:	andeq	lr, r1, r4, asr #2
   1d9c0:	andeq	lr, r1, r4, asr #2
   1d9c4:	andeq	lr, r1, r4, asr #2
   1d9c8:	andeq	lr, r1, r4, asr #2
   1d9cc:	andeq	lr, r1, r4, asr #2
   1d9d0:	andeq	lr, r1, r4, asr #2
   1d9d4:	andeq	lr, r1, r4, asr #2
   1d9d8:	andeq	lr, r1, r4, asr #2
   1d9dc:	andeq	lr, r1, r4, asr #2
   1d9e0:	andeq	lr, r1, r4, asr #2
   1d9e4:	andeq	lr, r1, r4, asr #2
   1d9e8:	andeq	lr, r1, r4, asr #2
   1d9ec:	andeq	lr, r1, r4, asr #2
   1d9f0:	andeq	lr, r1, r4, asr #2
   1d9f4:	andeq	lr, r1, r4, asr #2
   1d9f8:	andeq	lr, r1, r4, asr #2
   1d9fc:	andeq	lr, r1, r4, asr #2
   1da00:	andeq	lr, r1, r4, asr #2
   1da04:	andeq	lr, r1, r4, asr #2
   1da08:	andeq	lr, r1, r4, lsr r0
   1da0c:	andeq	sp, r1, ip, lsl #28
   1da10:	andeq	lr, r1, r4, asr #2
   1da14:	andeq	lr, r1, r4, lsr r0
   1da18:	andeq	lr, r1, r4, asr #2
   1da1c:	andeq	lr, r1, r4, lsr r0
   1da20:	andeq	lr, r1, r4, asr #2
   1da24:	andeq	lr, r1, r4, asr #2
   1da28:	andeq	lr, r1, r4, asr #2
   1da2c:	andeq	lr, r1, r4, asr #2
   1da30:	andeq	lr, r1, r4, asr #2
   1da34:	andeq	lr, r1, r4, asr #2
   1da38:	andeq	lr, r1, r4, asr #2
   1da3c:	andeq	lr, r1, r4, asr #2
   1da40:	andeq	lr, r1, r4, asr #2
   1da44:	andeq	lr, r1, r4, asr #2
   1da48:	andeq	lr, r1, r4, asr #2
   1da4c:	andeq	lr, r1, r4, asr #2
   1da50:	andeq	lr, r1, r4, asr #2
   1da54:	andeq	lr, r1, r4, asr #2
   1da58:	andeq	lr, r1, r4, asr #2
   1da5c:	andeq	lr, r1, r4, asr #2
   1da60:	andeq	lr, r1, r4, asr #2
   1da64:	andeq	lr, r1, r4, asr #2
   1da68:	andeq	lr, r1, r4, asr #2
   1da6c:	andeq	lr, r1, r4, asr #2
   1da70:	andeq	lr, r1, r4, asr #2
   1da74:	andeq	lr, r1, r4, asr #2
   1da78:	andeq	lr, r1, r4, asr #2
   1da7c:	andeq	lr, r1, r4, asr #2
   1da80:	andeq	lr, r1, r4, asr #2
   1da84:	andeq	lr, r1, r4, asr #2
   1da88:	andeq	sp, r1, r0, lsr ip
   1da8c:	andeq	lr, r1, r4, lsr r0
   1da90:	andeq	sp, r1, r0, lsr ip
   1da94:	andeq	lr, r1, r0, lsl r1
   1da98:	cmp	r4, #0
   1da9c:	moveq	r3, #1
   1daa0:	streq	r3, [sp, #40]	; 0x28
   1daa4:	beq	1e1b8 <__assert_fail@plt+0xc614>
   1daa8:	mov	r3, #0
   1daac:	mov	r2, #1
   1dab0:	mov	r4, r3
   1dab4:	str	r2, [sp, #36]	; 0x24
   1dab8:	str	r2, [sp, #44]	; 0x2c
   1dabc:	str	r2, [sp, #56]	; 0x38
   1dac0:	str	r3, [sp, #68]	; 0x44
   1dac4:	movw	r3, #9968	; 0x26f0
   1dac8:	movt	r3, #3
   1dacc:	str	r4, [sp, #40]	; 0x28
   1dad0:	mov	r8, #2
   1dad4:	str	r4, [sp, #48]	; 0x30
   1dad8:	str	r3, [sp, #60]	; 0x3c
   1dadc:	str	r4, [sp, #72]	; 0x48
   1dae0:	b	1d7c8 <__assert_fail@plt+0xbc24>
   1dae4:	cmp	r4, #0
   1dae8:	bne	1ed34 <__assert_fail@plt+0xd190>
   1daec:	cmp	sl, #0
   1daf0:	beq	1eaf4 <__assert_fail@plt+0xcf50>
   1daf4:	mov	r3, #34	; 0x22
   1daf8:	mov	r1, r4
   1dafc:	mov	r2, #1
   1db00:	strb	r3, [fp]
   1db04:	movw	r3, #12476	; 0x30bc
   1db08:	movt	r3, #3
   1db0c:	mov	r4, r2
   1db10:	str	r2, [sp, #36]	; 0x24
   1db14:	str	r2, [sp, #40]	; 0x28
   1db18:	str	r1, [sp, #44]	; 0x2c
   1db1c:	str	r1, [sp, #48]	; 0x30
   1db20:	str	r2, [sp, #56]	; 0x38
   1db24:	str	r3, [sp, #60]	; 0x3c
   1db28:	str	r1, [sp, #68]	; 0x44
   1db2c:	str	r1, [sp, #72]	; 0x48
   1db30:	b	1d7c8 <__assert_fail@plt+0xbc24>
   1db34:	mov	r3, #0
   1db38:	mov	r4, r8
   1db3c:	str	r3, [sp, #40]	; 0x28
   1db40:	str	r3, [sp, #44]	; 0x2c
   1db44:	str	r3, [sp, #48]	; 0x30
   1db48:	str	r8, [sp, #56]	; 0x38
   1db4c:	str	r3, [sp, #60]	; 0x3c
   1db50:	str	r3, [sp, #68]	; 0x44
   1db54:	mov	r3, #1
   1db58:	str	r3, [sp, #36]	; 0x24
   1db5c:	str	r8, [sp, #72]	; 0x48
   1db60:	b	1d7c8 <__assert_fail@plt+0xbc24>
   1db64:	mov	r3, #1
   1db68:	mov	r2, #0
   1db6c:	mov	r4, r2
   1db70:	mov	r8, #5
   1db74:	str	r3, [sp, #36]	; 0x24
   1db78:	str	r3, [sp, #40]	; 0x28
   1db7c:	str	r3, [sp, #44]	; 0x2c
   1db80:	str	r2, [sp, #48]	; 0x30
   1db84:	str	r3, [sp, #56]	; 0x38
   1db88:	movw	r3, #12476	; 0x30bc
   1db8c:	movt	r3, #3
   1db90:	str	r3, [sp, #60]	; 0x3c
   1db94:	str	r2, [sp, #68]	; 0x44
   1db98:	str	r2, [sp, #72]	; 0x48
   1db9c:	b	1d7c8 <__assert_fail@plt+0xbc24>
   1dba0:	mov	r3, #0
   1dba4:	mov	r2, #1
   1dba8:	mov	r4, r3
   1dbac:	str	r2, [sp, #36]	; 0x24
   1dbb0:	str	r2, [sp, #40]	; 0x28
   1dbb4:	str	r3, [sp, #44]	; 0x2c
   1dbb8:	str	r3, [sp, #48]	; 0x30
   1dbbc:	str	r3, [sp, #56]	; 0x38
   1dbc0:	str	r3, [sp, #60]	; 0x3c
   1dbc4:	str	r3, [sp, #68]	; 0x44
   1dbc8:	str	r3, [sp, #72]	; 0x48
   1dbcc:	b	1d7c8 <__assert_fail@plt+0xbc24>
   1dbd0:	mov	r2, #1
   1dbd4:	mov	r3, #0
   1dbd8:	mov	r4, r3
   1dbdc:	str	r2, [sp, #36]	; 0x24
   1dbe0:	str	r2, [sp, #44]	; 0x2c
   1dbe4:	str	r8, [sp, #56]	; 0x38
   1dbe8:	str	r3, [sp, #68]	; 0x44
   1dbec:	b	1dac4 <__assert_fail@plt+0xbf20>
   1dbf0:	mov	r3, #1
   1dbf4:	mov	r2, #0
   1dbf8:	mov	r4, r2
   1dbfc:	mov	r8, #2
   1dc00:	str	r3, [sp, #36]	; 0x24
   1dc04:	str	r3, [sp, #40]	; 0x28
   1dc08:	str	r3, [sp, #44]	; 0x2c
   1dc0c:	str	r2, [sp, #48]	; 0x30
   1dc10:	str	r3, [sp, #56]	; 0x38
   1dc14:	movw	r3, #9968	; 0x26f0
   1dc18:	movt	r3, #3
   1dc1c:	str	r3, [sp, #60]	; 0x3c
   1dc20:	str	r2, [sp, #68]	; 0x44
   1dc24:	str	r2, [sp, #72]	; 0x48
   1dc28:	b	1d7c8 <__assert_fail@plt+0xbc24>
   1dc2c:	mov	r7, #0
   1dc30:	ldr	r3, [sp, #28]
   1dc34:	cmn	r3, #1
   1dc38:	beq	1e710 <__assert_fail@plt+0xcb6c>
   1dc3c:	ldr	r3, [sp, #28]
   1dc40:	subs	r2, r3, #1
   1dc44:	movne	r2, #1
   1dc48:	sub	r3, fp, #2
   1dc4c:	cmp	r2, #0
   1dc50:	clz	r3, r3
   1dc54:	lsr	r3, r3, #5
   1dc58:	bne	1dc64 <__assert_fail@plt+0xc0c0>
   1dc5c:	cmp	r9, #0
   1dc60:	beq	1e470 <__assert_fail@plt+0xc8cc>
   1dc64:	mov	r6, #0
   1dc68:	ldr	r2, [sp, #40]	; 0x28
   1dc6c:	eor	r2, r2, #1
   1dc70:	orrs	r3, r3, r2
   1dc74:	bne	1de4c <__assert_fail@plt+0xc2a8>
   1dc78:	ldr	r2, [sp, #160]	; 0xa0
   1dc7c:	cmp	r2, #0
   1dc80:	beq	1dca0 <__assert_fail@plt+0xc0fc>
   1dc84:	ldr	r0, [sp, #160]	; 0xa0
   1dc88:	ubfx	r1, r5, #5, #8
   1dc8c:	and	r2, r5, #31
   1dc90:	ldr	r1, [r0, r1, lsl #2]
   1dc94:	lsr	r2, r1, r2
   1dc98:	tst	r2, #1
   1dc9c:	bne	1dca8 <__assert_fail@plt+0xc104>
   1dca0:	cmp	r7, #0
   1dca4:	beq	1df18 <__assert_fail@plt+0xc374>
   1dca8:	ldr	r2, [sp, #44]	; 0x2c
   1dcac:	sub	r3, fp, #2
   1dcb0:	clz	r3, r3
   1dcb4:	lsr	r3, r3, #5
   1dcb8:	cmp	r2, #0
   1dcbc:	bne	1ea64 <__assert_fail@plt+0xcec0>
   1dcc0:	ldr	r2, [sp, #48]	; 0x30
   1dcc4:	eor	r2, r2, #1
   1dcc8:	ands	r3, r3, r2
   1dccc:	beq	1dd04 <__assert_fail@plt+0xc160>
   1dcd0:	cmp	sl, r4
   1dcd4:	str	r3, [sp, #48]	; 0x30
   1dcd8:	movhi	r2, #39	; 0x27
   1dcdc:	strbhi	r2, [r8, r4]
   1dce0:	add	r2, r4, #1
   1dce4:	cmp	sl, r2
   1dce8:	movhi	r1, #36	; 0x24
   1dcec:	strbhi	r1, [r8, r2]
   1dcf0:	add	r2, r4, #2
   1dcf4:	add	r4, r4, #3
   1dcf8:	cmp	sl, r2
   1dcfc:	movhi	r1, #39	; 0x27
   1dd00:	strbhi	r1, [r8, r2]
   1dd04:	cmp	r4, sl
   1dd08:	add	r9, r9, #1
   1dd0c:	movcc	r3, #92	; 0x5c
   1dd10:	strbcc	r3, [r8, r4]
   1dd14:	add	r4, r4, #1
   1dd18:	cmp	r4, sl
   1dd1c:	ldr	r3, [sp, #36]	; 0x24
   1dd20:	strbcc	r5, [r8, r4]
   1dd24:	cmp	r6, #0
   1dd28:	add	r4, r4, #1
   1dd2c:	moveq	r3, #0
   1dd30:	str	r3, [sp, #36]	; 0x24
   1dd34:	ldr	r3, [sp, #28]
   1dd38:	cmn	r3, #1
   1dd3c:	bne	1d7e4 <__assert_fail@plt+0xbc40>
   1dd40:	ldr	r3, [sp, #32]
   1dd44:	ldrb	r6, [r3, r9]
   1dd48:	adds	r6, r6, #0
   1dd4c:	movne	r6, #1
   1dd50:	cmp	r6, #0
   1dd54:	bne	1d7f8 <__assert_fail@plt+0xbc54>
   1dd58:	str	fp, [sp, #152]	; 0x98
   1dd5c:	mov	fp, r8
   1dd60:	cmp	r4, #0
   1dd64:	ldr	r1, [sp, #44]	; 0x2c
   1dd68:	movne	r3, #0
   1dd6c:	ldr	r8, [sp, #152]	; 0x98
   1dd70:	sub	r2, r8, #2
   1dd74:	clz	r2, r2
   1dd78:	lsr	r2, r2, #5
   1dd7c:	andeq	r3, r2, r1
   1dd80:	cmp	r3, #0
   1dd84:	bne	1ee40 <__assert_fail@plt+0xd29c>
   1dd88:	eor	r3, r1, #1
   1dd8c:	ands	r2, r2, r3
   1dd90:	beq	1ed6c <__assert_fail@plt+0xd1c8>
   1dd94:	ldr	r3, [sp, #68]	; 0x44
   1dd98:	cmp	r3, #0
   1dd9c:	beq	1ed70 <__assert_fail@plt+0xd1cc>
   1dda0:	ldr	r3, [sp, #36]	; 0x24
   1dda4:	cmp	r3, #0
   1dda8:	bne	1edfc <__assert_fail@plt+0xd258>
   1ddac:	ldr	r3, [sp, #72]	; 0x48
   1ddb0:	adds	r3, r3, #0
   1ddb4:	movne	r3, #1
   1ddb8:	cmp	sl, #0
   1ddbc:	movne	r3, #0
   1ddc0:	cmp	r3, #0
   1ddc4:	ldreq	r2, [sp, #68]	; 0x44
   1ddc8:	beq	1ed70 <__assert_fail@plt+0xd1cc>
   1ddcc:	ldr	r2, [sp, #72]	; 0x48
   1ddd0:	str	r3, [sp, #68]	; 0x44
   1ddd4:	movw	r3, #9968	; 0x26f0
   1ddd8:	movt	r3, #3
   1dddc:	mov	r1, #39	; 0x27
   1dde0:	mov	r4, #1
   1dde4:	ldr	sl, [sp, #72]	; 0x48
   1dde8:	mov	r8, #2
   1ddec:	str	r3, [sp, #60]	; 0x3c
   1ddf0:	mov	r3, #0
   1ddf4:	strb	r1, [fp]
   1ddf8:	str	r3, [sp, #44]	; 0x2c
   1ddfc:	str	r4, [sp, #56]	; 0x38
   1de00:	str	r2, [sp, #72]	; 0x48
   1de04:	b	1d7c8 <__assert_fail@plt+0xbc24>
   1de08:	mov	r7, #0
   1de0c:	cmp	fp, #2
   1de10:	beq	1e6f0 <__assert_fail@plt+0xcb4c>
   1de14:	ldr	r2, [sp, #40]	; 0x28
   1de18:	ldr	r3, [sp, #56]	; 0x38
   1de1c:	ldr	r1, [sp, #44]	; 0x2c
   1de20:	cmp	r3, #0
   1de24:	moveq	r3, #0
   1de28:	andne	r3, r2, r1
   1de2c:	cmp	r3, #0
   1de30:	moveq	r5, #92	; 0x5c
   1de34:	moveq	r3, r5
   1de38:	bne	1e6fc <__assert_fail@plt+0xcb58>
   1de3c:	ldr	r2, [sp, #40]	; 0x28
   1de40:	cmp	r2, #0
   1de44:	bne	1eb38 <__assert_fail@plt+0xcf94>
   1de48:	mov	r6, #0
   1de4c:	ldr	r3, [sp, #44]	; 0x2c
   1de50:	cmp	r3, #0
   1de54:	beq	1e6e8 <__assert_fail@plt+0xcb44>
   1de58:	mov	r3, #0
   1de5c:	b	1dc78 <__assert_fail@plt+0xc0d4>
   1de60:	mov	r7, #0
   1de64:	cmp	fp, #2
   1de68:	beq	1e760 <__assert_fail@plt+0xcbbc>
   1de6c:	cmp	fp, #5
   1de70:	beq	1e724 <__assert_fail@plt+0xcb80>
   1de74:	sub	r3, fp, #2
   1de78:	mov	r6, #0
   1de7c:	clz	r3, r3
   1de80:	mov	r5, #63	; 0x3f
   1de84:	lsr	r3, r3, #5
   1de88:	b	1dc68 <__assert_fail@plt+0xc0c4>
   1de8c:	mov	r7, #0
   1de90:	cmp	fp, #2
   1de94:	movne	r3, #0
   1de98:	movne	r5, #39	; 0x27
   1de9c:	strne	r6, [sp, #68]	; 0x44
   1dea0:	bne	1dc68 <__assert_fail@plt+0xc0c4>
   1dea4:	ldr	r3, [sp, #44]	; 0x2c
   1dea8:	cmp	r3, #0
   1deac:	bne	1eb68 <__assert_fail@plt+0xcfc4>
   1deb0:	ldr	r3, [sp, #72]	; 0x48
   1deb4:	cmp	sl, #0
   1deb8:	clz	r3, r3
   1debc:	lsr	r3, r3, #5
   1dec0:	moveq	r3, #0
   1dec4:	cmp	r3, #0
   1dec8:	bne	1ea94 <__assert_fail@plt+0xcef0>
   1decc:	cmp	sl, r4
   1ded0:	movhi	r3, #39	; 0x27
   1ded4:	strbhi	r3, [r8, r4]
   1ded8:	add	r3, r4, #1
   1dedc:	cmp	sl, r3
   1dee0:	movhi	r2, #92	; 0x5c
   1dee4:	strbhi	r2, [r8, r3]
   1dee8:	add	r3, r4, #2
   1deec:	cmp	sl, r3
   1def0:	bls	1defc <__assert_fail@plt+0xc358>
   1def4:	mov	r2, #39	; 0x27
   1def8:	strb	r2, [r8, r3]
   1defc:	mov	r3, #0
   1df00:	cmp	r7, #0
   1df04:	add	r4, r4, #3
   1df08:	mov	r5, #39	; 0x27
   1df0c:	str	r3, [sp, #48]	; 0x30
   1df10:	str	r6, [sp, #68]	; 0x44
   1df14:	bne	1dca8 <__assert_fail@plt+0xc104>
   1df18:	ldr	r2, [sp, #48]	; 0x30
   1df1c:	eor	r3, r3, #1
   1df20:	add	r9, r9, #1
   1df24:	and	r3, r3, r2
   1df28:	uxtb	r3, r3
   1df2c:	cmp	r3, #0
   1df30:	beq	1dd18 <__assert_fail@plt+0xc174>
   1df34:	cmp	sl, r4
   1df38:	movhi	r3, #39	; 0x27
   1df3c:	strbhi	r3, [r8, r4]
   1df40:	add	r3, r4, #1
   1df44:	add	r4, r4, #2
   1df48:	cmp	sl, r3
   1df4c:	movhi	r2, #39	; 0x27
   1df50:	strbhi	r2, [r8, r3]
   1df54:	mov	r3, #0
   1df58:	str	r3, [sp, #48]	; 0x30
   1df5c:	b	1dd18 <__assert_fail@plt+0xc174>
   1df60:	mov	r3, #118	; 0x76
   1df64:	b	1de3c <__assert_fail@plt+0xc298>
   1df68:	mov	r3, #116	; 0x74
   1df6c:	ldr	r2, [sp, #44]	; 0x2c
   1df70:	cmp	fp, #2
   1df74:	movne	r2, #0
   1df78:	andeq	r2, r2, #1
   1df7c:	cmp	r2, #0
   1df80:	beq	1de3c <__assert_fail@plt+0xc298>
   1df84:	mov	fp, r8
   1df88:	mov	r8, #2
   1df8c:	ldr	r3, [sp, #40]	; 0x28
   1df90:	cmp	r3, #0
   1df94:	movne	r8, #4
   1df98:	mov	lr, #0
   1df9c:	mov	r0, fp
   1dfa0:	ldr	r2, [sp, #32]
   1dfa4:	ldr	r3, [sp, #156]	; 0x9c
   1dfa8:	ldr	r1, [sp, #164]	; 0xa4
   1dfac:	bic	ip, r3, #2
   1dfb0:	ldr	r3, [sp, #28]
   1dfb4:	stm	sp, {r8, ip, lr}
   1dfb8:	ldr	ip, [sp, #168]	; 0xa8
   1dfbc:	str	r1, [sp, #12]
   1dfc0:	mov	r1, sl
   1dfc4:	str	ip, [sp, #16]
   1dfc8:	bl	1d6e0 <__assert_fail@plt+0xbb3c>
   1dfcc:	mov	r4, r0
   1dfd0:	mov	r0, r4
   1dfd4:	add	sp, sp, #116	; 0x74
   1dfd8:	ldrd	r4, [sp]
   1dfdc:	ldrd	r6, [sp, #8]
   1dfe0:	ldrd	r8, [sp, #16]
   1dfe4:	ldrd	sl, [sp, #24]
   1dfe8:	add	sp, sp, #32
   1dfec:	pop	{pc}		; (ldr pc, [sp], #4)
   1dff0:	mov	r5, #102	; 0x66
   1dff4:	ldr	r2, [sp, #44]	; 0x2c
   1dff8:	sub	r3, fp, #2
   1dffc:	clz	r3, r3
   1e000:	lsr	r3, r3, #5
   1e004:	cmp	r2, #0
   1e008:	bne	1ea64 <__assert_fail@plt+0xcec0>
   1e00c:	mov	r6, r2
   1e010:	b	1dd04 <__assert_fail@plt+0xc160>
   1e014:	mov	r5, #110	; 0x6e
   1e018:	mov	r6, #0
   1e01c:	b	1dca8 <__assert_fail@plt+0xc104>
   1e020:	mov	r5, #98	; 0x62
   1e024:	b	1dff4 <__assert_fail@plt+0xc450>
   1e028:	mov	r5, #97	; 0x61
   1e02c:	b	1dff4 <__assert_fail@plt+0xc450>
   1e030:	mov	r7, #0
   1e034:	mov	r6, #0
   1e038:	b	1de58 <__assert_fail@plt+0xc2b4>
   1e03c:	mov	r5, #114	; 0x72
   1e040:	b	1e018 <__assert_fail@plt+0xc474>
   1e044:	ldr	r3, [sp, #44]	; 0x2c
   1e048:	cmp	r3, #0
   1e04c:	bne	1eddc <__assert_fail@plt+0xd238>
   1e050:	mov	r7, r3
   1e054:	ldr	r3, [sp, #48]	; 0x30
   1e058:	sub	r2, fp, #2
   1e05c:	clz	r2, r2
   1e060:	lsr	r2, r2, #5
   1e064:	eor	r3, r3, #1
   1e068:	ands	r3, r2, r3
   1e06c:	beq	1ea80 <__assert_fail@plt+0xcedc>
   1e070:	cmp	sl, r4
   1e074:	movhi	r1, #39	; 0x27
   1e078:	strbhi	r1, [r8, r4]
   1e07c:	add	r1, r4, #1
   1e080:	cmp	sl, r1
   1e084:	movhi	r0, #36	; 0x24
   1e088:	strbhi	r0, [r8, r1]
   1e08c:	add	r1, r4, #2
   1e090:	cmp	sl, r1
   1e094:	movhi	r0, #39	; 0x27
   1e098:	strbhi	r0, [r8, r1]
   1e09c:	add	r1, r4, #3
   1e0a0:	cmp	sl, r1
   1e0a4:	bls	1ead8 <__assert_fail@plt+0xcf34>
   1e0a8:	mov	r4, r1
   1e0ac:	mov	r1, #92	; 0x5c
   1e0b0:	mov	r0, r4
   1e0b4:	str	r3, [sp, #48]	; 0x30
   1e0b8:	strb	r1, [r8, r4]
   1e0bc:	cmp	fp, #2
   1e0c0:	add	r4, r4, #1
   1e0c4:	beq	1eb28 <__assert_fail@plt+0xcf84>
   1e0c8:	ldr	r1, [sp, #28]
   1e0cc:	add	r3, r9, #1
   1e0d0:	cmp	r3, r1
   1e0d4:	bcs	1e0ec <__assert_fail@plt+0xc548>
   1e0d8:	ldr	r1, [sp, #32]
   1e0dc:	ldrb	r3, [r1, r3]
   1e0e0:	sub	r3, r3, #48	; 0x30
   1e0e4:	cmp	r3, #9
   1e0e8:	bls	1eb40 <__assert_fail@plt+0xcf9c>
   1e0ec:	mov	r5, #48	; 0x30
   1e0f0:	ldr	r3, [sp, #40]	; 0x28
   1e0f4:	eor	r3, r3, #1
   1e0f8:	orrs	r2, r2, r3
   1e0fc:	mov	r3, r6
   1e100:	moveq	r6, r2
   1e104:	beq	1dc78 <__assert_fail@plt+0xc0d4>
   1e108:	mov	r6, #0
   1e10c:	b	1dca0 <__assert_fail@plt+0xc0fc>
   1e110:	cmp	r9, #0
   1e114:	mov	r2, r7
   1e118:	bne	1e6b8 <__assert_fail@plt+0xcb14>
   1e11c:	mov	r6, r7
   1e120:	mov	r3, r9
   1e124:	mov	r7, r2
   1e128:	b	1dc68 <__assert_fail@plt+0xc0c4>
   1e12c:	mov	r2, r7
   1e130:	mov	r6, r7
   1e134:	mov	r3, #0
   1e138:	mov	r7, r2
   1e13c:	mov	r5, #32
   1e140:	b	1dc68 <__assert_fail@plt+0xc0c4>
   1e144:	mov	r6, r7
   1e148:	b	1de58 <__assert_fail@plt+0xc2b4>
   1e14c:	mov	r7, #0
   1e150:	ldr	r3, [sp, #64]	; 0x40
   1e154:	cmp	r3, #1
   1e158:	bne	1e778 <__assert_fail@plt+0xcbd4>
   1e15c:	bl	11964 <__ctype_b_loc@plt>
   1e160:	ldr	r2, [r0]
   1e164:	sxth	r3, r5
   1e168:	lsl	r3, r3, #1
   1e16c:	ldr	r1, [sp, #64]	; 0x40
   1e170:	ldrh	r3, [r2, r3]
   1e174:	mov	ip, r1
   1e178:	and	r3, r3, #16384	; 0x4000
   1e17c:	cmp	r3, #0
   1e180:	ldr	r3, [sp, #40]	; 0x28
   1e184:	movne	r6, #1
   1e188:	moveq	r6, #0
   1e18c:	movne	r2, #0
   1e190:	andeq	r2, r3, #1
   1e194:	cmp	r2, #0
   1e198:	bne	1eac0 <__assert_fail@plt+0xcf1c>
   1e19c:	sub	r3, fp, #2
   1e1a0:	clz	r3, r3
   1e1a4:	lsr	r3, r3, #5
   1e1a8:	b	1dc68 <__assert_fail@plt+0xc0c4>
   1e1ac:	cmp	r4, #0
   1e1b0:	bne	1ee50 <__assert_fail@plt+0xd2ac>
   1e1b4:	str	r4, [sp, #40]	; 0x28
   1e1b8:	cmp	sl, #0
   1e1bc:	bne	1ee80 <__assert_fail@plt+0xd2dc>
   1e1c0:	mov	r3, #1
   1e1c4:	movw	r2, #9968	; 0x26f0
   1e1c8:	movt	r2, #3
   1e1cc:	mov	r4, r3
   1e1d0:	mov	r8, #2
   1e1d4:	str	r3, [sp, #36]	; 0x24
   1e1d8:	str	sl, [sp, #44]	; 0x2c
   1e1dc:	str	sl, [sp, #48]	; 0x30
   1e1e0:	str	r3, [sp, #56]	; 0x38
   1e1e4:	str	r2, [sp, #60]	; 0x3c
   1e1e8:	str	sl, [sp, #68]	; 0x44
   1e1ec:	str	sl, [sp, #72]	; 0x48
   1e1f0:	b	1d7c8 <__assert_fail@plt+0xbc24>
   1e1f4:	ldr	r3, [sp, #32]
   1e1f8:	ldrb	r5, [r3, r9]
   1e1fc:	cmp	r5, #126	; 0x7e
   1e200:	ldrls	pc, [pc, r5, lsl #2]
   1e204:	b	1e150 <__assert_fail@plt+0xc5ac>
   1e208:	andeq	lr, r1, ip, lsr #8
   1e20c:	andeq	lr, r1, r0, asr r1
   1e210:	andeq	lr, r1, r0, asr r1
   1e214:	andeq	lr, r1, r0, asr r1
   1e218:	andeq	lr, r1, r0, asr r1
   1e21c:	andeq	lr, r1, r0, asr r1
   1e220:	andeq	lr, r1, r0, asr r1
   1e224:	andeq	lr, r1, r4, lsr #8
   1e228:	andeq	lr, r1, ip, lsl r4
   1e22c:	andeq	sp, r1, r8, ror #30
   1e230:	andeq	lr, r1, r4, lsl r4
   1e234:	andeq	sp, r1, r0, ror #30
   1e238:	andeq	lr, r1, ip, lsl #8
   1e23c:	andeq	lr, r1, r4, lsl #8
   1e240:	andeq	lr, r1, r0, asr r1
   1e244:	andeq	lr, r1, r0, asr r1
   1e248:	andeq	lr, r1, r0, asr r1
   1e24c:	andeq	lr, r1, r0, asr r1
   1e250:	andeq	lr, r1, r0, asr r1
   1e254:	andeq	lr, r1, r0, asr r1
   1e258:	andeq	lr, r1, r0, asr r1
   1e25c:	andeq	lr, r1, r0, asr r1
   1e260:	andeq	lr, r1, r0, asr r1
   1e264:	andeq	lr, r1, r0, asr r1
   1e268:	andeq	lr, r1, r0, asr r1
   1e26c:	andeq	lr, r1, r0, asr r1
   1e270:	andeq	lr, r1, r0, asr r1
   1e274:	andeq	lr, r1, r0, asr r1
   1e278:	andeq	lr, r1, r0, asr r1
   1e27c:	andeq	lr, r1, r0, asr r1
   1e280:	andeq	lr, r1, r0, asr r1
   1e284:	andeq	lr, r1, r0, asr r1
   1e288:	andeq	lr, r1, r0, lsl #9
   1e28c:	andeq	lr, r1, r0, ror #8
   1e290:	andeq	lr, r1, r0, ror #8
   1e294:	andeq	lr, r1, r0, asr r4
   1e298:	andeq	lr, r1, r0, ror #8
   1e29c:	muleq	r1, ip, r1
   1e2a0:	andeq	lr, r1, r0, ror #8
   1e2a4:	muleq	r1, r0, lr
   1e2a8:	andeq	lr, r1, r0, ror #8
   1e2ac:	andeq	lr, r1, r0, ror #8
   1e2b0:	andeq	lr, r1, r0, ror #8
   1e2b4:	muleq	r1, ip, r1
   1e2b8:	muleq	r1, ip, r1
   1e2bc:	muleq	r1, ip, r1
   1e2c0:	muleq	r1, ip, r1
   1e2c4:	muleq	r1, ip, r1
   1e2c8:	muleq	r1, ip, r1
   1e2cc:	muleq	r1, ip, r1
   1e2d0:	muleq	r1, ip, r1
   1e2d4:	muleq	r1, ip, r1
   1e2d8:	muleq	r1, ip, r1
   1e2dc:	muleq	r1, ip, r1
   1e2e0:	muleq	r1, ip, r1
   1e2e4:	muleq	r1, ip, r1
   1e2e8:	muleq	r1, ip, r1
   1e2ec:	muleq	r1, ip, r1
   1e2f0:	muleq	r1, ip, r1
   1e2f4:	andeq	lr, r1, r0, ror #8
   1e2f8:	andeq	lr, r1, r0, ror #8
   1e2fc:	andeq	lr, r1, r0, ror #8
   1e300:	andeq	lr, r1, r0, ror #8
   1e304:	andeq	sp, r1, r4, ror #28
   1e308:	andeq	lr, r1, r0, asr r1
   1e30c:	muleq	r1, ip, r1
   1e310:	muleq	r1, ip, r1
   1e314:	muleq	r1, ip, r1
   1e318:	muleq	r1, ip, r1
   1e31c:	muleq	r1, ip, r1
   1e320:	muleq	r1, ip, r1
   1e324:	muleq	r1, ip, r1
   1e328:	muleq	r1, ip, r1
   1e32c:	muleq	r1, ip, r1
   1e330:	muleq	r1, ip, r1
   1e334:	muleq	r1, ip, r1
   1e338:	muleq	r1, ip, r1
   1e33c:	muleq	r1, ip, r1
   1e340:	muleq	r1, ip, r1
   1e344:	muleq	r1, ip, r1
   1e348:	muleq	r1, ip, r1
   1e34c:	muleq	r1, ip, r1
   1e350:	muleq	r1, ip, r1
   1e354:	muleq	r1, ip, r1
   1e358:	muleq	r1, ip, r1
   1e35c:	muleq	r1, ip, r1
   1e360:	muleq	r1, ip, r1
   1e364:	muleq	r1, ip, r1
   1e368:	muleq	r1, ip, r1
   1e36c:	muleq	r1, ip, r1
   1e370:	muleq	r1, ip, r1
   1e374:	andeq	lr, r1, r0, ror #8
   1e378:	andeq	sp, r1, ip, lsl #28
   1e37c:	muleq	r1, ip, r1
   1e380:	andeq	lr, r1, r0, ror #8
   1e384:	muleq	r1, ip, r1
   1e388:	andeq	lr, r1, r0, ror #8
   1e38c:	muleq	r1, ip, r1
   1e390:	muleq	r1, ip, r1
   1e394:	muleq	r1, ip, r1
   1e398:	muleq	r1, ip, r1
   1e39c:	muleq	r1, ip, r1
   1e3a0:	muleq	r1, ip, r1
   1e3a4:	muleq	r1, ip, r1
   1e3a8:	muleq	r1, ip, r1
   1e3ac:	muleq	r1, ip, r1
   1e3b0:	muleq	r1, ip, r1
   1e3b4:	muleq	r1, ip, r1
   1e3b8:	muleq	r1, ip, r1
   1e3bc:	muleq	r1, ip, r1
   1e3c0:	muleq	r1, ip, r1
   1e3c4:	muleq	r1, ip, r1
   1e3c8:	muleq	r1, ip, r1
   1e3cc:	muleq	r1, ip, r1
   1e3d0:	muleq	r1, ip, r1
   1e3d4:	muleq	r1, ip, r1
   1e3d8:	muleq	r1, ip, r1
   1e3dc:	muleq	r1, ip, r1
   1e3e0:	muleq	r1, ip, r1
   1e3e4:	muleq	r1, ip, r1
   1e3e8:	muleq	r1, ip, r1
   1e3ec:	muleq	r1, ip, r1
   1e3f0:	muleq	r1, ip, r1
   1e3f4:	andeq	sp, r1, r0, lsr ip
   1e3f8:	andeq	lr, r1, r0, ror #8
   1e3fc:	andeq	sp, r1, r0, lsr ip
   1e400:	andeq	lr, r1, r0, asr r4
   1e404:	mov	r3, #114	; 0x72
   1e408:	b	1df6c <__assert_fail@plt+0xc3c8>
   1e40c:	mov	r3, #102	; 0x66
   1e410:	b	1de3c <__assert_fail@plt+0xc298>
   1e414:	mov	r3, #110	; 0x6e
   1e418:	b	1df6c <__assert_fail@plt+0xc3c8>
   1e41c:	mov	r3, #98	; 0x62
   1e420:	b	1de3c <__assert_fail@plt+0xc298>
   1e424:	mov	r3, #97	; 0x61
   1e428:	b	1de3c <__assert_fail@plt+0xc298>
   1e42c:	ldr	r3, [sp, #40]	; 0x28
   1e430:	cmp	r3, #0
   1e434:	bne	1e044 <__assert_fail@plt+0xc4a0>
   1e438:	ldr	r3, [sp, #156]	; 0x9c
   1e43c:	tst	r3, #1
   1e440:	addne	r9, r9, #1
   1e444:	bne	1d7d8 <__assert_fail@plt+0xbc34>
   1e448:	ldr	r7, [sp, #40]	; 0x28
   1e44c:	b	1de48 <__assert_fail@plt+0xc2a4>
   1e450:	sub	r3, fp, #2
   1e454:	clz	r3, r3
   1e458:	lsr	r3, r3, #5
   1e45c:	b	1dc5c <__assert_fail@plt+0xc0b8>
   1e460:	sub	r3, fp, #2
   1e464:	mov	r6, #0
   1e468:	clz	r3, r3
   1e46c:	lsr	r3, r3, #5
   1e470:	ldr	r2, [sp, #44]	; 0x2c
   1e474:	tst	r2, r3
   1e478:	beq	1dc68 <__assert_fail@plt+0xc0c4>
   1e47c:	b	1df84 <__assert_fail@plt+0xc3e0>
   1e480:	sub	r3, fp, #2
   1e484:	clz	r3, r3
   1e488:	lsr	r3, r3, #5
   1e48c:	b	1e470 <__assert_fail@plt+0xc8cc>
   1e490:	ldr	r3, [sp, #52]	; 0x34
   1e494:	ldrb	r5, [r3]
   1e498:	cmp	r5, #126	; 0x7e
   1e49c:	ldrls	pc, [pc, r5, lsl #2]
   1e4a0:	b	1e14c <__assert_fail@plt+0xc5a8>
   1e4a4:	andeq	lr, r1, r4, asr #32
   1e4a8:	andeq	lr, r1, ip, asr #2
   1e4ac:	andeq	lr, r1, ip, asr #2
   1e4b0:	andeq	lr, r1, ip, asr #2
   1e4b4:	andeq	lr, r1, ip, asr #2
   1e4b8:	andeq	lr, r1, ip, asr #2
   1e4bc:	andeq	lr, r1, ip, asr #2
   1e4c0:	andeq	lr, r1, r8, lsr #32
   1e4c4:	andeq	lr, r1, r0, lsr #32
   1e4c8:	ldrdeq	lr, [r1], -ip
   1e4cc:	andeq	lr, r1, r4, lsl r0
   1e4d0:	ldrdeq	lr, [r1], -r0
   1e4d4:	strdeq	sp, [r1], -r0
   1e4d8:	andeq	lr, r1, ip, lsr r0
   1e4dc:	andeq	lr, r1, ip, asr #2
   1e4e0:	andeq	lr, r1, ip, asr #2
   1e4e4:	andeq	lr, r1, ip, asr #2
   1e4e8:	andeq	lr, r1, ip, asr #2
   1e4ec:	andeq	lr, r1, ip, asr #2
   1e4f0:	andeq	lr, r1, ip, asr #2
   1e4f4:	andeq	lr, r1, ip, asr #2
   1e4f8:	andeq	lr, r1, ip, asr #2
   1e4fc:	andeq	lr, r1, ip, asr #2
   1e500:	andeq	lr, r1, ip, asr #2
   1e504:	andeq	lr, r1, ip, asr #2
   1e508:	andeq	lr, r1, ip, asr #2
   1e50c:	andeq	lr, r1, ip, asr #2
   1e510:	andeq	lr, r1, ip, asr #2
   1e514:	andeq	lr, r1, ip, asr #2
   1e518:	andeq	lr, r1, ip, asr #2
   1e51c:	andeq	lr, r1, ip, asr #2
   1e520:	andeq	lr, r1, ip, asr #2
   1e524:	andeq	lr, r1, r8, asr #13
   1e528:	andeq	lr, r1, r0, lsr r0
   1e52c:	andeq	lr, r1, r0, lsr r0
   1e530:	andeq	lr, r1, ip, lsr #13
   1e534:	andeq	lr, r1, r0, lsr r0
   1e538:	andeq	lr, r1, r0, lsr #13
   1e53c:	andeq	lr, r1, r0, lsr r0
   1e540:	andeq	sp, r1, ip, lsl #29
   1e544:	andeq	lr, r1, r0, lsr r0
   1e548:	andeq	lr, r1, r0, lsr r0
   1e54c:	andeq	lr, r1, r0, lsr r0
   1e550:	andeq	lr, r1, r0, lsr #13
   1e554:	andeq	lr, r1, r0, lsr #13
   1e558:	andeq	lr, r1, r0, lsr #13
   1e55c:	andeq	lr, r1, r0, lsr #13
   1e560:	andeq	lr, r1, r0, lsr #13
   1e564:	andeq	lr, r1, r0, lsr #13
   1e568:	andeq	lr, r1, r0, lsr #13
   1e56c:	andeq	lr, r1, r0, lsr #13
   1e570:	andeq	lr, r1, r0, lsr #13
   1e574:	andeq	lr, r1, r0, lsr #13
   1e578:	andeq	lr, r1, r0, lsr #13
   1e57c:	andeq	lr, r1, r0, lsr #13
   1e580:	andeq	lr, r1, r0, lsr #13
   1e584:	andeq	lr, r1, r0, lsr #13
   1e588:	andeq	lr, r1, r0, lsr #13
   1e58c:	andeq	lr, r1, r0, lsr #13
   1e590:	andeq	lr, r1, r0, lsr r0
   1e594:	andeq	lr, r1, r0, lsr r0
   1e598:	andeq	lr, r1, r0, lsr r0
   1e59c:	andeq	lr, r1, r0, lsr r0
   1e5a0:	andeq	sp, r1, r0, ror #28
   1e5a4:	andeq	lr, r1, ip, asr #2
   1e5a8:	andeq	lr, r1, r0, lsr #13
   1e5ac:	andeq	lr, r1, r0, lsr #13
   1e5b0:	andeq	lr, r1, r0, lsr #13
   1e5b4:	andeq	lr, r1, r0, lsr #13
   1e5b8:	andeq	lr, r1, r0, lsr #13
   1e5bc:	andeq	lr, r1, r0, lsr #13
   1e5c0:	andeq	lr, r1, r0, lsr #13
   1e5c4:	andeq	lr, r1, r0, lsr #13
   1e5c8:	andeq	lr, r1, r0, lsr #13
   1e5cc:	andeq	lr, r1, r0, lsr #13
   1e5d0:	andeq	lr, r1, r0, lsr #13
   1e5d4:	andeq	lr, r1, r0, lsr #13
   1e5d8:	andeq	lr, r1, r0, lsr #13
   1e5dc:	andeq	lr, r1, r0, lsr #13
   1e5e0:	andeq	lr, r1, r0, lsr #13
   1e5e4:	andeq	lr, r1, r0, lsr #13
   1e5e8:	andeq	lr, r1, r0, lsr #13
   1e5ec:	andeq	lr, r1, r0, lsr #13
   1e5f0:	andeq	lr, r1, r0, lsr #13
   1e5f4:	andeq	lr, r1, r0, lsr #13
   1e5f8:	andeq	lr, r1, r0, lsr #13
   1e5fc:	andeq	lr, r1, r0, lsr #13
   1e600:	andeq	lr, r1, r0, lsr #13
   1e604:	andeq	lr, r1, r0, lsr #13
   1e608:	andeq	lr, r1, r0, lsr #13
   1e60c:	andeq	lr, r1, r0, lsr #13
   1e610:	andeq	lr, r1, r0, lsr r0
   1e614:	andeq	sp, r1, r8, lsl #28
   1e618:	andeq	lr, r1, r0, lsr #13
   1e61c:	andeq	lr, r1, r0, lsr r0
   1e620:	andeq	lr, r1, r0, lsr #13
   1e624:	andeq	lr, r1, r0, lsr r0
   1e628:	andeq	lr, r1, r0, lsr #13
   1e62c:	andeq	lr, r1, r0, lsr #13
   1e630:	andeq	lr, r1, r0, lsr #13
   1e634:	andeq	lr, r1, r0, lsr #13
   1e638:	andeq	lr, r1, r0, lsr #13
   1e63c:	andeq	lr, r1, r0, lsr #13
   1e640:	andeq	lr, r1, r0, lsr #13
   1e644:	andeq	lr, r1, r0, lsr #13
   1e648:	andeq	lr, r1, r0, lsr #13
   1e64c:	andeq	lr, r1, r0, lsr #13
   1e650:	andeq	lr, r1, r0, lsr #13
   1e654:	andeq	lr, r1, r0, lsr #13
   1e658:	andeq	lr, r1, r0, lsr #13
   1e65c:	andeq	lr, r1, r0, lsr #13
   1e660:	andeq	lr, r1, r0, lsr #13
   1e664:	andeq	lr, r1, r0, lsr #13
   1e668:	andeq	lr, r1, r0, lsr #13
   1e66c:	andeq	lr, r1, r0, lsr #13
   1e670:	andeq	lr, r1, r0, lsr #13
   1e674:	andeq	lr, r1, r0, lsr #13
   1e678:	andeq	lr, r1, r0, lsr #13
   1e67c:	andeq	lr, r1, r0, lsr #13
   1e680:	andeq	lr, r1, r0, lsr #13
   1e684:	andeq	lr, r1, r0, lsr #13
   1e688:	andeq	lr, r1, r0, lsr #13
   1e68c:	andeq	lr, r1, r0, lsr #13
   1e690:	andeq	sp, r1, ip, lsr #24
   1e694:	andeq	lr, r1, r0, lsr r0
   1e698:	andeq	sp, r1, ip, lsr #24
   1e69c:	andeq	lr, r1, ip, lsr #13
   1e6a0:	mov	r6, r7
   1e6a4:	mov	r7, #0
   1e6a8:	b	1de58 <__assert_fail@plt+0xc2b4>
   1e6ac:	cmp	r9, #0
   1e6b0:	mov	r2, #0
   1e6b4:	beq	1e11c <__assert_fail@plt+0xc578>
   1e6b8:	mov	r6, #0
   1e6bc:	mov	r7, r2
   1e6c0:	mov	r3, r6
   1e6c4:	b	1dc78 <__assert_fail@plt+0xc0d4>
   1e6c8:	mov	r2, #0
   1e6cc:	b	1e130 <__assert_fail@plt+0xc58c>
   1e6d0:	mov	r7, #0
   1e6d4:	mov	r3, #118	; 0x76
   1e6d8:	b	1de3c <__assert_fail@plt+0xc298>
   1e6dc:	mov	r7, #0
   1e6e0:	mov	r3, #116	; 0x74
   1e6e4:	b	1df6c <__assert_fail@plt+0xc3c8>
   1e6e8:	ldr	r3, [sp, #44]	; 0x2c
   1e6ec:	b	1dca0 <__assert_fail@plt+0xc0fc>
   1e6f0:	ldr	r3, [sp, #44]	; 0x2c
   1e6f4:	cmp	r3, #0
   1e6f8:	bne	1eb68 <__assert_fail@plt+0xcfc4>
   1e6fc:	add	r9, r9, #1
   1e700:	mov	r6, #0
   1e704:	ldr	r3, [sp, #48]	; 0x30
   1e708:	mov	r5, #92	; 0x5c
   1e70c:	b	1df2c <__assert_fail@plt+0xc388>
   1e710:	ldr	r3, [sp, #32]
   1e714:	ldrb	r2, [r3, #1]
   1e718:	adds	r2, r2, #0
   1e71c:	movne	r2, #1
   1e720:	b	1dc48 <__assert_fail@plt+0xc0a4>
   1e724:	ldr	r3, [sp, #156]	; 0x9c
   1e728:	ands	r3, r3, #4
   1e72c:	beq	1e754 <__assert_fail@plt+0xcbb0>
   1e730:	ldr	r2, [sp, #28]
   1e734:	add	r3, r9, #2
   1e738:	cmp	r3, r2
   1e73c:	bcs	1e750 <__assert_fail@plt+0xcbac>
   1e740:	ldr	r2, [sp, #52]	; 0x34
   1e744:	ldrb	r5, [r2, #1]
   1e748:	cmp	r5, #63	; 0x3f
   1e74c:	beq	1ebcc <__assert_fail@plt+0xd028>
   1e750:	mov	r3, #0
   1e754:	mov	r5, #63	; 0x3f
   1e758:	mov	r6, r3
   1e75c:	b	1dc68 <__assert_fail@plt+0xc0c4>
   1e760:	ldr	r3, [sp, #44]	; 0x2c
   1e764:	cmp	r3, #0
   1e768:	bne	1eb68 <__assert_fail@plt+0xcfc4>
   1e76c:	mov	r6, r3
   1e770:	mov	r5, #63	; 0x3f
   1e774:	b	1dca0 <__assert_fail@plt+0xc0fc>
   1e778:	ldr	r1, [sp, #28]
   1e77c:	mov	r2, #0
   1e780:	mov	r3, #0
   1e784:	strd	r2, [sp, #104]	; 0x68
   1e788:	cmn	r1, #1
   1e78c:	bne	1e79c <__assert_fail@plt+0xcbf8>
   1e790:	ldr	r0, [sp, #32]
   1e794:	bl	11988 <strlen@plt>
   1e798:	str	r0, [sp, #28]
   1e79c:	str	r8, [sp, #76]	; 0x4c
   1e7a0:	mov	r3, #0
   1e7a4:	str	sl, [sp, #80]	; 0x50
   1e7a8:	ldr	sl, [sp, #32]
   1e7ac:	str	r5, [sp, #84]	; 0x54
   1e7b0:	mov	r5, r3
   1e7b4:	ldr	r8, [sp, #44]	; 0x2c
   1e7b8:	str	r7, [sp, #88]	; 0x58
   1e7bc:	str	r4, [sp, #92]	; 0x5c
   1e7c0:	ldr	r2, [sp, #28]
   1e7c4:	add	r4, r9, r5
   1e7c8:	add	r3, sp, #104	; 0x68
   1e7cc:	add	r7, sl, r4
   1e7d0:	add	r0, sp, #100	; 0x64
   1e7d4:	mov	r1, r7
   1e7d8:	sub	r2, r2, r4
   1e7dc:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   1e7e0:	subs	r1, r0, #0
   1e7e4:	beq	1e830 <__assert_fail@plt+0xcc8c>
   1e7e8:	cmn	r1, #1
   1e7ec:	beq	1eba8 <__assert_fail@plt+0xd004>
   1e7f0:	cmn	r1, #2
   1e7f4:	beq	1ecc8 <__assert_fail@plt+0xd124>
   1e7f8:	cmp	fp, #2
   1e7fc:	movne	r3, #0
   1e800:	andeq	r3, r8, #1
   1e804:	cmp	r3, #0
   1e808:	bne	1e994 <__assert_fail@plt+0xcdf0>
   1e80c:	ldr	r0, [sp, #100]	; 0x64
   1e810:	add	r5, r5, r1
   1e814:	bl	11838 <iswprint@plt>
   1e818:	cmp	r0, #0
   1e81c:	add	r0, sp, #104	; 0x68
   1e820:	moveq	r6, #0
   1e824:	bl	117b4 <mbsinit@plt>
   1e828:	cmp	r0, #0
   1e82c:	beq	1e7c0 <__assert_fail@plt+0xcc1c>
   1e830:	ldr	r3, [sp, #40]	; 0x28
   1e834:	mov	ip, r5
   1e838:	eor	r2, r6, #1
   1e83c:	ldr	r8, [sp, #76]	; 0x4c
   1e840:	ldr	sl, [sp, #80]	; 0x50
   1e844:	and	r2, r2, r3
   1e848:	ldr	r5, [sp, #84]	; 0x54
   1e84c:	ldr	r7, [sp, #88]	; 0x58
   1e850:	ldr	r4, [sp, #92]	; 0x5c
   1e854:	cmp	ip, #1
   1e858:	bls	1e194 <__assert_fail@plt+0xc5f0>
   1e85c:	add	r1, ip, r9
   1e860:	mov	r0, #39	; 0x27
   1e864:	ldr	lr, [sp, #52]	; 0x34
   1e868:	mov	ip, #0
   1e86c:	str	r6, [sp, #52]	; 0x34
   1e870:	ldr	r6, [sp, #48]	; 0x30
   1e874:	b	1e930 <__assert_fail@plt+0xcd8c>
   1e878:	ldr	ip, [sp, #44]	; 0x2c
   1e87c:	sub	r3, fp, #2
   1e880:	clz	r3, r3
   1e884:	lsr	r3, r3, #5
   1e888:	cmp	ip, #0
   1e88c:	bne	1eaa0 <__assert_fail@plt+0xcefc>
   1e890:	eor	ip, r6, #1
   1e894:	ands	r3, r3, ip
   1e898:	beq	1e8c8 <__assert_fail@plt+0xcd24>
   1e89c:	cmp	sl, r4
   1e8a0:	add	ip, r4, #1
   1e8a4:	strbhi	r0, [r8, r4]
   1e8a8:	cmp	sl, ip
   1e8ac:	movhi	r6, #36	; 0x24
   1e8b0:	strbhi	r6, [r8, ip]
   1e8b4:	add	ip, r4, #2
   1e8b8:	mov	r6, r3
   1e8bc:	cmp	sl, ip
   1e8c0:	add	r4, r4, #3
   1e8c4:	strbhi	r0, [r8, ip]
   1e8c8:	cmp	sl, r4
   1e8cc:	movhi	r3, #92	; 0x5c
   1e8d0:	strbhi	r3, [r8, r4]
   1e8d4:	add	r3, r4, #1
   1e8d8:	cmp	sl, r3
   1e8dc:	bls	1e8ec <__assert_fail@plt+0xcd48>
   1e8e0:	lsr	ip, r5, #6
   1e8e4:	add	ip, ip, #48	; 0x30
   1e8e8:	strb	ip, [r8, r3]
   1e8ec:	add	r3, r4, #2
   1e8f0:	cmp	sl, r3
   1e8f4:	bls	1e904 <__assert_fail@plt+0xcd60>
   1e8f8:	ubfx	ip, r5, #3, #3
   1e8fc:	add	ip, ip, #48	; 0x30
   1e900:	strb	ip, [r8, r3]
   1e904:	add	r9, r9, #1
   1e908:	and	r5, r5, #7
   1e90c:	cmp	r9, r1
   1e910:	add	r5, r5, #48	; 0x30
   1e914:	add	r4, r4, #3
   1e918:	bcs	1eacc <__assert_fail@plt+0xcf28>
   1e91c:	mov	ip, r2
   1e920:	cmp	sl, r4
   1e924:	strbhi	r5, [r8, r4]
   1e928:	add	r4, r4, #1
   1e92c:	ldrb	r5, [lr, #1]!
   1e930:	cmp	r2, #0
   1e934:	bne	1e878 <__assert_fail@plt+0xccd4>
   1e938:	eor	r3, ip, #1
   1e93c:	cmp	r7, #0
   1e940:	and	r3, r3, r6
   1e944:	uxtb	r3, r3
   1e948:	beq	1e95c <__assert_fail@plt+0xcdb8>
   1e94c:	cmp	sl, r4
   1e950:	movhi	r7, #92	; 0x5c
   1e954:	strbhi	r7, [r8, r4]
   1e958:	add	r4, r4, #1
   1e95c:	add	r9, r9, #1
   1e960:	cmp	r9, r1
   1e964:	bcs	1eab4 <__assert_fail@plt+0xcf10>
   1e968:	cmp	r3, #0
   1e96c:	beq	1eaec <__assert_fail@plt+0xcf48>
   1e970:	cmp	sl, r4
   1e974:	add	r3, r4, #1
   1e978:	mov	r7, #0
   1e97c:	strbhi	r0, [r8, r4]
   1e980:	cmp	sl, r3
   1e984:	add	r4, r4, #2
   1e988:	mov	r6, r7
   1e98c:	strbhi	r0, [r8, r3]
   1e990:	b	1e920 <__assert_fail@plt+0xcd7c>
   1e994:	cmp	r1, #1
   1e998:	beq	1e80c <__assert_fail@plt+0xcc68>
   1e99c:	add	r2, r4, #1
   1e9a0:	add	r3, sl, r1
   1e9a4:	add	r2, sl, r2
   1e9a8:	add	r4, r3, r4
   1e9ac:	ldrb	r3, [r2], #1
   1e9b0:	sub	r3, r3, #91	; 0x5b
   1e9b4:	cmp	r3, #33	; 0x21
   1e9b8:	ldrls	pc, [pc, r3, lsl #2]
   1e9bc:	b	1ea48 <__assert_fail@plt+0xcea4>
   1e9c0:	andeq	lr, r1, r4, asr sl
   1e9c4:	andeq	lr, r1, r4, asr sl
   1e9c8:	andeq	lr, r1, r8, asr #20
   1e9cc:	andeq	lr, r1, r4, asr sl
   1e9d0:	andeq	lr, r1, r8, asr #20
   1e9d4:	andeq	lr, r1, r4, asr sl
   1e9d8:	andeq	lr, r1, r8, asr #20
   1e9dc:	andeq	lr, r1, r8, asr #20
   1e9e0:	andeq	lr, r1, r8, asr #20
   1e9e4:	andeq	lr, r1, r8, asr #20
   1e9e8:	andeq	lr, r1, r8, asr #20
   1e9ec:	andeq	lr, r1, r8, asr #20
   1e9f0:	andeq	lr, r1, r8, asr #20
   1e9f4:	andeq	lr, r1, r8, asr #20
   1e9f8:	andeq	lr, r1, r8, asr #20
   1e9fc:	andeq	lr, r1, r8, asr #20
   1ea00:	andeq	lr, r1, r8, asr #20
   1ea04:	andeq	lr, r1, r8, asr #20
   1ea08:	andeq	lr, r1, r8, asr #20
   1ea0c:	andeq	lr, r1, r8, asr #20
   1ea10:	andeq	lr, r1, r8, asr #20
   1ea14:	andeq	lr, r1, r8, asr #20
   1ea18:	andeq	lr, r1, r8, asr #20
   1ea1c:	andeq	lr, r1, r8, asr #20
   1ea20:	andeq	lr, r1, r8, asr #20
   1ea24:	andeq	lr, r1, r8, asr #20
   1ea28:	andeq	lr, r1, r8, asr #20
   1ea2c:	andeq	lr, r1, r8, asr #20
   1ea30:	andeq	lr, r1, r8, asr #20
   1ea34:	andeq	lr, r1, r8, asr #20
   1ea38:	andeq	lr, r1, r8, asr #20
   1ea3c:	andeq	lr, r1, r8, asr #20
   1ea40:	andeq	lr, r1, r8, asr #20
   1ea44:	andeq	lr, r1, r4, asr sl
   1ea48:	cmp	r4, r2
   1ea4c:	bne	1e9ac <__assert_fail@plt+0xce08>
   1ea50:	b	1e80c <__assert_fail@plt+0xcc68>
   1ea54:	mov	r8, #2
   1ea58:	ldr	fp, [sp, #76]	; 0x4c
   1ea5c:	ldr	sl, [sp, #80]	; 0x50
   1ea60:	b	1df8c <__assert_fail@plt+0xc3e8>
   1ea64:	ldr	r2, [sp, #40]	; 0x28
   1ea68:	str	fp, [sp, #152]	; 0x98
   1ea6c:	mov	fp, r8
   1ea70:	ldr	r8, [sp, #152]	; 0x98
   1ea74:	and	r2, r2, r3
   1ea78:	str	r2, [sp, #40]	; 0x28
   1ea7c:	b	1df8c <__assert_fail@plt+0xc3e8>
   1ea80:	cmp	sl, r4
   1ea84:	movls	r0, r4
   1ea88:	bls	1e0bc <__assert_fail@plt+0xc518>
   1ea8c:	ldr	r3, [sp, #48]	; 0x30
   1ea90:	b	1e0ac <__assert_fail@plt+0xc508>
   1ea94:	str	sl, [sp, #72]	; 0x48
   1ea98:	ldr	sl, [sp, #44]	; 0x2c
   1ea9c:	b	1defc <__assert_fail@plt+0xc358>
   1eaa0:	str	r3, [sp, #40]	; 0x28
   1eaa4:	str	fp, [sp, #152]	; 0x98
   1eaa8:	mov	fp, r8
   1eaac:	ldr	r8, [sp, #152]	; 0x98
   1eab0:	b	1df8c <__assert_fail@plt+0xc3e8>
   1eab4:	str	r6, [sp, #48]	; 0x30
   1eab8:	ldr	r6, [sp, #52]	; 0x34
   1eabc:	b	1df2c <__assert_fail@plt+0xc388>
   1eac0:	mov	r6, #0
   1eac4:	ldr	r2, [sp, #40]	; 0x28
   1eac8:	b	1e85c <__assert_fail@plt+0xccb8>
   1eacc:	str	r6, [sp, #48]	; 0x30
   1ead0:	ldr	r6, [sp, #52]	; 0x34
   1ead4:	b	1dd18 <__assert_fail@plt+0xc174>
   1ead8:	add	r4, r4, #4
   1eadc:	mov	r6, #0
   1eae0:	str	r3, [sp, #48]	; 0x30
   1eae4:	mov	r5, #48	; 0x30
   1eae8:	b	1dca0 <__assert_fail@plt+0xc0fc>
   1eaec:	mov	r7, r3
   1eaf0:	b	1e920 <__assert_fail@plt+0xcd7c>
   1eaf4:	mov	r3, #1
   1eaf8:	movw	r2, #12476	; 0x30bc
   1eafc:	movt	r2, #3
   1eb00:	mov	r4, r3
   1eb04:	str	r3, [sp, #36]	; 0x24
   1eb08:	str	r3, [sp, #40]	; 0x28
   1eb0c:	str	sl, [sp, #44]	; 0x2c
   1eb10:	str	sl, [sp, #48]	; 0x30
   1eb14:	str	r3, [sp, #56]	; 0x38
   1eb18:	str	r2, [sp, #60]	; 0x3c
   1eb1c:	str	sl, [sp, #68]	; 0x44
   1eb20:	str	sl, [sp, #72]	; 0x48
   1eb24:	b	1d7c8 <__assert_fail@plt+0xbc24>
   1eb28:	mov	r3, r6
   1eb2c:	mov	r5, #48	; 0x30
   1eb30:	mov	r6, #0
   1eb34:	b	1dca0 <__assert_fail@plt+0xc0fc>
   1eb38:	mov	r5, r3
   1eb3c:	b	1e018 <__assert_fail@plt+0xc474>
   1eb40:	cmp	sl, r4
   1eb44:	mov	r5, #48	; 0x30
   1eb48:	movhi	r3, #48	; 0x30
   1eb4c:	strbhi	r3, [r8, r4]
   1eb50:	add	r3, r0, #2
   1eb54:	add	r4, r0, #3
   1eb58:	cmp	sl, r3
   1eb5c:	movhi	r1, #48	; 0x30
   1eb60:	strbhi	r1, [r8, r3]
   1eb64:	b	1e0f0 <__assert_fail@plt+0xc54c>
   1eb68:	str	fp, [sp, #152]	; 0x98
   1eb6c:	mov	fp, r8
   1eb70:	ldr	r8, [sp, #152]	; 0x98
   1eb74:	b	1df8c <__assert_fail@plt+0xc3e8>
   1eb78:	ldr	r3, [sp, #164]	; 0xa4
   1eb7c:	ldrb	r3, [r3]
   1eb80:	cmp	r3, #0
   1eb84:	beq	1d798 <__assert_fail@plt+0xbbf4>
   1eb88:	ldr	r2, [sp, #164]	; 0xa4
   1eb8c:	cmp	sl, r4
   1eb90:	strbhi	r3, [fp, r4]
   1eb94:	add	r4, r4, #1
   1eb98:	ldrb	r3, [r2, #1]!
   1eb9c:	cmp	r3, #0
   1eba0:	bne	1eb8c <__assert_fail@plt+0xcfe8>
   1eba4:	b	1d798 <__assert_fail@plt+0xbbf4>
   1eba8:	mov	ip, r5
   1ebac:	mov	r6, #0
   1ebb0:	ldr	r2, [sp, #40]	; 0x28
   1ebb4:	ldr	r8, [sp, #76]	; 0x4c
   1ebb8:	ldr	sl, [sp, #80]	; 0x50
   1ebbc:	ldr	r5, [sp, #84]	; 0x54
   1ebc0:	ldr	r7, [sp, #88]	; 0x58
   1ebc4:	ldr	r4, [sp, #92]	; 0x5c
   1ebc8:	b	1e854 <__assert_fail@plt+0xccb0>
   1ebcc:	ldr	r2, [sp, #32]
   1ebd0:	ldrb	r1, [r2, r3]
   1ebd4:	sub	r2, r1, #33	; 0x21
   1ebd8:	cmp	r2, #29
   1ebdc:	ldrls	pc, [pc, r2, lsl #2]
   1ebe0:	b	1ecbc <__assert_fail@plt+0xd118>
   1ebe4:	andeq	lr, r1, ip, asr ip
   1ebe8:			; <UNDEFINED> instruction: 0x0001ecbc
   1ebec:			; <UNDEFINED> instruction: 0x0001ecbc
   1ebf0:			; <UNDEFINED> instruction: 0x0001ecbc
   1ebf4:			; <UNDEFINED> instruction: 0x0001ecbc
   1ebf8:			; <UNDEFINED> instruction: 0x0001ecbc
   1ebfc:	andeq	lr, r1, ip, asr ip
   1ec00:	andeq	lr, r1, ip, asr ip
   1ec04:	andeq	lr, r1, ip, asr ip
   1ec08:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec0c:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec10:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec14:	andeq	lr, r1, ip, asr ip
   1ec18:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec1c:	andeq	lr, r1, ip, asr ip
   1ec20:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec24:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec28:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec2c:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec30:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec34:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec38:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec3c:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec40:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec44:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec48:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec4c:			; <UNDEFINED> instruction: 0x0001ecbc
   1ec50:	andeq	lr, r1, ip, asr ip
   1ec54:	andeq	lr, r1, ip, asr ip
   1ec58:	andeq	lr, r1, ip, asr ip
   1ec5c:	ldr	r2, [sp, #44]	; 0x2c
   1ec60:	cmp	r2, #0
   1ec64:	bne	1edc0 <__assert_fail@plt+0xd21c>
   1ec68:	cmp	sl, r4
   1ec6c:	mov	r5, r1
   1ec70:	movhi	r2, #63	; 0x3f
   1ec74:	mov	r9, r3
   1ec78:	strbhi	r2, [r8, r4]
   1ec7c:	add	r2, r4, #1
   1ec80:	cmp	sl, r2
   1ec84:	movhi	r0, #34	; 0x22
   1ec88:	strbhi	r0, [r8, r2]
   1ec8c:	add	r2, r4, #2
   1ec90:	cmp	sl, r2
   1ec94:	movhi	r0, #34	; 0x22
   1ec98:	strbhi	r0, [r8, r2]
   1ec9c:	add	r2, r4, #3
   1eca0:	add	r4, r4, #4
   1eca4:	cmp	sl, r2
   1eca8:	movhi	r0, #63	; 0x3f
   1ecac:	strbhi	r0, [r8, r2]
   1ecb0:	mov	r2, #0
   1ecb4:	mov	r6, r2
   1ecb8:	b	1e0f0 <__assert_fail@plt+0xc54c>
   1ecbc:	mov	r3, #0
   1ecc0:	mov	r6, r3
   1ecc4:	b	1dc68 <__assert_fail@plt+0xc0c4>
   1ecc8:	ldr	r0, [sp, #28]
   1eccc:	mov	r1, r4
   1ecd0:	mov	r2, r7
   1ecd4:	mov	r3, r5
   1ecd8:	mov	ip, r5
   1ecdc:	ldr	r8, [sp, #76]	; 0x4c
   1ece0:	ldr	sl, [sp, #80]	; 0x50
   1ece4:	cmp	r1, r0
   1ece8:	ldr	r5, [sp, #84]	; 0x54
   1ecec:	ldr	r7, [sp, #88]	; 0x58
   1ecf0:	ldr	r4, [sp, #92]	; 0x5c
   1ecf4:	bcs	1ed28 <__assert_fail@plt+0xd184>
   1ecf8:	ldrb	r6, [r2]
   1ecfc:	cmp	r6, #0
   1ed00:	bne	1ed14 <__assert_fail@plt+0xd170>
   1ed04:	b	1ee48 <__assert_fail@plt+0xd2a4>
   1ed08:	ldrb	r6, [r2, #1]!
   1ed0c:	cmp	r6, #0
   1ed10:	beq	1edd0 <__assert_fail@plt+0xd22c>
   1ed14:	add	r3, r3, #1
   1ed18:	add	r1, r9, r3
   1ed1c:	cmp	r1, r0
   1ed20:	bcc	1ed08 <__assert_fail@plt+0xd164>
   1ed24:	mov	ip, r3
   1ed28:	mov	r6, #0
   1ed2c:	ldr	r2, [sp, #40]	; 0x28
   1ed30:	b	1e854 <__assert_fail@plt+0xccb0>
   1ed34:	mov	r3, #1
   1ed38:	mov	r2, #0
   1ed3c:	mov	r4, r2
   1ed40:	str	r3, [sp, #36]	; 0x24
   1ed44:	str	r3, [sp, #40]	; 0x28
   1ed48:	str	r3, [sp, #44]	; 0x2c
   1ed4c:	str	r2, [sp, #48]	; 0x30
   1ed50:	str	r3, [sp, #56]	; 0x38
   1ed54:	movw	r3, #12476	; 0x30bc
   1ed58:	movt	r3, #3
   1ed5c:	str	r3, [sp, #60]	; 0x3c
   1ed60:	str	r2, [sp, #68]	; 0x44
   1ed64:	str	r2, [sp, #72]	; 0x48
   1ed68:	b	1d7c8 <__assert_fail@plt+0xbc24>
   1ed6c:	mov	r2, r3
   1ed70:	ldr	r3, [sp, #60]	; 0x3c
   1ed74:	cmp	r3, #0
   1ed78:	moveq	r2, #0
   1ed7c:	andne	r2, r2, #1
   1ed80:	cmp	r2, #0
   1ed84:	beq	1edb0 <__assert_fail@plt+0xd20c>
   1ed88:	mov	r2, r3
   1ed8c:	ldrb	r3, [r3]
   1ed90:	cmp	r3, #0
   1ed94:	beq	1edb0 <__assert_fail@plt+0xd20c>
   1ed98:	cmp	sl, r4
   1ed9c:	strbhi	r3, [fp, r4]
   1eda0:	add	r4, r4, #1
   1eda4:	ldrb	r3, [r2, #1]!
   1eda8:	cmp	r3, #0
   1edac:	bne	1ed98 <__assert_fail@plt+0xd1f4>
   1edb0:	cmp	sl, r4
   1edb4:	movhi	r3, #0
   1edb8:	strbhi	r3, [fp, r4]
   1edbc:	b	1dfd0 <__assert_fail@plt+0xc42c>
   1edc0:	str	fp, [sp, #152]	; 0x98
   1edc4:	mov	fp, r8
   1edc8:	ldr	r8, [sp, #152]	; 0x98
   1edcc:	b	1df98 <__assert_fail@plt+0xc3f4>
   1edd0:	mov	ip, r3
   1edd4:	ldr	r2, [sp, #40]	; 0x28
   1edd8:	b	1e854 <__assert_fail@plt+0xccb0>
   1eddc:	str	fp, [sp, #152]	; 0x98
   1ede0:	mov	fp, r8
   1ede4:	ldr	r8, [sp, #152]	; 0x98
   1ede8:	sub	r3, r8, #2
   1edec:	clz	r3, r3
   1edf0:	lsr	r3, r3, #5
   1edf4:	str	r3, [sp, #40]	; 0x28
   1edf8:	b	1df8c <__assert_fail@plt+0xc3e8>
   1edfc:	mov	ip, #5
   1ee00:	ldr	r3, [sp, #28]
   1ee04:	str	ip, [sp]
   1ee08:	ldr	r2, [sp, #156]	; 0x9c
   1ee0c:	ldr	ip, [sp, #164]	; 0xa4
   1ee10:	ldr	r0, [sp, #160]	; 0xa0
   1ee14:	str	r2, [sp, #4]
   1ee18:	ldr	r2, [sp, #32]
   1ee1c:	ldr	r1, [sp, #72]	; 0x48
   1ee20:	str	ip, [sp, #12]
   1ee24:	ldr	ip, [sp, #168]	; 0xa8
   1ee28:	str	r0, [sp, #8]
   1ee2c:	mov	r0, fp
   1ee30:	str	ip, [sp, #16]
   1ee34:	bl	1d6e0 <__assert_fail@plt+0xbb3c>
   1ee38:	mov	r4, r0
   1ee3c:	b	1dfd0 <__assert_fail@plt+0xc42c>
   1ee40:	mov	r8, #2
   1ee44:	b	1df8c <__assert_fail@plt+0xc3e8>
   1ee48:	ldr	r2, [sp, #40]	; 0x28
   1ee4c:	b	1e854 <__assert_fail@plt+0xccb0>
   1ee50:	mov	r3, #0
   1ee54:	mov	r2, #1
   1ee58:	mov	r4, r3
   1ee5c:	strd	r2, [sp, #36]	; 0x24
   1ee60:	strd	r2, [sp, #44]	; 0x2c
   1ee64:	str	r2, [sp, #56]	; 0x38
   1ee68:	str	r3, [sp, #68]	; 0x44
   1ee6c:	str	r3, [sp, #72]	; 0x48
   1ee70:	movw	r3, #9968	; 0x26f0
   1ee74:	movt	r3, #3
   1ee78:	str	r3, [sp, #60]	; 0x3c
   1ee7c:	b	1d7c8 <__assert_fail@plt+0xbc24>
   1ee80:	mov	r3, #0
   1ee84:	mov	r1, #1
   1ee88:	mov	r2, r3
   1ee8c:	str	r1, [sp, #36]	; 0x24
   1ee90:	str	r3, [sp, #48]	; 0x30
   1ee94:	str	sl, [sp, #72]	; 0x48
   1ee98:	b	1ddd0 <__assert_fail@plt+0xc22c>
   1ee9c:	bl	11b68 <abort@plt>
   1eea0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1eea4:	mov	r4, r0
   1eea8:	mov	r5, r3
   1eeac:	strd	r6, [sp, #8]
   1eeb0:	movw	r7, #16860	; 0x41dc
   1eeb4:	movt	r7, #4
   1eeb8:	strd	r8, [sp, #16]
   1eebc:	strd	sl, [sp, #24]
   1eec0:	mov	sl, r1
   1eec4:	mov	fp, r2
   1eec8:	str	lr, [sp, #32]
   1eecc:	sub	sp, sp, #60	; 0x3c
   1eed0:	bl	119b8 <__errno_location@plt>
   1eed4:	mov	r8, r0
   1eed8:	cmn	r4, #-2147483647	; 0x80000001
   1eedc:	ldr	r6, [r7]
   1eee0:	movne	r0, #0
   1eee4:	moveq	r0, #1
   1eee8:	ldr	r3, [r8]
   1eeec:	orrs	r0, r0, r4, lsr #31
   1eef0:	str	r3, [sp, #28]
   1eef4:	bne	1f084 <__assert_fail@plt+0xd4e0>
   1eef8:	ldr	r3, [r7, #4]
   1eefc:	cmp	r3, r4
   1ef00:	bgt	1ef60 <__assert_fail@plt+0xd3bc>
   1ef04:	add	r1, r7, #8
   1ef08:	sub	r2, r4, r3
   1ef0c:	str	r3, [sp, #52]	; 0x34
   1ef10:	cmp	r6, r1
   1ef14:	add	r2, r2, #1
   1ef18:	beq	1f05c <__assert_fail@plt+0xd4b8>
   1ef1c:	mov	r1, #8
   1ef20:	mov	r0, r6
   1ef24:	mvn	r3, #-2147483648	; 0x80000000
   1ef28:	str	r1, [sp]
   1ef2c:	add	r1, sp, #52	; 0x34
   1ef30:	bl	2e248 <__assert_fail@plt+0x1c6a4>
   1ef34:	mov	r6, r0
   1ef38:	str	r0, [r7]
   1ef3c:	ldr	r0, [r7, #4]
   1ef40:	mov	r1, #0
   1ef44:	ldr	r2, [sp, #52]	; 0x34
   1ef48:	sub	r2, r2, r0
   1ef4c:	add	r0, r6, r0, lsl #3
   1ef50:	lsl	r2, r2, #3
   1ef54:	bl	119e8 <memset@plt>
   1ef58:	ldr	r3, [sp, #52]	; 0x34
   1ef5c:	str	r3, [r7, #4]
   1ef60:	ldr	r1, [r5, #4]
   1ef64:	add	r0, r6, r4, lsl #3
   1ef68:	add	ip, r5, #8
   1ef6c:	mov	r3, fp
   1ef70:	mov	r2, sl
   1ef74:	ldr	r7, [r0, #4]
   1ef78:	str	r0, [sp, #36]	; 0x24
   1ef7c:	str	ip, [sp, #40]	; 0x28
   1ef80:	orr	r0, r1, #1
   1ef84:	ldr	r9, [r6, r4, lsl #3]
   1ef88:	str	ip, [sp, #8]
   1ef8c:	ldr	lr, [r5, #44]	; 0x2c
   1ef90:	str	r0, [sp, #4]
   1ef94:	ldr	ip, [r5]
   1ef98:	mov	r1, r9
   1ef9c:	str	ip, [sp, #32]
   1efa0:	ldr	ip, [r5, #40]	; 0x28
   1efa4:	str	ip, [sp, #12]
   1efa8:	ldr	ip, [sp, #32]
   1efac:	str	lr, [sp, #16]
   1efb0:	str	r0, [sp, #44]	; 0x2c
   1efb4:	mov	r0, r7
   1efb8:	str	ip, [sp]
   1efbc:	bl	1d6e0 <__assert_fail@plt+0xbb3c>
   1efc0:	cmp	r9, r0
   1efc4:	bhi	1f034 <__assert_fail@plt+0xd490>
   1efc8:	add	r9, r0, #1
   1efcc:	movw	r3, #17100	; 0x42cc
   1efd0:	movt	r3, #4
   1efd4:	cmp	r7, r3
   1efd8:	str	r9, [r6, r4, lsl #3]
   1efdc:	beq	1efe8 <__assert_fail@plt+0xd444>
   1efe0:	mov	r0, r7
   1efe4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1efe8:	mov	r0, r9
   1efec:	bl	2e098 <__assert_fail@plt+0x1c4f4>
   1eff0:	ldr	ip, [r5]
   1eff4:	mov	r3, fp
   1eff8:	mov	r2, sl
   1effc:	mov	r1, r9
   1f000:	mov	r7, r0
   1f004:	ldr	lr, [sp, #36]	; 0x24
   1f008:	ldr	r4, [r5, #40]	; 0x28
   1f00c:	str	r0, [lr, #4]
   1f010:	ldr	lr, [r5, #44]	; 0x2c
   1f014:	str	ip, [sp]
   1f018:	ldr	ip, [sp, #44]	; 0x2c
   1f01c:	str	ip, [sp, #4]
   1f020:	ldr	ip, [sp, #40]	; 0x28
   1f024:	str	r4, [sp, #12]
   1f028:	str	lr, [sp, #16]
   1f02c:	str	ip, [sp, #8]
   1f030:	bl	1d6e0 <__assert_fail@plt+0xbb3c>
   1f034:	ldr	r3, [sp, #28]
   1f038:	mov	r0, r7
   1f03c:	str	r3, [r8]
   1f040:	add	sp, sp, #60	; 0x3c
   1f044:	ldrd	r4, [sp]
   1f048:	ldrd	r6, [sp, #8]
   1f04c:	ldrd	r8, [sp, #16]
   1f050:	ldrd	sl, [sp, #24]
   1f054:	add	sp, sp, #32
   1f058:	pop	{pc}		; (ldr pc, [sp], #4)
   1f05c:	mov	r1, #8
   1f060:	mvn	r3, #-2147483648	; 0x80000000
   1f064:	str	r1, [sp]
   1f068:	add	r1, sp, #52	; 0x34
   1f06c:	bl	2e248 <__assert_fail@plt+0x1c6a4>
   1f070:	ldrd	r2, [r7, #8]
   1f074:	mov	r6, r0
   1f078:	str	r0, [r7]
   1f07c:	strd	r2, [r0]
   1f080:	b	1ef3c <__assert_fail@plt+0xd398>
   1f084:	bl	11b68 <abort@plt>
   1f088:	strd	r4, [sp, #-16]!
   1f08c:	mov	r5, r0
   1f090:	str	r6, [sp, #8]
   1f094:	str	lr, [sp, #12]
   1f098:	bl	119b8 <__errno_location@plt>
   1f09c:	mov	r4, r0
   1f0a0:	cmp	r5, #0
   1f0a4:	ldr	r0, [pc, #32]	; 1f0cc <__assert_fail@plt+0xd528>
   1f0a8:	mov	r1, #48	; 0x30
   1f0ac:	movne	r0, r5
   1f0b0:	ldr	r6, [r4]
   1f0b4:	bl	2e3c0 <__assert_fail@plt+0x1c81c>
   1f0b8:	str	r6, [r4]
   1f0bc:	ldrd	r4, [sp]
   1f0c0:	ldr	r6, [sp, #8]
   1f0c4:	add	sp, sp, #12
   1f0c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f0cc:	andeq	r4, r4, ip, asr #7
   1f0d0:	ldr	r3, [pc, #12]	; 1f0e4 <__assert_fail@plt+0xd540>
   1f0d4:	cmp	r0, #0
   1f0d8:	moveq	r0, r3
   1f0dc:	ldr	r0, [r0]
   1f0e0:	bx	lr
   1f0e4:	andeq	r4, r4, ip, asr #7
   1f0e8:	ldr	r3, [pc, #12]	; 1f0fc <__assert_fail@plt+0xd558>
   1f0ec:	cmp	r0, #0
   1f0f0:	moveq	r0, r3
   1f0f4:	str	r1, [r0]
   1f0f8:	bx	lr
   1f0fc:	andeq	r4, r4, ip, asr #7
   1f100:	ldr	r3, [pc, #52]	; 1f13c <__assert_fail@plt+0xd598>
   1f104:	cmp	r0, #0
   1f108:	push	{lr}		; (str lr, [sp, #-4]!)
   1f10c:	lsr	lr, r1, #5
   1f110:	and	r1, r1, #31
   1f114:	moveq	r0, r3
   1f118:	add	r3, r0, #8
   1f11c:	ldr	ip, [r3, lr, lsl #2]
   1f120:	lsr	r0, ip, r1
   1f124:	eor	r2, r2, r0
   1f128:	and	r0, r0, #1
   1f12c:	and	r2, r2, #1
   1f130:	eor	r1, ip, r2, lsl r1
   1f134:	str	r1, [r3, lr, lsl #2]
   1f138:	pop	{pc}		; (ldr pc, [sp], #4)
   1f13c:	andeq	r4, r4, ip, asr #7
   1f140:	ldr	r3, [pc, #16]	; 1f158 <__assert_fail@plt+0xd5b4>
   1f144:	cmp	r0, #0
   1f148:	movne	r3, r0
   1f14c:	ldr	r0, [r3, #4]
   1f150:	str	r1, [r3, #4]
   1f154:	bx	lr
   1f158:	andeq	r4, r4, ip, asr #7
   1f15c:	ldr	r3, [pc, #48]	; 1f194 <__assert_fail@plt+0xd5f0>
   1f160:	cmp	r0, #0
   1f164:	mov	ip, #10
   1f168:	moveq	r0, r3
   1f16c:	cmp	r2, #0
   1f170:	cmpne	r1, #0
   1f174:	str	ip, [r0]
   1f178:	beq	1f188 <__assert_fail@plt+0xd5e4>
   1f17c:	str	r1, [r0, #40]	; 0x28
   1f180:	str	r2, [r0, #44]	; 0x2c
   1f184:	bx	lr
   1f188:	str	r4, [sp, #-8]!
   1f18c:	str	lr, [sp, #4]
   1f190:	bl	11b68 <abort@plt>
   1f194:	andeq	r4, r4, ip, asr #7
   1f198:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f19c:	strd	r6, [sp, #8]
   1f1a0:	mov	r7, r0
   1f1a4:	mov	r6, r1
   1f1a8:	strd	r8, [sp, #16]
   1f1ac:	mov	r8, r2
   1f1b0:	mov	r9, r3
   1f1b4:	str	lr, [sp, #24]
   1f1b8:	sub	sp, sp, #28
   1f1bc:	ldr	r4, [sp, #56]	; 0x38
   1f1c0:	ldr	ip, [pc, #104]	; 1f230 <__assert_fail@plt+0xd68c>
   1f1c4:	cmp	r4, #0
   1f1c8:	moveq	r4, ip
   1f1cc:	bl	119b8 <__errno_location@plt>
   1f1d0:	ldr	ip, [r4, #44]	; 0x2c
   1f1d4:	mov	r5, r0
   1f1d8:	mov	r1, r6
   1f1dc:	add	lr, r4, #8
   1f1e0:	mov	r3, r9
   1f1e4:	ldr	r6, [r5]
   1f1e8:	mov	r2, r8
   1f1ec:	mov	r0, r7
   1f1f0:	str	ip, [sp, #16]
   1f1f4:	ldr	ip, [r4, #40]	; 0x28
   1f1f8:	str	lr, [sp, #8]
   1f1fc:	str	ip, [sp, #12]
   1f200:	ldr	ip, [r4, #4]
   1f204:	str	ip, [sp, #4]
   1f208:	ldr	ip, [r4]
   1f20c:	str	ip, [sp]
   1f210:	bl	1d6e0 <__assert_fail@plt+0xbb3c>
   1f214:	str	r6, [r5]
   1f218:	add	sp, sp, #28
   1f21c:	ldrd	r4, [sp]
   1f220:	ldrd	r6, [sp, #8]
   1f224:	ldrd	r8, [sp, #16]
   1f228:	add	sp, sp, #24
   1f22c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f230:	andeq	r4, r4, ip, asr #7
   1f234:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f238:	cmp	r3, #0
   1f23c:	ldr	r4, [pc, #220]	; 1f320 <__assert_fail@plt+0xd77c>
   1f240:	movne	r4, r3
   1f244:	strd	r6, [sp, #8]
   1f248:	mov	r6, r2
   1f24c:	strd	r8, [sp, #16]
   1f250:	mov	r9, r0
   1f254:	strd	sl, [sp, #24]
   1f258:	mov	sl, r1
   1f25c:	str	lr, [sp, #32]
   1f260:	sub	sp, sp, #44	; 0x2c
   1f264:	bl	119b8 <__errno_location@plt>
   1f268:	ldr	r5, [r4, #4]
   1f26c:	mov	r7, r0
   1f270:	mov	r1, #0
   1f274:	add	r8, r4, #8
   1f278:	mov	r3, sl
   1f27c:	ldr	ip, [r4, #44]	; 0x2c
   1f280:	mov	r2, r9
   1f284:	mov	r0, r1
   1f288:	ldr	lr, [r7]
   1f28c:	cmp	r6, r1
   1f290:	orreq	r5, r5, #1
   1f294:	str	ip, [sp, #16]
   1f298:	ldr	ip, [r4, #40]	; 0x28
   1f29c:	stmib	sp, {r5, r8, ip}
   1f2a0:	ldr	ip, [r4]
   1f2a4:	str	lr, [sp, #28]
   1f2a8:	str	ip, [sp]
   1f2ac:	bl	1d6e0 <__assert_fail@plt+0xbb3c>
   1f2b0:	add	r1, r0, #1
   1f2b4:	mov	fp, r0
   1f2b8:	mov	r0, r1
   1f2bc:	str	r1, [sp, #36]	; 0x24
   1f2c0:	bl	2e098 <__assert_fail@plt+0x1c4f4>
   1f2c4:	ldr	ip, [r4, #44]	; 0x2c
   1f2c8:	mov	r3, sl
   1f2cc:	mov	r2, r9
   1f2d0:	ldr	r1, [sp, #36]	; 0x24
   1f2d4:	str	ip, [sp, #16]
   1f2d8:	ldr	ip, [r4, #40]	; 0x28
   1f2dc:	str	r0, [sp, #32]
   1f2e0:	stmib	sp, {r5, r8, ip}
   1f2e4:	ldr	ip, [r4]
   1f2e8:	str	ip, [sp]
   1f2ec:	bl	1d6e0 <__assert_fail@plt+0xbb3c>
   1f2f0:	ldr	lr, [sp, #28]
   1f2f4:	cmp	r6, #0
   1f2f8:	ldr	r0, [sp, #32]
   1f2fc:	str	lr, [r7]
   1f300:	strne	fp, [r6]
   1f304:	add	sp, sp, #44	; 0x2c
   1f308:	ldrd	r4, [sp]
   1f30c:	ldrd	r6, [sp, #8]
   1f310:	ldrd	r8, [sp, #16]
   1f314:	ldrd	sl, [sp, #24]
   1f318:	add	sp, sp, #32
   1f31c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f320:	andeq	r4, r4, ip, asr #7
   1f324:	mov	r3, r2
   1f328:	mov	r2, #0
   1f32c:	b	1f234 <__assert_fail@plt+0xd690>
   1f330:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f334:	movw	r5, #16860	; 0x41dc
   1f338:	movt	r5, #4
   1f33c:	ldr	r3, [r5, #4]
   1f340:	strd	r6, [sp, #8]
   1f344:	str	r8, [sp, #16]
   1f348:	str	lr, [sp, #20]
   1f34c:	ldr	r7, [r5]
   1f350:	cmp	r3, #1
   1f354:	ble	1f378 <__assert_fail@plt+0xd7d4>
   1f358:	mov	r4, #1
   1f35c:	add	r6, r7, #4
   1f360:	ldr	r0, [r6, r4, lsl #3]
   1f364:	add	r4, r4, #1
   1f368:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1f36c:	ldr	r3, [r5, #4]
   1f370:	cmp	r3, r4
   1f374:	bgt	1f360 <__assert_fail@plt+0xd7bc>
   1f378:	ldr	r0, [r7, #4]
   1f37c:	movw	r4, #17100	; 0x42cc
   1f380:	movt	r4, #4
   1f384:	cmp	r0, r4
   1f388:	beq	1f39c <__assert_fail@plt+0xd7f8>
   1f38c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1f390:	mov	r3, #256	; 0x100
   1f394:	str	r3, [r5, #8]
   1f398:	str	r4, [r5, #12]
   1f39c:	ldr	r4, [pc, #44]	; 1f3d0 <__assert_fail@plt+0xd82c>
   1f3a0:	cmp	r7, r4
   1f3a4:	beq	1f3b4 <__assert_fail@plt+0xd810>
   1f3a8:	mov	r0, r7
   1f3ac:	bl	17ac8 <__assert_fail@plt+0x5f24>
   1f3b0:	str	r4, [r5]
   1f3b4:	mov	r3, #1
   1f3b8:	ldrd	r6, [sp, #8]
   1f3bc:	str	r3, [r5, #4]
   1f3c0:	ldrd	r4, [sp]
   1f3c4:	ldr	r8, [sp, #16]
   1f3c8:	add	sp, sp, #20
   1f3cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3d0:	andeq	r4, r4, r4, ror #3
   1f3d4:	ldr	r3, [pc, #4]	; 1f3e0 <__assert_fail@plt+0xd83c>
   1f3d8:	mvn	r2, #0
   1f3dc:	b	1eea0 <__assert_fail@plt+0xd2fc>
   1f3e0:	andeq	r4, r4, ip, asr #7
   1f3e4:	ldr	r3, [pc]	; 1f3ec <__assert_fail@plt+0xd848>
   1f3e8:	b	1eea0 <__assert_fail@plt+0xd2fc>
   1f3ec:	andeq	r4, r4, ip, asr #7
   1f3f0:	mov	r1, r0
   1f3f4:	ldr	r3, [pc, #8]	; 1f404 <__assert_fail@plt+0xd860>
   1f3f8:	mvn	r2, #0
   1f3fc:	mov	r0, #0
   1f400:	b	1eea0 <__assert_fail@plt+0xd2fc>
   1f404:	andeq	r4, r4, ip, asr #7
   1f408:	mov	r2, r1
   1f40c:	ldr	r3, [pc, #8]	; 1f41c <__assert_fail@plt+0xd878>
   1f410:	mov	r1, r0
   1f414:	mov	r0, #0
   1f418:	b	1eea0 <__assert_fail@plt+0xd2fc>
   1f41c:	andeq	r4, r4, ip, asr #7
   1f420:	strd	r4, [sp, #-12]!
   1f424:	mov	r5, r2
   1f428:	mov	r4, r0
   1f42c:	str	lr, [sp, #8]
   1f430:	sub	sp, sp, #52	; 0x34
   1f434:	mov	r0, sp
   1f438:	bl	1d53c <__assert_fail@plt+0xb998>
   1f43c:	mov	r3, sp
   1f440:	mov	r1, r5
   1f444:	mov	r0, r4
   1f448:	mvn	r2, #0
   1f44c:	bl	1eea0 <__assert_fail@plt+0xd2fc>
   1f450:	add	sp, sp, #52	; 0x34
   1f454:	ldrd	r4, [sp]
   1f458:	add	sp, sp, #8
   1f45c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f460:	strd	r4, [sp, #-16]!
   1f464:	mov	r5, r2
   1f468:	mov	r4, r0
   1f46c:	str	r6, [sp, #8]
   1f470:	mov	r6, r3
   1f474:	str	lr, [sp, #12]
   1f478:	sub	sp, sp, #48	; 0x30
   1f47c:	mov	r0, sp
   1f480:	bl	1d53c <__assert_fail@plt+0xb998>
   1f484:	mov	r3, sp
   1f488:	mov	r2, r6
   1f48c:	mov	r1, r5
   1f490:	mov	r0, r4
   1f494:	bl	1eea0 <__assert_fail@plt+0xd2fc>
   1f498:	add	sp, sp, #48	; 0x30
   1f49c:	ldrd	r4, [sp]
   1f4a0:	ldr	r6, [sp, #8]
   1f4a4:	add	sp, sp, #12
   1f4a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4ac:	mov	r2, r1
   1f4b0:	mov	r1, r0
   1f4b4:	mov	r0, #0
   1f4b8:	b	1f420 <__assert_fail@plt+0xd87c>
   1f4bc:	mov	r3, r2
   1f4c0:	mov	r2, r1
   1f4c4:	mov	r1, r0
   1f4c8:	mov	r0, #0
   1f4cc:	b	1f460 <__assert_fail@plt+0xd8bc>
   1f4d0:	ldr	ip, [pc, #140]	; 1f564 <__assert_fail@plt+0xd9c0>
   1f4d4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f4d8:	ldrd	r4, [ip]
   1f4dc:	strd	r6, [sp, #8]
   1f4e0:	ldrd	r6, [ip, #8]
   1f4e4:	strd	r8, [sp, #16]
   1f4e8:	lsr	r9, r2, #5
   1f4ec:	str	lr, [sp, #24]
   1f4f0:	sub	sp, sp, #52	; 0x34
   1f4f4:	and	lr, r2, #31
   1f4f8:	add	r8, sp, #8
   1f4fc:	mov	r2, r1
   1f500:	strd	r4, [sp]
   1f504:	mov	r1, r0
   1f508:	mov	r3, sp
   1f50c:	strd	r6, [sp, #8]
   1f510:	mov	r0, #0
   1f514:	ldrd	r4, [ip, #16]
   1f518:	ldrd	r6, [ip, #24]
   1f51c:	strd	r4, [sp, #16]
   1f520:	ldrd	r4, [ip, #32]
   1f524:	strd	r6, [sp, #24]
   1f528:	ldrd	r6, [ip, #40]	; 0x28
   1f52c:	strd	r4, [sp, #32]
   1f530:	strd	r6, [sp, #40]	; 0x28
   1f534:	ldr	ip, [r8, r9, lsl #2]
   1f538:	mvn	r4, ip, lsr lr
   1f53c:	and	r4, r4, #1
   1f540:	eor	lr, ip, r4, lsl lr
   1f544:	str	lr, [r8, r9, lsl #2]
   1f548:	bl	1eea0 <__assert_fail@plt+0xd2fc>
   1f54c:	add	sp, sp, #52	; 0x34
   1f550:	ldrd	r4, [sp]
   1f554:	ldrd	r6, [sp, #8]
   1f558:	ldrd	r8, [sp, #16]
   1f55c:	add	sp, sp, #24
   1f560:	pop	{pc}		; (ldr pc, [sp], #4)
   1f564:	andeq	r4, r4, ip, asr #7
   1f568:	mov	r2, r1
   1f56c:	mvn	r1, #0
   1f570:	b	1f4d0 <__assert_fail@plt+0xd92c>
   1f574:	mov	r2, #58	; 0x3a
   1f578:	mvn	r1, #0
   1f57c:	b	1f4d0 <__assert_fail@plt+0xd92c>
   1f580:	mov	r2, #58	; 0x3a
   1f584:	b	1f4d0 <__assert_fail@plt+0xd92c>
   1f588:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f58c:	strd	r6, [sp, #8]
   1f590:	mov	r6, r0
   1f594:	mov	r7, r2
   1f598:	str	lr, [sp, #16]
   1f59c:	sub	sp, sp, #100	; 0x64
   1f5a0:	mov	r0, sp
   1f5a4:	bl	1d53c <__assert_fail@plt+0xb998>
   1f5a8:	ldrd	r4, [sp, #8]
   1f5ac:	mov	r1, r7
   1f5b0:	mov	r0, r6
   1f5b4:	add	r3, sp, #48	; 0x30
   1f5b8:	mvn	r2, #0
   1f5bc:	ldrd	r6, [sp]
   1f5c0:	strd	r4, [sp, #56]	; 0x38
   1f5c4:	ldrd	r4, [sp, #16]
   1f5c8:	strd	r6, [sp, #48]	; 0x30
   1f5cc:	ldrd	r6, [sp, #32]
   1f5d0:	ldr	lr, [sp, #60]	; 0x3c
   1f5d4:	strd	r4, [sp, #64]	; 0x40
   1f5d8:	ldrd	r4, [sp, #24]
   1f5dc:	mvn	ip, lr
   1f5e0:	and	ip, ip, #67108864	; 0x4000000
   1f5e4:	strd	r4, [sp, #72]	; 0x48
   1f5e8:	eor	ip, ip, lr
   1f5ec:	ldrd	r4, [sp, #40]	; 0x28
   1f5f0:	str	ip, [sp, #60]	; 0x3c
   1f5f4:	strd	r6, [sp, #80]	; 0x50
   1f5f8:	strd	r4, [sp, #88]	; 0x58
   1f5fc:	bl	1eea0 <__assert_fail@plt+0xd2fc>
   1f600:	add	sp, sp, #100	; 0x64
   1f604:	ldrd	r4, [sp]
   1f608:	ldrd	r6, [sp, #8]
   1f60c:	add	sp, sp, #16
   1f610:	pop	{pc}		; (ldr pc, [sp], #4)
   1f614:	ldr	ip, [pc, #156]	; 1f6b8 <__assert_fail@plt+0xdb14>
   1f618:	cmp	r2, #0
   1f61c:	cmpne	r1, #0
   1f620:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f624:	strd	r6, [sp, #8]
   1f628:	mov	r6, r2
   1f62c:	str	r8, [sp, #16]
   1f630:	mov	r8, r3
   1f634:	strd	sl, [sp, #20]
   1f638:	ldrd	r4, [ip]
   1f63c:	str	lr, [sp, #28]
   1f640:	sub	sp, sp, #48	; 0x30
   1f644:	mov	lr, #10
   1f648:	ldrd	r2, [ip, #8]
   1f64c:	ldrd	sl, [ip, #16]
   1f650:	strd	r4, [sp]
   1f654:	ldrd	r4, [ip, #32]
   1f658:	str	lr, [sp]
   1f65c:	strd	r2, [sp, #8]
   1f660:	strd	sl, [sp, #16]
   1f664:	ldrd	r2, [ip, #24]
   1f668:	ldrd	sl, [ip, #40]	; 0x28
   1f66c:	strd	r2, [sp, #24]
   1f670:	strd	r4, [sp, #32]
   1f674:	strd	sl, [sp, #40]	; 0x28
   1f678:	beq	1f6b4 <__assert_fail@plt+0xdb10>
   1f67c:	ldr	r2, [sp, #80]	; 0x50
   1f680:	mov	r7, r1
   1f684:	mov	r3, sp
   1f688:	mov	r1, r8
   1f68c:	str	r7, [sp, #40]	; 0x28
   1f690:	str	r6, [sp, #44]	; 0x2c
   1f694:	bl	1eea0 <__assert_fail@plt+0xd2fc>
   1f698:	add	sp, sp, #48	; 0x30
   1f69c:	ldrd	r4, [sp]
   1f6a0:	ldrd	r6, [sp, #8]
   1f6a4:	ldr	r8, [sp, #16]
   1f6a8:	ldrd	sl, [sp, #20]
   1f6ac:	add	sp, sp, #28
   1f6b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f6b4:	bl	11b68 <abort@plt>
   1f6b8:	andeq	r4, r4, ip, asr #7
   1f6bc:	mvn	ip, #0
   1f6c0:	push	{lr}		; (str lr, [sp, #-4]!)
   1f6c4:	sub	sp, sp, #12
   1f6c8:	str	ip, [sp]
   1f6cc:	bl	1f614 <__assert_fail@plt+0xda70>
   1f6d0:	add	sp, sp, #12
   1f6d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f6d8:	mvn	ip, #0
   1f6dc:	push	{lr}		; (str lr, [sp, #-4]!)
   1f6e0:	sub	sp, sp, #12
   1f6e4:	mov	r3, r2
   1f6e8:	mov	r2, r1
   1f6ec:	mov	r1, r0
   1f6f0:	mov	r0, #0
   1f6f4:	str	ip, [sp]
   1f6f8:	bl	1f614 <__assert_fail@plt+0xda70>
   1f6fc:	add	sp, sp, #12
   1f700:	pop	{pc}		; (ldr pc, [sp], #4)
   1f704:	push	{lr}		; (str lr, [sp, #-4]!)
   1f708:	sub	sp, sp, #12
   1f70c:	str	r3, [sp]
   1f710:	mov	r3, r2
   1f714:	mov	r2, r1
   1f718:	mov	r1, r0
   1f71c:	mov	r0, #0
   1f720:	bl	1f614 <__assert_fail@plt+0xda70>
   1f724:	add	sp, sp, #12
   1f728:	pop	{pc}		; (ldr pc, [sp], #4)
   1f72c:	ldr	r3, [pc]	; 1f734 <__assert_fail@plt+0xdb90>
   1f730:	b	1eea0 <__assert_fail@plt+0xd2fc>
   1f734:	andeq	r4, r4, ip, ror #3
   1f738:	mov	r2, r1
   1f73c:	ldr	r3, [pc, #8]	; 1f74c <__assert_fail@plt+0xdba8>
   1f740:	mov	r1, r0
   1f744:	mov	r0, #0
   1f748:	b	1eea0 <__assert_fail@plt+0xd2fc>
   1f74c:	andeq	r4, r4, ip, ror #3
   1f750:	ldr	r3, [pc, #4]	; 1f75c <__assert_fail@plt+0xdbb8>
   1f754:	mvn	r2, #0
   1f758:	b	1eea0 <__assert_fail@plt+0xd2fc>
   1f75c:	andeq	r4, r4, ip, ror #3
   1f760:	mov	r1, r0
   1f764:	ldr	r3, [pc, #8]	; 1f774 <__assert_fail@plt+0xdbd0>
   1f768:	mvn	r2, #0
   1f76c:	mov	r0, #0
   1f770:	b	1eea0 <__assert_fail@plt+0xd2fc>
   1f774:	andeq	r4, r4, ip, ror #3
   1f778:	clz	r3, r1
   1f77c:	cmp	r0, #0
   1f780:	push	{lr}		; (str lr, [sp, #-4]!)
   1f784:	lsr	r3, r3, #5
   1f788:	mov	lr, r0
   1f78c:	moveq	r0, #1
   1f790:	movne	r0, r3
   1f794:	cmp	r0, #0
   1f798:	movne	r0, #0
   1f79c:	bne	1f7b0 <__assert_fail@plt+0xdc0c>
   1f7a0:	ldr	r2, [r1, #4]
   1f7a4:	ldr	r3, [lr, #4]
   1f7a8:	cmp	r3, r2
   1f7ac:	beq	1f7cc <__assert_fail@plt+0xdc28>
   1f7b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f7b4:	ldr	r2, [r1, #8]
   1f7b8:	ldr	ip, [lr, #8]
   1f7bc:	ldr	r2, [r2, r3, lsl #2]
   1f7c0:	ldr	ip, [ip, r3, lsl #2]
   1f7c4:	cmp	ip, r2
   1f7c8:	bne	1f7b0 <__assert_fail@plt+0xdc0c>
   1f7cc:	subs	r3, r3, #1
   1f7d0:	bpl	1f7b4 <__assert_fail@plt+0xdc10>
   1f7d4:	mov	r0, #1
   1f7d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f7dc:	strd	r4, [sp, #-16]!
   1f7e0:	mov	r4, r0
   1f7e4:	mov	r5, r2
   1f7e8:	str	r6, [sp, #8]
   1f7ec:	mov	r6, r1
   1f7f0:	str	lr, [sp, #12]
   1f7f4:	b	1f7fc <__assert_fail@plt+0xdc58>
   1f7f8:	mov	r4, r3
   1f7fc:	ldr	r3, [r4, #4]
   1f800:	cmp	r3, #0
   1f804:	bne	1f7f8 <__assert_fail@plt+0xdc54>
   1f808:	ldr	r3, [r4, #8]
   1f80c:	cmp	r3, #0
   1f810:	bne	1f7f8 <__assert_fail@plt+0xdc54>
   1f814:	b	1f84c <__assert_fail@plt+0xdca8>
   1f818:	ldr	r2, [r4]
   1f81c:	cmp	r2, #0
   1f820:	beq	1f860 <__assert_fail@plt+0xdcbc>
   1f824:	ldr	r3, [r2, #8]
   1f828:	sub	r1, r3, r4
   1f82c:	cmp	r3, #0
   1f830:	clz	r1, r1
   1f834:	mov	r4, r2
   1f838:	lsr	r1, r1, #5
   1f83c:	moveq	r2, #1
   1f840:	movne	r2, r1
   1f844:	cmp	r2, #0
   1f848:	beq	1f7f8 <__assert_fail@plt+0xdc54>
   1f84c:	mov	r1, r4
   1f850:	mov	r0, r5
   1f854:	blx	r6
   1f858:	cmp	r0, #0
   1f85c:	beq	1f818 <__assert_fail@plt+0xdc74>
   1f860:	ldrd	r4, [sp]
   1f864:	ldr	r6, [sp, #8]
   1f868:	add	sp, sp, #12
   1f86c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f870:	ldr	r3, [r1, #40]	; 0x28
   1f874:	ldr	ip, [r1, #56]	; 0x38
   1f878:	cmp	ip, r3
   1f87c:	ble	1f940 <__assert_fail@plt+0xdd9c>
   1f880:	str	r4, [sp, #-8]!
   1f884:	ldr	r4, [r1, #80]	; 0x50
   1f888:	str	lr, [sp, #4]
   1f88c:	ldr	lr, [r1, #4]
   1f890:	cmp	r4, #1
   1f894:	ldrb	ip, [lr, r3]
   1f898:	strb	ip, [r0]
   1f89c:	ble	1f8bc <__assert_fail@plt+0xdd18>
   1f8a0:	ldr	r4, [r1, #28]
   1f8a4:	cmp	r3, r4
   1f8a8:	beq	1f8bc <__assert_fail@plt+0xdd18>
   1f8ac:	ldr	r4, [r1, #8]
   1f8b0:	ldr	r4, [r4, r3, lsl #2]
   1f8b4:	cmn	r4, #1
   1f8b8:	beq	1f900 <__assert_fail@plt+0xdd5c>
   1f8bc:	cmp	ip, #92	; 0x5c
   1f8c0:	beq	1f8f8 <__assert_fail@plt+0xdd54>
   1f8c4:	cmp	ip, #91	; 0x5b
   1f8c8:	beq	1f980 <__assert_fail@plt+0xdddc>
   1f8cc:	cmp	ip, #93	; 0x5d
   1f8d0:	beq	1f9d8 <__assert_fail@plt+0xde34>
   1f8d4:	cmp	ip, #94	; 0x5e
   1f8d8:	bne	1f91c <__assert_fail@plt+0xdd78>
   1f8dc:	mov	r2, #25
   1f8e0:	mov	r3, #1
   1f8e4:	ldr	r4, [sp]
   1f8e8:	add	sp, sp, #4
   1f8ec:	strb	r2, [r0, #4]
   1f8f0:	mov	r0, r3
   1f8f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f8f8:	tst	r2, #1
   1f8fc:	bne	1f954 <__assert_fail@plt+0xddb0>
   1f900:	mov	r2, #1
   1f904:	mov	r3, r2
   1f908:	strb	r2, [r0, #4]
   1f90c:	ldr	r4, [sp]
   1f910:	add	sp, sp, #4
   1f914:	mov	r0, r3
   1f918:	pop	{pc}		; (ldr pc, [sp], #4)
   1f91c:	cmp	ip, #45	; 0x2d
   1f920:	bne	1f900 <__assert_fail@plt+0xdd5c>
   1f924:	mov	r2, #22
   1f928:	mov	r3, #1
   1f92c:	ldr	r4, [sp]
   1f930:	add	sp, sp, #4
   1f934:	strb	r2, [r0, #4]
   1f938:	mov	r0, r3
   1f93c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f940:	mov	r2, #2
   1f944:	mov	r3, #0
   1f948:	strb	r2, [r0, #4]
   1f94c:	mov	r0, r3
   1f950:	bx	lr
   1f954:	ldr	r2, [r1, #48]	; 0x30
   1f958:	add	r3, r3, #1
   1f95c:	cmp	r3, r2
   1f960:	bge	1f900 <__assert_fail@plt+0xdd5c>
   1f964:	str	r3, [r1, #40]	; 0x28
   1f968:	mov	r2, #1
   1f96c:	ldrb	r1, [lr, r3]
   1f970:	mov	r3, r2
   1f974:	strb	r1, [r0]
   1f978:	strb	r2, [r0, #4]
   1f97c:	b	1f90c <__assert_fail@plt+0xdd68>
   1f980:	ldr	r1, [r1, #48]	; 0x30
   1f984:	add	ip, r3, #1
   1f988:	cmp	ip, r1
   1f98c:	bge	1f9c0 <__assert_fail@plt+0xde1c>
   1f990:	add	r3, lr, r3
   1f994:	ldrb	r3, [r3, #1]
   1f998:	cmp	r3, #58	; 0x3a
   1f99c:	strb	r3, [r0]
   1f9a0:	beq	1fa04 <__assert_fail@plt+0xde60>
   1f9a4:	cmp	r3, #61	; 0x3d
   1f9a8:	beq	1f9f4 <__assert_fail@plt+0xde50>
   1f9ac:	cmp	r3, #46	; 0x2e
   1f9b0:	moveq	r2, #26
   1f9b4:	moveq	r3, #2
   1f9b8:	strbeq	r2, [r0, #4]
   1f9bc:	beq	1f90c <__assert_fail@plt+0xdd68>
   1f9c0:	mov	r2, #1
   1f9c4:	mov	r1, #91	; 0x5b
   1f9c8:	mov	r3, r2
   1f9cc:	strb	r1, [r0]
   1f9d0:	strb	r2, [r0, #4]
   1f9d4:	b	1f90c <__assert_fail@plt+0xdd68>
   1f9d8:	mov	r2, #21
   1f9dc:	mov	r3, #1
   1f9e0:	ldr	r4, [sp]
   1f9e4:	add	sp, sp, #4
   1f9e8:	strb	r2, [r0, #4]
   1f9ec:	mov	r0, r3
   1f9f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f9f4:	mov	r2, #28
   1f9f8:	mov	r3, #2
   1f9fc:	strb	r2, [r0, #4]
   1fa00:	b	1f90c <__assert_fail@plt+0xdd68>
   1fa04:	tst	r2, #4
   1fa08:	beq	1f9c0 <__assert_fail@plt+0xde1c>
   1fa0c:	mov	r2, #30
   1fa10:	mov	r3, #2
   1fa14:	strb	r2, [r0, #4]
   1fa18:	b	1f90c <__assert_fail@plt+0xdd68>
   1fa1c:	ldrb	r3, [r1, #24]
   1fa20:	cmp	r3, #17
   1fa24:	beq	1fa30 <__assert_fail@plt+0xde8c>
   1fa28:	mov	r0, #0
   1fa2c:	bx	lr
   1fa30:	ldr	r3, [r1, #20]
   1fa34:	cmp	r0, r3
   1fa38:	bne	1fa28 <__assert_fail@plt+0xde84>
   1fa3c:	ldrb	r3, [r1, #26]
   1fa40:	mov	r0, #0
   1fa44:	orr	r3, r3, #8
   1fa48:	strb	r3, [r1, #26]
   1fa4c:	bx	lr
   1fa50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fa54:	strd	r6, [sp, #8]
   1fa58:	strd	r8, [sp, #16]
   1fa5c:	ldr	r8, [r0, #84]	; 0x54
   1fa60:	strd	sl, [sp, #24]
   1fa64:	mov	fp, r1
   1fa68:	str	lr, [sp, #32]
   1fa6c:	sub	sp, sp, #44	; 0x2c
   1fa70:	str	r3, [sp, #24]
   1fa74:	add	r3, r3, r3, lsl #1
   1fa78:	ldr	r9, [r8, #24]
   1fa7c:	add	r9, r9, r3, lsl #2
   1fa80:	ldr	r1, [r9, #4]
   1fa84:	cmp	r1, #0
   1fa88:	ble	1fc34 <__assert_fail@plt+0xe090>
   1fa8c:	ldr	r3, [sp, #80]	; 0x50
   1fa90:	mov	r7, r2
   1fa94:	mov	r2, #1
   1fa98:	mov	sl, r0
   1fa9c:	mov	r4, #0
   1faa0:	add	r3, r3, r2
   1faa4:	lsl	r2, r2, r7
   1faa8:	add	r3, r3, r3, lsl #1
   1faac:	str	r2, [sp, #12]
   1fab0:	str	r3, [sp, #28]
   1fab4:	mvn	r3, r2
   1fab8:	str	r3, [sp, #16]
   1fabc:	b	1fad4 <__assert_fail@plt+0xdf30>
   1fac0:	cmp	r3, #4
   1fac4:	beq	1fb48 <__assert_fail@plt+0xdfa4>
   1fac8:	add	r4, r4, #1
   1facc:	cmp	r1, r4
   1fad0:	ble	1fc34 <__assert_fail@plt+0xe090>
   1fad4:	ldr	r3, [r9, #8]
   1fad8:	ldr	r2, [r8]
   1fadc:	ldr	r5, [r3, r4, lsl #2]
   1fae0:	add	r3, r2, r5, lsl #3
   1fae4:	ldrb	r3, [r3, #4]
   1fae8:	cmp	r3, #8
   1faec:	beq	1fb14 <__assert_fail@plt+0xdf70>
   1faf0:	cmp	r3, #9
   1faf4:	bne	1fac0 <__assert_fail@plt+0xdf1c>
   1faf8:	tst	fp, #2
   1fafc:	beq	1fac8 <__assert_fail@plt+0xdf24>
   1fb00:	ldr	r3, [r2, r5, lsl #3]
   1fb04:	cmp	r3, r7
   1fb08:	bne	1fac8 <__assert_fail@plt+0xdf24>
   1fb0c:	mov	r0, #0
   1fb10:	b	1fb2c <__assert_fail@plt+0xdf88>
   1fb14:	tst	fp, #1
   1fb18:	beq	1fac8 <__assert_fail@plt+0xdf24>
   1fb1c:	ldr	r3, [r2, r5, lsl #3]
   1fb20:	cmp	r3, r7
   1fb24:	bne	1fac8 <__assert_fail@plt+0xdf24>
   1fb28:	mvn	r0, #0
   1fb2c:	add	sp, sp, #44	; 0x2c
   1fb30:	ldrd	r4, [sp]
   1fb34:	ldrd	r6, [sp, #8]
   1fb38:	ldrd	r8, [sp, #16]
   1fb3c:	ldrd	sl, [sp, #24]
   1fb40:	add	sp, sp, #32
   1fb44:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb48:	ldr	r3, [sp, #80]	; 0x50
   1fb4c:	cmn	r3, #1
   1fb50:	beq	1fac8 <__assert_fail@plt+0xdf24>
   1fb54:	and	r2, fp, #2
   1fb58:	ldr	r6, [sl, #116]	; 0x74
   1fb5c:	add	r3, r5, r5, lsl #1
   1fb60:	str	r2, [sp, #20]
   1fb64:	lsl	r3, r3, #2
   1fb68:	ldr	r2, [sp, #28]
   1fb6c:	str	r9, [sp, #32]
   1fb70:	mov	r9, r3
   1fb74:	str	r4, [sp, #36]	; 0x24
   1fb78:	ldr	r4, [sp, #24]
   1fb7c:	add	r6, r6, r2, lsl #3
   1fb80:	ldr	r3, [r6, #-24]	; 0xffffffe8
   1fb84:	mov	r2, r7
   1fb88:	mov	r1, fp
   1fb8c:	mov	r0, sl
   1fb90:	cmp	r3, r5
   1fb94:	bne	1fc0c <__assert_fail@plt+0xe068>
   1fb98:	cmp	r7, #31
   1fb9c:	bgt	1fbb0 <__assert_fail@plt+0xe00c>
   1fba0:	ldr	r3, [r6, #-8]
   1fba4:	ldr	ip, [sp, #12]
   1fba8:	tst	ip, r3
   1fbac:	beq	1fc0c <__assert_fail@plt+0xe068>
   1fbb0:	ldr	r3, [r8, #20]
   1fbb4:	add	r3, r3, r9
   1fbb8:	ldr	r3, [r3, #8]
   1fbbc:	ldr	ip, [r3]
   1fbc0:	cmp	r4, ip
   1fbc4:	mov	r3, ip
   1fbc8:	beq	1fc3c <__assert_fail@plt+0xe098>
   1fbcc:	ldr	ip, [sp, #80]	; 0x50
   1fbd0:	str	ip, [sp]
   1fbd4:	bl	1fa50 <__assert_fail@plt+0xdeac>
   1fbd8:	cmn	r0, #1
   1fbdc:	beq	1fb28 <__assert_fail@plt+0xdf84>
   1fbe0:	cmp	r0, #0
   1fbe4:	bne	1fbf4 <__assert_fail@plt+0xe050>
   1fbe8:	ldr	r3, [sp, #20]
   1fbec:	cmp	r3, #0
   1fbf0:	bne	1fb0c <__assert_fail@plt+0xdf68>
   1fbf4:	cmp	r7, #31
   1fbf8:	bgt	1fc0c <__assert_fail@plt+0xe068>
   1fbfc:	ldr	r3, [r6, #-8]
   1fc00:	ldr	r2, [sp, #16]
   1fc04:	and	r3, r3, r2
   1fc08:	str	r3, [r6, #-8]
   1fc0c:	add	r6, r6, #24
   1fc10:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   1fc14:	cmp	r3, #0
   1fc18:	bne	1fb80 <__assert_fail@plt+0xdfdc>
   1fc1c:	ldr	r9, [sp, #32]
   1fc20:	ldr	r4, [sp, #36]	; 0x24
   1fc24:	ldr	r1, [r9, #4]
   1fc28:	add	r4, r4, #1
   1fc2c:	cmp	r1, r4
   1fc30:	bgt	1fad4 <__assert_fail@plt+0xdf30>
   1fc34:	asr	r0, fp, #1
   1fc38:	b	1fb2c <__assert_fail@plt+0xdf88>
   1fc3c:	sbfx	r0, fp, #0, #1
   1fc40:	b	1fb2c <__assert_fail@plt+0xdf88>
   1fc44:	ldr	ip, [r0, #116]	; 0x74
   1fc48:	add	r1, r1, r1, lsl #1
   1fc4c:	strd	r4, [sp, #-12]!
   1fc50:	ldr	r5, [sp, #16]
   1fc54:	add	r1, ip, r1, lsl #3
   1fc58:	ldr	ip, [r1, #8]
   1fc5c:	str	lr, [sp, #8]
   1fc60:	ldr	lr, [sp, #12]
   1fc64:	cmp	ip, lr
   1fc68:	bgt	1fccc <__assert_fail@plt+0xe128>
   1fc6c:	ldr	r4, [r1, #12]
   1fc70:	cmp	r4, lr
   1fc74:	blt	1fcbc <__assert_fail@plt+0xe118>
   1fc78:	sub	r1, ip, lr
   1fc7c:	cmp	r4, lr
   1fc80:	clz	r1, r1
   1fc84:	lsr	r1, r1, #5
   1fc88:	beq	1fca4 <__assert_fail@plt+0xe100>
   1fc8c:	cmp	ip, lr
   1fc90:	movne	r0, #0
   1fc94:	beq	1fca8 <__assert_fail@plt+0xe104>
   1fc98:	ldrd	r4, [sp]
   1fc9c:	add	sp, sp, #8
   1fca0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fca4:	orr	r1, r1, #2
   1fca8:	str	r5, [sp, #12]
   1fcac:	ldrd	r4, [sp]
   1fcb0:	ldr	lr, [sp, #8]
   1fcb4:	add	sp, sp, #12
   1fcb8:	b	1fa50 <__assert_fail@plt+0xdeac>
   1fcbc:	ldrd	r4, [sp]
   1fcc0:	add	sp, sp, #8
   1fcc4:	mov	r0, #1
   1fcc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1fccc:	mvn	r0, #0
   1fcd0:	b	1fc98 <__assert_fail@plt+0xe0f4>
   1fcd4:	ldr	r3, [r0, #80]	; 0x50
   1fcd8:	strd	r4, [sp, #-16]!
   1fcdc:	mov	r4, r0
   1fce0:	mov	r5, r1
   1fce4:	str	r6, [sp, #8]
   1fce8:	str	lr, [sp, #12]
   1fcec:	cmp	r3, #1
   1fcf0:	ble	1fd38 <__assert_fail@plt+0xe194>
   1fcf4:	cmn	r1, #-1073741823	; 0xc0000001
   1fcf8:	bhi	1fd78 <__assert_fail@plt+0xe1d4>
   1fcfc:	lsl	r6, r1, #2
   1fd00:	ldr	r0, [r0, #8]
   1fd04:	mov	r1, r6
   1fd08:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   1fd0c:	subs	r3, r0, #0
   1fd10:	beq	1fd78 <__assert_fail@plt+0xe1d4>
   1fd14:	ldr	r0, [r4, #12]
   1fd18:	str	r3, [r4, #8]
   1fd1c:	cmp	r0, #0
   1fd20:	beq	1fd38 <__assert_fail@plt+0xe194>
   1fd24:	mov	r1, r6
   1fd28:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   1fd2c:	cmp	r0, #0
   1fd30:	beq	1fd78 <__assert_fail@plt+0xe1d4>
   1fd34:	str	r0, [r4, #12]
   1fd38:	ldrb	r3, [r4, #75]	; 0x4b
   1fd3c:	cmp	r3, #0
   1fd40:	bne	1fd5c <__assert_fail@plt+0xe1b8>
   1fd44:	str	r5, [r4, #36]	; 0x24
   1fd48:	mov	r0, #0
   1fd4c:	ldrd	r4, [sp]
   1fd50:	ldr	r6, [sp, #8]
   1fd54:	add	sp, sp, #12
   1fd58:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd5c:	mov	r1, r5
   1fd60:	ldr	r0, [r4, #4]
   1fd64:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   1fd68:	cmp	r0, #0
   1fd6c:	beq	1fd78 <__assert_fail@plt+0xe1d4>
   1fd70:	str	r0, [r4, #4]
   1fd74:	b	1fd44 <__assert_fail@plt+0xe1a0>
   1fd78:	ldrd	r4, [sp]
   1fd7c:	mov	r0, #12
   1fd80:	ldr	r6, [sp, #8]
   1fd84:	add	sp, sp, #12
   1fd88:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd8c:	strd	r4, [sp, #-16]!
   1fd90:	mov	r5, r1
   1fd94:	mov	r4, r0
   1fd98:	ldr	r2, [r0]
   1fd9c:	ldmib	r0, {r1, r3}
   1fda0:	str	r6, [sp, #8]
   1fda4:	str	lr, [sp, #12]
   1fda8:	cmp	r2, r1
   1fdac:	beq	1fdd0 <__assert_fail@plt+0xe22c>
   1fdb0:	add	r2, r1, #1
   1fdb4:	mov	r0, #1
   1fdb8:	str	r2, [r4, #4]
   1fdbc:	str	r5, [r3, r1, lsl #2]
   1fdc0:	ldrd	r4, [sp]
   1fdc4:	ldr	r6, [sp, #8]
   1fdc8:	add	sp, sp, #12
   1fdcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1fdd0:	add	r1, r1, #1
   1fdd4:	mov	r0, r3
   1fdd8:	lsl	r3, r1, #1
   1fddc:	lsl	r1, r1, #3
   1fde0:	str	r3, [r4]
   1fde4:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   1fde8:	subs	r3, r0, #0
   1fdec:	beq	1fdfc <__assert_fail@plt+0xe258>
   1fdf0:	str	r3, [r4, #8]
   1fdf4:	ldr	r1, [r4, #4]
   1fdf8:	b	1fdb0 <__assert_fail@plt+0xe20c>
   1fdfc:	mov	r0, r3
   1fe00:	b	1fdc0 <__assert_fail@plt+0xe21c>
   1fe04:	ldr	r3, [r1, #8]
   1fe08:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fe0c:	mov	r5, r1
   1fe10:	mov	r4, #0
   1fe14:	strd	r6, [sp, #8]
   1fe18:	mov	r7, r1
   1fe1c:	mov	r6, r2
   1fe20:	str	r8, [sp, #16]
   1fe24:	mov	r8, r0
   1fe28:	str	lr, [sp, #20]
   1fe2c:	lsl	r0, r3, #2
   1fe30:	str	r2, [r5], #16
   1fe34:	str	r3, [r1, #16]
   1fe38:	str	r4, [r1, #20]
   1fe3c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   1fe40:	cmp	r0, r4
   1fe44:	str	r0, [r7, #24]
   1fe48:	beq	1fef0 <__assert_fail@plt+0xe34c>
   1fe4c:	ldr	r0, [r7, #8]
   1fe50:	cmp	r0, #0
   1fe54:	bgt	1fe68 <__assert_fail@plt+0xe2c4>
   1fe58:	b	1fea4 <__assert_fail@plt+0xe300>
   1fe5c:	add	r4, r4, #1
   1fe60:	cmp	r0, r4
   1fe64:	ble	1fea4 <__assert_fail@plt+0xe300>
   1fe68:	ldr	r2, [r7, #12]
   1fe6c:	ldr	r3, [r8]
   1fe70:	ldr	r1, [r2, r4, lsl #2]
   1fe74:	add	r3, r3, r1, lsl #3
   1fe78:	ldrb	r3, [r3, #4]
   1fe7c:	tst	r3, #8
   1fe80:	bne	1fe5c <__assert_fail@plt+0xe2b8>
   1fe84:	mov	r0, r5
   1fe88:	bl	1fd8c <__assert_fail@plt+0xe1e8>
   1fe8c:	cmp	r0, #0
   1fe90:	beq	1fef0 <__assert_fail@plt+0xe34c>
   1fe94:	ldr	r0, [r7, #8]
   1fe98:	add	r4, r4, #1
   1fe9c:	cmp	r0, r4
   1fea0:	bgt	1fe68 <__assert_fail@plt+0xe2c4>
   1fea4:	ldr	r5, [r8, #32]
   1fea8:	ldr	r4, [r8, #68]	; 0x44
   1feac:	and	r6, r6, r4
   1feb0:	add	r6, r6, r6, lsl #1
   1feb4:	lsl	r4, r6, #2
   1feb8:	add	r6, r5, r4
   1febc:	ldr	r3, [r5, r4]
   1fec0:	ldrd	r0, [r6, #4]
   1fec4:	add	r2, r3, #1
   1fec8:	cmp	r0, r3
   1fecc:	ble	1fef8 <__assert_fail@plt+0xe354>
   1fed0:	mov	r0, #0
   1fed4:	str	r2, [r5, r4]
   1fed8:	str	r7, [r1, r3, lsl #2]
   1fedc:	ldrd	r4, [sp]
   1fee0:	ldrd	r6, [sp, #8]
   1fee4:	ldr	r8, [sp, #16]
   1fee8:	add	sp, sp, #20
   1feec:	pop	{pc}		; (ldr pc, [sp], #4)
   1fef0:	mov	r0, #12
   1fef4:	b	1fedc <__assert_fail@plt+0xe338>
   1fef8:	mov	r0, r1
   1fefc:	lsl	r1, r2, #3
   1ff00:	lsl	r8, r2, #1
   1ff04:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   1ff08:	subs	r1, r0, #0
   1ff0c:	beq	1fef0 <__assert_fail@plt+0xe34c>
   1ff10:	ldr	r3, [r5, r4]
   1ff14:	str	r8, [r6, #4]
   1ff18:	str	r1, [r6, #8]
   1ff1c:	add	r2, r3, #1
   1ff20:	b	1fed0 <__assert_fail@plt+0xe32c>
   1ff24:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ff28:	mov	r5, r0
   1ff2c:	ldr	r4, [r0, #28]
   1ff30:	ldr	r3, [r0, #48]	; 0x30
   1ff34:	strd	r6, [sp, #8]
   1ff38:	ldr	r7, [r0, #36]	; 0x24
   1ff3c:	strd	r8, [sp, #16]
   1ff40:	str	lr, [sp, #24]
   1ff44:	sub	sp, sp, #84	; 0x54
   1ff48:	cmp	r7, r3
   1ff4c:	movge	r7, r3
   1ff50:	cmp	r7, r4
   1ff54:	ble	1ffe8 <__assert_fail@plt+0xe444>
   1ff58:	add	r8, r0, #16
   1ff5c:	mvn	r6, #0
   1ff60:	ldr	ip, [r5, #64]	; 0x40
   1ff64:	sub	r2, r7, r4
   1ff68:	ldrd	r0, [r8]
   1ff6c:	cmp	ip, #0
   1ff70:	strd	r0, [sp, #8]
   1ff74:	bne	20044 <__assert_fail@plt+0xe4a0>
   1ff78:	ldr	r1, [r5]
   1ff7c:	ldr	r3, [r5, #24]
   1ff80:	add	r3, r4, r3
   1ff84:	add	r1, r1, r3
   1ff88:	mov	r3, r8
   1ff8c:	add	r0, sp, #4
   1ff90:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   1ff94:	sub	r3, r0, #1
   1ff98:	cmn	r3, #3
   1ff9c:	bhi	20008 <__assert_fail@plt+0xe464>
   1ffa0:	cmn	r0, #2
   1ffa4:	ldrne	r1, [sp, #4]
   1ffa8:	beq	200a8 <__assert_fail@plt+0xe504>
   1ffac:	add	r0, r4, r0
   1ffb0:	add	ip, r4, #1
   1ffb4:	ldr	r2, [r5, #8]
   1ffb8:	cmp	ip, r0
   1ffbc:	add	r3, r2, r4, lsl #2
   1ffc0:	str	r1, [r2, r4, lsl #2]
   1ffc4:	bge	2003c <__assert_fail@plt+0xe498>
   1ffc8:	sub	r2, r2, #4
   1ffcc:	add	r2, r2, r0, lsl #2
   1ffd0:	str	r6, [r3, #4]!
   1ffd4:	cmp	r2, r3
   1ffd8:	bne	1ffd0 <__assert_fail@plt+0xe42c>
   1ffdc:	mov	r4, r0
   1ffe0:	cmp	r7, r4
   1ffe4:	bgt	1ff60 <__assert_fail@plt+0xe3bc>
   1ffe8:	str	r4, [r5, #28]
   1ffec:	str	r4, [r5, #32]
   1fff0:	add	sp, sp, #84	; 0x54
   1fff4:	ldrd	r4, [sp]
   1fff8:	ldrd	r6, [sp, #8]
   1fffc:	ldrd	r8, [sp, #16]
   20000:	add	sp, sp, #24
   20004:	pop	{pc}		; (ldr pc, [sp], #4)
   20008:	ldr	r3, [r5]
   2000c:	mov	r0, #1
   20010:	ldr	r1, [r5, #24]
   20014:	ldr	r2, [r5, #64]	; 0x40
   20018:	add	r3, r3, r4
   2001c:	ldrb	r1, [r3, r1]
   20020:	cmp	r2, #0
   20024:	str	r1, [sp, #4]
   20028:	ldrbne	r1, [r2, r1]
   2002c:	ldrd	r2, [sp, #8]
   20030:	strne	r1, [sp, #4]
   20034:	strd	r2, [r8]
   20038:	b	1ffac <__assert_fail@plt+0xe408>
   2003c:	mov	r4, ip
   20040:	b	1ffe0 <__assert_fail@plt+0xe43c>
   20044:	ldr	r3, [r5, #80]	; 0x50
   20048:	cmp	r3, #0
   2004c:	cmpgt	r2, #0
   20050:	ble	200a0 <__assert_fail@plt+0xe4fc>
   20054:	add	r0, sp, #16
   20058:	mov	r1, #0
   2005c:	b	20064 <__assert_fail@plt+0xe4c0>
   20060:	ldr	ip, [r5, #64]	; 0x40
   20064:	ldm	r5, {r3, lr}
   20068:	ldr	r9, [r5, #24]
   2006c:	add	r3, r3, r4
   20070:	add	r3, r3, r1
   20074:	ldrb	r9, [r3, r9]
   20078:	add	r3, lr, r4
   2007c:	ldrb	ip, [ip, r9]
   20080:	strb	ip, [r3, r1]
   20084:	add	r1, r1, #1
   20088:	ldr	r3, [r5, #80]	; 0x50
   2008c:	strb	ip, [r0], #1
   20090:	cmp	r2, r3
   20094:	movlt	r3, r2
   20098:	cmp	r3, r1
   2009c:	bgt	20060 <__assert_fail@plt+0xe4bc>
   200a0:	add	r1, sp, #16
   200a4:	b	1ff88 <__assert_fail@plt+0xe3e4>
   200a8:	ldr	r2, [r5, #36]	; 0x24
   200ac:	ldr	r3, [r5, #48]	; 0x30
   200b0:	cmp	r2, r3
   200b4:	bge	20008 <__assert_fail@plt+0xe464>
   200b8:	ldrd	r2, [sp, #8]
   200bc:	strd	r2, [r5, #16]
   200c0:	b	1ffe8 <__assert_fail@plt+0xe444>
   200c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   200c8:	mov	r5, r0
   200cc:	ldr	r3, [r0, #48]	; 0x30
   200d0:	strd	r6, [sp, #8]
   200d4:	strd	r8, [sp, #16]
   200d8:	ldr	r7, [r0, #36]	; 0x24
   200dc:	strd	sl, [sp, #24]
   200e0:	str	lr, [sp, #32]
   200e4:	sub	sp, sp, #100	; 0x64
   200e8:	ldrb	r2, [r0, #74]	; 0x4a
   200ec:	cmp	r7, r3
   200f0:	ldr	r6, [r0, #28]
   200f4:	movge	r7, r3
   200f8:	cmp	r2, #0
   200fc:	bne	2010c <__assert_fail@plt+0xe568>
   20100:	ldr	r3, [r0, #64]	; 0x40
   20104:	cmp	r3, #0
   20108:	beq	20254 <__assert_fail@plt+0xe6b0>
   2010c:	ldr	r4, [r5, #32]
   20110:	cmp	r6, r7
   20114:	bge	2022c <__assert_fail@plt+0xe688>
   20118:	add	r3, r5, #16
   2011c:	str	r3, [sp, #12]
   20120:	sub	r3, r7, r6
   20124:	str	r3, [sp, #8]
   20128:	add	r3, sp, #20
   2012c:	mov	r9, r3
   20130:	ldrd	r0, [r5, #16]
   20134:	ldr	r3, [r5, #64]	; 0x40
   20138:	strd	r0, [sp, #24]
   2013c:	cmp	r3, #0
   20140:	bne	20430 <__assert_fail@plt+0xe88c>
   20144:	ldr	r8, [r5]
   20148:	ldr	r3, [r5, #24]
   2014c:	add	r3, r4, r3
   20150:	add	r8, r8, r3
   20154:	mov	r0, r9
   20158:	mov	r1, r8
   2015c:	ldrd	r2, [sp, #8]
   20160:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   20164:	sub	r3, r0, #1
   20168:	mov	sl, r0
   2016c:	cmn	r3, #4
   20170:	str	r3, [sp, #4]
   20174:	bhi	204b0 <__assert_fail@plt+0xe90c>
   20178:	ldr	r3, [sp, #20]
   2017c:	mov	r9, r6
   20180:	mov	r0, r3
   20184:	str	r3, [sp]
   20188:	bl	11b50 <towupper@plt>
   2018c:	ldr	r3, [sp]
   20190:	mov	fp, r0
   20194:	cmp	r3, r0
   20198:	beq	20498 <__assert_fail@plt+0xe8f4>
   2019c:	add	r3, sp, #32
   201a0:	add	r2, sp, #24
   201a4:	mov	r0, r3
   201a8:	mov	r1, fp
   201ac:	str	r3, [sp]
   201b0:	bl	116dc <wcrtomb@plt>
   201b4:	cmp	sl, r0
   201b8:	mov	r3, r0
   201bc:	bne	20544 <__assert_fail@plt+0xe9a0>
   201c0:	ldr	r0, [r5, #4]
   201c4:	mov	r2, sl
   201c8:	ldr	r1, [sp]
   201cc:	add	r0, r0, r6
   201d0:	bl	11784 <memcpy@plt>
   201d4:	ldrb	r3, [r5, #76]	; 0x4c
   201d8:	cmp	r3, #0
   201dc:	bne	20524 <__assert_fail@plt+0xe980>
   201e0:	add	r2, sl, r4
   201e4:	ldr	r3, [r5, #8]
   201e8:	add	sl, sl, r9
   201ec:	add	r6, r6, #1
   201f0:	cmp	r6, sl
   201f4:	mov	r4, r2
   201f8:	mvnlt	r2, #0
   201fc:	str	fp, [r3, r9, lsl #2]
   20200:	add	r9, r3, r9, lsl #2
   20204:	sublt	r3, r3, #4
   20208:	addlt	r3, r3, sl, lsl #2
   2020c:	bge	20110 <__assert_fail@plt+0xe56c>
   20210:	str	r2, [r9, #4]!
   20214:	cmp	r3, r9
   20218:	bne	20210 <__assert_fail@plt+0xe66c>
   2021c:	mov	r6, sl
   20220:	b	20110 <__assert_fail@plt+0xe56c>
   20224:	ldrd	r2, [sp, #24]
   20228:	strd	r2, [r5, #16]
   2022c:	mov	r0, #0
   20230:	str	r6, [r5, #28]
   20234:	str	r4, [r5, #32]
   20238:	add	sp, sp, #100	; 0x64
   2023c:	ldrd	r4, [sp]
   20240:	ldrd	r6, [sp, #8]
   20244:	ldrd	r8, [sp, #16]
   20248:	ldrd	sl, [sp, #24]
   2024c:	add	sp, sp, #32
   20250:	pop	{pc}		; (ldr pc, [sp], #4)
   20254:	ldrb	r3, [r0, #76]	; 0x4c
   20258:	cmp	r3, #0
   2025c:	bne	2010c <__assert_fail@plt+0xe568>
   20260:	cmp	r6, r7
   20264:	bge	2038c <__assert_fail@plt+0xe7e8>
   20268:	add	fp, r0, #16
   2026c:	str	r7, [sp]
   20270:	str	fp, [sp, #12]
   20274:	ldr	r8, [r5]
   20278:	mov	r4, r6
   2027c:	ldr	r7, [r5, #24]
   20280:	add	r3, r8, r7
   20284:	ldrb	sl, [r3, r6]
   20288:	tst	sl, #128	; 0x80
   2028c:	bne	202b0 <__assert_fail@plt+0xe70c>
   20290:	mov	r0, fp
   20294:	bl	117b4 <mbsinit@plt>
   20298:	cmp	r0, #0
   2029c:	beq	202b0 <__assert_fail@plt+0xe70c>
   202a0:	mov	r0, sl
   202a4:	bl	11b50 <towupper@plt>
   202a8:	bics	r3, r0, #127	; 0x7f
   202ac:	beq	203c0 <__assert_fail@plt+0xe81c>
   202b0:	ldr	r3, [sp]
   202b4:	add	r1, r7, r6
   202b8:	add	r0, sp, #20
   202bc:	add	r1, r8, r1
   202c0:	ldrd	r8, [fp]
   202c4:	sub	r3, r3, r6
   202c8:	mov	r2, r3
   202cc:	str	r3, [sp, #8]
   202d0:	mov	r3, fp
   202d4:	strd	r8, [sp, #24]
   202d8:	mov	r9, r0
   202dc:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   202e0:	sub	r3, r0, #1
   202e4:	mov	r8, r0
   202e8:	cmn	r3, #4
   202ec:	bhi	203d8 <__assert_fail@plt+0xe834>
   202f0:	ldr	r3, [sp, #20]
   202f4:	mov	r0, r3
   202f8:	str	r3, [sp, #4]
   202fc:	bl	11b50 <towupper@plt>
   20300:	ldr	r3, [sp, #4]
   20304:	mov	sl, r0
   20308:	cmp	r3, r0
   2030c:	beq	2039c <__assert_fail@plt+0xe7f8>
   20310:	add	r3, sp, #32
   20314:	add	r2, sp, #24
   20318:	mov	r0, r3
   2031c:	mov	r1, sl
   20320:	str	r3, [sp, #4]
   20324:	bl	116dc <wcrtomb@plt>
   20328:	cmp	r8, r0
   2032c:	bne	2048c <__assert_fail@plt+0xe8e8>
   20330:	ldr	r0, [r5, #4]
   20334:	mov	r2, r8
   20338:	ldr	r3, [sp, #4]
   2033c:	add	r0, r0, r6
   20340:	mov	r1, r3
   20344:	bl	11784 <memcpy@plt>
   20348:	ldr	r3, [r5, #8]
   2034c:	add	r8, r8, r4
   20350:	add	r6, r6, #1
   20354:	cmp	r6, r8
   20358:	str	sl, [r3, r4, lsl #2]
   2035c:	add	r4, r3, r4, lsl #2
   20360:	bge	20380 <__assert_fail@plt+0xe7dc>
   20364:	sub	r3, r3, #4
   20368:	add	r3, r3, r8, lsl #2
   2036c:	mvn	r2, #0
   20370:	str	r2, [r4, #4]!
   20374:	cmp	r4, r3
   20378:	bne	2036c <__assert_fail@plt+0xe7c8>
   2037c:	mov	r6, r8
   20380:	ldr	r3, [sp]
   20384:	cmp	r3, r6
   20388:	bgt	20274 <__assert_fail@plt+0xe6d0>
   2038c:	mov	r0, #0
   20390:	str	r6, [r5, #28]
   20394:	str	r6, [r5, #32]
   20398:	b	20238 <__assert_fail@plt+0xe694>
   2039c:	ldr	r1, [r5]
   203a0:	mov	r2, r8
   203a4:	ldr	r3, [r5, #24]
   203a8:	ldr	r0, [r5, #4]
   203ac:	add	r3, r6, r3
   203b0:	add	r1, r1, r3
   203b4:	add	r0, r0, r6
   203b8:	bl	11784 <memcpy@plt>
   203bc:	b	20348 <__assert_fail@plt+0xe7a4>
   203c0:	ldr	r3, [r5, #4]
   203c4:	strb	r0, [r3, r6]
   203c8:	ldr	r3, [r5, #8]
   203cc:	str	r0, [r3, r6, lsl #2]
   203d0:	add	r6, r6, #1
   203d4:	b	20380 <__assert_fail@plt+0xe7dc>
   203d8:	cmn	r3, #3
   203dc:	beq	20408 <__assert_fail@plt+0xe864>
   203e0:	ldr	r3, [r5, #4]
   203e4:	cmn	r0, #1
   203e8:	strb	sl, [r3, r6]
   203ec:	add	r6, r6, #1
   203f0:	ldr	r3, [r5, #8]
   203f4:	str	sl, [r3, r4, lsl #2]
   203f8:	bne	20380 <__assert_fail@plt+0xe7dc>
   203fc:	ldrd	r2, [sp, #24]
   20400:	strd	r2, [fp]
   20404:	b	20380 <__assert_fail@plt+0xe7dc>
   20408:	ldr	r2, [r5, #36]	; 0x24
   2040c:	ldr	r3, [r5, #48]	; 0x30
   20410:	cmp	r2, r3
   20414:	blt	20648 <__assert_fail@plt+0xeaa4>
   20418:	ldr	r3, [r5, #4]
   2041c:	strb	sl, [r3, r6]
   20420:	add	r6, r6, #1
   20424:	ldr	r3, [r5, #8]
   20428:	str	sl, [r3, r4, lsl #2]
   2042c:	b	20380 <__assert_fail@plt+0xe7dc>
   20430:	ldr	r2, [sp, #8]
   20434:	ldr	r8, [r5, #80]	; 0x50
   20438:	cmp	r2, #0
   2043c:	cmpgt	r8, #0
   20440:	ble	20678 <__assert_fail@plt+0xead4>
   20444:	ldr	lr, [r5]
   20448:	add	r1, sp, #32
   2044c:	ldr	r2, [r5, #24]
   20450:	str	r1, [sp]
   20454:	ldr	r0, [sp, #8]
   20458:	add	r2, r4, r2
   2045c:	add	lr, lr, r2
   20460:	cmp	r8, r0
   20464:	mov	r2, lr
   20468:	movge	r8, r0
   2046c:	ldrb	r0, [r2], #1
   20470:	ldrb	r0, [r3, r0]
   20474:	sub	ip, r2, lr
   20478:	cmp	ip, r8
   2047c:	strb	r0, [r1], #1
   20480:	blt	2046c <__assert_fail@plt+0xe8c8>
   20484:	ldr	r8, [sp]
   20488:	b	20154 <__assert_fail@plt+0xe5b0>
   2048c:	mov	r4, r6
   20490:	ldr	r7, [sp]
   20494:	b	20130 <__assert_fail@plt+0xe58c>
   20498:	ldr	r0, [r5, #4]
   2049c:	mov	r1, r8
   204a0:	mov	r2, sl
   204a4:	add	r0, r0, r6
   204a8:	bl	11784 <memcpy@plt>
   204ac:	b	201d4 <__assert_fail@plt+0xe630>
   204b0:	ldr	r3, [sp, #4]
   204b4:	cmn	r3, #3
   204b8:	bne	204cc <__assert_fail@plt+0xe928>
   204bc:	ldr	r2, [r5, #36]	; 0x24
   204c0:	ldr	r3, [r5, #48]	; 0x30
   204c4:	cmp	r2, r3
   204c8:	blt	20224 <__assert_fail@plt+0xe680>
   204cc:	ldr	r3, [r5]
   204d0:	ldr	r1, [r5, #24]
   204d4:	ldr	r2, [r5, #64]	; 0x40
   204d8:	add	r3, r3, r4
   204dc:	ldrb	r3, [r3, r1]
   204e0:	cmp	r2, #0
   204e4:	ldr	r1, [r5, #4]
   204e8:	ldrbne	r3, [r2, r3]
   204ec:	lsl	r2, r6, #2
   204f0:	strb	r3, [r1, r6]
   204f4:	ldrb	r1, [r5, #76]	; 0x4c
   204f8:	cmp	r1, #0
   204fc:	ldrne	r1, [r5, #12]
   20500:	strne	r4, [r1, r6, lsl #2]
   20504:	cmn	sl, #1
   20508:	add	r4, r4, #1
   2050c:	ldr	r1, [r5, #8]
   20510:	add	r6, r6, #1
   20514:	str	r3, [r1, r2]
   20518:	ldrdeq	r2, [sp, #24]
   2051c:	strdeq	r2, [r5, #16]
   20520:	b	20110 <__assert_fail@plt+0xe56c>
   20524:	ldr	r3, [r5, #12]
   20528:	add	r2, sl, r4
   2052c:	add	r3, r3, r6, lsl #2
   20530:	str	r4, [r3], #4
   20534:	add	r4, r4, #1
   20538:	cmp	r2, r4
   2053c:	bne	20530 <__assert_fail@plt+0xe98c>
   20540:	b	201e4 <__assert_fail@plt+0xe640>
   20544:	cmn	r0, #1
   20548:	beq	20498 <__assert_fail@plt+0xe8f4>
   2054c:	add	r8, r0, r6
   20550:	ldr	r0, [r5, #36]	; 0x24
   20554:	cmp	r8, r0
   20558:	bhi	20224 <__assert_fail@plt+0xe680>
   2055c:	ldr	r2, [r5, #12]
   20560:	cmp	r2, #0
   20564:	beq	20654 <__assert_fail@plt+0xeab0>
   20568:	ldrb	r2, [r5, #76]	; 0x4c
   2056c:	cmp	r2, #0
   20570:	bne	2059c <__assert_fail@plt+0xe9f8>
   20574:	cmp	r6, #0
   20578:	ldrne	r1, [r5, #12]
   2057c:	subne	r1, r1, #4
   20580:	beq	20594 <__assert_fail@plt+0xe9f0>
   20584:	str	r2, [r1, #4]!
   20588:	add	r2, r2, #1
   2058c:	cmp	r2, r6
   20590:	bne	20584 <__assert_fail@plt+0xe9e0>
   20594:	mov	r2, #1
   20598:	strb	r2, [r5, #76]	; 0x4c
   2059c:	ldr	r0, [r5, #4]
   205a0:	mov	r2, r3
   205a4:	ldr	r1, [sp]
   205a8:	str	r3, [sp]
   205ac:	add	r0, r0, r6
   205b0:	bl	11784 <memcpy@plt>
   205b4:	ldr	r3, [sp]
   205b8:	lsl	r1, r6, #2
   205bc:	ldr	r2, [r5, #8]
   205c0:	ldr	r0, [r5, #12]
   205c4:	cmp	r3, #1
   205c8:	mvnhi	lr, #0
   205cc:	str	fp, [r2, r6, lsl #2]
   205d0:	add	r2, r2, r1
   205d4:	add	r1, r0, r1
   205d8:	str	r4, [r0, r6, lsl #2]
   205dc:	movhi	r0, #1
   205e0:	bls	20608 <__assert_fail@plt+0xea64>
   205e4:	ldr	ip, [sp, #4]
   205e8:	cmp	r0, sl
   205ec:	movcc	ip, r0
   205f0:	add	r0, r0, #1
   205f4:	cmp	r0, r3
   205f8:	add	ip, ip, r4
   205fc:	str	ip, [r1, #4]!
   20600:	str	lr, [r2, #4]!
   20604:	bne	205e4 <__assert_fail@plt+0xea40>
   20608:	ldr	r7, [r5, #48]	; 0x30
   2060c:	sub	r3, r3, sl
   20610:	ldr	r2, [r5, #52]	; 0x34
   20614:	add	r7, r3, r7
   20618:	cmp	r2, r4
   2061c:	str	r7, [r5, #48]	; 0x30
   20620:	ble	20630 <__assert_fail@plt+0xea8c>
   20624:	ldr	r2, [r5, #56]	; 0x38
   20628:	add	r3, r2, r3
   2062c:	str	r3, [r5, #56]	; 0x38
   20630:	ldr	r3, [r5, #36]	; 0x24
   20634:	mov	r6, r8
   20638:	add	r4, sl, r4
   2063c:	cmp	r7, r3
   20640:	movge	r7, r3
   20644:	b	20110 <__assert_fail@plt+0xe56c>
   20648:	ldrd	r2, [sp, #24]
   2064c:	strd	r2, [fp]
   20650:	b	2038c <__assert_fail@plt+0xe7e8>
   20654:	lsl	r0, r0, #2
   20658:	str	r3, [sp, #8]
   2065c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   20660:	cmp	r0, #0
   20664:	str	r0, [r5, #12]
   20668:	moveq	r0, #12
   2066c:	ldr	r3, [sp, #8]
   20670:	bne	20568 <__assert_fail@plt+0xe9c4>
   20674:	b	20238 <__assert_fail@plt+0xe694>
   20678:	add	r3, sp, #32
   2067c:	str	r3, [sp]
   20680:	b	20484 <__assert_fail@plt+0xe8e0>
   20684:	strd	r4, [sp, #-16]!
   20688:	mov	r5, r0
   2068c:	ldr	r4, [r0, #28]
   20690:	ldr	r3, [r0, #48]	; 0x30
   20694:	str	r6, [sp, #8]
   20698:	ldr	r6, [r0, #36]	; 0x24
   2069c:	str	lr, [sp, #12]
   206a0:	cmp	r6, r3
   206a4:	movge	r6, r3
   206a8:	cmp	r6, r4
   206ac:	ble	20704 <__assert_fail@plt+0xeb60>
   206b0:	bl	11934 <__ctype_toupper_loc@plt>
   206b4:	ldr	r3, [r5]
   206b8:	ldr	r1, [r5, #24]
   206bc:	ldr	r2, [r5, #64]	; 0x40
   206c0:	add	r3, r3, r4
   206c4:	ldrb	r3, [r3, r1]
   206c8:	cmp	r2, #0
   206cc:	ldr	r1, [r0]
   206d0:	ldrbne	r3, [r2, r3]
   206d4:	ldr	r2, [r5, #4]
   206d8:	ldr	r3, [r1, r3, lsl #2]
   206dc:	strb	r3, [r2, r4]
   206e0:	add	r4, r4, #1
   206e4:	cmp	r6, r4
   206e8:	bne	206b4 <__assert_fail@plt+0xeb10>
   206ec:	str	r6, [r5, #28]
   206f0:	str	r6, [r5, #32]
   206f4:	ldrd	r4, [sp]
   206f8:	ldr	r6, [sp, #8]
   206fc:	add	sp, sp, #12
   20700:	pop	{pc}		; (ldr pc, [sp], #4)
   20704:	mov	r6, r4
   20708:	b	206ec <__assert_fail@plt+0xeb48>
   2070c:	ldr	r3, [r0, #36]	; 0x24
   20710:	strd	r4, [sp, #-16]!
   20714:	str	r6, [sp, #8]
   20718:	str	lr, [sp, #12]
   2071c:	cmn	r3, #-536870910	; 0xe0000002
   20720:	bhi	20844 <__assert_fail@plt+0xeca0>
   20724:	ldr	r2, [r0, #48]	; 0x30
   20728:	lsl	r3, r3, #1
   2072c:	mov	r4, r0
   20730:	cmp	r3, r2
   20734:	movge	r3, r2
   20738:	cmp	r3, r1
   2073c:	movge	r1, r3
   20740:	bl	1fcd4 <__assert_fail@plt+0xe130>
   20744:	subs	r5, r0, #0
   20748:	bne	207b0 <__assert_fail@plt+0xec0c>
   2074c:	ldr	r0, [r4, #100]	; 0x64
   20750:	cmp	r0, #0
   20754:	beq	20774 <__assert_fail@plt+0xebd0>
   20758:	ldr	r1, [r4, #36]	; 0x24
   2075c:	add	r1, r1, #1
   20760:	lsl	r1, r1, #2
   20764:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   20768:	cmp	r0, #0
   2076c:	beq	20844 <__assert_fail@plt+0xeca0>
   20770:	str	r0, [r4, #100]	; 0x64
   20774:	ldrb	r3, [r4, #72]	; 0x48
   20778:	ldr	r2, [r4, #80]	; 0x50
   2077c:	cmp	r3, #0
   20780:	beq	207c4 <__assert_fail@plt+0xec20>
   20784:	cmp	r2, #1
   20788:	mov	r0, r4
   2078c:	ble	2083c <__assert_fail@plt+0xec98>
   20790:	ldrd	r4, [sp]
   20794:	ldr	r6, [sp, #8]
   20798:	ldr	lr, [sp, #12]
   2079c:	add	sp, sp, #16
   207a0:	b	200c4 <__assert_fail@plt+0xe520>
   207a4:	mov	lr, r3
   207a8:	str	lr, [r4, #28]
   207ac:	str	lr, [r4, #32]
   207b0:	mov	r0, r5
   207b4:	ldrd	r4, [sp]
   207b8:	ldr	r6, [sp, #8]
   207bc:	add	sp, sp, #12
   207c0:	pop	{pc}		; (ldr pc, [sp], #4)
   207c4:	cmp	r2, #1
   207c8:	bgt	20830 <__assert_fail@plt+0xec8c>
   207cc:	ldr	r1, [r4, #64]	; 0x40
   207d0:	cmp	r1, #0
   207d4:	beq	207b0 <__assert_fail@plt+0xec0c>
   207d8:	ldr	r3, [r4, #28]
   207dc:	ldr	lr, [r4, #36]	; 0x24
   207e0:	ldr	r2, [r4, #48]	; 0x30
   207e4:	cmp	lr, r2
   207e8:	movge	lr, r2
   207ec:	cmp	lr, r3
   207f0:	bgt	207fc <__assert_fail@plt+0xec58>
   207f4:	b	207a4 <__assert_fail@plt+0xec00>
   207f8:	ldr	r1, [r4, #64]	; 0x40
   207fc:	ldr	r2, [r4]
   20800:	ldr	r0, [r4, #4]
   20804:	ldr	ip, [r4, #24]
   20808:	add	r2, r2, r3
   2080c:	ldrb	r2, [r2, ip]
   20810:	ldrb	r2, [r1, r2]
   20814:	strb	r2, [r0, r3]
   20818:	add	r3, r3, #1
   2081c:	cmp	lr, r3
   20820:	bne	207f8 <__assert_fail@plt+0xec54>
   20824:	str	lr, [r4, #28]
   20828:	str	lr, [r4, #32]
   2082c:	b	207b0 <__assert_fail@plt+0xec0c>
   20830:	mov	r0, r4
   20834:	bl	1ff24 <__assert_fail@plt+0xe380>
   20838:	b	207b0 <__assert_fail@plt+0xec0c>
   2083c:	bl	20684 <__assert_fail@plt+0xeae0>
   20840:	b	207b0 <__assert_fail@plt+0xec0c>
   20844:	mov	r5, #12
   20848:	b	207b0 <__assert_fail@plt+0xec0c>
   2084c:	str	r4, [sp, #-8]!
   20850:	mov	r4, r0
   20854:	ldr	r0, [r0]
   20858:	str	lr, [sp, #4]
   2085c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20860:	ldr	r0, [r4, #4]
   20864:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20868:	ldr	r0, [r4, #8]
   2086c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20870:	ldr	r0, [r4, #12]
   20874:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20878:	mov	r0, r4
   2087c:	ldr	r4, [sp]
   20880:	ldr	lr, [sp, #4]
   20884:	add	sp, sp, #8
   20888:	b	17ac8 <__assert_fail@plt+0x5f24>
   2088c:	ldr	r2, [r0, #4]
   20890:	mov	r3, #255	; 0xff
   20894:	movt	r3, #4
   20898:	and	r3, r3, r2
   2089c:	cmp	r3, #6
   208a0:	beq	208b0 <__assert_fail@plt+0xed0c>
   208a4:	cmp	r3, #3
   208a8:	beq	208b8 <__assert_fail@plt+0xed14>
   208ac:	bx	lr
   208b0:	ldr	r0, [r0]
   208b4:	b	2084c <__assert_fail@plt+0xeca8>
   208b8:	ldr	r0, [r0]
   208bc:	b	17ac8 <__assert_fail@plt+0x5f24>
   208c0:	add	r0, r1, #20
   208c4:	str	r4, [sp, #-8]!
   208c8:	str	lr, [sp, #4]
   208cc:	bl	2088c <__assert_fail@plt+0xece8>
   208d0:	ldr	r4, [sp]
   208d4:	add	sp, sp, #4
   208d8:	mov	r0, #0
   208dc:	pop	{pc}		; (ldr pc, [sp], #4)
   208e0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   208e4:	mov	r4, r0
   208e8:	ldr	ip, [r0, #8]
   208ec:	strd	r6, [sp, #8]
   208f0:	ldr	r6, [r0, #4]
   208f4:	strd	r8, [sp, #16]
   208f8:	str	sl, [sp, #24]
   208fc:	str	lr, [sp, #28]
   20900:	sub	sp, sp, #8
   20904:	add	r3, sp, #8
   20908:	cmp	ip, r6
   2090c:	stmdb	r3, {r1, r2}
   20910:	ldrb	r5, [sp, #4]
   20914:	bcs	209e4 <__assert_fail@plt+0xee40>
   20918:	ldr	r7, [r0, #12]
   2091c:	ldr	r6, [r0, #20]
   20920:	lsl	r0, ip, #3
   20924:	cmp	r5, #5
   20928:	ldr	lr, [r4]
   2092c:	ldrd	r2, [sp]
   20930:	add	r1, lr, r0
   20934:	strd	r2, [lr, r0]
   20938:	ldr	r3, [r1, #4]
   2093c:	bfc	r3, #8, #10
   20940:	str	r3, [r1, #4]
   20944:	beq	209d0 <__assert_fail@plt+0xee2c>
   20948:	sub	r5, r5, #6
   2094c:	clz	r5, r5
   20950:	lsr	r5, r5, #5
   20954:	ldrb	r3, [r1, #6]
   20958:	mvn	r0, #0
   2095c:	mov	r2, #0
   20960:	bfi	r3, r5, #4, #1
   20964:	strb	r3, [r1, #6]
   20968:	str	r0, [r7, ip, lsl #2]
   2096c:	ldr	r3, [r4, #8]
   20970:	add	r3, r3, r3, lsl #1
   20974:	lsl	r3, r3, #2
   20978:	add	r1, r6, r3
   2097c:	str	r2, [r6, r3]
   20980:	str	r2, [r1, #4]
   20984:	str	r2, [r1, #8]
   20988:	ldr	r3, [r4, #8]
   2098c:	ldr	r0, [r4, #24]
   20990:	add	r3, r3, r3, lsl #1
   20994:	lsl	r3, r3, #2
   20998:	add	r1, r0, r3
   2099c:	str	r2, [r0, r3]
   209a0:	str	r2, [r1, #4]
   209a4:	str	r2, [r1, #8]
   209a8:	ldr	r0, [r4, #8]
   209ac:	add	r3, r0, #1
   209b0:	str	r3, [r4, #8]
   209b4:	add	sp, sp, #8
   209b8:	ldrd	r4, [sp]
   209bc:	ldrd	r6, [sp, #8]
   209c0:	ldrd	r8, [sp, #16]
   209c4:	ldr	sl, [sp, #24]
   209c8:	add	sp, sp, #28
   209cc:	pop	{pc}		; (ldr pc, [sp], #4)
   209d0:	ldr	r5, [r4, #92]	; 0x5c
   209d4:	cmp	r5, #1
   209d8:	movle	r5, #0
   209dc:	movgt	r5, #1
   209e0:	b	20954 <__assert_fail@plt+0xedb0>
   209e4:	lsl	r9, r6, #1
   209e8:	movw	r3, #21845	; 0x5555
   209ec:	movt	r3, #5461	; 0x1555
   209f0:	cmp	r9, r3
   209f4:	bhi	20ab0 <__assert_fail@plt+0xef0c>
   209f8:	lsl	r1, r6, #4
   209fc:	ldr	r0, [r0]
   20a00:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   20a04:	cmp	r0, #0
   20a08:	beq	20ab0 <__assert_fail@plt+0xef0c>
   20a0c:	lsl	r8, r6, #3
   20a10:	str	r0, [r4]
   20a14:	add	r6, r9, r6
   20a18:	ldr	r0, [r4, #12]
   20a1c:	mov	r1, r8
   20a20:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   20a24:	mov	r7, r0
   20a28:	mov	r1, r8
   20a2c:	lsl	r8, r6, #3
   20a30:	ldr	r0, [r4, #16]
   20a34:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   20a38:	mov	sl, r0
   20a3c:	mov	r1, r8
   20a40:	ldr	r0, [r4, #20]
   20a44:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   20a48:	mov	r6, r0
   20a4c:	mov	r1, r8
   20a50:	ldr	r0, [r4, #24]
   20a54:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   20a58:	cmp	sl, #0
   20a5c:	cmpne	r7, #0
   20a60:	mov	r8, r0
   20a64:	beq	20a90 <__assert_fail@plt+0xeeec>
   20a68:	cmp	r0, #0
   20a6c:	cmpne	r6, #0
   20a70:	beq	20a90 <__assert_fail@plt+0xeeec>
   20a74:	str	r9, [r4, #4]
   20a78:	str	r7, [r4, #12]
   20a7c:	str	sl, [r4, #16]
   20a80:	str	r6, [r4, #20]
   20a84:	str	r0, [r4, #24]
   20a88:	ldr	ip, [r4, #8]
   20a8c:	b	20920 <__assert_fail@plt+0xed7c>
   20a90:	mov	r0, r7
   20a94:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20a98:	mov	r0, sl
   20a9c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20aa0:	mov	r0, r6
   20aa4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20aa8:	mov	r0, r8
   20aac:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20ab0:	mvn	r0, #0
   20ab4:	b	209b4 <__assert_fail@plt+0xee10>
   20ab8:	ldr	r3, [r0]
   20abc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20ac0:	mov	r4, r2
   20ac4:	mov	r5, r0
   20ac8:	strd	r6, [sp, #8]
   20acc:	lsl	r7, r1, #3
   20ad0:	mov	r6, r1
   20ad4:	str	r8, [sp, #16]
   20ad8:	str	lr, [sp, #20]
   20adc:	add	r3, r3, r7
   20ae0:	ldm	r3, {r1, r2}
   20ae4:	bl	208e0 <__assert_fail@plt+0xed3c>
   20ae8:	cmn	r0, #1
   20aec:	beq	20b38 <__assert_fail@plt+0xef94>
   20af0:	ldr	r1, [r5]
   20af4:	ubfx	r2, r4, #0, #10
   20af8:	add	r3, r1, r0, lsl #3
   20afc:	add	r7, r1, r7
   20b00:	ldr	ip, [r3, #4]
   20b04:	bfi	ip, r2, #8, #10
   20b08:	mov	r1, ip
   20b0c:	str	ip, [r3, #4]
   20b10:	ldr	ip, [r7, #4]
   20b14:	ubfx	ip, ip, #8, #10
   20b18:	orr	r2, r2, ip
   20b1c:	bfi	r1, r2, #8, #10
   20b20:	ubfx	r2, r1, #16, #8
   20b24:	str	r1, [r3, #4]
   20b28:	orr	r2, r2, #4
   20b2c:	strb	r2, [r3, #6]
   20b30:	ldr	r3, [r5, #16]
   20b34:	str	r6, [r3, r0, lsl #2]
   20b38:	ldrd	r4, [sp]
   20b3c:	ldrd	r6, [sp, #8]
   20b40:	ldr	r8, [sp, #16]
   20b44:	add	sp, sp, #20
   20b48:	pop	{pc}		; (ldr pc, [sp], #4)
   20b4c:	str	r4, [sp, #-8]!
   20b50:	mov	r4, r0
   20b54:	ldr	r0, [r0, #24]
   20b58:	str	lr, [sp, #4]
   20b5c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20b60:	ldr	r0, [r4, #36]	; 0x24
   20b64:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20b68:	ldr	r3, [r4, #40]	; 0x28
   20b6c:	add	r2, r4, #4
   20b70:	cmp	r3, r2
   20b74:	beq	20b88 <__assert_fail@plt+0xefe4>
   20b78:	ldr	r0, [r3, #8]
   20b7c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20b80:	ldr	r0, [r4, #40]	; 0x28
   20b84:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20b88:	ldr	r0, [r4, #12]
   20b8c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20b90:	ldr	r0, [r4, #48]	; 0x30
   20b94:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20b98:	ldr	r0, [r4, #44]	; 0x2c
   20b9c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20ba0:	mov	r0, r4
   20ba4:	ldr	r4, [sp]
   20ba8:	ldr	lr, [sp, #4]
   20bac:	add	sp, sp, #8
   20bb0:	b	17ac8 <__assert_fail@plt+0x5f24>
   20bb4:	str	r4, [sp, #-8]!
   20bb8:	mov	r4, r0
   20bbc:	ldr	r0, [r0, #8]
   20bc0:	str	lr, [sp, #4]
   20bc4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20bc8:	ldr	r0, [r4, #12]
   20bcc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20bd0:	ldrb	r3, [r4, #75]	; 0x4b
   20bd4:	cmp	r3, #0
   20bd8:	bne	20be8 <__assert_fail@plt+0xf044>
   20bdc:	ldr	r4, [sp]
   20be0:	add	sp, sp, #4
   20be4:	pop	{pc}		; (ldr pc, [sp], #4)
   20be8:	ldr	r0, [r4, #4]
   20bec:	ldr	r4, [sp]
   20bf0:	ldr	lr, [sp, #4]
   20bf4:	add	sp, sp, #8
   20bf8:	b	17ac8 <__assert_fail@plt+0x5f24>
   20bfc:	ldr	r3, [r0, #124]	; 0x7c
   20c00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20c04:	strd	r6, [sp, #8]
   20c08:	str	r8, [sp, #16]
   20c0c:	mov	r8, r0
   20c10:	str	lr, [sp, #20]
   20c14:	cmp	r3, #0
   20c18:	ble	20c9c <__assert_fail@plt+0xf0f8>
   20c1c:	mov	r7, #0
   20c20:	ldr	r3, [r8, #132]	; 0x84
   20c24:	ldr	r6, [r3, r7, lsl #2]
   20c28:	ldr	r3, [r6, #16]
   20c2c:	cmp	r3, #0
   20c30:	ble	20c60 <__assert_fail@plt+0xf0bc>
   20c34:	mov	r4, #0
   20c38:	ldr	r3, [r6, #20]
   20c3c:	ldr	r5, [r3, r4, lsl #2]
   20c40:	add	r4, r4, #1
   20c44:	ldr	r0, [r5, #16]
   20c48:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20c4c:	mov	r0, r5
   20c50:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20c54:	ldr	r3, [r6, #16]
   20c58:	cmp	r3, r4
   20c5c:	bgt	20c38 <__assert_fail@plt+0xf094>
   20c60:	ldr	r0, [r6, #20]
   20c64:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20c68:	ldr	r3, [r6, #8]
   20c6c:	cmp	r3, #0
   20c70:	beq	20c84 <__assert_fail@plt+0xf0e0>
   20c74:	ldr	r0, [r3, #8]
   20c78:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20c7c:	ldr	r0, [r6, #8]
   20c80:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20c84:	mov	r0, r6
   20c88:	add	r7, r7, #1
   20c8c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   20c90:	ldr	r3, [r8, #124]	; 0x7c
   20c94:	cmp	r3, r7
   20c98:	bgt	20c20 <__assert_fail@plt+0xf07c>
   20c9c:	mov	r3, #0
   20ca0:	ldrd	r4, [sp]
   20ca4:	ldrd	r6, [sp, #8]
   20ca8:	str	r3, [r8, #108]	; 0x6c
   20cac:	str	r3, [r8, #124]	; 0x7c
   20cb0:	ldr	r8, [sp, #16]
   20cb4:	add	sp, sp, #20
   20cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   20cbc:	ldrb	r3, [r1, #24]
   20cc0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20cc4:	ldr	r2, [r1, #28]
   20cc8:	strd	r6, [sp, #8]
   20ccc:	str	r8, [sp, #16]
   20cd0:	sub	r3, r3, #2
   20cd4:	str	lr, [sp, #20]
   20cd8:	cmp	r3, #14
   20cdc:	ldrls	pc, [pc, r3, lsl #2]
   20ce0:	b	20e28 <__assert_fail@plt+0xf284>
   20ce4:	andeq	r0, r2, ip, lsr sp
   20ce8:	andeq	r0, r2, r8, lsr #28
   20cec:	andeq	r0, r2, r0, lsr #26
   20cf0:	andeq	r0, r2, r8, lsr #28
   20cf4:	andeq	r0, r2, r8, lsr #28
   20cf8:	andeq	r0, r2, r8, lsr #28
   20cfc:	ldrdeq	r0, [r2], -r8
   20d00:	ldrdeq	r0, [r2], -r8
   20d04:	andeq	r0, r2, r8, asr sp
   20d08:	andeq	r0, r2, r8, asr sp
   20d0c:	ldrdeq	r0, [r2], -r8
   20d10:	andeq	r0, r2, r8, lsr #28
   20d14:	andeq	r0, r2, r8, lsr #28
   20d18:	andeq	r0, r2, r8, lsr #28
   20d1c:	andeq	r0, r2, ip, lsr sp
   20d20:	ldr	ip, [r1, #16]
   20d24:	ldr	r3, [r0, #12]
   20d28:	ldr	r4, [ip, #28]
   20d2c:	str	r4, [r3, r2, lsl #2]
   20d30:	ldrb	r3, [r1, #24]
   20d34:	cmp	r3, #4
   20d38:	beq	20e54 <__assert_fail@plt+0xf2b0>
   20d3c:	mov	r3, #0
   20d40:	ldrd	r4, [sp]
   20d44:	mov	r0, r3
   20d48:	ldrd	r6, [sp, #8]
   20d4c:	ldr	r8, [sp, #16]
   20d50:	add	sp, sp, #20
   20d54:	pop	{pc}		; (ldr pc, [sp], #4)
   20d58:	ldrb	r3, [r0, #88]	; 0x58
   20d5c:	add	r2, r2, r2, lsl #1
   20d60:	mov	r6, #2
   20d64:	lsl	r2, r2, r6
   20d68:	orr	r3, r3, #1
   20d6c:	strb	r3, [r0, #88]	; 0x58
   20d70:	ldr	r3, [r1, #4]
   20d74:	cmp	r3, #0
   20d78:	ldrne	r3, [r3, #12]
   20d7c:	ldreq	r3, [r1, #16]
   20d80:	ldr	r5, [r3, #28]
   20d84:	ldr	r3, [r1, #8]
   20d88:	cmp	r3, #0
   20d8c:	ldrne	r3, [r3, #12]
   20d90:	ldreq	r3, [r1, #16]
   20d94:	ldr	r7, [r3, #28]
   20d98:	ldr	r3, [r0, #20]
   20d9c:	mov	r0, #8
   20da0:	str	r6, [r3, r2]
   20da4:	add	r4, r3, r2
   20da8:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   20dac:	cmp	r0, #0
   20db0:	str	r0, [r4, #8]
   20db4:	beq	20e9c <__assert_fail@plt+0xf2f8>
   20db8:	cmp	r5, r7
   20dbc:	beq	20e40 <__assert_fail@plt+0xf29c>
   20dc0:	mov	r3, #0
   20dc4:	str	r6, [r4, #4]
   20dc8:	stmlt	r0, {r5, r7}
   20dcc:	strge	r7, [r0]
   20dd0:	strge	r5, [r0, #4]
   20dd4:	b	20d40 <__assert_fail@plt+0xf19c>
   20dd8:	ldr	r5, [r0, #20]
   20ddc:	add	r2, r2, r2, lsl #1
   20de0:	mov	r3, #1
   20de4:	mov	r0, #4
   20de8:	ldr	r1, [r1, #16]
   20dec:	lsl	r4, r2, #2
   20df0:	add	r6, r5, r4
   20df4:	ldr	r7, [r1, #28]
   20df8:	str	r3, [r5, r4]
   20dfc:	str	r3, [r6, #4]
   20e00:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   20e04:	cmp	r0, #0
   20e08:	str	r0, [r6, #8]
   20e0c:	moveq	r3, #12
   20e10:	streq	r0, [r6, #4]
   20e14:	streq	r0, [r5, r4]
   20e18:	beq	20d40 <__assert_fail@plt+0xf19c>
   20e1c:	mov	r3, #0
   20e20:	str	r7, [r0]
   20e24:	b	20d40 <__assert_fail@plt+0xf19c>
   20e28:	ldr	ip, [r1, #16]
   20e2c:	mov	r3, #0
   20e30:	ldr	r1, [r0, #12]
   20e34:	ldr	r0, [ip, #28]
   20e38:	str	r0, [r1, r2, lsl #2]
   20e3c:	b	20d40 <__assert_fail@plt+0xf19c>
   20e40:	mov	r2, #1
   20e44:	mov	r3, #0
   20e48:	str	r2, [r4, #4]
   20e4c:	str	r5, [r0]
   20e50:	b	20d40 <__assert_fail@plt+0xf19c>
   20e54:	ldr	r6, [r0, #20]
   20e58:	add	r2, r2, r2, lsl #1
   20e5c:	mov	r1, #1
   20e60:	mov	r0, r3
   20e64:	lsl	r5, r2, #2
   20e68:	add	r7, r6, r5
   20e6c:	str	r1, [r6, r5]
   20e70:	str	r1, [r7, #4]
   20e74:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   20e78:	cmp	r0, #0
   20e7c:	str	r0, [r7, #8]
   20e80:	moveq	r3, #12
   20e84:	streq	r0, [r7, #4]
   20e88:	streq	r0, [r6, r5]
   20e8c:	beq	20d40 <__assert_fail@plt+0xf19c>
   20e90:	mov	r3, #0
   20e94:	str	r4, [r0]
   20e98:	b	20d40 <__assert_fail@plt+0xf19c>
   20e9c:	mov	r3, #12
   20ea0:	b	20d40 <__assert_fail@plt+0xf19c>
   20ea4:	ldr	r3, [r0]
   20ea8:	strd	r4, [sp, #-16]!
   20eac:	mov	r4, r0
   20eb0:	str	r6, [sp, #8]
   20eb4:	mov	r6, r1
   20eb8:	str	lr, [sp, #12]
   20ebc:	cmp	r3, #0
   20ec0:	beq	20ef8 <__assert_fail@plt+0xf354>
   20ec4:	ldr	r1, [r0, #4]
   20ec8:	ldr	r0, [r0, #8]
   20ecc:	cmp	r1, #0
   20ed0:	bne	20f3c <__assert_fail@plt+0xf398>
   20ed4:	str	r6, [r0]
   20ed8:	mov	r0, #1
   20edc:	ldr	r3, [r4, #4]
   20ee0:	add	r3, r3, r0
   20ee4:	str	r3, [r4, #4]
   20ee8:	ldrd	r4, [sp]
   20eec:	ldr	r6, [sp, #8]
   20ef0:	add	sp, sp, #12
   20ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   20ef8:	mov	r5, #1
   20efc:	mov	r0, #4
   20f00:	str	r5, [r4]
   20f04:	str	r5, [r4, #4]
   20f08:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   20f0c:	mov	r3, r0
   20f10:	cmp	r0, #0
   20f14:	str	r0, [r4, #8]
   20f18:	streq	r3, [r4]
   20f1c:	streq	r3, [r4, #4]
   20f20:	beq	20ee8 <__assert_fail@plt+0xf344>
   20f24:	mov	r0, r5
   20f28:	str	r6, [r3]
   20f2c:	ldrd	r4, [sp]
   20f30:	ldr	r6, [sp, #8]
   20f34:	add	sp, sp, #12
   20f38:	pop	{pc}		; (ldr pc, [sp], #4)
   20f3c:	cmp	r3, r1
   20f40:	beq	20fc4 <__assert_fail@plt+0xf420>
   20f44:	ldr	r2, [r0]
   20f48:	mov	r3, r1
   20f4c:	cmp	r2, r6
   20f50:	ble	20f78 <__assert_fail@plt+0xf3d4>
   20f54:	cmp	r1, #0
   20f58:	ble	20fac <__assert_fail@plt+0xf408>
   20f5c:	add	r1, r0, r1, lsl #2
   20f60:	ldr	r3, [r1, #-4]
   20f64:	str	r3, [r1], #-4
   20f68:	cmp	r1, r0
   20f6c:	bne	20f60 <__assert_fail@plt+0xf3bc>
   20f70:	mov	r3, #0
   20f74:	b	20fac <__assert_fail@plt+0xf408>
   20f78:	sub	r3, r1, #-1073741823	; 0xc0000001
   20f7c:	ldr	r2, [r0, r3, lsl #2]
   20f80:	lsl	r3, r3, #2
   20f84:	cmp	r6, r2
   20f88:	bge	20fa8 <__assert_fail@plt+0xf404>
   20f8c:	add	r3, r3, #4
   20f90:	add	r3, r0, r3
   20f94:	str	r2, [r3], #-4
   20f98:	sub	r1, r1, #1
   20f9c:	ldr	r2, [r3, #-4]
   20fa0:	cmp	r2, r6
   20fa4:	bgt	20f94 <__assert_fail@plt+0xf3f0>
   20fa8:	mov	r3, r1
   20fac:	str	r6, [r0, r3, lsl #2]
   20fb0:	mov	r0, #1
   20fb4:	ldr	r3, [r4, #4]
   20fb8:	add	r3, r3, r0
   20fbc:	str	r3, [r4, #4]
   20fc0:	b	20ee8 <__assert_fail@plt+0xf344>
   20fc4:	lsl	r3, r1, #1
   20fc8:	lsl	r1, r1, #3
   20fcc:	str	r3, [r4]
   20fd0:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   20fd4:	cmp	r0, #0
   20fd8:	beq	20ee8 <__assert_fail@plt+0xf344>
   20fdc:	str	r0, [r4, #8]
   20fe0:	ldr	r1, [r4, #4]
   20fe4:	b	20f44 <__assert_fail@plt+0xf3a0>
   20fe8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20fec:	mov	r4, r0
   20ff0:	mov	r5, r2
   20ff4:	strd	r6, [sp, #8]
   20ff8:	mov	r7, r1
   20ffc:	strd	r8, [sp, #16]
   21000:	strd	sl, [sp, #24]
   21004:	mov	sl, #0
   21008:	str	lr, [sp, #32]
   2100c:	sub	sp, sp, #20
   21010:	ldr	r9, [sp, #56]	; 0x38
   21014:	str	r3, [sp, #12]
   21018:	ldr	r2, [r4]
   2101c:	mov	r6, r5
   21020:	ldr	r1, [r4, #20]
   21024:	add	ip, r2, r7, lsl #3
   21028:	ldrb	r3, [ip, #4]
   2102c:	cmp	r3, #4
   21030:	beq	211c0 <__assert_fail@plt+0xf61c>
   21034:	add	r8, r7, r7, lsl #1
   21038:	lsl	r8, r8, #2
   2103c:	add	r3, r1, r8
   21040:	ldr	r0, [r3, #4]
   21044:	cmp	r0, #0
   21048:	beq	21278 <__assert_fail@plt+0xf6d4>
   2104c:	ldr	r3, [r3, #8]
   21050:	add	r6, r5, r5, lsl #1
   21054:	cmp	r0, #1
   21058:	lsl	r6, r6, #2
   2105c:	add	r0, r1, r6
   21060:	ldr	fp, [r3]
   21064:	beq	21154 <__assert_fail@plt+0xf5b0>
   21068:	ldr	r5, [r4, #8]
   2106c:	sub	r1, r5, #1
   21070:	add	ip, r2, r1, lsl #3
   21074:	cmp	r1, #0
   21078:	movle	lr, #0
   2107c:	movgt	lr, #1
   21080:	ldrb	r7, [ip, #6]
   21084:	str	sl, [r0, #4]
   21088:	ands	r3, lr, r7, lsr #2
   2108c:	beq	21220 <__assert_fail@plt+0xf67c>
   21090:	ldr	lr, [r4, #16]
   21094:	add	r2, r2, r5, lsl #3
   21098:	sub	r2, r2, ip
   2109c:	sub	r2, r2, #16
   210a0:	add	lr, lr, r5, lsl #2
   210a4:	b	210c8 <__assert_fail@plt+0xf524>
   210a8:	add	ip, ip, r2
   210ac:	sub	r1, r1, #1
   210b0:	ldrb	r7, [ip, #6]
   210b4:	cmp	r1, #0
   210b8:	movle	r5, #0
   210bc:	movgt	r5, #1
   210c0:	ands	r3, r5, r7, lsr #2
   210c4:	beq	21220 <__assert_fail@plt+0xf67c>
   210c8:	ldr	r5, [lr, #-4]!
   210cc:	cmp	r5, fp
   210d0:	bne	210a8 <__assert_fail@plt+0xf504>
   210d4:	ldr	r7, [ip, #4]
   210d8:	ubfx	r7, r7, #8, #10
   210dc:	cmp	r9, r7
   210e0:	bne	210a8 <__assert_fail@plt+0xf504>
   210e4:	bl	20ea4 <__assert_fail@plt+0xf300>
   210e8:	cmp	r0, #0
   210ec:	beq	21134 <__assert_fail@plt+0xf590>
   210f0:	ldr	r3, [r4, #20]
   210f4:	mov	r2, r9
   210f8:	mov	r0, r4
   210fc:	add	r8, r3, r8
   21100:	ldr	r3, [r8, #8]
   21104:	ldr	r7, [r3, #4]
   21108:	mov	r1, r7
   2110c:	bl	20ab8 <__assert_fail@plt+0xef14>
   21110:	cmn	r0, #1
   21114:	mov	r5, r0
   21118:	beq	21134 <__assert_fail@plt+0xf590>
   2111c:	mov	r1, r0
   21120:	ldr	r0, [r4, #20]
   21124:	add	r0, r0, r6
   21128:	bl	20ea4 <__assert_fail@plt+0xf300>
   2112c:	cmp	r0, #0
   21130:	bne	21018 <__assert_fail@plt+0xf474>
   21134:	mov	r0, #12
   21138:	add	sp, sp, #20
   2113c:	ldrd	r4, [sp]
   21140:	ldrd	r6, [sp, #8]
   21144:	ldrd	r8, [sp, #16]
   21148:	ldrd	sl, [sp, #24]
   2114c:	add	sp, sp, #32
   21150:	pop	{pc}		; (ldr pc, [sp], #4)
   21154:	ldr	r2, [sp, #12]
   21158:	cmp	r7, r5
   2115c:	str	sl, [r0, #4]
   21160:	sub	r2, r7, r2
   21164:	clz	r2, r2
   21168:	lsr	r2, r2, #5
   2116c:	moveq	r2, #0
   21170:	cmp	r2, #0
   21174:	bne	21288 <__assert_fail@plt+0xf6e4>
   21178:	ldr	r2, [ip, #4]
   2117c:	mov	r1, fp
   21180:	mov	r0, r4
   21184:	ubfx	r2, r2, #8, #10
   21188:	orr	r9, r9, r2
   2118c:	mov	r2, r9
   21190:	bl	20ab8 <__assert_fail@plt+0xef14>
   21194:	cmn	r0, #1
   21198:	mov	r5, r0
   2119c:	beq	21134 <__assert_fail@plt+0xf590>
   211a0:	mov	r1, r0
   211a4:	ldr	r0, [r4, #20]
   211a8:	add	r0, r0, r6
   211ac:	bl	20ea4 <__assert_fail@plt+0xf300>
   211b0:	cmp	r0, #0
   211b4:	beq	21134 <__assert_fail@plt+0xf590>
   211b8:	mov	r7, fp
   211bc:	b	21018 <__assert_fail@plt+0xf474>
   211c0:	ldr	ip, [r4, #12]
   211c4:	add	r5, r5, r5, lsl #1
   211c8:	mov	r2, r9
   211cc:	lsl	fp, r7, #2
   211d0:	mov	r0, r4
   211d4:	lsl	r8, r5, #2
   211d8:	add	r1, r1, r8
   211dc:	ldr	r7, [ip, r7, lsl #2]
   211e0:	str	sl, [r1, #4]
   211e4:	mov	r1, r7
   211e8:	bl	20ab8 <__assert_fail@plt+0xef14>
   211ec:	cmn	r0, #1
   211f0:	mov	r5, r0
   211f4:	beq	21134 <__assert_fail@plt+0xf590>
   211f8:	ldr	r2, [r4, #12]
   211fc:	mov	r1, r0
   21200:	ldr	r0, [r4, #20]
   21204:	ldr	r3, [r2, fp]
   21208:	add	r0, r0, r8
   2120c:	str	r3, [r2, r6, lsl #2]
   21210:	bl	20ea4 <__assert_fail@plt+0xf300>
   21214:	cmp	r0, #0
   21218:	bne	21018 <__assert_fail@plt+0xf474>
   2121c:	b	21134 <__assert_fail@plt+0xf590>
   21220:	mov	r2, r9
   21224:	mov	r1, fp
   21228:	mov	r0, r4
   2122c:	bl	20ab8 <__assert_fail@plt+0xef14>
   21230:	cmn	r0, #1
   21234:	mov	r5, r0
   21238:	beq	21134 <__assert_fail@plt+0xf590>
   2123c:	ldr	r0, [r4, #20]
   21240:	mov	r1, r5
   21244:	add	r0, r0, r6
   21248:	bl	20ea4 <__assert_fail@plt+0xf300>
   2124c:	cmp	r0, #0
   21250:	beq	21134 <__assert_fail@plt+0xf590>
   21254:	mov	r2, r5
   21258:	mov	r1, fp
   2125c:	str	r9, [sp]
   21260:	mov	r0, r4
   21264:	ldr	r3, [sp, #12]
   21268:	bl	20fe8 <__assert_fail@plt+0xf444>
   2126c:	cmp	r0, #0
   21270:	beq	210f0 <__assert_fail@plt+0xf54c>
   21274:	b	21138 <__assert_fail@plt+0xf594>
   21278:	ldr	r3, [r4, #12]
   2127c:	ldr	r2, [r3, r7, lsl #2]
   21280:	str	r2, [r3, r5, lsl #2]
   21284:	b	21138 <__assert_fail@plt+0xf594>
   21288:	mov	r1, fp
   2128c:	bl	20ea4 <__assert_fail@plt+0xf300>
   21290:	cmp	r0, #0
   21294:	movne	r0, #0
   21298:	bne	21138 <__assert_fail@plt+0xf594>
   2129c:	b	21134 <__assert_fail@plt+0xf590>
   212a0:	ldr	r3, [r0, #36]	; 0x24
   212a4:	strd	r4, [sp, #-16]!
   212a8:	mov	r4, r0
   212ac:	mov	r5, r1
   212b0:	str	r6, [sp, #8]
   212b4:	str	lr, [sp, #12]
   212b8:	ldr	r6, [r0, #104]	; 0x68
   212bc:	cmp	r3, r1
   212c0:	bgt	21300 <__assert_fail@plt+0xf75c>
   212c4:	ldr	r2, [r0, #48]	; 0x30
   212c8:	cmp	r3, r2
   212cc:	bge	21300 <__assert_fail@plt+0xf75c>
   212d0:	add	r1, r5, #1
   212d4:	mov	r0, r4
   212d8:	bl	2070c <__assert_fail@plt+0xeb68>
   212dc:	cmp	r0, #0
   212e0:	bne	212f0 <__assert_fail@plt+0xf74c>
   212e4:	cmp	r6, r5
   212e8:	movge	r0, #0
   212ec:	blt	2131c <__assert_fail@plt+0xf778>
   212f0:	ldrd	r4, [sp]
   212f4:	ldr	r6, [sp, #8]
   212f8:	add	sp, sp, #12
   212fc:	pop	{pc}		; (ldr pc, [sp], #4)
   21300:	ldr	r3, [r4, #28]
   21304:	cmp	r3, r5
   21308:	bgt	212e4 <__assert_fail@plt+0xf740>
   2130c:	ldr	r2, [r4, #48]	; 0x30
   21310:	cmp	r3, r2
   21314:	bge	212e4 <__assert_fail@plt+0xf740>
   21318:	b	212d0 <__assert_fail@plt+0xf72c>
   2131c:	ldr	r3, [r4, #100]	; 0x64
   21320:	sub	r2, r5, r6
   21324:	add	r0, r6, #1
   21328:	lsl	r2, r2, #2
   2132c:	mov	r1, #0
   21330:	add	r0, r3, r0, lsl #2
   21334:	bl	119e8 <memset@plt>
   21338:	str	r5, [r4, #104]	; 0x68
   2133c:	mov	r0, #0
   21340:	ldrd	r4, [sp]
   21344:	ldr	r6, [sp, #8]
   21348:	add	sp, sp, #12
   2134c:	pop	{pc}		; (ldr pc, [sp], #4)
   21350:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21354:	subs	r4, r0, #0
   21358:	strd	r6, [sp, #8]
   2135c:	str	r8, [sp, #16]
   21360:	str	lr, [sp, #20]
   21364:	ldr	r7, [sp, #28]
   21368:	beq	21414 <__assert_fail@plt+0xf870>
   2136c:	ldr	ip, [r4]
   21370:	cmp	ip, #0
   21374:	beq	21414 <__assert_fail@plt+0xf870>
   21378:	sub	ip, ip, #1
   2137c:	ldr	lr, [r4, #8]
   21380:	mov	r0, r3
   21384:	add	r5, ip, ip, lsl #1
   21388:	mov	r8, r1
   2138c:	lsl	r6, r2, #3
   21390:	lsl	r5, r5, #3
   21394:	mov	r2, r6
   21398:	ldr	r3, [lr, r5]
   2139c:	add	lr, lr, r5
   213a0:	ldr	r1, [lr, #8]
   213a4:	str	ip, [r4]
   213a8:	str	r3, [r8]
   213ac:	bl	11784 <memcpy@plt>
   213b0:	ldr	r3, [r4, #8]
   213b4:	mov	r2, r6
   213b8:	ldr	r0, [sp, #24]
   213bc:	add	r3, r3, r5
   213c0:	ldr	r1, [r3, #8]
   213c4:	add	r1, r1, r6
   213c8:	bl	11784 <memcpy@plt>
   213cc:	ldr	r0, [r7, #8]
   213d0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   213d4:	ldr	r3, [r4, #8]
   213d8:	add	r3, r3, r5
   213dc:	ldr	r0, [r3, #8]
   213e0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   213e4:	ldr	r3, [r4, #8]
   213e8:	add	r5, r3, r5
   213ec:	ldr	r0, [r5, #4]
   213f0:	ldrd	r2, [r5, #12]
   213f4:	strd	r2, [r7]
   213f8:	ldr	r3, [r5, #20]
   213fc:	str	r3, [r7, #8]
   21400:	ldrd	r4, [sp]
   21404:	ldrd	r6, [sp, #8]
   21408:	ldr	r8, [sp, #16]
   2140c:	add	sp, sp, #20
   21410:	pop	{pc}		; (ldr pc, [sp], #4)
   21414:	mvn	r0, #0
   21418:	b	21400 <__assert_fail@plt+0xf85c>
   2141c:	ldr	r3, [r0, #28]
   21420:	add	ip, r1, #1
   21424:	cmp	ip, r3
   21428:	bge	21470 <__assert_fail@plt+0xf8cc>
   2142c:	ldr	r2, [r0, #8]
   21430:	ldr	r0, [r2, ip, lsl #2]
   21434:	add	r2, r2, ip, lsl #2
   21438:	cmn	r0, #1
   2143c:	bne	21470 <__assert_fail@plt+0xf8cc>
   21440:	sub	r0, r3, r1
   21444:	mov	r3, #1
   21448:	b	21458 <__assert_fail@plt+0xf8b4>
   2144c:	ldr	ip, [r2, #4]!
   21450:	cmn	ip, #1
   21454:	bne	21468 <__assert_fail@plt+0xf8c4>
   21458:	add	r3, r3, #1
   2145c:	cmp	r3, r0
   21460:	bne	2144c <__assert_fail@plt+0xf8a8>
   21464:	bx	lr
   21468:	mov	r0, r3
   2146c:	bx	lr
   21470:	mov	r0, #1
   21474:	bx	lr
   21478:	cmp	r0, #0
   2147c:	ble	214f8 <__assert_fail@plt+0xf954>
   21480:	push	{lr}		; (str lr, [sp, #-4]!)
   21484:	sub	ip, r0, #1
   21488:	mov	r0, #0
   2148c:	ldr	lr, [r1]
   21490:	cmp	r0, ip
   21494:	bcs	214d0 <__assert_fail@plt+0xf92c>
   21498:	add	r1, r0, ip
   2149c:	lsr	r1, r1, #1
   214a0:	ldr	r3, [lr, r1, lsl #2]
   214a4:	cmp	r2, r3
   214a8:	ble	214c0 <__assert_fail@plt+0xf91c>
   214ac:	b	214e4 <__assert_fail@plt+0xf940>
   214b0:	ldr	ip, [lr, r3, lsl #2]
   214b4:	cmp	ip, r2
   214b8:	blt	214ec <__assert_fail@plt+0xf948>
   214bc:	mov	r1, r3
   214c0:	add	r3, r0, r1
   214c4:	cmp	r0, r1
   214c8:	lsr	r3, r3, #1
   214cc:	bcc	214b0 <__assert_fail@plt+0xf90c>
   214d0:	ldr	r3, [lr, r0, lsl #2]
   214d4:	cmp	r2, r3
   214d8:	addeq	r0, r0, #1
   214dc:	movne	r0, #0
   214e0:	pop	{pc}		; (ldr pc, [sp], #4)
   214e4:	mov	r3, r1
   214e8:	mov	r1, ip
   214ec:	add	r0, r3, #1
   214f0:	mov	ip, r1
   214f4:	b	21490 <__assert_fail@plt+0xf8ec>
   214f8:	mov	r0, #0
   214fc:	bx	lr
   21500:	strd	r4, [sp, #-28]!	; 0xffffffe4
   21504:	mov	r5, r1
   21508:	mov	r4, r2
   2150c:	strd	r6, [sp, #8]
   21510:	mov	r6, r0
   21514:	strd	r8, [sp, #16]
   21518:	mov	r9, r3
   2151c:	add	r8, r1, #8
   21520:	str	lr, [sp, #24]
   21524:	sub	sp, sp, #12
   21528:	ldr	r7, [sp, #40]	; 0x28
   2152c:	mov	r1, r8
   21530:	mov	r2, r4
   21534:	ldr	r0, [r5, #4]
   21538:	bl	21478 <__assert_fail@plt+0xf8d4>
   2153c:	cmp	r0, #0
   21540:	mov	r1, r4
   21544:	mov	r0, r5
   21548:	bne	21610 <__assert_fail@plt+0xfa6c>
   2154c:	ldr	r3, [r6]
   21550:	add	r2, r3, r4, lsl #3
   21554:	ldrb	r2, [r2, #4]
   21558:	cmp	r2, r7
   2155c:	bne	2156c <__assert_fail@plt+0xf9c8>
   21560:	ldr	r3, [r3, r4, lsl #3]
   21564:	cmp	r3, r9
   21568:	beq	215d8 <__assert_fail@plt+0xfa34>
   2156c:	bl	20ea4 <__assert_fail@plt+0xf300>
   21570:	cmp	r0, #0
   21574:	add	r4, r4, r4, lsl #1
   21578:	beq	215f4 <__assert_fail@plt+0xfa50>
   2157c:	ldr	r3, [r6, #20]
   21580:	lsl	r4, r4, #2
   21584:	add	r3, r3, r4
   21588:	ldr	r2, [r3, #4]
   2158c:	cmp	r2, #0
   21590:	beq	21610 <__assert_fail@plt+0xfa6c>
   21594:	cmp	r2, #2
   21598:	ldr	r2, [r3, #8]
   2159c:	beq	215a8 <__assert_fail@plt+0xfa04>
   215a0:	ldr	r4, [r2]
   215a4:	b	2152c <__assert_fail@plt+0xf988>
   215a8:	mov	r3, r9
   215ac:	mov	r1, r5
   215b0:	ldr	r2, [r2, #4]
   215b4:	mov	r0, r6
   215b8:	str	r7, [sp]
   215bc:	bl	21500 <__assert_fail@plt+0xf95c>
   215c0:	cmp	r0, #0
   215c4:	bne	215f8 <__assert_fail@plt+0xfa54>
   215c8:	ldr	r3, [r6, #20]
   215cc:	add	r4, r3, r4
   215d0:	ldr	r2, [r4, #8]
   215d4:	b	215a0 <__assert_fail@plt+0xf9fc>
   215d8:	cmp	r7, #9
   215dc:	bne	21610 <__assert_fail@plt+0xfa6c>
   215e0:	mov	r1, r4
   215e4:	mov	r0, r5
   215e8:	bl	20ea4 <__assert_fail@plt+0xf300>
   215ec:	cmp	r0, #0
   215f0:	bne	21610 <__assert_fail@plt+0xfa6c>
   215f4:	mov	r0, #12
   215f8:	add	sp, sp, #12
   215fc:	ldrd	r4, [sp]
   21600:	ldrd	r6, [sp, #8]
   21604:	ldrd	r8, [sp, #16]
   21608:	add	sp, sp, #24
   2160c:	pop	{pc}		; (ldr pc, [sp], #4)
   21610:	mov	r0, #0
   21614:	b	215f8 <__assert_fail@plt+0xfa54>
   21618:	ldr	r3, [r0]
   2161c:	cmp	r2, r3
   21620:	bge	21644 <__assert_fail@plt+0xfaa0>
   21624:	ldr	r3, [r1]
   21628:	add	r3, r3, r2, lsl #2
   2162c:	ldr	r1, [r3, #4]
   21630:	add	r2, r2, #1
   21634:	str	r1, [r3], #4
   21638:	ldr	r1, [r0]
   2163c:	cmp	r2, r1
   21640:	blt	2162c <__assert_fail@plt+0xfa88>
   21644:	bx	lr
   21648:	ldrb	r3, [r1, #24]
   2164c:	cmp	r3, #4
   21650:	beq	216bc <__assert_fail@plt+0xfb18>
   21654:	cmp	r3, #17
   21658:	beq	21664 <__assert_fail@plt+0xfac0>
   2165c:	mov	r0, #0
   21660:	bx	lr
   21664:	ldr	r3, [r1, #4]
   21668:	cmp	r3, #0
   2166c:	beq	2165c <__assert_fail@plt+0xfab8>
   21670:	ldrb	r2, [r3, #24]
   21674:	cmp	r2, #17
   21678:	bne	2165c <__assert_fail@plt+0xfab8>
   2167c:	ldr	r2, [r3, #4]
   21680:	ldr	r3, [r3, #20]
   21684:	cmp	r2, #0
   21688:	str	r2, [r1, #4]
   2168c:	strne	r1, [r2]
   21690:	cmp	r3, #31
   21694:	ldr	r1, [r1, #20]
   21698:	ldr	r2, [r0, #132]	; 0x84
   2169c:	ldr	r1, [r2, r1, lsl #2]
   216a0:	str	r1, [r2, r3, lsl #2]
   216a4:	bgt	2165c <__assert_fail@plt+0xfab8>
   216a8:	ldr	r2, [r0, #80]	; 0x50
   216ac:	mov	r1, #1
   216b0:	bic	r3, r2, r1, lsl r3
   216b4:	str	r3, [r0, #80]	; 0x50
   216b8:	b	2165c <__assert_fail@plt+0xfab8>
   216bc:	ldr	r2, [r0, #132]	; 0x84
   216c0:	cmp	r2, #0
   216c4:	beq	2165c <__assert_fail@plt+0xfab8>
   216c8:	push	{lr}		; (str lr, [sp, #-4]!)
   216cc:	mov	ip, #1
   216d0:	ldr	lr, [r1, #20]
   216d4:	ldr	r3, [r0, #80]	; 0x50
   216d8:	ldr	r2, [r2, lr, lsl #2]
   216dc:	orr	r3, r3, ip, lsl r2
   216e0:	str	r2, [r1, #20]
   216e4:	str	r3, [r0, #80]	; 0x50
   216e8:	mov	r0, #0
   216ec:	pop	{pc}		; (ldr pc, [sp], #4)
   216f0:	ldrb	r3, [r1, #24]
   216f4:	ldr	r2, [r1, #4]
   216f8:	cmp	r3, #11
   216fc:	streq	r1, [r2, #16]
   21700:	beq	21720 <__assert_fail@plt+0xfb7c>
   21704:	cmp	r3, #16
   21708:	bne	21728 <__assert_fail@plt+0xfb84>
   2170c:	ldr	r3, [r1, #8]
   21710:	ldr	r0, [r3, #12]
   21714:	str	r0, [r2, #16]
   21718:	ldr	r2, [r1, #16]
   2171c:	str	r2, [r3, #16]
   21720:	mov	r0, #0
   21724:	bx	lr
   21728:	cmp	r2, #0
   2172c:	mov	r0, #0
   21730:	ldrne	r3, [r1, #16]
   21734:	strne	r3, [r2, #16]
   21738:	ldr	r3, [r1, #8]
   2173c:	cmp	r3, #0
   21740:	ldrne	r2, [r1, #16]
   21744:	strne	r2, [r3, #16]
   21748:	bx	lr
   2174c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21750:	mov	r4, #0
   21754:	strd	r6, [sp, #8]
   21758:	strd	r8, [sp, #16]
   2175c:	ldr	r9, [r0, #108]	; 0x6c
   21760:	strd	sl, [sp, #24]
   21764:	str	lr, [sp, #32]
   21768:	sub	sp, sp, #28
   2176c:	ldr	r6, [sp, #64]	; 0x40
   21770:	ldr	r7, [sp, #72]	; 0x48
   21774:	mov	ip, r9
   21778:	ldr	lr, [r0, #84]	; 0x54
   2177c:	str	lr, [sp, #8]
   21780:	cmp	r4, ip
   21784:	bge	217e0 <__assert_fail@plt+0xfc3c>
   21788:	add	lr, r4, ip
   2178c:	ldr	r5, [r0, #116]	; 0x74
   21790:	add	lr, lr, lr, lsr #31
   21794:	asr	lr, lr, #1
   21798:	add	r8, lr, lr, lsl #1
   2179c:	add	r8, r5, r8, lsl #3
   217a0:	ldr	r8, [r8, #4]
   217a4:	cmp	r6, r8
   217a8:	ble	217d0 <__assert_fail@plt+0xfc2c>
   217ac:	b	21930 <__assert_fail@plt+0xfd8c>
   217b0:	asr	ip, ip, #1
   217b4:	add	r8, ip, ip, lsl #1
   217b8:	mov	sl, ip
   217bc:	add	r8, r5, r8, lsl #3
   217c0:	ldr	r8, [r8, #4]
   217c4:	cmp	r8, r6
   217c8:	blt	21938 <__assert_fail@plt+0xfd94>
   217cc:	mov	lr, ip
   217d0:	add	ip, r4, lr
   217d4:	cmp	r4, lr
   217d8:	add	ip, ip, ip, lsr #31
   217dc:	blt	217b0 <__assert_fail@plt+0xfc0c>
   217e0:	cmp	r9, r4
   217e4:	ble	21974 <__assert_fail@plt+0xfdd0>
   217e8:	ldr	ip, [r0, #116]	; 0x74
   217ec:	add	lr, r4, r4, lsl #1
   217f0:	add	ip, ip, lr, lsl #3
   217f4:	ldr	ip, [ip, #4]
   217f8:	cmp	r6, ip
   217fc:	mvnne	r4, #0
   21800:	mov	ip, r9
   21804:	mov	r5, #0
   21808:	cmp	r5, ip
   2180c:	bge	21868 <__assert_fail@plt+0xfcc4>
   21810:	add	lr, r5, ip
   21814:	ldr	r8, [r0, #116]	; 0x74
   21818:	add	lr, lr, lr, lsr #31
   2181c:	asr	lr, lr, #1
   21820:	add	sl, lr, lr, lsl #1
   21824:	add	sl, r8, sl, lsl #3
   21828:	ldr	sl, [sl, #4]
   2182c:	cmp	r7, sl
   21830:	ble	21858 <__assert_fail@plt+0xfcb4>
   21834:	b	21944 <__assert_fail@plt+0xfda0>
   21838:	asr	ip, ip, #1
   2183c:	add	sl, ip, ip, lsl #1
   21840:	mov	fp, ip
   21844:	add	sl, r8, sl, lsl #3
   21848:	ldr	sl, [sl, #4]
   2184c:	cmp	sl, r7
   21850:	blt	2194c <__assert_fail@plt+0xfda8>
   21854:	mov	lr, ip
   21858:	add	ip, r5, lr
   2185c:	cmp	r5, lr
   21860:	add	ip, ip, ip, lsr #31
   21864:	blt	21838 <__assert_fail@plt+0xfc94>
   21868:	cmp	r9, r5
   2186c:	ble	2197c <__assert_fail@plt+0xfdd8>
   21870:	ldr	ip, [r0, #116]	; 0x74
   21874:	add	lr, r5, r5, lsl #1
   21878:	add	ip, ip, lr, lsl #3
   2187c:	ldr	ip, [ip, #4]
   21880:	cmp	r7, ip
   21884:	mvnne	r5, #0
   21888:	ldr	ip, [r1]
   2188c:	cmp	ip, #0
   21890:	ble	2196c <__assert_fail@plt+0xfdc8>
   21894:	mov	r9, r2
   21898:	mov	r8, r0
   2189c:	str	r3, [sp, #12]
   218a0:	mov	fp, #0
   218a4:	str	r4, [sp, #16]
   218a8:	str	r1, [sp, #20]
   218ac:	ldr	r1, [r9]
   218b0:	mov	r0, r8
   218b4:	ldrd	r2, [sp, #8]
   218b8:	ldr	ip, [r8, #116]	; 0x74
   218bc:	ldr	r1, [r1, fp, lsl #2]
   218c0:	ldr	r2, [r2]
   218c4:	add	lr, r1, r1, lsl #1
   218c8:	ldr	ip, [ip, lr, lsl #3]
   218cc:	ldr	r4, [r2, ip, lsl #3]
   218d0:	str	r6, [sp]
   218d4:	ldr	r2, [sp, #16]
   218d8:	str	r2, [sp, #4]
   218dc:	mov	r2, r4
   218e0:	bl	1fc44 <__assert_fail@plt+0xe0a0>
   218e4:	ldr	r1, [r9]
   218e8:	mov	sl, r0
   218ec:	mov	r2, r4
   218f0:	mov	r0, r8
   218f4:	ldr	r3, [sp, #68]	; 0x44
   218f8:	ldr	r1, [r1, fp, lsl #2]
   218fc:	str	r7, [sp]
   21900:	str	r5, [sp, #4]
   21904:	bl	1fc44 <__assert_fail@plt+0xe0a0>
   21908:	cmp	sl, r0
   2190c:	beq	21958 <__assert_fail@plt+0xfdb4>
   21910:	mov	r0, #1
   21914:	add	sp, sp, #28
   21918:	ldrd	r4, [sp]
   2191c:	ldrd	r6, [sp, #8]
   21920:	ldrd	r8, [sp, #16]
   21924:	ldrd	sl, [sp, #24]
   21928:	add	sp, sp, #32
   2192c:	pop	{pc}		; (ldr pc, [sp], #4)
   21930:	mov	sl, lr
   21934:	mov	lr, ip
   21938:	add	r4, sl, #1
   2193c:	mov	ip, lr
   21940:	b	21780 <__assert_fail@plt+0xfbdc>
   21944:	mov	fp, lr
   21948:	mov	lr, ip
   2194c:	add	r5, fp, #1
   21950:	mov	ip, lr
   21954:	b	21808 <__assert_fail@plt+0xfc64>
   21958:	ldr	r3, [sp, #20]
   2195c:	add	fp, fp, #1
   21960:	ldr	r3, [r3]
   21964:	cmp	fp, r3
   21968:	blt	218ac <__assert_fail@plt+0xfd08>
   2196c:	mov	r0, #0
   21970:	b	21914 <__assert_fail@plt+0xfd70>
   21974:	mvn	r4, #0
   21978:	b	21800 <__assert_fail@plt+0xfc5c>
   2197c:	mvn	r5, #0
   21980:	b	21888 <__assert_fail@plt+0xfce4>
   21984:	strd	r4, [sp, #-16]!
   21988:	mov	r4, r0
   2198c:	mov	r5, r2
   21990:	str	r6, [sp, #8]
   21994:	mov	r6, r1
   21998:	str	lr, [sp, #12]
   2199c:	b	219a4 <__assert_fail@plt+0xfe00>
   219a0:	mov	r4, r3
   219a4:	mov	r1, r4
   219a8:	mov	r0, r5
   219ac:	blx	r6
   219b0:	cmp	r0, #0
   219b4:	bne	219e4 <__assert_fail@plt+0xfe40>
   219b8:	ldr	r3, [r4, #4]
   219bc:	cmp	r3, #0
   219c0:	bne	219a0 <__assert_fail@plt+0xfdfc>
   219c4:	ldr	r2, [r4, #8]
   219c8:	cmp	r2, #0
   219cc:	cmpne	r2, r3
   219d0:	mov	r3, r4
   219d4:	bne	219f4 <__assert_fail@plt+0xfe50>
   219d8:	ldr	r2, [r4]
   219dc:	subs	r4, r2, #0
   219e0:	bne	219c4 <__assert_fail@plt+0xfe20>
   219e4:	ldrd	r4, [sp]
   219e8:	ldr	r6, [sp, #8]
   219ec:	add	sp, sp, #12
   219f0:	pop	{pc}		; (ldr pc, [sp], #4)
   219f4:	mov	r3, r2
   219f8:	b	219a0 <__assert_fail@plt+0xfdfc>
   219fc:	ldr	ip, [r1, #4]
   21a00:	cmp	ip, #0
   21a04:	beq	21b9c <__assert_fail@plt+0xfff8>
   21a08:	strd	r4, [sp, #-32]!	; 0xffffffe0
   21a0c:	strd	r6, [sp, #8]
   21a10:	str	lr, [sp, #28]
   21a14:	ldr	lr, [r2, #4]
   21a18:	strd	r8, [sp, #16]
   21a1c:	str	sl, [sp, #24]
   21a20:	cmp	lr, #0
   21a24:	beq	21b24 <__assert_fail@plt+0xff80>
   21a28:	ldr	r4, [r0]
   21a2c:	mov	r9, r2
   21a30:	add	r2, ip, lr
   21a34:	mov	r8, r1
   21a38:	mov	r7, r0
   21a3c:	ldmib	r0, {r3, sl}
   21a40:	add	r1, r2, r3
   21a44:	cmp	r1, r4
   21a48:	bgt	21bac <__assert_fail@plt+0x10008>
   21a4c:	ldr	r0, [r8, #8]
   21a50:	add	r1, r3, ip
   21a54:	sub	r5, ip, #1
   21a58:	sub	r6, lr, #1
   21a5c:	add	r1, r1, lr
   21a60:	ldr	r2, [r9, #8]
   21a64:	sub	r3, r3, #1
   21a68:	ldr	ip, [r0, r5, lsl #2]
   21a6c:	ldr	lr, [r2, r6, lsl #2]
   21a70:	cmp	ip, lr
   21a74:	beq	21a90 <__assert_fail@plt+0xfeec>
   21a78:	bge	21b44 <__assert_fail@plt+0xffa0>
   21a7c:	subs	r6, r6, #1
   21a80:	bmi	21ae0 <__assert_fail@plt+0xff3c>
   21a84:	ldr	lr, [r2, r6, lsl #2]
   21a88:	cmp	ip, lr
   21a8c:	bne	21a78 <__assert_fail@plt+0xfed4>
   21a90:	cmp	r3, #0
   21a94:	blt	21ac0 <__assert_fail@plt+0xff1c>
   21a98:	ldr	r4, [sl, r3, lsl #2]
   21a9c:	add	lr, sl, r3, lsl #2
   21aa0:	cmp	r4, ip
   21aa4:	bgt	21ab8 <__assert_fail@plt+0xff14>
   21aa8:	b	21b54 <__assert_fail@plt+0xffb0>
   21aac:	ldr	r4, [lr, #-4]!
   21ab0:	cmp	r4, ip
   21ab4:	ble	21b54 <__assert_fail@plt+0xffb0>
   21ab8:	subs	r3, r3, #1
   21abc:	bcs	21aac <__assert_fail@plt+0xff08>
   21ac0:	sub	r1, r1, #1
   21ac4:	str	ip, [sl, r1, lsl #2]
   21ac8:	subs	r5, r5, #1
   21acc:	bmi	21ae0 <__assert_fail@plt+0xff3c>
   21ad0:	subs	r6, r6, #1
   21ad4:	bmi	21ae0 <__assert_fail@plt+0xff3c>
   21ad8:	ldr	ip, [r0, r5, lsl #2]
   21adc:	b	21a84 <__assert_fail@plt+0xfee0>
   21ae0:	ldr	ip, [r7, #4]
   21ae4:	ldr	r0, [r8, #4]
   21ae8:	ldr	r2, [r9, #4]
   21aec:	sub	r3, ip, #1
   21af0:	add	r0, ip, r0
   21af4:	add	r0, r0, r2
   21af8:	sub	r2, r0, r1
   21afc:	sub	r0, r0, #1
   21b00:	add	ip, ip, r2
   21b04:	cmp	r3, #0
   21b08:	cmpge	r2, #0
   21b0c:	str	ip, [r7, #4]
   21b10:	bgt	21b70 <__assert_fail@plt+0xffcc>
   21b14:	lsl	r2, r2, #2
   21b18:	add	r1, sl, r1, lsl #2
   21b1c:	mov	r0, sl
   21b20:	bl	11784 <memcpy@plt>
   21b24:	mov	ip, #0
   21b28:	ldrd	r4, [sp]
   21b2c:	mov	r0, ip
   21b30:	ldrd	r6, [sp, #8]
   21b34:	ldrd	r8, [sp, #16]
   21b38:	ldr	sl, [sp, #24]
   21b3c:	add	sp, sp, #28
   21b40:	pop	{pc}		; (ldr pc, [sp], #4)
   21b44:	subs	r5, r5, #1
   21b48:	bmi	21ae0 <__assert_fail@plt+0xff3c>
   21b4c:	ldr	ip, [r0, r5, lsl #2]
   21b50:	b	21a70 <__assert_fail@plt+0xfecc>
   21b54:	cmp	r4, ip
   21b58:	bne	21ac0 <__assert_fail@plt+0xff1c>
   21b5c:	b	21ac8 <__assert_fail@plt+0xff24>
   21b60:	sub	r3, r3, #1
   21b64:	str	ip, [sl, r4, lsl #2]
   21b68:	cmn	r3, #1
   21b6c:	beq	21ba4 <__assert_fail@plt+0x10000>
   21b70:	ldr	lr, [sl, r0, lsl #2]
   21b74:	add	r4, r3, r2
   21b78:	ldr	ip, [sl, r3, lsl #2]
   21b7c:	cmp	lr, ip
   21b80:	ble	21b60 <__assert_fail@plt+0xffbc>
   21b84:	subs	r2, r2, #1
   21b88:	sub	r0, r0, #1
   21b8c:	str	lr, [sl, r4, lsl #2]
   21b90:	bne	21b70 <__assert_fail@plt+0xffcc>
   21b94:	ldr	sl, [r7, #8]
   21b98:	b	21b18 <__assert_fail@plt+0xff74>
   21b9c:	mov	r0, ip
   21ba0:	bx	lr
   21ba4:	ldr	sl, [r7, #8]
   21ba8:	b	21b14 <__assert_fail@plt+0xff70>
   21bac:	add	r4, r2, r4
   21bb0:	mov	r0, sl
   21bb4:	lsl	r1, r4, #2
   21bb8:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   21bbc:	subs	sl, r0, #0
   21bc0:	beq	21bdc <__assert_fail@plt+0x10038>
   21bc4:	ldr	ip, [r8, #4]
   21bc8:	ldr	lr, [r9, #4]
   21bcc:	str	r4, [r7]
   21bd0:	str	sl, [r7, #8]
   21bd4:	ldr	r3, [r7, #4]
   21bd8:	b	21a4c <__assert_fail@plt+0xfea8>
   21bdc:	mov	ip, #12
   21be0:	b	21b28 <__assert_fail@plt+0xff84>
   21be4:	strd	r4, [sp, #-20]!	; 0xffffffec
   21be8:	mov	r5, r0
   21bec:	ldr	r0, [r1]
   21bf0:	strd	r6, [sp, #8]
   21bf4:	str	lr, [sp, #16]
   21bf8:	sub	sp, sp, #20
   21bfc:	cmp	r0, #31
   21c00:	beq	21c80 <__assert_fail@plt+0x100dc>
   21c04:	lsl	ip, r0, #5
   21c08:	add	r4, r0, #1
   21c0c:	ldr	r0, [r5]
   21c10:	add	r7, ip, #4
   21c14:	str	r4, [r1]
   21c18:	add	lr, r0, ip
   21c1c:	mov	r6, #0
   21c20:	ldr	r1, [sp, #40]	; 0x28
   21c24:	add	ip, ip, #16
   21c28:	cmp	r2, r6
   21c2c:	str	r6, [lr, #4]
   21c30:	add	ip, r0, ip
   21c34:	add	r0, r0, r7
   21c38:	strd	r2, [lr, #8]
   21c3c:	mvn	r7, #0
   21c40:	ldrd	r4, [r1]
   21c44:	strd	r4, [lr, #24]
   21c48:	ldrb	r1, [ip, #14]
   21c4c:	bic	r1, r1, #12
   21c50:	strb	r1, [ip, #14]
   21c54:	str	r6, [lr, #16]
   21c58:	str	r6, [lr, #20]
   21c5c:	str	r7, [lr, #32]
   21c60:	strne	r0, [r2]
   21c64:	cmp	r3, #0
   21c68:	strne	r0, [r3]
   21c6c:	add	sp, sp, #20
   21c70:	ldrd	r4, [sp]
   21c74:	ldrd	r6, [sp, #8]
   21c78:	add	sp, sp, #16
   21c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   21c80:	mov	r0, #996	; 0x3e4
   21c84:	stmib	sp, {r1, r2, r3}
   21c88:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   21c8c:	cmp	r0, #0
   21c90:	beq	21c6c <__assert_fail@plt+0x100c8>
   21c94:	ldr	lr, [r5]
   21c98:	mov	r7, #4
   21c9c:	mov	r4, #1
   21ca0:	mov	ip, #0
   21ca4:	str	r0, [r5]
   21ca8:	ldmib	sp, {r1, r2, r3}
   21cac:	str	lr, [r0]
   21cb0:	b	21c14 <__assert_fail@plt+0x10070>
   21cb4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21cb8:	mov	r4, r0
   21cbc:	ldr	r5, [r0]
   21cc0:	strd	r6, [sp, #8]
   21cc4:	add	r7, r1, #56	; 0x38
   21cc8:	add	r6, r1, #64	; 0x40
   21ccc:	str	r8, [sp, #16]
   21cd0:	str	lr, [sp, #20]
   21cd4:	sub	sp, sp, #16
   21cd8:	add	r8, sp, #12
   21cdc:	b	21ce8 <__assert_fail@plt+0x10144>
   21ce0:	mov	r4, r3
   21ce4:	add	r8, r5, #4
   21ce8:	add	ip, r4, #20
   21cec:	mov	r3, #0
   21cf0:	mov	r2, r3
   21cf4:	mov	r1, r6
   21cf8:	mov	r0, r7
   21cfc:	str	ip, [sp]
   21d00:	bl	21be4 <__assert_fail@plt+0x10040>
   21d04:	cmp	r0, #0
   21d08:	str	r0, [r8]
   21d0c:	beq	21d58 <__assert_fail@plt+0x101b4>
   21d10:	str	r5, [r0]
   21d14:	ldr	r5, [r8]
   21d18:	ldrb	r3, [r5, #26]
   21d1c:	orr	r3, r3, #4
   21d20:	strb	r3, [r5, #26]
   21d24:	ldr	r3, [r4, #4]
   21d28:	cmp	r3, #0
   21d2c:	bne	21ce0 <__assert_fail@plt+0x1013c>
   21d30:	ldr	r2, [r4, #8]
   21d34:	cmp	r2, r3
   21d38:	cmpne	r2, #0
   21d3c:	mov	r3, r4
   21d40:	bne	21d70 <__assert_fail@plt+0x101cc>
   21d44:	ldr	r2, [r4]
   21d48:	ldr	r5, [r5]
   21d4c:	subs	r4, r2, #0
   21d50:	bne	21d30 <__assert_fail@plt+0x1018c>
   21d54:	ldr	r0, [sp, #12]
   21d58:	add	sp, sp, #16
   21d5c:	ldrd	r4, [sp]
   21d60:	ldrd	r6, [sp, #8]
   21d64:	ldr	r8, [sp, #16]
   21d68:	add	sp, sp, #20
   21d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   21d70:	mov	r4, r2
   21d74:	add	r8, r5, #8
   21d78:	b	21ce8 <__assert_fail@plt+0x10144>
   21d7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21d80:	ldr	r4, [r1]
   21d84:	ldr	r5, [r2, #4]
   21d88:	strd	r6, [sp, #8]
   21d8c:	ldrb	r7, [r1, #28]
   21d90:	strd	r8, [sp, #16]
   21d94:	mov	r8, r2
   21d98:	strd	sl, [sp, #24]
   21d9c:	str	lr, [sp, #32]
   21da0:	sub	sp, sp, #28
   21da4:	ands	r7, r7, #16
   21da8:	str	r0, [sp, #12]
   21dac:	beq	21f78 <__assert_fail@plt+0x103d4>
   21db0:	cmp	r5, #0
   21db4:	beq	21f08 <__assert_fail@plt+0x10364>
   21db8:	ldr	r3, [r2, #20]
   21dbc:	cmp	r3, #31
   21dc0:	bgt	21ee8 <__assert_fail@plt+0x10344>
   21dc4:	ldr	r2, [r4, #80]	; 0x50
   21dc8:	lsr	r3, r2, r3
   21dcc:	tst	r3, #1
   21dd0:	beq	21ee8 <__assert_fail@plt+0x10344>
   21dd4:	add	r7, sp, #16
   21dd8:	mov	ip, #8
   21ddc:	add	r9, r4, #56	; 0x38
   21de0:	mov	r3, #0
   21de4:	add	r4, r4, #64	; 0x40
   21de8:	mov	sl, #0
   21dec:	str	r7, [sp]
   21df0:	mov	fp, #0
   21df4:	mov	r2, r3
   21df8:	str	r7, [sp, #8]
   21dfc:	mov	r1, r4
   21e00:	mov	r0, r9
   21e04:	strd	sl, [sp, #16]
   21e08:	strb	ip, [sp, #20]
   21e0c:	bl	21be4 <__assert_fail@plt+0x10040>
   21e10:	mov	ip, #9
   21e14:	mov	r3, #0
   21e18:	str	r7, [sp]
   21e1c:	mov	r6, r0
   21e20:	mov	r1, r4
   21e24:	strd	sl, [sp, #16]
   21e28:	mov	r0, r9
   21e2c:	mov	r2, r3
   21e30:	strb	ip, [sp, #20]
   21e34:	bl	21be4 <__assert_fail@plt+0x10040>
   21e38:	mov	r7, r0
   21e3c:	ldr	r3, [sp, #8]
   21e40:	mov	r0, #0
   21e44:	mov	r1, #0
   21e48:	mov	ip, #16
   21e4c:	mov	r2, r5
   21e50:	str	r3, [sp]
   21e54:	mov	r3, r7
   21e58:	strd	r0, [sp, #16]
   21e5c:	mov	r1, r4
   21e60:	mov	r0, r9
   21e64:	strb	ip, [sp, #20]
   21e68:	bl	21be4 <__assert_fail@plt+0x10040>
   21e6c:	mov	fp, r0
   21e70:	ldr	r0, [sp, #8]
   21e74:	mov	r2, #0
   21e78:	mov	r3, #0
   21e7c:	mov	ip, #16
   21e80:	mov	r1, r4
   21e84:	str	r0, [sp]
   21e88:	mov	r0, r9
   21e8c:	strd	r2, [sp, #16]
   21e90:	mov	r3, fp
   21e94:	mov	r2, r6
   21e98:	strb	ip, [sp, #20]
   21e9c:	bl	21be4 <__assert_fail@plt+0x10040>
   21ea0:	cmp	fp, #0
   21ea4:	cmpne	r0, #0
   21ea8:	mov	r5, r0
   21eac:	beq	21ff4 <__assert_fail@plt+0x10450>
   21eb0:	cmp	r7, #0
   21eb4:	cmpne	r6, #0
   21eb8:	beq	21ff4 <__assert_fail@plt+0x10450>
   21ebc:	ldr	r2, [r8, #20]
   21ec0:	ldrb	r3, [r8, #26]
   21ec4:	str	r2, [r7, #20]
   21ec8:	str	r2, [r6, #20]
   21ecc:	ldrb	r2, [r7, #26]
   21ed0:	ubfx	r3, r3, #3, #1
   21ed4:	bfi	r2, r3, #3, #1
   21ed8:	strb	r2, [r7, #26]
   21edc:	ldrb	r2, [r6, #26]
   21ee0:	bfi	r2, r3, #3, #1
   21ee4:	strb	r2, [r6, #26]
   21ee8:	mov	r0, r5
   21eec:	add	sp, sp, #28
   21ef0:	ldrd	r4, [sp]
   21ef4:	ldrd	r6, [sp, #8]
   21ef8:	ldrd	r8, [sp, #16]
   21efc:	ldrd	sl, [sp, #24]
   21f00:	add	sp, sp, #32
   21f04:	pop	{pc}		; (ldr pc, [sp], #4)
   21f08:	add	r7, sp, #16
   21f0c:	mov	ip, #8
   21f10:	add	r9, r4, #56	; 0x38
   21f14:	mov	fp, #0
   21f18:	add	r4, r4, #64	; 0x40
   21f1c:	mov	sl, #0
   21f20:	str	r7, [sp]
   21f24:	mov	r1, r4
   21f28:	mov	r3, r5
   21f2c:	str	r7, [sp, #8]
   21f30:	mov	r2, r5
   21f34:	mov	r0, r9
   21f38:	strd	sl, [sp, #16]
   21f3c:	strb	ip, [sp, #20]
   21f40:	bl	21be4 <__assert_fail@plt+0x10040>
   21f44:	mov	ip, #9
   21f48:	mov	r6, r0
   21f4c:	str	r7, [sp]
   21f50:	mov	r1, r4
   21f54:	mov	r0, r9
   21f58:	strd	sl, [sp, #16]
   21f5c:	mov	r3, r5
   21f60:	mov	r2, r5
   21f64:	strb	ip, [sp, #20]
   21f68:	bl	21be4 <__assert_fail@plt+0x10040>
   21f6c:	mov	fp, r0
   21f70:	mov	r7, r0
   21f74:	b	21e70 <__assert_fail@plt+0x102cc>
   21f78:	add	r3, sp, #16
   21f7c:	mov	ip, #8
   21f80:	add	r9, r4, #56	; 0x38
   21f84:	mov	fp, #0
   21f88:	add	r4, r4, #64	; 0x40
   21f8c:	mov	sl, #0
   21f90:	str	r3, [sp]
   21f94:	mov	r2, r7
   21f98:	mov	r1, r4
   21f9c:	str	r3, [sp, #8]
   21fa0:	mov	r0, r9
   21fa4:	mov	r3, r7
   21fa8:	strd	sl, [sp, #16]
   21fac:	strb	ip, [sp, #20]
   21fb0:	bl	21be4 <__assert_fail@plt+0x10040>
   21fb4:	ldr	r3, [sp, #8]
   21fb8:	mov	ip, #9
   21fbc:	mov	r2, r7
   21fc0:	mov	r6, r0
   21fc4:	mov	r1, r4
   21fc8:	mov	r0, r9
   21fcc:	str	r3, [sp]
   21fd0:	mov	r3, r7
   21fd4:	strd	sl, [sp, #16]
   21fd8:	strb	ip, [sp, #20]
   21fdc:	bl	21be4 <__assert_fail@plt+0x10040>
   21fe0:	cmp	r5, #0
   21fe4:	mov	r7, r0
   21fe8:	moveq	fp, r0
   21fec:	bne	21e3c <__assert_fail@plt+0x10298>
   21ff0:	b	21e70 <__assert_fail@plt+0x102cc>
   21ff4:	ldr	r2, [sp, #12]
   21ff8:	mov	r3, #12
   21ffc:	mov	r5, #0
   22000:	str	r3, [r2]
   22004:	b	21ee8 <__assert_fail@plt+0x10344>
   22008:	ldr	r2, [r1, #4]
   2200c:	mov	r3, #0
   22010:	strd	r4, [sp, #-12]!
   22014:	mov	r4, r1
   22018:	mov	r5, r0
   2201c:	str	lr, [sp, #8]
   22020:	sub	sp, sp, #12
   22024:	str	r3, [sp, #4]
   22028:	cmp	r2, r3
   2202c:	beq	2203c <__assert_fail@plt+0x10498>
   22030:	ldrb	r3, [r2, #24]
   22034:	cmp	r3, #17
   22038:	beq	22068 <__assert_fail@plt+0x104c4>
   2203c:	ldr	r2, [r4, #8]
   22040:	cmp	r2, #0
   22044:	beq	22054 <__assert_fail@plt+0x104b0>
   22048:	ldrb	r3, [r2, #24]
   2204c:	cmp	r3, #17
   22050:	beq	22084 <__assert_fail@plt+0x104e0>
   22054:	ldr	r0, [sp, #4]
   22058:	add	sp, sp, #12
   2205c:	ldrd	r4, [sp]
   22060:	add	sp, sp, #8
   22064:	pop	{pc}		; (ldr pc, [sp], #4)
   22068:	mov	r1, r0
   2206c:	add	r0, sp, #4
   22070:	bl	21d7c <__assert_fail@plt+0x101d8>
   22074:	cmp	r0, #0
   22078:	str	r0, [r4, #4]
   2207c:	strne	r4, [r0]
   22080:	b	2203c <__assert_fail@plt+0x10498>
   22084:	mov	r1, r5
   22088:	add	r0, sp, #4
   2208c:	bl	21d7c <__assert_fail@plt+0x101d8>
   22090:	cmp	r0, #0
   22094:	str	r0, [r4, #8]
   22098:	strne	r4, [r0]
   2209c:	b	22054 <__assert_fail@plt+0x104b0>
   220a0:	ldr	r3, [r1, #4]
   220a4:	cmp	r3, #0
   220a8:	str	r3, [r0, #4]
   220ac:	ble	22110 <__assert_fail@plt+0x1056c>
   220b0:	strd	r4, [sp, #-16]!
   220b4:	mov	r4, r0
   220b8:	lsl	r0, r3, #2
   220bc:	str	r6, [sp, #8]
   220c0:	mov	r5, r1
   220c4:	str	lr, [sp, #12]
   220c8:	str	r3, [r4]
   220cc:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   220d0:	cmp	r0, #0
   220d4:	str	r0, [r4, #8]
   220d8:	moveq	r2, #12
   220dc:	streq	r0, [r4]
   220e0:	streq	r0, [r4, #4]
   220e4:	beq	220fc <__assert_fail@plt+0x10558>
   220e8:	ldr	r2, [r5, #4]
   220ec:	ldr	r1, [r5, #8]
   220f0:	lsl	r2, r2, #2
   220f4:	bl	11784 <memcpy@plt>
   220f8:	mov	r2, #0
   220fc:	ldrd	r4, [sp]
   22100:	mov	r0, r2
   22104:	ldr	r6, [sp, #8]
   22108:	add	sp, sp, #12
   2210c:	pop	{pc}		; (ldr pc, [sp], #4)
   22110:	mov	r3, #0
   22114:	str	r3, [r0]
   22118:	str	r3, [r0, #4]
   2211c:	str	r3, [r0, #8]
   22120:	mov	r0, r3
   22124:	bx	lr
   22128:	cmp	r1, #0
   2212c:	beq	22148 <__assert_fail@plt+0x105a4>
   22130:	ldr	r3, [r1, #4]
   22134:	cmp	r2, #0
   22138:	cmpne	r3, #0
   2213c:	bgt	22174 <__assert_fail@plt+0x105d0>
   22140:	cmp	r3, #0
   22144:	bgt	22250 <__assert_fail@plt+0x106ac>
   22148:	cmp	r2, #0
   2214c:	beq	2215c <__assert_fail@plt+0x105b8>
   22150:	ldr	r3, [r2, #4]
   22154:	cmp	r3, #0
   22158:	bgt	2224c <__assert_fail@plt+0x106a8>
   2215c:	mov	r3, #0
   22160:	str	r3, [r0]
   22164:	str	r3, [r0, #4]
   22168:	str	r3, [r0, #8]
   2216c:	mov	r0, r3
   22170:	bx	lr
   22174:	ldr	ip, [r2, #4]
   22178:	cmp	ip, #0
   2217c:	ble	22250 <__assert_fail@plt+0x106ac>
   22180:	add	r3, r3, ip
   22184:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22188:	mov	r4, r2
   2218c:	strd	r6, [sp, #8]
   22190:	mov	r6, r0
   22194:	lsl	r0, r3, #2
   22198:	strd	r8, [sp, #16]
   2219c:	mov	r5, r1
   221a0:	str	sl, [sp, #24]
   221a4:	str	lr, [sp, #28]
   221a8:	str	r3, [r6]
   221ac:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   221b0:	cmp	r0, #0
   221b4:	str	r0, [r6, #8]
   221b8:	beq	2228c <__assert_fail@plt+0x106e8>
   221bc:	mov	r7, #0
   221c0:	mov	lr, r0
   221c4:	ldr	r9, [r4, #4]
   221c8:	mov	ip, r7
   221cc:	mov	r3, r7
   221d0:	ldr	r8, [r5, #4]
   221d4:	b	22218 <__assert_fail@plt+0x10674>
   221d8:	ldr	r2, [r5, #8]
   221dc:	cmp	ip, r9
   221e0:	add	r1, r2, r3, lsl #2
   221e4:	bge	22274 <__assert_fail@plt+0x106d0>
   221e8:	ldr	r1, [r4, #8]
   221ec:	add	r7, r7, #1
   221f0:	ldr	r2, [r2, r3, lsl #2]
   221f4:	ldr	r1, [r1, ip, lsl #2]
   221f8:	cmp	r2, r1
   221fc:	addgt	ip, ip, #1
   22200:	strgt	r1, [lr]
   22204:	bgt	22214 <__assert_fail@plt+0x10670>
   22208:	add	r3, r3, #1
   2220c:	addeq	ip, ip, #1
   22210:	str	r2, [lr]
   22214:	add	lr, lr, #4
   22218:	cmp	r8, r3
   2221c:	bgt	221d8 <__assert_fail@plt+0x10634>
   22220:	cmp	ip, r9
   22224:	blt	22254 <__assert_fail@plt+0x106b0>
   22228:	mov	r2, #0
   2222c:	str	r7, [r6, #4]
   22230:	ldrd	r4, [sp]
   22234:	mov	r0, r2
   22238:	ldrd	r6, [sp, #8]
   2223c:	ldrd	r8, [sp, #16]
   22240:	ldr	sl, [sp, #24]
   22244:	add	sp, sp, #28
   22248:	pop	{pc}		; (ldr pc, [sp], #4)
   2224c:	mov	r1, r2
   22250:	b	220a0 <__assert_fail@plt+0x104fc>
   22254:	ldr	r1, [r4, #8]
   22258:	sub	r2, r9, ip
   2225c:	add	r0, r0, r7, lsl #2
   22260:	add	r7, r7, r2
   22264:	lsl	r2, r2, #2
   22268:	add	r1, r1, ip, lsl #2
   2226c:	bl	11784 <memcpy@plt>
   22270:	b	22228 <__assert_fail@plt+0x10684>
   22274:	sub	r3, r8, r3
   22278:	mov	r0, lr
   2227c:	lsl	r2, r3, #2
   22280:	add	r7, r7, r3
   22284:	bl	11784 <memcpy@plt>
   22288:	b	22228 <__assert_fail@plt+0x10684>
   2228c:	mov	r2, #12
   22290:	b	22230 <__assert_fail@plt+0x1068c>
   22294:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22298:	mov	ip, #0
   2229c:	ldr	r4, [r2, #4]
   222a0:	strd	r6, [sp, #8]
   222a4:	strd	r8, [sp, #16]
   222a8:	strd	sl, [sp, #24]
   222ac:	str	lr, [sp, #32]
   222b0:	sub	sp, sp, #28
   222b4:	cmp	r4, ip
   222b8:	str	ip, [r0]
   222bc:	beq	22364 <__assert_fail@plt+0x107c0>
   222c0:	add	r7, r3, r4
   222c4:	ble	222e0 <__assert_fail@plt+0x1073c>
   222c8:	ldr	ip, [r2, #8]
   222cc:	add	r4, ip, r4, lsl #2
   222d0:	ldr	lr, [ip], #4
   222d4:	cmp	r4, ip
   222d8:	add	r7, r7, lr
   222dc:	bne	222d0 <__assert_fail@plt+0x1072c>
   222e0:	mov	sl, r3
   222e4:	ldr	r3, [r1, #68]	; 0x44
   222e8:	mov	r8, r2
   222ec:	mov	r9, r1
   222f0:	str	r0, [sp, #20]
   222f4:	ldr	r2, [r1, #32]
   222f8:	and	r3, r3, r7
   222fc:	add	r3, r3, r3, lsl #1
   22300:	lsl	r3, r3, #2
   22304:	ldr	fp, [r2, r3]
   22308:	add	r3, r2, r3
   2230c:	cmp	fp, #0
   22310:	ble	22384 <__assert_fail@plt+0x107e0>
   22314:	ldr	r6, [r3, #8]
   22318:	mov	r5, #0
   2231c:	sub	r6, r6, #4
   22320:	b	2232c <__assert_fail@plt+0x10788>
   22324:	cmp	r5, fp
   22328:	beq	22384 <__assert_fail@plt+0x107e0>
   2232c:	ldr	r4, [r6, #4]!
   22330:	add	r5, r5, #1
   22334:	ldr	r3, [r4]
   22338:	cmp	r3, r7
   2233c:	bne	22324 <__assert_fail@plt+0x10780>
   22340:	ldrb	r3, [r4, #52]	; 0x34
   22344:	and	r3, r3, #15
   22348:	cmp	r3, sl
   2234c:	bne	22324 <__assert_fail@plt+0x10780>
   22350:	mov	r1, r8
   22354:	ldr	r0, [r4, #40]	; 0x28
   22358:	bl	1f778 <__assert_fail@plt+0xdbd4>
   2235c:	cmp	r0, #0
   22360:	beq	22324 <__assert_fail@plt+0x10780>
   22364:	mov	r0, r4
   22368:	add	sp, sp, #28
   2236c:	ldrd	r4, [sp]
   22370:	ldrd	r6, [sp, #8]
   22374:	ldrd	r8, [sp, #16]
   22378:	ldrd	sl, [sp, #24]
   2237c:	add	sp, sp, #32
   22380:	pop	{pc}		; (ldr pc, [sp], #4)
   22384:	mov	r1, #1
   22388:	mov	r0, #56	; 0x38
   2238c:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   22390:	subs	r4, r0, #0
   22394:	beq	2250c <__assert_fail@plt+0x10968>
   22398:	add	fp, r4, #4
   2239c:	mov	r1, r8
   223a0:	mov	r0, fp
   223a4:	bl	220a0 <__assert_fail@plt+0x104fc>
   223a8:	subs	r3, r0, #0
   223ac:	bne	22570 <__assert_fail@plt+0x109cc>
   223b0:	ldrb	r2, [r4, #52]	; 0x34
   223b4:	str	fp, [r4, #40]	; 0x28
   223b8:	ldr	lr, [r8, #4]
   223bc:	bfi	r2, sl, #0, #4
   223c0:	cmp	lr, #0
   223c4:	strb	r2, [r4, #52]	; 0x34
   223c8:	ble	224ec <__assert_fail@plt+0x10948>
   223cc:	add	r2, r4, #12
   223d0:	mov	r6, r3
   223d4:	str	r2, [sp, #4]
   223d8:	add	r2, r4, #8
   223dc:	str	r2, [sp, #8]
   223e0:	and	r2, sl, #4
   223e4:	str	r7, [sp, #16]
   223e8:	mov	r7, r3
   223ec:	str	r2, [sp, #12]
   223f0:	ldr	r1, [r8, #8]
   223f4:	ldr	r2, [r9]
   223f8:	ldr	r1, [r1, r6, lsl #2]
   223fc:	add	r2, r2, r1, lsl #3
   22400:	ldr	r5, [r2, #4]
   22404:	ldrb	r1, [r2, #4]
   22408:	ubfx	r5, r5, #8, #10
   2240c:	cmp	r1, #1
   22410:	cmpeq	r5, #0
   22414:	beq	224dc <__assert_fail@plt+0x10938>
   22418:	ldrb	ip, [r2, #6]
   2241c:	cmp	r1, #2
   22420:	ldrb	r2, [r4, #52]	; 0x34
   22424:	ubfx	ip, ip, #4, #1
   22428:	ubfx	r0, r2, #5, #1
   2242c:	orr	r0, r0, ip
   22430:	bfi	r2, r0, #5, #1
   22434:	strb	r2, [r4, #52]	; 0x34
   22438:	uxtbeq	r2, r2
   2243c:	orreq	r2, r2, #16
   22440:	strbeq	r2, [r4, #52]	; 0x34
   22444:	beq	2245c <__assert_fail@plt+0x108b8>
   22448:	cmp	r1, #4
   2244c:	bne	2245c <__assert_fail@plt+0x108b8>
   22450:	ldrb	r2, [r4, #52]	; 0x34
   22454:	orr	r2, r2, #64	; 0x40
   22458:	strb	r2, [r4, #52]	; 0x34
   2245c:	cmp	r5, #0
   22460:	beq	224dc <__assert_fail@plt+0x10938>
   22464:	ldr	r2, [r4, #40]	; 0x28
   22468:	cmp	fp, r2
   2246c:	beq	2253c <__assert_fail@plt+0x10998>
   22470:	tst	r5, #1
   22474:	beq	22528 <__assert_fail@plt+0x10984>
   22478:	tst	sl, #1
   2247c:	beq	224ac <__assert_fail@plt+0x10908>
   22480:	tst	r5, #2
   22484:	bne	224ac <__assert_fail@plt+0x10908>
   22488:	tst	r5, #16
   2248c:	beq	22498 <__assert_fail@plt+0x108f4>
   22490:	tst	sl, #2
   22494:	beq	224ac <__assert_fail@plt+0x10908>
   22498:	tst	r5, #64	; 0x40
   2249c:	beq	22520 <__assert_fail@plt+0x1097c>
   224a0:	ldr	r3, [sp, #12]
   224a4:	cmp	r3, #0
   224a8:	bne	22520 <__assert_fail@plt+0x1097c>
   224ac:	subs	r2, r6, r7
   224b0:	bmi	224d4 <__assert_fail@plt+0x10930>
   224b4:	ldr	r1, [r4, #8]
   224b8:	cmp	r2, r1
   224bc:	bge	224d4 <__assert_fail@plt+0x10930>
   224c0:	sub	ip, r1, #1
   224c4:	ldr	r1, [sp, #4]
   224c8:	str	ip, [r4, #8]
   224cc:	ldr	r0, [sp, #8]
   224d0:	bl	21618 <__assert_fail@plt+0xfa74>
   224d4:	ldr	lr, [r8, #4]
   224d8:	add	r7, r7, #1
   224dc:	add	r6, r6, #1
   224e0:	cmp	r6, lr
   224e4:	blt	223f0 <__assert_fail@plt+0x1084c>
   224e8:	ldr	r7, [sp, #16]
   224ec:	mov	r2, r7
   224f0:	mov	r0, r9
   224f4:	mov	r1, r4
   224f8:	bl	1fe04 <__assert_fail@plt+0xe260>
   224fc:	cmp	r0, #0
   22500:	beq	22364 <__assert_fail@plt+0x107c0>
   22504:	mov	r0, r4
   22508:	bl	20b4c <__assert_fail@plt+0xefa8>
   2250c:	ldr	r2, [sp, #20]
   22510:	mov	r3, #12
   22514:	mov	r4, #0
   22518:	str	r3, [r2]
   2251c:	b	22364 <__assert_fail@plt+0x107c0>
   22520:	ldr	lr, [r8, #4]
   22524:	b	224dc <__assert_fail@plt+0x10938>
   22528:	tst	r5, #2
   2252c:	beq	22488 <__assert_fail@plt+0x108e4>
   22530:	tst	sl, #1
   22534:	beq	22488 <__assert_fail@plt+0x108e4>
   22538:	b	224ac <__assert_fail@plt+0x10908>
   2253c:	mov	r0, #12
   22540:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   22544:	subs	r3, r0, #0
   22548:	beq	22504 <__assert_fail@plt+0x10960>
   2254c:	mov	r1, r8
   22550:	str	r3, [r4, #40]	; 0x28
   22554:	bl	220a0 <__assert_fail@plt+0x104fc>
   22558:	subs	r7, r0, #0
   2255c:	bne	22504 <__assert_fail@plt+0x10960>
   22560:	ldrb	r2, [r4, #52]	; 0x34
   22564:	orr	r2, r2, #128	; 0x80
   22568:	strb	r2, [r4, #52]	; 0x34
   2256c:	b	22470 <__assert_fail@plt+0x108cc>
   22570:	mov	r0, r4
   22574:	bl	17ac8 <__assert_fail@plt+0x5f24>
   22578:	b	2250c <__assert_fail@plt+0x10968>
   2257c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22580:	mov	r3, #0
   22584:	strd	r6, [sp, #8]
   22588:	ldr	r6, [r2, #4]
   2258c:	strd	r8, [sp, #16]
   22590:	strd	sl, [sp, #24]
   22594:	str	lr, [sp, #32]
   22598:	sub	sp, sp, #4
   2259c:	str	r3, [r0]
   225a0:	cmp	r6, r3
   225a4:	beq	2278c <__assert_fail@plt+0x10be8>
   225a8:	ble	225c4 <__assert_fail@plt+0x10a20>
   225ac:	ldr	r3, [r2, #8]
   225b0:	add	lr, r3, r6, lsl #2
   225b4:	ldr	ip, [r3], #4
   225b8:	cmp	lr, r3
   225bc:	add	r6, r6, ip
   225c0:	bne	225b4 <__assert_fail@plt+0x10a10>
   225c4:	ldr	r3, [r1, #68]	; 0x44
   225c8:	mov	sl, r2
   225cc:	mov	r8, r1
   225d0:	mov	r9, r0
   225d4:	ldr	r2, [r1, #32]
   225d8:	and	r3, r3, r6
   225dc:	add	r3, r3, r3, lsl #1
   225e0:	lsl	r3, r3, #2
   225e4:	ldr	fp, [r2, r3]
   225e8:	add	r3, r2, r3
   225ec:	cmp	fp, #0
   225f0:	ble	22630 <__assert_fail@plt+0x10a8c>
   225f4:	ldr	r7, [r3, #8]
   225f8:	mov	r5, #0
   225fc:	sub	r7, r7, #4
   22600:	ldr	r4, [r7, #4]!
   22604:	mov	r1, sl
   22608:	add	r5, r5, #1
   2260c:	ldr	r3, [r4]
   22610:	add	r0, r4, #4
   22614:	cmp	r3, r6
   22618:	bne	22628 <__assert_fail@plt+0x10a84>
   2261c:	bl	1f778 <__assert_fail@plt+0xdbd4>
   22620:	cmp	r0, #0
   22624:	bne	2272c <__assert_fail@plt+0x10b88>
   22628:	cmp	fp, r5
   2262c:	bne	22600 <__assert_fail@plt+0x10a5c>
   22630:	mov	r1, #1
   22634:	mov	r0, #56	; 0x38
   22638:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   2263c:	subs	r4, r0, #0
   22640:	beq	2277c <__assert_fail@plt+0x10bd8>
   22644:	add	r7, r4, #4
   22648:	mov	r1, sl
   2264c:	mov	r0, r7
   22650:	bl	220a0 <__assert_fail@plt+0x104fc>
   22654:	cmp	r0, #0
   22658:	bne	22774 <__assert_fail@plt+0x10bd0>
   2265c:	ldr	r5, [sl, #4]
   22660:	str	r7, [r4, #40]	; 0x28
   22664:	cmp	r5, #0
   22668:	ble	22714 <__assert_fail@plt+0x10b70>
   2266c:	ldr	r1, [sl, #8]
   22670:	mov	sl, #65280	; 0xff00
   22674:	movt	sl, #3
   22678:	ldr	r7, [r8]
   2267c:	add	r5, r1, r5, lsl #2
   22680:	b	226c4 <__assert_fail@plt+0x10b20>
   22684:	ldrb	r2, [r4, #52]	; 0x34
   22688:	cmp	r0, #2
   2268c:	ldrb	lr, [r3, #6]
   22690:	ubfx	ip, r2, #5, #1
   22694:	ubfx	lr, lr, #4, #1
   22698:	orr	ip, ip, lr
   2269c:	bfi	r2, ip, #5, #1
   226a0:	strb	r2, [r4, #52]	; 0x34
   226a4:	beq	2274c <__assert_fail@plt+0x10ba8>
   226a8:	cmp	r0, #4
   226ac:	bne	2275c <__assert_fail@plt+0x10bb8>
   226b0:	ldrb	r3, [r4, #52]	; 0x34
   226b4:	orr	r3, r3, #64	; 0x40
   226b8:	strb	r3, [r4, #52]	; 0x34
   226bc:	cmp	r5, r1
   226c0:	beq	22714 <__assert_fail@plt+0x10b70>
   226c4:	ldr	r3, [r1], #4
   226c8:	add	r3, r7, r3, lsl #3
   226cc:	ldrb	r0, [r3, #4]
   226d0:	cmp	r0, #1
   226d4:	bne	22684 <__assert_fail@plt+0x10ae0>
   226d8:	ldr	r2, [r3, #4]
   226dc:	tst	sl, r2
   226e0:	beq	226bc <__assert_fail@plt+0x10b18>
   226e4:	ldrb	r2, [r3, #6]
   226e8:	ldrb	r3, [r4, #52]	; 0x34
   226ec:	ubfx	r0, r2, #4, #1
   226f0:	ubfx	r2, r3, #5, #1
   226f4:	orr	r2, r2, r0
   226f8:	bfi	r3, r2, #5, #1
   226fc:	strb	r3, [r4, #52]	; 0x34
   22700:	ldrb	r3, [r4, #52]	; 0x34
   22704:	cmp	r5, r1
   22708:	orr	r3, r3, #128	; 0x80
   2270c:	strb	r3, [r4, #52]	; 0x34
   22710:	bne	226c4 <__assert_fail@plt+0x10b20>
   22714:	mov	r2, r6
   22718:	mov	r0, r8
   2271c:	mov	r1, r4
   22720:	bl	1fe04 <__assert_fail@plt+0xe260>
   22724:	cmp	r0, #0
   22728:	bne	22794 <__assert_fail@plt+0x10bf0>
   2272c:	mov	r0, r4
   22730:	add	sp, sp, #4
   22734:	ldrd	r4, [sp]
   22738:	ldrd	r6, [sp, #8]
   2273c:	ldrd	r8, [sp, #16]
   22740:	ldrd	sl, [sp, #24]
   22744:	add	sp, sp, #32
   22748:	pop	{pc}		; (ldr pc, [sp], #4)
   2274c:	uxtb	r3, r2
   22750:	orr	r3, r3, #16
   22754:	strb	r3, [r4, #52]	; 0x34
   22758:	b	226bc <__assert_fail@plt+0x10b18>
   2275c:	cmp	r0, #12
   22760:	beq	22700 <__assert_fail@plt+0x10b5c>
   22764:	ldr	r3, [r3, #4]
   22768:	tst	sl, r3
   2276c:	beq	226bc <__assert_fail@plt+0x10b18>
   22770:	b	22700 <__assert_fail@plt+0x10b5c>
   22774:	mov	r0, r4
   22778:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2277c:	mov	r3, #12
   22780:	mov	r4, #0
   22784:	str	r3, [r9]
   22788:	b	2272c <__assert_fail@plt+0x10b88>
   2278c:	mov	r4, r6
   22790:	b	2272c <__assert_fail@plt+0x10b88>
   22794:	mov	r0, r4
   22798:	bl	20b4c <__assert_fail@plt+0xefa8>
   2279c:	b	2277c <__assert_fail@plt+0x10bd8>
   227a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   227a4:	strd	r6, [sp, #8]
   227a8:	subs	r7, r3, #0
   227ac:	subgt	r4, r1, #4
   227b0:	subgt	r6, r2, #4
   227b4:	str	r8, [sp, #16]
   227b8:	movgt	r5, #0
   227bc:	movgt	r8, r0
   227c0:	str	lr, [sp, #20]
   227c4:	sub	sp, sp, #16
   227c8:	bgt	227f8 <__assert_fail@plt+0x10c54>
   227cc:	b	2285c <__assert_fail@plt+0x10cb8>
   227d0:	bl	2257c <__assert_fail@plt+0x109d8>
   227d4:	str	r0, [r4]
   227d8:	ldr	r0, [sp, #12]
   227dc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   227e0:	ldr	r3, [sp]
   227e4:	cmp	r3, #0
   227e8:	bne	22840 <__assert_fail@plt+0x10c9c>
   227ec:	add	r5, r5, #1
   227f0:	cmp	r7, r5
   227f4:	beq	2285c <__assert_fail@plt+0x10cb8>
   227f8:	ldr	r1, [r4, #4]!
   227fc:	ldr	ip, [r6, #4]!
   22800:	cmp	r1, #0
   22804:	streq	ip, [r4]
   22808:	beq	227ec <__assert_fail@plt+0x10c48>
   2280c:	cmp	ip, #0
   22810:	add	r2, ip, #4
   22814:	add	r1, r1, #4
   22818:	add	r0, sp, #4
   2281c:	beq	227ec <__assert_fail@plt+0x10c48>
   22820:	bl	22128 <__assert_fail@plt+0x10584>
   22824:	mov	r3, r0
   22828:	add	r2, sp, #4
   2282c:	cmp	r3, #0
   22830:	mov	r1, r8
   22834:	mov	r0, sp
   22838:	str	r3, [sp]
   2283c:	beq	227d0 <__assert_fail@plt+0x10c2c>
   22840:	mov	r0, r3
   22844:	add	sp, sp, #16
   22848:	ldrd	r4, [sp]
   2284c:	ldrd	r6, [sp, #8]
   22850:	ldr	r8, [sp, #16]
   22854:	add	sp, sp, #20
   22858:	pop	{pc}		; (ldr pc, [sp], #4)
   2285c:	mov	r3, #0
   22860:	b	22840 <__assert_fail@plt+0x10c9c>
   22864:	ldrb	r2, [r1, #24]
   22868:	cmp	r2, #16
   2286c:	bne	2288c <__assert_fail@plt+0x10ce8>
   22870:	ldr	r3, [r1, #4]
   22874:	mov	r0, #0
   22878:	ldr	r2, [r3, #12]
   2287c:	ldr	r3, [r3, #28]
   22880:	str	r2, [r1, #12]
   22884:	str	r3, [r1, #28]
   22888:	bx	lr
   2288c:	strd	r4, [sp, #-16]!
   22890:	mov	r4, r1
   22894:	add	r3, r1, #20
   22898:	ldm	r3, {r1, r2}
   2289c:	mov	r5, r0
   228a0:	str	r6, [sp, #8]
   228a4:	str	lr, [sp, #12]
   228a8:	str	r4, [r4, #12]
   228ac:	bl	208e0 <__assert_fail@plt+0xed3c>
   228b0:	cmn	r0, #1
   228b4:	mov	r3, r0
   228b8:	str	r0, [r4, #28]
   228bc:	beq	228fc <__assert_fail@plt+0x10d58>
   228c0:	ldrb	r2, [r4, #24]
   228c4:	cmp	r2, #12
   228c8:	movne	r0, #0
   228cc:	bne	228ec <__assert_fail@plt+0x10d48>
   228d0:	ldr	r2, [r5]
   228d4:	mov	r0, #0
   228d8:	ldr	r1, [r4, #20]
   228dc:	add	r3, r2, r3, lsl #3
   228e0:	ldr	r2, [r3, #4]
   228e4:	bfi	r2, r1, #8, #10
   228e8:	str	r2, [r3, #4]
   228ec:	ldrd	r4, [sp]
   228f0:	ldr	r6, [sp, #8]
   228f4:	add	sp, sp, #12
   228f8:	pop	{pc}		; (ldr pc, [sp], #4)
   228fc:	mov	r0, #12
   22900:	b	228ec <__assert_fail@plt+0x10d48>
   22904:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22908:	strd	r6, [sp, #8]
   2290c:	mov	r6, r0
   22910:	ldr	r0, [r0]
   22914:	str	r8, [sp, #16]
   22918:	str	lr, [sp, #20]
   2291c:	cmp	r0, #0
   22920:	beq	22954 <__assert_fail@plt+0x10db0>
   22924:	ldr	r3, [r6, #8]
   22928:	cmp	r3, #0
   2292c:	beq	22954 <__assert_fail@plt+0x10db0>
   22930:	mov	r4, #0
   22934:	b	2293c <__assert_fail@plt+0x10d98>
   22938:	ldr	r0, [r6]
   2293c:	add	r0, r0, r4, lsl #3
   22940:	add	r4, r4, #1
   22944:	bl	2088c <__assert_fail@plt+0xece8>
   22948:	ldr	r3, [r6, #8]
   2294c:	cmp	r3, r4
   22950:	bhi	22938 <__assert_fail@plt+0x10d94>
   22954:	ldr	r0, [r6, #12]
   22958:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2295c:	ldr	r3, [r6, #8]
   22960:	cmp	r3, #0
   22964:	movne	r4, #0
   22968:	movne	r5, r4
   2296c:	beq	229cc <__assert_fail@plt+0x10e28>
   22970:	ldr	r3, [r6, #24]
   22974:	add	r5, r5, #1
   22978:	cmp	r3, #0
   2297c:	add	r2, r3, r4
   22980:	beq	2298c <__assert_fail@plt+0x10de8>
   22984:	ldr	r0, [r2, #8]
   22988:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2298c:	ldr	r3, [r6, #28]
   22990:	cmp	r3, #0
   22994:	add	r2, r3, r4
   22998:	beq	229a4 <__assert_fail@plt+0x10e00>
   2299c:	ldr	r0, [r2, #8]
   229a0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   229a4:	ldr	r3, [r6, #20]
   229a8:	cmp	r3, #0
   229ac:	add	r2, r3, r4
   229b0:	beq	229bc <__assert_fail@plt+0x10e18>
   229b4:	ldr	r0, [r2, #8]
   229b8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   229bc:	ldr	r3, [r6, #8]
   229c0:	add	r4, r4, #12
   229c4:	cmp	r3, r5
   229c8:	bhi	22970 <__assert_fail@plt+0x10dcc>
   229cc:	ldr	r0, [r6, #20]
   229d0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   229d4:	ldr	r0, [r6, #24]
   229d8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   229dc:	ldr	r0, [r6, #28]
   229e0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   229e4:	ldr	r0, [r6]
   229e8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   229ec:	ldr	r0, [r6, #32]
   229f0:	cmp	r0, #0
   229f4:	movne	r7, #0
   229f8:	beq	22a54 <__assert_fail@plt+0x10eb0>
   229fc:	add	r5, r7, r7, lsl #1
   22a00:	ldr	r3, [r0, r5, lsl #2]
   22a04:	add	r5, r0, r5, lsl #2
   22a08:	cmp	r3, #0
   22a0c:	movgt	r4, #0
   22a10:	ble	22a30 <__assert_fail@plt+0x10e8c>
   22a14:	ldr	r3, [r5, #8]
   22a18:	ldr	r0, [r3, r4, lsl #2]
   22a1c:	add	r4, r4, #1
   22a20:	bl	20b4c <__assert_fail@plt+0xefa8>
   22a24:	ldr	r3, [r5]
   22a28:	cmp	r4, r3
   22a2c:	blt	22a14 <__assert_fail@plt+0x10e70>
   22a30:	ldr	r0, [r5, #8]
   22a34:	add	r7, r7, #1
   22a38:	bl	17ac8 <__assert_fail@plt+0x5f24>
   22a3c:	ldr	r3, [r6, #68]	; 0x44
   22a40:	cmp	r3, r7
   22a44:	bcc	22a50 <__assert_fail@plt+0x10eac>
   22a48:	ldr	r0, [r6, #32]
   22a4c:	b	229fc <__assert_fail@plt+0x10e58>
   22a50:	ldr	r0, [r6, #32]
   22a54:	bl	17ac8 <__assert_fail@plt+0x5f24>
   22a58:	ldr	r0, [r6, #60]	; 0x3c
   22a5c:	movw	r3, #12592	; 0x3130
   22a60:	movt	r3, #3
   22a64:	cmp	r0, r3
   22a68:	beq	22a70 <__assert_fail@plt+0x10ecc>
   22a6c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   22a70:	ldr	r0, [r6, #132]	; 0x84
   22a74:	bl	17ac8 <__assert_fail@plt+0x5f24>
   22a78:	mov	r0, r6
   22a7c:	ldrd	r4, [sp]
   22a80:	ldrd	r6, [sp, #8]
   22a84:	ldr	r8, [sp, #16]
   22a88:	ldr	lr, [sp, #20]
   22a8c:	add	sp, sp, #24
   22a90:	b	17ac8 <__assert_fail@plt+0x5f24>
   22a94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22a98:	mov	r5, #0
   22a9c:	strd	r6, [sp, #8]
   22aa0:	ldr	r7, [r0, #28]
   22aa4:	strd	r8, [sp, #16]
   22aa8:	strd	sl, [sp, #24]
   22aac:	mov	sl, r1
   22ab0:	add	r1, r1, r1, lsl #1
   22ab4:	str	lr, [sp, #32]
   22ab8:	sub	sp, sp, #44	; 0x2c
   22abc:	add	r7, r7, r1, lsl #2
   22ac0:	str	r2, [sp, #12]
   22ac4:	str	r5, [sp, #28]
   22ac8:	str	r5, [sp, #32]
   22acc:	str	r5, [sp, #36]	; 0x24
   22ad0:	ldr	r6, [r7, #4]
   22ad4:	str	r3, [sp, #20]
   22ad8:	cmp	r6, r5
   22adc:	ble	22cc4 <__assert_fail@plt+0x11120>
   22ae0:	add	r3, r7, #8
   22ae4:	mov	r9, r0
   22ae8:	str	r3, [sp, #8]
   22aec:	add	r3, r2, #8
   22af0:	str	r3, [sp, #16]
   22af4:	b	22b48 <__assert_fail@plt+0x10fa4>
   22af8:	cmp	r0, #0
   22afc:	bne	22bd0 <__assert_fail@plt+0x1102c>
   22b00:	mov	r2, r3
   22b04:	ldr	r3, [sp, #12]
   22b08:	ldr	r1, [sp, #16]
   22b0c:	ldr	r0, [r3, #4]
   22b10:	bl	21478 <__assert_fail@plt+0xf8d4>
   22b14:	cmp	r0, #0
   22b18:	beq	22bd0 <__assert_fail@plt+0x1102c>
   22b1c:	ldr	r2, [r9, #28]
   22b20:	add	r0, sp, #28
   22b24:	ldr	r1, [sp, #20]
   22b28:	add	r2, r2, r4
   22b2c:	bl	219fc <__assert_fail@plt+0xfe58>
   22b30:	cmp	r0, #0
   22b34:	bne	22cb4 <__assert_fail@plt+0x11110>
   22b38:	ldr	r6, [r7, #4]
   22b3c:	add	r5, r5, #1
   22b40:	cmp	r6, r5
   22b44:	ble	22c00 <__assert_fail@plt+0x1105c>
   22b48:	ldr	r3, [r7, #8]
   22b4c:	ldr	r4, [r3, r5, lsl #2]
   22b50:	cmp	sl, r4
   22b54:	beq	22b3c <__assert_fail@plt+0x10f98>
   22b58:	ldr	r3, [r9]
   22b5c:	add	r3, r3, r4, lsl #3
   22b60:	ldrb	r3, [r3, #4]
   22b64:	tst	r3, #8
   22b68:	beq	22b3c <__assert_fail@plt+0x10f98>
   22b6c:	ldr	r8, [r9, #20]
   22b70:	add	r4, r4, r4, lsl #1
   22b74:	mov	r0, r6
   22b78:	lsl	r4, r4, #2
   22b7c:	ldr	r1, [sp, #8]
   22b80:	add	r8, r8, r4
   22b84:	ldr	fp, [r8, #8]
   22b88:	ldr	r3, [fp]
   22b8c:	mov	r2, r3
   22b90:	str	r3, [sp, #4]
   22b94:	bl	21478 <__assert_fail@plt+0xf8d4>
   22b98:	ldr	r2, [r8, #4]
   22b9c:	ldr	r3, [sp, #4]
   22ba0:	cmp	r2, #1
   22ba4:	bgt	22af8 <__assert_fail@plt+0x10f54>
   22ba8:	cmp	r0, #0
   22bac:	moveq	r2, r3
   22bb0:	bne	22b3c <__assert_fail@plt+0x10f98>
   22bb4:	ldr	r3, [sp, #12]
   22bb8:	ldr	r1, [sp, #16]
   22bbc:	ldr	r0, [r3, #4]
   22bc0:	bl	21478 <__assert_fail@plt+0xf8d4>
   22bc4:	cmp	r0, #0
   22bc8:	beq	22b3c <__assert_fail@plt+0x10f98>
   22bcc:	b	22b1c <__assert_fail@plt+0x10f78>
   22bd0:	ldr	r8, [fp, #4]
   22bd4:	cmp	r8, #0
   22bd8:	ble	22b3c <__assert_fail@plt+0x10f98>
   22bdc:	mov	r2, r8
   22be0:	mov	r0, r6
   22be4:	ldr	r1, [sp, #8]
   22be8:	bl	21478 <__assert_fail@plt+0xf8d4>
   22bec:	cmp	r0, #0
   22bf0:	beq	22bb4 <__assert_fail@plt+0x11010>
   22bf4:	add	r5, r5, #1
   22bf8:	cmp	r6, r5
   22bfc:	bgt	22b48 <__assert_fail@plt+0x10fa4>
   22c00:	cmp	r6, #0
   22c04:	ble	22c88 <__assert_fail@plt+0x110e4>
   22c08:	ldr	sl, [sp, #12]
   22c0c:	mov	r4, #0
   22c10:	add	r8, sl, #8
   22c14:	add	r9, sl, #4
   22c18:	ldr	r3, [r7, #8]
   22c1c:	add	r1, sp, #36	; 0x24
   22c20:	ldr	r0, [sp, #32]
   22c24:	ldr	r5, [r3, r4, lsl #2]
   22c28:	add	r4, r4, #1
   22c2c:	mov	r2, r5
   22c30:	bl	21478 <__assert_fail@plt+0xf8d4>
   22c34:	cmp	r0, #0
   22c38:	mov	r1, r8
   22c3c:	bne	22c80 <__assert_fail@plt+0x110dc>
   22c40:	ldr	r5, [sl, #4]
   22c44:	mov	r0, r5
   22c48:	bl	21478 <__assert_fail@plt+0xf8d4>
   22c4c:	sub	r3, r0, #1
   22c50:	sub	ip, r5, #1
   22c54:	cmp	r3, r5
   22c58:	mov	r2, r3
   22c5c:	movlt	r5, #0
   22c60:	movge	r5, #1
   22c64:	orrs	r3, r5, r3, lsr #31
   22c68:	mov	r1, r8
   22c6c:	mov	r0, r9
   22c70:	bne	22c80 <__assert_fail@plt+0x110dc>
   22c74:	str	ip, [sl, #4]
   22c78:	bl	21618 <__assert_fail@plt+0xfa74>
   22c7c:	ldr	r6, [r7, #4]
   22c80:	cmp	r6, r4
   22c84:	bgt	22c18 <__assert_fail@plt+0x11074>
   22c88:	ldr	r0, [sp, #36]	; 0x24
   22c8c:	mov	r4, #0
   22c90:	bl	17ac8 <__assert_fail@plt+0x5f24>
   22c94:	mov	r0, r4
   22c98:	add	sp, sp, #44	; 0x2c
   22c9c:	ldrd	r4, [sp]
   22ca0:	ldrd	r6, [sp, #8]
   22ca4:	ldrd	r8, [sp, #16]
   22ca8:	ldrd	sl, [sp, #24]
   22cac:	add	sp, sp, #32
   22cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   22cb4:	mov	r4, r0
   22cb8:	ldr	r0, [sp, #36]	; 0x24
   22cbc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   22cc0:	b	22c94 <__assert_fail@plt+0x110f0>
   22cc4:	mov	r0, r5
   22cc8:	b	22c8c <__assert_fail@plt+0x110e8>
   22ccc:	ldr	r3, [r0]
   22cd0:	strd	r4, [sp, #-16]!
   22cd4:	mov	r5, r0
   22cd8:	str	r6, [sp, #8]
   22cdc:	str	lr, [sp, #12]
   22ce0:	cmp	r3, #0
   22ce4:	ble	22d24 <__assert_fail@plt+0x11180>
   22ce8:	mov	r4, #0
   22cec:	mov	r6, r4
   22cf0:	ldr	r3, [r5, #8]
   22cf4:	add	r6, r6, #1
   22cf8:	add	r3, r3, r4
   22cfc:	ldr	r0, [r3, #20]
   22d00:	bl	17ac8 <__assert_fail@plt+0x5f24>
   22d04:	ldr	r3, [r5, #8]
   22d08:	add	r3, r3, r4
   22d0c:	add	r4, r4, #24
   22d10:	ldr	r0, [r3, #8]
   22d14:	bl	17ac8 <__assert_fail@plt+0x5f24>
   22d18:	ldr	r3, [r5]
   22d1c:	cmp	r6, r3
   22d20:	blt	22cf0 <__assert_fail@plt+0x1114c>
   22d24:	ldr	r0, [r5, #8]
   22d28:	ldrd	r4, [sp]
   22d2c:	ldr	r6, [sp, #8]
   22d30:	ldr	lr, [sp, #12]
   22d34:	add	sp, sp, #16
   22d38:	b	17ac8 <__assert_fail@plt+0x5f24>
   22d3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22d40:	strd	r6, [sp, #8]
   22d44:	subs	r6, r1, #0
   22d48:	str	r8, [sp, #16]
   22d4c:	str	lr, [sp, #20]
   22d50:	beq	22e44 <__assert_fail@plt+0x112a0>
   22d54:	ldr	r2, [r6, #4]
   22d58:	cmp	r2, #0
   22d5c:	mov	ip, r2
   22d60:	beq	22e44 <__assert_fail@plt+0x112a0>
   22d64:	ldm	r0, {r1, r3}
   22d68:	mov	r5, r0
   22d6c:	add	r4, r3, r2, lsl #1
   22d70:	cmp	r1, r4
   22d74:	blt	22e80 <__assert_fail@plt+0x112dc>
   22d78:	cmp	r3, #0
   22d7c:	beq	22ec0 <__assert_fail@plt+0x1131c>
   22d80:	sub	r2, r2, #1
   22d84:	sub	r3, r3, #1
   22d88:	mvn	r7, r2
   22d8c:	mvn	lr, r3
   22d90:	tst	r7, lr
   22d94:	bpl	22dd4 <__assert_fail@plt+0x11230>
   22d98:	ldr	r1, [r5, #8]
   22d9c:	ldr	r0, [r6, #8]
   22da0:	ldr	ip, [r1, r3, lsl #2]
   22da4:	ldr	r0, [r0, r2, lsl #2]
   22da8:	cmp	ip, r0
   22dac:	beq	22d80 <__assert_fail@plt+0x111dc>
   22db0:	subge	r3, r3, #1
   22db4:	mvnge	lr, r3
   22db8:	bge	22d90 <__assert_fail@plt+0x111ec>
   22dbc:	sub	r2, r2, #1
   22dc0:	sub	r4, r4, #1
   22dc4:	mvn	r7, r2
   22dc8:	tst	r7, lr
   22dcc:	str	r0, [r1, r4, lsl #2]
   22dd0:	bmi	22d98 <__assert_fail@plt+0x111f4>
   22dd4:	cmp	r2, #0
   22dd8:	blt	22df8 <__assert_fail@plt+0x11254>
   22ddc:	ldr	r0, [r5, #8]
   22de0:	add	r2, r2, #1
   22de4:	sub	r4, r4, r2
   22de8:	lsl	r2, r2, #2
   22dec:	ldr	r1, [r6, #8]
   22df0:	add	r0, r0, r4, lsl #2
   22df4:	bl	11784 <memcpy@plt>
   22df8:	ldr	r3, [r5, #4]
   22dfc:	ldr	r0, [r6, #4]
   22e00:	add	r0, r3, r0, lsl #1
   22e04:	subs	r2, r0, r4
   22e08:	sub	r0, r0, #1
   22e0c:	beq	22e44 <__assert_fail@plt+0x112a0>
   22e10:	ldr	r1, [r5, #8]
   22e14:	add	ip, r3, r2
   22e18:	sub	r3, r3, #1
   22e1c:	str	ip, [r5, #4]
   22e20:	ldr	lr, [r1, r0, lsl #2]
   22e24:	add	r5, r3, r2
   22e28:	ldr	ip, [r1, r3, lsl #2]
   22e2c:	cmp	lr, ip
   22e30:	ble	22e5c <__assert_fail@plt+0x112b8>
   22e34:	subs	r2, r2, #1
   22e38:	sub	r0, r0, #1
   22e3c:	str	lr, [r1, r5, lsl #2]
   22e40:	bne	22e20 <__assert_fail@plt+0x1127c>
   22e44:	mov	r0, #0
   22e48:	ldrd	r4, [sp]
   22e4c:	ldrd	r6, [sp, #8]
   22e50:	ldr	r8, [sp, #16]
   22e54:	add	sp, sp, #20
   22e58:	pop	{pc}		; (ldr pc, [sp], #4)
   22e5c:	subs	r3, r3, #1
   22e60:	str	ip, [r1, r5, lsl #2]
   22e64:	bpl	22e20 <__assert_fail@plt+0x1127c>
   22e68:	mov	r0, r1
   22e6c:	lsl	r2, r2, #2
   22e70:	add	r1, r1, r4, lsl #2
   22e74:	bl	11784 <memcpy@plt>
   22e78:	mov	r0, #0
   22e7c:	b	22e48 <__assert_fail@plt+0x112a4>
   22e80:	add	r2, r2, r1
   22e84:	ldr	r0, [r0, #8]
   22e88:	lsl	r1, r2, #3
   22e8c:	lsl	r4, r2, #1
   22e90:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   22e94:	cmp	r0, #0
   22e98:	beq	22edc <__assert_fail@plt+0x11338>
   22e9c:	ldr	r3, [r5, #4]
   22ea0:	str	r4, [r5]
   22ea4:	str	r0, [r5, #8]
   22ea8:	cmp	r3, #0
   22eac:	ldreq	ip, [r6, #4]
   22eb0:	beq	22ec4 <__assert_fail@plt+0x11320>
   22eb4:	ldr	r2, [r6, #4]
   22eb8:	add	r4, r3, r2, lsl #1
   22ebc:	b	22d80 <__assert_fail@plt+0x111dc>
   22ec0:	ldr	r0, [r0, #8]
   22ec4:	ldr	r1, [r6, #8]
   22ec8:	str	ip, [r5, #4]
   22ecc:	ldr	r2, [r6, #4]
   22ed0:	lsl	r2, r2, #2
   22ed4:	bl	11784 <memcpy@plt>
   22ed8:	b	22e44 <__assert_fail@plt+0x112a0>
   22edc:	mov	r0, #12
   22ee0:	b	22e48 <__assert_fail@plt+0x112a4>
   22ee4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22ee8:	mov	r4, r2
   22eec:	mov	r5, r1
   22ef0:	ldr	r2, [r1, #20]
   22ef4:	mov	r1, #0
   22ef8:	strd	r6, [sp, #8]
   22efc:	add	r7, r4, r4, lsl #1
   22f00:	strd	r8, [sp, #16]
   22f04:	mov	r8, r0
   22f08:	lsl	r7, r7, #2
   22f0c:	strd	sl, [sp, #24]
   22f10:	mov	sl, r3
   22f14:	str	lr, [sp, #32]
   22f18:	sub	sp, sp, #36	; 0x24
   22f1c:	add	r2, r2, r7
   22f20:	ldr	r3, [r2, #4]
   22f24:	str	r1, [sp, #12]
   22f28:	add	r3, r3, #1
   22f2c:	lsl	r0, r3, #2
   22f30:	str	r3, [sp, #8]
   22f34:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   22f38:	cmp	r0, #0
   22f3c:	str	r0, [sp, #16]
   22f40:	beq	23130 <__assert_fail@plt+0x1158c>
   22f44:	ldr	lr, [r5]
   22f48:	lsl	r6, r4, #3
   22f4c:	mov	r3, #65280	; 0xff00
   22f50:	movt	r3, #3
   22f54:	mvn	r9, #0
   22f58:	ldr	r2, [sp, #12]
   22f5c:	ldr	r1, [r5, #24]
   22f60:	add	ip, lr, r6
   22f64:	str	r4, [r0, r2, lsl #2]
   22f68:	add	r2, r2, #1
   22f6c:	ldr	fp, [ip, #4]
   22f70:	add	r0, r1, r7
   22f74:	str	r2, [sp, #12]
   22f78:	str	r9, [r0, #4]
   22f7c:	and	r3, r3, fp
   22f80:	cmp	r3, #0
   22f84:	beq	22fb4 <__assert_fail@plt+0x11410>
   22f88:	ldr	r3, [r5, #20]
   22f8c:	add	r3, r3, r7
   22f90:	ldr	r2, [r3, #4]
   22f94:	cmp	r2, #0
   22f98:	beq	23080 <__assert_fail@plt+0x114dc>
   22f9c:	ldr	r3, [r3, #8]
   22fa0:	ldr	r3, [r3]
   22fa4:	add	lr, lr, r3, lsl #3
   22fa8:	ldrb	r3, [lr, #6]
   22fac:	tst	r3, #4
   22fb0:	beq	230fc <__assert_fail@plt+0x11558>
   22fb4:	ldrb	r3, [ip, #4]
   22fb8:	tst	r3, #8
   22fbc:	beq	2307c <__assert_fail@plt+0x114d8>
   22fc0:	ldr	ip, [r5, #20]
   22fc4:	add	r3, ip, r7
   22fc8:	ldr	r2, [r3, #4]
   22fcc:	cmp	r2, #0
   22fd0:	movgt	r9, #0
   22fd4:	movgt	r6, r9
   22fd8:	bgt	23030 <__assert_fail@plt+0x1148c>
   22fdc:	b	2307c <__assert_fail@plt+0x114d8>
   22fe0:	ldrd	r2, [r0]
   22fe4:	strd	r2, [sp, #20]
   22fe8:	ldr	r3, [r0, #8]
   22fec:	str	r3, [fp, #8]
   22ff0:	mov	r1, fp
   22ff4:	add	r0, sp, #8
   22ff8:	bl	22d3c <__assert_fail@plt+0x11198>
   22ffc:	cmp	r0, #0
   23000:	bne	230a8 <__assert_fail@plt+0x11504>
   23004:	ldr	r1, [r5, #24]
   23008:	add	r4, r1, r4
   2300c:	ldr	r3, [r4, #4]
   23010:	cmp	r3, #0
   23014:	beq	230c4 <__assert_fail@plt+0x11520>
   23018:	ldr	ip, [r5, #20]
   2301c:	add	r3, ip, r7
   23020:	add	r6, r6, #1
   23024:	ldr	r2, [r3, #4]
   23028:	cmp	r2, r6
   2302c:	ble	230dc <__assert_fail@plt+0x11538>
   23030:	ldr	r3, [r3, #8]
   23034:	add	fp, sp, #20
   23038:	ldr	r2, [r3, r6, lsl #2]
   2303c:	add	r4, r2, r2, lsl #1
   23040:	lsl	r4, r4, #2
   23044:	add	r0, r1, r4
   23048:	ldr	r3, [r0, #4]
   2304c:	cmn	r3, #1
   23050:	moveq	r9, #1
   23054:	beq	2301c <__assert_fail@plt+0x11478>
   23058:	cmp	r3, #0
   2305c:	bne	22fe0 <__assert_fail@plt+0x1143c>
   23060:	add	fp, sp, #20
   23064:	mov	r1, r5
   23068:	mov	r0, fp
   2306c:	bl	22ee4 <__assert_fail@plt+0x11340>
   23070:	cmp	r0, #0
   23074:	beq	22ff0 <__assert_fail@plt+0x1144c>
   23078:	b	230a8 <__assert_fail@plt+0x11504>
   2307c:	add	r0, r1, r7
   23080:	ldrd	r2, [sp, #8]
   23084:	add	ip, sp, #8
   23088:	strd	r2, [r1, r7]
   2308c:	ldr	r3, [sp, #16]
   23090:	str	r3, [r0, #8]
   23094:	ldr	r1, [ip, #8]
   23098:	mov	r0, #0
   2309c:	ldrd	r2, [sp, #8]
   230a0:	strd	r2, [r8]
   230a4:	str	r1, [r8, #8]
   230a8:	add	sp, sp, #36	; 0x24
   230ac:	ldrd	r4, [sp]
   230b0:	ldrd	r6, [sp, #8]
   230b4:	ldrd	r8, [sp, #16]
   230b8:	ldrd	sl, [sp, #24]
   230bc:	add	sp, sp, #32
   230c0:	pop	{pc}		; (ldr pc, [sp], #4)
   230c4:	ldr	r0, [sp, #28]
   230c8:	mov	r9, #1
   230cc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   230d0:	ldr	ip, [r5, #20]
   230d4:	ldr	r1, [r5, #24]
   230d8:	b	2301c <__assert_fail@plt+0x11478>
   230dc:	eor	sl, sl, #1
   230e0:	add	r0, r1, r7
   230e4:	tst	r9, sl
   230e8:	beq	23080 <__assert_fail@plt+0x114dc>
   230ec:	mov	r3, #0
   230f0:	add	ip, sp, #8
   230f4:	str	r3, [r0, #4]
   230f8:	b	23094 <__assert_fail@plt+0x114f0>
   230fc:	ubfx	fp, fp, #8, #10
   23100:	mov	r3, r4
   23104:	mov	r2, r4
   23108:	mov	r1, r4
   2310c:	mov	r0, r5
   23110:	str	fp, [sp]
   23114:	bl	20fe8 <__assert_fail@plt+0xf444>
   23118:	cmp	r0, #0
   2311c:	bne	230a8 <__assert_fail@plt+0x11504>
   23120:	ldr	ip, [r5]
   23124:	ldr	r1, [r5, #24]
   23128:	add	ip, ip, r6
   2312c:	b	22fb4 <__assert_fail@plt+0x11410>
   23130:	mov	r0, #12
   23134:	b	230a8 <__assert_fail@plt+0x11504>
   23138:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2313c:	mov	r5, r2
   23140:	mov	r4, r3
   23144:	strd	r6, [sp, #8]
   23148:	mov	r6, #0
   2314c:	mov	r7, r0
   23150:	strd	r8, [sp, #16]
   23154:	mov	r8, r1
   23158:	ldr	r1, [r1, #4]
   2315c:	strd	sl, [sp, #24]
   23160:	str	lr, [sp, #32]
   23164:	sub	sp, sp, #28
   23168:	lsl	r0, r1, #2
   2316c:	str	r1, [sp, #12]
   23170:	str	r6, [sp, #16]
   23174:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   23178:	cmp	r0, r6
   2317c:	str	r0, [sp, #20]
   23180:	beq	23280 <__assert_fail@plt+0x116dc>
   23184:	ldr	r3, [r8, #4]
   23188:	add	r9, sp, #12
   2318c:	cmp	r3, r6
   23190:	ble	23228 <__assert_fail@plt+0x11684>
   23194:	ldr	r3, [r8, #8]
   23198:	ldr	r1, [r7, #24]
   2319c:	ldr	r2, [r3, r6, lsl #2]
   231a0:	add	r3, r2, r2, lsl #1
   231a4:	add	r1, r1, r3, lsl #2
   231a8:	ldr	fp, [r1, #4]
   231ac:	cmp	fp, #0
   231b0:	ble	23248 <__assert_fail@plt+0x116a4>
   231b4:	ldr	ip, [r1, #8]
   231b8:	mov	r3, #0
   231bc:	ldr	sl, [r7]
   231c0:	sub	ip, ip, #4
   231c4:	b	231d0 <__assert_fail@plt+0x1162c>
   231c8:	cmp	fp, r3
   231cc:	beq	23248 <__assert_fail@plt+0x116a4>
   231d0:	ldr	r0, [ip, #4]!
   231d4:	add	r3, r3, #1
   231d8:	add	lr, sl, r0, lsl #3
   231dc:	ldrb	lr, [lr, #4]
   231e0:	cmp	r4, lr
   231e4:	bne	231c8 <__assert_fail@plt+0x11624>
   231e8:	ldr	lr, [sl, r0, lsl #3]
   231ec:	cmp	r5, lr
   231f0:	bne	231c8 <__assert_fail@plt+0x11624>
   231f4:	cmn	r0, #1
   231f8:	beq	23248 <__assert_fail@plt+0x116a4>
   231fc:	mov	r3, r5
   23200:	mov	r1, r9
   23204:	str	r4, [sp]
   23208:	mov	r0, r7
   2320c:	bl	21500 <__assert_fail@plt+0xf95c>
   23210:	subs	sl, r0, #0
   23214:	bne	23258 <__assert_fail@plt+0x116b4>
   23218:	ldr	r3, [r8, #4]
   2321c:	add	r6, r6, #1
   23220:	cmp	r3, r6
   23224:	bgt	23194 <__assert_fail@plt+0x115f0>
   23228:	ldr	r0, [r8, #8]
   2322c:	mov	sl, #0
   23230:	bl	17ac8 <__assert_fail@plt+0x5f24>
   23234:	ldr	r1, [r9, #8]
   23238:	ldrd	r2, [sp, #12]
   2323c:	strd	r2, [r8]
   23240:	str	r1, [r8, #8]
   23244:	b	23260 <__assert_fail@plt+0x116bc>
   23248:	mov	r0, r9
   2324c:	bl	22d3c <__assert_fail@plt+0x11198>
   23250:	subs	sl, r0, #0
   23254:	beq	23218 <__assert_fail@plt+0x11674>
   23258:	ldr	r0, [sp, #20]
   2325c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   23260:	mov	r0, sl
   23264:	add	sp, sp, #28
   23268:	ldrd	r4, [sp]
   2326c:	ldrd	r6, [sp, #8]
   23270:	ldrd	r8, [sp, #16]
   23274:	ldrd	sl, [sp, #24]
   23278:	add	sp, sp, #32
   2327c:	pop	{pc}		; (ldr pc, [sp], #4)
   23280:	mov	sl, #12
   23284:	b	23260 <__assert_fail@plt+0x116bc>
   23288:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2328c:	mov	r5, #0
   23290:	strd	r6, [sp, #8]
   23294:	ldr	r7, [r0, #108]	; 0x6c
   23298:	strd	r8, [sp, #16]
   2329c:	strd	sl, [sp, #24]
   232a0:	str	lr, [sp, #32]
   232a4:	sub	sp, sp, #36	; 0x24
   232a8:	mov	r4, r7
   232ac:	cmp	r5, r4
   232b0:	bge	2330c <__assert_fail@plt+0x11768>
   232b4:	add	lr, r5, r4
   232b8:	ldr	r6, [r0, #116]	; 0x74
   232bc:	add	lr, lr, lr, lsr #31
   232c0:	asr	lr, lr, #1
   232c4:	add	ip, lr, lr, lsl #1
   232c8:	add	ip, r6, ip, lsl #3
   232cc:	ldr	ip, [ip, #4]
   232d0:	cmp	r2, ip
   232d4:	ble	232fc <__assert_fail@plt+0x11758>
   232d8:	b	23538 <__assert_fail@plt+0x11994>
   232dc:	asr	ip, ip, #1
   232e0:	add	r4, ip, ip, lsl #1
   232e4:	mov	r8, ip
   232e8:	add	r4, r6, r4, lsl #3
   232ec:	ldr	r4, [r4, #4]
   232f0:	cmp	r2, r4
   232f4:	bgt	23540 <__assert_fail@plt+0x1199c>
   232f8:	mov	lr, ip
   232fc:	add	ip, lr, r5
   23300:	cmp	lr, r5
   23304:	add	ip, ip, ip, lsr #31
   23308:	bgt	232dc <__assert_fail@plt+0x11738>
   2330c:	cmp	r7, r5
   23310:	ble	2354c <__assert_fail@plt+0x119a8>
   23314:	ldr	r4, [r0, #116]	; 0x74
   23318:	add	ip, r5, r5, lsl #1
   2331c:	cmn	r5, #1
   23320:	movne	r5, #0
   23324:	moveq	r5, #1
   23328:	lsl	ip, ip, #3
   2332c:	add	lr, r4, ip
   23330:	ldr	lr, [lr, #4]
   23334:	cmp	lr, r2
   23338:	orrne	r5, r5, #1
   2333c:	cmp	r5, #0
   23340:	bne	2354c <__assert_fail@plt+0x119a8>
   23344:	ldr	sl, [r0, #84]	; 0x54
   23348:	mov	r6, r2
   2334c:	mov	r7, r0
   23350:	add	r9, r1, #8
   23354:	str	r1, [sp]
   23358:	str	r3, [sp, #12]
   2335c:	add	r3, ip, #24
   23360:	str	r3, [sp, #8]
   23364:	ldr	r3, [sp, #8]
   23368:	add	r4, r4, r3
   2336c:	b	23420 <__assert_fail@plt+0x1187c>
   23370:	ldr	r3, [r7, #100]	; 0x64
   23374:	ldr	r2, [sl, #12]
   23378:	ldr	fp, [r3, r5, lsl #2]
   2337c:	ldr	r8, [r2, r8, lsl #2]
   23380:	cmp	fp, #0
   23384:	beq	23508 <__assert_fail@plt+0x11964>
   23388:	mov	r2, r8
   2338c:	add	r1, fp, #12
   23390:	ldr	r0, [fp, #8]
   23394:	bl	21478 <__assert_fail@plt+0xf8d4>
   23398:	cmp	r0, #0
   2339c:	bne	23410 <__assert_fail@plt+0x1186c>
   233a0:	add	r2, sp, #20
   233a4:	add	r1, fp, #4
   233a8:	mov	r0, r2
   233ac:	str	r2, [sp, #4]
   233b0:	bl	220a0 <__assert_fail@plt+0x104fc>
   233b4:	ldr	r2, [sp, #4]
   233b8:	mov	r1, r8
   233bc:	str	r0, [sp, #16]
   233c0:	mov	r0, r2
   233c4:	bl	20ea4 <__assert_fail@plt+0xf300>
   233c8:	eor	r0, r0, #1
   233cc:	ldr	r2, [sp, #4]
   233d0:	ldr	r3, [sp, #16]
   233d4:	cmp	r3, #0
   233d8:	orrne	r0, r0, #1
   233dc:	tst	r0, #255	; 0xff
   233e0:	bne	2357c <__assert_fail@plt+0x119d8>
   233e4:	ldr	r8, [r7, #100]	; 0x64
   233e8:	mov	r1, sl
   233ec:	add	r0, sp, #16
   233f0:	bl	2257c <__assert_fail@plt+0x109d8>
   233f4:	str	r0, [r8, r5, lsl #2]
   233f8:	ldr	r0, [sp, #28]
   233fc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   23400:	ldr	r3, [r7, #100]	; 0x64
   23404:	ldr	r3, [r3, r5, lsl #2]
   23408:	cmp	r3, #0
   2340c:	beq	2356c <__assert_fail@plt+0x119c8>
   23410:	add	r4, r4, #24
   23414:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   23418:	cmp	r3, #0
   2341c:	beq	2354c <__assert_fail@plt+0x119a8>
   23420:	ldr	r3, [sp]
   23424:	mov	r1, r9
   23428:	ldr	r8, [r4, #-24]	; 0xffffffe8
   2342c:	ldr	fp, [r3, #4]
   23430:	mov	r2, r8
   23434:	mov	r0, fp
   23438:	bl	21478 <__assert_fail@plt+0xf8d4>
   2343c:	cmp	r0, #0
   23440:	beq	23410 <__assert_fail@plt+0x1186c>
   23444:	ldr	r2, [r4, #-16]
   23448:	ldr	r5, [r4, #-12]
   2344c:	add	r5, r6, r5
   23450:	sub	r5, r5, r2
   23454:	cmp	r6, r5
   23458:	bne	23370 <__assert_fail@plt+0x117cc>
   2345c:	ldr	r2, [sl, #20]
   23460:	add	r8, r8, r8, lsl #1
   23464:	mov	r0, fp
   23468:	mov	r1, r9
   2346c:	add	r8, r2, r8, lsl #2
   23470:	ldr	r3, [r8, #8]
   23474:	ldr	r5, [r3]
   23478:	mov	r2, r5
   2347c:	bl	21478 <__assert_fail@plt+0xf8d4>
   23480:	cmp	r0, #0
   23484:	bne	23410 <__assert_fail@plt+0x1186c>
   23488:	mov	r3, #1
   2348c:	mov	fp, r0
   23490:	mov	r0, #4
   23494:	add	r4, sp, #20
   23498:	str	r3, [sp, #20]
   2349c:	str	r3, [sp, #24]
   234a0:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   234a4:	cmp	r0, #0
   234a8:	mov	r1, r4
   234ac:	str	r0, [sp, #28]
   234b0:	ldr	r2, [sp, #12]
   234b4:	streq	fp, [sp, #20]
   234b8:	streq	fp, [sp, #24]
   234bc:	moveq	fp, #12
   234c0:	strne	r5, [r0]
   234c4:	mov	r0, sl
   234c8:	ldr	r3, [sp, #72]	; 0x48
   234cc:	str	fp, [sp, #16]
   234d0:	bl	23138 <__assert_fail@plt+0x11594>
   234d4:	mov	r5, r0
   234d8:	mov	r1, r4
   234dc:	ldr	r0, [sp]
   234e0:	bl	22d3c <__assert_fail@plt+0x11198>
   234e4:	mov	r4, r0
   234e8:	ldr	r0, [sp, #28]
   234ec:	bl	17ac8 <__assert_fail@plt+0x5f24>
   234f0:	ldr	r0, [sp, #16]
   234f4:	orr	r3, r5, r4
   234f8:	orrs	r3, r3, r0
   234fc:	bne	23598 <__assert_fail@plt+0x119f4>
   23500:	ldr	r4, [r7, #116]	; 0x74
   23504:	b	23364 <__assert_fail@plt+0x117c0>
   23508:	mov	r3, #1
   2350c:	mov	r0, #4
   23510:	str	r3, [sp, #20]
   23514:	str	r3, [sp, #24]
   23518:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2351c:	cmp	r0, #0
   23520:	str	r0, [sp, #28]
   23524:	beq	23590 <__assert_fail@plt+0x119ec>
   23528:	add	r2, sp, #20
   2352c:	str	r8, [r0]
   23530:	str	fp, [sp, #16]
   23534:	b	233e4 <__assert_fail@plt+0x11840>
   23538:	mov	r8, lr
   2353c:	mov	lr, r4
   23540:	add	r5, r8, #1
   23544:	mov	r4, lr
   23548:	b	232ac <__assert_fail@plt+0x11708>
   2354c:	mov	r0, #0
   23550:	add	sp, sp, #36	; 0x24
   23554:	ldrd	r4, [sp]
   23558:	ldrd	r6, [sp, #8]
   2355c:	ldrd	r8, [sp, #16]
   23560:	ldrd	sl, [sp, #24]
   23564:	add	sp, sp, #32
   23568:	pop	{pc}		; (ldr pc, [sp], #4)
   2356c:	ldr	r0, [sp, #16]
   23570:	cmp	r0, #0
   23574:	beq	23410 <__assert_fail@plt+0x1186c>
   23578:	b	23550 <__assert_fail@plt+0x119ac>
   2357c:	ldr	r0, [sp, #28]
   23580:	bl	17ac8 <__assert_fail@plt+0x5f24>
   23584:	ldr	r0, [sp, #16]
   23588:	cmp	r0, #0
   2358c:	bne	23550 <__assert_fail@plt+0x119ac>
   23590:	mov	r0, #12
   23594:	b	23550 <__assert_fail@plt+0x119ac>
   23598:	cmp	r0, #0
   2359c:	bne	23550 <__assert_fail@plt+0x119ac>
   235a0:	cmp	r5, #0
   235a4:	movne	r0, r5
   235a8:	moveq	r0, r4
   235ac:	b	23550 <__assert_fail@plt+0x119ac>
   235b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   235b4:	mov	r3, #0
   235b8:	strd	r6, [sp, #8]
   235bc:	strd	sl, [sp, #24]
   235c0:	ldr	sl, [r1, #8]
   235c4:	strd	r8, [sp, #16]
   235c8:	str	lr, [sp, #32]
   235cc:	sub	sp, sp, #14400	; 0x3840
   235d0:	sub	sp, sp, #44	; 0x2c
   235d4:	str	r3, [r1, #44]	; 0x2c
   235d8:	add	r8, sp, #104	; 0x68
   235dc:	str	r3, [r1, #48]	; 0x30
   235e0:	cmp	sl, r3
   235e4:	str	r3, [r8]
   235e8:	str	r3, [r8, #4]
   235ec:	str	r3, [r8, #8]
   235f0:	str	r3, [r8, #12]
   235f4:	str	r3, [r8, #16]
   235f8:	str	r1, [sp, #16]
   235fc:	str	r3, [r8, #20]
   23600:	str	r3, [r8, #24]
   23604:	str	r3, [r8, #28]
   23608:	ble	23fd0 <__assert_fail@plt+0x1242c>
   2360c:	add	r7, sp, #1120	; 0x460
   23610:	str	r3, [sp, #20]
   23614:	add	r7, r7, #8
   23618:	str	r3, [sp, #24]
   2361c:	str	r0, [sp, #36]	; 0x24
   23620:	str	r3, [sp, #48]	; 0x30
   23624:	str	r3, [sp, #52]	; 0x34
   23628:	ldr	r3, [sp, #16]
   2362c:	ldr	r1, [sp, #24]
   23630:	ldr	r2, [r3, #12]
   23634:	lsl	r3, r1, #2
   23638:	str	r3, [sp, #32]
   2363c:	ldr	r3, [sp, #36]	; 0x24
   23640:	ldr	r1, [r2, r1, lsl #2]
   23644:	ldr	r3, [r3]
   23648:	add	r2, r3, r1, lsl #3
   2364c:	ldrb	r6, [r2, #4]
   23650:	str	r2, [sp, #12]
   23654:	ldr	r2, [r2, #4]
   23658:	cmp	r6, #1
   2365c:	ubfx	r2, r2, #8, #10
   23660:	beq	238f0 <__assert_fail@plt+0x11d4c>
   23664:	cmp	r6, #3
   23668:	beq	23d68 <__assert_fail@plt+0x121c4>
   2366c:	cmp	r6, #5
   23670:	beq	23bcc <__assert_fail@plt+0x12028>
   23674:	cmp	r6, #7
   23678:	beq	23cd0 <__assert_fail@plt+0x1212c>
   2367c:	ldr	r3, [sp, #24]
   23680:	add	r3, r3, #1
   23684:	cmp	r3, sl
   23688:	str	r3, [sp, #24]
   2368c:	blt	23628 <__assert_fail@plt+0x11a84>
   23690:	ldr	r3, [sp, #20]
   23694:	ldr	r9, [sp, #36]	; 0x24
   23698:	cmp	r3, #0
   2369c:	ble	23fcc <__assert_fail@plt+0x12428>
   236a0:	ldr	r3, [sp, #20]
   236a4:	add	r5, sp, #2144	; 0x860
   236a8:	mov	fp, #0
   236ac:	add	r5, r5, #8
   236b0:	str	fp, [r5, #-2088]	; 0xfffff7d8
   236b4:	add	r3, r3, #1
   236b8:	lsl	r0, r3, #2
   236bc:	str	r3, [r5, #-2092]	; 0xfffff7d4
   236c0:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   236c4:	cmp	r0, fp
   236c8:	str	r0, [r5, #-2084]	; 0xfffff7dc
   236cc:	beq	23f6c <__assert_fail@plt+0x123c8>
   236d0:	mov	r3, #0
   236d4:	mov	r2, #0
   236d8:	str	fp, [r5, #-2096]	; 0xfffff7d0
   236dc:	add	r1, sp, #6208	; 0x1840
   236e0:	add	r4, sp, #3168	; 0xc60
   236e4:	str	r8, [sp]
   236e8:	add	r1, r1, #40	; 0x28
   236ec:	add	r4, r4, #8
   236f0:	strd	r2, [r8, #-32]	; 0xffffffe0
   236f4:	mov	sl, fp
   236f8:	add	r6, r1, #28
   236fc:	str	r1, [sp, #24]
   23700:	strd	r2, [sp, #80]	; 0x50
   23704:	strd	r2, [sp, #88]	; 0x58
   23708:	strd	r2, [sp, #96]	; 0x60
   2370c:	sub	r3, r8, #48	; 0x30
   23710:	str	r3, [sp, #12]
   23714:	str	r4, [sp, #28]
   23718:	str	r4, [sp, #40]	; 0x28
   2371c:	ldr	ip, [r4, #4]
   23720:	mov	r3, #0
   23724:	str	r3, [r5, #-2088]	; 0xfffff7d8
   23728:	cmp	ip, r3
   2372c:	movgt	r7, #0
   23730:	ble	2377c <__assert_fail@plt+0x11bd8>
   23734:	ldr	r2, [r4, #8]
   23738:	add	r0, sp, #60	; 0x3c
   2373c:	ldr	r3, [r9, #12]
   23740:	ldr	r2, [r2, r7, lsl #2]
   23744:	ldr	r3, [r3, r2, lsl #2]
   23748:	cmn	r3, #1
   2374c:	add	r2, r3, r3, lsl #1
   23750:	beq	23770 <__assert_fail@plt+0x11bcc>
   23754:	ldr	r1, [r9, #24]
   23758:	add	r1, r1, r2, lsl #2
   2375c:	bl	22d3c <__assert_fail@plt+0x11198>
   23760:	cmp	r0, #0
   23764:	str	r0, [r5, #-2096]	; 0xfffff7d0
   23768:	bne	23e0c <__assert_fail@plt+0x12268>
   2376c:	ldr	ip, [r4, #4]
   23770:	add	r7, r7, #1
   23774:	cmp	ip, r7
   23778:	bgt	23734 <__assert_fail@plt+0x11b90>
   2377c:	mov	r3, #0
   23780:	add	r2, sp, #60	; 0x3c
   23784:	ldr	r0, [sp, #12]
   23788:	mov	r1, r9
   2378c:	bl	22294 <__assert_fail@plt+0x106f0>
   23790:	ldr	r3, [sp]
   23794:	cmp	r0, #0
   23798:	mov	r7, r0
   2379c:	str	r0, [r3], #4
   237a0:	str	r3, [sp]
   237a4:	beq	23f84 <__assert_fail@plt+0x123e0>
   237a8:	ldrsb	r3, [r7, #52]	; 0x34
   237ac:	cmp	r3, #0
   237b0:	blt	23e3c <__assert_fail@plt+0x12298>
   237b4:	add	r3, sp, #1120	; 0x460
   237b8:	str	r7, [r5, sl, lsl #2]
   237bc:	add	r3, r3, #8
   237c0:	str	r7, [r3, sl, lsl #2]
   237c4:	sub	r7, r8, #36	; 0x24
   237c8:	sub	r1, r6, #32
   237cc:	mov	r2, r7
   237d0:	ldr	r3, [r2, #4]!
   237d4:	ldr	r0, [r1, #4]!
   237d8:	orr	r3, r3, r0
   237dc:	cmp	r6, r1
   237e0:	str	r3, [r2]
   237e4:	bne	237d0 <__assert_fail@plt+0x11c2c>
   237e8:	ldr	r3, [sp, #20]
   237ec:	add	sl, sl, #1
   237f0:	add	r4, r4, #12
   237f4:	add	r6, r6, #32
   237f8:	cmp	sl, r3
   237fc:	bne	2371c <__assert_fail@plt+0x11b78>
   23800:	cmp	fp, #0
   23804:	bne	24010 <__assert_fail@plt+0x1246c>
   23808:	mov	r1, #256	; 0x100
   2380c:	mov	r0, #4
   23810:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   23814:	ldr	r3, [sp, #16]
   23818:	cmp	r0, #0
   2381c:	mov	r6, r0
   23820:	str	r0, [r3, #44]	; 0x2c
   23824:	beq	23e0c <__assert_fail@plt+0x12268>
   23828:	ldr	r8, [sp, #24]
   2382c:	add	r4, r9, #96	; 0x60
   23830:	mov	lr, r0
   23834:	add	ip, r0, #1024	; 0x400
   23838:	ldr	r3, [r7, #4]!
   2383c:	cmp	r3, #0
   23840:	movne	r0, lr
   23844:	movne	r1, #1
   23848:	beq	23864 <__assert_fail@plt+0x11cc0>
   2384c:	tst	r3, #1
   23850:	bne	23f94 <__assert_fail@plt+0x123f0>
   23854:	lsrs	r3, r3, #1
   23858:	add	r0, r0, #4
   2385c:	lsl	r1, r1, #1
   23860:	bne	2384c <__assert_fail@plt+0x11ca8>
   23864:	add	lr, lr, #128	; 0x80
   23868:	add	r4, r4, #4
   2386c:	cmp	ip, lr
   23870:	add	r8, r8, #4
   23874:	bne	23838 <__assert_fail@plt+0x11c94>
   23878:	ldr	r3, [r5, #-2080]	; 0xfffff7e0
   2387c:	ubfx	r3, r3, #10, #1
   23880:	cmp	r3, #0
   23884:	beq	238b8 <__assert_fail@plt+0x11d14>
   23888:	ldr	ip, [sp, #20]
   2388c:	add	r2, sp, #6208	; 0x1840
   23890:	add	r1, r3, #1
   23894:	add	r2, r2, #40	; 0x28
   23898:	sub	r0, r3, #1
   2389c:	add	r2, r2, r3, lsl #5
   238a0:	ldr	r2, [r2, #-32]	; 0xffffffe0
   238a4:	tst	r2, #1024	; 0x400
   238a8:	bne	23ffc <__assert_fail@plt+0x12458>
   238ac:	cmp	ip, r3
   238b0:	mov	r3, r1
   238b4:	bne	2388c <__assert_fail@plt+0x11ce8>
   238b8:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   238bc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   238c0:	ldr	r3, [sp, #20]
   238c4:	ldr	r5, [sp, #28]
   238c8:	ldr	r2, [sp, #40]	; 0x28
   238cc:	add	r3, r3, r3, lsl #1
   238d0:	add	r4, r2, r3, lsl #2
   238d4:	add	r5, r5, #12
   238d8:	ldr	r0, [r5, #-4]
   238dc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   238e0:	cmp	r4, r5
   238e4:	bne	238d4 <__assert_fail@plt+0x11d30>
   238e8:	mov	r0, #1
   238ec:	b	23cb0 <__assert_fail@plt+0x1210c>
   238f0:	ldrb	r3, [r3, r1, lsl #3]
   238f4:	asr	r0, r3, #5
   238f8:	and	r3, r3, #31
   238fc:	ldr	r1, [r8, r0, lsl #2]
   23900:	orr	r3, r1, r6, lsl r3
   23904:	str	r3, [r8, r0, lsl #2]
   23908:	cmp	r2, #0
   2390c:	beq	239ec <__assert_fail@plt+0x11e48>
   23910:	tst	r2, #32
   23914:	bne	23c2c <__assert_fail@plt+0x12088>
   23918:	tst	r2, #128	; 0x80
   2391c:	bne	23c60 <__assert_fail@plt+0x120bc>
   23920:	tst	r2, #4
   23924:	beq	23988 <__assert_fail@plt+0x11de4>
   23928:	cmp	r6, #1
   2392c:	beq	23dec <__assert_fail@plt+0x12248>
   23930:	ldr	r1, [sp, #36]	; 0x24
   23934:	ldr	r3, [r1, #92]	; 0x5c
   23938:	cmp	r3, #1
   2393c:	ble	23d2c <__assert_fail@plt+0x12188>
   23940:	ldr	lr, [r1, #60]	; 0x3c
   23944:	add	r0, r1, #96	; 0x60
   23948:	add	r9, r1, #128	; 0x80
   2394c:	sub	ip, r8, #4
   23950:	mov	r1, #0
   23954:	sub	lr, lr, #4
   23958:	ldr	r3, [lr, #4]!
   2395c:	ldr	r5, [r0], #4
   23960:	ldr	r4, [ip, #4]!
   23964:	mvn	r3, r3
   23968:	orr	r3, r3, r5
   2396c:	cmp	r0, r9
   23970:	and	r3, r3, r4
   23974:	orr	r1, r1, r3
   23978:	str	r3, [ip]
   2397c:	bne	23958 <__assert_fail@plt+0x11db4>
   23980:	cmp	r1, #0
   23984:	beq	2367c <__assert_fail@plt+0x11ad8>
   23988:	tst	r2, #8
   2398c:	beq	239ec <__assert_fail@plt+0x11e48>
   23990:	cmp	r6, #1
   23994:	beq	23dd0 <__assert_fail@plt+0x1222c>
   23998:	ldr	r2, [sp, #36]	; 0x24
   2399c:	ldr	r3, [r2, #92]	; 0x5c
   239a0:	cmp	r3, #1
   239a4:	ble	23d94 <__assert_fail@plt+0x121f0>
   239a8:	ldr	lr, [r2, #60]	; 0x3c
   239ac:	sub	ip, r8, #4
   239b0:	add	r0, r2, #96	; 0x60
   239b4:	add	r5, r2, #128	; 0x80
   239b8:	mov	r1, #0
   239bc:	sub	lr, lr, #4
   239c0:	ldr	r2, [r0], #4
   239c4:	ldr	r4, [lr, #4]!
   239c8:	ldr	r3, [ip, #4]!
   239cc:	cmp	r5, r0
   239d0:	and	r2, r2, r4
   239d4:	bic	r3, r3, r2
   239d8:	orr	r1, r1, r3
   239dc:	str	r3, [ip]
   239e0:	bne	239c0 <__assert_fail@plt+0x11e1c>
   239e4:	cmp	r1, #0
   239e8:	beq	2367c <__assert_fail@plt+0x11ad8>
   239ec:	ldr	r3, [sp, #20]
   239f0:	cmp	r3, #0
   239f4:	movle	r5, #0
   239f8:	ble	23bb4 <__assert_fail@plt+0x12010>
   239fc:	add	r4, sp, #6272	; 0x1880
   23a00:	add	r9, sp, #2144	; 0x860
   23a04:	str	r6, [sp]
   23a08:	add	r4, r4, #4
   23a0c:	mov	r5, #0
   23a10:	ldr	r6, [sp, #20]
   23a14:	add	r9, r9, #8
   23a18:	b	23a60 <__assert_fail@plt+0x11ebc>
   23a1c:	ldr	r3, [sp, #12]
   23a20:	add	r0, sp, #14400	; 0x3840
   23a24:	add	r0, r0, #40	; 0x28
   23a28:	ldrb	r2, [r3]
   23a2c:	asr	r3, r2, #5
   23a30:	and	r2, r2, #31
   23a34:	add	r3, r0, r3, lsl #2
   23a38:	add	r3, r3, r1
   23a3c:	sub	r3, r3, #8192	; 0x2000
   23a40:	ldr	r3, [r3]
   23a44:	lsr	r2, r3, r2
   23a48:	tst	r2, #1
   23a4c:	bne	23a70 <__assert_fail@plt+0x11ecc>
   23a50:	add	r5, r5, #1
   23a54:	add	r4, r4, #32
   23a58:	cmp	r5, r6
   23a5c:	bge	23bb0 <__assert_fail@plt+0x1200c>
   23a60:	ldr	r3, [sp]
   23a64:	lsl	r1, r5, #5
   23a68:	cmp	r3, #1
   23a6c:	beq	23a1c <__assert_fail@plt+0x11e78>
   23a70:	sub	r1, r8, #4
   23a74:	sub	r2, r4, #32
   23a78:	mov	sl, r1
   23a7c:	mov	r0, r2
   23a80:	sub	lr, r7, #4
   23a84:	mov	ip, #0
   23a88:	ldr	fp, [r0, #4]!
   23a8c:	ldr	r3, [sl, #4]!
   23a90:	cmp	r0, r4
   23a94:	and	r3, r3, fp
   23a98:	orr	ip, ip, r3
   23a9c:	str	r3, [lr, #4]!
   23aa0:	bne	23a88 <__assert_fail@plt+0x11ee4>
   23aa4:	cmp	ip, #0
   23aa8:	beq	23a50 <__assert_fail@plt+0x11eac>
   23aac:	mov	sl, #0
   23ab0:	sub	fp, r9, #4
   23ab4:	mov	lr, sl
   23ab8:	ldr	r3, [r1, #4]!
   23abc:	ldr	ip, [r2, #4]!
   23ac0:	bic	r0, ip, r3
   23ac4:	bic	r3, r3, ip
   23ac8:	cmp	r2, r4
   23acc:	orr	lr, lr, r0
   23ad0:	orr	sl, sl, r3
   23ad4:	str	r0, [fp, #4]!
   23ad8:	str	r3, [r1]
   23adc:	bne	23ab8 <__assert_fail@plt+0x11f14>
   23ae0:	add	fp, r5, r5, lsl #1
   23ae4:	add	r3, sp, #3168	; 0xc60
   23ae8:	cmp	lr, #0
   23aec:	add	r3, r3, #8
   23af0:	str	sl, [sp, #28]
   23af4:	add	lr, r3, fp, lsl #2
   23af8:	str	lr, [sp, #20]
   23afc:	str	r3, [sp, #40]	; 0x28
   23b00:	beq	23b84 <__assert_fail@plt+0x11fe0>
   23b04:	add	r3, sp, #14400	; 0x3840
   23b08:	ldrd	r0, [r9]
   23b0c:	add	r3, r3, #40	; 0x28
   23b10:	add	ip, r3, r6, lsl #5
   23b14:	ldrd	sl, [r9, #16]
   23b18:	lsl	r3, r6, #1
   23b1c:	sub	ip, ip, #8192	; 0x2000
   23b20:	strd	r0, [ip]
   23b24:	ldrd	r0, [r9, #8]
   23b28:	strd	r0, [ip, #8]
   23b2c:	ldrd	r0, [r9, #24]
   23b30:	strd	sl, [ip, #16]
   23b34:	strd	r0, [ip, #24]
   23b38:	ldrd	r0, [r7]
   23b3c:	strd	r0, [r4, #-28]	; 0xffffffe4
   23b40:	add	r0, r3, r6
   23b44:	mov	r1, lr
   23b48:	ldrd	sl, [r7, #8]
   23b4c:	str	r3, [sp, #44]	; 0x2c
   23b50:	add	r3, sp, #3168	; 0xc60
   23b54:	add	r3, r3, #8
   23b58:	add	r0, r3, r0, lsl #2
   23b5c:	strd	sl, [r4, #-20]	; 0xffffffec
   23b60:	ldrd	sl, [r7, #16]
   23b64:	strd	sl, [r4, #-12]
   23b68:	ldrd	sl, [r7, #24]
   23b6c:	strd	sl, [r4, #-4]
   23b70:	bl	220a0 <__assert_fail@plt+0x104fc>
   23b74:	cmp	r0, #0
   23b78:	ldr	r3, [sp, #44]	; 0x2c
   23b7c:	bne	23de4 <__assert_fail@plt+0x12240>
   23b80:	add	r6, r6, #1
   23b84:	ldr	r3, [sp, #16]
   23b88:	ldr	r0, [sp, #20]
   23b8c:	ldr	r2, [sp, #32]
   23b90:	ldr	r3, [r3, #12]
   23b94:	ldr	r1, [r3, r2]
   23b98:	bl	20ea4 <__assert_fail@plt+0xf300>
   23b9c:	cmp	r0, #0
   23ba0:	beq	23c80 <__assert_fail@plt+0x120dc>
   23ba4:	ldr	r3, [sp, #28]
   23ba8:	cmp	r3, #0
   23bac:	bne	23a50 <__assert_fail@plt+0x11eac>
   23bb0:	str	r6, [sp, #20]
   23bb4:	ldr	r3, [sp, #20]
   23bb8:	cmp	r5, r3
   23bbc:	beq	23ea8 <__assert_fail@plt+0x12304>
   23bc0:	ldr	r3, [sp, #16]
   23bc4:	ldr	sl, [r3, #8]
   23bc8:	b	2367c <__assert_fail@plt+0x11ad8>
   23bcc:	ldr	r1, [sp, #36]	; 0x24
   23bd0:	ldr	r3, [r1, #92]	; 0x5c
   23bd4:	cmp	r3, #1
   23bd8:	ble	23d00 <__assert_fail@plt+0x1215c>
   23bdc:	ldr	lr, [r1, #60]	; 0x3c
   23be0:	sub	r0, r8, #4
   23be4:	sub	r1, lr, #4
   23be8:	add	lr, lr, #28
   23bec:	ldr	r3, [r0, #4]!
   23bf0:	ldr	ip, [r1, #4]!
   23bf4:	orr	r3, r3, ip
   23bf8:	cmp	r1, lr
   23bfc:	str	r3, [r0]
   23c00:	bne	23bec <__assert_fail@plt+0x12048>
   23c04:	ldr	r3, [sp, #36]	; 0x24
   23c08:	ldr	r3, [r3, #128]	; 0x80
   23c0c:	tst	r3, #64	; 0x40
   23c10:	beq	23cf0 <__assert_fail@plt+0x1214c>
   23c14:	tst	r3, #128	; 0x80
   23c18:	beq	23908 <__assert_fail@plt+0x11d64>
   23c1c:	ldr	r3, [sp, #104]	; 0x68
   23c20:	bic	r3, r3, #1
   23c24:	str	r3, [sp, #104]	; 0x68
   23c28:	b	23908 <__assert_fail@plt+0x11d64>
   23c2c:	ldrd	r0, [sp, #48]	; 0x30
   23c30:	str	r1, [r8, #4]
   23c34:	ldr	r3, [sp, #104]	; 0x68
   23c38:	str	r0, [r8]
   23c3c:	strd	r0, [r8, #8]
   23c40:	strd	r0, [r8, #16]
   23c44:	strd	r0, [r8, #24]
   23c48:	tst	r3, #1024	; 0x400
   23c4c:	beq	2367c <__assert_fail@plt+0x11ad8>
   23c50:	mov	r3, #1024	; 0x400
   23c54:	tst	r2, #128	; 0x80
   23c58:	str	r3, [sp, #104]	; 0x68
   23c5c:	beq	23920 <__assert_fail@plt+0x11d7c>
   23c60:	ldr	r3, [sp, #48]	; 0x30
   23c64:	ldr	r2, [sp, #52]	; 0x34
   23c68:	str	r3, [r8]
   23c6c:	strd	r2, [r8, #4]
   23c70:	strd	r2, [r8, #12]
   23c74:	strd	r2, [r8, #20]
   23c78:	str	r2, [r8, #28]
   23c7c:	b	2367c <__assert_fail@plt+0x11ad8>
   23c80:	lsl	r3, r6, #1
   23c84:	str	r6, [sp, #20]
   23c88:	ldr	r2, [sp, #20]
   23c8c:	ldr	r4, [sp, #40]	; 0x28
   23c90:	add	r3, r3, r2
   23c94:	add	r5, r4, r3, lsl #2
   23c98:	add	r4, r4, #12
   23c9c:	ldr	r0, [r4, #-4]
   23ca0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   23ca4:	cmp	r5, r4
   23ca8:	bne	23c98 <__assert_fail@plt+0x120f4>
   23cac:	mov	r0, #0
   23cb0:	add	sp, sp, #14400	; 0x3840
   23cb4:	add	sp, sp, #44	; 0x2c
   23cb8:	ldrd	r4, [sp]
   23cbc:	ldrd	r6, [sp, #8]
   23cc0:	ldrd	r8, [sp, #16]
   23cc4:	ldrd	sl, [sp, #24]
   23cc8:	add	sp, sp, #32
   23ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   23cd0:	ldr	r3, [sp, #36]	; 0x24
   23cd4:	mvn	r0, #0
   23cd8:	mvn	r1, #0
   23cdc:	strd	r0, [r8]
   23ce0:	strd	r0, [r8, #8]
   23ce4:	ldr	r3, [r3, #128]	; 0x80
   23ce8:	tst	r3, #64	; 0x40
   23cec:	bne	23c14 <__assert_fail@plt+0x12070>
   23cf0:	ldr	r1, [sp, #104]	; 0x68
   23cf4:	bic	r1, r1, #1024	; 0x400
   23cf8:	str	r1, [sp, #104]	; 0x68
   23cfc:	b	23c14 <__assert_fail@plt+0x12070>
   23d00:	ldr	r3, [sp, #36]	; 0x24
   23d04:	mvn	r0, #0
   23d08:	mvn	r1, #0
   23d0c:	strd	r0, [r8]
   23d10:	strd	r0, [r8, #8]
   23d14:	strd	r0, [r8, #16]
   23d18:	ldr	r3, [r3, #128]	; 0x80
   23d1c:	strd	r0, [r8, #24]
   23d20:	tst	r3, #64	; 0x40
   23d24:	bne	23c14 <__assert_fail@plt+0x12070>
   23d28:	b	23cf0 <__assert_fail@plt+0x1214c>
   23d2c:	ldr	r3, [sp, #36]	; 0x24
   23d30:	sub	ip, r8, #4
   23d34:	mov	r1, #0
   23d38:	add	r0, r3, #96	; 0x60
   23d3c:	add	r4, r3, #128	; 0x80
   23d40:	ldr	r3, [r0], #4
   23d44:	ldr	lr, [ip, #4]!
   23d48:	cmp	r0, r4
   23d4c:	and	r3, r3, lr
   23d50:	orr	r1, r1, r3
   23d54:	str	r3, [ip]
   23d58:	bne	23d40 <__assert_fail@plt+0x1219c>
   23d5c:	cmp	r1, #0
   23d60:	bne	23988 <__assert_fail@plt+0x11de4>
   23d64:	b	2367c <__assert_fail@plt+0x11ad8>
   23d68:	ldr	lr, [r3, r1, lsl #3]
   23d6c:	sub	r0, r8, #4
   23d70:	sub	r1, lr, #4
   23d74:	add	lr, lr, #28
   23d78:	ldr	r3, [r0, #4]!
   23d7c:	ldr	ip, [r1, #4]!
   23d80:	orr	r3, r3, ip
   23d84:	cmp	r1, lr
   23d88:	str	r3, [r0]
   23d8c:	bne	23d78 <__assert_fail@plt+0x121d4>
   23d90:	b	23908 <__assert_fail@plt+0x11d64>
   23d94:	ldr	r3, [sp, #36]	; 0x24
   23d98:	sub	r0, r8, #4
   23d9c:	mov	r1, #0
   23da0:	add	r2, r3, #96	; 0x60
   23da4:	add	lr, r3, #128	; 0x80
   23da8:	ldr	ip, [r2], #4
   23dac:	ldr	r3, [r0, #4]!
   23db0:	cmp	lr, r2
   23db4:	bic	r3, r3, ip
   23db8:	orr	r1, r1, r3
   23dbc:	str	r3, [r0]
   23dc0:	bne	23da8 <__assert_fail@plt+0x12204>
   23dc4:	cmp	r1, #0
   23dc8:	beq	2367c <__assert_fail@plt+0x11ad8>
   23dcc:	b	239ec <__assert_fail@plt+0x11e48>
   23dd0:	ldr	r3, [sp, #12]
   23dd4:	ldrb	r3, [r3, #6]
   23dd8:	tst	r3, #64	; 0x40
   23ddc:	beq	23998 <__assert_fail@plt+0x11df4>
   23de0:	b	23c60 <__assert_fail@plt+0x120bc>
   23de4:	str	r6, [sp, #20]
   23de8:	b	23c88 <__assert_fail@plt+0x120e4>
   23dec:	ldr	r3, [sp, #12]
   23df0:	ldrb	r3, [r3, #6]
   23df4:	tst	r3, #64	; 0x40
   23df8:	bne	23930 <__assert_fail@plt+0x11d8c>
   23dfc:	b	23c60 <__assert_fail@plt+0x120bc>
   23e00:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   23e04:	cmp	r3, #0
   23e08:	beq	23e6c <__assert_fail@plt+0x122c8>
   23e0c:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   23e10:	ldr	r4, [sp, #40]	; 0x28
   23e14:	bl	17ac8 <__assert_fail@plt+0x5f24>
   23e18:	ldr	r3, [sp, #20]
   23e1c:	add	r5, r3, r3, lsl #1
   23e20:	add	r5, r4, r5, lsl #2
   23e24:	add	r4, r4, #12
   23e28:	ldr	r0, [r4, #-4]
   23e2c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   23e30:	cmp	r5, r4
   23e34:	bne	23e24 <__assert_fail@plt+0x12280>
   23e38:	b	23cac <__assert_fail@plt+0x12108>
   23e3c:	mov	r3, #1
   23e40:	add	r2, sp, #60	; 0x3c
   23e44:	ldr	r0, [sp, #12]
   23e48:	mov	r1, r9
   23e4c:	bl	22294 <__assert_fail@plt+0x106f0>
   23e50:	add	r3, sp, #1120	; 0x460
   23e54:	cmp	r0, #0
   23e58:	add	r3, r3, #8
   23e5c:	str	r0, [r3, sl, lsl #2]
   23e60:	beq	23e00 <__assert_fail@plt+0x1225c>
   23e64:	cmp	r7, r0
   23e68:	beq	23e78 <__assert_fail@plt+0x122d4>
   23e6c:	ldr	r3, [r9, #92]	; 0x5c
   23e70:	cmp	r3, #2
   23e74:	movge	fp, #1
   23e78:	mov	r3, #2
   23e7c:	add	r2, sp, #60	; 0x3c
   23e80:	ldr	r0, [sp, #12]
   23e84:	mov	r1, r9
   23e88:	bl	22294 <__assert_fail@plt+0x106f0>
   23e8c:	cmp	r0, #0
   23e90:	str	r0, [r5, sl, lsl #2]
   23e94:	bne	237c4 <__assert_fail@plt+0x11c20>
   23e98:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   23e9c:	cmp	r3, #0
   23ea0:	beq	237c4 <__assert_fail@plt+0x11c20>
   23ea4:	b	23e0c <__assert_fail@plt+0x12268>
   23ea8:	ldr	r0, [sp, #16]
   23eac:	add	r1, sp, #3168	; 0xc60
   23eb0:	add	r1, r1, #8
   23eb4:	ldr	r2, [sp, #20]
   23eb8:	str	r1, [sp, #40]	; 0x28
   23ebc:	ldrd	sl, [r8]
   23ec0:	ldr	ip, [r0, #12]
   23ec4:	lsl	r3, r2, #1
   23ec8:	ldr	lr, [sp, #32]
   23ecc:	add	r0, r3, r2
   23ed0:	add	r5, r1, r0, lsl #2
   23ed4:	str	r3, [sp, #12]
   23ed8:	mov	r3, r1
   23edc:	add	r1, sp, #14400	; 0x3840
   23ee0:	add	r1, r1, #40	; 0x28
   23ee4:	add	r2, r1, r2, lsl #5
   23ee8:	mov	r1, #1
   23eec:	ldr	r4, [ip, lr]
   23ef0:	sub	r2, r2, #8192	; 0x2000
   23ef4:	str	r1, [r3, r0, lsl #2]
   23ef8:	mov	r0, #4
   23efc:	str	r1, [r5, #4]
   23f00:	strd	sl, [r2]
   23f04:	ldrd	sl, [r8, #16]
   23f08:	strd	sl, [sp]
   23f0c:	ldrd	sl, [r8, #8]
   23f10:	strd	sl, [r2, #8]
   23f14:	ldrd	sl, [sp]
   23f18:	strd	sl, [r2, #16]
   23f1c:	ldrd	sl, [r8, #24]
   23f20:	strd	sl, [r2, #24]
   23f24:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   23f28:	cmp	r0, #0
   23f2c:	str	r0, [r5, #8]
   23f30:	ldr	r3, [sp, #12]
   23f34:	beq	23f54 <__assert_fail@plt+0x123b0>
   23f38:	str	r4, [r0]
   23f3c:	ldr	r3, [sp, #16]
   23f40:	ldr	sl, [r3, #8]
   23f44:	ldr	r3, [sp, #20]
   23f48:	add	r3, r3, #1
   23f4c:	str	r3, [sp, #20]
   23f50:	b	23c60 <__assert_fail@plt+0x120bc>
   23f54:	ldr	r2, [sp, #20]
   23f58:	str	r0, [r5]
   23f5c:	str	r0, [r5, #4]
   23f60:	cmp	r2, #0
   23f64:	beq	23cac <__assert_fail@plt+0x12108>
   23f68:	b	23c88 <__assert_fail@plt+0x120e4>
   23f6c:	add	r2, sp, #3168	; 0xc60
   23f70:	mov	r3, #12
   23f74:	add	r2, r2, #8
   23f78:	str	r3, [r5, #-2096]	; 0xfffff7d0
   23f7c:	str	r2, [sp, #40]	; 0x28
   23f80:	b	23e10 <__assert_fail@plt+0x1226c>
   23f84:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   23f88:	cmp	r3, #0
   23f8c:	beq	237a8 <__assert_fail@plt+0x11c04>
   23f90:	b	23e0c <__assert_fail@plt+0x12268>
   23f94:	ldr	r2, [r8]
   23f98:	ands	r2, r1, r2
   23f9c:	bne	23ff4 <__assert_fail@plt+0x12450>
   23fa0:	add	r2, r2, #1
   23fa4:	ldr	r9, [r8, r2, lsl #5]
   23fa8:	tst	r1, r9
   23fac:	beq	23fa0 <__assert_fail@plt+0x123fc>
   23fb0:	ldr	r9, [r4]
   23fb4:	add	r2, r5, r2, lsl #2
   23fb8:	tst	r1, r9
   23fbc:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   23fc0:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   23fc4:	str	r2, [r0]
   23fc8:	b	23854 <__assert_fail@plt+0x11cb0>
   23fcc:	bne	23cac <__assert_fail@plt+0x12108>
   23fd0:	mov	r1, #256	; 0x100
   23fd4:	mov	r0, #4
   23fd8:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   23fdc:	ldr	r2, [sp, #16]
   23fe0:	mov	r3, r0
   23fe4:	adds	r0, r0, #0
   23fe8:	movne	r0, #1
   23fec:	str	r3, [r2, #44]	; 0x2c
   23ff0:	b	23cb0 <__assert_fail@plt+0x1210c>
   23ff4:	mov	r2, #0
   23ff8:	b	23fb0 <__assert_fail@plt+0x1240c>
   23ffc:	ldr	r3, [r5, r0, lsl #2]
   24000:	cmp	fp, #0
   24004:	strne	r3, [r6, #1064]	; 0x428
   24008:	str	r3, [r6, #40]	; 0x28
   2400c:	b	238b8 <__assert_fail@plt+0x11d14>
   24010:	mov	r1, #512	; 0x200
   24014:	mov	r0, #4
   24018:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   2401c:	ldr	r3, [sp, #16]
   24020:	cmp	r0, #0
   24024:	mov	r6, r0
   24028:	str	r0, [r3, #48]	; 0x30
   2402c:	beq	23e0c <__assert_fail@plt+0x12268>
   24030:	ldr	ip, [sp, #24]
   24034:	mov	lr, r0
   24038:	add	r4, r0, #1024	; 0x400
   2403c:	ldr	r3, [r7, #4]!
   24040:	cmp	r3, #0
   24044:	movne	r0, lr
   24048:	movne	r1, #1
   2404c:	beq	24068 <__assert_fail@plt+0x124c4>
   24050:	tst	r3, #1
   24054:	bne	2407c <__assert_fail@plt+0x124d8>
   24058:	lsrs	r3, r3, #1
   2405c:	add	r0, r0, #4
   24060:	lsl	r1, r1, #1
   24064:	bne	24050 <__assert_fail@plt+0x124ac>
   24068:	add	lr, lr, #128	; 0x80
   2406c:	add	ip, ip, #4
   24070:	cmp	r4, lr
   24074:	bne	2403c <__assert_fail@plt+0x12498>
   24078:	b	23878 <__assert_fail@plt+0x11cd4>
   2407c:	ldr	r2, [ip]
   24080:	ands	r2, r1, r2
   24084:	bne	240b0 <__assert_fail@plt+0x1250c>
   24088:	add	r2, r2, #1
   2408c:	ldr	r8, [ip, r2, lsl #5]
   24090:	tst	r1, r8
   24094:	beq	24088 <__assert_fail@plt+0x124e4>
   24098:	add	r2, r5, r2, lsl #2
   2409c:	ldr	r8, [r2, #-2048]	; 0xfffff800
   240a0:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   240a4:	str	r8, [r0]
   240a8:	str	r2, [r0, #1024]	; 0x400
   240ac:	b	24058 <__assert_fail@plt+0x124b4>
   240b0:	mov	r2, #0
   240b4:	b	24098 <__assert_fail@plt+0x124f4>
   240b8:	cmp	r1, #0
   240bc:	strd	r4, [sp, #-16]!
   240c0:	mov	r5, r0
   240c4:	str	r6, [sp, #8]
   240c8:	str	lr, [sp, #12]
   240cc:	blt	24180 <__assert_fail@plt+0x125dc>
   240d0:	ldr	r3, [r0, #48]	; 0x30
   240d4:	cmp	r3, r1
   240d8:	beq	24194 <__assert_fail@plt+0x125f0>
   240dc:	ldr	r3, [r0, #80]	; 0x50
   240e0:	cmp	r3, #1
   240e4:	ble	24134 <__assert_fail@plt+0x12590>
   240e8:	ldr	r3, [r0, #8]
   240ec:	add	r3, r3, r1, lsl #2
   240f0:	b	240fc <__assert_fail@plt+0x12558>
   240f4:	cmn	r1, #1
   240f8:	beq	24180 <__assert_fail@plt+0x125dc>
   240fc:	ldr	r4, [r3], #-4
   24100:	sub	r1, r1, #1
   24104:	cmn	r4, #1
   24108:	beq	240f4 <__assert_fail@plt+0x12550>
   2410c:	ldrb	r3, [r5, #78]	; 0x4e
   24110:	cmp	r3, #0
   24114:	bne	241a4 <__assert_fail@plt+0x12600>
   24118:	cmp	r4, #10
   2411c:	movne	r0, #0
   24120:	beq	24160 <__assert_fail@plt+0x125bc>
   24124:	ldrd	r4, [sp]
   24128:	ldr	r6, [sp, #8]
   2412c:	add	sp, sp, #12
   24130:	pop	{pc}		; (ldr pc, [sp], #4)
   24134:	ldr	r3, [r0, #4]
   24138:	ldr	r0, [r0, #68]	; 0x44
   2413c:	ldrb	r3, [r3, r1]
   24140:	asr	r1, r3, #5
   24144:	and	r2, r3, #31
   24148:	ldr	r0, [r0, r1, lsl #2]
   2414c:	lsr	r0, r0, r2
   24150:	ands	r0, r0, #1
   24154:	bne	24124 <__assert_fail@plt+0x12580>
   24158:	cmp	r3, #10
   2415c:	bne	24124 <__assert_fail@plt+0x12580>
   24160:	ldrb	r3, [r5, #77]	; 0x4d
   24164:	ldrd	r4, [sp]
   24168:	ldr	r6, [sp, #8]
   2416c:	add	sp, sp, #12
   24170:	cmp	r3, #0
   24174:	moveq	r0, #0
   24178:	movne	r0, #2
   2417c:	pop	{pc}		; (ldr pc, [sp], #4)
   24180:	ldr	r6, [sp, #8]
   24184:	ldr	r0, [r5, #60]	; 0x3c
   24188:	ldrd	r4, [sp]
   2418c:	add	sp, sp, #12
   24190:	pop	{pc}		; (ldr pc, [sp], #4)
   24194:	tst	r2, #2
   24198:	movne	r0, #8
   2419c:	moveq	r0, #10
   241a0:	b	24124 <__assert_fail@plt+0x12580>
   241a4:	mov	r0, r4
   241a8:	bl	119c4 <iswalnum@plt>
   241ac:	sub	r3, r4, #95	; 0x5f
   241b0:	cmp	r0, #0
   241b4:	clz	r3, r3
   241b8:	lsr	r3, r3, #5
   241bc:	movne	r3, #1
   241c0:	cmp	r3, #0
   241c4:	movne	r0, #1
   241c8:	bne	24124 <__assert_fail@plt+0x12580>
   241cc:	b	24118 <__assert_fail@plt+0x12574>
   241d0:	ldrb	ip, [r1, #4]
   241d4:	str	r4, [sp, #-8]!
   241d8:	ldr	r3, [r0, #4]
   241dc:	str	lr, [sp, #4]
   241e0:	sub	ip, ip, #1
   241e4:	ldrb	r3, [r3, r2]
   241e8:	cmp	ip, #6
   241ec:	ldrls	pc, [pc, ip, lsl #2]
   241f0:	b	2421c <__assert_fail@plt+0x12678>
   241f4:	andeq	r4, r2, r0, lsl r2
   241f8:	andeq	r4, r2, ip, lsl r2
   241fc:	andeq	r4, r2, r0, asr #5
   24200:	andeq	r4, r2, ip, lsl r2
   24204:	andeq	r4, r2, r4, lsr r2
   24208:	andeq	r4, r2, ip, lsl r2
   2420c:	andeq	r4, r2, ip, lsr #4
   24210:	ldrb	ip, [r1]
   24214:	cmp	ip, r3
   24218:	beq	24254 <__assert_fail@plt+0x126b0>
   2421c:	mov	r0, #0
   24220:	ldr	r4, [sp]
   24224:	add	sp, sp, #4
   24228:	pop	{pc}		; (ldr pc, [sp], #4)
   2422c:	tst	r3, #128	; 0x80
   24230:	bne	2421c <__assert_fail@plt+0x12678>
   24234:	cmp	r3, #10
   24238:	beq	242f4 <__assert_fail@plt+0x12750>
   2423c:	cmp	r3, #0
   24240:	bne	24254 <__assert_fail@plt+0x126b0>
   24244:	ldr	ip, [r0, #84]	; 0x54
   24248:	ldr	ip, [ip, #128]	; 0x80
   2424c:	tst	ip, #128	; 0x80
   24250:	bne	2421c <__assert_fail@plt+0x12678>
   24254:	ldr	r4, [r1, #4]
   24258:	mov	r3, #65280	; 0xff00
   2425c:	movt	r3, #3
   24260:	and	r3, r3, r4
   24264:	cmp	r3, #0
   24268:	beq	242b0 <__assert_fail@plt+0x1270c>
   2426c:	mov	r1, r2
   24270:	ldr	r2, [r0, #88]	; 0x58
   24274:	bl	240b8 <__assert_fail@plt+0x12514>
   24278:	ubfx	r1, r4, #8, #10
   2427c:	ands	r2, r1, #4
   24280:	bne	242e0 <__assert_fail@plt+0x1273c>
   24284:	tst	r1, #8
   24288:	beq	24294 <__assert_fail@plt+0x126f0>
   2428c:	tst	r0, #1
   24290:	bne	2421c <__assert_fail@plt+0x12678>
   24294:	tst	r1, #32
   24298:	beq	242a4 <__assert_fail@plt+0x12700>
   2429c:	ands	r3, r0, #2
   242a0:	beq	2421c <__assert_fail@plt+0x12678>
   242a4:	tst	r1, #128	; 0x80
   242a8:	ubfxne	r0, r0, #3, #1
   242ac:	bne	24220 <__assert_fail@plt+0x1267c>
   242b0:	ldr	r4, [sp]
   242b4:	add	sp, sp, #4
   242b8:	mov	r0, #1
   242bc:	pop	{pc}		; (ldr pc, [sp], #4)
   242c0:	ldr	ip, [r1]
   242c4:	asr	lr, r3, #5
   242c8:	and	r3, r3, #31
   242cc:	ldr	ip, [ip, lr, lsl #2]
   242d0:	lsr	r3, ip, r3
   242d4:	ands	r3, r3, #1
   242d8:	bne	24254 <__assert_fail@plt+0x126b0>
   242dc:	b	2421c <__assert_fail@plt+0x12678>
   242e0:	ands	r3, r0, #1
   242e4:	beq	2421c <__assert_fail@plt+0x12678>
   242e8:	tst	r1, #8
   242ec:	beq	24294 <__assert_fail@plt+0x126f0>
   242f0:	b	2421c <__assert_fail@plt+0x12678>
   242f4:	ldr	r3, [r0, #84]	; 0x54
   242f8:	ldr	r3, [r3, #128]	; 0x80
   242fc:	ands	r3, r3, #64	; 0x40
   24300:	bne	24254 <__assert_fail@plt+0x126b0>
   24304:	b	2421c <__assert_fail@plt+0x12678>
   24308:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2430c:	mov	r4, r0
   24310:	ldr	r5, [r0, #24]
   24314:	strd	r6, [sp, #8]
   24318:	mov	r7, r1
   2431c:	strd	r8, [sp, #16]
   24320:	mov	r8, r2
   24324:	strd	sl, [sp, #24]
   24328:	str	lr, [sp, #32]
   2432c:	sub	sp, sp, #44	; 0x2c
   24330:	cmp	r5, r1
   24334:	suble	r5, r1, r5
   24338:	ble	2439c <__assert_fail@plt+0x127f8>
   2433c:	ldr	r3, [r0, #80]	; 0x50
   24340:	cmp	r3, #1
   24344:	ble	24354 <__assert_fail@plt+0x127b0>
   24348:	mov	r2, #0
   2434c:	mov	r3, #0
   24350:	strd	r2, [r0, #16]
   24354:	ldrb	r3, [r4, #75]	; 0x4b
   24358:	mov	r2, #0
   2435c:	tst	r8, #1
   24360:	movne	r0, #4
   24364:	moveq	r0, #6
   24368:	ldr	ip, [r4, #44]	; 0x2c
   2436c:	mov	r5, r7
   24370:	str	r2, [r4, #24]
   24374:	ldr	r1, [r4, #52]	; 0x34
   24378:	cmp	r3, r2
   2437c:	str	r2, [r4, #28]
   24380:	ldreq	r3, [r4]
   24384:	str	r2, [r4, #32]
   24388:	str	ip, [r4, #48]	; 0x30
   2438c:	str	r1, [r4, #56]	; 0x38
   24390:	str	r0, [r4, #60]	; 0x3c
   24394:	streq	r3, [r4, #4]
   24398:	strb	r2, [r4, #76]	; 0x4c
   2439c:	cmp	r5, #0
   243a0:	beq	2451c <__assert_fail@plt+0x12978>
   243a4:	ldrb	r2, [r4, #76]	; 0x4c
   243a8:	ldr	r3, [r4, #32]
   243ac:	ldr	r6, [r4, #28]
   243b0:	cmp	r3, r5
   243b4:	ble	2452c <__assert_fail@plt+0x12988>
   243b8:	cmp	r2, #0
   243bc:	bne	24698 <__assert_fail@plt+0x12af4>
   243c0:	mov	r2, r8
   243c4:	sub	r1, r5, #1
   243c8:	mov	r0, r4
   243cc:	bl	240b8 <__assert_fail@plt+0x12514>
   243d0:	ldr	r3, [r4, #80]	; 0x50
   243d4:	sub	r2, r6, r5
   243d8:	str	r0, [r4, #60]	; 0x3c
   243dc:	cmp	r3, #1
   243e0:	bgt	24478 <__assert_fail@plt+0x128d4>
   243e4:	ldrb	r3, [r4, #75]	; 0x4b
   243e8:	cmp	r3, #0
   243ec:	bne	246d8 <__assert_fail@plt+0x12b34>
   243f0:	ldr	ip, [r4, #32]
   243f4:	str	r2, [r4, #28]
   243f8:	ldr	r1, [r4, #48]	; 0x30
   243fc:	ldr	r0, [r4, #56]	; 0x38
   24400:	sub	ip, ip, r5
   24404:	ldr	r2, [r4, #80]	; 0x50
   24408:	sub	r1, r1, r5
   2440c:	str	ip, [r4, #32]
   24410:	sub	r0, r0, r5
   24414:	cmp	r3, #0
   24418:	bne	24428 <__assert_fail@plt+0x12884>
   2441c:	ldr	r3, [r4, #4]
   24420:	add	r5, r3, r5
   24424:	str	r5, [r4, #4]
   24428:	cmp	r2, #1
   2442c:	str	r7, [r4, #24]
   24430:	str	r1, [r4, #48]	; 0x30
   24434:	str	r0, [r4, #56]	; 0x38
   24438:	ble	244a4 <__assert_fail@plt+0x12900>
   2443c:	ldrb	r3, [r4, #72]	; 0x48
   24440:	mov	r0, r4
   24444:	cmp	r3, #0
   24448:	bne	24494 <__assert_fail@plt+0x128f0>
   2444c:	bl	1ff24 <__assert_fail@plt+0xe380>
   24450:	mov	r3, #0
   24454:	mov	r0, r3
   24458:	str	r3, [r4, #40]	; 0x28
   2445c:	add	sp, sp, #44	; 0x2c
   24460:	ldrd	r4, [sp]
   24464:	ldrd	r6, [sp, #8]
   24468:	ldrd	r8, [sp, #16]
   2446c:	ldrd	sl, [sp, #24]
   24470:	add	sp, sp, #32
   24474:	pop	{pc}		; (ldr pc, [sp], #4)
   24478:	ldr	r0, [r4, #8]
   2447c:	lsl	r2, r2, #2
   24480:	add	r1, r0, r5, lsl #2
   24484:	bl	11748 <memmove@plt>
   24488:	ldr	r2, [r4, #28]
   2448c:	sub	r2, r2, r5
   24490:	b	243e4 <__assert_fail@plt+0x12840>
   24494:	bl	200c4 <__assert_fail@plt+0xe520>
   24498:	cmp	r0, #0
   2449c:	beq	24450 <__assert_fail@plt+0x128ac>
   244a0:	b	2445c <__assert_fail@plt+0x128b8>
   244a4:	ldrb	r3, [r4, #75]	; 0x4b
   244a8:	cmp	r3, #0
   244ac:	streq	r1, [r4, #28]
   244b0:	beq	24450 <__assert_fail@plt+0x128ac>
   244b4:	ldrb	r3, [r4, #72]	; 0x48
   244b8:	cmp	r3, #0
   244bc:	bne	24998 <__assert_fail@plt+0x12df4>
   244c0:	ldr	r0, [r4, #64]	; 0x40
   244c4:	cmp	r0, #0
   244c8:	beq	24450 <__assert_fail@plt+0x128ac>
   244cc:	ldr	r3, [r4, #28]
   244d0:	ldr	r2, [r4, #36]	; 0x24
   244d4:	cmp	r1, r2
   244d8:	movge	r1, r2
   244dc:	cmp	r1, r3
   244e0:	bgt	244f0 <__assert_fail@plt+0x1294c>
   244e4:	b	24af8 <__assert_fail@plt+0x12f54>
   244e8:	ldr	r7, [r4, #24]
   244ec:	ldr	r0, [r4, #64]	; 0x40
   244f0:	ldm	r4, {r2, ip}
   244f4:	add	r2, r2, r3
   244f8:	ldrb	r2, [r2, r7]
   244fc:	ldrb	r2, [r0, r2]
   24500:	strb	r2, [ip, r3]
   24504:	add	r3, r3, #1
   24508:	cmp	r1, r3
   2450c:	bne	244e8 <__assert_fail@plt+0x12944>
   24510:	str	r1, [r4, #28]
   24514:	str	r1, [r4, #32]
   24518:	b	24450 <__assert_fail@plt+0x128ac>
   2451c:	ldr	r1, [r4, #48]	; 0x30
   24520:	ldr	r0, [r4, #56]	; 0x38
   24524:	ldr	r2, [r4, #80]	; 0x50
   24528:	b	24428 <__assert_fail@plt+0x12884>
   2452c:	cmp	r2, #0
   24530:	bne	24a34 <__assert_fail@plt+0x12e90>
   24534:	mov	r1, #0
   24538:	ldr	r9, [r4, #24]
   2453c:	ldr	r2, [r4, #80]	; 0x50
   24540:	str	r1, [r4, #28]
   24544:	cmp	r2, #1
   24548:	ble	24858 <__assert_fail@plt+0x12cb4>
   2454c:	ldrb	r1, [r4, #73]	; 0x49
   24550:	cmp	r1, #0
   24554:	beq	245c8 <__assert_fail@plt+0x12a24>
   24558:	ldr	r0, [r4]
   2455c:	sub	r2, r5, r2
   24560:	sub	r1, r5, #1
   24564:	add	ip, r0, r9
   24568:	add	r2, ip, r2
   2456c:	add	lr, ip, r1
   24570:	cmp	r0, r2
   24574:	movcc	r0, r2
   24578:	str	lr, [sp, #4]
   2457c:	cmp	lr, r0
   24580:	str	ip, [sp, #8]
   24584:	bcc	245c8 <__assert_fail@plt+0x12a24>
   24588:	ldrb	r2, [ip, r1]
   2458c:	and	r2, r2, #192	; 0xc0
   24590:	cmp	r2, #128	; 0x80
   24594:	bne	249a8 <__assert_fail@plt+0x12e04>
   24598:	ldmib	sp, {r2, fp}
   2459c:	sub	r0, r0, #1
   245a0:	sub	r2, r2, #1
   245a4:	b	245bc <__assert_fail@plt+0x12a18>
   245a8:	ldrb	r1, [sl]
   245ac:	sub	r2, r2, #1
   245b0:	and	r1, r1, #192	; 0xc0
   245b4:	cmp	r1, #128	; 0x80
   245b8:	bne	249a4 <__assert_fail@plt+0x12e00>
   245bc:	cmp	r0, r2
   245c0:	mov	sl, r2
   245c4:	bne	245a8 <__assert_fail@plt+0x12a04>
   245c8:	add	r9, r9, r3
   245cc:	cmp	r7, r9
   245d0:	ble	248d8 <__assert_fail@plt+0x12d34>
   245d4:	add	fp, r4, #16
   245d8:	add	sl, sp, #24
   245dc:	stmib	sp, {r4, r6}
   245e0:	str	r5, [sp, #12]
   245e4:	ldr	r2, [sp, #4]
   245e8:	mov	r3, fp
   245ec:	mov	r0, sl
   245f0:	ldrd	r4, [fp]
   245f4:	ldr	r1, [r2]
   245f8:	ldr	r6, [r2, #44]	; 0x2c
   245fc:	strd	r4, [sp, #32]
   24600:	add	r1, r1, r9
   24604:	sub	r6, r6, r9
   24608:	mov	r2, r6
   2460c:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   24610:	sub	r3, r0, #1
   24614:	cmn	r3, #4
   24618:	ldrls	r1, [sp, #24]
   2461c:	bhi	24a60 <__assert_fail@plt+0x12ebc>
   24620:	add	r9, r9, r0
   24624:	cmp	r7, r9
   24628:	bgt	245e4 <__assert_fail@plt+0x12a40>
   2462c:	ldmib	sp, {r4, r6}
   24630:	sub	r9, r9, r7
   24634:	cmn	r1, #1
   24638:	ldr	r5, [sp, #12]
   2463c:	str	r9, [r4, #28]
   24640:	beq	248e0 <__assert_fail@plt+0x12d3c>
   24644:	ldrb	r3, [r4, #78]	; 0x4e
   24648:	cmp	r3, #0
   2464c:	bne	24ac8 <__assert_fail@plt+0x12f24>
   24650:	cmp	r1, #10
   24654:	movne	r3, #0
   24658:	bne	2466c <__assert_fail@plt+0x12ac8>
   2465c:	ldrb	r3, [r4, #77]	; 0x4d
   24660:	cmp	r3, #0
   24664:	moveq	r3, #0
   24668:	movne	r3, #2
   2466c:	str	r3, [r4, #60]	; 0x3c
   24670:	cmp	r9, #0
   24674:	bne	24a8c <__assert_fail@plt+0x12ee8>
   24678:	ldrb	r3, [r4, #75]	; 0x4b
   2467c:	str	r9, [r4, #32]
   24680:	ldr	r1, [r4, #48]	; 0x30
   24684:	ldr	r0, [r4, #56]	; 0x38
   24688:	ldr	r2, [r4, #80]	; 0x50
   2468c:	sub	r1, r1, r5
   24690:	sub	r0, r0, r5
   24694:	b	24414 <__assert_fail@plt+0x12870>
   24698:	mov	r3, r6
   2469c:	mov	r2, #0
   246a0:	ldr	r9, [r4, #12]
   246a4:	b	246b8 <__assert_fail@plt+0x12b14>
   246a8:	bge	2484c <__assert_fail@plt+0x12ca8>
   246ac:	add	r2, r1, #1
   246b0:	cmp	r2, r3
   246b4:	bge	246f4 <__assert_fail@plt+0x12b50>
   246b8:	add	r1, r2, r3
   246bc:	add	r1, r1, r1, lsr #31
   246c0:	asr	r1, r1, #1
   246c4:	ldr	r0, [r9, r1, lsl #2]
   246c8:	cmp	r0, r5
   246cc:	ble	246a8 <__assert_fail@plt+0x12b04>
   246d0:	mov	r3, r1
   246d4:	b	246b0 <__assert_fail@plt+0x12b0c>
   246d8:	ldr	r0, [r4, #4]
   246dc:	add	r1, r0, r5
   246e0:	bl	11748 <memmove@plt>
   246e4:	ldr	r2, [r4, #28]
   246e8:	ldrb	r3, [r4, #75]	; 0x4b
   246ec:	sub	r2, r2, r5
   246f0:	b	243f0 <__assert_fail@plt+0x1284c>
   246f4:	cmp	r0, r5
   246f8:	addlt	sl, r1, #1
   246fc:	bge	2484c <__assert_fail@plt+0x12ca8>
   24700:	mov	r2, r8
   24704:	mov	r0, r4
   24708:	bl	240b8 <__assert_fail@plt+0x12514>
   2470c:	sub	r3, r5, sl
   24710:	cmp	r6, r5
   24714:	str	r0, [r4, #60]	; 0x3c
   24718:	clz	r3, r3
   2471c:	lsr	r3, r3, #5
   24720:	movle	r3, #0
   24724:	cmp	r3, #0
   24728:	bne	248f8 <__assert_fail@plt+0x12d54>
   2472c:	ldr	r1, [r4, #44]	; 0x2c
   24730:	mov	r3, #0
   24734:	cmp	sl, #0
   24738:	ldr	r0, [r4, #52]	; 0x34
   2473c:	strb	r3, [r4, #76]	; 0x4c
   24740:	sub	r1, r1, r7
   24744:	add	r2, r1, r5
   24748:	sub	r0, r0, r7
   2474c:	add	r3, r0, r5
   24750:	str	r2, [r4, #48]	; 0x30
   24754:	str	r3, [r4, #56]	; 0x38
   24758:	ble	24788 <__assert_fail@plt+0x12be4>
   2475c:	sub	r3, sl, #-1073741823	; 0xc0000001
   24760:	ldr	r2, [r9, r3, lsl #2]
   24764:	add	r3, r9, r3, lsl #2
   24768:	cmp	r2, r5
   2476c:	beq	24780 <__assert_fail@plt+0x12bdc>
   24770:	b	24788 <__assert_fail@plt+0x12be4>
   24774:	ldr	r2, [r3, #-4]!
   24778:	cmp	r2, r5
   2477c:	bne	24788 <__assert_fail@plt+0x12be4>
   24780:	subs	sl, sl, #1
   24784:	bne	24774 <__assert_fail@plt+0x12bd0>
   24788:	cmp	r6, sl
   2478c:	ble	247e4 <__assert_fail@plt+0x12c40>
   24790:	ldr	r3, [r4, #8]
   24794:	lsl	ip, sl, #2
   24798:	ldr	r2, [r3, sl, lsl #2]
   2479c:	add	r3, r3, ip
   247a0:	cmn	r2, #1
   247a4:	beq	247b8 <__assert_fail@plt+0x12c14>
   247a8:	b	247ec <__assert_fail@plt+0x12c48>
   247ac:	ldr	r2, [r3, #4]!
   247b0:	cmn	r2, #1
   247b4:	bne	247ec <__assert_fail@plt+0x12c48>
   247b8:	add	sl, sl, #1
   247bc:	cmp	r6, sl
   247c0:	lsl	ip, sl, #2
   247c4:	bne	247ac <__assert_fail@plt+0x12c08>
   247c8:	mov	r3, #0
   247cc:	mov	r2, r3
   247d0:	str	r3, [r4, #28]
   247d4:	ldrb	r3, [r4, #75]	; 0x4b
   247d8:	str	r2, [r4, #32]
   247dc:	ldr	r2, [r4, #80]	; 0x50
   247e0:	b	24414 <__assert_fail@plt+0x12870>
   247e4:	beq	247c8 <__assert_fail@plt+0x12c24>
   247e8:	lsl	ip, sl, #2
   247ec:	ldr	r2, [r9, ip]
   247f0:	sub	r2, r2, r5
   247f4:	cmp	r2, #0
   247f8:	str	r2, [r4, #28]
   247fc:	beq	247d4 <__assert_fail@plt+0x12c30>
   24800:	ble	24828 <__assert_fail@plt+0x12c84>
   24804:	ldr	r1, [r4, #8]
   24808:	mov	r3, #0
   2480c:	mvn	r0, #0
   24810:	sub	r1, r1, #4
   24814:	str	r0, [r1, #4]!
   24818:	add	r3, r3, #1
   2481c:	ldr	r2, [r4, #28]
   24820:	cmp	r2, r3
   24824:	bgt	24814 <__assert_fail@plt+0x12c70>
   24828:	mov	r1, #255	; 0xff
   2482c:	ldr	r0, [r4, #4]
   24830:	bl	119e8 <memset@plt>
   24834:	ldr	r2, [r4, #28]
   24838:	ldr	r1, [r4, #48]	; 0x30
   2483c:	ldr	r0, [r4, #56]	; 0x38
   24840:	sub	r1, r1, r5
   24844:	sub	r0, r0, r5
   24848:	b	247d4 <__assert_fail@plt+0x12c30>
   2484c:	mov	sl, r1
   24850:	sub	r1, r1, #1
   24854:	b	24700 <__assert_fail@plt+0x12b5c>
   24858:	ldr	r3, [r4]
   2485c:	ldr	ip, [r4, #64]	; 0x40
   24860:	add	r3, r3, r5
   24864:	add	r9, r3, r9
   24868:	ldrb	r0, [r9, #-1]
   2486c:	cmp	ip, #0
   24870:	str	r1, [r4, #32]
   24874:	ldrbne	r0, [ip, r0]
   24878:	ldr	ip, [r4, #68]	; 0x44
   2487c:	asr	r1, r0, #5
   24880:	and	r3, r0, #31
   24884:	ldr	r1, [ip, r1, lsl #2]
   24888:	lsr	r3, r1, r3
   2488c:	ands	r1, r3, #1
   24890:	bne	248a8 <__assert_fail@plt+0x12d04>
   24894:	cmp	r0, #10
   24898:	bne	248a8 <__assert_fail@plt+0x12d04>
   2489c:	ldrb	r3, [r4, #77]	; 0x4d
   248a0:	cmp	r3, #0
   248a4:	movne	r1, #2
   248a8:	ldrb	r3, [r4, #75]	; 0x4b
   248ac:	str	r1, [r4, #60]	; 0x3c
   248b0:	ldr	r1, [r4, #48]	; 0x30
   248b4:	ldr	r0, [r4, #56]	; 0x38
   248b8:	cmp	r3, #0
   248bc:	sub	r1, r1, r5
   248c0:	sub	r0, r0, r5
   248c4:	beq	2441c <__assert_fail@plt+0x12878>
   248c8:	str	r7, [r4, #24]
   248cc:	str	r1, [r4, #48]	; 0x30
   248d0:	str	r0, [r4, #56]	; 0x38
   248d4:	b	244a8 <__assert_fail@plt+0x12904>
   248d8:	sub	r9, r9, r7
   248dc:	str	r9, [r4, #28]
   248e0:	mov	r2, r8
   248e4:	sub	r1, r6, #1
   248e8:	mov	r0, r4
   248ec:	bl	240b8 <__assert_fail@plt+0x12514>
   248f0:	str	r0, [r4, #60]	; 0x3c
   248f4:	b	24670 <__assert_fail@plt+0x12acc>
   248f8:	ldr	r3, [r9, sl, lsl #2]
   248fc:	cmp	r3, r5
   24900:	bne	2472c <__assert_fail@plt+0x12b88>
   24904:	ldr	r0, [r4, #8]
   24908:	lsl	r8, r5, #2
   2490c:	sub	r2, r6, r5
   24910:	lsl	r2, r2, #2
   24914:	add	r1, r0, r8
   24918:	bl	11748 <memmove@plt>
   2491c:	ldr	r0, [r4, #4]
   24920:	ldr	r2, [r4, #28]
   24924:	add	r1, r0, r5
   24928:	sub	r2, r2, r5
   2492c:	bl	11748 <memmove@plt>
   24930:	ldr	r3, [r4, #28]
   24934:	ldr	r2, [r4, #32]
   24938:	sub	r3, r3, r5
   2493c:	cmp	r3, #0
   24940:	sub	r2, r2, r5
   24944:	str	r3, [r4, #28]
   24948:	str	r2, [r4, #32]
   2494c:	ble	2497c <__assert_fail@plt+0x12dd8>
   24950:	ldr	r1, [r4, #12]
   24954:	mov	r2, #0
   24958:	add	r0, r1, r8
   2495c:	sub	r1, r1, #4
   24960:	ldr	r3, [r0], #4
   24964:	add	r2, r2, #1
   24968:	sub	r3, r3, r5
   2496c:	str	r3, [r1, #4]!
   24970:	ldr	r3, [r4, #28]
   24974:	cmp	r3, r2
   24978:	bgt	24960 <__assert_fail@plt+0x12dbc>
   2497c:	ldr	r1, [r4, #48]	; 0x30
   24980:	ldr	r0, [r4, #56]	; 0x38
   24984:	ldrb	r3, [r4, #75]	; 0x4b
   24988:	sub	r1, r1, r5
   2498c:	ldr	r2, [r4, #80]	; 0x50
   24990:	sub	r0, r0, r5
   24994:	b	24414 <__assert_fail@plt+0x12870>
   24998:	mov	r0, r4
   2499c:	bl	20684 <__assert_fail@plt+0xeae0>
   249a0:	b	24450 <__assert_fail@plt+0x128ac>
   249a4:	strd	sl, [sp, #4]
   249a8:	ldr	r1, [sp, #8]
   249ac:	ldr	r2, [r4, #48]	; 0x30
   249b0:	ldr	r3, [r4, #64]	; 0x40
   249b4:	add	r2, r1, r2
   249b8:	ldr	r1, [sp, #4]
   249bc:	cmp	r3, #0
   249c0:	sub	r2, r2, r1
   249c4:	ldreq	r1, [sp, #4]
   249c8:	bne	24b18 <__assert_fail@plt+0x12f74>
   249cc:	mov	sl, #0
   249d0:	mov	fp, #0
   249d4:	add	r3, sp, #32
   249d8:	add	r0, sp, #20
   249dc:	strd	sl, [sp, #32]
   249e0:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   249e4:	ldr	r3, [sp, #8]
   249e8:	add	r9, r3, r5
   249ec:	ldr	r3, [sp, #4]
   249f0:	sub	r9, r9, r3
   249f4:	cmp	r0, r9
   249f8:	bcc	24a04 <__assert_fail@plt+0x12e60>
   249fc:	cmn	r0, #3
   24a00:	bls	24a10 <__assert_fail@plt+0x12e6c>
   24a04:	ldr	r9, [r4, #24]
   24a08:	ldr	r3, [r4, #32]
   24a0c:	b	245c8 <__assert_fail@plt+0x12a24>
   24a10:	ldr	r1, [sp, #20]
   24a14:	sub	r9, r0, r9
   24a18:	mov	r2, #0
   24a1c:	mov	r3, #0
   24a20:	strd	r2, [r4, #16]
   24a24:	str	r9, [r4, #28]
   24a28:	cmn	r1, #1
   24a2c:	bne	24644 <__assert_fail@plt+0x12aa0>
   24a30:	b	24a04 <__assert_fail@plt+0x12e60>
   24a34:	ldr	r1, [r4, #44]	; 0x2c
   24a38:	mov	r0, #0
   24a3c:	ldr	r2, [r4, #52]	; 0x34
   24a40:	strb	r0, [r4, #76]	; 0x4c
   24a44:	sub	r1, r1, r7
   24a48:	add	r1, r1, r5
   24a4c:	sub	r2, r2, r7
   24a50:	add	r2, r2, r5
   24a54:	str	r1, [r4, #48]	; 0x30
   24a58:	str	r2, [r4, #56]	; 0x38
   24a5c:	b	24534 <__assert_fail@plt+0x12990>
   24a60:	mov	r1, #0
   24a64:	cmp	r6, r1
   24a68:	cmpne	r0, r1
   24a6c:	beq	24a7c <__assert_fail@plt+0x12ed8>
   24a70:	ldr	r3, [sp, #4]
   24a74:	ldr	r3, [r3]
   24a78:	ldrb	r1, [r3, r9]
   24a7c:	mov	r0, #1
   24a80:	ldrd	r2, [sp, #32]
   24a84:	strd	r2, [fp]
   24a88:	b	24620 <__assert_fail@plt+0x12a7c>
   24a8c:	ble	24ab4 <__assert_fail@plt+0x12f10>
   24a90:	ldr	r2, [r4, #8]
   24a94:	mov	r3, #0
   24a98:	mvn	r1, #0
   24a9c:	sub	r2, r2, #4
   24aa0:	str	r1, [r2, #4]!
   24aa4:	add	r3, r3, #1
   24aa8:	ldr	r9, [r4, #28]
   24aac:	cmp	r9, r3
   24ab0:	bgt	24aa0 <__assert_fail@plt+0x12efc>
   24ab4:	ldrb	r3, [r4, #75]	; 0x4b
   24ab8:	cmp	r3, #0
   24abc:	bne	24b00 <__assert_fail@plt+0x12f5c>
   24ac0:	ldr	r9, [r4, #28]
   24ac4:	b	2467c <__assert_fail@plt+0x12ad8>
   24ac8:	mov	r0, r1
   24acc:	str	r1, [sp, #4]
   24ad0:	bl	119c4 <iswalnum@plt>
   24ad4:	ldr	r1, [sp, #4]
   24ad8:	subs	r3, r1, #95	; 0x5f
   24adc:	movne	r3, #1
   24ae0:	cmp	r0, #0
   24ae4:	movne	r3, #0
   24ae8:	cmp	r3, #0
   24aec:	moveq	r3, #1
   24af0:	beq	2466c <__assert_fail@plt+0x12ac8>
   24af4:	b	24650 <__assert_fail@plt+0x12aac>
   24af8:	mov	r1, r3
   24afc:	b	24510 <__assert_fail@plt+0x1296c>
   24b00:	mov	r2, r9
   24b04:	mov	r1, #255	; 0xff
   24b08:	ldr	r0, [r4, #4]
   24b0c:	bl	119e8 <memset@plt>
   24b10:	ldrb	r3, [r4, #75]	; 0x4b
   24b14:	b	24ac0 <__assert_fail@plt+0x12f1c>
   24b18:	cmp	r2, #6
   24b1c:	movlt	r1, r2
   24b20:	movge	r1, #6
   24b24:	cmp	r2, #0
   24b28:	ble	24b68 <__assert_fail@plt+0x12fc4>
   24b2c:	ldrd	sl, [sp, #4]
   24b30:	add	r0, sp, #24
   24b34:	mov	ip, r0
   24b38:	mov	lr, r0
   24b3c:	sub	r0, r1, #1
   24b40:	add	r0, ip, r0
   24b44:	add	r1, sl, r1
   24b48:	ldrb	ip, [r1, #-1]!
   24b4c:	ldrb	ip, [r3, ip]
   24b50:	cmp	sl, r1
   24b54:	strb	ip, [r0], #-1
   24b58:	bne	24b48 <__assert_fail@plt+0x12fa4>
   24b5c:	strd	sl, [sp, #4]
   24b60:	mov	r1, lr
   24b64:	b	249cc <__assert_fail@plt+0x12e28>
   24b68:	add	r3, sp, #24
   24b6c:	mov	lr, r3
   24b70:	b	24b60 <__assert_fail@plt+0x12fbc>
   24b74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24b78:	mov	r4, r1
   24b7c:	mov	r1, r2
   24b80:	ldr	r2, [r0, #88]	; 0x58
   24b84:	mov	r5, r0
   24b88:	strd	r6, [sp, #8]
   24b8c:	str	r8, [sp, #16]
   24b90:	str	lr, [sp, #20]
   24b94:	bl	240b8 <__assert_fail@plt+0x12514>
   24b98:	ldr	lr, [r4, #8]
   24b9c:	cmp	lr, #0
   24ba0:	ble	24c50 <__assert_fail@plt+0x130ac>
   24ba4:	ldr	r3, [r5, #84]	; 0x54
   24ba8:	mov	r2, #0
   24bac:	and	r7, r0, #8
   24bb0:	and	r6, r0, #2
   24bb4:	and	r5, r0, #1
   24bb8:	ldr	r1, [r4, #12]
   24bbc:	ldr	r4, [r3]
   24bc0:	sub	r1, r1, #4
   24bc4:	ldr	r0, [r1, #4]!
   24bc8:	add	r3, r4, r0, lsl #3
   24bcc:	ldrb	ip, [r3, #4]
   24bd0:	ldr	r3, [r3, #4]
   24bd4:	cmp	ip, #2
   24bd8:	ubfx	r3, r3, #8, #10
   24bdc:	bne	24c44 <__assert_fail@plt+0x130a0>
   24be0:	cmp	r3, #0
   24be4:	beq	24c20 <__assert_fail@plt+0x1307c>
   24be8:	tst	r3, #4
   24bec:	beq	24c34 <__assert_fail@plt+0x13090>
   24bf0:	cmp	r5, #0
   24bf4:	beq	24c44 <__assert_fail@plt+0x130a0>
   24bf8:	tst	r3, #8
   24bfc:	bne	24c44 <__assert_fail@plt+0x130a0>
   24c00:	tst	r3, #32
   24c04:	beq	24c10 <__assert_fail@plt+0x1306c>
   24c08:	cmp	r6, #0
   24c0c:	beq	24c44 <__assert_fail@plt+0x130a0>
   24c10:	tst	r3, #128	; 0x80
   24c14:	beq	24c20 <__assert_fail@plt+0x1307c>
   24c18:	cmp	r7, #0
   24c1c:	beq	24c44 <__assert_fail@plt+0x130a0>
   24c20:	ldrd	r4, [sp]
   24c24:	ldrd	r6, [sp, #8]
   24c28:	ldr	r8, [sp, #16]
   24c2c:	add	sp, sp, #20
   24c30:	pop	{pc}		; (ldr pc, [sp], #4)
   24c34:	tst	r3, #8
   24c38:	beq	24c00 <__assert_fail@plt+0x1305c>
   24c3c:	cmp	r5, #0
   24c40:	beq	24c00 <__assert_fail@plt+0x1305c>
   24c44:	add	r2, r2, #1
   24c48:	cmp	r2, lr
   24c4c:	bne	24bc4 <__assert_fail@plt+0x13020>
   24c50:	mov	r0, #0
   24c54:	b	24c20 <__assert_fail@plt+0x1307c>
   24c58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24c5c:	strd	r6, [sp, #8]
   24c60:	strd	sl, [sp, #24]
   24c64:	ldr	fp, [r1]
   24c68:	strd	r8, [sp, #16]
   24c6c:	str	lr, [sp, #32]
   24c70:	sub	sp, sp, #12
   24c74:	ldr	r6, [r0, #84]	; 0x54
   24c78:	cmp	fp, #0
   24c7c:	ble	24d38 <__assert_fail@plt+0x13194>
   24c80:	mov	r8, r3
   24c84:	mov	r9, r2
   24c88:	mov	sl, r0
   24c8c:	mov	r7, r1
   24c90:	mov	r4, #0
   24c94:	b	24ca0 <__assert_fail@plt+0x130fc>
   24c98:	cmp	r4, fp
   24c9c:	bge	24d38 <__assert_fail@plt+0x13194>
   24ca0:	ldr	r3, [r9]
   24ca4:	ldr	ip, [r6]
   24ca8:	ldr	r5, [r3, r4, lsl #2]
   24cac:	add	r4, r4, #1
   24cb0:	add	lr, ip, r5, lsl #3
   24cb4:	ldrb	lr, [lr, #4]
   24cb8:	cmp	lr, #8
   24cbc:	bne	24c98 <__assert_fail@plt+0x130f4>
   24cc0:	ldr	r3, [ip, r5, lsl #3]
   24cc4:	cmp	r3, #31
   24cc8:	bgt	24c98 <__assert_fail@plt+0x130f4>
   24ccc:	ldr	r2, [r6, #80]	; 0x50
   24cd0:	lsr	r3, r2, r3
   24cd4:	tst	r3, #1
   24cd8:	beq	24c98 <__assert_fail@plt+0x130f4>
   24cdc:	ldr	fp, [sl, #124]	; 0x7c
   24ce0:	ldr	r3, [sl, #128]	; 0x80
   24ce4:	ldr	r2, [sl, #132]	; 0x84
   24ce8:	cmp	r3, fp
   24cec:	beq	24d60 <__assert_fail@plt+0x131bc>
   24cf0:	mov	r1, #24
   24cf4:	mov	r0, #1
   24cf8:	str	r2, [sp, #4]
   24cfc:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   24d00:	ldr	r2, [sp, #4]
   24d04:	ldr	r3, [sl, #124]	; 0x7c
   24d08:	str	r0, [r2, fp, lsl #2]
   24d0c:	ldr	r2, [sl, #132]	; 0x84
   24d10:	add	r1, r3, #1
   24d14:	ldr	r3, [r2, r3, lsl #2]
   24d18:	cmp	r3, #0
   24d1c:	beq	24d58 <__assert_fail@plt+0x131b4>
   24d20:	str	r5, [r3, #4]
   24d24:	str	r1, [sl, #124]	; 0x7c
   24d28:	str	r8, [r3]
   24d2c:	ldr	fp, [r7]
   24d30:	cmp	r4, fp
   24d34:	blt	24ca0 <__assert_fail@plt+0x130fc>
   24d38:	mov	r0, #0
   24d3c:	add	sp, sp, #12
   24d40:	ldrd	r4, [sp]
   24d44:	ldrd	r6, [sp, #8]
   24d48:	ldrd	r8, [sp, #16]
   24d4c:	ldrd	sl, [sp, #24]
   24d50:	add	sp, sp, #32
   24d54:	pop	{pc}		; (ldr pc, [sp], #4)
   24d58:	mov	r0, #12
   24d5c:	b	24d3c <__assert_fail@plt+0x13198>
   24d60:	mov	r0, r2
   24d64:	lsl	r1, fp, #3
   24d68:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   24d6c:	subs	r2, r0, #0
   24d70:	lsl	r3, fp, #1
   24d74:	beq	24d58 <__assert_fail@plt+0x131b4>
   24d78:	str	r3, [sl, #128]	; 0x80
   24d7c:	str	r2, [sl, #132]	; 0x84
   24d80:	ldr	fp, [sl, #124]	; 0x7c
   24d84:	b	24cf0 <__assert_fail@plt+0x1314c>
   24d88:	strd	r4, [sp, #-16]!
   24d8c:	mov	r5, r0
   24d90:	mov	r0, r1
   24d94:	mov	r4, r1
   24d98:	str	r6, [sp, #8]
   24d9c:	str	lr, [sp, #12]
   24da0:	bl	11988 <strlen@plt>
   24da4:	cmp	r0, #1
   24da8:	bne	24ddc <__assert_fail@plt+0x13238>
   24dac:	ldrb	r3, [r4]
   24db0:	mov	ip, #0
   24db4:	asr	r1, r3, #5
   24db8:	and	r3, r3, #31
   24dbc:	ldr	r2, [r5, r1, lsl #2]
   24dc0:	orr	r3, r2, r0, lsl r3
   24dc4:	str	r3, [r5, r1, lsl #2]
   24dc8:	ldrd	r4, [sp]
   24dcc:	mov	r0, ip
   24dd0:	ldr	r6, [sp, #8]
   24dd4:	add	sp, sp, #12
   24dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   24ddc:	mov	ip, #3
   24de0:	b	24dc8 <__assert_fail@plt+0x13224>
   24de4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24de8:	mov	r5, r1
   24dec:	strd	r6, [sp, #8]
   24df0:	mov	r6, r0
   24df4:	strd	r8, [sp, #16]
   24df8:	mov	r8, r3
   24dfc:	strd	sl, [sp, #24]
   24e00:	mov	sl, r2
   24e04:	str	lr, [sp, #32]
   24e08:	sub	sp, sp, #4
   24e0c:	ldr	r9, [sp, #40]	; 0x28
   24e10:	ldr	ip, [sp, #48]	; 0x30
   24e14:	ldr	r7, [sp, #44]	; 0x2c
   24e18:	tst	ip, #4194304	; 0x400000
   24e1c:	beq	24e40 <__assert_fail@plt+0x1329c>
   24e20:	mov	r0, r7
   24e24:	movw	r1, #13084	; 0x331c
   24e28:	movt	r1, #3
   24e2c:	bl	1170c <strcmp@plt>
   24e30:	cmp	r0, #0
   24e34:	movweq	r7, #13076	; 0x3314
   24e38:	movteq	r7, #3
   24e3c:	bne	24f44 <__assert_fail@plt+0x133a0>
   24e40:	ldr	r4, [r8]
   24e44:	ldr	r3, [r9]
   24e48:	ldr	fp, [sl]
   24e4c:	cmp	r3, r4
   24e50:	beq	25028 <__assert_fail@plt+0x13484>
   24e54:	add	r3, r4, #1
   24e58:	mov	r0, r7
   24e5c:	str	r3, [r8]
   24e60:	bl	116c4 <wctype@plt>
   24e64:	movw	r1, #13100	; 0x332c
   24e68:	movt	r1, #3
   24e6c:	str	r0, [fp, r4, lsl #2]
   24e70:	mov	r0, r7
   24e74:	bl	1170c <strcmp@plt>
   24e78:	subs	r4, r0, #0
   24e7c:	beq	24efc <__assert_fail@plt+0x13358>
   24e80:	movw	r1, #13108	; 0x3334
   24e84:	movt	r1, #3
   24e88:	mov	r0, r7
   24e8c:	bl	1170c <strcmp@plt>
   24e90:	subs	r4, r0, #0
   24e94:	bne	24f68 <__assert_fail@plt+0x133c4>
   24e98:	bl	11964 <__ctype_b_loc@plt>
   24e9c:	ldr	r3, [r0]
   24ea0:	cmp	r6, #0
   24ea4:	moveq	ip, #1
   24ea8:	sub	r3, r3, #2
   24eac:	bne	25150 <__assert_fail@plt+0x135ac>
   24eb0:	ldrh	r2, [r3, #2]!
   24eb4:	asr	r1, r4, #5
   24eb8:	and	r0, r4, #31
   24ebc:	add	r4, r4, #1
   24ec0:	tst	r2, #2
   24ec4:	beq	24ed4 <__assert_fail@plt+0x13330>
   24ec8:	ldr	r2, [r5, r1, lsl #2]
   24ecc:	orr	r2, r2, ip, lsl r0
   24ed0:	str	r2, [r5, r1, lsl #2]
   24ed4:	cmp	r4, #256	; 0x100
   24ed8:	bne	24eb0 <__assert_fail@plt+0x1330c>
   24edc:	mov	r0, #0
   24ee0:	add	sp, sp, #4
   24ee4:	ldrd	r4, [sp]
   24ee8:	ldrd	r6, [sp, #8]
   24eec:	ldrd	r8, [sp, #16]
   24ef0:	ldrd	sl, [sp, #24]
   24ef4:	add	sp, sp, #32
   24ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   24efc:	bl	11964 <__ctype_b_loc@plt>
   24f00:	ldr	r3, [r0]
   24f04:	cmp	r6, #0
   24f08:	moveq	lr, #1
   24f0c:	sub	r3, r3, #2
   24f10:	bne	25114 <__assert_fail@plt+0x13570>
   24f14:	ldrh	r0, [r3, #2]!
   24f18:	asr	r2, r4, #5
   24f1c:	and	ip, r4, #31
   24f20:	add	r4, r4, #1
   24f24:	tst	r0, #8
   24f28:	beq	24f38 <__assert_fail@plt+0x13394>
   24f2c:	ldr	r1, [r5, r2, lsl #2]
   24f30:	orr	r1, r1, lr, lsl ip
   24f34:	str	r1, [r5, r2, lsl #2]
   24f38:	cmp	r4, #256	; 0x100
   24f3c:	bne	24f14 <__assert_fail@plt+0x13370>
   24f40:	b	24edc <__assert_fail@plt+0x13338>
   24f44:	mov	r0, r7
   24f48:	movw	r1, #13092	; 0x3324
   24f4c:	movt	r1, #3
   24f50:	bl	1170c <strcmp@plt>
   24f54:	cmp	r0, #0
   24f58:	movw	r3, #13076	; 0x3314
   24f5c:	movt	r3, #3
   24f60:	moveq	r7, r3
   24f64:	b	24e40 <__assert_fail@plt+0x1329c>
   24f68:	movw	r1, #13092	; 0x3324
   24f6c:	movt	r1, #3
   24f70:	mov	r0, r7
   24f74:	bl	1170c <strcmp@plt>
   24f78:	subs	r4, r0, #0
   24f7c:	beq	24fe0 <__assert_fail@plt+0x1343c>
   24f80:	movw	r1, #13116	; 0x333c
   24f84:	movt	r1, #3
   24f88:	mov	r0, r7
   24f8c:	bl	1170c <strcmp@plt>
   24f90:	subs	r4, r0, #0
   24f94:	bne	25054 <__assert_fail@plt+0x134b0>
   24f98:	bl	11964 <__ctype_b_loc@plt>
   24f9c:	ldr	r3, [r0]
   24fa0:	cmp	r6, #0
   24fa4:	moveq	ip, #1
   24fa8:	sub	r3, r3, #2
   24fac:	bne	2532c <__assert_fail@plt+0x13788>
   24fb0:	ldrh	r2, [r3, #2]!
   24fb4:	asr	r1, r4, #5
   24fb8:	and	r0, r4, #31
   24fbc:	add	r4, r4, #1
   24fc0:	tst	r2, #8192	; 0x2000
   24fc4:	beq	24fd4 <__assert_fail@plt+0x13430>
   24fc8:	ldr	r2, [r5, r1, lsl #2]
   24fcc:	orr	r2, r2, ip, lsl r0
   24fd0:	str	r2, [r5, r1, lsl #2]
   24fd4:	cmp	r4, #256	; 0x100
   24fd8:	bne	24fb0 <__assert_fail@plt+0x1340c>
   24fdc:	b	24edc <__assert_fail@plt+0x13338>
   24fe0:	bl	11964 <__ctype_b_loc@plt>
   24fe4:	ldr	r3, [r0]
   24fe8:	cmp	r6, #0
   24fec:	moveq	ip, #1
   24ff0:	sub	r3, r3, #2
   24ff4:	bne	2518c <__assert_fail@plt+0x135e8>
   24ff8:	ldrh	r2, [r3, #2]!
   24ffc:	asr	r1, r4, #5
   25000:	and	r0, r4, #31
   25004:	add	r4, r4, #1
   25008:	tst	r2, #512	; 0x200
   2500c:	beq	2501c <__assert_fail@plt+0x13478>
   25010:	ldr	r2, [r5, r1, lsl #2]
   25014:	orr	r2, r2, ip, lsl r0
   25018:	str	r2, [r5, r1, lsl #2]
   2501c:	cmp	r4, #256	; 0x100
   25020:	bne	24ff8 <__assert_fail@plt+0x13454>
   25024:	b	24edc <__assert_fail@plt+0x13338>
   25028:	lsl	r4, r4, #1
   2502c:	mov	r0, fp
   25030:	add	r4, r4, #1
   25034:	lsl	r1, r4, #2
   25038:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   2503c:	subs	fp, r0, #0
   25040:	beq	25288 <__assert_fail@plt+0x136e4>
   25044:	str	fp, [sl]
   25048:	str	r4, [r9]
   2504c:	ldr	r4, [r8]
   25050:	b	24e54 <__assert_fail@plt+0x132b0>
   25054:	movw	r1, #13076	; 0x3314
   25058:	movt	r1, #3
   2505c:	mov	r0, r7
   25060:	bl	1170c <strcmp@plt>
   25064:	subs	r4, r0, #0
   25068:	beq	250cc <__assert_fail@plt+0x13528>
   2506c:	movw	r1, #13124	; 0x3344
   25070:	movt	r1, #3
   25074:	mov	r0, r7
   25078:	bl	1170c <strcmp@plt>
   2507c:	subs	r4, r0, #0
   25080:	bne	251c8 <__assert_fail@plt+0x13624>
   25084:	bl	11964 <__ctype_b_loc@plt>
   25088:	ldr	r3, [r0]
   2508c:	cmp	r6, #0
   25090:	moveq	ip, #1
   25094:	sub	r3, r3, #2
   25098:	bne	25368 <__assert_fail@plt+0x137c4>
   2509c:	ldrh	r1, [r3, #2]!
   250a0:	asr	r2, r4, #5
   250a4:	and	r0, r4, #31
   250a8:	add	r4, r4, #1
   250ac:	tst	r1, #2048	; 0x800
   250b0:	beq	250c0 <__assert_fail@plt+0x1351c>
   250b4:	ldr	r1, [r5, r2, lsl #2]
   250b8:	orr	r1, r1, ip, lsl r0
   250bc:	str	r1, [r5, r2, lsl #2]
   250c0:	cmp	r4, #256	; 0x100
   250c4:	bne	2509c <__assert_fail@plt+0x134f8>
   250c8:	b	24edc <__assert_fail@plt+0x13338>
   250cc:	bl	11964 <__ctype_b_loc@plt>
   250d0:	ldr	r3, [r0]
   250d4:	cmp	r6, #0
   250d8:	moveq	ip, #1
   250dc:	sub	r3, r3, #2
   250e0:	bne	252f0 <__assert_fail@plt+0x1374c>
   250e4:	ldrh	r2, [r3, #2]!
   250e8:	asr	r1, r4, #5
   250ec:	and	r0, r4, #31
   250f0:	add	r4, r4, #1
   250f4:	tst	r2, #1024	; 0x400
   250f8:	beq	25108 <__assert_fail@plt+0x13564>
   250fc:	ldr	r2, [r5, r1, lsl #2]
   25100:	orr	r2, r2, ip, lsl r0
   25104:	str	r2, [r5, r1, lsl #2]
   25108:	cmp	r4, #256	; 0x100
   2510c:	bne	250e4 <__assert_fail@plt+0x13540>
   25110:	b	24edc <__assert_fail@plt+0x13338>
   25114:	add	ip, r6, #256	; 0x100
   25118:	mov	lr, #1
   2511c:	ldrh	r2, [r3, #2]!
   25120:	tst	r2, #8
   25124:	beq	25140 <__assert_fail@plt+0x1359c>
   25128:	ldrb	r2, [r6]
   2512c:	asr	r0, r2, #5
   25130:	and	r2, r2, #31
   25134:	ldr	r1, [r5, r0, lsl #2]
   25138:	orr	r2, r1, lr, lsl r2
   2513c:	str	r2, [r5, r0, lsl #2]
   25140:	add	r6, r6, #1
   25144:	cmp	ip, r6
   25148:	bne	2511c <__assert_fail@plt+0x13578>
   2514c:	b	24edc <__assert_fail@plt+0x13338>
   25150:	add	ip, r6, #256	; 0x100
   25154:	mov	lr, #1
   25158:	ldrh	r2, [r3, #2]!
   2515c:	tst	r2, #2
   25160:	beq	2517c <__assert_fail@plt+0x135d8>
   25164:	ldrb	r2, [r6]
   25168:	asr	r0, r2, #5
   2516c:	and	r2, r2, #31
   25170:	ldr	r1, [r5, r0, lsl #2]
   25174:	orr	r2, r1, lr, lsl r2
   25178:	str	r2, [r5, r0, lsl #2]
   2517c:	add	r6, r6, #1
   25180:	cmp	ip, r6
   25184:	bne	25158 <__assert_fail@plt+0x135b4>
   25188:	b	24edc <__assert_fail@plt+0x13338>
   2518c:	add	ip, r6, #256	; 0x100
   25190:	mov	lr, #1
   25194:	ldrh	r2, [r3, #2]!
   25198:	tst	r2, #512	; 0x200
   2519c:	beq	251b8 <__assert_fail@plt+0x13614>
   251a0:	ldrb	r2, [r6]
   251a4:	asr	r0, r2, #5
   251a8:	and	r2, r2, #31
   251ac:	ldr	r1, [r5, r0, lsl #2]
   251b0:	orr	r2, r1, lr, lsl r2
   251b4:	str	r2, [r5, r0, lsl #2]
   251b8:	add	r6, r6, #1
   251bc:	cmp	ip, r6
   251c0:	bne	25194 <__assert_fail@plt+0x135f0>
   251c4:	b	24edc <__assert_fail@plt+0x13338>
   251c8:	movw	r1, #13132	; 0x334c
   251cc:	movt	r1, #3
   251d0:	mov	r0, r7
   251d4:	bl	1170c <strcmp@plt>
   251d8:	subs	r4, r0, #0
   251dc:	bne	25228 <__assert_fail@plt+0x13684>
   251e0:	bl	11964 <__ctype_b_loc@plt>
   251e4:	ldr	r3, [r0]
   251e8:	cmp	r6, #0
   251ec:	moveq	ip, #1
   251f0:	sub	r3, r3, #2
   251f4:	bne	25578 <__assert_fail@plt+0x139d4>
   251f8:	ldrh	r2, [r3, #2]!
   251fc:	asr	r1, r4, #5
   25200:	and	r0, r4, #31
   25204:	add	r4, r4, #1
   25208:	tst	r2, #16384	; 0x4000
   2520c:	beq	2521c <__assert_fail@plt+0x13678>
   25210:	ldr	r2, [r5, r1, lsl #2]
   25214:	orr	r2, r2, ip, lsl r0
   25218:	str	r2, [r5, r1, lsl #2]
   2521c:	cmp	r4, #256	; 0x100
   25220:	bne	251f8 <__assert_fail@plt+0x13654>
   25224:	b	24edc <__assert_fail@plt+0x13338>
   25228:	movw	r1, #13084	; 0x331c
   2522c:	movt	r1, #3
   25230:	mov	r0, r7
   25234:	bl	1170c <strcmp@plt>
   25238:	subs	r4, r0, #0
   2523c:	bne	25290 <__assert_fail@plt+0x136ec>
   25240:	bl	11964 <__ctype_b_loc@plt>
   25244:	ldr	r3, [r0]
   25248:	cmp	r6, #0
   2524c:	moveq	ip, #1
   25250:	sub	r3, r3, #2
   25254:	bne	255f0 <__assert_fail@plt+0x13a4c>
   25258:	ldrh	r2, [r3, #2]!
   2525c:	asr	r1, r4, #5
   25260:	and	r0, r4, #31
   25264:	add	r4, r4, #1
   25268:	tst	r2, #256	; 0x100
   2526c:	beq	2527c <__assert_fail@plt+0x136d8>
   25270:	ldr	r2, [r5, r1, lsl #2]
   25274:	orr	r2, r2, ip, lsl r0
   25278:	str	r2, [r5, r1, lsl #2]
   2527c:	cmp	r4, #256	; 0x100
   25280:	bne	25258 <__assert_fail@plt+0x136b4>
   25284:	b	24edc <__assert_fail@plt+0x13338>
   25288:	mov	r0, #12
   2528c:	b	24ee0 <__assert_fail@plt+0x1333c>
   25290:	movw	r1, #13140	; 0x3354
   25294:	movt	r1, #3
   25298:	mov	r0, r7
   2529c:	bl	1170c <strcmp@plt>
   252a0:	subs	r4, r0, #0
   252a4:	bne	253a4 <__assert_fail@plt+0x13800>
   252a8:	bl	11964 <__ctype_b_loc@plt>
   252ac:	ldr	r3, [r0]
   252b0:	cmp	r6, #0
   252b4:	moveq	ip, #1
   252b8:	sub	r3, r3, #2
   252bc:	bne	255b4 <__assert_fail@plt+0x13a10>
   252c0:	ldrh	r2, [r3, #2]!
   252c4:	asr	r1, r4, #5
   252c8:	and	r0, r4, #31
   252cc:	add	r4, r4, #1
   252d0:	tst	r2, #1
   252d4:	beq	252e4 <__assert_fail@plt+0x13740>
   252d8:	ldr	r2, [r5, r1, lsl #2]
   252dc:	orr	r2, r2, ip, lsl r0
   252e0:	str	r2, [r5, r1, lsl #2]
   252e4:	cmp	r4, #256	; 0x100
   252e8:	bne	252c0 <__assert_fail@plt+0x1371c>
   252ec:	b	24edc <__assert_fail@plt+0x13338>
   252f0:	add	ip, r6, #256	; 0x100
   252f4:	mov	lr, #1
   252f8:	ldrh	r2, [r3, #2]!
   252fc:	tst	r2, #1024	; 0x400
   25300:	beq	2531c <__assert_fail@plt+0x13778>
   25304:	ldrb	r2, [r6]
   25308:	asr	r0, r2, #5
   2530c:	and	r2, r2, #31
   25310:	ldr	r1, [r5, r0, lsl #2]
   25314:	orr	r2, r1, lr, lsl r2
   25318:	str	r2, [r5, r0, lsl #2]
   2531c:	add	r6, r6, #1
   25320:	cmp	ip, r6
   25324:	bne	252f8 <__assert_fail@plt+0x13754>
   25328:	b	24edc <__assert_fail@plt+0x13338>
   2532c:	add	ip, r6, #256	; 0x100
   25330:	mov	lr, #1
   25334:	ldrh	r2, [r3, #2]!
   25338:	tst	r2, #8192	; 0x2000
   2533c:	beq	25358 <__assert_fail@plt+0x137b4>
   25340:	ldrb	r2, [r6]
   25344:	asr	r0, r2, #5
   25348:	and	r2, r2, #31
   2534c:	ldr	r1, [r5, r0, lsl #2]
   25350:	orr	r2, r1, lr, lsl r2
   25354:	str	r2, [r5, r0, lsl #2]
   25358:	add	r6, r6, #1
   2535c:	cmp	r6, ip
   25360:	bne	25334 <__assert_fail@plt+0x13790>
   25364:	b	24edc <__assert_fail@plt+0x13338>
   25368:	add	r1, r6, #256	; 0x100
   2536c:	mov	lr, #1
   25370:	ldrh	r2, [r3, #2]!
   25374:	tst	r2, #2048	; 0x800
   25378:	beq	25394 <__assert_fail@plt+0x137f0>
   2537c:	ldrb	r2, [r6]
   25380:	asr	ip, r2, #5
   25384:	and	r2, r2, #31
   25388:	ldr	r0, [r5, ip, lsl #2]
   2538c:	orr	r2, r0, lr, lsl r2
   25390:	str	r2, [r5, ip, lsl #2]
   25394:	add	r6, r6, #1
   25398:	cmp	r1, r6
   2539c:	bne	25370 <__assert_fail@plt+0x137cc>
   253a0:	b	24edc <__assert_fail@plt+0x13338>
   253a4:	movw	r1, #13148	; 0x335c
   253a8:	movt	r1, #3
   253ac:	mov	r0, r7
   253b0:	bl	1170c <strcmp@plt>
   253b4:	subs	r4, r0, #0
   253b8:	bne	25440 <__assert_fail@plt+0x1389c>
   253bc:	bl	11964 <__ctype_b_loc@plt>
   253c0:	ldr	r3, [r0]
   253c4:	cmp	r6, #0
   253c8:	moveq	r0, #1
   253cc:	sub	r3, r3, #2
   253d0:	bne	25404 <__assert_fail@plt+0x13860>
   253d4:	ldrsh	r2, [r3, #2]!
   253d8:	asr	r1, r4, #5
   253dc:	and	ip, r4, #31
   253e0:	add	r4, r4, #1
   253e4:	cmp	r2, #0
   253e8:	bge	253f8 <__assert_fail@plt+0x13854>
   253ec:	ldr	r2, [r5, r1, lsl #2]
   253f0:	orr	r2, r2, r0, lsl ip
   253f4:	str	r2, [r5, r1, lsl #2]
   253f8:	cmp	r4, #256	; 0x100
   253fc:	bne	253d4 <__assert_fail@plt+0x13830>
   25400:	b	24edc <__assert_fail@plt+0x13338>
   25404:	add	lr, r6, #256	; 0x100
   25408:	mov	ip, #1
   2540c:	ldrsh	r2, [r3, #2]!
   25410:	cmp	r2, #0
   25414:	bge	25430 <__assert_fail@plt+0x1388c>
   25418:	ldrb	r2, [r6]
   2541c:	asr	r0, r2, #5
   25420:	and	r2, r2, #31
   25424:	ldr	r1, [r5, r0, lsl #2]
   25428:	orr	r2, r1, ip, lsl r2
   2542c:	str	r2, [r5, r0, lsl #2]
   25430:	add	r6, r6, #1
   25434:	cmp	lr, r6
   25438:	bne	2540c <__assert_fail@plt+0x13868>
   2543c:	b	24edc <__assert_fail@plt+0x13338>
   25440:	movw	r1, #13156	; 0x3364
   25444:	movt	r1, #3
   25448:	mov	r0, r7
   2544c:	bl	1170c <strcmp@plt>
   25450:	subs	r4, r0, #0
   25454:	bne	254dc <__assert_fail@plt+0x13938>
   25458:	bl	11964 <__ctype_b_loc@plt>
   2545c:	ldr	r3, [r0]
   25460:	cmp	r6, #0
   25464:	moveq	r0, #1
   25468:	sub	r3, r3, #2
   2546c:	bne	254a0 <__assert_fail@plt+0x138fc>
   25470:	ldrh	r2, [r3, #2]!
   25474:	asr	r1, r4, #5
   25478:	and	ip, r4, #31
   2547c:	add	r4, r4, #1
   25480:	tst	r2, #4
   25484:	beq	25494 <__assert_fail@plt+0x138f0>
   25488:	ldr	r2, [r5, r1, lsl #2]
   2548c:	orr	r2, r2, r0, lsl ip
   25490:	str	r2, [r5, r1, lsl #2]
   25494:	cmp	r4, #256	; 0x100
   25498:	bne	25470 <__assert_fail@plt+0x138cc>
   2549c:	b	24edc <__assert_fail@plt+0x13338>
   254a0:	add	lr, r6, #256	; 0x100
   254a4:	mov	ip, #1
   254a8:	ldrh	r2, [r3, #2]!
   254ac:	tst	r2, #4
   254b0:	beq	254cc <__assert_fail@plt+0x13928>
   254b4:	ldrb	r2, [r6]
   254b8:	asr	r0, r2, #5
   254bc:	and	r2, r2, #31
   254c0:	ldr	r1, [r5, r0, lsl #2]
   254c4:	orr	r2, r1, ip, lsl r2
   254c8:	str	r2, [r5, r0, lsl #2]
   254cc:	add	r6, r6, #1
   254d0:	cmp	r6, lr
   254d4:	bne	254a8 <__assert_fail@plt+0x13904>
   254d8:	b	24edc <__assert_fail@plt+0x13338>
   254dc:	mov	r0, r7
   254e0:	movw	r1, #13164	; 0x336c
   254e4:	movt	r1, #3
   254e8:	bl	1170c <strcmp@plt>
   254ec:	subs	r4, r0, #0
   254f0:	movne	r0, #4
   254f4:	bne	24ee0 <__assert_fail@plt+0x1333c>
   254f8:	bl	11964 <__ctype_b_loc@plt>
   254fc:	ldr	r3, [r0]
   25500:	cmp	r6, #0
   25504:	moveq	r0, #1
   25508:	sub	r3, r3, #2
   2550c:	bne	25540 <__assert_fail@plt+0x1399c>
   25510:	ldrh	r2, [r3, #2]!
   25514:	asr	r1, r4, #5
   25518:	and	ip, r4, #31
   2551c:	add	r4, r4, #1
   25520:	tst	r2, #4096	; 0x1000
   25524:	beq	25534 <__assert_fail@plt+0x13990>
   25528:	ldr	r2, [r5, r1, lsl #2]
   2552c:	orr	r2, r2, r0, lsl ip
   25530:	str	r2, [r5, r1, lsl #2]
   25534:	cmp	r4, #256	; 0x100
   25538:	bne	25510 <__assert_fail@plt+0x1396c>
   2553c:	b	24edc <__assert_fail@plt+0x13338>
   25540:	mov	ip, #1
   25544:	ldrh	r2, [r3, #2]!
   25548:	tst	r2, #4096	; 0x1000
   2554c:	beq	25568 <__assert_fail@plt+0x139c4>
   25550:	ldrb	r2, [r6, r4]
   25554:	asr	r0, r2, #5
   25558:	and	r2, r2, #31
   2555c:	ldr	r1, [r5, r0, lsl #2]
   25560:	orr	r2, r1, ip, lsl r2
   25564:	str	r2, [r5, r0, lsl #2]
   25568:	add	r4, r4, #1
   2556c:	cmp	r4, #256	; 0x100
   25570:	bne	25544 <__assert_fail@plt+0x139a0>
   25574:	b	24edc <__assert_fail@plt+0x13338>
   25578:	add	lr, r6, #256	; 0x100
   2557c:	mov	ip, #1
   25580:	ldrh	r2, [r3, #2]!
   25584:	tst	r2, #16384	; 0x4000
   25588:	beq	255a4 <__assert_fail@plt+0x13a00>
   2558c:	ldrb	r2, [r6]
   25590:	asr	r0, r2, #5
   25594:	and	r2, r2, #31
   25598:	ldr	r1, [r5, r0, lsl #2]
   2559c:	orr	r2, r1, ip, lsl r2
   255a0:	str	r2, [r5, r0, lsl #2]
   255a4:	add	r6, r6, #1
   255a8:	cmp	lr, r6
   255ac:	bne	25580 <__assert_fail@plt+0x139dc>
   255b0:	b	24edc <__assert_fail@plt+0x13338>
   255b4:	add	lr, r6, #256	; 0x100
   255b8:	mov	ip, #1
   255bc:	ldrh	r2, [r3, #2]!
   255c0:	tst	r2, #1
   255c4:	beq	255e0 <__assert_fail@plt+0x13a3c>
   255c8:	ldrb	r2, [r6]
   255cc:	asr	r0, r2, #5
   255d0:	and	r2, r2, #31
   255d4:	ldr	r1, [r5, r0, lsl #2]
   255d8:	orr	r2, r1, ip, lsl r2
   255dc:	str	r2, [r5, r0, lsl #2]
   255e0:	add	r6, r6, #1
   255e4:	cmp	lr, r6
   255e8:	bne	255bc <__assert_fail@plt+0x13a18>
   255ec:	b	24edc <__assert_fail@plt+0x13338>
   255f0:	add	lr, r6, #256	; 0x100
   255f4:	mov	ip, #1
   255f8:	ldrh	r2, [r3, #2]!
   255fc:	tst	r2, #256	; 0x100
   25600:	beq	2561c <__assert_fail@plt+0x13a78>
   25604:	ldrb	r2, [r6]
   25608:	asr	r0, r2, #5
   2560c:	and	r2, r2, #31
   25610:	ldr	r1, [r5, r0, lsl #2]
   25614:	orr	r2, r1, ip, lsl r2
   25618:	str	r2, [r5, r0, lsl #2]
   2561c:	add	r6, r6, #1
   25620:	cmp	r6, lr
   25624:	bne	255f8 <__assert_fail@plt+0x13a54>
   25628:	b	24edc <__assert_fail@plt+0x13338>
   2562c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25630:	mov	r5, r3
   25634:	strd	r6, [sp, #8]
   25638:	mov	r6, r0
   2563c:	mov	r0, #32
   25640:	strd	r8, [sp, #16]
   25644:	mov	r9, #0
   25648:	strd	sl, [sp, #24]
   2564c:	mov	fp, r1
   25650:	mov	r1, #1
   25654:	str	lr, [sp, #32]
   25658:	sub	sp, sp, #44	; 0x2c
   2565c:	mov	sl, r2
   25660:	ldrb	r8, [sp, #80]	; 0x50
   25664:	str	r9, [sp, #20]
   25668:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   2566c:	subs	r4, r0, #0
   25670:	beq	25848 <__assert_fail@plt+0x13ca4>
   25674:	mov	r1, #1
   25678:	mov	r0, #40	; 0x28
   2567c:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   25680:	subs	r7, r0, #0
   25684:	beq	2585c <__assert_fail@plt+0x13cb8>
   25688:	ldrb	ip, [r7, #16]
   2568c:	add	lr, sp, #20
   25690:	mov	r0, fp
   25694:	add	r3, r7, #36	; 0x24
   25698:	add	r2, r7, #12
   2569c:	mov	r1, r4
   256a0:	bfi	ip, r8, #0, #1
   256a4:	strb	ip, [r7, #16]
   256a8:	str	lr, [sp]
   256ac:	str	sl, [sp, #4]
   256b0:	str	r9, [sp, #8]
   256b4:	bl	24de4 <__assert_fail@plt+0x13240>
   256b8:	subs	sl, r0, #0
   256bc:	bne	25878 <__assert_fail@plt+0x13cd4>
   256c0:	ldrb	r3, [r5]
   256c4:	cmp	r3, #0
   256c8:	beq	256f0 <__assert_fail@plt+0x13b4c>
   256cc:	mov	ip, #1
   256d0:	asr	r1, r3, #5
   256d4:	and	r0, r3, #31
   256d8:	ldrb	r3, [r5, #1]!
   256dc:	ldr	r2, [r4, r1, lsl #2]
   256e0:	cmp	r3, #0
   256e4:	orr	r2, r2, ip, lsl r0
   256e8:	str	r2, [r4, r1, lsl #2]
   256ec:	bne	256d0 <__assert_fail@plt+0x13b2c>
   256f0:	cmp	r8, #0
   256f4:	beq	25714 <__assert_fail@plt+0x13b70>
   256f8:	sub	r3, r4, #4
   256fc:	add	r1, r4, #28
   25700:	ldr	r2, [r3, #4]!
   25704:	mvn	r2, r2
   25708:	cmp	r1, r3
   2570c:	str	r2, [r3]
   25710:	bne	25700 <__assert_fail@plt+0x13b5c>
   25714:	ldr	r3, [r6, #92]	; 0x5c
   25718:	cmp	r3, #1
   2571c:	ble	25748 <__assert_fail@plt+0x13ba4>
   25720:	ldr	r1, [r6, #60]	; 0x3c
   25724:	sub	r3, r4, #4
   25728:	add	ip, r4, #28
   2572c:	sub	r1, r1, #4
   25730:	ldr	r2, [r3, #4]!
   25734:	ldr	r0, [r1, #4]!
   25738:	cmp	ip, r3
   2573c:	and	r2, r2, r0
   25740:	str	r2, [r3]
   25744:	bne	25730 <__assert_fail@plt+0x13b8c>
   25748:	add	fp, sp, #24
   2574c:	mov	r5, #0
   25750:	mov	ip, #3
   25754:	add	r9, r6, #56	; 0x38
   25758:	add	sl, r6, #64	; 0x40
   2575c:	mov	r3, r5
   25760:	str	fp, [sp]
   25764:	mov	r2, r5
   25768:	mov	r0, r9
   2576c:	strd	r4, [sp, #24]
   25770:	mov	r1, sl
   25774:	strb	ip, [sp, #28]
   25778:	bl	21be4 <__assert_fail@plt+0x10040>
   2577c:	subs	r8, r0, #0
   25780:	beq	25824 <__assert_fail@plt+0x13c80>
   25784:	ldr	r3, [r6, #92]	; 0x5c
   25788:	cmp	r3, #1
   2578c:	ble	25818 <__assert_fail@plt+0x13c74>
   25790:	ldrb	ip, [r6, #88]	; 0x58
   25794:	mov	r0, #6
   25798:	mov	r3, r5
   2579c:	mov	r2, r5
   257a0:	mov	r1, sl
   257a4:	str	fp, [sp]
   257a8:	str	r7, [sp, #24]
   257ac:	strb	r0, [sp, #28]
   257b0:	mov	r0, r9
   257b4:	orr	ip, ip, #2
   257b8:	strb	ip, [r6, #88]	; 0x58
   257bc:	bl	21be4 <__assert_fail@plt+0x10040>
   257c0:	subs	r3, r0, #0
   257c4:	beq	25824 <__assert_fail@plt+0x13c80>
   257c8:	add	ip, sp, #32
   257cc:	mov	r4, #0
   257d0:	mov	r5, #0
   257d4:	mov	r2, r8
   257d8:	str	ip, [sp]
   257dc:	mov	ip, #10
   257e0:	mov	r1, sl
   257e4:	mov	r0, r9
   257e8:	strd	r4, [sp, #32]
   257ec:	strb	ip, [sp, #36]	; 0x24
   257f0:	bl	21be4 <__assert_fail@plt+0x10040>
   257f4:	mov	r8, r0
   257f8:	mov	r0, r8
   257fc:	add	sp, sp, #44	; 0x2c
   25800:	ldrd	r4, [sp]
   25804:	ldrd	r6, [sp, #8]
   25808:	ldrd	r8, [sp, #16]
   2580c:	ldrd	sl, [sp, #24]
   25810:	add	sp, sp, #32
   25814:	pop	{pc}		; (ldr pc, [sp], #4)
   25818:	mov	r0, r7
   2581c:	bl	2084c <__assert_fail@plt+0xeca8>
   25820:	b	257f8 <__assert_fail@plt+0x13c54>
   25824:	mov	r0, r4
   25828:	mov	r8, #0
   2582c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   25830:	mov	r0, r7
   25834:	bl	2084c <__assert_fail@plt+0xeca8>
   25838:	ldr	r2, [sp, #84]	; 0x54
   2583c:	mov	r3, #12
   25840:	str	r3, [r2]
   25844:	b	257f8 <__assert_fail@plt+0x13c54>
   25848:	ldr	r2, [sp, #84]	; 0x54
   2584c:	mov	r3, #12
   25850:	mov	r8, r4
   25854:	str	r3, [r2]
   25858:	b	257f8 <__assert_fail@plt+0x13c54>
   2585c:	mov	r0, r4
   25860:	mov	r8, r7
   25864:	bl	17ac8 <__assert_fail@plt+0x5f24>
   25868:	ldr	r2, [sp, #84]	; 0x54
   2586c:	mov	r3, #12
   25870:	str	r3, [r2]
   25874:	b	257f8 <__assert_fail@plt+0x13c54>
   25878:	mov	r0, r4
   2587c:	mov	r8, r9
   25880:	bl	17ac8 <__assert_fail@plt+0x5f24>
   25884:	mov	r0, r7
   25888:	bl	2084c <__assert_fail@plt+0xeca8>
   2588c:	ldr	r3, [sp, #84]	; 0x54
   25890:	str	sl, [r3]
   25894:	b	257f8 <__assert_fail@plt+0x13c54>
   25898:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2589c:	strd	r6, [sp, #8]
   258a0:	ldr	r6, [r0]
   258a4:	strd	r8, [sp, #16]
   258a8:	strd	sl, [sp, #24]
   258ac:	str	lr, [sp, #32]
   258b0:	sub	sp, sp, #316	; 0x13c
   258b4:	ldr	ip, [r6, #92]	; 0x5c
   258b8:	cmp	ip, #1
   258bc:	ldr	ip, [r1]
   258c0:	movne	r5, #0
   258c4:	ldreq	r5, [r0, #12]
   258c8:	ubfxeq	r5, r5, #22, #1
   258cc:	cmp	ip, #0
   258d0:	ble	259bc <__assert_fail@plt+0x13e18>
   258d4:	mov	r4, r3
   258d8:	mov	r3, #255	; 0xff
   258dc:	movt	r3, #32
   258e0:	mov	r8, #0
   258e4:	str	r5, [sp, #4]
   258e8:	str	r2, [sp, #8]
   258ec:	str	r4, [sp, #12]
   258f0:	str	r3, [sp, #32]
   258f4:	mov	r3, #1
   258f8:	movt	r3, #32
   258fc:	str	r1, [sp, #20]
   25900:	str	r0, [sp, #24]
   25904:	str	r3, [sp, #36]	; 0x24
   25908:	b	2593c <__assert_fail@plt+0x13d98>
   2590c:	cmp	r7, #3
   25910:	beq	25b6c <__assert_fail@plt+0x13fc8>
   25914:	cmp	r7, #6
   25918:	beq	259d8 <__assert_fail@plt+0x13e34>
   2591c:	and	r3, r7, #253	; 0xfd
   25920:	cmp	r3, #5
   25924:	beq	25d24 <__assert_fail@plt+0x14180>
   25928:	cmp	r7, #2
   2592c:	beq	25d44 <__assert_fail@plt+0x141a0>
   25930:	add	r8, r8, #1
   25934:	cmp	r8, ip
   25938:	bge	259bc <__assert_fail@plt+0x13e18>
   2593c:	ldr	r3, [sp, #8]
   25940:	ldr	r2, [r6]
   25944:	ldr	r3, [r3]
   25948:	ldr	r9, [r3, r8, lsl #2]
   2594c:	lsl	r3, r9, #3
   25950:	str	r3, [sp]
   25954:	add	r3, r2, r3
   25958:	ldrb	r7, [r3, #4]
   2595c:	cmp	r7, #1
   25960:	bne	2590c <__assert_fail@plt+0x13d68>
   25964:	ldr	r3, [sp, #4]
   25968:	ldrb	fp, [r2, r9, lsl #3]
   2596c:	ldr	r4, [sp, #12]
   25970:	cmp	r3, #0
   25974:	strb	r7, [r4, fp]
   25978:	beq	2598c <__assert_fail@plt+0x13de8>
   2597c:	bl	11928 <__ctype_tolower_loc@plt>
   25980:	ldr	r3, [r0]
   25984:	ldr	r3, [r3, fp, lsl #2]
   25988:	strb	r7, [r4, r3]
   2598c:	ldr	r3, [sp, #24]
   25990:	ldr	r3, [r3, #12]
   25994:	tst	r3, #4194304	; 0x400000
   25998:	beq	259a8 <__assert_fail@plt+0x13e04>
   2599c:	ldr	r3, [r6, #92]	; 0x5c
   259a0:	cmp	r3, #1
   259a4:	bgt	25c24 <__assert_fail@plt+0x14080>
   259a8:	ldr	r3, [sp, #20]
   259ac:	add	r8, r8, #1
   259b0:	ldr	ip, [r3]
   259b4:	cmp	r8, ip
   259b8:	blt	2593c <__assert_fail@plt+0x13d98>
   259bc:	add	sp, sp, #316	; 0x13c
   259c0:	ldrd	r4, [sp]
   259c4:	ldrd	r6, [sp, #8]
   259c8:	ldrd	r8, [sp, #16]
   259cc:	ldrd	sl, [sp, #24]
   259d0:	add	sp, sp, #32
   259d4:	pop	{pc}		; (ldr pc, [sp], #4)
   259d8:	ldr	r2, [r6, #92]	; 0x5c
   259dc:	ldr	fp, [r3]
   259e0:	cmp	r2, #1
   259e4:	ble	25a0c <__assert_fail@plt+0x13e68>
   259e8:	ldr	r2, [fp, #36]	; 0x24
   259ec:	cmp	r2, #0
   259f0:	bne	25b08 <__assert_fail@plt+0x13f64>
   259f4:	ldrb	r2, [fp, #16]
   259f8:	tst	r2, #1
   259fc:	bne	25b08 <__assert_fail@plt+0x13f64>
   25a00:	ldr	r2, [fp, #32]
   25a04:	cmp	r2, #0
   25a08:	bne	25b08 <__assert_fail@plt+0x13f64>
   25a0c:	ldr	r2, [fp, #20]
   25a10:	cmp	r2, #0
   25a14:	ble	25930 <__assert_fail@plt+0x13d8c>
   25a18:	mov	r5, fp
   25a1c:	mov	r7, #0
   25a20:	str	r8, [sp, #16]
   25a24:	add	r9, sp, #56	; 0x38
   25a28:	add	sl, sp, #48	; 0x30
   25a2c:	ldr	r4, [sp, #12]
   25a30:	ldr	fp, [sp, #24]
   25a34:	b	25a44 <__assert_fail@plt+0x13ea0>
   25a38:	ldr	r2, [r5, #20]
   25a3c:	cmp	r7, r2
   25a40:	bge	25afc <__assert_fail@plt+0x13f58>
   25a44:	mov	r2, #0
   25a48:	mov	r3, #0
   25a4c:	lsl	r8, r7, #2
   25a50:	mov	r0, r9
   25a54:	strd	r2, [sl]
   25a58:	mov	r2, sl
   25a5c:	ldr	r1, [r5]
   25a60:	ldr	r1, [r1, r7, lsl #2]
   25a64:	add	r7, r7, #1
   25a68:	bl	116dc <wcrtomb@plt>
   25a6c:	cmn	r0, #1
   25a70:	beq	25aa8 <__assert_fail@plt+0x13f04>
   25a74:	ldr	r3, [sp, #4]
   25a78:	ldrb	r2, [sp, #56]	; 0x38
   25a7c:	cmp	r3, #0
   25a80:	mov	r3, #1
   25a84:	str	r2, [sp]
   25a88:	strb	r3, [r4, r2]
   25a8c:	beq	25aa8 <__assert_fail@plt+0x13f04>
   25a90:	bl	11928 <__ctype_tolower_loc@plt>
   25a94:	ldr	r1, [r0]
   25a98:	mov	r3, #1
   25a9c:	ldr	r2, [sp]
   25aa0:	ldr	r2, [r1, r2, lsl #2]
   25aa4:	strb	r3, [r4, r2]
   25aa8:	ldr	r2, [fp, #12]
   25aac:	tst	r2, #4194304	; 0x400000
   25ab0:	beq	25a38 <__assert_fail@plt+0x13e94>
   25ab4:	ldr	r2, [r6, #92]	; 0x5c
   25ab8:	cmp	r2, #1
   25abc:	ble	25a38 <__assert_fail@plt+0x13e94>
   25ac0:	ldr	r2, [r5]
   25ac4:	ldr	r0, [r2, r8]
   25ac8:	bl	117a8 <towlower@plt>
   25acc:	mov	r1, r0
   25ad0:	mov	r2, sl
   25ad4:	mov	r0, r9
   25ad8:	bl	116dc <wcrtomb@plt>
   25adc:	cmn	r0, #1
   25ae0:	beq	25a38 <__assert_fail@plt+0x13e94>
   25ae4:	ldrb	r2, [sp, #56]	; 0x38
   25ae8:	mov	r3, #1
   25aec:	strb	r3, [r4, r2]
   25af0:	ldr	r2, [r5, #20]
   25af4:	cmp	r7, r2
   25af8:	blt	25a44 <__assert_fail@plt+0x13ea0>
   25afc:	str	r4, [sp, #12]
   25b00:	ldr	r8, [sp, #16]
   25b04:	b	259a8 <__assert_fail@plt+0x13e04>
   25b08:	ldr	r5, [sp, #4]
   25b0c:	mov	r3, #0
   25b10:	add	r9, sp, #56	; 0x38
   25b14:	add	sl, sp, #48	; 0x30
   25b18:	mov	r7, #1
   25b1c:	ldr	r4, [sp, #12]
   25b20:	strb	r3, [sp, #48]	; 0x30
   25b24:	mov	r0, #0
   25b28:	mov	r1, #0
   25b2c:	mov	r3, r9
   25b30:	mov	r2, #1
   25b34:	strd	r0, [r9]
   25b38:	mov	r1, sl
   25b3c:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   25b40:	ldrb	r3, [sp, #48]	; 0x30
   25b44:	cmn	r0, #2
   25b48:	strbeq	r7, [r4, r3]
   25b4c:	add	r3, r3, #1
   25b50:	uxtb	r3, r3
   25b54:	cmp	r3, #0
   25b58:	strb	r3, [sp, #48]	; 0x30
   25b5c:	bne	25b24 <__assert_fail@plt+0x13f80>
   25b60:	str	r5, [sp, #4]
   25b64:	str	r4, [sp, #12]
   25b68:	b	259a8 <__assert_fail@plt+0x13e04>
   25b6c:	ldr	r4, [sp, #12]
   25b70:	mov	sl, #0
   25b74:	mov	r9, #32
   25b78:	str	r8, [sp, #28]
   25b7c:	mov	fp, #1
   25b80:	mov	r5, sl
   25b84:	ldr	r8, [sp, #4]
   25b88:	str	r6, [sp, #16]
   25b8c:	ldr	r3, [sp]
   25b90:	sub	r7, r9, #32
   25b94:	ldr	r2, [r2, r3]
   25b98:	ldr	r6, [r2, sl]
   25b9c:	add	r3, r5, r7
   25ba0:	add	r2, r4, r7
   25ba4:	lsr	r3, r6, r3
   25ba8:	tst	r3, #1
   25bac:	beq	25bdc <__assert_fail@plt+0x14038>
   25bb0:	cmp	r8, #0
   25bb4:	add	r3, r7, #128	; 0x80
   25bb8:	strb	fp, [r4, r7]
   25bbc:	beq	25bdc <__assert_fail@plt+0x14038>
   25bc0:	cmp	r3, #384	; 0x180
   25bc4:	bcs	25bd8 <__assert_fail@plt+0x14034>
   25bc8:	bl	11928 <__ctype_tolower_loc@plt>
   25bcc:	ldr	r3, [r0]
   25bd0:	ldr	r2, [r3, r7, lsl #2]
   25bd4:	add	r2, r4, r2
   25bd8:	strb	fp, [r2]
   25bdc:	add	r7, r7, #1
   25be0:	cmp	r9, r7
   25be4:	bne	25b9c <__assert_fail@plt+0x13ff8>
   25be8:	add	r9, r9, #32
   25bec:	add	sl, sl, #4
   25bf0:	cmp	r9, #288	; 0x120
   25bf4:	sub	r5, r5, #32
   25bf8:	beq	25c08 <__assert_fail@plt+0x14064>
   25bfc:	ldr	r3, [sp, #16]
   25c00:	ldr	r2, [r3]
   25c04:	b	25b8c <__assert_fail@plt+0x13fe8>
   25c08:	str	r8, [sp, #4]
   25c0c:	ldr	r3, [sp, #20]
   25c10:	str	r4, [sp, #12]
   25c14:	ldr	r6, [sp, #16]
   25c18:	ldr	r8, [sp, #28]
   25c1c:	ldr	ip, [r3]
   25c20:	b	25930 <__assert_fail@plt+0x13d8c>
   25c24:	ldr	r3, [r6]
   25c28:	add	r2, r9, #1
   25c2c:	ldrb	r1, [r3, r9, lsl #3]
   25c30:	strb	r1, [sp, #56]	; 0x38
   25c34:	ldr	r1, [r6, #8]
   25c38:	cmp	r2, r1
   25c3c:	bcs	25d6c <__assert_fail@plt+0x141c8>
   25c40:	ldr	r1, [sp]
   25c44:	ldr	r0, [sp, #32]
   25c48:	add	sl, r1, #8
   25c4c:	add	r3, r3, sl
   25c50:	ldr	r1, [r3, #4]
   25c54:	and	r1, r1, r0
   25c58:	ldr	r0, [sp, #36]	; 0x24
   25c5c:	cmp	r1, r0
   25c60:	bne	25d6c <__assert_fail@plt+0x141c8>
   25c64:	add	r7, sp, #57	; 0x39
   25c68:	ldr	r5, [sp, #4]
   25c6c:	ldr	r4, [sp, #12]
   25c70:	ldr	r0, [sp, #32]
   25c74:	ldr	ip, [sp, #36]	; 0x24
   25c78:	b	25c94 <__assert_fail@plt+0x140f0>
   25c7c:	ldr	r3, [r6]
   25c80:	add	r3, r3, r2, lsl #3
   25c84:	ldr	r1, [r3, #4]
   25c88:	and	r1, r1, r0
   25c8c:	cmp	r1, ip
   25c90:	bne	25cac <__assert_fail@plt+0x14108>
   25c94:	ldrb	r3, [r3]
   25c98:	add	r2, r2, #1
   25c9c:	strb	r3, [r7], #1
   25ca0:	ldr	r3, [r6, #8]
   25ca4:	cmp	r3, r2
   25ca8:	bhi	25c7c <__assert_fail@plt+0x140d8>
   25cac:	add	r9, sp, #56	; 0x38
   25cb0:	str	r5, [sp, #4]
   25cb4:	sub	r7, r7, r9
   25cb8:	str	r4, [sp, #12]
   25cbc:	add	sl, sp, #48	; 0x30
   25cc0:	mov	r4, #0
   25cc4:	mov	r5, #0
   25cc8:	mov	r2, r7
   25ccc:	mov	r3, sl
   25cd0:	mov	r1, r9
   25cd4:	add	r0, sp, #44	; 0x2c
   25cd8:	strd	r4, [sl]
   25cdc:	bl	1c2a0 <__assert_fail@plt+0xa6fc>
   25ce0:	cmp	r0, r7
   25ce4:	bne	259a8 <__assert_fail@plt+0x13e04>
   25ce8:	ldr	r0, [sp, #44]	; 0x2c
   25cec:	bl	117a8 <towlower@plt>
   25cf0:	mov	r1, r0
   25cf4:	mov	r2, sl
   25cf8:	mov	r0, r9
   25cfc:	bl	116dc <wcrtomb@plt>
   25d00:	cmn	r0, #1
   25d04:	beq	259a8 <__assert_fail@plt+0x13e04>
   25d08:	ldrb	r3, [sp, #56]	; 0x38
   25d0c:	mov	r2, #1
   25d10:	ldr	r1, [sp, #12]
   25d14:	strb	r2, [r1, r3]
   25d18:	ldr	r3, [sp, #20]
   25d1c:	ldr	ip, [r3]
   25d20:	b	25930 <__assert_fail@plt+0x13d8c>
   25d24:	ldr	r4, [sp, #12]
   25d28:	mov	r2, #256	; 0x100
   25d2c:	mov	r1, #1
   25d30:	mov	r0, r4
   25d34:	bl	119e8 <memset@plt>
   25d38:	cmp	r7, #2
   25d3c:	bne	259bc <__assert_fail@plt+0x13e18>
   25d40:	b	25d58 <__assert_fail@plt+0x141b4>
   25d44:	ldr	r4, [sp, #12]
   25d48:	mov	r2, #256	; 0x100
   25d4c:	mov	r1, #1
   25d50:	mov	r0, r4
   25d54:	bl	119e8 <memset@plt>
   25d58:	ldr	r2, [sp, #24]
   25d5c:	ldrb	r3, [r2, #28]
   25d60:	orr	r3, r3, #1
   25d64:	strb	r3, [r2, #28]
   25d68:	b	259bc <__assert_fail@plt+0x13e18>
   25d6c:	add	r9, sp, #56	; 0x38
   25d70:	b	25cbc <__assert_fail@plt+0x14118>
   25d74:	add	ip, r0, r2, lsl #3
   25d78:	strd	r4, [sp, #-32]!	; 0xffffffe0
   25d7c:	strd	r6, [sp, #8]
   25d80:	str	sl, [sp, #24]
   25d84:	ldrb	sl, [ip, #4]
   25d88:	strd	r8, [sp, #16]
   25d8c:	str	lr, [sp, #28]
   25d90:	cmp	sl, #7
   25d94:	beq	25f00 <__assert_fail@plt+0x1435c>
   25d98:	ldr	ip, [r3, #80]	; 0x50
   25d9c:	cmp	ip, #1
   25da0:	beq	25de8 <__assert_fail@plt+0x14244>
   25da4:	mov	r9, r1
   25da8:	mov	r5, r0
   25dac:	ldr	r1, [sp, #32]
   25db0:	mov	r0, r3
   25db4:	mov	r8, r3
   25db8:	mov	r6, r2
   25dbc:	bl	2141c <__assert_fail@plt+0xf878>
   25dc0:	cmp	sl, #5
   25dc4:	mov	r7, r0
   25dc8:	beq	25e08 <__assert_fail@plt+0x14264>
   25dcc:	sub	r4, sl, #6
   25dd0:	cmp	r0, #1
   25dd4:	clz	r4, r4
   25dd8:	lsr	r4, r4, #5
   25ddc:	movle	r4, #0
   25de0:	cmp	r4, #0
   25de4:	bne	25e50 <__assert_fail@plt+0x142ac>
   25de8:	mov	r7, #0
   25dec:	mov	r0, r7
   25df0:	ldrd	r4, [sp]
   25df4:	ldrd	r6, [sp, #8]
   25df8:	ldrd	r8, [sp, #16]
   25dfc:	ldr	sl, [sp, #24]
   25e00:	add	sp, sp, #28
   25e04:	pop	{pc}		; (ldr pc, [sp], #4)
   25e08:	cmp	r0, #1
   25e0c:	ble	25de8 <__assert_fail@plt+0x14244>
   25e10:	ldr	r3, [r9]
   25e14:	tst	r3, #64	; 0x40
   25e18:	bne	25e30 <__assert_fail@plt+0x1428c>
   25e1c:	ldr	r2, [r8, #4]
   25e20:	ldr	r1, [sp, #32]
   25e24:	ldrb	r2, [r2, r1]
   25e28:	cmp	r2, #10
   25e2c:	beq	25de8 <__assert_fail@plt+0x14244>
   25e30:	tst	r3, #128	; 0x80
   25e34:	beq	25dec <__assert_fail@plt+0x14248>
   25e38:	ldr	r3, [r8, #4]
   25e3c:	ldr	r2, [sp, #32]
   25e40:	ldrb	r3, [r3, r2]
   25e44:	cmp	r3, #0
   25e48:	beq	25de8 <__assert_fail@plt+0x14244>
   25e4c:	b	25dec <__assert_fail@plt+0x14248>
   25e50:	ldr	r6, [r5, r6, lsl #3]
   25e54:	ldr	r0, [r6, #20]
   25e58:	ldr	ip, [r6, #32]
   25e5c:	cmp	ip, #0
   25e60:	bne	25e70 <__assert_fail@plt+0x142cc>
   25e64:	ldr	r3, [r6, #36]	; 0x24
   25e68:	orrs	r3, r0, r3
   25e6c:	beq	25fd4 <__assert_fail@plt+0x14430>
   25e70:	ldr	r3, [r8, #8]
   25e74:	cmp	r0, #0
   25e78:	ldr	r2, [sp, #32]
   25e7c:	ldr	r4, [r3, r2, lsl #2]
   25e80:	ble	25eb4 <__assert_fail@plt+0x14310>
   25e84:	ldr	r2, [r6]
   25e88:	ldr	r3, [r2]
   25e8c:	cmp	r4, r3
   25e90:	beq	25ef0 <__assert_fail@plt+0x1434c>
   25e94:	mov	r3, #0
   25e98:	b	25ea8 <__assert_fail@plt+0x14304>
   25e9c:	ldr	r1, [r2, #4]!
   25ea0:	cmp	r4, r1
   25ea4:	beq	25ef0 <__assert_fail@plt+0x1434c>
   25ea8:	add	r3, r3, #1
   25eac:	cmp	r0, r3
   25eb0:	bne	25e9c <__assert_fail@plt+0x142f8>
   25eb4:	ldr	r3, [r6, #36]	; 0x24
   25eb8:	cmp	r3, #0
   25ebc:	ble	25f98 <__assert_fail@plt+0x143f4>
   25ec0:	mov	r5, #0
   25ec4:	b	25ed4 <__assert_fail@plt+0x14330>
   25ec8:	ldr	r3, [r6, #36]	; 0x24
   25ecc:	cmp	r5, r3
   25ed0:	bge	25f94 <__assert_fail@plt+0x143f0>
   25ed4:	ldr	r3, [r6, #12]
   25ed8:	mov	r0, r4
   25edc:	ldr	r1, [r3, r5, lsl #2]
   25ee0:	add	r5, r5, #1
   25ee4:	bl	11700 <iswctype@plt>
   25ee8:	cmp	r0, #0
   25eec:	beq	25ec8 <__assert_fail@plt+0x14324>
   25ef0:	ldrb	r3, [r6, #16]
   25ef4:	tst	r3, #1
   25ef8:	beq	25dec <__assert_fail@plt+0x14248>
   25efc:	b	25de8 <__assert_fail@plt+0x14244>
   25f00:	ldr	r2, [r3, #4]
   25f04:	ldr	r1, [sp, #32]
   25f08:	ldr	r0, [sp, #32]
   25f0c:	ldrb	r1, [r2, r1]
   25f10:	add	r0, r2, r0
   25f14:	cmp	r1, #193	; 0xc1
   25f18:	bls	25de8 <__assert_fail@plt+0x14244>
   25f1c:	ldr	ip, [sp, #32]
   25f20:	ldr	r3, [r3, #48]	; 0x30
   25f24:	add	ip, ip, #1
   25f28:	cmp	ip, r3
   25f2c:	bge	25de8 <__assert_fail@plt+0x14244>
   25f30:	cmp	r1, #223	; 0xdf
   25f34:	ldrb	ip, [r0, #1]
   25f38:	bls	26000 <__assert_fail@plt+0x1445c>
   25f3c:	cmp	r1, #239	; 0xef
   25f40:	bhi	25fe4 <__assert_fail@plt+0x14440>
   25f44:	cmp	ip, #159	; 0x9f
   25f48:	cmpls	r1, #224	; 0xe0
   25f4c:	movne	r7, #3
   25f50:	beq	25de8 <__assert_fail@plt+0x14244>
   25f54:	ldr	r1, [sp, #32]
   25f58:	add	r1, r1, r7
   25f5c:	cmp	r3, r1
   25f60:	blt	25de8 <__assert_fail@plt+0x14244>
   25f64:	ldr	r3, [sp, #32]
   25f68:	sub	r3, r3, #1
   25f6c:	add	r3, r2, r3
   25f70:	add	r3, r3, r7
   25f74:	b	25f80 <__assert_fail@plt+0x143dc>
   25f78:	cmp	r3, r0
   25f7c:	beq	25dec <__assert_fail@plt+0x14248>
   25f80:	ldrb	r2, [r0, #1]!
   25f84:	eor	r2, r2, #128	; 0x80
   25f88:	cmp	r2, #63	; 0x3f
   25f8c:	bls	25f78 <__assert_fail@plt+0x143d4>
   25f90:	b	25de8 <__assert_fail@plt+0x14244>
   25f94:	ldr	ip, [r6, #32]
   25f98:	cmp	ip, #0
   25f9c:	ble	25fd4 <__assert_fail@plt+0x14430>
   25fa0:	ldr	r2, [r6, #4]
   25fa4:	mov	r3, #0
   25fa8:	sub	r2, r2, #4
   25fac:	ldr	r1, [r2, #4]!
   25fb0:	cmp	r4, r1
   25fb4:	bcc	25fc8 <__assert_fail@plt+0x14424>
   25fb8:	ldr	r1, [r6, #8]
   25fbc:	ldr	r1, [r1, r3, lsl #2]
   25fc0:	cmp	r4, r1
   25fc4:	bls	25ef0 <__assert_fail@plt+0x1434c>
   25fc8:	add	r3, r3, #1
   25fcc:	cmp	r3, ip
   25fd0:	bne	25fac <__assert_fail@plt+0x14408>
   25fd4:	ldrb	r3, [r6, #16]
   25fd8:	tst	r3, #1
   25fdc:	bne	25dec <__assert_fail@plt+0x14248>
   25fe0:	b	25de8 <__assert_fail@plt+0x14244>
   25fe4:	cmp	r1, #247	; 0xf7
   25fe8:	bhi	26014 <__assert_fail@plt+0x14470>
   25fec:	cmp	ip, #143	; 0x8f
   25ff0:	cmpls	r1, #240	; 0xf0
   25ff4:	movne	r7, #4
   25ff8:	bne	25f54 <__assert_fail@plt+0x143b0>
   25ffc:	b	25de8 <__assert_fail@plt+0x14244>
   26000:	eor	ip, ip, #128	; 0x80
   26004:	cmp	ip, #63	; 0x3f
   26008:	movls	r7, #2
   2600c:	bls	25dec <__assert_fail@plt+0x14248>
   26010:	b	25de8 <__assert_fail@plt+0x14244>
   26014:	cmp	r1, #251	; 0xfb
   26018:	bhi	26030 <__assert_fail@plt+0x1448c>
   2601c:	cmp	ip, #135	; 0x87
   26020:	cmpls	r1, #248	; 0xf8
   26024:	movne	r7, #5
   26028:	bne	25f54 <__assert_fail@plt+0x143b0>
   2602c:	b	25de8 <__assert_fail@plt+0x14244>
   26030:	cmp	r1, #253	; 0xfd
   26034:	bhi	25de8 <__assert_fail@plt+0x14244>
   26038:	cmp	ip, #131	; 0x83
   2603c:	cmpls	r1, #252	; 0xfc
   26040:	beq	25de8 <__assert_fail@plt+0x14244>
   26044:	mov	r7, #6
   26048:	b	25f54 <__assert_fail@plt+0x143b0>
   2604c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26050:	mov	r5, r0
   26054:	ldr	r0, [r0, #84]	; 0x54
   26058:	ldr	r4, [r1, #4]
   2605c:	strd	r6, [sp, #8]
   26060:	mov	r7, r2
   26064:	mov	r6, #0
   26068:	strd	sl, [sp, #24]
   2606c:	mov	sl, r3
   26070:	ldr	r3, [r0]
   26074:	strd	r8, [sp, #16]
   26078:	str	lr, [sp, #32]
   2607c:	sub	sp, sp, #84	; 0x54
   26080:	ldr	r2, [r5, #120]	; 0x78
   26084:	str	r0, [sp, #20]
   26088:	str	r1, [sp, #36]	; 0x24
   2608c:	ldr	r1, [sp, #124]	; 0x7c
   26090:	ldr	r3, [r3, r7, lsl #3]
   26094:	add	r2, r1, r2
   26098:	cmp	r2, r4
   2609c:	str	r3, [sp, #28]
   260a0:	str	r6, [sp, #48]	; 0x30
   260a4:	bge	26590 <__assert_fail@plt+0x149ec>
   260a8:	ldr	r3, [sp, #36]	; 0x24
   260ac:	ldr	r2, [r5, #88]	; 0x58
   260b0:	ldr	r4, [r3]
   260b4:	ldr	r8, [r3, #8]
   260b8:	ldr	r3, [r5, #40]	; 0x28
   260bc:	cmp	r4, #0
   260c0:	str	r3, [sp, #44]	; 0x2c
   260c4:	ldr	r3, [r5, #100]	; 0x64
   260c8:	str	r3, [sp, #40]	; 0x28
   260cc:	beq	2651c <__assert_fail@plt+0x14978>
   260d0:	sub	r1, r4, #1
   260d4:	mov	r0, r5
   260d8:	str	r4, [r5, #40]	; 0x28
   260dc:	str	r8, [r5, #100]	; 0x64
   260e0:	bl	240b8 <__assert_fail@plt+0x12514>
   260e4:	cmp	r4, sl
   260e8:	mov	r6, r0
   260ec:	beq	26534 <__assert_fail@plt+0x14990>
   260f0:	ldr	sl, [r8, r4, lsl #2]
   260f4:	cmp	sl, #0
   260f8:	beq	265e4 <__assert_fail@plt+0x14a40>
   260fc:	ldrb	r3, [sl, #52]	; 0x34
   26100:	ands	r3, r3, #64	; 0x40
   26104:	bne	26414 <__assert_fail@plt+0x14870>
   26108:	add	r2, sp, #56	; 0x38
   2610c:	str	r2, [sp, #8]
   26110:	str	r3, [sp, #56]	; 0x38
   26114:	str	r3, [sp, #60]	; 0x3c
   26118:	str	r3, [sp, #64]	; 0x40
   2611c:	ldr	r3, [sp, #124]	; 0x7c
   26120:	cmp	r4, r3
   26124:	bge	263ac <__assert_fail@plt+0x14808>
   26128:	ldr	r3, [r5, #120]	; 0x78
   2612c:	cmp	r3, #0
   26130:	blt	263ac <__assert_fail@plt+0x14808>
   26134:	ldr	r3, [r5, #100]	; 0x64
   26138:	mov	r2, #0
   2613c:	add	fp, r4, #1
   26140:	str	r2, [sp, #12]
   26144:	ldr	r1, [r3, fp, lsl #2]
   26148:	lsl	r3, fp, #2
   2614c:	sub	r6, fp, #1
   26150:	str	r3, [sp, #16]
   26154:	mov	r3, #0
   26158:	cmp	r1, r3
   2615c:	str	r3, [sp, #60]	; 0x3c
   26160:	beq	264ac <__assert_fail@plt+0x14908>
   26164:	add	r1, r1, #4
   26168:	ldr	r0, [sp, #8]
   2616c:	bl	22d3c <__assert_fail@plt+0x11198>
   26170:	cmp	r0, #0
   26174:	str	r0, [sp, #48]	; 0x30
   26178:	bne	264cc <__assert_fail@plt+0x14928>
   2617c:	cmp	sl, #0
   26180:	beq	262f4 <__assert_fail@plt+0x14750>
   26184:	ldr	r3, [sl, #20]
   26188:	mov	r2, #0
   2618c:	str	r2, [sp, #52]	; 0x34
   26190:	str	r2, [sp, #68]	; 0x44
   26194:	str	r2, [sp, #72]	; 0x48
   26198:	cmp	r3, r2
   2619c:	str	r2, [sp, #76]	; 0x4c
   261a0:	ldr	r7, [r5, #84]	; 0x54
   261a4:	ble	26634 <__assert_fail@plt+0x14a90>
   261a8:	mov	r2, r7
   261ac:	mov	r8, #0
   261b0:	str	fp, [sp, #32]
   261b4:	ldr	r3, [sl, #24]
   261b8:	ldr	r0, [r2], #128	; 0x80
   261bc:	ldr	r4, [r3]
   261c0:	str	r2, [sp, #24]
   261c4:	lsl	r9, r4, #3
   261c8:	add	r3, r0, r9
   261cc:	b	26228 <__assert_fail@plt+0x14684>
   261d0:	add	r1, r0, r9
   261d4:	mov	r2, r6
   261d8:	mov	r0, r5
   261dc:	bl	241d0 <__assert_fail@plt+0x1262c>
   261e0:	cmp	r0, #0
   261e4:	beq	26204 <__assert_fail@plt+0x14660>
   261e8:	lsl	fp, r4, #2
   261ec:	ldr	r3, [r7, #12]
   261f0:	ldr	r0, [sp, #8]
   261f4:	ldr	r1, [r3, fp]
   261f8:	bl	20ea4 <__assert_fail@plt+0xf300>
   261fc:	cmp	r0, #0
   26200:	beq	264bc <__assert_fail@plt+0x14918>
   26204:	ldr	r3, [sl, #20]
   26208:	add	r8, r8, #1
   2620c:	cmp	r8, r3
   26210:	bge	264dc <__assert_fail@plt+0x14938>
   26214:	ldr	r3, [sl, #24]
   26218:	ldr	r0, [r7]
   2621c:	ldr	r4, [r3, r8, lsl #2]
   26220:	lsl	r9, r4, #3
   26224:	add	r3, r0, r9
   26228:	ldrb	r3, [r3, #6]
   2622c:	tst	r3, #16
   26230:	beq	261d0 <__assert_fail@plt+0x1462c>
   26234:	mov	r3, r5
   26238:	mov	r2, r4
   2623c:	str	r6, [sp]
   26240:	ldr	r1, [sp, #24]
   26244:	bl	25d74 <__assert_fail@plt+0x141d0>
   26248:	cmp	r0, #1
   2624c:	ble	2649c <__assert_fail@plt+0x148f8>
   26250:	ldr	r2, [r5, #100]	; 0x64
   26254:	add	r9, r0, r6
   26258:	lsl	fp, r4, #2
   2625c:	ldr	r3, [r7, #12]
   26260:	ldr	r1, [r2, r9, lsl #2]
   26264:	ldr	r4, [r3, r4, lsl #2]
   26268:	mov	r3, #0
   2626c:	str	r3, [sp, #72]	; 0x48
   26270:	cmp	r1, r3
   26274:	beq	26290 <__assert_fail@plt+0x146ec>
   26278:	add	r1, r1, #4
   2627c:	add	r0, sp, #68	; 0x44
   26280:	bl	22d3c <__assert_fail@plt+0x11198>
   26284:	cmp	r0, #0
   26288:	str	r0, [sp, #52]	; 0x34
   2628c:	bne	262d8 <__assert_fail@plt+0x14734>
   26290:	mov	r1, r4
   26294:	add	r0, sp, #68	; 0x44
   26298:	bl	20ea4 <__assert_fail@plt+0xf300>
   2629c:	cmp	r0, #0
   262a0:	beq	264bc <__assert_fail@plt+0x14918>
   262a4:	add	r2, sp, #68	; 0x44
   262a8:	mov	r1, r7
   262ac:	ldr	r4, [r5, #100]	; 0x64
   262b0:	add	r0, sp, #52	; 0x34
   262b4:	bl	2257c <__assert_fail@plt+0x109d8>
   262b8:	ldr	r3, [r5, #100]	; 0x64
   262bc:	str	r0, [r4, r9, lsl #2]
   262c0:	ldr	r3, [r3, r9, lsl #2]
   262c4:	cmp	r3, #0
   262c8:	bne	261ec <__assert_fail@plt+0x14648>
   262cc:	ldr	r3, [sp, #52]	; 0x34
   262d0:	cmp	r3, #0
   262d4:	beq	261ec <__assert_fail@plt+0x14648>
   262d8:	ldr	fp, [sp, #32]
   262dc:	ldr	r0, [sp, #76]	; 0x4c
   262e0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   262e4:	ldr	r3, [sp, #52]	; 0x34
   262e8:	cmp	r3, #0
   262ec:	str	r3, [sp, #48]	; 0x30
   262f0:	bne	264cc <__assert_fail@plt+0x14928>
   262f4:	ldr	r3, [sp, #60]	; 0x3c
   262f8:	mov	r4, fp
   262fc:	cmp	r3, #0
   26300:	beq	2634c <__assert_fail@plt+0x147a8>
   26304:	ldr	r1, [sp, #8]
   26308:	ldr	r0, [sp, #20]
   2630c:	ldr	r2, [sp, #28]
   26310:	ldr	r3, [sp, #128]	; 0x80
   26314:	bl	23138 <__assert_fail@plt+0x11594>
   26318:	cmp	r0, #0
   2631c:	str	r0, [sp, #48]	; 0x30
   26320:	bne	264cc <__assert_fail@plt+0x14928>
   26324:	mov	r2, fp
   26328:	mov	r0, r5
   2632c:	ldr	r3, [sp, #28]
   26330:	ldr	r1, [sp, #128]	; 0x80
   26334:	str	r1, [sp]
   26338:	ldr	r1, [sp, #8]
   2633c:	bl	23288 <__assert_fail@plt+0x116e4>
   26340:	cmp	r0, #0
   26344:	str	r0, [sp, #48]	; 0x30
   26348:	bne	264cc <__assert_fail@plt+0x14928>
   2634c:	mov	r1, r6
   26350:	mov	r0, r5
   26354:	ldr	r2, [r5, #88]	; 0x58
   26358:	bl	240b8 <__assert_fail@plt+0x12514>
   2635c:	mov	r3, r0
   26360:	add	r0, sp, #48	; 0x30
   26364:	ldr	r2, [sp, #8]
   26368:	ldr	r1, [sp, #20]
   2636c:	bl	22294 <__assert_fail@plt+0x106f0>
   26370:	subs	sl, r0, #0
   26374:	beq	264f4 <__assert_fail@plt+0x14950>
   26378:	mov	r2, #0
   2637c:	ldr	r3, [r5, #100]	; 0x64
   26380:	str	r2, [sp, #12]
   26384:	ldr	r2, [sp, #16]
   26388:	str	sl, [r3, r2]
   2638c:	ldr	r2, [sp, #124]	; 0x7c
   26390:	cmp	r2, fp
   26394:	ble	263ac <__assert_fail@plt+0x14808>
   26398:	ldr	r1, [sp, #12]
   2639c:	add	fp, fp, #1
   263a0:	ldr	r2, [r5, #120]	; 0x78
   263a4:	cmp	r2, r1
   263a8:	bge	26144 <__assert_fail@plt+0x145a0>
   263ac:	ldr	r0, [sp, #64]	; 0x40
   263b0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   263b4:	ldr	r3, [r5, #100]	; 0x64
   263b8:	ldr	r2, [sp, #124]	; 0x7c
   263bc:	ldr	r3, [r3, r2, lsl #2]
   263c0:	cmp	r3, #0
   263c4:	beq	26614 <__assert_fail@plt+0x14a70>
   263c8:	ldr	r2, [sp, #36]	; 0x24
   263cc:	add	r1, r3, #12
   263d0:	ldr	r0, [sp, #44]	; 0x2c
   263d4:	str	r4, [r2]
   263d8:	ldr	r2, [sp, #120]	; 0x78
   263dc:	str	r0, [r5, #40]	; 0x28
   263e0:	ldr	r0, [sp, #40]	; 0x28
   263e4:	str	r0, [r5, #100]	; 0x64
   263e8:	ldr	r0, [r3, #8]
   263ec:	bl	21478 <__assert_fail@plt+0xf8d4>
   263f0:	clz	r0, r0
   263f4:	lsr	r0, r0, #5
   263f8:	add	sp, sp, #84	; 0x54
   263fc:	ldrd	r4, [sp]
   26400:	ldrd	r6, [sp, #8]
   26404:	ldrd	r8, [sp, #16]
   26408:	ldrd	sl, [sp, #24]
   2640c:	add	sp, sp, #32
   26410:	pop	{pc}		; (ldr pc, [sp], #4)
   26414:	add	r3, sp, #56	; 0x38
   26418:	add	r1, sl, #4
   2641c:	mov	r0, r3
   26420:	str	r3, [sp, #8]
   26424:	bl	220a0 <__assert_fail@plt+0x104fc>
   26428:	cmp	r0, #0
   2642c:	str	r0, [sp, #48]	; 0x30
   26430:	bne	263f8 <__assert_fail@plt+0x14854>
   26434:	ldrb	r3, [sl, #52]	; 0x34
   26438:	tst	r3, #64	; 0x40
   2643c:	beq	2611c <__assert_fail@plt+0x14578>
   26440:	ldr	r3, [sp, #60]	; 0x3c
   26444:	cmp	r3, #0
   26448:	beq	26474 <__assert_fail@plt+0x148d0>
   2644c:	mov	r2, r4
   26450:	mov	r0, r5
   26454:	ldr	r3, [sp, #28]
   26458:	ldr	r1, [sp, #128]	; 0x80
   2645c:	str	r1, [sp]
   26460:	ldr	r1, [sp, #8]
   26464:	bl	23288 <__assert_fail@plt+0x116e4>
   26468:	cmp	r0, #0
   2646c:	str	r0, [sp, #48]	; 0x30
   26470:	bne	264cc <__assert_fail@plt+0x14928>
   26474:	mov	r3, r6
   26478:	add	r0, sp, #48	; 0x30
   2647c:	ldr	r2, [sp, #8]
   26480:	ldr	r1, [sp, #20]
   26484:	bl	22294 <__assert_fail@plt+0x106f0>
   26488:	subs	sl, r0, #0
   2648c:	beq	265fc <__assert_fail@plt+0x14a58>
   26490:	ldr	r3, [r5, #100]	; 0x64
   26494:	str	sl, [r3, r4, lsl #2]
   26498:	b	2611c <__assert_fail@plt+0x14578>
   2649c:	cmp	r0, #0
   264a0:	bne	261e8 <__assert_fail@plt+0x14644>
   264a4:	ldr	r0, [r7]
   264a8:	b	261d0 <__assert_fail@plt+0x1462c>
   264ac:	cmp	sl, #0
   264b0:	bne	26184 <__assert_fail@plt+0x145e0>
   264b4:	mov	r4, fp
   264b8:	b	2634c <__assert_fail@plt+0x147a8>
   264bc:	ldr	r0, [sp, #76]	; 0x4c
   264c0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   264c4:	mov	r3, #12
   264c8:	str	r3, [sp, #48]	; 0x30
   264cc:	ldr	r0, [sp, #64]	; 0x40
   264d0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   264d4:	ldr	r0, [sp, #48]	; 0x30
   264d8:	b	263f8 <__assert_fail@plt+0x14854>
   264dc:	ldr	fp, [sp, #32]
   264e0:	ldr	r0, [sp, #76]	; 0x4c
   264e4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   264e8:	mov	r3, #0
   264ec:	str	r3, [sp, #48]	; 0x30
   264f0:	b	262f4 <__assert_fail@plt+0x14750>
   264f4:	ldr	r3, [sp, #48]	; 0x30
   264f8:	cmp	r3, #0
   264fc:	bne	264cc <__assert_fail@plt+0x14928>
   26500:	ldr	r2, [sp, #12]
   26504:	ldr	r3, [r5, #100]	; 0x64
   26508:	add	r2, r2, #1
   2650c:	str	r2, [sp, #12]
   26510:	ldr	r2, [sp, #16]
   26514:	str	sl, [r3, r2]
   26518:	b	2638c <__assert_fail@plt+0x147e8>
   2651c:	sub	r1, sl, #1
   26520:	mov	r0, r5
   26524:	str	sl, [r5, #40]	; 0x28
   26528:	str	r8, [r5, #100]	; 0x64
   2652c:	bl	240b8 <__assert_fail@plt+0x12514>
   26530:	mov	r6, r0
   26534:	mov	r3, #1
   26538:	mov	r0, #4
   2653c:	str	r3, [sp, #56]	; 0x38
   26540:	str	r3, [sp, #60]	; 0x3c
   26544:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   26548:	cmp	r0, #0
   2654c:	str	r0, [sp, #64]	; 0x40
   26550:	beq	2660c <__assert_fail@plt+0x14a68>
   26554:	add	r3, sp, #56	; 0x38
   26558:	mov	ip, #0
   2655c:	str	r7, [r0]
   26560:	mov	r1, r3
   26564:	ldr	r0, [sp, #20]
   26568:	str	r3, [sp, #8]
   2656c:	ldr	r2, [sp, #28]
   26570:	str	ip, [sp, #48]	; 0x30
   26574:	ldr	r3, [sp, #128]	; 0x80
   26578:	bl	23138 <__assert_fail@plt+0x11594>
   2657c:	cmp	r0, #0
   26580:	str	r0, [sp, #48]	; 0x30
   26584:	moveq	r4, sl
   26588:	beq	26440 <__assert_fail@plt+0x1489c>
   2658c:	b	264cc <__assert_fail@plt+0x14928>
   26590:	mvn	r3, #-2147483648	; 0x80000000
   26594:	add	r9, r2, #1
   26598:	sub	r3, r3, r4
   2659c:	cmp	r3, r9
   265a0:	blt	2660c <__assert_fail@plt+0x14a68>
   265a4:	add	r8, r4, r9
   265a8:	cmn	r8, #-1073741823	; 0xc0000001
   265ac:	bhi	2660c <__assert_fail@plt+0x14a68>
   265b0:	ldr	fp, [sp, #36]	; 0x24
   265b4:	lsl	r1, r8, #2
   265b8:	ldr	r0, [fp, #8]
   265bc:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   265c0:	subs	r3, r0, #0
   265c4:	beq	2660c <__assert_fail@plt+0x14a68>
   265c8:	lsl	r2, r9, #2
   265cc:	mov	r1, r6
   265d0:	str	r8, [fp, #4]
   265d4:	add	r0, r3, r4, lsl #2
   265d8:	str	r3, [fp, #8]
   265dc:	bl	119e8 <memset@plt>
   265e0:	b	260a8 <__assert_fail@plt+0x14504>
   265e4:	add	r3, sp, #56	; 0x38
   265e8:	str	r3, [sp, #8]
   265ec:	str	sl, [sp, #56]	; 0x38
   265f0:	str	sl, [sp, #60]	; 0x3c
   265f4:	str	sl, [sp, #64]	; 0x40
   265f8:	b	2611c <__assert_fail@plt+0x14578>
   265fc:	ldr	r3, [sp, #48]	; 0x30
   26600:	cmp	r3, #0
   26604:	beq	26490 <__assert_fail@plt+0x148ec>
   26608:	b	264cc <__assert_fail@plt+0x14928>
   2660c:	mov	r0, #12
   26610:	b	263f8 <__assert_fail@plt+0x14854>
   26614:	ldr	r3, [sp, #36]	; 0x24
   26618:	mov	r0, #1
   2661c:	str	r4, [r3]
   26620:	ldr	r3, [sp, #44]	; 0x2c
   26624:	str	r3, [r5, #40]	; 0x28
   26628:	ldr	r3, [sp, #40]	; 0x28
   2662c:	str	r3, [r5, #100]	; 0x64
   26630:	b	263f8 <__assert_fail@plt+0x14854>
   26634:	mov	r0, #0
   26638:	b	264e4 <__assert_fail@plt+0x14940>
   2663c:	mov	ip, r2
   26640:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26644:	mov	r4, r0
   26648:	strd	r6, [sp, #8]
   2664c:	mov	r6, r2
   26650:	mov	r7, r3
   26654:	strd	r8, [sp, #16]
   26658:	mov	r3, #8
   2665c:	mov	r8, r1
   26660:	strd	sl, [sp, #24]
   26664:	str	lr, [sp, #32]
   26668:	sub	sp, sp, #20
   2666c:	ldr	r2, [ip], #8
   26670:	str	r7, [sp]
   26674:	ldr	r5, [sp, #56]	; 0x38
   26678:	mov	r1, ip
   2667c:	str	r5, [sp, #4]
   26680:	str	r3, [sp, #8]
   26684:	ldr	r3, [r6, #4]
   26688:	bl	2604c <__assert_fail@plt+0x144a8>
   2668c:	subs	fp, r0, #0
   26690:	beq	266b4 <__assert_fail@plt+0x14b10>
   26694:	mov	r0, fp
   26698:	add	sp, sp, #20
   2669c:	ldrd	r4, [sp]
   266a0:	ldrd	r6, [sp, #8]
   266a4:	ldrd	r8, [sp, #16]
   266a8:	ldrd	sl, [sp, #24]
   266ac:	add	sp, sp, #32
   266b0:	pop	{pc}		; (ldr pc, [sp], #4)
   266b4:	ldr	r3, [r4, #108]	; 0x6c
   266b8:	ldr	r1, [r4, #112]	; 0x70
   266bc:	ldr	r9, [r6, #4]
   266c0:	ldr	sl, [r8]
   266c4:	cmp	r3, r1
   266c8:	ldr	r0, [r4, #116]	; 0x74
   266cc:	movlt	lr, r9
   266d0:	bge	2676c <__assert_fail@plt+0x14bc8>
   266d4:	add	r2, r3, r3, lsl #1
   266d8:	cmp	r3, #0
   266dc:	lsl	r2, r2, #3
   266e0:	ble	266fc <__assert_fail@plt+0x14b58>
   266e4:	sub	r1, r2, #24
   266e8:	add	r1, r0, r1
   266ec:	ldr	ip, [r1, #4]
   266f0:	cmp	r5, ip
   266f4:	moveq	ip, #1
   266f8:	strbeq	ip, [r1, #20]
   266fc:	cmp	sl, r9
   26700:	add	ip, r0, r2
   26704:	str	r7, [r0, r2]
   26708:	add	r3, r3, #1
   2670c:	movne	r0, #0
   26710:	mvneq	r0, #0
   26714:	mov	r1, #0
   26718:	stmib	ip, {r5, sl}
   2671c:	str	r9, [ip, #12]
   26720:	sub	r2, r9, sl
   26724:	add	r5, r5, lr
   26728:	str	r0, [ip, #16]
   2672c:	mov	r0, r4
   26730:	str	r3, [r4, #108]	; 0x6c
   26734:	strb	r1, [ip, #20]
   26738:	ldr	r3, [r4, #120]	; 0x78
   2673c:	cmp	r3, r2
   26740:	strlt	r2, [r4, #120]	; 0x78
   26744:	ldr	r1, [r8]
   26748:	sub	r1, r5, r1
   2674c:	add	sp, sp, #20
   26750:	ldrd	r4, [sp]
   26754:	ldrd	r6, [sp, #8]
   26758:	ldrd	r8, [sp, #16]
   2675c:	ldrd	sl, [sp, #24]
   26760:	ldr	lr, [sp, #32]
   26764:	add	sp, sp, #36	; 0x24
   26768:	b	212a0 <__assert_fail@plt+0xf6fc>
   2676c:	add	r1, r1, r1, lsl #1
   26770:	lsl	r1, r1, #4
   26774:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   26778:	cmp	r0, #0
   2677c:	beq	267c0 <__assert_fail@plt+0x14c1c>
   26780:	ldr	r3, [r4, #108]	; 0x6c
   26784:	mov	r1, fp
   26788:	str	r0, [r4, #116]	; 0x74
   2678c:	ldr	r2, [r4, #112]	; 0x70
   26790:	add	r3, r3, r3, lsl #1
   26794:	add	r2, r2, r2, lsl #1
   26798:	add	r0, r0, r3, lsl #3
   2679c:	lsl	r2, r2, #3
   267a0:	bl	119e8 <memset@plt>
   267a4:	ldr	lr, [r6, #4]
   267a8:	ldr	r2, [r4, #112]	; 0x70
   267ac:	ldr	r3, [r4, #108]	; 0x6c
   267b0:	ldr	r0, [r4, #116]	; 0x74
   267b4:	lsl	r2, r2, #1
   267b8:	str	r2, [r4, #112]	; 0x70
   267bc:	b	266d4 <__assert_fail@plt+0x14b30>
   267c0:	ldr	r0, [r4, #116]	; 0x74
   267c4:	mov	fp, #12
   267c8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   267cc:	b	26694 <__assert_fail@plt+0x14af0>
   267d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   267d4:	ldr	r3, [r0, #84]	; 0x54
   267d8:	strd	r6, [sp, #8]
   267dc:	ldr	r6, [r1]
   267e0:	strd	r8, [sp, #16]
   267e4:	strd	sl, [sp, #24]
   267e8:	str	lr, [sp, #32]
   267ec:	sub	sp, sp, #84	; 0x54
   267f0:	ldr	sl, [r0, #40]	; 0x28
   267f4:	cmp	r6, #0
   267f8:	str	r3, [sp, #24]
   267fc:	ble	26d24 <__assert_fail@plt+0x15180>
   26800:	lsl	r3, sl, #2
   26804:	mov	fp, r0
   26808:	mov	r9, sl
   2680c:	str	r2, [sp, #36]	; 0x24
   26810:	str	r3, [sp, #44]	; 0x2c
   26814:	mov	r3, #0
   26818:	str	r1, [sp, #56]	; 0x38
   2681c:	str	r3, [sp, #16]
   26820:	b	26868 <__assert_fail@plt+0x14cc4>
   26824:	tst	r0, #1
   26828:	beq	26854 <__assert_fail@plt+0x14cb0>
   2682c:	tst	r3, #8
   26830:	bne	26854 <__assert_fail@plt+0x14cb0>
   26834:	tst	r3, #32
   26838:	beq	26844 <__assert_fail@plt+0x14ca0>
   2683c:	tst	r0, #2
   26840:	beq	26854 <__assert_fail@plt+0x14cb0>
   26844:	tst	r3, #128	; 0x80
   26848:	beq	268d8 <__assert_fail@plt+0x14d34>
   2684c:	tst	r0, #8
   26850:	bne	268d8 <__assert_fail@plt+0x14d34>
   26854:	ldr	r3, [sp, #16]
   26858:	add	r3, r3, #1
   2685c:	cmp	r3, r6
   26860:	str	r3, [sp, #16]
   26864:	bge	26d24 <__assert_fail@plt+0x15180>
   26868:	ldr	r1, [sp, #16]
   2686c:	ldr	r3, [sp, #36]	; 0x24
   26870:	ldr	r2, [r3]
   26874:	ldr	r3, [sp, #24]
   26878:	ldr	sl, [r2, r1, lsl #2]
   2687c:	ldr	r3, [r3]
   26880:	add	r3, r3, sl, lsl #3
   26884:	ldrb	r2, [r3, #4]
   26888:	cmp	r2, #4
   2688c:	bne	26854 <__assert_fail@plt+0x14cb0>
   26890:	ldr	r4, [r3, #4]
   26894:	mov	r3, #65280	; 0xff00
   26898:	movt	r3, #3
   2689c:	and	r3, r3, r4
   268a0:	cmp	r3, #0
   268a4:	beq	268d8 <__assert_fail@plt+0x14d34>
   268a8:	mov	r1, r9
   268ac:	mov	r0, fp
   268b0:	ldr	r2, [fp, #88]	; 0x58
   268b4:	bl	240b8 <__assert_fail@plt+0x12514>
   268b8:	ubfx	r3, r4, #8, #10
   268bc:	tst	r3, #4
   268c0:	bne	26824 <__assert_fail@plt+0x14c80>
   268c4:	tst	r3, #8
   268c8:	beq	26834 <__assert_fail@plt+0x14c90>
   268cc:	tst	r0, #1
   268d0:	beq	26834 <__assert_fail@plt+0x14c90>
   268d4:	b	26854 <__assert_fail@plt+0x14cb0>
   268d8:	ldr	ip, [fp, #108]	; 0x6c
   268dc:	mov	r0, #0
   268e0:	mov	r4, ip
   268e4:	mov	r3, ip
   268e8:	cmp	r0, r3
   268ec:	bge	26948 <__assert_fail@plt+0x14da4>
   268f0:	add	r2, r0, r3
   268f4:	ldr	lr, [fp, #116]	; 0x74
   268f8:	add	r2, r2, r2, lsr #31
   268fc:	asr	r2, r2, #1
   26900:	add	r1, r2, r2, lsl #1
   26904:	add	r1, lr, r1, lsl #3
   26908:	ldr	r1, [r1, #4]
   2690c:	cmp	r9, r1
   26910:	ble	26938 <__assert_fail@plt+0x14d94>
   26914:	b	26b50 <__assert_fail@plt+0x14fac>
   26918:	asr	r3, r3, #1
   2691c:	add	r1, r3, r3, lsl #1
   26920:	mov	r5, r3
   26924:	add	r1, lr, r1, lsl #3
   26928:	ldr	r1, [r1, #4]
   2692c:	cmp	r9, r1
   26930:	bgt	26b58 <__assert_fail@plt+0x14fb4>
   26934:	mov	r2, r3
   26938:	add	r3, r0, r2
   2693c:	cmp	r0, r2
   26940:	add	r3, r3, r3, lsr #31
   26944:	blt	26918 <__assert_fail@plt+0x14d74>
   26948:	cmp	ip, r0
   2694c:	ble	26b64 <__assert_fail@plt+0x14fc0>
   26950:	ldr	r3, [fp, #116]	; 0x74
   26954:	add	r2, r0, r0, lsl #1
   26958:	cmn	r0, #1
   2695c:	add	r3, r3, r2, lsl #3
   26960:	ldr	r1, [r3, #4]
   26964:	sub	r2, r1, r9
   26968:	clz	r2, r2
   2696c:	lsr	r2, r2, #5
   26970:	moveq	r2, #0
   26974:	cmp	r2, #0
   26978:	beq	26b64 <__assert_fail@plt+0x14fc0>
   2697c:	add	r3, r3, #24
   26980:	b	26990 <__assert_fail@plt+0x14dec>
   26984:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   26988:	cmp	r2, #0
   2698c:	beq	26b64 <__assert_fail@plt+0x14fc0>
   26990:	ldr	r2, [r3, #-24]	; 0xffffffe8
   26994:	add	r3, r3, #24
   26998:	cmp	sl, r2
   2699c:	bne	26984 <__assert_fail@plt+0x14de0>
   269a0:	lsl	r2, sl, #2
   269a4:	mov	r3, #0
   269a8:	cmp	r4, ip
   269ac:	str	r2, [sp, #40]	; 0x28
   269b0:	str	r3, [sp, #64]	; 0x40
   269b4:	bge	26cd8 <__assert_fail@plt+0x15134>
   269b8:	add	r3, sl, sl, lsl #1
   269bc:	ldr	r8, [sp, #24]
   269c0:	lsl	r3, r3, #2
   269c4:	str	r3, [sp, #48]	; 0x30
   269c8:	b	26ab0 <__assert_fail@plt+0x14f0c>
   269cc:	ldr	r2, [r8, #20]
   269d0:	ldr	r1, [sp, #48]	; 0x30
   269d4:	add	r2, r2, r1
   269d8:	ldr	r2, [r2, #8]
   269dc:	ldr	r2, [r2]
   269e0:	add	r2, r2, r2, lsl #1
   269e4:	add	r6, r6, r2, lsl #2
   269e8:	add	r3, r9, r3
   269ec:	mov	r0, fp
   269f0:	ldr	r2, [fp, #88]	; 0x58
   269f4:	sub	r5, r3, r5
   269f8:	sub	r1, r5, #1
   269fc:	bl	240b8 <__assert_fail@plt+0x12514>
   26a00:	ldr	r2, [sp, #44]	; 0x2c
   26a04:	mov	r3, r0
   26a08:	ldr	r7, [fp, #100]	; 0x64
   26a0c:	ldr	r2, [r7, r2]
   26a10:	ldr	r1, [r7, r5, lsl #2]
   26a14:	cmp	r2, #0
   26a18:	ldrne	r2, [r2, #8]
   26a1c:	cmp	r1, #0
   26a20:	str	r2, [sp, #28]
   26a24:	beq	26b04 <__assert_fail@plt+0x14f60>
   26a28:	mov	r2, r6
   26a2c:	add	r0, sp, #68	; 0x44
   26a30:	ldr	r1, [r1, #40]	; 0x28
   26a34:	str	r3, [sp, #32]
   26a38:	bl	22128 <__assert_fail@plt+0x10584>
   26a3c:	cmp	r0, #0
   26a40:	str	r0, [sp, #64]	; 0x40
   26a44:	ldr	r3, [sp, #32]
   26a48:	bne	26d14 <__assert_fail@plt+0x15170>
   26a4c:	add	r2, sp, #68	; 0x44
   26a50:	mov	r1, r8
   26a54:	ldr	r7, [fp, #100]	; 0x64
   26a58:	add	r0, sp, #64	; 0x40
   26a5c:	bl	22294 <__assert_fail@plt+0x106f0>
   26a60:	str	r0, [r7, r5, lsl #2]
   26a64:	ldr	r0, [sp, #76]	; 0x4c
   26a68:	bl	17ac8 <__assert_fail@plt+0x5f24>
   26a6c:	ldr	r3, [fp, #100]	; 0x64
   26a70:	ldr	r2, [r3, r5, lsl #2]
   26a74:	cmp	r2, #0
   26a78:	beq	26b28 <__assert_fail@plt+0x14f84>
   26a7c:	ldr	r2, [sp, #20]
   26a80:	cmp	r2, #0
   26a84:	bne	26aa0 <__assert_fail@plt+0x14efc>
   26a88:	ldr	r2, [sp, #44]	; 0x2c
   26a8c:	ldr	r3, [r3, r2]
   26a90:	ldr	r2, [sp, #28]
   26a94:	ldr	r3, [r3, #8]
   26a98:	cmp	r3, r2
   26a9c:	bgt	26c90 <__assert_fail@plt+0x150ec>
   26aa0:	ldr	ip, [fp, #108]	; 0x6c
   26aa4:	add	r4, r4, #1
   26aa8:	cmp	r4, ip
   26aac:	bge	26cd8 <__assert_fail@plt+0x15134>
   26ab0:	ldr	r3, [fp, #116]	; 0x74
   26ab4:	add	r2, r4, r4, lsl #1
   26ab8:	ldr	r1, [r3, r2, lsl #3]
   26abc:	add	r3, r3, r2, lsl #3
   26ac0:	cmp	sl, r1
   26ac4:	bne	26aa4 <__assert_fail@plt+0x14f00>
   26ac8:	ldr	r2, [r3, #4]
   26acc:	cmp	r9, r2
   26ad0:	bne	26aa4 <__assert_fail@plt+0x14f00>
   26ad4:	ldr	r5, [r3, #8]
   26ad8:	ldr	r3, [r3, #12]
   26adc:	ldr	r6, [r8, #24]
   26ae0:	subs	r2, r3, r5
   26ae4:	str	r2, [sp, #20]
   26ae8:	beq	269cc <__assert_fail@plt+0x14e28>
   26aec:	ldr	r2, [r8, #12]
   26af0:	ldr	r1, [sp, #40]	; 0x28
   26af4:	ldr	r2, [r2, r1]
   26af8:	add	r2, r2, r2, lsl #1
   26afc:	add	r6, r6, r2, lsl #2
   26b00:	b	269e8 <__assert_fail@plt+0x14e44>
   26b04:	mov	r2, r6
   26b08:	mov	r1, r8
   26b0c:	add	r0, sp, #64	; 0x40
   26b10:	bl	22294 <__assert_fail@plt+0x106f0>
   26b14:	ldr	r3, [fp, #100]	; 0x64
   26b18:	str	r0, [r7, r5, lsl #2]
   26b1c:	ldr	r2, [r3, r5, lsl #2]
   26b20:	cmp	r2, #0
   26b24:	bne	26a7c <__assert_fail@plt+0x14ed8>
   26b28:	ldr	r0, [sp, #64]	; 0x40
   26b2c:	cmp	r0, #0
   26b30:	beq	26a7c <__assert_fail@plt+0x14ed8>
   26b34:	add	sp, sp, #84	; 0x54
   26b38:	ldrd	r4, [sp]
   26b3c:	ldrd	r6, [sp, #8]
   26b40:	ldrd	r8, [sp, #16]
   26b44:	ldrd	sl, [sp, #24]
   26b48:	add	sp, sp, #32
   26b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   26b50:	mov	r5, r2
   26b54:	mov	r2, r3
   26b58:	add	r0, r5, #1
   26b5c:	mov	r3, r2
   26b60:	b	268e8 <__assert_fail@plt+0x14d44>
   26b64:	ldr	r3, [fp, #84]	; 0x54
   26b68:	ldr	r1, [fp, #124]	; 0x7c
   26b6c:	str	r3, [sp, #52]	; 0x34
   26b70:	ldr	r3, [r3]
   26b74:	cmp	r1, #0
   26b78:	ldr	r2, [r3, sl, lsl #3]
   26b7c:	str	r2, [sp, #48]	; 0x30
   26b80:	ble	269a0 <__assert_fail@plt+0x14dfc>
   26b84:	mov	r2, #0
   26b88:	str	sl, [sp, #40]	; 0x28
   26b8c:	str	r2, [sp, #28]
   26b90:	ldr	r2, [fp, #4]
   26b94:	str	r9, [sp, #32]
   26b98:	str	r4, [sp, #60]	; 0x3c
   26b9c:	mov	sl, r2
   26ba0:	ldr	r0, [sp, #28]
   26ba4:	ldr	r2, [fp, #132]	; 0x84
   26ba8:	ldr	r4, [r2, r0, lsl #2]
   26bac:	ldr	r2, [r4, #4]
   26bb0:	ldr	r3, [r3, r2, lsl #3]
   26bb4:	ldr	r2, [sp, #48]	; 0x30
   26bb8:	cmp	r2, r3
   26bbc:	beq	26be0 <__assert_fail@plt+0x1503c>
   26bc0:	ldr	r3, [sp, #28]
   26bc4:	add	r3, r3, #1
   26bc8:	cmp	r3, r1
   26bcc:	str	r3, [sp, #28]
   26bd0:	bge	26f1c <__assert_fail@plt+0x15378>
   26bd4:	ldr	r3, [sp, #52]	; 0x34
   26bd8:	ldr	r3, [r3]
   26bdc:	b	26ba0 <__assert_fail@plt+0x14ffc>
   26be0:	ldr	r6, [r4]
   26be4:	ldr	ip, [r4, #16]
   26be8:	ldr	r7, [sp, #32]
   26bec:	cmp	ip, #0
   26bf0:	ble	26d3c <__assert_fail@plt+0x15198>
   26bf4:	mov	r3, sl
   26bf8:	mov	r5, #0
   26bfc:	mov	sl, r7
   26c00:	mov	r7, r6
   26c04:	b	26c18 <__assert_fail@plt+0x15074>
   26c08:	ldr	ip, [r4, #16]
   26c0c:	mov	sl, r6
   26c10:	cmp	r5, ip
   26c14:	bge	26d2c <__assert_fail@plt+0x15188>
   26c18:	ldr	r2, [r4, #20]
   26c1c:	ldr	r9, [r2, r5, lsl #2]
   26c20:	ldr	r8, [r9, #4]
   26c24:	sub	r2, r8, r7
   26c28:	cmp	r2, #0
   26c2c:	add	r6, r2, sl
   26c30:	ble	26c5c <__assert_fail@plt+0x150b8>
   26c34:	ldr	r1, [fp, #28]
   26c38:	cmp	r1, r6
   26c3c:	blt	26ce4 <__assert_fail@plt+0x15140>
   26c40:	add	r1, r3, r7
   26c44:	add	r0, r3, sl
   26c48:	str	r3, [sp, #20]
   26c4c:	bl	117c0 <memcmp@plt>
   26c50:	cmp	r0, #0
   26c54:	ldr	r3, [sp, #20]
   26c58:	bne	26ec4 <__assert_fail@plt+0x15320>
   26c5c:	ldr	r1, [sp, #32]
   26c60:	mov	r2, r9
   26c64:	mov	r0, fp
   26c68:	add	r5, r5, #1
   26c6c:	mov	r7, r8
   26c70:	ldr	r3, [sp, #40]	; 0x28
   26c74:	str	r1, [sp]
   26c78:	mov	r1, r4
   26c7c:	bl	2663c <__assert_fail@plt+0x14a98>
   26c80:	cmp	r0, #1
   26c84:	ldr	r3, [fp, #4]
   26c88:	bls	26c08 <__assert_fail@plt+0x15064>
   26c8c:	b	26b34 <__assert_fail@plt+0x14f90>
   26c90:	add	r5, r6, #4
   26c94:	add	r6, r6, #8
   26c98:	mov	r2, r6
   26c9c:	mov	r1, r5
   26ca0:	mov	r3, r9
   26ca4:	mov	r0, fp
   26ca8:	bl	24c58 <__assert_fail@plt+0x130b4>
   26cac:	cmp	r0, #0
   26cb0:	str	r0, [sp, #64]	; 0x40
   26cb4:	bne	26b34 <__assert_fail@plt+0x14f90>
   26cb8:	mov	r2, r6
   26cbc:	mov	r1, r5
   26cc0:	mov	r0, fp
   26cc4:	bl	267d0 <__assert_fail@plt+0x14c2c>
   26cc8:	cmp	r0, #0
   26ccc:	str	r0, [sp, #64]	; 0x40
   26cd0:	beq	26aa0 <__assert_fail@plt+0x14efc>
   26cd4:	b	26b34 <__assert_fail@plt+0x14f90>
   26cd8:	ldr	r3, [sp, #56]	; 0x38
   26cdc:	ldr	r6, [r3]
   26ce0:	b	26854 <__assert_fail@plt+0x14cb0>
   26ce4:	ldr	lr, [fp, #48]	; 0x30
   26ce8:	mov	r1, r6
   26cec:	mov	r0, fp
   26cf0:	str	r2, [sp, #20]
   26cf4:	cmp	lr, r6
   26cf8:	blt	26f60 <__assert_fail@plt+0x153bc>
   26cfc:	bl	212a0 <__assert_fail@plt+0xf6fc>
   26d00:	cmp	r0, #0
   26d04:	bne	26b34 <__assert_fail@plt+0x14f90>
   26d08:	ldr	r3, [fp, #4]
   26d0c:	ldr	r2, [sp, #20]
   26d10:	b	26c40 <__assert_fail@plt+0x1509c>
   26d14:	ldr	r0, [sp, #76]	; 0x4c
   26d18:	bl	17ac8 <__assert_fail@plt+0x5f24>
   26d1c:	ldr	r0, [sp, #64]	; 0x40
   26d20:	b	26b34 <__assert_fail@plt+0x14f90>
   26d24:	mov	r0, #0
   26d28:	b	26b34 <__assert_fail@plt+0x14f90>
   26d2c:	mov	r9, r6
   26d30:	mov	sl, r3
   26d34:	add	r6, r8, #1
   26d38:	mov	r7, r9
   26d3c:	ldr	r3, [sp, #32]
   26d40:	cmp	r3, r6
   26d44:	blt	26e94 <__assert_fail@plt+0x152f0>
   26d48:	ldr	r9, [sp, #32]
   26d4c:	ldr	r8, [sp, #48]	; 0x30
   26d50:	ldr	r3, [r4]
   26d54:	sub	r3, r6, r3
   26d58:	cmp	r3, #0
   26d5c:	ble	26d88 <__assert_fail@plt+0x151e4>
   26d60:	ldr	r3, [fp, #28]
   26d64:	cmp	r3, r7
   26d68:	ble	26ef0 <__assert_fail@plt+0x1534c>
   26d6c:	add	r5, r7, #1
   26d70:	add	r3, sl, r6
   26d74:	ldrb	r2, [sl, r7]
   26d78:	ldrb	r3, [r3, #-1]
   26d7c:	cmp	r2, r3
   26d80:	bne	26e94 <__assert_fail@plt+0x152f0>
   26d84:	mov	r7, r5
   26d88:	ldr	r3, [fp, #100]	; 0x64
   26d8c:	ldr	r3, [r3, r6, lsl #2]
   26d90:	cmp	r3, #0
   26d94:	beq	26e88 <__assert_fail@plt+0x152e4>
   26d98:	ldr	ip, [r3, #8]
   26d9c:	cmp	ip, #0
   26da0:	ble	26e88 <__assert_fail@plt+0x152e4>
   26da4:	ldr	r2, [r3, #12]
   26da8:	mov	r3, #0
   26dac:	ldr	r1, [sp, #52]	; 0x34
   26db0:	sub	r2, r2, #4
   26db4:	ldr	r0, [r1]
   26db8:	b	26dc4 <__assert_fail@plt+0x15220>
   26dbc:	cmp	ip, r3
   26dc0:	beq	26e88 <__assert_fail@plt+0x152e4>
   26dc4:	ldr	r5, [r2, #4]!
   26dc8:	add	r3, r3, #1
   26dcc:	add	r1, r0, r5, lsl #3
   26dd0:	ldrb	r1, [r1, #4]
   26dd4:	cmp	r1, #9
   26dd8:	bne	26dbc <__assert_fail@plt+0x15218>
   26ddc:	ldr	r1, [r0, r5, lsl #3]
   26de0:	cmp	r8, r1
   26de4:	bne	26dbc <__assert_fail@plt+0x15218>
   26de8:	cmn	r5, #1
   26dec:	beq	26e88 <__assert_fail@plt+0x152e4>
   26df0:	ldr	r3, [r4]
   26df4:	ldr	r1, [r4, #8]
   26df8:	cmp	r1, #0
   26dfc:	beq	26e9c <__assert_fail@plt+0x152f8>
   26e00:	mov	ip, #9
   26e04:	mov	r0, fp
   26e08:	ldr	r2, [r4, #4]
   26e0c:	stm	sp, {r5, r6, ip}
   26e10:	bl	2604c <__assert_fail@plt+0x144a8>
   26e14:	cmp	r0, #1
   26e18:	beq	26e88 <__assert_fail@plt+0x152e4>
   26e1c:	cmp	r0, #0
   26e20:	bne	26b34 <__assert_fail@plt+0x14f90>
   26e24:	ldrd	r2, [r4, #12]
   26e28:	cmp	r3, r2
   26e2c:	beq	26f38 <__assert_fail@plt+0x15394>
   26e30:	mov	r1, #20
   26e34:	mov	r0, #1
   26e38:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   26e3c:	subs	ip, r0, #0
   26e40:	beq	26f30 <__assert_fail@plt+0x1538c>
   26e44:	ldr	lr, [r4, #16]
   26e48:	mov	r2, ip
   26e4c:	mov	r1, r4
   26e50:	mov	r0, fp
   26e54:	ldr	r3, [sp, #40]	; 0x28
   26e58:	add	sl, lr, #1
   26e5c:	str	sl, [sp, #20]
   26e60:	ldr	sl, [r4, #20]
   26e64:	str	ip, [sl, lr, lsl #2]
   26e68:	stm	ip, {r5, r6}
   26e6c:	ldr	ip, [sp, #20]
   26e70:	str	ip, [r4, #16]
   26e74:	str	r9, [sp]
   26e78:	bl	2663c <__assert_fail@plt+0x14a98>
   26e7c:	cmp	r0, #1
   26e80:	ldr	sl, [fp, #4]
   26e84:	bhi	26b34 <__assert_fail@plt+0x14f90>
   26e88:	add	r6, r6, #1
   26e8c:	cmp	r9, r6
   26e90:	bge	26d50 <__assert_fail@plt+0x151ac>
   26e94:	ldr	r1, [fp, #124]	; 0x7c
   26e98:	b	26bc0 <__assert_fail@plt+0x1501c>
   26e9c:	sub	r3, r6, r3
   26ea0:	mov	r0, #12
   26ea4:	add	r1, r3, #1
   26ea8:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   26eac:	cmp	r0, #0
   26eb0:	mov	r1, r0
   26eb4:	str	r0, [r4, #8]
   26eb8:	beq	26f30 <__assert_fail@plt+0x1538c>
   26ebc:	ldr	r3, [r4]
   26ec0:	b	26e00 <__assert_fail@plt+0x1525c>
   26ec4:	ldr	ip, [r4, #16]
   26ec8:	mov	r6, r7
   26ecc:	mov	r7, sl
   26ed0:	mov	sl, r3
   26ed4:	cmp	ip, r5
   26ed8:	bgt	26e94 <__assert_fail@plt+0x152f0>
   26edc:	cmp	r5, #0
   26ee0:	ble	26d3c <__assert_fail@plt+0x15198>
   26ee4:	mov	r9, r7
   26ee8:	mov	r8, r6
   26eec:	b	26d34 <__assert_fail@plt+0x15190>
   26ef0:	ldr	r3, [fp, #48]	; 0x30
   26ef4:	cmp	r3, r7
   26ef8:	ble	26e94 <__assert_fail@plt+0x152f0>
   26efc:	add	r5, r7, #1
   26f00:	mov	r0, fp
   26f04:	mov	r1, r5
   26f08:	bl	2070c <__assert_fail@plt+0xeb68>
   26f0c:	cmp	r0, #0
   26f10:	bne	26b34 <__assert_fail@plt+0x14f90>
   26f14:	ldr	sl, [fp, #4]
   26f18:	b	26d70 <__assert_fail@plt+0x151cc>
   26f1c:	ldr	r9, [sp, #32]
   26f20:	ldr	sl, [sp, #40]	; 0x28
   26f24:	ldr	r4, [sp, #60]	; 0x3c
   26f28:	ldr	ip, [fp, #108]	; 0x6c
   26f2c:	b	269a0 <__assert_fail@plt+0x14dfc>
   26f30:	mov	r0, #12
   26f34:	b	26b34 <__assert_fail@plt+0x14f90>
   26f38:	lsl	r3, r3, #1
   26f3c:	ldr	r0, [r4, #20]
   26f40:	add	sl, r3, #1
   26f44:	lsl	r1, sl, #2
   26f48:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   26f4c:	cmp	r0, #0
   26f50:	beq	26f30 <__assert_fail@plt+0x1538c>
   26f54:	str	sl, [r4, #12]
   26f58:	str	r0, [r4, #20]
   26f5c:	b	26e30 <__assert_fail@plt+0x1528c>
   26f60:	mov	r6, r7
   26f64:	mov	r7, sl
   26f68:	mov	sl, r3
   26f6c:	b	26ed4 <__assert_fail@plt+0x15330>
   26f70:	strd	r4, [sp, #-32]!	; 0xffffffe0
   26f74:	mov	r4, r1
   26f78:	ldr	r5, [r1, #40]	; 0x28
   26f7c:	ldr	r3, [r1, #104]	; 0x68
   26f80:	strd	r6, [sp, #8]
   26f84:	strd	r8, [sp, #16]
   26f88:	str	sl, [sp, #24]
   26f8c:	mov	sl, r0
   26f90:	str	lr, [sp, #28]
   26f94:	sub	sp, sp, #16
   26f98:	cmp	r3, r5
   26f9c:	ldr	r8, [r1, #84]	; 0x54
   26fa0:	ldr	r9, [r1, #100]	; 0x64
   26fa4:	bge	26fe0 <__assert_fail@plt+0x1543c>
   26fa8:	mov	r6, r2
   26fac:	str	r2, [r9, r5, lsl #2]
   26fb0:	str	r5, [r1, #104]	; 0x68
   26fb4:	ldr	r3, [r8, #76]	; 0x4c
   26fb8:	cmp	r3, #0
   26fbc:	bne	270a8 <__assert_fail@plt+0x15504>
   26fc0:	mov	r0, r6
   26fc4:	add	sp, sp, #16
   26fc8:	ldrd	r4, [sp]
   26fcc:	ldrd	r6, [sp, #8]
   26fd0:	ldrd	r8, [sp, #16]
   26fd4:	ldr	sl, [sp, #24]
   26fd8:	add	sp, sp, #28
   26fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   26fe0:	ldr	r3, [r9, r5, lsl #2]
   26fe4:	cmp	r3, #0
   26fe8:	moveq	r6, r2
   26fec:	streq	r2, [r9, r5, lsl #2]
   26ff0:	beq	26fb4 <__assert_fail@plt+0x15410>
   26ff4:	cmp	r2, #0
   26ff8:	ldr	r3, [r3, #40]	; 0x28
   26ffc:	beq	27068 <__assert_fail@plt+0x154c4>
   27000:	ldr	r7, [r2, #40]	; 0x28
   27004:	add	r0, sp, #4
   27008:	mov	r2, r3
   2700c:	mov	r1, r7
   27010:	bl	22128 <__assert_fail@plt+0x10584>
   27014:	cmp	r0, #0
   27018:	str	r0, [sl]
   2701c:	bne	2710c <__assert_fail@plt+0x15568>
   27020:	ldr	r1, [r4, #40]	; 0x28
   27024:	mov	r0, r4
   27028:	ldr	r2, [r4, #88]	; 0x58
   2702c:	sub	r1, r1, #1
   27030:	bl	240b8 <__assert_fail@plt+0x12514>
   27034:	ldr	r9, [r4, #100]	; 0x64
   27038:	mov	r3, r0
   2703c:	add	r2, sp, #4
   27040:	mov	r1, r8
   27044:	mov	r0, sl
   27048:	bl	22294 <__assert_fail@plt+0x106f0>
   2704c:	cmp	r7, #0
   27050:	mov	r6, r0
   27054:	str	r0, [r9, r5, lsl #2]
   27058:	beq	26fb4 <__assert_fail@plt+0x15410>
   2705c:	ldr	r0, [sp, #12]
   27060:	bl	17ac8 <__assert_fail@plt+0x5f24>
   27064:	b	26fb4 <__assert_fail@plt+0x15410>
   27068:	ldrd	r6, [r3]
   2706c:	sub	r1, r5, #1
   27070:	mov	r0, r4
   27074:	ldr	r2, [r4, #88]	; 0x58
   27078:	strd	r6, [sp, #4]
   2707c:	ldr	r3, [r3, #8]
   27080:	str	r3, [sp, #12]
   27084:	bl	240b8 <__assert_fail@plt+0x12514>
   27088:	mov	r3, r0
   2708c:	add	r2, sp, #4
   27090:	mov	r1, r8
   27094:	mov	r0, sl
   27098:	bl	22294 <__assert_fail@plt+0x106f0>
   2709c:	mov	r6, r0
   270a0:	str	r0, [r9, r5, lsl #2]
   270a4:	b	26fb4 <__assert_fail@plt+0x15410>
   270a8:	cmp	r6, #0
   270ac:	beq	2710c <__assert_fail@plt+0x15568>
   270b0:	add	r7, r6, #8
   270b4:	add	r8, r6, #12
   270b8:	mov	r1, r7
   270bc:	mov	r2, r8
   270c0:	mov	r3, r5
   270c4:	mov	r0, r4
   270c8:	bl	24c58 <__assert_fail@plt+0x130b4>
   270cc:	cmp	r0, #0
   270d0:	str	r0, [sl]
   270d4:	bne	2710c <__assert_fail@plt+0x15568>
   270d8:	ldrb	r3, [r6, #52]	; 0x34
   270dc:	tst	r3, #64	; 0x40
   270e0:	beq	26fc0 <__assert_fail@plt+0x1541c>
   270e4:	mov	r2, r8
   270e8:	mov	r1, r7
   270ec:	mov	r0, r4
   270f0:	bl	267d0 <__assert_fail@plt+0x14c2c>
   270f4:	cmp	r0, #0
   270f8:	str	r0, [sl]
   270fc:	bne	2710c <__assert_fail@plt+0x15568>
   27100:	ldr	r3, [r4, #100]	; 0x64
   27104:	ldr	r6, [r3, r5, lsl #2]
   27108:	b	26fc0 <__assert_fail@plt+0x1541c>
   2710c:	mov	r6, #0
   27110:	b	26fc0 <__assert_fail@plt+0x1541c>
   27114:	mov	r3, #1
   27118:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2711c:	ldr	r4, [r1, #8]
   27120:	strd	r6, [sp, #8]
   27124:	strd	r8, [sp, #16]
   27128:	mov	r9, r1
   2712c:	strd	sl, [sp, #24]
   27130:	mov	fp, r0
   27134:	mov	r0, #4
   27138:	str	lr, [sp, #32]
   2713c:	sub	sp, sp, #60	; 0x3c
   27140:	ldr	sl, [r1, #12]
   27144:	str	r3, [sp, #44]	; 0x2c
   27148:	str	r3, [sp, #48]	; 0x30
   2714c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   27150:	cmp	r0, #0
   27154:	str	r0, [sp, #52]	; 0x34
   27158:	beq	273e4 <__assert_fail@plt+0x15840>
   2715c:	mov	r2, sl
   27160:	add	r3, sp, #44	; 0x2c
   27164:	str	r4, [r0]
   27168:	mov	r1, r9
   2716c:	mov	r0, fp
   27170:	bl	28f20 <__assert_fail@plt+0x1737c>
   27174:	cmp	r0, #0
   27178:	bne	273c0 <__assert_fail@plt+0x1581c>
   2717c:	cmp	sl, #0
   27180:	addgt	r3, r9, #24
   27184:	strgt	r0, [sp, #20]
   27188:	strgt	r3, [sp, #36]	; 0x24
   2718c:	ble	2738c <__assert_fail@plt+0x157e8>
   27190:	ldr	r0, [r9]
   27194:	lsl	r3, sl, #2
   27198:	str	r3, [sp, #16]
   2719c:	ldr	r3, [r0, sl, lsl #2]
   271a0:	cmp	r3, #0
   271a4:	ldreq	r3, [sp, #20]
   271a8:	movne	r3, #0
   271ac:	addeq	r3, r3, #1
   271b0:	str	r3, [sp, #20]
   271b4:	ldr	r2, [sp, #20]
   271b8:	ldr	r3, [fp, #120]	; 0x78
   271bc:	cmp	r3, r2
   271c0:	blt	273c8 <__assert_fail@plt+0x15824>
   271c4:	mov	r2, #0
   271c8:	ldr	r3, [fp, #100]	; 0x64
   271cc:	sub	sl, sl, #1
   271d0:	str	r2, [sp, #48]	; 0x30
   271d4:	ldr	r2, [sp, #16]
   271d8:	add	r3, r3, r2
   271dc:	ldr	r6, [r3, #-4]
   271e0:	cmp	r6, #0
   271e4:	beq	27368 <__assert_fail@plt+0x157c4>
   271e8:	ldr	r3, [r6, #20]
   271ec:	ldr	r5, [fp, #84]	; 0x54
   271f0:	cmp	r3, #0
   271f4:	ble	27368 <__assert_fail@plt+0x157c4>
   271f8:	ldr	r3, [r6, #24]
   271fc:	add	r2, r9, #20
   27200:	mov	r8, #0
   27204:	ldr	r1, [r5]
   27208:	str	r2, [sp, #28]
   2720c:	ldr	r4, [r3]
   27210:	lsl	r7, r4, #3
   27214:	add	r3, r1, r7
   27218:	b	272d8 <__assert_fail@plt+0x15734>
   2721c:	add	r1, r1, r7
   27220:	mov	r2, sl
   27224:	mov	r0, fp
   27228:	bl	241d0 <__assert_fail@plt+0x1262c>
   2722c:	cmp	r0, #0
   27230:	beq	272b4 <__assert_fail@plt+0x15710>
   27234:	ldr	r3, [r9]
   27238:	ldr	r2, [sp, #16]
   2723c:	ldr	r3, [r3, r2]
   27240:	cmp	r3, #0
   27244:	beq	272b4 <__assert_fail@plt+0x15710>
   27248:	ldr	r2, [r5, #12]
   2724c:	add	r1, r3, #12
   27250:	ldr	r0, [r3, #8]
   27254:	ldr	r2, [r2, r4, lsl #2]
   27258:	bl	21478 <__assert_fail@plt+0xf8d4>
   2725c:	cmp	r0, #0
   27260:	beq	272b4 <__assert_fail@plt+0x15710>
   27264:	mov	r3, #1
   27268:	ldr	r2, [r9, #20]
   2726c:	cmp	r2, #0
   27270:	beq	272a0 <__assert_fail@plt+0x156fc>
   27274:	ldr	lr, [r5, #12]
   27278:	add	ip, sl, r3
   2727c:	mov	r0, fp
   27280:	ldr	r1, [sp, #28]
   27284:	ldr	r2, [sp, #36]	; 0x24
   27288:	ldr	r3, [lr, r4, lsl #2]
   2728c:	str	ip, [sp]
   27290:	stmib	sp, {r4, sl}
   27294:	bl	2174c <__assert_fail@plt+0xfba8>
   27298:	cmp	r0, #0
   2729c:	bne	272b4 <__assert_fail@plt+0x15710>
   272a0:	mov	r1, r4
   272a4:	add	r0, sp, #44	; 0x2c
   272a8:	bl	20ea4 <__assert_fail@plt+0xf300>
   272ac:	cmp	r0, #0
   272b0:	beq	27394 <__assert_fail@plt+0x157f0>
   272b4:	ldr	r3, [r6, #20]
   272b8:	add	r8, r8, #1
   272bc:	cmp	r8, r3
   272c0:	bge	27368 <__assert_fail@plt+0x157c4>
   272c4:	ldr	r3, [r6, #24]
   272c8:	ldr	r1, [r5]
   272cc:	ldr	r4, [r3, r8, lsl #2]
   272d0:	lsl	r7, r4, #3
   272d4:	add	r3, r1, r7
   272d8:	ldrb	r3, [r3, #6]
   272dc:	tst	r3, #16
   272e0:	beq	2721c <__assert_fail@plt+0x15678>
   272e4:	ldr	r0, [r9, #12]
   272e8:	mov	r3, fp
   272ec:	mov	r2, r4
   272f0:	ldr	r1, [fp, #84]	; 0x54
   272f4:	str	r0, [sp, #24]
   272f8:	str	r1, [sp, #32]
   272fc:	ldr	r0, [r1], #128	; 0x80
   27300:	str	sl, [sp]
   27304:	bl	25d74 <__assert_fail@plt+0x141d0>
   27308:	subs	r3, r0, #0
   2730c:	ble	27360 <__assert_fail@plt+0x157bc>
   27310:	ldr	r0, [sp, #24]
   27314:	add	r2, sl, r3
   27318:	cmp	r0, r2
   2731c:	blt	27268 <__assert_fail@plt+0x156c4>
   27320:	ldr	r1, [r9]
   27324:	ldr	r2, [r1, r2, lsl #2]
   27328:	cmp	r2, #0
   2732c:	beq	27358 <__assert_fail@plt+0x157b4>
   27330:	str	r3, [sp, #24]
   27334:	add	r1, r2, #12
   27338:	ldr	r3, [sp, #32]
   2733c:	ldr	r0, [r2, #8]
   27340:	ldr	ip, [r3, #12]
   27344:	ldr	r2, [ip, r4, lsl #2]
   27348:	bl	21478 <__assert_fail@plt+0xf8d4>
   2734c:	cmp	r0, #0
   27350:	ldr	r3, [sp, #24]
   27354:	bne	27268 <__assert_fail@plt+0x156c4>
   27358:	ldr	r1, [r5]
   2735c:	b	2721c <__assert_fail@plt+0x15678>
   27360:	beq	27358 <__assert_fail@plt+0x157b4>
   27364:	b	27268 <__assert_fail@plt+0x156c4>
   27368:	add	r3, sp, #44	; 0x2c
   2736c:	mov	r2, sl
   27370:	mov	r1, r9
   27374:	mov	r0, fp
   27378:	bl	28f20 <__assert_fail@plt+0x1737c>
   2737c:	cmp	r0, #0
   27380:	bne	273c0 <__assert_fail@plt+0x1581c>
   27384:	cmp	sl, #0
   27388:	bne	27190 <__assert_fail@plt+0x155ec>
   2738c:	mov	r4, #0
   27390:	b	27398 <__assert_fail@plt+0x157f4>
   27394:	mov	r4, #12
   27398:	ldr	r0, [sp, #52]	; 0x34
   2739c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   273a0:	mov	r0, r4
   273a4:	add	sp, sp, #60	; 0x3c
   273a8:	ldrd	r4, [sp]
   273ac:	ldrd	r6, [sp, #8]
   273b0:	ldrd	r8, [sp, #16]
   273b4:	ldrd	sl, [sp, #24]
   273b8:	add	sp, sp, #32
   273bc:	pop	{pc}		; (ldr pc, [sp], #4)
   273c0:	mov	r4, r0
   273c4:	b	27398 <__assert_fail@plt+0x157f4>
   273c8:	mov	r1, #0
   273cc:	ldr	r2, [sp, #16]
   273d0:	mov	r4, r1
   273d4:	bl	119e8 <memset@plt>
   273d8:	ldr	r0, [sp, #52]	; 0x34
   273dc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   273e0:	b	273a0 <__assert_fail@plt+0x157fc>
   273e4:	mov	r4, #12
   273e8:	b	273a0 <__assert_fail@plt+0x157fc>
   273ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   273f0:	mov	r4, r0
   273f4:	mov	r5, r3
   273f8:	strd	r6, [sp, #8]
   273fc:	strd	r8, [sp, #16]
   27400:	strd	sl, [sp, #24]
   27404:	str	lr, [sp, #32]
   27408:	sub	sp, sp, #428	; 0x1ac
   2740c:	ldr	r9, [r0]
   27410:	str	r0, [sp, #32]
   27414:	add	r0, sp, #148	; 0x94
   27418:	str	r1, [sp, #56]	; 0x38
   2741c:	mov	r1, #0
   27420:	str	r2, [sp, #72]	; 0x48
   27424:	mov	r2, #136	; 0x88
   27428:	ldr	r6, [sp, #464]	; 0x1d0
   2742c:	bl	119e8 <memset@plt>
   27430:	ldr	r2, [r4, #16]
   27434:	cmp	r2, #0
   27438:	str	r2, [sp, #48]	; 0x30
   2743c:	str	r9, [sp, #232]	; 0xe8
   27440:	beq	2745c <__assert_fail@plt+0x158b8>
   27444:	ldrb	r2, [r4, #28]
   27448:	subs	r3, r5, r6
   2744c:	movne	r3, #1
   27450:	ands	r3, r3, r2, lsr #3
   27454:	streq	r3, [sp, #48]	; 0x30
   27458:	bne	27800 <__assert_fail@plt+0x15c5c>
   2745c:	ldr	r3, [sp, #32]
   27460:	ldr	r2, [sp, #472]	; 0x1d8
   27464:	ldr	r3, [r3, #24]
   27468:	cmp	r3, r2
   2746c:	movcs	r3, #0
   27470:	strcs	r3, [sp, #108]	; 0x6c
   27474:	bcs	27494 <__assert_fail@plt+0x158f0>
   27478:	sub	r2, r2, #1
   2747c:	sub	r1, r3, r2
   27480:	sub	r3, r2, r3
   27484:	str	r3, [sp, #108]	; 0x6c
   27488:	ldr	r3, [sp, #472]	; 0x1d8
   2748c:	add	r3, r3, r1
   27490:	str	r3, [sp, #472]	; 0x1d8
   27494:	ldr	ip, [sp, #32]
   27498:	ldr	r3, [ip, #8]
   2749c:	cmp	r3, #0
   274a0:	beq	280dc <__assert_fail@plt+0x16538>
   274a4:	ldr	r3, [r9, #36]	; 0x24
   274a8:	cmp	r3, #0
   274ac:	beq	280dc <__assert_fail@plt+0x16538>
   274b0:	ldr	r2, [r9, #40]	; 0x28
   274b4:	cmp	r2, #0
   274b8:	beq	280dc <__assert_fail@plt+0x16538>
   274bc:	ldr	r1, [r9, #44]	; 0x2c
   274c0:	cmp	r1, #0
   274c4:	beq	280dc <__assert_fail@plt+0x16538>
   274c8:	ldr	r0, [r9, #48]	; 0x30
   274cc:	cmp	r0, #0
   274d0:	beq	280dc <__assert_fail@plt+0x16538>
   274d4:	ldr	r3, [r3, #8]
   274d8:	cmp	r3, #0
   274dc:	bne	27520 <__assert_fail@plt+0x1597c>
   274e0:	ldr	r3, [r2, #8]
   274e4:	cmp	r3, #0
   274e8:	bne	27520 <__assert_fail@plt+0x1597c>
   274ec:	ldr	r3, [r1, #8]
   274f0:	cmp	r3, #0
   274f4:	beq	27504 <__assert_fail@plt+0x15960>
   274f8:	ldrsb	r3, [ip, #28]
   274fc:	cmp	r3, #0
   27500:	blt	27520 <__assert_fail@plt+0x1597c>
   27504:	adds	r6, r6, #0
   27508:	movne	r6, #1
   2750c:	cmp	r5, #0
   27510:	moveq	r6, #0
   27514:	cmp	r6, #0
   27518:	bne	280dc <__assert_fail@plt+0x16538>
   2751c:	mov	r5, r6
   27520:	ldr	r3, [sp, #472]	; 0x1d8
   27524:	cmp	r3, #0
   27528:	bne	277f0 <__assert_fail@plt+0x15c4c>
   2752c:	ldr	r3, [r9, #76]	; 0x4c
   27530:	adds	r3, r3, #0
   27534:	movne	r3, #1
   27538:	str	r3, [sp, #20]
   2753c:	str	r3, [sp, #60]	; 0x3c
   27540:	ldr	r8, [sp, #32]
   27544:	add	r0, sp, #148	; 0x94
   27548:	ldr	r2, [sp, #56]	; 0x38
   2754c:	ldr	r3, [r9, #8]
   27550:	ldr	ip, [r8, #12]
   27554:	str	r2, [sp, #148]	; 0x94
   27558:	ldr	lr, [r9, #92]	; 0x5c
   2755c:	add	r3, r3, #1
   27560:	ldrb	r2, [r9, #88]	; 0x58
   27564:	and	r4, ip, #4194304	; 0x400000
   27568:	ubfx	ip, ip, #22, #1
   2756c:	ldr	r8, [r8, #20]
   27570:	cmp	r3, lr
   27574:	ldr	r7, [sp, #72]	; 0x48
   27578:	movlt	r3, lr
   2757c:	str	r8, [sp, #80]	; 0x50
   27580:	strb	ip, [sp, #220]	; 0xdc
   27584:	ubfx	ip, r2, #2, #1
   27588:	add	r1, r7, #1
   2758c:	ubfx	r2, r2, #3, #1
   27590:	str	lr, [sp, #228]	; 0xe4
   27594:	orrs	lr, r8, r4
   27598:	str	r7, [sp, #192]	; 0xc0
   2759c:	movne	lr, #1
   275a0:	moveq	lr, #0
   275a4:	str	r7, [sp, #196]	; 0xc4
   275a8:	cmp	r3, r1
   275ac:	str	r7, [sp, #200]	; 0xc8
   275b0:	movlt	r1, r3
   275b4:	str	r7, [sp, #204]	; 0xcc
   275b8:	str	r8, [sp, #212]	; 0xd4
   275bc:	strb	ip, [sp, #221]	; 0xdd
   275c0:	strb	r2, [sp, #222]	; 0xde
   275c4:	strb	lr, [sp, #223]	; 0xdf
   275c8:	bl	1fcd4 <__assert_fail@plt+0xe130>
   275cc:	subs	r3, r0, #0
   275d0:	str	r3, [sp, #36]	; 0x24
   275d4:	bne	27cb8 <__assert_fail@plt+0x16114>
   275d8:	ldrb	r3, [r9, #88]	; 0x58
   275dc:	add	r1, r9, #96	; 0x60
   275e0:	ldrb	r2, [sp, #223]	; 0xdf
   275e4:	str	r1, [sp, #216]	; 0xd8
   275e8:	ubfx	r3, r3, #4, #1
   275ec:	cmp	r2, #0
   275f0:	strb	r3, [sp, #226]	; 0xe2
   275f4:	bne	2760c <__assert_fail@plt+0x15a68>
   275f8:	ldr	r3, [r9, #92]	; 0x5c
   275fc:	ldr	r2, [sp, #56]	; 0x38
   27600:	cmp	r3, #1
   27604:	str	r2, [sp, #152]	; 0x98
   27608:	ble	281d4 <__assert_fail@plt+0x16630>
   2760c:	mov	r2, #0
   27610:	ldr	r3, [sp, #32]
   27614:	mvn	r1, #0
   27618:	str	r2, [sp, #176]	; 0xb0
   2761c:	str	r2, [sp, #180]	; 0xb4
   27620:	ldr	r2, [sp, #468]	; 0x1d4
   27624:	ldrb	r3, [r3, #28]
   27628:	str	r2, [sp, #200]	; 0xc8
   2762c:	str	r2, [sp, #204]	; 0xcc
   27630:	ubfx	r3, r3, #7, #1
   27634:	strb	r3, [sp, #225]	; 0xe1
   27638:	ldr	r7, [r9, #76]	; 0x4c
   2763c:	str	r1, [sp, #240]	; 0xf0
   27640:	ldr	r3, [sp, #480]	; 0x1e0
   27644:	lsl	r4, r7, #1
   27648:	cmp	r4, #0
   2764c:	str	r3, [sp, #236]	; 0xec
   27650:	ble	27690 <__assert_fail@plt+0x15aec>
   27654:	movw	r3, #43690	; 0xaaaa
   27658:	movt	r3, #2730	; 0xaaa
   2765c:	cmp	r4, r3
   27660:	bgt	28434 <__assert_fail@plt+0x16890>
   27664:	add	r0, r4, r7, lsl #2
   27668:	lsl	r0, r0, #3
   2766c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   27670:	str	r0, [sp, #264]	; 0x108
   27674:	lsl	r0, r7, #3
   27678:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2767c:	ldr	r3, [sp, #264]	; 0x108
   27680:	str	r0, [sp, #280]	; 0x118
   27684:	cmp	r0, #0
   27688:	cmpne	r3, #0
   2768c:	beq	28434 <__assert_fail@plt+0x16890>
   27690:	ldr	r2, [sp, #472]	; 0x1d8
   27694:	mov	r3, #1
   27698:	str	r4, [sp, #260]	; 0x104
   2769c:	str	r3, [sp, #268]	; 0x10c
   276a0:	str	r4, [sp, #276]	; 0x114
   276a4:	cmp	r2, r3
   276a8:	bls	283c8 <__assert_fail@plt+0x16824>
   276ac:	ldr	r0, [sp, #184]	; 0xb8
   276b0:	cmn	r0, #-1073741822	; 0xc0000002
   276b4:	bhi	28434 <__assert_fail@plt+0x16890>
   276b8:	add	r0, r0, #1
   276bc:	lsl	r0, r0, #2
   276c0:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   276c4:	cmp	r0, #0
   276c8:	mov	r4, r0
   276cc:	str	r0, [sp, #248]	; 0xf8
   276d0:	beq	28108 <__assert_fail@plt+0x16564>
   276d4:	ldr	r3, [sp, #480]	; 0x1e0
   276d8:	str	r5, [sp, #116]	; 0x74
   276dc:	ldr	r2, [r9, #92]	; 0x5c
   276e0:	tst	r3, #1
   276e4:	movne	r3, #4
   276e8:	moveq	r3, #6
   276ec:	cmp	r5, r6
   276f0:	str	r2, [sp, #88]	; 0x58
   276f4:	str	r3, [sp, #208]	; 0xd0
   276f8:	movge	r3, r5
   276fc:	movlt	r3, r6
   27700:	mvngt	r2, #0
   27704:	movle	r2, #1
   27708:	str	r3, [sp, #64]	; 0x40
   2770c:	ldr	r3, [sp, #48]	; 0x30
   27710:	str	r2, [sp, #96]	; 0x60
   27714:	movlt	r2, r5
   27718:	movge	r2, r6
   2771c:	str	r2, [sp, #76]	; 0x4c
   27720:	cmp	r3, #0
   27724:	beq	28444 <__assert_fail@plt+0x168a0>
   27728:	ldr	r3, [sp, #88]	; 0x58
   2772c:	cmp	r3, #1
   27730:	moveq	r3, #4
   27734:	beq	27754 <__assert_fail@plt+0x15bb0>
   27738:	ldr	r3, [sp, #32]
   2773c:	ldr	r2, [sp, #80]	; 0x50
   27740:	ldr	r3, [r3, #12]
   27744:	and	r3, r3, #4194304	; 0x400000
   27748:	orrs	r3, r2, r3
   2774c:	moveq	r3, #4
   27750:	movne	r3, #0
   27754:	ldr	r2, [sp, #36]	; 0x24
   27758:	cmp	r5, r6
   2775c:	movle	r2, #2
   27760:	ldr	r1, [sp, #80]	; 0x50
   27764:	cmp	r1, #0
   27768:	orrne	r3, r3, #1
   2776c:	orr	r3, r3, r2
   27770:	ldr	r1, [sp, #64]	; 0x40
   27774:	ldr	r2, [sp, #76]	; 0x4c
   27778:	cmp	r5, r2
   2777c:	movge	r2, #0
   27780:	movlt	r2, #1
   27784:	cmp	r5, r1
   27788:	orrgt	r2, r2, #1
   2778c:	cmp	r2, #0
   27790:	bne	27cb0 <__assert_fail@plt+0x1610c>
   27794:	add	r2, sp, #424	; 0x1a8
   27798:	cmp	r5, r6
   2779c:	str	r9, [sp, #68]	; 0x44
   277a0:	sub	r3, r3, #4
   277a4:	suble	r2, r2, #308	; 0x134
   277a8:	movgt	r2, #0
   277ac:	str	r3, [sp, #92]	; 0x5c
   277b0:	adds	r3, r2, #0
   277b4:	movne	r3, #1
   277b8:	str	r2, [sp, #100]	; 0x64
   277bc:	str	r3, [sp, #104]	; 0x68
   277c0:	mov	r3, #65280	; 0xff00
   277c4:	movt	r3, #3
   277c8:	str	r3, [sp, #52]	; 0x34
   277cc:	ldr	r3, [sp, #92]	; 0x5c
   277d0:	cmp	r3, #4
   277d4:	ldrls	pc, [pc, r3, lsl #2]
   277d8:	b	28460 <__assert_fail@plt+0x168bc>
   277dc:	andeq	r7, r2, r8, lsr #26
   277e0:	andeq	r7, r2, r8, lsr #26
   277e4:	andeq	r7, r2, r0, asr #25
   277e8:	strdeq	r7, [r2], -ip
   277ec:	andeq	r7, r2, r8, lsl r8
   277f0:	mov	r3, #1
   277f4:	str	r3, [sp, #20]
   277f8:	str	r3, [sp, #60]	; 0x3c
   277fc:	b	27540 <__assert_fail@plt+0x1599c>
   27800:	ldr	r3, [sp, #48]	; 0x30
   27804:	tst	r2, #1
   27808:	movne	r3, #0
   2780c:	str	r3, [sp, #48]	; 0x30
   27810:	b	2745c <__assert_fail@plt+0x158b8>
   27814:	str	r5, [sp, #116]	; 0x74
   27818:	mov	r1, r5
   2781c:	add	r0, sp, #148	; 0x94
   27820:	ldr	r2, [sp, #480]	; 0x1e0
   27824:	bl	24308 <__assert_fail@plt+0x12764>
   27828:	subs	r3, r0, #0
   2782c:	str	r3, [sp, #36]	; 0x24
   27830:	bne	28494 <__assert_fail@plt+0x168f0>
   27834:	ldr	r3, [sp, #88]	; 0x58
   27838:	cmp	r3, #1
   2783c:	beq	2785c <__assert_fail@plt+0x15cb8>
   27840:	ldr	r3, [sp, #176]	; 0xb0
   27844:	cmp	r3, #0
   27848:	beq	2785c <__assert_fail@plt+0x15cb8>
   2784c:	ldr	r3, [sp, #156]	; 0x9c
   27850:	ldr	r3, [r3]
   27854:	cmn	r3, #1
   27858:	beq	2808c <__assert_fail@plt+0x164e8>
   2785c:	ldr	r4, [sp, #232]	; 0xe8
   27860:	mov	r3, #0
   27864:	ldr	sl, [r4, #36]	; 0x24
   27868:	str	r3, [sp, #124]	; 0x7c
   2786c:	str	r3, [sp, #252]	; 0xfc
   27870:	str	r3, [sp, #256]	; 0x100
   27874:	str	r3, [sp, #268]	; 0x10c
   27878:	ldr	r3, [sp, #188]	; 0xbc
   2787c:	mov	r2, r3
   27880:	ldrsb	r3, [sl, #52]	; 0x34
   27884:	str	r2, [sp, #12]
   27888:	cmp	r3, #0
   2788c:	bge	278cc <__assert_fail@plt+0x15d28>
   27890:	sub	r1, r2, #1
   27894:	add	r0, sp, #148	; 0x94
   27898:	ldr	r2, [sp, #236]	; 0xec
   2789c:	bl	240b8 <__assert_fail@plt+0x12514>
   278a0:	tst	r0, #1
   278a4:	bne	283f4 <__assert_fail@plt+0x16850>
   278a8:	cmp	r0, #0
   278ac:	beq	278cc <__assert_fail@plt+0x15d28>
   278b0:	and	r3, r0, #6
   278b4:	cmp	r3, #6
   278b8:	beq	28584 <__assert_fail@plt+0x169e0>
   278bc:	tst	r0, #2
   278c0:	bne	284d8 <__assert_fail@plt+0x16934>
   278c4:	tst	r0, #4
   278c8:	bne	28500 <__assert_fail@plt+0x1695c>
   278cc:	ldr	r3, [sp, #248]	; 0xf8
   278d0:	cmp	r3, #0
   278d4:	beq	2819c <__assert_fail@plt+0x165f8>
   278d8:	ldr	r2, [r4, #76]	; 0x4c
   278dc:	ldr	r1, [sp, #12]
   278e0:	cmp	r2, #0
   278e4:	str	sl, [r3, r1, lsl #2]
   278e8:	bne	28540 <__assert_fail@plt+0x1699c>
   278ec:	ldrb	r3, [sl, #52]	; 0x34
   278f0:	ldr	r2, [sp, #104]	; 0x68
   278f4:	str	r2, [sp, #16]
   278f8:	ubfx	r3, r3, #4, #1
   278fc:	cmp	r3, #0
   27900:	mvneq	fp, #0
   27904:	streq	r3, [sp, #28]
   27908:	bne	284a0 <__assert_fail@plt+0x168fc>
   2790c:	ldr	r3, [sp, #100]	; 0x64
   27910:	str	fp, [sp, #24]
   27914:	ldr	r4, [sp, #188]	; 0xbc
   27918:	str	r3, [sp, #40]	; 0x28
   2791c:	b	27980 <__assert_fail@plt+0x15ddc>
   27920:	ldrb	r3, [r5, #52]	; 0x34
   27924:	ldr	r2, [sp, #16]
   27928:	ldr	r1, [sp, #12]
   2792c:	ldr	r4, [sp, #188]	; 0xbc
   27930:	cmp	sl, r5
   27934:	movne	r2, #0
   27938:	andeq	r2, r2, #1
   2793c:	cmp	r2, #0
   27940:	movne	r1, r8
   27944:	tst	r3, #16
   27948:	str	r1, [sp, #12]
   2794c:	str	r2, [sp, #16]
   27950:	beq	2797c <__assert_fail@plt+0x15dd8>
   27954:	tst	r3, #128	; 0x80
   27958:	bne	27dd8 <__assert_fail@plt+0x16234>
   2795c:	ldr	r3, [sp, #20]
   27960:	cmp	r3, #0
   27964:	beq	284d0 <__assert_fail@plt+0x1692c>
   27968:	ldr	r3, [sp, #20]
   2796c:	str	r4, [sp, #24]
   27970:	str	r3, [sp, #28]
   27974:	mov	r3, #0
   27978:	str	r3, [sp, #40]	; 0x28
   2797c:	mov	sl, r5
   27980:	ldr	r3, [sp, #204]	; 0xcc
   27984:	cmp	r3, r4
   27988:	ble	27dd0 <__assert_fail@plt+0x1622c>
   2798c:	ldr	r3, [sp, #184]	; 0xb8
   27990:	add	r8, r4, #1
   27994:	cmp	r8, r3
   27998:	bge	27df4 <__assert_fail@plt+0x16250>
   2799c:	ldr	r3, [sp, #176]	; 0xb0
   279a0:	cmp	r8, r3
   279a4:	bge	28060 <__assert_fail@plt+0x164bc>
   279a8:	ldrb	r3, [sl, #52]	; 0x34
   279ac:	tst	r3, #32
   279b0:	bne	27e28 <__assert_fail@plt+0x16284>
   279b4:	ldr	r3, [sp, #152]	; 0x98
   279b8:	add	r2, r4, #1
   279bc:	str	r2, [sp, #188]	; 0xbc
   279c0:	ldrb	r4, [r3, r4]
   279c4:	ldr	r3, [sl, #44]	; 0x2c
   279c8:	cmp	r3, #0
   279cc:	beq	28030 <__assert_fail@plt+0x1648c>
   279d0:	ldr	r5, [r3, r4, lsl #2]
   279d4:	ldr	r3, [sp, #248]	; 0xf8
   279d8:	cmp	r3, #0
   279dc:	beq	279f4 <__assert_fail@plt+0x15e50>
   279e0:	mov	r2, r5
   279e4:	add	r1, sp, #148	; 0x94
   279e8:	add	r0, sp, #124	; 0x7c
   279ec:	bl	26f70 <__assert_fail@plt+0x153cc>
   279f0:	mov	r5, r0
   279f4:	cmp	r5, #0
   279f8:	bne	27920 <__assert_fail@plt+0x15d7c>
   279fc:	ldr	r3, [sp, #124]	; 0x7c
   27a00:	ldr	r4, [sp, #248]	; 0xf8
   27a04:	cmp	r3, #0
   27a08:	bne	28104 <__assert_fail@plt+0x16560>
   27a0c:	cmp	r4, #0
   27a10:	beq	27dd0 <__assert_fail@plt+0x1622c>
   27a14:	ldr	r2, [sp, #28]
   27a18:	ldr	r3, [sp, #60]	; 0x3c
   27a1c:	eor	r3, r3, #1
   27a20:	tst	r2, r3
   27a24:	bne	27dd0 <__assert_fail@plt+0x1622c>
   27a28:	ldr	r3, [sp, #188]	; 0xbc
   27a2c:	mov	r1, #0
   27a30:	ldr	r0, [sp, #252]	; 0xfc
   27a34:	add	r4, r4, r3, lsl #2
   27a38:	b	27a50 <__assert_fail@plt+0x15eac>
   27a3c:	ldr	ip, [r4, #4]!
   27a40:	mov	r3, r2
   27a44:	mov	r1, #1
   27a48:	cmp	ip, #0
   27a4c:	bne	27d94 <__assert_fail@plt+0x161f0>
   27a50:	add	r2, r3, #1
   27a54:	cmp	r0, r2
   27a58:	bge	27a3c <__assert_fail@plt+0x15e98>
   27a5c:	ldr	fp, [sp, #24]
   27a60:	cmp	r1, #0
   27a64:	strne	r3, [sp, #188]	; 0xbc
   27a68:	ldr	r2, [sp, #40]	; 0x28
   27a6c:	cmp	r2, #0
   27a70:	beq	27a84 <__assert_fail@plt+0x15ee0>
   27a74:	ldr	r3, [r2]
   27a78:	ldr	r1, [sp, #12]
   27a7c:	add	r3, r3, r1
   27a80:	str	r3, [r2]
   27a84:	cmn	fp, #1
   27a88:	beq	28080 <__assert_fail@plt+0x164dc>
   27a8c:	cmn	fp, #2
   27a90:	ldr	r4, [sp, #248]	; 0xf8
   27a94:	beq	28104 <__assert_fail@plt+0x16560>
   27a98:	ldr	r3, [sp, #32]
   27a9c:	str	fp, [sp, #240]	; 0xf0
   27aa0:	ldrb	r3, [r3, #28]
   27aa4:	tst	r3, #16
   27aa8:	bne	28140 <__assert_fail@plt+0x1659c>
   27aac:	ldr	r2, [sp, #472]	; 0x1d8
   27ab0:	cmp	r2, #1
   27ab4:	bls	281ac <__assert_fail@plt+0x16608>
   27ab8:	mov	r2, fp
   27abc:	add	r0, sp, #148	; 0x94
   27ac0:	ldr	r1, [r4, fp, lsl #2]
   27ac4:	bl	24b74 <__assert_fail@plt+0x12fd0>
   27ac8:	ldr	r3, [sp, #68]	; 0x44
   27acc:	ldrb	r3, [r3, #88]	; 0x58
   27ad0:	str	r0, [sp, #244]	; 0xf4
   27ad4:	tst	r3, #1
   27ad8:	bne	27aec <__assert_fail@plt+0x15f48>
   27adc:	ldr	r3, [sp, #68]	; 0x44
   27ae0:	ldr	r3, [r3, #76]	; 0x4c
   27ae4:	cmp	r3, #0
   27ae8:	beq	28eb4 <__assert_fail@plt+0x17310>
   27aec:	ldr	r3, [sp, #232]	; 0xe8
   27af0:	cmn	fp, #-1073741822	; 0xc0000002
   27af4:	ldr	r9, [sp, #244]	; 0xf4
   27af8:	str	r3, [sp, #12]
   27afc:	bhi	28104 <__assert_fail@plt+0x16560>
   27b00:	add	r5, fp, #1
   27b04:	lsl	r4, r5, #2
   27b08:	mov	r0, r4
   27b0c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   27b10:	subs	sl, r0, #0
   27b14:	beq	284e0 <__assert_fail@plt+0x1693c>
   27b18:	ldr	r3, [sp, #12]
   27b1c:	ldr	r6, [r3, #76]	; 0x4c
   27b20:	cmp	r6, #0
   27b24:	beq	281dc <__assert_fail@plt+0x16638>
   27b28:	mov	r0, r4
   27b2c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   27b30:	cmp	r0, #0
   27b34:	mov	r6, r0
   27b38:	str	r0, [sp, #24]
   27b3c:	beq	285b8 <__assert_fail@plt+0x16a14>
   27b40:	add	r4, sp, #300	; 0x12c
   27b44:	mov	r8, #0
   27b48:	lsl	r7, r5, #2
   27b4c:	mov	r1, #0
   27b50:	mov	r0, r6
   27b54:	mov	r2, r7
   27b58:	bl	119e8 <memset@plt>
   27b5c:	add	r1, sp, #284	; 0x11c
   27b60:	add	r0, sp, #148	; 0x94
   27b64:	str	sl, [sp, #284]	; 0x11c
   27b68:	str	r6, [sp, #288]	; 0x120
   27b6c:	str	r9, [sp, #292]	; 0x124
   27b70:	str	fp, [sp, #296]	; 0x128
   27b74:	str	r8, [r4]
   27b78:	str	r8, [r4, #4]
   27b7c:	str	r8, [r4, #8]
   27b80:	bl	27114 <__assert_fail@plt+0x15570>
   27b84:	mov	r3, r0
   27b88:	ldr	r0, [sp, #308]	; 0x134
   27b8c:	str	r3, [sp, #16]
   27b90:	bl	17ac8 <__assert_fail@plt+0x5f24>
   27b94:	ldr	r3, [sp, #16]
   27b98:	cmp	r3, #0
   27b9c:	bne	2858c <__assert_fail@plt+0x169e8>
   27ba0:	ldr	r3, [sl]
   27ba4:	cmp	r3, #0
   27ba8:	bne	285e0 <__assert_fail@plt+0x16a3c>
   27bac:	ldr	r3, [r6]
   27bb0:	cmp	r3, #0
   27bb4:	bne	285e0 <__assert_fail@plt+0x16a3c>
   27bb8:	ldr	r3, [sp, #248]	; 0xf8
   27bbc:	sub	r7, r7, #4
   27bc0:	add	r3, r3, r7
   27bc4:	subs	fp, fp, #1
   27bc8:	bcc	28414 <__assert_fail@plt+0x16870>
   27bcc:	ldr	r1, [r3, #-4]!
   27bd0:	cmp	r1, #0
   27bd4:	beq	27bc4 <__assert_fail@plt+0x16020>
   27bd8:	ldrb	r2, [r1, #52]	; 0x34
   27bdc:	tst	r2, #16
   27be0:	beq	27bc4 <__assert_fail@plt+0x16020>
   27be4:	mov	r2, fp
   27be8:	add	r0, sp, #148	; 0x94
   27bec:	bl	24b74 <__assert_fail@plt+0x12fd0>
   27bf0:	add	r5, fp, #1
   27bf4:	mov	r9, r0
   27bf8:	b	27b48 <__assert_fail@plt+0x15fa4>
   27bfc:	ldr	r3, [sp, #64]	; 0x40
   27c00:	cmp	r3, r5
   27c04:	ble	27c70 <__assert_fail@plt+0x160cc>
   27c08:	ldr	r3, [sp, #56]	; 0x38
   27c0c:	ldr	r1, [sp, #80]	; 0x50
   27c10:	ldrb	r2, [r3, r5]
   27c14:	add	r3, r3, r5
   27c18:	ldrb	r2, [r1, r2]
   27c1c:	ldr	r1, [sp, #48]	; 0x30
   27c20:	ldrb	r2, [r1, r2]
   27c24:	cmp	r2, #0
   27c28:	bne	27818 <__assert_fail@plt+0x15c74>
   27c2c:	ldr	ip, [sp, #48]	; 0x30
   27c30:	ldr	r2, [sp, #56]	; 0x38
   27c34:	ldr	r1, [sp, #64]	; 0x40
   27c38:	ldr	lr, [sp, #80]	; 0x50
   27c3c:	sub	r0, r2, #1
   27c40:	rsb	r2, r2, #1
   27c44:	add	r0, r0, r1
   27c48:	b	27c60 <__assert_fail@plt+0x160bc>
   27c4c:	ldrb	r1, [r3, #1]!
   27c50:	ldrb	r1, [lr, r1]
   27c54:	ldrb	r1, [ip, r1]
   27c58:	cmp	r1, #0
   27c5c:	bne	27814 <__assert_fail@plt+0x15c70>
   27c60:	cmp	r3, r0
   27c64:	add	r5, r2, r3
   27c68:	bne	27c4c <__assert_fail@plt+0x160a8>
   27c6c:	str	r5, [sp, #116]	; 0x74
   27c70:	ldr	r3, [sp, #64]	; 0x40
   27c74:	cmp	r3, r5
   27c78:	bne	27818 <__assert_fail@plt+0x15c74>
   27c7c:	ldr	r2, [sp, #72]	; 0x48
   27c80:	cmp	r2, r3
   27c84:	ldrgt	r2, [sp, #56]	; 0x38
   27c88:	movle	r3, #0
   27c8c:	ldrbgt	r3, [r2, r3]
   27c90:	ldr	r2, [sp, #80]	; 0x50
   27c94:	cmp	r2, #0
   27c98:	ldrbne	r3, [r2, r3]
   27c9c:	ldr	r2, [sp, #48]	; 0x30
   27ca0:	ldrb	r3, [r2, r3]
   27ca4:	cmp	r3, #0
   27ca8:	bne	27818 <__assert_fail@plt+0x15c74>
   27cac:	ldr	r9, [sp, #68]	; 0x44
   27cb0:	mov	r3, #1
   27cb4:	str	r3, [sp, #36]	; 0x24
   27cb8:	ldr	r4, [sp, #248]	; 0xf8
   27cbc:	b	28110 <__assert_fail@plt+0x1656c>
   27cc0:	ldr	r3, [sp, #64]	; 0x40
   27cc4:	cmp	r3, r5
   27cc8:	ble	27c70 <__assert_fail@plt+0x160cc>
   27ccc:	ldr	r1, [sp, #48]	; 0x30
   27cd0:	ldr	r3, [sp, #56]	; 0x38
   27cd4:	ldrb	r2, [r3, r5]
   27cd8:	add	r3, r3, r5
   27cdc:	ldrb	r2, [r1, r2]
   27ce0:	cmp	r2, #0
   27ce4:	bne	27818 <__assert_fail@plt+0x15c74>
   27ce8:	ldr	ip, [sp, #48]	; 0x30
   27cec:	ldr	r2, [sp, #56]	; 0x38
   27cf0:	ldr	r1, [sp, #64]	; 0x40
   27cf4:	sub	r0, r2, #1
   27cf8:	rsb	r2, r2, #1
   27cfc:	add	r0, r0, r1
   27d00:	b	27d14 <__assert_fail@plt+0x16170>
   27d04:	ldrb	r1, [r3, #1]!
   27d08:	ldrb	r1, [ip, r1]
   27d0c:	cmp	r1, #0
   27d10:	bne	27814 <__assert_fail@plt+0x15c70>
   27d14:	cmp	r0, r3
   27d18:	add	r5, r2, r3
   27d1c:	bne	27d04 <__assert_fail@plt+0x16160>
   27d20:	str	r5, [sp, #116]	; 0x74
   27d24:	b	27c70 <__assert_fail@plt+0x160cc>
   27d28:	ldr	r3, [sp, #76]	; 0x4c
   27d2c:	cmp	r3, r5
   27d30:	bgt	27cac <__assert_fail@plt+0x16108>
   27d34:	mov	r1, #0
   27d38:	mov	r3, r5
   27d3c:	ldr	ip, [sp, #48]	; 0x30
   27d40:	ldr	r6, [sp, #56]	; 0x38
   27d44:	ldr	lr, [sp, #72]	; 0x48
   27d48:	ldr	r4, [sp, #76]	; 0x4c
   27d4c:	ldr	r0, [sp, #80]	; 0x50
   27d50:	b	27d64 <__assert_fail@plt+0x161c0>
   27d54:	sub	r3, r3, #1
   27d58:	mov	r1, #1
   27d5c:	cmp	r3, r4
   27d60:	blt	2844c <__assert_fail@plt+0x168a8>
   27d64:	cmp	lr, r3
   27d68:	mov	r2, #0
   27d6c:	ldrbgt	r2, [r6, r3]
   27d70:	cmp	r0, #0
   27d74:	ldrbne	r2, [r0, r2]
   27d78:	ldrb	r2, [ip, r2]
   27d7c:	cmp	r2, #0
   27d80:	beq	27d54 <__assert_fail@plt+0x161b0>
   27d84:	cmp	r1, #0
   27d88:	movne	r5, r3
   27d8c:	strne	r3, [sp, #116]	; 0x74
   27d90:	b	27818 <__assert_fail@plt+0x15c74>
   27d94:	mov	r2, #0
   27d98:	add	r1, sp, #148	; 0x94
   27d9c:	str	r3, [sp, #188]	; 0xbc
   27da0:	add	r0, sp, #124	; 0x7c
   27da4:	bl	26f70 <__assert_fail@plt+0x153cc>
   27da8:	ldr	r3, [sp, #124]	; 0x7c
   27dac:	cmp	r3, #0
   27db0:	bne	27dc4 <__assert_fail@plt+0x16220>
   27db4:	cmp	r0, #0
   27db8:	bne	284c8 <__assert_fail@plt+0x16924>
   27dbc:	ldr	r4, [sp, #248]	; 0xf8
   27dc0:	b	27a28 <__assert_fail@plt+0x15e84>
   27dc4:	cmp	r0, #0
   27dc8:	mov	r5, r0
   27dcc:	bne	27920 <__assert_fail@plt+0x15d7c>
   27dd0:	ldr	fp, [sp, #24]
   27dd4:	b	27a68 <__assert_fail@plt+0x15ec4>
   27dd8:	mov	r2, r4
   27ddc:	mov	r1, r5
   27de0:	add	r0, sp, #148	; 0x94
   27de4:	bl	24b74 <__assert_fail@plt+0x12fd0>
   27de8:	cmp	r0, #0
   27dec:	beq	2797c <__assert_fail@plt+0x15dd8>
   27df0:	b	2795c <__assert_fail@plt+0x15db8>
   27df4:	ldr	r2, [sp, #196]	; 0xc4
   27df8:	cmp	r3, r2
   27dfc:	bge	2799c <__assert_fail@plt+0x15df8>
   27e00:	add	r1, r4, #2
   27e04:	add	r0, sp, #148	; 0x94
   27e08:	bl	2070c <__assert_fail@plt+0xeb68>
   27e0c:	cmp	r0, #0
   27e10:	str	r0, [sp, #124]	; 0x7c
   27e14:	bne	28400 <__assert_fail@plt+0x1685c>
   27e18:	ldrb	r3, [sl, #52]	; 0x34
   27e1c:	ldr	r4, [sp, #188]	; 0xbc
   27e20:	tst	r3, #32
   27e24:	beq	279b4 <__assert_fail@plt+0x15e10>
   27e28:	ldr	fp, [sl, #8]
   27e2c:	ldr	r6, [sp, #232]	; 0xe8
   27e30:	cmp	fp, #0
   27e34:	ble	28134 <__assert_fail@plt+0x16590>
   27e38:	add	r3, r6, #128	; 0x80
   27e3c:	mov	r7, #0
   27e40:	str	r3, [sp, #44]	; 0x2c
   27e44:	str	r8, [sp, #84]	; 0x54
   27e48:	b	27f68 <__assert_fail@plt+0x163c4>
   27e4c:	tst	r0, #1
   27e50:	beq	27f5c <__assert_fail@plt+0x163b8>
   27e54:	tst	r5, #8
   27e58:	bne	27f5c <__assert_fail@plt+0x163b8>
   27e5c:	tst	r5, #32
   27e60:	beq	27e6c <__assert_fail@plt+0x162c8>
   27e64:	tst	r0, #2
   27e68:	beq	27f5c <__assert_fail@plt+0x163b8>
   27e6c:	tst	r5, #128	; 0x80
   27e70:	beq	27e7c <__assert_fail@plt+0x162d8>
   27e74:	tst	r0, #8
   27e78:	beq	27f5c <__assert_fail@plt+0x163b8>
   27e7c:	mov	r0, r8
   27e80:	add	r3, sp, #148	; 0x94
   27e84:	str	r4, [sp]
   27e88:	mov	r2, r9
   27e8c:	ldr	r1, [sp, #44]	; 0x2c
   27e90:	bl	25d74 <__assert_fail@plt+0x141d0>
   27e94:	subs	r4, r0, #0
   27e98:	beq	27f54 <__assert_fail@plt+0x163b0>
   27e9c:	ldr	r2, [sp, #188]	; 0xbc
   27ea0:	add	r0, sp, #148	; 0x94
   27ea4:	ldr	r3, [sp, #268]	; 0x10c
   27ea8:	cmp	r3, r4
   27eac:	movlt	r3, r4
   27eb0:	add	r4, r4, r2
   27eb4:	mov	r1, r4
   27eb8:	str	r3, [sp, #268]	; 0x10c
   27ebc:	bl	212a0 <__assert_fail@plt+0xf6fc>
   27ec0:	cmp	r0, #0
   27ec4:	str	r0, [sp, #136]	; 0x88
   27ec8:	bne	280c0 <__assert_fail@plt+0x1651c>
   27ecc:	ldr	r3, [r6, #12]
   27ed0:	ldr	r5, [sp, #248]	; 0xf8
   27ed4:	ldr	r2, [r6, #24]
   27ed8:	ldr	r3, [r3, r9, lsl #2]
   27edc:	ldr	r1, [r5, r4, lsl #2]
   27ee0:	add	r3, r3, r3, lsl #1
   27ee4:	lsl	r3, r3, #2
   27ee8:	cmp	r1, #0
   27eec:	add	ip, r2, r3
   27ef0:	beq	27fc4 <__assert_fail@plt+0x16420>
   27ef4:	mov	r2, ip
   27ef8:	add	r0, sp, #284	; 0x11c
   27efc:	ldr	r1, [r1, #40]	; 0x28
   27f00:	bl	22128 <__assert_fail@plt+0x10584>
   27f04:	cmp	r0, #0
   27f08:	str	r0, [sp, #136]	; 0x88
   27f0c:	bne	280c0 <__assert_fail@plt+0x1651c>
   27f10:	sub	r1, r4, #1
   27f14:	add	r0, sp, #148	; 0x94
   27f18:	ldr	r2, [sp, #236]	; 0xec
   27f1c:	bl	240b8 <__assert_fail@plt+0x12514>
   27f20:	ldr	r5, [sp, #248]	; 0xf8
   27f24:	mov	r3, r0
   27f28:	add	r2, sp, #284	; 0x11c
   27f2c:	mov	r1, r6
   27f30:	add	r0, sp, #136	; 0x88
   27f34:	bl	22294 <__assert_fail@plt+0x106f0>
   27f38:	str	r0, [r5, r4, lsl #2]
   27f3c:	ldr	r0, [sp, #292]	; 0x124
   27f40:	bl	17ac8 <__assert_fail@plt+0x5f24>
   27f44:	ldr	r3, [sp, #248]	; 0xf8
   27f48:	ldr	r2, [r3, r4, lsl #2]
   27f4c:	cmp	r2, #0
   27f50:	beq	2801c <__assert_fail@plt+0x16478>
   27f54:	ldr	fp, [sl, #8]
   27f58:	ldr	r4, [sp, #188]	; 0xbc
   27f5c:	add	r7, r7, #1
   27f60:	cmp	r7, fp
   27f64:	bge	28130 <__assert_fail@plt+0x1658c>
   27f68:	ldr	r2, [sl, #12]
   27f6c:	ldr	r8, [r6]
   27f70:	ldr	r9, [r2, r7, lsl #2]
   27f74:	add	r2, r8, r9, lsl #3
   27f78:	ldrb	r1, [r2, #6]
   27f7c:	tst	r1, #16
   27f80:	beq	27f5c <__assert_fail@plt+0x163b8>
   27f84:	ldr	r5, [r2, #4]
   27f88:	ldr	r3, [sp, #52]	; 0x34
   27f8c:	tst	r3, r5
   27f90:	beq	27e7c <__assert_fail@plt+0x162d8>
   27f94:	ubfx	r5, r5, #8, #10
   27f98:	mov	r1, r4
   27f9c:	add	r0, sp, #148	; 0x94
   27fa0:	ldr	r2, [sp, #236]	; 0xec
   27fa4:	bl	240b8 <__assert_fail@plt+0x12514>
   27fa8:	tst	r5, #4
   27fac:	bne	27e4c <__assert_fail@plt+0x162a8>
   27fb0:	tst	r5, #8
   27fb4:	beq	27e5c <__assert_fail@plt+0x162b8>
   27fb8:	tst	r0, #1
   27fbc:	beq	27e5c <__assert_fail@plt+0x162b8>
   27fc0:	b	27f5c <__assert_fail@plt+0x163b8>
   27fc4:	add	r2, r2, r3
   27fc8:	sub	r1, r4, #1
   27fcc:	ldrd	r2, [r2]
   27fd0:	add	r0, sp, #148	; 0x94
   27fd4:	mov	r8, r2
   27fd8:	mov	r9, r3
   27fdc:	ldr	r2, [sp, #236]	; 0xec
   27fe0:	add	r3, sp, #284	; 0x11c
   27fe4:	strd	r8, [r3]
   27fe8:	ldr	r3, [ip, #8]
   27fec:	str	r3, [sp, #292]	; 0x124
   27ff0:	bl	240b8 <__assert_fail@plt+0x12514>
   27ff4:	mov	r3, r0
   27ff8:	add	r2, sp, #284	; 0x11c
   27ffc:	mov	r1, r6
   28000:	add	r0, sp, #136	; 0x88
   28004:	bl	22294 <__assert_fail@plt+0x106f0>
   28008:	ldr	r3, [sp, #248]	; 0xf8
   2800c:	str	r0, [r5, r4, lsl #2]
   28010:	ldr	r2, [r3, r4, lsl #2]
   28014:	cmp	r2, #0
   28018:	bne	27f54 <__assert_fail@plt+0x163b0>
   2801c:	ldr	r0, [sp, #136]	; 0x88
   28020:	cmp	r0, #0
   28024:	beq	27f54 <__assert_fail@plt+0x163b0>
   28028:	ldr	r8, [sp, #84]	; 0x54
   2802c:	b	280c8 <__assert_fail@plt+0x16524>
   28030:	ldr	r5, [sl, #48]	; 0x30
   28034:	cmp	r5, #0
   28038:	beq	28168 <__assert_fail@plt+0x165c4>
   2803c:	ldr	r1, [sp, #188]	; 0xbc
   28040:	add	r0, sp, #148	; 0x94
   28044:	ldr	r2, [sp, #236]	; 0xec
   28048:	sub	r1, r1, #1
   2804c:	bl	240b8 <__assert_fail@plt+0x12514>
   28050:	tst	r0, #1
   28054:	addne	r4, r4, #256	; 0x100
   28058:	ldr	r5, [r5, r4, lsl #2]
   2805c:	b	279d4 <__assert_fail@plt+0x15e30>
   28060:	ldr	r2, [sp, #196]	; 0xc4
   28064:	cmp	r3, r2
   28068:	bge	279a8 <__assert_fail@plt+0x15e04>
   2806c:	b	27e00 <__assert_fail@plt+0x1625c>
   28070:	mov	r0, sl
   28074:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28078:	mov	r0, r4
   2807c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28080:	add	r0, sp, #148	; 0x94
   28084:	bl	20bfc <__assert_fail@plt+0xf058>
   28088:	ldr	r5, [sp, #116]	; 0x74
   2808c:	ldr	r2, [sp, #76]	; 0x4c
   28090:	ldr	r3, [sp, #96]	; 0x60
   28094:	add	r5, r5, r3
   28098:	ldr	r3, [sp, #64]	; 0x40
   2809c:	str	r5, [sp, #116]	; 0x74
   280a0:	cmp	r5, r3
   280a4:	movle	r3, #0
   280a8:	movgt	r3, #1
   280ac:	cmp	r5, r2
   280b0:	orrlt	r3, r3, #1
   280b4:	cmp	r3, #0
   280b8:	beq	277cc <__assert_fail@plt+0x15c28>
   280bc:	b	27cac <__assert_fail@plt+0x16108>
   280c0:	ldr	r8, [sp, #84]	; 0x54
   280c4:	ldr	r3, [sp, #248]	; 0xf8
   280c8:	cmp	r3, #0
   280cc:	str	r0, [sp, #124]	; 0x7c
   280d0:	beq	28190 <__assert_fail@plt+0x165ec>
   280d4:	mov	r5, #0
   280d8:	b	279e0 <__assert_fail@plt+0x15e3c>
   280dc:	mov	r3, #1
   280e0:	str	r3, [sp, #36]	; 0x24
   280e4:	ldr	r0, [sp, #36]	; 0x24
   280e8:	add	sp, sp, #428	; 0x1ac
   280ec:	ldrd	r4, [sp]
   280f0:	ldrd	r6, [sp, #8]
   280f4:	ldrd	r8, [sp, #16]
   280f8:	ldrd	sl, [sp, #24]
   280fc:	add	sp, sp, #32
   28100:	pop	{pc}		; (ldr pc, [sp], #4)
   28104:	ldr	r9, [sp, #68]	; 0x44
   28108:	mov	r3, #12
   2810c:	str	r3, [sp, #36]	; 0x24
   28110:	mov	r0, r4
   28114:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28118:	ldr	r3, [r9, #76]	; 0x4c
   2811c:	cmp	r3, #0
   28120:	bne	283d8 <__assert_fail@plt+0x16834>
   28124:	add	r0, sp, #148	; 0x94
   28128:	bl	20bb4 <__assert_fail@plt+0xf010>
   2812c:	b	280e4 <__assert_fail@plt+0x16540>
   28130:	ldr	r8, [sp, #84]	; 0x54
   28134:	mov	r3, #0
   28138:	str	r3, [sp, #124]	; 0x7c
   2813c:	b	279b4 <__assert_fail@plt+0x15e10>
   28140:	ldr	r9, [sp, #68]	; 0x44
   28144:	ldr	r3, [r9, #76]	; 0x4c
   28148:	cmp	r3, #0
   2814c:	beq	28258 <__assert_fail@plt+0x166b4>
   28150:	mov	r2, fp
   28154:	add	r0, sp, #148	; 0x94
   28158:	ldr	r1, [r4, fp, lsl #2]
   2815c:	bl	24b74 <__assert_fail@plt+0x12fd0>
   28160:	str	r0, [sp, #244]	; 0xf4
   28164:	b	27aec <__assert_fail@plt+0x15f48>
   28168:	mov	r1, sl
   2816c:	ldr	r0, [sp, #232]	; 0xe8
   28170:	bl	235b0 <__assert_fail@plt+0x11a0c>
   28174:	cmp	r0, #0
   28178:	bne	279c4 <__assert_fail@plt+0x15e20>
   2817c:	ldr	r3, [sp, #248]	; 0xf8
   28180:	mov	r2, #12
   28184:	str	r2, [sp, #124]	; 0x7c
   28188:	cmp	r3, #0
   2818c:	bne	280d4 <__assert_fail@plt+0x16530>
   28190:	mov	r4, #0
   28194:	ldr	r9, [sp, #68]	; 0x44
   28198:	b	28108 <__assert_fail@plt+0x16564>
   2819c:	ldr	r3, [sp, #104]	; 0x68
   281a0:	str	r3, [sp, #16]
   281a4:	ldrb	r3, [sl, #52]	; 0x34
   281a8:	b	278f8 <__assert_fail@plt+0x15d54>
   281ac:	ldr	r2, [sp, #68]	; 0x44
   281b0:	ldr	r2, [r2, #76]	; 0x4c
   281b4:	cmp	r2, #0
   281b8:	bne	28150 <__assert_fail@plt+0x165ac>
   281bc:	ldr	r9, [sp, #68]	; 0x44
   281c0:	ldr	r2, [sp, #472]	; 0x1d8
   281c4:	cmp	r2, #0
   281c8:	bne	2829c <__assert_fail@plt+0x166f8>
   281cc:	str	r2, [sp, #36]	; 0x24
   281d0:	b	28110 <__assert_fail@plt+0x1656c>
   281d4:	ldr	r2, [sp, #72]	; 0x48
   281d8:	b	27610 <__assert_fail@plt+0x15a6c>
   281dc:	add	r1, sp, #284	; 0x11c
   281e0:	add	r0, sp, #148	; 0x94
   281e4:	str	sl, [sp, #284]	; 0x11c
   281e8:	str	r6, [sp, #288]	; 0x120
   281ec:	str	r9, [sp, #292]	; 0x124
   281f0:	str	fp, [sp, #296]	; 0x128
   281f4:	str	r6, [sp, #300]	; 0x12c
   281f8:	str	r6, [sp, #304]	; 0x130
   281fc:	str	r6, [sp, #308]	; 0x134
   28200:	bl	27114 <__assert_fail@plt+0x15570>
   28204:	mov	r7, r0
   28208:	ldr	r0, [sp, #308]	; 0x134
   2820c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28210:	cmp	r7, #0
   28214:	bne	285d8 <__assert_fail@plt+0x16a34>
   28218:	ldr	r4, [sl]
   2821c:	cmp	r4, #0
   28220:	beq	28070 <__assert_fail@plt+0x164cc>
   28224:	mov	r8, fp
   28228:	mov	fp, r9
   2822c:	ldr	r9, [sp, #68]	; 0x44
   28230:	ldr	r0, [sp, #248]	; 0xf8
   28234:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28238:	mov	r0, #0
   2823c:	str	r8, [sp, #240]	; 0xf0
   28240:	str	fp, [sp, #244]	; 0xf4
   28244:	str	sl, [sp, #248]	; 0xf8
   28248:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2824c:	mov	r0, #0
   28250:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28254:	ldr	r4, [sp, #248]	; 0xf8
   28258:	ldr	r3, [sp, #472]	; 0x1d8
   2825c:	cmp	r3, #0
   28260:	beq	28110 <__assert_fail@plt+0x1656c>
   28264:	ldr	r3, [sp, #472]	; 0x1d8
   28268:	cmp	r3, #1
   2826c:	bls	28294 <__assert_fail@plt+0x166f0>
   28270:	ldr	r2, [sp, #472]	; 0x1d8
   28274:	ldr	r3, [sp, #476]	; 0x1dc
   28278:	sub	r1, r3, #8
   2827c:	add	r1, r1, r2, lsl #3
   28280:	mvn	r2, #0
   28284:	str	r2, [r3, #12]
   28288:	str	r2, [r3, #8]!
   2828c:	cmp	r1, r3
   28290:	bne	28284 <__assert_fail@plt+0x166e0>
   28294:	ldr	r3, [sp, #32]
   28298:	ldrb	r3, [r3, #28]
   2829c:	eor	r3, r3, #16
   282a0:	mov	r5, #0
   282a4:	ldr	r1, [sp, #240]	; 0xf0
   282a8:	ldr	r2, [sp, #472]	; 0x1d8
   282ac:	subs	r2, r2, #1
   282b0:	movne	r2, #1
   282b4:	ands	r3, r2, r3, lsr #4
   282b8:	ldr	r2, [sp, #476]	; 0x1dc
   282bc:	str	r5, [r2]
   282c0:	str	r1, [r2, #4]
   282c4:	bne	2865c <__assert_fail@plt+0x16ab8>
   282c8:	ldrb	lr, [sp, #224]	; 0xe0
   282cc:	mov	r1, #0
   282d0:	ldr	ip, [sp, #116]	; 0x74
   282d4:	ldr	r7, [sp, #160]	; 0xa0
   282d8:	ldr	r5, [sp, #176]	; 0xb0
   282dc:	ldr	r6, [sp, #180]	; 0xb4
   282e0:	ldr	r8, [sp, #472]	; 0x1d8
   282e4:	ldr	r2, [sp, #476]	; 0x1dc
   282e8:	b	282f0 <__assert_fail@plt+0x1674c>
   282ec:	ldr	r3, [r2, #8]!
   282f0:	cmn	r3, #1
   282f4:	beq	28314 <__assert_fail@plt+0x16770>
   282f8:	cmp	lr, #0
   282fc:	ldr	r0, [r2, #4]
   28300:	bne	2863c <__assert_fail@plt+0x16a98>
   28304:	add	r3, ip, r3
   28308:	add	r0, ip, r0
   2830c:	str	r3, [r2]
   28310:	str	r0, [r2, #4]
   28314:	add	r1, r1, #1
   28318:	cmp	r1, r8
   2831c:	bne	282ec <__assert_fail@plt+0x16748>
   28320:	ldr	r3, [sp, #108]	; 0x6c
   28324:	cmp	r3, #0
   28328:	ble	28360 <__assert_fail@plt+0x167bc>
   2832c:	ldr	r3, [sp, #108]	; 0x6c
   28330:	ldr	r2, [sp, #472]	; 0x1d8
   28334:	ldr	r0, [sp, #476]	; 0x1dc
   28338:	add	r1, r3, r2
   2833c:	ldr	r3, [sp, #476]	; 0x1dc
   28340:	add	r1, r0, r1, lsl #3
   28344:	add	r3, r3, r2, lsl #3
   28348:	mvn	r2, #0
   2834c:	add	r3, r3, #8
   28350:	str	r2, [r3, #-8]
   28354:	str	r2, [r3, #-4]
   28358:	cmp	r1, r3
   2835c:	bne	2834c <__assert_fail@plt+0x167a8>
   28360:	ldr	r1, [r9, #132]	; 0x84
   28364:	cmp	r1, #0
   28368:	beq	28110 <__assert_fail@plt+0x1656c>
   2836c:	ldr	r3, [sp, #472]	; 0x1d8
   28370:	ldr	r2, [sp, #476]	; 0x1dc
   28374:	sub	ip, r3, #1
   28378:	mov	r3, #0
   2837c:	add	r5, r2, #8
   28380:	add	lr, r2, #12
   28384:	b	283bc <__assert_fail@plt+0x16818>
   28388:	ldr	r2, [r1, r3, lsl #2]
   2838c:	cmp	r2, r3
   28390:	add	r0, r2, #1
   28394:	beq	283b8 <__assert_fail@plt+0x16814>
   28398:	ldr	r2, [sp, #476]	; 0x1dc
   2839c:	ldr	r2, [r2, r0, lsl #3]
   283a0:	ldr	r0, [sp, #476]	; 0x1dc
   283a4:	str	r2, [r5, r3, lsl #3]
   283a8:	ldr	r2, [r1, r3, lsl #2]
   283ac:	add	r2, r0, r2, lsl #3
   283b0:	ldr	r2, [r2, #12]
   283b4:	str	r2, [lr, r3, lsl #3]
   283b8:	add	r3, r3, #1
   283bc:	cmp	r3, ip
   283c0:	bne	28388 <__assert_fail@plt+0x167e4>
   283c4:	b	28110 <__assert_fail@plt+0x1656c>
   283c8:	ldrb	r3, [r9, #88]	; 0x58
   283cc:	tst	r3, #2
   283d0:	bne	276ac <__assert_fail@plt+0x15b08>
   283d4:	b	276d4 <__assert_fail@plt+0x15b30>
   283d8:	add	r0, sp, #148	; 0x94
   283dc:	bl	20bfc <__assert_fail@plt+0xf058>
   283e0:	ldr	r0, [sp, #280]	; 0x118
   283e4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   283e8:	ldr	r0, [sp, #264]	; 0x108
   283ec:	bl	17ac8 <__assert_fail@plt+0x5f24>
   283f0:	b	28124 <__assert_fail@plt+0x16580>
   283f4:	ldr	sl, [r4, #40]	; 0x28
   283f8:	cmp	sl, #0
   283fc:	bne	278cc <__assert_fail@plt+0x15d28>
   28400:	mov	r3, #12
   28404:	ldr	r9, [sp, #68]	; 0x44
   28408:	str	r3, [sp, #36]	; 0x24
   2840c:	ldr	r4, [sp, #248]	; 0xf8
   28410:	b	28110 <__assert_fail@plt+0x1656c>
   28414:	mov	r0, sl
   28418:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2841c:	mov	r0, r6
   28420:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28424:	add	r0, sp, #148	; 0x94
   28428:	bl	20bfc <__assert_fail@plt+0xf058>
   2842c:	ldr	r5, [sp, #116]	; 0x74
   28430:	b	2808c <__assert_fail@plt+0x164e8>
   28434:	mov	r3, #12
   28438:	ldr	r4, [sp, #248]	; 0xf8
   2843c:	str	r3, [sp, #36]	; 0x24
   28440:	b	28110 <__assert_fail@plt+0x1656c>
   28444:	mov	r3, #8
   28448:	b	27770 <__assert_fail@plt+0x15bcc>
   2844c:	str	r1, [sp, #36]	; 0x24
   28450:	str	r3, [sp, #116]	; 0x74
   28454:	ldr	r9, [sp, #68]	; 0x44
   28458:	ldr	r4, [sp, #248]	; 0xf8
   2845c:	b	28110 <__assert_fail@plt+0x1656c>
   28460:	ldr	r4, [sp, #48]	; 0x30
   28464:	ldr	r1, [sp, #172]	; 0xac
   28468:	sub	r2, r5, r1
   2846c:	ldr	r3, [sp, #180]	; 0xb4
   28470:	cmp	r3, r2
   28474:	bhi	28ec4 <__assert_fail@plt+0x17320>
   28478:	mov	r1, r5
   2847c:	add	r0, sp, #148	; 0x94
   28480:	ldr	r2, [sp, #480]	; 0x1e0
   28484:	bl	24308 <__assert_fail@plt+0x12764>
   28488:	subs	r3, r0, #0
   2848c:	str	r3, [sp, #36]	; 0x24
   28490:	beq	28ebc <__assert_fail@plt+0x17318>
   28494:	ldr	r9, [sp, #68]	; 0x44
   28498:	ldr	r4, [sp, #248]	; 0xf8
   2849c:	b	28110 <__assert_fail@plt+0x1656c>
   284a0:	ldrsb	r3, [sl, #52]	; 0x34
   284a4:	cmp	r3, #0
   284a8:	blt	2851c <__assert_fail@plt+0x16978>
   284ac:	ldr	fp, [sp, #12]
   284b0:	ldr	r3, [sp, #20]
   284b4:	cmp	r3, #0
   284b8:	beq	27a84 <__assert_fail@plt+0x15ee0>
   284bc:	ldr	r3, [sp, #20]
   284c0:	str	r3, [sp, #28]
   284c4:	b	2790c <__assert_fail@plt+0x15d68>
   284c8:	mov	r5, r0
   284cc:	b	27920 <__assert_fail@plt+0x15d7c>
   284d0:	mov	fp, r4
   284d4:	b	27a84 <__assert_fail@plt+0x15ee0>
   284d8:	ldr	sl, [r4, #44]	; 0x2c
   284dc:	b	283f8 <__assert_fail@plt+0x16854>
   284e0:	ldr	r9, [sp, #68]	; 0x44
   284e4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   284e8:	mov	r3, #12
   284ec:	mov	r0, sl
   284f0:	str	r3, [sp, #36]	; 0x24
   284f4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   284f8:	ldr	r4, [sp, #248]	; 0xf8
   284fc:	b	28110 <__assert_fail@plt+0x1656c>
   28500:	mov	r3, r0
   28504:	mov	r1, r4
   28508:	ldr	r2, [sl, #40]	; 0x28
   2850c:	add	r0, sp, #124	; 0x7c
   28510:	bl	22294 <__assert_fail@plt+0x106f0>
   28514:	mov	sl, r0
   28518:	b	283f8 <__assert_fail@plt+0x16854>
   2851c:	mov	r1, sl
   28520:	add	r0, sp, #148	; 0x94
   28524:	ldr	r2, [sp, #12]
   28528:	bl	24b74 <__assert_fail@plt+0x12fd0>
   2852c:	subs	r3, r0, #0
   28530:	str	r3, [sp, #28]
   28534:	bne	284ac <__assert_fail@plt+0x16908>
   28538:	mvn	fp, #0
   2853c:	b	2790c <__assert_fail@plt+0x15d68>
   28540:	add	r4, sl, #8
   28544:	add	r5, sl, #12
   28548:	mov	r1, r4
   2854c:	mov	r2, r5
   28550:	mov	r3, #0
   28554:	add	r0, sp, #148	; 0x94
   28558:	bl	24c58 <__assert_fail@plt+0x130b4>
   2855c:	cmp	r0, #0
   28560:	mov	fp, r0
   28564:	str	r0, [sp, #124]	; 0x7c
   28568:	bne	27a84 <__assert_fail@plt+0x15ee0>
   2856c:	ldrb	r3, [sl, #52]	; 0x34
   28570:	tst	r3, #64	; 0x40
   28574:	bne	28614 <__assert_fail@plt+0x16a70>
   28578:	mov	r2, #0
   2857c:	str	r2, [sp, #16]
   28580:	b	278f8 <__assert_fail@plt+0x15d54>
   28584:	ldr	sl, [r4, #48]	; 0x30
   28588:	b	283f8 <__assert_fail@plt+0x16854>
   2858c:	mov	r7, r3
   28590:	mov	r0, sl
   28594:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28598:	ldr	r0, [sp, #24]
   2859c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   285a0:	cmp	r7, #1
   285a4:	beq	28080 <__assert_fail@plt+0x164dc>
   285a8:	str	r7, [sp, #36]	; 0x24
   285ac:	ldr	r9, [sp, #68]	; 0x44
   285b0:	ldr	r4, [sp, #248]	; 0xf8
   285b4:	b	28110 <__assert_fail@plt+0x1656c>
   285b8:	mov	r3, #12
   285bc:	mov	r0, sl
   285c0:	ldr	r9, [sp, #68]	; 0x44
   285c4:	str	r3, [sp, #36]	; 0x24
   285c8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   285cc:	mov	r0, r6
   285d0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   285d4:	b	27cb8 <__assert_fail@plt+0x16114>
   285d8:	str	r6, [sp, #24]
   285dc:	b	28590 <__assert_fail@plt+0x169ec>
   285e0:	mov	r3, r5
   285e4:	mov	r2, r6
   285e8:	ldr	r0, [sp, #12]
   285ec:	mov	r1, sl
   285f0:	bl	227a0 <__assert_fail@plt+0x10bfc>
   285f4:	mov	r7, r0
   285f8:	mov	r0, r6
   285fc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28600:	cmp	r7, #0
   28604:	beq	28224 <__assert_fail@plt+0x16680>
   28608:	mov	r3, #0
   2860c:	str	r3, [sp, #24]
   28610:	b	28590 <__assert_fail@plt+0x169ec>
   28614:	mov	r2, r5
   28618:	mov	r1, r4
   2861c:	add	r0, sp, #148	; 0x94
   28620:	bl	267d0 <__assert_fail@plt+0x14c2c>
   28624:	cmp	r0, #0
   28628:	mov	fp, r0
   2862c:	str	r0, [sp, #124]	; 0x7c
   28630:	bne	27a84 <__assert_fail@plt+0x15ee0>
   28634:	ldrb	r3, [sl, #52]	; 0x34
   28638:	b	28578 <__assert_fail@plt+0x169d4>
   2863c:	cmp	r5, r3
   28640:	ldrne	r3, [r7, r3, lsl #2]
   28644:	moveq	r3, r6
   28648:	cmp	r5, r0
   2864c:	moveq	r0, r6
   28650:	str	r3, [r2]
   28654:	ldrne	r0, [r7, r0, lsl #2]
   28658:	b	28304 <__assert_fail@plt+0x16760>
   2865c:	ldr	r2, [sp, #32]
   28660:	ldrb	r3, [r9, #88]	; 0x58
   28664:	ldr	r2, [r2]
   28668:	tst	r3, #1
   2866c:	str	r2, [sp, #16]
   28670:	beq	28cd0 <__assert_fail@plt+0x1712c>
   28674:	ldr	r3, [r9, #76]	; 0x4c
   28678:	cmp	r3, r5
   2867c:	ble	28cd0 <__assert_fail@plt+0x1712c>
   28680:	add	r1, sp, #296	; 0x128
   28684:	mov	r2, #2
   28688:	mov	r3, #16
   2868c:	mov	r0, #48	; 0x30
   28690:	str	r1, [sp, #20]
   28694:	str	r5, [sp, #136]	; 0x88
   28698:	str	r2, [sp, #140]	; 0x8c
   2869c:	str	r5, [sp, #144]	; 0x90
   286a0:	str	r5, [sp, #284]	; 0x11c
   286a4:	str	r3, [sp, #288]	; 0x120
   286a8:	str	r1, [sp, #292]	; 0x124
   286ac:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   286b0:	cmp	r0, #0
   286b4:	str	r0, [sp, #144]	; 0x90
   286b8:	beq	28434 <__assert_fail@plt+0x16890>
   286bc:	ldr	r1, [sp, #16]
   286c0:	add	r2, sp, #124	; 0x7c
   286c4:	ldr	r3, [sp, #284]	; 0x11c
   286c8:	str	r2, [sp, #28]
   286cc:	ldr	sl, [r1, #72]	; 0x48
   286d0:	str	r5, [sp, #124]	; 0x7c
   286d4:	ldr	r1, [sp, #472]	; 0x1d8
   286d8:	str	r5, [sp, #128]	; 0x80
   286dc:	str	r5, [sp, #132]	; 0x84
   286e0:	cmp	r3, r1
   286e4:	add	r3, sp, #136	; 0x88
   286e8:	str	r3, [sp, #12]
   286ec:	bcc	28d1c <__assert_fail@plt+0x17178>
   286f0:	ldr	r3, [sp, #472]	; 0x1d8
   286f4:	str	r3, [sp, #284]	; 0x11c
   286f8:	ldr	r0, [sp, #292]	; 0x124
   286fc:	ldr	r3, [sp, #472]	; 0x1d8
   28700:	ldr	r1, [sp, #476]	; 0x1dc
   28704:	str	r0, [sp, #32]
   28708:	lsl	r2, r3, #3
   2870c:	lsl	r3, r3, #4
   28710:	mov	r4, r1
   28714:	str	r2, [sp, #40]	; 0x28
   28718:	str	r3, [sp, #48]	; 0x30
   2871c:	bl	11784 <memcpy@plt>
   28720:	ldr	r5, [r4], #4
   28724:	str	r9, [sp, #24]
   28728:	ldr	fp, [sp, #472]	; 0x1d8
   2872c:	str	r4, [sp, #44]	; 0x2c
   28730:	str	r5, [sp, #120]	; 0x78
   28734:	ldr	r3, [sp, #476]	; 0x1dc
   28738:	ldr	r3, [r3, #4]
   2873c:	cmp	r5, r3
   28740:	bgt	28e10 <__assert_fail@plt+0x1726c>
   28744:	ldr	r2, [sp, #16]
   28748:	lsl	r4, sl, #3
   2874c:	mov	r6, sl
   28750:	ldr	r1, [r2]
   28754:	add	r0, r1, r4
   28758:	ldrb	r2, [r0, #4]
   2875c:	cmp	r2, #8
   28760:	beq	28974 <__assert_fail@plt+0x16dd0>
   28764:	cmp	r2, #9
   28768:	beq	289d8 <__assert_fail@plt+0x16e34>
   2876c:	cmp	r5, r3
   28770:	beq	288d0 <__assert_fail@plt+0x16d2c>
   28774:	ldr	r3, [sp, #12]
   28778:	cmp	r3, #0
   2877c:	beq	28798 <__assert_fail@plt+0x16bf4>
   28780:	mov	r2, sl
   28784:	add	r1, sp, #132	; 0x84
   28788:	ldr	r0, [sp, #128]	; 0x80
   2878c:	bl	21478 <__assert_fail@plt+0xf8d4>
   28790:	cmp	r0, #0
   28794:	bne	288e8 <__assert_fail@plt+0x16d44>
   28798:	ldr	r5, [sp, #232]	; 0xe8
   2879c:	ldr	r0, [r5]
   287a0:	add	r1, r0, r4
   287a4:	ldrb	r3, [r1, #4]
   287a8:	tst	r3, #8
   287ac:	beq	28848 <__assert_fail@plt+0x16ca4>
   287b0:	ldr	r5, [r5, #20]
   287b4:	add	r4, sl, sl, lsl #1
   287b8:	add	r1, sp, #132	; 0x84
   287bc:	mov	r2, sl
   287c0:	ldr	lr, [sp, #120]	; 0x78
   287c4:	ldr	r0, [sp, #128]	; 0x80
   287c8:	add	r4, r5, r4, lsl #2
   287cc:	ldr	ip, [sp, #248]	; 0xf8
   287d0:	ldr	r5, [ip, lr, lsl #2]
   287d4:	bl	21478 <__assert_fail@plt+0xf8d4>
   287d8:	cmp	r0, #0
   287dc:	beq	28b7c <__assert_fail@plt+0x16fd8>
   287e0:	ldr	r6, [r4, #4]
   287e4:	cmp	r6, #0
   287e8:	ble	28c44 <__assert_fail@plt+0x170a0>
   287ec:	ldr	r3, [r4, #8]
   287f0:	add	r8, r5, #12
   287f4:	mvn	sl, #0
   287f8:	mov	r4, #0
   287fc:	ldr	r7, [r5, #8]
   28800:	sub	r9, r3, #4
   28804:	ldr	r5, [r9, #4]!
   28808:	mov	r1, r8
   2880c:	mov	r0, r7
   28810:	add	r4, r4, #1
   28814:	mov	r2, r5
   28818:	bl	21478 <__assert_fail@plt+0xf8d4>
   2881c:	cmp	r0, #0
   28820:	beq	28830 <__assert_fail@plt+0x16c8c>
   28824:	cmn	sl, #1
   28828:	bne	28a30 <__assert_fail@plt+0x16e8c>
   2882c:	mov	sl, r5
   28830:	cmp	r4, r6
   28834:	bne	28804 <__assert_fail@plt+0x16c60>
   28838:	cmp	sl, #0
   2883c:	blt	28c3c <__assert_fail@plt+0x17098>
   28840:	ldr	r5, [sp, #120]	; 0x78
   28844:	b	28734 <__assert_fail@plt+0x16b90>
   28848:	ldrb	r2, [r1, #6]
   2884c:	tst	r2, #16
   28850:	bne	28b4c <__assert_fail@plt+0x16fa8>
   28854:	cmp	r3, #4
   28858:	beq	28bb0 <__assert_fail@plt+0x1700c>
   2885c:	ldr	r7, [sp, #120]	; 0x78
   28860:	mov	r2, r7
   28864:	add	r0, sp, #148	; 0x94
   28868:	bl	241d0 <__assert_fail@plt+0x1262c>
   2886c:	cmp	r0, #0
   28870:	beq	28c44 <__assert_fail@plt+0x170a0>
   28874:	ldr	r2, [r5, #12]
   28878:	add	r3, r7, #1
   2887c:	ldr	sl, [r2, r6, lsl #2]
   28880:	str	r3, [sp, #120]	; 0x78
   28884:	ldr	r2, [sp, #12]
   28888:	cmp	r2, #0
   2888c:	beq	288c4 <__assert_fail@plt+0x16d20>
   28890:	ldr	r2, [sp, #240]	; 0xf0
   28894:	cmp	r3, r2
   28898:	bgt	28c44 <__assert_fail@plt+0x170a0>
   2889c:	ldr	r2, [sp, #248]	; 0xf8
   288a0:	ldr	r3, [r2, r3, lsl #2]
   288a4:	cmp	r3, #0
   288a8:	beq	28c44 <__assert_fail@plt+0x170a0>
   288ac:	mov	r2, sl
   288b0:	add	r1, r3, #12
   288b4:	ldr	r0, [r3, #8]
   288b8:	bl	21478 <__assert_fail@plt+0xf8d4>
   288bc:	cmp	r0, #0
   288c0:	beq	28c44 <__assert_fail@plt+0x170a0>
   288c4:	mov	r3, #0
   288c8:	str	r3, [sp, #128]	; 0x80
   288cc:	b	28838 <__assert_fail@plt+0x16c94>
   288d0:	ldr	r3, [sp, #244]	; 0xf4
   288d4:	cmp	sl, r3
   288d8:	bne	28774 <__assert_fail@plt+0x16bd0>
   288dc:	ldr	r3, [sp, #12]
   288e0:	cmp	r3, #0
   288e4:	beq	28e7c <__assert_fail@plt+0x172d8>
   288e8:	ldr	r1, [sp, #44]	; 0x2c
   288ec:	mov	r3, #0
   288f0:	ldr	r2, [sp, #476]	; 0x1dc
   288f4:	ldr	r2, [r2, r3, lsl #3]
   288f8:	cmp	r2, #0
   288fc:	blt	2890c <__assert_fail@plt+0x16d68>
   28900:	ldr	r2, [r1, r3, lsl #3]
   28904:	cmn	r2, #1
   28908:	beq	289a4 <__assert_fail@plt+0x16e00>
   2890c:	add	r3, r3, #1
   28910:	cmp	fp, r3
   28914:	bne	288f0 <__assert_fail@plt+0x16d4c>
   28918:	ldr	r9, [sp, #24]
   2891c:	ldr	r0, [sp, #132]	; 0x84
   28920:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28924:	ldr	r3, [sp, #20]
   28928:	ldr	r0, [sp, #292]	; 0x124
   2892c:	cmp	r0, r3
   28930:	beq	28ea0 <__assert_fail@plt+0x172fc>
   28934:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28938:	ldr	r1, [sp, #20]
   2893c:	mov	r2, #0
   28940:	mov	r3, #16
   28944:	str	r2, [sp, #284]	; 0x11c
   28948:	str	r3, [sp, #288]	; 0x120
   2894c:	str	r1, [sp, #292]	; 0x124
   28950:	ldr	r1, [sp, #12]
   28954:	cmp	r1, r2
   28958:	beq	28e58 <__assert_fail@plt+0x172b4>
   2895c:	ldr	r0, [sp, #12]
   28960:	bl	22ccc <__assert_fail@plt+0x11128>
   28964:	ldr	r4, [sp, #248]	; 0xf8
   28968:	ldr	r3, [sp, #476]	; 0x1dc
   2896c:	ldr	r3, [r3]
   28970:	b	282c8 <__assert_fail@plt+0x16724>
   28974:	ldr	r2, [r1, sl, lsl #3]
   28978:	add	r2, r2, #1
   2897c:	cmp	fp, r2
   28980:	ble	2876c <__assert_fail@plt+0x16bc8>
   28984:	ldr	r3, [sp, #476]	; 0x1dc
   28988:	ldr	r1, [sp, #476]	; 0x1dc
   2898c:	add	r3, r3, r2, lsl #3
   28990:	str	r5, [r1, r2, lsl #3]
   28994:	mvn	r2, #0
   28998:	str	r2, [r3, #4]
   2899c:	ldr	r3, [r1, #4]
   289a0:	b	2876c <__assert_fail@plt+0x16bc8>
   289a4:	mov	r2, fp
   289a8:	ldr	r0, [sp, #12]
   289ac:	ldr	ip, [sp, #28]
   289b0:	ldr	r1, [sp, #32]
   289b4:	ldr	r3, [sp, #476]	; 0x1dc
   289b8:	stm	sp, {r1, ip}
   289bc:	add	r1, sp, #120	; 0x78
   289c0:	bl	21350 <__assert_fail@plt+0xf7ac>
   289c4:	subs	sl, r0, #0
   289c8:	blt	28918 <__assert_fail@plt+0x16d74>
   289cc:	mov	r6, sl
   289d0:	lsl	r4, sl, #3
   289d4:	b	28798 <__assert_fail@plt+0x16bf4>
   289d8:	ldr	r2, [r0]
   289dc:	add	r2, r2, #1
   289e0:	cmp	fp, r2
   289e4:	ble	2876c <__assert_fail@plt+0x16bc8>
   289e8:	ldr	r3, [sp, #476]	; 0x1dc
   289ec:	ldr	r1, [r3, r2, lsl #3]
   289f0:	add	r3, r3, r2, lsl #3
   289f4:	cmp	r5, r1
   289f8:	bgt	28dc0 <__assert_fail@plt+0x1721c>
   289fc:	ldrb	r1, [r0, #6]
   28a00:	tst	r1, #8
   28a04:	beq	28d3c <__assert_fail@plt+0x17198>
   28a08:	ldr	r1, [sp, #32]
   28a0c:	ldr	r2, [r1, r2, lsl #3]
   28a10:	cmn	r2, #1
   28a14:	beq	28d3c <__assert_fail@plt+0x17198>
   28a18:	ldr	r2, [sp, #40]	; 0x28
   28a1c:	ldr	r0, [sp, #476]	; 0x1dc
   28a20:	bl	11784 <memcpy@plt>
   28a24:	ldr	r3, [sp, #476]	; 0x1dc
   28a28:	ldr	r3, [r3, #4]
   28a2c:	b	2876c <__assert_fail@plt+0x16bc8>
   28a30:	add	r1, sp, #132	; 0x84
   28a34:	mov	r2, sl
   28a38:	ldr	r0, [sp, #128]	; 0x80
   28a3c:	bl	21478 <__assert_fail@plt+0xf8d4>
   28a40:	cmp	r0, #0
   28a44:	bne	28cc8 <__assert_fail@plt+0x17124>
   28a48:	ldr	r0, [sp, #12]
   28a4c:	cmp	r0, #0
   28a50:	beq	28838 <__assert_fail@plt+0x16c94>
   28a54:	ldr	r4, [r0]
   28a58:	ldmib	r0, {r1, r3}
   28a5c:	ldr	r6, [sp, #120]	; 0x78
   28a60:	add	r2, r4, #1
   28a64:	cmp	r2, r1
   28a68:	str	r2, [r0]
   28a6c:	beq	28de4 <__assert_fail@plt+0x17240>
   28a70:	add	r2, r4, r4, lsl #1
   28a74:	ldr	r0, [sp, #48]	; 0x30
   28a78:	lsl	r4, r2, #3
   28a7c:	str	r6, [r3, r2, lsl #3]
   28a80:	add	r6, r3, r4
   28a84:	str	r5, [r6, #4]
   28a88:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   28a8c:	ldr	r5, [sp, #12]
   28a90:	ldr	r3, [r5, #8]
   28a94:	str	r0, [r6, #8]
   28a98:	add	r3, r3, r4
   28a9c:	ldr	r0, [r3, #8]
   28aa0:	cmp	r0, #0
   28aa4:	beq	28af0 <__assert_fail@plt+0x16f4c>
   28aa8:	ldr	r6, [sp, #40]	; 0x28
   28aac:	ldr	r1, [sp, #476]	; 0x1dc
   28ab0:	mov	r2, r6
   28ab4:	bl	11784 <memcpy@plt>
   28ab8:	ldr	r3, [r5, #8]
   28abc:	mov	r2, r6
   28ac0:	ldr	r1, [sp, #32]
   28ac4:	add	r3, r3, r4
   28ac8:	ldr	r0, [r3, #8]
   28acc:	add	r0, r0, r6
   28ad0:	bl	11784 <memcpy@plt>
   28ad4:	ldr	r0, [r5, #8]
   28ad8:	ldr	r1, [sp, #28]
   28adc:	add	r0, r0, r4
   28ae0:	add	r0, r0, #12
   28ae4:	bl	220a0 <__assert_fail@plt+0x104fc>
   28ae8:	cmp	r0, #0
   28aec:	beq	28838 <__assert_fail@plt+0x16c94>
   28af0:	ldr	r9, [sp, #24]
   28af4:	ldr	r0, [sp, #132]	; 0x84
   28af8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28afc:	ldr	r3, [sp, #20]
   28b00:	ldr	r0, [sp, #292]	; 0x124
   28b04:	cmp	r0, r3
   28b08:	beq	28e68 <__assert_fail@plt+0x172c4>
   28b0c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28b10:	ldr	r1, [sp, #20]
   28b14:	mov	r2, #0
   28b18:	mov	r3, #16
   28b1c:	str	r2, [sp, #284]	; 0x11c
   28b20:	str	r3, [sp, #288]	; 0x120
   28b24:	str	r1, [sp, #292]	; 0x124
   28b28:	ldr	r1, [sp, #12]
   28b2c:	cmp	r1, r2
   28b30:	beq	28434 <__assert_fail@plt+0x16890>
   28b34:	mov	r3, #12
   28b38:	ldr	r0, [sp, #12]
   28b3c:	str	r3, [sp, #36]	; 0x24
   28b40:	bl	22ccc <__assert_fail@plt+0x11128>
   28b44:	ldr	r4, [sp, #248]	; 0xf8
   28b48:	b	28110 <__assert_fail@plt+0x1656c>
   28b4c:	ldr	ip, [sp, #120]	; 0x78
   28b50:	add	r3, sp, #148	; 0x94
   28b54:	mov	r2, sl
   28b58:	add	r1, r5, #128	; 0x80
   28b5c:	str	ip, [sp]
   28b60:	bl	25d74 <__assert_fail@plt+0x141d0>
   28b64:	subs	r7, r0, #0
   28b68:	bne	28db8 <__assert_fail@plt+0x17214>
   28b6c:	ldr	r1, [r5]
   28b70:	ldr	r7, [sp, #120]	; 0x78
   28b74:	add	r1, r1, r4
   28b78:	b	28860 <__assert_fail@plt+0x16cbc>
   28b7c:	mov	r1, sl
   28b80:	ldr	r0, [sp, #28]
   28b84:	bl	20ea4 <__assert_fail@plt+0xf300>
   28b88:	cmp	r0, #0
   28b8c:	bne	287e0 <__assert_fail@plt+0x16c3c>
   28b90:	ldr	r9, [sp, #24]
   28b94:	ldr	r0, [sp, #132]	; 0x84
   28b98:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28b9c:	ldr	r3, [sp, #20]
   28ba0:	ldr	r0, [sp, #292]	; 0x124
   28ba4:	cmp	r0, r3
   28ba8:	bne	28b0c <__assert_fail@plt+0x16f68>
   28bac:	b	28b10 <__assert_fail@plt+0x16f6c>
   28bb0:	ldr	r3, [r1]
   28bb4:	add	r3, r3, #1
   28bb8:	cmp	fp, r3
   28bbc:	ble	28d4c <__assert_fail@plt+0x171a8>
   28bc0:	ldr	r2, [sp, #476]	; 0x1dc
   28bc4:	ldr	r1, [sp, #476]	; 0x1dc
   28bc8:	add	r2, r2, r3, lsl #3
   28bcc:	ldr	r0, [r1, r3, lsl #3]
   28bd0:	ldr	r3, [sp, #12]
   28bd4:	cmp	r3, #0
   28bd8:	ldr	r3, [r2, #4]
   28bdc:	sub	r7, r3, r0
   28be0:	beq	28db0 <__assert_fail@plt+0x1720c>
   28be4:	cmn	r0, #1
   28be8:	beq	28c44 <__assert_fail@plt+0x170a0>
   28bec:	cmn	r3, #1
   28bf0:	beq	28c44 <__assert_fail@plt+0x170a0>
   28bf4:	cmp	r7, #0
   28bf8:	beq	28d58 <__assert_fail@plt+0x171b4>
   28bfc:	ldr	r4, [sp, #120]	; 0x78
   28c00:	ldr	r1, [sp, #152]	; 0x98
   28c04:	ldr	r3, [sp, #176]	; 0xb0
   28c08:	sub	r3, r3, r4
   28c0c:	cmp	r7, r3
   28c10:	bgt	28c44 <__assert_fail@plt+0x170a0>
   28c14:	add	r0, r1, r0
   28c18:	mov	r2, r7
   28c1c:	add	r1, r1, r4
   28c20:	bl	117c0 <memcmp@plt>
   28c24:	cmp	r0, #0
   28c28:	bne	28c44 <__assert_fail@plt+0x170a0>
   28c2c:	ldr	r2, [r5, #12]
   28c30:	add	r3, r4, r7
   28c34:	ldr	sl, [r2, sl, lsl #2]
   28c38:	b	28880 <__assert_fail@plt+0x16cdc>
   28c3c:	cmn	sl, #2
   28c40:	beq	28b90 <__assert_fail@plt+0x16fec>
   28c44:	mov	r2, fp
   28c48:	ldr	r0, [sp, #12]
   28c4c:	ldr	ip, [sp, #28]
   28c50:	ldr	r1, [sp, #32]
   28c54:	ldr	r3, [sp, #476]	; 0x1dc
   28c58:	stm	sp, {r1, ip}
   28c5c:	add	r1, sp, #120	; 0x78
   28c60:	bl	21350 <__assert_fail@plt+0xf7ac>
   28c64:	subs	sl, r0, #0
   28c68:	bge	28840 <__assert_fail@plt+0x16c9c>
   28c6c:	ldr	r9, [sp, #24]
   28c70:	ldr	r0, [sp, #132]	; 0x84
   28c74:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28c78:	ldr	r3, [sp, #20]
   28c7c:	ldr	r0, [sp, #292]	; 0x124
   28c80:	cmp	r0, r3
   28c84:	beq	28c8c <__assert_fail@plt+0x170e8>
   28c88:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28c8c:	ldr	r1, [sp, #20]
   28c90:	mov	r2, #0
   28c94:	mov	r3, #16
   28c98:	str	r2, [sp, #284]	; 0x11c
   28c9c:	str	r3, [sp, #288]	; 0x120
   28ca0:	str	r1, [sp, #292]	; 0x124
   28ca4:	ldr	r1, [sp, #12]
   28ca8:	cmp	r1, r2
   28cac:	beq	27cb0 <__assert_fail@plt+0x1610c>
   28cb0:	mov	r3, #1
   28cb4:	ldr	r0, [sp, #12]
   28cb8:	str	r3, [sp, #36]	; 0x24
   28cbc:	bl	22ccc <__assert_fail@plt+0x11128>
   28cc0:	ldr	r4, [sp, #248]	; 0xf8
   28cc4:	b	28110 <__assert_fail@plt+0x1656c>
   28cc8:	mov	sl, r5
   28ccc:	b	28838 <__assert_fail@plt+0x16c94>
   28cd0:	ldr	r2, [sp, #16]
   28cd4:	mov	r3, #0
   28cd8:	add	ip, sp, #296	; 0x128
   28cdc:	add	r0, sp, #124	; 0x7c
   28ce0:	mov	r1, #2
   28ce4:	str	r3, [sp, #12]
   28ce8:	str	ip, [sp, #20]
   28cec:	str	r0, [sp, #28]
   28cf0:	ldr	sl, [r2, #72]	; 0x48
   28cf4:	mov	r2, #16
   28cf8:	str	r3, [sp, #124]	; 0x7c
   28cfc:	str	r3, [sp, #128]	; 0x80
   28d00:	str	r3, [sp, #132]	; 0x84
   28d04:	str	r3, [sp, #136]	; 0x88
   28d08:	str	r1, [sp, #140]	; 0x8c
   28d0c:	str	r3, [sp, #144]	; 0x90
   28d10:	str	r3, [sp, #284]	; 0x11c
   28d14:	str	r2, [sp, #288]	; 0x120
   28d18:	str	ip, [sp, #292]	; 0x124
   28d1c:	mov	r3, #8
   28d20:	add	r0, sp, #284	; 0x11c
   28d24:	ldr	r2, [sp, #20]
   28d28:	ldr	r1, [sp, #472]	; 0x1d8
   28d2c:	bl	30930 <__assert_fail@plt+0x1ed8c>
   28d30:	cmp	r0, #0
   28d34:	bne	286f8 <__assert_fail@plt+0x16b54>
   28d38:	b	28b9c <__assert_fail@plt+0x16ff8>
   28d3c:	str	r5, [r3, #4]
   28d40:	ldr	r3, [sp, #476]	; 0x1dc
   28d44:	ldr	r3, [r3, #4]
   28d48:	b	2876c <__assert_fail@plt+0x16bc8>
   28d4c:	ldr	r3, [sp, #12]
   28d50:	cmp	r3, #0
   28d54:	bne	28c44 <__assert_fail@plt+0x170a0>
   28d58:	mov	r1, sl
   28d5c:	ldr	r0, [sp, #28]
   28d60:	bl	20ea4 <__assert_fail@plt+0xf300>
   28d64:	cmp	r0, #0
   28d68:	beq	28b90 <__assert_fail@plt+0x16fec>
   28d6c:	ldr	r3, [r5, #20]
   28d70:	add	sl, sl, sl, lsl #1
   28d74:	ldr	r7, [sp, #120]	; 0x78
   28d78:	ldr	r1, [sp, #248]	; 0xf8
   28d7c:	add	r3, r3, sl, lsl #2
   28d80:	ldr	r2, [r3, #8]
   28d84:	ldr	r3, [r1, r7, lsl #2]
   28d88:	ldr	sl, [r2]
   28d8c:	add	r1, r3, #12
   28d90:	ldr	r0, [r3, #8]
   28d94:	mov	r2, sl
   28d98:	bl	21478 <__assert_fail@plt+0xf8d4>
   28d9c:	cmp	r0, #0
   28da0:	bne	28838 <__assert_fail@plt+0x16c94>
   28da4:	ldr	r1, [r5]
   28da8:	add	r1, r1, r4
   28dac:	b	28860 <__assert_fail@plt+0x16cbc>
   28db0:	cmp	r7, #0
   28db4:	beq	28d58 <__assert_fail@plt+0x171b4>
   28db8:	ldr	r4, [sp, #120]	; 0x78
   28dbc:	b	28c2c <__assert_fail@plt+0x17088>
   28dc0:	str	r5, [r3, #4]
   28dc4:	ldr	r0, [sp, #32]
   28dc8:	ldr	r2, [sp, #40]	; 0x28
   28dcc:	ldr	r1, [sp, #476]	; 0x1dc
   28dd0:	bl	11784 <memcpy@plt>
   28dd4:	ldr	r5, [sp, #120]	; 0x78
   28dd8:	ldr	r3, [sp, #476]	; 0x1dc
   28ddc:	ldr	r3, [r3, #4]
   28de0:	b	2876c <__assert_fail@plt+0x16bc8>
   28de4:	mov	r1, #48	; 0x30
   28de8:	mov	r0, r3
   28dec:	mul	r1, r1, r2
   28df0:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   28df4:	subs	r3, r0, #0
   28df8:	beq	28af0 <__assert_fail@plt+0x16f4c>
   28dfc:	ldr	r1, [sp, #12]
   28e00:	ldr	r2, [r1, #4]
   28e04:	lsl	r2, r2, #1
   28e08:	strd	r2, [r1, #4]
   28e0c:	b	28a70 <__assert_fail@plt+0x16ecc>
   28e10:	ldr	r9, [sp, #24]
   28e14:	ldr	r0, [sp, #132]	; 0x84
   28e18:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28e1c:	ldr	r3, [sp, #20]
   28e20:	ldr	r0, [sp, #292]	; 0x124
   28e24:	cmp	r0, r3
   28e28:	beq	28e30 <__assert_fail@plt+0x1728c>
   28e2c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28e30:	ldr	r0, [sp, #12]
   28e34:	mov	r2, #0
   28e38:	ldr	r3, [sp, #20]
   28e3c:	str	r2, [sp, #284]	; 0x11c
   28e40:	cmp	r0, r2
   28e44:	str	r3, [sp, #292]	; 0x124
   28e48:	mov	r3, #16
   28e4c:	str	r3, [sp, #288]	; 0x120
   28e50:	beq	28e58 <__assert_fail@plt+0x172b4>
   28e54:	bl	22ccc <__assert_fail@plt+0x11128>
   28e58:	ldr	r4, [sp, #248]	; 0xf8
   28e5c:	ldr	r3, [sp, #476]	; 0x1dc
   28e60:	ldr	r3, [r3]
   28e64:	b	282c8 <__assert_fail@plt+0x16724>
   28e68:	mov	r2, #0
   28e6c:	mov	r3, #16
   28e70:	str	r2, [sp, #284]	; 0x11c
   28e74:	str	r3, [sp, #288]	; 0x120
   28e78:	b	28b34 <__assert_fail@plt+0x16f90>
   28e7c:	ldr	r9, [sp, #24]
   28e80:	ldr	r0, [sp, #132]	; 0x84
   28e84:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28e88:	ldr	r3, [sp, #20]
   28e8c:	ldr	r0, [sp, #292]	; 0x124
   28e90:	cmp	r0, r3
   28e94:	beq	28e58 <__assert_fail@plt+0x172b4>
   28e98:	bl	17ac8 <__assert_fail@plt+0x5f24>
   28e9c:	b	28e58 <__assert_fail@plt+0x172b4>
   28ea0:	mov	r2, #0
   28ea4:	mov	r3, #16
   28ea8:	str	r2, [sp, #284]	; 0x11c
   28eac:	str	r3, [sp, #288]	; 0x120
   28eb0:	b	2895c <__assert_fail@plt+0x16db8>
   28eb4:	ldr	r9, [sp, #68]	; 0x44
   28eb8:	b	28264 <__assert_fail@plt+0x166c0>
   28ebc:	ldr	r1, [sp, #172]	; 0xac
   28ec0:	sub	r2, r5, r1
   28ec4:	ldr	r0, [sp, #176]	; 0xb0
   28ec8:	mov	r3, r4
   28ecc:	cmp	r0, r2
   28ed0:	bls	28ee0 <__assert_fail@plt+0x1733c>
   28ed4:	ldr	r3, [sp, #152]	; 0x98
   28ed8:	ldrb	r3, [r3, r2]
   28edc:	add	r3, r4, r3
   28ee0:	ldrb	r3, [r3]
   28ee4:	cmp	r3, #0
   28ee8:	bne	27818 <__assert_fail@plt+0x15c74>
   28eec:	ldr	r2, [sp, #76]	; 0x4c
   28ef0:	ldr	r3, [sp, #96]	; 0x60
   28ef4:	add	r5, r5, r3
   28ef8:	ldr	r3, [sp, #64]	; 0x40
   28efc:	str	r5, [sp, #116]	; 0x74
   28f00:	cmp	r5, r3
   28f04:	movle	r3, #0
   28f08:	movgt	r3, #1
   28f0c:	cmp	r5, r2
   28f10:	orrlt	r3, r3, #1
   28f14:	cmp	r3, #0
   28f18:	beq	28468 <__assert_fail@plt+0x168c4>
   28f1c:	b	27cac <__assert_fail@plt+0x16108>
   28f20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28f24:	mov	r4, r3
   28f28:	ldr	r3, [r3, #4]
   28f2c:	ldr	r5, [r0, #84]	; 0x54
   28f30:	strd	r6, [sp, #8]
   28f34:	strd	sl, [sp, #24]
   28f38:	mov	fp, r2
   28f3c:	mov	sl, r1
   28f40:	str	lr, [sp, #32]
   28f44:	lsl	lr, r2, #2
   28f48:	ldr	r2, [r0, #100]	; 0x64
   28f4c:	strd	r8, [sp, #16]
   28f50:	sub	sp, sp, #108	; 0x6c
   28f54:	str	lr, [sp, #24]
   28f58:	ldr	r1, [r2, fp, lsl #2]
   28f5c:	add	r2, r2, lr
   28f60:	strd	r0, [sp, #16]
   28f64:	mov	r0, #0
   28f68:	cmp	r1, r0
   28f6c:	str	r0, [sp, #72]	; 0x48
   28f70:	beq	293c8 <__assert_fail@plt+0x17824>
   28f74:	cmp	r3, #0
   28f78:	bne	28fb4 <__assert_fail@plt+0x17410>
   28f7c:	ldr	r1, [sl]
   28f80:	str	r3, [r1, fp, lsl #2]
   28f84:	ldr	r3, [r2]
   28f88:	ldrb	r3, [r3, #52]	; 0x34
   28f8c:	ands	r3, r3, #64	; 0x40
   28f90:	bne	290d0 <__assert_fail@plt+0x1752c>
   28f94:	mov	r0, r3
   28f98:	add	sp, sp, #108	; 0x6c
   28f9c:	ldrd	r4, [sp]
   28fa0:	ldrd	r6, [sp, #8]
   28fa4:	ldrd	r8, [sp, #16]
   28fa8:	ldrd	sl, [sp, #24]
   28fac:	add	sp, sp, #32
   28fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   28fb4:	mov	r2, r4
   28fb8:	mov	r1, r5
   28fbc:	str	r0, [sp, #76]	; 0x4c
   28fc0:	add	r0, sp, #76	; 0x4c
   28fc4:	bl	2257c <__assert_fail@plt+0x109d8>
   28fc8:	ldr	r3, [sp, #76]	; 0x4c
   28fcc:	mov	r8, r0
   28fd0:	cmp	r3, #0
   28fd4:	bne	28f94 <__assert_fail@plt+0x173f0>
   28fd8:	mov	r6, r0
   28fdc:	ldr	r7, [r6, #28]!
   28fe0:	cmp	r7, #0
   28fe4:	bne	29058 <__assert_fail@plt+0x174b4>
   28fe8:	ldr	r2, [r4, #4]
   28fec:	lsl	r0, r2, #2
   28ff0:	strd	r2, [r8, #28]
   28ff4:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   28ff8:	cmp	r0, #0
   28ffc:	str	r0, [r8, #36]	; 0x24
   29000:	beq	29050 <__assert_fail@plt+0x174ac>
   29004:	ldr	r3, [r4, #4]
   29008:	str	r7, [sp, #76]	; 0x4c
   2900c:	cmp	r3, #0
   29010:	bgt	29024 <__assert_fail@plt+0x17480>
   29014:	b	29058 <__assert_fail@plt+0x174b4>
   29018:	ldr	r3, [r4, #4]
   2901c:	cmp	r7, r3
   29020:	bge	29058 <__assert_fail@plt+0x174b4>
   29024:	ldr	r3, [r4, #8]
   29028:	mov	r0, r6
   2902c:	ldr	r1, [r5, #28]
   29030:	ldr	r3, [r3, r7, lsl #2]
   29034:	add	r7, r7, #1
   29038:	add	r3, r3, r3, lsl #1
   2903c:	add	r1, r1, r3, lsl #2
   29040:	bl	22d3c <__assert_fail@plt+0x11198>
   29044:	cmp	r0, #0
   29048:	str	r0, [sp, #76]	; 0x4c
   2904c:	beq	29018 <__assert_fail@plt+0x17474>
   29050:	mov	r3, #12
   29054:	b	28f94 <__assert_fail@plt+0x173f0>
   29058:	ldr	r3, [sp, #20]
   2905c:	mov	r2, r6
   29060:	mov	r0, r4
   29064:	add	r3, r3, #4
   29068:	mov	r1, r3
   2906c:	str	r3, [sp, #36]	; 0x24
   29070:	bl	219fc <__assert_fail@plt+0xfe58>
   29074:	cmp	r0, #0
   29078:	str	r0, [sp, #72]	; 0x48
   2907c:	bne	29694 <__assert_fail@plt+0x17af0>
   29080:	ldr	r3, [sl, #20]
   29084:	cmp	r3, #0
   29088:	bne	29494 <__assert_fail@plt+0x178f0>
   2908c:	mov	r2, r4
   29090:	mov	r1, r5
   29094:	ldr	r4, [sl]
   29098:	add	r0, sp, #72	; 0x48
   2909c:	bl	2257c <__assert_fail@plt+0x109d8>
   290a0:	ldr	r3, [sp, #72]	; 0x48
   290a4:	str	r0, [r4, fp, lsl #2]
   290a8:	cmp	r3, #0
   290ac:	bne	28f94 <__assert_fail@plt+0x173f0>
   290b0:	ldr	r3, [sp, #16]
   290b4:	ldr	r2, [r3, #100]	; 0x64
   290b8:	ldr	r3, [sp, #24]
   290bc:	add	r2, r2, r3
   290c0:	ldr	r3, [r2]
   290c4:	ldrb	r3, [r3, #52]	; 0x34
   290c8:	ands	r3, r3, #64	; 0x40
   290cc:	beq	28f94 <__assert_fail@plt+0x173f0>
   290d0:	ldr	r3, [sp, #16]
   290d4:	mov	r8, #0
   290d8:	ldr	ip, [r3, #108]	; 0x6c
   290dc:	mov	r3, ip
   290e0:	cmp	r8, r3
   290e4:	bge	29144 <__assert_fail@plt+0x175a0>
   290e8:	ldr	r1, [sp, #16]
   290ec:	add	r2, r8, r3
   290f0:	add	r2, r2, r2, lsr #31
   290f4:	asr	r2, r2, #1
   290f8:	ldr	r0, [r1, #116]	; 0x74
   290fc:	add	r1, r2, r2, lsl #1
   29100:	add	r1, r0, r1, lsl #3
   29104:	ldr	r1, [r1, #4]
   29108:	cmp	fp, r1
   2910c:	ble	29134 <__assert_fail@plt+0x17590>
   29110:	b	29408 <__assert_fail@plt+0x17864>
   29114:	asr	r3, r3, #1
   29118:	add	r1, r3, r3, lsl #1
   2911c:	mov	lr, r3
   29120:	add	r1, r0, r1, lsl #3
   29124:	ldr	r1, [r1, #4]
   29128:	cmp	fp, r1
   2912c:	bgt	29410 <__assert_fail@plt+0x1786c>
   29130:	mov	r2, r3
   29134:	add	r3, r8, r2
   29138:	cmp	r8, r2
   2913c:	add	r3, r3, r3, lsr #31
   29140:	blt	29114 <__assert_fail@plt+0x17570>
   29144:	cmp	ip, r8
   29148:	ble	29400 <__assert_fail@plt+0x1785c>
   2914c:	ldr	r1, [sp, #16]
   29150:	add	r2, r8, r8, lsl #1
   29154:	lsl	r2, r2, #3
   29158:	ldr	r3, [r1, #116]	; 0x74
   2915c:	str	r2, [sp, #48]	; 0x30
   29160:	add	r3, r3, r2
   29164:	ldr	r3, [r3, #4]
   29168:	cmp	fp, r3
   2916c:	bne	29400 <__assert_fail@plt+0x1785c>
   29170:	cmn	r8, #1
   29174:	beq	29400 <__assert_fail@plt+0x1785c>
   29178:	ldr	r3, [sp, #20]
   2917c:	ldr	r9, [r1, #84]	; 0x54
   29180:	ldr	r0, [r3, #8]
   29184:	mov	r3, #0
   29188:	str	r3, [sp, #76]	; 0x4c
   2918c:	cmp	r0, r3
   29190:	ble	29400 <__assert_fail@plt+0x1785c>
   29194:	add	r2, sl, #24
   29198:	str	r2, [sp, #36]	; 0x24
   2919c:	add	r2, sl, #20
   291a0:	str	fp, [sp, #44]	; 0x2c
   291a4:	mov	fp, r3
   291a8:	str	r2, [sp, #40]	; 0x28
   291ac:	str	r8, [sp, #56]	; 0x38
   291b0:	b	291c8 <__assert_fail@plt+0x17624>
   291b4:	cmp	r3, #4
   291b8:	beq	29204 <__assert_fail@plt+0x17660>
   291bc:	add	fp, fp, #1
   291c0:	cmp	fp, r0
   291c4:	bge	293f4 <__assert_fail@plt+0x17850>
   291c8:	ldr	r3, [sp, #20]
   291cc:	ldr	r2, [sl, #8]
   291d0:	ldr	r1, [r3, #12]
   291d4:	ldr	r3, [r9]
   291d8:	ldr	r6, [r1, fp, lsl #2]
   291dc:	add	r3, r3, r6, lsl #3
   291e0:	cmp	r6, r2
   291e4:	ldrb	r3, [r3, #4]
   291e8:	bne	291b4 <__assert_fail@plt+0x17610>
   291ec:	ldr	r2, [sl, #12]
   291f0:	ldr	r1, [sp, #44]	; 0x2c
   291f4:	cmp	r1, r2
   291f8:	beq	291bc <__assert_fail@plt+0x17618>
   291fc:	cmp	r3, #4
   29200:	bne	291bc <__assert_fail@plt+0x17618>
   29204:	ldr	r3, [sp, #16]
   29208:	lsl	r2, r6, #2
   2920c:	str	fp, [sp, #60]	; 0x3c
   29210:	ldr	fp, [sp, #44]	; 0x2c
   29214:	ldr	r7, [sp, #56]	; 0x38
   29218:	ldr	r4, [r3, #116]	; 0x74
   2921c:	add	r3, r6, r6, lsl #1
   29220:	lsl	r3, r3, #2
   29224:	strd	r2, [sp, #28]
   29228:	add	r2, sl, #16
   2922c:	ldr	r3, [sp, #48]	; 0x30
   29230:	str	r2, [sp, #52]	; 0x34
   29234:	add	r4, r4, r3
   29238:	b	2938c <__assert_fail@plt+0x177e8>
   2923c:	ldr	r3, [r9, #12]
   29240:	ldr	r2, [sp, #28]
   29244:	ldr	r8, [r3, r2]
   29248:	ldr	r3, [sl, #12]
   2924c:	cmp	r5, r3
   29250:	bgt	29378 <__assert_fail@plt+0x177d4>
   29254:	ldr	r3, [sl]
   29258:	ldr	r3, [r3, r5, lsl #2]
   2925c:	cmp	r3, #0
   29260:	beq	29378 <__assert_fail@plt+0x177d4>
   29264:	mov	r2, r8
   29268:	add	r1, r3, #12
   2926c:	ldr	r0, [r3, #8]
   29270:	bl	21478 <__assert_fail@plt+0xf8d4>
   29274:	cmp	r0, #0
   29278:	beq	29378 <__assert_fail@plt+0x177d4>
   2927c:	mov	r3, r6
   29280:	str	fp, [sp]
   29284:	str	r8, [sp, #4]
   29288:	str	r5, [sp, #8]
   2928c:	ldr	r0, [sp, #16]
   29290:	ldr	r2, [sp, #36]	; 0x24
   29294:	ldr	r1, [sp, #40]	; 0x28
   29298:	bl	2174c <__assert_fail@plt+0xfba8>
   2929c:	cmp	r0, #0
   292a0:	bne	29378 <__assert_fail@plt+0x177d4>
   292a4:	ldr	r3, [sp, #76]	; 0x4c
   292a8:	cmp	r3, #0
   292ac:	beq	2941c <__assert_fail@plt+0x17878>
   292b0:	add	r4, sp, #76	; 0x4c
   292b4:	add	r5, sp, #92	; 0x5c
   292b8:	mov	r0, r5
   292bc:	mov	r1, r7
   292c0:	str	r6, [sp, #84]	; 0x54
   292c4:	str	fp, [sp, #88]	; 0x58
   292c8:	bl	20ea4 <__assert_fail@plt+0xf300>
   292cc:	cmp	r0, #0
   292d0:	beq	296d4 <__assert_fail@plt+0x17b30>
   292d4:	mov	r1, r4
   292d8:	ldr	r0, [sp, #16]
   292dc:	ldr	r2, [sp, #24]
   292e0:	ldr	r3, [sp, #76]	; 0x4c
   292e4:	ldr	r4, [r3, r2]
   292e8:	bl	27114 <__assert_fail@plt+0x15570>
   292ec:	cmp	r0, #0
   292f0:	bne	29460 <__assert_fail@plt+0x178bc>
   292f4:	ldr	r1, [sl, #4]
   292f8:	ldr	r3, [sp, #76]	; 0x4c
   292fc:	cmp	r1, #0
   29300:	beq	29320 <__assert_fail@plt+0x1777c>
   29304:	mov	r2, r3
   29308:	mov	r0, r9
   2930c:	add	r3, fp, #1
   29310:	bl	227a0 <__assert_fail@plt+0x10bfc>
   29314:	cmp	r0, #0
   29318:	bne	29460 <__assert_fail@plt+0x178bc>
   2931c:	ldr	r3, [sp, #76]	; 0x4c
   29320:	mov	r2, r7
   29324:	ldr	r1, [sp, #24]
   29328:	str	r4, [r3, r1]
   2932c:	add	r1, sp, #100	; 0x64
   29330:	ldr	r4, [sp, #96]	; 0x60
   29334:	mov	r0, r4
   29338:	bl	21478 <__assert_fail@plt+0xf8d4>
   2933c:	sub	r2, r0, #1
   29340:	cmp	r4, r2
   29344:	movgt	r3, #0
   29348:	movle	r3, #1
   2934c:	orrs	r3, r3, r2, lsr #31
   29350:	bne	29368 <__assert_fail@plt+0x177c4>
   29354:	sub	r4, r4, #1
   29358:	add	r1, sp, #100	; 0x64
   2935c:	add	r0, sp, #96	; 0x60
   29360:	str	r4, [sp, #96]	; 0x60
   29364:	bl	21618 <__assert_fail@plt+0xfa74>
   29368:	ldr	r3, [sp, #16]
   2936c:	ldr	r4, [r3, #116]	; 0x74
   29370:	add	r3, r7, r7, lsl #1
   29374:	add	r4, r4, r3, lsl #3
   29378:	ldrb	r3, [r4, #20]
   2937c:	add	r7, r7, #1
   29380:	add	r4, r4, #24
   29384:	cmp	r3, #0
   29388:	beq	29484 <__assert_fail@plt+0x178e0>
   2938c:	ldr	r3, [r4]
   29390:	cmp	r6, r3
   29394:	bne	29378 <__assert_fail@plt+0x177d4>
   29398:	ldr	r3, [r4, #8]
   2939c:	ldr	r5, [r4, #12]
   293a0:	sub	r5, r5, r3
   293a4:	cmp	r5, #0
   293a8:	add	r5, fp, r5
   293ac:	bne	2923c <__assert_fail@plt+0x17698>
   293b0:	ldr	r3, [r9, #20]
   293b4:	ldr	r2, [sp, #32]
   293b8:	add	r3, r3, r2
   293bc:	ldr	r3, [r3, #8]
   293c0:	ldr	r8, [r3]
   293c4:	b	29248 <__assert_fail@plt+0x176a4>
   293c8:	ldr	r6, [sl]
   293cc:	cmp	r3, r0
   293d0:	streq	r3, [r6, fp, lsl #2]
   293d4:	beq	28f94 <__assert_fail@plt+0x173f0>
   293d8:	mov	r2, r4
   293dc:	mov	r1, r5
   293e0:	add	r0, sp, #72	; 0x48
   293e4:	bl	2257c <__assert_fail@plt+0x109d8>
   293e8:	str	r0, [r6, fp, lsl #2]
   293ec:	ldr	r3, [sp, #72]	; 0x48
   293f0:	b	28f94 <__assert_fail@plt+0x173f0>
   293f4:	ldr	r3, [sp, #76]	; 0x4c
   293f8:	cmp	r3, #0
   293fc:	bne	296e4 <__assert_fail@plt+0x17b40>
   29400:	mov	r3, #0
   29404:	b	28f94 <__assert_fail@plt+0x173f0>
   29408:	mov	lr, r2
   2940c:	mov	r2, r3
   29410:	add	r8, lr, #1
   29414:	mov	r3, r2
   29418:	b	290e0 <__assert_fail@plt+0x1753c>
   2941c:	ldrd	r2, [sl]
   29420:	add	r4, sp, #76	; 0x4c
   29424:	add	r5, sp, #92	; 0x5c
   29428:	mov	r0, r5
   2942c:	ldr	ip, [sl, #24]
   29430:	ldr	r1, [sp, #52]	; 0x34
   29434:	strd	r2, [sp, #76]	; 0x4c
   29438:	ldrd	r2, [sl, #16]
   2943c:	str	ip, [r4, #24]
   29440:	strd	r2, [sp, #64]	; 0x40
   29444:	ldrd	r2, [sl, #8]
   29448:	strd	r2, [r4, #8]
   2944c:	ldrd	r2, [sp, #64]	; 0x40
   29450:	strd	r2, [r4, #16]
   29454:	bl	220a0 <__assert_fail@plt+0x104fc>
   29458:	cmp	r0, #0
   2945c:	beq	292b8 <__assert_fail@plt+0x17714>
   29460:	mov	r3, r0
   29464:	ldr	r2, [sp, #76]	; 0x4c
   29468:	cmp	r2, #0
   2946c:	beq	28f94 <__assert_fail@plt+0x173f0>
   29470:	ldr	r0, [sp, #100]	; 0x64
   29474:	str	r3, [sp, #16]
   29478:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2947c:	ldr	r3, [sp, #16]
   29480:	b	28f94 <__assert_fail@plt+0x173f0>
   29484:	ldr	r3, [sp, #20]
   29488:	ldr	fp, [sp, #60]	; 0x3c
   2948c:	ldr	r0, [r3, #8]
   29490:	b	291bc <__assert_fail@plt+0x17618>
   29494:	ldr	r3, [sp, #16]
   29498:	ldr	r3, [r3, #116]	; 0x74
   2949c:	str	r3, [sp, #32]
   294a0:	ble	29580 <__assert_fail@plt+0x179dc>
   294a4:	mov	r6, r0
   294a8:	str	fp, [sp, #28]
   294ac:	ldr	r3, [sl, #24]
   294b0:	ldr	r0, [sp, #28]
   294b4:	ldr	ip, [sp, #32]
   294b8:	ldr	r3, [r3, r6, lsl #2]
   294bc:	add	r3, r3, r3, lsl #1
   294c0:	add	r2, ip, r3, lsl #3
   294c4:	ldr	r1, [r2, #8]
   294c8:	cmp	r0, r1
   294cc:	ble	2956c <__assert_fail@plt+0x179c8>
   294d0:	ldr	r1, [r2, #4]
   294d4:	cmp	r0, r1
   294d8:	bgt	2956c <__assert_fail@plt+0x179c8>
   294dc:	ldr	r1, [r2, #12]
   294e0:	ldr	r2, [ip, r3, lsl #3]
   294e4:	ldr	r3, [r5]
   294e8:	cmp	r0, r1
   294ec:	ldr	r7, [r4, #4]
   294f0:	ldr	r9, [r3, r2, lsl #3]
   294f4:	beq	2958c <__assert_fail@plt+0x179e8>
   294f8:	cmp	r7, #0
   294fc:	ble	2956c <__assert_fail@plt+0x179c8>
   29500:	mov	r8, #0
   29504:	ldr	fp, [sp, #36]	; 0x24
   29508:	b	2951c <__assert_fail@plt+0x17978>
   2950c:	add	r8, r8, #1
   29510:	cmp	r8, r7
   29514:	bge	2956c <__assert_fail@plt+0x179c8>
   29518:	ldr	r3, [r5]
   2951c:	ldr	r2, [r4, #8]
   29520:	ldr	r1, [r2, r8, lsl #2]
   29524:	add	r2, r3, r1, lsl #3
   29528:	ldrb	r2, [r2, #4]
   2952c:	sub	r2, r2, #8
   29530:	cmp	r2, #1
   29534:	bhi	2950c <__assert_fail@plt+0x17968>
   29538:	ldr	r3, [r3, r1, lsl #3]
   2953c:	cmp	r9, r3
   29540:	bne	2950c <__assert_fail@plt+0x17968>
   29544:	mov	r3, fp
   29548:	mov	r2, r4
   2954c:	mov	r0, r5
   29550:	bl	22a94 <__assert_fail@plt+0x10ef0>
   29554:	cmp	r0, #0
   29558:	bne	29694 <__assert_fail@plt+0x17af0>
   2955c:	ldr	r7, [r4, #4]
   29560:	add	r8, r8, #1
   29564:	cmp	r8, r7
   29568:	blt	29518 <__assert_fail@plt+0x17974>
   2956c:	ldr	r3, [sl, #20]
   29570:	add	r6, r6, #1
   29574:	cmp	r6, r3
   29578:	blt	294ac <__assert_fail@plt+0x17908>
   2957c:	ldr	fp, [sp, #28]
   29580:	mov	r3, #0
   29584:	str	r3, [sp, #72]	; 0x48
   29588:	b	2908c <__assert_fail@plt+0x174e8>
   2958c:	cmp	r7, #0
   29590:	ble	2956c <__assert_fail@plt+0x179c8>
   29594:	ldr	lr, [r4, #8]
   29598:	mvn	r8, #0
   2959c:	mov	fp, r8
   295a0:	str	r6, [sp, #40]	; 0x28
   295a4:	add	r2, lr, r7, lsl #2
   295a8:	mov	r1, lr
   295ac:	mov	r6, r2
   295b0:	b	295d0 <__assert_fail@plt+0x17a2c>
   295b4:	cmp	r0, #9
   295b8:	bne	295c8 <__assert_fail@plt+0x17a24>
   295bc:	ldr	r0, [ip]
   295c0:	cmp	r9, r0
   295c4:	moveq	r8, r2
   295c8:	cmp	r6, r1
   295cc:	beq	295f8 <__assert_fail@plt+0x17a54>
   295d0:	ldr	r2, [r1], #4
   295d4:	add	ip, r3, r2, lsl #3
   295d8:	ldrb	r0, [ip, #4]
   295dc:	cmp	r0, #8
   295e0:	bne	295b4 <__assert_fail@plt+0x17a10>
   295e4:	ldr	r0, [r3, r2, lsl #3]
   295e8:	cmp	r9, r0
   295ec:	moveq	fp, r2
   295f0:	cmp	r6, r1
   295f4:	bne	295d0 <__assert_fail@plt+0x17a2c>
   295f8:	cmp	fp, #0
   295fc:	ldr	r6, [sp, #40]	; 0x28
   29600:	bge	2969c <__assert_fail@plt+0x17af8>
   29604:	cmp	r8, #0
   29608:	blt	2956c <__assert_fail@plt+0x179c8>
   2960c:	mov	r9, #0
   29610:	str	r6, [sp, #40]	; 0x28
   29614:	b	29628 <__assert_fail@plt+0x17a84>
   29618:	add	r9, r9, #1
   2961c:	cmp	r7, r9
   29620:	ble	296dc <__assert_fail@plt+0x17b38>
   29624:	ldr	lr, [r4, #8]
   29628:	mov	r2, r8
   2962c:	ldr	r6, [lr, r9, lsl #2]
   29630:	ldr	r0, [r5, #28]
   29634:	add	fp, r6, r6, lsl #1
   29638:	lsl	fp, fp, #2
   2963c:	add	r0, r0, fp
   29640:	add	r1, r0, #8
   29644:	ldr	r0, [r0, #4]
   29648:	bl	21478 <__assert_fail@plt+0xf8d4>
   2964c:	cmp	r0, #0
   29650:	bne	29618 <__assert_fail@plt+0x17a74>
   29654:	ldr	r1, [r5, #24]
   29658:	add	fp, r1, fp
   2965c:	add	r1, fp, #8
   29660:	ldr	r0, [fp, #4]
   29664:	bl	21478 <__assert_fail@plt+0xf8d4>
   29668:	cmp	r0, #0
   2966c:	bne	29618 <__assert_fail@plt+0x17a74>
   29670:	mov	r1, r6
   29674:	mov	r2, r4
   29678:	ldr	r3, [sp, #36]	; 0x24
   2967c:	mov	r0, r5
   29680:	bl	22a94 <__assert_fail@plt+0x10ef0>
   29684:	cmp	r0, #0
   29688:	bne	29694 <__assert_fail@plt+0x17af0>
   2968c:	ldr	r7, [r4, #4]
   29690:	b	2961c <__assert_fail@plt+0x17a78>
   29694:	mov	r3, r0
   29698:	b	28f94 <__assert_fail@plt+0x173f0>
   2969c:	mov	r1, fp
   296a0:	mov	r2, r4
   296a4:	ldr	r3, [sp, #36]	; 0x24
   296a8:	mov	r0, r5
   296ac:	bl	22a94 <__assert_fail@plt+0x10ef0>
   296b0:	cmp	r0, #0
   296b4:	bne	29694 <__assert_fail@plt+0x17af0>
   296b8:	cmp	r8, #0
   296bc:	blt	2956c <__assert_fail@plt+0x179c8>
   296c0:	ldr	r7, [r4, #4]
   296c4:	cmp	r7, #0
   296c8:	ble	2956c <__assert_fail@plt+0x179c8>
   296cc:	ldr	lr, [r4, #8]
   296d0:	b	2960c <__assert_fail@plt+0x17a68>
   296d4:	mov	r3, #12
   296d8:	b	29464 <__assert_fail@plt+0x178c0>
   296dc:	ldr	r6, [sp, #40]	; 0x28
   296e0:	b	2956c <__assert_fail@plt+0x179c8>
   296e4:	mov	r3, #0
   296e8:	b	29470 <__assert_fail@plt+0x178cc>
   296ec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   296f0:	ldr	r3, [r1, #56]	; 0x38
   296f4:	strd	r6, [sp, #8]
   296f8:	mov	r6, r0
   296fc:	ldr	r7, [r1, #40]	; 0x28
   29700:	strd	r8, [sp, #16]
   29704:	str	sl, [sp, #24]
   29708:	str	lr, [sp, #28]
   2970c:	sub	sp, sp, #8
   29710:	cmp	r3, r7
   29714:	movle	r3, #2
   29718:	movle	r0, #0
   2971c:	strble	r3, [r6, #4]
   29720:	ble	299e8 <__assert_fail@plt+0x17e44>
   29724:	ldr	sl, [r1, #4]
   29728:	mov	r8, r2
   2972c:	mov	r5, r1
   29730:	ldrb	r3, [r6, #6]
   29734:	ldr	r2, [r1, #80]	; 0x50
   29738:	ldrb	r4, [sl, r7]
   2973c:	bic	r3, r3, #96	; 0x60
   29740:	cmp	r2, #1
   29744:	strb	r4, [r6]
   29748:	strb	r3, [r6, #6]
   2974c:	ble	29a04 <__assert_fail@plt+0x17e60>
   29750:	ldr	r3, [r1, #28]
   29754:	cmp	r7, r3
   29758:	beq	2976c <__assert_fail@plt+0x17bc8>
   2975c:	ldr	r3, [r1, #8]
   29760:	ldr	r3, [r3, r7, lsl #2]
   29764:	cmn	r3, #1
   29768:	beq	29c4c <__assert_fail@plt+0x180a8>
   2976c:	cmp	r4, #92	; 0x5c
   29770:	beq	29a40 <__assert_fail@plt+0x17e9c>
   29774:	ldr	r3, [r5, #8]
   29778:	mov	r2, #1
   2977c:	strb	r2, [r6, #4]
   29780:	ldr	r9, [r3, r7, lsl #2]
   29784:	mov	r0, r9
   29788:	sub	r9, r9, #95	; 0x5f
   2978c:	bl	119c4 <iswalnum@plt>
   29790:	ldrb	r3, [r6, #6]
   29794:	clz	r9, r9
   29798:	cmp	r0, #0
   2979c:	lsr	r9, r9, #5
   297a0:	movne	r9, #1
   297a4:	bfi	r3, r9, #6, #1
   297a8:	strb	r3, [r6, #6]
   297ac:	sub	r4, r4, #10
   297b0:	cmp	r4, #115	; 0x73
   297b4:	ldrls	pc, [pc, r4, lsl #2]
   297b8:	b	29c44 <__assert_fail@plt+0x180a0>
   297bc:	andeq	r9, r2, r4, lsr #27
   297c0:	andeq	r9, r2, r4, asr #24
   297c4:	andeq	r9, r2, r4, asr #24
   297c8:	andeq	r9, r2, r4, asr #24
   297cc:	andeq	r9, r2, r4, asr #24
   297d0:	andeq	r9, r2, r4, asr #24
   297d4:	andeq	r9, r2, r4, asr #24
   297d8:	andeq	r9, r2, r4, asr #24
   297dc:	andeq	r9, r2, r4, asr #24
   297e0:	andeq	r9, r2, r4, asr #24
   297e4:	andeq	r9, r2, r4, asr #24
   297e8:	andeq	r9, r2, r4, asr #24
   297ec:	andeq	r9, r2, r4, asr #24
   297f0:	andeq	r9, r2, r4, asr #24
   297f4:	andeq	r9, r2, r4, asr #24
   297f8:	andeq	r9, r2, r4, asr #24
   297fc:	andeq	r9, r2, r4, asr #24
   29800:	andeq	r9, r2, r4, asr #24
   29804:	andeq	r9, r2, r4, asr #24
   29808:	andeq	r9, r2, r4, asr #24
   2980c:	andeq	r9, r2, r4, asr #24
   29810:	andeq	r9, r2, r4, asr #24
   29814:	andeq	r9, r2, r4, asr #24
   29818:	andeq	r9, r2, r4, asr #24
   2981c:	andeq	r9, r2, r4, asr #24
   29820:	andeq	r9, r2, r4, asr #24
   29824:	andeq	r9, r2, ip, lsl #19
   29828:	andeq	r9, r2, r4, asr #24
   2982c:	andeq	r9, r2, r4, asr #24
   29830:	andeq	r9, r2, r4, asr #24
   29834:	andeq	r9, r2, r0, lsr #26
   29838:	andeq	r9, r2, r8, lsr sp
   2983c:	andeq	r9, r2, r0, lsl sp
   29840:	andeq	r9, r2, r0, asr sp
   29844:	andeq	r9, r2, r4, asr #24
   29848:	andeq	r9, r2, r4, asr #24
   2984c:	muleq	r2, r8, ip
   29850:	andeq	r9, r2, r4, asr #24
   29854:	andeq	r9, r2, r4, asr #24
   29858:	andeq	r9, r2, r4, asr #24
   2985c:	andeq	r9, r2, r4, asr #24
   29860:	andeq	r9, r2, r4, asr #24
   29864:	andeq	r9, r2, r4, asr #24
   29868:	andeq	r9, r2, r4, asr #24
   2986c:	andeq	r9, r2, r4, asr #24
   29870:	andeq	r9, r2, r4, asr #24
   29874:	andeq	r9, r2, r4, asr #24
   29878:	andeq	r9, r2, r4, asr #24
   2987c:	andeq	r9, r2, r4, asr #24
   29880:	andeq	r9, r2, r4, asr #24
   29884:	andeq	r9, r2, r4, asr #24
   29888:	andeq	r9, r2, r4, asr #24
   2988c:	andeq	r9, r2, r4, asr #24
   29890:	andeq	r9, r2, r8, lsr #25
   29894:	andeq	r9, r2, r4, asr #24
   29898:	andeq	r9, r2, r4, asr #24
   2989c:	andeq	r9, r2, r4, asr #24
   298a0:	andeq	r9, r2, r4, asr #24
   298a4:	andeq	r9, r2, r4, asr #24
   298a8:	andeq	r9, r2, r4, asr #24
   298ac:	andeq	r9, r2, r4, asr #24
   298b0:	andeq	r9, r2, r4, asr #24
   298b4:	andeq	r9, r2, r4, asr #24
   298b8:	andeq	r9, r2, r4, asr #24
   298bc:	andeq	r9, r2, r4, asr #24
   298c0:	andeq	r9, r2, r4, asr #24
   298c4:	andeq	r9, r2, r4, asr #24
   298c8:	andeq	r9, r2, r4, asr #24
   298cc:	andeq	r9, r2, r4, asr #24
   298d0:	andeq	r9, r2, r4, asr #24
   298d4:	andeq	r9, r2, r4, asr #24
   298d8:	andeq	r9, r2, r4, asr #24
   298dc:	andeq	r9, r2, r4, asr #24
   298e0:	andeq	r9, r2, r4, asr #24
   298e4:	andeq	r9, r2, r4, asr #24
   298e8:	andeq	r9, r2, r4, asr #24
   298ec:	andeq	r9, r2, r4, asr #24
   298f0:	andeq	r9, r2, r4, asr #24
   298f4:	andeq	r9, r2, r4, asr #24
   298f8:	andeq	r9, r2, r4, asr #24
   298fc:	andeq	r9, r2, r4, asr #24
   29900:	andeq	r9, r2, r4, asr #25
   29904:	andeq	r9, r2, r4, asr #24
   29908:	andeq	r9, r2, r4, asr #24
   2990c:	ldrdeq	r9, [r2], -r4
   29910:	andeq	r9, r2, r4, asr #24
   29914:	andeq	r9, r2, r4, asr #24
   29918:	andeq	r9, r2, r4, asr #24
   2991c:	andeq	r9, r2, r4, asr #24
   29920:	andeq	r9, r2, r4, asr #24
   29924:	andeq	r9, r2, r4, asr #24
   29928:	andeq	r9, r2, r4, asr #24
   2992c:	andeq	r9, r2, r4, asr #24
   29930:	andeq	r9, r2, r4, asr #24
   29934:	andeq	r9, r2, r4, asr #24
   29938:	andeq	r9, r2, r4, asr #24
   2993c:	andeq	r9, r2, r4, asr #24
   29940:	andeq	r9, r2, r4, asr #24
   29944:	andeq	r9, r2, r4, asr #24
   29948:	andeq	r9, r2, r4, asr #24
   2994c:	andeq	r9, r2, r4, asr #24
   29950:	andeq	r9, r2, r4, asr #24
   29954:	andeq	r9, r2, r4, asr #24
   29958:	andeq	r9, r2, r4, asr #24
   2995c:	andeq	r9, r2, r4, asr #24
   29960:	andeq	r9, r2, r4, asr #24
   29964:	andeq	r9, r2, r4, asr #24
   29968:	andeq	r9, r2, r4, asr #24
   2996c:	andeq	r9, r2, r4, asr #24
   29970:	andeq	r9, r2, r4, asr #24
   29974:	andeq	r9, r2, r4, asr #24
   29978:	andeq	r9, r2, r4, asr #24
   2997c:	andeq	r9, r2, r4, asr #24
   29980:	andeq	r9, r2, ip, ror #26
   29984:	andeq	r9, r2, r8, lsl #27
   29988:			; <UNDEFINED> instruction: 0x00029db0
   2998c:	tst	r8, #8
   29990:	bne	299d4 <__assert_fail@plt+0x17e30>
   29994:	ldr	r3, [r5, #48]	; 0x30
   29998:	add	r7, r7, #1
   2999c:	cmp	r7, r3
   299a0:	beq	299d4 <__assert_fail@plt+0x17e30>
   299a4:	mov	r2, r8
   299a8:	mov	r1, r5
   299ac:	str	r7, [r5, #40]	; 0x28
   299b0:	mov	r0, sp
   299b4:	bl	296ec <__assert_fail@plt+0x17b48>
   299b8:	ldrb	r2, [sp, #4]
   299bc:	ldr	r3, [r5, #40]	; 0x28
   299c0:	sub	r2, r2, #9
   299c4:	cmp	r2, #1
   299c8:	sub	r3, r3, #1
   299cc:	str	r3, [r5, #40]	; 0x28
   299d0:	bhi	29c44 <__assert_fail@plt+0x180a0>
   299d4:	mov	r3, #12
   299d8:	mov	r2, #32
   299dc:	mov	r0, #1
   299e0:	str	r2, [r6]
   299e4:	strb	r3, [r6, #4]
   299e8:	add	sp, sp, #8
   299ec:	ldrd	r4, [sp]
   299f0:	ldrd	r6, [sp, #8]
   299f4:	ldrd	r8, [sp, #16]
   299f8:	ldr	sl, [sp, #24]
   299fc:	add	sp, sp, #28
   29a00:	pop	{pc}		; (ldr pc, [sp], #4)
   29a04:	cmp	r4, #92	; 0x5c
   29a08:	beq	29a40 <__assert_fail@plt+0x17e9c>
   29a0c:	mov	r3, #1
   29a10:	strb	r3, [r6, #4]
   29a14:	bl	11964 <__ctype_b_loc@plt>
   29a18:	ldr	r1, [r0]
   29a1c:	lsl	r3, r4, #1
   29a20:	ldrb	r2, [r6, #6]
   29a24:	ldrh	r3, [r1, r3]
   29a28:	ubfx	r3, r3, #3, #1
   29a2c:	cmp	r4, #95	; 0x5f
   29a30:	orreq	r3, r3, #1
   29a34:	bfi	r2, r3, #6, #1
   29a38:	strb	r2, [r6, #6]
   29a3c:	b	297ac <__assert_fail@plt+0x17c08>
   29a40:	ldr	r1, [r5, #48]	; 0x30
   29a44:	add	r3, r7, #1
   29a48:	cmp	r3, r1
   29a4c:	blt	29a60 <__assert_fail@plt+0x17ebc>
   29a50:	mov	r3, #36	; 0x24
   29a54:	mov	r0, #1
   29a58:	strb	r3, [r6, #4]
   29a5c:	b	299e8 <__assert_fail@plt+0x17e44>
   29a60:	ldrb	r1, [r5, #75]	; 0x4b
   29a64:	cmp	r1, #0
   29a68:	bne	29fd0 <__assert_fail@plt+0x1842c>
   29a6c:	ldrb	r7, [sl, r3]
   29a70:	mov	r1, #1
   29a74:	strb	r7, [r6]
   29a78:	cmp	r2, r1
   29a7c:	strb	r1, [r6, #4]
   29a80:	ble	29c6c <__assert_fail@plt+0x180c8>
   29a84:	ldr	r1, [r5, #8]
   29a88:	add	r1, r1, r3, lsl #2
   29a8c:	ldr	r4, [r1]
   29a90:	mov	r0, r4
   29a94:	sub	r4, r4, #95	; 0x5f
   29a98:	bl	119c4 <iswalnum@plt>
   29a9c:	ldrb	r3, [r6, #6]
   29aa0:	clz	r4, r4
   29aa4:	cmp	r0, #0
   29aa8:	lsr	r4, r4, #5
   29aac:	movne	r4, #1
   29ab0:	bfi	r3, r4, #6, #1
   29ab4:	strb	r3, [r6, #6]
   29ab8:	sub	r3, r7, #39	; 0x27
   29abc:	cmp	r3, #86	; 0x56
   29ac0:	ldrls	pc, [pc, r3, lsl #2]
   29ac4:	b	29de4 <__assert_fail@plt+0x18240>
   29ac8:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   29acc:			; <UNDEFINED> instruction: 0x00029fb8
   29ad0:	andeq	r9, r2, r0, lsl #31
   29ad4:	andeq	r9, r2, r4, ror #27
   29ad8:	andeq	r9, r2, r0, ror #30
   29adc:	andeq	r9, r2, r4, ror #27
   29ae0:	andeq	r9, r2, r4, ror #27
   29ae4:	andeq	r9, r2, r4, ror #27
   29ae8:	andeq	r9, r2, r4, ror #27
   29aec:	andeq	r9, r2, r4, ror #27
   29af0:	andeq	r9, r2, r0, asr #30
   29af4:	andeq	r9, r2, r0, asr #30
   29af8:	andeq	r9, r2, r0, asr #30
   29afc:	andeq	r9, r2, r0, asr #30
   29b00:	andeq	r9, r2, r0, asr #30
   29b04:	andeq	r9, r2, r0, asr #30
   29b08:	andeq	r9, r2, r0, asr #30
   29b0c:	andeq	r9, r2, r0, asr #30
   29b10:	andeq	r9, r2, r0, asr #30
   29b14:	andeq	r9, r2, r4, ror #27
   29b18:	andeq	r9, r2, r4, ror #27
   29b1c:	andeq	r9, r2, r0, lsr #30
   29b20:	andeq	r9, r2, r4, ror #27
   29b24:	andeq	r9, r2, r0, lsl #30
   29b28:	andeq	r9, r2, r0, ror #29
   29b2c:	andeq	r9, r2, r4, ror #27
   29b30:	andeq	r9, r2, r4, ror #27
   29b34:	andeq	r9, r2, r0, asr #29
   29b38:	andeq	r9, r2, r4, ror #27
   29b3c:	andeq	r9, r2, r4, ror #27
   29b40:	andeq	r9, r2, r4, ror #27
   29b44:	andeq	r9, r2, r4, ror #27
   29b48:	andeq	r9, r2, r4, ror #27
   29b4c:	andeq	r9, r2, r4, ror #27
   29b50:	andeq	r9, r2, r4, ror #27
   29b54:	andeq	r9, r2, r4, ror #27
   29b58:	andeq	r9, r2, r4, ror #27
   29b5c:	andeq	r9, r2, r4, ror #27
   29b60:	andeq	r9, r2, r4, ror #27
   29b64:	andeq	r9, r2, r4, ror #27
   29b68:	andeq	r9, r2, r4, ror #27
   29b6c:	andeq	r9, r2, r4, ror #27
   29b70:	andeq	r9, r2, r4, ror #27
   29b74:	andeq	r9, r2, r4, ror #27
   29b78:	andeq	r9, r2, r8, lsr #29
   29b7c:	andeq	r9, r2, r4, ror #27
   29b80:	andeq	r9, r2, r4, ror #27
   29b84:	andeq	r9, r2, r4, ror #27
   29b88:	muleq	r2, r0, lr
   29b8c:	andeq	r9, r2, r4, ror #27
   29b90:	andeq	r9, r2, r4, ror #27
   29b94:	andeq	r9, r2, r4, ror #27
   29b98:	andeq	r9, r2, r4, ror #27
   29b9c:	andeq	r9, r2, r4, ror #27
   29ba0:	andeq	r9, r2, r4, ror #27
   29ba4:	andeq	r9, r2, r4, ror #27
   29ba8:	andeq	r9, r2, r4, ror #27
   29bac:	andeq	r9, r2, r0, ror lr
   29bb0:	andeq	r9, r2, r4, ror #27
   29bb4:	andeq	r9, r2, r0, asr lr
   29bb8:	andeq	r9, r2, r4, ror #27
   29bbc:	andeq	r9, r2, r4, ror #27
   29bc0:	andeq	r9, r2, r4, ror #27
   29bc4:	andeq	r9, r2, r4, ror #27
   29bc8:	andeq	r9, r2, r4, ror #27
   29bcc:	andeq	r9, r2, r4, ror #27
   29bd0:	andeq	r9, r2, r4, ror #27
   29bd4:	andeq	r9, r2, r4, ror #27
   29bd8:	andeq	r9, r2, r4, ror #27
   29bdc:	andeq	r9, r2, r4, ror #27
   29be0:	andeq	r9, r2, r4, ror #27
   29be4:	andeq	r9, r2, r4, ror #27
   29be8:	andeq	r9, r2, r4, ror #27
   29bec:	andeq	r9, r2, r4, ror #27
   29bf0:	andeq	r9, r2, r4, ror #27
   29bf4:	andeq	r9, r2, r4, ror #27
   29bf8:	andeq	r9, r2, r8, lsr lr
   29bfc:	andeq	r9, r2, r4, ror #27
   29c00:	andeq	r9, r2, r4, ror #27
   29c04:	andeq	r9, r2, r4, ror #27
   29c08:	andeq	r9, r2, r0, lsr #28
   29c0c:	andeq	r9, r2, r4, ror #27
   29c10:	andeq	r9, r2, r4, ror #27
   29c14:	andeq	r9, r2, r4, ror #27
   29c18:	andeq	r9, r2, r4, lsl #28
   29c1c:	andeq	r9, r2, ip, ror #27
   29c20:	andeq	r9, r2, ip, asr #27
   29c24:	add	r7, sl, r7
   29c28:	eor	r3, r8, #2048	; 0x800
   29c2c:	ldrb	r2, [r7, #-1]
   29c30:	ubfx	r3, r3, #11, #1
   29c34:	cmp	r2, #10
   29c38:	orrne	r3, r3, #1
   29c3c:	cmp	r3, #0
   29c40:	beq	29cf8 <__assert_fail@plt+0x18154>
   29c44:	mov	r0, #1
   29c48:	b	299e8 <__assert_fail@plt+0x17e44>
   29c4c:	ldr	r3, [r6, #4]
   29c50:	mov	r0, #1
   29c54:	bic	r3, r3, #2097152	; 0x200000
   29c58:	bic	r3, r3, #255	; 0xff
   29c5c:	orr	r3, r3, #2097152	; 0x200000
   29c60:	orr	r3, r3, r0
   29c64:	str	r3, [r6, #4]
   29c68:	b	299e8 <__assert_fail@plt+0x17e44>
   29c6c:	bl	11964 <__ctype_b_loc@plt>
   29c70:	ldr	r1, [r0]
   29c74:	lsl	r3, r7, #1
   29c78:	ldrb	r2, [r6, #6]
   29c7c:	ldrh	r3, [r1, r3]
   29c80:	ubfx	r3, r3, #3, #1
   29c84:	cmp	r7, #95	; 0x5f
   29c88:	orreq	r3, r3, #1
   29c8c:	bfi	r2, r3, #6, #1
   29c90:	strb	r2, [r6, #6]
   29c94:	b	29ab8 <__assert_fail@plt+0x17f14>
   29c98:	mov	r3, #5
   29c9c:	mov	r0, #1
   29ca0:	strb	r3, [r6, #4]
   29ca4:	b	299e8 <__assert_fail@plt+0x17e44>
   29ca8:	movw	r3, #1026	; 0x402
   29cac:	tst	r8, r3
   29cb0:	bne	29c44 <__assert_fail@plt+0x180a0>
   29cb4:	mov	r3, #19
   29cb8:	mov	r0, #1
   29cbc:	strb	r3, [r6, #4]
   29cc0:	b	299e8 <__assert_fail@plt+0x17e44>
   29cc4:	mov	r3, #20
   29cc8:	mov	r0, #1
   29ccc:	strb	r3, [r6, #4]
   29cd0:	b	299e8 <__assert_fail@plt+0x17e44>
   29cd4:	mov	r3, #8
   29cd8:	movt	r3, #128	; 0x80
   29cdc:	tst	r8, r3
   29ce0:	moveq	r3, #1
   29ce4:	movne	r3, #0
   29ce8:	cmp	r7, #0
   29cec:	moveq	r3, #0
   29cf0:	cmp	r3, #0
   29cf4:	bne	29c24 <__assert_fail@plt+0x18080>
   29cf8:	mov	r3, #12
   29cfc:	mov	r2, #16
   29d00:	mov	r0, #1
   29d04:	str	r2, [r6]
   29d08:	strb	r3, [r6, #4]
   29d0c:	b	299e8 <__assert_fail@plt+0x17e44>
   29d10:	mov	r3, #11
   29d14:	mov	r0, #1
   29d18:	strb	r3, [r6, #4]
   29d1c:	b	299e8 <__assert_fail@plt+0x17e44>
   29d20:	tst	r8, #8192	; 0x2000
   29d24:	beq	29c44 <__assert_fail@plt+0x180a0>
   29d28:	mov	r3, #8
   29d2c:	mov	r0, #1
   29d30:	strb	r3, [r6, #4]
   29d34:	b	299e8 <__assert_fail@plt+0x17e44>
   29d38:	tst	r8, #8192	; 0x2000
   29d3c:	beq	29c44 <__assert_fail@plt+0x180a0>
   29d40:	mov	r3, #9
   29d44:	mov	r0, #1
   29d48:	strb	r3, [r6, #4]
   29d4c:	b	299e8 <__assert_fail@plt+0x17e44>
   29d50:	movw	r3, #1026	; 0x402
   29d54:	tst	r8, r3
   29d58:	bne	29c44 <__assert_fail@plt+0x180a0>
   29d5c:	mov	r3, #18
   29d60:	mov	r0, #1
   29d64:	strb	r3, [r6, #4]
   29d68:	b	299e8 <__assert_fail@plt+0x17e44>
   29d6c:	and	r2, r8, #4608	; 0x1200
   29d70:	cmp	r2, #4608	; 0x1200
   29d74:	moveq	r3, #23
   29d78:	moveq	r0, #1
   29d7c:	strbeq	r3, [r6, #4]
   29d80:	bne	29c44 <__assert_fail@plt+0x180a0>
   29d84:	b	299e8 <__assert_fail@plt+0x17e44>
   29d88:	and	r2, r8, #33792	; 0x8400
   29d8c:	cmp	r2, #32768	; 0x8000
   29d90:	bne	29c44 <__assert_fail@plt+0x180a0>
   29d94:	mov	r3, #10
   29d98:	mov	r0, #1
   29d9c:	strb	r3, [r6, #4]
   29da0:	b	299e8 <__assert_fail@plt+0x17e44>
   29da4:	tst	r8, #2048	; 0x800
   29da8:	beq	29c44 <__assert_fail@plt+0x180a0>
   29dac:	b	29d94 <__assert_fail@plt+0x181f0>
   29db0:	and	r2, r8, #4608	; 0x1200
   29db4:	cmp	r2, #4608	; 0x1200
   29db8:	moveq	r3, #24
   29dbc:	moveq	r0, #1
   29dc0:	strbeq	r3, [r6, #4]
   29dc4:	bne	29c44 <__assert_fail@plt+0x180a0>
   29dc8:	b	299e8 <__assert_fail@plt+0x17e44>
   29dcc:	and	r2, r8, #4608	; 0x1200
   29dd0:	cmp	r2, #512	; 0x200
   29dd4:	moveq	r3, #24
   29dd8:	moveq	r0, #2
   29ddc:	strbeq	r3, [r6, #4]
   29de0:	beq	299e8 <__assert_fail@plt+0x17e44>
   29de4:	mov	r0, #2
   29de8:	b	299e8 <__assert_fail@plt+0x17e44>
   29dec:	tst	r8, #33792	; 0x8400
   29df0:	bne	29de4 <__assert_fail@plt+0x18240>
   29df4:	mov	r3, #10
   29df8:	mov	r0, #2
   29dfc:	strb	r3, [r6, #4]
   29e00:	b	299e8 <__assert_fail@plt+0x17e44>
   29e04:	and	r2, r8, #4608	; 0x1200
   29e08:	cmp	r2, #512	; 0x200
   29e0c:	moveq	r3, #23
   29e10:	moveq	r0, #2
   29e14:	strbeq	r3, [r6, #4]
   29e18:	bne	29de4 <__assert_fail@plt+0x18240>
   29e1c:	b	299e8 <__assert_fail@plt+0x17e44>
   29e20:	tst	r8, #524288	; 0x80000
   29e24:	bne	29de4 <__assert_fail@plt+0x18240>
   29e28:	mov	r3, #32
   29e2c:	mov	r0, #2
   29e30:	strb	r3, [r6, #4]
   29e34:	b	299e8 <__assert_fail@plt+0x17e44>
   29e38:	tst	r8, #524288	; 0x80000
   29e3c:	bne	29de4 <__assert_fail@plt+0x18240>
   29e40:	mov	r3, #34	; 0x22
   29e44:	mov	r0, #2
   29e48:	strb	r3, [r6, #4]
   29e4c:	b	299e8 <__assert_fail@plt+0x17e44>
   29e50:	tst	r8, #524288	; 0x80000
   29e54:	bne	29de4 <__assert_fail@plt+0x18240>
   29e58:	mov	r3, #12
   29e5c:	mov	r2, #256	; 0x100
   29e60:	mov	r0, #2
   29e64:	str	r2, [r6]
   29e68:	strb	r3, [r6, #4]
   29e6c:	b	299e8 <__assert_fail@plt+0x17e44>
   29e70:	tst	r8, #524288	; 0x80000
   29e74:	bne	29de4 <__assert_fail@plt+0x18240>
   29e78:	mov	r3, #12
   29e7c:	mov	r2, #64	; 0x40
   29e80:	mov	r0, #2
   29e84:	str	r2, [r6]
   29e88:	strb	r3, [r6, #4]
   29e8c:	b	299e8 <__assert_fail@plt+0x17e44>
   29e90:	tst	r8, #524288	; 0x80000
   29e94:	bne	29de4 <__assert_fail@plt+0x18240>
   29e98:	mov	r3, #33	; 0x21
   29e9c:	mov	r0, #2
   29ea0:	strb	r3, [r6, #4]
   29ea4:	b	299e8 <__assert_fail@plt+0x17e44>
   29ea8:	tst	r8, #524288	; 0x80000
   29eac:	bne	29de4 <__assert_fail@plt+0x18240>
   29eb0:	mov	r3, #35	; 0x23
   29eb4:	mov	r0, #2
   29eb8:	strb	r3, [r6, #4]
   29ebc:	b	299e8 <__assert_fail@plt+0x17e44>
   29ec0:	tst	r8, #524288	; 0x80000
   29ec4:	bne	29de4 <__assert_fail@plt+0x18240>
   29ec8:	mov	r3, #12
   29ecc:	mov	r2, #512	; 0x200
   29ed0:	mov	r0, #2
   29ed4:	str	r2, [r6]
   29ed8:	strb	r3, [r6, #4]
   29edc:	b	299e8 <__assert_fail@plt+0x17e44>
   29ee0:	movw	r2, #1026	; 0x402
   29ee4:	and	r2, r2, r8
   29ee8:	cmp	r2, #2
   29eec:	moveq	r3, #19
   29ef0:	moveq	r0, r2
   29ef4:	strbeq	r3, [r6, #4]
   29ef8:	bne	29de4 <__assert_fail@plt+0x18240>
   29efc:	b	299e8 <__assert_fail@plt+0x17e44>
   29f00:	tst	r8, #524288	; 0x80000
   29f04:	bne	29de4 <__assert_fail@plt+0x18240>
   29f08:	mov	r3, #12
   29f0c:	mov	r2, #9
   29f10:	mov	r0, #2
   29f14:	str	r2, [r6]
   29f18:	strb	r3, [r6, #4]
   29f1c:	b	299e8 <__assert_fail@plt+0x17e44>
   29f20:	tst	r8, #524288	; 0x80000
   29f24:	bne	29de4 <__assert_fail@plt+0x18240>
   29f28:	mov	r3, #12
   29f2c:	mov	r2, #6
   29f30:	mov	r0, #2
   29f34:	str	r2, [r6]
   29f38:	strb	r3, [r6, #4]
   29f3c:	b	299e8 <__assert_fail@plt+0x17e44>
   29f40:	tst	r8, #16384	; 0x4000
   29f44:	bne	29de4 <__assert_fail@plt+0x18240>
   29f48:	sub	r7, r7, #49	; 0x31
   29f4c:	mov	r3, #4
   29f50:	mov	r0, #2
   29f54:	str	r7, [r6]
   29f58:	strb	r3, [r6, #4]
   29f5c:	b	299e8 <__assert_fail@plt+0x17e44>
   29f60:	movw	r2, #1026	; 0x402
   29f64:	and	r2, r2, r8
   29f68:	cmp	r2, #2
   29f6c:	moveq	r3, #18
   29f70:	moveq	r0, r2
   29f74:	strbeq	r3, [r6, #4]
   29f78:	bne	29de4 <__assert_fail@plt+0x18240>
   29f7c:	b	299e8 <__assert_fail@plt+0x17e44>
   29f80:	tst	r8, #8192	; 0x2000
   29f84:	bne	29de4 <__assert_fail@plt+0x18240>
   29f88:	mov	r3, #9
   29f8c:	mov	r0, #2
   29f90:	strb	r3, [r6, #4]
   29f94:	b	299e8 <__assert_fail@plt+0x17e44>
   29f98:	tst	r8, #524288	; 0x80000
   29f9c:	bne	29de4 <__assert_fail@plt+0x18240>
   29fa0:	mov	r3, #12
   29fa4:	mov	r2, #128	; 0x80
   29fa8:	mov	r0, #2
   29fac:	str	r2, [r6]
   29fb0:	strb	r3, [r6, #4]
   29fb4:	b	299e8 <__assert_fail@plt+0x17e44>
   29fb8:	tst	r8, #8192	; 0x2000
   29fbc:	bne	29de4 <__assert_fail@plt+0x18240>
   29fc0:	mov	r3, #8
   29fc4:	mov	r0, #2
   29fc8:	strb	r3, [r6, #4]
   29fcc:	b	299e8 <__assert_fail@plt+0x17e44>
   29fd0:	cmp	r2, #1
   29fd4:	ble	2a008 <__assert_fail@plt+0x18464>
   29fd8:	ldr	r1, [r5, #8]
   29fdc:	ldr	r0, [r1, r3, lsl #2]
   29fe0:	add	r1, r1, r3, lsl #2
   29fe4:	cmn	r0, #1
   29fe8:	beq	2a044 <__assert_fail@plt+0x184a0>
   29fec:	ldr	r0, [r5, #28]
   29ff0:	add	r7, r7, #2
   29ff4:	cmp	r0, r7
   29ff8:	beq	2a008 <__assert_fail@plt+0x18464>
   29ffc:	ldr	r0, [r1, #4]
   2a000:	cmn	r0, #1
   2a004:	beq	2a044 <__assert_fail@plt+0x184a0>
   2a008:	ldrb	r0, [r5, #76]	; 0x4c
   2a00c:	ldr	r1, [r5]
   2a010:	ldr	ip, [r5, #24]
   2a014:	cmp	r0, #0
   2a018:	beq	2a038 <__assert_fail@plt+0x18494>
   2a01c:	ldr	r0, [r5, #12]
   2a020:	add	r1, r1, ip
   2a024:	ldr	r0, [r0, r3, lsl #2]
   2a028:	ldrb	r7, [r1, r0]
   2a02c:	tst	r7, #128	; 0x80
   2a030:	beq	29a70 <__assert_fail@plt+0x17ecc>
   2a034:	b	29a6c <__assert_fail@plt+0x17ec8>
   2a038:	add	r1, r1, r3
   2a03c:	ldrb	r7, [r1, ip]
   2a040:	b	29a70 <__assert_fail@plt+0x17ecc>
   2a044:	ldrb	r7, [sl, r3]
   2a048:	mov	r3, #1
   2a04c:	strb	r7, [r6]
   2a050:	strb	r3, [r6, #4]
   2a054:	b	29a8c <__assert_fail@plt+0x17ee8>
   2a058:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a05c:	mov	r5, r0
   2a060:	mov	r4, r1
   2a064:	strd	r6, [sp, #8]
   2a068:	mov	r7, r2
   2a06c:	mvn	r6, #0
   2a070:	str	r8, [sp, #16]
   2a074:	movw	r8, #32816	; 0x8030
   2a078:	str	lr, [sp, #20]
   2a07c:	mov	r2, r7
   2a080:	mov	r1, r5
   2a084:	mov	r0, r4
   2a088:	bl	296ec <__assert_fail@plt+0x17b48>
   2a08c:	ldr	r3, [r5, #40]	; 0x28
   2a090:	ldrb	r2, [r4, #4]
   2a094:	ldrb	r1, [r4]
   2a098:	add	r0, r3, r0
   2a09c:	cmp	r2, #2
   2a0a0:	str	r0, [r5, #40]	; 0x28
   2a0a4:	beq	2a10c <__assert_fail@plt+0x18568>
   2a0a8:	cmp	r1, #44	; 0x2c
   2a0ac:	cmpne	r2, #24
   2a0b0:	beq	2a110 <__assert_fail@plt+0x1856c>
   2a0b4:	cmp	r2, #1
   2a0b8:	beq	2a0c4 <__assert_fail@plt+0x18520>
   2a0bc:	mvn	r6, #1
   2a0c0:	b	2a07c <__assert_fail@plt+0x184d8>
   2a0c4:	sub	r2, r1, #48	; 0x30
   2a0c8:	uxtb	r0, r2
   2a0cc:	cmp	r0, #9
   2a0d0:	movhi	r3, #0
   2a0d4:	movls	r3, #1
   2a0d8:	cmn	r6, #2
   2a0dc:	moveq	r3, #0
   2a0e0:	cmp	r3, #0
   2a0e4:	beq	2a0bc <__assert_fail@plt+0x18518>
   2a0e8:	cmn	r6, #1
   2a0ec:	add	r3, r6, r6, lsl #2
   2a0f0:	moveq	r6, r2
   2a0f4:	beq	2a07c <__assert_fail@plt+0x184d8>
   2a0f8:	add	r6, r1, r3, lsl #1
   2a0fc:	cmp	r6, r8
   2a100:	movge	r6, r8
   2a104:	sub	r6, r6, #48	; 0x30
   2a108:	b	2a07c <__assert_fail@plt+0x184d8>
   2a10c:	mvn	r6, #1
   2a110:	mov	r0, r6
   2a114:	ldrd	r4, [sp]
   2a118:	ldrd	r6, [sp, #8]
   2a11c:	ldr	r8, [sp, #16]
   2a120:	add	sp, sp, #20
   2a124:	pop	{pc}		; (ldr pc, [sp], #4)
   2a128:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a12c:	mov	r4, r1
   2a130:	ldr	r5, [r1, #40]	; 0x28
   2a134:	strd	r6, [sp, #8]
   2a138:	mov	r6, r0
   2a13c:	strd	r8, [sp, #16]
   2a140:	mov	r8, r2
   2a144:	mov	r9, r3
   2a148:	ldr	r2, [r1, #80]	; 0x50
   2a14c:	strd	sl, [sp, #24]
   2a150:	str	lr, [sp, #32]
   2a154:	sub	sp, sp, #12
   2a158:	ldrb	r7, [sp, #52]	; 0x34
   2a15c:	cmp	r2, #1
   2a160:	beq	2a178 <__assert_fail@plt+0x185d4>
   2a164:	mov	r1, r5
   2a168:	mov	r0, r4
   2a16c:	bl	2141c <__assert_fail@plt+0xf878>
   2a170:	cmp	r0, #1
   2a174:	bgt	2a1d8 <__assert_fail@plt+0x18634>
   2a178:	ldrb	r2, [r8, #4]
   2a17c:	add	r5, r5, r9
   2a180:	str	r5, [r4, #40]	; 0x28
   2a184:	and	r3, r2, #251	; 0xfb
   2a188:	cmp	r2, #28
   2a18c:	cmpne	r3, #26
   2a190:	beq	2a1f8 <__assert_fail@plt+0x18654>
   2a194:	cmp	r2, #22
   2a198:	moveq	r2, r7
   2a19c:	orrne	r2, r7, #1
   2a1a0:	cmp	r2, #0
   2a1a4:	beq	2a340 <__assert_fail@plt+0x1879c>
   2a1a8:	ldrb	r2, [r8]
   2a1ac:	mov	r3, #0
   2a1b0:	mov	r0, r3
   2a1b4:	str	r3, [r6]
   2a1b8:	strb	r2, [r6, #4]
   2a1bc:	add	sp, sp, #12
   2a1c0:	ldrd	r4, [sp]
   2a1c4:	ldrd	r6, [sp, #8]
   2a1c8:	ldrd	r8, [sp, #16]
   2a1cc:	ldrd	sl, [sp, #24]
   2a1d0:	add	sp, sp, #32
   2a1d4:	pop	{pc}		; (ldr pc, [sp], #4)
   2a1d8:	ldr	r2, [r4, #8]
   2a1dc:	add	r3, r5, r0
   2a1e0:	mov	r1, #1
   2a1e4:	mov	r0, #0
   2a1e8:	ldr	r2, [r2, r5, lsl #2]
   2a1ec:	stm	r6, {r1, r2}
   2a1f0:	str	r3, [r4, #40]	; 0x28
   2a1f4:	b	2a1bc <__assert_fail@plt+0x18618>
   2a1f8:	ldr	sl, [r4, #56]	; 0x38
   2a1fc:	cmp	r5, sl
   2a200:	bge	2a2a0 <__assert_fail@plt+0x186fc>
   2a204:	ldrb	fp, [r8]
   2a208:	mov	r9, #0
   2a20c:	b	2a230 <__assert_fail@plt+0x1868c>
   2a210:	ldr	r3, [r6, #4]
   2a214:	strb	r7, [r3, r9]
   2a218:	add	r9, r9, #1
   2a21c:	cmp	r9, #32
   2a220:	beq	2a2a0 <__assert_fail@plt+0x186fc>
   2a224:	ldrb	r2, [r8, #4]
   2a228:	ldr	r5, [r4, #40]	; 0x28
   2a22c:	ldr	sl, [r4, #56]	; 0x38
   2a230:	cmp	r2, #30
   2a234:	beq	2a2a8 <__assert_fail@plt+0x18704>
   2a238:	ldr	r2, [r4, #4]
   2a23c:	add	r3, r5, #1
   2a240:	str	r3, [r4, #40]	; 0x28
   2a244:	ldrb	r7, [r2, r5]
   2a248:	cmp	sl, r3
   2a24c:	ble	2a2a0 <__assert_fail@plt+0x186fc>
   2a250:	cmp	fp, r7
   2a254:	bne	2a210 <__assert_fail@plt+0x1866c>
   2a258:	ldr	r2, [r4, #4]
   2a25c:	ldrb	r2, [r2, r3]
   2a260:	cmp	r2, #93	; 0x5d
   2a264:	bne	2a210 <__assert_fail@plt+0x1866c>
   2a268:	ldr	r2, [r6, #4]
   2a26c:	add	r3, r3, #1
   2a270:	mov	r0, #0
   2a274:	str	r3, [r4, #40]	; 0x28
   2a278:	strb	r0, [r2, r9]
   2a27c:	ldrb	r3, [r8, #4]
   2a280:	cmp	r3, #28
   2a284:	beq	2a370 <__assert_fail@plt+0x187cc>
   2a288:	cmp	r3, #30
   2a28c:	beq	2a364 <__assert_fail@plt+0x187c0>
   2a290:	cmp	r3, #26
   2a294:	moveq	r3, #3
   2a298:	streq	r3, [r6]
   2a29c:	b	2a1bc <__assert_fail@plt+0x18618>
   2a2a0:	mov	r0, #7
   2a2a4:	b	2a1bc <__assert_fail@plt+0x18618>
   2a2a8:	ldrb	r3, [r4, #75]	; 0x4b
   2a2ac:	cmp	r3, #0
   2a2b0:	beq	2a238 <__assert_fail@plt+0x18694>
   2a2b4:	ldrb	r3, [r4, #76]	; 0x4c
   2a2b8:	cmp	r3, #0
   2a2bc:	beq	2a324 <__assert_fail@plt+0x18780>
   2a2c0:	ldr	r3, [r4, #28]
   2a2c4:	lsl	r2, r5, #2
   2a2c8:	cmp	r5, r3
   2a2cc:	beq	2a2e0 <__assert_fail@plt+0x1873c>
   2a2d0:	ldr	r3, [r4, #8]
   2a2d4:	ldr	r3, [r3, r5, lsl #2]
   2a2d8:	cmn	r3, #1
   2a2dc:	beq	2a238 <__assert_fail@plt+0x18694>
   2a2e0:	ldr	r3, [r4]
   2a2e4:	ldr	r1, [r4, #12]
   2a2e8:	ldr	r1, [r1, r2]
   2a2ec:	ldr	r2, [r4, #24]
   2a2f0:	add	r3, r3, r1
   2a2f4:	ldrb	r7, [r3, r2]
   2a2f8:	tst	r7, #128	; 0x80
   2a2fc:	bne	2a238 <__assert_fail@plt+0x18694>
   2a300:	ldr	r0, [r4, #80]	; 0x50
   2a304:	cmp	r0, #1
   2a308:	beq	2a318 <__assert_fail@plt+0x18774>
   2a30c:	mov	r1, r5
   2a310:	mov	r0, r4
   2a314:	bl	2141c <__assert_fail@plt+0xf878>
   2a318:	add	r3, r5, r0
   2a31c:	str	r3, [r4, #40]	; 0x28
   2a320:	b	2a248 <__assert_fail@plt+0x186a4>
   2a324:	ldr	r2, [r4]
   2a328:	add	r3, r5, #1
   2a32c:	ldr	r1, [r4, #24]
   2a330:	str	r3, [r4, #40]	; 0x28
   2a334:	add	r5, r2, r5
   2a338:	ldrb	r7, [r5, r1]
   2a33c:	b	2a248 <__assert_fail@plt+0x186a4>
   2a340:	mov	r1, r4
   2a344:	mov	r0, sp
   2a348:	ldr	r2, [sp, #48]	; 0x30
   2a34c:	bl	1f870 <__assert_fail@plt+0xdccc>
   2a350:	ldrb	r3, [sp, #4]
   2a354:	cmp	r3, #21
   2a358:	movne	r0, #11
   2a35c:	beq	2a1a8 <__assert_fail@plt+0x18604>
   2a360:	b	2a1bc <__assert_fail@plt+0x18618>
   2a364:	mov	r3, #4
   2a368:	str	r3, [r6]
   2a36c:	b	2a1bc <__assert_fail@plt+0x18618>
   2a370:	mov	r3, #2
   2a374:	str	r3, [r6]
   2a378:	b	2a1bc <__assert_fail@plt+0x18618>
   2a37c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a380:	mov	r5, r1
   2a384:	strd	r6, [sp, #8]
   2a388:	strd	r8, [sp, #16]
   2a38c:	strd	sl, [sp, #24]
   2a390:	mov	fp, r2
   2a394:	mov	sl, r0
   2a398:	str	lr, [sp, #32]
   2a39c:	sub	sp, sp, #164	; 0xa4
   2a3a0:	ldrb	r2, [r2, #4]
   2a3a4:	str	r3, [sp, #20]
   2a3a8:	ldr	r3, [r1]
   2a3ac:	str	r3, [sp, #32]
   2a3b0:	sub	r3, r2, #1
   2a3b4:	cmp	r3, #35	; 0x23
   2a3b8:	ldrls	pc, [pc, r3, lsl #2]
   2a3bc:	b	2af0c <__assert_fail@plt+0x19368>
   2a3c0:	andeq	sl, r2, r4, lsl #27
   2a3c4:			; <UNDEFINED> instruction: 0x0002a7b0
   2a3c8:	andeq	sl, r2, ip, lsl #30
   2a3cc:	andeq	sl, r2, r4, lsr #30
   2a3d0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   2a3d4:	andeq	sl, r2, ip, lsl #30
   2a3d8:	andeq	sl, r2, ip, lsl #30
   2a3dc:	andeq	sl, r2, ip, lsl #14
   2a3e0:	ldrdeq	sl, [r2], -r4
   2a3e4:			; <UNDEFINED> instruction: 0x0002a7b0
   2a3e8:	andeq	sl, r2, ip, asr r4
   2a3ec:	andeq	sl, r2, r0, lsl fp
   2a3f0:	andeq	sl, r2, ip, lsl #30
   2a3f4:	andeq	sl, r2, ip, lsl #30
   2a3f8:	andeq	sl, r2, ip, lsl #30
   2a3fc:	andeq	sl, r2, ip, lsl #30
   2a400:	andeq	sl, r2, ip, lsl #30
   2a404:	andeq	sl, r2, ip, asr r4
   2a408:	andeq	sl, r2, ip, asr r4
   2a40c:	andeq	sl, r2, ip, asr ip
   2a410:	andeq	sl, r2, ip, lsl #30
   2a414:	andeq	sl, r2, ip, lsl #30
   2a418:	andeq	sl, r2, r0, asr r4
   2a41c:	andeq	sl, r2, r8, ror r4
   2a420:	andeq	sl, r2, ip, lsl #30
   2a424:	andeq	sl, r2, ip, lsl #30
   2a428:	andeq	sl, r2, ip, lsl #30
   2a42c:	andeq	sl, r2, ip, lsl #30
   2a430:	andeq	sl, r2, ip, lsl #30
   2a434:	andeq	sl, r2, ip, lsl #30
   2a438:	andeq	sl, r2, ip, lsl #30
   2a43c:	muleq	r2, r0, lr
   2a440:	muleq	r2, r0, lr
   2a444:	andeq	sl, r2, ip, ror #29
   2a448:	andeq	sl, r2, ip, ror #29
   2a44c:	andeq	sl, r2, ip, lsl #30
   2a450:	ldr	r3, [sp, #20]
   2a454:	tst	r3, #16777216	; 0x1000000
   2a458:	bne	2a6d8 <__assert_fail@plt+0x18b34>
   2a45c:	ldr	r3, [sp, #20]
   2a460:	tst	r3, #32
   2a464:	bne	2a6d8 <__assert_fail@plt+0x18b34>
   2a468:	tst	r3, #16
   2a46c:	bne	2b1ec <__assert_fail@plt+0x19648>
   2a470:	cmp	r2, #9
   2a474:	beq	2afd4 <__assert_fail@plt+0x19430>
   2a478:	ldr	ip, [sp, #32]
   2a47c:	mov	r0, #1
   2a480:	mov	r3, #0
   2a484:	mov	r2, r3
   2a488:	str	fp, [sp]
   2a48c:	strb	r0, [fp, #4]
   2a490:	add	r1, ip, #64	; 0x40
   2a494:	add	r0, ip, #56	; 0x38
   2a498:	bl	21be4 <__assert_fail@plt+0x10040>
   2a49c:	subs	r3, r0, #0
   2a4a0:	str	r3, [sp, #24]
   2a4a4:	beq	2ae78 <__assert_fail@plt+0x192d4>
   2a4a8:	mov	r1, sl
   2a4ac:	mov	r0, fp
   2a4b0:	ldr	r2, [sp, #20]
   2a4b4:	bl	296ec <__assert_fail@plt+0x17b48>
   2a4b8:	ldr	r3, [sl, #40]	; 0x28
   2a4bc:	ldrb	r5, [fp, #4]
   2a4c0:	add	r0, r3, r0
   2a4c4:	str	r0, [sl, #40]	; 0x28
   2a4c8:	cmp	r5, #23
   2a4cc:	cmpne	r5, #11
   2a4d0:	sub	r2, r5, #18
   2a4d4:	moveq	r3, #1
   2a4d8:	movne	r3, #0
   2a4dc:	cmp	r2, #1
   2a4e0:	orrls	r3, r3, #1
   2a4e4:	sub	r4, r5, #18
   2a4e8:	clz	r4, r4
   2a4ec:	cmp	r3, #0
   2a4f0:	lsr	r4, r4, #5
   2a4f4:	beq	2a6ec <__assert_fail@plt+0x18b48>
   2a4f8:	ldrd	r2, [fp]
   2a4fc:	cmp	r5, #23
   2a500:	add	r7, sp, #96	; 0x60
   2a504:	ldr	r6, [sl, #40]	; 0x28
   2a508:	strd	r2, [sp, #96]	; 0x60
   2a50c:	beq	2a900 <__assert_fail@plt+0x18d5c>
   2a510:	cmp	r5, #19
   2a514:	beq	2a880 <__assert_fail@plt+0x18cdc>
   2a518:	mov	r1, sl
   2a51c:	mov	r0, fp
   2a520:	ldr	r2, [sp, #20]
   2a524:	bl	296ec <__assert_fail@plt+0x17b48>
   2a528:	ldr	r3, [sl, #40]	; 0x28
   2a52c:	ldr	r2, [sp, #24]
   2a530:	add	r0, r3, r0
   2a534:	cmp	r2, #0
   2a538:	str	r0, [sl, #40]	; 0x28
   2a53c:	beq	2a978 <__assert_fail@plt+0x18dd4>
   2a540:	cmp	r5, #18
   2a544:	beq	2aad0 <__assert_fail@plt+0x18f2c>
   2a548:	ldr	r6, [sp, #24]
   2a54c:	ldrb	r3, [r6, #24]
   2a550:	cmp	r3, #17
   2a554:	beq	2a8cc <__assert_fail@plt+0x18d28>
   2a558:	mov	r4, #0
   2a55c:	mvn	r9, #0
   2a560:	str	r4, [sp, #36]	; 0x24
   2a564:	mov	r3, #11
   2a568:	ldr	r2, [sp, #32]
   2a56c:	mov	r0, #0
   2a570:	mov	r1, #0
   2a574:	add	r5, sp, #128	; 0x80
   2a578:	str	r5, [sp]
   2a57c:	strd	r0, [sp, #128]	; 0x80
   2a580:	add	r7, r2, #56	; 0x38
   2a584:	add	r8, r2, #64	; 0x40
   2a588:	strb	r3, [sp, #132]	; 0x84
   2a58c:	mov	r2, r6
   2a590:	mov	r0, r7
   2a594:	mov	r1, r8
   2a598:	mov	r3, #0
   2a59c:	bl	21be4 <__assert_fail@plt+0x10040>
   2a5a0:	subs	r2, r0, #0
   2a5a4:	beq	2a854 <__assert_fail@plt+0x18cb0>
   2a5a8:	add	r4, r4, #2
   2a5ac:	cmp	r4, r9
   2a5b0:	bgt	2a650 <__assert_fail@plt+0x18aac>
   2a5b4:	strd	sl, [sp, #40]	; 0x28
   2a5b8:	mov	sl, r2
   2a5bc:	mov	r0, r6
   2a5c0:	ldr	r1, [sp, #32]
   2a5c4:	mov	fp, #0
   2a5c8:	bl	21cb4 <__assert_fail@plt+0x10110>
   2a5cc:	mov	r2, sl
   2a5d0:	mov	sl, #0
   2a5d4:	str	r5, [sp]
   2a5d8:	mov	ip, #16
   2a5dc:	mov	r3, r0
   2a5e0:	mov	r6, r0
   2a5e4:	mov	r1, r8
   2a5e8:	strd	sl, [r5]
   2a5ec:	mov	r0, r7
   2a5f0:	strb	ip, [sp, #132]	; 0x84
   2a5f4:	add	r4, r4, #1
   2a5f8:	bl	21be4 <__assert_fail@plt+0x10040>
   2a5fc:	clz	r3, r0
   2a600:	cmp	r6, #0
   2a604:	lsr	r3, r3, #5
   2a608:	moveq	ip, #1
   2a60c:	mov	r2, r0
   2a610:	mov	r1, r8
   2a614:	mov	r0, r7
   2a618:	movne	ip, r3
   2a61c:	subs	r3, ip, #0
   2a620:	bne	2a854 <__assert_fail@plt+0x18cb0>
   2a624:	mov	ip, #10
   2a628:	str	r5, [sp]
   2a62c:	strd	sl, [r5]
   2a630:	strb	ip, [sp, #132]	; 0x84
   2a634:	bl	21be4 <__assert_fail@plt+0x10040>
   2a638:	subs	sl, r0, #0
   2a63c:	beq	2a854 <__assert_fail@plt+0x18cb0>
   2a640:	cmp	r4, r9
   2a644:	ble	2a5bc <__assert_fail@plt+0x18a18>
   2a648:	mov	r2, sl
   2a64c:	ldrd	sl, [sp, #40]	; 0x28
   2a650:	ldr	r1, [sp, #36]	; 0x24
   2a654:	cmp	r1, #0
   2a658:	beq	2aac8 <__assert_fail@plt+0x18f24>
   2a65c:	mov	r3, r2
   2a660:	mov	r9, #0
   2a664:	str	r5, [sp]
   2a668:	mov	r2, r1
   2a66c:	mov	r1, r8
   2a670:	mov	r8, #0
   2a674:	mov	ip, #16
   2a678:	mov	r0, r7
   2a67c:	strd	r8, [r5]
   2a680:	strb	ip, [sp, #132]	; 0x84
   2a684:	bl	21be4 <__assert_fail@plt+0x10040>
   2a688:	ldr	r3, [sp, #204]	; 0xcc
   2a68c:	ldr	r3, [r3]
   2a690:	cmp	r3, #0
   2a694:	bne	2a96c <__assert_fail@plt+0x18dc8>
   2a698:	str	r0, [sp, #24]
   2a69c:	ldr	r3, [sp, #20]
   2a6a0:	ldrb	r5, [fp, #4]
   2a6a4:	tst	r3, #16777216	; 0x1000000
   2a6a8:	beq	2a4c8 <__assert_fail@plt+0x18924>
   2a6ac:	cmp	r5, #11
   2a6b0:	cmpne	r5, #23
   2a6b4:	bne	2a4c8 <__assert_fail@plt+0x18924>
   2a6b8:	ldr	r3, [sp, #24]
   2a6bc:	cmp	r3, #0
   2a6c0:	beq	2a6d8 <__assert_fail@plt+0x18b34>
   2a6c4:	movw	r1, #2240	; 0x8c0
   2a6c8:	movt	r1, #2
   2a6cc:	mov	r0, r3
   2a6d0:	mov	r2, #0
   2a6d4:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2a6d8:	mov	r2, #0
   2a6dc:	mov	r3, #13
   2a6e0:	str	r2, [sp, #24]
   2a6e4:	ldr	r2, [sp, #204]	; 0xcc
   2a6e8:	str	r3, [r2]
   2a6ec:	ldr	r0, [sp, #24]
   2a6f0:	add	sp, sp, #164	; 0xa4
   2a6f4:	ldrd	r4, [sp]
   2a6f8:	ldrd	r6, [sp, #8]
   2a6fc:	ldrd	r8, [sp, #16]
   2a700:	ldrd	sl, [sp, #24]
   2a704:	add	sp, sp, #32
   2a708:	pop	{pc}		; (ldr pc, [sp], #4)
   2a70c:	ldr	r4, [r5, #24]
   2a710:	mov	r1, r0
   2a714:	mov	r0, fp
   2a718:	ldr	r6, [sp, #20]
   2a71c:	add	r3, r4, #1
   2a720:	orr	r2, r6, #8388608	; 0x800000
   2a724:	str	r3, [r5, #24]
   2a728:	bl	296ec <__assert_fail@plt+0x17b48>
   2a72c:	ldr	r3, [sl, #40]	; 0x28
   2a730:	ldrb	r2, [fp, #4]
   2a734:	add	r3, r3, r0
   2a738:	cmp	r2, #9
   2a73c:	str	r3, [sl, #40]	; 0x28
   2a740:	moveq	r2, #0
   2a744:	beq	2aff4 <__assert_fail@plt+0x19450>
   2a748:	ldr	r3, [sp, #200]	; 0xc8
   2a74c:	mov	r2, fp
   2a750:	mov	r1, r5
   2a754:	add	r0, r3, #1
   2a758:	ldr	r3, [sp, #204]	; 0xcc
   2a75c:	stm	sp, {r0, r3}
   2a760:	mov	r3, r6
   2a764:	mov	r0, sl
   2a768:	bl	2bac0 <__assert_fail@plt+0x19f1c>
   2a76c:	ldr	r3, [sp, #204]	; 0xcc
   2a770:	mov	r2, r0
   2a774:	ldr	r3, [r3]
   2a778:	cmp	r3, #0
   2a77c:	bne	2a7b0 <__assert_fail@plt+0x18c0c>
   2a780:	ldrb	r1, [fp, #4]
   2a784:	cmp	r1, #9
   2a788:	beq	2aff4 <__assert_fail@plt+0x19450>
   2a78c:	cmp	r0, #0
   2a790:	beq	2a7a4 <__assert_fail@plt+0x18c00>
   2a794:	movw	r1, #2240	; 0x8c0
   2a798:	movt	r1, #2
   2a79c:	mov	r2, r3
   2a7a0:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2a7a4:	ldr	r2, [sp, #204]	; 0xcc
   2a7a8:	mov	r3, #8
   2a7ac:	str	r3, [r2]
   2a7b0:	mov	r3, #0
   2a7b4:	str	r3, [sp, #24]
   2a7b8:	b	2a6ec <__assert_fail@plt+0x18b48>
   2a7bc:	cmp	r4, #0
   2a7c0:	ble	2b8cc <__assert_fail@plt+0x19d28>
   2a7c4:	cmp	r4, #1
   2a7c8:	beq	2b868 <__assert_fail@plt+0x19cc4>
   2a7cc:	ldr	r6, [sp, #24]
   2a7d0:	mov	r7, #2
   2a7d4:	add	r5, sp, #128	; 0x80
   2a7d8:	str	r9, [sp, #36]	; 0x24
   2a7dc:	ldr	r3, [sp, #32]
   2a7e0:	strd	sl, [sp, #40]	; 0x28
   2a7e4:	mov	r9, r6
   2a7e8:	add	r1, r3, #56	; 0x38
   2a7ec:	add	r3, r3, #64	; 0x40
   2a7f0:	mov	sl, r3
   2a7f4:	mov	fp, r1
   2a7f8:	b	2a804 <__assert_fail@plt+0x18c60>
   2a7fc:	cmp	r7, r4
   2a800:	bgt	2aab4 <__assert_fail@plt+0x18f10>
   2a804:	mov	r0, r6
   2a808:	ldr	r1, [sp, #32]
   2a80c:	mov	r8, #0
   2a810:	bl	21cb4 <__assert_fail@plt+0x10110>
   2a814:	mov	r2, r9
   2a818:	mov	r9, #0
   2a81c:	str	r5, [sp]
   2a820:	mov	ip, #16
   2a824:	mov	r6, r0
   2a828:	mov	r3, r0
   2a82c:	mov	r1, sl
   2a830:	strd	r8, [r5]
   2a834:	mov	r0, fp
   2a838:	strb	ip, [sp, #132]	; 0x84
   2a83c:	add	r7, r7, #1
   2a840:	bl	21be4 <__assert_fail@plt+0x10040>
   2a844:	cmp	r0, #0
   2a848:	cmpne	r6, #0
   2a84c:	mov	r9, r0
   2a850:	bne	2a7fc <__assert_fail@plt+0x18c58>
   2a854:	ldr	r2, [sp, #204]	; 0xcc
   2a858:	mov	r3, #12
   2a85c:	str	r3, [r2]
   2a860:	movw	r1, #2240	; 0x8c0
   2a864:	movt	r1, #2
   2a868:	ldr	r0, [sp, #24]
   2a86c:	mov	r2, #0
   2a870:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2a874:	mov	r3, #0
   2a878:	str	r3, [sp, #24]
   2a87c:	b	2a6ec <__assert_fail@plt+0x18b48>
   2a880:	mov	r1, sl
   2a884:	mov	r0, fp
   2a888:	ldr	r2, [sp, #20]
   2a88c:	bl	296ec <__assert_fail@plt+0x17b48>
   2a890:	ldr	r3, [sl, #40]	; 0x28
   2a894:	ldr	r2, [sp, #24]
   2a898:	add	r0, r3, r0
   2a89c:	cmp	r2, #0
   2a8a0:	str	r0, [sl, #40]	; 0x28
   2a8a4:	beq	2a978 <__assert_fail@plt+0x18dd4>
   2a8a8:	ldr	r6, [sp, #24]
   2a8ac:	ldrb	r3, [r6, #24]
   2a8b0:	cmp	r3, #17
   2a8b4:	beq	2b8fc <__assert_fail@plt+0x19d58>
   2a8b8:	mov	r3, #0
   2a8bc:	mov	r9, #1
   2a8c0:	str	r3, [sp, #36]	; 0x24
   2a8c4:	mov	r3, #10
   2a8c8:	b	2a568 <__assert_fail@plt+0x189c4>
   2a8cc:	ldr	r6, [sp, #24]
   2a8d0:	mov	r3, #0
   2a8d4:	mvn	r9, #0
   2a8d8:	mov	r4, r3
   2a8dc:	str	r3, [sp, #36]	; 0x24
   2a8e0:	movw	r1, #64028	; 0xfa1c
   2a8e4:	movt	r1, #1
   2a8e8:	ldr	r2, [r6, #20]
   2a8ec:	mov	r0, r6
   2a8f0:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2a8f4:	cmn	r9, #1
   2a8f8:	bne	2a8c4 <__assert_fail@plt+0x18d20>
   2a8fc:	b	2a564 <__assert_fail@plt+0x189c0>
   2a900:	mov	r1, fp
   2a904:	mov	r0, sl
   2a908:	ldr	r2, [sp, #20]
   2a90c:	bl	2a058 <__assert_fail@plt+0x184b4>
   2a910:	cmn	r0, #1
   2a914:	mov	r4, r0
   2a918:	beq	2a994 <__assert_fail@plt+0x18df0>
   2a91c:	cmn	r0, #2
   2a920:	beq	2a938 <__assert_fail@plt+0x18d94>
   2a924:	ldrb	r3, [fp, #4]
   2a928:	cmp	r3, #24
   2a92c:	beq	2aa58 <__assert_fail@plt+0x18eb4>
   2a930:	cmp	r3, #1
   2a934:	beq	2aa80 <__assert_fail@plt+0x18edc>
   2a938:	ldr	r3, [sp, #20]
   2a93c:	tst	r3, #2097152	; 0x200000
   2a940:	beq	2b474 <__assert_fail@plt+0x198d0>
   2a944:	ldrd	r2, [r7]
   2a948:	mov	r1, #1
   2a94c:	str	r6, [sl, #40]	; 0x28
   2a950:	ldr	r0, [sp, #24]
   2a954:	strd	r2, [fp]
   2a958:	ldr	r3, [sp, #204]	; 0xcc
   2a95c:	strb	r1, [fp, #4]
   2a960:	ldr	r3, [r3]
   2a964:	cmp	r3, #0
   2a968:	beq	2a698 <__assert_fail@plt+0x18af4>
   2a96c:	cmp	r0, #0
   2a970:	bne	2a698 <__assert_fail@plt+0x18af4>
   2a974:	b	2aaa4 <__assert_fail@plt+0x18f00>
   2a978:	ldr	r3, [sp, #204]	; 0xcc
   2a97c:	ldr	r3, [r3]
   2a980:	cmp	r3, #0
   2a984:	bne	2a7b0 <__assert_fail@plt+0x18c0c>
   2a988:	mov	r3, #0
   2a98c:	str	r3, [sp, #24]
   2a990:	b	2a69c <__assert_fail@plt+0x18af8>
   2a994:	ldrb	r3, [fp, #4]
   2a998:	cmp	r3, #1
   2a99c:	bne	2aa98 <__assert_fail@plt+0x18ef4>
   2a9a0:	ldrb	r3, [fp]
   2a9a4:	cmp	r3, #44	; 0x2c
   2a9a8:	bne	2aa98 <__assert_fail@plt+0x18ef4>
   2a9ac:	mov	r4, #0
   2a9b0:	mov	r1, fp
   2a9b4:	mov	r0, sl
   2a9b8:	ldr	r2, [sp, #20]
   2a9bc:	bl	2a058 <__assert_fail@plt+0x184b4>
   2a9c0:	cmn	r0, #2
   2a9c4:	mov	r9, r0
   2a9c8:	beq	2a938 <__assert_fail@plt+0x18d94>
   2a9cc:	cmn	r0, #1
   2a9d0:	cmpne	r0, r4
   2a9d4:	blt	2aa98 <__assert_fail@plt+0x18ef4>
   2a9d8:	ldrb	r3, [fp, #4]
   2a9dc:	cmp	r3, #24
   2a9e0:	bne	2aa98 <__assert_fail@plt+0x18ef4>
   2a9e4:	cmn	r0, #1
   2a9e8:	bne	2aa5c <__assert_fail@plt+0x18eb8>
   2a9ec:	cmp	r4, #32768	; 0x8000
   2a9f0:	movlt	r5, #0
   2a9f4:	movge	r5, #1
   2a9f8:	cmp	r5, #0
   2a9fc:	bne	2aa70 <__assert_fail@plt+0x18ecc>
   2aa00:	mov	r1, sl
   2aa04:	mov	r0, fp
   2aa08:	ldr	r2, [sp, #20]
   2aa0c:	bl	296ec <__assert_fail@plt+0x17b48>
   2aa10:	ldr	r3, [sl, #40]	; 0x28
   2aa14:	ldr	ip, [sp, #24]
   2aa18:	add	r0, r3, r0
   2aa1c:	cmp	ip, #0
   2aa20:	str	r0, [sl, #40]	; 0x28
   2aa24:	beq	2a978 <__assert_fail@plt+0x18dd4>
   2aa28:	orrs	r3, r9, r4
   2aa2c:	bne	2a7bc <__assert_fail@plt+0x18c18>
   2aa30:	mov	r2, r5
   2aa34:	movw	r1, #2240	; 0x8c0
   2aa38:	movt	r1, #2
   2aa3c:	mov	r0, ip
   2aa40:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2aa44:	ldr	r3, [sp, #204]	; 0xcc
   2aa48:	ldr	r3, [r3]
   2aa4c:	cmp	r3, #0
   2aa50:	beq	2a988 <__assert_fail@plt+0x18de4>
   2aa54:	b	2a860 <__assert_fail@plt+0x18cbc>
   2aa58:	mov	r9, r0
   2aa5c:	cmp	r9, #32768	; 0x8000
   2aa60:	movlt	r5, #0
   2aa64:	movge	r5, #1
   2aa68:	cmp	r5, #0
   2aa6c:	beq	2aa00 <__assert_fail@plt+0x18e5c>
   2aa70:	ldr	r2, [sp, #204]	; 0xcc
   2aa74:	mov	r3, #15
   2aa78:	str	r3, [r2]
   2aa7c:	b	2aaa4 <__assert_fail@plt+0x18f00>
   2aa80:	ldrb	r3, [fp]
   2aa84:	cmp	r3, #44	; 0x2c
   2aa88:	beq	2a9b0 <__assert_fail@plt+0x18e0c>
   2aa8c:	ldr	r3, [sp, #20]
   2aa90:	tst	r3, #2097152	; 0x200000
   2aa94:	bne	2a944 <__assert_fail@plt+0x18da0>
   2aa98:	ldr	r2, [sp, #204]	; 0xcc
   2aa9c:	mov	r3, #10
   2aaa0:	str	r3, [r2]
   2aaa4:	ldr	r3, [sp, #24]
   2aaa8:	cmp	r3, #0
   2aaac:	beq	2a7b0 <__assert_fail@plt+0x18c0c>
   2aab0:	b	2a860 <__assert_fail@plt+0x18cbc>
   2aab4:	add	r9, sp, #36	; 0x24
   2aab8:	mov	r2, r0
   2aabc:	ldm	r9, {r9, sl, fp}
   2aac0:	cmp	r4, r9
   2aac4:	bne	2aae0 <__assert_fail@plt+0x18f3c>
   2aac8:	str	r2, [sp, #24]
   2aacc:	b	2a69c <__assert_fail@plt+0x18af8>
   2aad0:	ldr	r2, [sp, #24]
   2aad4:	mvn	r9, #0
   2aad8:	mov	r4, #1
   2aadc:	mov	r6, r2
   2aae0:	mov	r0, r6
   2aae4:	ldr	r1, [sp, #32]
   2aae8:	str	r2, [sp, #36]	; 0x24
   2aaec:	bl	21cb4 <__assert_fail@plt+0x10110>
   2aaf0:	subs	r6, r0, #0
   2aaf4:	ldr	r2, [sp, #36]	; 0x24
   2aaf8:	beq	2a854 <__assert_fail@plt+0x18cb0>
   2aafc:	ldrb	r3, [r6, #24]
   2ab00:	str	r2, [sp, #36]	; 0x24
   2ab04:	cmp	r3, #17
   2ab08:	bne	2a8f4 <__assert_fail@plt+0x18d50>
   2ab0c:	b	2a8e0 <__assert_fail@plt+0x18d3c>
   2ab10:	ldr	r4, [fp]
   2ab14:	movw	r3, #783	; 0x30f
   2ab18:	tst	r4, r3
   2ab1c:	beq	2ab80 <__assert_fail@plt+0x18fdc>
   2ab20:	ldr	r3, [sp, #32]
   2ab24:	ldrb	r3, [r3, #88]	; 0x58
   2ab28:	ands	r5, r3, #16
   2ab2c:	bne	2ab80 <__assert_fail@plt+0x18fdc>
   2ab30:	ldr	r0, [sp, #32]
   2ab34:	orr	r3, r3, #16
   2ab38:	ands	r2, r3, #8
   2ab3c:	mov	r1, r3
   2ab40:	strb	r3, [r0, #88]	; 0x58
   2ab44:	bne	2b7fc <__assert_fail@plt+0x19c58>
   2ab48:	mov	r3, #0
   2ab4c:	movt	r3, #1023	; 0x3ff
   2ab50:	tst	r1, #4
   2ab54:	mvn	r1, #2013265921	; 0x78000001
   2ab58:	strd	r2, [r0, #96]	; 0x60
   2ab5c:	mvn	r3, #-134217727	; 0xf8000001
   2ab60:	str	r1, [r0, #104]	; 0x68
   2ab64:	str	r3, [r0, #108]	; 0x6c
   2ab68:	beq	2b748 <__assert_fail@plt+0x19ba4>
   2ab6c:	str	r2, [r0, #112]	; 0x70
   2ab70:	str	r2, [r0, #116]	; 0x74
   2ab74:	str	r2, [r0, #120]	; 0x78
   2ab78:	str	r2, [r0, #124]	; 0x7c
   2ab7c:	ldr	r4, [fp]
   2ab80:	sub	r3, r4, #256	; 0x100
   2ab84:	ldr	r2, [sp, #32]
   2ab88:	bics	r3, r3, #256	; 0x100
   2ab8c:	add	r5, r2, #56	; 0x38
   2ab90:	add	r6, r2, #64	; 0x40
   2ab94:	bne	2b158 <__assert_fail@plt+0x195b4>
   2ab98:	cmp	r4, #256	; 0x100
   2ab9c:	beq	2b24c <__assert_fail@plt+0x196a8>
   2aba0:	mov	r0, #5
   2aba4:	mov	r2, r3
   2aba8:	str	fp, [sp]
   2abac:	mov	r1, r6
   2abb0:	str	r0, [fp]
   2abb4:	mov	r0, r5
   2abb8:	bl	21be4 <__assert_fail@plt+0x10040>
   2abbc:	mov	r7, r0
   2abc0:	mov	r3, #10
   2abc4:	str	r3, [fp]
   2abc8:	mov	r3, #0
   2abcc:	mov	r1, r6
   2abd0:	str	fp, [sp]
   2abd4:	mov	r2, r3
   2abd8:	mov	r0, r5
   2abdc:	bl	21be4 <__assert_fail@plt+0x10040>
   2abe0:	add	r3, sp, #128	; 0x80
   2abe4:	mov	r4, r0
   2abe8:	mov	ip, #10
   2abec:	mov	r8, #0
   2abf0:	mov	r9, #0
   2abf4:	mov	r1, r6
   2abf8:	str	r3, [sp]
   2abfc:	mov	r0, r5
   2ac00:	mov	r3, r4
   2ac04:	mov	r2, r7
   2ac08:	clz	r4, r4
   2ac0c:	strd	r8, [sp, #128]	; 0x80
   2ac10:	lsr	r4, r4, #5
   2ac14:	strb	ip, [sp, #132]	; 0x84
   2ac18:	bl	21be4 <__assert_fail@plt+0x10040>
   2ac1c:	cmp	r7, #0
   2ac20:	str	r0, [sp, #24]
   2ac24:	moveq	r4, #1
   2ac28:	cmp	r0, #0
   2ac2c:	movne	r3, r4
   2ac30:	moveq	r3, #1
   2ac34:	cmp	r3, #0
   2ac38:	bne	2ae78 <__assert_fail@plt+0x192d4>
   2ac3c:	mov	r0, fp
   2ac40:	mov	r1, sl
   2ac44:	ldr	r2, [sp, #20]
   2ac48:	bl	296ec <__assert_fail@plt+0x17b48>
   2ac4c:	ldr	r3, [sl, #40]	; 0x28
   2ac50:	add	r3, r3, r0
   2ac54:	str	r3, [sl, #40]	; 0x28
   2ac58:	b	2a6ec <__assert_fail@plt+0x18b48>
   2ac5c:	mov	r5, #0
   2ac60:	mov	r1, #1
   2ac64:	mov	r0, #32
   2ac68:	str	r5, [sp, #68]	; 0x44
   2ac6c:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   2ac70:	mov	r8, r0
   2ac74:	mov	r1, #1
   2ac78:	mov	r0, #40	; 0x28
   2ac7c:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   2ac80:	clz	r4, r0
   2ac84:	cmp	r8, r5
   2ac88:	lsr	r4, r4, #5
   2ac8c:	moveq	r4, #1
   2ac90:	mov	r9, r0
   2ac94:	cmp	r4, r5
   2ac98:	bne	2b490 <__assert_fail@plt+0x198ec>
   2ac9c:	mov	r1, sl
   2aca0:	mov	r0, fp
   2aca4:	ldr	r2, [sp, #20]
   2aca8:	bl	1f870 <__assert_fail@plt+0xdccc>
   2acac:	ldrb	r3, [fp, #4]
   2acb0:	mov	r5, r0
   2acb4:	cmp	r3, #2
   2acb8:	beq	2b464 <__assert_fail@plt+0x198c0>
   2acbc:	cmp	r3, #25
   2acc0:	strne	r4, [sp, #44]	; 0x2c
   2acc4:	beq	2b180 <__assert_fail@plt+0x195dc>
   2acc8:	ldr	r7, [sp, #20]
   2accc:	cmp	r3, #21
   2acd0:	mov	r0, #1
   2acd4:	moveq	r3, #1
   2acd8:	strbeq	r3, [fp, #4]
   2acdc:	mov	r3, #0
   2ace0:	ubfx	r2, r7, #16, #1
   2ace4:	str	r3, [sp, #24]
   2ace8:	str	r3, [sp, #40]	; 0x28
   2acec:	add	r3, sp, #96	; 0x60
   2acf0:	str	r3, [sp, #36]	; 0x24
   2acf4:	str	r2, [sp, #48]	; 0x30
   2acf8:	mov	ip, #3
   2acfc:	mov	r3, r5
   2ad00:	str	r7, [sp]
   2ad04:	mov	r2, fp
   2ad08:	mov	r1, sl
   2ad0c:	str	r0, [sp, #4]
   2ad10:	str	ip, [sp, #72]	; 0x48
   2ad14:	add	r0, sp, #72	; 0x48
   2ad18:	ldr	ip, [sp, #36]	; 0x24
   2ad1c:	str	ip, [sp, #76]	; 0x4c
   2ad20:	bl	2a128 <__assert_fail@plt+0x18584>
   2ad24:	cmp	r0, #0
   2ad28:	bne	2b238 <__assert_fail@plt+0x19694>
   2ad2c:	mov	r2, r7
   2ad30:	mov	r1, sl
   2ad34:	mov	r0, fp
   2ad38:	bl	1f870 <__assert_fail@plt+0xdccc>
   2ad3c:	ldr	r3, [sp, #72]	; 0x48
   2ad40:	mov	r5, r0
   2ad44:	sub	r2, r3, #2
   2ad48:	bics	r2, r2, #2
   2ad4c:	beq	2ad64 <__assert_fail@plt+0x191c0>
   2ad50:	ldrb	r2, [fp, #4]
   2ad54:	cmp	r2, #2
   2ad58:	beq	2b1dc <__assert_fail@plt+0x19638>
   2ad5c:	cmp	r2, #22
   2ad60:	beq	2b278 <__assert_fail@plt+0x196d4>
   2ad64:	cmp	r3, #4
   2ad68:	ldrls	pc, [pc, r3, lsl #2]
   2ad6c:	b	2b0b0 <__assert_fail@plt+0x1950c>
   2ad70:	muleq	r2, r0, r0
   2ad74:	andeq	fp, r2, r0, lsr r1
   2ad78:	andeq	fp, r2, r0, lsl r1
   2ad7c:	andeq	fp, r2, r8, asr r0
   2ad80:	strheq	fp, [r2], -r0
   2ad84:	ldr	r3, [sp, #32]
   2ad88:	str	fp, [sp]
   2ad8c:	add	r6, r3, #56	; 0x38
   2ad90:	add	r5, r3, #64	; 0x40
   2ad94:	mov	r3, #0
   2ad98:	mov	r0, r6
   2ad9c:	mov	r2, r3
   2ada0:	mov	r1, r5
   2ada4:	bl	21be4 <__assert_fail@plt+0x10040>
   2ada8:	subs	r3, r0, #0
   2adac:	str	r3, [sp, #24]
   2adb0:	beq	2ae78 <__assert_fail@plt+0x192d4>
   2adb4:	ldr	r3, [sp, #32]
   2adb8:	ldr	r3, [r3, #92]	; 0x5c
   2adbc:	cmp	r3, #1
   2adc0:	ble	2a4a8 <__assert_fail@plt+0x18904>
   2adc4:	mov	r9, #0
   2adc8:	mov	r8, #0
   2adcc:	ldr	r4, [sp, #24]
   2add0:	add	r7, sp, #128	; 0x80
   2add4:	strd	r8, [sp, #24]
   2add8:	mov	r9, r5
   2addc:	ldr	r3, [sl, #40]	; 0x28
   2ade0:	mov	r1, sl
   2ade4:	mov	r0, fp
   2ade8:	ldr	ip, [sl, #56]	; 0x38
   2adec:	ldr	r2, [sp, #20]
   2adf0:	cmp	ip, r3
   2adf4:	ble	2b244 <__assert_fail@plt+0x196a0>
   2adf8:	ldr	ip, [sl, #28]
   2adfc:	cmp	r3, ip
   2ae00:	beq	2b244 <__assert_fail@plt+0x196a0>
   2ae04:	ldr	ip, [sl, #8]
   2ae08:	ldr	r3, [ip, r3, lsl #2]
   2ae0c:	cmn	r3, #1
   2ae10:	bne	2b244 <__assert_fail@plt+0x196a0>
   2ae14:	bl	296ec <__assert_fail@plt+0x17b48>
   2ae18:	ldr	ip, [sl, #40]	; 0x28
   2ae1c:	mov	r3, #0
   2ae20:	mov	r1, r9
   2ae24:	mov	r2, r3
   2ae28:	str	fp, [sp]
   2ae2c:	add	ip, ip, r0
   2ae30:	mov	r0, r6
   2ae34:	str	ip, [sl, #40]	; 0x28
   2ae38:	bl	21be4 <__assert_fail@plt+0x10040>
   2ae3c:	mov	r5, r0
   2ae40:	mov	r3, r0
   2ae44:	ldrd	r0, [sp, #24]
   2ae48:	mov	ip, #16
   2ae4c:	mov	r2, r4
   2ae50:	str	r7, [sp]
   2ae54:	strd	r0, [r7]
   2ae58:	mov	r1, r9
   2ae5c:	mov	r0, r6
   2ae60:	strb	ip, [sp, #132]	; 0x84
   2ae64:	bl	21be4 <__assert_fail@plt+0x10040>
   2ae68:	cmp	r0, #0
   2ae6c:	cmpne	r5, #0
   2ae70:	mov	r4, r0
   2ae74:	bne	2addc <__assert_fail@plt+0x19238>
   2ae78:	mov	r2, #0
   2ae7c:	mov	r3, #12
   2ae80:	str	r2, [sp, #24]
   2ae84:	ldr	r2, [sp, #204]	; 0xcc
   2ae88:	str	r3, [r2]
   2ae8c:	b	2a6ec <__assert_fail@plt+0x18b48>
   2ae90:	sub	r1, r2, #33	; 0x21
   2ae94:	movw	r3, #13172	; 0x3374
   2ae98:	movt	r3, #3
   2ae9c:	clz	r1, r1
   2aea0:	lsr	r1, r1, #5
   2aea4:	movw	r2, #13100	; 0x332c
   2aea8:	movt	r2, #3
   2aeac:	str	r1, [sp]
   2aeb0:	ldr	r0, [sp, #32]
   2aeb4:	ldr	r1, [sp, #204]	; 0xcc
   2aeb8:	str	r1, [sp, #4]
   2aebc:	ldr	r1, [sl, #64]	; 0x40
   2aec0:	bl	2562c <__assert_fail@plt+0x13a88>
   2aec4:	ldr	r3, [sp, #204]	; 0xcc
   2aec8:	str	r0, [sp, #24]
   2aecc:	ldr	r2, [r3]
   2aed0:	clz	r3, r0
   2aed4:	lsr	r3, r3, #5
   2aed8:	cmp	r2, #0
   2aedc:	moveq	r3, #0
   2aee0:	cmp	r3, #0
   2aee4:	beq	2a4a8 <__assert_fail@plt+0x18904>
   2aee8:	b	2a7b0 <__assert_fail@plt+0x18c0c>
   2aeec:	sub	r1, r2, #35	; 0x23
   2aef0:	movw	r3, #11844	; 0x2e44
   2aef4:	movt	r3, #3
   2aef8:	clz	r1, r1
   2aefc:	movw	r2, #13116	; 0x333c
   2af00:	movt	r2, #3
   2af04:	lsr	r1, r1, #5
   2af08:	b	2aeac <__assert_fail@plt+0x19308>
   2af0c:	mov	r2, #0
   2af10:	mov	r3, #5
   2af14:	str	r2, [sp, #24]
   2af18:	ldr	r2, [sp, #204]	; 0xcc
   2af1c:	str	r3, [r2]
   2af20:	b	2a6ec <__assert_fail@plt+0x18b48>
   2af24:	ldr	r3, [sp, #32]
   2af28:	mov	ip, #1
   2af2c:	ldr	r2, [fp]
   2af30:	ldr	r3, [r3, #84]	; 0x54
   2af34:	lsl	ip, ip, r2
   2af38:	ands	r3, ip, r3
   2af3c:	beq	2b4b4 <__assert_fail@plt+0x19910>
   2af40:	ldr	r4, [sp, #32]
   2af44:	mov	r3, #0
   2af48:	mov	r2, r3
   2af4c:	ldr	lr, [r4, #80]	; 0x50
   2af50:	add	r1, r4, #64	; 0x40
   2af54:	add	r0, r4, #56	; 0x38
   2af58:	orr	ip, lr, ip
   2af5c:	str	ip, [r4, #80]	; 0x50
   2af60:	str	fp, [sp]
   2af64:	bl	21be4 <__assert_fail@plt+0x10040>
   2af68:	subs	r3, r0, #0
   2af6c:	str	r3, [sp, #24]
   2af70:	beq	2ae78 <__assert_fail@plt+0x192d4>
   2af74:	ldrb	r3, [r4, #88]	; 0x58
   2af78:	ldr	r2, [r4, #76]	; 0x4c
   2af7c:	orr	r3, r3, #2
   2af80:	add	r2, r2, #1
   2af84:	str	r2, [r4, #76]	; 0x4c
   2af88:	strb	r3, [r4, #88]	; 0x58
   2af8c:	b	2a4a8 <__assert_fail@plt+0x18904>
   2af90:	ldr	r4, [sp, #32]
   2af94:	mov	r3, #0
   2af98:	mov	r2, r3
   2af9c:	str	fp, [sp]
   2afa0:	add	r1, r4, #64	; 0x40
   2afa4:	add	r0, r4, #56	; 0x38
   2afa8:	bl	21be4 <__assert_fail@plt+0x10040>
   2afac:	subs	r3, r0, #0
   2afb0:	str	r3, [sp, #24]
   2afb4:	beq	2ae78 <__assert_fail@plt+0x192d4>
   2afb8:	ldr	r3, [r4, #92]	; 0x5c
   2afbc:	cmp	r3, #1
   2afc0:	ble	2a4a8 <__assert_fail@plt+0x18904>
   2afc4:	ldrb	r3, [r4, #88]	; 0x58
   2afc8:	orr	r3, r3, #2
   2afcc:	strb	r3, [r4, #88]	; 0x58
   2afd0:	b	2a4a8 <__assert_fail@plt+0x18904>
   2afd4:	ldr	r3, [sp, #20]
   2afd8:	ands	r3, r3, #131072	; 0x20000
   2afdc:	bne	2a478 <__assert_fail@plt+0x188d4>
   2afe0:	str	r3, [sp, #24]
   2afe4:	mov	r2, #16
   2afe8:	ldr	r3, [sp, #204]	; 0xcc
   2afec:	str	r2, [r3]
   2aff0:	b	2a6ec <__assert_fail@plt+0x18b48>
   2aff4:	cmp	r4, #8
   2aff8:	bls	2b040 <__assert_fail@plt+0x1949c>
   2affc:	ldr	r0, [sp, #32]
   2b000:	add	ip, sp, #128	; 0x80
   2b004:	mov	lr, #17
   2b008:	mov	r6, #0
   2b00c:	mov	r7, #0
   2b010:	mov	r3, #0
   2b014:	str	ip, [sp]
   2b018:	strd	r6, [sp, #128]	; 0x80
   2b01c:	strb	lr, [sp, #132]	; 0x84
   2b020:	add	r1, r0, #64	; 0x40
   2b024:	add	r0, r0, #56	; 0x38
   2b028:	bl	21be4 <__assert_fail@plt+0x10040>
   2b02c:	subs	r3, r0, #0
   2b030:	str	r3, [sp, #24]
   2b034:	beq	2ae78 <__assert_fail@plt+0x192d4>
   2b038:	str	r4, [r3, #20]
   2b03c:	b	2a4a8 <__assert_fail@plt+0x18904>
   2b040:	ldr	r0, [sp, #32]
   2b044:	mov	r1, #1
   2b048:	ldr	r3, [r0, #84]	; 0x54
   2b04c:	orr	r3, r3, r1, lsl r4
   2b050:	str	r3, [r0, #84]	; 0x54
   2b054:	b	2affc <__assert_fail@plt+0x19458>
   2b058:	mov	r0, r8
   2b05c:	ldr	r1, [sp, #76]	; 0x4c
   2b060:	bl	24d88 <__assert_fail@plt+0x131e4>
   2b064:	ldr	r3, [sp, #204]	; 0xcc
   2b068:	cmp	r0, #0
   2b06c:	str	r0, [r3]
   2b070:	bne	2b0e8 <__assert_fail@plt+0x19544>
   2b074:	ldrb	r3, [fp, #4]
   2b078:	cmp	r3, #2
   2b07c:	beq	2b1dc <__assert_fail@plt+0x19638>
   2b080:	cmp	r3, #21
   2b084:	beq	2b50c <__assert_fail@plt+0x19968>
   2b088:	mov	r0, #0
   2b08c:	b	2acf8 <__assert_fail@plt+0x19154>
   2b090:	ldrb	r3, [sp, #76]	; 0x4c
   2b094:	mov	r0, #1
   2b098:	asr	r1, r3, #5
   2b09c:	and	r3, r3, #31
   2b0a0:	ldr	r2, [r8, r1, lsl #2]
   2b0a4:	orr	r3, r2, r0, lsl r3
   2b0a8:	str	r3, [r8, r1, lsl #2]
   2b0ac:	b	2b074 <__assert_fail@plt+0x194d0>
   2b0b0:	ldr	ip, [sp, #76]	; 0x4c
   2b0b4:	add	r0, sp, #68	; 0x44
   2b0b8:	add	r3, r9, #36	; 0x24
   2b0bc:	add	r2, r9, #12
   2b0c0:	mov	r1, r8
   2b0c4:	str	r0, [sp]
   2b0c8:	str	r7, [sp, #8]
   2b0cc:	ldr	r0, [sl, #64]	; 0x40
   2b0d0:	str	ip, [sp, #4]
   2b0d4:	bl	24de4 <__assert_fail@plt+0x13240>
   2b0d8:	ldr	r3, [sp, #204]	; 0xcc
   2b0dc:	cmp	r0, #0
   2b0e0:	str	r0, [r3]
   2b0e4:	beq	2b074 <__assert_fail@plt+0x194d0>
   2b0e8:	mov	r0, r8
   2b0ec:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2b0f0:	mov	r0, r9
   2b0f4:	bl	2084c <__assert_fail@plt+0xeca8>
   2b0f8:	ldr	r3, [sp, #204]	; 0xcc
   2b0fc:	ldr	r3, [r3]
   2b100:	cmp	r3, #0
   2b104:	bne	2a7b0 <__assert_fail@plt+0x18c0c>
   2b108:	str	r3, [sp, #24]
   2b10c:	b	2a4a8 <__assert_fail@plt+0x18904>
   2b110:	mov	r0, r8
   2b114:	ldr	r1, [sp, #76]	; 0x4c
   2b118:	bl	24d88 <__assert_fail@plt+0x131e4>
   2b11c:	ldr	r3, [sp, #204]	; 0xcc
   2b120:	cmp	r0, #0
   2b124:	str	r0, [r3]
   2b128:	beq	2b074 <__assert_fail@plt+0x194d0>
   2b12c:	b	2b0e8 <__assert_fail@plt+0x19544>
   2b130:	ldr	r2, [sp, #24]
   2b134:	ldr	r3, [r9, #20]
   2b138:	ldr	r0, [r9]
   2b13c:	cmp	r3, r2
   2b140:	beq	2b4e4 <__assert_fail@plt+0x19940>
   2b144:	ldr	r2, [sp, #76]	; 0x4c
   2b148:	add	r1, r3, #1
   2b14c:	str	r1, [r9, #20]
   2b150:	str	r2, [r0, r3, lsl #2]
   2b154:	b	2b074 <__assert_fail@plt+0x194d0>
   2b158:	mov	r3, #0
   2b15c:	mov	r1, r6
   2b160:	str	fp, [sp]
   2b164:	mov	r2, r3
   2b168:	mov	r0, r5
   2b16c:	bl	21be4 <__assert_fail@plt+0x10040>
   2b170:	subs	r3, r0, #0
   2b174:	str	r3, [sp, #24]
   2b178:	bne	2ac3c <__assert_fail@plt+0x19098>
   2b17c:	b	2ae78 <__assert_fail@plt+0x192d4>
   2b180:	ldrb	r3, [r9, #16]
   2b184:	ldr	r2, [sp, #20]
   2b188:	orr	r3, r3, #1
   2b18c:	tst	r2, #256	; 0x100
   2b190:	strb	r3, [r9, #16]
   2b194:	beq	2b1a4 <__assert_fail@plt+0x19600>
   2b198:	ldr	r3, [r8]
   2b19c:	orr	r3, r3, #1024	; 0x400
   2b1a0:	str	r3, [r8]
   2b1a4:	ldr	r3, [sl, #40]	; 0x28
   2b1a8:	mov	r1, sl
   2b1ac:	mov	r0, fp
   2b1b0:	ldr	r2, [sp, #20]
   2b1b4:	add	r3, r3, r5
   2b1b8:	str	r3, [sl, #40]	; 0x28
   2b1bc:	bl	1f870 <__assert_fail@plt+0xdccc>
   2b1c0:	ldrb	r3, [fp, #4]
   2b1c4:	mov	r5, r0
   2b1c8:	cmp	r3, #2
   2b1cc:	beq	2b464 <__assert_fail@plt+0x198c0>
   2b1d0:	mov	r2, #1
   2b1d4:	str	r2, [sp, #44]	; 0x2c
   2b1d8:	b	2acc8 <__assert_fail@plt+0x19124>
   2b1dc:	ldr	r2, [sp, #204]	; 0xcc
   2b1e0:	mov	r3, #7
   2b1e4:	str	r3, [r2]
   2b1e8:	b	2b0e8 <__assert_fail@plt+0x19544>
   2b1ec:	mov	r2, r3
   2b1f0:	mov	r1, sl
   2b1f4:	mov	r0, fp
   2b1f8:	mov	r4, r3
   2b1fc:	bl	296ec <__assert_fail@plt+0x17b48>
   2b200:	ldr	lr, [sp, #200]	; 0xc8
   2b204:	mov	r3, r4
   2b208:	mov	r2, fp
   2b20c:	mov	r1, r5
   2b210:	ldr	ip, [sl, #40]	; 0x28
   2b214:	str	lr, [sp]
   2b218:	ldr	lr, [sp, #204]	; 0xcc
   2b21c:	add	ip, ip, r0
   2b220:	mov	r0, sl
   2b224:	str	lr, [sp, #4]
   2b228:	str	ip, [sl, #40]	; 0x28
   2b22c:	bl	2a37c <__assert_fail@plt+0x187d8>
   2b230:	str	r0, [sp, #24]
   2b234:	b	2a6ec <__assert_fail@plt+0x18b48>
   2b238:	ldr	r3, [sp, #204]	; 0xcc
   2b23c:	str	r0, [r3]
   2b240:	b	2b0e8 <__assert_fail@plt+0x19544>
   2b244:	str	r4, [sp, #24]
   2b248:	b	2a4a8 <__assert_fail@plt+0x18904>
   2b24c:	mov	r0, #6
   2b250:	mov	r2, r3
   2b254:	str	fp, [sp]
   2b258:	mov	r1, r6
   2b25c:	str	r0, [fp]
   2b260:	mov	r0, r5
   2b264:	bl	21be4 <__assert_fail@plt+0x10040>
   2b268:	mov	r3, #9
   2b26c:	mov	r7, r0
   2b270:	str	r3, [fp]
   2b274:	b	2abc8 <__assert_fail@plt+0x19024>
   2b278:	ldr	r3, [sl, #40]	; 0x28
   2b27c:	mov	r2, r7
   2b280:	add	r0, sp, #88	; 0x58
   2b284:	mov	r1, sl
   2b288:	add	r3, r3, r5
   2b28c:	str	r3, [sl, #40]	; 0x28
   2b290:	bl	1f870 <__assert_fail@plt+0xdccc>
   2b294:	ldrb	r2, [sp, #92]	; 0x5c
   2b298:	mov	r3, r0
   2b29c:	cmp	r2, #2
   2b2a0:	beq	2b1dc <__assert_fail@plt+0x19638>
   2b2a4:	cmp	r2, #21
   2b2a8:	beq	2b4c8 <__assert_fail@plt+0x19924>
   2b2ac:	mov	r1, #1
   2b2b0:	mov	r0, #3
   2b2b4:	str	r7, [sp]
   2b2b8:	add	ip, sp, #128	; 0x80
   2b2bc:	add	r2, sp, #88	; 0x58
   2b2c0:	str	r1, [sp, #4]
   2b2c4:	mov	r1, sl
   2b2c8:	str	r0, [sp, #80]	; 0x50
   2b2cc:	add	r0, sp, #80	; 0x50
   2b2d0:	str	ip, [sp, #84]	; 0x54
   2b2d4:	bl	2a128 <__assert_fail@plt+0x18584>
   2b2d8:	cmp	r0, #0
   2b2dc:	bne	2b238 <__assert_fail@plt+0x19694>
   2b2e0:	mov	r2, r7
   2b2e4:	mov	r1, sl
   2b2e8:	mov	r0, fp
   2b2ec:	bl	1f870 <__assert_fail@plt+0xdccc>
   2b2f0:	ldr	r2, [sp, #72]	; 0x48
   2b2f4:	mov	r5, r0
   2b2f8:	sub	r3, r2, #2
   2b2fc:	bics	r3, r3, #2
   2b300:	beq	2b738 <__assert_fail@plt+0x19b94>
   2b304:	ldr	r3, [sp, #80]	; 0x50
   2b308:	sub	r1, r3, #2
   2b30c:	bics	r1, r1, #2
   2b310:	beq	2b738 <__assert_fail@plt+0x19b94>
   2b314:	cmp	r2, #3
   2b318:	moveq	r1, #1
   2b31c:	movne	r1, #0
   2b320:	str	r1, [sp, #52]	; 0x34
   2b324:	beq	2b834 <__assert_fail@plt+0x19c90>
   2b328:	cmp	r3, #3
   2b32c:	beq	2b804 <__assert_fail@plt+0x19c60>
   2b330:	cmp	r2, #0
   2b334:	bne	2b720 <__assert_fail@plt+0x19b7c>
   2b338:	ldrb	r4, [sp, #76]	; 0x4c
   2b33c:	cmp	r3, #0
   2b340:	beq	2b730 <__assert_fail@plt+0x19b8c>
   2b344:	cmp	r3, #3
   2b348:	bne	2b718 <__assert_fail@plt+0x19b74>
   2b34c:	ldr	r1, [sp, #84]	; 0x54
   2b350:	ldrb	r6, [r1]
   2b354:	cmp	r2, #0
   2b358:	ldr	r1, [sp, #52]	; 0x34
   2b35c:	moveq	r1, #1
   2b360:	cmp	r1, #0
   2b364:	beq	2b710 <__assert_fail@plt+0x19b6c>
   2b368:	ldr	r2, [sp, #32]
   2b36c:	ldr	r2, [r2, #92]	; 0x5c
   2b370:	cmp	r2, #1
   2b374:	ble	2b6fc <__assert_fail@plt+0x19b58>
   2b378:	mov	r0, r4
   2b37c:	bl	119f4 <btowc@plt>
   2b380:	ldr	r3, [sp, #80]	; 0x50
   2b384:	mov	r4, r0
   2b388:	cmp	r3, #3
   2b38c:	cmpne	r3, #0
   2b390:	bne	2b708 <__assert_fail@plt+0x19b64>
   2b394:	ldr	r3, [sp, #32]
   2b398:	ldr	r3, [r3, #92]	; 0x5c
   2b39c:	cmp	r3, #1
   2b3a0:	ble	2b3b0 <__assert_fail@plt+0x1980c>
   2b3a4:	mov	r0, r6
   2b3a8:	bl	119f4 <btowc@plt>
   2b3ac:	mov	r6, r0
   2b3b0:	cmn	r4, #1
   2b3b4:	cmnne	r6, #1
   2b3b8:	beq	2b7ec <__assert_fail@plt+0x19c48>
   2b3bc:	ldr	r3, [sp, #48]	; 0x30
   2b3c0:	cmp	r4, r6
   2b3c4:	movls	r3, #0
   2b3c8:	andhi	r3, r3, #1
   2b3cc:	cmp	r3, #0
   2b3d0:	bne	2b738 <__assert_fail@plt+0x19b94>
   2b3d4:	ldr	r3, [sp, #32]
   2b3d8:	ldr	r3, [r3, #92]	; 0x5c
   2b3dc:	cmp	r3, #1
   2b3e0:	ble	2b410 <__assert_fail@plt+0x1986c>
   2b3e4:	ldr	r1, [sp, #40]	; 0x28
   2b3e8:	ldr	r3, [r9, #32]
   2b3ec:	ldr	r2, [r9, #4]
   2b3f0:	cmp	r3, r1
   2b3f4:	beq	2b874 <__assert_fail@plt+0x19cd0>
   2b3f8:	str	r4, [r2, r3, lsl #2]
   2b3fc:	ldr	r2, [r9, #8]
   2b400:	ldr	r3, [r9, #32]
   2b404:	add	r1, r3, #1
   2b408:	str	r1, [r9, #32]
   2b40c:	str	r6, [r2, r3, lsl #2]
   2b410:	mov	r3, #0
   2b414:	mov	ip, #1
   2b418:	cmp	r4, r3
   2b41c:	asr	r2, r3, #5
   2b420:	and	r0, r3, #31
   2b424:	movhi	r1, #0
   2b428:	movls	r1, #1
   2b42c:	cmp	r6, r3
   2b430:	add	r3, r3, #1
   2b434:	movcc	r1, #0
   2b438:	cmp	r1, #0
   2b43c:	beq	2b44c <__assert_fail@plt+0x198a8>
   2b440:	ldr	r1, [r8, r2, lsl #2]
   2b444:	orr	r1, r1, ip, lsl r0
   2b448:	str	r1, [r8, r2, lsl #2]
   2b44c:	cmp	r3, #256	; 0x100
   2b450:	bne	2b418 <__assert_fail@plt+0x19874>
   2b454:	ldr	r2, [sp, #204]	; 0xcc
   2b458:	mov	r3, #0
   2b45c:	str	r3, [r2]
   2b460:	b	2b074 <__assert_fail@plt+0x194d0>
   2b464:	ldr	r2, [sp, #204]	; 0xcc
   2b468:	mov	r3, #2
   2b46c:	str	r3, [r2]
   2b470:	b	2b0e8 <__assert_fail@plt+0x19544>
   2b474:	ldrb	r3, [fp, #4]
   2b478:	cmp	r3, #2
   2b47c:	bne	2aa98 <__assert_fail@plt+0x18ef4>
   2b480:	ldr	r2, [sp, #204]	; 0xcc
   2b484:	mov	r3, #9
   2b488:	str	r3, [r2]
   2b48c:	b	2aaa4 <__assert_fail@plt+0x18f00>
   2b490:	mov	r0, r8
   2b494:	str	r5, [sp, #24]
   2b498:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2b49c:	mov	r0, r9
   2b4a0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2b4a4:	ldr	r2, [sp, #204]	; 0xcc
   2b4a8:	mov	r3, #12
   2b4ac:	str	r3, [r2]
   2b4b0:	b	2a6ec <__assert_fail@plt+0x18b48>
   2b4b4:	str	r3, [sp, #24]
   2b4b8:	mov	r2, #6
   2b4bc:	ldr	r3, [sp, #204]	; 0xcc
   2b4c0:	str	r2, [r3]
   2b4c4:	b	2a6ec <__assert_fail@plt+0x18b48>
   2b4c8:	ldr	r2, [sl, #40]	; 0x28
   2b4cc:	mov	r1, #1
   2b4d0:	ldr	r3, [sp, #72]	; 0x48
   2b4d4:	sub	r2, r2, r5
   2b4d8:	str	r2, [sl, #40]	; 0x28
   2b4dc:	strb	r1, [fp, #4]
   2b4e0:	b	2ad64 <__assert_fail@plt+0x191c0>
   2b4e4:	lsl	r3, r2, #1
   2b4e8:	add	r3, r3, #1
   2b4ec:	lsl	r1, r3, #2
   2b4f0:	str	r3, [sp, #24]
   2b4f4:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   2b4f8:	cmp	r0, #0
   2b4fc:	beq	2b60c <__assert_fail@plt+0x19a68>
   2b500:	str	r0, [r9]
   2b504:	ldr	r3, [r9, #20]
   2b508:	b	2b144 <__assert_fail@plt+0x195a0>
   2b50c:	ldr	r3, [sl, #40]	; 0x28
   2b510:	ldr	r2, [sp, #44]	; 0x2c
   2b514:	add	r3, r3, r5
   2b518:	cmp	r2, #0
   2b51c:	str	r3, [sl, #40]	; 0x28
   2b520:	beq	2b540 <__assert_fail@plt+0x1999c>
   2b524:	sub	r3, r8, #4
   2b528:	add	r1, r8, #28
   2b52c:	ldr	r2, [r3, #4]!
   2b530:	mvn	r2, r2
   2b534:	cmp	r1, r3
   2b538:	str	r2, [r3]
   2b53c:	bne	2b52c <__assert_fail@plt+0x19988>
   2b540:	ldr	r3, [sp, #32]
   2b544:	ldr	r0, [r3, #92]	; 0x5c
   2b548:	cmp	r0, #1
   2b54c:	ble	2b57c <__assert_fail@plt+0x199d8>
   2b550:	ldr	r3, [sp, #32]
   2b554:	sub	r2, r8, #4
   2b558:	add	ip, r8, #28
   2b55c:	ldr	r3, [r3, #60]	; 0x3c
   2b560:	sub	r3, r3, #4
   2b564:	ldr	r1, [r2, #4]!
   2b568:	ldr	lr, [r3, #4]!
   2b56c:	cmp	ip, r2
   2b570:	and	r1, r1, lr
   2b574:	str	r1, [r2]
   2b578:	bne	2b564 <__assert_fail@plt+0x199c0>
   2b57c:	ldr	r3, [r9, #20]
   2b580:	cmp	r3, #0
   2b584:	bne	2b61c <__assert_fail@plt+0x19a78>
   2b588:	ldr	r3, [r9, #24]
   2b58c:	cmp	r3, #0
   2b590:	bne	2b61c <__assert_fail@plt+0x19a78>
   2b594:	ldr	r3, [r9, #28]
   2b598:	cmp	r3, #0
   2b59c:	bne	2b61c <__assert_fail@plt+0x19a78>
   2b5a0:	ldr	r3, [r9, #32]
   2b5a4:	cmp	r3, #0
   2b5a8:	bne	2b61c <__assert_fail@plt+0x19a78>
   2b5ac:	cmp	r0, #1
   2b5b0:	ble	2b5cc <__assert_fail@plt+0x19a28>
   2b5b4:	ldr	r3, [r9, #36]	; 0x24
   2b5b8:	cmp	r3, #0
   2b5bc:	bne	2b61c <__assert_fail@plt+0x19a78>
   2b5c0:	ldrb	r3, [r9, #16]
   2b5c4:	tst	r3, #1
   2b5c8:	bne	2b61c <__assert_fail@plt+0x19a78>
   2b5cc:	mov	r0, r9
   2b5d0:	bl	2084c <__assert_fail@plt+0xeca8>
   2b5d4:	ldr	r0, [sp, #32]
   2b5d8:	mov	r3, #0
   2b5dc:	mov	ip, #3
   2b5e0:	str	r8, [sp, #96]	; 0x60
   2b5e4:	ldr	r2, [sp, #36]	; 0x24
   2b5e8:	add	r1, r0, #64	; 0x40
   2b5ec:	add	r0, r0, #56	; 0x38
   2b5f0:	str	r2, [sp]
   2b5f4:	mov	r2, r3
   2b5f8:	strb	ip, [sp, #100]	; 0x64
   2b5fc:	bl	21be4 <__assert_fail@plt+0x10040>
   2b600:	subs	r3, r0, #0
   2b604:	str	r3, [sp, #24]
   2b608:	bne	2a4a8 <__assert_fail@plt+0x18904>
   2b60c:	ldr	r2, [sp, #204]	; 0xcc
   2b610:	mov	r3, #12
   2b614:	str	r3, [r2]
   2b618:	b	2b0e8 <__assert_fail@plt+0x19544>
   2b61c:	ldr	r4, [sp, #32]
   2b620:	mov	r3, #0
   2b624:	mov	lr, #6
   2b628:	mov	r2, r3
   2b62c:	ldrb	ip, [r4, #88]	; 0x58
   2b630:	add	r7, r4, #56	; 0x38
   2b634:	add	r6, r4, #64	; 0x40
   2b638:	mov	r0, r7
   2b63c:	mov	r1, r6
   2b640:	orr	ip, ip, #2
   2b644:	strb	ip, [r4, #88]	; 0x58
   2b648:	ldr	ip, [sp, #36]	; 0x24
   2b64c:	str	ip, [sp]
   2b650:	str	r9, [sp, #96]	; 0x60
   2b654:	strb	lr, [sp, #100]	; 0x64
   2b658:	bl	21be4 <__assert_fail@plt+0x10040>
   2b65c:	subs	r3, r0, #0
   2b660:	str	r3, [sp, #24]
   2b664:	beq	2b60c <__assert_fail@plt+0x19a68>
   2b668:	sub	r3, r8, #4
   2b66c:	add	r2, r8, #28
   2b670:	ldr	r1, [r3, #4]!
   2b674:	cmp	r1, #0
   2b678:	bne	2b690 <__assert_fail@plt+0x19aec>
   2b67c:	cmp	r2, r3
   2b680:	bne	2b670 <__assert_fail@plt+0x19acc>
   2b684:	mov	r0, r8
   2b688:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2b68c:	b	2a4a8 <__assert_fail@plt+0x18904>
   2b690:	ldr	r2, [sp, #36]	; 0x24
   2b694:	mov	ip, #3
   2b698:	mov	r3, #0
   2b69c:	mov	r1, r6
   2b6a0:	mov	r0, r7
   2b6a4:	str	r2, [sp]
   2b6a8:	mov	r2, r3
   2b6ac:	str	r8, [sp, #96]	; 0x60
   2b6b0:	strb	ip, [sp, #100]	; 0x64
   2b6b4:	bl	21be4 <__assert_fail@plt+0x10040>
   2b6b8:	subs	r2, r0, #0
   2b6bc:	beq	2b60c <__assert_fail@plt+0x19a68>
   2b6c0:	add	ip, sp, #128	; 0x80
   2b6c4:	mov	r4, #0
   2b6c8:	ldr	r3, [sp, #24]
   2b6cc:	mov	r5, #0
   2b6d0:	mov	r1, r6
   2b6d4:	str	ip, [sp]
   2b6d8:	mov	ip, #10
   2b6dc:	mov	r0, r7
   2b6e0:	strd	r4, [sp, #128]	; 0x80
   2b6e4:	strb	ip, [sp, #132]	; 0x84
   2b6e8:	bl	21be4 <__assert_fail@plt+0x10040>
   2b6ec:	subs	r3, r0, #0
   2b6f0:	str	r3, [sp, #24]
   2b6f4:	bne	2a4a8 <__assert_fail@plt+0x18904>
   2b6f8:	b	2b60c <__assert_fail@plt+0x19a68>
   2b6fc:	cmp	r3, #0
   2b700:	cmpne	r3, #3
   2b704:	beq	2b3bc <__assert_fail@plt+0x19818>
   2b708:	ldr	r6, [sp, #84]	; 0x54
   2b70c:	b	2b3b0 <__assert_fail@plt+0x1980c>
   2b710:	ldr	r4, [sp, #76]	; 0x4c
   2b714:	b	2b388 <__assert_fail@plt+0x197e4>
   2b718:	mov	r6, #0
   2b71c:	b	2b354 <__assert_fail@plt+0x197b0>
   2b720:	cmp	r3, #0
   2b724:	movne	r4, #0
   2b728:	bne	2b718 <__assert_fail@plt+0x19b74>
   2b72c:	mov	r4, r3
   2b730:	ldrb	r6, [sp, #84]	; 0x54
   2b734:	b	2b354 <__assert_fail@plt+0x197b0>
   2b738:	ldr	r2, [sp, #204]	; 0xcc
   2b73c:	mov	r3, #11
   2b740:	str	r3, [r2]
   2b744:	b	2b0e8 <__assert_fail@plt+0x19544>
   2b748:	mov	r5, #128	; 0x80
   2b74c:	mov	r7, #4
   2b750:	bl	11964 <__ctype_b_loc@plt>
   2b754:	ldr	r2, [r0]
   2b758:	add	ip, r7, #24
   2b75c:	sub	r3, r5, #-2147483647	; 0x80000001
   2b760:	mov	lr, #1
   2b764:	ldr	r1, [sp, #32]
   2b768:	add	r6, r2, r3, lsl lr
   2b76c:	add	ip, r1, ip, lsl #2
   2b770:	add	r7, r1, #128	; 0x80
   2b774:	mov	r0, r6
   2b778:	mov	r1, #0
   2b77c:	ldrh	r2, [r0, #2]!
   2b780:	add	r3, r5, r1
   2b784:	ubfx	r2, r2, #3, #1
   2b788:	cmp	r3, #95	; 0x5f
   2b78c:	movne	r3, r2
   2b790:	orreq	r3, r2, #1
   2b794:	cmp	r3, #0
   2b798:	beq	2b7a8 <__assert_fail@plt+0x19c04>
   2b79c:	ldr	r3, [ip]
   2b7a0:	orr	r3, r3, lr, lsl r1
   2b7a4:	str	r3, [ip]
   2b7a8:	add	r1, r1, #1
   2b7ac:	cmp	r1, #32
   2b7b0:	bne	2b77c <__assert_fail@plt+0x19bd8>
   2b7b4:	add	ip, ip, #4
   2b7b8:	add	r5, r5, #32
   2b7bc:	cmp	r7, ip
   2b7c0:	add	r6, r6, #64	; 0x40
   2b7c4:	bne	2b774 <__assert_fail@plt+0x19bd0>
   2b7c8:	b	2ab80 <__assert_fail@plt+0x18fdc>
   2b7cc:	ldr	r0, [sp, #84]	; 0x54
   2b7d0:	str	r3, [sp, #56]	; 0x38
   2b7d4:	str	r2, [sp, #60]	; 0x3c
   2b7d8:	bl	11988 <strlen@plt>
   2b7dc:	cmp	r0, #1
   2b7e0:	ldr	r3, [sp, #56]	; 0x38
   2b7e4:	ldr	r2, [sp, #60]	; 0x3c
   2b7e8:	bls	2b85c <__assert_fail@plt+0x19cb8>
   2b7ec:	ldr	r2, [sp, #204]	; 0xcc
   2b7f0:	mov	r3, #3
   2b7f4:	str	r3, [r2]
   2b7f8:	b	2b0e8 <__assert_fail@plt+0x19544>
   2b7fc:	mov	r7, r5
   2b800:	b	2b750 <__assert_fail@plt+0x19bac>
   2b804:	ldr	r0, [sp, #84]	; 0x54
   2b808:	str	r3, [sp, #56]	; 0x38
   2b80c:	str	r2, [sp, #60]	; 0x3c
   2b810:	bl	11988 <strlen@plt>
   2b814:	cmp	r0, #1
   2b818:	bhi	2b7ec <__assert_fail@plt+0x19c48>
   2b81c:	ldr	r3, [sp, #56]	; 0x38
   2b820:	ldr	r2, [sp, #60]	; 0x3c
   2b824:	cmp	r2, #0
   2b828:	movne	r4, #0
   2b82c:	bne	2b34c <__assert_fail@plt+0x197a8>
   2b830:	b	2b338 <__assert_fail@plt+0x19794>
   2b834:	ldr	r0, [sp, #76]	; 0x4c
   2b838:	str	r3, [sp, #56]	; 0x38
   2b83c:	str	r2, [sp, #60]	; 0x3c
   2b840:	bl	11988 <strlen@plt>
   2b844:	cmp	r0, #1
   2b848:	ldr	r3, [sp, #56]	; 0x38
   2b84c:	ldr	r2, [sp, #60]	; 0x3c
   2b850:	bhi	2b7ec <__assert_fail@plt+0x19c48>
   2b854:	cmp	r3, #3
   2b858:	beq	2b7cc <__assert_fail@plt+0x19c28>
   2b85c:	ldr	r1, [sp, #76]	; 0x4c
   2b860:	ldrb	r4, [r1]
   2b864:	b	2b33c <__assert_fail@plt+0x19798>
   2b868:	ldr	r6, [sp, #24]
   2b86c:	mov	r2, r6
   2b870:	b	2aac0 <__assert_fail@plt+0x18f1c>
   2b874:	lsl	r3, r1, #1
   2b878:	mov	r0, r2
   2b87c:	add	r3, r3, #1
   2b880:	str	r3, [sp, #40]	; 0x28
   2b884:	lsl	r3, r3, #2
   2b888:	mov	r1, r3
   2b88c:	str	r3, [sp, #56]	; 0x38
   2b890:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   2b894:	ldr	r3, [sp, #56]	; 0x38
   2b898:	mov	r2, r0
   2b89c:	ldr	r0, [r9, #8]
   2b8a0:	str	r2, [sp, #52]	; 0x34
   2b8a4:	mov	r1, r3
   2b8a8:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   2b8ac:	ldr	r2, [sp, #52]	; 0x34
   2b8b0:	cmp	r0, #0
   2b8b4:	cmpne	r2, #0
   2b8b8:	beq	2b8d8 <__assert_fail@plt+0x19d34>
   2b8bc:	str	r2, [r9, #4]
   2b8c0:	str	r0, [r9, #8]
   2b8c4:	ldr	r3, [r9, #32]
   2b8c8:	b	2b3f8 <__assert_fail@plt+0x19854>
   2b8cc:	mov	r2, r5
   2b8d0:	ldr	r6, [sp, #24]
   2b8d4:	b	2aafc <__assert_fail@plt+0x18f58>
   2b8d8:	mov	r7, r0
   2b8dc:	mov	r0, r2
   2b8e0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2b8e4:	mov	r0, r7
   2b8e8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2b8ec:	ldr	r2, [sp, #204]	; 0xcc
   2b8f0:	mov	r3, #12
   2b8f4:	str	r3, [r2]
   2b8f8:	b	2b0e8 <__assert_fail@plt+0x19544>
   2b8fc:	mov	r3, #0
   2b900:	mov	r9, #1
   2b904:	ldr	r6, [sp, #24]
   2b908:	str	r3, [sp, #36]	; 0x24
   2b90c:	b	2a8e0 <__assert_fail@plt+0x18d3c>
   2b910:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b914:	ldr	ip, [r1]
   2b918:	strd	r6, [sp, #8]
   2b91c:	mov	r7, r2
   2b920:	strd	r8, [sp, #16]
   2b924:	mov	r8, r1
   2b928:	mov	r9, r0
   2b92c:	strd	sl, [sp, #24]
   2b930:	mov	sl, r3
   2b934:	str	lr, [sp, #32]
   2b938:	sub	sp, sp, #36	; 0x24
   2b93c:	ldr	r6, [sp, #72]	; 0x48
   2b940:	ldr	r5, [sp, #76]	; 0x4c
   2b944:	str	r6, [sp]
   2b948:	str	ip, [sp, #20]
   2b94c:	str	r5, [sp, #4]
   2b950:	bl	2a37c <__assert_fail@plt+0x187d8>
   2b954:	ldr	r2, [r5]
   2b958:	clz	r3, r0
   2b95c:	lsr	r3, r3, #5
   2b960:	cmp	r2, #0
   2b964:	moveq	r3, #0
   2b968:	cmp	r3, #0
   2b96c:	bne	2bab8 <__assert_fail@plt+0x19f14>
   2b970:	mov	r4, r0
   2b974:	str	r9, [sp, #12]
   2b978:	str	r8, [sp, #16]
   2b97c:	ldrb	lr, [r7, #4]
   2b980:	clz	ip, r6
   2b984:	mov	r3, sl
   2b988:	mov	r2, r7
   2b98c:	lsr	ip, ip, #5
   2b990:	ldrd	r0, [sp, #12]
   2b994:	and	fp, lr, #247	; 0xf7
   2b998:	cmp	fp, #2
   2b99c:	beq	2ba7c <__assert_fail@plt+0x19ed8>
   2b9a0:	cmp	lr, #9
   2b9a4:	orrne	ip, ip, #1
   2b9a8:	cmp	ip, #0
   2b9ac:	beq	2ba7c <__assert_fail@plt+0x19ed8>
   2b9b0:	str	r6, [sp]
   2b9b4:	str	r5, [sp, #4]
   2b9b8:	bl	2a37c <__assert_fail@plt+0x187d8>
   2b9bc:	ldr	r2, [r5]
   2b9c0:	clz	r3, r0
   2b9c4:	mov	fp, r0
   2b9c8:	lsr	r3, r3, #5
   2b9cc:	cmp	r2, #0
   2b9d0:	moveq	r3, #0
   2b9d4:	cmp	r3, #0
   2b9d8:	bne	2ba9c <__assert_fail@plt+0x19ef8>
   2b9dc:	cmp	r4, #0
   2b9e0:	cmpne	r0, #0
   2b9e4:	bne	2b9f4 <__assert_fail@plt+0x19e50>
   2b9e8:	cmp	r4, #0
   2b9ec:	moveq	r4, r0
   2b9f0:	b	2b97c <__assert_fail@plt+0x19dd8>
   2b9f4:	mov	r3, r0
   2b9f8:	ldr	r0, [sp, #20]
   2b9fc:	add	r1, sp, #24
   2ba00:	mov	ip, #16
   2ba04:	mov	r8, #0
   2ba08:	mov	r9, #0
   2ba0c:	mov	r2, r4
   2ba10:	str	r1, [sp]
   2ba14:	strd	r8, [sp, #24]
   2ba18:	add	r1, r0, #64	; 0x40
   2ba1c:	add	r0, r0, #56	; 0x38
   2ba20:	strb	ip, [sp, #28]
   2ba24:	bl	21be4 <__assert_fail@plt+0x10040>
   2ba28:	cmp	r0, #0
   2ba2c:	beq	2ba38 <__assert_fail@plt+0x19e94>
   2ba30:	mov	r4, r0
   2ba34:	b	2b97c <__assert_fail@plt+0x19dd8>
   2ba38:	mov	r3, r0
   2ba3c:	movw	r1, #2240	; 0x8c0
   2ba40:	movt	r1, #2
   2ba44:	mov	r2, r3
   2ba48:	mov	r0, fp
   2ba4c:	str	r3, [sp, #12]
   2ba50:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2ba54:	ldr	r3, [sp, #12]
   2ba58:	mov	r0, r4
   2ba5c:	movw	r1, #2240	; 0x8c0
   2ba60:	movt	r1, #2
   2ba64:	mov	r2, r3
   2ba68:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2ba6c:	ldr	r3, [sp, #12]
   2ba70:	mov	r2, #12
   2ba74:	str	r2, [r5]
   2ba78:	mov	r4, r3
   2ba7c:	mov	r0, r4
   2ba80:	add	sp, sp, #36	; 0x24
   2ba84:	ldrd	r4, [sp]
   2ba88:	ldrd	r6, [sp, #8]
   2ba8c:	ldrd	r8, [sp, #16]
   2ba90:	ldrd	sl, [sp, #24]
   2ba94:	add	sp, sp, #32
   2ba98:	pop	{pc}		; (ldr pc, [sp], #4)
   2ba9c:	cmp	r4, #0
   2baa0:	beq	2bab8 <__assert_fail@plt+0x19f14>
   2baa4:	movw	r1, #2240	; 0x8c0
   2baa8:	movt	r1, #2
   2baac:	mov	r0, r4
   2bab0:	mov	r2, #0
   2bab4:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2bab8:	mov	r4, #0
   2babc:	b	2ba7c <__assert_fail@plt+0x19ed8>
   2bac0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bac4:	mov	r5, r2
   2bac8:	ldr	r4, [r1]
   2bacc:	ldr	ip, [r4, #84]	; 0x54
   2bad0:	strd	r6, [sp, #8]
   2bad4:	mov	r6, r0
   2bad8:	strd	r8, [sp, #16]
   2badc:	strd	sl, [sp, #24]
   2bae0:	mov	fp, r3
   2bae4:	mov	sl, r1
   2bae8:	str	lr, [sp, #32]
   2baec:	sub	sp, sp, #36	; 0x24
   2baf0:	ldrd	r8, [sp, #72]	; 0x48
   2baf4:	strd	r8, [sp]
   2baf8:	str	r3, [sp, #12]
   2bafc:	str	ip, [sp, #20]
   2bb00:	bl	2b910 <__assert_fail@plt+0x19d6c>
   2bb04:	ldr	r2, [r9]
   2bb08:	clz	r3, r0
   2bb0c:	lsr	r3, r3, #5
   2bb10:	cmp	r2, #0
   2bb14:	moveq	r3, #0
   2bb18:	cmp	r3, #0
   2bb1c:	bne	2bc34 <__assert_fail@plt+0x1a090>
   2bb20:	orr	r3, fp, #8388608	; 0x800000
   2bb24:	mov	r7, r0
   2bb28:	str	r3, [sp, #8]
   2bb2c:	str	sl, [sp, #16]
   2bb30:	b	2bbb8 <__assert_fail@plt+0x1a014>
   2bb34:	cmp	fp, #9
   2bb38:	orrne	ip, ip, #1
   2bb3c:	cmp	ip, #0
   2bb40:	beq	2bc10 <__assert_fail@plt+0x1a06c>
   2bb44:	ldr	ip, [sp, #20]
   2bb48:	ldr	fp, [r4, #84]	; 0x54
   2bb4c:	str	ip, [r4, #84]	; 0x54
   2bb50:	strd	r8, [sp]
   2bb54:	bl	2b910 <__assert_fail@plt+0x19d6c>
   2bb58:	ldr	r1, [r9]
   2bb5c:	clz	r2, r0
   2bb60:	mov	r3, r0
   2bb64:	lsr	r2, r2, #5
   2bb68:	cmp	r1, #0
   2bb6c:	moveq	r2, #0
   2bb70:	cmp	r2, #0
   2bb74:	bne	2bc18 <__assert_fail@plt+0x1a074>
   2bb78:	ldr	r2, [r4, #84]	; 0x54
   2bb7c:	orr	fp, r2, fp
   2bb80:	str	fp, [r4, #84]	; 0x54
   2bb84:	add	r1, sp, #24
   2bb88:	mov	ip, #10
   2bb8c:	mov	sl, #0
   2bb90:	mov	fp, #0
   2bb94:	mov	r2, r7
   2bb98:	add	r0, r4, #56	; 0x38
   2bb9c:	str	r1, [sp]
   2bba0:	add	r1, r4, #64	; 0x40
   2bba4:	strd	sl, [sp, #24]
   2bba8:	strb	ip, [sp, #28]
   2bbac:	bl	21be4 <__assert_fail@plt+0x10040>
   2bbb0:	subs	r7, r0, #0
   2bbb4:	beq	2bc58 <__assert_fail@plt+0x1a0b4>
   2bbb8:	ldrb	r3, [r5, #4]
   2bbbc:	mov	r1, r6
   2bbc0:	mov	r0, r5
   2bbc4:	ldr	r2, [sp, #8]
   2bbc8:	cmp	r3, #10
   2bbcc:	bne	2bc38 <__assert_fail@plt+0x1a094>
   2bbd0:	bl	296ec <__assert_fail@plt+0x17b48>
   2bbd4:	ldr	lr, [r6, #40]	; 0x28
   2bbd8:	clz	ip, r8
   2bbdc:	mov	r2, r5
   2bbe0:	lsr	ip, ip, #5
   2bbe4:	ldrb	fp, [r5, #4]
   2bbe8:	ldr	r3, [sp, #12]
   2bbec:	add	lr, lr, r0
   2bbf0:	mov	r0, r6
   2bbf4:	ldr	r1, [sp, #16]
   2bbf8:	str	lr, [r6, #40]	; 0x28
   2bbfc:	and	lr, fp, #247	; 0xf7
   2bc00:	cmp	lr, #2
   2bc04:	bne	2bb34 <__assert_fail@plt+0x19f90>
   2bc08:	mov	r3, #0
   2bc0c:	b	2bb84 <__assert_fail@plt+0x19fe0>
   2bc10:	mov	r3, ip
   2bc14:	b	2bb84 <__assert_fail@plt+0x19fe0>
   2bc18:	cmp	r7, #0
   2bc1c:	beq	2bc34 <__assert_fail@plt+0x1a090>
   2bc20:	movw	r1, #2240	; 0x8c0
   2bc24:	movt	r1, #2
   2bc28:	mov	r0, r7
   2bc2c:	mov	r2, #0
   2bc30:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2bc34:	mov	r7, #0
   2bc38:	mov	r0, r7
   2bc3c:	add	sp, sp, #36	; 0x24
   2bc40:	ldrd	r4, [sp]
   2bc44:	ldrd	r6, [sp, #8]
   2bc48:	ldrd	r8, [sp, #16]
   2bc4c:	ldrd	sl, [sp, #24]
   2bc50:	add	sp, sp, #32
   2bc54:	pop	{pc}		; (ldr pc, [sp], #4)
   2bc58:	mov	r3, #12
   2bc5c:	str	r3, [r9]
   2bc60:	b	2bc38 <__assert_fail@plt+0x1a094>
   2bc64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bc68:	mov	r5, r0
   2bc6c:	ldr	r4, [r0]
   2bc70:	strd	r6, [sp, #8]
   2bc74:	mov	r7, r3
   2bc78:	mov	r6, r2
   2bc7c:	ldrb	r3, [r0, #28]
   2bc80:	mov	r0, #0
   2bc84:	strd	r8, [sp, #16]
   2bc88:	mov	r8, r1
   2bc8c:	ldr	r2, [r5, #4]
   2bc90:	strd	sl, [sp, #24]
   2bc94:	str	lr, [sp, #32]
   2bc98:	sub	sp, sp, #140	; 0x8c
   2bc9c:	bic	r3, r3, #111	; 0x6f
   2bca0:	str	r0, [r5, #8]
   2bca4:	str	r7, [r5, #12]
   2bca8:	cmp	r2, #159	; 0x9f
   2bcac:	str	r0, [r5, #24]
   2bcb0:	strb	r3, [r5, #28]
   2bcb4:	str	r0, [sp, #28]
   2bcb8:	bls	2c83c <__assert_fail@plt+0x1ac98>
   2bcbc:	mov	r3, #160	; 0xa0
   2bcc0:	mov	r1, #0
   2bcc4:	mov	r2, r3
   2bcc8:	mov	r0, r4
   2bccc:	str	r3, [r5, #8]
   2bcd0:	bl	119e8 <memset@plt>
   2bcd4:	movw	r3, #43689	; 0xaaa9
   2bcd8:	movt	r3, #2730	; 0xaaa
   2bcdc:	mov	r2, #31
   2bce0:	cmp	r6, r3
   2bce4:	str	r2, [r4, #64]	; 0x40
   2bce8:	bhi	2c2ec <__assert_fail@plt+0x1a748>
   2bcec:	add	r9, r6, #1
   2bcf0:	lsl	r0, r9, #3
   2bcf4:	str	r9, [r4, #4]
   2bcf8:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2bcfc:	cmp	r6, #0
   2bd00:	str	r0, [r4]
   2bd04:	beq	2c860 <__assert_fail@plt+0x1acbc>
   2bd08:	mov	r1, #1
   2bd0c:	lsl	r1, r1, #1
   2bd10:	cmp	r6, r1
   2bd14:	bcs	2bd0c <__assert_fail@plt+0x1a168>
   2bd18:	sub	sl, r1, #1
   2bd1c:	mov	r0, #12
   2bd20:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   2bd24:	str	r0, [r4, #32]
   2bd28:	str	sl, [r4, #68]	; 0x44
   2bd2c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   2bd30:	str	r0, [r4, #92]	; 0x5c
   2bd34:	mov	r0, #14
   2bd38:	bl	11a84 <nl_langinfo@plt>
   2bd3c:	ldrb	r3, [r0]
   2bd40:	and	r3, r3, #223	; 0xdf
   2bd44:	cmp	r3, #85	; 0x55
   2bd48:	bne	2bda0 <__assert_fail@plt+0x1a1fc>
   2bd4c:	ldrb	r3, [r0, #1]
   2bd50:	and	r3, r3, #223	; 0xdf
   2bd54:	cmp	r3, #84	; 0x54
   2bd58:	bne	2bda0 <__assert_fail@plt+0x1a1fc>
   2bd5c:	ldrb	r3, [r0, #2]
   2bd60:	and	r3, r3, #223	; 0xdf
   2bd64:	cmp	r3, #70	; 0x46
   2bd68:	bne	2bda0 <__assert_fail@plt+0x1a1fc>
   2bd6c:	ldrb	r3, [r0, #3]
   2bd70:	movw	r1, #13176	; 0x3378
   2bd74:	movt	r1, #3
   2bd78:	cmp	r3, #45	; 0x2d
   2bd7c:	moveq	r3, #4
   2bd80:	movne	r3, #3
   2bd84:	add	r0, r0, r3
   2bd88:	bl	1170c <strcmp@plt>
   2bd8c:	cmp	r0, #0
   2bd90:	bne	2bda0 <__assert_fail@plt+0x1a1fc>
   2bd94:	ldrb	r3, [r4, #88]	; 0x58
   2bd98:	orr	r3, r3, #4
   2bd9c:	strb	r3, [r4, #88]	; 0x58
   2bda0:	ldrb	r3, [r4, #88]	; 0x58
   2bda4:	ldr	r2, [r4, #92]	; 0x5c
   2bda8:	bfc	r3, #3, #1
   2bdac:	cmp	r2, #1
   2bdb0:	strb	r3, [r4, #88]	; 0x58
   2bdb4:	ble	2bdd0 <__assert_fail@plt+0x1a22c>
   2bdb8:	uxtb	sl, r3
   2bdbc:	ands	sl, sl, #4
   2bdc0:	beq	2c350 <__assert_fail@plt+0x1a7ac>
   2bdc4:	movw	r3, #12592	; 0x3130
   2bdc8:	movt	r3, #3
   2bdcc:	str	r3, [r4, #60]	; 0x3c
   2bdd0:	ldr	r3, [r4]
   2bdd4:	cmp	r3, #0
   2bdd8:	beq	2c2ec <__assert_fail@plt+0x1a748>
   2bddc:	ldr	r3, [r4, #32]
   2bde0:	cmp	r3, #0
   2bde4:	beq	2c2ec <__assert_fail@plt+0x1a748>
   2bde8:	mov	r1, #0
   2bdec:	movw	r2, #0
   2bdf0:	movt	r2, #0
   2bdf4:	mov	r3, #1
   2bdf8:	cmp	r2, r1
   2bdfc:	str	r1, [sp, #28]
   2be00:	mov	r1, #1
   2be04:	moveq	r3, r2
   2be08:	movw	r2, #0
   2be0c:	movt	r2, #0
   2be10:	cmp	r2, #0
   2be14:	moveq	r1, r2
   2be18:	orr	r3, r3, r1
   2be1c:	ands	r3, r3, #255	; 0xff
   2be20:	str	r3, [sp, #8]
   2be24:	beq	2be48 <__assert_fail@plt+0x1a2a4>
   2be28:	mov	r1, #0
   2be2c:	add	r0, r4, #136	; 0x88
   2be30:	bl	11790 <pthread_mutex_init@plt>
   2be34:	cmp	r0, #0
   2be38:	bne	2c2ec <__assert_fail@plt+0x1a748>
   2be3c:	ldr	r3, [sp, #28]
   2be40:	cmp	r3, #0
   2be44:	bne	2c2f4 <__assert_fail@plt+0x1a750>
   2be48:	mov	r2, #76	; 0x4c
   2be4c:	mov	r1, #0
   2be50:	ldr	sl, [r5, #20]
   2be54:	add	r0, sp, #56	; 0x38
   2be58:	and	fp, r7, #4194304	; 0x400000
   2be5c:	bl	119e8 <memset@plt>
   2be60:	ldrb	r3, [r4, #88]	; 0x58
   2be64:	adds	lr, fp, #0
   2be68:	movne	lr, #1
   2be6c:	str	r8, [sp, #52]	; 0x34
   2be70:	ldr	r0, [r4, #92]	; 0x5c
   2be74:	orr	r2, sl, fp
   2be78:	adds	r1, r2, #0
   2be7c:	str	r6, [sp, #96]	; 0x60
   2be80:	movne	r1, #1
   2be84:	cmp	r6, #0
   2be88:	str	r6, [sp, #100]	; 0x64
   2be8c:	ubfx	ip, r3, #2, #1
   2be90:	str	r6, [sp, #104]	; 0x68
   2be94:	ubfx	r3, r3, #3, #1
   2be98:	str	r6, [sp, #108]	; 0x6c
   2be9c:	str	sl, [sp, #116]	; 0x74
   2bea0:	strb	lr, [sp, #124]	; 0x7c
   2bea4:	strb	ip, [sp, #125]	; 0x7d
   2bea8:	strb	r3, [sp, #126]	; 0x7e
   2beac:	strb	r1, [sp, #127]	; 0x7f
   2beb0:	str	r0, [sp, #132]	; 0x84
   2beb4:	bne	2c328 <__assert_fail@plt+0x1a784>
   2beb8:	cmp	r1, #0
   2bebc:	ldrne	r8, [sp, #56]	; 0x38
   2bec0:	cmp	fp, #0
   2bec4:	str	r8, [sp, #56]	; 0x38
   2bec8:	beq	2bf80 <__assert_fail@plt+0x1a3dc>
   2becc:	cmp	r0, #1
   2bed0:	ble	2c828 <__assert_fail@plt+0x1ac84>
   2bed4:	add	r0, sp, #52	; 0x34
   2bed8:	bl	200c4 <__assert_fail@plt+0xe520>
   2bedc:	cmp	r0, #0
   2bee0:	bne	2bf1c <__assert_fail@plt+0x1a378>
   2bee4:	ldr	r3, [sp, #84]	; 0x54
   2bee8:	cmp	r6, r3
   2beec:	ble	2c8b4 <__assert_fail@plt+0x1ad10>
   2bef0:	ldr	r3, [sp, #80]	; 0x50
   2bef4:	ldr	r2, [r4, #92]	; 0x5c
   2bef8:	ldr	r1, [sp, #88]	; 0x58
   2befc:	add	r3, r3, r2
   2bf00:	cmp	r1, r3
   2bf04:	bgt	2c8b4 <__assert_fail@plt+0x1ad10>
   2bf08:	lsl	r1, r1, #1
   2bf0c:	add	r0, sp, #52	; 0x34
   2bf10:	bl	1fcd4 <__assert_fail@plt+0xe130>
   2bf14:	cmp	r0, #0
   2bf18:	beq	2bed4 <__assert_fail@plt+0x1a330>
   2bf1c:	ldr	r6, [r5]
   2bf20:	str	r0, [sp, #28]
   2bf24:	ldr	r0, [r6, #56]	; 0x38
   2bf28:	cmp	r0, #0
   2bf2c:	beq	2bf40 <__assert_fail@plt+0x1a39c>
   2bf30:	ldr	r7, [r0]
   2bf34:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2bf38:	subs	r0, r7, #0
   2bf3c:	bne	2bf30 <__assert_fail@plt+0x1a38c>
   2bf40:	mov	r7, #0
   2bf44:	mov	r3, #31
   2bf48:	ldr	r0, [r6, #16]
   2bf4c:	str	r7, [r6, #52]	; 0x34
   2bf50:	str	r7, [r6, #56]	; 0x38
   2bf54:	str	r3, [r6, #64]	; 0x40
   2bf58:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2bf5c:	add	r0, sp, #52	; 0x34
   2bf60:	str	r7, [r6, #16]
   2bf64:	bl	20bb4 <__assert_fail@plt+0xf010>
   2bf68:	ldr	r3, [sp, #8]
   2bf6c:	cmp	r3, r7
   2bf70:	beq	2c2f4 <__assert_fail@plt+0x1a750>
   2bf74:	add	r0, r4, #136	; 0x88
   2bf78:	bl	11718 <pthread_mutex_destroy@plt>
   2bf7c:	b	2c2f4 <__assert_fail@plt+0x1a750>
   2bf80:	cmp	r0, #1
   2bf84:	bgt	2c740 <__assert_fail@plt+0x1ab9c>
   2bf88:	cmp	r2, #0
   2bf8c:	ldr	r1, [sp, #88]	; 0x58
   2bf90:	beq	2c400 <__assert_fail@plt+0x1a85c>
   2bf94:	ldr	r3, [sp, #80]	; 0x50
   2bf98:	ldr	r2, [sp, #100]	; 0x64
   2bf9c:	cmp	r1, r2
   2bfa0:	movge	r1, r2
   2bfa4:	cmp	r1, r3
   2bfa8:	bgt	2bfb4 <__assert_fail@plt+0x1a410>
   2bfac:	b	2c9a0 <__assert_fail@plt+0x1adfc>
   2bfb0:	ldr	r8, [sp, #56]	; 0x38
   2bfb4:	ldr	r2, [sp, #52]	; 0x34
   2bfb8:	ldr	ip, [sp, #76]	; 0x4c
   2bfbc:	ldr	r0, [sp, #116]	; 0x74
   2bfc0:	add	r2, r2, r3
   2bfc4:	ldrb	r2, [r2, ip]
   2bfc8:	ldrb	r2, [r0, r2]
   2bfcc:	strb	r2, [r8, r3]
   2bfd0:	add	r3, r3, #1
   2bfd4:	cmp	r1, r3
   2bfd8:	bne	2bfb0 <__assert_fail@plt+0x1a40c>
   2bfdc:	mov	r3, #0
   2bfe0:	str	r3, [sp, #28]
   2bfe4:	str	r1, [sp, #80]	; 0x50
   2bfe8:	str	r1, [sp, #84]	; 0x54
   2bfec:	ldr	r6, [r5]
   2bff0:	mov	r8, #0
   2bff4:	orr	r2, r7, #8388608	; 0x800000
   2bff8:	add	r1, sp, #52	; 0x34
   2bffc:	add	r0, sp, #32
   2c000:	str	r8, [r5, #24]
   2c004:	str	r7, [r6, #128]	; 0x80
   2c008:	bl	296ec <__assert_fail@plt+0x17b48>
   2c00c:	ldr	ip, [sp, #92]	; 0x5c
   2c010:	add	r1, sp, #28
   2c014:	mov	r3, r7
   2c018:	add	r2, sp, #32
   2c01c:	str	r8, [sp]
   2c020:	str	r1, [sp, #4]
   2c024:	mov	r1, r5
   2c028:	add	ip, ip, r0
   2c02c:	add	r0, sp, #52	; 0x34
   2c030:	str	ip, [sp, #92]	; 0x5c
   2c034:	bl	2bac0 <__assert_fail@plt+0x19f1c>
   2c038:	ldr	lr, [sp, #28]
   2c03c:	mov	r9, r0
   2c040:	cmp	lr, r8
   2c044:	bne	2c86c <__assert_fail@plt+0x1acc8>
   2c048:	mov	r2, #0
   2c04c:	mov	r3, #0
   2c050:	add	r7, sp, #40	; 0x28
   2c054:	mov	ip, #2
   2c058:	add	sl, r6, #56	; 0x38
   2c05c:	add	r6, r6, #64	; 0x40
   2c060:	mov	r0, sl
   2c064:	mov	r1, r6
   2c068:	str	r7, [sp]
   2c06c:	strd	r2, [sp, #40]	; 0x28
   2c070:	mov	r3, lr
   2c074:	mov	r2, lr
   2c078:	strb	ip, [sp, #44]	; 0x2c
   2c07c:	bl	21be4 <__assert_fail@plt+0x10040>
   2c080:	cmp	r9, #0
   2c084:	mov	lr, r0
   2c088:	moveq	r9, r0
   2c08c:	beq	2c0c4 <__assert_fail@plt+0x1a520>
   2c090:	mov	ip, #16
   2c094:	mov	r2, r9
   2c098:	str	r7, [sp]
   2c09c:	mov	r9, #0
   2c0a0:	mov	r8, #0
   2c0a4:	mov	r3, lr
   2c0a8:	mov	r1, r6
   2c0ac:	mov	r0, sl
   2c0b0:	strd	r8, [sp, #40]	; 0x28
   2c0b4:	mov	r9, lr
   2c0b8:	strb	ip, [sp, #44]	; 0x2c
   2c0bc:	bl	21be4 <__assert_fail@plt+0x10040>
   2c0c0:	mov	lr, r0
   2c0c4:	clz	r3, lr
   2c0c8:	cmp	r9, #0
   2c0cc:	ldr	r6, [r5]
   2c0d0:	lsr	r3, r3, #5
   2c0d4:	moveq	r9, #1
   2c0d8:	movne	r9, r3
   2c0dc:	cmp	r9, #0
   2c0e0:	movne	r2, #12
   2c0e4:	movne	r3, #0
   2c0e8:	strne	r2, [sp, #28]
   2c0ec:	strne	r3, [r4, #52]	; 0x34
   2c0f0:	bne	2bf24 <__assert_fail@plt+0x1a380>
   2c0f4:	ldr	r0, [r6, #4]
   2c0f8:	str	lr, [r4, #52]	; 0x34
   2c0fc:	lsl	r0, r0, #2
   2c100:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2c104:	ldr	r3, [r6, #4]
   2c108:	str	r0, [r6, #12]
   2c10c:	lsl	r0, r3, #2
   2c110:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2c114:	ldr	r3, [r6, #4]
   2c118:	str	r0, [r6, #16]
   2c11c:	add	r3, r3, r3, lsl #1
   2c120:	lsl	r0, r3, #2
   2c124:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2c128:	ldr	r3, [r6, #4]
   2c12c:	str	r0, [r6, #20]
   2c130:	add	r3, r3, r3, lsl #1
   2c134:	lsl	r0, r3, #2
   2c138:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2c13c:	ldr	r3, [r6, #12]
   2c140:	str	r0, [r6, #24]
   2c144:	cmp	r3, #0
   2c148:	beq	2c730 <__assert_fail@plt+0x1ab8c>
   2c14c:	ldr	r3, [r6, #16]
   2c150:	cmp	r3, #0
   2c154:	beq	2c730 <__assert_fail@plt+0x1ab8c>
   2c158:	ldr	r3, [r6, #20]
   2c15c:	cmp	r3, #0
   2c160:	beq	2c730 <__assert_fail@plt+0x1ab8c>
   2c164:	cmp	r0, #0
   2c168:	beq	2c730 <__assert_fail@plt+0x1ab8c>
   2c16c:	ldr	r0, [r5, #24]
   2c170:	lsl	r0, r0, #2
   2c174:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2c178:	cmp	r0, #0
   2c17c:	str	r0, [r6, #132]	; 0x84
   2c180:	beq	2c204 <__assert_fail@plt+0x1a660>
   2c184:	ldr	r2, [r5, #24]
   2c188:	cmp	r2, #0
   2c18c:	subne	r0, r0, #4
   2c190:	movne	r3, r9
   2c194:	beq	2c1a8 <__assert_fail@plt+0x1a604>
   2c198:	str	r3, [r0, #4]!
   2c19c:	add	r3, r3, #1
   2c1a0:	cmp	r3, r2
   2c1a4:	bne	2c198 <__assert_fail@plt+0x1a5f4>
   2c1a8:	movw	r1, #5704	; 0x1648
   2c1ac:	movt	r1, #2
   2c1b0:	ldr	r0, [r6, #52]	; 0x34
   2c1b4:	mov	r2, r6
   2c1b8:	bl	21984 <__assert_fail@plt+0xfde0>
   2c1bc:	ldr	ip, [r5, #24]
   2c1c0:	cmp	ip, #0
   2c1c4:	beq	2c9a8 <__assert_fail@plt+0x1ae04>
   2c1c8:	ldr	r0, [r6, #132]	; 0x84
   2c1cc:	ldr	r3, [r0]
   2c1d0:	cmp	r3, #0
   2c1d4:	bne	2c204 <__assert_fail@plt+0x1a660>
   2c1d8:	mov	r2, r0
   2c1dc:	b	2c1ec <__assert_fail@plt+0x1a648>
   2c1e0:	ldr	r1, [r2, #4]!
   2c1e4:	cmp	r1, r3
   2c1e8:	bne	2c204 <__assert_fail@plt+0x1a660>
   2c1ec:	add	r3, r3, #1
   2c1f0:	cmp	r3, ip
   2c1f4:	bne	2c1e0 <__assert_fail@plt+0x1a63c>
   2c1f8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2c1fc:	mov	r3, #0
   2c200:	str	r3, [r6, #132]	; 0x84
   2c204:	movw	r1, #8200	; 0x2008
   2c208:	movt	r1, #2
   2c20c:	ldr	r0, [r6, #52]	; 0x34
   2c210:	mov	r2, r5
   2c214:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2c218:	cmp	r0, #0
   2c21c:	bne	2bf1c <__assert_fail@plt+0x1a378>
   2c220:	movw	r1, #10340	; 0x2864
   2c224:	movt	r1, #2
   2c228:	ldr	r0, [r6, #52]	; 0x34
   2c22c:	mov	r2, r6
   2c230:	bl	1f7dc <__assert_fail@plt+0xdc38>
   2c234:	cmp	r0, #0
   2c238:	bne	2bf1c <__assert_fail@plt+0x1a378>
   2c23c:	mov	r2, r6
   2c240:	movw	r1, #5872	; 0x16f0
   2c244:	movt	r1, #2
   2c248:	ldr	r0, [r6, #52]	; 0x34
   2c24c:	bl	21984 <__assert_fail@plt+0xfde0>
   2c250:	mov	r2, r6
   2c254:	movw	r1, #3260	; 0xcbc
   2c258:	movt	r1, #2
   2c25c:	ldr	r0, [r6, #52]	; 0x34
   2c260:	bl	21984 <__assert_fail@plt+0xfde0>
   2c264:	subs	r3, r0, #0
   2c268:	str	r3, [sp, #12]
   2c26c:	bne	2c984 <__assert_fail@plt+0x1ade0>
   2c270:	ldr	r1, [r6, #24]
   2c274:	mov	sl, r3
   2c278:	mov	r8, r3
   2c27c:	add	r9, r8, r8, lsl #1
   2c280:	lsl	r9, r9, #2
   2c284:	add	r3, r1, r9
   2c288:	ldr	r3, [r3, #4]
   2c28c:	cmp	r3, #0
   2c290:	addne	r8, r8, #1
   2c294:	bne	2c2cc <__assert_fail@plt+0x1a728>
   2c298:	mov	r3, #1
   2c29c:	mov	r2, r8
   2c2a0:	mov	r1, r6
   2c2a4:	mov	r0, r7
   2c2a8:	bl	22ee4 <__assert_fail@plt+0x11340>
   2c2ac:	cmp	r0, #0
   2c2b0:	bne	2bf1c <__assert_fail@plt+0x1a378>
   2c2b4:	ldr	r1, [r6, #24]
   2c2b8:	add	r8, r8, #1
   2c2bc:	add	r9, r1, r9
   2c2c0:	ldr	r9, [r9, #4]
   2c2c4:	cmp	r9, #0
   2c2c8:	beq	2c410 <__assert_fail@plt+0x1a86c>
   2c2cc:	ldr	r3, [r6, #8]
   2c2d0:	cmp	r8, r3
   2c2d4:	bne	2c27c <__assert_fail@plt+0x1a6d8>
   2c2d8:	cmp	sl, #0
   2c2dc:	beq	2c434 <__assert_fail@plt+0x1a890>
   2c2e0:	mov	sl, #0
   2c2e4:	mov	r8, sl
   2c2e8:	b	2c27c <__assert_fail@plt+0x1a6d8>
   2c2ec:	mov	r3, #12
   2c2f0:	str	r3, [sp, #28]
   2c2f4:	mov	r0, r4
   2c2f8:	bl	22904 <__assert_fail@plt+0x10d60>
   2c2fc:	ldr	r0, [sp, #28]
   2c300:	mov	r3, #0
   2c304:	str	r3, [r5]
   2c308:	str	r3, [r5, #4]
   2c30c:	add	sp, sp, #140	; 0x8c
   2c310:	ldrd	r4, [sp]
   2c314:	ldrd	r6, [sp, #8]
   2c318:	ldrd	r8, [sp, #16]
   2c31c:	ldrd	sl, [sp, #24]
   2c320:	add	sp, sp, #32
   2c324:	pop	{pc}		; (ldr pc, [sp], #4)
   2c328:	mov	r1, r9
   2c32c:	add	r0, sp, #52	; 0x34
   2c330:	str	r2, [sp, #12]
   2c334:	bl	1fcd4 <__assert_fail@plt+0xe130>
   2c338:	cmp	r0, #0
   2c33c:	bne	2bf1c <__assert_fail@plt+0x1a378>
   2c340:	ldrb	r1, [sp, #127]	; 0x7f
   2c344:	ldr	r2, [sp, #12]
   2c348:	ldr	r0, [r4, #92]	; 0x5c
   2c34c:	b	2beb8 <__assert_fail@plt+0x1a314>
   2c350:	mov	r1, #1
   2c354:	mov	r0, #32
   2c358:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   2c35c:	cmp	r0, #0
   2c360:	str	r0, [r4, #60]	; 0x3c
   2c364:	beq	2c2ec <__assert_fail@plt+0x1a748>
   2c368:	str	r5, [sp, #8]
   2c36c:	mov	r5, r4
   2c370:	lsl	fp, sl, #3
   2c374:	mov	r4, #0
   2c378:	b	2c3a0 <__assert_fail@plt+0x1a7fc>
   2c37c:	cmp	r3, #0
   2c380:	bne	2c390 <__assert_fail@plt+0x1a7ec>
   2c384:	ldrb	r3, [r5, #88]	; 0x58
   2c388:	orr	r3, r3, #8
   2c38c:	strb	r3, [r5, #88]	; 0x58
   2c390:	add	r4, r4, #1
   2c394:	add	fp, fp, #1
   2c398:	cmp	r4, #32
   2c39c:	beq	2c3e8 <__assert_fail@plt+0x1a844>
   2c3a0:	mov	r0, fp
   2c3a4:	bl	119f4 <btowc@plt>
   2c3a8:	cmn	r0, #1
   2c3ac:	bic	r3, fp, #127	; 0x7f
   2c3b0:	beq	2c37c <__assert_fail@plt+0x1a7d8>
   2c3b4:	ldr	r1, [r5, #60]	; 0x3c
   2c3b8:	cmp	r3, #0
   2c3bc:	mov	r2, #1
   2c3c0:	ldr	r3, [r1, sl]
   2c3c4:	orr	r3, r3, r2, lsl r4
   2c3c8:	str	r3, [r1, sl]
   2c3cc:	bne	2c390 <__assert_fail@plt+0x1a7ec>
   2c3d0:	cmp	r0, fp
   2c3d4:	bne	2c384 <__assert_fail@plt+0x1a7e0>
   2c3d8:	add	r4, r4, #1
   2c3dc:	add	fp, fp, #1
   2c3e0:	cmp	r4, #32
   2c3e4:	bne	2c3a0 <__assert_fail@plt+0x1a7fc>
   2c3e8:	add	sl, sl, #4
   2c3ec:	cmp	sl, #32
   2c3f0:	bne	2c370 <__assert_fail@plt+0x1a7cc>
   2c3f4:	mov	r4, r5
   2c3f8:	ldr	r5, [sp, #8]
   2c3fc:	b	2bdd0 <__assert_fail@plt+0x1a22c>
   2c400:	str	fp, [sp, #28]
   2c404:	str	r1, [sp, #80]	; 0x50
   2c408:	str	r1, [sp, #84]	; 0x54
   2c40c:	b	2bfec <__assert_fail@plt+0x1a448>
   2c410:	ldr	r0, [sp, #48]	; 0x30
   2c414:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2c418:	ldr	r3, [r6, #8]
   2c41c:	cmp	r3, r8
   2c420:	moveq	sl, r9
   2c424:	moveq	r8, sl
   2c428:	movne	sl, #1
   2c42c:	ldr	r1, [r6, #24]
   2c430:	b	2c27c <__assert_fail@plt+0x1a6d8>
   2c434:	ldrb	r3, [r5, #28]
   2c438:	tst	r3, #16
   2c43c:	bne	2c458 <__assert_fail@plt+0x1a8b4>
   2c440:	ldr	r3, [r5, #24]
   2c444:	cmp	r3, #0
   2c448:	beq	2c458 <__assert_fail@plt+0x1a8b4>
   2c44c:	ldrb	r3, [r6, #88]	; 0x58
   2c450:	tst	r3, #1
   2c454:	bne	2c464 <__assert_fail@plt+0x1a8c0>
   2c458:	ldr	r3, [r6, #76]	; 0x4c
   2c45c:	cmp	r3, #0
   2c460:	beq	2c55c <__assert_fail@plt+0x1a9b8>
   2c464:	add	r8, r8, r8, lsl #1
   2c468:	lsl	r0, r8, #2
   2c46c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2c470:	cmp	r0, #0
   2c474:	str	r0, [r6, #28]
   2c478:	beq	2c730 <__assert_fail@plt+0x1ab8c>
   2c47c:	ldr	r3, [r6, #8]
   2c480:	cmp	r3, #0
   2c484:	movne	r3, #0
   2c488:	movne	r2, r3
   2c48c:	bne	2c498 <__assert_fail@plt+0x1a8f4>
   2c490:	b	2c55c <__assert_fail@plt+0x1a9b8>
   2c494:	ldr	r0, [r6, #28]
   2c498:	add	ip, r3, r3, lsl #1
   2c49c:	add	r3, r3, #1
   2c4a0:	add	r1, r0, ip, lsl #2
   2c4a4:	str	r2, [r0, ip, lsl #2]
   2c4a8:	str	r2, [r1, #4]
   2c4ac:	str	r2, [r1, #8]
   2c4b0:	ldr	r0, [r6, #8]
   2c4b4:	cmp	r0, r3
   2c4b8:	bhi	2c494 <__assert_fail@plt+0x1a8f0>
   2c4bc:	cmp	r0, #0
   2c4c0:	beq	2c55c <__assert_fail@plt+0x1a9b8>
   2c4c4:	mov	r3, #0
   2c4c8:	ldr	r1, [r6, #24]
   2c4cc:	mov	r9, r3
   2c4d0:	str	r7, [sp, #20]
   2c4d4:	mov	r7, r6
   2c4d8:	mov	r6, r3
   2c4dc:	str	sl, [sp, #16]
   2c4e0:	add	r3, r1, r9
   2c4e4:	ldr	ip, [r3, #4]
   2c4e8:	ldr	r3, [r3, #8]
   2c4ec:	cmp	ip, #0
   2c4f0:	movgt	r8, #0
   2c4f4:	subgt	sl, r3, #4
   2c4f8:	bgt	2c518 <__assert_fail@plt+0x1a974>
   2c4fc:	b	2c544 <__assert_fail@plt+0x1a9a0>
   2c500:	ldr	r1, [r7, #24]
   2c504:	add	r8, r8, #1
   2c508:	add	r3, r1, r9
   2c50c:	ldr	r3, [r3, #4]
   2c510:	cmp	r8, r3
   2c514:	bge	2c540 <__assert_fail@plt+0x1a99c>
   2c518:	ldr	r3, [sl, #4]!
   2c51c:	mov	r1, r6
   2c520:	ldr	r0, [r7, #28]
   2c524:	add	r3, r3, r3, lsl #1
   2c528:	add	r0, r0, r3, lsl #2
   2c52c:	bl	1fd8c <__assert_fail@plt+0xe1e8>
   2c530:	cmp	r0, #0
   2c534:	bne	2c500 <__assert_fail@plt+0x1a95c>
   2c538:	mov	r0, #12
   2c53c:	b	2bf1c <__assert_fail@plt+0x1a378>
   2c540:	ldr	r0, [r7, #8]
   2c544:	add	r6, r6, #1
   2c548:	add	r9, r9, #12
   2c54c:	cmp	r0, r6
   2c550:	bhi	2c4e0 <__assert_fail@plt+0x1a93c>
   2c554:	ldr	sl, [sp, #16]
   2c558:	ldr	r7, [sp, #20]
   2c55c:	clz	fp, fp
   2c560:	mov	r2, #0
   2c564:	ldrb	r3, [r4, #88]	; 0x58
   2c568:	lsr	fp, fp, #5
   2c56c:	str	r2, [sp, #28]
   2c570:	ands	fp, fp, r3, lsr #2
   2c574:	bne	2c750 <__assert_fail@plt+0x1abac>
   2c578:	ldr	r2, [r4, #24]
   2c57c:	mov	r0, r7
   2c580:	ldr	r3, [r4, #52]	; 0x34
   2c584:	ldr	r3, [r3, #12]
   2c588:	ldr	r3, [r3, #28]
   2c58c:	add	r1, r3, r3, lsl #1
   2c590:	str	r3, [r4, #72]	; 0x48
   2c594:	add	r1, r2, r1, lsl #2
   2c598:	bl	220a0 <__assert_fail@plt+0x104fc>
   2c59c:	cmp	r0, #0
   2c5a0:	mov	r8, r0
   2c5a4:	str	r0, [sp, #32]
   2c5a8:	bne	2c6c8 <__assert_fail@plt+0x1ab24>
   2c5ac:	ldr	r3, [r4, #76]	; 0x4c
   2c5b0:	cmp	r3, #0
   2c5b4:	ble	2c688 <__assert_fail@plt+0x1aae4>
   2c5b8:	ldr	r9, [sp, #44]	; 0x2c
   2c5bc:	cmp	r9, #0
   2c5c0:	ble	2c688 <__assert_fail@plt+0x1aae4>
   2c5c4:	mov	r6, r0
   2c5c8:	b	2c5d8 <__assert_fail@plt+0x1aa34>
   2c5cc:	add	r6, r6, #1
   2c5d0:	cmp	r9, r6
   2c5d4:	ble	2c688 <__assert_fail@plt+0x1aae4>
   2c5d8:	ldr	r2, [sp, #48]	; 0x30
   2c5dc:	ldr	r0, [r4]
   2c5e0:	ldr	r3, [r2, r6, lsl #2]
   2c5e4:	add	ip, r0, r3, lsl #3
   2c5e8:	ldrb	r1, [ip, #4]
   2c5ec:	cmp	r1, #4
   2c5f0:	bne	2c5cc <__assert_fail@plt+0x1aa28>
   2c5f4:	sub	r2, r2, #4
   2c5f8:	mov	r1, #0
   2c5fc:	b	2c60c <__assert_fail@plt+0x1aa68>
   2c600:	add	r1, r1, #1
   2c604:	cmp	r9, r1
   2c608:	beq	2c5cc <__assert_fail@plt+0x1aa28>
   2c60c:	ldr	lr, [r2, #4]!
   2c610:	add	sl, r0, lr, lsl #3
   2c614:	ldrb	sl, [sl, #4]
   2c618:	cmp	sl, #9
   2c61c:	bne	2c600 <__assert_fail@plt+0x1aa5c>
   2c620:	ldr	sl, [r0, lr, lsl #3]
   2c624:	ldr	lr, [ip]
   2c628:	cmp	sl, lr
   2c62c:	bne	2c600 <__assert_fail@plt+0x1aa5c>
   2c630:	ldr	r2, [r4, #20]
   2c634:	add	r3, r3, r3, lsl #1
   2c638:	add	r1, sp, #48	; 0x30
   2c63c:	mov	r0, r9
   2c640:	add	r3, r2, r3, lsl #2
   2c644:	ldr	r3, [r3, #8]
   2c648:	ldr	sl, [r3]
   2c64c:	mov	r2, sl
   2c650:	bl	21478 <__assert_fail@plt+0xf8d4>
   2c654:	cmp	r0, #0
   2c658:	bne	2c5cc <__assert_fail@plt+0x1aa28>
   2c65c:	ldr	r1, [r4, #24]
   2c660:	add	sl, sl, sl, lsl #1
   2c664:	mov	r0, r7
   2c668:	add	r1, r1, sl, lsl #2
   2c66c:	bl	22d3c <__assert_fail@plt+0x11198>
   2c670:	cmp	r0, #0
   2c674:	bne	2c98c <__assert_fail@plt+0x1ade8>
   2c678:	ldr	r9, [sp, #44]	; 0x2c
   2c67c:	mov	r6, #1
   2c680:	cmp	r9, r6
   2c684:	bgt	2c5d8 <__assert_fail@plt+0x1aa34>
   2c688:	mov	r3, #0
   2c68c:	mov	r2, r7
   2c690:	mov	r1, r4
   2c694:	add	r0, sp, #32
   2c698:	bl	22294 <__assert_fail@plt+0x106f0>
   2c69c:	cmp	r0, #0
   2c6a0:	str	r0, [r4, #36]	; 0x24
   2c6a4:	beq	2c820 <__assert_fail@plt+0x1ac7c>
   2c6a8:	ldrsb	r3, [r0, #52]	; 0x34
   2c6ac:	cmp	r3, #0
   2c6b0:	strge	r0, [r4, #40]	; 0x28
   2c6b4:	strge	r0, [r4, #44]	; 0x2c
   2c6b8:	strge	r0, [r4, #48]	; 0x30
   2c6bc:	blt	2c7bc <__assert_fail@plt+0x1ac18>
   2c6c0:	ldr	r0, [sp, #48]	; 0x30
   2c6c4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2c6c8:	ldr	r6, [r5]
   2c6cc:	str	r8, [sp, #28]
   2c6d0:	ldr	r0, [r6, #56]	; 0x38
   2c6d4:	cmp	r0, #0
   2c6d8:	beq	2c6ec <__assert_fail@plt+0x1ab48>
   2c6dc:	ldr	r7, [r0]
   2c6e0:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2c6e4:	subs	r0, r7, #0
   2c6e8:	bne	2c6dc <__assert_fail@plt+0x1ab38>
   2c6ec:	mov	r7, #0
   2c6f0:	mov	r3, #31
   2c6f4:	ldr	r0, [r6, #16]
   2c6f8:	str	r7, [r6, #52]	; 0x34
   2c6fc:	str	r7, [r6, #56]	; 0x38
   2c700:	str	r3, [r6, #64]	; 0x40
   2c704:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2c708:	add	r0, sp, #52	; 0x34
   2c70c:	str	r7, [r6, #16]
   2c710:	bl	20bb4 <__assert_fail@plt+0xf010>
   2c714:	ldr	r0, [sp, #28]
   2c718:	cmp	r0, r7
   2c71c:	beq	2c30c <__assert_fail@plt+0x1a768>
   2c720:	ldr	r3, [sp, #8]
   2c724:	cmp	r3, #0
   2c728:	bne	2bf74 <__assert_fail@plt+0x1a3d0>
   2c72c:	b	2c2f4 <__assert_fail@plt+0x1a750>
   2c730:	mov	r3, #12
   2c734:	ldr	r6, [r5]
   2c738:	str	r3, [sp, #28]
   2c73c:	b	2bf24 <__assert_fail@plt+0x1a380>
   2c740:	add	r0, sp, #52	; 0x34
   2c744:	bl	1ff24 <__assert_fail@plt+0xe380>
   2c748:	str	fp, [sp, #28]
   2c74c:	b	2bfec <__assert_fail@plt+0x1a448>
   2c750:	ldr	r3, [r5, #20]
   2c754:	cmp	r3, #0
   2c758:	bne	2c578 <__assert_fail@plt+0x1a9d4>
   2c75c:	ldr	r0, [r4, #8]
   2c760:	cmp	r0, #0
   2c764:	beq	2c9c4 <__assert_fail@plt+0x1ae20>
   2c768:	ldr	ip, [r4]
   2c76c:	mov	r1, r3
   2c770:	ldr	lr, [sp, #12]
   2c774:	mov	r2, ip
   2c778:	ldrb	r3, [r2, #4]
   2c77c:	sub	r3, r3, #1
   2c780:	cmp	r3, #11
   2c784:	ldrls	pc, [pc, r3, lsl #2]
   2c788:	b	2c9f4 <__assert_fail@plt+0x1ae50>
   2c78c:	andeq	ip, r2, ip, lsr #18
   2c790:	andeq	ip, r2, r4, asr #17
   2c794:	andeq	ip, r2, r0, ror #18
   2c798:	andeq	ip, r2, r4, asr #17
   2c79c:	andeq	ip, r2, r0, asr #17
   2c7a0:	andeq	ip, r2, r8, ror r5
   2c7a4:	strdeq	ip, [r2], -r4
   2c7a8:	andeq	ip, r2, r4, asr #17
   2c7ac:	andeq	ip, r2, r4, asr #17
   2c7b0:	andeq	ip, r2, r4, asr #17
   2c7b4:	andeq	ip, r2, r4, asr #17
   2c7b8:	andeq	ip, r2, ip, lsr r9
   2c7bc:	mov	r3, #1
   2c7c0:	mov	r2, r7
   2c7c4:	mov	r1, r4
   2c7c8:	add	r0, sp, #32
   2c7cc:	bl	22294 <__assert_fail@plt+0x106f0>
   2c7d0:	mov	r3, #2
   2c7d4:	mov	r2, r7
   2c7d8:	str	r0, [r4, #40]	; 0x28
   2c7dc:	mov	r1, r4
   2c7e0:	add	r0, sp, #32
   2c7e4:	bl	22294 <__assert_fail@plt+0x106f0>
   2c7e8:	mov	r3, #6
   2c7ec:	mov	r2, r7
   2c7f0:	str	r0, [r4, #44]	; 0x2c
   2c7f4:	mov	r1, r4
   2c7f8:	add	r0, sp, #32
   2c7fc:	bl	22294 <__assert_fail@plt+0x106f0>
   2c800:	ldr	r3, [r4, #40]	; 0x28
   2c804:	str	r0, [r4, #48]	; 0x30
   2c808:	cmp	r3, #0
   2c80c:	beq	2c820 <__assert_fail@plt+0x1ac7c>
   2c810:	ldr	r3, [r4, #44]	; 0x2c
   2c814:	cmp	r0, #0
   2c818:	cmpne	r3, #0
   2c81c:	bne	2c6c0 <__assert_fail@plt+0x1ab1c>
   2c820:	ldr	r8, [sp, #32]
   2c824:	b	2c6c8 <__assert_fail@plt+0x1ab24>
   2c828:	add	r0, sp, #52	; 0x34
   2c82c:	bl	20684 <__assert_fail@plt+0xeae0>
   2c830:	mov	r3, #0
   2c834:	str	r3, [sp, #28]
   2c838:	b	2bfec <__assert_fail@plt+0x1a448>
   2c83c:	mov	r0, r4
   2c840:	mov	r1, #160	; 0xa0
   2c844:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   2c848:	subs	r4, r0, #0
   2c84c:	beq	2c9b0 <__assert_fail@plt+0x1ae0c>
   2c850:	mov	r3, #160	; 0xa0
   2c854:	str	r4, [r5]
   2c858:	str	r3, [r5, #4]
   2c85c:	b	2bcbc <__assert_fail@plt+0x1a118>
   2c860:	mov	sl, r6
   2c864:	mov	r1, #1
   2c868:	b	2bd1c <__assert_fail@plt+0x1a178>
   2c86c:	cmp	r0, r8
   2c870:	beq	2c9b8 <__assert_fail@plt+0x1ae14>
   2c874:	mov	r2, #0
   2c878:	mov	r3, #0
   2c87c:	add	r7, sp, #40	; 0x28
   2c880:	mov	ip, #2
   2c884:	add	sl, r6, #56	; 0x38
   2c888:	add	r6, r6, #64	; 0x40
   2c88c:	mov	r0, sl
   2c890:	mov	r1, r6
   2c894:	str	r7, [sp]
   2c898:	strd	r2, [sp, #40]	; 0x28
   2c89c:	mov	r3, r8
   2c8a0:	mov	r2, r8
   2c8a4:	strb	ip, [sp, #44]	; 0x2c
   2c8a8:	bl	21be4 <__assert_fail@plt+0x10040>
   2c8ac:	mov	lr, r0
   2c8b0:	b	2c090 <__assert_fail@plt+0x1a4ec>
   2c8b4:	mov	r3, #0
   2c8b8:	str	r3, [sp, #28]
   2c8bc:	b	2bfec <__assert_fail@plt+0x1a448>
   2c8c0:	mov	r1, fp
   2c8c4:	add	lr, lr, #1
   2c8c8:	add	r2, r2, #8
   2c8cc:	cmp	lr, r0
   2c8d0:	bne	2c778 <__assert_fail@plt+0x1abd4>
   2c8d4:	orr	sl, sl, r1
   2c8d8:	ands	sl, sl, #255	; 0xff
   2c8dc:	moveq	r1, sl
   2c8e0:	beq	2c9c8 <__assert_fail@plt+0x1ae24>
   2c8e4:	add	r2, ip, lr, lsl #3
   2c8e8:	mov	r0, #7
   2c8ec:	b	2c904 <__assert_fail@plt+0x1ad60>
   2c8f0:	cmp	r3, #5
   2c8f4:	strbeq	r0, [ip, #4]
   2c8f8:	add	ip, ip, #8
   2c8fc:	cmp	r2, ip
   2c900:	beq	2c9c8 <__assert_fail@plt+0x1ae24>
   2c904:	ldrb	r3, [ip, #4]
   2c908:	cmp	r3, #1
   2c90c:	bne	2c8f0 <__assert_fail@plt+0x1ad4c>
   2c910:	ldrsb	r3, [ip]
   2c914:	cmp	r3, #0
   2c918:	bge	2c8f8 <__assert_fail@plt+0x1ad54>
   2c91c:	ldrb	r3, [ip, #6]
   2c920:	bfc	r3, #5, #1
   2c924:	strb	r3, [ip, #6]
   2c928:	b	2c8f8 <__assert_fail@plt+0x1ad54>
   2c92c:	ldrsb	r3, [r2]
   2c930:	cmp	r3, #0
   2c934:	movlt	sl, fp
   2c938:	b	2c8c4 <__assert_fail@plt+0x1ad20>
   2c93c:	ldr	r3, [r2]
   2c940:	cmp	r3, #32
   2c944:	beq	2c8c4 <__assert_fail@plt+0x1ad20>
   2c948:	bls	2c994 <__assert_fail@plt+0x1adf0>
   2c94c:	cmp	r3, #64	; 0x40
   2c950:	beq	2c8c4 <__assert_fail@plt+0x1ad20>
   2c954:	cmp	r3, #128	; 0x80
   2c958:	beq	2c8c4 <__assert_fail@plt+0x1ad20>
   2c95c:	b	2c578 <__assert_fail@plt+0x1a9d4>
   2c960:	ldr	r6, [r2]
   2c964:	add	r3, r6, #12
   2c968:	add	r6, r6, #28
   2c96c:	ldr	r8, [r3, #4]!
   2c970:	cmp	r8, #0
   2c974:	bne	2c578 <__assert_fail@plt+0x1a9d4>
   2c978:	cmp	r6, r3
   2c97c:	bne	2c96c <__assert_fail@plt+0x1adc8>
   2c980:	b	2c8c4 <__assert_fail@plt+0x1ad20>
   2c984:	ldr	r0, [sp, #12]
   2c988:	b	2bf1c <__assert_fail@plt+0x1a378>
   2c98c:	mov	r8, r0
   2c990:	b	2c6c8 <__assert_fail@plt+0x1ab24>
   2c994:	cmp	r3, #16
   2c998:	beq	2c8c4 <__assert_fail@plt+0x1ad20>
   2c99c:	b	2c578 <__assert_fail@plt+0x1a9d4>
   2c9a0:	mov	r1, r3
   2c9a4:	b	2bfdc <__assert_fail@plt+0x1a438>
   2c9a8:	ldr	r0, [r6, #132]	; 0x84
   2c9ac:	b	2c1f8 <__assert_fail@plt+0x1a654>
   2c9b0:	mov	r0, #12
   2c9b4:	b	2c30c <__assert_fail@plt+0x1a768>
   2c9b8:	ldr	r6, [r5]
   2c9bc:	str	r0, [r4, #52]	; 0x34
   2c9c0:	b	2bf24 <__assert_fail@plt+0x1a380>
   2c9c4:	mov	r1, r0
   2c9c8:	ldrb	r2, [r4, #88]	; 0x58
   2c9cc:	mov	r0, #1
   2c9d0:	ldr	r3, [r4, #76]	; 0x4c
   2c9d4:	str	r0, [r4, #92]	; 0x5c
   2c9d8:	and	r2, r2, #251	; 0xfb
   2c9dc:	cmp	r3, #0
   2c9e0:	movle	r3, r1
   2c9e4:	orrgt	r3, r1, #1
   2c9e8:	bfi	r2, r3, #1, #1
   2c9ec:	strb	r2, [r4, #88]	; 0x58
   2c9f0:	b	2c578 <__assert_fail@plt+0x1a9d4>
   2c9f4:	bl	11b68 <abort@plt>
   2c9f8:	movw	r3, #17404	; 0x43fc
   2c9fc:	movt	r3, #4
   2ca00:	str	r4, [sp, #-8]!
   2ca04:	ldr	r3, [r3]
   2ca08:	str	lr, [sp, #4]
   2ca0c:	mov	lr, r2
   2ca10:	mov	r2, r1
   2ca14:	ldrb	ip, [lr, #28]
   2ca18:	mov	r1, r0
   2ca1c:	mov	r0, lr
   2ca20:	ubfx	r4, r3, #25, #1
   2ca24:	bfi	ip, r4, #4, #1
   2ca28:	mvn	ip, ip, lsl #25
   2ca2c:	mvn	ip, ip, lsr #25
   2ca30:	strb	ip, [lr, #28]
   2ca34:	bl	2bc64 <__assert_fail@plt+0x1a0c0>
   2ca38:	subs	r3, r0, #0
   2ca3c:	beq	2ca70 <__assert_fail@plt+0x1aecc>
   2ca40:	movw	r1, #12592	; 0x3130
   2ca44:	movt	r1, #3
   2ca48:	ldr	r4, [sp]
   2ca4c:	add	r3, r1, r3, lsl #2
   2ca50:	add	r1, r1, #32
   2ca54:	mov	r2, #5
   2ca58:	mov	r0, #0
   2ca5c:	ldr	lr, [sp, #4]
   2ca60:	add	sp, sp, #8
   2ca64:	ldr	r3, [r3, #416]	; 0x1a0
   2ca68:	add	r1, r1, r3
   2ca6c:	b	117d8 <dcgettext@plt>
   2ca70:	ldr	r4, [sp]
   2ca74:	add	sp, sp, #4
   2ca78:	pop	{pc}		; (ldr pc, [sp], #4)
   2ca7c:	movw	r3, #17404	; 0x43fc
   2ca80:	movt	r3, #4
   2ca84:	ldr	r2, [r3]
   2ca88:	str	r0, [r3]
   2ca8c:	mov	r0, r2
   2ca90:	bx	lr
   2ca94:	strd	r4, [sp, #-16]!
   2ca98:	mov	r2, #256	; 0x100
   2ca9c:	mov	r4, r0
   2caa0:	ldr	r5, [r0]
   2caa4:	mov	r1, #0
   2caa8:	str	r6, [sp, #8]
   2caac:	ldr	r6, [r0, #16]
   2cab0:	str	lr, [sp, #12]
   2cab4:	mov	r0, r6
   2cab8:	bl	119e8 <memset@plt>
   2cabc:	ldr	r1, [r5, #36]	; 0x24
   2cac0:	mov	r3, r6
   2cac4:	mov	r0, r4
   2cac8:	add	r2, r1, #12
   2cacc:	add	r1, r1, #8
   2cad0:	bl	25898 <__assert_fail@plt+0x13cf4>
   2cad4:	ldr	r3, [r5, #36]	; 0x24
   2cad8:	ldr	r0, [r5, #40]	; 0x28
   2cadc:	cmp	r3, r0
   2cae0:	beq	2cafc <__assert_fail@plt+0x1af58>
   2cae4:	add	r2, r0, #12
   2cae8:	add	r1, r0, #8
   2caec:	mov	r3, r6
   2caf0:	mov	r0, r4
   2caf4:	bl	25898 <__assert_fail@plt+0x13cf4>
   2caf8:	ldr	r0, [r5, #36]	; 0x24
   2cafc:	ldr	r1, [r5, #44]	; 0x2c
   2cb00:	cmp	r1, r0
   2cb04:	beq	2cb20 <__assert_fail@plt+0x1af7c>
   2cb08:	add	r2, r1, #12
   2cb0c:	mov	r0, r4
   2cb10:	mov	r3, r6
   2cb14:	add	r1, r1, #8
   2cb18:	bl	25898 <__assert_fail@plt+0x13cf4>
   2cb1c:	ldr	r0, [r5, #36]	; 0x24
   2cb20:	ldr	r1, [r5, #48]	; 0x30
   2cb24:	cmp	r1, r0
   2cb28:	beq	2cb40 <__assert_fail@plt+0x1af9c>
   2cb2c:	add	r2, r1, #12
   2cb30:	mov	r3, r6
   2cb34:	add	r1, r1, #8
   2cb38:	mov	r0, r4
   2cb3c:	bl	25898 <__assert_fail@plt+0x13cf4>
   2cb40:	ldrb	r3, [r4, #28]
   2cb44:	mov	r0, #0
   2cb48:	ldr	r6, [sp, #8]
   2cb4c:	orr	r3, r3, #8
   2cb50:	strb	r3, [r4, #28]
   2cb54:	ldrd	r4, [sp]
   2cb58:	add	sp, sp, #12
   2cb5c:	pop	{pc}		; (ldr pc, [sp], #4)
   2cb60:	cmp	r3, r2
   2cb64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2cb68:	strd	r6, [sp, #8]
   2cb6c:	strd	r8, [sp, #16]
   2cb70:	strd	sl, [sp, #24]
   2cb74:	str	lr, [sp, #32]
   2cb78:	sub	sp, sp, #52	; 0x34
   2cb7c:	movle	lr, #0
   2cb80:	movgt	lr, #1
   2cb84:	ldr	ip, [sp, #88]	; 0x58
   2cb88:	orrs	lr, lr, r3, lsr #31
   2cb8c:	ldrb	lr, [sp, #100]	; 0x64
   2cb90:	ldr	r8, [sp, #96]	; 0x60
   2cb94:	add	r7, r3, ip
   2cb98:	str	lr, [sp, #36]	; 0x24
   2cb9c:	ldr	lr, [r0]
   2cba0:	str	lr, [sp, #28]
   2cba4:	bne	2ce98 <__assert_fail@plt+0x1b2f4>
   2cba8:	cmp	r7, r2
   2cbac:	mov	r4, r0
   2cbb0:	str	r2, [sp, #32]
   2cbb4:	mov	fp, r3
   2cbb8:	str	r1, [sp, #40]	; 0x28
   2cbbc:	bgt	2ce44 <__assert_fail@plt+0x1b2a0>
   2cbc0:	cmp	ip, #0
   2cbc4:	cmpge	fp, r7
   2cbc8:	bgt	2ce44 <__assert_fail@plt+0x1b2a0>
   2cbcc:	cmp	r7, #0
   2cbd0:	blt	2ce4c <__assert_fail@plt+0x1b2a8>
   2cbd4:	cmp	fp, r7
   2cbd8:	movgt	r2, #0
   2cbdc:	movle	r2, #1
   2cbe0:	ands	r3, r2, ip, lsr #31
   2cbe4:	bne	2ce4c <__assert_fail@plt+0x1b2a8>
   2cbe8:	movw	r2, #0
   2cbec:	movt	r2, #0
   2cbf0:	cmp	r2, #0
   2cbf4:	mov	r5, #1
   2cbf8:	moveq	r5, r2
   2cbfc:	movw	r2, #0
   2cc00:	movt	r2, #0
   2cc04:	mov	r0, #1
   2cc08:	cmp	r2, #0
   2cc0c:	moveq	r0, r2
   2cc10:	orr	r5, r5, r0
   2cc14:	ands	r5, r5, #255	; 0xff
   2cc18:	beq	2cc2c <__assert_fail@plt+0x1b088>
   2cc1c:	ldr	r3, [sp, #28]
   2cc20:	mov	r5, #1
   2cc24:	add	r0, r3, #136	; 0x88
   2cc28:	bl	11760 <pthread_mutex_lock@plt>
   2cc2c:	ldrb	r0, [r4, #28]
   2cc30:	cmp	fp, r7
   2cc34:	ubfx	r3, r0, #5, #2
   2cc38:	str	r3, [sp, #44]	; 0x2c
   2cc3c:	bge	2cc54 <__assert_fail@plt+0x1b0b0>
   2cc40:	ldr	r2, [r4, #16]
   2cc44:	cmp	r2, #0
   2cc48:	beq	2cc54 <__assert_fail@plt+0x1b0b0>
   2cc4c:	tst	r0, #8
   2cc50:	beq	2cdf0 <__assert_fail@plt+0x1b24c>
   2cc54:	ubfx	r2, r0, #4, #1
   2cc58:	cmp	r8, #0
   2cc5c:	orreq	r2, r2, #1
   2cc60:	ands	r2, r2, #255	; 0xff
   2cc64:	bne	2cddc <__assert_fail@plt+0x1b238>
   2cc68:	and	r0, r0, #6
   2cc6c:	ldr	ip, [r4, #24]
   2cc70:	cmp	r0, #4
   2cc74:	beq	2cea8 <__assert_fail@plt+0x1b304>
   2cc78:	add	sl, ip, #1
   2cc7c:	mov	r6, sl
   2cc80:	lsl	r0, sl, #3
   2cc84:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2cc88:	subs	r9, r0, #0
   2cc8c:	beq	2cea0 <__assert_fail@plt+0x1b2fc>
   2cc90:	mov	r3, fp
   2cc94:	mov	r0, r4
   2cc98:	str	sl, [sp, #8]
   2cc9c:	ldr	ip, [sp, #92]	; 0x5c
   2cca0:	ldr	r2, [sp, #32]
   2cca4:	ldr	r1, [sp, #40]	; 0x28
   2cca8:	stm	sp, {r7, ip}
   2ccac:	ldr	ip, [sp, #44]	; 0x2c
   2ccb0:	str	r9, [sp, #12]
   2ccb4:	str	ip, [sp, #16]
   2ccb8:	bl	273ec <__assert_fail@plt+0x15848>
   2ccbc:	cmp	r0, #0
   2ccc0:	beq	2cd10 <__assert_fail@plt+0x1b16c>
   2ccc4:	cmp	r0, #1
   2ccc8:	mvneq	r4, #0
   2cccc:	beq	2ccd4 <__assert_fail@plt+0x1b130>
   2ccd0:	mvn	r4, #1
   2ccd4:	mov	r0, r9
   2ccd8:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2ccdc:	cmp	r5, #0
   2cce0:	beq	2ccf0 <__assert_fail@plt+0x1b14c>
   2cce4:	ldr	r3, [sp, #28]
   2cce8:	add	r0, r3, #136	; 0x88
   2ccec:	bl	11694 <pthread_mutex_unlock@plt>
   2ccf0:	mov	r0, r4
   2ccf4:	add	sp, sp, #52	; 0x34
   2ccf8:	ldrd	r4, [sp]
   2ccfc:	ldrd	r6, [sp, #8]
   2cd00:	ldrd	r8, [sp, #16]
   2cd04:	ldrd	sl, [sp, #24]
   2cd08:	add	sp, sp, #32
   2cd0c:	pop	{pc}		; (ldr pc, [sp], #4)
   2cd10:	cmp	r8, #0
   2cd14:	beq	2cdc0 <__assert_fail@plt+0x1b21c>
   2cd18:	ldrb	r7, [r4, #28]
   2cd1c:	add	sl, r6, #1
   2cd20:	ubfx	r7, r7, #1, #2
   2cd24:	cmp	r7, #0
   2cd28:	beq	2ce00 <__assert_fail@plt+0x1b25c>
   2cd2c:	cmp	r7, #1
   2cd30:	movne	r7, #2
   2cd34:	beq	2ced4 <__assert_fail@plt+0x1b330>
   2cd38:	cmp	r6, #0
   2cd3c:	ble	2cf20 <__assert_fail@plt+0x1b37c>
   2cd40:	ldrd	r0, [r8, #4]
   2cd44:	add	lr, r9, r6, lsl #3
   2cd48:	mov	r3, r9
   2cd4c:	mov	r2, r6
   2cd50:	sub	r0, r0, #4
   2cd54:	sub	r1, r1, #4
   2cd58:	ldr	ip, [r3]
   2cd5c:	add	r3, r3, #8
   2cd60:	str	ip, [r0, #4]!
   2cd64:	ldr	ip, [r3, #-4]
   2cd68:	cmp	lr, r3
   2cd6c:	str	ip, [r1, #4]!
   2cd70:	bne	2cd58 <__assert_fail@plt+0x1b1b4>
   2cd74:	ldr	r3, [r8]
   2cd78:	cmp	r3, r2
   2cd7c:	bls	2cda8 <__assert_fail@plt+0x1b204>
   2cd80:	ldr	ip, [r8, #4]
   2cd84:	mvn	r3, #0
   2cd88:	ldr	r0, [r8, #8]
   2cd8c:	str	r3, [r0, r2, lsl #2]
   2cd90:	add	r6, r6, #1
   2cd94:	str	r3, [ip, r2, lsl #2]
   2cd98:	mov	r2, r6
   2cd9c:	ldr	r1, [r8]
   2cda0:	cmp	r1, r6
   2cda4:	bhi	2cd8c <__assert_fail@plt+0x1b1e8>
   2cda8:	ldrb	r3, [r4, #28]
   2cdac:	bfi	r3, r7, #1, #2
   2cdb0:	and	r2, r3, #6
   2cdb4:	cmp	r2, #0
   2cdb8:	strb	r3, [r4, #28]
   2cdbc:	beq	2ccd0 <__assert_fail@plt+0x1b12c>
   2cdc0:	ldr	r3, [sp, #36]	; 0x24
   2cdc4:	ldr	r4, [r9]
   2cdc8:	cmp	r3, #0
   2cdcc:	beq	2ccd4 <__assert_fail@plt+0x1b130>
   2cdd0:	ldr	r3, [r9, #4]
   2cdd4:	sub	r4, r3, r4
   2cdd8:	b	2ccd4 <__assert_fail@plt+0x1b130>
   2cddc:	mov	sl, #1
   2cde0:	mov	r0, #8
   2cde4:	mov	r6, sl
   2cde8:	mov	r8, #0
   2cdec:	b	2cc84 <__assert_fail@plt+0x1b0e0>
   2cdf0:	mov	r0, r4
   2cdf4:	bl	2ca94 <__assert_fail@plt+0x1aef0>
   2cdf8:	ldrb	r0, [r4, #28]
   2cdfc:	b	2cc54 <__assert_fail@plt+0x1b0b0>
   2ce00:	lsl	r7, sl, #2
   2ce04:	mov	r0, r7
   2ce08:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2ce0c:	cmp	r0, #0
   2ce10:	str	r0, [r8, #4]
   2ce14:	beq	2cf2c <__assert_fail@plt+0x1b388>
   2ce18:	mov	r0, r7
   2ce1c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2ce20:	cmp	r0, #0
   2ce24:	mov	r7, r0
   2ce28:	str	r0, [r8, #8]
   2ce2c:	movne	r7, #1
   2ce30:	strne	sl, [r8]
   2ce34:	bne	2cd38 <__assert_fail@plt+0x1b194>
   2ce38:	ldr	r0, [r8, #4]
   2ce3c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2ce40:	b	2cda8 <__assert_fail@plt+0x1b204>
   2ce44:	ldr	r7, [sp, #32]
   2ce48:	b	2cbe8 <__assert_fail@plt+0x1b044>
   2ce4c:	movw	r2, #0
   2ce50:	movt	r2, #0
   2ce54:	cmp	r2, #0
   2ce58:	mov	r5, #1
   2ce5c:	moveq	r5, r2
   2ce60:	movw	r2, #0
   2ce64:	movt	r2, #0
   2ce68:	mov	r1, #1
   2ce6c:	cmp	r2, #0
   2ce70:	moveq	r1, r2
   2ce74:	orr	r5, r5, r1
   2ce78:	ands	r5, r5, #255	; 0xff
   2ce7c:	movne	r7, #0
   2ce80:	bne	2cc1c <__assert_fail@plt+0x1b078>
   2ce84:	ldrb	r0, [r4, #28]
   2ce88:	mov	r7, r5
   2ce8c:	ubfx	r3, r0, #5, #2
   2ce90:	str	r3, [sp, #44]	; 0x2c
   2ce94:	b	2cc54 <__assert_fail@plt+0x1b0b0>
   2ce98:	mvn	r4, #0
   2ce9c:	b	2ccf0 <__assert_fail@plt+0x1b14c>
   2cea0:	mvn	r4, #1
   2cea4:	b	2ccdc <__assert_fail@plt+0x1b138>
   2cea8:	ldr	sl, [r8]
   2ceac:	cmp	sl, ip
   2ceb0:	bhi	2cc78 <__assert_fail@plt+0x1b0d4>
   2ceb4:	cmp	sl, #0
   2ceb8:	mov	r6, sl
   2cebc:	bgt	2cc80 <__assert_fail@plt+0x1b0dc>
   2cec0:	mov	sl, #1
   2cec4:	mov	r8, r2
   2cec8:	mov	r6, sl
   2cecc:	mov	r0, #8
   2ced0:	b	2cc84 <__assert_fail@plt+0x1b0e0>
   2ced4:	ldr	r3, [r8]
   2ced8:	cmp	r3, sl
   2cedc:	bcs	2cd38 <__assert_fail@plt+0x1b194>
   2cee0:	lsl	fp, sl, #2
   2cee4:	ldr	r0, [r8, #4]
   2cee8:	mov	r1, fp
   2ceec:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   2cef0:	subs	r2, r0, #0
   2cef4:	str	r2, [sp, #32]
   2cef8:	beq	2cf2c <__assert_fail@plt+0x1b388>
   2cefc:	mov	r1, fp
   2cf00:	ldr	r0, [r8, #8]
   2cf04:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   2cf08:	subs	fp, r0, #0
   2cf0c:	ldr	r2, [sp, #32]
   2cf10:	beq	2cf34 <__assert_fail@plt+0x1b390>
   2cf14:	str	sl, [r8]
   2cf18:	stmib	r8, {r2, fp}
   2cf1c:	b	2cd38 <__assert_fail@plt+0x1b194>
   2cf20:	mov	r6, #0
   2cf24:	mov	r2, r6
   2cf28:	b	2cd74 <__assert_fail@plt+0x1b1d0>
   2cf2c:	mov	r7, #0
   2cf30:	b	2cda8 <__assert_fail@plt+0x1b204>
   2cf34:	mov	r0, r2
   2cf38:	mov	r7, fp
   2cf3c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2cf40:	b	2cda8 <__assert_fail@plt+0x1b204>
   2cf44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2cf48:	strd	r6, [sp, #8]
   2cf4c:	mov	r7, r3
   2cf50:	strd	r8, [sp, #16]
   2cf54:	strd	sl, [sp, #24]
   2cf58:	str	lr, [sp, #32]
   2cf5c:	sub	sp, sp, #28
   2cf60:	ldr	r5, [sp, #64]	; 0x40
   2cf64:	ldr	r6, [sp, #80]	; 0x50
   2cf68:	ldrb	fp, [sp, #84]	; 0x54
   2cf6c:	orr	r3, r5, r2
   2cf70:	orrs	r3, r3, r6
   2cf74:	bmi	2d024 <__assert_fail@plt+0x1b480>
   2cf78:	adds	r9, r2, r5
   2cf7c:	mov	r4, r2
   2cf80:	bvs	2d024 <__assert_fail@plt+0x1b480>
   2cf84:	cmp	r5, #0
   2cf88:	mov	sl, r0
   2cf8c:	beq	2d02c <__assert_fail@plt+0x1b488>
   2cf90:	cmp	r2, #0
   2cf94:	str	r1, [sp, #20]
   2cf98:	moveq	r8, r2
   2cf9c:	bne	2cff0 <__assert_fail@plt+0x1b44c>
   2cfa0:	ldr	r3, [sp, #72]	; 0x48
   2cfa4:	mov	r2, r9
   2cfa8:	mov	r1, r7
   2cfac:	mov	r0, sl
   2cfb0:	str	fp, [sp, #12]
   2cfb4:	ldr	ip, [sp, #76]	; 0x4c
   2cfb8:	stm	sp, {r3, r6, ip}
   2cfbc:	ldr	r3, [sp, #68]	; 0x44
   2cfc0:	bl	2cb60 <__assert_fail@plt+0x1afbc>
   2cfc4:	mov	r4, r0
   2cfc8:	mov	r0, r8
   2cfcc:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2cfd0:	mov	r0, r4
   2cfd4:	add	sp, sp, #28
   2cfd8:	ldrd	r4, [sp]
   2cfdc:	ldrd	r6, [sp, #8]
   2cfe0:	ldrd	r8, [sp, #16]
   2cfe4:	ldrd	sl, [sp, #24]
   2cfe8:	add	sp, sp, #32
   2cfec:	pop	{pc}		; (ldr pc, [sp], #4)
   2cff0:	mov	r0, r9
   2cff4:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2cff8:	subs	r8, r0, #0
   2cffc:	beq	2d024 <__assert_fail@plt+0x1b480>
   2d000:	mov	r2, r4
   2d004:	ldr	r1, [sp, #20]
   2d008:	bl	11784 <memcpy@plt>
   2d00c:	mov	r1, r7
   2d010:	mov	r2, r5
   2d014:	add	r0, r8, r4
   2d018:	mov	r7, r8
   2d01c:	bl	11784 <memcpy@plt>
   2d020:	b	2cfa0 <__assert_fail@plt+0x1b3fc>
   2d024:	mvn	r4, #1
   2d028:	b	2cfd0 <__assert_fail@plt+0x1b42c>
   2d02c:	mov	r7, r1
   2d030:	mov	r8, r5
   2d034:	b	2cfa0 <__assert_fail@plt+0x1b3fc>
   2d038:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d03c:	mov	r4, r0
   2d040:	mov	r0, #0
   2d044:	tst	r2, #1
   2d048:	movw	r5, #45820	; 0xb2fc
   2d04c:	movt	r5, #3
   2d050:	movw	r3, #710	; 0x2c6
   2d054:	movt	r3, #257	; 0x101
   2d058:	strd	r6, [sp, #8]
   2d05c:	mov	r6, r2
   2d060:	str	r8, [sp, #16]
   2d064:	mov	r7, r1
   2d068:	movne	r8, r5
   2d06c:	str	lr, [sp, #20]
   2d070:	moveq	r8, r3
   2d074:	str	r0, [r4]
   2d078:	str	r0, [r4, #4]
   2d07c:	str	r0, [r4, #8]
   2d080:	mov	r0, #256	; 0x100
   2d084:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2d088:	cmp	r0, #0
   2d08c:	str	r0, [r4, #16]
   2d090:	beq	2d13c <__assert_fail@plt+0x1b598>
   2d094:	lsl	r5, r6, #21
   2d098:	ands	r2, r6, #4
   2d09c:	and	r5, r5, #4194304	; 0x400000
   2d0a0:	orr	r5, r5, r8
   2d0a4:	bne	2d114 <__assert_fail@plt+0x1b570>
   2d0a8:	ldrb	r3, [r4, #28]
   2d0ac:	ubfx	r6, r6, #3, #1
   2d0b0:	mov	r1, #0
   2d0b4:	mov	r0, r7
   2d0b8:	str	r1, [r4, #20]
   2d0bc:	bfi	r3, r2, #7, #1
   2d0c0:	bfi	r3, r6, #4, #1
   2d0c4:	strb	r3, [r4, #28]
   2d0c8:	bl	11988 <strlen@plt>
   2d0cc:	mov	r2, r0
   2d0d0:	mov	r3, r5
   2d0d4:	mov	r1, r7
   2d0d8:	mov	r0, r4
   2d0dc:	bl	2bc64 <__assert_fail@plt+0x1a0c0>
   2d0e0:	cmp	r0, #16
   2d0e4:	mov	r5, r0
   2d0e8:	beq	2d124 <__assert_fail@plt+0x1b580>
   2d0ec:	cmp	r0, #0
   2d0f0:	bne	2d128 <__assert_fail@plt+0x1b584>
   2d0f4:	mov	r0, r4
   2d0f8:	bl	2ca94 <__assert_fail@plt+0x1aef0>
   2d0fc:	mov	r0, r5
   2d100:	ldrd	r4, [sp]
   2d104:	ldrd	r6, [sp, #8]
   2d108:	ldr	r8, [sp, #16]
   2d10c:	add	sp, sp, #20
   2d110:	pop	{pc}		; (ldr pc, [sp], #4)
   2d114:	bic	r5, r5, #64	; 0x40
   2d118:	mov	r2, #1
   2d11c:	orr	r5, r5, #256	; 0x100
   2d120:	b	2d0a8 <__assert_fail@plt+0x1b504>
   2d124:	mov	r5, #8
   2d128:	ldr	r0, [r4, #16]
   2d12c:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2d130:	mov	r3, #0
   2d134:	str	r3, [r4, #16]
   2d138:	b	2d0fc <__assert_fail@plt+0x1b558>
   2d13c:	mov	r5, #12
   2d140:	b	2d0fc <__assert_fail@plt+0x1b558>
   2d144:	cmp	r0, #16
   2d148:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d14c:	strd	r6, [sp, #8]
   2d150:	str	r8, [sp, #16]
   2d154:	str	lr, [sp, #20]
   2d158:	bhi	2d1d4 <__assert_fail@plt+0x1b630>
   2d15c:	movw	r1, #12592	; 0x3130
   2d160:	movt	r1, #3
   2d164:	add	ip, r1, r0, lsl #2
   2d168:	mov	r4, r3
   2d16c:	add	r1, r1, #32
   2d170:	mov	r6, r2
   2d174:	mov	r0, #0
   2d178:	ldr	r3, [ip, #416]	; 0x1a0
   2d17c:	mov	r2, #5
   2d180:	add	r1, r1, r3
   2d184:	bl	117d8 <dcgettext@plt>
   2d188:	mov	r7, r0
   2d18c:	bl	11988 <strlen@plt>
   2d190:	cmp	r4, #0
   2d194:	add	r5, r0, #1
   2d198:	beq	2d1bc <__assert_fail@plt+0x1b618>
   2d19c:	cmp	r5, r4
   2d1a0:	mov	r1, r7
   2d1a4:	subhi	r2, r4, #1
   2d1a8:	movhi	r3, #0
   2d1ac:	movls	r2, r5
   2d1b0:	mov	r0, r6
   2d1b4:	strbhi	r3, [r6, r2]
   2d1b8:	bl	11784 <memcpy@plt>
   2d1bc:	mov	r0, r5
   2d1c0:	ldrd	r4, [sp]
   2d1c4:	ldrd	r6, [sp, #8]
   2d1c8:	ldr	r8, [sp, #16]
   2d1cc:	add	sp, sp, #20
   2d1d0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d1d4:	bl	11b68 <abort@plt>
   2d1d8:	strd	r4, [sp, #-16]!
   2d1dc:	mov	r4, r0
   2d1e0:	ldr	r5, [r0]
   2d1e4:	str	r6, [sp, #8]
   2d1e8:	str	lr, [sp, #12]
   2d1ec:	cmp	r5, #0
   2d1f0:	beq	2d238 <__assert_fail@plt+0x1b694>
   2d1f4:	movw	r2, #0
   2d1f8:	movt	r2, #0
   2d1fc:	cmp	r2, #0
   2d200:	mov	r3, #1
   2d204:	moveq	r3, r2
   2d208:	movw	r2, #0
   2d20c:	movt	r2, #0
   2d210:	mov	r1, #1
   2d214:	cmp	r2, #0
   2d218:	moveq	r1, r2
   2d21c:	orr	r3, r3, r1
   2d220:	tst	r3, #1
   2d224:	beq	2d230 <__assert_fail@plt+0x1b68c>
   2d228:	add	r0, r5, #136	; 0x88
   2d22c:	bl	11718 <pthread_mutex_destroy@plt>
   2d230:	mov	r0, r5
   2d234:	bl	22904 <__assert_fail@plt+0x10d60>
   2d238:	mov	r5, #0
   2d23c:	ldr	r0, [r4, #16]
   2d240:	str	r5, [r4]
   2d244:	str	r5, [r4, #4]
   2d248:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2d24c:	str	r5, [r4, #16]
   2d250:	ldr	r0, [r4, #20]
   2d254:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2d258:	ldr	r6, [sp, #8]
   2d25c:	str	r5, [r4, #20]
   2d260:	ldrd	r4, [sp]
   2d264:	add	sp, sp, #12
   2d268:	pop	{pc}		; (ldr pc, [sp], #4)
   2d26c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d270:	strd	r6, [sp, #8]
   2d274:	strd	r8, [sp, #16]
   2d278:	strd	sl, [sp, #24]
   2d27c:	str	lr, [sp, #32]
   2d280:	sub	sp, sp, #36	; 0x24
   2d284:	ldr	r6, [sp, #72]	; 0x48
   2d288:	bics	ip, r6, #7
   2d28c:	movne	r0, #2
   2d290:	bne	2d348 <__assert_fail@plt+0x1b7a4>
   2d294:	ands	sl, r6, #4
   2d298:	mov	r7, r3
   2d29c:	str	r2, [sp, #28]
   2d2a0:	mov	r8, r1
   2d2a4:	mov	r5, r0
   2d2a8:	bne	2d364 <__assert_fail@plt+0x1b7c0>
   2d2ac:	mov	r0, r1
   2d2b0:	bl	11988 <strlen@plt>
   2d2b4:	mov	r9, r0
   2d2b8:	movw	r2, #0
   2d2bc:	movt	r2, #0
   2d2c0:	ldr	fp, [r5]
   2d2c4:	cmp	r2, #0
   2d2c8:	mov	r4, #1
   2d2cc:	moveq	r4, r2
   2d2d0:	movw	r2, #0
   2d2d4:	movt	r2, #0
   2d2d8:	mov	r1, #1
   2d2dc:	cmp	r2, #0
   2d2e0:	moveq	r1, r2
   2d2e4:	orr	r4, r4, r1
   2d2e8:	ands	r4, r4, #255	; 0xff
   2d2ec:	beq	2d2f8 <__assert_fail@plt+0x1b754>
   2d2f0:	add	r0, fp, #136	; 0x88
   2d2f4:	bl	11760 <pthread_mutex_lock@plt>
   2d2f8:	ldrb	r2, [r5, #28]
   2d2fc:	tst	r2, #16
   2d300:	beq	2d370 <__assert_fail@plt+0x1b7cc>
   2d304:	mov	ip, #0
   2d308:	mov	r0, r5
   2d30c:	str	r9, [sp]
   2d310:	mov	r3, sl
   2d314:	mov	r1, r8
   2d318:	mov	r2, r9
   2d31c:	stmib	sp, {r9, ip}
   2d320:	str	ip, [sp, #12]
   2d324:	str	r6, [sp, #16]
   2d328:	bl	273ec <__assert_fail@plt+0x15848>
   2d32c:	mov	r5, r0
   2d330:	cmp	r4, #0
   2d334:	beq	2d340 <__assert_fail@plt+0x1b79c>
   2d338:	add	r0, fp, #136	; 0x88
   2d33c:	bl	11694 <pthread_mutex_unlock@plt>
   2d340:	adds	r0, r5, #0
   2d344:	movne	r0, #1
   2d348:	add	sp, sp, #36	; 0x24
   2d34c:	ldrd	r4, [sp]
   2d350:	ldrd	r6, [sp, #8]
   2d354:	ldrd	r8, [sp, #16]
   2d358:	ldrd	sl, [sp, #24]
   2d35c:	add	sp, sp, #32
   2d360:	pop	{pc}		; (ldr pc, [sp], #4)
   2d364:	ldr	sl, [r3]
   2d368:	ldr	r9, [r3, #4]
   2d36c:	b	2d2b8 <__assert_fail@plt+0x1b714>
   2d370:	ldr	ip, [sp, #28]
   2d374:	mov	r0, r5
   2d378:	mov	r3, sl
   2d37c:	mov	r1, r8
   2d380:	mov	r2, r9
   2d384:	str	r9, [sp]
   2d388:	stmib	sp, {r9, ip}
   2d38c:	str	r7, [sp, #12]
   2d390:	str	r6, [sp, #16]
   2d394:	bl	273ec <__assert_fail@plt+0x15848>
   2d398:	mov	r5, r0
   2d39c:	b	2d330 <__assert_fail@plt+0x1b78c>
   2d3a0:	str	r4, [sp, #-8]!
   2d3a4:	mov	r4, #0
   2d3a8:	str	lr, [sp, #4]
   2d3ac:	sub	sp, sp, #16
   2d3b0:	mov	lr, #1
   2d3b4:	ldr	ip, [sp, #24]
   2d3b8:	str	r4, [sp]
   2d3bc:	stmib	sp, {r2, ip, lr}
   2d3c0:	bl	2cb60 <__assert_fail@plt+0x1afbc>
   2d3c4:	add	sp, sp, #16
   2d3c8:	ldr	r4, [sp]
   2d3cc:	add	sp, sp, #4
   2d3d0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d3d4:	str	r4, [sp, #-8]!
   2d3d8:	mov	r4, #0
   2d3dc:	str	lr, [sp, #4]
   2d3e0:	sub	sp, sp, #16
   2d3e4:	ldr	lr, [sp, #24]
   2d3e8:	ldr	ip, [sp, #28]
   2d3ec:	str	lr, [sp]
   2d3f0:	str	r4, [sp, #12]
   2d3f4:	stmib	sp, {r2, ip}
   2d3f8:	bl	2cb60 <__assert_fail@plt+0x1afbc>
   2d3fc:	add	sp, sp, #16
   2d400:	ldr	r4, [sp]
   2d404:	add	sp, sp, #4
   2d408:	pop	{pc}		; (ldr pc, [sp], #4)
   2d40c:	strd	r4, [sp, #-12]!
   2d410:	mov	r4, #1
   2d414:	str	lr, [sp, #8]
   2d418:	sub	sp, sp, #28
   2d41c:	mov	lr, #0
   2d420:	ldr	ip, [sp, #40]	; 0x28
   2d424:	ldr	r5, [sp, #44]	; 0x2c
   2d428:	str	ip, [sp]
   2d42c:	ldr	ip, [sp, #52]	; 0x34
   2d430:	stmib	sp, {r5, lr}
   2d434:	ldr	lr, [sp, #48]	; 0x30
   2d438:	str	r4, [sp, #20]
   2d43c:	str	lr, [sp, #12]
   2d440:	str	ip, [sp, #16]
   2d444:	bl	2cf44 <__assert_fail@plt+0x1b3a0>
   2d448:	add	sp, sp, #28
   2d44c:	ldrd	r4, [sp]
   2d450:	add	sp, sp, #8
   2d454:	pop	{pc}		; (ldr pc, [sp], #4)
   2d458:	str	r4, [sp, #-8]!
   2d45c:	mov	r4, #0
   2d460:	str	lr, [sp, #4]
   2d464:	sub	sp, sp, #24
   2d468:	ldr	lr, [sp, #32]
   2d46c:	ldr	ip, [sp, #36]	; 0x24
   2d470:	str	lr, [sp]
   2d474:	str	r4, [sp, #20]
   2d478:	str	ip, [sp, #4]
   2d47c:	ldr	r4, [sp, #40]	; 0x28
   2d480:	ldr	lr, [sp, #44]	; 0x2c
   2d484:	ldr	ip, [sp, #48]	; 0x30
   2d488:	str	r4, [sp, #8]
   2d48c:	str	lr, [sp, #12]
   2d490:	str	ip, [sp, #16]
   2d494:	bl	2cf44 <__assert_fail@plt+0x1b3a0>
   2d498:	add	sp, sp, #24
   2d49c:	ldr	r4, [sp]
   2d4a0:	add	sp, sp, #4
   2d4a4:	pop	{pc}		; (ldr pc, [sp], #4)
   2d4a8:	cmp	r2, #0
   2d4ac:	beq	2d4d4 <__assert_fail@plt+0x1b930>
   2d4b0:	ldrb	ip, [r0, #28]
   2d4b4:	push	{lr}		; (str lr, [sp, #-4]!)
   2d4b8:	mov	lr, #1
   2d4bc:	bfi	ip, lr, #1, #2
   2d4c0:	strb	ip, [r0, #28]
   2d4c4:	strd	r2, [r1]
   2d4c8:	ldr	r3, [sp, #4]
   2d4cc:	str	r3, [r1, #8]
   2d4d0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d4d4:	ldrb	r3, [r0, #28]
   2d4d8:	bfi	r3, r2, #1, #2
   2d4dc:	strb	r3, [r0, #28]
   2d4e0:	str	r2, [r1]
   2d4e4:	str	r2, [r1, #4]
   2d4e8:	str	r2, [r1, #8]
   2d4ec:	bx	lr
   2d4f0:	strd	r4, [sp, #-16]!
   2d4f4:	mov	r4, r1
   2d4f8:	mov	r1, #0
   2d4fc:	mov	r2, r4
   2d500:	mov	r5, r0
   2d504:	str	r6, [sp, #8]
   2d508:	str	lr, [sp, #12]
   2d50c:	bl	11a24 <memchr@plt>
   2d510:	cmp	r0, #0
   2d514:	ldr	r6, [sp, #8]
   2d518:	subne	r0, r0, r5
   2d51c:	moveq	r0, r4
   2d520:	ldrd	r4, [sp]
   2d524:	add	sp, sp, #12
   2d528:	addne	r0, r0, #1
   2d52c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d530:	subs	r1, r0, #0
   2d534:	movw	r0, #9980	; 0x26fc
   2d538:	movt	r0, #3
   2d53c:	beq	2d548 <__assert_fail@plt+0x1b9a4>
   2d540:	mov	r2, #1
   2d544:	b	119a0 <setenv@plt>
   2d548:	b	11b44 <unsetenv@plt>
   2d54c:	cmp	r0, #0
   2d550:	bxeq	lr
   2d554:	str	r4, [sp, #-8]!
   2d558:	str	lr, [sp, #4]
   2d55c:	ldr	r4, [r0]
   2d560:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2d564:	subs	r0, r4, #0
   2d568:	bne	2d55c <__assert_fail@plt+0x1b9b8>
   2d56c:	ldr	r4, [sp]
   2d570:	add	sp, sp, #4
   2d574:	pop	{pc}		; (ldr pc, [sp], #4)
   2d578:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d57c:	mov	r5, r0
   2d580:	strd	r6, [sp, #8]
   2d584:	str	r8, [sp, #16]
   2d588:	str	lr, [sp, #20]
   2d58c:	bl	119b8 <__errno_location@plt>
   2d590:	mov	r4, r0
   2d594:	ldrb	r0, [r5, #4]
   2d598:	ldr	r6, [r4]
   2d59c:	cmp	r0, #0
   2d5a0:	addne	r0, r5, #5
   2d5a4:	bl	2d530 <__assert_fail@plt+0x1b98c>
   2d5a8:	cmp	r0, #0
   2d5ac:	beq	2d5dc <__assert_fail@plt+0x1ba38>
   2d5b0:	ldr	r6, [r4]
   2d5b4:	mov	r7, #0
   2d5b8:	mov	r0, r5
   2d5bc:	bl	2d54c <__assert_fail@plt+0x1b9a8>
   2d5c0:	mov	r0, r7
   2d5c4:	ldr	r8, [sp, #16]
   2d5c8:	str	r6, [r4]
   2d5cc:	ldrd	r4, [sp]
   2d5d0:	ldrd	r6, [sp, #8]
   2d5d4:	add	sp, sp, #20
   2d5d8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d5dc:	mov	r7, #1
   2d5e0:	bl	11844 <tzset@plt>
   2d5e4:	b	2d5b8 <__assert_fail@plt+0x1ba14>
   2d5e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d5ec:	strd	r6, [sp, #8]
   2d5f0:	subs	r6, r0, #0
   2d5f4:	str	r8, [sp, #16]
   2d5f8:	str	lr, [sp, #20]
   2d5fc:	beq	2d668 <__assert_fail@plt+0x1bac4>
   2d600:	bl	11988 <strlen@plt>
   2d604:	add	r5, r0, #1
   2d608:	cmp	r5, #58	; 0x3a
   2d60c:	movcs	r0, r5
   2d610:	movcc	r0, #58	; 0x3a
   2d614:	add	r0, r0, #9
   2d618:	bic	r0, r0, #3
   2d61c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2d620:	subs	r4, r0, #0
   2d624:	beq	2d650 <__assert_fail@plt+0x1baac>
   2d628:	mov	r7, #0
   2d62c:	mov	ip, #1
   2d630:	add	r3, r4, #5
   2d634:	mov	r1, r6
   2d638:	mov	r0, r3
   2d63c:	mov	r2, r5
   2d640:	str	r7, [r4]
   2d644:	strh	ip, [r4, #4]
   2d648:	bl	11784 <memcpy@plt>
   2d64c:	strb	r7, [r0, r5]
   2d650:	mov	r0, r4
   2d654:	ldrd	r4, [sp]
   2d658:	ldrd	r6, [sp, #8]
   2d65c:	ldr	r8, [sp, #16]
   2d660:	add	sp, sp, #20
   2d664:	pop	{pc}		; (ldr pc, [sp], #4)
   2d668:	mov	r0, #64	; 0x40
   2d66c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2d670:	subs	r4, r0, #0
   2d674:	strne	r6, [r4]
   2d678:	strhne	r6, [r4, #4]
   2d67c:	b	2d650 <__assert_fail@plt+0x1baac>
   2d680:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d684:	strd	r6, [sp, #8]
   2d688:	ldr	r6, [r1, #40]	; 0x28
   2d68c:	str	r8, [sp, #16]
   2d690:	str	lr, [sp, #20]
   2d694:	cmp	r6, #0
   2d698:	beq	2d774 <__assert_fail@plt+0x1bbd0>
   2d69c:	cmp	r1, r6
   2d6a0:	mov	r7, r1
   2d6a4:	mov	r5, r0
   2d6a8:	bhi	2d6b8 <__assert_fail@plt+0x1bb14>
   2d6ac:	add	r3, r1, #44	; 0x2c
   2d6b0:	cmp	r6, r3
   2d6b4:	bcc	2d774 <__assert_fail@plt+0x1bbd0>
   2d6b8:	ldrb	r3, [r6]
   2d6bc:	cmp	r3, #0
   2d6c0:	addne	r4, r5, #5
   2d6c4:	beq	2d768 <__assert_fail@plt+0x1bbc4>
   2d6c8:	mov	r1, r6
   2d6cc:	mov	r0, r4
   2d6d0:	bl	1170c <strcmp@plt>
   2d6d4:	cmp	r0, #0
   2d6d8:	add	r2, r5, #5
   2d6dc:	mov	r0, r4
   2d6e0:	beq	2d74c <__assert_fail@plt+0x1bba8>
   2d6e4:	ldrb	r3, [r4]
   2d6e8:	cmp	r3, #0
   2d6ec:	bne	2d704 <__assert_fail@plt+0x1bb60>
   2d6f0:	cmp	r4, r2
   2d6f4:	bne	2d77c <__assert_fail@plt+0x1bbd8>
   2d6f8:	ldrb	r3, [r5, #4]
   2d6fc:	cmp	r3, #0
   2d700:	beq	2d77c <__assert_fail@plt+0x1bbd8>
   2d704:	bl	11988 <strlen@plt>
   2d708:	add	r0, r0, #1
   2d70c:	ldrb	r3, [r4, r0]!
   2d710:	cmp	r3, #0
   2d714:	bne	2d6c8 <__assert_fail@plt+0x1bb24>
   2d718:	ldr	r3, [r5]
   2d71c:	cmp	r3, #0
   2d720:	addne	r4, r3, #5
   2d724:	movne	r5, r3
   2d728:	b	2d6c8 <__assert_fail@plt+0x1bb24>
   2d72c:	mov	r0, r6
   2d730:	bl	2d5e8 <__assert_fail@plt+0x1ba44>
   2d734:	cmp	r0, #0
   2d738:	str	r0, [r5]
   2d73c:	beq	2d754 <__assert_fail@plt+0x1bbb0>
   2d740:	mov	r3, #0
   2d744:	add	r4, r0, #5
   2d748:	strb	r3, [r0, #4]
   2d74c:	mov	r0, #1
   2d750:	str	r4, [r7, #40]	; 0x28
   2d754:	ldrd	r4, [sp]
   2d758:	ldrd	r6, [sp, #8]
   2d75c:	ldr	r8, [sp, #16]
   2d760:	add	sp, sp, #20
   2d764:	pop	{pc}		; (ldr pc, [sp], #4)
   2d768:	movw	r4, #11844	; 0x2e44
   2d76c:	movt	r4, #3
   2d770:	b	2d74c <__assert_fail@plt+0x1bba8>
   2d774:	mov	r0, #1
   2d778:	b	2d754 <__assert_fail@plt+0x1bbb0>
   2d77c:	mov	r0, r6
   2d780:	bl	11988 <strlen@plt>
   2d784:	add	r3, r5, #64	; 0x40
   2d788:	add	r8, r0, #1
   2d78c:	sub	r3, r3, r4
   2d790:	cmp	r3, r8
   2d794:	ble	2d72c <__assert_fail@plt+0x1bb88>
   2d798:	mov	r1, r6
   2d79c:	mov	r2, r8
   2d7a0:	mov	r0, r4
   2d7a4:	bl	11784 <memcpy@plt>
   2d7a8:	mov	r3, #0
   2d7ac:	strb	r3, [r4, r8]
   2d7b0:	b	2d74c <__assert_fail@plt+0x1bba8>
   2d7b4:	strd	r4, [sp, #-16]!
   2d7b8:	mov	r4, r0
   2d7bc:	movw	r0, #9980	; 0x26fc
   2d7c0:	movt	r0, #3
   2d7c4:	str	r6, [sp, #8]
   2d7c8:	str	lr, [sp, #12]
   2d7cc:	bl	118ec <getenv@plt>
   2d7d0:	subs	r5, r0, #0
   2d7d4:	ldrb	r3, [r4, #4]
   2d7d8:	beq	2d860 <__assert_fail@plt+0x1bcbc>
   2d7dc:	cmp	r3, #0
   2d7e0:	bne	2d834 <__assert_fail@plt+0x1bc90>
   2d7e4:	mov	r0, r5
   2d7e8:	bl	2d5e8 <__assert_fail@plt+0x1ba44>
   2d7ec:	subs	r5, r0, #0
   2d7f0:	beq	2d84c <__assert_fail@plt+0x1bca8>
   2d7f4:	ldrb	r0, [r4, #4]
   2d7f8:	cmp	r0, #0
   2d7fc:	addne	r0, r4, #5
   2d800:	bl	2d530 <__assert_fail@plt+0x1b98c>
   2d804:	cmp	r0, #0
   2d808:	beq	2d86c <__assert_fail@plt+0x1bcc8>
   2d80c:	bl	119b8 <__errno_location@plt>
   2d810:	cmp	r5, #1
   2d814:	mov	r4, r0
   2d818:	ldr	r6, [r0]
   2d81c:	beq	2d828 <__assert_fail@plt+0x1bc84>
   2d820:	mov	r0, r5
   2d824:	bl	2d54c <__assert_fail@plt+0x1b9a8>
   2d828:	mov	r5, #0
   2d82c:	str	r6, [r4]
   2d830:	b	2d84c <__assert_fail@plt+0x1bca8>
   2d834:	mov	r1, r5
   2d838:	add	r0, r4, #5
   2d83c:	bl	1170c <strcmp@plt>
   2d840:	cmp	r0, #0
   2d844:	bne	2d7e4 <__assert_fail@plt+0x1bc40>
   2d848:	mov	r5, #1
   2d84c:	mov	r0, r5
   2d850:	ldrd	r4, [sp]
   2d854:	ldr	r6, [sp, #8]
   2d858:	add	sp, sp, #12
   2d85c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d860:	cmp	r3, #0
   2d864:	beq	2d848 <__assert_fail@plt+0x1bca4>
   2d868:	b	2d7e4 <__assert_fail@plt+0x1bc40>
   2d86c:	bl	11844 <tzset@plt>
   2d870:	b	2d84c <__assert_fail@plt+0x1bca8>
   2d874:	cmp	r0, #1
   2d878:	beq	2d880 <__assert_fail@plt+0x1bcdc>
   2d87c:	b	2d54c <__assert_fail@plt+0x1b9a8>
   2d880:	bx	lr
   2d884:	subs	ip, r0, #0
   2d888:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d88c:	mov	r5, r1
   2d890:	strd	r6, [sp, #8]
   2d894:	str	r8, [sp, #16]
   2d898:	str	lr, [sp, #20]
   2d89c:	beq	2d928 <__assert_fail@plt+0x1bd84>
   2d8a0:	mov	r4, r2
   2d8a4:	mov	r6, ip
   2d8a8:	bl	2d7b4 <__assert_fail@plt+0x1bc10>
   2d8ac:	subs	r7, r0, #0
   2d8b0:	beq	2d8fc <__assert_fail@plt+0x1bd58>
   2d8b4:	mov	r0, r5
   2d8b8:	mov	r1, r4
   2d8bc:	bl	117fc <localtime_r@plt>
   2d8c0:	cmp	r0, #0
   2d8c4:	beq	2d8ec <__assert_fail@plt+0x1bd48>
   2d8c8:	mov	r0, r6
   2d8cc:	mov	r1, r4
   2d8d0:	bl	2d680 <__assert_fail@plt+0x1badc>
   2d8d4:	cmp	r0, #0
   2d8d8:	beq	2d8ec <__assert_fail@plt+0x1bd48>
   2d8dc:	cmp	r7, #1
   2d8e0:	bne	2d914 <__assert_fail@plt+0x1bd70>
   2d8e4:	mov	r0, r4
   2d8e8:	b	2d900 <__assert_fail@plt+0x1bd5c>
   2d8ec:	cmp	r7, #1
   2d8f0:	beq	2d8fc <__assert_fail@plt+0x1bd58>
   2d8f4:	mov	r0, r7
   2d8f8:	bl	2d578 <__assert_fail@plt+0x1b9d4>
   2d8fc:	mov	r0, #0
   2d900:	ldrd	r4, [sp]
   2d904:	ldrd	r6, [sp, #8]
   2d908:	ldr	r8, [sp, #16]
   2d90c:	add	sp, sp, #20
   2d910:	pop	{pc}		; (ldr pc, [sp], #4)
   2d914:	mov	r0, r7
   2d918:	bl	2d578 <__assert_fail@plt+0x1b9d4>
   2d91c:	cmp	r0, #0
   2d920:	bne	2d8e4 <__assert_fail@plt+0x1bd40>
   2d924:	b	2d8fc <__assert_fail@plt+0x1bd58>
   2d928:	mov	r0, r5
   2d92c:	mov	r1, r2
   2d930:	ldrd	r4, [sp]
   2d934:	ldrd	r6, [sp, #8]
   2d938:	ldr	r8, [sp, #16]
   2d93c:	ldr	lr, [sp, #20]
   2d940:	add	sp, sp, #24
   2d944:	b	116e8 <gmtime_r@plt>
   2d948:	strd	r4, [sp, #-20]!	; 0xffffffec
   2d94c:	subs	r5, r0, #0
   2d950:	strd	r6, [sp, #8]
   2d954:	mov	r6, r1
   2d958:	str	lr, [sp, #16]
   2d95c:	sub	sp, sp, #52	; 0x34
   2d960:	beq	2da50 <__assert_fail@plt+0x1beac>
   2d964:	bl	2d7b4 <__assert_fail@plt+0x1bc10>
   2d968:	subs	r4, r0, #0
   2d96c:	beq	2d9d0 <__assert_fail@plt+0x1be2c>
   2d970:	ldr	r3, [r6]
   2d974:	mvn	r2, #0
   2d978:	add	r0, sp, #4
   2d97c:	ldr	r1, [r6, #4]
   2d980:	str	r3, [sp, #4]
   2d984:	str	r2, [sp, #32]
   2d988:	ldrd	r2, [r6, #8]
   2d98c:	str	r1, [sp, #8]
   2d990:	ldr	r1, [r6, #16]
   2d994:	strd	r2, [sp, #12]
   2d998:	ldr	r2, [r6, #20]
   2d99c:	str	r1, [sp, #20]
   2d9a0:	ldr	r3, [r6, #32]
   2d9a4:	str	r2, [sp, #24]
   2d9a8:	str	r3, [sp, #36]	; 0x24
   2d9ac:	bl	11724 <mktime@plt>
   2d9b0:	ldr	r3, [sp, #32]
   2d9b4:	mov	r7, r0
   2d9b8:	cmp	r3, #0
   2d9bc:	bge	2d9ec <__assert_fail@plt+0x1be48>
   2d9c0:	cmp	r4, #1
   2d9c4:	beq	2d9d0 <__assert_fail@plt+0x1be2c>
   2d9c8:	mov	r0, r4
   2d9cc:	bl	2d578 <__assert_fail@plt+0x1b9d4>
   2d9d0:	mvn	r7, #0
   2d9d4:	mov	r0, r7
   2d9d8:	add	sp, sp, #52	; 0x34
   2d9dc:	ldrd	r4, [sp]
   2d9e0:	ldrd	r6, [sp, #8]
   2d9e4:	add	sp, sp, #16
   2d9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d9ec:	mov	r0, r5
   2d9f0:	add	r1, sp, #4
   2d9f4:	bl	2d680 <__assert_fail@plt+0x1badc>
   2d9f8:	cmp	r0, #0
   2d9fc:	beq	2d9c0 <__assert_fail@plt+0x1be1c>
   2da00:	cmp	r4, #1
   2da04:	bne	2da3c <__assert_fail@plt+0x1be98>
   2da08:	ldrd	r0, [sp, #4]
   2da0c:	ldrd	r2, [sp, #12]
   2da10:	ldrd	r4, [sp, #20]
   2da14:	strd	r0, [r6]
   2da18:	ldrd	r0, [sp, #28]
   2da1c:	strd	r2, [r6, #8]
   2da20:	ldrd	r2, [sp, #36]	; 0x24
   2da24:	strd	r4, [r6, #16]
   2da28:	ldr	ip, [sp, #44]	; 0x2c
   2da2c:	strd	r0, [r6, #24]
   2da30:	strd	r2, [r6, #32]
   2da34:	str	ip, [r6, #40]	; 0x28
   2da38:	b	2d9d4 <__assert_fail@plt+0x1be30>
   2da3c:	mov	r0, r4
   2da40:	bl	2d578 <__assert_fail@plt+0x1b9d4>
   2da44:	cmp	r0, #0
   2da48:	bne	2da08 <__assert_fail@plt+0x1be64>
   2da4c:	b	2d9d0 <__assert_fail@plt+0x1be2c>
   2da50:	mov	r0, r1
   2da54:	bl	11acc <timegm@plt>
   2da58:	mov	r7, r0
   2da5c:	b	2d9d4 <__assert_fail@plt+0x1be30>
   2da60:	cmp	r0, #2
   2da64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2da68:	mov	r4, r0
   2da6c:	strd	r6, [sp, #8]
   2da70:	str	r8, [sp, #16]
   2da74:	str	lr, [sp, #20]
   2da78:	bls	2da94 <__assert_fail@plt+0x1bef0>
   2da7c:	mov	r0, r4
   2da80:	ldrd	r4, [sp]
   2da84:	ldrd	r6, [sp, #8]
   2da88:	ldr	r8, [sp, #16]
   2da8c:	add	sp, sp, #20
   2da90:	pop	{pc}		; (ldr pc, [sp], #4)
   2da94:	bl	30dc4 <__assert_fail@plt+0x1f220>
   2da98:	mov	r7, r0
   2da9c:	bl	119b8 <__errno_location@plt>
   2daa0:	mov	r5, r0
   2daa4:	mov	r0, r4
   2daa8:	ldr	r6, [r5]
   2daac:	mov	r4, r7
   2dab0:	bl	11b80 <close@plt>
   2dab4:	str	r6, [r5]
   2dab8:	b	2da7c <__assert_fail@plt+0x1bed8>
   2dabc:	cmp	r1, #0
   2dac0:	strd	r4, [sp, #-16]!
   2dac4:	mov	ip, r3
   2dac8:	str	r6, [sp, #8]
   2dacc:	mov	r4, r0
   2dad0:	str	lr, [sp, #12]
   2dad4:	sub	sp, sp, #32
   2dad8:	ldr	r5, [sp, #48]	; 0x30
   2dadc:	ldr	r6, [sp, #52]	; 0x34
   2dae0:	beq	2dc24 <__assert_fail@plt+0x1c080>
   2dae4:	mov	r3, r1
   2dae8:	mov	r1, #1
   2daec:	stm	sp, {r2, ip}
   2daf0:	movw	r2, #13180	; 0x337c
   2daf4:	movt	r2, #3
   2daf8:	bl	11a18 <__fprintf_chk@plt>
   2dafc:	mov	r2, #5
   2db00:	movw	r1, #13200	; 0x3390
   2db04:	movt	r1, #3
   2db08:	mov	r0, #0
   2db0c:	bl	117d8 <dcgettext@plt>
   2db10:	movw	ip, #2022	; 0x7e6
   2db14:	mov	r3, r0
   2db18:	mov	r1, #1
   2db1c:	movw	r2, #13928	; 0x3668
   2db20:	movt	r2, #3
   2db24:	mov	r0, r4
   2db28:	str	ip, [sp]
   2db2c:	bl	11a18 <__fprintf_chk@plt>
   2db30:	mov	r1, r4
   2db34:	mov	r0, #10
   2db38:	bl	117cc <fputc_unlocked@plt>
   2db3c:	mov	r2, #5
   2db40:	movw	r1, #13204	; 0x3394
   2db44:	movt	r1, #3
   2db48:	mov	r0, #0
   2db4c:	bl	117d8 <dcgettext@plt>
   2db50:	mov	r2, r0
   2db54:	mov	r1, #1
   2db58:	movw	r3, #13376	; 0x3440
   2db5c:	movt	r3, #3
   2db60:	mov	r0, r4
   2db64:	bl	11a18 <__fprintf_chk@plt>
   2db68:	mov	r1, r4
   2db6c:	mov	r0, #10
   2db70:	bl	117cc <fputc_unlocked@plt>
   2db74:	cmp	r6, #9
   2db78:	ldrls	pc, [pc, r6, lsl #2]
   2db7c:	b	2de90 <__assert_fail@plt+0x1c2ec>
   2db80:	andeq	sp, r2, r0, lsl ip
   2db84:	andeq	sp, r2, r0, asr #24
   2db88:	andeq	sp, r2, ip, ror ip
   2db8c:			; <UNDEFINED> instruction: 0x0002dcbc
   2db90:	andeq	sp, r2, r4, lsl #26
   2db94:	andeq	sp, r2, ip, lsr sp
   2db98:	andeq	sp, r2, r4, lsl #27
   2db9c:	ldrdeq	sp, [r2], -r8
   2dba0:	andeq	sp, r2, r0, lsr lr
   2dba4:	andeq	sp, r2, r8, lsr #23
   2dba8:	movw	r1, #13680	; 0x3570
   2dbac:	movt	r1, #3
   2dbb0:	mov	r2, #5
   2dbb4:	mov	r0, #0
   2dbb8:	bl	117d8 <dcgettext@plt>
   2dbbc:	ldr	lr, [r5, #4]
   2dbc0:	mov	r2, r0
   2dbc4:	mov	r1, #1
   2dbc8:	mov	r0, r4
   2dbcc:	ldr	r3, [r5, #8]
   2dbd0:	ldr	ip, [r5, #32]
   2dbd4:	str	lr, [sp]
   2dbd8:	ldr	lr, [r5, #12]
   2dbdc:	str	ip, [sp, #28]
   2dbe0:	ldr	ip, [r5, #28]
   2dbe4:	str	r3, [sp, #4]
   2dbe8:	ldr	r3, [r5, #16]
   2dbec:	str	lr, [sp, #8]
   2dbf0:	ldr	lr, [r5, #20]
   2dbf4:	str	ip, [sp, #24]
   2dbf8:	ldr	ip, [r5, #24]
   2dbfc:	str	r3, [sp, #12]
   2dc00:	ldr	r3, [r5]
   2dc04:	str	lr, [sp, #16]
   2dc08:	str	ip, [sp, #20]
   2dc0c:	bl	11a18 <__fprintf_chk@plt>
   2dc10:	add	sp, sp, #32
   2dc14:	ldrd	r4, [sp]
   2dc18:	ldr	r6, [sp, #8]
   2dc1c:	add	sp, sp, #12
   2dc20:	pop	{pc}		; (ldr pc, [sp], #4)
   2dc24:	mov	r3, r2
   2dc28:	mov	r1, #1
   2dc2c:	str	ip, [sp]
   2dc30:	movw	r2, #13192	; 0x3388
   2dc34:	movt	r2, #3
   2dc38:	bl	11a18 <__fprintf_chk@plt>
   2dc3c:	b	2dafc <__assert_fail@plt+0x1bf58>
   2dc40:	mov	r2, #5
   2dc44:	movw	r1, #13412	; 0x3464
   2dc48:	movt	r1, #3
   2dc4c:	mov	r0, #0
   2dc50:	bl	117d8 <dcgettext@plt>
   2dc54:	ldr	r3, [r5]
   2dc58:	mov	r2, r0
   2dc5c:	mov	r1, #1
   2dc60:	mov	r0, r4
   2dc64:	add	sp, sp, #32
   2dc68:	ldrd	r4, [sp]
   2dc6c:	ldr	r6, [sp, #8]
   2dc70:	ldr	lr, [sp, #12]
   2dc74:	add	sp, sp, #16
   2dc78:	b	11a18 <__fprintf_chk@plt>
   2dc7c:	mov	r2, #5
   2dc80:	movw	r1, #13428	; 0x3474
   2dc84:	movt	r1, #3
   2dc88:	mov	r0, #0
   2dc8c:	bl	117d8 <dcgettext@plt>
   2dc90:	ldm	r5, {r3, ip}
   2dc94:	mov	r2, r0
   2dc98:	mov	r1, #1
   2dc9c:	mov	r0, r4
   2dca0:	str	ip, [sp, #48]	; 0x30
   2dca4:	add	sp, sp, #32
   2dca8:	ldrd	r4, [sp]
   2dcac:	ldr	r6, [sp, #8]
   2dcb0:	ldr	lr, [sp, #12]
   2dcb4:	add	sp, sp, #16
   2dcb8:	b	11a18 <__fprintf_chk@plt>
   2dcbc:	mov	r2, #5
   2dcc0:	movw	r1, #13452	; 0x348c
   2dcc4:	movt	r1, #3
   2dcc8:	mov	r0, #0
   2dccc:	bl	117d8 <dcgettext@plt>
   2dcd0:	ldm	r5, {r3, lr}
   2dcd4:	mov	r2, r0
   2dcd8:	mov	r1, #1
   2dcdc:	mov	r0, r4
   2dce0:	ldr	ip, [r5, #8]
   2dce4:	str	lr, [sp, #48]	; 0x30
   2dce8:	str	ip, [sp, #52]	; 0x34
   2dcec:	add	sp, sp, #32
   2dcf0:	ldrd	r4, [sp]
   2dcf4:	ldr	r6, [sp, #8]
   2dcf8:	ldr	lr, [sp, #12]
   2dcfc:	add	sp, sp, #16
   2dd00:	b	11a18 <__fprintf_chk@plt>
   2dd04:	mov	r2, #5
   2dd08:	movw	r1, #13480	; 0x34a8
   2dd0c:	movt	r1, #3
   2dd10:	mov	r0, #0
   2dd14:	bl	117d8 <dcgettext@plt>
   2dd18:	ldmib	r5, {r3, ip, lr}
   2dd1c:	mov	r2, r0
   2dd20:	mov	r1, #1
   2dd24:	mov	r0, r4
   2dd28:	str	r3, [sp]
   2dd2c:	ldr	r3, [r5]
   2dd30:	stmib	sp, {ip, lr}
   2dd34:	bl	11a18 <__fprintf_chk@plt>
   2dd38:	b	2dc10 <__assert_fail@plt+0x1c06c>
   2dd3c:	mov	r2, #5
   2dd40:	movw	r1, #13512	; 0x34c8
   2dd44:	movt	r1, #3
   2dd48:	mov	r0, #0
   2dd4c:	bl	117d8 <dcgettext@plt>
   2dd50:	ldmib	r5, {ip, lr}
   2dd54:	mov	r2, r0
   2dd58:	mov	r1, #1
   2dd5c:	mov	r0, r4
   2dd60:	ldr	r3, [r5, #16]
   2dd64:	str	ip, [sp]
   2dd68:	ldr	ip, [r5, #12]
   2dd6c:	str	r3, [sp, #12]
   2dd70:	ldr	r3, [r5]
   2dd74:	str	lr, [sp, #4]
   2dd78:	str	ip, [sp, #8]
   2dd7c:	bl	11a18 <__fprintf_chk@plt>
   2dd80:	b	2dc10 <__assert_fail@plt+0x1c06c>
   2dd84:	mov	r2, #5
   2dd88:	movw	r1, #13548	; 0x34ec
   2dd8c:	movt	r1, #3
   2dd90:	mov	r0, #0
   2dd94:	bl	117d8 <dcgettext@plt>
   2dd98:	ldr	lr, [r5, #4]
   2dd9c:	mov	r2, r0
   2dda0:	mov	r1, #1
   2dda4:	mov	r0, r4
   2dda8:	ldr	r3, [r5, #8]
   2ddac:	ldr	ip, [r5, #20]
   2ddb0:	str	lr, [sp]
   2ddb4:	ldr	lr, [r5, #12]
   2ddb8:	str	ip, [sp, #16]
   2ddbc:	ldr	ip, [r5, #16]
   2ddc0:	str	r3, [sp, #4]
   2ddc4:	ldr	r3, [r5]
   2ddc8:	str	lr, [sp, #8]
   2ddcc:	str	ip, [sp, #12]
   2ddd0:	bl	11a18 <__fprintf_chk@plt>
   2ddd4:	b	2dc10 <__assert_fail@plt+0x1c06c>
   2ddd8:	mov	r2, #5
   2dddc:	movw	r1, #13588	; 0x3514
   2dde0:	movt	r1, #3
   2dde4:	mov	r0, #0
   2dde8:	bl	117d8 <dcgettext@plt>
   2ddec:	ldmib	r5, {r3, ip}
   2ddf0:	mov	r2, r0
   2ddf4:	mov	r1, #1
   2ddf8:	mov	r0, r4
   2ddfc:	ldr	lr, [r5, #24]
   2de00:	str	r3, [sp]
   2de04:	ldr	r3, [r5, #12]
   2de08:	str	lr, [sp, #20]
   2de0c:	ldr	lr, [r5, #20]
   2de10:	str	ip, [sp, #4]
   2de14:	ldr	ip, [r5, #16]
   2de18:	str	r3, [sp, #8]
   2de1c:	ldr	r3, [r5]
   2de20:	str	ip, [sp, #12]
   2de24:	str	lr, [sp, #16]
   2de28:	bl	11a18 <__fprintf_chk@plt>
   2de2c:	b	2dc10 <__assert_fail@plt+0x1c06c>
   2de30:	mov	r2, #5
   2de34:	movw	r1, #13632	; 0x3540
   2de38:	movt	r1, #3
   2de3c:	mov	r0, #0
   2de40:	bl	117d8 <dcgettext@plt>
   2de44:	ldmib	r5, {ip, lr}
   2de48:	mov	r2, r0
   2de4c:	mov	r1, #1
   2de50:	mov	r0, r4
   2de54:	ldr	r3, [r5, #28]
   2de58:	str	ip, [sp]
   2de5c:	ldr	ip, [r5, #12]
   2de60:	str	r3, [sp, #24]
   2de64:	ldr	r3, [r5, #24]
   2de68:	str	lr, [sp, #4]
   2de6c:	ldr	lr, [r5, #16]
   2de70:	str	ip, [sp, #8]
   2de74:	ldr	ip, [r5, #20]
   2de78:	str	r3, [sp, #20]
   2de7c:	ldr	r3, [r5]
   2de80:	str	lr, [sp, #12]
   2de84:	str	ip, [sp, #16]
   2de88:	bl	11a18 <__fprintf_chk@plt>
   2de8c:	b	2dc10 <__assert_fail@plt+0x1c06c>
   2de90:	movw	r1, #13732	; 0x35a4
   2de94:	movt	r1, #3
   2de98:	b	2dbb0 <__assert_fail@plt+0x1c00c>
   2de9c:	strd	r4, [sp, #-12]!
   2dea0:	str	lr, [sp, #8]
   2dea4:	sub	sp, sp, #12
   2dea8:	ldr	r5, [sp, #24]
   2deac:	ldr	ip, [r5]
   2deb0:	cmp	ip, #0
   2deb4:	beq	2ded0 <__assert_fail@plt+0x1c32c>
   2deb8:	mov	lr, r5
   2debc:	mov	ip, #0
   2dec0:	ldr	r4, [lr, #4]!
   2dec4:	add	ip, ip, #1
   2dec8:	cmp	r4, #0
   2decc:	bne	2dec0 <__assert_fail@plt+0x1c31c>
   2ded0:	stm	sp, {r5, ip}
   2ded4:	bl	2dabc <__assert_fail@plt+0x1bf18>
   2ded8:	add	sp, sp, #12
   2dedc:	ldrd	r4, [sp]
   2dee0:	add	sp, sp, #8
   2dee4:	pop	{pc}		; (ldr pc, [sp], #4)
   2dee8:	strd	r4, [sp, #-16]!
   2deec:	mov	ip, #0
   2def0:	str	r6, [sp, #8]
   2def4:	str	lr, [sp, #12]
   2def8:	sub	sp, sp, #48	; 0x30
   2defc:	ldr	r5, [sp, #64]	; 0x40
   2df00:	add	r6, sp, #8
   2df04:	mov	r4, r6
   2df08:	ldr	lr, [r5], #4
   2df0c:	cmp	lr, #0
   2df10:	str	lr, [r4], #4
   2df14:	beq	2df24 <__assert_fail@plt+0x1c380>
   2df18:	add	ip, ip, #1
   2df1c:	cmp	ip, #10
   2df20:	bne	2df08 <__assert_fail@plt+0x1c364>
   2df24:	stm	sp, {r6, ip}
   2df28:	bl	2dabc <__assert_fail@plt+0x1bf18>
   2df2c:	add	sp, sp, #48	; 0x30
   2df30:	ldrd	r4, [sp]
   2df34:	ldr	r6, [sp, #8]
   2df38:	add	sp, sp, #12
   2df3c:	pop	{pc}		; (ldr pc, [sp], #4)
   2df40:	push	{r3}		; (str r3, [sp, #-4]!)
   2df44:	mov	ip, #0
   2df48:	strd	r4, [sp, #-12]!
   2df4c:	str	lr, [sp, #8]
   2df50:	sub	sp, sp, #56	; 0x38
   2df54:	add	r3, sp, #72	; 0x48
   2df58:	add	r5, sp, #16
   2df5c:	mov	r4, r3
   2df60:	mov	lr, r5
   2df64:	str	r3, [sp, #12]
   2df68:	ldr	r3, [r4], #4
   2df6c:	cmp	r3, #0
   2df70:	str	r3, [lr], #4
   2df74:	beq	2df84 <__assert_fail@plt+0x1c3e0>
   2df78:	add	ip, ip, #1
   2df7c:	cmp	ip, #10
   2df80:	bne	2df68 <__assert_fail@plt+0x1c3c4>
   2df84:	ldr	r3, [sp, #68]	; 0x44
   2df88:	stm	sp, {r5, ip}
   2df8c:	bl	2dabc <__assert_fail@plt+0x1bf18>
   2df90:	add	sp, sp, #56	; 0x38
   2df94:	ldrd	r4, [sp]
   2df98:	ldr	lr, [sp, #8]
   2df9c:	add	sp, sp, #12
   2dfa0:	add	sp, sp, #4
   2dfa4:	bx	lr
   2dfa8:	movw	r3, #16956	; 0x423c
   2dfac:	movt	r3, #4
   2dfb0:	str	r4, [sp, #-8]!
   2dfb4:	mov	r0, #10
   2dfb8:	ldr	r1, [r3]
   2dfbc:	str	lr, [sp, #4]
   2dfc0:	bl	117cc <fputc_unlocked@plt>
   2dfc4:	mov	r2, #5
   2dfc8:	movw	r1, #13792	; 0x35e0
   2dfcc:	movt	r1, #3
   2dfd0:	mov	r0, #0
   2dfd4:	bl	117d8 <dcgettext@plt>
   2dfd8:	mov	r1, r0
   2dfdc:	movw	r2, #13812	; 0x35f4
   2dfe0:	movt	r2, #3
   2dfe4:	mov	r0, #1
   2dfe8:	bl	11a00 <__printf_chk@plt>
   2dfec:	mov	r2, #5
   2dff0:	movw	r1, #13836	; 0x360c
   2dff4:	movt	r1, #3
   2dff8:	mov	r0, #0
   2dffc:	bl	117d8 <dcgettext@plt>
   2e000:	mov	r1, r0
   2e004:	movw	r3, #9604	; 0x2584
   2e008:	movt	r3, #3
   2e00c:	movw	r2, #9644	; 0x25ac
   2e010:	movt	r2, #3
   2e014:	mov	r0, #1
   2e018:	bl	11a00 <__printf_chk@plt>
   2e01c:	mov	r2, #5
   2e020:	movw	r1, #13856	; 0x3620
   2e024:	movt	r1, #3
   2e028:	mov	r0, #0
   2e02c:	bl	117d8 <dcgettext@plt>
   2e030:	mov	r1, r0
   2e034:	movw	r2, #13896	; 0x3648
   2e038:	movt	r2, #3
   2e03c:	mov	r0, #1
   2e040:	ldr	r4, [sp]
   2e044:	ldr	lr, [sp, #4]
   2e048:	add	sp, sp, #8
   2e04c:	b	11a00 <__printf_chk@plt>
   2e050:	str	r4, [sp, #-8]!
   2e054:	str	lr, [sp, #4]
   2e058:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2e05c:	cmp	r0, #0
   2e060:	beq	2e070 <__assert_fail@plt+0x1c4cc>
   2e064:	ldr	r4, [sp]
   2e068:	add	sp, sp, #4
   2e06c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e070:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e074:	str	r4, [sp, #-8]!
   2e078:	str	lr, [sp, #4]
   2e07c:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2e080:	cmp	r0, #0
   2e084:	beq	2e094 <__assert_fail@plt+0x1c4f0>
   2e088:	ldr	r4, [sp]
   2e08c:	add	sp, sp, #4
   2e090:	pop	{pc}		; (ldr pc, [sp], #4)
   2e094:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e098:	str	r4, [sp, #-8]!
   2e09c:	str	lr, [sp, #4]
   2e0a0:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2e0a4:	cmp	r0, #0
   2e0a8:	beq	2e0b8 <__assert_fail@plt+0x1c514>
   2e0ac:	ldr	r4, [sp]
   2e0b0:	add	sp, sp, #4
   2e0b4:	pop	{pc}		; (ldr pc, [sp], #4)
   2e0b8:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e0bc:	strd	r4, [sp, #-16]!
   2e0c0:	mov	r5, r0
   2e0c4:	mov	r4, r1
   2e0c8:	str	r6, [sp, #8]
   2e0cc:	str	lr, [sp, #12]
   2e0d0:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   2e0d4:	cmp	r0, #0
   2e0d8:	beq	2e0ec <__assert_fail@plt+0x1c548>
   2e0dc:	ldrd	r4, [sp]
   2e0e0:	ldr	r6, [sp, #8]
   2e0e4:	add	sp, sp, #12
   2e0e8:	pop	{pc}		; (ldr pc, [sp], #4)
   2e0ec:	adds	r4, r4, #0
   2e0f0:	movne	r4, #1
   2e0f4:	cmp	r5, #0
   2e0f8:	moveq	r4, #1
   2e0fc:	cmp	r4, #0
   2e100:	beq	2e0dc <__assert_fail@plt+0x1c538>
   2e104:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e108:	cmp	r1, #0
   2e10c:	orreq	r1, r1, #1
   2e110:	str	r4, [sp, #-8]!
   2e114:	str	lr, [sp, #4]
   2e118:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   2e11c:	cmp	r0, #0
   2e120:	beq	2e130 <__assert_fail@plt+0x1c58c>
   2e124:	ldr	r4, [sp]
   2e128:	add	sp, sp, #4
   2e12c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e130:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e134:	strd	r4, [sp, #-16]!
   2e138:	mov	r4, r0
   2e13c:	mov	r5, r2
   2e140:	str	r6, [sp, #8]
   2e144:	mov	r6, r1
   2e148:	str	lr, [sp, #12]
   2e14c:	bl	30cc8 <__assert_fail@plt+0x1f124>
   2e150:	cmp	r0, #0
   2e154:	beq	2e168 <__assert_fail@plt+0x1c5c4>
   2e158:	ldrd	r4, [sp]
   2e15c:	ldr	r6, [sp, #8]
   2e160:	add	sp, sp, #12
   2e164:	pop	{pc}		; (ldr pc, [sp], #4)
   2e168:	cmp	r4, #0
   2e16c:	beq	2e17c <__assert_fail@plt+0x1c5d8>
   2e170:	cmp	r6, #0
   2e174:	cmpne	r5, #0
   2e178:	beq	2e158 <__assert_fail@plt+0x1c5b4>
   2e17c:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e180:	b	2e134 <__assert_fail@plt+0x1c590>
   2e184:	cmp	r2, #0
   2e188:	cmpne	r1, #0
   2e18c:	str	r4, [sp, #-8]!
   2e190:	moveq	r2, #1
   2e194:	str	lr, [sp, #4]
   2e198:	moveq	r1, r2
   2e19c:	bl	30cc8 <__assert_fail@plt+0x1f124>
   2e1a0:	cmp	r0, #0
   2e1a4:	beq	2e1b4 <__assert_fail@plt+0x1c610>
   2e1a8:	ldr	r4, [sp]
   2e1ac:	add	sp, sp, #4
   2e1b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2e1b4:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e1b8:	mov	r2, r1
   2e1bc:	mov	r1, r0
   2e1c0:	mov	r0, #0
   2e1c4:	b	2e134 <__assert_fail@plt+0x1c590>
   2e1c8:	mov	r2, r1
   2e1cc:	mov	r1, r0
   2e1d0:	mov	r0, #0
   2e1d4:	b	2e184 <__assert_fail@plt+0x1c5e0>
   2e1d8:	cmp	r0, #0
   2e1dc:	strd	r4, [sp, #-16]!
   2e1e0:	mov	r5, r1
   2e1e4:	ldr	r4, [r1]
   2e1e8:	str	r6, [sp, #8]
   2e1ec:	str	lr, [sp, #12]
   2e1f0:	beq	2e220 <__assert_fail@plt+0x1c67c>
   2e1f4:	lsr	r3, r4, #1
   2e1f8:	add	r3, r3, #1
   2e1fc:	adds	r4, r4, r3
   2e200:	bcs	2e23c <__assert_fail@plt+0x1c698>
   2e204:	mov	r1, r4
   2e208:	bl	2e134 <__assert_fail@plt+0x1c590>
   2e20c:	ldr	r6, [sp, #8]
   2e210:	str	r4, [r5]
   2e214:	ldrd	r4, [sp]
   2e218:	add	sp, sp, #12
   2e21c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e220:	cmp	r4, #0
   2e224:	bne	2e204 <__assert_fail@plt+0x1c660>
   2e228:	mov	r4, #64	; 0x40
   2e22c:	udiv	r4, r4, r2
   2e230:	cmp	r2, #64	; 0x40
   2e234:	addhi	r4, r4, #1
   2e238:	b	2e204 <__assert_fail@plt+0x1c660>
   2e23c:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e240:	mov	r2, #1
   2e244:	b	2e1d8 <__assert_fail@plt+0x1c634>
   2e248:	ldr	ip, [r1]
   2e24c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2e250:	mov	r5, r1
   2e254:	strd	r6, [sp, #8]
   2e258:	str	lr, [sp, #28]
   2e25c:	strd	r8, [sp, #16]
   2e260:	asr	lr, ip, #1
   2e264:	ldr	r8, [sp, #32]
   2e268:	str	sl, [sp, #24]
   2e26c:	adds	r4, ip, lr
   2e270:	mvn	lr, r3
   2e274:	lsr	lr, lr, #31
   2e278:	mvnvs	r4, #-2147483648	; 0x80000000
   2e27c:	cmp	r3, r4
   2e280:	movge	r1, #0
   2e284:	andlt	r1, lr, #1
   2e288:	cmp	r1, #0
   2e28c:	movne	r4, r3
   2e290:	smull	r6, r7, r4, r8
   2e294:	cmp	r7, r6, asr #31
   2e298:	bne	2e320 <__assert_fail@plt+0x1c77c>
   2e29c:	cmp	r6, #63	; 0x3f
   2e2a0:	mov	r1, r6
   2e2a4:	ble	2e308 <__assert_fail@plt+0x1c764>
   2e2a8:	cmp	r0, #0
   2e2ac:	sub	r6, r4, ip
   2e2b0:	streq	r0, [r5]
   2e2b4:	cmp	r6, r2
   2e2b8:	bge	2e2e8 <__assert_fail@plt+0x1c744>
   2e2bc:	adds	r4, ip, r2
   2e2c0:	bvs	2e31c <__assert_fail@plt+0x1c778>
   2e2c4:	cmp	r4, r3
   2e2c8:	movle	r3, #0
   2e2cc:	andgt	r3, lr, #1
   2e2d0:	cmp	r3, #0
   2e2d4:	bne	2e31c <__assert_fail@plt+0x1c778>
   2e2d8:	smull	r8, r9, r4, r8
   2e2dc:	cmp	r9, r8, asr #31
   2e2e0:	mov	r1, r8
   2e2e4:	bne	2e31c <__assert_fail@plt+0x1c778>
   2e2e8:	bl	2e0bc <__assert_fail@plt+0x1c518>
   2e2ec:	ldrd	r6, [sp, #8]
   2e2f0:	ldrd	r8, [sp, #16]
   2e2f4:	ldr	sl, [sp, #24]
   2e2f8:	str	r4, [r5]
   2e2fc:	ldrd	r4, [sp]
   2e300:	add	sp, sp, #28
   2e304:	pop	{pc}		; (ldr pc, [sp], #4)
   2e308:	mov	r6, #64	; 0x40
   2e30c:	sdiv	r4, r6, r8
   2e310:	mls	r1, r8, r4, r6
   2e314:	sub	r1, r6, r1
   2e318:	b	2e2a8 <__assert_fail@plt+0x1c704>
   2e31c:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e320:	mvn	r6, #-2147483648	; 0x80000000
   2e324:	b	2e30c <__assert_fail@plt+0x1c768>
   2e328:	mov	r1, #1
   2e32c:	str	r4, [sp, #-8]!
   2e330:	str	lr, [sp, #4]
   2e334:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   2e338:	cmp	r0, #0
   2e33c:	beq	2e34c <__assert_fail@plt+0x1c7a8>
   2e340:	ldr	r4, [sp]
   2e344:	add	sp, sp, #4
   2e348:	pop	{pc}		; (ldr pc, [sp], #4)
   2e34c:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e350:	mov	r1, #1
   2e354:	str	r4, [sp, #-8]!
   2e358:	str	lr, [sp, #4]
   2e35c:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   2e360:	cmp	r0, #0
   2e364:	beq	2e374 <__assert_fail@plt+0x1c7d0>
   2e368:	ldr	r4, [sp]
   2e36c:	add	sp, sp, #4
   2e370:	pop	{pc}		; (ldr pc, [sp], #4)
   2e374:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e378:	str	r4, [sp, #-8]!
   2e37c:	str	lr, [sp, #4]
   2e380:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   2e384:	cmp	r0, #0
   2e388:	beq	2e398 <__assert_fail@plt+0x1c7f4>
   2e38c:	ldr	r4, [sp]
   2e390:	add	sp, sp, #4
   2e394:	pop	{pc}		; (ldr pc, [sp], #4)
   2e398:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e39c:	str	r4, [sp, #-8]!
   2e3a0:	str	lr, [sp, #4]
   2e3a4:	bl	2fd10 <__assert_fail@plt+0x1e16c>
   2e3a8:	cmp	r0, #0
   2e3ac:	beq	2e3bc <__assert_fail@plt+0x1c818>
   2e3b0:	ldr	r4, [sp]
   2e3b4:	add	sp, sp, #4
   2e3b8:	pop	{pc}		; (ldr pc, [sp], #4)
   2e3bc:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e3c0:	strd	r4, [sp, #-16]!
   2e3c4:	mov	r4, r1
   2e3c8:	str	r6, [sp, #8]
   2e3cc:	mov	r6, r0
   2e3d0:	mov	r0, r1
   2e3d4:	str	lr, [sp, #12]
   2e3d8:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2e3dc:	subs	r5, r0, #0
   2e3e0:	beq	2e404 <__assert_fail@plt+0x1c860>
   2e3e4:	mov	r2, r4
   2e3e8:	mov	r1, r6
   2e3ec:	bl	11784 <memcpy@plt>
   2e3f0:	mov	r0, r5
   2e3f4:	ldrd	r4, [sp]
   2e3f8:	ldr	r6, [sp, #8]
   2e3fc:	add	sp, sp, #12
   2e400:	pop	{pc}		; (ldr pc, [sp], #4)
   2e404:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e408:	strd	r4, [sp, #-16]!
   2e40c:	mov	r4, r1
   2e410:	str	r6, [sp, #8]
   2e414:	mov	r6, r0
   2e418:	mov	r0, r1
   2e41c:	str	lr, [sp, #12]
   2e420:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2e424:	subs	r5, r0, #0
   2e428:	beq	2e44c <__assert_fail@plt+0x1c8a8>
   2e42c:	mov	r2, r4
   2e430:	mov	r1, r6
   2e434:	bl	11784 <memcpy@plt>
   2e438:	mov	r0, r5
   2e43c:	ldrd	r4, [sp]
   2e440:	ldr	r6, [sp, #8]
   2e444:	add	sp, sp, #12
   2e448:	pop	{pc}		; (ldr pc, [sp], #4)
   2e44c:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e450:	strd	r4, [sp, #-16]!
   2e454:	mov	r4, r1
   2e458:	str	r6, [sp, #8]
   2e45c:	mov	r6, r0
   2e460:	add	r0, r1, #1
   2e464:	str	lr, [sp, #12]
   2e468:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   2e46c:	subs	r5, r0, #0
   2e470:	beq	2e49c <__assert_fail@plt+0x1c8f8>
   2e474:	mov	r3, #0
   2e478:	mov	r1, r6
   2e47c:	mov	r2, r4
   2e480:	strb	r3, [r5, r4]
   2e484:	bl	11784 <memcpy@plt>
   2e488:	mov	r0, r5
   2e48c:	ldrd	r4, [sp]
   2e490:	ldr	r6, [sp, #8]
   2e494:	add	sp, sp, #12
   2e498:	pop	{pc}		; (ldr pc, [sp], #4)
   2e49c:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e4a0:	str	r4, [sp, #-8]!
   2e4a4:	mov	r4, r0
   2e4a8:	str	lr, [sp, #4]
   2e4ac:	bl	11988 <strlen@plt>
   2e4b0:	add	r1, r0, #1
   2e4b4:	mov	r0, r4
   2e4b8:	ldr	r4, [sp]
   2e4bc:	ldr	lr, [sp, #4]
   2e4c0:	add	sp, sp, #8
   2e4c4:	b	2e3c0 <__assert_fail@plt+0x1c81c>
   2e4c8:	movw	r3, #16856	; 0x41d8
   2e4cc:	movt	r3, #4
   2e4d0:	str	r4, [sp, #-8]!
   2e4d4:	ldr	r4, [r3]
   2e4d8:	mov	r2, #5
   2e4dc:	movw	r1, #13976	; 0x3698
   2e4e0:	movt	r1, #3
   2e4e4:	mov	r0, #0
   2e4e8:	str	lr, [sp, #4]
   2e4ec:	bl	117d8 <dcgettext@plt>
   2e4f0:	mov	r3, r0
   2e4f4:	movw	r2, #11532	; 0x2d0c
   2e4f8:	movt	r2, #3
   2e4fc:	mov	r1, #0
   2e500:	mov	r0, r4
   2e504:	bl	118bc <error@plt>
   2e508:	bl	11b68 <abort@plt>
   2e50c:	orr	r1, r1, #512	; 0x200
   2e510:	str	r4, [sp, #-8]!
   2e514:	str	lr, [sp, #4]
   2e518:	bl	19344 <__assert_fail@plt+0x77a0>
   2e51c:	cmp	r0, #0
   2e520:	beq	2e530 <__assert_fail@plt+0x1c98c>
   2e524:	ldr	r4, [sp]
   2e528:	add	sp, sp, #4
   2e52c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e530:	bl	119b8 <__errno_location@plt>
   2e534:	ldr	r3, [r0]
   2e538:	cmp	r3, #22
   2e53c:	beq	2e544 <__assert_fail@plt+0x1c9a0>
   2e540:	bl	2e4c8 <__assert_fail@plt+0x1c924>
   2e544:	movw	r3, #13996	; 0x36ac
   2e548:	movt	r3, #3
   2e54c:	movw	r1, #14008	; 0x36b8
   2e550:	movt	r1, #3
   2e554:	movw	r0, #14020	; 0x36c4
   2e558:	movt	r0, #3
   2e55c:	mov	r2, #41	; 0x29
   2e560:	bl	11ba4 <__assert_fail@plt>
   2e564:	ldr	r3, [r0, #48]	; 0x30
   2e568:	and	r3, r3, #17
   2e56c:	cmp	r3, #16
   2e570:	beq	2e594 <__assert_fail@plt+0x1c9f0>
   2e574:	cmp	r3, #17
   2e578:	beq	2e584 <__assert_fail@plt+0x1c9e0>
   2e57c:	mov	r0, #0
   2e580:	bx	lr
   2e584:	ldr	r0, [r1, #48]	; 0x30
   2e588:	adds	r0, r0, #0
   2e58c:	movne	r0, #1
   2e590:	bx	lr
   2e594:	mov	r0, #1
   2e598:	bx	lr
   2e59c:	cmp	r2, #36	; 0x24
   2e5a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e5a4:	strd	r6, [sp, #8]
   2e5a8:	strd	r8, [sp, #16]
   2e5ac:	strd	sl, [sp, #24]
   2e5b0:	str	lr, [sp, #32]
   2e5b4:	sub	sp, sp, #44	; 0x2c
   2e5b8:	bhi	2f1a4 <__assert_fail@plt+0x1d600>
   2e5bc:	cmp	r1, #0
   2e5c0:	mov	r5, r1
   2e5c4:	mov	r6, r2
   2e5c8:	addeq	r5, sp, #36	; 0x24
   2e5cc:	mov	sl, r0
   2e5d0:	mov	r7, r3
   2e5d4:	bl	119b8 <__errno_location@plt>
   2e5d8:	mov	fp, r0
   2e5dc:	mov	r4, #0
   2e5e0:	mov	r2, r6
   2e5e4:	mov	r3, r4
   2e5e8:	mov	r1, r5
   2e5ec:	mov	r0, sl
   2e5f0:	str	r4, [fp]
   2e5f4:	bl	11af0 <__strtoll_internal@plt>
   2e5f8:	ldr	r6, [r5]
   2e5fc:	mov	r8, r0
   2e600:	mov	r9, r1
   2e604:	cmp	r6, sl
   2e608:	beq	2e660 <__assert_fail@plt+0x1cabc>
   2e60c:	ldr	r4, [fp]
   2e610:	cmp	r4, #0
   2e614:	beq	2e624 <__assert_fail@plt+0x1ca80>
   2e618:	cmp	r4, #34	; 0x22
   2e61c:	bne	2e764 <__assert_fail@plt+0x1cbc0>
   2e620:	mov	r4, #1
   2e624:	ldr	r3, [sp, #80]	; 0x50
   2e628:	cmp	r3, #0
   2e62c:	beq	2e63c <__assert_fail@plt+0x1ca98>
   2e630:	ldrb	sl, [r6]
   2e634:	cmp	sl, #0
   2e638:	bne	2e868 <__assert_fail@plt+0x1ccc4>
   2e63c:	strd	r8, [r7]
   2e640:	mov	r0, r4
   2e644:	add	sp, sp, #44	; 0x2c
   2e648:	ldrd	r4, [sp]
   2e64c:	ldrd	r6, [sp, #8]
   2e650:	ldrd	r8, [sp, #16]
   2e654:	ldrd	sl, [sp, #24]
   2e658:	add	sp, sp, #32
   2e65c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e660:	ldr	r3, [sp, #80]	; 0x50
   2e664:	cmp	r3, r4
   2e668:	beq	2e764 <__assert_fail@plt+0x1cbc0>
   2e66c:	ldrb	sl, [sl]
   2e670:	cmp	sl, r4
   2e674:	beq	2e764 <__assert_fail@plt+0x1cbc0>
   2e678:	mov	r1, sl
   2e67c:	mov	r0, r3
   2e680:	bl	11994 <strchr@plt>
   2e684:	cmp	r0, r4
   2e688:	movne	r8, #1
   2e68c:	movne	r9, #0
   2e690:	beq	2e764 <__assert_fail@plt+0x1cbc0>
   2e694:	sub	fp, sl, #69	; 0x45
   2e698:	cmp	fp, #47	; 0x2f
   2e69c:	ldrls	pc, [pc, fp, lsl #2]
   2e6a0:	b	2e884 <__assert_fail@plt+0x1cce0>
   2e6a4:	andeq	lr, r2, ip, ror #14
   2e6a8:	andeq	lr, r2, r4, lsl #17
   2e6ac:	andeq	lr, r2, ip, ror #14
   2e6b0:	andeq	lr, r2, r4, lsl #17
   2e6b4:	andeq	lr, r2, r4, lsl #17
   2e6b8:	andeq	lr, r2, r4, lsl #17
   2e6bc:	andeq	lr, r2, ip, ror #14
   2e6c0:	andeq	lr, r2, r4, lsl #17
   2e6c4:	andeq	lr, r2, ip, ror #14
   2e6c8:	andeq	lr, r2, r4, lsl #17
   2e6cc:	andeq	lr, r2, r4, lsl #17
   2e6d0:	andeq	lr, r2, ip, ror #14
   2e6d4:	andeq	lr, r2, r4, lsl #17
   2e6d8:	andeq	lr, r2, r4, lsl #17
   2e6dc:	andeq	lr, r2, r4, lsl #17
   2e6e0:	andeq	lr, r2, ip, ror #14
   2e6e4:	andeq	lr, r2, r4, lsl #17
   2e6e8:	andeq	lr, r2, r4, lsl #17
   2e6ec:	andeq	lr, r2, r4, lsl #17
   2e6f0:	andeq	lr, r2, r4, lsl #17
   2e6f4:	andeq	lr, r2, ip, ror #14
   2e6f8:	andeq	lr, r2, ip, ror #14
   2e6fc:	andeq	lr, r2, r4, lsl #17
   2e700:	andeq	lr, r2, r4, lsl #17
   2e704:	andeq	lr, r2, r4, lsl #17
   2e708:	andeq	lr, r2, r4, lsl #17
   2e70c:	andeq	lr, r2, r4, lsl #17
   2e710:	andeq	lr, r2, r4, lsl #17
   2e714:	andeq	lr, r2, r4, lsl #17
   2e718:	andeq	lr, r2, r4, lsl #17
   2e71c:	andeq	lr, r2, r4, lsl #17
   2e720:	andeq	lr, r2, r4, lsl #17
   2e724:	andeq	lr, r2, r4, lsl #17
   2e728:	andeq	lr, r2, r4, lsl #17
   2e72c:	andeq	lr, r2, ip, ror #14
   2e730:	andeq	lr, r2, r4, lsl #17
   2e734:	andeq	lr, r2, r4, lsl #17
   2e738:	andeq	lr, r2, r4, lsl #17
   2e73c:	andeq	lr, r2, ip, ror #14
   2e740:	andeq	lr, r2, r4, lsl #17
   2e744:	andeq	lr, r2, ip, ror #14
   2e748:	andeq	lr, r2, r4, lsl #17
   2e74c:	andeq	lr, r2, r4, lsl #17
   2e750:	andeq	lr, r2, r4, lsl #17
   2e754:	andeq	lr, r2, r4, lsl #17
   2e758:	andeq	lr, r2, r4, lsl #17
   2e75c:	andeq	lr, r2, r4, lsl #17
   2e760:	andeq	lr, r2, ip, ror #14
   2e764:	mov	r4, #4
   2e768:	b	2e640 <__assert_fail@plt+0x1ca9c>
   2e76c:	mov	r1, #48	; 0x30
   2e770:	ldr	r0, [sp, #80]	; 0x50
   2e774:	bl	11994 <strchr@plt>
   2e778:	cmp	r0, #0
   2e77c:	beq	2e884 <__assert_fail@plt+0x1cce0>
   2e780:	ldrb	r3, [r6, #1]
   2e784:	cmp	r3, #68	; 0x44
   2e788:	beq	2ee4c <__assert_fail@plt+0x1d2a8>
   2e78c:	cmp	r3, #105	; 0x69
   2e790:	beq	2effc <__assert_fail@plt+0x1d458>
   2e794:	cmp	r3, #66	; 0x42
   2e798:	beq	2ee4c <__assert_fail@plt+0x1d2a8>
   2e79c:	cmp	fp, #47	; 0x2f
   2e7a0:	ldrls	pc, [pc, fp, lsl #2]
   2e7a4:	b	2e87c <__assert_fail@plt+0x1ccd8>
   2e7a8:	andeq	lr, r2, r4, lsr #27
   2e7ac:	andeq	lr, r2, ip, ror r8
   2e7b0:	muleq	r2, r4, sp
   2e7b4:	andeq	lr, r2, ip, ror r8
   2e7b8:	andeq	lr, r2, ip, ror r8
   2e7bc:	andeq	lr, r2, ip, ror r8
   2e7c0:	andeq	lr, r2, r0, lsl lr
   2e7c4:	andeq	lr, r2, ip, ror r8
   2e7c8:	andeq	lr, r2, r0, lsl #28
   2e7cc:	andeq	lr, r2, ip, ror r8
   2e7d0:	andeq	lr, r2, ip, ror r8
   2e7d4:	ldrdeq	lr, [r2], -r0
   2e7d8:	andeq	lr, r2, ip, ror r8
   2e7dc:	andeq	lr, r2, ip, ror r8
   2e7e0:	andeq	lr, r2, ip, ror r8
   2e7e4:	andeq	lr, r2, r0, asr #27
   2e7e8:	andeq	lr, r2, ip, ror r8
   2e7ec:	andeq	lr, r2, ip, ror r8
   2e7f0:	andeq	lr, r2, ip, ror r8
   2e7f4:	andeq	lr, r2, ip, ror r8
   2e7f8:	strdeq	lr, [r2], -r0
   2e7fc:	andeq	lr, r2, r0, ror #27
   2e800:	andeq	lr, r2, ip, ror r8
   2e804:	andeq	lr, r2, ip, ror r8
   2e808:	andeq	lr, r2, ip, ror r8
   2e80c:	andeq	lr, r2, ip, ror r8
   2e810:	andeq	lr, r2, ip, ror r8
   2e814:	andeq	lr, r2, ip, ror r8
   2e818:	andeq	lr, r2, ip, ror r8
   2e81c:	andeq	lr, r2, r4, ror r9
   2e820:			; <UNDEFINED> instruction: 0x0002edb4
   2e824:	andeq	lr, r2, ip, ror r8
   2e828:	andeq	lr, r2, ip, ror r8
   2e82c:	andeq	lr, r2, ip, ror r8
   2e830:	muleq	r2, r4, sp
   2e834:	andeq	lr, r2, ip, ror r8
   2e838:	andeq	lr, r2, ip, ror r8
   2e83c:	andeq	lr, r2, ip, ror r8
   2e840:	andeq	lr, r2, r0, lsl lr
   2e844:	andeq	lr, r2, ip, ror r8
   2e848:	andeq	lr, r2, r0, lsl #28
   2e84c:	andeq	lr, r2, ip, ror r8
   2e850:	andeq	lr, r2, ip, ror r8
   2e854:	andeq	lr, r2, ip, ror r8
   2e858:	andeq	lr, r2, ip, ror r8
   2e85c:	andeq	lr, r2, ip, ror r8
   2e860:	andeq	lr, r2, ip, ror r8
   2e864:	andeq	lr, r2, r0, asr #27
   2e868:	mov	r1, sl
   2e86c:	ldr	r0, [sp, #80]	; 0x50
   2e870:	bl	11994 <strchr@plt>
   2e874:	cmp	r0, #0
   2e878:	bne	2e694 <__assert_fail@plt+0x1caf0>
   2e87c:	orr	r4, r4, #2
   2e880:	b	2e63c <__assert_fail@plt+0x1ca98>
   2e884:	mov	r3, #1
   2e888:	mov	fp, #1024	; 0x400
   2e88c:	sub	sl, sl, #66	; 0x42
   2e890:	cmp	sl, #53	; 0x35
   2e894:	ldrls	pc, [pc, sl, lsl #2]
   2e898:	b	2e87c <__assert_fail@plt+0x1ccd8>
   2e89c:	andeq	lr, r2, r0, asr #19
   2e8a0:	andeq	lr, r2, ip, ror r8
   2e8a4:	andeq	lr, r2, ip, ror r8
   2e8a8:	andeq	lr, r2, ip, lsr #23
   2e8ac:	andeq	lr, r2, ip, ror r8
   2e8b0:	andeq	lr, r2, r4, lsr fp
   2e8b4:	andeq	lr, r2, ip, ror r8
   2e8b8:	andeq	lr, r2, ip, ror r8
   2e8bc:	andeq	lr, r2, ip, ror r8
   2e8c0:	strdeq	lr, [r2], -r8
   2e8c4:	andeq	lr, r2, ip, ror r8
   2e8c8:	muleq	r2, ip, sl
   2e8cc:	andeq	lr, r2, ip, ror r8
   2e8d0:	andeq	lr, r2, ip, ror r8
   2e8d4:	muleq	r2, ip, ip
   2e8d8:	andeq	lr, r2, ip, ror r8
   2e8dc:	andeq	lr, r2, ip, ror r8
   2e8e0:	andeq	lr, r2, ip, ror r8
   2e8e4:	andeq	lr, r2, r4, lsr #24
   2e8e8:	andeq	lr, r2, ip, ror r8
   2e8ec:	andeq	lr, r2, ip, ror r8
   2e8f0:	andeq	lr, r2, ip, ror r8
   2e8f4:	andeq	lr, r2, ip, ror r8
   2e8f8:	andeq	lr, r2, r4, lsl sp
   2e8fc:	andeq	lr, r2, r4, lsr #20
   2e900:	andeq	lr, r2, ip, ror r8
   2e904:	andeq	lr, r2, ip, ror r8
   2e908:	andeq	lr, r2, ip, ror r8
   2e90c:	andeq	lr, r2, ip, ror r8
   2e910:	andeq	lr, r2, ip, ror r8
   2e914:	andeq	lr, r2, ip, ror r8
   2e918:	andeq	lr, r2, ip, ror r8
   2e91c:	andeq	lr, r2, r8, ror r9
   2e920:	andeq	lr, r2, ip, lsl #27
   2e924:	andeq	lr, r2, ip, ror r8
   2e928:	andeq	lr, r2, ip, ror r8
   2e92c:	andeq	lr, r2, ip, ror r8
   2e930:	andeq	lr, r2, r4, lsr fp
   2e934:	andeq	lr, r2, ip, ror r8
   2e938:	andeq	lr, r2, ip, ror r8
   2e93c:	andeq	lr, r2, ip, ror r8
   2e940:	strdeq	lr, [r2], -r8
   2e944:	andeq	lr, r2, ip, ror r8
   2e948:	muleq	r2, ip, sl
   2e94c:	andeq	lr, r2, ip, ror r8
   2e950:	andeq	lr, r2, ip, ror r8
   2e954:	andeq	lr, r2, ip, ror r8
   2e958:	andeq	lr, r2, ip, ror r8
   2e95c:	andeq	lr, r2, ip, ror r8
   2e960:	andeq	lr, r2, ip, ror r8
   2e964:	andeq	lr, r2, r4, lsr #24
   2e968:	andeq	lr, r2, ip, ror r8
   2e96c:	andeq	lr, r2, ip, ror r8
   2e970:	andeq	lr, r2, r0, ror #19
   2e974:	mov	r3, #1
   2e978:	cmp	r9, r8, asr #31
   2e97c:	mov	ip, #0
   2e980:	str	r3, [sp, #4]
   2e984:	bne	2f014 <__assert_fail@plt+0x1d470>
   2e988:	lsl	r3, r9, #9
   2e98c:	lsl	r2, r8, #9
   2e990:	orr	r3, r3, r8, lsr #23
   2e994:	cmp	ip, #0
   2e998:	bne	2ea08 <__assert_fail@plt+0x1ce64>
   2e99c:	mov	r8, r2
   2e9a0:	mov	r9, r3
   2e9a4:	ldr	r2, [sp, #4]
   2e9a8:	add	r3, r6, r2
   2e9ac:	str	r3, [r5]
   2e9b0:	ldrb	r3, [r6, r2]
   2e9b4:	cmp	r3, #0
   2e9b8:	beq	2e63c <__assert_fail@plt+0x1ca98>
   2e9bc:	b	2e87c <__assert_fail@plt+0x1ccd8>
   2e9c0:	cmp	r9, r8, asr #31
   2e9c4:	mov	ip, #0
   2e9c8:	str	r3, [sp, #4]
   2e9cc:	bne	2f05c <__assert_fail@plt+0x1d4b8>
   2e9d0:	lsl	r3, r9, #10
   2e9d4:	lsl	r2, r8, #10
   2e9d8:	orr	r3, r3, r8, lsr #22
   2e9dc:	b	2e994 <__assert_fail@plt+0x1cdf0>
   2e9e0:	cmp	r9, r8, asr #31
   2e9e4:	mov	r1, #0
   2e9e8:	str	r3, [sp, #4]
   2e9ec:	bne	2f0e0 <__assert_fail@plt+0x1d53c>
   2e9f0:	adds	ip, r8, r8
   2e9f4:	adc	r3, r9, r9
   2e9f8:	cmp	r1, #0
   2e9fc:	moveq	r8, ip
   2ea00:	moveq	r9, r3
   2ea04:	beq	2e9a4 <__assert_fail@plt+0x1ce00>
   2ea08:	cmp	r8, #0
   2ea0c:	mov	r4, #1
   2ea10:	sbcs	r3, r9, #0
   2ea14:	blt	2ee40 <__assert_fail@plt+0x1d29c>
   2ea18:	mvn	r8, #0
   2ea1c:	mvn	r9, #-2147483648	; 0x80000000
   2ea20:	b	2e9a4 <__assert_fail@plt+0x1ce00>
   2ea24:	str	r3, [sp, #4]
   2ea28:	asr	r1, fp, #31
   2ea2c:	mov	r0, fp
   2ea30:	mov	r3, #0
   2ea34:	mov	ip, #7
   2ea38:	mov	lr, r3
   2ea3c:	strd	r0, [sp, #8]
   2ea40:	str	r4, [sp, #16]
   2ea44:	str	r5, [sp, #24]
   2ea48:	b	2ea5c <__assert_fail@plt+0x1ceb8>
   2ea4c:	mov	r8, fp
   2ea50:	mov	r9, r2
   2ea54:	subs	ip, ip, #1
   2ea58:	beq	2ee20 <__assert_fail@plt+0x1d27c>
   2ea5c:	cmp	r9, r8, asr #31
   2ea60:	mov	r1, #0
   2ea64:	bne	2ef54 <__assert_fail@plt+0x1d3b0>
   2ea68:	smull	r2, r3, r8, r0
   2ea6c:	mov	fp, r2
   2ea70:	mov	r2, r3
   2ea74:	cmp	r1, #0
   2ea78:	beq	2ea4c <__assert_fail@plt+0x1cea8>
   2ea7c:	cmp	r8, #0
   2ea80:	mov	lr, #1
   2ea84:	sbcs	r3, r9, #0
   2ea88:	mvnge	r8, #0
   2ea8c:	mvnge	r9, #-2147483648	; 0x80000000
   2ea90:	movlt	r8, #0
   2ea94:	movlt	r9, #-2147483648	; 0x80000000
   2ea98:	b	2ea54 <__assert_fail@plt+0x1ceb0>
   2ea9c:	str	r3, [sp, #4]
   2eaa0:	asr	r3, fp, #31
   2eaa4:	mov	r2, fp
   2eaa8:	mov	r1, #0
   2eaac:	cmp	r9, r8, asr #31
   2eab0:	strd	r2, [sp, #8]
   2eab4:	bne	2f0a0 <__assert_fail@plt+0x1d4fc>
   2eab8:	smull	r2, r3, r8, fp
   2eabc:	mov	lr, r2
   2eac0:	subs	ip, r1, #0
   2eac4:	bne	2ea08 <__assert_fail@plt+0x1ce64>
   2eac8:	cmp	r3, lr, asr #31
   2eacc:	mov	r0, lr
   2ead0:	mov	r1, r3
   2ead4:	bne	2f134 <__assert_fail@plt+0x1d590>
   2ead8:	smull	r2, r3, lr, fp
   2eadc:	mov	sl, r2
   2eae0:	mov	r2, r3
   2eae4:	cmp	ip, #0
   2eae8:	bne	2ee30 <__assert_fail@plt+0x1d28c>
   2eaec:	mov	r8, sl
   2eaf0:	mov	r9, r2
   2eaf4:	b	2e9a4 <__assert_fail@plt+0x1ce00>
   2eaf8:	str	r3, [sp, #4]
   2eafc:	asr	r3, fp, #31
   2eb00:	mov	r2, fp
   2eb04:	mov	ip, #0
   2eb08:	cmp	r9, r8, asr #31
   2eb0c:	strd	r2, [sp, #8]
   2eb10:	bne	2eec8 <__assert_fail@plt+0x1d324>
   2eb14:	smull	r2, r3, r8, fp
   2eb18:	mov	r1, r2
   2eb1c:	mov	r2, r3
   2eb20:	cmp	ip, #0
   2eb24:	bne	2ea08 <__assert_fail@plt+0x1ce64>
   2eb28:	mov	r8, r1
   2eb2c:	mov	r9, r2
   2eb30:	b	2e9a4 <__assert_fail@plt+0x1ce00>
   2eb34:	str	r3, [sp, #4]
   2eb38:	asr	r1, fp, #31
   2eb3c:	mov	r0, fp
   2eb40:	mov	r3, #0
   2eb44:	mov	ip, #3
   2eb48:	mov	lr, r3
   2eb4c:	strd	r0, [sp, #8]
   2eb50:	str	r4, [sp, #16]
   2eb54:	str	r5, [sp, #24]
   2eb58:	b	2eb6c <__assert_fail@plt+0x1cfc8>
   2eb5c:	mov	r8, fp
   2eb60:	mov	r9, r2
   2eb64:	subs	ip, ip, #1
   2eb68:	beq	2ee20 <__assert_fail@plt+0x1d27c>
   2eb6c:	cmp	r9, r8, asr #31
   2eb70:	mov	r1, #0
   2eb74:	bne	2ee90 <__assert_fail@plt+0x1d2ec>
   2eb78:	smull	r2, r3, r8, r0
   2eb7c:	mov	fp, r2
   2eb80:	mov	r2, r3
   2eb84:	cmp	r1, #0
   2eb88:	beq	2eb5c <__assert_fail@plt+0x1cfb8>
   2eb8c:	cmp	r8, #0
   2eb90:	mov	lr, #1
   2eb94:	sbcs	r3, r9, #0
   2eb98:	mvnge	r8, #0
   2eb9c:	mvnge	r9, #-2147483648	; 0x80000000
   2eba0:	movlt	r8, #0
   2eba4:	movlt	r9, #-2147483648	; 0x80000000
   2eba8:	b	2eb64 <__assert_fail@plt+0x1cfc0>
   2ebac:	str	r3, [sp, #4]
   2ebb0:	asr	r1, fp, #31
   2ebb4:	mov	r0, fp
   2ebb8:	mov	r3, #0
   2ebbc:	mov	ip, #6
   2ebc0:	mov	lr, r3
   2ebc4:	strd	r0, [sp, #8]
   2ebc8:	str	r4, [sp, #16]
   2ebcc:	str	r5, [sp, #24]
   2ebd0:	b	2ebe4 <__assert_fail@plt+0x1d040>
   2ebd4:	mov	r8, fp
   2ebd8:	mov	r9, r2
   2ebdc:	subs	ip, ip, #1
   2ebe0:	beq	2ee20 <__assert_fail@plt+0x1d27c>
   2ebe4:	cmp	r9, r8, asr #31
   2ebe8:	mov	r1, #0
   2ebec:	bne	2efc4 <__assert_fail@plt+0x1d420>
   2ebf0:	smull	r2, r3, r8, r0
   2ebf4:	mov	fp, r2
   2ebf8:	mov	r2, r3
   2ebfc:	cmp	r1, #0
   2ec00:	beq	2ebd4 <__assert_fail@plt+0x1d030>
   2ec04:	cmp	r8, #0
   2ec08:	mov	lr, #1
   2ec0c:	sbcs	r3, r9, #0
   2ec10:	mvnge	r8, #0
   2ec14:	mvnge	r9, #-2147483648	; 0x80000000
   2ec18:	movlt	r8, #0
   2ec1c:	movlt	r9, #-2147483648	; 0x80000000
   2ec20:	b	2ebdc <__assert_fail@plt+0x1d038>
   2ec24:	str	r3, [sp, #4]
   2ec28:	asr	r1, fp, #31
   2ec2c:	mov	r0, fp
   2ec30:	mov	r3, #0
   2ec34:	mov	ip, #4
   2ec38:	mov	lr, r3
   2ec3c:	strd	r0, [sp, #8]
   2ec40:	str	r4, [sp, #16]
   2ec44:	str	r5, [sp, #24]
   2ec48:	b	2ec5c <__assert_fail@plt+0x1d0b8>
   2ec4c:	mov	r8, fp
   2ec50:	mov	r9, r2
   2ec54:	subs	ip, ip, #1
   2ec58:	beq	2ee20 <__assert_fail@plt+0x1d27c>
   2ec5c:	cmp	r9, r8, asr #31
   2ec60:	mov	r1, #0
   2ec64:	bne	2ef8c <__assert_fail@plt+0x1d3e8>
   2ec68:	smull	r2, r3, r8, r0
   2ec6c:	mov	fp, r2
   2ec70:	mov	r2, r3
   2ec74:	cmp	r1, #0
   2ec78:	beq	2ec4c <__assert_fail@plt+0x1d0a8>
   2ec7c:	cmp	r8, #0
   2ec80:	mov	lr, #1
   2ec84:	sbcs	r3, r9, #0
   2ec88:	mvnge	r8, #0
   2ec8c:	mvnge	r9, #-2147483648	; 0x80000000
   2ec90:	movlt	r8, #0
   2ec94:	movlt	r9, #-2147483648	; 0x80000000
   2ec98:	b	2ec54 <__assert_fail@plt+0x1d0b0>
   2ec9c:	str	r3, [sp, #4]
   2eca0:	asr	r1, fp, #31
   2eca4:	mov	r0, fp
   2eca8:	mov	r3, #0
   2ecac:	mov	ip, #5
   2ecb0:	mov	lr, r3
   2ecb4:	strd	r0, [sp, #8]
   2ecb8:	str	r4, [sp, #16]
   2ecbc:	str	r5, [sp, #24]
   2ecc0:	b	2ecd4 <__assert_fail@plt+0x1d130>
   2ecc4:	mov	r8, fp
   2ecc8:	mov	r9, r2
   2eccc:	subs	ip, ip, #1
   2ecd0:	beq	2ee20 <__assert_fail@plt+0x1d27c>
   2ecd4:	cmp	r9, r8, asr #31
   2ecd8:	mov	r1, #0
   2ecdc:	bne	2ef1c <__assert_fail@plt+0x1d378>
   2ece0:	smull	r2, r3, r8, r0
   2ece4:	mov	fp, r2
   2ece8:	mov	r2, r3
   2ecec:	cmp	r1, #0
   2ecf0:	beq	2ecc4 <__assert_fail@plt+0x1d120>
   2ecf4:	cmp	r8, #0
   2ecf8:	mov	lr, #1
   2ecfc:	sbcs	r3, r9, #0
   2ed00:	mvnge	r8, #0
   2ed04:	mvnge	r9, #-2147483648	; 0x80000000
   2ed08:	movlt	r8, #0
   2ed0c:	movlt	r9, #-2147483648	; 0x80000000
   2ed10:	b	2eccc <__assert_fail@plt+0x1d128>
   2ed14:	str	r3, [sp, #4]
   2ed18:	asr	r1, fp, #31
   2ed1c:	mov	r0, fp
   2ed20:	mov	r3, #0
   2ed24:	mov	ip, #8
   2ed28:	mov	lr, r3
   2ed2c:	strd	r0, [sp, #8]
   2ed30:	str	r4, [sp, #16]
   2ed34:	str	r5, [sp, #24]
   2ed38:	b	2ed4c <__assert_fail@plt+0x1d1a8>
   2ed3c:	mov	r8, fp
   2ed40:	mov	r9, r2
   2ed44:	subs	ip, ip, #1
   2ed48:	beq	2ee20 <__assert_fail@plt+0x1d27c>
   2ed4c:	cmp	r9, r8, asr #31
   2ed50:	mov	r1, #0
   2ed54:	bne	2ee58 <__assert_fail@plt+0x1d2b4>
   2ed58:	smull	r2, r3, r8, r0
   2ed5c:	mov	fp, r2
   2ed60:	mov	r2, r3
   2ed64:	cmp	r1, #0
   2ed68:	beq	2ed3c <__assert_fail@plt+0x1d198>
   2ed6c:	cmp	r8, #0
   2ed70:	mov	lr, #1
   2ed74:	sbcs	r3, r9, #0
   2ed78:	mvnge	r8, #0
   2ed7c:	mvnge	r9, #-2147483648	; 0x80000000
   2ed80:	movlt	r8, #0
   2ed84:	movlt	r9, #-2147483648	; 0x80000000
   2ed88:	b	2ed44 <__assert_fail@plt+0x1d1a0>
   2ed8c:	str	r3, [sp, #4]
   2ed90:	b	2e9a4 <__assert_fail@plt+0x1ce00>
   2ed94:	mov	r3, #1
   2ed98:	mov	fp, #1024	; 0x400
   2ed9c:	str	r3, [sp, #4]
   2eda0:	b	2eb38 <__assert_fail@plt+0x1cf94>
   2eda4:	mov	r3, #1
   2eda8:	mov	fp, #1024	; 0x400
   2edac:	str	r3, [sp, #4]
   2edb0:	b	2ebb0 <__assert_fail@plt+0x1d00c>
   2edb4:	mov	r3, #1
   2edb8:	str	r3, [sp, #4]
   2edbc:	b	2e9a4 <__assert_fail@plt+0x1ce00>
   2edc0:	mov	r3, #1
   2edc4:	mov	fp, #1024	; 0x400
   2edc8:	str	r3, [sp, #4]
   2edcc:	b	2ec28 <__assert_fail@plt+0x1d084>
   2edd0:	mov	r3, #1
   2edd4:	mov	fp, #1024	; 0x400
   2edd8:	str	r3, [sp, #4]
   2eddc:	b	2eca0 <__assert_fail@plt+0x1d0fc>
   2ede0:	mov	r3, #1
   2ede4:	mov	fp, #1024	; 0x400
   2ede8:	str	r3, [sp, #4]
   2edec:	b	2ea28 <__assert_fail@plt+0x1ce84>
   2edf0:	mov	r3, #1
   2edf4:	mov	fp, #1024	; 0x400
   2edf8:	str	r3, [sp, #4]
   2edfc:	b	2ed18 <__assert_fail@plt+0x1d174>
   2ee00:	mov	r3, #1
   2ee04:	mov	fp, #1024	; 0x400
   2ee08:	str	r3, [sp, #4]
   2ee0c:	b	2eaa0 <__assert_fail@plt+0x1cefc>
   2ee10:	mov	r3, #1
   2ee14:	mov	fp, #1024	; 0x400
   2ee18:	str	r3, [sp, #4]
   2ee1c:	b	2eafc <__assert_fail@plt+0x1cf58>
   2ee20:	ldr	r4, [sp, #16]
   2ee24:	ldr	r5, [sp, #24]
   2ee28:	orr	r4, r4, lr
   2ee2c:	b	2e9a4 <__assert_fail@plt+0x1ce00>
   2ee30:	cmp	r0, #0
   2ee34:	mov	r4, #1
   2ee38:	sbcs	r3, r1, #0
   2ee3c:	bge	2ea18 <__assert_fail@plt+0x1ce74>
   2ee40:	mov	r8, #0
   2ee44:	mov	r9, #-2147483648	; 0x80000000
   2ee48:	b	2e9a4 <__assert_fail@plt+0x1ce00>
   2ee4c:	mov	r3, #2
   2ee50:	mov	fp, #1000	; 0x3e8
   2ee54:	b	2e88c <__assert_fail@plt+0x1cce8>
   2ee58:	cmp	r9, #0
   2ee5c:	umull	r4, r5, r8, r0
   2ee60:	umull	sl, fp, r0, r9
   2ee64:	bge	2ee74 <__assert_fail@plt+0x1d2d0>
   2ee68:	mov	r3, #0
   2ee6c:	subs	sl, sl, r3
   2ee70:	sbc	fp, fp, r0
   2ee74:	adds	r2, sl, r5
   2ee78:	mov	r3, #0
   2ee7c:	adc	r3, fp, r3
   2ee80:	cmp	r3, r2, asr #31
   2ee84:	bne	2f214 <__assert_fail@plt+0x1d670>
   2ee88:	mov	fp, r4
   2ee8c:	b	2ed64 <__assert_fail@plt+0x1d1c0>
   2ee90:	cmp	r9, #0
   2ee94:	umull	r4, r5, r8, r0
   2ee98:	umull	sl, fp, r0, r9
   2ee9c:	bge	2eeac <__assert_fail@plt+0x1d308>
   2eea0:	mov	r3, #0
   2eea4:	subs	sl, sl, r3
   2eea8:	sbc	fp, fp, r0
   2eeac:	adds	r2, sl, r5
   2eeb0:	mov	r3, #0
   2eeb4:	adc	r3, fp, r3
   2eeb8:	cmp	r3, r2, asr #31
   2eebc:	bne	2f234 <__assert_fail@plt+0x1d690>
   2eec0:	mov	fp, r4
   2eec4:	b	2eb84 <__assert_fail@plt+0x1cfe0>
   2eec8:	umull	r0, r1, fp, r9
   2eecc:	cmp	r9, #0
   2eed0:	umull	r2, r3, r8, fp
   2eed4:	strd	r0, [sp, #16]
   2eed8:	bge	2eef0 <__assert_fail@plt+0x1d34c>
   2eedc:	subs	r1, r0, ip
   2eee0:	str	r1, [sp, #16]
   2eee4:	ldr	r1, [sp, #20]
   2eee8:	sbc	r1, r1, fp
   2eeec:	str	r1, [sp, #20]
   2eef0:	mov	r1, r3
   2eef4:	ldr	r3, [sp, #16]
   2eef8:	mov	r0, r2
   2eefc:	mov	lr, #0
   2ef00:	adds	r2, r3, r1
   2ef04:	ldr	r3, [sp, #20]
   2ef08:	adc	lr, r3, lr
   2ef0c:	cmp	lr, r2, asr #31
   2ef10:	bne	2f294 <__assert_fail@plt+0x1d6f0>
   2ef14:	mov	r1, r0
   2ef18:	b	2eb20 <__assert_fail@plt+0x1cf7c>
   2ef1c:	cmp	r9, #0
   2ef20:	umull	r4, r5, r8, r0
   2ef24:	umull	sl, fp, r0, r9
   2ef28:	bge	2ef38 <__assert_fail@plt+0x1d394>
   2ef2c:	mov	r3, #0
   2ef30:	subs	sl, sl, r3
   2ef34:	sbc	fp, fp, r0
   2ef38:	adds	r2, sl, r5
   2ef3c:	mov	r3, #0
   2ef40:	adc	r3, fp, r3
   2ef44:	cmp	r3, r2, asr #31
   2ef48:	bne	2f1d4 <__assert_fail@plt+0x1d630>
   2ef4c:	mov	fp, r4
   2ef50:	b	2ecec <__assert_fail@plt+0x1d148>
   2ef54:	cmp	r9, #0
   2ef58:	umull	r4, r5, r8, r0
   2ef5c:	umull	sl, fp, r0, r9
   2ef60:	bge	2ef70 <__assert_fail@plt+0x1d3cc>
   2ef64:	mov	r3, #0
   2ef68:	subs	sl, sl, r3
   2ef6c:	sbc	fp, fp, r0
   2ef70:	adds	r2, sl, r5
   2ef74:	mov	r3, #0
   2ef78:	adc	r3, fp, r3
   2ef7c:	cmp	r3, r2, asr #31
   2ef80:	bne	2f254 <__assert_fail@plt+0x1d6b0>
   2ef84:	mov	fp, r4
   2ef88:	b	2ea74 <__assert_fail@plt+0x1ced0>
   2ef8c:	cmp	r9, #0
   2ef90:	umull	r4, r5, r8, r0
   2ef94:	umull	sl, fp, r0, r9
   2ef98:	bge	2efa8 <__assert_fail@plt+0x1d404>
   2ef9c:	mov	r3, #0
   2efa0:	subs	sl, sl, r3
   2efa4:	sbc	fp, fp, r0
   2efa8:	adds	r2, sl, r5
   2efac:	mov	r3, #0
   2efb0:	adc	r3, fp, r3
   2efb4:	cmp	r3, r2, asr #31
   2efb8:	bne	2f274 <__assert_fail@plt+0x1d6d0>
   2efbc:	mov	fp, r4
   2efc0:	b	2ec74 <__assert_fail@plt+0x1d0d0>
   2efc4:	cmp	r9, #0
   2efc8:	umull	r4, r5, r8, r0
   2efcc:	umull	sl, fp, r0, r9
   2efd0:	bge	2efe0 <__assert_fail@plt+0x1d43c>
   2efd4:	mov	r3, #0
   2efd8:	subs	sl, sl, r3
   2efdc:	sbc	fp, fp, r0
   2efe0:	adds	r2, sl, r5
   2efe4:	mov	r3, #0
   2efe8:	adc	r3, fp, r3
   2efec:	cmp	r3, r2, asr #31
   2eff0:	bne	2f1f4 <__assert_fail@plt+0x1d650>
   2eff4:	mov	fp, r4
   2eff8:	b	2ebfc <__assert_fail@plt+0x1d058>
   2effc:	ldrb	r3, [r6, #2]
   2f000:	mov	fp, #1024	; 0x400
   2f004:	cmp	r3, #66	; 0x42
   2f008:	movne	r3, #1
   2f00c:	moveq	r3, #3
   2f010:	b	2e88c <__assert_fail@plt+0x1cce8>
   2f014:	mov	lr, #512	; 0x200
   2f018:	cmp	r9, #0
   2f01c:	lsr	r3, r8, #23
   2f020:	lsl	r2, r8, #9
   2f024:	umull	r0, r1, lr, r9
   2f028:	bge	2f034 <__assert_fail@plt+0x1d490>
   2f02c:	subs	r0, r0, ip
   2f030:	sbc	r1, r1, lr
   2f034:	adds	r3, r0, r3
   2f038:	mov	lr, #0
   2f03c:	adc	r1, r1, lr
   2f040:	cmp	r1, r3, asr #31
   2f044:	beq	2e994 <__assert_fail@plt+0x1cdf0>
   2f048:	lsl	r3, r9, #9
   2f04c:	mov	ip, #1
   2f050:	lsl	r2, r8, #9
   2f054:	orr	r3, r3, r8, lsr #23
   2f058:	b	2e994 <__assert_fail@plt+0x1cdf0>
   2f05c:	mov	lr, #1024	; 0x400
   2f060:	cmp	r9, #0
   2f064:	lsr	r3, r8, #22
   2f068:	lsl	r2, r8, #10
   2f06c:	umull	r0, r1, lr, r9
   2f070:	bge	2f07c <__assert_fail@plt+0x1d4d8>
   2f074:	subs	r0, r0, ip
   2f078:	sbc	r1, r1, lr
   2f07c:	adds	r3, r0, r3
   2f080:	mov	lr, #0
   2f084:	adc	r1, r1, lr
   2f088:	cmp	r1, r3, asr #31
   2f08c:	lslne	r3, r9, #10
   2f090:	movne	ip, #1
   2f094:	lslne	r2, r8, #10
   2f098:	orrne	r3, r3, r8, lsr #22
   2f09c:	b	2e994 <__assert_fail@plt+0x1cdf0>
   2f0a0:	umull	r2, r3, r8, fp
   2f0a4:	cmp	r9, #0
   2f0a8:	strd	r2, [sp, #16]
   2f0ac:	umull	r2, r3, fp, r9
   2f0b0:	bge	2f0bc <__assert_fail@plt+0x1d518>
   2f0b4:	subs	r2, r2, r1
   2f0b8:	sbc	r3, r3, fp
   2f0bc:	ldr	r0, [sp, #20]
   2f0c0:	mov	ip, #0
   2f0c4:	adds	r0, r2, r0
   2f0c8:	adc	ip, r3, ip
   2f0cc:	cmp	ip, r0, asr #31
   2f0d0:	bne	2f2b4 <__assert_fail@plt+0x1d710>
   2f0d4:	mov	r3, r0
   2f0d8:	ldr	lr, [sp, #16]
   2f0dc:	b	2eac0 <__assert_fail@plt+0x1cf1c>
   2f0e0:	mov	lr, #2
   2f0e4:	mov	r3, #0
   2f0e8:	adds	ip, r8, r8
   2f0ec:	adc	r0, r3, r3
   2f0f0:	umull	r2, r3, lr, r9
   2f0f4:	cmp	r9, #0
   2f0f8:	strd	r2, [sp, #8]
   2f0fc:	bge	2f114 <__assert_fail@plt+0x1d570>
   2f100:	subs	r3, r2, r1
   2f104:	str	r3, [sp, #8]
   2f108:	ldr	r3, [sp, #12]
   2f10c:	sbc	r3, r3, lr
   2f110:	str	r3, [sp, #12]
   2f114:	ldrd	sl, [sp, #8]
   2f118:	mov	lr, #0
   2f11c:	adds	r2, sl, r0
   2f120:	adc	r3, fp, lr
   2f124:	cmp	r3, r2, asr #31
   2f128:	bne	2f1c4 <__assert_fail@plt+0x1d620>
   2f12c:	mov	r3, r2
   2f130:	b	2e9f8 <__assert_fail@plt+0x1ce54>
   2f134:	cmp	r3, #0
   2f138:	umull	r8, r9, lr, fp
   2f13c:	umull	r2, r3, fp, r3
   2f140:	strd	r2, [sp, #16]
   2f144:	strd	r8, [sp, #24]
   2f148:	bge	2f160 <__assert_fail@plt+0x1d5bc>
   2f14c:	subs	r3, r2, ip
   2f150:	str	r3, [sp, #16]
   2f154:	ldr	r3, [sp, #20]
   2f158:	sbc	r3, r3, fp
   2f15c:	str	r3, [sp, #20]
   2f160:	ldr	r3, [sp, #16]
   2f164:	mov	lr, #0
   2f168:	ldrd	sl, [sp, #24]
   2f16c:	adds	r2, r3, fp
   2f170:	ldr	r3, [sp, #20]
   2f174:	adc	lr, r3, lr
   2f178:	cmp	lr, r2, asr #31
   2f17c:	beq	2eae4 <__assert_fail@plt+0x1cf40>
   2f180:	ldrd	r8, [sp, #8]
   2f184:	mov	ip, #1
   2f188:	mul	lr, r0, r9
   2f18c:	umull	r2, r3, r0, r8
   2f190:	mla	lr, r8, r1, lr
   2f194:	mov	sl, r2
   2f198:	add	r3, lr, r3
   2f19c:	mov	r2, r3
   2f1a0:	b	2eae4 <__assert_fail@plt+0x1cf40>
   2f1a4:	movw	r3, #14036	; 0x36d4
   2f1a8:	movt	r3, #3
   2f1ac:	movw	r1, #14048	; 0x36e0
   2f1b0:	movt	r1, #3
   2f1b4:	movw	r0, #14064	; 0x36f0
   2f1b8:	movt	r0, #3
   2f1bc:	mov	r2, #85	; 0x55
   2f1c0:	bl	11ba4 <__assert_fail@plt>
   2f1c4:	adds	ip, r8, r8
   2f1c8:	mov	r1, #1
   2f1cc:	adc	r3, r9, r9
   2f1d0:	b	2e9f8 <__assert_fail@plt+0x1ce54>
   2f1d4:	ldrd	r4, [sp, #8]
   2f1d8:	mov	r1, #1
   2f1dc:	mul	sl, r8, r5
   2f1e0:	umull	r2, r3, r8, r4
   2f1e4:	mla	sl, r4, r9, sl
   2f1e8:	mov	fp, r2
   2f1ec:	add	r2, sl, r3
   2f1f0:	b	2ecec <__assert_fail@plt+0x1d148>
   2f1f4:	ldrd	r4, [sp, #8]
   2f1f8:	mov	r1, #1
   2f1fc:	mul	sl, r8, r5
   2f200:	umull	r2, r3, r8, r4
   2f204:	mla	sl, r4, r9, sl
   2f208:	mov	fp, r2
   2f20c:	add	r2, sl, r3
   2f210:	b	2ebfc <__assert_fail@plt+0x1d058>
   2f214:	ldrd	r4, [sp, #8]
   2f218:	mov	r1, #1
   2f21c:	mul	sl, r8, r5
   2f220:	umull	r2, r3, r8, r4
   2f224:	mla	sl, r4, r9, sl
   2f228:	mov	fp, r2
   2f22c:	add	r2, sl, r3
   2f230:	b	2ed64 <__assert_fail@plt+0x1d1c0>
   2f234:	ldrd	r4, [sp, #8]
   2f238:	mov	r1, #1
   2f23c:	mul	sl, r8, r5
   2f240:	umull	r2, r3, r8, r4
   2f244:	mla	sl, r4, r9, sl
   2f248:	mov	fp, r2
   2f24c:	add	r2, sl, r3
   2f250:	b	2eb84 <__assert_fail@plt+0x1cfe0>
   2f254:	ldrd	r4, [sp, #8]
   2f258:	mov	r1, #1
   2f25c:	mul	sl, r8, r5
   2f260:	umull	r2, r3, r8, r4
   2f264:	mla	sl, r4, r9, sl
   2f268:	mov	fp, r2
   2f26c:	add	r2, sl, r3
   2f270:	b	2ea74 <__assert_fail@plt+0x1ced0>
   2f274:	ldrd	r4, [sp, #8]
   2f278:	mov	r1, #1
   2f27c:	mul	sl, r8, r5
   2f280:	umull	r2, r3, r8, r4
   2f284:	mla	sl, r4, r9, sl
   2f288:	mov	fp, r2
   2f28c:	add	r2, sl, r3
   2f290:	b	2ec74 <__assert_fail@plt+0x1d0d0>
   2f294:	ldrd	sl, [sp, #8]
   2f298:	mov	ip, #1
   2f29c:	mul	r1, r8, fp
   2f2a0:	umull	r2, r3, r8, sl
   2f2a4:	mla	r0, sl, r9, r1
   2f2a8:	mov	r1, r2
   2f2ac:	add	r2, r0, r3
   2f2b0:	b	2eb20 <__assert_fail@plt+0x1cf7c>
   2f2b4:	ldrd	r2, [sp, #8]
   2f2b8:	mov	r1, #1
   2f2bc:	ldr	ip, [sp, #8]
   2f2c0:	mul	r0, r8, r3
   2f2c4:	umull	r2, r3, r8, r2
   2f2c8:	mla	r0, ip, r9, r0
   2f2cc:	mov	lr, r2
   2f2d0:	add	r3, r0, r3
   2f2d4:	b	2eac0 <__assert_fail@plt+0x1cf1c>
   2f2d8:	sub	r0, r0, #1
   2f2dc:	movw	ip, #16856	; 0x41d8
   2f2e0:	movt	ip, #4
   2f2e4:	cmp	r0, #3
   2f2e8:	push	{lr}		; (str lr, [sp, #-4]!)
   2f2ec:	sub	sp, sp, #20
   2f2f0:	ldr	r5, [ip]
   2f2f4:	bhi	2f344 <__assert_fail@plt+0x1d7a0>
   2f2f8:	movw	ip, #14104	; 0x3718
   2f2fc:	movt	ip, #3
   2f300:	cmp	r1, #0
   2f304:	ldr	r0, [ip, r0, lsl #2]
   2f308:	blt	2f348 <__assert_fail@plt+0x1d7a4>
   2f30c:	ldr	r6, [r3, r1, lsl #4]
   2f310:	movw	r4, #14120	; 0x3728
   2f314:	movt	r4, #3
   2f318:	mov	r1, r0
   2f31c:	mov	r2, #5
   2f320:	mov	r0, #0
   2f324:	bl	117d8 <dcgettext@plt>
   2f328:	ldr	ip, [sp, #24]
   2f32c:	mov	r2, r0
   2f330:	mov	r3, r4
   2f334:	mov	r0, r5
   2f338:	mov	r1, #0
   2f33c:	stm	sp, {r6, ip}
   2f340:	bl	118bc <error@plt>
   2f344:	bl	11b68 <abort@plt>
   2f348:	mov	r3, #0
   2f34c:	movw	r4, #14120	; 0x3728
   2f350:	movt	r4, #3
   2f354:	add	r6, sp, #12
   2f358:	strb	r2, [sp, #12]
   2f35c:	sub	r4, r4, r1
   2f360:	strb	r3, [sp, #13]
   2f364:	b	2f318 <__assert_fail@plt+0x1d774>
   2f368:	cmp	r2, #36	; 0x24
   2f36c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2f370:	strd	r6, [sp, #8]
   2f374:	strd	r8, [sp, #16]
   2f378:	strd	sl, [sp, #24]
   2f37c:	str	lr, [sp, #32]
   2f380:	sub	sp, sp, #36	; 0x24
   2f384:	bhi	2fc14 <__assert_fail@plt+0x1e070>
   2f388:	cmp	r1, #0
   2f38c:	mov	r8, r2
   2f390:	mov	r6, r0
   2f394:	mov	r5, r1
   2f398:	mov	sl, r3
   2f39c:	addeq	r5, sp, #28
   2f3a0:	bl	119b8 <__errno_location@plt>
   2f3a4:	mov	r3, #0
   2f3a8:	mov	r7, r0
   2f3ac:	str	r3, [r0]
   2f3b0:	bl	11964 <__ctype_b_loc@plt>
   2f3b4:	ldrb	r3, [r6]
   2f3b8:	mov	r2, r6
   2f3bc:	ldr	r0, [r0]
   2f3c0:	b	2f3c8 <__assert_fail@plt+0x1d824>
   2f3c4:	ldrb	r3, [r2, #1]!
   2f3c8:	lsl	r1, r3, #1
   2f3cc:	ldrh	r4, [r0, r1]
   2f3d0:	ands	r4, r4, #8192	; 0x2000
   2f3d4:	bne	2f3c4 <__assert_fail@plt+0x1d820>
   2f3d8:	cmp	r3, #45	; 0x2d
   2f3dc:	beq	2f47c <__assert_fail@plt+0x1d8d8>
   2f3e0:	mov	r2, r8
   2f3e4:	mov	r3, r4
   2f3e8:	mov	r1, r5
   2f3ec:	mov	r0, r6
   2f3f0:	bl	1179c <__strtoull_internal@plt>
   2f3f4:	ldr	fp, [r5]
   2f3f8:	mov	r9, r0
   2f3fc:	mov	r8, r1
   2f400:	cmp	fp, r6
   2f404:	beq	2f464 <__assert_fail@plt+0x1d8c0>
   2f408:	ldr	r4, [r7]
   2f40c:	cmp	r4, #0
   2f410:	bne	2f454 <__assert_fail@plt+0x1d8b0>
   2f414:	ldr	r3, [sp, #72]	; 0x48
   2f418:	cmp	r3, #0
   2f41c:	beq	2f42c <__assert_fail@plt+0x1d888>
   2f420:	ldrb	r6, [fp]
   2f424:	cmp	r6, #0
   2f428:	bne	2f76c <__assert_fail@plt+0x1dbc8>
   2f42c:	str	r9, [sl]
   2f430:	str	r8, [sl, #4]
   2f434:	mov	r0, r4
   2f438:	add	sp, sp, #36	; 0x24
   2f43c:	ldrd	r4, [sp]
   2f440:	ldrd	r6, [sp, #8]
   2f444:	ldrd	r8, [sp, #16]
   2f448:	ldrd	sl, [sp, #24]
   2f44c:	add	sp, sp, #32
   2f450:	pop	{pc}		; (ldr pc, [sp], #4)
   2f454:	cmp	r4, #34	; 0x22
   2f458:	bne	2f47c <__assert_fail@plt+0x1d8d8>
   2f45c:	mov	r4, #1
   2f460:	b	2f414 <__assert_fail@plt+0x1d870>
   2f464:	ldr	r3, [sp, #72]	; 0x48
   2f468:	cmp	r3, #0
   2f46c:	beq	2f47c <__assert_fail@plt+0x1d8d8>
   2f470:	ldrb	r6, [r6]
   2f474:	cmp	r6, #0
   2f478:	bne	2f484 <__assert_fail@plt+0x1d8e0>
   2f47c:	mov	r4, #4
   2f480:	b	2f434 <__assert_fail@plt+0x1d890>
   2f484:	mov	r1, r6
   2f488:	mov	r0, r3
   2f48c:	bl	11994 <strchr@plt>
   2f490:	cmp	r0, #0
   2f494:	movne	r9, #1
   2f498:	movne	r8, #0
   2f49c:	beq	2f47c <__assert_fail@plt+0x1d8d8>
   2f4a0:	sub	r3, r6, #69	; 0x45
   2f4a4:	cmp	r3, #47	; 0x2f
   2f4a8:	ldrls	pc, [pc, r3, lsl #2]
   2f4ac:	b	2f5b4 <__assert_fail@plt+0x1da10>
   2f4b0:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f4b4:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4b8:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f4bc:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4c0:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4c4:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4c8:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f4cc:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4d0:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f4d4:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4d8:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4dc:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f4e0:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4e4:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4e8:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4ec:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f4f0:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4f4:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4f8:			; <UNDEFINED> instruction: 0x0002f5b4
   2f4fc:			; <UNDEFINED> instruction: 0x0002f5b4
   2f500:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f504:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f508:			; <UNDEFINED> instruction: 0x0002f5b4
   2f50c:			; <UNDEFINED> instruction: 0x0002f5b4
   2f510:			; <UNDEFINED> instruction: 0x0002f5b4
   2f514:			; <UNDEFINED> instruction: 0x0002f5b4
   2f518:			; <UNDEFINED> instruction: 0x0002f5b4
   2f51c:			; <UNDEFINED> instruction: 0x0002f5b4
   2f520:			; <UNDEFINED> instruction: 0x0002f5b4
   2f524:			; <UNDEFINED> instruction: 0x0002f5b4
   2f528:			; <UNDEFINED> instruction: 0x0002f5b4
   2f52c:			; <UNDEFINED> instruction: 0x0002f5b4
   2f530:			; <UNDEFINED> instruction: 0x0002f5b4
   2f534:			; <UNDEFINED> instruction: 0x0002f5b4
   2f538:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f53c:			; <UNDEFINED> instruction: 0x0002f5b4
   2f540:			; <UNDEFINED> instruction: 0x0002f5b4
   2f544:			; <UNDEFINED> instruction: 0x0002f5b4
   2f548:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f54c:			; <UNDEFINED> instruction: 0x0002f5b4
   2f550:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f554:			; <UNDEFINED> instruction: 0x0002f5b4
   2f558:			; <UNDEFINED> instruction: 0x0002f5b4
   2f55c:			; <UNDEFINED> instruction: 0x0002f5b4
   2f560:			; <UNDEFINED> instruction: 0x0002f5b4
   2f564:			; <UNDEFINED> instruction: 0x0002f5b4
   2f568:			; <UNDEFINED> instruction: 0x0002f5b4
   2f56c:	andeq	pc, r2, r0, ror r5	; <UNPREDICTABLE>
   2f570:	mov	r1, #48	; 0x30
   2f574:	ldr	r0, [sp, #72]	; 0x48
   2f578:	bl	11994 <strchr@plt>
   2f57c:	cmp	r0, #0
   2f580:	beq	2f5b4 <__assert_fail@plt+0x1da10>
   2f584:	ldrb	r3, [fp, #1]
   2f588:	cmp	r3, #68	; 0x44
   2f58c:	beq	2fae0 <__assert_fail@plt+0x1df3c>
   2f590:	cmp	r3, #105	; 0x69
   2f594:	beq	2f784 <__assert_fail@plt+0x1dbe0>
   2f598:	cmp	r3, #66	; 0x42
   2f59c:	moveq	r3, #2
   2f5a0:	movne	r3, #1
   2f5a4:	moveq	r7, #1000	; 0x3e8
   2f5a8:	movne	r7, #1024	; 0x400
   2f5ac:	str	r3, [sp, #4]
   2f5b0:	b	2f5c0 <__assert_fail@plt+0x1da1c>
   2f5b4:	mov	r3, #1
   2f5b8:	mov	r7, #1024	; 0x400
   2f5bc:	str	r3, [sp, #4]
   2f5c0:	sub	r6, r6, #66	; 0x42
   2f5c4:	cmp	r6, #53	; 0x35
   2f5c8:	ldrls	pc, [pc, r6, lsl #2]
   2f5cc:	b	2f730 <__assert_fail@plt+0x1db8c>
   2f5d0:	andeq	pc, r2, r8, lsl #21
   2f5d4:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f5d8:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f5dc:	muleq	r2, r4, r8
   2f5e0:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f5e4:	andeq	pc, r2, r8, lsr #13
   2f5e8:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f5ec:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f5f0:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f5f4:	andeq	pc, r2, r8, lsr r7	; <UNPREDICTABLE>
   2f5f8:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f5fc:	andeq	pc, r2, r4, lsr sl	; <UNPREDICTABLE>
   2f600:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f604:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f608:	andeq	pc, r2, r4, lsl #19
   2f60c:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f610:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f614:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f618:	andeq	pc, r2, ip, lsl #18
   2f61c:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f620:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f624:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f628:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f62c:	andeq	pc, r2, ip, lsl r8	; <UNPREDICTABLE>
   2f630:	andeq	pc, r2, r0, lsr #15
   2f634:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f638:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f63c:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f640:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f644:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f648:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f64c:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f650:	andeq	pc, r2, r4, lsl sl	; <UNPREDICTABLE>
   2f654:	andeq	pc, r2, r8, lsl r7	; <UNPREDICTABLE>
   2f658:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f65c:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f660:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f664:	andeq	pc, r2, r8, lsr #13
   2f668:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f66c:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f670:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f674:	andeq	pc, r2, r8, lsr r7	; <UNPREDICTABLE>
   2f678:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f67c:	andeq	pc, r2, r4, lsr sl	; <UNPREDICTABLE>
   2f680:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f684:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f688:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f68c:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f690:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f694:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f698:	andeq	pc, r2, ip, lsl #18
   2f69c:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f6a0:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f6a4:	strdeq	pc, [r2], -ip
   2f6a8:	asr	r3, r7, #31
   2f6ac:	mov	r2, r7
   2f6b0:	cmp	r8, #0
   2f6b4:	umull	r0, r1, r9, r7
   2f6b8:	mov	ip, #0
   2f6bc:	strd	r2, [sp, #8]
   2f6c0:	bne	2fb14 <__assert_fail@plt+0x1df70>
   2f6c4:	mov	r2, r0
   2f6c8:	mov	r3, r1
   2f6cc:	cmp	ip, #0
   2f6d0:	bne	2f75c <__assert_fail@plt+0x1dbb8>
   2f6d4:	cmp	r3, #0
   2f6d8:	mov	lr, ip
   2f6dc:	bne	2fb78 <__assert_fail@plt+0x1dfd4>
   2f6e0:	umull	r2, r3, r2, r7
   2f6e4:	mov	ip, r2
   2f6e8:	mov	r1, r3
   2f6ec:	subs	r0, lr, #0
   2f6f0:	bne	2f75c <__assert_fail@plt+0x1dbb8>
   2f6f4:	cmp	r1, #0
   2f6f8:	bne	2fb58 <__assert_fail@plt+0x1dfb4>
   2f6fc:	umull	r2, r3, ip, r7
   2f700:	mov	r6, r2
   2f704:	mov	r2, r3
   2f708:	cmp	r0, #0
   2f70c:	mov	r9, r6
   2f710:	mov	r8, r2
   2f714:	bne	2f75c <__assert_fail@plt+0x1dbb8>
   2f718:	ldr	r2, [sp, #4]
   2f71c:	add	r3, fp, r2
   2f720:	str	r3, [r5]
   2f724:	ldrb	r3, [fp, r2]
   2f728:	cmp	r3, #0
   2f72c:	beq	2f42c <__assert_fail@plt+0x1d888>
   2f730:	orr	r4, r4, #2
   2f734:	b	2f42c <__assert_fail@plt+0x1d888>
   2f738:	cmp	r8, #0
   2f73c:	umull	r2, r3, r9, r7
   2f740:	mov	ip, #0
   2f744:	asr	r1, r7, #31
   2f748:	bne	2fab0 <__assert_fail@plt+0x1df0c>
   2f74c:	mov	r9, r2
   2f750:	mov	r8, r3
   2f754:	cmp	ip, #0
   2f758:	beq	2f718 <__assert_fail@plt+0x1db74>
   2f75c:	mvn	r9, #0
   2f760:	mov	r4, #1
   2f764:	mov	r8, r9
   2f768:	b	2f718 <__assert_fail@plt+0x1db74>
   2f76c:	mov	r1, r6
   2f770:	ldr	r0, [sp, #72]	; 0x48
   2f774:	bl	11994 <strchr@plt>
   2f778:	cmp	r0, #0
   2f77c:	bne	2f4a0 <__assert_fail@plt+0x1d8fc>
   2f780:	b	2f730 <__assert_fail@plt+0x1db8c>
   2f784:	ldrb	r3, [fp, #2]
   2f788:	mov	r7, #1024	; 0x400
   2f78c:	cmp	r3, #66	; 0x42
   2f790:	movne	r3, #1
   2f794:	moveq	r3, #3
   2f798:	str	r3, [sp, #4]
   2f79c:	b	2f5c0 <__assert_fail@plt+0x1da1c>
   2f7a0:	asr	r3, r7, #31
   2f7a4:	mov	r2, r7
   2f7a8:	mov	ip, #0
   2f7ac:	mov	r0, #7
   2f7b0:	mov	lr, ip
   2f7b4:	mov	r6, r4
   2f7b8:	strd	r2, [sp, #8]
   2f7bc:	str	r5, [sp, #16]
   2f7c0:	b	2f7ec <__assert_fail@plt+0x1dc48>
   2f7c4:	umull	r2, r3, r9, r7
   2f7c8:	mov	r9, r2
   2f7cc:	mov	r8, r3
   2f7d0:	cmp	r1, #0
   2f7d4:	beq	2f7e4 <__assert_fail@plt+0x1dc40>
   2f7d8:	mvn	r9, #0
   2f7dc:	mov	ip, #1
   2f7e0:	mov	r8, r9
   2f7e4:	subs	r0, r0, #1
   2f7e8:	beq	2fad4 <__assert_fail@plt+0x1df30>
   2f7ec:	cmp	r8, #0
   2f7f0:	mov	r1, #0
   2f7f4:	beq	2f7c4 <__assert_fail@plt+0x1dc20>
   2f7f8:	umull	r4, r5, r9, r7
   2f7fc:	mov	r3, lr
   2f800:	mov	r2, r5
   2f804:	umlal	r2, r3, r8, r7
   2f808:	cmp	r3, #0
   2f80c:	bne	2fc34 <__assert_fail@plt+0x1e090>
   2f810:	mov	r9, r4
   2f814:	mov	r8, r2
   2f818:	b	2f7d0 <__assert_fail@plt+0x1dc2c>
   2f81c:	asr	r3, r7, #31
   2f820:	mov	r2, r7
   2f824:	mov	r6, #0
   2f828:	mov	lr, #8
   2f82c:	mov	r0, r4
   2f830:	mov	ip, r5
   2f834:	strd	r2, [sp, #8]
   2f838:	b	2f864 <__assert_fail@plt+0x1dcc0>
   2f83c:	umull	r2, r3, r9, r7
   2f840:	mov	r9, r2
   2f844:	mov	r8, r3
   2f848:	cmp	r1, #0
   2f84c:	beq	2f85c <__assert_fail@plt+0x1dcb8>
   2f850:	mvn	r9, #0
   2f854:	mov	r6, #1
   2f858:	mov	r8, r9
   2f85c:	subs	lr, lr, #1
   2f860:	beq	2faa4 <__assert_fail@plt+0x1df00>
   2f864:	cmp	r8, #0
   2f868:	mov	r1, #0
   2f86c:	beq	2f83c <__assert_fail@plt+0x1dc98>
   2f870:	umull	r4, r5, r9, r7
   2f874:	mov	r3, #0
   2f878:	mov	r2, r5
   2f87c:	umlal	r2, r3, r8, r7
   2f880:	cmp	r3, #0
   2f884:	bne	2fc8c <__assert_fail@plt+0x1e0e8>
   2f888:	mov	r9, r4
   2f88c:	mov	r8, r2
   2f890:	b	2f848 <__assert_fail@plt+0x1dca4>
   2f894:	asr	r3, r7, #31
   2f898:	mov	r2, r7
   2f89c:	mov	r6, #0
   2f8a0:	mov	lr, #6
   2f8a4:	mov	r0, r4
   2f8a8:	mov	ip, r5
   2f8ac:	strd	r2, [sp, #8]
   2f8b0:	b	2f8dc <__assert_fail@plt+0x1dd38>
   2f8b4:	umull	r2, r3, r9, r7
   2f8b8:	mov	r9, r2
   2f8bc:	mov	r8, r3
   2f8c0:	cmp	r1, #0
   2f8c4:	beq	2f8d4 <__assert_fail@plt+0x1dd30>
   2f8c8:	mvn	r9, #0
   2f8cc:	mov	r6, #1
   2f8d0:	mov	r8, r9
   2f8d4:	subs	lr, lr, #1
   2f8d8:	beq	2faa4 <__assert_fail@plt+0x1df00>
   2f8dc:	cmp	r8, #0
   2f8e0:	mov	r1, #0
   2f8e4:	beq	2f8b4 <__assert_fail@plt+0x1dd10>
   2f8e8:	umull	r4, r5, r9, r7
   2f8ec:	mov	r3, #0
   2f8f0:	mov	r2, r5
   2f8f4:	umlal	r2, r3, r8, r7
   2f8f8:	cmp	r3, #0
   2f8fc:	bne	2fc54 <__assert_fail@plt+0x1e0b0>
   2f900:	mov	r9, r4
   2f904:	mov	r8, r2
   2f908:	b	2f8c0 <__assert_fail@plt+0x1dd1c>
   2f90c:	asr	r3, r7, #31
   2f910:	mov	r2, r7
   2f914:	mov	r6, #0
   2f918:	mov	lr, #4
   2f91c:	mov	r0, r4
   2f920:	mov	ip, r5
   2f924:	strd	r2, [sp, #8]
   2f928:	b	2f954 <__assert_fail@plt+0x1ddb0>
   2f92c:	umull	r2, r3, r9, r7
   2f930:	mov	r9, r2
   2f934:	mov	r8, r3
   2f938:	cmp	r1, #0
   2f93c:	beq	2f94c <__assert_fail@plt+0x1dda8>
   2f940:	mvn	r9, #0
   2f944:	mov	r6, #1
   2f948:	mov	r8, r9
   2f94c:	subs	lr, lr, #1
   2f950:	beq	2faa4 <__assert_fail@plt+0x1df00>
   2f954:	cmp	r8, #0
   2f958:	mov	r1, #0
   2f95c:	beq	2f92c <__assert_fail@plt+0x1dd88>
   2f960:	umull	r4, r5, r9, r7
   2f964:	mov	r3, #0
   2f968:	mov	r2, r5
   2f96c:	umlal	r2, r3, r8, r7
   2f970:	cmp	r3, #0
   2f974:	bne	2fc70 <__assert_fail@plt+0x1e0cc>
   2f978:	mov	r9, r4
   2f97c:	mov	r8, r2
   2f980:	b	2f938 <__assert_fail@plt+0x1dd94>
   2f984:	asr	r3, r7, #31
   2f988:	mov	r2, r7
   2f98c:	mov	r6, #0
   2f990:	mov	lr, #5
   2f994:	mov	r0, r4
   2f998:	mov	ip, r5
   2f99c:	strd	r2, [sp, #8]
   2f9a0:	b	2f9cc <__assert_fail@plt+0x1de28>
   2f9a4:	umull	r2, r3, r9, r7
   2f9a8:	mov	r9, r2
   2f9ac:	mov	r8, r3
   2f9b0:	cmp	r1, #0
   2f9b4:	beq	2f9c4 <__assert_fail@plt+0x1de20>
   2f9b8:	mvn	r9, #0
   2f9bc:	mov	r6, #1
   2f9c0:	mov	r8, r9
   2f9c4:	subs	lr, lr, #1
   2f9c8:	beq	2faa4 <__assert_fail@plt+0x1df00>
   2f9cc:	cmp	r8, #0
   2f9d0:	mov	r1, #0
   2f9d4:	beq	2f9a4 <__assert_fail@plt+0x1de00>
   2f9d8:	umull	r4, r5, r9, r7
   2f9dc:	mov	r3, #0
   2f9e0:	mov	r2, r5
   2f9e4:	umlal	r2, r3, r8, r7
   2f9e8:	cmp	r3, #0
   2f9ec:	bne	2fbdc <__assert_fail@plt+0x1e038>
   2f9f0:	mov	r9, r4
   2f9f4:	mov	r8, r2
   2f9f8:	b	2f9b0 <__assert_fail@plt+0x1de0c>
   2f9fc:	lsr	r3, r8, #31
   2fa00:	adds	r9, r9, r9
   2fa04:	adc	r8, r8, r8
   2fa08:	cmp	r3, #0
   2fa0c:	beq	2f718 <__assert_fail@plt+0x1db74>
   2fa10:	b	2f75c <__assert_fail@plt+0x1dbb8>
   2fa14:	lsr	r3, r8, #23
   2fa18:	lsl	r8, r8, #9
   2fa1c:	cmp	r3, #0
   2fa20:	lsl	r3, r9, #9
   2fa24:	orr	r8, r8, r9, lsr #23
   2fa28:	bne	2f75c <__assert_fail@plt+0x1dbb8>
   2fa2c:	mov	r9, r3
   2fa30:	b	2f718 <__assert_fail@plt+0x1db74>
   2fa34:	asr	r3, r7, #31
   2fa38:	mov	r2, r7
   2fa3c:	cmp	r8, #0
   2fa40:	mov	r1, #0
   2fa44:	strd	r2, [sp, #8]
   2fa48:	umull	r2, r3, r9, r7
   2fa4c:	bne	2faf0 <__assert_fail@plt+0x1df4c>
   2fa50:	mov	r0, r2
   2fa54:	mov	ip, r3
   2fa58:	cmp	r1, #0
   2fa5c:	bne	2f75c <__assert_fail@plt+0x1dbb8>
   2fa60:	cmp	ip, #0
   2fa64:	bne	2fb38 <__assert_fail@plt+0x1df94>
   2fa68:	umull	r2, r3, r0, r7
   2fa6c:	mov	r6, r2
   2fa70:	mov	r2, r3
   2fa74:	cmp	r1, #0
   2fa78:	mov	r9, r6
   2fa7c:	mov	r8, r2
   2fa80:	beq	2f718 <__assert_fail@plt+0x1db74>
   2fa84:	b	2f75c <__assert_fail@plt+0x1dbb8>
   2fa88:	lsr	r3, r8, #22
   2fa8c:	lsl	r8, r8, #10
   2fa90:	cmp	r3, #0
   2fa94:	lsl	r3, r9, #10
   2fa98:	orr	r8, r8, r9, lsr #22
   2fa9c:	beq	2fa2c <__assert_fail@plt+0x1de88>
   2faa0:	b	2f75c <__assert_fail@plt+0x1dbb8>
   2faa4:	mov	r5, ip
   2faa8:	orr	r4, r0, r6
   2faac:	b	2f718 <__assert_fail@plt+0x1db74>
   2fab0:	strd	r2, [sp, #8]
   2fab4:	mov	r3, ip
   2fab8:	ldr	r2, [sp, #12]
   2fabc:	umlal	r2, r3, r8, r7
   2fac0:	cmp	r3, #0
   2fac4:	bne	2fbf8 <__assert_fail@plt+0x1e054>
   2fac8:	mov	r8, r2
   2facc:	ldr	r9, [sp, #8]
   2fad0:	b	2f754 <__assert_fail@plt+0x1dbb0>
   2fad4:	orr	r4, r6, ip
   2fad8:	ldr	r5, [sp, #16]
   2fadc:	b	2f718 <__assert_fail@plt+0x1db74>
   2fae0:	mov	r3, #2
   2fae4:	mov	r7, #1000	; 0x3e8
   2fae8:	str	r3, [sp, #4]
   2faec:	b	2f5c0 <__assert_fail@plt+0x1da1c>
   2faf0:	strd	r2, [sp, #16]
   2faf4:	mov	r3, r1
   2faf8:	ldr	r2, [sp, #20]
   2fafc:	umlal	r2, r3, r8, r7
   2fb00:	cmp	r3, #0
   2fb04:	bne	2fcc8 <__assert_fail@plt+0x1e124>
   2fb08:	mov	ip, r2
   2fb0c:	ldr	r0, [sp, #16]
   2fb10:	b	2fa58 <__assert_fail@plt+0x1deb4>
   2fb14:	mov	r2, r1
   2fb18:	mov	r3, ip
   2fb1c:	umlal	r2, r3, r8, r7
   2fb20:	cmp	r3, #0
   2fb24:	strd	r2, [sp, #16]
   2fb28:	bne	2fb9c <__assert_fail@plt+0x1dff8>
   2fb2c:	mov	r2, r0
   2fb30:	ldr	r3, [sp, #16]
   2fb34:	b	2f6cc <__assert_fail@plt+0x1db28>
   2fb38:	umull	r8, r9, r0, r7
   2fb3c:	mov	r3, r1
   2fb40:	mov	r2, r9
   2fb44:	umlal	r2, r3, ip, r7
   2fb48:	cmp	r3, #0
   2fb4c:	bne	2fca8 <__assert_fail@plt+0x1e104>
   2fb50:	mov	r6, r8
   2fb54:	b	2fa74 <__assert_fail@plt+0x1ded0>
   2fb58:	umull	r8, r9, ip, r7
   2fb5c:	mov	r3, r0
   2fb60:	mov	r2, r9
   2fb64:	umlal	r2, r3, r1, r7
   2fb68:	cmp	r3, #0
   2fb6c:	bne	2fcf0 <__assert_fail@plt+0x1e14c>
   2fb70:	mov	r6, r8
   2fb74:	b	2f708 <__assert_fail@plt+0x1db64>
   2fb78:	umull	r8, r9, r2, r7
   2fb7c:	mov	r1, ip
   2fb80:	mov	r0, r9
   2fb84:	umlal	r0, r1, r3, r7
   2fb88:	cmp	r1, #0
   2fb8c:	bne	2fbbc <__assert_fail@plt+0x1e018>
   2fb90:	mov	ip, r8
   2fb94:	mov	r1, r0
   2fb98:	b	2f6ec <__assert_fail@plt+0x1db48>
   2fb9c:	ldr	lr, [sp, #8]
   2fba0:	mov	r2, r0
   2fba4:	mov	ip, #1
   2fba8:	ldr	r3, [sp, #12]
   2fbac:	mul	r3, r9, r3
   2fbb0:	mla	r3, lr, r8, r3
   2fbb4:	add	r3, r3, r1
   2fbb8:	b	2f6cc <__assert_fail@plt+0x1db28>
   2fbbc:	ldr	r1, [sp, #12]
   2fbc0:	mov	lr, #1
   2fbc4:	mov	ip, r8
   2fbc8:	mul	r1, r2, r1
   2fbcc:	ldr	r2, [sp, #8]
   2fbd0:	mla	r1, r3, r2, r1
   2fbd4:	add	r1, r1, r9
   2fbd8:	b	2f6ec <__assert_fail@plt+0x1db48>
   2fbdc:	ldrd	r2, [sp, #8]
   2fbe0:	mov	r1, #1
   2fbe4:	mul	r3, r9, r3
   2fbe8:	mov	r9, r4
   2fbec:	mla	r8, r2, r8, r3
   2fbf0:	add	r8, r8, r5
   2fbf4:	b	2f9b0 <__assert_fail@plt+0x1de0c>
   2fbf8:	mul	r3, r9, r1
   2fbfc:	mov	ip, #1
   2fc00:	mla	r8, r7, r8, r3
   2fc04:	ldrd	r6, [sp, #8]
   2fc08:	mov	r9, r6
   2fc0c:	add	r8, r8, r7
   2fc10:	b	2f754 <__assert_fail@plt+0x1dbb0>
   2fc14:	movw	r3, #14224	; 0x3790
   2fc18:	movt	r3, #3
   2fc1c:	movw	r1, #14048	; 0x36e0
   2fc20:	movt	r1, #3
   2fc24:	movw	r0, #14064	; 0x36f0
   2fc28:	movt	r0, #3
   2fc2c:	mov	r2, #85	; 0x55
   2fc30:	bl	11ba4 <__assert_fail@plt>
   2fc34:	ldr	r3, [sp, #12]
   2fc38:	mov	r1, #1
   2fc3c:	mul	r2, r9, r3
   2fc40:	ldr	r3, [sp, #8]
   2fc44:	mov	r9, r4
   2fc48:	mla	r8, r3, r8, r2
   2fc4c:	add	r8, r8, r5
   2fc50:	b	2f7d0 <__assert_fail@plt+0x1dc2c>
   2fc54:	ldrd	r2, [sp, #8]
   2fc58:	mov	r1, #1
   2fc5c:	mul	r3, r9, r3
   2fc60:	mov	r9, r4
   2fc64:	mla	r8, r2, r8, r3
   2fc68:	add	r8, r8, r5
   2fc6c:	b	2f8c0 <__assert_fail@plt+0x1dd1c>
   2fc70:	ldrd	r2, [sp, #8]
   2fc74:	mov	r1, #1
   2fc78:	mul	r3, r9, r3
   2fc7c:	mov	r9, r4
   2fc80:	mla	r8, r2, r8, r3
   2fc84:	add	r8, r8, r5
   2fc88:	b	2f938 <__assert_fail@plt+0x1dd94>
   2fc8c:	ldrd	r2, [sp, #8]
   2fc90:	mov	r1, #1
   2fc94:	mul	r3, r9, r3
   2fc98:	mov	r9, r4
   2fc9c:	mla	r8, r2, r8, r3
   2fca0:	add	r8, r8, r5
   2fca4:	b	2f848 <__assert_fail@plt+0x1dca4>
   2fca8:	ldr	r3, [sp, #12]
   2fcac:	mov	r6, r8
   2fcb0:	mov	r1, #1
   2fcb4:	mul	r2, r0, r3
   2fcb8:	ldr	r3, [sp, #8]
   2fcbc:	mla	r2, ip, r3, r2
   2fcc0:	add	r2, r2, r9
   2fcc4:	b	2fa74 <__assert_fail@plt+0x1ded0>
   2fcc8:	ldr	r3, [sp, #12]
   2fccc:	mov	r1, #1
   2fcd0:	ldr	r2, [sp, #16]
   2fcd4:	mul	ip, r9, r3
   2fcd8:	ldr	r3, [sp, #8]
   2fcdc:	mov	r0, r2
   2fce0:	mla	ip, r3, r8, ip
   2fce4:	ldr	r3, [sp, #20]
   2fce8:	add	ip, ip, r3
   2fcec:	b	2fa58 <__assert_fail@plt+0x1deb4>
   2fcf0:	ldr	r3, [sp, #12]
   2fcf4:	mov	r6, r8
   2fcf8:	mov	r0, #1
   2fcfc:	mul	r2, ip, r3
   2fd00:	ldr	r3, [sp, #8]
   2fd04:	mla	r2, r1, r3, r2
   2fd08:	add	r2, r2, r9
   2fd0c:	b	2f708 <__assert_fail@plt+0x1db64>
   2fd10:	cmp	r1, #0
   2fd14:	cmpne	r0, #0
   2fd18:	beq	2fd64 <__assert_fail@plt+0x1e1c0>
   2fd1c:	strd	r4, [sp, #-16]!
   2fd20:	umull	r4, r5, r0, r1
   2fd24:	str	r6, [sp, #8]
   2fd28:	str	lr, [sp, #12]
   2fd2c:	adds	r3, r5, #0
   2fd30:	movne	r3, #1
   2fd34:	cmp	r4, #0
   2fd38:	blt	2fd44 <__assert_fail@plt+0x1e1a0>
   2fd3c:	cmp	r3, #0
   2fd40:	beq	2fd70 <__assert_fail@plt+0x1e1cc>
   2fd44:	bl	119b8 <__errno_location@plt>
   2fd48:	mov	r3, #12
   2fd4c:	ldrd	r4, [sp]
   2fd50:	ldr	r6, [sp, #8]
   2fd54:	add	sp, sp, #12
   2fd58:	str	r3, [r0]
   2fd5c:	mov	r0, #0
   2fd60:	pop	{pc}		; (ldr pc, [sp], #4)
   2fd64:	mov	r1, #1
   2fd68:	mov	r0, r1
   2fd6c:	b	116ac <calloc@plt>
   2fd70:	ldrd	r4, [sp]
   2fd74:	ldr	r6, [sp, #8]
   2fd78:	ldr	lr, [sp, #12]
   2fd7c:	add	sp, sp, #16
   2fd80:	b	116ac <calloc@plt>
   2fd84:	cmp	r0, #0
   2fd88:	beq	2fd94 <__assert_fail@plt+0x1e1f0>
   2fd8c:	blt	2fd9c <__assert_fail@plt+0x1e1f8>
   2fd90:	b	118f8 <malloc@plt>
   2fd94:	mov	r0, #1
   2fd98:	b	118f8 <malloc@plt>
   2fd9c:	str	r4, [sp, #-8]!
   2fda0:	str	lr, [sp, #4]
   2fda4:	bl	119b8 <__errno_location@plt>
   2fda8:	mov	r3, #12
   2fdac:	ldr	r4, [sp]
   2fdb0:	add	sp, sp, #4
   2fdb4:	str	r3, [r0]
   2fdb8:	mov	r0, #0
   2fdbc:	pop	{pc}		; (ldr pc, [sp], #4)
   2fdc0:	cmp	r0, #0
   2fdc4:	beq	2fdec <__assert_fail@plt+0x1e248>
   2fdc8:	cmp	r1, #0
   2fdcc:	str	r4, [sp, #-8]!
   2fdd0:	str	lr, [sp, #4]
   2fdd4:	beq	2fdf4 <__assert_fail@plt+0x1e250>
   2fdd8:	blt	2fe08 <__assert_fail@plt+0x1e264>
   2fddc:	ldr	r4, [sp]
   2fde0:	ldr	lr, [sp, #4]
   2fde4:	add	sp, sp, #8
   2fde8:	b	117f0 <realloc@plt>
   2fdec:	mov	r0, r1
   2fdf0:	b	2fd84 <__assert_fail@plt+0x1e1e0>
   2fdf4:	bl	17ac8 <__assert_fail@plt+0x5f24>
   2fdf8:	ldr	r4, [sp]
   2fdfc:	add	sp, sp, #4
   2fe00:	mov	r0, #0
   2fe04:	pop	{pc}		; (ldr pc, [sp], #4)
   2fe08:	bl	119b8 <__errno_location@plt>
   2fe0c:	mov	r3, #12
   2fe10:	str	r3, [r0]
   2fe14:	b	2fdf8 <__assert_fail@plt+0x1e254>
   2fe18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2fe1c:	mvn	r4, #0
   2fe20:	strd	r6, [sp, #8]
   2fe24:	mov	r6, #1
   2fe28:	mov	ip, r6
   2fe2c:	str	r8, [sp, #16]
   2fe30:	str	lr, [sp, #20]
   2fe34:	mov	lr, #0
   2fe38:	add	r3, ip, lr
   2fe3c:	add	r5, r0, r4
   2fe40:	cmp	r3, r1
   2fe44:	bcs	2fe74 <__assert_fail@plt+0x1e2d0>
   2fe48:	ldrb	r5, [r5, ip]
   2fe4c:	ldrb	r7, [r0, r3]
   2fe50:	cmp	r7, r5
   2fe54:	bcs	2feec <__assert_fail@plt+0x1e348>
   2fe58:	mov	lr, r3
   2fe5c:	mov	ip, #1
   2fe60:	sub	r6, r3, r4
   2fe64:	add	r3, ip, lr
   2fe68:	cmp	r3, r1
   2fe6c:	add	r5, r0, r4
   2fe70:	bcc	2fe48 <__assert_fail@plt+0x1e2a4>
   2fe74:	mov	r8, #1
   2fe78:	mov	lr, #0
   2fe7c:	str	r6, [r2]
   2fe80:	mov	ip, r8
   2fe84:	mvn	r5, #0
   2fe88:	add	r3, ip, lr
   2fe8c:	add	r6, r0, r5
   2fe90:	cmp	r1, r3
   2fe94:	bls	2fec4 <__assert_fail@plt+0x1e320>
   2fe98:	ldrb	r6, [r6, ip]
   2fe9c:	ldrb	r7, [r0, r3]
   2fea0:	cmp	r7, r6
   2fea4:	bls	2ff04 <__assert_fail@plt+0x1e360>
   2fea8:	mov	lr, r3
   2feac:	mov	ip, #1
   2feb0:	sub	r8, r3, r5
   2feb4:	add	r3, ip, lr
   2feb8:	cmp	r1, r3
   2febc:	add	r6, r0, r5
   2fec0:	bhi	2fe98 <__assert_fail@plt+0x1e2f4>
   2fec4:	add	r0, r4, #1
   2fec8:	add	r5, r5, #1
   2fecc:	ldrd	r6, [sp, #8]
   2fed0:	cmp	r5, r0
   2fed4:	movcs	r0, r5
   2fed8:	ldrd	r4, [sp]
   2fedc:	strcs	r8, [r2]
   2fee0:	ldr	r8, [sp, #16]
   2fee4:	add	sp, sp, #20
   2fee8:	pop	{pc}		; (ldr pc, [sp], #4)
   2feec:	beq	2ff1c <__assert_fail@plt+0x1e378>
   2fef0:	mov	r6, #1
   2fef4:	mov	r4, lr
   2fef8:	mov	ip, r6
   2fefc:	add	lr, lr, r6
   2ff00:	b	2fe38 <__assert_fail@plt+0x1e294>
   2ff04:	beq	2ff30 <__assert_fail@plt+0x1e38c>
   2ff08:	mov	r8, #1
   2ff0c:	mov	r5, lr
   2ff10:	mov	ip, r8
   2ff14:	add	lr, lr, r8
   2ff18:	b	2fe88 <__assert_fail@plt+0x1e2e4>
   2ff1c:	cmp	ip, r6
   2ff20:	add	ip, ip, #1
   2ff24:	moveq	lr, r3
   2ff28:	moveq	ip, #1
   2ff2c:	b	2fe38 <__assert_fail@plt+0x1e294>
   2ff30:	cmp	ip, r8
   2ff34:	add	ip, ip, #1
   2ff38:	moveq	lr, r3
   2ff3c:	moveq	ip, #1
   2ff40:	b	2fe88 <__assert_fail@plt+0x1e2e4>
   2ff44:	cmp	r3, #2
   2ff48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ff4c:	mov	r4, r3
   2ff50:	strd	r6, [sp, #8]
   2ff54:	mov	r5, r0
   2ff58:	strd	r8, [sp, #16]
   2ff5c:	strd	sl, [sp, #24]
   2ff60:	mov	fp, r1
   2ff64:	mov	sl, r2
   2ff68:	str	lr, [sp, #32]
   2ff6c:	sub	sp, sp, #1056	; 0x420
   2ff70:	sub	sp, sp, #12
   2ff74:	bls	30354 <__assert_fail@plt+0x1e7b0>
   2ff78:	add	r6, sp, #40	; 0x28
   2ff7c:	mov	r1, r3
   2ff80:	sub	r2, r6, #4
   2ff84:	mov	r0, sl
   2ff88:	bl	2fe18 <__assert_fail@plt+0x1e274>
   2ff8c:	ldr	r3, [sp, #36]	; 0x24
   2ff90:	str	r3, [sp]
   2ff94:	str	r0, [sp, #4]
   2ff98:	add	r2, sp, #1056	; 0x420
   2ff9c:	sub	r3, r6, #4
   2ffa0:	add	r2, r2, #4
   2ffa4:	str	r4, [r3, #4]!
   2ffa8:	cmp	r2, r3
   2ffac:	bne	2ffa4 <__assert_fail@plt+0x1e400>
   2ffb0:	ldr	r3, [sp]
   2ffb4:	cmp	r4, #0
   2ffb8:	add	r1, sl, r3
   2ffbc:	beq	30174 <__assert_fail@plt+0x1e5d0>
   2ffc0:	sub	r3, r4, #1
   2ffc4:	sub	r2, sl, #1
   2ffc8:	add	ip, sl, r3
   2ffcc:	str	r3, [sp, #8]
   2ffd0:	ldrb	r0, [r2, #1]!
   2ffd4:	add	lr, sp, #1056	; 0x420
   2ffd8:	add	lr, lr, #8
   2ffdc:	mvn	r3, r2
   2ffe0:	add	r0, lr, r0, lsl #2
   2ffe4:	cmp	r2, ip
   2ffe8:	add	r3, r3, r4
   2ffec:	add	r3, sl, r3
   2fff0:	str	r3, [r0, #-1024]	; 0xfffffc00
   2fff4:	bne	2ffd0 <__assert_fail@plt+0x1e42c>
   2fff8:	mov	r0, sl
   2fffc:	ldr	r2, [sp, #4]
   30000:	bl	117c0 <memcmp@plt>
   30004:	cmp	r0, #0
   30008:	beq	301b8 <__assert_fail@plt+0x1e614>
   3000c:	ldr	r2, [sp, #4]
   30010:	sub	r8, r4, #2
   30014:	mov	r7, #0
   30018:	add	r8, r8, sl
   3001c:	rsb	r9, sl, #1
   30020:	sub	r3, r4, r2
   30024:	sub	r1, r2, #1
   30028:	cmp	r3, r2
   3002c:	movcc	r3, r2
   30030:	str	r1, [sp, #16]
   30034:	add	r1, sl, r1
   30038:	add	r3, r3, #1
   3003c:	str	r1, [sp, #12]
   30040:	str	r3, [sp, #20]
   30044:	sub	r3, r4, #1
   30048:	str	r3, [sp, #4]
   3004c:	mov	r3, r2
   30050:	add	r2, sl, r2
   30054:	str	r2, [sp]
   30058:	rsb	r2, r3, #1
   3005c:	str	r2, [sp, #8]
   30060:	mov	r2, fp
   30064:	mov	fp, r3
   30068:	b	30070 <__assert_fail@plt+0x1e4cc>
   3006c:	mov	r2, r6
   30070:	add	r6, r7, r4
   30074:	add	r0, r5, r2
   30078:	mov	r1, #0
   3007c:	sub	r2, r6, r2
   30080:	bl	11a24 <memchr@plt>
   30084:	adds	r2, r6, #0
   30088:	movne	r2, #1
   3008c:	cmp	r0, #0
   30090:	moveq	r0, r2
   30094:	movne	r0, #0
   30098:	cmp	r0, #0
   3009c:	beq	30188 <__assert_fail@plt+0x1e5e4>
   300a0:	add	r2, r5, r6
   300a4:	add	r3, sp, #1056	; 0x420
   300a8:	ldrb	r2, [r2, #-1]
   300ac:	add	r3, r3, #8
   300b0:	add	r2, r3, r2, lsl #2
   300b4:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   300b8:	cmp	r2, #0
   300bc:	addne	r7, r7, r2
   300c0:	bne	3006c <__assert_fail@plt+0x1e4c8>
   300c4:	ldr	r3, [sp, #4]
   300c8:	cmp	fp, r3
   300cc:	bcs	30114 <__assert_fail@plt+0x1e570>
   300d0:	ldr	r3, [sp]
   300d4:	add	r2, r7, fp
   300d8:	add	r1, r5, r2
   300dc:	ldrb	r2, [r5, r2]
   300e0:	ldrb	r0, [r3]
   300e4:	cmp	r2, r0
   300e8:	movne	lr, fp
   300ec:	bne	30164 <__assert_fail@plt+0x1e5c0>
   300f0:	ldr	r2, [sp]
   300f4:	b	30108 <__assert_fail@plt+0x1e564>
   300f8:	ldrb	r0, [r2, #1]!
   300fc:	ldrb	r3, [r1, #1]!
   30100:	cmp	r0, r3
   30104:	bne	30164 <__assert_fail@plt+0x1e5c0>
   30108:	cmp	r8, r2
   3010c:	add	lr, r9, r2
   30110:	bne	300f8 <__assert_fail@plt+0x1e554>
   30114:	ldr	r3, [sp, #16]
   30118:	cmn	r3, #1
   3011c:	beq	3015c <__assert_fail@plt+0x1e5b8>
   30120:	add	r2, r7, r3
   30124:	ldr	r3, [sp, #12]
   30128:	add	r1, r5, r2
   3012c:	ldrb	r2, [r5, r2]
   30130:	ldrb	r0, [r3]
   30134:	cmp	r2, r0
   30138:	ldreq	r2, [sp, #12]
   3013c:	beq	30154 <__assert_fail@plt+0x1e5b0>
   30140:	b	301ac <__assert_fail@plt+0x1e608>
   30144:	ldrb	r0, [r2, #-1]!
   30148:	ldrb	r3, [r1, #-1]!
   3014c:	cmp	r0, r3
   30150:	bne	301ac <__assert_fail@plt+0x1e608>
   30154:	cmp	sl, r2
   30158:	bne	30144 <__assert_fail@plt+0x1e5a0>
   3015c:	add	r0, r5, r7
   30160:	b	3018c <__assert_fail@plt+0x1e5e8>
   30164:	ldr	r3, [sp, #8]
   30168:	add	r7, r3, r7
   3016c:	add	r7, lr, r7
   30170:	b	3006c <__assert_fail@plt+0x1e4c8>
   30174:	mov	r0, sl
   30178:	ldr	r2, [sp, #4]
   3017c:	bl	117c0 <memcmp@plt>
   30180:	cmp	r0, #0
   30184:	bne	3000c <__assert_fail@plt+0x1e468>
   30188:	mov	r0, #0
   3018c:	add	sp, sp, #1056	; 0x420
   30190:	add	sp, sp, #12
   30194:	ldrd	r4, [sp]
   30198:	ldrd	r6, [sp, #8]
   3019c:	ldrd	r8, [sp, #16]
   301a0:	ldrd	sl, [sp, #24]
   301a4:	add	sp, sp, #32
   301a8:	pop	{pc}		; (ldr pc, [sp], #4)
   301ac:	ldr	r3, [sp, #20]
   301b0:	add	r7, r7, r3
   301b4:	b	3006c <__assert_fail@plt+0x1e4c8>
   301b8:	ldr	r2, [sp, #4]
   301bc:	sub	r8, r4, #2
   301c0:	rsb	r9, sl, #1
   301c4:	add	r8, sl, r8
   301c8:	mov	r7, r0
   301cc:	str	sl, [sp, #12]
   301d0:	sub	r3, r2, #1
   301d4:	str	r3, [sp, #28]
   301d8:	add	r3, sl, r3
   301dc:	mov	sl, r0
   301e0:	str	r3, [sp, #24]
   301e4:	ldr	r3, [sp]
   301e8:	sub	r3, r4, r3
   301ec:	str	r3, [sp, #20]
   301f0:	rsb	r3, r2, #1
   301f4:	mov	r2, fp
   301f8:	str	r3, [sp, #16]
   301fc:	b	3021c <__assert_fail@plt+0x1e678>
   30200:	ldr	r2, [sp]
   30204:	cmp	sl, #0
   30208:	cmpne	r3, r2
   3020c:	mov	sl, #0
   30210:	ldrcc	r3, [sp, #20]
   30214:	add	r7, r7, r3
   30218:	mov	r2, r6
   3021c:	add	r6, r7, r4
   30220:	add	r0, r5, r2
   30224:	mov	r1, #0
   30228:	sub	r2, r6, r2
   3022c:	bl	11a24 <memchr@plt>
   30230:	adds	r3, r6, #0
   30234:	movne	r3, #1
   30238:	cmp	r0, #0
   3023c:	moveq	r0, r3
   30240:	movne	r0, #0
   30244:	cmp	r0, #0
   30248:	beq	30188 <__assert_fail@plt+0x1e5e4>
   3024c:	add	r3, r5, r6
   30250:	add	r2, sp, #1056	; 0x420
   30254:	ldrb	r3, [r3, #-1]
   30258:	add	r2, r2, #8
   3025c:	add	r3, r2, r3, lsl #2
   30260:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   30264:	cmp	r3, #0
   30268:	bne	30200 <__assert_fail@plt+0x1e65c>
   3026c:	ldr	r3, [sp, #4]
   30270:	cmp	sl, r3
   30274:	movcc	r0, r3
   30278:	ldr	r3, [sp, #8]
   3027c:	movcs	r0, sl
   30280:	cmp	r0, r3
   30284:	bcs	302c8 <__assert_fail@plt+0x1e724>
   30288:	ldr	r3, [sp, #12]
   3028c:	add	r1, r7, r0
   30290:	add	r2, r5, r1
   30294:	ldrb	r1, [r5, r1]
   30298:	ldrb	ip, [r3, r0]
   3029c:	add	r3, r3, r0
   302a0:	cmp	ip, r1
   302a4:	beq	302bc <__assert_fail@plt+0x1e718>
   302a8:	b	30340 <__assert_fail@plt+0x1e79c>
   302ac:	ldrb	ip, [r3, #1]!
   302b0:	ldrb	r1, [r2, #1]!
   302b4:	cmp	ip, r1
   302b8:	bne	30340 <__assert_fail@plt+0x1e79c>
   302bc:	cmp	r8, r3
   302c0:	add	r0, r9, r3
   302c4:	bne	302ac <__assert_fail@plt+0x1e708>
   302c8:	ldr	r3, [sp, #4]
   302cc:	cmp	sl, r3
   302d0:	bcs	30370 <__assert_fail@plt+0x1e7cc>
   302d4:	ldr	r3, [sp, #28]
   302d8:	add	r2, r7, r3
   302dc:	ldr	r3, [sp, #24]
   302e0:	ldrb	r1, [r3]
   302e4:	add	r3, r5, r2
   302e8:	ldrb	r2, [r5, r2]
   302ec:	cmp	r1, r2
   302f0:	bne	30370 <__assert_fail@plt+0x1e7cc>
   302f4:	add	ip, r7, sl
   302f8:	add	fp, r5, r7
   302fc:	ldr	r2, [sp, #24]
   30300:	add	ip, ip, r5
   30304:	b	30318 <__assert_fail@plt+0x1e774>
   30308:	ldrb	r0, [r2, #-1]!
   3030c:	ldrb	r1, [r3, #-1]!
   30310:	cmp	r0, r1
   30314:	bne	30324 <__assert_fail@plt+0x1e780>
   30318:	cmp	ip, r3
   3031c:	sub	lr, r3, fp
   30320:	bne	30308 <__assert_fail@plt+0x1e764>
   30324:	add	sl, sl, #1
   30328:	cmp	sl, lr
   3032c:	bhi	3015c <__assert_fail@plt+0x1e5b8>
   30330:	ldr	r3, [sp]
   30334:	ldr	sl, [sp, #20]
   30338:	add	r7, r7, r3
   3033c:	b	30218 <__assert_fail@plt+0x1e674>
   30340:	ldr	r3, [sp, #16]
   30344:	mov	sl, #0
   30348:	add	r7, r3, r7
   3034c:	add	r7, r0, r7
   30350:	b	30218 <__assert_fail@plt+0x1e674>
   30354:	mov	r3, #1
   30358:	sub	r2, r4, #1
   3035c:	add	r6, sp, #40	; 0x28
   30360:	str	r3, [sp]
   30364:	str	r2, [sp, #4]
   30368:	str	r3, [sp, #36]	; 0x24
   3036c:	b	2ff98 <__assert_fail@plt+0x1e3f4>
   30370:	ldr	lr, [sp, #4]
   30374:	b	30324 <__assert_fail@plt+0x1e780>
   30378:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3037c:	strd	r6, [sp, #8]
   30380:	strd	r8, [sp, #16]
   30384:	strd	sl, [sp, #24]
   30388:	str	lr, [sp, #32]
   3038c:	sub	sp, sp, #44	; 0x2c
   30390:	ldrb	r4, [r0]
   30394:	ldrb	r3, [r1]
   30398:	cmp	r4, #0
   3039c:	beq	30758 <__assert_fail@plt+0x1ebb4>
   303a0:	cmp	r3, #0
   303a4:	beq	30470 <__assert_fail@plt+0x1e8cc>
   303a8:	mov	r8, r0
   303ac:	add	r2, r1, #1
   303b0:	mov	ip, r3
   303b4:	mov	lr, #1
   303b8:	b	303c4 <__assert_fail@plt+0x1e820>
   303bc:	cmp	ip, #0
   303c0:	beq	303ec <__assert_fail@plt+0x1e848>
   303c4:	cmp	ip, r4
   303c8:	movne	lr, #0
   303cc:	andeq	lr, lr, #1
   303d0:	ldrb	r4, [r8, #1]!
   303d4:	mov	r5, r2
   303d8:	ldrb	ip, [r2], #1
   303dc:	cmp	r4, #0
   303e0:	bne	303bc <__assert_fail@plt+0x1e818>
   303e4:	cmp	ip, #0
   303e8:	bne	30450 <__assert_fail@plt+0x1e8ac>
   303ec:	cmp	lr, #0
   303f0:	bne	30470 <__assert_fail@plt+0x1e8cc>
   303f4:	mov	r7, r1
   303f8:	mov	r6, r0
   303fc:	mov	r1, r3
   30400:	add	r0, r0, #1
   30404:	bl	11994 <strchr@plt>
   30408:	subs	r4, r0, #0
   3040c:	sub	r7, r5, r7
   30410:	beq	30450 <__assert_fail@plt+0x1e8ac>
   30414:	cmp	r7, #1
   30418:	beq	30450 <__assert_fail@plt+0x1e8ac>
   3041c:	add	r6, r6, r7
   30420:	sub	r5, r5, r7
   30424:	cmp	r6, r4
   30428:	subcs	r6, r6, r4
   3042c:	movcc	r6, #1
   30430:	cmp	r7, #31
   30434:	bls	30478 <__assert_fail@plt+0x1e8d4>
   30438:	mov	r0, r4
   3043c:	mov	r3, r7
   30440:	mov	r2, r5
   30444:	mov	r1, r6
   30448:	bl	2ff44 <__assert_fail@plt+0x1e3a0>
   3044c:	mov	r4, r0
   30450:	mov	r0, r4
   30454:	add	sp, sp, #44	; 0x2c
   30458:	ldrd	r4, [sp]
   3045c:	ldrd	r6, [sp, #8]
   30460:	ldrd	r8, [sp, #16]
   30464:	ldrd	sl, [sp, #24]
   30468:	add	sp, sp, #32
   3046c:	pop	{pc}		; (ldr pc, [sp], #4)
   30470:	mov	r4, r0
   30474:	b	30450 <__assert_fail@plt+0x1e8ac>
   30478:	cmp	r7, #2
   3047c:	bls	30768 <__assert_fail@plt+0x1ebc4>
   30480:	add	r2, sp, #36	; 0x24
   30484:	mov	r1, r7
   30488:	mov	r0, r5
   3048c:	bl	2fe18 <__assert_fail@plt+0x1e274>
   30490:	ldr	r3, [sp, #36]	; 0x24
   30494:	mov	r8, r0
   30498:	str	r3, [sp, #16]
   3049c:	ldr	r3, [sp, #16]
   304a0:	mov	r2, r8
   304a4:	mov	r0, r5
   304a8:	add	r1, r5, r3
   304ac:	bl	117c0 <memcmp@plt>
   304b0:	cmp	r0, #0
   304b4:	bne	30618 <__assert_fail@plt+0x1ea74>
   304b8:	sub	r2, r8, #1
   304bc:	mov	r3, r8
   304c0:	str	r7, [sp, #4]
   304c4:	sub	r8, r7, #1
   304c8:	rsb	r9, r5, #1
   304cc:	str	r5, [sp, #8]
   304d0:	str	r2, [sp, #20]
   304d4:	add	r2, r5, r2
   304d8:	add	r8, r8, r5
   304dc:	mov	sl, r0
   304e0:	mov	r5, r0
   304e4:	str	r2, [sp, #28]
   304e8:	ldr	r2, [sp, #16]
   304ec:	sub	r2, r7, r2
   304f0:	mov	r7, r3
   304f4:	str	r2, [sp, #24]
   304f8:	rsb	r2, r3, #1
   304fc:	str	r2, [sp, #12]
   30500:	mov	r2, r6
   30504:	ldr	r3, [sp, #4]
   30508:	add	r0, r4, r2
   3050c:	mov	r1, #0
   30510:	add	fp, r3, sl
   30514:	sub	r2, fp, r2
   30518:	bl	11a24 <memchr@plt>
   3051c:	clz	r0, r0
   30520:	cmp	fp, #0
   30524:	lsr	r0, r0, #5
   30528:	moveq	r0, #0
   3052c:	cmp	r0, #0
   30530:	beq	30470 <__assert_fail@plt+0x1e8cc>
   30534:	ldr	r3, [sp, #4]
   30538:	cmp	r7, r5
   3053c:	movcs	r0, r7
   30540:	movcc	r0, r5
   30544:	cmp	r3, r0
   30548:	bls	3058c <__assert_fail@plt+0x1e9e8>
   3054c:	ldr	r3, [sp, #8]
   30550:	add	r1, r0, sl
   30554:	add	r2, r4, r1
   30558:	ldrb	r1, [r4, r1]
   3055c:	ldrb	ip, [r3, r0]
   30560:	add	r3, r3, r0
   30564:	cmp	r1, ip
   30568:	beq	30580 <__assert_fail@plt+0x1e9dc>
   3056c:	b	30604 <__assert_fail@plt+0x1ea60>
   30570:	ldrb	ip, [r3, #1]!
   30574:	ldrb	r1, [r2, #1]!
   30578:	cmp	ip, r1
   3057c:	bne	30604 <__assert_fail@plt+0x1ea60>
   30580:	cmp	r8, r3
   30584:	add	r0, r9, r3
   30588:	bne	30570 <__assert_fail@plt+0x1e9cc>
   3058c:	cmp	r7, r5
   30590:	bls	30780 <__assert_fail@plt+0x1ebdc>
   30594:	ldr	r3, [sp, #20]
   30598:	ldr	r0, [sp, #28]
   3059c:	add	r2, sl, r3
   305a0:	add	r3, r4, r2
   305a4:	ldrb	r2, [r4, r2]
   305a8:	ldrb	r1, [r0]
   305ac:	cmp	r1, r2
   305b0:	bne	30780 <__assert_fail@plt+0x1ebdc>
   305b4:	add	ip, r5, sl
   305b8:	mov	r2, r0
   305bc:	add	ip, ip, r4
   305c0:	add	r6, r4, sl
   305c4:	b	305d8 <__assert_fail@plt+0x1ea34>
   305c8:	ldrb	r0, [r2, #-1]!
   305cc:	ldrb	r1, [r3, #-1]!
   305d0:	cmp	r0, r1
   305d4:	bne	305e4 <__assert_fail@plt+0x1ea40>
   305d8:	cmp	ip, r3
   305dc:	sub	lr, r3, r6
   305e0:	bne	305c8 <__assert_fail@plt+0x1ea24>
   305e4:	add	r5, r5, #1
   305e8:	cmp	r5, lr
   305ec:	bhi	30730 <__assert_fail@plt+0x1eb8c>
   305f0:	ldr	r3, [sp, #16]
   305f4:	ldr	r5, [sp, #24]
   305f8:	add	sl, sl, r3
   305fc:	mov	r2, fp
   30600:	b	30504 <__assert_fail@plt+0x1e960>
   30604:	ldr	r3, [sp, #12]
   30608:	mov	r5, #0
   3060c:	add	sl, r3, sl
   30610:	add	sl, r0, sl
   30614:	b	305fc <__assert_fail@plt+0x1ea58>
   30618:	sub	r3, r7, r8
   3061c:	mov	r2, r8
   30620:	cmp	r3, r8
   30624:	sub	r1, r8, #1
   30628:	movcc	r3, r2
   3062c:	sub	r8, r7, #1
   30630:	add	r3, r3, #1
   30634:	add	r8, r8, r5
   30638:	str	r1, [sp, #12]
   3063c:	mov	sl, #0
   30640:	add	r1, r5, r1
   30644:	str	r3, [sp, #16]
   30648:	mov	r3, r2
   3064c:	add	r2, r5, r2
   30650:	rsb	r9, r5, #1
   30654:	str	r2, [sp, #4]
   30658:	rsb	r2, r3, #1
   3065c:	str	r2, [sp, #8]
   30660:	mov	r2, r6
   30664:	mov	r6, r3
   30668:	str	r1, [sp, #20]
   3066c:	add	fp, r7, sl
   30670:	add	r0, r4, r2
   30674:	mov	r1, #0
   30678:	sub	r2, fp, r2
   3067c:	bl	11a24 <memchr@plt>
   30680:	clz	r0, r0
   30684:	cmp	fp, #0
   30688:	lsr	r0, r0, #5
   3068c:	moveq	r0, #0
   30690:	cmp	r0, #0
   30694:	beq	30470 <__assert_fail@plt+0x1e8cc>
   30698:	cmp	r7, r6
   3069c:	bls	306e4 <__assert_fail@plt+0x1eb40>
   306a0:	ldr	r3, [sp, #4]
   306a4:	add	r2, r6, sl
   306a8:	add	r1, r4, r2
   306ac:	ldrb	r2, [r4, r2]
   306b0:	ldrb	r0, [r3]
   306b4:	cmp	r2, r0
   306b8:	movne	lr, r6
   306bc:	bne	30738 <__assert_fail@plt+0x1eb94>
   306c0:	ldr	r2, [sp, #4]
   306c4:	b	306d8 <__assert_fail@plt+0x1eb34>
   306c8:	ldrb	r0, [r2, #1]!
   306cc:	ldrb	r3, [r1, #1]!
   306d0:	cmp	r0, r3
   306d4:	bne	30738 <__assert_fail@plt+0x1eb94>
   306d8:	cmp	r2, r8
   306dc:	add	lr, r9, r2
   306e0:	bne	306c8 <__assert_fail@plt+0x1eb24>
   306e4:	ldr	r3, [sp, #12]
   306e8:	cmn	r3, #1
   306ec:	beq	30730 <__assert_fail@plt+0x1eb8c>
   306f0:	ldr	r3, [sp, #12]
   306f4:	add	r2, sl, r3
   306f8:	ldr	r3, [sp, #20]
   306fc:	add	r1, r4, r2
   30700:	ldrb	r2, [r4, r2]
   30704:	ldrb	r0, [r3]
   30708:	cmp	r2, r0
   3070c:	bne	3074c <__assert_fail@plt+0x1eba8>
   30710:	mov	r2, r3
   30714:	b	30728 <__assert_fail@plt+0x1eb84>
   30718:	ldrb	r0, [r2, #-1]!
   3071c:	ldrb	r3, [r1, #-1]!
   30720:	cmp	r0, r3
   30724:	bne	3074c <__assert_fail@plt+0x1eba8>
   30728:	cmp	r5, r2
   3072c:	bne	30718 <__assert_fail@plt+0x1eb74>
   30730:	add	r4, r4, sl
   30734:	b	30450 <__assert_fail@plt+0x1e8ac>
   30738:	ldr	r3, [sp, #8]
   3073c:	add	sl, r3, sl
   30740:	add	sl, lr, sl
   30744:	mov	r2, fp
   30748:	b	3066c <__assert_fail@plt+0x1eac8>
   3074c:	ldr	r3, [sp, #16]
   30750:	add	sl, sl, r3
   30754:	b	30744 <__assert_fail@plt+0x1eba0>
   30758:	cmp	r3, #0
   3075c:	moveq	r4, r0
   30760:	movne	r4, #0
   30764:	b	30450 <__assert_fail@plt+0x1e8ac>
   30768:	mov	r3, #1
   3076c:	sub	r2, r7, #1
   30770:	mov	r8, r2
   30774:	str	r3, [sp, #16]
   30778:	str	r3, [sp, #36]	; 0x24
   3077c:	b	3049c <__assert_fail@plt+0x1e8f8>
   30780:	mov	lr, r7
   30784:	b	305e4 <__assert_fail@plt+0x1ea40>
   30788:	strd	r4, [sp, #-16]!
   3078c:	mov	r4, r0
   30790:	str	r6, [sp, #8]
   30794:	str	lr, [sp, #12]
   30798:	bl	118a4 <__fpending@plt>
   3079c:	ldr	r5, [r4]
   307a0:	mov	r6, r0
   307a4:	mov	r0, r4
   307a8:	bl	15940 <__assert_fail@plt+0x3d9c>
   307ac:	mov	r4, r0
   307b0:	and	r5, r5, #32
   307b4:	cmp	r5, #0
   307b8:	bne	307f0 <__assert_fail@plt+0x1ec4c>
   307bc:	cmp	r0, #0
   307c0:	beq	307dc <__assert_fail@plt+0x1ec38>
   307c4:	cmp	r6, #0
   307c8:	bne	30808 <__assert_fail@plt+0x1ec64>
   307cc:	bl	119b8 <__errno_location@plt>
   307d0:	ldr	r4, [r0]
   307d4:	subs	r4, r4, #9
   307d8:	mvnne	r4, #0
   307dc:	mov	r0, r4
   307e0:	ldrd	r4, [sp]
   307e4:	ldr	r6, [sp, #8]
   307e8:	add	sp, sp, #12
   307ec:	pop	{pc}		; (ldr pc, [sp], #4)
   307f0:	cmp	r0, #0
   307f4:	bne	30808 <__assert_fail@plt+0x1ec64>
   307f8:	bl	119b8 <__errno_location@plt>
   307fc:	str	r4, [r0]
   30800:	mvn	r4, #0
   30804:	b	307dc <__assert_fail@plt+0x1ec38>
   30808:	mvn	r4, #0
   3080c:	b	307dc <__assert_fail@plt+0x1ec38>
   30810:	movw	r3, #62998	; 0xf616
   30814:	movt	r3, #149	; 0x95
   30818:	strd	r4, [sp, #-8]!
   3081c:	mov	r4, #0
   30820:	mov	r5, #0
   30824:	strd	r4, [r0, #16]
   30828:	str	r3, [r0, #24]
   3082c:	ldrd	r4, [sp]
   30830:	add	sp, sp, #8
   30834:	bx	lr
   30838:	ldr	r2, [r0, #24]
   3083c:	movw	r3, #62998	; 0xf616
   30840:	movt	r3, #149	; 0x95
   30844:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30848:	strd	r6, [sp, #8]
   3084c:	strd	r8, [sp, #16]
   30850:	strd	sl, [sp, #24]
   30854:	cmp	r2, r3
   30858:	str	lr, [sp, #32]
   3085c:	sub	sp, sp, #4
   30860:	bne	30910 <__assert_fail@plt+0x1ed6c>
   30864:	ldrd	r6, [r0, #16]
   30868:	ldrd	sl, [r1, #96]	; 0x60
   3086c:	orrs	r3, r6, r7
   30870:	beq	308c4 <__assert_fail@plt+0x1ed20>
   30874:	ldrd	r2, [r0]
   30878:	cmp	r3, fp
   3087c:	cmpeq	r2, sl
   30880:	beq	308e4 <__assert_fail@plt+0x1ed40>
   30884:	adds	r8, r6, #1
   30888:	adc	r9, r7, #0
   3088c:	and	r2, r6, r8
   30890:	and	r3, r7, r9
   30894:	orrs	r3, r2, r3
   30898:	strd	r8, [r0, #16]
   3089c:	movne	r1, #0
   308a0:	beq	30900 <__assert_fail@plt+0x1ed5c>
   308a4:	mov	r0, r1
   308a8:	add	sp, sp, #4
   308ac:	ldrd	r4, [sp]
   308b0:	ldrd	r6, [sp, #8]
   308b4:	ldrd	r8, [sp, #16]
   308b8:	ldrd	sl, [sp, #24]
   308bc:	add	sp, sp, #32
   308c0:	pop	{pc}		; (ldr pc, [sp], #4)
   308c4:	mov	r2, #1
   308c8:	mov	r3, #0
   308cc:	strd	r2, [r0, #16]
   308d0:	ldrd	r2, [r1]
   308d4:	mov	r1, #0
   308d8:	strd	sl, [r0]
   308dc:	strd	r2, [r0, #8]
   308e0:	b	308a4 <__assert_fail@plt+0x1ed00>
   308e4:	ldrd	r4, [r1]
   308e8:	ldrd	r2, [r0, #8]
   308ec:	cmp	r5, r3
   308f0:	cmpeq	r4, r2
   308f4:	bne	30884 <__assert_fail@plt+0x1ece0>
   308f8:	mov	r1, #1
   308fc:	b	308a4 <__assert_fail@plt+0x1ed00>
   30900:	orrs	r3, r8, r9
   30904:	bne	308d0 <__assert_fail@plt+0x1ed2c>
   30908:	mov	r1, #1
   3090c:	b	308a4 <__assert_fail@plt+0x1ed00>
   30910:	movw	r3, #14236	; 0x379c
   30914:	movt	r3, #3
   30918:	movw	r1, #14248	; 0x37a8
   3091c:	movt	r1, #3
   30920:	movw	r0, #14268	; 0x37bc
   30924:	movt	r0, #3
   30928:	mov	r2, #60	; 0x3c
   3092c:	bl	11ba4 <__assert_fail@plt>
   30930:	ldr	ip, [r0, #4]
   30934:	cmp	ip, r1
   30938:	bcs	309a4 <__assert_fail@plt+0x1ee00>
   3093c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   30940:	mov	r5, r1
   30944:	mov	r4, r0
   30948:	strd	r6, [sp, #8]
   3094c:	umull	r6, r7, r1, r3
   30950:	str	r8, [sp, #16]
   30954:	mov	r8, r3
   30958:	str	lr, [sp, #20]
   3095c:	cmp	r7, #0
   30960:	bne	309e8 <__assert_fail@plt+0x1ee44>
   30964:	ldr	r0, [r0, #8]
   30968:	cmp	r0, r2
   3096c:	beq	309b4 <__assert_fail@plt+0x1ee10>
   30970:	mov	r1, r6
   30974:	bl	2fdc0 <__assert_fail@plt+0x1e21c>
   30978:	subs	r6, r0, #0
   3097c:	beq	309e0 <__assert_fail@plt+0x1ee3c>
   30980:	mov	r3, #1
   30984:	str	r5, [r4]
   30988:	stmib	r4, {r5, r6}
   3098c:	ldrd	r4, [sp]
   30990:	mov	r0, r3
   30994:	ldrd	r6, [sp, #8]
   30998:	ldr	r8, [sp, #16]
   3099c:	add	sp, sp, #20
   309a0:	pop	{pc}		; (ldr pc, [sp], #4)
   309a4:	mov	r3, #1
   309a8:	str	r1, [r0]
   309ac:	mov	r0, r3
   309b0:	bx	lr
   309b4:	mov	r0, r6
   309b8:	bl	2fd84 <__assert_fail@plt+0x1e1e0>
   309bc:	subs	r6, r0, #0
   309c0:	beq	309e0 <__assert_fail@plt+0x1ee3c>
   309c4:	ldr	r1, [r4, #8]
   309c8:	cmp	r1, #0
   309cc:	beq	30980 <__assert_fail@plt+0x1eddc>
   309d0:	ldr	r2, [r4]
   309d4:	mul	r2, r2, r8
   309d8:	bl	11784 <memcpy@plt>
   309dc:	b	30980 <__assert_fail@plt+0x1eddc>
   309e0:	mov	r3, #0
   309e4:	b	3098c <__assert_fail@plt+0x1ede8>
   309e8:	bl	119b8 <__errno_location@plt>
   309ec:	mov	r2, #12
   309f0:	mov	r3, #0
   309f4:	str	r2, [r0]
   309f8:	b	3098c <__assert_fail@plt+0x1ede8>
   309fc:	push	{r1, r2, r3}
   30a00:	strd	r4, [sp, #-20]!	; 0xffffffec
   30a04:	strd	r6, [sp, #8]
   30a08:	str	lr, [sp, #16]
   30a0c:	sub	sp, sp, #8
   30a10:	ldr	r1, [sp, #28]
   30a14:	add	r2, sp, #32
   30a18:	str	r2, [sp, #4]
   30a1c:	cmp	r1, #0
   30a20:	beq	30afc <__assert_fail@plt+0x1ef58>
   30a24:	movw	r3, #1030	; 0x406
   30a28:	mov	r6, r0
   30a2c:	cmp	r1, r3
   30a30:	beq	30b0c <__assert_fail@plt+0x1ef68>
   30a34:	cmp	r1, #11
   30a38:	beq	30ab4 <__assert_fail@plt+0x1ef10>
   30a3c:	ble	30a94 <__assert_fail@plt+0x1eef0>
   30a40:	movw	r2, #1031	; 0x407
   30a44:	cmp	r1, r2
   30a48:	bgt	30ad0 <__assert_fail@plt+0x1ef2c>
   30a4c:	cmp	r1, r3
   30a50:	bge	30a60 <__assert_fail@plt+0x1eebc>
   30a54:	movw	r3, #1025	; 0x401
   30a58:	cmp	r1, r3
   30a5c:	beq	30ab4 <__assert_fail@plt+0x1ef10>
   30a60:	ldr	r3, [sp, #4]
   30a64:	mov	r0, r6
   30a68:	ldr	r2, [r3]
   30a6c:	bl	11a54 <fcntl64@plt>
   30a70:	mov	r4, r0
   30a74:	mov	r0, r4
   30a78:	add	sp, sp, #8
   30a7c:	ldrd	r4, [sp]
   30a80:	ldrd	r6, [sp, #8]
   30a84:	ldr	lr, [sp, #16]
   30a88:	add	sp, sp, #20
   30a8c:	add	sp, sp, #12
   30a90:	bx	lr
   30a94:	cmp	r1, #4
   30a98:	beq	30a60 <__assert_fail@plt+0x1eebc>
   30a9c:	bgt	30ac4 <__assert_fail@plt+0x1ef20>
   30aa0:	cmp	r1, #2
   30aa4:	beq	30a60 <__assert_fail@plt+0x1eebc>
   30aa8:	bgt	30ab4 <__assert_fail@plt+0x1ef10>
   30aac:	cmp	r1, #1
   30ab0:	bne	30a60 <__assert_fail@plt+0x1eebc>
   30ab4:	mov	r0, r6
   30ab8:	bl	11a54 <fcntl64@plt>
   30abc:	mov	r4, r0
   30ac0:	b	30a74 <__assert_fail@plt+0x1eed0>
   30ac4:	cmp	r1, #9
   30ac8:	bne	30a60 <__assert_fail@plt+0x1eebc>
   30acc:	b	30ab4 <__assert_fail@plt+0x1ef10>
   30ad0:	movw	r3, #1033	; 0x409
   30ad4:	cmp	r1, r3
   30ad8:	beq	30a60 <__assert_fail@plt+0x1eebc>
   30adc:	blt	30ab4 <__assert_fail@plt+0x1ef10>
   30ae0:	movw	r3, #1034	; 0x40a
   30ae4:	cmp	r1, r3
   30ae8:	bne	30a60 <__assert_fail@plt+0x1eebc>
   30aec:	mov	r0, r6
   30af0:	bl	11a54 <fcntl64@plt>
   30af4:	mov	r4, r0
   30af8:	b	30a74 <__assert_fail@plt+0x1eed0>
   30afc:	ldr	r2, [sp, #32]
   30b00:	bl	11a54 <fcntl64@plt>
   30b04:	mov	r4, r0
   30b08:	b	30a74 <__assert_fail@plt+0x1eed0>
   30b0c:	movw	r5, #17408	; 0x4400
   30b10:	movt	r5, #4
   30b14:	ldr	r7, [r2]
   30b18:	add	r2, sp, #36	; 0x24
   30b1c:	ldr	r3, [r5]
   30b20:	str	r2, [sp, #4]
   30b24:	mov	r2, r7
   30b28:	cmp	r3, #0
   30b2c:	blt	30b48 <__assert_fail@plt+0x1efa4>
   30b30:	bl	11a54 <fcntl64@plt>
   30b34:	subs	r4, r0, #0
   30b38:	blt	30bb0 <__assert_fail@plt+0x1f00c>
   30b3c:	mov	r3, #1
   30b40:	str	r3, [r5]
   30b44:	b	30a74 <__assert_fail@plt+0x1eed0>
   30b48:	mov	r1, #0
   30b4c:	bl	11a54 <fcntl64@plt>
   30b50:	subs	r4, r0, #0
   30b54:	blt	30a74 <__assert_fail@plt+0x1eed0>
   30b58:	ldr	r3, [r5]
   30b5c:	cmn	r3, #1
   30b60:	bne	30a74 <__assert_fail@plt+0x1eed0>
   30b64:	mov	r1, #1
   30b68:	mov	r0, r4
   30b6c:	bl	11a54 <fcntl64@plt>
   30b70:	subs	r2, r0, #0
   30b74:	blt	30b90 <__assert_fail@plt+0x1efec>
   30b78:	orr	r2, r2, #1
   30b7c:	mov	r1, #2
   30b80:	mov	r0, r4
   30b84:	bl	11a54 <fcntl64@plt>
   30b88:	cmn	r0, #1
   30b8c:	bne	30a74 <__assert_fail@plt+0x1eed0>
   30b90:	bl	119b8 <__errno_location@plt>
   30b94:	mov	r5, r0
   30b98:	mov	r0, r4
   30b9c:	ldr	r6, [r5]
   30ba0:	mvn	r4, #0
   30ba4:	bl	11b80 <close@plt>
   30ba8:	str	r6, [r5]
   30bac:	b	30a74 <__assert_fail@plt+0x1eed0>
   30bb0:	bl	119b8 <__errno_location@plt>
   30bb4:	ldr	r3, [r0]
   30bb8:	cmp	r3, #22
   30bbc:	bne	30b3c <__assert_fail@plt+0x1ef98>
   30bc0:	mov	r2, r7
   30bc4:	mov	r0, r6
   30bc8:	mov	r1, #0
   30bcc:	bl	11a54 <fcntl64@plt>
   30bd0:	subs	r4, r0, #0
   30bd4:	mvnge	r3, #0
   30bd8:	strge	r3, [r5]
   30bdc:	bge	30b64 <__assert_fail@plt+0x1efc0>
   30be0:	b	30a74 <__assert_fail@plt+0x1eed0>
   30be4:	push	{r1, r2, r3}
   30be8:	push	{lr}		; (str lr, [sp, #-4]!)
   30bec:	sub	sp, sp, #8
   30bf0:	ldr	r1, [sp, #12]
   30bf4:	ands	r2, r1, #64	; 0x40
   30bf8:	bne	30c14 <__assert_fail@plt+0x1f070>
   30bfc:	bl	118e0 <open64@plt>
   30c00:	bl	2da60 <__assert_fail@plt+0x1bebc>
   30c04:	add	sp, sp, #8
   30c08:	pop	{lr}		; (ldr lr, [sp], #4)
   30c0c:	add	sp, sp, #12
   30c10:	bx	lr
   30c14:	add	r3, sp, #16
   30c18:	ldr	r2, [sp, #16]
   30c1c:	str	r3, [sp, #4]
   30c20:	b	30bfc <__assert_fail@plt+0x1f058>
   30c24:	push	{lr}		; (str lr, [sp, #-4]!)
   30c28:	sub	sp, sp, #268	; 0x10c
   30c2c:	movw	r2, #257	; 0x101
   30c30:	add	r1, sp, #4
   30c34:	bl	30d00 <__assert_fail@plt+0x1f15c>
   30c38:	cmp	r0, #0
   30c3c:	movne	r0, #0
   30c40:	bne	30c74 <__assert_fail@plt+0x1f0d0>
   30c44:	movw	r1, #14292	; 0x37d4
   30c48:	movt	r1, #3
   30c4c:	add	r0, sp, #4
   30c50:	bl	1170c <strcmp@plt>
   30c54:	cmp	r0, #0
   30c58:	beq	30c74 <__assert_fail@plt+0x1f0d0>
   30c5c:	add	r0, sp, #4
   30c60:	movw	r1, #14296	; 0x37d8
   30c64:	movt	r1, #3
   30c68:	bl	1170c <strcmp@plt>
   30c6c:	adds	r0, r0, #0
   30c70:	movne	r0, #1
   30c74:	add	sp, sp, #268	; 0x10c
   30c78:	pop	{pc}		; (ldr pc, [sp], #4)
   30c7c:	mov	r0, #14
   30c80:	str	r4, [sp, #-8]!
   30c84:	str	lr, [sp, #4]
   30c88:	bl	11a84 <nl_langinfo@plt>
   30c8c:	cmp	r0, #0
   30c90:	beq	30cb4 <__assert_fail@plt+0x1f110>
   30c94:	ldrb	r2, [r0]
   30c98:	movw	r3, #14304	; 0x37e0
   30c9c:	movt	r3, #3
   30ca0:	ldr	r4, [sp]
   30ca4:	add	sp, sp, #4
   30ca8:	cmp	r2, #0
   30cac:	moveq	r0, r3
   30cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   30cb4:	ldr	r4, [sp]
   30cb8:	add	sp, sp, #4
   30cbc:	movw	r0, #14304	; 0x37e0
   30cc0:	movt	r0, #3
   30cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   30cc8:	umull	r2, r3, r1, r2
   30ccc:	cmp	r3, #0
   30cd0:	bne	30cdc <__assert_fail@plt+0x1f138>
   30cd4:	mov	r1, r2
   30cd8:	b	2fdc0 <__assert_fail@plt+0x1e21c>
   30cdc:	str	r4, [sp, #-8]!
   30ce0:	str	lr, [sp, #4]
   30ce4:	bl	119b8 <__errno_location@plt>
   30ce8:	mov	r3, #12
   30cec:	ldr	r4, [sp]
   30cf0:	add	sp, sp, #4
   30cf4:	str	r3, [r0]
   30cf8:	mov	r0, #0
   30cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   30d00:	strd	r4, [sp, #-16]!
   30d04:	mov	r5, r1
   30d08:	mov	r1, #0
   30d0c:	mov	r4, r2
   30d10:	str	r6, [sp, #8]
   30d14:	str	lr, [sp, #12]
   30d18:	bl	11a6c <setlocale@plt>
   30d1c:	subs	r6, r0, #0
   30d20:	beq	30da0 <__assert_fail@plt+0x1f1fc>
   30d24:	bl	11988 <strlen@plt>
   30d28:	cmp	r4, r0
   30d2c:	bhi	30d4c <__assert_fail@plt+0x1f1a8>
   30d30:	cmp	r4, #0
   30d34:	moveq	r0, #34	; 0x22
   30d38:	bne	30d70 <__assert_fail@plt+0x1f1cc>
   30d3c:	ldrd	r4, [sp]
   30d40:	ldr	r6, [sp, #8]
   30d44:	add	sp, sp, #12
   30d48:	pop	{pc}		; (ldr pc, [sp], #4)
   30d4c:	add	r2, r0, #1
   30d50:	mov	r1, r6
   30d54:	mov	r0, r5
   30d58:	bl	11784 <memcpy@plt>
   30d5c:	ldrd	r4, [sp]
   30d60:	mov	r0, #0
   30d64:	ldr	r6, [sp, #8]
   30d68:	add	sp, sp, #12
   30d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   30d70:	sub	r4, r4, #1
   30d74:	mov	r1, r6
   30d78:	mov	r2, r4
   30d7c:	mov	r0, r5
   30d80:	bl	11784 <memcpy@plt>
   30d84:	mov	r3, #0
   30d88:	mov	r0, #34	; 0x22
   30d8c:	strb	r3, [r5, r4]
   30d90:	ldrd	r4, [sp]
   30d94:	ldr	r6, [sp, #8]
   30d98:	add	sp, sp, #12
   30d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   30da0:	cmp	r4, #0
   30da4:	mov	r0, #22
   30da8:	strbne	r6, [r5]
   30dac:	ldrd	r4, [sp]
   30db0:	ldr	r6, [sp, #8]
   30db4:	add	sp, sp, #12
   30db8:	pop	{pc}		; (ldr pc, [sp], #4)
   30dbc:	mov	r1, #0
   30dc0:	b	11a6c <setlocale@plt>
   30dc4:	mov	r2, #3
   30dc8:	mov	r1, #0
   30dcc:	b	309fc <__assert_fail@plt+0x1ee58>
   30dd0:	eor	r1, r1, #-2147483648	; 0x80000000
   30dd4:	b	30ddc <__assert_fail@plt+0x1f238>
   30dd8:	eor	r3, r3, #-2147483648	; 0x80000000
   30ddc:	push	{r4, r5, lr}
   30de0:	lsl	r4, r1, #1
   30de4:	lsl	r5, r3, #1
   30de8:	teq	r4, r5
   30dec:	teqeq	r0, r2
   30df0:	orrsne	ip, r4, r0
   30df4:	orrsne	ip, r5, r2
   30df8:	mvnsne	ip, r4, asr #21
   30dfc:	mvnsne	ip, r5, asr #21
   30e00:	beq	30fec <__assert_fail@plt+0x1f448>
   30e04:	lsr	r4, r4, #21
   30e08:	rsbs	r5, r4, r5, lsr #21
   30e0c:	rsblt	r5, r5, #0
   30e10:	ble	30e30 <__assert_fail@plt+0x1f28c>
   30e14:	add	r4, r4, r5
   30e18:	eor	r2, r0, r2
   30e1c:	eor	r3, r1, r3
   30e20:	eor	r0, r2, r0
   30e24:	eor	r1, r3, r1
   30e28:	eor	r2, r0, r2
   30e2c:	eor	r3, r1, r3
   30e30:	cmp	r5, #54	; 0x36
   30e34:	pophi	{r4, r5, pc}
   30e38:	tst	r1, #-2147483648	; 0x80000000
   30e3c:	lsl	r1, r1, #12
   30e40:	mov	ip, #1048576	; 0x100000
   30e44:	orr	r1, ip, r1, lsr #12
   30e48:	beq	30e54 <__assert_fail@plt+0x1f2b0>
   30e4c:	rsbs	r0, r0, #0
   30e50:	rsc	r1, r1, #0
   30e54:	tst	r3, #-2147483648	; 0x80000000
   30e58:	lsl	r3, r3, #12
   30e5c:	orr	r3, ip, r3, lsr #12
   30e60:	beq	30e6c <__assert_fail@plt+0x1f2c8>
   30e64:	rsbs	r2, r2, #0
   30e68:	rsc	r3, r3, #0
   30e6c:	teq	r4, r5
   30e70:	beq	30fd4 <__assert_fail@plt+0x1f430>
   30e74:	sub	r4, r4, #1
   30e78:	rsbs	lr, r5, #32
   30e7c:	blt	30e98 <__assert_fail@plt+0x1f2f4>
   30e80:	lsl	ip, r2, lr
   30e84:	adds	r0, r0, r2, lsr r5
   30e88:	adc	r1, r1, #0
   30e8c:	adds	r0, r0, r3, lsl lr
   30e90:	adcs	r1, r1, r3, asr r5
   30e94:	b	30eb4 <__assert_fail@plt+0x1f310>
   30e98:	sub	r5, r5, #32
   30e9c:	add	lr, lr, #32
   30ea0:	cmp	r2, #1
   30ea4:	lsl	ip, r3, lr
   30ea8:	orrcs	ip, ip, #2
   30eac:	adds	r0, r0, r3, asr r5
   30eb0:	adcs	r1, r1, r3, asr #31
   30eb4:	and	r5, r1, #-2147483648	; 0x80000000
   30eb8:	bpl	30ec8 <__assert_fail@plt+0x1f324>
   30ebc:	rsbs	ip, ip, #0
   30ec0:	rscs	r0, r0, #0
   30ec4:	rsc	r1, r1, #0
   30ec8:	cmp	r1, #1048576	; 0x100000
   30ecc:	bcc	30f0c <__assert_fail@plt+0x1f368>
   30ed0:	cmp	r1, #2097152	; 0x200000
   30ed4:	bcc	30ef4 <__assert_fail@plt+0x1f350>
   30ed8:	lsrs	r1, r1, #1
   30edc:	rrxs	r0, r0
   30ee0:	rrx	ip, ip
   30ee4:	add	r4, r4, #1
   30ee8:	lsl	r2, r4, #21
   30eec:	cmn	r2, #4194304	; 0x400000
   30ef0:	bcs	3104c <__assert_fail@plt+0x1f4a8>
   30ef4:	cmp	ip, #-2147483648	; 0x80000000
   30ef8:	lsrseq	ip, r0, #1
   30efc:	adcs	r0, r0, #0
   30f00:	adc	r1, r1, r4, lsl #20
   30f04:	orr	r1, r1, r5
   30f08:	pop	{r4, r5, pc}
   30f0c:	lsls	ip, ip, #1
   30f10:	adcs	r0, r0, r0
   30f14:	adc	r1, r1, r1
   30f18:	tst	r1, #1048576	; 0x100000
   30f1c:	sub	r4, r4, #1
   30f20:	bne	30ef4 <__assert_fail@plt+0x1f350>
   30f24:	teq	r1, #0
   30f28:	moveq	r1, r0
   30f2c:	moveq	r0, #0
   30f30:	clz	r3, r1
   30f34:	addeq	r3, r3, #32
   30f38:	sub	r3, r3, #11
   30f3c:	subs	r2, r3, #32
   30f40:	bge	30f64 <__assert_fail@plt+0x1f3c0>
   30f44:	adds	r2, r2, #12
   30f48:	ble	30f60 <__assert_fail@plt+0x1f3bc>
   30f4c:	add	ip, r2, #20
   30f50:	rsb	r2, r2, #12
   30f54:	lsl	r0, r1, ip
   30f58:	lsr	r1, r1, r2
   30f5c:	b	30f74 <__assert_fail@plt+0x1f3d0>
   30f60:	add	r2, r2, #20
   30f64:	rsble	ip, r2, #32
   30f68:	lsl	r1, r1, r2
   30f6c:	orrle	r1, r1, r0, lsr ip
   30f70:	lslle	r0, r0, r2
   30f74:	subs	r4, r4, r3
   30f78:	addge	r1, r1, r4, lsl #20
   30f7c:	orrge	r1, r1, r5
   30f80:	popge	{r4, r5, pc}
   30f84:	mvn	r4, r4
   30f88:	subs	r4, r4, #31
   30f8c:	bge	30fc8 <__assert_fail@plt+0x1f424>
   30f90:	adds	r4, r4, #12
   30f94:	bgt	30fb0 <__assert_fail@plt+0x1f40c>
   30f98:	add	r4, r4, #20
   30f9c:	rsb	r2, r4, #32
   30fa0:	lsr	r0, r0, r4
   30fa4:	orr	r0, r0, r1, lsl r2
   30fa8:	orr	r1, r5, r1, lsr r4
   30fac:	pop	{r4, r5, pc}
   30fb0:	rsb	r4, r4, #12
   30fb4:	rsb	r2, r4, #32
   30fb8:	lsr	r0, r0, r2
   30fbc:	orr	r0, r0, r1, lsl r4
   30fc0:	mov	r1, r5
   30fc4:	pop	{r4, r5, pc}
   30fc8:	lsr	r0, r1, r4
   30fcc:	mov	r1, r5
   30fd0:	pop	{r4, r5, pc}
   30fd4:	teq	r4, #0
   30fd8:	eor	r3, r3, #1048576	; 0x100000
   30fdc:	eoreq	r1, r1, #1048576	; 0x100000
   30fe0:	addeq	r4, r4, #1
   30fe4:	subne	r5, r5, #1
   30fe8:	b	30e74 <__assert_fail@plt+0x1f2d0>
   30fec:	mvns	ip, r4, asr #21
   30ff0:	mvnsne	ip, r5, asr #21
   30ff4:	beq	3105c <__assert_fail@plt+0x1f4b8>
   30ff8:	teq	r4, r5
   30ffc:	teqeq	r0, r2
   31000:	beq	31014 <__assert_fail@plt+0x1f470>
   31004:	orrs	ip, r4, r0
   31008:	moveq	r1, r3
   3100c:	moveq	r0, r2
   31010:	pop	{r4, r5, pc}
   31014:	teq	r1, r3
   31018:	movne	r1, #0
   3101c:	movne	r0, #0
   31020:	popne	{r4, r5, pc}
   31024:	lsrs	ip, r4, #21
   31028:	bne	3103c <__assert_fail@plt+0x1f498>
   3102c:	lsls	r0, r0, #1
   31030:	adcs	r1, r1, r1
   31034:	orrcs	r1, r1, #-2147483648	; 0x80000000
   31038:	pop	{r4, r5, pc}
   3103c:	adds	r4, r4, #4194304	; 0x400000
   31040:	addcc	r1, r1, #1048576	; 0x100000
   31044:	popcc	{r4, r5, pc}
   31048:	and	r5, r1, #-2147483648	; 0x80000000
   3104c:	orr	r1, r5, #2130706432	; 0x7f000000
   31050:	orr	r1, r1, #15728640	; 0xf00000
   31054:	mov	r0, #0
   31058:	pop	{r4, r5, pc}
   3105c:	mvns	ip, r4, asr #21
   31060:	movne	r1, r3
   31064:	movne	r0, r2
   31068:	mvnseq	ip, r5, asr #21
   3106c:	movne	r3, r1
   31070:	movne	r2, r0
   31074:	orrs	r4, r0, r1, lsl #12
   31078:	orrseq	r5, r2, r3, lsl #12
   3107c:	teqeq	r1, r3
   31080:	orrne	r1, r1, #524288	; 0x80000
   31084:	pop	{r4, r5, pc}
   31088:	teq	r0, #0
   3108c:	moveq	r1, #0
   31090:	bxeq	lr
   31094:	push	{r4, r5, lr}
   31098:	mov	r4, #1024	; 0x400
   3109c:	add	r4, r4, #50	; 0x32
   310a0:	mov	r5, #0
   310a4:	mov	r1, #0
   310a8:	b	30f24 <__assert_fail@plt+0x1f380>
   310ac:	teq	r0, #0
   310b0:	moveq	r1, #0
   310b4:	bxeq	lr
   310b8:	push	{r4, r5, lr}
   310bc:	mov	r4, #1024	; 0x400
   310c0:	add	r4, r4, #50	; 0x32
   310c4:	ands	r5, r0, #-2147483648	; 0x80000000
   310c8:	rsbmi	r0, r0, #0
   310cc:	mov	r1, #0
   310d0:	b	30f24 <__assert_fail@plt+0x1f380>
   310d4:	lsls	r2, r0, #1
   310d8:	asr	r1, r2, #3
   310dc:	rrx	r1, r1
   310e0:	lsl	r0, r2, #28
   310e4:	andsne	r3, r2, #-16777216	; 0xff000000
   310e8:	teqne	r3, #-16777216	; 0xff000000
   310ec:	eorne	r1, r1, #939524096	; 0x38000000
   310f0:	bxne	lr
   310f4:	bics	r2, r2, #-16777216	; 0xff000000
   310f8:	bxeq	lr
   310fc:	teq	r3, #-16777216	; 0xff000000
   31100:	orreq	r1, r1, #524288	; 0x80000
   31104:	bxeq	lr
   31108:	push	{r4, r5, lr}
   3110c:	mov	r4, #896	; 0x380
   31110:	and	r5, r1, #-2147483648	; 0x80000000
   31114:	bic	r1, r1, #-2147483648	; 0x80000000
   31118:	b	30f24 <__assert_fail@plt+0x1f380>
   3111c:	orrs	r2, r0, r1
   31120:	bxeq	lr
   31124:	push	{r4, r5, lr}
   31128:	mov	r5, #0
   3112c:	b	3114c <__assert_fail@plt+0x1f5a8>
   31130:	orrs	r2, r0, r1
   31134:	bxeq	lr
   31138:	push	{r4, r5, lr}
   3113c:	ands	r5, r1, #-2147483648	; 0x80000000
   31140:	bpl	3114c <__assert_fail@plt+0x1f5a8>
   31144:	rsbs	r0, r0, #0
   31148:	rsc	r1, r1, #0
   3114c:	mov	r4, #1024	; 0x400
   31150:	add	r4, r4, #50	; 0x32
   31154:	lsrs	ip, r1, #22
   31158:	beq	30ec8 <__assert_fail@plt+0x1f324>
   3115c:	mov	r2, #3
   31160:	lsrs	ip, ip, #3
   31164:	addne	r2, r2, #3
   31168:	lsrs	ip, ip, #3
   3116c:	addne	r2, r2, #3
   31170:	add	r2, r2, ip, lsr #3
   31174:	rsb	r3, r2, #32
   31178:	lsl	ip, r0, r3
   3117c:	lsr	r0, r0, r2
   31180:	orr	r0, r0, r1, lsl r3
   31184:	lsr	r1, r1, r2
   31188:	add	r4, r4, r2
   3118c:	b	30ec8 <__assert_fail@plt+0x1f324>
   31190:	cmp	r3, #0
   31194:	cmpeq	r2, #0
   31198:	bne	311bc <__assert_fail@plt+0x1f618>
   3119c:	cmp	r1, #0
   311a0:	movlt	r1, #-2147483648	; 0x80000000
   311a4:	movlt	r0, #0
   311a8:	blt	311b8 <__assert_fail@plt+0x1f614>
   311ac:	cmpeq	r0, #0
   311b0:	mvnne	r1, #-2147483648	; 0x80000000
   311b4:	mvnne	r0, #0
   311b8:	b	312a0 <__assert_fail@plt+0x1f6fc>
   311bc:	sub	sp, sp, #8
   311c0:	push	{sp, lr}
   311c4:	cmp	r1, #0
   311c8:	blt	311e8 <__assert_fail@plt+0x1f644>
   311cc:	cmp	r3, #0
   311d0:	blt	3121c <__assert_fail@plt+0x1f678>
   311d4:	bl	312f0 <__assert_fail@plt+0x1f74c>
   311d8:	ldr	lr, [sp, #4]
   311dc:	add	sp, sp, #8
   311e0:	pop	{r2, r3}
   311e4:	bx	lr
   311e8:	rsbs	r0, r0, #0
   311ec:	sbc	r1, r1, r1, lsl #1
   311f0:	cmp	r3, #0
   311f4:	blt	31240 <__assert_fail@plt+0x1f69c>
   311f8:	bl	312f0 <__assert_fail@plt+0x1f74c>
   311fc:	ldr	lr, [sp, #4]
   31200:	add	sp, sp, #8
   31204:	pop	{r2, r3}
   31208:	rsbs	r0, r0, #0
   3120c:	sbc	r1, r1, r1, lsl #1
   31210:	rsbs	r2, r2, #0
   31214:	sbc	r3, r3, r3, lsl #1
   31218:	bx	lr
   3121c:	rsbs	r2, r2, #0
   31220:	sbc	r3, r3, r3, lsl #1
   31224:	bl	312f0 <__assert_fail@plt+0x1f74c>
   31228:	ldr	lr, [sp, #4]
   3122c:	add	sp, sp, #8
   31230:	pop	{r2, r3}
   31234:	rsbs	r0, r0, #0
   31238:	sbc	r1, r1, r1, lsl #1
   3123c:	bx	lr
   31240:	rsbs	r2, r2, #0
   31244:	sbc	r3, r3, r3, lsl #1
   31248:	bl	312f0 <__assert_fail@plt+0x1f74c>
   3124c:	ldr	lr, [sp, #4]
   31250:	add	sp, sp, #8
   31254:	pop	{r2, r3}
   31258:	rsbs	r2, r2, #0
   3125c:	sbc	r3, r3, r3, lsl #1
   31260:	bx	lr
   31264:	cmp	r3, #0
   31268:	cmpeq	r2, #0
   3126c:	bne	31284 <__assert_fail@plt+0x1f6e0>
   31270:	cmp	r1, #0
   31274:	cmpeq	r0, #0
   31278:	mvnne	r1, #0
   3127c:	mvnne	r0, #0
   31280:	b	312a0 <__assert_fail@plt+0x1f6fc>
   31284:	sub	sp, sp, #8
   31288:	push	{sp, lr}
   3128c:	bl	312f0 <__assert_fail@plt+0x1f74c>
   31290:	ldr	lr, [sp, #4]
   31294:	add	sp, sp, #8
   31298:	pop	{r2, r3}
   3129c:	bx	lr
   312a0:	push	{r1, lr}
   312a4:	mov	r0, #8
   312a8:	bl	116d0 <raise@plt>
   312ac:	pop	{r1, pc}
   312b0:	vmov	d6, r0, r1
   312b4:	vldr	d7, [pc, #36]	; 312e0 <__assert_fail@plt+0x1f73c>
   312b8:	vldr	d5, [pc, #40]	; 312e8 <__assert_fail@plt+0x1f744>
   312bc:	vmul.f64	d7, d6, d7
   312c0:	vcvt.u32.f64	s14, d7
   312c4:	vcvt.f64.u32	d4, s14
   312c8:	vmov	r1, s14
   312cc:	vmls.f64	d6, d4, d5
   312d0:	vcvt.u32.f64	s15, d6
   312d4:	vmov	r0, s15
   312d8:	bx	lr
   312dc:	nop			; (mov r0, r0)
   312e0:	andeq	r0, r0, r0
   312e4:	ldclcc	0, cr0, [r0]
   312e8:	andeq	r0, r0, r0
   312ec:	mvnsmi	r0, r0
   312f0:	cmp	r1, r3
   312f4:	cmpeq	r0, r2
   312f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   312fc:	mov	r4, r0
   31300:	movcc	r0, #0
   31304:	mov	r5, r1
   31308:	ldr	lr, [sp, #36]	; 0x24
   3130c:	movcc	r1, r0
   31310:	bcc	3140c <__assert_fail@plt+0x1f868>
   31314:	cmp	r3, #0
   31318:	clzeq	ip, r2
   3131c:	clzne	ip, r3
   31320:	addeq	ip, ip, #32
   31324:	cmp	r5, #0
   31328:	clzeq	r1, r4
   3132c:	addeq	r1, r1, #32
   31330:	clzne	r1, r5
   31334:	sub	ip, ip, r1
   31338:	sub	sl, ip, #32
   3133c:	lsl	r9, r3, ip
   31340:	rsb	fp, ip, #32
   31344:	orr	r9, r9, r2, lsl sl
   31348:	orr	r9, r9, r2, lsr fp
   3134c:	lsl	r8, r2, ip
   31350:	cmp	r5, r9
   31354:	cmpeq	r4, r8
   31358:	movcc	r0, #0
   3135c:	movcc	r1, r0
   31360:	bcc	3137c <__assert_fail@plt+0x1f7d8>
   31364:	mov	r0, #1
   31368:	subs	r4, r4, r8
   3136c:	lsl	r1, r0, sl
   31370:	orr	r1, r1, r0, lsr fp
   31374:	lsl	r0, r0, ip
   31378:	sbc	r5, r5, r9
   3137c:	cmp	ip, #0
   31380:	beq	3140c <__assert_fail@plt+0x1f868>
   31384:	lsr	r6, r8, #1
   31388:	orr	r6, r6, r9, lsl #31
   3138c:	lsr	r7, r9, #1
   31390:	mov	r2, ip
   31394:	b	313b8 <__assert_fail@plt+0x1f814>
   31398:	subs	r3, r4, r6
   3139c:	sbc	r8, r5, r7
   313a0:	adds	r3, r3, r3
   313a4:	adc	r8, r8, r8
   313a8:	adds	r4, r3, #1
   313ac:	adc	r5, r8, #0
   313b0:	subs	r2, r2, #1
   313b4:	beq	313d4 <__assert_fail@plt+0x1f830>
   313b8:	cmp	r5, r7
   313bc:	cmpeq	r4, r6
   313c0:	bcs	31398 <__assert_fail@plt+0x1f7f4>
   313c4:	adds	r4, r4, r4
   313c8:	adc	r5, r5, r5
   313cc:	subs	r2, r2, #1
   313d0:	bne	313b8 <__assert_fail@plt+0x1f814>
   313d4:	lsr	r3, r4, ip
   313d8:	orr	r3, r3, r5, lsl fp
   313dc:	lsr	r2, r5, ip
   313e0:	orr	r3, r3, r5, lsr sl
   313e4:	adds	r0, r0, r4
   313e8:	mov	r4, r3
   313ec:	lsl	r3, r2, ip
   313f0:	orr	r3, r3, r4, lsl sl
   313f4:	lsl	ip, r4, ip
   313f8:	orr	r3, r3, r4, lsr fp
   313fc:	adc	r1, r1, r5
   31400:	subs	r0, r0, ip
   31404:	mov	r5, r2
   31408:	sbc	r1, r1, r3
   3140c:	cmp	lr, #0
   31410:	strdne	r4, [lr]
   31414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31418:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3141c:	mov	r7, r0
   31420:	ldr	r6, [pc, #72]	; 31470 <__assert_fail@plt+0x1f8cc>
   31424:	ldr	r5, [pc, #72]	; 31474 <__assert_fail@plt+0x1f8d0>
   31428:	add	r6, pc, r6
   3142c:	add	r5, pc, r5
   31430:	sub	r6, r6, r5
   31434:	mov	r8, r1
   31438:	mov	r9, r2
   3143c:	bl	11674 <pthread_mutex_unlock@plt-0x20>
   31440:	asrs	r6, r6, #2
   31444:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   31448:	mov	r4, #0
   3144c:	add	r4, r4, #1
   31450:	ldr	r3, [r5], #4
   31454:	mov	r2, r9
   31458:	mov	r1, r8
   3145c:	mov	r0, r7
   31460:	blx	r3
   31464:	cmp	r6, r4
   31468:	bne	3144c <__assert_fail@plt+0x1f8a8>
   3146c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31470:	andeq	r2, r1, r4, ror #21
   31474:	ldrdeq	r2, [r1], -ip
   31478:	bx	lr
   3147c:	ldr	r3, [pc, #12]	; 31490 <__assert_fail@plt+0x1f8ec>
   31480:	mov	r1, #0
   31484:	add	r3, pc, r3
   31488:	ldr	r2, [r3]
   3148c:	b	119dc <__cxa_atexit@plt>
   31490:	andeq	r2, r1, ip, lsr sp

Disassembly of section .fini:

00031494 <.fini>:
   31494:	push	{r3, lr}
   31498:	pop	{r3, pc}
