
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

000112bc <.init>:
   112bc:	push	{r3, lr}
   112c0:	bl	11684 <__assert_fail@plt+0x48>
   112c4:	pop	{r3, pc}

Disassembly of section .plt:

000112c8 <fdopen@plt-0x14>:
   112c8:	push	{lr}		; (str lr, [sp, #-4]!)
   112cc:	ldr	lr, [pc, #4]	; 112d8 <fdopen@plt-0x4>
   112d0:	add	lr, pc, lr
   112d4:	ldr	pc, [lr, #8]!
   112d8:	andeq	ip, r1, r8, lsr #26

000112dc <fdopen@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3368]!	; 0xd28

000112e8 <calloc@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3360]!	; 0xd20

000112f4 <fputs_unlocked@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3352]!	; 0xd18

00011300 <raise@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3344]!	; 0xd10

0001130c <gmtime_r@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3336]!	; 0xd08

00011318 <strcmp@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3328]!	; 0xd00

00011324 <strtol@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011330 <posix_fadvise64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3312]!	; 0xcf0

0001133c <mktime@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3304]!	; 0xce8

00011348 <fflush@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3296]!	; 0xce0

00011354 <wcwidth@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011360 <free@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3280]!	; 0xcd0

0001136c <clock_gettime@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3272]!	; 0xcc8

00011378 <_exit@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3264]!	; 0xcc0

00011384 <memcpy@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011390 <mbsinit@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3248]!	; 0xcb0

0001139c <getc_unlocked@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3240]!	; 0xca8

000113a8 <dcgettext@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3232]!	; 0xca0

000113b4 <realloc@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3224]!	; 0xc98

000113c0 <localtime_r@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3216]!	; 0xc90

000113cc <textdomain@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3208]!	; 0xc88

000113d8 <iswcntrl@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3200]!	; 0xc80

000113e4 <iswprint@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3192]!	; 0xc78

000113f0 <tzset@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3184]!	; 0xc70

000113fc <__fxstat64@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #28, 20	; 0x1c000
   11404:	ldr	pc, [ip, #3176]!	; 0xc68

00011408 <lseek64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #28, 20	; 0x1c000
   11410:	ldr	pc, [ip, #3168]!	; 0xc60

00011414 <__ctype_get_mb_cur_max@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #28, 20	; 0x1c000
   1141c:	ldr	pc, [ip, #3160]!	; 0xc58

00011420 <__fpending@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #28, 20	; 0x1c000
   11428:	ldr	pc, [ip, #3152]!	; 0xc50

0001142c <ferror_unlocked@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #28, 20	; 0x1c000
   11434:	ldr	pc, [ip, #3144]!	; 0xc48

00011438 <mbrtowc@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #28, 20	; 0x1c000
   11440:	ldr	pc, [ip, #3136]!	; 0xc40

00011444 <error@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #28, 20	; 0x1c000
   1144c:	ldr	pc, [ip, #3128]!	; 0xc38

00011450 <getenv@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #28, 20	; 0x1c000
   11458:	ldr	pc, [ip, #3120]!	; 0xc30

0001145c <malloc@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #28, 20	; 0x1c000
   11464:	ldr	pc, [ip, #3112]!	; 0xc28

00011468 <__libc_start_main@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #28, 20	; 0x1c000
   11470:	ldr	pc, [ip, #3104]!	; 0xc20

00011474 <strftime@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #28, 20	; 0x1c000
   1147c:	ldr	pc, [ip, #3096]!	; 0xc18

00011480 <__freading@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #28, 20	; 0x1c000
   11488:	ldr	pc, [ip, #3088]!	; 0xc10

0001148c <__ctype_tolower_loc@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #28, 20	; 0x1c000
   11494:	ldr	pc, [ip, #3080]!	; 0xc08

00011498 <__ctype_toupper_loc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #28, 20	; 0x1c000
   114a0:	ldr	pc, [ip, #3072]!	; 0xc00

000114a4 <__gmon_start__@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #28, 20	; 0x1c000
   114ac:	ldr	pc, [ip, #3064]!	; 0xbf8

000114b0 <getopt_long@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #28, 20	; 0x1c000
   114b8:	ldr	pc, [ip, #3056]!	; 0xbf0

000114bc <__ctype_b_loc@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #28, 20	; 0x1c000
   114c4:	ldr	pc, [ip, #3048]!	; 0xbe8

000114c8 <exit@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #28, 20	; 0x1c000
   114d0:	ldr	pc, [ip, #3040]!	; 0xbe0

000114d4 <bcmp@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #28, 20	; 0x1c000
   114dc:	ldr	pc, [ip, #3032]!	; 0xbd8

000114e0 <strlen@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #28, 20	; 0x1c000
   114e8:	ldr	pc, [ip, #3024]!	; 0xbd0

000114ec <strchr@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #28, 20	; 0x1c000
   114f4:	ldr	pc, [ip, #3016]!	; 0xbc8

000114f8 <setenv@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #28, 20	; 0x1c000
   11500:	ldr	pc, [ip, #3008]!	; 0xbc0

00011504 <ungetc@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #28, 20	; 0x1c000
   1150c:	ldr	pc, [ip, #3000]!	; 0xbb8

00011510 <__errno_location@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #28, 20	; 0x1c000
   11518:	ldr	pc, [ip, #2992]!	; 0xbb0

0001151c <__sprintf_chk@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #28, 20	; 0x1c000
   11524:	ldr	pc, [ip, #2984]!	; 0xba8

00011528 <__cxa_atexit@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #28, 20	; 0x1c000
   11530:	ldr	pc, [ip, #2976]!	; 0xba0

00011534 <memset@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #28, 20	; 0x1c000
   1153c:	ldr	pc, [ip, #2968]!	; 0xb98

00011540 <__printf_chk@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #28, 20	; 0x1c000
   11548:	ldr	pc, [ip, #2960]!	; 0xb90

0001154c <fileno@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #28, 20	; 0x1c000
   11554:	ldr	pc, [ip, #2952]!	; 0xb88

00011558 <strtoumax@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #28, 20	; 0x1c000
   11560:	ldr	pc, [ip, #2944]!	; 0xb80

00011564 <__fprintf_chk@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #28, 20	; 0x1c000
   1156c:	ldr	pc, [ip, #2936]!	; 0xb78

00011570 <strtoimax@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #28, 20	; 0x1c000
   11578:	ldr	pc, [ip, #2928]!	; 0xb70

0001157c <fclose@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #28, 20	; 0x1c000
   11584:	ldr	pc, [ip, #2920]!	; 0xb68

00011588 <fseeko64@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #28, 20	; 0x1c000
   11590:	ldr	pc, [ip, #2912]!	; 0xb60

00011594 <fcntl64@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #28, 20	; 0x1c000
   1159c:	ldr	pc, [ip, #2904]!	; 0xb58

000115a0 <setlocale@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #28, 20	; 0x1c000
   115a8:	ldr	pc, [ip, #2896]!	; 0xb50

000115ac <strrchr@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #28, 20	; 0x1c000
   115b4:	ldr	pc, [ip, #2888]!	; 0xb48

000115b8 <nl_langinfo@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #28, 20	; 0x1c000
   115c0:	ldr	pc, [ip, #2880]!	; 0xb40

000115c4 <timegm@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #28, 20	; 0x1c000
   115cc:	ldr	pc, [ip, #2872]!	; 0xb38

000115d0 <clearerr_unlocked@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #28, 20	; 0x1c000
   115d8:	ldr	pc, [ip, #2864]!	; 0xb30

000115dc <fopen64@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #28, 20	; 0x1c000
   115e4:	ldr	pc, [ip, #2856]!	; 0xb28

000115e8 <bindtextdomain@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #28, 20	; 0x1c000
   115f0:	ldr	pc, [ip, #2848]!	; 0xb20

000115f4 <unsetenv@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #28, 20	; 0x1c000
   115fc:	ldr	pc, [ip, #2840]!	; 0xb18

00011600 <fputs@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #28, 20	; 0x1c000
   11608:	ldr	pc, [ip, #2832]!	; 0xb10

0001160c <strncmp@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #28, 20	; 0x1c000
   11614:	ldr	pc, [ip, #2824]!	; 0xb08

00011618 <abort@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #28, 20	; 0x1c000
   11620:	ldr	pc, [ip, #2816]!	; 0xb00

00011624 <close@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #28, 20	; 0x1c000
   1162c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011630 <putchar_unlocked@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #28, 20	; 0x1c000
   11638:	ldr	pc, [ip, #2800]!	; 0xaf0

0001163c <__assert_fail@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #28, 20	; 0x1c000
   11644:	ldr	pc, [ip, #2792]!	; 0xae8

Disassembly of section .text:

00011648 <.text>:
   11648:	mov	fp, #0
   1164c:	mov	lr, #0
   11650:	pop	{r1}		; (ldr r1, [sp], #4)
   11654:	mov	r2, sp
   11658:	push	{r2}		; (str r2, [sp, #-4]!)
   1165c:	push	{r0}		; (str r0, [sp, #-4]!)
   11660:	ldr	ip, [pc, #16]	; 11678 <__assert_fail@plt+0x3c>
   11664:	push	{ip}		; (str ip, [sp, #-4]!)
   11668:	ldr	r0, [pc, #12]	; 1167c <__assert_fail@plt+0x40>
   1166c:	ldr	r3, [pc, #12]	; 11680 <__assert_fail@plt+0x44>
   11670:	bl	11468 <__libc_start_main@plt>
   11674:	bl	11618 <abort@plt>
   11678:			; <UNDEFINED> instruction: 0x0001b7b8
   1167c:	andeq	r1, r1, r8, lsr r7
   11680:	andeq	fp, r1, r8, asr r7
   11684:	ldr	r3, [pc, #20]	; 116a0 <__assert_fail@plt+0x64>
   11688:	ldr	r2, [pc, #20]	; 116a4 <__assert_fail@plt+0x68>
   1168c:	add	r3, pc, r3
   11690:	ldr	r2, [r3, r2]
   11694:	cmp	r2, #0
   11698:	bxeq	lr
   1169c:	b	114a4 <__gmon_start__@plt>
   116a0:	andeq	ip, r1, ip, ror #18
   116a4:	andeq	r0, r0, r0, lsr r1
   116a8:	ldr	r0, [pc, #24]	; 116c8 <__assert_fail@plt+0x8c>
   116ac:	ldr	r3, [pc, #24]	; 116cc <__assert_fail@plt+0x90>
   116b0:	cmp	r3, r0
   116b4:	bxeq	lr
   116b8:	ldr	r3, [pc, #16]	; 116d0 <__assert_fail@plt+0x94>
   116bc:	cmp	r3, #0
   116c0:	bxeq	lr
   116c4:	bx	r3
   116c8:	andeq	lr, r2, r0, asr #3
   116cc:	andeq	lr, r2, r0, asr #3
   116d0:	andeq	r0, r0, r0
   116d4:	ldr	r0, [pc, #36]	; 11700 <__assert_fail@plt+0xc4>
   116d8:	ldr	r1, [pc, #36]	; 11704 <__assert_fail@plt+0xc8>
   116dc:	sub	r1, r1, r0
   116e0:	asr	r1, r1, #2
   116e4:	add	r1, r1, r1, lsr #31
   116e8:	asrs	r1, r1, #1
   116ec:	bxeq	lr
   116f0:	ldr	r3, [pc, #16]	; 11708 <__assert_fail@plt+0xcc>
   116f4:	cmp	r3, #0
   116f8:	bxeq	lr
   116fc:	bx	r3
   11700:	andeq	lr, r2, r0, asr #3
   11704:	andeq	lr, r2, r0, asr #3
   11708:	andeq	r0, r0, r0
   1170c:	push	{r4, lr}
   11710:	ldr	r4, [pc, #24]	; 11730 <__assert_fail@plt+0xf4>
   11714:	ldrb	r3, [r4]
   11718:	cmp	r3, #0
   1171c:	popne	{r4, pc}
   11720:	bl	116a8 <__assert_fail@plt+0x6c>
   11724:	mov	r3, #1
   11728:	strb	r3, [r4]
   1172c:	pop	{r4, pc}
   11730:	andeq	lr, r2, r4, ror #3
   11734:	b	116d4 <__assert_fail@plt+0x98>
   11738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1173c:	add	fp, sp, #28
   11740:	sub	sp, sp, #44	; 0x2c
   11744:	mov	r4, #0
   11748:	mov	r5, r0
   1174c:	mov	r6, r1
   11750:	str	r4, [fp, #-32]	; 0xffffffe0
   11754:	ldr	r0, [r1]
   11758:	bl	17334 <__assert_fail@plt+0x5cf8>
   1175c:	movw	r1, #51900	; 0xcabc
   11760:	mov	r0, #6
   11764:	movt	r1, #1
   11768:	bl	115a0 <setlocale@plt>
   1176c:	movw	r7, #47399	; 0xb927
   11770:	movw	r1, #47092	; 0xb7f4
   11774:	movt	r7, #1
   11778:	movt	r1, #1
   1177c:	mov	r0, r7
   11780:	bl	115e8 <bindtextdomain@plt>
   11784:	mov	r0, r7
   11788:	bl	113cc <textdomain@plt>
   1178c:	movw	r0, #20976	; 0x51f0
   11790:	movt	r0, #1
   11794:	bl	1b7bc <__assert_fail@plt+0xa180>
   11798:	cmp	r5, #2
   1179c:	blt	117b0 <__assert_fail@plt+0x174>
   117a0:	sub	r0, r5, #1
   117a4:	mov	r1, #4
   117a8:	bl	19950 <__assert_fail@plt+0x8314>
   117ac:	mov	r4, r0
   117b0:	movw	r2, #52464	; 0xccf0
   117b4:	movw	r3, #52520	; 0xcd28
   117b8:	mvn	r0, #0
   117bc:	mov	r1, r6
   117c0:	str	r0, [sp, #36]	; 0x24
   117c4:	add	r0, sp, #36	; 0x24
   117c8:	movt	r2, #1
   117cc:	movt	r3, #1
   117d0:	str	r0, [sp]
   117d4:	mov	r0, r5
   117d8:	bl	114b0 <getopt_long@plt>
   117dc:	movw	r8, #57848	; 0xe1f8
   117e0:	movw	r9, #57840	; 0xe1f0
   117e4:	cmn	r0, #1
   117e8:	str	r6, [sp, #32]
   117ec:	movt	r8, #2
   117f0:	movt	r9, #2
   117f4:	beq	11fc8 <__assert_fail@plt+0x98c>
   117f8:	mov	sl, r0
   117fc:	mov	r0, #0
   11800:	mov	r8, #0
   11804:	mov	r9, #0
   11808:	mov	r7, #0
   1180c:	str	r0, [sp, #20]
   11810:	mov	r0, #0
   11814:	str	r0, [sp, #24]
   11818:	mov	r0, #0
   1181c:	str	r0, [sp, #28]
   11820:	sub	r0, sl, #48	; 0x30
   11824:	cmp	r0, #9
   11828:	bhi	11864 <__assert_fail@plt+0x228>
   1182c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11830:	add	r6, r8, #1
   11834:	cmp	r6, r0
   11838:	bcc	1184c <__assert_fail@plt+0x210>
   1183c:	mov	r0, r9
   11840:	sub	r1, fp, #32
   11844:	bl	19984 <__assert_fail@plt+0x8348>
   11848:	mov	r9, r0
   1184c:	mov	r0, #0
   11850:	strb	sl, [r9, r8]
   11854:	mov	r8, r6
   11858:	strb	r0, [r9, r6]
   1185c:	ldr	r6, [sp, #32]
   11860:	b	118d4 <__assert_fail@plt+0x298>
   11864:	cmp	sl, #67	; 0x43
   11868:	bgt	11910 <__assert_fail@plt+0x2d4>
   1186c:	cmp	sl, #1
   11870:	bne	122c4 <__assert_fail@plt+0xc88>
   11874:	movw	r0, #57832	; 0xe1e8
   11878:	movt	r0, #2
   1187c:	ldrd	r0, [r0]
   11880:	orrs	r0, r0, r1
   11884:	bne	118bc <__assert_fail@plt+0x280>
   11888:	movw	r0, #57824	; 0xe1e0
   1188c:	movt	r0, #2
   11890:	ldr	r0, [r0]
   11894:	ldrb	r1, [r0]
   11898:	cmp	r1, #43	; 0x2b
   1189c:	bne	118bc <__assert_fail@plt+0x280>
   118a0:	add	r2, r0, #1
   118a4:	mvn	r0, #1
   118a8:	mov	r1, #43	; 0x2b
   118ac:	bl	123dc <__assert_fail@plt+0xda0>
   118b0:	mov	r8, #0
   118b4:	cmp	r0, #0
   118b8:	bne	118d4 <__assert_fail@plt+0x298>
   118bc:	movw	r0, #57824	; 0xe1e0
   118c0:	mov	r8, #0
   118c4:	movt	r0, #2
   118c8:	ldr	r0, [r0]
   118cc:	str	r0, [r4, r7, lsl #2]
   118d0:	add	r7, r7, #1
   118d4:	movw	r2, #52464	; 0xccf0
   118d8:	movw	r3, #52520	; 0xcd28
   118dc:	mvn	r0, #0
   118e0:	mov	r1, r6
   118e4:	str	r0, [sp, #36]	; 0x24
   118e8:	add	r0, sp, #36	; 0x24
   118ec:	movt	r2, #1
   118f0:	movt	r3, #1
   118f4:	str	r0, [sp]
   118f8:	mov	r0, r5
   118fc:	bl	114b0 <getopt_long@plt>
   11900:	mov	sl, r0
   11904:	cmn	r0, #1
   11908:	bne	11820 <__assert_fail@plt+0x1e4>
   1190c:	b	11f50 <__assert_fail@plt+0x914>
   11910:	sub	r0, sl, #68	; 0x44
   11914:	cmp	r0, #51	; 0x33
   11918:	bhi	11a04 <__assert_fail@plt+0x3c8>
   1191c:	add	r1, pc, #0
   11920:	ldr	pc, [r1, r0, lsl #2]
   11924:	andeq	r1, r1, r8, asr #22
   11928:	andeq	r2, r1, r8, ror r3
   1192c:	strdeq	r1, [r1], -r4
   11930:	andeq	r2, r1, r8, ror r3
   11934:	andeq	r2, r1, r8, ror r3
   11938:	andeq	r2, r1, r8, ror r3
   1193c:	andeq	r1, r1, r0, ror #22
   11940:	andeq	r2, r1, r8, ror r3
   11944:	andeq	r2, r1, r8, ror r3
   11948:	andeq	r2, r1, r8, ror r3
   1194c:	andeq	r1, r1, r0, ror fp
   11950:	andeq	r2, r1, r8, ror r3
   11954:	andeq	r2, r1, r8, ror r3
   11958:	andeq	r2, r1, r8, ror r3
   1195c:	andeq	r2, r1, r8, ror r3
   11960:	muleq	r1, r8, sp
   11964:	ldrdeq	r1, [r1], -ip
   11968:	andeq	r2, r1, r8, ror r3
   1196c:	andeq	r2, r1, r8, ror r3
   11970:	andeq	r1, r1, r0, lsl #24
   11974:	andeq	r2, r1, r8, ror r3
   11978:	andeq	r2, r1, r8, ror r3
   1197c:	andeq	r2, r1, r8, ror r3
   11980:	andeq	r2, r1, r8, ror r3
   11984:	andeq	r2, r1, r8, ror r3
   11988:	andeq	r2, r1, r8, ror r3
   1198c:	andeq	r2, r1, r8, ror r3
   11990:	andeq	r2, r1, r8, ror r3
   11994:	andeq	r2, r1, r8, ror r3
   11998:	strdeq	r1, [r1], -r4
   1199c:	andeq	r1, r1, r8, ror sp
   119a0:	andeq	r1, r1, ip, lsl #21
   119a4:	andeq	r1, r1, r8, lsl #27
   119a8:	andeq	r1, r1, ip, asr lr
   119ac:	strdeq	r1, [r1], -r4
   119b0:	andeq	r2, r1, r8, ror r3
   119b4:	muleq	r1, ip, sl
   119b8:	andeq	r1, r1, r0, lsl lr
   119bc:	andeq	r2, r1, r8, ror r3
   119c0:	andeq	r2, r1, r8, ror r3
   119c4:			; <UNDEFINED> instruction: 0x00011ab0
   119c8:	muleq	r1, r8, lr
   119cc:	andeq	r1, r1, r8, ror ip
   119d0:			; <UNDEFINED> instruction: 0x00011cbc
   119d4:	andeq	r2, r1, r8, ror r3
   119d8:	andeq	r2, r1, r8, ror r3
   119dc:			; <UNDEFINED> instruction: 0x00011eb8
   119e0:	andeq	r1, r1, ip, lsl sp
   119e4:	andeq	r1, r1, ip, asr sp
   119e8:	andeq	r2, r1, r8, ror r3
   119ec:	andeq	r1, r1, ip, asr #28
   119f0:	ldrdeq	r1, [r1], -r0
   119f4:	movw	r1, #57853	; 0xe1fd
   119f8:	mov	r0, #1
   119fc:	movt	r1, #2
   11a00:	b	11ec4 <__assert_fail@plt+0x888>
   11a04:	cmp	sl, #256	; 0x100
   11a08:	bne	11b0c <__assert_fail@plt+0x4d0>
   11a0c:	movw	r0, #57824	; 0xe1e0
   11a10:	movw	r1, #51773	; 0xca3d
   11a14:	mov	r2, #5
   11a18:	mov	r8, #0
   11a1c:	movt	r0, #2
   11a20:	movt	r1, #1
   11a24:	ldr	sl, [r0]
   11a28:	mov	r0, #0
   11a2c:	bl	113a8 <dcgettext@plt>
   11a30:	mvn	r1, #-2147483648	; 0x80000000
   11a34:	mov	r2, #1
   11a38:	mov	r3, #0
   11a3c:	stm	sp, {r1, r8}
   11a40:	movw	r1, #51900	; 0xcabc
   11a44:	str	r0, [sp, #12]
   11a48:	mov	r0, sl
   11a4c:	str	r8, [sp, #16]
   11a50:	movt	r1, #1
   11a54:	str	r1, [sp, #8]
   11a58:	bl	19dfc <__assert_fail@plt+0x87c0>
   11a5c:	movw	r1, #57712	; 0xe170
   11a60:	movt	r1, #2
   11a64:	str	r0, [r1]
   11a68:	movw	r0, #57888	; 0xe220
   11a6c:	mov	r1, #1
   11a70:	movt	r0, #2
   11a74:	strb	r1, [r0]
   11a78:	mov	r0, r9
   11a7c:	bl	154bc <__assert_fail@plt+0x3e80>
   11a80:	mov	r9, #0
   11a84:	str	r8, [fp, #-32]	; 0xffffffe0
   11a88:	b	118d4 <__assert_fail@plt+0x298>
   11a8c:	movw	r1, #57843	; 0xe1f3
   11a90:	mov	r0, #1
   11a94:	movt	r1, #2
   11a98:	b	11ec4 <__assert_fail@plt+0x888>
   11a9c:	movw	r0, #57824	; 0xe1e0
   11aa0:	movw	r1, #57856	; 0xe200
   11aa4:	movt	r0, #2
   11aa8:	movt	r1, #2
   11aac:	b	11b58 <__assert_fail@plt+0x51c>
   11ab0:	movw	r0, #57824	; 0xe1e0
   11ab4:	movw	r1, #47188	; 0xb854
   11ab8:	mov	r2, #5
   11abc:	mov	r8, #0
   11ac0:	movt	r0, #2
   11ac4:	movt	r1, #1
   11ac8:	ldr	sl, [r0]
   11acc:	mov	r0, #0
   11ad0:	bl	113a8 <dcgettext@plt>
   11ad4:	mvn	r1, #-2147483648	; 0x80000000
   11ad8:	mov	r2, #1
   11adc:	mov	r3, #0
   11ae0:	stm	sp, {r1, r8}
   11ae4:	movw	r1, #51900	; 0xcabc
   11ae8:	str	r0, [sp, #12]
   11aec:	mov	r0, sl
   11af0:	str	r8, [sp, #16]
   11af4:	movt	r1, #1
   11af8:	str	r1, [sp, #8]
   11afc:	bl	19dfc <__assert_fail@plt+0x87c0>
   11b00:	movw	r1, #57680	; 0xe150
   11b04:	movt	r1, #2
   11b08:	b	11d14 <__assert_fail@plt+0x6d8>
   11b0c:	movw	r0, #257	; 0x101
   11b10:	cmp	sl, r0
   11b14:	bne	12378 <__assert_fail@plt+0xd3c>
   11b18:	movw	r0, #57824	; 0xe1e0
   11b1c:	movt	r0, #2
   11b20:	ldr	r2, [r0]
   11b24:	cmp	r2, #0
   11b28:	beq	12330 <__assert_fail@plt+0xcf4>
   11b2c:	ldr	r0, [sp, #36]	; 0x24
   11b30:	mov	r1, #0
   11b34:	mov	r8, #0
   11b38:	bl	123dc <__assert_fail@plt+0xda0>
   11b3c:	cmp	r0, #0
   11b40:	bne	118d4 <__assert_fail@plt+0x298>
   11b44:	b	1233c <__assert_fail@plt+0xd00>
   11b48:	movw	r0, #57824	; 0xe1e0
   11b4c:	movw	r1, #57848	; 0xe1f8
   11b50:	movt	r0, #2
   11b54:	movt	r1, #2
   11b58:	ldr	r0, [r0]
   11b5c:	b	11c70 <__assert_fail@plt+0x634>
   11b60:	movw	r1, #57861	; 0xe205
   11b64:	mov	r0, #1
   11b68:	movt	r1, #2
   11b6c:	b	11ec4 <__assert_fail@plt+0x888>
   11b70:	movw	r1, #57864	; 0xe208
   11b74:	mov	r0, #1
   11b78:	mov	r2, #5
   11b7c:	mov	r8, #0
   11b80:	movt	r1, #2
   11b84:	strb	r0, [r1]
   11b88:	movw	r0, #57824	; 0xe1e0
   11b8c:	movw	r1, #47229	; 0xb87d
   11b90:	movt	r0, #2
   11b94:	movt	r1, #1
   11b98:	ldr	sl, [r0]
   11b9c:	mov	r0, #0
   11ba0:	bl	113a8 <dcgettext@plt>
   11ba4:	mvn	r1, #-2147483648	; 0x80000000
   11ba8:	mov	r2, #-2147483648	; 0x80000000
   11bac:	mvn	r3, #0
   11bb0:	stm	sp, {r1, r8}
   11bb4:	movw	r1, #51900	; 0xcabc
   11bb8:	str	r0, [sp, #12]
   11bbc:	mov	r0, sl
   11bc0:	str	r8, [sp, #16]
   11bc4:	movt	r1, #1
   11bc8:	str	r1, [sp, #8]
   11bcc:	bl	19dfc <__assert_fail@plt+0x87c0>
   11bd0:	movw	r1, #57692	; 0xe15c
   11bd4:	movt	r1, #2
   11bd8:	b	11d14 <__assert_fail@plt+0x6d8>
   11bdc:	movw	r0, #57881	; 0xe219
   11be0:	movw	r1, #57880	; 0xe218
   11be4:	mov	r8, #0
   11be8:	movt	r0, #2
   11bec:	movt	r1, #2
   11bf0:	strb	r8, [r0]
   11bf4:	mov	r0, #1
   11bf8:	strb	r0, [r1]
   11bfc:	b	118d4 <__assert_fail@plt+0x298>
   11c00:	movw	r1, #57883	; 0xe21b
   11c04:	mov	r0, #1
   11c08:	mov	r2, #5
   11c0c:	mov	r8, #0
   11c10:	movt	r1, #2
   11c14:	strb	r0, [r1]
   11c18:	movw	r0, #57824	; 0xe1e0
   11c1c:	movw	r1, #47347	; 0xb8f3
   11c20:	movt	r0, #2
   11c24:	movt	r1, #1
   11c28:	ldr	sl, [r0]
   11c2c:	mov	r0, #0
   11c30:	bl	113a8 <dcgettext@plt>
   11c34:	mvn	r1, #-2147483648	; 0x80000000
   11c38:	mov	r2, #1
   11c3c:	mov	r3, #0
   11c40:	stm	sp, {r1, r8}
   11c44:	movw	r1, #51900	; 0xcabc
   11c48:	str	r0, [sp, #12]
   11c4c:	mov	r0, #0
   11c50:	str	r8, [sp, #16]
   11c54:	movt	r1, #1
   11c58:	str	r0, [sp, #24]
   11c5c:	mov	r0, sl
   11c60:	str	r1, [sp, #8]
   11c64:	bl	19dfc <__assert_fail@plt+0x87c0>
   11c68:	movw	r1, #57700	; 0xe164
   11c6c:	movt	r1, #2
   11c70:	str	r0, [r1]
   11c74:	b	11ec8 <__assert_fail@plt+0x88c>
   11c78:	movw	r1, #57863	; 0xe207
   11c7c:	mov	r0, #1
   11c80:	mov	r8, #0
   11c84:	movt	r1, #2
   11c88:	strb	r0, [r1]
   11c8c:	movw	r0, #57824	; 0xe1e0
   11c90:	movt	r0, #2
   11c94:	ldr	r0, [r0]
   11c98:	cmp	r0, #0
   11c9c:	beq	118d4 <__assert_fail@plt+0x298>
   11ca0:	movw	r2, #57684	; 0xe154
   11ca4:	movw	r3, #57688	; 0xe158
   11ca8:	mov	r1, #110	; 0x6e
   11cac:	movt	r2, #2
   11cb0:	movt	r3, #2
   11cb4:	bl	12500 <__assert_fail@plt+0xec4>
   11cb8:	b	118d4 <__assert_fail@plt+0x298>
   11cbc:	movw	r0, #57824	; 0xe1e0
   11cc0:	movw	r1, #47270	; 0xb8a6
   11cc4:	mov	r2, #5
   11cc8:	mov	r8, #0
   11ccc:	movt	r0, #2
   11cd0:	movt	r1, #1
   11cd4:	ldr	sl, [r0]
   11cd8:	mov	r0, #0
   11cdc:	bl	113a8 <dcgettext@plt>
   11ce0:	mvn	r1, #-2147483648	; 0x80000000
   11ce4:	mov	r2, #0
   11ce8:	mov	r3, #0
   11cec:	stm	sp, {r1, r8}
   11cf0:	movw	r1, #51900	; 0xcabc
   11cf4:	str	r0, [sp, #12]
   11cf8:	mov	r0, sl
   11cfc:	str	r8, [sp, #16]
   11d00:	movt	r1, #1
   11d04:	str	r1, [sp, #8]
   11d08:	bl	19dfc <__assert_fail@plt+0x87c0>
   11d0c:	movw	r1, #57868	; 0xe20c
   11d10:	movt	r1, #2
   11d14:	str	r0, [r1]
   11d18:	b	118d4 <__assert_fail@plt+0x298>
   11d1c:	movw	r0, #57824	; 0xe1e0
   11d20:	mov	r1, #1
   11d24:	mov	r8, #0
   11d28:	movt	r0, #2
   11d2c:	str	r1, [sp, #28]
   11d30:	ldr	r0, [r0]
   11d34:	cmp	r0, #0
   11d38:	beq	11d54 <__assert_fail@plt+0x718>
   11d3c:	movw	r1, #57873	; 0xe211
   11d40:	movt	r1, #2
   11d44:	ldrb	r1, [r1]
   11d48:	cmp	r1, #0
   11d4c:	bne	11d54 <__assert_fail@plt+0x718>
   11d50:	bl	125bc <__assert_fail@plt+0xf80>
   11d54:	mov	r0, #1
   11d58:	b	11dec <__assert_fail@plt+0x7b0>
   11d5c:	movw	r1, #57881	; 0xe219
   11d60:	mov	r0, #1
   11d64:	movt	r1, #2
   11d68:	strb	r0, [r1]
   11d6c:	movw	r1, #57880	; 0xe218
   11d70:	movt	r1, #2
   11d74:	b	11ec4 <__assert_fail@plt+0x888>
   11d78:	movw	r1, #57842	; 0xe1f2
   11d7c:	mov	r0, #1
   11d80:	movt	r1, #2
   11d84:	b	11ec4 <__assert_fail@plt+0x888>
   11d88:	movw	r1, #57844	; 0xe1f4
   11d8c:	mov	r0, #1
   11d90:	movt	r1, #2
   11d94:	b	11ec4 <__assert_fail@plt+0x888>
   11d98:	movw	r1, #57876	; 0xe214
   11d9c:	mov	r0, #0
   11da0:	movt	r1, #2
   11da4:	str	r0, [r1]
   11da8:	movw	r0, #51900	; 0xcabc
   11dac:	movw	r1, #57696	; 0xe160
   11db0:	movt	r0, #1
   11db4:	movt	r1, #2
   11db8:	str	r0, [r1]
   11dbc:	movw	r1, #57873	; 0xe211
   11dc0:	mov	r0, #1
   11dc4:	movt	r1, #2
   11dc8:	strb	r0, [r1]
   11dcc:	movw	r0, #57824	; 0xe1e0
   11dd0:	movt	r0, #2
   11dd4:	ldr	r0, [r0]
   11dd8:	cmp	r0, #0
   11ddc:	beq	11de4 <__assert_fail@plt+0x7a8>
   11de0:	bl	125bc <__assert_fail@plt+0xf80>
   11de4:	mov	r0, #0
   11de8:	mov	r8, #0
   11dec:	str	r0, [sp, #20]
   11df0:	b	118d4 <__assert_fail@plt+0x298>
   11df4:	movw	r0, #57841	; 0xe1f1
   11df8:	mov	r1, #1
   11dfc:	movt	r0, #2
   11e00:	strb	r1, [r0]
   11e04:	movw	r0, #57840	; 0xe1f0
   11e08:	movt	r0, #2
   11e0c:	b	11eb0 <__assert_fail@plt+0x874>
   11e10:	movw	r0, #57824	; 0xe1e0
   11e14:	movt	r0, #2
   11e18:	ldr	r0, [r0]
   11e1c:	cmp	r0, #0
   11e20:	beq	11e3c <__assert_fail@plt+0x800>
   11e24:	movw	r2, #57672	; 0xe148
   11e28:	movw	r3, #57676	; 0xe14c
   11e2c:	mov	r1, #105	; 0x69
   11e30:	movt	r2, #2
   11e34:	movt	r3, #2
   11e38:	bl	12500 <__assert_fail@plt+0xec4>
   11e3c:	movw	r1, #57860	; 0xe204
   11e40:	mov	r0, #1
   11e44:	movt	r1, #2
   11e48:	b	11ec4 <__assert_fail@plt+0x888>
   11e4c:	movw	r1, #57882	; 0xe21a
   11e50:	mov	r0, #1
   11e54:	movt	r1, #2
   11e58:	b	11ec4 <__assert_fail@plt+0x888>
   11e5c:	movw	r0, #57824	; 0xe1e0
   11e60:	movt	r0, #2
   11e64:	ldr	r0, [r0]
   11e68:	cmp	r0, #0
   11e6c:	beq	11e88 <__assert_fail@plt+0x84c>
   11e70:	movw	r2, #57664	; 0xe140
   11e74:	movw	r3, #57668	; 0xe144
   11e78:	mov	r1, #101	; 0x65
   11e7c:	movt	r2, #2
   11e80:	movt	r3, #2
   11e84:	bl	12500 <__assert_fail@plt+0xec4>
   11e88:	movw	r1, #57852	; 0xe1fc
   11e8c:	mov	r0, #1
   11e90:	movt	r1, #2
   11e94:	b	11ec4 <__assert_fail@plt+0x888>
   11e98:	movw	r0, #57841	; 0xe1f1
   11e9c:	mov	r1, #1
   11ea0:	movt	r0, #2
   11ea4:	strb	r1, [r0]
   11ea8:	movw	r0, #57862	; 0xe206
   11eac:	movt	r0, #2
   11eb0:	strb	r1, [r0]
   11eb4:	b	11ec8 <__assert_fail@plt+0x88c>
   11eb8:	movw	r1, #57872	; 0xe210
   11ebc:	mov	r0, #1
   11ec0:	movt	r1, #2
   11ec4:	strb	r0, [r1]
   11ec8:	mov	r8, #0
   11ecc:	b	118d4 <__assert_fail@plt+0x298>
   11ed0:	movw	r0, #57824	; 0xe1e0
   11ed4:	movw	r1, #47302	; 0xb8c6
   11ed8:	mov	r2, #5
   11edc:	mov	r8, #0
   11ee0:	movt	r0, #2
   11ee4:	movt	r1, #1
   11ee8:	ldr	sl, [r0]
   11eec:	mov	r0, #0
   11ef0:	bl	113a8 <dcgettext@plt>
   11ef4:	mvn	r1, #-2147483648	; 0x80000000
   11ef8:	mov	r2, #1
   11efc:	mov	r3, #0
   11f00:	stm	sp, {r1, r8}
   11f04:	movw	r1, #51900	; 0xcabc
   11f08:	str	r0, [sp, #12]
   11f0c:	mov	r0, #1
   11f10:	str	r8, [sp, #16]
   11f14:	movt	r1, #1
   11f18:	str	r0, [sp, #28]
   11f1c:	mov	r0, sl
   11f20:	str	r1, [sp, #8]
   11f24:	bl	19dfc <__assert_fail@plt+0x87c0>
   11f28:	movw	r1, #57883	; 0xe21b
   11f2c:	movt	r1, #2
   11f30:	ldrb	r1, [r1]
   11f34:	cmp	r1, #0
   11f38:	movweq	r1, #57700	; 0xe164
   11f3c:	movteq	r1, #2
   11f40:	streq	r0, [r1]
   11f44:	mov	r0, #1
   11f48:	str	r0, [sp, #24]
   11f4c:	b	118d4 <__assert_fail@plt+0x298>
   11f50:	cmp	r9, #0
   11f54:	beq	11ffc <__assert_fail@plt+0x9c0>
   11f58:	movw	r1, #51773	; 0xca3d
   11f5c:	mov	r0, #0
   11f60:	mov	r2, #5
   11f64:	mov	r6, #0
   11f68:	movt	r1, #1
   11f6c:	bl	113a8 <dcgettext@plt>
   11f70:	mvn	r1, #-2147483648	; 0x80000000
   11f74:	mov	r2, #1
   11f78:	mov	r3, #0
   11f7c:	stm	sp, {r1, r6}
   11f80:	movw	r1, #51900	; 0xcabc
   11f84:	str	r0, [sp, #12]
   11f88:	mov	r0, r9
   11f8c:	str	r6, [sp, #16]
   11f90:	mov	r6, #1
   11f94:	movt	r1, #1
   11f98:	str	r1, [sp, #8]
   11f9c:	bl	19dfc <__assert_fail@plt+0x87c0>
   11fa0:	movw	r1, #57712	; 0xe170
   11fa4:	movt	r1, #2
   11fa8:	str	r0, [r1]
   11fac:	movw	r0, #57888	; 0xe220
   11fb0:	movt	r0, #2
   11fb4:	strb	r6, [r0]
   11fb8:	mov	sl, r0
   11fbc:	mov	r0, r9
   11fc0:	bl	154bc <__assert_fail@plt+0x3e80>
   11fc4:	b	12008 <__assert_fail@plt+0x9cc>
   11fc8:	movw	r6, #57888	; 0xe220
   11fcc:	mov	r0, #0
   11fd0:	mov	r7, #0
   11fd4:	movt	r6, #2
   11fd8:	str	r0, [sp, #20]
   11fdc:	mov	r0, #0
   11fe0:	str	r0, [sp, #24]
   11fe4:	mov	r0, #0
   11fe8:	mov	sl, r6
   11fec:	movw	r6, #57832	; 0xe1e8
   11ff0:	str	r0, [sp, #28]
   11ff4:	movt	r6, #2
   11ff8:	b	12020 <__assert_fail@plt+0x9e4>
   11ffc:	movw	r6, #57888	; 0xe220
   12000:	movt	r6, #2
   12004:	mov	sl, r6
   12008:	movw	r9, #57840	; 0xe1f0
   1200c:	movw	r6, #57832	; 0xe1e8
   12010:	movw	r8, #57848	; 0xe1f8
   12014:	movt	r9, #2
   12018:	movt	r6, #2
   1201c:	movt	r8, #2
   12020:	ldr	r0, [r8]
   12024:	cmp	r0, #0
   12028:	bne	12070 <__assert_fail@plt+0xa34>
   1202c:	movw	r0, #47437	; 0xb94d
   12030:	movt	r0, #1
   12034:	bl	11450 <getenv@plt>
   12038:	cmp	r0, #0
   1203c:	beq	12064 <__assert_fail@plt+0xa28>
   12040:	mov	r0, #2
   12044:	bl	155ac <__assert_fail@plt+0x3f70>
   12048:	movw	r2, #47468	; 0xb96c
   1204c:	movw	r1, #47453	; 0xb95d
   12050:	cmp	r0, #0
   12054:	movt	r2, #1
   12058:	movt	r1, #1
   1205c:	movne	r1, r2
   12060:	b	1206c <__assert_fail@plt+0xa30>
   12064:	movw	r1, #47468	; 0xb96c
   12068:	movt	r1, #1
   1206c:	str	r1, [r8]
   12070:	movw	r0, #47483	; 0xb97b
   12074:	movt	r0, #1
   12078:	bl	11450 <getenv@plt>
   1207c:	bl	18f00 <__assert_fail@plt+0x78c4>
   12080:	movw	r1, #57884	; 0xe21c
   12084:	movt	r1, #2
   12088:	str	r0, [r1]
   1208c:	ldrd	r0, [r6]
   12090:	orrs	r0, r0, r1
   12094:	moveq	r1, #0
   12098:	moveq	r0, #1
   1209c:	strdeq	r0, [r6]
   120a0:	movw	r0, #57862	; 0xe206
   120a4:	movt	r0, #2
   120a8:	ldrb	r8, [r0]
   120ac:	cmp	r8, #1
   120b0:	bne	120cc <__assert_fail@plt+0xa90>
   120b4:	ldrb	r0, [sl]
   120b8:	cmp	r0, #1
   120bc:	beq	12380 <__assert_fail@plt+0xd44>
   120c0:	ldrb	r0, [r9]
   120c4:	cmp	r0, #1
   120c8:	beq	1238c <__assert_fail@plt+0xd50>
   120cc:	ldr	r0, [sp, #28]
   120d0:	tst	r0, #1
   120d4:	beq	121a0 <__assert_fail@plt+0xb64>
   120d8:	ldr	r0, [sp, #24]
   120dc:	tst	r0, #1
   120e0:	beq	12120 <__assert_fail@plt+0xae4>
   120e4:	cmp	r8, #0
   120e8:	bne	120f8 <__assert_fail@plt+0xabc>
   120ec:	ldrb	r0, [sl]
   120f0:	cmp	r0, #1
   120f4:	bne	12190 <__assert_fail@plt+0xb54>
   120f8:	movw	r1, #57883	; 0xe21b
   120fc:	mov	r0, #1
   12100:	movt	r1, #2
   12104:	strb	r0, [r1]
   12108:	ldr	r1, [sp, #20]
   1210c:	tst	r1, #1
   12110:	movwne	r1, #57873	; 0xe211
   12114:	movtne	r1, #2
   12118:	strbne	r0, [r1]
   1211c:	b	121a0 <__assert_fail@plt+0xb64>
   12120:	movw	r0, #57873	; 0xe211
   12124:	movt	r0, #2
   12128:	ldrb	r1, [r0]
   1212c:	cmp	r1, #0
   12130:	ldreq	r1, [sp, #20]
   12134:	eoreq	r1, r1, #1
   12138:	tsteq	r1, #1
   1213c:	bne	121a0 <__assert_fail@plt+0xb64>
   12140:	cmp	r8, #0
   12144:	bne	12154 <__assert_fail@plt+0xb18>
   12148:	ldrb	r1, [sl]
   1214c:	cmp	r1, #1
   12150:	bne	121a0 <__assert_fail@plt+0xb64>
   12154:	movw	r1, #57883	; 0xe21b
   12158:	movt	r1, #2
   1215c:	ldrb	r1, [r1]
   12160:	cmp	r1, #0
   12164:	bne	12198 <__assert_fail@plt+0xb5c>
   12168:	movw	r2, #57861	; 0xe205
   1216c:	mov	r1, #1
   12170:	movt	r2, #2
   12174:	strb	r1, [r2]
   12178:	movw	r2, #57876	; 0xe214
   1217c:	movt	r2, #2
   12180:	ldr	r2, [r2]
   12184:	cmp	r2, #1
   12188:	strbge	r1, [r0]
   1218c:	b	121a0 <__assert_fail@plt+0xb64>
   12190:	movw	r0, #57861	; 0xe205
   12194:	movt	r0, #2
   12198:	mov	r1, #1
   1219c:	strb	r1, [r0]
   121a0:	movw	r9, #57800	; 0xe1c8
   121a4:	movt	r9, #2
   121a8:	ldr	r6, [r9]
   121ac:	cmp	r6, r5
   121b0:	bge	121e0 <__assert_fail@plt+0xba4>
   121b4:	ldr	r1, [sp, #32]
   121b8:	sub	r2, r5, r6
   121bc:	add	r0, r4, r7, lsl #2
   121c0:	lsl	r2, r2, #2
   121c4:	add	r1, r1, r6, lsl #2
   121c8:	bl	11384 <memcpy@plt>
   121cc:	add	r6, r6, #1
   121d0:	add	r7, r7, #1
   121d4:	cmp	r5, r6
   121d8:	bne	121cc <__assert_fail@plt+0xb90>
   121dc:	str	r5, [r9]
   121e0:	cmp	r7, #0
   121e4:	beq	12218 <__assert_fail@plt+0xbdc>
   121e8:	cmp	r8, #0
   121ec:	beq	121fc <__assert_fail@plt+0xbc0>
   121f0:	mov	r0, r7
   121f4:	mov	r1, r4
   121f8:	b	12220 <__assert_fail@plt+0xbe4>
   121fc:	mov	r0, #1
   12200:	mov	r1, r4
   12204:	bl	129b8 <__assert_fail@plt+0x137c>
   12208:	add	r4, r4, #4
   1220c:	subs	r7, r7, #1
   12210:	bne	121fc <__assert_fail@plt+0xbc0>
   12214:	b	12224 <__assert_fail@plt+0xbe8>
   12218:	mov	r0, #0
   1221c:	mov	r1, #0
   12220:	bl	129b8 <__assert_fail@plt+0x137c>
   12224:	movw	r0, #57920	; 0xe240
   12228:	movt	r0, #2
   1222c:	ldr	r0, [r0]
   12230:	bl	154bc <__assert_fail@plt+0x3e80>
   12234:	movw	r0, #57924	; 0xe244
   12238:	movt	r0, #2
   1223c:	ldr	r0, [r0]
   12240:	bl	154bc <__assert_fail@plt+0x3e80>
   12244:	movw	r0, #57932	; 0xe24c
   12248:	movt	r0, #2
   1224c:	ldr	r0, [r0]
   12250:	bl	154bc <__assert_fail@plt+0x3e80>
   12254:	movw	r0, #57964	; 0xe26c
   12258:	movt	r0, #2
   1225c:	ldr	r0, [r0]
   12260:	bl	154bc <__assert_fail@plt+0x3e80>
   12264:	movw	r0, #57968	; 0xe270
   12268:	movt	r0, #2
   1226c:	ldr	r0, [r0]
   12270:	bl	154bc <__assert_fail@plt+0x3e80>
   12274:	movw	r0, #57972	; 0xe274
   12278:	movt	r0, #2
   1227c:	ldr	r0, [r0]
   12280:	bl	154bc <__assert_fail@plt+0x3e80>
   12284:	movw	r0, #57889	; 0xe221
   12288:	movt	r0, #2
   1228c:	ldrb	r0, [r0]
   12290:	cmp	r0, #1
   12294:	bne	122b0 <__assert_fail@plt+0xc74>
   12298:	movw	r0, #57816	; 0xe1d8
   1229c:	movt	r0, #2
   122a0:	ldr	r0, [r0]
   122a4:	bl	15318 <__assert_fail@plt+0x3cdc>
   122a8:	cmn	r0, #1
   122ac:	beq	123b0 <__assert_fail@plt+0xd74>
   122b0:	movw	r0, #57890	; 0xe222
   122b4:	movt	r0, #2
   122b8:	ldrb	r0, [r0]
   122bc:	sub	sp, fp, #28
   122c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122c4:	cmn	sl, #3
   122c8:	bne	12320 <__assert_fail@plt+0xce4>
   122cc:	movw	r0, #57720	; 0xe178
   122d0:	movw	r2, #47422	; 0xb93e
   122d4:	mov	r1, #0
   122d8:	movw	r7, #47409	; 0xb931
   122dc:	movt	r0, #2
   122e0:	movt	r2, #1
   122e4:	str	r1, [sp, #8]
   122e8:	movw	r1, #47392	; 0xb920
   122ec:	movt	r7, #1
   122f0:	movt	r1, #1
   122f4:	ldr	r3, [r0]
   122f8:	movw	r0, #57820	; 0xe1dc
   122fc:	str	r2, [sp, #4]
   12300:	movw	r2, #47395	; 0xb923
   12304:	str	r7, [sp]
   12308:	movt	r0, #2
   1230c:	movt	r2, #1
   12310:	ldr	r0, [r0]
   12314:	bl	19778 <__assert_fail@plt+0x813c>
   12318:	mov	r0, #0
   1231c:	bl	114c8 <exit@plt>
   12320:	cmn	sl, #2
   12324:	bne	12378 <__assert_fail@plt+0xd3c>
   12328:	mov	r0, #0
   1232c:	bl	125f0 <__assert_fail@plt+0xfb4>
   12330:	movw	r1, #47116	; 0xb80c
   12334:	movt	r1, #1
   12338:	b	12394 <__assert_fail@plt+0xd58>
   1233c:	movw	r1, #47166	; 0xb83e
   12340:	mov	r0, #0
   12344:	mov	r2, #5
   12348:	movt	r1, #1
   1234c:	bl	113a8 <dcgettext@plt>
   12350:	mov	r4, r0
   12354:	movw	r0, #57824	; 0xe1e0
   12358:	movt	r0, #2
   1235c:	ldr	r0, [r0]
   12360:	bl	18d20 <__assert_fail@plt+0x76e4>
   12364:	mov	r3, r0
   12368:	mov	r0, #1
   1236c:	mov	r1, #0
   12370:	mov	r2, r4
   12374:	bl	11444 <error@plt>
   12378:	mov	r0, #1
   1237c:	bl	125f0 <__assert_fail@plt+0xfb4>
   12380:	movw	r1, #47486	; 0xb97e
   12384:	movt	r1, #1
   12388:	b	12394 <__assert_fail@plt+0xd58>
   1238c:	movw	r1, #47545	; 0xb9b9
   12390:	movt	r1, #1
   12394:	mov	r0, #0
   12398:	mov	r2, #5
   1239c:	bl	113a8 <dcgettext@plt>
   123a0:	mov	r2, r0
   123a4:	mov	r0, #1
   123a8:	mov	r1, #0
   123ac:	bl	11444 <error@plt>
   123b0:	bl	11510 <__errno_location@plt>
   123b4:	movw	r1, #47606	; 0xb9f6
   123b8:	ldr	r4, [r0]
   123bc:	mov	r0, #0
   123c0:	mov	r2, #5
   123c4:	movt	r1, #1
   123c8:	bl	113a8 <dcgettext@plt>
   123cc:	mov	r2, r0
   123d0:	mov	r0, #1
   123d4:	mov	r1, r4
   123d8:	bl	11444 <error@plt>
   123dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   123e0:	add	fp, sp, #24
   123e4:	sub	sp, sp, #32
   123e8:	movw	r6, #51900	; 0xcabc
   123ec:	mvn	r5, #0
   123f0:	mov	r8, r1
   123f4:	mov	r9, r0
   123f8:	mov	r7, r2
   123fc:	mov	r0, r2
   12400:	add	r1, sp, #28
   12404:	add	r3, sp, #16
   12408:	mov	r2, #10
   1240c:	movt	r6, #1
   12410:	str	r5, [sp, #12]
   12414:	str	r5, [sp, #8]
   12418:	str	r6, [sp]
   1241c:	bl	1aa50 <__assert_fail@plt+0x9414>
   12420:	mvn	r1, #2
   12424:	tst	r0, r1
   12428:	bne	124e8 <__assert_fail@plt+0xeac>
   1242c:	ldr	r3, [sp, #28]
   12430:	mov	r4, #0
   12434:	cmp	r3, r7
   12438:	ldrne	r0, [sp, #16]
   1243c:	ldrne	r1, [sp, #20]
   12440:	orrsne	r2, r0, r1
   12444:	bne	12454 <__assert_fail@plt+0xe18>
   12448:	mov	r0, r4
   1244c:	sub	sp, fp, #24
   12450:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12454:	ldrb	r2, [r3]
   12458:	cmp	r2, #58	; 0x3a
   1245c:	bne	124b4 <__assert_fail@plt+0xe78>
   12460:	add	r5, r3, #1
   12464:	add	r1, sp, #28
   12468:	add	r3, sp, #8
   1246c:	mov	r2, #10
   12470:	str	r6, [sp]
   12474:	mov	r0, r5
   12478:	bl	1aa50 <__assert_fail@plt+0x9414>
   1247c:	cmp	r0, #0
   12480:	bne	124e8 <__assert_fail@plt+0xeac>
   12484:	ldr	r2, [sp, #28]
   12488:	cmp	r5, r2
   1248c:	beq	12448 <__assert_fail@plt+0xe0c>
   12490:	ldr	r0, [sp, #16]
   12494:	ldr	r5, [sp, #8]
   12498:	ldr	r1, [sp, #20]
   1249c:	ldr	r3, [sp, #12]
   124a0:	subs	r7, r5, r0
   124a4:	sbcs	r7, r3, r1
   124a8:	bcc	12448 <__assert_fail@plt+0xe0c>
   124ac:	ldrb	r2, [r2]
   124b0:	b	124b8 <__assert_fail@plt+0xe7c>
   124b4:	mvn	r3, #0
   124b8:	cmp	r2, #0
   124bc:	bne	12448 <__assert_fail@plt+0xe0c>
   124c0:	movw	r2, #57704	; 0xe168
   124c4:	movw	r7, #57832	; 0xe1e8
   124c8:	mov	r4, #1
   124cc:	movt	r7, #2
   124d0:	movt	r2, #2
   124d4:	str	r5, [r2]
   124d8:	str	r0, [r7]
   124dc:	str	r3, [r2, #4]
   124e0:	str	r1, [r7, #4]
   124e4:	b	12448 <__assert_fail@plt+0xe0c>
   124e8:	movw	r3, #52520	; 0xcd28
   124ec:	mov	r1, r9
   124f0:	mov	r2, r8
   124f4:	str	r7, [sp]
   124f8:	movt	r3, #1
   124fc:	bl	1a98c <__assert_fail@plt+0x9350>
   12500:	push	{r4, r5, r6, r7, fp, lr}
   12504:	add	fp, sp, #16
   12508:	sub	sp, sp, #8
   1250c:	mov	r5, r0
   12510:	ldrb	r0, [r0]
   12514:	mov	r4, r1
   12518:	mov	r6, r3
   1251c:	sub	r1, r0, #48	; 0x30
   12520:	cmp	r1, #10
   12524:	strbcs	r0, [r2]
   12528:	ldrbcs	r0, [r5, #1]!
   1252c:	cmp	r0, #0
   12530:	beq	1256c <__assert_fail@plt+0xf30>
   12534:	movw	r0, #51900	; 0xcabc
   12538:	add	r3, sp, #4
   1253c:	mov	r1, #0
   12540:	mov	r2, #10
   12544:	movt	r0, #1
   12548:	str	r0, [sp]
   1254c:	mov	r0, r5
   12550:	bl	1a454 <__assert_fail@plt+0x8e18>
   12554:	cmp	r0, #0
   12558:	bne	12574 <__assert_fail@plt+0xf38>
   1255c:	ldr	r0, [sp, #4]
   12560:	cmp	r0, #0
   12564:	ble	12574 <__assert_fail@plt+0xf38>
   12568:	str	r0, [r6]
   1256c:	sub	sp, fp, #16
   12570:	pop	{r4, r5, r6, r7, fp, pc}
   12574:	bl	11510 <__errno_location@plt>
   12578:	movw	r1, #51816	; 0xca68
   1257c:	ldr	r6, [r0]
   12580:	mov	r0, #0
   12584:	mov	r2, #5
   12588:	movt	r1, #1
   1258c:	bl	113a8 <dcgettext@plt>
   12590:	mov	r7, r0
   12594:	mov	r0, r5
   12598:	bl	18d20 <__assert_fail@plt+0x76e4>
   1259c:	str	r0, [sp]
   125a0:	mov	r0, #0
   125a4:	mov	r1, r6
   125a8:	mov	r2, r7
   125ac:	mov	r3, r4
   125b0:	bl	11444 <error@plt>
   125b4:	mov	r0, #1
   125b8:	bl	125f0 <__assert_fail@plt+0xfb4>
   125bc:	push	{r4, sl, fp, lr}
   125c0:	add	fp, sp, #8
   125c4:	mov	r4, r0
   125c8:	bl	114e0 <strlen@plt>
   125cc:	cmn	r0, #1
   125d0:	movwgt	r1, #57696	; 0xe160
   125d4:	movtgt	r1, #2
   125d8:	strgt	r4, [r1]
   125dc:	movwgt	r1, #57876	; 0xe214
   125e0:	movtgt	r1, #2
   125e4:	strgt	r0, [r1]
   125e8:	popgt	{r4, sl, fp, pc}
   125ec:	bl	13c64 <__assert_fail@plt+0x2628>
   125f0:	push	{fp, lr}
   125f4:	mov	fp, sp
   125f8:	sub	sp, sp, #56	; 0x38
   125fc:	mov	r8, r0
   12600:	cmp	r0, #0
   12604:	bne	12978 <__assert_fail@plt+0x133c>
   12608:	movw	r1, #47660	; 0xba2c
   1260c:	mov	r0, #0
   12610:	mov	r2, #5
   12614:	movt	r1, #1
   12618:	bl	113a8 <dcgettext@plt>
   1261c:	mov	r1, r0
   12620:	movw	r0, #58024	; 0xe2a8
   12624:	movt	r0, #2
   12628:	ldr	r2, [r0]
   1262c:	mov	r0, #1
   12630:	bl	11540 <__printf_chk@plt>
   12634:	movw	r1, #47693	; 0xba4d
   12638:	mov	r0, #0
   1263c:	mov	r2, #5
   12640:	movt	r1, #1
   12644:	bl	113a8 <dcgettext@plt>
   12648:	movw	r9, #57820	; 0xe1dc
   1264c:	movt	r9, #2
   12650:	ldr	r1, [r9]
   12654:	bl	112f4 <fputs_unlocked@plt>
   12658:	movw	r1, #52022	; 0xcb36
   1265c:	mov	r0, #0
   12660:	mov	r2, #5
   12664:	movt	r1, #1
   12668:	bl	113a8 <dcgettext@plt>
   1266c:	ldr	r1, [r9]
   12670:	bl	112f4 <fputs_unlocked@plt>
   12674:	movw	r1, #52078	; 0xcb6e
   12678:	mov	r0, #0
   1267c:	mov	r2, #5
   12680:	movt	r1, #1
   12684:	bl	113a8 <dcgettext@plt>
   12688:	ldr	r1, [r9]
   1268c:	bl	112f4 <fputs_unlocked@plt>
   12690:	movw	r1, #47738	; 0xba7a
   12694:	mov	r0, #0
   12698:	mov	r2, #5
   1269c:	movt	r1, #1
   126a0:	bl	113a8 <dcgettext@plt>
   126a4:	ldr	r1, [r9]
   126a8:	bl	112f4 <fputs_unlocked@plt>
   126ac:	movw	r1, #48072	; 0xbbc8
   126b0:	mov	r0, #0
   126b4:	mov	r2, #5
   126b8:	movt	r1, #1
   126bc:	bl	113a8 <dcgettext@plt>
   126c0:	ldr	r1, [r9]
   126c4:	bl	112f4 <fputs_unlocked@plt>
   126c8:	movw	r1, #48342	; 0xbcd6
   126cc:	mov	r0, #0
   126d0:	mov	r2, #5
   126d4:	movt	r1, #1
   126d8:	bl	113a8 <dcgettext@plt>
   126dc:	ldr	r1, [r9]
   126e0:	bl	112f4 <fputs_unlocked@plt>
   126e4:	movw	r1, #48742	; 0xbe66
   126e8:	mov	r0, #0
   126ec:	mov	r2, #5
   126f0:	movt	r1, #1
   126f4:	bl	113a8 <dcgettext@plt>
   126f8:	ldr	r1, [r9]
   126fc:	bl	112f4 <fputs_unlocked@plt>
   12700:	movw	r1, #49169	; 0xc011
   12704:	mov	r0, #0
   12708:	mov	r2, #5
   1270c:	movt	r1, #1
   12710:	bl	113a8 <dcgettext@plt>
   12714:	ldr	r1, [r9]
   12718:	bl	112f4 <fputs_unlocked@plt>
   1271c:	movw	r1, #49389	; 0xc0ed
   12720:	mov	r0, #0
   12724:	mov	r2, #5
   12728:	movt	r1, #1
   1272c:	bl	113a8 <dcgettext@plt>
   12730:	ldr	r1, [r9]
   12734:	bl	112f4 <fputs_unlocked@plt>
   12738:	movw	r1, #49533	; 0xc17d
   1273c:	mov	r0, #0
   12740:	mov	r2, #5
   12744:	movt	r1, #1
   12748:	bl	113a8 <dcgettext@plt>
   1274c:	ldr	r1, [r9]
   12750:	bl	112f4 <fputs_unlocked@plt>
   12754:	movw	r1, #49879	; 0xc2d7
   12758:	mov	r0, #0
   1275c:	mov	r2, #5
   12760:	movt	r1, #1
   12764:	bl	113a8 <dcgettext@plt>
   12768:	ldr	r1, [r9]
   1276c:	bl	112f4 <fputs_unlocked@plt>
   12770:	movw	r1, #50132	; 0xc3d4
   12774:	mov	r0, #0
   12778:	mov	r2, #5
   1277c:	movt	r1, #1
   12780:	bl	113a8 <dcgettext@plt>
   12784:	ldr	r1, [r9]
   12788:	bl	112f4 <fputs_unlocked@plt>
   1278c:	movw	r1, #50458	; 0xc51a
   12790:	mov	r0, #0
   12794:	mov	r2, #5
   12798:	movt	r1, #1
   1279c:	bl	113a8 <dcgettext@plt>
   127a0:	ldr	r1, [r9]
   127a4:	bl	112f4 <fputs_unlocked@plt>
   127a8:	movw	r1, #50694	; 0xc606
   127ac:	mov	r0, #0
   127b0:	mov	r2, #5
   127b4:	movt	r1, #1
   127b8:	bl	113a8 <dcgettext@plt>
   127bc:	ldr	r1, [r9]
   127c0:	bl	112f4 <fputs_unlocked@plt>
   127c4:	movw	r1, #50798	; 0xc66e
   127c8:	mov	r0, #0
   127cc:	mov	r2, #5
   127d0:	movt	r1, #1
   127d4:	bl	113a8 <dcgettext@plt>
   127d8:	ldr	r1, [r9]
   127dc:	bl	112f4 <fputs_unlocked@plt>
   127e0:	movw	r1, #51199	; 0xc7ff
   127e4:	mov	r0, #0
   127e8:	mov	r2, #5
   127ec:	movt	r1, #1
   127f0:	bl	113a8 <dcgettext@plt>
   127f4:	ldr	r1, [r9]
   127f8:	bl	112f4 <fputs_unlocked@plt>
   127fc:	movw	r1, #51414	; 0xc8d6
   12800:	mov	r0, #0
   12804:	mov	r2, #5
   12808:	movt	r1, #1
   1280c:	bl	113a8 <dcgettext@plt>
   12810:	ldr	r1, [r9]
   12814:	bl	112f4 <fputs_unlocked@plt>
   12818:	movw	r1, #51459	; 0xc903
   1281c:	mov	r0, #0
   12820:	mov	r2, #5
   12824:	movt	r1, #1
   12828:	bl	113a8 <dcgettext@plt>
   1282c:	ldr	r1, [r9]
   12830:	bl	112f4 <fputs_unlocked@plt>
   12834:	movw	r0, #52952	; 0xced8
   12838:	mov	r6, sp
   1283c:	movt	r0, #1
   12840:	mov	r1, r6
   12844:	ldm	r0!, {r2, r3, r4, r5}
   12848:	stmia	r1!, {r2, r3, r4, r5}
   1284c:	ldm	r0!, {r2, r3, r4, r5, r7}
   12850:	stmia	r1!, {r2, r3, r4, r5, r7}
   12854:	ldm	r0, {r2, r3, r4, r5, r7}
   12858:	stm	r1, {r2, r3, r4, r5, r7}
   1285c:	movw	r1, #52153	; 0xcbb9
   12860:	movw	r5, #47392	; 0xb920
   12864:	movt	r1, #1
   12868:	movt	r5, #1
   1286c:	mov	r0, r5
   12870:	bl	11318 <strcmp@plt>
   12874:	cmp	r0, #0
   12878:	ldrne	r1, [r6, #8]!
   1287c:	cmpne	r1, #0
   12880:	bne	1286c <__assert_fail@plt+0x1230>
   12884:	movw	r1, #52248	; 0xcc18
   12888:	ldr	r6, [r6, #4]
   1288c:	mov	r0, #0
   12890:	mov	r2, #5
   12894:	movt	r1, #1
   12898:	bl	113a8 <dcgettext@plt>
   1289c:	movw	r2, #47395	; 0xb923
   128a0:	movw	r3, #52271	; 0xcc2f
   128a4:	mov	r1, r0
   128a8:	mov	r0, #1
   128ac:	movt	r2, #1
   128b0:	movt	r3, #1
   128b4:	bl	11540 <__printf_chk@plt>
   128b8:	cmp	r6, #0
   128bc:	mov	r0, #5
   128c0:	mov	r1, #0
   128c4:	moveq	r6, r5
   128c8:	bl	115a0 <setlocale@plt>
   128cc:	cmp	r0, #0
   128d0:	beq	12908 <__assert_fail@plt+0x12cc>
   128d4:	movw	r1, #52311	; 0xcc57
   128d8:	mov	r2, #3
   128dc:	movt	r1, #1
   128e0:	bl	1160c <strncmp@plt>
   128e4:	cmp	r0, #0
   128e8:	beq	12908 <__assert_fail@plt+0x12cc>
   128ec:	movw	r1, #52315	; 0xcc5b
   128f0:	mov	r0, #0
   128f4:	mov	r2, #5
   128f8:	movt	r1, #1
   128fc:	bl	113a8 <dcgettext@plt>
   12900:	ldr	r1, [r9]
   12904:	bl	112f4 <fputs_unlocked@plt>
   12908:	movw	r1, #52386	; 0xcca2
   1290c:	mov	r0, #0
   12910:	mov	r2, #5
   12914:	movt	r1, #1
   12918:	bl	113a8 <dcgettext@plt>
   1291c:	movw	r2, #52271	; 0xcc2f
   12920:	mov	r1, r0
   12924:	mov	r0, #1
   12928:	mov	r3, r5
   1292c:	movt	r2, #1
   12930:	bl	11540 <__printf_chk@plt>
   12934:	movw	r1, #52413	; 0xccbd
   12938:	mov	r0, #0
   1293c:	mov	r2, #5
   12940:	movt	r1, #1
   12944:	bl	113a8 <dcgettext@plt>
   12948:	mov	r1, r0
   1294c:	movw	r0, #52181	; 0xcbd5
   12950:	movw	r3, #51900	; 0xcabc
   12954:	cmp	r6, r5
   12958:	mov	r2, r6
   1295c:	movt	r0, #1
   12960:	movt	r3, #1
   12964:	moveq	r3, r0
   12968:	mov	r0, #1
   1296c:	bl	11540 <__printf_chk@plt>
   12970:	mov	r0, r8
   12974:	bl	114c8 <exit@plt>
   12978:	movw	r0, #57808	; 0xe1d0
   1297c:	movw	r1, #47621	; 0xba05
   12980:	mov	r2, #5
   12984:	movt	r0, #2
   12988:	movt	r1, #1
   1298c:	ldr	r5, [r0]
   12990:	mov	r0, #0
   12994:	bl	113a8 <dcgettext@plt>
   12998:	mov	r2, r0
   1299c:	movw	r0, #58024	; 0xe2a8
   129a0:	mov	r1, #1
   129a4:	movt	r0, #2
   129a8:	ldr	r3, [r0]
   129ac:	mov	r0, r5
   129b0:	bl	11564 <__fprintf_chk@plt>
   129b4:	b	12970 <__assert_fail@plt+0x1334>
   129b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129bc:	add	fp, sp, #28
   129c0:	sub	sp, sp, #36	; 0x24
   129c4:	mov	r5, r0
   129c8:	movw	r0, #57680	; 0xe150
   129cc:	movw	r2, #57908	; 0xe234
   129d0:	movw	r3, #57880	; 0xe218
   129d4:	mov	r4, r1
   129d8:	movt	r0, #2
   129dc:	movt	r2, #2
   129e0:	movt	r3, #2
   129e4:	ldr	r0, [r0]
   129e8:	sub	r1, r0, #10
   129ec:	cmp	r1, #0
   129f0:	str	r1, [r2]
   129f4:	ble	12a08 <__assert_fail@plt+0x13cc>
   129f8:	ldrb	r2, [r3]
   129fc:	cmp	r2, #1
   12a00:	beq	12a1c <__assert_fail@plt+0x13e0>
   12a04:	b	12a2c <__assert_fail@plt+0x13f0>
   12a08:	movw	r1, #57881	; 0xe219
   12a0c:	mov	r2, #1
   12a10:	movt	r1, #2
   12a14:	strb	r2, [r3]
   12a18:	strb	r2, [r1]
   12a1c:	movw	r1, #57908	; 0xe234
   12a20:	movt	r1, #2
   12a24:	str	r0, [r1]
   12a28:	mov	r1, r0
   12a2c:	movw	r0, #57844	; 0xe1f4
   12a30:	movt	r0, #2
   12a34:	ldrb	r0, [r0]
   12a38:	cmp	r0, #1
   12a3c:	bne	12a54 <__assert_fail@plt+0x1418>
   12a40:	add	r0, r1, r1, lsr #31
   12a44:	movw	r1, #57908	; 0xe234
   12a48:	movt	r1, #2
   12a4c:	asr	r0, r0, #1
   12a50:	str	r0, [r1]
   12a54:	movw	r0, #57862	; 0xe206
   12a58:	cmp	r5, #0
   12a5c:	movt	r0, #2
   12a60:	beq	12a84 <__assert_fail@plt+0x1448>
   12a64:	ldrb	r0, [r0]
   12a68:	mov	r1, #0
   12a6c:	cmp	r0, #1
   12a70:	movweq	r0, #57712	; 0xe170
   12a74:	moveq	r1, #1
   12a78:	movteq	r0, #2
   12a7c:	streq	r5, [r0]
   12a80:	b	12a8c <__assert_fail@plt+0x1450>
   12a84:	mov	r1, #0
   12a88:	strb	r1, [r0]
   12a8c:	movw	r0, #57841	; 0xe1f1
   12a90:	movw	r9, #57883	; 0xe21b
   12a94:	movw	r7, #57873	; 0xe211
   12a98:	movw	lr, #57876	; 0xe214
   12a9c:	movt	r0, #2
   12aa0:	movt	r9, #2
   12aa4:	movt	r7, #2
   12aa8:	movt	lr, #2
   12aac:	ldrb	r0, [r0]
   12ab0:	cmp	r0, #0
   12ab4:	movweq	r2, #57842	; 0xe1f2
   12ab8:	moveq	r0, #1
   12abc:	movteq	r2, #2
   12ac0:	strbeq	r0, [r2]
   12ac4:	movw	r0, #57712	; 0xe170
   12ac8:	movw	r2, #57861	; 0xe205
   12acc:	movt	r0, #2
   12ad0:	movt	r2, #2
   12ad4:	ldr	r0, [r0]
   12ad8:	cmp	r0, #2
   12adc:	blt	12b44 <__assert_fail@plt+0x1508>
   12ae0:	ldrb	r3, [r7]
   12ae4:	ldrb	r2, [r2]
   12ae8:	cmp	r3, #0
   12aec:	beq	12b5c <__assert_fail@plt+0x1520>
   12af0:	ldr	r3, [lr]
   12af4:	cmp	r3, #1
   12af8:	bne	12b24 <__assert_fail@plt+0x14e8>
   12afc:	eors	r7, r2, #1
   12b00:	beq	12b24 <__assert_fail@plt+0x14e8>
   12b04:	movw	r7, #57696	; 0xe160
   12b08:	movt	r7, #2
   12b0c:	ldr	r6, [r7]
   12b10:	ldrb	r6, [r6]
   12b14:	cmp	r6, #9
   12b18:	movweq	r6, #51901	; 0xcabd
   12b1c:	movteq	r6, #1
   12b20:	streq	r6, [r7]
   12b24:	mov	r7, #1
   12b28:	cmp	r3, #1
   12b2c:	strb	r7, [r9]
   12b30:	bne	12b9c <__assert_fail@plt+0x1560>
   12b34:	movw	r3, #57696	; 0xe160
   12b38:	movt	r3, #2
   12b3c:	ldr	r3, [r3]
   12b40:	b	12b90 <__assert_fail@plt+0x1554>
   12b44:	movw	r7, #57841	; 0xe1f1
   12b48:	ldrb	r2, [r2]
   12b4c:	mov	r3, #1
   12b50:	movt	r7, #2
   12b54:	strb	r3, [r7]
   12b58:	b	12bbc <__assert_fail@plt+0x1580>
   12b5c:	mov	r3, #1
   12b60:	cmp	r2, #0
   12b64:	strb	r3, [r7]
   12b68:	movw	r7, #51899	; 0xcabb
   12b6c:	str	r3, [lr]
   12b70:	strb	r3, [r9]
   12b74:	movw	r3, #51901	; 0xcabd
   12b78:	movt	r7, #1
   12b7c:	movt	r3, #1
   12b80:	movne	r3, r7
   12b84:	movw	r7, #57696	; 0xe160
   12b88:	movt	r7, #2
   12b8c:	str	r3, [r7]
   12b90:	ldrb	r3, [r3]
   12b94:	cmp	r3, #9
   12b98:	beq	12bac <__assert_fail@plt+0x1570>
   12b9c:	movw	r3, #57852	; 0xe1fc
   12ba0:	mov	r7, #1
   12ba4:	movt	r3, #2
   12ba8:	strb	r7, [r3]
   12bac:	movw	r3, #57860	; 0xe204
   12bb0:	mov	r7, #1
   12bb4:	movt	r3, #2
   12bb8:	strb	r7, [r3]
   12bbc:	cmp	r2, #0
   12bc0:	mov	r3, #0
   12bc4:	movne	r2, #0
   12bc8:	strbne	r2, [r9]
   12bcc:	movw	r2, #57863	; 0xe207
   12bd0:	movt	r2, #2
   12bd4:	ldrb	ip, [r2]
   12bd8:	movw	r2, #57716	; 0xe174
   12bdc:	movt	r2, #2
   12be0:	cmp	ip, #1
   12be4:	bne	12c48 <__assert_fail@plt+0x160c>
   12be8:	movw	r3, #57692	; 0xe15c
   12bec:	movw	r7, #57684	; 0xe154
   12bf0:	movt	r3, #2
   12bf4:	movt	r7, #2
   12bf8:	ldr	r3, [r3]
   12bfc:	ldrb	r7, [r7]
   12c00:	str	r3, [r2]
   12c04:	movw	r3, #57688	; 0xe158
   12c08:	cmp	r7, #9
   12c0c:	movt	r3, #2
   12c10:	ldr	r3, [r3]
   12c14:	bne	12c2c <__assert_fail@plt+0x15f0>
   12c18:	asr	r7, r3, #31
   12c1c:	add	r3, r3, r7, lsr #29
   12c20:	bic	r3, r3, #7
   12c24:	add	r3, r3, #8
   12c28:	b	12c30 <__assert_fail@plt+0x15f4>
   12c2c:	add	r3, r3, #1
   12c30:	movw	r7, #57912	; 0xe238
   12c34:	cmp	r1, #0
   12c38:	movt	r7, #2
   12c3c:	movne	r1, r3
   12c40:	str	r3, [r7]
   12c44:	mov	r3, r1
   12c48:	ldr	r1, [lr]
   12c4c:	sub	r7, r0, #1
   12c50:	cmn	r1, #1
   12c54:	ble	12c74 <__assert_fail@plt+0x1638>
   12c58:	cmp	r1, #0
   12c5c:	beq	12cd0 <__assert_fail@plt+0x1694>
   12c60:	cmp	r0, #0
   12c64:	ble	12c9c <__assert_fail@plt+0x1660>
   12c68:	mvn	r6, #-2147483648	; 0x80000000
   12c6c:	udiv	r2, r6, r1
   12c70:	b	12c90 <__assert_fail@plt+0x1654>
   12c74:	cmp	r0, #0
   12c78:	ble	12cb8 <__assert_fail@plt+0x167c>
   12c7c:	cmn	r1, #1
   12c80:	beq	12cd0 <__assert_fail@plt+0x1694>
   12c84:	mov	r2, #-2147483648	; 0x80000000
   12c88:	mvn	r6, #-2147483648	; 0x80000000
   12c8c:	sdiv	r2, r2, r1
   12c90:	cmp	r2, r7
   12c94:	bge	12cd0 <__assert_fail@plt+0x1694>
   12c98:	b	12cd4 <__assert_fail@plt+0x1698>
   12c9c:	beq	12ccc <__assert_fail@plt+0x1690>
   12ca0:	mov	r2, #-2147483648	; 0x80000000
   12ca4:	mvn	r6, #-2147483648	; 0x80000000
   12ca8:	sdiv	r2, r2, r7
   12cac:	cmp	r2, r1
   12cb0:	mulge	r6, r7, r1
   12cb4:	b	12cd4 <__assert_fail@plt+0x1698>
   12cb8:	mvn	r6, #-2147483648	; 0x80000000
   12cbc:	sdiv	r2, r6, r1
   12cc0:	cmp	r0, r2
   12cc4:	bgt	12cd0 <__assert_fail@plt+0x1694>
   12cc8:	b	12cd4 <__assert_fail@plt+0x1698>
   12ccc:	mvn	r7, #0
   12cd0:	mul	r6, r7, r1
   12cd4:	movw	r1, #57700	; 0xe164
   12cd8:	movw	sl, #57916	; 0xe23c
   12cdc:	movt	r1, #2
   12ce0:	movt	sl, #2
   12ce4:	ldr	r1, [r1]
   12ce8:	sub	r1, r1, r3
   12cec:	subs	r1, r1, r6
   12cf0:	movvs	r1, #0
   12cf4:	sdiv	r0, r1, r0
   12cf8:	cmp	r0, #0
   12cfc:	str	r0, [sl]
   12d00:	ble	13c40 <__assert_fail@plt+0x2604>
   12d04:	cmp	ip, #0
   12d08:	beq	12d3c <__assert_fail@plt+0x1700>
   12d0c:	movw	r6, #57920	; 0xe240
   12d10:	movt	r6, #2
   12d14:	ldr	r0, [r6]
   12d18:	bl	154bc <__assert_fail@plt+0x3e80>
   12d1c:	movw	r0, #57688	; 0xe158
   12d20:	movt	r0, #2
   12d24:	ldr	r0, [r0]
   12d28:	cmp	r0, #11
   12d2c:	movls	r0, #11
   12d30:	add	r0, r0, #1
   12d34:	bl	19880 <__assert_fail@plt+0x8244>
   12d38:	str	r0, [r6]
   12d3c:	movw	r6, #57924	; 0xe244
   12d40:	movt	r6, #2
   12d44:	ldr	r0, [r6]
   12d48:	bl	154bc <__assert_fail@plt+0x3e80>
   12d4c:	movw	r0, #57668	; 0xe144
   12d50:	movt	r0, #2
   12d54:	ldr	r0, [r0]
   12d58:	cmp	r0, #8
   12d5c:	movle	r0, #8
   12d60:	bl	19880 <__assert_fail@plt+0x8244>
   12d64:	movw	r8, #57928	; 0xe248
   12d68:	movw	r7, #57932	; 0xe24c
   12d6c:	str	r0, [r6]
   12d70:	mov	r0, #0
   12d74:	movt	r8, #2
   12d78:	movt	r7, #2
   12d7c:	str	r0, [r8]
   12d80:	ldr	r0, [r7]
   12d84:	bl	154bc <__assert_fail@plt+0x3e80>
   12d88:	movw	r0, #57712	; 0xe170
   12d8c:	mov	r1, #40	; 0x28
   12d90:	movt	r0, #2
   12d94:	ldr	r0, [r0]
   12d98:	bl	19950 <__assert_fail@plt+0x8314>
   12d9c:	mov	r6, r0
   12da0:	str	r0, [r7]
   12da4:	movw	r0, #57862	; 0xe206
   12da8:	movt	r0, #2
   12dac:	ldrb	r0, [r0]
   12db0:	cmp	r0, #1
   12db4:	bne	12e00 <__assert_fail@plt+0x17c4>
   12db8:	cmp	r5, #0
   12dbc:	beq	12e48 <__assert_fail@plt+0x180c>
   12dc0:	ldr	r0, [r4]
   12dc4:	mov	r1, r6
   12dc8:	bl	13c90 <__assert_fail@plt+0x2654>
   12dcc:	sub	r5, r5, #1
   12dd0:	cmp	r0, #0
   12dd4:	bne	12df4 <__assert_fail@plt+0x17b8>
   12dd8:	movw	r0, #57712	; 0xe170
   12ddc:	sub	r6, r6, #40	; 0x28
   12de0:	movt	r0, #2
   12de4:	mov	r1, r0
   12de8:	ldr	r0, [r0]
   12dec:	sub	r0, r0, #1
   12df0:	str	r0, [r1]
   12df4:	add	r4, r4, #4
   12df8:	add	r6, r6, #40	; 0x28
   12dfc:	b	12db8 <__assert_fail@plt+0x177c>
   12e00:	cmp	r5, #1
   12e04:	blt	12e78 <__assert_fail@plt+0x183c>
   12e08:	ldr	r0, [r4]
   12e0c:	mov	r1, r6
   12e10:	bl	13c90 <__assert_fail@plt+0x2654>
   12e14:	movw	r5, #57862	; 0xe206
   12e18:	cmp	r0, #0
   12e1c:	movt	r5, #2
   12e20:	beq	13c38 <__assert_fail@plt+0x25fc>
   12e24:	ldr	r0, [r6]
   12e28:	ldr	r4, [r4]
   12e2c:	bl	1154c <fileno@plt>
   12e30:	mov	r1, r0
   12e34:	mov	r0, r4
   12e38:	bl	13da4 <__assert_fail@plt+0x2768>
   12e3c:	mov	r0, #0
   12e40:	str	r0, [r6, #24]
   12e44:	b	12ee0 <__assert_fail@plt+0x18a4>
   12e48:	movw	r0, #57712	; 0xe170
   12e4c:	movw	r5, #57862	; 0xe206
   12e50:	movt	r0, #2
   12e54:	movt	r5, #2
   12e58:	ldr	r0, [r0]
   12e5c:	cmp	r0, #0
   12e60:	beq	13c38 <__assert_fail@plt+0x25fc>
   12e64:	movw	r0, #51900	; 0xcabc
   12e68:	mvn	r1, #0
   12e6c:	movt	r0, #1
   12e70:	bl	13da4 <__assert_fail@plt+0x2768>
   12e74:	b	12f18 <__assert_fail@plt+0x18dc>
   12e78:	movw	r1, #47606	; 0xb9f6
   12e7c:	mov	r0, #0
   12e80:	mov	r2, #5
   12e84:	mov	r4, #0
   12e88:	movt	r1, #1
   12e8c:	bl	113a8 <dcgettext@plt>
   12e90:	movw	r1, #57816	; 0xe1d8
   12e94:	strb	r4, [r6, #37]	; 0x25
   12e98:	movw	r2, #57889	; 0xe221
   12e9c:	mov	r3, #1
   12ea0:	movt	r1, #2
   12ea4:	movt	r2, #2
   12ea8:	ldr	r1, [r1]
   12eac:	strb	r3, [r2]
   12eb0:	str	r1, [r6]
   12eb4:	stmib	r6, {r0, r4}
   12eb8:	ldr	r0, [r8]
   12ebc:	mvn	r1, #0
   12ec0:	add	r0, r0, #1
   12ec4:	str	r0, [r8]
   12ec8:	movw	r0, #51900	; 0xcabc
   12ecc:	movt	r0, #1
   12ed0:	bl	13da4 <__assert_fail@plt+0x2768>
   12ed4:	movw	r5, #57862	; 0xe206
   12ed8:	str	r4, [r6, #24]
   12edc:	movt	r5, #2
   12ee0:	movw	r0, #57712	; 0xe170
   12ee4:	movt	r0, #2
   12ee8:	ldr	r0, [r0]
   12eec:	subs	r0, r0, #1
   12ef0:	beq	12f18 <__assert_fail@plt+0x18dc>
   12ef4:	ldm	r6, {r1, r2}
   12ef8:	add	r3, r6, #40	; 0x28
   12efc:	mov	r6, #0
   12f00:	strb	r6, [r3, #37]	; 0x25
   12f04:	stm	r3, {r1, r2, r6}
   12f08:	str	r6, [r3, #24]
   12f0c:	subs	r0, r0, #1
   12f10:	add	r3, r3, #40	; 0x28
   12f14:	bne	12f00 <__assert_fail@plt+0x18c4>
   12f18:	ldr	r0, [r8]
   12f1c:	movw	r1, #57936	; 0xe250
   12f20:	movt	r1, #2
   12f24:	str	r0, [r1]
   12f28:	movw	r0, #57841	; 0xe1f1
   12f2c:	movt	r0, #2
   12f30:	ldrb	r0, [r0]
   12f34:	cmp	r0, #0
   12f38:	bne	13104 <__assert_fail@plt+0x1ac8>
   12f3c:	movw	r0, #57712	; 0xe170
   12f40:	movw	r1, #57908	; 0xe234
   12f44:	movt	r0, #2
   12f48:	movt	r1, #2
   12f4c:	ldr	r0, [r0]
   12f50:	cmn	r0, #1
   12f54:	ble	12f78 <__assert_fail@plt+0x193c>
   12f58:	ldr	r1, [r1]
   12f5c:	cmp	r0, #0
   12f60:	beq	12fd0 <__assert_fail@plt+0x1994>
   12f64:	cmn	r1, #1
   12f68:	ble	12fa0 <__assert_fail@plt+0x1964>
   12f6c:	mvn	r2, #-2147483648	; 0x80000000
   12f70:	udiv	r2, r2, r0
   12f74:	b	12f94 <__assert_fail@plt+0x1958>
   12f78:	ldr	r1, [r1]
   12f7c:	cmn	r1, #1
   12f80:	ble	12fb8 <__assert_fail@plt+0x197c>
   12f84:	cmn	r0, #1
   12f88:	beq	12fd0 <__assert_fail@plt+0x1994>
   12f8c:	mov	r2, #-2147483648	; 0x80000000
   12f90:	sdiv	r2, r2, r0
   12f94:	cmp	r2, r1
   12f98:	bge	12fd0 <__assert_fail@plt+0x1994>
   12f9c:	b	12fe4 <__assert_fail@plt+0x19a8>
   12fa0:	beq	12fcc <__assert_fail@plt+0x1990>
   12fa4:	mov	r2, #-2147483648	; 0x80000000
   12fa8:	sdiv	r2, r2, r1
   12fac:	cmp	r2, r0
   12fb0:	bge	12fd0 <__assert_fail@plt+0x1994>
   12fb4:	b	12fe4 <__assert_fail@plt+0x19a8>
   12fb8:	mvn	r2, #-2147483648	; 0x80000000
   12fbc:	sdiv	r2, r2, r0
   12fc0:	cmp	r1, r2
   12fc4:	bge	12fd0 <__assert_fail@plt+0x1994>
   12fc8:	b	12fe4 <__assert_fail@plt+0x19a8>
   12fcc:	mvn	r1, #0
   12fd0:	mul	r4, r1, r0
   12fd4:	adds	r5, r4, #1
   12fd8:	ldrvc	r0, [sl]
   12fdc:	addsvc	r6, r0, #1
   12fe0:	bvc	12fe8 <__assert_fail@plt+0x19ac>
   12fe4:	bl	13c64 <__assert_fail@plt+0x2628>
   12fe8:	cmn	r6, #1
   12fec:	ble	1300c <__assert_fail@plt+0x19d0>
   12ff0:	cmp	r6, #0
   12ff4:	beq	13058 <__assert_fail@plt+0x1a1c>
   12ff8:	cmn	r4, #1
   12ffc:	ble	13030 <__assert_fail@plt+0x19f4>
   13000:	mvn	r0, #-2147483648	; 0x80000000
   13004:	udiv	r0, r0, r6
   13008:	b	13024 <__assert_fail@plt+0x19e8>
   1300c:	cmn	r4, #1
   13010:	ble	13048 <__assert_fail@plt+0x1a0c>
   13014:	cmn	r6, #1
   13018:	beq	13058 <__assert_fail@plt+0x1a1c>
   1301c:	mov	r0, #-2147483648	; 0x80000000
   13020:	sdiv	r0, r0, r6
   13024:	cmp	r0, r4
   13028:	bge	13058 <__assert_fail@plt+0x1a1c>
   1302c:	b	12fe4 <__assert_fail@plt+0x19a8>
   13030:	beq	13058 <__assert_fail@plt+0x1a1c>
   13034:	mov	r0, #-2147483648	; 0x80000000
   13038:	sdiv	r0, r0, r4
   1303c:	cmp	r0, r6
   13040:	bge	13058 <__assert_fail@plt+0x1a1c>
   13044:	b	12fe4 <__assert_fail@plt+0x19a8>
   13048:	mvn	r0, #-2147483648	; 0x80000000
   1304c:	sdiv	r0, r0, r6
   13050:	cmp	r4, r0
   13054:	blt	12fe4 <__assert_fail@plt+0x19a8>
   13058:	movw	r0, #57964	; 0xe26c
   1305c:	movt	r0, #2
   13060:	mov	r7, r0
   13064:	ldr	r0, [r0]
   13068:	bl	154bc <__assert_fail@plt+0x3e80>
   1306c:	mov	r0, r5
   13070:	mov	r1, #4
   13074:	bl	19950 <__assert_fail@plt+0x8314>
   13078:	str	r0, [r7]
   1307c:	movw	r0, #57968	; 0xe270
   13080:	movt	r0, #2
   13084:	mov	r5, r0
   13088:	ldr	r0, [r0]
   1308c:	bl	154bc <__assert_fail@plt+0x3e80>
   13090:	mov	r0, r4
   13094:	mov	r1, #4
   13098:	bl	19950 <__assert_fail@plt+0x8314>
   1309c:	str	r0, [r5]
   130a0:	movw	r5, #57972	; 0xe274
   130a4:	movt	r5, #2
   130a8:	ldr	r0, [r5]
   130ac:	bl	154bc <__assert_fail@plt+0x3e80>
   130b0:	movw	r0, #57873	; 0xe211
   130b4:	mul	r4, r6, r4
   130b8:	mov	r1, #1
   130bc:	mov	r6, #1
   130c0:	movt	r0, #2
   130c4:	mov	r7, r0
   130c8:	ldrb	r0, [r0]
   130cc:	cmp	r0, #0
   130d0:	mov	r0, r4
   130d4:	movwne	r1, #2
   130d8:	bl	19950 <__assert_fail@plt+0x8314>
   130dc:	str	r0, [r5]
   130e0:	ldrb	r0, [r7]
   130e4:	movw	r1, #57976	; 0xe278
   130e8:	movw	r5, #57862	; 0xe206
   130ec:	movt	r5, #2
   130f0:	movt	r1, #2
   130f4:	cmp	r0, #0
   130f8:	movwne	r6, #2
   130fc:	mul	r0, r6, r4
   13100:	str	r0, [r1]
   13104:	movw	r0, #57832	; 0xe1e8
   13108:	mov	r6, #0
   1310c:	movt	r0, #2
   13110:	ldm	r0, {r1, r2}
   13114:	mov	r0, #1
   13118:	str	r2, [sp, #32]
   1311c:	str	r1, [sp, #28]
   13120:	subs	r1, r1, #2
   13124:	sbcs	r1, r2, #0
   13128:	mov	r1, #0
   1312c:	bcc	13328 <__assert_fail@plt+0x1cec>
   13130:	movw	r7, #57980	; 0xe27c
   13134:	mov	r8, #1
   13138:	mov	sl, #0
   1313c:	movt	r7, #2
   13140:	movw	r1, #57908	; 0xe234
   13144:	movw	r0, #57712	; 0xe170
   13148:	mov	r9, r7
   1314c:	movt	r1, #2
   13150:	movt	r0, #2
   13154:	ldr	r1, [r1]
   13158:	ldr	r0, [r0]
   1315c:	cmp	r1, #2
   13160:	blt	131d8 <__assert_fail@plt+0x1b9c>
   13164:	mov	r7, #1
   13168:	cmp	r0, #1
   1316c:	blt	131cc <__assert_fail@plt+0x1b90>
   13170:	movw	r1, #57932	; 0xe24c
   13174:	mov	r5, #1
   13178:	movt	r1, #2
   1317c:	ldr	r4, [r1]
   13180:	ldr	r1, [r4, #8]
   13184:	cmp	r1, #0
   13188:	bne	131a4 <__assert_fail@plt+0x1b68>
   1318c:	mov	r0, r4
   13190:	mov	r1, r5
   13194:	bl	13f60 <__assert_fail@plt+0x2924>
   13198:	movw	r0, #57712	; 0xe170
   1319c:	movt	r0, #2
   131a0:	ldr	r0, [r0]
   131a4:	add	r1, r5, #1
   131a8:	cmp	r5, r0
   131ac:	add	r4, r4, #40	; 0x28
   131b0:	mov	r5, r1
   131b4:	blt	13180 <__assert_fail@plt+0x1b44>
   131b8:	movw	r1, #57908	; 0xe234
   131bc:	movw	r5, #57862	; 0xe206
   131c0:	movt	r1, #2
   131c4:	movt	r5, #2
   131c8:	ldr	r1, [r1]
   131cc:	add	r7, r7, #1
   131d0:	cmp	r7, r1
   131d4:	blt	13168 <__assert_fail@plt+0x1b2c>
   131d8:	mov	r1, #1
   131dc:	mov	r7, r9
   131e0:	cmp	r0, #1
   131e4:	strb	r1, [r9]
   131e8:	mov	r9, #2
   131ec:	blt	13284 <__assert_fail@plt+0x1c48>
   131f0:	movw	r1, #57932	; 0xe24c
   131f4:	mov	r5, #1
   131f8:	movt	r1, #2
   131fc:	ldr	r4, [r1]
   13200:	ldr	r1, [r4, #8]
   13204:	cmp	r1, #0
   13208:	bne	13224 <__assert_fail@plt+0x1be8>
   1320c:	mov	r0, r4
   13210:	mov	r1, r5
   13214:	bl	13f60 <__assert_fail@plt+0x2924>
   13218:	movw	r0, #57712	; 0xe170
   1321c:	movt	r0, #2
   13220:	ldr	r0, [r0]
   13224:	add	r1, r5, #1
   13228:	cmp	r5, r0
   1322c:	add	r4, r4, #40	; 0x28
   13230:	mov	r5, r1
   13234:	blt	13200 <__assert_fail@plt+0x1bc4>
   13238:	movw	r5, #57862	; 0xe206
   1323c:	cmp	r0, #1
   13240:	movt	r5, #2
   13244:	blt	13284 <__assert_fail@plt+0x1c48>
   13248:	movw	r1, #57841	; 0xe1f1
   1324c:	movt	r1, #2
   13250:	ldrb	r1, [r1]
   13254:	cmp	r1, #0
   13258:	bne	13284 <__assert_fail@plt+0x1c48>
   1325c:	movw	r1, #57932	; 0xe24c
   13260:	movt	r1, #2
   13264:	ldr	r1, [r1]
   13268:	add	r1, r1, #8
   1326c:	ldr	r2, [r1]
   13270:	cmp	r2, #3
   13274:	strne	r9, [r1]
   13278:	add	r1, r1, #40	; 0x28
   1327c:	subs	r0, r0, #1
   13280:	bne	1326c <__assert_fail@plt+0x1c30>
   13284:	bl	140e4 <__assert_fail@plt+0x2aa8>
   13288:	mov	r0, #0
   1328c:	strb	r0, [r7]
   13290:	movw	r0, #57936	; 0xe250
   13294:	movt	r0, #2
   13298:	ldr	r0, [r0]
   1329c:	cmp	r0, #1
   132a0:	blt	132c4 <__assert_fail@plt+0x1c88>
   132a4:	ldr	r0, [sp, #28]
   132a8:	adds	r8, r8, #1
   132ac:	adc	sl, sl, #0
   132b0:	subs	r0, r8, r0
   132b4:	ldr	r0, [sp, #32]
   132b8:	sbcs	r0, sl, r0
   132bc:	bcc	13140 <__assert_fail@plt+0x1b04>
   132c0:	b	1330c <__assert_fail@plt+0x1cd0>
   132c4:	movw	r1, #51911	; 0xcac7
   132c8:	mov	r0, #0
   132cc:	mov	r2, #5
   132d0:	movt	r1, #1
   132d4:	bl	113a8 <dcgettext@plt>
   132d8:	mov	r2, r0
   132dc:	ldr	r0, [sp, #28]
   132e0:	mov	r1, #0
   132e4:	str	r0, [sp]
   132e8:	ldr	r0, [sp, #32]
   132ec:	stmib	sp, {r0, r8, sl}
   132f0:	mov	r0, #0
   132f4:	bl	11444 <error@plt>
   132f8:	movw	r0, #57936	; 0xe250
   132fc:	movt	r0, #2
   13300:	ldr	r0, [r0]
   13304:	cmp	r0, #1
   13308:	blt	13c38 <__assert_fail@plt+0x25fc>
   1330c:	movw	r0, #57832	; 0xe1e8
   13310:	movw	r9, #57883	; 0xe21b
   13314:	movw	sl, #57916	; 0xe23c
   13318:	movt	r0, #2
   1331c:	movt	r9, #2
   13320:	movt	sl, #2
   13324:	ldrd	r0, [r0]
   13328:	movw	r2, #57896	; 0xe228
   1332c:	ldrb	r7, [r9]
   13330:	movw	r3, #57876	; 0xe214
   13334:	movt	r2, #2
   13338:	movt	r3, #2
   1333c:	strd	r0, [r2]
   13340:	movw	r0, #57868	; 0xe20c
   13344:	movt	r0, #2
   13348:	cmp	r7, #1
   1334c:	ldr	r0, [r0]
   13350:	bne	13398 <__assert_fail@plt+0x1d5c>
   13354:	ldrb	r1, [r5]
   13358:	cmp	r1, #1
   1335c:	bne	13390 <__assert_fail@plt+0x1d54>
   13360:	movw	r1, #57863	; 0xe207
   13364:	movt	r1, #2
   13368:	ldrb	r1, [r1]
   1336c:	cmp	r1, #1
   13370:	bne	13390 <__assert_fail@plt+0x1d54>
   13374:	movw	r2, #57912	; 0xe238
   13378:	ldr	r1, [sl]
   1337c:	movt	r2, #2
   13380:	ldr	r2, [r2]
   13384:	add	r1, r1, r0
   13388:	add	r6, r1, r2
   1338c:	b	13398 <__assert_fail@plt+0x1d5c>
   13390:	ldr	r1, [sl]
   13394:	add	r6, r1, r0
   13398:	ldr	r1, [r3]
   1339c:	add	r2, r1, r0
   133a0:	movw	r0, #57841	; 0xe1f1
   133a4:	str	r1, [sp, #32]
   133a8:	movt	r0, #2
   133ac:	ldrb	r4, [r0]
   133b0:	movw	r0, #57712	; 0xe170
   133b4:	movt	r0, #2
   133b8:	ldr	ip, [r0]
   133bc:	movw	r0, #57932	; 0xe24c
   133c0:	movt	r0, #2
   133c4:	ldr	r1, [r0]
   133c8:	cmp	ip, #2
   133cc:	blt	13498 <__assert_fail@plt+0x1e5c>
   133d0:	movw	r0, #17832	; 0x45a8
   133d4:	movw	r9, #17264	; 0x4370
   133d8:	cmp	r4, #0
   133dc:	movw	r3, #17172	; 0x4314
   133e0:	str	r4, [sp, #24]
   133e4:	movw	r4, #57863	; 0xe207
   133e8:	ldr	r8, [sl]
   133ec:	str	ip, [sp, #20]
   133f0:	sub	lr, ip, #1
   133f4:	mov	ip, #0
   133f8:	movt	r0, #1
   133fc:	movt	r9, #1
   13400:	movt	r3, #1
   13404:	movt	r4, #2
   13408:	movne	r9, r0
   1340c:	movw	r0, #17672	; 0x4508
   13410:	ldrb	r4, [r4]
   13414:	movt	r0, #1
   13418:	movne	r3, r0
   1341c:	mov	r0, r5
   13420:	ldrb	r0, [r5]
   13424:	eor	r0, r0, #1
   13428:	str	r0, [sp, #28]
   1342c:	ldr	r5, [sp, #28]
   13430:	cmp	r4, #0
   13434:	mov	sl, #0
   13438:	str	r9, [r1, #12]
   1343c:	str	r3, [r1, #16]
   13440:	str	r2, [r1, #32]
   13444:	mov	r2, r7
   13448:	clzne	r0, ip
   1344c:	add	ip, ip, #1
   13450:	lsrne	r0, r0, #5
   13454:	orrne	sl, r0, r5
   13458:	cmp	r7, #0
   1345c:	and	r0, sl, #1
   13460:	strb	r0, [r1, #36]	; 0x24
   13464:	ldr	r0, [sp, #32]
   13468:	add	r1, r1, #40	; 0x28
   1346c:	add	r0, r6, r0
   13470:	mov	r6, r7
   13474:	movne	r2, r0
   13478:	addne	r6, r0, r8
   1347c:	cmp	lr, ip
   13480:	bne	13430 <__assert_fail@plt+0x1df4>
   13484:	ldr	r4, [sp, #24]
   13488:	ldr	r7, [sp, #20]
   1348c:	movw	r5, #57862	; 0xe206
   13490:	movt	r5, #2
   13494:	b	1349c <__assert_fail@plt+0x1e60>
   13498:	mov	r7, #1
   1349c:	cmp	r4, #0
   134a0:	bne	134cc <__assert_fail@plt+0x1e90>
   134a4:	movw	r0, #57842	; 0xe1f2
   134a8:	movt	r0, #2
   134ac:	ldrb	r0, [r0]
   134b0:	cmp	r0, #0
   134b4:	beq	134cc <__assert_fail@plt+0x1e90>
   134b8:	movw	r0, #17264	; 0x4370
   134bc:	movw	r3, #17172	; 0x4314
   134c0:	movt	r0, #1
   134c4:	movt	r3, #1
   134c8:	b	134dc <__assert_fail@plt+0x1ea0>
   134cc:	movw	r0, #17832	; 0x45a8
   134d0:	movw	r3, #17672	; 0x4508
   134d4:	movt	r0, #1
   134d8:	movt	r3, #1
   134dc:	str	r0, [r1, #12]
   134e0:	movw	r0, #57863	; 0xe207
   134e4:	str	r3, [r1, #16]
   134e8:	mov	r8, #0
   134ec:	movt	r0, #2
   134f0:	ldrb	r0, [r0]
   134f4:	cmp	r0, #1
   134f8:	mov	r0, #0
   134fc:	bne	1351c <__assert_fail@plt+0x1ee0>
   13500:	ldrb	r3, [r5]
   13504:	sub	r0, r7, #1
   13508:	clz	r0, r0
   1350c:	lsr	r0, r0, #5
   13510:	mvn	r3, r3
   13514:	orr	r0, r0, r3
   13518:	and	r0, r0, #1
   1351c:	str	r2, [r1, #32]
   13520:	strb	r0, [r1, #36]	; 0x24
   13524:	movw	r0, #57716	; 0xe174
   13528:	movw	r1, #57904	; 0xe230
   1352c:	movt	r0, #2
   13530:	movt	r1, #2
   13534:	ldr	r0, [r0]
   13538:	str	r0, [r1]
   1353c:	tst	r4, #1
   13540:	beq	13598 <__assert_fail@plt+0x1f5c>
   13544:	movw	r0, #57712	; 0xe170
   13548:	movt	r0, #2
   1354c:	ldr	r0, [r0]
   13550:	cmp	r0, #0
   13554:	beq	1383c <__assert_fail@plt+0x2200>
   13558:	movw	r2, #57932	; 0xe24c
   1355c:	movw	r1, #57908	; 0xe234
   13560:	movt	r2, #2
   13564:	movt	r1, #2
   13568:	ldr	r2, [r2]
   1356c:	ldr	r1, [r1]
   13570:	add	r2, r2, #28
   13574:	ldr	r3, [r2, #-20]	; 0xffffffec
   13578:	cmp	r3, #0
   1357c:	mov	r3, #0
   13580:	moveq	r3, r1
   13584:	subs	r0, r0, #1
   13588:	str	r3, [r2]
   1358c:	add	r2, r2, #40	; 0x28
   13590:	bne	13574 <__assert_fail@plt+0x1f38>
   13594:	b	1383c <__assert_fail@plt+0x2200>
   13598:	movw	r0, #57984	; 0xe280
   1359c:	movt	r0, #2
   135a0:	str	r8, [r0]
   135a4:	movw	r0, #57712	; 0xe170
   135a8:	movt	r0, #2
   135ac:	ldr	r1, [r0]
   135b0:	movw	r0, #57842	; 0xe1f2
   135b4:	movt	r0, #2
   135b8:	ldrb	r0, [r0]
   135bc:	eor	r2, r0, #1
   135c0:	sub	r3, r1, r2
   135c4:	cmp	r3, #0
   135c8:	ble	1374c <__assert_fail@plt+0x2110>
   135cc:	movw	r1, #57932	; 0xe24c
   135d0:	movw	r7, #57936	; 0xe250
   135d4:	mov	r2, r3
   135d8:	movt	r1, #2
   135dc:	movt	r7, #2
   135e0:	ldr	r4, [r1]
   135e4:	add	r1, r4, #24
   135e8:	str	r8, [r1], #40	; 0x28
   135ec:	subs	r2, r2, #1
   135f0:	bne	135e8 <__assert_fail@plt+0x1fac>
   135f4:	cmp	r3, #1
   135f8:	blt	1374c <__assert_fail@plt+0x2110>
   135fc:	ldr	r1, [r7]
   13600:	cmp	r1, #0
   13604:	beq	1374c <__assert_fail@plt+0x2110>
   13608:	mov	sl, #1
   1360c:	mov	r0, #0
   13610:	mov	r9, #0
   13614:	str	r3, [sp, #32]
   13618:	cmp	r1, #0
   1361c:	str	r9, [r4, #20]
   13620:	beq	136fc <__assert_fail@plt+0x20c0>
   13624:	movw	r2, #57908	; 0xe234
   13628:	movt	r2, #2
   1362c:	ldr	r2, [r2]
   13630:	cmp	r2, #0
   13634:	beq	136fc <__assert_fail@plt+0x20c0>
   13638:	sub	r5, r2, #1
   1363c:	ldr	r2, [r4, #8]
   13640:	mov	r6, r0
   13644:	cmp	r2, #0
   13648:	bne	13694 <__assert_fail@plt+0x2058>
   1364c:	movw	r0, #58008	; 0xe298
   13650:	movt	r0, #2
   13654:	str	r8, [r0]
   13658:	mov	r0, r4
   1365c:	bl	145a8 <__assert_fail@plt+0x2f6c>
   13660:	cmp	r0, #0
   13664:	moveq	r0, r4
   13668:	bleq	1514c <__assert_fail@plt+0x3b10>
   1366c:	movw	r0, #57984	; 0xe280
   13670:	ldr	r2, [r4, #8]
   13674:	movw	r7, #57936	; 0xe250
   13678:	movt	r0, #2
   1367c:	movt	r7, #2
   13680:	ldr	r0, [r0]
   13684:	cmp	r2, #0
   13688:	beq	136bc <__assert_fail@plt+0x2080>
   1368c:	cmp	r6, r0
   13690:	bne	136bc <__assert_fail@plt+0x2080>
   13694:	mov	r0, r6
   13698:	ldr	r1, [r7]
   1369c:	sub	r3, r5, #1
   136a0:	cmp	r3, r5
   136a4:	bcs	136fc <__assert_fail@plt+0x20c0>
   136a8:	cmp	r1, #0
   136ac:	mov	r5, r3
   136b0:	mov	r6, r0
   136b4:	bne	13644 <__assert_fail@plt+0x2008>
   136b8:	b	136fc <__assert_fail@plt+0x20c0>
   136bc:	ldr	r1, [r4, #24]
   136c0:	movw	r3, #58008	; 0xe298
   136c4:	movt	r3, #2
   136c8:	add	r1, r1, #1
   136cc:	str	r1, [r4, #24]
   136d0:	movw	r1, #57964	; 0xe26c
   136d4:	movt	r1, #2
   136d8:	ldr	r1, [r1]
   136dc:	str	r6, [r1, r9, lsl #2]
   136e0:	movw	r1, #57968	; 0xe270
   136e4:	movt	r1, #2
   136e8:	ldr	r3, [r3]
   136ec:	ldr	r1, [r1]
   136f0:	str	r3, [r1, r9, lsl #2]
   136f4:	add	r9, r9, #1
   136f8:	b	13698 <__assert_fail@plt+0x205c>
   136fc:	ldr	r2, [sp, #32]
   13700:	movw	r5, #57862	; 0xe206
   13704:	movt	r5, #2
   13708:	cmp	sl, r2
   1370c:	bge	13720 <__assert_fail@plt+0x20e4>
   13710:	add	r4, r4, #40	; 0x28
   13714:	add	sl, sl, #1
   13718:	cmp	r1, #0
   1371c:	bne	13618 <__assert_fail@plt+0x1fdc>
   13720:	movw	r1, #57842	; 0xe1f2
   13724:	movw	r2, #57964	; 0xe26c
   13728:	movt	r1, #2
   1372c:	movt	r2, #2
   13730:	ldrb	r1, [r1]
   13734:	ldr	r2, [r2]
   13738:	str	r0, [r2, r9, lsl #2]
   1373c:	mov	r0, #0
   13740:	cmp	r1, #0
   13744:	bne	1376c <__assert_fail@plt+0x2130>
   13748:	b	137d4 <__assert_fail@plt+0x2198>
   1374c:	movw	r1, #57964	; 0xe26c
   13750:	cmp	r0, #0
   13754:	mov	r9, #0
   13758:	mov	r0, #0
   1375c:	movt	r1, #2
   13760:	ldr	r1, [r1]
   13764:	str	r9, [r1]
   13768:	beq	137d4 <__assert_fail@plt+0x2198>
   1376c:	movw	r0, #57712	; 0xe170
   13770:	movt	r0, #2
   13774:	ldr	r1, [r0]
   13778:	mov	r0, #1
   1377c:	cmp	r1, #1
   13780:	blt	137d4 <__assert_fail@plt+0x2198>
   13784:	sdiv	r4, r9, r1
   13788:	movw	r2, #57932	; 0xe24c
   1378c:	mov	r6, #0
   13790:	mov	r5, #0
   13794:	movt	r2, #2
   13798:	ldr	r7, [r2]
   1379c:	add	r7, r7, #20
   137a0:	mls	r3, r4, r1, r9
   137a4:	add	r6, r6, #1
   137a8:	mov	r2, r4
   137ac:	str	r5, [r7]
   137b0:	cmp	r6, r3
   137b4:	addle	r2, r2, #1
   137b8:	cmp	r1, r6
   137bc:	str	r2, [r7, #4]
   137c0:	add	r5, r2, r5
   137c4:	add	r7, r7, #40	; 0x28
   137c8:	bne	137a4 <__assert_fail@plt+0x2168>
   137cc:	movw	r5, #57862	; 0xe206
   137d0:	movt	r5, #2
   137d4:	movw	r2, #57712	; 0xe170
   137d8:	movw	r1, #57932	; 0xe24c
   137dc:	movt	r2, #2
   137e0:	movt	r1, #2
   137e4:	ldr	r2, [r2]
   137e8:	ldr	r1, [r1]
   137ec:	subs	r2, r2, #1
   137f0:	beq	13808 <__assert_fail@plt+0x21cc>
   137f4:	ldr	r3, [r1, #24]
   137f8:	subs	r2, r2, #1
   137fc:	str	r3, [r1, #28]
   13800:	add	r1, r1, #40	; 0x28
   13804:	bne	137f4 <__assert_fail@plt+0x21b8>
   13808:	cmp	r0, #0
   1380c:	beq	13818 <__assert_fail@plt+0x21dc>
   13810:	ldr	r0, [r1, #24]
   13814:	b	13838 <__assert_fail@plt+0x21fc>
   13818:	ldr	r0, [r1, #8]
   1381c:	cmp	r0, #0
   13820:	beq	1382c <__assert_fail@plt+0x21f0>
   13824:	str	r8, [r1, #28]
   13828:	b	1383c <__assert_fail@plt+0x2200>
   1382c:	movw	r0, #57908	; 0xe234
   13830:	movt	r0, #2
   13834:	ldr	r0, [r0]
   13838:	str	r0, [r1, #28]
   1383c:	bl	150bc <__assert_fail@plt+0x3a80>
   13840:	cmp	r0, #0
   13844:	beq	13c38 <__assert_fail@plt+0x25fc>
   13848:	movw	r6, #57880	; 0xe218
   1384c:	mov	r9, #0
   13850:	movt	r6, #2
   13854:	ldrb	r0, [r6]
   13858:	cmp	r0, #0
   1385c:	movweq	r1, #57989	; 0xe285
   13860:	moveq	r0, #1
   13864:	movteq	r1, #2
   13868:	strbeq	r0, [r1]
   1386c:	movw	r0, #57988	; 0xe284
   13870:	movw	r1, #57908	; 0xe234
   13874:	movt	r0, #2
   13878:	movt	r1, #2
   1387c:	strb	r9, [r0]
   13880:	movw	r0, #57844	; 0xe1f4
   13884:	ldr	r1, [r1]
   13888:	movt	r0, #2
   1388c:	ldrb	r0, [r0]
   13890:	lsl	r7, r1, r0
   13894:	cmp	r7, #1
   13898:	blt	13b10 <__assert_fail@plt+0x24d4>
   1389c:	mov	r9, #0
   138a0:	bl	150bc <__assert_fail@plt+0x3a80>
   138a4:	cmp	r0, #0
   138a8:	beq	13b58 <__assert_fail@plt+0x251c>
   138ac:	movw	r0, #57996	; 0xe28c
   138b0:	mov	r1, #1
   138b4:	movt	r0, #2
   138b8:	str	r8, [r0]
   138bc:	movw	r0, #58000	; 0xe290
   138c0:	movt	r0, #2
   138c4:	str	r8, [r0]
   138c8:	movw	r0, #58004	; 0xe294
   138cc:	movt	r0, #2
   138d0:	str	r8, [r0]
   138d4:	movw	r0, #57988	; 0xe284
   138d8:	movt	r0, #2
   138dc:	strb	r8, [r0]
   138e0:	movw	r0, #58014	; 0xe29e
   138e4:	movt	r0, #2
   138e8:	strb	r8, [r0]
   138ec:	movw	r0, #58015	; 0xe29f
   138f0:	movt	r0, #2
   138f4:	strb	r1, [r0]
   138f8:	movw	r0, #57712	; 0xe170
   138fc:	movw	r1, #57873	; 0xe211
   13900:	movt	r0, #2
   13904:	movt	r1, #2
   13908:	ldr	r0, [r0]
   1390c:	cmp	r0, #1
   13910:	blt	13acc <__assert_fail@plt+0x2490>
   13914:	movw	r0, #57932	; 0xe24c
   13918:	mov	sl, #0
   1391c:	movt	r0, #2
   13920:	ldr	r4, [r0]
   13924:	movw	r0, #58008	; 0xe298
   13928:	movt	r0, #2
   1392c:	str	r8, [r0]
   13930:	ldr	r0, [r4, #28]
   13934:	cmp	r0, #0
   13938:	bgt	13948 <__assert_fail@plt+0x230c>
   1393c:	ldr	r0, [r4, #8]
   13940:	cmp	r0, #1
   13944:	bne	139fc <__assert_fail@plt+0x23c0>
   13948:	movw	r0, #58012	; 0xe29c
   1394c:	movw	r1, #57992	; 0xe288
   13950:	movt	r0, #2
   13954:	movt	r1, #2
   13958:	strb	r8, [r0]
   1395c:	ldr	r0, [r4, #32]
   13960:	str	r0, [r1]
   13964:	mov	r0, r4
   13968:	ldr	r1, [r4, #12]
   1396c:	blx	r1
   13970:	cmp	r0, #0
   13974:	moveq	r0, r4
   13978:	bleq	1514c <__assert_fail@plt+0x3b10>
   1397c:	movw	r0, #57988	; 0xe284
   13980:	movt	r0, #2
   13984:	ldrb	r5, [r0]
   13988:	ldr	r0, [r4, #28]
   1398c:	sub	r1, r0, #1
   13990:	str	r1, [r4, #28]
   13994:	and	r1, r9, #1
   13998:	orrs	r9, r5, r1
   1399c:	movwne	r9, #1
   139a0:	cmp	r0, #1
   139a4:	bgt	139b4 <__assert_fail@plt+0x2378>
   139a8:	bl	150bc <__assert_fail@plt+0x3a80>
   139ac:	cmp	r0, #0
   139b0:	beq	13ab0 <__assert_fail@plt+0x2474>
   139b4:	movw	r5, #57862	; 0xe206
   139b8:	movt	r5, #2
   139bc:	ldrb	r0, [r5]
   139c0:	cmp	r0, #1
   139c4:	bne	13a5c <__assert_fail@plt+0x2420>
   139c8:	ldr	r0, [r4, #8]
   139cc:	cmp	r0, #0
   139d0:	beq	13a5c <__assert_fail@plt+0x2420>
   139d4:	movw	r1, #58015	; 0xe29f
   139d8:	movt	r1, #2
   139dc:	ldrb	r1, [r1]
   139e0:	cmp	r1, #1
   139e4:	bne	13a30 <__assert_fail@plt+0x23f4>
   139e8:	movw	r0, #58014	; 0xe29e
   139ec:	mov	r1, #1
   139f0:	movt	r0, #2
   139f4:	strb	r1, [r0]
   139f8:	b	13a5c <__assert_fail@plt+0x2420>
   139fc:	ldrb	r0, [r5]
   13a00:	cmp	r0, #1
   13a04:	bne	13a64 <__assert_fail@plt+0x2428>
   13a08:	movw	r0, #58015	; 0xe29f
   13a0c:	movt	r0, #2
   13a10:	ldrb	r0, [r0]
   13a14:	cmp	r0, #1
   13a18:	bne	13a54 <__assert_fail@plt+0x2418>
   13a1c:	movw	r0, #58014	; 0xe29e
   13a20:	mov	r2, #1
   13a24:	movt	r0, #2
   13a28:	strb	r2, [r0]
   13a2c:	b	13a64 <__assert_fail@plt+0x2428>
   13a30:	cmp	r0, #3
   13a34:	beq	13a54 <__assert_fail@plt+0x2418>
   13a38:	cmp	r0, #2
   13a3c:	bne	13a5c <__assert_fail@plt+0x2420>
   13a40:	movw	r0, #58012	; 0xe29c
   13a44:	movt	r0, #2
   13a48:	ldrb	r0, [r0]
   13a4c:	cmp	r0, #1
   13a50:	bne	13a5c <__assert_fail@plt+0x2420>
   13a54:	mov	r0, r4
   13a58:	bl	14ec0 <__assert_fail@plt+0x3884>
   13a5c:	movw	r1, #57873	; 0xe211
   13a60:	movt	r1, #2
   13a64:	ldrb	r0, [r1]
   13a68:	cmp	r0, #1
   13a6c:	bne	13a88 <__assert_fail@plt+0x244c>
   13a70:	movw	r0, #58004	; 0xe294
   13a74:	movt	r0, #2
   13a78:	mov	r2, r0
   13a7c:	ldr	r0, [r0]
   13a80:	add	r0, r0, #1
   13a84:	str	r0, [r2]
   13a88:	movw	r0, #57712	; 0xe170
   13a8c:	add	sl, sl, #1
   13a90:	add	r4, r4, #40	; 0x28
   13a94:	movt	r0, #2
   13a98:	ldr	r0, [r0]
   13a9c:	cmp	sl, r0
   13aa0:	blt	13924 <__assert_fail@plt+0x22e8>
   13aa4:	movw	r0, #57988	; 0xe284
   13aa8:	movt	r0, #2
   13aac:	ldrb	r5, [r0]
   13ab0:	cmp	r5, #0
   13ab4:	beq	13ac4 <__assert_fail@plt+0x2488>
   13ab8:	mov	r0, #10
   13abc:	bl	11630 <putchar_unlocked@plt>
   13ac0:	sub	r7, r7, #1
   13ac4:	movw	r5, #57862	; 0xe206
   13ac8:	movt	r5, #2
   13acc:	bl	150bc <__assert_fail@plt+0x3a80>
   13ad0:	cmp	r0, #0
   13ad4:	bne	13ae4 <__assert_fail@plt+0x24a8>
   13ad8:	ldrb	r0, [r6]
   13adc:	cmp	r0, #0
   13ae0:	bne	13b10 <__assert_fail@plt+0x24d4>
   13ae4:	movw	r0, #57844	; 0xe1f4
   13ae8:	movt	r0, #2
   13aec:	ldrb	r0, [r0]
   13af0:	and	r0, r9, r0
   13af4:	tst	r0, #1
   13af8:	beq	13b08 <__assert_fail@plt+0x24cc>
   13afc:	mov	r0, #10
   13b00:	bl	11630 <putchar_unlocked@plt>
   13b04:	sub	r7, r7, #1
   13b08:	cmp	r7, #0
   13b0c:	bgt	138a0 <__assert_fail@plt+0x2264>
   13b10:	cmp	r7, #0
   13b14:	bne	13b58 <__assert_fail@plt+0x251c>
   13b18:	movw	r0, #57712	; 0xe170
   13b1c:	movt	r0, #2
   13b20:	ldr	r0, [r0]
   13b24:	cmp	r0, #1
   13b28:	blt	13b58 <__assert_fail@plt+0x251c>
   13b2c:	movw	r1, #57932	; 0xe24c
   13b30:	movt	r1, #2
   13b34:	ldr	r1, [r1]
   13b38:	add	r1, r1, #37	; 0x25
   13b3c:	ldr	r2, [r1, #-29]	; 0xffffffe3
   13b40:	cmp	r2, #0
   13b44:	moveq	r2, #1
   13b48:	strbeq	r2, [r1]
   13b4c:	subs	r0, r0, #1
   13b50:	add	r1, r1, #40	; 0x28
   13b54:	bne	13b3c <__assert_fail@plt+0x2500>
   13b58:	movw	r1, #57988	; 0xe284
   13b5c:	ands	r0, r9, #1
   13b60:	movt	r1, #2
   13b64:	strb	r0, [r1]
   13b68:	beq	13b78 <__assert_fail@plt+0x253c>
   13b6c:	ldrb	r0, [r6]
   13b70:	cmp	r0, #0
   13b74:	beq	13bb8 <__assert_fail@plt+0x257c>
   13b78:	movw	r0, #57881	; 0xe219
   13b7c:	movt	r0, #2
   13b80:	ldrb	r0, [r0]
   13b84:	cmp	r0, #1
   13b88:	bne	13bf0 <__assert_fail@plt+0x25b4>
   13b8c:	movw	r0, #58013	; 0xe29d
   13b90:	movt	r0, #2
   13b94:	ldrb	r0, [r0]
   13b98:	cmp	r0, #1
   13b9c:	bne	13bf0 <__assert_fail@plt+0x25b4>
   13ba0:	mov	r0, #12
   13ba4:	bl	11630 <putchar_unlocked@plt>
   13ba8:	movw	r0, #58013	; 0xe29d
   13bac:	movt	r0, #2
   13bb0:	strb	r8, [r0]
   13bb4:	b	13bf0 <__assert_fail@plt+0x25b4>
   13bb8:	movw	r0, #57853	; 0xe1fd
   13bbc:	movt	r0, #2
   13bc0:	ldrb	r0, [r0]
   13bc4:	cmp	r0, #0
   13bc8:	beq	13bd8 <__assert_fail@plt+0x259c>
   13bcc:	mov	r0, #12
   13bd0:	bl	11630 <putchar_unlocked@plt>
   13bd4:	b	13bf0 <__assert_fail@plt+0x25b4>
   13bd8:	adds	r4, r7, #5
   13bdc:	beq	13bf0 <__assert_fail@plt+0x25b4>
   13be0:	mov	r0, #10
   13be4:	bl	11630 <putchar_unlocked@plt>
   13be8:	subs	r4, r4, #1
   13bec:	bne	13be0 <__assert_fail@plt+0x25a4>
   13bf0:	movw	r0, #57896	; 0xe228
   13bf4:	movt	r0, #2
   13bf8:	mov	r2, r0
   13bfc:	ldrd	r0, [r0]
   13c00:	adds	r0, r0, #1
   13c04:	adc	r1, r1, #0
   13c08:	strd	r0, [r2]
   13c0c:	movw	r2, #57704	; 0xe168
   13c10:	movt	r2, #2
   13c14:	ldrd	r2, [r2]
   13c18:	subs	r0, r2, r0
   13c1c:	sbcs	r0, r3, r1
   13c20:	bcc	13c38 <__assert_fail@plt+0x25fc>
   13c24:	bl	140e4 <__assert_fail@plt+0x2aa8>
   13c28:	movw	r0, #57841	; 0xe1f1
   13c2c:	movt	r0, #2
   13c30:	ldrb	r4, [r0]
   13c34:	b	1353c <__assert_fail@plt+0x1f00>
   13c38:	sub	sp, fp, #28
   13c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c40:	movw	r1, #51877	; 0xcaa5
   13c44:	mov	r0, #0
   13c48:	mov	r2, #5
   13c4c:	movt	r1, #1
   13c50:	bl	113a8 <dcgettext@plt>
   13c54:	mov	r2, r0
   13c58:	mov	r0, #1
   13c5c:	mov	r1, #0
   13c60:	bl	11444 <error@plt>
   13c64:	push	{fp, lr}
   13c68:	mov	fp, sp
   13c6c:	movw	r1, #51799	; 0xca57
   13c70:	mov	r0, #0
   13c74:	mov	r2, #5
   13c78:	movt	r1, #1
   13c7c:	bl	113a8 <dcgettext@plt>
   13c80:	mov	r2, r0
   13c84:	mov	r0, #1
   13c88:	mov	r1, #0
   13c8c:	bl	11444 <error@plt>
   13c90:	push	{r4, r5, r6, sl, fp, lr}
   13c94:	add	fp, sp, #16
   13c98:	mov	r5, r1
   13c9c:	movw	r1, #54329	; 0xd439
   13ca0:	mov	r4, r0
   13ca4:	movt	r1, #1
   13ca8:	bl	11318 <strcmp@plt>
   13cac:	cmp	r0, #0
   13cb0:	beq	13cd0 <__assert_fail@plt+0x2694>
   13cb4:	movw	r1, #47268	; 0xb8a4
   13cb8:	mov	r0, r4
   13cbc:	str	r4, [r5, #4]
   13cc0:	movt	r1, #1
   13cc4:	bl	15410 <__assert_fail@plt+0x3dd4>
   13cc8:	str	r0, [r5]
   13ccc:	b	13d08 <__assert_fail@plt+0x26cc>
   13cd0:	movw	r1, #47606	; 0xb9f6
   13cd4:	mov	r0, #0
   13cd8:	mov	r2, #5
   13cdc:	movt	r1, #1
   13ce0:	bl	113a8 <dcgettext@plt>
   13ce4:	str	r0, [r5, #4]
   13ce8:	movw	r0, #57816	; 0xe1d8
   13cec:	movw	r1, #57889	; 0xe221
   13cf0:	mov	r2, #1
   13cf4:	movt	r0, #2
   13cf8:	movt	r1, #2
   13cfc:	ldr	r0, [r0]
   13d00:	str	r0, [r5]
   13d04:	strb	r2, [r1]
   13d08:	cmp	r0, #0
   13d0c:	beq	13d40 <__assert_fail@plt+0x2704>
   13d10:	mov	r1, #2
   13d14:	bl	152dc <__assert_fail@plt+0x3ca0>
   13d18:	mov	r0, #0
   13d1c:	strb	r0, [r5, #37]	; 0x25
   13d20:	str	r0, [r5, #8]
   13d24:	movw	r0, #57928	; 0xe248
   13d28:	mov	r5, #1
   13d2c:	movt	r0, #2
   13d30:	ldr	r1, [r0]
   13d34:	add	r1, r1, #1
   13d38:	str	r1, [r0]
   13d3c:	b	13d9c <__assert_fail@plt+0x2760>
   13d40:	movw	r0, #57890	; 0xe222
   13d44:	mov	r1, #1
   13d48:	mov	r5, #0
   13d4c:	movt	r0, #2
   13d50:	strb	r1, [r0]
   13d54:	movw	r0, #57872	; 0xe210
   13d58:	movt	r0, #2
   13d5c:	ldrb	r0, [r0]
   13d60:	cmp	r0, #0
   13d64:	bne	13d9c <__assert_fail@plt+0x2760>
   13d68:	bl	11510 <__errno_location@plt>
   13d6c:	ldr	r6, [r0]
   13d70:	mov	r0, #0
   13d74:	mov	r1, #3
   13d78:	mov	r2, r4
   13d7c:	mov	r5, #0
   13d80:	bl	18b8c <__assert_fail@plt+0x7550>
   13d84:	movw	r2, #53039	; 0xcf2f
   13d88:	mov	r3, r0
   13d8c:	mov	r0, #0
   13d90:	mov	r1, r6
   13d94:	movt	r2, #1
   13d98:	bl	11444 <error@plt>
   13d9c:	mov	r0, r5
   13da0:	pop	{r4, r5, r6, sl, fp, pc}
   13da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13da8:	add	fp, sp, #28
   13dac:	sub	sp, sp, #196	; 0xc4
   13db0:	mov	r5, r1
   13db4:	movw	r1, #54329	; 0xd439
   13db8:	mov	r4, r0
   13dbc:	movt	r1, #1
   13dc0:	bl	11318 <strcmp@plt>
   13dc4:	cmp	r0, #0
   13dc8:	mvneq	r5, #0
   13dcc:	cmp	r5, #0
   13dd0:	bmi	13dec <__assert_fail@plt+0x27b0>
   13dd4:	add	r6, sp, #88	; 0x58
   13dd8:	mov	r0, r5
   13ddc:	mov	r1, r6
   13de0:	bl	1b7d4 <__assert_fail@plt+0xa198>
   13de4:	cmp	r0, #0
   13de8:	beq	13e14 <__assert_fail@plt+0x27d8>
   13dec:	movw	r6, #57944	; 0xe258
   13df0:	movt	r6, #2
   13df4:	ldr	r0, [r6]
   13df8:	cmp	r0, #0
   13dfc:	bne	13e18 <__assert_fail@plt+0x27dc>
   13e00:	movw	r6, #57944	; 0xe258
   13e04:	movt	r6, #2
   13e08:	mov	r0, r6
   13e0c:	bl	15588 <__assert_fail@plt+0x3f4c>
   13e10:	b	13e18 <__assert_fail@plt+0x27dc>
   13e14:	add	r6, r6, #80	; 0x50
   13e18:	movw	sl, #57884	; 0xe21c
   13e1c:	ldrd	r8, [r6]
   13e20:	add	r1, sp, #80	; 0x50
   13e24:	add	r2, sp, #36	; 0x24
   13e28:	movt	sl, #2
   13e2c:	ldr	r0, [sl]
   13e30:	str	r9, [sp, #84]	; 0x54
   13e34:	str	r8, [sp, #80]	; 0x50
   13e38:	bl	18fb4 <__assert_fail@plt+0x7978>
   13e3c:	cmp	r0, #0
   13e40:	beq	13ea4 <__assert_fail@plt+0x2868>
   13e44:	movw	r0, #57848	; 0xe1f8
   13e48:	add	r8, sp, #36	; 0x24
   13e4c:	mvn	r1, #0
   13e50:	movt	r0, #2
   13e54:	mov	r3, r8
   13e58:	ldr	r2, [r0]
   13e5c:	ldr	r0, [sl]
   13e60:	stm	sp, {r0, r9}
   13e64:	mov	r0, #0
   13e68:	bl	15a3c <__assert_fail@plt+0x4400>
   13e6c:	add	r7, r0, #1
   13e70:	mov	r0, r7
   13e74:	bl	19880 <__assert_fail@plt+0x8244>
   13e78:	mov	r6, r0
   13e7c:	movw	r0, #57848	; 0xe1f8
   13e80:	mov	r1, r7
   13e84:	mov	r3, r8
   13e88:	movt	r0, #2
   13e8c:	ldr	r2, [r0]
   13e90:	ldr	r0, [sl]
   13e94:	stm	sp, {r0, r9}
   13e98:	mov	r0, r6
   13e9c:	bl	15a3c <__assert_fail@plt+0x4400>
   13ea0:	b	13edc <__assert_fail@plt+0x28a0>
   13ea4:	mov	r0, #33	; 0x21
   13ea8:	bl	19880 <__assert_fail@plt+0x8244>
   13eac:	mov	r6, r0
   13eb0:	ldr	r0, [sp, #80]	; 0x50
   13eb4:	add	r2, sp, #15
   13eb8:	asr	r1, r0, #31
   13ebc:	bl	15618 <__assert_fail@plt+0x3fdc>
   13ec0:	movw	r3, #51903	; 0xcabf
   13ec4:	stm	sp, {r0, r9}
   13ec8:	mov	r0, r6
   13ecc:	mov	r1, #1
   13ed0:	mov	r2, #33	; 0x21
   13ed4:	movt	r3, #1
   13ed8:	bl	1151c <__sprintf_chk@plt>
   13edc:	movw	r7, #57952	; 0xe260
   13ee0:	movt	r7, #2
   13ee4:	ldr	r0, [r7]
   13ee8:	bl	154bc <__assert_fail@plt+0x3e80>
   13eec:	movw	r0, #51900	; 0xcabc
   13ef0:	cmp	r5, #0
   13ef4:	movw	r5, #57956	; 0xe264
   13ef8:	mov	r1, #0
   13efc:	str	r6, [r7]
   13f00:	movt	r0, #1
   13f04:	movt	r5, #2
   13f08:	movmi	r4, r0
   13f0c:	movw	r0, #57856	; 0xe200
   13f10:	movt	r0, #2
   13f14:	ldr	r0, [r0]
   13f18:	cmp	r0, #0
   13f1c:	movne	r4, r0
   13f20:	movw	r0, #57700	; 0xe164
   13f24:	movt	r0, #2
   13f28:	str	r4, [r5]
   13f2c:	ldr	r4, [r0]
   13f30:	mov	r0, r6
   13f34:	bl	156d4 <__assert_fail@plt+0x4098>
   13f38:	sub	r4, r4, r0
   13f3c:	ldr	r0, [r5]
   13f40:	mov	r1, #0
   13f44:	bl	156d4 <__assert_fail@plt+0x4098>
   13f48:	movw	r1, #57960	; 0xe268
   13f4c:	sub	r0, r4, r0
   13f50:	movt	r1, #2
   13f54:	str	r0, [r1]
   13f58:	sub	sp, fp, #28
   13f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f64:	add	fp, sp, #24
   13f68:	ldr	r6, [r0]
   13f6c:	mov	r5, r0
   13f70:	mov	r8, r1
   13f74:	mov	r0, r6
   13f78:	bl	1139c <getc_unlocked@plt>
   13f7c:	cmp	r0, #12
   13f80:	bne	13fbc <__assert_fail@plt+0x2980>
   13f84:	ldrb	r0, [r5, #37]	; 0x25
   13f88:	cmp	r0, #0
   13f8c:	beq	13fc8 <__assert_fail@plt+0x298c>
   13f90:	mov	r0, r6
   13f94:	bl	1139c <getc_unlocked@plt>
   13f98:	cmp	r0, #10
   13f9c:	bne	13fa8 <__assert_fail@plt+0x296c>
   13fa0:	mov	r0, r6
   13fa4:	bl	1139c <getc_unlocked@plt>
   13fa8:	mov	r7, #0
   13fac:	cmp	r0, #12
   13fb0:	strb	r7, [r5, #37]	; 0x25
   13fb4:	beq	13fd0 <__assert_fail@plt+0x2994>
   13fb8:	b	13fd8 <__assert_fail@plt+0x299c>
   13fbc:	mov	r7, #0
   13fc0:	strb	r7, [r5, #37]	; 0x25
   13fc4:	b	13fd8 <__assert_fail@plt+0x299c>
   13fc8:	mov	r0, #0
   13fcc:	strb	r0, [r5, #37]	; 0x25
   13fd0:	mov	r7, #1
   13fd4:	mov	r0, #12
   13fd8:	movw	r4, #57980	; 0xe27c
   13fdc:	movt	r4, #2
   13fe0:	ldrb	r1, [r4]
   13fe4:	strb	r1, [r5, #37]	; 0x25
   13fe8:	cmn	r0, #1
   13fec:	beq	1400c <__assert_fail@plt+0x29d0>
   13ff0:	cmp	r0, #10
   13ff4:	beq	14098 <__assert_fail@plt+0x2a5c>
   13ff8:	cmp	r0, #12
   13ffc:	beq	14018 <__assert_fail@plt+0x29dc>
   14000:	mov	r0, r6
   14004:	bl	1139c <getc_unlocked@plt>
   14008:	b	13fe8 <__assert_fail@plt+0x29ac>
   1400c:	mov	r0, r5
   14010:	bl	141f4 <__assert_fail@plt+0x2bb8>
   14014:	b	14098 <__assert_fail@plt+0x2a5c>
   14018:	ldrb	r0, [r4]
   1401c:	cmp	r0, #1
   14020:	bne	14078 <__assert_fail@plt+0x2a3c>
   14024:	movw	r0, #57862	; 0xe206
   14028:	movt	r0, #2
   1402c:	ldrb	r0, [r0]
   14030:	cmp	r0, #0
   14034:	beq	14044 <__assert_fail@plt+0x2a08>
   14038:	mov	r0, #0
   1403c:	strb	r0, [r5, #37]	; 0x25
   14040:	b	14078 <__assert_fail@plt+0x2a3c>
   14044:	movw	r0, #57712	; 0xe170
   14048:	movt	r0, #2
   1404c:	ldr	r0, [r0]
   14050:	cmp	r0, #0
   14054:	beq	14078 <__assert_fail@plt+0x2a3c>
   14058:	movw	r1, #57932	; 0xe24c
   1405c:	mov	r2, #0
   14060:	movt	r1, #2
   14064:	ldr	r1, [r1]
   14068:	add	r1, r1, #37	; 0x25
   1406c:	strb	r2, [r1], #40	; 0x28
   14070:	subs	r0, r0, #1
   14074:	bne	1406c <__assert_fail@plt+0x2a30>
   14078:	mov	r0, r6
   1407c:	bl	1139c <getc_unlocked@plt>
   14080:	cmp	r0, #10
   14084:	beq	14090 <__assert_fail@plt+0x2a54>
   14088:	mov	r1, r6
   1408c:	bl	11504 <ungetc@plt>
   14090:	mov	r0, r5
   14094:	bl	1416c <__assert_fail@plt+0x2b30>
   14098:	movw	r0, #57864	; 0xe208
   1409c:	movt	r0, #2
   140a0:	ldrb	r0, [r0]
   140a4:	cmp	r0, #0
   140a8:	bne	140e0 <__assert_fail@plt+0x2aa4>
   140ac:	movw	r1, #57862	; 0xe206
   140b0:	subs	r0, r8, #1
   140b4:	movt	r1, #2
   140b8:	movwne	r0, #1
   140bc:	ldrb	r1, [r1]
   140c0:	and	r0, r0, r1
   140c4:	orrs	r0, r7, r0
   140c8:	bne	140e0 <__assert_fail@plt+0x2aa4>
   140cc:	movw	r0, #57716	; 0xe174
   140d0:	movt	r0, #2
   140d4:	ldr	r1, [r0]
   140d8:	add	r1, r1, #1
   140dc:	str	r1, [r0]
   140e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140e4:	push	{fp, lr}
   140e8:	mov	fp, sp
   140ec:	movw	r0, #57932	; 0xe24c
   140f0:	movw	r1, #57936	; 0xe250
   140f4:	movt	r0, #2
   140f8:	movt	r1, #2
   140fc:	ldr	ip, [r0]
   14100:	movw	r0, #57712	; 0xe170
   14104:	movt	r0, #2
   14108:	ldr	r2, [r0]
   1410c:	cmp	r2, #0
   14110:	beq	14144 <__assert_fail@plt+0x2b08>
   14114:	add	r3, ip, #8
   14118:	mov	lr, #0
   1411c:	ldr	r0, [r3]
   14120:	cmp	r0, #2
   14124:	bne	14138 <__assert_fail@plt+0x2afc>
   14128:	str	lr, [r3]
   1412c:	ldr	r0, [r1]
   14130:	add	r0, r0, #1
   14134:	str	r0, [r1]
   14138:	add	r3, r3, #40	; 0x28
   1413c:	subs	r2, r2, #1
   14140:	bne	1411c <__assert_fail@plt+0x2ae0>
   14144:	movw	r0, #57841	; 0xe1f1
   14148:	movt	r0, #2
   1414c:	ldrb	r0, [r0]
   14150:	cmp	r0, #0
   14154:	popne	{fp, pc}
   14158:	ldr	r0, [ip, #8]
   1415c:	subs	r0, r0, #3
   14160:	movwne	r0, #1
   14164:	str	r0, [r1]
   14168:	pop	{fp, pc}
   1416c:	movw	r1, #57862	; 0xe206
   14170:	movt	r1, #2
   14174:	ldrb	r1, [r1]
   14178:	cmp	r1, #0
   1417c:	beq	1418c <__assert_fail@plt+0x2b50>
   14180:	mov	r1, #2
   14184:	str	r1, [r0, #8]
   14188:	b	141d4 <__assert_fail@plt+0x2b98>
   1418c:	movw	r1, #57712	; 0xe170
   14190:	movt	r1, #2
   14194:	ldr	r1, [r1]
   14198:	cmp	r1, #0
   1419c:	beq	141d4 <__assert_fail@plt+0x2b98>
   141a0:	movw	r2, #57841	; 0xe1f1
   141a4:	movt	r2, #2
   141a8:	ldrb	r3, [r2]
   141ac:	mov	r2, #1
   141b0:	cmp	r3, #0
   141b4:	movw	r3, #57932	; 0xe24c
   141b8:	movt	r3, #2
   141bc:	movwne	r2, #2
   141c0:	ldr	r3, [r3]
   141c4:	add	r3, r3, #8
   141c8:	str	r2, [r3], #40	; 0x28
   141cc:	subs	r1, r1, #1
   141d0:	bne	141c8 <__assert_fail@plt+0x2b8c>
   141d4:	mov	r1, #0
   141d8:	str	r1, [r0, #28]
   141dc:	movw	r0, #57936	; 0xe250
   141e0:	movt	r0, #2
   141e4:	ldr	r1, [r0]
   141e8:	sub	r1, r1, #1
   141ec:	str	r1, [r0]
   141f0:	bx	lr
   141f4:	push	{r4, r5, r6, sl, fp, lr}
   141f8:	add	fp, sp, #16
   141fc:	mov	r4, r0
   14200:	ldr	r0, [r0, #8]
   14204:	cmp	r0, #3
   14208:	popeq	{r4, r5, r6, sl, fp, pc}
   1420c:	bl	11510 <__errno_location@plt>
   14210:	mov	r6, r0
   14214:	ldr	r5, [r0]
   14218:	ldr	r0, [r4]
   1421c:	bl	1142c <ferror_unlocked@plt>
   14220:	cmp	r0, #0
   14224:	moveq	r5, r0
   14228:	ldr	r0, [r4]
   1422c:	bl	1154c <fileno@plt>
   14230:	mov	r1, r0
   14234:	ldr	r0, [r4]
   14238:	cmp	r1, #0
   1423c:	beq	14258 <__assert_fail@plt+0x2c1c>
   14240:	bl	15318 <__assert_fail@plt+0x3cdc>
   14244:	cmp	r5, #0
   14248:	bne	1425c <__assert_fail@plt+0x2c20>
   1424c:	cmp	r0, #0
   14250:	ldrne	r5, [r6]
   14254:	b	1425c <__assert_fail@plt+0x2c20>
   14258:	bl	115d0 <clearerr_unlocked@plt>
   1425c:	cmp	r5, #0
   14260:	bne	142ec <__assert_fail@plt+0x2cb0>
   14264:	movw	r0, #57862	; 0xe206
   14268:	movt	r0, #2
   1426c:	ldrb	r0, [r0]
   14270:	cmp	r0, #0
   14274:	beq	1428c <__assert_fail@plt+0x2c50>
   14278:	mov	r0, #0
   1427c:	str	r0, [r4, #28]
   14280:	mov	r0, #3
   14284:	str	r0, [r4, #8]
   14288:	b	142d4 <__assert_fail@plt+0x2c98>
   1428c:	movw	r0, #57712	; 0xe170
   14290:	movt	r0, #2
   14294:	ldr	r0, [r0]
   14298:	cmp	r0, #0
   1429c:	beq	142d4 <__assert_fail@plt+0x2c98>
   142a0:	movw	r1, #57932	; 0xe24c
   142a4:	mov	r2, #3
   142a8:	mov	r3, #0
   142ac:	movt	r1, #2
   142b0:	ldr	r1, [r1]
   142b4:	add	r1, r1, #24
   142b8:	str	r2, [r1, #-16]
   142bc:	ldr	r6, [r1]
   142c0:	cmp	r6, #0
   142c4:	streq	r3, [r1, #4]
   142c8:	add	r1, r1, #40	; 0x28
   142cc:	subs	r0, r0, #1
   142d0:	bne	142b8 <__assert_fail@plt+0x2c7c>
   142d4:	movw	r0, #57936	; 0xe250
   142d8:	movt	r0, #2
   142dc:	ldr	r1, [r0]
   142e0:	sub	r1, r1, #1
   142e4:	str	r1, [r0]
   142e8:	pop	{r4, r5, r6, sl, fp, pc}
   142ec:	ldr	r2, [r4, #4]
   142f0:	mov	r0, #0
   142f4:	mov	r1, #3
   142f8:	bl	18b8c <__assert_fail@plt+0x7550>
   142fc:	movw	r2, #53039	; 0xcf2f
   14300:	mov	r3, r0
   14304:	mov	r0, #1
   14308:	mov	r1, r5
   1430c:	movt	r2, #1
   14310:	bl	11444 <error@plt>
   14314:	push	{r4, r5, r6, sl, fp, lr}
   14318:	add	fp, sp, #16
   1431c:	movw	r5, #57984	; 0xe280
   14320:	movw	r2, #57976	; 0xe278
   14324:	movw	r6, #57972	; 0xe274
   14328:	mov	r4, r0
   1432c:	movt	r2, #2
   14330:	movt	r5, #2
   14334:	movt	r6, #2
   14338:	ldr	r1, [r5]
   1433c:	ldr	r2, [r2]
   14340:	ldr	r0, [r6]
   14344:	cmp	r1, r2
   14348:	bcc	14360 <__assert_fail@plt+0x2d24>
   1434c:	movw	r1, #57976	; 0xe278
   14350:	movt	r1, #2
   14354:	bl	19984 <__assert_fail@plt+0x8348>
   14358:	ldr	r1, [r5]
   1435c:	str	r0, [r6]
   14360:	add	r2, r1, #1
   14364:	str	r2, [r5]
   14368:	strb	r4, [r0, r1]
   1436c:	pop	{r4, r5, r6, sl, fp, pc}
   14370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14374:	add	fp, sp, #28
   14378:	sub	sp, sp, #4
   1437c:	ldr	r5, [r0, #20]
   14380:	movw	r1, #57964	; 0xe26c
   14384:	mov	r4, r0
   14388:	movw	r9, #57988	; 0xe284
   1438c:	movt	r1, #2
   14390:	movt	r9, #2
   14394:	add	r0, r5, #1
   14398:	str	r0, [r4, #20]
   1439c:	ldr	r1, [r1]
   143a0:	ldr	sl, [r1, r0, lsl #2]
   143a4:	mov	r0, #1
   143a8:	ldr	r7, [r1, r5, lsl #2]
   143ac:	strb	r0, [r9]
   143b0:	movw	r0, #57972	; 0xe274
   143b4:	movt	r0, #2
   143b8:	ldr	r8, [r0]
   143bc:	movw	r0, #57989	; 0xe285
   143c0:	movt	r0, #2
   143c4:	ldrb	r0, [r0]
   143c8:	cmp	r0, #1
   143cc:	bleq	14998 <__assert_fail@plt+0x335c>
   143d0:	ldr	r0, [r4, #8]
   143d4:	cmp	r0, #1
   143d8:	bne	14424 <__assert_fail@plt+0x2de8>
   143dc:	movw	r0, #57712	; 0xe170
   143e0:	movw	r1, #57932	; 0xe24c
   143e4:	movt	r0, #2
   143e8:	movt	r1, #2
   143ec:	ldr	r0, [r0]
   143f0:	ldr	r1, [r1]
   143f4:	cmp	r0, #1
   143f8:	blt	14418 <__assert_fail@plt+0x2ddc>
   143fc:	add	r2, r1, #8
   14400:	mov	r3, #0
   14404:	mov	r6, #2
   14408:	add	r3, r3, #1
   1440c:	str	r6, [r2], #40	; 0x28
   14410:	cmp	r3, r0
   14414:	blt	14408 <__assert_fail@plt+0x2dcc>
   14418:	ldr	r0, [r1, #28]
   1441c:	cmp	r0, #0
   14420:	ble	144e4 <__assert_fail@plt+0x2ea8>
   14424:	movw	r6, #57992	; 0xe288
   14428:	movw	r9, #57876	; 0xe214
   1442c:	movt	r6, #2
   14430:	movt	r9, #2
   14434:	ldr	r0, [r6]
   14438:	ldr	r1, [r9]
   1443c:	cmp	r0, r1
   14440:	ble	14454 <__assert_fail@plt+0x2e18>
   14444:	sub	r0, r0, r1
   14448:	bl	14ac8 <__assert_fail@plt+0x348c>
   1444c:	mov	r0, #0
   14450:	str	r0, [r6]
   14454:	movw	r0, #57873	; 0xe211
   14458:	movt	r0, #2
   1445c:	ldrb	r0, [r0]
   14460:	cmp	r0, #1
   14464:	bleq	14b2c <__assert_fail@plt+0x34f0>
   14468:	cmp	r7, sl
   1446c:	beq	14488 <__assert_fail@plt+0x2e4c>
   14470:	add	r6, r8, r7
   14474:	sub	r7, sl, r7
   14478:	ldrb	r0, [r6], #1
   1447c:	bl	14508 <__assert_fail@plt+0x2ecc>
   14480:	subs	r7, r7, #1
   14484:	bne	14478 <__assert_fail@plt+0x2e3c>
   14488:	movw	r0, #57996	; 0xe28c
   1448c:	movt	r0, #2
   14490:	ldr	r0, [r0]
   14494:	cmp	r0, #0
   14498:	bne	144fc <__assert_fail@plt+0x2ec0>
   1449c:	movw	r0, #57968	; 0xe270
   144a0:	movw	r7, #57868	; 0xe20c
   144a4:	ldr	r3, [r4, #32]
   144a8:	ldr	r2, [r9]
   144ac:	movw	r1, #58000	; 0xe290
   144b0:	movt	r0, #2
   144b4:	movt	r7, #2
   144b8:	movt	r1, #2
   144bc:	ldr	r0, [r0]
   144c0:	ldr	r7, [r7]
   144c4:	ldr	r0, [r0, r5, lsl #2]
   144c8:	add	r0, r0, r3
   144cc:	sub	r3, r3, r2
   144d0:	cmp	r3, r7
   144d4:	str	r0, [r1]
   144d8:	subeq	r0, r0, r2
   144dc:	streq	r0, [r1]
   144e0:	b	144fc <__assert_fail@plt+0x2ec0>
   144e4:	movw	r0, #57880	; 0xe218
   144e8:	movt	r0, #2
   144ec:	ldrb	r0, [r0]
   144f0:	cmp	r0, #1
   144f4:	moveq	r0, #0
   144f8:	strbeq	r0, [r9]
   144fc:	mov	r0, #1
   14500:	sub	sp, fp, #28
   14504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14508:	push	{r4, sl, fp, lr}
   1450c:	add	fp, sp, #8
   14510:	mov	r4, r0
   14514:	movw	r0, #57860	; 0xe204
   14518:	movt	r0, #2
   1451c:	ldrb	r0, [r0]
   14520:	cmp	r0, #0
   14524:	beq	1459c <__assert_fail@plt+0x2f60>
   14528:	movw	r0, #57996	; 0xe28c
   1452c:	cmp	r4, #32
   14530:	movt	r0, #2
   14534:	ldr	r1, [r0]
   14538:	bne	14548 <__assert_fail@plt+0x2f0c>
   1453c:	add	r1, r1, #1
   14540:	str	r1, [r0]
   14544:	pop	{r4, sl, fp, pc}
   14548:	cmp	r1, #1
   1454c:	blge	14c10 <__assert_fail@plt+0x35d4>
   14550:	bl	114bc <__ctype_b_loc@plt>
   14554:	ldr	r0, [r0]
   14558:	add	r0, r0, r4, lsl #1
   1455c:	ldrb	r0, [r0, #1]
   14560:	tst	r0, #64	; 0x40
   14564:	bne	14588 <__assert_fail@plt+0x2f4c>
   14568:	cmp	r4, #8
   1456c:	bne	1459c <__assert_fail@plt+0x2f60>
   14570:	movw	r0, #58000	; 0xe290
   14574:	mov	r4, #8
   14578:	movt	r0, #2
   1457c:	ldr	r1, [r0]
   14580:	sub	r1, r1, #1
   14584:	b	14598 <__assert_fail@plt+0x2f5c>
   14588:	movw	r0, #58000	; 0xe290
   1458c:	movt	r0, #2
   14590:	ldr	r1, [r0]
   14594:	add	r1, r1, #1
   14598:	str	r1, [r0]
   1459c:	mov	r0, r4
   145a0:	pop	{r4, sl, fp, lr}
   145a4:	b	11630 <putchar_unlocked@plt>
   145a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145ac:	add	fp, sp, #28
   145b0:	sub	sp, sp, #4
   145b4:	mov	r4, r0
   145b8:	ldr	r0, [r0]
   145bc:	bl	1139c <getc_unlocked@plt>
   145c0:	movw	r8, #58008	; 0xe298
   145c4:	mov	r5, r0
   145c8:	cmp	r0, #12
   145cc:	movt	r8, #2
   145d0:	ldr	r7, [r8]
   145d4:	bne	14604 <__assert_fail@plt+0x2fc8>
   145d8:	ldrb	r0, [r4, #37]	; 0x25
   145dc:	cmp	r0, #0
   145e0:	beq	14894 <__assert_fail@plt+0x3258>
   145e4:	ldr	r0, [r4]
   145e8:	bl	1139c <getc_unlocked@plt>
   145ec:	mov	r5, r0
   145f0:	cmp	r0, #10
   145f4:	bne	14604 <__assert_fail@plt+0x2fc8>
   145f8:	ldr	r0, [r4]
   145fc:	bl	1139c <getc_unlocked@plt>
   14600:	mov	r5, r0
   14604:	mov	r0, #0
   14608:	cmn	r5, #1
   1460c:	strb	r0, [r4, #37]	; 0x25
   14610:	beq	14634 <__assert_fail@plt+0x2ff8>
   14614:	cmp	r5, #10
   14618:	beq	14640 <__assert_fail@plt+0x3004>
   1461c:	cmp	r5, #12
   14620:	beq	1489c <__assert_fail@plt+0x3260>
   14624:	uxtb	r0, r5
   14628:	bl	14cb0 <__assert_fail@plt+0x3674>
   1462c:	mov	r6, r0
   14630:	b	14640 <__assert_fail@plt+0x3004>
   14634:	mov	r0, r4
   14638:	bl	141f4 <__assert_fail@plt+0x2bb8>
   1463c:	b	1492c <__assert_fail@plt+0x32f0>
   14640:	movw	r0, #57883	; 0xe21b
   14644:	movt	r0, #2
   14648:	ldrb	r0, [r0]
   1464c:	cmp	r0, #1
   14650:	bne	14674 <__assert_fail@plt+0x3038>
   14654:	movw	r0, #57916	; 0xe23c
   14658:	ldr	r1, [r8]
   1465c:	movt	r0, #2
   14660:	ldr	r0, [r0]
   14664:	cmp	r1, r0
   14668:	ble	14674 <__assert_fail@plt+0x3038>
   1466c:	str	r7, [r8]
   14670:	b	14938 <__assert_fail@plt+0x32fc>
   14674:	ldr	r0, [r4, #16]
   14678:	movw	r1, #17172	; 0x4314
   1467c:	movt	r1, #1
   14680:	cmp	r0, r1
   14684:	beq	147c0 <__assert_fail@plt+0x3184>
   14688:	movw	r0, #57988	; 0xe284
   1468c:	mov	r1, #1
   14690:	movt	r0, #2
   14694:	strb	r1, [r0]
   14698:	movw	r0, #57989	; 0xe285
   1469c:	movt	r0, #2
   146a0:	ldrb	r0, [r0]
   146a4:	cmp	r0, #1
   146a8:	bne	146c0 <__assert_fail@plt+0x3084>
   146ac:	movw	r0, #57841	; 0xe1f1
   146b0:	movt	r0, #2
   146b4:	ldrb	r0, [r0]
   146b8:	cmp	r0, #1
   146bc:	bleq	14998 <__assert_fail@plt+0x335c>
   146c0:	movw	r0, #57862	; 0xe206
   146c4:	movw	r7, #57992	; 0xe288
   146c8:	movt	r0, #2
   146cc:	movt	r7, #2
   146d0:	ldrb	r0, [r0]
   146d4:	cmp	r0, #1
   146d8:	bne	14784 <__assert_fail@plt+0x3148>
   146dc:	movw	r0, #58014	; 0xe29e
   146e0:	movt	r0, #2
   146e4:	ldrb	r0, [r0]
   146e8:	cmp	r0, #1
   146ec:	bne	14784 <__assert_fail@plt+0x3148>
   146f0:	movw	sl, #58004	; 0xe294
   146f4:	mov	r0, #0
   146f8:	movt	sl, #2
   146fc:	ldr	r9, [sl]
   14700:	str	r0, [sl]
   14704:	cmp	r9, #1
   14708:	blt	14738 <__assert_fail@plt+0x30fc>
   1470c:	movw	r0, #57932	; 0xe24c
   14710:	movt	r0, #2
   14714:	ldr	r7, [r0]
   14718:	mov	r0, r7
   1471c:	bl	14ec0 <__assert_fail@plt+0x3884>
   14720:	ldr	r0, [sl]
   14724:	subs	r9, r9, #1
   14728:	add	r7, r7, #40	; 0x28
   1472c:	add	r0, r0, #1
   14730:	str	r0, [sl]
   14734:	bne	14718 <__assert_fail@plt+0x30dc>
   14738:	movw	r1, #58014	; 0xe29e
   1473c:	mov	r2, #0
   14740:	ldr	r0, [r4, #32]
   14744:	movw	r7, #57992	; 0xe288
   14748:	movt	r1, #2
   1474c:	movt	r7, #2
   14750:	strb	r2, [r1]
   14754:	movw	r1, #57883	; 0xe21b
   14758:	movt	r1, #2
   1475c:	str	r0, [r7]
   14760:	movw	r0, #57916	; 0xe23c
   14764:	movt	r0, #2
   14768:	ldrb	r1, [r1]
   1476c:	ldr	r0, [r0]
   14770:	cmp	r1, #0
   14774:	moveq	r0, r1
   14778:	movw	r1, #57996	; 0xe28c
   1477c:	movt	r1, #2
   14780:	str	r0, [r1]
   14784:	movw	r1, #57876	; 0xe214
   14788:	ldr	r0, [r7]
   1478c:	movt	r1, #2
   14790:	ldr	r1, [r1]
   14794:	cmp	r0, r1
   14798:	ble	147ac <__assert_fail@plt+0x3170>
   1479c:	sub	r0, r0, r1
   147a0:	bl	14ac8 <__assert_fail@plt+0x348c>
   147a4:	mov	r0, #0
   147a8:	str	r0, [r7]
   147ac:	movw	r0, #57873	; 0xe211
   147b0:	movt	r0, #2
   147b4:	ldrb	r0, [r0]
   147b8:	cmp	r0, #1
   147bc:	bleq	14b2c <__assert_fail@plt+0x34f0>
   147c0:	ldrb	r0, [r4, #36]	; 0x24
   147c4:	cmp	r0, #0
   147c8:	movne	r0, r4
   147cc:	blne	14f2c <__assert_fail@plt+0x38f0>
   147d0:	movw	r0, #58015	; 0xe29f
   147d4:	mov	r1, #0
   147d8:	mov	r7, #1
   147dc:	cmp	r5, #10
   147e0:	movt	r0, #2
   147e4:	strb	r1, [r0]
   147e8:	beq	1493c <__assert_fail@plt+0x3300>
   147ec:	movw	sl, #57924	; 0xe244
   147f0:	cmp	r6, #0
   147f4:	movt	sl, #2
   147f8:	beq	14814 <__assert_fail@plt+0x31d8>
   147fc:	ldr	r5, [sl]
   14800:	ldrb	r0, [r5], #1
   14804:	ldr	r1, [r4, #16]
   14808:	blx	r1
   1480c:	subs	r6, r6, #1
   14810:	bne	14800 <__assert_fail@plt+0x31c4>
   14814:	movw	r9, #57916	; 0xe23c
   14818:	movt	r9, #2
   1481c:	ldr	r0, [r4]
   14820:	bl	1139c <getc_unlocked@plt>
   14824:	cmn	r0, #1
   14828:	beq	14948 <__assert_fail@plt+0x330c>
   1482c:	cmp	r0, #10
   14830:	beq	1493c <__assert_fail@plt+0x3300>
   14834:	cmp	r0, #12
   14838:	beq	14954 <__assert_fail@plt+0x3318>
   1483c:	ldr	r6, [r8]
   14840:	uxtb	r0, r0
   14844:	bl	14cb0 <__assert_fail@plt+0x3674>
   14848:	mov	r5, r0
   1484c:	movw	r0, #57883	; 0xe21b
   14850:	movt	r0, #2
   14854:	ldrb	r0, [r0]
   14858:	cmp	r0, #1
   1485c:	bne	14870 <__assert_fail@plt+0x3234>
   14860:	ldr	r0, [r9]
   14864:	ldr	r1, [r8]
   14868:	cmp	r1, r0
   1486c:	bgt	14934 <__assert_fail@plt+0x32f8>
   14870:	cmp	r5, #0
   14874:	beq	1481c <__assert_fail@plt+0x31e0>
   14878:	ldr	r6, [sl]
   1487c:	ldrb	r0, [r6], #1
   14880:	ldr	r1, [r4, #16]
   14884:	blx	r1
   14888:	subs	r5, r5, #1
   1488c:	bne	1487c <__assert_fail@plt+0x3240>
   14890:	b	1481c <__assert_fail@plt+0x31e0>
   14894:	mov	r0, #0
   14898:	strb	r0, [r4, #37]	; 0x25
   1489c:	ldr	r0, [r4]
   148a0:	bl	1139c <getc_unlocked@plt>
   148a4:	cmp	r0, #10
   148a8:	beq	148b4 <__assert_fail@plt+0x3278>
   148ac:	ldr	r1, [r4]
   148b0:	bl	11504 <ungetc@plt>
   148b4:	movw	r0, #58012	; 0xe29c
   148b8:	mov	r1, #1
   148bc:	movt	r0, #2
   148c0:	strb	r1, [r0]
   148c4:	movw	r0, #57989	; 0xe285
   148c8:	movt	r0, #2
   148cc:	ldrb	r0, [r0]
   148d0:	cmp	r0, #1
   148d4:	bne	14904 <__assert_fail@plt+0x32c8>
   148d8:	movw	r0, #57841	; 0xe1f1
   148dc:	movt	r0, #2
   148e0:	ldrb	r0, [r0]
   148e4:	cmp	r0, #1
   148e8:	bne	14904 <__assert_fail@plt+0x32c8>
   148ec:	movw	r0, #57988	; 0xe284
   148f0:	mov	r1, #1
   148f4:	movt	r0, #2
   148f8:	strb	r1, [r0]
   148fc:	bl	14998 <__assert_fail@plt+0x335c>
   14900:	b	14924 <__assert_fail@plt+0x32e8>
   14904:	movw	r0, #57881	; 0xe219
   14908:	movt	r0, #2
   1490c:	ldrb	r0, [r0]
   14910:	cmp	r0, #1
   14914:	movweq	r0, #58013	; 0xe29d
   14918:	moveq	r1, #1
   1491c:	movteq	r0, #2
   14920:	strbeq	r1, [r0]
   14924:	mov	r0, r4
   14928:	bl	1416c <__assert_fail@plt+0x2b30>
   1492c:	mov	r7, #1
   14930:	b	1493c <__assert_fail@plt+0x3300>
   14934:	str	r6, [r8]
   14938:	mov	r7, #0
   1493c:	mov	r0, r7
   14940:	sub	sp, fp, #28
   14944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14948:	mov	r0, r4
   1494c:	bl	141f4 <__assert_fail@plt+0x2bb8>
   14950:	b	1493c <__assert_fail@plt+0x3300>
   14954:	ldr	r0, [r4]
   14958:	bl	1139c <getc_unlocked@plt>
   1495c:	cmp	r0, #10
   14960:	beq	1496c <__assert_fail@plt+0x3330>
   14964:	ldr	r1, [r4]
   14968:	bl	11504 <ungetc@plt>
   1496c:	movw	r0, #57881	; 0xe219
   14970:	movt	r0, #2
   14974:	ldrb	r0, [r0]
   14978:	cmp	r0, #1
   1497c:	movweq	r0, #58013	; 0xe29d
   14980:	moveq	r1, #1
   14984:	movteq	r0, #2
   14988:	strbeq	r1, [r0]
   1498c:	mov	r0, r4
   14990:	bl	1416c <__assert_fail@plt+0x2b30>
   14994:	b	1493c <__assert_fail@plt+0x3300>
   14998:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1499c:	add	fp, sp, #24
   149a0:	sub	sp, sp, #304	; 0x130
   149a4:	movw	r7, #57868	; 0xe20c
   149a8:	movw	r8, #58000	; 0xe290
   149ac:	mov	r6, #0
   149b0:	movt	r7, #2
   149b4:	movt	r8, #2
   149b8:	ldr	r0, [r7]
   149bc:	str	r6, [r8]
   149c0:	bl	14ac8 <__assert_fail@plt+0x348c>
   149c4:	bl	14c10 <__assert_fail@plt+0x35d4>
   149c8:	movw	r4, #57896	; 0xe228
   149cc:	movt	r4, #2
   149d0:	ldrd	r0, [r4]
   149d4:	orrs	r0, r0, r1
   149d8:	beq	14aa4 <__assert_fail@plt+0x3468>
   149dc:	movw	r1, #51982	; 0xcb0e
   149e0:	mov	r0, #0
   149e4:	mov	r2, #5
   149e8:	movt	r1, #1
   149ec:	bl	113a8 <dcgettext@plt>
   149f0:	mov	r3, r0
   149f4:	ldrd	r0, [r4]
   149f8:	add	r4, sp, #28
   149fc:	mov	r2, #276	; 0x114
   14a00:	stm	sp, {r0, r1}
   14a04:	mov	r0, r4
   14a08:	mov	r1, #1
   14a0c:	bl	1151c <__sprintf_chk@plt>
   14a10:	movw	r0, #57960	; 0xe268
   14a14:	mov	r1, #0
   14a18:	movt	r0, #2
   14a1c:	ldr	r5, [r0]
   14a20:	mov	r0, r4
   14a24:	bl	156d4 <__assert_fail@plt+0x4098>
   14a28:	movw	r1, #57952	; 0xe260
   14a2c:	movw	r3, #57956	; 0xe264
   14a30:	sub	r0, r5, r0
   14a34:	movw	r5, #51901	; 0xcabd
   14a38:	ldr	r2, [r7]
   14a3c:	movt	r1, #2
   14a40:	movt	r3, #2
   14a44:	bic	r0, r0, r0, asr #31
   14a48:	movt	r5, #1
   14a4c:	ldr	r1, [r1]
   14a50:	ldr	r3, [r3]
   14a54:	sub	r7, r0, r0, lsr #1
   14a58:	lsr	r0, r0, #1
   14a5c:	str	r1, [sp]
   14a60:	stmib	sp, {r0, r5}
   14a64:	movw	r1, #51992	; 0xcb18
   14a68:	str	r3, [sp, #12]
   14a6c:	movw	r3, #51900	; 0xcabc
   14a70:	mov	r0, #1
   14a74:	str	r7, [sp, #16]
   14a78:	str	r5, [sp, #20]
   14a7c:	str	r4, [sp, #24]
   14a80:	movt	r1, #1
   14a84:	movt	r3, #1
   14a88:	bl	11540 <__printf_chk@plt>
   14a8c:	movw	r0, #57989	; 0xe285
   14a90:	str	r6, [r8]
   14a94:	movt	r0, #2
   14a98:	strb	r6, [r0]
   14a9c:	sub	sp, fp, #24
   14aa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14aa4:	movw	r1, #51961	; 0xcaf9
   14aa8:	mov	r0, #0
   14aac:	mov	r2, #5
   14ab0:	movt	r1, #1
   14ab4:	bl	113a8 <dcgettext@plt>
   14ab8:	mov	r2, r0
   14abc:	mov	r0, #1
   14ac0:	mov	r1, #0
   14ac4:	bl	11444 <error@plt>
   14ac8:	push	{r4, r5, r6, sl, fp, lr}
   14acc:	add	fp, sp, #16
   14ad0:	movw	r1, #57860	; 0xe204
   14ad4:	movw	r5, #58000	; 0xe290
   14ad8:	mov	r4, r0
   14adc:	movt	r1, #2
   14ae0:	movt	r5, #2
   14ae4:	ldrb	r1, [r1]
   14ae8:	ldr	r0, [r5]
   14aec:	cmp	r1, #0
   14af0:	beq	14b08 <__assert_fail@plt+0x34cc>
   14af4:	movw	r1, #57996	; 0xe28c
   14af8:	sub	r0, r4, r0
   14afc:	movt	r1, #2
   14b00:	str	r0, [r1]
   14b04:	pop	{r4, r5, r6, sl, fp, pc}
   14b08:	cmp	r0, r4
   14b0c:	bge	14b24 <__assert_fail@plt+0x34e8>
   14b10:	sub	r6, r4, r0
   14b14:	mov	r0, #32
   14b18:	bl	11630 <putchar_unlocked@plt>
   14b1c:	subs	r6, r6, #1
   14b20:	bne	14b14 <__assert_fail@plt+0x34d8>
   14b24:	str	r4, [r5]
   14b28:	pop	{r4, r5, r6, sl, fp, pc}
   14b2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b30:	add	fp, sp, #24
   14b34:	movw	r8, #58004	; 0xe294
   14b38:	movt	r8, #2
   14b3c:	ldr	r0, [r8]
   14b40:	cmp	r0, #1
   14b44:	blt	14bf4 <__assert_fail@plt+0x35b8>
   14b48:	movw	r0, #57696	; 0xe160
   14b4c:	movw	r6, #57996	; 0xe28c
   14b50:	movw	r7, #58000	; 0xe290
   14b54:	movt	r0, #2
   14b58:	movt	r6, #2
   14b5c:	movt	r7, #2
   14b60:	ldr	r5, [r0]
   14b64:	movw	r0, #57876	; 0xe214
   14b68:	movt	r0, #2
   14b6c:	ldr	r4, [r0]
   14b70:	subs	r0, r4, #1
   14b74:	blt	14bcc <__assert_fail@plt+0x3590>
   14b78:	ldrb	r0, [r5]
   14b7c:	ldr	r1, [r6]
   14b80:	cmp	r0, #32
   14b84:	bne	14b90 <__assert_fail@plt+0x3554>
   14b88:	mov	r0, r6
   14b8c:	b	14bac <__assert_fail@plt+0x3570>
   14b90:	cmp	r1, #1
   14b94:	blt	14ba0 <__assert_fail@plt+0x3564>
   14b98:	bl	14c10 <__assert_fail@plt+0x35d4>
   14b9c:	ldrb	r0, [r5]
   14ba0:	bl	11630 <putchar_unlocked@plt>
   14ba4:	ldr	r1, [r7]
   14ba8:	mov	r0, r7
   14bac:	sub	r4, r4, #1
   14bb0:	add	r1, r1, #1
   14bb4:	add	r5, r5, #1
   14bb8:	cmp	r4, #0
   14bbc:	str	r1, [r0]
   14bc0:	bgt	14b78 <__assert_fail@plt+0x353c>
   14bc4:	mvn	r4, #0
   14bc8:	b	14bd0 <__assert_fail@plt+0x3594>
   14bcc:	mov	r4, r0
   14bd0:	ldr	r0, [r6]
   14bd4:	cmp	r0, #1
   14bd8:	blge	14c10 <__assert_fail@plt+0x35d4>
   14bdc:	ldr	r0, [r8]
   14be0:	sub	r0, r0, #1
   14be4:	cmp	r0, #0
   14be8:	str	r0, [r8]
   14bec:	bgt	14b70 <__assert_fail@plt+0x3534>
   14bf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bf4:	movw	r0, #57996	; 0xe28c
   14bf8:	movt	r0, #2
   14bfc:	ldr	r0, [r0]
   14c00:	cmp	r0, #1
   14c04:	blt	14bf0 <__assert_fail@plt+0x35b4>
   14c08:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c0c:	b	14c10 <__assert_fail@plt+0x35d4>
   14c10:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14c14:	add	fp, sp, #24
   14c18:	movw	r8, #58000	; 0xe290
   14c1c:	movw	r9, #57996	; 0xe28c
   14c20:	movt	r8, #2
   14c24:	movt	r9, #2
   14c28:	ldr	r1, [r9]
   14c2c:	ldr	r0, [r8]
   14c30:	add	r6, r1, r0
   14c34:	cmp	r1, #2
   14c38:	blt	14c84 <__assert_fail@plt+0x3648>
   14c3c:	movw	r7, #57676	; 0xe14c
   14c40:	movw	r4, #57672	; 0xe148
   14c44:	movt	r7, #2
   14c48:	movt	r4, #2
   14c4c:	ldr	r1, [r7]
   14c50:	sdiv	r2, r0, r1
   14c54:	mul	r2, r2, r1
   14c58:	sub	r2, r2, r0
   14c5c:	add	r1, r1, r2
   14c60:	add	r5, r1, r0
   14c64:	cmp	r6, r5
   14c68:	blt	14c84 <__assert_fail@plt+0x3648>
   14c6c:	ldrb	r0, [r4]
   14c70:	bl	11630 <putchar_unlocked@plt>
   14c74:	sub	r0, r6, r5
   14c78:	cmp	r0, #1
   14c7c:	mov	r0, r5
   14c80:	bgt	14c4c <__assert_fail@plt+0x3610>
   14c84:	cmp	r0, r6
   14c88:	bge	14ca0 <__assert_fail@plt+0x3664>
   14c8c:	sub	r4, r6, r0
   14c90:	mov	r0, #32
   14c94:	bl	11630 <putchar_unlocked@plt>
   14c98:	subs	r4, r4, #1
   14c9c:	bne	14c90 <__assert_fail@plt+0x3654>
   14ca0:	mov	r0, #0
   14ca4:	str	r6, [r8]
   14ca8:	str	r0, [r9]
   14cac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14cb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14cb4:	add	fp, sp, #24
   14cb8:	sub	sp, sp, #8
   14cbc:	mov	r6, r0
   14cc0:	movw	r0, #57664	; 0xe140
   14cc4:	movw	r2, #57924	; 0xe244
   14cc8:	movw	r8, #58008	; 0xe298
   14ccc:	movt	r0, #2
   14cd0:	movt	r2, #2
   14cd4:	movt	r8, #2
   14cd8:	ldrb	r1, [r0]
   14cdc:	movw	r0, #57668	; 0xe144
   14ce0:	ldr	r5, [r2]
   14ce4:	movt	r0, #2
   14ce8:	ldr	r0, [r0]
   14cec:	cmp	r1, r6
   14cf0:	movne	r0, #8
   14cf4:	cmp	r6, #9
   14cf8:	cmpne	r1, r6
   14cfc:	bne	14d48 <__assert_fail@plt+0x370c>
   14d00:	ldr	r7, [r8]
   14d04:	sdiv	r1, r7, r0
   14d08:	mul	r1, r1, r0
   14d0c:	sub	r1, r1, r7
   14d10:	add	r4, r0, r1
   14d14:	movw	r0, #57852	; 0xe1fc
   14d18:	movt	r0, #2
   14d1c:	ldrb	r0, [r0]
   14d20:	cmp	r0, #1
   14d24:	bne	14dbc <__assert_fail@plt+0x3780>
   14d28:	cmp	r4, #0
   14d2c:	beq	14e50 <__assert_fail@plt+0x3814>
   14d30:	mov	r0, r5
   14d34:	mov	r1, #32
   14d38:	mov	r2, r4
   14d3c:	bl	11534 <memset@plt>
   14d40:	mov	r0, r4
   14d44:	b	14dc4 <__assert_fail@plt+0x3788>
   14d48:	bl	114bc <__ctype_b_loc@plt>
   14d4c:	ldr	r0, [r0]
   14d50:	add	r0, r0, r6, lsl #1
   14d54:	ldrb	r0, [r0, #1]
   14d58:	tst	r0, #64	; 0x40
   14d5c:	bne	14de0 <__assert_fail@plt+0x37a4>
   14d60:	movw	r0, #57882	; 0xe21a
   14d64:	movt	r0, #2
   14d68:	ldrb	r0, [r0]
   14d6c:	cmp	r0, #1
   14d70:	bne	14e18 <__assert_fail@plt+0x37dc>
   14d74:	movw	r3, #52013	; 0xcb2d
   14d78:	mov	r0, #92	; 0x5c
   14d7c:	mov	r1, #1
   14d80:	mov	r2, #4
   14d84:	mov	r4, #4
   14d88:	strb	r0, [r5], #1
   14d8c:	str	r6, [sp]
   14d90:	add	r6, sp, #4
   14d94:	movt	r3, #1
   14d98:	mov	r0, r6
   14d9c:	bl	1151c <__sprintf_chk@plt>
   14da0:	mov	r0, #0
   14da4:	ldrb	r1, [r6, r0]
   14da8:	strb	r1, [r5, r0]
   14dac:	add	r0, r0, #1
   14db0:	cmp	r0, #3
   14db4:	bne	14da4 <__assert_fail@plt+0x3768>
   14db8:	b	14de8 <__assert_fail@plt+0x37ac>
   14dbc:	strb	r6, [r5]
   14dc0:	mov	r0, #1
   14dc4:	mov	r1, #0
   14dc8:	cmn	r4, #1
   14dcc:	bgt	14df8 <__assert_fail@plt+0x37bc>
   14dd0:	cmp	r7, #0
   14dd4:	bne	14df8 <__assert_fail@plt+0x37bc>
   14dd8:	mov	r0, #0
   14ddc:	b	14e0c <__assert_fail@plt+0x37d0>
   14de0:	mov	r4, #1
   14de4:	strb	r6, [r5]
   14de8:	ldr	r7, [r8]
   14dec:	mov	r0, r4
   14df0:	add	r1, r7, r4
   14df4:	b	14e0c <__assert_fail@plt+0x37d0>
   14df8:	rsb	r2, r4, #0
   14dfc:	cmp	r7, r2
   14e00:	bgt	14df0 <__assert_fail@plt+0x37b4>
   14e04:	cmp	r4, #0
   14e08:	addpl	r1, r7, r4
   14e0c:	str	r1, [r8]
   14e10:	sub	sp, fp, #24
   14e14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e18:	movw	r0, #57843	; 0xe1f3
   14e1c:	movt	r0, #2
   14e20:	ldrb	r0, [r0]
   14e24:	cmp	r0, #1
   14e28:	bne	14e5c <__assert_fail@plt+0x3820>
   14e2c:	sxtb	r0, r6
   14e30:	cmp	r0, #0
   14e34:	bmi	14e78 <__assert_fail@plt+0x383c>
   14e38:	mov	r0, #94	; 0x5e
   14e3c:	mov	r4, #2
   14e40:	strb	r0, [r5]
   14e44:	eor	r0, r6, #64	; 0x40
   14e48:	strb	r0, [r5, #1]
   14e4c:	b	14de8 <__assert_fail@plt+0x37ac>
   14e50:	mov	r4, #0
   14e54:	mov	r0, #0
   14e58:	b	14df0 <__assert_fail@plt+0x37b4>
   14e5c:	strb	r6, [r5]
   14e60:	cmp	r6, #8
   14e64:	mov	r4, #0
   14e68:	mov	r0, #1
   14e6c:	ldr	r7, [r8]
   14e70:	mvneq	r4, #0
   14e74:	b	14dc4 <__assert_fail@plt+0x3788>
   14e78:	movw	r3, #52013	; 0xcb2d
   14e7c:	mov	r0, #92	; 0x5c
   14e80:	mov	r1, #1
   14e84:	mov	r2, #4
   14e88:	mov	r4, #4
   14e8c:	strb	r0, [r5], #1
   14e90:	str	r6, [sp]
   14e94:	add	r6, sp, #4
   14e98:	movt	r3, #1
   14e9c:	mov	r0, r6
   14ea0:	bl	1151c <__sprintf_chk@plt>
   14ea4:	mov	r0, #0
   14ea8:	ldrb	r1, [r6, r0]
   14eac:	strb	r1, [r5, r0]
   14eb0:	add	r0, r0, #1
   14eb4:	cmp	r0, #3
   14eb8:	bne	14ea8 <__assert_fail@plt+0x386c>
   14ebc:	b	14de8 <__assert_fail@plt+0x37ac>
   14ec0:	push	{r4, r5, fp, lr}
   14ec4:	add	fp, sp, #8
   14ec8:	movw	r1, #57876	; 0xe214
   14ecc:	mov	r4, r0
   14ed0:	ldr	r0, [r0, #32]
   14ed4:	movw	r5, #57992	; 0xe288
   14ed8:	movt	r1, #2
   14edc:	movt	r5, #2
   14ee0:	ldr	r1, [r1]
   14ee4:	str	r0, [r5]
   14ee8:	cmp	r0, r1
   14eec:	ble	14f00 <__assert_fail@plt+0x38c4>
   14ef0:	sub	r0, r0, r1
   14ef4:	bl	14ac8 <__assert_fail@plt+0x348c>
   14ef8:	mov	r0, #0
   14efc:	str	r0, [r5]
   14f00:	movw	r0, #57873	; 0xe211
   14f04:	movt	r0, #2
   14f08:	ldrb	r0, [r0]
   14f0c:	cmp	r0, #1
   14f10:	bleq	14b2c <__assert_fail@plt+0x34f0>
   14f14:	ldrb	r0, [r4, #36]	; 0x24
   14f18:	cmp	r0, #0
   14f1c:	popeq	{r4, r5, fp, pc}
   14f20:	mov	r0, r4
   14f24:	pop	{r4, r5, fp, lr}
   14f28:	b	14f2c <__assert_fail@plt+0x38f0>
   14f2c:	push	{r4, r5, r6, r7, fp, lr}
   14f30:	add	fp, sp, #16
   14f34:	sub	sp, sp, #8
   14f38:	movw	r5, #57688	; 0xe158
   14f3c:	movw	r6, #57920	; 0xe240
   14f40:	movw	r7, #57904	; 0xe230
   14f44:	mov	r4, r0
   14f48:	movw	r3, #52018	; 0xcb32
   14f4c:	movt	r5, #2
   14f50:	movt	r6, #2
   14f54:	movt	r7, #2
   14f58:	movt	r3, #1
   14f5c:	ldr	r1, [r5]
   14f60:	ldr	r0, [r6]
   14f64:	ldr	r2, [r7]
   14f68:	stm	sp, {r1, r2}
   14f6c:	mov	r1, #1
   14f70:	mvn	r2, #0
   14f74:	bl	1151c <__sprintf_chk@plt>
   14f78:	ldr	r1, [r7]
   14f7c:	add	r1, r1, #1
   14f80:	str	r1, [r7]
   14f84:	ldr	r7, [r5]
   14f88:	cmp	r7, #1
   14f8c:	blt	14fb0 <__assert_fail@plt+0x3974>
   14f90:	ldr	r1, [r6]
   14f94:	add	r6, r1, r0
   14f98:	ldrb	r0, [r6, -r7]
   14f9c:	ldr	r1, [r4, #16]
   14fa0:	blx	r1
   14fa4:	sub	r7, r7, #1
   14fa8:	cmp	r7, #0
   14fac:	bgt	14f98 <__assert_fail@plt+0x395c>
   14fb0:	movw	r0, #57712	; 0xe170
   14fb4:	movt	r0, #2
   14fb8:	ldr	r0, [r0]
   14fbc:	cmp	r0, #2
   14fc0:	blt	15010 <__assert_fail@plt+0x39d4>
   14fc4:	movw	r0, #57684	; 0xe154
   14fc8:	movt	r0, #2
   14fcc:	ldrb	r0, [r0]
   14fd0:	cmp	r0, #9
   14fd4:	bne	15064 <__assert_fail@plt+0x3a28>
   14fd8:	movw	r1, #57912	; 0xe238
   14fdc:	ldr	r0, [r5]
   14fe0:	movt	r1, #2
   14fe4:	ldr	r1, [r1]
   14fe8:	sub	r5, r1, r0
   14fec:	cmp	r5, #1
   14ff0:	blt	1506c <__assert_fail@plt+0x3a30>
   14ff4:	ldr	r1, [r4, #16]
   14ff8:	mov	r0, #32
   14ffc:	blx	r1
   15000:	sub	r5, r5, #1
   15004:	cmp	r5, #0
   15008:	bgt	14ff4 <__assert_fail@plt+0x39b8>
   1500c:	b	1506c <__assert_fail@plt+0x3a30>
   15010:	movw	r5, #57684	; 0xe154
   15014:	ldr	r1, [r4, #16]
   15018:	movt	r5, #2
   1501c:	ldrb	r0, [r5]
   15020:	blx	r1
   15024:	ldrb	r0, [r5]
   15028:	cmp	r0, #9
   1502c:	bne	1506c <__assert_fail@plt+0x3a30>
   15030:	movw	r0, #58000	; 0xe290
   15034:	movw	r2, #57676	; 0xe14c
   15038:	movt	r2, #2
   1503c:	movt	r0, #2
   15040:	ldr	r1, [r0]
   15044:	ldr	r2, [r2]
   15048:	sdiv	r7, r1, r2
   1504c:	add	r3, r2, r1
   15050:	mul	r2, r7, r2
   15054:	sub	r1, r2, r1
   15058:	add	r1, r3, r1
   1505c:	str	r1, [r0]
   15060:	b	1506c <__assert_fail@plt+0x3a30>
   15064:	ldr	r1, [r4, #16]
   15068:	blx	r1
   1506c:	movw	r0, #57883	; 0xe21b
   15070:	movt	r0, #2
   15074:	ldrb	r0, [r0]
   15078:	cmp	r0, #1
   1507c:	bne	150b4 <__assert_fail@plt+0x3a78>
   15080:	movw	r0, #57862	; 0xe206
   15084:	movt	r0, #2
   15088:	ldrb	r0, [r0]
   1508c:	cmp	r0, #0
   15090:	bne	150b4 <__assert_fail@plt+0x3a78>
   15094:	movw	r0, #57912	; 0xe238
   15098:	movw	r1, #58008	; 0xe298
   1509c:	movt	r0, #2
   150a0:	movt	r1, #2
   150a4:	ldr	r0, [r0]
   150a8:	ldr	r2, [r1]
   150ac:	add	r0, r2, r0
   150b0:	str	r0, [r1]
   150b4:	sub	sp, fp, #16
   150b8:	pop	{r4, r5, r6, r7, fp, pc}
   150bc:	push	{fp, lr}
   150c0:	mov	fp, sp
   150c4:	movw	r0, #57712	; 0xe170
   150c8:	movt	r0, #2
   150cc:	ldr	lr, [r0]
   150d0:	cmp	lr, #0
   150d4:	beq	15144 <__assert_fail@plt+0x3b08>
   150d8:	movw	r0, #57841	; 0xe1f1
   150dc:	mov	r2, #0
   150e0:	movt	r0, #2
   150e4:	ldrb	ip, [r0]
   150e8:	movw	r0, #57932	; 0xe24c
   150ec:	movt	r0, #2
   150f0:	ldr	r0, [r0]
   150f4:	add	r3, r0, #28
   150f8:	mov	r0, #0
   150fc:	ldr	r1, [r3, #-20]	; 0xffffffec
   15100:	cmp	r1, #2
   15104:	bcs	15110 <__assert_fail@plt+0x3ad4>
   15108:	add	r0, r0, #1
   1510c:	b	15130 <__assert_fail@plt+0x3af4>
   15110:	cmp	ip, #0
   15114:	bne	15130 <__assert_fail@plt+0x3af4>
   15118:	ldr	r1, [r3, #-4]
   1511c:	cmp	r1, #1
   15120:	blt	15130 <__assert_fail@plt+0x3af4>
   15124:	ldr	r1, [r3]
   15128:	cmp	r1, #1
   1512c:	addge	r0, r0, #1
   15130:	add	r2, r2, #1
   15134:	add	r3, r3, #40	; 0x28
   15138:	cmp	r2, lr
   1513c:	bcc	150fc <__assert_fail@plt+0x3ac0>
   15140:	pop	{fp, pc}
   15144:	mov	r0, #0
   15148:	pop	{fp, pc}
   1514c:	push	{r4, r5, fp, lr}
   15150:	add	fp, sp, #8
   15154:	ldr	r5, [r0]
   15158:	mov	r4, r0
   1515c:	mov	r0, r5
   15160:	bl	1139c <getc_unlocked@plt>
   15164:	cmn	r0, #1
   15168:	beq	151c0 <__assert_fail@plt+0x3b84>
   1516c:	cmp	r0, #10
   15170:	beq	151cc <__assert_fail@plt+0x3b90>
   15174:	cmp	r0, #12
   15178:	bne	1515c <__assert_fail@plt+0x3b20>
   1517c:	mov	r0, r5
   15180:	bl	1139c <getc_unlocked@plt>
   15184:	cmp	r0, #10
   15188:	beq	15194 <__assert_fail@plt+0x3b58>
   1518c:	mov	r1, r5
   15190:	bl	11504 <ungetc@plt>
   15194:	movw	r0, #57881	; 0xe219
   15198:	movt	r0, #2
   1519c:	ldrb	r0, [r0]
   151a0:	cmp	r0, #1
   151a4:	movweq	r0, #58013	; 0xe29d
   151a8:	moveq	r1, #1
   151ac:	movteq	r0, #2
   151b0:	strbeq	r1, [r0]
   151b4:	mov	r0, r4
   151b8:	pop	{r4, r5, fp, lr}
   151bc:	b	1416c <__assert_fail@plt+0x2b30>
   151c0:	mov	r0, r4
   151c4:	pop	{r4, r5, fp, lr}
   151c8:	b	141f4 <__assert_fail@plt+0x2bb8>
   151cc:	pop	{r4, r5, fp, pc}
   151d0:	movw	r1, #58016	; 0xe2a0
   151d4:	movt	r1, #2
   151d8:	str	r0, [r1]
   151dc:	bx	lr
   151e0:	movw	r1, #58020	; 0xe2a4
   151e4:	movt	r1, #2
   151e8:	strb	r0, [r1]
   151ec:	bx	lr
   151f0:	push	{r4, r5, r6, sl, fp, lr}
   151f4:	add	fp, sp, #16
   151f8:	sub	sp, sp, #8
   151fc:	movw	r0, #57820	; 0xe1dc
   15200:	movt	r0, #2
   15204:	ldr	r0, [r0]
   15208:	bl	1b1e0 <__assert_fail@plt+0x9ba4>
   1520c:	cmp	r0, #0
   15210:	beq	15238 <__assert_fail@plt+0x3bfc>
   15214:	movw	r0, #58020	; 0xe2a4
   15218:	movt	r0, #2
   1521c:	ldrb	r0, [r0]
   15220:	cmp	r0, #0
   15224:	beq	15258 <__assert_fail@plt+0x3c1c>
   15228:	bl	11510 <__errno_location@plt>
   1522c:	ldr	r0, [r0]
   15230:	cmp	r0, #32
   15234:	bne	15258 <__assert_fail@plt+0x3c1c>
   15238:	movw	r0, #57808	; 0xe1d0
   1523c:	movt	r0, #2
   15240:	ldr	r0, [r0]
   15244:	bl	1b1e0 <__assert_fail@plt+0x9ba4>
   15248:	cmp	r0, #0
   1524c:	subeq	sp, fp, #16
   15250:	popeq	{r4, r5, r6, sl, fp, pc}
   15254:	b	152c8 <__assert_fail@plt+0x3c8c>
   15258:	movw	r1, #53023	; 0xcf1f
   1525c:	mov	r0, #0
   15260:	mov	r2, #5
   15264:	movt	r1, #1
   15268:	bl	113a8 <dcgettext@plt>
   1526c:	mov	r4, r0
   15270:	movw	r0, #58016	; 0xe2a0
   15274:	movt	r0, #2
   15278:	ldr	r6, [r0]
   1527c:	bl	11510 <__errno_location@plt>
   15280:	ldr	r5, [r0]
   15284:	cmp	r6, #0
   15288:	bne	152a4 <__assert_fail@plt+0x3c68>
   1528c:	movw	r2, #53039	; 0xcf2f
   15290:	mov	r0, #0
   15294:	mov	r1, r5
   15298:	mov	r3, r4
   1529c:	movt	r2, #1
   152a0:	b	152c4 <__assert_fail@plt+0x3c88>
   152a4:	mov	r0, r6
   152a8:	bl	18ae0 <__assert_fail@plt+0x74a4>
   152ac:	movw	r2, #53035	; 0xcf2b
   152b0:	mov	r3, r0
   152b4:	str	r4, [sp]
   152b8:	mov	r0, #0
   152bc:	mov	r1, r5
   152c0:	movt	r2, #1
   152c4:	bl	11444 <error@plt>
   152c8:	movw	r0, #57724	; 0xe17c
   152cc:	movt	r0, #2
   152d0:	ldr	r0, [r0]
   152d4:	bl	11378 <_exit@plt>
   152d8:	b	11330 <posix_fadvise64@plt>
   152dc:	cmp	r0, #0
   152e0:	bxeq	lr
   152e4:	push	{r4, sl, fp, lr}
   152e8:	add	fp, sp, #8
   152ec:	sub	sp, sp, #16
   152f0:	mov	r4, r1
   152f4:	bl	1154c <fileno@plt>
   152f8:	mov	r1, #0
   152fc:	mov	r2, #0
   15300:	mov	r3, #0
   15304:	str	r1, [sp]
   15308:	stmib	sp, {r1, r4}
   1530c:	bl	11330 <posix_fadvise64@plt>
   15310:	sub	sp, fp, #8
   15314:	pop	{r4, sl, fp, pc}
   15318:	push	{r4, r5, r6, sl, fp, lr}
   1531c:	add	fp, sp, #16
   15320:	sub	sp, sp, #8
   15324:	mov	r4, r0
   15328:	bl	1154c <fileno@plt>
   1532c:	cmn	r0, #1
   15330:	ble	153a4 <__assert_fail@plt+0x3d68>
   15334:	mov	r0, r4
   15338:	bl	11480 <__freading@plt>
   1533c:	cmp	r0, #0
   15340:	beq	1536c <__assert_fail@plt+0x3d30>
   15344:	mov	r0, r4
   15348:	bl	1154c <fileno@plt>
   1534c:	mov	r1, #1
   15350:	mov	r2, #0
   15354:	mov	r3, #0
   15358:	str	r1, [sp]
   1535c:	bl	11408 <lseek64@plt>
   15360:	and	r0, r0, r1
   15364:	cmn	r0, #1
   15368:	beq	153a4 <__assert_fail@plt+0x3d68>
   1536c:	mov	r0, r4
   15370:	bl	153b4 <__assert_fail@plt+0x3d78>
   15374:	cmp	r0, #0
   15378:	beq	153a4 <__assert_fail@plt+0x3d68>
   1537c:	bl	11510 <__errno_location@plt>
   15380:	ldr	r6, [r0]
   15384:	mov	r5, r0
   15388:	mov	r0, r4
   1538c:	bl	1157c <fclose@plt>
   15390:	cmp	r6, #0
   15394:	strne	r6, [r5]
   15398:	mvnne	r0, #0
   1539c:	sub	sp, fp, #16
   153a0:	pop	{r4, r5, r6, sl, fp, pc}
   153a4:	mov	r0, r4
   153a8:	sub	sp, fp, #16
   153ac:	pop	{r4, r5, r6, sl, fp, lr}
   153b0:	b	1157c <fclose@plt>
   153b4:	push	{r4, sl, fp, lr}
   153b8:	add	fp, sp, #8
   153bc:	sub	sp, sp, #8
   153c0:	mov	r4, r0
   153c4:	cmp	r0, #0
   153c8:	beq	15400 <__assert_fail@plt+0x3dc4>
   153cc:	mov	r0, r4
   153d0:	bl	11480 <__freading@plt>
   153d4:	cmp	r0, #0
   153d8:	beq	15400 <__assert_fail@plt+0x3dc4>
   153dc:	ldrb	r0, [r4, #1]
   153e0:	tst	r0, #1
   153e4:	beq	15400 <__assert_fail@plt+0x3dc4>
   153e8:	mov	r0, #1
   153ec:	mov	r2, #0
   153f0:	mov	r3, #0
   153f4:	str	r0, [sp]
   153f8:	mov	r0, r4
   153fc:	bl	154e4 <__assert_fail@plt+0x3ea8>
   15400:	mov	r0, r4
   15404:	sub	sp, fp, #8
   15408:	pop	{r4, sl, fp, lr}
   1540c:	b	11348 <fflush@plt>
   15410:	push	{r4, r5, r6, r7, fp, lr}
   15414:	add	fp, sp, #16
   15418:	mov	r5, r1
   1541c:	bl	115dc <fopen64@plt>
   15420:	mov	r4, #0
   15424:	cmp	r0, #0
   15428:	beq	154b4 <__assert_fail@plt+0x3e78>
   1542c:	mov	r6, r0
   15430:	bl	1154c <fileno@plt>
   15434:	cmp	r0, #2
   15438:	bhi	15494 <__assert_fail@plt+0x3e58>
   1543c:	bl	193b4 <__assert_fail@plt+0x7d78>
   15440:	cmn	r0, #1
   15444:	ble	1549c <__assert_fail@plt+0x3e60>
   15448:	mov	r7, r0
   1544c:	mov	r0, r6
   15450:	bl	15318 <__assert_fail@plt+0x3cdc>
   15454:	cmp	r0, #0
   15458:	bne	15474 <__assert_fail@plt+0x3e38>
   1545c:	mov	r0, r7
   15460:	mov	r1, r5
   15464:	bl	112dc <fdopen@plt>
   15468:	mov	r4, r0
   1546c:	cmp	r0, #0
   15470:	bne	154b4 <__assert_fail@plt+0x3e78>
   15474:	bl	11510 <__errno_location@plt>
   15478:	ldr	r5, [r0]
   1547c:	mov	r4, r0
   15480:	mov	r0, r7
   15484:	bl	11624 <close@plt>
   15488:	str	r5, [r4]
   1548c:	mov	r4, #0
   15490:	b	154b4 <__assert_fail@plt+0x3e78>
   15494:	mov	r4, r6
   15498:	b	154b4 <__assert_fail@plt+0x3e78>
   1549c:	bl	11510 <__errno_location@plt>
   154a0:	ldr	r7, [r0]
   154a4:	mov	r5, r0
   154a8:	mov	r0, r6
   154ac:	bl	15318 <__assert_fail@plt+0x3cdc>
   154b0:	str	r7, [r5]
   154b4:	mov	r0, r4
   154b8:	pop	{r4, r5, r6, r7, fp, pc}
   154bc:	push	{r4, r5, r6, sl, fp, lr}
   154c0:	add	fp, sp, #16
   154c4:	mov	r4, r0
   154c8:	bl	11510 <__errno_location@plt>
   154cc:	ldr	r6, [r0]
   154d0:	mov	r5, r0
   154d4:	mov	r0, r4
   154d8:	bl	11360 <free@plt>
   154dc:	str	r6, [r5]
   154e0:	pop	{r4, r5, r6, sl, fp, pc}
   154e4:	push	{r4, r5, r6, r7, fp, lr}
   154e8:	add	fp, sp, #16
   154ec:	sub	sp, sp, #8
   154f0:	mov	r4, r0
   154f4:	ldr	r0, [r0, #4]
   154f8:	mov	r5, r3
   154fc:	mov	r6, r2
   15500:	ldr	r1, [r4, #8]
   15504:	cmp	r1, r0
   15508:	bne	15524 <__assert_fail@plt+0x3ee8>
   1550c:	ldrd	r0, [r4, #16]
   15510:	cmp	r1, r0
   15514:	bne	15524 <__assert_fail@plt+0x3ee8>
   15518:	ldr	r0, [r4, #36]	; 0x24
   1551c:	cmp	r0, #0
   15520:	beq	1553c <__assert_fail@plt+0x3f00>
   15524:	mov	r0, r4
   15528:	mov	r2, r6
   1552c:	mov	r3, r5
   15530:	sub	sp, fp, #16
   15534:	pop	{r4, r5, r6, r7, fp, lr}
   15538:	b	11588 <fseeko64@plt>
   1553c:	ldr	r7, [fp, #8]
   15540:	mov	r0, r4
   15544:	bl	1154c <fileno@plt>
   15548:	mov	r2, r6
   1554c:	mov	r3, r5
   15550:	str	r7, [sp]
   15554:	bl	11408 <lseek64@plt>
   15558:	and	r2, r0, r1
   1555c:	cmn	r2, #1
   15560:	beq	1557c <__assert_fail@plt+0x3f40>
   15564:	strd	r0, [r4, #80]	; 0x50
   15568:	ldr	r0, [r4]
   1556c:	bic	r0, r0, #16
   15570:	str	r0, [r4]
   15574:	mov	r0, #0
   15578:	b	15580 <__assert_fail@plt+0x3f44>
   1557c:	mvn	r0, #0
   15580:	sub	sp, fp, #16
   15584:	pop	{r4, r5, r6, r7, fp, pc}
   15588:	mov	r1, r0
   1558c:	mov	r0, #0
   15590:	b	1136c <clock_gettime@plt>
   15594:	push	{fp, lr}
   15598:	mov	fp, sp
   1559c:	mov	r1, r0
   155a0:	mov	r0, #0
   155a4:	bl	1136c <clock_gettime@plt>
   155a8:	pop	{fp, pc}
   155ac:	push	{r4, sl, fp, lr}
   155b0:	add	fp, sp, #8
   155b4:	sub	sp, sp, #264	; 0x108
   155b8:	add	r1, sp, #7
   155bc:	movw	r2, #257	; 0x101
   155c0:	bl	18e6c <__assert_fail@plt+0x7830>
   155c4:	mov	r4, #0
   155c8:	cmp	r0, #0
   155cc:	bne	1560c <__assert_fail@plt+0x3fd0>
   155d0:	movw	r1, #53042	; 0xcf32
   155d4:	add	r0, sp, #7
   155d8:	mov	r2, #2
   155dc:	movt	r1, #1
   155e0:	bl	114d4 <bcmp@plt>
   155e4:	cmp	r0, #0
   155e8:	beq	1560c <__assert_fail@plt+0x3fd0>
   155ec:	movw	r1, #53044	; 0xcf34
   155f0:	add	r0, sp, #7
   155f4:	mov	r2, #6
   155f8:	movt	r1, #1
   155fc:	bl	114d4 <bcmp@plt>
   15600:	cmp	r0, #0
   15604:	mov	r4, r0
   15608:	movwne	r4, #1
   1560c:	mov	r0, r4
   15610:	sub	sp, fp, #8
   15614:	pop	{r4, sl, fp, pc}
   15618:	push	{r4, r5, r6, sl, fp, lr}
   1561c:	add	fp, sp, #16
   15620:	mov	r5, r0
   15624:	mov	r0, #0
   15628:	mov	r4, r1
   1562c:	add	r6, r2, #19
   15630:	cmp	r1, #0
   15634:	strb	r0, [r2, #20]
   15638:	bmi	15684 <__assert_fail@plt+0x4048>
   1563c:	mov	r0, r5
   15640:	mov	r1, r4
   15644:	mov	r2, #10
   15648:	mov	r3, #0
   1564c:	bl	1b510 <__assert_fail@plt+0x9ed4>
   15650:	add	r2, r0, r0, lsl #2
   15654:	sub	r2, r5, r2, lsl #1
   15658:	add	r2, r2, #48	; 0x30
   1565c:	strb	r2, [r6], #-1
   15660:	adds	r2, r5, #9
   15664:	mov	r5, r0
   15668:	adc	r3, r4, #0
   1566c:	rsbs	r2, r2, #18
   15670:	mov	r4, r1
   15674:	rscs	r2, r3, #0
   15678:	bcc	1563c <__assert_fail@plt+0x4000>
   1567c:	add	r6, r6, #1
   15680:	b	156cc <__assert_fail@plt+0x4090>
   15684:	mov	r0, r5
   15688:	mov	r1, r4
   1568c:	mov	r2, #10
   15690:	mov	r3, #0
   15694:	bl	1b510 <__assert_fail@plt+0x9ed4>
   15698:	add	r2, r0, r0, lsl #2
   1569c:	rsb	r2, r5, r2, lsl #1
   156a0:	add	r2, r2, #48	; 0x30
   156a4:	strb	r2, [r6], #-1
   156a8:	adds	r2, r5, #9
   156ac:	mov	r5, r0
   156b0:	adc	r3, r4, #0
   156b4:	rsbs	r2, r2, #18
   156b8:	mov	r4, r1
   156bc:	rscs	r2, r3, #0
   156c0:	bcc	15684 <__assert_fail@plt+0x4048>
   156c4:	mov	r0, #45	; 0x2d
   156c8:	strb	r0, [r6]
   156cc:	mov	r0, r6
   156d0:	pop	{r4, r5, r6, sl, fp, pc}
   156d4:	push	{r4, r5, fp, lr}
   156d8:	add	fp, sp, #8
   156dc:	mov	r4, r1
   156e0:	mov	r5, r0
   156e4:	bl	114e0 <strlen@plt>
   156e8:	mov	r1, r0
   156ec:	mov	r0, r5
   156f0:	mov	r2, r4
   156f4:	pop	{r4, r5, fp, lr}
   156f8:	b	156fc <__assert_fail@plt+0x40c0>
   156fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15700:	add	fp, sp, #28
   15704:	sub	sp, sp, #20
   15708:	mov	r5, r2
   1570c:	mov	r6, r1
   15710:	mov	r4, r0
   15714:	add	r7, r0, r1
   15718:	bl	11414 <__ctype_get_mb_cur_max@plt>
   1571c:	cmp	r0, #1
   15720:	bls	159c8 <__assert_fail@plt+0x438c>
   15724:	cmp	r6, #1
   15728:	blt	15a1c <__assert_fail@plt+0x43e0>
   1572c:	and	r2, r5, #1
   15730:	and	sl, r5, #2
   15734:	mov	r3, #0
   15738:	add	r8, sp, #4
   1573c:	add	r9, sp, #8
   15740:	mov	r5, #0
   15744:	ldrb	r0, [r4]
   15748:	sub	r0, r0, #32
   1574c:	cmp	r0, #94	; 0x5e
   15750:	bhi	158ec <__assert_fail@plt+0x42b0>
   15754:	add	r1, pc, #0
   15758:	ldr	pc, [r1, r0, lsl #2]
   1575c:	ldrdeq	r5, [r1], -r8
   15760:	ldrdeq	r5, [r1], -r8
   15764:	ldrdeq	r5, [r1], -r8
   15768:	ldrdeq	r5, [r1], -r8
   1576c:	andeq	r5, r1, ip, ror #17
   15770:	ldrdeq	r5, [r1], -r8
   15774:	ldrdeq	r5, [r1], -r8
   15778:	ldrdeq	r5, [r1], -r8
   1577c:	ldrdeq	r5, [r1], -r8
   15780:	ldrdeq	r5, [r1], -r8
   15784:	ldrdeq	r5, [r1], -r8
   15788:	ldrdeq	r5, [r1], -r8
   1578c:	ldrdeq	r5, [r1], -r8
   15790:	ldrdeq	r5, [r1], -r8
   15794:	ldrdeq	r5, [r1], -r8
   15798:	ldrdeq	r5, [r1], -r8
   1579c:	ldrdeq	r5, [r1], -r8
   157a0:	ldrdeq	r5, [r1], -r8
   157a4:	ldrdeq	r5, [r1], -r8
   157a8:	ldrdeq	r5, [r1], -r8
   157ac:	ldrdeq	r5, [r1], -r8
   157b0:	ldrdeq	r5, [r1], -r8
   157b4:	ldrdeq	r5, [r1], -r8
   157b8:	ldrdeq	r5, [r1], -r8
   157bc:	ldrdeq	r5, [r1], -r8
   157c0:	ldrdeq	r5, [r1], -r8
   157c4:	ldrdeq	r5, [r1], -r8
   157c8:	ldrdeq	r5, [r1], -r8
   157cc:	ldrdeq	r5, [r1], -r8
   157d0:	ldrdeq	r5, [r1], -r8
   157d4:	ldrdeq	r5, [r1], -r8
   157d8:	ldrdeq	r5, [r1], -r8
   157dc:	andeq	r5, r1, ip, ror #17
   157e0:	ldrdeq	r5, [r1], -r8
   157e4:	ldrdeq	r5, [r1], -r8
   157e8:	ldrdeq	r5, [r1], -r8
   157ec:	ldrdeq	r5, [r1], -r8
   157f0:	ldrdeq	r5, [r1], -r8
   157f4:	ldrdeq	r5, [r1], -r8
   157f8:	ldrdeq	r5, [r1], -r8
   157fc:	ldrdeq	r5, [r1], -r8
   15800:	ldrdeq	r5, [r1], -r8
   15804:	ldrdeq	r5, [r1], -r8
   15808:	ldrdeq	r5, [r1], -r8
   1580c:	ldrdeq	r5, [r1], -r8
   15810:	ldrdeq	r5, [r1], -r8
   15814:	ldrdeq	r5, [r1], -r8
   15818:	ldrdeq	r5, [r1], -r8
   1581c:	ldrdeq	r5, [r1], -r8
   15820:	ldrdeq	r5, [r1], -r8
   15824:	ldrdeq	r5, [r1], -r8
   15828:	ldrdeq	r5, [r1], -r8
   1582c:	ldrdeq	r5, [r1], -r8
   15830:	ldrdeq	r5, [r1], -r8
   15834:	ldrdeq	r5, [r1], -r8
   15838:	ldrdeq	r5, [r1], -r8
   1583c:	ldrdeq	r5, [r1], -r8
   15840:	ldrdeq	r5, [r1], -r8
   15844:	ldrdeq	r5, [r1], -r8
   15848:	ldrdeq	r5, [r1], -r8
   1584c:	ldrdeq	r5, [r1], -r8
   15850:	ldrdeq	r5, [r1], -r8
   15854:	ldrdeq	r5, [r1], -r8
   15858:	ldrdeq	r5, [r1], -r8
   1585c:	andeq	r5, r1, ip, ror #17
   15860:	ldrdeq	r5, [r1], -r8
   15864:	ldrdeq	r5, [r1], -r8
   15868:	ldrdeq	r5, [r1], -r8
   1586c:	ldrdeq	r5, [r1], -r8
   15870:	ldrdeq	r5, [r1], -r8
   15874:	ldrdeq	r5, [r1], -r8
   15878:	ldrdeq	r5, [r1], -r8
   1587c:	ldrdeq	r5, [r1], -r8
   15880:	ldrdeq	r5, [r1], -r8
   15884:	ldrdeq	r5, [r1], -r8
   15888:	ldrdeq	r5, [r1], -r8
   1588c:	ldrdeq	r5, [r1], -r8
   15890:	ldrdeq	r5, [r1], -r8
   15894:	ldrdeq	r5, [r1], -r8
   15898:	ldrdeq	r5, [r1], -r8
   1589c:	ldrdeq	r5, [r1], -r8
   158a0:	ldrdeq	r5, [r1], -r8
   158a4:	ldrdeq	r5, [r1], -r8
   158a8:	ldrdeq	r5, [r1], -r8
   158ac:	ldrdeq	r5, [r1], -r8
   158b0:	ldrdeq	r5, [r1], -r8
   158b4:	ldrdeq	r5, [r1], -r8
   158b8:	ldrdeq	r5, [r1], -r8
   158bc:	ldrdeq	r5, [r1], -r8
   158c0:	ldrdeq	r5, [r1], -r8
   158c4:	ldrdeq	r5, [r1], -r8
   158c8:	ldrdeq	r5, [r1], -r8
   158cc:	ldrdeq	r5, [r1], -r8
   158d0:	ldrdeq	r5, [r1], -r8
   158d4:	ldrdeq	r5, [r1], -r8
   158d8:	add	r5, r5, #1
   158dc:	add	r4, r4, #1
   158e0:	cmp	r4, r7
   158e4:	bcc	15744 <__assert_fail@plt+0x4108>
   158e8:	b	15a30 <__assert_fail@plt+0x43f4>
   158ec:	str	r2, [sp]
   158f0:	str	r3, [sp, #12]
   158f4:	str	r3, [sp, #8]
   158f8:	sub	r2, r7, r4
   158fc:	mov	r0, r8
   15900:	mov	r1, r4
   15904:	mov	r3, r9
   15908:	bl	1b470 <__assert_fail@plt+0x9e34>
   1590c:	cmp	r0, #0
   15910:	beq	1592c <__assert_fail@plt+0x42f0>
   15914:	mov	r6, r0
   15918:	cmn	r0, #2
   1591c:	beq	15994 <__assert_fail@plt+0x4358>
   15920:	cmn	r6, #1
   15924:	bne	15930 <__assert_fail@plt+0x42f4>
   15928:	b	159a8 <__assert_fail@plt+0x436c>
   1592c:	mov	r6, #1
   15930:	ldr	r0, [sp, #4]
   15934:	bl	11354 <wcwidth@plt>
   15938:	cmp	r0, #0
   1593c:	bmi	15958 <__assert_fail@plt+0x431c>
   15940:	mvn	r1, #-2147483648	; 0x80000000
   15944:	sub	r1, r1, r5
   15948:	cmp	r0, r1
   1594c:	bgt	15a24 <__assert_fail@plt+0x43e8>
   15950:	add	r5, r0, r5
   15954:	b	1597c <__assert_fail@plt+0x4340>
   15958:	cmp	sl, #0
   1595c:	bne	15a2c <__assert_fail@plt+0x43f0>
   15960:	ldr	r0, [sp, #4]
   15964:	bl	113d8 <iswcntrl@plt>
   15968:	cmp	r0, #0
   1596c:	bne	1597c <__assert_fail@plt+0x4340>
   15970:	cmn	r5, #-2147483647	; 0x80000001
   15974:	beq	15a24 <__assert_fail@plt+0x43e8>
   15978:	add	r5, r5, #1
   1597c:	mov	r0, r9
   15980:	add	r4, r4, r6
   15984:	bl	11390 <mbsinit@plt>
   15988:	cmp	r0, #0
   1598c:	beq	158f8 <__assert_fail@plt+0x42bc>
   15990:	b	159bc <__assert_fail@plt+0x4380>
   15994:	ldr	r0, [sp]
   15998:	mov	r4, r7
   1599c:	cmp	r0, #0
   159a0:	beq	159b8 <__assert_fail@plt+0x437c>
   159a4:	b	15a2c <__assert_fail@plt+0x43f0>
   159a8:	ldr	r0, [sp]
   159ac:	cmp	r0, #0
   159b0:	bne	15a2c <__assert_fail@plt+0x43f0>
   159b4:	add	r4, r4, #1
   159b8:	add	r5, r5, #1
   159bc:	ldr	r2, [sp]
   159c0:	mov	r3, #0
   159c4:	b	158e0 <__assert_fail@plt+0x42a4>
   159c8:	cmp	r6, #1
   159cc:	blt	15a1c <__assert_fail@plt+0x43e0>
   159d0:	and	r6, r5, #2
   159d4:	bl	114bc <__ctype_b_loc@plt>
   159d8:	ldr	r0, [r0]
   159dc:	mov	r5, #0
   159e0:	ldrb	r1, [r4], #1
   159e4:	add	r1, r0, r1, lsl #1
   159e8:	ldrh	r1, [r1]
   159ec:	tst	r1, #16384	; 0x4000
   159f0:	bne	15a04 <__assert_fail@plt+0x43c8>
   159f4:	cmp	r6, #0
   159f8:	bne	15a2c <__assert_fail@plt+0x43f0>
   159fc:	tst	r1, #2
   15a00:	bne	15a10 <__assert_fail@plt+0x43d4>
   15a04:	cmn	r5, #-2147483647	; 0x80000001
   15a08:	beq	15a24 <__assert_fail@plt+0x43e8>
   15a0c:	add	r5, r5, #1
   15a10:	cmp	r4, r7
   15a14:	bcc	159e0 <__assert_fail@plt+0x43a4>
   15a18:	b	15a30 <__assert_fail@plt+0x43f4>
   15a1c:	mov	r5, #0
   15a20:	b	15a30 <__assert_fail@plt+0x43f4>
   15a24:	mvn	r5, #-2147483648	; 0x80000000
   15a28:	b	15a30 <__assert_fail@plt+0x43f4>
   15a2c:	mvn	r5, #0
   15a30:	mov	r0, r5
   15a34:	sub	sp, fp, #28
   15a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a3c:	push	{fp, lr}
   15a40:	mov	fp, sp
   15a44:	sub	sp, sp, #24
   15a48:	mvn	ip, #0
   15a4c:	str	ip, [sp, #8]
   15a50:	mov	ip, #0
   15a54:	str	ip, [sp, #4]
   15a58:	str	ip, [sp]
   15a5c:	ldr	ip, [fp, #12]
   15a60:	str	ip, [sp, #16]
   15a64:	ldr	ip, [fp, #8]
   15a68:	str	ip, [sp, #12]
   15a6c:	bl	15a78 <__assert_fail@plt+0x443c>
   15a70:	mov	sp, fp
   15a74:	pop	{fp, pc}
   15a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a7c:	add	fp, sp, #28
   15a80:	sub	sp, sp, #132	; 0x84
   15a84:	sub	sp, sp, #1024	; 0x400
   15a88:	mov	r4, r3
   15a8c:	mov	r5, r2
   15a90:	str	r1, [sp, #96]	; 0x60
   15a94:	str	r0, [sp, #100]	; 0x64
   15a98:	bl	11510 <__errno_location@plt>
   15a9c:	mov	r2, r4
   15aa0:	ldrb	r3, [r5]
   15aa4:	str	r0, [sp, #60]	; 0x3c
   15aa8:	ldr	r0, [r0]
   15aac:	movw	r6, #51900	; 0xcabc
   15ab0:	ldr	r1, [r2, #8]!
   15ab4:	movt	r6, #1
   15ab8:	str	r0, [sp, #56]	; 0x38
   15abc:	cmp	r1, #0
   15ac0:	mov	r7, r1
   15ac4:	movweq	r7, #12
   15ac8:	cmp	r1, #12
   15acc:	subgt	r7, r1, #12
   15ad0:	ldr	r1, [r2, #32]
   15ad4:	cmp	r1, #0
   15ad8:	movne	r6, r1
   15adc:	cmp	r3, #0
   15ae0:	beq	172e4 <__assert_fail@plt+0x5ca8>
   15ae4:	str	r2, [sp, #48]	; 0x30
   15ae8:	sub	r2, fp, #48	; 0x30
   15aec:	mvn	r1, #13
   15af0:	mov	r0, r6
   15af4:	add	r0, sp, #104	; 0x68
   15af8:	ldr	r8, [fp, #16]
   15afc:	ldr	lr, [sp, #100]	; 0x64
   15b00:	movw	ip, #52428	; 0xcccc
   15b04:	mov	r9, r5
   15b08:	sub	sl, r6, #1
   15b0c:	str	r4, [sp, #76]	; 0x4c
   15b10:	mov	r5, #-2147483648	; 0x80000000
   15b14:	str	r7, [sp, #44]	; 0x2c
   15b18:	str	r6, [sp, #36]	; 0x24
   15b1c:	sub	r1, r1, r2
   15b20:	add	r0, r0, #1
   15b24:	movt	ip, #3276	; 0xccc
   15b28:	str	sl, [sp, #20]
   15b2c:	str	r1, [sp, #28]
   15b30:	sub	r1, fp, #53	; 0x35
   15b34:	str	r0, [sp, #32]
   15b38:	add	r0, r1, #3
   15b3c:	str	r0, [sp, #52]	; 0x34
   15b40:	add	r0, r1, #2
   15b44:	str	r0, [sp, #68]	; 0x44
   15b48:	add	r0, r4, #12
   15b4c:	mov	r4, #0
   15b50:	str	r0, [sp, #40]	; 0x28
   15b54:	add	r0, r2, #13
   15b58:	str	r0, [sp, #24]
   15b5c:	add	r0, r2, #14
   15b60:	str	r0, [sp, #64]	; 0x40
   15b64:	uxtb	r1, r3
   15b68:	cmp	r1, #37	; 0x25
   15b6c:	bne	15be4 <__assert_fail@plt+0x45a8>
   15b70:	ldr	r0, [fp, #8]
   15b74:	mov	r7, #0
   15b78:	str	r9, [sp, #92]	; 0x5c
   15b7c:	mov	r6, r0
   15b80:	mov	r0, #0
   15b84:	add	r1, r9, #2
   15b88:	add	r9, r9, #1
   15b8c:	mov	sl, r0
   15b90:	ldrb	r0, [r9]
   15b94:	cmp	r0, #47	; 0x2f
   15b98:	bgt	15bac <__assert_fail@plt+0x4570>
   15b9c:	cmp	r0, #43	; 0x2b
   15ba0:	cmpne	r0, #45	; 0x2d
   15ba4:	beq	15bb8 <__assert_fail@plt+0x457c>
   15ba8:	b	15bc0 <__assert_fail@plt+0x4584>
   15bac:	cmp	r0, #48	; 0x30
   15bb0:	cmpne	r0, #95	; 0x5f
   15bb4:	bne	15bd0 <__assert_fail@plt+0x4594>
   15bb8:	add	r1, r1, #1
   15bbc:	b	15b88 <__assert_fail@plt+0x454c>
   15bc0:	cmp	r0, #35	; 0x23
   15bc4:	bne	15c4c <__assert_fail@plt+0x4610>
   15bc8:	mov	r7, #1
   15bcc:	b	15bdc <__assert_fail@plt+0x45a0>
   15bd0:	cmp	r0, #94	; 0x5e
   15bd4:	bne	15c4c <__assert_fail@plt+0x4610>
   15bd8:	mov	r6, #1
   15bdc:	mov	r0, sl
   15be0:	b	15b84 <__assert_fail@plt+0x4548>
   15be4:	ldr	r0, [sp, #96]	; 0x60
   15be8:	bic	r1, r8, r8, asr #31
   15bec:	cmp	r1, #1
   15bf0:	mov	r6, r1
   15bf4:	movls	r6, #1
   15bf8:	sub	r2, r0, r4
   15bfc:	cmp	r6, r2
   15c00:	bcs	17310 <__assert_fail@plt+0x5cd4>
   15c04:	cmp	lr, #0
   15c08:	beq	15ccc <__assert_fail@plt+0x4690>
   15c0c:	cmp	r1, #2
   15c10:	bcc	15c44 <__assert_fail@plt+0x4608>
   15c14:	sub	r5, r1, #1
   15c18:	mov	r0, lr
   15c1c:	mov	r1, #32
   15c20:	mov	r7, lr
   15c24:	mov	r2, r5
   15c28:	bl	11534 <memset@plt>
   15c2c:	ldrb	r3, [r9]
   15c30:	movw	ip, #52428	; 0xcccc
   15c34:	mov	lr, r7
   15c38:	add	lr, r7, r5
   15c3c:	mov	r5, #-2147483648	; 0x80000000
   15c40:	movt	ip, #3276	; 0xccc
   15c44:	strb	r3, [lr], #1
   15c48:	b	16d40 <__assert_fail@plt+0x5704>
   15c4c:	sub	r2, r0, #48	; 0x30
   15c50:	cmp	r2, #9
   15c54:	bhi	15cb4 <__assert_fail@plt+0x4678>
   15c58:	mov	r8, #0
   15c5c:	cmn	r8, #1
   15c60:	ble	15c70 <__assert_fail@plt+0x4634>
   15c64:	cmp	r8, ip
   15c68:	bgt	15c80 <__assert_fail@plt+0x4644>
   15c6c:	b	15c88 <__assert_fail@plt+0x464c>
   15c70:	beq	15c88 <__assert_fail@plt+0x464c>
   15c74:	sdiv	r2, r5, r8
   15c78:	cmp	r2, #10
   15c7c:	bge	15c88 <__assert_fail@plt+0x464c>
   15c80:	mvn	r8, #-2147483648	; 0x80000000
   15c84:	b	15ca0 <__assert_fail@plt+0x4664>
   15c88:	add	r2, r8, r8, lsl #2
   15c8c:	lsl	r3, r2, #1
   15c90:	uxtab	r0, r3, r0
   15c94:	sub	r8, r0, #48	; 0x30
   15c98:	cmp	r8, r2, lsl #1
   15c9c:	mvnvs	r8, #-2147483648	; 0x80000000
   15ca0:	ldrb	r0, [r1], #1
   15ca4:	sub	r2, r0, #48	; 0x30
   15ca8:	cmp	r2, #10
   15cac:	bcc	15c5c <__assert_fail@plt+0x4620>
   15cb0:	sub	r9, r1, #1
   15cb4:	cmp	r0, #79	; 0x4f
   15cb8:	str	lr, [sp, #100]	; 0x64
   15cbc:	cmpne	r0, #69	; 0x45
   15cc0:	bne	15cd4 <__assert_fail@plt+0x4698>
   15cc4:	ldrb	r1, [r9, #1]!
   15cc8:	b	15cdc <__assert_fail@plt+0x46a0>
   15ccc:	mov	lr, #0
   15cd0:	b	16d40 <__assert_fail@plt+0x5704>
   15cd4:	mov	r1, r0
   15cd8:	mov	r0, #0
   15cdc:	sub	r2, r1, #37	; 0x25
   15ce0:	str	r6, [sp, #88]	; 0x58
   15ce4:	cmp	r2, #85	; 0x55
   15ce8:	bhi	15f80 <__assert_fail@plt+0x4944>
   15cec:	str	r1, [sp, #80]	; 0x50
   15cf0:	movw	r1, #26215	; 0x6667
   15cf4:	movw	r6, #47477	; 0xb975
   15cf8:	add	r3, pc, #16
   15cfc:	mov	r5, #0
   15d00:	mvn	lr, #0
   15d04:	movt	r1, #26214	; 0x6666
   15d08:	movt	r6, #1
   15d0c:	ldr	pc, [r3, r2, lsl #2]
   15d10:	andeq	r5, r1, ip, lsl #31
   15d14:	andeq	r6, r1, r4, asr #30
   15d18:	andeq	r6, r1, r4, asr #30
   15d1c:	andeq	r6, r1, r4, asr #30
   15d20:	andeq	r6, r1, r4, asr #30
   15d24:	andeq	r6, r1, r4, asr #30
   15d28:	andeq	r6, r1, r4, asr #30
   15d2c:	andeq	r6, r1, r4, asr #30
   15d30:	andeq	r6, r1, r4, asr #30
   15d34:	andeq	r6, r1, r4, asr #30
   15d38:	andeq	r6, r1, r4, asr #30
   15d3c:	andeq	r6, r1, r4, asr #30
   15d40:	andeq	r6, r1, r4, asr #30
   15d44:	andeq	r6, r1, r4, asr #30
   15d48:	andeq	r6, r1, r4, asr #30
   15d4c:	andeq	r6, r1, r4, asr #30
   15d50:	andeq	r6, r1, r4, asr #30
   15d54:	andeq	r6, r1, r4, asr #30
   15d58:	andeq	r6, r1, r4, asr #30
   15d5c:	andeq	r6, r1, r4, asr #30
   15d60:	andeq	r6, r1, r4, asr #30
   15d64:	andeq	r5, r1, r4, lsr #31
   15d68:	andeq	r6, r1, r4, asr #30
   15d6c:	andeq	r6, r1, r4, asr #30
   15d70:	andeq	r6, r1, r4, asr #30
   15d74:	andeq	r6, r1, r4, asr #30
   15d78:	andeq	r6, r1, r4, asr #30
   15d7c:	andeq	r6, r1, r4, asr #30
   15d80:			; <UNDEFINED> instruction: 0x00015fbc
   15d84:	ldrdeq	r5, [r1], -ip
   15d88:	strdeq	r5, [r1], -ip
   15d8c:	andeq	r6, r1, r0, lsl r0
   15d90:	andeq	r6, r1, r4, asr #30
   15d94:	andeq	r6, r1, r8, lsr #32
   15d98:	andeq	r5, r1, r8, ror #28
   15d9c:	andeq	r6, r1, r4, asr r0
   15da0:	andeq	r6, r1, r4, rrx
   15da4:	andeq	r6, r1, r4, asr #30
   15da8:	andeq	r6, r1, r4, asr #30
   15dac:	andeq	r6, r1, r4, asr #30
   15db0:	andeq	r6, r1, r0, lsl #1
   15db4:	muleq	r1, r8, r0
   15db8:	andeq	r6, r1, r4, asr #30
   15dbc:	andeq	r6, r1, r4, lsl #2
   15dc0:	andeq	r6, r1, r4, asr #30
   15dc4:	andeq	r6, r1, r0, asr #2
   15dc8:	andeq	r6, r1, r8, lsr #2
   15dcc:	andeq	r6, r1, r8, lsr r1
   15dd0:	andeq	r6, r1, r8, ror #3
   15dd4:	andeq	r5, r1, r8, ror #28
   15dd8:	andeq	r6, r1, r8, lsl r2
   15ddc:	andeq	r6, r1, r8, ror #4
   15de0:	andeq	r6, r1, ip, ror r2
   15de4:			; <UNDEFINED> instruction: 0x000162bc
   15de8:	andeq	r6, r1, r4, asr #30
   15dec:	andeq	r6, r1, r4, asr #30
   15df0:	andeq	r6, r1, r4, asr #30
   15df4:	andeq	r6, r1, r4, asr #30
   15df8:	andeq	r6, r1, r4, asr #30
   15dfc:	andeq	r6, r1, r4, asr #30
   15e00:	andeq	r6, r1, ip, lsr #6
   15e04:	andeq	r5, r1, r4, ror #30
   15e08:	andeq	r6, r1, ip, asr #6
   15e0c:	andeq	r6, r1, r0, ror #6
   15e10:	andeq	r6, r1, r8, ror r3
   15e14:	andeq	r6, r1, r4, asr #30
   15e18:	andeq	r5, r1, r8, ror #28
   15e1c:	andeq	r5, r1, r4, ror #30
   15e20:	andeq	r6, r1, r4, asr #30
   15e24:	andeq	r6, r1, r0, lsl #7
   15e28:	muleq	r1, ip, r3
   15e2c:			; <UNDEFINED> instruction: 0x000163b4
   15e30:	ldrdeq	r6, [r1], -r8
   15e34:	andeq	r6, r1, ip, lsl #8
   15e38:	andeq	r6, r1, r4, asr #30
   15e3c:	andeq	r6, r1, r8, lsl #2
   15e40:	andeq	r6, r1, r8, ror #8
   15e44:	andeq	r6, r1, r4, lsl sl
   15e48:	muleq	r1, r8, r4
   15e4c:	andeq	r6, r1, r0, asr r5
   15e50:	andeq	r6, r1, ip, lsr #11
   15e54:	andeq	r6, r1, r4, asr #30
   15e58:	andeq	r6, r1, r0, ror #11
   15e5c:	strdeq	r6, [r1], -ip
   15e60:	andeq	r6, r1, r0, lsl r6
   15e64:	andeq	r6, r1, r0, lsr r6
   15e68:	cmp	r0, #69	; 0x45
   15e6c:	beq	16f44 <__assert_fail@plt+0x5908>
   15e70:	ldr	r2, [sp, #76]	; 0x4c
   15e74:	movw	r1, #9363	; 0x2493
   15e78:	movw	r7, #382	; 0x17e
   15e7c:	str	r4, [sp, #84]	; 0x54
   15e80:	movt	r1, #37449	; 0x9249
   15e84:	ldr	r6, [r2, #24]
   15e88:	ldr	r5, [r2, #28]
   15e8c:	ldr	lr, [r2, #20]
   15e90:	sub	r2, r5, r6
   15e94:	cmp	lr, #0
   15e98:	add	r2, r2, r7
   15e9c:	smmla	r4, r2, r1, r2
   15ea0:	asr	r7, r4, #2
   15ea4:	add	r4, r7, r4, lsr #31
   15ea8:	rsb	r4, r4, r4, lsl #3
   15eac:	sub	r2, r4, r2
   15eb0:	add	r2, r5, r2
   15eb4:	add	r4, r2, #3
   15eb8:	mvn	r2, #99	; 0x63
   15ebc:	movwmi	r2, #300	; 0x12c
   15ec0:	add	r2, r2, lr
   15ec4:	cmn	r4, #1
   15ec8:	ble	1667c <__assert_fail@plt+0x5040>
   15ecc:	movw	r7, #365	; 0x16d
   15ed0:	tst	r2, #3
   15ed4:	bne	15f20 <__assert_fail@plt+0x48e4>
   15ed8:	movw	r7, #34079	; 0x851f
   15edc:	mov	ip, #100	; 0x64
   15ee0:	movt	r7, #20971	; 0x51eb
   15ee4:	smmul	r7, r2, r7
   15ee8:	asr	r3, r7, #5
   15eec:	add	r3, r3, r7, lsr #31
   15ef0:	mls	ip, r3, ip, r2
   15ef4:	asr	r3, r7, #7
   15ef8:	add	r3, r3, r7, lsr #31
   15efc:	mov	r7, #400	; 0x190
   15f00:	mls	r2, r3, r7, r2
   15f04:	movw	r7, #365	; 0x16d
   15f08:	cmp	r2, #0
   15f0c:	movweq	r7, #366	; 0x16e
   15f10:	cmp	ip, #0
   15f14:	movw	ip, #52428	; 0xcccc
   15f18:	movt	ip, #3276	; 0xccc
   15f1c:	movwne	r7, #366	; 0x16e
   15f20:	add	r2, r6, r7
   15f24:	movw	r3, #382	; 0x17e
   15f28:	sub	r2, r5, r2
   15f2c:	mov	r5, r1
   15f30:	add	r2, r2, r3
   15f34:	smmla	r2, r2, r1, r2
   15f38:	asr	r3, r2, #2
   15f3c:	add	r2, r3, r2, lsr #31
   15f40:	movw	r3, #379	; 0x17b
   15f44:	rsb	r2, r2, r2, lsl #3
   15f48:	add	r2, r6, r2
   15f4c:	sub	r2, r2, r3
   15f50:	cmn	r2, #1
   15f54:	movgt	r4, r2
   15f58:	mvn	r2, r2
   15f5c:	lsr	r3, r2, #31
   15f60:	b	166fc <__assert_fail@plt+0x50c0>
   15f64:	ldr	r2, [sp, #88]	; 0x58
   15f68:	mov	r5, #0
   15f6c:	cmp	r0, #69	; 0x45
   15f70:	orr	r2, r7, r2
   15f74:	str	r2, [sp, #88]	; 0x58
   15f78:	bne	16a14 <__assert_fail@plt+0x53d8>
   15f7c:	b	16f44 <__assert_fail@plt+0x5908>
   15f80:	cmp	r1, #0
   15f84:	subeq	r9, r9, #1
   15f88:	b	16f44 <__assert_fail@plt+0x5908>
   15f8c:	ldr	r1, [sp, #92]	; 0x5c
   15f90:	sub	r0, r9, #1
   15f94:	cmp	r0, r1
   15f98:	beq	16d48 <__assert_fail@plt+0x570c>
   15f9c:	sub	r9, r9, #1
   15fa0:	b	16f44 <__assert_fail@plt+0x5908>
   15fa4:	mov	r5, #1
   15fa8:	ldrb	r2, [r9, r5]
   15fac:	cmp	r2, #58	; 0x3a
   15fb0:	bne	16624 <__assert_fail@plt+0x4fe8>
   15fb4:	add	r5, r5, #1
   15fb8:	b	15fa8 <__assert_fail@plt+0x496c>
   15fbc:	cmp	r0, #0
   15fc0:	bne	16f44 <__assert_fail@plt+0x5908>
   15fc4:	ldr	r1, [sp, #88]	; 0x58
   15fc8:	mov	r5, #0
   15fcc:	orr	r1, r7, r1
   15fd0:	str	r1, [sp, #88]	; 0x58
   15fd4:	mov	r1, #65	; 0x41
   15fd8:	b	16120 <__assert_fail@plt+0x4ae4>
   15fdc:	cmp	r0, #69	; 0x45
   15fe0:	beq	16f44 <__assert_fail@plt+0x5908>
   15fe4:	ldr	r1, [sp, #88]	; 0x58
   15fe8:	mov	r5, #0
   15fec:	orr	r1, r7, r1
   15ff0:	str	r1, [sp, #88]	; 0x58
   15ff4:	mov	r1, #66	; 0x42
   15ff8:	b	16120 <__assert_fail@plt+0x4ae4>
   15ffc:	cmp	r0, #69	; 0x45
   16000:	bne	16764 <__assert_fail@plt+0x5128>
   16004:	mov	r5, #0
   16008:	mov	r1, #67	; 0x43
   1600c:	b	16120 <__assert_fail@plt+0x4ae4>
   16010:	cmp	r0, #0
   16014:	bne	16f44 <__assert_fail@plt+0x5908>
   16018:	movw	r6, #53050	; 0xcf3a
   1601c:	mvn	lr, #0
   16020:	movt	r6, #1
   16024:	b	16140 <__assert_fail@plt+0x4b04>
   16028:	cmp	r0, #0
   1602c:	bne	16f44 <__assert_fail@plt+0x5908>
   16030:	movw	r6, #53059	; 0xcf43
   16034:	cmp	sl, #0
   16038:	movt	r6, #1
   1603c:	bne	16eac <__assert_fail@plt+0x5870>
   16040:	cmp	r8, #0
   16044:	bpl	16eac <__assert_fail@plt+0x5870>
   16048:	mov	sl, #43	; 0x2b
   1604c:	mov	lr, #4
   16050:	b	16140 <__assert_fail@plt+0x4b04>
   16054:	cmp	r0, #69	; 0x45
   16058:	beq	16f44 <__assert_fail@plt+0x5908>
   1605c:	ldr	r2, [sp, #48]	; 0x30
   16060:	b	1636c <__assert_fail@plt+0x4d30>
   16064:	cmp	r0, #69	; 0x45
   16068:	beq	16f44 <__assert_fail@plt+0x5908>
   1606c:	ldr	r3, [sp, #44]	; 0x2c
   16070:	ldr	lr, [sp, #100]	; 0x64
   16074:	mov	r2, #2
   16078:	str	r4, [sp, #84]	; 0x54
   1607c:	b	168f8 <__assert_fail@plt+0x52bc>
   16080:	cmp	r0, #69	; 0x45
   16084:	beq	16f44 <__assert_fail@plt+0x5908>
   16088:	ldr	r2, [sp, #76]	; 0x4c
   1608c:	str	r4, [sp, #84]	; 0x54
   16090:	ldr	r3, [r2, #4]
   16094:	b	168f0 <__assert_fail@plt+0x52b4>
   16098:	cmp	r0, #69	; 0x45
   1609c:	beq	16f44 <__assert_fail@plt+0x5908>
   160a0:	ldr	r0, [fp, #24]
   160a4:	ldr	r6, [sp, #100]	; 0x64
   160a8:	cmp	r8, #1
   160ac:	str	r4, [sp, #84]	; 0x54
   160b0:	mov	r7, #9
   160b4:	mov	r4, #8
   160b8:	mov	r5, r1
   160bc:	movwlt	r8, #9
   160c0:	cmp	r8, r7
   160c4:	blt	160ec <__assert_fail@plt+0x4ab0>
   160c8:	cmp	r7, #2
   160cc:	blt	167c0 <__assert_fail@plt+0x5184>
   160d0:	smmul	r1, r0, r5
   160d4:	asr	r2, r1, #2
   160d8:	add	r1, r2, r1, lsr #31
   160dc:	add	r1, r1, r1, lsl #2
   160e0:	sub	r1, r0, r1, lsl #1
   160e4:	cmp	r1, #0
   160e8:	bne	167c0 <__assert_fail@plt+0x5184>
   160ec:	smmul	r0, r0, r5
   160f0:	sub	r4, r4, #1
   160f4:	sub	r7, r7, #1
   160f8:	asr	r1, r0, #2
   160fc:	add	r0, r1, r0, lsr #31
   16100:	b	160c0 <__assert_fail@plt+0x4a84>
   16104:	mov	r5, #1
   16108:	ldr	r2, [sp, #88]	; 0x58
   1610c:	eor	r1, r7, #1
   16110:	orr	r5, r7, r5
   16114:	and	r2, r2, r1
   16118:	mov	r1, #112	; 0x70
   1611c:	str	r2, [sp, #88]	; 0x58
   16120:	str	r1, [sp, #80]	; 0x50
   16124:	b	16a14 <__assert_fail@plt+0x53d8>
   16128:	cmp	r0, #69	; 0x45
   1612c:	beq	16f44 <__assert_fail@plt+0x5908>
   16130:	ldr	r2, [sp, #76]	; 0x4c
   16134:	b	1636c <__assert_fail@plt+0x4d30>
   16138:	movw	r6, #53068	; 0xcf4c
   1613c:	movt	r6, #1
   16140:	ldr	r0, [sp, #88]	; 0x58
   16144:	ldr	r3, [sp, #76]	; 0x4c
   16148:	mvn	r1, #0
   1614c:	mov	r2, r6
   16150:	str	lr, [sp, #92]	; 0x5c
   16154:	mov	r7, #0
   16158:	and	r0, r0, #1
   1615c:	str	r0, [sp, #88]	; 0x58
   16160:	stm	sp, {r0, sl, lr}
   16164:	ldr	r0, [fp, #20]
   16168:	str	r0, [sp, #12]
   1616c:	ldr	r0, [fp, #24]
   16170:	str	r0, [sp, #16]
   16174:	mov	r0, #0
   16178:	bl	15a78 <__assert_fail@plt+0x443c>
   1617c:	mov	r2, r4
   16180:	mov	r4, r0
   16184:	subs	r0, sl, #45	; 0x2d
   16188:	ldr	r1, [sp, #96]	; 0x60
   1618c:	movne	r0, r8
   16190:	cmp	r8, #0
   16194:	mov	r5, r4
   16198:	str	r2, [sp, #84]	; 0x54
   1619c:	movwmi	r0, #0
   161a0:	cmp	r0, r4
   161a4:	movhi	r5, r0
   161a8:	sub	r8, r1, r2
   161ac:	cmp	r5, r8
   161b0:	bcs	17310 <__assert_fail@plt+0x5cd4>
   161b4:	str	r6, [sp, #80]	; 0x50
   161b8:	ldr	r6, [sp, #100]	; 0x64
   161bc:	cmp	r6, #0
   161c0:	beq	16e90 <__assert_fail@plt+0x5854>
   161c4:	cmp	r0, r4
   161c8:	bls	16670 <__assert_fail@plt+0x5034>
   161cc:	cmp	sl, #48	; 0x30
   161d0:	sub	r7, r0, r4
   161d4:	cmpne	sl, #43	; 0x2b
   161d8:	bne	16e40 <__assert_fail@plt+0x5804>
   161dc:	mov	r0, r6
   161e0:	mov	r1, #48	; 0x30
   161e4:	b	16e48 <__assert_fail@plt+0x580c>
   161e8:	cmp	r0, #69	; 0x45
   161ec:	beq	16f44 <__assert_fail@plt+0x5908>
   161f0:	ldr	r3, [sp, #76]	; 0x4c
   161f4:	str	r4, [sp, #84]	; 0x54
   161f8:	ldr	r2, [r3, #24]
   161fc:	ldr	r3, [r3, #28]
   16200:	sub	r2, r3, r2
   16204:	movw	r3, #9363	; 0x2493
   16208:	movt	r3, #37449	; 0x9249
   1620c:	add	r2, r2, #7
   16210:	smmla	r2, r2, r3, r2
   16214:	b	1625c <__assert_fail@plt+0x4c20>
   16218:	cmp	r0, #69	; 0x45
   1621c:	beq	16f44 <__assert_fail@plt+0x5908>
   16220:	ldr	r3, [sp, #76]	; 0x4c
   16224:	movw	r7, #9363	; 0x2493
   16228:	str	r4, [sp, #84]	; 0x54
   1622c:	movt	r7, #37449	; 0x9249
   16230:	ldr	r2, [r3, #24]
   16234:	ldr	r3, [r3, #28]
   16238:	add	r2, r2, #6
   1623c:	smmla	r5, r2, r7, r2
   16240:	asr	r4, r5, #2
   16244:	add	r5, r4, r5, lsr #31
   16248:	rsb	r5, r5, r5, lsl #3
   1624c:	sub	r2, r5, r2
   16250:	add	r2, r3, r2
   16254:	add	r2, r2, #7
   16258:	smmla	r2, r2, r7, r2
   1625c:	asr	r3, r2, #2
   16260:	add	r3, r3, r2, lsr #31
   16264:	b	168f0 <__assert_fail@plt+0x52b4>
   16268:	cmp	r0, #79	; 0x4f
   1626c:	beq	16f44 <__assert_fail@plt+0x5908>
   16270:	mov	r5, #0
   16274:	mov	r1, #88	; 0x58
   16278:	b	16120 <__assert_fail@plt+0x4ae4>
   1627c:	cmp	r0, #69	; 0x45
   16280:	beq	16e34 <__assert_fail@plt+0x57f8>
   16284:	cmp	r0, #79	; 0x4f
   16288:	beq	16f44 <__assert_fail@plt+0x5908>
   1628c:	ldr	r2, [sp, #76]	; 0x4c
   16290:	movw	r7, #63636	; 0xf894
   16294:	str	r4, [sp, #84]	; 0x54
   16298:	mov	r4, #4
   1629c:	movt	r7, #65535	; 0xffff
   162a0:	ldr	r3, [r2, #20]
   162a4:	mov	r2, #0
   162a8:	cmp	r3, r7
   162ac:	movw	r7, #1900	; 0x76c
   162b0:	movwlt	r2, #1
   162b4:	add	r3, r3, r7
   162b8:	b	167b8 <__assert_fail@plt+0x517c>
   162bc:	ldr	r0, [sp, #36]	; 0x24
   162c0:	subs	r5, sl, #45	; 0x2d
   162c4:	bicne	r5, r8, r8, asr #31
   162c8:	bl	114e0 <strlen@plt>
   162cc:	mov	r8, r0
   162d0:	cmp	r5, r0
   162d4:	mov	r6, r0
   162d8:	ldr	r0, [sp, #96]	; 0x60
   162dc:	str	r4, [sp, #84]	; 0x54
   162e0:	movhi	r6, r5
   162e4:	sub	r0, r0, r4
   162e8:	cmp	r6, r0
   162ec:	bcs	17310 <__assert_fail@plt+0x5cd4>
   162f0:	ldr	r0, [sp, #100]	; 0x64
   162f4:	movw	ip, #52428	; 0xcccc
   162f8:	movt	ip, #3276	; 0xccc
   162fc:	cmp	r0, #0
   16300:	beq	16ae4 <__assert_fail@plt+0x54a8>
   16304:	cmp	r5, r8
   16308:	mov	r4, r0
   1630c:	bls	17110 <__assert_fail@plt+0x5ad4>
   16310:	uxtb	r1, sl
   16314:	sub	r4, r5, r8
   16318:	cmp	r1, #48	; 0x30
   1631c:	cmpne	r1, #43	; 0x2b
   16320:	bne	170f4 <__assert_fail@plt+0x5ab8>
   16324:	mov	r1, #48	; 0x30
   16328:	b	170f8 <__assert_fail@plt+0x5abc>
   1632c:	cmp	r0, #0
   16330:	bne	16f44 <__assert_fail@plt+0x5908>
   16334:	ldr	r1, [sp, #88]	; 0x58
   16338:	mov	r5, #0
   1633c:	orr	r1, r7, r1
   16340:	str	r1, [sp, #88]	; 0x58
   16344:	mov	r1, #97	; 0x61
   16348:	b	16120 <__assert_fail@plt+0x4ae4>
   1634c:	cmp	r0, #79	; 0x4f
   16350:	beq	16f44 <__assert_fail@plt+0x5908>
   16354:	mov	r5, #0
   16358:	mov	r1, #99	; 0x63
   1635c:	b	16120 <__assert_fail@plt+0x4ae4>
   16360:	cmp	r0, #69	; 0x45
   16364:	beq	16f44 <__assert_fail@plt+0x5908>
   16368:	ldr	r2, [sp, #40]	; 0x28
   1636c:	str	r4, [sp, #84]	; 0x54
   16370:	ldr	r3, [r2]
   16374:	b	168f0 <__assert_fail@plt+0x52b4>
   16378:	ldr	r2, [sp, #40]	; 0x28
   1637c:	b	163a0 <__assert_fail@plt+0x4d64>
   16380:	cmp	r0, #69	; 0x45
   16384:	beq	16f44 <__assert_fail@plt+0x5908>
   16388:	ldr	r2, [sp, #76]	; 0x4c
   1638c:	str	r4, [sp, #84]	; 0x54
   16390:	mov	r4, #3
   16394:	ldr	r3, [r2, #28]
   16398:	b	163f0 <__assert_fail@plt+0x4db4>
   1639c:	ldr	r2, [sp, #48]	; 0x30
   163a0:	cmp	r0, #69	; 0x45
   163a4:	beq	16f44 <__assert_fail@plt+0x5908>
   163a8:	ldr	r3, [r2]
   163ac:	ldr	lr, [sp, #100]	; 0x64
   163b0:	b	163c4 <__assert_fail@plt+0x4d88>
   163b4:	ldr	r3, [sp, #44]	; 0x2c
   163b8:	ldr	lr, [sp, #100]	; 0x64
   163bc:	cmp	r0, #69	; 0x45
   163c0:	beq	16f48 <__assert_fail@plt+0x590c>
   163c4:	cmp	sl, #0
   163c8:	mov	r2, #2
   163cc:	str	r4, [sp, #84]	; 0x54
   163d0:	movweq	sl, #95	; 0x5f
   163d4:	b	168f8 <__assert_fail@plt+0x52bc>
   163d8:	cmp	r0, #69	; 0x45
   163dc:	beq	16f44 <__assert_fail@plt+0x5908>
   163e0:	ldr	r2, [sp, #76]	; 0x4c
   163e4:	str	r4, [sp, #84]	; 0x54
   163e8:	mov	r4, #2
   163ec:	ldr	r3, [r2, #16]
   163f0:	mov	r2, #0
   163f4:	cmn	r3, #1
   163f8:	add	r3, r3, #1
   163fc:	movwlt	r2, #1
   16400:	ldr	lr, [sp, #100]	; 0x64
   16404:	str	r4, [sp, #72]	; 0x48
   16408:	b	16900 <__assert_fail@plt+0x52c4>
   1640c:	subs	r0, sl, #45	; 0x2d
   16410:	ldr	r1, [sp, #96]	; 0x60
   16414:	bicne	r0, r8, r8, asr #31
   16418:	cmp	r0, #1
   1641c:	mov	r7, r0
   16420:	movls	r7, #1
   16424:	sub	r1, r1, r4
   16428:	cmp	r7, r1
   1642c:	bcs	17310 <__assert_fail@plt+0x5cd4>
   16430:	ldr	lr, [sp, #100]	; 0x64
   16434:	mov	r6, r4
   16438:	cmp	lr, #0
   1643c:	beq	16da8 <__assert_fail@plt+0x576c>
   16440:	cmp	r0, #2
   16444:	bcc	17200 <__assert_fail@plt+0x5bc4>
   16448:	uxtb	r1, sl
   1644c:	sub	r5, r0, #1
   16450:	cmp	r1, #48	; 0x30
   16454:	cmpne	r1, #43	; 0x2b
   16458:	bne	171dc <__assert_fail@plt+0x5ba0>
   1645c:	mov	r0, lr
   16460:	mov	r1, #48	; 0x30
   16464:	b	171e4 <__assert_fail@plt+0x5ba8>
   16468:	ldr	r2, [sp, #76]	; 0x4c
   1646c:	mov	r3, #11
   16470:	ldr	lr, [sp, #100]	; 0x64
   16474:	str	r4, [sp, #84]	; 0x54
   16478:	mov	r4, #1
   1647c:	ldr	r2, [r2, #16]
   16480:	mul	r2, r2, r3
   16484:	mov	r3, #1
   16488:	str	r3, [sp, #72]	; 0x48
   1648c:	add	r3, r4, r2, asr #5
   16490:	mov	r2, #0
   16494:	b	16900 <__assert_fail@plt+0x52c4>
   16498:	ldr	ip, [sp, #76]	; 0x4c
   1649c:	str	r4, [sp, #84]	; 0x54
   164a0:	add	r1, sp, #104	; 0x68
   164a4:	mov	r6, r1
   164a8:	ldm	ip!, {r2, r3, r4, r5, r7}
   164ac:	stmia	r6!, {r2, r3, r4, r5, r7}
   164b0:	ldm	ip, {r0, r2, r3, r4, r5, r7}
   164b4:	stm	r6, {r0, r2, r3, r4, r5, r7}
   164b8:	mvn	r0, #0
   164bc:	str	r0, [sp, #132]	; 0x84
   164c0:	ldr	r0, [fp, #20]
   164c4:	bl	19284 <__assert_fail@plt+0x7c48>
   164c8:	ldr	r1, [sp, #132]	; 0x84
   164cc:	cmp	r1, #0
   164d0:	bmi	1732c <__assert_fail@plt+0x5cf0>
   164d4:	ldr	r1, [sp, #24]
   164d8:	ldr	r4, [sp, #84]	; 0x54
   164dc:	ldr	lr, [sp, #100]	; 0x64
   164e0:	movw	r6, #26215	; 0x6667
   164e4:	lsr	r2, r0, #31
   164e8:	mov	r3, r0
   164ec:	movt	r6, #26214	; 0x6666
   164f0:	smmul	r7, r3, r6
   164f4:	cmp	r0, #0
   164f8:	asr	r5, r7, #2
   164fc:	add	r7, r5, r7, lsr #31
   16500:	add	r5, r7, r7, lsl #2
   16504:	sub	r5, r3, r5, lsl #1
   16508:	add	r3, r3, #9
   1650c:	rsbmi	r5, r5, #0
   16510:	cmp	r3, #18
   16514:	mov	r3, r7
   16518:	add	r5, r5, #48	; 0x30
   1651c:	strb	r5, [r1], #-1
   16520:	bhi	164f0 <__assert_fail@plt+0x4eb4>
   16524:	cmp	r8, #0
   16528:	movw	ip, #52428	; 0xcccc
   1652c:	add	r7, r1, #1
   16530:	mov	r6, #0
   16534:	str	r9, [sp, #92]	; 0x5c
   16538:	movwmi	r8, #1
   1653c:	cmp	sl, #0
   16540:	movt	ip, #3276	; 0xccc
   16544:	movweq	sl, #48	; 0x30
   16548:	mov	r3, r8
   1654c:	b	16998 <__assert_fail@plt+0x535c>
   16550:	subs	r0, sl, #45	; 0x2d
   16554:	ldr	r1, [sp, #96]	; 0x60
   16558:	bicne	r0, r8, r8, asr #31
   1655c:	cmp	r0, #1
   16560:	mov	r7, r0
   16564:	movls	r7, #1
   16568:	sub	r1, r1, r4
   1656c:	cmp	r7, r1
   16570:	bcs	17310 <__assert_fail@plt+0x5cd4>
   16574:	ldr	lr, [sp, #100]	; 0x64
   16578:	mov	r6, r4
   1657c:	cmp	lr, #0
   16580:	beq	16da8 <__assert_fail@plt+0x576c>
   16584:	cmp	r0, #2
   16588:	bcc	1722c <__assert_fail@plt+0x5bf0>
   1658c:	uxtb	r1, sl
   16590:	sub	r5, r0, #1
   16594:	cmp	r1, #48	; 0x30
   16598:	cmpne	r1, #43	; 0x2b
   1659c:	bne	17208 <__assert_fail@plt+0x5bcc>
   165a0:	mov	r0, lr
   165a4:	mov	r1, #48	; 0x30
   165a8:	b	17210 <__assert_fail@plt+0x5bd4>
   165ac:	ldr	r2, [sp, #76]	; 0x4c
   165b0:	movw	r3, #9363	; 0x2493
   165b4:	str	r4, [sp, #84]	; 0x54
   165b8:	movt	r3, #37449	; 0x9249
   165bc:	ldr	r2, [r2, #24]
   165c0:	add	r2, r2, #6
   165c4:	smmla	r3, r2, r3, r2
   165c8:	asr	r7, r3, #2
   165cc:	add	r3, r7, r3, lsr #31
   165d0:	rsb	r3, r3, r3, lsl #3
   165d4:	sub	r2, r2, r3
   165d8:	add	r3, r2, #1
   165dc:	b	165f4 <__assert_fail@plt+0x4fb8>
   165e0:	cmp	r0, #69	; 0x45
   165e4:	beq	16f44 <__assert_fail@plt+0x5908>
   165e8:	ldr	r2, [sp, #76]	; 0x4c
   165ec:	str	r4, [sp, #84]	; 0x54
   165f0:	ldr	r3, [r2, #24]
   165f4:	mov	r2, #1
   165f8:	b	168f4 <__assert_fail@plt+0x52b8>
   165fc:	cmp	r0, #79	; 0x4f
   16600:	beq	16f44 <__assert_fail@plt+0x5908>
   16604:	mov	r5, #0
   16608:	mov	r1, #120	; 0x78
   1660c:	b	16120 <__assert_fail@plt+0x4ae4>
   16610:	cmp	r0, #69	; 0x45
   16614:	bne	1686c <__assert_fail@plt+0x5230>
   16618:	mov	r5, #0
   1661c:	mov	r1, #121	; 0x79
   16620:	b	16120 <__assert_fail@plt+0x4ae4>
   16624:	cmp	r2, #122	; 0x7a
   16628:	bne	16f44 <__assert_fail@plt+0x5908>
   1662c:	add	r9, r9, r5
   16630:	ldr	r3, [sp, #76]	; 0x4c
   16634:	ldr	r2, [r3, #32]
   16638:	cmp	r2, #0
   1663c:	bmi	1675c <__assert_fail@plt+0x5120>
   16640:	ldr	lr, [r3, #36]	; 0x24
   16644:	str	r4, [sp, #84]	; 0x54
   16648:	cmp	lr, #0
   1664c:	bmi	16db4 <__assert_fail@plt+0x5778>
   16650:	mov	r2, #0
   16654:	bne	16db8 <__assert_fail@plt+0x577c>
   16658:	ldr	r2, [sp, #36]	; 0x24
   1665c:	ldrb	r2, [r2]
   16660:	sub	r2, r2, #45	; 0x2d
   16664:	clz	r2, r2
   16668:	lsr	r2, r2, #5
   1666c:	b	16db8 <__assert_fail@plt+0x577c>
   16670:	ldr	r0, [sp, #92]	; 0x5c
   16674:	ldr	r1, [sp, #88]	; 0x58
   16678:	b	16e60 <__assert_fail@plt+0x5824>
   1667c:	sub	r2, r2, #1
   16680:	movw	r4, #365	; 0x16d
   16684:	tst	r2, #3
   16688:	bne	166cc <__assert_fail@plt+0x5090>
   1668c:	movw	r4, #34079	; 0x851f
   16690:	movt	r4, #20971	; 0x51eb
   16694:	smmul	r4, r2, r4
   16698:	asr	r7, r4, #5
   1669c:	add	r3, r7, r4, lsr #31
   166a0:	mov	r7, #100	; 0x64
   166a4:	mls	r3, r3, r7, r2
   166a8:	asr	r7, r4, #7
   166ac:	add	r4, r7, r4, lsr #31
   166b0:	mov	r7, #400	; 0x190
   166b4:	mls	r2, r4, r7, r2
   166b8:	movw	r4, #365	; 0x16d
   166bc:	cmp	r2, #0
   166c0:	movweq	r4, #366	; 0x16e
   166c4:	cmp	r3, #0
   166c8:	movwne	r4, #366	; 0x16e
   166cc:	add	r2, r4, r5
   166d0:	movw	r4, #382	; 0x17e
   166d4:	mov	r5, r1
   166d8:	sub	r3, r4, r6
   166dc:	add	r2, r3, r2
   166e0:	smmla	r2, r2, r1, r2
   166e4:	asr	r4, r2, #2
   166e8:	add	r2, r4, r2, lsr #31
   166ec:	rsb	r2, r2, r2, lsl #3
   166f0:	sub	r2, r2, r3
   166f4:	mvn	r3, #0
   166f8:	add	r4, r2, #3
   166fc:	ldr	r1, [sp, #80]	; 0x50
   16700:	cmp	r1, #71	; 0x47
   16704:	beq	168b0 <__assert_fail@plt+0x5274>
   16708:	cmp	r1, #103	; 0x67
   1670c:	bne	168e0 <__assert_fail@plt+0x52a4>
   16710:	movw	r2, #34079	; 0x851f
   16714:	movt	r2, #20971	; 0x51eb
   16718:	smmul	r7, lr, r2
   1671c:	asr	r5, r7, #5
   16720:	add	r7, r5, r7, lsr #31
   16724:	mov	r5, #100	; 0x64
   16728:	mls	r7, r7, r5, lr
   1672c:	add	r7, r3, r7
   16730:	smmul	r2, r7, r2
   16734:	asr	r4, r2, #5
   16738:	add	r2, r4, r2, lsr #31
   1673c:	mls	r7, r2, r5, r7
   16740:	mov	r2, #2
   16744:	str	r2, [sp, #72]	; 0x48
   16748:	mov	r2, #0
   1674c:	cmn	r7, #1
   16750:	ble	16ec0 <__assert_fail@plt+0x5884>
   16754:	mov	r3, r7
   16758:	b	16ef0 <__assert_fail@plt+0x58b4>
   1675c:	ldr	lr, [sp, #100]	; 0x64
   16760:	b	16ea4 <__assert_fail@plt+0x5868>
   16764:	ldr	r2, [sp, #76]	; 0x4c
   16768:	movw	r5, #63636	; 0xf894
   1676c:	mov	r3, #0
   16770:	str	r4, [sp, #84]	; 0x54
   16774:	mvn	r4, #98	; 0x62
   16778:	movt	r5, #65535	; 0xffff
   1677c:	ldr	r7, [r2, #20]
   16780:	mov	r2, #0
   16784:	cmp	r7, r5
   16788:	movwge	r3, #1
   1678c:	cmp	r7, r5
   16790:	and	r3, r3, r7, lsr #31
   16794:	movwlt	r2, #1
   16798:	smlabb	r3, r3, r4, r7
   1679c:	movw	r4, #34079	; 0x851f
   167a0:	movt	r4, #20971	; 0x51eb
   167a4:	smmul	r3, r3, r4
   167a8:	asr	r4, r3, #5
   167ac:	add	r3, r4, r3, lsr #31
   167b0:	mov	r4, #2
   167b4:	add	r3, r3, #19
   167b8:	str	r4, [sp, #72]	; 0x48
   167bc:	b	16ef0 <__assert_fail@plt+0x58b4>
   167c0:	cmp	r7, #1
   167c4:	mov	r1, r4
   167c8:	blt	16800 <__assert_fail@plt+0x51c4>
   167cc:	smmul	r2, r0, r5
   167d0:	cmp	r1, #0
   167d4:	asr	r3, r2, #2
   167d8:	add	r2, r3, r2, lsr #31
   167dc:	add	r3, r2, r2, lsl #2
   167e0:	sub	r0, r0, r3, lsl #1
   167e4:	sub	r3, fp, #48	; 0x30
   167e8:	add	r0, r0, #48	; 0x30
   167ec:	strb	r0, [r3, r1]
   167f0:	sub	r0, r1, #1
   167f4:	mov	r1, r0
   167f8:	mov	r0, r2
   167fc:	bgt	167cc <__assert_fail@plt+0x5190>
   16800:	ldr	r0, [sp, #96]	; 0x60
   16804:	ldr	r1, [sp, #84]	; 0x54
   16808:	cmp	sl, #0
   1680c:	movweq	sl, #48	; 0x30
   16810:	sub	r5, r0, r1
   16814:	cmp	r7, r5
   16818:	bcs	17310 <__assert_fail@plt+0x5cd4>
   1681c:	cmp	r6, #0
   16820:	mov	lr, #0
   16824:	beq	170a8 <__assert_fail@plt+0x5a6c>
   16828:	ldr	r0, [sp, #88]	; 0x58
   1682c:	tst	r0, #1
   16830:	beq	1708c <__assert_fail@plt+0x5a50>
   16834:	cmp	r7, #0
   16838:	beq	170a4 <__assert_fail@plt+0x5a68>
   1683c:	bl	11498 <__ctype_toupper_loc@plt>
   16840:	movw	ip, #52428	; 0xcccc
   16844:	sub	r3, fp, #48	; 0x30
   16848:	movt	ip, #3276	; 0xccc
   1684c:	ldrb	r1, [r3, r4]
   16850:	ldr	r2, [r0]
   16854:	ldr	r1, [r2, r1, lsl #2]
   16858:	strb	r1, [r6, r4]
   1685c:	sub	r4, r4, #1
   16860:	cmn	r4, #1
   16864:	bne	1684c <__assert_fail@plt+0x5210>
   16868:	b	170a4 <__assert_fail@plt+0x5a68>
   1686c:	ldr	r2, [sp, #76]	; 0x4c
   16870:	str	r4, [sp, #84]	; 0x54
   16874:	ldr	r7, [r2, #20]
   16878:	movw	r2, #34079	; 0x851f
   1687c:	movt	r2, #20971	; 0x51eb
   16880:	smmul	r2, r7, r2
   16884:	asr	r3, r2, #5
   16888:	add	r2, r3, r2, lsr #31
   1688c:	mov	r3, #100	; 0x64
   16890:	mls	r5, r2, r3, r7
   16894:	mov	r2, #2
   16898:	str	r2, [sp, #72]	; 0x48
   1689c:	mov	r2, #0
   168a0:	cmn	r5, #1
   168a4:	ble	16edc <__assert_fail@plt+0x58a0>
   168a8:	mov	r3, r5
   168ac:	b	16ef0 <__assert_fail@plt+0x58b4>
   168b0:	movw	r2, #63636	; 0xf894
   168b4:	movt	r2, #65535	; 0xffff
   168b8:	sub	r7, r2, r3
   168bc:	add	r3, lr, r3
   168c0:	mov	r2, #0
   168c4:	cmp	lr, r7
   168c8:	movw	r7, #1900	; 0x76c
   168cc:	add	r3, r3, r7
   168d0:	mov	r7, #4
   168d4:	movwlt	r2, #1
   168d8:	str	r7, [sp, #72]	; 0x48
   168dc:	b	16ef0 <__assert_fail@plt+0x58b4>
   168e0:	smmla	r2, r4, r5, r4
   168e4:	asr	r3, r2, #2
   168e8:	add	r2, r3, r2, lsr #31
   168ec:	add	r3, r2, #1
   168f0:	mov	r2, #2
   168f4:	ldr	lr, [sp, #100]	; 0x64
   168f8:	str	r2, [sp, #72]	; 0x48
   168fc:	lsr	r2, r3, #31
   16900:	cmp	r2, #0
   16904:	mov	r4, #0
   16908:	mov	r6, #0
   1690c:	movwne	r2, #1
   16910:	cmp	r0, #79	; 0x4f
   16914:	moveq	r5, #0
   16918:	cmpeq	r2, #0
   1691c:	beq	16a10 <__assert_fail@plt+0x53d4>
   16920:	ldr	r7, [sp, #64]	; 0x40
   16924:	cmp	r2, #0
   16928:	rsbne	r3, r3, #0
   1692c:	tst	r4, #1
   16930:	asr	r4, r4, #1
   16934:	movne	r0, #58	; 0x3a
   16938:	strbne	r0, [r7, #-1]!
   1693c:	movw	r0, #52429	; 0xcccd
   16940:	cmp	r3, #9
   16944:	movt	r0, #52428	; 0xcccc
   16948:	umull	r0, r1, r3, r0
   1694c:	lsr	r0, r1, #3
   16950:	add	r1, r0, r0, lsl #2
   16954:	sub	r1, r3, r1, lsl #1
   16958:	mov	r3, r0
   1695c:	orr	r1, r1, #48	; 0x30
   16960:	strb	r1, [r7, #-1]!
   16964:	bhi	1692c <__assert_fail@plt+0x52f0>
   16968:	cmp	r4, #0
   1696c:	mov	r3, r0
   16970:	bne	1692c <__assert_fail@plt+0x52f0>
   16974:	cmp	r8, #0
   16978:	ldr	r4, [sp, #84]	; 0x54
   1697c:	ldr	r3, [sp, #72]	; 0x48
   16980:	str	r9, [sp, #92]	; 0x5c
   16984:	movpl	r3, r8
   16988:	cmp	r6, #0
   1698c:	movwne	r6, #43	; 0x2b
   16990:	cmp	sl, #0
   16994:	movweq	sl, #48	; 0x30
   16998:	ldr	r1, [sp, #64]	; 0x40
   1699c:	cmp	r2, #0
   169a0:	mov	r0, r3
   169a4:	movwne	r6, #45	; 0x2d
   169a8:	cmp	r6, #0
   169ac:	subne	r0, r0, #1
   169b0:	sub	r9, r1, r7
   169b4:	sub	r0, r0, r9
   169b8:	cmp	r0, #1
   169bc:	movwlt	r0, #0
   169c0:	subs	r5, sl, #45	; 0x2d
   169c4:	movne	r5, r0
   169c8:	cmp	r6, #0
   169cc:	beq	16ad8 <__assert_fail@plt+0x549c>
   169d0:	cmp	sl, #95	; 0x5f
   169d4:	bne	16af8 <__assert_fail@plt+0x54bc>
   169d8:	cmp	lr, #0
   169dc:	beq	16aec <__assert_fail@plt+0x54b0>
   169e0:	mov	r0, lr
   169e4:	mov	r1, #32
   169e8:	mov	r2, r5
   169ec:	mov	r8, lr
   169f0:	str	r3, [sp, #72]	; 0x48
   169f4:	bl	11534 <memset@plt>
   169f8:	ldr	r3, [sp, #72]	; 0x48
   169fc:	movw	ip, #52428	; 0xcccc
   16a00:	mov	lr, r8
   16a04:	add	lr, r8, r5
   16a08:	movt	ip, #3276	; 0xccc
   16a0c:	b	16af0 <__assert_fail@plt+0x54b4>
   16a10:	ldr	r4, [sp, #84]	; 0x54
   16a14:	movw	r2, #9504	; 0x2520
   16a18:	cmp	r0, #0
   16a1c:	ldr	r3, [sp, #76]	; 0x4c
   16a20:	mov	r1, #1024	; 0x400
   16a24:	strh	r2, [fp, #-53]	; 0xffffffcb
   16a28:	ldr	r2, [sp, #68]	; 0x44
   16a2c:	ldrne	r2, [sp, #52]	; 0x34
   16a30:	strbne	r0, [fp, #-51]	; 0xffffffcd
   16a34:	mov	r0, #0
   16a38:	strb	r0, [r2, #1]
   16a3c:	ldr	r0, [sp, #80]	; 0x50
   16a40:	strb	r0, [r2]
   16a44:	add	r0, sp, #104	; 0x68
   16a48:	sub	r2, fp, #53	; 0x35
   16a4c:	bl	11474 <strftime@plt>
   16a50:	cmp	r0, #0
   16a54:	beq	16ac4 <__assert_fail@plt+0x5488>
   16a58:	subs	r7, sl, #45	; 0x2d
   16a5c:	movw	ip, #52428	; 0xcccc
   16a60:	str	r4, [sp, #84]	; 0x54
   16a64:	movne	r7, r8
   16a68:	cmp	r8, #0
   16a6c:	sub	r8, r0, #1
   16a70:	ldr	r0, [sp, #96]	; 0x60
   16a74:	movt	ip, #3276	; 0xccc
   16a78:	movwmi	r7, #0
   16a7c:	mov	r6, r8
   16a80:	cmp	r7, r8
   16a84:	movhi	r6, r7
   16a88:	sub	r0, r0, r4
   16a8c:	cmp	r6, r0
   16a90:	ldr	r0, [sp, #100]	; 0x64
   16a94:	bcs	17310 <__assert_fail@plt+0x5cd4>
   16a98:	cmp	r0, #0
   16a9c:	beq	16ae4 <__assert_fail@plt+0x54a8>
   16aa0:	cmp	r7, r8
   16aa4:	mov	lr, r0
   16aa8:	bls	16c60 <__assert_fail@plt+0x5624>
   16aac:	cmp	sl, #48	; 0x30
   16ab0:	sub	r2, r7, r8
   16ab4:	cmpne	sl, #43	; 0x2b
   16ab8:	bne	16c40 <__assert_fail@plt+0x5604>
   16abc:	mov	r1, #48	; 0x30
   16ac0:	b	16c44 <__assert_fail@plt+0x5608>
   16ac4:	ldr	lr, [sp, #100]	; 0x64
   16ac8:	movw	ip, #52428	; 0xcccc
   16acc:	mov	r5, #-2147483648	; 0x80000000
   16ad0:	movt	ip, #3276	; 0xccc
   16ad4:	b	17050 <__assert_fail@plt+0x5a14>
   16ad8:	ldr	r1, [sp, #88]	; 0x58
   16adc:	mov	r2, r4
   16ae0:	b	16b24 <__assert_fail@plt+0x54e8>
   16ae4:	mov	lr, #0
   16ae8:	b	16d38 <__assert_fail@plt+0x56fc>
   16aec:	mov	lr, #0
   16af0:	sub	r3, r3, r5
   16af4:	add	r4, r5, r4
   16af8:	ldr	r0, [sp, #96]	; 0x60
   16afc:	sub	r0, r0, r4
   16b00:	cmp	r0, #2
   16b04:	bcc	17310 <__assert_fail@plt+0x5cd4>
   16b08:	ldr	r1, [sp, #88]	; 0x58
   16b0c:	mov	r2, r4
   16b10:	cmp	lr, #0
   16b14:	sub	r3, r3, #1
   16b18:	strbne	r6, [lr], #1
   16b1c:	moveq	lr, #0
   16b20:	add	r2, r2, #1
   16b24:	subs	r5, sl, #45	; 0x2d
   16b28:	ldr	r0, [sp, #96]	; 0x60
   16b2c:	mov	r8, r9
   16b30:	bicne	r5, r3, r3, asr #31
   16b34:	cmp	r5, r9
   16b38:	movhi	r8, r5
   16b3c:	sub	r0, r0, r2
   16b40:	cmp	r8, r0
   16b44:	bcs	17310 <__assert_fail@plt+0x5cd4>
   16b48:	mov	r4, r2
   16b4c:	cmp	lr, #0
   16b50:	beq	16b7c <__assert_fail@plt+0x5540>
   16b54:	cmp	r5, r9
   16b58:	mov	r3, lr
   16b5c:	bls	16bac <__assert_fail@plt+0x5570>
   16b60:	cmp	sl, #48	; 0x30
   16b64:	sub	r2, r5, r9
   16b68:	cmpne	sl, #43	; 0x2b
   16b6c:	bne	16b84 <__assert_fail@plt+0x5548>
   16b70:	mov	r0, lr
   16b74:	mov	r1, #48	; 0x30
   16b78:	b	16b8c <__assert_fail@plt+0x5550>
   16b7c:	mov	lr, #0
   16b80:	b	16c34 <__assert_fail@plt+0x55f8>
   16b84:	mov	r0, lr
   16b88:	mov	r1, #32
   16b8c:	mov	sl, r2
   16b90:	mov	r6, lr
   16b94:	bl	11534 <memset@plt>
   16b98:	ldr	r1, [sp, #88]	; 0x58
   16b9c:	movw	ip, #52428	; 0xcccc
   16ba0:	add	r3, r6, sl
   16ba4:	mov	lr, r6
   16ba8:	movt	ip, #3276	; 0xccc
   16bac:	mov	sl, r4
   16bb0:	tst	r1, #1
   16bb4:	beq	16c0c <__assert_fail@plt+0x55d0>
   16bb8:	cmp	r9, #0
   16bbc:	beq	16c2c <__assert_fail@plt+0x55f0>
   16bc0:	ldr	r0, [sp, #28]
   16bc4:	cmp	r5, r9
   16bc8:	movls	r5, r9
   16bcc:	add	r6, r0, r7
   16bd0:	add	r0, lr, r5
   16bd4:	sub	r5, r7, #1
   16bd8:	mov	r7, r3
   16bdc:	sub	r4, r0, #1
   16be0:	bl	11498 <__ctype_toupper_loc@plt>
   16be4:	movw	ip, #52428	; 0xcccc
   16be8:	mov	r3, r7
   16bec:	movt	ip, #3276	; 0xccc
   16bf0:	ldrb	r1, [r5, -r6]
   16bf4:	ldr	r2, [r0]
   16bf8:	adds	r6, r6, #1
   16bfc:	ldr	r1, [r2, r1, lsl #2]
   16c00:	strb	r1, [r4], #-1
   16c04:	bcc	16bf0 <__assert_fail@plt+0x55b4>
   16c08:	b	16c2c <__assert_fail@plt+0x55f0>
   16c0c:	mov	r0, r3
   16c10:	mov	r1, r7
   16c14:	mov	r2, r9
   16c18:	mov	r4, r3
   16c1c:	bl	11384 <memcpy@plt>
   16c20:	movw	ip, #52428	; 0xcccc
   16c24:	mov	r3, r4
   16c28:	movt	ip, #3276	; 0xccc
   16c2c:	add	lr, r3, r9
   16c30:	mov	r4, sl
   16c34:	ldr	r9, [sp, #92]	; 0x5c
   16c38:	add	r4, r8, r4
   16c3c:	b	16ea4 <__assert_fail@plt+0x5868>
   16c40:	mov	r1, #32
   16c44:	mov	sl, r2
   16c48:	mov	r4, r0
   16c4c:	bl	11534 <memset@plt>
   16c50:	movw	ip, #52428	; 0xcccc
   16c54:	add	lr, r4, sl
   16c58:	mov	r0, r4
   16c5c:	movt	ip, #3276	; 0xccc
   16c60:	tst	r5, #1
   16c64:	beq	16cb8 <__assert_fail@plt+0x567c>
   16c68:	cmp	r8, #0
   16c6c:	add	r4, sp, #104	; 0x68
   16c70:	beq	16d34 <__assert_fail@plt+0x56f8>
   16c74:	cmp	r7, r8
   16c78:	movls	r7, r8
   16c7c:	add	r0, r0, r7
   16c80:	mov	r7, lr
   16c84:	sub	r5, r0, #1
   16c88:	bl	1148c <__ctype_tolower_loc@plt>
   16c8c:	movw	ip, #52428	; 0xcccc
   16c90:	mov	lr, r7
   16c94:	mov	r1, r8
   16c98:	movt	ip, #3276	; 0xccc
   16c9c:	ldrb	r2, [r4, r1]
   16ca0:	ldr	r3, [r0]
   16ca4:	subs	r1, r1, #1
   16ca8:	ldr	r2, [r3, r2, lsl #2]
   16cac:	strb	r2, [r5], #-1
   16cb0:	bne	16c9c <__assert_fail@plt+0x5660>
   16cb4:	b	16d34 <__assert_fail@plt+0x56f8>
   16cb8:	ldr	r1, [sp, #88]	; 0x58
   16cbc:	add	r4, sp, #104	; 0x68
   16cc0:	tst	r1, #1
   16cc4:	beq	16d14 <__assert_fail@plt+0x56d8>
   16cc8:	cmp	r8, #0
   16ccc:	beq	16d34 <__assert_fail@plt+0x56f8>
   16cd0:	cmp	r7, r8
   16cd4:	movls	r7, r8
   16cd8:	add	r0, r0, r7
   16cdc:	mov	r7, lr
   16ce0:	sub	r5, r0, #1
   16ce4:	bl	11498 <__ctype_toupper_loc@plt>
   16ce8:	movw	ip, #52428	; 0xcccc
   16cec:	mov	lr, r7
   16cf0:	mov	r1, r8
   16cf4:	movt	ip, #3276	; 0xccc
   16cf8:	ldrb	r2, [r4, r1]
   16cfc:	ldr	r3, [r0]
   16d00:	subs	r1, r1, #1
   16d04:	ldr	r2, [r3, r2, lsl #2]
   16d08:	strb	r2, [r5], #-1
   16d0c:	bne	16cf8 <__assert_fail@plt+0x56bc>
   16d10:	b	16d34 <__assert_fail@plt+0x56f8>
   16d14:	ldr	r1, [sp, #32]
   16d18:	mov	r0, lr
   16d1c:	mov	r2, r8
   16d20:	mov	r4, lr
   16d24:	bl	11384 <memcpy@plt>
   16d28:	movw	ip, #52428	; 0xcccc
   16d2c:	mov	lr, r4
   16d30:	movt	ip, #3276	; 0xccc
   16d34:	add	lr, lr, r8
   16d38:	ldr	r4, [sp, #84]	; 0x54
   16d3c:	mov	r5, #-2147483648	; 0x80000000
   16d40:	add	r4, r6, r4
   16d44:	b	17050 <__assert_fail@plt+0x5a14>
   16d48:	subs	r0, sl, #45	; 0x2d
   16d4c:	ldr	r1, [sp, #96]	; 0x60
   16d50:	ldr	lr, [sp, #100]	; 0x64
   16d54:	bicne	r0, r8, r8, asr #31
   16d58:	cmp	r0, #1
   16d5c:	mov	r7, r0
   16d60:	movls	r7, #1
   16d64:	sub	r1, r1, r4
   16d68:	cmp	r7, r1
   16d6c:	bcs	17310 <__assert_fail@plt+0x5cd4>
   16d70:	mov	r6, r4
   16d74:	cmp	lr, #0
   16d78:	beq	16da8 <__assert_fail@plt+0x576c>
   16d7c:	mov	r1, #37	; 0x25
   16d80:	cmp	r0, #2
   16d84:	bcc	172d0 <__assert_fail@plt+0x5c94>
   16d88:	uxtb	r1, sl
   16d8c:	sub	r5, r0, #1
   16d90:	cmp	r1, #48	; 0x30
   16d94:	cmpne	r1, #43	; 0x2b
   16d98:	bne	172a8 <__assert_fail@plt+0x5c6c>
   16d9c:	mov	r0, lr
   16da0:	mov	r1, #48	; 0x30
   16da4:	b	172b0 <__assert_fail@plt+0x5c74>
   16da8:	mov	lr, #0
   16dac:	mov	r5, #-2147483648	; 0x80000000
   16db0:	b	17238 <__assert_fail@plt+0x5bfc>
   16db4:	mov	r2, #1
   16db8:	cmp	r5, #3
   16dbc:	bhi	16f40 <__assert_fail@plt+0x5904>
   16dc0:	movw	ip, #34953	; 0x8889
   16dc4:	movt	ip, #34952	; 0x8888
   16dc8:	smmla	r4, lr, ip, lr
   16dcc:	asr	r3, r4, #5
   16dd0:	add	r4, r3, r4, lsr #31
   16dd4:	smmla	r3, r4, ip, r4
   16dd8:	asr	r7, r3, #5
   16ddc:	add	r3, r7, r3, lsr #31
   16de0:	rsb	r3, r3, r3, lsl #4
   16de4:	sub	ip, r4, r3, lsl #2
   16de8:	movw	r3, #46021	; 0xb3c5
   16dec:	rsb	r4, r4, r4, lsl #4
   16df0:	movt	r3, #37282	; 0x91a2
   16df4:	smmla	r3, lr, r3, lr
   16df8:	asr	r7, r3, #11
   16dfc:	add	r3, r7, r3, lsr #31
   16e00:	sub	r7, lr, r4, lsl #2
   16e04:	add	r4, pc, #0
   16e08:	ldr	pc, [r4, r5, lsl #2]
   16e0c:	andeq	r6, r1, ip, lsl lr
   16e10:	andeq	r7, r1, ip, asr #4
   16e14:	andeq	r7, r1, ip, rrx
   16e18:	andeq	r7, r1, r4, rrx
   16e1c:	mov	r7, #100	; 0x64
   16e20:	mla	r3, r3, r7, ip
   16e24:	mov	r7, #5
   16e28:	mov	r6, #1
   16e2c:	mov	r4, #0
   16e30:	b	17260 <__assert_fail@plt+0x5c24>
   16e34:	mov	r5, #0
   16e38:	mov	r1, #89	; 0x59
   16e3c:	b	16120 <__assert_fail@plt+0x4ae4>
   16e40:	mov	r0, r6
   16e44:	mov	r1, #32
   16e48:	mov	r2, r7
   16e4c:	bl	11534 <memset@plt>
   16e50:	ldr	r6, [sp, #100]	; 0x64
   16e54:	ldr	r0, [sp, #92]	; 0x5c
   16e58:	ldr	r1, [sp, #88]	; 0x58
   16e5c:	add	r6, r6, r7
   16e60:	stm	sp, {r1, sl}
   16e64:	str	r0, [sp, #8]
   16e68:	ldr	r0, [fp, #20]
   16e6c:	ldr	r2, [sp, #80]	; 0x50
   16e70:	ldr	r3, [sp, #76]	; 0x4c
   16e74:	mov	r1, r8
   16e78:	str	r0, [sp, #12]
   16e7c:	ldr	r0, [fp, #24]
   16e80:	str	r0, [sp, #16]
   16e84:	mov	r0, r6
   16e88:	bl	15a78 <__assert_fail@plt+0x443c>
   16e8c:	add	r7, r6, r4
   16e90:	ldr	r4, [sp, #84]	; 0x54
   16e94:	movw	ip, #52428	; 0xcccc
   16e98:	mov	lr, r7
   16e9c:	movt	ip, #3276	; 0xccc
   16ea0:	add	r4, r5, r4
   16ea4:	mov	r5, #-2147483648	; 0x80000000
   16ea8:	b	17050 <__assert_fail@plt+0x5a14>
   16eac:	cmp	r8, #6
   16eb0:	mov	r0, r8
   16eb4:	movle	r0, #6
   16eb8:	sub	lr, r0, #6
   16ebc:	b	16140 <__assert_fail@plt+0x4b04>
   16ec0:	movw	r5, #63636	; 0xf894
   16ec4:	movt	r5, #65535	; 0xffff
   16ec8:	sub	r5, r5, r3
   16ecc:	add	r3, r7, #100	; 0x64
   16ed0:	cmp	lr, r5
   16ed4:	rsblt	r3, r7, #0
   16ed8:	b	16ef0 <__assert_fail@plt+0x58b4>
   16edc:	movw	r4, #63636	; 0xf894
   16ee0:	add	r3, r5, #100	; 0x64
   16ee4:	movt	r4, #65535	; 0xffff
   16ee8:	cmp	r7, r4
   16eec:	rsblt	r3, r5, #0
   16ef0:	ldr	r7, [fp, #12]
   16ef4:	ldr	lr, [sp, #100]	; 0x64
   16ef8:	cmp	sl, #0
   16efc:	mov	r4, #0
   16f00:	mov	r6, #0
   16f04:	moveq	sl, r7
   16f08:	cmp	sl, #43	; 0x2b
   16f0c:	bne	16910 <__assert_fail@plt+0x52d4>
   16f10:	ldr	r6, [sp, #72]	; 0x48
   16f14:	mov	r5, #0
   16f18:	movw	r7, #9999	; 0x270f
   16f1c:	mov	ip, #0
   16f20:	cmp	r6, r8
   16f24:	movwlt	r5, #1
   16f28:	cmp	r6, #2
   16f2c:	movweq	r7, #99	; 0x63
   16f30:	cmp	r7, r3
   16f34:	movwcc	ip, #1
   16f38:	orr	r6, r5, ip
   16f3c:	b	17268 <__assert_fail@plt+0x5c2c>
   16f40:	ldr	r4, [sp, #84]	; 0x54
   16f44:	ldr	lr, [sp, #100]	; 0x64
   16f48:	ldr	r0, [sp, #92]	; 0x5c
   16f4c:	subs	r5, sl, #45	; 0x2d
   16f50:	bicne	r5, r8, r8, asr #31
   16f54:	sub	r0, r9, r0
   16f58:	add	r6, r0, #1
   16f5c:	ldr	r0, [sp, #96]	; 0x60
   16f60:	cmp	r5, r6
   16f64:	mov	r7, r6
   16f68:	movhi	r7, r5
   16f6c:	sub	r0, r0, r4
   16f70:	cmp	r7, r0
   16f74:	bcs	17310 <__assert_fail@plt+0x5cd4>
   16f78:	cmp	lr, #0
   16f7c:	beq	16fac <__assert_fail@plt+0x5970>
   16f80:	cmp	r5, r6
   16f84:	mov	r8, lr
   16f88:	bls	16fd4 <__assert_fail@plt+0x5998>
   16f8c:	uxtb	r0, sl
   16f90:	sub	r8, r5, r6
   16f94:	cmp	r0, #48	; 0x30
   16f98:	cmpne	r0, #43	; 0x2b
   16f9c:	bne	16fb8 <__assert_fail@plt+0x597c>
   16fa0:	mov	r0, lr
   16fa4:	mov	r1, #48	; 0x30
   16fa8:	b	16fc0 <__assert_fail@plt+0x5984>
   16fac:	mov	lr, #0
   16fb0:	mov	r5, #-2147483648	; 0x80000000
   16fb4:	b	1704c <__assert_fail@plt+0x5a10>
   16fb8:	mov	r0, lr
   16fbc:	mov	r1, #32
   16fc0:	mov	r2, r8
   16fc4:	mov	sl, lr
   16fc8:	bl	11534 <memset@plt>
   16fcc:	mov	lr, sl
   16fd0:	add	r8, sl, r8
   16fd4:	ldr	r0, [sp, #88]	; 0x58
   16fd8:	str	r4, [sp, #84]	; 0x54
   16fdc:	tst	r0, #1
   16fe0:	beq	17028 <__assert_fail@plt+0x59ec>
   16fe4:	ldr	sl, [sp, #92]	; 0x5c
   16fe8:	cmp	r6, #0
   16fec:	beq	17038 <__assert_fail@plt+0x59fc>
   16ff0:	cmp	r5, r6
   16ff4:	sub	r4, sl, r9
   16ff8:	movls	r5, r6
   16ffc:	add	r0, lr, r5
   17000:	sub	r5, r0, #1
   17004:	bl	11498 <__ctype_toupper_loc@plt>
   17008:	ldrb	r1, [sl, -r4]
   1700c:	ldr	r2, [r0]
   17010:	add	r4, r4, #1
   17014:	cmp	r4, #1
   17018:	ldr	r1, [r2, r1, lsl #2]
   1701c:	strb	r1, [r5], #-1
   17020:	bne	17008 <__assert_fail@plt+0x59cc>
   17024:	b	17038 <__assert_fail@plt+0x59fc>
   17028:	ldr	r1, [sp, #92]	; 0x5c
   1702c:	mov	r0, r8
   17030:	mov	r2, r6
   17034:	bl	11384 <memcpy@plt>
   17038:	ldr	r4, [sp, #84]	; 0x54
   1703c:	movw	ip, #52428	; 0xcccc
   17040:	add	lr, r8, r6
   17044:	mov	r5, #-2147483648	; 0x80000000
   17048:	movt	ip, #3276	; 0xccc
   1704c:	add	r4, r7, r4
   17050:	ldrb	r3, [r9, #1]!
   17054:	mvn	r8, #0
   17058:	cmp	r3, #0
   1705c:	bne	15b64 <__assert_fail@plt+0x4528>
   17060:	b	172ec <__assert_fail@plt+0x5cb0>
   17064:	cmp	r7, #0
   17068:	beq	17244 <__assert_fail@plt+0x5c08>
   1706c:	movw	r5, #10000	; 0x2710
   17070:	mov	r6, #1
   17074:	mov	r4, #20
   17078:	mla	r3, r3, r5, r7
   1707c:	mov	r7, #100	; 0x64
   17080:	mla	r3, ip, r7, r3
   17084:	mov	r7, #9
   17088:	b	17260 <__assert_fail@plt+0x5c24>
   1708c:	sub	r1, fp, #48	; 0x30
   17090:	mov	r0, r6
   17094:	mov	r2, r7
   17098:	bl	11384 <memcpy@plt>
   1709c:	movw	ip, #52428	; 0xcccc
   170a0:	movt	ip, #3276	; 0xccc
   170a4:	add	lr, r6, r7
   170a8:	cmp	sl, #45	; 0x2d
   170ac:	mov	r4, #0
   170b0:	subne	r0, r8, r7
   170b4:	bicne	r4, r0, r0, asr #31
   170b8:	sub	r0, r5, r7
   170bc:	ldr	r5, [sp, #84]	; 0x54
   170c0:	cmp	r4, r0
   170c4:	bcs	17310 <__assert_fail@plt+0x5cd4>
   170c8:	cmp	lr, #0
   170cc:	cmpne	r4, #0
   170d0:	beq	17298 <__assert_fail@plt+0x5c5c>
   170d4:	uxtb	r0, sl
   170d8:	cmp	r0, #48	; 0x30
   170dc:	cmpne	r0, #43	; 0x2b
   170e0:	bne	17274 <__assert_fail@plt+0x5c38>
   170e4:	mov	r0, lr
   170e8:	mov	r6, lr
   170ec:	mov	r1, #48	; 0x30
   170f0:	b	17280 <__assert_fail@plt+0x5c44>
   170f4:	mov	r1, #32
   170f8:	mov	r2, r4
   170fc:	bl	11534 <memset@plt>
   17100:	ldr	r0, [sp, #100]	; 0x64
   17104:	movw	ip, #52428	; 0xcccc
   17108:	movt	ip, #3276	; 0xccc
   1710c:	add	r4, r0, r4
   17110:	tst	r7, #1
   17114:	beq	17160 <__assert_fail@plt+0x5b24>
   17118:	ldr	sl, [sp, #20]
   1711c:	cmp	r8, #0
   17120:	beq	171d4 <__assert_fail@plt+0x5b98>
   17124:	cmp	r5, r8
   17128:	movls	r5, r8
   1712c:	add	r0, r0, r5
   17130:	sub	r5, r0, #1
   17134:	bl	1148c <__ctype_tolower_loc@plt>
   17138:	movw	ip, #52428	; 0xcccc
   1713c:	mov	r1, r8
   17140:	movt	ip, #3276	; 0xccc
   17144:	ldrb	r2, [sl, r1]
   17148:	ldr	r3, [r0]
   1714c:	subs	r1, r1, #1
   17150:	ldr	r2, [r3, r2, lsl #2]
   17154:	strb	r2, [r5], #-1
   17158:	bne	17144 <__assert_fail@plt+0x5b08>
   1715c:	b	171d4 <__assert_fail@plt+0x5b98>
   17160:	ldr	r2, [sp, #88]	; 0x58
   17164:	eor	r1, r7, #1
   17168:	and	r1, r2, r1
   1716c:	tst	r1, #1
   17170:	beq	171bc <__assert_fail@plt+0x5b80>
   17174:	ldr	sl, [sp, #20]
   17178:	cmp	r8, #0
   1717c:	beq	171d4 <__assert_fail@plt+0x5b98>
   17180:	cmp	r5, r8
   17184:	movls	r5, r8
   17188:	add	r0, r0, r5
   1718c:	sub	r5, r0, #1
   17190:	bl	11498 <__ctype_toupper_loc@plt>
   17194:	movw	ip, #52428	; 0xcccc
   17198:	mov	r1, r8
   1719c:	movt	ip, #3276	; 0xccc
   171a0:	ldrb	r2, [sl, r1]
   171a4:	ldr	r3, [r0]
   171a8:	subs	r1, r1, #1
   171ac:	ldr	r2, [r3, r2, lsl #2]
   171b0:	strb	r2, [r5], #-1
   171b4:	bne	171a0 <__assert_fail@plt+0x5b64>
   171b8:	b	171d4 <__assert_fail@plt+0x5b98>
   171bc:	ldr	r1, [sp, #36]	; 0x24
   171c0:	mov	r0, r4
   171c4:	mov	r2, r8
   171c8:	bl	11384 <memcpy@plt>
   171cc:	movw	ip, #52428	; 0xcccc
   171d0:	movt	ip, #3276	; 0xccc
   171d4:	add	lr, r4, r8
   171d8:	b	16d38 <__assert_fail@plt+0x56fc>
   171dc:	mov	r0, lr
   171e0:	mov	r1, #32
   171e4:	mov	r2, r5
   171e8:	mov	r4, lr
   171ec:	bl	11534 <memset@plt>
   171f0:	movw	ip, #52428	; 0xcccc
   171f4:	mov	lr, r4
   171f8:	add	lr, r4, r5
   171fc:	movt	ip, #3276	; 0xccc
   17200:	mov	r0, #10
   17204:	b	17230 <__assert_fail@plt+0x5bf4>
   17208:	mov	r0, lr
   1720c:	mov	r1, #32
   17210:	mov	r2, r5
   17214:	mov	r4, lr
   17218:	bl	11534 <memset@plt>
   1721c:	movw	ip, #52428	; 0xcccc
   17220:	mov	lr, r4
   17224:	add	lr, r4, r5
   17228:	movt	ip, #3276	; 0xccc
   1722c:	mov	r0, #9
   17230:	mov	r5, #-2147483648	; 0x80000000
   17234:	strb	r0, [lr], #1
   17238:	mov	r4, r6
   1723c:	add	r4, r7, r6
   17240:	b	17050 <__assert_fail@plt+0x5a14>
   17244:	cmp	ip, #0
   17248:	beq	172dc <__assert_fail@plt+0x5ca0>
   1724c:	mov	r7, #100	; 0x64
   17250:	mov	r6, #1
   17254:	mov	r4, #4
   17258:	mla	r3, r3, r7, ip
   1725c:	mov	r7, #6
   17260:	str	r7, [sp, #72]	; 0x48
   17264:	ldr	lr, [sp, #100]	; 0x64
   17268:	movw	ip, #52428	; 0xcccc
   1726c:	movt	ip, #3276	; 0xccc
   17270:	b	16910 <__assert_fail@plt+0x52d4>
   17274:	mov	r0, lr
   17278:	mov	r6, lr
   1727c:	mov	r1, #32
   17280:	mov	r2, r4
   17284:	bl	11534 <memset@plt>
   17288:	movw	ip, #52428	; 0xcccc
   1728c:	add	lr, r6, r4
   17290:	mov	r0, r6
   17294:	movt	ip, #3276	; 0xccc
   17298:	add	r0, r4, r5
   1729c:	mov	r5, #-2147483648	; 0x80000000
   172a0:	add	r4, r0, r7
   172a4:	b	17050 <__assert_fail@plt+0x5a14>
   172a8:	mov	r0, lr
   172ac:	mov	r1, #32
   172b0:	mov	r2, r5
   172b4:	mov	r4, lr
   172b8:	bl	11534 <memset@plt>
   172bc:	ldrb	r1, [r9]
   172c0:	movw	ip, #52428	; 0xcccc
   172c4:	mov	lr, r4
   172c8:	add	lr, r4, r5
   172cc:	movt	ip, #3276	; 0xccc
   172d0:	mov	r5, #-2147483648	; 0x80000000
   172d4:	strb	r1, [lr], #1
   172d8:	b	17238 <__assert_fail@plt+0x5bfc>
   172dc:	mov	r7, #3
   172e0:	b	16e28 <__assert_fail@plt+0x57ec>
   172e4:	ldr	lr, [sp, #100]	; 0x64
   172e8:	mov	r4, #0
   172ec:	ldr	r0, [sp, #96]	; 0x60
   172f0:	ldr	r1, [sp, #56]	; 0x38
   172f4:	cmp	r0, #0
   172f8:	cmpne	lr, #0
   172fc:	movne	r0, #0
   17300:	strbne	r0, [lr]
   17304:	ldr	r0, [sp, #60]	; 0x3c
   17308:	str	r1, [r0]
   1730c:	b	17320 <__assert_fail@plt+0x5ce4>
   17310:	mov	r0, #34	; 0x22
   17314:	ldr	r1, [sp, #60]	; 0x3c
   17318:	mov	r4, #0
   1731c:	str	r0, [r1]
   17320:	mov	r0, r4
   17324:	sub	sp, fp, #28
   17328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1732c:	mov	r0, #75	; 0x4b
   17330:	b	17314 <__assert_fail@plt+0x5cd8>
   17334:	push	{r4, r5, fp, lr}
   17338:	add	fp, sp, #8
   1733c:	cmp	r0, #0
   17340:	beq	173d4 <__assert_fail@plt+0x5d98>
   17344:	mov	r1, #47	; 0x2f
   17348:	mov	r4, r0
   1734c:	bl	115ac <strrchr@plt>
   17350:	cmp	r0, #0
   17354:	mov	r5, r4
   17358:	addne	r5, r0, #1
   1735c:	sub	r0, r5, r4
   17360:	cmp	r0, #7
   17364:	blt	173b8 <__assert_fail@plt+0x5d7c>
   17368:	movw	r1, #53133	; 0xcf8d
   1736c:	sub	r0, r5, #7
   17370:	mov	r2, #7
   17374:	movt	r1, #1
   17378:	bl	1160c <strncmp@plt>
   1737c:	cmp	r0, #0
   17380:	bne	173b8 <__assert_fail@plt+0x5d7c>
   17384:	movw	r1, #53141	; 0xcf95
   17388:	mov	r0, r5
   1738c:	mov	r2, #3
   17390:	movt	r1, #1
   17394:	bl	1160c <strncmp@plt>
   17398:	cmp	r0, #0
   1739c:	beq	173a8 <__assert_fail@plt+0x5d6c>
   173a0:	mov	r4, r5
   173a4:	b	173b8 <__assert_fail@plt+0x5d7c>
   173a8:	movw	r0, #57792	; 0xe1c0
   173ac:	add	r4, r5, #3
   173b0:	movt	r0, #2
   173b4:	str	r4, [r0]
   173b8:	movw	r0, #57796	; 0xe1c4
   173bc:	movt	r0, #2
   173c0:	str	r4, [r0]
   173c4:	movw	r0, #58024	; 0xe2a8
   173c8:	movt	r0, #2
   173cc:	str	r4, [r0]
   173d0:	pop	{r4, r5, fp, pc}
   173d4:	movw	r0, #57808	; 0xe1d0
   173d8:	movt	r0, #2
   173dc:	ldr	r1, [r0]
   173e0:	movw	r0, #53077	; 0xcf55
   173e4:	movt	r0, #1
   173e8:	bl	11600 <fputs@plt>
   173ec:	bl	11618 <abort@plt>
   173f0:	push	{r4, r5, r6, sl, fp, lr}
   173f4:	add	fp, sp, #16
   173f8:	mov	r4, r0
   173fc:	movw	r0, #58032	; 0xe2b0
   17400:	movt	r0, #2
   17404:	cmp	r4, #0
   17408:	moveq	r4, r0
   1740c:	bl	11510 <__errno_location@plt>
   17410:	ldr	r6, [r0]
   17414:	mov	r5, r0
   17418:	mov	r0, r4
   1741c:	mov	r1, #48	; 0x30
   17420:	bl	19bd0 <__assert_fail@plt+0x8594>
   17424:	str	r6, [r5]
   17428:	pop	{r4, r5, r6, sl, fp, pc}
   1742c:	movw	r1, #58032	; 0xe2b0
   17430:	cmp	r0, #0
   17434:	movt	r1, #2
   17438:	movne	r1, r0
   1743c:	ldr	r0, [r1]
   17440:	bx	lr
   17444:	movw	r2, #58032	; 0xe2b0
   17448:	cmp	r0, #0
   1744c:	movt	r2, #2
   17450:	movne	r2, r0
   17454:	str	r1, [r2]
   17458:	bx	lr
   1745c:	movw	r3, #58032	; 0xe2b0
   17460:	cmp	r0, #0
   17464:	and	r2, r2, #1
   17468:	movt	r3, #2
   1746c:	movne	r3, r0
   17470:	ubfx	r0, r1, #5, #3
   17474:	and	r1, r1, #31
   17478:	add	ip, r3, r0, lsl #2
   1747c:	mov	r0, #1
   17480:	ldr	r3, [ip, #8]
   17484:	and	r0, r0, r3, lsr r1
   17488:	eor	r2, r0, r2
   1748c:	eor	r1, r3, r2, lsl r1
   17490:	str	r1, [ip, #8]
   17494:	bx	lr
   17498:	movw	r2, #58032	; 0xe2b0
   1749c:	cmp	r0, #0
   174a0:	movt	r2, #2
   174a4:	movne	r2, r0
   174a8:	ldr	r0, [r2, #4]
   174ac:	str	r1, [r2, #4]
   174b0:	bx	lr
   174b4:	push	{fp, lr}
   174b8:	mov	fp, sp
   174bc:	movw	r3, #58032	; 0xe2b0
   174c0:	cmp	r0, #0
   174c4:	movt	r3, #2
   174c8:	movne	r3, r0
   174cc:	cmp	r1, #0
   174d0:	mov	r0, #10
   174d4:	cmpne	r2, #0
   174d8:	str	r0, [r3]
   174dc:	bne	174e4 <__assert_fail@plt+0x5ea8>
   174e0:	bl	11618 <abort@plt>
   174e4:	str	r1, [r3, #40]	; 0x28
   174e8:	str	r2, [r3, #44]	; 0x2c
   174ec:	pop	{fp, pc}
   174f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174f4:	add	fp, sp, #28
   174f8:	sub	sp, sp, #20
   174fc:	mov	r7, r0
   17500:	ldr	r0, [fp, #8]
   17504:	movw	r5, #58032	; 0xe2b0
   17508:	mov	r8, r3
   1750c:	mov	r9, r2
   17510:	mov	sl, r1
   17514:	movt	r5, #2
   17518:	cmp	r0, #0
   1751c:	movne	r5, r0
   17520:	bl	11510 <__errno_location@plt>
   17524:	ldr	r2, [r5, #40]	; 0x28
   17528:	ldr	r3, [r5, #44]	; 0x2c
   1752c:	mov	r4, r0
   17530:	ldm	r5, {r0, r1}
   17534:	add	r5, r5, #8
   17538:	ldr	r6, [r4]
   1753c:	stm	sp, {r0, r1, r5}
   17540:	mov	r0, r7
   17544:	mov	r1, sl
   17548:	str	r2, [sp, #12]
   1754c:	str	r3, [sp, #16]
   17550:	mov	r2, r9
   17554:	mov	r3, r8
   17558:	bl	17568 <__assert_fail@plt+0x5f2c>
   1755c:	str	r6, [r4]
   17560:	sub	sp, fp, #28
   17564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1756c:	add	fp, sp, #28
   17570:	sub	sp, sp, #156	; 0x9c
   17574:	mov	r5, r0
   17578:	add	r0, r2, #1
   1757c:	mov	r6, r1
   17580:	mov	sl, r3
   17584:	str	r2, [fp, #-80]	; 0xffffffb0
   17588:	str	r0, [sp, #72]	; 0x48
   1758c:	ldr	r0, [fp, #12]
   17590:	and	r1, r0, #1
   17594:	str	r1, [sp, #32]
   17598:	and	r1, r0, #4
   1759c:	str	r1, [sp, #28]
   175a0:	ubfx	r9, r0, #1, #1
   175a4:	bl	11414 <__ctype_get_mb_cur_max@plt>
   175a8:	str	r0, [sp, #40]	; 0x28
   175ac:	ldr	r0, [fp, #24]
   175b0:	ldr	r7, [fp, #8]
   175b4:	mov	r1, #0
   175b8:	mov	lr, #0
   175bc:	str	r5, [fp, #-84]	; 0xffffffac
   175c0:	str	r1, [sp, #60]	; 0x3c
   175c4:	mov	r1, #1
   175c8:	str	r1, [fp, #-48]	; 0xffffffd0
   175cc:	str	r0, [sp, #80]	; 0x50
   175d0:	ldr	r0, [fp, #20]
   175d4:	str	r0, [sp, #76]	; 0x4c
   175d8:	mov	r0, #0
   175dc:	str	r0, [sp, #56]	; 0x38
   175e0:	mov	r0, #0
   175e4:	str	r0, [fp, #-88]	; 0xffffffa8
   175e8:	mov	r0, #0
   175ec:	str	r0, [fp, #-72]	; 0xffffffb8
   175f0:	mov	r0, #0
   175f4:	cmp	r7, #10
   175f8:	bhi	185d4 <__assert_fail@plt+0x6f98>
   175fc:	add	r1, pc, #24
   17600:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17604:	mov	ip, r6
   17608:	mov	r8, #0
   1760c:	mov	r2, #1
   17610:	mov	r6, #0
   17614:	mov	r3, sl
   17618:	ldr	pc, [r1, r7, lsl #2]
   1761c:	andeq	r7, r1, r8, lsl #14
   17620:	andeq	r7, r1, ip, asr r7
   17624:	andeq	r7, r1, ip, lsl r7
   17628:	andeq	r7, r1, r0, lsl #14
   1762c:	andeq	r7, r1, r0, asr r7
   17630:	andeq	r7, r1, r4, lsl #15
   17634:	andeq	r7, r1, ip, lsr #14
   17638:	andeq	r7, r1, r8, lsl #16
   1763c:	andeq	r7, r1, r8, asr #12
   17640:	andeq	r7, r1, r8, asr #12
   17644:	andeq	r7, r1, r8, lsl #13
   17648:	movw	r0, #53223	; 0xcfe7
   1764c:	mov	r1, r7
   17650:	mov	r6, r5
   17654:	mov	r4, ip
   17658:	mov	r5, lr
   1765c:	movt	r0, #1
   17660:	bl	18d38 <__assert_fail@plt+0x76fc>
   17664:	str	r0, [sp, #76]	; 0x4c
   17668:	movw	r0, #54356	; 0xd454
   1766c:	mov	r1, r7
   17670:	movt	r0, #1
   17674:	bl	18d38 <__assert_fail@plt+0x76fc>
   17678:	mov	lr, r5
   1767c:	mov	r5, r6
   17680:	mov	ip, r4
   17684:	str	r0, [sp, #80]	; 0x50
   17688:	mov	r8, #0
   1768c:	tst	r9, #1
   17690:	str	lr, [sp, #44]	; 0x2c
   17694:	bne	176cc <__assert_fail@plt+0x6090>
   17698:	ldr	r0, [sp, #76]	; 0x4c
   1769c:	ldrb	r0, [r0]
   176a0:	cmp	r0, #0
   176a4:	beq	176cc <__assert_fail@plt+0x6090>
   176a8:	ldr	r1, [sp, #76]	; 0x4c
   176ac:	mov	r8, #0
   176b0:	add	r1, r1, #1
   176b4:	cmp	r8, ip
   176b8:	strbcc	r0, [r5, r8]
   176bc:	ldrb	r0, [r1, r8]
   176c0:	add	r8, r8, #1
   176c4:	cmp	r0, #0
   176c8:	bne	176b4 <__assert_fail@plt+0x6078>
   176cc:	ldr	r6, [sp, #80]	; 0x50
   176d0:	mov	r4, ip
   176d4:	mov	r0, r6
   176d8:	bl	114e0 <strlen@plt>
   176dc:	mov	ip, r4
   176e0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   176e4:	ldr	lr, [sp, #44]	; 0x2c
   176e8:	str	r6, [fp, #-88]	; 0xffffffa8
   176ec:	str	r0, [fp, #-72]	; 0xffffffb8
   176f0:	mov	r2, #1
   176f4:	mov	r6, r9
   176f8:	mov	r3, sl
   176fc:	b	17808 <__assert_fail@plt+0x61cc>
   17700:	mov	r0, #1
   17704:	b	1775c <__assert_fail@plt+0x6120>
   17708:	mov	r7, #0
   1770c:	mov	r8, #0
   17710:	mov	r2, r0
   17714:	mov	r6, #0
   17718:	b	17808 <__assert_fail@plt+0x61cc>
   1771c:	tst	r9, #1
   17720:	bne	1775c <__assert_fail@plt+0x6120>
   17724:	mov	r2, r0
   17728:	b	177b4 <__assert_fail@plt+0x6178>
   1772c:	mov	r0, #1
   17730:	mov	r8, #0
   17734:	mov	r7, #5
   17738:	mov	r2, #1
   1773c:	str	r0, [fp, #-72]	; 0xffffffb8
   17740:	movw	r0, #53221	; 0xcfe5
   17744:	movt	r0, #1
   17748:	str	r0, [fp, #-88]	; 0xffffffa8
   1774c:	b	1777c <__assert_fail@plt+0x6140>
   17750:	mov	r2, #1
   17754:	tst	r9, #1
   17758:	beq	177b4 <__assert_fail@plt+0x6178>
   1775c:	mov	r1, #1
   17760:	mov	r8, #0
   17764:	mov	r7, #2
   17768:	mov	r2, r0
   1776c:	str	r1, [fp, #-72]	; 0xffffffb8
   17770:	movw	r1, #54356	; 0xd454
   17774:	movt	r1, #1
   17778:	str	r1, [fp, #-88]	; 0xffffffa8
   1777c:	mov	r6, #1
   17780:	b	17808 <__assert_fail@plt+0x61cc>
   17784:	tst	r9, #1
   17788:	beq	177d8 <__assert_fail@plt+0x619c>
   1778c:	mov	r0, #1
   17790:	mov	r8, #0
   17794:	mov	r2, #1
   17798:	mov	r6, #1
   1779c:	mov	r7, #5
   177a0:	str	r0, [fp, #-72]	; 0xffffffb8
   177a4:	movw	r0, #53221	; 0xcfe5
   177a8:	movt	r0, #1
   177ac:	str	r0, [fp, #-88]	; 0xffffffa8
   177b0:	b	17808 <__assert_fail@plt+0x61cc>
   177b4:	cmp	ip, #0
   177b8:	mov	r8, #1
   177bc:	mov	r6, #0
   177c0:	mov	r7, #2
   177c4:	movne	r0, #39	; 0x27
   177c8:	strbne	r0, [r5]
   177cc:	movw	r0, #54356	; 0xd454
   177d0:	movt	r0, #1
   177d4:	b	177fc <__assert_fail@plt+0x61c0>
   177d8:	cmp	ip, #0
   177dc:	mov	r8, #1
   177e0:	mov	r2, #1
   177e4:	mov	r7, #5
   177e8:	mov	r6, #0
   177ec:	movne	r0, #34	; 0x22
   177f0:	strbne	r0, [r5]
   177f4:	movw	r0, #53221	; 0xcfe5
   177f8:	movt	r0, #1
   177fc:	str	r0, [fp, #-88]	; 0xffffffa8
   17800:	mov	r0, #1
   17804:	str	r0, [fp, #-72]	; 0xffffffb8
   17808:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1780c:	str	r7, [fp, #-68]	; 0xffffffbc
   17810:	str	r6, [fp, #-76]	; 0xffffffb4
   17814:	str	r2, [sp, #84]	; 0x54
   17818:	cmp	r0, #0
   1781c:	movwne	r0, #1
   17820:	and	r1, r0, r6
   17824:	and	r1, r2, r1
   17828:	str	r1, [sp, #48]	; 0x30
   1782c:	sub	r1, r7, #2
   17830:	clz	r1, r1
   17834:	lsr	r1, r1, #5
   17838:	and	r1, r1, r6
   1783c:	str	r1, [sp, #64]	; 0x40
   17840:	subs	r1, r7, #2
   17844:	eor	r7, r6, #1
   17848:	movwne	r1, #1
   1784c:	str	r7, [sp, #92]	; 0x5c
   17850:	orr	r7, r1, r7
   17854:	and	r1, r1, r2
   17858:	and	r0, r0, r1
   1785c:	str	r7, [sp, #68]	; 0x44
   17860:	mov	r7, #0
   17864:	str	r0, [fp, #-60]	; 0xffffffc4
   17868:	orr	r0, r1, r6
   1786c:	ldr	r1, [fp, #16]
   17870:	eor	r0, r0, #1
   17874:	clz	r1, r1
   17878:	lsr	r1, r1, #5
   1787c:	orr	r0, r1, r0
   17880:	str	r0, [fp, #-64]	; 0xffffffc0
   17884:	eor	r0, r2, #1
   17888:	str	r0, [sp, #52]	; 0x34
   1788c:	cmn	r3, #1
   17890:	beq	178a0 <__assert_fail@plt+0x6264>
   17894:	cmp	r7, r3
   17898:	bne	178ac <__assert_fail@plt+0x6270>
   1789c:	b	18408 <__assert_fail@plt+0x6dcc>
   178a0:	ldrb	r0, [r4, r7]
   178a4:	cmp	r0, #0
   178a8:	beq	18410 <__assert_fail@plt+0x6dd4>
   178ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   178b0:	cmp	r0, #0
   178b4:	beq	178fc <__assert_fail@plt+0x62c0>
   178b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   178bc:	add	r5, r7, r0
   178c0:	cmp	r0, #2
   178c4:	bcc	17910 <__assert_fail@plt+0x62d4>
   178c8:	mov	r0, #0
   178cc:	cmn	r3, #1
   178d0:	str	r0, [fp, #-56]	; 0xffffffc8
   178d4:	bne	17918 <__assert_fail@plt+0x62dc>
   178d8:	mov	r0, r4
   178dc:	mov	r4, ip
   178e0:	mov	r6, lr
   178e4:	bl	114e0 <strlen@plt>
   178e8:	mov	ip, r4
   178ec:	ldr	r4, [fp, #-80]	; 0xffffffb0
   178f0:	mov	lr, r6
   178f4:	mov	r3, r0
   178f8:	b	17918 <__assert_fail@plt+0x62dc>
   178fc:	mov	r0, #0
   17900:	mov	sl, r3
   17904:	str	r0, [fp, #-56]	; 0xffffffc8
   17908:	mov	r0, #0
   1790c:	b	17984 <__assert_fail@plt+0x6348>
   17910:	mov	r0, #0
   17914:	str	r0, [fp, #-56]	; 0xffffffc8
   17918:	cmp	r5, r3
   1791c:	bls	17930 <__assert_fail@plt+0x62f4>
   17920:	ldr	r5, [fp, #-84]	; 0xffffffac
   17924:	mov	r0, #0
   17928:	mov	sl, r3
   1792c:	b	17984 <__assert_fail@plt+0x6348>
   17930:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17934:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17938:	add	r0, r4, r7
   1793c:	mov	r5, lr
   17940:	mov	r6, ip
   17944:	mov	sl, r3
   17948:	bl	114d4 <bcmp@plt>
   1794c:	ldr	r2, [sp, #92]	; 0x5c
   17950:	cmp	r0, #0
   17954:	ldr	r3, [fp, #-84]	; 0xffffffac
   17958:	mov	r1, r0
   1795c:	movwne	r1, #1
   17960:	orr	r1, r1, r2
   17964:	tst	r1, #1
   17968:	beq	18494 <__assert_fail@plt+0x6e58>
   1796c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17970:	clz	r0, r0
   17974:	mov	lr, r5
   17978:	mov	ip, r6
   1797c:	mov	r5, r3
   17980:	lsr	r0, r0, #5
   17984:	str	r0, [fp, #-52]	; 0xffffffcc
   17988:	ldrb	r6, [r4, r7]
   1798c:	cmp	r6, #126	; 0x7e
   17990:	bhi	17eb8 <__assert_fail@plt+0x687c>
   17994:	add	r3, pc, #16
   17998:	mov	r9, #1
   1799c:	mov	r2, #110	; 0x6e
   179a0:	mov	r0, #97	; 0x61
   179a4:	mov	r1, #0
   179a8:	ldr	pc, [r3, r6, lsl #2]
   179ac:	andeq	r7, r1, ip, lsl sp
   179b0:			; <UNDEFINED> instruction: 0x00017eb8
   179b4:			; <UNDEFINED> instruction: 0x00017eb8
   179b8:			; <UNDEFINED> instruction: 0x00017eb8
   179bc:			; <UNDEFINED> instruction: 0x00017eb8
   179c0:			; <UNDEFINED> instruction: 0x00017eb8
   179c4:			; <UNDEFINED> instruction: 0x00017eb8
   179c8:	andeq	r7, r1, r8, lsr pc
   179cc:	strdeq	r7, [r1], -ip
   179d0:	strdeq	r7, [r1], -r4
   179d4:	andeq	r7, r1, r8, lsl #26
   179d8:	andeq	r7, r1, r0, lsr #28
   179dc:	andeq	r7, r1, ip, ror #25
   179e0:	andeq	r7, r1, r4, lsl #26
   179e4:			; <UNDEFINED> instruction: 0x00017eb8
   179e8:			; <UNDEFINED> instruction: 0x00017eb8
   179ec:			; <UNDEFINED> instruction: 0x00017eb8
   179f0:			; <UNDEFINED> instruction: 0x00017eb8
   179f4:			; <UNDEFINED> instruction: 0x00017eb8
   179f8:			; <UNDEFINED> instruction: 0x00017eb8
   179fc:			; <UNDEFINED> instruction: 0x00017eb8
   17a00:			; <UNDEFINED> instruction: 0x00017eb8
   17a04:			; <UNDEFINED> instruction: 0x00017eb8
   17a08:			; <UNDEFINED> instruction: 0x00017eb8
   17a0c:			; <UNDEFINED> instruction: 0x00017eb8
   17a10:			; <UNDEFINED> instruction: 0x00017eb8
   17a14:			; <UNDEFINED> instruction: 0x00017eb8
   17a18:			; <UNDEFINED> instruction: 0x00017eb8
   17a1c:			; <UNDEFINED> instruction: 0x00017eb8
   17a20:			; <UNDEFINED> instruction: 0x00017eb8
   17a24:			; <UNDEFINED> instruction: 0x00017eb8
   17a28:			; <UNDEFINED> instruction: 0x00017eb8
   17a2c:	muleq	r1, ip, ip
   17a30:	andeq	r7, r1, r0, lsr #25
   17a34:	andeq	r7, r1, r0, lsr #25
   17a38:	andeq	r7, r1, r4, lsl #25
   17a3c:	andeq	r7, r1, r0, lsr #25
   17a40:	andeq	r7, r1, r8, lsr #23
   17a44:	andeq	r7, r1, r0, lsr #25
   17a48:	andeq	r7, r1, r8, lsr #28
   17a4c:	andeq	r7, r1, r0, lsr #25
   17a50:	andeq	r7, r1, r0, lsr #25
   17a54:	andeq	r7, r1, r0, lsr #25
   17a58:	andeq	r7, r1, r8, lsr #23
   17a5c:	andeq	r7, r1, r8, lsr #23
   17a60:	andeq	r7, r1, r8, lsr #23
   17a64:	andeq	r7, r1, r8, lsr #23
   17a68:	andeq	r7, r1, r8, lsr #23
   17a6c:	andeq	r7, r1, r8, lsr #23
   17a70:	andeq	r7, r1, r8, lsr #23
   17a74:	andeq	r7, r1, r8, lsr #23
   17a78:	andeq	r7, r1, r8, lsr #23
   17a7c:	andeq	r7, r1, r8, lsr #23
   17a80:	andeq	r7, r1, r8, lsr #23
   17a84:	andeq	r7, r1, r8, lsr #23
   17a88:	andeq	r7, r1, r8, lsr #23
   17a8c:	andeq	r7, r1, r8, lsr #23
   17a90:	andeq	r7, r1, r8, lsr #23
   17a94:	andeq	r7, r1, r8, lsr #23
   17a98:	andeq	r7, r1, r0, lsr #25
   17a9c:	andeq	r7, r1, r0, lsr #25
   17aa0:	andeq	r7, r1, r0, lsr #25
   17aa4:	andeq	r7, r1, r0, lsr #25
   17aa8:	strdeq	r7, [r1], -r4
   17aac:			; <UNDEFINED> instruction: 0x00017eb8
   17ab0:	andeq	r7, r1, r8, lsr #23
   17ab4:	andeq	r7, r1, r8, lsr #23
   17ab8:	andeq	r7, r1, r8, lsr #23
   17abc:	andeq	r7, r1, r8, lsr #23
   17ac0:	andeq	r7, r1, r8, lsr #23
   17ac4:	andeq	r7, r1, r8, lsr #23
   17ac8:	andeq	r7, r1, r8, lsr #23
   17acc:	andeq	r7, r1, r8, lsr #23
   17ad0:	andeq	r7, r1, r8, lsr #23
   17ad4:	andeq	r7, r1, r8, lsr #23
   17ad8:	andeq	r7, r1, r8, lsr #23
   17adc:	andeq	r7, r1, r8, lsr #23
   17ae0:	andeq	r7, r1, r8, lsr #23
   17ae4:	andeq	r7, r1, r8, lsr #23
   17ae8:	andeq	r7, r1, r8, lsr #23
   17aec:	andeq	r7, r1, r8, lsr #23
   17af0:	andeq	r7, r1, r8, lsr #23
   17af4:	andeq	r7, r1, r8, lsr #23
   17af8:	andeq	r7, r1, r8, lsr #23
   17afc:	andeq	r7, r1, r8, lsr #23
   17b00:	andeq	r7, r1, r8, lsr #23
   17b04:	andeq	r7, r1, r8, lsr #23
   17b08:	andeq	r7, r1, r8, lsr #23
   17b0c:	andeq	r7, r1, r8, lsr #23
   17b10:	andeq	r7, r1, r8, lsr #23
   17b14:	andeq	r7, r1, r8, lsr #23
   17b18:	andeq	r7, r1, r0, lsr #25
   17b1c:	andeq	r7, r1, r8, asr #25
   17b20:	andeq	r7, r1, r8, lsr #23
   17b24:	andeq	r7, r1, r0, lsr #25
   17b28:	andeq	r7, r1, r8, lsr #23
   17b2c:	andeq	r7, r1, r0, lsr #25
   17b30:	andeq	r7, r1, r8, lsr #23
   17b34:	andeq	r7, r1, r8, lsr #23
   17b38:	andeq	r7, r1, r8, lsr #23
   17b3c:	andeq	r7, r1, r8, lsr #23
   17b40:	andeq	r7, r1, r8, lsr #23
   17b44:	andeq	r7, r1, r8, lsr #23
   17b48:	andeq	r7, r1, r8, lsr #23
   17b4c:	andeq	r7, r1, r8, lsr #23
   17b50:	andeq	r7, r1, r8, lsr #23
   17b54:	andeq	r7, r1, r8, lsr #23
   17b58:	andeq	r7, r1, r8, lsr #23
   17b5c:	andeq	r7, r1, r8, lsr #23
   17b60:	andeq	r7, r1, r8, lsr #23
   17b64:	andeq	r7, r1, r8, lsr #23
   17b68:	andeq	r7, r1, r8, lsr #23
   17b6c:	andeq	r7, r1, r8, lsr #23
   17b70:	andeq	r7, r1, r8, lsr #23
   17b74:	andeq	r7, r1, r8, lsr #23
   17b78:	andeq	r7, r1, r8, lsr #23
   17b7c:	andeq	r7, r1, r8, lsr #23
   17b80:	andeq	r7, r1, r8, lsr #23
   17b84:	andeq	r7, r1, r8, lsr #23
   17b88:	andeq	r7, r1, r8, lsr #23
   17b8c:	andeq	r7, r1, r8, lsr #23
   17b90:	andeq	r7, r1, r8, lsr #23
   17b94:	andeq	r7, r1, r8, lsr #23
   17b98:	andeq	r7, r1, ip, asr ip
   17b9c:	andeq	r7, r1, r0, lsr #25
   17ba0:	andeq	r7, r1, ip, asr ip
   17ba4:	andeq	r7, r1, r4, lsl #25
   17ba8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17bac:	tst	r0, #1
   17bb0:	bne	17bdc <__assert_fail@plt+0x65a0>
   17bb4:	ldr	r1, [fp, #16]
   17bb8:	ubfx	r0, r6, #5, #3
   17bbc:	mov	r2, #1
   17bc0:	ldr	r0, [r1, r0, lsl #2]
   17bc4:	and	r1, r6, #31
   17bc8:	tst	r0, r2, lsl r1
   17bcc:	beq	17bdc <__assert_fail@plt+0x65a0>
   17bd0:	mov	r0, r6
   17bd4:	mov	r1, r9
   17bd8:	b	17bf0 <__assert_fail@plt+0x65b4>
   17bdc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17be0:	mov	r1, r9
   17be4:	cmp	r0, #0
   17be8:	mov	r0, r6
   17bec:	beq	1833c <__assert_fail@plt+0x6d00>
   17bf0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17bf4:	tst	r2, #1
   17bf8:	bne	184d8 <__assert_fail@plt+0x6e9c>
   17bfc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17c00:	subs	r2, r2, #2
   17c04:	movwne	r2, #1
   17c08:	orr	r2, r2, lr
   17c0c:	tst	r2, #1
   17c10:	bne	17c48 <__assert_fail@plt+0x660c>
   17c14:	cmp	r8, ip
   17c18:	mov	lr, #1
   17c1c:	movcc	r2, #39	; 0x27
   17c20:	strbcc	r2, [r5, r8]
   17c24:	add	r2, r8, #1
   17c28:	cmp	r2, ip
   17c2c:	movcc	r3, #36	; 0x24
   17c30:	strbcc	r3, [r5, r2]
   17c34:	add	r2, r8, #2
   17c38:	add	r8, r8, #3
   17c3c:	cmp	r2, ip
   17c40:	movcc	r3, #39	; 0x27
   17c44:	strbcc	r3, [r5, r2]
   17c48:	cmp	r8, ip
   17c4c:	movcc	r2, #92	; 0x5c
   17c50:	strbcc	r2, [r5, r8]
   17c54:	add	r8, r8, #1
   17c58:	b	1837c <__assert_fail@plt+0x6d40>
   17c5c:	cmp	sl, #1
   17c60:	beq	17c84 <__assert_fail@plt+0x6648>
   17c64:	mov	r9, #0
   17c68:	cmn	sl, #1
   17c6c:	bne	17c90 <__assert_fail@plt+0x6654>
   17c70:	ldrb	r0, [r4, #1]
   17c74:	cmp	r0, #0
   17c78:	beq	17c84 <__assert_fail@plt+0x6648>
   17c7c:	mvn	sl, #0
   17c80:	b	17c90 <__assert_fail@plt+0x6654>
   17c84:	mov	r9, #0
   17c88:	cmp	r7, #0
   17c8c:	beq	17c9c <__assert_fail@plt+0x6660>
   17c90:	mov	r0, #0
   17c94:	str	r0, [fp, #-56]	; 0xffffffc8
   17c98:	b	17ba8 <__assert_fail@plt+0x656c>
   17c9c:	mov	r1, #1
   17ca0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17ca4:	cmp	r0, #2
   17ca8:	bne	17cc0 <__assert_fail@plt+0x6684>
   17cac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17cb0:	mov	r9, r1
   17cb4:	tst	r0, #1
   17cb8:	beq	17ba8 <__assert_fail@plt+0x656c>
   17cbc:	b	184d8 <__assert_fail@plt+0x6e9c>
   17cc0:	mov	r9, r1
   17cc4:	b	17ba8 <__assert_fail@plt+0x656c>
   17cc8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17ccc:	cmp	r0, #2
   17cd0:	bne	17f14 <__assert_fail@plt+0x68d8>
   17cd4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17cd8:	tst	r0, #1
   17cdc:	bne	184d8 <__assert_fail@plt+0x6e9c>
   17ce0:	mov	r0, #0
   17ce4:	str	r0, [fp, #-56]	; 0xffffffc8
   17ce8:	b	17f2c <__assert_fail@plt+0x68f0>
   17cec:	mov	r0, #102	; 0x66
   17cf0:	b	17f38 <__assert_fail@plt+0x68fc>
   17cf4:	mov	r2, #116	; 0x74
   17cf8:	b	17d08 <__assert_fail@plt+0x66cc>
   17cfc:	mov	r0, #98	; 0x62
   17d00:	b	17f38 <__assert_fail@plt+0x68fc>
   17d04:	mov	r2, #114	; 0x72
   17d08:	ldr	r0, [sp, #68]	; 0x44
   17d0c:	tst	r0, #1
   17d10:	mov	r0, r2
   17d14:	bne	17f38 <__assert_fail@plt+0x68fc>
   17d18:	b	184d8 <__assert_fail@plt+0x6e9c>
   17d1c:	ldr	r0, [sp, #84]	; 0x54
   17d20:	tst	r0, #1
   17d24:	beq	17f58 <__assert_fail@plt+0x691c>
   17d28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17d2c:	tst	r0, #1
   17d30:	bne	185c4 <__assert_fail@plt+0x6f88>
   17d34:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17d38:	mov	r2, sl
   17d3c:	subs	r0, r0, #2
   17d40:	movwne	r0, #1
   17d44:	orr	r0, r0, lr
   17d48:	tst	r0, #1
   17d4c:	bne	17d84 <__assert_fail@plt+0x6748>
   17d50:	cmp	r8, ip
   17d54:	mov	lr, #1
   17d58:	movcc	r0, #39	; 0x27
   17d5c:	strbcc	r0, [r5, r8]
   17d60:	add	r0, r8, #1
   17d64:	cmp	r0, ip
   17d68:	movcc	r1, #36	; 0x24
   17d6c:	strbcc	r1, [r5, r0]
   17d70:	add	r0, r8, #2
   17d74:	add	r8, r8, #3
   17d78:	cmp	r0, ip
   17d7c:	movcc	r1, #39	; 0x27
   17d80:	strbcc	r1, [r5, r0]
   17d84:	mov	r1, #1
   17d88:	cmp	r8, ip
   17d8c:	mov	r9, #0
   17d90:	mov	r6, #48	; 0x30
   17d94:	str	r1, [fp, #-56]	; 0xffffffc8
   17d98:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17d9c:	movcc	r0, #92	; 0x5c
   17da0:	strbcc	r0, [r5, r8]
   17da4:	add	r0, r8, #1
   17da8:	cmp	r1, #2
   17dac:	beq	180b4 <__assert_fail@plt+0x6a78>
   17db0:	add	r1, r7, #1
   17db4:	cmp	r1, r2
   17db8:	bcs	180b4 <__assert_fail@plt+0x6a78>
   17dbc:	ldrb	r1, [r4, r1]
   17dc0:	sub	r1, r1, #48	; 0x30
   17dc4:	uxtb	r1, r1
   17dc8:	cmp	r1, #9
   17dcc:	bhi	180b4 <__assert_fail@plt+0x6a78>
   17dd0:	cmp	r0, ip
   17dd4:	movcc	r1, #48	; 0x30
   17dd8:	strbcc	r1, [r5, r0]
   17ddc:	add	r0, r8, #2
   17de0:	add	r8, r8, #3
   17de4:	cmp	r0, ip
   17de8:	movcc	r1, #48	; 0x30
   17dec:	strbcc	r1, [r5, r0]
   17df0:	b	17ba8 <__assert_fail@plt+0x656c>
   17df4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17df8:	mov	r6, #63	; 0x3f
   17dfc:	cmp	r0, #5
   17e00:	beq	180bc <__assert_fail@plt+0x6a80>
   17e04:	mov	r1, #0
   17e08:	cmp	r0, #2
   17e0c:	str	r1, [fp, #-56]	; 0xffffffc8
   17e10:	bne	18170 <__assert_fail@plt+0x6b34>
   17e14:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17e18:	mov	r9, #0
   17e1c:	b	17cb4 <__assert_fail@plt+0x6678>
   17e20:	mov	r0, #118	; 0x76
   17e24:	b	17f38 <__assert_fail@plt+0x68fc>
   17e28:	mov	r0, #1
   17e2c:	mov	r6, #39	; 0x27
   17e30:	str	r0, [sp, #60]	; 0x3c
   17e34:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17e38:	cmp	r0, #2
   17e3c:	bne	17eb0 <__assert_fail@plt+0x6874>
   17e40:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17e44:	tst	r0, #1
   17e48:	bne	184d8 <__assert_fail@plt+0x6e9c>
   17e4c:	ldr	r2, [sp, #56]	; 0x38
   17e50:	clz	r1, ip
   17e54:	mov	lr, #0
   17e58:	lsr	r1, r1, #5
   17e5c:	cmp	r2, #0
   17e60:	mov	r0, r2
   17e64:	movwne	r0, #1
   17e68:	orrs	r0, r0, r1
   17e6c:	moveq	r2, ip
   17e70:	moveq	ip, r0
   17e74:	cmp	r8, ip
   17e78:	str	r2, [sp, #56]	; 0x38
   17e7c:	movcc	r0, #39	; 0x27
   17e80:	strbcc	r0, [r5, r8]
   17e84:	add	r0, r8, #1
   17e88:	cmp	r0, ip
   17e8c:	movcc	r1, #92	; 0x5c
   17e90:	strbcc	r1, [r5, r0]
   17e94:	add	r0, r8, #2
   17e98:	add	r8, r8, #3
   17e9c:	cmp	r0, ip
   17ea0:	movcc	r1, #39	; 0x27
   17ea4:	strbcc	r1, [r5, r0]
   17ea8:	mov	r0, #0
   17eac:	str	r0, [fp, #-56]	; 0xffffffc8
   17eb0:	mov	r9, #1
   17eb4:	b	17ba8 <__assert_fail@plt+0x656c>
   17eb8:	ldr	r0, [sp, #40]	; 0x28
   17ebc:	str	lr, [sp, #44]	; 0x2c
   17ec0:	str	ip, [sp, #88]	; 0x58
   17ec4:	cmp	r0, #1
   17ec8:	bne	17f78 <__assert_fail@plt+0x693c>
   17ecc:	str	sl, [sp, #36]	; 0x24
   17ed0:	bl	114bc <__ctype_b_loc@plt>
   17ed4:	ldr	r0, [r0]
   17ed8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17edc:	mov	r1, #1
   17ee0:	add	r0, r0, r6, lsl #1
   17ee4:	ldrb	r0, [r0, #1]
   17ee8:	ubfx	r9, r0, #6, #1
   17eec:	ldr	r0, [sp, #52]	; 0x34
   17ef0:	ldr	lr, [sp, #44]	; 0x2c
   17ef4:	cmp	r1, #1
   17ef8:	orr	r3, r9, r0
   17efc:	bhi	18178 <__assert_fail@plt+0x6b3c>
   17f00:	tst	r3, #1
   17f04:	beq	18178 <__assert_fail@plt+0x6b3c>
   17f08:	ldr	sl, [sp, #36]	; 0x24
   17f0c:	ldr	ip, [sp, #88]	; 0x58
   17f10:	b	17ba8 <__assert_fail@plt+0x656c>
   17f14:	ldr	r1, [sp, #48]	; 0x30
   17f18:	mov	r0, #0
   17f1c:	str	r0, [fp, #-56]	; 0xffffffc8
   17f20:	mov	r0, #92	; 0x5c
   17f24:	cmp	r1, #0
   17f28:	beq	17f38 <__assert_fail@plt+0x68fc>
   17f2c:	mov	r6, #92	; 0x5c
   17f30:	mov	r9, #0
   17f34:	b	1833c <__assert_fail@plt+0x6d00>
   17f38:	mov	r1, #0
   17f3c:	mov	r9, #0
   17f40:	str	r1, [fp, #-56]	; 0xffffffc8
   17f44:	ldr	r1, [sp, #84]	; 0x54
   17f48:	tst	r1, #1
   17f4c:	mov	r1, #0
   17f50:	beq	17ba8 <__assert_fail@plt+0x656c>
   17f54:	b	17bf0 <__assert_fail@plt+0x65b4>
   17f58:	ldr	r0, [sp, #32]
   17f5c:	mov	r6, #0
   17f60:	mov	r9, #0
   17f64:	cmp	r0, #0
   17f68:	mov	r0, #0
   17f6c:	str	r0, [fp, #-56]	; 0xffffffc8
   17f70:	beq	17ba8 <__assert_fail@plt+0x656c>
   17f74:	b	18394 <__assert_fail@plt+0x6d58>
   17f78:	mov	r0, #0
   17f7c:	cmn	sl, #1
   17f80:	sub	r3, fp, #40	; 0x28
   17f84:	str	r0, [fp, #-36]	; 0xffffffdc
   17f88:	str	r0, [fp, #-40]	; 0xffffffd8
   17f8c:	bne	17fa4 <__assert_fail@plt+0x6968>
   17f90:	mov	r0, r4
   17f94:	bl	114e0 <strlen@plt>
   17f98:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17f9c:	sub	r3, fp, #40	; 0x28
   17fa0:	mov	sl, r0
   17fa4:	ldr	r0, [sp, #72]	; 0x48
   17fa8:	mov	r9, #1
   17fac:	mov	r1, #0
   17fb0:	str	sl, [sp, #36]	; 0x24
   17fb4:	add	r0, r0, r7
   17fb8:	str	r0, [sp, #20]
   17fbc:	add	r0, r1, r7
   17fc0:	str	r1, [sp, #24]
   17fc4:	add	r1, r4, r0
   17fc8:	mov	r4, r0
   17fcc:	sub	r2, sl, r0
   17fd0:	sub	r0, fp, #44	; 0x2c
   17fd4:	bl	1b470 <__assert_fail@plt+0x9e34>
   17fd8:	cmp	r0, #0
   17fdc:	beq	183e8 <__assert_fail@plt+0x6dac>
   17fe0:	cmn	r0, #1
   17fe4:	beq	183a0 <__assert_fail@plt+0x6d64>
   17fe8:	ldr	r2, [sp, #36]	; 0x24
   17fec:	cmn	r0, #2
   17ff0:	beq	183a8 <__assert_fail@plt+0x6d6c>
   17ff4:	ldr	r2, [sp, #64]	; 0x40
   17ff8:	ldr	ip, [sp, #88]	; 0x58
   17ffc:	ldr	r4, [sp, #84]	; 0x54
   18000:	ldr	lr, [fp, #-48]	; 0xffffffd0
   18004:	cmp	r0, #2
   18008:	mov	r1, #0
   1800c:	movwcc	r1, #1
   18010:	eor	r2, r2, #1
   18014:	orrs	r1, r2, r1
   18018:	bne	18068 <__assert_fail@plt+0x6a2c>
   1801c:	ldr	r1, [sp, #24]
   18020:	ldr	r2, [sp, #20]
   18024:	add	r1, r2, r1
   18028:	sub	r2, r0, #1
   1802c:	ldrb	r3, [r1]
   18030:	sub	r5, r3, #94	; 0x5e
   18034:	cmp	r5, #30
   18038:	bhi	18050 <__assert_fail@plt+0x6a14>
   1803c:	mov	r4, #1
   18040:	mov	sl, #1073741829	; 0x40000005
   18044:	tst	sl, r4, lsl r5
   18048:	ldr	r4, [sp, #84]	; 0x54
   1804c:	bne	184b0 <__assert_fail@plt+0x6e74>
   18050:	sub	r3, r3, #91	; 0x5b
   18054:	cmp	r3, #2
   18058:	bcc	184b0 <__assert_fail@plt+0x6e74>
   1805c:	add	r1, r1, #1
   18060:	subs	r2, r2, #1
   18064:	bne	1802c <__assert_fail@plt+0x69f0>
   18068:	ldr	r5, [sp, #24]
   1806c:	str	lr, [fp, #-48]	; 0xffffffd0
   18070:	add	r5, r0, r5
   18074:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18078:	bl	113e4 <iswprint@plt>
   1807c:	cmp	r0, #0
   18080:	sub	r4, fp, #40	; 0x28
   18084:	movwne	r0, #1
   18088:	and	r9, r9, r0
   1808c:	mov	r0, r4
   18090:	bl	11390 <mbsinit@plt>
   18094:	mov	r1, r5
   18098:	mov	r3, r4
   1809c:	ldr	sl, [sp, #36]	; 0x24
   180a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   180a4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   180a8:	cmp	r0, #0
   180ac:	beq	17fbc <__assert_fail@plt+0x6980>
   180b0:	b	17eec <__assert_fail@plt+0x68b0>
   180b4:	mov	r8, r0
   180b8:	b	17ba8 <__assert_fail@plt+0x656c>
   180bc:	mov	r0, #0
   180c0:	str	r0, [fp, #-56]	; 0xffffffc8
   180c4:	ldr	r0, [sp, #28]
   180c8:	cmp	r0, #0
   180cc:	beq	18170 <__assert_fail@plt+0x6b34>
   180d0:	add	r0, r7, #2
   180d4:	mov	r1, sl
   180d8:	cmp	r0, sl
   180dc:	bcs	18170 <__assert_fail@plt+0x6b34>
   180e0:	add	r1, r7, r4
   180e4:	ldrb	r1, [r1, #1]
   180e8:	cmp	r1, #63	; 0x3f
   180ec:	bne	18170 <__assert_fail@plt+0x6b34>
   180f0:	ldrb	r9, [r4, r0]
   180f4:	sub	r2, r9, #33	; 0x21
   180f8:	cmp	r2, #29
   180fc:	bhi	18170 <__assert_fail@plt+0x6b34>
   18100:	mov	r1, r4
   18104:	movw	r4, #20929	; 0x51c1
   18108:	mov	r3, #1
   1810c:	movt	r4, #14336	; 0x3800
   18110:	tst	r4, r3, lsl r2
   18114:	beq	183fc <__assert_fail@plt+0x6dc0>
   18118:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1811c:	tst	r2, #1
   18120:	bne	185cc <__assert_fail@plt+0x6f90>
   18124:	cmp	r8, ip
   18128:	mov	r4, r1
   1812c:	mov	r7, r0
   18130:	mov	r6, r9
   18134:	movcc	r2, #63	; 0x3f
   18138:	strbcc	r2, [r5, r8]
   1813c:	add	r2, r8, #1
   18140:	cmp	r2, ip
   18144:	movcc	r3, #34	; 0x22
   18148:	strbcc	r3, [r5, r2]
   1814c:	add	r2, r8, #2
   18150:	cmp	r2, ip
   18154:	movcc	r3, #34	; 0x22
   18158:	strbcc	r3, [r5, r2]
   1815c:	add	r2, r8, #3
   18160:	add	r8, r8, #4
   18164:	cmp	r2, ip
   18168:	movcc	r3, #63	; 0x3f
   1816c:	strbcc	r3, [r5, r2]
   18170:	mov	r9, #0
   18174:	b	17ba8 <__assert_fail@plt+0x656c>
   18178:	ldr	sl, [sp, #36]	; 0x24
   1817c:	add	r0, r1, r7
   18180:	mov	r2, #0
   18184:	str	r3, [sp, #24]
   18188:	str	r0, [fp, #-56]	; 0xffffffc8
   1818c:	tst	r3, #1
   18190:	beq	181bc <__assert_fail@plt+0x6b80>
   18194:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18198:	tst	r0, #1
   1819c:	beq	18284 <__assert_fail@plt+0x6c48>
   181a0:	ldr	r1, [sp, #88]	; 0x58
   181a4:	mov	r0, r3
   181a8:	cmp	r8, r1
   181ac:	movcc	r1, #92	; 0x5c
   181b0:	strbcc	r1, [r5, r8]
   181b4:	add	r8, r8, #1
   181b8:	b	18288 <__assert_fail@plt+0x6c4c>
   181bc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   181c0:	tst	r1, #1
   181c4:	bne	184d4 <__assert_fail@plt+0x6e98>
   181c8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   181cc:	subs	r2, r1, #2
   181d0:	movwne	r2, #1
   181d4:	orr	r2, r2, lr
   181d8:	tst	r2, #1
   181dc:	bne	18220 <__assert_fail@plt+0x6be4>
   181e0:	ldr	r1, [sp, #88]	; 0x58
   181e4:	add	r2, r8, #1
   181e8:	mov	lr, #1
   181ec:	cmp	r8, r1
   181f0:	movcc	r1, #39	; 0x27
   181f4:	strbcc	r1, [r5, r8]
   181f8:	ldr	r1, [sp, #88]	; 0x58
   181fc:	cmp	r2, r1
   18200:	movcc	r1, #36	; 0x24
   18204:	strbcc	r1, [r5, r2]
   18208:	ldr	r1, [sp, #88]	; 0x58
   1820c:	add	r2, r8, #2
   18210:	add	r8, r8, #3
   18214:	cmp	r2, r1
   18218:	movcc	r1, #39	; 0x27
   1821c:	strbcc	r1, [r5, r2]
   18220:	ldr	r1, [sp, #88]	; 0x58
   18224:	add	r2, r8, #1
   18228:	mov	r0, r3
   1822c:	cmp	r8, r1
   18230:	movcc	r1, #92	; 0x5c
   18234:	strbcc	r1, [r5, r8]
   18238:	ldr	r1, [sp, #88]	; 0x58
   1823c:	cmp	r2, r1
   18240:	bcs	18254 <__assert_fail@plt+0x6c18>
   18244:	uxtb	r3, r6
   18248:	mov	r1, #48	; 0x30
   1824c:	orr	r3, r1, r3, lsr #6
   18250:	strb	r3, [r5, r2]
   18254:	ldr	r1, [sp, #88]	; 0x58
   18258:	add	r2, r8, #2
   1825c:	add	r8, r8, #3
   18260:	cmp	r2, r1
   18264:	lsrcc	r3, r6, #3
   18268:	movcc	r1, #6
   1826c:	bficc	r3, r1, #3, #29
   18270:	mov	r1, #6
   18274:	bfi	r6, r1, #3, #29
   18278:	strbcc	r3, [r5, r2]
   1827c:	mov	r2, #1
   18280:	b	18290 <__assert_fail@plt+0x6c54>
   18284:	mov	r0, r3
   18288:	mov	r1, #0
   1828c:	str	r1, [fp, #-52]	; 0xffffffcc
   18290:	mov	ip, r2
   18294:	and	r1, r2, #1
   18298:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1829c:	add	r3, r7, #1
   182a0:	cmp	r2, r3
   182a4:	bls	1832c <__assert_fail@plt+0x6cf0>
   182a8:	cmp	r1, #0
   182ac:	mvn	r5, lr
   182b0:	movwne	r1, #1
   182b4:	orr	r5, r5, r1
   182b8:	tst	r5, #1
   182bc:	bne	18300 <__assert_fail@plt+0x6cc4>
   182c0:	ldr	r1, [sp, #88]	; 0x58
   182c4:	ldr	r5, [fp, #-84]	; 0xffffffac
   182c8:	mov	r2, r4
   182cc:	ldr	r4, [sp, #88]	; 0x58
   182d0:	ldr	r0, [sp, #24]
   182d4:	mov	lr, #0
   182d8:	cmp	r8, r1
   182dc:	movcc	r1, #39	; 0x27
   182e0:	strbcc	r1, [r5, r8]
   182e4:	add	r1, r8, #1
   182e8:	add	r8, r8, #2
   182ec:	cmp	r1, r4
   182f0:	movcc	r4, #39	; 0x27
   182f4:	strbcc	r4, [r5, r1]
   182f8:	mov	r4, r2
   182fc:	b	18304 <__assert_fail@plt+0x6cc8>
   18300:	ldr	r5, [fp, #-84]	; 0xffffffac
   18304:	ldr	r1, [sp, #88]	; 0x58
   18308:	mov	r2, ip
   1830c:	cmp	r8, r1
   18310:	ldr	r1, [sp, #72]	; 0x48
   18314:	strbcc	r6, [r5, r8]
   18318:	add	r8, r8, #1
   1831c:	ldrb	r6, [r1, r7]
   18320:	mov	r7, r3
   18324:	mov	r3, r0
   18328:	b	1818c <__assert_fail@plt+0x6b50>
   1832c:	ldr	ip, [sp, #88]	; 0x58
   18330:	cmp	r1, #0
   18334:	movwne	r1, #1
   18338:	str	r1, [fp, #-56]	; 0xffffffc8
   1833c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18340:	cmp	r0, #0
   18344:	bne	18374 <__assert_fail@plt+0x6d38>
   18348:	tst	lr, #1
   1834c:	beq	18374 <__assert_fail@plt+0x6d38>
   18350:	cmp	r8, ip
   18354:	mov	lr, #0
   18358:	movcc	r0, #39	; 0x27
   1835c:	strbcc	r0, [r5, r8]
   18360:	add	r0, r8, #1
   18364:	add	r8, r8, #2
   18368:	cmp	r0, ip
   1836c:	movcc	r1, #39	; 0x27
   18370:	strbcc	r1, [r5, r0]
   18374:	mov	r1, r9
   18378:	mov	r0, r6
   1837c:	cmp	r8, ip
   18380:	strbcc	r0, [r5, r8]
   18384:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18388:	add	r8, r8, #1
   1838c:	and	r0, r0, r1
   18390:	str	r0, [fp, #-48]	; 0xffffffd0
   18394:	mov	r3, sl
   18398:	add	r7, r7, #1
   1839c:	b	1788c <__assert_fail@plt+0x6250>
   183a0:	mov	r9, #0
   183a4:	b	183e8 <__assert_fail@plt+0x6dac>
   183a8:	mov	r9, #0
   183ac:	cmp	r2, r4
   183b0:	bls	183e8 <__assert_fail@plt+0x6dac>
   183b4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   183b8:	ldr	r1, [sp, #24]
   183bc:	add	r0, r4, r7
   183c0:	mov	r3, r1
   183c4:	ldrb	r1, [r0, r1]
   183c8:	cmp	r1, #0
   183cc:	beq	183f4 <__assert_fail@plt+0x6db8>
   183d0:	add	r3, r3, #1
   183d4:	add	r1, r7, r3
   183d8:	cmp	r1, r2
   183dc:	mov	r1, r3
   183e0:	bcc	183c0 <__assert_fail@plt+0x6d84>
   183e4:	b	17eec <__assert_fail@plt+0x68b0>
   183e8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   183ec:	ldr	r1, [sp, #24]
   183f0:	b	17eec <__assert_fail@plt+0x68b0>
   183f4:	mov	r1, r3
   183f8:	b	17eec <__assert_fail@plt+0x68b0>
   183fc:	mov	r9, #0
   18400:	mov	r4, r1
   18404:	b	17ba8 <__assert_fail@plt+0x656c>
   18408:	mov	sl, r7
   1840c:	b	18414 <__assert_fail@plt+0x6dd8>
   18410:	mvn	sl, #0
   18414:	ldr	r1, [fp, #-68]	; 0xffffffbc
   18418:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1841c:	eor	r0, r1, #2
   18420:	orr	r0, r0, r8
   18424:	clz	r0, r0
   18428:	lsr	r0, r0, #5
   1842c:	tst	r2, r0
   18430:	bne	184d8 <__assert_fail@plt+0x6e9c>
   18434:	subs	r0, r1, #2
   18438:	movwne	r0, #1
   1843c:	orr	r0, r2, r0
   18440:	tst	r0, #1
   18444:	ldreq	r0, [sp, #60]	; 0x3c
   18448:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   1844c:	eoreq	r0, r0, #1
   18450:	tsteq	r0, #1
   18454:	bne	1856c <__assert_fail@plt+0x6f30>
   18458:	tst	r1, #1
   1845c:	bne	18538 <__assert_fail@plt+0x6efc>
   18460:	ldr	r6, [sp, #56]	; 0x38
   18464:	mov	r9, #0
   18468:	cmp	r6, #0
   1846c:	beq	18564 <__assert_fail@plt+0x6f28>
   18470:	ldr	r0, [sp, #84]	; 0x54
   18474:	mov	r1, #0
   18478:	mov	r7, #2
   1847c:	cmp	ip, #0
   18480:	str	r1, [fp, #-48]	; 0xffffffd0
   18484:	mov	r1, #0
   18488:	str	r1, [fp, #-76]	; 0xffffffb4
   1848c:	beq	175f4 <__assert_fail@plt+0x5fb8>
   18490:	b	1856c <__assert_fail@plt+0x6f30>
   18494:	ldr	r4, [fp, #-80]	; 0xffffffb0
   18498:	ldr	r1, [fp, #12]
   1849c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   184a0:	mov	r5, r3
   184a4:	mov	ip, r6
   184a8:	mov	r3, sl
   184ac:	b	184fc <__assert_fail@plt+0x6ec0>
   184b0:	tst	r4, #1
   184b4:	ldr	r5, [fp, #-84]	; 0xffffffac
   184b8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   184bc:	ldr	r1, [fp, #12]
   184c0:	ldr	r3, [sp, #36]	; 0x24
   184c4:	mov	r0, #2
   184c8:	movwne	r0, #4
   184cc:	mov	r2, r0
   184d0:	b	184fc <__assert_fail@plt+0x6ec0>
   184d4:	ldr	ip, [sp, #88]	; 0x58
   184d8:	ldr	r1, [sp, #84]	; 0x54
   184dc:	mov	r0, #2
   184e0:	tst	r1, #1
   184e4:	movwne	r0, #4
   184e8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   184ec:	ldr	r1, [fp, #12]
   184f0:	mov	r3, sl
   184f4:	cmp	r2, #2
   184f8:	moveq	r2, r0
   184fc:	mov	r0, #0
   18500:	bic	r1, r1, #2
   18504:	str	r2, [sp]
   18508:	mov	r2, r4
   1850c:	str	r0, [sp, #8]
   18510:	ldr	r0, [sp, #76]	; 0x4c
   18514:	str	r1, [sp, #4]
   18518:	mov	r1, ip
   1851c:	str	r0, [sp, #12]
   18520:	ldr	r0, [sp, #80]	; 0x50
   18524:	str	r0, [sp, #16]
   18528:	mov	r0, r5
   1852c:	bl	17568 <__assert_fail@plt+0x5f2c>
   18530:	mov	r8, r0
   18534:	b	185b8 <__assert_fail@plt+0x6f7c>
   18538:	mov	r0, #5
   1853c:	ldr	r1, [sp, #56]	; 0x38
   18540:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18544:	mov	r3, sl
   18548:	str	r0, [sp]
   1854c:	ldr	r0, [fp, #12]
   18550:	str	r0, [sp, #4]
   18554:	ldr	r0, [fp, #16]
   18558:	str	r0, [sp, #8]
   1855c:	ldr	r0, [sp, #76]	; 0x4c
   18560:	b	1851c <__assert_fail@plt+0x6ee0>
   18564:	mov	r0, #0
   18568:	str	r0, [fp, #-76]	; 0xffffffb4
   1856c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18570:	cmp	r1, #0
   18574:	beq	185ac <__assert_fail@plt+0x6f70>
   18578:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1857c:	tst	r0, #1
   18580:	bne	185ac <__assert_fail@plt+0x6f70>
   18584:	ldrb	r0, [r1]
   18588:	cmp	r0, #0
   1858c:	beq	185ac <__assert_fail@plt+0x6f70>
   18590:	add	r1, r1, #1
   18594:	cmp	r8, ip
   18598:	strbcc	r0, [r5, r8]
   1859c:	add	r8, r8, #1
   185a0:	ldrb	r0, [r1], #1
   185a4:	cmp	r0, #0
   185a8:	bne	18594 <__assert_fail@plt+0x6f58>
   185ac:	cmp	r8, ip
   185b0:	movcc	r0, #0
   185b4:	strbcc	r0, [r5, r8]
   185b8:	mov	r0, r8
   185bc:	sub	sp, fp, #28
   185c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185c4:	mov	r0, #4
   185c8:	b	184e8 <__assert_fail@plt+0x6eac>
   185cc:	mov	r4, r1
   185d0:	b	184d8 <__assert_fail@plt+0x6e9c>
   185d4:	bl	11618 <abort@plt>
   185d8:	mov	r3, r2
   185dc:	mov	r2, #0
   185e0:	b	185e4 <__assert_fail@plt+0x6fa8>
   185e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185e8:	add	fp, sp, #28
   185ec:	sub	sp, sp, #36	; 0x24
   185f0:	movw	r8, #58032	; 0xe2b0
   185f4:	cmp	r3, #0
   185f8:	mov	r4, r2
   185fc:	str	r2, [sp, #24]
   18600:	mov	r5, r1
   18604:	mov	r6, r0
   18608:	str	r0, [sp, #20]
   1860c:	movt	r8, #2
   18610:	movne	r8, r3
   18614:	bl	11510 <__errno_location@plt>
   18618:	str	r0, [sp, #28]
   1861c:	ldr	r1, [r8, #40]	; 0x28
   18620:	ldr	r2, [r8, #44]	; 0x2c
   18624:	ldr	r7, [r0]
   18628:	cmp	r4, #0
   1862c:	add	sl, r8, #8
   18630:	mov	r0, #0
   18634:	ldm	r8, {r3, r9}
   18638:	orreq	r9, r9, #1
   1863c:	stm	sp, {r3, r9, sl}
   18640:	str	r1, [sp, #12]
   18644:	str	r2, [sp, #16]
   18648:	mov	r1, #0
   1864c:	mov	r2, r6
   18650:	mov	r3, r5
   18654:	str	r7, [sp, #32]
   18658:	mov	r7, r5
   1865c:	bl	17568 <__assert_fail@plt+0x5f2c>
   18660:	add	r4, r0, #1
   18664:	mov	r5, r0
   18668:	mov	r0, r4
   1866c:	bl	198b0 <__assert_fail@plt+0x8274>
   18670:	mov	r6, r0
   18674:	ldr	r0, [r8]
   18678:	ldr	r2, [r8, #44]	; 0x2c
   1867c:	ldr	r1, [r8, #40]	; 0x28
   18680:	mov	r3, r7
   18684:	stm	sp, {r0, r9, sl}
   18688:	str	r2, [sp, #16]
   1868c:	ldr	r2, [sp, #20]
   18690:	str	r1, [sp, #12]
   18694:	mov	r0, r6
   18698:	mov	r1, r4
   1869c:	bl	17568 <__assert_fail@plt+0x5f2c>
   186a0:	ldr	r0, [sp, #24]
   186a4:	ldr	r1, [sp, #32]
   186a8:	ldr	r2, [sp, #28]
   186ac:	cmp	r0, #0
   186b0:	str	r1, [r2]
   186b4:	strne	r5, [r0]
   186b8:	mov	r0, r6
   186bc:	sub	sp, fp, #28
   186c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   186c8:	add	fp, sp, #24
   186cc:	movw	r5, #57732	; 0xe184
   186d0:	movw	r8, #57728	; 0xe180
   186d4:	movt	r5, #2
   186d8:	movt	r8, #2
   186dc:	ldr	r0, [r5]
   186e0:	ldr	r4, [r8]
   186e4:	cmp	r0, #2
   186e8:	blt	18714 <__assert_fail@plt+0x70d8>
   186ec:	add	r7, r4, #12
   186f0:	mov	r6, #0
   186f4:	ldr	r0, [r7, r6, lsl #3]
   186f8:	bl	154bc <__assert_fail@plt+0x3e80>
   186fc:	ldr	r1, [r5]
   18700:	add	r2, r6, #2
   18704:	add	r0, r6, #1
   18708:	mov	r6, r0
   1870c:	cmp	r2, r1
   18710:	blt	186f4 <__assert_fail@plt+0x70b8>
   18714:	ldr	r0, [r4, #4]
   18718:	movw	r9, #58080	; 0xe2e0
   1871c:	movw	r7, #57736	; 0xe188
   18720:	movt	r9, #2
   18724:	movt	r7, #2
   18728:	cmp	r0, r9
   1872c:	beq	1873c <__assert_fail@plt+0x7100>
   18730:	bl	154bc <__assert_fail@plt+0x3e80>
   18734:	mov	r0, #256	; 0x100
   18738:	stm	r7, {r0, r9}
   1873c:	cmp	r4, r7
   18740:	beq	18750 <__assert_fail@plt+0x7114>
   18744:	mov	r0, r4
   18748:	bl	154bc <__assert_fail@plt+0x3e80>
   1874c:	str	r7, [r8]
   18750:	mov	r0, #1
   18754:	str	r0, [r5]
   18758:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1875c:	movw	r3, #58032	; 0xe2b0
   18760:	mvn	r2, #0
   18764:	movt	r3, #2
   18768:	b	1876c <__assert_fail@plt+0x7130>
   1876c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18770:	add	fp, sp, #28
   18774:	sub	sp, sp, #44	; 0x2c
   18778:	mov	r7, r3
   1877c:	str	r2, [sp, #36]	; 0x24
   18780:	str	r1, [sp, #32]
   18784:	mov	r5, r0
   18788:	bl	11510 <__errno_location@plt>
   1878c:	cmp	r5, #0
   18790:	bmi	18900 <__assert_fail@plt+0x72c4>
   18794:	cmn	r5, #-2147483647	; 0x80000001
   18798:	beq	18900 <__assert_fail@plt+0x72c4>
   1879c:	movw	r8, #57732	; 0xe184
   187a0:	movw	r4, #57728	; 0xe180
   187a4:	str	r0, [sp, #28]
   187a8:	ldr	r0, [r0]
   187ac:	movt	r8, #2
   187b0:	movt	r4, #2
   187b4:	ldr	r1, [r8]
   187b8:	ldr	r6, [r4]
   187bc:	str	r0, [sp, #24]
   187c0:	cmp	r1, r5
   187c4:	ble	187d0 <__assert_fail@plt+0x7194>
   187c8:	mov	sl, r6
   187cc:	b	1883c <__assert_fail@plt+0x7200>
   187d0:	movw	r9, #57736	; 0xe188
   187d4:	mov	r0, #8
   187d8:	str	r1, [fp, #-32]	; 0xffffffe0
   187dc:	sub	r1, r5, r1
   187e0:	mvn	r3, #-2147483648	; 0x80000000
   187e4:	movt	r9, #2
   187e8:	str	r0, [sp]
   187ec:	add	r2, r1, #1
   187f0:	sub	r1, fp, #32
   187f4:	subs	r0, r6, r9
   187f8:	movne	r0, r6
   187fc:	bl	199e0 <__assert_fail@plt+0x83a4>
   18800:	mov	sl, r0
   18804:	cmp	r6, r9
   18808:	str	r0, [r4]
   1880c:	bne	18818 <__assert_fail@plt+0x71dc>
   18810:	ldrd	r0, [r9]
   18814:	stm	sl, {r0, r1}
   18818:	ldr	r1, [r8]
   1881c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18820:	add	r0, sl, r1, lsl #3
   18824:	sub	r1, r2, r1
   18828:	lsl	r2, r1, #3
   1882c:	mov	r1, #0
   18830:	bl	11534 <memset@plt>
   18834:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18838:	str	r0, [r8]
   1883c:	mov	r9, sl
   18840:	ldm	r7, {r0, r1}
   18844:	orr	r8, r1, #1
   18848:	add	r1, r7, #8
   1884c:	ldr	r2, [r7, #40]	; 0x28
   18850:	ldr	r3, [r7, #44]	; 0x2c
   18854:	ldr	r6, [r9, r5, lsl #3]!
   18858:	str	r1, [sp, #20]
   1885c:	ldr	r4, [r9, #4]!
   18860:	stm	sp, {r0, r8}
   18864:	add	r0, sp, #8
   18868:	stm	r0, {r1, r2, r3}
   1886c:	ldr	r2, [sp, #32]
   18870:	ldr	r3, [sp, #36]	; 0x24
   18874:	mov	r1, r6
   18878:	mov	r0, r4
   1887c:	bl	17568 <__assert_fail@plt+0x5f2c>
   18880:	cmp	r6, r0
   18884:	bhi	188e8 <__assert_fail@plt+0x72ac>
   18888:	add	r6, r0, #1
   1888c:	movw	r0, #58080	; 0xe2e0
   18890:	movt	r0, #2
   18894:	str	r6, [sl, r5, lsl #3]
   18898:	cmp	r4, r0
   1889c:	beq	188a8 <__assert_fail@plt+0x726c>
   188a0:	mov	r0, r4
   188a4:	bl	154bc <__assert_fail@plt+0x3e80>
   188a8:	mov	r0, r6
   188ac:	bl	198b0 <__assert_fail@plt+0x8274>
   188b0:	str	r0, [r9]
   188b4:	mov	r4, r0
   188b8:	add	r3, sp, #8
   188bc:	ldr	r0, [r7]
   188c0:	ldr	r1, [r7, #40]	; 0x28
   188c4:	ldr	r2, [r7, #44]	; 0x2c
   188c8:	stm	sp, {r0, r8}
   188cc:	ldr	r0, [sp, #20]
   188d0:	stm	r3, {r0, r1, r2}
   188d4:	ldr	r2, [sp, #32]
   188d8:	ldr	r3, [sp, #36]	; 0x24
   188dc:	mov	r0, r4
   188e0:	mov	r1, r6
   188e4:	bl	17568 <__assert_fail@plt+0x5f2c>
   188e8:	ldr	r0, [sp, #28]
   188ec:	ldr	r1, [sp, #24]
   188f0:	str	r1, [r0]
   188f4:	mov	r0, r4
   188f8:	sub	sp, fp, #28
   188fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18900:	bl	11618 <abort@plt>
   18904:	movw	r3, #58032	; 0xe2b0
   18908:	movt	r3, #2
   1890c:	b	1876c <__assert_fail@plt+0x7130>
   18910:	movw	r3, #58032	; 0xe2b0
   18914:	mov	r1, r0
   18918:	mov	r0, #0
   1891c:	mvn	r2, #0
   18920:	movt	r3, #2
   18924:	b	1876c <__assert_fail@plt+0x7130>
   18928:	movw	r3, #58032	; 0xe2b0
   1892c:	mov	r2, r1
   18930:	mov	r1, r0
   18934:	mov	r0, #0
   18938:	movt	r3, #2
   1893c:	b	1876c <__assert_fail@plt+0x7130>
   18940:	push	{fp, lr}
   18944:	mov	fp, sp
   18948:	sub	sp, sp, #48	; 0x30
   1894c:	vmov.i32	q8, #0	; 0x00000000
   18950:	mov	ip, #32
   18954:	mov	r3, sp
   18958:	mov	lr, r2
   1895c:	cmp	r1, #10
   18960:	add	r2, r3, #16
   18964:	vst1.64	{d16-d17}, [r3], ip
   18968:	vst1.64	{d16-d17}, [r2]
   1896c:	vst1.64	{d16-d17}, [r3]
   18970:	beq	18990 <__assert_fail@plt+0x7354>
   18974:	str	r1, [sp]
   18978:	mov	r3, sp
   1897c:	mov	r1, lr
   18980:	mvn	r2, #0
   18984:	bl	1876c <__assert_fail@plt+0x7130>
   18988:	mov	sp, fp
   1898c:	pop	{fp, pc}
   18990:	bl	11618 <abort@plt>
   18994:	push	{r4, sl, fp, lr}
   18998:	add	fp, sp, #8
   1899c:	sub	sp, sp, #48	; 0x30
   189a0:	vmov.i32	q8, #0	; 0x00000000
   189a4:	mov	ip, r3
   189a8:	mov	r3, sp
   189ac:	mov	lr, #32
   189b0:	cmp	r1, #10
   189b4:	add	r4, r3, #16
   189b8:	vst1.64	{d16-d17}, [r3], lr
   189bc:	vst1.64	{d16-d17}, [r4]
   189c0:	vst1.64	{d16-d17}, [r3]
   189c4:	beq	189e4 <__assert_fail@plt+0x73a8>
   189c8:	str	r1, [sp]
   189cc:	mov	r1, r2
   189d0:	mov	r3, sp
   189d4:	mov	r2, ip
   189d8:	bl	1876c <__assert_fail@plt+0x7130>
   189dc:	sub	sp, fp, #8
   189e0:	pop	{r4, sl, fp, pc}
   189e4:	bl	11618 <abort@plt>
   189e8:	mov	r2, r1
   189ec:	mov	r1, r0
   189f0:	mov	r0, #0
   189f4:	b	18940 <__assert_fail@plt+0x7304>
   189f8:	mov	r3, r2
   189fc:	mov	r2, r1
   18a00:	mov	r1, r0
   18a04:	mov	r0, #0
   18a08:	b	18994 <__assert_fail@plt+0x7358>
   18a0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18a10:	add	fp, sp, #24
   18a14:	sub	sp, sp, #48	; 0x30
   18a18:	movw	r8, #58032	; 0xe2b0
   18a1c:	mov	lr, r0
   18a20:	mov	r3, sp
   18a24:	mov	ip, r1
   18a28:	movt	r8, #2
   18a2c:	mov	r1, r3
   18a30:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   18a34:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   18a38:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   18a3c:	stm	r1, {r0, r4, r5, r6, r7, r9}
   18a40:	ubfx	r0, r2, #5, #3
   18a44:	and	r2, r2, #31
   18a48:	mov	r4, #1
   18a4c:	add	r0, r3, r0, lsl #2
   18a50:	ldr	r1, [r0, #8]
   18a54:	bic	r4, r4, r1, lsr r2
   18a58:	eor	r1, r1, r4, lsl r2
   18a5c:	mov	r2, ip
   18a60:	str	r1, [r0, #8]
   18a64:	mov	r0, #0
   18a68:	mov	r1, lr
   18a6c:	bl	1876c <__assert_fail@plt+0x7130>
   18a70:	sub	sp, fp, #24
   18a74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18a78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a7c:	add	fp, sp, #24
   18a80:	sub	sp, sp, #48	; 0x30
   18a84:	movw	lr, #58032	; 0xe2b0
   18a88:	mov	ip, r0
   18a8c:	mov	r3, sp
   18a90:	movt	lr, #2
   18a94:	mov	r2, r3
   18a98:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   18a9c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   18aa0:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   18aa4:	stm	r2, {r0, r4, r5, r6, r7, r8}
   18aa8:	ubfx	r0, r1, #5, #3
   18aac:	and	r1, r1, #31
   18ab0:	mov	r7, #1
   18ab4:	add	r0, r3, r0, lsl #2
   18ab8:	ldr	r2, [r0, #8]
   18abc:	bic	r7, r7, r2, lsr r1
   18ac0:	eor	r1, r2, r7, lsl r1
   18ac4:	mvn	r2, #0
   18ac8:	str	r1, [r0, #8]
   18acc:	mov	r0, #0
   18ad0:	mov	r1, ip
   18ad4:	bl	1876c <__assert_fail@plt+0x7130>
   18ad8:	sub	sp, fp, #24
   18adc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18ae0:	push	{r4, r5, r6, r7, fp, lr}
   18ae4:	add	fp, sp, #16
   18ae8:	sub	sp, sp, #48	; 0x30
   18aec:	movw	lr, #58032	; 0xe2b0
   18af0:	mov	ip, r0
   18af4:	mov	r3, sp
   18af8:	movt	lr, #2
   18afc:	mov	r2, r3
   18b00:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   18b04:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   18b08:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   18b0c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   18b10:	mov	r1, ip
   18b14:	mvn	r2, #0
   18b18:	ldr	r0, [sp, #12]
   18b1c:	orr	r0, r0, #67108864	; 0x4000000
   18b20:	str	r0, [sp, #12]
   18b24:	mov	r0, #0
   18b28:	bl	1876c <__assert_fail@plt+0x7130>
   18b2c:	sub	sp, fp, #16
   18b30:	pop	{r4, r5, r6, r7, fp, pc}
   18b34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18b38:	add	fp, sp, #24
   18b3c:	sub	sp, sp, #48	; 0x30
   18b40:	movw	r8, #58032	; 0xe2b0
   18b44:	mov	ip, r1
   18b48:	mov	lr, r0
   18b4c:	mov	r3, sp
   18b50:	movt	r8, #2
   18b54:	mov	r2, r3
   18b58:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   18b5c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   18b60:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   18b64:	stm	r2, {r0, r1, r4, r5, r6, r7}
   18b68:	mov	r1, lr
   18b6c:	mov	r2, ip
   18b70:	ldr	r0, [sp, #12]
   18b74:	orr	r0, r0, #67108864	; 0x4000000
   18b78:	str	r0, [sp, #12]
   18b7c:	mov	r0, #0
   18b80:	bl	1876c <__assert_fail@plt+0x7130>
   18b84:	sub	sp, fp, #24
   18b88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18b90:	add	fp, sp, #24
   18b94:	sub	sp, sp, #96	; 0x60
   18b98:	vmov.i32	q8, #0	; 0x00000000
   18b9c:	mov	lr, sp
   18ba0:	mov	ip, r2
   18ba4:	cmp	r1, #10
   18ba8:	add	r3, lr, #16
   18bac:	mov	r2, lr
   18bb0:	vst1.64	{d16-d17}, [r3]
   18bb4:	mov	r3, #28
   18bb8:	vst1.64	{d16-d17}, [r2], r3
   18bbc:	vst1.32	{d16-d17}, [r2]
   18bc0:	beq	18c00 <__assert_fail@plt+0x75c4>
   18bc4:	str	r1, [sp, #48]	; 0x30
   18bc8:	add	r3, sp, #48	; 0x30
   18bcc:	ldm	lr!, {r2, r4, r5, r6, r7}
   18bd0:	add	r1, r3, #4
   18bd4:	stmia	r1!, {r2, r4, r5, r6, r7}
   18bd8:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   18bdc:	stm	r1, {r2, r4, r5, r6, r7, r8}
   18be0:	mvn	r2, #0
   18be4:	ldr	r1, [sp, #60]	; 0x3c
   18be8:	orr	r1, r1, #67108864	; 0x4000000
   18bec:	str	r1, [sp, #60]	; 0x3c
   18bf0:	mov	r1, ip
   18bf4:	bl	1876c <__assert_fail@plt+0x7130>
   18bf8:	sub	sp, fp, #24
   18bfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c00:	bl	11618 <abort@plt>
   18c04:	push	{fp, lr}
   18c08:	mov	fp, sp
   18c0c:	sub	sp, sp, #8
   18c10:	mvn	ip, #0
   18c14:	str	ip, [sp]
   18c18:	bl	18c24 <__assert_fail@plt+0x75e8>
   18c1c:	mov	sp, fp
   18c20:	pop	{fp, pc}
   18c24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18c28:	add	fp, sp, #24
   18c2c:	sub	sp, sp, #48	; 0x30
   18c30:	movw	ip, #58032	; 0xe2b0
   18c34:	mov	lr, r3
   18c38:	mov	r3, sp
   18c3c:	cmp	r1, #0
   18c40:	movt	ip, #2
   18c44:	cmpne	r2, #0
   18c48:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   18c4c:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   18c50:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   18c54:	stm	r3, {r4, r5, r6, r7, r8, r9}
   18c58:	mov	r3, #10
   18c5c:	str	r3, [sp]
   18c60:	bne	18c68 <__assert_fail@plt+0x762c>
   18c64:	bl	11618 <abort@plt>
   18c68:	ldr	ip, [fp, #8]
   18c6c:	str	r2, [sp, #44]	; 0x2c
   18c70:	str	r1, [sp, #40]	; 0x28
   18c74:	mov	r3, sp
   18c78:	mov	r1, lr
   18c7c:	mov	r2, ip
   18c80:	bl	1876c <__assert_fail@plt+0x7130>
   18c84:	sub	sp, fp, #24
   18c88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18c8c:	push	{fp, lr}
   18c90:	mov	fp, sp
   18c94:	sub	sp, sp, #8
   18c98:	mov	r3, r2
   18c9c:	mov	r2, r1
   18ca0:	mov	r1, r0
   18ca4:	mvn	r0, #0
   18ca8:	str	r0, [sp]
   18cac:	mov	r0, #0
   18cb0:	bl	18c24 <__assert_fail@plt+0x75e8>
   18cb4:	mov	sp, fp
   18cb8:	pop	{fp, pc}
   18cbc:	push	{fp, lr}
   18cc0:	mov	fp, sp
   18cc4:	sub	sp, sp, #8
   18cc8:	mov	ip, r2
   18ccc:	mov	r2, r1
   18cd0:	mov	r1, r0
   18cd4:	str	r3, [sp]
   18cd8:	mov	r0, #0
   18cdc:	mov	r3, ip
   18ce0:	bl	18c24 <__assert_fail@plt+0x75e8>
   18ce4:	mov	sp, fp
   18ce8:	pop	{fp, pc}
   18cec:	movw	r3, #57744	; 0xe190
   18cf0:	movt	r3, #2
   18cf4:	b	1876c <__assert_fail@plt+0x7130>
   18cf8:	movw	r3, #57744	; 0xe190
   18cfc:	mov	r2, r1
   18d00:	mov	r1, r0
   18d04:	mov	r0, #0
   18d08:	movt	r3, #2
   18d0c:	b	1876c <__assert_fail@plt+0x7130>
   18d10:	movw	r3, #57744	; 0xe190
   18d14:	mvn	r2, #0
   18d18:	movt	r3, #2
   18d1c:	b	1876c <__assert_fail@plt+0x7130>
   18d20:	movw	r3, #57744	; 0xe190
   18d24:	mov	r1, r0
   18d28:	mov	r0, #0
   18d2c:	mvn	r2, #0
   18d30:	movt	r3, #2
   18d34:	b	1876c <__assert_fail@plt+0x7130>
   18d38:	push	{r4, r5, fp, lr}
   18d3c:	add	fp, sp, #8
   18d40:	mov	r5, r0
   18d44:	mov	r4, r1
   18d48:	mov	r0, #0
   18d4c:	mov	r2, #5
   18d50:	mov	r1, r5
   18d54:	bl	113a8 <dcgettext@plt>
   18d58:	cmp	r0, r5
   18d5c:	popne	{r4, r5, fp, pc}
   18d60:	bl	1b438 <__assert_fail@plt+0x9dfc>
   18d64:	ldrb	r1, [r0]
   18d68:	and	r1, r1, #223	; 0xdf
   18d6c:	cmp	r1, #71	; 0x47
   18d70:	beq	18dd8 <__assert_fail@plt+0x779c>
   18d74:	cmp	r1, #85	; 0x55
   18d78:	bne	18e30 <__assert_fail@plt+0x77f4>
   18d7c:	ldrb	r1, [r0, #1]
   18d80:	and	r1, r1, #223	; 0xdf
   18d84:	cmp	r1, #84	; 0x54
   18d88:	bne	18e30 <__assert_fail@plt+0x77f4>
   18d8c:	ldrb	r1, [r0, #2]
   18d90:	and	r1, r1, #223	; 0xdf
   18d94:	cmp	r1, #70	; 0x46
   18d98:	bne	18e30 <__assert_fail@plt+0x77f4>
   18d9c:	ldrb	r1, [r0, #3]
   18da0:	cmp	r1, #45	; 0x2d
   18da4:	bne	18e30 <__assert_fail@plt+0x77f4>
   18da8:	ldrb	r1, [r0, #4]
   18dac:	cmp	r1, #56	; 0x38
   18db0:	bne	18e30 <__assert_fail@plt+0x77f4>
   18db4:	ldrb	r0, [r0, #5]
   18db8:	cmp	r0, #0
   18dbc:	bne	18e30 <__assert_fail@plt+0x77f4>
   18dc0:	ldrb	r1, [r5]
   18dc4:	movw	r2, #53225	; 0xcfe9
   18dc8:	movw	r0, #53229	; 0xcfed
   18dcc:	movt	r2, #1
   18dd0:	movt	r0, #1
   18dd4:	b	18e60 <__assert_fail@plt+0x7824>
   18dd8:	ldrb	r1, [r0, #1]
   18ddc:	and	r1, r1, #223	; 0xdf
   18de0:	cmp	r1, #66	; 0x42
   18de4:	bne	18e30 <__assert_fail@plt+0x77f4>
   18de8:	ldrb	r1, [r0, #2]
   18dec:	cmp	r1, #49	; 0x31
   18df0:	bne	18e30 <__assert_fail@plt+0x77f4>
   18df4:	ldrb	r1, [r0, #3]
   18df8:	cmp	r1, #56	; 0x38
   18dfc:	bne	18e30 <__assert_fail@plt+0x77f4>
   18e00:	ldrb	r1, [r0, #4]
   18e04:	cmp	r1, #48	; 0x30
   18e08:	bne	18e30 <__assert_fail@plt+0x77f4>
   18e0c:	ldrb	r1, [r0, #5]
   18e10:	cmp	r1, #51	; 0x33
   18e14:	bne	18e30 <__assert_fail@plt+0x77f4>
   18e18:	ldrb	r1, [r0, #6]
   18e1c:	cmp	r1, #48	; 0x30
   18e20:	bne	18e30 <__assert_fail@plt+0x77f4>
   18e24:	ldrb	r0, [r0, #7]
   18e28:	cmp	r0, #0
   18e2c:	beq	18e4c <__assert_fail@plt+0x7810>
   18e30:	movw	r1, #53221	; 0xcfe5
   18e34:	movw	r0, #54356	; 0xd454
   18e38:	cmp	r4, #9
   18e3c:	movt	r1, #1
   18e40:	movt	r0, #1
   18e44:	moveq	r0, r1
   18e48:	pop	{r4, r5, fp, pc}
   18e4c:	ldrb	r1, [r5]
   18e50:	movw	r2, #53233	; 0xcff1
   18e54:	movw	r0, #53237	; 0xcff5
   18e58:	movt	r2, #1
   18e5c:	movt	r0, #1
   18e60:	cmp	r1, #96	; 0x60
   18e64:	moveq	r0, r2
   18e68:	pop	{r4, r5, fp, pc}
   18e6c:	push	{r4, r5, r6, r7, fp, lr}
   18e70:	add	fp, sp, #16
   18e74:	mov	r4, r1
   18e78:	mov	r1, #0
   18e7c:	mov	r6, r2
   18e80:	bl	115a0 <setlocale@plt>
   18e84:	cmp	r0, #0
   18e88:	beq	18eb4 <__assert_fail@plt+0x7878>
   18e8c:	mov	r7, r0
   18e90:	bl	114e0 <strlen@plt>
   18e94:	cmp	r0, r6
   18e98:	bcs	18ec8 <__assert_fail@plt+0x788c>
   18e9c:	add	r2, r0, #1
   18ea0:	mov	r0, r4
   18ea4:	mov	r1, r7
   18ea8:	bl	11384 <memcpy@plt>
   18eac:	mov	r5, #0
   18eb0:	b	18ef0 <__assert_fail@plt+0x78b4>
   18eb4:	cmp	r6, #0
   18eb8:	mov	r5, #22
   18ebc:	movne	r0, #0
   18ec0:	strbne	r0, [r4]
   18ec4:	b	18ef0 <__assert_fail@plt+0x78b4>
   18ec8:	mov	r5, #34	; 0x22
   18ecc:	cmp	r6, #0
   18ed0:	beq	18ef0 <__assert_fail@plt+0x78b4>
   18ed4:	sub	r6, r6, #1
   18ed8:	mov	r0, r4
   18edc:	mov	r1, r7
   18ee0:	mov	r2, r6
   18ee4:	bl	11384 <memcpy@plt>
   18ee8:	mov	r0, #0
   18eec:	strb	r0, [r4, r6]
   18ef0:	mov	r0, r5
   18ef4:	pop	{r4, r5, r6, r7, fp, pc}
   18ef8:	mov	r1, #0
   18efc:	b	115a0 <setlocale@plt>
   18f00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18f04:	add	fp, sp, #24
   18f08:	mov	r4, r0
   18f0c:	cmp	r0, #0
   18f10:	beq	18f34 <__assert_fail@plt+0x78f8>
   18f14:	mov	r0, r4
   18f18:	bl	114e0 <strlen@plt>
   18f1c:	add	r5, r0, #1
   18f20:	cmp	r5, #58	; 0x3a
   18f24:	bls	18f38 <__assert_fail@plt+0x78fc>
   18f28:	add	r0, r0, #10
   18f2c:	bic	r0, r0, #3
   18f30:	b	18f3c <__assert_fail@plt+0x7900>
   18f34:	mov	r5, #0
   18f38:	mov	r0, #64	; 0x40
   18f3c:	bl	1b160 <__assert_fail@plt+0x9b24>
   18f40:	mov	r6, r0
   18f44:	cmp	r0, #0
   18f48:	beq	18f84 <__assert_fail@plt+0x7948>
   18f4c:	cmp	r4, #0
   18f50:	mov	r0, r4
   18f54:	mov	r8, #0
   18f58:	mov	r7, r6
   18f5c:	movwne	r0, #1
   18f60:	str	r8, [r6]
   18f64:	strb	r0, [r6, #4]
   18f68:	strb	r8, [r7, #5]!
   18f6c:	beq	18f84 <__assert_fail@plt+0x7948>
   18f70:	mov	r0, r7
   18f74:	mov	r1, r4
   18f78:	mov	r2, r5
   18f7c:	bl	11384 <memcpy@plt>
   18f80:	strb	r8, [r7, r5]
   18f84:	mov	r0, r6
   18f88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18f8c:	push	{r4, sl, fp, lr}
   18f90:	add	fp, sp, #8
   18f94:	cmp	r0, #2
   18f98:	popcc	{r4, sl, fp, pc}
   18f9c:	ldr	r4, [r0]
   18fa0:	bl	154bc <__assert_fail@plt+0x3e80>
   18fa4:	cmp	r4, #0
   18fa8:	mov	r0, r4
   18fac:	bne	18f9c <__assert_fail@plt+0x7960>
   18fb0:	pop	{r4, sl, fp, pc}
   18fb4:	push	{r4, r5, r6, r7, fp, lr}
   18fb8:	add	fp, sp, #16
   18fbc:	mov	r4, r2
   18fc0:	mov	r7, r1
   18fc4:	cmp	r0, #0
   18fc8:	beq	19008 <__assert_fail@plt+0x79cc>
   18fcc:	mov	r6, r0
   18fd0:	bl	19040 <__assert_fail@plt+0x7a04>
   18fd4:	cmp	r0, #0
   18fd8:	beq	19018 <__assert_fail@plt+0x79dc>
   18fdc:	mov	r5, r0
   18fe0:	mov	r0, r7
   18fe4:	mov	r1, r4
   18fe8:	bl	113c0 <localtime_r@plt>
   18fec:	cmp	r0, #0
   18ff0:	beq	19020 <__assert_fail@plt+0x79e4>
   18ff4:	mov	r0, r6
   18ff8:	mov	r1, r4
   18ffc:	bl	190f4 <__assert_fail@plt+0x7ab8>
   19000:	eor	r6, r0, #1
   19004:	b	19024 <__assert_fail@plt+0x79e8>
   19008:	mov	r0, r7
   1900c:	mov	r1, r4
   19010:	pop	{r4, r5, r6, r7, fp, lr}
   19014:	b	1130c <gmtime_r@plt>
   19018:	mov	r0, #0
   1901c:	pop	{r4, r5, r6, r7, fp, pc}
   19020:	mov	r6, #1
   19024:	mov	r0, r5
   19028:	bl	1921c <__assert_fail@plt+0x7be0>
   1902c:	cmp	r0, #0
   19030:	movne	r0, r4
   19034:	cmp	r6, #0
   19038:	movwne	r0, #0
   1903c:	pop	{r4, r5, r6, r7, fp, pc}
   19040:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19044:	add	fp, sp, #24
   19048:	mov	r5, r0
   1904c:	movw	r0, #47483	; 0xb97b
   19050:	movt	r0, #1
   19054:	bl	11450 <getenv@plt>
   19058:	mov	r4, r0
   1905c:	ldrb	r0, [r5, #4]
   19060:	cmp	r4, #0
   19064:	beq	1907c <__assert_fail@plt+0x7a40>
   19068:	cmp	r0, #0
   1906c:	beq	19084 <__assert_fail@plt+0x7a48>
   19070:	add	r0, r5, #5
   19074:	mov	r1, r4
   19078:	bl	11318 <strcmp@plt>
   1907c:	cmp	r0, #0
   19080:	beq	190b4 <__assert_fail@plt+0x7a78>
   19084:	mov	r0, r4
   19088:	bl	18f00 <__assert_fail@plt+0x78c4>
   1908c:	mov	r7, #0
   19090:	cmp	r0, #0
   19094:	beq	190ec <__assert_fail@plt+0x7ab0>
   19098:	mov	r4, r0
   1909c:	mov	r0, r5
   190a0:	bl	19360 <__assert_fail@plt+0x7d24>
   190a4:	cmp	r0, #0
   190a8:	beq	190bc <__assert_fail@plt+0x7a80>
   190ac:	mov	r7, r4
   190b0:	b	190ec <__assert_fail@plt+0x7ab0>
   190b4:	mov	r7, #1
   190b8:	b	190ec <__assert_fail@plt+0x7ab0>
   190bc:	bl	11510 <__errno_location@plt>
   190c0:	ldr	r8, [r0]
   190c4:	mov	r5, r0
   190c8:	cmp	r4, #2
   190cc:	bcc	190e8 <__assert_fail@plt+0x7aac>
   190d0:	ldr	r6, [r4]
   190d4:	mov	r0, r4
   190d8:	bl	154bc <__assert_fail@plt+0x3e80>
   190dc:	cmp	r6, #0
   190e0:	mov	r4, r6
   190e4:	bne	190d0 <__assert_fail@plt+0x7a94>
   190e8:	str	r8, [r5]
   190ec:	mov	r0, r7
   190f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   190f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190f8:	add	fp, sp, #28
   190fc:	sub	sp, sp, #4
   19100:	ldr	r7, [r1, #40]	; 0x28
   19104:	mov	r8, #1
   19108:	cmp	r7, #0
   1910c:	beq	191ac <__assert_fail@plt+0x7b70>
   19110:	mov	r5, r1
   19114:	mov	r6, r0
   19118:	cmp	r7, r1
   1911c:	bcc	1912c <__assert_fail@plt+0x7af0>
   19120:	add	r0, r5, #44	; 0x2c
   19124:	cmp	r7, r0
   19128:	bcc	191ac <__assert_fail@plt+0x7b70>
   1912c:	ldrb	r0, [r7]
   19130:	cmp	r0, #0
   19134:	beq	191a0 <__assert_fail@plt+0x7b64>
   19138:	add	r4, r6, #5
   1913c:	mov	r0, r4
   19140:	mov	r1, r7
   19144:	bl	11318 <strcmp@plt>
   19148:	cmp	r0, #0
   1914c:	beq	191a8 <__assert_fail@plt+0x7b6c>
   19150:	ldrb	r0, [r4]
   19154:	cmp	r0, #0
   19158:	bne	19174 <__assert_fail@plt+0x7b38>
   1915c:	add	r0, r6, #5
   19160:	cmp	r4, r0
   19164:	bne	191b8 <__assert_fail@plt+0x7b7c>
   19168:	ldrb	r0, [r6, #4]
   1916c:	cmp	r0, #0
   19170:	beq	191b8 <__assert_fail@plt+0x7b7c>
   19174:	mov	r0, r4
   19178:	bl	114e0 <strlen@plt>
   1917c:	add	r4, r0, r4
   19180:	ldrb	r0, [r4, #1]!
   19184:	cmp	r0, #0
   19188:	bne	1913c <__assert_fail@plt+0x7b00>
   1918c:	ldr	r0, [r6]
   19190:	cmp	r0, #0
   19194:	addne	r4, r0, #5
   19198:	movne	r6, r0
   1919c:	b	1913c <__assert_fail@plt+0x7b00>
   191a0:	movw	r4, #51900	; 0xcabc
   191a4:	movt	r4, #1
   191a8:	str	r4, [r5, #40]	; 0x28
   191ac:	mov	r0, r8
   191b0:	sub	sp, fp, #28
   191b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191b8:	sub	r0, r6, r4
   191bc:	add	sl, r0, #64	; 0x40
   191c0:	mov	r0, r7
   191c4:	bl	114e0 <strlen@plt>
   191c8:	add	r9, r0, #1
   191cc:	cmp	r9, sl
   191d0:	bge	191f0 <__assert_fail@plt+0x7bb4>
   191d4:	mov	r0, r4
   191d8:	mov	r1, r7
   191dc:	mov	r2, r9
   191e0:	bl	11384 <memcpy@plt>
   191e4:	mov	r0, #0
   191e8:	strb	r0, [r4, r9]
   191ec:	b	191a8 <__assert_fail@plt+0x7b6c>
   191f0:	mov	r0, r7
   191f4:	bl	18f00 <__assert_fail@plt+0x78c4>
   191f8:	cmp	r0, #0
   191fc:	str	r0, [r6]
   19200:	beq	19214 <__assert_fail@plt+0x7bd8>
   19204:	mov	r1, #0
   19208:	add	r4, r0, #5
   1920c:	strb	r1, [r0, #4]
   19210:	b	191a8 <__assert_fail@plt+0x7b6c>
   19214:	mov	r8, #0
   19218:	b	191ac <__assert_fail@plt+0x7b70>
   1921c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19220:	add	fp, sp, #24
   19224:	cmp	r0, #1
   19228:	beq	19278 <__assert_fail@plt+0x7c3c>
   1922c:	mov	r7, r0
   19230:	bl	11510 <__errno_location@plt>
   19234:	ldr	r8, [r0]
   19238:	mov	r6, r0
   1923c:	mov	r0, r7
   19240:	bl	19360 <__assert_fail@plt+0x7d24>
   19244:	cmp	r0, #0
   19248:	mov	r5, r0
   1924c:	ldreq	r8, [r6]
   19250:	cmp	r7, #2
   19254:	bcc	19270 <__assert_fail@plt+0x7c34>
   19258:	ldr	r4, [r7]
   1925c:	mov	r0, r7
   19260:	bl	154bc <__assert_fail@plt+0x3e80>
   19264:	cmp	r4, #0
   19268:	mov	r7, r4
   1926c:	bne	19258 <__assert_fail@plt+0x7c1c>
   19270:	str	r8, [r6]
   19274:	b	1927c <__assert_fail@plt+0x7c40>
   19278:	mov	r5, #1
   1927c:	mov	r0, r5
   19280:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19284:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19288:	add	fp, sp, #24
   1928c:	sub	sp, sp, #48	; 0x30
   19290:	mov	r4, r1
   19294:	cmp	r0, #0
   19298:	beq	19338 <__assert_fail@plt+0x7cfc>
   1929c:	mov	r6, r0
   192a0:	bl	19040 <__assert_fail@plt+0x7a04>
   192a4:	cmp	r0, #0
   192a8:	beq	19350 <__assert_fail@plt+0x7d14>
   192ac:	mov	r1, #32
   192b0:	mov	r2, r4
   192b4:	mov	r7, r0
   192b8:	mov	r0, sp
   192bc:	vld1.32	{d16-d17}, [r2], r1
   192c0:	mov	r3, r0
   192c4:	vst1.32	{d16-d17}, [r3], r1
   192c8:	ldr	r1, [r4, #16]
   192cc:	ldr	r5, [r4, #20]
   192d0:	str	r1, [sp, #16]
   192d4:	mvn	r1, #0
   192d8:	str	r1, [sp, #28]
   192dc:	str	r5, [sp, #20]
   192e0:	ldr	r1, [r2]
   192e4:	str	r1, [r3]
   192e8:	bl	1133c <mktime@plt>
   192ec:	mov	r5, r0
   192f0:	ldr	r0, [sp, #28]
   192f4:	cmn	r0, #1
   192f8:	ble	19348 <__assert_fail@plt+0x7d0c>
   192fc:	mov	r8, sp
   19300:	mov	r0, r6
   19304:	mov	r1, r8
   19308:	bl	190f4 <__assert_fail@plt+0x7ab8>
   1930c:	mov	r6, r0
   19310:	mov	r0, r7
   19314:	bl	1921c <__assert_fail@plt+0x7be0>
   19318:	cmp	r6, #0
   1931c:	cmpne	r0, #0
   19320:	beq	19350 <__assert_fail@plt+0x7d14>
   19324:	ldm	r8!, {r0, r1, r2, r3, r7}
   19328:	stmia	r4!, {r0, r1, r2, r3, r7}
   1932c:	ldm	r8, {r0, r1, r2, r3, r6, r7}
   19330:	stm	r4, {r0, r1, r2, r3, r6, r7}
   19334:	b	19354 <__assert_fail@plt+0x7d18>
   19338:	mov	r0, r4
   1933c:	sub	sp, fp, #24
   19340:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19344:	b	115c4 <timegm@plt>
   19348:	mov	r0, r7
   1934c:	bl	1921c <__assert_fail@plt+0x7be0>
   19350:	mvn	r5, #0
   19354:	mov	r0, r5
   19358:	sub	sp, fp, #24
   1935c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19360:	push	{fp, lr}
   19364:	mov	fp, sp
   19368:	ldrb	r1, [r0, #4]
   1936c:	cmp	r1, #0
   19370:	beq	1938c <__assert_fail@plt+0x7d50>
   19374:	add	r1, r0, #5
   19378:	movw	r0, #47483	; 0xb97b
   1937c:	mov	r2, #1
   19380:	movt	r0, #1
   19384:	bl	114f8 <setenv@plt>
   19388:	b	19398 <__assert_fail@plt+0x7d5c>
   1938c:	movw	r0, #47483	; 0xb97b
   19390:	movt	r0, #1
   19394:	bl	115f4 <unsetenv@plt>
   19398:	mov	r1, #0
   1939c:	cmp	r0, #0
   193a0:	bne	193ac <__assert_fail@plt+0x7d70>
   193a4:	bl	113f0 <tzset@plt>
   193a8:	mov	r1, #1
   193ac:	mov	r0, r1
   193b0:	pop	{fp, pc}
   193b4:	mov	r1, #0
   193b8:	mov	r2, #3
   193bc:	b	1b260 <__assert_fail@plt+0x9c24>
   193c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   193c4:	add	fp, sp, #24
   193c8:	sub	sp, sp, #32
   193cc:	ldr	r6, [fp, #12]
   193d0:	ldr	r7, [fp, #8]
   193d4:	mov	r4, r2
   193d8:	mov	r8, r0
   193dc:	cmp	r1, #0
   193e0:	beq	19408 <__assert_fail@plt+0x7dcc>
   193e4:	movw	r2, #53324	; 0xd04c
   193e8:	mov	r5, r1
   193ec:	str	r3, [sp, #4]
   193f0:	str	r4, [sp]
   193f4:	mov	r0, r8
   193f8:	mov	r1, #1
   193fc:	movt	r2, #1
   19400:	mov	r3, r5
   19404:	b	19420 <__assert_fail@plt+0x7de4>
   19408:	movw	r2, #53336	; 0xd058
   1940c:	str	r3, [sp]
   19410:	mov	r0, r8
   19414:	mov	r1, #1
   19418:	mov	r3, r4
   1941c:	movt	r2, #1
   19420:	bl	11564 <__fprintf_chk@plt>
   19424:	movw	r1, #53343	; 0xd05f
   19428:	mov	r0, #0
   1942c:	mov	r2, #5
   19430:	movt	r1, #1
   19434:	bl	113a8 <dcgettext@plt>
   19438:	movw	r2, #54061	; 0xd32d
   1943c:	mov	r3, r0
   19440:	movw	r0, #2022	; 0x7e6
   19444:	mov	r1, #1
   19448:	movt	r2, #1
   1944c:	str	r0, [sp]
   19450:	mov	r0, r8
   19454:	bl	11564 <__fprintf_chk@plt>
   19458:	movw	r4, #52011	; 0xcb2b
   1945c:	mov	r1, r8
   19460:	movt	r4, #1
   19464:	mov	r0, r4
   19468:	bl	112f4 <fputs_unlocked@plt>
   1946c:	movw	r1, #53347	; 0xd063
   19470:	mov	r0, #0
   19474:	mov	r2, #5
   19478:	movt	r1, #1
   1947c:	bl	113a8 <dcgettext@plt>
   19480:	movw	r3, #53518	; 0xd10e
   19484:	mov	r2, r0
   19488:	mov	r0, r8
   1948c:	mov	r1, #1
   19490:	movt	r3, #1
   19494:	bl	11564 <__fprintf_chk@plt>
   19498:	mov	r0, r4
   1949c:	mov	r1, r8
   194a0:	bl	112f4 <fputs_unlocked@plt>
   194a4:	cmp	r6, #9
   194a8:	bhi	1950c <__assert_fail@plt+0x7ed0>
   194ac:	add	r0, pc, #0
   194b0:	ldr	pc, [r0, r6, lsl #2]
   194b4:	andeq	r9, r1, r4, ror #13
   194b8:	ldrdeq	r9, [r1], -ip
   194bc:	andeq	r9, r1, r8, lsl r5
   194c0:	andeq	r9, r1, r0, asr #10
   194c4:	andeq	r9, r1, r8, ror #10
   194c8:	muleq	r1, r0, r5
   194cc:			; <UNDEFINED> instruction: 0x000195b8
   194d0:	strdeq	r9, [r1], -r0
   194d4:	muleq	r1, r0, r6
   194d8:	andeq	r9, r1, r8, lsr r6
   194dc:	movw	r1, #53552	; 0xd130
   194e0:	mov	r0, #0
   194e4:	mov	r2, #5
   194e8:	movt	r1, #1
   194ec:	bl	113a8 <dcgettext@plt>
   194f0:	ldr	r3, [r7]
   194f4:	mov	r2, r0
   194f8:	mov	r0, r8
   194fc:	mov	r1, #1
   19500:	sub	sp, fp, #24
   19504:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19508:	b	11564 <__fprintf_chk@plt>
   1950c:	movw	r1, #53871	; 0xd26f
   19510:	movt	r1, #1
   19514:	b	19640 <__assert_fail@plt+0x8004>
   19518:	movw	r1, #53568	; 0xd140
   1951c:	mov	r0, #0
   19520:	mov	r2, #5
   19524:	movt	r1, #1
   19528:	bl	113a8 <dcgettext@plt>
   1952c:	mov	r2, r0
   19530:	ldr	r3, [r7]
   19534:	ldr	r0, [r7, #4]
   19538:	str	r0, [sp]
   1953c:	b	1962c <__assert_fail@plt+0x7ff0>
   19540:	movw	r1, #53591	; 0xd157
   19544:	mov	r0, #0
   19548:	mov	r2, #5
   1954c:	movt	r1, #1
   19550:	bl	113a8 <dcgettext@plt>
   19554:	mov	r2, r0
   19558:	ldr	r3, [r7]
   1955c:	ldmib	r7, {r0, r1}
   19560:	stm	sp, {r0, r1}
   19564:	b	1962c <__assert_fail@plt+0x7ff0>
   19568:	movw	r1, #53619	; 0xd173
   1956c:	mov	r0, #0
   19570:	mov	r2, #5
   19574:	movt	r1, #1
   19578:	bl	113a8 <dcgettext@plt>
   1957c:	ldr	r3, [r7]
   19580:	mov	r2, r0
   19584:	ldmib	r7, {r0, r1, r7}
   19588:	stm	sp, {r0, r1, r7}
   1958c:	b	1962c <__assert_fail@plt+0x7ff0>
   19590:	movw	r1, #53651	; 0xd193
   19594:	mov	r0, #0
   19598:	mov	r2, #5
   1959c:	movt	r1, #1
   195a0:	bl	113a8 <dcgettext@plt>
   195a4:	ldr	r3, [r7]
   195a8:	mov	r2, r0
   195ac:	ldmib	r7, {r0, r1, r6, r7}
   195b0:	stm	sp, {r0, r1, r6, r7}
   195b4:	b	1962c <__assert_fail@plt+0x7ff0>
   195b8:	movw	r1, #53687	; 0xd1b7
   195bc:	mov	r0, #0
   195c0:	mov	r2, #5
   195c4:	movt	r1, #1
   195c8:	bl	113a8 <dcgettext@plt>
   195cc:	mov	r2, r0
   195d0:	ldr	r3, [r7]
   195d4:	ldmib	r7, {r0, r1, r6}
   195d8:	ldr	r5, [r7, #16]
   195dc:	ldr	r7, [r7, #20]
   195e0:	stm	sp, {r0, r1, r6}
   195e4:	str	r5, [sp, #12]
   195e8:	str	r7, [sp, #16]
   195ec:	b	1962c <__assert_fail@plt+0x7ff0>
   195f0:	movw	r1, #53727	; 0xd1df
   195f4:	mov	r0, #0
   195f8:	mov	r2, #5
   195fc:	movt	r1, #1
   19600:	bl	113a8 <dcgettext@plt>
   19604:	mov	r2, r0
   19608:	ldr	r3, [r7]
   1960c:	ldmib	r7, {r0, r1, r6}
   19610:	ldr	r5, [r7, #16]
   19614:	ldr	r4, [r7, #20]
   19618:	ldr	r7, [r7, #24]
   1961c:	stm	sp, {r0, r1, r6}
   19620:	str	r5, [sp, #12]
   19624:	str	r4, [sp, #16]
   19628:	str	r7, [sp, #20]
   1962c:	mov	r0, r8
   19630:	mov	r1, #1
   19634:	b	196e0 <__assert_fail@plt+0x80a4>
   19638:	movw	r1, #53819	; 0xd23b
   1963c:	movt	r1, #1
   19640:	mov	r0, #0
   19644:	mov	r2, #5
   19648:	bl	113a8 <dcgettext@plt>
   1964c:	mov	ip, r0
   19650:	ldr	r3, [r7]
   19654:	ldr	r0, [r7, #4]
   19658:	ldr	r1, [r7, #8]
   1965c:	ldr	r6, [r7, #12]
   19660:	ldr	r5, [r7, #16]
   19664:	ldr	r4, [r7, #20]
   19668:	ldr	r2, [r7, #24]
   1966c:	ldr	lr, [r7, #28]
   19670:	ldr	r7, [r7, #32]
   19674:	stm	sp, {r0, r1, r6}
   19678:	str	r5, [sp, #12]
   1967c:	str	r4, [sp, #16]
   19680:	str	r2, [sp, #20]
   19684:	str	lr, [sp, #24]
   19688:	str	r7, [sp, #28]
   1968c:	b	196d4 <__assert_fail@plt+0x8098>
   19690:	movw	r1, #53771	; 0xd20b
   19694:	mov	r0, #0
   19698:	mov	r2, #5
   1969c:	movt	r1, #1
   196a0:	bl	113a8 <dcgettext@plt>
   196a4:	mov	ip, r0
   196a8:	ldr	r3, [r7]
   196ac:	ldmib	r7, {r0, r1, r6}
   196b0:	ldr	r5, [r7, #16]
   196b4:	ldr	r4, [r7, #20]
   196b8:	ldr	r2, [r7, #24]
   196bc:	ldr	r7, [r7, #28]
   196c0:	stm	sp, {r0, r1, r6}
   196c4:	str	r5, [sp, #12]
   196c8:	str	r4, [sp, #16]
   196cc:	str	r2, [sp, #20]
   196d0:	str	r7, [sp, #24]
   196d4:	mov	r0, r8
   196d8:	mov	r1, #1
   196dc:	mov	r2, ip
   196e0:	bl	11564 <__fprintf_chk@plt>
   196e4:	sub	sp, fp, #24
   196e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   196ec:	push	{r4, sl, fp, lr}
   196f0:	add	fp, sp, #8
   196f4:	sub	sp, sp, #8
   196f8:	ldr	ip, [fp, #8]
   196fc:	mov	lr, #0
   19700:	ldr	r4, [ip, lr, lsl #2]
   19704:	add	lr, lr, #1
   19708:	cmp	r4, #0
   1970c:	bne	19700 <__assert_fail@plt+0x80c4>
   19710:	sub	r4, lr, #1
   19714:	str	ip, [sp]
   19718:	str	r4, [sp, #4]
   1971c:	bl	193c0 <__assert_fail@plt+0x7d84>
   19720:	sub	sp, fp, #8
   19724:	pop	{r4, sl, fp, pc}
   19728:	push	{r4, r5, fp, lr}
   1972c:	add	fp, sp, #8
   19730:	sub	sp, sp, #48	; 0x30
   19734:	ldr	r4, [fp, #8]
   19738:	mov	ip, #0
   1973c:	add	lr, sp, #8
   19740:	ldr	r5, [r4]
   19744:	cmp	r5, #0
   19748:	str	r5, [lr, ip, lsl #2]
   1974c:	beq	19764 <__assert_fail@plt+0x8128>
   19750:	add	ip, ip, #1
   19754:	add	r4, r4, #4
   19758:	cmp	ip, #10
   1975c:	bne	19740 <__assert_fail@plt+0x8104>
   19760:	mov	ip, #10
   19764:	str	lr, [sp]
   19768:	str	ip, [sp, #4]
   1976c:	bl	193c0 <__assert_fail@plt+0x7d84>
   19770:	sub	sp, fp, #8
   19774:	pop	{r4, r5, fp, pc}
   19778:	push	{fp, lr}
   1977c:	mov	fp, sp
   19780:	sub	sp, sp, #8
   19784:	add	ip, fp, #8
   19788:	str	ip, [sp, #4]
   1978c:	str	ip, [sp]
   19790:	bl	19728 <__assert_fail@plt+0x80ec>
   19794:	mov	sp, fp
   19798:	pop	{fp, pc}
   1979c:	push	{fp, lr}
   197a0:	mov	fp, sp
   197a4:	movw	r0, #57820	; 0xe1dc
   197a8:	movt	r0, #2
   197ac:	ldr	r1, [r0]
   197b0:	movw	r0, #52011	; 0xcb2b
   197b4:	movt	r0, #1
   197b8:	bl	112f4 <fputs_unlocked@plt>
   197bc:	movw	r1, #53931	; 0xd2ab
   197c0:	mov	r0, #0
   197c4:	mov	r2, #5
   197c8:	movt	r1, #1
   197cc:	bl	113a8 <dcgettext@plt>
   197d0:	movw	r2, #53951	; 0xd2bf
   197d4:	mov	r1, r0
   197d8:	mov	r0, #1
   197dc:	movt	r2, #1
   197e0:	bl	11540 <__printf_chk@plt>
   197e4:	movw	r1, #53973	; 0xd2d5
   197e8:	mov	r0, #0
   197ec:	mov	r2, #5
   197f0:	movt	r1, #1
   197f4:	bl	113a8 <dcgettext@plt>
   197f8:	movw	r2, #47395	; 0xb923
   197fc:	movw	r3, #52271	; 0xcc2f
   19800:	mov	r1, r0
   19804:	mov	r0, #1
   19808:	movt	r2, #1
   1980c:	movt	r3, #1
   19810:	bl	11540 <__printf_chk@plt>
   19814:	movw	r1, #53993	; 0xd2e9
   19818:	mov	r0, #0
   1981c:	mov	r2, #5
   19820:	movt	r1, #1
   19824:	bl	113a8 <dcgettext@plt>
   19828:	movw	r2, #54032	; 0xd310
   1982c:	mov	r1, r0
   19830:	mov	r0, #1
   19834:	movt	r2, #1
   19838:	pop	{fp, lr}
   1983c:	b	11540 <__printf_chk@plt>
   19840:	b	19844 <__assert_fail@plt+0x8208>
   19844:	push	{r4, r5, r6, sl, fp, lr}
   19848:	add	fp, sp, #16
   1984c:	mov	r4, r2
   19850:	mov	r5, r1
   19854:	mov	r6, r0
   19858:	bl	1b4d4 <__assert_fail@plt+0x9e98>
   1985c:	cmp	r0, #0
   19860:	popne	{r4, r5, r6, sl, fp, pc}
   19864:	cmp	r6, #0
   19868:	beq	1987c <__assert_fail@plt+0x8240>
   1986c:	cmp	r5, #0
   19870:	cmpne	r4, #0
   19874:	bne	1987c <__assert_fail@plt+0x8240>
   19878:	pop	{r4, r5, r6, sl, fp, pc}
   1987c:	bl	19cac <__assert_fail@plt+0x8670>
   19880:	push	{fp, lr}
   19884:	mov	fp, sp
   19888:	bl	1b160 <__assert_fail@plt+0x9b24>
   1988c:	cmp	r0, #0
   19890:	popne	{fp, pc}
   19894:	bl	19cac <__assert_fail@plt+0x8670>
   19898:	push	{fp, lr}
   1989c:	mov	fp, sp
   198a0:	bl	1b160 <__assert_fail@plt+0x9b24>
   198a4:	cmp	r0, #0
   198a8:	popne	{fp, pc}
   198ac:	bl	19cac <__assert_fail@plt+0x8670>
   198b0:	push	{fp, lr}
   198b4:	mov	fp, sp
   198b8:	bl	1b160 <__assert_fail@plt+0x9b24>
   198bc:	cmp	r0, #0
   198c0:	popne	{fp, pc}
   198c4:	bl	19cac <__assert_fail@plt+0x8670>
   198c8:	push	{r4, r5, fp, lr}
   198cc:	add	fp, sp, #8
   198d0:	mov	r4, r1
   198d4:	mov	r5, r0
   198d8:	bl	1b190 <__assert_fail@plt+0x9b54>
   198dc:	cmp	r0, #0
   198e0:	popne	{r4, r5, fp, pc}
   198e4:	cmp	r5, #0
   198e8:	beq	198f8 <__assert_fail@plt+0x82bc>
   198ec:	cmp	r4, #0
   198f0:	bne	198f8 <__assert_fail@plt+0x82bc>
   198f4:	pop	{r4, r5, fp, pc}
   198f8:	bl	19cac <__assert_fail@plt+0x8670>
   198fc:	push	{fp, lr}
   19900:	mov	fp, sp
   19904:	cmp	r1, #0
   19908:	orreq	r1, r1, #1
   1990c:	bl	1b190 <__assert_fail@plt+0x9b54>
   19910:	cmp	r0, #0
   19914:	popne	{fp, pc}
   19918:	bl	19cac <__assert_fail@plt+0x8670>
   1991c:	push	{fp, lr}
   19920:	mov	fp, sp
   19924:	clz	r3, r2
   19928:	lsr	ip, r3, #5
   1992c:	clz	r3, r1
   19930:	lsr	r3, r3, #5
   19934:	orrs	r3, r3, ip
   19938:	movwne	r1, #1
   1993c:	movwne	r2, #1
   19940:	bl	1b4d4 <__assert_fail@plt+0x9e98>
   19944:	cmp	r0, #0
   19948:	popne	{fp, pc}
   1994c:	bl	19cac <__assert_fail@plt+0x8670>
   19950:	push	{fp, lr}
   19954:	mov	fp, sp
   19958:	mov	r2, r1
   1995c:	mov	r1, r0
   19960:	mov	r0, #0
   19964:	bl	1b4d4 <__assert_fail@plt+0x9e98>
   19968:	cmp	r0, #0
   1996c:	popne	{fp, pc}
   19970:	bl	19cac <__assert_fail@plt+0x8670>
   19974:	mov	r2, r1
   19978:	mov	r1, r0
   1997c:	mov	r0, #0
   19980:	b	1991c <__assert_fail@plt+0x82e0>
   19984:	mov	r2, #1
   19988:	b	1998c <__assert_fail@plt+0x8350>
   1998c:	push	{r4, r5, fp, lr}
   19990:	add	fp, sp, #8
   19994:	ldr	r5, [r1]
   19998:	mov	r4, r1
   1999c:	cmp	r0, #0
   199a0:	beq	199b8 <__assert_fail@plt+0x837c>
   199a4:	mov	r1, #1
   199a8:	add	r1, r1, r5, lsr #1
   199ac:	adds	r5, r5, r1
   199b0:	bcc	199d0 <__assert_fail@plt+0x8394>
   199b4:	bl	19cac <__assert_fail@plt+0x8670>
   199b8:	cmp	r5, #0
   199bc:	bne	199d0 <__assert_fail@plt+0x8394>
   199c0:	mov	r1, #64	; 0x40
   199c4:	cmp	r2, #64	; 0x40
   199c8:	udiv	r5, r1, r2
   199cc:	addhi	r5, r5, #1
   199d0:	mov	r1, r5
   199d4:	bl	19844 <__assert_fail@plt+0x8208>
   199d8:	str	r5, [r4]
   199dc:	pop	{r4, r5, fp, pc}
   199e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   199e4:	add	fp, sp, #24
   199e8:	ldr	r6, [r1]
   199ec:	mov	r8, r1
   199f0:	ldr	r4, [fp, #8]
   199f4:	add	r1, r6, r6, asr #1
   199f8:	cmp	r1, r6
   199fc:	mvnvs	r1, #-2147483648	; 0x80000000
   19a00:	cmp	r1, r3
   19a04:	mov	r5, r1
   19a08:	movgt	r5, r3
   19a0c:	cmn	r3, #1
   19a10:	movle	r5, r1
   19a14:	cmn	r4, #1
   19a18:	ble	19a38 <__assert_fail@plt+0x83fc>
   19a1c:	cmp	r4, #0
   19a20:	beq	19a8c <__assert_fail@plt+0x8450>
   19a24:	cmn	r5, #1
   19a28:	ble	19a60 <__assert_fail@plt+0x8424>
   19a2c:	mvn	r7, #-2147483648	; 0x80000000
   19a30:	udiv	r1, r7, r4
   19a34:	b	19a54 <__assert_fail@plt+0x8418>
   19a38:	cmn	r5, #1
   19a3c:	ble	19a7c <__assert_fail@plt+0x8440>
   19a40:	cmn	r4, #1
   19a44:	beq	19a8c <__assert_fail@plt+0x8450>
   19a48:	mov	r1, #-2147483648	; 0x80000000
   19a4c:	mvn	r7, #-2147483648	; 0x80000000
   19a50:	sdiv	r1, r1, r4
   19a54:	cmp	r1, r5
   19a58:	bge	19a8c <__assert_fail@plt+0x8450>
   19a5c:	b	19a9c <__assert_fail@plt+0x8460>
   19a60:	beq	19a8c <__assert_fail@plt+0x8450>
   19a64:	mov	r1, #-2147483648	; 0x80000000
   19a68:	mvn	r7, #-2147483648	; 0x80000000
   19a6c:	sdiv	r1, r1, r5
   19a70:	cmp	r1, r4
   19a74:	bge	19a8c <__assert_fail@plt+0x8450>
   19a78:	b	19a9c <__assert_fail@plt+0x8460>
   19a7c:	mvn	r7, #-2147483648	; 0x80000000
   19a80:	sdiv	r1, r7, r4
   19a84:	cmp	r5, r1
   19a88:	blt	19a9c <__assert_fail@plt+0x8460>
   19a8c:	mul	r1, r5, r4
   19a90:	mov	r7, #64	; 0x40
   19a94:	cmp	r1, #63	; 0x3f
   19a98:	bgt	19aa4 <__assert_fail@plt+0x8468>
   19a9c:	sdiv	r5, r7, r4
   19aa0:	mul	r1, r5, r4
   19aa4:	cmp	r0, #0
   19aa8:	moveq	r7, #0
   19aac:	streq	r7, [r8]
   19ab0:	sub	r7, r5, r6
   19ab4:	cmp	r7, r2
   19ab8:	bge	19b5c <__assert_fail@plt+0x8520>
   19abc:	add	r5, r6, r2
   19ac0:	mov	r2, #0
   19ac4:	mov	r1, #0
   19ac8:	cmp	r5, r3
   19acc:	movwgt	r2, #1
   19ad0:	cmn	r3, #1
   19ad4:	movwgt	r1, #1
   19ad8:	cmp	r5, r6
   19adc:	bvs	19b44 <__assert_fail@plt+0x8508>
   19ae0:	ands	r1, r1, r2
   19ae4:	bne	19b44 <__assert_fail@plt+0x8508>
   19ae8:	cmn	r4, #1
   19aec:	ble	19b0c <__assert_fail@plt+0x84d0>
   19af0:	cmp	r4, #0
   19af4:	beq	19b58 <__assert_fail@plt+0x851c>
   19af8:	cmn	r5, #1
   19afc:	ble	19b30 <__assert_fail@plt+0x84f4>
   19b00:	mvn	r1, #-2147483648	; 0x80000000
   19b04:	udiv	r1, r1, r4
   19b08:	b	19b24 <__assert_fail@plt+0x84e8>
   19b0c:	cmn	r5, #1
   19b10:	ble	19b48 <__assert_fail@plt+0x850c>
   19b14:	cmn	r4, #1
   19b18:	beq	19b58 <__assert_fail@plt+0x851c>
   19b1c:	mov	r1, #-2147483648	; 0x80000000
   19b20:	sdiv	r1, r1, r4
   19b24:	cmp	r1, r5
   19b28:	bge	19b58 <__assert_fail@plt+0x851c>
   19b2c:	b	19b44 <__assert_fail@plt+0x8508>
   19b30:	beq	19b58 <__assert_fail@plt+0x851c>
   19b34:	mov	r1, #-2147483648	; 0x80000000
   19b38:	sdiv	r1, r1, r5
   19b3c:	cmp	r1, r4
   19b40:	bge	19b58 <__assert_fail@plt+0x851c>
   19b44:	bl	19cac <__assert_fail@plt+0x8670>
   19b48:	mvn	r1, #-2147483648	; 0x80000000
   19b4c:	sdiv	r1, r1, r4
   19b50:	cmp	r5, r1
   19b54:	blt	19b44 <__assert_fail@plt+0x8508>
   19b58:	mul	r1, r5, r4
   19b5c:	bl	198c8 <__assert_fail@plt+0x828c>
   19b60:	str	r5, [r8]
   19b64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19b68:	push	{fp, lr}
   19b6c:	mov	fp, sp
   19b70:	mov	r1, #1
   19b74:	bl	1b10c <__assert_fail@plt+0x9ad0>
   19b78:	cmp	r0, #0
   19b7c:	popne	{fp, pc}
   19b80:	bl	19cac <__assert_fail@plt+0x8670>
   19b84:	push	{fp, lr}
   19b88:	mov	fp, sp
   19b8c:	bl	1b10c <__assert_fail@plt+0x9ad0>
   19b90:	cmp	r0, #0
   19b94:	popne	{fp, pc}
   19b98:	bl	19cac <__assert_fail@plt+0x8670>
   19b9c:	push	{fp, lr}
   19ba0:	mov	fp, sp
   19ba4:	mov	r1, #1
   19ba8:	bl	1b10c <__assert_fail@plt+0x9ad0>
   19bac:	cmp	r0, #0
   19bb0:	popne	{fp, pc}
   19bb4:	bl	19cac <__assert_fail@plt+0x8670>
   19bb8:	push	{fp, lr}
   19bbc:	mov	fp, sp
   19bc0:	bl	1b10c <__assert_fail@plt+0x9ad0>
   19bc4:	cmp	r0, #0
   19bc8:	popne	{fp, pc}
   19bcc:	bl	19cac <__assert_fail@plt+0x8670>
   19bd0:	push	{r4, r5, fp, lr}
   19bd4:	add	fp, sp, #8
   19bd8:	mov	r5, r0
   19bdc:	mov	r0, r1
   19be0:	mov	r4, r1
   19be4:	bl	1b160 <__assert_fail@plt+0x9b24>
   19be8:	cmp	r0, #0
   19bec:	beq	19c00 <__assert_fail@plt+0x85c4>
   19bf0:	mov	r1, r5
   19bf4:	mov	r2, r4
   19bf8:	pop	{r4, r5, fp, lr}
   19bfc:	b	11384 <memcpy@plt>
   19c00:	bl	19cac <__assert_fail@plt+0x8670>
   19c04:	push	{r4, r5, fp, lr}
   19c08:	add	fp, sp, #8
   19c0c:	mov	r5, r0
   19c10:	mov	r0, r1
   19c14:	mov	r4, r1
   19c18:	bl	1b160 <__assert_fail@plt+0x9b24>
   19c1c:	cmp	r0, #0
   19c20:	beq	19c34 <__assert_fail@plt+0x85f8>
   19c24:	mov	r1, r5
   19c28:	mov	r2, r4
   19c2c:	pop	{r4, r5, fp, lr}
   19c30:	b	11384 <memcpy@plt>
   19c34:	bl	19cac <__assert_fail@plt+0x8670>
   19c38:	push	{r4, r5, fp, lr}
   19c3c:	add	fp, sp, #8
   19c40:	mov	r5, r0
   19c44:	add	r0, r1, #1
   19c48:	mov	r4, r1
   19c4c:	bl	1b160 <__assert_fail@plt+0x9b24>
   19c50:	cmp	r0, #0
   19c54:	beq	19c70 <__assert_fail@plt+0x8634>
   19c58:	mov	r1, #0
   19c5c:	mov	r2, r4
   19c60:	strb	r1, [r0, r4]
   19c64:	mov	r1, r5
   19c68:	pop	{r4, r5, fp, lr}
   19c6c:	b	11384 <memcpy@plt>
   19c70:	bl	19cac <__assert_fail@plt+0x8670>
   19c74:	push	{r4, r5, fp, lr}
   19c78:	add	fp, sp, #8
   19c7c:	mov	r4, r0
   19c80:	bl	114e0 <strlen@plt>
   19c84:	add	r5, r0, #1
   19c88:	mov	r0, r5
   19c8c:	bl	1b160 <__assert_fail@plt+0x9b24>
   19c90:	cmp	r0, #0
   19c94:	beq	19ca8 <__assert_fail@plt+0x866c>
   19c98:	mov	r1, r4
   19c9c:	mov	r2, r5
   19ca0:	pop	{r4, r5, fp, lr}
   19ca4:	b	11384 <memcpy@plt>
   19ca8:	bl	19cac <__assert_fail@plt+0x8670>
   19cac:	push	{fp, lr}
   19cb0:	mov	fp, sp
   19cb4:	movw	r0, #57724	; 0xe17c
   19cb8:	movw	r1, #54108	; 0xd35c
   19cbc:	mov	r2, #5
   19cc0:	movt	r0, #2
   19cc4:	movt	r1, #1
   19cc8:	ldr	r4, [r0]
   19ccc:	mov	r0, #0
   19cd0:	bl	113a8 <dcgettext@plt>
   19cd4:	movw	r2, #53039	; 0xcf2f
   19cd8:	mov	r3, r0
   19cdc:	mov	r0, r4
   19ce0:	mov	r1, #0
   19ce4:	movt	r2, #1
   19ce8:	bl	11444 <error@plt>
   19cec:	bl	11618 <abort@plt>
   19cf0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19cf4:	add	fp, sp, #24
   19cf8:	sub	sp, sp, #16
   19cfc:	mov	r8, r0
   19d00:	ldr	r0, [fp, #16]
   19d04:	mov	r7, r3
   19d08:	mov	r4, r2
   19d0c:	mov	r2, r1
   19d10:	add	r3, sp, #8
   19d14:	mov	r1, #0
   19d18:	str	r0, [sp]
   19d1c:	mov	r0, r8
   19d20:	bl	19e04 <__assert_fail@plt+0x87c8>
   19d24:	cmp	r0, #0
   19d28:	bne	19dd8 <__assert_fail@plt+0x879c>
   19d2c:	ldr	r6, [sp, #8]
   19d30:	ldr	r5, [sp, #12]
   19d34:	subs	r0, r6, r4
   19d38:	sbcs	r0, r5, r7
   19d3c:	blt	19d60 <__assert_fail@plt+0x8724>
   19d40:	ldr	r1, [fp, #8]
   19d44:	ldr	r0, [fp, #12]
   19d48:	subs	r1, r1, r6
   19d4c:	sbcs	r0, r0, r5
   19d50:	movge	r0, r6
   19d54:	movge	r1, r5
   19d58:	subge	sp, fp, #24
   19d5c:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   19d60:	subs	r0, r6, #1073741824	; 0x40000000
   19d64:	sbcs	r0, r5, #0
   19d68:	blt	19d74 <__assert_fail@plt+0x8738>
   19d6c:	bl	11510 <__errno_location@plt>
   19d70:	b	19d8c <__assert_fail@plt+0x8750>
   19d74:	bl	11510 <__errno_location@plt>
   19d78:	mvn	r2, #1073741824	; 0x40000000
   19d7c:	mvn	r1, #0
   19d80:	subs	r2, r2, r6
   19d84:	sbcs	r1, r1, r5
   19d88:	blt	19d94 <__assert_fail@plt+0x8758>
   19d8c:	mov	r1, #75	; 0x4b
   19d90:	b	19d98 <__assert_fail@plt+0x875c>
   19d94:	mov	r1, #34	; 0x22
   19d98:	str	r1, [r0]
   19d9c:	ldr	r6, [r0]
   19da0:	ldr	r4, [fp, #24]
   19da4:	ldr	r5, [fp, #20]
   19da8:	mov	r0, r8
   19dac:	bl	18d20 <__assert_fail@plt+0x76e4>
   19db0:	subs	r1, r6, #22
   19db4:	movw	r2, #53035	; 0xcf2b
   19db8:	str	r0, [sp]
   19dbc:	mov	r3, r5
   19dc0:	movne	r1, r6
   19dc4:	cmp	r4, #0
   19dc8:	movt	r2, #1
   19dcc:	movweq	r4, #1
   19dd0:	mov	r0, r4
   19dd4:	bl	11444 <error@plt>
   19dd8:	cmp	r0, #1
   19ddc:	beq	19d6c <__assert_fail@plt+0x8730>
   19de0:	cmp	r0, #3
   19de4:	bne	19df4 <__assert_fail@plt+0x87b8>
   19de8:	bl	11510 <__errno_location@plt>
   19dec:	mov	r1, #0
   19df0:	b	19d98 <__assert_fail@plt+0x875c>
   19df4:	bl	11510 <__errno_location@plt>
   19df8:	b	19d9c <__assert_fail@plt+0x8760>
   19dfc:	mov	r1, #10
   19e00:	b	19cf0 <__assert_fail@plt+0x86b4>
   19e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e08:	add	fp, sp, #28
   19e0c:	sub	sp, sp, #28
   19e10:	cmp	r2, #37	; 0x25
   19e14:	str	r3, [sp, #12]
   19e18:	bcs	1a32c <__assert_fail@plt+0x8cf0>
   19e1c:	ldr	sl, [fp, #8]
   19e20:	mov	r4, r2
   19e24:	mov	r6, r1
   19e28:	mov	r5, r0
   19e2c:	bl	11510 <__errno_location@plt>
   19e30:	cmp	r6, #0
   19e34:	add	r8, sp, #24
   19e38:	mov	r7, r0
   19e3c:	mov	r0, #0
   19e40:	mov	r2, r4
   19e44:	movne	r8, r6
   19e48:	str	r0, [r7]
   19e4c:	mov	r0, r5
   19e50:	mov	r1, r8
   19e54:	bl	11570 <strtoimax@plt>
   19e58:	str	r1, [sp, #20]
   19e5c:	str	r0, [sp, #16]
   19e60:	ldr	r4, [r8]
   19e64:	cmp	r4, r5
   19e68:	beq	19e94 <__assert_fail@plt+0x8858>
   19e6c:	mov	r6, r0
   19e70:	ldr	r0, [r7]
   19e74:	mov	r9, r1
   19e78:	cmp	r0, #0
   19e7c:	beq	19ed4 <__assert_fail@plt+0x8898>
   19e80:	mov	r7, #4
   19e84:	cmp	r0, #34	; 0x22
   19e88:	bne	1a320 <__assert_fail@plt+0x8ce4>
   19e8c:	mov	r7, #1
   19e90:	b	19ed8 <__assert_fail@plt+0x889c>
   19e94:	mov	r7, #4
   19e98:	cmp	sl, #0
   19e9c:	beq	1a320 <__assert_fail@plt+0x8ce4>
   19ea0:	ldrb	r1, [r5]
   19ea4:	cmp	r1, #0
   19ea8:	beq	1a320 <__assert_fail@plt+0x8ce4>
   19eac:	mov	r0, sl
   19eb0:	bl	114ec <strchr@plt>
   19eb4:	cmp	r0, #0
   19eb8:	beq	1a320 <__assert_fail@plt+0x8ce4>
   19ebc:	mov	r9, #0
   19ec0:	mov	r6, #1
   19ec4:	mov	r7, #0
   19ec8:	str	r9, [sp, #20]
   19ecc:	str	r6, [sp, #16]
   19ed0:	b	19ee0 <__assert_fail@plt+0x88a4>
   19ed4:	mov	r7, r0
   19ed8:	cmp	sl, #0
   19edc:	beq	19f84 <__assert_fail@plt+0x8948>
   19ee0:	ldrb	r5, [r4]
   19ee4:	cmp	r5, #0
   19ee8:	beq	19f8c <__assert_fail@plt+0x8950>
   19eec:	mov	r0, sl
   19ef0:	mov	r1, r5
   19ef4:	bl	114ec <strchr@plt>
   19ef8:	cmp	r0, #0
   19efc:	beq	19f94 <__assert_fail@plt+0x8958>
   19f00:	sub	r0, r5, #69	; 0x45
   19f04:	str	r7, [sp, #4]
   19f08:	mov	r1, #1
   19f0c:	mov	r7, #1024	; 0x400
   19f10:	cmp	r0, #21
   19f14:	str	r1, [sp, #8]
   19f18:	bhi	19f30 <__assert_fail@plt+0x88f4>
   19f1c:	movw	r2, #35141	; 0x8945
   19f20:	mov	r1, #1
   19f24:	movt	r2, #48	; 0x30
   19f28:	tst	r2, r1, lsl r0
   19f2c:	bne	19f4c <__assert_fail@plt+0x8910>
   19f30:	sub	r0, r5, #103	; 0x67
   19f34:	cmp	r0, #13
   19f38:	bhi	19fa4 <__assert_fail@plt+0x8968>
   19f3c:	mov	r1, #1
   19f40:	movw	r2, #8273	; 0x2051
   19f44:	tst	r2, r1, lsl r0
   19f48:	beq	19fa4 <__assert_fail@plt+0x8968>
   19f4c:	ldr	r0, [fp, #8]
   19f50:	mov	r1, #48	; 0x30
   19f54:	bl	114ec <strchr@plt>
   19f58:	cmp	r0, #0
   19f5c:	beq	19fa4 <__assert_fail@plt+0x8968>
   19f60:	ldrb	r0, [r4, #1]
   19f64:	ldr	sl, [sp, #12]
   19f68:	cmp	r0, #66	; 0x42
   19f6c:	cmpne	r0, #68	; 0x44
   19f70:	bne	1a078 <__assert_fail@plt+0x8a3c>
   19f74:	mov	r0, #2
   19f78:	mov	r7, #1000	; 0x3e8
   19f7c:	str	r0, [sp, #8]
   19f80:	b	19fa8 <__assert_fail@plt+0x896c>
   19f84:	ldr	r0, [sp, #12]
   19f88:	b	19f9c <__assert_fail@plt+0x8960>
   19f8c:	ldr	sl, [sp, #12]
   19f90:	b	1a31c <__assert_fail@plt+0x8ce0>
   19f94:	ldr	r0, [sp, #12]
   19f98:	orr	r7, r7, #2
   19f9c:	stm	r0, {r6, r9}
   19fa0:	b	1a320 <__assert_fail@plt+0x8ce4>
   19fa4:	ldr	sl, [sp, #12]
   19fa8:	cmp	r5, #89	; 0x59
   19fac:	bgt	1a014 <__assert_fail@plt+0x89d8>
   19fb0:	sub	r0, r5, #66	; 0x42
   19fb4:	cmp	r0, #14
   19fb8:	bhi	1a098 <__assert_fail@plt+0x8a5c>
   19fbc:	add	r1, pc, #0
   19fc0:	ldr	pc, [r1, r0, lsl #2]
   19fc4:	andeq	sl, r1, r0
   19fc8:			; <UNDEFINED> instruction: 0x0001a1b0
   19fcc:			; <UNDEFINED> instruction: 0x0001a1b0
   19fd0:	andeq	sl, r1, r0, asr #3
   19fd4:			; <UNDEFINED> instruction: 0x0001a1b0
   19fd8:	strdeq	sl, [r1], -r4
   19fdc:			; <UNDEFINED> instruction: 0x0001a1b0
   19fe0:			; <UNDEFINED> instruction: 0x0001a1b0
   19fe4:			; <UNDEFINED> instruction: 0x0001a1b0
   19fe8:	andeq	sl, r1, ip, lsl r1
   19fec:			; <UNDEFINED> instruction: 0x0001a1b0
   19ff0:	andeq	sl, r1, r0, lsr r1
   19ff4:			; <UNDEFINED> instruction: 0x0001a1b0
   19ff8:			; <UNDEFINED> instruction: 0x0001a1b0
   19ffc:	andeq	sl, r1, r8, ror #3
   1a000:	cmn	r9, #1
   1a004:	ble	1a210 <__assert_fail@plt+0x8bd4>
   1a008:	cmp	r9, #2097152	; 0x200000
   1a00c:	blt	1a23c <__assert_fail@plt+0x8c00>
   1a010:	b	1a2bc <__assert_fail@plt+0x8c80>
   1a014:	cmp	r5, #115	; 0x73
   1a018:	bgt	1a0d0 <__assert_fail@plt+0x8a94>
   1a01c:	sub	r0, r5, #98	; 0x62
   1a020:	cmp	r0, #11
   1a024:	bhi	1a180 <__assert_fail@plt+0x8b44>
   1a028:	add	r1, pc, #4
   1a02c:	mov	r4, #0
   1a030:	ldr	pc, [r1, r0, lsl #2]
   1a034:	andeq	sl, r1, r4, rrx
   1a038:	strdeq	sl, [r1], -r0
   1a03c:			; <UNDEFINED> instruction: 0x0001a1b0
   1a040:			; <UNDEFINED> instruction: 0x0001a1b0
   1a044:			; <UNDEFINED> instruction: 0x0001a1b0
   1a048:	strdeq	sl, [r1], -r4
   1a04c:			; <UNDEFINED> instruction: 0x0001a1b0
   1a050:			; <UNDEFINED> instruction: 0x0001a1b0
   1a054:			; <UNDEFINED> instruction: 0x0001a1b0
   1a058:	andeq	sl, r1, ip, lsl r1
   1a05c:			; <UNDEFINED> instruction: 0x0001a1b0
   1a060:	andeq	sl, r1, r0, lsr r1
   1a064:	cmn	r9, #1
   1a068:	ble	1a250 <__assert_fail@plt+0x8c14>
   1a06c:	cmp	r9, #4194304	; 0x400000
   1a070:	blt	1a27c <__assert_fail@plt+0x8c40>
   1a074:	b	1a2bc <__assert_fail@plt+0x8c80>
   1a078:	cmp	r0, #105	; 0x69
   1a07c:	bne	19fa8 <__assert_fail@plt+0x896c>
   1a080:	ldrb	r0, [r4, #2]
   1a084:	mov	r1, #1
   1a088:	cmp	r0, #66	; 0x42
   1a08c:	movweq	r1, #3
   1a090:	str	r1, [sp, #8]
   1a094:	b	19fa8 <__assert_fail@plt+0x896c>
   1a098:	cmp	r5, #84	; 0x54
   1a09c:	beq	1a158 <__assert_fail@plt+0x8b1c>
   1a0a0:	cmp	r5, #89	; 0x59
   1a0a4:	bne	1a1b0 <__assert_fail@plt+0x8b74>
   1a0a8:	mov	r4, #0
   1a0ac:	mvn	r6, #7
   1a0b0:	add	r5, sp, #16
   1a0b4:	mov	r0, r5
   1a0b8:	mov	r1, r7
   1a0bc:	bl	1a34c <__assert_fail@plt+0x8d10>
   1a0c0:	orr	r4, r0, r4
   1a0c4:	adds	r6, r6, #1
   1a0c8:	bcc	1a0b4 <__assert_fail@plt+0x8a78>
   1a0cc:	b	1a2f0 <__assert_fail@plt+0x8cb4>
   1a0d0:	cmp	r5, #116	; 0x74
   1a0d4:	beq	1a158 <__assert_fail@plt+0x8b1c>
   1a0d8:	cmp	r5, #119	; 0x77
   1a0dc:	bne	1a1b0 <__assert_fail@plt+0x8b74>
   1a0e0:	cmn	r9, #1
   1a0e4:	ble	1a290 <__assert_fail@plt+0x8c54>
   1a0e8:	cmp	r9, #1073741824	; 0x40000000
   1a0ec:	bge	1a2bc <__assert_fail@plt+0x8c80>
   1a0f0:	b	1a2d8 <__assert_fail@plt+0x8c9c>
   1a0f4:	mov	r4, #0
   1a0f8:	mvn	r6, #2
   1a0fc:	add	r5, sp, #16
   1a100:	mov	r0, r5
   1a104:	mov	r1, r7
   1a108:	bl	1a34c <__assert_fail@plt+0x8d10>
   1a10c:	orr	r4, r0, r4
   1a110:	adds	r6, r6, #1
   1a114:	bcc	1a100 <__assert_fail@plt+0x8ac4>
   1a118:	b	1a2f0 <__assert_fail@plt+0x8cb4>
   1a11c:	add	r0, sp, #16
   1a120:	mov	r1, r7
   1a124:	bl	1a34c <__assert_fail@plt+0x8d10>
   1a128:	mov	r4, r0
   1a12c:	b	1a2f0 <__assert_fail@plt+0x8cb4>
   1a130:	mov	r4, #0
   1a134:	mvn	r6, #1
   1a138:	add	r5, sp, #16
   1a13c:	mov	r0, r5
   1a140:	mov	r1, r7
   1a144:	bl	1a34c <__assert_fail@plt+0x8d10>
   1a148:	orr	r4, r0, r4
   1a14c:	adds	r6, r6, #1
   1a150:	bcc	1a13c <__assert_fail@plt+0x8b00>
   1a154:	b	1a2f0 <__assert_fail@plt+0x8cb4>
   1a158:	mov	r4, #0
   1a15c:	mvn	r6, #3
   1a160:	add	r5, sp, #16
   1a164:	mov	r0, r5
   1a168:	mov	r1, r7
   1a16c:	bl	1a34c <__assert_fail@plt+0x8d10>
   1a170:	orr	r4, r0, r4
   1a174:	adds	r6, r6, #1
   1a178:	bcc	1a164 <__assert_fail@plt+0x8b28>
   1a17c:	b	1a2f0 <__assert_fail@plt+0x8cb4>
   1a180:	cmp	r5, #90	; 0x5a
   1a184:	bne	1a1b0 <__assert_fail@plt+0x8b74>
   1a188:	mov	r4, #0
   1a18c:	mvn	r6, #6
   1a190:	add	r5, sp, #16
   1a194:	mov	r0, r5
   1a198:	mov	r1, r7
   1a19c:	bl	1a34c <__assert_fail@plt+0x8d10>
   1a1a0:	orr	r4, r0, r4
   1a1a4:	adds	r6, r6, #1
   1a1a8:	bcc	1a194 <__assert_fail@plt+0x8b58>
   1a1ac:	b	1a2f0 <__assert_fail@plt+0x8cb4>
   1a1b0:	stm	sl, {r6, r9}
   1a1b4:	ldr	r7, [sp, #4]
   1a1b8:	orr	r7, r7, #2
   1a1bc:	b	1a320 <__assert_fail@plt+0x8ce4>
   1a1c0:	mov	r4, #0
   1a1c4:	mvn	r6, #5
   1a1c8:	add	r5, sp, #16
   1a1cc:	mov	r0, r5
   1a1d0:	mov	r1, r7
   1a1d4:	bl	1a34c <__assert_fail@plt+0x8d10>
   1a1d8:	orr	r4, r0, r4
   1a1dc:	adds	r6, r6, #1
   1a1e0:	bcc	1a1cc <__assert_fail@plt+0x8b90>
   1a1e4:	b	1a2f0 <__assert_fail@plt+0x8cb4>
   1a1e8:	mov	r4, #0
   1a1ec:	mvn	r6, #4
   1a1f0:	add	r5, sp, #16
   1a1f4:	mov	r0, r5
   1a1f8:	mov	r1, r7
   1a1fc:	bl	1a34c <__assert_fail@plt+0x8d10>
   1a200:	orr	r4, r0, r4
   1a204:	adds	r6, r6, #1
   1a208:	bcc	1a1f4 <__assert_fail@plt+0x8bb8>
   1a20c:	b	1a2f0 <__assert_fail@plt+0x8cb4>
   1a210:	and	r0, r6, r9
   1a214:	cmn	r0, #1
   1a218:	beq	1a23c <__assert_fail@plt+0x8c00>
   1a21c:	mov	r0, #0
   1a220:	mov	r1, #-2147483648	; 0x80000000
   1a224:	mov	r2, r6
   1a228:	mov	r3, r9
   1a22c:	bl	1b510 <__assert_fail@plt+0x9ed4>
   1a230:	subs	r0, r0, #1024	; 0x400
   1a234:	sbcs	r0, r1, #0
   1a238:	blt	1a2bc <__assert_fail@plt+0x8c80>
   1a23c:	lsl	r0, r9, #10
   1a240:	lsl	r1, r6, #10
   1a244:	mov	r4, #0
   1a248:	orr	r0, r0, r6, lsr #22
   1a24c:	b	1a2e8 <__assert_fail@plt+0x8cac>
   1a250:	and	r0, r6, r9
   1a254:	cmn	r0, #1
   1a258:	beq	1a27c <__assert_fail@plt+0x8c40>
   1a25c:	mov	r0, #0
   1a260:	mov	r1, #-2147483648	; 0x80000000
   1a264:	mov	r2, r6
   1a268:	mov	r3, r9
   1a26c:	bl	1b510 <__assert_fail@plt+0x9ed4>
   1a270:	subs	r0, r0, #512	; 0x200
   1a274:	sbcs	r0, r1, #0
   1a278:	blt	1a2bc <__assert_fail@plt+0x8c80>
   1a27c:	lsl	r0, r9, #9
   1a280:	lsl	r1, r6, #9
   1a284:	mov	r4, #0
   1a288:	orr	r0, r0, r6, lsr #23
   1a28c:	b	1a2e8 <__assert_fail@plt+0x8cac>
   1a290:	and	r0, r6, r9
   1a294:	cmn	r0, #1
   1a298:	beq	1a2d8 <__assert_fail@plt+0x8c9c>
   1a29c:	mov	r0, #0
   1a2a0:	mov	r1, #-2147483648	; 0x80000000
   1a2a4:	mov	r2, r6
   1a2a8:	mov	r3, r9
   1a2ac:	bl	1b510 <__assert_fail@plt+0x9ed4>
   1a2b0:	subs	r0, r0, #2
   1a2b4:	sbcs	r0, r1, #0
   1a2b8:	bge	1a2d8 <__assert_fail@plt+0x8c9c>
   1a2bc:	cmp	r9, #0
   1a2c0:	mvn	r0, #-2147483648	; 0x80000000
   1a2c4:	mvn	r1, #0
   1a2c8:	mov	r4, #1
   1a2cc:	movmi	r0, #-2147483648	; 0x80000000
   1a2d0:	movwmi	r1, #0
   1a2d4:	b	1a2e8 <__assert_fail@plt+0x8cac>
   1a2d8:	lsl	r0, r9, #1
   1a2dc:	lsl	r1, r6, #1
   1a2e0:	mov	r4, #0
   1a2e4:	orr	r0, r0, r6, lsr #31
   1a2e8:	str	r1, [sp, #16]
   1a2ec:	str	r0, [sp, #20]
   1a2f0:	ldr	r0, [r8]
   1a2f4:	ldr	r2, [sp, #8]
   1a2f8:	ldr	r7, [sp, #4]
   1a2fc:	add	r1, r0, r2
   1a300:	orr	r7, r4, r7
   1a304:	str	r1, [r8]
   1a308:	ldrb	r0, [r0, r2]
   1a30c:	ldr	r6, [sp, #16]
   1a310:	ldr	r9, [sp, #20]
   1a314:	cmp	r0, #0
   1a318:	orrne	r7, r7, #2
   1a31c:	stm	sl, {r6, r9}
   1a320:	mov	r0, r7
   1a324:	sub	sp, fp, #28
   1a328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a32c:	movw	r0, #54125	; 0xd36d
   1a330:	movw	r1, #54163	; 0xd393
   1a334:	movw	r3, #54179	; 0xd3a3
   1a338:	mov	r2, #85	; 0x55
   1a33c:	movt	r0, #1
   1a340:	movt	r1, #1
   1a344:	movt	r3, #1
   1a348:	bl	1163c <__assert_fail@plt>
   1a34c:	push	{r4, r5, r6, r7, fp, lr}
   1a350:	add	fp, sp, #16
   1a354:	mov	r5, r1
   1a358:	mov	r4, r0
   1a35c:	cmn	r1, #1
   1a360:	ble	1a388 <__assert_fail@plt+0x8d4c>
   1a364:	ldrd	r6, [r4]
   1a368:	cmp	r5, #0
   1a36c:	beq	1a434 <__assert_fail@plt+0x8df8>
   1a370:	cmn	r7, #1
   1a374:	ble	1a3c0 <__assert_fail@plt+0x8d84>
   1a378:	asr	r3, r5, #31
   1a37c:	mvn	r0, #0
   1a380:	mvn	r1, #-2147483648	; 0x80000000
   1a384:	b	1a3a8 <__assert_fail@plt+0x8d6c>
   1a388:	ldrd	r6, [r4]
   1a38c:	cmn	r7, #1
   1a390:	ble	1a3f0 <__assert_fail@plt+0x8db4>
   1a394:	cmn	r5, #1
   1a398:	beq	1a434 <__assert_fail@plt+0x8df8>
   1a39c:	asr	r3, r5, #31
   1a3a0:	mov	r0, #0
   1a3a4:	mov	r1, #-2147483648	; 0x80000000
   1a3a8:	mov	r2, r5
   1a3ac:	bl	1b510 <__assert_fail@plt+0x9ed4>
   1a3b0:	subs	r0, r0, r6
   1a3b4:	sbcs	r0, r1, r7
   1a3b8:	blt	1a410 <__assert_fail@plt+0x8dd4>
   1a3bc:	b	1a434 <__assert_fail@plt+0x8df8>
   1a3c0:	and	r0, r6, r7
   1a3c4:	cmn	r0, #1
   1a3c8:	beq	1a42c <__assert_fail@plt+0x8df0>
   1a3cc:	mov	r0, #0
   1a3d0:	mov	r1, #-2147483648	; 0x80000000
   1a3d4:	mov	r2, r6
   1a3d8:	mov	r3, r7
   1a3dc:	bl	1b510 <__assert_fail@plt+0x9ed4>
   1a3e0:	subs	r0, r0, r5
   1a3e4:	sbcs	r0, r1, r5, asr #31
   1a3e8:	blt	1a410 <__assert_fail@plt+0x8dd4>
   1a3ec:	b	1a434 <__assert_fail@plt+0x8df8>
   1a3f0:	asr	r3, r5, #31
   1a3f4:	mvn	r0, #0
   1a3f8:	mvn	r1, #-2147483648	; 0x80000000
   1a3fc:	mov	r2, r5
   1a400:	bl	1b510 <__assert_fail@plt+0x9ed4>
   1a404:	subs	r0, r6, r0
   1a408:	sbcs	r0, r7, r1
   1a40c:	bge	1a434 <__assert_fail@plt+0x8df8>
   1a410:	cmp	r7, #0
   1a414:	mvn	r1, #-2147483648	; 0x80000000
   1a418:	mvn	r2, #0
   1a41c:	mov	r0, #1
   1a420:	movmi	r1, #-2147483648	; 0x80000000
   1a424:	movwmi	r2, #0
   1a428:	b	1a448 <__assert_fail@plt+0x8e0c>
   1a42c:	mvn	r6, #0
   1a430:	mvn	r7, #0
   1a434:	umull	r2, r0, r6, r5
   1a438:	asr	r1, r5, #31
   1a43c:	mla	r0, r6, r1, r0
   1a440:	mla	r1, r7, r5, r0
   1a444:	mov	r0, #0
   1a448:	str	r2, [r4]
   1a44c:	str	r1, [r4, #4]
   1a450:	pop	{r4, r5, r6, r7, fp, pc}
   1a454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a458:	add	fp, sp, #28
   1a45c:	sub	sp, sp, #12
   1a460:	cmp	r2, #37	; 0x25
   1a464:	bcs	1a8c8 <__assert_fail@plt+0x928c>
   1a468:	ldr	sl, [fp, #8]
   1a46c:	mov	r9, r3
   1a470:	mov	r4, r2
   1a474:	mov	r6, r1
   1a478:	mov	r5, r0
   1a47c:	bl	11510 <__errno_location@plt>
   1a480:	cmp	r6, #0
   1a484:	add	r8, sp, #8
   1a488:	mov	r7, r0
   1a48c:	mov	r0, #0
   1a490:	mov	r2, r4
   1a494:	movne	r8, r6
   1a498:	str	r0, [r7]
   1a49c:	mov	r0, r5
   1a4a0:	mov	r1, r8
   1a4a4:	bl	11324 <strtol@plt>
   1a4a8:	str	r0, [sp, #4]
   1a4ac:	str	r9, [sp]
   1a4b0:	ldr	r6, [r8]
   1a4b4:	cmp	r6, r5
   1a4b8:	beq	1a4e0 <__assert_fail@plt+0x8ea4>
   1a4bc:	mov	r4, r0
   1a4c0:	ldr	r0, [r7]
   1a4c4:	cmp	r0, #0
   1a4c8:	beq	1a518 <__assert_fail@plt+0x8edc>
   1a4cc:	mov	r9, #4
   1a4d0:	cmp	r0, #34	; 0x22
   1a4d4:	bne	1a8bc <__assert_fail@plt+0x9280>
   1a4d8:	mov	r9, #1
   1a4dc:	b	1a51c <__assert_fail@plt+0x8ee0>
   1a4e0:	mov	r9, #4
   1a4e4:	cmp	sl, #0
   1a4e8:	beq	1a8bc <__assert_fail@plt+0x9280>
   1a4ec:	ldrb	r1, [r5]
   1a4f0:	cmp	r1, #0
   1a4f4:	beq	1a8bc <__assert_fail@plt+0x9280>
   1a4f8:	mov	r0, sl
   1a4fc:	bl	114ec <strchr@plt>
   1a500:	cmp	r0, #0
   1a504:	beq	1a8bc <__assert_fail@plt+0x9280>
   1a508:	mov	r4, #1
   1a50c:	mov	r9, #0
   1a510:	str	r4, [sp, #4]
   1a514:	b	1a524 <__assert_fail@plt+0x8ee8>
   1a518:	mov	r9, r0
   1a51c:	cmp	sl, #0
   1a520:	beq	1a8b4 <__assert_fail@plt+0x9278>
   1a524:	ldrb	r5, [r6]
   1a528:	cmp	r5, #0
   1a52c:	beq	1a8b4 <__assert_fail@plt+0x9278>
   1a530:	mov	r0, sl
   1a534:	mov	r1, r5
   1a538:	bl	114ec <strchr@plt>
   1a53c:	cmp	r0, #0
   1a540:	beq	1a7cc <__assert_fail@plt+0x9190>
   1a544:	sub	r0, r5, #69	; 0x45
   1a548:	mov	r7, #1024	; 0x400
   1a54c:	cmp	r0, #21
   1a550:	bhi	1a568 <__assert_fail@plt+0x8f2c>
   1a554:	movw	r2, #35141	; 0x8945
   1a558:	mov	r1, #1
   1a55c:	movt	r2, #48	; 0x30
   1a560:	tst	r2, r1, lsl r0
   1a564:	bne	1a584 <__assert_fail@plt+0x8f48>
   1a568:	sub	r0, r5, #103	; 0x67
   1a56c:	cmp	r0, #13
   1a570:	bhi	1a5b8 <__assert_fail@plt+0x8f7c>
   1a574:	mov	r1, #1
   1a578:	movw	r2, #8273	; 0x2051
   1a57c:	tst	r2, r1, lsl r0
   1a580:	beq	1a5b8 <__assert_fail@plt+0x8f7c>
   1a584:	mov	r0, sl
   1a588:	mov	r1, #48	; 0x30
   1a58c:	bl	114ec <strchr@plt>
   1a590:	cmp	r0, #0
   1a594:	beq	1a5b8 <__assert_fail@plt+0x8f7c>
   1a598:	ldrb	r0, [r6, #1]
   1a59c:	mov	sl, #1
   1a5a0:	cmp	r0, #66	; 0x42
   1a5a4:	cmpne	r0, #68	; 0x44
   1a5a8:	bne	1a698 <__assert_fail@plt+0x905c>
   1a5ac:	mov	sl, #2
   1a5b0:	mov	r7, #1000	; 0x3e8
   1a5b4:	b	1a5bc <__assert_fail@plt+0x8f80>
   1a5b8:	mov	sl, #1
   1a5bc:	cmp	r5, #89	; 0x59
   1a5c0:	bgt	1a628 <__assert_fail@plt+0x8fec>
   1a5c4:	sub	r0, r5, #66	; 0x42
   1a5c8:	cmp	r0, #14
   1a5cc:	bhi	1a6b4 <__assert_fail@plt+0x9078>
   1a5d0:	add	r1, pc, #0
   1a5d4:	ldr	pc, [r1, r0, lsl #2]
   1a5d8:	andeq	sl, r1, r4, lsl r6
   1a5dc:	andeq	sl, r1, ip, asr #15
   1a5e0:	andeq	sl, r1, ip, asr #15
   1a5e4:	ldrdeq	sl, [r1], -r8
   1a5e8:	andeq	sl, r1, ip, asr #15
   1a5ec:	andeq	sl, r1, r0, lsl r7
   1a5f0:	andeq	sl, r1, ip, asr #15
   1a5f4:	andeq	sl, r1, ip, asr #15
   1a5f8:	andeq	sl, r1, ip, asr #15
   1a5fc:	andeq	sl, r1, r8, lsr r7
   1a600:	andeq	sl, r1, ip, asr #15
   1a604:	andeq	sl, r1, ip, asr #14
   1a608:	andeq	sl, r1, ip, asr #15
   1a60c:	andeq	sl, r1, ip, asr #15
   1a610:	andeq	sl, r1, r0, lsl #16
   1a614:	cmn	r4, #1
   1a618:	ble	1a828 <__assert_fail@plt+0x91ec>
   1a61c:	cmp	r4, #2097152	; 0x200000
   1a620:	blt	1a83c <__assert_fail@plt+0x9200>
   1a624:	b	1a874 <__assert_fail@plt+0x9238>
   1a628:	cmp	r5, #115	; 0x73
   1a62c:	bgt	1a6ec <__assert_fail@plt+0x90b0>
   1a630:	sub	r0, r5, #98	; 0x62
   1a634:	cmp	r0, #11
   1a638:	bhi	1a79c <__assert_fail@plt+0x9160>
   1a63c:	add	r1, pc, #4
   1a640:	mov	r5, #0
   1a644:	ldr	pc, [r1, r0, lsl #2]
   1a648:	andeq	sl, r1, r8, ror r6
   1a64c:	muleq	r1, r4, r8
   1a650:	andeq	sl, r1, ip, asr #15
   1a654:	andeq	sl, r1, ip, asr #15
   1a658:	andeq	sl, r1, ip, asr #15
   1a65c:	andeq	sl, r1, r0, lsl r7
   1a660:	andeq	sl, r1, ip, asr #15
   1a664:	andeq	sl, r1, ip, asr #15
   1a668:	andeq	sl, r1, ip, asr #15
   1a66c:	andeq	sl, r1, r8, lsr r7
   1a670:	andeq	sl, r1, ip, asr #15
   1a674:	andeq	sl, r1, ip, asr #14
   1a678:	cmn	r4, #1
   1a67c:	ble	1a844 <__assert_fail@plt+0x9208>
   1a680:	movw	r0, #65535	; 0xffff
   1a684:	movt	r0, #31
   1a688:	orr	r0, r0, #2097152	; 0x200000
   1a68c:	cmp	r4, r0
   1a690:	ble	1a858 <__assert_fail@plt+0x921c>
   1a694:	b	1a874 <__assert_fail@plt+0x9238>
   1a698:	cmp	r0, #105	; 0x69
   1a69c:	bne	1a5bc <__assert_fail@plt+0x8f80>
   1a6a0:	ldrb	r0, [r6, #2]
   1a6a4:	mov	sl, #1
   1a6a8:	cmp	r0, #66	; 0x42
   1a6ac:	movweq	sl, #3
   1a6b0:	b	1a5bc <__assert_fail@plt+0x8f80>
   1a6b4:	cmp	r5, #84	; 0x54
   1a6b8:	beq	1a774 <__assert_fail@plt+0x9138>
   1a6bc:	cmp	r5, #89	; 0x59
   1a6c0:	bne	1a7cc <__assert_fail@plt+0x9190>
   1a6c4:	mov	r5, #0
   1a6c8:	mvn	r6, #7
   1a6cc:	add	r4, sp, #4
   1a6d0:	mov	r0, r4
   1a6d4:	mov	r1, r7
   1a6d8:	bl	1a8e8 <__assert_fail@plt+0x92ac>
   1a6dc:	orr	r5, r0, r5
   1a6e0:	adds	r6, r6, #1
   1a6e4:	bcc	1a6d0 <__assert_fail@plt+0x9094>
   1a6e8:	b	1a894 <__assert_fail@plt+0x9258>
   1a6ec:	cmp	r5, #116	; 0x74
   1a6f0:	beq	1a774 <__assert_fail@plt+0x9138>
   1a6f4:	cmp	r5, #119	; 0x77
   1a6f8:	bne	1a7cc <__assert_fail@plt+0x9190>
   1a6fc:	cmn	r4, #1
   1a700:	ble	1a860 <__assert_fail@plt+0x9224>
   1a704:	cmp	r4, #1073741824	; 0x40000000
   1a708:	bge	1a874 <__assert_fail@plt+0x9238>
   1a70c:	b	1a888 <__assert_fail@plt+0x924c>
   1a710:	mov	r5, #0
   1a714:	mvn	r6, #2
   1a718:	add	r4, sp, #4
   1a71c:	mov	r0, r4
   1a720:	mov	r1, r7
   1a724:	bl	1a8e8 <__assert_fail@plt+0x92ac>
   1a728:	orr	r5, r0, r5
   1a72c:	adds	r6, r6, #1
   1a730:	bcc	1a71c <__assert_fail@plt+0x90e0>
   1a734:	b	1a894 <__assert_fail@plt+0x9258>
   1a738:	add	r0, sp, #4
   1a73c:	mov	r1, r7
   1a740:	bl	1a8e8 <__assert_fail@plt+0x92ac>
   1a744:	mov	r5, r0
   1a748:	b	1a894 <__assert_fail@plt+0x9258>
   1a74c:	mov	r5, #0
   1a750:	mvn	r6, #1
   1a754:	add	r4, sp, #4
   1a758:	mov	r0, r4
   1a75c:	mov	r1, r7
   1a760:	bl	1a8e8 <__assert_fail@plt+0x92ac>
   1a764:	orr	r5, r0, r5
   1a768:	adds	r6, r6, #1
   1a76c:	bcc	1a758 <__assert_fail@plt+0x911c>
   1a770:	b	1a894 <__assert_fail@plt+0x9258>
   1a774:	mov	r5, #0
   1a778:	mvn	r6, #3
   1a77c:	add	r4, sp, #4
   1a780:	mov	r0, r4
   1a784:	mov	r1, r7
   1a788:	bl	1a8e8 <__assert_fail@plt+0x92ac>
   1a78c:	orr	r5, r0, r5
   1a790:	adds	r6, r6, #1
   1a794:	bcc	1a780 <__assert_fail@plt+0x9144>
   1a798:	b	1a894 <__assert_fail@plt+0x9258>
   1a79c:	cmp	r5, #90	; 0x5a
   1a7a0:	bne	1a7cc <__assert_fail@plt+0x9190>
   1a7a4:	mov	r5, #0
   1a7a8:	mvn	r6, #6
   1a7ac:	add	r4, sp, #4
   1a7b0:	mov	r0, r4
   1a7b4:	mov	r1, r7
   1a7b8:	bl	1a8e8 <__assert_fail@plt+0x92ac>
   1a7bc:	orr	r5, r0, r5
   1a7c0:	adds	r6, r6, #1
   1a7c4:	bcc	1a7b0 <__assert_fail@plt+0x9174>
   1a7c8:	b	1a894 <__assert_fail@plt+0x9258>
   1a7cc:	ldr	r0, [sp]
   1a7d0:	orr	r9, r9, #2
   1a7d4:	b	1a8b8 <__assert_fail@plt+0x927c>
   1a7d8:	mov	r5, #0
   1a7dc:	mvn	r6, #5
   1a7e0:	add	r4, sp, #4
   1a7e4:	mov	r0, r4
   1a7e8:	mov	r1, r7
   1a7ec:	bl	1a8e8 <__assert_fail@plt+0x92ac>
   1a7f0:	orr	r5, r0, r5
   1a7f4:	adds	r6, r6, #1
   1a7f8:	bcc	1a7e4 <__assert_fail@plt+0x91a8>
   1a7fc:	b	1a894 <__assert_fail@plt+0x9258>
   1a800:	mov	r5, #0
   1a804:	mvn	r6, #4
   1a808:	add	r4, sp, #4
   1a80c:	mov	r0, r4
   1a810:	mov	r1, r7
   1a814:	bl	1a8e8 <__assert_fail@plt+0x92ac>
   1a818:	orr	r5, r0, r5
   1a81c:	adds	r6, r6, #1
   1a820:	bcc	1a80c <__assert_fail@plt+0x91d0>
   1a824:	b	1a894 <__assert_fail@plt+0x9258>
   1a828:	beq	1a83c <__assert_fail@plt+0x9200>
   1a82c:	mov	r0, #-2147483648	; 0x80000000
   1a830:	sdiv	r0, r0, r4
   1a834:	cmp	r0, #1024	; 0x400
   1a838:	blt	1a874 <__assert_fail@plt+0x9238>
   1a83c:	lsl	r0, r4, #10
   1a840:	b	1a88c <__assert_fail@plt+0x9250>
   1a844:	beq	1a858 <__assert_fail@plt+0x921c>
   1a848:	mov	r0, #-2147483648	; 0x80000000
   1a84c:	sdiv	r0, r0, r4
   1a850:	cmp	r0, #512	; 0x200
   1a854:	blt	1a874 <__assert_fail@plt+0x9238>
   1a858:	lsl	r0, r4, #9
   1a85c:	b	1a88c <__assert_fail@plt+0x9250>
   1a860:	beq	1a888 <__assert_fail@plt+0x924c>
   1a864:	mov	r0, #-2147483648	; 0x80000000
   1a868:	sdiv	r0, r0, r4
   1a86c:	cmp	r0, #2
   1a870:	bge	1a888 <__assert_fail@plt+0x924c>
   1a874:	cmp	r4, #0
   1a878:	mvn	r0, #-2147483648	; 0x80000000
   1a87c:	mov	r5, #1
   1a880:	movmi	r0, #-2147483648	; 0x80000000
   1a884:	b	1a890 <__assert_fail@plt+0x9254>
   1a888:	lsl	r0, r4, #1
   1a88c:	mov	r5, #0
   1a890:	str	r0, [sp, #4]
   1a894:	ldr	r0, [r8]
   1a898:	orr	r9, r5, r9
   1a89c:	add	r1, r0, sl
   1a8a0:	str	r1, [r8]
   1a8a4:	ldrb	r0, [r0, sl]
   1a8a8:	ldr	r4, [sp, #4]
   1a8ac:	cmp	r0, #0
   1a8b0:	orrne	r9, r9, #2
   1a8b4:	ldr	r0, [sp]
   1a8b8:	str	r4, [r0]
   1a8bc:	mov	r0, r9
   1a8c0:	sub	sp, fp, #28
   1a8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8c8:	movw	r0, #54125	; 0xd36d
   1a8cc:	movw	r1, #54165	; 0xd395
   1a8d0:	movw	r3, #54257	; 0xd3f1
   1a8d4:	mov	r2, #85	; 0x55
   1a8d8:	movt	r0, #1
   1a8dc:	movt	r1, #1
   1a8e0:	movt	r3, #1
   1a8e4:	bl	1163c <__assert_fail@plt>
   1a8e8:	cmn	r1, #1
   1a8ec:	ble	1a910 <__assert_fail@plt+0x92d4>
   1a8f0:	ldr	r2, [r0]
   1a8f4:	cmp	r1, #0
   1a8f8:	beq	1a978 <__assert_fail@plt+0x933c>
   1a8fc:	cmn	r2, #1
   1a900:	ble	1a938 <__assert_fail@plt+0x92fc>
   1a904:	mvn	r3, #-2147483648	; 0x80000000
   1a908:	udiv	r3, r3, r1
   1a90c:	b	1a92c <__assert_fail@plt+0x92f0>
   1a910:	ldr	r2, [r0]
   1a914:	cmn	r2, #1
   1a918:	ble	1a950 <__assert_fail@plt+0x9314>
   1a91c:	cmn	r1, #1
   1a920:	beq	1a978 <__assert_fail@plt+0x933c>
   1a924:	mov	r3, #-2147483648	; 0x80000000
   1a928:	sdiv	r3, r3, r1
   1a92c:	cmp	r3, r2
   1a930:	blt	1a960 <__assert_fail@plt+0x9324>
   1a934:	b	1a978 <__assert_fail@plt+0x933c>
   1a938:	beq	1a974 <__assert_fail@plt+0x9338>
   1a93c:	mov	r3, #-2147483648	; 0x80000000
   1a940:	sdiv	r3, r3, r2
   1a944:	cmp	r3, r1
   1a948:	blt	1a960 <__assert_fail@plt+0x9324>
   1a94c:	b	1a978 <__assert_fail@plt+0x933c>
   1a950:	mvn	r3, #-2147483648	; 0x80000000
   1a954:	sdiv	r3, r3, r1
   1a958:	cmp	r2, r3
   1a95c:	bge	1a978 <__assert_fail@plt+0x933c>
   1a960:	cmp	r2, #0
   1a964:	mvn	r3, #-2147483648	; 0x80000000
   1a968:	mov	r1, #1
   1a96c:	movmi	r3, #-2147483648	; 0x80000000
   1a970:	b	1a980 <__assert_fail@plt+0x9344>
   1a974:	mvn	r2, #0
   1a978:	mul	r3, r2, r1
   1a97c:	mov	r1, #0
   1a980:	str	r3, [r0]
   1a984:	mov	r0, r1
   1a988:	bx	lr
   1a98c:	push	{fp, lr}
   1a990:	mov	fp, sp
   1a994:	sub	sp, sp, #8
   1a998:	movw	ip, #57724	; 0xe17c
   1a99c:	movt	ip, #2
   1a9a0:	ldr	ip, [ip]
   1a9a4:	str	ip, [sp, #4]
   1a9a8:	ldr	ip, [fp, #8]
   1a9ac:	str	ip, [sp]
   1a9b0:	bl	1a9b8 <__assert_fail@plt+0x937c>
   1a9b4:	bl	11618 <abort@plt>
   1a9b8:	push	{r4, r5, r6, r7, fp, lr}
   1a9bc:	add	fp, sp, #16
   1a9c0:	sub	sp, sp, #16
   1a9c4:	sub	r0, r0, #1
   1a9c8:	cmp	r0, #4
   1a9cc:	bcs	1aa4c <__assert_fail@plt+0x9410>
   1a9d0:	mov	r5, r1
   1a9d4:	movw	r1, #54424	; 0xd498
   1a9d8:	ldr	r4, [fp, #12]
   1a9dc:	ldr	r6, [fp, #8]
   1a9e0:	movt	r1, #1
   1a9e4:	cmn	r5, #1
   1a9e8:	ldr	r1, [r1, r0, lsl #2]
   1a9ec:	ble	1aa00 <__assert_fail@plt+0x93c4>
   1a9f0:	ldr	r7, [r3, r5, lsl #4]
   1a9f4:	movw	r5, #54328	; 0xd438
   1a9f8:	movt	r5, #1
   1a9fc:	b	1aa1c <__assert_fail@plt+0x93e0>
   1aa00:	mov	r0, #0
   1aa04:	add	r7, sp, #14
   1aa08:	strb	r0, [sp, #15]
   1aa0c:	movw	r0, #54328	; 0xd438
   1aa10:	strb	r2, [sp, #14]
   1aa14:	movt	r0, #1
   1aa18:	sub	r5, r0, r5
   1aa1c:	mov	r0, #0
   1aa20:	mov	r2, #5
   1aa24:	bl	113a8 <dcgettext@plt>
   1aa28:	mov	r2, r0
   1aa2c:	mov	r0, r4
   1aa30:	mov	r1, #0
   1aa34:	mov	r3, r5
   1aa38:	str	r7, [sp]
   1aa3c:	str	r6, [sp, #4]
   1aa40:	bl	11444 <error@plt>
   1aa44:	sub	sp, fp, #16
   1aa48:	pop	{r4, r5, r6, r7, fp, pc}
   1aa4c:	bl	11618 <abort@plt>
   1aa50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa54:	add	fp, sp, #28
   1aa58:	sub	sp, sp, #20
   1aa5c:	cmp	r2, #37	; 0x25
   1aa60:	bcs	1b0ec <__assert_fail@plt+0x9ab0>
   1aa64:	mov	r8, r3
   1aa68:	mov	r5, r2
   1aa6c:	mov	r6, r1
   1aa70:	mov	r4, r0
   1aa74:	bl	11510 <__errno_location@plt>
   1aa78:	mov	r7, r0
   1aa7c:	mov	r0, #0
   1aa80:	str	r0, [r7]
   1aa84:	bl	114bc <__ctype_b_loc@plt>
   1aa88:	ldr	r1, [r0]
   1aa8c:	mov	r2, r4
   1aa90:	ldrb	r0, [r2], #1
   1aa94:	add	r3, r1, r0, lsl #1
   1aa98:	ldrb	r3, [r3, #1]
   1aa9c:	tst	r3, #32
   1aaa0:	bne	1aa90 <__assert_fail@plt+0x9454>
   1aaa4:	cmp	r6, #0
   1aaa8:	add	sl, sp, #16
   1aaac:	movne	sl, r6
   1aab0:	mov	r6, #4
   1aab4:	cmp	r0, #45	; 0x2d
   1aab8:	beq	1b0e0 <__assert_fail@plt+0x9aa4>
   1aabc:	mov	r0, r4
   1aac0:	mov	r1, sl
   1aac4:	mov	r2, r5
   1aac8:	str	r8, [sp, #12]
   1aacc:	bl	11558 <strtoumax@plt>
   1aad0:	ldr	r5, [sl]
   1aad4:	cmp	r5, r4
   1aad8:	beq	1ab00 <__assert_fail@plt+0x94c4>
   1aadc:	mov	r8, r0
   1aae0:	ldr	r0, [r7]
   1aae4:	mov	r9, r1
   1aae8:	cmp	r0, #0
   1aaec:	beq	1ab34 <__assert_fail@plt+0x94f8>
   1aaf0:	cmp	r0, #34	; 0x22
   1aaf4:	bne	1b0e0 <__assert_fail@plt+0x9aa4>
   1aaf8:	mov	r6, #1
   1aafc:	b	1ab38 <__assert_fail@plt+0x94fc>
   1ab00:	ldr	r0, [fp, #8]
   1ab04:	cmp	r0, #0
   1ab08:	beq	1b0e0 <__assert_fail@plt+0x9aa4>
   1ab0c:	ldrb	r1, [r4]
   1ab10:	cmp	r1, #0
   1ab14:	beq	1b0e0 <__assert_fail@plt+0x9aa4>
   1ab18:	bl	114ec <strchr@plt>
   1ab1c:	cmp	r0, #0
   1ab20:	beq	1b0e0 <__assert_fail@plt+0x9aa4>
   1ab24:	mov	r6, #0
   1ab28:	mov	r8, #1
   1ab2c:	mov	r9, #0
   1ab30:	b	1ab44 <__assert_fail@plt+0x9508>
   1ab34:	mov	r6, r0
   1ab38:	ldr	r0, [fp, #8]
   1ab3c:	cmp	r0, #0
   1ab40:	beq	1b0d8 <__assert_fail@plt+0x9a9c>
   1ab44:	ldrb	r7, [r5]
   1ab48:	cmp	r7, #0
   1ab4c:	beq	1b0d8 <__assert_fail@plt+0x9a9c>
   1ab50:	ldr	r0, [fp, #8]
   1ab54:	mov	r1, r7
   1ab58:	bl	114ec <strchr@plt>
   1ab5c:	cmp	r0, #0
   1ab60:	beq	1ac68 <__assert_fail@plt+0x962c>
   1ab64:	sub	r0, r7, #69	; 0x45
   1ab68:	mov	r1, #1
   1ab6c:	mov	r3, #0
   1ab70:	mov	r4, #1024	; 0x400
   1ab74:	cmp	r0, #21
   1ab78:	str	r1, [sp, #8]
   1ab7c:	bhi	1ab94 <__assert_fail@plt+0x9558>
   1ab80:	movw	r2, #35141	; 0x8945
   1ab84:	mov	r1, #1
   1ab88:	movt	r2, #48	; 0x30
   1ab8c:	tst	r2, r1, lsl r0
   1ab90:	bne	1abb0 <__assert_fail@plt+0x9574>
   1ab94:	sub	r0, r7, #103	; 0x67
   1ab98:	cmp	r0, #13
   1ab9c:	bhi	1abe4 <__assert_fail@plt+0x95a8>
   1aba0:	mov	r1, #1
   1aba4:	movw	r2, #8273	; 0x2051
   1aba8:	tst	r2, r1, lsl r0
   1abac:	beq	1abe4 <__assert_fail@plt+0x95a8>
   1abb0:	ldr	r0, [fp, #8]
   1abb4:	mov	r1, #48	; 0x30
   1abb8:	bl	114ec <strchr@plt>
   1abbc:	cmp	r0, #0
   1abc0:	beq	1abe0 <__assert_fail@plt+0x95a4>
   1abc4:	ldrb	r0, [r5, #1]
   1abc8:	cmp	r0, #66	; 0x42
   1abcc:	cmpne	r0, #68	; 0x44
   1abd0:	bne	1acf8 <__assert_fail@plt+0x96bc>
   1abd4:	mov	r4, #1000	; 0x3e8
   1abd8:	mov	r0, #2
   1abdc:	str	r0, [sp, #8]
   1abe0:	mov	r3, #0
   1abe4:	cmp	r7, #89	; 0x59
   1abe8:	stm	sp, {r5, r6}
   1abec:	bgt	1ac74 <__assert_fail@plt+0x9638>
   1abf0:	sub	r0, r7, #66	; 0x42
   1abf4:	cmp	r0, #14
   1abf8:	bhi	1ad1c <__assert_fail@plt+0x96e0>
   1abfc:	add	r1, pc, #0
   1ac00:	ldr	pc, [r1, r0, lsl #2]
   1ac04:	andeq	sl, r1, r0, asr #24
   1ac08:	andeq	sl, r1, ip, asr #31
   1ac0c:	andeq	sl, r1, ip, asr #31
   1ac10:	andeq	sl, r1, r0, ror #31
   1ac14:	andeq	sl, r1, ip, asr #31
   1ac18:	ldrdeq	sl, [r1], -r0
   1ac1c:	andeq	sl, r1, ip, asr #31
   1ac20:	andeq	sl, r1, ip, asr #31
   1ac24:	andeq	sl, r1, ip, asr #31
   1ac28:	andeq	sl, r1, ip, lsr lr
   1ac2c:	andeq	sl, r1, ip, asr #31
   1ac30:	andeq	sl, r1, r0, lsl #29
   1ac34:	andeq	sl, r1, ip, asr #31
   1ac38:	andeq	sl, r1, ip, asr #31
   1ac3c:	andeq	fp, r1, ip, asr #32
   1ac40:	mov	r1, #0
   1ac44:	lsl	r3, r9, #10
   1ac48:	lsl	r0, r8, #10
   1ac4c:	lsr	r2, r9, #22
   1ac50:	cmp	r1, r9, lsr #22
   1ac54:	orr	r3, r3, r8, lsr #22
   1ac58:	mvnne	r0, #0
   1ac5c:	movwne	r2, #1
   1ac60:	cmp	r1, r9, lsr #22
   1ac64:	b	1ace8 <__assert_fail@plt+0x96ac>
   1ac68:	ldr	r0, [sp, #12]
   1ac6c:	orr	r6, r6, #2
   1ac70:	b	1b0dc <__assert_fail@plt+0x9aa0>
   1ac74:	cmp	r7, #115	; 0x73
   1ac78:	bgt	1ad98 <__assert_fail@plt+0x975c>
   1ac7c:	sub	r0, r7, #98	; 0x62
   1ac80:	cmp	r0, #11
   1ac84:	bhi	1af58 <__assert_fail@plt+0x991c>
   1ac88:	add	r1, pc, #4
   1ac8c:	mov	r2, #0
   1ac90:	ldr	pc, [r1, r0, lsl #2]
   1ac94:	andeq	sl, r1, r4, asr #25
   1ac98:	strheq	fp, [r1], -r4
   1ac9c:	andeq	sl, r1, ip, asr #31
   1aca0:	andeq	sl, r1, ip, asr #31
   1aca4:	andeq	sl, r1, ip, asr #31
   1aca8:	ldrdeq	sl, [r1], -r0
   1acac:	andeq	sl, r1, ip, asr #31
   1acb0:	andeq	sl, r1, ip, asr #31
   1acb4:	andeq	sl, r1, ip, asr #31
   1acb8:	andeq	sl, r1, ip, lsr lr
   1acbc:	andeq	sl, r1, ip, asr #31
   1acc0:	andeq	sl, r1, r0, lsl #29
   1acc4:	mov	r1, #0
   1acc8:	lsl	r3, r9, #9
   1accc:	lsl	r0, r8, #9
   1acd0:	lsr	r2, r9, #23
   1acd4:	cmp	r1, r9, lsr #23
   1acd8:	orr	r3, r3, r8, lsr #23
   1acdc:	mvnne	r0, #0
   1ace0:	movwne	r2, #1
   1ace4:	cmp	r1, r9, lsr #23
   1ace8:	mvnne	r3, #0
   1acec:	mov	r8, r0
   1acf0:	mov	r9, r3
   1acf4:	b	1b0b4 <__assert_fail@plt+0x9a78>
   1acf8:	cmp	r0, #105	; 0x69
   1acfc:	mov	r3, #0
   1ad00:	bne	1abe4 <__assert_fail@plt+0x95a8>
   1ad04:	ldrb	r0, [r5, #2]
   1ad08:	mov	r1, #1
   1ad0c:	cmp	r0, #66	; 0x42
   1ad10:	movweq	r1, #3
   1ad14:	str	r1, [sp, #8]
   1ad18:	b	1abe4 <__assert_fail@plt+0x95a8>
   1ad1c:	cmp	r7, #84	; 0x54
   1ad20:	beq	1aeec <__assert_fail@plt+0x98b0>
   1ad24:	cmp	r7, #89	; 0x59
   1ad28:	bne	1afcc <__assert_fail@plt+0x9990>
   1ad2c:	mvn	r0, #0
   1ad30:	mvn	r1, #0
   1ad34:	mov	r2, r4
   1ad38:	mov	r5, r3
   1ad3c:	bl	1b5e4 <__assert_fail@plt+0x9fa8>
   1ad40:	mov	ip, r5
   1ad44:	mvn	lr, #0
   1ad48:	mov	r2, #0
   1ad4c:	mvn	r3, #7
   1ad50:	mov	r5, r8
   1ad54:	mov	r7, r9
   1ad58:	umull	r8, r6, r5, r4
   1ad5c:	mvn	r9, #0
   1ad60:	mla	r6, r5, ip, r6
   1ad64:	subs	r5, r0, r5
   1ad68:	sbcs	r5, r1, r7
   1ad6c:	mov	r5, #0
   1ad70:	movwcc	r5, #1
   1ad74:	cmp	r5, #0
   1ad78:	mlaeq	r9, r7, r4, r6
   1ad7c:	movne	r8, lr
   1ad80:	orrne	r2, r2, #1
   1ad84:	adds	r3, r3, #1
   1ad88:	mov	r5, r8
   1ad8c:	mov	r7, r9
   1ad90:	bcc	1ad58 <__assert_fail@plt+0x971c>
   1ad94:	b	1b0b4 <__assert_fail@plt+0x9a78>
   1ad98:	cmp	r7, #116	; 0x74
   1ad9c:	beq	1aeec <__assert_fail@plt+0x98b0>
   1ada0:	cmp	r7, #119	; 0x77
   1ada4:	bne	1afcc <__assert_fail@plt+0x9990>
   1ada8:	lsl	r1, r9, #1
   1adac:	cmp	r9, #0
   1adb0:	lsl	r0, r8, #1
   1adb4:	lsr	r2, r9, #31
   1adb8:	orr	r1, r1, r8, lsr #31
   1adbc:	mvnmi	r0, #0
   1adc0:	mvnmi	r1, #0
   1adc4:	mov	r8, r0
   1adc8:	mov	r9, r1
   1adcc:	b	1b0b4 <__assert_fail@plt+0x9a78>
   1add0:	mvn	r0, #0
   1add4:	mvn	r1, #0
   1add8:	mov	r2, r4
   1addc:	mov	r5, r3
   1ade0:	bl	1b5e4 <__assert_fail@plt+0x9fa8>
   1ade4:	mov	ip, r5
   1ade8:	mvn	lr, #0
   1adec:	mov	r2, #0
   1adf0:	mvn	r3, #2
   1adf4:	mov	r6, r8
   1adf8:	mov	r5, r9
   1adfc:	umull	r8, r7, r6, r4
   1ae00:	mvn	r9, #0
   1ae04:	mla	r7, r6, ip, r7
   1ae08:	subs	r6, r0, r6
   1ae0c:	sbcs	r6, r1, r5
   1ae10:	mov	r6, #0
   1ae14:	movwcc	r6, #1
   1ae18:	cmp	r6, #0
   1ae1c:	mlaeq	r9, r5, r4, r7
   1ae20:	movne	r8, lr
   1ae24:	orrne	r2, r2, #1
   1ae28:	adds	r3, r3, #1
   1ae2c:	mov	r6, r8
   1ae30:	mov	r5, r9
   1ae34:	bcc	1adfc <__assert_fail@plt+0x97c0>
   1ae38:	b	1b0b4 <__assert_fail@plt+0x9a78>
   1ae3c:	mvn	r0, #0
   1ae40:	mvn	r1, #0
   1ae44:	mov	r2, r4
   1ae48:	mov	r5, r3
   1ae4c:	bl	1b5e4 <__assert_fail@plt+0x9fa8>
   1ae50:	subs	r0, r0, r8
   1ae54:	mov	r2, #0
   1ae58:	sbcs	r0, r1, r9
   1ae5c:	umull	r0, r1, r8, r4
   1ae60:	movwcc	r2, #1
   1ae64:	cmp	r2, #0
   1ae68:	mla	r1, r8, r5, r1
   1ae6c:	mvnne	r0, #0
   1ae70:	mla	r9, r9, r4, r1
   1ae74:	mvnne	r9, #0
   1ae78:	mov	r8, r0
   1ae7c:	b	1b0b4 <__assert_fail@plt+0x9a78>
   1ae80:	mvn	r0, #0
   1ae84:	mvn	r1, #0
   1ae88:	mov	r2, r4
   1ae8c:	mov	r5, r3
   1ae90:	bl	1b5e4 <__assert_fail@plt+0x9fa8>
   1ae94:	mov	ip, r5
   1ae98:	mvn	lr, #0
   1ae9c:	mov	r2, #0
   1aea0:	mvn	r3, #1
   1aea4:	mov	r6, r8
   1aea8:	mov	r5, r9
   1aeac:	umull	r8, r7, r6, r4
   1aeb0:	mvn	r9, #0
   1aeb4:	mla	r7, r6, ip, r7
   1aeb8:	subs	r6, r0, r6
   1aebc:	sbcs	r6, r1, r5
   1aec0:	mov	r6, #0
   1aec4:	movwcc	r6, #1
   1aec8:	cmp	r6, #0
   1aecc:	mlaeq	r9, r5, r4, r7
   1aed0:	movne	r8, lr
   1aed4:	orrne	r2, r2, #1
   1aed8:	adds	r3, r3, #1
   1aedc:	mov	r6, r8
   1aee0:	mov	r5, r9
   1aee4:	bcc	1aeac <__assert_fail@plt+0x9870>
   1aee8:	b	1b0b4 <__assert_fail@plt+0x9a78>
   1aeec:	mvn	r0, #0
   1aef0:	mvn	r1, #0
   1aef4:	mov	r2, r4
   1aef8:	mov	r5, r3
   1aefc:	bl	1b5e4 <__assert_fail@plt+0x9fa8>
   1af00:	mov	ip, r5
   1af04:	mvn	lr, #0
   1af08:	mov	r2, #0
   1af0c:	mvn	r3, #3
   1af10:	mov	r6, r8
   1af14:	mov	r5, r9
   1af18:	umull	r8, r7, r6, r4
   1af1c:	mvn	r9, #0
   1af20:	mla	r7, r6, ip, r7
   1af24:	subs	r6, r0, r6
   1af28:	sbcs	r6, r1, r5
   1af2c:	mov	r6, #0
   1af30:	movwcc	r6, #1
   1af34:	cmp	r6, #0
   1af38:	mlaeq	r9, r5, r4, r7
   1af3c:	movne	r8, lr
   1af40:	orrne	r2, r2, #1
   1af44:	adds	r3, r3, #1
   1af48:	mov	r6, r8
   1af4c:	mov	r5, r9
   1af50:	bcc	1af18 <__assert_fail@plt+0x98dc>
   1af54:	b	1b0b4 <__assert_fail@plt+0x9a78>
   1af58:	cmp	r7, #90	; 0x5a
   1af5c:	bne	1afcc <__assert_fail@plt+0x9990>
   1af60:	mvn	r0, #0
   1af64:	mvn	r1, #0
   1af68:	mov	r2, r4
   1af6c:	mov	r5, r3
   1af70:	bl	1b5e4 <__assert_fail@plt+0x9fa8>
   1af74:	mov	ip, r5
   1af78:	mvn	lr, #0
   1af7c:	mov	r2, #0
   1af80:	mvn	r3, #6
   1af84:	mov	r5, r8
   1af88:	mov	r7, r9
   1af8c:	umull	r8, r6, r5, r4
   1af90:	mvn	r9, #0
   1af94:	mla	r6, r5, ip, r6
   1af98:	subs	r5, r0, r5
   1af9c:	sbcs	r5, r1, r7
   1afa0:	mov	r5, #0
   1afa4:	movwcc	r5, #1
   1afa8:	cmp	r5, #0
   1afac:	mlaeq	r9, r7, r4, r6
   1afb0:	movne	r8, lr
   1afb4:	orrne	r2, r2, #1
   1afb8:	adds	r3, r3, #1
   1afbc:	mov	r5, r8
   1afc0:	mov	r7, r9
   1afc4:	bcc	1af8c <__assert_fail@plt+0x9950>
   1afc8:	b	1b0b4 <__assert_fail@plt+0x9a78>
   1afcc:	ldr	r0, [sp, #12]
   1afd0:	strd	r8, [r0]
   1afd4:	ldr	r6, [sp, #4]
   1afd8:	orr	r6, r6, #2
   1afdc:	b	1b0e0 <__assert_fail@plt+0x9aa4>
   1afe0:	mvn	r0, #0
   1afe4:	mvn	r1, #0
   1afe8:	mov	r2, r4
   1afec:	mov	r5, r3
   1aff0:	bl	1b5e4 <__assert_fail@plt+0x9fa8>
   1aff4:	mov	ip, r5
   1aff8:	mvn	lr, #0
   1affc:	mov	r2, #0
   1b000:	mvn	r3, #5
   1b004:	mov	r5, r8
   1b008:	mov	r7, r9
   1b00c:	umull	r8, r6, r5, r4
   1b010:	mvn	r9, #0
   1b014:	mla	r6, r5, ip, r6
   1b018:	subs	r5, r0, r5
   1b01c:	sbcs	r5, r1, r7
   1b020:	mov	r5, #0
   1b024:	movwcc	r5, #1
   1b028:	cmp	r5, #0
   1b02c:	mlaeq	r9, r7, r4, r6
   1b030:	movne	r8, lr
   1b034:	orrne	r2, r2, #1
   1b038:	adds	r3, r3, #1
   1b03c:	mov	r5, r8
   1b040:	mov	r7, r9
   1b044:	bcc	1b00c <__assert_fail@plt+0x99d0>
   1b048:	b	1b0b4 <__assert_fail@plt+0x9a78>
   1b04c:	mvn	r0, #0
   1b050:	mvn	r1, #0
   1b054:	mov	r2, r4
   1b058:	mov	r5, r3
   1b05c:	bl	1b5e4 <__assert_fail@plt+0x9fa8>
   1b060:	mov	ip, r5
   1b064:	mvn	lr, #0
   1b068:	mov	r2, #0
   1b06c:	mvn	r3, #4
   1b070:	mov	r5, r8
   1b074:	mov	r7, r9
   1b078:	umull	r8, r6, r5, r4
   1b07c:	mvn	r9, #0
   1b080:	mla	r6, r5, ip, r6
   1b084:	subs	r5, r0, r5
   1b088:	sbcs	r5, r1, r7
   1b08c:	mov	r5, #0
   1b090:	movwcc	r5, #1
   1b094:	cmp	r5, #0
   1b098:	mlaeq	r9, r7, r4, r6
   1b09c:	movne	r8, lr
   1b0a0:	orrne	r2, r2, #1
   1b0a4:	adds	r3, r3, #1
   1b0a8:	mov	r5, r8
   1b0ac:	mov	r7, r9
   1b0b0:	bcc	1b078 <__assert_fail@plt+0x9a3c>
   1b0b4:	ldr	r1, [sp]
   1b0b8:	ldr	r3, [sp, #8]
   1b0bc:	ldr	r6, [sp, #4]
   1b0c0:	add	r0, r1, r3
   1b0c4:	orr	r6, r2, r6
   1b0c8:	str	r0, [sl]
   1b0cc:	ldrb	r0, [r1, r3]
   1b0d0:	cmp	r0, #0
   1b0d4:	orrne	r6, r6, #2
   1b0d8:	ldr	r0, [sp, #12]
   1b0dc:	strd	r8, [r0]
   1b0e0:	mov	r0, r6
   1b0e4:	sub	sp, fp, #28
   1b0e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0ec:	movw	r0, #54125	; 0xd36d
   1b0f0:	movw	r1, #54163	; 0xd393
   1b0f4:	movw	r3, #54440	; 0xd4a8
   1b0f8:	mov	r2, #85	; 0x55
   1b0fc:	movt	r0, #1
   1b100:	movt	r1, #1
   1b104:	movt	r3, #1
   1b108:	bl	1163c <__assert_fail@plt>
   1b10c:	clz	r2, r1
   1b110:	clz	r3, r0
   1b114:	lsr	r2, r2, #5
   1b118:	lsr	r3, r3, #5
   1b11c:	orrs	r2, r3, r2
   1b120:	movwne	r1, #1
   1b124:	movwne	r0, #1
   1b128:	cmp	r1, #0
   1b12c:	beq	1b15c <__assert_fail@plt+0x9b20>
   1b130:	mvn	r2, #-2147483648	; 0x80000000
   1b134:	udiv	r2, r2, r1
   1b138:	cmp	r2, r0
   1b13c:	bcs	1b15c <__assert_fail@plt+0x9b20>
   1b140:	push	{fp, lr}
   1b144:	mov	fp, sp
   1b148:	bl	11510 <__errno_location@plt>
   1b14c:	mov	r1, #12
   1b150:	str	r1, [r0]
   1b154:	mov	r0, #0
   1b158:	pop	{fp, pc}
   1b15c:	b	112e8 <calloc@plt>
   1b160:	cmp	r0, #0
   1b164:	movweq	r0, #1
   1b168:	cmn	r0, #1
   1b16c:	ble	1b174 <__assert_fail@plt+0x9b38>
   1b170:	b	1145c <malloc@plt>
   1b174:	push	{fp, lr}
   1b178:	mov	fp, sp
   1b17c:	bl	11510 <__errno_location@plt>
   1b180:	mov	r1, #12
   1b184:	str	r1, [r0]
   1b188:	mov	r0, #0
   1b18c:	pop	{fp, pc}
   1b190:	push	{fp, lr}
   1b194:	mov	fp, sp
   1b198:	cmp	r0, #0
   1b19c:	beq	1b1b8 <__assert_fail@plt+0x9b7c>
   1b1a0:	cmp	r1, #0
   1b1a4:	beq	1b1c4 <__assert_fail@plt+0x9b88>
   1b1a8:	cmn	r1, #1
   1b1ac:	ble	1b1cc <__assert_fail@plt+0x9b90>
   1b1b0:	pop	{fp, lr}
   1b1b4:	b	113b4 <realloc@plt>
   1b1b8:	mov	r0, r1
   1b1bc:	pop	{fp, lr}
   1b1c0:	b	1b160 <__assert_fail@plt+0x9b24>
   1b1c4:	bl	154bc <__assert_fail@plt+0x3e80>
   1b1c8:	b	1b1d8 <__assert_fail@plt+0x9b9c>
   1b1cc:	bl	11510 <__errno_location@plt>
   1b1d0:	mov	r1, #12
   1b1d4:	str	r1, [r0]
   1b1d8:	mov	r0, #0
   1b1dc:	pop	{fp, pc}
   1b1e0:	push	{r4, r5, r6, sl, fp, lr}
   1b1e4:	add	fp, sp, #16
   1b1e8:	mov	r4, r0
   1b1ec:	bl	11420 <__fpending@plt>
   1b1f0:	mov	r5, r0
   1b1f4:	mov	r0, r4
   1b1f8:	bl	1142c <ferror_unlocked@plt>
   1b1fc:	mov	r6, r0
   1b200:	mov	r0, r4
   1b204:	bl	15318 <__assert_fail@plt+0x3cdc>
   1b208:	cmp	r6, #0
   1b20c:	beq	1b22c <__assert_fail@plt+0x9bf0>
   1b210:	mvn	r4, #0
   1b214:	cmp	r0, #0
   1b218:	bne	1b258 <__assert_fail@plt+0x9c1c>
   1b21c:	bl	11510 <__errno_location@plt>
   1b220:	mov	r1, #0
   1b224:	str	r1, [r0]
   1b228:	b	1b258 <__assert_fail@plt+0x9c1c>
   1b22c:	cmp	r0, #0
   1b230:	mov	r4, r0
   1b234:	mvnne	r4, #0
   1b238:	cmp	r5, #0
   1b23c:	bne	1b258 <__assert_fail@plt+0x9c1c>
   1b240:	cmp	r0, #0
   1b244:	beq	1b258 <__assert_fail@plt+0x9c1c>
   1b248:	bl	11510 <__errno_location@plt>
   1b24c:	ldr	r0, [r0]
   1b250:	subs	r4, r0, #9
   1b254:	mvnne	r4, #0
   1b258:	mov	r0, r4
   1b25c:	pop	{r4, r5, r6, sl, fp, pc}
   1b260:	sub	sp, sp, #8
   1b264:	push	{r4, r5, r6, r7, fp, lr}
   1b268:	add	fp, sp, #16
   1b26c:	sub	sp, sp, #8
   1b270:	mov	r5, r0
   1b274:	add	r0, fp, #8
   1b278:	cmp	r1, #11
   1b27c:	str	r2, [fp, #8]
   1b280:	str	r3, [fp, #12]
   1b284:	str	r0, [sp, #4]
   1b288:	bhi	1b2c4 <__assert_fail@plt+0x9c88>
   1b28c:	mov	r0, #1
   1b290:	movw	r2, #1300	; 0x514
   1b294:	tst	r2, r0, lsl r1
   1b298:	bne	1b37c <__assert_fail@plt+0x9d40>
   1b29c:	movw	r2, #2570	; 0xa0a
   1b2a0:	tst	r2, r0, lsl r1
   1b2a4:	bne	1b2ec <__assert_fail@plt+0x9cb0>
   1b2a8:	cmp	r1, #0
   1b2ac:	bne	1b2c4 <__assert_fail@plt+0x9c88>
   1b2b0:	ldr	r0, [sp, #4]
   1b2b4:	add	r1, r0, #4
   1b2b8:	str	r1, [sp, #4]
   1b2bc:	mov	r1, #0
   1b2c0:	b	1b388 <__assert_fail@plt+0x9d4c>
   1b2c4:	sub	r0, r1, #1024	; 0x400
   1b2c8:	cmp	r0, #10
   1b2cc:	bhi	1b37c <__assert_fail@plt+0x9d40>
   1b2d0:	mov	r2, #1
   1b2d4:	movw	r3, #645	; 0x285
   1b2d8:	tst	r3, r2, lsl r0
   1b2dc:	bne	1b37c <__assert_fail@plt+0x9d40>
   1b2e0:	movw	r3, #1282	; 0x502
   1b2e4:	tst	r3, r2, lsl r0
   1b2e8:	beq	1b2f8 <__assert_fail@plt+0x9cbc>
   1b2ec:	mov	r0, r5
   1b2f0:	bl	11594 <fcntl64@plt>
   1b2f4:	b	1b394 <__assert_fail@plt+0x9d58>
   1b2f8:	cmp	r0, #6
   1b2fc:	bne	1b37c <__assert_fail@plt+0x9d40>
   1b300:	ldr	r0, [sp, #4]
   1b304:	movw	r7, #58336	; 0xe3e0
   1b308:	movt	r7, #2
   1b30c:	add	r1, r0, #4
   1b310:	str	r1, [sp, #4]
   1b314:	ldr	r6, [r0]
   1b318:	ldr	r0, [r7]
   1b31c:	cmp	r0, #0
   1b320:	bmi	1b3b8 <__assert_fail@plt+0x9d7c>
   1b324:	mov	r0, r5
   1b328:	movw	r1, #1030	; 0x406
   1b32c:	mov	r2, r6
   1b330:	bl	11594 <fcntl64@plt>
   1b334:	mov	r4, r0
   1b338:	cmn	r0, #1
   1b33c:	bgt	1b3ac <__assert_fail@plt+0x9d70>
   1b340:	bl	11510 <__errno_location@plt>
   1b344:	ldr	r0, [r0]
   1b348:	cmp	r0, #22
   1b34c:	bne	1b3ac <__assert_fail@plt+0x9d70>
   1b350:	mov	r0, r5
   1b354:	mov	r1, #0
   1b358:	mov	r2, r6
   1b35c:	bl	11594 <fcntl64@plt>
   1b360:	mov	r4, r0
   1b364:	cmp	r0, #0
   1b368:	bmi	1b398 <__assert_fail@plt+0x9d5c>
   1b36c:	mvn	r0, #0
   1b370:	str	r0, [r7]
   1b374:	mov	r0, #1
   1b378:	b	1b3dc <__assert_fail@plt+0x9da0>
   1b37c:	ldr	r0, [sp, #4]
   1b380:	add	r2, r0, #4
   1b384:	str	r2, [sp, #4]
   1b388:	ldr	r2, [r0]
   1b38c:	mov	r0, r5
   1b390:	bl	11594 <fcntl64@plt>
   1b394:	mov	r4, r0
   1b398:	mov	r0, r4
   1b39c:	sub	sp, fp, #16
   1b3a0:	pop	{r4, r5, r6, r7, fp, lr}
   1b3a4:	add	sp, sp, #8
   1b3a8:	bx	lr
   1b3ac:	mov	r0, #1
   1b3b0:	str	r0, [r7]
   1b3b4:	b	1b398 <__assert_fail@plt+0x9d5c>
   1b3b8:	mov	r0, r5
   1b3bc:	mov	r1, #0
   1b3c0:	mov	r2, r6
   1b3c4:	bl	11594 <fcntl64@plt>
   1b3c8:	mov	r4, r0
   1b3cc:	ldr	r0, [r7]
   1b3d0:	add	r0, r0, #1
   1b3d4:	clz	r0, r0
   1b3d8:	lsr	r0, r0, #5
   1b3dc:	cmp	r0, #0
   1b3e0:	beq	1b398 <__assert_fail@plt+0x9d5c>
   1b3e4:	cmp	r4, #0
   1b3e8:	bmi	1b398 <__assert_fail@plt+0x9d5c>
   1b3ec:	mov	r0, r4
   1b3f0:	mov	r1, #1
   1b3f4:	bl	11594 <fcntl64@plt>
   1b3f8:	cmp	r0, #0
   1b3fc:	bmi	1b418 <__assert_fail@plt+0x9ddc>
   1b400:	orr	r2, r0, #1
   1b404:	mov	r0, r4
   1b408:	mov	r1, #2
   1b40c:	bl	11594 <fcntl64@plt>
   1b410:	cmn	r0, #1
   1b414:	bne	1b398 <__assert_fail@plt+0x9d5c>
   1b418:	bl	11510 <__errno_location@plt>
   1b41c:	ldr	r6, [r0]
   1b420:	mov	r5, r0
   1b424:	mov	r0, r4
   1b428:	bl	11624 <close@plt>
   1b42c:	str	r6, [r5]
   1b430:	mvn	r4, #0
   1b434:	b	1b398 <__assert_fail@plt+0x9d5c>
   1b438:	push	{fp, lr}
   1b43c:	mov	fp, sp
   1b440:	mov	r0, #14
   1b444:	bl	115b8 <nl_langinfo@plt>
   1b448:	movw	r1, #51900	; 0xcabc
   1b44c:	cmp	r0, #0
   1b450:	movt	r1, #1
   1b454:	movne	r1, r0
   1b458:	movw	r0, #54519	; 0xd4f7
   1b45c:	ldrb	r2, [r1]
   1b460:	movt	r0, #1
   1b464:	cmp	r2, #0
   1b468:	movne	r0, r1
   1b46c:	pop	{fp, pc}
   1b470:	push	{r4, r5, r6, r7, fp, lr}
   1b474:	add	fp, sp, #16
   1b478:	sub	sp, sp, #8
   1b47c:	cmp	r0, #0
   1b480:	add	r5, sp, #4
   1b484:	mov	r7, r2
   1b488:	mov	r4, r1
   1b48c:	movne	r5, r0
   1b490:	mov	r0, r5
   1b494:	bl	11438 <mbrtowc@plt>
   1b498:	mov	r6, r0
   1b49c:	cmp	r7, #0
   1b4a0:	beq	1b4c8 <__assert_fail@plt+0x9e8c>
   1b4a4:	cmn	r6, #2
   1b4a8:	bcc	1b4c8 <__assert_fail@plt+0x9e8c>
   1b4ac:	mov	r0, #0
   1b4b0:	bl	155ac <__assert_fail@plt+0x3f70>
   1b4b4:	cmp	r0, #0
   1b4b8:	bne	1b4c8 <__assert_fail@plt+0x9e8c>
   1b4bc:	ldrb	r0, [r4]
   1b4c0:	mov	r6, #1
   1b4c4:	str	r0, [r5]
   1b4c8:	mov	r0, r6
   1b4cc:	sub	sp, fp, #16
   1b4d0:	pop	{r4, r5, r6, r7, fp, pc}
   1b4d4:	cmp	r2, #0
   1b4d8:	beq	1b508 <__assert_fail@plt+0x9ecc>
   1b4dc:	mvn	r3, #0
   1b4e0:	udiv	r3, r3, r2
   1b4e4:	cmp	r3, r1
   1b4e8:	bcs	1b508 <__assert_fail@plt+0x9ecc>
   1b4ec:	push	{fp, lr}
   1b4f0:	mov	fp, sp
   1b4f4:	bl	11510 <__errno_location@plt>
   1b4f8:	mov	r1, #12
   1b4fc:	str	r1, [r0]
   1b500:	mov	r0, #0
   1b504:	pop	{fp, pc}
   1b508:	mul	r1, r2, r1
   1b50c:	b	1b190 <__assert_fail@plt+0x9b54>
   1b510:	cmp	r3, #0
   1b514:	cmpeq	r2, #0
   1b518:	bne	1b53c <__assert_fail@plt+0x9f00>
   1b51c:	cmp	r1, #0
   1b520:	movlt	r1, #-2147483648	; 0x80000000
   1b524:	movlt	r0, #0
   1b528:	blt	1b538 <__assert_fail@plt+0x9efc>
   1b52c:	cmpeq	r0, #0
   1b530:	mvnne	r1, #-2147483648	; 0x80000000
   1b534:	mvnne	r0, #0
   1b538:	b	1b620 <__assert_fail@plt+0x9fe4>
   1b53c:	sub	sp, sp, #8
   1b540:	push	{sp, lr}
   1b544:	cmp	r1, #0
   1b548:	blt	1b568 <__assert_fail@plt+0x9f2c>
   1b54c:	cmp	r3, #0
   1b550:	blt	1b59c <__assert_fail@plt+0x9f60>
   1b554:	bl	1b630 <__assert_fail@plt+0x9ff4>
   1b558:	ldr	lr, [sp, #4]
   1b55c:	add	sp, sp, #8
   1b560:	pop	{r2, r3}
   1b564:	bx	lr
   1b568:	rsbs	r0, r0, #0
   1b56c:	sbc	r1, r1, r1, lsl #1
   1b570:	cmp	r3, #0
   1b574:	blt	1b5c0 <__assert_fail@plt+0x9f84>
   1b578:	bl	1b630 <__assert_fail@plt+0x9ff4>
   1b57c:	ldr	lr, [sp, #4]
   1b580:	add	sp, sp, #8
   1b584:	pop	{r2, r3}
   1b588:	rsbs	r0, r0, #0
   1b58c:	sbc	r1, r1, r1, lsl #1
   1b590:	rsbs	r2, r2, #0
   1b594:	sbc	r3, r3, r3, lsl #1
   1b598:	bx	lr
   1b59c:	rsbs	r2, r2, #0
   1b5a0:	sbc	r3, r3, r3, lsl #1
   1b5a4:	bl	1b630 <__assert_fail@plt+0x9ff4>
   1b5a8:	ldr	lr, [sp, #4]
   1b5ac:	add	sp, sp, #8
   1b5b0:	pop	{r2, r3}
   1b5b4:	rsbs	r0, r0, #0
   1b5b8:	sbc	r1, r1, r1, lsl #1
   1b5bc:	bx	lr
   1b5c0:	rsbs	r2, r2, #0
   1b5c4:	sbc	r3, r3, r3, lsl #1
   1b5c8:	bl	1b630 <__assert_fail@plt+0x9ff4>
   1b5cc:	ldr	lr, [sp, #4]
   1b5d0:	add	sp, sp, #8
   1b5d4:	pop	{r2, r3}
   1b5d8:	rsbs	r2, r2, #0
   1b5dc:	sbc	r3, r3, r3, lsl #1
   1b5e0:	bx	lr
   1b5e4:	cmp	r3, #0
   1b5e8:	cmpeq	r2, #0
   1b5ec:	bne	1b604 <__assert_fail@plt+0x9fc8>
   1b5f0:	cmp	r1, #0
   1b5f4:	cmpeq	r0, #0
   1b5f8:	mvnne	r1, #0
   1b5fc:	mvnne	r0, #0
   1b600:	b	1b620 <__assert_fail@plt+0x9fe4>
   1b604:	sub	sp, sp, #8
   1b608:	push	{sp, lr}
   1b60c:	bl	1b630 <__assert_fail@plt+0x9ff4>
   1b610:	ldr	lr, [sp, #4]
   1b614:	add	sp, sp, #8
   1b618:	pop	{r2, r3}
   1b61c:	bx	lr
   1b620:	push	{r1, lr}
   1b624:	mov	r0, #8
   1b628:	bl	11300 <raise@plt>
   1b62c:	pop	{r1, pc}
   1b630:	cmp	r1, r3
   1b634:	cmpeq	r0, r2
   1b638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b63c:	mov	r4, r0
   1b640:	movcc	r0, #0
   1b644:	mov	r5, r1
   1b648:	ldr	lr, [sp, #36]	; 0x24
   1b64c:	movcc	r1, r0
   1b650:	bcc	1b74c <__assert_fail@plt+0xa110>
   1b654:	cmp	r3, #0
   1b658:	clzeq	ip, r2
   1b65c:	clzne	ip, r3
   1b660:	addeq	ip, ip, #32
   1b664:	cmp	r5, #0
   1b668:	clzeq	r1, r4
   1b66c:	addeq	r1, r1, #32
   1b670:	clzne	r1, r5
   1b674:	sub	ip, ip, r1
   1b678:	sub	sl, ip, #32
   1b67c:	lsl	r9, r3, ip
   1b680:	rsb	fp, ip, #32
   1b684:	orr	r9, r9, r2, lsl sl
   1b688:	orr	r9, r9, r2, lsr fp
   1b68c:	lsl	r8, r2, ip
   1b690:	cmp	r5, r9
   1b694:	cmpeq	r4, r8
   1b698:	movcc	r0, #0
   1b69c:	movcc	r1, r0
   1b6a0:	bcc	1b6bc <__assert_fail@plt+0xa080>
   1b6a4:	mov	r0, #1
   1b6a8:	subs	r4, r4, r8
   1b6ac:	lsl	r1, r0, sl
   1b6b0:	orr	r1, r1, r0, lsr fp
   1b6b4:	lsl	r0, r0, ip
   1b6b8:	sbc	r5, r5, r9
   1b6bc:	cmp	ip, #0
   1b6c0:	beq	1b74c <__assert_fail@plt+0xa110>
   1b6c4:	lsr	r6, r8, #1
   1b6c8:	orr	r6, r6, r9, lsl #31
   1b6cc:	lsr	r7, r9, #1
   1b6d0:	mov	r2, ip
   1b6d4:	b	1b6f8 <__assert_fail@plt+0xa0bc>
   1b6d8:	subs	r3, r4, r6
   1b6dc:	sbc	r8, r5, r7
   1b6e0:	adds	r3, r3, r3
   1b6e4:	adc	r8, r8, r8
   1b6e8:	adds	r4, r3, #1
   1b6ec:	adc	r5, r8, #0
   1b6f0:	subs	r2, r2, #1
   1b6f4:	beq	1b714 <__assert_fail@plt+0xa0d8>
   1b6f8:	cmp	r5, r7
   1b6fc:	cmpeq	r4, r6
   1b700:	bcs	1b6d8 <__assert_fail@plt+0xa09c>
   1b704:	adds	r4, r4, r4
   1b708:	adc	r5, r5, r5
   1b70c:	subs	r2, r2, #1
   1b710:	bne	1b6f8 <__assert_fail@plt+0xa0bc>
   1b714:	lsr	r3, r4, ip
   1b718:	orr	r3, r3, r5, lsl fp
   1b71c:	lsr	r2, r5, ip
   1b720:	orr	r3, r3, r5, lsr sl
   1b724:	adds	r0, r0, r4
   1b728:	mov	r4, r3
   1b72c:	lsl	r3, r2, ip
   1b730:	orr	r3, r3, r4, lsl sl
   1b734:	lsl	ip, r4, ip
   1b738:	orr	r3, r3, r4, lsr fp
   1b73c:	adc	r1, r1, r5
   1b740:	subs	r0, r0, ip
   1b744:	mov	r5, r2
   1b748:	sbc	r1, r1, r3
   1b74c:	cmp	lr, #0
   1b750:	strdne	r4, [lr]
   1b754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b758:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b75c:	mov	r7, r0
   1b760:	ldr	r6, [pc, #72]	; 1b7b0 <__assert_fail@plt+0xa174>
   1b764:	ldr	r5, [pc, #72]	; 1b7b4 <__assert_fail@plt+0xa178>
   1b768:	add	r6, pc, r6
   1b76c:	add	r5, pc, r5
   1b770:	sub	r6, r6, r5
   1b774:	mov	r8, r1
   1b778:	mov	r9, r2
   1b77c:	bl	112bc <fdopen@plt-0x20>
   1b780:	asrs	r6, r6, #2
   1b784:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b788:	mov	r4, #0
   1b78c:	add	r4, r4, #1
   1b790:	ldr	r3, [r5], #4
   1b794:	mov	r2, r9
   1b798:	mov	r1, r8
   1b79c:	mov	r0, r7
   1b7a0:	blx	r3
   1b7a4:	cmp	r6, r4
   1b7a8:	bne	1b78c <__assert_fail@plt+0xa150>
   1b7ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b7b0:	muleq	r1, ip, r7
   1b7b4:	muleq	r1, r4, r7
   1b7b8:	bx	lr
   1b7bc:	ldr	r3, [pc, #12]	; 1b7d0 <__assert_fail@plt+0xa194>
   1b7c0:	mov	r1, #0
   1b7c4:	add	r3, pc, r3
   1b7c8:	ldr	r2, [r3]
   1b7cc:	b	11528 <__cxa_atexit@plt>
   1b7d0:	andeq	r2, r1, r0, ror r9
   1b7d4:	mov	r2, r1
   1b7d8:	mov	r1, r0
   1b7dc:	mov	r0, #3
   1b7e0:	b	113fc <__fxstat64@plt>

Disassembly of section .fini:

0001b7e4 <.fini>:
   1b7e4:	push	{r3, lr}
   1b7e8:	pop	{r3, pc}
