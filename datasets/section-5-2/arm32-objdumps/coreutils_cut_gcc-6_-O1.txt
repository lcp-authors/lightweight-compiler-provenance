
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010d68 <.init>:
   10d68:	push	{r3, lr}
   10d6c:	bl	1107c <__assert_fail@plt+0x48>
   10d70:	pop	{r3, pc}

Disassembly of section .plt:

00010d74 <calloc@plt-0x14>:
   10d74:	push	{lr}		; (str lr, [sp, #-4]!)
   10d78:	ldr	lr, [pc, #4]	; 10d84 <calloc@plt-0x4>
   10d7c:	add	lr, pc, lr
   10d80:	ldr	pc, [lr, #8]!
   10d84:	andeq	r7, r1, ip, ror r2

00010d88 <calloc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #636]!	; 0x27c

00010d94 <fputs_unlocked@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #628]!	; 0x274

00010da0 <raise@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #620]!	; 0x26c

00010dac <strcmp@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #612]!	; 0x264

00010db8 <posix_fadvise64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #604]!	; 0x25c

00010dc4 <fflush@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #596]!	; 0x254

00010dd0 <memmove@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #588]!	; 0x24c

00010ddc <free@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #580]!	; 0x244

00010de8 <ferror@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #572]!	; 0x23c

00010df4 <_exit@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #564]!	; 0x234

00010e00 <memcpy@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #556]!	; 0x22c

00010e0c <mbsinit@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #548]!	; 0x224

00010e18 <fwrite_unlocked@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #540]!	; 0x21c

00010e24 <memcmp@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #532]!	; 0x214

00010e30 <fputc_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #524]!	; 0x20c

00010e3c <dcgettext@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #516]!	; 0x204

00010e48 <realloc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #508]!	; 0x1fc

00010e54 <textdomain@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e60 <iswprint@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #492]!	; 0x1ec

00010e6c <fwrite@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #484]!	; 0x1e4

00010e78 <lseek64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #476]!	; 0x1dc

00010e84 <__ctype_get_mb_cur_max@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #468]!	; 0x1d4

00010e90 <__fpending@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #460]!	; 0x1cc

00010e9c <mbrtowc@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea8 <error@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #444]!	; 0x1bc

00010eb4 <malloc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #436]!	; 0x1b4

00010ec0 <__libc_start_main@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #428]!	; 0x1ac

00010ecc <__freading@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed8 <__gmon_start__@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #412]!	; 0x19c

00010ee4 <getopt_long@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #404]!	; 0x194

00010ef0 <__ctype_b_loc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #396]!	; 0x18c

00010efc <exit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #388]!	; 0x184

00010f08 <strlen@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #380]!	; 0x17c

00010f14 <ungetc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #372]!	; 0x174

00010f20 <__errno_location@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #364]!	; 0x16c

00010f2c <__cxa_atexit@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #356]!	; 0x164

00010f38 <memset@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #348]!	; 0x15c

00010f44 <fgetc@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #340]!	; 0x154

00010f50 <__printf_chk@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #332]!	; 0x14c

00010f5c <fileno@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #324]!	; 0x144

00010f68 <__fprintf_chk@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #316]!	; 0x13c

00010f74 <memchr@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #308]!	; 0x134

00010f80 <fclose@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #300]!	; 0x12c

00010f8c <fseeko64@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #292]!	; 0x124

00010f98 <__fread_chk@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #284]!	; 0x11c

00010fa4 <__uflow@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #276]!	; 0x114

00010fb0 <__overflow@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #268]!	; 0x10c

00010fbc <setlocale@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #260]!	; 0x104

00010fc8 <strrchr@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #252]!	; 0xfc

00010fd4 <nl_langinfo@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #244]!	; 0xf4

00010fe0 <clearerr_unlocked@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #236]!	; 0xec

00010fec <fopen64@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #228]!	; 0xe4

00010ff8 <qsort@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #220]!	; 0xdc

00011004 <bindtextdomain@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #212]!	; 0xd4

00011010 <strncmp@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #204]!	; 0xcc

0001101c <abort@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #196]!	; 0xc4

00011028 <strspn@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #188]!	; 0xbc

00011034 <__assert_fail@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #180]!	; 0xb4

Disassembly of section .text:

00011040 <.text>:
   11040:	mov	fp, #0
   11044:	mov	lr, #0
   11048:	pop	{r1}		; (ldr r1, [sp], #4)
   1104c:	mov	r2, sp
   11050:	push	{r2}		; (str r2, [sp, #-4]!)
   11054:	push	{r0}		; (str r0, [sp, #-4]!)
   11058:	ldr	ip, [pc, #16]	; 11070 <__assert_fail@plt+0x3c>
   1105c:	push	{ip}		; (str ip, [sp, #-4]!)
   11060:	ldr	r0, [pc, #12]	; 11074 <__assert_fail@plt+0x40>
   11064:	ldr	r3, [pc, #12]	; 11078 <__assert_fail@plt+0x44>
   11068:	bl	10ec0 <__libc_start_main@plt>
   1106c:	bl	1101c <abort@plt>
   11070:	ldrdeq	r6, [r1], -r4
   11074:	andeq	r1, r1, ip, asr #27
   11078:	andeq	r6, r1, r4, ror r1
   1107c:	ldr	r3, [pc, #20]	; 11098 <__assert_fail@plt+0x64>
   11080:	ldr	r2, [pc, #20]	; 1109c <__assert_fail@plt+0x68>
   11084:	add	r3, pc, r3
   11088:	ldr	r2, [r3, r2]
   1108c:	cmp	r2, #0
   11090:	bxeq	lr
   11094:	b	10ed8 <__gmon_start__@plt>
   11098:	andeq	r6, r1, r4, ror pc
   1109c:	strdeq	r0, [r0], -r4
   110a0:	ldr	r3, [pc, #28]	; 110c4 <__assert_fail@plt+0x90>
   110a4:	ldr	r0, [pc, #28]	; 110c8 <__assert_fail@plt+0x94>
   110a8:	sub	r3, r3, r0
   110ac:	cmp	r3, #6
   110b0:	bxls	lr
   110b4:	ldr	r3, [pc, #16]	; 110cc <__assert_fail@plt+0x98>
   110b8:	cmp	r3, #0
   110bc:	bxeq	lr
   110c0:	bx	r3
   110c4:	andeq	r8, r2, pc, asr #2
   110c8:	andeq	r8, r2, ip, asr #2
   110cc:	andeq	r0, r0, r0
   110d0:	ldr	r1, [pc, #36]	; 110fc <__assert_fail@plt+0xc8>
   110d4:	ldr	r0, [pc, #36]	; 11100 <__assert_fail@plt+0xcc>
   110d8:	sub	r1, r1, r0
   110dc:	asr	r1, r1, #2
   110e0:	add	r1, r1, r1, lsr #31
   110e4:	asrs	r1, r1, #1
   110e8:	bxeq	lr
   110ec:	ldr	r3, [pc, #16]	; 11104 <__assert_fail@plt+0xd0>
   110f0:	cmp	r3, #0
   110f4:	bxeq	lr
   110f8:	bx	r3
   110fc:	andeq	r8, r2, ip, asr #2
   11100:	andeq	r8, r2, ip, asr #2
   11104:	andeq	r0, r0, r0
   11108:	push	{r4, lr}
   1110c:	ldr	r4, [pc, #24]	; 1112c <__assert_fail@plt+0xf8>
   11110:	ldrb	r3, [r4]
   11114:	cmp	r3, #0
   11118:	popne	{r4, pc}
   1111c:	bl	110a0 <__assert_fail@plt+0x6c>
   11120:	mov	r3, #1
   11124:	strb	r3, [r4]
   11128:	pop	{r4, pc}
   1112c:	andeq	r8, r2, r4, ror r1
   11130:	ldr	r0, [pc, #40]	; 11160 <__assert_fail@plt+0x12c>
   11134:	ldr	r3, [r0]
   11138:	cmp	r3, #0
   1113c:	bne	11144 <__assert_fail@plt+0x110>
   11140:	b	110d0 <__assert_fail@plt+0x9c>
   11144:	ldr	r3, [pc, #24]	; 11164 <__assert_fail@plt+0x130>
   11148:	cmp	r3, #0
   1114c:	beq	11140 <__assert_fail@plt+0x10c>
   11150:	push	{r4, lr}
   11154:	blx	r3
   11158:	pop	{r4, lr}
   1115c:	b	110d0 <__assert_fail@plt+0x9c>
   11160:	andeq	r7, r2, r4, lsl pc
   11164:	andeq	r0, r0, r0
   11168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1116c:	sub	sp, sp, #36	; 0x24
   11170:	mov	r4, r0
   11174:	ldr	r3, [pc, #1352]	; 116c4 <__assert_fail@plt+0x690>
   11178:	ldr	r2, [r3]
   1117c:	ldr	r3, [pc, #1348]	; 116c8 <__assert_fail@plt+0x694>
   11180:	str	r2, [r3]
   11184:	ldr	r3, [r0, #4]
   11188:	ldr	r2, [r0, #8]
   1118c:	cmp	r3, r2
   11190:	bcs	11208 <__assert_fail@plt+0x1d4>
   11194:	add	r2, r3, #1
   11198:	str	r2, [r0, #4]
   1119c:	ldrb	r0, [r3]
   111a0:	cmn	r0, #1
   111a4:	beq	112e0 <__assert_fail@plt+0x2ac>
   111a8:	mov	r1, r4
   111ac:	bl	10f14 <ungetc@plt>
   111b0:	ldr	r3, [pc, #1296]	; 116c8 <__assert_fail@plt+0x694>
   111b4:	ldr	r2, [r3]
   111b8:	ldrd	r0, [r2]
   111bc:	cmp	r1, #0
   111c0:	cmpeq	r0, #1
   111c4:	movhi	fp, #1
   111c8:	movls	fp, #0
   111cc:	ldrb	r3, [r3, #4]
   111d0:	subs	fp, fp, r3
   111d4:	movne	fp, #1
   111d8:	mov	r2, #1
   111dc:	mov	r3, #0
   111e0:	strd	r2, [sp, #16]
   111e4:	mov	r5, #0
   111e8:	mov	r7, r5
   111ec:	ldr	r6, [pc, #1236]	; 116c8 <__assert_fail@plt+0x694>
   111f0:	ldr	r8, [pc, #1236]	; 116cc <__assert_fail@plt+0x698>
   111f4:	ldr	sl, [pc, #1236]	; 116d0 <__assert_fail@plt+0x69c>
   111f8:	add	r3, r6, #8
   111fc:	str	r3, [sp, #28]
   11200:	str	r4, [sp, #24]
   11204:	b	11490 <__assert_fail@plt+0x45c>
   11208:	bl	10fa4 <__uflow@plt>
   1120c:	b	111a0 <__assert_fail@plt+0x16c>
   11210:	ldr	r3, [sp, #24]
   11214:	str	r3, [sp, #8]
   11218:	ldrb	r3, [r8]
   1121c:	str	r3, [sp, #4]
   11220:	ldrb	r3, [r6, #16]
   11224:	str	r3, [sp]
   11228:	mvn	r3, #0
   1122c:	mov	r2, #0
   11230:	ldr	r1, [sp, #28]
   11234:	add	r0, r6, #12
   11238:	bl	12d10 <__assert_fail@plt+0x1cdc>
   1123c:	subs	r2, r0, #0
   11240:	blt	112bc <__assert_fail@plt+0x288>
   11244:	cmp	r2, #0
   11248:	beq	112ec <__assert_fail@plt+0x2b8>
   1124c:	ldr	r0, [r6, #12]
   11250:	sub	r7, r2, #1
   11254:	ldrb	r1, [r0, r7]
   11258:	ldrb	r3, [r6, #16]
   1125c:	cmp	r1, r3
   11260:	beq	11308 <__assert_fail@plt+0x2d4>
   11264:	ldrb	r3, [r6, #4]
   11268:	cmp	r3, #0
   1126c:	movne	r7, #0
   11270:	bne	11490 <__assert_fail@plt+0x45c>
   11274:	ldr	r3, [sl]
   11278:	mov	r1, #1
   1127c:	bl	10e18 <fwrite_unlocked@plt>
   11280:	ldrb	r1, [r8]
   11284:	ldr	r3, [r6, #12]
   11288:	ldrb	r3, [r3, r7]
   1128c:	cmp	r3, r1
   11290:	beq	112b4 <__assert_fail@plt+0x280>
   11294:	ldr	r0, [sl]
   11298:	ldr	r3, [r0, #20]
   1129c:	ldr	r2, [r0, #24]
   112a0:	cmp	r3, r2
   112a4:	addcc	r2, r3, #1
   112a8:	strcc	r2, [r0, #20]
   112ac:	strbcc	r1, [r3]
   112b0:	bcs	11300 <__assert_fail@plt+0x2cc>
   112b4:	ldrb	r7, [r8]
   112b8:	b	11490 <__assert_fail@plt+0x45c>
   112bc:	ldr	r4, [sp, #24]
   112c0:	ldr	r5, [pc, #1024]	; 116c8 <__assert_fail@plt+0x694>
   112c4:	ldr	r0, [r5, #12]
   112c8:	bl	12c10 <__assert_fail@plt+0x1bdc>
   112cc:	mov	r3, #0
   112d0:	str	r3, [r5, #12]
   112d4:	ldr	r3, [r4]
   112d8:	tst	r3, #48	; 0x30
   112dc:	beq	112e8 <__assert_fail@plt+0x2b4>
   112e0:	add	sp, sp, #36	; 0x24
   112e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112e8:	bl	157f0 <__assert_fail@plt+0x47bc>
   112ec:	ldr	r3, [pc, #992]	; 116d4 <__assert_fail@plt+0x6a0>
   112f0:	ldr	r2, [pc, #992]	; 116d8 <__assert_fail@plt+0x6a4>
   112f4:	ldr	r1, [pc, #992]	; 116dc <__assert_fail@plt+0x6a8>
   112f8:	ldr	r0, [pc, #992]	; 116e0 <__assert_fail@plt+0x6ac>
   112fc:	bl	11034 <__assert_fail@plt>
   11300:	bl	10fb0 <__overflow@plt>
   11304:	b	112b4 <__assert_fail@plt+0x280>
   11308:	ldr	r3, [r6]
   1130c:	ldrd	r2, [r3]
   11310:	cmp	r3, #0
   11314:	cmpeq	r2, #1
   11318:	bls	11354 <__assert_fail@plt+0x320>
   1131c:	ldrd	r2, [sp, #16]
   11320:	adds	r2, r2, #1
   11324:	adc	r3, r3, #0
   11328:	mov	r0, r2
   1132c:	mov	r1, r3
   11330:	strd	r0, [sp, #16]
   11334:	ldr	ip, [r6]
   11338:	ldrd	r2, [ip, #8]
   1133c:	cmp	r1, r3
   11340:	cmpeq	r0, r2
   11344:	addhi	r1, ip, #16
   11348:	strhi	r1, [r6]
   1134c:	mov	r7, #0
   11350:	b	114ac <__assert_fail@plt+0x478>
   11354:	ldr	r3, [sl]
   11358:	mov	r2, r7
   1135c:	mov	r1, #1
   11360:	bl	10e18 <fwrite_unlocked@plt>
   11364:	ldrb	r2, [r6, #16]
   11368:	ldrb	r3, [r8]
   1136c:	cmp	r2, r3
   11370:	movne	r5, r9
   11374:	bne	1131c <__assert_fail@plt+0x2e8>
   11378:	ldr	r2, [sp, #24]
   1137c:	ldr	r3, [r2, #4]
   11380:	ldr	r2, [r2, #8]
   11384:	cmp	r3, r2
   11388:	bcs	113b4 <__assert_fail@plt+0x380>
   1138c:	add	r2, r3, #1
   11390:	ldr	r1, [sp, #24]
   11394:	str	r2, [r1, #4]
   11398:	ldrb	r0, [r3]
   1139c:	cmn	r0, #1
   113a0:	beq	1131c <__assert_fail@plt+0x2e8>
   113a4:	ldr	r1, [sp, #24]
   113a8:	bl	10f14 <ungetc@plt>
   113ac:	mov	r5, r9
   113b0:	b	1131c <__assert_fail@plt+0x2e8>
   113b4:	ldr	r0, [sp, #24]
   113b8:	bl	10fa4 <__uflow@plt>
   113bc:	b	1139c <__assert_fail@plt+0x368>
   113c0:	mov	r7, r5
   113c4:	ldr	r3, [r4, #4]
   113c8:	ldr	r2, [r4, #8]
   113cc:	cmp	r3, r2
   113d0:	bcs	1142c <__assert_fail@plt+0x3f8>
   113d4:	add	r2, r3, #1
   113d8:	str	r2, [r4, #4]
   113dc:	ldrb	r5, [r3]
   113e0:	ldrb	r3, [r6, #16]
   113e4:	mov	r9, r3
   113e8:	cmp	r3, r5
   113ec:	beq	115f4 <__assert_fail@plt+0x5c0>
   113f0:	ldrb	r3, [r8]
   113f4:	cmp	r3, r5
   113f8:	cmnne	r5, #1
   113fc:	beq	1143c <__assert_fail@plt+0x408>
   11400:	ldr	r0, [sl]
   11404:	ldr	r3, [r0, #20]
   11408:	ldr	r2, [r0, #24]
   1140c:	cmp	r3, r2
   11410:	addcc	r2, r3, #1
   11414:	strcc	r2, [r0, #20]
   11418:	strbcc	r5, [r3]
   1141c:	bcc	113c0 <__assert_fail@plt+0x38c>
   11420:	uxtb	r1, r5
   11424:	bl	10fb0 <__overflow@plt>
   11428:	b	113c0 <__assert_fail@plt+0x38c>
   1142c:	mov	r0, r4
   11430:	bl	10fa4 <__uflow@plt>
   11434:	mov	r5, r0
   11438:	b	113e0 <__assert_fail@plt+0x3ac>
   1143c:	str	r4, [sp, #24]
   11440:	mov	ip, r7
   11444:	mov	r7, r5
   11448:	mov	r5, #1
   1144c:	ldrb	r2, [r6, #16]
   11450:	ldrb	r3, [r8]
   11454:	cmp	r2, r3
   11458:	beq	116bc <__assert_fail@plt+0x688>
   1145c:	ldrb	r2, [r6, #16]
   11460:	cmp	r7, r2
   11464:	beq	1159c <__assert_fail@plt+0x568>
   11468:	ldrb	r3, [r8]
   1146c:	mov	r1, r3
   11470:	cmn	r7, #1
   11474:	movne	r9, #0
   11478:	moveq	r9, #1
   1147c:	cmp	r3, r7
   11480:	movne	r0, #0
   11484:	moveq	r0, #1
   11488:	orrs	lr, r9, r0
   1148c:	bne	1162c <__assert_fail@plt+0x5f8>
   11490:	ldrd	r2, [sp, #16]
   11494:	cmp	r3, #0
   11498:	cmpeq	r2, #1
   1149c:	movne	r9, #0
   114a0:	andeq	r9, fp, #1
   114a4:	cmp	r9, #0
   114a8:	bne	11210 <__assert_fail@plt+0x1dc>
   114ac:	ldr	r3, [r6]
   114b0:	ldrd	r2, [r3]
   114b4:	ldrd	r0, [sp, #16]
   114b8:	cmp	r3, r1
   114bc:	cmpeq	r2, r0
   114c0:	bhi	114e8 <__assert_fail@plt+0x4b4>
   114c4:	cmp	r5, #0
   114c8:	beq	114e0 <__assert_fail@plt+0x4ac>
   114cc:	ldr	r3, [sl]
   114d0:	ldr	r2, [r6, #20]
   114d4:	mov	r1, #1
   114d8:	ldr	r0, [r6, #24]
   114dc:	bl	10e18 <fwrite_unlocked@plt>
   114e0:	ldr	r4, [sp, #24]
   114e4:	b	113c4 <__assert_fail@plt+0x390>
   114e8:	ldr	r4, [sp, #24]
   114ec:	b	1151c <__assert_fail@plt+0x4e8>
   114f0:	mov	r0, r4
   114f4:	bl	10fa4 <__uflow@plt>
   114f8:	ldrb	r3, [r6, #16]
   114fc:	mov	r9, r3
   11500:	cmp	r3, r0
   11504:	beq	115ac <__assert_fail@plt+0x578>
   11508:	ldrb	r3, [r8]
   1150c:	cmp	r3, r0
   11510:	cmnne	r0, #1
   11514:	beq	1153c <__assert_fail@plt+0x508>
   11518:	mov	r7, r0
   1151c:	ldr	r3, [r4, #4]
   11520:	ldr	r2, [r4, #8]
   11524:	cmp	r3, r2
   11528:	bcs	114f0 <__assert_fail@plt+0x4bc>
   1152c:	add	r2, r3, #1
   11530:	str	r2, [r4, #4]
   11534:	ldrb	r0, [r3]
   11538:	b	114f8 <__assert_fail@plt+0x4c4>
   1153c:	str	r4, [sp, #24]
   11540:	mov	ip, r7
   11544:	mov	r7, r0
   11548:	b	1144c <__assert_fail@plt+0x418>
   1154c:	mov	r5, #1
   11550:	ldr	r2, [sp, #24]
   11554:	ldr	r3, [r2, #4]
   11558:	ldr	r2, [r2, #8]
   1155c:	cmp	r3, r2
   11560:	bcs	11590 <__assert_fail@plt+0x55c>
   11564:	add	r2, r3, #1
   11568:	ldr	r1, [sp, #24]
   1156c:	str	r2, [r1, #4]
   11570:	ldrb	r0, [r3]
   11574:	cmn	r0, #1
   11578:	beq	11610 <__assert_fail@plt+0x5dc>
   1157c:	ldr	r1, [sp, #24]
   11580:	bl	10f14 <ungetc@plt>
   11584:	mov	ip, r7
   11588:	mov	r7, r9
   1158c:	b	1145c <__assert_fail@plt+0x428>
   11590:	ldr	r0, [sp, #24]
   11594:	bl	10fa4 <__uflow@plt>
   11598:	b	11574 <__assert_fail@plt+0x540>
   1159c:	mov	r7, r2
   115a0:	b	115c0 <__assert_fail@plt+0x58c>
   115a4:	bl	10fb0 <__overflow@plt>
   115a8:	b	11694 <__assert_fail@plt+0x660>
   115ac:	str	r4, [sp, #24]
   115b0:	ldrb	r2, [r8]
   115b4:	cmp	r2, r3
   115b8:	movne	r7, r3
   115bc:	beq	11550 <__assert_fail@plt+0x51c>
   115c0:	ldrd	r2, [sp, #16]
   115c4:	adds	r2, r2, #1
   115c8:	adc	r3, r3, #0
   115cc:	mov	r0, r2
   115d0:	mov	r1, r3
   115d4:	strd	r0, [sp, #16]
   115d8:	ldr	ip, [r6]
   115dc:	ldrd	r2, [ip, #8]
   115e0:	cmp	r1, r3
   115e4:	cmpeq	r0, r2
   115e8:	addhi	r1, ip, #16
   115ec:	strhi	r1, [r6]
   115f0:	b	11490 <__assert_fail@plt+0x45c>
   115f4:	str	r4, [sp, #24]
   115f8:	ldrb	r2, [r8]
   115fc:	cmp	r2, r3
   11600:	beq	1154c <__assert_fail@plt+0x518>
   11604:	ldrb	r7, [r6, #16]
   11608:	mov	r5, #1
   1160c:	b	115c0 <__assert_fail@plt+0x58c>
   11610:	ldrb	r2, [r6, #16]
   11614:	ldrb	r3, [r8]
   11618:	mov	r1, r3
   1161c:	mov	ip, r7
   11620:	mov	r7, r0
   11624:	mov	r0, #0
   11628:	mov	r9, #1
   1162c:	cmp	r5, #0
   11630:	bne	11654 <__assert_fail@plt+0x620>
   11634:	ldrb	lr, [r6, #4]
   11638:	eor	lr, lr, #1
   1163c:	ldrd	r4, [sp, #16]
   11640:	cmp	r5, #0
   11644:	cmpeq	r4, #1
   11648:	orrne	lr, lr, #1
   1164c:	cmp	lr, #0
   11650:	beq	11694 <__assert_fail@plt+0x660>
   11654:	cmp	r2, r3
   11658:	movne	r2, #0
   1165c:	moveq	r2, #1
   11660:	cmp	ip, r1
   11664:	moveq	ip, r2
   11668:	orrne	ip, r2, #1
   1166c:	orrs	r2, r0, ip
   11670:	beq	11694 <__assert_fail@plt+0x660>
   11674:	ldr	r0, [sl]
   11678:	ldr	r2, [r0, #20]
   1167c:	ldr	ip, [r0, #24]
   11680:	cmp	r2, ip
   11684:	addcc	r1, r2, #1
   11688:	strcc	r1, [r0, #20]
   1168c:	strbcc	r3, [r2]
   11690:	bcs	115a4 <__assert_fail@plt+0x570>
   11694:	cmp	r9, #0
   11698:	bne	112e0 <__assert_fail@plt+0x2ac>
   1169c:	ldr	r3, [pc, #32]	; 116c4 <__assert_fail@plt+0x690>
   116a0:	ldr	r3, [r3]
   116a4:	str	r3, [r6]
   116a8:	mov	r5, r9
   116ac:	mov	r2, #1
   116b0:	mov	r3, #0
   116b4:	strd	r2, [sp, #16]
   116b8:	b	11490 <__assert_fail@plt+0x45c>
   116bc:	ldrb	r2, [r6, #16]
   116c0:	b	11468 <__assert_fail@plt+0x434>
   116c4:	andeq	r8, r2, r0, lsr #3
   116c8:	andeq	r8, r2, r8, ror r1
   116cc:	andeq	r8, r2, r0, lsl #2
   116d0:	andeq	r8, r2, ip, ror #2
   116d4:	strdeq	r6, [r1], -ip
   116d8:	andeq	r0, r0, fp, lsr r1
   116dc:	strdeq	r6, [r1], -r0
   116e0:	strdeq	r6, [r1], -ip
   116e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116e8:	sub	sp, sp, #12
   116ec:	mov	r6, r0
   116f0:	ldr	r3, [pc, #404]	; 1188c <__assert_fail@plt+0x858>
   116f4:	ldr	r2, [r3]
   116f8:	ldr	r3, [pc, #400]	; 11890 <__assert_fail@plt+0x85c>
   116fc:	str	r2, [r3]
   11700:	mov	r4, #0
   11704:	mov	r5, #0
   11708:	mov	sl, #0
   1170c:	ldr	r9, [pc, #384]	; 11894 <__assert_fail@plt+0x860>
   11710:	mov	r8, r3
   11714:	add	r3, r3, #28
   11718:	str	r3, [sp, #4]
   1171c:	ldr	fp, [pc, #372]	; 11898 <__assert_fail@plt+0x864>
   11720:	b	117d8 <__assert_fail@plt+0x7a4>
   11724:	mov	r0, r6
   11728:	bl	10fa4 <__uflow@plt>
   1172c:	mov	r7, r0
   11730:	b	117f4 <__assert_fail@plt+0x7c0>
   11734:	ldr	r0, [fp]
   11738:	ldr	r3, [r0, #20]
   1173c:	ldr	r2, [r0, #24]
   11740:	cmp	r3, r2
   11744:	addcc	r2, r3, #1
   11748:	strcc	r2, [r0, #20]
   1174c:	strbcc	r1, [r3]
   11750:	bcs	11770 <__assert_fail@plt+0x73c>
   11754:	ldr	r3, [pc, #304]	; 1188c <__assert_fail@plt+0x858>
   11758:	ldr	r3, [r3]
   1175c:	str	r3, [r8]
   11760:	mov	r4, #0
   11764:	mov	r5, #0
   11768:	mov	sl, #0
   1176c:	b	117d8 <__assert_fail@plt+0x7a4>
   11770:	bl	10fb0 <__overflow@plt>
   11774:	b	11754 <__assert_fail@plt+0x720>
   11778:	orrs	r2, r4, r5
   1177c:	beq	117a4 <__assert_fail@plt+0x770>
   11780:	ldr	r2, [pc, #272]	; 11898 <__assert_fail@plt+0x864>
   11784:	ldr	r0, [r2]
   11788:	ldr	r2, [r0, #20]
   1178c:	ldr	ip, [r0, #24]
   11790:	cmp	r2, ip
   11794:	addcc	r3, r2, #1
   11798:	strcc	r3, [r0, #20]
   1179c:	strbcc	r1, [r2]
   117a0:	bcs	117ac <__assert_fail@plt+0x778>
   117a4:	add	sp, sp, #12
   117a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117ac:	mov	r1, r3
   117b0:	bl	10fb0 <__overflow@plt>
   117b4:	b	117a4 <__assert_fail@plt+0x770>
   117b8:	ldr	r0, [fp]
   117bc:	ldr	r3, [r0, #20]
   117c0:	ldr	r2, [r0, #24]
   117c4:	cmp	r3, r2
   117c8:	addcc	r2, r3, #1
   117cc:	strcc	r2, [r0, #20]
   117d0:	strbcc	r7, [r3]
   117d4:	bcs	11880 <__assert_fail@plt+0x84c>
   117d8:	ldr	r3, [r6, #4]
   117dc:	ldr	r2, [r6, #8]
   117e0:	cmp	r2, r3
   117e4:	bls	11724 <__assert_fail@plt+0x6f0>
   117e8:	add	r2, r3, #1
   117ec:	str	r2, [r6, #4]
   117f0:	ldrb	r7, [r3]
   117f4:	ldrb	r1, [r9]
   117f8:	mov	r3, r1
   117fc:	cmp	r1, r7
   11800:	beq	11734 <__assert_fail@plt+0x700>
   11804:	cmn	r7, #1
   11808:	beq	11778 <__assert_fail@plt+0x744>
   1180c:	adds	r4, r4, #1
   11810:	adc	r5, r5, #0
   11814:	ldr	r1, [r8]
   11818:	ldrd	r2, [r1, #8]
   1181c:	cmp	r5, r3
   11820:	cmpeq	r4, r2
   11824:	addhi	r1, r1, #16
   11828:	strhi	r1, [r8]
   1182c:	ldr	r3, [r8]
   11830:	ldrd	r2, [r3]
   11834:	cmp	r3, r5
   11838:	cmpeq	r2, r4
   1183c:	bhi	117d8 <__assert_fail@plt+0x7a4>
   11840:	ldr	r0, [r8, #24]
   11844:	ldr	r1, [sp, #4]
   11848:	cmp	r0, r1
   1184c:	beq	117b8 <__assert_fail@plt+0x784>
   11850:	cmp	r3, r5
   11854:	cmpeq	r2, r4
   11858:	movne	sl, #0
   1185c:	andeq	sl, sl, #1
   11860:	cmp	sl, #0
   11864:	moveq	sl, #1
   11868:	beq	117b8 <__assert_fail@plt+0x784>
   1186c:	ldr	r3, [fp]
   11870:	ldr	r2, [r8, #20]
   11874:	mov	r1, #1
   11878:	bl	10e18 <fwrite_unlocked@plt>
   1187c:	b	117b8 <__assert_fail@plt+0x784>
   11880:	uxtb	r1, r7
   11884:	bl	10fb0 <__overflow@plt>
   11888:	b	117d8 <__assert_fail@plt+0x7a4>
   1188c:	andeq	r8, r2, r0, lsr #3
   11890:	andeq	r8, r2, r8, ror r1
   11894:	andeq	r8, r2, r0, lsl #2
   11898:	andeq	r8, r2, ip, ror #2
   1189c:	push	{r4, r5, r6, r7, r8, lr}
   118a0:	mov	r6, r0
   118a4:	mov	r5, r1
   118a8:	ldr	r1, [pc, #256]	; 119b0 <__assert_fail@plt+0x97c>
   118ac:	bl	10dac <strcmp@plt>
   118b0:	cmp	r0, #0
   118b4:	bne	11928 <__assert_fail@plt+0x8f4>
   118b8:	mov	r2, #1
   118bc:	ldr	r3, [pc, #240]	; 119b4 <__assert_fail@plt+0x980>
   118c0:	strb	r2, [r3, #29]
   118c4:	ldr	r3, [pc, #236]	; 119b8 <__assert_fail@plt+0x984>
   118c8:	ldr	r4, [r3]
   118cc:	mov	r1, #2
   118d0:	mov	r0, r4
   118d4:	bl	12ad0 <__assert_fail@plt+0x1a9c>
   118d8:	mov	r0, r4
   118dc:	blx	r5
   118e0:	bl	10f20 <__errno_location@plt>
   118e4:	mov	r7, r0
   118e8:	ldr	r5, [r0]
   118ec:	ldr	r3, [r4]
   118f0:	and	r3, r3, #32
   118f4:	cmp	r3, #0
   118f8:	moveq	r5, #0
   118fc:	ldr	r1, [pc, #172]	; 119b0 <__assert_fail@plt+0x97c>
   11900:	mov	r0, r6
   11904:	bl	10dac <strcmp@plt>
   11908:	cmp	r0, #0
   1190c:	bne	11970 <__assert_fail@plt+0x93c>
   11910:	mov	r0, r4
   11914:	bl	10fe0 <clearerr_unlocked@plt>
   11918:	cmp	r5, #0
   1191c:	bne	11984 <__assert_fail@plt+0x950>
   11920:	mov	r0, #1
   11924:	pop	{r4, r5, r6, r7, r8, pc}
   11928:	ldr	r1, [pc, #140]	; 119bc <__assert_fail@plt+0x988>
   1192c:	mov	r0, r6
   11930:	bl	10fec <fopen64@plt>
   11934:	subs	r4, r0, #0
   11938:	bne	118cc <__assert_fail@plt+0x898>
   1193c:	bl	10f20 <__errno_location@plt>
   11940:	ldr	r4, [r0]
   11944:	mov	r2, r6
   11948:	mov	r1, #3
   1194c:	mov	r0, #0
   11950:	bl	14b4c <__assert_fail@plt+0x3b18>
   11954:	mov	r3, r0
   11958:	ldr	r2, [pc, #96]	; 119c0 <__assert_fail@plt+0x98c>
   1195c:	mov	r1, r4
   11960:	mov	r0, #0
   11964:	bl	10ea8 <error@plt>
   11968:	mov	r0, #0
   1196c:	pop	{r4, r5, r6, r7, r8, pc}
   11970:	mov	r0, r4
   11974:	bl	12b04 <__assert_fail@plt+0x1ad0>
   11978:	cmn	r0, #1
   1197c:	ldreq	r5, [r7]
   11980:	b	11918 <__assert_fail@plt+0x8e4>
   11984:	mov	r2, r6
   11988:	mov	r1, #3
   1198c:	mov	r0, #0
   11990:	bl	14b4c <__assert_fail@plt+0x3b18>
   11994:	mov	r3, r0
   11998:	ldr	r2, [pc, #32]	; 119c0 <__assert_fail@plt+0x98c>
   1199c:	mov	r1, r5
   119a0:	mov	r0, #0
   119a4:	bl	10ea8 <error@plt>
   119a8:	mov	r0, #0
   119ac:	pop	{r4, r5, r6, r7, r8, pc}
   119b0:	andeq	r6, r1, r8, asr sp
   119b4:	andeq	r8, r2, r8, ror r1
   119b8:	andeq	r8, r2, r8, ror #2
   119bc:	andeq	r6, r1, r4, ror #24
   119c0:	andeq	r6, r1, ip, ror #28
   119c4:	push	{lr}		; (str lr, [sp, #-4]!)
   119c8:	sub	sp, sp, #60	; 0x3c
   119cc:	subs	r6, r0, #0
   119d0:	beq	11a0c <__assert_fail@plt+0x9d8>
   119d4:	ldr	r3, [pc, #896]	; 11d5c <__assert_fail@plt+0xd28>
   119d8:	ldr	r4, [r3]
   119dc:	mov	r2, #5
   119e0:	ldr	r1, [pc, #888]	; 11d60 <__assert_fail@plt+0xd2c>
   119e4:	mov	r0, #0
   119e8:	bl	10e3c <dcgettext@plt>
   119ec:	ldr	r3, [pc, #880]	; 11d64 <__assert_fail@plt+0xd30>
   119f0:	ldr	r3, [r3]
   119f4:	mov	r2, r0
   119f8:	mov	r1, #1
   119fc:	mov	r0, r4
   11a00:	bl	10f68 <__fprintf_chk@plt>
   11a04:	mov	r0, r6
   11a08:	bl	10efc <exit@plt>
   11a0c:	mov	r2, #5
   11a10:	ldr	r1, [pc, #848]	; 11d68 <__assert_fail@plt+0xd34>
   11a14:	mov	r0, #0
   11a18:	bl	10e3c <dcgettext@plt>
   11a1c:	ldr	r3, [pc, #832]	; 11d64 <__assert_fail@plt+0xd30>
   11a20:	ldr	r2, [r3]
   11a24:	mov	r1, r0
   11a28:	mov	r0, #1
   11a2c:	bl	10f50 <__printf_chk@plt>
   11a30:	mov	r2, #5
   11a34:	ldr	r1, [pc, #816]	; 11d6c <__assert_fail@plt+0xd38>
   11a38:	mov	r0, #0
   11a3c:	bl	10e3c <dcgettext@plt>
   11a40:	ldr	r4, [pc, #808]	; 11d70 <__assert_fail@plt+0xd3c>
   11a44:	ldr	r1, [r4]
   11a48:	bl	10d94 <fputs_unlocked@plt>
   11a4c:	mov	r2, #5
   11a50:	ldr	r1, [pc, #796]	; 11d74 <__assert_fail@plt+0xd40>
   11a54:	mov	r0, #0
   11a58:	bl	10e3c <dcgettext@plt>
   11a5c:	ldr	r1, [r4]
   11a60:	bl	10d94 <fputs_unlocked@plt>
   11a64:	mov	r2, #5
   11a68:	ldr	r1, [pc, #776]	; 11d78 <__assert_fail@plt+0xd44>
   11a6c:	mov	r0, #0
   11a70:	bl	10e3c <dcgettext@plt>
   11a74:	ldr	r1, [r4]
   11a78:	bl	10d94 <fputs_unlocked@plt>
   11a7c:	mov	r2, #5
   11a80:	ldr	r1, [pc, #756]	; 11d7c <__assert_fail@plt+0xd48>
   11a84:	mov	r0, #0
   11a88:	bl	10e3c <dcgettext@plt>
   11a8c:	ldr	r1, [r4]
   11a90:	bl	10d94 <fputs_unlocked@plt>
   11a94:	mov	r2, #5
   11a98:	ldr	r1, [pc, #736]	; 11d80 <__assert_fail@plt+0xd4c>
   11a9c:	mov	r0, #0
   11aa0:	bl	10e3c <dcgettext@plt>
   11aa4:	ldr	r1, [r4]
   11aa8:	bl	10d94 <fputs_unlocked@plt>
   11aac:	mov	r2, #5
   11ab0:	ldr	r1, [pc, #716]	; 11d84 <__assert_fail@plt+0xd50>
   11ab4:	mov	r0, #0
   11ab8:	bl	10e3c <dcgettext@plt>
   11abc:	ldr	r1, [r4]
   11ac0:	bl	10d94 <fputs_unlocked@plt>
   11ac4:	mov	r2, #5
   11ac8:	ldr	r1, [pc, #696]	; 11d88 <__assert_fail@plt+0xd54>
   11acc:	mov	r0, #0
   11ad0:	bl	10e3c <dcgettext@plt>
   11ad4:	ldr	r1, [r4]
   11ad8:	bl	10d94 <fputs_unlocked@plt>
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #676]	; 11d8c <__assert_fail@plt+0xd58>
   11ae4:	mov	r0, #0
   11ae8:	bl	10e3c <dcgettext@plt>
   11aec:	ldr	r1, [r4]
   11af0:	bl	10d94 <fputs_unlocked@plt>
   11af4:	mov	r2, #5
   11af8:	ldr	r1, [pc, #656]	; 11d90 <__assert_fail@plt+0xd5c>
   11afc:	mov	r0, #0
   11b00:	bl	10e3c <dcgettext@plt>
   11b04:	ldr	r1, [r4]
   11b08:	bl	10d94 <fputs_unlocked@plt>
   11b0c:	mov	r2, #5
   11b10:	ldr	r1, [pc, #636]	; 11d94 <__assert_fail@plt+0xd60>
   11b14:	mov	r0, #0
   11b18:	bl	10e3c <dcgettext@plt>
   11b1c:	ldr	r1, [r4]
   11b20:	bl	10d94 <fputs_unlocked@plt>
   11b24:	mov	r2, #5
   11b28:	ldr	r1, [pc, #616]	; 11d98 <__assert_fail@plt+0xd64>
   11b2c:	mov	r0, #0
   11b30:	bl	10e3c <dcgettext@plt>
   11b34:	ldr	r1, [r4]
   11b38:	bl	10d94 <fputs_unlocked@plt>
   11b3c:	mov	r2, #5
   11b40:	ldr	r1, [pc, #596]	; 11d9c <__assert_fail@plt+0xd68>
   11b44:	mov	r0, #0
   11b48:	bl	10e3c <dcgettext@plt>
   11b4c:	ldr	r1, [r4]
   11b50:	bl	10d94 <fputs_unlocked@plt>
   11b54:	mov	ip, sp
   11b58:	ldr	lr, [pc, #576]	; 11da0 <__assert_fail@plt+0xd6c>
   11b5c:	ldm	lr!, {r0, r1, r2, r3}
   11b60:	stmia	ip!, {r0, r1, r2, r3}
   11b64:	ldm	lr!, {r0, r1, r2, r3}
   11b68:	stmia	ip!, {r0, r1, r2, r3}
   11b6c:	ldm	lr!, {r0, r1, r2, r3}
   11b70:	stmia	ip!, {r0, r1, r2, r3}
   11b74:	ldm	lr, {r0, r1}
   11b78:	stm	ip, {r0, r1}
   11b7c:	ldr	r1, [sp]
   11b80:	cmp	r1, #0
   11b84:	moveq	r4, sp
   11b88:	beq	11bb0 <__assert_fail@plt+0xb7c>
   11b8c:	mov	r4, sp
   11b90:	ldr	r5, [pc, #524]	; 11da4 <__assert_fail@plt+0xd70>
   11b94:	mov	r0, r5
   11b98:	bl	10dac <strcmp@plt>
   11b9c:	cmp	r0, #0
   11ba0:	beq	11bb0 <__assert_fail@plt+0xb7c>
   11ba4:	ldr	r1, [r4, #8]!
   11ba8:	cmp	r1, #0
   11bac:	bne	11b94 <__assert_fail@plt+0xb60>
   11bb0:	ldr	r4, [r4, #4]
   11bb4:	cmp	r4, #0
   11bb8:	beq	11ccc <__assert_fail@plt+0xc98>
   11bbc:	mov	r2, #5
   11bc0:	ldr	r1, [pc, #480]	; 11da8 <__assert_fail@plt+0xd74>
   11bc4:	mov	r0, #0
   11bc8:	bl	10e3c <dcgettext@plt>
   11bcc:	ldr	r3, [pc, #472]	; 11dac <__assert_fail@plt+0xd78>
   11bd0:	ldr	r2, [pc, #472]	; 11db0 <__assert_fail@plt+0xd7c>
   11bd4:	mov	r1, r0
   11bd8:	mov	r0, #1
   11bdc:	bl	10f50 <__printf_chk@plt>
   11be0:	mov	r1, #0
   11be4:	mov	r0, #5
   11be8:	bl	10fbc <setlocale@plt>
   11bec:	cmp	r0, #0
   11bf0:	beq	11c08 <__assert_fail@plt+0xbd4>
   11bf4:	mov	r2, #3
   11bf8:	ldr	r1, [pc, #436]	; 11db4 <__assert_fail@plt+0xd80>
   11bfc:	bl	11010 <strncmp@plt>
   11c00:	cmp	r0, #0
   11c04:	bne	11c68 <__assert_fail@plt+0xc34>
   11c08:	mov	r2, #5
   11c0c:	ldr	r1, [pc, #420]	; 11db8 <__assert_fail@plt+0xd84>
   11c10:	mov	r0, #0
   11c14:	bl	10e3c <dcgettext@plt>
   11c18:	ldr	r5, [pc, #388]	; 11da4 <__assert_fail@plt+0xd70>
   11c1c:	mov	r3, r5
   11c20:	ldr	r2, [pc, #388]	; 11dac <__assert_fail@plt+0xd78>
   11c24:	mov	r1, r0
   11c28:	mov	r0, #1
   11c2c:	bl	10f50 <__printf_chk@plt>
   11c30:	mov	r2, #5
   11c34:	ldr	r1, [pc, #384]	; 11dbc <__assert_fail@plt+0xd88>
   11c38:	mov	r0, #0
   11c3c:	bl	10e3c <dcgettext@plt>
   11c40:	mov	r1, r0
   11c44:	ldr	r2, [pc, #372]	; 11dc0 <__assert_fail@plt+0xd8c>
   11c48:	ldr	r3, [pc, #372]	; 11dc4 <__assert_fail@plt+0xd90>
   11c4c:	cmp	r4, r5
   11c50:	movne	r3, r2
   11c54:	mov	r2, r4
   11c58:	mov	r0, #1
   11c5c:	bl	10f50 <__printf_chk@plt>
   11c60:	b	11a04 <__assert_fail@plt+0x9d0>
   11c64:	ldr	r4, [pc, #312]	; 11da4 <__assert_fail@plt+0xd70>
   11c68:	mov	r2, #5
   11c6c:	ldr	r1, [pc, #340]	; 11dc8 <__assert_fail@plt+0xd94>
   11c70:	mov	r0, #0
   11c74:	bl	10e3c <dcgettext@plt>
   11c78:	ldr	r3, [pc, #240]	; 11d70 <__assert_fail@plt+0xd3c>
   11c7c:	ldr	r1, [r3]
   11c80:	bl	10d94 <fputs_unlocked@plt>
   11c84:	b	11c08 <__assert_fail@plt+0xbd4>
   11c88:	mov	r2, #5
   11c8c:	ldr	r1, [pc, #292]	; 11db8 <__assert_fail@plt+0xd84>
   11c90:	mov	r0, #0
   11c94:	bl	10e3c <dcgettext@plt>
   11c98:	ldr	r4, [pc, #260]	; 11da4 <__assert_fail@plt+0xd70>
   11c9c:	mov	r3, r4
   11ca0:	ldr	r2, [pc, #260]	; 11dac <__assert_fail@plt+0xd78>
   11ca4:	mov	r1, r0
   11ca8:	mov	r0, #1
   11cac:	bl	10f50 <__printf_chk@plt>
   11cb0:	mov	r2, #5
   11cb4:	ldr	r1, [pc, #256]	; 11dbc <__assert_fail@plt+0xd88>
   11cb8:	mov	r0, #0
   11cbc:	bl	10e3c <dcgettext@plt>
   11cc0:	mov	r1, r0
   11cc4:	ldr	r3, [pc, #248]	; 11dc4 <__assert_fail@plt+0xd90>
   11cc8:	b	11c54 <__assert_fail@plt+0xc20>
   11ccc:	mov	r2, #5
   11cd0:	ldr	r1, [pc, #208]	; 11da8 <__assert_fail@plt+0xd74>
   11cd4:	mov	r0, #0
   11cd8:	bl	10e3c <dcgettext@plt>
   11cdc:	ldr	r3, [pc, #200]	; 11dac <__assert_fail@plt+0xd78>
   11ce0:	ldr	r2, [pc, #200]	; 11db0 <__assert_fail@plt+0xd7c>
   11ce4:	mov	r1, r0
   11ce8:	mov	r0, #1
   11cec:	bl	10f50 <__printf_chk@plt>
   11cf0:	mov	r1, #0
   11cf4:	mov	r0, #5
   11cf8:	bl	10fbc <setlocale@plt>
   11cfc:	cmp	r0, #0
   11d00:	beq	11c88 <__assert_fail@plt+0xc54>
   11d04:	mov	r2, #3
   11d08:	ldr	r1, [pc, #164]	; 11db4 <__assert_fail@plt+0xd80>
   11d0c:	bl	11010 <strncmp@plt>
   11d10:	cmp	r0, #0
   11d14:	bne	11c64 <__assert_fail@plt+0xc30>
   11d18:	mov	r2, #5
   11d1c:	ldr	r1, [pc, #148]	; 11db8 <__assert_fail@plt+0xd84>
   11d20:	mov	r0, #0
   11d24:	bl	10e3c <dcgettext@plt>
   11d28:	ldr	r4, [pc, #116]	; 11da4 <__assert_fail@plt+0xd70>
   11d2c:	mov	r3, r4
   11d30:	ldr	r2, [pc, #116]	; 11dac <__assert_fail@plt+0xd78>
   11d34:	mov	r1, r0
   11d38:	mov	r0, #1
   11d3c:	bl	10f50 <__printf_chk@plt>
   11d40:	mov	r2, #5
   11d44:	ldr	r1, [pc, #112]	; 11dbc <__assert_fail@plt+0xd88>
   11d48:	mov	r0, #0
   11d4c:	bl	10e3c <dcgettext@plt>
   11d50:	mov	r1, r0
   11d54:	ldr	r3, [pc, #104]	; 11dc4 <__assert_fail@plt+0xd90>
   11d58:	b	11c54 <__assert_fail@plt+0xc20>
   11d5c:	andeq	r8, r2, r0, ror #2
   11d60:	andeq	r6, r1, r0, lsl r3
   11d64:			; <UNDEFINED> instruction: 0x000281b0
   11d68:	andeq	r6, r1, r8, lsr r3
   11d6c:	andeq	r6, r1, r8, asr r3
   11d70:	andeq	r8, r2, ip, ror #2
   11d74:	muleq	r1, ip, r3
   11d78:	ldrdeq	r6, [r1], -r4
   11d7c:	andeq	r6, r1, r0, lsr #8
   11d80:	ldrdeq	r6, [r1], -r4
   11d84:	andeq	r6, r1, r4, asr #11
   11d88:	andeq	r6, r1, r8, lsr r6
   11d8c:	andeq	r6, r1, ip, lsl #14
   11d90:	andeq	r6, r1, ip, asr #14
   11d94:	andeq	r6, r1, ip, ror r7
   11d98:			; <UNDEFINED> instruction: 0x000167b4
   11d9c:	andeq	r6, r1, r0, lsl #17
   11da0:	andeq	r6, r1, r8, lsl #4
   11da4:	andeq	r6, r1, ip, lsl #6
   11da8:	andeq	r6, r1, r8, lsl #19
   11dac:	andeq	r6, r1, r0, lsr #19
   11db0:	andeq	r6, r1, r8, asr #19
   11db4:	ldrdeq	r6, [r1], -r8
   11db8:	andeq	r6, r1, r4, lsr #20
   11dbc:	andeq	r6, r1, r0, asr #20
   11dc0:	ldrdeq	r6, [r1], -r0
   11dc4:	andeq	r6, r1, r4, ror #23
   11dc8:	ldrdeq	r6, [r1], -ip
   11dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dd0:	sub	sp, sp, #28
   11dd4:	mov	r5, r0
   11dd8:	mov	r4, r1
   11ddc:	ldr	r0, [r1]
   11de0:	bl	13164 <__assert_fail@plt+0x2130>
   11de4:	ldr	r1, [pc, #1032]	; 121f4 <__assert_fail@plt+0x11c0>
   11de8:	mov	r0, #6
   11dec:	bl	10fbc <setlocale@plt>
   11df0:	ldr	r6, [pc, #1024]	; 121f8 <__assert_fail@plt+0x11c4>
   11df4:	ldr	r1, [pc, #1024]	; 121fc <__assert_fail@plt+0x11c8>
   11df8:	mov	r0, r6
   11dfc:	bl	11004 <bindtextdomain@plt>
   11e00:	mov	r0, r6
   11e04:	bl	10e54 <textdomain@plt>
   11e08:	ldr	r0, [pc, #1008]	; 12200 <__assert_fail@plt+0x11cc>
   11e0c:	bl	161d8 <__assert_fail@plt+0x51a4>
   11e10:	ldr	r2, [pc, #1004]	; 12204 <__assert_fail@plt+0x11d0>
   11e14:	mov	r3, #0
   11e18:	strb	r3, [r2, #4]
   11e1c:	strb	r3, [r2, #16]
   11e20:	strb	r3, [r2, #29]
   11e24:	mov	r8, r3
   11e28:	str	r3, [sp, #16]
   11e2c:	str	r3, [sp, #20]
   11e30:	ldr	r6, [pc, #976]	; 12208 <__assert_fail@plt+0x11d4>
   11e34:	ldr	r9, [pc, #976]	; 1220c <__assert_fail@plt+0x11d8>
   11e38:	mov	r7, r2
   11e3c:	ldr	sl, [pc, #972]	; 12210 <__assert_fail@plt+0x11dc>
   11e40:	mov	r3, #0
   11e44:	str	r3, [sp]
   11e48:	mov	r3, r6
   11e4c:	ldr	r2, [pc, #960]	; 12214 <__assert_fail@plt+0x11e0>
   11e50:	mov	r1, r4
   11e54:	mov	r0, r5
   11e58:	bl	10ee4 <getopt_long@plt>
   11e5c:	cmn	r0, #1
   11e60:	beq	11ff8 <__assert_fail@plt+0xfc4>
   11e64:	cmp	r0, #102	; 0x66
   11e68:	beq	11f18 <__assert_fail@plt+0xee4>
   11e6c:	ble	11e98 <__assert_fail@plt+0xe64>
   11e70:	cmp	r0, #122	; 0x7a
   11e74:	beq	11f9c <__assert_fail@plt+0xf68>
   11e78:	bgt	11ef4 <__assert_fail@plt+0xec0>
   11e7c:	cmp	r0, #110	; 0x6e
   11e80:	beq	11e40 <__assert_fail@plt+0xe0c>
   11e84:	cmp	r0, #115	; 0x73
   11e88:	bne	11ff0 <__assert_fail@plt+0xfbc>
   11e8c:	mov	r3, #1
   11e90:	strb	r3, [r7, #4]
   11e94:	b	11e40 <__assert_fail@plt+0xe0c>
   11e98:	cmp	r0, #99	; 0x63
   11e9c:	bgt	11ec0 <__assert_fail@plt+0xe8c>
   11ea0:	cmp	r0, #98	; 0x62
   11ea4:	bge	11f10 <__assert_fail@plt+0xedc>
   11ea8:	cmn	r0, #3
   11eac:	beq	11fac <__assert_fail@plt+0xf78>
   11eb0:	cmn	r0, #2
   11eb4:	bne	11ff0 <__assert_fail@plt+0xfbc>
   11eb8:	mov	r0, #0
   11ebc:	bl	119c4 <__assert_fail@plt+0x990>
   11ec0:	cmp	r0, #100	; 0x64
   11ec4:	bne	11ff0 <__assert_fail@plt+0xfbc>
   11ec8:	ldr	r2, [r9]
   11ecc:	ldrb	r3, [r2]
   11ed0:	cmp	r3, #0
   11ed4:	beq	11ee4 <__assert_fail@plt+0xeb0>
   11ed8:	ldrb	r2, [r2, #1]
   11edc:	cmp	r2, #0
   11ee0:	bne	11f4c <__assert_fail@plt+0xf18>
   11ee4:	strb	r3, [r7, #16]
   11ee8:	mov	r3, #1
   11eec:	str	r3, [sp, #20]
   11ef0:	b	11e40 <__assert_fail@plt+0xe0c>
   11ef4:	cmp	r0, #256	; 0x100
   11ef8:	beq	11f74 <__assert_fail@plt+0xf40>
   11efc:	cmp	r0, sl
   11f00:	bne	11ff0 <__assert_fail@plt+0xfbc>
   11f04:	mov	r3, #1
   11f08:	strb	r3, [r7, #30]
   11f0c:	b	11e40 <__assert_fail@plt+0xe0c>
   11f10:	mov	r3, #1
   11f14:	str	r3, [sp, #16]
   11f18:	cmp	r8, #0
   11f1c:	ldreq	r8, [r9]
   11f20:	beq	11e40 <__assert_fail@plt+0xe0c>
   11f24:	mov	r2, #5
   11f28:	ldr	r1, [pc, #744]	; 12218 <__assert_fail@plt+0x11e4>
   11f2c:	mov	r0, #0
   11f30:	bl	10e3c <dcgettext@plt>
   11f34:	mov	r2, r0
   11f38:	mov	r1, #0
   11f3c:	mov	r0, r1
   11f40:	bl	10ea8 <error@plt>
   11f44:	mov	r0, #1
   11f48:	bl	119c4 <__assert_fail@plt+0x990>
   11f4c:	mov	r2, #5
   11f50:	ldr	r1, [pc, #708]	; 1221c <__assert_fail@plt+0x11e8>
   11f54:	mov	r0, #0
   11f58:	bl	10e3c <dcgettext@plt>
   11f5c:	mov	r2, r0
   11f60:	mov	r1, #0
   11f64:	mov	r0, r1
   11f68:	bl	10ea8 <error@plt>
   11f6c:	mov	r0, #1
   11f70:	bl	119c4 <__assert_fail@plt+0x990>
   11f74:	ldr	fp, [r9]
   11f78:	ldrb	r3, [fp]
   11f7c:	cmp	r3, #0
   11f80:	moveq	r0, #1
   11f84:	beq	11f90 <__assert_fail@plt+0xf5c>
   11f88:	mov	r0, fp
   11f8c:	bl	10f08 <strlen@plt>
   11f90:	str	r0, [r7, #20]
   11f94:	str	fp, [r7, #24]
   11f98:	b	11e40 <__assert_fail@plt+0xe0c>
   11f9c:	mov	r3, #0
   11fa0:	ldr	r2, [pc, #632]	; 12220 <__assert_fail@plt+0x11ec>
   11fa4:	strb	r3, [r2]
   11fa8:	b	11e40 <__assert_fail@plt+0xe0c>
   11fac:	mov	r4, #0
   11fb0:	str	r4, [sp, #12]
   11fb4:	ldr	r3, [pc, #616]	; 12224 <__assert_fail@plt+0x11f0>
   11fb8:	str	r3, [sp, #8]
   11fbc:	ldr	r3, [pc, #612]	; 12228 <__assert_fail@plt+0x11f4>
   11fc0:	str	r3, [sp, #4]
   11fc4:	ldr	r3, [pc, #608]	; 1222c <__assert_fail@plt+0x11f8>
   11fc8:	str	r3, [sp]
   11fcc:	ldr	r3, [pc, #604]	; 12230 <__assert_fail@plt+0x11fc>
   11fd0:	ldr	r3, [r3]
   11fd4:	ldr	r2, [pc, #600]	; 12234 <__assert_fail@plt+0x1200>
   11fd8:	ldr	r1, [pc, #600]	; 12238 <__assert_fail@plt+0x1204>
   11fdc:	ldr	r0, [pc, #600]	; 1223c <__assert_fail@plt+0x1208>
   11fe0:	ldr	r0, [r0]
   11fe4:	bl	15180 <__assert_fail@plt+0x414c>
   11fe8:	mov	r0, r4
   11fec:	bl	10efc <exit@plt>
   11ff0:	mov	r0, #1
   11ff4:	bl	119c4 <__assert_fail@plt+0x990>
   11ff8:	cmp	r8, #0
   11ffc:	beq	1205c <__assert_fail@plt+0x1028>
   12000:	ldr	r3, [sp, #16]
   12004:	cmp	r3, #0
   12008:	beq	120d4 <__assert_fail@plt+0x10a0>
   1200c:	ldr	r3, [sp, #20]
   12010:	cmp	r3, #0
   12014:	bne	12084 <__assert_fail@plt+0x1050>
   12018:	ldr	r3, [pc, #484]	; 12204 <__assert_fail@plt+0x11d0>
   1201c:	ldrb	r3, [r3, #4]
   12020:	cmp	r3, #0
   12024:	bne	120ac <__assert_fail@plt+0x1078>
   12028:	ldr	r3, [pc, #468]	; 12204 <__assert_fail@plt+0x11d0>
   1202c:	ldrb	r3, [r3, #30]
   12030:	cmp	r3, #0
   12034:	moveq	r3, #4
   12038:	moveq	r1, #0
   1203c:	beq	120ec <__assert_fail@plt+0x10b8>
   12040:	mov	r1, #6
   12044:	mov	r0, r8
   12048:	bl	12300 <__assert_fail@plt+0x12cc>
   1204c:	mov	r2, #9
   12050:	ldr	r3, [pc, #428]	; 12204 <__assert_fail@plt+0x11d0>
   12054:	strb	r2, [r3, #16]
   12058:	b	12104 <__assert_fail@plt+0x10d0>
   1205c:	mov	r2, #5
   12060:	ldr	r1, [pc, #472]	; 12240 <__assert_fail@plt+0x120c>
   12064:	mov	r0, #0
   12068:	bl	10e3c <dcgettext@plt>
   1206c:	mov	r2, r0
   12070:	mov	r1, #0
   12074:	mov	r0, r1
   12078:	bl	10ea8 <error@plt>
   1207c:	mov	r0, #1
   12080:	bl	119c4 <__assert_fail@plt+0x990>
   12084:	mov	r2, #5
   12088:	ldr	r1, [pc, #436]	; 12244 <__assert_fail@plt+0x1210>
   1208c:	mov	r0, #0
   12090:	bl	10e3c <dcgettext@plt>
   12094:	mov	r2, r0
   12098:	mov	r1, #0
   1209c:	mov	r0, r1
   120a0:	bl	10ea8 <error@plt>
   120a4:	mov	r0, #1
   120a8:	bl	119c4 <__assert_fail@plt+0x990>
   120ac:	mov	r2, #5
   120b0:	ldr	r1, [pc, #400]	; 12248 <__assert_fail@plt+0x1214>
   120b4:	mov	r0, #0
   120b8:	bl	10e3c <dcgettext@plt>
   120bc:	mov	r2, r0
   120c0:	mov	r1, #0
   120c4:	mov	r0, r1
   120c8:	bl	10ea8 <error@plt>
   120cc:	mov	r0, #1
   120d0:	bl	119c4 <__assert_fail@plt+0x990>
   120d4:	ldr	r3, [pc, #296]	; 12204 <__assert_fail@plt+0x11d0>
   120d8:	ldrb	r3, [r3, #30]
   120dc:	cmp	r3, #0
   120e0:	moveq	r1, r3
   120e4:	movne	r3, #0
   120e8:	movne	r1, #2
   120ec:	orr	r1, r1, r3
   120f0:	mov	r0, r8
   120f4:	bl	12300 <__assert_fail@plt+0x12cc>
   120f8:	ldr	r3, [sp, #20]
   120fc:	cmp	r3, #0
   12100:	beq	1204c <__assert_fail@plt+0x1018>
   12104:	ldr	r3, [pc, #248]	; 12204 <__assert_fail@plt+0x11d0>
   12108:	ldr	r3, [r3, #24]
   1210c:	cmp	r3, #0
   12110:	beq	12190 <__assert_fail@plt+0x115c>
   12114:	ldr	r3, [pc, #304]	; 1224c <__assert_fail@plt+0x1218>
   12118:	ldr	r8, [pc, #304]	; 12250 <__assert_fail@plt+0x121c>
   1211c:	ldr	r2, [sp, #16]
   12120:	cmp	r2, #0
   12124:	moveq	r8, r3
   12128:	ldr	r3, [pc, #292]	; 12254 <__assert_fail@plt+0x1220>
   1212c:	ldr	r3, [r3]
   12130:	cmp	r5, r3
   12134:	beq	121b0 <__assert_fail@plt+0x117c>
   12138:	movle	r6, #1
   1213c:	ble	12170 <__assert_fail@plt+0x113c>
   12140:	mov	r6, #1
   12144:	ldr	r7, [pc, #264]	; 12254 <__assert_fail@plt+0x1220>
   12148:	mov	r1, r8
   1214c:	ldr	r0, [r4, r3, lsl #2]
   12150:	bl	1189c <__assert_fail@plt+0x868>
   12154:	and	r6, r6, r0
   12158:	uxtb	r6, r6
   1215c:	ldr	r3, [r7]
   12160:	add	r3, r3, #1
   12164:	str	r3, [r7]
   12168:	cmp	r5, r3
   1216c:	bgt	12148 <__assert_fail@plt+0x1114>
   12170:	ldr	r3, [pc, #140]	; 12204 <__assert_fail@plt+0x11d0>
   12174:	ldrb	r3, [r3, #29]
   12178:	cmp	r3, #0
   1217c:	bne	121c4 <__assert_fail@plt+0x1190>
   12180:	eor	r0, r6, #1
   12184:	uxtb	r0, r0
   12188:	add	sp, sp, #28
   1218c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12190:	ldr	r3, [pc, #108]	; 12204 <__assert_fail@plt+0x11d0>
   12194:	ldrb	r1, [r3, #16]
   12198:	mov	r2, r3
   1219c:	strb	r1, [r2, #28]!
   121a0:	str	r2, [r3, #24]
   121a4:	mov	r2, #1
   121a8:	str	r2, [r3, #20]
   121ac:	b	12114 <__assert_fail@plt+0x10e0>
   121b0:	mov	r1, r8
   121b4:	ldr	r0, [pc, #156]	; 12258 <__assert_fail@plt+0x1224>
   121b8:	bl	1189c <__assert_fail@plt+0x868>
   121bc:	mov	r6, r0
   121c0:	b	12170 <__assert_fail@plt+0x113c>
   121c4:	ldr	r3, [pc, #144]	; 1225c <__assert_fail@plt+0x1228>
   121c8:	ldr	r0, [r3]
   121cc:	bl	12b04 <__assert_fail@plt+0x1ad0>
   121d0:	cmn	r0, #1
   121d4:	bne	12180 <__assert_fail@plt+0x114c>
   121d8:	bl	10f20 <__errno_location@plt>
   121dc:	ldr	r2, [pc, #116]	; 12258 <__assert_fail@plt+0x1224>
   121e0:	ldr	r1, [r0]
   121e4:	mov	r0, #0
   121e8:	bl	10ea8 <error@plt>
   121ec:	mov	r6, #0
   121f0:	b	12180 <__assert_fail@plt+0x114c>
   121f4:	ldrdeq	r6, [r1], -r0
   121f8:	andeq	r6, r1, ip, asr #19
   121fc:	andeq	r6, r1, r4, ror sl
   12200:			; <UNDEFINED> instruction: 0x000129b8
   12204:	andeq	r8, r2, r8, ror r1
   12208:	andeq	r6, r1, r0, asr #4
   1220c:	andeq	r8, r2, r0, ror r1
   12210:	andeq	r0, r0, r1, lsl #2
   12214:	andeq	r6, r1, r8, lsl #22
   12218:	andeq	r6, r1, ip, lsl #21
   1221c:	andeq	r6, r1, ip, lsr #21
   12220:	andeq	r8, r2, r0, lsl #2
   12224:	ldrdeq	r6, [r1], -r8
   12228:	andeq	r6, r1, r8, ror #21
   1222c:	strdeq	r6, [r1], -r8
   12230:	andeq	r8, r2, r4, lsl #2
   12234:	andeq	r6, r1, r8, asr #19
   12238:	andeq	r6, r1, ip, lsl #6
   1223c:	andeq	r8, r2, ip, ror #2
   12240:	andeq	r6, r1, r4, lsl fp
   12244:	andeq	r6, r1, ip, asr #22
   12248:	muleq	r1, r0, fp
   1224c:	andeq	r1, r1, r8, ror #2
   12250:	andeq	r1, r1, r4, ror #13
   12254:	andeq	r8, r2, r8, asr r1
   12258:	andeq	r6, r1, r8, asr sp
   1225c:	andeq	r8, r2, r8, ror #2
   12260:	ldr	r0, [r0]
   12264:	ldr	r3, [r1]
   12268:	cmp	r0, r3
   1226c:	blt	12280 <__assert_fail@plt+0x124c>
   12270:	cmp	r0, r3
   12274:	movle	r0, #0
   12278:	movgt	r0, #1
   1227c:	bx	lr
   12280:	mvn	r0, #0
   12284:	bx	lr
   12288:	push	{r4, r5, r6, r7, r8, lr}
   1228c:	mov	r6, r0
   12290:	mov	r7, r1
   12294:	mov	r4, r2
   12298:	mov	r5, r3
   1229c:	ldr	r3, [pc, #88]	; 122fc <__assert_fail@plt+0x12c8>
   122a0:	ldr	r2, [r3]
   122a4:	ldr	r3, [r3, #4]
   122a8:	cmp	r2, r3
   122ac:	beq	122e0 <__assert_fail@plt+0x12ac>
   122b0:	ldr	r3, [pc, #68]	; 122fc <__assert_fail@plt+0x12c8>
   122b4:	ldr	r2, [r3]
   122b8:	ldr	r1, [r3, #8]
   122bc:	lsl	r2, r2, #4
   122c0:	strd	r6, [r1, r2]
   122c4:	ldr	r2, [r3]
   122c8:	ldr	r1, [r3, #8]
   122cc:	add	r1, r1, r2, lsl #4
   122d0:	strd	r4, [r1, #8]
   122d4:	add	r2, r2, #1
   122d8:	str	r2, [r3]
   122dc:	pop	{r4, r5, r6, r7, r8, pc}
   122e0:	ldr	r8, [pc, #20]	; 122fc <__assert_fail@plt+0x12c8>
   122e4:	mov	r2, #16
   122e8:	add	r1, r8, #4
   122ec:	ldr	r0, [r8, #8]
   122f0:	bl	15374 <__assert_fail@plt+0x4340>
   122f4:	str	r0, [r8, #8]
   122f8:	b	122b0 <__assert_fail@plt+0x127c>
   122fc:	muleq	r2, r8, r1
   12300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12304:	sub	sp, sp, #28
   12308:	mov	r4, r0
   1230c:	str	r1, [sp, #20]
   12310:	ands	r3, r1, #1
   12314:	str	r3, [sp, #16]
   12318:	beq	12340 <__assert_fail@plt+0x130c>
   1231c:	ldr	r1, [pc, #1588]	; 12958 <__assert_fail@plt+0x1924>
   12320:	bl	10dac <strcmp@plt>
   12324:	cmp	r0, #0
   12328:	bne	12370 <__assert_fail@plt+0x133c>
   1232c:	add	r4, r4, #1
   12330:	mov	r8, #1
   12334:	mov	r9, #0
   12338:	mov	r6, #1
   1233c:	b	1234c <__assert_fail@plt+0x1318>
   12340:	mov	r8, #0
   12344:	mov	r9, #0
   12348:	mov	r6, #0
   1234c:	add	r4, r4, #1
   12350:	mov	r7, r6
   12354:	mov	r3, #0
   12358:	str	r3, [sp, #12]
   1235c:	mov	sl, r3
   12360:	mov	r2, #1
   12364:	mov	r3, #0
   12368:	strd	r2, [sp]
   1236c:	b	124ec <__assert_fail@plt+0x14b8>
   12370:	mov	r8, #0
   12374:	mov	r9, #0
   12378:	mov	r6, #0
   1237c:	b	1234c <__assert_fail@plt+0x1318>
   12380:	mov	r7, r6
   12384:	strd	r8, [sp]
   12388:	mov	r8, #0
   1238c:	mov	r9, r8
   12390:	b	124e8 <__assert_fail@plt+0x14b4>
   12394:	cmp	r7, #0
   12398:	bne	123d8 <__assert_fail@plt+0x13a4>
   1239c:	orrs	r3, r8, r9
   123a0:	movne	r3, #0
   123a4:	andeq	r3, r6, #1
   123a8:	str	r3, [sp, #12]
   123ac:	cmp	r3, #0
   123b0:	bne	1240c <__assert_fail@plt+0x13d8>
   123b4:	cmp	r6, #0
   123b8:	bne	12380 <__assert_fail@plt+0x134c>
   123bc:	str	r6, [sp, #12]
   123c0:	mov	r8, #0
   123c4:	mov	r9, r8
   123c8:	mov	r7, #1
   123cc:	str	r7, [sp]
   123d0:	str	r8, [sp, #4]
   123d4:	b	124e8 <__assert_fail@plt+0x14b4>
   123d8:	ldr	r3, [sp, #20]
   123dc:	tst	r3, #4
   123e0:	mov	r2, #5
   123e4:	ldrne	r1, [pc, #1392]	; 1295c <__assert_fail@plt+0x1928>
   123e8:	ldreq	r1, [pc, #1392]	; 12960 <__assert_fail@plt+0x192c>
   123ec:	mov	r0, #0
   123f0:	bl	10e3c <dcgettext@plt>
   123f4:	mov	r2, r0
   123f8:	mov	r1, #0
   123fc:	mov	r0, r1
   12400:	bl	10ea8 <error@plt>
   12404:	mov	r0, #1
   12408:	bl	119c4 <__assert_fail@plt+0x990>
   1240c:	ldr	r3, [sp, #20]
   12410:	tst	r3, #4
   12414:	mov	r2, #5
   12418:	ldrne	r1, [pc, #1348]	; 12964 <__assert_fail@plt+0x1930>
   1241c:	ldreq	r1, [pc, #1348]	; 12968 <__assert_fail@plt+0x1934>
   12420:	mov	r0, #0
   12424:	bl	10e3c <dcgettext@plt>
   12428:	mov	r2, r0
   1242c:	mov	r1, #0
   12430:	mov	r0, r1
   12434:	bl	10ea8 <error@plt>
   12438:	mov	r0, #1
   1243c:	bl	119c4 <__assert_fail@plt+0x990>
   12440:	mov	r2, #5
   12444:	ldr	r1, [pc, #1312]	; 1296c <__assert_fail@plt+0x1938>
   12448:	mov	r0, #0
   1244c:	bl	10e3c <dcgettext@plt>
   12450:	mov	r2, r0
   12454:	mov	r1, #0
   12458:	mov	r0, r1
   1245c:	bl	10ea8 <error@plt>
   12460:	mov	r0, #1
   12464:	bl	119c4 <__assert_fail@plt+0x990>
   12468:	mvn	r2, #0
   1246c:	mvn	r3, #0
   12470:	ldrd	r0, [sp]
   12474:	bl	12288 <__assert_fail@plt+0x1254>
   12478:	b	124c0 <__assert_fail@plt+0x148c>
   1247c:	mov	r2, #5
   12480:	ldr	r1, [pc, #1256]	; 12970 <__assert_fail@plt+0x193c>
   12484:	mov	r0, #0
   12488:	bl	10e3c <dcgettext@plt>
   1248c:	mov	r2, r0
   12490:	mov	r1, #0
   12494:	mov	r0, r1
   12498:	bl	10ea8 <error@plt>
   1249c:	mov	r0, #1
   124a0:	bl	119c4 <__assert_fail@plt+0x990>
   124a4:	orrs	r3, r8, r9
   124a8:	beq	12584 <__assert_fail@plt+0x1550>
   124ac:	mov	r2, r8
   124b0:	mov	r3, r9
   124b4:	mov	r0, r8
   124b8:	mov	r1, r9
   124bc:	bl	12288 <__assert_fail@plt+0x1254>
   124c0:	ldr	r3, [sp, #8]
   124c4:	ldrb	r3, [r3, #-1]
   124c8:	cmp	r3, #0
   124cc:	beq	12714 <__assert_fail@plt+0x16e0>
   124d0:	mov	r8, #0
   124d4:	mov	r9, r8
   124d8:	str	r8, [sp, #12]
   124dc:	mov	r7, r8
   124e0:	mov	sl, r8
   124e4:	mov	r6, r8
   124e8:	add	r4, r4, #1
   124ec:	sub	fp, r4, #1
   124f0:	str	r4, [sp, #8]
   124f4:	ldrb	r5, [r4, #-1]
   124f8:	cmp	r5, #45	; 0x2d
   124fc:	beq	12394 <__assert_fail@plt+0x1360>
   12500:	cmp	r5, #44	; 0x2c
   12504:	beq	12528 <__assert_fail@plt+0x14f4>
   12508:	bl	10ef0 <__ctype_b_loc@plt>
   1250c:	ldr	r2, [r0]
   12510:	lsl	r3, r5, #1
   12514:	ldrh	r3, [r2, r3]
   12518:	cmp	r5, #0
   1251c:	orreq	r3, r3, #1
   12520:	tst	r3, #1
   12524:	beq	125b8 <__assert_fail@plt+0x1584>
   12528:	cmp	r7, #0
   1252c:	beq	124a4 <__assert_fail@plt+0x1470>
   12530:	orr	r6, r6, sl
   12534:	tst	r6, #255	; 0xff
   12538:	bne	12558 <__assert_fail@plt+0x1524>
   1253c:	ldr	r3, [sp, #16]
   12540:	cmp	r3, #0
   12544:	beq	12440 <__assert_fail@plt+0x140c>
   12548:	mov	r3, #1
   1254c:	str	r3, [sp]
   12550:	mov	r3, #0
   12554:	str	r3, [sp, #4]
   12558:	cmp	sl, #0
   1255c:	beq	12468 <__assert_fail@plt+0x1434>
   12560:	ldrd	r2, [sp]
   12564:	cmp	r3, r9
   12568:	cmpeq	r2, r8
   1256c:	bhi	1247c <__assert_fail@plt+0x1448>
   12570:	mov	r2, r8
   12574:	mov	r3, r9
   12578:	ldrd	r0, [sp]
   1257c:	bl	12288 <__assert_fail@plt+0x1254>
   12580:	b	124c0 <__assert_fail@plt+0x148c>
   12584:	ldr	r3, [sp, #20]
   12588:	tst	r3, #4
   1258c:	mov	r2, #5
   12590:	ldrne	r1, [pc, #972]	; 12964 <__assert_fail@plt+0x1930>
   12594:	ldreq	r1, [pc, #972]	; 12968 <__assert_fail@plt+0x1934>
   12598:	mov	r0, #0
   1259c:	bl	10e3c <dcgettext@plt>
   125a0:	mov	r2, r0
   125a4:	mov	r1, #0
   125a8:	mov	r0, r1
   125ac:	bl	10ea8 <error@plt>
   125b0:	mov	r0, #1
   125b4:	bl	119c4 <__assert_fail@plt+0x990>
   125b8:	sub	r3, r5, #48	; 0x30
   125bc:	cmp	r3, #9
   125c0:	bhi	126d0 <__assert_fail@plt+0x169c>
   125c4:	ldr	r3, [sp, #12]
   125c8:	cmp	r3, #0
   125cc:	beq	125e0 <__assert_fail@plt+0x15ac>
   125d0:	ldr	r3, [pc, #924]	; 12974 <__assert_fail@plt+0x1940>
   125d4:	ldr	r3, [r3, #12]
   125d8:	cmp	r3, #0
   125dc:	bne	125e8 <__assert_fail@plt+0x15b4>
   125e0:	ldr	r3, [pc, #908]	; 12974 <__assert_fail@plt+0x1940>
   125e4:	str	fp, [r3, #12]
   125e8:	cmp	r7, #0
   125ec:	moveq	r6, #1
   125f0:	cmp	r7, #0
   125f4:	movne	sl, r7
   125f8:	add	r3, pc, #848	; 0x350
   125fc:	ldrd	r2, [r3]
   12600:	cmp	r9, r3
   12604:	cmpeq	r8, r2
   12608:	bhi	12660 <__assert_fail@plt+0x162c>
   1260c:	mov	r1, #10
   12610:	umull	r2, r3, r8, r1
   12614:	mla	r3, r1, r9, r3
   12618:	sub	r5, r5, #48	; 0x30
   1261c:	adds	r2, r2, r5
   12620:	adc	r3, r3, r5, asr #31
   12624:	cmp	r3, r9
   12628:	cmpeq	r2, r8
   1262c:	movcc	r0, #1
   12630:	movcs	r0, #0
   12634:	and	r1, r2, r3
   12638:	cmn	r1, #1
   1263c:	movne	r1, #0
   12640:	moveq	r1, #1
   12644:	orrs	r1, r0, r1
   12648:	bne	12660 <__assert_fail@plt+0x162c>
   1264c:	mov	r8, r2
   12650:	mov	r9, r3
   12654:	mov	r3, #1
   12658:	str	r3, [sp, #12]
   1265c:	b	124e8 <__assert_fail@plt+0x14b4>
   12660:	ldr	r3, [pc, #780]	; 12974 <__assert_fail@plt+0x1940>
   12664:	ldr	r4, [r3, #12]
   12668:	ldr	r1, [pc, #776]	; 12978 <__assert_fail@plt+0x1944>
   1266c:	mov	r0, r4
   12670:	bl	11028 <strspn@plt>
   12674:	mov	r1, r0
   12678:	mov	r0, r4
   1267c:	bl	157a8 <__assert_fail@plt+0x4774>
   12680:	mov	r4, r0
   12684:	ldr	r3, [sp, #20]
   12688:	tst	r3, #4
   1268c:	mov	r2, #5
   12690:	ldrne	r1, [pc, #740]	; 1297c <__assert_fail@plt+0x1948>
   12694:	ldreq	r1, [pc, #740]	; 12980 <__assert_fail@plt+0x194c>
   12698:	mov	r0, #0
   1269c:	bl	10e3c <dcgettext@plt>
   126a0:	mov	r5, r0
   126a4:	mov	r0, r4
   126a8:	bl	14cb4 <__assert_fail@plt+0x3c80>
   126ac:	mov	r3, r0
   126b0:	mov	r2, r5
   126b4:	mov	r1, #0
   126b8:	mov	r0, r1
   126bc:	bl	10ea8 <error@plt>
   126c0:	mov	r0, r4
   126c4:	bl	12c10 <__assert_fail@plt+0x1bdc>
   126c8:	mov	r0, #1
   126cc:	bl	119c4 <__assert_fail@plt+0x990>
   126d0:	ldr	r3, [sp, #20]
   126d4:	tst	r3, #4
   126d8:	mov	r2, #5
   126dc:	ldrne	r1, [pc, #672]	; 12984 <__assert_fail@plt+0x1950>
   126e0:	ldreq	r1, [pc, #672]	; 12988 <__assert_fail@plt+0x1954>
   126e4:	mov	r0, #0
   126e8:	bl	10e3c <dcgettext@plt>
   126ec:	mov	r4, r0
   126f0:	mov	r0, fp
   126f4:	bl	14cb4 <__assert_fail@plt+0x3c80>
   126f8:	mov	r3, r0
   126fc:	mov	r2, r4
   12700:	mov	r1, #0
   12704:	mov	r0, r1
   12708:	bl	10ea8 <error@plt>
   1270c:	mov	r0, #1
   12710:	bl	119c4 <__assert_fail@plt+0x990>
   12714:	ldr	r3, [pc, #600]	; 12974 <__assert_fail@plt+0x1940>
   12718:	ldr	r1, [r3]
   1271c:	cmp	r1, #0
   12720:	beq	12748 <__assert_fail@plt+0x1714>
   12724:	ldr	r3, [pc, #608]	; 1298c <__assert_fail@plt+0x1958>
   12728:	mov	r2, #16
   1272c:	ldr	r0, [pc, #576]	; 12974 <__assert_fail@plt+0x1940>
   12730:	ldr	r0, [r0, #8]
   12734:	bl	10ff8 <qsort@plt>
   12738:	mov	r5, #0
   1273c:	mov	fp, r5
   12740:	ldr	sl, [pc, #556]	; 12974 <__assert_fail@plt+0x1940>
   12744:	b	12780 <__assert_fail@plt+0x174c>
   12748:	ldr	r3, [sp, #20]
   1274c:	tst	r3, #4
   12750:	mov	r2, #5
   12754:	ldrne	r1, [pc, #564]	; 12990 <__assert_fail@plt+0x195c>
   12758:	ldreq	r1, [pc, #564]	; 12994 <__assert_fail@plt+0x1960>
   1275c:	mov	r0, #0
   12760:	bl	10e3c <dcgettext@plt>
   12764:	mov	r2, r0
   12768:	mov	r1, #0
   1276c:	mov	r0, r1
   12770:	bl	10ea8 <error@plt>
   12774:	mov	r0, #1
   12778:	bl	119c4 <__assert_fail@plt+0x990>
   1277c:	add	r5, r5, #16
   12780:	ldr	r2, [sl]
   12784:	cmp	fp, r2
   12788:	bcs	12838 <__assert_fail@plt+0x1804>
   1278c:	add	fp, fp, #1
   12790:	cmp	r2, fp
   12794:	bls	1277c <__assert_fail@plt+0x1748>
   12798:	ldr	r1, [sl, #8]
   1279c:	lsl	r4, fp, #4
   127a0:	add	r0, r1, r4
   127a4:	add	r3, r1, r5
   127a8:	ldrd	r8, [r3, #8]
   127ac:	ldrd	r6, [r1, r4]
   127b0:	cmp	r7, r9
   127b4:	cmpeq	r6, r8
   127b8:	bhi	1277c <__assert_fail@plt+0x1748>
   127bc:	add	ip, r5, #32
   127c0:	str	ip, [sp, #8]
   127c4:	mvn	ip, #-268435456	; 0xf0000000
   127c8:	sub	ip, ip, fp
   127cc:	str	ip, [sp]
   127d0:	ldrd	r6, [r0, #8]
   127d4:	cmp	r7, r9
   127d8:	cmpeq	r6, r8
   127dc:	movcc	r6, r8
   127e0:	movcc	r7, r9
   127e4:	strd	r6, [r3, #8]
   127e8:	ldr	r3, [sp]
   127ec:	add	r2, r3, r2
   127f0:	lsl	r2, r2, #4
   127f4:	ldr	r3, [sp, #8]
   127f8:	add	r1, r1, r3
   127fc:	bl	10dd0 <memmove@plt>
   12800:	ldr	r2, [sl]
   12804:	sub	r2, r2, #1
   12808:	str	r2, [sl]
   1280c:	cmp	fp, r2
   12810:	bcs	1277c <__assert_fail@plt+0x1748>
   12814:	ldr	r1, [sl, #8]
   12818:	add	r0, r1, r4
   1281c:	add	r3, r1, r5
   12820:	ldrd	r8, [r3, #8]
   12824:	ldrd	r6, [r1, r4]
   12828:	cmp	r7, r9
   1282c:	cmpeq	r6, r8
   12830:	bls	127d0 <__assert_fail@plt+0x179c>
   12834:	b	1277c <__assert_fail@plt+0x1748>
   12838:	mov	r9, r2
   1283c:	ldr	r3, [sp, #20]
   12840:	tst	r3, #2
   12844:	bne	12890 <__assert_fail@plt+0x185c>
   12848:	ldr	r4, [pc, #292]	; 12974 <__assert_fail@plt+0x1940>
   1284c:	ldr	r1, [r4]
   12850:	add	r1, r1, #1
   12854:	str	r1, [r4]
   12858:	lsl	r1, r1, #4
   1285c:	ldr	r0, [r4, #8]
   12860:	bl	15280 <__assert_fail@plt+0x424c>
   12864:	str	r0, [r4, #8]
   12868:	ldr	r3, [r4]
   1286c:	sub	r3, r3, #-268435455	; 0xf0000001
   12870:	lsl	r3, r3, #4
   12874:	add	r2, r0, r3
   12878:	mvn	r4, #0
   1287c:	mvn	r5, #0
   12880:	strd	r4, [r2, #8]
   12884:	strd	r4, [r0, r3]
   12888:	add	sp, sp, #28
   1288c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12890:	ldr	r3, [pc, #220]	; 12974 <__assert_fail@plt+0x1940>
   12894:	ldr	r6, [r3, #8]
   12898:	mov	r2, #0
   1289c:	str	r2, [r3, #8]
   128a0:	str	r2, [r3]
   128a4:	str	r2, [r3, #4]
   128a8:	ldrd	r2, [r6]
   128ac:	cmp	r3, #0
   128b0:	cmpeq	r2, #1
   128b4:	bls	128cc <__assert_fail@plt+0x1898>
   128b8:	subs	r2, r2, #1
   128bc:	sbc	r3, r3, #0
   128c0:	mov	r0, #1
   128c4:	mov	r1, #0
   128c8:	bl	12288 <__assert_fail@plt+0x1254>
   128cc:	cmp	r9, #1
   128d0:	bls	1291c <__assert_fail@plt+0x18e8>
   128d4:	mov	r4, r6
   128d8:	mov	r5, #1
   128dc:	b	128f0 <__assert_fail@plt+0x18bc>
   128e0:	add	r5, r5, #1
   128e4:	add	r4, r4, #16
   128e8:	cmp	r9, r5
   128ec:	beq	1291c <__assert_fail@plt+0x18e8>
   128f0:	ldrd	r0, [r4, #8]
   128f4:	adds	r0, r0, #1
   128f8:	adc	r1, r1, #0
   128fc:	ldrd	r2, [r4, #16]
   12900:	cmp	r1, r3
   12904:	cmpeq	r0, r2
   12908:	beq	128e0 <__assert_fail@plt+0x18ac>
   1290c:	subs	r2, r2, #1
   12910:	sbc	r3, r3, #0
   12914:	bl	12288 <__assert_fail@plt+0x1254>
   12918:	b	128e0 <__assert_fail@plt+0x18ac>
   1291c:	add	r9, r6, r9, lsl #4
   12920:	ldrd	r0, [r9, #-8]
   12924:	mvn	r2, #0
   12928:	mvn	r3, #0
   1292c:	cmp	r1, r3
   12930:	cmpeq	r0, r2
   12934:	beq	12944 <__assert_fail@plt+0x1910>
   12938:	adds	r0, r0, #1
   1293c:	adc	r1, r1, #0
   12940:	bl	12288 <__assert_fail@plt+0x1254>
   12944:	mov	r0, r6
   12948:	bl	12c10 <__assert_fail@plt+0x1bdc>
   1294c:	b	12848 <__assert_fail@plt+0x1814>
   12950:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12954:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12958:	andeq	r6, r1, r8, asr sp
   1295c:			; <UNDEFINED> instruction: 0x00016cb8
   12960:	ldrdeq	r6, [r1], -r8
   12964:	andeq	r6, r1, ip, ror #25
   12968:	andeq	r6, r1, ip, lsl sp
   1296c:	andeq	r6, r1, r8, lsr sp
   12970:	andeq	r6, r1, ip, asr sp
   12974:	muleq	r2, r8, r1
   12978:	andeq	r6, r1, r8, ror sp
   1297c:	andeq	r6, r1, r4, lsl #27
   12980:	andeq	r6, r1, ip, lsr #27
   12984:	andeq	r6, r1, ip, asr #27
   12988:	strdeq	r6, [r1], -r0
   1298c:	andeq	r2, r1, r0, ror #4
   12990:	andeq	r6, r1, r8, lsl #28
   12994:	andeq	r6, r1, r4, lsr lr
   12998:	ldr	r3, [pc, #4]	; 129a4 <__assert_fail@plt+0x1970>
   1299c:	str	r0, [r3]
   129a0:	bx	lr
   129a4:	andeq	r8, r2, r8, lsr #3
   129a8:	ldr	r3, [pc, #4]	; 129b4 <__assert_fail@plt+0x1980>
   129ac:	strb	r0, [r3, #4]
   129b0:	bx	lr
   129b4:	andeq	r8, r2, r8, lsr #3
   129b8:	push	{r4, r5, r6, lr}
   129bc:	sub	sp, sp, #8
   129c0:	ldr	r3, [pc, #200]	; 12a90 <__assert_fail@plt+0x1a5c>
   129c4:	ldr	r0, [r3]
   129c8:	bl	15900 <__assert_fail@plt+0x48cc>
   129cc:	cmp	r0, #0
   129d0:	beq	129f4 <__assert_fail@plt+0x19c0>
   129d4:	ldr	r3, [pc, #184]	; 12a94 <__assert_fail@plt+0x1a60>
   129d8:	ldrb	r3, [r3, #4]
   129dc:	cmp	r3, #0
   129e0:	beq	12a10 <__assert_fail@plt+0x19dc>
   129e4:	bl	10f20 <__errno_location@plt>
   129e8:	ldr	r3, [r0]
   129ec:	cmp	r3, #32
   129f0:	bne	12a10 <__assert_fail@plt+0x19dc>
   129f4:	ldr	r3, [pc, #156]	; 12a98 <__assert_fail@plt+0x1a64>
   129f8:	ldr	r0, [r3]
   129fc:	bl	15900 <__assert_fail@plt+0x48cc>
   12a00:	cmp	r0, #0
   12a04:	bne	12a84 <__assert_fail@plt+0x1a50>
   12a08:	add	sp, sp, #8
   12a0c:	pop	{r4, r5, r6, pc}
   12a10:	mov	r2, #5
   12a14:	ldr	r1, [pc, #128]	; 12a9c <__assert_fail@plt+0x1a68>
   12a18:	mov	r0, #0
   12a1c:	bl	10e3c <dcgettext@plt>
   12a20:	mov	r4, r0
   12a24:	ldr	r3, [pc, #104]	; 12a94 <__assert_fail@plt+0x1a60>
   12a28:	ldr	r5, [r3]
   12a2c:	cmp	r5, #0
   12a30:	beq	12a68 <__assert_fail@plt+0x1a34>
   12a34:	bl	10f20 <__errno_location@plt>
   12a38:	ldr	r6, [r0]
   12a3c:	mov	r0, r5
   12a40:	bl	14b2c <__assert_fail@plt+0x3af8>
   12a44:	str	r4, [sp]
   12a48:	mov	r3, r0
   12a4c:	ldr	r2, [pc, #76]	; 12aa0 <__assert_fail@plt+0x1a6c>
   12a50:	mov	r1, r6
   12a54:	mov	r0, #0
   12a58:	bl	10ea8 <error@plt>
   12a5c:	ldr	r3, [pc, #64]	; 12aa4 <__assert_fail@plt+0x1a70>
   12a60:	ldr	r0, [r3]
   12a64:	bl	10df4 <_exit@plt>
   12a68:	bl	10f20 <__errno_location@plt>
   12a6c:	mov	r3, r4
   12a70:	ldr	r2, [pc, #48]	; 12aa8 <__assert_fail@plt+0x1a74>
   12a74:	ldr	r1, [r0]
   12a78:	mov	r0, #0
   12a7c:	bl	10ea8 <error@plt>
   12a80:	b	12a5c <__assert_fail@plt+0x1a28>
   12a84:	ldr	r3, [pc, #24]	; 12aa4 <__assert_fail@plt+0x1a70>
   12a88:	ldr	r0, [r3]
   12a8c:	bl	10df4 <_exit@plt>
   12a90:	andeq	r8, r2, ip, ror #2
   12a94:	andeq	r8, r2, r8, lsr #3
   12a98:	andeq	r8, r2, r0, ror #2
   12a9c:	andeq	r6, r1, ip, asr lr
   12aa0:	andeq	r6, r1, r8, ror #28
   12aa4:	andeq	r8, r2, r8, lsl #2
   12aa8:	andeq	r6, r1, ip, ror #28
   12aac:	push	{r4, r5, lr}
   12ab0:	sub	sp, sp, #20
   12ab4:	ldr	r1, [sp, #40]	; 0x28
   12ab8:	str	r1, [sp, #8]
   12abc:	ldrd	r4, [sp, #32]
   12ac0:	strd	r4, [sp]
   12ac4:	bl	10db8 <posix_fadvise64@plt>
   12ac8:	add	sp, sp, #20
   12acc:	pop	{r4, r5, pc}
   12ad0:	cmp	r0, #0
   12ad4:	bxeq	lr
   12ad8:	push	{r4, lr}
   12adc:	sub	sp, sp, #16
   12ae0:	mov	r4, r1
   12ae4:	bl	10f5c <fileno@plt>
   12ae8:	str	r4, [sp, #8]
   12aec:	mov	r2, #0
   12af0:	mov	r3, #0
   12af4:	strd	r2, [sp]
   12af8:	bl	10db8 <posix_fadvise64@plt>
   12afc:	add	sp, sp, #16
   12b00:	pop	{r4, pc}
   12b04:	push	{r4, r5, r6, lr}
   12b08:	sub	sp, sp, #8
   12b0c:	mov	r4, r0
   12b10:	bl	10f5c <fileno@plt>
   12b14:	cmp	r0, #0
   12b18:	blt	12b90 <__assert_fail@plt+0x1b5c>
   12b1c:	mov	r0, r4
   12b20:	bl	10ecc <__freading@plt>
   12b24:	cmp	r0, #0
   12b28:	beq	12b5c <__assert_fail@plt+0x1b28>
   12b2c:	mov	r0, r4
   12b30:	bl	10f5c <fileno@plt>
   12b34:	mov	r3, #1
   12b38:	str	r3, [sp]
   12b3c:	mov	r2, #0
   12b40:	mov	r3, #0
   12b44:	bl	10e78 <lseek64@plt>
   12b48:	mvn	r2, #0
   12b4c:	mvn	r3, #0
   12b50:	cmp	r1, r3
   12b54:	cmpeq	r0, r2
   12b58:	beq	12b9c <__assert_fail@plt+0x1b68>
   12b5c:	mov	r0, r4
   12b60:	bl	12bac <__assert_fail@plt+0x1b78>
   12b64:	cmp	r0, #0
   12b68:	beq	12b9c <__assert_fail@plt+0x1b68>
   12b6c:	bl	10f20 <__errno_location@plt>
   12b70:	mov	r5, r0
   12b74:	ldr	r6, [r0]
   12b78:	mov	r0, r4
   12b7c:	bl	10f80 <fclose@plt>
   12b80:	cmp	r6, #0
   12b84:	strne	r6, [r5]
   12b88:	mvnne	r0, #0
   12b8c:	b	12ba4 <__assert_fail@plt+0x1b70>
   12b90:	mov	r0, r4
   12b94:	bl	10f80 <fclose@plt>
   12b98:	b	12ba4 <__assert_fail@plt+0x1b70>
   12b9c:	mov	r0, r4
   12ba0:	bl	10f80 <fclose@plt>
   12ba4:	add	sp, sp, #8
   12ba8:	pop	{r4, r5, r6, pc}
   12bac:	push	{r4, lr}
   12bb0:	sub	sp, sp, #8
   12bb4:	subs	r4, r0, #0
   12bb8:	beq	12bcc <__assert_fail@plt+0x1b98>
   12bbc:	mov	r0, r4
   12bc0:	bl	10ecc <__freading@plt>
   12bc4:	cmp	r0, #0
   12bc8:	bne	12bdc <__assert_fail@plt+0x1ba8>
   12bcc:	mov	r0, r4
   12bd0:	bl	10dc4 <fflush@plt>
   12bd4:	add	sp, sp, #8
   12bd8:	pop	{r4, pc}
   12bdc:	ldr	r3, [r4]
   12be0:	tst	r3, #256	; 0x100
   12be4:	bne	12bf4 <__assert_fail@plt+0x1bc0>
   12be8:	mov	r0, r4
   12bec:	bl	10dc4 <fflush@plt>
   12bf0:	b	12bd4 <__assert_fail@plt+0x1ba0>
   12bf4:	mov	r3, #1
   12bf8:	str	r3, [sp]
   12bfc:	mov	r2, #0
   12c00:	mov	r3, #0
   12c04:	mov	r0, r4
   12c08:	bl	12c68 <__assert_fail@plt+0x1c34>
   12c0c:	b	12be8 <__assert_fail@plt+0x1bb4>
   12c10:	push	{r4, r5, lr}
   12c14:	sub	sp, sp, #12
   12c18:	mov	r5, r0
   12c1c:	bl	10f20 <__errno_location@plt>
   12c20:	mov	r4, r0
   12c24:	ldr	r3, [r0]
   12c28:	str	r3, [sp]
   12c2c:	str	r3, [sp, #4]
   12c30:	mov	r3, #0
   12c34:	str	r3, [r0]
   12c38:	mov	r0, r5
   12c3c:	bl	10ddc <free@plt>
   12c40:	ldr	r3, [r4]
   12c44:	cmp	r3, #0
   12c48:	moveq	r3, #4
   12c4c:	movne	r3, #0
   12c50:	add	r2, sp, #8
   12c54:	add	r3, r2, r3
   12c58:	ldr	r3, [r3, #-8]
   12c5c:	str	r3, [r4]
   12c60:	add	sp, sp, #12
   12c64:	pop	{r4, r5, pc}
   12c68:	push	{r4, r5, r6, r7, lr}
   12c6c:	sub	sp, sp, #12
   12c70:	mov	r4, r0
   12c74:	mov	r6, r2
   12c78:	mov	r7, r3
   12c7c:	ldr	r5, [sp, #32]
   12c80:	ldr	r2, [r0, #8]
   12c84:	ldr	r3, [r0, #4]
   12c88:	cmp	r2, r3
   12c8c:	beq	12cac <__assert_fail@plt+0x1c78>
   12c90:	str	r5, [sp]
   12c94:	mov	r2, r6
   12c98:	mov	r3, r7
   12c9c:	mov	r0, r4
   12ca0:	bl	10f8c <fseeko64@plt>
   12ca4:	add	sp, sp, #12
   12ca8:	pop	{r4, r5, r6, r7, pc}
   12cac:	ldr	r2, [r0, #20]
   12cb0:	ldr	r3, [r0, #16]
   12cb4:	cmp	r2, r3
   12cb8:	bne	12c90 <__assert_fail@plt+0x1c5c>
   12cbc:	ldr	r3, [r0, #36]	; 0x24
   12cc0:	cmp	r3, #0
   12cc4:	bne	12c90 <__assert_fail@plt+0x1c5c>
   12cc8:	bl	10f5c <fileno@plt>
   12ccc:	str	r5, [sp]
   12cd0:	mov	r2, r6
   12cd4:	mov	r3, r7
   12cd8:	bl	10e78 <lseek64@plt>
   12cdc:	mvn	r2, #0
   12ce0:	mvn	r3, #0
   12ce4:	cmp	r1, r3
   12ce8:	cmpeq	r0, r2
   12cec:	beq	12d08 <__assert_fail@plt+0x1cd4>
   12cf0:	ldr	r3, [r4]
   12cf4:	bic	r3, r3, #16
   12cf8:	str	r3, [r4]
   12cfc:	strd	r0, [r4, #80]	; 0x50
   12d00:	mov	r0, #0
   12d04:	b	12ca4 <__assert_fail@plt+0x1c70>
   12d08:	mvn	r0, #0
   12d0c:	b	12ca4 <__assert_fail@plt+0x1c70>
   12d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d14:	sub	sp, sp, #36	; 0x24
   12d18:	str	r0, [sp, #16]
   12d1c:	str	r1, [sp, #20]
   12d20:	str	r2, [sp, #12]
   12d24:	mov	sl, r3
   12d28:	ldr	fp, [sp, #72]	; 0x48
   12d2c:	ldr	r3, [r0]
   12d30:	str	r3, [sp, #4]
   12d34:	ldr	r8, [r1]
   12d38:	cmp	r3, #0
   12d3c:	beq	12d90 <__assert_fail@plt+0x1d5c>
   12d40:	ldr	r3, [sp, #12]
   12d44:	cmp	r8, r3
   12d48:	bcc	12fc4 <__assert_fail@plt+0x1f90>
   12d4c:	sub	r5, r8, r3
   12d50:	cmp	r8, sl
   12d54:	cmpcs	r8, r3
   12d58:	moveq	r3, #1
   12d5c:	movne	r3, #0
   12d60:	str	r3, [sp, #8]
   12d64:	beq	12fc4 <__assert_fail@plt+0x1f90>
   12d68:	cmn	fp, #1
   12d6c:	beq	12db8 <__assert_fail@plt+0x1d84>
   12d70:	ldr	r3, [sp, #76]	; 0x4c
   12d74:	cmn	r3, #1
   12d78:	moveq	r3, fp
   12d7c:	str	r3, [sp, #76]	; 0x4c
   12d80:	ldr	r3, [sp, #4]
   12d84:	ldr	r2, [sp, #12]
   12d88:	add	r6, r3, r2
   12d8c:	b	12f34 <__assert_fail@plt+0x1f00>
   12d90:	cmp	sl, #64	; 0x40
   12d94:	movcc	r8, sl
   12d98:	movcs	r8, #64	; 0x40
   12d9c:	mov	r0, r8
   12da0:	bl	15880 <__assert_fail@plt+0x484c>
   12da4:	subs	r3, r0, #0
   12da8:	str	r3, [sp, #4]
   12dac:	bne	12d40 <__assert_fail@plt+0x1d0c>
   12db0:	mvn	r0, #0
   12db4:	b	12fdc <__assert_fail@plt+0x1fa8>
   12db8:	ldr	fp, [sp, #76]	; 0x4c
   12dbc:	b	12d80 <__assert_fail@plt+0x1d4c>
   12dc0:	ldr	r3, [sp, #28]
   12dc4:	ldr	r2, [sp, #76]	; 0x4c
   12dc8:	mov	r1, fp
   12dcc:	mov	r0, r7
   12dd0:	bl	12ff0 <__assert_fail@plt+0x1fbc>
   12dd4:	cmp	r0, #0
   12dd8:	beq	12ea4 <__assert_fail@plt+0x1e70>
   12ddc:	sub	r0, r0, r7
   12de0:	add	r0, r0, #1
   12de4:	str	r0, [sp, #28]
   12de8:	mov	r3, #0
   12dec:	str	r3, [sp]
   12df0:	mov	r9, #1
   12df4:	b	12f5c <__assert_fail@plt+0x1f28>
   12df8:	ldr	r3, [sp, #80]	; 0x50
   12dfc:	ldr	r3, [r3, #4]
   12e00:	ldr	r2, [sp, #80]	; 0x50
   12e04:	ldr	r2, [r2, #8]
   12e08:	cmp	r3, r2
   12e0c:	bcs	12e54 <__assert_fail@plt+0x1e20>
   12e10:	add	r2, r3, #1
   12e14:	ldr	r1, [sp, #80]	; 0x50
   12e18:	str	r2, [r1, #4]
   12e1c:	ldrb	r3, [r3]
   12e20:	str	r3, [sp]
   12e24:	ldr	r3, [sp]
   12e28:	cmn	r3, #1
   12e2c:	beq	12e64 <__assert_fail@plt+0x1e30>
   12e30:	ldr	r3, [sp]
   12e34:	ldr	r2, [sp, #76]	; 0x4c
   12e38:	cmp	r2, r3
   12e3c:	cmpne	fp, r3
   12e40:	moveq	r9, #1
   12e44:	movne	r9, #0
   12e48:	mov	r3, #1
   12e4c:	str	r3, [sp, #28]
   12e50:	b	12f5c <__assert_fail@plt+0x1f28>
   12e54:	ldr	r0, [sp, #80]	; 0x50
   12e58:	bl	10fa4 <__uflow@plt>
   12e5c:	str	r0, [sp]
   12e60:	b	12e24 <__assert_fail@plt+0x1df0>
   12e64:	ldr	r3, [sp, #4]
   12e68:	cmp	r6, r3
   12e6c:	beq	12fc4 <__assert_fail@plt+0x1f90>
   12e70:	mov	r3, #0
   12e74:	strb	r3, [r6]
   12e78:	ldr	r3, [sp, #4]
   12e7c:	ldr	r2, [sp, #12]
   12e80:	add	r0, r3, r2
   12e84:	sub	r0, r6, r0
   12e88:	ldr	r2, [sp, #16]
   12e8c:	str	r3, [r2]
   12e90:	ldr	r3, [sp, #20]
   12e94:	str	r8, [r3]
   12e98:	cmp	r0, #0
   12e9c:	mvneq	r0, #0
   12ea0:	b	12fdc <__assert_fail@plt+0x1fa8>
   12ea4:	ldr	r9, [sp, #8]
   12ea8:	mov	r3, #0
   12eac:	str	r3, [sp]
   12eb0:	b	12f5c <__assert_fail@plt+0x1f28>
   12eb4:	sub	r5, r4, r6
   12eb8:	mov	r1, r4
   12ebc:	ldr	r0, [sp, #4]
   12ec0:	bl	158b0 <__assert_fail@plt+0x487c>
   12ec4:	cmp	r0, #0
   12ec8:	beq	12fc4 <__assert_fail@plt+0x1f90>
   12ecc:	add	r6, r0, r6
   12ed0:	mov	r8, r4
   12ed4:	str	r0, [sp, #4]
   12ed8:	cmp	r5, #1
   12edc:	bls	12f10 <__assert_fail@plt+0x1edc>
   12ee0:	sub	r4, r5, #1
   12ee4:	ldr	r3, [sp, #28]
   12ee8:	cmp	r4, r3
   12eec:	movcs	r4, r3
   12ef0:	cmp	r7, #0
   12ef4:	beq	12fe4 <__assert_fail@plt+0x1fb0>
   12ef8:	mov	r2, r4
   12efc:	mov	r1, r7
   12f00:	mov	r0, r6
   12f04:	bl	10e00 <memcpy@plt>
   12f08:	add	r6, r6, r4
   12f0c:	sub	r5, r5, r4
   12f10:	cmp	r7, #0
   12f14:	beq	12f2c <__assert_fail@plt+0x1ef8>
   12f18:	ldr	r1, [sp, #28]
   12f1c:	ldr	r0, [sp, #80]	; 0x50
   12f20:	bl	159b4 <__assert_fail@plt+0x4980>
   12f24:	cmp	r0, #0
   12f28:	bne	12fc4 <__assert_fail@plt+0x1f90>
   12f2c:	cmp	r9, #0
   12f30:	bne	12e70 <__assert_fail@plt+0x1e3c>
   12f34:	add	r1, sp, #28
   12f38:	ldr	r0, [sp, #80]	; 0x50
   12f3c:	bl	15978 <__assert_fail@plt+0x4944>
   12f40:	subs	r7, r0, #0
   12f44:	beq	12df8 <__assert_fail@plt+0x1dc4>
   12f48:	cmn	fp, #1
   12f4c:	bne	12dc0 <__assert_fail@plt+0x1d8c>
   12f50:	ldr	r9, [sp, #8]
   12f54:	mov	r3, #0
   12f58:	str	r3, [sp]
   12f5c:	ldr	r3, [sp, #28]
   12f60:	add	r3, r3, #1
   12f64:	cmp	r8, sl
   12f68:	cmpcc	r5, r3
   12f6c:	bcs	12ed8 <__assert_fail@plt+0x1ea4>
   12f70:	cmp	r8, #63	; 0x3f
   12f74:	addls	r4, r8, #64	; 0x40
   12f78:	lslhi	r4, r8, #1
   12f7c:	ldr	r2, [sp, #4]
   12f80:	sub	r6, r6, r2
   12f84:	sub	r2, r4, r6
   12f88:	cmp	r3, r2
   12f8c:	addhi	r4, r3, r6
   12f90:	cmp	r4, sl
   12f94:	cmpls	r8, r4
   12f98:	movcs	r3, #1
   12f9c:	movcc	r3, #0
   12fa0:	cmp	r3, #0
   12fa4:	movne	r4, sl
   12fa8:	ldr	r2, [sp, #12]
   12fac:	sub	r3, r4, r2
   12fb0:	cmp	r3, #0
   12fb4:	bge	12eb4 <__assert_fail@plt+0x1e80>
   12fb8:	add	r4, r2, #-2147483648	; 0x80000000
   12fbc:	cmp	r8, r4
   12fc0:	bne	12eb4 <__assert_fail@plt+0x1e80>
   12fc4:	ldr	r3, [sp, #16]
   12fc8:	ldr	r2, [sp, #4]
   12fcc:	str	r2, [r3]
   12fd0:	ldr	r3, [sp, #20]
   12fd4:	str	r8, [r3]
   12fd8:	mvn	r0, #0
   12fdc:	add	sp, sp, #36	; 0x24
   12fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fe4:	ldrb	r3, [sp]
   12fe8:	strb	r3, [r6]
   12fec:	b	12f08 <__assert_fail@plt+0x1ed4>
   12ff0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12ff4:	uxtb	r4, r1
   12ff8:	uxtb	r5, r2
   12ffc:	cmp	r4, r5
   13000:	beq	13054 <__assert_fail@plt+0x2020>
   13004:	cmp	r3, #0
   13008:	beq	13064 <__assert_fail@plt+0x2030>
   1300c:	tst	r0, #3
   13010:	beq	13064 <__assert_fail@plt+0x2030>
   13014:	ldrb	ip, [r0]
   13018:	cmp	r4, ip
   1301c:	cmpne	r5, ip
   13020:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13024:	add	ip, r0, #1
   13028:	mov	r0, ip
   1302c:	subs	r3, r3, #1
   13030:	beq	13064 <__assert_fail@plt+0x2030>
   13034:	tst	ip, #3
   13038:	beq	13064 <__assert_fail@plt+0x2030>
   1303c:	ldrb	lr, [r0]
   13040:	add	ip, ip, #1
   13044:	cmp	r4, lr
   13048:	cmpne	r5, lr
   1304c:	bne	13028 <__assert_fail@plt+0x1ff4>
   13050:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13054:	mov	r2, r3
   13058:	uxtb	r1, r1
   1305c:	bl	10f74 <memchr@plt>
   13060:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13064:	lsl	r6, r1, #8
   13068:	uxth	r6, r6
   1306c:	uxtb	r1, r1
   13070:	orr	r1, r6, r1
   13074:	lsl	r7, r2, #8
   13078:	uxth	r7, r7
   1307c:	uxtb	r2, r2
   13080:	orr	r2, r7, r2
   13084:	orr	r6, r1, r1, lsl #16
   13088:	orr	r7, r2, r2, lsl #16
   1308c:	cmp	r3, #3
   13090:	bls	1310c <__assert_fail@plt+0x20d8>
   13094:	ldr	r2, [r0]
   13098:	eor	lr, r6, r2
   1309c:	eor	ip, r7, r2
   130a0:	ldr	r2, [pc, #180]	; 1315c <__assert_fail@plt+0x2128>
   130a4:	add	r1, lr, r2
   130a8:	bic	r1, r1, lr
   130ac:	add	r2, ip, r2
   130b0:	bic	r2, r2, ip
   130b4:	orr	r2, r1, r2
   130b8:	ldr	r1, [pc, #160]	; 13160 <__assert_fail@plt+0x212c>
   130bc:	and	r1, r1, r2
   130c0:	cmp	r1, #0
   130c4:	bne	1310c <__assert_fail@plt+0x20d8>
   130c8:	add	r2, r0, #4
   130cc:	ldr	lr, [pc, #136]	; 1315c <__assert_fail@plt+0x2128>
   130d0:	ldr	r8, [pc, #136]	; 13160 <__assert_fail@plt+0x212c>
   130d4:	mov	r0, r2
   130d8:	sub	r3, r3, #4
   130dc:	cmp	r3, #3
   130e0:	bls	1310c <__assert_fail@plt+0x20d8>
   130e4:	ldr	ip, [r2], #4
   130e8:	eor	r9, r6, ip
   130ec:	eor	ip, ip, r7
   130f0:	add	r1, r9, lr
   130f4:	bic	r1, r1, r9
   130f8:	add	r9, ip, lr
   130fc:	bic	ip, r9, ip
   13100:	orr	r1, r1, ip
   13104:	tst	r1, r8
   13108:	beq	130d4 <__assert_fail@plt+0x20a0>
   1310c:	cmp	r3, #0
   13110:	beq	13154 <__assert_fail@plt+0x2120>
   13114:	ldrb	r2, [r0]
   13118:	cmp	r4, r2
   1311c:	cmpne	r5, r2
   13120:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13124:	add	r2, r0, #1
   13128:	add	r3, r0, r3
   1312c:	mov	r0, r2
   13130:	cmp	r2, r3
   13134:	beq	1314c <__assert_fail@plt+0x2118>
   13138:	ldrb	r1, [r2], #1
   1313c:	cmp	r4, r1
   13140:	cmpne	r5, r1
   13144:	bne	1312c <__assert_fail@plt+0x20f8>
   13148:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1314c:	mov	r0, #0
   13150:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13154:	mov	r0, #0
   13158:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1315c:	mrc2	14, 7, pc, cr14, cr15, {7}
   13160:	addhi	r8, r0, r0, lsl #1
   13164:	push	{r4, r5, r6, lr}
   13168:	subs	r4, r0, #0
   1316c:	beq	131e4 <__assert_fail@plt+0x21b0>
   13170:	mov	r1, #47	; 0x2f
   13174:	mov	r0, r4
   13178:	bl	10fc8 <strrchr@plt>
   1317c:	cmp	r0, #0
   13180:	addne	r5, r0, #1
   13184:	moveq	r5, r4
   13188:	sub	r3, r5, r4
   1318c:	cmp	r3, #6
   13190:	ble	131d0 <__assert_fail@plt+0x219c>
   13194:	mov	r2, #7
   13198:	ldr	r1, [pc, #96]	; 13200 <__assert_fail@plt+0x21cc>
   1319c:	sub	r0, r5, #7
   131a0:	bl	11010 <strncmp@plt>
   131a4:	cmp	r0, #0
   131a8:	bne	131d0 <__assert_fail@plt+0x219c>
   131ac:	mov	r2, #3
   131b0:	ldr	r1, [pc, #76]	; 13204 <__assert_fail@plt+0x21d0>
   131b4:	mov	r0, r5
   131b8:	bl	11010 <strncmp@plt>
   131bc:	cmp	r0, #0
   131c0:	addeq	r4, r5, #3
   131c4:	ldreq	r3, [pc, #60]	; 13208 <__assert_fail@plt+0x21d4>
   131c8:	streq	r4, [r3]
   131cc:	movne	r4, r5
   131d0:	ldr	r3, [pc, #52]	; 1320c <__assert_fail@plt+0x21d8>
   131d4:	str	r4, [r3]
   131d8:	ldr	r3, [pc, #48]	; 13210 <__assert_fail@plt+0x21dc>
   131dc:	str	r4, [r3]
   131e0:	pop	{r4, r5, r6, pc}
   131e4:	ldr	r3, [pc, #40]	; 13214 <__assert_fail@plt+0x21e0>
   131e8:	ldr	r3, [r3]
   131ec:	mov	r2, #55	; 0x37
   131f0:	mov	r1, #1
   131f4:	ldr	r0, [pc, #28]	; 13218 <__assert_fail@plt+0x21e4>
   131f8:	bl	10e6c <fwrite@plt>
   131fc:	bl	1101c <abort@plt>
   13200:	andeq	r6, r1, r8, lsr #29
   13204:			; <UNDEFINED> instruction: 0x00016eb0
   13208:	andeq	r8, r2, r0, asr r1
   1320c:			; <UNDEFINED> instruction: 0x000281b0
   13210:	andeq	r8, r2, r4, asr r1
   13214:	andeq	r8, r2, r0, ror #2
   13218:	andeq	r6, r1, r0, ror lr
   1321c:	push	{r4, r5, r6, lr}
   13220:	mov	r5, r0
   13224:	mov	r4, r1
   13228:	mov	r2, #48	; 0x30
   1322c:	mov	r1, #0
   13230:	bl	10f38 <memset@plt>
   13234:	cmp	r4, #10
   13238:	beq	13248 <__assert_fail@plt+0x2214>
   1323c:	str	r4, [r5]
   13240:	mov	r0, r5
   13244:	pop	{r4, r5, r6, pc}
   13248:	bl	1101c <abort@plt>
   1324c:	push	{r4, r5, r6, lr}
   13250:	mov	r4, r0
   13254:	mov	r5, r1
   13258:	mov	r2, #5
   1325c:	mov	r1, r0
   13260:	mov	r0, #0
   13264:	bl	10e3c <dcgettext@plt>
   13268:	cmp	r4, r0
   1326c:	popne	{r4, r5, r6, pc}
   13270:	bl	15af8 <__assert_fail@plt+0x4ac4>
   13274:	ldrb	r3, [r0]
   13278:	bic	r3, r3, #32
   1327c:	cmp	r3, #85	; 0x55
   13280:	beq	132fc <__assert_fail@plt+0x22c8>
   13284:	cmp	r3, #71	; 0x47
   13288:	bne	13358 <__assert_fail@plt+0x2324>
   1328c:	ldrb	r3, [r0, #1]
   13290:	bic	r3, r3, #32
   13294:	cmp	r3, #66	; 0x42
   13298:	bne	13358 <__assert_fail@plt+0x2324>
   1329c:	ldrb	r3, [r0, #2]
   132a0:	cmp	r3, #49	; 0x31
   132a4:	bne	13358 <__assert_fail@plt+0x2324>
   132a8:	ldrb	r3, [r0, #3]
   132ac:	cmp	r3, #56	; 0x38
   132b0:	bne	13358 <__assert_fail@plt+0x2324>
   132b4:	ldrb	r3, [r0, #4]
   132b8:	cmp	r3, #48	; 0x30
   132bc:	bne	13358 <__assert_fail@plt+0x2324>
   132c0:	ldrb	r3, [r0, #5]
   132c4:	cmp	r3, #51	; 0x33
   132c8:	bne	13358 <__assert_fail@plt+0x2324>
   132cc:	ldrb	r3, [r0, #6]
   132d0:	cmp	r3, #48	; 0x30
   132d4:	bne	13358 <__assert_fail@plt+0x2324>
   132d8:	ldrb	r3, [r0, #7]
   132dc:	cmp	r3, #0
   132e0:	bne	13358 <__assert_fail@plt+0x2324>
   132e4:	ldrb	r2, [r4]
   132e8:	ldr	r3, [pc, #124]	; 1336c <__assert_fail@plt+0x2338>
   132ec:	ldr	r0, [pc, #124]	; 13370 <__assert_fail@plt+0x233c>
   132f0:	cmp	r2, #96	; 0x60
   132f4:	movne	r0, r3
   132f8:	pop	{r4, r5, r6, pc}
   132fc:	ldrb	r3, [r0, #1]
   13300:	bic	r3, r3, #32
   13304:	cmp	r3, #84	; 0x54
   13308:	bne	13358 <__assert_fail@plt+0x2324>
   1330c:	ldrb	r3, [r0, #2]
   13310:	bic	r3, r3, #32
   13314:	cmp	r3, #70	; 0x46
   13318:	bne	13358 <__assert_fail@plt+0x2324>
   1331c:	ldrb	r3, [r0, #3]
   13320:	cmp	r3, #45	; 0x2d
   13324:	bne	13358 <__assert_fail@plt+0x2324>
   13328:	ldrb	r3, [r0, #4]
   1332c:	cmp	r3, #56	; 0x38
   13330:	bne	13358 <__assert_fail@plt+0x2324>
   13334:	ldrb	r3, [r0, #5]
   13338:	cmp	r3, #0
   1333c:	bne	13358 <__assert_fail@plt+0x2324>
   13340:	ldrb	r2, [r4]
   13344:	ldr	r3, [pc, #40]	; 13374 <__assert_fail@plt+0x2340>
   13348:	ldr	r0, [pc, #40]	; 13378 <__assert_fail@plt+0x2344>
   1334c:	cmp	r2, #96	; 0x60
   13350:	movne	r0, r3
   13354:	pop	{r4, r5, r6, pc}
   13358:	ldr	r3, [pc, #28]	; 1337c <__assert_fail@plt+0x2348>
   1335c:	ldr	r0, [pc, #28]	; 13380 <__assert_fail@plt+0x234c>
   13360:	cmp	r5, #9
   13364:	movne	r0, r3
   13368:	pop	{r4, r5, r6, pc}
   1336c:	andeq	r6, r1, ip, lsl #30
   13370:	andeq	r6, r1, r8, lsl pc
   13374:	andeq	r6, r1, r8, lsl #30
   13378:	andeq	r6, r1, ip, lsl pc
   1337c:	andeq	r6, r1, r0, lsl pc
   13380:	andeq	r6, r1, r4, lsl pc
   13384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13388:	sub	sp, sp, #116	; 0x74
   1338c:	str	r0, [sp, #36]	; 0x24
   13390:	mov	sl, r1
   13394:	str	r2, [sp, #52]	; 0x34
   13398:	str	r3, [sp, #28]
   1339c:	ldr	r8, [sp, #152]	; 0x98
   133a0:	bl	10e84 <__ctype_get_mb_cur_max@plt>
   133a4:	str	r0, [sp, #84]	; 0x54
   133a8:	ldr	r3, [sp, #156]	; 0x9c
   133ac:	lsr	r3, r3, #1
   133b0:	and	r3, r3, #1
   133b4:	str	r3, [sp, #32]
   133b8:	mov	r3, #1
   133bc:	str	r3, [sp, #40]	; 0x28
   133c0:	mov	r3, #0
   133c4:	str	r3, [sp, #80]	; 0x50
   133c8:	str	r3, [sp, #44]	; 0x2c
   133cc:	str	r3, [sp, #48]	; 0x30
   133d0:	str	r3, [sp, #60]	; 0x3c
   133d4:	str	r3, [sp, #72]	; 0x48
   133d8:	str	r3, [sp, #76]	; 0x4c
   133dc:	mov	r7, sl
   133e0:	mov	sl, r8
   133e4:	cmp	sl, #10
   133e8:	ldrls	pc, [pc, sl, lsl #2]
   133ec:	b	135a4 <__assert_fail@plt+0x2570>
   133f0:	andeq	r3, r1, r4, asr r4
   133f4:	andeq	r3, r1, r4, lsr #8
   133f8:	andeq	r3, r1, r0, lsl #11
   133fc:	andeq	r3, r1, ip, lsl r4
   13400:	andeq	r3, r1, r4, lsr r5
   13404:	andeq	r3, r1, r4, ror #8
   13408:	ldrdeq	r4, [r1], -r0
   1340c:	andeq	r3, r1, r8, lsr #11
   13410:	andeq	r3, r1, r0, lsr #9
   13414:	andeq	r3, r1, r0, lsr #9
   13418:	andeq	r3, r1, r0, lsr #9
   1341c:	mov	r3, #1
   13420:	str	r3, [sp, #48]	; 0x30
   13424:	mov	r3, #1
   13428:	str	r3, [sp, #32]
   1342c:	str	r3, [sp, #60]	; 0x3c
   13430:	ldr	r3, [pc, #4068]	; 1441c <__assert_fail@plt+0x33e8>
   13434:	str	r3, [sp, #72]	; 0x48
   13438:	mov	fp, #0
   1343c:	mov	sl, #2
   13440:	mov	r6, #0
   13444:	ldr	r3, [sp, #48]	; 0x30
   13448:	eor	r3, r3, #1
   1344c:	str	r3, [sp, #68]	; 0x44
   13450:	b	13d38 <__assert_fail@plt+0x2d04>
   13454:	mov	r3, #0
   13458:	str	r3, [sp, #32]
   1345c:	mov	fp, r3
   13460:	b	13440 <__assert_fail@plt+0x240c>
   13464:	ldr	r3, [sp, #32]
   13468:	cmp	r3, #0
   1346c:	bne	135c0 <__assert_fail@plt+0x258c>
   13470:	cmp	r7, #0
   13474:	beq	135e0 <__assert_fail@plt+0x25ac>
   13478:	ldr	r3, [sp, #36]	; 0x24
   1347c:	mov	r2, #34	; 0x22
   13480:	strb	r2, [r3]
   13484:	mov	r3, #1
   13488:	str	r3, [sp, #48]	; 0x30
   1348c:	str	r3, [sp, #60]	; 0x3c
   13490:	ldr	r3, [pc, #3980]	; 14424 <__assert_fail@plt+0x33f0>
   13494:	str	r3, [sp, #72]	; 0x48
   13498:	mov	fp, #1
   1349c:	b	13440 <__assert_fail@plt+0x240c>
   134a0:	cmp	sl, #10
   134a4:	beq	134c8 <__assert_fail@plt+0x2494>
   134a8:	mov	r1, sl
   134ac:	ldr	r0, [pc, #3948]	; 14420 <__assert_fail@plt+0x33ec>
   134b0:	bl	1324c <__assert_fail@plt+0x2218>
   134b4:	str	r0, [sp, #164]	; 0xa4
   134b8:	mov	r1, sl
   134bc:	ldr	r0, [pc, #3928]	; 1441c <__assert_fail@plt+0x33e8>
   134c0:	bl	1324c <__assert_fail@plt+0x2218>
   134c4:	str	r0, [sp, #168]	; 0xa8
   134c8:	ldr	r3, [sp, #32]
   134cc:	cmp	r3, #0
   134d0:	movne	fp, #0
   134d4:	bne	1350c <__assert_fail@plt+0x24d8>
   134d8:	ldr	r3, [sp, #164]	; 0xa4
   134dc:	ldrb	r3, [r3]
   134e0:	cmp	r3, #0
   134e4:	beq	1352c <__assert_fail@plt+0x24f8>
   134e8:	ldr	r2, [sp, #164]	; 0xa4
   134ec:	mov	fp, #0
   134f0:	ldr	r1, [sp, #36]	; 0x24
   134f4:	cmp	r7, fp
   134f8:	strbhi	r3, [r1, fp]
   134fc:	add	fp, fp, #1
   13500:	ldrb	r3, [r2, #1]!
   13504:	cmp	r3, #0
   13508:	bne	134f4 <__assert_fail@plt+0x24c0>
   1350c:	ldr	r0, [sp, #168]	; 0xa8
   13510:	bl	10f08 <strlen@plt>
   13514:	str	r0, [sp, #60]	; 0x3c
   13518:	ldr	r3, [sp, #168]	; 0xa8
   1351c:	str	r3, [sp, #72]	; 0x48
   13520:	mov	r3, #1
   13524:	str	r3, [sp, #48]	; 0x30
   13528:	b	13440 <__assert_fail@plt+0x240c>
   1352c:	mov	fp, #0
   13530:	b	1350c <__assert_fail@plt+0x24d8>
   13534:	ldr	r3, [sp, #32]
   13538:	cmp	r3, #0
   1353c:	bne	135fc <__assert_fail@plt+0x25c8>
   13540:	mov	r3, #1
   13544:	str	r3, [sp, #48]	; 0x30
   13548:	cmp	r7, #0
   1354c:	beq	13618 <__assert_fail@plt+0x25e4>
   13550:	ldr	r3, [sp, #36]	; 0x24
   13554:	mov	r2, #39	; 0x27
   13558:	strb	r2, [r3]
   1355c:	mov	r3, #0
   13560:	str	r3, [sp, #32]
   13564:	mov	r3, #1
   13568:	str	r3, [sp, #60]	; 0x3c
   1356c:	ldr	r3, [pc, #3752]	; 1441c <__assert_fail@plt+0x33e8>
   13570:	str	r3, [sp, #72]	; 0x48
   13574:	mov	fp, #1
   13578:	mov	sl, #2
   1357c:	b	13440 <__assert_fail@plt+0x240c>
   13580:	ldr	r3, [sp, #32]
   13584:	cmp	r3, #0
   13588:	beq	13548 <__assert_fail@plt+0x2514>
   1358c:	mov	r3, #1
   13590:	str	r3, [sp, #60]	; 0x3c
   13594:	ldr	r3, [pc, #3712]	; 1441c <__assert_fail@plt+0x33e8>
   13598:	str	r3, [sp, #72]	; 0x48
   1359c:	mov	fp, #0
   135a0:	b	13440 <__assert_fail@plt+0x240c>
   135a4:	bl	1101c <abort@plt>
   135a8:	mov	r3, #0
   135ac:	str	r3, [sp, #32]
   135b0:	mov	r3, #1
   135b4:	str	r3, [sp, #48]	; 0x30
   135b8:	mov	fp, #0
   135bc:	b	13440 <__assert_fail@plt+0x240c>
   135c0:	ldr	r3, [sp, #32]
   135c4:	str	r3, [sp, #48]	; 0x30
   135c8:	mov	r3, #1
   135cc:	str	r3, [sp, #60]	; 0x3c
   135d0:	ldr	r3, [pc, #3660]	; 14424 <__assert_fail@plt+0x33f0>
   135d4:	str	r3, [sp, #72]	; 0x48
   135d8:	mov	fp, #0
   135dc:	b	13440 <__assert_fail@plt+0x240c>
   135e0:	mov	r3, #1
   135e4:	str	r3, [sp, #48]	; 0x30
   135e8:	str	r3, [sp, #60]	; 0x3c
   135ec:	ldr	r3, [pc, #3632]	; 14424 <__assert_fail@plt+0x33f0>
   135f0:	str	r3, [sp, #72]	; 0x48
   135f4:	mov	fp, #1
   135f8:	b	13440 <__assert_fail@plt+0x240c>
   135fc:	mov	r3, #1
   13600:	str	r3, [sp, #60]	; 0x3c
   13604:	ldr	r3, [pc, #3600]	; 1441c <__assert_fail@plt+0x33e8>
   13608:	str	r3, [sp, #72]	; 0x48
   1360c:	mov	fp, #0
   13610:	mov	sl, #2
   13614:	b	13440 <__assert_fail@plt+0x240c>
   13618:	mov	r3, #0
   1361c:	str	r3, [sp, #32]
   13620:	mov	r3, #1
   13624:	str	r3, [sp, #60]	; 0x3c
   13628:	ldr	r3, [pc, #3564]	; 1441c <__assert_fail@plt+0x33e8>
   1362c:	str	r3, [sp, #72]	; 0x48
   13630:	mov	fp, #1
   13634:	mov	sl, #2
   13638:	b	13440 <__assert_fail@plt+0x240c>
   1363c:	mov	r3, #0
   13640:	str	r3, [sp, #56]	; 0x38
   13644:	ldr	r3, [sp, #52]	; 0x34
   13648:	add	r2, r3, r6
   1364c:	str	r2, [sp, #64]	; 0x40
   13650:	ldrb	r4, [r3, r6]
   13654:	cmp	r4, #126	; 0x7e
   13658:	ldrls	pc, [pc, r4, lsl #2]
   1365c:	b	13e98 <__assert_fail@plt+0x2e64>
   13660:	andeq	r3, r1, r8, ror r8
   13664:	muleq	r1, r8, lr
   13668:	muleq	r1, r8, lr
   1366c:	muleq	r1, r8, lr
   13670:	muleq	r1, r8, lr
   13674:	muleq	r1, r8, lr
   13678:	muleq	r1, r8, lr
   1367c:	ldrdeq	r3, [r1], -r4
   13680:	andeq	r3, r1, r0, ror r8
   13684:	andeq	r3, r1, ip, lsl #23
   13688:	andeq	r3, r1, r4, lsl #23
   1368c:	strdeq	r3, [r1], -r4
   13690:	andeq	r3, r1, ip, ror #21
   13694:	andeq	r3, r1, r8, ror #16
   13698:	muleq	r1, r8, lr
   1369c:	muleq	r1, r8, lr
   136a0:	muleq	r1, r8, lr
   136a4:	muleq	r1, r8, lr
   136a8:	muleq	r1, r8, lr
   136ac:	muleq	r1, r8, lr
   136b0:	muleq	r1, r8, lr
   136b4:	muleq	r1, r8, lr
   136b8:	muleq	r1, r8, lr
   136bc:	muleq	r1, r8, lr
   136c0:	muleq	r1, r8, lr
   136c4:	muleq	r1, r8, lr
   136c8:	muleq	r1, r8, lr
   136cc:	muleq	r1, r8, lr
   136d0:	muleq	r1, r8, lr
   136d4:	muleq	r1, r8, lr
   136d8:	muleq	r1, r8, lr
   136dc:	muleq	r1, r8, lr
   136e0:	andeq	r3, r1, r8, lsr #24
   136e4:	andeq	r3, r1, r4, lsr #24
   136e8:	andeq	r3, r1, r4, lsr #24
   136ec:	strdeq	r3, [r1], -ip
   136f0:	andeq	r3, r1, r4, lsr #24
   136f4:	andeq	r4, r1, ip, ror #4
   136f8:	andeq	r3, r1, r4, lsr #24
   136fc:	strdeq	r3, [r1], -ip
   13700:	andeq	r3, r1, r4, lsr #24
   13704:	andeq	r3, r1, r4, lsr #24
   13708:	andeq	r3, r1, r4, lsr #24
   1370c:	andeq	r4, r1, ip, ror #4
   13710:	andeq	r4, r1, ip, ror #4
   13714:	andeq	r4, r1, ip, ror #4
   13718:	andeq	r4, r1, ip, ror #4
   1371c:	andeq	r4, r1, ip, ror #4
   13720:	andeq	r4, r1, ip, ror #4
   13724:	andeq	r4, r1, ip, ror #4
   13728:	andeq	r4, r1, ip, ror #4
   1372c:	andeq	r4, r1, ip, ror #4
   13730:	andeq	r4, r1, ip, ror #4
   13734:	andeq	r4, r1, ip, ror #4
   13738:	andeq	r4, r1, ip, ror #4
   1373c:	andeq	r4, r1, ip, ror #4
   13740:	andeq	r4, r1, ip, ror #4
   13744:	andeq	r4, r1, ip, ror #4
   13748:	andeq	r4, r1, ip, ror #4
   1374c:	andeq	r3, r1, r4, lsr #24
   13750:	andeq	r3, r1, r4, lsr #24
   13754:	andeq	r3, r1, r4, lsr #24
   13758:	andeq	r3, r1, r4, lsr #24
   1375c:	andeq	r3, r1, r0, lsl #19
   13760:	muleq	r1, r8, lr
   13764:	andeq	r4, r1, ip, ror #4
   13768:	andeq	r4, r1, ip, ror #4
   1376c:	andeq	r4, r1, ip, ror #4
   13770:	andeq	r4, r1, ip, ror #4
   13774:	andeq	r4, r1, ip, ror #4
   13778:	andeq	r4, r1, ip, ror #4
   1377c:	andeq	r4, r1, ip, ror #4
   13780:	andeq	r4, r1, ip, ror #4
   13784:	andeq	r4, r1, ip, ror #4
   13788:	andeq	r4, r1, ip, ror #4
   1378c:	andeq	r4, r1, ip, ror #4
   13790:	andeq	r4, r1, ip, ror #4
   13794:	andeq	r4, r1, ip, ror #4
   13798:	andeq	r4, r1, ip, ror #4
   1379c:	andeq	r4, r1, ip, ror #4
   137a0:	andeq	r4, r1, ip, ror #4
   137a4:	andeq	r4, r1, ip, ror #4
   137a8:	andeq	r4, r1, ip, ror #4
   137ac:	andeq	r4, r1, ip, ror #4
   137b0:	andeq	r4, r1, ip, ror #4
   137b4:	andeq	r4, r1, ip, ror #4
   137b8:	andeq	r4, r1, ip, ror #4
   137bc:	andeq	r4, r1, ip, ror #4
   137c0:	andeq	r4, r1, ip, ror #4
   137c4:	andeq	r4, r1, ip, ror #4
   137c8:	andeq	r4, r1, ip, ror #4
   137cc:	andeq	r3, r1, r4, lsr #24
   137d0:	strdeq	r3, [r1], -ip
   137d4:	andeq	r4, r1, ip, ror #4
   137d8:	andeq	r3, r1, r4, lsr #24
   137dc:	andeq	r4, r1, ip, ror #4
   137e0:	andeq	r3, r1, r4, lsr #24
   137e4:	andeq	r4, r1, ip, ror #4
   137e8:	andeq	r4, r1, ip, ror #4
   137ec:	andeq	r4, r1, ip, ror #4
   137f0:	andeq	r4, r1, ip, ror #4
   137f4:	andeq	r4, r1, ip, ror #4
   137f8:	andeq	r4, r1, ip, ror #4
   137fc:	andeq	r4, r1, ip, ror #4
   13800:	andeq	r4, r1, ip, ror #4
   13804:	andeq	r4, r1, ip, ror #4
   13808:	andeq	r4, r1, ip, ror #4
   1380c:	andeq	r4, r1, ip, ror #4
   13810:	andeq	r4, r1, ip, ror #4
   13814:	andeq	r4, r1, ip, ror #4
   13818:	andeq	r4, r1, ip, ror #4
   1381c:	andeq	r4, r1, ip, ror #4
   13820:	andeq	r4, r1, ip, ror #4
   13824:	andeq	r4, r1, ip, ror #4
   13828:	andeq	r4, r1, ip, ror #4
   1382c:	andeq	r4, r1, ip, ror #4
   13830:	andeq	r4, r1, ip, ror #4
   13834:	andeq	r4, r1, ip, ror #4
   13838:	andeq	r4, r1, ip, ror #4
   1383c:	andeq	r4, r1, ip, ror #4
   13840:	andeq	r4, r1, ip, ror #4
   13844:	andeq	r4, r1, ip, ror #4
   13848:	andeq	r4, r1, ip, ror #4
   1384c:	ldrdeq	r3, [r1], -ip
   13850:	andeq	r3, r1, r4, lsr #24
   13854:	ldrdeq	r3, [r1], -ip
   13858:	strdeq	r3, [r1], -ip
   1385c:	mov	r3, #0
   13860:	str	r3, [sp, #56]	; 0x38
   13864:	b	13644 <__assert_fail@plt+0x2610>
   13868:	mov	r3, #114	; 0x72
   1386c:	b	13b90 <__assert_fail@plt+0x2b5c>
   13870:	mov	r3, #98	; 0x62
   13874:	b	13ba8 <__assert_fail@plt+0x2b74>
   13878:	ldr	r3, [sp, #48]	; 0x30
   1387c:	cmp	r3, #0
   13880:	beq	13968 <__assert_fail@plt+0x2934>
   13884:	ldr	r3, [sp, #32]
   13888:	cmp	r3, #0
   1388c:	bne	143f0 <__assert_fail@plt+0x33bc>
   13890:	ldr	r3, [sp, #44]	; 0x2c
   13894:	eor	r3, r3, #1
   13898:	cmp	sl, #2
   1389c:	movne	r3, #0
   138a0:	andeq	r3, r3, #1
   138a4:	cmp	r3, #0
   138a8:	moveq	r2, fp
   138ac:	beq	138f0 <__assert_fail@plt+0x28bc>
   138b0:	cmp	r7, fp
   138b4:	ldrhi	r2, [sp, #36]	; 0x24
   138b8:	movhi	r1, #39	; 0x27
   138bc:	strbhi	r1, [r2, fp]
   138c0:	add	r2, fp, #1
   138c4:	cmp	r7, r2
   138c8:	ldrhi	r1, [sp, #36]	; 0x24
   138cc:	movhi	r0, #36	; 0x24
   138d0:	strbhi	r0, [r1, r2]
   138d4:	add	r2, fp, #2
   138d8:	cmp	r7, r2
   138dc:	ldrhi	r1, [sp, #36]	; 0x24
   138e0:	movhi	r0, #39	; 0x27
   138e4:	strbhi	r0, [r1, r2]
   138e8:	add	r2, fp, #3
   138ec:	str	r3, [sp, #44]	; 0x2c
   138f0:	cmp	r7, r2
   138f4:	ldrhi	r3, [sp, #36]	; 0x24
   138f8:	movhi	r1, #92	; 0x5c
   138fc:	strbhi	r1, [r3, r2]
   13900:	add	fp, r2, #1
   13904:	cmp	r5, #0
   13908:	beq	14274 <__assert_fail@plt+0x3240>
   1390c:	add	r3, r6, #1
   13910:	ldr	r1, [sp, #28]
   13914:	cmp	r1, r3
   13918:	bls	14284 <__assert_fail@plt+0x3250>
   1391c:	ldr	r1, [sp, #52]	; 0x34
   13920:	ldrb	r3, [r1, r3]
   13924:	sub	r3, r3, #48	; 0x30
   13928:	uxtb	r3, r3
   1392c:	cmp	r3, #9
   13930:	bhi	14290 <__assert_fail@plt+0x325c>
   13934:	cmp	r7, fp
   13938:	movhi	r3, #48	; 0x30
   1393c:	ldrhi	r1, [sp, #36]	; 0x24
   13940:	strbhi	r3, [r1, fp]
   13944:	add	r3, r2, #2
   13948:	cmp	r7, r3
   1394c:	movhi	r1, #48	; 0x30
   13950:	ldrhi	r0, [sp, #36]	; 0x24
   13954:	strbhi	r1, [r0, r3]
   13958:	add	fp, r2, #3
   1395c:	ldr	r8, [sp, #32]
   13960:	mov	r4, #48	; 0x30
   13964:	b	13c40 <__assert_fail@plt+0x2c0c>
   13968:	ldr	r3, [sp, #156]	; 0x9c
   1396c:	tst	r3, #1
   13970:	bne	13d34 <__assert_fail@plt+0x2d00>
   13974:	ldr	r5, [sp, #48]	; 0x30
   13978:	mov	r8, r5
   1397c:	b	13c40 <__assert_fail@plt+0x2c0c>
   13980:	cmp	sl, #2
   13984:	beq	1399c <__assert_fail@plt+0x2968>
   13988:	cmp	sl, #5
   1398c:	beq	139b4 <__assert_fail@plt+0x2980>
   13990:	mov	r8, #0
   13994:	mov	r5, r8
   13998:	b	13c40 <__assert_fail@plt+0x2c0c>
   1399c:	ldr	r3, [sp, #32]
   139a0:	cmp	r3, #0
   139a4:	bne	14404 <__assert_fail@plt+0x33d0>
   139a8:	mov	r8, r3
   139ac:	mov	r5, r3
   139b0:	b	13c40 <__assert_fail@plt+0x2c0c>
   139b4:	ldr	r3, [sp, #156]	; 0x9c
   139b8:	tst	r3, #4
   139bc:	beq	1429c <__assert_fail@plt+0x3268>
   139c0:	add	r3, r6, #2
   139c4:	ldr	r2, [sp, #28]
   139c8:	cmp	r2, r3
   139cc:	bls	142a8 <__assert_fail@plt+0x3274>
   139d0:	ldr	r2, [sp, #52]	; 0x34
   139d4:	add	r2, r2, r6
   139d8:	ldrb	r2, [r2, #1]
   139dc:	cmp	r2, #63	; 0x3f
   139e0:	movne	r8, #0
   139e4:	movne	r5, r8
   139e8:	bne	13c40 <__assert_fail@plt+0x2c0c>
   139ec:	ldr	r2, [sp, #52]	; 0x34
   139f0:	ldrb	r2, [r2, r3]
   139f4:	sub	r1, r2, #33	; 0x21
   139f8:	cmp	r1, #29
   139fc:	ldrls	pc, [pc, r1, lsl #2]
   13a00:	b	142b4 <__assert_fail@plt+0x3280>
   13a04:	andeq	r3, r1, ip, ror sl
   13a08:			; <UNDEFINED> instruction: 0x000142b4
   13a0c:			; <UNDEFINED> instruction: 0x000142b4
   13a10:			; <UNDEFINED> instruction: 0x000142b4
   13a14:			; <UNDEFINED> instruction: 0x000142b4
   13a18:			; <UNDEFINED> instruction: 0x000142b4
   13a1c:	andeq	r3, r1, ip, ror sl
   13a20:	andeq	r3, r1, ip, ror sl
   13a24:	andeq	r3, r1, ip, ror sl
   13a28:			; <UNDEFINED> instruction: 0x000142b4
   13a2c:			; <UNDEFINED> instruction: 0x000142b4
   13a30:			; <UNDEFINED> instruction: 0x000142b4
   13a34:	andeq	r3, r1, ip, ror sl
   13a38:			; <UNDEFINED> instruction: 0x000142b4
   13a3c:	andeq	r3, r1, ip, ror sl
   13a40:			; <UNDEFINED> instruction: 0x000142b4
   13a44:			; <UNDEFINED> instruction: 0x000142b4
   13a48:			; <UNDEFINED> instruction: 0x000142b4
   13a4c:			; <UNDEFINED> instruction: 0x000142b4
   13a50:			; <UNDEFINED> instruction: 0x000142b4
   13a54:			; <UNDEFINED> instruction: 0x000142b4
   13a58:			; <UNDEFINED> instruction: 0x000142b4
   13a5c:			; <UNDEFINED> instruction: 0x000142b4
   13a60:			; <UNDEFINED> instruction: 0x000142b4
   13a64:			; <UNDEFINED> instruction: 0x000142b4
   13a68:			; <UNDEFINED> instruction: 0x000142b4
   13a6c:			; <UNDEFINED> instruction: 0x000142b4
   13a70:	andeq	r3, r1, ip, ror sl
   13a74:	andeq	r3, r1, ip, ror sl
   13a78:	andeq	r3, r1, ip, ror sl
   13a7c:	ldr	r1, [sp, #32]
   13a80:	cmp	r1, #0
   13a84:	bne	144c4 <__assert_fail@plt+0x3490>
   13a88:	cmp	r7, fp
   13a8c:	movhi	r1, #63	; 0x3f
   13a90:	ldrhi	r0, [sp, #36]	; 0x24
   13a94:	strbhi	r1, [r0, fp]
   13a98:	add	r1, fp, #1
   13a9c:	cmp	r7, r1
   13aa0:	ldrhi	r0, [sp, #36]	; 0x24
   13aa4:	movhi	ip, #34	; 0x22
   13aa8:	strbhi	ip, [r0, r1]
   13aac:	add	r1, fp, #2
   13ab0:	cmp	r7, r1
   13ab4:	ldrhi	r0, [sp, #36]	; 0x24
   13ab8:	movhi	ip, #34	; 0x22
   13abc:	strbhi	ip, [r0, r1]
   13ac0:	add	r1, fp, #3
   13ac4:	cmp	r7, r1
   13ac8:	movhi	r0, #63	; 0x3f
   13acc:	ldrhi	ip, [sp, #36]	; 0x24
   13ad0:	strbhi	r0, [ip, r1]
   13ad4:	add	fp, fp, #4
   13ad8:	ldr	r5, [sp, #32]
   13adc:	mov	r8, r5
   13ae0:	mov	r4, r2
   13ae4:	mov	r6, r3
   13ae8:	b	13c40 <__assert_fail@plt+0x2c0c>
   13aec:	mov	r3, #102	; 0x66
   13af0:	b	13ba8 <__assert_fail@plt+0x2b74>
   13af4:	mov	r3, #118	; 0x76
   13af8:	b	13ba8 <__assert_fail@plt+0x2b74>
   13afc:	cmp	sl, #2
   13b00:	beq	13b6c <__assert_fail@plt+0x2b38>
   13b04:	ldr	r3, [sp, #48]	; 0x30
   13b08:	ldr	r2, [sp, #32]
   13b0c:	and	r3, r3, r2
   13b10:	tst	r9, r3
   13b14:	moveq	r3, r4
   13b18:	beq	13ba8 <__assert_fail@plt+0x2b74>
   13b1c:	mov	r8, #0
   13b20:	mov	r5, r8
   13b24:	eor	r5, r5, #1
   13b28:	ldr	r3, [sp, #44]	; 0x2c
   13b2c:	and	r5, r5, r3
   13b30:	tst	r5, #255	; 0xff
   13b34:	beq	13d14 <__assert_fail@plt+0x2ce0>
   13b38:	cmp	r7, fp
   13b3c:	ldrhi	r3, [sp, #36]	; 0x24
   13b40:	movhi	r2, #39	; 0x27
   13b44:	strbhi	r2, [r3, fp]
   13b48:	add	r3, fp, #1
   13b4c:	cmp	r7, r3
   13b50:	ldrhi	r2, [sp, #36]	; 0x24
   13b54:	movhi	r1, #39	; 0x27
   13b58:	strbhi	r1, [r2, r3]
   13b5c:	add	fp, fp, #2
   13b60:	mov	r3, #0
   13b64:	str	r3, [sp, #44]	; 0x2c
   13b68:	b	13d14 <__assert_fail@plt+0x2ce0>
   13b6c:	ldr	r3, [sp, #32]
   13b70:	cmp	r3, #0
   13b74:	bne	14410 <__assert_fail@plt+0x33dc>
   13b78:	mov	r8, r3
   13b7c:	mov	r5, r3
   13b80:	b	13b24 <__assert_fail@plt+0x2af0>
   13b84:	mov	r3, #110	; 0x6e
   13b88:	b	13b90 <__assert_fail@plt+0x2b5c>
   13b8c:	mov	r3, #116	; 0x74
   13b90:	ldr	r2, [sp, #32]
   13b94:	cmp	sl, #2
   13b98:	movne	r2, #0
   13b9c:	andeq	r2, r2, #1
   13ba0:	cmp	r2, #0
   13ba4:	bne	13bc8 <__assert_fail@plt+0x2b94>
   13ba8:	ldr	r2, [sp, #48]	; 0x30
   13bac:	cmp	r2, #0
   13bb0:	moveq	r8, r2
   13bb4:	moveq	r5, r2
   13bb8:	beq	13c40 <__assert_fail@plt+0x2c0c>
   13bbc:	mov	r4, r3
   13bc0:	mov	r8, #0
   13bc4:	b	13c98 <__assert_fail@plt+0x2c64>
   13bc8:	mov	r8, sl
   13bcc:	mov	sl, r7
   13bd0:	b	1443c <__assert_fail@plt+0x3408>
   13bd4:	mov	r3, #97	; 0x61
   13bd8:	b	13ba8 <__assert_fail@plt+0x2b74>
   13bdc:	ldr	r3, [sp, #28]
   13be0:	cmn	r3, #1
   13be4:	beq	13c10 <__assert_fail@plt+0x2bdc>
   13be8:	ldr	r3, [sp, #28]
   13bec:	subs	r3, r3, #1
   13bf0:	movne	r3, #1
   13bf4:	cmp	r3, #0
   13bf8:	bne	142c0 <__assert_fail@plt+0x328c>
   13bfc:	cmp	r6, #0
   13c00:	beq	13c28 <__assert_fail@plt+0x2bf4>
   13c04:	mov	r8, #0
   13c08:	mov	r5, r8
   13c0c:	b	13c40 <__assert_fail@plt+0x2c0c>
   13c10:	ldr	r3, [sp, #52]	; 0x34
   13c14:	ldrb	r3, [r3, #1]
   13c18:	adds	r3, r3, #0
   13c1c:	movne	r3, #1
   13c20:	b	13bf4 <__assert_fail@plt+0x2bc0>
   13c24:	mov	r8, #0
   13c28:	ldr	r5, [sp, #32]
   13c2c:	cmp	sl, #2
   13c30:	movne	r5, #0
   13c34:	andeq	r5, r5, #1
   13c38:	cmp	r5, #0
   13c3c:	bne	13df0 <__assert_fail@plt+0x2dbc>
   13c40:	ldr	r3, [sp, #68]	; 0x44
   13c44:	cmp	sl, #2
   13c48:	orreq	r3, r3, #1
   13c4c:	eor	r3, r3, #1
   13c50:	ldr	r2, [sp, #32]
   13c54:	orr	r3, r2, r3
   13c58:	tst	r3, #255	; 0xff
   13c5c:	beq	13c8c <__assert_fail@plt+0x2c58>
   13c60:	ldr	r3, [sp, #160]	; 0xa0
   13c64:	cmp	r3, #0
   13c68:	beq	13c8c <__assert_fail@plt+0x2c58>
   13c6c:	lsr	r2, r4, #5
   13c70:	uxtb	r2, r2
   13c74:	and	r3, r4, #31
   13c78:	ldr	r1, [sp, #160]	; 0xa0
   13c7c:	ldr	r2, [r1, r2, lsl #2]
   13c80:	lsr	r3, r2, r3
   13c84:	tst	r3, #1
   13c88:	bne	13c98 <__assert_fail@plt+0x2c64>
   13c8c:	ldr	r3, [sp, #56]	; 0x38
   13c90:	cmp	r3, #0
   13c94:	beq	13b24 <__assert_fail@plt+0x2af0>
   13c98:	ldr	r3, [sp, #32]
   13c9c:	cmp	r3, #0
   13ca0:	bne	144ac <__assert_fail@plt+0x3478>
   13ca4:	ldr	r3, [sp, #44]	; 0x2c
   13ca8:	eor	r3, r3, #1
   13cac:	cmp	sl, #2
   13cb0:	movne	r3, #0
   13cb4:	andeq	r3, r3, #1
   13cb8:	cmp	r3, #0
   13cbc:	beq	13d00 <__assert_fail@plt+0x2ccc>
   13cc0:	cmp	r7, fp
   13cc4:	ldrhi	r2, [sp, #36]	; 0x24
   13cc8:	movhi	r1, #39	; 0x27
   13ccc:	strbhi	r1, [r2, fp]
   13cd0:	add	r2, fp, #1
   13cd4:	cmp	r7, r2
   13cd8:	ldrhi	r1, [sp, #36]	; 0x24
   13cdc:	movhi	r0, #36	; 0x24
   13ce0:	strbhi	r0, [r1, r2]
   13ce4:	add	r2, fp, #2
   13ce8:	cmp	r7, r2
   13cec:	ldrhi	r1, [sp, #36]	; 0x24
   13cf0:	movhi	r0, #39	; 0x27
   13cf4:	strbhi	r0, [r1, r2]
   13cf8:	add	fp, fp, #3
   13cfc:	str	r3, [sp, #44]	; 0x2c
   13d00:	cmp	r7, fp
   13d04:	ldrhi	r3, [sp, #36]	; 0x24
   13d08:	movhi	r2, #92	; 0x5c
   13d0c:	strbhi	r2, [r3, fp]
   13d10:	add	fp, fp, #1
   13d14:	cmp	fp, r7
   13d18:	ldrcc	r3, [sp, #36]	; 0x24
   13d1c:	strbcc	r4, [r3, fp]
   13d20:	add	fp, fp, #1
   13d24:	ldr	r3, [sp, #40]	; 0x28
   13d28:	cmp	r8, #0
   13d2c:	moveq	r3, #0
   13d30:	str	r3, [sp, #40]	; 0x28
   13d34:	add	r6, r6, #1
   13d38:	ldr	r3, [sp, #28]
   13d3c:	cmn	r3, #1
   13d40:	beq	142cc <__assert_fail@plt+0x3298>
   13d44:	ldr	r3, [sp, #28]
   13d48:	subs	r8, r3, r6
   13d4c:	movne	r8, #1
   13d50:	cmp	r8, #0
   13d54:	beq	142e0 <__assert_fail@plt+0x32ac>
   13d58:	ldr	r5, [sp, #48]	; 0x30
   13d5c:	cmp	sl, #2
   13d60:	moveq	r5, #0
   13d64:	andne	r5, r5, #1
   13d68:	ldr	r3, [sp, #60]	; 0x3c
   13d6c:	adds	r9, r3, #0
   13d70:	movne	r9, #1
   13d74:	ands	r2, r5, r9
   13d78:	str	r2, [sp, #56]	; 0x38
   13d7c:	beq	13644 <__assert_fail@plt+0x2610>
   13d80:	add	r4, r6, r3
   13d84:	ldr	r2, [sp, #28]
   13d88:	cmp	r3, #1
   13d8c:	movls	r3, #0
   13d90:	movhi	r3, #1
   13d94:	cmn	r2, #1
   13d98:	movne	r3, #0
   13d9c:	cmp	r3, #0
   13da0:	beq	13db0 <__assert_fail@plt+0x2d7c>
   13da4:	ldr	r0, [sp, #52]	; 0x34
   13da8:	bl	10f08 <strlen@plt>
   13dac:	str	r0, [sp, #28]
   13db0:	ldr	r3, [sp, #28]
   13db4:	cmp	r3, r4
   13db8:	bcc	1363c <__assert_fail@plt+0x2608>
   13dbc:	ldr	r2, [sp, #60]	; 0x3c
   13dc0:	ldr	r1, [sp, #72]	; 0x48
   13dc4:	ldr	r3, [sp, #52]	; 0x34
   13dc8:	add	r0, r3, r6
   13dcc:	bl	10e24 <memcmp@plt>
   13dd0:	cmp	r0, #0
   13dd4:	bne	1385c <__assert_fail@plt+0x2828>
   13dd8:	ldr	r3, [sp, #32]
   13ddc:	cmp	r3, #0
   13de0:	beq	13644 <__assert_fail@plt+0x2610>
   13de4:	mov	r8, sl
   13de8:	mov	sl, r7
   13dec:	b	1443c <__assert_fail@plt+0x3408>
   13df0:	mov	r8, sl
   13df4:	mov	sl, r7
   13df8:	b	1443c <__assert_fail@plt+0x3408>
   13dfc:	cmp	sl, #2
   13e00:	strne	r8, [sp, #80]	; 0x50
   13e04:	movne	r5, #0
   13e08:	bne	13c40 <__assert_fail@plt+0x2c0c>
   13e0c:	ldr	r3, [sp, #32]
   13e10:	cmp	r3, #0
   13e14:	bne	14428 <__assert_fail@plt+0x33f4>
   13e18:	ldr	r2, [sp, #76]	; 0x4c
   13e1c:	adds	r3, r7, #0
   13e20:	movne	r3, #1
   13e24:	cmp	r2, #0
   13e28:	movne	r3, #0
   13e2c:	cmp	r3, #0
   13e30:	movne	r3, #0
   13e34:	bne	13e64 <__assert_fail@plt+0x2e30>
   13e38:	cmp	r7, fp
   13e3c:	ldrhi	r3, [sp, #36]	; 0x24
   13e40:	movhi	r2, #39	; 0x27
   13e44:	strbhi	r2, [r3, fp]
   13e48:	add	r3, fp, #1
   13e4c:	cmp	r7, r3
   13e50:	ldrhi	r2, [sp, #36]	; 0x24
   13e54:	movhi	r1, #92	; 0x5c
   13e58:	strbhi	r1, [r2, r3]
   13e5c:	mov	r3, r7
   13e60:	ldr	r7, [sp, #76]	; 0x4c
   13e64:	add	r2, fp, #2
   13e68:	cmp	r2, r3
   13e6c:	ldrcc	r1, [sp, #36]	; 0x24
   13e70:	movcc	r0, #39	; 0x27
   13e74:	strbcc	r0, [r1, r2]
   13e78:	add	fp, fp, #3
   13e7c:	ldr	r2, [sp, #32]
   13e80:	mov	r5, r2
   13e84:	str	r8, [sp, #80]	; 0x50
   13e88:	str	r2, [sp, #44]	; 0x2c
   13e8c:	str	r7, [sp, #76]	; 0x4c
   13e90:	mov	r7, r3
   13e94:	b	13c40 <__assert_fail@plt+0x2c0c>
   13e98:	ldr	r5, [sp, #84]	; 0x54
   13e9c:	cmp	r5, #1
   13ea0:	beq	13ed0 <__assert_fail@plt+0x2e9c>
   13ea4:	mov	r3, #0
   13ea8:	str	r3, [sp, #104]	; 0x68
   13eac:	str	r3, [sp, #108]	; 0x6c
   13eb0:	ldr	r3, [sp, #28]
   13eb4:	cmn	r3, #1
   13eb8:	beq	13f04 <__assert_fail@plt+0x2ed0>
   13ebc:	mov	r3, #0
   13ec0:	str	r4, [sp, #88]	; 0x58
   13ec4:	str	fp, [sp, #92]	; 0x5c
   13ec8:	mov	fp, r3
   13ecc:	b	1402c <__assert_fail@plt+0x2ff8>
   13ed0:	bl	10ef0 <__ctype_b_loc@plt>
   13ed4:	ldr	r2, [r0]
   13ed8:	lsl	r3, r4, #1
   13edc:	ldrh	r8, [r2, r3]
   13ee0:	lsr	r8, r8, #14
   13ee4:	and	r8, r8, #1
   13ee8:	mov	r2, r5
   13eec:	eor	r5, r8, #1
   13ef0:	ldr	r3, [sp, #48]	; 0x30
   13ef4:	and	r5, r5, r3
   13ef8:	ands	r5, r5, #255	; 0xff
   13efc:	beq	13c40 <__assert_fail@plt+0x2c0c>
   13f00:	b	140c4 <__assert_fail@plt+0x3090>
   13f04:	ldr	r0, [sp, #52]	; 0x34
   13f08:	bl	10f08 <strlen@plt>
   13f0c:	str	r0, [sp, #28]
   13f10:	b	13ebc <__assert_fail@plt+0x2e88>
   13f14:	mov	r2, fp
   13f18:	mov	r1, r4
   13f1c:	ldr	r4, [sp, #88]	; 0x58
   13f20:	ldr	fp, [sp, #92]	; 0x5c
   13f24:	ldr	r0, [sp, #28]
   13f28:	cmp	r0, r5
   13f2c:	bls	140f8 <__assert_fail@plt+0x30c4>
   13f30:	ldrb	r3, [r1]
   13f34:	cmp	r3, #0
   13f38:	beq	14100 <__assert_fail@plt+0x30cc>
   13f3c:	mov	r3, r1
   13f40:	add	r2, r2, #1
   13f44:	add	r1, r6, r2
   13f48:	cmp	r0, r1
   13f4c:	bls	14108 <__assert_fail@plt+0x30d4>
   13f50:	ldrb	r1, [r3, #1]!
   13f54:	cmp	r1, #0
   13f58:	bne	13f40 <__assert_fail@plt+0x2f0c>
   13f5c:	mov	r8, #0
   13f60:	b	140bc <__assert_fail@plt+0x3088>
   13f64:	cmp	r4, r5
   13f68:	beq	14008 <__assert_fail@plt+0x2fd4>
   13f6c:	ldrb	r3, [r4, #1]!
   13f70:	sub	r3, r3, #91	; 0x5b
   13f74:	cmp	r3, #33	; 0x21
   13f78:	ldrls	pc, [pc, r3, lsl #2]
   13f7c:	b	13f64 <__assert_fail@plt+0x2f30>
   13f80:	andeq	r4, r1, r4, lsr r4
   13f84:	andeq	r4, r1, r4, lsr r4
   13f88:	andeq	r3, r1, r4, ror #30
   13f8c:	andeq	r4, r1, r4, lsr r4
   13f90:	andeq	r3, r1, r4, ror #30
   13f94:	andeq	r4, r1, r4, lsr r4
   13f98:	andeq	r3, r1, r4, ror #30
   13f9c:	andeq	r3, r1, r4, ror #30
   13fa0:	andeq	r3, r1, r4, ror #30
   13fa4:	andeq	r3, r1, r4, ror #30
   13fa8:	andeq	r3, r1, r4, ror #30
   13fac:	andeq	r3, r1, r4, ror #30
   13fb0:	andeq	r3, r1, r4, ror #30
   13fb4:	andeq	r3, r1, r4, ror #30
   13fb8:	andeq	r3, r1, r4, ror #30
   13fbc:	andeq	r3, r1, r4, ror #30
   13fc0:	andeq	r3, r1, r4, ror #30
   13fc4:	andeq	r3, r1, r4, ror #30
   13fc8:	andeq	r3, r1, r4, ror #30
   13fcc:	andeq	r3, r1, r4, ror #30
   13fd0:	andeq	r3, r1, r4, ror #30
   13fd4:	andeq	r3, r1, r4, ror #30
   13fd8:	andeq	r3, r1, r4, ror #30
   13fdc:	andeq	r3, r1, r4, ror #30
   13fe0:	andeq	r3, r1, r4, ror #30
   13fe4:	andeq	r3, r1, r4, ror #30
   13fe8:	andeq	r3, r1, r4, ror #30
   13fec:	andeq	r3, r1, r4, ror #30
   13ff0:	andeq	r3, r1, r4, ror #30
   13ff4:	andeq	r3, r1, r4, ror #30
   13ff8:	andeq	r3, r1, r4, ror #30
   13ffc:	andeq	r3, r1, r4, ror #30
   14000:	andeq	r3, r1, r4, ror #30
   14004:	andeq	r4, r1, r4, lsr r4
   14008:	ldr	r0, [sp, #100]	; 0x64
   1400c:	bl	10e60 <iswprint@plt>
   14010:	cmp	r0, #0
   14014:	moveq	r8, #0
   14018:	add	fp, fp, r9
   1401c:	add	r0, sp, #104	; 0x68
   14020:	bl	10e0c <mbsinit@plt>
   14024:	cmp	r0, #0
   14028:	bne	1409c <__assert_fail@plt+0x3068>
   1402c:	add	r5, r6, fp
   14030:	ldr	r3, [sp, #52]	; 0x34
   14034:	add	r4, r3, r5
   14038:	add	r3, sp, #104	; 0x68
   1403c:	ldr	r2, [sp, #28]
   14040:	sub	r2, r2, r5
   14044:	mov	r1, r4
   14048:	add	r0, sp, #100	; 0x64
   1404c:	bl	15b2c <__assert_fail@plt+0x4af8>
   14050:	subs	r9, r0, #0
   14054:	beq	14110 <__assert_fail@plt+0x30dc>
   14058:	cmn	r9, #1
   1405c:	beq	140ac <__assert_fail@plt+0x3078>
   14060:	cmn	r9, #2
   14064:	beq	13f14 <__assert_fail@plt+0x2ee0>
   14068:	ldr	r3, [sp, #32]
   1406c:	cmp	sl, #2
   14070:	movne	r3, #0
   14074:	andeq	r3, r3, #1
   14078:	cmp	r3, #0
   1407c:	beq	14008 <__assert_fail@plt+0x2fd4>
   14080:	cmp	r9, #1
   14084:	bls	14008 <__assert_fail@plt+0x2fd4>
   14088:	sub	r3, r9, #1
   1408c:	add	r5, r3, r5
   14090:	ldr	r3, [sp, #52]	; 0x34
   14094:	add	r5, r3, r5
   14098:	b	13f6c <__assert_fail@plt+0x2f38>
   1409c:	ldr	r4, [sp, #88]	; 0x58
   140a0:	mov	r2, fp
   140a4:	ldr	fp, [sp, #92]	; 0x5c
   140a8:	b	140bc <__assert_fail@plt+0x3088>
   140ac:	ldr	r4, [sp, #88]	; 0x58
   140b0:	mov	r2, fp
   140b4:	ldr	fp, [sp, #92]	; 0x5c
   140b8:	mov	r8, #0
   140bc:	cmp	r2, #1
   140c0:	bls	13eec <__assert_fail@plt+0x2eb8>
   140c4:	add	r1, r6, r2
   140c8:	ldr	ip, [sp, #64]	; 0x40
   140cc:	mov	r5, #0
   140d0:	eor	r3, r8, #1
   140d4:	ldr	r2, [sp, #48]	; 0x30
   140d8:	and	r3, r3, r2
   140dc:	uxtb	r3, r3
   140e0:	ldr	r9, [sp, #32]
   140e4:	ldr	lr, [sp, #44]	; 0x2c
   140e8:	ldr	r2, [sp, #56]	; 0x38
   140ec:	str	r8, [sp, #56]	; 0x38
   140f0:	ldr	r0, [sp, #36]	; 0x24
   140f4:	b	14190 <__assert_fail@plt+0x315c>
   140f8:	mov	r8, #0
   140fc:	b	140bc <__assert_fail@plt+0x3088>
   14100:	mov	r8, #0
   14104:	b	140bc <__assert_fail@plt+0x3088>
   14108:	mov	r8, #0
   1410c:	b	140bc <__assert_fail@plt+0x3088>
   14110:	ldr	r4, [sp, #88]	; 0x58
   14114:	mov	r2, fp
   14118:	ldr	fp, [sp, #92]	; 0x5c
   1411c:	b	140bc <__assert_fail@plt+0x3088>
   14120:	cmp	r2, #0
   14124:	beq	14138 <__assert_fail@plt+0x3104>
   14128:	cmp	r7, fp
   1412c:	movhi	r2, #92	; 0x5c
   14130:	strbhi	r2, [r0, fp]
   14134:	add	fp, fp, #1
   14138:	add	r8, r6, #1
   1413c:	cmp	r1, r8
   14140:	bls	14248 <__assert_fail@plt+0x3214>
   14144:	eor	r2, r5, #1
   14148:	and	r2, r2, lr
   1414c:	ands	r2, r2, #255	; 0xff
   14150:	beq	14264 <__assert_fail@plt+0x3230>
   14154:	cmp	r7, fp
   14158:	movhi	r2, #39	; 0x27
   1415c:	strbhi	r2, [r0, fp]
   14160:	add	r2, fp, #1
   14164:	cmp	r7, r2
   14168:	movhi	lr, #39	; 0x27
   1416c:	strbhi	lr, [r0, r2]
   14170:	add	fp, fp, #2
   14174:	mov	r6, r8
   14178:	mov	r2, r3
   1417c:	mov	lr, r3
   14180:	cmp	r7, fp
   14184:	strbhi	r4, [r0, fp]
   14188:	add	fp, fp, #1
   1418c:	ldrb	r4, [ip, #1]!
   14190:	cmp	r3, #0
   14194:	beq	14120 <__assert_fail@plt+0x30ec>
   14198:	cmp	r9, #0
   1419c:	bne	144a0 <__assert_fail@plt+0x346c>
   141a0:	eor	r5, lr, #1
   141a4:	cmp	sl, #2
   141a8:	movne	r5, #0
   141ac:	andeq	r5, r5, #1
   141b0:	cmp	r5, #0
   141b4:	beq	141ec <__assert_fail@plt+0x31b8>
   141b8:	cmp	r7, fp
   141bc:	movhi	lr, #39	; 0x27
   141c0:	strbhi	lr, [r0, fp]
   141c4:	add	lr, fp, #1
   141c8:	cmp	r7, lr
   141cc:	movhi	r8, #36	; 0x24
   141d0:	strbhi	r8, [r0, lr]
   141d4:	add	lr, fp, #2
   141d8:	cmp	r7, lr
   141dc:	movhi	r8, #39	; 0x27
   141e0:	strbhi	r8, [r0, lr]
   141e4:	add	fp, fp, #3
   141e8:	mov	lr, r5
   141ec:	cmp	r7, fp
   141f0:	movhi	r5, #92	; 0x5c
   141f4:	strbhi	r5, [r0, fp]
   141f8:	add	r5, fp, #1
   141fc:	cmp	r7, r5
   14200:	lsrhi	r8, r4, #6
   14204:	addhi	r8, r8, #48	; 0x30
   14208:	strbhi	r8, [r0, r5]
   1420c:	add	r8, fp, #2
   14210:	cmp	r7, r8
   14214:	lsrhi	r5, r4, #3
   14218:	andhi	r5, r5, #7
   1421c:	addhi	r5, r5, #48	; 0x30
   14220:	strbhi	r5, [r0, r8]
   14224:	add	fp, fp, #3
   14228:	and	r4, r4, #7
   1422c:	add	r4, r4, #48	; 0x30
   14230:	add	r5, r6, #1
   14234:	cmp	r1, r5
   14238:	bls	14254 <__assert_fail@plt+0x3220>
   1423c:	mov	r6, r5
   14240:	mov	r5, r3
   14244:	b	14180 <__assert_fail@plt+0x314c>
   14248:	str	lr, [sp, #44]	; 0x2c
   1424c:	ldr	r8, [sp, #56]	; 0x38
   14250:	b	13b24 <__assert_fail@plt+0x2af0>
   14254:	str	lr, [sp, #44]	; 0x2c
   14258:	ldr	r8, [sp, #56]	; 0x38
   1425c:	mov	r5, r3
   14260:	b	13b24 <__assert_fail@plt+0x2af0>
   14264:	mov	r6, r8
   14268:	b	14180 <__assert_fail@plt+0x314c>
   1426c:	mov	r5, #0
   14270:	b	13c40 <__assert_fail@plt+0x2c0c>
   14274:	mov	r8, r5
   14278:	ldr	r5, [sp, #48]	; 0x30
   1427c:	mov	r4, #48	; 0x30
   14280:	b	13c40 <__assert_fail@plt+0x2c0c>
   14284:	ldr	r8, [sp, #32]
   14288:	mov	r4, #48	; 0x30
   1428c:	b	13c40 <__assert_fail@plt+0x2c0c>
   14290:	ldr	r8, [sp, #32]
   14294:	mov	r4, #48	; 0x30
   14298:	b	13c40 <__assert_fail@plt+0x2c0c>
   1429c:	mov	r8, #0
   142a0:	mov	r5, r8
   142a4:	b	13c40 <__assert_fail@plt+0x2c0c>
   142a8:	mov	r8, #0
   142ac:	mov	r5, r8
   142b0:	b	13c40 <__assert_fail@plt+0x2c0c>
   142b4:	mov	r8, #0
   142b8:	mov	r5, r8
   142bc:	b	13c40 <__assert_fail@plt+0x2c0c>
   142c0:	mov	r8, #0
   142c4:	mov	r5, r8
   142c8:	b	13c40 <__assert_fail@plt+0x2c0c>
   142cc:	ldr	r3, [sp, #52]	; 0x34
   142d0:	ldrb	r8, [r3, r6]
   142d4:	adds	r8, r8, #0
   142d8:	movne	r8, #1
   142dc:	b	13d50 <__assert_fail@plt+0x2d1c>
   142e0:	cmp	sl, #2
   142e4:	movne	r3, #0
   142e8:	moveq	r3, #1
   142ec:	ldr	r1, [sp, #32]
   142f0:	mov	r2, r1
   142f4:	and	r2, r2, r3
   142f8:	cmp	fp, #0
   142fc:	movne	r2, #0
   14300:	andeq	r2, r2, #1
   14304:	cmp	r2, #0
   14308:	bne	144b8 <__assert_fail@plt+0x3484>
   1430c:	eor	r2, r1, #1
   14310:	and	r3, r3, r2
   14314:	ldr	r1, [sp, #80]	; 0x50
   14318:	tst	r1, r3
   1431c:	beq	14394 <__assert_fail@plt+0x3360>
   14320:	ldr	r3, [sp, #40]	; 0x28
   14324:	cmp	r3, #0
   14328:	bne	14350 <__assert_fail@plt+0x331c>
   1432c:	ldr	r1, [sp, #76]	; 0x4c
   14330:	clz	r3, r7
   14334:	lsr	r3, r3, #5
   14338:	cmp	r1, #0
   1433c:	moveq	r3, #0
   14340:	cmp	r3, #0
   14344:	beq	14394 <__assert_fail@plt+0x3360>
   14348:	ldr	r7, [sp, #76]	; 0x4c
   1434c:	b	133e4 <__assert_fail@plt+0x23b0>
   14350:	ldr	r3, [sp, #168]	; 0xa8
   14354:	str	r3, [sp, #16]
   14358:	ldr	r3, [sp, #164]	; 0xa4
   1435c:	str	r3, [sp, #12]
   14360:	ldr	r3, [sp, #160]	; 0xa0
   14364:	str	r3, [sp, #8]
   14368:	ldr	r3, [sp, #156]	; 0x9c
   1436c:	str	r3, [sp, #4]
   14370:	mov	r3, #5
   14374:	str	r3, [sp]
   14378:	ldr	r3, [sp, #28]
   1437c:	ldr	r2, [sp, #52]	; 0x34
   14380:	ldr	r1, [sp, #76]	; 0x4c
   14384:	ldr	r0, [sp, #36]	; 0x24
   14388:	bl	13384 <__assert_fail@plt+0x2350>
   1438c:	mov	fp, r0
   14390:	b	14494 <__assert_fail@plt+0x3460>
   14394:	mov	sl, r7
   14398:	ldr	r3, [sp, #72]	; 0x48
   1439c:	cmp	r3, #0
   143a0:	moveq	r2, #0
   143a4:	andne	r2, r2, #1
   143a8:	cmp	r2, #0
   143ac:	beq	143dc <__assert_fail@plt+0x33a8>
   143b0:	mov	r2, r3
   143b4:	ldrb	r3, [r3]
   143b8:	cmp	r3, #0
   143bc:	beq	143dc <__assert_fail@plt+0x33a8>
   143c0:	ldr	r1, [sp, #36]	; 0x24
   143c4:	cmp	sl, fp
   143c8:	strbhi	r3, [r1, fp]
   143cc:	add	fp, fp, #1
   143d0:	ldrb	r3, [r2, #1]!
   143d4:	cmp	r3, #0
   143d8:	bne	143c4 <__assert_fail@plt+0x3390>
   143dc:	cmp	sl, fp
   143e0:	movhi	r3, #0
   143e4:	ldrhi	r2, [sp, #36]	; 0x24
   143e8:	strbhi	r3, [r2, fp]
   143ec:	b	14494 <__assert_fail@plt+0x3460>
   143f0:	mov	r8, sl
   143f4:	mov	sl, r7
   143f8:	ldr	r3, [sp, #32]
   143fc:	str	r3, [sp, #48]	; 0x30
   14400:	b	1443c <__assert_fail@plt+0x3408>
   14404:	mov	r8, sl
   14408:	mov	sl, r7
   1440c:	b	1443c <__assert_fail@plt+0x3408>
   14410:	mov	r8, sl
   14414:	mov	sl, r7
   14418:	b	1443c <__assert_fail@plt+0x3408>
   1441c:	andeq	r6, r1, r0, lsl pc
   14420:	andeq	r6, r1, r0, lsr #30
   14424:	andeq	r6, r1, r4, lsl pc
   14428:	mov	r8, sl
   1442c:	mov	sl, r7
   14430:	b	1443c <__assert_fail@plt+0x3408>
   14434:	mov	r8, sl
   14438:	mov	sl, r7
   1443c:	ldr	r3, [sp, #48]	; 0x30
   14440:	cmp	r8, #2
   14444:	movne	r3, #0
   14448:	andeq	r3, r3, #1
   1444c:	cmp	r3, #0
   14450:	movne	r8, #4
   14454:	ldr	r3, [sp, #168]	; 0xa8
   14458:	str	r3, [sp, #16]
   1445c:	ldr	r3, [sp, #164]	; 0xa4
   14460:	str	r3, [sp, #12]
   14464:	mov	r3, #0
   14468:	str	r3, [sp, #8]
   1446c:	ldr	r3, [sp, #156]	; 0x9c
   14470:	bic	r3, r3, #2
   14474:	str	r3, [sp, #4]
   14478:	str	r8, [sp]
   1447c:	ldr	r3, [sp, #28]
   14480:	ldr	r2, [sp, #52]	; 0x34
   14484:	mov	r1, sl
   14488:	ldr	r0, [sp, #36]	; 0x24
   1448c:	bl	13384 <__assert_fail@plt+0x2350>
   14490:	mov	fp, r0
   14494:	mov	r0, fp
   14498:	add	sp, sp, #116	; 0x74
   1449c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a0:	mov	r8, sl
   144a4:	mov	sl, r7
   144a8:	b	1443c <__assert_fail@plt+0x3408>
   144ac:	mov	r8, sl
   144b0:	mov	sl, r7
   144b4:	b	1443c <__assert_fail@plt+0x3408>
   144b8:	mov	r8, sl
   144bc:	mov	sl, r7
   144c0:	b	1443c <__assert_fail@plt+0x3408>
   144c4:	mov	r8, sl
   144c8:	mov	sl, r7
   144cc:	b	14454 <__assert_fail@plt+0x3420>
   144d0:	mov	r3, #1
   144d4:	str	r3, [sp, #32]
   144d8:	str	r3, [sp, #48]	; 0x30
   144dc:	str	r3, [sp, #60]	; 0x3c
   144e0:	ldr	r3, [pc, #-196]	; 14424 <__assert_fail@plt+0x33f0>
   144e4:	str	r3, [sp, #72]	; 0x48
   144e8:	mov	fp, #0
   144ec:	mov	sl, #5
   144f0:	b	13440 <__assert_fail@plt+0x240c>
   144f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144f8:	sub	sp, sp, #52	; 0x34
   144fc:	mov	r5, r0
   14500:	str	r1, [sp, #24]
   14504:	str	r2, [sp, #28]
   14508:	mov	r4, r3
   1450c:	bl	10f20 <__errno_location@plt>
   14510:	str	r0, [sp, #32]
   14514:	ldr	r3, [r0]
   14518:	str	r3, [sp, #36]	; 0x24
   1451c:	ldr	r3, [pc, #396]	; 146b0 <__assert_fail@plt+0x367c>
   14520:	ldr	r6, [r3]
   14524:	cmn	r5, #-2147483647	; 0x80000001
   14528:	movne	r3, #0
   1452c:	moveq	r3, #1
   14530:	orrs	r3, r3, r5, lsr #31
   14534:	bne	14674 <__assert_fail@plt+0x3640>
   14538:	ldr	r3, [pc, #368]	; 146b0 <__assert_fail@plt+0x367c>
   1453c:	ldr	r2, [r3, #4]
   14540:	cmp	r5, r2
   14544:	blt	145ac <__assert_fail@plt+0x3578>
   14548:	str	r2, [sp, #44]	; 0x2c
   1454c:	add	r3, r3, #8
   14550:	cmp	r6, r3
   14554:	beq	14678 <__assert_fail@plt+0x3644>
   14558:	sub	r2, r5, r2
   1455c:	mov	r3, #8
   14560:	str	r3, [sp]
   14564:	mvn	r3, #-2147483648	; 0x80000000
   14568:	add	r2, r2, #1
   1456c:	add	r1, sp, #44	; 0x2c
   14570:	mov	r0, r6
   14574:	bl	153f8 <__assert_fail@plt+0x43c4>
   14578:	mov	r6, r0
   1457c:	ldr	r3, [pc, #300]	; 146b0 <__assert_fail@plt+0x367c>
   14580:	str	r0, [r3]
   14584:	ldr	r7, [pc, #292]	; 146b0 <__assert_fail@plt+0x367c>
   14588:	ldr	r0, [r7, #4]
   1458c:	ldr	r2, [sp, #44]	; 0x2c
   14590:	sub	r2, r2, r0
   14594:	lsl	r2, r2, #3
   14598:	mov	r1, #0
   1459c:	add	r0, r6, r0, lsl #3
   145a0:	bl	10f38 <memset@plt>
   145a4:	ldr	r3, [sp, #44]	; 0x2c
   145a8:	str	r3, [r7, #4]
   145ac:	add	fp, r6, r5, lsl #3
   145b0:	ldr	r8, [r6, r5, lsl #3]
   145b4:	ldr	r7, [fp, #4]
   145b8:	ldr	r9, [r4, #4]
   145bc:	orr	r9, r9, #1
   145c0:	add	sl, r4, #8
   145c4:	ldr	r3, [r4, #44]	; 0x2c
   145c8:	str	r3, [sp, #16]
   145cc:	ldr	r3, [r4, #40]	; 0x28
   145d0:	str	r3, [sp, #12]
   145d4:	str	sl, [sp, #8]
   145d8:	str	r9, [sp, #4]
   145dc:	ldr	r3, [r4]
   145e0:	str	r3, [sp]
   145e4:	ldr	r3, [sp, #28]
   145e8:	ldr	r2, [sp, #24]
   145ec:	mov	r1, r8
   145f0:	mov	r0, r7
   145f4:	bl	13384 <__assert_fail@plt+0x2350>
   145f8:	cmp	r8, r0
   145fc:	bhi	1465c <__assert_fail@plt+0x3628>
   14600:	add	r8, r0, #1
   14604:	str	r8, [r6, r5, lsl #3]
   14608:	ldr	r3, [pc, #164]	; 146b4 <__assert_fail@plt+0x3680>
   1460c:	cmp	r7, r3
   14610:	beq	1461c <__assert_fail@plt+0x35e8>
   14614:	mov	r0, r7
   14618:	bl	12c10 <__assert_fail@plt+0x1bdc>
   1461c:	mov	r0, r8
   14620:	bl	15274 <__assert_fail@plt+0x4240>
   14624:	mov	r7, r0
   14628:	str	r0, [fp, #4]
   1462c:	ldr	r3, [r4, #44]	; 0x2c
   14630:	str	r3, [sp, #16]
   14634:	ldr	r3, [r4, #40]	; 0x28
   14638:	str	r3, [sp, #12]
   1463c:	str	sl, [sp, #8]
   14640:	str	r9, [sp, #4]
   14644:	ldr	r3, [r4]
   14648:	str	r3, [sp]
   1464c:	ldr	r3, [sp, #28]
   14650:	ldr	r2, [sp, #24]
   14654:	mov	r1, r8
   14658:	bl	13384 <__assert_fail@plt+0x2350>
   1465c:	ldr	r3, [sp, #32]
   14660:	ldr	r2, [sp, #36]	; 0x24
   14664:	str	r2, [r3]
   14668:	mov	r0, r7
   1466c:	add	sp, sp, #52	; 0x34
   14670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14674:	bl	1101c <abort@plt>
   14678:	sub	r2, r5, r2
   1467c:	mov	r3, #8
   14680:	str	r3, [sp]
   14684:	mvn	r3, #-2147483648	; 0x80000000
   14688:	add	r2, r2, #1
   1468c:	add	r1, sp, #44	; 0x2c
   14690:	mov	r0, #0
   14694:	bl	153f8 <__assert_fail@plt+0x43c4>
   14698:	mov	r6, r0
   1469c:	ldr	r3, [pc, #12]	; 146b0 <__assert_fail@plt+0x367c>
   146a0:	str	r0, [r3], #8
   146a4:	ldm	r3, {r0, r1}
   146a8:	stm	r6, {r0, r1}
   146ac:	b	14584 <__assert_fail@plt+0x3550>
   146b0:	andeq	r8, r2, ip, lsl #2
   146b4:			; <UNDEFINED> instruction: 0x000281b4
   146b8:	push	{r4, r5, r6, lr}
   146bc:	mov	r4, r0
   146c0:	bl	10f20 <__errno_location@plt>
   146c4:	mov	r5, r0
   146c8:	ldr	r6, [r0]
   146cc:	cmp	r4, #0
   146d0:	ldr	r3, [pc, #20]	; 146ec <__assert_fail@plt+0x36b8>
   146d4:	moveq	r4, r3
   146d8:	mov	r1, #48	; 0x30
   146dc:	mov	r0, r4
   146e0:	bl	15760 <__assert_fail@plt+0x472c>
   146e4:	str	r6, [r5]
   146e8:	pop	{r4, r5, r6, pc}
   146ec:			; <UNDEFINED> instruction: 0x000282b4
   146f0:	subs	r3, r0, #0
   146f4:	ldr	r2, [pc, #8]	; 14704 <__assert_fail@plt+0x36d0>
   146f8:	moveq	r3, r2
   146fc:	ldr	r0, [r3]
   14700:	bx	lr
   14704:			; <UNDEFINED> instruction: 0x000282b4
   14708:	subs	r3, r0, #0
   1470c:	ldr	r2, [pc, #8]	; 1471c <__assert_fail@plt+0x36e8>
   14710:	moveq	r3, r2
   14714:	str	r1, [r3]
   14718:	bx	lr
   1471c:			; <UNDEFINED> instruction: 0x000282b4
   14720:	push	{lr}		; (str lr, [sp, #-4]!)
   14724:	subs	r3, r0, #0
   14728:	ldr	r0, [pc, #44]	; 1475c <__assert_fail@plt+0x3728>
   1472c:	moveq	r3, r0
   14730:	add	r3, r3, #8
   14734:	lsr	lr, r1, #5
   14738:	and	r1, r1, #31
   1473c:	ldr	ip, [r3, lr, lsl #2]
   14740:	lsr	r0, ip, r1
   14744:	eor	r2, r2, r0
   14748:	and	r2, r2, #1
   1474c:	eor	r1, ip, r2, lsl r1
   14750:	str	r1, [r3, lr, lsl #2]
   14754:	and	r0, r0, #1
   14758:	pop	{pc}		; (ldr pc, [sp], #4)
   1475c:			; <UNDEFINED> instruction: 0x000282b4
   14760:	subs	r3, r0, #0
   14764:	ldr	r2, [pc, #12]	; 14778 <__assert_fail@plt+0x3744>
   14768:	moveq	r3, r2
   1476c:	ldr	r0, [r3, #4]
   14770:	str	r1, [r3, #4]
   14774:	bx	lr
   14778:			; <UNDEFINED> instruction: 0x000282b4
   1477c:	subs	r3, r0, #0
   14780:	ldr	r0, [pc, #40]	; 147b0 <__assert_fail@plt+0x377c>
   14784:	moveq	r3, r0
   14788:	mov	r0, #10
   1478c:	str	r0, [r3]
   14790:	cmp	r2, #0
   14794:	cmpne	r1, #0
   14798:	beq	147a8 <__assert_fail@plt+0x3774>
   1479c:	str	r1, [r3, #40]	; 0x28
   147a0:	str	r2, [r3, #44]	; 0x2c
   147a4:	bx	lr
   147a8:	push	{r4, lr}
   147ac:	bl	1101c <abort@plt>
   147b0:			; <UNDEFINED> instruction: 0x000282b4
   147b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   147b8:	sub	sp, sp, #24
   147bc:	mov	r7, r0
   147c0:	mov	r8, r1
   147c4:	mov	r9, r2
   147c8:	mov	sl, r3
   147cc:	ldr	r4, [sp, #56]	; 0x38
   147d0:	cmp	r4, #0
   147d4:	ldr	r3, [pc, #84]	; 14830 <__assert_fail@plt+0x37fc>
   147d8:	moveq	r4, r3
   147dc:	bl	10f20 <__errno_location@plt>
   147e0:	mov	r5, r0
   147e4:	ldr	r6, [r0]
   147e8:	ldr	r3, [r4, #44]	; 0x2c
   147ec:	str	r3, [sp, #16]
   147f0:	ldr	r3, [r4, #40]	; 0x28
   147f4:	str	r3, [sp, #12]
   147f8:	add	r3, r4, #8
   147fc:	str	r3, [sp, #8]
   14800:	ldr	r3, [r4, #4]
   14804:	str	r3, [sp, #4]
   14808:	ldr	r3, [r4]
   1480c:	str	r3, [sp]
   14810:	mov	r3, sl
   14814:	mov	r2, r9
   14818:	mov	r1, r8
   1481c:	mov	r0, r7
   14820:	bl	13384 <__assert_fail@plt+0x2350>
   14824:	str	r6, [r5]
   14828:	add	sp, sp, #24
   1482c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14830:			; <UNDEFINED> instruction: 0x000282b4
   14834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14838:	sub	sp, sp, #44	; 0x2c
   1483c:	str	r0, [sp, #28]
   14840:	str	r1, [sp, #32]
   14844:	mov	r6, r2
   14848:	subs	r4, r3, #0
   1484c:	ldr	r3, [pc, #172]	; 14900 <__assert_fail@plt+0x38cc>
   14850:	moveq	r4, r3
   14854:	bl	10f20 <__errno_location@plt>
   14858:	mov	r7, r0
   1485c:	ldr	fp, [r0]
   14860:	ldr	r5, [r4, #4]
   14864:	cmp	r6, #0
   14868:	orreq	r5, r5, #1
   1486c:	add	r9, r4, #8
   14870:	ldr	r3, [r4, #44]	; 0x2c
   14874:	str	r3, [sp, #16]
   14878:	ldr	r3, [r4, #40]	; 0x28
   1487c:	str	r3, [sp, #12]
   14880:	str	r9, [sp, #8]
   14884:	str	r5, [sp, #4]
   14888:	ldr	r3, [r4]
   1488c:	str	r3, [sp]
   14890:	ldr	r3, [sp, #32]
   14894:	ldr	r2, [sp, #28]
   14898:	mov	r1, #0
   1489c:	mov	r0, r1
   148a0:	bl	13384 <__assert_fail@plt+0x2350>
   148a4:	mov	sl, r0
   148a8:	add	r8, r0, #1
   148ac:	mov	r0, r8
   148b0:	bl	15274 <__assert_fail@plt+0x4240>
   148b4:	str	r0, [sp, #36]	; 0x24
   148b8:	ldr	r3, [r4, #44]	; 0x2c
   148bc:	str	r3, [sp, #16]
   148c0:	ldr	r3, [r4, #40]	; 0x28
   148c4:	str	r3, [sp, #12]
   148c8:	str	r9, [sp, #8]
   148cc:	str	r5, [sp, #4]
   148d0:	ldr	r3, [r4]
   148d4:	str	r3, [sp]
   148d8:	ldr	r3, [sp, #32]
   148dc:	ldr	r2, [sp, #28]
   148e0:	mov	r1, r8
   148e4:	bl	13384 <__assert_fail@plt+0x2350>
   148e8:	str	fp, [r7]
   148ec:	cmp	r6, #0
   148f0:	strne	sl, [r6]
   148f4:	ldr	r0, [sp, #36]	; 0x24
   148f8:	add	sp, sp, #44	; 0x2c
   148fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14900:			; <UNDEFINED> instruction: 0x000282b4
   14904:	push	{r4, lr}
   14908:	mov	r3, r2
   1490c:	mov	r2, #0
   14910:	bl	14834 <__assert_fail@plt+0x3800>
   14914:	pop	{r4, pc}
   14918:	push	{r4, r5, r6, r7, r8, lr}
   1491c:	ldr	r3, [pc, #140]	; 149b0 <__assert_fail@plt+0x397c>
   14920:	ldr	r7, [r3]
   14924:	ldr	r3, [r3, #4]
   14928:	cmp	r3, #1
   1492c:	ble	14958 <__assert_fail@plt+0x3924>
   14930:	mov	r5, r7
   14934:	mov	r4, #1
   14938:	ldr	r6, [pc, #112]	; 149b0 <__assert_fail@plt+0x397c>
   1493c:	ldr	r0, [r5, #12]
   14940:	bl	12c10 <__assert_fail@plt+0x1bdc>
   14944:	add	r4, r4, #1
   14948:	add	r5, r5, #8
   1494c:	ldr	r3, [r6, #4]
   14950:	cmp	r3, r4
   14954:	bgt	1493c <__assert_fail@plt+0x3908>
   14958:	ldr	r0, [r7, #4]
   1495c:	ldr	r3, [pc, #80]	; 149b4 <__assert_fail@plt+0x3980>
   14960:	cmp	r0, r3
   14964:	beq	14980 <__assert_fail@plt+0x394c>
   14968:	bl	12c10 <__assert_fail@plt+0x1bdc>
   1496c:	ldr	r3, [pc, #60]	; 149b0 <__assert_fail@plt+0x397c>
   14970:	mov	r2, #256	; 0x100
   14974:	str	r2, [r3, #8]
   14978:	ldr	r2, [pc, #52]	; 149b4 <__assert_fail@plt+0x3980>
   1497c:	str	r2, [r3, #12]
   14980:	ldr	r3, [pc, #48]	; 149b8 <__assert_fail@plt+0x3984>
   14984:	cmp	r7, r3
   14988:	beq	149a0 <__assert_fail@plt+0x396c>
   1498c:	mov	r0, r7
   14990:	bl	12c10 <__assert_fail@plt+0x1bdc>
   14994:	ldr	r3, [pc, #20]	; 149b0 <__assert_fail@plt+0x397c>
   14998:	add	r2, r3, #8
   1499c:	str	r2, [r3]
   149a0:	mov	r2, #1
   149a4:	ldr	r3, [pc, #4]	; 149b0 <__assert_fail@plt+0x397c>
   149a8:	str	r2, [r3, #4]
   149ac:	pop	{r4, r5, r6, r7, r8, pc}
   149b0:	andeq	r8, r2, ip, lsl #2
   149b4:			; <UNDEFINED> instruction: 0x000281b4
   149b8:	andeq	r8, r2, r4, lsl r1
   149bc:	push	{r4, lr}
   149c0:	ldr	r3, [pc, #8]	; 149d0 <__assert_fail@plt+0x399c>
   149c4:	mvn	r2, #0
   149c8:	bl	144f4 <__assert_fail@plt+0x34c0>
   149cc:	pop	{r4, pc}
   149d0:			; <UNDEFINED> instruction: 0x000282b4
   149d4:	push	{r4, lr}
   149d8:	ldr	r3, [pc, #4]	; 149e4 <__assert_fail@plt+0x39b0>
   149dc:	bl	144f4 <__assert_fail@plt+0x34c0>
   149e0:	pop	{r4, pc}
   149e4:			; <UNDEFINED> instruction: 0x000282b4
   149e8:	push	{r4, lr}
   149ec:	mov	r1, r0
   149f0:	mov	r0, #0
   149f4:	bl	149bc <__assert_fail@plt+0x3988>
   149f8:	pop	{r4, pc}
   149fc:	push	{r4, lr}
   14a00:	mov	r2, r1
   14a04:	mov	r1, r0
   14a08:	mov	r0, #0
   14a0c:	bl	149d4 <__assert_fail@plt+0x39a0>
   14a10:	pop	{r4, pc}
   14a14:	push	{r4, r5, lr}
   14a18:	sub	sp, sp, #52	; 0x34
   14a1c:	mov	r4, r0
   14a20:	mov	r5, r2
   14a24:	mov	r0, sp
   14a28:	bl	1321c <__assert_fail@plt+0x21e8>
   14a2c:	mov	r3, sp
   14a30:	mvn	r2, #0
   14a34:	mov	r1, r5
   14a38:	mov	r0, r4
   14a3c:	bl	144f4 <__assert_fail@plt+0x34c0>
   14a40:	add	sp, sp, #52	; 0x34
   14a44:	pop	{r4, r5, pc}
   14a48:	push	{r4, r5, r6, lr}
   14a4c:	sub	sp, sp, #48	; 0x30
   14a50:	mov	r4, r0
   14a54:	mov	r5, r2
   14a58:	mov	r6, r3
   14a5c:	mov	r0, sp
   14a60:	bl	1321c <__assert_fail@plt+0x21e8>
   14a64:	mov	r3, sp
   14a68:	mov	r2, r6
   14a6c:	mov	r1, r5
   14a70:	mov	r0, r4
   14a74:	bl	144f4 <__assert_fail@plt+0x34c0>
   14a78:	add	sp, sp, #48	; 0x30
   14a7c:	pop	{r4, r5, r6, pc}
   14a80:	push	{r4, lr}
   14a84:	mov	r2, r1
   14a88:	mov	r1, r0
   14a8c:	mov	r0, #0
   14a90:	bl	14a14 <__assert_fail@plt+0x39e0>
   14a94:	pop	{r4, pc}
   14a98:	push	{r4, lr}
   14a9c:	mov	r3, r2
   14aa0:	mov	r2, r1
   14aa4:	mov	r1, r0
   14aa8:	mov	r0, #0
   14aac:	bl	14a48 <__assert_fail@plt+0x3a14>
   14ab0:	pop	{r4, pc}
   14ab4:	push	{r4, r5, r6, lr}
   14ab8:	sub	sp, sp, #48	; 0x30
   14abc:	mov	r4, r0
   14ac0:	mov	r5, r1
   14ac4:	mov	r6, r2
   14ac8:	mov	ip, sp
   14acc:	ldr	lr, [pc, #64]	; 14b14 <__assert_fail@plt+0x3ae0>
   14ad0:	ldm	lr!, {r0, r1, r2, r3}
   14ad4:	stmia	ip!, {r0, r1, r2, r3}
   14ad8:	ldm	lr!, {r0, r1, r2, r3}
   14adc:	stmia	ip!, {r0, r1, r2, r3}
   14ae0:	ldm	lr, {r0, r1, r2, r3}
   14ae4:	stm	ip, {r0, r1, r2, r3}
   14ae8:	mov	r2, #1
   14aec:	mov	r1, r6
   14af0:	mov	r0, sp
   14af4:	bl	14720 <__assert_fail@plt+0x36ec>
   14af8:	mov	r3, sp
   14afc:	mov	r2, r5
   14b00:	mov	r1, r4
   14b04:	mov	r0, #0
   14b08:	bl	144f4 <__assert_fail@plt+0x34c0>
   14b0c:	add	sp, sp, #48	; 0x30
   14b10:	pop	{r4, r5, r6, pc}
   14b14:			; <UNDEFINED> instruction: 0x000282b4
   14b18:	push	{r4, lr}
   14b1c:	mov	r2, r1
   14b20:	mvn	r1, #0
   14b24:	bl	14ab4 <__assert_fail@plt+0x3a80>
   14b28:	pop	{r4, pc}
   14b2c:	push	{r4, lr}
   14b30:	mov	r1, #58	; 0x3a
   14b34:	bl	14b18 <__assert_fail@plt+0x3ae4>
   14b38:	pop	{r4, pc}
   14b3c:	push	{r4, lr}
   14b40:	mov	r2, #58	; 0x3a
   14b44:	bl	14ab4 <__assert_fail@plt+0x3a80>
   14b48:	pop	{r4, pc}
   14b4c:	push	{r4, r5, lr}
   14b50:	sub	sp, sp, #100	; 0x64
   14b54:	mov	r4, r0
   14b58:	mov	r5, r2
   14b5c:	mov	r0, sp
   14b60:	bl	1321c <__assert_fail@plt+0x21e8>
   14b64:	add	lr, sp, #48	; 0x30
   14b68:	mov	ip, sp
   14b6c:	ldm	ip!, {r0, r1, r2, r3}
   14b70:	stmia	lr!, {r0, r1, r2, r3}
   14b74:	ldm	ip!, {r0, r1, r2, r3}
   14b78:	stmia	lr!, {r0, r1, r2, r3}
   14b7c:	ldm	ip, {r0, r1, r2, r3}
   14b80:	stm	lr, {r0, r1, r2, r3}
   14b84:	mov	r2, #1
   14b88:	mov	r1, #58	; 0x3a
   14b8c:	add	r0, sp, #48	; 0x30
   14b90:	bl	14720 <__assert_fail@plt+0x36ec>
   14b94:	add	r3, sp, #48	; 0x30
   14b98:	mvn	r2, #0
   14b9c:	mov	r1, r5
   14ba0:	mov	r0, r4
   14ba4:	bl	144f4 <__assert_fail@plt+0x34c0>
   14ba8:	add	sp, sp, #100	; 0x64
   14bac:	pop	{r4, r5, pc}
   14bb0:	push	{r4, r5, r6, r7, lr}
   14bb4:	sub	sp, sp, #52	; 0x34
   14bb8:	mov	r4, r0
   14bbc:	mov	r6, r1
   14bc0:	mov	r7, r2
   14bc4:	mov	r5, r3
   14bc8:	mov	ip, sp
   14bcc:	ldr	lr, [pc, #64]	; 14c14 <__assert_fail@plt+0x3be0>
   14bd0:	ldm	lr!, {r0, r1, r2, r3}
   14bd4:	stmia	ip!, {r0, r1, r2, r3}
   14bd8:	ldm	lr!, {r0, r1, r2, r3}
   14bdc:	stmia	ip!, {r0, r1, r2, r3}
   14be0:	ldm	lr, {r0, r1, r2, r3}
   14be4:	stm	ip, {r0, r1, r2, r3}
   14be8:	mov	r2, r7
   14bec:	mov	r1, r6
   14bf0:	mov	r0, sp
   14bf4:	bl	1477c <__assert_fail@plt+0x3748>
   14bf8:	mov	r3, sp
   14bfc:	ldr	r2, [sp, #72]	; 0x48
   14c00:	mov	r1, r5
   14c04:	mov	r0, r4
   14c08:	bl	144f4 <__assert_fail@plt+0x34c0>
   14c0c:	add	sp, sp, #52	; 0x34
   14c10:	pop	{r4, r5, r6, r7, pc}
   14c14:			; <UNDEFINED> instruction: 0x000282b4
   14c18:	push	{lr}		; (str lr, [sp, #-4]!)
   14c1c:	sub	sp, sp, #12
   14c20:	mvn	ip, #0
   14c24:	str	ip, [sp]
   14c28:	bl	14bb0 <__assert_fail@plt+0x3b7c>
   14c2c:	add	sp, sp, #12
   14c30:	pop	{pc}		; (ldr pc, [sp], #4)
   14c34:	push	{r4, lr}
   14c38:	mov	r3, r2
   14c3c:	mov	r2, r1
   14c40:	mov	r1, r0
   14c44:	mov	r0, #0
   14c48:	bl	14c18 <__assert_fail@plt+0x3be4>
   14c4c:	pop	{r4, pc}
   14c50:	push	{lr}		; (str lr, [sp, #-4]!)
   14c54:	sub	sp, sp, #12
   14c58:	str	r3, [sp]
   14c5c:	mov	r3, r2
   14c60:	mov	r2, r1
   14c64:	mov	r1, r0
   14c68:	mov	r0, #0
   14c6c:	bl	14bb0 <__assert_fail@plt+0x3b7c>
   14c70:	add	sp, sp, #12
   14c74:	pop	{pc}		; (ldr pc, [sp], #4)
   14c78:	push	{r4, lr}
   14c7c:	ldr	r3, [pc, #4]	; 14c88 <__assert_fail@plt+0x3c54>
   14c80:	bl	144f4 <__assert_fail@plt+0x34c0>
   14c84:	pop	{r4, pc}
   14c88:	andeq	r8, r2, ip, lsl r1
   14c8c:	push	{r4, lr}
   14c90:	mov	r2, r1
   14c94:	mov	r1, r0
   14c98:	mov	r0, #0
   14c9c:	bl	14c78 <__assert_fail@plt+0x3c44>
   14ca0:	pop	{r4, pc}
   14ca4:	push	{r4, lr}
   14ca8:	mvn	r2, #0
   14cac:	bl	14c78 <__assert_fail@plt+0x3c44>
   14cb0:	pop	{r4, pc}
   14cb4:	push	{r4, lr}
   14cb8:	mov	r1, r0
   14cbc:	mov	r0, #0
   14cc0:	bl	14ca4 <__assert_fail@plt+0x3c70>
   14cc4:	pop	{r4, pc}
   14cc8:	push	{r4, r5, r6, lr}
   14ccc:	sub	sp, sp, #32
   14cd0:	mov	r4, r0
   14cd4:	ldr	r5, [sp, #48]	; 0x30
   14cd8:	ldr	r6, [sp, #52]	; 0x34
   14cdc:	cmp	r1, #0
   14ce0:	beq	14d98 <__assert_fail@plt+0x3d64>
   14ce4:	str	r3, [sp, #4]
   14ce8:	str	r2, [sp]
   14cec:	mov	r3, r1
   14cf0:	ldr	r2, [pc, #940]	; 150a4 <__assert_fail@plt+0x4070>
   14cf4:	mov	r1, #1
   14cf8:	bl	10f68 <__fprintf_chk@plt>
   14cfc:	mov	r2, #5
   14d00:	ldr	r1, [pc, #928]	; 150a8 <__assert_fail@plt+0x4074>
   14d04:	mov	r0, #0
   14d08:	bl	10e3c <dcgettext@plt>
   14d0c:	ldr	r3, [pc, #920]	; 150ac <__assert_fail@plt+0x4078>
   14d10:	str	r3, [sp]
   14d14:	mov	r3, r0
   14d18:	ldr	r2, [pc, #912]	; 150b0 <__assert_fail@plt+0x407c>
   14d1c:	mov	r1, #1
   14d20:	mov	r0, r4
   14d24:	bl	10f68 <__fprintf_chk@plt>
   14d28:	mov	r1, r4
   14d2c:	mov	r0, #10
   14d30:	bl	10e30 <fputc_unlocked@plt>
   14d34:	mov	r2, #5
   14d38:	ldr	r1, [pc, #884]	; 150b4 <__assert_fail@plt+0x4080>
   14d3c:	mov	r0, #0
   14d40:	bl	10e3c <dcgettext@plt>
   14d44:	ldr	r3, [pc, #876]	; 150b8 <__assert_fail@plt+0x4084>
   14d48:	mov	r2, r0
   14d4c:	mov	r1, #1
   14d50:	mov	r0, r4
   14d54:	bl	10f68 <__fprintf_chk@plt>
   14d58:	mov	r1, r4
   14d5c:	mov	r0, #10
   14d60:	bl	10e30 <fputc_unlocked@plt>
   14d64:	cmp	r6, #9
   14d68:	ldrls	pc, [pc, r6, lsl #2]
   14d6c:	b	1503c <__assert_fail@plt+0x4008>
   14d70:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d74:			; <UNDEFINED> instruction: 0x00014db0
   14d78:	ldrdeq	r4, [r1], -ip
   14d7c:	andeq	r4, r1, ip, lsl #28
   14d80:	andeq	r4, r1, r4, asr #28
   14d84:	andeq	r4, r1, r4, lsl #29
   14d88:	andeq	r4, r1, ip, asr #29
   14d8c:	andeq	r4, r1, ip, lsl pc
   14d90:	andeq	r4, r1, r4, ror pc
   14d94:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d98:	str	r3, [sp]
   14d9c:	mov	r3, r2
   14da0:	ldr	r2, [pc, #788]	; 150bc <__assert_fail@plt+0x4088>
   14da4:	mov	r1, #1
   14da8:	bl	10f68 <__fprintf_chk@plt>
   14dac:	b	14cfc <__assert_fail@plt+0x3cc8>
   14db0:	mov	r2, #5
   14db4:	ldr	r1, [pc, #772]	; 150c0 <__assert_fail@plt+0x408c>
   14db8:	mov	r0, #0
   14dbc:	bl	10e3c <dcgettext@plt>
   14dc0:	ldr	r3, [r5]
   14dc4:	mov	r2, r0
   14dc8:	mov	r1, #1
   14dcc:	mov	r0, r4
   14dd0:	bl	10f68 <__fprintf_chk@plt>
   14dd4:	add	sp, sp, #32
   14dd8:	pop	{r4, r5, r6, pc}
   14ddc:	mov	r2, #5
   14de0:	ldr	r1, [pc, #732]	; 150c4 <__assert_fail@plt+0x4090>
   14de4:	mov	r0, #0
   14de8:	bl	10e3c <dcgettext@plt>
   14dec:	ldr	r3, [r5]
   14df0:	ldr	r2, [r5, #4]
   14df4:	str	r2, [sp]
   14df8:	mov	r2, r0
   14dfc:	mov	r1, #1
   14e00:	mov	r0, r4
   14e04:	bl	10f68 <__fprintf_chk@plt>
   14e08:	b	14dd4 <__assert_fail@plt+0x3da0>
   14e0c:	mov	r2, #5
   14e10:	ldr	r1, [pc, #688]	; 150c8 <__assert_fail@plt+0x4094>
   14e14:	mov	r0, #0
   14e18:	bl	10e3c <dcgettext@plt>
   14e1c:	ldr	r3, [r5]
   14e20:	ldr	r2, [r5, #8]
   14e24:	str	r2, [sp, #4]
   14e28:	ldr	r2, [r5, #4]
   14e2c:	str	r2, [sp]
   14e30:	mov	r2, r0
   14e34:	mov	r1, #1
   14e38:	mov	r0, r4
   14e3c:	bl	10f68 <__fprintf_chk@plt>
   14e40:	b	14dd4 <__assert_fail@plt+0x3da0>
   14e44:	mov	r2, #5
   14e48:	ldr	r1, [pc, #636]	; 150cc <__assert_fail@plt+0x4098>
   14e4c:	mov	r0, #0
   14e50:	bl	10e3c <dcgettext@plt>
   14e54:	ldr	r3, [r5]
   14e58:	ldr	r2, [r5, #12]
   14e5c:	str	r2, [sp, #8]
   14e60:	ldr	r2, [r5, #8]
   14e64:	str	r2, [sp, #4]
   14e68:	ldr	r2, [r5, #4]
   14e6c:	str	r2, [sp]
   14e70:	mov	r2, r0
   14e74:	mov	r1, #1
   14e78:	mov	r0, r4
   14e7c:	bl	10f68 <__fprintf_chk@plt>
   14e80:	b	14dd4 <__assert_fail@plt+0x3da0>
   14e84:	mov	r2, #5
   14e88:	ldr	r1, [pc, #576]	; 150d0 <__assert_fail@plt+0x409c>
   14e8c:	mov	r0, #0
   14e90:	bl	10e3c <dcgettext@plt>
   14e94:	ldr	r3, [r5]
   14e98:	ldr	r2, [r5, #16]
   14e9c:	str	r2, [sp, #12]
   14ea0:	ldr	r2, [r5, #12]
   14ea4:	str	r2, [sp, #8]
   14ea8:	ldr	r2, [r5, #8]
   14eac:	str	r2, [sp, #4]
   14eb0:	ldr	r2, [r5, #4]
   14eb4:	str	r2, [sp]
   14eb8:	mov	r2, r0
   14ebc:	mov	r1, #1
   14ec0:	mov	r0, r4
   14ec4:	bl	10f68 <__fprintf_chk@plt>
   14ec8:	b	14dd4 <__assert_fail@plt+0x3da0>
   14ecc:	mov	r2, #5
   14ed0:	ldr	r1, [pc, #508]	; 150d4 <__assert_fail@plt+0x40a0>
   14ed4:	mov	r0, #0
   14ed8:	bl	10e3c <dcgettext@plt>
   14edc:	ldr	r3, [r5]
   14ee0:	ldr	r2, [r5, #20]
   14ee4:	str	r2, [sp, #16]
   14ee8:	ldr	r2, [r5, #16]
   14eec:	str	r2, [sp, #12]
   14ef0:	ldr	r2, [r5, #12]
   14ef4:	str	r2, [sp, #8]
   14ef8:	ldr	r2, [r5, #8]
   14efc:	str	r2, [sp, #4]
   14f00:	ldr	r2, [r5, #4]
   14f04:	str	r2, [sp]
   14f08:	mov	r2, r0
   14f0c:	mov	r1, #1
   14f10:	mov	r0, r4
   14f14:	bl	10f68 <__fprintf_chk@plt>
   14f18:	b	14dd4 <__assert_fail@plt+0x3da0>
   14f1c:	mov	r2, #5
   14f20:	ldr	r1, [pc, #432]	; 150d8 <__assert_fail@plt+0x40a4>
   14f24:	mov	r0, #0
   14f28:	bl	10e3c <dcgettext@plt>
   14f2c:	ldr	r3, [r5]
   14f30:	ldr	r2, [r5, #24]
   14f34:	str	r2, [sp, #20]
   14f38:	ldr	r2, [r5, #20]
   14f3c:	str	r2, [sp, #16]
   14f40:	ldr	r2, [r5, #16]
   14f44:	str	r2, [sp, #12]
   14f48:	ldr	r2, [r5, #12]
   14f4c:	str	r2, [sp, #8]
   14f50:	ldr	r2, [r5, #8]
   14f54:	str	r2, [sp, #4]
   14f58:	ldr	r2, [r5, #4]
   14f5c:	str	r2, [sp]
   14f60:	mov	r2, r0
   14f64:	mov	r1, #1
   14f68:	mov	r0, r4
   14f6c:	bl	10f68 <__fprintf_chk@plt>
   14f70:	b	14dd4 <__assert_fail@plt+0x3da0>
   14f74:	mov	r2, #5
   14f78:	ldr	r1, [pc, #348]	; 150dc <__assert_fail@plt+0x40a8>
   14f7c:	mov	r0, #0
   14f80:	bl	10e3c <dcgettext@plt>
   14f84:	ldr	r3, [r5]
   14f88:	ldr	r2, [r5, #28]
   14f8c:	str	r2, [sp, #24]
   14f90:	ldr	r2, [r5, #24]
   14f94:	str	r2, [sp, #20]
   14f98:	ldr	r2, [r5, #20]
   14f9c:	str	r2, [sp, #16]
   14fa0:	ldr	r2, [r5, #16]
   14fa4:	str	r2, [sp, #12]
   14fa8:	ldr	r2, [r5, #12]
   14fac:	str	r2, [sp, #8]
   14fb0:	ldr	r2, [r5, #8]
   14fb4:	str	r2, [sp, #4]
   14fb8:	ldr	r2, [r5, #4]
   14fbc:	str	r2, [sp]
   14fc0:	mov	r2, r0
   14fc4:	mov	r1, #1
   14fc8:	mov	r0, r4
   14fcc:	bl	10f68 <__fprintf_chk@plt>
   14fd0:	b	14dd4 <__assert_fail@plt+0x3da0>
   14fd4:	mov	r2, #5
   14fd8:	ldr	r1, [pc, #256]	; 150e0 <__assert_fail@plt+0x40ac>
   14fdc:	mov	r0, #0
   14fe0:	bl	10e3c <dcgettext@plt>
   14fe4:	ldr	r3, [r5]
   14fe8:	ldr	r2, [r5, #32]
   14fec:	str	r2, [sp, #28]
   14ff0:	ldr	r2, [r5, #28]
   14ff4:	str	r2, [sp, #24]
   14ff8:	ldr	r2, [r5, #24]
   14ffc:	str	r2, [sp, #20]
   15000:	ldr	r2, [r5, #20]
   15004:	str	r2, [sp, #16]
   15008:	ldr	r2, [r5, #16]
   1500c:	str	r2, [sp, #12]
   15010:	ldr	r2, [r5, #12]
   15014:	str	r2, [sp, #8]
   15018:	ldr	r2, [r5, #8]
   1501c:	str	r2, [sp, #4]
   15020:	ldr	r2, [r5, #4]
   15024:	str	r2, [sp]
   15028:	mov	r2, r0
   1502c:	mov	r1, #1
   15030:	mov	r0, r4
   15034:	bl	10f68 <__fprintf_chk@plt>
   15038:	b	14dd4 <__assert_fail@plt+0x3da0>
   1503c:	mov	r2, #5
   15040:	ldr	r1, [pc, #156]	; 150e4 <__assert_fail@plt+0x40b0>
   15044:	mov	r0, #0
   15048:	bl	10e3c <dcgettext@plt>
   1504c:	ldr	r3, [r5]
   15050:	ldr	r2, [r5, #32]
   15054:	str	r2, [sp, #28]
   15058:	ldr	r2, [r5, #28]
   1505c:	str	r2, [sp, #24]
   15060:	ldr	r2, [r5, #24]
   15064:	str	r2, [sp, #20]
   15068:	ldr	r2, [r5, #20]
   1506c:	str	r2, [sp, #16]
   15070:	ldr	r2, [r5, #16]
   15074:	str	r2, [sp, #12]
   15078:	ldr	r2, [r5, #12]
   1507c:	str	r2, [sp, #8]
   15080:	ldr	r2, [r5, #8]
   15084:	str	r2, [sp, #4]
   15088:	ldr	r2, [r5, #4]
   1508c:	str	r2, [sp]
   15090:	mov	r2, r0
   15094:	mov	r1, #1
   15098:	mov	r0, r4
   1509c:	bl	10f68 <__fprintf_chk@plt>
   150a0:	b	14dd4 <__assert_fail@plt+0x3da0>
   150a4:	andeq	r6, r1, r8, lsl #31
   150a8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   150ac:	andeq	r0, r0, r6, ror #15
   150b0:	andeq	r7, r1, r4, ror r2
   150b4:	andeq	r6, r1, r0, lsr #31
   150b8:	andeq	r7, r1, ip, asr #32
   150bc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   150c0:	andeq	r7, r1, r0, ror r0
   150c4:	andeq	r7, r1, r0, lsl #1
   150c8:	muleq	r1, r8, r0
   150cc:	strheq	r7, [r1], -r4
   150d0:	ldrdeq	r7, [r1], -r4
   150d4:	strdeq	r7, [r1], -r8
   150d8:	andeq	r7, r1, r0, lsr #2
   150dc:	andeq	r7, r1, ip, asr #2
   150e0:	andeq	r7, r1, ip, ror r1
   150e4:			; <UNDEFINED> instruction: 0x000171b0
   150e8:	push	{r4, r5, lr}
   150ec:	sub	sp, sp, #12
   150f0:	ldr	r5, [sp, #24]
   150f4:	ldr	ip, [r5]
   150f8:	cmp	ip, #0
   150fc:	beq	1512c <__assert_fail@plt+0x40f8>
   15100:	mov	lr, r5
   15104:	mov	ip, #0
   15108:	add	ip, ip, #1
   1510c:	ldr	r4, [lr, #4]!
   15110:	cmp	r4, #0
   15114:	bne	15108 <__assert_fail@plt+0x40d4>
   15118:	str	ip, [sp, #4]
   1511c:	str	r5, [sp]
   15120:	bl	14cc8 <__assert_fail@plt+0x3c94>
   15124:	add	sp, sp, #12
   15128:	pop	{r4, r5, pc}
   1512c:	mov	ip, #0
   15130:	b	15118 <__assert_fail@plt+0x40e4>
   15134:	push	{r4, r5, lr}
   15138:	sub	sp, sp, #52	; 0x34
   1513c:	ldr	r4, [sp, #64]	; 0x40
   15140:	sub	r4, r4, #4
   15144:	add	r5, sp, #4
   15148:	mov	ip, #0
   1514c:	ldr	lr, [r4, #4]!
   15150:	str	lr, [r5, #4]!
   15154:	cmp	lr, #0
   15158:	beq	15168 <__assert_fail@plt+0x4134>
   1515c:	add	ip, ip, #1
   15160:	cmp	ip, #10
   15164:	bne	1514c <__assert_fail@plt+0x4118>
   15168:	str	ip, [sp, #4]
   1516c:	add	ip, sp, #8
   15170:	str	ip, [sp]
   15174:	bl	14cc8 <__assert_fail@plt+0x3c94>
   15178:	add	sp, sp, #52	; 0x34
   1517c:	pop	{r4, r5, pc}
   15180:	push	{r3}		; (str r3, [sp, #-4]!)
   15184:	push	{lr}		; (str lr, [sp, #-4]!)
   15188:	sub	sp, sp, #16
   1518c:	add	r3, sp, #24
   15190:	str	r3, [sp, #12]
   15194:	str	r3, [sp]
   15198:	ldr	r3, [sp, #20]
   1519c:	bl	15134 <__assert_fail@plt+0x4100>
   151a0:	add	sp, sp, #16
   151a4:	pop	{lr}		; (ldr lr, [sp], #4)
   151a8:	add	sp, sp, #4
   151ac:	bx	lr
   151b0:	push	{r4, lr}
   151b4:	ldr	r3, [pc, #112]	; 1522c <__assert_fail@plt+0x41f8>
   151b8:	ldr	r1, [r3]
   151bc:	mov	r0, #10
   151c0:	bl	10e30 <fputc_unlocked@plt>
   151c4:	mov	r2, #5
   151c8:	ldr	r1, [pc, #96]	; 15230 <__assert_fail@plt+0x41fc>
   151cc:	mov	r0, #0
   151d0:	bl	10e3c <dcgettext@plt>
   151d4:	ldr	r2, [pc, #88]	; 15234 <__assert_fail@plt+0x4200>
   151d8:	mov	r1, r0
   151dc:	mov	r0, #1
   151e0:	bl	10f50 <__printf_chk@plt>
   151e4:	mov	r2, #5
   151e8:	ldr	r1, [pc, #72]	; 15238 <__assert_fail@plt+0x4204>
   151ec:	mov	r0, #0
   151f0:	bl	10e3c <dcgettext@plt>
   151f4:	ldr	r3, [pc, #64]	; 1523c <__assert_fail@plt+0x4208>
   151f8:	ldr	r2, [pc, #64]	; 15240 <__assert_fail@plt+0x420c>
   151fc:	mov	r1, r0
   15200:	mov	r0, #1
   15204:	bl	10f50 <__printf_chk@plt>
   15208:	mov	r2, #5
   1520c:	ldr	r1, [pc, #48]	; 15244 <__assert_fail@plt+0x4210>
   15210:	mov	r0, #0
   15214:	bl	10e3c <dcgettext@plt>
   15218:	ldr	r2, [pc, #40]	; 15248 <__assert_fail@plt+0x4214>
   1521c:	mov	r1, r0
   15220:	mov	r0, #1
   15224:	bl	10f50 <__printf_chk@plt>
   15228:	pop	{r4, pc}
   1522c:	andeq	r8, r2, ip, ror #2
   15230:	andeq	r7, r1, ip, ror #3
   15234:	andeq	r7, r1, r0, lsl #4
   15238:	andeq	r7, r1, r8, lsl r2
   1523c:	andeq	r6, r1, r0, lsr #19
   15240:	andeq	r6, r1, r8, asr #19
   15244:	andeq	r7, r1, ip, lsr #4
   15248:	andeq	r7, r1, r4, asr r2
   1524c:	push	{r4, lr}
   15250:	bl	15880 <__assert_fail@plt+0x484c>
   15254:	cmp	r0, #0
   15258:	popne	{r4, pc}
   1525c:	bl	157f0 <__assert_fail@plt+0x47bc>
   15260:	push	{r4, lr}
   15264:	bl	15880 <__assert_fail@plt+0x484c>
   15268:	cmp	r0, #0
   1526c:	popne	{r4, pc}
   15270:	bl	157f0 <__assert_fail@plt+0x47bc>
   15274:	push	{r4, lr}
   15278:	bl	1524c <__assert_fail@plt+0x4218>
   1527c:	pop	{r4, pc}
   15280:	push	{r4, r5, r6, lr}
   15284:	mov	r5, r0
   15288:	mov	r4, r1
   1528c:	bl	158b0 <__assert_fail@plt+0x487c>
   15290:	cmp	r0, #0
   15294:	popne	{r4, r5, r6, pc}
   15298:	adds	r4, r4, #0
   1529c:	movne	r4, #1
   152a0:	cmp	r5, #0
   152a4:	orreq	r4, r4, #1
   152a8:	cmp	r4, #0
   152ac:	popeq	{r4, r5, r6, pc}
   152b0:	bl	157f0 <__assert_fail@plt+0x47bc>
   152b4:	push	{r4, lr}
   152b8:	cmp	r1, #0
   152bc:	orreq	r1, r1, #1
   152c0:	bl	158b0 <__assert_fail@plt+0x487c>
   152c4:	cmp	r0, #0
   152c8:	popne	{r4, pc}
   152cc:	bl	157f0 <__assert_fail@plt+0x47bc>
   152d0:	push	{r4, r5, r6, lr}
   152d4:	mov	r6, r0
   152d8:	mov	r5, r1
   152dc:	mov	r4, r2
   152e0:	bl	15b84 <__assert_fail@plt+0x4b50>
   152e4:	cmp	r0, #0
   152e8:	popne	{r4, r5, r6, pc}
   152ec:	cmp	r6, #0
   152f0:	beq	15300 <__assert_fail@plt+0x42cc>
   152f4:	cmp	r5, #0
   152f8:	cmpne	r4, #0
   152fc:	popeq	{r4, r5, r6, pc}
   15300:	bl	157f0 <__assert_fail@plt+0x47bc>
   15304:	push	{r4, lr}
   15308:	bl	152d0 <__assert_fail@plt+0x429c>
   1530c:	pop	{r4, pc}
   15310:	push	{r4, lr}
   15314:	mov	ip, r1
   15318:	mov	r3, r2
   1531c:	cmp	r2, #0
   15320:	cmpne	r1, #0
   15324:	moveq	r3, #1
   15328:	moveq	ip, r3
   1532c:	mov	r2, r3
   15330:	mov	r1, ip
   15334:	bl	15b84 <__assert_fail@plt+0x4b50>
   15338:	cmp	r0, #0
   1533c:	popne	{r4, pc}
   15340:	bl	157f0 <__assert_fail@plt+0x47bc>
   15344:	push	{r4, lr}
   15348:	mov	r2, r1
   1534c:	mov	r1, r0
   15350:	mov	r0, #0
   15354:	bl	152d0 <__assert_fail@plt+0x429c>
   15358:	pop	{r4, pc}
   1535c:	push	{r4, lr}
   15360:	mov	r2, r1
   15364:	mov	r1, r0
   15368:	mov	r0, #0
   1536c:	bl	15310 <__assert_fail@plt+0x42dc>
   15370:	pop	{r4, pc}
   15374:	push	{r4, r5, r6, r7, r8, lr}
   15378:	mov	r5, r1
   1537c:	mov	r6, r2
   15380:	ldr	r4, [r1]
   15384:	subs	r7, r0, #0
   15388:	beq	153a4 <__assert_fail@plt+0x4370>
   1538c:	lsr	r2, r4, #1
   15390:	add	r3, r2, #1
   15394:	mvn	r3, r3
   15398:	cmp	r4, r3
   1539c:	bls	153c8 <__assert_fail@plt+0x4394>
   153a0:	bl	157f0 <__assert_fail@plt+0x47bc>
   153a4:	cmp	r4, #0
   153a8:	bne	153d0 <__assert_fail@plt+0x439c>
   153ac:	mov	r1, r2
   153b0:	mov	r0, #64	; 0x40
   153b4:	bl	15d18 <__assert_fail@plt+0x4ce4>
   153b8:	cmp	r0, #0
   153bc:	movne	r4, r0
   153c0:	addeq	r4, r0, #1
   153c4:	b	153d0 <__assert_fail@plt+0x439c>
   153c8:	add	r4, r4, #1
   153cc:	add	r4, r4, r2
   153d0:	mov	r2, r6
   153d4:	mov	r1, r4
   153d8:	mov	r0, r7
   153dc:	bl	152d0 <__assert_fail@plt+0x429c>
   153e0:	str	r4, [r5]
   153e4:	pop	{r4, r5, r6, r7, r8, pc}
   153e8:	push	{r4, lr}
   153ec:	mov	r2, #1
   153f0:	bl	15374 <__assert_fail@plt+0x4340>
   153f4:	pop	{r4, pc}
   153f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153fc:	sub	sp, sp, #12
   15400:	mov	fp, r0
   15404:	mov	sl, r1
   15408:	mov	r9, r2
   1540c:	mov	r7, r3
   15410:	ldr	r6, [sp, #48]	; 0x30
   15414:	ldr	r5, [r1]
   15418:	asrs	r4, r5, #1
   1541c:	bmi	15578 <__assert_fail@plt+0x4544>
   15420:	cmp	r5, #0
   15424:	blt	1558c <__assert_fail@plt+0x4558>
   15428:	mvn	r3, #-2147483648	; 0x80000000
   1542c:	sub	r3, r3, r4
   15430:	cmp	r5, r3
   15434:	movle	r3, #0
   15438:	movgt	r3, #1
   1543c:	cmp	r3, #0
   15440:	addeq	r4, r4, r5
   15444:	mvnne	r4, #-2147483648	; 0x80000000
   15448:	mvn	r8, r7
   1544c:	lsr	r8, r8, #31
   15450:	cmp	r7, r4
   15454:	movge	r3, #0
   15458:	andlt	r3, r8, #1
   1545c:	cmp	r3, #0
   15460:	movne	r4, r7
   15464:	cmp	r6, #0
   15468:	blt	155a0 <__assert_fail@plt+0x456c>
   1546c:	cmp	r6, #0
   15470:	beq	1564c <__assert_fail@plt+0x4618>
   15474:	cmp	r4, #0
   15478:	blt	155fc <__assert_fail@plt+0x45c8>
   1547c:	mov	r1, r6
   15480:	mvn	r0, #-2147483648	; 0x80000000
   15484:	bl	15f24 <__assert_fail@plt+0x4ef0>
   15488:	cmp	r0, r4
   1548c:	movge	r0, #0
   15490:	movlt	r0, #1
   15494:	cmp	r0, #0
   15498:	mvnne	r3, #-2147483648	; 0x80000000
   1549c:	strne	r3, [sp, #4]
   154a0:	beq	15634 <__assert_fail@plt+0x4600>
   154a4:	mov	r1, r6
   154a8:	ldr	r0, [sp, #4]
   154ac:	bl	15f24 <__assert_fail@plt+0x4ef0>
   154b0:	mov	r4, r0
   154b4:	mov	r1, r6
   154b8:	ldr	r0, [sp, #4]
   154bc:	bl	16144 <__assert_fail@plt+0x5110>
   154c0:	ldr	r3, [sp, #4]
   154c4:	sub	r1, r3, r1
   154c8:	cmp	fp, #0
   154cc:	moveq	r3, #0
   154d0:	streq	r3, [sl]
   154d4:	sub	r3, r4, r5
   154d8:	cmp	r3, r9
   154dc:	bge	15564 <__assert_fail@plt+0x4530>
   154e0:	cmp	r9, #0
   154e4:	blt	15658 <__assert_fail@plt+0x4624>
   154e8:	cmp	r5, #0
   154ec:	blt	1566c <__assert_fail@plt+0x4638>
   154f0:	mvn	r3, #-2147483648	; 0x80000000
   154f4:	sub	r3, r3, r9
   154f8:	cmp	r5, r3
   154fc:	movle	r3, #0
   15500:	movgt	r3, #1
   15504:	cmp	r3, #0
   15508:	bne	15714 <__assert_fail@plt+0x46e0>
   1550c:	add	r5, r5, r9
   15510:	mov	r4, r5
   15514:	cmp	r7, r5
   15518:	movge	r7, #0
   1551c:	andlt	r7, r8, #1
   15520:	cmp	r7, #0
   15524:	bne	15714 <__assert_fail@plt+0x46e0>
   15528:	cmp	r6, #0
   1552c:	blt	15680 <__assert_fail@plt+0x464c>
   15530:	cmp	r6, #0
   15534:	beq	15560 <__assert_fail@plt+0x452c>
   15538:	cmp	r5, #0
   1553c:	blt	156dc <__assert_fail@plt+0x46a8>
   15540:	mov	r1, r6
   15544:	mvn	r0, #-2147483648	; 0x80000000
   15548:	bl	15f24 <__assert_fail@plt+0x4ef0>
   1554c:	cmp	r5, r0
   15550:	movle	r0, #0
   15554:	movgt	r0, #1
   15558:	cmp	r0, #0
   1555c:	bne	15714 <__assert_fail@plt+0x46e0>
   15560:	mul	r1, r5, r6
   15564:	mov	r0, fp
   15568:	bl	15280 <__assert_fail@plt+0x424c>
   1556c:	str	r4, [sl]
   15570:	add	sp, sp, #12
   15574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15578:	rsb	r3, r4, #-2147483648	; 0x80000000
   1557c:	cmp	r5, r3
   15580:	movge	r3, #0
   15584:	movlt	r3, #1
   15588:	b	1543c <__assert_fail@plt+0x4408>
   1558c:	rsb	r3, r5, #-2147483648	; 0x80000000
   15590:	cmp	r4, r3
   15594:	movge	r3, #0
   15598:	movlt	r3, #1
   1559c:	b	1543c <__assert_fail@plt+0x4408>
   155a0:	cmp	r4, #0
   155a4:	blt	155cc <__assert_fail@plt+0x4598>
   155a8:	cmn	r6, #1
   155ac:	beq	155e8 <__assert_fail@plt+0x45b4>
   155b0:	mov	r1, r6
   155b4:	mov	r0, #-2147483648	; 0x80000000
   155b8:	bl	15f24 <__assert_fail@plt+0x4ef0>
   155bc:	cmp	r0, r4
   155c0:	movge	r0, #0
   155c4:	movlt	r0, #1
   155c8:	b	15494 <__assert_fail@plt+0x4460>
   155cc:	mov	r1, r6
   155d0:	mvn	r0, #-2147483648	; 0x80000000
   155d4:	bl	15f24 <__assert_fail@plt+0x4ef0>
   155d8:	cmp	r0, r4
   155dc:	movle	r0, #0
   155e0:	movgt	r0, #1
   155e4:	b	15494 <__assert_fail@plt+0x4460>
   155e8:	add	r0, r4, #-2147483648	; 0x80000000
   155ec:	cmp	r0, #0
   155f0:	movle	r0, #0
   155f4:	movgt	r0, #1
   155f8:	b	15494 <__assert_fail@plt+0x4460>
   155fc:	cmn	r4, #1
   15600:	beq	15620 <__assert_fail@plt+0x45ec>
   15604:	mov	r1, r4
   15608:	mov	r0, #-2147483648	; 0x80000000
   1560c:	bl	15f24 <__assert_fail@plt+0x4ef0>
   15610:	cmp	r6, r0
   15614:	movle	r0, #0
   15618:	movgt	r0, #1
   1561c:	b	15494 <__assert_fail@plt+0x4460>
   15620:	add	r0, r6, #-2147483648	; 0x80000000
   15624:	cmp	r0, #0
   15628:	movle	r0, #0
   1562c:	movgt	r0, #1
   15630:	b	15494 <__assert_fail@plt+0x4460>
   15634:	mul	r1, r6, r4
   15638:	cmp	r1, #63	; 0x3f
   1563c:	movle	r3, #64	; 0x40
   15640:	strle	r3, [sp, #4]
   15644:	bgt	154c8 <__assert_fail@plt+0x4494>
   15648:	b	154a4 <__assert_fail@plt+0x4470>
   1564c:	mov	r3, #64	; 0x40
   15650:	str	r3, [sp, #4]
   15654:	b	154a4 <__assert_fail@plt+0x4470>
   15658:	rsb	r3, r9, #-2147483648	; 0x80000000
   1565c:	cmp	r5, r3
   15660:	movge	r3, #0
   15664:	movlt	r3, #1
   15668:	b	15504 <__assert_fail@plt+0x44d0>
   1566c:	rsb	r3, r5, #-2147483648	; 0x80000000
   15670:	cmp	r9, r3
   15674:	movge	r3, #0
   15678:	movlt	r3, #1
   1567c:	b	15504 <__assert_fail@plt+0x44d0>
   15680:	cmp	r5, #0
   15684:	blt	156ac <__assert_fail@plt+0x4678>
   15688:	cmn	r6, #1
   1568c:	beq	156c8 <__assert_fail@plt+0x4694>
   15690:	mov	r1, r6
   15694:	mov	r0, #-2147483648	; 0x80000000
   15698:	bl	15f24 <__assert_fail@plt+0x4ef0>
   1569c:	cmp	r5, r0
   156a0:	movle	r0, #0
   156a4:	movgt	r0, #1
   156a8:	b	15558 <__assert_fail@plt+0x4524>
   156ac:	mov	r1, r6
   156b0:	mvn	r0, #-2147483648	; 0x80000000
   156b4:	bl	15f24 <__assert_fail@plt+0x4ef0>
   156b8:	cmp	r5, r0
   156bc:	movge	r0, #0
   156c0:	movlt	r0, #1
   156c4:	b	15558 <__assert_fail@plt+0x4524>
   156c8:	add	r0, r5, #-2147483648	; 0x80000000
   156cc:	cmp	r0, #0
   156d0:	movle	r0, #0
   156d4:	movgt	r0, #1
   156d8:	b	15558 <__assert_fail@plt+0x4524>
   156dc:	cmn	r5, #1
   156e0:	beq	15700 <__assert_fail@plt+0x46cc>
   156e4:	mov	r1, r5
   156e8:	mov	r0, #-2147483648	; 0x80000000
   156ec:	bl	15f24 <__assert_fail@plt+0x4ef0>
   156f0:	cmp	r6, r0
   156f4:	movle	r0, #0
   156f8:	movgt	r0, #1
   156fc:	b	15558 <__assert_fail@plt+0x4524>
   15700:	add	r0, r6, #-2147483648	; 0x80000000
   15704:	cmp	r0, #0
   15708:	movle	r0, #0
   1570c:	movgt	r0, #1
   15710:	b	15558 <__assert_fail@plt+0x4524>
   15714:	bl	157f0 <__assert_fail@plt+0x47bc>
   15718:	push	{r4, lr}
   1571c:	bl	15830 <__assert_fail@plt+0x47fc>
   15720:	cmp	r0, #0
   15724:	popne	{r4, pc}
   15728:	bl	157f0 <__assert_fail@plt+0x47bc>
   1572c:	push	{r4, lr}
   15730:	mov	r1, #1
   15734:	bl	15718 <__assert_fail@plt+0x46e4>
   15738:	pop	{r4, pc}
   1573c:	push	{r4, lr}
   15740:	bl	15830 <__assert_fail@plt+0x47fc>
   15744:	cmp	r0, #0
   15748:	popne	{r4, pc}
   1574c:	bl	157f0 <__assert_fail@plt+0x47bc>
   15750:	push	{r4, lr}
   15754:	mov	r1, #1
   15758:	bl	1573c <__assert_fail@plt+0x4708>
   1575c:	pop	{r4, pc}
   15760:	push	{r4, r5, r6, lr}
   15764:	mov	r5, r0
   15768:	mov	r4, r1
   1576c:	mov	r0, r1
   15770:	bl	1524c <__assert_fail@plt+0x4218>
   15774:	mov	r2, r4
   15778:	mov	r1, r5
   1577c:	bl	10e00 <memcpy@plt>
   15780:	pop	{r4, r5, r6, pc}
   15784:	push	{r4, r5, r6, lr}
   15788:	mov	r5, r0
   1578c:	mov	r4, r1
   15790:	mov	r0, r1
   15794:	bl	15260 <__assert_fail@plt+0x422c>
   15798:	mov	r2, r4
   1579c:	mov	r1, r5
   157a0:	bl	10e00 <memcpy@plt>
   157a4:	pop	{r4, r5, r6, pc}
   157a8:	push	{r4, r5, r6, lr}
   157ac:	mov	r5, r0
   157b0:	mov	r4, r1
   157b4:	add	r0, r1, #1
   157b8:	bl	15260 <__assert_fail@plt+0x422c>
   157bc:	mov	r2, #0
   157c0:	strb	r2, [r0, r4]
   157c4:	mov	r2, r4
   157c8:	mov	r1, r5
   157cc:	bl	10e00 <memcpy@plt>
   157d0:	pop	{r4, r5, r6, pc}
   157d4:	push	{r4, lr}
   157d8:	mov	r4, r0
   157dc:	bl	10f08 <strlen@plt>
   157e0:	add	r1, r0, #1
   157e4:	mov	r0, r4
   157e8:	bl	15760 <__assert_fail@plt+0x472c>
   157ec:	pop	{r4, pc}
   157f0:	push	{r4, lr}
   157f4:	ldr	r3, [pc, #40]	; 15824 <__assert_fail@plt+0x47f0>
   157f8:	ldr	r4, [r3]
   157fc:	mov	r2, #5
   15800:	ldr	r1, [pc, #32]	; 15828 <__assert_fail@plt+0x47f4>
   15804:	mov	r0, #0
   15808:	bl	10e3c <dcgettext@plt>
   1580c:	mov	r3, r0
   15810:	ldr	r2, [pc, #20]	; 1582c <__assert_fail@plt+0x47f8>
   15814:	mov	r1, #0
   15818:	mov	r0, r4
   1581c:	bl	10ea8 <error@plt>
   15820:	bl	1101c <abort@plt>
   15824:	andeq	r8, r2, r8, lsl #2
   15828:	andeq	r7, r1, r4, lsr #5
   1582c:	andeq	r6, r1, ip, ror #28
   15830:	push	{r4, lr}
   15834:	mov	r2, r0
   15838:	mov	r3, r1
   1583c:	cmp	r1, #0
   15840:	cmpne	r0, #0
   15844:	moveq	r3, #1
   15848:	moveq	r2, r3
   1584c:	umull	r0, r1, r2, r3
   15850:	cmp	r0, #0
   15854:	cmpge	r1, #0
   15858:	bne	1586c <__assert_fail@plt+0x4838>
   1585c:	mov	r1, r3
   15860:	mov	r0, r2
   15864:	bl	10d88 <calloc@plt>
   15868:	pop	{r4, pc}
   1586c:	bl	10f20 <__errno_location@plt>
   15870:	mov	r3, #12
   15874:	str	r3, [r0]
   15878:	mov	r0, #0
   1587c:	pop	{r4, pc}
   15880:	push	{r4, lr}
   15884:	cmp	r0, #0
   15888:	moveq	r0, #1
   1588c:	cmp	r0, #0
   15890:	blt	1589c <__assert_fail@plt+0x4868>
   15894:	bl	10eb4 <malloc@plt>
   15898:	pop	{r4, pc}
   1589c:	bl	10f20 <__errno_location@plt>
   158a0:	mov	r3, #12
   158a4:	str	r3, [r0]
   158a8:	mov	r0, #0
   158ac:	pop	{r4, pc}
   158b0:	push	{r4, lr}
   158b4:	cmp	r0, #0
   158b8:	beq	158d4 <__assert_fail@plt+0x48a0>
   158bc:	cmp	r1, #0
   158c0:	beq	158e0 <__assert_fail@plt+0x48ac>
   158c4:	cmp	r1, #0
   158c8:	blt	158ec <__assert_fail@plt+0x48b8>
   158cc:	bl	10e48 <realloc@plt>
   158d0:	pop	{r4, pc}
   158d4:	mov	r0, r1
   158d8:	bl	15880 <__assert_fail@plt+0x484c>
   158dc:	pop	{r4, pc}
   158e0:	bl	12c10 <__assert_fail@plt+0x1bdc>
   158e4:	mov	r0, #0
   158e8:	pop	{r4, pc}
   158ec:	bl	10f20 <__errno_location@plt>
   158f0:	mov	r3, #12
   158f4:	str	r3, [r0]
   158f8:	mov	r0, #0
   158fc:	pop	{r4, pc}
   15900:	push	{r4, r5, r6, lr}
   15904:	mov	r5, r0
   15908:	bl	10e90 <__fpending@plt>
   1590c:	mov	r6, r0
   15910:	ldr	r4, [r5]
   15914:	and	r4, r4, #32
   15918:	mov	r0, r5
   1591c:	bl	12b04 <__assert_fail@plt+0x1ad0>
   15920:	cmp	r4, #0
   15924:	bne	1594c <__assert_fail@plt+0x4918>
   15928:	cmp	r0, #0
   1592c:	popeq	{r4, r5, r6, pc}
   15930:	cmp	r6, #0
   15934:	bne	15968 <__assert_fail@plt+0x4934>
   15938:	bl	10f20 <__errno_location@plt>
   1593c:	ldr	r0, [r0]
   15940:	subs	r0, r0, #9
   15944:	mvnne	r0, #0
   15948:	pop	{r4, r5, r6, pc}
   1594c:	cmp	r0, #0
   15950:	bne	15970 <__assert_fail@plt+0x493c>
   15954:	bl	10f20 <__errno_location@plt>
   15958:	mov	r3, #0
   1595c:	str	r3, [r0]
   15960:	mvn	r0, #0
   15964:	pop	{r4, r5, r6, pc}
   15968:	mvn	r0, #0
   1596c:	pop	{r4, r5, r6, pc}
   15970:	mvn	r0, #0
   15974:	pop	{r4, r5, r6, pc}
   15978:	ldr	r2, [r0, #20]
   1597c:	ldr	r3, [r0, #16]
   15980:	cmp	r2, r3
   15984:	bhi	159a4 <__assert_fail@plt+0x4970>
   15988:	ldr	r3, [r0, #8]
   1598c:	ldr	r2, [r0, #4]
   15990:	subs	r3, r3, r2
   15994:	beq	159ac <__assert_fail@plt+0x4978>
   15998:	str	r3, [r1]
   1599c:	ldr	r0, [r0, #4]
   159a0:	bx	lr
   159a4:	mov	r0, #0
   159a8:	bx	lr
   159ac:	mov	r0, #0
   159b0:	bx	lr
   159b4:	push	{r4, r5, r6, r7, r8, lr}
   159b8:	sub	sp, sp, #4096	; 0x1000
   159bc:	sub	sp, sp, #8
   159c0:	subs	r4, r1, #0
   159c4:	moveq	r0, #0
   159c8:	beq	15aec <__assert_fail@plt+0x4ab8>
   159cc:	mov	r6, r0
   159d0:	bl	15bd0 <__assert_fail@plt+0x4b9c>
   159d4:	subs	r5, r0, #0
   159d8:	bne	15a00 <__assert_fail@plt+0x49cc>
   159dc:	b	15a44 <__assert_fail@plt+0x4a10>
   159e0:	mov	r0, r6
   159e4:	bl	10f44 <fgetc@plt>
   159e8:	cmn	r0, #1
   159ec:	beq	15adc <__assert_fail@plt+0x4aa8>
   159f0:	subs	r4, r4, #1
   159f4:	beq	15ab8 <__assert_fail@plt+0x4a84>
   159f8:	subs	r5, r5, #1
   159fc:	beq	15a44 <__assert_fail@plt+0x4a10>
   15a00:	add	r1, sp, #8
   15a04:	mov	r0, r6
   15a08:	bl	15978 <__assert_fail@plt+0x4944>
   15a0c:	cmp	r0, #0
   15a10:	beq	159e0 <__assert_fail@plt+0x49ac>
   15a14:	ldr	r3, [sp, #8]
   15a18:	cmp	r3, #0
   15a1c:	beq	159e0 <__assert_fail@plt+0x49ac>
   15a20:	cmp	r3, r4
   15a24:	movcs	r3, r4
   15a28:	ldr	r2, [r6, #4]
   15a2c:	add	r2, r2, r3
   15a30:	str	r2, [r6, #4]
   15a34:	subs	r4, r4, r3
   15a38:	beq	15ab8 <__assert_fail@plt+0x4a84>
   15a3c:	subs	r5, r5, r3
   15a40:	bne	159e0 <__assert_fail@plt+0x49ac>
   15a44:	mov	r0, r6
   15a48:	bl	10f5c <fileno@plt>
   15a4c:	cmp	r0, #0
   15a50:	blt	15a74 <__assert_fail@plt+0x4a40>
   15a54:	mov	r3, #1
   15a58:	str	r3, [sp]
   15a5c:	mov	r2, #0
   15a60:	mov	r3, #0
   15a64:	bl	10e78 <lseek64@plt>
   15a68:	cmp	r0, #0
   15a6c:	sbcs	r3, r1, #0
   15a70:	bge	15ac0 <__assert_fail@plt+0x4a8c>
   15a74:	mov	r8, #1
   15a78:	mov	r7, #4096	; 0x1000
   15a7c:	cmp	r4, #4096	; 0x1000
   15a80:	movcc	r5, r4
   15a84:	movcs	r5, #4096	; 0x1000
   15a88:	str	r6, [sp]
   15a8c:	mov	r3, r5
   15a90:	mov	r2, r8
   15a94:	mov	r1, r7
   15a98:	add	r0, sp, #8
   15a9c:	bl	10f98 <__fread_chk@plt>
   15aa0:	cmp	r5, r0
   15aa4:	bhi	15adc <__assert_fail@plt+0x4aa8>
   15aa8:	subs	r4, r4, r5
   15aac:	bne	15a7c <__assert_fail@plt+0x4a48>
   15ab0:	mov	r0, #0
   15ab4:	b	15aec <__assert_fail@plt+0x4ab8>
   15ab8:	mov	r0, #0
   15abc:	b	15aec <__assert_fail@plt+0x4ab8>
   15ac0:	mov	r3, #1
   15ac4:	str	r3, [sp]
   15ac8:	mov	r2, r4
   15acc:	mov	r3, #0
   15ad0:	mov	r0, r6
   15ad4:	bl	12c68 <__assert_fail@plt+0x1c34>
   15ad8:	b	15aec <__assert_fail@plt+0x4ab8>
   15adc:	mov	r0, r6
   15ae0:	bl	10de8 <ferror@plt>
   15ae4:	adds	r0, r0, #0
   15ae8:	mvnne	r0, #0
   15aec:	add	sp, sp, #4096	; 0x1000
   15af0:	add	sp, sp, #8
   15af4:	pop	{r4, r5, r6, r7, r8, pc}
   15af8:	push	{r4, lr}
   15afc:	mov	r0, #14
   15b00:	bl	10fd4 <nl_langinfo@plt>
   15b04:	cmp	r0, #0
   15b08:	beq	15b20 <__assert_fail@plt+0x4aec>
   15b0c:	ldrb	r2, [r0]
   15b10:	ldr	r3, [pc, #16]	; 15b28 <__assert_fail@plt+0x4af4>
   15b14:	cmp	r2, #0
   15b18:	moveq	r0, r3
   15b1c:	pop	{r4, pc}
   15b20:	ldr	r0, [pc]	; 15b28 <__assert_fail@plt+0x4af4>
   15b24:	pop	{r4, pc}
   15b28:			; <UNDEFINED> instruction: 0x000172b8
   15b2c:	push	{r4, r5, r6, r7, lr}
   15b30:	sub	sp, sp, #12
   15b34:	mov	r7, r1
   15b38:	mov	r5, r2
   15b3c:	subs	r6, r0, #0
   15b40:	addeq	r6, sp, #4
   15b44:	mov	r0, r6
   15b48:	bl	10e9c <mbrtowc@plt>
   15b4c:	mov	r4, r0
   15b50:	cmp	r5, #0
   15b54:	cmnne	r0, #3
   15b58:	bhi	15b68 <__assert_fail@plt+0x4b34>
   15b5c:	mov	r0, r4
   15b60:	add	sp, sp, #12
   15b64:	pop	{r4, r5, r6, r7, pc}
   15b68:	mov	r0, #0
   15b6c:	bl	15c10 <__assert_fail@plt+0x4bdc>
   15b70:	cmp	r0, #0
   15b74:	ldrbeq	r3, [r7]
   15b78:	streq	r3, [r6]
   15b7c:	moveq	r4, #1
   15b80:	b	15b5c <__assert_fail@plt+0x4b28>
   15b84:	push	{r4, r5, r6, lr}
   15b88:	mov	r6, r0
   15b8c:	mov	r5, r1
   15b90:	subs	r4, r2, #0
   15b94:	beq	15bc0 <__assert_fail@plt+0x4b8c>
   15b98:	mov	r1, r4
   15b9c:	mvn	r0, #0
   15ba0:	bl	15d18 <__assert_fail@plt+0x4ce4>
   15ba4:	cmp	r0, r5
   15ba8:	bcs	15bc0 <__assert_fail@plt+0x4b8c>
   15bac:	bl	10f20 <__errno_location@plt>
   15bb0:	mov	r3, #12
   15bb4:	str	r3, [r0]
   15bb8:	mov	r0, #0
   15bbc:	pop	{r4, r5, r6, pc}
   15bc0:	mul	r1, r5, r4
   15bc4:	mov	r0, r6
   15bc8:	bl	158b0 <__assert_fail@plt+0x487c>
   15bcc:	pop	{r4, r5, r6, pc}
   15bd0:	ldr	r2, [r0, #20]
   15bd4:	ldr	r3, [r0, #16]
   15bd8:	cmp	r2, r3
   15bdc:	bhi	15c08 <__assert_fail@plt+0x4bd4>
   15be0:	ldr	r2, [r0, #8]
   15be4:	ldr	r3, [r0, #4]
   15be8:	sub	r2, r2, r3
   15bec:	ldr	r3, [r0]
   15bf0:	ands	r3, r3, #256	; 0x100
   15bf4:	ldrne	r3, [r0, #44]	; 0x2c
   15bf8:	ldrne	r0, [r0, #36]	; 0x24
   15bfc:	subne	r3, r3, r0
   15c00:	add	r0, r3, r2
   15c04:	bx	lr
   15c08:	mov	r0, #0
   15c0c:	bx	lr
   15c10:	push	{lr}		; (str lr, [sp, #-4]!)
   15c14:	sub	sp, sp, #268	; 0x10c
   15c18:	ldr	r2, [pc, #68]	; 15c64 <__assert_fail@plt+0x4c30>
   15c1c:	add	r1, sp, #4
   15c20:	bl	15c70 <__assert_fail@plt+0x4c3c>
   15c24:	cmp	r0, #0
   15c28:	movne	r0, #0
   15c2c:	bne	15c5c <__assert_fail@plt+0x4c28>
   15c30:	ldr	r1, [pc, #48]	; 15c68 <__assert_fail@plt+0x4c34>
   15c34:	add	r0, sp, #4
   15c38:	bl	10dac <strcmp@plt>
   15c3c:	cmp	r0, #0
   15c40:	moveq	r0, #0
   15c44:	beq	15c5c <__assert_fail@plt+0x4c28>
   15c48:	ldr	r1, [pc, #28]	; 15c6c <__assert_fail@plt+0x4c38>
   15c4c:	add	r0, sp, #4
   15c50:	bl	10dac <strcmp@plt>
   15c54:	adds	r0, r0, #0
   15c58:	movne	r0, #1
   15c5c:	add	sp, sp, #268	; 0x10c
   15c60:	pop	{pc}		; (ldr pc, [sp], #4)
   15c64:	andeq	r0, r0, r1, lsl #2
   15c68:	andeq	r7, r1, r0, asr #5
   15c6c:	andeq	r7, r1, r4, asr #5
   15c70:	push	{r4, r5, r6, lr}
   15c74:	mov	r6, r1
   15c78:	mov	r4, r2
   15c7c:	mov	r1, #0
   15c80:	bl	10fbc <setlocale@plt>
   15c84:	subs	r5, r0, #0
   15c88:	beq	15cac <__assert_fail@plt+0x4c78>
   15c8c:	mov	r0, r5
   15c90:	bl	10f08 <strlen@plt>
   15c94:	cmp	r4, r0
   15c98:	bhi	15cc4 <__assert_fail@plt+0x4c90>
   15c9c:	cmp	r4, #0
   15ca0:	bne	15cdc <__assert_fail@plt+0x4ca8>
   15ca4:	mov	r0, #34	; 0x22
   15ca8:	pop	{r4, r5, r6, pc}
   15cac:	cmp	r4, #0
   15cb0:	beq	15d00 <__assert_fail@plt+0x4ccc>
   15cb4:	mov	r3, #0
   15cb8:	strb	r3, [r6]
   15cbc:	mov	r0, #22
   15cc0:	pop	{r4, r5, r6, pc}
   15cc4:	add	r2, r0, #1
   15cc8:	mov	r1, r5
   15ccc:	mov	r0, r6
   15cd0:	bl	10e00 <memcpy@plt>
   15cd4:	mov	r0, #0
   15cd8:	pop	{r4, r5, r6, pc}
   15cdc:	sub	r4, r4, #1
   15ce0:	mov	r2, r4
   15ce4:	mov	r1, r5
   15ce8:	mov	r0, r6
   15cec:	bl	10e00 <memcpy@plt>
   15cf0:	mov	r3, #0
   15cf4:	strb	r3, [r6, r4]
   15cf8:	mov	r0, #34	; 0x22
   15cfc:	pop	{r4, r5, r6, pc}
   15d00:	mov	r0, #22
   15d04:	pop	{r4, r5, r6, pc}
   15d08:	push	{r4, lr}
   15d0c:	mov	r1, #0
   15d10:	bl	10fbc <setlocale@plt>
   15d14:	pop	{r4, pc}
   15d18:	subs	r2, r1, #1
   15d1c:	bxeq	lr
   15d20:	bcc	15ef8 <__assert_fail@plt+0x4ec4>
   15d24:	cmp	r0, r1
   15d28:	bls	15edc <__assert_fail@plt+0x4ea8>
   15d2c:	tst	r1, r2
   15d30:	beq	15ee8 <__assert_fail@plt+0x4eb4>
   15d34:	clz	r3, r0
   15d38:	clz	r2, r1
   15d3c:	sub	r3, r2, r3
   15d40:	rsbs	r3, r3, #31
   15d44:	addne	r3, r3, r3, lsl #1
   15d48:	mov	r2, #0
   15d4c:	addne	pc, pc, r3, lsl #2
   15d50:	nop			; (mov r0, r0)
   15d54:	cmp	r0, r1, lsl #31
   15d58:	adc	r2, r2, r2
   15d5c:	subcs	r0, r0, r1, lsl #31
   15d60:	cmp	r0, r1, lsl #30
   15d64:	adc	r2, r2, r2
   15d68:	subcs	r0, r0, r1, lsl #30
   15d6c:	cmp	r0, r1, lsl #29
   15d70:	adc	r2, r2, r2
   15d74:	subcs	r0, r0, r1, lsl #29
   15d78:	cmp	r0, r1, lsl #28
   15d7c:	adc	r2, r2, r2
   15d80:	subcs	r0, r0, r1, lsl #28
   15d84:	cmp	r0, r1, lsl #27
   15d88:	adc	r2, r2, r2
   15d8c:	subcs	r0, r0, r1, lsl #27
   15d90:	cmp	r0, r1, lsl #26
   15d94:	adc	r2, r2, r2
   15d98:	subcs	r0, r0, r1, lsl #26
   15d9c:	cmp	r0, r1, lsl #25
   15da0:	adc	r2, r2, r2
   15da4:	subcs	r0, r0, r1, lsl #25
   15da8:	cmp	r0, r1, lsl #24
   15dac:	adc	r2, r2, r2
   15db0:	subcs	r0, r0, r1, lsl #24
   15db4:	cmp	r0, r1, lsl #23
   15db8:	adc	r2, r2, r2
   15dbc:	subcs	r0, r0, r1, lsl #23
   15dc0:	cmp	r0, r1, lsl #22
   15dc4:	adc	r2, r2, r2
   15dc8:	subcs	r0, r0, r1, lsl #22
   15dcc:	cmp	r0, r1, lsl #21
   15dd0:	adc	r2, r2, r2
   15dd4:	subcs	r0, r0, r1, lsl #21
   15dd8:	cmp	r0, r1, lsl #20
   15ddc:	adc	r2, r2, r2
   15de0:	subcs	r0, r0, r1, lsl #20
   15de4:	cmp	r0, r1, lsl #19
   15de8:	adc	r2, r2, r2
   15dec:	subcs	r0, r0, r1, lsl #19
   15df0:	cmp	r0, r1, lsl #18
   15df4:	adc	r2, r2, r2
   15df8:	subcs	r0, r0, r1, lsl #18
   15dfc:	cmp	r0, r1, lsl #17
   15e00:	adc	r2, r2, r2
   15e04:	subcs	r0, r0, r1, lsl #17
   15e08:	cmp	r0, r1, lsl #16
   15e0c:	adc	r2, r2, r2
   15e10:	subcs	r0, r0, r1, lsl #16
   15e14:	cmp	r0, r1, lsl #15
   15e18:	adc	r2, r2, r2
   15e1c:	subcs	r0, r0, r1, lsl #15
   15e20:	cmp	r0, r1, lsl #14
   15e24:	adc	r2, r2, r2
   15e28:	subcs	r0, r0, r1, lsl #14
   15e2c:	cmp	r0, r1, lsl #13
   15e30:	adc	r2, r2, r2
   15e34:	subcs	r0, r0, r1, lsl #13
   15e38:	cmp	r0, r1, lsl #12
   15e3c:	adc	r2, r2, r2
   15e40:	subcs	r0, r0, r1, lsl #12
   15e44:	cmp	r0, r1, lsl #11
   15e48:	adc	r2, r2, r2
   15e4c:	subcs	r0, r0, r1, lsl #11
   15e50:	cmp	r0, r1, lsl #10
   15e54:	adc	r2, r2, r2
   15e58:	subcs	r0, r0, r1, lsl #10
   15e5c:	cmp	r0, r1, lsl #9
   15e60:	adc	r2, r2, r2
   15e64:	subcs	r0, r0, r1, lsl #9
   15e68:	cmp	r0, r1, lsl #8
   15e6c:	adc	r2, r2, r2
   15e70:	subcs	r0, r0, r1, lsl #8
   15e74:	cmp	r0, r1, lsl #7
   15e78:	adc	r2, r2, r2
   15e7c:	subcs	r0, r0, r1, lsl #7
   15e80:	cmp	r0, r1, lsl #6
   15e84:	adc	r2, r2, r2
   15e88:	subcs	r0, r0, r1, lsl #6
   15e8c:	cmp	r0, r1, lsl #5
   15e90:	adc	r2, r2, r2
   15e94:	subcs	r0, r0, r1, lsl #5
   15e98:	cmp	r0, r1, lsl #4
   15e9c:	adc	r2, r2, r2
   15ea0:	subcs	r0, r0, r1, lsl #4
   15ea4:	cmp	r0, r1, lsl #3
   15ea8:	adc	r2, r2, r2
   15eac:	subcs	r0, r0, r1, lsl #3
   15eb0:	cmp	r0, r1, lsl #2
   15eb4:	adc	r2, r2, r2
   15eb8:	subcs	r0, r0, r1, lsl #2
   15ebc:	cmp	r0, r1, lsl #1
   15ec0:	adc	r2, r2, r2
   15ec4:	subcs	r0, r0, r1, lsl #1
   15ec8:	cmp	r0, r1
   15ecc:	adc	r2, r2, r2
   15ed0:	subcs	r0, r0, r1
   15ed4:	mov	r0, r2
   15ed8:	bx	lr
   15edc:	moveq	r0, #1
   15ee0:	movne	r0, #0
   15ee4:	bx	lr
   15ee8:	clz	r2, r1
   15eec:	rsb	r2, r2, #31
   15ef0:	lsr	r0, r0, r2
   15ef4:	bx	lr
   15ef8:	cmp	r0, #0
   15efc:	mvnne	r0, #0
   15f00:	b	16164 <__assert_fail@plt+0x5130>
   15f04:	cmp	r1, #0
   15f08:	beq	15ef8 <__assert_fail@plt+0x4ec4>
   15f0c:	push	{r0, r1, lr}
   15f10:	bl	15d18 <__assert_fail@plt+0x4ce4>
   15f14:	pop	{r1, r2, lr}
   15f18:	mul	r3, r2, r0
   15f1c:	sub	r1, r1, r3
   15f20:	bx	lr
   15f24:	cmp	r1, #0
   15f28:	beq	16134 <__assert_fail@plt+0x5100>
   15f2c:	eor	ip, r0, r1
   15f30:	rsbmi	r1, r1, #0
   15f34:	subs	r2, r1, #1
   15f38:	beq	16100 <__assert_fail@plt+0x50cc>
   15f3c:	movs	r3, r0
   15f40:	rsbmi	r3, r0, #0
   15f44:	cmp	r3, r1
   15f48:	bls	1610c <__assert_fail@plt+0x50d8>
   15f4c:	tst	r1, r2
   15f50:	beq	1611c <__assert_fail@plt+0x50e8>
   15f54:	clz	r2, r3
   15f58:	clz	r0, r1
   15f5c:	sub	r2, r0, r2
   15f60:	rsbs	r2, r2, #31
   15f64:	addne	r2, r2, r2, lsl #1
   15f68:	mov	r0, #0
   15f6c:	addne	pc, pc, r2, lsl #2
   15f70:	nop			; (mov r0, r0)
   15f74:	cmp	r3, r1, lsl #31
   15f78:	adc	r0, r0, r0
   15f7c:	subcs	r3, r3, r1, lsl #31
   15f80:	cmp	r3, r1, lsl #30
   15f84:	adc	r0, r0, r0
   15f88:	subcs	r3, r3, r1, lsl #30
   15f8c:	cmp	r3, r1, lsl #29
   15f90:	adc	r0, r0, r0
   15f94:	subcs	r3, r3, r1, lsl #29
   15f98:	cmp	r3, r1, lsl #28
   15f9c:	adc	r0, r0, r0
   15fa0:	subcs	r3, r3, r1, lsl #28
   15fa4:	cmp	r3, r1, lsl #27
   15fa8:	adc	r0, r0, r0
   15fac:	subcs	r3, r3, r1, lsl #27
   15fb0:	cmp	r3, r1, lsl #26
   15fb4:	adc	r0, r0, r0
   15fb8:	subcs	r3, r3, r1, lsl #26
   15fbc:	cmp	r3, r1, lsl #25
   15fc0:	adc	r0, r0, r0
   15fc4:	subcs	r3, r3, r1, lsl #25
   15fc8:	cmp	r3, r1, lsl #24
   15fcc:	adc	r0, r0, r0
   15fd0:	subcs	r3, r3, r1, lsl #24
   15fd4:	cmp	r3, r1, lsl #23
   15fd8:	adc	r0, r0, r0
   15fdc:	subcs	r3, r3, r1, lsl #23
   15fe0:	cmp	r3, r1, lsl #22
   15fe4:	adc	r0, r0, r0
   15fe8:	subcs	r3, r3, r1, lsl #22
   15fec:	cmp	r3, r1, lsl #21
   15ff0:	adc	r0, r0, r0
   15ff4:	subcs	r3, r3, r1, lsl #21
   15ff8:	cmp	r3, r1, lsl #20
   15ffc:	adc	r0, r0, r0
   16000:	subcs	r3, r3, r1, lsl #20
   16004:	cmp	r3, r1, lsl #19
   16008:	adc	r0, r0, r0
   1600c:	subcs	r3, r3, r1, lsl #19
   16010:	cmp	r3, r1, lsl #18
   16014:	adc	r0, r0, r0
   16018:	subcs	r3, r3, r1, lsl #18
   1601c:	cmp	r3, r1, lsl #17
   16020:	adc	r0, r0, r0
   16024:	subcs	r3, r3, r1, lsl #17
   16028:	cmp	r3, r1, lsl #16
   1602c:	adc	r0, r0, r0
   16030:	subcs	r3, r3, r1, lsl #16
   16034:	cmp	r3, r1, lsl #15
   16038:	adc	r0, r0, r0
   1603c:	subcs	r3, r3, r1, lsl #15
   16040:	cmp	r3, r1, lsl #14
   16044:	adc	r0, r0, r0
   16048:	subcs	r3, r3, r1, lsl #14
   1604c:	cmp	r3, r1, lsl #13
   16050:	adc	r0, r0, r0
   16054:	subcs	r3, r3, r1, lsl #13
   16058:	cmp	r3, r1, lsl #12
   1605c:	adc	r0, r0, r0
   16060:	subcs	r3, r3, r1, lsl #12
   16064:	cmp	r3, r1, lsl #11
   16068:	adc	r0, r0, r0
   1606c:	subcs	r3, r3, r1, lsl #11
   16070:	cmp	r3, r1, lsl #10
   16074:	adc	r0, r0, r0
   16078:	subcs	r3, r3, r1, lsl #10
   1607c:	cmp	r3, r1, lsl #9
   16080:	adc	r0, r0, r0
   16084:	subcs	r3, r3, r1, lsl #9
   16088:	cmp	r3, r1, lsl #8
   1608c:	adc	r0, r0, r0
   16090:	subcs	r3, r3, r1, lsl #8
   16094:	cmp	r3, r1, lsl #7
   16098:	adc	r0, r0, r0
   1609c:	subcs	r3, r3, r1, lsl #7
   160a0:	cmp	r3, r1, lsl #6
   160a4:	adc	r0, r0, r0
   160a8:	subcs	r3, r3, r1, lsl #6
   160ac:	cmp	r3, r1, lsl #5
   160b0:	adc	r0, r0, r0
   160b4:	subcs	r3, r3, r1, lsl #5
   160b8:	cmp	r3, r1, lsl #4
   160bc:	adc	r0, r0, r0
   160c0:	subcs	r3, r3, r1, lsl #4
   160c4:	cmp	r3, r1, lsl #3
   160c8:	adc	r0, r0, r0
   160cc:	subcs	r3, r3, r1, lsl #3
   160d0:	cmp	r3, r1, lsl #2
   160d4:	adc	r0, r0, r0
   160d8:	subcs	r3, r3, r1, lsl #2
   160dc:	cmp	r3, r1, lsl #1
   160e0:	adc	r0, r0, r0
   160e4:	subcs	r3, r3, r1, lsl #1
   160e8:	cmp	r3, r1
   160ec:	adc	r0, r0, r0
   160f0:	subcs	r3, r3, r1
   160f4:	cmp	ip, #0
   160f8:	rsbmi	r0, r0, #0
   160fc:	bx	lr
   16100:	teq	ip, r0
   16104:	rsbmi	r0, r0, #0
   16108:	bx	lr
   1610c:	movcc	r0, #0
   16110:	asreq	r0, ip, #31
   16114:	orreq	r0, r0, #1
   16118:	bx	lr
   1611c:	clz	r2, r1
   16120:	rsb	r2, r2, #31
   16124:	cmp	ip, #0
   16128:	lsr	r0, r3, r2
   1612c:	rsbmi	r0, r0, #0
   16130:	bx	lr
   16134:	cmp	r0, #0
   16138:	mvngt	r0, #-2147483648	; 0x80000000
   1613c:	movlt	r0, #-2147483648	; 0x80000000
   16140:	b	16164 <__assert_fail@plt+0x5130>
   16144:	cmp	r1, #0
   16148:	beq	16134 <__assert_fail@plt+0x5100>
   1614c:	push	{r0, r1, lr}
   16150:	bl	15f2c <__assert_fail@plt+0x4ef8>
   16154:	pop	{r1, r2, lr}
   16158:	mul	r3, r2, r0
   1615c:	sub	r1, r1, r3
   16160:	bx	lr
   16164:	push	{r1, lr}
   16168:	mov	r0, #8
   1616c:	bl	10da0 <raise@plt>
   16170:	pop	{r1, pc}
   16174:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16178:	mov	r7, r0
   1617c:	ldr	r6, [pc, #72]	; 161cc <__assert_fail@plt+0x5198>
   16180:	ldr	r5, [pc, #72]	; 161d0 <__assert_fail@plt+0x519c>
   16184:	add	r6, pc, r6
   16188:	add	r5, pc, r5
   1618c:	sub	r6, r6, r5
   16190:	mov	r8, r1
   16194:	mov	r9, r2
   16198:	bl	10d68 <calloc@plt-0x20>
   1619c:	asrs	r6, r6, #2
   161a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   161a4:	mov	r4, #0
   161a8:	add	r4, r4, #1
   161ac:	ldr	r3, [r5], #4
   161b0:	mov	r2, r9
   161b4:	mov	r1, r8
   161b8:	mov	r0, r7
   161bc:	blx	r3
   161c0:	cmp	r6, r4
   161c4:	bne	161a8 <__assert_fail@plt+0x5174>
   161c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   161cc:	andeq	r1, r1, r4, lsl #27
   161d0:	andeq	r1, r1, ip, ror sp
   161d4:	bx	lr
   161d8:	ldr	r3, [pc, #12]	; 161ec <__assert_fail@plt+0x51b8>
   161dc:	mov	r1, #0
   161e0:	add	r3, pc, r3
   161e4:	ldr	r2, [r3]
   161e8:	b	10f2c <__cxa_atexit@plt>
   161ec:	andeq	r1, r1, r4, lsl pc

Disassembly of section .fini:

000161f0 <.fini>:
   161f0:	push	{r3, lr}
   161f4:	pop	{r3, pc}
