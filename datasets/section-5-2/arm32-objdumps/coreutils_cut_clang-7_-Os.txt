
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010f80 <.init>:
   10f80:	push	{r3, lr}
   10f84:	bl	11294 <__assert_fail@plt+0x48>
   10f88:	pop	{r3, pc}

Disassembly of section .plt:

00010f8c <calloc@plt-0x14>:
   10f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f90:	ldr	lr, [pc, #4]	; 10f9c <calloc@plt-0x4>
   10f94:	add	lr, pc, lr
   10f98:	ldr	pc, [lr, #8]!
   10f9c:	andeq	r6, r1, r4, rrx

00010fa0 <calloc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #100]!	; 0x64

00010fac <fputs_unlocked@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #92]!	; 0x5c

00010fb8 <strcmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #84]!	; 0x54

00010fc4 <posix_fadvise64@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #76]!	; 0x4c

00010fd0 <fflush@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #68]!	; 0x44

00010fdc <memmove@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #60]!	; 0x3c

00010fe8 <free@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #52]!	; 0x34

00010ff4 <ferror@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #44]!	; 0x2c

00011000 <_exit@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #36]!	; 0x24

0001100c <memcpy@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #28]!

00011018 <mbsinit@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #20]!

00011024 <fwrite_unlocked@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #12]!

00011030 <memcmp@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #4]!

0001103c <getc_unlocked@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #4092]!	; 0xffc

00011048 <dcgettext@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #4084]!	; 0xff4

00011054 <realloc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #4076]!	; 0xfec

00011060 <textdomain@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #4068]!	; 0xfe4

0001106c <iswprint@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #4060]!	; 0xfdc

00011078 <lseek64@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #86016	; 0x15000
   11080:	ldr	pc, [ip, #4052]!	; 0xfd4

00011084 <__ctype_get_mb_cur_max@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #86016	; 0x15000
   1108c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011090 <fread@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #86016	; 0x15000
   11098:	ldr	pc, [ip, #4036]!	; 0xfc4

0001109c <__fpending@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #86016	; 0x15000
   110a4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110a8 <ferror_unlocked@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #86016	; 0x15000
   110b0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110b4 <mbrtowc@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #86016	; 0x15000
   110bc:	ldr	pc, [ip, #4012]!	; 0xfac

000110c0 <error@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #86016	; 0x15000
   110c8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110cc <malloc@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110d8 <__libc_start_main@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #3988]!	; 0xf94

000110e4 <__freading@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f0 <__gmon_start__@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #3972]!	; 0xf84

000110fc <getopt_long@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #3964]!	; 0xf7c

00011108 <__ctype_b_loc@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #86016	; 0x15000
   11110:	ldr	pc, [ip, #3956]!	; 0xf74

00011114 <exit@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #86016	; 0x15000
   1111c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011120 <strlen@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #86016	; 0x15000
   11128:	ldr	pc, [ip, #3940]!	; 0xf64

0001112c <ungetc@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #86016	; 0x15000
   11134:	ldr	pc, [ip, #3932]!	; 0xf5c

00011138 <__errno_location@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #86016	; 0x15000
   11140:	ldr	pc, [ip, #3924]!	; 0xf54

00011144 <__cxa_atexit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #86016	; 0x15000
   1114c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011150 <memset@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #86016	; 0x15000
   11158:	ldr	pc, [ip, #3908]!	; 0xf44

0001115c <fgetc@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #86016	; 0x15000
   11164:	ldr	pc, [ip, #3900]!	; 0xf3c

00011168 <__printf_chk@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #86016	; 0x15000
   11170:	ldr	pc, [ip, #3892]!	; 0xf34

00011174 <fileno@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #86016	; 0x15000
   1117c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011180 <__fprintf_chk@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #86016	; 0x15000
   11188:	ldr	pc, [ip, #3876]!	; 0xf24

0001118c <memchr@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #86016	; 0x15000
   11194:	ldr	pc, [ip, #3868]!	; 0xf1c

00011198 <fclose@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #86016	; 0x15000
   111a0:	ldr	pc, [ip, #3860]!	; 0xf14

000111a4 <fseeko64@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #86016	; 0x15000
   111ac:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b0 <setlocale@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #86016	; 0x15000
   111b8:	ldr	pc, [ip, #3844]!	; 0xf04

000111bc <strrchr@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #86016	; 0x15000
   111c4:	ldr	pc, [ip, #3836]!	; 0xefc

000111c8 <nl_langinfo@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #86016	; 0x15000
   111d0:	ldr	pc, [ip, #3828]!	; 0xef4

000111d4 <clearerr_unlocked@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #86016	; 0x15000
   111dc:	ldr	pc, [ip, #3820]!	; 0xeec

000111e0 <fopen64@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #86016	; 0x15000
   111e8:	ldr	pc, [ip, #3812]!	; 0xee4

000111ec <qsort@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #86016	; 0x15000
   111f4:	ldr	pc, [ip, #3804]!	; 0xedc

000111f8 <bindtextdomain@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #86016	; 0x15000
   11200:	ldr	pc, [ip, #3796]!	; 0xed4

00011204 <fputs@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #86016	; 0x15000
   1120c:	ldr	pc, [ip, #3788]!	; 0xecc

00011210 <strncmp@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #86016	; 0x15000
   11218:	ldr	pc, [ip, #3780]!	; 0xec4

0001121c <abort@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #86016	; 0x15000
   11224:	ldr	pc, [ip, #3772]!	; 0xebc

00011228 <feof_unlocked@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #86016	; 0x15000
   11230:	ldr	pc, [ip, #3764]!	; 0xeb4

00011234 <putchar_unlocked@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #86016	; 0x15000
   1123c:	ldr	pc, [ip, #3756]!	; 0xeac

00011240 <strspn@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #86016	; 0x15000
   11248:	ldr	pc, [ip, #3748]!	; 0xea4

0001124c <__assert_fail@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #86016	; 0x15000
   11254:	ldr	pc, [ip, #3740]!	; 0xe9c

Disassembly of section .text:

00011258 <.text>:
   11258:	mov	fp, #0
   1125c:	mov	lr, #0
   11260:	pop	{r1}		; (ldr r1, [sp], #4)
   11264:	mov	r2, sp
   11268:	push	{r2}		; (str r2, [sp, #-4]!)
   1126c:	push	{r0}		; (str r0, [sp, #-4]!)
   11270:	ldr	ip, [pc, #16]	; 11288 <__assert_fail@plt+0x3c>
   11274:	push	{ip}		; (str ip, [sp, #-4]!)
   11278:	ldr	r0, [pc, #12]	; 1128c <__assert_fail@plt+0x40>
   1127c:	ldr	r3, [pc, #12]	; 11290 <__assert_fail@plt+0x44>
   11280:	bl	110d8 <__libc_start_main@plt>
   11284:	bl	1121c <abort@plt>
   11288:	andeq	r5, r1, ip, asr r9
   1128c:	andeq	r1, r1, r8, ror #12
   11290:	strdeq	r5, [r1], -ip
   11294:	ldr	r3, [pc, #20]	; 112b0 <__assert_fail@plt+0x64>
   11298:	ldr	r2, [pc, #20]	; 112b4 <__assert_fail@plt+0x68>
   1129c:	add	r3, pc, r3
   112a0:	ldr	r2, [r3, r2]
   112a4:	cmp	r2, #0
   112a8:	bxeq	lr
   112ac:	b	110f0 <__gmon_start__@plt>
   112b0:	andeq	r5, r1, ip, asr sp
   112b4:	strdeq	r0, [r0], -r4
   112b8:	ldr	r0, [pc, #24]	; 112d8 <__assert_fail@plt+0x8c>
   112bc:	ldr	r3, [pc, #24]	; 112dc <__assert_fail@plt+0x90>
   112c0:	cmp	r3, r0
   112c4:	bxeq	lr
   112c8:	ldr	r3, [pc, #16]	; 112e0 <__assert_fail@plt+0x94>
   112cc:	cmp	r3, #0
   112d0:	bxeq	lr
   112d4:	bx	r3
   112d8:	andeq	r7, r2, r8, asr #2
   112dc:	andeq	r7, r2, r8, asr #2
   112e0:	andeq	r0, r0, r0
   112e4:	ldr	r0, [pc, #36]	; 11310 <__assert_fail@plt+0xc4>
   112e8:	ldr	r1, [pc, #36]	; 11314 <__assert_fail@plt+0xc8>
   112ec:	sub	r1, r1, r0
   112f0:	asr	r1, r1, #2
   112f4:	add	r1, r1, r1, lsr #31
   112f8:	asrs	r1, r1, #1
   112fc:	bxeq	lr
   11300:	ldr	r3, [pc, #16]	; 11318 <__assert_fail@plt+0xcc>
   11304:	cmp	r3, #0
   11308:	bxeq	lr
   1130c:	bx	r3
   11310:	andeq	r7, r2, r8, asr #2
   11314:	andeq	r7, r2, r8, asr #2
   11318:	andeq	r0, r0, r0
   1131c:	push	{r4, lr}
   11320:	ldr	r4, [pc, #24]	; 11340 <__assert_fail@plt+0xf4>
   11324:	ldrb	r3, [r4]
   11328:	cmp	r3, #0
   1132c:	popne	{r4, pc}
   11330:	bl	112b8 <__assert_fail@plt+0x6c>
   11334:	mov	r3, #1
   11338:	strb	r3, [r4]
   1133c:	pop	{r4, pc}
   11340:	andeq	r7, r2, ip, ror #2
   11344:	b	112e4 <__assert_fail@plt+0x98>
   11348:	push	{fp, lr}
   1134c:	mov	fp, sp
   11350:	sub	sp, sp, #56	; 0x38
   11354:	mov	r8, r0
   11358:	cmp	r0, #0
   1135c:	bne	11628 <__assert_fail@plt+0x3dc>
   11360:	movw	r1, #22955	; 0x59ab
   11364:	mov	r0, #0
   11368:	mov	r2, #5
   1136c:	movt	r1, #1
   11370:	bl	11048 <dcgettext@plt>
   11374:	mov	r1, r0
   11378:	movw	r0, #29084	; 0x719c
   1137c:	movt	r0, #2
   11380:	ldr	r2, [r0]
   11384:	mov	r0, #1
   11388:	bl	11168 <__printf_chk@plt>
   1138c:	movw	r1, #22986	; 0x59ca
   11390:	mov	r0, #0
   11394:	mov	r2, #5
   11398:	movt	r1, #1
   1139c:	bl	11048 <dcgettext@plt>
   113a0:	movw	r9, #29028	; 0x7164
   113a4:	movt	r9, #2
   113a8:	ldr	r1, [r9]
   113ac:	bl	10fac <fputs_unlocked@plt>
   113b0:	movw	r1, #24786	; 0x60d2
   113b4:	mov	r0, #0
   113b8:	mov	r2, #5
   113bc:	movt	r1, #1
   113c0:	bl	11048 <dcgettext@plt>
   113c4:	ldr	r1, [r9]
   113c8:	bl	10fac <fputs_unlocked@plt>
   113cc:	movw	r1, #24842	; 0x610a
   113d0:	mov	r0, #0
   113d4:	mov	r2, #5
   113d8:	movt	r1, #1
   113dc:	bl	11048 <dcgettext@plt>
   113e0:	ldr	r1, [r9]
   113e4:	bl	10fac <fputs_unlocked@plt>
   113e8:	movw	r1, #23052	; 0x5a0c
   113ec:	mov	r0, #0
   113f0:	mov	r2, #5
   113f4:	movt	r1, #1
   113f8:	bl	11048 <dcgettext@plt>
   113fc:	ldr	r1, [r9]
   11400:	bl	10fac <fputs_unlocked@plt>
   11404:	movw	r1, #23229	; 0x5abd
   11408:	mov	r0, #0
   1140c:	mov	r2, #5
   11410:	movt	r1, #1
   11414:	bl	11048 <dcgettext@plt>
   11418:	ldr	r1, [r9]
   1141c:	bl	10fac <fputs_unlocked@plt>
   11420:	movw	r1, #23467	; 0x5bab
   11424:	mov	r0, #0
   11428:	mov	r2, #5
   1142c:	movt	r1, #1
   11430:	bl	11048 <dcgettext@plt>
   11434:	ldr	r1, [r9]
   11438:	bl	10fac <fputs_unlocked@plt>
   1143c:	movw	r1, #23581	; 0x5c1d
   11440:	mov	r0, #0
   11444:	mov	r2, #5
   11448:	movt	r1, #1
   1144c:	bl	11048 <dcgettext@plt>
   11450:	ldr	r1, [r9]
   11454:	bl	10fac <fputs_unlocked@plt>
   11458:	movw	r1, #23791	; 0x5cef
   1145c:	mov	r0, #0
   11460:	mov	r2, #5
   11464:	movt	r1, #1
   11468:	bl	11048 <dcgettext@plt>
   1146c:	ldr	r1, [r9]
   11470:	bl	10fac <fputs_unlocked@plt>
   11474:	movw	r1, #23854	; 0x5d2e
   11478:	mov	r0, #0
   1147c:	mov	r2, #5
   11480:	movt	r1, #1
   11484:	bl	11048 <dcgettext@plt>
   11488:	ldr	r1, [r9]
   1148c:	bl	10fac <fputs_unlocked@plt>
   11490:	movw	r1, #23899	; 0x5d5b
   11494:	mov	r0, #0
   11498:	mov	r2, #5
   1149c:	movt	r1, #1
   114a0:	bl	11048 <dcgettext@plt>
   114a4:	ldr	r1, [r9]
   114a8:	bl	10fac <fputs_unlocked@plt>
   114ac:	movw	r1, #23953	; 0x5d91
   114b0:	mov	r0, #0
   114b4:	mov	r2, #5
   114b8:	movt	r1, #1
   114bc:	bl	11048 <dcgettext@plt>
   114c0:	ldr	r1, [r9]
   114c4:	bl	10fac <fputs_unlocked@plt>
   114c8:	movw	r1, #24157	; 0x5e5d
   114cc:	mov	r0, #0
   114d0:	mov	r2, #5
   114d4:	movt	r1, #1
   114d8:	bl	11048 <dcgettext@plt>
   114dc:	ldr	r1, [r9]
   114e0:	bl	10fac <fputs_unlocked@plt>
   114e4:	movw	r0, #25544	; 0x63c8
   114e8:	mov	r6, sp
   114ec:	movt	r0, #1
   114f0:	mov	r1, r6
   114f4:	ldm	r0!, {r2, r3, r4, r5}
   114f8:	stmia	r1!, {r2, r3, r4, r5}
   114fc:	ldm	r0!, {r2, r3, r4, r5, r7}
   11500:	stmia	r1!, {r2, r3, r4, r5, r7}
   11504:	ldm	r0, {r2, r3, r4, r5, r7}
   11508:	stm	r1, {r2, r3, r4, r5, r7}
   1150c:	movw	r1, #24917	; 0x6155
   11510:	movw	r5, #24419	; 0x5f63
   11514:	movt	r1, #1
   11518:	movt	r5, #1
   1151c:	mov	r0, r5
   11520:	bl	10fb8 <strcmp@plt>
   11524:	cmp	r0, #0
   11528:	ldrne	r1, [r6, #8]!
   1152c:	cmpne	r1, #0
   11530:	bne	1151c <__assert_fail@plt+0x2d0>
   11534:	ldr	r6, [r6, #4]
   11538:	movw	r1, #25012	; 0x61b4
   1153c:	mov	r0, #0
   11540:	mov	r2, #5
   11544:	movt	r1, #1
   11548:	bl	11048 <dcgettext@plt>
   1154c:	movw	r2, #24531	; 0x5fd3
   11550:	movw	r3, #25035	; 0x61cb
   11554:	mov	r1, r0
   11558:	mov	r0, #1
   1155c:	movt	r2, #1
   11560:	movt	r3, #1
   11564:	bl	11168 <__printf_chk@plt>
   11568:	cmp	r6, #0
   1156c:	mov	r0, #5
   11570:	mov	r1, #0
   11574:	moveq	r6, r5
   11578:	bl	111b0 <setlocale@plt>
   1157c:	cmp	r0, #0
   11580:	beq	115b8 <__assert_fail@plt+0x36c>
   11584:	movw	r1, #25075	; 0x61f3
   11588:	mov	r2, #3
   1158c:	movt	r1, #1
   11590:	bl	11210 <strncmp@plt>
   11594:	cmp	r0, #0
   11598:	beq	115b8 <__assert_fail@plt+0x36c>
   1159c:	movw	r1, #25079	; 0x61f7
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	movt	r1, #1
   115ac:	bl	11048 <dcgettext@plt>
   115b0:	ldr	r1, [r9]
   115b4:	bl	10fac <fputs_unlocked@plt>
   115b8:	movw	r1, #25150	; 0x623e
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	movt	r1, #1
   115c8:	bl	11048 <dcgettext@plt>
   115cc:	movw	r2, #25035	; 0x61cb
   115d0:	mov	r1, r0
   115d4:	mov	r0, #1
   115d8:	mov	r3, r5
   115dc:	movt	r2, #1
   115e0:	bl	11168 <__printf_chk@plt>
   115e4:	movw	r1, #25177	; 0x6259
   115e8:	mov	r0, #0
   115ec:	mov	r2, #5
   115f0:	movt	r1, #1
   115f4:	bl	11048 <dcgettext@plt>
   115f8:	movw	r3, #25227	; 0x628b
   115fc:	mov	r1, r0
   11600:	movw	r0, #24945	; 0x6171
   11604:	cmp	r6, r5
   11608:	mov	r2, r6
   1160c:	movt	r0, #1
   11610:	movt	r3, #1
   11614:	moveq	r3, r0
   11618:	mov	r0, #1
   1161c:	bl	11168 <__printf_chk@plt>
   11620:	mov	r0, r8
   11624:	bl	11114 <exit@plt>
   11628:	movw	r0, #29016	; 0x7158
   1162c:	movw	r1, #22916	; 0x5984
   11630:	mov	r2, #5
   11634:	movt	r0, #2
   11638:	movt	r1, #1
   1163c:	ldr	r5, [r0]
   11640:	mov	r0, #0
   11644:	bl	11048 <dcgettext@plt>
   11648:	mov	r2, r0
   1164c:	movw	r0, #29084	; 0x719c
   11650:	mov	r1, #1
   11654:	movt	r0, #2
   11658:	ldr	r3, [r0]
   1165c:	mov	r0, r5
   11660:	bl	11180 <__fprintf_chk@plt>
   11664:	b	11620 <__assert_fail@plt+0x3d4>
   11668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1166c:	add	fp, sp, #28
   11670:	sub	sp, sp, #20
   11674:	mov	r5, r0
   11678:	ldr	r0, [r1]
   1167c:	mov	r8, r1
   11680:	bl	12f9c <__assert_fail@plt+0x1d50>
   11684:	movw	r1, #25227	; 0x628b
   11688:	mov	r0, #6
   1168c:	movt	r1, #1
   11690:	bl	111b0 <setlocale@plt>
   11694:	movw	r6, #24535	; 0x5fd7
   11698:	movw	r1, #24423	; 0x5f67
   1169c:	movt	r6, #1
   116a0:	movt	r1, #1
   116a4:	mov	r0, r6
   116a8:	bl	111f8 <bindtextdomain@plt>
   116ac:	mov	r0, r6
   116b0:	bl	11060 <textdomain@plt>
   116b4:	movw	r0, #10496	; 0x2900
   116b8:	movt	r0, #1
   116bc:	bl	15960 <__assert_fail@plt+0x4714>
   116c0:	movw	r0, #29040	; 0x7170
   116c4:	mov	r9, #0
   116c8:	movw	r7, #29041	; 0x7171
   116cc:	mov	r4, #0
   116d0:	mov	sl, #0
   116d4:	mov	r6, #0
   116d8:	movt	r0, #2
   116dc:	movt	r7, #2
   116e0:	strb	r9, [r0]
   116e4:	movw	r0, #29042	; 0x7172
   116e8:	strb	r9, [r7]
   116ec:	movt	r0, #2
   116f0:	strb	r9, [r0]
   116f4:	b	11810 <__assert_fail@plt+0x5c4>
   116f8:	sub	r1, r0, #98	; 0x62
   116fc:	cmp	r1, #2
   11700:	bcs	11778 <__assert_fail@plt+0x52c>
   11704:	mov	sl, #1
   11708:	b	117d4 <__assert_fail@plt+0x588>
   1170c:	cmp	r0, #121	; 0x79
   11710:	ble	11748 <__assert_fail@plt+0x4fc>
   11714:	cmp	r0, #122	; 0x7a
   11718:	beq	11764 <__assert_fail@plt+0x518>
   1171c:	cmp	r0, #256	; 0x100
   11720:	bne	117ac <__assert_fail@plt+0x560>
   11724:	movw	r0, #29032	; 0x7168
   11728:	movt	r0, #2
   1172c:	ldr	r7, [r0]
   11730:	ldrb	r0, [r7]
   11734:	cmp	r0, #0
   11738:	beq	117ec <__assert_fail@plt+0x5a0>
   1173c:	mov	r0, r7
   11740:	bl	11120 <strlen@plt>
   11744:	b	117f0 <__assert_fail@plt+0x5a4>
   11748:	cmp	r0, #110	; 0x6e
   1174c:	beq	11810 <__assert_fail@plt+0x5c4>
   11750:	cmp	r0, #115	; 0x73
   11754:	bne	11a68 <__assert_fail@plt+0x81c>
   11758:	movw	r0, #29040	; 0x7170
   1175c:	movt	r0, #2
   11760:	b	117c0 <__assert_fail@plt+0x574>
   11764:	movw	r1, #29052	; 0x717c
   11768:	mov	r0, #1
   1176c:	movt	r1, #2
   11770:	strb	r0, [r1]
   11774:	b	11810 <__assert_fail@plt+0x5c4>
   11778:	cmp	r0, #100	; 0x64
   1177c:	bne	117cc <__assert_fail@plt+0x580>
   11780:	movw	r0, #29032	; 0x7168
   11784:	movt	r0, #2
   11788:	ldr	r1, [r0]
   1178c:	ldrb	r0, [r1]
   11790:	cmp	r0, #0
   11794:	ldrbne	r1, [r1, #1]
   11798:	cmpne	r1, #0
   1179c:	bne	11a14 <__assert_fail@plt+0x7c8>
   117a0:	strb	r0, [r7]
   117a4:	mov	r4, #1
   117a8:	b	11810 <__assert_fail@plt+0x5c4>
   117ac:	movw	r1, #257	; 0x101
   117b0:	cmp	r0, r1
   117b4:	bne	11a68 <__assert_fail@plt+0x81c>
   117b8:	movw	r0, #29053	; 0x717d
   117bc:	movt	r0, #2
   117c0:	mov	r1, #1
   117c4:	strb	r1, [r0]
   117c8:	b	11810 <__assert_fail@plt+0x5c4>
   117cc:	cmp	r0, #102	; 0x66
   117d0:	bne	11a68 <__assert_fail@plt+0x81c>
   117d4:	cmp	r6, #0
   117d8:	bne	11a20 <__assert_fail@plt+0x7d4>
   117dc:	movw	r0, #29032	; 0x7168
   117e0:	movt	r0, #2
   117e4:	ldr	r6, [r0]
   117e8:	b	11810 <__assert_fail@plt+0x5c4>
   117ec:	mov	r0, #1
   117f0:	movw	r1, #29048	; 0x7178
   117f4:	movt	r1, #2
   117f8:	str	r7, [r1]
   117fc:	movw	r1, #29044	; 0x7174
   11800:	movw	r7, #29041	; 0x7171
   11804:	movt	r1, #2
   11808:	movt	r7, #2
   1180c:	str	r0, [r1]
   11810:	movw	r2, #24447	; 0x5f7f
   11814:	movw	r3, #25368	; 0x6318
   11818:	mov	r0, r5
   1181c:	mov	r1, r8
   11820:	str	r9, [sp]
   11824:	movt	r2, #1
   11828:	movt	r3, #1
   1182c:	bl	110fc <getopt_long@plt>
   11830:	cmp	r0, #109	; 0x6d
   11834:	bgt	1170c <__assert_fail@plt+0x4c0>
   11838:	cmp	r0, #97	; 0x61
   1183c:	bgt	116f8 <__assert_fail@plt+0x4ac>
   11840:	cmn	r0, #1
   11844:	bne	119a0 <__assert_fail@plt+0x754>
   11848:	cmp	r6, #0
   1184c:	beq	11a2c <__assert_fail@plt+0x7e0>
   11850:	tst	sl, #1
   11854:	beq	11874 <__assert_fail@plt+0x628>
   11858:	tst	r4, #1
   1185c:	bne	11a38 <__assert_fail@plt+0x7ec>
   11860:	movw	r0, #29040	; 0x7170
   11864:	movt	r0, #2
   11868:	ldrb	r0, [r0]
   1186c:	cmp	r0, #1
   11870:	beq	11a44 <__assert_fail@plt+0x7f8>
   11874:	movw	r0, #29053	; 0x717d
   11878:	ands	r1, sl, #1
   1187c:	movt	r0, #2
   11880:	movwne	r1, #4
   11884:	ldrb	r0, [r0]
   11888:	bfi	r1, r0, #1, #1
   1188c:	mov	r0, r6
   11890:	bl	1223c <__assert_fail@plt+0xff0>
   11894:	movw	r1, #29048	; 0x7178
   11898:	tst	r4, #1
   1189c:	moveq	r0, #9
   118a0:	movt	r1, #2
   118a4:	strbeq	r0, [r7]
   118a8:	ldr	r0, [r1]
   118ac:	cmp	r0, #0
   118b0:	bne	118d8 <__assert_fail@plt+0x68c>
   118b4:	movw	r0, #29392	; 0x72d0
   118b8:	movw	r2, #29044	; 0x7174
   118bc:	movt	r0, #2
   118c0:	movt	r2, #2
   118c4:	str	r0, [r1]
   118c8:	mov	r1, #1
   118cc:	str	r1, [r2]
   118d0:	ldrb	r1, [r7]
   118d4:	strb	r1, [r0]
   118d8:	movw	r4, #29008	; 0x7150
   118dc:	movw	r0, #6768	; 0x1a70
   118e0:	movw	r7, #7104	; 0x1bc0
   118e4:	tst	sl, #1
   118e8:	movt	r4, #2
   118ec:	movt	r0, #1
   118f0:	movt	r7, #1
   118f4:	ldr	r1, [r4]
   118f8:	movne	r7, r0
   118fc:	cmp	r1, r5
   11900:	bne	1191c <__assert_fail@plt+0x6d0>
   11904:	movw	r0, #25756	; 0x649c
   11908:	mov	r1, r7
   1190c:	movt	r0, #1
   11910:	bl	1212c <__assert_fail@plt+0xee0>
   11914:	mov	r6, r0
   11918:	b	1194c <__assert_fail@plt+0x700>
   1191c:	mov	r6, #1
   11920:	bge	1194c <__assert_fail@plt+0x700>
   11924:	mov	r6, #1
   11928:	ldr	r0, [r8, r1, lsl #2]
   1192c:	mov	r1, r7
   11930:	bl	1212c <__assert_fail@plt+0xee0>
   11934:	ldr	r1, [r4]
   11938:	and	r6, r6, r0
   1193c:	add	r1, r1, #1
   11940:	cmp	r1, r5
   11944:	str	r1, [r4]
   11948:	blt	11928 <__assert_fail@plt+0x6dc>
   1194c:	movw	r0, #29042	; 0x7172
   11950:	movt	r0, #2
   11954:	ldrb	r0, [r0]
   11958:	cmp	r0, #1
   1195c:	bne	11994 <__assert_fail@plt+0x748>
   11960:	movw	r0, #29024	; 0x7160
   11964:	movt	r0, #2
   11968:	ldr	r0, [r0]
   1196c:	bl	12a28 <__assert_fail@plt+0x17dc>
   11970:	cmn	r0, #1
   11974:	bne	11994 <__assert_fail@plt+0x748>
   11978:	bl	11138 <__errno_location@plt>
   1197c:	ldr	r1, [r0]
   11980:	movw	r2, #25756	; 0x649c
   11984:	mov	r0, #0
   11988:	mov	r6, #0
   1198c:	movt	r2, #1
   11990:	bl	110c0 <error@plt>
   11994:	eor	r0, r6, #1
   11998:	sub	sp, fp, #28
   1199c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119a0:	cmn	r0, #3
   119a4:	bne	11a04 <__assert_fail@plt+0x7b8>
   119a8:	movw	r0, #28928	; 0x7100
   119ac:	movw	r2, #24576	; 0x6000
   119b0:	movw	r7, #24560	; 0x5ff0
   119b4:	movw	r6, #24545	; 0x5fe1
   119b8:	mov	r1, #0
   119bc:	movt	r0, #2
   119c0:	movt	r2, #1
   119c4:	movt	r7, #1
   119c8:	movt	r6, #1
   119cc:	ldr	r3, [r0]
   119d0:	movw	r0, #29028	; 0x7164
   119d4:	movt	r0, #2
   119d8:	ldr	r0, [r0]
   119dc:	stm	sp, {r6, r7}
   119e0:	str	r2, [sp, #8]
   119e4:	movw	r2, #24531	; 0x5fd3
   119e8:	str	r1, [sp, #12]
   119ec:	movw	r1, #24419	; 0x5f63
   119f0:	movt	r1, #1
   119f4:	movt	r2, #1
   119f8:	bl	14e8c <__assert_fail@plt+0x3c40>
   119fc:	mov	r0, #0
   11a00:	bl	11114 <exit@plt>
   11a04:	cmn	r0, #2
   11a08:	bne	11a68 <__assert_fail@plt+0x81c>
   11a0c:	mov	r0, #0
   11a10:	bl	11348 <__assert_fail@plt+0xfc>
   11a14:	movw	r1, #24490	; 0x5faa
   11a18:	movt	r1, #1
   11a1c:	b	11a4c <__assert_fail@plt+0x800>
   11a20:	movw	r1, #24459	; 0x5f8b
   11a24:	movt	r1, #1
   11a28:	b	11a4c <__assert_fail@plt+0x800>
   11a2c:	movw	r1, #24589	; 0x600d
   11a30:	movt	r1, #1
   11a34:	b	11a4c <__assert_fail@plt+0x800>
   11a38:	movw	r1, #24645	; 0x6045
   11a3c:	movt	r1, #1
   11a40:	b	11a4c <__assert_fail@plt+0x800>
   11a44:	movw	r1, #24711	; 0x6087
   11a48:	movt	r1, #1
   11a4c:	mov	r0, #0
   11a50:	mov	r2, #5
   11a54:	bl	11048 <dcgettext@plt>
   11a58:	mov	r2, r0
   11a5c:	mov	r0, #0
   11a60:	mov	r1, #0
   11a64:	bl	110c0 <error@plt>
   11a68:	mov	r0, #1
   11a6c:	bl	11348 <__assert_fail@plt+0xfc>
   11a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a74:	add	fp, sp, #28
   11a78:	sub	sp, sp, #4
   11a7c:	mov	r4, r0
   11a80:	movw	r0, #29396	; 0x72d4
   11a84:	movw	r7, #29056	; 0x7180
   11a88:	movw	r6, #29052	; 0x717c
   11a8c:	mov	r9, #0
   11a90:	movt	r0, #2
   11a94:	movt	r7, #2
   11a98:	movt	r6, #2
   11a9c:	ldr	r0, [r0]
   11aa0:	str	r0, [r7]
   11aa4:	mov	sl, #0
   11aa8:	mov	r8, #0
   11aac:	b	11b68 <__assert_fail@plt+0x91c>
   11ab0:	cmn	r5, #1
   11ab4:	beq	11bac <__assert_fail@plt+0x960>
   11ab8:	ldr	r0, [r7]
   11abc:	adds	r9, r9, #1
   11ac0:	adc	sl, sl, #0
   11ac4:	ldrd	r2, [r0, #8]
   11ac8:	subs	r1, r2, r9
   11acc:	sbcs	r1, r3, sl
   11ad0:	addcc	r0, r0, #16
   11ad4:	strcc	r0, [r7]
   11ad8:	ldr	r2, [r0]
   11adc:	ldr	r1, [r0, #4]
   11ae0:	subs	r0, r9, r2
   11ae4:	sbcs	r0, sl, r1
   11ae8:	bcc	11b68 <__assert_fail@plt+0x91c>
   11aec:	movw	r0, #29048	; 0x7178
   11af0:	movw	r3, #29392	; 0x72d0
   11af4:	movt	r0, #2
   11af8:	movt	r3, #2
   11afc:	ldr	r0, [r0]
   11b00:	subs	r3, r0, r3
   11b04:	movwne	r3, #1
   11b08:	orr	ip, r8, r3
   11b0c:	beq	11b5c <__assert_fail@plt+0x910>
   11b10:	eor	r3, r8, #1
   11b14:	mov	r8, ip
   11b18:	tst	r3, #1
   11b1c:	bne	11b60 <__assert_fail@plt+0x914>
   11b20:	eor	r2, r2, r9
   11b24:	eor	r1, r1, sl
   11b28:	mov	r8, #1
   11b2c:	orrs	r1, r2, r1
   11b30:	bne	11b60 <__assert_fail@plt+0x914>
   11b34:	movw	r1, #29028	; 0x7164
   11b38:	mov	r8, #1
   11b3c:	movt	r1, #2
   11b40:	ldr	r3, [r1]
   11b44:	movw	r1, #29044	; 0x7174
   11b48:	movt	r1, #2
   11b4c:	ldr	r2, [r1]
   11b50:	mov	r1, #1
   11b54:	bl	11024 <fwrite_unlocked@plt>
   11b58:	b	11b60 <__assert_fail@plt+0x914>
   11b5c:	mov	r8, ip
   11b60:	mov	r0, r5
   11b64:	bl	11234 <putchar_unlocked@plt>
   11b68:	mov	r0, r4
   11b6c:	bl	1103c <getc_unlocked@plt>
   11b70:	mov	r5, r0
   11b74:	ldrb	r0, [r6]
   11b78:	cmp	r0, #0
   11b7c:	mov	r0, #10
   11b80:	movwne	r0, #0
   11b84:	cmp	r5, r0
   11b88:	bne	11ab0 <__assert_fail@plt+0x864>
   11b8c:	mov	r0, r5
   11b90:	bl	11234 <putchar_unlocked@plt>
   11b94:	movw	r0, #29396	; 0x72d4
   11b98:	mov	r9, #0
   11b9c:	movt	r0, #2
   11ba0:	ldr	r0, [r0]
   11ba4:	str	r0, [r7]
   11ba8:	b	11aa4 <__assert_fail@plt+0x858>
   11bac:	sub	sp, fp, #28
   11bb0:	orrs	r1, r9, sl
   11bb4:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bbc:	b	11234 <putchar_unlocked@plt>
   11bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc4:	add	fp, sp, #28
   11bc8:	sub	sp, sp, #28
   11bcc:	mov	r4, r0
   11bd0:	movw	r0, #29396	; 0x72d4
   11bd4:	movw	r5, #29056	; 0x7180
   11bd8:	movt	r0, #2
   11bdc:	movt	r5, #2
   11be0:	ldr	r0, [r0]
   11be4:	str	r0, [r5]
   11be8:	mov	r0, r4
   11bec:	bl	1103c <getc_unlocked@plt>
   11bf0:	cmn	r0, #1
   11bf4:	beq	12100 <__assert_fail@plt+0xeb4>
   11bf8:	mov	r1, r4
   11bfc:	bl	1112c <ungetc@plt>
   11c00:	ldr	r0, [r5]
   11c04:	movw	r8, #29041	; 0x7171
   11c08:	movw	r9, #29052	; 0x717c
   11c0c:	movw	sl, #29060	; 0x7184
   11c10:	mov	r5, #0
   11c14:	mov	r6, #0
   11c18:	movt	r8, #2
   11c1c:	movt	r9, #2
   11c20:	movt	sl, #2
   11c24:	ldrd	r0, [r0]
   11c28:	rsbs	r0, r0, #1
   11c2c:	rscs	r0, r1, #0
   11c30:	movw	r1, #29040	; 0x7170
   11c34:	movt	r1, #2
   11c38:	mov	r0, #0
   11c3c:	ldrb	r1, [r1]
   11c40:	movwcc	r0, #1
   11c44:	eor	r0, r1, r0
   11c48:	eor	r0, r0, #1
   11c4c:	str	r0, [sp, #16]
   11c50:	mov	r0, #1
   11c54:	str	r0, [sp, #24]
   11c58:	mov	r0, #0
   11c5c:	str	r0, [sp, #20]
   11c60:	b	12054 <__assert_fail@plt+0xe08>
   11c64:	cmp	r2, #0
   11c68:	beq	12108 <__assert_fail@plt+0xebc>
   11c6c:	ldr	r0, [sl]
   11c70:	sub	r7, r2, #1
   11c74:	ldrb	r3, [r8]
   11c78:	ldrb	r1, [r0, r7]
   11c7c:	cmp	r1, r3
   11c80:	beq	11d04 <__assert_fail@plt+0xab8>
   11c84:	ldrb	r1, [r6]
   11c88:	cmp	r1, #0
   11c8c:	bne	11cc0 <__assert_fail@plt+0xa74>
   11c90:	ldr	r3, [r5]
   11c94:	mov	r1, #1
   11c98:	bl	11024 <fwrite_unlocked@plt>
   11c9c:	ldr	r1, [sl]
   11ca0:	ldrb	r0, [r9]
   11ca4:	ldrb	r1, [r1, r7]
   11ca8:	cmp	r0, #0
   11cac:	mov	r0, #10
   11cb0:	movwne	r0, #0
   11cb4:	cmp	r0, r1
   11cb8:	beq	11cc0 <__assert_fail@plt+0xa74>
   11cbc:	bl	11234 <putchar_unlocked@plt>
   11cc0:	ldrb	r0, [r9]
   11cc4:	ldrb	r1, [r8]
   11cc8:	mov	r2, #0
   11ccc:	mvn	r3, #0
   11cd0:	cmp	r0, #0
   11cd4:	mov	r0, #10
   11cd8:	str	r1, [sp]
   11cdc:	movw	r1, #29064	; 0x7188
   11ce0:	movwne	r0, #0
   11ce4:	movt	r1, #2
   11ce8:	stmib	sp, {r0, r4}
   11cec:	mov	r0, sl
   11cf0:	bl	12bec <__assert_fail@plt+0x19a0>
   11cf4:	mov	r2, r0
   11cf8:	cmp	r0, #0
   11cfc:	bge	11c64 <__assert_fail@plt+0xa18>
   11d00:	b	120d0 <__assert_fail@plt+0xe84>
   11d04:	movw	r1, #29056	; 0x7180
   11d08:	movt	r1, #2
   11d0c:	ldr	r1, [r1]
   11d10:	ldrd	r2, [r1]
   11d14:	rsbs	r1, r2, #1
   11d18:	rscs	r1, r3, #0
   11d1c:	bcc	11d80 <__assert_fail@plt+0xb34>
   11d20:	ldr	r3, [r5]
   11d24:	mov	r1, #1
   11d28:	mov	r2, r7
   11d2c:	bl	11024 <fwrite_unlocked@plt>
   11d30:	ldrb	r0, [r9]
   11d34:	ldrb	r1, [r8]
   11d38:	cmp	r0, #0
   11d3c:	mov	r0, #10
   11d40:	movwne	r0, #0
   11d44:	cmp	r0, r1
   11d48:	bne	11d78 <__assert_fail@plt+0xb2c>
   11d4c:	mov	r0, r4
   11d50:	bl	1103c <getc_unlocked@plt>
   11d54:	movw	r7, #29056	; 0x7180
   11d58:	cmn	r0, #1
   11d5c:	movt	r7, #2
   11d60:	beq	11d88 <__assert_fail@plt+0xb3c>
   11d64:	mov	r1, r4
   11d68:	bl	1112c <ungetc@plt>
   11d6c:	mov	r0, #1
   11d70:	str	r0, [sp, #20]
   11d74:	b	11d88 <__assert_fail@plt+0xb3c>
   11d78:	mov	r0, #1
   11d7c:	str	r0, [sp, #20]
   11d80:	movw	r7, #29056	; 0x7180
   11d84:	movt	r7, #2
   11d88:	ldr	r0, [r7]
   11d8c:	mov	r1, #2
   11d90:	mov	r5, #0
   11d94:	mov	r6, #0
   11d98:	ldrd	r2, [r0, #8]
   11d9c:	str	r1, [sp, #24]
   11da0:	rsbs	r1, r2, #1
   11da4:	rscs	r1, r3, #0
   11da8:	addcs	r0, r0, #16
   11dac:	movcs	r5, #0
   11db0:	strcs	r0, [r7]
   11db4:	ldr	r0, [r7]
   11db8:	ldr	r2, [sp, #24]
   11dbc:	ldrd	r0, [r0]
   11dc0:	subs	r0, r2, r0
   11dc4:	sbcs	r0, r5, r1
   11dc8:	bcs	11e38 <__assert_fail@plt+0xbec>
   11dcc:	mov	r0, r4
   11dd0:	bl	1103c <getc_unlocked@plt>
   11dd4:	ldrb	r1, [r8]
   11dd8:	cmp	r0, r1
   11ddc:	beq	11e8c <__assert_fail@plt+0xc40>
   11de0:	ldrb	r2, [r9]
   11de4:	cmp	r2, #0
   11de8:	mov	r2, #10
   11dec:	movwne	r2, #0
   11df0:	cmn	r0, #1
   11df4:	cmpne	r0, r2
   11df8:	beq	11e8c <__assert_fail@plt+0xc40>
   11dfc:	mov	r7, r0
   11e00:	mov	r0, r4
   11e04:	bl	1103c <getc_unlocked@plt>
   11e08:	ldrb	r1, [r8]
   11e0c:	cmp	r0, r1
   11e10:	beq	11eec <__assert_fail@plt+0xca0>
   11e14:	ldrb	r2, [r9]
   11e18:	cmp	r2, #0
   11e1c:	mov	r2, #10
   11e20:	movwne	r2, #0
   11e24:	cmn	r0, #1
   11e28:	beq	11eec <__assert_fail@plt+0xca0>
   11e2c:	cmp	r0, r2
   11e30:	bne	11dfc <__assert_fail@plt+0xbb0>
   11e34:	b	11eec <__assert_fail@plt+0xca0>
   11e38:	ldr	r0, [sp, #20]
   11e3c:	tst	r0, #1
   11e40:	beq	11e70 <__assert_fail@plt+0xc24>
   11e44:	movw	r0, #29028	; 0x7164
   11e48:	mov	r1, #1
   11e4c:	movt	r0, #2
   11e50:	ldr	r3, [r0]
   11e54:	movw	r0, #29044	; 0x7174
   11e58:	movt	r0, #2
   11e5c:	ldr	r2, [r0]
   11e60:	movw	r0, #29048	; 0x7178
   11e64:	movt	r0, #2
   11e68:	ldr	r0, [r0]
   11e6c:	bl	11024 <fwrite_unlocked@plt>
   11e70:	mov	r0, r4
   11e74:	bl	1103c <getc_unlocked@plt>
   11e78:	ldrb	r1, [r8]
   11e7c:	mov	r2, #1
   11e80:	str	r2, [sp, #20]
   11e84:	cmp	r0, r1
   11e88:	bne	11e94 <__assert_fail@plt+0xc48>
   11e8c:	mov	r7, r6
   11e90:	b	11eec <__assert_fail@plt+0xca0>
   11e94:	ldrb	r2, [r9]
   11e98:	cmp	r2, #0
   11e9c:	mov	r2, #10
   11ea0:	movwne	r2, #0
   11ea4:	cmn	r0, #1
   11ea8:	beq	11e8c <__assert_fail@plt+0xc40>
   11eac:	cmp	r0, r2
   11eb0:	beq	11e8c <__assert_fail@plt+0xc40>
   11eb4:	mov	r7, r0
   11eb8:	bl	11234 <putchar_unlocked@plt>
   11ebc:	mov	r0, r4
   11ec0:	bl	1103c <getc_unlocked@plt>
   11ec4:	ldrb	r1, [r8]
   11ec8:	cmp	r0, r1
   11ecc:	beq	11eec <__assert_fail@plt+0xca0>
   11ed0:	ldrb	r2, [r9]
   11ed4:	cmp	r2, #0
   11ed8:	mov	r2, #10
   11edc:	movwne	r2, #0
   11ee0:	cmn	r0, #1
   11ee4:	cmpne	r0, r2
   11ee8:	bne	11eb4 <__assert_fail@plt+0xc68>
   11eec:	mov	r6, r0
   11ef0:	ldrb	r0, [r9]
   11ef4:	cmp	r0, #0
   11ef8:	mov	r0, #10
   11efc:	movwne	r0, #0
   11f00:	cmp	r6, r1
   11f04:	cmpeq	r0, r1
   11f08:	beq	11f90 <__assert_fail@plt+0xd44>
   11f0c:	ldrb	r1, [r8]
   11f10:	cmp	r6, r1
   11f14:	bne	11f58 <__assert_fail@plt+0xd0c>
   11f18:	movw	r0, #29056	; 0x7180
   11f1c:	ldr	r1, [sp, #24]
   11f20:	movt	r0, #2
   11f24:	ldr	r0, [r0]
   11f28:	adds	r1, r1, #1
   11f2c:	adc	r5, r5, #0
   11f30:	ldrd	r2, [r0, #8]
   11f34:	str	r1, [sp, #24]
   11f38:	subs	r1, r2, r1
   11f3c:	sbcs	r1, r3, r5
   11f40:	bcs	12054 <__assert_fail@plt+0xe08>
   11f44:	movw	r1, #29056	; 0x7180
   11f48:	add	r0, r0, #16
   11f4c:	movt	r1, #2
   11f50:	str	r0, [r1]
   11f54:	b	12054 <__assert_fail@plt+0xe08>
   11f58:	ldrb	r0, [r9]
   11f5c:	add	r3, r6, #1
   11f60:	clz	r3, r3
   11f64:	cmp	r0, #0
   11f68:	mov	r0, #10
   11f6c:	movwne	r0, #0
   11f70:	cmn	r6, #1
   11f74:	sub	r2, r6, r0
   11f78:	cmpne	r6, r0
   11f7c:	clz	r2, r2
   11f80:	lsr	ip, r2, #5
   11f84:	lsr	r2, r3, #5
   11f88:	bne	12054 <__assert_fail@plt+0xe08>
   11f8c:	b	11fcc <__assert_fail@plt+0xd80>
   11f90:	mov	r0, r4
   11f94:	bl	1103c <getc_unlocked@plt>
   11f98:	cmn	r0, #1
   11f9c:	beq	11fac <__assert_fail@plt+0xd60>
   11fa0:	mov	r1, r4
   11fa4:	bl	1112c <ungetc@plt>
   11fa8:	b	11f0c <__assert_fail@plt+0xcc0>
   11fac:	ldrb	r0, [r9]
   11fb0:	ldrb	r1, [r8]
   11fb4:	mvn	r6, #0
   11fb8:	mov	ip, #0
   11fbc:	mov	r2, #1
   11fc0:	cmp	r0, #0
   11fc4:	mov	r0, #10
   11fc8:	movwne	r0, #0
   11fcc:	ldr	r3, [sp, #20]
   11fd0:	tst	r3, #1
   11fd4:	ldreq	r3, [sp, #24]
   11fd8:	eoreq	r3, r3, #1
   11fdc:	orrseq	r3, r3, r5
   11fe0:	beq	1200c <__assert_fail@plt+0xdc0>
   11fe4:	subs	r3, r7, r0
   11fe8:	movwne	r3, #1
   11fec:	cmp	r0, r1
   11ff0:	beq	11ffc <__assert_fail@plt+0xdb0>
   11ff4:	orrs	r1, r3, ip
   11ff8:	beq	12020 <__assert_fail@plt+0xdd4>
   11ffc:	mov	r5, r2
   12000:	bl	11234 <putchar_unlocked@plt>
   12004:	mov	r2, r5
   12008:	b	12020 <__assert_fail@plt+0xdd4>
   1200c:	movw	r3, #29040	; 0x7170
   12010:	movt	r3, #2
   12014:	ldrb	r3, [r3]
   12018:	cmp	r3, #0
   1201c:	beq	11fe4 <__assert_fail@plt+0xd98>
   12020:	movw	r1, #29056	; 0x7180
   12024:	cmp	r2, #0
   12028:	movt	r1, #2
   1202c:	bne	12100 <__assert_fail@plt+0xeb4>
   12030:	movw	r0, #29396	; 0x72d4
   12034:	mov	r5, #0
   12038:	movt	r0, #2
   1203c:	ldr	r0, [r0]
   12040:	str	r0, [r1]
   12044:	mov	r0, #1
   12048:	str	r0, [sp, #24]
   1204c:	mov	r0, #0
   12050:	str	r0, [sp, #20]
   12054:	ldr	r0, [sp, #24]
   12058:	ldr	r1, [sp, #16]
   1205c:	eor	r0, r0, #1
   12060:	orrs	r0, r0, r5
   12064:	movwne	r0, #1
   12068:	orr	r0, r0, r1
   1206c:	tst	r0, #1
   12070:	beq	12080 <__assert_fail@plt+0xe34>
   12074:	movw	r7, #29056	; 0x7180
   12078:	movt	r7, #2
   1207c:	b	11db4 <__assert_fail@plt+0xb68>
   12080:	ldrb	r0, [r9]
   12084:	ldrb	r1, [r8]
   12088:	mov	r2, #0
   1208c:	mvn	r3, #0
   12090:	cmp	r0, #0
   12094:	mov	r0, #10
   12098:	str	r1, [sp]
   1209c:	movw	r1, #29064	; 0x7188
   120a0:	movwne	r0, #0
   120a4:	movt	r1, #2
   120a8:	stmib	sp, {r0, r4}
   120ac:	mov	r0, sl
   120b0:	bl	12bec <__assert_fail@plt+0x19a0>
   120b4:	movw	r6, #29040	; 0x7170
   120b8:	movw	r5, #29028	; 0x7164
   120bc:	mov	r2, r0
   120c0:	cmp	r0, #0
   120c4:	movt	r6, #2
   120c8:	movt	r5, #2
   120cc:	bge	11c64 <__assert_fail@plt+0xa18>
   120d0:	ldr	r0, [sl]
   120d4:	bl	12b20 <__assert_fail@plt+0x18d4>
   120d8:	mov	r0, #0
   120dc:	str	r0, [sl]
   120e0:	mov	r0, r4
   120e4:	bl	110a8 <ferror_unlocked@plt>
   120e8:	cmp	r0, #0
   120ec:	bne	12100 <__assert_fail@plt+0xeb4>
   120f0:	mov	r0, r4
   120f4:	bl	11228 <feof_unlocked@plt>
   120f8:	cmp	r0, #0
   120fc:	beq	12128 <__assert_fail@plt+0xedc>
   12100:	sub	sp, fp, #28
   12104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12108:	movw	r0, #25317	; 0x62e5
   1210c:	movw	r1, #25330	; 0x62f2
   12110:	movw	r3, #25340	; 0x62fc
   12114:	movw	r2, #315	; 0x13b
   12118:	movt	r0, #1
   1211c:	movt	r1, #1
   12120:	movt	r3, #1
   12124:	bl	1124c <__assert_fail@plt>
   12128:	bl	153e4 <__assert_fail@plt+0x4198>
   1212c:	push	{r4, r5, r6, r7, fp, lr}
   12130:	add	fp, sp, #16
   12134:	mov	r5, r1
   12138:	movw	r1, #25756	; 0x649c
   1213c:	mov	r4, r0
   12140:	movt	r1, #1
   12144:	bl	10fb8 <strcmp@plt>
   12148:	cmp	r0, #0
   1214c:	beq	12178 <__assert_fail@plt+0xf2c>
   12150:	movw	r1, #24529	; 0x5fd1
   12154:	mov	r0, r4
   12158:	movt	r1, #1
   1215c:	bl	111e0 <fopen64@plt>
   12160:	mov	r6, r0
   12164:	cmp	r0, #0
   12168:	bne	12194 <__assert_fail@plt+0xf48>
   1216c:	bl	11138 <__errno_location@plt>
   12170:	ldr	r5, [r0]
   12174:	b	12200 <__assert_fail@plt+0xfb4>
   12178:	movw	r0, #29042	; 0x7172
   1217c:	mov	r1, #1
   12180:	movt	r0, #2
   12184:	strb	r1, [r0]
   12188:	movw	r0, #29024	; 0x7160
   1218c:	movt	r0, #2
   12190:	ldr	r6, [r0]
   12194:	mov	r0, r6
   12198:	mov	r1, #2
   1219c:	bl	129ec <__assert_fail@plt+0x17a0>
   121a0:	mov	r0, r6
   121a4:	blx	r5
   121a8:	bl	11138 <__errno_location@plt>
   121ac:	ldr	r5, [r0]
   121b0:	mov	r7, r0
   121b4:	mov	r0, r6
   121b8:	bl	110a8 <ferror_unlocked@plt>
   121bc:	movw	r1, #25756	; 0x649c
   121c0:	cmp	r0, #0
   121c4:	moveq	r5, r0
   121c8:	movt	r1, #1
   121cc:	mov	r0, r4
   121d0:	bl	10fb8 <strcmp@plt>
   121d4:	cmp	r0, #0
   121d8:	beq	121f0 <__assert_fail@plt+0xfa4>
   121dc:	mov	r0, r6
   121e0:	bl	12a28 <__assert_fail@plt+0x17dc>
   121e4:	cmn	r0, #1
   121e8:	ldreq	r5, [r7]
   121ec:	b	121f8 <__assert_fail@plt+0xfac>
   121f0:	mov	r0, r6
   121f4:	bl	111d4 <clearerr_unlocked@plt>
   121f8:	cmp	r5, #0
   121fc:	beq	12230 <__assert_fail@plt+0xfe4>
   12200:	mov	r0, #0
   12204:	mov	r1, #3
   12208:	mov	r2, r4
   1220c:	mov	r6, #0
   12210:	bl	1480c <__assert_fail@plt+0x35c0>
   12214:	movw	r2, #26014	; 0x659e
   12218:	mov	r3, r0
   1221c:	mov	r0, #0
   12220:	mov	r1, r5
   12224:	movt	r2, #1
   12228:	bl	110c0 <error@plt>
   1222c:	b	12234 <__assert_fail@plt+0xfe8>
   12230:	mov	r6, #1
   12234:	mov	r0, r6
   12238:	pop	{r4, r5, r6, r7, fp, pc}
   1223c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12240:	add	fp, sp, #28
   12244:	sub	sp, sp, #20
   12248:	mov	r9, r0
   1224c:	ands	r0, r1, #1
   12250:	mov	ip, #0
   12254:	str	r1, [sp]
   12258:	str	r0, [sp, #4]
   1225c:	beq	12290 <__assert_fail@plt+0x1044>
   12260:	movw	r1, #25756	; 0x649c
   12264:	mov	r0, r9
   12268:	movt	r1, #1
   1226c:	bl	10fb8 <strcmp@plt>
   12270:	cmp	r0, #0
   12274:	clz	r0, r0
   12278:	mov	ip, #0
   1227c:	mov	r3, #0
   12280:	lsr	r6, r0, #5
   12284:	addeq	r9, r9, #1
   12288:	mov	sl, r6
   1228c:	b	1229c <__assert_fail@plt+0x1050>
   12290:	mov	r6, #0
   12294:	mov	r3, #0
   12298:	mov	sl, #0
   1229c:	mov	r0, #1
   122a0:	mov	r7, sl
   122a4:	mov	r1, #0
   122a8:	str	r0, [sp, #16]
   122ac:	mov	r0, #0
   122b0:	str	r0, [sp, #12]
   122b4:	b	122dc <__assert_fail@plt+0x1090>
   122b8:	mov	r6, #0
   122bc:	mov	r3, #0
   122c0:	mov	sl, #0
   122c4:	mov	ip, #0
   122c8:	mov	r7, #0
   122cc:	mov	r1, #0
   122d0:	str	r5, [sp, #16]
   122d4:	str	r4, [sp, #12]
   122d8:	add	r9, r9, #1
   122dc:	ldrb	r4, [r9]
   122e0:	cmp	r4, #44	; 0x2c
   122e4:	beq	12430 <__assert_fail@plt+0x11e4>
   122e8:	cmp	r4, #45	; 0x2d
   122ec:	bne	12330 <__assert_fail@plt+0x10e4>
   122f0:	tst	r7, #1
   122f4:	bne	12780 <__assert_fail@plt+0x1534>
   122f8:	orrs	r0, r6, r3
   122fc:	eoreq	r0, sl, #1
   12300:	tsteq	r0, #1
   12304:	beq	126f4 <__assert_fail@plt+0x14a8>
   12308:	ands	r0, sl, #1
   1230c:	mov	r7, #1
   12310:	mov	r1, #0
   12314:	moveq	r6, r7
   12318:	movne	r0, r3
   1231c:	mov	r3, #0
   12320:	str	r6, [sp, #16]
   12324:	mov	r6, #0
   12328:	str	r0, [sp, #12]
   1232c:	b	122d8 <__assert_fail@plt+0x108c>
   12330:	mov	r8, r9
   12334:	mov	r5, ip
   12338:	mov	r9, r1
   1233c:	str	r3, [sp, #8]
   12340:	bl	11108 <__ctype_b_loc@plt>
   12344:	ldr	r3, [sp, #8]
   12348:	mov	r2, r9
   1234c:	mov	r9, r8
   12350:	mov	ip, r5
   12354:	cmp	r4, #0
   12358:	beq	12430 <__assert_fail@plt+0x11e4>
   1235c:	ldr	r0, [r0]
   12360:	add	r0, r0, r4, lsl #1
   12364:	ldrh	r0, [r0]
   12368:	ands	r0, r0, #1
   1236c:	bne	12430 <__assert_fail@plt+0x11e4>
   12370:	sub	r0, r4, #48	; 0x30
   12374:	cmp	r0, #9
   12378:	bhi	127ac <__assert_fail@plt+0x1560>
   1237c:	movw	r1, #29068	; 0x718c
   12380:	movt	r1, #2
   12384:	ldr	r4, [r1]
   12388:	cmp	r4, #0
   1238c:	mov	r1, r4
   12390:	movwne	r1, #1
   12394:	tst	r2, r1
   12398:	movweq	r1, #29068	; 0x718c
   1239c:	moveq	r4, r9
   123a0:	movteq	r1, #2
   123a4:	streq	r9, [r1]
   123a8:	movw	r1, #39321	; 0x9999
   123ac:	movt	r1, #39321	; 0x9999
   123b0:	subs	r1, r1, r6
   123b4:	movw	r1, #39321	; 0x9999
   123b8:	movt	r1, #6553	; 0x1999
   123bc:	sbcs	r1, r1, r3
   123c0:	bcc	12708 <__assert_fail@plt+0x14bc>
   123c4:	ldr	r3, [sp, #8]
   123c8:	mov	r1, #10
   123cc:	umull	r1, r2, r6, r1
   123d0:	adds	r1, r1, r0
   123d4:	add	r3, r3, r3, lsl #2
   123d8:	add	r2, r2, r3, lsl #1
   123dc:	ldr	r3, [sp, #8]
   123e0:	adc	r0, r2, r0, asr #31
   123e4:	subs	r2, r1, r6
   123e8:	sbcs	r2, r0, r3
   123ec:	mov	r2, #0
   123f0:	movwcc	r2, #1
   123f4:	cmp	r2, #0
   123f8:	moveq	r3, r0
   123fc:	moveq	r6, r1
   12400:	cmp	r2, #0
   12404:	bne	12708 <__assert_fail@plt+0x14bc>
   12408:	mvn	r1, #0
   1240c:	eor	r0, r6, r1
   12410:	eor	r1, r3, r1
   12414:	orrs	r0, r0, r1
   12418:	beq	12708 <__assert_fail@plt+0x14bc>
   1241c:	eor	r0, r7, #1
   12420:	orr	ip, ip, r7
   12424:	mov	r1, #1
   12428:	orr	sl, sl, r0
   1242c:	b	122d8 <__assert_fail@plt+0x108c>
   12430:	tst	r7, #1
   12434:	beq	12494 <__assert_fail@plt+0x1248>
   12438:	orr	r0, sl, ip
   1243c:	ldr	r8, [sp, #16]
   12440:	ldr	sl, [sp, #12]
   12444:	ldr	r1, [sp, #4]
   12448:	mov	r5, #1
   1244c:	ands	r4, r0, #1
   12450:	movne	r5, r8
   12454:	movne	r4, sl
   12458:	cmp	r1, #0
   1245c:	tsteq	r0, #1
   12460:	beq	127a0 <__assert_fail@plt+0x1554>
   12464:	tst	ip, #1
   12468:	beq	124b4 <__assert_fail@plt+0x1268>
   1246c:	subs	r0, r6, r5
   12470:	sbcs	r0, r3, r4
   12474:	bcc	127fc <__assert_fail@plt+0x15b0>
   12478:	mov	r0, r5
   1247c:	mov	r1, r4
   12480:	mov	r2, r6
   12484:	bl	1283c <__assert_fail@plt+0x15f0>
   12488:	mov	r5, r8
   1248c:	mov	r4, sl
   12490:	b	124c8 <__assert_fail@plt+0x127c>
   12494:	ldr	r5, [sp, #16]
   12498:	ldr	r4, [sp, #12]
   1249c:	orrs	r0, r6, r3
   124a0:	beq	126f4 <__assert_fail@plt+0x14a8>
   124a4:	mov	r0, r6
   124a8:	mov	r1, r3
   124ac:	mov	r2, r6
   124b0:	b	124c4 <__assert_fail@plt+0x1278>
   124b4:	mov	r0, r5
   124b8:	mov	r1, r4
   124bc:	mvn	r2, #0
   124c0:	mvn	r3, #0
   124c4:	bl	1283c <__assert_fail@plt+0x15f0>
   124c8:	ldrb	r0, [r9]
   124cc:	cmp	r0, #0
   124d0:	bne	122b8 <__assert_fail@plt+0x106c>
   124d4:	movw	r7, #29400	; 0x72d8
   124d8:	movt	r7, #2
   124dc:	ldr	r1, [r7]
   124e0:	cmp	r1, #0
   124e4:	beq	12828 <__assert_fail@plt+0x15dc>
   124e8:	movw	r0, #29396	; 0x72d4
   124ec:	movw	r3, #10436	; 0x28c4
   124f0:	mov	r2, #16
   124f4:	movt	r0, #2
   124f8:	movt	r3, #1
   124fc:	ldr	r0, [r0]
   12500:	bl	111ec <qsort@plt>
   12504:	ldr	sl, [r7]
   12508:	cmp	sl, #0
   1250c:	beq	125c8 <__assert_fail@plt+0x137c>
   12510:	mov	r9, #0
   12514:	mov	r8, r9
   12518:	add	r9, r9, #1
   1251c:	cmp	r9, sl
   12520:	bcs	125bc <__assert_fail@plt+0x1370>
   12524:	mvn	r0, #-268435455	; 0xf0000001
   12528:	sub	r0, r0, r8
   1252c:	str	r0, [sp, #16]
   12530:	movw	r0, #29396	; 0x72d4
   12534:	movt	r0, #2
   12538:	ldr	r5, [r0]
   1253c:	add	r1, r5, r8, lsl #4
   12540:	mov	r0, r5
   12544:	ldr	r6, [r0, r9, lsl #4]!
   12548:	ldr	r2, [r1, #8]!
   1254c:	ldr	r3, [r1, #4]
   12550:	ldr	r0, [r0, #4]
   12554:	subs	r6, r2, r6
   12558:	sbcs	r0, r3, r0
   1255c:	bcc	125bc <__assert_fail@plt+0x1370>
   12560:	add	r0, r5, r9, lsl #4
   12564:	mov	r4, r7
   12568:	ldr	r6, [r0, #8]
   1256c:	ldr	r5, [r0, #12]
   12570:	subs	r7, r2, r6
   12574:	sbcs	r7, r3, r5
   12578:	mov	r7, #0
   1257c:	movwcc	r7, #1
   12580:	cmp	r7, #0
   12584:	mov	r7, r4
   12588:	movne	r3, r5
   1258c:	movne	r2, r6
   12590:	strd	r2, [r1]
   12594:	add	r1, r0, #16
   12598:	ldr	r2, [sp, #16]
   1259c:	add	r2, r2, sl
   125a0:	lsl	r2, r2, #4
   125a4:	bl	10fdc <memmove@plt>
   125a8:	ldr	r0, [r4]
   125ac:	sub	sl, r0, #1
   125b0:	cmp	r9, sl
   125b4:	str	sl, [r4]
   125b8:	bcc	12530 <__assert_fail@plt+0x12e4>
   125bc:	cmp	r9, sl
   125c0:	bcc	12514 <__assert_fail@plt+0x12c8>
   125c4:	b	125cc <__assert_fail@plt+0x1380>
   125c8:	mov	sl, #0
   125cc:	ldr	r0, [sp]
   125d0:	tst	r0, #2
   125d4:	beq	126ac <__assert_fail@plt+0x1460>
   125d8:	movw	r1, #29072	; 0x7190
   125dc:	mov	r0, #0
   125e0:	mov	r9, r7
   125e4:	movt	r1, #2
   125e8:	str	r0, [r7]
   125ec:	str	r0, [r1]
   125f0:	movw	r1, #29396	; 0x72d4
   125f4:	movt	r1, #2
   125f8:	ldr	r8, [r1]
   125fc:	str	r0, [r1]
   12600:	ldrd	r0, [r8]
   12604:	subs	r2, r0, #2
   12608:	sbcs	r2, r1, #0
   1260c:	bcc	12624 <__assert_fail@plt+0x13d8>
   12610:	subs	r2, r0, #1
   12614:	mov	r0, #1
   12618:	sbc	r3, r1, #0
   1261c:	mov	r1, #0
   12620:	bl	1283c <__assert_fail@plt+0x15f0>
   12624:	cmp	sl, #2
   12628:	bcc	1266c <__assert_fail@plt+0x1420>
   1262c:	add	r5, r8, #16
   12630:	sub	r6, sl, #1
   12634:	sub	r3, r5, #8
   12638:	ldm	r3, {r0, r1, r2, r3}
   1263c:	adds	r0, r0, #1
   12640:	adc	r1, r1, #0
   12644:	eor	r7, r0, r2
   12648:	eor	r4, r1, r3
   1264c:	orrs	r7, r7, r4
   12650:	beq	12660 <__assert_fail@plt+0x1414>
   12654:	subs	r2, r2, #1
   12658:	sbc	r3, r3, #0
   1265c:	bl	1283c <__assert_fail@plt+0x15f0>
   12660:	add	r5, r5, #16
   12664:	subs	r6, r6, #1
   12668:	bne	12634 <__assert_fail@plt+0x13e8>
   1266c:	add	r0, r8, sl, lsl #4
   12670:	mvn	r3, #0
   12674:	ldrd	r0, [r0, #-8]
   12678:	eor	r2, r1, r3
   1267c:	eor	r3, r0, r3
   12680:	orrs	r2, r3, r2
   12684:	beq	1269c <__assert_fail@plt+0x1450>
   12688:	adds	r0, r0, #1
   1268c:	mvn	r2, #0
   12690:	mvn	r3, #0
   12694:	adc	r1, r1, #0
   12698:	bl	1283c <__assert_fail@plt+0x15f0>
   1269c:	mov	r0, r8
   126a0:	bl	12b20 <__assert_fail@plt+0x18d4>
   126a4:	ldr	sl, [r9]
   126a8:	mov	r7, r9
   126ac:	movw	r0, #29396	; 0x72d4
   126b0:	add	r1, sl, #1
   126b4:	movt	r0, #2
   126b8:	str	r1, [r7]
   126bc:	lsl	r1, r1, #4
   126c0:	mov	r4, r0
   126c4:	ldr	r0, [r0]
   126c8:	bl	14fdc <__assert_fail@plt+0x3d90>
   126cc:	ldr	r1, [r7]
   126d0:	str	r0, [r4]
   126d4:	add	r0, r0, r1, lsl #4
   126d8:	mvn	r1, #0
   126dc:	str	r1, [r0, #-16]
   126e0:	str	r1, [r0, #-12]
   126e4:	str	r1, [r0, #-8]
   126e8:	str	r1, [r0, #-4]
   126ec:	sub	sp, fp, #28
   126f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f4:	movw	r0, #25697	; 0x6461
   126f8:	movw	r1, #25652	; 0x6434
   126fc:	movt	r0, #1
   12700:	movt	r1, #1
   12704:	b	12790 <__assert_fail@plt+0x1544>
   12708:	movw	r1, #25783	; 0x64b7
   1270c:	mov	r0, r4
   12710:	movt	r1, #1
   12714:	bl	11240 <strspn@plt>
   12718:	mov	r1, r0
   1271c:	mov	r0, r4
   12720:	bl	1535c <__assert_fail@plt+0x4110>
   12724:	ldr	r2, [sp]
   12728:	movw	r1, #25794	; 0x64c2
   1272c:	mov	r4, r0
   12730:	movw	r0, #25832	; 0x64e8
   12734:	movt	r0, #1
   12738:	movt	r1, #1
   1273c:	tst	r2, #4
   12740:	mov	r2, #5
   12744:	moveq	r1, r0
   12748:	mov	r0, #0
   1274c:	bl	11048 <dcgettext@plt>
   12750:	mov	r5, r0
   12754:	mov	r0, r4
   12758:	bl	149a0 <__assert_fail@plt+0x3754>
   1275c:	mov	r3, r0
   12760:	mov	r0, #0
   12764:	mov	r1, #0
   12768:	mov	r2, r5
   1276c:	bl	110c0 <error@plt>
   12770:	mov	r0, r4
   12774:	bl	12b20 <__assert_fail@plt+0x18d4>
   12778:	mov	r0, #1
   1277c:	bl	11348 <__assert_fail@plt+0xfc>
   12780:	movw	r0, #25632	; 0x6420
   12784:	movw	r1, #25600	; 0x6400
   12788:	movt	r0, #1
   1278c:	movt	r1, #1
   12790:	ldr	r2, [sp]
   12794:	tst	r2, #4
   12798:	moveq	r1, r0
   1279c:	b	12804 <__assert_fail@plt+0x15b8>
   127a0:	movw	r1, #25724	; 0x647c
   127a4:	movt	r1, #1
   127a8:	b	12804 <__assert_fail@plt+0x15b8>
   127ac:	ldr	r2, [sp]
   127b0:	movw	r0, #25896	; 0x6528
   127b4:	movw	r1, #25861	; 0x6505
   127b8:	movt	r0, #1
   127bc:	movt	r1, #1
   127c0:	tst	r2, #4
   127c4:	mov	r2, #5
   127c8:	moveq	r1, r0
   127cc:	mov	r0, #0
   127d0:	bl	11048 <dcgettext@plt>
   127d4:	mov	r4, r0
   127d8:	mov	r0, r9
   127dc:	bl	149a0 <__assert_fail@plt+0x3754>
   127e0:	mov	r3, r0
   127e4:	mov	r0, #0
   127e8:	mov	r1, #0
   127ec:	mov	r2, r4
   127f0:	bl	110c0 <error@plt>
   127f4:	mov	r0, #1
   127f8:	bl	11348 <__assert_fail@plt+0xfc>
   127fc:	movw	r1, #25758	; 0x649e
   12800:	movt	r1, #1
   12804:	mov	r0, #0
   12808:	mov	r2, #5
   1280c:	bl	11048 <dcgettext@plt>
   12810:	mov	r2, r0
   12814:	mov	r0, #0
   12818:	mov	r1, #0
   1281c:	bl	110c0 <error@plt>
   12820:	mov	r0, #1
   12824:	bl	11348 <__assert_fail@plt+0xfc>
   12828:	movw	r0, #25960	; 0x6568
   1282c:	movw	r1, #25919	; 0x653f
   12830:	movt	r0, #1
   12834:	movt	r1, #1
   12838:	b	12790 <__assert_fail@plt+0x1544>
   1283c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12840:	add	fp, sp, #24
   12844:	movw	r8, #29400	; 0x72d8
   12848:	mov	r7, r0
   1284c:	movw	r0, #29072	; 0x7190
   12850:	mov	r6, r1
   12854:	mov	r4, r3
   12858:	mov	r5, r2
   1285c:	movt	r0, #2
   12860:	movt	r8, #2
   12864:	ldr	r1, [r8]
   12868:	ldr	r0, [r0]
   1286c:	cmp	r1, r0
   12870:	bne	1289c <__assert_fail@plt+0x1650>
   12874:	movw	r9, #29396	; 0x72d4
   12878:	movw	r1, #29072	; 0x7190
   1287c:	mov	r2, #16
   12880:	movt	r9, #2
   12884:	movt	r1, #2
   12888:	ldr	r0, [r9]
   1288c:	bl	150a0 <__assert_fail@plt+0x3e54>
   12890:	ldr	r1, [r8]
   12894:	str	r0, [r9]
   12898:	b	128a8 <__assert_fail@plt+0x165c>
   1289c:	movw	r0, #29396	; 0x72d4
   128a0:	movt	r0, #2
   128a4:	ldr	r0, [r0]
   128a8:	str	r7, [r0, r1, lsl #4]!
   128ac:	str	r6, [r0, #4]
   128b0:	str	r5, [r0, #8]
   128b4:	str	r4, [r0, #12]
   128b8:	add	r0, r1, #1
   128bc:	str	r0, [r8]
   128c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   128c4:	ldr	r2, [r0]
   128c8:	ldr	r1, [r1]
   128cc:	mov	r0, #0
   128d0:	cmp	r2, r1
   128d4:	movwgt	r0, #1
   128d8:	mvnlt	r0, #0
   128dc:	bx	lr
   128e0:	movw	r1, #29076	; 0x7194
   128e4:	movt	r1, #2
   128e8:	str	r0, [r1]
   128ec:	bx	lr
   128f0:	movw	r1, #29080	; 0x7198
   128f4:	movt	r1, #2
   128f8:	strb	r0, [r1]
   128fc:	bx	lr
   12900:	push	{r4, r5, r6, sl, fp, lr}
   12904:	add	fp, sp, #16
   12908:	sub	sp, sp, #8
   1290c:	movw	r0, #29028	; 0x7164
   12910:	movt	r0, #2
   12914:	ldr	r0, [r0]
   12918:	bl	154fc <__assert_fail@plt+0x42b0>
   1291c:	cmp	r0, #0
   12920:	beq	12948 <__assert_fail@plt+0x16fc>
   12924:	movw	r0, #29080	; 0x7198
   12928:	movt	r0, #2
   1292c:	ldrb	r0, [r0]
   12930:	cmp	r0, #0
   12934:	beq	12968 <__assert_fail@plt+0x171c>
   12938:	bl	11138 <__errno_location@plt>
   1293c:	ldr	r0, [r0]
   12940:	cmp	r0, #32
   12944:	bne	12968 <__assert_fail@plt+0x171c>
   12948:	movw	r0, #29016	; 0x7158
   1294c:	movt	r0, #2
   12950:	ldr	r0, [r0]
   12954:	bl	154fc <__assert_fail@plt+0x42b0>
   12958:	cmp	r0, #0
   1295c:	subeq	sp, fp, #16
   12960:	popeq	{r4, r5, r6, sl, fp, pc}
   12964:	b	129d8 <__assert_fail@plt+0x178c>
   12968:	movw	r1, #25998	; 0x658e
   1296c:	mov	r0, #0
   12970:	mov	r2, #5
   12974:	movt	r1, #1
   12978:	bl	11048 <dcgettext@plt>
   1297c:	mov	r4, r0
   12980:	movw	r0, #29076	; 0x7194
   12984:	movt	r0, #2
   12988:	ldr	r6, [r0]
   1298c:	bl	11138 <__errno_location@plt>
   12990:	ldr	r5, [r0]
   12994:	cmp	r6, #0
   12998:	bne	129b4 <__assert_fail@plt+0x1768>
   1299c:	movw	r2, #26014	; 0x659e
   129a0:	mov	r0, #0
   129a4:	mov	r1, r5
   129a8:	mov	r3, r4
   129ac:	movt	r2, #1
   129b0:	b	129d4 <__assert_fail@plt+0x1788>
   129b4:	mov	r0, r6
   129b8:	bl	14760 <__assert_fail@plt+0x3514>
   129bc:	movw	r2, #26010	; 0x659a
   129c0:	mov	r3, r0
   129c4:	str	r4, [sp]
   129c8:	mov	r0, #0
   129cc:	mov	r1, r5
   129d0:	movt	r2, #1
   129d4:	bl	110c0 <error@plt>
   129d8:	movw	r0, #28932	; 0x7104
   129dc:	movt	r0, #2
   129e0:	ldr	r0, [r0]
   129e4:	bl	11000 <_exit@plt>
   129e8:	b	10fc4 <posix_fadvise64@plt>
   129ec:	cmp	r0, #0
   129f0:	bxeq	lr
   129f4:	push	{r4, sl, fp, lr}
   129f8:	add	fp, sp, #8
   129fc:	sub	sp, sp, #16
   12a00:	mov	r4, r1
   12a04:	bl	11174 <fileno@plt>
   12a08:	mov	r1, #0
   12a0c:	mov	r2, #0
   12a10:	mov	r3, #0
   12a14:	str	r1, [sp]
   12a18:	stmib	sp, {r1, r4}
   12a1c:	bl	10fc4 <posix_fadvise64@plt>
   12a20:	sub	sp, fp, #8
   12a24:	pop	{r4, sl, fp, pc}
   12a28:	push	{r4, r5, r6, sl, fp, lr}
   12a2c:	add	fp, sp, #16
   12a30:	sub	sp, sp, #8
   12a34:	mov	r4, r0
   12a38:	bl	11174 <fileno@plt>
   12a3c:	cmn	r0, #1
   12a40:	ble	12ab4 <__assert_fail@plt+0x1868>
   12a44:	mov	r0, r4
   12a48:	bl	110e4 <__freading@plt>
   12a4c:	cmp	r0, #0
   12a50:	beq	12a7c <__assert_fail@plt+0x1830>
   12a54:	mov	r0, r4
   12a58:	bl	11174 <fileno@plt>
   12a5c:	mov	r1, #1
   12a60:	mov	r2, #0
   12a64:	mov	r3, #0
   12a68:	str	r1, [sp]
   12a6c:	bl	11078 <lseek64@plt>
   12a70:	and	r0, r0, r1
   12a74:	cmn	r0, #1
   12a78:	beq	12ab4 <__assert_fail@plt+0x1868>
   12a7c:	mov	r0, r4
   12a80:	bl	12ac4 <__assert_fail@plt+0x1878>
   12a84:	cmp	r0, #0
   12a88:	beq	12ab4 <__assert_fail@plt+0x1868>
   12a8c:	bl	11138 <__errno_location@plt>
   12a90:	ldr	r6, [r0]
   12a94:	mov	r5, r0
   12a98:	mov	r0, r4
   12a9c:	bl	11198 <fclose@plt>
   12aa0:	cmp	r6, #0
   12aa4:	strne	r6, [r5]
   12aa8:	mvnne	r0, #0
   12aac:	sub	sp, fp, #16
   12ab0:	pop	{r4, r5, r6, sl, fp, pc}
   12ab4:	mov	r0, r4
   12ab8:	sub	sp, fp, #16
   12abc:	pop	{r4, r5, r6, sl, fp, lr}
   12ac0:	b	11198 <fclose@plt>
   12ac4:	push	{r4, sl, fp, lr}
   12ac8:	add	fp, sp, #8
   12acc:	sub	sp, sp, #8
   12ad0:	mov	r4, r0
   12ad4:	cmp	r0, #0
   12ad8:	beq	12af4 <__assert_fail@plt+0x18a8>
   12adc:	mov	r0, r4
   12ae0:	bl	110e4 <__freading@plt>
   12ae4:	cmp	r0, #0
   12ae8:	ldrbne	r0, [r4, #1]
   12aec:	tstne	r0, #1
   12af0:	bne	12b04 <__assert_fail@plt+0x18b8>
   12af4:	mov	r0, r4
   12af8:	sub	sp, fp, #8
   12afc:	pop	{r4, sl, fp, lr}
   12b00:	b	10fd0 <fflush@plt>
   12b04:	mov	r0, #1
   12b08:	mov	r2, #0
   12b0c:	mov	r3, #0
   12b10:	str	r0, [sp]
   12b14:	mov	r0, r4
   12b18:	bl	12b48 <__assert_fail@plt+0x18fc>
   12b1c:	b	12af4 <__assert_fail@plt+0x18a8>
   12b20:	push	{r4, r5, r6, sl, fp, lr}
   12b24:	add	fp, sp, #16
   12b28:	mov	r4, r0
   12b2c:	bl	11138 <__errno_location@plt>
   12b30:	ldr	r6, [r0]
   12b34:	mov	r5, r0
   12b38:	mov	r0, r4
   12b3c:	bl	10fe8 <free@plt>
   12b40:	str	r6, [r5]
   12b44:	pop	{r4, r5, r6, sl, fp, pc}
   12b48:	push	{r4, r5, r6, r7, fp, lr}
   12b4c:	add	fp, sp, #16
   12b50:	sub	sp, sp, #8
   12b54:	mov	r4, r0
   12b58:	ldr	r0, [r0, #4]
   12b5c:	mov	r5, r3
   12b60:	mov	r6, r2
   12b64:	ldr	r1, [r4, #8]
   12b68:	cmp	r1, r0
   12b6c:	bne	12b88 <__assert_fail@plt+0x193c>
   12b70:	ldrd	r0, [r4, #16]
   12b74:	cmp	r1, r0
   12b78:	bne	12b88 <__assert_fail@plt+0x193c>
   12b7c:	ldr	r0, [r4, #36]	; 0x24
   12b80:	cmp	r0, #0
   12b84:	beq	12ba0 <__assert_fail@plt+0x1954>
   12b88:	mov	r0, r4
   12b8c:	mov	r2, r6
   12b90:	mov	r3, r5
   12b94:	sub	sp, fp, #16
   12b98:	pop	{r4, r5, r6, r7, fp, lr}
   12b9c:	b	111a4 <fseeko64@plt>
   12ba0:	ldr	r7, [fp, #8]
   12ba4:	mov	r0, r4
   12ba8:	bl	11174 <fileno@plt>
   12bac:	mov	r2, r6
   12bb0:	mov	r3, r5
   12bb4:	str	r7, [sp]
   12bb8:	bl	11078 <lseek64@plt>
   12bbc:	and	r2, r0, r1
   12bc0:	cmn	r2, #1
   12bc4:	beq	12be0 <__assert_fail@plt+0x1994>
   12bc8:	strd	r0, [r4, #80]	; 0x50
   12bcc:	ldr	r0, [r4]
   12bd0:	bic	r0, r0, #16
   12bd4:	str	r0, [r4]
   12bd8:	mov	r0, #0
   12bdc:	b	12be4 <__assert_fail@plt+0x1998>
   12be0:	mvn	r0, #0
   12be4:	sub	sp, fp, #16
   12be8:	pop	{r4, r5, r6, r7, fp, pc}
   12bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bf0:	add	fp, sp, #28
   12bf4:	sub	sp, sp, #44	; 0x2c
   12bf8:	mov	r6, r0
   12bfc:	ldr	r0, [r0]
   12c00:	mov	r8, r2
   12c04:	mov	r4, r1
   12c08:	str	r3, [sp, #28]
   12c0c:	cmp	r0, #0
   12c10:	beq	12c1c <__assert_fail@plt+0x19d0>
   12c14:	ldr	sl, [r4]
   12c18:	b	12c38 <__assert_fail@plt+0x19ec>
   12c1c:	cmp	r3, #64	; 0x40
   12c20:	mov	sl, r3
   12c24:	movcs	sl, #64	; 0x40
   12c28:	mov	r0, sl
   12c2c:	bl	1547c <__assert_fail@plt+0x4230>
   12c30:	cmp	r0, #0
   12c34:	beq	12c78 <__assert_fail@plt+0x1a2c>
   12c38:	cmp	sl, r8
   12c3c:	str	r4, [sp, #16]
   12c40:	str	r6, [sp, #12]
   12c44:	str	r0, [sp, #32]
   12c48:	bcc	12c64 <__assert_fail@plt+0x1a18>
   12c4c:	ldr	r6, [sp, #28]
   12c50:	sub	r9, sl, r8
   12c54:	cmp	sl, r6
   12c58:	bcc	12c84 <__assert_fail@plt+0x1a38>
   12c5c:	cmp	r9, #0
   12c60:	bne	12c84 <__assert_fail@plt+0x1a38>
   12c64:	ldr	r0, [sp, #12]
   12c68:	ldr	r1, [sp, #32]
   12c6c:	str	r1, [r0]
   12c70:	ldr	r0, [sp, #16]
   12c74:	str	sl, [r0]
   12c78:	mvn	r0, #0
   12c7c:	sub	sp, fp, #28
   12c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c84:	ldr	r0, [fp, #12]
   12c88:	ldr	r1, [fp, #8]
   12c8c:	ldr	r7, [fp, #16]
   12c90:	str	r8, [sp, #8]
   12c94:	cmn	r0, #1
   12c98:	mov	r2, r0
   12c9c:	moveq	r2, r1
   12ca0:	cmn	r1, #1
   12ca4:	moveq	r2, r0
   12ca8:	moveq	r1, r0
   12cac:	ldr	r0, [sp, #32]
   12cb0:	str	r2, [sp, #20]
   12cb4:	str	r1, [sp, #24]
   12cb8:	add	r5, r0, r8
   12cbc:	eor	r0, r8, #-2147483648	; 0x80000000
   12cc0:	str	r0, [sp, #4]
   12cc4:	mov	r0, r7
   12cc8:	sub	r1, fp, #32
   12ccc:	bl	1557c <__assert_fail@plt+0x4330>
   12cd0:	mov	r4, r0
   12cd4:	cmp	r0, #0
   12cd8:	beq	12d1c <__assert_fail@plt+0x1ad0>
   12cdc:	ldr	r1, [sp, #24]
   12ce0:	ldr	r8, [fp, #-32]	; 0xffffffe0
   12ce4:	mov	r7, #0
   12ce8:	cmn	r1, #1
   12cec:	beq	12d14 <__assert_fail@plt+0x1ac8>
   12cf0:	ldr	r2, [sp, #20]
   12cf4:	mov	r0, r4
   12cf8:	mov	r3, r8
   12cfc:	bl	12eb4 <__assert_fail@plt+0x1c68>
   12d00:	cmp	r0, #0
   12d04:	rsbne	r1, r4, #1
   12d08:	movne	r7, #1
   12d0c:	addne	r8, r1, r0
   12d10:	strne	r8, [fp, #-32]	; 0xffffffe0
   12d14:	ldr	r2, [sp, #36]	; 0x24
   12d18:	b	12d5c <__assert_fail@plt+0x1b10>
   12d1c:	mov	r0, r7
   12d20:	bl	1103c <getc_unlocked@plt>
   12d24:	cmn	r0, #1
   12d28:	beq	12e9c <__assert_fail@plt+0x1c50>
   12d2c:	mov	r2, r0
   12d30:	ldr	r0, [sp, #20]
   12d34:	ldr	r1, [sp, #24]
   12d38:	mov	r8, #1
   12d3c:	str	r8, [fp, #-32]	; 0xffffffe0
   12d40:	sub	r0, r2, r0
   12d44:	sub	r1, r2, r1
   12d48:	clz	r0, r0
   12d4c:	clz	r1, r1
   12d50:	lsr	r0, r0, #5
   12d54:	lsr	r1, r1, #5
   12d58:	orr	r7, r1, r0
   12d5c:	cmp	sl, r6
   12d60:	str	r2, [sp, #36]	; 0x24
   12d64:	addcc	r3, r8, #1
   12d68:	cmpcc	r9, r3
   12d6c:	bcc	12d78 <__assert_fail@plt+0x1b2c>
   12d70:	mov	r8, r7
   12d74:	b	12df4 <__assert_fail@plt+0x1ba8>
   12d78:	ldr	r0, [sp, #32]
   12d7c:	lsl	r1, sl, #1
   12d80:	cmp	sl, #64	; 0x40
   12d84:	mov	r8, r7
   12d88:	addcc	r1, sl, #64	; 0x40
   12d8c:	sub	r7, r5, r0
   12d90:	sub	r2, r1, r7
   12d94:	cmp	r2, r3
   12d98:	mov	r2, r6
   12d9c:	addcc	r1, r3, r7
   12da0:	cmp	r1, r6
   12da4:	mov	r6, r1
   12da8:	movhi	r6, r2
   12dac:	cmp	sl, r1
   12db0:	ldr	r1, [sp, #8]
   12db4:	movcs	r6, r2
   12db8:	sub	r1, r6, r1
   12dbc:	cmn	r1, #1
   12dc0:	bgt	12dd0 <__assert_fail@plt+0x1b84>
   12dc4:	ldr	r6, [sp, #4]
   12dc8:	cmp	sl, r6
   12dcc:	beq	12eac <__assert_fail@plt+0x1c60>
   12dd0:	mov	r1, r6
   12dd4:	bl	154ac <__assert_fail@plt+0x4260>
   12dd8:	cmp	r0, #0
   12ddc:	beq	12c64 <__assert_fail@plt+0x1a18>
   12de0:	sub	r9, r6, r7
   12de4:	mov	sl, r6
   12de8:	ldr	r6, [sp, #28]
   12dec:	add	r5, r0, r7
   12df0:	str	r0, [sp, #32]
   12df4:	ldr	r7, [fp, #16]
   12df8:	cmp	r9, #2
   12dfc:	bcc	12e40 <__assert_fail@plt+0x1bf4>
   12e00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12e04:	sub	r6, r9, #1
   12e08:	cmp	r0, r6
   12e0c:	movcc	r6, r0
   12e10:	cmp	r4, #0
   12e14:	beq	12e2c <__assert_fail@plt+0x1be0>
   12e18:	mov	r0, r5
   12e1c:	mov	r1, r4
   12e20:	mov	r2, r6
   12e24:	bl	1100c <memcpy@plt>
   12e28:	b	12e34 <__assert_fail@plt+0x1be8>
   12e2c:	ldr	r0, [sp, #36]	; 0x24
   12e30:	strb	r0, [r5]
   12e34:	sub	r9, r9, r6
   12e38:	add	r5, r5, r6
   12e3c:	ldr	r6, [sp, #28]
   12e40:	cmp	r4, #0
   12e44:	beq	12e5c <__assert_fail@plt+0x1c10>
   12e48:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12e4c:	mov	r0, r7
   12e50:	bl	155b0 <__assert_fail@plt+0x4364>
   12e54:	cmp	r0, #0
   12e58:	bne	12c64 <__assert_fail@plt+0x1a18>
   12e5c:	cmp	r8, #0
   12e60:	beq	12cc4 <__assert_fail@plt+0x1a78>
   12e64:	ldr	r2, [sp, #32]
   12e68:	ldr	r0, [sp, #8]
   12e6c:	mov	r1, #0
   12e70:	add	r0, r2, r0
   12e74:	strb	r1, [r5], -r0
   12e78:	ldr	r0, [sp, #12]
   12e7c:	cmp	r5, #0
   12e80:	mvneq	r5, #0
   12e84:	str	r2, [r0]
   12e88:	ldr	r0, [sp, #16]
   12e8c:	str	sl, [r0]
   12e90:	mov	r0, r5
   12e94:	sub	sp, fp, #28
   12e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e9c:	ldr	r0, [sp, #32]
   12ea0:	cmp	r5, r0
   12ea4:	bne	12e64 <__assert_fail@plt+0x1c18>
   12ea8:	b	12c64 <__assert_fail@plt+0x1a18>
   12eac:	ldr	sl, [sp, #4]
   12eb0:	b	12c64 <__assert_fail@plt+0x1a18>
   12eb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12eb8:	add	fp, sp, #24
   12ebc:	uxtb	ip, r2
   12ec0:	uxtb	r1, r1
   12ec4:	cmp	r1, ip
   12ec8:	bne	12ed8 <__assert_fail@plt+0x1c8c>
   12ecc:	mov	r2, r3
   12ed0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12ed4:	b	1118c <memchr@plt>
   12ed8:	cmp	r3, #0
   12edc:	beq	12f04 <__assert_fail@plt+0x1cb8>
   12ee0:	ands	r2, r0, #3
   12ee4:	beq	12f04 <__assert_fail@plt+0x1cb8>
   12ee8:	ldrb	r2, [r0]
   12eec:	cmp	r1, r2
   12ef0:	cmpne	ip, r2
   12ef4:	beq	12f98 <__assert_fail@plt+0x1d4c>
   12ef8:	subs	r3, r3, #1
   12efc:	add	r0, r0, #1
   12f00:	bne	12ee0 <__assert_fail@plt+0x1c94>
   12f04:	cmp	r3, #4
   12f08:	bcc	12f70 <__assert_fail@plt+0x1d24>
   12f0c:	orr	r2, ip, ip, lsl #8
   12f10:	movw	r4, #32896	; 0x8080
   12f14:	movw	r9, #65279	; 0xfeff
   12f18:	orr	lr, r2, r2, lsl #16
   12f1c:	orr	r2, r1, r1, lsl #8
   12f20:	movt	r4, #32896	; 0x8080
   12f24:	movt	r9, #65278	; 0xfefe
   12f28:	orr	r8, r2, r2, lsl #16
   12f2c:	mov	r6, r0
   12f30:	ldr	r7, [r6], #4
   12f34:	eor	r2, r7, lr
   12f38:	eor	r5, r2, r4
   12f3c:	add	r2, r2, r9
   12f40:	and	r2, r2, r5
   12f44:	eor	r5, r7, r8
   12f48:	eor	r7, r5, r4
   12f4c:	add	r5, r5, r9
   12f50:	and	r5, r5, r7
   12f54:	orr	r2, r5, r2
   12f58:	ands	r2, r2, r4
   12f5c:	subeq	r3, r3, #4
   12f60:	moveq	r0, r6
   12f64:	bne	12f70 <__assert_fail@plt+0x1d24>
   12f68:	cmp	r3, #3
   12f6c:	bhi	12f2c <__assert_fail@plt+0x1ce0>
   12f70:	cmp	r3, #0
   12f74:	beq	12f94 <__assert_fail@plt+0x1d48>
   12f78:	ldrb	r2, [r0]
   12f7c:	cmp	r1, r2
   12f80:	cmpne	ip, r2
   12f84:	beq	12f98 <__assert_fail@plt+0x1d4c>
   12f88:	add	r0, r0, #1
   12f8c:	subs	r3, r3, #1
   12f90:	bne	12f78 <__assert_fail@plt+0x1d2c>
   12f94:	mov	r0, #0
   12f98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f9c:	push	{r4, r5, fp, lr}
   12fa0:	add	fp, sp, #8
   12fa4:	cmp	r0, #0
   12fa8:	beq	1303c <__assert_fail@plt+0x1df0>
   12fac:	mov	r1, #47	; 0x2f
   12fb0:	mov	r4, r0
   12fb4:	bl	111bc <strrchr@plt>
   12fb8:	cmp	r0, #0
   12fbc:	mov	r5, r4
   12fc0:	addne	r5, r0, #1
   12fc4:	sub	r0, r5, r4
   12fc8:	cmp	r0, #7
   12fcc:	blt	13020 <__assert_fail@plt+0x1dd4>
   12fd0:	movw	r1, #26073	; 0x65d9
   12fd4:	sub	r0, r5, #7
   12fd8:	mov	r2, #7
   12fdc:	movt	r1, #1
   12fe0:	bl	11210 <strncmp@plt>
   12fe4:	cmp	r0, #0
   12fe8:	bne	13020 <__assert_fail@plt+0x1dd4>
   12fec:	movw	r1, #26081	; 0x65e1
   12ff0:	mov	r0, r5
   12ff4:	mov	r2, #3
   12ff8:	movt	r1, #1
   12ffc:	bl	11210 <strncmp@plt>
   13000:	cmp	r0, #0
   13004:	beq	13010 <__assert_fail@plt+0x1dc4>
   13008:	mov	r4, r5
   1300c:	b	13020 <__assert_fail@plt+0x1dd4>
   13010:	movw	r0, #29000	; 0x7148
   13014:	add	r4, r5, #3
   13018:	movt	r0, #2
   1301c:	str	r4, [r0]
   13020:	movw	r0, #29004	; 0x714c
   13024:	movt	r0, #2
   13028:	str	r4, [r0]
   1302c:	movw	r0, #29084	; 0x719c
   13030:	movt	r0, #2
   13034:	str	r4, [r0]
   13038:	pop	{r4, r5, fp, pc}
   1303c:	movw	r0, #29016	; 0x7158
   13040:	movt	r0, #2
   13044:	ldr	r1, [r0]
   13048:	movw	r0, #26017	; 0x65a1
   1304c:	movt	r0, #1
   13050:	bl	11204 <fputs@plt>
   13054:	bl	1121c <abort@plt>
   13058:	push	{r4, r5, r6, sl, fp, lr}
   1305c:	add	fp, sp, #16
   13060:	mov	r4, r0
   13064:	movw	r0, #29088	; 0x71a0
   13068:	movt	r0, #2
   1306c:	cmp	r4, #0
   13070:	moveq	r4, r0
   13074:	bl	11138 <__errno_location@plt>
   13078:	ldr	r6, [r0]
   1307c:	mov	r5, r0
   13080:	mov	r0, r4
   13084:	mov	r1, #48	; 0x30
   13088:	bl	152e4 <__assert_fail@plt+0x4098>
   1308c:	str	r6, [r5]
   13090:	pop	{r4, r5, r6, sl, fp, pc}
   13094:	movw	r1, #29088	; 0x71a0
   13098:	cmp	r0, #0
   1309c:	movt	r1, #2
   130a0:	movne	r1, r0
   130a4:	ldr	r0, [r1]
   130a8:	bx	lr
   130ac:	movw	r2, #29088	; 0x71a0
   130b0:	cmp	r0, #0
   130b4:	movt	r2, #2
   130b8:	movne	r2, r0
   130bc:	str	r1, [r2]
   130c0:	bx	lr
   130c4:	movw	r3, #29088	; 0x71a0
   130c8:	cmp	r0, #0
   130cc:	movt	r3, #2
   130d0:	movne	r3, r0
   130d4:	ubfx	r0, r1, #5, #3
   130d8:	and	r1, r1, #31
   130dc:	add	r0, r3, r0, lsl #2
   130e0:	ldr	r3, [r0, #8]
   130e4:	eor	r2, r2, r3, lsr r1
   130e8:	and	r2, r2, #1
   130ec:	eor	r2, r3, r2, lsl r1
   130f0:	str	r2, [r0, #8]
   130f4:	mov	r0, #1
   130f8:	and	r0, r0, r3, lsr r1
   130fc:	bx	lr
   13100:	movw	r2, #29088	; 0x71a0
   13104:	cmp	r0, #0
   13108:	movt	r2, #2
   1310c:	movne	r2, r0
   13110:	ldr	r0, [r2, #4]
   13114:	str	r1, [r2, #4]
   13118:	bx	lr
   1311c:	movw	r3, #29088	; 0x71a0
   13120:	cmp	r0, #0
   13124:	movt	r3, #2
   13128:	movne	r3, r0
   1312c:	cmp	r1, #0
   13130:	mov	r0, #10
   13134:	cmpne	r2, #0
   13138:	str	r0, [r3]
   1313c:	bne	1314c <__assert_fail@plt+0x1f00>
   13140:	push	{fp, lr}
   13144:	mov	fp, sp
   13148:	bl	1121c <abort@plt>
   1314c:	str	r1, [r3, #40]	; 0x28
   13150:	str	r2, [r3, #44]	; 0x2c
   13154:	bx	lr
   13158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1315c:	add	fp, sp, #28
   13160:	sub	sp, sp, #20
   13164:	mov	r7, r0
   13168:	ldr	r0, [fp, #8]
   1316c:	movw	r5, #29088	; 0x71a0
   13170:	mov	r8, r3
   13174:	mov	r9, r2
   13178:	mov	sl, r1
   1317c:	movt	r5, #2
   13180:	cmp	r0, #0
   13184:	movne	r5, r0
   13188:	bl	11138 <__errno_location@plt>
   1318c:	mov	r4, r0
   13190:	ldm	r5, {r0, r1}
   13194:	ldr	r2, [r5, #40]	; 0x28
   13198:	ldr	r3, [r5, #44]	; 0x2c
   1319c:	add	r5, r5, #8
   131a0:	ldr	r6, [r4]
   131a4:	stm	sp, {r0, r1, r5}
   131a8:	str	r2, [sp, #12]
   131ac:	str	r3, [sp, #16]
   131b0:	mov	r0, r7
   131b4:	mov	r1, sl
   131b8:	mov	r2, r9
   131bc:	mov	r3, r8
   131c0:	bl	131d0 <__assert_fail@plt+0x1f84>
   131c4:	str	r6, [r4]
   131c8:	sub	sp, fp, #28
   131cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131d4:	add	fp, sp, #28
   131d8:	sub	sp, sp, #156	; 0x9c
   131dc:	str	r0, [fp, #-56]	; 0xffffffc8
   131e0:	ldr	r0, [fp, #12]
   131e4:	mov	r4, r1
   131e8:	str	r3, [sp, #80]	; 0x50
   131ec:	str	r2, [fp, #-84]	; 0xffffffac
   131f0:	and	r1, r0, #4
   131f4:	str	r1, [sp, #24]
   131f8:	and	r1, r0, #1
   131fc:	str	r1, [sp, #28]
   13200:	ubfx	r7, r0, #1, #1
   13204:	bl	11084 <__ctype_get_mb_cur_max@plt>
   13208:	str	r0, [sp, #32]
   1320c:	ldr	r0, [fp, #24]
   13210:	ldr	r9, [fp, #8]
   13214:	mov	r2, #0
   13218:	mov	r1, #0
   1321c:	mov	r5, #0
   13220:	str	r2, [sp, #52]	; 0x34
   13224:	mov	r2, #1
   13228:	str	r0, [sp, #72]	; 0x48
   1322c:	ldr	r0, [fp, #20]
   13230:	str	r0, [sp, #64]	; 0x40
   13234:	mov	r0, #0
   13238:	str	r0, [sp, #92]	; 0x5c
   1323c:	mov	r0, #0
   13240:	str	r0, [fp, #-76]	; 0xffffffb4
   13244:	mov	r0, #0
   13248:	cmp	r9, #10
   1324c:	str	r1, [sp, #68]	; 0x44
   13250:	bhi	14250 <__assert_fail@plt+0x3004>
   13254:	add	r1, pc, #28
   13258:	ldr	ip, [fp, #-84]	; 0xffffffac
   1325c:	ldr	lr, [sp, #80]	; 0x50
   13260:	mov	r6, r4
   13264:	mov	r8, #0
   13268:	mov	r3, #1
   1326c:	mov	sl, #0
   13270:	mov	r4, r2
   13274:	ldr	pc, [r1, r9, lsl #2]
   13278:	andeq	r3, r1, r8, asr #6
   1327c:	andeq	r3, r1, r4, lsl #7
   13280:	andeq	r3, r1, r8, asr r3
   13284:	andeq	r3, r1, r0, asr #6
   13288:	andeq	r3, r1, r8, ror r3
   1328c:	ldrdeq	r3, [r1], -r0
   13290:	andeq	r3, r1, r8, ror #6
   13294:	andeq	r3, r1, r0, lsr r4
   13298:	andeq	r3, r1, r4, lsr #5
   1329c:	andeq	r3, r1, r4, lsr #5
   132a0:	andeq	r3, r1, ip, asr #5
   132a4:	movw	r0, #26163	; 0x6633
   132a8:	mov	r1, r9
   132ac:	movt	r0, #1
   132b0:	bl	149b8 <__assert_fail@plt+0x376c>
   132b4:	str	r0, [sp, #64]	; 0x40
   132b8:	movw	r0, #26165	; 0x6635
   132bc:	mov	r1, r9
   132c0:	movt	r0, #1
   132c4:	bl	149b8 <__assert_fail@plt+0x376c>
   132c8:	str	r0, [sp, #72]	; 0x48
   132cc:	mov	r8, #0
   132d0:	mov	sl, r7
   132d4:	tst	r7, #1
   132d8:	str	r5, [fp, #-48]	; 0xffffffd0
   132dc:	bne	13318 <__assert_fail@plt+0x20cc>
   132e0:	ldr	r0, [sp, #64]	; 0x40
   132e4:	ldrb	r0, [r0]
   132e8:	cmp	r0, #0
   132ec:	beq	13318 <__assert_fail@plt+0x20cc>
   132f0:	ldr	r1, [sp, #64]	; 0x40
   132f4:	mov	r8, #0
   132f8:	add	r1, r1, #1
   132fc:	cmp	r8, r6
   13300:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13304:	strbcc	r0, [r2, r8]
   13308:	ldrb	r0, [r1, r8]
   1330c:	add	r8, r8, #1
   13310:	cmp	r0, #0
   13314:	bne	132fc <__assert_fail@plt+0x20b0>
   13318:	ldr	r7, [sp, #72]	; 0x48
   1331c:	mov	r0, r7
   13320:	bl	11120 <strlen@plt>
   13324:	ldr	ip, [fp, #-84]	; 0xffffffac
   13328:	ldr	lr, [sp, #80]	; 0x50
   1332c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13330:	str	r0, [fp, #-76]	; 0xffffffb4
   13334:	str	r7, [sp, #92]	; 0x5c
   13338:	mov	r3, #1
   1333c:	b	13430 <__assert_fail@plt+0x21e4>
   13340:	mov	r0, #1
   13344:	b	13384 <__assert_fail@plt+0x2138>
   13348:	mov	r9, #0
   1334c:	mov	r8, #0
   13350:	mov	r3, r0
   13354:	b	1342c <__assert_fail@plt+0x21e0>
   13358:	tst	r7, #1
   1335c:	bne	13384 <__assert_fail@plt+0x2138>
   13360:	mov	r3, r0
   13364:	b	133ac <__assert_fail@plt+0x2160>
   13368:	mov	r0, #1
   1336c:	mov	r8, #0
   13370:	mov	r9, #5
   13374:	b	133e4 <__assert_fail@plt+0x2198>
   13378:	mov	r3, #1
   1337c:	tst	r7, #1
   13380:	beq	133ac <__assert_fail@plt+0x2160>
   13384:	mov	r1, #1
   13388:	mov	r8, #0
   1338c:	mov	r9, #2
   13390:	mov	r3, r0
   13394:	mov	sl, #1
   13398:	str	r1, [fp, #-76]	; 0xffffffb4
   1339c:	movw	r1, #26165	; 0x6635
   133a0:	movt	r1, #1
   133a4:	str	r1, [sp, #92]	; 0x5c
   133a8:	b	13430 <__assert_fail@plt+0x21e4>
   133ac:	cmp	r6, #0
   133b0:	mov	r8, #1
   133b4:	mov	r9, #2
   133b8:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   133bc:	movne	r0, #39	; 0x27
   133c0:	strbne	r0, [r1]
   133c4:	movw	r0, #26165	; 0x6635
   133c8:	movt	r0, #1
   133cc:	b	13420 <__assert_fail@plt+0x21d4>
   133d0:	mov	r9, #5
   133d4:	tst	r7, #1
   133d8:	beq	13400 <__assert_fail@plt+0x21b4>
   133dc:	mov	r0, #1
   133e0:	mov	r8, #0
   133e4:	str	r0, [fp, #-76]	; 0xffffffb4
   133e8:	movw	r0, #26161	; 0x6631
   133ec:	mov	r3, #1
   133f0:	mov	sl, #1
   133f4:	movt	r0, #1
   133f8:	str	r0, [sp, #92]	; 0x5c
   133fc:	b	13430 <__assert_fail@plt+0x21e4>
   13400:	cmp	r6, #0
   13404:	mov	r8, #1
   13408:	mov	r3, #1
   1340c:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13410:	movne	r0, #34	; 0x22
   13414:	strbne	r0, [r1]
   13418:	movw	r0, #26161	; 0x6631
   1341c:	movt	r0, #1
   13420:	str	r0, [sp, #92]	; 0x5c
   13424:	mov	r0, #1
   13428:	str	r0, [fp, #-76]	; 0xffffffb4
   1342c:	mov	sl, #0
   13430:	ldr	r0, [fp, #16]
   13434:	mov	r7, #0
   13438:	str	r9, [fp, #-64]	; 0xffffffc0
   1343c:	str	sl, [fp, #-72]	; 0xffffffb8
   13440:	str	r3, [sp, #84]	; 0x54
   13444:	cmp	r0, #0
   13448:	movwne	r0, #1
   1344c:	and	r0, r0, sl
   13450:	str	r0, [fp, #-88]	; 0xffffffa8
   13454:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13458:	cmp	r0, #0
   1345c:	movwne	r0, #1
   13460:	subs	r2, r9, #2
   13464:	and	r1, r0, sl
   13468:	str	r2, [fp, #-80]	; 0xffffffb0
   1346c:	and	r1, r3, r1
   13470:	str	r1, [sp, #44]	; 0x2c
   13474:	clz	r1, r2
   13478:	lsr	r1, r1, #5
   1347c:	and	r1, r1, sl
   13480:	str	r1, [sp, #56]	; 0x38
   13484:	mov	r1, r2
   13488:	eor	r2, sl, #1
   1348c:	movwne	r1, #1
   13490:	str	r2, [sp, #88]	; 0x58
   13494:	orr	r2, r1, r2
   13498:	and	r1, r1, r3
   1349c:	and	r0, r0, r1
   134a0:	str	r2, [sp, #60]	; 0x3c
   134a4:	str	r1, [fp, #-68]	; 0xffffffbc
   134a8:	str	r0, [fp, #-60]	; 0xffffffc4
   134ac:	eor	r0, r3, #1
   134b0:	str	r0, [sp, #48]	; 0x30
   134b4:	cmn	lr, #1
   134b8:	beq	134c8 <__assert_fail@plt+0x227c>
   134bc:	cmp	r7, lr
   134c0:	bne	134d4 <__assert_fail@plt+0x2288>
   134c4:	b	14080 <__assert_fail@plt+0x2e34>
   134c8:	ldrb	r0, [ip, r7]
   134cc:	cmp	r0, #0
   134d0:	beq	14088 <__assert_fail@plt+0x2e3c>
   134d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   134d8:	mov	r9, #0
   134dc:	str	r5, [fp, #-48]	; 0xffffffd0
   134e0:	str	r6, [fp, #-52]	; 0xffffffcc
   134e4:	cmp	r0, #0
   134e8:	beq	13528 <__assert_fail@plt+0x22dc>
   134ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   134f0:	mov	r5, r4
   134f4:	add	r4, r7, r0
   134f8:	cmp	r0, #2
   134fc:	bcc	13518 <__assert_fail@plt+0x22cc>
   13500:	cmn	lr, #1
   13504:	bne	13518 <__assert_fail@plt+0x22cc>
   13508:	mov	r0, ip
   1350c:	bl	11120 <strlen@plt>
   13510:	ldr	ip, [fp, #-84]	; 0xffffffac
   13514:	mov	lr, r0
   13518:	cmp	r4, lr
   1351c:	bls	13530 <__assert_fail@plt+0x22e4>
   13520:	mov	r6, #0
   13524:	b	13570 <__assert_fail@plt+0x2324>
   13528:	mov	r6, #0
   1352c:	b	13574 <__assert_fail@plt+0x2328>
   13530:	ldr	r1, [sp, #92]	; 0x5c
   13534:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13538:	add	r0, ip, r7
   1353c:	mov	r4, lr
   13540:	bl	11030 <memcmp@plt>
   13544:	ldr	r2, [sp, #88]	; 0x58
   13548:	cmp	r0, #0
   1354c:	mov	r1, r0
   13550:	movwne	r1, #1
   13554:	orr	r1, r1, r2
   13558:	tst	r1, #1
   1355c:	beq	1411c <__assert_fail@plt+0x2ed0>
   13560:	ldr	ip, [fp, #-84]	; 0xffffffac
   13564:	clz	r0, r0
   13568:	mov	lr, r4
   1356c:	lsr	r6, r0, #5
   13570:	mov	r4, r5
   13574:	ldrb	r5, [ip, r7]
   13578:	cmp	r5, #126	; 0x7e
   1357c:	bhi	13944 <__assert_fail@plt+0x26f8>
   13580:	add	r3, pc, #16
   13584:	mov	sl, #1
   13588:	mov	r2, #110	; 0x6e
   1358c:	mov	r0, #97	; 0x61
   13590:	mov	r1, #0
   13594:	ldr	pc, [r3, r5, lsl #2]
   13598:	andeq	r3, r1, r8, lsr #16
   1359c:	andeq	r3, r1, r4, asr #18
   135a0:	andeq	r3, r1, r4, asr #18
   135a4:	andeq	r3, r1, r4, asr #18
   135a8:	andeq	r3, r1, r4, asr #18
   135ac:	andeq	r3, r1, r4, asr #18
   135b0:	andeq	r3, r1, r4, asr #18
   135b4:	andeq	r3, r1, r8, ror #19
   135b8:	andeq	r3, r1, r8, lsl #16
   135bc:	andeq	r3, r1, r0, lsl #16
   135c0:	andeq	r3, r1, r4, lsl r8
   135c4:	muleq	r1, r8, r8
   135c8:	strdeq	r3, [r1], -r8
   135cc:	andeq	r3, r1, r0, lsl r8
   135d0:	andeq	r3, r1, r4, asr #18
   135d4:	andeq	r3, r1, r4, asr #18
   135d8:	andeq	r3, r1, r4, asr #18
   135dc:	andeq	r3, r1, r4, asr #18
   135e0:	andeq	r3, r1, r4, asr #18
   135e4:	andeq	r3, r1, r4, asr #18
   135e8:	andeq	r3, r1, r4, asr #18
   135ec:	andeq	r3, r1, r4, asr #18
   135f0:	andeq	r3, r1, r4, asr #18
   135f4:	andeq	r3, r1, r4, asr #18
   135f8:	andeq	r3, r1, r4, asr #18
   135fc:	andeq	r3, r1, r4, asr #18
   13600:	andeq	r3, r1, r4, asr #18
   13604:	andeq	r3, r1, r4, asr #18
   13608:	andeq	r3, r1, r4, asr #18
   1360c:	andeq	r3, r1, r4, asr #18
   13610:	andeq	r3, r1, r4, asr #18
   13614:	andeq	r3, r1, r4, asr #18
   13618:	andeq	r3, r1, r8, lsr #19
   1361c:	andeq	r3, r1, ip, lsr #19
   13620:	andeq	r3, r1, ip, lsr #19
   13624:	andeq	r3, r1, r8, lsr #15
   13628:	andeq	r3, r1, ip, lsr #19
   1362c:	muleq	r1, r4, r7
   13630:	andeq	r3, r1, ip, lsr #19
   13634:	andeq	r3, r1, r0, lsr #17
   13638:	andeq	r3, r1, ip, lsr #19
   1363c:	andeq	r3, r1, ip, lsr #19
   13640:	andeq	r3, r1, ip, lsr #19
   13644:	muleq	r1, r4, r7
   13648:	muleq	r1, r4, r7
   1364c:	muleq	r1, r4, r7
   13650:	muleq	r1, r4, r7
   13654:	muleq	r1, r4, r7
   13658:	muleq	r1, r4, r7
   1365c:	muleq	r1, r4, r7
   13660:	muleq	r1, r4, r7
   13664:	muleq	r1, r4, r7
   13668:	muleq	r1, r4, r7
   1366c:	muleq	r1, r4, r7
   13670:	muleq	r1, r4, r7
   13674:	muleq	r1, r4, r7
   13678:	muleq	r1, r4, r7
   1367c:	muleq	r1, r4, r7
   13680:	muleq	r1, r4, r7
   13684:	andeq	r3, r1, ip, lsr #19
   13688:	andeq	r3, r1, ip, lsr #19
   1368c:	andeq	r3, r1, ip, lsr #19
   13690:	andeq	r3, r1, ip, lsr #19
   13694:	andeq	r3, r1, ip, ror #16
   13698:	andeq	r3, r1, r4, asr #18
   1369c:	muleq	r1, r4, r7
   136a0:	muleq	r1, r4, r7
   136a4:	muleq	r1, r4, r7
   136a8:	muleq	r1, r4, r7
   136ac:	muleq	r1, r4, r7
   136b0:	muleq	r1, r4, r7
   136b4:	muleq	r1, r4, r7
   136b8:	muleq	r1, r4, r7
   136bc:	muleq	r1, r4, r7
   136c0:	muleq	r1, r4, r7
   136c4:	muleq	r1, r4, r7
   136c8:	muleq	r1, r4, r7
   136cc:	muleq	r1, r4, r7
   136d0:	muleq	r1, r4, r7
   136d4:	muleq	r1, r4, r7
   136d8:	muleq	r1, r4, r7
   136dc:	muleq	r1, r4, r7
   136e0:	muleq	r1, r4, r7
   136e4:	muleq	r1, r4, r7
   136e8:	muleq	r1, r4, r7
   136ec:	muleq	r1, r4, r7
   136f0:	muleq	r1, r4, r7
   136f4:	muleq	r1, r4, r7
   136f8:	muleq	r1, r4, r7
   136fc:	muleq	r1, r4, r7
   13700:	muleq	r1, r4, r7
   13704:	andeq	r3, r1, ip, lsr #19
   13708:	ldrdeq	r3, [r1], -r4
   1370c:	muleq	r1, r4, r7
   13710:	andeq	r3, r1, ip, lsr #19
   13714:	muleq	r1, r4, r7
   13718:	andeq	r3, r1, ip, lsr #19
   1371c:	muleq	r1, r4, r7
   13720:	muleq	r1, r4, r7
   13724:	muleq	r1, r4, r7
   13728:	muleq	r1, r4, r7
   1372c:	muleq	r1, r4, r7
   13730:	muleq	r1, r4, r7
   13734:	muleq	r1, r4, r7
   13738:	muleq	r1, r4, r7
   1373c:	muleq	r1, r4, r7
   13740:	muleq	r1, r4, r7
   13744:	muleq	r1, r4, r7
   13748:	muleq	r1, r4, r7
   1374c:	muleq	r1, r4, r7
   13750:	muleq	r1, r4, r7
   13754:	muleq	r1, r4, r7
   13758:	muleq	r1, r4, r7
   1375c:	muleq	r1, r4, r7
   13760:	muleq	r1, r4, r7
   13764:	muleq	r1, r4, r7
   13768:	muleq	r1, r4, r7
   1376c:	muleq	r1, r4, r7
   13770:	muleq	r1, r4, r7
   13774:	muleq	r1, r4, r7
   13778:	muleq	r1, r4, r7
   1377c:	muleq	r1, r4, r7
   13780:	muleq	r1, r4, r7
   13784:			; <UNDEFINED> instruction: 0x000137b8
   13788:	andeq	r3, r1, ip, lsr #19
   1378c:			; <UNDEFINED> instruction: 0x000137b8
   13790:	andeq	r3, r1, r8, lsr #15
   13794:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13798:	cmp	r0, #0
   1379c:	beq	139fc <__assert_fail@plt+0x27b0>
   137a0:	ldr	r0, [fp, #16]
   137a4:	b	13a00 <__assert_fail@plt+0x27b4>
   137a8:	mov	sl, #0
   137ac:	cmp	r7, #0
   137b0:	bne	13c18 <__assert_fail@plt+0x29cc>
   137b4:	b	139a8 <__assert_fail@plt+0x275c>
   137b8:	mov	sl, #0
   137bc:	cmn	lr, #1
   137c0:	beq	13994 <__assert_fail@plt+0x2748>
   137c4:	cmp	r7, #0
   137c8:	cmpeq	lr, #1
   137cc:	bne	13c18 <__assert_fail@plt+0x29cc>
   137d0:	b	139a8 <__assert_fail@plt+0x275c>
   137d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   137d8:	cmp	r0, #2
   137dc:	bne	139cc <__assert_fail@plt+0x2780>
   137e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   137e4:	tst	r0, #1
   137e8:	bne	14138 <__assert_fail@plt+0x2eec>
   137ec:	mov	r9, #0
   137f0:	mov	r0, #92	; 0x5c
   137f4:	b	139e0 <__assert_fail@plt+0x2794>
   137f8:	mov	r0, #102	; 0x66
   137fc:	b	139e8 <__assert_fail@plt+0x279c>
   13800:	mov	r2, #116	; 0x74
   13804:	b	13814 <__assert_fail@plt+0x25c8>
   13808:	mov	r0, #98	; 0x62
   1380c:	b	139e8 <__assert_fail@plt+0x279c>
   13810:	mov	r2, #114	; 0x72
   13814:	ldr	r0, [sp, #60]	; 0x3c
   13818:	tst	r0, #1
   1381c:	mov	r0, r2
   13820:	bne	139e8 <__assert_fail@plt+0x279c>
   13824:	b	14138 <__assert_fail@plt+0x2eec>
   13828:	ldr	r0, [sp, #84]	; 0x54
   1382c:	tst	r0, #1
   13830:	beq	13ad4 <__assert_fail@plt+0x2888>
   13834:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13838:	tst	r0, #1
   1383c:	bne	14240 <__assert_fail@plt+0x2ff4>
   13840:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13844:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13848:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1384c:	cmp	r0, #2
   13850:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13854:	movwne	r0, #1
   13858:	orr	r0, r0, r3
   1385c:	tst	r0, #1
   13860:	beq	13f54 <__assert_fail@plt+0x2d08>
   13864:	mov	r0, r8
   13868:	b	13f94 <__assert_fail@plt+0x2d48>
   1386c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13870:	mov	r9, #0
   13874:	mov	r5, #63	; 0x3f
   13878:	cmp	r0, #5
   1387c:	beq	13c20 <__assert_fail@plt+0x29d4>
   13880:	cmp	r0, #2
   13884:	bne	13ce0 <__assert_fail@plt+0x2a94>
   13888:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1388c:	tst	r0, #1
   13890:	beq	13ce4 <__assert_fail@plt+0x2a98>
   13894:	b	14138 <__assert_fail@plt+0x2eec>
   13898:	mov	r0, #118	; 0x76
   1389c:	b	139e8 <__assert_fail@plt+0x279c>
   138a0:	mov	r0, #1
   138a4:	mov	r5, #39	; 0x27
   138a8:	str	r0, [sp, #52]	; 0x34
   138ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   138b0:	cmp	r0, #2
   138b4:	bne	1393c <__assert_fail@plt+0x26f0>
   138b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   138bc:	tst	r0, #1
   138c0:	bne	14138 <__assert_fail@plt+0x2eec>
   138c4:	ldr	r3, [sp, #68]	; 0x44
   138c8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   138cc:	mov	r9, #0
   138d0:	clz	r1, r2
   138d4:	cmp	r3, #0
   138d8:	mov	r0, r3
   138dc:	movwne	r0, #1
   138e0:	lsr	r1, r1, #5
   138e4:	orrs	r0, r0, r1
   138e8:	moveq	r3, r2
   138ec:	moveq	r2, r0
   138f0:	cmp	r8, r2
   138f4:	str	r3, [sp, #68]	; 0x44
   138f8:	str	r2, [fp, #-52]	; 0xffffffcc
   138fc:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   13900:	movcc	r0, #39	; 0x27
   13904:	strbcc	r0, [r1, r8]
   13908:	add	r0, r8, #1
   1390c:	cmp	r0, r2
   13910:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13914:	movcc	r1, #92	; 0x5c
   13918:	strbcc	r1, [r3, r0]
   1391c:	add	r0, r8, #2
   13920:	add	r8, r8, #3
   13924:	cmp	r0, r2
   13928:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1392c:	movcc	r1, #39	; 0x27
   13930:	strbcc	r1, [r2, r0]
   13934:	mov	r0, #0
   13938:	str	r0, [fp, #-48]	; 0xffffffd0
   1393c:	mov	sl, #1
   13940:	b	13794 <__assert_fail@plt+0x2548>
   13944:	ldr	r0, [sp, #32]
   13948:	cmp	r0, #1
   1394c:	bne	13af8 <__assert_fail@plt+0x28ac>
   13950:	str	lr, [sp, #80]	; 0x50
   13954:	bl	11108 <__ctype_b_loc@plt>
   13958:	ldr	r0, [r0]
   1395c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13960:	mov	r1, #1
   13964:	add	r0, r0, r5, lsl #1
   13968:	ldrb	r0, [r0, #1]
   1396c:	ubfx	sl, r0, #6, #1
   13970:	ldr	r0, [sp, #48]	; 0x30
   13974:	mov	r2, r1
   13978:	cmp	r1, #1
   1397c:	orr	r0, sl, r0
   13980:	bhi	13cec <__assert_fail@plt+0x2aa0>
   13984:	tst	r0, #1
   13988:	beq	13cec <__assert_fail@plt+0x2aa0>
   1398c:	ldr	lr, [sp, #80]	; 0x50
   13990:	b	13794 <__assert_fail@plt+0x2548>
   13994:	cmp	r7, #0
   13998:	bne	13c14 <__assert_fail@plt+0x29c8>
   1399c:	ldrb	r0, [ip, #1]
   139a0:	cmp	r0, #0
   139a4:	bne	13c14 <__assert_fail@plt+0x29c8>
   139a8:	mov	r1, #1
   139ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   139b0:	cmp	r0, #2
   139b4:	bne	139c4 <__assert_fail@plt+0x2778>
   139b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   139bc:	tst	r0, #1
   139c0:	bne	14138 <__assert_fail@plt+0x2eec>
   139c4:	mov	sl, r1
   139c8:	b	13794 <__assert_fail@plt+0x2548>
   139cc:	ldr	r1, [sp, #44]	; 0x2c
   139d0:	mov	r9, #0
   139d4:	mov	r0, #92	; 0x5c
   139d8:	cmp	r1, #0
   139dc:	beq	139e8 <__assert_fail@plt+0x279c>
   139e0:	mov	sl, #0
   139e4:	b	13f00 <__assert_fail@plt+0x2cb4>
   139e8:	ldr	r1, [sp, #84]	; 0x54
   139ec:	mov	sl, #0
   139f0:	mov	r9, #0
   139f4:	tst	r1, #1
   139f8:	bne	13a34 <__assert_fail@plt+0x27e8>
   139fc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13a00:	cmp	r0, #0
   13a04:	mov	r0, r5
   13a08:	beq	13a2c <__assert_fail@plt+0x27e0>
   13a0c:	ldr	r1, [fp, #16]
   13a10:	ubfx	r0, r5, #5, #3
   13a14:	mov	r2, #1
   13a18:	ldr	r0, [r1, r0, lsl #2]
   13a1c:	and	r1, r5, #31
   13a20:	tst	r0, r2, lsl r1
   13a24:	mov	r0, r5
   13a28:	bne	13a34 <__assert_fail@plt+0x27e8>
   13a2c:	cmp	r6, #0
   13a30:	beq	13f00 <__assert_fail@plt+0x2cb4>
   13a34:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13a38:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13a3c:	tst	r1, #1
   13a40:	bne	14114 <__assert_fail@plt+0x2ec8>
   13a44:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13a48:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13a4c:	cmp	r1, #2
   13a50:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13a54:	movwne	r1, #1
   13a58:	orr	r1, r1, r5
   13a5c:	tst	r1, #1
   13a60:	bne	13aa4 <__assert_fail@plt+0x2858>
   13a64:	cmp	r8, r6
   13a68:	mov	r5, #1
   13a6c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13a70:	movcc	r1, #39	; 0x27
   13a74:	strbcc	r1, [r2, r8]
   13a78:	add	r1, r8, #1
   13a7c:	cmp	r1, r6
   13a80:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13a84:	movcc	r2, #36	; 0x24
   13a88:	strbcc	r2, [r3, r1]
   13a8c:	add	r1, r8, #2
   13a90:	add	r8, r8, #3
   13a94:	cmp	r1, r6
   13a98:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13a9c:	movcc	r2, #39	; 0x27
   13aa0:	strbcc	r2, [r3, r1]
   13aa4:	cmp	r8, r6
   13aa8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13aac:	movcc	r1, #92	; 0x5c
   13ab0:	strbcc	r1, [r2, r8]
   13ab4:	add	r8, r8, #1
   13ab8:	cmp	r8, r6
   13abc:	and	r4, r4, sl
   13ac0:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   13ac4:	strbcc	r0, [r1, r8]
   13ac8:	add	r8, r8, #1
   13acc:	add	r7, r7, #1
   13ad0:	b	134b4 <__assert_fail@plt+0x2268>
   13ad4:	ldr	r0, [sp, #28]
   13ad8:	mov	sl, #0
   13adc:	mov	r9, #0
   13ae0:	mov	r5, #0
   13ae4:	cmp	r0, #0
   13ae8:	beq	139fc <__assert_fail@plt+0x27b0>
   13aec:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13af0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13af4:	b	13acc <__assert_fail@plt+0x2880>
   13af8:	mov	r0, #0
   13afc:	cmn	lr, #1
   13b00:	str	r6, [sp, #76]	; 0x4c
   13b04:	str	r4, [sp, #20]
   13b08:	str	r0, [fp, #-36]	; 0xffffffdc
   13b0c:	str	r0, [fp, #-40]	; 0xffffffd8
   13b10:	bne	13b24 <__assert_fail@plt+0x28d8>
   13b14:	mov	r0, ip
   13b18:	bl	11120 <strlen@plt>
   13b1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b20:	mov	lr, r0
   13b24:	add	r0, ip, r7
   13b28:	mov	sl, #1
   13b2c:	mov	r6, #0
   13b30:	sub	r4, fp, #40	; 0x28
   13b34:	str	lr, [sp, #80]	; 0x50
   13b38:	str	r0, [sp, #36]	; 0x24
   13b3c:	str	r6, [sp, #40]	; 0x28
   13b40:	add	r6, r6, r7
   13b44:	sub	r0, fp, #44	; 0x2c
   13b48:	mov	r3, r4
   13b4c:	add	r1, ip, r6
   13b50:	sub	r2, lr, r6
   13b54:	bl	1572c <__assert_fail@plt+0x44e0>
   13b58:	cmp	r0, #0
   13b5c:	beq	14068 <__assert_fail@plt+0x2e1c>
   13b60:	cmn	r0, #1
   13b64:	beq	14028 <__assert_fail@plt+0x2ddc>
   13b68:	ldr	lr, [sp, #80]	; 0x50
   13b6c:	cmn	r0, #2
   13b70:	beq	14030 <__assert_fail@plt+0x2de4>
   13b74:	ldr	r2, [sp, #56]	; 0x38
   13b78:	cmp	r0, #2
   13b7c:	mov	r1, #0
   13b80:	movwcc	r1, #1
   13b84:	eor	r2, r2, #1
   13b88:	orrs	r1, r2, r1
   13b8c:	bne	13bd8 <__assert_fail@plt+0x298c>
   13b90:	ldr	r1, [sp, #40]	; 0x28
   13b94:	ldr	r2, [sp, #36]	; 0x24
   13b98:	add	ip, r2, r1
   13b9c:	mov	r2, #1
   13ba0:	ldrb	r3, [ip, r2]
   13ba4:	sub	r6, r3, #94	; 0x5e
   13ba8:	cmp	r6, #30
   13bac:	bhi	13bc0 <__assert_fail@plt+0x2974>
   13bb0:	mov	r4, #1
   13bb4:	mov	r1, #1073741829	; 0x40000005
   13bb8:	tst	r1, r4, lsl r6
   13bbc:	bne	14134 <__assert_fail@plt+0x2ee8>
   13bc0:	sub	r3, r3, #91	; 0x5b
   13bc4:	cmp	r3, #2
   13bc8:	bcc	14134 <__assert_fail@plt+0x2ee8>
   13bcc:	add	r2, r2, #1
   13bd0:	cmp	r2, r0
   13bd4:	bcc	13ba0 <__assert_fail@plt+0x2954>
   13bd8:	ldr	r6, [sp, #40]	; 0x28
   13bdc:	add	r6, r0, r6
   13be0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13be4:	bl	1106c <iswprint@plt>
   13be8:	cmp	r0, #0
   13bec:	sub	r4, fp, #40	; 0x28
   13bf0:	movwne	r0, #1
   13bf4:	and	sl, sl, r0
   13bf8:	mov	r0, r4
   13bfc:	bl	11018 <mbsinit@plt>
   13c00:	ldr	lr, [sp, #80]	; 0x50
   13c04:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c08:	cmp	r0, #0
   13c0c:	beq	13b3c <__assert_fail@plt+0x28f0>
   13c10:	b	14070 <__assert_fail@plt+0x2e24>
   13c14:	mvn	lr, #0
   13c18:	mov	r9, #0
   13c1c:	b	13794 <__assert_fail@plt+0x2548>
   13c20:	ldr	r0, [sp, #24]
   13c24:	cmp	r0, #0
   13c28:	beq	13ce0 <__assert_fail@plt+0x2a94>
   13c2c:	add	r0, r7, #2
   13c30:	cmp	r0, lr
   13c34:	bcs	13ce0 <__assert_fail@plt+0x2a94>
   13c38:	add	r1, ip, r7
   13c3c:	ldrb	r1, [r1, #1]
   13c40:	cmp	r1, #63	; 0x3f
   13c44:	bne	13ce0 <__assert_fail@plt+0x2a94>
   13c48:	ldrb	r5, [ip, r0]
   13c4c:	sub	r1, r5, #33	; 0x21
   13c50:	cmp	r1, #29
   13c54:	bhi	13ce0 <__assert_fail@plt+0x2a94>
   13c58:	movw	r3, #20929	; 0x51c1
   13c5c:	mov	r2, #1
   13c60:	movt	r3, #14336	; 0x3800
   13c64:	tst	r3, r2, lsl r1
   13c68:	beq	13ce0 <__assert_fail@plt+0x2a94>
   13c6c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13c70:	tst	r1, #1
   13c74:	bne	14248 <__assert_fail@plt+0x2ffc>
   13c78:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13c7c:	mov	r7, r0
   13c80:	cmp	r8, r1
   13c84:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13c88:	movcc	r1, #63	; 0x3f
   13c8c:	strbcc	r1, [r2, r8]
   13c90:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13c94:	add	r1, r8, #1
   13c98:	cmp	r1, r2
   13c9c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13ca0:	movcc	r2, #34	; 0x22
   13ca4:	strbcc	r2, [r3, r1]
   13ca8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13cac:	add	r1, r8, #2
   13cb0:	cmp	r1, r2
   13cb4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13cb8:	movcc	r2, #34	; 0x22
   13cbc:	strbcc	r2, [r3, r1]
   13cc0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13cc4:	add	r1, r8, #3
   13cc8:	add	r8, r8, #4
   13ccc:	cmp	r1, r2
   13cd0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13cd4:	movcc	r2, #63	; 0x3f
   13cd8:	strbcc	r2, [r3, r1]
   13cdc:	b	13ce4 <__assert_fail@plt+0x2a98>
   13ce0:	mov	r5, #63	; 0x3f
   13ce4:	mov	sl, #0
   13ce8:	b	13794 <__assert_fail@plt+0x2548>
   13cec:	str	r0, [sp, #40]	; 0x28
   13cf0:	add	r0, r2, r7
   13cf4:	str	r6, [sp, #76]	; 0x4c
   13cf8:	add	r1, r7, #1
   13cfc:	ldr	lr, [sp, #80]	; 0x50
   13d00:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13d04:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13d08:	mov	r3, #0
   13d0c:	str	r0, [sp, #36]	; 0x24
   13d10:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13d14:	b	13da8 <__assert_fail@plt+0x2b5c>
   13d18:	str	r0, [sp, #76]	; 0x4c
   13d1c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13d20:	cmp	r9, #0
   13d24:	movwne	r9, #1
   13d28:	mvn	r7, r0
   13d2c:	orr	r7, r7, r9
   13d30:	tst	r7, #1
   13d34:	bne	13d84 <__assert_fail@plt+0x2b38>
   13d38:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13d3c:	cmp	r8, r6
   13d40:	bcs	13d58 <__assert_fail@plt+0x2b0c>
   13d44:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13d48:	mov	r2, r4
   13d4c:	mov	r4, #39	; 0x27
   13d50:	strb	r4, [r7, r8]
   13d54:	mov	r4, r2
   13d58:	add	r7, r8, #1
   13d5c:	cmp	r7, r6
   13d60:	bcs	13d78 <__assert_fail@plt+0x2b2c>
   13d64:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13d68:	mov	r2, r4
   13d6c:	mov	r4, #39	; 0x27
   13d70:	strb	r4, [r0, r7]
   13d74:	mov	r4, r2
   13d78:	add	r8, r8, #2
   13d7c:	mov	r0, #0
   13d80:	b	13d8c <__assert_fail@plt+0x2b40>
   13d84:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13d88:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13d8c:	cmp	r8, r6
   13d90:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13d94:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13d98:	strbcc	r5, [r2, r8]
   13d9c:	add	r8, r8, #1
   13da0:	ldrb	r5, [ip, r1]
   13da4:	add	r1, r1, #1
   13da8:	ldr	r2, [sp, #40]	; 0x28
   13dac:	tst	r2, #1
   13db0:	beq	13dec <__assert_fail@plt+0x2ba0>
   13db4:	ldr	r2, [sp, #76]	; 0x4c
   13db8:	str	r0, [fp, #-48]	; 0xffffffd0
   13dbc:	tst	r2, #1
   13dc0:	beq	13de4 <__assert_fail@plt+0x2b98>
   13dc4:	cmp	r8, r6
   13dc8:	bcs	13de0 <__assert_fail@plt+0x2b94>
   13dcc:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13dd0:	mov	r2, r4
   13dd4:	mov	r4, #92	; 0x5c
   13dd8:	strb	r4, [r6, r8]
   13ddc:	mov	r4, r2
   13de0:	add	r8, r8, #1
   13de4:	mov	r0, #0
   13de8:	b	13ee0 <__assert_fail@plt+0x2c94>
   13dec:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13df0:	tst	r2, #1
   13df4:	bne	14140 <__assert_fail@plt+0x2ef4>
   13df8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13dfc:	cmp	r7, #2
   13e00:	movwne	r3, #1
   13e04:	orr	r3, r3, r0
   13e08:	tst	r3, #1
   13e0c:	bne	13e68 <__assert_fail@plt+0x2c1c>
   13e10:	cmp	r8, r6
   13e14:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13e18:	movcc	r3, #39	; 0x27
   13e1c:	strbcc	r3, [r2, r8]
   13e20:	add	r3, r8, #1
   13e24:	cmp	r3, r6
   13e28:	bcs	13e40 <__assert_fail@plt+0x2bf4>
   13e2c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13e30:	mov	r7, r4
   13e34:	mov	r4, #36	; 0x24
   13e38:	strb	r4, [r2, r3]
   13e3c:	mov	r4, r7
   13e40:	add	r3, r8, #2
   13e44:	cmp	r3, r6
   13e48:	bcs	13e60 <__assert_fail@plt+0x2c14>
   13e4c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13e50:	mov	r7, r4
   13e54:	mov	r4, #39	; 0x27
   13e58:	strb	r4, [r2, r3]
   13e5c:	mov	r4, r7
   13e60:	add	r8, r8, #3
   13e64:	mov	r0, #1
   13e68:	cmp	r8, r6
   13e6c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13e70:	movcc	r3, #92	; 0x5c
   13e74:	strbcc	r3, [r2, r8]
   13e78:	add	r3, r8, #1
   13e7c:	cmp	r3, r6
   13e80:	bcs	13ea0 <__assert_fail@plt+0x2c54>
   13e84:	mov	r2, r4
   13e88:	and	r7, r5, #192	; 0xc0
   13e8c:	mov	r4, #48	; 0x30
   13e90:	orr	r7, r4, r7, lsr #6
   13e94:	mov	r4, r2
   13e98:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13e9c:	strb	r7, [r2, r3]
   13ea0:	add	r3, r8, #2
   13ea4:	cmp	r3, r6
   13ea8:	bcs	13ec8 <__assert_fail@plt+0x2c7c>
   13eac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13eb0:	mov	r6, r4
   13eb4:	lsr	r7, r5, #3
   13eb8:	mov	r4, #6
   13ebc:	bfi	r7, r4, #3, #29
   13ec0:	mov	r4, r6
   13ec4:	strb	r7, [r2, r3]
   13ec8:	str	r0, [fp, #-48]	; 0xffffffd0
   13ecc:	ldr	r0, [sp, #76]	; 0x4c
   13ed0:	mov	r3, #6
   13ed4:	add	r8, r8, #3
   13ed8:	bfi	r5, r3, #3, #29
   13edc:	mov	r3, #1
   13ee0:	ldr	r2, [sp, #36]	; 0x24
   13ee4:	and	r9, r3, #1
   13ee8:	cmp	r2, r1
   13eec:	bhi	13d18 <__assert_fail@plt+0x2acc>
   13ef0:	cmp	r9, #0
   13ef4:	sub	r7, r1, #1
   13ef8:	mov	r0, r5
   13efc:	movwne	r9, #1
   13f00:	cmp	r9, #0
   13f04:	bne	13f48 <__assert_fail@plt+0x2cfc>
   13f08:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13f0c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13f10:	tst	r5, #1
   13f14:	beq	13ab8 <__assert_fail@plt+0x286c>
   13f18:	cmp	r8, r6
   13f1c:	mov	r5, #0
   13f20:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13f24:	movcc	r1, #39	; 0x27
   13f28:	strbcc	r1, [r2, r8]
   13f2c:	add	r1, r8, #1
   13f30:	add	r8, r8, #2
   13f34:	cmp	r1, r6
   13f38:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13f3c:	movcc	r2, #39	; 0x27
   13f40:	strbcc	r2, [r3, r1]
   13f44:	b	13ab8 <__assert_fail@plt+0x286c>
   13f48:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13f4c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13f50:	b	13ab8 <__assert_fail@plt+0x286c>
   13f54:	cmp	r8, r1
   13f58:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13f5c:	movcc	r0, #39	; 0x27
   13f60:	strbcc	r0, [r2, r8]
   13f64:	add	r0, r8, #1
   13f68:	cmp	r0, r1
   13f6c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13f70:	movcc	r2, #36	; 0x24
   13f74:	strbcc	r2, [r3, r0]
   13f78:	add	r0, r8, #2
   13f7c:	cmp	r0, r1
   13f80:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13f84:	movcc	r2, #39	; 0x27
   13f88:	strbcc	r2, [r3, r0]
   13f8c:	add	r0, r8, #3
   13f90:	mov	r3, #1
   13f94:	cmp	r0, r1
   13f98:	add	r8, r0, #1
   13f9c:	str	r3, [fp, #-48]	; 0xffffffd0
   13fa0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13fa4:	movcc	r1, #92	; 0x5c
   13fa8:	strbcc	r1, [r2, r0]
   13fac:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13fb0:	cmp	r1, #2
   13fb4:	beq	14018 <__assert_fail@plt+0x2dcc>
   13fb8:	add	r1, r7, #1
   13fbc:	mov	sl, #0
   13fc0:	mov	r9, #1
   13fc4:	mov	r5, #48	; 0x30
   13fc8:	cmp	r1, lr
   13fcc:	bcs	13794 <__assert_fail@plt+0x2548>
   13fd0:	ldrb	r1, [ip, r1]
   13fd4:	sub	r1, r1, #48	; 0x30
   13fd8:	uxtb	r1, r1
   13fdc:	cmp	r1, #9
   13fe0:	bhi	13794 <__assert_fail@plt+0x2548>
   13fe4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13fe8:	cmp	r8, r1
   13fec:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13ff0:	movcc	r1, #48	; 0x30
   13ff4:	strbcc	r1, [r2, r8]
   13ff8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13ffc:	add	r1, r0, #2
   14000:	add	r8, r0, #3
   14004:	cmp	r1, r2
   14008:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1400c:	movcc	r2, #48	; 0x30
   14010:	strbcc	r2, [r3, r1]
   14014:	b	13794 <__assert_fail@plt+0x2548>
   14018:	mov	r0, #48	; 0x30
   1401c:	mov	r9, #1
   14020:	mov	sl, #0
   14024:	b	13a2c <__assert_fail@plt+0x27e0>
   14028:	mov	sl, #0
   1402c:	b	14068 <__assert_fail@plt+0x2e1c>
   14030:	mov	sl, #0
   14034:	cmp	lr, r6
   14038:	bls	14068 <__assert_fail@plt+0x2e1c>
   1403c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14040:	ldr	r6, [sp, #40]	; 0x28
   14044:	ldr	r0, [sp, #36]	; 0x24
   14048:	ldrb	r0, [r0, r6]
   1404c:	cmp	r0, #0
   14050:	beq	14070 <__assert_fail@plt+0x2e24>
   14054:	add	r6, r6, #1
   14058:	add	r0, r7, r6
   1405c:	cmp	r0, lr
   14060:	bcc	14044 <__assert_fail@plt+0x2df8>
   14064:	b	14070 <__assert_fail@plt+0x2e24>
   14068:	ldr	ip, [fp, #-84]	; 0xffffffac
   1406c:	ldr	r6, [sp, #40]	; 0x28
   14070:	mov	r1, r6
   14074:	ldr	r4, [sp, #20]
   14078:	ldr	r6, [sp, #76]	; 0x4c
   1407c:	b	13970 <__assert_fail@plt+0x2724>
   14080:	mov	lr, r7
   14084:	b	1408c <__assert_fail@plt+0x2e40>
   14088:	mvn	lr, #0
   1408c:	ldr	r9, [fp, #-64]	; 0xffffffc0
   14090:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14094:	eor	r0, r9, #2
   14098:	orr	r0, r0, r8
   1409c:	clz	r0, r0
   140a0:	lsr	r0, r0, #5
   140a4:	tst	r1, r0
   140a8:	bne	141a4 <__assert_fail@plt+0x2f58>
   140ac:	mov	r0, r1
   140b0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   140b4:	cmp	r9, #2
   140b8:	movwne	r1, #1
   140bc:	orr	r0, r0, r1
   140c0:	tst	r0, #1
   140c4:	bne	141e4 <__assert_fail@plt+0x2f98>
   140c8:	ldr	r0, [sp, #52]	; 0x34
   140cc:	ldr	r1, [sp, #68]	; 0x44
   140d0:	str	lr, [sp, #80]	; 0x50
   140d4:	eor	r0, r0, #1
   140d8:	tst	r0, #1
   140dc:	bne	141e4 <__assert_fail@plt+0x2f98>
   140e0:	tst	r4, #1
   140e4:	bne	141ac <__assert_fail@plt+0x2f60>
   140e8:	mov	r7, #0
   140ec:	cmp	r1, #0
   140f0:	beq	141dc <__assert_fail@plt+0x2f90>
   140f4:	ldr	r0, [sp, #84]	; 0x54
   140f8:	mov	r3, #0
   140fc:	cmp	r6, #0
   14100:	mov	r2, #0
   14104:	mov	r4, r1
   14108:	str	r3, [fp, #-72]	; 0xffffffb8
   1410c:	beq	13248 <__assert_fail@plt+0x1ffc>
   14110:	b	141e4 <__assert_fail@plt+0x2f98>
   14114:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14118:	b	14140 <__assert_fail@plt+0x2ef4>
   1411c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14120:	mov	r2, #1
   14124:	mov	lr, r4
   14128:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1412c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14130:	b	14144 <__assert_fail@plt+0x2ef8>
   14134:	ldr	ip, [fp, #-84]	; 0xffffffac
   14138:	mov	r7, #2
   1413c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14140:	ldr	r2, [sp, #84]	; 0x54
   14144:	mov	r0, #0
   14148:	ldr	r1, [fp, #12]
   1414c:	tst	r2, #1
   14150:	mov	r2, r7
   14154:	mov	r3, lr
   14158:	str	r0, [sp, #8]
   1415c:	ldr	r0, [sp, #64]	; 0x40
   14160:	movwne	r2, #4
   14164:	cmp	r7, #2
   14168:	movne	r2, r7
   1416c:	str	r2, [sp]
   14170:	mov	r2, ip
   14174:	bic	r1, r1, #2
   14178:	str	r0, [sp, #12]
   1417c:	ldr	r0, [sp, #72]	; 0x48
   14180:	str	r1, [sp, #4]
   14184:	mov	r1, r6
   14188:	str	r0, [sp, #16]
   1418c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14190:	bl	131d0 <__assert_fail@plt+0x1f84>
   14194:	mov	r8, r0
   14198:	mov	r0, r8
   1419c:	sub	sp, fp, #28
   141a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141a4:	mov	r7, #2
   141a8:	b	14140 <__assert_fail@plt+0x2ef4>
   141ac:	mov	r0, #5
   141b0:	ldr	r2, [fp, #-84]	; 0xffffffac
   141b4:	ldr	r3, [sp, #80]	; 0x50
   141b8:	str	r0, [sp]
   141bc:	ldr	r0, [fp, #12]
   141c0:	str	r0, [sp, #4]
   141c4:	ldr	r0, [fp, #16]
   141c8:	str	r0, [sp, #8]
   141cc:	ldr	r0, [sp, #64]	; 0x40
   141d0:	str	r0, [sp, #12]
   141d4:	ldr	r0, [sp, #72]	; 0x48
   141d8:	b	14188 <__assert_fail@plt+0x2f3c>
   141dc:	mov	r0, #0
   141e0:	str	r0, [fp, #-72]	; 0xffffffb8
   141e4:	ldr	r1, [sp, #92]	; 0x5c
   141e8:	cmp	r1, #0
   141ec:	beq	1422c <__assert_fail@plt+0x2fe0>
   141f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   141f4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   141f8:	tst	r0, #1
   141fc:	bne	14230 <__assert_fail@plt+0x2fe4>
   14200:	ldrb	r0, [r1]
   14204:	cmp	r0, #0
   14208:	beq	14230 <__assert_fail@plt+0x2fe4>
   1420c:	add	r1, r1, #1
   14210:	cmp	r8, r6
   14214:	strbcc	r0, [r2, r8]
   14218:	add	r8, r8, #1
   1421c:	ldrb	r0, [r1], #1
   14220:	cmp	r0, #0
   14224:	bne	14210 <__assert_fail@plt+0x2fc4>
   14228:	b	14230 <__assert_fail@plt+0x2fe4>
   1422c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14230:	cmp	r8, r6
   14234:	movcc	r0, #0
   14238:	strbcc	r0, [r2, r8]
   1423c:	b	14198 <__assert_fail@plt+0x2f4c>
   14240:	mov	r2, #1
   14244:	b	14128 <__assert_fail@plt+0x2edc>
   14248:	mov	r7, #5
   1424c:	b	1413c <__assert_fail@plt+0x2ef0>
   14250:	bl	1121c <abort@plt>
   14254:	mov	r3, r2
   14258:	mov	r2, #0
   1425c:	b	14260 <__assert_fail@plt+0x3014>
   14260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14264:	add	fp, sp, #28
   14268:	sub	sp, sp, #36	; 0x24
   1426c:	movw	r8, #29088	; 0x71a0
   14270:	cmp	r3, #0
   14274:	mov	r4, r2
   14278:	str	r2, [sp, #24]
   1427c:	mov	r5, r1
   14280:	mov	r6, r0
   14284:	str	r0, [sp, #20]
   14288:	movt	r8, #2
   1428c:	movne	r8, r3
   14290:	bl	11138 <__errno_location@plt>
   14294:	str	r0, [sp, #28]
   14298:	cmp	r4, #0
   1429c:	add	sl, r8, #8
   142a0:	ldm	r8, {r3, r9}
   142a4:	ldr	r7, [r0]
   142a8:	ldr	r1, [r8, #40]	; 0x28
   142ac:	ldr	r2, [r8, #44]	; 0x2c
   142b0:	mov	r0, #0
   142b4:	orreq	r9, r9, #1
   142b8:	str	r7, [sp, #32]
   142bc:	mov	r7, r5
   142c0:	stm	sp, {r3, r9, sl}
   142c4:	str	r1, [sp, #12]
   142c8:	str	r2, [sp, #16]
   142cc:	mov	r1, #0
   142d0:	mov	r2, r6
   142d4:	mov	r3, r5
   142d8:	bl	131d0 <__assert_fail@plt+0x1f84>
   142dc:	add	r4, r0, #1
   142e0:	mov	r5, r0
   142e4:	mov	r0, r4
   142e8:	bl	14fc4 <__assert_fail@plt+0x3d78>
   142ec:	mov	r6, r0
   142f0:	ldr	r0, [r8]
   142f4:	ldr	r2, [r8, #44]	; 0x2c
   142f8:	ldr	r1, [r8, #40]	; 0x28
   142fc:	mov	r3, r7
   14300:	stm	sp, {r0, r9, sl}
   14304:	str	r2, [sp, #16]
   14308:	str	r1, [sp, #12]
   1430c:	mov	r0, r6
   14310:	mov	r1, r4
   14314:	ldr	r2, [sp, #20]
   14318:	bl	131d0 <__assert_fail@plt+0x1f84>
   1431c:	ldr	r0, [sp, #24]
   14320:	ldr	r1, [sp, #32]
   14324:	ldr	r2, [sp, #28]
   14328:	cmp	r0, #0
   1432c:	str	r1, [r2]
   14330:	strne	r5, [r0]
   14334:	mov	r0, r6
   14338:	sub	sp, fp, #28
   1433c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14340:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14344:	add	fp, sp, #24
   14348:	movw	r5, #28940	; 0x710c
   1434c:	movw	r8, #28936	; 0x7108
   14350:	movt	r5, #2
   14354:	movt	r8, #2
   14358:	ldr	r0, [r5]
   1435c:	ldr	r4, [r8]
   14360:	cmp	r0, #2
   14364:	blt	14390 <__assert_fail@plt+0x3144>
   14368:	add	r7, r4, #12
   1436c:	mov	r6, #0
   14370:	ldr	r0, [r7, r6, lsl #3]
   14374:	bl	12b20 <__assert_fail@plt+0x18d4>
   14378:	ldr	r1, [r5]
   1437c:	add	r2, r6, #2
   14380:	add	r0, r6, #1
   14384:	mov	r6, r0
   14388:	cmp	r2, r1
   1438c:	blt	14370 <__assert_fail@plt+0x3124>
   14390:	ldr	r0, [r4, #4]
   14394:	movw	r7, #29136	; 0x71d0
   14398:	movt	r7, #2
   1439c:	cmp	r0, r7
   143a0:	beq	143b8 <__assert_fail@plt+0x316c>
   143a4:	bl	12b20 <__assert_fail@plt+0x18d4>
   143a8:	movw	r0, #28944	; 0x7110
   143ac:	mov	r6, #256	; 0x100
   143b0:	movt	r0, #2
   143b4:	strd	r6, [r0]
   143b8:	movw	r6, #28944	; 0x7110
   143bc:	movt	r6, #2
   143c0:	cmp	r4, r6
   143c4:	beq	143d4 <__assert_fail@plt+0x3188>
   143c8:	mov	r0, r4
   143cc:	bl	12b20 <__assert_fail@plt+0x18d4>
   143d0:	str	r6, [r8]
   143d4:	mov	r0, #1
   143d8:	str	r0, [r5]
   143dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143e0:	movw	r3, #29088	; 0x71a0
   143e4:	mvn	r2, #0
   143e8:	movt	r3, #2
   143ec:	b	143f0 <__assert_fail@plt+0x31a4>
   143f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143f4:	add	fp, sp, #28
   143f8:	sub	sp, sp, #44	; 0x2c
   143fc:	mov	r7, r3
   14400:	str	r2, [sp, #36]	; 0x24
   14404:	str	r1, [sp, #32]
   14408:	mov	r5, r0
   1440c:	bl	11138 <__errno_location@plt>
   14410:	cmp	r5, #0
   14414:	blt	14580 <__assert_fail@plt+0x3334>
   14418:	cmn	r5, #-2147483647	; 0x80000001
   1441c:	beq	14580 <__assert_fail@plt+0x3334>
   14420:	movw	r8, #28940	; 0x710c
   14424:	movw	r4, #28936	; 0x7108
   14428:	str	r0, [sp, #28]
   1442c:	ldr	r0, [r0]
   14430:	movt	r8, #2
   14434:	movt	r4, #2
   14438:	ldr	r1, [r8]
   1443c:	ldr	r6, [r4]
   14440:	str	r0, [sp, #24]
   14444:	cmp	r1, r5
   14448:	ble	14454 <__assert_fail@plt+0x3208>
   1444c:	mov	sl, r6
   14450:	b	144bc <__assert_fail@plt+0x3270>
   14454:	movw	r9, #28944	; 0x7110
   14458:	mov	r0, #8
   1445c:	add	r2, r5, #1
   14460:	str	r1, [fp, #-32]	; 0xffffffe0
   14464:	mvn	r3, #-2147483648	; 0x80000000
   14468:	movt	r9, #2
   1446c:	str	r0, [sp]
   14470:	sub	r2, r2, r1
   14474:	sub	r1, fp, #32
   14478:	subs	r0, r6, r9
   1447c:	movne	r0, r6
   14480:	bl	150f4 <__assert_fail@plt+0x3ea8>
   14484:	cmp	r6, r9
   14488:	mov	sl, r0
   1448c:	str	r0, [r4]
   14490:	ldrdeq	r0, [r9]
   14494:	stmeq	sl, {r0, r1}
   14498:	ldr	r1, [r8]
   1449c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   144a0:	add	r0, sl, r1, lsl #3
   144a4:	sub	r1, r2, r1
   144a8:	lsl	r2, r1, #3
   144ac:	mov	r1, #0
   144b0:	bl	11150 <memset@plt>
   144b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   144b8:	str	r0, [r8]
   144bc:	mov	r9, sl
   144c0:	ldr	r6, [r9, r5, lsl #3]!
   144c4:	ldr	r4, [r9, #4]!
   144c8:	ldm	r7, {r0, r1}
   144cc:	ldr	r2, [r7, #40]	; 0x28
   144d0:	ldr	r3, [r7, #44]	; 0x2c
   144d4:	orr	r8, r1, #1
   144d8:	add	r1, r7, #8
   144dc:	stm	sp, {r0, r8}
   144e0:	add	r0, sp, #8
   144e4:	str	r1, [sp, #20]
   144e8:	stm	r0, {r1, r2, r3}
   144ec:	mov	r0, r4
   144f0:	mov	r1, r6
   144f4:	ldr	r2, [sp, #32]
   144f8:	ldr	r3, [sp, #36]	; 0x24
   144fc:	bl	131d0 <__assert_fail@plt+0x1f84>
   14500:	cmp	r6, r0
   14504:	bhi	14568 <__assert_fail@plt+0x331c>
   14508:	add	r6, r0, #1
   1450c:	movw	r0, #29136	; 0x71d0
   14510:	movt	r0, #2
   14514:	str	r6, [sl, r5, lsl #3]
   14518:	cmp	r4, r0
   1451c:	beq	14528 <__assert_fail@plt+0x32dc>
   14520:	mov	r0, r4
   14524:	bl	12b20 <__assert_fail@plt+0x18d4>
   14528:	mov	r0, r6
   1452c:	bl	14fc4 <__assert_fail@plt+0x3d78>
   14530:	str	r0, [r9]
   14534:	mov	r4, r0
   14538:	add	r3, sp, #8
   1453c:	ldr	r0, [r7]
   14540:	ldr	r1, [r7, #40]	; 0x28
   14544:	ldr	r2, [r7, #44]	; 0x2c
   14548:	stm	sp, {r0, r8}
   1454c:	ldr	r0, [sp, #20]
   14550:	stm	r3, {r0, r1, r2}
   14554:	mov	r0, r4
   14558:	mov	r1, r6
   1455c:	ldr	r2, [sp, #32]
   14560:	ldr	r3, [sp, #36]	; 0x24
   14564:	bl	131d0 <__assert_fail@plt+0x1f84>
   14568:	ldr	r0, [sp, #28]
   1456c:	ldr	r1, [sp, #24]
   14570:	str	r1, [r0]
   14574:	mov	r0, r4
   14578:	sub	sp, fp, #28
   1457c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14580:	bl	1121c <abort@plt>
   14584:	movw	r3, #29088	; 0x71a0
   14588:	movt	r3, #2
   1458c:	b	143f0 <__assert_fail@plt+0x31a4>
   14590:	movw	r3, #29088	; 0x71a0
   14594:	mov	r1, r0
   14598:	mov	r0, #0
   1459c:	mvn	r2, #0
   145a0:	movt	r3, #2
   145a4:	b	143f0 <__assert_fail@plt+0x31a4>
   145a8:	movw	r3, #29088	; 0x71a0
   145ac:	mov	r2, r1
   145b0:	mov	r1, r0
   145b4:	mov	r0, #0
   145b8:	movt	r3, #2
   145bc:	b	143f0 <__assert_fail@plt+0x31a4>
   145c0:	push	{fp, lr}
   145c4:	mov	fp, sp
   145c8:	sub	sp, sp, #48	; 0x30
   145cc:	vmov.i32	q8, #0	; 0x00000000
   145d0:	mov	ip, #32
   145d4:	mov	r3, sp
   145d8:	mov	lr, r2
   145dc:	cmp	r1, #10
   145e0:	add	r2, r3, #16
   145e4:	vst1.64	{d16-d17}, [r3], ip
   145e8:	vst1.64	{d16-d17}, [r3]
   145ec:	vst1.64	{d16-d17}, [r2]
   145f0:	beq	14610 <__assert_fail@plt+0x33c4>
   145f4:	str	r1, [sp]
   145f8:	mov	r3, sp
   145fc:	mov	r1, lr
   14600:	mvn	r2, #0
   14604:	bl	143f0 <__assert_fail@plt+0x31a4>
   14608:	mov	sp, fp
   1460c:	pop	{fp, pc}
   14610:	bl	1121c <abort@plt>
   14614:	push	{r4, sl, fp, lr}
   14618:	add	fp, sp, #8
   1461c:	sub	sp, sp, #48	; 0x30
   14620:	mov	ip, r3
   14624:	mov	r3, sp
   14628:	vmov.i32	q8, #0	; 0x00000000
   1462c:	mov	lr, #32
   14630:	cmp	r1, #10
   14634:	add	r4, r3, #16
   14638:	vst1.64	{d16-d17}, [r3], lr
   1463c:	vst1.64	{d16-d17}, [r3]
   14640:	vst1.64	{d16-d17}, [r4]
   14644:	beq	14664 <__assert_fail@plt+0x3418>
   14648:	str	r1, [sp]
   1464c:	mov	r1, r2
   14650:	mov	r3, sp
   14654:	mov	r2, ip
   14658:	bl	143f0 <__assert_fail@plt+0x31a4>
   1465c:	sub	sp, fp, #8
   14660:	pop	{r4, sl, fp, pc}
   14664:	bl	1121c <abort@plt>
   14668:	mov	r2, r1
   1466c:	mov	r1, r0
   14670:	mov	r0, #0
   14674:	b	145c0 <__assert_fail@plt+0x3374>
   14678:	mov	r3, r2
   1467c:	mov	r2, r1
   14680:	mov	r1, r0
   14684:	mov	r0, #0
   14688:	b	14614 <__assert_fail@plt+0x33c8>
   1468c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14690:	add	fp, sp, #24
   14694:	sub	sp, sp, #48	; 0x30
   14698:	movw	r8, #29088	; 0x71a0
   1469c:	mov	lr, r0
   146a0:	mov	r3, sp
   146a4:	mov	ip, r1
   146a8:	movt	r8, #2
   146ac:	mov	r1, r3
   146b0:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   146b4:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   146b8:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   146bc:	stm	r1, {r0, r4, r5, r6, r7, r9}
   146c0:	ubfx	r0, r2, #5, #3
   146c4:	and	r2, r2, #31
   146c8:	mov	r4, #1
   146cc:	add	r0, r3, r0, lsl #2
   146d0:	ldr	r1, [r0, #8]
   146d4:	bic	r4, r4, r1, lsr r2
   146d8:	eor	r1, r1, r4, lsl r2
   146dc:	mov	r2, ip
   146e0:	str	r1, [r0, #8]
   146e4:	mov	r0, #0
   146e8:	mov	r1, lr
   146ec:	bl	143f0 <__assert_fail@plt+0x31a4>
   146f0:	sub	sp, fp, #24
   146f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   146f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146fc:	add	fp, sp, #24
   14700:	sub	sp, sp, #48	; 0x30
   14704:	movw	lr, #29088	; 0x71a0
   14708:	mov	ip, r0
   1470c:	mov	r3, sp
   14710:	movt	lr, #2
   14714:	mov	r2, r3
   14718:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   1471c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14720:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   14724:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14728:	ubfx	r0, r1, #5, #3
   1472c:	and	r1, r1, #31
   14730:	mov	r7, #1
   14734:	add	r0, r3, r0, lsl #2
   14738:	ldr	r2, [r0, #8]
   1473c:	bic	r7, r7, r2, lsr r1
   14740:	eor	r1, r2, r7, lsl r1
   14744:	mvn	r2, #0
   14748:	str	r1, [r0, #8]
   1474c:	mov	r0, #0
   14750:	mov	r1, ip
   14754:	bl	143f0 <__assert_fail@plt+0x31a4>
   14758:	sub	sp, fp, #24
   1475c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14760:	push	{r4, r5, r6, r7, fp, lr}
   14764:	add	fp, sp, #16
   14768:	sub	sp, sp, #48	; 0x30
   1476c:	movw	lr, #29088	; 0x71a0
   14770:	mov	ip, r0
   14774:	mov	r3, sp
   14778:	movt	lr, #2
   1477c:	mov	r2, r3
   14780:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   14784:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14788:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   1478c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14790:	mov	r1, ip
   14794:	mvn	r2, #0
   14798:	ldr	r0, [sp, #12]
   1479c:	orr	r0, r0, #67108864	; 0x4000000
   147a0:	str	r0, [sp, #12]
   147a4:	mov	r0, #0
   147a8:	bl	143f0 <__assert_fail@plt+0x31a4>
   147ac:	sub	sp, fp, #16
   147b0:	pop	{r4, r5, r6, r7, fp, pc}
   147b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147b8:	add	fp, sp, #24
   147bc:	sub	sp, sp, #48	; 0x30
   147c0:	movw	r8, #29088	; 0x71a0
   147c4:	mov	ip, r1
   147c8:	mov	lr, r0
   147cc:	mov	r3, sp
   147d0:	movt	r8, #2
   147d4:	mov	r2, r3
   147d8:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   147dc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   147e0:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   147e4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   147e8:	mov	r1, lr
   147ec:	mov	r2, ip
   147f0:	ldr	r0, [sp, #12]
   147f4:	orr	r0, r0, #67108864	; 0x4000000
   147f8:	str	r0, [sp, #12]
   147fc:	mov	r0, #0
   14800:	bl	143f0 <__assert_fail@plt+0x31a4>
   14804:	sub	sp, fp, #24
   14808:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1480c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14810:	add	fp, sp, #24
   14814:	sub	sp, sp, #96	; 0x60
   14818:	mov	lr, sp
   1481c:	vmov.i32	q8, #0	; 0x00000000
   14820:	mov	ip, r2
   14824:	cmp	r1, #10
   14828:	add	r3, lr, #16
   1482c:	mov	r2, lr
   14830:	vst1.64	{d16-d17}, [r3]
   14834:	mov	r3, #28
   14838:	vst1.64	{d16-d17}, [r2], r3
   1483c:	vst1.32	{d16-d17}, [r2]
   14840:	beq	14880 <__assert_fail@plt+0x3634>
   14844:	str	r1, [sp, #48]	; 0x30
   14848:	add	r3, sp, #48	; 0x30
   1484c:	ldm	lr!, {r2, r4, r5, r6, r7}
   14850:	add	r1, r3, #4
   14854:	stmia	r1!, {r2, r4, r5, r6, r7}
   14858:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   1485c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   14860:	mvn	r2, #0
   14864:	ldr	r1, [sp, #60]	; 0x3c
   14868:	orr	r1, r1, #67108864	; 0x4000000
   1486c:	str	r1, [sp, #60]	; 0x3c
   14870:	mov	r1, ip
   14874:	bl	143f0 <__assert_fail@plt+0x31a4>
   14878:	sub	sp, fp, #24
   1487c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14880:	bl	1121c <abort@plt>
   14884:	push	{fp, lr}
   14888:	mov	fp, sp
   1488c:	sub	sp, sp, #8
   14890:	mvn	ip, #0
   14894:	str	ip, [sp]
   14898:	bl	148a4 <__assert_fail@plt+0x3658>
   1489c:	mov	sp, fp
   148a0:	pop	{fp, pc}
   148a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   148a8:	add	fp, sp, #24
   148ac:	sub	sp, sp, #48	; 0x30
   148b0:	movw	ip, #29088	; 0x71a0
   148b4:	mov	lr, r3
   148b8:	mov	r3, sp
   148bc:	cmp	r1, #0
   148c0:	movt	ip, #2
   148c4:	cmpne	r2, #0
   148c8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   148cc:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   148d0:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   148d4:	stm	r3, {r4, r5, r6, r7, r8, r9}
   148d8:	mov	r3, #10
   148dc:	str	r3, [sp]
   148e0:	bne	148e8 <__assert_fail@plt+0x369c>
   148e4:	bl	1121c <abort@plt>
   148e8:	ldr	ip, [fp, #8]
   148ec:	str	r2, [sp, #44]	; 0x2c
   148f0:	str	r1, [sp, #40]	; 0x28
   148f4:	mov	r3, sp
   148f8:	mov	r1, lr
   148fc:	mov	r2, ip
   14900:	bl	143f0 <__assert_fail@plt+0x31a4>
   14904:	sub	sp, fp, #24
   14908:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1490c:	push	{fp, lr}
   14910:	mov	fp, sp
   14914:	sub	sp, sp, #8
   14918:	mov	r3, r2
   1491c:	mov	r2, r1
   14920:	mov	r1, r0
   14924:	mvn	r0, #0
   14928:	str	r0, [sp]
   1492c:	mov	r0, #0
   14930:	bl	148a4 <__assert_fail@plt+0x3658>
   14934:	mov	sp, fp
   14938:	pop	{fp, pc}
   1493c:	push	{fp, lr}
   14940:	mov	fp, sp
   14944:	sub	sp, sp, #8
   14948:	mov	ip, r2
   1494c:	mov	r2, r1
   14950:	mov	r1, r0
   14954:	str	r3, [sp]
   14958:	mov	r0, #0
   1495c:	mov	r3, ip
   14960:	bl	148a4 <__assert_fail@plt+0x3658>
   14964:	mov	sp, fp
   14968:	pop	{fp, pc}
   1496c:	movw	r3, #28952	; 0x7118
   14970:	movt	r3, #2
   14974:	b	143f0 <__assert_fail@plt+0x31a4>
   14978:	movw	r3, #28952	; 0x7118
   1497c:	mov	r2, r1
   14980:	mov	r1, r0
   14984:	mov	r0, #0
   14988:	movt	r3, #2
   1498c:	b	143f0 <__assert_fail@plt+0x31a4>
   14990:	movw	r3, #28952	; 0x7118
   14994:	mvn	r2, #0
   14998:	movt	r3, #2
   1499c:	b	143f0 <__assert_fail@plt+0x31a4>
   149a0:	movw	r3, #28952	; 0x7118
   149a4:	mov	r1, r0
   149a8:	mov	r0, #0
   149ac:	mvn	r2, #0
   149b0:	movt	r3, #2
   149b4:	b	143f0 <__assert_fail@plt+0x31a4>
   149b8:	push	{r4, r5, fp, lr}
   149bc:	add	fp, sp, #8
   149c0:	mov	r5, r0
   149c4:	mov	r4, r1
   149c8:	mov	r0, #0
   149cc:	mov	r2, #5
   149d0:	mov	r1, r5
   149d4:	bl	11048 <dcgettext@plt>
   149d8:	cmp	r0, r5
   149dc:	popne	{r4, r5, fp, pc}
   149e0:	bl	156f4 <__assert_fail@plt+0x44a8>
   149e4:	ldrb	r1, [r0]
   149e8:	and	r1, r1, #223	; 0xdf
   149ec:	cmp	r1, #71	; 0x47
   149f0:	beq	14a58 <__assert_fail@plt+0x380c>
   149f4:	cmp	r1, #85	; 0x55
   149f8:	bne	14a7c <__assert_fail@plt+0x3830>
   149fc:	ldrb	r1, [r0, #1]
   14a00:	and	r1, r1, #223	; 0xdf
   14a04:	cmp	r1, #84	; 0x54
   14a08:	bne	14a7c <__assert_fail@plt+0x3830>
   14a0c:	ldrb	r1, [r0, #2]
   14a10:	and	r1, r1, #223	; 0xdf
   14a14:	cmp	r1, #70	; 0x46
   14a18:	ldrbeq	r1, [r0, #3]
   14a1c:	cmpeq	r1, #45	; 0x2d
   14a20:	bne	14a7c <__assert_fail@plt+0x3830>
   14a24:	ldrb	r1, [r0, #4]
   14a28:	cmp	r1, #56	; 0x38
   14a2c:	ldrbeq	r0, [r0, #5]
   14a30:	cmpeq	r0, #0
   14a34:	bne	14a7c <__assert_fail@plt+0x3830>
   14a38:	ldrb	r1, [r5]
   14a3c:	movw	r2, #26167	; 0x6637
   14a40:	movw	r0, #26171	; 0x663b
   14a44:	movt	r2, #1
   14a48:	movt	r0, #1
   14a4c:	cmp	r1, #96	; 0x60
   14a50:	moveq	r0, r2
   14a54:	pop	{r4, r5, fp, pc}
   14a58:	ldrb	r1, [r0, #1]
   14a5c:	and	r1, r1, #223	; 0xdf
   14a60:	cmp	r1, #66	; 0x42
   14a64:	bne	14a7c <__assert_fail@plt+0x3830>
   14a68:	ldrb	r1, [r0, #2]
   14a6c:	cmp	r1, #49	; 0x31
   14a70:	ldrbeq	r1, [r0, #3]
   14a74:	cmpeq	r1, #56	; 0x38
   14a78:	beq	14a98 <__assert_fail@plt+0x384c>
   14a7c:	movw	r1, #26161	; 0x6631
   14a80:	movw	r0, #26165	; 0x6635
   14a84:	cmp	r4, #9
   14a88:	movt	r1, #1
   14a8c:	movt	r0, #1
   14a90:	moveq	r0, r1
   14a94:	pop	{r4, r5, fp, pc}
   14a98:	ldrb	r1, [r0, #4]
   14a9c:	cmp	r1, #48	; 0x30
   14aa0:	ldrbeq	r1, [r0, #5]
   14aa4:	cmpeq	r1, #51	; 0x33
   14aa8:	bne	14a7c <__assert_fail@plt+0x3830>
   14aac:	ldrb	r1, [r0, #6]
   14ab0:	cmp	r1, #48	; 0x30
   14ab4:	ldrbeq	r0, [r0, #7]
   14ab8:	cmpeq	r0, #0
   14abc:	bne	14a7c <__assert_fail@plt+0x3830>
   14ac0:	ldrb	r1, [r5]
   14ac4:	movw	r2, #26175	; 0x663f
   14ac8:	movw	r0, #26179	; 0x6643
   14acc:	movt	r2, #1
   14ad0:	movt	r0, #1
   14ad4:	b	14a4c <__assert_fail@plt+0x3800>
   14ad8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14adc:	add	fp, sp, #24
   14ae0:	sub	sp, sp, #32
   14ae4:	ldr	r6, [fp, #12]
   14ae8:	ldr	r7, [fp, #8]
   14aec:	mov	r4, r2
   14af0:	mov	r8, r0
   14af4:	cmp	r1, #0
   14af8:	beq	14b20 <__assert_fail@plt+0x38d4>
   14afc:	movw	r2, #26268	; 0x669c
   14b00:	mov	r5, r1
   14b04:	str	r3, [sp, #4]
   14b08:	str	r4, [sp]
   14b0c:	mov	r0, r8
   14b10:	mov	r1, #1
   14b14:	movt	r2, #1
   14b18:	mov	r3, r5
   14b1c:	b	14b38 <__assert_fail@plt+0x38ec>
   14b20:	movw	r2, #26280	; 0x66a8
   14b24:	str	r3, [sp]
   14b28:	mov	r0, r8
   14b2c:	mov	r1, #1
   14b30:	mov	r3, r4
   14b34:	movt	r2, #1
   14b38:	bl	11180 <__fprintf_chk@plt>
   14b3c:	movw	r1, #26287	; 0x66af
   14b40:	mov	r0, #0
   14b44:	mov	r2, #5
   14b48:	movt	r1, #1
   14b4c:	bl	11048 <dcgettext@plt>
   14b50:	movw	r2, #27005	; 0x697d
   14b54:	mov	r3, r0
   14b58:	movw	r0, #2022	; 0x7e6
   14b5c:	mov	r1, #1
   14b60:	str	r0, [sp]
   14b64:	movt	r2, #1
   14b68:	mov	r0, r8
   14b6c:	bl	11180 <__fprintf_chk@plt>
   14b70:	movw	r4, #25226	; 0x628a
   14b74:	mov	r1, r8
   14b78:	movt	r4, #1
   14b7c:	mov	r0, r4
   14b80:	bl	10fac <fputs_unlocked@plt>
   14b84:	movw	r1, #26291	; 0x66b3
   14b88:	mov	r0, #0
   14b8c:	mov	r2, #5
   14b90:	movt	r1, #1
   14b94:	bl	11048 <dcgettext@plt>
   14b98:	movw	r3, #26462	; 0x675e
   14b9c:	mov	r2, r0
   14ba0:	mov	r0, r8
   14ba4:	mov	r1, #1
   14ba8:	movt	r3, #1
   14bac:	bl	11180 <__fprintf_chk@plt>
   14bb0:	mov	r0, r4
   14bb4:	mov	r1, r8
   14bb8:	bl	10fac <fputs_unlocked@plt>
   14bbc:	cmp	r6, #9
   14bc0:	bhi	14c24 <__assert_fail@plt+0x39d8>
   14bc4:	add	r0, pc, #0
   14bc8:	ldr	pc, [r0, r6, lsl #2]
   14bcc:	strdeq	r4, [r1], -ip
   14bd0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14bd4:	andeq	r4, r1, r0, lsr ip
   14bd8:	andeq	r4, r1, r8, asr ip
   14bdc:	andeq	r4, r1, r0, lsl #25
   14be0:	andeq	r4, r1, r8, lsr #25
   14be4:	ldrdeq	r4, [r1], -r0
   14be8:	andeq	r4, r1, r8, lsl #26
   14bec:	andeq	r4, r1, r8, lsr #27
   14bf0:	andeq	r4, r1, r0, asr sp
   14bf4:	movw	r1, #26496	; 0x6780
   14bf8:	mov	r0, #0
   14bfc:	mov	r2, #5
   14c00:	movt	r1, #1
   14c04:	bl	11048 <dcgettext@plt>
   14c08:	ldr	r3, [r7]
   14c0c:	mov	r2, r0
   14c10:	mov	r0, r8
   14c14:	mov	r1, #1
   14c18:	sub	sp, fp, #24
   14c1c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c20:	b	11180 <__fprintf_chk@plt>
   14c24:	movw	r1, #26815	; 0x68bf
   14c28:	movt	r1, #1
   14c2c:	b	14d58 <__assert_fail@plt+0x3b0c>
   14c30:	movw	r1, #26512	; 0x6790
   14c34:	mov	r0, #0
   14c38:	mov	r2, #5
   14c3c:	movt	r1, #1
   14c40:	bl	11048 <dcgettext@plt>
   14c44:	mov	r2, r0
   14c48:	ldr	r3, [r7]
   14c4c:	ldr	r0, [r7, #4]
   14c50:	str	r0, [sp]
   14c54:	b	14d44 <__assert_fail@plt+0x3af8>
   14c58:	movw	r1, #26535	; 0x67a7
   14c5c:	mov	r0, #0
   14c60:	mov	r2, #5
   14c64:	movt	r1, #1
   14c68:	bl	11048 <dcgettext@plt>
   14c6c:	ldr	r3, [r7]
   14c70:	mov	r2, r0
   14c74:	ldmib	r7, {r0, r1}
   14c78:	stm	sp, {r0, r1}
   14c7c:	b	14d44 <__assert_fail@plt+0x3af8>
   14c80:	movw	r1, #26563	; 0x67c3
   14c84:	mov	r0, #0
   14c88:	mov	r2, #5
   14c8c:	movt	r1, #1
   14c90:	bl	11048 <dcgettext@plt>
   14c94:	ldr	r3, [r7]
   14c98:	mov	r2, r0
   14c9c:	ldmib	r7, {r0, r1, r7}
   14ca0:	stm	sp, {r0, r1, r7}
   14ca4:	b	14d44 <__assert_fail@plt+0x3af8>
   14ca8:	movw	r1, #26595	; 0x67e3
   14cac:	mov	r0, #0
   14cb0:	mov	r2, #5
   14cb4:	movt	r1, #1
   14cb8:	bl	11048 <dcgettext@plt>
   14cbc:	ldr	r3, [r7]
   14cc0:	mov	r2, r0
   14cc4:	ldmib	r7, {r0, r1, r6, r7}
   14cc8:	stm	sp, {r0, r1, r6, r7}
   14ccc:	b	14d44 <__assert_fail@plt+0x3af8>
   14cd0:	movw	r1, #26631	; 0x6807
   14cd4:	mov	r0, #0
   14cd8:	mov	r2, #5
   14cdc:	movt	r1, #1
   14ce0:	bl	11048 <dcgettext@plt>
   14ce4:	ldr	r3, [r7]
   14ce8:	mov	r2, r0
   14cec:	ldmib	r7, {r0, r1, r6}
   14cf0:	ldr	r5, [r7, #16]
   14cf4:	ldr	r7, [r7, #20]
   14cf8:	stm	sp, {r0, r1, r6}
   14cfc:	str	r5, [sp, #12]
   14d00:	str	r7, [sp, #16]
   14d04:	b	14d44 <__assert_fail@plt+0x3af8>
   14d08:	movw	r1, #26671	; 0x682f
   14d0c:	mov	r0, #0
   14d10:	mov	r2, #5
   14d14:	movt	r1, #1
   14d18:	bl	11048 <dcgettext@plt>
   14d1c:	ldr	r3, [r7]
   14d20:	mov	r2, r0
   14d24:	ldmib	r7, {r0, r1, r6}
   14d28:	ldr	r5, [r7, #16]
   14d2c:	ldr	r4, [r7, #20]
   14d30:	ldr	r7, [r7, #24]
   14d34:	stm	sp, {r0, r1, r6}
   14d38:	str	r5, [sp, #12]
   14d3c:	str	r4, [sp, #16]
   14d40:	str	r7, [sp, #20]
   14d44:	mov	r0, r8
   14d48:	mov	r1, #1
   14d4c:	b	14df8 <__assert_fail@plt+0x3bac>
   14d50:	movw	r1, #26763	; 0x688b
   14d54:	movt	r1, #1
   14d58:	mov	r0, #0
   14d5c:	mov	r2, #5
   14d60:	bl	11048 <dcgettext@plt>
   14d64:	mov	ip, r0
   14d68:	ldr	r3, [r7]
   14d6c:	ldr	r0, [r7, #4]
   14d70:	ldr	r1, [r7, #8]
   14d74:	ldr	r6, [r7, #12]
   14d78:	ldr	r5, [r7, #16]
   14d7c:	ldr	r4, [r7, #20]
   14d80:	ldr	r2, [r7, #24]
   14d84:	ldr	lr, [r7, #28]
   14d88:	ldr	r7, [r7, #32]
   14d8c:	stm	sp, {r0, r1, r6}
   14d90:	str	r5, [sp, #12]
   14d94:	str	r4, [sp, #16]
   14d98:	str	r2, [sp, #20]
   14d9c:	str	lr, [sp, #24]
   14da0:	str	r7, [sp, #28]
   14da4:	b	14dec <__assert_fail@plt+0x3ba0>
   14da8:	movw	r1, #26715	; 0x685b
   14dac:	mov	r0, #0
   14db0:	mov	r2, #5
   14db4:	movt	r1, #1
   14db8:	bl	11048 <dcgettext@plt>
   14dbc:	mov	ip, r0
   14dc0:	ldr	r3, [r7]
   14dc4:	ldmib	r7, {r0, r1, r6}
   14dc8:	ldr	r5, [r7, #16]
   14dcc:	ldr	r4, [r7, #20]
   14dd0:	ldr	r2, [r7, #24]
   14dd4:	ldr	r7, [r7, #28]
   14dd8:	stm	sp, {r0, r1, r6}
   14ddc:	str	r5, [sp, #12]
   14de0:	str	r4, [sp, #16]
   14de4:	str	r2, [sp, #20]
   14de8:	str	r7, [sp, #24]
   14dec:	mov	r0, r8
   14df0:	mov	r1, #1
   14df4:	mov	r2, ip
   14df8:	bl	11180 <__fprintf_chk@plt>
   14dfc:	sub	sp, fp, #24
   14e00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e04:	push	{r4, sl, fp, lr}
   14e08:	add	fp, sp, #8
   14e0c:	sub	sp, sp, #8
   14e10:	ldr	ip, [fp, #8]
   14e14:	mov	lr, #0
   14e18:	ldr	r4, [ip, lr, lsl #2]
   14e1c:	add	lr, lr, #1
   14e20:	cmp	r4, #0
   14e24:	bne	14e18 <__assert_fail@plt+0x3bcc>
   14e28:	sub	r4, lr, #1
   14e2c:	str	ip, [sp]
   14e30:	str	r4, [sp, #4]
   14e34:	bl	14ad8 <__assert_fail@plt+0x388c>
   14e38:	sub	sp, fp, #8
   14e3c:	pop	{r4, sl, fp, pc}
   14e40:	push	{r4, r5, fp, lr}
   14e44:	add	fp, sp, #8
   14e48:	sub	sp, sp, #48	; 0x30
   14e4c:	ldr	r4, [fp, #8]
   14e50:	mov	ip, #0
   14e54:	add	lr, sp, #8
   14e58:	ldr	r5, [r4]
   14e5c:	cmp	r5, #0
   14e60:	str	r5, [lr, ip, lsl #2]
   14e64:	beq	14e78 <__assert_fail@plt+0x3c2c>
   14e68:	add	ip, ip, #1
   14e6c:	add	r4, r4, #4
   14e70:	cmp	ip, #10
   14e74:	bcc	14e58 <__assert_fail@plt+0x3c0c>
   14e78:	str	lr, [sp]
   14e7c:	str	ip, [sp, #4]
   14e80:	bl	14ad8 <__assert_fail@plt+0x388c>
   14e84:	sub	sp, fp, #8
   14e88:	pop	{r4, r5, fp, pc}
   14e8c:	push	{fp, lr}
   14e90:	mov	fp, sp
   14e94:	sub	sp, sp, #8
   14e98:	add	ip, fp, #8
   14e9c:	str	ip, [sp, #4]
   14ea0:	str	ip, [sp]
   14ea4:	bl	14e40 <__assert_fail@plt+0x3bf4>
   14ea8:	mov	sp, fp
   14eac:	pop	{fp, pc}
   14eb0:	push	{fp, lr}
   14eb4:	mov	fp, sp
   14eb8:	movw	r0, #29028	; 0x7164
   14ebc:	movt	r0, #2
   14ec0:	ldr	r1, [r0]
   14ec4:	movw	r0, #25226	; 0x628a
   14ec8:	movt	r0, #1
   14ecc:	bl	10fac <fputs_unlocked@plt>
   14ed0:	movw	r1, #26875	; 0x68fb
   14ed4:	mov	r0, #0
   14ed8:	mov	r2, #5
   14edc:	movt	r1, #1
   14ee0:	bl	11048 <dcgettext@plt>
   14ee4:	movw	r2, #26895	; 0x690f
   14ee8:	mov	r1, r0
   14eec:	mov	r0, #1
   14ef0:	movt	r2, #1
   14ef4:	bl	11168 <__printf_chk@plt>
   14ef8:	movw	r1, #26917	; 0x6925
   14efc:	mov	r0, #0
   14f00:	mov	r2, #5
   14f04:	movt	r1, #1
   14f08:	bl	11048 <dcgettext@plt>
   14f0c:	movw	r2, #24531	; 0x5fd3
   14f10:	movw	r3, #25035	; 0x61cb
   14f14:	mov	r1, r0
   14f18:	mov	r0, #1
   14f1c:	movt	r2, #1
   14f20:	movt	r3, #1
   14f24:	bl	11168 <__printf_chk@plt>
   14f28:	movw	r1, #26937	; 0x6939
   14f2c:	mov	r0, #0
   14f30:	mov	r2, #5
   14f34:	movt	r1, #1
   14f38:	bl	11048 <dcgettext@plt>
   14f3c:	movw	r2, #26976	; 0x6960
   14f40:	mov	r1, r0
   14f44:	mov	r0, #1
   14f48:	movt	r2, #1
   14f4c:	pop	{fp, lr}
   14f50:	b	11168 <__printf_chk@plt>
   14f54:	b	14f58 <__assert_fail@plt+0x3d0c>
   14f58:	push	{r4, r5, r6, sl, fp, lr}
   14f5c:	add	fp, sp, #16
   14f60:	mov	r4, r2
   14f64:	mov	r5, r1
   14f68:	mov	r6, r0
   14f6c:	bl	1578c <__assert_fail@plt+0x4540>
   14f70:	cmp	r0, #0
   14f74:	popne	{r4, r5, r6, sl, fp, pc}
   14f78:	cmp	r6, #0
   14f7c:	beq	14f90 <__assert_fail@plt+0x3d44>
   14f80:	cmp	r5, #0
   14f84:	cmpne	r4, #0
   14f88:	bne	14f90 <__assert_fail@plt+0x3d44>
   14f8c:	pop	{r4, r5, r6, sl, fp, pc}
   14f90:	bl	153e4 <__assert_fail@plt+0x4198>
   14f94:	push	{fp, lr}
   14f98:	mov	fp, sp
   14f9c:	bl	1547c <__assert_fail@plt+0x4230>
   14fa0:	cmp	r0, #0
   14fa4:	popne	{fp, pc}
   14fa8:	bl	153e4 <__assert_fail@plt+0x4198>
   14fac:	push	{fp, lr}
   14fb0:	mov	fp, sp
   14fb4:	bl	1547c <__assert_fail@plt+0x4230>
   14fb8:	cmp	r0, #0
   14fbc:	popne	{fp, pc}
   14fc0:	bl	153e4 <__assert_fail@plt+0x4198>
   14fc4:	push	{fp, lr}
   14fc8:	mov	fp, sp
   14fcc:	bl	1547c <__assert_fail@plt+0x4230>
   14fd0:	cmp	r0, #0
   14fd4:	popne	{fp, pc}
   14fd8:	bl	153e4 <__assert_fail@plt+0x4198>
   14fdc:	push	{r4, r5, fp, lr}
   14fe0:	add	fp, sp, #8
   14fe4:	mov	r4, r1
   14fe8:	mov	r5, r0
   14fec:	bl	154ac <__assert_fail@plt+0x4260>
   14ff0:	cmp	r0, #0
   14ff4:	popne	{r4, r5, fp, pc}
   14ff8:	cmp	r5, #0
   14ffc:	beq	1500c <__assert_fail@plt+0x3dc0>
   15000:	cmp	r4, #0
   15004:	bne	1500c <__assert_fail@plt+0x3dc0>
   15008:	pop	{r4, r5, fp, pc}
   1500c:	bl	153e4 <__assert_fail@plt+0x4198>
   15010:	push	{fp, lr}
   15014:	mov	fp, sp
   15018:	cmp	r1, #0
   1501c:	orreq	r1, r1, #1
   15020:	bl	154ac <__assert_fail@plt+0x4260>
   15024:	cmp	r0, #0
   15028:	popne	{fp, pc}
   1502c:	bl	153e4 <__assert_fail@plt+0x4198>
   15030:	push	{fp, lr}
   15034:	mov	fp, sp
   15038:	clz	r3, r2
   1503c:	lsr	ip, r3, #5
   15040:	clz	r3, r1
   15044:	lsr	r3, r3, #5
   15048:	orrs	r3, r3, ip
   1504c:	movwne	r1, #1
   15050:	movwne	r2, #1
   15054:	bl	1578c <__assert_fail@plt+0x4540>
   15058:	cmp	r0, #0
   1505c:	popne	{fp, pc}
   15060:	bl	153e4 <__assert_fail@plt+0x4198>
   15064:	push	{fp, lr}
   15068:	mov	fp, sp
   1506c:	mov	r2, r1
   15070:	mov	r1, r0
   15074:	mov	r0, #0
   15078:	bl	1578c <__assert_fail@plt+0x4540>
   1507c:	cmp	r0, #0
   15080:	popne	{fp, pc}
   15084:	bl	153e4 <__assert_fail@plt+0x4198>
   15088:	mov	r2, r1
   1508c:	mov	r1, r0
   15090:	mov	r0, #0
   15094:	b	15030 <__assert_fail@plt+0x3de4>
   15098:	mov	r2, #1
   1509c:	b	150a0 <__assert_fail@plt+0x3e54>
   150a0:	push	{r4, r5, fp, lr}
   150a4:	add	fp, sp, #8
   150a8:	ldr	r5, [r1]
   150ac:	mov	r4, r1
   150b0:	cmp	r0, #0
   150b4:	beq	150cc <__assert_fail@plt+0x3e80>
   150b8:	mov	r1, #1
   150bc:	add	r1, r1, r5, lsr #1
   150c0:	adds	r5, r5, r1
   150c4:	bcc	150e4 <__assert_fail@plt+0x3e98>
   150c8:	bl	153e4 <__assert_fail@plt+0x4198>
   150cc:	cmp	r5, #0
   150d0:	bne	150e4 <__assert_fail@plt+0x3e98>
   150d4:	mov	r1, #64	; 0x40
   150d8:	cmp	r2, #64	; 0x40
   150dc:	udiv	r5, r1, r2
   150e0:	addhi	r5, r5, #1
   150e4:	mov	r1, r5
   150e8:	bl	14f58 <__assert_fail@plt+0x3d0c>
   150ec:	str	r5, [r4]
   150f0:	pop	{r4, r5, fp, pc}
   150f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150f8:	add	fp, sp, #24
   150fc:	ldr	r6, [r1]
   15100:	mov	r8, r1
   15104:	ldr	r4, [fp, #8]
   15108:	add	r1, r6, r6, asr #1
   1510c:	cmp	r1, r6
   15110:	mvnvs	r1, #-2147483648	; 0x80000000
   15114:	cmp	r1, r3
   15118:	mov	r5, r1
   1511c:	movgt	r5, r3
   15120:	cmn	r3, #1
   15124:	movle	r5, r1
   15128:	cmn	r4, #1
   1512c:	ble	1514c <__assert_fail@plt+0x3f00>
   15130:	cmp	r4, #0
   15134:	beq	151a0 <__assert_fail@plt+0x3f54>
   15138:	cmn	r5, #1
   1513c:	ble	15174 <__assert_fail@plt+0x3f28>
   15140:	mvn	r7, #-2147483648	; 0x80000000
   15144:	udiv	r1, r7, r4
   15148:	b	15168 <__assert_fail@plt+0x3f1c>
   1514c:	cmn	r5, #1
   15150:	ble	15190 <__assert_fail@plt+0x3f44>
   15154:	cmn	r4, #1
   15158:	beq	151a0 <__assert_fail@plt+0x3f54>
   1515c:	mov	r1, #-2147483648	; 0x80000000
   15160:	mvn	r7, #-2147483648	; 0x80000000
   15164:	sdiv	r1, r1, r4
   15168:	cmp	r1, r5
   1516c:	bge	151a0 <__assert_fail@plt+0x3f54>
   15170:	b	151b0 <__assert_fail@plt+0x3f64>
   15174:	beq	151a0 <__assert_fail@plt+0x3f54>
   15178:	mov	r1, #-2147483648	; 0x80000000
   1517c:	mvn	r7, #-2147483648	; 0x80000000
   15180:	sdiv	r1, r1, r5
   15184:	cmp	r1, r4
   15188:	bge	151a0 <__assert_fail@plt+0x3f54>
   1518c:	b	151b0 <__assert_fail@plt+0x3f64>
   15190:	mvn	r7, #-2147483648	; 0x80000000
   15194:	sdiv	r1, r7, r4
   15198:	cmp	r5, r1
   1519c:	blt	151b0 <__assert_fail@plt+0x3f64>
   151a0:	mul	r1, r5, r4
   151a4:	mov	r7, #64	; 0x40
   151a8:	cmp	r1, #63	; 0x3f
   151ac:	bgt	151b8 <__assert_fail@plt+0x3f6c>
   151b0:	sdiv	r5, r7, r4
   151b4:	mul	r1, r5, r4
   151b8:	cmp	r0, #0
   151bc:	moveq	r7, #0
   151c0:	streq	r7, [r8]
   151c4:	sub	r7, r5, r6
   151c8:	cmp	r7, r2
   151cc:	bge	15270 <__assert_fail@plt+0x4024>
   151d0:	add	r5, r6, r2
   151d4:	mov	r2, #0
   151d8:	mov	r1, #0
   151dc:	cmp	r5, r3
   151e0:	movwgt	r2, #1
   151e4:	cmn	r3, #1
   151e8:	movwgt	r1, #1
   151ec:	cmp	r5, r6
   151f0:	bvs	15258 <__assert_fail@plt+0x400c>
   151f4:	ands	r1, r1, r2
   151f8:	bne	15258 <__assert_fail@plt+0x400c>
   151fc:	cmn	r4, #1
   15200:	ble	15220 <__assert_fail@plt+0x3fd4>
   15204:	cmp	r4, #0
   15208:	beq	1526c <__assert_fail@plt+0x4020>
   1520c:	cmn	r5, #1
   15210:	ble	15244 <__assert_fail@plt+0x3ff8>
   15214:	mvn	r1, #-2147483648	; 0x80000000
   15218:	udiv	r1, r1, r4
   1521c:	b	15238 <__assert_fail@plt+0x3fec>
   15220:	cmn	r5, #1
   15224:	ble	1525c <__assert_fail@plt+0x4010>
   15228:	cmn	r4, #1
   1522c:	beq	1526c <__assert_fail@plt+0x4020>
   15230:	mov	r1, #-2147483648	; 0x80000000
   15234:	sdiv	r1, r1, r4
   15238:	cmp	r1, r5
   1523c:	bge	1526c <__assert_fail@plt+0x4020>
   15240:	b	15258 <__assert_fail@plt+0x400c>
   15244:	beq	1526c <__assert_fail@plt+0x4020>
   15248:	mov	r1, #-2147483648	; 0x80000000
   1524c:	sdiv	r1, r1, r5
   15250:	cmp	r1, r4
   15254:	bge	1526c <__assert_fail@plt+0x4020>
   15258:	bl	153e4 <__assert_fail@plt+0x4198>
   1525c:	mvn	r1, #-2147483648	; 0x80000000
   15260:	sdiv	r1, r1, r4
   15264:	cmp	r5, r1
   15268:	blt	15258 <__assert_fail@plt+0x400c>
   1526c:	mul	r1, r5, r4
   15270:	bl	14fdc <__assert_fail@plt+0x3d90>
   15274:	str	r5, [r8]
   15278:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1527c:	push	{fp, lr}
   15280:	mov	fp, sp
   15284:	mov	r1, #1
   15288:	bl	15428 <__assert_fail@plt+0x41dc>
   1528c:	cmp	r0, #0
   15290:	popne	{fp, pc}
   15294:	bl	153e4 <__assert_fail@plt+0x4198>
   15298:	push	{fp, lr}
   1529c:	mov	fp, sp
   152a0:	bl	15428 <__assert_fail@plt+0x41dc>
   152a4:	cmp	r0, #0
   152a8:	popne	{fp, pc}
   152ac:	bl	153e4 <__assert_fail@plt+0x4198>
   152b0:	push	{fp, lr}
   152b4:	mov	fp, sp
   152b8:	mov	r1, #1
   152bc:	bl	15428 <__assert_fail@plt+0x41dc>
   152c0:	cmp	r0, #0
   152c4:	popne	{fp, pc}
   152c8:	bl	153e4 <__assert_fail@plt+0x4198>
   152cc:	push	{fp, lr}
   152d0:	mov	fp, sp
   152d4:	bl	15428 <__assert_fail@plt+0x41dc>
   152d8:	cmp	r0, #0
   152dc:	popne	{fp, pc}
   152e0:	bl	153e4 <__assert_fail@plt+0x4198>
   152e4:	push	{r4, r5, r6, sl, fp, lr}
   152e8:	add	fp, sp, #16
   152ec:	mov	r5, r0
   152f0:	mov	r0, r1
   152f4:	mov	r4, r1
   152f8:	bl	1547c <__assert_fail@plt+0x4230>
   152fc:	cmp	r0, #0
   15300:	beq	1531c <__assert_fail@plt+0x40d0>
   15304:	mov	r1, r5
   15308:	mov	r2, r4
   1530c:	mov	r6, r0
   15310:	bl	1100c <memcpy@plt>
   15314:	mov	r0, r6
   15318:	pop	{r4, r5, r6, sl, fp, pc}
   1531c:	bl	153e4 <__assert_fail@plt+0x4198>
   15320:	push	{r4, r5, r6, sl, fp, lr}
   15324:	add	fp, sp, #16
   15328:	mov	r5, r0
   1532c:	mov	r0, r1
   15330:	mov	r4, r1
   15334:	bl	1547c <__assert_fail@plt+0x4230>
   15338:	cmp	r0, #0
   1533c:	beq	15358 <__assert_fail@plt+0x410c>
   15340:	mov	r1, r5
   15344:	mov	r2, r4
   15348:	mov	r6, r0
   1534c:	bl	1100c <memcpy@plt>
   15350:	mov	r0, r6
   15354:	pop	{r4, r5, r6, sl, fp, pc}
   15358:	bl	153e4 <__assert_fail@plt+0x4198>
   1535c:	push	{r4, r5, r6, sl, fp, lr}
   15360:	add	fp, sp, #16
   15364:	mov	r5, r0
   15368:	add	r0, r1, #1
   1536c:	mov	r4, r1
   15370:	bl	1547c <__assert_fail@plt+0x4230>
   15374:	cmp	r0, #0
   15378:	beq	153a0 <__assert_fail@plt+0x4154>
   1537c:	mov	r6, r0
   15380:	mov	r0, #0
   15384:	mov	r1, r5
   15388:	mov	r2, r4
   1538c:	strb	r0, [r6, r4]
   15390:	mov	r0, r6
   15394:	bl	1100c <memcpy@plt>
   15398:	mov	r0, r6
   1539c:	pop	{r4, r5, r6, sl, fp, pc}
   153a0:	bl	153e4 <__assert_fail@plt+0x4198>
   153a4:	push	{r4, r5, r6, sl, fp, lr}
   153a8:	add	fp, sp, #16
   153ac:	mov	r4, r0
   153b0:	bl	11120 <strlen@plt>
   153b4:	add	r5, r0, #1
   153b8:	mov	r0, r5
   153bc:	bl	1547c <__assert_fail@plt+0x4230>
   153c0:	cmp	r0, #0
   153c4:	beq	153e0 <__assert_fail@plt+0x4194>
   153c8:	mov	r1, r4
   153cc:	mov	r2, r5
   153d0:	mov	r6, r0
   153d4:	bl	1100c <memcpy@plt>
   153d8:	mov	r0, r6
   153dc:	pop	{r4, r5, r6, sl, fp, pc}
   153e0:	bl	153e4 <__assert_fail@plt+0x4198>
   153e4:	push	{fp, lr}
   153e8:	mov	fp, sp
   153ec:	movw	r0, #28932	; 0x7104
   153f0:	movw	r1, #27052	; 0x69ac
   153f4:	mov	r2, #5
   153f8:	movt	r0, #2
   153fc:	movt	r1, #1
   15400:	ldr	r4, [r0]
   15404:	mov	r0, #0
   15408:	bl	11048 <dcgettext@plt>
   1540c:	movw	r2, #26014	; 0x659e
   15410:	mov	r3, r0
   15414:	mov	r0, r4
   15418:	mov	r1, #0
   1541c:	movt	r2, #1
   15420:	bl	110c0 <error@plt>
   15424:	bl	1121c <abort@plt>
   15428:	clz	r2, r1
   1542c:	clz	r3, r0
   15430:	lsr	r2, r2, #5
   15434:	lsr	r3, r3, #5
   15438:	orrs	r2, r3, r2
   1543c:	movwne	r1, #1
   15440:	movwne	r0, #1
   15444:	cmp	r1, #0
   15448:	beq	15478 <__assert_fail@plt+0x422c>
   1544c:	mvn	r2, #-2147483648	; 0x80000000
   15450:	udiv	r2, r2, r1
   15454:	cmp	r2, r0
   15458:	bcs	15478 <__assert_fail@plt+0x422c>
   1545c:	push	{fp, lr}
   15460:	mov	fp, sp
   15464:	bl	11138 <__errno_location@plt>
   15468:	mov	r1, #12
   1546c:	str	r1, [r0]
   15470:	mov	r0, #0
   15474:	pop	{fp, pc}
   15478:	b	10fa0 <calloc@plt>
   1547c:	cmp	r0, #0
   15480:	movweq	r0, #1
   15484:	cmn	r0, #1
   15488:	ble	15490 <__assert_fail@plt+0x4244>
   1548c:	b	110cc <malloc@plt>
   15490:	push	{fp, lr}
   15494:	mov	fp, sp
   15498:	bl	11138 <__errno_location@plt>
   1549c:	mov	r1, #12
   154a0:	str	r1, [r0]
   154a4:	mov	r0, #0
   154a8:	pop	{fp, pc}
   154ac:	push	{fp, lr}
   154b0:	mov	fp, sp
   154b4:	cmp	r0, #0
   154b8:	beq	154d4 <__assert_fail@plt+0x4288>
   154bc:	cmp	r1, #0
   154c0:	beq	154e0 <__assert_fail@plt+0x4294>
   154c4:	cmn	r1, #1
   154c8:	ble	154e8 <__assert_fail@plt+0x429c>
   154cc:	pop	{fp, lr}
   154d0:	b	11054 <realloc@plt>
   154d4:	mov	r0, r1
   154d8:	pop	{fp, lr}
   154dc:	b	1547c <__assert_fail@plt+0x4230>
   154e0:	bl	12b20 <__assert_fail@plt+0x18d4>
   154e4:	b	154f4 <__assert_fail@plt+0x42a8>
   154e8:	bl	11138 <__errno_location@plt>
   154ec:	mov	r1, #12
   154f0:	str	r1, [r0]
   154f4:	mov	r0, #0
   154f8:	pop	{fp, pc}
   154fc:	push	{r4, r5, r6, sl, fp, lr}
   15500:	add	fp, sp, #16
   15504:	mov	r4, r0
   15508:	bl	1109c <__fpending@plt>
   1550c:	mov	r5, r0
   15510:	mov	r0, r4
   15514:	bl	110a8 <ferror_unlocked@plt>
   15518:	mov	r6, r0
   1551c:	mov	r0, r4
   15520:	bl	12a28 <__assert_fail@plt+0x17dc>
   15524:	cmp	r6, #0
   15528:	beq	15548 <__assert_fail@plt+0x42fc>
   1552c:	mvn	r4, #0
   15530:	cmp	r0, #0
   15534:	bne	15574 <__assert_fail@plt+0x4328>
   15538:	bl	11138 <__errno_location@plt>
   1553c:	mov	r1, #0
   15540:	str	r1, [r0]
   15544:	b	15574 <__assert_fail@plt+0x4328>
   15548:	cmp	r0, #0
   1554c:	mov	r4, r0
   15550:	mvnne	r4, #0
   15554:	cmp	r5, #0
   15558:	bne	15574 <__assert_fail@plt+0x4328>
   1555c:	cmp	r0, #0
   15560:	beq	15574 <__assert_fail@plt+0x4328>
   15564:	bl	11138 <__errno_location@plt>
   15568:	ldr	r0, [r0]
   1556c:	subs	r4, r0, #9
   15570:	mvnne	r4, #0
   15574:	mov	r0, r4
   15578:	pop	{r4, r5, r6, sl, fp, pc}
   1557c:	push	{r4, r5, fp, lr}
   15580:	add	fp, sp, #8
   15584:	ldrd	r4, [r0, #16]
   15588:	mov	r2, r0
   1558c:	mov	r0, #0
   15590:	cmp	r5, r4
   15594:	pophi	{r4, r5, fp, pc}
   15598:	ldr	r3, [r2, #4]
   1559c:	ldr	r2, [r2, #8]
   155a0:	subs	r2, r2, r3
   155a4:	movne	r0, r3
   155a8:	strne	r2, [r1]
   155ac:	pop	{r4, r5, fp, pc}
   155b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   155b4:	add	fp, sp, #24
   155b8:	sub	sp, sp, #8
   155bc:	sub	sp, sp, #4096	; 0x1000
   155c0:	mov	r8, #0
   155c4:	cmp	r1, #0
   155c8:	beq	156e8 <__assert_fail@plt+0x449c>
   155cc:	mov	r6, r1
   155d0:	mov	r5, r0
   155d4:	bl	157c8 <__assert_fail@plt+0x457c>
   155d8:	mov	r7, r0
   155dc:	add	r4, sp, #8
   155e0:	cmp	r7, #0
   155e4:	beq	15650 <__assert_fail@plt+0x4404>
   155e8:	mov	r0, r5
   155ec:	mov	r1, r4
   155f0:	bl	1557c <__assert_fail@plt+0x4330>
   155f4:	cmp	r0, #0
   155f8:	ldrne	r0, [sp, #8]
   155fc:	cmpne	r0, #0
   15600:	beq	15628 <__assert_fail@plt+0x43dc>
   15604:	ldr	r1, [r5, #4]
   15608:	cmp	r0, r6
   1560c:	movcs	r0, r6
   15610:	subs	r6, r6, r0
   15614:	add	r1, r1, r0
   15618:	str	r1, [r5, #4]
   1561c:	beq	156e8 <__assert_fail@plt+0x449c>
   15620:	subs	r7, r7, r0
   15624:	beq	15650 <__assert_fail@plt+0x4404>
   15628:	mov	r0, r5
   1562c:	bl	1115c <fgetc@plt>
   15630:	cmn	r0, #1
   15634:	beq	156d4 <__assert_fail@plt+0x4488>
   15638:	subs	r6, r6, #1
   1563c:	mov	r0, r6
   15640:	movwne	r0, #1
   15644:	sub	r7, r7, r0
   15648:	bne	155e0 <__assert_fail@plt+0x4394>
   1564c:	b	156e8 <__assert_fail@plt+0x449c>
   15650:	mov	r0, r5
   15654:	bl	11174 <fileno@plt>
   15658:	cmp	r0, #0
   1565c:	blt	15698 <__assert_fail@plt+0x444c>
   15660:	mov	r4, #1
   15664:	mov	r2, #0
   15668:	mov	r3, #0
   1566c:	str	r4, [sp]
   15670:	bl	11078 <lseek64@plt>
   15674:	cmp	r1, #0
   15678:	blt	15698 <__assert_fail@plt+0x444c>
   1567c:	mov	r0, r5
   15680:	mov	r2, r6
   15684:	mov	r3, #0
   15688:	str	r4, [sp]
   1568c:	bl	12b48 <__assert_fail@plt+0x18fc>
   15690:	mov	r8, r0
   15694:	b	156e8 <__assert_fail@plt+0x449c>
   15698:	add	r4, sp, #8
   1569c:	cmp	r6, #4096	; 0x1000
   156a0:	mov	r7, r6
   156a4:	mov	r0, r4
   156a8:	mov	r1, #1
   156ac:	mov	r3, r5
   156b0:	movcs	r7, #4096	; 0x1000
   156b4:	mov	r2, r7
   156b8:	bl	11090 <fread@plt>
   156bc:	cmp	r0, r7
   156c0:	subcs	r6, r6, r7
   156c4:	bcc	156d4 <__assert_fail@plt+0x4488>
   156c8:	cmp	r6, #0
   156cc:	bne	1569c <__assert_fail@plt+0x4450>
   156d0:	b	156e8 <__assert_fail@plt+0x449c>
   156d4:	mov	r0, r5
   156d8:	bl	10ff4 <ferror@plt>
   156dc:	mov	r8, r0
   156e0:	cmp	r0, #0
   156e4:	mvnne	r8, #0
   156e8:	mov	r0, r8
   156ec:	sub	sp, fp, #24
   156f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156f4:	push	{fp, lr}
   156f8:	mov	fp, sp
   156fc:	mov	r0, #14
   15700:	bl	111c8 <nl_langinfo@plt>
   15704:	movw	r1, #25227	; 0x628b
   15708:	cmp	r0, #0
   1570c:	movt	r1, #1
   15710:	movne	r1, r0
   15714:	movw	r0, #27069	; 0x69bd
   15718:	ldrb	r2, [r1]
   1571c:	movt	r0, #1
   15720:	cmp	r2, #0
   15724:	movne	r0, r1
   15728:	pop	{fp, pc}
   1572c:	push	{r4, r5, r6, r7, fp, lr}
   15730:	add	fp, sp, #16
   15734:	sub	sp, sp, #8
   15738:	add	r5, sp, #4
   1573c:	cmp	r0, #0
   15740:	mov	r7, r2
   15744:	mov	r4, r1
   15748:	movne	r5, r0
   1574c:	mov	r0, r5
   15750:	bl	110b4 <mbrtowc@plt>
   15754:	mov	r6, r0
   15758:	cmp	r7, #0
   1575c:	beq	15780 <__assert_fail@plt+0x4534>
   15760:	cmn	r6, #2
   15764:	bcc	15780 <__assert_fail@plt+0x4534>
   15768:	mov	r0, #0
   1576c:	bl	15804 <__assert_fail@plt+0x45b8>
   15770:	cmp	r0, #0
   15774:	ldrbeq	r0, [r4]
   15778:	moveq	r6, #1
   1577c:	streq	r0, [r5]
   15780:	mov	r0, r6
   15784:	sub	sp, fp, #16
   15788:	pop	{r4, r5, r6, r7, fp, pc}
   1578c:	cmp	r2, #0
   15790:	beq	157c0 <__assert_fail@plt+0x4574>
   15794:	mvn	r3, #0
   15798:	udiv	r3, r3, r2
   1579c:	cmp	r3, r1
   157a0:	bcs	157c0 <__assert_fail@plt+0x4574>
   157a4:	push	{fp, lr}
   157a8:	mov	fp, sp
   157ac:	bl	11138 <__errno_location@plt>
   157b0:	mov	r1, #12
   157b4:	str	r1, [r0]
   157b8:	mov	r0, #0
   157bc:	pop	{fp, pc}
   157c0:	mul	r1, r2, r1
   157c4:	b	154ac <__assert_fail@plt+0x4260>
   157c8:	ldrd	r2, [r0, #16]
   157cc:	mov	r1, #0
   157d0:	cmp	r3, r2
   157d4:	bhi	157fc <__assert_fail@plt+0x45b0>
   157d8:	ldmib	r0, {r1, r2}
   157dc:	ldrb	r3, [r0, #1]
   157e0:	sub	r1, r2, r1
   157e4:	mov	r2, #0
   157e8:	tst	r3, #1
   157ec:	ldrne	r2, [r0, #36]	; 0x24
   157f0:	ldrne	r0, [r0, #44]	; 0x2c
   157f4:	subne	r2, r0, r2
   157f8:	add	r1, r1, r2
   157fc:	mov	r0, r1
   15800:	bx	lr
   15804:	push	{r4, sl, fp, lr}
   15808:	add	fp, sp, #8
   1580c:	sub	sp, sp, #264	; 0x108
   15810:	add	r1, sp, #7
   15814:	movw	r2, #257	; 0x101
   15818:	bl	15868 <__assert_fail@plt+0x461c>
   1581c:	mov	r4, #0
   15820:	cmp	r0, #0
   15824:	bne	1585c <__assert_fail@plt+0x4610>
   15828:	movw	r1, #27075	; 0x69c3
   1582c:	add	r0, sp, #7
   15830:	movt	r1, #1
   15834:	bl	10fb8 <strcmp@plt>
   15838:	cmp	r0, #0
   1583c:	beq	1585c <__assert_fail@plt+0x4610>
   15840:	movw	r1, #27077	; 0x69c5
   15844:	add	r0, sp, #7
   15848:	movt	r1, #1
   1584c:	bl	10fb8 <strcmp@plt>
   15850:	mov	r4, r0
   15854:	cmp	r0, #0
   15858:	movwne	r4, #1
   1585c:	mov	r0, r4
   15860:	sub	sp, fp, #8
   15864:	pop	{r4, sl, fp, pc}
   15868:	push	{r4, r5, r6, r7, fp, lr}
   1586c:	add	fp, sp, #16
   15870:	mov	r4, r1
   15874:	mov	r1, #0
   15878:	mov	r6, r2
   1587c:	bl	111b0 <setlocale@plt>
   15880:	cmp	r0, #0
   15884:	beq	158b0 <__assert_fail@plt+0x4664>
   15888:	mov	r7, r0
   1588c:	bl	11120 <strlen@plt>
   15890:	cmp	r0, r6
   15894:	bcs	158c4 <__assert_fail@plt+0x4678>
   15898:	add	r2, r0, #1
   1589c:	mov	r0, r4
   158a0:	mov	r1, r7
   158a4:	bl	1100c <memcpy@plt>
   158a8:	mov	r5, #0
   158ac:	b	158ec <__assert_fail@plt+0x46a0>
   158b0:	cmp	r6, #0
   158b4:	mov	r5, #22
   158b8:	movne	r0, #0
   158bc:	strbne	r0, [r4]
   158c0:	b	158ec <__assert_fail@plt+0x46a0>
   158c4:	mov	r5, #34	; 0x22
   158c8:	cmp	r6, #0
   158cc:	beq	158ec <__assert_fail@plt+0x46a0>
   158d0:	sub	r6, r6, #1
   158d4:	mov	r0, r4
   158d8:	mov	r1, r7
   158dc:	mov	r2, r6
   158e0:	bl	1100c <memcpy@plt>
   158e4:	mov	r0, #0
   158e8:	strb	r0, [r4, r6]
   158ec:	mov	r0, r5
   158f0:	pop	{r4, r5, r6, r7, fp, pc}
   158f4:	mov	r1, #0
   158f8:	b	111b0 <setlocale@plt>
   158fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15900:	mov	r7, r0
   15904:	ldr	r6, [pc, #72]	; 15954 <__assert_fail@plt+0x4708>
   15908:	ldr	r5, [pc, #72]	; 15958 <__assert_fail@plt+0x470c>
   1590c:	add	r6, pc, r6
   15910:	add	r5, pc, r5
   15914:	sub	r6, r6, r5
   15918:	mov	r8, r1
   1591c:	mov	r9, r2
   15920:	bl	10f80 <calloc@plt-0x20>
   15924:	asrs	r6, r6, #2
   15928:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1592c:	mov	r4, #0
   15930:	add	r4, r4, #1
   15934:	ldr	r3, [r5], #4
   15938:	mov	r2, r9
   1593c:	mov	r1, r8
   15940:	mov	r0, r7
   15944:	blx	r3
   15948:	cmp	r6, r4
   1594c:	bne	15930 <__assert_fail@plt+0x46e4>
   15950:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15954:	strdeq	r1, [r1], -r8
   15958:	strdeq	r1, [r1], -r0
   1595c:	bx	lr
   15960:	ldr	r3, [pc, #12]	; 15974 <__assert_fail@plt+0x4728>
   15964:	mov	r1, #0
   15968:	add	r3, pc, r3
   1596c:	ldr	r2, [r3]
   15970:	b	11144 <__cxa_atexit@plt>
   15974:	andeq	r1, r1, ip, lsl #15

Disassembly of section .fini:

00015978 <.fini>:
   15978:	push	{r3, lr}
   1597c:	pop	{r3, pc}
