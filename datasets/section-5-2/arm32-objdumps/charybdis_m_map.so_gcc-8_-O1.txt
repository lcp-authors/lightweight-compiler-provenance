
../repos/charybdis/modules/.libs/m_map.so:     file format elf32-littlearm


Disassembly of section .init:

00000534 <_init>:
 534:	push	{r3, lr}
 538:	bl	5b4 <call_weak_fn>
 53c:	pop	{r3, pc}

Disassembly of section .plt:

00000540 <.plt>:
 540:	push	{lr}		; (str lr, [sp, #-4]!)
 544:	ldr	lr, [pc, #4]	; 550 <.plt+0x10>
 548:	add	lr, pc, lr
 54c:	ldr	pc, [lr, #8]!
 550:	.word	0x00010ab0

00000554 <__cxa_finalize@plt>:
 554:	add	ip, pc, #0, 12
 558:	add	ip, ip, #16, 20	; 0x10000
 55c:	ldr	pc, [ip, #2736]!	; 0xab0

00000560 <__gmon_start__@plt>:
 560:	add	ip, pc, #0, 12
 564:	add	ip, ip, #16, 20	; 0x10000
 568:	ldr	pc, [ip, #2728]!	; 0xaa8

0000056c <sendto_one_numeric@plt>:
 56c:	add	ip, pc, #0, 12
 570:	add	ip, ip, #16, 20	; 0x10000
 574:	ldr	pc, [ip, #2720]!	; 0xaa0

00000578 <strlen@plt>:
 578:	add	ip, pc, #0, 12
 57c:	add	ip, ip, #16, 20	; 0x10000
 580:	ldr	pc, [ip, #2712]!	; 0xa98

00000584 <snprintf@plt>:
 584:	add	ip, pc, #0, 12
 588:	add	ip, ip, #16, 20	; 0x10000
 58c:	ldr	pc, [ip, #2704]!	; 0xa90

00000590 <scache_send_missing@plt>:
 590:	add	ip, pc, #0, 12
 594:	add	ip, ip, #16, 20	; 0x10000
 598:	ldr	pc, [ip, #2696]!	; 0xa88

0000059c <rb_strlcpy@plt>:
 59c:	add	ip, pc, #0, 12
 5a0:	add	ip, ip, #16, 20	; 0x10000
 5a4:	ldr	pc, [ip, #2688]!	; 0xa80

000005a8 <rb_strlcat@plt>:
 5a8:	add	ip, pc, #0, 12
 5ac:	add	ip, ip, #16, 20	; 0x10000
 5b0:	ldr	pc, [ip, #2680]!	; 0xa78

Disassembly of section .text:

000005b4 <call_weak_fn>:
 5b4:	ldr	r3, [pc, #20]	; 5d0 <call_weak_fn+0x1c>
 5b8:	ldr	r2, [pc, #20]	; 5d4 <call_weak_fn+0x20>
 5bc:	add	r3, pc, r3
 5c0:	ldr	r2, [r3, r2]
 5c4:	cmp	r2, #0
 5c8:	bxeq	lr
 5cc:	b	560 <__gmon_start__@plt>
 5d0:	.word	0x00010a3c
 5d4:	.word	0x00000040

000005d8 <deregister_tm_clones>:
 5d8:	ldr	r0, [pc, #44]	; 60c <deregister_tm_clones+0x34>
 5dc:	ldr	r3, [pc, #44]	; 610 <deregister_tm_clones+0x38>
 5e0:	add	r0, pc, r0
 5e4:	add	r3, pc, r3
 5e8:	cmp	r3, r0
 5ec:	ldr	r3, [pc, #32]	; 614 <deregister_tm_clones+0x3c>
 5f0:	add	r3, pc, r3
 5f4:	bxeq	lr
 5f8:	ldr	r2, [pc, #24]	; 618 <deregister_tm_clones+0x40>
 5fc:	ldr	r3, [r3, r2]
 600:	cmp	r3, #0
 604:	bxeq	lr
 608:	bx	r3
 60c:	.word	0x00010ae0
 610:	.word	0x00010adc
 614:	.word	0x00010a08
 618:	.word	0x00000034

0000061c <register_tm_clones>:
 61c:	ldr	r0, [pc, #56]	; 65c <register_tm_clones+0x40>
 620:	ldr	r3, [pc, #56]	; 660 <register_tm_clones+0x44>
 624:	add	r0, pc, r0
 628:	add	r3, pc, r3
 62c:	sub	r1, r3, r0
 630:	ldr	r3, [pc, #44]	; 664 <register_tm_clones+0x48>
 634:	asr	r1, r1, #2
 638:	add	r3, pc, r3
 63c:	add	r1, r1, r1, lsr #31
 640:	asrs	r1, r1, #1
 644:	bxeq	lr
 648:	ldr	r2, [pc, #24]	; 668 <register_tm_clones+0x4c>
 64c:	ldr	r3, [r3, r2]
 650:	cmp	r3, #0
 654:	bxeq	lr
 658:	bx	r3
 65c:	.word	0x00010a9c
 660:	.word	0x00010a98
 664:	.word	0x000109c0
 668:	.word	0x00000044

0000066c <__do_global_dtors_aux>:
 66c:	ldr	r3, [pc, #76]	; 6c0 <__do_global_dtors_aux+0x54>
 670:	ldr	r2, [pc, #76]	; 6c4 <__do_global_dtors_aux+0x58>
 674:	add	r3, pc, r3
 678:	add	r2, pc, r2
 67c:	ldrb	r3, [r3]
 680:	cmp	r3, #0
 684:	bxne	lr
 688:	ldr	r3, [pc, #56]	; 6c8 <__do_global_dtors_aux+0x5c>
 68c:	push	{r4, lr}
 690:	ldr	r3, [r2, r3]
 694:	cmp	r3, #0
 698:	beq	6a8 <__do_global_dtors_aux+0x3c>
 69c:	ldr	r3, [pc, #40]	; 6cc <__do_global_dtors_aux+0x60>
 6a0:	ldr	r0, [pc, r3]
 6a4:	bl	554 <__cxa_finalize@plt>
 6a8:	bl	5d8 <deregister_tm_clones>
 6ac:	ldr	r3, [pc, #28]	; 6d0 <__do_global_dtors_aux+0x64>
 6b0:	mov	r2, #1
 6b4:	add	r3, pc, r3
 6b8:	strb	r2, [r3]
 6bc:	pop	{r4, pc}
 6c0:	.word	0x00010a4c
 6c4:	.word	0x00010980
 6c8:	.word	0x00000030
 6cc:	.word	0x000109a8
 6d0:	.word	0x00010a0c

000006d4 <frame_dummy>:
 6d4:	b	61c <register_tm_clones>

000006d8 <dump_map>:
 6d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
 6dc:	strd	r6, [sp, #8]
 6e0:	strd	r8, [sp, #16]
 6e4:	strd	sl, [sp, #24]
 6e8:	str	lr, [sp, #32]
 6ec:	sub	sp, sp, #12
 6f0:	mov	r7, r0
 6f4:	mov	r6, r1
 6f8:	mov	r4, r2
 6fc:	ldr	r5, [pc, #488]	; 8ec <dump_map+0x214>
 700:	add	r5, pc, r5
 704:	mov	r3, #0
 708:	strb	r3, [r2]
 70c:	mov	r2, #512	; 0x200
 710:	add	r1, r1, #88	; 0x58
 714:	mov	r0, r4
 718:	bl	5a8 <rb_strlcat@plt>
 71c:	ldrb	r3, [r6, #396]	; 0x18c
 720:	cmp	r3, #0
 724:	bne	884 <dump_map+0x1ac>
 728:	ldr	r8, [pc, #448]	; 8f0 <dump_map+0x218>
 72c:	add	r8, pc, r8
 730:	mov	r0, r8
 734:	bl	578 <strlen@plt>
 738:	mov	r3, #32
 73c:	strb	r3, [r8, r0]
 740:	sub	r3, r0, #49	; 0x31
 744:	cmn	r3, #-2147483598	; 0x80000032
 748:	bls	770 <dump_map+0x98>
 74c:	ldr	r3, [pc, #416]	; 8f4 <dump_map+0x21c>
 750:	add	r3, pc, r3
 754:	add	r0, r0, #1
 758:	add	r0, r3, r0
 75c:	add	r3, r3, #50	; 0x32
 760:	mov	r2, #45	; 0x2d
 764:	strb	r2, [r0], #1
 768:	cmp	r0, r3
 76c:	bne	764 <dump_map+0x8c>
 770:	ldr	r3, [r6, #28]
 774:	ldr	r3, [r3, #56]	; 0x38
 778:	ldr	r2, [pc, #376]	; 8f8 <dump_map+0x220>
 77c:	ldr	r2, [r5, r2]
 780:	ldr	r1, [r2, #4]
 784:	add	r2, r1, r1, lsr #31
 788:	asr	r0, r2, #1
 78c:	mov	r2, #1000	; 0x3e8
 790:	mla	r2, r2, r3, r0
 794:	udiv	r2, r2, r1
 798:	ldr	r5, [pc, #348]	; 8fc <dump_map+0x224>
 79c:	add	r5, pc, r5
 7a0:	movw	r1, #26215	; 0x6667
 7a4:	movt	r1, #26214	; 0x6666
 7a8:	smull	r1, r0, r1, r2
 7ac:	asr	r1, r2, #31
 7b0:	rsb	r1, r1, r0, asr #2
 7b4:	add	r0, r1, r1, lsl #2
 7b8:	sub	r2, r2, r0, lsl #1
 7bc:	str	r2, [sp, #4]
 7c0:	str	r1, [sp]
 7c4:	ldr	r2, [pc, #308]	; 900 <dump_map+0x228>
 7c8:	add	r2, pc, r2
 7cc:	movw	r1, #462	; 0x1ce
 7d0:	add	r0, r5, #50	; 0x32
 7d4:	bl	584 <snprintf@plt>
 7d8:	mov	r3, r5
 7dc:	ldr	r2, [pc, #288]	; 904 <dump_map+0x22c>
 7e0:	add	r2, pc, r2
 7e4:	mov	r1, #15
 7e8:	mov	r0, r7
 7ec:	bl	56c <sendto_one_numeric@plt>
 7f0:	ldr	r3, [r6, #28]
 7f4:	ldr	r5, [r3, #36]	; 0x24
 7f8:	cmp	r5, #0
 7fc:	beq	868 <dump_map+0x190>
 800:	ldr	r9, [r3, #44]	; 0x2c
 804:	ldr	r3, [pc, #252]	; 908 <dump_map+0x230>
 808:	add	r3, pc, r3
 80c:	add	r3, r3, #3
 810:	cmp	r9, #0
 814:	cmpne	r4, r3
 818:	bhi	8c0 <dump_map+0x1e8>
 81c:	mov	r6, #1
 820:	mov	r8, #32
 824:	mov	fp, #45	; 0x2d
 828:	add	sl, r4, #4
 82c:	ldr	r1, [r5]
 830:	strb	r8, [r4]
 834:	cmp	r9, r6
 838:	movgt	r3, #124	; 0x7c
 83c:	movle	r3, #96	; 0x60
 840:	strb	r3, [r4, #1]
 844:	strb	fp, [r4, #2]
 848:	strb	r8, [r4, #3]
 84c:	mov	r2, sl
 850:	mov	r0, r7
 854:	bl	6d8 <dump_map>
 858:	add	r6, r6, #1
 85c:	ldr	r5, [r5, #8]
 860:	cmp	r5, #0
 864:	bne	82c <dump_map+0x154>
 868:	add	sp, sp, #12
 86c:	ldrd	r4, [sp]
 870:	ldrd	r6, [sp, #8]
 874:	ldrd	r8, [sp, #16]
 878:	ldrd	sl, [sp, #24]
 87c:	add	sp, sp, #32
 880:	pop	{pc}		; (ldr pc, [sp], #4)
 884:	mov	r2, #512	; 0x200
 888:	ldr	r1, [pc, #124]	; 90c <dump_map+0x234>
 88c:	add	r1, pc, r1
 890:	mov	r0, r4
 894:	bl	5a8 <rb_strlcat@plt>
 898:	mov	r2, #512	; 0x200
 89c:	add	r1, r6, #396	; 0x18c
 8a0:	mov	r0, r4
 8a4:	bl	5a8 <rb_strlcat@plt>
 8a8:	mov	r2, #512	; 0x200
 8ac:	ldr	r1, [pc, #92]	; 910 <dump_map+0x238>
 8b0:	add	r1, pc, r1
 8b4:	mov	r0, r4
 8b8:	bl	5a8 <rb_strlcat@plt>
 8bc:	b	728 <dump_map+0x50>
 8c0:	mov	r3, #32
 8c4:	strb	r3, [r4, #-2]
 8c8:	ldrb	r3, [r4, #-3]
 8cc:	cmp	r3, #96	; 0x60
 8d0:	moveq	r3, #32
 8d4:	strbeq	r3, [r4, #-3]
 8d8:	ldr	r3, [r6, #28]
 8dc:	ldr	r5, [r3, #36]	; 0x24
 8e0:	cmp	r5, #0
 8e4:	bne	81c <dump_map+0x144>
 8e8:	b	868 <dump_map+0x190>
 8ec:	.word	0x000108f8
 8f0:	.word	0x00010998
 8f4:	.word	0x00010974
 8f8:	.word	0x00000038
 8fc:	.word	0x00010928
 900:	.word	0x00000590
 904:	.word	0x00000594
 908:	.word	0x000108bc
 90c:	.word	0x000004c4
 910:	.word	0x000004a4

00000914 <mo_map>:
 914:	str	r4, [sp, #-8]!
 918:	str	lr, [sp, #4]
 91c:	sub	sp, sp, #8
 920:	mov	r4, r1
 924:	ldr	r3, [pc, #76]	; 978 <mo_map+0x64>
 928:	add	r3, pc, r3
 92c:	ldr	r2, [pc, #72]	; 97c <mo_map+0x68>
 930:	ldr	r3, [r3, r2]
 934:	str	r3, [sp, #4]
 938:	ldr	r2, [pc, #64]	; 980 <mo_map+0x6c>
 93c:	add	r2, pc, r2
 940:	mov	r1, r3
 944:	mov	r0, r4
 948:	bl	6d8 <dump_map>
 94c:	mov	r0, r4
 950:	bl	590 <scache_send_missing@plt>
 954:	ldr	r2, [pc, #40]	; 984 <mo_map+0x70>
 958:	add	r2, pc, r2
 95c:	mov	r1, #17
 960:	mov	r0, r4
 964:	bl	56c <sendto_one_numeric@plt>
 968:	add	sp, sp, #8
 96c:	ldr	r4, [sp]
 970:	add	sp, sp, #4
 974:	pop	{pc}		; (ldr pc, [sp], #4)
 978:	.word	0x000106d0
 97c:	.word	0x00000048
 980:	.word	0x00010788
 984:	.word	0x00000420

00000988 <flattened_map>:
 988:	strd	r4, [sp, #-36]!	; 0xffffffdc
 98c:	strd	r6, [sp, #8]
 990:	strd	r8, [sp, #16]
 994:	strd	sl, [sp, #24]
 998:	str	lr, [sp, #32]
 99c:	vpush	{d8}
 9a0:	sub	sp, sp, #532	; 0x214
 9a4:	str	r0, [sp, #8]
 9a8:	ldr	r7, [pc, #608]	; c10 <flattened_map+0x288>
 9ac:	add	r7, pc, r7
 9b0:	ldr	r3, [pc, #604]	; c14 <flattened_map+0x28c>
 9b4:	ldr	r1, [r7, r3]
 9b8:	mov	r2, #512	; 0x200
 9bc:	add	r1, r1, #88	; 0x58
 9c0:	add	r4, sp, #16
 9c4:	mov	r0, r4
 9c8:	bl	59c <rb_strlcpy@plt>
 9cc:	mov	r0, r4
 9d0:	bl	578 <strlen@plt>
 9d4:	add	r3, sp, #528	; 0x210
 9d8:	add	r3, r3, r0
 9dc:	mov	r2, #32
 9e0:	strb	r2, [r3, #-512]	; 0xfffffe00
 9e4:	sub	r3, r0, #49	; 0x31
 9e8:	cmn	r3, #-2147483598	; 0x80000032
 9ec:	bls	a10 <flattened_map+0x88>
 9f0:	add	r3, r0, #1
 9f4:	add	r2, sp, #16
 9f8:	add	r3, r2, r3
 9fc:	add	r2, sp, #66	; 0x42
 a00:	mov	r1, #45	; 0x2d
 a04:	strb	r1, [r3], #1
 a08:	cmp	r3, r2
 a0c:	bne	a04 <flattened_map+0x7c>
 a10:	ldr	r3, [pc, #508]	; c14 <flattened_map+0x28c>
 a14:	ldr	r3, [r7, r3]
 a18:	ldr	r3, [r3, #28]
 a1c:	ldr	r3, [r3, #56]	; 0x38
 a20:	vmov	s15, r3
 a24:	vcvt.f32.u32	s13, s15
 a28:	vldr	s15, [pc, #476]	; c0c <flattened_map+0x284>
 a2c:	vmul.f32	s13, s13, s15
 a30:	ldr	r2, [pc, #480]	; c18 <flattened_map+0x290>
 a34:	ldr	r2, [r7, r2]
 a38:	vldr	s15, [r2, #4]
 a3c:	vcvt.f32.s32	s15, s15
 a40:	vdiv.f32	s14, s13, s15
 a44:	vcvt.f64.f32	d7, s14
 a48:	vstr	d7, [sp]
 a4c:	ldr	r2, [pc, #456]	; c1c <flattened_map+0x294>
 a50:	add	r2, pc, r2
 a54:	movw	r1, #462	; 0x1ce
 a58:	add	r4, sp, #16
 a5c:	add	r0, sp, #66	; 0x42
 a60:	bl	584 <snprintf@plt>
 a64:	mov	r3, r4
 a68:	ldr	r2, [pc, #432]	; c20 <flattened_map+0x298>
 a6c:	add	r2, pc, r2
 a70:	mov	r1, #15
 a74:	ldr	r0, [sp, #8]
 a78:	bl	56c <sendto_one_numeric@plt>
 a7c:	ldr	r3, [pc, #416]	; c24 <flattened_map+0x29c>
 a80:	ldr	r3, [r7, r3]
 a84:	ldr	r4, [r3]
 a88:	cmp	r4, #0
 a8c:	beq	bec <flattened_map+0x264>
 a90:	mov	sl, #0
 a94:	ldr	r3, [pc, #396]	; c28 <flattened_map+0x2a0>
 a98:	add	r3, pc, r3
 a9c:	str	r3, [sp, #12]
 aa0:	vldr	s16, [pc, #356]	; c0c <flattened_map+0x284>
 aa4:	ldr	fp, [pc, #384]	; c2c <flattened_map+0x2a4>
 aa8:	add	fp, pc, fp
 aac:	b	b2c <flattened_map+0x1a4>
 ab0:	mov	r2, #512	; 0x200
 ab4:	ldr	r1, [pc, #372]	; c30 <flattened_map+0x2a8>
 ab8:	add	r1, pc, r1
 abc:	add	r0, sp, #16
 ac0:	bl	59c <rb_strlcpy@plt>
 ac4:	b	b90 <flattened_map+0x208>
 ac8:	ldr	r3, [r5, #28]
 acc:	ldr	r3, [r3, #56]	; 0x38
 ad0:	vmov	s15, r3
 ad4:	vcvt.f32.u32	s13, s15
 ad8:	vmul.f32	s13, s13, s16
 adc:	ldr	r2, [pc, #308]	; c18 <flattened_map+0x290>
 ae0:	ldr	r2, [r7, r2]
 ae4:	vldr	s15, [r2, #4]
 ae8:	vcvt.f32.s32	s15, s15
 aec:	vdiv.f32	s14, s13, s15
 af0:	vcvt.f64.f32	d7, s14
 af4:	vstr	d7, [sp]
 af8:	ldr	r2, [sp, #12]
 afc:	movw	r1, #462	; 0x1ce
 b00:	add	r5, sp, #16
 b04:	add	r0, sp, #66	; 0x42
 b08:	bl	584 <snprintf@plt>
 b0c:	mov	r3, r5
 b10:	mov	r2, fp
 b14:	mov	r1, #15
 b18:	ldr	r0, [sp, #8]
 b1c:	bl	56c <sendto_one_numeric@plt>
 b20:	ldr	r4, [r4, #8]
 b24:	cmp	r4, #0
 b28:	beq	bec <flattened_map+0x264>
 b2c:	ldr	r5, [r4]
 b30:	add	sl, sl, #1
 b34:	ldrh	r3, [r5, #80]	; 0x50
 b38:	cmp	r3, #4
 b3c:	beq	b20 <flattened_map+0x198>
 b40:	ldr	r3, [pc, #236]	; c34 <flattened_map+0x2ac>
 b44:	ldr	r3, [r7, r3]
 b48:	ldr	r3, [r3, #12]
 b4c:	cmp	r3, #0
 b50:	bne	b68 <flattened_map+0x1e0>
 b54:	ldr	r3, [r5, #64]	; 0x40
 b58:	and	r8, r3, #2048	; 0x800
 b5c:	mov	r9, #0
 b60:	orrs	r3, r8, r9
 b64:	bne	b20 <flattened_map+0x198>
 b68:	ldr	r3, [pc, #180]	; c24 <flattened_map+0x29c>
 b6c:	ldr	r3, [r7, r3]
 b70:	ldr	r3, [r3, #8]
 b74:	cmp	r3, sl
 b78:	beq	ab0 <flattened_map+0x128>
 b7c:	mov	r2, #512	; 0x200
 b80:	ldr	r1, [pc, #176]	; c38 <flattened_map+0x2b0>
 b84:	add	r1, pc, r1
 b88:	add	r0, sp, #16
 b8c:	bl	59c <rb_strlcpy@plt>
 b90:	mov	r2, #512	; 0x200
 b94:	add	r1, r5, #88	; 0x58
 b98:	add	r6, sp, #16
 b9c:	mov	r0, r6
 ba0:	bl	5a8 <rb_strlcat@plt>
 ba4:	mov	r0, r6
 ba8:	bl	578 <strlen@plt>
 bac:	add	r3, sp, #528	; 0x210
 bb0:	add	r3, r3, r0
 bb4:	mov	r2, #32
 bb8:	strb	r2, [r3, #-512]	; 0xfffffe00
 bbc:	sub	r3, r0, #49	; 0x31
 bc0:	cmn	r3, #-2147483598	; 0x80000032
 bc4:	bls	ac8 <flattened_map+0x140>
 bc8:	add	r0, r0, #1
 bcc:	add	r3, sp, #16
 bd0:	add	r0, r3, r0
 bd4:	add	r3, sp, #66	; 0x42
 bd8:	mov	r2, #45	; 0x2d
 bdc:	strb	r2, [r0], #1
 be0:	cmp	r0, r3
 be4:	bne	bdc <flattened_map+0x254>
 be8:	b	ac8 <flattened_map+0x140>
 bec:	add	sp, sp, #532	; 0x214
 bf0:	vpop	{d8}
 bf4:	ldrd	r4, [sp]
 bf8:	ldrd	r6, [sp, #8]
 bfc:	ldrd	r8, [sp, #16]
 c00:	ldrd	sl, [sp, #24]
 c04:	add	sp, sp, #32
 c08:	pop	{pc}		; (ldr pc, [sp], #4)
 c0c:	.word	0x42c80000
 c10:	.word	0x0001064c
 c14:	.word	0x00000048
 c18:	.word	0x00000038
 c1c:	.word	0x00000338
 c20:	.word	0x00000308
 c24:	.word	0x0000002c
 c28:	.word	0x000002f0
 c2c:	.word	0x000002cc
 c30:	.word	0x000002ec
 c34:	.word	0x0000003c
 c38:	.word	0x00000228

00000c3c <m_map>:
 c3c:	str	r4, [sp, #-8]!
 c40:	str	lr, [sp, #4]
 c44:	sub	sp, sp, #8
 c48:	mov	r4, r1
 c4c:	ldr	r1, [pc, #160]	; cf4 <m_map+0xb8>
 c50:	add	r1, pc, r1
 c54:	ldr	r0, [r2, #64]	; 0x40
 c58:	and	r2, r0, #67108864	; 0x4000000
 c5c:	mov	r3, #0
 c60:	orrs	r3, r2, r3
 c64:	bne	c7c <m_map+0x40>
 c68:	ldr	r3, [pc, #136]	; cf8 <m_map+0xbc>
 c6c:	ldr	r3, [r1, r3]
 c70:	ldr	r3, [r3]
 c74:	cmp	r3, #0
 c78:	bne	c90 <m_map+0x54>
 c7c:	ldr	r3, [pc, #120]	; cfc <m_map+0xc0>
 c80:	ldr	r3, [r1, r3]
 c84:	ldr	r3, [r3, #176]	; 0xb0
 c88:	cmp	r3, #0
 c8c:	beq	cbc <m_map+0x80>
 c90:	mov	r0, r4
 c94:	bl	988 <flattened_map>
 c98:	ldr	r2, [pc, #96]	; d00 <m_map+0xc4>
 c9c:	add	r2, pc, r2
 ca0:	mov	r1, #17
 ca4:	mov	r0, r4
 ca8:	bl	56c <sendto_one_numeric@plt>
 cac:	add	sp, sp, #8
 cb0:	ldr	r4, [sp]
 cb4:	add	sp, sp, #4
 cb8:	pop	{pc}		; (ldr pc, [sp], #4)
 cbc:	ldr	r3, [pc, #64]	; d04 <m_map+0xc8>
 cc0:	ldr	r3, [r1, r3]
 cc4:	str	r3, [sp, #4]
 cc8:	ldr	r2, [pc, #56]	; d08 <m_map+0xcc>
 ccc:	add	r2, pc, r2
 cd0:	mov	r1, r3
 cd4:	mov	r0, r4
 cd8:	bl	6d8 <dump_map>
 cdc:	ldr	r2, [pc, #40]	; d0c <m_map+0xd0>
 ce0:	add	r2, pc, r2
 ce4:	mov	r1, #17
 ce8:	mov	r0, r4
 cec:	bl	56c <sendto_one_numeric@plt>
 cf0:	b	cac <m_map+0x70>
 cf4:	.word	0x000103a8
 cf8:	.word	0x0000003c
 cfc:	.word	0x0000004c
 d00:	.word	0x000000dc
 d04:	.word	0x00000048
 d08:	.word	0x000103f8
 d0c:	.word	0x00000098

Disassembly of section .fini:

00000d10 <_fini>:
 d10:	push	{r3, lr}
 d14:	pop	{r3, pc}
