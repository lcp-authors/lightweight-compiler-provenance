
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

00011220 <.init>:
   11220:	push	{r3, lr}
   11224:	bl	1166c <__assert_fail@plt+0x48>
   11228:	pop	{r3, pc}

Disassembly of section .plt:

0001122c <fstatfs64@plt-0x14>:
   1122c:	push	{lr}		; (str lr, [sp, #-4]!)
   11230:	ldr	lr, [pc, #4]	; 1123c <fstatfs64@plt-0x4>
   11234:	add	lr, pc, lr
   11238:	ldr	pc, [lr, #8]!
   1123c:	andeq	pc, r1, r4, asr #27

00011240 <fstatfs64@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #126976	; 0x1f000
   11248:	ldr	pc, [ip, #3524]!	; 0xdc4

0001124c <calloc@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #126976	; 0x1f000
   11254:	ldr	pc, [ip, #3516]!	; 0xdbc

00011258 <fputs_unlocked@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #126976	; 0x1f000
   11260:	ldr	pc, [ip, #3508]!	; 0xdb4

00011264 <raise@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #126976	; 0x1f000
   1126c:	ldr	pc, [ip, #3500]!	; 0xdac

00011270 <is_selinux_enabled@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #126976	; 0x1f000
   11278:	ldr	pc, [ip, #3492]!	; 0xda4

0001127c <strcmp@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #126976	; 0x1f000
   11284:	ldr	pc, [ip, #3484]!	; 0xd9c

00011288 <printf@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #126976	; 0x1f000
   11290:	ldr	pc, [ip, #3476]!	; 0xd94

00011294 <fflush@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #126976	; 0x1f000
   1129c:	ldr	pc, [ip, #3468]!	; 0xd8c

000112a0 <lsetfilecon@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #126976	; 0x1f000
   112a8:	ldr	pc, [ip, #3460]!	; 0xd84

000112ac <memmove@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #126976	; 0x1f000
   112b4:	ldr	pc, [ip, #3452]!	; 0xd7c

000112b8 <free@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #126976	; 0x1f000
   112c0:	ldr	pc, [ip, #3444]!	; 0xd74

000112c4 <_exit@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #126976	; 0x1f000
   112cc:	ldr	pc, [ip, #3436]!	; 0xd6c

000112d0 <memcpy@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #126976	; 0x1f000
   112d8:	ldr	pc, [ip, #3428]!	; 0xd64

000112dc <mbsinit@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #126976	; 0x1f000
   112e4:	ldr	pc, [ip, #3420]!	; 0xd5c

000112e8 <context_new@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #126976	; 0x1f000
   112f0:	ldr	pc, [ip, #3412]!	; 0xd54

000112f4 <memcmp@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #126976	; 0x1f000
   112fc:	ldr	pc, [ip, #3404]!	; 0xd4c

00011300 <fputc_unlocked@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #126976	; 0x1f000
   11308:	ldr	pc, [ip, #3396]!	; 0xd44

0001130c <context_role_set@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #126976	; 0x1f000
   11314:	ldr	pc, [ip, #3388]!	; 0xd3c

00011318 <context_type_set@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #126976	; 0x1f000
   11320:	ldr	pc, [ip, #3380]!	; 0xd34

00011324 <realloc@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #126976	; 0x1f000
   1132c:	ldr	pc, [ip, #3372]!	; 0xd2c

00011330 <fgetfilecon@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #126976	; 0x1f000
   11338:	ldr	pc, [ip, #3364]!	; 0xd24

0001133c <textdomain@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #126976	; 0x1f000
   11344:	ldr	pc, [ip, #3356]!	; 0xd1c

00011348 <chdir@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #126976	; 0x1f000
   11350:	ldr	pc, [ip, #3348]!	; 0xd14

00011354 <__fxstatat64@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #126976	; 0x1f000
   1135c:	ldr	pc, [ip, #3340]!	; 0xd0c

00011360 <iswprint@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #126976	; 0x1f000
   11368:	ldr	pc, [ip, #3332]!	; 0xd04

0001136c <__fxstat64@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #126976	; 0x1f000
   11374:	ldr	pc, [ip, #3324]!	; 0xcfc

00011378 <fwrite@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #126976	; 0x1f000
   11380:	ldr	pc, [ip, #3316]!	; 0xcf4

00011384 <lseek64@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #126976	; 0x1f000
   1138c:	ldr	pc, [ip, #3308]!	; 0xcec

00011390 <__ctype_get_mb_cur_max@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #126976	; 0x1f000
   11398:	ldr	pc, [ip, #3300]!	; 0xce4

0001139c <strcpy@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #126976	; 0x1f000
   113a4:	ldr	pc, [ip, #3292]!	; 0xcdc

000113a8 <__fpending@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #126976	; 0x1f000
   113b0:	ldr	pc, [ip, #3284]!	; 0xcd4

000113b4 <ferror_unlocked@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #126976	; 0x1f000
   113bc:	ldr	pc, [ip, #3276]!	; 0xccc

000113c0 <mbrtowc@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #126976	; 0x1f000
   113c8:	ldr	pc, [ip, #3268]!	; 0xcc4

000113cc <error@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #126976	; 0x1f000
   113d4:	ldr	pc, [ip, #3260]!	; 0xcbc

000113d8 <security_check_context@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #126976	; 0x1f000
   113e0:	ldr	pc, [ip, #3252]!	; 0xcb4

000113e4 <open64@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #126976	; 0x1f000
   113ec:	ldr	pc, [ip, #3244]!	; 0xcac

000113f0 <lgetfilecon@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #126976	; 0x1f000
   113f8:	ldr	pc, [ip, #3236]!	; 0xca4

000113fc <malloc@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #126976	; 0x1f000
   11404:	ldr	pc, [ip, #3228]!	; 0xc9c

00011408 <__libc_start_main@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #126976	; 0x1f000
   11410:	ldr	pc, [ip, #3220]!	; 0xc94

00011414 <__freading@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #126976	; 0x1f000
   1141c:	ldr	pc, [ip, #3212]!	; 0xc8c

00011420 <__gmon_start__@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #126976	; 0x1f000
   11428:	ldr	pc, [ip, #3204]!	; 0xc84

0001142c <context_free@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #126976	; 0x1f000
   11434:	ldr	pc, [ip, #3196]!	; 0xc7c

00011438 <getopt_long@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #126976	; 0x1f000
   11440:	ldr	pc, [ip, #3188]!	; 0xc74

00011444 <__ctype_b_loc@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #126976	; 0x1f000
   1144c:	ldr	pc, [ip, #3180]!	; 0xc6c

00011450 <getcwd@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #126976	; 0x1f000
   11458:	ldr	pc, [ip, #3172]!	; 0xc64

0001145c <exit@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #126976	; 0x1f000
   11464:	ldr	pc, [ip, #3164]!	; 0xc5c

00011468 <context_user_set@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #126976	; 0x1f000
   11470:	ldr	pc, [ip, #3156]!	; 0xc54

00011474 <gettext@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #126976	; 0x1f000
   1147c:	ldr	pc, [ip, #3148]!	; 0xc4c

00011480 <getfilecon@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #126976	; 0x1f000
   11488:	ldr	pc, [ip, #3140]!	; 0xc44

0001148c <strlen@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #126976	; 0x1f000
   11494:	ldr	pc, [ip, #3132]!	; 0xc3c

00011498 <openat64@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #126976	; 0x1f000
   114a0:	ldr	pc, [ip, #3124]!	; 0xc34

000114a4 <memrchr@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #126976	; 0x1f000
   114ac:	ldr	pc, [ip, #3116]!	; 0xc2c

000114b0 <fprintf@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #126976	; 0x1f000
   114b8:	ldr	pc, [ip, #3108]!	; 0xc24

000114bc <__errno_location@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #126976	; 0x1f000
   114c4:	ldr	pc, [ip, #3100]!	; 0xc1c

000114c8 <__cxa_atexit@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #126976	; 0x1f000
   114d0:	ldr	pc, [ip, #3092]!	; 0xc14

000114d4 <memset@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #126976	; 0x1f000
   114dc:	ldr	pc, [ip, #3084]!	; 0xc0c

000114e0 <fileno@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #126976	; 0x1f000
   114e8:	ldr	pc, [ip, #3076]!	; 0xc04

000114ec <memchr@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #126976	; 0x1f000
   114f4:	ldr	pc, [ip, #3068]!	; 0xbfc

000114f8 <setfilecon@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #126976	; 0x1f000
   11500:	ldr	pc, [ip, #3060]!	; 0xbf4

00011504 <access@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #126976	; 0x1f000
   1150c:	ldr	pc, [ip, #3052]!	; 0xbec

00011510 <fclose@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #126976	; 0x1f000
   11518:	ldr	pc, [ip, #3044]!	; 0xbe4

0001151c <fseeko64@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #126976	; 0x1f000
   11524:	ldr	pc, [ip, #3036]!	; 0xbdc

00011528 <fcntl64@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #126976	; 0x1f000
   11530:	ldr	pc, [ip, #3028]!	; 0xbd4

00011534 <setlocale@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #126976	; 0x1f000
   1153c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011540 <strrchr@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #126976	; 0x1f000
   11548:	ldr	pc, [ip, #3012]!	; 0xbc4

0001154c <nl_langinfo@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #126976	; 0x1f000
   11554:	ldr	pc, [ip, #3004]!	; 0xbbc

00011558 <sprintf@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #126976	; 0x1f000
   11560:	ldr	pc, [ip, #2996]!	; 0xbb4

00011564 <readdir64@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #126976	; 0x1f000
   1156c:	ldr	pc, [ip, #2988]!	; 0xbac

00011570 <fdopendir@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #126976	; 0x1f000
   11578:	ldr	pc, [ip, #2980]!	; 0xba4

0001157c <dirfd@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #126976	; 0x1f000
   11584:	ldr	pc, [ip, #2972]!	; 0xb9c

00011588 <fchdir@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #126976	; 0x1f000
   11590:	ldr	pc, [ip, #2964]!	; 0xb94

00011594 <qsort@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #126976	; 0x1f000
   1159c:	ldr	pc, [ip, #2956]!	; 0xb8c

000115a0 <freecon@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #126976	; 0x1f000
   115a8:	ldr	pc, [ip, #2948]!	; 0xb84

000115ac <bindtextdomain@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #126976	; 0x1f000
   115b4:	ldr	pc, [ip, #2940]!	; 0xb7c

000115b8 <context_range_set@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #126976	; 0x1f000
   115c0:	ldr	pc, [ip, #2932]!	; 0xb74

000115c4 <context_str@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #126976	; 0x1f000
   115cc:	ldr	pc, [ip, #2924]!	; 0xb6c

000115d0 <__xstat64@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #126976	; 0x1f000
   115d8:	ldr	pc, [ip, #2916]!	; 0xb64

000115dc <strncmp@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #126976	; 0x1f000
   115e4:	ldr	pc, [ip, #2908]!	; 0xb5c

000115e8 <abort@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #126976	; 0x1f000
   115f0:	ldr	pc, [ip, #2900]!	; 0xb54

000115f4 <close@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #126976	; 0x1f000
   115fc:	ldr	pc, [ip, #2892]!	; 0xb4c

00011600 <__lxstat64@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #126976	; 0x1f000
   11608:	ldr	pc, [ip, #2884]!	; 0xb44

0001160c <closedir@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #126976	; 0x1f000
   11614:	ldr	pc, [ip, #2876]!	; 0xb3c

00011618 <strspn@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #126976	; 0x1f000
   11620:	ldr	pc, [ip, #2868]!	; 0xb34

00011624 <__assert_fail@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #126976	; 0x1f000
   1162c:	ldr	pc, [ip, #2860]!	; 0xb2c

Disassembly of section .text:

00011630 <.text>:
   11630:	mov	fp, #0
   11634:	mov	lr, #0
   11638:	pop	{r1}		; (ldr r1, [sp], #4)
   1163c:	mov	r2, sp
   11640:	push	{r2}		; (str r2, [sp, #-4]!)
   11644:	push	{r0}		; (str r0, [sp, #-4]!)
   11648:	ldr	ip, [pc, #16]	; 11660 <__assert_fail@plt+0x3c>
   1164c:	push	{ip}		; (str ip, [sp, #-4]!)
   11650:	ldr	r0, [pc, #12]	; 11664 <__assert_fail@plt+0x40>
   11654:	ldr	r3, [pc, #12]	; 11668 <__assert_fail@plt+0x44>
   11658:	bl	11408 <__libc_start_main@plt>
   1165c:	bl	115e8 <abort@plt>
   11660:	andeq	lr, r1, r4, ror #31
   11664:	andeq	r2, r1, r0, lsl #14
   11668:	andeq	lr, r1, r4, lsl #31
   1166c:	ldr	r3, [pc, #20]	; 11688 <__assert_fail@plt+0x64>
   11670:	ldr	r2, [pc, #20]	; 1168c <__assert_fail@plt+0x68>
   11674:	add	r3, pc, r3
   11678:	ldr	r2, [r3, r2]
   1167c:	cmp	r2, #0
   11680:	bxeq	lr
   11684:	b	11420 <__gmon_start__@plt>
   11688:	andeq	pc, r1, r4, lsl #19
   1168c:	andeq	r0, r0, ip, asr r1
   11690:	ldr	r3, [pc, #28]	; 116b4 <__assert_fail@plt+0x90>
   11694:	ldr	r0, [pc, #28]	; 116b8 <__assert_fail@plt+0x94>
   11698:	sub	r3, r3, r0
   1169c:	cmp	r3, #6
   116a0:	bxls	lr
   116a4:	ldr	r3, [pc, #16]	; 116bc <__assert_fail@plt+0x98>
   116a8:	cmp	r3, #0
   116ac:	bxeq	lr
   116b0:	bx	r3
   116b4:			; <UNDEFINED> instruction: 0x000311b3
   116b8:			; <UNDEFINED> instruction: 0x000311b0
   116bc:	andeq	r0, r0, r0
   116c0:	ldr	r1, [pc, #36]	; 116ec <__assert_fail@plt+0xc8>
   116c4:	ldr	r0, [pc, #36]	; 116f0 <__assert_fail@plt+0xcc>
   116c8:	sub	r1, r1, r0
   116cc:	asr	r1, r1, #2
   116d0:	add	r1, r1, r1, lsr #31
   116d4:	asrs	r1, r1, #1
   116d8:	bxeq	lr
   116dc:	ldr	r3, [pc, #16]	; 116f4 <__assert_fail@plt+0xd0>
   116e0:	cmp	r3, #0
   116e4:	bxeq	lr
   116e8:	bx	r3
   116ec:			; <UNDEFINED> instruction: 0x000311b0
   116f0:			; <UNDEFINED> instruction: 0x000311b0
   116f4:	andeq	r0, r0, r0
   116f8:	push	{r4, lr}
   116fc:	ldr	r4, [pc, #24]	; 1171c <__assert_fail@plt+0xf8>
   11700:	ldrb	r3, [r4]
   11704:	cmp	r3, #0
   11708:	popne	{r4, pc}
   1170c:	bl	11690 <__assert_fail@plt+0x6c>
   11710:	mov	r3, #1
   11714:	strb	r3, [r4]
   11718:	pop	{r4, pc}
   1171c:	andeq	r1, r3, ip, asr #3
   11720:	ldr	r0, [pc, #40]	; 11750 <__assert_fail@plt+0x12c>
   11724:	ldr	r3, [r0]
   11728:	cmp	r3, #0
   1172c:	bne	11734 <__assert_fail@plt+0x110>
   11730:	b	116c0 <__assert_fail@plt+0x9c>
   11734:	ldr	r3, [pc, #24]	; 11754 <__assert_fail@plt+0x130>
   11738:	cmp	r3, #0
   1173c:	beq	11730 <__assert_fail@plt+0x10c>
   11740:	push	{r4, lr}
   11744:	blx	r3
   11748:	pop	{r4, lr}
   1174c:	b	116c0 <__assert_fail@plt+0x9c>
   11750:	andeq	r0, r3, ip, lsl #30
   11754:	andeq	r0, r0, r0
   11758:	push	{fp, lr}
   1175c:	add	fp, sp, #4
   11760:	ldr	r0, [pc, #32]	; 11788 <__assert_fail@plt+0x164>
   11764:	bl	11474 <gettext@plt>
   11768:	mov	r2, r0
   1176c:	ldr	r3, [pc, #24]	; 1178c <__assert_fail@plt+0x168>
   11770:	ldr	r3, [r3]
   11774:	mov	r1, r3
   11778:	mov	r0, r2
   1177c:	bl	11258 <fputs_unlocked@plt>
   11780:	nop			; (mov r0, r0)
   11784:	pop	{fp, pc}
   11788:	andeq	pc, r1, r4, rrx
   1178c:	andeq	r1, r3, r4, asr #3
   11790:	push	{fp, lr}
   11794:	add	fp, sp, #4
   11798:	sub	sp, sp, #80	; 0x50
   1179c:	str	r0, [fp, #-80]	; 0xffffffb0
   117a0:	ldr	r3, [pc, #348]	; 11904 <__assert_fail@plt+0x2e0>
   117a4:	sub	ip, fp, #72	; 0x48
   117a8:	mov	lr, r3
   117ac:	ldm	lr!, {r0, r1, r2, r3}
   117b0:	stmia	ip!, {r0, r1, r2, r3}
   117b4:	ldm	lr!, {r0, r1, r2, r3}
   117b8:	stmia	ip!, {r0, r1, r2, r3}
   117bc:	ldm	lr!, {r0, r1, r2, r3}
   117c0:	stmia	ip!, {r0, r1, r2, r3}
   117c4:	ldm	lr, {r0, r1}
   117c8:	stm	ip, {r0, r1}
   117cc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   117d0:	str	r3, [fp, #-8]
   117d4:	sub	r3, fp, #72	; 0x48
   117d8:	str	r3, [fp, #-12]
   117dc:	b	117ec <__assert_fail@plt+0x1c8>
   117e0:	ldr	r3, [fp, #-12]
   117e4:	add	r3, r3, #8
   117e8:	str	r3, [fp, #-12]
   117ec:	ldr	r3, [fp, #-12]
   117f0:	ldr	r3, [r3]
   117f4:	cmp	r3, #0
   117f8:	beq	1181c <__assert_fail@plt+0x1f8>
   117fc:	ldr	r3, [fp, #-12]
   11800:	ldr	r3, [r3]
   11804:	mov	r1, r3
   11808:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1180c:	bl	1127c <strcmp@plt>
   11810:	mov	r3, r0
   11814:	cmp	r3, #0
   11818:	bne	117e0 <__assert_fail@plt+0x1bc>
   1181c:	ldr	r3, [fp, #-12]
   11820:	ldr	r3, [r3, #4]
   11824:	cmp	r3, #0
   11828:	beq	11838 <__assert_fail@plt+0x214>
   1182c:	ldr	r3, [fp, #-12]
   11830:	ldr	r3, [r3, #4]
   11834:	str	r3, [fp, #-8]
   11838:	ldr	r0, [pc, #200]	; 11908 <__assert_fail@plt+0x2e4>
   1183c:	bl	11474 <gettext@plt>
   11840:	mov	r3, r0
   11844:	ldr	r2, [pc, #192]	; 1190c <__assert_fail@plt+0x2e8>
   11848:	ldr	r1, [pc, #192]	; 11910 <__assert_fail@plt+0x2ec>
   1184c:	mov	r0, r3
   11850:	bl	11288 <printf@plt>
   11854:	mov	r1, #0
   11858:	mov	r0, #5
   1185c:	bl	11534 <setlocale@plt>
   11860:	str	r0, [fp, #-16]
   11864:	ldr	r3, [fp, #-16]
   11868:	cmp	r3, #0
   1186c:	beq	118ac <__assert_fail@plt+0x288>
   11870:	mov	r2, #3
   11874:	ldr	r1, [pc, #152]	; 11914 <__assert_fail@plt+0x2f0>
   11878:	ldr	r0, [fp, #-16]
   1187c:	bl	115dc <strncmp@plt>
   11880:	mov	r3, r0
   11884:	cmp	r3, #0
   11888:	beq	118ac <__assert_fail@plt+0x288>
   1188c:	ldr	r0, [pc, #132]	; 11918 <__assert_fail@plt+0x2f4>
   11890:	bl	11474 <gettext@plt>
   11894:	mov	r2, r0
   11898:	ldr	r3, [pc, #124]	; 1191c <__assert_fail@plt+0x2f8>
   1189c:	ldr	r3, [r3]
   118a0:	mov	r1, r3
   118a4:	mov	r0, r2
   118a8:	bl	11258 <fputs_unlocked@plt>
   118ac:	ldr	r0, [pc, #108]	; 11920 <__assert_fail@plt+0x2fc>
   118b0:	bl	11474 <gettext@plt>
   118b4:	mov	r3, r0
   118b8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   118bc:	ldr	r1, [pc, #72]	; 1190c <__assert_fail@plt+0x2e8>
   118c0:	mov	r0, r3
   118c4:	bl	11288 <printf@plt>
   118c8:	ldr	r0, [pc, #84]	; 11924 <__assert_fail@plt+0x300>
   118cc:	bl	11474 <gettext@plt>
   118d0:	ldr	r2, [fp, #-8]
   118d4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   118d8:	cmp	r2, r3
   118dc:	bne	118e8 <__assert_fail@plt+0x2c4>
   118e0:	ldr	r3, [pc, #64]	; 11928 <__assert_fail@plt+0x304>
   118e4:	b	118ec <__assert_fail@plt+0x2c8>
   118e8:	ldr	r3, [pc, #60]	; 1192c <__assert_fail@plt+0x308>
   118ec:	mov	r2, r3
   118f0:	ldr	r1, [fp, #-8]
   118f4:	bl	11288 <printf@plt>
   118f8:	nop			; (mov r0, r0)
   118fc:	sub	sp, fp, #4
   11900:	pop	{fp, pc}
   11904:	andeq	pc, r1, r4, lsr #4
   11908:	strheq	pc, [r1], -r0	; <UNPREDICTABLE>
   1190c:	andeq	pc, r1, r8, asr #1
   11910:	strdeq	pc, [r1], -r0
   11914:	andeq	pc, r1, r0, lsl #2
   11918:	andeq	pc, r1, r4, lsl #2
   1191c:	andeq	r1, r3, r4, asr #3
   11920:	andeq	pc, r1, ip, asr #2
   11924:	andeq	pc, r1, r8, ror #2
   11928:	muleq	r1, ip, r1
   1192c:	andeq	pc, r1, r8, lsr #3
   11930:	push	{r4, r5, fp, lr}
   11934:	add	fp, sp, #12
   11938:	sub	sp, sp, #32
   1193c:	str	r0, [fp, #-32]	; 0xffffffe0
   11940:	str	r1, [fp, #-36]	; 0xffffffdc
   11944:	mov	r3, #1
   11948:	strb	r3, [fp, #-13]
   1194c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11950:	bl	112e8 <context_new@plt>
   11954:	str	r0, [fp, #-20]	; 0xffffffec
   11958:	ldr	r3, [fp, #-20]	; 0xffffffec
   1195c:	cmp	r3, #0
   11960:	bne	119a0 <__assert_fail@plt+0x37c>
   11964:	bl	114bc <__errno_location@plt>
   11968:	mov	r3, r0
   1196c:	ldr	r4, [r3]
   11970:	ldr	r0, [pc, #632]	; 11bf0 <__assert_fail@plt+0x5cc>
   11974:	bl	11474 <gettext@plt>
   11978:	mov	r5, r0
   1197c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11980:	bl	1a76c <__assert_fail@plt+0x9148>
   11984:	mov	r3, r0
   11988:	mov	r2, r5
   1198c:	mov	r1, r4
   11990:	mov	r0, #0
   11994:	bl	113cc <error@plt>
   11998:	mov	r3, #1
   1199c:	b	11be4 <__assert_fail@plt+0x5c0>
   119a0:	ldr	r3, [pc, #588]	; 11bf4 <__assert_fail@plt+0x5d0>
   119a4:	ldr	r3, [r3]
   119a8:	cmp	r3, #0
   119ac:	beq	11a1c <__assert_fail@plt+0x3f8>
   119b0:	ldr	r3, [pc, #572]	; 11bf4 <__assert_fail@plt+0x5d0>
   119b4:	ldr	r3, [r3]
   119b8:	mov	r1, r3
   119bc:	ldr	r0, [fp, #-20]	; 0xffffffec
   119c0:	bl	11468 <context_user_set@plt>
   119c4:	mov	r3, r0
   119c8:	cmp	r3, #0
   119cc:	beq	11a1c <__assert_fail@plt+0x3f8>
   119d0:	bl	114bc <__errno_location@plt>
   119d4:	mov	r3, r0
   119d8:	ldr	r4, [r3]
   119dc:	ldr	r0, [pc, #532]	; 11bf8 <__assert_fail@plt+0x5d4>
   119e0:	bl	11474 <gettext@plt>
   119e4:	mov	r5, r0
   119e8:	ldr	r3, [pc, #516]	; 11bf4 <__assert_fail@plt+0x5d0>
   119ec:	ldr	r3, [r3]
   119f0:	mov	r0, r3
   119f4:	bl	1a76c <__assert_fail@plt+0x9148>
   119f8:	mov	r3, r0
   119fc:	str	r3, [sp]
   11a00:	ldr	r3, [pc, #500]	; 11bfc <__assert_fail@plt+0x5d8>
   11a04:	mov	r2, r5
   11a08:	mov	r1, r4
   11a0c:	mov	r0, #0
   11a10:	bl	113cc <error@plt>
   11a14:	mov	r3, #0
   11a18:	strb	r3, [fp, #-13]
   11a1c:	ldr	r3, [pc, #476]	; 11c00 <__assert_fail@plt+0x5dc>
   11a20:	ldr	r3, [r3]
   11a24:	cmp	r3, #0
   11a28:	beq	11a98 <__assert_fail@plt+0x474>
   11a2c:	ldr	r3, [pc, #460]	; 11c00 <__assert_fail@plt+0x5dc>
   11a30:	ldr	r3, [r3]
   11a34:	mov	r1, r3
   11a38:	ldr	r0, [fp, #-20]	; 0xffffffec
   11a3c:	bl	115b8 <context_range_set@plt>
   11a40:	mov	r3, r0
   11a44:	cmp	r3, #0
   11a48:	beq	11a98 <__assert_fail@plt+0x474>
   11a4c:	bl	114bc <__errno_location@plt>
   11a50:	mov	r3, r0
   11a54:	ldr	r4, [r3]
   11a58:	ldr	r0, [pc, #408]	; 11bf8 <__assert_fail@plt+0x5d4>
   11a5c:	bl	11474 <gettext@plt>
   11a60:	mov	r5, r0
   11a64:	ldr	r3, [pc, #404]	; 11c00 <__assert_fail@plt+0x5dc>
   11a68:	ldr	r3, [r3]
   11a6c:	mov	r0, r3
   11a70:	bl	1a76c <__assert_fail@plt+0x9148>
   11a74:	mov	r3, r0
   11a78:	str	r3, [sp]
   11a7c:	ldr	r3, [pc, #384]	; 11c04 <__assert_fail@plt+0x5e0>
   11a80:	mov	r2, r5
   11a84:	mov	r1, r4
   11a88:	mov	r0, #0
   11a8c:	bl	113cc <error@plt>
   11a90:	mov	r3, #0
   11a94:	strb	r3, [fp, #-13]
   11a98:	ldr	r3, [pc, #360]	; 11c08 <__assert_fail@plt+0x5e4>
   11a9c:	ldr	r3, [r3]
   11aa0:	cmp	r3, #0
   11aa4:	beq	11b14 <__assert_fail@plt+0x4f0>
   11aa8:	ldr	r3, [pc, #344]	; 11c08 <__assert_fail@plt+0x5e4>
   11aac:	ldr	r3, [r3]
   11ab0:	mov	r1, r3
   11ab4:	ldr	r0, [fp, #-20]	; 0xffffffec
   11ab8:	bl	1130c <context_role_set@plt>
   11abc:	mov	r3, r0
   11ac0:	cmp	r3, #0
   11ac4:	beq	11b14 <__assert_fail@plt+0x4f0>
   11ac8:	bl	114bc <__errno_location@plt>
   11acc:	mov	r3, r0
   11ad0:	ldr	r4, [r3]
   11ad4:	ldr	r0, [pc, #284]	; 11bf8 <__assert_fail@plt+0x5d4>
   11ad8:	bl	11474 <gettext@plt>
   11adc:	mov	r5, r0
   11ae0:	ldr	r3, [pc, #288]	; 11c08 <__assert_fail@plt+0x5e4>
   11ae4:	ldr	r3, [r3]
   11ae8:	mov	r0, r3
   11aec:	bl	1a76c <__assert_fail@plt+0x9148>
   11af0:	mov	r3, r0
   11af4:	str	r3, [sp]
   11af8:	ldr	r3, [pc, #268]	; 11c0c <__assert_fail@plt+0x5e8>
   11afc:	mov	r2, r5
   11b00:	mov	r1, r4
   11b04:	mov	r0, #0
   11b08:	bl	113cc <error@plt>
   11b0c:	mov	r3, #0
   11b10:	strb	r3, [fp, #-13]
   11b14:	ldr	r3, [pc, #244]	; 11c10 <__assert_fail@plt+0x5ec>
   11b18:	ldr	r3, [r3]
   11b1c:	cmp	r3, #0
   11b20:	beq	11b90 <__assert_fail@plt+0x56c>
   11b24:	ldr	r3, [pc, #228]	; 11c10 <__assert_fail@plt+0x5ec>
   11b28:	ldr	r3, [r3]
   11b2c:	mov	r1, r3
   11b30:	ldr	r0, [fp, #-20]	; 0xffffffec
   11b34:	bl	11318 <context_type_set@plt>
   11b38:	mov	r3, r0
   11b3c:	cmp	r3, #0
   11b40:	beq	11b90 <__assert_fail@plt+0x56c>
   11b44:	bl	114bc <__errno_location@plt>
   11b48:	mov	r3, r0
   11b4c:	ldr	r4, [r3]
   11b50:	ldr	r0, [pc, #160]	; 11bf8 <__assert_fail@plt+0x5d4>
   11b54:	bl	11474 <gettext@plt>
   11b58:	mov	r5, r0
   11b5c:	ldr	r3, [pc, #172]	; 11c10 <__assert_fail@plt+0x5ec>
   11b60:	ldr	r3, [r3]
   11b64:	mov	r0, r3
   11b68:	bl	1a76c <__assert_fail@plt+0x9148>
   11b6c:	mov	r3, r0
   11b70:	str	r3, [sp]
   11b74:	ldr	r3, [pc, #152]	; 11c14 <__assert_fail@plt+0x5f0>
   11b78:	mov	r2, r5
   11b7c:	mov	r1, r4
   11b80:	mov	r0, #0
   11b84:	bl	113cc <error@plt>
   11b88:	mov	r3, #0
   11b8c:	strb	r3, [fp, #-13]
   11b90:	ldrb	r3, [fp, #-13]
   11b94:	eor	r3, r3, #1
   11b98:	uxtb	r3, r3
   11b9c:	cmp	r3, #0
   11ba0:	beq	11bd4 <__assert_fail@plt+0x5b0>
   11ba4:	bl	114bc <__errno_location@plt>
   11ba8:	mov	r3, r0
   11bac:	ldr	r3, [r3]
   11bb0:	str	r3, [fp, #-24]	; 0xffffffe8
   11bb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   11bb8:	bl	1142c <context_free@plt>
   11bbc:	bl	114bc <__errno_location@plt>
   11bc0:	mov	r2, r0
   11bc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11bc8:	str	r3, [r2]
   11bcc:	mov	r3, #1
   11bd0:	b	11be4 <__assert_fail@plt+0x5c0>
   11bd4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11bd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   11bdc:	str	r2, [r3]
   11be0:	mov	r3, #0
   11be4:	mov	r0, r3
   11be8:	sub	sp, fp, #12
   11bec:	pop	{r4, r5, fp, pc}
   11bf0:	andeq	pc, r1, ip, asr #7
   11bf4:	ldrdeq	r1, [r3], -ip
   11bf8:	strdeq	pc, [r1], -r4
   11bfc:			; <UNDEFINED> instruction: 0x0001f2b4
   11c00:	andeq	r1, r3, r4, ror #3
   11c04:	andeq	pc, r1, ip, asr #5
   11c08:	andeq	r1, r3, r0, ror #3
   11c0c:			; <UNDEFINED> instruction: 0x0001f2bc
   11c10:	andeq	r1, r3, r8, ror #3
   11c14:	andeq	pc, r1, r4, asr #5
   11c18:	push	{r4, r5, r6, fp, lr}
   11c1c:	add	fp, sp, #16
   11c20:	sub	sp, sp, #44	; 0x2c
   11c24:	str	r0, [fp, #-48]	; 0xffffffd0
   11c28:	str	r1, [fp, #-52]	; 0xffffffcc
   11c2c:	mov	r3, #0
   11c30:	str	r3, [fp, #-40]	; 0xffffffd8
   11c34:	mov	r3, #0
   11c38:	str	r3, [fp, #-44]	; 0xffffffd4
   11c3c:	mov	r3, #0
   11c40:	str	r3, [fp, #-28]	; 0xffffffe4
   11c44:	ldr	r3, [pc, #576]	; 11e8c <__assert_fail@plt+0x868>
   11c48:	ldr	r3, [r3]
   11c4c:	cmp	r3, #0
   11c50:	bne	11d78 <__assert_fail@plt+0x754>
   11c54:	ldr	r3, [pc, #564]	; 11e90 <__assert_fail@plt+0x86c>
   11c58:	ldrb	r3, [r3]
   11c5c:	cmp	r3, #0
   11c60:	beq	11c80 <__assert_fail@plt+0x65c>
   11c64:	sub	r3, fp, #40	; 0x28
   11c68:	mov	r2, r3
   11c6c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11c70:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11c74:	bl	1a7f8 <__assert_fail@plt+0x91d4>
   11c78:	mov	r3, r0
   11c7c:	b	11c98 <__assert_fail@plt+0x674>
   11c80:	sub	r3, fp, #40	; 0x28
   11c84:	mov	r2, r3
   11c88:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11c8c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11c90:	bl	1aa6c <__assert_fail@plt+0x9448>
   11c94:	mov	r3, r0
   11c98:	str	r3, [fp, #-32]	; 0xffffffe0
   11c9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11ca0:	cmp	r3, #0
   11ca4:	bge	11cfc <__assert_fail@plt+0x6d8>
   11ca8:	bl	114bc <__errno_location@plt>
   11cac:	mov	r3, r0
   11cb0:	ldr	r3, [r3]
   11cb4:	cmp	r3, #61	; 0x3d
   11cb8:	beq	11cfc <__assert_fail@plt+0x6d8>
   11cbc:	bl	114bc <__errno_location@plt>
   11cc0:	mov	r3, r0
   11cc4:	ldr	r4, [r3]
   11cc8:	ldr	r0, [pc, #452]	; 11e94 <__assert_fail@plt+0x870>
   11ccc:	bl	11474 <gettext@plt>
   11cd0:	mov	r5, r0
   11cd4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11cd8:	mov	r0, #4
   11cdc:	bl	1a374 <__assert_fail@plt+0x8d50>
   11ce0:	mov	r3, r0
   11ce4:	mov	r2, r5
   11ce8:	mov	r1, r4
   11cec:	mov	r0, #0
   11cf0:	bl	113cc <error@plt>
   11cf4:	mov	r3, #1
   11cf8:	b	11e80 <__assert_fail@plt+0x85c>
   11cfc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11d00:	cmp	r3, #0
   11d04:	bne	11d3c <__assert_fail@plt+0x718>
   11d08:	ldr	r0, [pc, #392]	; 11e98 <__assert_fail@plt+0x874>
   11d0c:	bl	11474 <gettext@plt>
   11d10:	mov	r4, r0
   11d14:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11d18:	mov	r0, #4
   11d1c:	bl	1a374 <__assert_fail@plt+0x8d50>
   11d20:	mov	r3, r0
   11d24:	mov	r2, r4
   11d28:	mov	r1, #0
   11d2c:	mov	r0, #0
   11d30:	bl	113cc <error@plt>
   11d34:	mov	r3, #1
   11d38:	b	11e80 <__assert_fail@plt+0x85c>
   11d3c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11d40:	sub	r2, fp, #44	; 0x2c
   11d44:	mov	r1, r2
   11d48:	mov	r0, r3
   11d4c:	bl	11930 <__assert_fail@plt+0x30c>
   11d50:	mov	r3, r0
   11d54:	cmp	r3, #0
   11d58:	beq	11d64 <__assert_fail@plt+0x740>
   11d5c:	mov	r3, #1
   11d60:	b	11e80 <__assert_fail@plt+0x85c>
   11d64:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11d68:	mov	r0, r3
   11d6c:	bl	115c4 <context_str@plt>
   11d70:	str	r0, [fp, #-24]	; 0xffffffe8
   11d74:	b	11d84 <__assert_fail@plt+0x760>
   11d78:	ldr	r3, [pc, #268]	; 11e8c <__assert_fail@plt+0x868>
   11d7c:	ldr	r3, [r3]
   11d80:	str	r3, [fp, #-24]	; 0xffffffe8
   11d84:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11d88:	cmp	r3, #0
   11d8c:	beq	11dac <__assert_fail@plt+0x788>
   11d90:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11d94:	mov	r1, r3
   11d98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11d9c:	bl	1127c <strcmp@plt>
   11da0:	mov	r3, r0
   11da4:	cmp	r3, #0
   11da8:	beq	11e54 <__assert_fail@plt+0x830>
   11dac:	ldr	r3, [pc, #220]	; 11e90 <__assert_fail@plt+0x86c>
   11db0:	ldrb	r3, [r3]
   11db4:	cmp	r3, #0
   11db8:	beq	11dd4 <__assert_fail@plt+0x7b0>
   11dbc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11dc0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11dc4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11dc8:	bl	1ace0 <__assert_fail@plt+0x96bc>
   11dcc:	mov	r3, r0
   11dd0:	b	11de8 <__assert_fail@plt+0x7c4>
   11dd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11dd8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11ddc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11de0:	bl	1af54 <__assert_fail@plt+0x9930>
   11de4:	mov	r3, r0
   11de8:	str	r3, [fp, #-36]	; 0xffffffdc
   11dec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11df0:	cmp	r3, #0
   11df4:	beq	11e54 <__assert_fail@plt+0x830>
   11df8:	mov	r3, #1
   11dfc:	str	r3, [fp, #-28]	; 0xffffffe4
   11e00:	bl	114bc <__errno_location@plt>
   11e04:	mov	r3, r0
   11e08:	ldr	r4, [r3]
   11e0c:	ldr	r0, [pc, #136]	; 11e9c <__assert_fail@plt+0x878>
   11e10:	bl	11474 <gettext@plt>
   11e14:	mov	r5, r0
   11e18:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11e1c:	mov	r1, #4
   11e20:	mov	r0, #0
   11e24:	bl	1a2d8 <__assert_fail@plt+0x8cb4>
   11e28:	mov	r6, r0
   11e2c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11e30:	mov	r0, #1
   11e34:	bl	1a738 <__assert_fail@plt+0x9114>
   11e38:	mov	r3, r0
   11e3c:	str	r3, [sp]
   11e40:	mov	r3, r6
   11e44:	mov	r2, r5
   11e48:	mov	r1, r4
   11e4c:	mov	r0, #0
   11e50:	bl	113cc <error@plt>
   11e54:	ldr	r3, [pc, #48]	; 11e8c <__assert_fail@plt+0x868>
   11e58:	ldr	r3, [r3]
   11e5c:	cmp	r3, #0
   11e60:	bne	11e7c <__assert_fail@plt+0x858>
   11e64:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11e68:	mov	r0, r3
   11e6c:	bl	1142c <context_free@plt>
   11e70:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11e74:	mov	r0, r3
   11e78:	bl	115a0 <freecon@plt>
   11e7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11e80:	mov	r0, r3
   11e84:	sub	sp, fp, #16
   11e88:	pop	{r4, r5, r6, fp, pc}
   11e8c:	ldrdeq	r1, [r3], -r8
   11e90:	ldrdeq	r1, [r3], -r0
   11e94:	andeq	pc, r1, r8, lsr #8
   11e98:	andeq	pc, r1, r0, asr r4	; <UNPREDICTABLE>
   11e9c:	andeq	pc, r1, r4, lsl #9
   11ea0:	push	{r4, r5, fp, lr}
   11ea4:	add	fp, sp, #12
   11ea8:	sub	sp, sp, #40	; 0x28
   11eac:	str	r0, [fp, #-40]	; 0xffffffd8
   11eb0:	str	r1, [fp, #-44]	; 0xffffffd4
   11eb4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11eb8:	ldr	r3, [r3, #28]
   11ebc:	str	r3, [fp, #-20]	; 0xffffffec
   11ec0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11ec4:	ldr	r3, [r3, #24]
   11ec8:	str	r3, [fp, #-24]	; 0xffffffe8
   11ecc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11ed0:	add	r3, r3, #64	; 0x40
   11ed4:	str	r3, [fp, #-28]	; 0xffffffe4
   11ed8:	mov	r3, #1
   11edc:	strb	r3, [fp, #-13]
   11ee0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11ee4:	ldrh	r3, [r3, #56]	; 0x38
   11ee8:	sub	r3, r3, #1
   11eec:	cmp	r3, #9
   11ef0:	ldrls	pc, [pc, r3, lsl #2]
   11ef4:	b	121c8 <__assert_fail@plt+0xba4>
   11ef8:	andeq	r1, r1, r0, lsr #30
   11efc:	andeq	r2, r1, r8, ror r1
   11f00:	andeq	r2, r1, r8, asr #3
   11f04:	andeq	r2, r1, r8, lsr r1
   11f08:	andeq	r2, r1, r8, asr #3
   11f0c:	andeq	r2, r1, ip, asr r0
   11f10:	andeq	r2, r1, r0, lsl #2
   11f14:	andeq	r2, r1, r8, asr #3
   11f18:	andeq	r2, r1, r8, asr #3
   11f1c:	andeq	r2, r1, ip, ror r0
   11f20:	ldr	r3, [pc, #1156]	; 123ac <__assert_fail@plt+0xd88>
   11f24:	ldrb	r3, [r3]
   11f28:	cmp	r3, #0
   11f2c:	beq	121d0 <__assert_fail@plt+0xbac>
   11f30:	ldr	r3, [pc, #1144]	; 123b0 <__assert_fail@plt+0xd8c>
   11f34:	ldr	r3, [r3]
   11f38:	cmp	r3, #0
   11f3c:	beq	12054 <__assert_fail@plt+0xa30>
   11f40:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11f44:	ldrd	r0, [r3, #160]	; 0xa0
   11f48:	ldr	r3, [pc, #1120]	; 123b0 <__assert_fail@plt+0xd8c>
   11f4c:	ldr	r3, [r3]
   11f50:	ldrd	r2, [r3]
   11f54:	cmp	r1, r3
   11f58:	cmpeq	r0, r2
   11f5c:	bne	12054 <__assert_fail@plt+0xa30>
   11f60:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11f64:	ldrd	r0, [r3, #64]	; 0x40
   11f68:	ldr	r3, [pc, #1088]	; 123b0 <__assert_fail@plt+0xd8c>
   11f6c:	ldr	r3, [r3]
   11f70:	ldrd	r2, [r3, #8]
   11f74:	cmp	r1, r3
   11f78:	cmpeq	r0, r2
   11f7c:	bne	12054 <__assert_fail@plt+0xa30>
   11f80:	ldr	r1, [pc, #1068]	; 123b4 <__assert_fail@plt+0xd90>
   11f84:	ldr	r0, [fp, #-20]	; 0xffffffec
   11f88:	bl	1127c <strcmp@plt>
   11f8c:	mov	r3, r0
   11f90:	cmp	r3, #0
   11f94:	bne	11fc8 <__assert_fail@plt+0x9a4>
   11f98:	ldr	r0, [pc, #1048]	; 123b8 <__assert_fail@plt+0xd94>
   11f9c:	bl	11474 <gettext@plt>
   11fa0:	mov	r4, r0
   11fa4:	ldr	r1, [fp, #-20]	; 0xffffffec
   11fa8:	mov	r0, #4
   11fac:	bl	1a374 <__assert_fail@plt+0x8d50>
   11fb0:	mov	r3, r0
   11fb4:	mov	r2, r4
   11fb8:	mov	r1, #0
   11fbc:	mov	r0, #0
   11fc0:	bl	113cc <error@plt>
   11fc4:	b	12014 <__assert_fail@plt+0x9f0>
   11fc8:	ldr	r0, [pc, #1004]	; 123bc <__assert_fail@plt+0xd98>
   11fcc:	bl	11474 <gettext@plt>
   11fd0:	mov	r4, r0
   11fd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   11fd8:	mov	r1, #4
   11fdc:	mov	r0, #0
   11fe0:	bl	1a2d8 <__assert_fail@plt+0x8cb4>
   11fe4:	mov	r5, r0
   11fe8:	ldr	r2, [pc, #964]	; 123b4 <__assert_fail@plt+0xd90>
   11fec:	mov	r1, #4
   11ff0:	mov	r0, #1
   11ff4:	bl	1a2d8 <__assert_fail@plt+0x8cb4>
   11ff8:	mov	r3, r0
   11ffc:	str	r3, [sp]
   12000:	mov	r3, r5
   12004:	mov	r2, r4
   12008:	mov	r1, #0
   1200c:	mov	r0, #0
   12010:	bl	113cc <error@plt>
   12014:	ldr	r0, [pc, #932]	; 123c0 <__assert_fail@plt+0xd9c>
   12018:	bl	11474 <gettext@plt>
   1201c:	mov	r3, r0
   12020:	mov	r2, r3
   12024:	mov	r1, #0
   12028:	mov	r0, #0
   1202c:	bl	113cc <error@plt>
   12030:	mov	r2, #4
   12034:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12038:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1203c:	bl	148c8 <__assert_fail@plt+0x32a4>
   12040:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12044:	bl	14154 <__assert_fail@plt+0x2b30>
   12048:	str	r0, [fp, #-32]	; 0xffffffe0
   1204c:	mov	r3, #0
   12050:	b	123a0 <__assert_fail@plt+0xd7c>
   12054:	mov	r3, #1
   12058:	b	123a0 <__assert_fail@plt+0xd7c>
   1205c:	ldr	r3, [pc, #840]	; 123ac <__assert_fail@plt+0xd88>
   12060:	ldrb	r3, [r3]
   12064:	eor	r3, r3, #1
   12068:	uxtb	r3, r3
   1206c:	cmp	r3, #0
   12070:	beq	121d8 <__assert_fail@plt+0xbb4>
   12074:	mov	r3, #1
   12078:	b	123a0 <__assert_fail@plt+0xd7c>
   1207c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12080:	ldr	r3, [r3, #48]	; 0x30
   12084:	cmp	r3, #0
   12088:	bne	120c0 <__assert_fail@plt+0xa9c>
   1208c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12090:	ldr	r3, [r3, #16]
   12094:	cmp	r3, #0
   12098:	bne	120c0 <__assert_fail@plt+0xa9c>
   1209c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   120a0:	mov	r2, #1
   120a4:	str	r2, [r3, #16]
   120a8:	mov	r2, #1
   120ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   120b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   120b4:	bl	148c8 <__assert_fail@plt+0x32a4>
   120b8:	mov	r3, #1
   120bc:	b	123a0 <__assert_fail@plt+0xd7c>
   120c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   120c4:	ldr	r4, [r3, #32]
   120c8:	ldr	r0, [pc, #756]	; 123c4 <__assert_fail@plt+0xda0>
   120cc:	bl	11474 <gettext@plt>
   120d0:	mov	r5, r0
   120d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   120d8:	mov	r0, #4
   120dc:	bl	1a374 <__assert_fail@plt+0x8d50>
   120e0:	mov	r3, r0
   120e4:	mov	r2, r5
   120e8:	mov	r1, r4
   120ec:	mov	r0, #0
   120f0:	bl	113cc <error@plt>
   120f4:	mov	r3, #0
   120f8:	strb	r3, [fp, #-13]
   120fc:	b	121e4 <__assert_fail@plt+0xbc0>
   12100:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12104:	ldr	r4, [r3, #32]
   12108:	ldr	r2, [fp, #-20]	; 0xffffffec
   1210c:	mov	r1, #3
   12110:	mov	r0, #0
   12114:	bl	1a4fc <__assert_fail@plt+0x8ed8>
   12118:	mov	r3, r0
   1211c:	ldr	r2, [pc, #676]	; 123c8 <__assert_fail@plt+0xda4>
   12120:	mov	r1, r4
   12124:	mov	r0, #0
   12128:	bl	113cc <error@plt>
   1212c:	mov	r3, #0
   12130:	strb	r3, [fp, #-13]
   12134:	b	121e4 <__assert_fail@plt+0xbc0>
   12138:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1213c:	ldr	r4, [r3, #32]
   12140:	ldr	r0, [pc, #644]	; 123cc <__assert_fail@plt+0xda8>
   12144:	bl	11474 <gettext@plt>
   12148:	mov	r5, r0
   1214c:	ldr	r1, [fp, #-20]	; 0xffffffec
   12150:	mov	r0, #4
   12154:	bl	1a374 <__assert_fail@plt+0x8d50>
   12158:	mov	r3, r0
   1215c:	mov	r2, r5
   12160:	mov	r1, r4
   12164:	mov	r0, #0
   12168:	bl	113cc <error@plt>
   1216c:	mov	r3, #0
   12170:	strb	r3, [fp, #-13]
   12174:	b	121e4 <__assert_fail@plt+0xbc0>
   12178:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1217c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12180:	bl	1c774 <__assert_fail@plt+0xb150>
   12184:	mov	r3, r0
   12188:	cmp	r3, #0
   1218c:	beq	121e0 <__assert_fail@plt+0xbbc>
   12190:	ldr	r0, [pc, #568]	; 123d0 <__assert_fail@plt+0xdac>
   12194:	bl	11474 <gettext@plt>
   12198:	mov	r4, r0
   1219c:	ldr	r2, [fp, #-20]	; 0xffffffec
   121a0:	mov	r1, #3
   121a4:	mov	r0, #0
   121a8:	bl	1a4fc <__assert_fail@plt+0x8ed8>
   121ac:	mov	r3, r0
   121b0:	mov	r2, r4
   121b4:	mov	r1, #0
   121b8:	mov	r0, #0
   121bc:	bl	113cc <error@plt>
   121c0:	mov	r3, #0
   121c4:	b	123a0 <__assert_fail@plt+0xd7c>
   121c8:	nop			; (mov r0, r0)
   121cc:	b	121e4 <__assert_fail@plt+0xbc0>
   121d0:	nop			; (mov r0, r0)
   121d4:	b	121e4 <__assert_fail@plt+0xbc0>
   121d8:	nop			; (mov r0, r0)
   121dc:	b	121e4 <__assert_fail@plt+0xbc0>
   121e0:	nop			; (mov r0, r0)
   121e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   121e8:	ldrh	r3, [r3, #56]	; 0x38
   121ec:	cmp	r3, #6
   121f0:	bne	12308 <__assert_fail@plt+0xce4>
   121f4:	ldrb	r3, [fp, #-13]
   121f8:	cmp	r3, #0
   121fc:	beq	12308 <__assert_fail@plt+0xce4>
   12200:	ldr	r3, [pc, #424]	; 123b0 <__assert_fail@plt+0xd8c>
   12204:	ldr	r3, [r3]
   12208:	cmp	r3, #0
   1220c:	beq	12308 <__assert_fail@plt+0xce4>
   12210:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12214:	ldrd	r0, [r3, #96]	; 0x60
   12218:	ldr	r3, [pc, #400]	; 123b0 <__assert_fail@plt+0xd8c>
   1221c:	ldr	r3, [r3]
   12220:	ldrd	r2, [r3]
   12224:	cmp	r1, r3
   12228:	cmpeq	r0, r2
   1222c:	bne	12308 <__assert_fail@plt+0xce4>
   12230:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12234:	ldrd	r0, [r3]
   12238:	ldr	r3, [pc, #368]	; 123b0 <__assert_fail@plt+0xd8c>
   1223c:	ldr	r3, [r3]
   12240:	ldrd	r2, [r3, #8]
   12244:	cmp	r1, r3
   12248:	cmpeq	r0, r2
   1224c:	bne	12308 <__assert_fail@plt+0xce4>
   12250:	ldr	r1, [pc, #348]	; 123b4 <__assert_fail@plt+0xd90>
   12254:	ldr	r0, [fp, #-20]	; 0xffffffec
   12258:	bl	1127c <strcmp@plt>
   1225c:	mov	r3, r0
   12260:	cmp	r3, #0
   12264:	bne	12298 <__assert_fail@plt+0xc74>
   12268:	ldr	r0, [pc, #328]	; 123b8 <__assert_fail@plt+0xd94>
   1226c:	bl	11474 <gettext@plt>
   12270:	mov	r4, r0
   12274:	ldr	r1, [fp, #-20]	; 0xffffffec
   12278:	mov	r0, #4
   1227c:	bl	1a374 <__assert_fail@plt+0x8d50>
   12280:	mov	r3, r0
   12284:	mov	r2, r4
   12288:	mov	r1, #0
   1228c:	mov	r0, #0
   12290:	bl	113cc <error@plt>
   12294:	b	122e4 <__assert_fail@plt+0xcc0>
   12298:	ldr	r0, [pc, #284]	; 123bc <__assert_fail@plt+0xd98>
   1229c:	bl	11474 <gettext@plt>
   122a0:	mov	r4, r0
   122a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   122a8:	mov	r1, #4
   122ac:	mov	r0, #0
   122b0:	bl	1a2d8 <__assert_fail@plt+0x8cb4>
   122b4:	mov	r5, r0
   122b8:	ldr	r2, [pc, #244]	; 123b4 <__assert_fail@plt+0xd90>
   122bc:	mov	r1, #4
   122c0:	mov	r0, #1
   122c4:	bl	1a2d8 <__assert_fail@plt+0x8cb4>
   122c8:	mov	r3, r0
   122cc:	str	r3, [sp]
   122d0:	mov	r3, r5
   122d4:	mov	r2, r4
   122d8:	mov	r1, #0
   122dc:	mov	r0, #0
   122e0:	bl	113cc <error@plt>
   122e4:	ldr	r0, [pc, #212]	; 123c0 <__assert_fail@plt+0xd9c>
   122e8:	bl	11474 <gettext@plt>
   122ec:	mov	r3, r0
   122f0:	mov	r2, r3
   122f4:	mov	r1, #0
   122f8:	mov	r0, #0
   122fc:	bl	113cc <error@plt>
   12300:	mov	r3, #0
   12304:	strb	r3, [fp, #-13]
   12308:	ldrb	r3, [fp, #-13]
   1230c:	cmp	r3, #0
   12310:	beq	12374 <__assert_fail@plt+0xd50>
   12314:	ldr	r3, [pc, #184]	; 123d4 <__assert_fail@plt+0xdb0>
   12318:	ldrb	r3, [r3]
   1231c:	cmp	r3, #0
   12320:	beq	1234c <__assert_fail@plt+0xd28>
   12324:	ldr	r0, [pc, #172]	; 123d8 <__assert_fail@plt+0xdb4>
   12328:	bl	11474 <gettext@plt>
   1232c:	mov	r4, r0
   12330:	ldr	r1, [fp, #-20]	; 0xffffffec
   12334:	mov	r0, #4
   12338:	bl	1a374 <__assert_fail@plt+0x8d50>
   1233c:	mov	r3, r0
   12340:	mov	r1, r3
   12344:	mov	r0, r4
   12348:	bl	11288 <printf@plt>
   1234c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12350:	ldr	r3, [r3, #32]
   12354:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12358:	mov	r0, r3
   1235c:	bl	11c18 <__assert_fail@plt+0x5f4>
   12360:	mov	r3, r0
   12364:	cmp	r3, #0
   12368:	beq	12374 <__assert_fail@plt+0xd50>
   1236c:	mov	r3, #0
   12370:	strb	r3, [fp, #-13]
   12374:	ldr	r3, [pc, #48]	; 123ac <__assert_fail@plt+0xd88>
   12378:	ldrb	r3, [r3]
   1237c:	eor	r3, r3, #1
   12380:	uxtb	r3, r3
   12384:	cmp	r3, #0
   12388:	beq	1239c <__assert_fail@plt+0xd78>
   1238c:	mov	r2, #4
   12390:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12394:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12398:	bl	148c8 <__assert_fail@plt+0x32a4>
   1239c:	ldrb	r3, [fp, #-13]
   123a0:	mov	r0, r3
   123a4:	sub	sp, fp, #12
   123a8:	pop	{r4, r5, fp, pc}
   123ac:	ldrdeq	r1, [r3], -r1	; <UNPREDICTABLE>
   123b0:	ldrdeq	r1, [r3], -r4
   123b4:	andeq	pc, r1, ip, lsr #9
   123b8:			; <UNDEFINED> instruction: 0x0001f4b0
   123bc:	andeq	pc, r1, r0, ror #9
   123c0:	andeq	pc, r1, ip, lsl r5	; <UNPREDICTABLE>
   123c4:	andeq	pc, r1, r0, asr r5	; <UNPREDICTABLE>
   123c8:	andeq	pc, r1, r4, ror #10
   123cc:	andeq	pc, r1, r8, ror #10
   123d0:	andeq	pc, r1, r4, lsl #11
   123d4:	ldrdeq	r1, [r3], -r2
   123d8:	andeq	pc, r1, r0, asr #12
   123dc:	push	{r4, fp, lr}
   123e0:	add	fp, sp, #8
   123e4:	sub	sp, sp, #28
   123e8:	str	r0, [fp, #-32]	; 0xffffffe0
   123ec:	str	r1, [fp, #-36]	; 0xffffffdc
   123f0:	mov	r3, #1
   123f4:	strb	r3, [fp, #-13]
   123f8:	mov	r2, #0
   123fc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12400:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12404:	bl	1c6ec <__assert_fail@plt+0xb0c8>
   12408:	mov	r3, r0
   1240c:	str	r3, [fp, #-20]	; 0xffffffec
   12410:	ldr	r0, [fp, #-20]	; 0xffffffec
   12414:	bl	14154 <__assert_fail@plt+0x2b30>
   12418:	str	r0, [fp, #-24]	; 0xffffffe8
   1241c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12420:	cmp	r3, #0
   12424:	bne	12470 <__assert_fail@plt+0xe4c>
   12428:	bl	114bc <__errno_location@plt>
   1242c:	mov	r3, r0
   12430:	ldr	r3, [r3]
   12434:	cmp	r3, #0
   12438:	beq	124a0 <__assert_fail@plt+0xe7c>
   1243c:	bl	114bc <__errno_location@plt>
   12440:	mov	r3, r0
   12444:	ldr	r4, [r3]
   12448:	ldr	r0, [pc, #168]	; 124f8 <__assert_fail@plt+0xed4>
   1244c:	bl	11474 <gettext@plt>
   12450:	mov	r3, r0
   12454:	mov	r2, r3
   12458:	mov	r1, r4
   1245c:	mov	r0, #0
   12460:	bl	113cc <error@plt>
   12464:	mov	r3, #0
   12468:	strb	r3, [fp, #-13]
   1246c:	b	124a0 <__assert_fail@plt+0xe7c>
   12470:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12474:	ldr	r0, [fp, #-20]	; 0xffffffec
   12478:	bl	11ea0 <__assert_fail@plt+0x87c>
   1247c:	mov	r3, r0
   12480:	mov	r2, r3
   12484:	ldrb	r3, [fp, #-13]
   12488:	and	r3, r3, r2
   1248c:	cmp	r3, #0
   12490:	movne	r3, #1
   12494:	moveq	r3, #0
   12498:	strb	r3, [fp, #-13]
   1249c:	b	12410 <__assert_fail@plt+0xdec>
   124a0:	nop			; (mov r0, r0)
   124a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   124a8:	bl	13c28 <__assert_fail@plt+0x2604>
   124ac:	mov	r3, r0
   124b0:	cmp	r3, #0
   124b4:	beq	124e8 <__assert_fail@plt+0xec4>
   124b8:	bl	114bc <__errno_location@plt>
   124bc:	mov	r3, r0
   124c0:	ldr	r4, [r3]
   124c4:	ldr	r0, [pc, #48]	; 124fc <__assert_fail@plt+0xed8>
   124c8:	bl	11474 <gettext@plt>
   124cc:	mov	r3, r0
   124d0:	mov	r2, r3
   124d4:	mov	r1, r4
   124d8:	mov	r0, #0
   124dc:	bl	113cc <error@plt>
   124e0:	mov	r3, #0
   124e4:	strb	r3, [fp, #-13]
   124e8:	ldrb	r3, [fp, #-13]
   124ec:	mov	r0, r3
   124f0:	sub	sp, fp, #8
   124f4:	pop	{r4, fp, pc}
   124f8:	andeq	pc, r1, r4, ror #12
   124fc:	andeq	pc, r1, r4, ror r6	; <UNPREDICTABLE>
   12500:	push	{r4, fp, lr}
   12504:	add	fp, sp, #8
   12508:	sub	sp, sp, #12
   1250c:	str	r0, [fp, #-16]
   12510:	ldr	r3, [fp, #-16]
   12514:	cmp	r3, #0
   12518:	beq	12548 <__assert_fail@plt+0xf24>
   1251c:	ldr	r3, [pc, #412]	; 126c0 <__assert_fail@plt+0x109c>
   12520:	ldr	r4, [r3]
   12524:	ldr	r0, [pc, #408]	; 126c4 <__assert_fail@plt+0x10a0>
   12528:	bl	11474 <gettext@plt>
   1252c:	mov	r1, r0
   12530:	ldr	r3, [pc, #400]	; 126c8 <__assert_fail@plt+0x10a4>
   12534:	ldr	r3, [r3]
   12538:	mov	r2, r3
   1253c:	mov	r0, r4
   12540:	bl	114b0 <fprintf@plt>
   12544:	b	126b8 <__assert_fail@plt+0x1094>
   12548:	ldr	r0, [pc, #380]	; 126cc <__assert_fail@plt+0x10a8>
   1254c:	bl	11474 <gettext@plt>
   12550:	ldr	r3, [pc, #368]	; 126c8 <__assert_fail@plt+0x10a4>
   12554:	ldr	r1, [r3]
   12558:	ldr	r3, [pc, #360]	; 126c8 <__assert_fail@plt+0x10a4>
   1255c:	ldr	r2, [r3]
   12560:	ldr	r3, [pc, #352]	; 126c8 <__assert_fail@plt+0x10a4>
   12564:	ldr	r3, [r3]
   12568:	bl	11288 <printf@plt>
   1256c:	ldr	r0, [pc, #348]	; 126d0 <__assert_fail@plt+0x10ac>
   12570:	bl	11474 <gettext@plt>
   12574:	mov	r2, r0
   12578:	ldr	r3, [pc, #340]	; 126d4 <__assert_fail@plt+0x10b0>
   1257c:	ldr	r3, [r3]
   12580:	mov	r1, r3
   12584:	mov	r0, r2
   12588:	bl	11258 <fputs_unlocked@plt>
   1258c:	bl	11758 <__assert_fail@plt+0x134>
   12590:	ldr	r0, [pc, #320]	; 126d8 <__assert_fail@plt+0x10b4>
   12594:	bl	11474 <gettext@plt>
   12598:	mov	r2, r0
   1259c:	ldr	r3, [pc, #304]	; 126d4 <__assert_fail@plt+0x10b0>
   125a0:	ldr	r3, [r3]
   125a4:	mov	r1, r3
   125a8:	mov	r0, r2
   125ac:	bl	11258 <fputs_unlocked@plt>
   125b0:	ldr	r0, [pc, #292]	; 126dc <__assert_fail@plt+0x10b8>
   125b4:	bl	11474 <gettext@plt>
   125b8:	mov	r2, r0
   125bc:	ldr	r3, [pc, #272]	; 126d4 <__assert_fail@plt+0x10b0>
   125c0:	ldr	r3, [r3]
   125c4:	mov	r1, r3
   125c8:	mov	r0, r2
   125cc:	bl	11258 <fputs_unlocked@plt>
   125d0:	ldr	r0, [pc, #264]	; 126e0 <__assert_fail@plt+0x10bc>
   125d4:	bl	11474 <gettext@plt>
   125d8:	mov	r2, r0
   125dc:	ldr	r3, [pc, #240]	; 126d4 <__assert_fail@plt+0x10b0>
   125e0:	ldr	r3, [r3]
   125e4:	mov	r1, r3
   125e8:	mov	r0, r2
   125ec:	bl	11258 <fputs_unlocked@plt>
   125f0:	ldr	r0, [pc, #236]	; 126e4 <__assert_fail@plt+0x10c0>
   125f4:	bl	11474 <gettext@plt>
   125f8:	mov	r2, r0
   125fc:	ldr	r3, [pc, #208]	; 126d4 <__assert_fail@plt+0x10b0>
   12600:	ldr	r3, [r3]
   12604:	mov	r1, r3
   12608:	mov	r0, r2
   1260c:	bl	11258 <fputs_unlocked@plt>
   12610:	ldr	r0, [pc, #208]	; 126e8 <__assert_fail@plt+0x10c4>
   12614:	bl	11474 <gettext@plt>
   12618:	mov	r2, r0
   1261c:	ldr	r3, [pc, #176]	; 126d4 <__assert_fail@plt+0x10b0>
   12620:	ldr	r3, [r3]
   12624:	mov	r1, r3
   12628:	mov	r0, r2
   1262c:	bl	11258 <fputs_unlocked@plt>
   12630:	ldr	r0, [pc, #180]	; 126ec <__assert_fail@plt+0x10c8>
   12634:	bl	11474 <gettext@plt>
   12638:	mov	r2, r0
   1263c:	ldr	r3, [pc, #144]	; 126d4 <__assert_fail@plt+0x10b0>
   12640:	ldr	r3, [r3]
   12644:	mov	r1, r3
   12648:	mov	r0, r2
   1264c:	bl	11258 <fputs_unlocked@plt>
   12650:	ldr	r0, [pc, #152]	; 126f0 <__assert_fail@plt+0x10cc>
   12654:	bl	11474 <gettext@plt>
   12658:	mov	r2, r0
   1265c:	ldr	r3, [pc, #112]	; 126d4 <__assert_fail@plt+0x10b0>
   12660:	ldr	r3, [r3]
   12664:	mov	r1, r3
   12668:	mov	r0, r2
   1266c:	bl	11258 <fputs_unlocked@plt>
   12670:	ldr	r0, [pc, #124]	; 126f4 <__assert_fail@plt+0x10d0>
   12674:	bl	11474 <gettext@plt>
   12678:	mov	r2, r0
   1267c:	ldr	r3, [pc, #80]	; 126d4 <__assert_fail@plt+0x10b0>
   12680:	ldr	r3, [r3]
   12684:	mov	r1, r3
   12688:	mov	r0, r2
   1268c:	bl	11258 <fputs_unlocked@plt>
   12690:	ldr	r0, [pc, #96]	; 126f8 <__assert_fail@plt+0x10d4>
   12694:	bl	11474 <gettext@plt>
   12698:	mov	r2, r0
   1269c:	ldr	r3, [pc, #48]	; 126d4 <__assert_fail@plt+0x10b0>
   126a0:	ldr	r3, [r3]
   126a4:	mov	r1, r3
   126a8:	mov	r0, r2
   126ac:	bl	11258 <fputs_unlocked@plt>
   126b0:	ldr	r0, [pc, #68]	; 126fc <__assert_fail@plt+0x10d8>
   126b4:	bl	11790 <__assert_fail@plt+0x16c>
   126b8:	ldr	r0, [fp, #-16]
   126bc:	bl	1145c <exit@plt>
   126c0:	andeq	r1, r3, r0, asr #3
   126c4:	andeq	pc, r1, r8, lsl #13
   126c8:	andeq	r1, r3, r8, lsl #4
   126cc:			; <UNDEFINED> instruction: 0x0001f6b0
   126d0:	andeq	pc, r1, r0, asr r7	; <UNPREDICTABLE>
   126d4:	andeq	r1, r3, r4, asr #3
   126d8:	ldrdeq	pc, [r1], -ip
   126dc:	andeq	pc, r1, r4, asr #17
   126e0:	andeq	pc, r1, r0, ror #19
   126e4:	andeq	pc, r1, r0, ror #20
   126e8:	ldrdeq	pc, [r1], -r8
   126ec:	andeq	pc, r1, r0, lsr #22
   126f0:	andeq	pc, r1, r8, ror #22
   126f4:	andeq	pc, r1, ip, lsr sp	; <UNPREDICTABLE>
   126f8:	andeq	pc, r1, ip, ror #26
   126fc:	andeq	pc, r1, r4, lsr #27
   12700:	push	{r4, r5, fp, lr}
   12704:	add	fp, sp, #12
   12708:	sub	sp, sp, #56	; 0x38
   1270c:	str	r0, [fp, #-48]	; 0xffffffd0
   12710:	str	r1, [fp, #-52]	; 0xffffffcc
   12714:	mov	r3, #16
   12718:	str	r3, [fp, #-16]
   1271c:	mvn	r3, #0
   12720:	str	r3, [fp, #-20]	; 0xffffffec
   12724:	mov	r3, #0
   12728:	strb	r3, [fp, #-21]	; 0xffffffeb
   1272c:	mov	r3, #0
   12730:	strb	r3, [fp, #-22]	; 0xffffffea
   12734:	mov	r3, #0
   12738:	str	r3, [fp, #-28]	; 0xffffffe4
   1273c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12740:	ldr	r3, [r3]
   12744:	mov	r0, r3
   12748:	bl	1803c <__assert_fail@plt+0x6a18>
   1274c:	ldr	r1, [pc, #1552]	; 12d64 <__assert_fail@plt+0x1740>
   12750:	mov	r0, #6
   12754:	bl	11534 <setlocale@plt>
   12758:	ldr	r1, [pc, #1544]	; 12d68 <__assert_fail@plt+0x1744>
   1275c:	ldr	r0, [pc, #1544]	; 12d6c <__assert_fail@plt+0x1748>
   12760:	bl	115ac <bindtextdomain@plt>
   12764:	ldr	r0, [pc, #1536]	; 12d6c <__assert_fail@plt+0x1748>
   12768:	bl	1133c <textdomain@plt>
   1276c:	ldr	r0, [pc, #1532]	; 12d70 <__assert_fail@plt+0x174c>
   12770:	bl	1efe8 <__assert_fail@plt+0xd9c4>
   12774:	b	12998 <__assert_fail@plt+0x1374>
   12778:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1277c:	cmp	r3, #108	; 0x6c
   12780:	beq	1292c <__assert_fail@plt+0x1308>
   12784:	cmp	r3, #108	; 0x6c
   12788:	bgt	127e8 <__assert_fail@plt+0x11c4>
   1278c:	cmp	r3, #76	; 0x4c
   12790:	beq	12860 <__assert_fail@plt+0x123c>
   12794:	cmp	r3, #76	; 0x4c
   12798:	bgt	127b8 <__assert_fail@plt+0x1194>
   1279c:	cmn	r3, #2
   127a0:	beq	12948 <__assert_fail@plt+0x1324>
   127a4:	cmp	r3, #72	; 0x48
   127a8:	beq	12854 <__assert_fail@plt+0x1230>
   127ac:	cmn	r3, #3
   127b0:	beq	12950 <__assert_fail@plt+0x132c>
   127b4:	b	12990 <__assert_fail@plt+0x136c>
   127b8:	cmp	r3, #82	; 0x52
   127bc:	beq	128b8 <__assert_fail@plt+0x1294>
   127c0:	cmp	r3, #82	; 0x52
   127c4:	bgt	127d4 <__assert_fail@plt+0x11b0>
   127c8:	cmp	r3, #80	; 0x50
   127cc:	beq	1286c <__assert_fail@plt+0x1248>
   127d0:	b	12990 <__assert_fail@plt+0x136c>
   127d4:	cmp	r3, #102	; 0x66
   127d8:	beq	12998 <__assert_fail@plt+0x1374>
   127dc:	cmp	r3, #104	; 0x68
   127e0:	beq	12878 <__assert_fail@plt+0x1254>
   127e4:	b	12990 <__assert_fail@plt+0x136c>
   127e8:	cmp	r3, #118	; 0x76
   127ec:	beq	128c8 <__assert_fail@plt+0x12a4>
   127f0:	cmp	r3, #118	; 0x76
   127f4:	bgt	12814 <__assert_fail@plt+0x11f0>
   127f8:	cmp	r3, #116	; 0x74
   127fc:	beq	12910 <__assert_fail@plt+0x12ec>
   12800:	cmp	r3, #116	; 0x74
   12804:	bgt	128d8 <__assert_fail@plt+0x12b4>
   12808:	cmp	r3, #114	; 0x72
   1280c:	beq	128f4 <__assert_fail@plt+0x12d0>
   12810:	b	12990 <__assert_fail@plt+0x136c>
   12814:	ldr	r2, [pc, #1368]	; 12d74 <__assert_fail@plt+0x1750>
   12818:	cmp	r3, r2
   1281c:	beq	12890 <__assert_fail@plt+0x126c>
   12820:	ldr	r2, [pc, #1356]	; 12d74 <__assert_fail@plt+0x1750>
   12824:	cmp	r3, r2
   12828:	bgt	12838 <__assert_fail@plt+0x1214>
   1282c:	cmp	r3, #256	; 0x100
   12830:	beq	12884 <__assert_fail@plt+0x1260>
   12834:	b	12990 <__assert_fail@plt+0x136c>
   12838:	ldr	r2, [pc, #1336]	; 12d78 <__assert_fail@plt+0x1754>
   1283c:	cmp	r3, r2
   12840:	beq	1289c <__assert_fail@plt+0x1278>
   12844:	ldr	r2, [pc, #1328]	; 12d7c <__assert_fail@plt+0x1758>
   12848:	cmp	r3, r2
   1284c:	beq	128a8 <__assert_fail@plt+0x1284>
   12850:	b	12990 <__assert_fail@plt+0x136c>
   12854:	mov	r3, #17
   12858:	str	r3, [fp, #-16]
   1285c:	b	12998 <__assert_fail@plt+0x1374>
   12860:	mov	r3, #2
   12864:	str	r3, [fp, #-16]
   12868:	b	12998 <__assert_fail@plt+0x1374>
   1286c:	mov	r3, #16
   12870:	str	r3, [fp, #-16]
   12874:	b	12998 <__assert_fail@plt+0x1374>
   12878:	mov	r3, #0
   1287c:	str	r3, [fp, #-20]	; 0xffffffec
   12880:	b	12998 <__assert_fail@plt+0x1374>
   12884:	mov	r3, #1
   12888:	str	r3, [fp, #-20]	; 0xffffffec
   1288c:	b	12998 <__assert_fail@plt+0x1374>
   12890:	mov	r3, #0
   12894:	strb	r3, [fp, #-21]	; 0xffffffeb
   12898:	b	12998 <__assert_fail@plt+0x1374>
   1289c:	mov	r3, #1
   128a0:	strb	r3, [fp, #-21]	; 0xffffffeb
   128a4:	b	12998 <__assert_fail@plt+0x1374>
   128a8:	ldr	r3, [pc, #1232]	; 12d80 <__assert_fail@plt+0x175c>
   128ac:	ldr	r3, [r3]
   128b0:	str	r3, [fp, #-28]	; 0xffffffe4
   128b4:	b	12998 <__assert_fail@plt+0x1374>
   128b8:	ldr	r3, [pc, #1220]	; 12d84 <__assert_fail@plt+0x1760>
   128bc:	mov	r2, #1
   128c0:	strb	r2, [r3]
   128c4:	b	12998 <__assert_fail@plt+0x1374>
   128c8:	ldr	r3, [pc, #1208]	; 12d88 <__assert_fail@plt+0x1764>
   128cc:	mov	r2, #1
   128d0:	strb	r2, [r3]
   128d4:	b	12998 <__assert_fail@plt+0x1374>
   128d8:	ldr	r3, [pc, #1184]	; 12d80 <__assert_fail@plt+0x175c>
   128dc:	ldr	r3, [r3]
   128e0:	ldr	r2, [pc, #1188]	; 12d8c <__assert_fail@plt+0x1768>
   128e4:	str	r3, [r2]
   128e8:	mov	r3, #1
   128ec:	strb	r3, [fp, #-22]	; 0xffffffea
   128f0:	b	12998 <__assert_fail@plt+0x1374>
   128f4:	ldr	r3, [pc, #1156]	; 12d80 <__assert_fail@plt+0x175c>
   128f8:	ldr	r3, [r3]
   128fc:	ldr	r2, [pc, #1164]	; 12d90 <__assert_fail@plt+0x176c>
   12900:	str	r3, [r2]
   12904:	mov	r3, #1
   12908:	strb	r3, [fp, #-22]	; 0xffffffea
   1290c:	b	12998 <__assert_fail@plt+0x1374>
   12910:	ldr	r3, [pc, #1128]	; 12d80 <__assert_fail@plt+0x175c>
   12914:	ldr	r3, [r3]
   12918:	ldr	r2, [pc, #1140]	; 12d94 <__assert_fail@plt+0x1770>
   1291c:	str	r3, [r2]
   12920:	mov	r3, #1
   12924:	strb	r3, [fp, #-22]	; 0xffffffea
   12928:	b	12998 <__assert_fail@plt+0x1374>
   1292c:	ldr	r3, [pc, #1100]	; 12d80 <__assert_fail@plt+0x175c>
   12930:	ldr	r3, [r3]
   12934:	ldr	r2, [pc, #1116]	; 12d98 <__assert_fail@plt+0x1774>
   12938:	str	r3, [r2]
   1293c:	mov	r3, #1
   12940:	strb	r3, [fp, #-22]	; 0xffffffea
   12944:	b	12998 <__assert_fail@plt+0x1374>
   12948:	mov	r0, #0
   1294c:	bl	12500 <__assert_fail@plt+0xedc>
   12950:	ldr	r3, [pc, #1092]	; 12d9c <__assert_fail@plt+0x1778>
   12954:	ldr	r0, [r3]
   12958:	ldr	r3, [pc, #1088]	; 12da0 <__assert_fail@plt+0x177c>
   1295c:	ldr	r2, [r3]
   12960:	mov	r3, #0
   12964:	str	r3, [sp, #8]
   12968:	ldr	r3, [pc, #1076]	; 12da4 <__assert_fail@plt+0x1780>
   1296c:	str	r3, [sp, #4]
   12970:	ldr	r3, [pc, #1072]	; 12da8 <__assert_fail@plt+0x1784>
   12974:	str	r3, [sp]
   12978:	mov	r3, r2
   1297c:	ldr	r2, [pc, #1064]	; 12dac <__assert_fail@plt+0x1788>
   12980:	ldr	r1, [pc, #1064]	; 12db0 <__assert_fail@plt+0x178c>
   12984:	bl	1ba48 <__assert_fail@plt+0xa424>
   12988:	mov	r0, #0
   1298c:	bl	1145c <exit@plt>
   12990:	mov	r0, #1
   12994:	bl	12500 <__assert_fail@plt+0xedc>
   12998:	mov	r3, #0
   1299c:	str	r3, [sp]
   129a0:	ldr	r3, [pc, #1036]	; 12db4 <__assert_fail@plt+0x1790>
   129a4:	ldr	r2, [pc, #1036]	; 12db8 <__assert_fail@plt+0x1794>
   129a8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   129ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   129b0:	bl	11438 <getopt_long@plt>
   129b4:	str	r0, [fp, #-32]	; 0xffffffe0
   129b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   129bc:	cmn	r3, #1
   129c0:	bne	12778 <__assert_fail@plt+0x1154>
   129c4:	ldr	r3, [pc, #952]	; 12d84 <__assert_fail@plt+0x1760>
   129c8:	ldrb	r3, [r3]
   129cc:	cmp	r3, #0
   129d0:	beq	12a50 <__assert_fail@plt+0x142c>
   129d4:	ldr	r3, [fp, #-16]
   129d8:	cmp	r3, #16
   129dc:	bne	12a18 <__assert_fail@plt+0x13f4>
   129e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   129e4:	cmp	r3, #1
   129e8:	bne	12a08 <__assert_fail@plt+0x13e4>
   129ec:	ldr	r0, [pc, #968]	; 12dbc <__assert_fail@plt+0x1798>
   129f0:	bl	11474 <gettext@plt>
   129f4:	mov	r3, r0
   129f8:	mov	r2, r3
   129fc:	mov	r1, #0
   12a00:	mov	r0, #1
   12a04:	bl	113cc <error@plt>
   12a08:	ldr	r3, [pc, #944]	; 12dc0 <__assert_fail@plt+0x179c>
   12a0c:	mov	r2, #0
   12a10:	strb	r2, [r3]
   12a14:	b	12a74 <__assert_fail@plt+0x1450>
   12a18:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a1c:	cmp	r3, #0
   12a20:	bne	12a40 <__assert_fail@plt+0x141c>
   12a24:	ldr	r0, [pc, #920]	; 12dc4 <__assert_fail@plt+0x17a0>
   12a28:	bl	11474 <gettext@plt>
   12a2c:	mov	r3, r0
   12a30:	mov	r2, r3
   12a34:	mov	r1, #0
   12a38:	mov	r0, #1
   12a3c:	bl	113cc <error@plt>
   12a40:	ldr	r3, [pc, #888]	; 12dc0 <__assert_fail@plt+0x179c>
   12a44:	mov	r2, #1
   12a48:	strb	r2, [r3]
   12a4c:	b	12a74 <__assert_fail@plt+0x1450>
   12a50:	mov	r3, #16
   12a54:	str	r3, [fp, #-16]
   12a58:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a5c:	cmp	r3, #0
   12a60:	movne	r3, #1
   12a64:	moveq	r3, #0
   12a68:	uxtb	r2, r3
   12a6c:	ldr	r3, [pc, #844]	; 12dc0 <__assert_fail@plt+0x179c>
   12a70:	strb	r2, [r3]
   12a74:	ldr	r3, [pc, #844]	; 12dc8 <__assert_fail@plt+0x17a4>
   12a78:	ldr	r3, [r3]
   12a7c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12a80:	sub	r2, r2, r3
   12a84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a88:	cmp	r3, #0
   12a8c:	bne	12a9c <__assert_fail@plt+0x1478>
   12a90:	ldrb	r3, [fp, #-22]	; 0xffffffea
   12a94:	cmp	r3, #0
   12a98:	beq	12aa4 <__assert_fail@plt+0x1480>
   12a9c:	mov	r3, #1
   12aa0:	b	12aa8 <__assert_fail@plt+0x1484>
   12aa4:	mov	r3, #2
   12aa8:	cmp	r2, r3
   12aac:	bge	12b2c <__assert_fail@plt+0x1508>
   12ab0:	ldr	r3, [pc, #784]	; 12dc8 <__assert_fail@plt+0x17a4>
   12ab4:	ldr	r3, [r3]
   12ab8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12abc:	cmp	r2, r3
   12ac0:	bgt	12ae4 <__assert_fail@plt+0x14c0>
   12ac4:	ldr	r0, [pc, #768]	; 12dcc <__assert_fail@plt+0x17a8>
   12ac8:	bl	11474 <gettext@plt>
   12acc:	mov	r3, r0
   12ad0:	mov	r2, r3
   12ad4:	mov	r1, #0
   12ad8:	mov	r0, #0
   12adc:	bl	113cc <error@plt>
   12ae0:	b	12b24 <__assert_fail@plt+0x1500>
   12ae4:	ldr	r0, [pc, #740]	; 12dd0 <__assert_fail@plt+0x17ac>
   12ae8:	bl	11474 <gettext@plt>
   12aec:	mov	r4, r0
   12af0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12af4:	sub	r3, r3, #-1073741823	; 0xc0000001
   12af8:	lsl	r3, r3, #2
   12afc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12b00:	add	r3, r2, r3
   12b04:	ldr	r3, [r3]
   12b08:	mov	r0, r3
   12b0c:	bl	1a76c <__assert_fail@plt+0x9148>
   12b10:	mov	r3, r0
   12b14:	mov	r2, r4
   12b18:	mov	r1, #0
   12b1c:	mov	r0, #0
   12b20:	bl	113cc <error@plt>
   12b24:	mov	r0, #1
   12b28:	bl	12500 <__assert_fail@plt+0xedc>
   12b2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12b30:	cmp	r3, #0
   12b34:	beq	12ba4 <__assert_fail@plt+0x1580>
   12b38:	mov	r3, #0
   12b3c:	str	r3, [fp, #-40]	; 0xffffffd8
   12b40:	sub	r3, fp, #40	; 0x28
   12b44:	mov	r1, r3
   12b48:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12b4c:	bl	1b274 <__assert_fail@plt+0x9c50>
   12b50:	mov	r3, r0
   12b54:	cmp	r3, #0
   12b58:	bge	12b94 <__assert_fail@plt+0x1570>
   12b5c:	bl	114bc <__errno_location@plt>
   12b60:	mov	r3, r0
   12b64:	ldr	r4, [r3]
   12b68:	ldr	r0, [pc, #612]	; 12dd4 <__assert_fail@plt+0x17b0>
   12b6c:	bl	11474 <gettext@plt>
   12b70:	mov	r5, r0
   12b74:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12b78:	mov	r0, #4
   12b7c:	bl	1a374 <__assert_fail@plt+0x8d50>
   12b80:	mov	r3, r0
   12b84:	mov	r2, r5
   12b88:	mov	r1, r4
   12b8c:	mov	r0, #1
   12b90:	bl	113cc <error@plt>
   12b94:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b98:	ldr	r2, [pc, #568]	; 12dd8 <__assert_fail@plt+0x17b4>
   12b9c:	str	r3, [r2]
   12ba0:	b	12c54 <__assert_fail@plt+0x1630>
   12ba4:	ldrb	r3, [fp, #-22]	; 0xffffffea
   12ba8:	cmp	r3, #0
   12bac:	beq	12bc0 <__assert_fail@plt+0x159c>
   12bb0:	ldr	r3, [pc, #544]	; 12dd8 <__assert_fail@plt+0x17b4>
   12bb4:	mov	r2, #0
   12bb8:	str	r2, [r3]
   12bbc:	b	12c54 <__assert_fail@plt+0x1630>
   12bc0:	ldr	r3, [pc, #512]	; 12dc8 <__assert_fail@plt+0x17a4>
   12bc4:	ldr	r3, [r3]
   12bc8:	add	r2, r3, #1
   12bcc:	ldr	r1, [pc, #500]	; 12dc8 <__assert_fail@plt+0x17a4>
   12bd0:	str	r2, [r1]
   12bd4:	lsl	r3, r3, #2
   12bd8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12bdc:	add	r3, r2, r3
   12be0:	ldr	r3, [r3]
   12be4:	ldr	r2, [pc, #492]	; 12dd8 <__assert_fail@plt+0x17b4>
   12be8:	str	r3, [r2]
   12bec:	bl	11270 <is_selinux_enabled@plt>
   12bf0:	mov	r3, r0
   12bf4:	cmp	r3, #0
   12bf8:	ble	12c54 <__assert_fail@plt+0x1630>
   12bfc:	ldr	r3, [pc, #468]	; 12dd8 <__assert_fail@plt+0x17b4>
   12c00:	ldr	r3, [r3]
   12c04:	mov	r0, r3
   12c08:	bl	113d8 <security_check_context@plt>
   12c0c:	mov	r3, r0
   12c10:	cmp	r3, #0
   12c14:	bge	12c54 <__assert_fail@plt+0x1630>
   12c18:	bl	114bc <__errno_location@plt>
   12c1c:	mov	r3, r0
   12c20:	ldr	r4, [r3]
   12c24:	ldr	r0, [pc, #432]	; 12ddc <__assert_fail@plt+0x17b8>
   12c28:	bl	11474 <gettext@plt>
   12c2c:	mov	r5, r0
   12c30:	ldr	r3, [pc, #416]	; 12dd8 <__assert_fail@plt+0x17b4>
   12c34:	ldr	r3, [r3]
   12c38:	mov	r0, r3
   12c3c:	bl	1a76c <__assert_fail@plt+0x9148>
   12c40:	mov	r3, r0
   12c44:	mov	r2, r5
   12c48:	mov	r1, r4
   12c4c:	mov	r0, #1
   12c50:	bl	113cc <error@plt>
   12c54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12c58:	cmp	r3, #0
   12c5c:	beq	12c90 <__assert_fail@plt+0x166c>
   12c60:	ldrb	r3, [fp, #-22]	; 0xffffffea
   12c64:	cmp	r3, #0
   12c68:	beq	12c90 <__assert_fail@plt+0x166c>
   12c6c:	ldr	r0, [pc, #364]	; 12de0 <__assert_fail@plt+0x17bc>
   12c70:	bl	11474 <gettext@plt>
   12c74:	mov	r3, r0
   12c78:	mov	r2, r3
   12c7c:	mov	r1, #0
   12c80:	mov	r0, #0
   12c84:	bl	113cc <error@plt>
   12c88:	mov	r0, #1
   12c8c:	bl	12500 <__assert_fail@plt+0xedc>
   12c90:	ldr	r3, [pc, #236]	; 12d84 <__assert_fail@plt+0x1760>
   12c94:	ldrb	r3, [r3]
   12c98:	cmp	r3, #0
   12c9c:	beq	12d08 <__assert_fail@plt+0x16e4>
   12ca0:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12ca4:	cmp	r3, #0
   12ca8:	beq	12d08 <__assert_fail@plt+0x16e4>
   12cac:	ldr	r0, [pc, #304]	; 12de4 <__assert_fail@plt+0x17c0>
   12cb0:	bl	1a798 <__assert_fail@plt+0x9174>
   12cb4:	mov	r2, r0
   12cb8:	ldr	r3, [pc, #296]	; 12de8 <__assert_fail@plt+0x17c4>
   12cbc:	str	r2, [r3]
   12cc0:	ldr	r3, [pc, #288]	; 12de8 <__assert_fail@plt+0x17c4>
   12cc4:	ldr	r3, [r3]
   12cc8:	cmp	r3, #0
   12ccc:	bne	12d18 <__assert_fail@plt+0x16f4>
   12cd0:	bl	114bc <__errno_location@plt>
   12cd4:	mov	r3, r0
   12cd8:	ldr	r4, [r3]
   12cdc:	ldr	r0, [pc, #264]	; 12dec <__assert_fail@plt+0x17c8>
   12ce0:	bl	11474 <gettext@plt>
   12ce4:	mov	r5, r0
   12ce8:	ldr	r1, [pc, #256]	; 12df0 <__assert_fail@plt+0x17cc>
   12cec:	mov	r0, #4
   12cf0:	bl	1a374 <__assert_fail@plt+0x8d50>
   12cf4:	mov	r3, r0
   12cf8:	mov	r2, r5
   12cfc:	mov	r1, r4
   12d00:	mov	r0, #1
   12d04:	bl	113cc <error@plt>
   12d08:	ldr	r3, [pc, #216]	; 12de8 <__assert_fail@plt+0x17c4>
   12d0c:	mov	r2, #0
   12d10:	str	r2, [r3]
   12d14:	b	12d1c <__assert_fail@plt+0x16f8>
   12d18:	nop			; (mov r0, r0)
   12d1c:	ldr	r3, [pc, #164]	; 12dc8 <__assert_fail@plt+0x17a4>
   12d20:	ldr	r3, [r3]
   12d24:	lsl	r3, r3, #2
   12d28:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12d2c:	add	r2, r2, r3
   12d30:	ldr	r3, [fp, #-16]
   12d34:	orr	r3, r3, #8
   12d38:	mov	r1, r3
   12d3c:	mov	r0, r2
   12d40:	bl	123dc <__assert_fail@plt+0xdb8>
   12d44:	mov	r3, r0
   12d48:	strb	r3, [fp, #-33]	; 0xffffffdf
   12d4c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12d50:	eor	r3, r3, #1
   12d54:	uxtb	r3, r3
   12d58:	mov	r0, r3
   12d5c:	sub	sp, fp, #12
   12d60:	pop	{r4, r5, fp, pc}
   12d64:	andeq	pc, r1, r8, lsr #3
   12d68:	andeq	pc, r1, ip, lsr #27
   12d6c:	andeq	pc, r1, r0, asr #3
   12d70:	andeq	r2, r1, r8, asr lr
   12d74:	andeq	r0, r0, r1, lsl #2
   12d78:	andeq	r0, r0, r2, lsl #2
   12d7c:	andeq	r0, r0, r3, lsl #2
   12d80:	andeq	r1, r3, r8, asr #3
   12d84:	ldrdeq	r1, [r3], -r1	; <UNPREDICTABLE>
   12d88:	ldrdeq	r1, [r3], -r2
   12d8c:	ldrdeq	r1, [r3], -ip
   12d90:	andeq	r1, r3, r0, ror #3
   12d94:	andeq	r1, r3, r8, ror #3
   12d98:	andeq	r1, r3, r4, ror #3
   12d9c:	andeq	r1, r3, r4, asr #3
   12da0:	andeq	r1, r3, r8, ror #2
   12da4:	andeq	pc, r1, r4, asr #27
   12da8:	ldrdeq	pc, [r1], -r4
   12dac:	strdeq	pc, [r1], -r0
   12db0:	andeq	pc, r1, r4, lsr #27
   12db4:	andeq	pc, r1, ip, ror #5
   12db8:	andeq	pc, r1, r4, ror #27
   12dbc:	strdeq	pc, [r1], -r4
   12dc0:	ldrdeq	r1, [r3], -r0
   12dc4:	andeq	pc, r1, r0, lsr #28
   12dc8:			; <UNDEFINED> instruction: 0x000311b8
   12dcc:	andeq	pc, r1, r4, lsr lr	; <UNPREDICTABLE>
   12dd0:	andeq	pc, r1, r4, asr #28
   12dd4:	andeq	pc, r1, r8, lsr #8
   12dd8:	ldrdeq	r1, [r3], -r8
   12ddc:	andeq	pc, r1, r0, ror #28
   12de0:	andeq	pc, r1, r4, ror lr	; <UNPREDICTABLE>
   12de4:	strdeq	r1, [r3], -r0
   12de8:	ldrdeq	r1, [r3], -r4
   12dec:	andeq	pc, r1, r4, lsr #29
   12df0:	andeq	pc, r1, ip, lsr #9
   12df4:	push	{fp}		; (str fp, [sp, #-4]!)
   12df8:	add	fp, sp, #0
   12dfc:	sub	sp, sp, #12
   12e00:	str	r0, [fp, #-8]
   12e04:	ldr	r2, [pc, #20]	; 12e20 <__assert_fail@plt+0x17fc>
   12e08:	ldr	r3, [fp, #-8]
   12e0c:	str	r3, [r2]
   12e10:	nop			; (mov r0, r0)
   12e14:	add	sp, fp, #0
   12e18:	pop	{fp}		; (ldr fp, [sp], #4)
   12e1c:	bx	lr
   12e20:	andeq	r1, r3, r0, lsl #4
   12e24:	push	{fp}		; (str fp, [sp, #-4]!)
   12e28:	add	fp, sp, #0
   12e2c:	sub	sp, sp, #12
   12e30:	mov	r3, r0
   12e34:	strb	r3, [fp, #-5]
   12e38:	ldr	r2, [pc, #20]	; 12e54 <__assert_fail@plt+0x1830>
   12e3c:	ldrb	r3, [fp, #-5]
   12e40:	strb	r3, [r2]
   12e44:	nop			; (mov r0, r0)
   12e48:	add	sp, fp, #0
   12e4c:	pop	{fp}		; (ldr fp, [sp], #4)
   12e50:	bx	lr
   12e54:	andeq	r1, r3, r4, lsl #4
   12e58:	push	{r4, fp, lr}
   12e5c:	add	fp, sp, #8
   12e60:	sub	sp, sp, #20
   12e64:	ldr	r3, [pc, #256]	; 12f6c <__assert_fail@plt+0x1948>
   12e68:	ldr	r3, [r3]
   12e6c:	mov	r0, r3
   12e70:	bl	1cf68 <__assert_fail@plt+0xb944>
   12e74:	mov	r3, r0
   12e78:	cmp	r3, #0
   12e7c:	beq	12f34 <__assert_fail@plt+0x1910>
   12e80:	ldr	r3, [pc, #232]	; 12f70 <__assert_fail@plt+0x194c>
   12e84:	ldrb	r3, [r3]
   12e88:	eor	r3, r3, #1
   12e8c:	uxtb	r3, r3
   12e90:	cmp	r3, #0
   12e94:	bne	12eac <__assert_fail@plt+0x1888>
   12e98:	bl	114bc <__errno_location@plt>
   12e9c:	mov	r3, r0
   12ea0:	ldr	r3, [r3]
   12ea4:	cmp	r3, #32
   12ea8:	beq	12f34 <__assert_fail@plt+0x1910>
   12eac:	ldr	r0, [pc, #192]	; 12f74 <__assert_fail@plt+0x1950>
   12eb0:	bl	11474 <gettext@plt>
   12eb4:	str	r0, [fp, #-16]
   12eb8:	ldr	r3, [pc, #184]	; 12f78 <__assert_fail@plt+0x1954>
   12ebc:	ldr	r3, [r3]
   12ec0:	cmp	r3, #0
   12ec4:	beq	12f08 <__assert_fail@plt+0x18e4>
   12ec8:	bl	114bc <__errno_location@plt>
   12ecc:	mov	r3, r0
   12ed0:	ldr	r4, [r3]
   12ed4:	ldr	r3, [pc, #156]	; 12f78 <__assert_fail@plt+0x1954>
   12ed8:	ldr	r3, [r3]
   12edc:	mov	r0, r3
   12ee0:	bl	1a49c <__assert_fail@plt+0x8e78>
   12ee4:	mov	r2, r0
   12ee8:	ldr	r3, [fp, #-16]
   12eec:	str	r3, [sp]
   12ef0:	mov	r3, r2
   12ef4:	ldr	r2, [pc, #128]	; 12f7c <__assert_fail@plt+0x1958>
   12ef8:	mov	r1, r4
   12efc:	mov	r0, #0
   12f00:	bl	113cc <error@plt>
   12f04:	b	12f24 <__assert_fail@plt+0x1900>
   12f08:	bl	114bc <__errno_location@plt>
   12f0c:	mov	r3, r0
   12f10:	ldr	r1, [r3]
   12f14:	ldr	r3, [fp, #-16]
   12f18:	ldr	r2, [pc, #96]	; 12f80 <__assert_fail@plt+0x195c>
   12f1c:	mov	r0, #0
   12f20:	bl	113cc <error@plt>
   12f24:	ldr	r3, [pc, #88]	; 12f84 <__assert_fail@plt+0x1960>
   12f28:	ldr	r3, [r3]
   12f2c:	mov	r0, r3
   12f30:	bl	112c4 <_exit@plt>
   12f34:	ldr	r3, [pc, #76]	; 12f88 <__assert_fail@plt+0x1964>
   12f38:	ldr	r3, [r3]
   12f3c:	mov	r0, r3
   12f40:	bl	1cf68 <__assert_fail@plt+0xb944>
   12f44:	mov	r3, r0
   12f48:	cmp	r3, #0
   12f4c:	beq	12f60 <__assert_fail@plt+0x193c>
   12f50:	ldr	r3, [pc, #44]	; 12f84 <__assert_fail@plt+0x1960>
   12f54:	ldr	r3, [r3]
   12f58:	mov	r0, r3
   12f5c:	bl	112c4 <_exit@plt>
   12f60:	nop			; (mov r0, r0)
   12f64:	sub	sp, fp, #8
   12f68:	pop	{r4, fp, pc}
   12f6c:	andeq	r1, r3, r4, asr #3
   12f70:	andeq	r1, r3, r4, lsl #4
   12f74:	ldrdeq	pc, [r1], -r4
   12f78:	andeq	r1, r3, r0, lsl #4
   12f7c:	andeq	pc, r1, r0, ror #29
   12f80:	andeq	pc, r1, r8, ror #29
   12f84:	andeq	r1, r3, ip, ror #2
   12f88:	andeq	r1, r3, r0, asr #3
   12f8c:	push	{fp}		; (str fp, [sp, #-4]!)
   12f90:	add	fp, sp, #0
   12f94:	sub	sp, sp, #20
   12f98:	str	r0, [fp, #-16]
   12f9c:	str	r1, [fp, #-20]	; 0xffffffec
   12fa0:	ldr	r3, [fp, #-16]
   12fa4:	str	r3, [fp, #-8]
   12fa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fac:	str	r3, [fp, #-12]
   12fb0:	ldr	r3, [fp, #-8]
   12fb4:	ldrd	r0, [r3, #8]
   12fb8:	ldr	r3, [fp, #-12]
   12fbc:	ldrd	r2, [r3, #8]
   12fc0:	cmp	r1, r3
   12fc4:	cmpeq	r0, r2
   12fc8:	bne	12ff0 <__assert_fail@plt+0x19cc>
   12fcc:	ldr	r3, [fp, #-8]
   12fd0:	ldrd	r0, [r3]
   12fd4:	ldr	r3, [fp, #-12]
   12fd8:	ldrd	r2, [r3]
   12fdc:	cmp	r1, r3
   12fe0:	cmpeq	r0, r2
   12fe4:	bne	12ff0 <__assert_fail@plt+0x19cc>
   12fe8:	mov	r3, #1
   12fec:	b	12ff4 <__assert_fail@plt+0x19d0>
   12ff0:	mov	r3, #0
   12ff4:	and	r3, r3, #1
   12ff8:	uxtb	r3, r3
   12ffc:	mov	r0, r3
   13000:	add	sp, fp, #0
   13004:	pop	{fp}		; (ldr fp, [sp], #4)
   13008:	bx	lr
   1300c:	push	{fp, lr}
   13010:	add	fp, sp, #4
   13014:	sub	sp, sp, #16
   13018:	str	r0, [fp, #-16]
   1301c:	str	r1, [fp, #-20]	; 0xffffffec
   13020:	ldr	r3, [fp, #-16]
   13024:	str	r3, [fp, #-8]
   13028:	ldr	r3, [fp, #-8]
   1302c:	ldrd	r0, [r3, #8]
   13030:	ldr	r3, [fp, #-20]	; 0xffffffec
   13034:	mov	r2, r3
   13038:	mov	r3, #0
   1303c:	bl	1ee10 <__assert_fail@plt+0xd7ec>
   13040:	mov	r3, r2
   13044:	mov	r0, r3
   13048:	sub	sp, fp, #4
   1304c:	pop	{fp, pc}
   13050:	push	{fp, lr}
   13054:	add	fp, sp, #4
   13058:	sub	sp, sp, #16
   1305c:	str	r0, [fp, #-8]
   13060:	ldr	r3, [fp, #-8]
   13064:	ldr	r2, [r3, #48]	; 0x30
   13068:	ldr	r3, [pc, #156]	; 1310c <__assert_fail@plt+0x1ae8>
   1306c:	and	r3, r3, r2
   13070:	cmp	r3, #0
   13074:	beq	130bc <__assert_fail@plt+0x1a98>
   13078:	ldr	r3, [pc, #144]	; 13110 <__assert_fail@plt+0x1aec>
   1307c:	str	r3, [sp]
   13080:	ldr	r3, [pc, #140]	; 13114 <__assert_fail@plt+0x1af0>
   13084:	ldr	r2, [pc, #140]	; 13118 <__assert_fail@plt+0x1af4>
   13088:	mov	r1, #0
   1308c:	mov	r0, #31
   13090:	bl	16d38 <__assert_fail@plt+0x5714>
   13094:	mov	r3, r0
   13098:	mov	r2, r3
   1309c:	ldr	r3, [fp, #-8]
   130a0:	str	r2, [r3, #56]	; 0x38
   130a4:	ldr	r3, [fp, #-8]
   130a8:	ldr	r3, [r3, #56]	; 0x38
   130ac:	cmp	r3, #0
   130b0:	bne	130fc <__assert_fail@plt+0x1ad8>
   130b4:	mov	r3, #0
   130b8:	b	13100 <__assert_fail@plt+0x1adc>
   130bc:	mov	r0, #32
   130c0:	bl	1c8d0 <__assert_fail@plt+0xb2ac>
   130c4:	mov	r3, r0
   130c8:	mov	r2, r3
   130cc:	ldr	r3, [fp, #-8]
   130d0:	str	r2, [r3, #56]	; 0x38
   130d4:	ldr	r3, [fp, #-8]
   130d8:	ldr	r3, [r3, #56]	; 0x38
   130dc:	cmp	r3, #0
   130e0:	bne	130ec <__assert_fail@plt+0x1ac8>
   130e4:	mov	r3, #0
   130e8:	b	13100 <__assert_fail@plt+0x1adc>
   130ec:	ldr	r3, [fp, #-8]
   130f0:	ldr	r3, [r3, #56]	; 0x38
   130f4:	mov	r0, r3
   130f8:	bl	1d08c <__assert_fail@plt+0xba68>
   130fc:	mov	r3, #1
   13100:	mov	r0, r3
   13104:	sub	sp, fp, #4
   13108:	pop	{fp, pc}
   1310c:	andeq	r0, r0, r2, lsl #2
   13110:	andeq	sp, r1, r4, lsl #15
   13114:	andeq	r2, r1, ip, lsl #31
   13118:	andeq	r3, r1, ip
   1311c:	push	{fp, lr}
   13120:	add	fp, sp, #4
   13124:	sub	sp, sp, #24
   13128:	str	r0, [fp, #-24]	; 0xffffffe8
   1312c:	str	r1, [fp, #-28]	; 0xffffffe4
   13130:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13134:	ldr	r2, [r3, #48]	; 0x30
   13138:	ldr	r3, [pc, #280]	; 13258 <__assert_fail@plt+0x1c34>
   1313c:	and	r3, r3, r2
   13140:	cmp	r3, #0
   13144:	beq	13208 <__assert_fail@plt+0x1be4>
   13148:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1314c:	add	r3, r3, #64	; 0x40
   13150:	str	r3, [fp, #-8]
   13154:	mov	r0, #24
   13158:	bl	1c8d0 <__assert_fail@plt+0xb2ac>
   1315c:	mov	r3, r0
   13160:	str	r3, [fp, #-12]
   13164:	ldr	r3, [fp, #-12]
   13168:	cmp	r3, #0
   1316c:	bne	13178 <__assert_fail@plt+0x1b54>
   13170:	mov	r3, #0
   13174:	b	1324c <__assert_fail@plt+0x1c28>
   13178:	ldr	r3, [fp, #-8]
   1317c:	ldrd	r2, [r3]
   13180:	ldr	r1, [fp, #-12]
   13184:	strd	r2, [r1]
   13188:	ldr	r3, [fp, #-8]
   1318c:	ldrd	r2, [r3, #96]	; 0x60
   13190:	ldr	r1, [fp, #-12]
   13194:	strd	r2, [r1, #8]
   13198:	ldr	r3, [fp, #-12]
   1319c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   131a0:	str	r2, [r3, #16]
   131a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   131a8:	ldr	r3, [r3, #56]	; 0x38
   131ac:	ldr	r1, [fp, #-12]
   131b0:	mov	r0, r3
   131b4:	bl	17a80 <__assert_fail@plt+0x645c>
   131b8:	str	r0, [fp, #-16]
   131bc:	ldr	r2, [fp, #-16]
   131c0:	ldr	r3, [fp, #-12]
   131c4:	cmp	r2, r3
   131c8:	beq	13248 <__assert_fail@plt+0x1c24>
   131cc:	ldr	r0, [fp, #-12]
   131d0:	bl	1d784 <__assert_fail@plt+0xc160>
   131d4:	ldr	r3, [fp, #-16]
   131d8:	cmp	r3, #0
   131dc:	bne	131e8 <__assert_fail@plt+0x1bc4>
   131e0:	mov	r3, #0
   131e4:	b	1324c <__assert_fail@plt+0x1c28>
   131e8:	ldr	r3, [fp, #-16]
   131ec:	ldr	r2, [r3, #16]
   131f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   131f4:	str	r2, [r3]
   131f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   131fc:	mov	r2, #2
   13200:	strh	r2, [r3, #56]	; 0x38
   13204:	b	13248 <__assert_fail@plt+0x1c24>
   13208:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1320c:	ldr	r2, [r3, #56]	; 0x38
   13210:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13214:	add	r3, r3, #64	; 0x40
   13218:	mov	r1, r3
   1321c:	mov	r0, r2
   13220:	bl	1d0cc <__assert_fail@plt+0xbaa8>
   13224:	mov	r3, r0
   13228:	cmp	r3, #0
   1322c:	beq	13248 <__assert_fail@plt+0x1c24>
   13230:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13234:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13238:	str	r2, [r3]
   1323c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13240:	mov	r2, #2
   13244:	strh	r2, [r3, #56]	; 0x38
   13248:	mov	r3, #1
   1324c:	mov	r0, r3
   13250:	sub	sp, fp, #4
   13254:	pop	{fp, pc}
   13258:	andeq	r0, r0, r2, lsl #2
   1325c:	push	{fp, lr}
   13260:	add	fp, sp, #4
   13264:	sub	sp, sp, #48	; 0x30
   13268:	str	r0, [fp, #-48]	; 0xffffffd0
   1326c:	str	r1, [fp, #-52]	; 0xffffffcc
   13270:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13274:	add	r3, r3, #64	; 0x40
   13278:	str	r3, [fp, #-8]
   1327c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13280:	ldr	r2, [r3, #48]	; 0x30
   13284:	ldr	r3, [pc, #268]	; 13398 <__assert_fail@plt+0x1d74>
   13288:	and	r3, r3, r2
   1328c:	cmp	r3, #0
   13290:	beq	132e4 <__assert_fail@plt+0x1cc0>
   13294:	ldr	r3, [fp, #-8]
   13298:	ldrd	r2, [r3]
   1329c:	strd	r2, [fp, #-44]	; 0xffffffd4
   132a0:	ldr	r3, [fp, #-8]
   132a4:	ldrd	r2, [r3, #96]	; 0x60
   132a8:	strd	r2, [fp, #-36]	; 0xffffffdc
   132ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   132b0:	ldr	r3, [r3, #56]	; 0x38
   132b4:	sub	r2, fp, #44	; 0x2c
   132b8:	mov	r1, r2
   132bc:	mov	r0, r3
   132c0:	bl	17ae4 <__assert_fail@plt+0x64c0>
   132c4:	str	r0, [fp, #-12]
   132c8:	ldr	r3, [fp, #-12]
   132cc:	cmp	r3, #0
   132d0:	bne	132d8 <__assert_fail@plt+0x1cb4>
   132d4:	bl	115e8 <abort@plt>
   132d8:	ldr	r0, [fp, #-12]
   132dc:	bl	1d784 <__assert_fail@plt+0xc160>
   132e0:	b	1338c <__assert_fail@plt+0x1d68>
   132e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   132e8:	ldr	r3, [r3, #4]
   132ec:	str	r3, [fp, #-16]
   132f0:	ldr	r3, [fp, #-16]
   132f4:	cmp	r3, #0
   132f8:	beq	1338c <__assert_fail@plt+0x1d68>
   132fc:	ldr	r3, [fp, #-16]
   13300:	ldr	r3, [r3, #48]	; 0x30
   13304:	cmp	r3, #0
   13308:	blt	1338c <__assert_fail@plt+0x1d68>
   1330c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13310:	ldr	r3, [r3, #56]	; 0x38
   13314:	ldrd	r2, [r3, #16]
   13318:	orrs	r3, r2, r3
   1331c:	bne	13324 <__assert_fail@plt+0x1d00>
   13320:	bl	115e8 <abort@plt>
   13324:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13328:	ldr	r3, [r3, #56]	; 0x38
   1332c:	ldrd	r0, [r3]
   13330:	ldr	r3, [fp, #-8]
   13334:	ldrd	r2, [r3, #96]	; 0x60
   13338:	cmp	r1, r3
   1333c:	cmpeq	r0, r2
   13340:	bne	1338c <__assert_fail@plt+0x1d68>
   13344:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13348:	ldr	r3, [r3, #56]	; 0x38
   1334c:	ldrd	r0, [r3, #8]
   13350:	ldr	r3, [fp, #-8]
   13354:	ldrd	r2, [r3]
   13358:	cmp	r1, r3
   1335c:	cmpeq	r0, r2
   13360:	bne	1338c <__assert_fail@plt+0x1d68>
   13364:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13368:	ldr	r1, [r3, #56]	; 0x38
   1336c:	ldr	r3, [fp, #-16]
   13370:	ldrd	r2, [r3, #64]	; 0x40
   13374:	strd	r2, [r1, #8]
   13378:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1337c:	ldr	r1, [r3, #56]	; 0x38
   13380:	ldr	r3, [fp, #-16]
   13384:	ldrd	r2, [r3, #160]	; 0xa0
   13388:	strd	r2, [r1]
   1338c:	nop			; (mov r0, r0)
   13390:	sub	sp, fp, #4
   13394:	pop	{fp, pc}
   13398:	andeq	r0, r0, r2, lsl #2
   1339c:	push	{fp, lr}
   133a0:	add	fp, sp, #4
   133a4:	sub	sp, sp, #8
   133a8:	str	r0, [fp, #-8]
   133ac:	ldr	r3, [fp, #-8]
   133b0:	ldr	r2, [r3, #48]	; 0x30
   133b4:	ldr	r3, [pc, #72]	; 13404 <__assert_fail@plt+0x1de0>
   133b8:	and	r3, r3, r2
   133bc:	cmp	r3, #0
   133c0:	beq	133e8 <__assert_fail@plt+0x1dc4>
   133c4:	ldr	r3, [fp, #-8]
   133c8:	ldr	r3, [r3, #56]	; 0x38
   133cc:	cmp	r3, #0
   133d0:	beq	133f8 <__assert_fail@plt+0x1dd4>
   133d4:	ldr	r3, [fp, #-8]
   133d8:	ldr	r3, [r3, #56]	; 0x38
   133dc:	mov	r0, r3
   133e0:	bl	17014 <__assert_fail@plt+0x59f0>
   133e4:	b	133f8 <__assert_fail@plt+0x1dd4>
   133e8:	ldr	r3, [fp, #-8]
   133ec:	ldr	r3, [r3, #56]	; 0x38
   133f0:	mov	r0, r3
   133f4:	bl	1d784 <__assert_fail@plt+0xc160>
   133f8:	nop			; (mov r0, r0)
   133fc:	sub	sp, fp, #4
   13400:	pop	{fp, pc}
   13404:	andeq	r0, r0, r2, lsl #2
   13408:	push	{fp, lr}
   1340c:	add	fp, sp, #4
   13410:	sub	sp, sp, #16
   13414:	str	r0, [fp, #-16]
   13418:	b	1343c <__assert_fail@plt+0x1e18>
   1341c:	ldr	r0, [fp, #-16]
   13420:	bl	17e60 <__assert_fail@plt+0x683c>
   13424:	str	r0, [fp, #-8]
   13428:	ldr	r3, [fp, #-8]
   1342c:	cmp	r3, #0
   13430:	blt	1343c <__assert_fail@plt+0x1e18>
   13434:	ldr	r0, [fp, #-8]
   13438:	bl	115f4 <close@plt>
   1343c:	ldr	r0, [fp, #-16]
   13440:	bl	17d78 <__assert_fail@plt+0x6754>
   13444:	mov	r3, r0
   13448:	eor	r3, r3, #1
   1344c:	uxtb	r3, r3
   13450:	cmp	r3, #0
   13454:	bne	1341c <__assert_fail@plt+0x1df8>
   13458:	nop			; (mov r0, r0)
   1345c:	sub	sp, fp, #4
   13460:	pop	{fp, pc}
   13464:	push	{fp, lr}
   13468:	add	fp, sp, #4
   1346c:	sub	sp, sp, #8
   13470:	str	r0, [fp, #-8]
   13474:	mov	r3, r1
   13478:	strb	r3, [fp, #-9]
   1347c:	ldr	r3, [fp, #-8]
   13480:	ldrh	r3, [r3, #56]	; 0x38
   13484:	cmp	r3, #11
   13488:	beq	13490 <__assert_fail@plt+0x1e6c>
   1348c:	bl	115e8 <abort@plt>
   13490:	ldrb	r3, [fp, #-9]
   13494:	cmp	r3, #0
   13498:	beq	134a8 <__assert_fail@plt+0x1e84>
   1349c:	mov	r2, #2
   134a0:	mov	r3, #0
   134a4:	b	134b0 <__assert_fail@plt+0x1e8c>
   134a8:	mov	r2, #1
   134ac:	mov	r3, #0
   134b0:	ldr	r1, [fp, #-8]
   134b4:	strd	r2, [r1, #112]	; 0x70
   134b8:	nop			; (mov r0, r0)
   134bc:	sub	sp, fp, #4
   134c0:	pop	{fp, pc}
   134c4:	push	{fp, lr}
   134c8:	add	fp, sp, #4
   134cc:	sub	sp, sp, #24
   134d0:	str	r0, [fp, #-16]
   134d4:	str	r1, [fp, #-20]	; 0xffffffec
   134d8:	mov	r3, r2
   134dc:	strb	r3, [fp, #-21]	; 0xffffffeb
   134e0:	ldr	r3, [fp, #-16]
   134e4:	ldr	r3, [r3, #32]
   134e8:	str	r3, [fp, #-8]
   134ec:	ldr	r2, [fp, #-8]
   134f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   134f4:	cmp	r2, r3
   134f8:	bne	1350c <__assert_fail@plt+0x1ee8>
   134fc:	ldr	r3, [fp, #-8]
   13500:	cmn	r3, #100	; 0x64
   13504:	beq	1350c <__assert_fail@plt+0x1ee8>
   13508:	bl	115e8 <abort@plt>
   1350c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13510:	cmp	r3, #0
   13514:	beq	13548 <__assert_fail@plt+0x1f24>
   13518:	ldr	r3, [fp, #-16]
   1351c:	add	r3, r3, #60	; 0x3c
   13520:	ldr	r1, [fp, #-8]
   13524:	mov	r0, r3
   13528:	bl	17da0 <__assert_fail@plt+0x677c>
   1352c:	str	r0, [fp, #-12]
   13530:	ldr	r3, [fp, #-12]
   13534:	cmp	r3, #0
   13538:	blt	13570 <__assert_fail@plt+0x1f4c>
   1353c:	ldr	r0, [fp, #-12]
   13540:	bl	115f4 <close@plt>
   13544:	b	13570 <__assert_fail@plt+0x1f4c>
   13548:	ldr	r3, [fp, #-16]
   1354c:	ldr	r3, [r3, #48]	; 0x30
   13550:	and	r3, r3, #4
   13554:	cmp	r3, #0
   13558:	bne	13570 <__assert_fail@plt+0x1f4c>
   1355c:	ldr	r3, [fp, #-8]
   13560:	cmp	r3, #0
   13564:	blt	13570 <__assert_fail@plt+0x1f4c>
   13568:	ldr	r0, [fp, #-8]
   1356c:	bl	115f4 <close@plt>
   13570:	ldr	r3, [fp, #-16]
   13574:	ldr	r2, [fp, #-20]	; 0xffffffec
   13578:	str	r2, [r3, #32]
   1357c:	nop			; (mov r0, r0)
   13580:	sub	sp, fp, #4
   13584:	pop	{fp, pc}
   13588:	push	{fp, lr}
   1358c:	add	fp, sp, #4
   13590:	sub	sp, sp, #16
   13594:	str	r0, [fp, #-16]
   13598:	ldr	r3, [fp, #-16]
   1359c:	ldr	r3, [r3, #48]	; 0x30
   135a0:	and	r3, r3, #4
   135a4:	cmp	r3, #0
   135a8:	bne	13638 <__assert_fail@plt+0x2014>
   135ac:	ldr	r3, [fp, #-16]
   135b0:	ldr	r3, [r3, #48]	; 0x30
   135b4:	and	r3, r3, #512	; 0x200
   135b8:	cmp	r3, #0
   135bc:	beq	135f8 <__assert_fail@plt+0x1fd4>
   135c0:	ldr	r3, [fp, #-16]
   135c4:	ldr	r3, [r3, #48]	; 0x30
   135c8:	and	r3, r3, #512	; 0x200
   135cc:	cmp	r3, #0
   135d0:	bne	135e0 <__assert_fail@plt+0x1fbc>
   135d4:	ldr	r3, [fp, #-16]
   135d8:	ldr	r3, [r3, #28]
   135dc:	b	135e4 <__assert_fail@plt+0x1fc0>
   135e0:	mvn	r3, #99	; 0x63
   135e4:	mov	r2, #1
   135e8:	mov	r1, r3
   135ec:	ldr	r0, [fp, #-16]
   135f0:	bl	134c4 <__assert_fail@plt+0x1ea0>
   135f4:	b	13638 <__assert_fail@plt+0x2014>
   135f8:	ldr	r3, [fp, #-16]
   135fc:	ldr	r3, [r3, #48]	; 0x30
   13600:	and	r3, r3, #512	; 0x200
   13604:	cmp	r3, #0
   13608:	bne	13618 <__assert_fail@plt+0x1ff4>
   1360c:	ldr	r3, [fp, #-16]
   13610:	ldr	r3, [r3, #28]
   13614:	b	1361c <__assert_fail@plt+0x1ff8>
   13618:	mvn	r3, #99	; 0x63
   1361c:	mov	r0, r3
   13620:	bl	11588 <fchdir@plt>
   13624:	mov	r3, r0
   13628:	cmp	r3, #0
   1362c:	beq	13638 <__assert_fail@plt+0x2014>
   13630:	mov	r3, #1
   13634:	b	1363c <__assert_fail@plt+0x2018>
   13638:	mov	r3, #0
   1363c:	str	r3, [fp, #-8]
   13640:	ldr	r3, [fp, #-16]
   13644:	add	r3, r3, #60	; 0x3c
   13648:	mov	r0, r3
   1364c:	bl	13408 <__assert_fail@plt+0x1de4>
   13650:	ldr	r3, [fp, #-8]
   13654:	mov	r0, r3
   13658:	sub	sp, fp, #4
   1365c:	pop	{fp, pc}
   13660:	push	{fp, lr}
   13664:	add	fp, sp, #4
   13668:	sub	sp, sp, #16
   1366c:	str	r0, [fp, #-16]
   13670:	str	r1, [fp, #-20]	; 0xffffffec
   13674:	ldr	r3, [fp, #-16]
   13678:	ldr	r3, [r3, #48]	; 0x30
   1367c:	and	r3, r3, #16
   13680:	cmp	r3, #0
   13684:	beq	13690 <__assert_fail@plt+0x206c>
   13688:	ldr	r3, [pc, #96]	; 136f0 <__assert_fail@plt+0x20cc>
   1368c:	b	13694 <__assert_fail@plt+0x2070>
   13690:	ldr	r3, [pc, #92]	; 136f4 <__assert_fail@plt+0x20d0>
   13694:	str	r3, [fp, #-8]
   13698:	ldr	r3, [fp, #-16]
   1369c:	ldr	r3, [r3, #48]	; 0x30
   136a0:	and	r3, r3, #512	; 0x200
   136a4:	cmp	r3, #0
   136a8:	beq	136cc <__assert_fail@plt+0x20a8>
   136ac:	ldr	r3, [fp, #-16]
   136b0:	ldr	r3, [r3, #32]
   136b4:	ldr	r2, [fp, #-8]
   136b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   136bc:	mov	r0, r3
   136c0:	bl	17f04 <__assert_fail@plt+0x68e0>
   136c4:	mov	r3, r0
   136c8:	b	136dc <__assert_fail@plt+0x20b8>
   136cc:	ldr	r1, [fp, #-8]
   136d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   136d4:	bl	1d660 <__assert_fail@plt+0xc03c>
   136d8:	mov	r3, r0
   136dc:	str	r3, [fp, #-12]
   136e0:	ldr	r3, [fp, #-12]
   136e4:	mov	r0, r3
   136e8:	sub	sp, fp, #4
   136ec:	pop	{fp, pc}
   136f0:	andeq	ip, r8, r0, lsl #18
   136f4:	andeq	r4, r8, r0, lsl #18
   136f8:	push	{r4, r5, r6, r7, r8, fp, lr}
   136fc:	add	fp, sp, #24
   13700:	sub	sp, sp, #36	; 0x24
   13704:	str	r0, [fp, #-56]	; 0xffffffc8
   13708:	mov	r7, r1
   1370c:	str	r2, [fp, #-60]	; 0xffffffc4
   13710:	mov	r3, #0
   13714:	str	r3, [fp, #-32]	; 0xffffffe0
   13718:	mov	r3, #0
   1371c:	str	r3, [fp, #-36]	; 0xffffffdc
   13720:	bic	r3, r7, #4080	; 0xff0
   13724:	bic	r3, r3, #15
   13728:	cmp	r3, #0
   1372c:	beq	13748 <__assert_fail@plt+0x2124>
   13730:	bl	114bc <__errno_location@plt>
   13734:	mov	r2, r0
   13738:	mov	r3, #22
   1373c:	str	r3, [r2]
   13740:	mov	r3, #0
   13744:	b	13b5c <__assert_fail@plt+0x2538>
   13748:	and	r3, r7, #4
   1374c:	cmp	r3, #0
   13750:	beq	13778 <__assert_fail@plt+0x2154>
   13754:	and	r3, r7, #512	; 0x200
   13758:	cmp	r3, #0
   1375c:	beq	13778 <__assert_fail@plt+0x2154>
   13760:	bl	114bc <__errno_location@plt>
   13764:	mov	r2, r0
   13768:	mov	r3, #22
   1376c:	str	r3, [r2]
   13770:	mov	r3, #0
   13774:	b	13b5c <__assert_fail@plt+0x2538>
   13778:	and	r3, r7, #18
   1377c:	cmp	r3, #0
   13780:	bne	1379c <__assert_fail@plt+0x2178>
   13784:	bl	114bc <__errno_location@plt>
   13788:	mov	r2, r0
   1378c:	mov	r3, #22
   13790:	str	r3, [r2]
   13794:	mov	r3, #0
   13798:	b	13b5c <__assert_fail@plt+0x2538>
   1379c:	mov	r1, #96	; 0x60
   137a0:	mov	r0, #1
   137a4:	bl	1c80c <__assert_fail@plt+0xb1e8>
   137a8:	mov	r3, r0
   137ac:	mov	r4, r3
   137b0:	cmp	r4, #0
   137b4:	bne	137c0 <__assert_fail@plt+0x219c>
   137b8:	mov	r3, #0
   137bc:	b	13b5c <__assert_fail@plt+0x2538>
   137c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   137c4:	str	r3, [r4, #44]	; 0x2c
   137c8:	str	r7, [r4, #48]	; 0x30
   137cc:	ldr	r3, [r4, #48]	; 0x30
   137d0:	and	r3, r3, #2
   137d4:	cmp	r3, #0
   137d8:	beq	137f4 <__assert_fail@plt+0x21d0>
   137dc:	ldr	r3, [r4, #48]	; 0x30
   137e0:	orr	r3, r3, #4
   137e4:	str	r3, [r4, #48]	; 0x30
   137e8:	ldr	r3, [r4, #48]	; 0x30
   137ec:	bic	r3, r3, #512	; 0x200
   137f0:	str	r3, [r4, #48]	; 0x30
   137f4:	mvn	r3, #99	; 0x63
   137f8:	str	r3, [r4, #32]
   137fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13800:	bl	15e6c <__assert_fail@plt+0x4848>
   13804:	str	r0, [fp, #-44]	; 0xffffffd4
   13808:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1380c:	cmp	r3, #4096	; 0x1000
   13810:	movcs	r3, r3
   13814:	movcc	r3, #4096	; 0x1000
   13818:	mov	r1, r3
   1381c:	mov	r0, r4
   13820:	bl	15c44 <__assert_fail@plt+0x4620>
   13824:	mov	r3, r0
   13828:	eor	r3, r3, #1
   1382c:	uxtb	r3, r3
   13830:	cmp	r3, #0
   13834:	bne	13b4c <__assert_fail@plt+0x2528>
   13838:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1383c:	ldr	r3, [r3]
   13840:	cmp	r3, #0
   13844:	beq	13874 <__assert_fail@plt+0x2250>
   13848:	mov	r2, #0
   1384c:	ldr	r1, [pc, #788]	; 13b68 <__assert_fail@plt+0x2544>
   13850:	mov	r0, r4
   13854:	bl	15b40 <__assert_fail@plt+0x451c>
   13858:	str	r0, [fp, #-32]	; 0xffffffe0
   1385c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13860:	cmp	r3, #0
   13864:	beq	13b38 <__assert_fail@plt+0x2514>
   13868:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1386c:	mvn	r2, #0
   13870:	str	r2, [r3, #48]	; 0x30
   13874:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13878:	cmp	r3, #0
   1387c:	beq	13890 <__assert_fail@plt+0x226c>
   13880:	ldr	r3, [r4, #48]	; 0x30
   13884:	and	r3, r3, #1024	; 0x400
   13888:	cmp	r3, #0
   1388c:	beq	13898 <__assert_fail@plt+0x2274>
   13890:	mov	r3, #1
   13894:	b	1389c <__assert_fail@plt+0x2278>
   13898:	mov	r3, #0
   1389c:	strb	r3, [fp, #-45]	; 0xffffffd3
   138a0:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   138a4:	and	r3, r3, #1
   138a8:	strb	r3, [fp, #-45]	; 0xffffffd3
   138ac:	mov	r6, #0
   138b0:	mov	r8, #0
   138b4:	b	13a14 <__assert_fail@plt+0x23f0>
   138b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   138bc:	ldr	r3, [r3]
   138c0:	mov	r0, r3
   138c4:	bl	1148c <strlen@plt>
   138c8:	str	r0, [fp, #-40]	; 0xffffffd8
   138cc:	and	r3, r7, #2048	; 0x800
   138d0:	cmp	r3, #0
   138d4:	bne	13944 <__assert_fail@plt+0x2320>
   138d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   138dc:	ldr	r3, [r3]
   138e0:	str	r3, [fp, #-52]	; 0xffffffcc
   138e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   138e8:	cmp	r3, #2
   138ec:	bls	13944 <__assert_fail@plt+0x2320>
   138f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   138f4:	sub	r3, r3, #1
   138f8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   138fc:	add	r3, r2, r3
   13900:	ldrb	r3, [r3]
   13904:	cmp	r3, #47	; 0x2f
   13908:	bne	13944 <__assert_fail@plt+0x2320>
   1390c:	b	1391c <__assert_fail@plt+0x22f8>
   13910:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13914:	sub	r3, r3, #1
   13918:	str	r3, [fp, #-40]	; 0xffffffd8
   1391c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13920:	cmp	r3, #1
   13924:	bls	13944 <__assert_fail@plt+0x2320>
   13928:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1392c:	sub	r3, r3, #2
   13930:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13934:	add	r3, r2, r3
   13938:	ldrb	r3, [r3]
   1393c:	cmp	r3, #47	; 0x2f
   13940:	beq	13910 <__assert_fail@plt+0x22ec>
   13944:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13948:	ldr	r3, [r3]
   1394c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13950:	mov	r1, r3
   13954:	mov	r0, r4
   13958:	bl	15b40 <__assert_fail@plt+0x451c>
   1395c:	mov	r5, r0
   13960:	cmp	r5, #0
   13964:	beq	13b10 <__assert_fail@plt+0x24ec>
   13968:	mov	r3, #0
   1396c:	str	r3, [r5, #48]	; 0x30
   13970:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13974:	str	r3, [r5, #4]
   13978:	add	r3, r5, #168	; 0xa8
   1397c:	str	r3, [r5, #24]
   13980:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   13984:	cmp	r3, #0
   13988:	beq	139ac <__assert_fail@plt+0x2388>
   1398c:	cmp	r6, #0
   13990:	beq	139ac <__assert_fail@plt+0x2388>
   13994:	mov	r3, #11
   13998:	strh	r3, [r5, #56]	; 0x38
   1399c:	mov	r1, #1
   139a0:	mov	r0, r5
   139a4:	bl	13464 <__assert_fail@plt+0x1e40>
   139a8:	b	139c4 <__assert_fail@plt+0x23a0>
   139ac:	mov	r2, #0
   139b0:	mov	r1, r5
   139b4:	mov	r0, r4
   139b8:	bl	157c8 <__assert_fail@plt+0x41a4>
   139bc:	mov	r3, r0
   139c0:	strh	r3, [r5, #56]	; 0x38
   139c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   139c8:	cmp	r3, #0
   139cc:	beq	139dc <__assert_fail@plt+0x23b8>
   139d0:	str	r6, [r5, #8]
   139d4:	mov	r6, r5
   139d8:	b	13a04 <__assert_fail@plt+0x23e0>
   139dc:	mov	r3, #0
   139e0:	str	r3, [r5, #8]
   139e4:	cmp	r6, #0
   139e8:	bne	139f8 <__assert_fail@plt+0x23d4>
   139ec:	mov	r6, r5
   139f0:	str	r6, [fp, #-36]	; 0xffffffdc
   139f4:	b	13a04 <__assert_fail@plt+0x23e0>
   139f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   139fc:	str	r5, [r3, #8]
   13a00:	str	r5, [fp, #-36]	; 0xffffffdc
   13a04:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a08:	add	r3, r3, #4
   13a0c:	str	r3, [fp, #-56]	; 0xffffffc8
   13a10:	add	r8, r8, #1
   13a14:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a18:	ldr	r3, [r3]
   13a1c:	cmp	r3, #0
   13a20:	bne	138b8 <__assert_fail@plt+0x2294>
   13a24:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13a28:	cmp	r3, #0
   13a2c:	beq	13a4c <__assert_fail@plt+0x2428>
   13a30:	cmp	r8, #1
   13a34:	bls	13a4c <__assert_fail@plt+0x2428>
   13a38:	mov	r2, r8
   13a3c:	mov	r1, r6
   13a40:	mov	r0, r4
   13a44:	bl	159f8 <__assert_fail@plt+0x43d4>
   13a48:	mov	r6, r0
   13a4c:	mov	r2, #0
   13a50:	ldr	r1, [pc, #272]	; 13b68 <__assert_fail@plt+0x2544>
   13a54:	mov	r0, r4
   13a58:	bl	15b40 <__assert_fail@plt+0x451c>
   13a5c:	mov	r3, r0
   13a60:	str	r3, [r4]
   13a64:	ldr	r3, [r4]
   13a68:	cmp	r3, #0
   13a6c:	beq	13b18 <__assert_fail@plt+0x24f4>
   13a70:	ldr	r3, [r4]
   13a74:	str	r6, [r3, #8]
   13a78:	ldr	r3, [r4]
   13a7c:	mov	r2, #9
   13a80:	strh	r2, [r3, #56]	; 0x38
   13a84:	ldr	r3, [r4]
   13a88:	mov	r2, #1
   13a8c:	str	r2, [r3, #48]	; 0x30
   13a90:	mov	r0, r4
   13a94:	bl	13050 <__assert_fail@plt+0x1a2c>
   13a98:	mov	r3, r0
   13a9c:	eor	r3, r3, #1
   13aa0:	uxtb	r3, r3
   13aa4:	cmp	r3, #0
   13aa8:	bne	13b20 <__assert_fail@plt+0x24fc>
   13aac:	ldr	r3, [r4, #48]	; 0x30
   13ab0:	and	r3, r3, #4
   13ab4:	cmp	r3, #0
   13ab8:	bne	13af8 <__assert_fail@plt+0x24d4>
   13abc:	ldr	r3, [r4, #48]	; 0x30
   13ac0:	and	r3, r3, #512	; 0x200
   13ac4:	cmp	r3, #0
   13ac8:	bne	13af8 <__assert_fail@plt+0x24d4>
   13acc:	ldr	r1, [pc, #152]	; 13b6c <__assert_fail@plt+0x2548>
   13ad0:	mov	r0, r4
   13ad4:	bl	13660 <__assert_fail@plt+0x203c>
   13ad8:	mov	r3, r0
   13adc:	str	r3, [r4, #28]
   13ae0:	ldr	r3, [r4, #28]
   13ae4:	cmp	r3, #0
   13ae8:	bge	13af8 <__assert_fail@plt+0x24d4>
   13aec:	ldr	r3, [r4, #48]	; 0x30
   13af0:	orr	r3, r3, #4
   13af4:	str	r3, [r4, #48]	; 0x30
   13af8:	add	r3, r4, #60	; 0x3c
   13afc:	mvn	r1, #0
   13b00:	mov	r0, r3
   13b04:	bl	17cf0 <__assert_fail@plt+0x66cc>
   13b08:	mov	r3, r4
   13b0c:	b	13b5c <__assert_fail@plt+0x2538>
   13b10:	nop			; (mov r0, r0)
   13b14:	b	13b24 <__assert_fail@plt+0x2500>
   13b18:	nop			; (mov r0, r0)
   13b1c:	b	13b24 <__assert_fail@plt+0x2500>
   13b20:	nop			; (mov r0, r0)
   13b24:	mov	r0, r6
   13b28:	bl	15bfc <__assert_fail@plt+0x45d8>
   13b2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13b30:	bl	1d784 <__assert_fail@plt+0xc160>
   13b34:	b	13b3c <__assert_fail@plt+0x2518>
   13b38:	nop			; (mov r0, r0)
   13b3c:	ldr	r3, [r4, #24]
   13b40:	mov	r0, r3
   13b44:	bl	1d784 <__assert_fail@plt+0xc160>
   13b48:	b	13b50 <__assert_fail@plt+0x252c>
   13b4c:	nop			; (mov r0, r0)
   13b50:	mov	r0, r4
   13b54:	bl	1d784 <__assert_fail@plt+0xc160>
   13b58:	mov	r3, #0
   13b5c:	mov	r0, r3
   13b60:	sub	sp, fp, #24
   13b64:	pop	{r4, r5, r6, r7, r8, fp, pc}
   13b68:	andeq	pc, r1, ip, ror #29
   13b6c:	strdeq	pc, [r1], -r0
   13b70:	push	{r4, r5, r6, fp, lr}
   13b74:	add	fp, sp, #16
   13b78:	sub	sp, sp, #12
   13b7c:	str	r0, [fp, #-24]	; 0xffffffe8
   13b80:	mov	r4, r1
   13b84:	ldr	r3, [r4, #52]	; 0x34
   13b88:	str	r3, [r4, #40]	; 0x28
   13b8c:	ldr	r6, [r4, #40]	; 0x28
   13b90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b94:	ldr	r3, [r3, #24]
   13b98:	add	r1, r4, #168	; 0xa8
   13b9c:	add	r2, r6, #1
   13ba0:	mov	r0, r3
   13ba4:	bl	112ac <memmove@plt>
   13ba8:	add	r3, r4, #168	; 0xa8
   13bac:	mov	r1, #47	; 0x2f
   13bb0:	mov	r0, r3
   13bb4:	bl	11540 <strrchr@plt>
   13bb8:	mov	r5, r0
   13bbc:	cmp	r5, #0
   13bc0:	beq	13c08 <__assert_fail@plt+0x25e4>
   13bc4:	add	r3, r4, #168	; 0xa8
   13bc8:	cmp	r3, r5
   13bcc:	bne	13be0 <__assert_fail@plt+0x25bc>
   13bd0:	add	r3, r5, #1
   13bd4:	ldrb	r3, [r3]
   13bd8:	cmp	r3, #0
   13bdc:	beq	13c08 <__assert_fail@plt+0x25e4>
   13be0:	add	r5, r5, #1
   13be4:	mov	r0, r5
   13be8:	bl	1148c <strlen@plt>
   13bec:	mov	r6, r0
   13bf0:	add	r3, r4, #168	; 0xa8
   13bf4:	add	r2, r6, #1
   13bf8:	mov	r1, r5
   13bfc:	mov	r0, r3
   13c00:	bl	112ac <memmove@plt>
   13c04:	str	r6, [r4, #52]	; 0x34
   13c08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c0c:	ldr	r3, [r3, #24]
   13c10:	str	r3, [r4, #28]
   13c14:	ldr	r3, [r4, #28]
   13c18:	str	r3, [r4, #24]
   13c1c:	nop			; (mov r0, r0)
   13c20:	sub	sp, fp, #16
   13c24:	pop	{r4, r5, r6, fp, pc}
   13c28:	push	{r4, r5, fp, lr}
   13c2c:	add	fp, sp, #12
   13c30:	sub	sp, sp, #16
   13c34:	str	r0, [fp, #-24]	; 0xffffffe8
   13c38:	mov	r3, #0
   13c3c:	str	r3, [fp, #-16]
   13c40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c44:	ldr	r3, [r3]
   13c48:	cmp	r3, #0
   13c4c:	beq	13c98 <__assert_fail@plt+0x2674>
   13c50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c54:	ldr	r4, [r3]
   13c58:	b	13c84 <__assert_fail@plt+0x2660>
   13c5c:	mov	r5, r4
   13c60:	ldr	r3, [r4, #8]
   13c64:	cmp	r3, #0
   13c68:	beq	13c74 <__assert_fail@plt+0x2650>
   13c6c:	ldr	r3, [r4, #8]
   13c70:	b	13c78 <__assert_fail@plt+0x2654>
   13c74:	ldr	r3, [r4, #4]
   13c78:	mov	r4, r3
   13c7c:	mov	r0, r5
   13c80:	bl	1d784 <__assert_fail@plt+0xc160>
   13c84:	ldr	r3, [r4, #48]	; 0x30
   13c88:	cmp	r3, #0
   13c8c:	bge	13c5c <__assert_fail@plt+0x2638>
   13c90:	mov	r0, r4
   13c94:	bl	1d784 <__assert_fail@plt+0xc160>
   13c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c9c:	ldr	r3, [r3, #4]
   13ca0:	cmp	r3, #0
   13ca4:	beq	13cb8 <__assert_fail@plt+0x2694>
   13ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cac:	ldr	r3, [r3, #4]
   13cb0:	mov	r0, r3
   13cb4:	bl	15bfc <__assert_fail@plt+0x45d8>
   13cb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cbc:	ldr	r3, [r3, #8]
   13cc0:	mov	r0, r3
   13cc4:	bl	1d784 <__assert_fail@plt+0xc160>
   13cc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ccc:	ldr	r3, [r3, #24]
   13cd0:	mov	r0, r3
   13cd4:	bl	1d784 <__assert_fail@plt+0xc160>
   13cd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cdc:	ldr	r3, [r3, #48]	; 0x30
   13ce0:	and	r3, r3, #512	; 0x200
   13ce4:	cmp	r3, #0
   13ce8:	beq	13d2c <__assert_fail@plt+0x2708>
   13cec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cf0:	ldr	r3, [r3, #32]
   13cf4:	cmp	r3, #0
   13cf8:	blt	13da4 <__assert_fail@plt+0x2780>
   13cfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d00:	ldr	r3, [r3, #32]
   13d04:	mov	r0, r3
   13d08:	bl	115f4 <close@plt>
   13d0c:	mov	r3, r0
   13d10:	cmp	r3, #0
   13d14:	beq	13da4 <__assert_fail@plt+0x2780>
   13d18:	bl	114bc <__errno_location@plt>
   13d1c:	mov	r3, r0
   13d20:	ldr	r3, [r3]
   13d24:	str	r3, [fp, #-16]
   13d28:	b	13da4 <__assert_fail@plt+0x2780>
   13d2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d30:	ldr	r3, [r3, #48]	; 0x30
   13d34:	and	r3, r3, #4
   13d38:	cmp	r3, #0
   13d3c:	bne	13da4 <__assert_fail@plt+0x2780>
   13d40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d44:	ldr	r3, [r3, #28]
   13d48:	mov	r0, r3
   13d4c:	bl	11588 <fchdir@plt>
   13d50:	mov	r3, r0
   13d54:	cmp	r3, #0
   13d58:	beq	13d6c <__assert_fail@plt+0x2748>
   13d5c:	bl	114bc <__errno_location@plt>
   13d60:	mov	r3, r0
   13d64:	ldr	r3, [r3]
   13d68:	str	r3, [fp, #-16]
   13d6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d70:	ldr	r3, [r3, #28]
   13d74:	mov	r0, r3
   13d78:	bl	115f4 <close@plt>
   13d7c:	mov	r3, r0
   13d80:	cmp	r3, #0
   13d84:	beq	13da4 <__assert_fail@plt+0x2780>
   13d88:	ldr	r3, [fp, #-16]
   13d8c:	cmp	r3, #0
   13d90:	bne	13da4 <__assert_fail@plt+0x2780>
   13d94:	bl	114bc <__errno_location@plt>
   13d98:	mov	r3, r0
   13d9c:	ldr	r3, [r3]
   13da0:	str	r3, [fp, #-16]
   13da4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13da8:	add	r3, r3, #60	; 0x3c
   13dac:	mov	r0, r3
   13db0:	bl	13408 <__assert_fail@plt+0x1de4>
   13db4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13db8:	ldr	r3, [r3, #52]	; 0x34
   13dbc:	cmp	r3, #0
   13dc0:	beq	13dd4 <__assert_fail@plt+0x27b0>
   13dc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13dc8:	ldr	r3, [r3, #52]	; 0x34
   13dcc:	mov	r0, r3
   13dd0:	bl	17014 <__assert_fail@plt+0x59f0>
   13dd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13dd8:	bl	1339c <__assert_fail@plt+0x1d78>
   13ddc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13de0:	bl	1d784 <__assert_fail@plt+0xc160>
   13de4:	ldr	r3, [fp, #-16]
   13de8:	cmp	r3, #0
   13dec:	beq	13e08 <__assert_fail@plt+0x27e4>
   13df0:	bl	114bc <__errno_location@plt>
   13df4:	mov	r2, r0
   13df8:	ldr	r3, [fp, #-16]
   13dfc:	str	r3, [r2]
   13e00:	mvn	r3, #0
   13e04:	b	13e0c <__assert_fail@plt+0x27e8>
   13e08:	mov	r3, #0
   13e0c:	mov	r0, r3
   13e10:	sub	sp, fp, #12
   13e14:	pop	{r4, r5, fp, pc}
   13e18:	push	{fp, lr}
   13e1c:	add	fp, sp, #4
   13e20:	sub	sp, sp, #24
   13e24:	str	r0, [fp, #-24]	; 0xffffffe8
   13e28:	str	r1, [fp, #-28]	; 0xffffffe4
   13e2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e30:	str	r3, [fp, #-8]
   13e34:	ldr	r3, [fp, #-8]
   13e38:	ldrd	r2, [r3]
   13e3c:	strd	r2, [fp, #-20]	; 0xffffffec
   13e40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13e44:	mov	r2, r3
   13e48:	mov	r3, #0
   13e4c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13e50:	bl	1ee10 <__assert_fail@plt+0xd7ec>
   13e54:	mov	r3, r2
   13e58:	mov	r0, r3
   13e5c:	sub	sp, fp, #4
   13e60:	pop	{fp, pc}
   13e64:	push	{fp}		; (str fp, [sp, #-4]!)
   13e68:	add	fp, sp, #0
   13e6c:	sub	sp, sp, #20
   13e70:	str	r0, [fp, #-16]
   13e74:	str	r1, [fp, #-20]	; 0xffffffec
   13e78:	ldr	r3, [fp, #-16]
   13e7c:	str	r3, [fp, #-8]
   13e80:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e84:	str	r3, [fp, #-12]
   13e88:	ldr	r3, [fp, #-8]
   13e8c:	ldrd	r0, [r3]
   13e90:	ldr	r3, [fp, #-12]
   13e94:	ldrd	r2, [r3]
   13e98:	cmp	r1, r3
   13e9c:	cmpeq	r0, r2
   13ea0:	moveq	r3, #1
   13ea4:	movne	r3, #0
   13ea8:	uxtb	r3, r3
   13eac:	mov	r0, r3
   13eb0:	add	sp, fp, #0
   13eb4:	pop	{fp}		; (ldr fp, [sp], #4)
   13eb8:	bx	lr
   13ebc:	push	{fp, lr}
   13ec0:	add	fp, sp, #4
   13ec4:	sub	sp, sp, #136	; 0x88
   13ec8:	str	r0, [fp, #-128]	; 0xffffff80
   13ecc:	str	r1, [fp, #-132]	; 0xffffff7c
   13ed0:	ldr	r3, [fp, #-128]	; 0xffffff80
   13ed4:	ldr	r3, [r3, #44]	; 0x2c
   13ed8:	str	r3, [fp, #-12]
   13edc:	ldr	r3, [fp, #-12]
   13ee0:	ldr	r3, [r3, #52]	; 0x34
   13ee4:	str	r3, [fp, #-8]
   13ee8:	ldr	r3, [fp, #-12]
   13eec:	ldr	r3, [r3, #48]	; 0x30
   13ef0:	and	r3, r3, #512	; 0x200
   13ef4:	cmp	r3, #0
   13ef8:	bne	13f04 <__assert_fail@plt+0x28e0>
   13efc:	mov	r3, #0
   13f00:	b	1403c <__assert_fail@plt+0x2a18>
   13f04:	ldr	r3, [fp, #-8]
   13f08:	cmp	r3, #0
   13f0c:	bne	13f48 <__assert_fail@plt+0x2924>
   13f10:	ldr	r3, [pc, #304]	; 14048 <__assert_fail@plt+0x2a24>
   13f14:	str	r3, [sp]
   13f18:	ldr	r3, [pc, #300]	; 1404c <__assert_fail@plt+0x2a28>
   13f1c:	ldr	r2, [pc, #300]	; 14050 <__assert_fail@plt+0x2a2c>
   13f20:	mov	r1, #0
   13f24:	mov	r0, #13
   13f28:	bl	16d38 <__assert_fail@plt+0x5714>
   13f2c:	mov	r3, r0
   13f30:	mov	r2, r3
   13f34:	ldr	r3, [fp, #-12]
   13f38:	str	r2, [r3, #52]	; 0x34
   13f3c:	ldr	r3, [fp, #-12]
   13f40:	ldr	r3, [r3, #52]	; 0x34
   13f44:	str	r3, [fp, #-8]
   13f48:	ldr	r3, [fp, #-8]
   13f4c:	cmp	r3, #0
   13f50:	beq	13f8c <__assert_fail@plt+0x2968>
   13f54:	ldr	r3, [fp, #-128]	; 0xffffff80
   13f58:	ldrd	r2, [r3, #64]	; 0x40
   13f5c:	strd	r2, [fp, #-124]	; 0xffffff84
   13f60:	sub	r3, fp, #124	; 0x7c
   13f64:	mov	r1, r3
   13f68:	ldr	r0, [fp, #-8]
   13f6c:	bl	164ec <__assert_fail@plt+0x4ec8>
   13f70:	str	r0, [fp, #-16]
   13f74:	ldr	r3, [fp, #-16]
   13f78:	cmp	r3, #0
   13f7c:	beq	13f8c <__assert_fail@plt+0x2968>
   13f80:	ldr	r3, [fp, #-16]
   13f84:	ldr	r3, [r3, #8]
   13f88:	b	1403c <__assert_fail@plt+0x2a18>
   13f8c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   13f90:	cmp	r3, #0
   13f94:	blt	13fb4 <__assert_fail@plt+0x2990>
   13f98:	sub	r3, fp, #108	; 0x6c
   13f9c:	mov	r1, r3
   13fa0:	ldr	r0, [fp, #-132]	; 0xffffff7c
   13fa4:	bl	11240 <fstatfs64@plt>
   13fa8:	mov	r3, r0
   13fac:	cmp	r3, #0
   13fb0:	beq	13fbc <__assert_fail@plt+0x2998>
   13fb4:	mov	r3, #0
   13fb8:	b	1403c <__assert_fail@plt+0x2a18>
   13fbc:	ldr	r3, [fp, #-8]
   13fc0:	cmp	r3, #0
   13fc4:	beq	14038 <__assert_fail@plt+0x2a14>
   13fc8:	mov	r0, #16
   13fcc:	bl	1c8d0 <__assert_fail@plt+0xb2ac>
   13fd0:	mov	r3, r0
   13fd4:	str	r3, [fp, #-20]	; 0xffffffec
   13fd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fdc:	cmp	r3, #0
   13fe0:	beq	14038 <__assert_fail@plt+0x2a14>
   13fe4:	ldr	r3, [fp, #-128]	; 0xffffff80
   13fe8:	ldrd	r2, [r3, #64]	; 0x40
   13fec:	ldr	r1, [fp, #-20]	; 0xffffffec
   13ff0:	strd	r2, [r1]
   13ff4:	ldr	r2, [fp, #-108]	; 0xffffff94
   13ff8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ffc:	str	r2, [r3, #8]
   14000:	ldr	r1, [fp, #-20]	; 0xffffffec
   14004:	ldr	r0, [fp, #-8]
   14008:	bl	17a80 <__assert_fail@plt+0x645c>
   1400c:	str	r0, [fp, #-16]
   14010:	ldr	r3, [fp, #-16]
   14014:	cmp	r3, #0
   14018:	beq	14030 <__assert_fail@plt+0x2a0c>
   1401c:	ldr	r2, [fp, #-16]
   14020:	ldr	r3, [fp, #-20]	; 0xffffffec
   14024:	cmp	r2, r3
   14028:	beq	14038 <__assert_fail@plt+0x2a14>
   1402c:	bl	115e8 <abort@plt>
   14030:	ldr	r0, [fp, #-20]	; 0xffffffec
   14034:	bl	1d784 <__assert_fail@plt+0xc160>
   14038:	ldr	r3, [fp, #-108]	; 0xffffff94
   1403c:	mov	r0, r3
   14040:	sub	sp, fp, #4
   14044:	pop	{fp, pc}
   14048:	andeq	sp, r1, r4, lsl #15
   1404c:	andeq	r3, r1, r4, ror #28
   14050:	andeq	r3, r1, r8, lsl lr
   14054:	push	{fp, lr}
   14058:	add	fp, sp, #4
   1405c:	sub	sp, sp, #8
   14060:	str	r0, [fp, #-8]
   14064:	str	r1, [fp, #-12]
   14068:	ldr	r1, [fp, #-12]
   1406c:	ldr	r0, [fp, #-8]
   14070:	bl	13ebc <__assert_fail@plt+0x2898>
   14074:	mov	r3, r0
   14078:	ldr	r2, [pc, #52]	; 140b4 <__assert_fail@plt+0x2a90>
   1407c:	cmp	r3, r2
   14080:	beq	1409c <__assert_fail@plt+0x2a78>
   14084:	ldr	r2, [pc, #44]	; 140b8 <__assert_fail@plt+0x2a94>
   14088:	cmp	r3, r2
   1408c:	beq	1409c <__assert_fail@plt+0x2a78>
   14090:	ldr	r2, [pc, #36]	; 140bc <__assert_fail@plt+0x2a98>
   14094:	cmp	r3, r2
   14098:	bne	140a4 <__assert_fail@plt+0x2a80>
   1409c:	mov	r3, #0
   140a0:	b	140a8 <__assert_fail@plt+0x2a84>
   140a4:	mov	r3, #1
   140a8:	mov	r0, r3
   140ac:	sub	sp, fp, #4
   140b0:	pop	{fp, pc}
   140b4:	andeq	r6, r0, r9, ror #18
   140b8:			; <UNDEFINED> instruction: 0x01021994
   140bc:			; <UNDEFINED> instruction: 0xff534d42
   140c0:	push	{fp, lr}
   140c4:	add	fp, sp, #4
   140c8:	sub	sp, sp, #8
   140cc:	str	r0, [fp, #-8]
   140d0:	str	r1, [fp, #-12]
   140d4:	ldr	r1, [fp, #-12]
   140d8:	ldr	r0, [fp, #-8]
   140dc:	bl	13ebc <__assert_fail@plt+0x2898>
   140e0:	mov	r3, r0
   140e4:	ldr	r2, [pc, #88]	; 14144 <__assert_fail@plt+0x2b20>
   140e8:	cmp	r3, r2
   140ec:	beq	1412c <__assert_fail@plt+0x2b08>
   140f0:	ldr	r2, [pc, #76]	; 14144 <__assert_fail@plt+0x2b20>
   140f4:	cmp	r3, r2
   140f8:	bgt	14114 <__assert_fail@plt+0x2af0>
   140fc:	ldr	r2, [pc, #68]	; 14148 <__assert_fail@plt+0x2b24>
   14100:	cmp	r3, r2
   14104:	beq	1412c <__assert_fail@plt+0x2b08>
   14108:	cmp	r3, #0
   1410c:	beq	1412c <__assert_fail@plt+0x2b08>
   14110:	b	14134 <__assert_fail@plt+0x2b10>
   14114:	ldr	r2, [pc, #48]	; 1414c <__assert_fail@plt+0x2b28>
   14118:	cmp	r3, r2
   1411c:	beq	1412c <__assert_fail@plt+0x2b08>
   14120:	ldr	r2, [pc, #40]	; 14150 <__assert_fail@plt+0x2b2c>
   14124:	cmp	r3, r2
   14128:	bne	14134 <__assert_fail@plt+0x2b10>
   1412c:	mov	r3, #0
   14130:	b	14138 <__assert_fail@plt+0x2b14>
   14134:	mov	r3, #1
   14138:	mov	r0, r3
   1413c:	sub	sp, fp, #4
   14140:	pop	{fp, pc}
   14144:	andeq	r6, r0, r9, ror #18
   14148:			; <UNDEFINED> instruction: 0xff534d42
   1414c:	andeq	r9, r0, r0, lsr #31
   14150:	movtpl	r4, #24911	; 0x614f
   14154:	push	{r4, r5, r6, r7, fp, lr}
   14158:	add	fp, sp, #20
   1415c:	mov	r5, r0
   14160:	ldr	r3, [r5]
   14164:	cmp	r3, #0
   14168:	beq	1417c <__assert_fail@plt+0x2b58>
   1416c:	ldr	r3, [r5, #48]	; 0x30
   14170:	and	r3, r3, #8192	; 0x2000
   14174:	cmp	r3, #0
   14178:	beq	14184 <__assert_fail@plt+0x2b60>
   1417c:	mov	r3, #0
   14180:	b	148b8 <__assert_fail@plt+0x3294>
   14184:	ldr	r4, [r5]
   14188:	ldrh	r6, [r4, #60]	; 0x3c
   1418c:	mov	r3, #3
   14190:	strh	r3, [r4, #60]	; 0x3c
   14194:	cmp	r6, #1
   14198:	bne	141bc <__assert_fail@plt+0x2b98>
   1419c:	mov	r2, #0
   141a0:	mov	r1, r4
   141a4:	mov	r0, r5
   141a8:	bl	157c8 <__assert_fail@plt+0x41a4>
   141ac:	mov	r3, r0
   141b0:	strh	r3, [r4, #56]	; 0x38
   141b4:	mov	r3, r4
   141b8:	b	148b8 <__assert_fail@plt+0x3294>
   141bc:	cmp	r6, #2
   141c0:	bne	14260 <__assert_fail@plt+0x2c3c>
   141c4:	ldrh	r3, [r4, #56]	; 0x38
   141c8:	cmp	r3, #12
   141cc:	beq	141dc <__assert_fail@plt+0x2bb8>
   141d0:	ldrh	r3, [r4, #56]	; 0x38
   141d4:	cmp	r3, #13
   141d8:	bne	14260 <__assert_fail@plt+0x2c3c>
   141dc:	mov	r2, #1
   141e0:	mov	r1, r4
   141e4:	mov	r0, r5
   141e8:	bl	157c8 <__assert_fail@plt+0x41a4>
   141ec:	mov	r3, r0
   141f0:	strh	r3, [r4, #56]	; 0x38
   141f4:	ldrh	r3, [r4, #56]	; 0x38
   141f8:	cmp	r3, #1
   141fc:	bne	14610 <__assert_fail@plt+0x2fec>
   14200:	ldr	r3, [r5, #48]	; 0x30
   14204:	and	r3, r3, #4
   14208:	cmp	r3, #0
   1420c:	bne	14610 <__assert_fail@plt+0x2fec>
   14210:	ldr	r1, [pc, #1704]	; 148c0 <__assert_fail@plt+0x329c>
   14214:	mov	r0, r5
   14218:	bl	13660 <__assert_fail@plt+0x203c>
   1421c:	mov	r3, r0
   14220:	str	r3, [r4, #36]	; 0x24
   14224:	ldr	r3, [r4, #36]	; 0x24
   14228:	cmp	r3, #0
   1422c:	bge	1424c <__assert_fail@plt+0x2c28>
   14230:	bl	114bc <__errno_location@plt>
   14234:	mov	r3, r0
   14238:	ldr	r3, [r3]
   1423c:	str	r3, [r4, #32]
   14240:	mov	r3, #7
   14244:	strh	r3, [r4, #56]	; 0x38
   14248:	b	14610 <__assert_fail@plt+0x2fec>
   1424c:	ldrh	r3, [r4, #58]	; 0x3a
   14250:	orr	r3, r3, #2
   14254:	uxth	r3, r3
   14258:	strh	r3, [r4, #58]	; 0x3a
   1425c:	b	14610 <__assert_fail@plt+0x2fec>
   14260:	ldrh	r3, [r4, #56]	; 0x38
   14264:	cmp	r3, #1
   14268:	bne	14418 <__assert_fail@plt+0x2df4>
   1426c:	cmp	r6, #4
   14270:	beq	14298 <__assert_fail@plt+0x2c74>
   14274:	ldr	r3, [r5, #48]	; 0x30
   14278:	and	r3, r3, #64	; 0x40
   1427c:	cmp	r3, #0
   14280:	beq	142f0 <__assert_fail@plt+0x2ccc>
   14284:	ldrd	r0, [r4, #64]	; 0x40
   14288:	ldrd	r2, [r5, #16]
   1428c:	cmp	r1, r3
   14290:	cmpeq	r0, r2
   14294:	beq	142f0 <__assert_fail@plt+0x2ccc>
   14298:	ldrh	r3, [r4, #58]	; 0x3a
   1429c:	and	r3, r3, #2
   142a0:	cmp	r3, #0
   142a4:	beq	142b4 <__assert_fail@plt+0x2c90>
   142a8:	ldr	r3, [r4, #36]	; 0x24
   142ac:	mov	r0, r3
   142b0:	bl	115f4 <close@plt>
   142b4:	ldr	r3, [r5, #4]
   142b8:	cmp	r3, #0
   142bc:	beq	142d4 <__assert_fail@plt+0x2cb0>
   142c0:	ldr	r3, [r5, #4]
   142c4:	mov	r0, r3
   142c8:	bl	15bfc <__assert_fail@plt+0x45d8>
   142cc:	mov	r3, #0
   142d0:	str	r3, [r5, #4]
   142d4:	mov	r3, #6
   142d8:	strh	r3, [r4, #56]	; 0x38
   142dc:	mov	r1, r4
   142e0:	mov	r0, r5
   142e4:	bl	1325c <__assert_fail@plt+0x1c38>
   142e8:	mov	r3, r4
   142ec:	b	148b8 <__assert_fail@plt+0x3294>
   142f0:	ldr	r3, [r5, #4]
   142f4:	cmp	r3, #0
   142f8:	beq	1432c <__assert_fail@plt+0x2d08>
   142fc:	ldr	r3, [r5, #48]	; 0x30
   14300:	and	r3, r3, #4096	; 0x1000
   14304:	cmp	r3, #0
   14308:	beq	1432c <__assert_fail@plt+0x2d08>
   1430c:	ldr	r3, [r5, #48]	; 0x30
   14310:	bic	r3, r3, #4096	; 0x1000
   14314:	str	r3, [r5, #48]	; 0x30
   14318:	ldr	r3, [r5, #4]
   1431c:	mov	r0, r3
   14320:	bl	15bfc <__assert_fail@plt+0x45d8>
   14324:	mov	r3, #0
   14328:	str	r3, [r5, #4]
   1432c:	ldr	r3, [r5, #4]
   14330:	cmp	r3, #0
   14334:	beq	1439c <__assert_fail@plt+0x2d78>
   14338:	ldr	r3, [r4, #24]
   1433c:	mvn	r2, #0
   14340:	mov	r1, r4
   14344:	mov	r0, r5
   14348:	bl	15ee4 <__assert_fail@plt+0x48c0>
   1434c:	mov	r3, r0
   14350:	cmp	r3, #0
   14354:	beq	14408 <__assert_fail@plt+0x2de4>
   14358:	bl	114bc <__errno_location@plt>
   1435c:	mov	r3, r0
   14360:	ldr	r3, [r3]
   14364:	str	r3, [r4, #32]
   14368:	ldrh	r3, [r4, #58]	; 0x3a
   1436c:	orr	r3, r3, #1
   14370:	uxth	r3, r3
   14374:	strh	r3, [r4, #58]	; 0x3a
   14378:	ldr	r4, [r5, #4]
   1437c:	b	14390 <__assert_fail@plt+0x2d6c>
   14380:	ldr	r3, [r4, #4]
   14384:	ldr	r3, [r3, #24]
   14388:	str	r3, [r4, #24]
   1438c:	ldr	r4, [r4, #8]
   14390:	cmp	r4, #0
   14394:	bne	14380 <__assert_fail@plt+0x2d5c>
   14398:	b	14408 <__assert_fail@plt+0x2de4>
   1439c:	mov	r1, #3
   143a0:	mov	r0, r5
   143a4:	bl	14c90 <__assert_fail@plt+0x366c>
   143a8:	mov	r3, r0
   143ac:	str	r3, [r5, #4]
   143b0:	ldr	r3, [r5, #4]
   143b4:	cmp	r3, #0
   143b8:	bne	14408 <__assert_fail@plt+0x2de4>
   143bc:	ldr	r3, [r5, #48]	; 0x30
   143c0:	and	r3, r3, #8192	; 0x2000
   143c4:	cmp	r3, #0
   143c8:	beq	143d4 <__assert_fail@plt+0x2db0>
   143cc:	mov	r3, #0
   143d0:	b	148b8 <__assert_fail@plt+0x3294>
   143d4:	ldr	r3, [r4, #32]
   143d8:	cmp	r3, #0
   143dc:	beq	143f4 <__assert_fail@plt+0x2dd0>
   143e0:	ldrh	r3, [r4, #56]	; 0x38
   143e4:	cmp	r3, #4
   143e8:	beq	143f4 <__assert_fail@plt+0x2dd0>
   143ec:	mov	r3, #7
   143f0:	strh	r3, [r4, #56]	; 0x38
   143f4:	mov	r1, r4
   143f8:	mov	r0, r5
   143fc:	bl	1325c <__assert_fail@plt+0x1c38>
   14400:	mov	r3, r4
   14404:	b	148b8 <__assert_fail@plt+0x3294>
   14408:	ldr	r4, [r5, #4]
   1440c:	mov	r3, #0
   14410:	str	r3, [r5, #4]
   14414:	b	145a0 <__assert_fail@plt+0x2f7c>
   14418:	mov	r6, r4
   1441c:	ldr	r3, [r4, #8]
   14420:	cmp	r3, #0
   14424:	bne	14490 <__assert_fail@plt+0x2e6c>
   14428:	ldr	r3, [r4, #4]
   1442c:	ldr	r3, [r3, #12]
   14430:	cmp	r3, #0
   14434:	beq	14490 <__assert_fail@plt+0x2e6c>
   14438:	ldr	r4, [r6, #4]
   1443c:	str	r4, [r5]
   14440:	ldr	r2, [r5, #24]
   14444:	ldr	r3, [r4, #40]	; 0x28
   14448:	add	r3, r2, r3
   1444c:	mov	r2, #0
   14450:	strb	r2, [r3]
   14454:	mov	r1, #3
   14458:	mov	r0, r5
   1445c:	bl	14c90 <__assert_fail@plt+0x366c>
   14460:	mov	r4, r0
   14464:	cmp	r4, #0
   14468:	bne	14484 <__assert_fail@plt+0x2e60>
   1446c:	ldr	r3, [r5, #48]	; 0x30
   14470:	and	r3, r3, #8192	; 0x2000
   14474:	cmp	r3, #0
   14478:	beq	146c4 <__assert_fail@plt+0x30a0>
   1447c:	mov	r3, #0
   14480:	b	148b8 <__assert_fail@plt+0x3294>
   14484:	mov	r0, r6
   14488:	bl	1d784 <__assert_fail@plt+0xc160>
   1448c:	b	145a0 <__assert_fail@plt+0x2f7c>
   14490:	ldr	r4, [r4, #8]
   14494:	cmp	r4, #0
   14498:	beq	146c8 <__assert_fail@plt+0x30a4>
   1449c:	str	r4, [r5]
   144a0:	mov	r0, r6
   144a4:	bl	1d784 <__assert_fail@plt+0xc160>
   144a8:	ldr	r3, [r4, #48]	; 0x30
   144ac:	cmp	r3, #0
   144b0:	bne	144fc <__assert_fail@plt+0x2ed8>
   144b4:	mov	r0, r5
   144b8:	bl	13588 <__assert_fail@plt+0x1f64>
   144bc:	mov	r3, r0
   144c0:	cmp	r3, #0
   144c4:	beq	144dc <__assert_fail@plt+0x2eb8>
   144c8:	ldr	r3, [r5, #48]	; 0x30
   144cc:	orr	r3, r3, #8192	; 0x2000
   144d0:	str	r3, [r5, #48]	; 0x30
   144d4:	mov	r3, #0
   144d8:	b	148b8 <__assert_fail@plt+0x3294>
   144dc:	mov	r0, r5
   144e0:	bl	1339c <__assert_fail@plt+0x1d78>
   144e4:	mov	r1, r4
   144e8:	mov	r0, r5
   144ec:	bl	13b70 <__assert_fail@plt+0x254c>
   144f0:	mov	r0, r5
   144f4:	bl	13050 <__assert_fail@plt+0x1a2c>
   144f8:	b	14614 <__assert_fail@plt+0x2ff0>
   144fc:	ldrh	r3, [r4, #60]	; 0x3c
   14500:	cmp	r3, #4
   14504:	bne	1450c <__assert_fail@plt+0x2ee8>
   14508:	b	14418 <__assert_fail@plt+0x2df4>
   1450c:	ldrh	r3, [r4, #60]	; 0x3c
   14510:	cmp	r3, #2
   14514:	bne	145a0 <__assert_fail@plt+0x2f7c>
   14518:	mov	r2, #1
   1451c:	mov	r1, r4
   14520:	mov	r0, r5
   14524:	bl	157c8 <__assert_fail@plt+0x41a4>
   14528:	mov	r3, r0
   1452c:	strh	r3, [r4, #56]	; 0x38
   14530:	ldrh	r3, [r4, #56]	; 0x38
   14534:	cmp	r3, #1
   14538:	bne	14598 <__assert_fail@plt+0x2f74>
   1453c:	ldr	r3, [r5, #48]	; 0x30
   14540:	and	r3, r3, #4
   14544:	cmp	r3, #0
   14548:	bne	14598 <__assert_fail@plt+0x2f74>
   1454c:	ldr	r1, [pc, #876]	; 148c0 <__assert_fail@plt+0x329c>
   14550:	mov	r0, r5
   14554:	bl	13660 <__assert_fail@plt+0x203c>
   14558:	mov	r3, r0
   1455c:	str	r3, [r4, #36]	; 0x24
   14560:	ldr	r3, [r4, #36]	; 0x24
   14564:	cmp	r3, #0
   14568:	bge	14588 <__assert_fail@plt+0x2f64>
   1456c:	bl	114bc <__errno_location@plt>
   14570:	mov	r3, r0
   14574:	ldr	r3, [r3]
   14578:	str	r3, [r4, #32]
   1457c:	mov	r3, #7
   14580:	strh	r3, [r4, #56]	; 0x38
   14584:	b	14598 <__assert_fail@plt+0x2f74>
   14588:	ldrh	r3, [r4, #58]	; 0x3a
   1458c:	orr	r3, r3, #2
   14590:	uxth	r3, r3
   14594:	strh	r3, [r4, #58]	; 0x3a
   14598:	mov	r3, #3
   1459c:	strh	r3, [r4, #60]	; 0x3c
   145a0:	ldr	r2, [r5, #24]
   145a4:	ldr	r3, [r4, #4]
   145a8:	ldr	r1, [r3, #28]
   145ac:	ldr	r3, [r4, #4]
   145b0:	ldr	r3, [r3, #40]	; 0x28
   145b4:	sub	r3, r3, #1
   145b8:	add	r3, r1, r3
   145bc:	ldrb	r3, [r3]
   145c0:	cmp	r3, #47	; 0x2f
   145c4:	bne	145d8 <__assert_fail@plt+0x2fb4>
   145c8:	ldr	r3, [r4, #4]
   145cc:	ldr	r3, [r3, #40]	; 0x28
   145d0:	sub	r3, r3, #1
   145d4:	b	145e0 <__assert_fail@plt+0x2fbc>
   145d8:	ldr	r3, [r4, #4]
   145dc:	ldr	r3, [r3, #40]	; 0x28
   145e0:	add	r6, r2, r3
   145e4:	mov	r3, r6
   145e8:	add	r6, r3, #1
   145ec:	mov	r2, #47	; 0x2f
   145f0:	strb	r2, [r3]
   145f4:	add	r1, r4, #168	; 0xa8
   145f8:	ldr	r3, [r4, #52]	; 0x34
   145fc:	add	r3, r3, #1
   14600:	mov	r2, r3
   14604:	mov	r0, r6
   14608:	bl	112ac <memmove@plt>
   1460c:	b	14614 <__assert_fail@plt+0x2ff0>
   14610:	nop			; (mov r0, r0)
   14614:	str	r4, [r5]
   14618:	ldrh	r3, [r4, #56]	; 0x38
   1461c:	cmp	r3, #11
   14620:	bne	14664 <__assert_fail@plt+0x3040>
   14624:	ldrd	r2, [r4, #112]	; 0x70
   14628:	cmp	r3, #0
   1462c:	cmpeq	r2, #2
   14630:	bne	14650 <__assert_fail@plt+0x302c>
   14634:	mov	r2, #0
   14638:	mov	r1, r4
   1463c:	mov	r0, r5
   14640:	bl	157c8 <__assert_fail@plt+0x41a4>
   14644:	mov	r3, r0
   14648:	strh	r3, [r4, #56]	; 0x38
   1464c:	b	14664 <__assert_fail@plt+0x3040>
   14650:	ldrd	r2, [r4, #112]	; 0x70
   14654:	cmp	r3, #0
   14658:	cmpeq	r2, #1
   1465c:	beq	14664 <__assert_fail@plt+0x3040>
   14660:	bl	115e8 <abort@plt>
   14664:	ldrh	r3, [r4, #56]	; 0x38
   14668:	cmp	r3, #1
   1466c:	bne	146bc <__assert_fail@plt+0x3098>
   14670:	ldr	r3, [r4, #48]	; 0x30
   14674:	cmp	r3, #0
   14678:	bne	14684 <__assert_fail@plt+0x3060>
   1467c:	ldrd	r2, [r4, #64]	; 0x40
   14680:	strd	r2, [r5, #16]
   14684:	mov	r1, r4
   14688:	mov	r0, r5
   1468c:	bl	1311c <__assert_fail@plt+0x1af8>
   14690:	mov	r3, r0
   14694:	eor	r3, r3, #1
   14698:	uxtb	r3, r3
   1469c:	cmp	r3, #0
   146a0:	beq	146bc <__assert_fail@plt+0x3098>
   146a4:	bl	114bc <__errno_location@plt>
   146a8:	mov	r2, r0
   146ac:	mov	r3, #12
   146b0:	str	r3, [r2]
   146b4:	mov	r3, #0
   146b8:	b	148b8 <__assert_fail@plt+0x3294>
   146bc:	mov	r3, r4
   146c0:	b	148b8 <__assert_fail@plt+0x3294>
   146c4:	nop			; (mov r0, r0)
   146c8:	ldr	r4, [r6, #4]
   146cc:	str	r4, [r5]
   146d0:	mov	r0, r6
   146d4:	bl	1d784 <__assert_fail@plt+0xc160>
   146d8:	ldr	r3, [r4, #48]	; 0x30
   146dc:	cmn	r3, #1
   146e0:	bne	1470c <__assert_fail@plt+0x30e8>
   146e4:	mov	r0, r4
   146e8:	bl	1d784 <__assert_fail@plt+0xc160>
   146ec:	bl	114bc <__errno_location@plt>
   146f0:	mov	r2, r0
   146f4:	mov	r3, #0
   146f8:	str	r3, [r2]
   146fc:	mov	r3, #0
   14700:	str	r3, [r5]
   14704:	mov	r3, #0
   14708:	b	148b8 <__assert_fail@plt+0x3294>
   1470c:	ldrh	r3, [r4, #56]	; 0x38
   14710:	cmp	r3, #11
   14714:	bne	1471c <__assert_fail@plt+0x30f8>
   14718:	bl	115e8 <abort@plt>
   1471c:	ldr	r2, [r5, #24]
   14720:	ldr	r3, [r4, #40]	; 0x28
   14724:	add	r3, r2, r3
   14728:	mov	r2, #0
   1472c:	strb	r2, [r3]
   14730:	ldr	r3, [r4, #48]	; 0x30
   14734:	cmp	r3, #0
   14738:	bne	14770 <__assert_fail@plt+0x314c>
   1473c:	mov	r0, r5
   14740:	bl	13588 <__assert_fail@plt+0x1f64>
   14744:	mov	r3, r0
   14748:	cmp	r3, #0
   1474c:	beq	1485c <__assert_fail@plt+0x3238>
   14750:	bl	114bc <__errno_location@plt>
   14754:	mov	r3, r0
   14758:	ldr	r3, [r3]
   1475c:	str	r3, [r4, #32]
   14760:	ldr	r3, [r5, #48]	; 0x30
   14764:	orr	r3, r3, #8192	; 0x2000
   14768:	str	r3, [r5, #48]	; 0x30
   1476c:	b	1485c <__assert_fail@plt+0x3238>
   14770:	ldrh	r3, [r4, #58]	; 0x3a
   14774:	and	r3, r3, #2
   14778:	cmp	r3, #0
   1477c:	beq	14810 <__assert_fail@plt+0x31ec>
   14780:	ldr	r3, [r5, #48]	; 0x30
   14784:	and	r3, r3, #4
   14788:	cmp	r3, #0
   1478c:	bne	14800 <__assert_fail@plt+0x31dc>
   14790:	ldr	r3, [r5, #48]	; 0x30
   14794:	and	r3, r3, #512	; 0x200
   14798:	cmp	r3, #0
   1479c:	beq	147bc <__assert_fail@plt+0x3198>
   147a0:	ldr	r3, [r4, #36]	; 0x24
   147a4:	mov	r2, #1
   147a8:	mov	r1, r3
   147ac:	mov	r0, r5
   147b0:	bl	134c4 <__assert_fail@plt+0x1ea0>
   147b4:	mov	r3, #0
   147b8:	b	147dc <__assert_fail@plt+0x31b8>
   147bc:	ldr	r3, [r4, #36]	; 0x24
   147c0:	mov	r0, r3
   147c4:	bl	11588 <fchdir@plt>
   147c8:	mov	r3, r0
   147cc:	cmp	r3, #0
   147d0:	movne	r3, #1
   147d4:	moveq	r3, #0
   147d8:	uxtb	r3, r3
   147dc:	cmp	r3, #0
   147e0:	beq	14800 <__assert_fail@plt+0x31dc>
   147e4:	bl	114bc <__errno_location@plt>
   147e8:	mov	r3, r0
   147ec:	ldr	r3, [r3]
   147f0:	str	r3, [r4, #32]
   147f4:	ldr	r3, [r5, #48]	; 0x30
   147f8:	orr	r3, r3, #8192	; 0x2000
   147fc:	str	r3, [r5, #48]	; 0x30
   14800:	ldr	r3, [r4, #36]	; 0x24
   14804:	mov	r0, r3
   14808:	bl	115f4 <close@plt>
   1480c:	b	1485c <__assert_fail@plt+0x3238>
   14810:	ldrh	r3, [r4, #58]	; 0x3a
   14814:	and	r3, r3, #1
   14818:	cmp	r3, #0
   1481c:	bne	1485c <__assert_fail@plt+0x3238>
   14820:	ldr	r1, [r4, #4]
   14824:	ldr	r3, [pc, #152]	; 148c4 <__assert_fail@plt+0x32a0>
   14828:	mvn	r2, #0
   1482c:	mov	r0, r5
   14830:	bl	15ee4 <__assert_fail@plt+0x48c0>
   14834:	mov	r3, r0
   14838:	cmp	r3, #0
   1483c:	beq	1485c <__assert_fail@plt+0x3238>
   14840:	bl	114bc <__errno_location@plt>
   14844:	mov	r3, r0
   14848:	ldr	r3, [r3]
   1484c:	str	r3, [r4, #32]
   14850:	ldr	r3, [r5, #48]	; 0x30
   14854:	orr	r3, r3, #8192	; 0x2000
   14858:	str	r3, [r5, #48]	; 0x30
   1485c:	ldrh	r3, [r4, #56]	; 0x38
   14860:	cmp	r3, #2
   14864:	beq	1489c <__assert_fail@plt+0x3278>
   14868:	ldr	r3, [r4, #32]
   1486c:	cmp	r3, #0
   14870:	beq	1487c <__assert_fail@plt+0x3258>
   14874:	mov	r3, #7
   14878:	b	14880 <__assert_fail@plt+0x325c>
   1487c:	mov	r3, #6
   14880:	strh	r3, [r4, #56]	; 0x38
   14884:	ldr	r3, [r4, #32]
   14888:	cmp	r3, #0
   1488c:	bne	1489c <__assert_fail@plt+0x3278>
   14890:	mov	r1, r4
   14894:	mov	r0, r5
   14898:	bl	1325c <__assert_fail@plt+0x1c38>
   1489c:	ldr	r3, [r5, #48]	; 0x30
   148a0:	and	r3, r3, #8192	; 0x2000
   148a4:	cmp	r3, #0
   148a8:	bne	148b4 <__assert_fail@plt+0x3290>
   148ac:	mov	r3, r4
   148b0:	b	148b8 <__assert_fail@plt+0x3294>
   148b4:	mov	r3, #0
   148b8:	mov	r0, r3
   148bc:	pop	{r4, r5, r6, r7, fp, pc}
   148c0:	strdeq	pc, [r1], -r0
   148c4:	strdeq	pc, [r1], -r4
   148c8:	push	{fp, lr}
   148cc:	add	fp, sp, #4
   148d0:	sub	sp, sp, #16
   148d4:	str	r0, [fp, #-8]
   148d8:	str	r1, [fp, #-12]
   148dc:	str	r2, [fp, #-16]
   148e0:	ldr	r3, [fp, #-16]
   148e4:	cmp	r3, #0
   148e8:	beq	14934 <__assert_fail@plt+0x3310>
   148ec:	ldr	r3, [fp, #-16]
   148f0:	cmp	r3, #1
   148f4:	beq	14934 <__assert_fail@plt+0x3310>
   148f8:	ldr	r3, [fp, #-16]
   148fc:	cmp	r3, #2
   14900:	beq	14934 <__assert_fail@plt+0x3310>
   14904:	ldr	r3, [fp, #-16]
   14908:	cmp	r3, #3
   1490c:	beq	14934 <__assert_fail@plt+0x3310>
   14910:	ldr	r3, [fp, #-16]
   14914:	cmp	r3, #4
   14918:	beq	14934 <__assert_fail@plt+0x3310>
   1491c:	bl	114bc <__errno_location@plt>
   14920:	mov	r2, r0
   14924:	mov	r3, #22
   14928:	str	r3, [r2]
   1492c:	mov	r3, #1
   14930:	b	14948 <__assert_fail@plt+0x3324>
   14934:	ldr	r3, [fp, #-16]
   14938:	uxth	r2, r3
   1493c:	ldr	r3, [fp, #-12]
   14940:	strh	r2, [r3, #60]	; 0x3c
   14944:	mov	r3, #0
   14948:	mov	r0, r3
   1494c:	sub	sp, fp, #4
   14950:	pop	{fp, pc}
   14954:	push	{r4, r5, fp, lr}
   14958:	add	fp, sp, #12
   1495c:	sub	sp, sp, #16
   14960:	mov	r4, r0
   14964:	str	r1, [fp, #-24]	; 0xffffffe8
   14968:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1496c:	cmp	r3, #0
   14970:	beq	14998 <__assert_fail@plt+0x3374>
   14974:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14978:	cmp	r3, #4096	; 0x1000
   1497c:	beq	14998 <__assert_fail@plt+0x3374>
   14980:	bl	114bc <__errno_location@plt>
   14984:	mov	r2, r0
   14988:	mov	r3, #22
   1498c:	str	r3, [r2]
   14990:	mov	r3, #0
   14994:	b	14b2c <__assert_fail@plt+0x3508>
   14998:	ldr	r5, [r4]
   1499c:	bl	114bc <__errno_location@plt>
   149a0:	mov	r2, r0
   149a4:	mov	r3, #0
   149a8:	str	r3, [r2]
   149ac:	ldr	r3, [r4, #48]	; 0x30
   149b0:	and	r3, r3, #8192	; 0x2000
   149b4:	cmp	r3, #0
   149b8:	beq	149c4 <__assert_fail@plt+0x33a0>
   149bc:	mov	r3, #0
   149c0:	b	14b2c <__assert_fail@plt+0x3508>
   149c4:	ldrh	r3, [r5, #56]	; 0x38
   149c8:	cmp	r3, #9
   149cc:	bne	149d8 <__assert_fail@plt+0x33b4>
   149d0:	ldr	r3, [r5, #8]
   149d4:	b	14b2c <__assert_fail@plt+0x3508>
   149d8:	ldrh	r3, [r5, #56]	; 0x38
   149dc:	cmp	r3, #1
   149e0:	beq	149ec <__assert_fail@plt+0x33c8>
   149e4:	mov	r3, #0
   149e8:	b	14b2c <__assert_fail@plt+0x3508>
   149ec:	ldr	r3, [r4, #4]
   149f0:	cmp	r3, #0
   149f4:	beq	14a04 <__assert_fail@plt+0x33e0>
   149f8:	ldr	r3, [r4, #4]
   149fc:	mov	r0, r3
   14a00:	bl	15bfc <__assert_fail@plt+0x45d8>
   14a04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a08:	cmp	r3, #4096	; 0x1000
   14a0c:	bne	14a28 <__assert_fail@plt+0x3404>
   14a10:	ldr	r3, [r4, #48]	; 0x30
   14a14:	orr	r3, r3, #4096	; 0x1000
   14a18:	str	r3, [r4, #48]	; 0x30
   14a1c:	mov	r3, #2
   14a20:	str	r3, [fp, #-24]	; 0xffffffe8
   14a24:	b	14a30 <__assert_fail@plt+0x340c>
   14a28:	mov	r3, #1
   14a2c:	str	r3, [fp, #-24]	; 0xffffffe8
   14a30:	ldr	r3, [r5, #48]	; 0x30
   14a34:	cmp	r3, #0
   14a38:	bne	14a5c <__assert_fail@plt+0x3438>
   14a3c:	ldr	r3, [r5, #24]
   14a40:	ldrb	r3, [r3]
   14a44:	cmp	r3, #47	; 0x2f
   14a48:	beq	14a5c <__assert_fail@plt+0x3438>
   14a4c:	ldr	r3, [r4, #48]	; 0x30
   14a50:	and	r3, r3, #4
   14a54:	cmp	r3, #0
   14a58:	beq	14a78 <__assert_fail@plt+0x3454>
   14a5c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14a60:	mov	r0, r4
   14a64:	bl	14c90 <__assert_fail@plt+0x366c>
   14a68:	mov	r3, r0
   14a6c:	str	r3, [r4, #4]
   14a70:	ldr	r3, [r4, #4]
   14a74:	b	14b2c <__assert_fail@plt+0x3508>
   14a78:	ldr	r1, [pc, #184]	; 14b38 <__assert_fail@plt+0x3514>
   14a7c:	mov	r0, r4
   14a80:	bl	13660 <__assert_fail@plt+0x203c>
   14a84:	str	r0, [fp, #-16]
   14a88:	ldr	r3, [fp, #-16]
   14a8c:	cmp	r3, #0
   14a90:	bge	14aa4 <__assert_fail@plt+0x3480>
   14a94:	mov	r3, #0
   14a98:	str	r3, [r4, #4]
   14a9c:	mov	r3, #0
   14aa0:	b	14b2c <__assert_fail@plt+0x3508>
   14aa4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14aa8:	mov	r0, r4
   14aac:	bl	14c90 <__assert_fail@plt+0x366c>
   14ab0:	mov	r3, r0
   14ab4:	str	r3, [r4, #4]
   14ab8:	ldr	r3, [r4, #48]	; 0x30
   14abc:	and	r3, r3, #512	; 0x200
   14ac0:	cmp	r3, #0
   14ac4:	beq	14adc <__assert_fail@plt+0x34b8>
   14ac8:	mov	r2, #1
   14acc:	ldr	r1, [fp, #-16]
   14ad0:	mov	r0, r4
   14ad4:	bl	134c4 <__assert_fail@plt+0x1ea0>
   14ad8:	b	14b28 <__assert_fail@plt+0x3504>
   14adc:	ldr	r0, [fp, #-16]
   14ae0:	bl	11588 <fchdir@plt>
   14ae4:	mov	r3, r0
   14ae8:	cmp	r3, #0
   14aec:	beq	14b20 <__assert_fail@plt+0x34fc>
   14af0:	bl	114bc <__errno_location@plt>
   14af4:	mov	r3, r0
   14af8:	ldr	r3, [r3]
   14afc:	str	r3, [fp, #-20]	; 0xffffffec
   14b00:	ldr	r0, [fp, #-16]
   14b04:	bl	115f4 <close@plt>
   14b08:	bl	114bc <__errno_location@plt>
   14b0c:	mov	r2, r0
   14b10:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b14:	str	r3, [r2]
   14b18:	mov	r3, #0
   14b1c:	b	14b2c <__assert_fail@plt+0x3508>
   14b20:	ldr	r0, [fp, #-16]
   14b24:	bl	115f4 <close@plt>
   14b28:	ldr	r3, [r4, #4]
   14b2c:	mov	r0, r3
   14b30:	sub	sp, fp, #12
   14b34:	pop	{r4, r5, fp, pc}
   14b38:	strdeq	pc, [r1], -r0
   14b3c:	push	{fp}		; (str fp, [sp, #-4]!)
   14b40:	add	fp, sp, #0
   14b44:	sub	sp, sp, #12
   14b48:	str	r0, [fp, #-8]
   14b4c:	str	r1, [fp, #-12]
   14b50:	ldr	r3, [fp, #-8]
   14b54:	ldr	r3, [r3]
   14b58:	ldrd	r0, [r3, #160]	; 0xa0
   14b5c:	ldr	r3, [fp, #-12]
   14b60:	ldr	r3, [r3]
   14b64:	ldrd	r2, [r3, #160]	; 0xa0
   14b68:	cmp	r1, r3
   14b6c:	cmpeq	r0, r2
   14b70:	movhi	r3, #1
   14b74:	movls	r3, #0
   14b78:	uxtb	r3, r3
   14b7c:	mov	ip, r3
   14b80:	ldr	r3, [fp, #-8]
   14b84:	ldr	r3, [r3]
   14b88:	ldrd	r0, [r3, #160]	; 0xa0
   14b8c:	ldr	r3, [fp, #-12]
   14b90:	ldr	r3, [r3]
   14b94:	ldrd	r2, [r3, #160]	; 0xa0
   14b98:	cmp	r1, r3
   14b9c:	cmpeq	r0, r2
   14ba0:	movcc	r3, #1
   14ba4:	movcs	r3, #0
   14ba8:	uxtb	r3, r3
   14bac:	sub	r3, ip, r3
   14bb0:	mov	r0, r3
   14bb4:	add	sp, fp, #0
   14bb8:	pop	{fp}		; (ldr fp, [sp], #4)
   14bbc:	bx	lr
   14bc0:	push	{fp}		; (str fp, [sp, #-4]!)
   14bc4:	add	fp, sp, #0
   14bc8:	sub	sp, sp, #20
   14bcc:	str	r0, [fp, #-16]
   14bd0:	str	r1, [fp, #-20]	; 0xffffffec
   14bd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bd8:	sub	r3, r3, #1
   14bdc:	cmp	r3, #11
   14be0:	ldrls	pc, [pc, r3, lsl #2]
   14be4:	b	14c6c <__assert_fail@plt+0x3648>
   14be8:	andeq	r4, r1, ip, lsr ip
   14bec:	andeq	r4, r1, r4, lsr #24
   14bf0:	andeq	r4, r1, ip, ror #24
   14bf4:	andeq	r4, r1, r0, lsr ip
   14bf8:	andeq	r4, r1, ip, ror #24
   14bfc:	andeq	r4, r1, r8, lsl ip
   14c00:	andeq	r4, r1, ip, ror #24
   14c04:	andeq	r4, r1, r4, asr ip
   14c08:	andeq	r4, r1, ip, ror #24
   14c0c:	andeq	r4, r1, r8, asr #24
   14c10:	andeq	r4, r1, ip, ror #24
   14c14:	andeq	r4, r1, r0, ror #24
   14c18:	mov	r3, #24576	; 0x6000
   14c1c:	str	r3, [fp, #-8]
   14c20:	b	14c74 <__assert_fail@plt+0x3650>
   14c24:	mov	r3, #8192	; 0x2000
   14c28:	str	r3, [fp, #-8]
   14c2c:	b	14c74 <__assert_fail@plt+0x3650>
   14c30:	mov	r3, #16384	; 0x4000
   14c34:	str	r3, [fp, #-8]
   14c38:	b	14c74 <__assert_fail@plt+0x3650>
   14c3c:	mov	r3, #4096	; 0x1000
   14c40:	str	r3, [fp, #-8]
   14c44:	b	14c74 <__assert_fail@plt+0x3650>
   14c48:	mov	r3, #40960	; 0xa000
   14c4c:	str	r3, [fp, #-8]
   14c50:	b	14c74 <__assert_fail@plt+0x3650>
   14c54:	mov	r3, #32768	; 0x8000
   14c58:	str	r3, [fp, #-8]
   14c5c:	b	14c74 <__assert_fail@plt+0x3650>
   14c60:	mov	r3, #49152	; 0xc000
   14c64:	str	r3, [fp, #-8]
   14c68:	b	14c74 <__assert_fail@plt+0x3650>
   14c6c:	mov	r3, #0
   14c70:	str	r3, [fp, #-8]
   14c74:	ldr	r3, [fp, #-16]
   14c78:	ldr	r2, [fp, #-8]
   14c7c:	str	r2, [r3, #16]
   14c80:	nop			; (mov r0, r0)
   14c84:	add	sp, fp, #0
   14c88:	pop	{fp}		; (ldr fp, [sp], #4)
   14c8c:	bx	lr
   14c90:	push	{r4, r5, r6, r7, fp, lr}
   14c94:	add	fp, sp, #20
   14c98:	sub	sp, sp, #80	; 0x50
   14c9c:	mov	r4, r0
   14ca0:	str	r1, [fp, #-96]	; 0xffffffa0
   14ca4:	ldr	r3, [r4]
   14ca8:	str	r3, [fp, #-44]	; 0xffffffd4
   14cac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14cb0:	ldr	r3, [r3, #12]
   14cb4:	cmp	r3, #0
   14cb8:	movne	r3, #1
   14cbc:	moveq	r3, #0
   14cc0:	strb	r3, [fp, #-45]	; 0xffffffd3
   14cc4:	mov	r3, #0
   14cc8:	strb	r3, [fp, #-37]	; 0xffffffdb
   14ccc:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   14cd0:	cmp	r3, #0
   14cd4:	beq	14d50 <__assert_fail@plt+0x372c>
   14cd8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14cdc:	ldr	r3, [r3, #12]
   14ce0:	str	r3, [fp, #-52]	; 0xffffffcc
   14ce4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14ce8:	bl	1157c <dirfd@plt>
   14cec:	mov	r3, r0
   14cf0:	str	r3, [fp, #-92]	; 0xffffffa4
   14cf4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14cf8:	cmp	r3, #0
   14cfc:	bge	14eb4 <__assert_fail@plt+0x3890>
   14d00:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d04:	ldr	r3, [r3, #12]
   14d08:	mov	r0, r3
   14d0c:	bl	1160c <closedir@plt>
   14d10:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d14:	mov	r2, #0
   14d18:	str	r2, [r3, #12]
   14d1c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14d20:	cmp	r3, #3
   14d24:	bne	14d48 <__assert_fail@plt+0x3724>
   14d28:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d2c:	mov	r2, #4
   14d30:	strh	r2, [r3, #56]	; 0x38
   14d34:	bl	114bc <__errno_location@plt>
   14d38:	mov	r3, r0
   14d3c:	ldr	r2, [r3]
   14d40:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d44:	str	r2, [r3, #32]
   14d48:	mov	r3, #0
   14d4c:	b	157a8 <__assert_fail@plt+0x4184>
   14d50:	ldr	r3, [r4, #48]	; 0x30
   14d54:	and	r3, r3, #4
   14d58:	cmp	r3, #0
   14d5c:	bne	14d78 <__assert_fail@plt+0x3754>
   14d60:	ldr	r3, [r4, #48]	; 0x30
   14d64:	and	r3, r3, #512	; 0x200
   14d68:	cmp	r3, #0
   14d6c:	beq	14d78 <__assert_fail@plt+0x3754>
   14d70:	ldr	r0, [r4, #32]
   14d74:	b	14d7c <__assert_fail@plt+0x3758>
   14d78:	mvn	r0, #99	; 0x63
   14d7c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d80:	ldr	r1, [r3, #24]
   14d84:	ldr	r3, [r4, #48]	; 0x30
   14d88:	and	r3, r3, #16
   14d8c:	cmp	r3, #0
   14d90:	beq	14dbc <__assert_fail@plt+0x3798>
   14d94:	ldr	r3, [r4, #48]	; 0x30
   14d98:	and	r3, r3, #1
   14d9c:	cmp	r3, #0
   14da0:	beq	14db4 <__assert_fail@plt+0x3790>
   14da4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14da8:	ldr	r3, [r3, #48]	; 0x30
   14dac:	cmp	r3, #0
   14db0:	beq	14dbc <__assert_fail@plt+0x3798>
   14db4:	mov	r2, #32768	; 0x8000
   14db8:	b	14dc0 <__assert_fail@plt+0x379c>
   14dbc:	mov	r2, #0
   14dc0:	sub	r3, fp, #92	; 0x5c
   14dc4:	bl	17f88 <__assert_fail@plt+0x6964>
   14dc8:	mov	r3, r0
   14dcc:	mov	r2, r3
   14dd0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14dd4:	str	r2, [r3, #12]
   14dd8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ddc:	ldr	r3, [r3, #12]
   14de0:	cmp	r3, #0
   14de4:	bne	14e1c <__assert_fail@plt+0x37f8>
   14de8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14dec:	cmp	r3, #3
   14df0:	bne	14e14 <__assert_fail@plt+0x37f0>
   14df4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14df8:	mov	r2, #4
   14dfc:	strh	r2, [r3, #56]	; 0x38
   14e00:	bl	114bc <__errno_location@plt>
   14e04:	mov	r3, r0
   14e08:	ldr	r2, [r3]
   14e0c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14e10:	str	r2, [r3, #32]
   14e14:	mov	r3, #0
   14e18:	b	157a8 <__assert_fail@plt+0x4184>
   14e1c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14e20:	ldrh	r3, [r3, #56]	; 0x38
   14e24:	cmp	r3, #11
   14e28:	bne	14e50 <__assert_fail@plt+0x382c>
   14e2c:	mov	r2, #0
   14e30:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14e34:	mov	r0, r4
   14e38:	bl	157c8 <__assert_fail@plt+0x41a4>
   14e3c:	mov	r3, r0
   14e40:	mov	r2, r3
   14e44:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14e48:	strh	r2, [r3, #56]	; 0x38
   14e4c:	b	14eb4 <__assert_fail@plt+0x3890>
   14e50:	ldr	r3, [r4, #48]	; 0x30
   14e54:	and	r3, r3, #256	; 0x100
   14e58:	cmp	r3, #0
   14e5c:	beq	14eb4 <__assert_fail@plt+0x3890>
   14e60:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14e64:	mov	r0, r4
   14e68:	bl	1325c <__assert_fail@plt+0x1c38>
   14e6c:	mov	r2, #0
   14e70:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14e74:	mov	r0, r4
   14e78:	bl	157c8 <__assert_fail@plt+0x41a4>
   14e7c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14e80:	mov	r0, r4
   14e84:	bl	1311c <__assert_fail@plt+0x1af8>
   14e88:	mov	r3, r0
   14e8c:	eor	r3, r3, #1
   14e90:	uxtb	r3, r3
   14e94:	cmp	r3, #0
   14e98:	beq	14eb4 <__assert_fail@plt+0x3890>
   14e9c:	bl	114bc <__errno_location@plt>
   14ea0:	mov	r2, r0
   14ea4:	mov	r3, #12
   14ea8:	str	r3, [r2]
   14eac:	mov	r3, #0
   14eb0:	b	157a8 <__assert_fail@plt+0x4184>
   14eb4:	ldr	r3, [r4, #44]	; 0x2c
   14eb8:	cmp	r3, #0
   14ebc:	beq	14ec8 <__assert_fail@plt+0x38a4>
   14ec0:	mvn	r3, #0
   14ec4:	b	14ecc <__assert_fail@plt+0x38a8>
   14ec8:	ldr	r3, [pc, #2276]	; 157b4 <__assert_fail@plt+0x4190>
   14ecc:	str	r3, [fp, #-56]	; 0xffffffc8
   14ed0:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   14ed4:	cmp	r3, #0
   14ed8:	beq	14ee8 <__assert_fail@plt+0x38c4>
   14edc:	mov	r3, #1
   14ee0:	strb	r3, [fp, #-25]	; 0xffffffe7
   14ee4:	b	15084 <__assert_fail@plt+0x3a60>
   14ee8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14eec:	cmp	r3, #2
   14ef0:	beq	14f58 <__assert_fail@plt+0x3934>
   14ef4:	ldr	r3, [r4, #48]	; 0x30
   14ef8:	and	r3, r3, #8
   14efc:	cmp	r3, #0
   14f00:	beq	14f50 <__assert_fail@plt+0x392c>
   14f04:	ldr	r3, [r4, #48]	; 0x30
   14f08:	and	r3, r3, #16
   14f0c:	cmp	r3, #0
   14f10:	beq	14f50 <__assert_fail@plt+0x392c>
   14f14:	ldr	r3, [r4, #48]	; 0x30
   14f18:	and	r3, r3, #32
   14f1c:	cmp	r3, #0
   14f20:	bne	14f50 <__assert_fail@plt+0x392c>
   14f24:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f28:	ldr	r3, [r3, #84]	; 0x54
   14f2c:	cmp	r3, #2
   14f30:	bne	14f50 <__assert_fail@plt+0x392c>
   14f34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f38:	mov	r1, r3
   14f3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14f40:	bl	140c0 <__assert_fail@plt+0x2a9c>
   14f44:	mov	r3, r0
   14f48:	cmp	r3, #0
   14f4c:	bne	14f58 <__assert_fail@plt+0x3934>
   14f50:	mov	r3, #1
   14f54:	b	14f5c <__assert_fail@plt+0x3938>
   14f58:	mov	r3, #0
   14f5c:	strb	r3, [fp, #-25]	; 0xffffffe7
   14f60:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14f64:	and	r3, r3, #1
   14f68:	strb	r3, [fp, #-25]	; 0xffffffe7
   14f6c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14f70:	cmp	r3, #0
   14f74:	bne	14f84 <__assert_fail@plt+0x3960>
   14f78:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14f7c:	cmp	r3, #3
   14f80:	bne	15084 <__assert_fail@plt+0x3a60>
   14f84:	ldr	r3, [r4, #48]	; 0x30
   14f88:	and	r3, r3, #512	; 0x200
   14f8c:	cmp	r3, #0
   14f90:	beq	14fb0 <__assert_fail@plt+0x398c>
   14f94:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f98:	mov	r2, #3
   14f9c:	ldr	r1, [pc, #2068]	; 157b8 <__assert_fail@plt+0x4194>
   14fa0:	mov	r0, r3
   14fa4:	bl	1d2e0 <__assert_fail@plt+0xbcbc>
   14fa8:	mov	r3, r0
   14fac:	str	r3, [fp, #-92]	; 0xffffffa4
   14fb0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14fb4:	cmp	r3, #0
   14fb8:	blt	14fdc <__assert_fail@plt+0x39b8>
   14fbc:	ldr	r2, [fp, #-92]	; 0xffffffa4
   14fc0:	mov	r3, #0
   14fc4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14fc8:	mov	r0, r4
   14fcc:	bl	15ee4 <__assert_fail@plt+0x48c0>
   14fd0:	mov	r3, r0
   14fd4:	cmp	r3, #0
   14fd8:	beq	1507c <__assert_fail@plt+0x3a58>
   14fdc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14fe0:	cmp	r3, #0
   14fe4:	beq	15008 <__assert_fail@plt+0x39e4>
   14fe8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14fec:	cmp	r3, #3
   14ff0:	bne	15008 <__assert_fail@plt+0x39e4>
   14ff4:	bl	114bc <__errno_location@plt>
   14ff8:	mov	r3, r0
   14ffc:	ldr	r2, [r3]
   15000:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15004:	str	r2, [r3, #32]
   15008:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1500c:	ldrh	r3, [r3, #58]	; 0x3a
   15010:	orr	r3, r3, #1
   15014:	uxth	r2, r3
   15018:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1501c:	strh	r2, [r3, #58]	; 0x3a
   15020:	mov	r3, #0
   15024:	strb	r3, [fp, #-25]	; 0xffffffe7
   15028:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1502c:	ldr	r3, [r3, #12]
   15030:	mov	r0, r3
   15034:	bl	1160c <closedir@plt>
   15038:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1503c:	mov	r2, #0
   15040:	str	r2, [r3, #12]
   15044:	ldr	r3, [r4, #48]	; 0x30
   15048:	and	r3, r3, #512	; 0x200
   1504c:	cmp	r3, #0
   15050:	beq	1506c <__assert_fail@plt+0x3a48>
   15054:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15058:	cmp	r3, #0
   1505c:	blt	1506c <__assert_fail@plt+0x3a48>
   15060:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15064:	mov	r0, r3
   15068:	bl	115f4 <close@plt>
   1506c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15070:	mov	r2, #0
   15074:	str	r2, [r3, #12]
   15078:	b	15084 <__assert_fail@plt+0x3a60>
   1507c:	mov	r3, #1
   15080:	strb	r3, [fp, #-25]	; 0xffffffe7
   15084:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15088:	ldr	r2, [r3, #28]
   1508c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15090:	ldr	r3, [r3, #40]	; 0x28
   15094:	sub	r3, r3, #1
   15098:	add	r3, r2, r3
   1509c:	ldrb	r3, [r3]
   150a0:	cmp	r3, #47	; 0x2f
   150a4:	bne	150b8 <__assert_fail@plt+0x3a94>
   150a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   150ac:	ldr	r3, [r3, #40]	; 0x28
   150b0:	sub	r3, r3, #1
   150b4:	b	150c0 <__assert_fail@plt+0x3a9c>
   150b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   150bc:	ldr	r3, [r3, #40]	; 0x28
   150c0:	str	r3, [fp, #-60]	; 0xffffffc4
   150c4:	ldr	r3, [r4, #48]	; 0x30
   150c8:	and	r3, r3, #4
   150cc:	cmp	r3, #0
   150d0:	beq	150fc <__assert_fail@plt+0x3ad8>
   150d4:	ldr	r2, [r4, #24]
   150d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   150dc:	add	r3, r2, r3
   150e0:	str	r3, [fp, #-36]	; 0xffffffdc
   150e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   150e8:	add	r2, r3, #1
   150ec:	str	r2, [fp, #-36]	; 0xffffffdc
   150f0:	mov	r2, #47	; 0x2f
   150f4:	strb	r2, [r3]
   150f8:	b	15104 <__assert_fail@plt+0x3ae0>
   150fc:	mov	r3, #0
   15100:	str	r3, [fp, #-36]	; 0xffffffdc
   15104:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15108:	add	r3, r3, #1
   1510c:	str	r3, [fp, #-60]	; 0xffffffc4
   15110:	ldr	r2, [r4, #36]	; 0x24
   15114:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15118:	sub	r3, r2, r3
   1511c:	str	r3, [fp, #-32]	; 0xffffffe0
   15120:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15124:	ldr	r3, [r3, #48]	; 0x30
   15128:	add	r3, r3, #1
   1512c:	str	r3, [fp, #-64]	; 0xffffffc0
   15130:	mov	r3, #0
   15134:	strb	r3, [fp, #-26]	; 0xffffffe6
   15138:	mov	r7, #0
   1513c:	mov	r3, #0
   15140:	str	r3, [fp, #-24]	; 0xffffffe8
   15144:	mov	r6, #0
   15148:	b	15598 <__assert_fail@plt+0x3f74>
   1514c:	bl	114bc <__errno_location@plt>
   15150:	mov	r2, r0
   15154:	mov	r3, #0
   15158:	str	r3, [r2]
   1515c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15160:	ldr	r3, [r3, #12]
   15164:	mov	r0, r3
   15168:	bl	11564 <readdir64@plt>
   1516c:	str	r0, [fp, #-68]	; 0xffffffbc
   15170:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15174:	cmp	r3, #0
   15178:	bne	151d0 <__assert_fail@plt+0x3bac>
   1517c:	bl	114bc <__errno_location@plt>
   15180:	mov	r3, r0
   15184:	ldr	r3, [r3]
   15188:	cmp	r3, #0
   1518c:	beq	155ac <__assert_fail@plt+0x3f88>
   15190:	bl	114bc <__errno_location@plt>
   15194:	mov	r3, r0
   15198:	ldr	r2, [r3]
   1519c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151a0:	str	r2, [r3, #32]
   151a4:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   151a8:	cmp	r3, #0
   151ac:	bne	151b8 <__assert_fail@plt+0x3b94>
   151b0:	cmp	r6, #0
   151b4:	beq	151c0 <__assert_fail@plt+0x3b9c>
   151b8:	mov	r2, #7
   151bc:	b	151c4 <__assert_fail@plt+0x3ba0>
   151c0:	mov	r2, #4
   151c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151c8:	strh	r2, [r3, #56]	; 0x38
   151cc:	b	155ac <__assert_fail@plt+0x3f88>
   151d0:	ldr	r3, [r4, #48]	; 0x30
   151d4:	and	r3, r3, #32
   151d8:	cmp	r3, #0
   151dc:	bne	15224 <__assert_fail@plt+0x3c00>
   151e0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   151e4:	ldrb	r3, [r3, #19]
   151e8:	cmp	r3, #46	; 0x2e
   151ec:	bne	15224 <__assert_fail@plt+0x3c00>
   151f0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   151f4:	ldrb	r3, [r3, #20]
   151f8:	cmp	r3, #0
   151fc:	beq	15598 <__assert_fail@plt+0x3f74>
   15200:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15204:	ldrb	r3, [r3, #20]
   15208:	cmp	r3, #46	; 0x2e
   1520c:	bne	15224 <__assert_fail@plt+0x3c00>
   15210:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15214:	ldrb	r3, [r3, #21]
   15218:	cmp	r3, #0
   1521c:	bne	15224 <__assert_fail@plt+0x3c00>
   15220:	b	15598 <__assert_fail@plt+0x3f74>
   15224:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15228:	add	r3, r3, #19
   1522c:	mov	r0, r3
   15230:	bl	1148c <strlen@plt>
   15234:	str	r0, [fp, #-72]	; 0xffffffb8
   15238:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1523c:	add	r3, r3, #19
   15240:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15244:	mov	r1, r3
   15248:	mov	r0, r4
   1524c:	bl	15b40 <__assert_fail@plt+0x451c>
   15250:	mov	r5, r0
   15254:	cmp	r5, #0
   15258:	beq	152a8 <__assert_fail@plt+0x3c84>
   1525c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15260:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15264:	cmp	r2, r3
   15268:	bcc	15360 <__assert_fail@plt+0x3d3c>
   1526c:	ldr	r3, [r4, #24]
   15270:	str	r3, [fp, #-76]	; 0xffffffb4
   15274:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15278:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1527c:	add	r3, r2, r3
   15280:	add	r3, r3, #1
   15284:	mov	r1, r3
   15288:	mov	r0, r4
   1528c:	bl	15c44 <__assert_fail@plt+0x4620>
   15290:	mov	r3, r0
   15294:	eor	r3, r3, #1
   15298:	uxtb	r3, r3
   1529c:	cmp	r3, #0
   152a0:	beq	15318 <__assert_fail@plt+0x3cf4>
   152a4:	b	152ac <__assert_fail@plt+0x3c88>
   152a8:	nop			; (mov r0, r0)
   152ac:	bl	114bc <__errno_location@plt>
   152b0:	mov	r3, r0
   152b4:	ldr	r3, [r3]
   152b8:	str	r3, [fp, #-88]	; 0xffffffa8
   152bc:	mov	r0, r5
   152c0:	bl	1d784 <__assert_fail@plt+0xc160>
   152c4:	mov	r0, r7
   152c8:	bl	15bfc <__assert_fail@plt+0x45d8>
   152cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152d0:	ldr	r3, [r3, #12]
   152d4:	mov	r0, r3
   152d8:	bl	1160c <closedir@plt>
   152dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152e0:	mov	r2, #0
   152e4:	str	r2, [r3, #12]
   152e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152ec:	mov	r2, #7
   152f0:	strh	r2, [r3, #56]	; 0x38
   152f4:	ldr	r3, [r4, #48]	; 0x30
   152f8:	orr	r3, r3, #8192	; 0x2000
   152fc:	str	r3, [r4, #48]	; 0x30
   15300:	bl	114bc <__errno_location@plt>
   15304:	mov	r2, r0
   15308:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1530c:	str	r3, [r2]
   15310:	mov	r3, #0
   15314:	b	157a8 <__assert_fail@plt+0x4184>
   15318:	ldr	r2, [r4, #24]
   1531c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15320:	cmp	r2, r3
   15324:	beq	15350 <__assert_fail@plt+0x3d2c>
   15328:	mov	r3, #1
   1532c:	strb	r3, [fp, #-26]	; 0xffffffe6
   15330:	ldr	r3, [r4, #48]	; 0x30
   15334:	and	r3, r3, #4
   15338:	cmp	r3, #0
   1533c:	beq	15350 <__assert_fail@plt+0x3d2c>
   15340:	ldr	r2, [r4, #24]
   15344:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15348:	add	r3, r2, r3
   1534c:	str	r3, [fp, #-36]	; 0xffffffdc
   15350:	ldr	r2, [r4, #36]	; 0x24
   15354:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15358:	sub	r3, r2, r3
   1535c:	str	r3, [fp, #-32]	; 0xffffffe0
   15360:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15364:	ldr	r3, [fp, #-72]	; 0xffffffb8
   15368:	add	r3, r2, r3
   1536c:	str	r3, [fp, #-80]	; 0xffffffb0
   15370:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15374:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15378:	cmp	r2, r3
   1537c:	bcs	153dc <__assert_fail@plt+0x3db8>
   15380:	mov	r0, r5
   15384:	bl	1d784 <__assert_fail@plt+0xc160>
   15388:	mov	r0, r7
   1538c:	bl	15bfc <__assert_fail@plt+0x45d8>
   15390:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15394:	ldr	r3, [r3, #12]
   15398:	mov	r0, r3
   1539c:	bl	1160c <closedir@plt>
   153a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   153a4:	mov	r2, #0
   153a8:	str	r2, [r3, #12]
   153ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   153b0:	mov	r2, #7
   153b4:	strh	r2, [r3, #56]	; 0x38
   153b8:	ldr	r3, [r4, #48]	; 0x30
   153bc:	orr	r3, r3, #8192	; 0x2000
   153c0:	str	r3, [r4, #48]	; 0x30
   153c4:	bl	114bc <__errno_location@plt>
   153c8:	mov	r2, r0
   153cc:	mov	r3, #36	; 0x24
   153d0:	str	r3, [r2]
   153d4:	mov	r3, #0
   153d8:	b	157a8 <__assert_fail@plt+0x4184>
   153dc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   153e0:	str	r3, [r5, #48]	; 0x30
   153e4:	ldr	r3, [r4]
   153e8:	str	r3, [r5, #4]
   153ec:	ldr	r3, [fp, #-80]	; 0xffffffb0
   153f0:	str	r3, [r5, #40]	; 0x28
   153f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   153f8:	ldrd	r2, [r3]
   153fc:	strd	r2, [r5, #160]	; 0xa0
   15400:	ldr	r3, [r4, #48]	; 0x30
   15404:	and	r3, r3, #4
   15408:	cmp	r3, #0
   1540c:	beq	15434 <__assert_fail@plt+0x3e10>
   15410:	ldr	r3, [r5, #28]
   15414:	str	r3, [r5, #24]
   15418:	add	r1, r5, #168	; 0xa8
   1541c:	ldr	r3, [r5, #52]	; 0x34
   15420:	add	r3, r3, #1
   15424:	mov	r2, r3
   15428:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1542c:	bl	112ac <memmove@plt>
   15430:	b	1543c <__assert_fail@plt+0x3e18>
   15434:	add	r3, r5, #168	; 0xa8
   15438:	str	r3, [r5, #24]
   1543c:	ldr	r3, [r4, #44]	; 0x2c
   15440:	cmp	r3, #0
   15444:	beq	15458 <__assert_fail@plt+0x3e34>
   15448:	ldr	r3, [r4, #48]	; 0x30
   1544c:	and	r3, r3, #1024	; 0x400
   15450:	cmp	r3, #0
   15454:	beq	15518 <__assert_fail@plt+0x3ef4>
   15458:	ldr	r3, [r4, #48]	; 0x30
   1545c:	and	r3, r3, #8
   15460:	cmp	r3, #0
   15464:	beq	154b0 <__assert_fail@plt+0x3e8c>
   15468:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1546c:	ldrb	r3, [r3, #18]
   15470:	cmp	r3, #0
   15474:	beq	154b0 <__assert_fail@plt+0x3e8c>
   15478:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1547c:	ldrb	r3, [r3, #18]
   15480:	cmp	r3, #4
   15484:	beq	154b0 <__assert_fail@plt+0x3e8c>
   15488:	ldr	r3, [r4, #48]	; 0x30
   1548c:	and	r3, r3, #16
   15490:	cmp	r3, #0
   15494:	bne	154a8 <__assert_fail@plt+0x3e84>
   15498:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1549c:	ldrb	r3, [r3, #18]
   154a0:	cmp	r3, #10
   154a4:	beq	154b0 <__assert_fail@plt+0x3e8c>
   154a8:	mov	r3, #1
   154ac:	b	154b4 <__assert_fail@plt+0x3e90>
   154b0:	mov	r3, #0
   154b4:	strb	r3, [fp, #-81]	; 0xffffffaf
   154b8:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   154bc:	and	r3, r3, #1
   154c0:	strb	r3, [fp, #-81]	; 0xffffffaf
   154c4:	mov	r3, #11
   154c8:	strh	r3, [r5, #56]	; 0x38
   154cc:	add	r2, r5, #64	; 0x40
   154d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   154d4:	ldrb	r3, [r3, #18]
   154d8:	mov	r1, r3
   154dc:	mov	r0, r2
   154e0:	bl	14bc0 <__assert_fail@plt+0x359c>
   154e4:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   154e8:	cmp	r3, #0
   154ec:	movne	r3, #1
   154f0:	moveq	r3, #0
   154f4:	uxtb	r3, r3
   154f8:	eor	r3, r3, #1
   154fc:	uxtb	r3, r3
   15500:	and	r3, r3, #1
   15504:	uxtb	r3, r3
   15508:	mov	r1, r3
   1550c:	mov	r0, r5
   15510:	bl	13464 <__assert_fail@plt+0x1e40>
   15514:	b	15530 <__assert_fail@plt+0x3f0c>
   15518:	mov	r2, #0
   1551c:	mov	r1, r5
   15520:	mov	r0, r4
   15524:	bl	157c8 <__assert_fail@plt+0x41a4>
   15528:	mov	r3, r0
   1552c:	strh	r3, [r5, #56]	; 0x38
   15530:	mov	r3, #0
   15534:	str	r3, [r5, #8]
   15538:	cmp	r7, #0
   1553c:	bne	1554c <__assert_fail@plt+0x3f28>
   15540:	str	r5, [fp, #-24]	; 0xffffffe8
   15544:	ldr	r7, [fp, #-24]	; 0xffffffe8
   15548:	b	15558 <__assert_fail@plt+0x3f34>
   1554c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15550:	str	r5, [r3, #8]
   15554:	str	r5, [fp, #-24]	; 0xffffffe8
   15558:	ldr	r3, [pc, #604]	; 157bc <__assert_fail@plt+0x4198>
   1555c:	cmp	r6, r3
   15560:	bne	15588 <__assert_fail@plt+0x3f64>
   15564:	ldr	r3, [r4, #44]	; 0x2c
   15568:	cmp	r3, #0
   1556c:	bne	15588 <__assert_fail@plt+0x3f64>
   15570:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15574:	mov	r1, r3
   15578:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1557c:	bl	14054 <__assert_fail@plt+0x2a30>
   15580:	mov	r3, r0
   15584:	strb	r3, [fp, #-37]	; 0xffffffdb
   15588:	add	r6, r6, #1
   1558c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15590:	cmp	r3, r6
   15594:	bls	155e0 <__assert_fail@plt+0x3fbc>
   15598:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1559c:	ldr	r3, [r3, #12]
   155a0:	cmp	r3, #0
   155a4:	bne	1514c <__assert_fail@plt+0x3b28>
   155a8:	b	155b0 <__assert_fail@plt+0x3f8c>
   155ac:	nop			; (mov r0, r0)
   155b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   155b4:	ldr	r3, [r3, #12]
   155b8:	cmp	r3, #0
   155bc:	beq	155e4 <__assert_fail@plt+0x3fc0>
   155c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   155c4:	ldr	r3, [r3, #12]
   155c8:	mov	r0, r3
   155cc:	bl	1160c <closedir@plt>
   155d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   155d4:	mov	r2, #0
   155d8:	str	r2, [r3, #12]
   155dc:	b	155e4 <__assert_fail@plt+0x3fc0>
   155e0:	nop			; (mov r0, r0)
   155e4:	ldrb	r3, [fp, #-26]	; 0xffffffe6
   155e8:	cmp	r3, #0
   155ec:	beq	155fc <__assert_fail@plt+0x3fd8>
   155f0:	mov	r1, r7
   155f4:	mov	r0, r4
   155f8:	bl	15d30 <__assert_fail@plt+0x470c>
   155fc:	ldr	r3, [r4, #48]	; 0x30
   15600:	and	r3, r3, #4
   15604:	cmp	r3, #0
   15608:	beq	1563c <__assert_fail@plt+0x4018>
   1560c:	ldr	r2, [r4, #36]	; 0x24
   15610:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15614:	cmp	r2, r3
   15618:	beq	15624 <__assert_fail@plt+0x4000>
   1561c:	cmp	r6, #0
   15620:	bne	15630 <__assert_fail@plt+0x400c>
   15624:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15628:	sub	r3, r3, #1
   1562c:	str	r3, [fp, #-36]	; 0xffffffdc
   15630:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15634:	mov	r2, #0
   15638:	strb	r2, [r3]
   1563c:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15640:	eor	r3, r3, #1
   15644:	uxtb	r3, r3
   15648:	cmp	r3, #0
   1564c:	beq	156fc <__assert_fail@plt+0x40d8>
   15650:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15654:	cmp	r3, #0
   15658:	beq	156fc <__assert_fail@plt+0x40d8>
   1565c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15660:	cmp	r3, #1
   15664:	beq	15670 <__assert_fail@plt+0x404c>
   15668:	cmp	r6, #0
   1566c:	bne	156fc <__assert_fail@plt+0x40d8>
   15670:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15674:	ldr	r3, [r3, #48]	; 0x30
   15678:	cmp	r3, #0
   1567c:	bne	156a0 <__assert_fail@plt+0x407c>
   15680:	mov	r0, r4
   15684:	bl	13588 <__assert_fail@plt+0x1f64>
   15688:	mov	r3, r0
   1568c:	cmp	r3, #0
   15690:	movne	r3, #1
   15694:	moveq	r3, #0
   15698:	uxtb	r3, r3
   1569c:	b	156cc <__assert_fail@plt+0x40a8>
   156a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   156a4:	ldr	r1, [r3, #4]
   156a8:	ldr	r3, [pc, #272]	; 157c0 <__assert_fail@plt+0x419c>
   156ac:	mvn	r2, #0
   156b0:	mov	r0, r4
   156b4:	bl	15ee4 <__assert_fail@plt+0x48c0>
   156b8:	mov	r3, r0
   156bc:	cmp	r3, #0
   156c0:	movne	r3, #1
   156c4:	moveq	r3, #0
   156c8:	uxtb	r3, r3
   156cc:	cmp	r3, #0
   156d0:	beq	156fc <__assert_fail@plt+0x40d8>
   156d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   156d8:	mov	r2, #7
   156dc:	strh	r2, [r3, #56]	; 0x38
   156e0:	ldr	r3, [r4, #48]	; 0x30
   156e4:	orr	r3, r3, #8192	; 0x2000
   156e8:	str	r3, [r4, #48]	; 0x30
   156ec:	mov	r0, r7
   156f0:	bl	15bfc <__assert_fail@plt+0x45d8>
   156f4:	mov	r3, #0
   156f8:	b	157a8 <__assert_fail@plt+0x4184>
   156fc:	cmp	r6, #0
   15700:	bne	1574c <__assert_fail@plt+0x4128>
   15704:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15708:	cmp	r3, #3
   1570c:	bne	1573c <__assert_fail@plt+0x4118>
   15710:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15714:	ldrh	r3, [r3, #56]	; 0x38
   15718:	cmp	r3, #4
   1571c:	beq	1573c <__assert_fail@plt+0x4118>
   15720:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15724:	ldrh	r3, [r3, #56]	; 0x38
   15728:	cmp	r3, #7
   1572c:	beq	1573c <__assert_fail@plt+0x4118>
   15730:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15734:	mov	r2, #6
   15738:	strh	r2, [r3, #56]	; 0x38
   1573c:	mov	r0, r7
   15740:	bl	15bfc <__assert_fail@plt+0x45d8>
   15744:	mov	r3, #0
   15748:	b	157a8 <__assert_fail@plt+0x4184>
   1574c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15750:	cmp	r3, #0
   15754:	beq	1577c <__assert_fail@plt+0x4158>
   15758:	ldr	r3, [pc, #100]	; 157c4 <__assert_fail@plt+0x41a0>
   1575c:	str	r3, [r4, #44]	; 0x2c
   15760:	mov	r2, r6
   15764:	mov	r1, r7
   15768:	mov	r0, r4
   1576c:	bl	159f8 <__assert_fail@plt+0x43d4>
   15770:	mov	r7, r0
   15774:	mov	r3, #0
   15778:	str	r3, [r4, #44]	; 0x2c
   1577c:	ldr	r3, [r4, #44]	; 0x2c
   15780:	cmp	r3, #0
   15784:	beq	157a4 <__assert_fail@plt+0x4180>
   15788:	cmp	r6, #1
   1578c:	bls	157a4 <__assert_fail@plt+0x4180>
   15790:	mov	r2, r6
   15794:	mov	r1, r7
   15798:	mov	r0, r4
   1579c:	bl	159f8 <__assert_fail@plt+0x43d4>
   157a0:	mov	r7, r0
   157a4:	mov	r3, r7
   157a8:	mov	r0, r3
   157ac:	sub	sp, fp, #20
   157b0:	pop	{r4, r5, r6, r7, fp, pc}
   157b4:	andeq	r8, r1, r0, lsr #13
   157b8:	andeq	r0, r0, r6, lsl #8
   157bc:	andeq	r2, r0, r0, lsl r7
   157c0:	strdeq	pc, [r1], -r4
   157c4:	andeq	r4, r1, ip, lsr fp
   157c8:	push	{r4, fp, lr}
   157cc:	add	fp, sp, #8
   157d0:	sub	sp, sp, #20
   157d4:	str	r0, [fp, #-24]	; 0xffffffe8
   157d8:	mov	r4, r1
   157dc:	mov	r3, r2
   157e0:	strb	r3, [fp, #-25]	; 0xffffffe7
   157e4:	add	r3, r4, #64	; 0x40
   157e8:	str	r3, [fp, #-16]
   157ec:	ldr	r3, [r4, #48]	; 0x30
   157f0:	cmp	r3, #0
   157f4:	bne	15814 <__assert_fail@plt+0x41f0>
   157f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157fc:	ldr	r3, [r3, #48]	; 0x30
   15800:	and	r3, r3, #1
   15804:	cmp	r3, #0
   15808:	beq	15814 <__assert_fail@plt+0x41f0>
   1580c:	mov	r3, #1
   15810:	strb	r3, [fp, #-25]	; 0xffffffe7
   15814:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15818:	ldr	r3, [r3, #48]	; 0x30
   1581c:	and	r3, r3, #2
   15820:	cmp	r3, #0
   15824:	bne	15834 <__assert_fail@plt+0x4210>
   15828:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1582c:	cmp	r3, #0
   15830:	beq	158ac <__assert_fail@plt+0x4288>
   15834:	ldr	r3, [r4, #24]
   15838:	ldr	r1, [fp, #-16]
   1583c:	mov	r0, r3
   15840:	bl	1f000 <__assert_fail@plt+0xd9dc>
   15844:	mov	r3, r0
   15848:	cmp	r3, #0
   1584c:	beq	158f8 <__assert_fail@plt+0x42d4>
   15850:	bl	114bc <__errno_location@plt>
   15854:	mov	r3, r0
   15858:	ldr	r3, [r3]
   1585c:	cmp	r3, #2
   15860:	bne	15898 <__assert_fail@plt+0x4274>
   15864:	ldr	r3, [r4, #24]
   15868:	ldr	r1, [fp, #-16]
   1586c:	mov	r0, r3
   15870:	bl	1f020 <__assert_fail@plt+0xd9fc>
   15874:	mov	r3, r0
   15878:	cmp	r3, #0
   1587c:	bne	15898 <__assert_fail@plt+0x4274>
   15880:	bl	114bc <__errno_location@plt>
   15884:	mov	r2, r0
   15888:	mov	r3, #0
   1588c:	str	r3, [r2]
   15890:	mov	r3, #13
   15894:	b	1599c <__assert_fail@plt+0x4378>
   15898:	bl	114bc <__errno_location@plt>
   1589c:	mov	r3, r0
   158a0:	ldr	r3, [r3]
   158a4:	str	r3, [r4, #32]
   158a8:	b	158e0 <__assert_fail@plt+0x42bc>
   158ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   158b0:	ldr	r0, [r3, #32]
   158b4:	ldr	r1, [r4, #24]
   158b8:	mov	r3, #256	; 0x100
   158bc:	ldr	r2, [fp, #-16]
   158c0:	bl	1f030 <__assert_fail@plt+0xda0c>
   158c4:	mov	r3, r0
   158c8:	cmp	r3, #0
   158cc:	beq	158f8 <__assert_fail@plt+0x42d4>
   158d0:	bl	114bc <__errno_location@plt>
   158d4:	mov	r3, r0
   158d8:	ldr	r3, [r3]
   158dc:	str	r3, [r4, #32]
   158e0:	mov	r2, #104	; 0x68
   158e4:	mov	r1, #0
   158e8:	ldr	r0, [fp, #-16]
   158ec:	bl	114d4 <memset@plt>
   158f0:	mov	r3, #10
   158f4:	b	1599c <__assert_fail@plt+0x4378>
   158f8:	ldr	r3, [fp, #-16]
   158fc:	ldr	r3, [r3, #16]
   15900:	and	r3, r3, #61440	; 0xf000
   15904:	cmp	r3, #16384	; 0x4000
   15908:	bne	15960 <__assert_fail@plt+0x433c>
   1590c:	ldrb	r3, [r4, #168]	; 0xa8
   15910:	cmp	r3, #46	; 0x2e
   15914:	bne	15958 <__assert_fail@plt+0x4334>
   15918:	ldrb	r3, [r4, #169]	; 0xa9
   1591c:	cmp	r3, #0
   15920:	beq	1593c <__assert_fail@plt+0x4318>
   15924:	ldrb	r3, [r4, #169]	; 0xa9
   15928:	cmp	r3, #46	; 0x2e
   1592c:	bne	15958 <__assert_fail@plt+0x4334>
   15930:	ldrb	r3, [r4, #170]	; 0xaa
   15934:	cmp	r3, #0
   15938:	bne	15958 <__assert_fail@plt+0x4334>
   1593c:	ldr	r3, [r4, #48]	; 0x30
   15940:	cmp	r3, #0
   15944:	bne	15950 <__assert_fail@plt+0x432c>
   15948:	mov	r3, #1
   1594c:	b	1599c <__assert_fail@plt+0x4378>
   15950:	mov	r3, #5
   15954:	b	1599c <__assert_fail@plt+0x4378>
   15958:	mov	r3, #1
   1595c:	b	1599c <__assert_fail@plt+0x4378>
   15960:	ldr	r3, [fp, #-16]
   15964:	ldr	r3, [r3, #16]
   15968:	and	r3, r3, #61440	; 0xf000
   1596c:	cmp	r3, #40960	; 0xa000
   15970:	bne	1597c <__assert_fail@plt+0x4358>
   15974:	mov	r3, #12
   15978:	b	1599c <__assert_fail@plt+0x4378>
   1597c:	ldr	r3, [fp, #-16]
   15980:	ldr	r3, [r3, #16]
   15984:	and	r3, r3, #61440	; 0xf000
   15988:	cmp	r3, #32768	; 0x8000
   1598c:	bne	15998 <__assert_fail@plt+0x4374>
   15990:	mov	r3, #8
   15994:	b	1599c <__assert_fail@plt+0x4378>
   15998:	mov	r3, #3
   1599c:	mov	r0, r3
   159a0:	sub	sp, fp, #8
   159a4:	pop	{r4, fp, pc}
   159a8:	push	{fp, lr}
   159ac:	add	fp, sp, #4
   159b0:	sub	sp, sp, #16
   159b4:	str	r0, [fp, #-16]
   159b8:	str	r1, [fp, #-20]	; 0xffffffec
   159bc:	ldr	r3, [fp, #-16]
   159c0:	str	r3, [fp, #-8]
   159c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   159c8:	str	r3, [fp, #-12]
   159cc:	ldr	r3, [fp, #-8]
   159d0:	ldr	r3, [r3]
   159d4:	ldr	r3, [r3, #44]	; 0x2c
   159d8:	ldr	r3, [r3, #44]	; 0x2c
   159dc:	ldr	r1, [fp, #-12]
   159e0:	ldr	r0, [fp, #-8]
   159e4:	blx	r3
   159e8:	mov	r3, r0
   159ec:	mov	r0, r3
   159f0:	sub	sp, fp, #4
   159f4:	pop	{fp, pc}
   159f8:	push	{r4, r5, r6, fp, lr}
   159fc:	add	fp, sp, #16
   15a00:	sub	sp, sp, #28
   15a04:	str	r0, [fp, #-40]	; 0xffffffd8
   15a08:	str	r1, [fp, #-44]	; 0xffffffd4
   15a0c:	mov	r5, r2
   15a10:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a14:	ldr	r3, [r3, #44]	; 0x2c
   15a18:	str	r3, [fp, #-24]	; 0xffffffe8
   15a1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a20:	ldr	r3, [r3, #40]	; 0x28
   15a24:	cmp	r3, r5
   15a28:	bcs	15ab4 <__assert_fail@plt+0x4490>
   15a2c:	add	r2, r5, #40	; 0x28
   15a30:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a34:	str	r2, [r3, #40]	; 0x28
   15a38:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a3c:	ldr	r3, [r3, #40]	; 0x28
   15a40:	cmn	r3, #-1073741823	; 0xc0000001
   15a44:	bhi	15a78 <__assert_fail@plt+0x4454>
   15a48:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a4c:	ldr	r2, [r3, #8]
   15a50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a54:	ldr	r3, [r3, #40]	; 0x28
   15a58:	lsl	r3, r3, #2
   15a5c:	mov	r1, r3
   15a60:	mov	r0, r2
   15a64:	bl	1c978 <__assert_fail@plt+0xb354>
   15a68:	str	r0, [fp, #-28]	; 0xffffffe4
   15a6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a70:	cmp	r3, #0
   15a74:	bne	15aa8 <__assert_fail@plt+0x4484>
   15a78:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a7c:	ldr	r3, [r3, #8]
   15a80:	mov	r0, r3
   15a84:	bl	1d784 <__assert_fail@plt+0xc160>
   15a88:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a8c:	mov	r2, #0
   15a90:	str	r2, [r3, #8]
   15a94:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a98:	mov	r2, #0
   15a9c:	str	r2, [r3, #40]	; 0x28
   15aa0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15aa4:	b	15b34 <__assert_fail@plt+0x4510>
   15aa8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15aac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15ab0:	str	r2, [r3, #8]
   15ab4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15ab8:	ldr	r4, [r3, #8]
   15abc:	ldr	r6, [fp, #-44]	; 0xffffffd4
   15ac0:	b	15ad4 <__assert_fail@plt+0x44b0>
   15ac4:	mov	r3, r4
   15ac8:	add	r4, r3, #4
   15acc:	str	r6, [r3]
   15ad0:	ldr	r6, [r6, #8]
   15ad4:	cmp	r6, #0
   15ad8:	bne	15ac4 <__assert_fail@plt+0x44a0>
   15adc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15ae0:	ldr	r0, [r3, #8]
   15ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ae8:	mov	r2, #4
   15aec:	mov	r1, r5
   15af0:	bl	11594 <qsort@plt>
   15af4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15af8:	ldr	r4, [r3, #8]
   15afc:	ldr	r3, [r4]
   15b00:	str	r3, [fp, #-44]	; 0xffffffd4
   15b04:	b	15b18 <__assert_fail@plt+0x44f4>
   15b08:	ldr	r3, [r4]
   15b0c:	ldr	r2, [r4, #4]
   15b10:	str	r2, [r3, #8]
   15b14:	add	r4, r4, #4
   15b18:	sub	r5, r5, #1
   15b1c:	cmp	r5, #0
   15b20:	bne	15b08 <__assert_fail@plt+0x44e4>
   15b24:	ldr	r3, [r4]
   15b28:	mov	r2, #0
   15b2c:	str	r2, [r3, #8]
   15b30:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b34:	mov	r0, r3
   15b38:	sub	sp, fp, #16
   15b3c:	pop	{r4, r5, r6, fp, pc}
   15b40:	push	{r4, r5, fp, lr}
   15b44:	add	fp, sp, #12
   15b48:	sub	sp, sp, #16
   15b4c:	str	r0, [fp, #-24]	; 0xffffffe8
   15b50:	str	r1, [fp, #-28]	; 0xffffffe4
   15b54:	mov	r5, r2
   15b58:	add	r3, r5, #176	; 0xb0
   15b5c:	bic	r3, r3, #7
   15b60:	str	r3, [fp, #-16]
   15b64:	ldr	r0, [fp, #-16]
   15b68:	bl	1c8d0 <__assert_fail@plt+0xb2ac>
   15b6c:	mov	r3, r0
   15b70:	mov	r4, r3
   15b74:	cmp	r4, #0
   15b78:	bne	15b84 <__assert_fail@plt+0x4560>
   15b7c:	mov	r3, #0
   15b80:	b	15bf0 <__assert_fail@plt+0x45cc>
   15b84:	add	r3, r4, #168	; 0xa8
   15b88:	mov	r2, r5
   15b8c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15b90:	mov	r0, r3
   15b94:	bl	112d0 <memcpy@plt>
   15b98:	add	r3, r4, r5
   15b9c:	mov	r2, #0
   15ba0:	strb	r2, [r3, #168]	; 0xa8
   15ba4:	str	r5, [r4, #52]	; 0x34
   15ba8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bac:	str	r3, [r4, #44]	; 0x2c
   15bb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bb4:	ldr	r3, [r3, #24]
   15bb8:	str	r3, [r4, #28]
   15bbc:	mov	r3, #0
   15bc0:	str	r3, [r4, #32]
   15bc4:	mov	r3, #0
   15bc8:	str	r3, [r4, #12]
   15bcc:	mov	r3, #0
   15bd0:	strh	r3, [r4, #58]	; 0x3a
   15bd4:	mov	r3, #3
   15bd8:	strh	r3, [r4, #60]	; 0x3c
   15bdc:	mov	r3, #0
   15be0:	str	r3, [r4, #16]
   15be4:	mov	r3, #0
   15be8:	str	r3, [r4, #20]
   15bec:	mov	r3, r4
   15bf0:	mov	r0, r3
   15bf4:	sub	sp, fp, #12
   15bf8:	pop	{r4, r5, fp, pc}
   15bfc:	push	{r4, r5, fp, lr}
   15c00:	add	fp, sp, #12
   15c04:	mov	r5, r0
   15c08:	b	15c30 <__assert_fail@plt+0x460c>
   15c0c:	ldr	r5, [r5, #8]
   15c10:	ldr	r3, [r4, #12]
   15c14:	cmp	r3, #0
   15c18:	beq	15c28 <__assert_fail@plt+0x4604>
   15c1c:	ldr	r3, [r4, #12]
   15c20:	mov	r0, r3
   15c24:	bl	1160c <closedir@plt>
   15c28:	mov	r0, r4
   15c2c:	bl	1d784 <__assert_fail@plt+0xc160>
   15c30:	mov	r4, r5
   15c34:	cmp	r4, #0
   15c38:	bne	15c0c <__assert_fail@plt+0x45e8>
   15c3c:	nop			; (mov r0, r0)
   15c40:	pop	{r4, r5, fp, pc}
   15c44:	push	{fp, lr}
   15c48:	add	fp, sp, #4
   15c4c:	sub	sp, sp, #16
   15c50:	str	r0, [fp, #-16]
   15c54:	str	r1, [fp, #-20]	; 0xffffffec
   15c58:	ldr	r3, [fp, #-16]
   15c5c:	ldr	r2, [r3, #36]	; 0x24
   15c60:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c64:	add	r3, r2, r3
   15c68:	add	r3, r3, #256	; 0x100
   15c6c:	str	r3, [fp, #-8]
   15c70:	ldr	r3, [fp, #-16]
   15c74:	ldr	r2, [r3, #36]	; 0x24
   15c78:	ldr	r3, [fp, #-8]
   15c7c:	cmp	r2, r3
   15c80:	bls	15cb8 <__assert_fail@plt+0x4694>
   15c84:	ldr	r3, [fp, #-16]
   15c88:	ldr	r3, [r3, #24]
   15c8c:	mov	r0, r3
   15c90:	bl	1d784 <__assert_fail@plt+0xc160>
   15c94:	ldr	r3, [fp, #-16]
   15c98:	mov	r2, #0
   15c9c:	str	r2, [r3, #24]
   15ca0:	bl	114bc <__errno_location@plt>
   15ca4:	mov	r2, r0
   15ca8:	mov	r3, #36	; 0x24
   15cac:	str	r3, [r2]
   15cb0:	mov	r3, #0
   15cb4:	b	15d24 <__assert_fail@plt+0x4700>
   15cb8:	ldr	r3, [fp, #-16]
   15cbc:	ldr	r2, [fp, #-8]
   15cc0:	str	r2, [r3, #36]	; 0x24
   15cc4:	ldr	r3, [fp, #-16]
   15cc8:	ldr	r2, [r3, #24]
   15ccc:	ldr	r3, [fp, #-16]
   15cd0:	ldr	r3, [r3, #36]	; 0x24
   15cd4:	mov	r1, r3
   15cd8:	mov	r0, r2
   15cdc:	bl	1c978 <__assert_fail@plt+0xb354>
   15ce0:	str	r0, [fp, #-12]
   15ce4:	ldr	r3, [fp, #-12]
   15ce8:	cmp	r3, #0
   15cec:	bne	15d14 <__assert_fail@plt+0x46f0>
   15cf0:	ldr	r3, [fp, #-16]
   15cf4:	ldr	r3, [r3, #24]
   15cf8:	mov	r0, r3
   15cfc:	bl	1d784 <__assert_fail@plt+0xc160>
   15d00:	ldr	r3, [fp, #-16]
   15d04:	mov	r2, #0
   15d08:	str	r2, [r3, #24]
   15d0c:	mov	r3, #0
   15d10:	b	15d24 <__assert_fail@plt+0x4700>
   15d14:	ldr	r3, [fp, #-16]
   15d18:	ldr	r2, [fp, #-12]
   15d1c:	str	r2, [r3, #24]
   15d20:	mov	r3, #1
   15d24:	mov	r0, r3
   15d28:	sub	sp, fp, #4
   15d2c:	pop	{fp, pc}
   15d30:	push	{fp}		; (str fp, [sp, #-4]!)
   15d34:	add	fp, sp, #0
   15d38:	sub	sp, sp, #20
   15d3c:	str	r0, [fp, #-16]
   15d40:	str	r1, [fp, #-20]	; 0xffffffec
   15d44:	ldr	r3, [fp, #-16]
   15d48:	ldr	r3, [r3, #24]
   15d4c:	str	r3, [fp, #-12]
   15d50:	ldr	r3, [fp, #-16]
   15d54:	ldr	r3, [r3, #4]
   15d58:	str	r3, [fp, #-8]
   15d5c:	b	15dbc <__assert_fail@plt+0x4798>
   15d60:	ldr	r3, [fp, #-8]
   15d64:	ldr	r2, [r3, #24]
   15d68:	ldr	r3, [fp, #-8]
   15d6c:	add	r3, r3, #168	; 0xa8
   15d70:	cmp	r2, r3
   15d74:	beq	15da4 <__assert_fail@plt+0x4780>
   15d78:	ldr	r3, [fp, #-8]
   15d7c:	ldr	r3, [r3, #24]
   15d80:	mov	r2, r3
   15d84:	ldr	r3, [fp, #-8]
   15d88:	ldr	r3, [r3, #28]
   15d8c:	sub	r3, r2, r3
   15d90:	mov	r2, r3
   15d94:	ldr	r3, [fp, #-12]
   15d98:	add	r2, r3, r2
   15d9c:	ldr	r3, [fp, #-8]
   15da0:	str	r2, [r3, #24]
   15da4:	ldr	r3, [fp, #-8]
   15da8:	ldr	r2, [fp, #-12]
   15dac:	str	r2, [r3, #28]
   15db0:	ldr	r3, [fp, #-8]
   15db4:	ldr	r3, [r3, #8]
   15db8:	str	r3, [fp, #-8]
   15dbc:	ldr	r3, [fp, #-8]
   15dc0:	cmp	r3, #0
   15dc4:	bne	15d60 <__assert_fail@plt+0x473c>
   15dc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15dcc:	str	r3, [fp, #-8]
   15dd0:	b	15e4c <__assert_fail@plt+0x4828>
   15dd4:	ldr	r3, [fp, #-8]
   15dd8:	ldr	r2, [r3, #24]
   15ddc:	ldr	r3, [fp, #-8]
   15de0:	add	r3, r3, #168	; 0xa8
   15de4:	cmp	r2, r3
   15de8:	beq	15e18 <__assert_fail@plt+0x47f4>
   15dec:	ldr	r3, [fp, #-8]
   15df0:	ldr	r3, [r3, #24]
   15df4:	mov	r2, r3
   15df8:	ldr	r3, [fp, #-8]
   15dfc:	ldr	r3, [r3, #28]
   15e00:	sub	r3, r2, r3
   15e04:	mov	r2, r3
   15e08:	ldr	r3, [fp, #-12]
   15e0c:	add	r2, r3, r2
   15e10:	ldr	r3, [fp, #-8]
   15e14:	str	r2, [r3, #24]
   15e18:	ldr	r3, [fp, #-8]
   15e1c:	ldr	r2, [fp, #-12]
   15e20:	str	r2, [r3, #28]
   15e24:	ldr	r3, [fp, #-8]
   15e28:	ldr	r3, [r3, #8]
   15e2c:	cmp	r3, #0
   15e30:	beq	15e40 <__assert_fail@plt+0x481c>
   15e34:	ldr	r3, [fp, #-8]
   15e38:	ldr	r3, [r3, #8]
   15e3c:	b	15e48 <__assert_fail@plt+0x4824>
   15e40:	ldr	r3, [fp, #-8]
   15e44:	ldr	r3, [r3, #4]
   15e48:	str	r3, [fp, #-8]
   15e4c:	ldr	r3, [fp, #-8]
   15e50:	ldr	r3, [r3, #48]	; 0x30
   15e54:	cmp	r3, #0
   15e58:	bge	15dd4 <__assert_fail@plt+0x47b0>
   15e5c:	nop			; (mov r0, r0)
   15e60:	add	sp, fp, #0
   15e64:	pop	{fp}		; (ldr fp, [sp], #4)
   15e68:	bx	lr
   15e6c:	push	{fp, lr}
   15e70:	add	fp, sp, #4
   15e74:	sub	sp, sp, #16
   15e78:	str	r0, [fp, #-16]
   15e7c:	mov	r3, #0
   15e80:	str	r3, [fp, #-8]
   15e84:	b	15ec0 <__assert_fail@plt+0x489c>
   15e88:	ldr	r3, [fp, #-16]
   15e8c:	ldr	r3, [r3]
   15e90:	mov	r0, r3
   15e94:	bl	1148c <strlen@plt>
   15e98:	str	r0, [fp, #-12]
   15e9c:	ldr	r2, [fp, #-12]
   15ea0:	ldr	r3, [fp, #-8]
   15ea4:	cmp	r2, r3
   15ea8:	bls	15eb4 <__assert_fail@plt+0x4890>
   15eac:	ldr	r3, [fp, #-12]
   15eb0:	str	r3, [fp, #-8]
   15eb4:	ldr	r3, [fp, #-16]
   15eb8:	add	r3, r3, #4
   15ebc:	str	r3, [fp, #-16]
   15ec0:	ldr	r3, [fp, #-16]
   15ec4:	ldr	r3, [r3]
   15ec8:	cmp	r3, #0
   15ecc:	bne	15e88 <__assert_fail@plt+0x4864>
   15ed0:	ldr	r3, [fp, #-8]
   15ed4:	add	r3, r3, #1
   15ed8:	mov	r0, r3
   15edc:	sub	sp, fp, #4
   15ee0:	pop	{fp, pc}
   15ee4:	push	{fp, lr}
   15ee8:	add	fp, sp, #4
   15eec:	sub	sp, sp, #144	; 0x90
   15ef0:	str	r0, [fp, #-136]	; 0xffffff78
   15ef4:	str	r1, [fp, #-140]	; 0xffffff74
   15ef8:	str	r2, [fp, #-144]	; 0xffffff70
   15efc:	str	r3, [fp, #-148]	; 0xffffff6c
   15f00:	ldr	r3, [fp, #-148]	; 0xffffff6c
   15f04:	cmp	r3, #0
   15f08:	beq	15f2c <__assert_fail@plt+0x4908>
   15f0c:	ldr	r1, [pc, #632]	; 1618c <__assert_fail@plt+0x4b68>
   15f10:	ldr	r0, [fp, #-148]	; 0xffffff6c
   15f14:	bl	1127c <strcmp@plt>
   15f18:	mov	r3, r0
   15f1c:	cmp	r3, #0
   15f20:	bne	15f2c <__assert_fail@plt+0x4908>
   15f24:	mov	r3, #1
   15f28:	b	15f30 <__assert_fail@plt+0x490c>
   15f2c:	mov	r3, #0
   15f30:	strb	r3, [fp, #-13]
   15f34:	ldrb	r3, [fp, #-13]
   15f38:	and	r3, r3, #1
   15f3c:	strb	r3, [fp, #-13]
   15f40:	ldr	r3, [fp, #-136]	; 0xffffff78
   15f44:	ldr	r3, [r3, #48]	; 0x30
   15f48:	and	r3, r3, #4
   15f4c:	cmp	r3, #0
   15f50:	beq	15f84 <__assert_fail@plt+0x4960>
   15f54:	ldr	r3, [fp, #-136]	; 0xffffff78
   15f58:	ldr	r3, [r3, #48]	; 0x30
   15f5c:	and	r3, r3, #512	; 0x200
   15f60:	cmp	r3, #0
   15f64:	beq	15f7c <__assert_fail@plt+0x4958>
   15f68:	ldr	r3, [fp, #-144]	; 0xffffff70
   15f6c:	cmp	r3, #0
   15f70:	blt	15f7c <__assert_fail@plt+0x4958>
   15f74:	ldr	r0, [fp, #-144]	; 0xffffff70
   15f78:	bl	115f4 <close@plt>
   15f7c:	mov	r3, #0
   15f80:	b	16180 <__assert_fail@plt+0x4b5c>
   15f84:	ldr	r3, [fp, #-144]	; 0xffffff70
   15f88:	cmp	r3, #0
   15f8c:	bge	16004 <__assert_fail@plt+0x49e0>
   15f90:	ldrb	r3, [fp, #-13]
   15f94:	cmp	r3, #0
   15f98:	beq	16004 <__assert_fail@plt+0x49e0>
   15f9c:	ldr	r3, [fp, #-136]	; 0xffffff78
   15fa0:	ldr	r3, [r3, #48]	; 0x30
   15fa4:	and	r3, r3, #512	; 0x200
   15fa8:	cmp	r3, #0
   15fac:	beq	16004 <__assert_fail@plt+0x49e0>
   15fb0:	ldr	r3, [fp, #-136]	; 0xffffff78
   15fb4:	add	r3, r3, #60	; 0x3c
   15fb8:	mov	r0, r3
   15fbc:	bl	17d78 <__assert_fail@plt+0x6754>
   15fc0:	mov	r3, r0
   15fc4:	eor	r3, r3, #1
   15fc8:	uxtb	r3, r3
   15fcc:	cmp	r3, #0
   15fd0:	beq	16004 <__assert_fail@plt+0x49e0>
   15fd4:	ldr	r3, [fp, #-136]	; 0xffffff78
   15fd8:	add	r3, r3, #60	; 0x3c
   15fdc:	mov	r0, r3
   15fe0:	bl	17e60 <__assert_fail@plt+0x683c>
   15fe4:	str	r0, [fp, #-20]	; 0xffffffec
   15fe8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fec:	cmp	r3, #0
   15ff0:	blt	16004 <__assert_fail@plt+0x49e0>
   15ff4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ff8:	str	r3, [fp, #-144]	; 0xffffff70
   15ffc:	mov	r3, #0
   16000:	str	r3, [fp, #-148]	; 0xffffff6c
   16004:	ldr	r3, [fp, #-144]	; 0xffffff70
   16008:	str	r3, [fp, #-12]
   1600c:	ldr	r3, [fp, #-144]	; 0xffffff70
   16010:	cmp	r3, #0
   16014:	bge	1603c <__assert_fail@plt+0x4a18>
   16018:	ldr	r1, [fp, #-148]	; 0xffffff6c
   1601c:	ldr	r0, [fp, #-136]	; 0xffffff78
   16020:	bl	13660 <__assert_fail@plt+0x203c>
   16024:	str	r0, [fp, #-12]
   16028:	ldr	r3, [fp, #-12]
   1602c:	cmp	r3, #0
   16030:	bge	1603c <__assert_fail@plt+0x4a18>
   16034:	mvn	r3, #0
   16038:	b	16180 <__assert_fail@plt+0x4b5c>
   1603c:	ldr	r3, [fp, #-136]	; 0xffffff78
   16040:	ldr	r3, [r3, #48]	; 0x30
   16044:	and	r3, r3, #2
   16048:	cmp	r3, #0
   1604c:	bne	16074 <__assert_fail@plt+0x4a50>
   16050:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16054:	cmp	r3, #0
   16058:	beq	160ec <__assert_fail@plt+0x4ac8>
   1605c:	ldr	r1, [pc, #296]	; 1618c <__assert_fail@plt+0x4b68>
   16060:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16064:	bl	1127c <strcmp@plt>
   16068:	mov	r3, r0
   1606c:	cmp	r3, #0
   16070:	bne	160ec <__assert_fail@plt+0x4ac8>
   16074:	sub	r3, fp, #132	; 0x84
   16078:	mov	r1, r3
   1607c:	ldr	r0, [fp, #-12]
   16080:	bl	1f010 <__assert_fail@plt+0xd9ec>
   16084:	mov	r3, r0
   16088:	cmp	r3, #0
   1608c:	beq	1609c <__assert_fail@plt+0x4a78>
   16090:	mvn	r3, #0
   16094:	str	r3, [fp, #-8]
   16098:	b	16148 <__assert_fail@plt+0x4b24>
   1609c:	ldr	r3, [fp, #-140]	; 0xffffff74
   160a0:	ldrd	r0, [r3, #64]	; 0x40
   160a4:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   160a8:	cmp	r1, r3
   160ac:	cmpeq	r0, r2
   160b0:	bne	160cc <__assert_fail@plt+0x4aa8>
   160b4:	ldr	r3, [fp, #-140]	; 0xffffff74
   160b8:	ldrd	r0, [r3, #160]	; 0xa0
   160bc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   160c0:	cmp	r1, r3
   160c4:	cmpeq	r0, r2
   160c8:	beq	160ec <__assert_fail@plt+0x4ac8>
   160cc:	bl	114bc <__errno_location@plt>
   160d0:	mov	r2, r0
   160d4:	mov	r3, #2
   160d8:	str	r3, [r2]
   160dc:	mvn	r3, #0
   160e0:	str	r3, [fp, #-8]
   160e4:	nop			; (mov r0, r0)
   160e8:	b	16148 <__assert_fail@plt+0x4b24>
   160ec:	ldr	r3, [fp, #-136]	; 0xffffff78
   160f0:	ldr	r3, [r3, #48]	; 0x30
   160f4:	and	r3, r3, #512	; 0x200
   160f8:	cmp	r3, #0
   160fc:	beq	1613c <__assert_fail@plt+0x4b18>
   16100:	ldrb	r3, [fp, #-13]
   16104:	cmp	r3, #0
   16108:	movne	r3, #1
   1610c:	moveq	r3, #0
   16110:	uxtb	r3, r3
   16114:	eor	r3, r3, #1
   16118:	uxtb	r3, r3
   1611c:	and	r3, r3, #1
   16120:	uxtb	r3, r3
   16124:	mov	r2, r3
   16128:	ldr	r1, [fp, #-12]
   1612c:	ldr	r0, [fp, #-136]	; 0xffffff78
   16130:	bl	134c4 <__assert_fail@plt+0x1ea0>
   16134:	mov	r3, #0
   16138:	b	16180 <__assert_fail@plt+0x4b5c>
   1613c:	ldr	r0, [fp, #-12]
   16140:	bl	11588 <fchdir@plt>
   16144:	str	r0, [fp, #-8]
   16148:	ldr	r3, [fp, #-144]	; 0xffffff70
   1614c:	cmp	r3, #0
   16150:	bge	1617c <__assert_fail@plt+0x4b58>
   16154:	bl	114bc <__errno_location@plt>
   16158:	mov	r3, r0
   1615c:	ldr	r3, [r3]
   16160:	str	r3, [fp, #-24]	; 0xffffffe8
   16164:	ldr	r0, [fp, #-12]
   16168:	bl	115f4 <close@plt>
   1616c:	bl	114bc <__errno_location@plt>
   16170:	mov	r2, r0
   16174:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16178:	str	r3, [r2]
   1617c:	ldr	r3, [fp, #-8]
   16180:	mov	r0, r3
   16184:	sub	sp, fp, #4
   16188:	pop	{fp, pc}
   1618c:	strdeq	pc, [r1], -r4
   16190:	push	{fp}		; (str fp, [sp, #-4]!)
   16194:	add	fp, sp, #0
   16198:	sub	sp, sp, #12
   1619c:	str	r0, [fp, #-8]
   161a0:	ldr	r3, [fp, #-8]
   161a4:	ldr	r3, [r3, #8]
   161a8:	mov	r0, r3
   161ac:	add	sp, fp, #0
   161b0:	pop	{fp}		; (ldr fp, [sp], #4)
   161b4:	bx	lr
   161b8:	push	{fp}		; (str fp, [sp, #-4]!)
   161bc:	add	fp, sp, #0
   161c0:	sub	sp, sp, #12
   161c4:	str	r0, [fp, #-8]
   161c8:	ldr	r3, [fp, #-8]
   161cc:	ldr	r3, [r3, #12]
   161d0:	mov	r0, r3
   161d4:	add	sp, fp, #0
   161d8:	pop	{fp}		; (ldr fp, [sp], #4)
   161dc:	bx	lr
   161e0:	push	{fp}		; (str fp, [sp, #-4]!)
   161e4:	add	fp, sp, #0
   161e8:	sub	sp, sp, #12
   161ec:	str	r0, [fp, #-8]
   161f0:	ldr	r3, [fp, #-8]
   161f4:	ldr	r3, [r3, #16]
   161f8:	mov	r0, r3
   161fc:	add	sp, fp, #0
   16200:	pop	{fp}		; (ldr fp, [sp], #4)
   16204:	bx	lr
   16208:	push	{fp}		; (str fp, [sp, #-4]!)
   1620c:	add	fp, sp, #0
   16210:	sub	sp, sp, #28
   16214:	str	r0, [fp, #-24]	; 0xffffffe8
   16218:	mov	r3, #0
   1621c:	str	r3, [fp, #-12]
   16220:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16224:	ldr	r3, [r3]
   16228:	str	r3, [fp, #-8]
   1622c:	b	1629c <__assert_fail@plt+0x4c78>
   16230:	ldr	r3, [fp, #-8]
   16234:	ldr	r3, [r3]
   16238:	cmp	r3, #0
   1623c:	beq	16290 <__assert_fail@plt+0x4c6c>
   16240:	ldr	r3, [fp, #-8]
   16244:	str	r3, [fp, #-16]
   16248:	mov	r3, #1
   1624c:	str	r3, [fp, #-20]	; 0xffffffec
   16250:	b	16260 <__assert_fail@plt+0x4c3c>
   16254:	ldr	r3, [fp, #-20]	; 0xffffffec
   16258:	add	r3, r3, #1
   1625c:	str	r3, [fp, #-20]	; 0xffffffec
   16260:	ldr	r3, [fp, #-16]
   16264:	ldr	r3, [r3, #4]
   16268:	str	r3, [fp, #-16]
   1626c:	ldr	r3, [fp, #-16]
   16270:	cmp	r3, #0
   16274:	bne	16254 <__assert_fail@plt+0x4c30>
   16278:	ldr	r2, [fp, #-20]	; 0xffffffec
   1627c:	ldr	r3, [fp, #-12]
   16280:	cmp	r2, r3
   16284:	bls	16290 <__assert_fail@plt+0x4c6c>
   16288:	ldr	r3, [fp, #-20]	; 0xffffffec
   1628c:	str	r3, [fp, #-12]
   16290:	ldr	r3, [fp, #-8]
   16294:	add	r3, r3, #8
   16298:	str	r3, [fp, #-8]
   1629c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162a0:	ldr	r2, [r3, #4]
   162a4:	ldr	r3, [fp, #-8]
   162a8:	cmp	r2, r3
   162ac:	bhi	16230 <__assert_fail@plt+0x4c0c>
   162b0:	ldr	r3, [fp, #-12]
   162b4:	mov	r0, r3
   162b8:	add	sp, fp, #0
   162bc:	pop	{fp}		; (ldr fp, [sp], #4)
   162c0:	bx	lr
   162c4:	push	{fp}		; (str fp, [sp, #-4]!)
   162c8:	add	fp, sp, #0
   162cc:	sub	sp, sp, #28
   162d0:	str	r0, [fp, #-24]	; 0xffffffe8
   162d4:	mov	r3, #0
   162d8:	str	r3, [fp, #-12]
   162dc:	mov	r3, #0
   162e0:	str	r3, [fp, #-16]
   162e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162e8:	ldr	r3, [r3]
   162ec:	str	r3, [fp, #-8]
   162f0:	b	16358 <__assert_fail@plt+0x4d34>
   162f4:	ldr	r3, [fp, #-8]
   162f8:	ldr	r3, [r3]
   162fc:	cmp	r3, #0
   16300:	beq	1634c <__assert_fail@plt+0x4d28>
   16304:	ldr	r3, [fp, #-8]
   16308:	str	r3, [fp, #-20]	; 0xffffffec
   1630c:	ldr	r3, [fp, #-12]
   16310:	add	r3, r3, #1
   16314:	str	r3, [fp, #-12]
   16318:	ldr	r3, [fp, #-16]
   1631c:	add	r3, r3, #1
   16320:	str	r3, [fp, #-16]
   16324:	b	16334 <__assert_fail@plt+0x4d10>
   16328:	ldr	r3, [fp, #-16]
   1632c:	add	r3, r3, #1
   16330:	str	r3, [fp, #-16]
   16334:	ldr	r3, [fp, #-20]	; 0xffffffec
   16338:	ldr	r3, [r3, #4]
   1633c:	str	r3, [fp, #-20]	; 0xffffffec
   16340:	ldr	r3, [fp, #-20]	; 0xffffffec
   16344:	cmp	r3, #0
   16348:	bne	16328 <__assert_fail@plt+0x4d04>
   1634c:	ldr	r3, [fp, #-8]
   16350:	add	r3, r3, #8
   16354:	str	r3, [fp, #-8]
   16358:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1635c:	ldr	r2, [r3, #4]
   16360:	ldr	r3, [fp, #-8]
   16364:	cmp	r2, r3
   16368:	bhi	162f4 <__assert_fail@plt+0x4cd0>
   1636c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16370:	ldr	r2, [r3, #12]
   16374:	ldr	r3, [fp, #-12]
   16378:	cmp	r2, r3
   1637c:	bne	1639c <__assert_fail@plt+0x4d78>
   16380:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16384:	ldr	r2, [r3, #16]
   16388:	ldr	r3, [fp, #-16]
   1638c:	cmp	r2, r3
   16390:	bne	1639c <__assert_fail@plt+0x4d78>
   16394:	mov	r3, #1
   16398:	b	163a0 <__assert_fail@plt+0x4d7c>
   1639c:	mov	r3, #0
   163a0:	mov	r0, r3
   163a4:	add	sp, fp, #0
   163a8:	pop	{fp}		; (ldr fp, [sp], #4)
   163ac:	bx	lr
   163b0:	push	{fp, lr}
   163b4:	add	fp, sp, #4
   163b8:	sub	sp, sp, #32
   163bc:	str	r0, [fp, #-24]	; 0xffffffe8
   163c0:	str	r1, [fp, #-28]	; 0xffffffe4
   163c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   163c8:	bl	161e0 <__assert_fail@plt+0x4bbc>
   163cc:	str	r0, [fp, #-8]
   163d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   163d4:	bl	16190 <__assert_fail@plt+0x4b6c>
   163d8:	str	r0, [fp, #-12]
   163dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   163e0:	bl	161b8 <__assert_fail@plt+0x4b94>
   163e4:	str	r0, [fp, #-16]
   163e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   163ec:	bl	16208 <__assert_fail@plt+0x4be4>
   163f0:	str	r0, [fp, #-20]	; 0xffffffec
   163f4:	ldr	r2, [fp, #-8]
   163f8:	ldr	r1, [pc, #112]	; 16470 <__assert_fail@plt+0x4e4c>
   163fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16400:	bl	114b0 <fprintf@plt>
   16404:	ldr	r2, [fp, #-12]
   16408:	ldr	r1, [pc, #100]	; 16474 <__assert_fail@plt+0x4e50>
   1640c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16410:	bl	114b0 <fprintf@plt>
   16414:	ldr	r3, [fp, #-16]
   16418:	vmov	s15, r3
   1641c:	vcvt.f64.u32	d7, s15
   16420:	vldr	d6, [pc, #64]	; 16468 <__assert_fail@plt+0x4e44>
   16424:	vmul.f64	d5, d7, d6
   16428:	ldr	r3, [fp, #-12]
   1642c:	vmov	s15, r3
   16430:	vcvt.f64.u32	d6, s15
   16434:	vdiv.f64	d7, d5, d6
   16438:	vstr	d7, [sp]
   1643c:	ldr	r2, [fp, #-16]
   16440:	ldr	r1, [pc, #48]	; 16478 <__assert_fail@plt+0x4e54>
   16444:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16448:	bl	114b0 <fprintf@plt>
   1644c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16450:	ldr	r1, [pc, #36]	; 1647c <__assert_fail@plt+0x4e58>
   16454:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16458:	bl	114b0 <fprintf@plt>
   1645c:	nop			; (mov r0, r0)
   16460:	sub	sp, fp, #4
   16464:	pop	{fp, pc}
   16468:	andeq	r0, r0, r0
   1646c:	subsmi	r0, r9, r0
   16470:	andeq	pc, r1, ip, lsl #30
   16474:	andeq	pc, r1, r4, lsr #30
   16478:	andeq	pc, r1, ip, lsr pc	; <UNPREDICTABLE>
   1647c:	andeq	pc, r1, r0, ror #30
   16480:	push	{fp, lr}
   16484:	add	fp, sp, #4
   16488:	sub	sp, sp, #16
   1648c:	str	r0, [fp, #-16]
   16490:	str	r1, [fp, #-20]	; 0xffffffec
   16494:	ldr	r3, [fp, #-16]
   16498:	ldr	r3, [r3, #24]
   1649c:	ldr	r2, [fp, #-16]
   164a0:	ldr	r2, [r2, #8]
   164a4:	mov	r1, r2
   164a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   164ac:	blx	r3
   164b0:	str	r0, [fp, #-8]
   164b4:	ldr	r3, [fp, #-16]
   164b8:	ldr	r2, [r3, #8]
   164bc:	ldr	r3, [fp, #-8]
   164c0:	cmp	r2, r3
   164c4:	bhi	164cc <__assert_fail@plt+0x4ea8>
   164c8:	bl	115e8 <abort@plt>
   164cc:	ldr	r3, [fp, #-16]
   164d0:	ldr	r2, [r3]
   164d4:	ldr	r3, [fp, #-8]
   164d8:	lsl	r3, r3, #3
   164dc:	add	r3, r2, r3
   164e0:	mov	r0, r3
   164e4:	sub	sp, fp, #4
   164e8:	pop	{fp, pc}
   164ec:	push	{fp, lr}
   164f0:	add	fp, sp, #4
   164f4:	sub	sp, sp, #16
   164f8:	str	r0, [fp, #-16]
   164fc:	str	r1, [fp, #-20]	; 0xffffffec
   16500:	ldr	r1, [fp, #-20]	; 0xffffffec
   16504:	ldr	r0, [fp, #-16]
   16508:	bl	16480 <__assert_fail@plt+0x4e5c>
   1650c:	str	r0, [fp, #-12]
   16510:	ldr	r3, [fp, #-12]
   16514:	ldr	r3, [r3]
   16518:	cmp	r3, #0
   1651c:	bne	16528 <__assert_fail@plt+0x4f04>
   16520:	mov	r3, #0
   16524:	b	16598 <__assert_fail@plt+0x4f74>
   16528:	ldr	r3, [fp, #-12]
   1652c:	str	r3, [fp, #-8]
   16530:	b	16588 <__assert_fail@plt+0x4f64>
   16534:	ldr	r3, [fp, #-8]
   16538:	ldr	r2, [r3]
   1653c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16540:	cmp	r2, r3
   16544:	beq	16570 <__assert_fail@plt+0x4f4c>
   16548:	ldr	r3, [fp, #-16]
   1654c:	ldr	r3, [r3, #28]
   16550:	ldr	r2, [fp, #-8]
   16554:	ldr	r2, [r2]
   16558:	mov	r1, r2
   1655c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16560:	blx	r3
   16564:	mov	r3, r0
   16568:	cmp	r3, #0
   1656c:	beq	1657c <__assert_fail@plt+0x4f58>
   16570:	ldr	r3, [fp, #-8]
   16574:	ldr	r3, [r3]
   16578:	b	16598 <__assert_fail@plt+0x4f74>
   1657c:	ldr	r3, [fp, #-8]
   16580:	ldr	r3, [r3, #4]
   16584:	str	r3, [fp, #-8]
   16588:	ldr	r3, [fp, #-8]
   1658c:	cmp	r3, #0
   16590:	bne	16534 <__assert_fail@plt+0x4f10>
   16594:	mov	r3, #0
   16598:	mov	r0, r3
   1659c:	sub	sp, fp, #4
   165a0:	pop	{fp, pc}
   165a4:	push	{fp, lr}
   165a8:	add	fp, sp, #4
   165ac:	sub	sp, sp, #16
   165b0:	str	r0, [fp, #-16]
   165b4:	ldr	r3, [fp, #-16]
   165b8:	ldr	r3, [r3, #16]
   165bc:	cmp	r3, #0
   165c0:	bne	165cc <__assert_fail@plt+0x4fa8>
   165c4:	mov	r3, #0
   165c8:	b	1661c <__assert_fail@plt+0x4ff8>
   165cc:	ldr	r3, [fp, #-16]
   165d0:	ldr	r3, [r3]
   165d4:	str	r3, [fp, #-8]
   165d8:	ldr	r3, [fp, #-16]
   165dc:	ldr	r2, [r3, #4]
   165e0:	ldr	r3, [fp, #-8]
   165e4:	cmp	r2, r3
   165e8:	bhi	165f0 <__assert_fail@plt+0x4fcc>
   165ec:	bl	115e8 <abort@plt>
   165f0:	ldr	r3, [fp, #-8]
   165f4:	ldr	r3, [r3]
   165f8:	cmp	r3, #0
   165fc:	beq	1660c <__assert_fail@plt+0x4fe8>
   16600:	ldr	r3, [fp, #-8]
   16604:	ldr	r3, [r3]
   16608:	b	1661c <__assert_fail@plt+0x4ff8>
   1660c:	ldr	r3, [fp, #-8]
   16610:	add	r3, r3, #8
   16614:	str	r3, [fp, #-8]
   16618:	b	165d8 <__assert_fail@plt+0x4fb4>
   1661c:	mov	r0, r3
   16620:	sub	sp, fp, #4
   16624:	pop	{fp, pc}
   16628:	push	{fp, lr}
   1662c:	add	fp, sp, #4
   16630:	sub	sp, sp, #16
   16634:	str	r0, [fp, #-16]
   16638:	str	r1, [fp, #-20]	; 0xffffffec
   1663c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16640:	ldr	r0, [fp, #-16]
   16644:	bl	16480 <__assert_fail@plt+0x4e5c>
   16648:	str	r0, [fp, #-8]
   1664c:	ldr	r3, [fp, #-8]
   16650:	str	r3, [fp, #-12]
   16654:	ldr	r3, [fp, #-12]
   16658:	ldr	r2, [r3]
   1665c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16660:	cmp	r2, r3
   16664:	bne	16688 <__assert_fail@plt+0x5064>
   16668:	ldr	r3, [fp, #-12]
   1666c:	ldr	r3, [r3, #4]
   16670:	cmp	r3, #0
   16674:	beq	16688 <__assert_fail@plt+0x5064>
   16678:	ldr	r3, [fp, #-12]
   1667c:	ldr	r3, [r3, #4]
   16680:	ldr	r3, [r3]
   16684:	b	166e4 <__assert_fail@plt+0x50c0>
   16688:	ldr	r3, [fp, #-12]
   1668c:	ldr	r3, [r3, #4]
   16690:	str	r3, [fp, #-12]
   16694:	ldr	r3, [fp, #-12]
   16698:	cmp	r3, #0
   1669c:	bne	16654 <__assert_fail@plt+0x5030>
   166a0:	b	166c0 <__assert_fail@plt+0x509c>
   166a4:	ldr	r3, [fp, #-8]
   166a8:	ldr	r3, [r3]
   166ac:	cmp	r3, #0
   166b0:	beq	166c0 <__assert_fail@plt+0x509c>
   166b4:	ldr	r3, [fp, #-8]
   166b8:	ldr	r3, [r3]
   166bc:	b	166e4 <__assert_fail@plt+0x50c0>
   166c0:	ldr	r3, [fp, #-8]
   166c4:	add	r3, r3, #8
   166c8:	str	r3, [fp, #-8]
   166cc:	ldr	r3, [fp, #-16]
   166d0:	ldr	r3, [r3, #4]
   166d4:	ldr	r2, [fp, #-8]
   166d8:	cmp	r2, r3
   166dc:	bcc	166a4 <__assert_fail@plt+0x5080>
   166e0:	mov	r3, #0
   166e4:	mov	r0, r3
   166e8:	sub	sp, fp, #4
   166ec:	pop	{fp, pc}
   166f0:	push	{fp}		; (str fp, [sp, #-4]!)
   166f4:	add	fp, sp, #0
   166f8:	sub	sp, sp, #36	; 0x24
   166fc:	str	r0, [fp, #-24]	; 0xffffffe8
   16700:	str	r1, [fp, #-28]	; 0xffffffe4
   16704:	str	r2, [fp, #-32]	; 0xffffffe0
   16708:	mov	r3, #0
   1670c:	str	r3, [fp, #-8]
   16710:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16714:	ldr	r3, [r3]
   16718:	str	r3, [fp, #-12]
   1671c:	b	1679c <__assert_fail@plt+0x5178>
   16720:	ldr	r3, [fp, #-12]
   16724:	ldr	r3, [r3]
   16728:	cmp	r3, #0
   1672c:	beq	16790 <__assert_fail@plt+0x516c>
   16730:	ldr	r3, [fp, #-12]
   16734:	str	r3, [fp, #-16]
   16738:	b	16784 <__assert_fail@plt+0x5160>
   1673c:	ldr	r2, [fp, #-8]
   16740:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16744:	cmp	r2, r3
   16748:	bcc	16754 <__assert_fail@plt+0x5130>
   1674c:	ldr	r3, [fp, #-8]
   16750:	b	167b4 <__assert_fail@plt+0x5190>
   16754:	ldr	r3, [fp, #-8]
   16758:	add	r2, r3, #1
   1675c:	str	r2, [fp, #-8]
   16760:	lsl	r3, r3, #2
   16764:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16768:	add	r3, r2, r3
   1676c:	ldr	r2, [fp, #-16]
   16770:	ldr	r2, [r2]
   16774:	str	r2, [r3]
   16778:	ldr	r3, [fp, #-16]
   1677c:	ldr	r3, [r3, #4]
   16780:	str	r3, [fp, #-16]
   16784:	ldr	r3, [fp, #-16]
   16788:	cmp	r3, #0
   1678c:	bne	1673c <__assert_fail@plt+0x5118>
   16790:	ldr	r3, [fp, #-12]
   16794:	add	r3, r3, #8
   16798:	str	r3, [fp, #-12]
   1679c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167a0:	ldr	r2, [r3, #4]
   167a4:	ldr	r3, [fp, #-12]
   167a8:	cmp	r2, r3
   167ac:	bhi	16720 <__assert_fail@plt+0x50fc>
   167b0:	ldr	r3, [fp, #-8]
   167b4:	mov	r0, r3
   167b8:	add	sp, fp, #0
   167bc:	pop	{fp}		; (ldr fp, [sp], #4)
   167c0:	bx	lr
   167c4:	push	{fp, lr}
   167c8:	add	fp, sp, #4
   167cc:	sub	sp, sp, #32
   167d0:	str	r0, [fp, #-24]	; 0xffffffe8
   167d4:	str	r1, [fp, #-28]	; 0xffffffe4
   167d8:	str	r2, [fp, #-32]	; 0xffffffe0
   167dc:	mov	r3, #0
   167e0:	str	r3, [fp, #-8]
   167e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167e8:	ldr	r3, [r3]
   167ec:	str	r3, [fp, #-12]
   167f0:	b	16874 <__assert_fail@plt+0x5250>
   167f4:	ldr	r3, [fp, #-12]
   167f8:	ldr	r3, [r3]
   167fc:	cmp	r3, #0
   16800:	beq	16868 <__assert_fail@plt+0x5244>
   16804:	ldr	r3, [fp, #-12]
   16808:	str	r3, [fp, #-16]
   1680c:	b	1685c <__assert_fail@plt+0x5238>
   16810:	ldr	r3, [fp, #-16]
   16814:	ldr	r2, [r3]
   16818:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1681c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16820:	mov	r0, r2
   16824:	blx	r3
   16828:	mov	r3, r0
   1682c:	eor	r3, r3, #1
   16830:	uxtb	r3, r3
   16834:	cmp	r3, #0
   16838:	beq	16844 <__assert_fail@plt+0x5220>
   1683c:	ldr	r3, [fp, #-8]
   16840:	b	1688c <__assert_fail@plt+0x5268>
   16844:	ldr	r3, [fp, #-8]
   16848:	add	r3, r3, #1
   1684c:	str	r3, [fp, #-8]
   16850:	ldr	r3, [fp, #-16]
   16854:	ldr	r3, [r3, #4]
   16858:	str	r3, [fp, #-16]
   1685c:	ldr	r3, [fp, #-16]
   16860:	cmp	r3, #0
   16864:	bne	16810 <__assert_fail@plt+0x51ec>
   16868:	ldr	r3, [fp, #-12]
   1686c:	add	r3, r3, #8
   16870:	str	r3, [fp, #-12]
   16874:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16878:	ldr	r2, [r3, #4]
   1687c:	ldr	r3, [fp, #-12]
   16880:	cmp	r2, r3
   16884:	bhi	167f4 <__assert_fail@plt+0x51d0>
   16888:	ldr	r3, [fp, #-8]
   1688c:	mov	r0, r3
   16890:	sub	sp, fp, #4
   16894:	pop	{fp, pc}
   16898:	push	{fp, lr}
   1689c:	add	fp, sp, #4
   168a0:	sub	sp, sp, #16
   168a4:	str	r0, [fp, #-16]
   168a8:	str	r1, [fp, #-20]	; 0xffffffec
   168ac:	mov	r3, #0
   168b0:	str	r3, [fp, #-8]
   168b4:	b	168f0 <__assert_fail@plt+0x52cc>
   168b8:	ldr	r2, [fp, #-8]
   168bc:	mov	r3, r2
   168c0:	lsl	r3, r3, #5
   168c4:	sub	r2, r3, r2
   168c8:	ldrb	r3, [fp, #-9]
   168cc:	add	r3, r2, r3
   168d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   168d4:	mov	r0, r3
   168d8:	bl	1ebb0 <__assert_fail@plt+0xd58c>
   168dc:	mov	r3, r1
   168e0:	str	r3, [fp, #-8]
   168e4:	ldr	r3, [fp, #-16]
   168e8:	add	r3, r3, #1
   168ec:	str	r3, [fp, #-16]
   168f0:	ldr	r3, [fp, #-16]
   168f4:	ldrb	r3, [r3]
   168f8:	strb	r3, [fp, #-9]
   168fc:	ldrb	r3, [fp, #-9]
   16900:	cmp	r3, #0
   16904:	bne	168b8 <__assert_fail@plt+0x5294>
   16908:	ldr	r3, [fp, #-8]
   1690c:	mov	r0, r3
   16910:	sub	sp, fp, #4
   16914:	pop	{fp, pc}
   16918:	push	{fp, lr}
   1691c:	add	fp, sp, #4
   16920:	sub	sp, sp, #16
   16924:	str	r0, [fp, #-16]
   16928:	mov	r3, #3
   1692c:	str	r3, [fp, #-8]
   16930:	ldr	r3, [fp, #-8]
   16934:	ldr	r2, [fp, #-8]
   16938:	mul	r3, r2, r3
   1693c:	str	r3, [fp, #-12]
   16940:	b	16970 <__assert_fail@plt+0x534c>
   16944:	ldr	r3, [fp, #-8]
   16948:	add	r3, r3, #1
   1694c:	str	r3, [fp, #-8]
   16950:	ldr	r3, [fp, #-8]
   16954:	lsl	r3, r3, #2
   16958:	ldr	r2, [fp, #-12]
   1695c:	add	r3, r2, r3
   16960:	str	r3, [fp, #-12]
   16964:	ldr	r3, [fp, #-8]
   16968:	add	r3, r3, #1
   1696c:	str	r3, [fp, #-8]
   16970:	ldr	r2, [fp, #-12]
   16974:	ldr	r3, [fp, #-16]
   16978:	cmp	r2, r3
   1697c:	bcs	1699c <__assert_fail@plt+0x5378>
   16980:	ldr	r3, [fp, #-16]
   16984:	ldr	r1, [fp, #-8]
   16988:	mov	r0, r3
   1698c:	bl	1ebb0 <__assert_fail@plt+0xd58c>
   16990:	mov	r3, r1
   16994:	cmp	r3, #0
   16998:	bne	16944 <__assert_fail@plt+0x5320>
   1699c:	ldr	r3, [fp, #-16]
   169a0:	ldr	r1, [fp, #-8]
   169a4:	mov	r0, r3
   169a8:	bl	1ebb0 <__assert_fail@plt+0xd58c>
   169ac:	mov	r3, r1
   169b0:	cmp	r3, #0
   169b4:	movne	r3, #1
   169b8:	moveq	r3, #0
   169bc:	uxtb	r3, r3
   169c0:	mov	r0, r3
   169c4:	sub	sp, fp, #4
   169c8:	pop	{fp, pc}
   169cc:	push	{fp, lr}
   169d0:	add	fp, sp, #4
   169d4:	sub	sp, sp, #8
   169d8:	str	r0, [fp, #-8]
   169dc:	ldr	r3, [fp, #-8]
   169e0:	cmp	r3, #9
   169e4:	bhi	169f0 <__assert_fail@plt+0x53cc>
   169e8:	mov	r3, #10
   169ec:	str	r3, [fp, #-8]
   169f0:	ldr	r3, [fp, #-8]
   169f4:	orr	r3, r3, #1
   169f8:	str	r3, [fp, #-8]
   169fc:	b	16a0c <__assert_fail@plt+0x53e8>
   16a00:	ldr	r3, [fp, #-8]
   16a04:	add	r3, r3, #2
   16a08:	str	r3, [fp, #-8]
   16a0c:	ldr	r3, [fp, #-8]
   16a10:	cmn	r3, #1
   16a14:	beq	16a34 <__assert_fail@plt+0x5410>
   16a18:	ldr	r0, [fp, #-8]
   16a1c:	bl	16918 <__assert_fail@plt+0x52f4>
   16a20:	mov	r3, r0
   16a24:	eor	r3, r3, #1
   16a28:	uxtb	r3, r3
   16a2c:	cmp	r3, #0
   16a30:	bne	16a00 <__assert_fail@plt+0x53dc>
   16a34:	ldr	r3, [fp, #-8]
   16a38:	mov	r0, r3
   16a3c:	sub	sp, fp, #4
   16a40:	pop	{fp, pc}
   16a44:	push	{fp, lr}
   16a48:	add	fp, sp, #4
   16a4c:	sub	sp, sp, #8
   16a50:	str	r0, [fp, #-8]
   16a54:	ldr	r3, [fp, #-8]
   16a58:	ldr	r2, [pc, #32]	; 16a80 <__assert_fail@plt+0x545c>
   16a5c:	mov	ip, r3
   16a60:	mov	lr, r2
   16a64:	ldm	lr!, {r0, r1, r2, r3}
   16a68:	stmia	ip!, {r0, r1, r2, r3}
   16a6c:	ldr	r3, [lr]
   16a70:	str	r3, [ip]
   16a74:	nop			; (mov r0, r0)
   16a78:	sub	sp, fp, #4
   16a7c:	pop	{fp, pc}
   16a80:	strdeq	pc, [r1], -r8
   16a84:	push	{fp, lr}
   16a88:	add	fp, sp, #4
   16a8c:	sub	sp, sp, #16
   16a90:	str	r0, [fp, #-16]
   16a94:	str	r1, [fp, #-20]	; 0xffffffec
   16a98:	ldr	r3, [fp, #-16]
   16a9c:	mov	r1, #3
   16aa0:	mov	r0, r3
   16aa4:	bl	1cd50 <__assert_fail@plt+0xb72c>
   16aa8:	str	r0, [fp, #-8]
   16aac:	ldr	r3, [fp, #-8]
   16ab0:	ldr	r1, [fp, #-20]	; 0xffffffec
   16ab4:	mov	r0, r3
   16ab8:	bl	1ebb0 <__assert_fail@plt+0xd58c>
   16abc:	mov	r3, r1
   16ac0:	mov	r0, r3
   16ac4:	sub	sp, fp, #4
   16ac8:	pop	{fp, pc}
   16acc:	push	{fp}		; (str fp, [sp, #-4]!)
   16ad0:	add	fp, sp, #0
   16ad4:	sub	sp, sp, #12
   16ad8:	str	r0, [fp, #-8]
   16adc:	str	r1, [fp, #-12]
   16ae0:	ldr	r2, [fp, #-8]
   16ae4:	ldr	r3, [fp, #-12]
   16ae8:	cmp	r2, r3
   16aec:	moveq	r3, #1
   16af0:	movne	r3, #0
   16af4:	uxtb	r3, r3
   16af8:	mov	r0, r3
   16afc:	add	sp, fp, #0
   16b00:	pop	{fp}		; (ldr fp, [sp], #4)
   16b04:	bx	lr
   16b08:	push	{fp}		; (str fp, [sp, #-4]!)
   16b0c:	add	fp, sp, #0
   16b10:	sub	sp, sp, #20
   16b14:	str	r0, [fp, #-16]
   16b18:	ldr	r3, [fp, #-16]
   16b1c:	ldr	r3, [r3, #20]
   16b20:	str	r3, [fp, #-8]
   16b24:	ldr	r3, [fp, #-8]
   16b28:	ldr	r2, [pc, #268]	; 16c3c <__assert_fail@plt+0x5618>
   16b2c:	cmp	r3, r2
   16b30:	bne	16b3c <__assert_fail@plt+0x5518>
   16b34:	mov	r3, #1
   16b38:	b	16c28 <__assert_fail@plt+0x5604>
   16b3c:	ldr	r3, [pc, #252]	; 16c40 <__assert_fail@plt+0x561c>
   16b40:	str	r3, [fp, #-12]
   16b44:	ldr	r3, [fp, #-8]
   16b48:	vldr	s14, [r3, #8]
   16b4c:	vldr	s15, [fp, #-12]
   16b50:	vcmpe.f32	s14, s15
   16b54:	vmrs	APSR_nzcv, fpscr
   16b58:	ble	16c18 <__assert_fail@plt+0x55f4>
   16b5c:	ldr	r3, [fp, #-8]
   16b60:	vldr	s14, [r3, #8]
   16b64:	vldr	s13, [pc, #204]	; 16c38 <__assert_fail@plt+0x5614>
   16b68:	vldr	s15, [fp, #-12]
   16b6c:	vsub.f32	s15, s13, s15
   16b70:	vcmpe.f32	s14, s15
   16b74:	vmrs	APSR_nzcv, fpscr
   16b78:	bpl	16c18 <__assert_fail@plt+0x55f4>
   16b7c:	vldr	s15, [fp, #-12]
   16b80:	vldr	s14, [pc, #176]	; 16c38 <__assert_fail@plt+0x5614>
   16b84:	vadd.f32	s14, s15, s14
   16b88:	ldr	r3, [fp, #-8]
   16b8c:	vldr	s15, [r3, #12]
   16b90:	vcmpe.f32	s14, s15
   16b94:	vmrs	APSR_nzcv, fpscr
   16b98:	bpl	16c18 <__assert_fail@plt+0x55f4>
   16b9c:	ldr	r3, [fp, #-8]
   16ba0:	vldr	s15, [r3]
   16ba4:	vcmpe.f32	s15, #0.0
   16ba8:	vmrs	APSR_nzcv, fpscr
   16bac:	blt	16c18 <__assert_fail@plt+0x55f4>
   16bb0:	ldr	r3, [fp, #-8]
   16bb4:	vldr	s14, [r3]
   16bb8:	vldr	s15, [fp, #-12]
   16bbc:	vadd.f32	s14, s14, s15
   16bc0:	ldr	r3, [fp, #-8]
   16bc4:	vldr	s15, [r3, #4]
   16bc8:	vcmpe.f32	s14, s15
   16bcc:	vmrs	APSR_nzcv, fpscr
   16bd0:	bpl	16c18 <__assert_fail@plt+0x55f4>
   16bd4:	ldr	r3, [fp, #-8]
   16bd8:	vldr	s15, [r3, #4]
   16bdc:	vldr	s14, [pc, #84]	; 16c38 <__assert_fail@plt+0x5614>
   16be0:	vcmpe.f32	s15, s14
   16be4:	vmrs	APSR_nzcv, fpscr
   16be8:	bhi	16c18 <__assert_fail@plt+0x55f4>
   16bec:	ldr	r3, [fp, #-8]
   16bf0:	vldr	s14, [r3]
   16bf4:	vldr	s15, [fp, #-12]
   16bf8:	vadd.f32	s14, s14, s15
   16bfc:	ldr	r3, [fp, #-8]
   16c00:	vldr	s15, [r3, #8]
   16c04:	vcmpe.f32	s14, s15
   16c08:	vmrs	APSR_nzcv, fpscr
   16c0c:	bpl	16c18 <__assert_fail@plt+0x55f4>
   16c10:	mov	r3, #1
   16c14:	b	16c28 <__assert_fail@plt+0x5604>
   16c18:	ldr	r3, [fp, #-16]
   16c1c:	ldr	r2, [pc, #24]	; 16c3c <__assert_fail@plt+0x5618>
   16c20:	str	r2, [r3, #20]
   16c24:	mov	r3, #0
   16c28:	mov	r0, r3
   16c2c:	add	sp, fp, #0
   16c30:	pop	{fp}		; (ldr fp, [sp], #4)
   16c34:	bx	lr
   16c38:	svccc	0x00800000
   16c3c:	strdeq	pc, [r1], -r8
   16c40:	stclcc	12, cr12, [ip, #820]	; 0x334
   16c44:	push	{r4, r5, r6, r7, fp, lr}
   16c48:	add	fp, sp, #20
   16c4c:	sub	sp, sp, #16
   16c50:	str	r0, [fp, #-32]	; 0xffffffe0
   16c54:	str	r1, [fp, #-36]	; 0xffffffdc
   16c58:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16c5c:	ldrb	r3, [r3, #16]
   16c60:	eor	r3, r3, #1
   16c64:	uxtb	r3, r3
   16c68:	cmp	r3, #0
   16c6c:	beq	16cb8 <__assert_fail@plt+0x5694>
   16c70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16c74:	vmov	s15, r3
   16c78:	vcvt.f32.u32	s13, s15
   16c7c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16c80:	vldr	s14, [r3, #8]
   16c84:	vdiv.f32	s15, s13, s14
   16c88:	vstr	s15, [fp, #-24]	; 0xffffffe8
   16c8c:	vldr	s15, [fp, #-24]	; 0xffffffe8
   16c90:	vldr	s14, [pc, #156]	; 16d34 <__assert_fail@plt+0x5710>
   16c94:	vcmpe.f32	s15, s14
   16c98:	vmrs	APSR_nzcv, fpscr
   16c9c:	blt	16ca8 <__assert_fail@plt+0x5684>
   16ca0:	mov	r3, #0
   16ca4:	b	16d28 <__assert_fail@plt+0x5704>
   16ca8:	vldr	s15, [fp, #-24]	; 0xffffffe8
   16cac:	vcvt.u32.f32	s15, s15
   16cb0:	vmov	r3, s15
   16cb4:	str	r3, [fp, #-32]	; 0xffffffe0
   16cb8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16cbc:	bl	169cc <__assert_fail@plt+0x53a8>
   16cc0:	str	r0, [fp, #-32]	; 0xffffffe0
   16cc4:	mov	r1, #0
   16cc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ccc:	mov	r2, r3
   16cd0:	mov	r3, #0
   16cd4:	lsl	r5, r3, #2
   16cd8:	orr	r5, r5, r2, lsr #30
   16cdc:	lsl	r4, r2, #2
   16ce0:	mov	r6, r5
   16ce4:	mov	r7, #0
   16ce8:	cmp	r6, #0
   16cec:	beq	16cf4 <__assert_fail@plt+0x56d0>
   16cf0:	mov	r1, #1
   16cf4:	cmp	r4, #0
   16cf8:	bge	16d00 <__assert_fail@plt+0x56dc>
   16cfc:	mov	r1, #1
   16d00:	mov	r3, r4
   16d04:	str	r3, [fp, #-28]	; 0xffffffe4
   16d08:	mov	r3, r1
   16d0c:	and	r3, r3, #1
   16d10:	uxtb	r3, r3
   16d14:	cmp	r3, #0
   16d18:	beq	16d24 <__assert_fail@plt+0x5700>
   16d1c:	mov	r3, #0
   16d20:	b	16d28 <__assert_fail@plt+0x5704>
   16d24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d28:	mov	r0, r3
   16d2c:	sub	sp, fp, #20
   16d30:	pop	{r4, r5, r6, r7, fp, pc}
   16d34:	svcmi	0x00800000
   16d38:	push	{fp, lr}
   16d3c:	add	fp, sp, #4
   16d40:	sub	sp, sp, #24
   16d44:	str	r0, [fp, #-16]
   16d48:	str	r1, [fp, #-20]	; 0xffffffec
   16d4c:	str	r2, [fp, #-24]	; 0xffffffe8
   16d50:	str	r3, [fp, #-28]	; 0xffffffe4
   16d54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d58:	cmp	r3, #0
   16d5c:	bne	16d68 <__assert_fail@plt+0x5744>
   16d60:	ldr	r3, [pc, #364]	; 16ed4 <__assert_fail@plt+0x58b0>
   16d64:	str	r3, [fp, #-24]	; 0xffffffe8
   16d68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d6c:	cmp	r3, #0
   16d70:	bne	16d7c <__assert_fail@plt+0x5758>
   16d74:	ldr	r3, [pc, #348]	; 16ed8 <__assert_fail@plt+0x58b4>
   16d78:	str	r3, [fp, #-28]	; 0xffffffe4
   16d7c:	mov	r0, #40	; 0x28
   16d80:	bl	1c8d0 <__assert_fail@plt+0xb2ac>
   16d84:	mov	r3, r0
   16d88:	str	r3, [fp, #-8]
   16d8c:	ldr	r3, [fp, #-8]
   16d90:	cmp	r3, #0
   16d94:	bne	16da0 <__assert_fail@plt+0x577c>
   16d98:	mov	r3, #0
   16d9c:	b	16ec8 <__assert_fail@plt+0x58a4>
   16da0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16da4:	cmp	r3, #0
   16da8:	bne	16db4 <__assert_fail@plt+0x5790>
   16dac:	ldr	r3, [pc, #296]	; 16edc <__assert_fail@plt+0x58b8>
   16db0:	str	r3, [fp, #-20]	; 0xffffffec
   16db4:	ldr	r3, [fp, #-8]
   16db8:	ldr	r2, [fp, #-20]	; 0xffffffec
   16dbc:	str	r2, [r3, #20]
   16dc0:	ldr	r0, [fp, #-8]
   16dc4:	bl	16b08 <__assert_fail@plt+0x54e4>
   16dc8:	mov	r3, r0
   16dcc:	eor	r3, r3, #1
   16dd0:	uxtb	r3, r3
   16dd4:	cmp	r3, #0
   16dd8:	bne	16ea8 <__assert_fail@plt+0x5884>
   16ddc:	ldr	r1, [fp, #-20]	; 0xffffffec
   16de0:	ldr	r0, [fp, #-16]
   16de4:	bl	16c44 <__assert_fail@plt+0x5620>
   16de8:	mov	r2, r0
   16dec:	ldr	r3, [fp, #-8]
   16df0:	str	r2, [r3, #8]
   16df4:	ldr	r3, [fp, #-8]
   16df8:	ldr	r3, [r3, #8]
   16dfc:	cmp	r3, #0
   16e00:	beq	16eb0 <__assert_fail@plt+0x588c>
   16e04:	ldr	r3, [fp, #-8]
   16e08:	ldr	r3, [r3, #8]
   16e0c:	mov	r1, #8
   16e10:	mov	r0, r3
   16e14:	bl	1c80c <__assert_fail@plt+0xb1e8>
   16e18:	mov	r3, r0
   16e1c:	mov	r2, r3
   16e20:	ldr	r3, [fp, #-8]
   16e24:	str	r2, [r3]
   16e28:	ldr	r3, [fp, #-8]
   16e2c:	ldr	r3, [r3]
   16e30:	cmp	r3, #0
   16e34:	beq	16eb8 <__assert_fail@plt+0x5894>
   16e38:	ldr	r3, [fp, #-8]
   16e3c:	ldr	r2, [r3]
   16e40:	ldr	r3, [fp, #-8]
   16e44:	ldr	r3, [r3, #8]
   16e48:	lsl	r3, r3, #3
   16e4c:	add	r2, r2, r3
   16e50:	ldr	r3, [fp, #-8]
   16e54:	str	r2, [r3, #4]
   16e58:	ldr	r3, [fp, #-8]
   16e5c:	mov	r2, #0
   16e60:	str	r2, [r3, #12]
   16e64:	ldr	r3, [fp, #-8]
   16e68:	mov	r2, #0
   16e6c:	str	r2, [r3, #16]
   16e70:	ldr	r3, [fp, #-8]
   16e74:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16e78:	str	r2, [r3, #24]
   16e7c:	ldr	r3, [fp, #-8]
   16e80:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16e84:	str	r2, [r3, #28]
   16e88:	ldr	r3, [fp, #-8]
   16e8c:	ldr	r2, [fp, #4]
   16e90:	str	r2, [r3, #32]
   16e94:	ldr	r3, [fp, #-8]
   16e98:	mov	r2, #0
   16e9c:	str	r2, [r3, #36]	; 0x24
   16ea0:	ldr	r3, [fp, #-8]
   16ea4:	b	16ec8 <__assert_fail@plt+0x58a4>
   16ea8:	nop			; (mov r0, r0)
   16eac:	b	16ebc <__assert_fail@plt+0x5898>
   16eb0:	nop			; (mov r0, r0)
   16eb4:	b	16ebc <__assert_fail@plt+0x5898>
   16eb8:	nop			; (mov r0, r0)
   16ebc:	ldr	r0, [fp, #-8]
   16ec0:	bl	1d784 <__assert_fail@plt+0xc160>
   16ec4:	mov	r3, #0
   16ec8:	mov	r0, r3
   16ecc:	sub	sp, fp, #4
   16ed0:	pop	{fp, pc}
   16ed4:	andeq	r6, r1, r4, lsl #21
   16ed8:	andeq	r6, r1, ip, asr #21
   16edc:	strdeq	pc, [r1], -r8
   16ee0:	push	{fp, lr}
   16ee4:	add	fp, sp, #4
   16ee8:	sub	sp, sp, #24
   16eec:	str	r0, [fp, #-24]	; 0xffffffe8
   16ef0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ef4:	ldr	r3, [r3]
   16ef8:	str	r3, [fp, #-8]
   16efc:	b	16fdc <__assert_fail@plt+0x59b8>
   16f00:	ldr	r3, [fp, #-8]
   16f04:	ldr	r3, [r3]
   16f08:	cmp	r3, #0
   16f0c:	beq	16fd0 <__assert_fail@plt+0x59ac>
   16f10:	ldr	r3, [fp, #-8]
   16f14:	ldr	r3, [r3, #4]
   16f18:	str	r3, [fp, #-12]
   16f1c:	b	16f84 <__assert_fail@plt+0x5960>
   16f20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f24:	ldr	r3, [r3, #32]
   16f28:	cmp	r3, #0
   16f2c:	beq	16f48 <__assert_fail@plt+0x5924>
   16f30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f34:	ldr	r3, [r3, #32]
   16f38:	ldr	r2, [fp, #-12]
   16f3c:	ldr	r2, [r2]
   16f40:	mov	r0, r2
   16f44:	blx	r3
   16f48:	ldr	r3, [fp, #-12]
   16f4c:	mov	r2, #0
   16f50:	str	r2, [r3]
   16f54:	ldr	r3, [fp, #-12]
   16f58:	ldr	r3, [r3, #4]
   16f5c:	str	r3, [fp, #-16]
   16f60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f64:	ldr	r2, [r3, #36]	; 0x24
   16f68:	ldr	r3, [fp, #-12]
   16f6c:	str	r2, [r3, #4]
   16f70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f74:	ldr	r2, [fp, #-12]
   16f78:	str	r2, [r3, #36]	; 0x24
   16f7c:	ldr	r3, [fp, #-16]
   16f80:	str	r3, [fp, #-12]
   16f84:	ldr	r3, [fp, #-12]
   16f88:	cmp	r3, #0
   16f8c:	bne	16f20 <__assert_fail@plt+0x58fc>
   16f90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f94:	ldr	r3, [r3, #32]
   16f98:	cmp	r3, #0
   16f9c:	beq	16fb8 <__assert_fail@plt+0x5994>
   16fa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16fa4:	ldr	r3, [r3, #32]
   16fa8:	ldr	r2, [fp, #-8]
   16fac:	ldr	r2, [r2]
   16fb0:	mov	r0, r2
   16fb4:	blx	r3
   16fb8:	ldr	r3, [fp, #-8]
   16fbc:	mov	r2, #0
   16fc0:	str	r2, [r3]
   16fc4:	ldr	r3, [fp, #-8]
   16fc8:	mov	r2, #0
   16fcc:	str	r2, [r3, #4]
   16fd0:	ldr	r3, [fp, #-8]
   16fd4:	add	r3, r3, #8
   16fd8:	str	r3, [fp, #-8]
   16fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16fe0:	ldr	r2, [r3, #4]
   16fe4:	ldr	r3, [fp, #-8]
   16fe8:	cmp	r2, r3
   16fec:	bhi	16f00 <__assert_fail@plt+0x58dc>
   16ff0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ff4:	mov	r2, #0
   16ff8:	str	r2, [r3, #12]
   16ffc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17000:	mov	r2, #0
   17004:	str	r2, [r3, #16]
   17008:	nop			; (mov r0, r0)
   1700c:	sub	sp, fp, #4
   17010:	pop	{fp, pc}
   17014:	push	{fp, lr}
   17018:	add	fp, sp, #4
   1701c:	sub	sp, sp, #24
   17020:	str	r0, [fp, #-24]	; 0xffffffe8
   17024:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17028:	ldr	r3, [r3, #32]
   1702c:	cmp	r3, #0
   17030:	beq	170c0 <__assert_fail@plt+0x5a9c>
   17034:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17038:	ldr	r3, [r3, #16]
   1703c:	cmp	r3, #0
   17040:	beq	170c0 <__assert_fail@plt+0x5a9c>
   17044:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17048:	ldr	r3, [r3]
   1704c:	str	r3, [fp, #-8]
   17050:	b	170ac <__assert_fail@plt+0x5a88>
   17054:	ldr	r3, [fp, #-8]
   17058:	ldr	r3, [r3]
   1705c:	cmp	r3, #0
   17060:	beq	170a0 <__assert_fail@plt+0x5a7c>
   17064:	ldr	r3, [fp, #-8]
   17068:	str	r3, [fp, #-12]
   1706c:	b	17094 <__assert_fail@plt+0x5a70>
   17070:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17074:	ldr	r3, [r3, #32]
   17078:	ldr	r2, [fp, #-12]
   1707c:	ldr	r2, [r2]
   17080:	mov	r0, r2
   17084:	blx	r3
   17088:	ldr	r3, [fp, #-12]
   1708c:	ldr	r3, [r3, #4]
   17090:	str	r3, [fp, #-12]
   17094:	ldr	r3, [fp, #-12]
   17098:	cmp	r3, #0
   1709c:	bne	17070 <__assert_fail@plt+0x5a4c>
   170a0:	ldr	r3, [fp, #-8]
   170a4:	add	r3, r3, #8
   170a8:	str	r3, [fp, #-8]
   170ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   170b0:	ldr	r2, [r3, #4]
   170b4:	ldr	r3, [fp, #-8]
   170b8:	cmp	r2, r3
   170bc:	bhi	17054 <__assert_fail@plt+0x5a30>
   170c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   170c4:	ldr	r3, [r3]
   170c8:	str	r3, [fp, #-8]
   170cc:	b	17114 <__assert_fail@plt+0x5af0>
   170d0:	ldr	r3, [fp, #-8]
   170d4:	ldr	r3, [r3, #4]
   170d8:	str	r3, [fp, #-12]
   170dc:	b	170fc <__assert_fail@plt+0x5ad8>
   170e0:	ldr	r3, [fp, #-12]
   170e4:	ldr	r3, [r3, #4]
   170e8:	str	r3, [fp, #-16]
   170ec:	ldr	r0, [fp, #-12]
   170f0:	bl	1d784 <__assert_fail@plt+0xc160>
   170f4:	ldr	r3, [fp, #-16]
   170f8:	str	r3, [fp, #-12]
   170fc:	ldr	r3, [fp, #-12]
   17100:	cmp	r3, #0
   17104:	bne	170e0 <__assert_fail@plt+0x5abc>
   17108:	ldr	r3, [fp, #-8]
   1710c:	add	r3, r3, #8
   17110:	str	r3, [fp, #-8]
   17114:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17118:	ldr	r2, [r3, #4]
   1711c:	ldr	r3, [fp, #-8]
   17120:	cmp	r2, r3
   17124:	bhi	170d0 <__assert_fail@plt+0x5aac>
   17128:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1712c:	ldr	r3, [r3, #36]	; 0x24
   17130:	str	r3, [fp, #-12]
   17134:	b	17154 <__assert_fail@plt+0x5b30>
   17138:	ldr	r3, [fp, #-12]
   1713c:	ldr	r3, [r3, #4]
   17140:	str	r3, [fp, #-16]
   17144:	ldr	r0, [fp, #-12]
   17148:	bl	1d784 <__assert_fail@plt+0xc160>
   1714c:	ldr	r3, [fp, #-16]
   17150:	str	r3, [fp, #-12]
   17154:	ldr	r3, [fp, #-12]
   17158:	cmp	r3, #0
   1715c:	bne	17138 <__assert_fail@plt+0x5b14>
   17160:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17164:	ldr	r3, [r3]
   17168:	mov	r0, r3
   1716c:	bl	1d784 <__assert_fail@plt+0xc160>
   17170:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17174:	bl	1d784 <__assert_fail@plt+0xc160>
   17178:	nop			; (mov r0, r0)
   1717c:	sub	sp, fp, #4
   17180:	pop	{fp, pc}
   17184:	push	{fp, lr}
   17188:	add	fp, sp, #4
   1718c:	sub	sp, sp, #16
   17190:	str	r0, [fp, #-16]
   17194:	ldr	r3, [fp, #-16]
   17198:	ldr	r3, [r3, #36]	; 0x24
   1719c:	cmp	r3, #0
   171a0:	beq	171c4 <__assert_fail@plt+0x5ba0>
   171a4:	ldr	r3, [fp, #-16]
   171a8:	ldr	r3, [r3, #36]	; 0x24
   171ac:	str	r3, [fp, #-8]
   171b0:	ldr	r3, [fp, #-8]
   171b4:	ldr	r2, [r3, #4]
   171b8:	ldr	r3, [fp, #-16]
   171bc:	str	r2, [r3, #36]	; 0x24
   171c0:	b	171d4 <__assert_fail@plt+0x5bb0>
   171c4:	mov	r0, #8
   171c8:	bl	1c8d0 <__assert_fail@plt+0xb2ac>
   171cc:	mov	r3, r0
   171d0:	str	r3, [fp, #-8]
   171d4:	ldr	r3, [fp, #-8]
   171d8:	mov	r0, r3
   171dc:	sub	sp, fp, #4
   171e0:	pop	{fp, pc}
   171e4:	push	{fp}		; (str fp, [sp, #-4]!)
   171e8:	add	fp, sp, #0
   171ec:	sub	sp, sp, #12
   171f0:	str	r0, [fp, #-8]
   171f4:	str	r1, [fp, #-12]
   171f8:	ldr	r3, [fp, #-12]
   171fc:	mov	r2, #0
   17200:	str	r2, [r3]
   17204:	ldr	r3, [fp, #-8]
   17208:	ldr	r2, [r3, #36]	; 0x24
   1720c:	ldr	r3, [fp, #-12]
   17210:	str	r2, [r3, #4]
   17214:	ldr	r3, [fp, #-8]
   17218:	ldr	r2, [fp, #-12]
   1721c:	str	r2, [r3, #36]	; 0x24
   17220:	nop			; (mov r0, r0)
   17224:	add	sp, fp, #0
   17228:	pop	{fp}		; (ldr fp, [sp], #4)
   1722c:	bx	lr
   17230:	push	{fp, lr}
   17234:	add	fp, sp, #4
   17238:	sub	sp, sp, #40	; 0x28
   1723c:	str	r0, [fp, #-32]	; 0xffffffe0
   17240:	str	r1, [fp, #-36]	; 0xffffffdc
   17244:	str	r2, [fp, #-40]	; 0xffffffd8
   17248:	strb	r3, [fp, #-41]	; 0xffffffd7
   1724c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17250:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17254:	bl	16480 <__assert_fail@plt+0x4e5c>
   17258:	str	r0, [fp, #-12]
   1725c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17260:	ldr	r2, [fp, #-12]
   17264:	str	r2, [r3]
   17268:	ldr	r3, [fp, #-12]
   1726c:	ldr	r3, [r3]
   17270:	cmp	r3, #0
   17274:	bne	17280 <__assert_fail@plt+0x5c5c>
   17278:	mov	r3, #0
   1727c:	b	173e0 <__assert_fail@plt+0x5dbc>
   17280:	ldr	r3, [fp, #-12]
   17284:	ldr	r2, [r3]
   17288:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1728c:	cmp	r2, r3
   17290:	beq	172bc <__assert_fail@plt+0x5c98>
   17294:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17298:	ldr	r3, [r3, #28]
   1729c:	ldr	r2, [fp, #-12]
   172a0:	ldr	r2, [r2]
   172a4:	mov	r1, r2
   172a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   172ac:	blx	r3
   172b0:	mov	r3, r0
   172b4:	cmp	r3, #0
   172b8:	beq	17324 <__assert_fail@plt+0x5d00>
   172bc:	ldr	r3, [fp, #-12]
   172c0:	ldr	r3, [r3]
   172c4:	str	r3, [fp, #-24]	; 0xffffffe8
   172c8:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   172cc:	cmp	r3, #0
   172d0:	beq	1731c <__assert_fail@plt+0x5cf8>
   172d4:	ldr	r3, [fp, #-12]
   172d8:	ldr	r3, [r3, #4]
   172dc:	cmp	r3, #0
   172e0:	beq	17310 <__assert_fail@plt+0x5cec>
   172e4:	ldr	r3, [fp, #-12]
   172e8:	ldr	r3, [r3, #4]
   172ec:	str	r3, [fp, #-28]	; 0xffffffe4
   172f0:	ldr	r3, [fp, #-12]
   172f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   172f8:	ldm	r2, {r0, r1}
   172fc:	stm	r3, {r0, r1}
   17300:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17304:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17308:	bl	171e4 <__assert_fail@plt+0x5bc0>
   1730c:	b	1731c <__assert_fail@plt+0x5cf8>
   17310:	ldr	r3, [fp, #-12]
   17314:	mov	r2, #0
   17318:	str	r2, [r3]
   1731c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17320:	b	173e0 <__assert_fail@plt+0x5dbc>
   17324:	ldr	r3, [fp, #-12]
   17328:	str	r3, [fp, #-8]
   1732c:	b	173cc <__assert_fail@plt+0x5da8>
   17330:	ldr	r3, [fp, #-8]
   17334:	ldr	r3, [r3, #4]
   17338:	ldr	r2, [r3]
   1733c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17340:	cmp	r2, r3
   17344:	beq	17374 <__assert_fail@plt+0x5d50>
   17348:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1734c:	ldr	r3, [r3, #28]
   17350:	ldr	r2, [fp, #-8]
   17354:	ldr	r2, [r2, #4]
   17358:	ldr	r2, [r2]
   1735c:	mov	r1, r2
   17360:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17364:	blx	r3
   17368:	mov	r3, r0
   1736c:	cmp	r3, #0
   17370:	beq	173c0 <__assert_fail@plt+0x5d9c>
   17374:	ldr	r3, [fp, #-8]
   17378:	ldr	r3, [r3, #4]
   1737c:	ldr	r3, [r3]
   17380:	str	r3, [fp, #-16]
   17384:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   17388:	cmp	r3, #0
   1738c:	beq	173b8 <__assert_fail@plt+0x5d94>
   17390:	ldr	r3, [fp, #-8]
   17394:	ldr	r3, [r3, #4]
   17398:	str	r3, [fp, #-20]	; 0xffffffec
   1739c:	ldr	r3, [fp, #-20]	; 0xffffffec
   173a0:	ldr	r2, [r3, #4]
   173a4:	ldr	r3, [fp, #-8]
   173a8:	str	r2, [r3, #4]
   173ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   173b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   173b4:	bl	171e4 <__assert_fail@plt+0x5bc0>
   173b8:	ldr	r3, [fp, #-16]
   173bc:	b	173e0 <__assert_fail@plt+0x5dbc>
   173c0:	ldr	r3, [fp, #-8]
   173c4:	ldr	r3, [r3, #4]
   173c8:	str	r3, [fp, #-8]
   173cc:	ldr	r3, [fp, #-8]
   173d0:	ldr	r3, [r3, #4]
   173d4:	cmp	r3, #0
   173d8:	bne	17330 <__assert_fail@plt+0x5d0c>
   173dc:	mov	r3, #0
   173e0:	mov	r0, r3
   173e4:	sub	sp, fp, #4
   173e8:	pop	{fp, pc}
   173ec:	push	{fp, lr}
   173f0:	add	fp, sp, #4
   173f4:	sub	sp, sp, #40	; 0x28
   173f8:	str	r0, [fp, #-32]	; 0xffffffe0
   173fc:	str	r1, [fp, #-36]	; 0xffffffdc
   17400:	mov	r3, r2
   17404:	strb	r3, [fp, #-37]	; 0xffffffdb
   17408:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1740c:	ldr	r3, [r3]
   17410:	str	r3, [fp, #-8]
   17414:	b	175b4 <__assert_fail@plt+0x5f90>
   17418:	ldr	r3, [fp, #-8]
   1741c:	ldr	r3, [r3]
   17420:	cmp	r3, #0
   17424:	beq	175a8 <__assert_fail@plt+0x5f84>
   17428:	ldr	r3, [fp, #-8]
   1742c:	ldr	r3, [r3, #4]
   17430:	str	r3, [fp, #-12]
   17434:	b	174c4 <__assert_fail@plt+0x5ea0>
   17438:	ldr	r3, [fp, #-12]
   1743c:	ldr	r3, [r3]
   17440:	str	r3, [fp, #-16]
   17444:	ldr	r1, [fp, #-16]
   17448:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1744c:	bl	16480 <__assert_fail@plt+0x4e5c>
   17450:	str	r0, [fp, #-20]	; 0xffffffec
   17454:	ldr	r3, [fp, #-12]
   17458:	ldr	r3, [r3, #4]
   1745c:	str	r3, [fp, #-24]	; 0xffffffe8
   17460:	ldr	r3, [fp, #-20]	; 0xffffffec
   17464:	ldr	r3, [r3]
   17468:	cmp	r3, #0
   1746c:	beq	17490 <__assert_fail@plt+0x5e6c>
   17470:	ldr	r3, [fp, #-20]	; 0xffffffec
   17474:	ldr	r2, [r3, #4]
   17478:	ldr	r3, [fp, #-12]
   1747c:	str	r2, [r3, #4]
   17480:	ldr	r3, [fp, #-20]	; 0xffffffec
   17484:	ldr	r2, [fp, #-12]
   17488:	str	r2, [r3, #4]
   1748c:	b	174bc <__assert_fail@plt+0x5e98>
   17490:	ldr	r3, [fp, #-20]	; 0xffffffec
   17494:	ldr	r2, [fp, #-16]
   17498:	str	r2, [r3]
   1749c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174a0:	ldr	r3, [r3, #12]
   174a4:	add	r2, r3, #1
   174a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174ac:	str	r2, [r3, #12]
   174b0:	ldr	r1, [fp, #-12]
   174b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   174b8:	bl	171e4 <__assert_fail@plt+0x5bc0>
   174bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174c0:	str	r3, [fp, #-12]
   174c4:	ldr	r3, [fp, #-12]
   174c8:	cmp	r3, #0
   174cc:	bne	17438 <__assert_fail@plt+0x5e14>
   174d0:	ldr	r3, [fp, #-8]
   174d4:	ldr	r3, [r3]
   174d8:	str	r3, [fp, #-16]
   174dc:	ldr	r3, [fp, #-8]
   174e0:	mov	r2, #0
   174e4:	str	r2, [r3, #4]
   174e8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   174ec:	cmp	r3, #0
   174f0:	bne	175a4 <__assert_fail@plt+0x5f80>
   174f4:	ldr	r1, [fp, #-16]
   174f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   174fc:	bl	16480 <__assert_fail@plt+0x4e5c>
   17500:	str	r0, [fp, #-20]	; 0xffffffec
   17504:	ldr	r3, [fp, #-20]	; 0xffffffec
   17508:	ldr	r3, [r3]
   1750c:	cmp	r3, #0
   17510:	beq	17560 <__assert_fail@plt+0x5f3c>
   17514:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17518:	bl	17184 <__assert_fail@plt+0x5b60>
   1751c:	str	r0, [fp, #-28]	; 0xffffffe4
   17520:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17524:	cmp	r3, #0
   17528:	bne	17534 <__assert_fail@plt+0x5f10>
   1752c:	mov	r3, #0
   17530:	b	175cc <__assert_fail@plt+0x5fa8>
   17534:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17538:	ldr	r2, [fp, #-16]
   1753c:	str	r2, [r3]
   17540:	ldr	r3, [fp, #-20]	; 0xffffffec
   17544:	ldr	r2, [r3, #4]
   17548:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1754c:	str	r2, [r3, #4]
   17550:	ldr	r3, [fp, #-20]	; 0xffffffec
   17554:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17558:	str	r2, [r3, #4]
   1755c:	b	17580 <__assert_fail@plt+0x5f5c>
   17560:	ldr	r3, [fp, #-20]	; 0xffffffec
   17564:	ldr	r2, [fp, #-16]
   17568:	str	r2, [r3]
   1756c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17570:	ldr	r3, [r3, #12]
   17574:	add	r2, r3, #1
   17578:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1757c:	str	r2, [r3, #12]
   17580:	ldr	r3, [fp, #-8]
   17584:	mov	r2, #0
   17588:	str	r2, [r3]
   1758c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17590:	ldr	r3, [r3, #12]
   17594:	sub	r2, r3, #1
   17598:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1759c:	str	r2, [r3, #12]
   175a0:	b	175a8 <__assert_fail@plt+0x5f84>
   175a4:	nop			; (mov r0, r0)
   175a8:	ldr	r3, [fp, #-8]
   175ac:	add	r3, r3, #8
   175b0:	str	r3, [fp, #-8]
   175b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   175b8:	ldr	r2, [r3, #4]
   175bc:	ldr	r3, [fp, #-8]
   175c0:	cmp	r2, r3
   175c4:	bhi	17418 <__assert_fail@plt+0x5df4>
   175c8:	mov	r3, #1
   175cc:	mov	r0, r3
   175d0:	sub	sp, fp, #4
   175d4:	pop	{fp, pc}
   175d8:	push	{fp, lr}
   175dc:	add	fp, sp, #4
   175e0:	sub	sp, sp, #56	; 0x38
   175e4:	str	r0, [fp, #-56]	; 0xffffffc8
   175e8:	str	r1, [fp, #-60]	; 0xffffffc4
   175ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   175f0:	ldr	r3, [r3, #20]
   175f4:	mov	r1, r3
   175f8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   175fc:	bl	16c44 <__assert_fail@plt+0x5620>
   17600:	str	r0, [fp, #-8]
   17604:	ldr	r3, [fp, #-8]
   17608:	cmp	r3, #0
   1760c:	bne	17618 <__assert_fail@plt+0x5ff4>
   17610:	mov	r3, #0
   17614:	b	177f4 <__assert_fail@plt+0x61d0>
   17618:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1761c:	ldr	r2, [r3, #8]
   17620:	ldr	r3, [fp, #-8]
   17624:	cmp	r2, r3
   17628:	bne	17634 <__assert_fail@plt+0x6010>
   1762c:	mov	r3, #1
   17630:	b	177f4 <__assert_fail@plt+0x61d0>
   17634:	sub	r3, fp, #52	; 0x34
   17638:	str	r3, [fp, #-12]
   1763c:	mov	r1, #8
   17640:	ldr	r0, [fp, #-8]
   17644:	bl	1c80c <__assert_fail@plt+0xb1e8>
   17648:	mov	r3, r0
   1764c:	mov	r2, r3
   17650:	ldr	r3, [fp, #-12]
   17654:	str	r2, [r3]
   17658:	ldr	r3, [fp, #-12]
   1765c:	ldr	r3, [r3]
   17660:	cmp	r3, #0
   17664:	bne	17670 <__assert_fail@plt+0x604c>
   17668:	mov	r3, #0
   1766c:	b	177f4 <__assert_fail@plt+0x61d0>
   17670:	ldr	r3, [fp, #-12]
   17674:	ldr	r2, [fp, #-8]
   17678:	str	r2, [r3, #8]
   1767c:	ldr	r3, [fp, #-12]
   17680:	ldr	r2, [r3]
   17684:	ldr	r3, [fp, #-8]
   17688:	lsl	r3, r3, #3
   1768c:	add	r2, r2, r3
   17690:	ldr	r3, [fp, #-12]
   17694:	str	r2, [r3, #4]
   17698:	ldr	r3, [fp, #-12]
   1769c:	mov	r2, #0
   176a0:	str	r2, [r3, #12]
   176a4:	ldr	r3, [fp, #-12]
   176a8:	mov	r2, #0
   176ac:	str	r2, [r3, #16]
   176b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   176b4:	ldr	r2, [r3, #20]
   176b8:	ldr	r3, [fp, #-12]
   176bc:	str	r2, [r3, #20]
   176c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   176c4:	ldr	r2, [r3, #24]
   176c8:	ldr	r3, [fp, #-12]
   176cc:	str	r2, [r3, #24]
   176d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   176d4:	ldr	r2, [r3, #28]
   176d8:	ldr	r3, [fp, #-12]
   176dc:	str	r2, [r3, #28]
   176e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   176e4:	ldr	r2, [r3, #32]
   176e8:	ldr	r3, [fp, #-12]
   176ec:	str	r2, [r3, #32]
   176f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   176f4:	ldr	r2, [r3, #36]	; 0x24
   176f8:	ldr	r3, [fp, #-12]
   176fc:	str	r2, [r3, #36]	; 0x24
   17700:	mov	r2, #0
   17704:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17708:	ldr	r0, [fp, #-12]
   1770c:	bl	173ec <__assert_fail@plt+0x5dc8>
   17710:	mov	r3, r0
   17714:	cmp	r3, #0
   17718:	beq	17784 <__assert_fail@plt+0x6160>
   1771c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17720:	ldr	r3, [r3]
   17724:	mov	r0, r3
   17728:	bl	1d784 <__assert_fail@plt+0xc160>
   1772c:	ldr	r3, [fp, #-12]
   17730:	ldr	r2, [r3]
   17734:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17738:	str	r2, [r3]
   1773c:	ldr	r3, [fp, #-12]
   17740:	ldr	r2, [r3, #4]
   17744:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17748:	str	r2, [r3, #4]
   1774c:	ldr	r3, [fp, #-12]
   17750:	ldr	r2, [r3, #8]
   17754:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17758:	str	r2, [r3, #8]
   1775c:	ldr	r3, [fp, #-12]
   17760:	ldr	r2, [r3, #12]
   17764:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17768:	str	r2, [r3, #12]
   1776c:	ldr	r3, [fp, #-12]
   17770:	ldr	r2, [r3, #36]	; 0x24
   17774:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17778:	str	r2, [r3, #36]	; 0x24
   1777c:	mov	r3, #1
   17780:	b	177f4 <__assert_fail@plt+0x61d0>
   17784:	ldr	r3, [fp, #-12]
   17788:	ldr	r2, [r3, #36]	; 0x24
   1778c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17790:	str	r2, [r3, #36]	; 0x24
   17794:	mov	r2, #1
   17798:	ldr	r1, [fp, #-12]
   1779c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   177a0:	bl	173ec <__assert_fail@plt+0x5dc8>
   177a4:	mov	r3, r0
   177a8:	eor	r3, r3, #1
   177ac:	uxtb	r3, r3
   177b0:	cmp	r3, #0
   177b4:	bne	177dc <__assert_fail@plt+0x61b8>
   177b8:	mov	r2, #0
   177bc:	ldr	r1, [fp, #-12]
   177c0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   177c4:	bl	173ec <__assert_fail@plt+0x5dc8>
   177c8:	mov	r3, r0
   177cc:	eor	r3, r3, #1
   177d0:	uxtb	r3, r3
   177d4:	cmp	r3, #0
   177d8:	beq	177e0 <__assert_fail@plt+0x61bc>
   177dc:	bl	115e8 <abort@plt>
   177e0:	ldr	r3, [fp, #-12]
   177e4:	ldr	r3, [r3]
   177e8:	mov	r0, r3
   177ec:	bl	1d784 <__assert_fail@plt+0xc160>
   177f0:	mov	r3, #0
   177f4:	mov	r0, r3
   177f8:	sub	sp, fp, #4
   177fc:	pop	{fp, pc}
   17800:	push	{fp, lr}
   17804:	add	fp, sp, #4
   17808:	sub	sp, sp, #40	; 0x28
   1780c:	str	r0, [fp, #-32]	; 0xffffffe0
   17810:	str	r1, [fp, #-36]	; 0xffffffdc
   17814:	str	r2, [fp, #-40]	; 0xffffffd8
   17818:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1781c:	cmp	r3, #0
   17820:	bne	17828 <__assert_fail@plt+0x6204>
   17824:	bl	115e8 <abort@plt>
   17828:	sub	r2, fp, #24
   1782c:	mov	r3, #0
   17830:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17834:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17838:	bl	17230 <__assert_fail@plt+0x5c0c>
   1783c:	str	r0, [fp, #-8]
   17840:	ldr	r3, [fp, #-8]
   17844:	cmp	r3, #0
   17848:	beq	1786c <__assert_fail@plt+0x6248>
   1784c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17850:	cmp	r3, #0
   17854:	beq	17864 <__assert_fail@plt+0x6240>
   17858:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1785c:	ldr	r2, [fp, #-8]
   17860:	str	r2, [r3]
   17864:	mov	r3, #0
   17868:	b	17a70 <__assert_fail@plt+0x644c>
   1786c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17870:	ldr	r3, [r3, #12]
   17874:	vmov	s15, r3
   17878:	vcvt.f32.u32	s14, s15
   1787c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17880:	ldr	r3, [r3, #20]
   17884:	vldr	s13, [r3, #8]
   17888:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1788c:	ldr	r3, [r3, #8]
   17890:	vmov	s15, r3
   17894:	vcvt.f32.u32	s15, s15
   17898:	vmul.f32	s15, s13, s15
   1789c:	vcmpe.f32	s14, s15
   178a0:	vmrs	APSR_nzcv, fpscr
   178a4:	ble	179c4 <__assert_fail@plt+0x63a0>
   178a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   178ac:	bl	16b08 <__assert_fail@plt+0x54e4>
   178b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178b4:	ldr	r3, [r3, #12]
   178b8:	vmov	s15, r3
   178bc:	vcvt.f32.u32	s14, s15
   178c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178c4:	ldr	r3, [r3, #20]
   178c8:	vldr	s13, [r3, #8]
   178cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178d0:	ldr	r3, [r3, #8]
   178d4:	vmov	s15, r3
   178d8:	vcvt.f32.u32	s15, s15
   178dc:	vmul.f32	s15, s13, s15
   178e0:	vcmpe.f32	s14, s15
   178e4:	vmrs	APSR_nzcv, fpscr
   178e8:	ble	179c4 <__assert_fail@plt+0x63a0>
   178ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   178f0:	ldr	r3, [r3, #20]
   178f4:	str	r3, [fp, #-12]
   178f8:	ldr	r3, [fp, #-12]
   178fc:	ldrb	r3, [r3, #16]
   17900:	cmp	r3, #0
   17904:	beq	17928 <__assert_fail@plt+0x6304>
   17908:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1790c:	ldr	r3, [r3, #8]
   17910:	vmov	s15, r3
   17914:	vcvt.f32.u32	s14, s15
   17918:	ldr	r3, [fp, #-12]
   1791c:	vldr	s15, [r3, #12]
   17920:	vmul.f32	s15, s14, s15
   17924:	b	17950 <__assert_fail@plt+0x632c>
   17928:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1792c:	ldr	r3, [r3, #8]
   17930:	vmov	s15, r3
   17934:	vcvt.f32.u32	s14, s15
   17938:	ldr	r3, [fp, #-12]
   1793c:	vldr	s15, [r3, #12]
   17940:	vmul.f32	s14, s14, s15
   17944:	ldr	r3, [fp, #-12]
   17948:	vldr	s15, [r3, #8]
   1794c:	vmul.f32	s15, s14, s15
   17950:	vstr	s15, [fp, #-16]
   17954:	vldr	s15, [fp, #-16]
   17958:	vldr	s14, [pc, #284]	; 17a7c <__assert_fail@plt+0x6458>
   1795c:	vcmpe.f32	s15, s14
   17960:	vmrs	APSR_nzcv, fpscr
   17964:	blt	17970 <__assert_fail@plt+0x634c>
   17968:	mvn	r3, #0
   1796c:	b	17a70 <__assert_fail@plt+0x644c>
   17970:	vldr	s15, [fp, #-16]
   17974:	vcvt.u32.f32	s15, s15
   17978:	vmov	r1, s15
   1797c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17980:	bl	175d8 <__assert_fail@plt+0x5fb4>
   17984:	mov	r3, r0
   17988:	eor	r3, r3, #1
   1798c:	uxtb	r3, r3
   17990:	cmp	r3, #0
   17994:	beq	179a0 <__assert_fail@plt+0x637c>
   17998:	mvn	r3, #0
   1799c:	b	17a70 <__assert_fail@plt+0x644c>
   179a0:	sub	r2, fp, #24
   179a4:	mov	r3, #0
   179a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   179ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   179b0:	bl	17230 <__assert_fail@plt+0x5c0c>
   179b4:	mov	r3, r0
   179b8:	cmp	r3, #0
   179bc:	beq	179c4 <__assert_fail@plt+0x63a0>
   179c0:	bl	115e8 <abort@plt>
   179c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179c8:	ldr	r3, [r3]
   179cc:	cmp	r3, #0
   179d0:	beq	17a38 <__assert_fail@plt+0x6414>
   179d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   179d8:	bl	17184 <__assert_fail@plt+0x5b60>
   179dc:	str	r0, [fp, #-20]	; 0xffffffec
   179e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   179e4:	cmp	r3, #0
   179e8:	bne	179f4 <__assert_fail@plt+0x63d0>
   179ec:	mvn	r3, #0
   179f0:	b	17a70 <__assert_fail@plt+0x644c>
   179f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   179f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   179fc:	str	r2, [r3]
   17a00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a04:	ldr	r2, [r3, #4]
   17a08:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a0c:	str	r2, [r3, #4]
   17a10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a14:	ldr	r2, [fp, #-20]	; 0xffffffec
   17a18:	str	r2, [r3, #4]
   17a1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a20:	ldr	r3, [r3, #16]
   17a24:	add	r2, r3, #1
   17a28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a2c:	str	r2, [r3, #16]
   17a30:	mov	r3, #1
   17a34:	b	17a70 <__assert_fail@plt+0x644c>
   17a38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a3c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17a40:	str	r2, [r3]
   17a44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a48:	ldr	r3, [r3, #16]
   17a4c:	add	r2, r3, #1
   17a50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a54:	str	r2, [r3, #16]
   17a58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a5c:	ldr	r3, [r3, #12]
   17a60:	add	r2, r3, #1
   17a64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a68:	str	r2, [r3, #12]
   17a6c:	mov	r3, #1
   17a70:	mov	r0, r3
   17a74:	sub	sp, fp, #4
   17a78:	pop	{fp, pc}
   17a7c:	svcmi	0x00800000
   17a80:	push	{fp, lr}
   17a84:	add	fp, sp, #4
   17a88:	sub	sp, sp, #16
   17a8c:	str	r0, [fp, #-16]
   17a90:	str	r1, [fp, #-20]	; 0xffffffec
   17a94:	sub	r3, fp, #12
   17a98:	mov	r2, r3
   17a9c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17aa0:	ldr	r0, [fp, #-16]
   17aa4:	bl	17800 <__assert_fail@plt+0x61dc>
   17aa8:	str	r0, [fp, #-8]
   17aac:	ldr	r3, [fp, #-8]
   17ab0:	cmn	r3, #1
   17ab4:	beq	17ad4 <__assert_fail@plt+0x64b0>
   17ab8:	ldr	r3, [fp, #-8]
   17abc:	cmp	r3, #0
   17ac0:	bne	17acc <__assert_fail@plt+0x64a8>
   17ac4:	ldr	r3, [fp, #-12]
   17ac8:	b	17ad8 <__assert_fail@plt+0x64b4>
   17acc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ad0:	b	17ad8 <__assert_fail@plt+0x64b4>
   17ad4:	mov	r3, #0
   17ad8:	mov	r0, r3
   17adc:	sub	sp, fp, #4
   17ae0:	pop	{fp, pc}
   17ae4:	push	{fp, lr}
   17ae8:	add	fp, sp, #4
   17aec:	sub	sp, sp, #32
   17af0:	str	r0, [fp, #-32]	; 0xffffffe0
   17af4:	str	r1, [fp, #-36]	; 0xffffffdc
   17af8:	sub	r2, fp, #28
   17afc:	mov	r3, #1
   17b00:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17b04:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17b08:	bl	17230 <__assert_fail@plt+0x5c0c>
   17b0c:	str	r0, [fp, #-12]
   17b10:	ldr	r3, [fp, #-12]
   17b14:	cmp	r3, #0
   17b18:	bne	17b24 <__assert_fail@plt+0x6500>
   17b1c:	mov	r3, #0
   17b20:	b	17cb4 <__assert_fail@plt+0x6690>
   17b24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b28:	ldr	r3, [r3, #16]
   17b2c:	sub	r2, r3, #1
   17b30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b34:	str	r2, [r3, #16]
   17b38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17b3c:	ldr	r3, [r3]
   17b40:	cmp	r3, #0
   17b44:	bne	17cb0 <__assert_fail@plt+0x668c>
   17b48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b4c:	ldr	r3, [r3, #12]
   17b50:	sub	r2, r3, #1
   17b54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b58:	str	r2, [r3, #12]
   17b5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b60:	ldr	r3, [r3, #12]
   17b64:	vmov	s15, r3
   17b68:	vcvt.f32.u32	s14, s15
   17b6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b70:	ldr	r3, [r3, #20]
   17b74:	vldr	s13, [r3]
   17b78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b7c:	ldr	r3, [r3, #8]
   17b80:	vmov	s15, r3
   17b84:	vcvt.f32.u32	s15, s15
   17b88:	vmul.f32	s15, s13, s15
   17b8c:	vcmpe.f32	s14, s15
   17b90:	vmrs	APSR_nzcv, fpscr
   17b94:	bpl	17cb0 <__assert_fail@plt+0x668c>
   17b98:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17b9c:	bl	16b08 <__assert_fail@plt+0x54e4>
   17ba0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ba4:	ldr	r3, [r3, #12]
   17ba8:	vmov	s15, r3
   17bac:	vcvt.f32.u32	s14, s15
   17bb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bb4:	ldr	r3, [r3, #20]
   17bb8:	vldr	s13, [r3]
   17bbc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bc0:	ldr	r3, [r3, #8]
   17bc4:	vmov	s15, r3
   17bc8:	vcvt.f32.u32	s15, s15
   17bcc:	vmul.f32	s15, s13, s15
   17bd0:	vcmpe.f32	s14, s15
   17bd4:	vmrs	APSR_nzcv, fpscr
   17bd8:	bpl	17cb0 <__assert_fail@plt+0x668c>
   17bdc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17be0:	ldr	r3, [r3, #20]
   17be4:	str	r3, [fp, #-16]
   17be8:	ldr	r3, [fp, #-16]
   17bec:	ldrb	r3, [r3, #16]
   17bf0:	cmp	r3, #0
   17bf4:	beq	17c1c <__assert_fail@plt+0x65f8>
   17bf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bfc:	ldr	r3, [r3, #8]
   17c00:	vmov	s15, r3
   17c04:	vcvt.f32.u32	s14, s15
   17c08:	ldr	r3, [fp, #-16]
   17c0c:	vldr	s15, [r3, #4]
   17c10:	vmul.f32	s15, s14, s15
   17c14:	vcvt.u32.f32	s15, s15
   17c18:	b	17c48 <__assert_fail@plt+0x6624>
   17c1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c20:	ldr	r3, [r3, #8]
   17c24:	vmov	s15, r3
   17c28:	vcvt.f32.u32	s14, s15
   17c2c:	ldr	r3, [fp, #-16]
   17c30:	vldr	s15, [r3, #4]
   17c34:	vmul.f32	s14, s14, s15
   17c38:	ldr	r3, [fp, #-16]
   17c3c:	vldr	s15, [r3, #8]
   17c40:	vmul.f32	s15, s14, s15
   17c44:	vcvt.u32.f32	s15, s15
   17c48:	vstr	s15, [fp, #-20]	; 0xffffffec
   17c4c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17c50:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17c54:	bl	175d8 <__assert_fail@plt+0x5fb4>
   17c58:	mov	r3, r0
   17c5c:	eor	r3, r3, #1
   17c60:	uxtb	r3, r3
   17c64:	cmp	r3, #0
   17c68:	beq	17cb0 <__assert_fail@plt+0x668c>
   17c6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17c70:	ldr	r3, [r3, #36]	; 0x24
   17c74:	str	r3, [fp, #-8]
   17c78:	b	17c98 <__assert_fail@plt+0x6674>
   17c7c:	ldr	r3, [fp, #-8]
   17c80:	ldr	r3, [r3, #4]
   17c84:	str	r3, [fp, #-24]	; 0xffffffe8
   17c88:	ldr	r0, [fp, #-8]
   17c8c:	bl	1d784 <__assert_fail@plt+0xc160>
   17c90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c94:	str	r3, [fp, #-8]
   17c98:	ldr	r3, [fp, #-8]
   17c9c:	cmp	r3, #0
   17ca0:	bne	17c7c <__assert_fail@plt+0x6658>
   17ca4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ca8:	mov	r2, #0
   17cac:	str	r2, [r3, #36]	; 0x24
   17cb0:	ldr	r3, [fp, #-12]
   17cb4:	mov	r0, r3
   17cb8:	sub	sp, fp, #4
   17cbc:	pop	{fp, pc}
   17cc0:	push	{fp, lr}
   17cc4:	add	fp, sp, #4
   17cc8:	sub	sp, sp, #8
   17ccc:	str	r0, [fp, #-8]
   17cd0:	str	r1, [fp, #-12]
   17cd4:	ldr	r1, [fp, #-12]
   17cd8:	ldr	r0, [fp, #-8]
   17cdc:	bl	17ae4 <__assert_fail@plt+0x64c0>
   17ce0:	mov	r3, r0
   17ce4:	mov	r0, r3
   17ce8:	sub	sp, fp, #4
   17cec:	pop	{fp, pc}
   17cf0:	push	{fp}		; (str fp, [sp, #-4]!)
   17cf4:	add	fp, sp, #0
   17cf8:	sub	sp, sp, #20
   17cfc:	str	r0, [fp, #-16]
   17d00:	str	r1, [fp, #-20]	; 0xffffffec
   17d04:	ldr	r3, [fp, #-16]
   17d08:	mov	r2, #1
   17d0c:	strb	r2, [r3, #28]
   17d10:	ldr	r3, [fp, #-16]
   17d14:	mov	r2, #0
   17d18:	str	r2, [r3, #20]
   17d1c:	ldr	r3, [fp, #-16]
   17d20:	mov	r2, #0
   17d24:	str	r2, [r3, #24]
   17d28:	mov	r3, #0
   17d2c:	str	r3, [fp, #-8]
   17d30:	b	17d50 <__assert_fail@plt+0x672c>
   17d34:	ldr	r3, [fp, #-16]
   17d38:	ldr	r2, [fp, #-8]
   17d3c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17d40:	str	r1, [r3, r2, lsl #2]
   17d44:	ldr	r3, [fp, #-8]
   17d48:	add	r3, r3, #1
   17d4c:	str	r3, [fp, #-8]
   17d50:	ldr	r3, [fp, #-8]
   17d54:	cmp	r3, #3
   17d58:	ble	17d34 <__assert_fail@plt+0x6710>
   17d5c:	ldr	r3, [fp, #-16]
   17d60:	ldr	r2, [fp, #-20]	; 0xffffffec
   17d64:	str	r2, [r3, #16]
   17d68:	nop			; (mov r0, r0)
   17d6c:	add	sp, fp, #0
   17d70:	pop	{fp}		; (ldr fp, [sp], #4)
   17d74:	bx	lr
   17d78:	push	{fp}		; (str fp, [sp, #-4]!)
   17d7c:	add	fp, sp, #0
   17d80:	sub	sp, sp, #12
   17d84:	str	r0, [fp, #-8]
   17d88:	ldr	r3, [fp, #-8]
   17d8c:	ldrb	r3, [r3, #28]
   17d90:	mov	r0, r3
   17d94:	add	sp, fp, #0
   17d98:	pop	{fp}		; (ldr fp, [sp], #4)
   17d9c:	bx	lr
   17da0:	push	{fp}		; (str fp, [sp, #-4]!)
   17da4:	add	fp, sp, #0
   17da8:	sub	sp, sp, #20
   17dac:	str	r0, [fp, #-16]
   17db0:	str	r1, [fp, #-20]	; 0xffffffec
   17db4:	ldr	r3, [fp, #-16]
   17db8:	ldr	r3, [r3, #20]
   17dbc:	ldr	r2, [fp, #-16]
   17dc0:	ldrb	r2, [r2, #28]
   17dc4:	eor	r2, r2, #1
   17dc8:	uxtb	r2, r2
   17dcc:	add	r3, r3, r2
   17dd0:	and	r3, r3, #3
   17dd4:	str	r3, [fp, #-8]
   17dd8:	ldr	r3, [fp, #-16]
   17ddc:	ldr	r2, [fp, #-8]
   17de0:	ldr	r3, [r3, r2, lsl #2]
   17de4:	str	r3, [fp, #-12]
   17de8:	ldr	r3, [fp, #-16]
   17dec:	ldr	r2, [fp, #-8]
   17df0:	ldr	r1, [fp, #-20]	; 0xffffffec
   17df4:	str	r1, [r3, r2, lsl #2]
   17df8:	ldr	r3, [fp, #-16]
   17dfc:	ldr	r2, [fp, #-8]
   17e00:	str	r2, [r3, #20]
   17e04:	ldr	r3, [fp, #-16]
   17e08:	ldr	r2, [r3, #24]
   17e0c:	ldr	r3, [fp, #-8]
   17e10:	cmp	r2, r3
   17e14:	bne	17e40 <__assert_fail@plt+0x681c>
   17e18:	ldr	r3, [fp, #-16]
   17e1c:	ldr	r3, [r3, #24]
   17e20:	ldr	r2, [fp, #-16]
   17e24:	ldrb	r2, [r2, #28]
   17e28:	eor	r2, r2, #1
   17e2c:	uxtb	r2, r2
   17e30:	add	r3, r3, r2
   17e34:	and	r2, r3, #3
   17e38:	ldr	r3, [fp, #-16]
   17e3c:	str	r2, [r3, #24]
   17e40:	ldr	r3, [fp, #-16]
   17e44:	mov	r2, #0
   17e48:	strb	r2, [r3, #28]
   17e4c:	ldr	r3, [fp, #-12]
   17e50:	mov	r0, r3
   17e54:	add	sp, fp, #0
   17e58:	pop	{fp}		; (ldr fp, [sp], #4)
   17e5c:	bx	lr
   17e60:	push	{fp, lr}
   17e64:	add	fp, sp, #4
   17e68:	sub	sp, sp, #16
   17e6c:	str	r0, [fp, #-16]
   17e70:	ldr	r0, [fp, #-16]
   17e74:	bl	17d78 <__assert_fail@plt+0x6754>
   17e78:	mov	r3, r0
   17e7c:	cmp	r3, #0
   17e80:	beq	17e88 <__assert_fail@plt+0x6864>
   17e84:	bl	115e8 <abort@plt>
   17e88:	ldr	r3, [fp, #-16]
   17e8c:	ldr	r2, [r3, #20]
   17e90:	ldr	r3, [fp, #-16]
   17e94:	ldr	r3, [r3, r2, lsl #2]
   17e98:	str	r3, [fp, #-8]
   17e9c:	ldr	r3, [fp, #-16]
   17ea0:	ldr	r2, [r3, #20]
   17ea4:	ldr	r3, [fp, #-16]
   17ea8:	ldr	r1, [r3, #16]
   17eac:	ldr	r3, [fp, #-16]
   17eb0:	str	r1, [r3, r2, lsl #2]
   17eb4:	ldr	r3, [fp, #-16]
   17eb8:	ldr	r2, [r3, #20]
   17ebc:	ldr	r3, [fp, #-16]
   17ec0:	ldr	r3, [r3, #24]
   17ec4:	cmp	r2, r3
   17ec8:	bne	17edc <__assert_fail@plt+0x68b8>
   17ecc:	ldr	r3, [fp, #-16]
   17ed0:	mov	r2, #1
   17ed4:	strb	r2, [r3, #28]
   17ed8:	b	17ef4 <__assert_fail@plt+0x68d0>
   17edc:	ldr	r3, [fp, #-16]
   17ee0:	ldr	r3, [r3, #20]
   17ee4:	add	r3, r3, #3
   17ee8:	and	r2, r3, #3
   17eec:	ldr	r3, [fp, #-16]
   17ef0:	str	r2, [r3, #20]
   17ef4:	ldr	r3, [fp, #-8]
   17ef8:	mov	r0, r3
   17efc:	sub	sp, fp, #4
   17f00:	pop	{fp, pc}
   17f04:	push	{r2, r3}
   17f08:	push	{fp, lr}
   17f0c:	add	fp, sp, #4
   17f10:	sub	sp, sp, #16
   17f14:	str	r0, [fp, #-16]
   17f18:	str	r1, [fp, #-20]	; 0xffffffec
   17f1c:	mov	r3, #0
   17f20:	str	r3, [fp, #-8]
   17f24:	ldr	r3, [fp, #4]
   17f28:	and	r3, r3, #64	; 0x40
   17f2c:	cmp	r3, #0
   17f30:	beq	17f50 <__assert_fail@plt+0x692c>
   17f34:	add	r3, fp, #8
   17f38:	str	r3, [fp, #-12]
   17f3c:	ldr	r3, [fp, #-12]
   17f40:	add	r2, r3, #4
   17f44:	str	r2, [fp, #-12]
   17f48:	ldr	r3, [r3]
   17f4c:	str	r3, [fp, #-8]
   17f50:	ldr	r3, [fp, #-8]
   17f54:	ldr	r2, [fp, #4]
   17f58:	ldr	r1, [fp, #-20]	; 0xffffffec
   17f5c:	ldr	r0, [fp, #-16]
   17f60:	bl	11498 <openat64@plt>
   17f64:	mov	r3, r0
   17f68:	mov	r0, r3
   17f6c:	bl	1b334 <__assert_fail@plt+0x9d10>
   17f70:	mov	r3, r0
   17f74:	mov	r0, r3
   17f78:	sub	sp, fp, #4
   17f7c:	pop	{fp, lr}
   17f80:	add	sp, sp, #8
   17f84:	bx	lr
   17f88:	push	{fp, lr}
   17f8c:	add	fp, sp, #4
   17f90:	sub	sp, sp, #32
   17f94:	str	r0, [fp, #-24]	; 0xffffffe8
   17f98:	str	r1, [fp, #-28]	; 0xffffffe4
   17f9c:	str	r2, [fp, #-32]	; 0xffffffe0
   17fa0:	str	r3, [fp, #-36]	; 0xffffffdc
   17fa4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fa8:	orr	r3, r3, #540672	; 0x84000
   17fac:	orr	r3, r3, #2304	; 0x900
   17fb0:	str	r3, [fp, #-8]
   17fb4:	ldr	r2, [fp, #-8]
   17fb8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17fbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17fc0:	bl	17f04 <__assert_fail@plt+0x68e0>
   17fc4:	str	r0, [fp, #-12]
   17fc8:	ldr	r3, [fp, #-12]
   17fcc:	cmp	r3, #0
   17fd0:	bge	17fdc <__assert_fail@plt+0x69b8>
   17fd4:	mov	r3, #0
   17fd8:	b	18030 <__assert_fail@plt+0x6a0c>
   17fdc:	ldr	r0, [fp, #-12]
   17fe0:	bl	11570 <fdopendir@plt>
   17fe4:	str	r0, [fp, #-16]
   17fe8:	ldr	r3, [fp, #-16]
   17fec:	cmp	r3, #0
   17ff0:	beq	18004 <__assert_fail@plt+0x69e0>
   17ff4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17ff8:	ldr	r2, [fp, #-12]
   17ffc:	str	r2, [r3]
   18000:	b	1802c <__assert_fail@plt+0x6a08>
   18004:	bl	114bc <__errno_location@plt>
   18008:	mov	r3, r0
   1800c:	ldr	r3, [r3]
   18010:	str	r3, [fp, #-20]	; 0xffffffec
   18014:	ldr	r0, [fp, #-12]
   18018:	bl	115f4 <close@plt>
   1801c:	bl	114bc <__errno_location@plt>
   18020:	mov	r2, r0
   18024:	ldr	r3, [fp, #-20]	; 0xffffffec
   18028:	str	r3, [r2]
   1802c:	ldr	r3, [fp, #-16]
   18030:	mov	r0, r3
   18034:	sub	sp, fp, #4
   18038:	pop	{fp, pc}
   1803c:	push	{fp, lr}
   18040:	add	fp, sp, #4
   18044:	sub	sp, sp, #16
   18048:	str	r0, [fp, #-16]
   1804c:	ldr	r3, [fp, #-16]
   18050:	cmp	r3, #0
   18054:	bne	18074 <__assert_fail@plt+0x6a50>
   18058:	ldr	r3, [pc, #220]	; 1813c <__assert_fail@plt+0x6b18>
   1805c:	ldr	r3, [r3]
   18060:	mov	r2, #55	; 0x37
   18064:	mov	r1, #1
   18068:	ldr	r0, [pc, #208]	; 18140 <__assert_fail@plt+0x6b1c>
   1806c:	bl	11378 <fwrite@plt>
   18070:	bl	115e8 <abort@plt>
   18074:	mov	r1, #47	; 0x2f
   18078:	ldr	r0, [fp, #-16]
   1807c:	bl	11540 <strrchr@plt>
   18080:	str	r0, [fp, #-8]
   18084:	ldr	r3, [fp, #-8]
   18088:	cmp	r3, #0
   1808c:	beq	1809c <__assert_fail@plt+0x6a78>
   18090:	ldr	r3, [fp, #-8]
   18094:	add	r3, r3, #1
   18098:	b	180a0 <__assert_fail@plt+0x6a7c>
   1809c:	ldr	r3, [fp, #-16]
   180a0:	str	r3, [fp, #-12]
   180a4:	ldr	r2, [fp, #-12]
   180a8:	ldr	r3, [fp, #-16]
   180ac:	sub	r3, r2, r3
   180b0:	cmp	r3, #6
   180b4:	ble	18118 <__assert_fail@plt+0x6af4>
   180b8:	ldr	r3, [fp, #-12]
   180bc:	sub	r3, r3, #7
   180c0:	mov	r2, #7
   180c4:	ldr	r1, [pc, #120]	; 18144 <__assert_fail@plt+0x6b20>
   180c8:	mov	r0, r3
   180cc:	bl	115dc <strncmp@plt>
   180d0:	mov	r3, r0
   180d4:	cmp	r3, #0
   180d8:	bne	18118 <__assert_fail@plt+0x6af4>
   180dc:	ldr	r3, [fp, #-12]
   180e0:	str	r3, [fp, #-16]
   180e4:	mov	r2, #3
   180e8:	ldr	r1, [pc, #88]	; 18148 <__assert_fail@plt+0x6b24>
   180ec:	ldr	r0, [fp, #-12]
   180f0:	bl	115dc <strncmp@plt>
   180f4:	mov	r3, r0
   180f8:	cmp	r3, #0
   180fc:	bne	18118 <__assert_fail@plt+0x6af4>
   18100:	ldr	r3, [fp, #-12]
   18104:	add	r3, r3, #3
   18108:	str	r3, [fp, #-16]
   1810c:	ldr	r2, [pc, #56]	; 1814c <__assert_fail@plt+0x6b28>
   18110:	ldr	r3, [fp, #-16]
   18114:	str	r3, [r2]
   18118:	ldr	r2, [pc, #48]	; 18150 <__assert_fail@plt+0x6b2c>
   1811c:	ldr	r3, [fp, #-16]
   18120:	str	r3, [r2]
   18124:	ldr	r2, [pc, #40]	; 18154 <__assert_fail@plt+0x6b30>
   18128:	ldr	r3, [fp, #-16]
   1812c:	str	r3, [r2]
   18130:	nop			; (mov r0, r0)
   18134:	sub	sp, fp, #4
   18138:	pop	{fp, pc}
   1813c:	andeq	r1, r3, r0, asr #3
   18140:	andeq	pc, r1, r8, ror pc	; <UNPREDICTABLE>
   18144:			; <UNDEFINED> instruction: 0x0001ffb0
   18148:			; <UNDEFINED> instruction: 0x0001ffb8
   1814c:			; <UNDEFINED> instruction: 0x000311b0
   18150:	andeq	r1, r3, r8, lsl #4
   18154:			; <UNDEFINED> instruction: 0x000311b4
   18158:	push	{fp, lr}
   1815c:	add	fp, sp, #4
   18160:	sub	sp, sp, #16
   18164:	str	r0, [fp, #-16]
   18168:	bl	114bc <__errno_location@plt>
   1816c:	mov	r3, r0
   18170:	ldr	r3, [r3]
   18174:	str	r3, [fp, #-8]
   18178:	ldr	r3, [fp, #-16]
   1817c:	cmp	r3, #0
   18180:	beq	1818c <__assert_fail@plt+0x6b68>
   18184:	ldr	r3, [fp, #-16]
   18188:	b	18190 <__assert_fail@plt+0x6b6c>
   1818c:	ldr	r3, [pc, #48]	; 181c4 <__assert_fail@plt+0x6ba0>
   18190:	mov	r1, #48	; 0x30
   18194:	mov	r0, r3
   18198:	bl	1c58c <__assert_fail@plt+0xaf68>
   1819c:	mov	r3, r0
   181a0:	str	r3, [fp, #-12]
   181a4:	bl	114bc <__errno_location@plt>
   181a8:	mov	r2, r0
   181ac:	ldr	r3, [fp, #-8]
   181b0:	str	r3, [r2]
   181b4:	ldr	r3, [fp, #-12]
   181b8:	mov	r0, r3
   181bc:	sub	sp, fp, #4
   181c0:	pop	{fp, pc}
   181c4:	andeq	r1, r3, ip, lsl #4
   181c8:	push	{fp}		; (str fp, [sp, #-4]!)
   181cc:	add	fp, sp, #0
   181d0:	sub	sp, sp, #12
   181d4:	str	r0, [fp, #-8]
   181d8:	ldr	r3, [fp, #-8]
   181dc:	cmp	r3, #0
   181e0:	beq	181ec <__assert_fail@plt+0x6bc8>
   181e4:	ldr	r3, [fp, #-8]
   181e8:	b	181f0 <__assert_fail@plt+0x6bcc>
   181ec:	ldr	r3, [pc, #16]	; 18204 <__assert_fail@plt+0x6be0>
   181f0:	ldr	r3, [r3]
   181f4:	mov	r0, r3
   181f8:	add	sp, fp, #0
   181fc:	pop	{fp}		; (ldr fp, [sp], #4)
   18200:	bx	lr
   18204:	andeq	r1, r3, ip, lsl #4
   18208:	push	{fp}		; (str fp, [sp, #-4]!)
   1820c:	add	fp, sp, #0
   18210:	sub	sp, sp, #12
   18214:	str	r0, [fp, #-8]
   18218:	str	r1, [fp, #-12]
   1821c:	ldr	r3, [fp, #-8]
   18220:	cmp	r3, #0
   18224:	beq	18230 <__assert_fail@plt+0x6c0c>
   18228:	ldr	r3, [fp, #-8]
   1822c:	b	18234 <__assert_fail@plt+0x6c10>
   18230:	ldr	r3, [pc, #20]	; 1824c <__assert_fail@plt+0x6c28>
   18234:	ldr	r2, [fp, #-12]
   18238:	str	r2, [r3]
   1823c:	nop			; (mov r0, r0)
   18240:	add	sp, fp, #0
   18244:	pop	{fp}		; (ldr fp, [sp], #4)
   18248:	bx	lr
   1824c:	andeq	r1, r3, ip, lsl #4
   18250:	push	{fp}		; (str fp, [sp, #-4]!)
   18254:	add	fp, sp, #0
   18258:	sub	sp, sp, #36	; 0x24
   1825c:	str	r0, [fp, #-24]	; 0xffffffe8
   18260:	mov	r3, r1
   18264:	str	r2, [fp, #-32]	; 0xffffffe0
   18268:	strb	r3, [fp, #-25]	; 0xffffffe7
   1826c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   18270:	strb	r3, [fp, #-5]
   18274:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18278:	cmp	r3, #0
   1827c:	beq	18288 <__assert_fail@plt+0x6c64>
   18280:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18284:	b	1828c <__assert_fail@plt+0x6c68>
   18288:	ldr	r3, [pc, #124]	; 1830c <__assert_fail@plt+0x6ce8>
   1828c:	add	r2, r3, #8
   18290:	ldrb	r3, [fp, #-5]
   18294:	lsr	r3, r3, #5
   18298:	uxtb	r3, r3
   1829c:	lsl	r3, r3, #2
   182a0:	add	r3, r2, r3
   182a4:	str	r3, [fp, #-12]
   182a8:	ldrb	r3, [fp, #-5]
   182ac:	and	r3, r3, #31
   182b0:	str	r3, [fp, #-16]
   182b4:	ldr	r3, [fp, #-12]
   182b8:	ldr	r2, [r3]
   182bc:	ldr	r3, [fp, #-16]
   182c0:	lsr	r3, r2, r3
   182c4:	and	r3, r3, #1
   182c8:	str	r3, [fp, #-20]	; 0xffffffec
   182cc:	ldr	r3, [fp, #-12]
   182d0:	ldr	r3, [r3]
   182d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   182d8:	and	r1, r2, #1
   182dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   182e0:	eor	r1, r1, r2
   182e4:	ldr	r2, [fp, #-16]
   182e8:	lsl	r2, r1, r2
   182ec:	eor	r2, r2, r3
   182f0:	ldr	r3, [fp, #-12]
   182f4:	str	r2, [r3]
   182f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   182fc:	mov	r0, r3
   18300:	add	sp, fp, #0
   18304:	pop	{fp}		; (ldr fp, [sp], #4)
   18308:	bx	lr
   1830c:	andeq	r1, r3, ip, lsl #4
   18310:	push	{fp}		; (str fp, [sp, #-4]!)
   18314:	add	fp, sp, #0
   18318:	sub	sp, sp, #20
   1831c:	str	r0, [fp, #-16]
   18320:	str	r1, [fp, #-20]	; 0xffffffec
   18324:	ldr	r3, [fp, #-16]
   18328:	cmp	r3, #0
   1832c:	bne	18338 <__assert_fail@plt+0x6d14>
   18330:	ldr	r3, [pc, #44]	; 18364 <__assert_fail@plt+0x6d40>
   18334:	str	r3, [fp, #-16]
   18338:	ldr	r3, [fp, #-16]
   1833c:	ldr	r3, [r3, #4]
   18340:	str	r3, [fp, #-8]
   18344:	ldr	r3, [fp, #-16]
   18348:	ldr	r2, [fp, #-20]	; 0xffffffec
   1834c:	str	r2, [r3, #4]
   18350:	ldr	r3, [fp, #-8]
   18354:	mov	r0, r3
   18358:	add	sp, fp, #0
   1835c:	pop	{fp}		; (ldr fp, [sp], #4)
   18360:	bx	lr
   18364:	andeq	r1, r3, ip, lsl #4
   18368:	push	{fp, lr}
   1836c:	add	fp, sp, #4
   18370:	sub	sp, sp, #16
   18374:	str	r0, [fp, #-8]
   18378:	str	r1, [fp, #-12]
   1837c:	str	r2, [fp, #-16]
   18380:	ldr	r3, [fp, #-8]
   18384:	cmp	r3, #0
   18388:	bne	18394 <__assert_fail@plt+0x6d70>
   1838c:	ldr	r3, [pc, #76]	; 183e0 <__assert_fail@plt+0x6dbc>
   18390:	str	r3, [fp, #-8]
   18394:	ldr	r3, [fp, #-8]
   18398:	mov	r2, #10
   1839c:	str	r2, [r3]
   183a0:	ldr	r3, [fp, #-12]
   183a4:	cmp	r3, #0
   183a8:	beq	183b8 <__assert_fail@plt+0x6d94>
   183ac:	ldr	r3, [fp, #-16]
   183b0:	cmp	r3, #0
   183b4:	bne	183bc <__assert_fail@plt+0x6d98>
   183b8:	bl	115e8 <abort@plt>
   183bc:	ldr	r3, [fp, #-8]
   183c0:	ldr	r2, [fp, #-12]
   183c4:	str	r2, [r3, #40]	; 0x28
   183c8:	ldr	r3, [fp, #-8]
   183cc:	ldr	r2, [fp, #-16]
   183d0:	str	r2, [r3, #44]	; 0x2c
   183d4:	nop			; (mov r0, r0)
   183d8:	sub	sp, fp, #4
   183dc:	pop	{fp, pc}
   183e0:	andeq	r1, r3, ip, lsl #4
   183e4:	push	{fp, lr}
   183e8:	add	fp, sp, #4
   183ec:	sub	sp, sp, #56	; 0x38
   183f0:	str	r0, [fp, #-56]	; 0xffffffc8
   183f4:	str	r1, [fp, #-60]	; 0xffffffc4
   183f8:	sub	r3, fp, #52	; 0x34
   183fc:	mov	r2, #48	; 0x30
   18400:	mov	r1, #0
   18404:	mov	r0, r3
   18408:	bl	114d4 <memset@plt>
   1840c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18410:	cmp	r3, #10
   18414:	bne	1841c <__assert_fail@plt+0x6df8>
   18418:	bl	115e8 <abort@plt>
   1841c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18420:	str	r3, [fp, #-52]	; 0xffffffcc
   18424:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18428:	mov	lr, r3
   1842c:	sub	ip, fp, #52	; 0x34
   18430:	ldm	ip!, {r0, r1, r2, r3}
   18434:	stmia	lr!, {r0, r1, r2, r3}
   18438:	ldm	ip!, {r0, r1, r2, r3}
   1843c:	stmia	lr!, {r0, r1, r2, r3}
   18440:	ldm	ip, {r0, r1, r2, r3}
   18444:	stm	lr, {r0, r1, r2, r3}
   18448:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1844c:	sub	sp, fp, #4
   18450:	pop	{fp, pc}
   18454:	push	{fp, lr}
   18458:	add	fp, sp, #4
   1845c:	sub	sp, sp, #16
   18460:	str	r0, [fp, #-16]
   18464:	str	r1, [fp, #-20]	; 0xffffffec
   18468:	ldr	r0, [fp, #-16]
   1846c:	bl	11474 <gettext@plt>
   18470:	str	r0, [fp, #-8]
   18474:	ldr	r2, [fp, #-8]
   18478:	ldr	r3, [fp, #-16]
   1847c:	cmp	r2, r3
   18480:	beq	1848c <__assert_fail@plt+0x6e68>
   18484:	ldr	r3, [fp, #-8]
   18488:	b	1851c <__assert_fail@plt+0x6ef8>
   1848c:	bl	1da30 <__assert_fail@plt+0xc40c>
   18490:	str	r0, [fp, #-12]
   18494:	ldr	r1, [pc, #140]	; 18528 <__assert_fail@plt+0x6f04>
   18498:	ldr	r0, [fp, #-12]
   1849c:	bl	1ced0 <__assert_fail@plt+0xb8ac>
   184a0:	mov	r3, r0
   184a4:	cmp	r3, #0
   184a8:	bne	184cc <__assert_fail@plt+0x6ea8>
   184ac:	ldr	r3, [fp, #-16]
   184b0:	ldrb	r3, [r3]
   184b4:	cmp	r3, #96	; 0x60
   184b8:	bne	184c4 <__assert_fail@plt+0x6ea0>
   184bc:	ldr	r3, [pc, #104]	; 1852c <__assert_fail@plt+0x6f08>
   184c0:	b	1851c <__assert_fail@plt+0x6ef8>
   184c4:	ldr	r3, [pc, #100]	; 18530 <__assert_fail@plt+0x6f0c>
   184c8:	b	1851c <__assert_fail@plt+0x6ef8>
   184cc:	ldr	r1, [pc, #96]	; 18534 <__assert_fail@plt+0x6f10>
   184d0:	ldr	r0, [fp, #-12]
   184d4:	bl	1ced0 <__assert_fail@plt+0xb8ac>
   184d8:	mov	r3, r0
   184dc:	cmp	r3, #0
   184e0:	bne	18504 <__assert_fail@plt+0x6ee0>
   184e4:	ldr	r3, [fp, #-16]
   184e8:	ldrb	r3, [r3]
   184ec:	cmp	r3, #96	; 0x60
   184f0:	bne	184fc <__assert_fail@plt+0x6ed8>
   184f4:	ldr	r3, [pc, #60]	; 18538 <__assert_fail@plt+0x6f14>
   184f8:	b	1851c <__assert_fail@plt+0x6ef8>
   184fc:	ldr	r3, [pc, #56]	; 1853c <__assert_fail@plt+0x6f18>
   18500:	b	1851c <__assert_fail@plt+0x6ef8>
   18504:	ldr	r3, [fp, #-20]	; 0xffffffec
   18508:	cmp	r3, #9
   1850c:	bne	18518 <__assert_fail@plt+0x6ef4>
   18510:	ldr	r3, [pc, #40]	; 18540 <__assert_fail@plt+0x6f1c>
   18514:	b	1851c <__assert_fail@plt+0x6ef8>
   18518:	ldr	r3, [pc, #36]	; 18544 <__assert_fail@plt+0x6f20>
   1851c:	mov	r0, r3
   18520:	sub	sp, fp, #4
   18524:	pop	{fp, pc}
   18528:	andeq	r0, r2, r8, ror r0
   1852c:	andeq	r0, r2, r0, lsl #1
   18530:	andeq	r0, r2, r4, lsl #1
   18534:	andeq	r0, r2, r8, lsl #1
   18538:	muleq	r2, r0, r0
   1853c:	muleq	r2, r4, r0
   18540:	muleq	r2, r8, r0
   18544:	muleq	r2, ip, r0
   18548:	push	{r4, fp, lr}
   1854c:	add	fp, sp, #8
   18550:	sub	sp, sp, #116	; 0x74
   18554:	str	r0, [fp, #-88]	; 0xffffffa8
   18558:	str	r1, [fp, #-92]	; 0xffffffa4
   1855c:	str	r2, [fp, #-96]	; 0xffffffa0
   18560:	str	r3, [fp, #-100]	; 0xffffff9c
   18564:	mov	r3, #0
   18568:	str	r3, [fp, #-20]	; 0xffffffec
   1856c:	mov	r3, #0
   18570:	str	r3, [fp, #-24]	; 0xffffffe8
   18574:	mov	r3, #0
   18578:	str	r3, [fp, #-28]	; 0xffffffe4
   1857c:	mov	r3, #0
   18580:	str	r3, [fp, #-32]	; 0xffffffe0
   18584:	mov	r3, #0
   18588:	strb	r3, [fp, #-33]	; 0xffffffdf
   1858c:	bl	11390 <__ctype_get_mb_cur_max@plt>
   18590:	mov	r3, r0
   18594:	cmp	r3, #1
   18598:	moveq	r3, #1
   1859c:	movne	r3, #0
   185a0:	strb	r3, [fp, #-57]	; 0xffffffc7
   185a4:	ldr	r3, [fp, #8]
   185a8:	and	r3, r3, #2
   185ac:	cmp	r3, #0
   185b0:	movne	r3, #1
   185b4:	moveq	r3, #0
   185b8:	strb	r3, [fp, #-34]	; 0xffffffde
   185bc:	mov	r3, #0
   185c0:	strb	r3, [fp, #-35]	; 0xffffffdd
   185c4:	mov	r3, #0
   185c8:	strb	r3, [fp, #-36]	; 0xffffffdc
   185cc:	mov	r3, #1
   185d0:	strb	r3, [fp, #-37]	; 0xffffffdb
   185d4:	ldr	r3, [fp, #4]
   185d8:	cmp	r3, #10
   185dc:	ldrls	pc, [pc, r3, lsl #2]
   185e0:	b	187e8 <__assert_fail@plt+0x71c4>
   185e4:	ldrdeq	r8, [r1], -ip
   185e8:	andeq	r8, r1, r8, asr r7
   185ec:	andeq	r8, r1, ip, ror r7
   185f0:	andeq	r8, r1, r0, asr r7
   185f4:	andeq	r8, r1, r0, ror #14
   185f8:	andeq	r8, r1, r0, lsr #12
   185fc:	andeq	r8, r1, r0, lsl r6
   18600:	andeq	r8, r1, r0, lsl #13
   18604:	muleq	r1, r4, r6
   18608:	muleq	r1, r4, r6
   1860c:	muleq	r1, r4, r6
   18610:	mov	r3, #5
   18614:	str	r3, [fp, #4]
   18618:	mov	r3, #1
   1861c:	strb	r3, [fp, #-34]	; 0xffffffde
   18620:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18624:	eor	r3, r3, #1
   18628:	uxtb	r3, r3
   1862c:	cmp	r3, #0
   18630:	beq	18664 <__assert_fail@plt+0x7040>
   18634:	ldr	r2, [fp, #-20]	; 0xffffffec
   18638:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1863c:	cmp	r2, r3
   18640:	bcs	18658 <__assert_fail@plt+0x7034>
   18644:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18648:	ldr	r3, [fp, #-20]	; 0xffffffec
   1864c:	add	r3, r2, r3
   18650:	mov	r2, #34	; 0x22
   18654:	strb	r2, [r3]
   18658:	ldr	r3, [fp, #-20]	; 0xffffffec
   1865c:	add	r3, r3, #1
   18660:	str	r3, [fp, #-20]	; 0xffffffec
   18664:	mov	r3, #1
   18668:	strb	r3, [fp, #-33]	; 0xffffffdf
   1866c:	ldr	r3, [pc, #3872]	; 19594 <__assert_fail@plt+0x7f70>
   18670:	str	r3, [fp, #-28]	; 0xffffffe4
   18674:	mov	r3, #1
   18678:	str	r3, [fp, #-32]	; 0xffffffe0
   1867c:	b	187ec <__assert_fail@plt+0x71c8>
   18680:	mov	r3, #1
   18684:	strb	r3, [fp, #-33]	; 0xffffffdf
   18688:	mov	r3, #0
   1868c:	strb	r3, [fp, #-34]	; 0xffffffde
   18690:	b	187ec <__assert_fail@plt+0x71c8>
   18694:	ldr	r3, [fp, #4]
   18698:	cmp	r3, #10
   1869c:	beq	186c0 <__assert_fail@plt+0x709c>
   186a0:	ldr	r1, [fp, #4]
   186a4:	ldr	r0, [pc, #3820]	; 19598 <__assert_fail@plt+0x7f74>
   186a8:	bl	18454 <__assert_fail@plt+0x6e30>
   186ac:	str	r0, [fp, #16]
   186b0:	ldr	r1, [fp, #4]
   186b4:	ldr	r0, [pc, #3808]	; 1959c <__assert_fail@plt+0x7f78>
   186b8:	bl	18454 <__assert_fail@plt+0x6e30>
   186bc:	str	r0, [fp, #20]
   186c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   186c4:	eor	r3, r3, #1
   186c8:	uxtb	r3, r3
   186cc:	cmp	r3, #0
   186d0:	beq	18730 <__assert_fail@plt+0x710c>
   186d4:	ldr	r3, [fp, #16]
   186d8:	str	r3, [fp, #-28]	; 0xffffffe4
   186dc:	b	18720 <__assert_fail@plt+0x70fc>
   186e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   186e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   186e8:	cmp	r2, r3
   186ec:	bcs	18708 <__assert_fail@plt+0x70e4>
   186f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   186f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   186f8:	add	r3, r2, r3
   186fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18700:	ldrb	r2, [r2]
   18704:	strb	r2, [r3]
   18708:	ldr	r3, [fp, #-20]	; 0xffffffec
   1870c:	add	r3, r3, #1
   18710:	str	r3, [fp, #-20]	; 0xffffffec
   18714:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18718:	add	r3, r3, #1
   1871c:	str	r3, [fp, #-28]	; 0xffffffe4
   18720:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18724:	ldrb	r3, [r3]
   18728:	cmp	r3, #0
   1872c:	bne	186e0 <__assert_fail@plt+0x70bc>
   18730:	mov	r3, #1
   18734:	strb	r3, [fp, #-33]	; 0xffffffdf
   18738:	ldr	r3, [fp, #20]
   1873c:	str	r3, [fp, #-28]	; 0xffffffe4
   18740:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18744:	bl	1148c <strlen@plt>
   18748:	str	r0, [fp, #-32]	; 0xffffffe0
   1874c:	b	187ec <__assert_fail@plt+0x71c8>
   18750:	mov	r3, #1
   18754:	strb	r3, [fp, #-33]	; 0xffffffdf
   18758:	mov	r3, #1
   1875c:	strb	r3, [fp, #-34]	; 0xffffffde
   18760:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18764:	eor	r3, r3, #1
   18768:	uxtb	r3, r3
   1876c:	cmp	r3, #0
   18770:	beq	1877c <__assert_fail@plt+0x7158>
   18774:	mov	r3, #1
   18778:	strb	r3, [fp, #-33]	; 0xffffffdf
   1877c:	mov	r3, #2
   18780:	str	r3, [fp, #4]
   18784:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18788:	eor	r3, r3, #1
   1878c:	uxtb	r3, r3
   18790:	cmp	r3, #0
   18794:	beq	187c8 <__assert_fail@plt+0x71a4>
   18798:	ldr	r2, [fp, #-20]	; 0xffffffec
   1879c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   187a0:	cmp	r2, r3
   187a4:	bcs	187bc <__assert_fail@plt+0x7198>
   187a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   187ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   187b0:	add	r3, r2, r3
   187b4:	mov	r2, #39	; 0x27
   187b8:	strb	r2, [r3]
   187bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   187c0:	add	r3, r3, #1
   187c4:	str	r3, [fp, #-20]	; 0xffffffec
   187c8:	ldr	r3, [pc, #3532]	; 1959c <__assert_fail@plt+0x7f78>
   187cc:	str	r3, [fp, #-28]	; 0xffffffe4
   187d0:	mov	r3, #1
   187d4:	str	r3, [fp, #-32]	; 0xffffffe0
   187d8:	b	187ec <__assert_fail@plt+0x71c8>
   187dc:	mov	r3, #0
   187e0:	strb	r3, [fp, #-34]	; 0xffffffde
   187e4:	b	187ec <__assert_fail@plt+0x71c8>
   187e8:	bl	115e8 <abort@plt>
   187ec:	mov	r3, #0
   187f0:	str	r3, [fp, #-16]
   187f4:	b	19984 <__assert_fail@plt+0x8360>
   187f8:	mov	r3, #0
   187fc:	strb	r3, [fp, #-40]	; 0xffffffd8
   18800:	mov	r3, #0
   18804:	strb	r3, [fp, #-41]	; 0xffffffd7
   18808:	mov	r3, #0
   1880c:	strb	r3, [fp, #-42]	; 0xffffffd6
   18810:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18814:	cmp	r3, #0
   18818:	beq	188b4 <__assert_fail@plt+0x7290>
   1881c:	ldr	r3, [fp, #4]
   18820:	cmp	r3, #2
   18824:	beq	188b4 <__assert_fail@plt+0x7290>
   18828:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1882c:	cmp	r3, #0
   18830:	beq	188b4 <__assert_fail@plt+0x7290>
   18834:	ldr	r2, [fp, #-16]
   18838:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1883c:	add	r4, r2, r3
   18840:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18844:	cmn	r3, #1
   18848:	bne	1886c <__assert_fail@plt+0x7248>
   1884c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18850:	cmp	r3, #1
   18854:	bls	1886c <__assert_fail@plt+0x7248>
   18858:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1885c:	bl	1148c <strlen@plt>
   18860:	str	r0, [fp, #-100]	; 0xffffff9c
   18864:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18868:	b	18870 <__assert_fail@plt+0x724c>
   1886c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18870:	cmp	r4, r3
   18874:	bhi	188b4 <__assert_fail@plt+0x7290>
   18878:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1887c:	ldr	r3, [fp, #-16]
   18880:	add	r3, r2, r3
   18884:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18888:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1888c:	mov	r0, r3
   18890:	bl	112f4 <memcmp@plt>
   18894:	mov	r3, r0
   18898:	cmp	r3, #0
   1889c:	bne	188b4 <__assert_fail@plt+0x7290>
   188a0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   188a4:	cmp	r3, #0
   188a8:	bne	19b40 <__assert_fail@plt+0x851c>
   188ac:	mov	r3, #1
   188b0:	strb	r3, [fp, #-40]	; 0xffffffd8
   188b4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   188b8:	ldr	r3, [fp, #-16]
   188bc:	add	r3, r2, r3
   188c0:	ldrb	r3, [r3]
   188c4:	strb	r3, [fp, #-38]	; 0xffffffda
   188c8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   188cc:	cmp	r3, #126	; 0x7e
   188d0:	ldrls	pc, [pc, r3, lsl #2]
   188d4:	b	19100 <__assert_fail@plt+0x7adc>
   188d8:	ldrdeq	r8, [r1], -r4
   188dc:	andeq	r9, r1, r0, lsl #2
   188e0:	andeq	r9, r1, r0, lsl #2
   188e4:	andeq	r9, r1, r0, lsl #2
   188e8:	andeq	r9, r1, r0, lsl #2
   188ec:	andeq	r9, r1, r0, lsl #2
   188f0:	andeq	r9, r1, r0, lsl #2
   188f4:	andeq	r8, r1, r4, asr #29
   188f8:	ldrdeq	r8, [r1], -r0
   188fc:	andeq	r8, r1, r0, lsl #30
   18900:	andeq	r8, r1, r8, ror #29
   18904:	andeq	r8, r1, ip, lsl #30
   18908:	ldrdeq	r8, [r1], -ip
   1890c:	strdeq	r8, [r1], -r4
   18910:	andeq	r9, r1, r0, lsl #2
   18914:	andeq	r9, r1, r0, lsl #2
   18918:	andeq	r9, r1, r0, lsl #2
   1891c:	andeq	r9, r1, r0, lsl #2
   18920:	andeq	r9, r1, r0, lsl #2
   18924:	andeq	r9, r1, r0, lsl #2
   18928:	andeq	r9, r1, r0, lsl #2
   1892c:	andeq	r9, r1, r0, lsl #2
   18930:	andeq	r9, r1, r0, lsl #2
   18934:	andeq	r9, r1, r0, lsl #2
   18938:	andeq	r9, r1, r0, lsl #2
   1893c:	andeq	r9, r1, r0, lsl #2
   18940:	andeq	r9, r1, r0, lsl #2
   18944:	andeq	r9, r1, r0, lsl #2
   18948:	andeq	r9, r1, r0, lsl #2
   1894c:	andeq	r9, r1, r0, lsl #2
   18950:	andeq	r9, r1, r0, lsl #2
   18954:	andeq	r9, r1, r0, lsl #2
   18958:	andeq	r8, r1, r4, ror #31
   1895c:	andeq	r8, r1, ip, ror #31
   18960:	andeq	r8, r1, ip, ror #31
   18964:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18968:	andeq	r8, r1, ip, ror #31
   1896c:	strdeq	r9, [r1], -r4
   18970:	andeq	r8, r1, ip, ror #31
   18974:	andeq	r9, r1, r8
   18978:	andeq	r8, r1, ip, ror #31
   1897c:	andeq	r8, r1, ip, ror #31
   18980:	andeq	r8, r1, ip, ror #31
   18984:	strdeq	r9, [r1], -r4
   18988:	strdeq	r9, [r1], -r4
   1898c:	strdeq	r9, [r1], -r4
   18990:	strdeq	r9, [r1], -r4
   18994:	strdeq	r9, [r1], -r4
   18998:	strdeq	r9, [r1], -r4
   1899c:	strdeq	r9, [r1], -r4
   189a0:	strdeq	r9, [r1], -r4
   189a4:	strdeq	r9, [r1], -r4
   189a8:	strdeq	r9, [r1], -r4
   189ac:	strdeq	r9, [r1], -r4
   189b0:	strdeq	r9, [r1], -r4
   189b4:	strdeq	r9, [r1], -r4
   189b8:	strdeq	r9, [r1], -r4
   189bc:	strdeq	r9, [r1], -r4
   189c0:	strdeq	r9, [r1], -r4
   189c4:	andeq	r8, r1, ip, ror #31
   189c8:	andeq	r8, r1, ip, ror #31
   189cc:	andeq	r8, r1, ip, ror #31
   189d0:	andeq	r8, r1, ip, ror #31
   189d4:			; <UNDEFINED> instruction: 0x00018cb4
   189d8:	andeq	r9, r1, r0, lsl #2
   189dc:	strdeq	r9, [r1], -r4
   189e0:	strdeq	r9, [r1], -r4
   189e4:	strdeq	r9, [r1], -r4
   189e8:	strdeq	r9, [r1], -r4
   189ec:	strdeq	r9, [r1], -r4
   189f0:	strdeq	r9, [r1], -r4
   189f4:	strdeq	r9, [r1], -r4
   189f8:	strdeq	r9, [r1], -r4
   189fc:	strdeq	r9, [r1], -r4
   18a00:	strdeq	r9, [r1], -r4
   18a04:	strdeq	r9, [r1], -r4
   18a08:	strdeq	r9, [r1], -r4
   18a0c:	strdeq	r9, [r1], -r4
   18a10:	strdeq	r9, [r1], -r4
   18a14:	strdeq	r9, [r1], -r4
   18a18:	strdeq	r9, [r1], -r4
   18a1c:	strdeq	r9, [r1], -r4
   18a20:	strdeq	r9, [r1], -r4
   18a24:	strdeq	r9, [r1], -r4
   18a28:	strdeq	r9, [r1], -r4
   18a2c:	strdeq	r9, [r1], -r4
   18a30:	strdeq	r9, [r1], -r4
   18a34:	strdeq	r9, [r1], -r4
   18a38:	strdeq	r9, [r1], -r4
   18a3c:	strdeq	r9, [r1], -r4
   18a40:	strdeq	r9, [r1], -r4
   18a44:	andeq	r8, r1, ip, ror #31
   18a48:	andeq	r8, r1, r8, lsl pc
   18a4c:	strdeq	r9, [r1], -r4
   18a50:	andeq	r8, r1, ip, ror #31
   18a54:	strdeq	r9, [r1], -r4
   18a58:	andeq	r8, r1, ip, ror #31
   18a5c:	strdeq	r9, [r1], -r4
   18a60:	strdeq	r9, [r1], -r4
   18a64:	strdeq	r9, [r1], -r4
   18a68:	strdeq	r9, [r1], -r4
   18a6c:	strdeq	r9, [r1], -r4
   18a70:	strdeq	r9, [r1], -r4
   18a74:	strdeq	r9, [r1], -r4
   18a78:	strdeq	r9, [r1], -r4
   18a7c:	strdeq	r9, [r1], -r4
   18a80:	strdeq	r9, [r1], -r4
   18a84:	strdeq	r9, [r1], -r4
   18a88:	strdeq	r9, [r1], -r4
   18a8c:	strdeq	r9, [r1], -r4
   18a90:	strdeq	r9, [r1], -r4
   18a94:	strdeq	r9, [r1], -r4
   18a98:	strdeq	r9, [r1], -r4
   18a9c:	strdeq	r9, [r1], -r4
   18aa0:	strdeq	r9, [r1], -r4
   18aa4:	strdeq	r9, [r1], -r4
   18aa8:	strdeq	r9, [r1], -r4
   18aac:	strdeq	r9, [r1], -r4
   18ab0:	strdeq	r9, [r1], -r4
   18ab4:	strdeq	r9, [r1], -r4
   18ab8:	strdeq	r9, [r1], -r4
   18abc:	strdeq	r9, [r1], -r4
   18ac0:	strdeq	r9, [r1], -r4
   18ac4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   18ac8:	andeq	r8, r1, ip, ror #31
   18acc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   18ad0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ad4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18ad8:	cmp	r3, #0
   18adc:	beq	18ca0 <__assert_fail@plt+0x767c>
   18ae0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18ae4:	cmp	r3, #0
   18ae8:	bne	19b48 <__assert_fail@plt+0x8524>
   18aec:	mov	r3, #1
   18af0:	strb	r3, [fp, #-41]	; 0xffffffd7
   18af4:	ldr	r3, [fp, #4]
   18af8:	cmp	r3, #2
   18afc:	bne	18bac <__assert_fail@plt+0x7588>
   18b00:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   18b04:	eor	r3, r3, #1
   18b08:	uxtb	r3, r3
   18b0c:	cmp	r3, #0
   18b10:	beq	18bac <__assert_fail@plt+0x7588>
   18b14:	ldr	r2, [fp, #-20]	; 0xffffffec
   18b18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18b1c:	cmp	r2, r3
   18b20:	bcs	18b38 <__assert_fail@plt+0x7514>
   18b24:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18b28:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b2c:	add	r3, r2, r3
   18b30:	mov	r2, #39	; 0x27
   18b34:	strb	r2, [r3]
   18b38:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b3c:	add	r3, r3, #1
   18b40:	str	r3, [fp, #-20]	; 0xffffffec
   18b44:	ldr	r2, [fp, #-20]	; 0xffffffec
   18b48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18b4c:	cmp	r2, r3
   18b50:	bcs	18b68 <__assert_fail@plt+0x7544>
   18b54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18b58:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b5c:	add	r3, r2, r3
   18b60:	mov	r2, #36	; 0x24
   18b64:	strb	r2, [r3]
   18b68:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b6c:	add	r3, r3, #1
   18b70:	str	r3, [fp, #-20]	; 0xffffffec
   18b74:	ldr	r2, [fp, #-20]	; 0xffffffec
   18b78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18b7c:	cmp	r2, r3
   18b80:	bcs	18b98 <__assert_fail@plt+0x7574>
   18b84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18b88:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b8c:	add	r3, r2, r3
   18b90:	mov	r2, #39	; 0x27
   18b94:	strb	r2, [r3]
   18b98:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b9c:	add	r3, r3, #1
   18ba0:	str	r3, [fp, #-20]	; 0xffffffec
   18ba4:	mov	r3, #1
   18ba8:	strb	r3, [fp, #-35]	; 0xffffffdd
   18bac:	ldr	r2, [fp, #-20]	; 0xffffffec
   18bb0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18bb4:	cmp	r2, r3
   18bb8:	bcs	18bd0 <__assert_fail@plt+0x75ac>
   18bbc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18bc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18bc4:	add	r3, r2, r3
   18bc8:	mov	r2, #92	; 0x5c
   18bcc:	strb	r2, [r3]
   18bd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18bd4:	add	r3, r3, #1
   18bd8:	str	r3, [fp, #-20]	; 0xffffffec
   18bdc:	ldr	r3, [fp, #4]
   18be0:	cmp	r3, #2
   18be4:	beq	18c94 <__assert_fail@plt+0x7670>
   18be8:	ldr	r3, [fp, #-16]
   18bec:	add	r2, r3, #1
   18bf0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18bf4:	cmp	r2, r3
   18bf8:	bcs	18c94 <__assert_fail@plt+0x7670>
   18bfc:	ldr	r3, [fp, #-16]
   18c00:	add	r3, r3, #1
   18c04:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18c08:	add	r3, r2, r3
   18c0c:	ldrb	r3, [r3]
   18c10:	cmp	r3, #47	; 0x2f
   18c14:	bls	18c94 <__assert_fail@plt+0x7670>
   18c18:	ldr	r3, [fp, #-16]
   18c1c:	add	r3, r3, #1
   18c20:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18c24:	add	r3, r2, r3
   18c28:	ldrb	r3, [r3]
   18c2c:	cmp	r3, #57	; 0x39
   18c30:	bhi	18c94 <__assert_fail@plt+0x7670>
   18c34:	ldr	r2, [fp, #-20]	; 0xffffffec
   18c38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18c3c:	cmp	r2, r3
   18c40:	bcs	18c58 <__assert_fail@plt+0x7634>
   18c44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18c48:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c4c:	add	r3, r2, r3
   18c50:	mov	r2, #48	; 0x30
   18c54:	strb	r2, [r3]
   18c58:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c5c:	add	r3, r3, #1
   18c60:	str	r3, [fp, #-20]	; 0xffffffec
   18c64:	ldr	r2, [fp, #-20]	; 0xffffffec
   18c68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18c6c:	cmp	r2, r3
   18c70:	bcs	18c88 <__assert_fail@plt+0x7664>
   18c74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18c78:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c7c:	add	r3, r2, r3
   18c80:	mov	r2, #48	; 0x30
   18c84:	strb	r2, [r3]
   18c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c8c:	add	r3, r3, #1
   18c90:	str	r3, [fp, #-20]	; 0xffffffec
   18c94:	mov	r3, #48	; 0x30
   18c98:	strb	r3, [fp, #-38]	; 0xffffffda
   18c9c:	b	196dc <__assert_fail@plt+0x80b8>
   18ca0:	ldr	r3, [fp, #8]
   18ca4:	and	r3, r3, #1
   18ca8:	cmp	r3, #0
   18cac:	beq	196dc <__assert_fail@plt+0x80b8>
   18cb0:	b	19978 <__assert_fail@plt+0x8354>
   18cb4:	ldr	r3, [fp, #4]
   18cb8:	cmp	r3, #2
   18cbc:	beq	18ccc <__assert_fail@plt+0x76a8>
   18cc0:	cmp	r3, #5
   18cc4:	beq	18cdc <__assert_fail@plt+0x76b8>
   18cc8:	b	18ec0 <__assert_fail@plt+0x789c>
   18ccc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18cd0:	cmp	r3, #0
   18cd4:	beq	18eb4 <__assert_fail@plt+0x7890>
   18cd8:	b	19b84 <__assert_fail@plt+0x8560>
   18cdc:	ldr	r3, [fp, #8]
   18ce0:	and	r3, r3, #4
   18ce4:	cmp	r3, #0
   18ce8:	beq	18ebc <__assert_fail@plt+0x7898>
   18cec:	ldr	r3, [fp, #-16]
   18cf0:	add	r2, r3, #2
   18cf4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18cf8:	cmp	r2, r3
   18cfc:	bcs	18ebc <__assert_fail@plt+0x7898>
   18d00:	ldr	r3, [fp, #-16]
   18d04:	add	r3, r3, #1
   18d08:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18d0c:	add	r3, r2, r3
   18d10:	ldrb	r3, [r3]
   18d14:	cmp	r3, #63	; 0x3f
   18d18:	bne	18ebc <__assert_fail@plt+0x7898>
   18d1c:	ldr	r3, [fp, #-16]
   18d20:	add	r3, r3, #2
   18d24:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18d28:	add	r3, r2, r3
   18d2c:	ldrb	r3, [r3]
   18d30:	sub	r3, r3, #33	; 0x21
   18d34:	cmp	r3, #29
   18d38:	ldrls	pc, [pc, r3, lsl #2]
   18d3c:	b	18eac <__assert_fail@plt+0x7888>
   18d40:			; <UNDEFINED> instruction: 0x00018db8
   18d44:	andeq	r8, r1, ip, lsr #29
   18d48:	andeq	r8, r1, ip, lsr #29
   18d4c:	andeq	r8, r1, ip, lsr #29
   18d50:	andeq	r8, r1, ip, lsr #29
   18d54:	andeq	r8, r1, ip, lsr #29
   18d58:			; <UNDEFINED> instruction: 0x00018db8
   18d5c:			; <UNDEFINED> instruction: 0x00018db8
   18d60:			; <UNDEFINED> instruction: 0x00018db8
   18d64:	andeq	r8, r1, ip, lsr #29
   18d68:	andeq	r8, r1, ip, lsr #29
   18d6c:	andeq	r8, r1, ip, lsr #29
   18d70:			; <UNDEFINED> instruction: 0x00018db8
   18d74:	andeq	r8, r1, ip, lsr #29
   18d78:			; <UNDEFINED> instruction: 0x00018db8
   18d7c:	andeq	r8, r1, ip, lsr #29
   18d80:	andeq	r8, r1, ip, lsr #29
   18d84:	andeq	r8, r1, ip, lsr #29
   18d88:	andeq	r8, r1, ip, lsr #29
   18d8c:	andeq	r8, r1, ip, lsr #29
   18d90:	andeq	r8, r1, ip, lsr #29
   18d94:	andeq	r8, r1, ip, lsr #29
   18d98:	andeq	r8, r1, ip, lsr #29
   18d9c:	andeq	r8, r1, ip, lsr #29
   18da0:	andeq	r8, r1, ip, lsr #29
   18da4:	andeq	r8, r1, ip, lsr #29
   18da8:	andeq	r8, r1, ip, lsr #29
   18dac:			; <UNDEFINED> instruction: 0x00018db8
   18db0:			; <UNDEFINED> instruction: 0x00018db8
   18db4:			; <UNDEFINED> instruction: 0x00018db8
   18db8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18dbc:	cmp	r3, #0
   18dc0:	bne	19b50 <__assert_fail@plt+0x852c>
   18dc4:	ldr	r3, [fp, #-16]
   18dc8:	add	r3, r3, #2
   18dcc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18dd0:	add	r3, r2, r3
   18dd4:	ldrb	r3, [r3]
   18dd8:	strb	r3, [fp, #-38]	; 0xffffffda
   18ddc:	ldr	r3, [fp, #-16]
   18de0:	add	r3, r3, #2
   18de4:	str	r3, [fp, #-16]
   18de8:	ldr	r2, [fp, #-20]	; 0xffffffec
   18dec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18df0:	cmp	r2, r3
   18df4:	bcs	18e0c <__assert_fail@plt+0x77e8>
   18df8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18dfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e00:	add	r3, r2, r3
   18e04:	mov	r2, #63	; 0x3f
   18e08:	strb	r2, [r3]
   18e0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e10:	add	r3, r3, #1
   18e14:	str	r3, [fp, #-20]	; 0xffffffec
   18e18:	ldr	r2, [fp, #-20]	; 0xffffffec
   18e1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18e20:	cmp	r2, r3
   18e24:	bcs	18e3c <__assert_fail@plt+0x7818>
   18e28:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e30:	add	r3, r2, r3
   18e34:	mov	r2, #34	; 0x22
   18e38:	strb	r2, [r3]
   18e3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e40:	add	r3, r3, #1
   18e44:	str	r3, [fp, #-20]	; 0xffffffec
   18e48:	ldr	r2, [fp, #-20]	; 0xffffffec
   18e4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18e50:	cmp	r2, r3
   18e54:	bcs	18e6c <__assert_fail@plt+0x7848>
   18e58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e60:	add	r3, r2, r3
   18e64:	mov	r2, #34	; 0x22
   18e68:	strb	r2, [r3]
   18e6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e70:	add	r3, r3, #1
   18e74:	str	r3, [fp, #-20]	; 0xffffffec
   18e78:	ldr	r2, [fp, #-20]	; 0xffffffec
   18e7c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18e80:	cmp	r2, r3
   18e84:	bcs	18e9c <__assert_fail@plt+0x7878>
   18e88:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18e8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e90:	add	r3, r2, r3
   18e94:	mov	r2, #63	; 0x3f
   18e98:	strb	r2, [r3]
   18e9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18ea0:	add	r3, r3, #1
   18ea4:	str	r3, [fp, #-20]	; 0xffffffec
   18ea8:	b	18eb0 <__assert_fail@plt+0x788c>
   18eac:	nop			; (mov r0, r0)
   18eb0:	b	18ebc <__assert_fail@plt+0x7898>
   18eb4:	nop			; (mov r0, r0)
   18eb8:	b	19708 <__assert_fail@plt+0x80e4>
   18ebc:	nop			; (mov r0, r0)
   18ec0:	b	19708 <__assert_fail@plt+0x80e4>
   18ec4:	mov	r3, #97	; 0x61
   18ec8:	strb	r3, [fp, #-39]	; 0xffffffd9
   18ecc:	b	18f78 <__assert_fail@plt+0x7954>
   18ed0:	mov	r3, #98	; 0x62
   18ed4:	strb	r3, [fp, #-39]	; 0xffffffd9
   18ed8:	b	18f78 <__assert_fail@plt+0x7954>
   18edc:	mov	r3, #102	; 0x66
   18ee0:	strb	r3, [fp, #-39]	; 0xffffffd9
   18ee4:	b	18f78 <__assert_fail@plt+0x7954>
   18ee8:	mov	r3, #110	; 0x6e
   18eec:	strb	r3, [fp, #-39]	; 0xffffffd9
   18ef0:	b	18f60 <__assert_fail@plt+0x793c>
   18ef4:	mov	r3, #114	; 0x72
   18ef8:	strb	r3, [fp, #-39]	; 0xffffffd9
   18efc:	b	18f60 <__assert_fail@plt+0x793c>
   18f00:	mov	r3, #116	; 0x74
   18f04:	strb	r3, [fp, #-39]	; 0xffffffd9
   18f08:	b	18f60 <__assert_fail@plt+0x793c>
   18f0c:	mov	r3, #118	; 0x76
   18f10:	strb	r3, [fp, #-39]	; 0xffffffd9
   18f14:	b	18f78 <__assert_fail@plt+0x7954>
   18f18:	ldrb	r3, [fp, #-38]	; 0xffffffda
   18f1c:	strb	r3, [fp, #-39]	; 0xffffffd9
   18f20:	ldr	r3, [fp, #4]
   18f24:	cmp	r3, #2
   18f28:	bne	18f3c <__assert_fail@plt+0x7918>
   18f2c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18f30:	cmp	r3, #0
   18f34:	beq	19890 <__assert_fail@plt+0x826c>
   18f38:	b	19b84 <__assert_fail@plt+0x8560>
   18f3c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18f40:	cmp	r3, #0
   18f44:	beq	18f60 <__assert_fail@plt+0x793c>
   18f48:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18f4c:	cmp	r3, #0
   18f50:	beq	18f60 <__assert_fail@plt+0x793c>
   18f54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f58:	cmp	r3, #0
   18f5c:	bne	19898 <__assert_fail@plt+0x8274>
   18f60:	ldr	r3, [fp, #4]
   18f64:	cmp	r3, #2
   18f68:	bne	18f78 <__assert_fail@plt+0x7954>
   18f6c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18f70:	cmp	r3, #0
   18f74:	bne	19b58 <__assert_fail@plt+0x8534>
   18f78:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18f7c:	cmp	r3, #0
   18f80:	beq	196e4 <__assert_fail@plt+0x80c0>
   18f84:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   18f88:	strb	r3, [fp, #-38]	; 0xffffffda
   18f8c:	b	19790 <__assert_fail@plt+0x816c>
   18f90:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18f94:	cmn	r3, #1
   18f98:	bne	18fbc <__assert_fail@plt+0x7998>
   18f9c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   18fa0:	add	r3, r3, #1
   18fa4:	ldrb	r3, [r3]
   18fa8:	cmp	r3, #0
   18fac:	movne	r3, #1
   18fb0:	moveq	r3, #0
   18fb4:	uxtb	r3, r3
   18fb8:	b	18fd0 <__assert_fail@plt+0x79ac>
   18fbc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18fc0:	cmp	r3, #1
   18fc4:	movne	r3, #1
   18fc8:	moveq	r3, #0
   18fcc:	uxtb	r3, r3
   18fd0:	cmp	r3, #0
   18fd4:	bne	196ec <__assert_fail@plt+0x80c8>
   18fd8:	ldr	r3, [fp, #-16]
   18fdc:	cmp	r3, #0
   18fe0:	bne	196f4 <__assert_fail@plt+0x80d0>
   18fe4:	mov	r3, #1
   18fe8:	strb	r3, [fp, #-42]	; 0xffffffd6
   18fec:	ldr	r3, [fp, #4]
   18ff0:	cmp	r3, #2
   18ff4:	bne	196fc <__assert_fail@plt+0x80d8>
   18ff8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18ffc:	cmp	r3, #0
   19000:	beq	196fc <__assert_fail@plt+0x80d8>
   19004:	b	19b84 <__assert_fail@plt+0x8560>
   19008:	mov	r3, #1
   1900c:	strb	r3, [fp, #-36]	; 0xffffffdc
   19010:	mov	r3, #1
   19014:	strb	r3, [fp, #-42]	; 0xffffffd6
   19018:	ldr	r3, [fp, #4]
   1901c:	cmp	r3, #2
   19020:	bne	19704 <__assert_fail@plt+0x80e0>
   19024:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19028:	cmp	r3, #0
   1902c:	bne	19b60 <__assert_fail@plt+0x853c>
   19030:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19034:	cmp	r3, #0
   19038:	beq	19058 <__assert_fail@plt+0x7a34>
   1903c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19040:	cmp	r3, #0
   19044:	bne	19058 <__assert_fail@plt+0x7a34>
   19048:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1904c:	str	r3, [fp, #-24]	; 0xffffffe8
   19050:	mov	r3, #0
   19054:	str	r3, [fp, #-92]	; 0xffffffa4
   19058:	ldr	r2, [fp, #-20]	; 0xffffffec
   1905c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19060:	cmp	r2, r3
   19064:	bcs	1907c <__assert_fail@plt+0x7a58>
   19068:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1906c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19070:	add	r3, r2, r3
   19074:	mov	r2, #39	; 0x27
   19078:	strb	r2, [r3]
   1907c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19080:	add	r3, r3, #1
   19084:	str	r3, [fp, #-20]	; 0xffffffec
   19088:	ldr	r2, [fp, #-20]	; 0xffffffec
   1908c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19090:	cmp	r2, r3
   19094:	bcs	190ac <__assert_fail@plt+0x7a88>
   19098:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1909c:	ldr	r3, [fp, #-20]	; 0xffffffec
   190a0:	add	r3, r2, r3
   190a4:	mov	r2, #92	; 0x5c
   190a8:	strb	r2, [r3]
   190ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   190b0:	add	r3, r3, #1
   190b4:	str	r3, [fp, #-20]	; 0xffffffec
   190b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   190bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   190c0:	cmp	r2, r3
   190c4:	bcs	190dc <__assert_fail@plt+0x7ab8>
   190c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   190cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   190d0:	add	r3, r2, r3
   190d4:	mov	r2, #39	; 0x27
   190d8:	strb	r2, [r3]
   190dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   190e0:	add	r3, r3, #1
   190e4:	str	r3, [fp, #-20]	; 0xffffffec
   190e8:	mov	r3, #0
   190ec:	strb	r3, [fp, #-35]	; 0xffffffdd
   190f0:	b	19704 <__assert_fail@plt+0x80e0>
   190f4:	mov	r3, #1
   190f8:	strb	r3, [fp, #-42]	; 0xffffffd6
   190fc:	b	19708 <__assert_fail@plt+0x80e4>
   19100:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   19104:	cmp	r3, #0
   19108:	beq	19148 <__assert_fail@plt+0x7b24>
   1910c:	mov	r3, #1
   19110:	str	r3, [fp, #-48]	; 0xffffffd0
   19114:	bl	11444 <__ctype_b_loc@plt>
   19118:	mov	r3, r0
   1911c:	ldr	r2, [r3]
   19120:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19124:	lsl	r3, r3, #1
   19128:	add	r3, r2, r3
   1912c:	ldrh	r3, [r3]
   19130:	and	r3, r3, #16384	; 0x4000
   19134:	cmp	r3, #0
   19138:	movne	r3, #1
   1913c:	moveq	r3, #0
   19140:	strb	r3, [fp, #-49]	; 0xffffffcf
   19144:	b	19394 <__assert_fail@plt+0x7d70>
   19148:	sub	r3, fp, #76	; 0x4c
   1914c:	mov	r2, #8
   19150:	mov	r1, #0
   19154:	mov	r0, r3
   19158:	bl	114d4 <memset@plt>
   1915c:	mov	r3, #0
   19160:	str	r3, [fp, #-48]	; 0xffffffd0
   19164:	mov	r3, #1
   19168:	strb	r3, [fp, #-49]	; 0xffffffcf
   1916c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19170:	cmn	r3, #1
   19174:	bne	19184 <__assert_fail@plt+0x7b60>
   19178:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1917c:	bl	1148c <strlen@plt>
   19180:	str	r0, [fp, #-100]	; 0xffffff9c
   19184:	ldr	r2, [fp, #-16]
   19188:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1918c:	add	r3, r2, r3
   19190:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19194:	add	r1, r2, r3
   19198:	ldr	r2, [fp, #-16]
   1919c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   191a0:	add	r3, r2, r3
   191a4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   191a8:	sub	r2, r2, r3
   191ac:	sub	r3, fp, #76	; 0x4c
   191b0:	sub	r0, fp, #80	; 0x50
   191b4:	bl	1da8c <__assert_fail@plt+0xc468>
   191b8:	str	r0, [fp, #-64]	; 0xffffffc0
   191bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   191c0:	cmp	r3, #0
   191c4:	beq	19388 <__assert_fail@plt+0x7d64>
   191c8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   191cc:	cmn	r3, #1
   191d0:	bne	191e0 <__assert_fail@plt+0x7bbc>
   191d4:	mov	r3, #0
   191d8:	strb	r3, [fp, #-49]	; 0xffffffcf
   191dc:	b	19394 <__assert_fail@plt+0x7d70>
   191e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   191e4:	cmn	r3, #2
   191e8:	bne	19240 <__assert_fail@plt+0x7c1c>
   191ec:	mov	r3, #0
   191f0:	strb	r3, [fp, #-49]	; 0xffffffcf
   191f4:	b	19204 <__assert_fail@plt+0x7be0>
   191f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   191fc:	add	r3, r3, #1
   19200:	str	r3, [fp, #-48]	; 0xffffffd0
   19204:	ldr	r2, [fp, #-16]
   19208:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1920c:	add	r2, r2, r3
   19210:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19214:	cmp	r2, r3
   19218:	bcs	19390 <__assert_fail@plt+0x7d6c>
   1921c:	ldr	r2, [fp, #-16]
   19220:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19224:	add	r3, r2, r3
   19228:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1922c:	add	r3, r2, r3
   19230:	ldrb	r3, [r3]
   19234:	cmp	r3, #0
   19238:	bne	191f8 <__assert_fail@plt+0x7bd4>
   1923c:	b	19390 <__assert_fail@plt+0x7d6c>
   19240:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19244:	cmp	r3, #0
   19248:	beq	1933c <__assert_fail@plt+0x7d18>
   1924c:	ldr	r3, [fp, #4]
   19250:	cmp	r3, #2
   19254:	bne	1933c <__assert_fail@plt+0x7d18>
   19258:	mov	r3, #1
   1925c:	str	r3, [fp, #-56]	; 0xffffffc8
   19260:	b	1932c <__assert_fail@plt+0x7d08>
   19264:	ldr	r2, [fp, #-16]
   19268:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1926c:	add	r2, r2, r3
   19270:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19274:	add	r3, r2, r3
   19278:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1927c:	add	r3, r2, r3
   19280:	ldrb	r3, [r3]
   19284:	sub	r3, r3, #91	; 0x5b
   19288:	cmp	r3, #33	; 0x21
   1928c:	ldrls	pc, [pc, r3, lsl #2]
   19290:	b	1931c <__assert_fail@plt+0x7cf8>
   19294:	andeq	r9, r1, r8, ror #22
   19298:	andeq	r9, r1, r8, ror #22
   1929c:	andeq	r9, r1, ip, lsl r3
   192a0:	andeq	r9, r1, r8, ror #22
   192a4:	andeq	r9, r1, ip, lsl r3
   192a8:	andeq	r9, r1, r8, ror #22
   192ac:	andeq	r9, r1, ip, lsl r3
   192b0:	andeq	r9, r1, ip, lsl r3
   192b4:	andeq	r9, r1, ip, lsl r3
   192b8:	andeq	r9, r1, ip, lsl r3
   192bc:	andeq	r9, r1, ip, lsl r3
   192c0:	andeq	r9, r1, ip, lsl r3
   192c4:	andeq	r9, r1, ip, lsl r3
   192c8:	andeq	r9, r1, ip, lsl r3
   192cc:	andeq	r9, r1, ip, lsl r3
   192d0:	andeq	r9, r1, ip, lsl r3
   192d4:	andeq	r9, r1, ip, lsl r3
   192d8:	andeq	r9, r1, ip, lsl r3
   192dc:	andeq	r9, r1, ip, lsl r3
   192e0:	andeq	r9, r1, ip, lsl r3
   192e4:	andeq	r9, r1, ip, lsl r3
   192e8:	andeq	r9, r1, ip, lsl r3
   192ec:	andeq	r9, r1, ip, lsl r3
   192f0:	andeq	r9, r1, ip, lsl r3
   192f4:	andeq	r9, r1, ip, lsl r3
   192f8:	andeq	r9, r1, ip, lsl r3
   192fc:	andeq	r9, r1, ip, lsl r3
   19300:	andeq	r9, r1, ip, lsl r3
   19304:	andeq	r9, r1, ip, lsl r3
   19308:	andeq	r9, r1, ip, lsl r3
   1930c:	andeq	r9, r1, ip, lsl r3
   19310:	andeq	r9, r1, ip, lsl r3
   19314:	andeq	r9, r1, ip, lsl r3
   19318:	andeq	r9, r1, r8, ror #22
   1931c:	nop			; (mov r0, r0)
   19320:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19324:	add	r3, r3, #1
   19328:	str	r3, [fp, #-56]	; 0xffffffc8
   1932c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19330:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19334:	cmp	r2, r3
   19338:	bcc	19264 <__assert_fail@plt+0x7c40>
   1933c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   19340:	mov	r0, r3
   19344:	bl	11360 <iswprint@plt>
   19348:	mov	r3, r0
   1934c:	cmp	r3, #0
   19350:	bne	1935c <__assert_fail@plt+0x7d38>
   19354:	mov	r3, #0
   19358:	strb	r3, [fp, #-49]	; 0xffffffcf
   1935c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19360:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19364:	add	r3, r2, r3
   19368:	str	r3, [fp, #-48]	; 0xffffffd0
   1936c:	sub	r3, fp, #76	; 0x4c
   19370:	mov	r0, r3
   19374:	bl	112dc <mbsinit@plt>
   19378:	mov	r3, r0
   1937c:	cmp	r3, #0
   19380:	beq	19184 <__assert_fail@plt+0x7b60>
   19384:	b	19394 <__assert_fail@plt+0x7d70>
   19388:	nop			; (mov r0, r0)
   1938c:	b	19394 <__assert_fail@plt+0x7d70>
   19390:	nop			; (mov r0, r0)
   19394:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   19398:	strb	r3, [fp, #-42]	; 0xffffffd6
   1939c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   193a0:	cmp	r3, #1
   193a4:	bhi	193c8 <__assert_fail@plt+0x7da4>
   193a8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   193ac:	cmp	r3, #0
   193b0:	beq	19708 <__assert_fail@plt+0x80e4>
   193b4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   193b8:	eor	r3, r3, #1
   193bc:	uxtb	r3, r3
   193c0:	cmp	r3, #0
   193c4:	beq	19708 <__assert_fail@plt+0x80e4>
   193c8:	ldr	r2, [fp, #-16]
   193cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   193d0:	add	r3, r2, r3
   193d4:	str	r3, [fp, #-68]	; 0xffffffbc
   193d8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   193dc:	cmp	r3, #0
   193e0:	beq	195a0 <__assert_fail@plt+0x7f7c>
   193e4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   193e8:	eor	r3, r3, #1
   193ec:	uxtb	r3, r3
   193f0:	cmp	r3, #0
   193f4:	beq	195a0 <__assert_fail@plt+0x7f7c>
   193f8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   193fc:	cmp	r3, #0
   19400:	bne	19b70 <__assert_fail@plt+0x854c>
   19404:	mov	r3, #1
   19408:	strb	r3, [fp, #-41]	; 0xffffffd7
   1940c:	ldr	r3, [fp, #4]
   19410:	cmp	r3, #2
   19414:	bne	194c4 <__assert_fail@plt+0x7ea0>
   19418:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1941c:	eor	r3, r3, #1
   19420:	uxtb	r3, r3
   19424:	cmp	r3, #0
   19428:	beq	194c4 <__assert_fail@plt+0x7ea0>
   1942c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19430:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19434:	cmp	r2, r3
   19438:	bcs	19450 <__assert_fail@plt+0x7e2c>
   1943c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19440:	ldr	r3, [fp, #-20]	; 0xffffffec
   19444:	add	r3, r2, r3
   19448:	mov	r2, #39	; 0x27
   1944c:	strb	r2, [r3]
   19450:	ldr	r3, [fp, #-20]	; 0xffffffec
   19454:	add	r3, r3, #1
   19458:	str	r3, [fp, #-20]	; 0xffffffec
   1945c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19460:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19464:	cmp	r2, r3
   19468:	bcs	19480 <__assert_fail@plt+0x7e5c>
   1946c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19470:	ldr	r3, [fp, #-20]	; 0xffffffec
   19474:	add	r3, r2, r3
   19478:	mov	r2, #36	; 0x24
   1947c:	strb	r2, [r3]
   19480:	ldr	r3, [fp, #-20]	; 0xffffffec
   19484:	add	r3, r3, #1
   19488:	str	r3, [fp, #-20]	; 0xffffffec
   1948c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19490:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19494:	cmp	r2, r3
   19498:	bcs	194b0 <__assert_fail@plt+0x7e8c>
   1949c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   194a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   194a4:	add	r3, r2, r3
   194a8:	mov	r2, #39	; 0x27
   194ac:	strb	r2, [r3]
   194b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   194b4:	add	r3, r3, #1
   194b8:	str	r3, [fp, #-20]	; 0xffffffec
   194bc:	mov	r3, #1
   194c0:	strb	r3, [fp, #-35]	; 0xffffffdd
   194c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   194c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   194cc:	cmp	r2, r3
   194d0:	bcs	194e8 <__assert_fail@plt+0x7ec4>
   194d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   194d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   194dc:	add	r3, r2, r3
   194e0:	mov	r2, #92	; 0x5c
   194e4:	strb	r2, [r3]
   194e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   194ec:	add	r3, r3, #1
   194f0:	str	r3, [fp, #-20]	; 0xffffffec
   194f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   194f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   194fc:	cmp	r2, r3
   19500:	bcs	19528 <__assert_fail@plt+0x7f04>
   19504:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19508:	ldr	r3, [fp, #-20]	; 0xffffffec
   1950c:	add	r3, r2, r3
   19510:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19514:	lsr	r2, r2, #6
   19518:	uxtb	r2, r2
   1951c:	add	r2, r2, #48	; 0x30
   19520:	uxtb	r2, r2
   19524:	strb	r2, [r3]
   19528:	ldr	r3, [fp, #-20]	; 0xffffffec
   1952c:	add	r3, r3, #1
   19530:	str	r3, [fp, #-20]	; 0xffffffec
   19534:	ldr	r2, [fp, #-20]	; 0xffffffec
   19538:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1953c:	cmp	r2, r3
   19540:	bcs	19570 <__assert_fail@plt+0x7f4c>
   19544:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19548:	ldr	r3, [fp, #-20]	; 0xffffffec
   1954c:	add	r3, r2, r3
   19550:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19554:	lsr	r2, r2, #3
   19558:	uxtb	r2, r2
   1955c:	and	r2, r2, #7
   19560:	uxtb	r2, r2
   19564:	add	r2, r2, #48	; 0x30
   19568:	uxtb	r2, r2
   1956c:	strb	r2, [r3]
   19570:	ldr	r3, [fp, #-20]	; 0xffffffec
   19574:	add	r3, r3, #1
   19578:	str	r3, [fp, #-20]	; 0xffffffec
   1957c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19580:	and	r3, r3, #7
   19584:	uxtb	r3, r3
   19588:	add	r3, r3, #48	; 0x30
   1958c:	strb	r3, [fp, #-38]	; 0xffffffda
   19590:	b	195e4 <__assert_fail@plt+0x7fc0>
   19594:	muleq	r2, r8, r0
   19598:	andeq	r0, r2, r0, lsr #1
   1959c:	muleq	r2, ip, r0
   195a0:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   195a4:	cmp	r3, #0
   195a8:	beq	195e4 <__assert_fail@plt+0x7fc0>
   195ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   195b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   195b4:	cmp	r2, r3
   195b8:	bcs	195d0 <__assert_fail@plt+0x7fac>
   195bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   195c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   195c4:	add	r3, r2, r3
   195c8:	mov	r2, #92	; 0x5c
   195cc:	strb	r2, [r3]
   195d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   195d4:	add	r3, r3, #1
   195d8:	str	r3, [fp, #-20]	; 0xffffffec
   195dc:	mov	r3, #0
   195e0:	strb	r3, [fp, #-40]	; 0xffffffd8
   195e4:	ldr	r3, [fp, #-16]
   195e8:	add	r2, r3, #1
   195ec:	ldr	r3, [fp, #-68]	; 0xffffffbc
   195f0:	cmp	r2, r3
   195f4:	bcs	196d4 <__assert_fail@plt+0x80b0>
   195f8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   195fc:	cmp	r3, #0
   19600:	beq	19680 <__assert_fail@plt+0x805c>
   19604:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   19608:	eor	r3, r3, #1
   1960c:	uxtb	r3, r3
   19610:	cmp	r3, #0
   19614:	beq	19680 <__assert_fail@plt+0x805c>
   19618:	ldr	r2, [fp, #-20]	; 0xffffffec
   1961c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19620:	cmp	r2, r3
   19624:	bcs	1963c <__assert_fail@plt+0x8018>
   19628:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1962c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19630:	add	r3, r2, r3
   19634:	mov	r2, #39	; 0x27
   19638:	strb	r2, [r3]
   1963c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19640:	add	r3, r3, #1
   19644:	str	r3, [fp, #-20]	; 0xffffffec
   19648:	ldr	r2, [fp, #-20]	; 0xffffffec
   1964c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19650:	cmp	r2, r3
   19654:	bcs	1966c <__assert_fail@plt+0x8048>
   19658:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1965c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19660:	add	r3, r2, r3
   19664:	mov	r2, #39	; 0x27
   19668:	strb	r2, [r3]
   1966c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19670:	add	r3, r3, #1
   19674:	str	r3, [fp, #-20]	; 0xffffffec
   19678:	mov	r3, #0
   1967c:	strb	r3, [fp, #-35]	; 0xffffffdd
   19680:	ldr	r2, [fp, #-20]	; 0xffffffec
   19684:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19688:	cmp	r2, r3
   1968c:	bcs	196a4 <__assert_fail@plt+0x8080>
   19690:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19694:	ldr	r3, [fp, #-20]	; 0xffffffec
   19698:	add	r3, r2, r3
   1969c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   196a0:	strb	r2, [r3]
   196a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   196a8:	add	r3, r3, #1
   196ac:	str	r3, [fp, #-20]	; 0xffffffec
   196b0:	ldr	r3, [fp, #-16]
   196b4:	add	r3, r3, #1
   196b8:	str	r3, [fp, #-16]
   196bc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   196c0:	ldr	r3, [fp, #-16]
   196c4:	add	r3, r2, r3
   196c8:	ldrb	r3, [r3]
   196cc:	strb	r3, [fp, #-38]	; 0xffffffda
   196d0:	b	193d8 <__assert_fail@plt+0x7db4>
   196d4:	nop			; (mov r0, r0)
   196d8:	b	198a4 <__assert_fail@plt+0x8280>
   196dc:	nop			; (mov r0, r0)
   196e0:	b	19708 <__assert_fail@plt+0x80e4>
   196e4:	nop			; (mov r0, r0)
   196e8:	b	19708 <__assert_fail@plt+0x80e4>
   196ec:	nop			; (mov r0, r0)
   196f0:	b	19708 <__assert_fail@plt+0x80e4>
   196f4:	nop			; (mov r0, r0)
   196f8:	b	19708 <__assert_fail@plt+0x80e4>
   196fc:	nop			; (mov r0, r0)
   19700:	b	19708 <__assert_fail@plt+0x80e4>
   19704:	nop			; (mov r0, r0)
   19708:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1970c:	eor	r3, r3, #1
   19710:	uxtb	r3, r3
   19714:	cmp	r3, #0
   19718:	bne	19728 <__assert_fail@plt+0x8104>
   1971c:	ldr	r3, [fp, #4]
   19720:	cmp	r3, #2
   19724:	bne	1973c <__assert_fail@plt+0x8118>
   19728:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1972c:	eor	r3, r3, #1
   19730:	uxtb	r3, r3
   19734:	cmp	r3, #0
   19738:	bne	1977c <__assert_fail@plt+0x8158>
   1973c:	ldr	r3, [fp, #12]
   19740:	cmp	r3, #0
   19744:	beq	1977c <__assert_fail@plt+0x8158>
   19748:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1974c:	lsr	r3, r3, #5
   19750:	uxtb	r3, r3
   19754:	lsl	r3, r3, #2
   19758:	ldr	r2, [fp, #12]
   1975c:	add	r3, r2, r3
   19760:	ldr	r2, [r3]
   19764:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19768:	and	r3, r3, #31
   1976c:	lsr	r3, r2, r3
   19770:	and	r3, r3, #1
   19774:	cmp	r3, #0
   19778:	bne	19790 <__assert_fail@plt+0x816c>
   1977c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   19780:	eor	r3, r3, #1
   19784:	uxtb	r3, r3
   19788:	cmp	r3, #0
   1978c:	bne	198a0 <__assert_fail@plt+0x827c>
   19790:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19794:	cmp	r3, #0
   19798:	bne	19b78 <__assert_fail@plt+0x8554>
   1979c:	mov	r3, #1
   197a0:	strb	r3, [fp, #-41]	; 0xffffffd7
   197a4:	ldr	r3, [fp, #4]
   197a8:	cmp	r3, #2
   197ac:	bne	1985c <__assert_fail@plt+0x8238>
   197b0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   197b4:	eor	r3, r3, #1
   197b8:	uxtb	r3, r3
   197bc:	cmp	r3, #0
   197c0:	beq	1985c <__assert_fail@plt+0x8238>
   197c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   197c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   197cc:	cmp	r2, r3
   197d0:	bcs	197e8 <__assert_fail@plt+0x81c4>
   197d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   197d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   197dc:	add	r3, r2, r3
   197e0:	mov	r2, #39	; 0x27
   197e4:	strb	r2, [r3]
   197e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   197ec:	add	r3, r3, #1
   197f0:	str	r3, [fp, #-20]	; 0xffffffec
   197f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   197f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   197fc:	cmp	r2, r3
   19800:	bcs	19818 <__assert_fail@plt+0x81f4>
   19804:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1980c:	add	r3, r2, r3
   19810:	mov	r2, #36	; 0x24
   19814:	strb	r2, [r3]
   19818:	ldr	r3, [fp, #-20]	; 0xffffffec
   1981c:	add	r3, r3, #1
   19820:	str	r3, [fp, #-20]	; 0xffffffec
   19824:	ldr	r2, [fp, #-20]	; 0xffffffec
   19828:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1982c:	cmp	r2, r3
   19830:	bcs	19848 <__assert_fail@plt+0x8224>
   19834:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19838:	ldr	r3, [fp, #-20]	; 0xffffffec
   1983c:	add	r3, r2, r3
   19840:	mov	r2, #39	; 0x27
   19844:	strb	r2, [r3]
   19848:	ldr	r3, [fp, #-20]	; 0xffffffec
   1984c:	add	r3, r3, #1
   19850:	str	r3, [fp, #-20]	; 0xffffffec
   19854:	mov	r3, #1
   19858:	strb	r3, [fp, #-35]	; 0xffffffdd
   1985c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19860:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19864:	cmp	r2, r3
   19868:	bcs	19880 <__assert_fail@plt+0x825c>
   1986c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19870:	ldr	r3, [fp, #-20]	; 0xffffffec
   19874:	add	r3, r2, r3
   19878:	mov	r2, #92	; 0x5c
   1987c:	strb	r2, [r3]
   19880:	ldr	r3, [fp, #-20]	; 0xffffffec
   19884:	add	r3, r3, #1
   19888:	str	r3, [fp, #-20]	; 0xffffffec
   1988c:	b	198a4 <__assert_fail@plt+0x8280>
   19890:	nop			; (mov r0, r0)
   19894:	b	198a4 <__assert_fail@plt+0x8280>
   19898:	nop			; (mov r0, r0)
   1989c:	b	198a4 <__assert_fail@plt+0x8280>
   198a0:	nop			; (mov r0, r0)
   198a4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   198a8:	cmp	r3, #0
   198ac:	beq	1992c <__assert_fail@plt+0x8308>
   198b0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   198b4:	eor	r3, r3, #1
   198b8:	uxtb	r3, r3
   198bc:	cmp	r3, #0
   198c0:	beq	1992c <__assert_fail@plt+0x8308>
   198c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   198c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   198cc:	cmp	r2, r3
   198d0:	bcs	198e8 <__assert_fail@plt+0x82c4>
   198d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   198d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   198dc:	add	r3, r2, r3
   198e0:	mov	r2, #39	; 0x27
   198e4:	strb	r2, [r3]
   198e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   198ec:	add	r3, r3, #1
   198f0:	str	r3, [fp, #-20]	; 0xffffffec
   198f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   198f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   198fc:	cmp	r2, r3
   19900:	bcs	19918 <__assert_fail@plt+0x82f4>
   19904:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19908:	ldr	r3, [fp, #-20]	; 0xffffffec
   1990c:	add	r3, r2, r3
   19910:	mov	r2, #39	; 0x27
   19914:	strb	r2, [r3]
   19918:	ldr	r3, [fp, #-20]	; 0xffffffec
   1991c:	add	r3, r3, #1
   19920:	str	r3, [fp, #-20]	; 0xffffffec
   19924:	mov	r3, #0
   19928:	strb	r3, [fp, #-35]	; 0xffffffdd
   1992c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19930:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19934:	cmp	r2, r3
   19938:	bcs	19950 <__assert_fail@plt+0x832c>
   1993c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19940:	ldr	r3, [fp, #-20]	; 0xffffffec
   19944:	add	r3, r2, r3
   19948:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1994c:	strb	r2, [r3]
   19950:	ldr	r3, [fp, #-20]	; 0xffffffec
   19954:	add	r3, r3, #1
   19958:	str	r3, [fp, #-20]	; 0xffffffec
   1995c:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   19960:	eor	r3, r3, #1
   19964:	uxtb	r3, r3
   19968:	cmp	r3, #0
   1996c:	beq	19978 <__assert_fail@plt+0x8354>
   19970:	mov	r3, #0
   19974:	strb	r3, [fp, #-37]	; 0xffffffdb
   19978:	ldr	r3, [fp, #-16]
   1997c:	add	r3, r3, #1
   19980:	str	r3, [fp, #-16]
   19984:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19988:	cmn	r3, #1
   1998c:	bne	199b4 <__assert_fail@plt+0x8390>
   19990:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19994:	ldr	r3, [fp, #-16]
   19998:	add	r3, r2, r3
   1999c:	ldrb	r3, [r3]
   199a0:	cmp	r3, #0
   199a4:	movne	r3, #1
   199a8:	moveq	r3, #0
   199ac:	uxtb	r3, r3
   199b0:	b	199cc <__assert_fail@plt+0x83a8>
   199b4:	ldr	r2, [fp, #-16]
   199b8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   199bc:	cmp	r2, r3
   199c0:	movne	r3, #1
   199c4:	moveq	r3, #0
   199c8:	uxtb	r3, r3
   199cc:	cmp	r3, #0
   199d0:	bne	187f8 <__assert_fail@plt+0x71d4>
   199d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   199d8:	cmp	r3, #0
   199dc:	bne	199f8 <__assert_fail@plt+0x83d4>
   199e0:	ldr	r3, [fp, #4]
   199e4:	cmp	r3, #2
   199e8:	bne	199f8 <__assert_fail@plt+0x83d4>
   199ec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   199f0:	cmp	r3, #0
   199f4:	bne	19b80 <__assert_fail@plt+0x855c>
   199f8:	ldr	r3, [fp, #4]
   199fc:	cmp	r3, #2
   19a00:	bne	19aa0 <__assert_fail@plt+0x847c>
   19a04:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19a08:	eor	r3, r3, #1
   19a0c:	uxtb	r3, r3
   19a10:	cmp	r3, #0
   19a14:	beq	19aa0 <__assert_fail@plt+0x847c>
   19a18:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   19a1c:	cmp	r3, #0
   19a20:	beq	19aa0 <__assert_fail@plt+0x847c>
   19a24:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   19a28:	cmp	r3, #0
   19a2c:	beq	19a74 <__assert_fail@plt+0x8450>
   19a30:	ldr	r3, [fp, #20]
   19a34:	str	r3, [sp, #16]
   19a38:	ldr	r3, [fp, #16]
   19a3c:	str	r3, [sp, #12]
   19a40:	ldr	r3, [fp, #12]
   19a44:	str	r3, [sp, #8]
   19a48:	ldr	r3, [fp, #8]
   19a4c:	str	r3, [sp, #4]
   19a50:	mov	r3, #5
   19a54:	str	r3, [sp]
   19a58:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19a5c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19a60:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19a64:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19a68:	bl	18548 <__assert_fail@plt+0x6f24>
   19a6c:	mov	r3, r0
   19a70:	b	19be8 <__assert_fail@plt+0x85c4>
   19a74:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19a78:	cmp	r3, #0
   19a7c:	bne	19aa0 <__assert_fail@plt+0x847c>
   19a80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19a84:	cmp	r3, #0
   19a88:	beq	19aa0 <__assert_fail@plt+0x847c>
   19a8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19a90:	str	r3, [fp, #-92]	; 0xffffffa4
   19a94:	mov	r3, #0
   19a98:	str	r3, [fp, #-20]	; 0xffffffec
   19a9c:	b	185d4 <__assert_fail@plt+0x6fb0>
   19aa0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19aa4:	cmp	r3, #0
   19aa8:	beq	19b14 <__assert_fail@plt+0x84f0>
   19aac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19ab0:	eor	r3, r3, #1
   19ab4:	uxtb	r3, r3
   19ab8:	cmp	r3, #0
   19abc:	beq	19b14 <__assert_fail@plt+0x84f0>
   19ac0:	b	19b04 <__assert_fail@plt+0x84e0>
   19ac4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ac8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19acc:	cmp	r2, r3
   19ad0:	bcs	19aec <__assert_fail@plt+0x84c8>
   19ad4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19ad8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19adc:	add	r3, r2, r3
   19ae0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19ae4:	ldrb	r2, [r2]
   19ae8:	strb	r2, [r3]
   19aec:	ldr	r3, [fp, #-20]	; 0xffffffec
   19af0:	add	r3, r3, #1
   19af4:	str	r3, [fp, #-20]	; 0xffffffec
   19af8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19afc:	add	r3, r3, #1
   19b00:	str	r3, [fp, #-28]	; 0xffffffe4
   19b04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19b08:	ldrb	r3, [r3]
   19b0c:	cmp	r3, #0
   19b10:	bne	19ac4 <__assert_fail@plt+0x84a0>
   19b14:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19b1c:	cmp	r2, r3
   19b20:	bcs	19b38 <__assert_fail@plt+0x8514>
   19b24:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19b28:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b2c:	add	r3, r2, r3
   19b30:	mov	r2, #0
   19b34:	strb	r2, [r3]
   19b38:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b3c:	b	19be8 <__assert_fail@plt+0x85c4>
   19b40:	nop			; (mov r0, r0)
   19b44:	b	19b84 <__assert_fail@plt+0x8560>
   19b48:	nop			; (mov r0, r0)
   19b4c:	b	19b84 <__assert_fail@plt+0x8560>
   19b50:	nop			; (mov r0, r0)
   19b54:	b	19b84 <__assert_fail@plt+0x8560>
   19b58:	nop			; (mov r0, r0)
   19b5c:	b	19b84 <__assert_fail@plt+0x8560>
   19b60:	nop			; (mov r0, r0)
   19b64:	b	19b84 <__assert_fail@plt+0x8560>
   19b68:	nop			; (mov r0, r0)
   19b6c:	b	19b84 <__assert_fail@plt+0x8560>
   19b70:	nop			; (mov r0, r0)
   19b74:	b	19b84 <__assert_fail@plt+0x8560>
   19b78:	nop			; (mov r0, r0)
   19b7c:	b	19b84 <__assert_fail@plt+0x8560>
   19b80:	nop			; (mov r0, r0)
   19b84:	ldr	r3, [fp, #4]
   19b88:	cmp	r3, #2
   19b8c:	bne	19ba4 <__assert_fail@plt+0x8580>
   19b90:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19b94:	cmp	r3, #0
   19b98:	beq	19ba4 <__assert_fail@plt+0x8580>
   19b9c:	mov	r3, #4
   19ba0:	str	r3, [fp, #4]
   19ba4:	ldr	r3, [fp, #8]
   19ba8:	bic	r3, r3, #2
   19bac:	ldr	r2, [fp, #20]
   19bb0:	str	r2, [sp, #16]
   19bb4:	ldr	r2, [fp, #16]
   19bb8:	str	r2, [sp, #12]
   19bbc:	mov	r2, #0
   19bc0:	str	r2, [sp, #8]
   19bc4:	str	r3, [sp, #4]
   19bc8:	ldr	r3, [fp, #4]
   19bcc:	str	r3, [sp]
   19bd0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19bd4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19bd8:	ldr	r1, [fp, #-92]	; 0xffffffa4
   19bdc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19be0:	bl	18548 <__assert_fail@plt+0x6f24>
   19be4:	mov	r3, r0
   19be8:	mov	r0, r3
   19bec:	sub	sp, fp, #8
   19bf0:	pop	{r4, fp, pc}
   19bf4:	push	{fp, lr}
   19bf8:	add	fp, sp, #4
   19bfc:	sub	sp, sp, #56	; 0x38
   19c00:	str	r0, [fp, #-24]	; 0xffffffe8
   19c04:	str	r1, [fp, #-28]	; 0xffffffe4
   19c08:	str	r2, [fp, #-32]	; 0xffffffe0
   19c0c:	str	r3, [fp, #-36]	; 0xffffffdc
   19c10:	ldr	r3, [fp, #4]
   19c14:	cmp	r3, #0
   19c18:	beq	19c24 <__assert_fail@plt+0x8600>
   19c1c:	ldr	r3, [fp, #4]
   19c20:	b	19c28 <__assert_fail@plt+0x8604>
   19c24:	ldr	r3, [pc, #132]	; 19cb0 <__assert_fail@plt+0x868c>
   19c28:	str	r3, [fp, #-8]
   19c2c:	bl	114bc <__errno_location@plt>
   19c30:	mov	r3, r0
   19c34:	ldr	r3, [r3]
   19c38:	str	r3, [fp, #-12]
   19c3c:	ldr	r3, [fp, #-8]
   19c40:	ldr	r3, [r3]
   19c44:	ldr	r2, [fp, #-8]
   19c48:	ldr	r2, [r2, #4]
   19c4c:	ldr	r1, [fp, #-8]
   19c50:	add	r1, r1, #8
   19c54:	ldr	r0, [fp, #-8]
   19c58:	ldr	r0, [r0, #40]	; 0x28
   19c5c:	ldr	ip, [fp, #-8]
   19c60:	ldr	ip, [ip, #44]	; 0x2c
   19c64:	str	ip, [sp, #16]
   19c68:	str	r0, [sp, #12]
   19c6c:	str	r1, [sp, #8]
   19c70:	str	r2, [sp, #4]
   19c74:	str	r3, [sp]
   19c78:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19c7c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19c80:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19c84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19c88:	bl	18548 <__assert_fail@plt+0x6f24>
   19c8c:	str	r0, [fp, #-16]
   19c90:	bl	114bc <__errno_location@plt>
   19c94:	mov	r2, r0
   19c98:	ldr	r3, [fp, #-12]
   19c9c:	str	r3, [r2]
   19ca0:	ldr	r3, [fp, #-16]
   19ca4:	mov	r0, r3
   19ca8:	sub	sp, fp, #4
   19cac:	pop	{fp, pc}
   19cb0:	andeq	r1, r3, ip, lsl #4
   19cb4:	push	{fp, lr}
   19cb8:	add	fp, sp, #4
   19cbc:	sub	sp, sp, #16
   19cc0:	str	r0, [fp, #-8]
   19cc4:	str	r1, [fp, #-12]
   19cc8:	str	r2, [fp, #-16]
   19ccc:	ldr	r3, [fp, #-16]
   19cd0:	mov	r2, #0
   19cd4:	ldr	r1, [fp, #-12]
   19cd8:	ldr	r0, [fp, #-8]
   19cdc:	bl	19cf0 <__assert_fail@plt+0x86cc>
   19ce0:	mov	r3, r0
   19ce4:	mov	r0, r3
   19ce8:	sub	sp, fp, #4
   19cec:	pop	{fp, pc}
   19cf0:	push	{fp, lr}
   19cf4:	add	fp, sp, #4
   19cf8:	sub	sp, sp, #64	; 0x40
   19cfc:	str	r0, [fp, #-32]	; 0xffffffe0
   19d00:	str	r1, [fp, #-36]	; 0xffffffdc
   19d04:	str	r2, [fp, #-40]	; 0xffffffd8
   19d08:	str	r3, [fp, #-44]	; 0xffffffd4
   19d0c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19d10:	cmp	r3, #0
   19d14:	beq	19d20 <__assert_fail@plt+0x86fc>
   19d18:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19d1c:	b	19d24 <__assert_fail@plt+0x8700>
   19d20:	ldr	r3, [pc, #292]	; 19e4c <__assert_fail@plt+0x8828>
   19d24:	str	r3, [fp, #-8]
   19d28:	bl	114bc <__errno_location@plt>
   19d2c:	mov	r3, r0
   19d30:	ldr	r3, [r3]
   19d34:	str	r3, [fp, #-12]
   19d38:	ldr	r3, [fp, #-8]
   19d3c:	ldr	r3, [r3, #4]
   19d40:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19d44:	cmp	r2, #0
   19d48:	moveq	r2, #1
   19d4c:	movne	r2, #0
   19d50:	uxtb	r2, r2
   19d54:	orr	r3, r3, r2
   19d58:	str	r3, [fp, #-16]
   19d5c:	ldr	r3, [fp, #-8]
   19d60:	ldr	r3, [r3]
   19d64:	ldr	r2, [fp, #-8]
   19d68:	add	r2, r2, #8
   19d6c:	ldr	r1, [fp, #-8]
   19d70:	ldr	r1, [r1, #40]	; 0x28
   19d74:	ldr	r0, [fp, #-8]
   19d78:	ldr	r0, [r0, #44]	; 0x2c
   19d7c:	str	r0, [sp, #16]
   19d80:	str	r1, [sp, #12]
   19d84:	str	r2, [sp, #8]
   19d88:	ldr	r2, [fp, #-16]
   19d8c:	str	r2, [sp, #4]
   19d90:	str	r3, [sp]
   19d94:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19d98:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19d9c:	mov	r1, #0
   19da0:	mov	r0, #0
   19da4:	bl	18548 <__assert_fail@plt+0x6f24>
   19da8:	mov	r3, r0
   19dac:	add	r3, r3, #1
   19db0:	str	r3, [fp, #-20]	; 0xffffffec
   19db4:	ldr	r0, [fp, #-20]	; 0xffffffec
   19db8:	bl	1bbfc <__assert_fail@plt+0xa5d8>
   19dbc:	mov	r3, r0
   19dc0:	str	r3, [fp, #-24]	; 0xffffffe8
   19dc4:	ldr	r3, [fp, #-8]
   19dc8:	ldr	r3, [r3]
   19dcc:	ldr	r2, [fp, #-8]
   19dd0:	add	r2, r2, #8
   19dd4:	ldr	r1, [fp, #-8]
   19dd8:	ldr	r1, [r1, #40]	; 0x28
   19ddc:	ldr	r0, [fp, #-8]
   19de0:	ldr	r0, [r0, #44]	; 0x2c
   19de4:	str	r0, [sp, #16]
   19de8:	str	r1, [sp, #12]
   19dec:	str	r2, [sp, #8]
   19df0:	ldr	r2, [fp, #-16]
   19df4:	str	r2, [sp, #4]
   19df8:	str	r3, [sp]
   19dfc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19e00:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19e04:	ldr	r1, [fp, #-20]	; 0xffffffec
   19e08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19e0c:	bl	18548 <__assert_fail@plt+0x6f24>
   19e10:	bl	114bc <__errno_location@plt>
   19e14:	mov	r2, r0
   19e18:	ldr	r3, [fp, #-12]
   19e1c:	str	r3, [r2]
   19e20:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19e24:	cmp	r3, #0
   19e28:	beq	19e3c <__assert_fail@plt+0x8818>
   19e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e30:	sub	r2, r3, #1
   19e34:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19e38:	str	r2, [r3]
   19e3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e40:	mov	r0, r3
   19e44:	sub	sp, fp, #4
   19e48:	pop	{fp, pc}
   19e4c:	andeq	r1, r3, ip, lsl #4
   19e50:	push	{fp, lr}
   19e54:	add	fp, sp, #4
   19e58:	sub	sp, sp, #8
   19e5c:	ldr	r3, [pc, #196]	; 19f28 <__assert_fail@plt+0x8904>
   19e60:	ldr	r3, [r3]
   19e64:	str	r3, [fp, #-12]
   19e68:	mov	r3, #1
   19e6c:	str	r3, [fp, #-8]
   19e70:	b	19e9c <__assert_fail@plt+0x8878>
   19e74:	ldr	r3, [fp, #-8]
   19e78:	lsl	r3, r3, #3
   19e7c:	ldr	r2, [fp, #-12]
   19e80:	add	r3, r2, r3
   19e84:	ldr	r3, [r3, #4]
   19e88:	mov	r0, r3
   19e8c:	bl	1d784 <__assert_fail@plt+0xc160>
   19e90:	ldr	r3, [fp, #-8]
   19e94:	add	r3, r3, #1
   19e98:	str	r3, [fp, #-8]
   19e9c:	ldr	r3, [pc, #136]	; 19f2c <__assert_fail@plt+0x8908>
   19ea0:	ldr	r3, [r3]
   19ea4:	ldr	r2, [fp, #-8]
   19ea8:	cmp	r2, r3
   19eac:	blt	19e74 <__assert_fail@plt+0x8850>
   19eb0:	ldr	r3, [fp, #-12]
   19eb4:	ldr	r3, [r3, #4]
   19eb8:	ldr	r2, [pc, #112]	; 19f30 <__assert_fail@plt+0x890c>
   19ebc:	cmp	r3, r2
   19ec0:	beq	19eec <__assert_fail@plt+0x88c8>
   19ec4:	ldr	r3, [fp, #-12]
   19ec8:	ldr	r3, [r3, #4]
   19ecc:	mov	r0, r3
   19ed0:	bl	1d784 <__assert_fail@plt+0xc160>
   19ed4:	ldr	r3, [pc, #88]	; 19f34 <__assert_fail@plt+0x8910>
   19ed8:	mov	r2, #256	; 0x100
   19edc:	str	r2, [r3]
   19ee0:	ldr	r3, [pc, #76]	; 19f34 <__assert_fail@plt+0x8910>
   19ee4:	ldr	r2, [pc, #68]	; 19f30 <__assert_fail@plt+0x890c>
   19ee8:	str	r2, [r3, #4]
   19eec:	ldr	r3, [fp, #-12]
   19ef0:	ldr	r2, [pc, #60]	; 19f34 <__assert_fail@plt+0x8910>
   19ef4:	cmp	r3, r2
   19ef8:	beq	19f10 <__assert_fail@plt+0x88ec>
   19efc:	ldr	r0, [fp, #-12]
   19f00:	bl	1d784 <__assert_fail@plt+0xc160>
   19f04:	ldr	r3, [pc, #28]	; 19f28 <__assert_fail@plt+0x8904>
   19f08:	ldr	r2, [pc, #36]	; 19f34 <__assert_fail@plt+0x8910>
   19f0c:	str	r2, [r3]
   19f10:	ldr	r3, [pc, #20]	; 19f2c <__assert_fail@plt+0x8908>
   19f14:	mov	r2, #1
   19f18:	str	r2, [r3]
   19f1c:	nop			; (mov r0, r0)
   19f20:	sub	sp, fp, #4
   19f24:	pop	{fp, pc}
   19f28:	andeq	r1, r3, ip, ror r1
   19f2c:	andeq	r1, r3, r0, ror r1
   19f30:	andeq	r1, r3, ip, lsr r2
   19f34:	andeq	r1, r3, r4, ror r1
   19f38:	push	{r4, fp, lr}
   19f3c:	add	fp, sp, #8
   19f40:	sub	sp, sp, #84	; 0x54
   19f44:	str	r0, [fp, #-56]	; 0xffffffc8
   19f48:	str	r1, [fp, #-60]	; 0xffffffc4
   19f4c:	str	r2, [fp, #-64]	; 0xffffffc0
   19f50:	str	r3, [fp, #-68]	; 0xffffffbc
   19f54:	bl	114bc <__errno_location@plt>
   19f58:	mov	r3, r0
   19f5c:	ldr	r3, [r3]
   19f60:	str	r3, [fp, #-24]	; 0xffffffe8
   19f64:	ldr	r3, [pc, #640]	; 1a1ec <__assert_fail@plt+0x8bc8>
   19f68:	ldr	r3, [r3]
   19f6c:	str	r3, [fp, #-16]
   19f70:	mvn	r3, #-2147483648	; 0x80000000
   19f74:	str	r3, [fp, #-28]	; 0xffffffe4
   19f78:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19f7c:	cmp	r3, #0
   19f80:	blt	19f94 <__assert_fail@plt+0x8970>
   19f84:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19f88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19f8c:	cmp	r2, r3
   19f90:	blt	19f98 <__assert_fail@plt+0x8974>
   19f94:	bl	115e8 <abort@plt>
   19f98:	ldr	r3, [pc, #592]	; 1a1f0 <__assert_fail@plt+0x8bcc>
   19f9c:	ldr	r2, [r3]
   19fa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19fa4:	cmp	r2, r3
   19fa8:	bgt	1a07c <__assert_fail@plt+0x8a58>
   19fac:	ldr	r3, [fp, #-16]
   19fb0:	ldr	r2, [pc, #572]	; 1a1f4 <__assert_fail@plt+0x8bd0>
   19fb4:	cmp	r3, r2
   19fb8:	moveq	r3, #1
   19fbc:	movne	r3, #0
   19fc0:	strb	r3, [fp, #-29]	; 0xffffffe3
   19fc4:	ldr	r3, [pc, #548]	; 1a1f0 <__assert_fail@plt+0x8bcc>
   19fc8:	ldr	r3, [r3]
   19fcc:	str	r3, [fp, #-48]	; 0xffffffd0
   19fd0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   19fd4:	cmp	r3, #0
   19fd8:	beq	19fe4 <__assert_fail@plt+0x89c0>
   19fdc:	mov	r0, #0
   19fe0:	b	19fe8 <__assert_fail@plt+0x89c4>
   19fe4:	ldr	r0, [fp, #-16]
   19fe8:	ldr	r3, [pc, #512]	; 1a1f0 <__assert_fail@plt+0x8bcc>
   19fec:	ldr	r3, [r3]
   19ff0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19ff4:	sub	r3, r2, r3
   19ff8:	add	r2, r3, #1
   19ffc:	sub	r1, fp, #48	; 0x30
   1a000:	mov	r3, #8
   1a004:	str	r3, [sp]
   1a008:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a00c:	bl	1bf1c <__assert_fail@plt+0xa8f8>
   1a010:	str	r0, [fp, #-16]
   1a014:	ldr	r2, [pc, #464]	; 1a1ec <__assert_fail@plt+0x8bc8>
   1a018:	ldr	r3, [fp, #-16]
   1a01c:	str	r3, [r2]
   1a020:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1a024:	cmp	r3, #0
   1a028:	beq	1a03c <__assert_fail@plt+0x8a18>
   1a02c:	ldr	r3, [fp, #-16]
   1a030:	ldr	r2, [pc, #444]	; 1a1f4 <__assert_fail@plt+0x8bd0>
   1a034:	ldm	r2, {r0, r1}
   1a038:	stm	r3, {r0, r1}
   1a03c:	ldr	r3, [pc, #428]	; 1a1f0 <__assert_fail@plt+0x8bcc>
   1a040:	ldr	r3, [r3]
   1a044:	lsl	r3, r3, #3
   1a048:	ldr	r2, [fp, #-16]
   1a04c:	add	r0, r2, r3
   1a050:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a054:	ldr	r3, [pc, #404]	; 1a1f0 <__assert_fail@plt+0x8bcc>
   1a058:	ldr	r3, [r3]
   1a05c:	sub	r3, r2, r3
   1a060:	lsl	r3, r3, #3
   1a064:	mov	r2, r3
   1a068:	mov	r1, #0
   1a06c:	bl	114d4 <memset@plt>
   1a070:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a074:	ldr	r2, [pc, #372]	; 1a1f0 <__assert_fail@plt+0x8bcc>
   1a078:	str	r3, [r2]
   1a07c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a080:	lsl	r3, r3, #3
   1a084:	ldr	r2, [fp, #-16]
   1a088:	add	r3, r2, r3
   1a08c:	ldr	r3, [r3]
   1a090:	str	r3, [fp, #-36]	; 0xffffffdc
   1a094:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a098:	lsl	r3, r3, #3
   1a09c:	ldr	r2, [fp, #-16]
   1a0a0:	add	r3, r2, r3
   1a0a4:	ldr	r3, [r3, #4]
   1a0a8:	str	r3, [fp, #-20]	; 0xffffffec
   1a0ac:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a0b0:	ldr	r3, [r3, #4]
   1a0b4:	orr	r3, r3, #1
   1a0b8:	str	r3, [fp, #-40]	; 0xffffffd8
   1a0bc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a0c0:	ldr	r3, [r3]
   1a0c4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a0c8:	add	r2, r2, #8
   1a0cc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a0d0:	ldr	r1, [r1, #40]	; 0x28
   1a0d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a0d8:	ldr	r0, [r0, #44]	; 0x2c
   1a0dc:	str	r0, [sp, #16]
   1a0e0:	str	r1, [sp, #12]
   1a0e4:	str	r2, [sp, #8]
   1a0e8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a0ec:	str	r2, [sp, #4]
   1a0f0:	str	r3, [sp]
   1a0f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a0f8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a0fc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a100:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a104:	bl	18548 <__assert_fail@plt+0x6f24>
   1a108:	str	r0, [fp, #-44]	; 0xffffffd4
   1a10c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a110:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a114:	cmp	r2, r3
   1a118:	bhi	1a1cc <__assert_fail@plt+0x8ba8>
   1a11c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a120:	lsl	r3, r3, #3
   1a124:	ldr	r2, [fp, #-16]
   1a128:	add	r3, r2, r3
   1a12c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a130:	add	r2, r2, #1
   1a134:	str	r2, [fp, #-36]	; 0xffffffdc
   1a138:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a13c:	str	r2, [r3]
   1a140:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a144:	ldr	r2, [pc, #172]	; 1a1f8 <__assert_fail@plt+0x8bd4>
   1a148:	cmp	r3, r2
   1a14c:	beq	1a158 <__assert_fail@plt+0x8b34>
   1a150:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a154:	bl	1d784 <__assert_fail@plt+0xc160>
   1a158:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a15c:	lsl	r3, r3, #3
   1a160:	ldr	r2, [fp, #-16]
   1a164:	add	r4, r2, r3
   1a168:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a16c:	bl	1bbfc <__assert_fail@plt+0xa5d8>
   1a170:	mov	r3, r0
   1a174:	str	r3, [fp, #-20]	; 0xffffffec
   1a178:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a17c:	str	r3, [r4, #4]
   1a180:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a184:	ldr	r3, [r3]
   1a188:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a18c:	add	r2, r2, #8
   1a190:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a194:	ldr	r1, [r1, #40]	; 0x28
   1a198:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a19c:	ldr	r0, [r0, #44]	; 0x2c
   1a1a0:	str	r0, [sp, #16]
   1a1a4:	str	r1, [sp, #12]
   1a1a8:	str	r2, [sp, #8]
   1a1ac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a1b0:	str	r2, [sp, #4]
   1a1b4:	str	r3, [sp]
   1a1b8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a1bc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a1c0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a1c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a1c8:	bl	18548 <__assert_fail@plt+0x6f24>
   1a1cc:	bl	114bc <__errno_location@plt>
   1a1d0:	mov	r2, r0
   1a1d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a1d8:	str	r3, [r2]
   1a1dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a1e0:	mov	r0, r3
   1a1e4:	sub	sp, fp, #8
   1a1e8:	pop	{r4, fp, pc}
   1a1ec:	andeq	r1, r3, ip, ror r1
   1a1f0:	andeq	r1, r3, r0, ror r1
   1a1f4:	andeq	r1, r3, r4, ror r1
   1a1f8:	andeq	r1, r3, ip, lsr r2
   1a1fc:	push	{fp, lr}
   1a200:	add	fp, sp, #4
   1a204:	sub	sp, sp, #8
   1a208:	str	r0, [fp, #-8]
   1a20c:	str	r1, [fp, #-12]
   1a210:	ldr	r3, [pc, #28]	; 1a234 <__assert_fail@plt+0x8c10>
   1a214:	mvn	r2, #0
   1a218:	ldr	r1, [fp, #-12]
   1a21c:	ldr	r0, [fp, #-8]
   1a220:	bl	19f38 <__assert_fail@plt+0x8914>
   1a224:	mov	r3, r0
   1a228:	mov	r0, r3
   1a22c:	sub	sp, fp, #4
   1a230:	pop	{fp, pc}
   1a234:	andeq	r1, r3, ip, lsl #4
   1a238:	push	{fp, lr}
   1a23c:	add	fp, sp, #4
   1a240:	sub	sp, sp, #16
   1a244:	str	r0, [fp, #-8]
   1a248:	str	r1, [fp, #-12]
   1a24c:	str	r2, [fp, #-16]
   1a250:	ldr	r3, [pc, #28]	; 1a274 <__assert_fail@plt+0x8c50>
   1a254:	ldr	r2, [fp, #-16]
   1a258:	ldr	r1, [fp, #-12]
   1a25c:	ldr	r0, [fp, #-8]
   1a260:	bl	19f38 <__assert_fail@plt+0x8914>
   1a264:	mov	r3, r0
   1a268:	mov	r0, r3
   1a26c:	sub	sp, fp, #4
   1a270:	pop	{fp, pc}
   1a274:	andeq	r1, r3, ip, lsl #4
   1a278:	push	{fp, lr}
   1a27c:	add	fp, sp, #4
   1a280:	sub	sp, sp, #8
   1a284:	str	r0, [fp, #-8]
   1a288:	ldr	r1, [fp, #-8]
   1a28c:	mov	r0, #0
   1a290:	bl	1a1fc <__assert_fail@plt+0x8bd8>
   1a294:	mov	r3, r0
   1a298:	mov	r0, r3
   1a29c:	sub	sp, fp, #4
   1a2a0:	pop	{fp, pc}
   1a2a4:	push	{fp, lr}
   1a2a8:	add	fp, sp, #4
   1a2ac:	sub	sp, sp, #8
   1a2b0:	str	r0, [fp, #-8]
   1a2b4:	str	r1, [fp, #-12]
   1a2b8:	ldr	r2, [fp, #-12]
   1a2bc:	ldr	r1, [fp, #-8]
   1a2c0:	mov	r0, #0
   1a2c4:	bl	1a238 <__assert_fail@plt+0x8c14>
   1a2c8:	mov	r3, r0
   1a2cc:	mov	r0, r3
   1a2d0:	sub	sp, fp, #4
   1a2d4:	pop	{fp, pc}
   1a2d8:	push	{fp, lr}
   1a2dc:	add	fp, sp, #4
   1a2e0:	sub	sp, sp, #64	; 0x40
   1a2e4:	str	r0, [fp, #-56]	; 0xffffffc8
   1a2e8:	str	r1, [fp, #-60]	; 0xffffffc4
   1a2ec:	str	r2, [fp, #-64]	; 0xffffffc0
   1a2f0:	sub	r3, fp, #52	; 0x34
   1a2f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a2f8:	mov	r0, r3
   1a2fc:	bl	183e4 <__assert_fail@plt+0x6dc0>
   1a300:	sub	r3, fp, #52	; 0x34
   1a304:	mvn	r2, #0
   1a308:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a30c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a310:	bl	19f38 <__assert_fail@plt+0x8914>
   1a314:	mov	r3, r0
   1a318:	mov	r0, r3
   1a31c:	sub	sp, fp, #4
   1a320:	pop	{fp, pc}
   1a324:	push	{fp, lr}
   1a328:	add	fp, sp, #4
   1a32c:	sub	sp, sp, #64	; 0x40
   1a330:	str	r0, [fp, #-56]	; 0xffffffc8
   1a334:	str	r1, [fp, #-60]	; 0xffffffc4
   1a338:	str	r2, [fp, #-64]	; 0xffffffc0
   1a33c:	str	r3, [fp, #-68]	; 0xffffffbc
   1a340:	sub	r3, fp, #52	; 0x34
   1a344:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a348:	mov	r0, r3
   1a34c:	bl	183e4 <__assert_fail@plt+0x6dc0>
   1a350:	sub	r3, fp, #52	; 0x34
   1a354:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a358:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a35c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a360:	bl	19f38 <__assert_fail@plt+0x8914>
   1a364:	mov	r3, r0
   1a368:	mov	r0, r3
   1a36c:	sub	sp, fp, #4
   1a370:	pop	{fp, pc}
   1a374:	push	{fp, lr}
   1a378:	add	fp, sp, #4
   1a37c:	sub	sp, sp, #8
   1a380:	str	r0, [fp, #-8]
   1a384:	str	r1, [fp, #-12]
   1a388:	ldr	r2, [fp, #-12]
   1a38c:	ldr	r1, [fp, #-8]
   1a390:	mov	r0, #0
   1a394:	bl	1a2d8 <__assert_fail@plt+0x8cb4>
   1a398:	mov	r3, r0
   1a39c:	mov	r0, r3
   1a3a0:	sub	sp, fp, #4
   1a3a4:	pop	{fp, pc}
   1a3a8:	push	{fp, lr}
   1a3ac:	add	fp, sp, #4
   1a3b0:	sub	sp, sp, #16
   1a3b4:	str	r0, [fp, #-8]
   1a3b8:	str	r1, [fp, #-12]
   1a3bc:	str	r2, [fp, #-16]
   1a3c0:	ldr	r3, [fp, #-16]
   1a3c4:	ldr	r2, [fp, #-12]
   1a3c8:	ldr	r1, [fp, #-8]
   1a3cc:	mov	r0, #0
   1a3d0:	bl	1a324 <__assert_fail@plt+0x8d00>
   1a3d4:	mov	r3, r0
   1a3d8:	mov	r0, r3
   1a3dc:	sub	sp, fp, #4
   1a3e0:	pop	{fp, pc}
   1a3e4:	push	{fp, lr}
   1a3e8:	add	fp, sp, #4
   1a3ec:	sub	sp, sp, #64	; 0x40
   1a3f0:	str	r0, [fp, #-56]	; 0xffffffc8
   1a3f4:	str	r1, [fp, #-60]	; 0xffffffc4
   1a3f8:	mov	r3, r2
   1a3fc:	strb	r3, [fp, #-61]	; 0xffffffc3
   1a400:	ldr	r3, [pc, #84]	; 1a45c <__assert_fail@plt+0x8e38>
   1a404:	sub	ip, fp, #52	; 0x34
   1a408:	mov	lr, r3
   1a40c:	ldm	lr!, {r0, r1, r2, r3}
   1a410:	stmia	ip!, {r0, r1, r2, r3}
   1a414:	ldm	lr!, {r0, r1, r2, r3}
   1a418:	stmia	ip!, {r0, r1, r2, r3}
   1a41c:	ldm	lr, {r0, r1, r2, r3}
   1a420:	stm	ip, {r0, r1, r2, r3}
   1a424:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   1a428:	sub	r3, fp, #52	; 0x34
   1a42c:	mov	r2, #1
   1a430:	mov	r0, r3
   1a434:	bl	18250 <__assert_fail@plt+0x6c2c>
   1a438:	sub	r3, fp, #52	; 0x34
   1a43c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a440:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1a444:	mov	r0, #0
   1a448:	bl	19f38 <__assert_fail@plt+0x8914>
   1a44c:	mov	r3, r0
   1a450:	mov	r0, r3
   1a454:	sub	sp, fp, #4
   1a458:	pop	{fp, pc}
   1a45c:	andeq	r1, r3, ip, lsl #4
   1a460:	push	{fp, lr}
   1a464:	add	fp, sp, #4
   1a468:	sub	sp, sp, #8
   1a46c:	str	r0, [fp, #-8]
   1a470:	mov	r3, r1
   1a474:	strb	r3, [fp, #-9]
   1a478:	ldrb	r3, [fp, #-9]
   1a47c:	mov	r2, r3
   1a480:	mvn	r1, #0
   1a484:	ldr	r0, [fp, #-8]
   1a488:	bl	1a3e4 <__assert_fail@plt+0x8dc0>
   1a48c:	mov	r3, r0
   1a490:	mov	r0, r3
   1a494:	sub	sp, fp, #4
   1a498:	pop	{fp, pc}
   1a49c:	push	{fp, lr}
   1a4a0:	add	fp, sp, #4
   1a4a4:	sub	sp, sp, #8
   1a4a8:	str	r0, [fp, #-8]
   1a4ac:	mov	r1, #58	; 0x3a
   1a4b0:	ldr	r0, [fp, #-8]
   1a4b4:	bl	1a460 <__assert_fail@plt+0x8e3c>
   1a4b8:	mov	r3, r0
   1a4bc:	mov	r0, r3
   1a4c0:	sub	sp, fp, #4
   1a4c4:	pop	{fp, pc}
   1a4c8:	push	{fp, lr}
   1a4cc:	add	fp, sp, #4
   1a4d0:	sub	sp, sp, #8
   1a4d4:	str	r0, [fp, #-8]
   1a4d8:	str	r1, [fp, #-12]
   1a4dc:	mov	r2, #58	; 0x3a
   1a4e0:	ldr	r1, [fp, #-12]
   1a4e4:	ldr	r0, [fp, #-8]
   1a4e8:	bl	1a3e4 <__assert_fail@plt+0x8dc0>
   1a4ec:	mov	r3, r0
   1a4f0:	mov	r0, r3
   1a4f4:	sub	sp, fp, #4
   1a4f8:	pop	{fp, pc}
   1a4fc:	push	{fp, lr}
   1a500:	add	fp, sp, #4
   1a504:	sub	sp, sp, #112	; 0x70
   1a508:	str	r0, [fp, #-56]	; 0xffffffc8
   1a50c:	str	r1, [fp, #-60]	; 0xffffffc4
   1a510:	str	r2, [fp, #-64]	; 0xffffffc0
   1a514:	sub	r3, fp, #116	; 0x74
   1a518:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a51c:	mov	r0, r3
   1a520:	bl	183e4 <__assert_fail@plt+0x6dc0>
   1a524:	sub	ip, fp, #52	; 0x34
   1a528:	sub	lr, fp, #116	; 0x74
   1a52c:	ldm	lr!, {r0, r1, r2, r3}
   1a530:	stmia	ip!, {r0, r1, r2, r3}
   1a534:	ldm	lr!, {r0, r1, r2, r3}
   1a538:	stmia	ip!, {r0, r1, r2, r3}
   1a53c:	ldm	lr, {r0, r1, r2, r3}
   1a540:	stm	ip, {r0, r1, r2, r3}
   1a544:	sub	r3, fp, #52	; 0x34
   1a548:	mov	r2, #1
   1a54c:	mov	r1, #58	; 0x3a
   1a550:	mov	r0, r3
   1a554:	bl	18250 <__assert_fail@plt+0x6c2c>
   1a558:	sub	r3, fp, #52	; 0x34
   1a55c:	mvn	r2, #0
   1a560:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a564:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a568:	bl	19f38 <__assert_fail@plt+0x8914>
   1a56c:	mov	r3, r0
   1a570:	mov	r0, r3
   1a574:	sub	sp, fp, #4
   1a578:	pop	{fp, pc}
   1a57c:	push	{fp, lr}
   1a580:	add	fp, sp, #4
   1a584:	sub	sp, sp, #24
   1a588:	str	r0, [fp, #-8]
   1a58c:	str	r1, [fp, #-12]
   1a590:	str	r2, [fp, #-16]
   1a594:	str	r3, [fp, #-20]	; 0xffffffec
   1a598:	mvn	r3, #0
   1a59c:	str	r3, [sp]
   1a5a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a5a4:	ldr	r2, [fp, #-16]
   1a5a8:	ldr	r1, [fp, #-12]
   1a5ac:	ldr	r0, [fp, #-8]
   1a5b0:	bl	1a5c4 <__assert_fail@plt+0x8fa0>
   1a5b4:	mov	r3, r0
   1a5b8:	mov	r0, r3
   1a5bc:	sub	sp, fp, #4
   1a5c0:	pop	{fp, pc}
   1a5c4:	push	{fp, lr}
   1a5c8:	add	fp, sp, #4
   1a5cc:	sub	sp, sp, #64	; 0x40
   1a5d0:	str	r0, [fp, #-56]	; 0xffffffc8
   1a5d4:	str	r1, [fp, #-60]	; 0xffffffc4
   1a5d8:	str	r2, [fp, #-64]	; 0xffffffc0
   1a5dc:	str	r3, [fp, #-68]	; 0xffffffbc
   1a5e0:	ldr	r3, [pc, #84]	; 1a63c <__assert_fail@plt+0x9018>
   1a5e4:	sub	ip, fp, #52	; 0x34
   1a5e8:	mov	lr, r3
   1a5ec:	ldm	lr!, {r0, r1, r2, r3}
   1a5f0:	stmia	ip!, {r0, r1, r2, r3}
   1a5f4:	ldm	lr!, {r0, r1, r2, r3}
   1a5f8:	stmia	ip!, {r0, r1, r2, r3}
   1a5fc:	ldm	lr, {r0, r1, r2, r3}
   1a600:	stm	ip, {r0, r1, r2, r3}
   1a604:	sub	r3, fp, #52	; 0x34
   1a608:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1a60c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a610:	mov	r0, r3
   1a614:	bl	18368 <__assert_fail@plt+0x6d44>
   1a618:	sub	r3, fp, #52	; 0x34
   1a61c:	ldr	r2, [fp, #4]
   1a620:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a624:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a628:	bl	19f38 <__assert_fail@plt+0x8914>
   1a62c:	mov	r3, r0
   1a630:	mov	r0, r3
   1a634:	sub	sp, fp, #4
   1a638:	pop	{fp, pc}
   1a63c:	andeq	r1, r3, ip, lsl #4
   1a640:	push	{fp, lr}
   1a644:	add	fp, sp, #4
   1a648:	sub	sp, sp, #16
   1a64c:	str	r0, [fp, #-8]
   1a650:	str	r1, [fp, #-12]
   1a654:	str	r2, [fp, #-16]
   1a658:	ldr	r3, [fp, #-16]
   1a65c:	ldr	r2, [fp, #-12]
   1a660:	ldr	r1, [fp, #-8]
   1a664:	mov	r0, #0
   1a668:	bl	1a57c <__assert_fail@plt+0x8f58>
   1a66c:	mov	r3, r0
   1a670:	mov	r0, r3
   1a674:	sub	sp, fp, #4
   1a678:	pop	{fp, pc}
   1a67c:	push	{fp, lr}
   1a680:	add	fp, sp, #4
   1a684:	sub	sp, sp, #24
   1a688:	str	r0, [fp, #-8]
   1a68c:	str	r1, [fp, #-12]
   1a690:	str	r2, [fp, #-16]
   1a694:	str	r3, [fp, #-20]	; 0xffffffec
   1a698:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a69c:	str	r3, [sp]
   1a6a0:	ldr	r3, [fp, #-16]
   1a6a4:	ldr	r2, [fp, #-12]
   1a6a8:	ldr	r1, [fp, #-8]
   1a6ac:	mov	r0, #0
   1a6b0:	bl	1a5c4 <__assert_fail@plt+0x8fa0>
   1a6b4:	mov	r3, r0
   1a6b8:	mov	r0, r3
   1a6bc:	sub	sp, fp, #4
   1a6c0:	pop	{fp, pc}
   1a6c4:	push	{fp, lr}
   1a6c8:	add	fp, sp, #4
   1a6cc:	sub	sp, sp, #16
   1a6d0:	str	r0, [fp, #-8]
   1a6d4:	str	r1, [fp, #-12]
   1a6d8:	str	r2, [fp, #-16]
   1a6dc:	ldr	r3, [pc, #28]	; 1a700 <__assert_fail@plt+0x90dc>
   1a6e0:	ldr	r2, [fp, #-16]
   1a6e4:	ldr	r1, [fp, #-12]
   1a6e8:	ldr	r0, [fp, #-8]
   1a6ec:	bl	19f38 <__assert_fail@plt+0x8914>
   1a6f0:	mov	r3, r0
   1a6f4:	mov	r0, r3
   1a6f8:	sub	sp, fp, #4
   1a6fc:	pop	{fp, pc}
   1a700:	andeq	r1, r3, r0, lsl #3
   1a704:	push	{fp, lr}
   1a708:	add	fp, sp, #4
   1a70c:	sub	sp, sp, #8
   1a710:	str	r0, [fp, #-8]
   1a714:	str	r1, [fp, #-12]
   1a718:	ldr	r2, [fp, #-12]
   1a71c:	ldr	r1, [fp, #-8]
   1a720:	mov	r0, #0
   1a724:	bl	1a6c4 <__assert_fail@plt+0x90a0>
   1a728:	mov	r3, r0
   1a72c:	mov	r0, r3
   1a730:	sub	sp, fp, #4
   1a734:	pop	{fp, pc}
   1a738:	push	{fp, lr}
   1a73c:	add	fp, sp, #4
   1a740:	sub	sp, sp, #8
   1a744:	str	r0, [fp, #-8]
   1a748:	str	r1, [fp, #-12]
   1a74c:	mvn	r2, #0
   1a750:	ldr	r1, [fp, #-12]
   1a754:	ldr	r0, [fp, #-8]
   1a758:	bl	1a6c4 <__assert_fail@plt+0x90a0>
   1a75c:	mov	r3, r0
   1a760:	mov	r0, r3
   1a764:	sub	sp, fp, #4
   1a768:	pop	{fp, pc}
   1a76c:	push	{fp, lr}
   1a770:	add	fp, sp, #4
   1a774:	sub	sp, sp, #8
   1a778:	str	r0, [fp, #-8]
   1a77c:	ldr	r1, [fp, #-8]
   1a780:	mov	r0, #0
   1a784:	bl	1a738 <__assert_fail@plt+0x9114>
   1a788:	mov	r3, r0
   1a78c:	mov	r0, r3
   1a790:	sub	sp, fp, #4
   1a794:	pop	{fp, pc}
   1a798:	push	{fp, lr}
   1a79c:	add	fp, sp, #4
   1a7a0:	sub	sp, sp, #112	; 0x70
   1a7a4:	str	r0, [fp, #-112]	; 0xffffff90
   1a7a8:	sub	r3, fp, #108	; 0x6c
   1a7ac:	mov	r1, r3
   1a7b0:	ldr	r0, [pc, #60]	; 1a7f4 <__assert_fail@plt+0x91d0>
   1a7b4:	bl	1f020 <__assert_fail@plt+0xd9fc>
   1a7b8:	mov	r3, r0
   1a7bc:	cmp	r3, #0
   1a7c0:	beq	1a7cc <__assert_fail@plt+0x91a8>
   1a7c4:	mov	r3, #0
   1a7c8:	b	1a7e8 <__assert_fail@plt+0x91c4>
   1a7cc:	ldrd	r2, [fp, #-12]
   1a7d0:	ldr	r1, [fp, #-112]	; 0xffffff90
   1a7d4:	strd	r2, [r1]
   1a7d8:	ldrd	r2, [fp, #-108]	; 0xffffff94
   1a7dc:	ldr	r1, [fp, #-112]	; 0xffffff90
   1a7e0:	strd	r2, [r1, #8]
   1a7e4:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a7e8:	mov	r0, r3
   1a7ec:	sub	sp, fp, #4
   1a7f0:	pop	{fp, pc}
   1a7f4:	andeq	r0, r2, r4, lsr #1
   1a7f8:	push	{fp, lr}
   1a7fc:	add	fp, sp, #4
   1a800:	sub	sp, sp, #4080	; 0xff0
   1a804:	str	r0, [fp, #-4072]	; 0xfffff018
   1a808:	str	r1, [fp, #-4076]	; 0xfffff014
   1a80c:	str	r2, [fp, #-4080]	; 0xfffff010
   1a810:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1a814:	cmn	r3, #100	; 0x64
   1a818:	beq	1a82c <__assert_fail@plt+0x9208>
   1a81c:	ldr	r3, [fp, #-4076]	; 0xfffff014
   1a820:	ldrb	r3, [r3]
   1a824:	cmp	r3, #47	; 0x2f
   1a828:	bne	1a840 <__assert_fail@plt+0x921c>
   1a82c:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1a830:	ldr	r0, [fp, #-4076]	; 0xfffff014
   1a834:	bl	1b274 <__assert_fail@plt+0x9c50>
   1a838:	mov	r3, r0
   1a83c:	b	1aa60 <__assert_fail@plt+0x943c>
   1a840:	sub	r3, fp, #4048	; 0xfd0
   1a844:	sub	r3, r3, #4
   1a848:	sub	r3, r3, #12
   1a84c:	ldr	r2, [fp, #-4076]	; 0xfffff014
   1a850:	ldr	r1, [fp, #-4072]	; 0xfffff018
   1a854:	mov	r0, r3
   1a858:	bl	1ca48 <__assert_fail@plt+0xb424>
   1a85c:	str	r0, [fp, #-8]
   1a860:	ldr	r3, [fp, #-8]
   1a864:	cmp	r3, #0
   1a868:	beq	1a920 <__assert_fail@plt+0x92fc>
   1a86c:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1a870:	ldr	r0, [fp, #-8]
   1a874:	bl	1b274 <__assert_fail@plt+0x9c50>
   1a878:	str	r0, [fp, #-12]
   1a87c:	bl	114bc <__errno_location@plt>
   1a880:	mov	r3, r0
   1a884:	ldr	r3, [r3]
   1a888:	str	r3, [fp, #-16]
   1a88c:	sub	r3, fp, #4048	; 0xfd0
   1a890:	sub	r3, r3, #4
   1a894:	sub	r3, r3, #12
   1a898:	ldr	r2, [fp, #-8]
   1a89c:	cmp	r2, r3
   1a8a0:	beq	1a8ac <__assert_fail@plt+0x9288>
   1a8a4:	ldr	r0, [fp, #-8]
   1a8a8:	bl	1d784 <__assert_fail@plt+0xc160>
   1a8ac:	ldr	r3, [fp, #-12]
   1a8b0:	cmn	r3, #1
   1a8b4:	beq	1a8c0 <__assert_fail@plt+0x929c>
   1a8b8:	ldr	r3, [fp, #-12]
   1a8bc:	b	1aa60 <__assert_fail@plt+0x943c>
   1a8c0:	ldr	r3, [fp, #-16]
   1a8c4:	cmp	r3, #20
   1a8c8:	beq	1a920 <__assert_fail@plt+0x92fc>
   1a8cc:	ldr	r3, [fp, #-16]
   1a8d0:	cmp	r3, #2
   1a8d4:	beq	1a920 <__assert_fail@plt+0x92fc>
   1a8d8:	ldr	r3, [fp, #-16]
   1a8dc:	cmp	r3, #1
   1a8e0:	beq	1a920 <__assert_fail@plt+0x92fc>
   1a8e4:	ldr	r3, [fp, #-16]
   1a8e8:	cmp	r3, #13
   1a8ec:	beq	1a920 <__assert_fail@plt+0x92fc>
   1a8f0:	ldr	r3, [fp, #-16]
   1a8f4:	cmp	r3, #38	; 0x26
   1a8f8:	beq	1a920 <__assert_fail@plt+0x92fc>
   1a8fc:	ldr	r3, [fp, #-16]
   1a900:	cmp	r3, #95	; 0x5f
   1a904:	beq	1a920 <__assert_fail@plt+0x92fc>
   1a908:	bl	114bc <__errno_location@plt>
   1a90c:	mov	r2, r0
   1a910:	ldr	r3, [fp, #-16]
   1a914:	str	r3, [r2]
   1a918:	ldr	r3, [fp, #-12]
   1a91c:	b	1aa60 <__assert_fail@plt+0x943c>
   1a920:	sub	r3, fp, #32
   1a924:	mov	r0, r3
   1a928:	bl	1dc68 <__assert_fail@plt+0xc644>
   1a92c:	mov	r3, r0
   1a930:	cmp	r3, #0
   1a934:	beq	1a94c <__assert_fail@plt+0x9328>
   1a938:	bl	114bc <__errno_location@plt>
   1a93c:	mov	r3, r0
   1a940:	ldr	r3, [r3]
   1a944:	mov	r0, r3
   1a948:	bl	1db38 <__assert_fail@plt+0xc514>
   1a94c:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1a950:	cmp	r3, #0
   1a954:	blt	1a98c <__assert_fail@plt+0x9368>
   1a958:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a95c:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1a960:	cmp	r2, r3
   1a964:	bne	1a98c <__assert_fail@plt+0x9368>
   1a968:	sub	r3, fp, #32
   1a96c:	mov	r0, r3
   1a970:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1a974:	bl	114bc <__errno_location@plt>
   1a978:	mov	r2, r0
   1a97c:	mov	r3, #9
   1a980:	str	r3, [r2]
   1a984:	mvn	r3, #0
   1a988:	b	1aa60 <__assert_fail@plt+0x943c>
   1a98c:	ldr	r0, [fp, #-4072]	; 0xfffff018
   1a990:	bl	11588 <fchdir@plt>
   1a994:	mov	r3, r0
   1a998:	cmp	r3, #0
   1a99c:	beq	1a9d4 <__assert_fail@plt+0x93b0>
   1a9a0:	bl	114bc <__errno_location@plt>
   1a9a4:	mov	r3, r0
   1a9a8:	ldr	r3, [r3]
   1a9ac:	str	r3, [fp, #-20]	; 0xffffffec
   1a9b0:	sub	r3, fp, #32
   1a9b4:	mov	r0, r3
   1a9b8:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1a9bc:	bl	114bc <__errno_location@plt>
   1a9c0:	mov	r2, r0
   1a9c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a9c8:	str	r3, [r2]
   1a9cc:	mvn	r3, #0
   1a9d0:	b	1aa60 <__assert_fail@plt+0x943c>
   1a9d4:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1a9d8:	ldr	r0, [fp, #-4076]	; 0xfffff014
   1a9dc:	bl	1b274 <__assert_fail@plt+0x9c50>
   1a9e0:	str	r0, [fp, #-24]	; 0xffffffe8
   1a9e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a9e8:	cmn	r3, #1
   1a9ec:	bne	1aa00 <__assert_fail@plt+0x93dc>
   1a9f0:	bl	114bc <__errno_location@plt>
   1a9f4:	mov	r3, r0
   1a9f8:	ldr	r3, [r3]
   1a9fc:	b	1aa04 <__assert_fail@plt+0x93e0>
   1aa00:	mov	r3, #0
   1aa04:	str	r3, [fp, #-20]	; 0xffffffec
   1aa08:	sub	r3, fp, #32
   1aa0c:	mov	r0, r3
   1aa10:	bl	1dcf8 <__assert_fail@plt+0xc6d4>
   1aa14:	mov	r3, r0
   1aa18:	cmp	r3, #0
   1aa1c:	beq	1aa34 <__assert_fail@plt+0x9410>
   1aa20:	bl	114bc <__errno_location@plt>
   1aa24:	mov	r3, r0
   1aa28:	ldr	r3, [r3]
   1aa2c:	mov	r0, r3
   1aa30:	bl	1db78 <__assert_fail@plt+0xc554>
   1aa34:	sub	r3, fp, #32
   1aa38:	mov	r0, r3
   1aa3c:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1aa40:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa44:	cmp	r3, #0
   1aa48:	beq	1aa5c <__assert_fail@plt+0x9438>
   1aa4c:	bl	114bc <__errno_location@plt>
   1aa50:	mov	r2, r0
   1aa54:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa58:	str	r3, [r2]
   1aa5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aa60:	mov	r0, r3
   1aa64:	sub	sp, fp, #4
   1aa68:	pop	{fp, pc}
   1aa6c:	push	{fp, lr}
   1aa70:	add	fp, sp, #4
   1aa74:	sub	sp, sp, #4080	; 0xff0
   1aa78:	str	r0, [fp, #-4072]	; 0xfffff018
   1aa7c:	str	r1, [fp, #-4076]	; 0xfffff014
   1aa80:	str	r2, [fp, #-4080]	; 0xfffff010
   1aa84:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1aa88:	cmn	r3, #100	; 0x64
   1aa8c:	beq	1aaa0 <__assert_fail@plt+0x947c>
   1aa90:	ldr	r3, [fp, #-4076]	; 0xfffff014
   1aa94:	ldrb	r3, [r3]
   1aa98:	cmp	r3, #47	; 0x2f
   1aa9c:	bne	1aab4 <__assert_fail@plt+0x9490>
   1aaa0:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1aaa4:	ldr	r0, [fp, #-4076]	; 0xfffff014
   1aaa8:	bl	1b2b4 <__assert_fail@plt+0x9c90>
   1aaac:	mov	r3, r0
   1aab0:	b	1acd4 <__assert_fail@plt+0x96b0>
   1aab4:	sub	r3, fp, #4048	; 0xfd0
   1aab8:	sub	r3, r3, #4
   1aabc:	sub	r3, r3, #12
   1aac0:	ldr	r2, [fp, #-4076]	; 0xfffff014
   1aac4:	ldr	r1, [fp, #-4072]	; 0xfffff018
   1aac8:	mov	r0, r3
   1aacc:	bl	1ca48 <__assert_fail@plt+0xb424>
   1aad0:	str	r0, [fp, #-8]
   1aad4:	ldr	r3, [fp, #-8]
   1aad8:	cmp	r3, #0
   1aadc:	beq	1ab94 <__assert_fail@plt+0x9570>
   1aae0:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1aae4:	ldr	r0, [fp, #-8]
   1aae8:	bl	1b2b4 <__assert_fail@plt+0x9c90>
   1aaec:	str	r0, [fp, #-12]
   1aaf0:	bl	114bc <__errno_location@plt>
   1aaf4:	mov	r3, r0
   1aaf8:	ldr	r3, [r3]
   1aafc:	str	r3, [fp, #-16]
   1ab00:	sub	r3, fp, #4048	; 0xfd0
   1ab04:	sub	r3, r3, #4
   1ab08:	sub	r3, r3, #12
   1ab0c:	ldr	r2, [fp, #-8]
   1ab10:	cmp	r2, r3
   1ab14:	beq	1ab20 <__assert_fail@plt+0x94fc>
   1ab18:	ldr	r0, [fp, #-8]
   1ab1c:	bl	1d784 <__assert_fail@plt+0xc160>
   1ab20:	ldr	r3, [fp, #-12]
   1ab24:	cmn	r3, #1
   1ab28:	beq	1ab34 <__assert_fail@plt+0x9510>
   1ab2c:	ldr	r3, [fp, #-12]
   1ab30:	b	1acd4 <__assert_fail@plt+0x96b0>
   1ab34:	ldr	r3, [fp, #-16]
   1ab38:	cmp	r3, #20
   1ab3c:	beq	1ab94 <__assert_fail@plt+0x9570>
   1ab40:	ldr	r3, [fp, #-16]
   1ab44:	cmp	r3, #2
   1ab48:	beq	1ab94 <__assert_fail@plt+0x9570>
   1ab4c:	ldr	r3, [fp, #-16]
   1ab50:	cmp	r3, #1
   1ab54:	beq	1ab94 <__assert_fail@plt+0x9570>
   1ab58:	ldr	r3, [fp, #-16]
   1ab5c:	cmp	r3, #13
   1ab60:	beq	1ab94 <__assert_fail@plt+0x9570>
   1ab64:	ldr	r3, [fp, #-16]
   1ab68:	cmp	r3, #38	; 0x26
   1ab6c:	beq	1ab94 <__assert_fail@plt+0x9570>
   1ab70:	ldr	r3, [fp, #-16]
   1ab74:	cmp	r3, #95	; 0x5f
   1ab78:	beq	1ab94 <__assert_fail@plt+0x9570>
   1ab7c:	bl	114bc <__errno_location@plt>
   1ab80:	mov	r2, r0
   1ab84:	ldr	r3, [fp, #-16]
   1ab88:	str	r3, [r2]
   1ab8c:	ldr	r3, [fp, #-12]
   1ab90:	b	1acd4 <__assert_fail@plt+0x96b0>
   1ab94:	sub	r3, fp, #32
   1ab98:	mov	r0, r3
   1ab9c:	bl	1dc68 <__assert_fail@plt+0xc644>
   1aba0:	mov	r3, r0
   1aba4:	cmp	r3, #0
   1aba8:	beq	1abc0 <__assert_fail@plt+0x959c>
   1abac:	bl	114bc <__errno_location@plt>
   1abb0:	mov	r3, r0
   1abb4:	ldr	r3, [r3]
   1abb8:	mov	r0, r3
   1abbc:	bl	1db38 <__assert_fail@plt+0xc514>
   1abc0:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1abc4:	cmp	r3, #0
   1abc8:	blt	1ac00 <__assert_fail@plt+0x95dc>
   1abcc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1abd0:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1abd4:	cmp	r2, r3
   1abd8:	bne	1ac00 <__assert_fail@plt+0x95dc>
   1abdc:	sub	r3, fp, #32
   1abe0:	mov	r0, r3
   1abe4:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1abe8:	bl	114bc <__errno_location@plt>
   1abec:	mov	r2, r0
   1abf0:	mov	r3, #9
   1abf4:	str	r3, [r2]
   1abf8:	mvn	r3, #0
   1abfc:	b	1acd4 <__assert_fail@plt+0x96b0>
   1ac00:	ldr	r0, [fp, #-4072]	; 0xfffff018
   1ac04:	bl	11588 <fchdir@plt>
   1ac08:	mov	r3, r0
   1ac0c:	cmp	r3, #0
   1ac10:	beq	1ac48 <__assert_fail@plt+0x9624>
   1ac14:	bl	114bc <__errno_location@plt>
   1ac18:	mov	r3, r0
   1ac1c:	ldr	r3, [r3]
   1ac20:	str	r3, [fp, #-20]	; 0xffffffec
   1ac24:	sub	r3, fp, #32
   1ac28:	mov	r0, r3
   1ac2c:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1ac30:	bl	114bc <__errno_location@plt>
   1ac34:	mov	r2, r0
   1ac38:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ac3c:	str	r3, [r2]
   1ac40:	mvn	r3, #0
   1ac44:	b	1acd4 <__assert_fail@plt+0x96b0>
   1ac48:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1ac4c:	ldr	r0, [fp, #-4076]	; 0xfffff014
   1ac50:	bl	1b2b4 <__assert_fail@plt+0x9c90>
   1ac54:	str	r0, [fp, #-24]	; 0xffffffe8
   1ac58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ac5c:	cmn	r3, #1
   1ac60:	bne	1ac74 <__assert_fail@plt+0x9650>
   1ac64:	bl	114bc <__errno_location@plt>
   1ac68:	mov	r3, r0
   1ac6c:	ldr	r3, [r3]
   1ac70:	b	1ac78 <__assert_fail@plt+0x9654>
   1ac74:	mov	r3, #0
   1ac78:	str	r3, [fp, #-20]	; 0xffffffec
   1ac7c:	sub	r3, fp, #32
   1ac80:	mov	r0, r3
   1ac84:	bl	1dcf8 <__assert_fail@plt+0xc6d4>
   1ac88:	mov	r3, r0
   1ac8c:	cmp	r3, #0
   1ac90:	beq	1aca8 <__assert_fail@plt+0x9684>
   1ac94:	bl	114bc <__errno_location@plt>
   1ac98:	mov	r3, r0
   1ac9c:	ldr	r3, [r3]
   1aca0:	mov	r0, r3
   1aca4:	bl	1db78 <__assert_fail@plt+0xc554>
   1aca8:	sub	r3, fp, #32
   1acac:	mov	r0, r3
   1acb0:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1acb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1acb8:	cmp	r3, #0
   1acbc:	beq	1acd0 <__assert_fail@plt+0x96ac>
   1acc0:	bl	114bc <__errno_location@plt>
   1acc4:	mov	r2, r0
   1acc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1accc:	str	r3, [r2]
   1acd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1acd4:	mov	r0, r3
   1acd8:	sub	sp, fp, #4
   1acdc:	pop	{fp, pc}
   1ace0:	push	{fp, lr}
   1ace4:	add	fp, sp, #4
   1ace8:	sub	sp, sp, #4080	; 0xff0
   1acec:	str	r0, [fp, #-4072]	; 0xfffff018
   1acf0:	str	r1, [fp, #-4076]	; 0xfffff014
   1acf4:	str	r2, [fp, #-4080]	; 0xfffff010
   1acf8:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1acfc:	cmn	r3, #100	; 0x64
   1ad00:	beq	1ad14 <__assert_fail@plt+0x96f0>
   1ad04:	ldr	r3, [fp, #-4076]	; 0xfffff014
   1ad08:	ldrb	r3, [r3]
   1ad0c:	cmp	r3, #47	; 0x2f
   1ad10:	bne	1ad28 <__assert_fail@plt+0x9704>
   1ad14:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1ad18:	ldr	r0, [fp, #-4076]	; 0xfffff014
   1ad1c:	bl	114f8 <setfilecon@plt>
   1ad20:	mov	r3, r0
   1ad24:	b	1af48 <__assert_fail@plt+0x9924>
   1ad28:	sub	r3, fp, #4048	; 0xfd0
   1ad2c:	sub	r3, r3, #4
   1ad30:	sub	r3, r3, #12
   1ad34:	ldr	r2, [fp, #-4076]	; 0xfffff014
   1ad38:	ldr	r1, [fp, #-4072]	; 0xfffff018
   1ad3c:	mov	r0, r3
   1ad40:	bl	1ca48 <__assert_fail@plt+0xb424>
   1ad44:	str	r0, [fp, #-8]
   1ad48:	ldr	r3, [fp, #-8]
   1ad4c:	cmp	r3, #0
   1ad50:	beq	1ae08 <__assert_fail@plt+0x97e4>
   1ad54:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1ad58:	ldr	r0, [fp, #-8]
   1ad5c:	bl	114f8 <setfilecon@plt>
   1ad60:	str	r0, [fp, #-12]
   1ad64:	bl	114bc <__errno_location@plt>
   1ad68:	mov	r3, r0
   1ad6c:	ldr	r3, [r3]
   1ad70:	str	r3, [fp, #-16]
   1ad74:	sub	r3, fp, #4048	; 0xfd0
   1ad78:	sub	r3, r3, #4
   1ad7c:	sub	r3, r3, #12
   1ad80:	ldr	r2, [fp, #-8]
   1ad84:	cmp	r2, r3
   1ad88:	beq	1ad94 <__assert_fail@plt+0x9770>
   1ad8c:	ldr	r0, [fp, #-8]
   1ad90:	bl	1d784 <__assert_fail@plt+0xc160>
   1ad94:	ldr	r3, [fp, #-12]
   1ad98:	cmn	r3, #1
   1ad9c:	beq	1ada8 <__assert_fail@plt+0x9784>
   1ada0:	ldr	r3, [fp, #-12]
   1ada4:	b	1af48 <__assert_fail@plt+0x9924>
   1ada8:	ldr	r3, [fp, #-16]
   1adac:	cmp	r3, #20
   1adb0:	beq	1ae08 <__assert_fail@plt+0x97e4>
   1adb4:	ldr	r3, [fp, #-16]
   1adb8:	cmp	r3, #2
   1adbc:	beq	1ae08 <__assert_fail@plt+0x97e4>
   1adc0:	ldr	r3, [fp, #-16]
   1adc4:	cmp	r3, #1
   1adc8:	beq	1ae08 <__assert_fail@plt+0x97e4>
   1adcc:	ldr	r3, [fp, #-16]
   1add0:	cmp	r3, #13
   1add4:	beq	1ae08 <__assert_fail@plt+0x97e4>
   1add8:	ldr	r3, [fp, #-16]
   1addc:	cmp	r3, #38	; 0x26
   1ade0:	beq	1ae08 <__assert_fail@plt+0x97e4>
   1ade4:	ldr	r3, [fp, #-16]
   1ade8:	cmp	r3, #95	; 0x5f
   1adec:	beq	1ae08 <__assert_fail@plt+0x97e4>
   1adf0:	bl	114bc <__errno_location@plt>
   1adf4:	mov	r2, r0
   1adf8:	ldr	r3, [fp, #-16]
   1adfc:	str	r3, [r2]
   1ae00:	ldr	r3, [fp, #-12]
   1ae04:	b	1af48 <__assert_fail@plt+0x9924>
   1ae08:	sub	r3, fp, #32
   1ae0c:	mov	r0, r3
   1ae10:	bl	1dc68 <__assert_fail@plt+0xc644>
   1ae14:	mov	r3, r0
   1ae18:	cmp	r3, #0
   1ae1c:	beq	1ae34 <__assert_fail@plt+0x9810>
   1ae20:	bl	114bc <__errno_location@plt>
   1ae24:	mov	r3, r0
   1ae28:	ldr	r3, [r3]
   1ae2c:	mov	r0, r3
   1ae30:	bl	1db38 <__assert_fail@plt+0xc514>
   1ae34:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1ae38:	cmp	r3, #0
   1ae3c:	blt	1ae74 <__assert_fail@plt+0x9850>
   1ae40:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ae44:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1ae48:	cmp	r2, r3
   1ae4c:	bne	1ae74 <__assert_fail@plt+0x9850>
   1ae50:	sub	r3, fp, #32
   1ae54:	mov	r0, r3
   1ae58:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1ae5c:	bl	114bc <__errno_location@plt>
   1ae60:	mov	r2, r0
   1ae64:	mov	r3, #9
   1ae68:	str	r3, [r2]
   1ae6c:	mvn	r3, #0
   1ae70:	b	1af48 <__assert_fail@plt+0x9924>
   1ae74:	ldr	r0, [fp, #-4072]	; 0xfffff018
   1ae78:	bl	11588 <fchdir@plt>
   1ae7c:	mov	r3, r0
   1ae80:	cmp	r3, #0
   1ae84:	beq	1aebc <__assert_fail@plt+0x9898>
   1ae88:	bl	114bc <__errno_location@plt>
   1ae8c:	mov	r3, r0
   1ae90:	ldr	r3, [r3]
   1ae94:	str	r3, [fp, #-20]	; 0xffffffec
   1ae98:	sub	r3, fp, #32
   1ae9c:	mov	r0, r3
   1aea0:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1aea4:	bl	114bc <__errno_location@plt>
   1aea8:	mov	r2, r0
   1aeac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aeb0:	str	r3, [r2]
   1aeb4:	mvn	r3, #0
   1aeb8:	b	1af48 <__assert_fail@plt+0x9924>
   1aebc:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1aec0:	ldr	r0, [fp, #-4076]	; 0xfffff014
   1aec4:	bl	114f8 <setfilecon@plt>
   1aec8:	str	r0, [fp, #-24]	; 0xffffffe8
   1aecc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aed0:	cmn	r3, #1
   1aed4:	bne	1aee8 <__assert_fail@plt+0x98c4>
   1aed8:	bl	114bc <__errno_location@plt>
   1aedc:	mov	r3, r0
   1aee0:	ldr	r3, [r3]
   1aee4:	b	1aeec <__assert_fail@plt+0x98c8>
   1aee8:	mov	r3, #0
   1aeec:	str	r3, [fp, #-20]	; 0xffffffec
   1aef0:	sub	r3, fp, #32
   1aef4:	mov	r0, r3
   1aef8:	bl	1dcf8 <__assert_fail@plt+0xc6d4>
   1aefc:	mov	r3, r0
   1af00:	cmp	r3, #0
   1af04:	beq	1af1c <__assert_fail@plt+0x98f8>
   1af08:	bl	114bc <__errno_location@plt>
   1af0c:	mov	r3, r0
   1af10:	ldr	r3, [r3]
   1af14:	mov	r0, r3
   1af18:	bl	1db78 <__assert_fail@plt+0xc554>
   1af1c:	sub	r3, fp, #32
   1af20:	mov	r0, r3
   1af24:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1af28:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af2c:	cmp	r3, #0
   1af30:	beq	1af44 <__assert_fail@plt+0x9920>
   1af34:	bl	114bc <__errno_location@plt>
   1af38:	mov	r2, r0
   1af3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af40:	str	r3, [r2]
   1af44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1af48:	mov	r0, r3
   1af4c:	sub	sp, fp, #4
   1af50:	pop	{fp, pc}
   1af54:	push	{fp, lr}
   1af58:	add	fp, sp, #4
   1af5c:	sub	sp, sp, #4080	; 0xff0
   1af60:	str	r0, [fp, #-4072]	; 0xfffff018
   1af64:	str	r1, [fp, #-4076]	; 0xfffff014
   1af68:	str	r2, [fp, #-4080]	; 0xfffff010
   1af6c:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1af70:	cmn	r3, #100	; 0x64
   1af74:	beq	1af88 <__assert_fail@plt+0x9964>
   1af78:	ldr	r3, [fp, #-4076]	; 0xfffff014
   1af7c:	ldrb	r3, [r3]
   1af80:	cmp	r3, #47	; 0x2f
   1af84:	bne	1af9c <__assert_fail@plt+0x9978>
   1af88:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1af8c:	ldr	r0, [fp, #-4076]	; 0xfffff014
   1af90:	bl	112a0 <lsetfilecon@plt>
   1af94:	mov	r3, r0
   1af98:	b	1b1bc <__assert_fail@plt+0x9b98>
   1af9c:	sub	r3, fp, #4048	; 0xfd0
   1afa0:	sub	r3, r3, #4
   1afa4:	sub	r3, r3, #12
   1afa8:	ldr	r2, [fp, #-4076]	; 0xfffff014
   1afac:	ldr	r1, [fp, #-4072]	; 0xfffff018
   1afb0:	mov	r0, r3
   1afb4:	bl	1ca48 <__assert_fail@plt+0xb424>
   1afb8:	str	r0, [fp, #-8]
   1afbc:	ldr	r3, [fp, #-8]
   1afc0:	cmp	r3, #0
   1afc4:	beq	1b07c <__assert_fail@plt+0x9a58>
   1afc8:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1afcc:	ldr	r0, [fp, #-8]
   1afd0:	bl	112a0 <lsetfilecon@plt>
   1afd4:	str	r0, [fp, #-12]
   1afd8:	bl	114bc <__errno_location@plt>
   1afdc:	mov	r3, r0
   1afe0:	ldr	r3, [r3]
   1afe4:	str	r3, [fp, #-16]
   1afe8:	sub	r3, fp, #4048	; 0xfd0
   1afec:	sub	r3, r3, #4
   1aff0:	sub	r3, r3, #12
   1aff4:	ldr	r2, [fp, #-8]
   1aff8:	cmp	r2, r3
   1affc:	beq	1b008 <__assert_fail@plt+0x99e4>
   1b000:	ldr	r0, [fp, #-8]
   1b004:	bl	1d784 <__assert_fail@plt+0xc160>
   1b008:	ldr	r3, [fp, #-12]
   1b00c:	cmn	r3, #1
   1b010:	beq	1b01c <__assert_fail@plt+0x99f8>
   1b014:	ldr	r3, [fp, #-12]
   1b018:	b	1b1bc <__assert_fail@plt+0x9b98>
   1b01c:	ldr	r3, [fp, #-16]
   1b020:	cmp	r3, #20
   1b024:	beq	1b07c <__assert_fail@plt+0x9a58>
   1b028:	ldr	r3, [fp, #-16]
   1b02c:	cmp	r3, #2
   1b030:	beq	1b07c <__assert_fail@plt+0x9a58>
   1b034:	ldr	r3, [fp, #-16]
   1b038:	cmp	r3, #1
   1b03c:	beq	1b07c <__assert_fail@plt+0x9a58>
   1b040:	ldr	r3, [fp, #-16]
   1b044:	cmp	r3, #13
   1b048:	beq	1b07c <__assert_fail@plt+0x9a58>
   1b04c:	ldr	r3, [fp, #-16]
   1b050:	cmp	r3, #38	; 0x26
   1b054:	beq	1b07c <__assert_fail@plt+0x9a58>
   1b058:	ldr	r3, [fp, #-16]
   1b05c:	cmp	r3, #95	; 0x5f
   1b060:	beq	1b07c <__assert_fail@plt+0x9a58>
   1b064:	bl	114bc <__errno_location@plt>
   1b068:	mov	r2, r0
   1b06c:	ldr	r3, [fp, #-16]
   1b070:	str	r3, [r2]
   1b074:	ldr	r3, [fp, #-12]
   1b078:	b	1b1bc <__assert_fail@plt+0x9b98>
   1b07c:	sub	r3, fp, #32
   1b080:	mov	r0, r3
   1b084:	bl	1dc68 <__assert_fail@plt+0xc644>
   1b088:	mov	r3, r0
   1b08c:	cmp	r3, #0
   1b090:	beq	1b0a8 <__assert_fail@plt+0x9a84>
   1b094:	bl	114bc <__errno_location@plt>
   1b098:	mov	r3, r0
   1b09c:	ldr	r3, [r3]
   1b0a0:	mov	r0, r3
   1b0a4:	bl	1db38 <__assert_fail@plt+0xc514>
   1b0a8:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1b0ac:	cmp	r3, #0
   1b0b0:	blt	1b0e8 <__assert_fail@plt+0x9ac4>
   1b0b4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b0b8:	ldr	r3, [fp, #-4072]	; 0xfffff018
   1b0bc:	cmp	r2, r3
   1b0c0:	bne	1b0e8 <__assert_fail@plt+0x9ac4>
   1b0c4:	sub	r3, fp, #32
   1b0c8:	mov	r0, r3
   1b0cc:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1b0d0:	bl	114bc <__errno_location@plt>
   1b0d4:	mov	r2, r0
   1b0d8:	mov	r3, #9
   1b0dc:	str	r3, [r2]
   1b0e0:	mvn	r3, #0
   1b0e4:	b	1b1bc <__assert_fail@plt+0x9b98>
   1b0e8:	ldr	r0, [fp, #-4072]	; 0xfffff018
   1b0ec:	bl	11588 <fchdir@plt>
   1b0f0:	mov	r3, r0
   1b0f4:	cmp	r3, #0
   1b0f8:	beq	1b130 <__assert_fail@plt+0x9b0c>
   1b0fc:	bl	114bc <__errno_location@plt>
   1b100:	mov	r3, r0
   1b104:	ldr	r3, [r3]
   1b108:	str	r3, [fp, #-20]	; 0xffffffec
   1b10c:	sub	r3, fp, #32
   1b110:	mov	r0, r3
   1b114:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1b118:	bl	114bc <__errno_location@plt>
   1b11c:	mov	r2, r0
   1b120:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b124:	str	r3, [r2]
   1b128:	mvn	r3, #0
   1b12c:	b	1b1bc <__assert_fail@plt+0x9b98>
   1b130:	ldr	r1, [fp, #-4080]	; 0xfffff010
   1b134:	ldr	r0, [fp, #-4076]	; 0xfffff014
   1b138:	bl	112a0 <lsetfilecon@plt>
   1b13c:	str	r0, [fp, #-24]	; 0xffffffe8
   1b140:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b144:	cmn	r3, #1
   1b148:	bne	1b15c <__assert_fail@plt+0x9b38>
   1b14c:	bl	114bc <__errno_location@plt>
   1b150:	mov	r3, r0
   1b154:	ldr	r3, [r3]
   1b158:	b	1b160 <__assert_fail@plt+0x9b3c>
   1b15c:	mov	r3, #0
   1b160:	str	r3, [fp, #-20]	; 0xffffffec
   1b164:	sub	r3, fp, #32
   1b168:	mov	r0, r3
   1b16c:	bl	1dcf8 <__assert_fail@plt+0xc6d4>
   1b170:	mov	r3, r0
   1b174:	cmp	r3, #0
   1b178:	beq	1b190 <__assert_fail@plt+0x9b6c>
   1b17c:	bl	114bc <__errno_location@plt>
   1b180:	mov	r3, r0
   1b184:	ldr	r3, [r3]
   1b188:	mov	r0, r3
   1b18c:	bl	1db78 <__assert_fail@plt+0xc554>
   1b190:	sub	r3, fp, #32
   1b194:	mov	r0, r3
   1b198:	bl	1dd50 <__assert_fail@plt+0xc72c>
   1b19c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b1a0:	cmp	r3, #0
   1b1a4:	beq	1b1b8 <__assert_fail@plt+0x9b94>
   1b1a8:	bl	114bc <__errno_location@plt>
   1b1ac:	mov	r2, r0
   1b1b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b1b4:	str	r3, [r2]
   1b1b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b1bc:	mov	r0, r3
   1b1c0:	sub	sp, fp, #4
   1b1c4:	pop	{fp, pc}
   1b1c8:	push	{fp, lr}
   1b1cc:	add	fp, sp, #4
   1b1d0:	sub	sp, sp, #8
   1b1d4:	str	r0, [fp, #-8]
   1b1d8:	str	r1, [fp, #-12]
   1b1dc:	ldr	r3, [fp, #-8]
   1b1e0:	cmp	r3, #0
   1b1e4:	bne	1b200 <__assert_fail@plt+0x9bdc>
   1b1e8:	bl	114bc <__errno_location@plt>
   1b1ec:	mov	r2, r0
   1b1f0:	mov	r3, #95	; 0x5f
   1b1f4:	str	r3, [r2]
   1b1f8:	mvn	r3, #0
   1b1fc:	b	1b264 <__assert_fail@plt+0x9c40>
   1b200:	ldr	r3, [fp, #-8]
   1b204:	cmp	r3, #10
   1b208:	bne	1b260 <__assert_fail@plt+0x9c3c>
   1b20c:	ldr	r3, [fp, #-12]
   1b210:	ldr	r3, [r3]
   1b214:	ldr	r1, [pc, #84]	; 1b270 <__assert_fail@plt+0x9c4c>
   1b218:	mov	r0, r3
   1b21c:	bl	1127c <strcmp@plt>
   1b220:	mov	r3, r0
   1b224:	cmp	r3, #0
   1b228:	bne	1b260 <__assert_fail@plt+0x9c3c>
   1b22c:	ldr	r3, [fp, #-12]
   1b230:	ldr	r3, [r3]
   1b234:	mov	r0, r3
   1b238:	bl	115a0 <freecon@plt>
   1b23c:	ldr	r3, [fp, #-12]
   1b240:	mov	r2, #0
   1b244:	str	r2, [r3]
   1b248:	bl	114bc <__errno_location@plt>
   1b24c:	mov	r2, r0
   1b250:	mov	r3, #61	; 0x3d
   1b254:	str	r3, [r2]
   1b258:	mvn	r3, #0
   1b25c:	b	1b264 <__assert_fail@plt+0x9c40>
   1b260:	ldr	r3, [fp, #-8]
   1b264:	mov	r0, r3
   1b268:	sub	sp, fp, #4
   1b26c:	pop	{fp, pc}
   1b270:	andeq	r0, r2, r8, lsr #1
   1b274:	push	{fp, lr}
   1b278:	add	fp, sp, #4
   1b27c:	sub	sp, sp, #16
   1b280:	str	r0, [fp, #-16]
   1b284:	str	r1, [fp, #-20]	; 0xffffffec
   1b288:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b28c:	ldr	r0, [fp, #-16]
   1b290:	bl	11480 <getfilecon@plt>
   1b294:	str	r0, [fp, #-8]
   1b298:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b29c:	ldr	r0, [fp, #-8]
   1b2a0:	bl	1b1c8 <__assert_fail@plt+0x9ba4>
   1b2a4:	mov	r3, r0
   1b2a8:	mov	r0, r3
   1b2ac:	sub	sp, fp, #4
   1b2b0:	pop	{fp, pc}
   1b2b4:	push	{fp, lr}
   1b2b8:	add	fp, sp, #4
   1b2bc:	sub	sp, sp, #16
   1b2c0:	str	r0, [fp, #-16]
   1b2c4:	str	r1, [fp, #-20]	; 0xffffffec
   1b2c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b2cc:	ldr	r0, [fp, #-16]
   1b2d0:	bl	113f0 <lgetfilecon@plt>
   1b2d4:	str	r0, [fp, #-8]
   1b2d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b2dc:	ldr	r0, [fp, #-8]
   1b2e0:	bl	1b1c8 <__assert_fail@plt+0x9ba4>
   1b2e4:	mov	r3, r0
   1b2e8:	mov	r0, r3
   1b2ec:	sub	sp, fp, #4
   1b2f0:	pop	{fp, pc}
   1b2f4:	push	{fp, lr}
   1b2f8:	add	fp, sp, #4
   1b2fc:	sub	sp, sp, #16
   1b300:	str	r0, [fp, #-16]
   1b304:	str	r1, [fp, #-20]	; 0xffffffec
   1b308:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b30c:	ldr	r0, [fp, #-16]
   1b310:	bl	11330 <fgetfilecon@plt>
   1b314:	str	r0, [fp, #-8]
   1b318:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b31c:	ldr	r0, [fp, #-8]
   1b320:	bl	1b1c8 <__assert_fail@plt+0x9ba4>
   1b324:	mov	r3, r0
   1b328:	mov	r0, r3
   1b32c:	sub	sp, fp, #4
   1b330:	pop	{fp, pc}
   1b334:	push	{fp, lr}
   1b338:	add	fp, sp, #4
   1b33c:	sub	sp, sp, #16
   1b340:	str	r0, [fp, #-16]
   1b344:	ldr	r3, [fp, #-16]
   1b348:	cmp	r3, #0
   1b34c:	blt	1b398 <__assert_fail@plt+0x9d74>
   1b350:	ldr	r3, [fp, #-16]
   1b354:	cmp	r3, #2
   1b358:	bgt	1b398 <__assert_fail@plt+0x9d74>
   1b35c:	ldr	r0, [fp, #-16]
   1b360:	bl	1dd9c <__assert_fail@plt+0xc778>
   1b364:	str	r0, [fp, #-8]
   1b368:	bl	114bc <__errno_location@plt>
   1b36c:	mov	r3, r0
   1b370:	ldr	r3, [r3]
   1b374:	str	r3, [fp, #-12]
   1b378:	ldr	r0, [fp, #-16]
   1b37c:	bl	115f4 <close@plt>
   1b380:	bl	114bc <__errno_location@plt>
   1b384:	mov	r2, r0
   1b388:	ldr	r3, [fp, #-12]
   1b38c:	str	r3, [r2]
   1b390:	ldr	r3, [fp, #-8]
   1b394:	str	r3, [fp, #-16]
   1b398:	ldr	r3, [fp, #-16]
   1b39c:	mov	r0, r3
   1b3a0:	sub	sp, fp, #4
   1b3a4:	pop	{fp, pc}
   1b3a8:	push	{r4, r5, r6, r7, fp, lr}
   1b3ac:	add	fp, sp, #20
   1b3b0:	sub	sp, sp, #48	; 0x30
   1b3b4:	str	r0, [fp, #-24]	; 0xffffffe8
   1b3b8:	str	r1, [fp, #-28]	; 0xffffffe4
   1b3bc:	str	r2, [fp, #-32]	; 0xffffffe0
   1b3c0:	str	r3, [fp, #-36]	; 0xffffffdc
   1b3c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b3c8:	cmp	r3, #0
   1b3cc:	beq	1b3f0 <__assert_fail@plt+0x9dcc>
   1b3d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b3d4:	str	r3, [sp]
   1b3d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b3dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b3e0:	ldr	r1, [pc, #1260]	; 1b8d4 <__assert_fail@plt+0xa2b0>
   1b3e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b3e8:	bl	114b0 <fprintf@plt>
   1b3ec:	b	1b404 <__assert_fail@plt+0x9de0>
   1b3f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b3f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b3f8:	ldr	r1, [pc, #1240]	; 1b8d8 <__assert_fail@plt+0xa2b4>
   1b3fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b400:	bl	114b0 <fprintf@plt>
   1b404:	ldr	r0, [pc, #1232]	; 1b8dc <__assert_fail@plt+0xa2b8>
   1b408:	bl	11474 <gettext@plt>
   1b40c:	mov	r2, r0
   1b410:	ldr	r3, [pc, #1224]	; 1b8e0 <__assert_fail@plt+0xa2bc>
   1b414:	ldr	r1, [pc, #1224]	; 1b8e4 <__assert_fail@plt+0xa2c0>
   1b418:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b41c:	bl	114b0 <fprintf@plt>
   1b420:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b424:	mov	r0, #10
   1b428:	bl	11300 <fputc_unlocked@plt>
   1b42c:	ldr	r0, [pc, #1204]	; 1b8e8 <__assert_fail@plt+0xa2c4>
   1b430:	bl	11474 <gettext@plt>
   1b434:	mov	r3, r0
   1b438:	ldr	r2, [pc, #1196]	; 1b8ec <__assert_fail@plt+0xa2c8>
   1b43c:	mov	r1, r3
   1b440:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b444:	bl	114b0 <fprintf@plt>
   1b448:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b44c:	mov	r0, #10
   1b450:	bl	11300 <fputc_unlocked@plt>
   1b454:	ldr	r3, [fp, #8]
   1b458:	cmp	r3, #9
   1b45c:	ldrls	pc, [pc, r3, lsl #2]
   1b460:	b	1b81c <__assert_fail@plt+0xa1f8>
   1b464:	andeq	fp, r1, r4, asr #17
   1b468:	andeq	fp, r1, ip, lsl #9
   1b46c:			; <UNDEFINED> instruction: 0x0001b4b0
   1b470:	ldrdeq	fp, [r1], -ip
   1b474:	andeq	fp, r1, ip, lsl r5
   1b478:	andeq	fp, r1, r4, ror r5
   1b47c:	ldrdeq	fp, [r1], -ip
   1b480:	andeq	fp, r1, r4, asr r6
   1b484:	ldrdeq	fp, [r1], -ip
   1b488:	andeq	fp, r1, r4, ror r7
   1b48c:	ldr	r0, [pc, #1116]	; 1b8f0 <__assert_fail@plt+0xa2cc>
   1b490:	bl	11474 <gettext@plt>
   1b494:	mov	r1, r0
   1b498:	ldr	r3, [fp, #4]
   1b49c:	ldr	r3, [r3]
   1b4a0:	mov	r2, r3
   1b4a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b4a8:	bl	114b0 <fprintf@plt>
   1b4ac:	b	1b8c8 <__assert_fail@plt+0xa2a4>
   1b4b0:	ldr	r0, [pc, #1084]	; 1b8f4 <__assert_fail@plt+0xa2d0>
   1b4b4:	bl	11474 <gettext@plt>
   1b4b8:	mov	r1, r0
   1b4bc:	ldr	r3, [fp, #4]
   1b4c0:	ldr	r2, [r3]
   1b4c4:	ldr	r3, [fp, #4]
   1b4c8:	add	r3, r3, #4
   1b4cc:	ldr	r3, [r3]
   1b4d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b4d4:	bl	114b0 <fprintf@plt>
   1b4d8:	b	1b8c8 <__assert_fail@plt+0xa2a4>
   1b4dc:	ldr	r0, [pc, #1044]	; 1b8f8 <__assert_fail@plt+0xa2d4>
   1b4e0:	bl	11474 <gettext@plt>
   1b4e4:	ldr	r3, [fp, #4]
   1b4e8:	ldr	r2, [r3]
   1b4ec:	ldr	r3, [fp, #4]
   1b4f0:	add	r3, r3, #4
   1b4f4:	ldr	r1, [r3]
   1b4f8:	ldr	r3, [fp, #4]
   1b4fc:	add	r3, r3, #8
   1b500:	ldr	r3, [r3]
   1b504:	str	r3, [sp]
   1b508:	mov	r3, r1
   1b50c:	mov	r1, r0
   1b510:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b514:	bl	114b0 <fprintf@plt>
   1b518:	b	1b8c8 <__assert_fail@plt+0xa2a4>
   1b51c:	ldr	r0, [pc, #984]	; 1b8fc <__assert_fail@plt+0xa2d8>
   1b520:	bl	11474 <gettext@plt>
   1b524:	mov	ip, r0
   1b528:	ldr	r3, [fp, #4]
   1b52c:	ldr	r1, [r3]
   1b530:	ldr	r3, [fp, #4]
   1b534:	add	r3, r3, #4
   1b538:	ldr	r0, [r3]
   1b53c:	ldr	r3, [fp, #4]
   1b540:	add	r3, r3, #8
   1b544:	ldr	r3, [r3]
   1b548:	ldr	r2, [fp, #4]
   1b54c:	add	r2, r2, #12
   1b550:	ldr	r2, [r2]
   1b554:	str	r2, [sp, #4]
   1b558:	str	r3, [sp]
   1b55c:	mov	r3, r0
   1b560:	mov	r2, r1
   1b564:	mov	r1, ip
   1b568:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b56c:	bl	114b0 <fprintf@plt>
   1b570:	b	1b8c8 <__assert_fail@plt+0xa2a4>
   1b574:	ldr	r0, [pc, #900]	; 1b900 <__assert_fail@plt+0xa2dc>
   1b578:	bl	11474 <gettext@plt>
   1b57c:	mov	lr, r0
   1b580:	ldr	r3, [fp, #4]
   1b584:	ldr	r0, [r3]
   1b588:	ldr	r3, [fp, #4]
   1b58c:	add	r3, r3, #4
   1b590:	ldr	ip, [r3]
   1b594:	ldr	r3, [fp, #4]
   1b598:	add	r3, r3, #8
   1b59c:	ldr	r3, [r3]
   1b5a0:	ldr	r2, [fp, #4]
   1b5a4:	add	r2, r2, #12
   1b5a8:	ldr	r2, [r2]
   1b5ac:	ldr	r1, [fp, #4]
   1b5b0:	add	r1, r1, #16
   1b5b4:	ldr	r1, [r1]
   1b5b8:	str	r1, [sp, #8]
   1b5bc:	str	r2, [sp, #4]
   1b5c0:	str	r3, [sp]
   1b5c4:	mov	r3, ip
   1b5c8:	mov	r2, r0
   1b5cc:	mov	r1, lr
   1b5d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b5d4:	bl	114b0 <fprintf@plt>
   1b5d8:	b	1b8c8 <__assert_fail@plt+0xa2a4>
   1b5dc:	ldr	r0, [pc, #800]	; 1b904 <__assert_fail@plt+0xa2e0>
   1b5e0:	bl	11474 <gettext@plt>
   1b5e4:	mov	r4, r0
   1b5e8:	ldr	r3, [fp, #4]
   1b5ec:	ldr	ip, [r3]
   1b5f0:	ldr	r3, [fp, #4]
   1b5f4:	add	r3, r3, #4
   1b5f8:	ldr	lr, [r3]
   1b5fc:	ldr	r3, [fp, #4]
   1b600:	add	r3, r3, #8
   1b604:	ldr	r3, [r3]
   1b608:	ldr	r2, [fp, #4]
   1b60c:	add	r2, r2, #12
   1b610:	ldr	r2, [r2]
   1b614:	ldr	r1, [fp, #4]
   1b618:	add	r1, r1, #16
   1b61c:	ldr	r1, [r1]
   1b620:	ldr	r0, [fp, #4]
   1b624:	add	r0, r0, #20
   1b628:	ldr	r0, [r0]
   1b62c:	str	r0, [sp, #12]
   1b630:	str	r1, [sp, #8]
   1b634:	str	r2, [sp, #4]
   1b638:	str	r3, [sp]
   1b63c:	mov	r3, lr
   1b640:	mov	r2, ip
   1b644:	mov	r1, r4
   1b648:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b64c:	bl	114b0 <fprintf@plt>
   1b650:	b	1b8c8 <__assert_fail@plt+0xa2a4>
   1b654:	ldr	r0, [pc, #684]	; 1b908 <__assert_fail@plt+0xa2e4>
   1b658:	bl	11474 <gettext@plt>
   1b65c:	mov	r5, r0
   1b660:	ldr	r3, [fp, #4]
   1b664:	ldr	lr, [r3]
   1b668:	ldr	r3, [fp, #4]
   1b66c:	add	r3, r3, #4
   1b670:	ldr	r4, [r3]
   1b674:	ldr	r3, [fp, #4]
   1b678:	add	r3, r3, #8
   1b67c:	ldr	r3, [r3]
   1b680:	ldr	r2, [fp, #4]
   1b684:	add	r2, r2, #12
   1b688:	ldr	r2, [r2]
   1b68c:	ldr	r1, [fp, #4]
   1b690:	add	r1, r1, #16
   1b694:	ldr	r1, [r1]
   1b698:	ldr	r0, [fp, #4]
   1b69c:	add	r0, r0, #20
   1b6a0:	ldr	r0, [r0]
   1b6a4:	ldr	ip, [fp, #4]
   1b6a8:	add	ip, ip, #24
   1b6ac:	ldr	ip, [ip]
   1b6b0:	str	ip, [sp, #16]
   1b6b4:	str	r0, [sp, #12]
   1b6b8:	str	r1, [sp, #8]
   1b6bc:	str	r2, [sp, #4]
   1b6c0:	str	r3, [sp]
   1b6c4:	mov	r3, r4
   1b6c8:	mov	r2, lr
   1b6cc:	mov	r1, r5
   1b6d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b6d4:	bl	114b0 <fprintf@plt>
   1b6d8:	b	1b8c8 <__assert_fail@plt+0xa2a4>
   1b6dc:	ldr	r0, [pc, #552]	; 1b90c <__assert_fail@plt+0xa2e8>
   1b6e0:	bl	11474 <gettext@plt>
   1b6e4:	mov	r6, r0
   1b6e8:	ldr	r3, [fp, #4]
   1b6ec:	ldr	r4, [r3]
   1b6f0:	ldr	r3, [fp, #4]
   1b6f4:	add	r3, r3, #4
   1b6f8:	ldr	r5, [r3]
   1b6fc:	ldr	r3, [fp, #4]
   1b700:	add	r3, r3, #8
   1b704:	ldr	r3, [r3]
   1b708:	ldr	r2, [fp, #4]
   1b70c:	add	r2, r2, #12
   1b710:	ldr	r2, [r2]
   1b714:	ldr	r1, [fp, #4]
   1b718:	add	r1, r1, #16
   1b71c:	ldr	r1, [r1]
   1b720:	ldr	r0, [fp, #4]
   1b724:	add	r0, r0, #20
   1b728:	ldr	r0, [r0]
   1b72c:	ldr	ip, [fp, #4]
   1b730:	add	ip, ip, #24
   1b734:	ldr	ip, [ip]
   1b738:	ldr	lr, [fp, #4]
   1b73c:	add	lr, lr, #28
   1b740:	ldr	lr, [lr]
   1b744:	str	lr, [sp, #20]
   1b748:	str	ip, [sp, #16]
   1b74c:	str	r0, [sp, #12]
   1b750:	str	r1, [sp, #8]
   1b754:	str	r2, [sp, #4]
   1b758:	str	r3, [sp]
   1b75c:	mov	r3, r5
   1b760:	mov	r2, r4
   1b764:	mov	r1, r6
   1b768:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b76c:	bl	114b0 <fprintf@plt>
   1b770:	b	1b8c8 <__assert_fail@plt+0xa2a4>
   1b774:	ldr	r0, [pc, #404]	; 1b910 <__assert_fail@plt+0xa2ec>
   1b778:	bl	11474 <gettext@plt>
   1b77c:	mov	r7, r0
   1b780:	ldr	r3, [fp, #4]
   1b784:	ldr	r5, [r3]
   1b788:	ldr	r3, [fp, #4]
   1b78c:	add	r3, r3, #4
   1b790:	ldr	r6, [r3]
   1b794:	ldr	r3, [fp, #4]
   1b798:	add	r3, r3, #8
   1b79c:	ldr	r3, [r3]
   1b7a0:	ldr	r2, [fp, #4]
   1b7a4:	add	r2, r2, #12
   1b7a8:	ldr	r2, [r2]
   1b7ac:	ldr	r1, [fp, #4]
   1b7b0:	add	r1, r1, #16
   1b7b4:	ldr	r1, [r1]
   1b7b8:	ldr	r0, [fp, #4]
   1b7bc:	add	r0, r0, #20
   1b7c0:	ldr	r0, [r0]
   1b7c4:	ldr	ip, [fp, #4]
   1b7c8:	add	ip, ip, #24
   1b7cc:	ldr	ip, [ip]
   1b7d0:	ldr	lr, [fp, #4]
   1b7d4:	add	lr, lr, #28
   1b7d8:	ldr	lr, [lr]
   1b7dc:	ldr	r4, [fp, #4]
   1b7e0:	add	r4, r4, #32
   1b7e4:	ldr	r4, [r4]
   1b7e8:	str	r4, [sp, #24]
   1b7ec:	str	lr, [sp, #20]
   1b7f0:	str	ip, [sp, #16]
   1b7f4:	str	r0, [sp, #12]
   1b7f8:	str	r1, [sp, #8]
   1b7fc:	str	r2, [sp, #4]
   1b800:	str	r3, [sp]
   1b804:	mov	r3, r6
   1b808:	mov	r2, r5
   1b80c:	mov	r1, r7
   1b810:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b814:	bl	114b0 <fprintf@plt>
   1b818:	b	1b8c8 <__assert_fail@plt+0xa2a4>
   1b81c:	ldr	r0, [pc, #240]	; 1b914 <__assert_fail@plt+0xa2f0>
   1b820:	bl	11474 <gettext@plt>
   1b824:	mov	r7, r0
   1b828:	ldr	r3, [fp, #4]
   1b82c:	ldr	r5, [r3]
   1b830:	ldr	r3, [fp, #4]
   1b834:	add	r3, r3, #4
   1b838:	ldr	r6, [r3]
   1b83c:	ldr	r3, [fp, #4]
   1b840:	add	r3, r3, #8
   1b844:	ldr	r3, [r3]
   1b848:	ldr	r2, [fp, #4]
   1b84c:	add	r2, r2, #12
   1b850:	ldr	r2, [r2]
   1b854:	ldr	r1, [fp, #4]
   1b858:	add	r1, r1, #16
   1b85c:	ldr	r1, [r1]
   1b860:	ldr	r0, [fp, #4]
   1b864:	add	r0, r0, #20
   1b868:	ldr	r0, [r0]
   1b86c:	ldr	ip, [fp, #4]
   1b870:	add	ip, ip, #24
   1b874:	ldr	ip, [ip]
   1b878:	ldr	lr, [fp, #4]
   1b87c:	add	lr, lr, #28
   1b880:	ldr	lr, [lr]
   1b884:	ldr	r4, [fp, #4]
   1b888:	add	r4, r4, #32
   1b88c:	ldr	r4, [r4]
   1b890:	str	r4, [sp, #24]
   1b894:	str	lr, [sp, #20]
   1b898:	str	ip, [sp, #16]
   1b89c:	str	r0, [sp, #12]
   1b8a0:	str	r1, [sp, #8]
   1b8a4:	str	r2, [sp, #4]
   1b8a8:	str	r3, [sp]
   1b8ac:	mov	r3, r6
   1b8b0:	mov	r2, r5
   1b8b4:	mov	r1, r7
   1b8b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b8bc:	bl	114b0 <fprintf@plt>
   1b8c0:	b	1b8c8 <__assert_fail@plt+0xa2a4>
   1b8c4:	nop			; (mov r0, r0)
   1b8c8:	nop			; (mov r0, r0)
   1b8cc:	sub	sp, fp, #20
   1b8d0:	pop	{r4, r5, r6, r7, fp, pc}
   1b8d4:	strheq	r0, [r2], -r4
   1b8d8:	andeq	r0, r2, r0, asr #1
   1b8dc:	andeq	r0, r2, r8, asr #1
   1b8e0:	andeq	r0, r0, r6, ror #15
   1b8e4:	ldrdeq	r0, [r2], -r8
   1b8e8:	andeq	r0, r2, ip, asr #1
   1b8ec:	andeq	r0, r2, r8, ror r1
   1b8f0:	muleq	r2, ip, r1
   1b8f4:	andeq	r0, r2, ip, lsr #3
   1b8f8:	andeq	r0, r2, r4, asr #3
   1b8fc:	andeq	r0, r2, r0, ror #3
   1b900:	andeq	r0, r2, r0, lsl #4
   1b904:	andeq	r0, r2, r4, lsr #4
   1b908:	andeq	r0, r2, ip, asr #4
   1b90c:	andeq	r0, r2, r8, ror r2
   1b910:	andeq	r0, r2, r8, lsr #5
   1b914:	ldrdeq	r0, [r2], -ip
   1b918:	push	{fp, lr}
   1b91c:	add	fp, sp, #4
   1b920:	sub	sp, sp, #32
   1b924:	str	r0, [fp, #-16]
   1b928:	str	r1, [fp, #-20]	; 0xffffffec
   1b92c:	str	r2, [fp, #-24]	; 0xffffffe8
   1b930:	str	r3, [fp, #-28]	; 0xffffffe4
   1b934:	mov	r3, #0
   1b938:	str	r3, [fp, #-8]
   1b93c:	b	1b94c <__assert_fail@plt+0xa328>
   1b940:	ldr	r3, [fp, #-8]
   1b944:	add	r3, r3, #1
   1b948:	str	r3, [fp, #-8]
   1b94c:	ldr	r3, [fp, #-8]
   1b950:	lsl	r3, r3, #2
   1b954:	ldr	r2, [fp, #4]
   1b958:	add	r3, r2, r3
   1b95c:	ldr	r3, [r3]
   1b960:	cmp	r3, #0
   1b964:	bne	1b940 <__assert_fail@plt+0xa31c>
   1b968:	ldr	r3, [fp, #-8]
   1b96c:	str	r3, [sp, #4]
   1b970:	ldr	r3, [fp, #4]
   1b974:	str	r3, [sp]
   1b978:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b97c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b980:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b984:	ldr	r0, [fp, #-16]
   1b988:	bl	1b3a8 <__assert_fail@plt+0x9d84>
   1b98c:	nop			; (mov r0, r0)
   1b990:	sub	sp, fp, #4
   1b994:	pop	{fp, pc}
   1b998:	push	{fp, lr}
   1b99c:	add	fp, sp, #4
   1b9a0:	sub	sp, sp, #72	; 0x48
   1b9a4:	str	r0, [fp, #-56]	; 0xffffffc8
   1b9a8:	str	r1, [fp, #-60]	; 0xffffffc4
   1b9ac:	str	r2, [fp, #-64]	; 0xffffffc0
   1b9b0:	str	r3, [fp, #-68]	; 0xffffffbc
   1b9b4:	mov	r3, #0
   1b9b8:	str	r3, [fp, #-8]
   1b9bc:	b	1b9cc <__assert_fail@plt+0xa3a8>
   1b9c0:	ldr	r3, [fp, #-8]
   1b9c4:	add	r3, r3, #1
   1b9c8:	str	r3, [fp, #-8]
   1b9cc:	ldr	r3, [fp, #-8]
   1b9d0:	cmp	r3, #9
   1b9d4:	bhi	1ba18 <__assert_fail@plt+0xa3f4>
   1b9d8:	ldr	r3, [fp, #4]
   1b9dc:	add	r2, r3, #4
   1b9e0:	str	r2, [fp, #4]
   1b9e4:	ldr	r2, [r3]
   1b9e8:	ldr	r3, [fp, #-8]
   1b9ec:	lsl	r3, r3, #2
   1b9f0:	sub	r1, fp, #4
   1b9f4:	add	r3, r1, r3
   1b9f8:	str	r2, [r3, #-44]	; 0xffffffd4
   1b9fc:	ldr	r3, [fp, #-8]
   1ba00:	lsl	r3, r3, #2
   1ba04:	sub	r2, fp, #4
   1ba08:	add	r3, r2, r3
   1ba0c:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1ba10:	cmp	r3, #0
   1ba14:	bne	1b9c0 <__assert_fail@plt+0xa39c>
   1ba18:	ldr	r3, [fp, #-8]
   1ba1c:	str	r3, [sp, #4]
   1ba20:	sub	r3, fp, #48	; 0x30
   1ba24:	str	r3, [sp]
   1ba28:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1ba2c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1ba30:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ba34:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ba38:	bl	1b3a8 <__assert_fail@plt+0x9d84>
   1ba3c:	nop			; (mov r0, r0)
   1ba40:	sub	sp, fp, #4
   1ba44:	pop	{fp, pc}
   1ba48:	push	{r3}		; (str r3, [sp, #-4]!)
   1ba4c:	push	{fp, lr}
   1ba50:	add	fp, sp, #4
   1ba54:	sub	sp, sp, #36	; 0x24
   1ba58:	str	r0, [fp, #-20]	; 0xffffffec
   1ba5c:	str	r1, [fp, #-24]	; 0xffffffe8
   1ba60:	str	r2, [fp, #-28]	; 0xffffffe4
   1ba64:	add	r3, fp, #8
   1ba68:	str	r3, [fp, #-12]
   1ba6c:	ldr	r3, [fp, #-12]
   1ba70:	str	r3, [sp]
   1ba74:	ldr	r3, [fp, #4]
   1ba78:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1ba7c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ba80:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ba84:	bl	1b998 <__assert_fail@plt+0xa374>
   1ba88:	nop			; (mov r0, r0)
   1ba8c:	sub	sp, fp, #4
   1ba90:	pop	{fp, lr}
   1ba94:	add	sp, sp, #4
   1ba98:	bx	lr
   1ba9c:	push	{fp, lr}
   1baa0:	add	fp, sp, #4
   1baa4:	ldr	r3, [pc, #96]	; 1bb0c <__assert_fail@plt+0xa4e8>
   1baa8:	ldr	r3, [r3]
   1baac:	mov	r1, r3
   1bab0:	mov	r0, #10
   1bab4:	bl	11300 <fputc_unlocked@plt>
   1bab8:	ldr	r0, [pc, #80]	; 1bb10 <__assert_fail@plt+0xa4ec>
   1babc:	bl	11474 <gettext@plt>
   1bac0:	mov	r3, r0
   1bac4:	ldr	r1, [pc, #72]	; 1bb14 <__assert_fail@plt+0xa4f0>
   1bac8:	mov	r0, r3
   1bacc:	bl	11288 <printf@plt>
   1bad0:	ldr	r0, [pc, #64]	; 1bb18 <__assert_fail@plt+0xa4f4>
   1bad4:	bl	11474 <gettext@plt>
   1bad8:	mov	r3, r0
   1badc:	ldr	r2, [pc, #56]	; 1bb1c <__assert_fail@plt+0xa4f8>
   1bae0:	ldr	r1, [pc, #56]	; 1bb20 <__assert_fail@plt+0xa4fc>
   1bae4:	mov	r0, r3
   1bae8:	bl	11288 <printf@plt>
   1baec:	ldr	r0, [pc, #48]	; 1bb24 <__assert_fail@plt+0xa500>
   1baf0:	bl	11474 <gettext@plt>
   1baf4:	mov	r3, r0
   1baf8:	ldr	r1, [pc, #40]	; 1bb28 <__assert_fail@plt+0xa504>
   1bafc:	mov	r0, r3
   1bb00:	bl	11288 <printf@plt>
   1bb04:	nop			; (mov r0, r0)
   1bb08:	pop	{fp, pc}
   1bb0c:	andeq	r1, r3, r4, asr #3
   1bb10:	andeq	r0, r2, r8, lsl r3
   1bb14:	andeq	r0, r2, ip, lsr #6
   1bb18:	andeq	r0, r2, r4, asr #6
   1bb1c:	andeq	r0, r2, r8, asr r3
   1bb20:	andeq	r0, r2, r0, lsl #7
   1bb24:	muleq	r2, r0, r3
   1bb28:			; <UNDEFINED> instruction: 0x000203b8
   1bb2c:	push	{fp, lr}
   1bb30:	add	fp, sp, #4
   1bb34:	sub	sp, sp, #16
   1bb38:	str	r0, [fp, #-8]
   1bb3c:	str	r1, [fp, #-12]
   1bb40:	str	r2, [fp, #-16]
   1bb44:	ldr	r2, [fp, #-16]
   1bb48:	ldr	r1, [fp, #-12]
   1bb4c:	ldr	r0, [fp, #-8]
   1bb50:	bl	1bcbc <__assert_fail@plt+0xa698>
   1bb54:	mov	r3, r0
   1bb58:	mov	r0, r3
   1bb5c:	sub	sp, fp, #4
   1bb60:	pop	{fp, pc}
   1bb64:	push	{fp, lr}
   1bb68:	add	fp, sp, #4
   1bb6c:	sub	sp, sp, #8
   1bb70:	str	r0, [fp, #-8]
   1bb74:	ldr	r3, [fp, #-8]
   1bb78:	cmp	r3, #0
   1bb7c:	bne	1bb84 <__assert_fail@plt+0xa560>
   1bb80:	bl	1c6b0 <__assert_fail@plt+0xb08c>
   1bb84:	ldr	r3, [fp, #-8]
   1bb88:	mov	r0, r3
   1bb8c:	sub	sp, fp, #4
   1bb90:	pop	{fp, pc}
   1bb94:	push	{fp, lr}
   1bb98:	add	fp, sp, #4
   1bb9c:	sub	sp, sp, #8
   1bba0:	str	r0, [fp, #-8]
   1bba4:	ldr	r0, [fp, #-8]
   1bba8:	bl	1c8d0 <__assert_fail@plt+0xb2ac>
   1bbac:	mov	r3, r0
   1bbb0:	mov	r0, r3
   1bbb4:	bl	1bb64 <__assert_fail@plt+0xa540>
   1bbb8:	mov	r3, r0
   1bbbc:	mov	r0, r3
   1bbc0:	sub	sp, fp, #4
   1bbc4:	pop	{fp, pc}
   1bbc8:	push	{fp, lr}
   1bbcc:	add	fp, sp, #4
   1bbd0:	sub	sp, sp, #8
   1bbd4:	str	r0, [fp, #-8]
   1bbd8:	ldr	r0, [fp, #-8]
   1bbdc:	bl	1d918 <__assert_fail@plt+0xc2f4>
   1bbe0:	mov	r3, r0
   1bbe4:	mov	r0, r3
   1bbe8:	bl	1bb64 <__assert_fail@plt+0xa540>
   1bbec:	mov	r3, r0
   1bbf0:	mov	r0, r3
   1bbf4:	sub	sp, fp, #4
   1bbf8:	pop	{fp, pc}
   1bbfc:	push	{fp, lr}
   1bc00:	add	fp, sp, #4
   1bc04:	sub	sp, sp, #8
   1bc08:	str	r0, [fp, #-8]
   1bc0c:	ldr	r0, [fp, #-8]
   1bc10:	bl	1bb94 <__assert_fail@plt+0xa570>
   1bc14:	mov	r3, r0
   1bc18:	mov	r0, r3
   1bc1c:	sub	sp, fp, #4
   1bc20:	pop	{fp, pc}
   1bc24:	push	{fp, lr}
   1bc28:	add	fp, sp, #4
   1bc2c:	sub	sp, sp, #16
   1bc30:	str	r0, [fp, #-16]
   1bc34:	str	r1, [fp, #-20]	; 0xffffffec
   1bc38:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bc3c:	ldr	r0, [fp, #-16]
   1bc40:	bl	1c978 <__assert_fail@plt+0xb354>
   1bc44:	str	r0, [fp, #-8]
   1bc48:	ldr	r3, [fp, #-8]
   1bc4c:	cmp	r3, #0
   1bc50:	bne	1bc70 <__assert_fail@plt+0xa64c>
   1bc54:	ldr	r3, [fp, #-16]
   1bc58:	cmp	r3, #0
   1bc5c:	beq	1bc6c <__assert_fail@plt+0xa648>
   1bc60:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc64:	cmp	r3, #0
   1bc68:	beq	1bc70 <__assert_fail@plt+0xa64c>
   1bc6c:	bl	1c6b0 <__assert_fail@plt+0xb08c>
   1bc70:	ldr	r3, [fp, #-8]
   1bc74:	mov	r0, r3
   1bc78:	sub	sp, fp, #4
   1bc7c:	pop	{fp, pc}
   1bc80:	push	{fp, lr}
   1bc84:	add	fp, sp, #4
   1bc88:	sub	sp, sp, #8
   1bc8c:	str	r0, [fp, #-8]
   1bc90:	str	r1, [fp, #-12]
   1bc94:	ldr	r1, [fp, #-12]
   1bc98:	ldr	r0, [fp, #-8]
   1bc9c:	bl	1d944 <__assert_fail@plt+0xc320>
   1bca0:	mov	r3, r0
   1bca4:	mov	r0, r3
   1bca8:	bl	1bb64 <__assert_fail@plt+0xa540>
   1bcac:	mov	r3, r0
   1bcb0:	mov	r0, r3
   1bcb4:	sub	sp, fp, #4
   1bcb8:	pop	{fp, pc}
   1bcbc:	push	{fp, lr}
   1bcc0:	add	fp, sp, #4
   1bcc4:	sub	sp, sp, #24
   1bcc8:	str	r0, [fp, #-16]
   1bccc:	str	r1, [fp, #-20]	; 0xffffffec
   1bcd0:	str	r2, [fp, #-24]	; 0xffffffe8
   1bcd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bcd8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bcdc:	ldr	r0, [fp, #-16]
   1bce0:	bl	1dbb8 <__assert_fail@plt+0xc594>
   1bce4:	str	r0, [fp, #-8]
   1bce8:	ldr	r3, [fp, #-8]
   1bcec:	cmp	r3, #0
   1bcf0:	bne	1bd1c <__assert_fail@plt+0xa6f8>
   1bcf4:	ldr	r3, [fp, #-16]
   1bcf8:	cmp	r3, #0
   1bcfc:	beq	1bd18 <__assert_fail@plt+0xa6f4>
   1bd00:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bd04:	cmp	r3, #0
   1bd08:	beq	1bd1c <__assert_fail@plt+0xa6f8>
   1bd0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bd10:	cmp	r3, #0
   1bd14:	beq	1bd1c <__assert_fail@plt+0xa6f8>
   1bd18:	bl	1c6b0 <__assert_fail@plt+0xb08c>
   1bd1c:	ldr	r3, [fp, #-8]
   1bd20:	mov	r0, r3
   1bd24:	sub	sp, fp, #4
   1bd28:	pop	{fp, pc}
   1bd2c:	push	{fp, lr}
   1bd30:	add	fp, sp, #4
   1bd34:	sub	sp, sp, #16
   1bd38:	str	r0, [fp, #-8]
   1bd3c:	str	r1, [fp, #-12]
   1bd40:	str	r2, [fp, #-16]
   1bd44:	ldr	r2, [fp, #-16]
   1bd48:	ldr	r1, [fp, #-12]
   1bd4c:	ldr	r0, [fp, #-8]
   1bd50:	bl	1d9cc <__assert_fail@plt+0xc3a8>
   1bd54:	mov	r3, r0
   1bd58:	mov	r0, r3
   1bd5c:	bl	1bb64 <__assert_fail@plt+0xa540>
   1bd60:	mov	r3, r0
   1bd64:	mov	r0, r3
   1bd68:	sub	sp, fp, #4
   1bd6c:	pop	{fp, pc}
   1bd70:	push	{fp, lr}
   1bd74:	add	fp, sp, #4
   1bd78:	sub	sp, sp, #8
   1bd7c:	str	r0, [fp, #-8]
   1bd80:	str	r1, [fp, #-12]
   1bd84:	ldr	r2, [fp, #-12]
   1bd88:	ldr	r1, [fp, #-8]
   1bd8c:	mov	r0, #0
   1bd90:	bl	1bcbc <__assert_fail@plt+0xa698>
   1bd94:	mov	r3, r0
   1bd98:	mov	r0, r3
   1bd9c:	sub	sp, fp, #4
   1bda0:	pop	{fp, pc}
   1bda4:	push	{fp, lr}
   1bda8:	add	fp, sp, #4
   1bdac:	sub	sp, sp, #8
   1bdb0:	str	r0, [fp, #-8]
   1bdb4:	str	r1, [fp, #-12]
   1bdb8:	ldr	r2, [fp, #-12]
   1bdbc:	ldr	r1, [fp, #-8]
   1bdc0:	mov	r0, #0
   1bdc4:	bl	1bd2c <__assert_fail@plt+0xa708>
   1bdc8:	mov	r3, r0
   1bdcc:	mov	r0, r3
   1bdd0:	sub	sp, fp, #4
   1bdd4:	pop	{fp, pc}
   1bdd8:	push	{fp, lr}
   1bddc:	add	fp, sp, #4
   1bde0:	sub	sp, sp, #8
   1bde4:	str	r0, [fp, #-8]
   1bde8:	str	r1, [fp, #-12]
   1bdec:	mov	r2, #1
   1bdf0:	ldr	r1, [fp, #-12]
   1bdf4:	ldr	r0, [fp, #-8]
   1bdf8:	bl	1be0c <__assert_fail@plt+0xa7e8>
   1bdfc:	mov	r3, r0
   1be00:	mov	r0, r3
   1be04:	sub	sp, fp, #4
   1be08:	pop	{fp, pc}
   1be0c:	push	{fp, lr}
   1be10:	add	fp, sp, #4
   1be14:	sub	sp, sp, #24
   1be18:	str	r0, [fp, #-16]
   1be1c:	str	r1, [fp, #-20]	; 0xffffffec
   1be20:	str	r2, [fp, #-24]	; 0xffffffe8
   1be24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1be28:	ldr	r3, [r3]
   1be2c:	str	r3, [fp, #-8]
   1be30:	ldr	r3, [fp, #-16]
   1be34:	cmp	r3, #0
   1be38:	bne	1be84 <__assert_fail@plt+0xa860>
   1be3c:	ldr	r3, [fp, #-8]
   1be40:	cmp	r3, #0
   1be44:	bne	1bee8 <__assert_fail@plt+0xa8c4>
   1be48:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1be4c:	mov	r0, #64	; 0x40
   1be50:	bl	1e9c4 <__assert_fail@plt+0xd3a0>
   1be54:	mov	r3, r0
   1be58:	str	r3, [fp, #-8]
   1be5c:	ldr	r3, [fp, #-8]
   1be60:	cmp	r3, #0
   1be64:	moveq	r3, #1
   1be68:	movne	r3, #0
   1be6c:	uxtb	r3, r3
   1be70:	mov	r2, r3
   1be74:	ldr	r3, [fp, #-8]
   1be78:	add	r3, r2, r3
   1be7c:	str	r3, [fp, #-8]
   1be80:	b	1bee8 <__assert_fail@plt+0xa8c4>
   1be84:	ldr	r3, [fp, #-8]
   1be88:	lsr	r3, r3, #1
   1be8c:	add	r3, r3, #1
   1be90:	mvn	r2, r3
   1be94:	ldr	r3, [fp, #-8]
   1be98:	cmp	r2, r3
   1be9c:	bcs	1bec0 <__assert_fail@plt+0xa89c>
   1bea0:	ldr	r3, [fp, #-8]
   1bea4:	lsr	r2, r3, #1
   1bea8:	ldr	r3, [fp, #-8]
   1beac:	add	r3, r2, r3
   1beb0:	add	r3, r3, #1
   1beb4:	str	r3, [fp, #-8]
   1beb8:	mov	r3, #1
   1bebc:	b	1bedc <__assert_fail@plt+0xa8b8>
   1bec0:	ldr	r3, [fp, #-8]
   1bec4:	lsr	r2, r3, #1
   1bec8:	ldr	r3, [fp, #-8]
   1becc:	add	r3, r2, r3
   1bed0:	add	r3, r3, #1
   1bed4:	str	r3, [fp, #-8]
   1bed8:	mov	r3, #0
   1bedc:	cmp	r3, #0
   1bee0:	beq	1bee8 <__assert_fail@plt+0xa8c4>
   1bee4:	bl	1c6b0 <__assert_fail@plt+0xb08c>
   1bee8:	ldr	r3, [fp, #-8]
   1beec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bef0:	mov	r1, r3
   1bef4:	ldr	r0, [fp, #-16]
   1bef8:	bl	1bcbc <__assert_fail@plt+0xa698>
   1befc:	str	r0, [fp, #-16]
   1bf00:	ldr	r2, [fp, #-8]
   1bf04:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bf08:	str	r2, [r3]
   1bf0c:	ldr	r3, [fp, #-16]
   1bf10:	mov	r0, r3
   1bf14:	sub	sp, fp, #4
   1bf18:	pop	{fp, pc}
   1bf1c:	push	{fp, lr}
   1bf20:	add	fp, sp, #4
   1bf24:	sub	sp, sp, #32
   1bf28:	str	r0, [fp, #-24]	; 0xffffffe8
   1bf2c:	str	r1, [fp, #-28]	; 0xffffffe4
   1bf30:	str	r2, [fp, #-32]	; 0xffffffe0
   1bf34:	str	r3, [fp, #-36]	; 0xffffffdc
   1bf38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bf3c:	ldr	r3, [r3]
   1bf40:	str	r3, [fp, #-8]
   1bf44:	ldr	r3, [fp, #-8]
   1bf48:	asr	r3, r3, #1
   1bf4c:	cmp	r3, #0
   1bf50:	bge	1bf78 <__assert_fail@plt+0xa954>
   1bf54:	ldr	r3, [fp, #-8]
   1bf58:	asr	r3, r3, #1
   1bf5c:	rsb	r2, r3, #-2147483648	; 0x80000000
   1bf60:	ldr	r3, [fp, #-8]
   1bf64:	cmp	r2, r3
   1bf68:	movgt	r3, #1
   1bf6c:	movle	r3, #0
   1bf70:	uxtb	r3, r3
   1bf74:	b	1bfcc <__assert_fail@plt+0xa9a8>
   1bf78:	ldr	r3, [fp, #-8]
   1bf7c:	cmp	r3, #0
   1bf80:	bge	1bfa8 <__assert_fail@plt+0xa984>
   1bf84:	ldr	r3, [fp, #-8]
   1bf88:	asr	r2, r3, #1
   1bf8c:	ldr	r3, [fp, #-8]
   1bf90:	rsb	r3, r3, #-2147483648	; 0x80000000
   1bf94:	cmp	r2, r3
   1bf98:	movlt	r3, #1
   1bf9c:	movge	r3, #0
   1bfa0:	uxtb	r3, r3
   1bfa4:	b	1bfcc <__assert_fail@plt+0xa9a8>
   1bfa8:	ldr	r3, [fp, #-8]
   1bfac:	asr	r2, r3, #1
   1bfb0:	mvn	r3, #-2147483648	; 0x80000000
   1bfb4:	sub	r3, r3, r2
   1bfb8:	ldr	r2, [fp, #-8]
   1bfbc:	cmp	r3, r2
   1bfc0:	movlt	r3, #1
   1bfc4:	movge	r3, #0
   1bfc8:	uxtb	r3, r3
   1bfcc:	cmp	r3, #0
   1bfd0:	beq	1bff4 <__assert_fail@plt+0xa9d0>
   1bfd4:	ldr	r3, [fp, #-8]
   1bfd8:	asr	r3, r3, #1
   1bfdc:	mov	r2, r3
   1bfe0:	ldr	r3, [fp, #-8]
   1bfe4:	add	r3, r2, r3
   1bfe8:	str	r3, [fp, #-16]
   1bfec:	mov	r3, #1
   1bff0:	b	1c010 <__assert_fail@plt+0xa9ec>
   1bff4:	ldr	r3, [fp, #-8]
   1bff8:	asr	r3, r3, #1
   1bffc:	mov	r2, r3
   1c000:	ldr	r3, [fp, #-8]
   1c004:	add	r3, r2, r3
   1c008:	str	r3, [fp, #-16]
   1c00c:	mov	r3, #0
   1c010:	cmp	r3, #0
   1c014:	beq	1c020 <__assert_fail@plt+0xa9fc>
   1c018:	mvn	r3, #-2147483648	; 0x80000000
   1c01c:	str	r3, [fp, #-16]
   1c020:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c024:	cmp	r3, #0
   1c028:	blt	1c044 <__assert_fail@plt+0xaa20>
   1c02c:	ldr	r3, [fp, #-16]
   1c030:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c034:	cmp	r2, r3
   1c038:	bge	1c044 <__assert_fail@plt+0xaa20>
   1c03c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c040:	str	r3, [fp, #-16]
   1c044:	ldr	r3, [fp, #4]
   1c048:	cmp	r3, #0
   1c04c:	bge	1c0dc <__assert_fail@plt+0xaab8>
   1c050:	ldr	r3, [fp, #-16]
   1c054:	cmp	r3, #0
   1c058:	bge	1c088 <__assert_fail@plt+0xaa64>
   1c05c:	ldr	r1, [fp, #4]
   1c060:	mvn	r0, #-2147483648	; 0x80000000
   1c064:	bl	1ebd0 <__assert_fail@plt+0xd5ac>
   1c068:	mov	r3, r0
   1c06c:	mov	r2, r3
   1c070:	ldr	r3, [fp, #-16]
   1c074:	cmp	r2, r3
   1c078:	movgt	r3, #1
   1c07c:	movle	r3, #0
   1c080:	uxtb	r3, r3
   1c084:	b	1c17c <__assert_fail@plt+0xab58>
   1c088:	ldr	r3, [fp, #4]
   1c08c:	cmn	r3, #1
   1c090:	bne	1c0b0 <__assert_fail@plt+0xaa8c>
   1c094:	ldr	r3, [fp, #-16]
   1c098:	add	r3, r3, #-2147483648	; 0x80000000
   1c09c:	cmp	r3, #0
   1c0a0:	movgt	r3, #1
   1c0a4:	movle	r3, #0
   1c0a8:	uxtb	r3, r3
   1c0ac:	b	1c17c <__assert_fail@plt+0xab58>
   1c0b0:	ldr	r1, [fp, #4]
   1c0b4:	mov	r0, #-2147483648	; 0x80000000
   1c0b8:	bl	1ebd0 <__assert_fail@plt+0xd5ac>
   1c0bc:	mov	r3, r0
   1c0c0:	mov	r2, r3
   1c0c4:	ldr	r3, [fp, #-16]
   1c0c8:	cmp	r2, r3
   1c0cc:	movlt	r3, #1
   1c0d0:	movge	r3, #0
   1c0d4:	uxtb	r3, r3
   1c0d8:	b	1c17c <__assert_fail@plt+0xab58>
   1c0dc:	ldr	r3, [fp, #4]
   1c0e0:	cmp	r3, #0
   1c0e4:	beq	1c178 <__assert_fail@plt+0xab54>
   1c0e8:	ldr	r3, [fp, #-16]
   1c0ec:	cmp	r3, #0
   1c0f0:	bge	1c14c <__assert_fail@plt+0xab28>
   1c0f4:	ldr	r3, [fp, #-16]
   1c0f8:	cmn	r3, #1
   1c0fc:	bne	1c11c <__assert_fail@plt+0xaaf8>
   1c100:	ldr	r3, [fp, #4]
   1c104:	add	r3, r3, #-2147483648	; 0x80000000
   1c108:	cmp	r3, #0
   1c10c:	movgt	r3, #1
   1c110:	movle	r3, #0
   1c114:	uxtb	r3, r3
   1c118:	b	1c17c <__assert_fail@plt+0xab58>
   1c11c:	ldr	r3, [fp, #-16]
   1c120:	mov	r1, r3
   1c124:	mov	r0, #-2147483648	; 0x80000000
   1c128:	bl	1ebd0 <__assert_fail@plt+0xd5ac>
   1c12c:	mov	r3, r0
   1c130:	mov	r2, r3
   1c134:	ldr	r3, [fp, #4]
   1c138:	cmp	r2, r3
   1c13c:	movlt	r3, #1
   1c140:	movge	r3, #0
   1c144:	uxtb	r3, r3
   1c148:	b	1c17c <__assert_fail@plt+0xab58>
   1c14c:	ldr	r1, [fp, #4]
   1c150:	mvn	r0, #-2147483648	; 0x80000000
   1c154:	bl	1ebd0 <__assert_fail@plt+0xd5ac>
   1c158:	mov	r3, r0
   1c15c:	mov	r2, r3
   1c160:	ldr	r3, [fp, #-16]
   1c164:	cmp	r2, r3
   1c168:	movlt	r3, #1
   1c16c:	movge	r3, #0
   1c170:	uxtb	r3, r3
   1c174:	b	1c17c <__assert_fail@plt+0xab58>
   1c178:	mov	r3, #0
   1c17c:	cmp	r3, #0
   1c180:	beq	1c1a0 <__assert_fail@plt+0xab7c>
   1c184:	ldr	r3, [fp, #-16]
   1c188:	mov	r2, r3
   1c18c:	ldr	r3, [fp, #4]
   1c190:	mul	r3, r3, r2
   1c194:	str	r3, [fp, #-20]	; 0xffffffec
   1c198:	mov	r3, #1
   1c19c:	b	1c1b8 <__assert_fail@plt+0xab94>
   1c1a0:	ldr	r3, [fp, #-16]
   1c1a4:	mov	r2, r3
   1c1a8:	ldr	r3, [fp, #4]
   1c1ac:	mul	r3, r3, r2
   1c1b0:	str	r3, [fp, #-20]	; 0xffffffec
   1c1b4:	mov	r3, #0
   1c1b8:	cmp	r3, #0
   1c1bc:	beq	1c1c8 <__assert_fail@plt+0xaba4>
   1c1c0:	mvn	r3, #-2147483648	; 0x80000000
   1c1c4:	b	1c1e0 <__assert_fail@plt+0xabbc>
   1c1c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c1cc:	cmp	r3, #63	; 0x3f
   1c1d0:	bgt	1c1dc <__assert_fail@plt+0xabb8>
   1c1d4:	mov	r3, #64	; 0x40
   1c1d8:	b	1c1e0 <__assert_fail@plt+0xabbc>
   1c1dc:	mov	r3, #0
   1c1e0:	str	r3, [fp, #-12]
   1c1e4:	ldr	r3, [fp, #-12]
   1c1e8:	cmp	r3, #0
   1c1ec:	beq	1c228 <__assert_fail@plt+0xac04>
   1c1f0:	ldr	r1, [fp, #4]
   1c1f4:	ldr	r0, [fp, #-12]
   1c1f8:	bl	1ebd0 <__assert_fail@plt+0xd5ac>
   1c1fc:	mov	r3, r0
   1c200:	str	r3, [fp, #-16]
   1c204:	ldr	r3, [fp, #-12]
   1c208:	ldr	r1, [fp, #4]
   1c20c:	mov	r0, r3
   1c210:	bl	1edf0 <__assert_fail@plt+0xd7cc>
   1c214:	mov	r3, r1
   1c218:	mov	r2, r3
   1c21c:	ldr	r3, [fp, #-12]
   1c220:	sub	r3, r3, r2
   1c224:	str	r3, [fp, #-20]	; 0xffffffec
   1c228:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c22c:	cmp	r3, #0
   1c230:	bne	1c240 <__assert_fail@plt+0xac1c>
   1c234:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c238:	mov	r2, #0
   1c23c:	str	r2, [r3]
   1c240:	ldr	r2, [fp, #-16]
   1c244:	ldr	r3, [fp, #-8]
   1c248:	sub	r2, r2, r3
   1c24c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c250:	cmp	r2, r3
   1c254:	bge	1c48c <__assert_fail@plt+0xae68>
   1c258:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c25c:	cmp	r3, #0
   1c260:	bge	1c284 <__assert_fail@plt+0xac60>
   1c264:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c268:	rsb	r2, r3, #-2147483648	; 0x80000000
   1c26c:	ldr	r3, [fp, #-8]
   1c270:	cmp	r2, r3
   1c274:	movgt	r3, #1
   1c278:	movle	r3, #0
   1c27c:	uxtb	r3, r3
   1c280:	b	1c2d0 <__assert_fail@plt+0xacac>
   1c284:	ldr	r3, [fp, #-8]
   1c288:	cmp	r3, #0
   1c28c:	bge	1c2b0 <__assert_fail@plt+0xac8c>
   1c290:	ldr	r3, [fp, #-8]
   1c294:	rsb	r2, r3, #-2147483648	; 0x80000000
   1c298:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c29c:	cmp	r2, r3
   1c2a0:	movgt	r3, #1
   1c2a4:	movle	r3, #0
   1c2a8:	uxtb	r3, r3
   1c2ac:	b	1c2d0 <__assert_fail@plt+0xacac>
   1c2b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c2b4:	mvn	r3, #-2147483648	; 0x80000000
   1c2b8:	sub	r3, r3, r2
   1c2bc:	ldr	r2, [fp, #-8]
   1c2c0:	cmp	r3, r2
   1c2c4:	movlt	r3, #1
   1c2c8:	movge	r3, #0
   1c2cc:	uxtb	r3, r3
   1c2d0:	cmp	r3, #0
   1c2d4:	beq	1c2ec <__assert_fail@plt+0xacc8>
   1c2d8:	ldr	r2, [fp, #-8]
   1c2dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c2e0:	add	r3, r2, r3
   1c2e4:	str	r3, [fp, #-16]
   1c2e8:	b	1c488 <__assert_fail@plt+0xae64>
   1c2ec:	ldr	r2, [fp, #-8]
   1c2f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c2f4:	add	r3, r2, r3
   1c2f8:	str	r3, [fp, #-16]
   1c2fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c300:	cmp	r3, #0
   1c304:	blt	1c318 <__assert_fail@plt+0xacf4>
   1c308:	ldr	r3, [fp, #-16]
   1c30c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c310:	cmp	r2, r3
   1c314:	blt	1c488 <__assert_fail@plt+0xae64>
   1c318:	ldr	r3, [fp, #4]
   1c31c:	cmp	r3, #0
   1c320:	bge	1c3b0 <__assert_fail@plt+0xad8c>
   1c324:	ldr	r3, [fp, #-16]
   1c328:	cmp	r3, #0
   1c32c:	bge	1c35c <__assert_fail@plt+0xad38>
   1c330:	ldr	r1, [fp, #4]
   1c334:	mvn	r0, #-2147483648	; 0x80000000
   1c338:	bl	1ebd0 <__assert_fail@plt+0xd5ac>
   1c33c:	mov	r3, r0
   1c340:	mov	r2, r3
   1c344:	ldr	r3, [fp, #-16]
   1c348:	cmp	r2, r3
   1c34c:	movgt	r3, #1
   1c350:	movle	r3, #0
   1c354:	uxtb	r3, r3
   1c358:	b	1c450 <__assert_fail@plt+0xae2c>
   1c35c:	ldr	r3, [fp, #4]
   1c360:	cmn	r3, #1
   1c364:	bne	1c384 <__assert_fail@plt+0xad60>
   1c368:	ldr	r3, [fp, #-16]
   1c36c:	add	r3, r3, #-2147483648	; 0x80000000
   1c370:	cmp	r3, #0
   1c374:	movgt	r3, #1
   1c378:	movle	r3, #0
   1c37c:	uxtb	r3, r3
   1c380:	b	1c450 <__assert_fail@plt+0xae2c>
   1c384:	ldr	r1, [fp, #4]
   1c388:	mov	r0, #-2147483648	; 0x80000000
   1c38c:	bl	1ebd0 <__assert_fail@plt+0xd5ac>
   1c390:	mov	r3, r0
   1c394:	mov	r2, r3
   1c398:	ldr	r3, [fp, #-16]
   1c39c:	cmp	r2, r3
   1c3a0:	movlt	r3, #1
   1c3a4:	movge	r3, #0
   1c3a8:	uxtb	r3, r3
   1c3ac:	b	1c450 <__assert_fail@plt+0xae2c>
   1c3b0:	ldr	r3, [fp, #4]
   1c3b4:	cmp	r3, #0
   1c3b8:	beq	1c44c <__assert_fail@plt+0xae28>
   1c3bc:	ldr	r3, [fp, #-16]
   1c3c0:	cmp	r3, #0
   1c3c4:	bge	1c420 <__assert_fail@plt+0xadfc>
   1c3c8:	ldr	r3, [fp, #-16]
   1c3cc:	cmn	r3, #1
   1c3d0:	bne	1c3f0 <__assert_fail@plt+0xadcc>
   1c3d4:	ldr	r3, [fp, #4]
   1c3d8:	add	r3, r3, #-2147483648	; 0x80000000
   1c3dc:	cmp	r3, #0
   1c3e0:	movgt	r3, #1
   1c3e4:	movle	r3, #0
   1c3e8:	uxtb	r3, r3
   1c3ec:	b	1c450 <__assert_fail@plt+0xae2c>
   1c3f0:	ldr	r3, [fp, #-16]
   1c3f4:	mov	r1, r3
   1c3f8:	mov	r0, #-2147483648	; 0x80000000
   1c3fc:	bl	1ebd0 <__assert_fail@plt+0xd5ac>
   1c400:	mov	r3, r0
   1c404:	mov	r2, r3
   1c408:	ldr	r3, [fp, #4]
   1c40c:	cmp	r2, r3
   1c410:	movlt	r3, #1
   1c414:	movge	r3, #0
   1c418:	uxtb	r3, r3
   1c41c:	b	1c450 <__assert_fail@plt+0xae2c>
   1c420:	ldr	r1, [fp, #4]
   1c424:	mvn	r0, #-2147483648	; 0x80000000
   1c428:	bl	1ebd0 <__assert_fail@plt+0xd5ac>
   1c42c:	mov	r3, r0
   1c430:	mov	r2, r3
   1c434:	ldr	r3, [fp, #-16]
   1c438:	cmp	r2, r3
   1c43c:	movlt	r3, #1
   1c440:	movge	r3, #0
   1c444:	uxtb	r3, r3
   1c448:	b	1c450 <__assert_fail@plt+0xae2c>
   1c44c:	mov	r3, #0
   1c450:	cmp	r3, #0
   1c454:	beq	1c470 <__assert_fail@plt+0xae4c>
   1c458:	ldr	r3, [fp, #-16]
   1c45c:	mov	r2, r3
   1c460:	ldr	r3, [fp, #4]
   1c464:	mul	r3, r3, r2
   1c468:	str	r3, [fp, #-20]	; 0xffffffec
   1c46c:	b	1c488 <__assert_fail@plt+0xae64>
   1c470:	ldr	r3, [fp, #-16]
   1c474:	mov	r2, r3
   1c478:	ldr	r3, [fp, #4]
   1c47c:	mul	r3, r3, r2
   1c480:	str	r3, [fp, #-20]	; 0xffffffec
   1c484:	b	1c48c <__assert_fail@plt+0xae68>
   1c488:	bl	1c6b0 <__assert_fail@plt+0xb08c>
   1c48c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c490:	mov	r1, r3
   1c494:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c498:	bl	1bc24 <__assert_fail@plt+0xa600>
   1c49c:	str	r0, [fp, #-24]	; 0xffffffe8
   1c4a0:	ldr	r2, [fp, #-16]
   1c4a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c4a8:	str	r2, [r3]
   1c4ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c4b0:	mov	r0, r3
   1c4b4:	sub	sp, fp, #4
   1c4b8:	pop	{fp, pc}
   1c4bc:	push	{fp, lr}
   1c4c0:	add	fp, sp, #4
   1c4c4:	sub	sp, sp, #8
   1c4c8:	str	r0, [fp, #-8]
   1c4cc:	mov	r1, #1
   1c4d0:	ldr	r0, [fp, #-8]
   1c4d4:	bl	1c514 <__assert_fail@plt+0xaef0>
   1c4d8:	mov	r3, r0
   1c4dc:	mov	r0, r3
   1c4e0:	sub	sp, fp, #4
   1c4e4:	pop	{fp, pc}
   1c4e8:	push	{fp, lr}
   1c4ec:	add	fp, sp, #4
   1c4f0:	sub	sp, sp, #8
   1c4f4:	str	r0, [fp, #-8]
   1c4f8:	mov	r1, #1
   1c4fc:	ldr	r0, [fp, #-8]
   1c500:	bl	1c550 <__assert_fail@plt+0xaf2c>
   1c504:	mov	r3, r0
   1c508:	mov	r0, r3
   1c50c:	sub	sp, fp, #4
   1c510:	pop	{fp, pc}
   1c514:	push	{fp, lr}
   1c518:	add	fp, sp, #4
   1c51c:	sub	sp, sp, #8
   1c520:	str	r0, [fp, #-8]
   1c524:	str	r1, [fp, #-12]
   1c528:	ldr	r1, [fp, #-12]
   1c52c:	ldr	r0, [fp, #-8]
   1c530:	bl	1c80c <__assert_fail@plt+0xb1e8>
   1c534:	mov	r3, r0
   1c538:	mov	r0, r3
   1c53c:	bl	1bb64 <__assert_fail@plt+0xa540>
   1c540:	mov	r3, r0
   1c544:	mov	r0, r3
   1c548:	sub	sp, fp, #4
   1c54c:	pop	{fp, pc}
   1c550:	push	{fp, lr}
   1c554:	add	fp, sp, #4
   1c558:	sub	sp, sp, #8
   1c55c:	str	r0, [fp, #-8]
   1c560:	str	r1, [fp, #-12]
   1c564:	ldr	r1, [fp, #-12]
   1c568:	ldr	r0, [fp, #-8]
   1c56c:	bl	1d994 <__assert_fail@plt+0xc370>
   1c570:	mov	r3, r0
   1c574:	mov	r0, r3
   1c578:	bl	1bb64 <__assert_fail@plt+0xa540>
   1c57c:	mov	r3, r0
   1c580:	mov	r0, r3
   1c584:	sub	sp, fp, #4
   1c588:	pop	{fp, pc}
   1c58c:	push	{fp, lr}
   1c590:	add	fp, sp, #4
   1c594:	sub	sp, sp, #8
   1c598:	str	r0, [fp, #-8]
   1c59c:	str	r1, [fp, #-12]
   1c5a0:	ldr	r0, [fp, #-12]
   1c5a4:	bl	1bb94 <__assert_fail@plt+0xa570>
   1c5a8:	mov	r3, r0
   1c5ac:	ldr	r2, [fp, #-12]
   1c5b0:	ldr	r1, [fp, #-8]
   1c5b4:	mov	r0, r3
   1c5b8:	bl	112d0 <memcpy@plt>
   1c5bc:	mov	r3, r0
   1c5c0:	mov	r0, r3
   1c5c4:	sub	sp, fp, #4
   1c5c8:	pop	{fp, pc}
   1c5cc:	push	{fp, lr}
   1c5d0:	add	fp, sp, #4
   1c5d4:	sub	sp, sp, #8
   1c5d8:	str	r0, [fp, #-8]
   1c5dc:	str	r1, [fp, #-12]
   1c5e0:	ldr	r0, [fp, #-12]
   1c5e4:	bl	1bbc8 <__assert_fail@plt+0xa5a4>
   1c5e8:	mov	r3, r0
   1c5ec:	mov	r0, r3
   1c5f0:	ldr	r3, [fp, #-12]
   1c5f4:	mov	r2, r3
   1c5f8:	ldr	r1, [fp, #-8]
   1c5fc:	bl	112d0 <memcpy@plt>
   1c600:	mov	r3, r0
   1c604:	mov	r0, r3
   1c608:	sub	sp, fp, #4
   1c60c:	pop	{fp, pc}
   1c610:	push	{fp, lr}
   1c614:	add	fp, sp, #4
   1c618:	sub	sp, sp, #16
   1c61c:	str	r0, [fp, #-16]
   1c620:	str	r1, [fp, #-20]	; 0xffffffec
   1c624:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c628:	add	r3, r3, #1
   1c62c:	mov	r0, r3
   1c630:	bl	1bbc8 <__assert_fail@plt+0xa5a4>
   1c634:	mov	r3, r0
   1c638:	str	r3, [fp, #-8]
   1c63c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c640:	ldr	r2, [fp, #-8]
   1c644:	add	r3, r2, r3
   1c648:	mov	r2, #0
   1c64c:	strb	r2, [r3]
   1c650:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c654:	mov	r2, r3
   1c658:	ldr	r1, [fp, #-16]
   1c65c:	ldr	r0, [fp, #-8]
   1c660:	bl	112d0 <memcpy@plt>
   1c664:	mov	r3, r0
   1c668:	mov	r0, r3
   1c66c:	sub	sp, fp, #4
   1c670:	pop	{fp, pc}
   1c674:	push	{fp, lr}
   1c678:	add	fp, sp, #4
   1c67c:	sub	sp, sp, #8
   1c680:	str	r0, [fp, #-8]
   1c684:	ldr	r0, [fp, #-8]
   1c688:	bl	1148c <strlen@plt>
   1c68c:	mov	r3, r0
   1c690:	add	r3, r3, #1
   1c694:	mov	r1, r3
   1c698:	ldr	r0, [fp, #-8]
   1c69c:	bl	1c58c <__assert_fail@plt+0xaf68>
   1c6a0:	mov	r3, r0
   1c6a4:	mov	r0, r3
   1c6a8:	sub	sp, fp, #4
   1c6ac:	pop	{fp, pc}
   1c6b0:	push	{r4, r5, fp, lr}
   1c6b4:	add	fp, sp, #12
   1c6b8:	ldr	r3, [pc, #32]	; 1c6e0 <__assert_fail@plt+0xb0bc>
   1c6bc:	ldr	r4, [r3]
   1c6c0:	ldr	r0, [pc, #28]	; 1c6e4 <__assert_fail@plt+0xb0c0>
   1c6c4:	bl	11474 <gettext@plt>
   1c6c8:	mov	r3, r0
   1c6cc:	ldr	r2, [pc, #20]	; 1c6e8 <__assert_fail@plt+0xb0c4>
   1c6d0:	mov	r1, #0
   1c6d4:	mov	r0, r4
   1c6d8:	bl	113cc <error@plt>
   1c6dc:	bl	115e8 <abort@plt>
   1c6e0:	andeq	r1, r3, ip, ror #2
   1c6e4:	andeq	r0, r2, r8, lsl #8
   1c6e8:	andeq	r0, r2, ip, lsl r4
   1c6ec:	push	{fp, lr}
   1c6f0:	add	fp, sp, #4
   1c6f4:	sub	sp, sp, #24
   1c6f8:	str	r0, [fp, #-16]
   1c6fc:	str	r1, [fp, #-20]	; 0xffffffec
   1c700:	str	r2, [fp, #-24]	; 0xffffffe8
   1c704:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c708:	orr	r3, r3, #512	; 0x200
   1c70c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c710:	mov	r1, r3
   1c714:	ldr	r0, [fp, #-16]
   1c718:	bl	136f8 <__assert_fail@plt+0x20d4>
   1c71c:	str	r0, [fp, #-8]
   1c720:	ldr	r3, [fp, #-8]
   1c724:	cmp	r3, #0
   1c728:	bne	1c758 <__assert_fail@plt+0xb134>
   1c72c:	bl	114bc <__errno_location@plt>
   1c730:	mov	r3, r0
   1c734:	ldr	r3, [r3]
   1c738:	cmp	r3, #22
   1c73c:	bne	1c754 <__assert_fail@plt+0xb130>
   1c740:	ldr	r3, [pc, #32]	; 1c768 <__assert_fail@plt+0xb144>
   1c744:	mov	r2, #41	; 0x29
   1c748:	ldr	r1, [pc, #28]	; 1c76c <__assert_fail@plt+0xb148>
   1c74c:	ldr	r0, [pc, #28]	; 1c770 <__assert_fail@plt+0xb14c>
   1c750:	bl	11624 <__assert_fail@plt>
   1c754:	bl	1c6b0 <__assert_fail@plt+0xb08c>
   1c758:	ldr	r3, [fp, #-8]
   1c75c:	mov	r0, r3
   1c760:	sub	sp, fp, #4
   1c764:	pop	{fp, pc}
   1c768:	andeq	r0, r2, ip, lsr r4
   1c76c:	andeq	r0, r2, r0, lsr #8
   1c770:	andeq	r0, r2, ip, lsr #8
   1c774:	push	{fp}		; (str fp, [sp, #-4]!)
   1c778:	add	fp, sp, #0
   1c77c:	sub	sp, sp, #12
   1c780:	str	r0, [fp, #-8]
   1c784:	str	r1, [fp, #-12]
   1c788:	ldr	r3, [fp, #-8]
   1c78c:	ldr	r3, [r3, #48]	; 0x30
   1c790:	and	r3, r3, #16
   1c794:	cmp	r3, #0
   1c798:	beq	1c7b0 <__assert_fail@plt+0xb18c>
   1c79c:	ldr	r3, [fp, #-8]
   1c7a0:	ldr	r3, [r3, #48]	; 0x30
   1c7a4:	and	r3, r3, #1
   1c7a8:	cmp	r3, #0
   1c7ac:	beq	1c7e8 <__assert_fail@plt+0xb1c4>
   1c7b0:	ldr	r3, [fp, #-8]
   1c7b4:	ldr	r3, [r3, #48]	; 0x30
   1c7b8:	and	r3, r3, #16
   1c7bc:	cmp	r3, #0
   1c7c0:	beq	1c7f0 <__assert_fail@plt+0xb1cc>
   1c7c4:	ldr	r3, [fp, #-8]
   1c7c8:	ldr	r3, [r3, #48]	; 0x30
   1c7cc:	and	r3, r3, #1
   1c7d0:	cmp	r3, #0
   1c7d4:	beq	1c7f0 <__assert_fail@plt+0xb1cc>
   1c7d8:	ldr	r3, [fp, #-12]
   1c7dc:	ldr	r3, [r3, #48]	; 0x30
   1c7e0:	cmp	r3, #0
   1c7e4:	beq	1c7f0 <__assert_fail@plt+0xb1cc>
   1c7e8:	mov	r3, #1
   1c7ec:	b	1c7f4 <__assert_fail@plt+0xb1d0>
   1c7f0:	mov	r3, #0
   1c7f4:	and	r3, r3, #1
   1c7f8:	uxtb	r3, r3
   1c7fc:	mov	r0, r3
   1c800:	add	sp, fp, #0
   1c804:	pop	{fp}		; (ldr fp, [sp], #4)
   1c808:	bx	lr
   1c80c:	push	{r4, r5, fp, lr}
   1c810:	add	fp, sp, #12
   1c814:	sub	sp, sp, #16
   1c818:	str	r0, [fp, #-24]	; 0xffffffe8
   1c81c:	str	r1, [fp, #-28]	; 0xffffffe4
   1c820:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c824:	cmp	r3, #0
   1c828:	beq	1c838 <__assert_fail@plt+0xb214>
   1c82c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c830:	cmp	r3, #0
   1c834:	bne	1c848 <__assert_fail@plt+0xb224>
   1c838:	mov	r3, #1
   1c83c:	str	r3, [fp, #-28]	; 0xffffffe4
   1c840:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c844:	str	r3, [fp, #-24]	; 0xffffffe8
   1c848:	mov	r1, #0
   1c84c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c850:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c854:	umull	r2, r3, r2, r3
   1c858:	mov	r4, r3
   1c85c:	mov	r5, #0
   1c860:	cmp	r4, #0
   1c864:	beq	1c86c <__assert_fail@plt+0xb248>
   1c868:	mov	r1, #1
   1c86c:	cmp	r2, #0
   1c870:	bge	1c878 <__assert_fail@plt+0xb254>
   1c874:	mov	r1, #1
   1c878:	mov	r3, r2
   1c87c:	str	r3, [fp, #-20]	; 0xffffffec
   1c880:	mov	r3, r1
   1c884:	and	r3, r3, #1
   1c888:	uxtb	r3, r3
   1c88c:	cmp	r3, #0
   1c890:	beq	1c8ac <__assert_fail@plt+0xb288>
   1c894:	bl	114bc <__errno_location@plt>
   1c898:	mov	r2, r0
   1c89c:	mov	r3, #12
   1c8a0:	str	r3, [r2]
   1c8a4:	mov	r3, #0
   1c8a8:	b	1c8c4 <__assert_fail@plt+0xb2a0>
   1c8ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1c8b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c8b4:	bl	1124c <calloc@plt>
   1c8b8:	mov	r3, r0
   1c8bc:	str	r3, [fp, #-16]
   1c8c0:	ldr	r3, [fp, #-16]
   1c8c4:	mov	r0, r3
   1c8c8:	sub	sp, fp, #12
   1c8cc:	pop	{r4, r5, fp, pc}
   1c8d0:	push	{r4, r5, fp, lr}
   1c8d4:	add	fp, sp, #12
   1c8d8:	sub	sp, sp, #16
   1c8dc:	str	r0, [fp, #-24]	; 0xffffffe8
   1c8e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c8e4:	cmp	r3, #0
   1c8e8:	bne	1c8f4 <__assert_fail@plt+0xb2d0>
   1c8ec:	mov	r3, #1
   1c8f0:	str	r3, [fp, #-24]	; 0xffffffe8
   1c8f4:	mov	r1, #0
   1c8f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c8fc:	mov	r2, r3
   1c900:	mov	r3, #0
   1c904:	mov	r4, r3
   1c908:	mov	r5, #0
   1c90c:	cmp	r4, #0
   1c910:	beq	1c918 <__assert_fail@plt+0xb2f4>
   1c914:	mov	r1, #1
   1c918:	cmp	r2, #0
   1c91c:	bge	1c924 <__assert_fail@plt+0xb300>
   1c920:	mov	r1, #1
   1c924:	mov	r3, r2
   1c928:	str	r3, [fp, #-20]	; 0xffffffec
   1c92c:	mov	r3, r1
   1c930:	and	r3, r3, #1
   1c934:	uxtb	r3, r3
   1c938:	cmp	r3, #0
   1c93c:	beq	1c958 <__assert_fail@plt+0xb334>
   1c940:	bl	114bc <__errno_location@plt>
   1c944:	mov	r2, r0
   1c948:	mov	r3, #12
   1c94c:	str	r3, [r2]
   1c950:	mov	r3, #0
   1c954:	b	1c96c <__assert_fail@plt+0xb348>
   1c958:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c95c:	bl	113fc <malloc@plt>
   1c960:	mov	r3, r0
   1c964:	str	r3, [fp, #-16]
   1c968:	ldr	r3, [fp, #-16]
   1c96c:	mov	r0, r3
   1c970:	sub	sp, fp, #12
   1c974:	pop	{r4, r5, fp, pc}
   1c978:	push	{r4, r5, fp, lr}
   1c97c:	add	fp, sp, #12
   1c980:	sub	sp, sp, #16
   1c984:	str	r0, [fp, #-24]	; 0xffffffe8
   1c988:	str	r1, [fp, #-28]	; 0xffffffe4
   1c98c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c990:	cmp	r3, #0
   1c994:	bne	1c9a8 <__assert_fail@plt+0xb384>
   1c998:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1c99c:	bl	1c8d0 <__assert_fail@plt+0xb2ac>
   1c9a0:	mov	r3, r0
   1c9a4:	b	1ca3c <__assert_fail@plt+0xb418>
   1c9a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c9ac:	cmp	r3, #0
   1c9b0:	bne	1c9c4 <__assert_fail@plt+0xb3a0>
   1c9b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c9b8:	bl	1d784 <__assert_fail@plt+0xc160>
   1c9bc:	mov	r3, #0
   1c9c0:	b	1ca3c <__assert_fail@plt+0xb418>
   1c9c4:	mov	r1, #0
   1c9c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c9cc:	mov	r2, r3
   1c9d0:	mov	r3, #0
   1c9d4:	mov	r4, r3
   1c9d8:	mov	r5, #0
   1c9dc:	cmp	r4, #0
   1c9e0:	beq	1c9e8 <__assert_fail@plt+0xb3c4>
   1c9e4:	mov	r1, #1
   1c9e8:	cmp	r2, #0
   1c9ec:	bge	1c9f4 <__assert_fail@plt+0xb3d0>
   1c9f0:	mov	r1, #1
   1c9f4:	mov	r3, r2
   1c9f8:	str	r3, [fp, #-20]	; 0xffffffec
   1c9fc:	mov	r3, r1
   1ca00:	and	r3, r3, #1
   1ca04:	uxtb	r3, r3
   1ca08:	cmp	r3, #0
   1ca0c:	beq	1ca28 <__assert_fail@plt+0xb404>
   1ca10:	bl	114bc <__errno_location@plt>
   1ca14:	mov	r2, r0
   1ca18:	mov	r3, #12
   1ca1c:	str	r3, [r2]
   1ca20:	mov	r3, #0
   1ca24:	b	1ca3c <__assert_fail@plt+0xb418>
   1ca28:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1ca2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ca30:	bl	11324 <realloc@plt>
   1ca34:	str	r0, [fp, #-16]
   1ca38:	ldr	r3, [fp, #-16]
   1ca3c:	mov	r0, r3
   1ca40:	sub	sp, fp, #12
   1ca44:	pop	{r4, r5, fp, pc}
   1ca48:	push	{fp, lr}
   1ca4c:	add	fp, sp, #4
   1ca50:	sub	sp, sp, #64	; 0x40
   1ca54:	str	r0, [fp, #-56]	; 0xffffffc8
   1ca58:	str	r1, [fp, #-60]	; 0xffffffc4
   1ca5c:	str	r2, [fp, #-64]	; 0xffffffc0
   1ca60:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ca64:	str	r3, [fp, #-8]
   1ca68:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1ca6c:	ldrb	r3, [r3]
   1ca70:	cmp	r3, #0
   1ca74:	bne	1ca8c <__assert_fail@plt+0xb468>
   1ca78:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ca7c:	mov	r2, #0
   1ca80:	strb	r2, [r3]
   1ca84:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ca88:	b	1cba0 <__assert_fail@plt+0xb57c>
   1ca8c:	ldr	r3, [pc, #280]	; 1cbac <__assert_fail@plt+0xb588>
   1ca90:	ldr	r3, [r3]
   1ca94:	cmp	r3, #0
   1ca98:	bne	1cb14 <__assert_fail@plt+0xb4f0>
   1ca9c:	ldr	r1, [pc, #268]	; 1cbb0 <__assert_fail@plt+0xb58c>
   1caa0:	ldr	r0, [pc, #268]	; 1cbb4 <__assert_fail@plt+0xb590>
   1caa4:	bl	113e4 <open64@plt>
   1caa8:	str	r0, [fp, #-12]
   1caac:	ldr	r3, [fp, #-12]
   1cab0:	cmp	r3, #0
   1cab4:	bge	1cac8 <__assert_fail@plt+0xb4a4>
   1cab8:	ldr	r3, [pc, #236]	; 1cbac <__assert_fail@plt+0xb588>
   1cabc:	mvn	r2, #0
   1cac0:	str	r2, [r3]
   1cac4:	b	1cb14 <__assert_fail@plt+0xb4f0>
   1cac8:	sub	r3, fp, #52	; 0x34
   1cacc:	ldr	r2, [fp, #-12]
   1cad0:	ldr	r1, [pc, #224]	; 1cbb8 <__assert_fail@plt+0xb594>
   1cad4:	mov	r0, r3
   1cad8:	bl	11558 <sprintf@plt>
   1cadc:	sub	r3, fp, #52	; 0x34
   1cae0:	mov	r1, #0
   1cae4:	mov	r0, r3
   1cae8:	bl	11504 <access@plt>
   1caec:	mov	r3, r0
   1caf0:	cmp	r3, #0
   1caf4:	beq	1cb00 <__assert_fail@plt+0xb4dc>
   1caf8:	mvn	r3, #0
   1cafc:	b	1cb04 <__assert_fail@plt+0xb4e0>
   1cb00:	mov	r3, #1
   1cb04:	ldr	r2, [pc, #160]	; 1cbac <__assert_fail@plt+0xb588>
   1cb08:	str	r3, [r2]
   1cb0c:	ldr	r0, [fp, #-12]
   1cb10:	bl	115f4 <close@plt>
   1cb14:	ldr	r3, [pc, #144]	; 1cbac <__assert_fail@plt+0xb588>
   1cb18:	ldr	r3, [r3]
   1cb1c:	cmp	r3, #0
   1cb20:	bge	1cb2c <__assert_fail@plt+0xb508>
   1cb24:	mov	r3, #0
   1cb28:	b	1cba0 <__assert_fail@plt+0xb57c>
   1cb2c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1cb30:	bl	1148c <strlen@plt>
   1cb34:	mov	r3, r0
   1cb38:	add	r3, r3, #27
   1cb3c:	str	r3, [fp, #-16]
   1cb40:	ldr	r3, [fp, #-16]
   1cb44:	cmp	r3, #4032	; 0xfc0
   1cb48:	bls	1cb70 <__assert_fail@plt+0xb54c>
   1cb4c:	ldr	r0, [fp, #-16]
   1cb50:	bl	1c8d0 <__assert_fail@plt+0xb2ac>
   1cb54:	mov	r3, r0
   1cb58:	str	r3, [fp, #-8]
   1cb5c:	ldr	r3, [fp, #-8]
   1cb60:	cmp	r3, #0
   1cb64:	bne	1cb70 <__assert_fail@plt+0xb54c>
   1cb68:	mov	r3, #0
   1cb6c:	b	1cba0 <__assert_fail@plt+0xb57c>
   1cb70:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1cb74:	ldr	r1, [pc, #64]	; 1cbbc <__assert_fail@plt+0xb598>
   1cb78:	ldr	r0, [fp, #-8]
   1cb7c:	bl	11558 <sprintf@plt>
   1cb80:	str	r0, [fp, #-20]	; 0xffffffec
   1cb84:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cb88:	ldr	r2, [fp, #-8]
   1cb8c:	add	r3, r2, r3
   1cb90:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1cb94:	mov	r0, r3
   1cb98:	bl	1139c <strcpy@plt>
   1cb9c:	ldr	r3, [fp, #-8]
   1cba0:	mov	r0, r3
   1cba4:	sub	sp, fp, #4
   1cba8:	pop	{fp, pc}
   1cbac:	andeq	r1, r3, ip, lsr r3
   1cbb0:	andeq	r4, r8, r0, lsl #18
   1cbb4:	andeq	r0, r2, r8, asr #8
   1cbb8:	andeq	r0, r2, r8, asr r4
   1cbbc:	andeq	r0, r2, r0, ror r4
   1cbc0:	push	{r4, r5, r6, r7, fp}
   1cbc4:	add	fp, sp, #16
   1cbc8:	sub	sp, sp, #20
   1cbcc:	strd	r0, [fp, #-28]	; 0xffffffe4
   1cbd0:	str	r2, [fp, #-32]	; 0xffffffe0
   1cbd4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1cbd8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1cbdc:	sub	ip, r1, #32
   1cbe0:	rsb	r0, r1, #32
   1cbe4:	lsl	r7, r3, r1
   1cbe8:	orr	r7, r7, r2, lsl ip
   1cbec:	orr	r7, r7, r2, lsr r0
   1cbf0:	lsl	r6, r2, r1
   1cbf4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1cbf8:	rsb	r1, r1, #0
   1cbfc:	and	r1, r1, #63	; 0x3f
   1cc00:	rsb	ip, r1, #32
   1cc04:	sub	r0, r1, #32
   1cc08:	lsr	r4, r2, r1
   1cc0c:	orr	r4, r4, r3, lsl ip
   1cc10:	orr	r4, r4, r3, lsr r0
   1cc14:	lsr	r5, r3, r1
   1cc18:	orr	r4, r4, r6
   1cc1c:	orr	r5, r5, r7
   1cc20:	mov	r2, r4
   1cc24:	mov	r3, r5
   1cc28:	mov	r0, r2
   1cc2c:	mov	r1, r3
   1cc30:	sub	sp, fp, #16
   1cc34:	pop	{r4, r5, r6, r7, fp}
   1cc38:	bx	lr
   1cc3c:	push	{r4, r5, r6, r7, fp}
   1cc40:	add	fp, sp, #16
   1cc44:	sub	sp, sp, #20
   1cc48:	strd	r0, [fp, #-28]	; 0xffffffe4
   1cc4c:	str	r2, [fp, #-32]	; 0xffffffe0
   1cc50:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1cc54:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1cc58:	rsb	ip, r1, #32
   1cc5c:	sub	r0, r1, #32
   1cc60:	lsr	r6, r2, r1
   1cc64:	orr	r6, r6, r3, lsl ip
   1cc68:	orr	r6, r6, r3, lsr r0
   1cc6c:	lsr	r7, r3, r1
   1cc70:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1cc74:	rsb	r1, r1, #0
   1cc78:	and	r1, r1, #63	; 0x3f
   1cc7c:	sub	ip, r1, #32
   1cc80:	rsb	r0, r1, #32
   1cc84:	lsl	r5, r3, r1
   1cc88:	orr	r5, r5, r2, lsl ip
   1cc8c:	orr	r5, r5, r2, lsr r0
   1cc90:	lsl	r4, r2, r1
   1cc94:	orr	r4, r4, r6
   1cc98:	orr	r5, r5, r7
   1cc9c:	mov	r2, r4
   1cca0:	mov	r3, r5
   1cca4:	mov	r0, r2
   1cca8:	mov	r1, r3
   1ccac:	sub	sp, fp, #16
   1ccb0:	pop	{r4, r5, r6, r7, fp}
   1ccb4:	bx	lr
   1ccb8:	push	{fp}		; (str fp, [sp, #-4]!)
   1ccbc:	add	fp, sp, #0
   1ccc0:	sub	sp, sp, #12
   1ccc4:	str	r0, [fp, #-8]
   1ccc8:	str	r1, [fp, #-12]
   1cccc:	ldr	r2, [fp, #-8]
   1ccd0:	ldr	r3, [fp, #-12]
   1ccd4:	rsb	r3, r3, #32
   1ccd8:	ror	r3, r2, r3
   1ccdc:	mov	r0, r3
   1cce0:	add	sp, fp, #0
   1cce4:	pop	{fp}		; (ldr fp, [sp], #4)
   1cce8:	bx	lr
   1ccec:	push	{fp}		; (str fp, [sp, #-4]!)
   1ccf0:	add	fp, sp, #0
   1ccf4:	sub	sp, sp, #12
   1ccf8:	str	r0, [fp, #-8]
   1ccfc:	str	r1, [fp, #-12]
   1cd00:	ldr	r2, [fp, #-8]
   1cd04:	ldr	r3, [fp, #-12]
   1cd08:	ror	r3, r2, r3
   1cd0c:	mov	r0, r3
   1cd10:	add	sp, fp, #0
   1cd14:	pop	{fp}		; (ldr fp, [sp], #4)
   1cd18:	bx	lr
   1cd1c:	push	{fp}		; (str fp, [sp, #-4]!)
   1cd20:	add	fp, sp, #0
   1cd24:	sub	sp, sp, #12
   1cd28:	str	r0, [fp, #-8]
   1cd2c:	str	r1, [fp, #-12]
   1cd30:	ldr	r2, [fp, #-8]
   1cd34:	ldr	r3, [fp, #-12]
   1cd38:	rsb	r3, r3, #32
   1cd3c:	ror	r3, r2, r3
   1cd40:	mov	r0, r3
   1cd44:	add	sp, fp, #0
   1cd48:	pop	{fp}		; (ldr fp, [sp], #4)
   1cd4c:	bx	lr
   1cd50:	push	{fp}		; (str fp, [sp, #-4]!)
   1cd54:	add	fp, sp, #0
   1cd58:	sub	sp, sp, #12
   1cd5c:	str	r0, [fp, #-8]
   1cd60:	str	r1, [fp, #-12]
   1cd64:	ldr	r2, [fp, #-8]
   1cd68:	ldr	r3, [fp, #-12]
   1cd6c:	ror	r3, r2, r3
   1cd70:	mov	r0, r3
   1cd74:	add	sp, fp, #0
   1cd78:	pop	{fp}		; (ldr fp, [sp], #4)
   1cd7c:	bx	lr
   1cd80:	push	{fp}		; (str fp, [sp, #-4]!)
   1cd84:	add	fp, sp, #0
   1cd88:	sub	sp, sp, #12
   1cd8c:	mov	r3, r0
   1cd90:	str	r1, [fp, #-12]
   1cd94:	strh	r3, [fp, #-6]
   1cd98:	ldrh	r2, [fp, #-6]
   1cd9c:	ldr	r3, [fp, #-12]
   1cda0:	lsl	r3, r2, r3
   1cda4:	uxth	r2, r3
   1cda8:	ldrh	r1, [fp, #-6]
   1cdac:	ldr	r3, [fp, #-12]
   1cdb0:	rsb	r3, r3, #16
   1cdb4:	lsr	r3, r1, r3
   1cdb8:	uxth	r3, r3
   1cdbc:	orr	r3, r2, r3
   1cdc0:	uxth	r3, r3
   1cdc4:	mov	r0, r3
   1cdc8:	add	sp, fp, #0
   1cdcc:	pop	{fp}		; (ldr fp, [sp], #4)
   1cdd0:	bx	lr
   1cdd4:	push	{fp}		; (str fp, [sp, #-4]!)
   1cdd8:	add	fp, sp, #0
   1cddc:	sub	sp, sp, #12
   1cde0:	mov	r3, r0
   1cde4:	str	r1, [fp, #-12]
   1cde8:	strh	r3, [fp, #-6]
   1cdec:	ldrh	r2, [fp, #-6]
   1cdf0:	ldr	r3, [fp, #-12]
   1cdf4:	lsr	r3, r2, r3
   1cdf8:	uxth	r2, r3
   1cdfc:	ldrh	r1, [fp, #-6]
   1ce00:	ldr	r3, [fp, #-12]
   1ce04:	rsb	r3, r3, #16
   1ce08:	lsl	r3, r1, r3
   1ce0c:	uxth	r3, r3
   1ce10:	orr	r3, r2, r3
   1ce14:	uxth	r3, r3
   1ce18:	mov	r0, r3
   1ce1c:	add	sp, fp, #0
   1ce20:	pop	{fp}		; (ldr fp, [sp], #4)
   1ce24:	bx	lr
   1ce28:	push	{fp}		; (str fp, [sp, #-4]!)
   1ce2c:	add	fp, sp, #0
   1ce30:	sub	sp, sp, #12
   1ce34:	mov	r3, r0
   1ce38:	str	r1, [fp, #-12]
   1ce3c:	strb	r3, [fp, #-5]
   1ce40:	ldrb	r2, [fp, #-5]
   1ce44:	ldr	r3, [fp, #-12]
   1ce48:	lsl	r3, r2, r3
   1ce4c:	uxtb	r2, r3
   1ce50:	ldrb	r1, [fp, #-5]
   1ce54:	ldr	r3, [fp, #-12]
   1ce58:	rsb	r3, r3, #8
   1ce5c:	lsr	r3, r1, r3
   1ce60:	uxtb	r3, r3
   1ce64:	orr	r3, r2, r3
   1ce68:	uxtb	r3, r3
   1ce6c:	mov	r0, r3
   1ce70:	add	sp, fp, #0
   1ce74:	pop	{fp}		; (ldr fp, [sp], #4)
   1ce78:	bx	lr
   1ce7c:	push	{fp}		; (str fp, [sp, #-4]!)
   1ce80:	add	fp, sp, #0
   1ce84:	sub	sp, sp, #12
   1ce88:	mov	r3, r0
   1ce8c:	str	r1, [fp, #-12]
   1ce90:	strb	r3, [fp, #-5]
   1ce94:	ldrb	r2, [fp, #-5]
   1ce98:	ldr	r3, [fp, #-12]
   1ce9c:	lsr	r3, r2, r3
   1cea0:	uxtb	r2, r3
   1cea4:	ldrb	r1, [fp, #-5]
   1cea8:	ldr	r3, [fp, #-12]
   1ceac:	rsb	r3, r3, #8
   1ceb0:	lsl	r3, r1, r3
   1ceb4:	uxtb	r3, r3
   1ceb8:	orr	r3, r2, r3
   1cebc:	uxtb	r3, r3
   1cec0:	mov	r0, r3
   1cec4:	add	sp, fp, #0
   1cec8:	pop	{fp}		; (ldr fp, [sp], #4)
   1cecc:	bx	lr
   1ced0:	push	{r4, r5, fp, lr}
   1ced4:	add	fp, sp, #12
   1ced8:	sub	sp, sp, #16
   1cedc:	str	r0, [fp, #-24]	; 0xffffffe8
   1cee0:	str	r1, [fp, #-28]	; 0xffffffe4
   1cee4:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1cee8:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1ceec:	cmp	r5, r4
   1cef0:	bne	1cefc <__assert_fail@plt+0xb8d8>
   1cef4:	mov	r3, #0
   1cef8:	b	1cf5c <__assert_fail@plt+0xb938>
   1cefc:	ldrb	r3, [r5]
   1cf00:	mov	r0, r3
   1cf04:	bl	1e240 <__assert_fail@plt+0xcc1c>
   1cf08:	mov	r3, r0
   1cf0c:	strb	r3, [fp, #-13]
   1cf10:	ldrb	r3, [r4]
   1cf14:	mov	r0, r3
   1cf18:	bl	1e240 <__assert_fail@plt+0xcc1c>
   1cf1c:	mov	r3, r0
   1cf20:	strb	r3, [fp, #-14]
   1cf24:	ldrb	r3, [fp, #-13]
   1cf28:	cmp	r3, #0
   1cf2c:	beq	1cf4c <__assert_fail@plt+0xb928>
   1cf30:	add	r5, r5, #1
   1cf34:	add	r4, r4, #1
   1cf38:	ldrb	r2, [fp, #-13]
   1cf3c:	ldrb	r3, [fp, #-14]
   1cf40:	cmp	r2, r3
   1cf44:	beq	1cefc <__assert_fail@plt+0xb8d8>
   1cf48:	b	1cf50 <__assert_fail@plt+0xb92c>
   1cf4c:	nop			; (mov r0, r0)
   1cf50:	ldrb	r2, [fp, #-13]
   1cf54:	ldrb	r3, [fp, #-14]
   1cf58:	sub	r3, r2, r3
   1cf5c:	mov	r0, r3
   1cf60:	sub	sp, fp, #12
   1cf64:	pop	{r4, r5, fp, pc}
   1cf68:	push	{fp, lr}
   1cf6c:	add	fp, sp, #4
   1cf70:	sub	sp, sp, #16
   1cf74:	str	r0, [fp, #-16]
   1cf78:	ldr	r0, [fp, #-16]
   1cf7c:	bl	113a8 <__fpending@plt>
   1cf80:	mov	r3, r0
   1cf84:	cmp	r3, #0
   1cf88:	movne	r3, #1
   1cf8c:	moveq	r3, #0
   1cf90:	strb	r3, [fp, #-5]
   1cf94:	ldr	r0, [fp, #-16]
   1cf98:	bl	113b4 <ferror_unlocked@plt>
   1cf9c:	mov	r3, r0
   1cfa0:	cmp	r3, #0
   1cfa4:	movne	r3, #1
   1cfa8:	moveq	r3, #0
   1cfac:	strb	r3, [fp, #-6]
   1cfb0:	ldr	r0, [fp, #-16]
   1cfb4:	bl	1d1e8 <__assert_fail@plt+0xbbc4>
   1cfb8:	mov	r3, r0
   1cfbc:	cmp	r3, #0
   1cfc0:	movne	r3, #1
   1cfc4:	moveq	r3, #0
   1cfc8:	strb	r3, [fp, #-7]
   1cfcc:	ldrb	r3, [fp, #-6]
   1cfd0:	cmp	r3, #0
   1cfd4:	bne	1d004 <__assert_fail@plt+0xb9e0>
   1cfd8:	ldrb	r3, [fp, #-7]
   1cfdc:	cmp	r3, #0
   1cfe0:	beq	1d030 <__assert_fail@plt+0xba0c>
   1cfe4:	ldrb	r3, [fp, #-5]
   1cfe8:	cmp	r3, #0
   1cfec:	bne	1d004 <__assert_fail@plt+0xb9e0>
   1cff0:	bl	114bc <__errno_location@plt>
   1cff4:	mov	r3, r0
   1cff8:	ldr	r3, [r3]
   1cffc:	cmp	r3, #9
   1d000:	beq	1d030 <__assert_fail@plt+0xba0c>
   1d004:	ldrb	r3, [fp, #-7]
   1d008:	eor	r3, r3, #1
   1d00c:	uxtb	r3, r3
   1d010:	cmp	r3, #0
   1d014:	beq	1d028 <__assert_fail@plt+0xba04>
   1d018:	bl	114bc <__errno_location@plt>
   1d01c:	mov	r2, r0
   1d020:	mov	r3, #0
   1d024:	str	r3, [r2]
   1d028:	mvn	r3, #0
   1d02c:	b	1d034 <__assert_fail@plt+0xba10>
   1d030:	mov	r3, #0
   1d034:	mov	r0, r3
   1d038:	sub	sp, fp, #4
   1d03c:	pop	{fp, pc}
   1d040:	push	{fp}		; (str fp, [sp, #-4]!)
   1d044:	add	fp, sp, #0
   1d048:	sub	sp, sp, #12
   1d04c:	strd	r0, [fp, #-12]
   1d050:	ldrd	r2, [fp, #-12]
   1d054:	subs	r0, r2, #1
   1d058:	sbc	r1, r3, #0
   1d05c:	ldrd	r2, [fp, #-12]
   1d060:	and	r2, r2, r0
   1d064:	and	r3, r3, r1
   1d068:	orr	r3, r2, r3
   1d06c:	cmp	r3, #0
   1d070:	moveq	r3, #1
   1d074:	movne	r3, #0
   1d078:	uxtb	r3, r3
   1d07c:	mov	r0, r3
   1d080:	add	sp, fp, #0
   1d084:	pop	{fp}		; (ldr fp, [sp], #4)
   1d088:	bx	lr
   1d08c:	push	{fp}		; (str fp, [sp, #-4]!)
   1d090:	add	fp, sp, #0
   1d094:	sub	sp, sp, #12
   1d098:	str	r0, [fp, #-8]
   1d09c:	ldr	r1, [fp, #-8]
   1d0a0:	mov	r2, #0
   1d0a4:	mov	r3, #0
   1d0a8:	strd	r2, [r1, #16]
   1d0ac:	ldr	r3, [fp, #-8]
   1d0b0:	ldr	r2, [pc, #16]	; 1d0c8 <__assert_fail@plt+0xbaa4>
   1d0b4:	str	r2, [r3, #24]
   1d0b8:	nop			; (mov r0, r0)
   1d0bc:	add	sp, fp, #0
   1d0c0:	pop	{fp}		; (ldr fp, [sp], #4)
   1d0c4:	bx	lr
   1d0c8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1d0cc:	push	{fp, lr}
   1d0d0:	add	fp, sp, #4
   1d0d4:	sub	sp, sp, #8
   1d0d8:	str	r0, [fp, #-8]
   1d0dc:	str	r1, [fp, #-12]
   1d0e0:	ldr	r3, [fp, #-8]
   1d0e4:	ldr	r3, [r3, #24]
   1d0e8:	ldr	r2, [pc, #232]	; 1d1d8 <__assert_fail@plt+0xbbb4>
   1d0ec:	cmp	r3, r2
   1d0f0:	beq	1d108 <__assert_fail@plt+0xbae4>
   1d0f4:	ldr	r3, [pc, #224]	; 1d1dc <__assert_fail@plt+0xbbb8>
   1d0f8:	mov	r2, #60	; 0x3c
   1d0fc:	ldr	r1, [pc, #220]	; 1d1e0 <__assert_fail@plt+0xbbbc>
   1d100:	ldr	r0, [pc, #220]	; 1d1e4 <__assert_fail@plt+0xbbc0>
   1d104:	bl	11624 <__assert_fail@plt>
   1d108:	ldr	r3, [fp, #-8]
   1d10c:	ldrd	r2, [r3, #16]
   1d110:	orrs	r3, r2, r3
   1d114:	beq	1d158 <__assert_fail@plt+0xbb34>
   1d118:	ldr	r3, [fp, #-12]
   1d11c:	ldrd	r0, [r3, #96]	; 0x60
   1d120:	ldr	r3, [fp, #-8]
   1d124:	ldrd	r2, [r3]
   1d128:	cmp	r1, r3
   1d12c:	cmpeq	r0, r2
   1d130:	bne	1d158 <__assert_fail@plt+0xbb34>
   1d134:	ldr	r3, [fp, #-12]
   1d138:	ldrd	r0, [r3]
   1d13c:	ldr	r3, [fp, #-8]
   1d140:	ldrd	r2, [r3, #8]
   1d144:	cmp	r1, r3
   1d148:	cmpeq	r0, r2
   1d14c:	bne	1d158 <__assert_fail@plt+0xbb34>
   1d150:	mov	r3, #1
   1d154:	b	1d1cc <__assert_fail@plt+0xbba8>
   1d158:	ldr	r3, [fp, #-8]
   1d15c:	ldrd	r2, [r3, #16]
   1d160:	adds	r2, r2, #1
   1d164:	adc	r3, r3, #0
   1d168:	ldr	r1, [fp, #-8]
   1d16c:	strd	r2, [r1, #16]
   1d170:	ldr	r3, [fp, #-8]
   1d174:	ldrd	r2, [r3, #16]
   1d178:	mov	r0, r2
   1d17c:	mov	r1, r3
   1d180:	bl	1d040 <__assert_fail@plt+0xba1c>
   1d184:	mov	r3, r0
   1d188:	cmp	r3, #0
   1d18c:	beq	1d1c8 <__assert_fail@plt+0xbba4>
   1d190:	ldr	r3, [fp, #-8]
   1d194:	ldrd	r2, [r3, #16]
   1d198:	orrs	r3, r2, r3
   1d19c:	bne	1d1a8 <__assert_fail@plt+0xbb84>
   1d1a0:	mov	r3, #1
   1d1a4:	b	1d1cc <__assert_fail@plt+0xbba8>
   1d1a8:	ldr	r3, [fp, #-12]
   1d1ac:	ldrd	r2, [r3]
   1d1b0:	ldr	r1, [fp, #-8]
   1d1b4:	strd	r2, [r1, #8]
   1d1b8:	ldr	r3, [fp, #-12]
   1d1bc:	ldrd	r2, [r3, #96]	; 0x60
   1d1c0:	ldr	r1, [fp, #-8]
   1d1c4:	strd	r2, [r1]
   1d1c8:	mov	r3, #0
   1d1cc:	mov	r0, r3
   1d1d0:	sub	sp, fp, #4
   1d1d4:	pop	{fp, pc}
   1d1d8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1d1dc:			; <UNDEFINED> instruction: 0x000204b0
   1d1e0:	andeq	r0, r2, r4, lsl #9
   1d1e4:	muleq	r2, r8, r4
   1d1e8:	push	{fp, lr}
   1d1ec:	add	fp, sp, #4
   1d1f0:	sub	sp, sp, #32
   1d1f4:	str	r0, [fp, #-24]	; 0xffffffe8
   1d1f8:	mov	r3, #0
   1d1fc:	str	r3, [fp, #-8]
   1d200:	mov	r3, #0
   1d204:	str	r3, [fp, #-12]
   1d208:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d20c:	bl	114e0 <fileno@plt>
   1d210:	str	r0, [fp, #-16]
   1d214:	ldr	r3, [fp, #-16]
   1d218:	cmp	r3, #0
   1d21c:	bge	1d230 <__assert_fail@plt+0xbc0c>
   1d220:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d224:	bl	11510 <fclose@plt>
   1d228:	mov	r3, r0
   1d22c:	b	1d2d4 <__assert_fail@plt+0xbcb0>
   1d230:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d234:	bl	11414 <__freading@plt>
   1d238:	mov	r3, r0
   1d23c:	cmp	r3, #0
   1d240:	beq	1d27c <__assert_fail@plt+0xbc58>
   1d244:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d248:	bl	114e0 <fileno@plt>
   1d24c:	mov	r1, r0
   1d250:	mov	r3, #1
   1d254:	str	r3, [sp]
   1d258:	mov	r2, #0
   1d25c:	mov	r3, #0
   1d260:	mov	r0, r1
   1d264:	bl	11384 <lseek64@plt>
   1d268:	mvn	r2, #0
   1d26c:	mvn	r3, #0
   1d270:	cmp	r1, r3
   1d274:	cmpeq	r0, r2
   1d278:	beq	1d2a0 <__assert_fail@plt+0xbc7c>
   1d27c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d280:	bl	1d724 <__assert_fail@plt+0xc100>
   1d284:	mov	r3, r0
   1d288:	cmp	r3, #0
   1d28c:	beq	1d2a0 <__assert_fail@plt+0xbc7c>
   1d290:	bl	114bc <__errno_location@plt>
   1d294:	mov	r3, r0
   1d298:	ldr	r3, [r3]
   1d29c:	str	r3, [fp, #-8]
   1d2a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d2a4:	bl	11510 <fclose@plt>
   1d2a8:	str	r0, [fp, #-12]
   1d2ac:	ldr	r3, [fp, #-8]
   1d2b0:	cmp	r3, #0
   1d2b4:	beq	1d2d0 <__assert_fail@plt+0xbcac>
   1d2b8:	bl	114bc <__errno_location@plt>
   1d2bc:	mov	r2, r0
   1d2c0:	ldr	r3, [fp, #-8]
   1d2c4:	str	r3, [r2]
   1d2c8:	mvn	r3, #0
   1d2cc:	str	r3, [fp, #-12]
   1d2d0:	ldr	r3, [fp, #-12]
   1d2d4:	mov	r0, r3
   1d2d8:	sub	sp, fp, #4
   1d2dc:	pop	{fp, pc}
   1d2e0:	push	{r1, r2, r3}
   1d2e4:	push	{fp, lr}
   1d2e8:	add	fp, sp, #4
   1d2ec:	sub	sp, sp, #36	; 0x24
   1d2f0:	str	r0, [fp, #-36]	; 0xffffffdc
   1d2f4:	mvn	r3, #0
   1d2f8:	str	r3, [fp, #-12]
   1d2fc:	add	r3, fp, #8
   1d300:	str	r3, [fp, #-32]	; 0xffffffe0
   1d304:	ldr	r3, [fp, #4]
   1d308:	cmp	r3, #0
   1d30c:	beq	1d320 <__assert_fail@plt+0xbcfc>
   1d310:	ldr	r2, [pc, #432]	; 1d4c8 <__assert_fail@plt+0xbea4>
   1d314:	cmp	r3, r2
   1d318:	beq	1d348 <__assert_fail@plt+0xbd24>
   1d31c:	b	1d370 <__assert_fail@plt+0xbd4c>
   1d320:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d324:	add	r2, r3, #4
   1d328:	str	r2, [fp, #-32]	; 0xffffffe0
   1d32c:	ldr	r3, [r3]
   1d330:	str	r3, [fp, #-16]
   1d334:	ldr	r1, [fp, #-16]
   1d338:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d33c:	bl	1d4e0 <__assert_fail@plt+0xbebc>
   1d340:	str	r0, [fp, #-12]
   1d344:	b	1d4b0 <__assert_fail@plt+0xbe8c>
   1d348:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d34c:	add	r2, r3, #4
   1d350:	str	r2, [fp, #-32]	; 0xffffffe0
   1d354:	ldr	r3, [r3]
   1d358:	str	r3, [fp, #-20]	; 0xffffffec
   1d35c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d360:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d364:	bl	1d518 <__assert_fail@plt+0xbef4>
   1d368:	str	r0, [fp, #-12]
   1d36c:	b	1d4b0 <__assert_fail@plt+0xbe8c>
   1d370:	ldr	r3, [fp, #4]
   1d374:	cmp	r3, #11
   1d378:	beq	1d440 <__assert_fail@plt+0xbe1c>
   1d37c:	cmp	r3, #11
   1d380:	bgt	1d3e0 <__assert_fail@plt+0xbdbc>
   1d384:	cmp	r3, #3
   1d388:	beq	1d440 <__assert_fail@plt+0xbe1c>
   1d38c:	cmp	r3, #3
   1d390:	bgt	1d3b0 <__assert_fail@plt+0xbd8c>
   1d394:	cmp	r3, #1
   1d398:	beq	1d440 <__assert_fail@plt+0xbe1c>
   1d39c:	cmp	r3, #1
   1d3a0:	bgt	1d454 <__assert_fail@plt+0xbe30>
   1d3a4:	cmp	r3, #0
   1d3a8:	beq	1d454 <__assert_fail@plt+0xbe30>
   1d3ac:	b	1d480 <__assert_fail@plt+0xbe5c>
   1d3b0:	cmp	r3, #8
   1d3b4:	beq	1d454 <__assert_fail@plt+0xbe30>
   1d3b8:	cmp	r3, #8
   1d3bc:	bgt	1d3cc <__assert_fail@plt+0xbda8>
   1d3c0:	cmp	r3, #4
   1d3c4:	beq	1d454 <__assert_fail@plt+0xbe30>
   1d3c8:	b	1d480 <__assert_fail@plt+0xbe5c>
   1d3cc:	cmp	r3, #9
   1d3d0:	beq	1d440 <__assert_fail@plt+0xbe1c>
   1d3d4:	cmp	r3, #10
   1d3d8:	beq	1d454 <__assert_fail@plt+0xbe30>
   1d3dc:	b	1d480 <__assert_fail@plt+0xbe5c>
   1d3e0:	ldr	r2, [pc, #228]	; 1d4cc <__assert_fail@plt+0xbea8>
   1d3e4:	cmp	r3, r2
   1d3e8:	bgt	1d41c <__assert_fail@plt+0xbdf8>
   1d3ec:	ldr	r2, [pc, #212]	; 1d4c8 <__assert_fail@plt+0xbea4>
   1d3f0:	cmp	r3, r2
   1d3f4:	bge	1d454 <__assert_fail@plt+0xbe30>
   1d3f8:	ldr	r2, [pc, #208]	; 1d4d0 <__assert_fail@plt+0xbeac>
   1d3fc:	cmp	r3, r2
   1d400:	beq	1d440 <__assert_fail@plt+0xbe1c>
   1d404:	ldr	r2, [pc, #200]	; 1d4d4 <__assert_fail@plt+0xbeb0>
   1d408:	cmp	r3, r2
   1d40c:	beq	1d454 <__assert_fail@plt+0xbe30>
   1d410:	cmp	r3, #1024	; 0x400
   1d414:	beq	1d454 <__assert_fail@plt+0xbe30>
   1d418:	b	1d480 <__assert_fail@plt+0xbe5c>
   1d41c:	ldr	r2, [pc, #180]	; 1d4d8 <__assert_fail@plt+0xbeb4>
   1d420:	cmp	r3, r2
   1d424:	beq	1d454 <__assert_fail@plt+0xbe30>
   1d428:	ldr	r2, [pc, #168]	; 1d4d8 <__assert_fail@plt+0xbeb4>
   1d42c:	cmp	r3, r2
   1d430:	blt	1d440 <__assert_fail@plt+0xbe1c>
   1d434:	ldr	r2, [pc, #160]	; 1d4dc <__assert_fail@plt+0xbeb8>
   1d438:	cmp	r3, r2
   1d43c:	bne	1d480 <__assert_fail@plt+0xbe5c>
   1d440:	ldr	r1, [fp, #4]
   1d444:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d448:	bl	11528 <fcntl64@plt>
   1d44c:	str	r0, [fp, #-12]
   1d450:	b	1d4ac <__assert_fail@plt+0xbe88>
   1d454:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d458:	add	r2, r3, #4
   1d45c:	str	r2, [fp, #-32]	; 0xffffffe0
   1d460:	ldr	r3, [r3]
   1d464:	str	r3, [fp, #-24]	; 0xffffffe8
   1d468:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d46c:	ldr	r1, [fp, #4]
   1d470:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d474:	bl	11528 <fcntl64@plt>
   1d478:	str	r0, [fp, #-12]
   1d47c:	b	1d4ac <__assert_fail@plt+0xbe88>
   1d480:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d484:	add	r2, r3, #4
   1d488:	str	r2, [fp, #-32]	; 0xffffffe0
   1d48c:	ldr	r3, [r3]
   1d490:	str	r3, [fp, #-28]	; 0xffffffe4
   1d494:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d498:	ldr	r1, [fp, #4]
   1d49c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d4a0:	bl	11528 <fcntl64@plt>
   1d4a4:	str	r0, [fp, #-12]
   1d4a8:	nop			; (mov r0, r0)
   1d4ac:	nop			; (mov r0, r0)
   1d4b0:	ldr	r3, [fp, #-12]
   1d4b4:	mov	r0, r3
   1d4b8:	sub	sp, fp, #4
   1d4bc:	pop	{fp, lr}
   1d4c0:	add	sp, sp, #12
   1d4c4:	bx	lr
   1d4c8:	andeq	r0, r0, r6, lsl #8
   1d4cc:	andeq	r0, r0, r7, lsl #8
   1d4d0:	andeq	r0, r0, r1, lsl #8
   1d4d4:	andeq	r0, r0, r2, lsl #8
   1d4d8:	andeq	r0, r0, r9, lsl #8
   1d4dc:	andeq	r0, r0, sl, lsl #8
   1d4e0:	push	{fp, lr}
   1d4e4:	add	fp, sp, #4
   1d4e8:	sub	sp, sp, #16
   1d4ec:	str	r0, [fp, #-16]
   1d4f0:	str	r1, [fp, #-20]	; 0xffffffec
   1d4f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d4f8:	mov	r1, #0
   1d4fc:	ldr	r0, [fp, #-16]
   1d500:	bl	11528 <fcntl64@plt>
   1d504:	str	r0, [fp, #-8]
   1d508:	ldr	r3, [fp, #-8]
   1d50c:	mov	r0, r3
   1d510:	sub	sp, fp, #4
   1d514:	pop	{fp, pc}
   1d518:	push	{fp, lr}
   1d51c:	add	fp, sp, #4
   1d520:	sub	sp, sp, #24
   1d524:	str	r0, [fp, #-24]	; 0xffffffe8
   1d528:	str	r1, [fp, #-28]	; 0xffffffe4
   1d52c:	ldr	r3, [pc, #292]	; 1d658 <__assert_fail@plt+0xc034>
   1d530:	ldr	r3, [r3]
   1d534:	cmp	r3, #0
   1d538:	blt	1d5ac <__assert_fail@plt+0xbf88>
   1d53c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d540:	ldr	r1, [pc, #276]	; 1d65c <__assert_fail@plt+0xc038>
   1d544:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d548:	bl	11528 <fcntl64@plt>
   1d54c:	str	r0, [fp, #-8]
   1d550:	ldr	r3, [fp, #-8]
   1d554:	cmp	r3, #0
   1d558:	bge	1d570 <__assert_fail@plt+0xbf4c>
   1d55c:	bl	114bc <__errno_location@plt>
   1d560:	mov	r3, r0
   1d564:	ldr	r3, [r3]
   1d568:	cmp	r3, #22
   1d56c:	beq	1d580 <__assert_fail@plt+0xbf5c>
   1d570:	ldr	r3, [pc, #224]	; 1d658 <__assert_fail@plt+0xc034>
   1d574:	mov	r2, #1
   1d578:	str	r2, [r3]
   1d57c:	b	1d5bc <__assert_fail@plt+0xbf98>
   1d580:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d584:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d588:	bl	1d4e0 <__assert_fail@plt+0xbebc>
   1d58c:	str	r0, [fp, #-8]
   1d590:	ldr	r3, [fp, #-8]
   1d594:	cmp	r3, #0
   1d598:	blt	1d5bc <__assert_fail@plt+0xbf98>
   1d59c:	ldr	r3, [pc, #180]	; 1d658 <__assert_fail@plt+0xc034>
   1d5a0:	mvn	r2, #0
   1d5a4:	str	r2, [r3]
   1d5a8:	b	1d5bc <__assert_fail@plt+0xbf98>
   1d5ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d5b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d5b4:	bl	1d4e0 <__assert_fail@plt+0xbebc>
   1d5b8:	str	r0, [fp, #-8]
   1d5bc:	ldr	r3, [fp, #-8]
   1d5c0:	cmp	r3, #0
   1d5c4:	blt	1d648 <__assert_fail@plt+0xc024>
   1d5c8:	ldr	r3, [pc, #136]	; 1d658 <__assert_fail@plt+0xc034>
   1d5cc:	ldr	r3, [r3]
   1d5d0:	cmn	r3, #1
   1d5d4:	bne	1d648 <__assert_fail@plt+0xc024>
   1d5d8:	mov	r1, #1
   1d5dc:	ldr	r0, [fp, #-8]
   1d5e0:	bl	11528 <fcntl64@plt>
   1d5e4:	str	r0, [fp, #-12]
   1d5e8:	ldr	r3, [fp, #-12]
   1d5ec:	cmp	r3, #0
   1d5f0:	blt	1d618 <__assert_fail@plt+0xbff4>
   1d5f4:	ldr	r3, [fp, #-12]
   1d5f8:	orr	r3, r3, #1
   1d5fc:	mov	r2, r3
   1d600:	mov	r1, #2
   1d604:	ldr	r0, [fp, #-8]
   1d608:	bl	11528 <fcntl64@plt>
   1d60c:	mov	r3, r0
   1d610:	cmn	r3, #1
   1d614:	bne	1d648 <__assert_fail@plt+0xc024>
   1d618:	bl	114bc <__errno_location@plt>
   1d61c:	mov	r3, r0
   1d620:	ldr	r3, [r3]
   1d624:	str	r3, [fp, #-16]
   1d628:	ldr	r0, [fp, #-8]
   1d62c:	bl	115f4 <close@plt>
   1d630:	bl	114bc <__errno_location@plt>
   1d634:	mov	r2, r0
   1d638:	ldr	r3, [fp, #-16]
   1d63c:	str	r3, [r2]
   1d640:	mvn	r3, #0
   1d644:	str	r3, [fp, #-8]
   1d648:	ldr	r3, [fp, #-8]
   1d64c:	mov	r0, r3
   1d650:	sub	sp, fp, #4
   1d654:	pop	{fp, pc}
   1d658:	andeq	r1, r3, r0, asr #6
   1d65c:	andeq	r0, r0, r6, lsl #8
   1d660:	push	{r1, r2, r3}
   1d664:	push	{fp, lr}
   1d668:	add	fp, sp, #4
   1d66c:	sub	sp, sp, #20
   1d670:	str	r0, [fp, #-20]	; 0xffffffec
   1d674:	mov	r3, #0
   1d678:	str	r3, [fp, #-12]
   1d67c:	ldr	r3, [fp, #4]
   1d680:	and	r3, r3, #64	; 0x40
   1d684:	cmp	r3, #0
   1d688:	beq	1d6a8 <__assert_fail@plt+0xc084>
   1d68c:	add	r3, fp, #8
   1d690:	str	r3, [fp, #-16]
   1d694:	ldr	r3, [fp, #-16]
   1d698:	add	r2, r3, #4
   1d69c:	str	r2, [fp, #-16]
   1d6a0:	ldr	r3, [r3]
   1d6a4:	str	r3, [fp, #-12]
   1d6a8:	ldr	r2, [fp, #-12]
   1d6ac:	ldr	r1, [fp, #4]
   1d6b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d6b4:	bl	113e4 <open64@plt>
   1d6b8:	mov	r3, r0
   1d6bc:	mov	r0, r3
   1d6c0:	bl	1b334 <__assert_fail@plt+0x9d10>
   1d6c4:	mov	r3, r0
   1d6c8:	mov	r0, r3
   1d6cc:	sub	sp, fp, #4
   1d6d0:	pop	{fp, lr}
   1d6d4:	add	sp, sp, #12
   1d6d8:	bx	lr
   1d6dc:	push	{fp, lr}
   1d6e0:	add	fp, sp, #4
   1d6e4:	sub	sp, sp, #16
   1d6e8:	str	r0, [fp, #-8]
   1d6ec:	ldr	r3, [fp, #-8]
   1d6f0:	ldr	r3, [r3]
   1d6f4:	and	r3, r3, #256	; 0x100
   1d6f8:	cmp	r3, #0
   1d6fc:	beq	1d718 <__assert_fail@plt+0xc0f4>
   1d700:	mov	r3, #1
   1d704:	str	r3, [sp]
   1d708:	mov	r2, #0
   1d70c:	mov	r3, #0
   1d710:	ldr	r0, [fp, #-8]
   1d714:	bl	1d810 <__assert_fail@plt+0xc1ec>
   1d718:	nop			; (mov r0, r0)
   1d71c:	sub	sp, fp, #4
   1d720:	pop	{fp, pc}
   1d724:	push	{fp, lr}
   1d728:	add	fp, sp, #4
   1d72c:	sub	sp, sp, #8
   1d730:	str	r0, [fp, #-8]
   1d734:	ldr	r3, [fp, #-8]
   1d738:	cmp	r3, #0
   1d73c:	beq	1d754 <__assert_fail@plt+0xc130>
   1d740:	ldr	r0, [fp, #-8]
   1d744:	bl	11414 <__freading@plt>
   1d748:	mov	r3, r0
   1d74c:	cmp	r3, #0
   1d750:	bne	1d764 <__assert_fail@plt+0xc140>
   1d754:	ldr	r0, [fp, #-8]
   1d758:	bl	11294 <fflush@plt>
   1d75c:	mov	r3, r0
   1d760:	b	1d778 <__assert_fail@plt+0xc154>
   1d764:	ldr	r0, [fp, #-8]
   1d768:	bl	1d6dc <__assert_fail@plt+0xc0b8>
   1d76c:	ldr	r0, [fp, #-8]
   1d770:	bl	11294 <fflush@plt>
   1d774:	mov	r3, r0
   1d778:	mov	r0, r3
   1d77c:	sub	sp, fp, #4
   1d780:	pop	{fp, pc}
   1d784:	push	{r4, fp, lr}
   1d788:	add	fp, sp, #8
   1d78c:	sub	sp, sp, #20
   1d790:	str	r0, [fp, #-24]	; 0xffffffe8
   1d794:	bl	114bc <__errno_location@plt>
   1d798:	mov	r3, r0
   1d79c:	ldr	r3, [r3]
   1d7a0:	str	r3, [fp, #-20]	; 0xffffffec
   1d7a4:	bl	114bc <__errno_location@plt>
   1d7a8:	mov	r3, r0
   1d7ac:	ldr	r3, [r3]
   1d7b0:	str	r3, [fp, #-16]
   1d7b4:	bl	114bc <__errno_location@plt>
   1d7b8:	mov	r2, r0
   1d7bc:	mov	r3, #0
   1d7c0:	str	r3, [r2]
   1d7c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d7c8:	bl	112b8 <free@plt>
   1d7cc:	bl	114bc <__errno_location@plt>
   1d7d0:	mov	r4, r0
   1d7d4:	bl	114bc <__errno_location@plt>
   1d7d8:	mov	r3, r0
   1d7dc:	ldr	r3, [r3]
   1d7e0:	cmp	r3, #0
   1d7e4:	moveq	r3, #1
   1d7e8:	movne	r3, #0
   1d7ec:	uxtb	r3, r3
   1d7f0:	lsl	r3, r3, #2
   1d7f4:	sub	r2, fp, #12
   1d7f8:	add	r3, r2, r3
   1d7fc:	ldr	r3, [r3, #-8]
   1d800:	str	r3, [r4]
   1d804:	nop			; (mov r0, r0)
   1d808:	sub	sp, fp, #8
   1d80c:	pop	{r4, fp, pc}
   1d810:	push	{fp, lr}
   1d814:	add	fp, sp, #4
   1d818:	sub	sp, sp, #32
   1d81c:	str	r0, [fp, #-16]
   1d820:	strd	r2, [fp, #-28]	; 0xffffffe4
   1d824:	ldr	r3, [fp, #-16]
   1d828:	ldr	r2, [r3, #8]
   1d82c:	ldr	r3, [fp, #-16]
   1d830:	ldr	r3, [r3, #4]
   1d834:	cmp	r2, r3
   1d838:	bne	1d8d0 <__assert_fail@plt+0xc2ac>
   1d83c:	ldr	r3, [fp, #-16]
   1d840:	ldr	r2, [r3, #20]
   1d844:	ldr	r3, [fp, #-16]
   1d848:	ldr	r3, [r3, #16]
   1d84c:	cmp	r2, r3
   1d850:	bne	1d8d0 <__assert_fail@plt+0xc2ac>
   1d854:	ldr	r3, [fp, #-16]
   1d858:	ldr	r3, [r3, #36]	; 0x24
   1d85c:	cmp	r3, #0
   1d860:	bne	1d8d0 <__assert_fail@plt+0xc2ac>
   1d864:	ldr	r0, [fp, #-16]
   1d868:	bl	114e0 <fileno@plt>
   1d86c:	mov	r1, r0
   1d870:	ldr	r3, [fp, #4]
   1d874:	str	r3, [sp]
   1d878:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d87c:	mov	r0, r1
   1d880:	bl	11384 <lseek64@plt>
   1d884:	strd	r0, [fp, #-12]
   1d888:	ldrd	r2, [fp, #-12]
   1d88c:	mvn	r0, #0
   1d890:	mvn	r1, #0
   1d894:	cmp	r3, r1
   1d898:	cmpeq	r2, r0
   1d89c:	bne	1d8a8 <__assert_fail@plt+0xc284>
   1d8a0:	mvn	r3, #0
   1d8a4:	b	1d8e8 <__assert_fail@plt+0xc2c4>
   1d8a8:	ldr	r3, [fp, #-16]
   1d8ac:	ldr	r3, [r3]
   1d8b0:	bic	r2, r3, #16
   1d8b4:	ldr	r3, [fp, #-16]
   1d8b8:	str	r2, [r3]
   1d8bc:	ldr	r1, [fp, #-16]
   1d8c0:	ldrd	r2, [fp, #-12]
   1d8c4:	strd	r2, [r1, #80]	; 0x50
   1d8c8:	mov	r3, #0
   1d8cc:	b	1d8e8 <__assert_fail@plt+0xc2c4>
   1d8d0:	ldr	r3, [fp, #4]
   1d8d4:	str	r3, [sp]
   1d8d8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d8dc:	ldr	r0, [fp, #-16]
   1d8e0:	bl	1151c <fseeko64@plt>
   1d8e4:	mov	r3, r0
   1d8e8:	mov	r0, r3
   1d8ec:	sub	sp, fp, #4
   1d8f0:	pop	{fp, pc}
   1d8f4:	push	{fp, lr}
   1d8f8:	add	fp, sp, #4
   1d8fc:	bl	114bc <__errno_location@plt>
   1d900:	mov	r2, r0
   1d904:	mov	r3, #12
   1d908:	str	r3, [r2]
   1d90c:	mov	r3, #0
   1d910:	mov	r0, r3
   1d914:	pop	{fp, pc}
   1d918:	push	{fp, lr}
   1d91c:	add	fp, sp, #4
   1d920:	sub	sp, sp, #8
   1d924:	str	r0, [fp, #-8]
   1d928:	ldr	r3, [fp, #-8]
   1d92c:	mov	r0, r3
   1d930:	bl	1c8d0 <__assert_fail@plt+0xb2ac>
   1d934:	mov	r3, r0
   1d938:	mov	r0, r3
   1d93c:	sub	sp, fp, #4
   1d940:	pop	{fp, pc}
   1d944:	push	{fp, lr}
   1d948:	add	fp, sp, #4
   1d94c:	sub	sp, sp, #8
   1d950:	str	r0, [fp, #-8]
   1d954:	str	r1, [fp, #-12]
   1d958:	ldr	r3, [fp, #-12]
   1d95c:	cmp	r3, #0
   1d960:	moveq	r3, #1
   1d964:	movne	r3, #0
   1d968:	uxtb	r3, r3
   1d96c:	mov	r2, r3
   1d970:	ldr	r3, [fp, #-12]
   1d974:	orr	r3, r2, r3
   1d978:	mov	r1, r3
   1d97c:	ldr	r0, [fp, #-8]
   1d980:	bl	1c978 <__assert_fail@plt+0xb354>
   1d984:	mov	r3, r0
   1d988:	mov	r0, r3
   1d98c:	sub	sp, fp, #4
   1d990:	pop	{fp, pc}
   1d994:	push	{fp, lr}
   1d998:	add	fp, sp, #4
   1d99c:	sub	sp, sp, #8
   1d9a0:	str	r0, [fp, #-8]
   1d9a4:	str	r1, [fp, #-12]
   1d9a8:	ldr	r3, [fp, #-8]
   1d9ac:	ldr	r2, [fp, #-12]
   1d9b0:	mov	r1, r2
   1d9b4:	mov	r0, r3
   1d9b8:	bl	1c80c <__assert_fail@plt+0xb1e8>
   1d9bc:	mov	r3, r0
   1d9c0:	mov	r0, r3
   1d9c4:	sub	sp, fp, #4
   1d9c8:	pop	{fp, pc}
   1d9cc:	push	{fp, lr}
   1d9d0:	add	fp, sp, #4
   1d9d4:	sub	sp, sp, #16
   1d9d8:	str	r0, [fp, #-8]
   1d9dc:	str	r1, [fp, #-12]
   1d9e0:	str	r2, [fp, #-16]
   1d9e4:	ldr	r3, [fp, #-12]
   1d9e8:	cmp	r3, #0
   1d9ec:	beq	1d9fc <__assert_fail@plt+0xc3d8>
   1d9f0:	ldr	r3, [fp, #-16]
   1d9f4:	cmp	r3, #0
   1d9f8:	bne	1da0c <__assert_fail@plt+0xc3e8>
   1d9fc:	mov	r3, #1
   1da00:	str	r3, [fp, #-16]
   1da04:	ldr	r3, [fp, #-16]
   1da08:	str	r3, [fp, #-12]
   1da0c:	ldr	r3, [fp, #-12]
   1da10:	ldr	r2, [fp, #-16]
   1da14:	mov	r1, r3
   1da18:	ldr	r0, [fp, #-8]
   1da1c:	bl	1dbb8 <__assert_fail@plt+0xc594>
   1da20:	mov	r3, r0
   1da24:	mov	r0, r3
   1da28:	sub	sp, fp, #4
   1da2c:	pop	{fp, pc}
   1da30:	push	{fp, lr}
   1da34:	add	fp, sp, #4
   1da38:	sub	sp, sp, #8
   1da3c:	mov	r0, #14
   1da40:	bl	1154c <nl_langinfo@plt>
   1da44:	str	r0, [fp, #-8]
   1da48:	ldr	r3, [fp, #-8]
   1da4c:	cmp	r3, #0
   1da50:	bne	1da5c <__assert_fail@plt+0xc438>
   1da54:	ldr	r3, [pc, #40]	; 1da84 <__assert_fail@plt+0xc460>
   1da58:	str	r3, [fp, #-8]
   1da5c:	ldr	r3, [fp, #-8]
   1da60:	ldrb	r3, [r3]
   1da64:	cmp	r3, #0
   1da68:	bne	1da74 <__assert_fail@plt+0xc450>
   1da6c:	ldr	r3, [pc, #20]	; 1da88 <__assert_fail@plt+0xc464>
   1da70:	str	r3, [fp, #-8]
   1da74:	ldr	r3, [fp, #-8]
   1da78:	mov	r0, r3
   1da7c:	sub	sp, fp, #4
   1da80:	pop	{fp, pc}
   1da84:			; <UNDEFINED> instruction: 0x000204bc
   1da88:	andeq	r0, r2, r0, asr #9
   1da8c:	push	{fp, lr}
   1da90:	add	fp, sp, #4
   1da94:	sub	sp, sp, #32
   1da98:	str	r0, [fp, #-24]	; 0xffffffe8
   1da9c:	str	r1, [fp, #-28]	; 0xffffffe4
   1daa0:	str	r2, [fp, #-32]	; 0xffffffe0
   1daa4:	str	r3, [fp, #-36]	; 0xffffffdc
   1daa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1daac:	cmp	r3, #0
   1dab0:	bne	1dabc <__assert_fail@plt+0xc498>
   1dab4:	sub	r3, fp, #16
   1dab8:	str	r3, [fp, #-24]	; 0xffffffe8
   1dabc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1dac0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1dac4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1dac8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dacc:	bl	113c0 <mbrtowc@plt>
   1dad0:	str	r0, [fp, #-8]
   1dad4:	ldr	r3, [fp, #-8]
   1dad8:	cmn	r3, #3
   1dadc:	bls	1db28 <__assert_fail@plt+0xc504>
   1dae0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1dae4:	cmp	r3, #0
   1dae8:	beq	1db28 <__assert_fail@plt+0xc504>
   1daec:	mov	r0, #0
   1daf0:	bl	1e7c0 <__assert_fail@plt+0xd19c>
   1daf4:	mov	r3, r0
   1daf8:	eor	r3, r3, #1
   1dafc:	uxtb	r3, r3
   1db00:	cmp	r3, #0
   1db04:	beq	1db28 <__assert_fail@plt+0xc504>
   1db08:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1db0c:	ldrb	r3, [r3]
   1db10:	strb	r3, [fp, #-9]
   1db14:	ldrb	r2, [fp, #-9]
   1db18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1db1c:	str	r2, [r3]
   1db20:	mov	r3, #1
   1db24:	b	1db2c <__assert_fail@plt+0xc508>
   1db28:	ldr	r3, [fp, #-8]
   1db2c:	mov	r0, r3
   1db30:	sub	sp, fp, #4
   1db34:	pop	{fp, pc}
   1db38:	push	{r4, fp, lr}
   1db3c:	add	fp, sp, #8
   1db40:	sub	sp, sp, #12
   1db44:	str	r0, [fp, #-16]
   1db48:	ldr	r3, [pc, #32]	; 1db70 <__assert_fail@plt+0xc54c>
   1db4c:	ldr	r4, [r3]
   1db50:	ldr	r0, [pc, #28]	; 1db74 <__assert_fail@plt+0xc550>
   1db54:	bl	11474 <gettext@plt>
   1db58:	mov	r3, r0
   1db5c:	mov	r2, r3
   1db60:	ldr	r1, [fp, #-16]
   1db64:	mov	r0, r4
   1db68:	bl	113cc <error@plt>
   1db6c:	bl	115e8 <abort@plt>
   1db70:	andeq	r1, r3, ip, ror #2
   1db74:	andeq	r0, r2, r8, asr #9
   1db78:	push	{r4, fp, lr}
   1db7c:	add	fp, sp, #8
   1db80:	sub	sp, sp, #12
   1db84:	str	r0, [fp, #-16]
   1db88:	ldr	r3, [pc, #32]	; 1dbb0 <__assert_fail@plt+0xc58c>
   1db8c:	ldr	r4, [r3]
   1db90:	ldr	r0, [pc, #28]	; 1dbb4 <__assert_fail@plt+0xc590>
   1db94:	bl	11474 <gettext@plt>
   1db98:	mov	r3, r0
   1db9c:	mov	r2, r3
   1dba0:	ldr	r1, [fp, #-16]
   1dba4:	mov	r0, r4
   1dba8:	bl	113cc <error@plt>
   1dbac:	bl	115e8 <abort@plt>
   1dbb0:	andeq	r1, r3, ip, ror #2
   1dbb4:	strdeq	r0, [r2], -r4
   1dbb8:	push	{fp, lr}
   1dbbc:	add	fp, sp, #4
   1dbc0:	sub	sp, sp, #24
   1dbc4:	str	r0, [fp, #-16]
   1dbc8:	str	r1, [fp, #-20]	; 0xffffffec
   1dbcc:	str	r2, [fp, #-24]	; 0xffffffe8
   1dbd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dbd4:	cmp	r3, #0
   1dbd8:	beq	1dc14 <__assert_fail@plt+0xc5f0>
   1dbdc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1dbe0:	mvn	r0, #0
   1dbe4:	bl	1e9c4 <__assert_fail@plt+0xd3a0>
   1dbe8:	mov	r3, r0
   1dbec:	mov	r2, r3
   1dbf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dbf4:	cmp	r2, r3
   1dbf8:	bcs	1dc14 <__assert_fail@plt+0xc5f0>
   1dbfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dc00:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1dc04:	mul	r3, r2, r3
   1dc08:	str	r3, [fp, #-8]
   1dc0c:	mov	r3, #1
   1dc10:	b	1dc28 <__assert_fail@plt+0xc604>
   1dc14:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dc18:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1dc1c:	mul	r3, r2, r3
   1dc20:	str	r3, [fp, #-8]
   1dc24:	mov	r3, #0
   1dc28:	cmp	r3, #0
   1dc2c:	beq	1dc48 <__assert_fail@plt+0xc624>
   1dc30:	bl	114bc <__errno_location@plt>
   1dc34:	mov	r2, r0
   1dc38:	mov	r3, #12
   1dc3c:	str	r3, [r2]
   1dc40:	mov	r3, #0
   1dc44:	b	1dc5c <__assert_fail@plt+0xc638>
   1dc48:	ldr	r3, [fp, #-8]
   1dc4c:	mov	r1, r3
   1dc50:	ldr	r0, [fp, #-16]
   1dc54:	bl	1c978 <__assert_fail@plt+0xb354>
   1dc58:	mov	r3, r0
   1dc5c:	mov	r0, r3
   1dc60:	sub	sp, fp, #4
   1dc64:	pop	{fp, pc}
   1dc68:	push	{fp, lr}
   1dc6c:	add	fp, sp, #4
   1dc70:	sub	sp, sp, #8
   1dc74:	str	r0, [fp, #-8]
   1dc78:	ldr	r3, [fp, #-8]
   1dc7c:	mov	r2, #0
   1dc80:	str	r2, [r3, #4]
   1dc84:	mov	r1, #524288	; 0x80000
   1dc88:	ldr	r0, [pc, #100]	; 1dcf4 <__assert_fail@plt+0xc6d0>
   1dc8c:	bl	1d660 <__assert_fail@plt+0xc03c>
   1dc90:	mov	r2, r0
   1dc94:	ldr	r3, [fp, #-8]
   1dc98:	str	r2, [r3]
   1dc9c:	ldr	r3, [fp, #-8]
   1dca0:	ldr	r3, [r3]
   1dca4:	cmp	r3, #0
   1dca8:	bge	1dce4 <__assert_fail@plt+0xc6c0>
   1dcac:	mov	r1, #0
   1dcb0:	mov	r0, #0
   1dcb4:	bl	11450 <getcwd@plt>
   1dcb8:	mov	r2, r0
   1dcbc:	ldr	r3, [fp, #-8]
   1dcc0:	str	r2, [r3, #4]
   1dcc4:	ldr	r3, [fp, #-8]
   1dcc8:	ldr	r3, [r3, #4]
   1dccc:	cmp	r3, #0
   1dcd0:	beq	1dcdc <__assert_fail@plt+0xc6b8>
   1dcd4:	mov	r3, #0
   1dcd8:	b	1dce8 <__assert_fail@plt+0xc6c4>
   1dcdc:	mvn	r3, #0
   1dce0:	b	1dce8 <__assert_fail@plt+0xc6c4>
   1dce4:	mov	r3, #0
   1dce8:	mov	r0, r3
   1dcec:	sub	sp, fp, #4
   1dcf0:	pop	{fp, pc}
   1dcf4:	andeq	r0, r2, r4, lsr #10
   1dcf8:	push	{fp, lr}
   1dcfc:	add	fp, sp, #4
   1dd00:	sub	sp, sp, #8
   1dd04:	str	r0, [fp, #-8]
   1dd08:	ldr	r3, [fp, #-8]
   1dd0c:	ldr	r3, [r3]
   1dd10:	cmp	r3, #0
   1dd14:	blt	1dd30 <__assert_fail@plt+0xc70c>
   1dd18:	ldr	r3, [fp, #-8]
   1dd1c:	ldr	r3, [r3]
   1dd20:	mov	r0, r3
   1dd24:	bl	11588 <fchdir@plt>
   1dd28:	mov	r3, r0
   1dd2c:	b	1dd44 <__assert_fail@plt+0xc720>
   1dd30:	ldr	r3, [fp, #-8]
   1dd34:	ldr	r3, [r3, #4]
   1dd38:	mov	r0, r3
   1dd3c:	bl	1e444 <__assert_fail@plt+0xce20>
   1dd40:	mov	r3, r0
   1dd44:	mov	r0, r3
   1dd48:	sub	sp, fp, #4
   1dd4c:	pop	{fp, pc}
   1dd50:	push	{fp, lr}
   1dd54:	add	fp, sp, #4
   1dd58:	sub	sp, sp, #8
   1dd5c:	str	r0, [fp, #-8]
   1dd60:	ldr	r3, [fp, #-8]
   1dd64:	ldr	r3, [r3]
   1dd68:	cmp	r3, #0
   1dd6c:	blt	1dd80 <__assert_fail@plt+0xc75c>
   1dd70:	ldr	r3, [fp, #-8]
   1dd74:	ldr	r3, [r3]
   1dd78:	mov	r0, r3
   1dd7c:	bl	115f4 <close@plt>
   1dd80:	ldr	r3, [fp, #-8]
   1dd84:	ldr	r3, [r3, #4]
   1dd88:	mov	r0, r3
   1dd8c:	bl	1d784 <__assert_fail@plt+0xc160>
   1dd90:	nop			; (mov r0, r0)
   1dd94:	sub	sp, fp, #4
   1dd98:	pop	{fp, pc}
   1dd9c:	push	{fp, lr}
   1dda0:	add	fp, sp, #4
   1dda4:	sub	sp, sp, #8
   1dda8:	str	r0, [fp, #-8]
   1ddac:	mov	r2, #3
   1ddb0:	mov	r1, #0
   1ddb4:	ldr	r0, [fp, #-8]
   1ddb8:	bl	1d2e0 <__assert_fail@plt+0xbcbc>
   1ddbc:	mov	r3, r0
   1ddc0:	mov	r0, r3
   1ddc4:	sub	sp, fp, #4
   1ddc8:	pop	{fp, pc}
   1ddcc:	push	{fp}		; (str fp, [sp, #-4]!)
   1ddd0:	add	fp, sp, #0
   1ddd4:	sub	sp, sp, #12
   1ddd8:	str	r0, [fp, #-8]
   1dddc:	ldr	r3, [fp, #-8]
   1dde0:	cmp	r3, #90	; 0x5a
   1dde4:	bgt	1de00 <__assert_fail@plt+0xc7dc>
   1dde8:	cmp	r3, #65	; 0x41
   1ddec:	bge	1de0c <__assert_fail@plt+0xc7e8>
   1ddf0:	sub	r3, r3, #48	; 0x30
   1ddf4:	cmp	r3, #9
   1ddf8:	bhi	1de14 <__assert_fail@plt+0xc7f0>
   1ddfc:	b	1de0c <__assert_fail@plt+0xc7e8>
   1de00:	sub	r3, r3, #97	; 0x61
   1de04:	cmp	r3, #25
   1de08:	bhi	1de14 <__assert_fail@plt+0xc7f0>
   1de0c:	mov	r3, #1
   1de10:	b	1de18 <__assert_fail@plt+0xc7f4>
   1de14:	mov	r3, #0
   1de18:	mov	r0, r3
   1de1c:	add	sp, fp, #0
   1de20:	pop	{fp}		; (ldr fp, [sp], #4)
   1de24:	bx	lr
   1de28:	push	{fp}		; (str fp, [sp, #-4]!)
   1de2c:	add	fp, sp, #0
   1de30:	sub	sp, sp, #12
   1de34:	str	r0, [fp, #-8]
   1de38:	ldr	r3, [fp, #-8]
   1de3c:	cmp	r3, #65	; 0x41
   1de40:	blt	1de60 <__assert_fail@plt+0xc83c>
   1de44:	cmp	r3, #90	; 0x5a
   1de48:	ble	1de58 <__assert_fail@plt+0xc834>
   1de4c:	sub	r3, r3, #97	; 0x61
   1de50:	cmp	r3, #25
   1de54:	bhi	1de60 <__assert_fail@plt+0xc83c>
   1de58:	mov	r3, #1
   1de5c:	b	1de64 <__assert_fail@plt+0xc840>
   1de60:	mov	r3, #0
   1de64:	mov	r0, r3
   1de68:	add	sp, fp, #0
   1de6c:	pop	{fp}		; (ldr fp, [sp], #4)
   1de70:	bx	lr
   1de74:	push	{fp}		; (str fp, [sp, #-4]!)
   1de78:	add	fp, sp, #0
   1de7c:	sub	sp, sp, #12
   1de80:	str	r0, [fp, #-8]
   1de84:	ldr	r3, [fp, #-8]
   1de88:	add	r3, r3, #0
   1de8c:	cmp	r3, #127	; 0x7f
   1de90:	bhi	1de9c <__assert_fail@plt+0xc878>
   1de94:	mov	r3, #1
   1de98:	b	1dea0 <__assert_fail@plt+0xc87c>
   1de9c:	mov	r3, #0
   1dea0:	mov	r0, r3
   1dea4:	add	sp, fp, #0
   1dea8:	pop	{fp}		; (ldr fp, [sp], #4)
   1deac:	bx	lr
   1deb0:	push	{fp}		; (str fp, [sp, #-4]!)
   1deb4:	add	fp, sp, #0
   1deb8:	sub	sp, sp, #12
   1debc:	str	r0, [fp, #-8]
   1dec0:	ldr	r3, [fp, #-8]
   1dec4:	cmp	r3, #32
   1dec8:	beq	1ded8 <__assert_fail@plt+0xc8b4>
   1decc:	ldr	r3, [fp, #-8]
   1ded0:	cmp	r3, #9
   1ded4:	bne	1dee0 <__assert_fail@plt+0xc8bc>
   1ded8:	mov	r3, #1
   1dedc:	b	1dee4 <__assert_fail@plt+0xc8c0>
   1dee0:	mov	r3, #0
   1dee4:	and	r3, r3, #1
   1dee8:	uxtb	r3, r3
   1deec:	mov	r0, r3
   1def0:	add	sp, fp, #0
   1def4:	pop	{fp}		; (ldr fp, [sp], #4)
   1def8:	bx	lr
   1defc:	push	{fp}		; (str fp, [sp, #-4]!)
   1df00:	add	fp, sp, #0
   1df04:	sub	sp, sp, #12
   1df08:	str	r0, [fp, #-8]
   1df0c:	ldr	r3, [fp, #-8]
   1df10:	cmp	r3, #0
   1df14:	blt	1df30 <__assert_fail@plt+0xc90c>
   1df18:	cmp	r3, #31
   1df1c:	ble	1df28 <__assert_fail@plt+0xc904>
   1df20:	cmp	r3, #127	; 0x7f
   1df24:	bne	1df30 <__assert_fail@plt+0xc90c>
   1df28:	mov	r3, #1
   1df2c:	b	1df34 <__assert_fail@plt+0xc910>
   1df30:	mov	r3, #0
   1df34:	mov	r0, r3
   1df38:	add	sp, fp, #0
   1df3c:	pop	{fp}		; (ldr fp, [sp], #4)
   1df40:	bx	lr
   1df44:	push	{fp}		; (str fp, [sp, #-4]!)
   1df48:	add	fp, sp, #0
   1df4c:	sub	sp, sp, #12
   1df50:	str	r0, [fp, #-8]
   1df54:	ldr	r3, [fp, #-8]
   1df58:	sub	r3, r3, #48	; 0x30
   1df5c:	cmp	r3, #9
   1df60:	bhi	1df6c <__assert_fail@plt+0xc948>
   1df64:	mov	r3, #1
   1df68:	b	1df70 <__assert_fail@plt+0xc94c>
   1df6c:	mov	r3, #0
   1df70:	mov	r0, r3
   1df74:	add	sp, fp, #0
   1df78:	pop	{fp}		; (ldr fp, [sp], #4)
   1df7c:	bx	lr
   1df80:	push	{fp}		; (str fp, [sp, #-4]!)
   1df84:	add	fp, sp, #0
   1df88:	sub	sp, sp, #12
   1df8c:	str	r0, [fp, #-8]
   1df90:	ldr	r3, [fp, #-8]
   1df94:	sub	r3, r3, #33	; 0x21
   1df98:	cmp	r3, #93	; 0x5d
   1df9c:	bhi	1dfa8 <__assert_fail@plt+0xc984>
   1dfa0:	mov	r3, #1
   1dfa4:	b	1dfac <__assert_fail@plt+0xc988>
   1dfa8:	mov	r3, #0
   1dfac:	mov	r0, r3
   1dfb0:	add	sp, fp, #0
   1dfb4:	pop	{fp}		; (ldr fp, [sp], #4)
   1dfb8:	bx	lr
   1dfbc:	push	{fp}		; (str fp, [sp, #-4]!)
   1dfc0:	add	fp, sp, #0
   1dfc4:	sub	sp, sp, #12
   1dfc8:	str	r0, [fp, #-8]
   1dfcc:	ldr	r3, [fp, #-8]
   1dfd0:	sub	r3, r3, #97	; 0x61
   1dfd4:	cmp	r3, #25
   1dfd8:	bhi	1dfe4 <__assert_fail@plt+0xc9c0>
   1dfdc:	mov	r3, #1
   1dfe0:	b	1dfe8 <__assert_fail@plt+0xc9c4>
   1dfe4:	mov	r3, #0
   1dfe8:	mov	r0, r3
   1dfec:	add	sp, fp, #0
   1dff0:	pop	{fp}		; (ldr fp, [sp], #4)
   1dff4:	bx	lr
   1dff8:	push	{fp}		; (str fp, [sp, #-4]!)
   1dffc:	add	fp, sp, #0
   1e000:	sub	sp, sp, #12
   1e004:	str	r0, [fp, #-8]
   1e008:	ldr	r3, [fp, #-8]
   1e00c:	sub	r3, r3, #32
   1e010:	cmp	r3, #94	; 0x5e
   1e014:	bhi	1e020 <__assert_fail@plt+0xc9fc>
   1e018:	mov	r3, #1
   1e01c:	b	1e024 <__assert_fail@plt+0xca00>
   1e020:	mov	r3, #0
   1e024:	mov	r0, r3
   1e028:	add	sp, fp, #0
   1e02c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e030:	bx	lr
   1e034:	push	{fp}		; (str fp, [sp, #-4]!)
   1e038:	add	fp, sp, #0
   1e03c:	sub	sp, sp, #12
   1e040:	str	r0, [fp, #-8]
   1e044:	ldr	r3, [fp, #-8]
   1e048:	cmp	r3, #64	; 0x40
   1e04c:	bgt	1e068 <__assert_fail@plt+0xca44>
   1e050:	cmp	r3, #58	; 0x3a
   1e054:	bge	1e084 <__assert_fail@plt+0xca60>
   1e058:	sub	r3, r3, #33	; 0x21
   1e05c:	cmp	r3, #14
   1e060:	bhi	1e08c <__assert_fail@plt+0xca68>
   1e064:	b	1e084 <__assert_fail@plt+0xca60>
   1e068:	cmp	r3, #91	; 0x5b
   1e06c:	blt	1e08c <__assert_fail@plt+0xca68>
   1e070:	cmp	r3, #96	; 0x60
   1e074:	ble	1e084 <__assert_fail@plt+0xca60>
   1e078:	sub	r3, r3, #123	; 0x7b
   1e07c:	cmp	r3, #3
   1e080:	bhi	1e08c <__assert_fail@plt+0xca68>
   1e084:	mov	r3, #1
   1e088:	b	1e090 <__assert_fail@plt+0xca6c>
   1e08c:	mov	r3, #0
   1e090:	mov	r0, r3
   1e094:	add	sp, fp, #0
   1e098:	pop	{fp}		; (ldr fp, [sp], #4)
   1e09c:	bx	lr
   1e0a0:	push	{fp}		; (str fp, [sp, #-4]!)
   1e0a4:	add	fp, sp, #0
   1e0a8:	sub	sp, sp, #12
   1e0ac:	str	r0, [fp, #-8]
   1e0b0:	ldr	r3, [fp, #-8]
   1e0b4:	cmp	r3, #9
   1e0b8:	blt	1e0d4 <__assert_fail@plt+0xcab0>
   1e0bc:	cmp	r3, #13
   1e0c0:	ble	1e0cc <__assert_fail@plt+0xcaa8>
   1e0c4:	cmp	r3, #32
   1e0c8:	bne	1e0d4 <__assert_fail@plt+0xcab0>
   1e0cc:	mov	r3, #1
   1e0d0:	b	1e0d8 <__assert_fail@plt+0xcab4>
   1e0d4:	mov	r3, #0
   1e0d8:	mov	r0, r3
   1e0dc:	add	sp, fp, #0
   1e0e0:	pop	{fp}		; (ldr fp, [sp], #4)
   1e0e4:	bx	lr
   1e0e8:	push	{fp}		; (str fp, [sp, #-4]!)
   1e0ec:	add	fp, sp, #0
   1e0f0:	sub	sp, sp, #12
   1e0f4:	str	r0, [fp, #-8]
   1e0f8:	ldr	r3, [fp, #-8]
   1e0fc:	sub	r3, r3, #65	; 0x41
   1e100:	cmp	r3, #25
   1e104:	bhi	1e110 <__assert_fail@plt+0xcaec>
   1e108:	mov	r3, #1
   1e10c:	b	1e114 <__assert_fail@plt+0xcaf0>
   1e110:	mov	r3, #0
   1e114:	mov	r0, r3
   1e118:	add	sp, fp, #0
   1e11c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e120:	bx	lr
   1e124:	push	{fp}		; (str fp, [sp, #-4]!)
   1e128:	add	fp, sp, #0
   1e12c:	sub	sp, sp, #12
   1e130:	str	r0, [fp, #-8]
   1e134:	ldr	r3, [fp, #-8]
   1e138:	sub	r3, r3, #48	; 0x30
   1e13c:	cmp	r3, #54	; 0x36
   1e140:	addls	pc, pc, r3, lsl #2
   1e144:	b	1e22c <__assert_fail@plt+0xcc08>
   1e148:	b	1e224 <__assert_fail@plt+0xcc00>
   1e14c:	b	1e224 <__assert_fail@plt+0xcc00>
   1e150:	b	1e224 <__assert_fail@plt+0xcc00>
   1e154:	b	1e224 <__assert_fail@plt+0xcc00>
   1e158:	b	1e224 <__assert_fail@plt+0xcc00>
   1e15c:	b	1e224 <__assert_fail@plt+0xcc00>
   1e160:	b	1e224 <__assert_fail@plt+0xcc00>
   1e164:	b	1e224 <__assert_fail@plt+0xcc00>
   1e168:	b	1e224 <__assert_fail@plt+0xcc00>
   1e16c:	b	1e224 <__assert_fail@plt+0xcc00>
   1e170:	b	1e22c <__assert_fail@plt+0xcc08>
   1e174:	b	1e22c <__assert_fail@plt+0xcc08>
   1e178:	b	1e22c <__assert_fail@plt+0xcc08>
   1e17c:	b	1e22c <__assert_fail@plt+0xcc08>
   1e180:	b	1e22c <__assert_fail@plt+0xcc08>
   1e184:	b	1e22c <__assert_fail@plt+0xcc08>
   1e188:	b	1e22c <__assert_fail@plt+0xcc08>
   1e18c:	b	1e224 <__assert_fail@plt+0xcc00>
   1e190:	b	1e224 <__assert_fail@plt+0xcc00>
   1e194:	b	1e224 <__assert_fail@plt+0xcc00>
   1e198:	b	1e224 <__assert_fail@plt+0xcc00>
   1e19c:	b	1e224 <__assert_fail@plt+0xcc00>
   1e1a0:	b	1e224 <__assert_fail@plt+0xcc00>
   1e1a4:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1a8:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1ac:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1b0:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1b4:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1b8:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1bc:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1c0:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1c4:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1c8:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1cc:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1d0:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1d4:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1d8:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1dc:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1e0:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1e4:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1e8:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1ec:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1f0:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1f4:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1f8:	b	1e22c <__assert_fail@plt+0xcc08>
   1e1fc:	b	1e22c <__assert_fail@plt+0xcc08>
   1e200:	b	1e22c <__assert_fail@plt+0xcc08>
   1e204:	b	1e22c <__assert_fail@plt+0xcc08>
   1e208:	b	1e22c <__assert_fail@plt+0xcc08>
   1e20c:	b	1e224 <__assert_fail@plt+0xcc00>
   1e210:	b	1e224 <__assert_fail@plt+0xcc00>
   1e214:	b	1e224 <__assert_fail@plt+0xcc00>
   1e218:	b	1e224 <__assert_fail@plt+0xcc00>
   1e21c:	b	1e224 <__assert_fail@plt+0xcc00>
   1e220:	b	1e224 <__assert_fail@plt+0xcc00>
   1e224:	mov	r3, #1
   1e228:	b	1e230 <__assert_fail@plt+0xcc0c>
   1e22c:	mov	r3, #0
   1e230:	mov	r0, r3
   1e234:	add	sp, fp, #0
   1e238:	pop	{fp}		; (ldr fp, [sp], #4)
   1e23c:	bx	lr
   1e240:	push	{fp}		; (str fp, [sp, #-4]!)
   1e244:	add	fp, sp, #0
   1e248:	sub	sp, sp, #12
   1e24c:	str	r0, [fp, #-8]
   1e250:	ldr	r3, [fp, #-8]
   1e254:	sub	r3, r3, #65	; 0x41
   1e258:	cmp	r3, #25
   1e25c:	bhi	1e26c <__assert_fail@plt+0xcc48>
   1e260:	ldr	r3, [fp, #-8]
   1e264:	add	r3, r3, #32
   1e268:	b	1e270 <__assert_fail@plt+0xcc4c>
   1e26c:	ldr	r3, [fp, #-8]
   1e270:	mov	r0, r3
   1e274:	add	sp, fp, #0
   1e278:	pop	{fp}		; (ldr fp, [sp], #4)
   1e27c:	bx	lr
   1e280:	push	{fp}		; (str fp, [sp, #-4]!)
   1e284:	add	fp, sp, #0
   1e288:	sub	sp, sp, #12
   1e28c:	str	r0, [fp, #-8]
   1e290:	ldr	r3, [fp, #-8]
   1e294:	sub	r3, r3, #97	; 0x61
   1e298:	cmp	r3, #25
   1e29c:	bhi	1e2ac <__assert_fail@plt+0xcc88>
   1e2a0:	ldr	r3, [fp, #-8]
   1e2a4:	sub	r3, r3, #32
   1e2a8:	b	1e2b0 <__assert_fail@plt+0xcc8c>
   1e2ac:	ldr	r3, [fp, #-8]
   1e2b0:	mov	r0, r3
   1e2b4:	add	sp, fp, #0
   1e2b8:	pop	{fp}		; (ldr fp, [sp], #4)
   1e2bc:	bx	lr
   1e2c0:	push	{fp}		; (str fp, [sp, #-4]!)
   1e2c4:	add	fp, sp, #0
   1e2c8:	sub	sp, sp, #12
   1e2cc:	str	r0, [fp, #-8]
   1e2d0:	ldr	r3, [fp, #-8]
   1e2d4:	mvn	r2, #99	; 0x63
   1e2d8:	str	r2, [r3]
   1e2dc:	nop			; (mov r0, r0)
   1e2e0:	add	sp, fp, #0
   1e2e4:	pop	{fp}		; (ldr fp, [sp], #4)
   1e2e8:	bx	lr
   1e2ec:	push	{fp, lr}
   1e2f0:	add	fp, sp, #4
   1e2f4:	sub	sp, sp, #8
   1e2f8:	str	r0, [fp, #-8]
   1e2fc:	ldr	r3, [fp, #-8]
   1e300:	ldr	r3, [r3]
   1e304:	mov	r0, r3
   1e308:	bl	11588 <fchdir@plt>
   1e30c:	mov	r3, r0
   1e310:	mov	r0, r3
   1e314:	sub	sp, fp, #4
   1e318:	pop	{fp, pc}
   1e31c:	push	{fp, lr}
   1e320:	add	fp, sp, #4
   1e324:	sub	sp, sp, #16
   1e328:	str	r0, [fp, #-16]
   1e32c:	ldr	r3, [fp, #-16]
   1e330:	ldr	r3, [r3]
   1e334:	cmp	r3, #0
   1e338:	blt	1e388 <__assert_fail@plt+0xcd64>
   1e33c:	ldr	r3, [fp, #-16]
   1e340:	ldr	r3, [r3]
   1e344:	mov	r0, r3
   1e348:	bl	115f4 <close@plt>
   1e34c:	mov	r3, r0
   1e350:	cmp	r3, #0
   1e354:	movne	r3, #1
   1e358:	moveq	r3, #0
   1e35c:	strb	r3, [fp, #-5]
   1e360:	ldrb	r3, [fp, #-5]
   1e364:	eor	r3, r3, #1
   1e368:	uxtb	r3, r3
   1e36c:	cmp	r3, #0
   1e370:	bne	1e388 <__assert_fail@plt+0xcd64>
   1e374:	ldr	r3, [pc, #24]	; 1e394 <__assert_fail@plt+0xcd70>
   1e378:	mov	r2, #64	; 0x40
   1e37c:	ldr	r1, [pc, #20]	; 1e398 <__assert_fail@plt+0xcd74>
   1e380:	ldr	r0, [pc, #20]	; 1e39c <__assert_fail@plt+0xcd78>
   1e384:	bl	11624 <__assert_fail@plt>
   1e388:	nop			; (mov r0, r0)
   1e38c:	sub	sp, fp, #4
   1e390:	pop	{fp, pc}
   1e394:	muleq	r2, r4, r5
   1e398:	andeq	r0, r2, r8, lsr #10
   1e39c:	andeq	r0, r2, ip, lsr r5
   1e3a0:	push	{fp, lr}
   1e3a4:	add	fp, sp, #4
   1e3a8:	sub	sp, sp, #16
   1e3ac:	str	r0, [fp, #-16]
   1e3b0:	str	r1, [fp, #-20]	; 0xffffffec
   1e3b4:	ldr	r3, [fp, #-16]
   1e3b8:	ldr	r3, [r3]
   1e3bc:	mov	r2, #18688	; 0x4900
   1e3c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e3c4:	mov	r0, r3
   1e3c8:	bl	11498 <openat64@plt>
   1e3cc:	str	r0, [fp, #-8]
   1e3d0:	ldr	r3, [fp, #-8]
   1e3d4:	cmp	r3, #0
   1e3d8:	bge	1e3e4 <__assert_fail@plt+0xcdc0>
   1e3dc:	mvn	r3, #0
   1e3e0:	b	1e3fc <__assert_fail@plt+0xcdd8>
   1e3e4:	ldr	r0, [fp, #-16]
   1e3e8:	bl	1e31c <__assert_fail@plt+0xccf8>
   1e3ec:	ldr	r3, [fp, #-16]
   1e3f0:	ldr	r2, [fp, #-8]
   1e3f4:	str	r2, [r3]
   1e3f8:	mov	r3, #0
   1e3fc:	mov	r0, r3
   1e400:	sub	sp, fp, #4
   1e404:	pop	{fp, pc}
   1e408:	push	{fp, lr}
   1e40c:	add	fp, sp, #4
   1e410:	sub	sp, sp, #16
   1e414:	str	r0, [fp, #-16]
   1e418:	ldr	r1, [pc, #32]	; 1e440 <__assert_fail@plt+0xce1c>
   1e41c:	ldr	r0, [fp, #-16]
   1e420:	bl	11618 <strspn@plt>
   1e424:	str	r0, [fp, #-8]
   1e428:	ldr	r2, [fp, #-16]
   1e42c:	ldr	r3, [fp, #-8]
   1e430:	add	r3, r2, r3
   1e434:	mov	r0, r3
   1e438:	sub	sp, fp, #4
   1e43c:	pop	{fp, pc}
   1e440:	andeq	r0, r2, ip, asr #10
   1e444:	push	{fp, lr}
   1e448:	add	fp, sp, #4
   1e44c:	sub	sp, sp, #48	; 0x30
   1e450:	str	r0, [fp, #-48]	; 0xffffffd0
   1e454:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e458:	bl	11348 <chdir@plt>
   1e45c:	str	r0, [fp, #-8]
   1e460:	ldr	r3, [fp, #-8]
   1e464:	cmp	r3, #0
   1e468:	beq	1e480 <__assert_fail@plt+0xce5c>
   1e46c:	bl	114bc <__errno_location@plt>
   1e470:	mov	r3, r0
   1e474:	ldr	r3, [r3]
   1e478:	cmp	r3, #36	; 0x24
   1e47c:	beq	1e488 <__assert_fail@plt+0xce64>
   1e480:	ldr	r3, [fp, #-8]
   1e484:	b	1e794 <__assert_fail@plt+0xd170>
   1e488:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e48c:	bl	1148c <strlen@plt>
   1e490:	str	r0, [fp, #-12]
   1e494:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e498:	ldr	r3, [fp, #-12]
   1e49c:	add	r3, r2, r3
   1e4a0:	str	r3, [fp, #-16]
   1e4a4:	sub	r3, fp, #44	; 0x2c
   1e4a8:	mov	r0, r3
   1e4ac:	bl	1e2c0 <__assert_fail@plt+0xcc9c>
   1e4b0:	ldr	r3, [fp, #-12]
   1e4b4:	cmp	r3, #0
   1e4b8:	bne	1e4d0 <__assert_fail@plt+0xceac>
   1e4bc:	ldr	r3, [pc, #732]	; 1e7a0 <__assert_fail@plt+0xd17c>
   1e4c0:	mov	r2, #126	; 0x7e
   1e4c4:	ldr	r1, [pc, #728]	; 1e7a4 <__assert_fail@plt+0xd180>
   1e4c8:	ldr	r0, [pc, #728]	; 1e7a8 <__assert_fail@plt+0xd184>
   1e4cc:	bl	11624 <__assert_fail@plt>
   1e4d0:	ldr	r3, [fp, #-12]
   1e4d4:	cmp	r3, #4096	; 0x1000
   1e4d8:	bcs	1e4f0 <__assert_fail@plt+0xcecc>
   1e4dc:	ldr	r3, [pc, #700]	; 1e7a0 <__assert_fail@plt+0xd17c>
   1e4e0:	mov	r2, #127	; 0x7f
   1e4e4:	ldr	r1, [pc, #696]	; 1e7a4 <__assert_fail@plt+0xd180>
   1e4e8:	ldr	r0, [pc, #700]	; 1e7ac <__assert_fail@plt+0xd188>
   1e4ec:	bl	11624 <__assert_fail@plt>
   1e4f0:	ldr	r1, [pc, #696]	; 1e7b0 <__assert_fail@plt+0xd18c>
   1e4f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e4f8:	bl	11618 <strspn@plt>
   1e4fc:	str	r0, [fp, #-20]	; 0xffffffec
   1e500:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e504:	cmp	r3, #2
   1e508:	bne	1e5a8 <__assert_fail@plt+0xcf84>
   1e50c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1e510:	add	r0, r3, #3
   1e514:	ldr	r3, [fp, #-16]
   1e518:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e51c:	add	r2, r2, #3
   1e520:	sub	r3, r3, r2
   1e524:	mov	r2, r3
   1e528:	mov	r1, #47	; 0x2f
   1e52c:	bl	114ec <memchr@plt>
   1e530:	str	r0, [fp, #-24]	; 0xffffffe8
   1e534:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e538:	cmp	r3, #0
   1e53c:	bne	1e558 <__assert_fail@plt+0xcf34>
   1e540:	bl	114bc <__errno_location@plt>
   1e544:	mov	r2, r0
   1e548:	mov	r3, #36	; 0x24
   1e54c:	str	r3, [r2]
   1e550:	mvn	r3, #0
   1e554:	b	1e794 <__assert_fail@plt+0xd170>
   1e558:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e55c:	mov	r2, #0
   1e560:	strb	r2, [r3]
   1e564:	sub	r3, fp, #44	; 0x2c
   1e568:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1e56c:	mov	r0, r3
   1e570:	bl	1e3a0 <__assert_fail@plt+0xcd7c>
   1e574:	str	r0, [fp, #-28]	; 0xffffffe4
   1e578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e57c:	mov	r2, #47	; 0x2f
   1e580:	strb	r2, [r3]
   1e584:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1e588:	cmp	r3, #0
   1e58c:	bne	1e740 <__assert_fail@plt+0xd11c>
   1e590:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e594:	add	r3, r3, #1
   1e598:	mov	r0, r3
   1e59c:	bl	1e408 <__assert_fail@plt+0xcde4>
   1e5a0:	str	r0, [fp, #-48]	; 0xffffffd0
   1e5a4:	b	1e5e0 <__assert_fail@plt+0xcfbc>
   1e5a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e5ac:	cmp	r3, #0
   1e5b0:	beq	1e5e0 <__assert_fail@plt+0xcfbc>
   1e5b4:	sub	r3, fp, #44	; 0x2c
   1e5b8:	ldr	r1, [pc, #496]	; 1e7b0 <__assert_fail@plt+0xd18c>
   1e5bc:	mov	r0, r3
   1e5c0:	bl	1e3a0 <__assert_fail@plt+0xcd7c>
   1e5c4:	mov	r3, r0
   1e5c8:	cmp	r3, #0
   1e5cc:	bne	1e748 <__assert_fail@plt+0xd124>
   1e5d0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e5d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e5d8:	add	r3, r2, r3
   1e5dc:	str	r3, [fp, #-48]	; 0xffffffd0
   1e5e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1e5e4:	ldrb	r3, [r3]
   1e5e8:	cmp	r3, #47	; 0x2f
   1e5ec:	bne	1e604 <__assert_fail@plt+0xcfe0>
   1e5f0:	ldr	r3, [pc, #424]	; 1e7a0 <__assert_fail@plt+0xd17c>
   1e5f4:	mov	r2, #162	; 0xa2
   1e5f8:	ldr	r1, [pc, #420]	; 1e7a4 <__assert_fail@plt+0xd180>
   1e5fc:	ldr	r0, [pc, #432]	; 1e7b4 <__assert_fail@plt+0xd190>
   1e600:	bl	11624 <__assert_fail@plt>
   1e604:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e608:	ldr	r3, [fp, #-16]
   1e60c:	cmp	r2, r3
   1e610:	bls	1e6d4 <__assert_fail@plt+0xd0b0>
   1e614:	ldr	r3, [pc, #388]	; 1e7a0 <__assert_fail@plt+0xd17c>
   1e618:	mov	r2, #163	; 0xa3
   1e61c:	ldr	r1, [pc, #384]	; 1e7a4 <__assert_fail@plt+0xd180>
   1e620:	ldr	r0, [pc, #400]	; 1e7b8 <__assert_fail@plt+0xd194>
   1e624:	bl	11624 <__assert_fail@plt>
   1e628:	mov	r2, #4096	; 0x1000
   1e62c:	mov	r1, #47	; 0x2f
   1e630:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e634:	bl	114a4 <memrchr@plt>
   1e638:	str	r0, [fp, #-32]	; 0xffffffe0
   1e63c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e640:	cmp	r3, #0
   1e644:	bne	1e660 <__assert_fail@plt+0xd03c>
   1e648:	bl	114bc <__errno_location@plt>
   1e64c:	mov	r2, r0
   1e650:	mov	r3, #36	; 0x24
   1e654:	str	r3, [r2]
   1e658:	mvn	r3, #0
   1e65c:	b	1e794 <__assert_fail@plt+0xd170>
   1e660:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e664:	mov	r2, #0
   1e668:	strb	r2, [r3]
   1e66c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1e670:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1e674:	sub	r3, r2, r3
   1e678:	cmp	r3, #4096	; 0x1000
   1e67c:	blt	1e694 <__assert_fail@plt+0xd070>
   1e680:	ldr	r3, [pc, #280]	; 1e7a0 <__assert_fail@plt+0xd17c>
   1e684:	mov	r2, #179	; 0xb3
   1e688:	ldr	r1, [pc, #276]	; 1e7a4 <__assert_fail@plt+0xd180>
   1e68c:	ldr	r0, [pc, #296]	; 1e7bc <__assert_fail@plt+0xd198>
   1e690:	bl	11624 <__assert_fail@plt>
   1e694:	sub	r3, fp, #44	; 0x2c
   1e698:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1e69c:	mov	r0, r3
   1e6a0:	bl	1e3a0 <__assert_fail@plt+0xcd7c>
   1e6a4:	str	r0, [fp, #-36]	; 0xffffffdc
   1e6a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e6ac:	mov	r2, #47	; 0x2f
   1e6b0:	strb	r2, [r3]
   1e6b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e6b8:	cmp	r3, #0
   1e6bc:	bne	1e750 <__assert_fail@plt+0xd12c>
   1e6c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e6c4:	add	r3, r3, #1
   1e6c8:	mov	r0, r3
   1e6cc:	bl	1e408 <__assert_fail@plt+0xcde4>
   1e6d0:	str	r0, [fp, #-48]	; 0xffffffd0
   1e6d4:	ldr	r2, [fp, #-16]
   1e6d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1e6dc:	sub	r3, r2, r3
   1e6e0:	cmp	r3, #4096	; 0x1000
   1e6e4:	bge	1e628 <__assert_fail@plt+0xd004>
   1e6e8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e6ec:	ldr	r3, [fp, #-16]
   1e6f0:	cmp	r2, r3
   1e6f4:	bcs	1e714 <__assert_fail@plt+0xd0f0>
   1e6f8:	sub	r3, fp, #44	; 0x2c
   1e6fc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1e700:	mov	r0, r3
   1e704:	bl	1e3a0 <__assert_fail@plt+0xcd7c>
   1e708:	mov	r3, r0
   1e70c:	cmp	r3, #0
   1e710:	bne	1e758 <__assert_fail@plt+0xd134>
   1e714:	sub	r3, fp, #44	; 0x2c
   1e718:	mov	r0, r3
   1e71c:	bl	1e2ec <__assert_fail@plt+0xccc8>
   1e720:	mov	r3, r0
   1e724:	cmp	r3, #0
   1e728:	bne	1e760 <__assert_fail@plt+0xd13c>
   1e72c:	sub	r3, fp, #44	; 0x2c
   1e730:	mov	r0, r3
   1e734:	bl	1e31c <__assert_fail@plt+0xccf8>
   1e738:	mov	r3, #0
   1e73c:	b	1e794 <__assert_fail@plt+0xd170>
   1e740:	nop			; (mov r0, r0)
   1e744:	b	1e764 <__assert_fail@plt+0xd140>
   1e748:	nop			; (mov r0, r0)
   1e74c:	b	1e764 <__assert_fail@plt+0xd140>
   1e750:	nop			; (mov r0, r0)
   1e754:	b	1e764 <__assert_fail@plt+0xd140>
   1e758:	nop			; (mov r0, r0)
   1e75c:	b	1e764 <__assert_fail@plt+0xd140>
   1e760:	nop			; (mov r0, r0)
   1e764:	bl	114bc <__errno_location@plt>
   1e768:	mov	r3, r0
   1e76c:	ldr	r3, [r3]
   1e770:	str	r3, [fp, #-40]	; 0xffffffd8
   1e774:	sub	r3, fp, #44	; 0x2c
   1e778:	mov	r0, r3
   1e77c:	bl	1e31c <__assert_fail@plt+0xccf8>
   1e780:	bl	114bc <__errno_location@plt>
   1e784:	mov	r2, r0
   1e788:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e78c:	str	r3, [r2]
   1e790:	mvn	r3, #0
   1e794:	mov	r0, r3
   1e798:	sub	sp, fp, #4
   1e79c:	pop	{fp, pc}
   1e7a0:	andeq	r0, r2, r0, lsr #11
   1e7a4:	andeq	r0, r2, r8, lsr #10
   1e7a8:	andeq	r0, r2, r0, asr r5
   1e7ac:	andeq	r0, r2, r8, asr r5
   1e7b0:	andeq	r0, r2, ip, asr #10
   1e7b4:	andeq	r0, r2, r4, ror #10
   1e7b8:	andeq	r0, r2, r0, ror r5
   1e7bc:	andeq	r0, r2, r0, lsl #11
   1e7c0:	push	{fp, lr}
   1e7c4:	add	fp, sp, #4
   1e7c8:	sub	sp, sp, #272	; 0x110
   1e7cc:	str	r0, [fp, #-272]	; 0xfffffef0
   1e7d0:	sub	r3, fp, #264	; 0x108
   1e7d4:	ldr	r2, [pc, #116]	; 1e850 <__assert_fail@plt+0xd22c>
   1e7d8:	mov	r1, r3
   1e7dc:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1e7e0:	bl	1e964 <__assert_fail@plt+0xd340>
   1e7e4:	mov	r3, r0
   1e7e8:	cmp	r3, #0
   1e7ec:	beq	1e7f8 <__assert_fail@plt+0xd1d4>
   1e7f0:	mov	r3, #0
   1e7f4:	b	1e844 <__assert_fail@plt+0xd220>
   1e7f8:	sub	r3, fp, #264	; 0x108
   1e7fc:	ldr	r1, [pc, #80]	; 1e854 <__assert_fail@plt+0xd230>
   1e800:	mov	r0, r3
   1e804:	bl	1127c <strcmp@plt>
   1e808:	mov	r3, r0
   1e80c:	cmp	r3, #0
   1e810:	beq	1e838 <__assert_fail@plt+0xd214>
   1e814:	sub	r3, fp, #264	; 0x108
   1e818:	ldr	r1, [pc, #56]	; 1e858 <__assert_fail@plt+0xd234>
   1e81c:	mov	r0, r3
   1e820:	bl	1127c <strcmp@plt>
   1e824:	mov	r3, r0
   1e828:	cmp	r3, #0
   1e82c:	beq	1e838 <__assert_fail@plt+0xd214>
   1e830:	mov	r3, #1
   1e834:	b	1e83c <__assert_fail@plt+0xd218>
   1e838:	mov	r3, #0
   1e83c:	and	r3, r3, #1
   1e840:	uxtb	r3, r3
   1e844:	mov	r0, r3
   1e848:	sub	sp, fp, #4
   1e84c:	pop	{fp, pc}
   1e850:	andeq	r0, r0, r1, lsl #2
   1e854:	andeq	r0, r2, ip, lsr #11
   1e858:			; <UNDEFINED> instruction: 0x000205b0
   1e85c:	push	{fp, lr}
   1e860:	add	fp, sp, #4
   1e864:	sub	sp, sp, #16
   1e868:	str	r0, [fp, #-16]
   1e86c:	mov	r1, #0
   1e870:	ldr	r0, [fp, #-16]
   1e874:	bl	11534 <setlocale@plt>
   1e878:	str	r0, [fp, #-8]
   1e87c:	ldr	r3, [fp, #-8]
   1e880:	mov	r0, r3
   1e884:	sub	sp, fp, #4
   1e888:	pop	{fp, pc}
   1e88c:	push	{fp, lr}
   1e890:	add	fp, sp, #4
   1e894:	sub	sp, sp, #24
   1e898:	str	r0, [fp, #-16]
   1e89c:	str	r1, [fp, #-20]	; 0xffffffec
   1e8a0:	str	r2, [fp, #-24]	; 0xffffffe8
   1e8a4:	ldr	r0, [fp, #-16]
   1e8a8:	bl	1e85c <__assert_fail@plt+0xd238>
   1e8ac:	str	r0, [fp, #-8]
   1e8b0:	ldr	r3, [fp, #-8]
   1e8b4:	cmp	r3, #0
   1e8b8:	bne	1e8dc <__assert_fail@plt+0xd2b8>
   1e8bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e8c0:	cmp	r3, #0
   1e8c4:	beq	1e8d4 <__assert_fail@plt+0xd2b0>
   1e8c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e8cc:	mov	r2, #0
   1e8d0:	strb	r2, [r3]
   1e8d4:	mov	r3, #22
   1e8d8:	b	1e958 <__assert_fail@plt+0xd334>
   1e8dc:	ldr	r0, [fp, #-8]
   1e8e0:	bl	1148c <strlen@plt>
   1e8e4:	str	r0, [fp, #-12]
   1e8e8:	ldr	r2, [fp, #-12]
   1e8ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e8f0:	cmp	r2, r3
   1e8f4:	bcs	1e918 <__assert_fail@plt+0xd2f4>
   1e8f8:	ldr	r3, [fp, #-12]
   1e8fc:	add	r3, r3, #1
   1e900:	mov	r2, r3
   1e904:	ldr	r1, [fp, #-8]
   1e908:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e90c:	bl	112d0 <memcpy@plt>
   1e910:	mov	r3, #0
   1e914:	b	1e958 <__assert_fail@plt+0xd334>
   1e918:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e91c:	cmp	r3, #0
   1e920:	beq	1e954 <__assert_fail@plt+0xd330>
   1e924:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e928:	sub	r3, r3, #1
   1e92c:	mov	r2, r3
   1e930:	ldr	r1, [fp, #-8]
   1e934:	ldr	r0, [fp, #-20]	; 0xffffffec
   1e938:	bl	112d0 <memcpy@plt>
   1e93c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e940:	sub	r3, r3, #1
   1e944:	ldr	r2, [fp, #-20]	; 0xffffffec
   1e948:	add	r3, r2, r3
   1e94c:	mov	r2, #0
   1e950:	strb	r2, [r3]
   1e954:	mov	r3, #34	; 0x22
   1e958:	mov	r0, r3
   1e95c:	sub	sp, fp, #4
   1e960:	pop	{fp, pc}
   1e964:	push	{fp, lr}
   1e968:	add	fp, sp, #4
   1e96c:	sub	sp, sp, #16
   1e970:	str	r0, [fp, #-8]
   1e974:	str	r1, [fp, #-12]
   1e978:	str	r2, [fp, #-16]
   1e97c:	ldr	r2, [fp, #-16]
   1e980:	ldr	r1, [fp, #-12]
   1e984:	ldr	r0, [fp, #-8]
   1e988:	bl	1e88c <__assert_fail@plt+0xd268>
   1e98c:	mov	r3, r0
   1e990:	mov	r0, r3
   1e994:	sub	sp, fp, #4
   1e998:	pop	{fp, pc}
   1e99c:	push	{fp, lr}
   1e9a0:	add	fp, sp, #4
   1e9a4:	sub	sp, sp, #8
   1e9a8:	str	r0, [fp, #-8]
   1e9ac:	ldr	r0, [fp, #-8]
   1e9b0:	bl	1e85c <__assert_fail@plt+0xd238>
   1e9b4:	mov	r3, r0
   1e9b8:	mov	r0, r3
   1e9bc:	sub	sp, fp, #4
   1e9c0:	pop	{fp, pc}
   1e9c4:	subs	r2, r1, #1
   1e9c8:	bxeq	lr
   1e9cc:	bcc	1eba4 <__assert_fail@plt+0xd580>
   1e9d0:	cmp	r0, r1
   1e9d4:	bls	1eb88 <__assert_fail@plt+0xd564>
   1e9d8:	tst	r1, r2
   1e9dc:	beq	1eb94 <__assert_fail@plt+0xd570>
   1e9e0:	clz	r3, r0
   1e9e4:	clz	r2, r1
   1e9e8:	sub	r3, r2, r3
   1e9ec:	rsbs	r3, r3, #31
   1e9f0:	addne	r3, r3, r3, lsl #1
   1e9f4:	mov	r2, #0
   1e9f8:	addne	pc, pc, r3, lsl #2
   1e9fc:	nop			; (mov r0, r0)
   1ea00:	cmp	r0, r1, lsl #31
   1ea04:	adc	r2, r2, r2
   1ea08:	subcs	r0, r0, r1, lsl #31
   1ea0c:	cmp	r0, r1, lsl #30
   1ea10:	adc	r2, r2, r2
   1ea14:	subcs	r0, r0, r1, lsl #30
   1ea18:	cmp	r0, r1, lsl #29
   1ea1c:	adc	r2, r2, r2
   1ea20:	subcs	r0, r0, r1, lsl #29
   1ea24:	cmp	r0, r1, lsl #28
   1ea28:	adc	r2, r2, r2
   1ea2c:	subcs	r0, r0, r1, lsl #28
   1ea30:	cmp	r0, r1, lsl #27
   1ea34:	adc	r2, r2, r2
   1ea38:	subcs	r0, r0, r1, lsl #27
   1ea3c:	cmp	r0, r1, lsl #26
   1ea40:	adc	r2, r2, r2
   1ea44:	subcs	r0, r0, r1, lsl #26
   1ea48:	cmp	r0, r1, lsl #25
   1ea4c:	adc	r2, r2, r2
   1ea50:	subcs	r0, r0, r1, lsl #25
   1ea54:	cmp	r0, r1, lsl #24
   1ea58:	adc	r2, r2, r2
   1ea5c:	subcs	r0, r0, r1, lsl #24
   1ea60:	cmp	r0, r1, lsl #23
   1ea64:	adc	r2, r2, r2
   1ea68:	subcs	r0, r0, r1, lsl #23
   1ea6c:	cmp	r0, r1, lsl #22
   1ea70:	adc	r2, r2, r2
   1ea74:	subcs	r0, r0, r1, lsl #22
   1ea78:	cmp	r0, r1, lsl #21
   1ea7c:	adc	r2, r2, r2
   1ea80:	subcs	r0, r0, r1, lsl #21
   1ea84:	cmp	r0, r1, lsl #20
   1ea88:	adc	r2, r2, r2
   1ea8c:	subcs	r0, r0, r1, lsl #20
   1ea90:	cmp	r0, r1, lsl #19
   1ea94:	adc	r2, r2, r2
   1ea98:	subcs	r0, r0, r1, lsl #19
   1ea9c:	cmp	r0, r1, lsl #18
   1eaa0:	adc	r2, r2, r2
   1eaa4:	subcs	r0, r0, r1, lsl #18
   1eaa8:	cmp	r0, r1, lsl #17
   1eaac:	adc	r2, r2, r2
   1eab0:	subcs	r0, r0, r1, lsl #17
   1eab4:	cmp	r0, r1, lsl #16
   1eab8:	adc	r2, r2, r2
   1eabc:	subcs	r0, r0, r1, lsl #16
   1eac0:	cmp	r0, r1, lsl #15
   1eac4:	adc	r2, r2, r2
   1eac8:	subcs	r0, r0, r1, lsl #15
   1eacc:	cmp	r0, r1, lsl #14
   1ead0:	adc	r2, r2, r2
   1ead4:	subcs	r0, r0, r1, lsl #14
   1ead8:	cmp	r0, r1, lsl #13
   1eadc:	adc	r2, r2, r2
   1eae0:	subcs	r0, r0, r1, lsl #13
   1eae4:	cmp	r0, r1, lsl #12
   1eae8:	adc	r2, r2, r2
   1eaec:	subcs	r0, r0, r1, lsl #12
   1eaf0:	cmp	r0, r1, lsl #11
   1eaf4:	adc	r2, r2, r2
   1eaf8:	subcs	r0, r0, r1, lsl #11
   1eafc:	cmp	r0, r1, lsl #10
   1eb00:	adc	r2, r2, r2
   1eb04:	subcs	r0, r0, r1, lsl #10
   1eb08:	cmp	r0, r1, lsl #9
   1eb0c:	adc	r2, r2, r2
   1eb10:	subcs	r0, r0, r1, lsl #9
   1eb14:	cmp	r0, r1, lsl #8
   1eb18:	adc	r2, r2, r2
   1eb1c:	subcs	r0, r0, r1, lsl #8
   1eb20:	cmp	r0, r1, lsl #7
   1eb24:	adc	r2, r2, r2
   1eb28:	subcs	r0, r0, r1, lsl #7
   1eb2c:	cmp	r0, r1, lsl #6
   1eb30:	adc	r2, r2, r2
   1eb34:	subcs	r0, r0, r1, lsl #6
   1eb38:	cmp	r0, r1, lsl #5
   1eb3c:	adc	r2, r2, r2
   1eb40:	subcs	r0, r0, r1, lsl #5
   1eb44:	cmp	r0, r1, lsl #4
   1eb48:	adc	r2, r2, r2
   1eb4c:	subcs	r0, r0, r1, lsl #4
   1eb50:	cmp	r0, r1, lsl #3
   1eb54:	adc	r2, r2, r2
   1eb58:	subcs	r0, r0, r1, lsl #3
   1eb5c:	cmp	r0, r1, lsl #2
   1eb60:	adc	r2, r2, r2
   1eb64:	subcs	r0, r0, r1, lsl #2
   1eb68:	cmp	r0, r1, lsl #1
   1eb6c:	adc	r2, r2, r2
   1eb70:	subcs	r0, r0, r1, lsl #1
   1eb74:	cmp	r0, r1
   1eb78:	adc	r2, r2, r2
   1eb7c:	subcs	r0, r0, r1
   1eb80:	mov	r0, r2
   1eb84:	bx	lr
   1eb88:	moveq	r0, #1
   1eb8c:	movne	r0, #0
   1eb90:	bx	lr
   1eb94:	clz	r2, r1
   1eb98:	rsb	r2, r2, #31
   1eb9c:	lsr	r0, r0, r2
   1eba0:	bx	lr
   1eba4:	cmp	r0, #0
   1eba8:	mvnne	r0, #0
   1ebac:	b	1ee4c <__assert_fail@plt+0xd828>
   1ebb0:	cmp	r1, #0
   1ebb4:	beq	1eba4 <__assert_fail@plt+0xd580>
   1ebb8:	push	{r0, r1, lr}
   1ebbc:	bl	1e9c4 <__assert_fail@plt+0xd3a0>
   1ebc0:	pop	{r1, r2, lr}
   1ebc4:	mul	r3, r2, r0
   1ebc8:	sub	r1, r1, r3
   1ebcc:	bx	lr
   1ebd0:	cmp	r1, #0
   1ebd4:	beq	1ede0 <__assert_fail@plt+0xd7bc>
   1ebd8:	eor	ip, r0, r1
   1ebdc:	rsbmi	r1, r1, #0
   1ebe0:	subs	r2, r1, #1
   1ebe4:	beq	1edac <__assert_fail@plt+0xd788>
   1ebe8:	movs	r3, r0
   1ebec:	rsbmi	r3, r0, #0
   1ebf0:	cmp	r3, r1
   1ebf4:	bls	1edb8 <__assert_fail@plt+0xd794>
   1ebf8:	tst	r1, r2
   1ebfc:	beq	1edc8 <__assert_fail@plt+0xd7a4>
   1ec00:	clz	r2, r3
   1ec04:	clz	r0, r1
   1ec08:	sub	r2, r0, r2
   1ec0c:	rsbs	r2, r2, #31
   1ec10:	addne	r2, r2, r2, lsl #1
   1ec14:	mov	r0, #0
   1ec18:	addne	pc, pc, r2, lsl #2
   1ec1c:	nop			; (mov r0, r0)
   1ec20:	cmp	r3, r1, lsl #31
   1ec24:	adc	r0, r0, r0
   1ec28:	subcs	r3, r3, r1, lsl #31
   1ec2c:	cmp	r3, r1, lsl #30
   1ec30:	adc	r0, r0, r0
   1ec34:	subcs	r3, r3, r1, lsl #30
   1ec38:	cmp	r3, r1, lsl #29
   1ec3c:	adc	r0, r0, r0
   1ec40:	subcs	r3, r3, r1, lsl #29
   1ec44:	cmp	r3, r1, lsl #28
   1ec48:	adc	r0, r0, r0
   1ec4c:	subcs	r3, r3, r1, lsl #28
   1ec50:	cmp	r3, r1, lsl #27
   1ec54:	adc	r0, r0, r0
   1ec58:	subcs	r3, r3, r1, lsl #27
   1ec5c:	cmp	r3, r1, lsl #26
   1ec60:	adc	r0, r0, r0
   1ec64:	subcs	r3, r3, r1, lsl #26
   1ec68:	cmp	r3, r1, lsl #25
   1ec6c:	adc	r0, r0, r0
   1ec70:	subcs	r3, r3, r1, lsl #25
   1ec74:	cmp	r3, r1, lsl #24
   1ec78:	adc	r0, r0, r0
   1ec7c:	subcs	r3, r3, r1, lsl #24
   1ec80:	cmp	r3, r1, lsl #23
   1ec84:	adc	r0, r0, r0
   1ec88:	subcs	r3, r3, r1, lsl #23
   1ec8c:	cmp	r3, r1, lsl #22
   1ec90:	adc	r0, r0, r0
   1ec94:	subcs	r3, r3, r1, lsl #22
   1ec98:	cmp	r3, r1, lsl #21
   1ec9c:	adc	r0, r0, r0
   1eca0:	subcs	r3, r3, r1, lsl #21
   1eca4:	cmp	r3, r1, lsl #20
   1eca8:	adc	r0, r0, r0
   1ecac:	subcs	r3, r3, r1, lsl #20
   1ecb0:	cmp	r3, r1, lsl #19
   1ecb4:	adc	r0, r0, r0
   1ecb8:	subcs	r3, r3, r1, lsl #19
   1ecbc:	cmp	r3, r1, lsl #18
   1ecc0:	adc	r0, r0, r0
   1ecc4:	subcs	r3, r3, r1, lsl #18
   1ecc8:	cmp	r3, r1, lsl #17
   1eccc:	adc	r0, r0, r0
   1ecd0:	subcs	r3, r3, r1, lsl #17
   1ecd4:	cmp	r3, r1, lsl #16
   1ecd8:	adc	r0, r0, r0
   1ecdc:	subcs	r3, r3, r1, lsl #16
   1ece0:	cmp	r3, r1, lsl #15
   1ece4:	adc	r0, r0, r0
   1ece8:	subcs	r3, r3, r1, lsl #15
   1ecec:	cmp	r3, r1, lsl #14
   1ecf0:	adc	r0, r0, r0
   1ecf4:	subcs	r3, r3, r1, lsl #14
   1ecf8:	cmp	r3, r1, lsl #13
   1ecfc:	adc	r0, r0, r0
   1ed00:	subcs	r3, r3, r1, lsl #13
   1ed04:	cmp	r3, r1, lsl #12
   1ed08:	adc	r0, r0, r0
   1ed0c:	subcs	r3, r3, r1, lsl #12
   1ed10:	cmp	r3, r1, lsl #11
   1ed14:	adc	r0, r0, r0
   1ed18:	subcs	r3, r3, r1, lsl #11
   1ed1c:	cmp	r3, r1, lsl #10
   1ed20:	adc	r0, r0, r0
   1ed24:	subcs	r3, r3, r1, lsl #10
   1ed28:	cmp	r3, r1, lsl #9
   1ed2c:	adc	r0, r0, r0
   1ed30:	subcs	r3, r3, r1, lsl #9
   1ed34:	cmp	r3, r1, lsl #8
   1ed38:	adc	r0, r0, r0
   1ed3c:	subcs	r3, r3, r1, lsl #8
   1ed40:	cmp	r3, r1, lsl #7
   1ed44:	adc	r0, r0, r0
   1ed48:	subcs	r3, r3, r1, lsl #7
   1ed4c:	cmp	r3, r1, lsl #6
   1ed50:	adc	r0, r0, r0
   1ed54:	subcs	r3, r3, r1, lsl #6
   1ed58:	cmp	r3, r1, lsl #5
   1ed5c:	adc	r0, r0, r0
   1ed60:	subcs	r3, r3, r1, lsl #5
   1ed64:	cmp	r3, r1, lsl #4
   1ed68:	adc	r0, r0, r0
   1ed6c:	subcs	r3, r3, r1, lsl #4
   1ed70:	cmp	r3, r1, lsl #3
   1ed74:	adc	r0, r0, r0
   1ed78:	subcs	r3, r3, r1, lsl #3
   1ed7c:	cmp	r3, r1, lsl #2
   1ed80:	adc	r0, r0, r0
   1ed84:	subcs	r3, r3, r1, lsl #2
   1ed88:	cmp	r3, r1, lsl #1
   1ed8c:	adc	r0, r0, r0
   1ed90:	subcs	r3, r3, r1, lsl #1
   1ed94:	cmp	r3, r1
   1ed98:	adc	r0, r0, r0
   1ed9c:	subcs	r3, r3, r1
   1eda0:	cmp	ip, #0
   1eda4:	rsbmi	r0, r0, #0
   1eda8:	bx	lr
   1edac:	teq	ip, r0
   1edb0:	rsbmi	r0, r0, #0
   1edb4:	bx	lr
   1edb8:	movcc	r0, #0
   1edbc:	asreq	r0, ip, #31
   1edc0:	orreq	r0, r0, #1
   1edc4:	bx	lr
   1edc8:	clz	r2, r1
   1edcc:	rsb	r2, r2, #31
   1edd0:	cmp	ip, #0
   1edd4:	lsr	r0, r3, r2
   1edd8:	rsbmi	r0, r0, #0
   1eddc:	bx	lr
   1ede0:	cmp	r0, #0
   1ede4:	mvngt	r0, #-2147483648	; 0x80000000
   1ede8:	movlt	r0, #-2147483648	; 0x80000000
   1edec:	b	1ee4c <__assert_fail@plt+0xd828>
   1edf0:	cmp	r1, #0
   1edf4:	beq	1ede0 <__assert_fail@plt+0xd7bc>
   1edf8:	push	{r0, r1, lr}
   1edfc:	bl	1ebd8 <__assert_fail@plt+0xd5b4>
   1ee00:	pop	{r1, r2, lr}
   1ee04:	mul	r3, r2, r0
   1ee08:	sub	r1, r1, r3
   1ee0c:	bx	lr
   1ee10:	cmp	r3, #0
   1ee14:	cmpeq	r2, #0
   1ee18:	bne	1ee30 <__assert_fail@plt+0xd80c>
   1ee1c:	cmp	r1, #0
   1ee20:	cmpeq	r0, #0
   1ee24:	mvnne	r1, #0
   1ee28:	mvnne	r0, #0
   1ee2c:	b	1ee4c <__assert_fail@plt+0xd828>
   1ee30:	sub	sp, sp, #8
   1ee34:	push	{sp, lr}
   1ee38:	bl	1ee5c <__assert_fail@plt+0xd838>
   1ee3c:	ldr	lr, [sp, #4]
   1ee40:	add	sp, sp, #8
   1ee44:	pop	{r2, r3}
   1ee48:	bx	lr
   1ee4c:	push	{r1, lr}
   1ee50:	mov	r0, #8
   1ee54:	bl	11264 <raise@plt>
   1ee58:	pop	{r1, pc}
   1ee5c:	cmp	r1, r3
   1ee60:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ee64:	cmpeq	r0, r2
   1ee68:	mov	r4, r0
   1ee6c:	mov	r5, r1
   1ee70:	ldr	r9, [sp, #28]
   1ee74:	movcc	r0, #0
   1ee78:	movcc	r1, #0
   1ee7c:	bcc	1ef74 <__assert_fail@plt+0xd950>
   1ee80:	cmp	r3, #0
   1ee84:	clzeq	ip, r2
   1ee88:	clzne	ip, r3
   1ee8c:	addeq	ip, ip, #32
   1ee90:	cmp	r5, #0
   1ee94:	clzeq	r1, r4
   1ee98:	addeq	r1, r1, #32
   1ee9c:	clzne	r1, r5
   1eea0:	sub	ip, ip, r1
   1eea4:	sub	lr, ip, #32
   1eea8:	lsl	r7, r3, ip
   1eeac:	rsb	r8, ip, #32
   1eeb0:	orr	r7, r7, r2, lsl lr
   1eeb4:	orr	r7, r7, r2, lsr r8
   1eeb8:	lsl	r6, r2, ip
   1eebc:	cmp	r5, r7
   1eec0:	cmpeq	r4, r6
   1eec4:	movcc	r0, #0
   1eec8:	movcc	r1, #0
   1eecc:	bcc	1eee8 <__assert_fail@plt+0xd8c4>
   1eed0:	mov	r3, #1
   1eed4:	subs	r4, r4, r6
   1eed8:	lsl	r1, r3, lr
   1eedc:	lsl	r0, r3, ip
   1eee0:	orr	r1, r1, r3, lsr r8
   1eee4:	sbc	r5, r5, r7
   1eee8:	cmp	ip, #0
   1eeec:	beq	1ef74 <__assert_fail@plt+0xd950>
   1eef0:	lsrs	r3, r7, #1
   1eef4:	rrx	r2, r6
   1eef8:	mov	r6, ip
   1eefc:	b	1ef20 <__assert_fail@plt+0xd8fc>
   1ef00:	subs	r4, r4, r2
   1ef04:	sbc	r5, r5, r3
   1ef08:	adds	r4, r4, r4
   1ef0c:	adc	r5, r5, r5
   1ef10:	adds	r4, r4, #1
   1ef14:	adc	r5, r5, #0
   1ef18:	subs	r6, r6, #1
   1ef1c:	beq	1ef3c <__assert_fail@plt+0xd918>
   1ef20:	cmp	r5, r3
   1ef24:	cmpeq	r4, r2
   1ef28:	bcs	1ef00 <__assert_fail@plt+0xd8dc>
   1ef2c:	adds	r4, r4, r4
   1ef30:	adc	r5, r5, r5
   1ef34:	subs	r6, r6, #1
   1ef38:	bne	1ef20 <__assert_fail@plt+0xd8fc>
   1ef3c:	lsr	r6, r4, ip
   1ef40:	lsr	r7, r5, ip
   1ef44:	orr	r6, r6, r5, lsl r8
   1ef48:	adds	r2, r0, r4
   1ef4c:	orr	r6, r6, r5, lsr lr
   1ef50:	adc	r3, r1, r5
   1ef54:	lsl	r1, r7, ip
   1ef58:	orr	r1, r1, r6, lsl lr
   1ef5c:	lsl	r0, r6, ip
   1ef60:	orr	r1, r1, r6, lsr r8
   1ef64:	subs	r0, r2, r0
   1ef68:	mov	r4, r6
   1ef6c:	mov	r5, r7
   1ef70:	sbc	r1, r3, r1
   1ef74:	cmp	r9, #0
   1ef78:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1ef7c:	strd	r4, [r9]
   1ef80:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ef84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ef88:	mov	r7, r0
   1ef8c:	ldr	r6, [pc, #72]	; 1efdc <__assert_fail@plt+0xd9b8>
   1ef90:	ldr	r5, [pc, #72]	; 1efe0 <__assert_fail@plt+0xd9bc>
   1ef94:	add	r6, pc, r6
   1ef98:	add	r5, pc, r5
   1ef9c:	sub	r6, r6, r5
   1efa0:	mov	r8, r1
   1efa4:	mov	r9, r2
   1efa8:	bl	11220 <fstatfs64@plt-0x20>
   1efac:	asrs	r6, r6, #2
   1efb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1efb4:	mov	r4, #0
   1efb8:	add	r4, r4, #1
   1efbc:	ldr	r3, [r5], #4
   1efc0:	mov	r2, r9
   1efc4:	mov	r1, r8
   1efc8:	mov	r0, r7
   1efcc:	blx	r3
   1efd0:	cmp	r6, r4
   1efd4:	bne	1efb8 <__assert_fail@plt+0xd994>
   1efd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1efdc:	andeq	r1, r1, ip, ror #30
   1efe0:	andeq	r1, r1, r4, ror #30
   1efe4:	bx	lr
   1efe8:	ldr	r3, [pc, #12]	; 1effc <__assert_fail@plt+0xd9d8>
   1efec:	mov	r1, #0
   1eff0:	add	r3, pc, r3
   1eff4:	ldr	r2, [r3]
   1eff8:	b	114c8 <__cxa_atexit@plt>
   1effc:	andeq	r2, r1, ip, ror #2
   1f000:	mov	r2, r1
   1f004:	mov	r1, r0
   1f008:	mov	r0, #3
   1f00c:	b	115d0 <__xstat64@plt>
   1f010:	mov	r2, r1
   1f014:	mov	r1, r0
   1f018:	mov	r0, #3
   1f01c:	b	1136c <__fxstat64@plt>
   1f020:	mov	r2, r1
   1f024:	mov	r1, r0
   1f028:	mov	r0, #3
   1f02c:	b	11600 <__lxstat64@plt>
   1f030:	push	{lr}		; (str lr, [sp, #-4]!)
   1f034:	sub	sp, sp, #12
   1f038:	str	r3, [sp]
   1f03c:	mov	r3, r2
   1f040:	mov	r2, r1
   1f044:	mov	r1, r0
   1f048:	mov	r0, #3
   1f04c:	bl	11354 <__fxstatat64@plt>
   1f050:	add	sp, sp, #12
   1f054:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001f058 <.fini>:
   1f058:	push	{r3, lr}
   1f05c:	pop	{r3, pc}
