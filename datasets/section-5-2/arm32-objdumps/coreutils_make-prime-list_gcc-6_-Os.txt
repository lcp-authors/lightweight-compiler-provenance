
../repos/coreutils/src/make-prime-list:     file format elf32-littlearm


Disassembly of section .init:

00010564 <.init>:
   10564:	push	{r3, lr}
   10568:	bl	109b0 <abort@plt+0x360>
   1056c:	pop	{r3, pc}

Disassembly of section .plt:

00010570 <raise@plt-0x14>:
   10570:	push	{lr}		; (str lr, [sp, #-4]!)
   10574:	ldr	lr, [pc, #4]	; 10580 <raise@plt-0x4>
   10578:	add	lr, pc, lr
   1057c:	ldr	pc, [lr, #8]!
   10580:	andeq	r1, r1, r0, lsl #21

00010584 <raise@plt>:
   10584:	add	ip, pc, #0, 12
   10588:	add	ip, ip, #69632	; 0x11000
   1058c:	ldr	pc, [ip, #2688]!	; 0xa80

00010590 <free@plt>:
   10590:	add	ip, pc, #0, 12
   10594:	add	ip, ip, #69632	; 0x11000
   10598:	ldr	pc, [ip, #2680]!	; 0xa78

0001059c <ferror@plt>:
   1059c:	add	ip, pc, #0, 12
   105a0:	add	ip, ip, #69632	; 0x11000
   105a4:	ldr	pc, [ip, #2672]!	; 0xa70

000105a8 <puts@plt>:
   105a8:	add	ip, pc, #0, 12
   105ac:	add	ip, ip, #69632	; 0x11000
   105b0:	ldr	pc, [ip, #2664]!	; 0xa68

000105b4 <malloc@plt>:
   105b4:	add	ip, pc, #0, 12
   105b8:	add	ip, ip, #69632	; 0x11000
   105bc:	ldr	pc, [ip, #2656]!	; 0xa60

000105c0 <__libc_start_main@plt>:
   105c0:	add	ip, pc, #0, 12
   105c4:	add	ip, ip, #69632	; 0x11000
   105c8:	ldr	pc, [ip, #2648]!	; 0xa58

000105cc <strerror@plt>:
   105cc:	add	ip, pc, #0, 12
   105d0:	add	ip, ip, #69632	; 0x11000
   105d4:	ldr	pc, [ip, #2640]!	; 0xa50

000105d8 <__gmon_start__@plt>:
   105d8:	add	ip, pc, #0, 12
   105dc:	add	ip, ip, #69632	; 0x11000
   105e0:	ldr	pc, [ip, #2632]!	; 0xa48

000105e4 <exit@plt>:
   105e4:	add	ip, pc, #0, 12
   105e8:	add	ip, ip, #69632	; 0x11000
   105ec:	ldr	pc, [ip, #2624]!	; 0xa40

000105f0 <__errno_location@plt>:
   105f0:	add	ip, pc, #0, 12
   105f4:	add	ip, ip, #69632	; 0x11000
   105f8:	ldr	pc, [ip, #2616]!	; 0xa38

000105fc <memset@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #69632	; 0x11000
   10604:	ldr	pc, [ip, #2608]!	; 0xa30

00010608 <putchar@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #69632	; 0x11000
   10610:	ldr	pc, [ip, #2600]!	; 0xa28

00010614 <__printf_chk@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #69632	; 0x11000
   1061c:	ldr	pc, [ip, #2592]!	; 0xa20

00010620 <__fprintf_chk@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #69632	; 0x11000
   10628:	ldr	pc, [ip, #2584]!	; 0xa18

0001062c <fclose@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #69632	; 0x11000
   10634:	ldr	pc, [ip, #2576]!	; 0xa10

00010638 <atoi@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #69632	; 0x11000
   10640:	ldr	pc, [ip, #2568]!	; 0xa08

00010644 <fputs@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #69632	; 0x11000
   1064c:	ldr	pc, [ip, #2560]!	; 0xa00

00010650 <abort@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #69632	; 0x11000
   10658:	ldr	pc, [ip, #2552]!	; 0x9f8

Disassembly of section .text:

0001065c <.text>:
   1065c:	cmp	r0, #2
   10660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10664:	sub	sp, sp, #20
   10668:	beq	1068c <abort@plt+0x3c>
   1066c:	ldr	r0, [pc, #724]	; 10948 <abort@plt+0x2f8>
   10670:	ldr	r2, [pc, #724]	; 1094c <abort@plt+0x2fc>
   10674:	ldr	r3, [r1]
   10678:	ldr	r0, [r0]
   1067c:	mov	r1, #1
   10680:	bl	10620 <__fprintf_chk@plt>
   10684:	mov	r0, #1
   10688:	b	106a0 <abort@plt+0x50>
   1068c:	ldr	r0, [r1, #4]
   10690:	bl	10638 <atoi@plt>
   10694:	cmp	r0, #2
   10698:	bgt	106a8 <abort@plt+0x58>
   1069c:	mov	r0, #0
   106a0:	add	sp, sp, #20
   106a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106a8:	tst	r0, #1
   106ac:	subeq	r0, r0, #1
   106b0:	sub	r0, r0, #1
   106b4:	mov	r4, #0
   106b8:	asr	r5, r0, #1
   106bc:	mov	r0, r5
   106c0:	bl	10b78 <abort@plt+0x528>
   106c4:	mov	r2, r5
   106c8:	mov	r1, #1
   106cc:	mov	r8, r4
   106d0:	str	r0, [sp, #12]
   106d4:	bl	105fc <memset@plt>
   106d8:	mov	r0, #24
   106dc:	mul	r0, r0, r5
   106e0:	bl	10b78 <abort@plt+0x528>
   106e4:	mov	r6, r0
   106e8:	mov	r9, r0
   106ec:	cmp	r8, r5
   106f0:	bcc	107bc <abort@plt+0x16c>
   106f4:	ldr	r0, [pc, #596]	; 10950 <abort@plt+0x300>
   106f8:	bl	105a8 <puts@plt>
   106fc:	ldr	sl, [pc, #592]	; 10954 <abort@plt+0x304>
   10700:	mov	r2, #64	; 0x40
   10704:	ldr	r1, [pc, #588]	; 10958 <abort@plt+0x308>
   10708:	mov	r0, #1
   1070c:	ldr	fp, [pc, #584]	; 1095c <abort@plt+0x30c>
   10710:	bl	10614 <__printf_chk@plt>
   10714:	mov	r5, r6
   10718:	mov	r2, #2
   1071c:	mov	r7, #0
   10720:	mov	r9, #255	; 0xff
   10724:	cmp	r4, r7
   10728:	bne	108b4 <abort@plt+0x264>
   1072c:	ldr	r0, [pc, #556]	; 10960 <abort@plt+0x310>
   10730:	str	r2, [sp]
   10734:	bl	105a8 <puts@plt>
   10738:	ldr	r2, [sp]
   1073c:	add	r2, r2, #2
   10740:	mov	r3, r6
   10744:	ldr	r1, [r3]
   10748:	mov	r0, r3
   1074c:	mul	r1, r1, r1
   10750:	cmp	r2, r1
   10754:	bcs	10920 <abort@plt+0x2d0>
   10758:	ldr	r1, [pc, #516]	; 10964 <abort@plt+0x314>
   1075c:	ldr	r4, [pc, #516]	; 10968 <abort@plt+0x318>
   10760:	mov	r0, #1
   10764:	bl	10614 <__printf_chk@plt>
   10768:	ldr	r0, [sp, #12]
   1076c:	bl	10590 <free@plt>
   10770:	mov	r0, r6
   10774:	bl	10590 <free@plt>
   10778:	ldr	r0, [r4]
   1077c:	bl	1059c <ferror@plt>
   10780:	mov	r5, r0
   10784:	ldr	r0, [r4]
   10788:	bl	1062c <fclose@plt>
   1078c:	cmn	r5, r0
   10790:	beq	1069c <abort@plt+0x4c>
   10794:	ldr	r3, [pc, #428]	; 10948 <abort@plt+0x2f8>
   10798:	ldr	r4, [r3]
   1079c:	bl	105f0 <__errno_location@plt>
   107a0:	ldr	r0, [r0]
   107a4:	bl	105cc <strerror@plt>
   107a8:	ldr	r2, [pc, #444]	; 1096c <abort@plt+0x31c>
   107ac:	mov	r1, #1
   107b0:	mov	r3, r0
   107b4:	mov	r0, r4
   107b8:	b	10680 <abort@plt+0x30>
   107bc:	lsl	r7, r8, #1
   107c0:	add	r7, r7, #3
   107c4:	mov	r2, r7
   107c8:	mov	r3, #0
   107cc:	add	r4, r4, #1
   107d0:	strd	r2, [sp]
   107d4:	lsrs	r3, r3, #1
   107d8:	rrx	r2, r2
   107dc:	and	r2, r2, #7
   107e0:	ldr	r3, [pc, #392]	; 10970 <abort@plt+0x320>
   107e4:	lsl	r2, r2, #2
   107e8:	str	r7, [r9]
   107ec:	lsr	r2, r3, r2
   107f0:	mov	r3, #0
   107f4:	adds	r0, r2, r2
   107f8:	adc	r1, r3, r3
   107fc:	mov	sl, r0
   10800:	mov	fp, r1
   10804:	mul	ip, r2, r3
   10808:	umull	r0, r1, r2, r2
   1080c:	ldr	lr, [sp]
   10810:	add	r1, r1, ip, lsl #1
   10814:	ldr	ip, [sp, #4]
   10818:	mul	ip, r0, ip
   1081c:	mla	ip, lr, r1, ip
   10820:	umull	r0, r1, r0, lr
   10824:	subs	sl, sl, r0
   10828:	add	r1, ip, r1
   1082c:	sbc	fp, fp, r1
   10830:	cmp	r3, fp
   10834:	cmpeq	r2, sl
   10838:	mov	r0, sl
   1083c:	mov	r1, fp
   10840:	bne	10894 <abort@plt+0x244>
   10844:	strd	r2, [r9, #8]
   10848:	mvn	r0, #0
   1084c:	ldrd	r2, [sp]
   10850:	mvn	r1, #0
   10854:	bl	10db4 <abort@plt+0x764>
   10858:	mul	r3, r7, r7
   1085c:	sub	r3, r3, #3
   10860:	lsr	r3, r3, #1
   10864:	strd	r0, [r9, #16]
   10868:	cmp	r3, r5
   1086c:	bcc	108a0 <abort@plt+0x250>
   10870:	add	r8, r8, #1
   10874:	cmp	r5, r8
   10878:	beq	1088c <abort@plt+0x23c>
   1087c:	ldr	r3, [sp, #12]
   10880:	ldrb	r3, [r3, r8]
   10884:	cmp	r3, #0
   10888:	beq	10870 <abort@plt+0x220>
   1088c:	add	r9, r9, #24
   10890:	b	106ec <abort@plt+0x9c>
   10894:	mov	r2, r0
   10898:	mov	r3, r1
   1089c:	b	107f4 <abort@plt+0x1a4>
   108a0:	ldr	r2, [sp, #12]
   108a4:	mov	r1, #0
   108a8:	strb	r1, [r2, r3]
   108ac:	add	r3, r3, r7
   108b0:	b	10868 <abort@plt+0x218>
   108b4:	add	r3, r7, #8
   108b8:	cmp	r4, r3
   108bc:	bls	108d8 <abort@plt+0x288>
   108c0:	ldr	r3, [r5, #192]	; 0xc0
   108c4:	ldr	r1, [r5]
   108c8:	sub	r3, r3, r1
   108cc:	cmp	r3, #255	; 0xff
   108d0:	bls	108dc <abort@plt+0x28c>
   108d4:	bl	10650 <abort@plt>
   108d8:	mov	r3, r9
   108dc:	ldr	r8, [r5]
   108e0:	mov	r1, sl
   108e4:	sub	r2, r8, r2
   108e8:	mov	r0, #1
   108ec:	bl	10614 <__printf_chk@plt>
   108f0:	ldrd	r0, [r5, #8]
   108f4:	mov	r3, #64	; 0x40
   108f8:	mov	r2, #0
   108fc:	bl	10a9c <abort@plt+0x44c>
   10900:	mov	r2, r8
   10904:	mov	r1, fp
   10908:	mov	r0, #1
   1090c:	bl	10614 <__printf_chk@plt>
   10910:	add	r7, r7, #1
   10914:	add	r5, r5, #24
   10918:	mov	r2, r8
   1091c:	b	10724 <abort@plt+0xd4>
   10920:	ldr	r4, [r0, #8]
   10924:	ldr	r1, [r0, #12]
   10928:	add	r3, r3, #24
   1092c:	umull	r4, r5, r4, r2
   10930:	mla	r5, r2, r1, r5
   10934:	ldrd	r0, [r3, #-8]
   10938:	cmp	r5, r1
   1093c:	cmpeq	r4, r0
   10940:	bhi	10744 <abort@plt+0xf4>
   10944:	b	1073c <abort@plt+0xec>
   10948:	andeq	r2, r2, r0, rrx
   1094c:	ldrdeq	r0, [r1], -r8
   10950:	andeq	r1, r1, r0, lsl r0
   10954:	andeq	r1, r1, r0, asr r0
   10958:	andeq	r1, r1, r5, lsr r0
   1095c:	andeq	r1, r1, r0, rrx
   10960:	andeq	r1, r1, r9, ror r0
   10964:	andeq	r1, r1, r6, lsr #1
   10968:	andeq	r2, r2, r4, rrx
   1096c:	muleq	r1, r5, r0
   10970:			; <UNDEFINED> instruction: 0xf5397db1
   10974:	mov	fp, #0
   10978:	mov	lr, #0
   1097c:	pop	{r1}		; (ldr r1, [sp], #4)
   10980:	mov	r2, sp
   10984:	push	{r2}		; (str r2, [sp, #-4]!)
   10988:	push	{r0}		; (str r0, [sp, #-4]!)
   1098c:	ldr	ip, [pc, #16]	; 109a4 <abort@plt+0x354>
   10990:	push	{ip}		; (str ip, [sp, #-4]!)
   10994:	ldr	r0, [pc, #12]	; 109a8 <abort@plt+0x358>
   10998:	ldr	r3, [pc, #12]	; 109ac <abort@plt+0x35c>
   1099c:	bl	105c0 <__libc_start_main@plt>
   109a0:	bl	10650 <abort@plt>
   109a4:	andeq	r0, r1, r8, lsl #31
   109a8:	andeq	r0, r1, ip, asr r6
   109ac:	andeq	r0, r1, r8, lsr #30
   109b0:	ldr	r3, [pc, #20]	; 109cc <abort@plt+0x37c>
   109b4:	ldr	r2, [pc, #20]	; 109d0 <abort@plt+0x380>
   109b8:	add	r3, pc, r3
   109bc:	ldr	r2, [r3, r2]
   109c0:	cmp	r2, #0
   109c4:	bxeq	lr
   109c8:	b	105d8 <__gmon_start__@plt>
   109cc:	andeq	r1, r1, r0, asr #12
   109d0:	andeq	r0, r0, r4, asr r0
   109d4:	ldr	r3, [pc, #28]	; 109f8 <abort@plt+0x3a8>
   109d8:	ldr	r0, [pc, #28]	; 109fc <abort@plt+0x3ac>
   109dc:	sub	r3, r3, r0
   109e0:	cmp	r3, #6
   109e4:	bxls	lr
   109e8:	ldr	r3, [pc, #16]	; 10a00 <abort@plt+0x3b0>
   109ec:	cmp	r3, #0
   109f0:	bxeq	lr
   109f4:	bx	r3
   109f8:	andeq	r2, r2, r3, rrx
   109fc:	andeq	r2, r2, r0, rrx
   10a00:	andeq	r0, r0, r0
   10a04:	ldr	r1, [pc, #36]	; 10a30 <abort@plt+0x3e0>
   10a08:	ldr	r0, [pc, #36]	; 10a34 <abort@plt+0x3e4>
   10a0c:	sub	r1, r1, r0
   10a10:	asr	r1, r1, #2
   10a14:	add	r1, r1, r1, lsr #31
   10a18:	asrs	r1, r1, #1
   10a1c:	bxeq	lr
   10a20:	ldr	r3, [pc, #16]	; 10a38 <abort@plt+0x3e8>
   10a24:	cmp	r3, #0
   10a28:	bxeq	lr
   10a2c:	bx	r3
   10a30:	andeq	r2, r2, r0, rrx
   10a34:	andeq	r2, r2, r0, rrx
   10a38:	andeq	r0, r0, r0
   10a3c:	push	{r4, lr}
   10a40:	ldr	r4, [pc, #24]	; 10a60 <abort@plt+0x410>
   10a44:	ldrb	r3, [r4]
   10a48:	cmp	r3, #0
   10a4c:	popne	{r4, pc}
   10a50:	bl	109d4 <abort@plt+0x384>
   10a54:	mov	r3, #1
   10a58:	strb	r3, [r4]
   10a5c:	pop	{r4, pc}
   10a60:	andeq	r2, r2, r8, rrx
   10a64:	ldr	r0, [pc, #40]	; 10a94 <abort@plt+0x444>
   10a68:	ldr	r3, [r0]
   10a6c:	cmp	r3, #0
   10a70:	bne	10a78 <abort@plt+0x428>
   10a74:	b	10a04 <abort@plt+0x3b4>
   10a78:	ldr	r3, [pc, #24]	; 10a98 <abort@plt+0x448>
   10a7c:	cmp	r3, #0
   10a80:	beq	10a74 <abort@plt+0x424>
   10a84:	push	{r4, lr}
   10a88:	blx	r3
   10a8c:	pop	{r4, lr}
   10a90:	b	10a04 <abort@plt+0x3b4>
   10a94:	andeq	r1, r2, r4, lsl pc
   10a98:	andeq	r0, r0, r0
   10a9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10aa0:	mov	r9, r3
   10aa4:	mov	r3, #0
   10aa8:	bic	r7, r0, #-268435456	; 0xf0000000
   10aac:	cmp	r1, r3
   10ab0:	cmpeq	r0, r7
   10ab4:	mov	r6, r2
   10ab8:	beq	10b28 <abort@plt+0x4d8>
   10abc:	lsr	r4, r1, #24
   10ac0:	mov	r5, #0
   10ac4:	lsr	r8, r0, #28
   10ac8:	orrs	r3, r4, r5
   10acc:	orr	r8, r8, r1, lsl #4
   10ad0:	lsr	sl, r1, #28
   10ad4:	beq	10ae0 <abort@plt+0x490>
   10ad8:	mov	r0, #40	; 0x28
   10adc:	bl	10608 <putchar@plt>
   10ae0:	mov	r3, r9
   10ae4:	add	r2, r6, #1
   10ae8:	mov	r0, r8
   10aec:	mov	r1, sl
   10af0:	bl	10a9c <abort@plt+0x44c>
   10af4:	orrs	r3, r4, r5
   10af8:	beq	10b10 <abort@plt+0x4c0>
   10afc:	ldr	r3, [pc, #96]	; 10b64 <abort@plt+0x514>
   10b00:	add	r2, r6, #3
   10b04:	ldr	r1, [pc, #92]	; 10b68 <abort@plt+0x518>
   10b08:	mov	r0, #1
   10b0c:	bl	10614 <__printf_chk@plt>
   10b10:	mov	r2, #28
   10b14:	ldr	r1, [pc, #80]	; 10b6c <abort@plt+0x51c>
   10b18:	mov	r0, #1
   10b1c:	bl	10614 <__printf_chk@plt>
   10b20:	mov	r2, #7
   10b24:	b	10b50 <abort@plt+0x500>
   10b28:	cmp	r2, #0
   10b2c:	beq	10b20 <abort@plt+0x4d0>
   10b30:	ldr	r1, [pc, #56]	; 10b70 <abort@plt+0x520>
   10b34:	mov	r0, #1
   10b38:	bl	10614 <__printf_chk@plt>
   10b3c:	mov	r1, #28
   10b40:	sub	r0, r9, #1
   10b44:	bl	10d94 <abort@plt+0x744>
   10b48:	and	r2, r1, #3
   10b4c:	add	r2, r2, #1
   10b50:	mov	r3, r7
   10b54:	ldr	r1, [pc, #24]	; 10b74 <abort@plt+0x524>
   10b58:	mov	r0, #1
   10b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b60:	b	10614 <__printf_chk@plt>
   10b64:	andeq	r1, r1, r8, ror r0
   10b68:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   10b6c:	muleq	r1, lr, pc	; <UNPREDICTABLE>
   10b70:	andeq	r0, r1, r8, lsr #31
   10b74:			; <UNDEFINED> instruction: 0x00010fb5
   10b78:	push	{r4, lr}
   10b7c:	bl	105b4 <malloc@plt>
   10b80:	cmp	r0, #0
   10b84:	popne	{r4, pc}
   10b88:	ldr	r3, [pc, #16]	; 10ba0 <abort@plt+0x550>
   10b8c:	ldr	r0, [pc, #16]	; 10ba4 <abort@plt+0x554>
   10b90:	ldr	r1, [r3]
   10b94:	bl	10644 <fputs@plt>
   10b98:	mov	r0, #1
   10b9c:	bl	105e4 <exit@plt>
   10ba0:	andeq	r2, r2, r0, rrx
   10ba4:			; <UNDEFINED> instruction: 0x00010fbd
   10ba8:	subs	r2, r1, #1
   10bac:	bxeq	lr
   10bb0:	bcc	10d88 <abort@plt+0x738>
   10bb4:	cmp	r0, r1
   10bb8:	bls	10d6c <abort@plt+0x71c>
   10bbc:	tst	r1, r2
   10bc0:	beq	10d78 <abort@plt+0x728>
   10bc4:	clz	r3, r0
   10bc8:	clz	r2, r1
   10bcc:	sub	r3, r2, r3
   10bd0:	rsbs	r3, r3, #31
   10bd4:	addne	r3, r3, r3, lsl #1
   10bd8:	mov	r2, #0
   10bdc:	addne	pc, pc, r3, lsl #2
   10be0:	nop			; (mov r0, r0)
   10be4:	cmp	r0, r1, lsl #31
   10be8:	adc	r2, r2, r2
   10bec:	subcs	r0, r0, r1, lsl #31
   10bf0:	cmp	r0, r1, lsl #30
   10bf4:	adc	r2, r2, r2
   10bf8:	subcs	r0, r0, r1, lsl #30
   10bfc:	cmp	r0, r1, lsl #29
   10c00:	adc	r2, r2, r2
   10c04:	subcs	r0, r0, r1, lsl #29
   10c08:	cmp	r0, r1, lsl #28
   10c0c:	adc	r2, r2, r2
   10c10:	subcs	r0, r0, r1, lsl #28
   10c14:	cmp	r0, r1, lsl #27
   10c18:	adc	r2, r2, r2
   10c1c:	subcs	r0, r0, r1, lsl #27
   10c20:	cmp	r0, r1, lsl #26
   10c24:	adc	r2, r2, r2
   10c28:	subcs	r0, r0, r1, lsl #26
   10c2c:	cmp	r0, r1, lsl #25
   10c30:	adc	r2, r2, r2
   10c34:	subcs	r0, r0, r1, lsl #25
   10c38:	cmp	r0, r1, lsl #24
   10c3c:	adc	r2, r2, r2
   10c40:	subcs	r0, r0, r1, lsl #24
   10c44:	cmp	r0, r1, lsl #23
   10c48:	adc	r2, r2, r2
   10c4c:	subcs	r0, r0, r1, lsl #23
   10c50:	cmp	r0, r1, lsl #22
   10c54:	adc	r2, r2, r2
   10c58:	subcs	r0, r0, r1, lsl #22
   10c5c:	cmp	r0, r1, lsl #21
   10c60:	adc	r2, r2, r2
   10c64:	subcs	r0, r0, r1, lsl #21
   10c68:	cmp	r0, r1, lsl #20
   10c6c:	adc	r2, r2, r2
   10c70:	subcs	r0, r0, r1, lsl #20
   10c74:	cmp	r0, r1, lsl #19
   10c78:	adc	r2, r2, r2
   10c7c:	subcs	r0, r0, r1, lsl #19
   10c80:	cmp	r0, r1, lsl #18
   10c84:	adc	r2, r2, r2
   10c88:	subcs	r0, r0, r1, lsl #18
   10c8c:	cmp	r0, r1, lsl #17
   10c90:	adc	r2, r2, r2
   10c94:	subcs	r0, r0, r1, lsl #17
   10c98:	cmp	r0, r1, lsl #16
   10c9c:	adc	r2, r2, r2
   10ca0:	subcs	r0, r0, r1, lsl #16
   10ca4:	cmp	r0, r1, lsl #15
   10ca8:	adc	r2, r2, r2
   10cac:	subcs	r0, r0, r1, lsl #15
   10cb0:	cmp	r0, r1, lsl #14
   10cb4:	adc	r2, r2, r2
   10cb8:	subcs	r0, r0, r1, lsl #14
   10cbc:	cmp	r0, r1, lsl #13
   10cc0:	adc	r2, r2, r2
   10cc4:	subcs	r0, r0, r1, lsl #13
   10cc8:	cmp	r0, r1, lsl #12
   10ccc:	adc	r2, r2, r2
   10cd0:	subcs	r0, r0, r1, lsl #12
   10cd4:	cmp	r0, r1, lsl #11
   10cd8:	adc	r2, r2, r2
   10cdc:	subcs	r0, r0, r1, lsl #11
   10ce0:	cmp	r0, r1, lsl #10
   10ce4:	adc	r2, r2, r2
   10ce8:	subcs	r0, r0, r1, lsl #10
   10cec:	cmp	r0, r1, lsl #9
   10cf0:	adc	r2, r2, r2
   10cf4:	subcs	r0, r0, r1, lsl #9
   10cf8:	cmp	r0, r1, lsl #8
   10cfc:	adc	r2, r2, r2
   10d00:	subcs	r0, r0, r1, lsl #8
   10d04:	cmp	r0, r1, lsl #7
   10d08:	adc	r2, r2, r2
   10d0c:	subcs	r0, r0, r1, lsl #7
   10d10:	cmp	r0, r1, lsl #6
   10d14:	adc	r2, r2, r2
   10d18:	subcs	r0, r0, r1, lsl #6
   10d1c:	cmp	r0, r1, lsl #5
   10d20:	adc	r2, r2, r2
   10d24:	subcs	r0, r0, r1, lsl #5
   10d28:	cmp	r0, r1, lsl #4
   10d2c:	adc	r2, r2, r2
   10d30:	subcs	r0, r0, r1, lsl #4
   10d34:	cmp	r0, r1, lsl #3
   10d38:	adc	r2, r2, r2
   10d3c:	subcs	r0, r0, r1, lsl #3
   10d40:	cmp	r0, r1, lsl #2
   10d44:	adc	r2, r2, r2
   10d48:	subcs	r0, r0, r1, lsl #2
   10d4c:	cmp	r0, r1, lsl #1
   10d50:	adc	r2, r2, r2
   10d54:	subcs	r0, r0, r1, lsl #1
   10d58:	cmp	r0, r1
   10d5c:	adc	r2, r2, r2
   10d60:	subcs	r0, r0, r1
   10d64:	mov	r0, r2
   10d68:	bx	lr
   10d6c:	moveq	r0, #1
   10d70:	movne	r0, #0
   10d74:	bx	lr
   10d78:	clz	r2, r1
   10d7c:	rsb	r2, r2, #31
   10d80:	lsr	r0, r0, r2
   10d84:	bx	lr
   10d88:	cmp	r0, #0
   10d8c:	mvnne	r0, #0
   10d90:	b	10df0 <abort@plt+0x7a0>
   10d94:	cmp	r1, #0
   10d98:	beq	10d88 <abort@plt+0x738>
   10d9c:	push	{r0, r1, lr}
   10da0:	bl	10ba8 <abort@plt+0x558>
   10da4:	pop	{r1, r2, lr}
   10da8:	mul	r3, r2, r0
   10dac:	sub	r1, r1, r3
   10db0:	bx	lr
   10db4:	cmp	r3, #0
   10db8:	cmpeq	r2, #0
   10dbc:	bne	10dd4 <abort@plt+0x784>
   10dc0:	cmp	r1, #0
   10dc4:	cmpeq	r0, #0
   10dc8:	mvnne	r1, #0
   10dcc:	mvnne	r0, #0
   10dd0:	b	10df0 <abort@plt+0x7a0>
   10dd4:	sub	sp, sp, #8
   10dd8:	push	{sp, lr}
   10ddc:	bl	10e00 <abort@plt+0x7b0>
   10de0:	ldr	lr, [sp, #4]
   10de4:	add	sp, sp, #8
   10de8:	pop	{r2, r3}
   10dec:	bx	lr
   10df0:	push	{r1, lr}
   10df4:	mov	r0, #8
   10df8:	bl	10584 <raise@plt>
   10dfc:	pop	{r1, pc}
   10e00:	cmp	r1, r3
   10e04:	push	{r4, r5, r6, r7, r8, r9, lr}
   10e08:	cmpeq	r0, r2
   10e0c:	mov	r4, r0
   10e10:	mov	r5, r1
   10e14:	ldr	r9, [sp, #28]
   10e18:	movcc	r0, #0
   10e1c:	movcc	r1, #0
   10e20:	bcc	10f18 <abort@plt+0x8c8>
   10e24:	cmp	r3, #0
   10e28:	clzeq	ip, r2
   10e2c:	clzne	ip, r3
   10e30:	addeq	ip, ip, #32
   10e34:	cmp	r5, #0
   10e38:	clzeq	r1, r4
   10e3c:	addeq	r1, r1, #32
   10e40:	clzne	r1, r5
   10e44:	sub	ip, ip, r1
   10e48:	sub	lr, ip, #32
   10e4c:	lsl	r7, r3, ip
   10e50:	rsb	r8, ip, #32
   10e54:	orr	r7, r7, r2, lsl lr
   10e58:	orr	r7, r7, r2, lsr r8
   10e5c:	lsl	r6, r2, ip
   10e60:	cmp	r5, r7
   10e64:	cmpeq	r4, r6
   10e68:	movcc	r0, #0
   10e6c:	movcc	r1, #0
   10e70:	bcc	10e8c <abort@plt+0x83c>
   10e74:	mov	r3, #1
   10e78:	subs	r4, r4, r6
   10e7c:	lsl	r1, r3, lr
   10e80:	lsl	r0, r3, ip
   10e84:	orr	r1, r1, r3, lsr r8
   10e88:	sbc	r5, r5, r7
   10e8c:	cmp	ip, #0
   10e90:	beq	10f18 <abort@plt+0x8c8>
   10e94:	lsrs	r3, r7, #1
   10e98:	rrx	r2, r6
   10e9c:	mov	r6, ip
   10ea0:	b	10ec4 <abort@plt+0x874>
   10ea4:	subs	r4, r4, r2
   10ea8:	sbc	r5, r5, r3
   10eac:	adds	r4, r4, r4
   10eb0:	adc	r5, r5, r5
   10eb4:	adds	r4, r4, #1
   10eb8:	adc	r5, r5, #0
   10ebc:	subs	r6, r6, #1
   10ec0:	beq	10ee0 <abort@plt+0x890>
   10ec4:	cmp	r5, r3
   10ec8:	cmpeq	r4, r2
   10ecc:	bcs	10ea4 <abort@plt+0x854>
   10ed0:	adds	r4, r4, r4
   10ed4:	adc	r5, r5, r5
   10ed8:	subs	r6, r6, #1
   10edc:	bne	10ec4 <abort@plt+0x874>
   10ee0:	lsr	r6, r4, ip
   10ee4:	lsr	r7, r5, ip
   10ee8:	orr	r6, r6, r5, lsl r8
   10eec:	adds	r2, r0, r4
   10ef0:	orr	r6, r6, r5, lsr lr
   10ef4:	adc	r3, r1, r5
   10ef8:	lsl	r1, r7, ip
   10efc:	orr	r1, r1, r6, lsl lr
   10f00:	lsl	r0, r6, ip
   10f04:	orr	r1, r1, r6, lsr r8
   10f08:	subs	r0, r2, r0
   10f0c:	mov	r4, r6
   10f10:	mov	r5, r7
   10f14:	sbc	r1, r3, r1
   10f18:	cmp	r9, #0
   10f1c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   10f20:	strd	r4, [r9]
   10f24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10f28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f2c:	mov	r7, r0
   10f30:	ldr	r6, [pc, #72]	; 10f80 <abort@plt+0x930>
   10f34:	ldr	r5, [pc, #72]	; 10f84 <abort@plt+0x934>
   10f38:	add	r6, pc, r6
   10f3c:	add	r5, pc, r5
   10f40:	sub	r6, r6, r5
   10f44:	mov	r8, r1
   10f48:	mov	r9, r2
   10f4c:	bl	10564 <raise@plt-0x20>
   10f50:	asrs	r6, r6, #2
   10f54:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f58:	mov	r4, #0
   10f5c:	add	r4, r4, #1
   10f60:	ldr	r3, [r5], #4
   10f64:	mov	r2, r9
   10f68:	mov	r1, r8
   10f6c:	mov	r0, r7
   10f70:	blx	r3
   10f74:	cmp	r6, r4
   10f78:	bne	10f5c <abort@plt+0x90c>
   10f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f80:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10f84:	andeq	r0, r1, r8, asr #31
   10f88:	bx	lr

Disassembly of section .fini:

00010f8c <.fini>:
   10f8c:	push	{r3, lr}
   10f90:	pop	{r3, pc}
