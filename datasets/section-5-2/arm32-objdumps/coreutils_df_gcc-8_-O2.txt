
../repos/coreutils/src/df:     file format elf32-littlearm


Disassembly of section .init:

000112c4 <.init>:
   112c4:	push	{r3, lr}
   112c8:	bl	12c48 <__assert_fail@plt+0x1544>
   112cc:	pop	{r3, pc}

Disassembly of section .plt:

000112d0 <calloc@plt-0x14>:
   112d0:	push	{lr}		; (str lr, [sp, #-4]!)
   112d4:	ldr	lr, [pc, #4]	; 112e0 <calloc@plt-0x4>
   112d8:	add	lr, pc, lr
   112dc:	ldr	pc, [lr, #8]!
   112e0:	andeq	lr, r1, r0, lsr #26

000112e4 <calloc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #122880	; 0x1e000
   112ec:	ldr	pc, [ip, #3360]!	; 0xd20

000112f0 <fputs_unlocked@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #122880	; 0x1e000
   112f8:	ldr	pc, [ip, #3352]!	; 0xd18

000112fc <raise@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #122880	; 0x1e000
   11304:	ldr	pc, [ip, #3344]!	; 0xd10

00011308 <strverscmp@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #122880	; 0x1e000
   11310:	ldr	pc, [ip, #3336]!	; 0xd08

00011314 <__getdelim@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #122880	; 0x1e000
   1131c:	ldr	pc, [ip, #3328]!	; 0xd00

00011320 <strcmp@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #122880	; 0x1e000
   11328:	ldr	pc, [ip, #3320]!	; 0xcf8

0001132c <fflush@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #122880	; 0x1e000
   11334:	ldr	pc, [ip, #3312]!	; 0xcf0

00011338 <wcwidth@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #122880	; 0x1e000
   11340:	ldr	pc, [ip, #3304]!	; 0xce8

00011344 <memmove@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #122880	; 0x1e000
   1134c:	ldr	pc, [ip, #3296]!	; 0xce0

00011350 <free@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #122880	; 0x1e000
   11358:	ldr	pc, [ip, #3288]!	; 0xcd8

0001135c <faccessat@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #122880	; 0x1e000
   11364:	ldr	pc, [ip, #3280]!	; 0xcd0

00011368 <_exit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #122880	; 0x1e000
   11370:	ldr	pc, [ip, #3272]!	; 0xcc8

00011374 <memcpy@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #122880	; 0x1e000
   1137c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011380 <__strtoull_internal@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #122880	; 0x1e000
   11388:	ldr	pc, [ip, #3256]!	; 0xcb8

0001138c <mbsinit@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #122880	; 0x1e000
   11394:	ldr	pc, [ip, #3248]!	; 0xcb0

00011398 <memcmp@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #122880	; 0x1e000
   113a0:	ldr	pc, [ip, #3240]!	; 0xca8

000113a4 <fputc_unlocked@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #122880	; 0x1e000
   113ac:	ldr	pc, [ip, #3232]!	; 0xca0

000113b0 <uname@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #122880	; 0x1e000
   113b8:	ldr	pc, [ip, #3224]!	; 0xc98

000113bc <dcgettext@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #122880	; 0x1e000
   113c4:	ldr	pc, [ip, #3216]!	; 0xc90

000113c8 <strdup@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #122880	; 0x1e000
   113d0:	ldr	pc, [ip, #3208]!	; 0xc88

000113d4 <realloc@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #122880	; 0x1e000
   113dc:	ldr	pc, [ip, #3200]!	; 0xc80

000113e0 <textdomain@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #122880	; 0x1e000
   113e8:	ldr	pc, [ip, #3192]!	; 0xc78

000113ec <iswcntrl@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #122880	; 0x1e000
   113f4:	ldr	pc, [ip, #3184]!	; 0xc70

000113f8 <rawmemchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #122880	; 0x1e000
   11400:	ldr	pc, [ip, #3176]!	; 0xc68

00011404 <chdir@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #122880	; 0x1e000
   1140c:	ldr	pc, [ip, #3168]!	; 0xc60

00011410 <iswprint@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #122880	; 0x1e000
   11418:	ldr	pc, [ip, #3160]!	; 0xc58

0001141c <__fxstat64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #122880	; 0x1e000
   11424:	ldr	pc, [ip, #3152]!	; 0xc50

00011428 <readlink@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #122880	; 0x1e000
   11430:	ldr	pc, [ip, #3144]!	; 0xc48

00011434 <__memcpy_chk@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #122880	; 0x1e000
   1143c:	ldr	pc, [ip, #3136]!	; 0xc40

00011440 <fwrite@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #122880	; 0x1e000
   11448:	ldr	pc, [ip, #3128]!	; 0xc38

0001144c <lseek64@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #122880	; 0x1e000
   11454:	ldr	pc, [ip, #3120]!	; 0xc30

00011458 <__ctype_get_mb_cur_max@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #122880	; 0x1e000
   11460:	ldr	pc, [ip, #3112]!	; 0xc28

00011464 <hasmntopt@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #122880	; 0x1e000
   1146c:	ldr	pc, [ip, #3104]!	; 0xc20

00011470 <__fpending@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #122880	; 0x1e000
   11478:	ldr	pc, [ip, #3096]!	; 0xc18

0001147c <mbrtowc@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #122880	; 0x1e000
   11484:	ldr	pc, [ip, #3088]!	; 0xc10

00011488 <wcstombs@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #122880	; 0x1e000
   11490:	ldr	pc, [ip, #3080]!	; 0xc08

00011494 <error@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #122880	; 0x1e000
   1149c:	ldr	pc, [ip, #3072]!	; 0xc00

000114a0 <getmntent@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #122880	; 0x1e000
   114a8:	ldr	pc, [ip, #3064]!	; 0xbf8

000114ac <open64@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #122880	; 0x1e000
   114b4:	ldr	pc, [ip, #3056]!	; 0xbf0

000114b8 <__asprintf_chk@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #122880	; 0x1e000
   114c0:	ldr	pc, [ip, #3048]!	; 0xbe8

000114c4 <getenv@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #122880	; 0x1e000
   114cc:	ldr	pc, [ip, #3040]!	; 0xbe0

000114d0 <malloc@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #122880	; 0x1e000
   114d8:	ldr	pc, [ip, #3032]!	; 0xbd8

000114dc <__libc_start_main@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #122880	; 0x1e000
   114e4:	ldr	pc, [ip, #3024]!	; 0xbd0

000114e8 <__freading@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #122880	; 0x1e000
   114f0:	ldr	pc, [ip, #3016]!	; 0xbc8

000114f4 <__gmon_start__@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #122880	; 0x1e000
   114fc:	ldr	pc, [ip, #3008]!	; 0xbc0

00011500 <mempcpy@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #122880	; 0x1e000
   11508:	ldr	pc, [ip, #3000]!	; 0xbb8

0001150c <getopt_long@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #122880	; 0x1e000
   11514:	ldr	pc, [ip, #2992]!	; 0xbb0

00011518 <__ctype_b_loc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #122880	; 0x1e000
   11520:	ldr	pc, [ip, #2984]!	; 0xba8

00011524 <getcwd@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #122880	; 0x1e000
   1152c:	ldr	pc, [ip, #2976]!	; 0xba0

00011530 <exit@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #122880	; 0x1e000
   11538:	ldr	pc, [ip, #2968]!	; 0xb98

0001153c <strlen@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #122880	; 0x1e000
   11544:	ldr	pc, [ip, #2960]!	; 0xb90

00011548 <strchr@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #122880	; 0x1e000
   11550:	ldr	pc, [ip, #2952]!	; 0xb88

00011554 <openat64@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #122880	; 0x1e000
   1155c:	ldr	pc, [ip, #2944]!	; 0xb80

00011560 <memrchr@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #122880	; 0x1e000
   11568:	ldr	pc, [ip, #2936]!	; 0xb78

0001156c <__errno_location@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #122880	; 0x1e000
   11574:	ldr	pc, [ip, #2928]!	; 0xb70

00011578 <__sprintf_chk@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #122880	; 0x1e000
   11580:	ldr	pc, [ip, #2920]!	; 0xb68

00011584 <__cxa_atexit@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #122880	; 0x1e000
   1158c:	ldr	pc, [ip, #2912]!	; 0xb60

00011590 <memset@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #122880	; 0x1e000
   11598:	ldr	pc, [ip, #2904]!	; 0xb58

0001159c <__printf_chk@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #122880	; 0x1e000
   115a4:	ldr	pc, [ip, #2896]!	; 0xb50

000115a8 <statvfs64@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #122880	; 0x1e000
   115b0:	ldr	pc, [ip, #2888]!	; 0xb48

000115b4 <fileno@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #122880	; 0x1e000
   115bc:	ldr	pc, [ip, #2880]!	; 0xb40

000115c0 <__fprintf_chk@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #122880	; 0x1e000
   115c8:	ldr	pc, [ip, #2872]!	; 0xb38

000115cc <memchr@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #122880	; 0x1e000
   115d4:	ldr	pc, [ip, #2864]!	; 0xb30

000115d8 <fclose@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #122880	; 0x1e000
   115e0:	ldr	pc, [ip, #2856]!	; 0xb28

000115e4 <fseeko64@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #122880	; 0x1e000
   115ec:	ldr	pc, [ip, #2848]!	; 0xb20

000115f0 <endmntent@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #122880	; 0x1e000
   115f8:	ldr	pc, [ip, #2840]!	; 0xb18

000115fc <fcntl64@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #122880	; 0x1e000
   11604:	ldr	pc, [ip, #2832]!	; 0xb10

00011608 <__overflow@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #122880	; 0x1e000
   11610:	ldr	pc, [ip, #2824]!	; 0xb08

00011614 <setlocale@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #122880	; 0x1e000
   1161c:	ldr	pc, [ip, #2816]!	; 0xb00

00011620 <wcswidth@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #122880	; 0x1e000
   11628:	ldr	pc, [ip, #2808]!	; 0xaf8

0001162c <strrchr@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #122880	; 0x1e000
   11634:	ldr	pc, [ip, #2800]!	; 0xaf0

00011638 <statfs64@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #122880	; 0x1e000
   11640:	ldr	pc, [ip, #2792]!	; 0xae8

00011644 <nl_langinfo@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #122880	; 0x1e000
   1164c:	ldr	pc, [ip, #2784]!	; 0xae0

00011650 <sscanf@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #122880	; 0x1e000
   11658:	ldr	pc, [ip, #2776]!	; 0xad8

0001165c <localeconv@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #122880	; 0x1e000
   11664:	ldr	pc, [ip, #2768]!	; 0xad0

00011668 <mbstowcs@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #122880	; 0x1e000
   11670:	ldr	pc, [ip, #2760]!	; 0xac8

00011674 <fchdir@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #122880	; 0x1e000
   1167c:	ldr	pc, [ip, #2752]!	; 0xac0

00011680 <canonicalize_file_name@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #122880	; 0x1e000
   11688:	ldr	pc, [ip, #2744]!	; 0xab8

0001168c <fopen64@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #122880	; 0x1e000
   11694:	ldr	pc, [ip, #2736]!	; 0xab0

00011698 <setmntent@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #122880	; 0x1e000
   116a0:	ldr	pc, [ip, #2728]!	; 0xaa8

000116a4 <bindtextdomain@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #122880	; 0x1e000
   116ac:	ldr	pc, [ip, #2720]!	; 0xaa0

000116b0 <sync@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #122880	; 0x1e000
   116b8:	ldr	pc, [ip, #2712]!	; 0xa98

000116bc <__xstat64@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #122880	; 0x1e000
   116c4:	ldr	pc, [ip, #2704]!	; 0xa90

000116c8 <isatty@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #122880	; 0x1e000
   116d0:	ldr	pc, [ip, #2696]!	; 0xa88

000116d4 <strncmp@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #122880	; 0x1e000
   116dc:	ldr	pc, [ip, #2688]!	; 0xa80

000116e0 <abort@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #122880	; 0x1e000
   116e8:	ldr	pc, [ip, #2680]!	; 0xa78

000116ec <close@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #122880	; 0x1e000
   116f4:	ldr	pc, [ip, #2672]!	; 0xa70

000116f8 <strspn@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #122880	; 0x1e000
   11700:	ldr	pc, [ip, #2664]!	; 0xa68

00011704 <__assert_fail@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #122880	; 0x1e000
   1170c:	ldr	pc, [ip, #2656]!	; 0xa60

Disassembly of section .text:

00011710 <.text>:
   11710:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11714:	mov	r5, r0
   11718:	mov	r4, r1
   1171c:	ldr	r0, [r1]
   11720:	strd	r6, [sp, #8]
   11724:	movw	r6, #59984	; 0xea50
   11728:	movt	r6, #1
   1172c:	strd	r8, [sp, #16]
   11730:	movw	r8, #824	; 0x338
   11734:	movt	r8, #3
   11738:	strd	sl, [sp, #24]
   1173c:	movw	sl, #832	; 0x340
   11740:	movt	sl, #3
   11744:	str	lr, [sp, #32]
   11748:	sub	sp, sp, #188	; 0xbc
   1174c:	mov	fp, #0
   11750:	bl	183f4 <__assert_fail@plt+0x6cf0>
   11754:	movw	r1, #61172	; 0xeef4
   11758:	movt	r1, #1
   1175c:	ldr	r7, [pc, #3900]	; 126a0 <__assert_fail@plt+0xf9c>
   11760:	mov	r0, #6
   11764:	mov	r9, fp
   11768:	bl	11614 <setlocale@plt>
   1176c:	movw	r1, #59916	; 0xea0c
   11770:	movt	r1, #1
   11774:	movw	r0, #59640	; 0xe8f8
   11778:	movt	r0, #1
   1177c:	bl	116a4 <bindtextdomain@plt>
   11780:	movw	r0, #59640	; 0xe8f8
   11784:	movt	r0, #1
   11788:	bl	113e0 <textdomain@plt>
   1178c:	movw	r0, #20260	; 0x4f24
   11790:	movt	r0, #1
   11794:	bl	1dda4 <__assert_fail@plt+0xc6a0>
   11798:	mvn	r1, #0
   1179c:	mov	r2, #1
   117a0:	str	fp, [sl]
   117a4:	mov	r3, #0
   117a8:	mov	r0, fp
   117ac:	str	fp, [sl, #4]
   117b0:	str	r1, [sl, #28]
   117b4:	movw	r1, #59940	; 0xea24
   117b8:	movt	r1, #1
   117bc:	strb	fp, [sl, #45]	; 0x2d
   117c0:	strd	r2, [sl, #56]	; 0x38
   117c4:	mov	r2, #5
   117c8:	strb	fp, [sl, #46]	; 0x2e
   117cc:	str	fp, [sl, #48]	; 0x30
   117d0:	strb	fp, [sl, #52]	; 0x34
   117d4:	strb	fp, [sl, #53]	; 0x35
   117d8:	strb	fp, [sl, #112]	; 0x70
   117dc:	bl	113bc <dcgettext@plt>
   117e0:	str	r0, [sp, #28]
   117e4:	add	r2, sp, #80	; 0x50
   117e8:	mvn	ip, #0
   117ec:	mov	r3, r7
   117f0:	mov	r1, r4
   117f4:	mov	r0, r5
   117f8:	str	r2, [sp]
   117fc:	mov	r2, r6
   11800:	str	ip, [sp, #80]	; 0x50
   11804:	bl	1150c <getopt_long@plt>
   11808:	cmn	r0, #1
   1180c:	mov	fp, r0
   11810:	beq	11ad4 <__assert_fail@plt+0x3d0>
   11814:	cmp	r0, #105	; 0x69
   11818:	beq	11a8c <__assert_fail@plt+0x388>
   1181c:	ble	11864 <__assert_fail@plt+0x160>
   11820:	cmp	r0, #118	; 0x76
   11824:	beq	117e4 <__assert_fail@plt+0xe0>
   11828:	ble	118a4 <__assert_fail@plt+0x1a0>
   1182c:	movw	r3, #257	; 0x101
   11830:	cmp	r0, r3
   11834:	beq	11aa4 <__assert_fail@plt+0x3a0>
   11838:	bgt	118d0 <__assert_fail@plt+0x1cc>
   1183c:	cmp	r0, #120	; 0x78
   11840:	bne	11890 <__assert_fail@plt+0x18c>
   11844:	mov	r0, #8
   11848:	ldr	fp, [r8]
   1184c:	bl	1aef8 <__assert_fail@plt+0x97f4>
   11850:	ldr	r3, [sl, #4]
   11854:	str	r0, [sl, #4]
   11858:	str	fp, [r0]
   1185c:	str	r3, [r0, #4]
   11860:	b	117e4 <__assert_fail@plt+0xe0>
   11864:	cmp	r0, #72	; 0x48
   11868:	beq	11abc <__assert_fail@plt+0x3b8>
   1186c:	ble	1196c <__assert_fail@plt+0x268>
   11870:	cmp	r0, #84	; 0x54
   11874:	beq	11a74 <__assert_fail@plt+0x370>
   11878:	ble	118e8 <__assert_fail@plt+0x1e4>
   1187c:	cmp	r0, #97	; 0x61
   11880:	bne	11904 <__assert_fail@plt+0x200>
   11884:	mov	r3, #1
   11888:	strb	r3, [sl, #45]	; 0x2d
   1188c:	b	117e4 <__assert_fail@plt+0xe0>
   11890:	cmp	r0, #256	; 0x100
   11894:	bne	11a0c <__assert_fail@plt+0x308>
   11898:	mov	r3, #0
   1189c:	strb	r3, [sl, #113]	; 0x71
   118a0:	b	117e4 <__assert_fail@plt+0xe0>
   118a4:	cmp	r0, #108	; 0x6c
   118a8:	beq	11ab0 <__assert_fail@plt+0x3ac>
   118ac:	ble	1194c <__assert_fail@plt+0x248>
   118b0:	cmp	r0, #109	; 0x6d
   118b4:	bne	11924 <__assert_fail@plt+0x220>
   118b8:	mov	r1, #0
   118bc:	mov	r2, #1048576	; 0x100000
   118c0:	mov	r3, #0
   118c4:	str	r1, [sl, #28]
   118c8:	strd	r2, [sl, #32]
   118cc:	b	117e4 <__assert_fail@plt+0xe0>
   118d0:	movw	r3, #258	; 0x102
   118d4:	cmp	r0, r3
   118d8:	bne	119b0 <__assert_fail@plt+0x2ac>
   118dc:	mov	r3, #1
   118e0:	strb	r3, [sl, #53]	; 0x35
   118e4:	b	117e4 <__assert_fail@plt+0xe0>
   118e8:	cmp	r0, #80	; 0x50
   118ec:	bne	11a0c <__assert_fail@plt+0x308>
   118f0:	ldr	r3, [sl, #24]
   118f4:	cmp	r3, #4
   118f8:	beq	12b98 <__assert_fail@plt+0x1494>
   118fc:	mov	r9, #1
   11900:	b	117e4 <__assert_fail@plt+0xe0>
   11904:	cmp	r0, #104	; 0x68
   11908:	bne	11a0c <__assert_fail@plt+0x308>
   1190c:	mov	r1, #176	; 0xb0
   11910:	mov	r2, #1
   11914:	mov	r3, #0
   11918:	str	r1, [sl, #28]
   1191c:	strd	r2, [sl, #32]
   11920:	b	117e4 <__assert_fail@plt+0xe0>
   11924:	cmp	r0, #116	; 0x74
   11928:	bne	11a0c <__assert_fail@plt+0x308>
   1192c:	mov	r0, #8
   11930:	ldr	fp, [r8]
   11934:	bl	1aef8 <__assert_fail@plt+0x97f4>
   11938:	ldr	r3, [sl]
   1193c:	str	r0, [sl]
   11940:	str	fp, [r0]
   11944:	str	r3, [r0, #4]
   11948:	b	117e4 <__assert_fail@plt+0xe0>
   1194c:	cmp	r0, #107	; 0x6b
   11950:	bne	11a0c <__assert_fail@plt+0x308>
   11954:	mov	r1, #0
   11958:	mov	r2, #1024	; 0x400
   1195c:	mov	r3, #0
   11960:	str	r1, [sl, #28]
   11964:	strd	r2, [sl, #32]
   11968:	b	117e4 <__assert_fail@plt+0xe0>
   1196c:	cmn	r0, #2
   11970:	beq	129ac <__assert_fail@plt+0x12a8>
   11974:	ble	11a14 <__assert_fail@plt+0x310>
   11978:	cmp	r0, #66	; 0x42
   1197c:	bne	11a04 <__assert_fail@plt+0x300>
   11980:	ldr	r2, [pc, #3356]	; 126a4 <__assert_fail@plt+0xfa0>
   11984:	ldr	r0, [r8]
   11988:	sub	r1, r2, #4
   1198c:	bl	170d0 <__assert_fail@plt+0x59cc>
   11990:	cmp	r0, #0
   11994:	beq	117e4 <__assert_fail@plt+0xe0>
   11998:	ldr	ip, [r8]
   1199c:	mov	r2, fp
   119a0:	ldr	r3, [pc, #3320]	; 126a0 <__assert_fail@plt+0xf9c>
   119a4:	ldr	r1, [sp, #80]	; 0x50
   119a8:	str	ip, [sp]
   119ac:	bl	1b3f4 <__assert_fail@plt+0x9cf0>
   119b0:	movw	r3, #259	; 0x103
   119b4:	cmp	r0, r3
   119b8:	bne	11a0c <__assert_fail@plt+0x308>
   119bc:	ldr	r3, [sl, #24]
   119c0:	cmp	r3, #1
   119c4:	beq	12bc4 <__assert_fail@plt+0x14c0>
   119c8:	cmp	r3, #0
   119cc:	moveq	r3, r9
   119d0:	movne	r3, #0
   119d4:	cmp	r3, #0
   119d8:	bne	12b98 <__assert_fail@plt+0x1494>
   119dc:	ldrb	r2, [sl, #112]	; 0x70
   119e0:	cmp	r2, #0
   119e4:	bne	12b6c <__assert_fail@plt+0x1468>
   119e8:	ldr	r0, [r8]
   119ec:	mov	r3, #4
   119f0:	str	r3, [sl, #24]
   119f4:	cmp	r0, #0
   119f8:	beq	117e4 <__assert_fail@plt+0xe0>
   119fc:	bl	14384 <__assert_fail@plt+0x2c80>
   11a00:	b	117e4 <__assert_fail@plt+0xe0>
   11a04:	cmp	r0, #70	; 0x46
   11a08:	beq	1192c <__assert_fail@plt+0x228>
   11a0c:	mov	r0, #1
   11a10:	bl	13f64 <__assert_fail@plt+0x2860>
   11a14:	cmn	r0, #3
   11a18:	bne	11a0c <__assert_fail@plt+0x308>
   11a1c:	mov	r4, #0
   11a20:	movw	r3, #60028	; 0xea7c
   11a24:	movt	r3, #1
   11a28:	movw	r1, #60040	; 0xea88
   11a2c:	movt	r1, #1
   11a30:	movw	r2, #60056	; 0xea98
   11a34:	movt	r2, #1
   11a38:	movw	r0, #820	; 0x334
   11a3c:	movt	r0, #3
   11a40:	stmib	sp, {r1, r3, r4}
   11a44:	movw	r3, #720	; 0x2d0
   11a48:	movt	r3, #3
   11a4c:	movw	r1, #57260	; 0xdfac
   11a50:	movt	r1, #1
   11a54:	str	r2, [sp]
   11a58:	movw	r2, #59636	; 0xe8f4
   11a5c:	movt	r2, #1
   11a60:	ldr	r0, [r0]
   11a64:	ldr	r3, [r3]
   11a68:	bl	1ade8 <__assert_fail@plt+0x96e4>
   11a6c:	mov	r0, r4
   11a70:	bl	11530 <exit@plt>
   11a74:	ldr	r3, [sl, #24]
   11a78:	cmp	r3, #4
   11a7c:	beq	129b8 <__assert_fail@plt+0x12b4>
   11a80:	mov	r3, #1
   11a84:	strb	r3, [sl, #112]	; 0x70
   11a88:	b	117e4 <__assert_fail@plt+0xe0>
   11a8c:	ldr	r3, [sl, #24]
   11a90:	cmp	r3, #4
   11a94:	beq	12bc4 <__assert_fail@plt+0x14c0>
   11a98:	mov	r3, #1
   11a9c:	str	r3, [sl, #24]
   11aa0:	b	117e4 <__assert_fail@plt+0xe0>
   11aa4:	mov	r3, #1
   11aa8:	strb	r3, [sl, #113]	; 0x71
   11aac:	b	117e4 <__assert_fail@plt+0xe0>
   11ab0:	mov	r3, #1
   11ab4:	strb	r3, [sl, #44]	; 0x2c
   11ab8:	b	117e4 <__assert_fail@plt+0xe0>
   11abc:	mov	r1, #144	; 0x90
   11ac0:	mov	r2, #1
   11ac4:	mov	r3, #0
   11ac8:	str	r1, [sl, #28]
   11acc:	strd	r2, [sl, #32]
   11ad0:	b	117e4 <__assert_fail@plt+0xe0>
   11ad4:	ldr	r3, [sl, #28]
   11ad8:	cmn	r3, #1
   11adc:	beq	11c44 <__assert_fail@plt+0x540>
   11ae0:	ldr	r3, [sl, #24]
   11ae4:	cmp	r3, #4
   11ae8:	cmpne	r3, #1
   11aec:	bne	11c00 <__assert_fail@plt+0x4fc>
   11af0:	ldr	r8, [sl]
   11af4:	cmp	r8, #0
   11af8:	beq	11b8c <__assert_fail@plt+0x488>
   11afc:	mov	r3, #0
   11b00:	movw	r9, #60108	; 0xeacc
   11b04:	movt	r9, #1
   11b08:	mov	fp, r3
   11b0c:	str	r4, [sp, #28]
   11b10:	ldr	r4, [sl, #4]
   11b14:	cmp	r4, #0
   11b18:	beq	11b74 <__assert_fail@plt+0x470>
   11b1c:	ldr	r6, [r8]
   11b20:	b	11b30 <__assert_fail@plt+0x42c>
   11b24:	ldr	r4, [r4, #4]
   11b28:	cmp	r4, #0
   11b2c:	beq	11b74 <__assert_fail@plt+0x470>
   11b30:	mov	r0, r6
   11b34:	ldr	r1, [r4]
   11b38:	bl	11320 <strcmp@plt>
   11b3c:	subs	r7, r0, #0
   11b40:	bne	11b24 <__assert_fail@plt+0x420>
   11b44:	mov	r2, #5
   11b48:	mov	r1, r9
   11b4c:	bl	113bc <dcgettext@plt>
   11b50:	mov	r6, r0
   11b54:	ldr	r0, [r8]
   11b58:	mov	fp, #1
   11b5c:	bl	1a6e4 <__assert_fail@plt+0x8fe0>
   11b60:	mov	r3, r0
   11b64:	mov	r2, r6
   11b68:	mov	r1, r7
   11b6c:	mov	r0, r7
   11b70:	bl	11494 <error@plt>
   11b74:	ldr	r8, [r8, #4]
   11b78:	cmp	r8, #0
   11b7c:	bne	11b10 <__assert_fail@plt+0x40c>
   11b80:	cmp	fp, #0
   11b84:	ldr	r4, [sp, #28]
   11b88:	bne	11c24 <__assert_fail@plt+0x520>
   11b8c:	movw	r3, #808	; 0x328
   11b90:	movt	r3, #3
   11b94:	ldr	r0, [r3]
   11b98:	str	r3, [sp, #68]	; 0x44
   11b9c:	cmp	r0, r5
   11ba0:	movge	r3, #0
   11ba4:	strge	r3, [sp, #52]	; 0x34
   11ba8:	blt	11c80 <__assert_fail@plt+0x57c>
   11bac:	ldr	r3, [sl]
   11bb0:	cmp	r3, #0
   11bb4:	beq	11e48 <__assert_fail@plt+0x744>
   11bb8:	mov	r0, #1
   11bbc:	and	r0, r0, #1
   11bc0:	bl	17adc <__assert_fail@plt+0x63d8>
   11bc4:	cmp	r0, #0
   11bc8:	str	r0, [sl, #116]	; 0x74
   11bcc:	beq	11da8 <__assert_fail@plt+0x6a4>
   11bd0:	ldrb	r3, [sl, #113]	; 0x71
   11bd4:	cmp	r3, #0
   11bd8:	bne	11c78 <__assert_fail@plt+0x574>
   11bdc:	ldr	r3, [sl, #24]
   11be0:	cmp	r3, #4
   11be4:	ldrls	pc, [pc, r3, lsl #2]
   11be8:	b	12bf0 <__assert_fail@plt+0x14ec>
   11bec:	muleq	r1, ip, r2
   11bf0:	andeq	r2, r1, r4, asr #4
   11bf4:	strdeq	r2, [r1], -r8
   11bf8:	muleq	r1, ip, r1
   11bfc:	muleq	r1, r8, lr
   11c00:	ldr	r3, [sl, #28]
   11c04:	tst	r3, #16
   11c08:	movne	r3, #2
   11c0c:	strne	r3, [sl, #24]
   11c10:	bne	11af0 <__assert_fail@plt+0x3ec>
   11c14:	cmp	r9, #0
   11c18:	movne	r3, #3
   11c1c:	strne	r3, [sl, #24]
   11c20:	b	11af0 <__assert_fail@plt+0x3ec>
   11c24:	mov	r0, #1
   11c28:	add	sp, sp, #188	; 0xbc
   11c2c:	ldrd	r4, [sp]
   11c30:	ldrd	r6, [sp, #8]
   11c34:	ldrd	r8, [sp, #16]
   11c38:	ldrd	sl, [sp, #24]
   11c3c:	add	sp, sp, #32
   11c40:	pop	{pc}		; (ldr pc, [sp], #4)
   11c44:	cmp	r9, #0
   11c48:	beq	11e7c <__assert_fail@plt+0x778>
   11c4c:	mov	r3, #0
   11c50:	movw	r0, #60076	; 0xeaac
   11c54:	movt	r0, #1
   11c58:	str	r3, [sl, #28]
   11c5c:	bl	114c4 <getenv@plt>
   11c60:	cmp	r0, #0
   11c64:	mov	r3, #0
   11c68:	moveq	r2, #1024	; 0x400
   11c6c:	movne	r2, #512	; 0x200
   11c70:	strd	r2, [sl, #32]
   11c74:	b	11ae0 <__assert_fail@plt+0x3dc>
   11c78:	bl	116b0 <sync@plt>
   11c7c:	b	11bdc <__assert_fail@plt+0x4d8>
   11c80:	sub	r0, r5, r0
   11c84:	mov	r1, #104	; 0x68
   11c88:	bl	1b060 <__assert_fail@plt+0x995c>
   11c8c:	movw	r3, #61060	; 0xee84
   11c90:	movt	r3, #1
   11c94:	str	sl, [sp, #32]
   11c98:	mov	fp, #104	; 0x68
   11c9c:	str	r3, [sp, #36]	; 0x24
   11ca0:	ldr	r3, [sp, #68]	; 0x44
   11ca4:	str	r0, [sp, #52]	; 0x34
   11ca8:	mov	sl, r3
   11cac:	ldr	r6, [r3]
   11cb0:	b	11d10 <__assert_fail@plt+0x60c>
   11cb4:	bl	1156c <__errno_location@plt>
   11cb8:	ldr	r8, [r0]
   11cbc:	mov	r3, r0
   11cc0:	cmp	r8, #20
   11cc4:	cmpne	r8, #2
   11cc8:	bne	11d78 <__assert_fail@plt+0x674>
   11ccc:	cmp	r8, #0
   11cd0:	beq	11d0c <__assert_fail@plt+0x608>
   11cd4:	mov	r1, #3
   11cd8:	mov	r0, #0
   11cdc:	ldr	r2, [r4, r6, lsl #2]
   11ce0:	bl	1a50c <__assert_fail@plt+0x8e08>
   11ce4:	mov	r3, r0
   11ce8:	mov	r1, r8
   11cec:	ldr	r2, [sp, #36]	; 0x24
   11cf0:	mov	r0, #0
   11cf4:	bl	11494 <error@plt>
   11cf8:	mov	r2, #0
   11cfc:	mov	r3, #1
   11d00:	str	r2, [r4, r6, lsl #2]
   11d04:	ldr	r2, [sp, #32]
   11d08:	str	r3, [r2, #48]	; 0x30
   11d0c:	add	r6, r6, #1
   11d10:	cmp	r6, r5
   11d14:	bge	11da0 <__assert_fail@plt+0x69c>
   11d18:	ldr	r7, [sl]
   11d1c:	mov	r1, #2304	; 0x900
   11d20:	ldr	r9, [r4, r6, lsl #2]
   11d24:	ldr	r3, [sp, #52]	; 0x34
   11d28:	sub	r7, r6, r7
   11d2c:	mov	r0, r9
   11d30:	mla	r7, fp, r7, r3
   11d34:	bl	114ac <open64@plt>
   11d38:	subs	r3, r0, #0
   11d3c:	blt	11cb4 <__assert_fail@plt+0x5b0>
   11d40:	mov	r1, r3
   11d44:	mov	r2, r7
   11d48:	str	r3, [sp, #28]
   11d4c:	mov	r0, #3
   11d50:	bl	1141c <__fxstat64@plt>
   11d54:	subs	r8, r0, #0
   11d58:	ldr	r3, [sp, #28]
   11d5c:	beq	11d6c <__assert_fail@plt+0x668>
   11d60:	bl	1156c <__errno_location@plt>
   11d64:	ldr	r8, [r0]
   11d68:	ldr	r3, [sp, #28]
   11d6c:	mov	r0, r3
   11d70:	bl	116ec <close@plt>
   11d74:	b	11ccc <__assert_fail@plt+0x5c8>
   11d78:	mov	r2, r7
   11d7c:	mov	r1, r9
   11d80:	str	r3, [sp, #28]
   11d84:	mov	r0, #3
   11d88:	bl	116bc <__xstat64@plt>
   11d8c:	cmp	r0, #0
   11d90:	ldrne	r3, [sp, #28]
   11d94:	ldrne	r8, [r3]
   11d98:	bne	11ccc <__assert_fail@plt+0x5c8>
   11d9c:	b	11d0c <__assert_fail@plt+0x608>
   11da0:	ldr	sl, [sp, #32]
   11da4:	b	11bac <__assert_fail@plt+0x4a8>
   11da8:	ldr	r3, [sp, #68]	; 0x44
   11dac:	ldr	r3, [r3]
   11db0:	cmp	r3, r5
   11db4:	bge	11e00 <__assert_fail@plt+0x6fc>
   11db8:	ldrb	r3, [sl, #45]	; 0x2d
   11dbc:	cmp	r3, #0
   11dc0:	bne	11e00 <__assert_fail@plt+0x6fc>
   11dc4:	ldrb	r3, [sl, #44]	; 0x2c
   11dc8:	cmp	r3, #0
   11dcc:	bne	11e00 <__assert_fail@plt+0x6fc>
   11dd0:	ldr	r3, [sl]
   11dd4:	cmp	r3, #0
   11dd8:	bne	11e00 <__assert_fail@plt+0x6fc>
   11ddc:	ldr	r6, [sl, #4]
   11de0:	cmp	r6, #0
   11de4:	bne	11e00 <__assert_fail@plt+0x6fc>
   11de8:	movw	r1, #60156	; 0xeafc
   11dec:	movt	r1, #1
   11df0:	mov	r2, #5
   11df4:	bl	113bc <dcgettext@plt>
   11df8:	mov	r8, r0
   11dfc:	b	11e0c <__assert_fail@plt+0x708>
   11e00:	movw	r8, #61172	; 0xeef4
   11e04:	movt	r8, #1
   11e08:	mov	r6, #1
   11e0c:	bl	1156c <__errno_location@plt>
   11e10:	ldr	r7, [r0]
   11e14:	mov	r2, #5
   11e18:	movw	r1, #60168	; 0xeb08
   11e1c:	movt	r1, #1
   11e20:	mov	r0, #0
   11e24:	bl	113bc <dcgettext@plt>
   11e28:	mov	r3, r8
   11e2c:	movw	r2, #60212	; 0xeb34
   11e30:	movt	r2, #1
   11e34:	str	r0, [sp]
   11e38:	mov	r0, r6
   11e3c:	mov	r1, r7
   11e40:	bl	11494 <error@plt>
   11e44:	b	11bd0 <__assert_fail@plt+0x4cc>
   11e48:	ldr	r3, [sl, #4]
   11e4c:	cmp	r3, #0
   11e50:	bne	11bb8 <__assert_fail@plt+0x4b4>
   11e54:	ldrb	r3, [sl, #112]	; 0x70
   11e58:	cmp	r3, #0
   11e5c:	bne	11bb8 <__assert_fail@plt+0x4b4>
   11e60:	movw	r3, #380	; 0x17c
   11e64:	movt	r3, #3
   11e68:	ldrb	r3, [r3, #56]	; 0x38
   11e6c:	cmp	r3, #0
   11e70:	ldrbeq	r0, [sl, #44]	; 0x2c
   11e74:	beq	11bbc <__assert_fail@plt+0x4b8>
   11e78:	b	11bb8 <__assert_fail@plt+0x4b4>
   11e7c:	movw	r0, #60092	; 0xeabc
   11e80:	movt	r0, #1
   11e84:	bl	114c4 <getenv@plt>
   11e88:	ldr	r2, [pc, #2068]	; 126a4 <__assert_fail@plt+0xfa0>
   11e8c:	sub	r1, r2, #4
   11e90:	bl	170d0 <__assert_fail@plt+0x59cc>
   11e94:	b	11ae0 <__assert_fail@plt+0x3dc>
   11e98:	ldr	r3, [sl, #16]
   11e9c:	cmp	r3, #0
   11ea0:	beq	12960 <__assert_fail@plt+0x125c>
   11ea4:	bl	12f44 <__assert_fail@plt+0x1840>
   11ea8:	ldr	r3, [sp, #52]	; 0x34
   11eac:	cmp	r3, #0
   11eb0:	beq	12648 <__assert_fail@plt+0xf44>
   11eb4:	ldr	r3, [sp, #68]	; 0x44
   11eb8:	ldr	r3, [r3]
   11ebc:	mov	r2, r3
   11ec0:	mov	r3, #1
   11ec4:	cmp	r5, r2
   11ec8:	str	r2, [sp, #40]	; 0x28
   11ecc:	strb	r3, [sl, #46]	; 0x2e
   11ed0:	ble	12340 <__assert_fail@plt+0xc3c>
   11ed4:	add	r3, r4, r5, lsl #2
   11ed8:	str	sl, [sp, #36]	; 0x24
   11edc:	str	r3, [sp, #56]	; 0x38
   11ee0:	ldr	r3, [sp, #40]	; 0x28
   11ee4:	add	r3, r4, r3, lsl #2
   11ee8:	str	r3, [sp, #32]
   11eec:	ldr	r3, [sp, #32]
   11ef0:	ldr	r1, [r3], #4
   11ef4:	subs	r4, r1, #0
   11ef8:	str	r3, [sp, #32]
   11efc:	str	r1, [sp, #44]	; 0x2c
   11f00:	beq	12320 <__assert_fail@plt+0xc1c>
   11f04:	ldr	r0, [sp, #40]	; 0x28
   11f08:	mov	r2, #104	; 0x68
   11f0c:	ldr	r3, [sp, #68]	; 0x44
   11f10:	ldr	r3, [r3]
   11f14:	sub	r3, r0, r3
   11f18:	ldr	r0, [sp, #52]	; 0x34
   11f1c:	mla	fp, r2, r3, r0
   11f20:	ldr	r3, [fp, #16]
   11f24:	and	r3, r3, #45056	; 0xb000
   11f28:	cmp	r3, #8192	; 0x2000
   11f2c:	bne	120b4 <__assert_fail@plt+0x9b0>
   11f30:	mov	r0, r4
   11f34:	bl	11680 <canonicalize_file_name@plt>
   11f38:	subs	r3, r0, #0
   11f3c:	ldreq	r9, [sp, #44]	; 0x2c
   11f40:	str	r3, [sp, #72]	; 0x48
   11f44:	beq	11f58 <__assert_fail@plt+0x854>
   11f48:	ldrb	r9, [r3]
   11f4c:	cmp	r9, #47	; 0x2f
   11f50:	moveq	r4, r3
   11f54:	mov	r9, r4
   11f58:	ldr	r3, [sp, #36]	; 0x24
   11f5c:	ldr	r6, [r3, #116]	; 0x74
   11f60:	cmp	r6, #0
   11f64:	beq	12944 <__assert_fail@plt+0x1240>
   11f68:	mov	r3, #0
   11f6c:	mvn	r2, #0
   11f70:	str	r3, [sp, #28]
   11f74:	str	fp, [sp, #76]	; 0x4c
   11f78:	mov	fp, r3
   11f7c:	str	r2, [sp, #48]	; 0x30
   11f80:	str	r3, [sp, #60]	; 0x3c
   11f84:	ldr	r8, [r6]
   11f88:	mov	r0, r8
   11f8c:	bl	11680 <canonicalize_file_name@plt>
   11f90:	subs	r7, r0, #0
   11f94:	beq	11fa4 <__assert_fail@plt+0x8a0>
   11f98:	ldrb	r3, [r7]
   11f9c:	cmp	r3, #47	; 0x2f
   11fa0:	moveq	r8, r7
   11fa4:	mov	r1, r8
   11fa8:	mov	r0, r9
   11fac:	bl	11320 <strcmp@plt>
   11fb0:	subs	sl, r0, #0
   11fb4:	bne	1207c <__assert_fail@plt+0x978>
   11fb8:	ldr	r3, [sp, #36]	; 0x24
   11fbc:	ldr	r5, [r6, #4]
   11fc0:	ldr	r4, [r3, #116]	; 0x74
   11fc4:	cmp	r4, #0
   11fc8:	beq	1203c <__assert_fail@plt+0x938>
   11fcc:	mov	r1, r5
   11fd0:	ldr	r0, [r4, #4]
   11fd4:	bl	11320 <strcmp@plt>
   11fd8:	cmp	r0, #0
   11fdc:	moveq	sl, r4
   11fe0:	ldr	r4, [r4, #28]
   11fe4:	cmp	r4, #0
   11fe8:	bne	11fcc <__assert_fail@plt+0x8c8>
   11fec:	cmp	sl, #0
   11ff0:	beq	1203c <__assert_fail@plt+0x938>
   11ff4:	ldr	r0, [sl]
   11ff8:	bl	11680 <canonicalize_file_name@plt>
   11ffc:	subs	r4, r0, #0
   12000:	beq	12010 <__assert_fail@plt+0x90c>
   12004:	ldrb	r3, [r4]
   12008:	cmp	r3, #47	; 0x2f
   1200c:	beq	12024 <__assert_fail@plt+0x920>
   12010:	mov	r0, r4
   12014:	bl	15214 <__assert_fail@plt+0x3b10>
   12018:	ldr	r0, [sl]
   1201c:	bl	1b348 <__assert_fail@plt+0x9c44>
   12020:	mov	r4, r0
   12024:	mov	r1, r8
   12028:	mov	r0, r4
   1202c:	bl	11320 <strcmp@plt>
   12030:	cmp	r0, #0
   12034:	bne	12360 <__assert_fail@plt+0xc5c>
   12038:	ldr	r5, [r6, #4]
   1203c:	mov	r0, r5
   12040:	bl	1153c <strlen@plt>
   12044:	ldr	r2, [sp, #28]
   12048:	mov	r3, r0
   1204c:	eor	r8, r2, #1
   12050:	ldr	r2, [sp, #48]	; 0x30
   12054:	uxtb	r8, r8
   12058:	cmp	r2, r0
   1205c:	movls	sl, #0
   12060:	movhi	sl, #1
   12064:	orrs	fp, r8, sl
   12068:	moveq	r3, #1
   1206c:	streq	r3, [sp, #28]
   12070:	bne	12368 <__assert_fail@plt+0xc64>
   12074:	mov	r0, r4
   12078:	bl	15214 <__assert_fail@plt+0x3b10>
   1207c:	mov	r0, r7
   12080:	bl	15214 <__assert_fail@plt+0x3b10>
   12084:	ldr	r6, [r6, #28]
   12088:	cmp	r6, #0
   1208c:	bne	11f84 <__assert_fail@plt+0x880>
   12090:	ldr	r0, [sp, #72]	; 0x48
   12094:	mov	r4, fp
   12098:	ldr	fp, [sp, #76]	; 0x4c
   1209c:	bl	15214 <__assert_fail@plt+0x3b10>
   120a0:	ldr	r3, [sp, #60]	; 0x3c
   120a4:	cmp	r3, #0
   120a8:	bne	1254c <__assert_fail@plt+0xe48>
   120ac:	cmp	r4, #0
   120b0:	bne	125fc <__assert_fail@plt+0xef8>
   120b4:	ldr	r0, [sp, #44]	; 0x2c
   120b8:	bl	11680 <canonicalize_file_name@plt>
   120bc:	subs	r6, r0, #0
   120c0:	beq	120d0 <__assert_fail@plt+0x9cc>
   120c4:	ldrb	r3, [r6]
   120c8:	cmp	r3, #47	; 0x2f
   120cc:	beq	12448 <__assert_fail@plt+0xd44>
   120d0:	mov	r0, r6
   120d4:	bl	15214 <__assert_fail@plt+0x3b10>
   120d8:	ldr	r3, [sp, #36]	; 0x24
   120dc:	ldr	r5, [r3, #116]	; 0x74
   120e0:	cmp	r5, #0
   120e4:	beq	122d4 <__assert_fail@plt+0xbd0>
   120e8:	mov	r4, #0
   120ec:	mvn	r8, #0
   120f0:	mvn	r9, #0
   120f4:	b	12104 <__assert_fail@plt+0xa00>
   120f8:	ldr	r5, [r5, #28]
   120fc:	cmp	r5, #0
   12100:	beq	123f8 <__assert_fail@plt+0xcf4>
   12104:	ldrd	r0, [r5, #16]
   12108:	cmp	r1, r9
   1210c:	cmpeq	r0, r8
   12110:	beq	123b0 <__assert_fail@plt+0xcac>
   12114:	ldrd	r2, [fp]
   12118:	cmp	r3, r1
   1211c:	cmpeq	r2, r0
   12120:	bne	120f8 <__assert_fail@plt+0x9f4>
   12124:	movw	r1, #60384	; 0xebe0
   12128:	movt	r1, #1
   1212c:	ldr	r0, [r5, #12]
   12130:	bl	11320 <strcmp@plt>
   12134:	cmp	r0, #0
   12138:	beq	120f8 <__assert_fail@plt+0x9f4>
   1213c:	cmp	r4, #0
   12140:	beq	1215c <__assert_fail@plt+0xa58>
   12144:	ldrb	r3, [r4, #24]
   12148:	tst	r3, #1
   1214c:	bne	1215c <__assert_fail@plt+0xa58>
   12150:	ldrb	r3, [r5, #24]
   12154:	tst	r3, #1
   12158:	bne	120f8 <__assert_fail@plt+0x9f4>
   1215c:	add	r2, sp, #80	; 0x50
   12160:	mov	r0, #3
   12164:	ldr	r1, [r5, #4]
   12168:	bl	116bc <__xstat64@plt>
   1216c:	cmp	r0, #0
   12170:	bne	1218c <__assert_fail@plt+0xa88>
   12174:	ldrd	r2, [r5, #16]
   12178:	ldrd	r0, [sp, #80]	; 0x50
   1217c:	cmp	r1, r3
   12180:	cmpeq	r0, r2
   12184:	moveq	r4, r5
   12188:	beq	120f8 <__assert_fail@plt+0x9f4>
   1218c:	mvn	r2, #1
   12190:	mvn	r3, #0
   12194:	strd	r2, [r5, #16]
   12198:	b	120f8 <__assert_fail@plt+0x9f4>
   1219c:	mov	r1, #0
   121a0:	mov	r0, r1
   121a4:	bl	13278 <__assert_fail@plt+0x1b74>
   121a8:	ldrb	r3, [sl, #112]	; 0x70
   121ac:	cmp	r3, #0
   121b0:	bne	12950 <__assert_fail@plt+0x124c>
   121b4:	mov	r1, #0
   121b8:	mov	r0, #2
   121bc:	bl	13278 <__assert_fail@plt+0x1b74>
   121c0:	mov	r1, #0
   121c4:	mov	r0, #3
   121c8:	bl	13278 <__assert_fail@plt+0x1b74>
   121cc:	mov	r1, #0
   121d0:	mov	r0, #4
   121d4:	bl	13278 <__assert_fail@plt+0x1b74>
   121d8:	movw	r1, #60220	; 0xeb3c
   121dc:	movt	r1, #1
   121e0:	mov	r0, #5
   121e4:	bl	13278 <__assert_fail@plt+0x1b74>
   121e8:	mov	r1, #0
   121ec:	mov	r0, #10
   121f0:	bl	13278 <__assert_fail@plt+0x1b74>
   121f4:	b	11ea4 <__assert_fail@plt+0x7a0>
   121f8:	mov	r1, #0
   121fc:	mov	r0, r1
   12200:	bl	13278 <__assert_fail@plt+0x1b74>
   12204:	ldrb	r3, [sl, #112]	; 0x70
   12208:	cmp	r3, #0
   1220c:	bne	1297c <__assert_fail@plt+0x1278>
   12210:	mov	r0, #2
   12214:	movw	r1, #59856	; 0xe9d0
   12218:	movt	r1, #1
   1221c:	bl	13278 <__assert_fail@plt+0x1b74>
   12220:	mov	r1, #0
   12224:	mov	r0, #3
   12228:	bl	13278 <__assert_fail@plt+0x1b74>
   1222c:	movw	r1, #59864	; 0xe9d8
   12230:	movt	r1, #1
   12234:	mov	r0, #4
   12238:	bl	13278 <__assert_fail@plt+0x1b74>
   1223c:	mov	r1, #0
   12240:	b	121e0 <__assert_fail@plt+0xadc>
   12244:	mov	r1, #0
   12248:	mov	r0, r1
   1224c:	bl	13278 <__assert_fail@plt+0x1b74>
   12250:	ldrb	r3, [sl, #112]	; 0x70
   12254:	cmp	r3, #0
   12258:	bne	1298c <__assert_fail@plt+0x1288>
   1225c:	mov	r1, #0
   12260:	mov	r0, #6
   12264:	bl	13278 <__assert_fail@plt+0x1b74>
   12268:	mov	r1, #0
   1226c:	mov	r0, #7
   12270:	bl	13278 <__assert_fail@plt+0x1b74>
   12274:	mov	r1, #0
   12278:	mov	r0, #8
   1227c:	bl	13278 <__assert_fail@plt+0x1b74>
   12280:	mov	r1, #0
   12284:	mov	r0, #9
   12288:	bl	13278 <__assert_fail@plt+0x1b74>
   1228c:	mov	r1, #0
   12290:	mov	r0, #10
   12294:	bl	13278 <__assert_fail@plt+0x1b74>
   12298:	b	11ea4 <__assert_fail@plt+0x7a0>
   1229c:	mov	r1, #0
   122a0:	mov	r0, r1
   122a4:	bl	13278 <__assert_fail@plt+0x1b74>
   122a8:	ldrb	r3, [sl, #112]	; 0x70
   122ac:	cmp	r3, #0
   122b0:	bne	1299c <__assert_fail@plt+0x1298>
   122b4:	mov	r1, #0
   122b8:	mov	r0, #2
   122bc:	bl	13278 <__assert_fail@plt+0x1b74>
   122c0:	mov	r1, #0
   122c4:	mov	r0, #3
   122c8:	bl	13278 <__assert_fail@plt+0x1b74>
   122cc:	mov	r1, #0
   122d0:	b	12234 <__assert_fail@plt+0xb30>
   122d4:	ldr	r5, [sp, #44]	; 0x2c
   122d8:	mov	r1, fp
   122dc:	mov	r0, r5
   122e0:	bl	144ec <__assert_fail@plt+0x2de8>
   122e4:	subs	r4, r0, #0
   122e8:	beq	12320 <__assert_fail@plt+0xc1c>
   122ec:	mov	ip, #0
   122f0:	mov	r2, r5
   122f4:	mov	r0, ip
   122f8:	mov	r3, ip
   122fc:	mov	r1, r4
   12300:	str	ip, [sp]
   12304:	str	ip, [sp, #4]
   12308:	str	ip, [sp, #8]
   1230c:	str	ip, [sp, #12]
   12310:	str	ip, [sp, #16]
   12314:	bl	13410 <__assert_fail@plt+0x1d0c>
   12318:	mov	r0, r4
   1231c:	bl	15214 <__assert_fail@plt+0x3b10>
   12320:	ldr	r2, [sp, #32]
   12324:	ldr	r3, [sp, #56]	; 0x38
   12328:	cmp	r3, r2
   1232c:	ldr	r3, [sp, #40]	; 0x28
   12330:	add	r3, r3, #1
   12334:	str	r3, [sp, #40]	; 0x28
   12338:	bne	11eec <__assert_fail@plt+0x7e8>
   1233c:	ldr	sl, [sp, #36]	; 0x24
   12340:	ldrb	r3, [sl, #52]	; 0x34
   12344:	cmp	r3, #0
   12348:	bne	12a08 <__assert_fail@plt+0x1304>
   1234c:	ldr	r4, [sl, #48]	; 0x30
   12350:	cmp	r4, #0
   12354:	beq	129e4 <__assert_fail@plt+0x12e0>
   12358:	ldr	r0, [sl, #48]	; 0x30
   1235c:	bl	11530 <exit@plt>
   12360:	mov	fp, #1
   12364:	b	12074 <__assert_fail@plt+0x970>
   12368:	mov	r1, r5
   1236c:	add	r2, sp, #80	; 0x50
   12370:	str	r3, [sp, #64]	; 0x40
   12374:	mov	r0, #3
   12378:	bl	116bc <__xstat64@plt>
   1237c:	cmp	r0, #0
   12380:	ldr	r3, [sp, #64]	; 0x40
   12384:	beq	12394 <__assert_fail@plt+0xc90>
   12388:	tst	r8, sl
   1238c:	beq	12440 <__assert_fail@plt+0xd3c>
   12390:	mov	fp, #0
   12394:	cmp	r3, #1
   12398:	beq	12530 <__assert_fail@plt+0xe2c>
   1239c:	str	r3, [sp, #48]	; 0x30
   123a0:	str	r6, [sp, #60]	; 0x3c
   123a4:	str	fp, [sp, #28]
   123a8:	mov	fp, #0
   123ac:	b	12074 <__assert_fail@plt+0x970>
   123b0:	add	r2, sp, #80	; 0x50
   123b4:	mov	r0, #3
   123b8:	ldr	r1, [r5, #4]
   123bc:	bl	116bc <__xstat64@plt>
   123c0:	cmp	r0, #0
   123c4:	ldrdeq	r0, [sp, #80]	; 0x50
   123c8:	strdeq	r0, [r5, #16]
   123cc:	beq	12114 <__assert_fail@plt+0xa10>
   123d0:	bl	1156c <__errno_location@plt>
   123d4:	ldr	r6, [r0]
   123d8:	cmp	r6, #5
   123dc:	beq	125c4 <__assert_fail@plt+0xec0>
   123e0:	mvn	r0, #1
   123e4:	mvn	r1, #0
   123e8:	mov	r2, r0
   123ec:	mov	r3, r1
   123f0:	strd	r2, [r5, #16]
   123f4:	b	12114 <__assert_fail@plt+0xa10>
   123f8:	cmp	r4, #0
   123fc:	beq	122d4 <__assert_fail@plt+0xbd0>
   12400:	mov	r1, #0
   12404:	ldr	r3, [sp, #44]	; 0x2c
   12408:	str	r1, [sp, #12]
   1240c:	str	r1, [sp, #16]
   12410:	ldrb	r1, [r4, #24]
   12414:	mov	r2, r3
   12418:	ubfx	r1, r1, #1, #1
   1241c:	str	r1, [sp, #8]
   12420:	ldrb	r1, [r4, #24]
   12424:	and	r1, r1, #1
   12428:	str	r1, [sp, #4]
   1242c:	ldr	r1, [r4, #12]
   12430:	str	r1, [sp]
   12434:	ldrd	r0, [r4]
   12438:	bl	13410 <__assert_fail@plt+0x1d0c>
   1243c:	b	12320 <__assert_fail@plt+0xc1c>
   12440:	ldr	fp, [sp, #28]
   12444:	b	123a4 <__assert_fail@plt+0xca0>
   12448:	bl	1153c <strlen@plt>
   1244c:	ldr	r3, [sp, #36]	; 0x24
   12450:	ldr	r5, [r3, #116]	; 0x74
   12454:	cmp	r5, #0
   12458:	beq	120d0 <__assert_fail@plt+0x9cc>
   1245c:	mov	r9, #0
   12460:	movw	r7, #60384	; 0xebe0
   12464:	movt	r7, #1
   12468:	mov	r4, r9
   1246c:	str	fp, [sp, #28]
   12470:	mov	sl, r0
   12474:	mov	r1, r7
   12478:	ldr	r0, [r5, #12]
   1247c:	bl	11320 <strcmp@plt>
   12480:	cmp	r0, #0
   12484:	beq	124e0 <__assert_fail@plt+0xddc>
   12488:	cmp	r4, #0
   1248c:	beq	124a8 <__assert_fail@plt+0xda4>
   12490:	ldrb	r3, [r4, #24]
   12494:	tst	r3, #1
   12498:	bne	124a8 <__assert_fail@plt+0xda4>
   1249c:	ldrb	r3, [r5, #24]
   124a0:	tst	r3, #1
   124a4:	bne	124e0 <__assert_fail@plt+0xddc>
   124a8:	ldr	fp, [r5, #4]
   124ac:	mov	r0, fp
   124b0:	bl	1153c <strlen@plt>
   124b4:	cmp	r0, r9
   124b8:	cmpcs	sl, r0
   124bc:	mov	r8, r0
   124c0:	bcc	124e0 <__assert_fail@plt+0xddc>
   124c4:	cmp	r0, #1
   124c8:	beq	125b8 <__assert_fail@plt+0xeb4>
   124cc:	cmp	sl, r0
   124d0:	beq	12598 <__assert_fail@plt+0xe94>
   124d4:	ldrb	r2, [r6, r0]
   124d8:	cmp	r2, #47	; 0x2f
   124dc:	beq	12598 <__assert_fail@plt+0xe94>
   124e0:	ldr	r5, [r5, #28]
   124e4:	cmp	r5, #0
   124e8:	bne	12474 <__assert_fail@plt+0xd70>
   124ec:	mov	r0, r6
   124f0:	ldr	fp, [sp, #28]
   124f4:	bl	15214 <__assert_fail@plt+0x3b10>
   124f8:	cmp	r4, #0
   124fc:	beq	120d8 <__assert_fail@plt+0x9d4>
   12500:	add	r2, sp, #80	; 0x50
   12504:	mov	r0, #3
   12508:	ldr	r1, [r4, #4]
   1250c:	bl	116bc <__xstat64@plt>
   12510:	cmp	r0, #0
   12514:	bne	120d8 <__assert_fail@plt+0x9d4>
   12518:	ldrd	r2, [fp]
   1251c:	ldrd	r0, [sp, #80]	; 0x50
   12520:	cmp	r1, r3
   12524:	cmpeq	r0, r2
   12528:	bne	120d8 <__assert_fail@plt+0x9d4>
   1252c:	b	12400 <__assert_fail@plt+0xcfc>
   12530:	mov	r0, r4
   12534:	str	r6, [sp, #60]	; 0x3c
   12538:	bl	15214 <__assert_fail@plt+0x3b10>
   1253c:	mov	r0, r7
   12540:	bl	15214 <__assert_fail@plt+0x3b10>
   12544:	ldr	r0, [sp, #72]	; 0x48
   12548:	bl	15214 <__assert_fail@plt+0x3b10>
   1254c:	mov	r1, #0
   12550:	ldr	r2, [sp, #44]	; 0x2c
   12554:	mov	r3, r1
   12558:	ldr	r0, [sp, #60]	; 0x3c
   1255c:	str	r1, [sp, #12]
   12560:	str	r1, [sp, #16]
   12564:	ldrb	r1, [r0, #24]
   12568:	ubfx	r1, r1, #1, #1
   1256c:	str	r1, [sp, #8]
   12570:	ldrb	r1, [r0, #24]
   12574:	and	r1, r1, #1
   12578:	str	r1, [sp, #4]
   1257c:	ldr	r1, [r0, #12]
   12580:	str	r1, [sp]
   12584:	mov	r1, r0
   12588:	ldr	r0, [r0]
   1258c:	ldr	r1, [r1, #4]
   12590:	bl	13410 <__assert_fail@plt+0x1d0c>
   12594:	b	12320 <__assert_fail@plt+0xc1c>
   12598:	mov	r0, fp
   1259c:	mov	r2, r8
   125a0:	mov	r1, r6
   125a4:	bl	116d4 <strncmp@plt>
   125a8:	cmp	r0, #0
   125ac:	moveq	r9, r8
   125b0:	moveq	r4, r5
   125b4:	b	124e0 <__assert_fail@plt+0xddc>
   125b8:	mov	r9, r0
   125bc:	mov	r4, r5
   125c0:	b	124e0 <__assert_fail@plt+0xddc>
   125c4:	mov	r1, #3
   125c8:	mov	r0, #0
   125cc:	ldr	r2, [r5, #4]
   125d0:	bl	1a50c <__assert_fail@plt+0x8e08>
   125d4:	mov	r3, r0
   125d8:	mov	r1, r6
   125dc:	movw	r2, #61060	; 0xee84
   125e0:	movt	r2, #1
   125e4:	mov	r0, #0
   125e8:	bl	11494 <error@plt>
   125ec:	ldr	r2, [sp, #36]	; 0x24
   125f0:	mov	r3, #1
   125f4:	str	r3, [r2, #48]	; 0x30
   125f8:	b	123e0 <__assert_fail@plt+0xcdc>
   125fc:	ldr	r5, [sp, #60]	; 0x3c
   12600:	mov	r2, #5
   12604:	movw	r1, #60332	; 0xebac
   12608:	movt	r1, #1
   1260c:	mov	r0, r5
   12610:	bl	113bc <dcgettext@plt>
   12614:	mov	r4, r0
   12618:	mov	r0, #4
   1261c:	ldr	r1, [sp, #44]	; 0x2c
   12620:	bl	1a430 <__assert_fail@plt+0x8d2c>
   12624:	mov	r3, r0
   12628:	mov	r2, r4
   1262c:	mov	r1, r5
   12630:	mov	r0, r5
   12634:	bl	11494 <error@plt>
   12638:	ldr	r2, [sp, #36]	; 0x24
   1263c:	mov	r3, #1
   12640:	str	r3, [r2, #48]	; 0x30
   12644:	b	12320 <__assert_fail@plt+0xc1c>
   12648:	ldrb	r6, [sl, #45]	; 0x2d
   1264c:	ldr	r0, [sp, #52]	; 0x34
   12650:	ldr	r4, [sl, #116]	; 0x74
   12654:	b	12660 <__assert_fail@plt+0xf5c>
   12658:	ldr	r4, [r4, #28]
   1265c:	add	r0, r0, #1
   12660:	cmp	r4, #0
   12664:	bne	12658 <__assert_fail@plt+0xf54>
   12668:	movw	r1, #11896	; 0x2e78
   1266c:	movt	r1, #1
   12670:	movw	r3, #11620	; 0x2d64
   12674:	movt	r3, #1
   12678:	movw	r2, #11580	; 0x2d3c
   1267c:	movt	r2, #1
   12680:	str	r1, [sp]
   12684:	mov	r1, r4
   12688:	bl	15e20 <__assert_fail@plt+0x471c>
   1268c:	cmp	r0, #0
   12690:	str	r0, [sl, #40]	; 0x28
   12694:	ldrne	r9, [sl, #116]	; 0x74
   12698:	bne	126f4 <__assert_fail@plt+0xff0>
   1269c:	b	129b4 <__assert_fail@plt+0x12b0>
   126a0:	andeq	sp, r1, r4, lsl lr
   126a4:	andeq	r0, r3, r0, ror #6
   126a8:	andeq	r0, r3, r8, ror r3
   126ac:	andeq	sp, r1, r4, lsr #30
   126b0:	ldrd	r2, [r9, #16]
   126b4:	strd	r2, [sp, #80]	; 0x50
   126b8:	mov	r0, #24
   126bc:	bl	1aef8 <__assert_fail@plt+0x97f4>
   126c0:	ldrd	r2, [sp, #80]	; 0x50
   126c4:	mov	r5, r0
   126c8:	mov	r1, r0
   126cc:	ldr	r0, [sl, #40]	; 0x28
   126d0:	strd	r2, [r5]
   126d4:	str	r9, [r5, #8]
   126d8:	str	r4, [r5, #12]
   126dc:	bl	16478 <__assert_fail@plt+0x4d74>
   126e0:	cmp	r0, #0
   126e4:	beq	129b4 <__assert_fail@plt+0x12b0>
   126e8:	mov	r4, r5
   126ec:	ldr	r9, [r9, #28]
   126f0:	str	r5, [r0, #16]
   126f4:	cmp	r9, #0
   126f8:	beq	128a8 <__assert_fail@plt+0x11a4>
   126fc:	ldrb	r3, [r9, #24]
   12700:	tst	r3, #2
   12704:	beq	12714 <__assert_fail@plt+0x1010>
   12708:	ldrb	r2, [sl, #44]	; 0x2c
   1270c:	cmp	r2, #0
   12710:	bne	126b0 <__assert_fail@plt+0xfac>
   12714:	tst	r3, #1
   12718:	beq	12734 <__assert_fail@plt+0x1030>
   1271c:	ldrb	r3, [sl, #45]	; 0x2d
   12720:	cmp	r3, #0
   12724:	bne	12734 <__assert_fail@plt+0x1030>
   12728:	ldrb	r3, [sl, #46]	; 0x2e
   1272c:	cmp	r3, #0
   12730:	beq	126b0 <__assert_fail@plt+0xfac>
   12734:	ldr	r5, [r9, #12]
   12738:	mov	r0, r5
   1273c:	bl	12d8c <__assert_fail@plt+0x1688>
   12740:	cmp	r0, #0
   12744:	beq	126b0 <__assert_fail@plt+0xfac>
   12748:	mov	r0, r5
   1274c:	bl	12e00 <__assert_fail@plt+0x16fc>
   12750:	cmp	r0, #0
   12754:	bne	126b0 <__assert_fail@plt+0xfac>
   12758:	add	r2, sp, #80	; 0x50
   1275c:	mov	r0, #3
   12760:	ldr	r1, [r9, #4]
   12764:	bl	116bc <__xstat64@plt>
   12768:	cmn	r0, #1
   1276c:	beq	126b0 <__assert_fail@plt+0xfac>
   12770:	ldrd	r0, [sp, #80]	; 0x50
   12774:	bl	1321c <__assert_fail@plt+0x1b18>
   12778:	subs	r3, r0, #0
   1277c:	str	r3, [sp, #28]
   12780:	beq	126b8 <__assert_fail@plt+0xfb4>
   12784:	ldr	r7, [r3, #8]
   12788:	ldr	r0, [r7, #8]
   1278c:	cmp	r0, #0
   12790:	moveq	r5, r0
   12794:	beq	127c0 <__assert_fail@plt+0x10bc>
   12798:	ldr	r5, [r9, #8]
   1279c:	cmp	r5, #0
   127a0:	beq	127c0 <__assert_fail@plt+0x10bc>
   127a4:	bl	1153c <strlen@plt>
   127a8:	mov	r8, r0
   127ac:	mov	r0, r5
   127b0:	bl	1153c <strlen@plt>
   127b4:	cmp	r8, r0
   127b8:	movcs	r5, #0
   127bc:	movcc	r5, #1
   127c0:	ldrb	r3, [sl, #53]	; 0x35
   127c4:	ldr	r8, [r9]
   127c8:	cmp	r3, #0
   127cc:	bne	127fc <__assert_fail@plt+0x10f8>
   127d0:	ldrb	r3, [r9, #24]
   127d4:	tst	r3, #2
   127d8:	beq	127fc <__assert_fail@plt+0x10f8>
   127dc:	ldrb	r3, [r7, #24]
   127e0:	tst	r3, #2
   127e4:	beq	127fc <__assert_fail@plt+0x10f8>
   127e8:	mov	r1, r8
   127ec:	ldr	r0, [r7]
   127f0:	bl	11320 <strcmp@plt>
   127f4:	cmp	r0, #0
   127f8:	bne	126b8 <__assert_fail@plt+0xfb4>
   127fc:	mov	r1, #47	; 0x2f
   12800:	mov	r0, r8
   12804:	bl	11548 <strchr@plt>
   12808:	cmp	r0, #0
   1280c:	beq	12824 <__assert_fail@plt+0x1120>
   12810:	mov	r1, #47	; 0x2f
   12814:	ldr	r0, [r7]
   12818:	bl	11548 <strchr@plt>
   1281c:	cmp	r0, #0
   12820:	beq	12970 <__assert_fail@plt+0x126c>
   12824:	ldr	r3, [r7, #4]
   12828:	eor	r5, r5, #1
   1282c:	mov	r0, r3
   12830:	str	r3, [sp, #32]
   12834:	bl	1153c <strlen@plt>
   12838:	ldr	fp, [r9, #4]
   1283c:	mov	r3, r0
   12840:	str	r3, [sp, #36]	; 0x24
   12844:	mov	r0, fp
   12848:	bl	1153c <strlen@plt>
   1284c:	ldr	r3, [sp, #36]	; 0x24
   12850:	cmp	r3, r0
   12854:	movls	r5, #0
   12858:	andhi	r5, r5, #1
   1285c:	cmp	r5, #0
   12860:	bne	12970 <__assert_fail@plt+0x126c>
   12864:	mov	r1, r8
   12868:	ldr	r0, [r7]
   1286c:	bl	11320 <strcmp@plt>
   12870:	cmp	r0, #0
   12874:	beq	1288c <__assert_fail@plt+0x1188>
   12878:	mov	r0, fp
   1287c:	ldr	r1, [sp, #32]
   12880:	bl	11320 <strcmp@plt>
   12884:	cmp	r0, #0
   12888:	beq	12970 <__assert_fail@plt+0x126c>
   1288c:	mov	r7, r9
   12890:	cmp	r6, #0
   12894:	ldr	r9, [r9, #28]
   12898:	bne	126f4 <__assert_fail@plt+0xff0>
   1289c:	mov	r0, r7
   128a0:	bl	17a8c <__assert_fail@plt+0x6388>
   128a4:	b	126f4 <__assert_fail@plt+0xff0>
   128a8:	cmp	r6, #0
   128ac:	streq	r6, [sl, #116]	; 0x74
   128b0:	beq	12920 <__assert_fail@plt+0x121c>
   128b4:	mov	r6, #1
   128b8:	mov	r5, #0
   128bc:	ldr	r4, [sl, #116]	; 0x74
   128c0:	b	12900 <__assert_fail@plt+0x11fc>
   128c4:	str	r5, [sp, #12]
   128c8:	mov	r3, #0
   128cc:	str	r6, [sp, #16]
   128d0:	mov	r2, r3
   128d4:	ldrb	r1, [r4, #24]
   128d8:	ubfx	r1, r1, #1, #1
   128dc:	str	r1, [sp, #8]
   128e0:	ldrb	r1, [r4, #24]
   128e4:	and	r1, r1, #1
   128e8:	str	r1, [sp, #4]
   128ec:	ldr	r1, [r4, #12]
   128f0:	str	r1, [sp]
   128f4:	ldrd	r0, [r4]
   128f8:	bl	13410 <__assert_fail@plt+0x1d0c>
   128fc:	ldr	r4, [r4, #28]
   12900:	cmp	r4, #0
   12904:	bne	128c4 <__assert_fail@plt+0x11c0>
   12908:	b	12340 <__assert_fail@plt+0xc3c>
   1290c:	ldr	r3, [r4, #8]
   12910:	mov	r6, #1
   12914:	ldr	r4, [r4, #12]
   12918:	str	r9, [r3, #28]
   1291c:	mov	r9, r3
   12920:	cmp	r4, #0
   12924:	bne	1290c <__assert_fail@plt+0x1208>
   12928:	cmp	r6, #0
   1292c:	ldr	r0, [sl, #40]	; 0x28
   12930:	strne	r9, [sl, #116]	; 0x74
   12934:	bl	16054 <__assert_fail@plt+0x4950>
   12938:	mov	r3, #0
   1293c:	str	r3, [sl, #40]	; 0x28
   12940:	b	128b4 <__assert_fail@plt+0x11b0>
   12944:	ldr	r0, [sp, #72]	; 0x48
   12948:	bl	15214 <__assert_fail@plt+0x3b10>
   1294c:	b	120b4 <__assert_fail@plt+0x9b0>
   12950:	mov	r1, #0
   12954:	mov	r0, #1
   12958:	bl	13278 <__assert_fail@plt+0x1b74>
   1295c:	b	121b4 <__assert_fail@plt+0xab0>
   12960:	movw	r0, #60232	; 0xeb48
   12964:	movt	r0, #1
   12968:	bl	14384 <__assert_fail@plt+0x2c80>
   1296c:	b	11ea4 <__assert_fail@plt+0x7a0>
   12970:	ldr	r3, [sp, #28]
   12974:	str	r9, [r3, #8]
   12978:	b	12890 <__assert_fail@plt+0x118c>
   1297c:	mov	r1, #0
   12980:	mov	r0, #1
   12984:	bl	13278 <__assert_fail@plt+0x1b74>
   12988:	b	12210 <__assert_fail@plt+0xb0c>
   1298c:	mov	r1, #0
   12990:	mov	r0, #1
   12994:	bl	13278 <__assert_fail@plt+0x1b74>
   12998:	b	1225c <__assert_fail@plt+0xb58>
   1299c:	mov	r1, #0
   129a0:	mov	r0, #1
   129a4:	bl	13278 <__assert_fail@plt+0x1b74>
   129a8:	b	122b4 <__assert_fail@plt+0xbb0>
   129ac:	mov	r0, #0
   129b0:	bl	13f64 <__assert_fail@plt+0x2860>
   129b4:	bl	1b370 <__assert_fail@plt+0x9c6c>
   129b8:	movw	ip, #60008	; 0xea68
   129bc:	movt	ip, #1
   129c0:	ldr	r2, [sp, #28]
   129c4:	mov	r1, #0
   129c8:	movw	r3, #60020	; 0xea74
   129cc:	movt	r3, #1
   129d0:	mov	r0, r1
   129d4:	str	ip, [sp]
   129d8:	bl	11494 <error@plt>
   129dc:	mov	r0, #1
   129e0:	bl	13f64 <__assert_fail@plt+0x2860>
   129e4:	mov	r2, #5
   129e8:	movw	r1, #60392	; 0xebe8
   129ec:	movt	r1, #1
   129f0:	mov	r0, r4
   129f4:	bl	113bc <dcgettext@plt>
   129f8:	mov	r2, r0
   129fc:	mov	r1, r4
   12a00:	mov	r0, #1
   12a04:	bl	11494 <error@plt>
   12a08:	ldrb	r3, [sl, #53]	; 0x35
   12a0c:	cmp	r3, #0
   12a10:	beq	12a60 <__assert_fail@plt+0x135c>
   12a14:	movw	r3, #380	; 0x17c
   12a18:	movt	r3, #3
   12a1c:	ldr	ip, [pc, #-892]	; 126a8 <__assert_fail@plt+0xfa4>
   12a20:	movw	r2, #57184	; 0xdf60
   12a24:	movt	r2, #1
   12a28:	ldrb	r1, [r3, #28]
   12a2c:	mov	r3, #0
   12a30:	movw	r0, #59908	; 0xea04
   12a34:	movt	r0, #1
   12a38:	str	r3, [sp]
   12a3c:	str	r3, [sp, #4]
   12a40:	str	r3, [sp, #8]
   12a44:	cmp	r1, r3
   12a48:	str	ip, [sp, #12]
   12a4c:	movne	r1, r2
   12a50:	moveq	r1, r0
   12a54:	str	r3, [sp, #16]
   12a58:	mov	r2, r3
   12a5c:	bl	13410 <__assert_fail@plt+0x1d0c>
   12a60:	movw	r5, #820	; 0x334
   12a64:	movt	r5, #3
   12a68:	mov	r6, #0
   12a6c:	mov	r8, #32
   12a70:	ldr	r3, [sl, #8]
   12a74:	cmp	r6, r3
   12a78:	bcs	12358 <__assert_fail@plt+0xc54>
   12a7c:	lsl	r7, r6, #2
   12a80:	mov	r4, #0
   12a84:	b	12b1c <__assert_fail@plt+0x1418>
   12a88:	ldr	r3, [sl, #12]
   12a8c:	cmp	r4, #0
   12a90:	lsl	r9, r4, #2
   12a94:	ldr	r3, [r3, r7]
   12a98:	ldr	fp, [r3, r4, lsl #2]
   12a9c:	beq	12ac0 <__assert_fail@plt+0x13bc>
   12aa0:	ldr	r0, [r5]
   12aa4:	ldr	r3, [r0, #20]
   12aa8:	ldr	r2, [r0, #24]
   12aac:	cmp	r3, r2
   12ab0:	addcc	r2, r3, #1
   12ab4:	strcc	r2, [r0, #20]
   12ab8:	strbcc	r8, [r3]
   12abc:	bcs	12b54 <__assert_fail@plt+0x1450>
   12ac0:	ldr	r3, [sl, #16]
   12ac4:	mov	r0, fp
   12ac8:	add	r1, sp, #80	; 0x50
   12acc:	ldr	r2, [sl, #20]
   12ad0:	sub	r3, r3, #1
   12ad4:	cmp	r4, r3
   12ad8:	add	r4, r4, #1
   12adc:	ldr	r2, [r2, r9]
   12ae0:	moveq	r3, #8
   12ae4:	movne	r3, #0
   12ae8:	ldr	ip, [r2, #16]
   12aec:	ldr	r2, [r2, #20]
   12af0:	str	ip, [sp, #80]	; 0x50
   12af4:	bl	17710 <__assert_fail@plt+0x600c>
   12af8:	subs	fp, r0, #0
   12afc:	ldr	r1, [r5]
   12b00:	movne	r0, fp
   12b04:	ldreq	r3, [sl, #12]
   12b08:	ldreq	r3, [r3, r7]
   12b0c:	ldreq	r0, [r3, r9]
   12b10:	bl	112f0 <fputs_unlocked@plt>
   12b14:	mov	r0, fp
   12b18:	bl	15214 <__assert_fail@plt+0x3b10>
   12b1c:	ldr	r3, [sl, #16]
   12b20:	cmp	r4, r3
   12b24:	bcc	12a88 <__assert_fail@plt+0x1384>
   12b28:	ldr	r0, [r5]
   12b2c:	ldr	r3, [r0, #20]
   12b30:	ldr	r2, [r0, #24]
   12b34:	cmp	r3, r2
   12b38:	addcc	r1, r3, #1
   12b3c:	movcc	r2, #10
   12b40:	strcc	r1, [r0, #20]
   12b44:	strbcc	r2, [r3]
   12b48:	bcs	12b60 <__assert_fail@plt+0x145c>
   12b4c:	add	r6, r6, #1
   12b50:	b	12a70 <__assert_fail@plt+0x136c>
   12b54:	mov	r1, #32
   12b58:	bl	11608 <__overflow@plt>
   12b5c:	b	12ac0 <__assert_fail@plt+0x13bc>
   12b60:	mov	r1, #10
   12b64:	bl	11608 <__overflow@plt>
   12b68:	b	12b4c <__assert_fail@plt+0x1448>
   12b6c:	movw	r0, #60008	; 0xea68
   12b70:	movt	r0, #1
   12b74:	ldr	r2, [sp, #28]
   12b78:	mov	r1, r3
   12b7c:	movw	r3, #60020	; 0xea74
   12b80:	movt	r3, #1
   12b84:	str	r0, [sp]
   12b88:	mov	r0, r1
   12b8c:	bl	11494 <error@plt>
   12b90:	mov	r0, #1
   12b94:	bl	13f64 <__assert_fail@plt+0x2860>
   12b98:	movw	ip, #60008	; 0xea68
   12b9c:	movt	ip, #1
   12ba0:	ldr	r2, [sp, #28]
   12ba4:	mov	r1, #0
   12ba8:	movw	r3, #60024	; 0xea78
   12bac:	movt	r3, #1
   12bb0:	mov	r0, r1
   12bb4:	str	ip, [sp]
   12bb8:	bl	11494 <error@plt>
   12bbc:	mov	r0, #1
   12bc0:	bl	13f64 <__assert_fail@plt+0x2860>
   12bc4:	movw	ip, #60008	; 0xea68
   12bc8:	movt	ip, #1
   12bcc:	ldr	r2, [sp, #28]
   12bd0:	mov	r1, #0
   12bd4:	movw	r3, #60004	; 0xea64
   12bd8:	movt	r3, #1
   12bdc:	mov	r0, r1
   12be0:	str	ip, [sp]
   12be4:	bl	11494 <error@plt>
   12be8:	mov	r0, #1
   12bec:	bl	13f64 <__assert_fail@plt+0x2860>
   12bf0:	movw	r1, #57156	; 0xdf44
   12bf4:	movt	r1, #1
   12bf8:	ldr	r3, [pc, #-1364]	; 126ac <__assert_fail@plt+0xfa8>
   12bfc:	movw	r0, #60308	; 0xeb94
   12c00:	movt	r0, #1
   12c04:	movw	r2, #565	; 0x235
   12c08:	bl	11704 <__assert_fail@plt>
   12c0c:	mov	fp, #0
   12c10:	mov	lr, #0
   12c14:	pop	{r1}		; (ldr r1, [sp], #4)
   12c18:	mov	r2, sp
   12c1c:	push	{r2}		; (str r2, [sp, #-4]!)
   12c20:	push	{r0}		; (str r0, [sp, #-4]!)
   12c24:	ldr	ip, [pc, #16]	; 12c3c <__assert_fail@plt+0x1538>
   12c28:	push	{ip}		; (str ip, [sp, #-4]!)
   12c2c:	ldr	r0, [pc, #12]	; 12c40 <__assert_fail@plt+0x153c>
   12c30:	ldr	r3, [pc, #12]	; 12c44 <__assert_fail@plt+0x1540>
   12c34:	bl	114dc <__libc_start_main@plt>
   12c38:	bl	116e0 <abort@plt>
   12c3c:	andeq	sp, r1, r0, lsr #27
   12c40:	andeq	r1, r1, r0, lsl r7
   12c44:	andeq	sp, r1, r0, asr #26
   12c48:	ldr	r3, [pc, #20]	; 12c64 <__assert_fail@plt+0x1560>
   12c4c:	ldr	r2, [pc, #20]	; 12c68 <__assert_fail@plt+0x1564>
   12c50:	add	r3, pc, r3
   12c54:	ldr	r2, [r3, r2]
   12c58:	cmp	r2, #0
   12c5c:	bxeq	lr
   12c60:	b	114f4 <__gmon_start__@plt>
   12c64:	andeq	sp, r1, r8, lsr #7
   12c68:	andeq	r0, r0, r0, ror r1
   12c6c:	ldr	r0, [pc, #24]	; 12c8c <__assert_fail@plt+0x1588>
   12c70:	ldr	r3, [pc, #24]	; 12c90 <__assert_fail@plt+0x158c>
   12c74:	cmp	r3, r0
   12c78:	bxeq	lr
   12c7c:	ldr	r3, [pc, #16]	; 12c94 <__assert_fail@plt+0x1590>
   12c80:	cmp	r3, #0
   12c84:	bxeq	lr
   12c88:	bx	r3
   12c8c:	andeq	r0, r3, r0, lsr #6
   12c90:	andeq	r0, r3, r0, lsr #6
   12c94:	andeq	r0, r0, r0
   12c98:	ldr	r0, [pc, #36]	; 12cc4 <__assert_fail@plt+0x15c0>
   12c9c:	ldr	r1, [pc, #36]	; 12cc8 <__assert_fail@plt+0x15c4>
   12ca0:	sub	r1, r1, r0
   12ca4:	asr	r1, r1, #2
   12ca8:	add	r1, r1, r1, lsr #31
   12cac:	asrs	r1, r1, #1
   12cb0:	bxeq	lr
   12cb4:	ldr	r3, [pc, #16]	; 12ccc <__assert_fail@plt+0x15c8>
   12cb8:	cmp	r3, #0
   12cbc:	bxeq	lr
   12cc0:	bx	r3
   12cc4:	andeq	r0, r3, r0, lsr #6
   12cc8:	andeq	r0, r3, r0, lsr #6
   12ccc:	andeq	r0, r0, r0
   12cd0:	push	{r4, lr}
   12cd4:	ldr	r4, [pc, #24]	; 12cf4 <__assert_fail@plt+0x15f0>
   12cd8:	ldrb	r3, [r4]
   12cdc:	cmp	r3, #0
   12ce0:	popne	{r4, pc}
   12ce4:	bl	12c6c <__assert_fail@plt+0x1568>
   12ce8:	mov	r3, #1
   12cec:	strb	r3, [r4]
   12cf0:	pop	{r4, pc}
   12cf4:	andeq	r0, r3, ip, lsr r3
   12cf8:	b	12c98 <__assert_fail@plt+0x1594>
   12cfc:	andeq	r0, r0, r0
   12d00:	ldrb	r3, [r0]
   12d04:	cmp	r3, #0
   12d08:	beq	12d38 <__assert_fail@plt+0x1634>
   12d0c:	mov	r2, #63	; 0x3f
   12d10:	cmp	r3, #0
   12d14:	beq	12d2c <__assert_fail@plt+0x1628>
   12d18:	cmp	r3, #31
   12d1c:	bls	12d28 <__assert_fail@plt+0x1624>
   12d20:	cmp	r3, #127	; 0x7f
   12d24:	bne	12d2c <__assert_fail@plt+0x1628>
   12d28:	strb	r2, [r0]
   12d2c:	ldrb	r3, [r0, #1]!
   12d30:	cmp	r3, #0
   12d34:	bne	12d10 <__assert_fail@plt+0x160c>
   12d38:	bx	lr
   12d3c:	mov	r2, r1
   12d40:	mov	r3, #0
   12d44:	str	r4, [sp, #-8]!
   12d48:	ldrd	r0, [r0]
   12d4c:	str	lr, [sp, #4]
   12d50:	bl	1db88 <__assert_fail@plt+0xc484>
   12d54:	ldr	r4, [sp]
   12d58:	add	sp, sp, #4
   12d5c:	mov	r0, r2
   12d60:	pop	{pc}		; (ldr pc, [sp], #4)
   12d64:	strd	r4, [sp, #-8]!
   12d68:	ldrd	r2, [r1]
   12d6c:	ldrd	r4, [r0]
   12d70:	cmp	r5, r3
   12d74:	cmpeq	r4, r2
   12d78:	ldrd	r4, [sp]
   12d7c:	add	sp, sp, #8
   12d80:	moveq	r0, #1
   12d84:	movne	r0, #0
   12d88:	bx	lr
   12d8c:	movw	r3, #832	; 0x340
   12d90:	movt	r3, #3
   12d94:	strd	r4, [sp, #-16]!
   12d98:	ldr	r4, [r3]
   12d9c:	clz	r3, r0
   12da0:	lsr	r3, r3, #5
   12da4:	str	r6, [sp, #8]
   12da8:	str	lr, [sp, #12]
   12dac:	cmp	r4, #0
   12db0:	movne	r5, r3
   12db4:	moveq	r5, #1
   12db8:	cmp	r5, #0
   12dbc:	bne	12de4 <__assert_fail@plt+0x16e0>
   12dc0:	mov	r6, r0
   12dc4:	mov	r0, r6
   12dc8:	ldr	r1, [r4]
   12dcc:	bl	11320 <strcmp@plt>
   12dd0:	cmp	r0, #0
   12dd4:	beq	12df8 <__assert_fail@plt+0x16f4>
   12dd8:	ldr	r4, [r4, #4]
   12ddc:	cmp	r4, #0
   12de0:	bne	12dc4 <__assert_fail@plt+0x16c0>
   12de4:	mov	r0, r5
   12de8:	ldrd	r4, [sp]
   12dec:	ldr	r6, [sp, #8]
   12df0:	add	sp, sp, #12
   12df4:	pop	{pc}		; (ldr pc, [sp], #4)
   12df8:	mov	r5, #1
   12dfc:	b	12de4 <__assert_fail@plt+0x16e0>
   12e00:	movw	r3, #832	; 0x340
   12e04:	movt	r3, #3
   12e08:	strd	r4, [sp, #-16]!
   12e0c:	ldr	r4, [r3, #4]
   12e10:	clz	r3, r0
   12e14:	lsr	r3, r3, #5
   12e18:	str	r6, [sp, #8]
   12e1c:	str	lr, [sp, #12]
   12e20:	cmp	r4, #0
   12e24:	movne	r5, r3
   12e28:	moveq	r5, #1
   12e2c:	cmp	r5, #0
   12e30:	movne	r5, #0
   12e34:	bne	12e5c <__assert_fail@plt+0x1758>
   12e38:	mov	r6, r0
   12e3c:	mov	r0, r6
   12e40:	ldr	r1, [r4]
   12e44:	bl	11320 <strcmp@plt>
   12e48:	cmp	r0, #0
   12e4c:	beq	12e70 <__assert_fail@plt+0x176c>
   12e50:	ldr	r4, [r4, #4]
   12e54:	cmp	r4, #0
   12e58:	bne	12e3c <__assert_fail@plt+0x1738>
   12e5c:	mov	r0, r5
   12e60:	ldrd	r4, [sp]
   12e64:	ldr	r6, [sp, #8]
   12e68:	add	sp, sp, #12
   12e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e70:	mov	r5, #1
   12e74:	b	12e5c <__assert_fail@plt+0x1758>
   12e78:	b	15214 <__assert_fail@plt+0x3b10>
   12e7c:	strd	r4, [sp, #-16]!
   12e80:	movw	r4, #832	; 0x340
   12e84:	movt	r4, #3
   12e88:	ldr	r3, [r4, #8]
   12e8c:	mov	r2, #4
   12e90:	ldr	r0, [r4, #12]
   12e94:	str	r6, [sp, #8]
   12e98:	str	lr, [sp, #12]
   12e9c:	add	r3, r3, #1
   12ea0:	mov	r1, r3
   12ea4:	str	r3, [r4, #8]
   12ea8:	bl	1afdc <__assert_fail@plt+0x98d8>
   12eac:	ldr	r3, [r4, #8]
   12eb0:	mov	r5, r0
   12eb4:	mov	r1, #4
   12eb8:	str	r5, [r4, #12]
   12ebc:	ldr	r0, [r4, #16]
   12ec0:	sub	r4, r3, #-1073741823	; 0xc0000001
   12ec4:	bl	1b060 <__assert_fail@plt+0x995c>
   12ec8:	str	r0, [r5, r4, lsl #2]
   12ecc:	ldrd	r4, [sp]
   12ed0:	ldr	r6, [sp, #8]
   12ed4:	add	sp, sp, #12
   12ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   12edc:	strd	r4, [sp, #-16]!
   12ee0:	movw	r4, #380	; 0x17c
   12ee4:	movt	r4, #3
   12ee8:	ldr	r1, [r4]
   12eec:	mov	r5, r0
   12ef0:	str	r6, [sp, #8]
   12ef4:	str	lr, [sp, #12]
   12ef8:	cmp	r1, #0
   12efc:	blt	12f30 <__assert_fail@plt+0x182c>
   12f00:	movw	r2, #11520	; 0x2d00
   12f04:	movt	r2, #1
   12f08:	ldr	r6, [sp, #8]
   12f0c:	cmp	r1, #0
   12f10:	movw	r3, #13108	; 0x3334
   12f14:	movt	r3, #1
   12f18:	mov	r0, r5
   12f1c:	ldrd	r4, [sp]
   12f20:	moveq	r3, r2
   12f24:	ldr	lr, [sp, #12]
   12f28:	add	sp, sp, #16
   12f2c:	bx	r3
   12f30:	mov	r0, #1
   12f34:	bl	116c8 <isatty@plt>
   12f38:	mov	r1, r0
   12f3c:	str	r0, [r4]
   12f40:	b	12f00 <__assert_fail@plt+0x17fc>
   12f44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12f48:	strd	r6, [sp, #8]
   12f4c:	strd	r8, [sp, #16]
   12f50:	strd	sl, [sp, #24]
   12f54:	movw	sl, #832	; 0x340
   12f58:	movt	sl, #3
   12f5c:	str	lr, [sp, #32]
   12f60:	sub	sp, sp, #716	; 0x2cc
   12f64:	bl	12e7c <__assert_fail@plt+0x1778>
   12f68:	ldr	r3, [sl, #16]
   12f6c:	cmp	r3, #0
   12f70:	beq	131d8 <__assert_fail@plt+0x1ad4>
   12f74:	movw	r3, #57140	; 0xdf34
   12f78:	movt	r3, #1
   12f7c:	ldr	r6, [sl, #20]
   12f80:	mov	fp, #0
   12f84:	str	r3, [sp, #52]	; 0x34
   12f88:	b	12ff4 <__assert_fail@plt+0x18f0>
   12f8c:	mov	r0, r5
   12f90:	bl	113c8 <strdup@plt>
   12f94:	str	r0, [sp, #56]	; 0x38
   12f98:	cmp	r0, #0
   12f9c:	beq	1320c <__assert_fail@plt+0x1b08>
   12fa0:	bl	12edc <__assert_fail@plt+0x17d8>
   12fa4:	ldr	r3, [sl, #8]
   12fa8:	mov	r1, #0
   12fac:	add	fp, fp, #1
   12fb0:	ldr	r0, [sl, #12]
   12fb4:	ldr	r4, [sp, #24]
   12fb8:	sub	r3, r3, #-1073741823	; 0xc0000001
   12fbc:	ldr	r2, [sp, #56]	; 0x38
   12fc0:	ldr	r3, [r0, r3, lsl #2]
   12fc4:	mov	r0, r2
   12fc8:	str	r2, [r3, r4]
   12fcc:	bl	17998 <__assert_fail@plt+0x6294>
   12fd0:	ldr	r1, [sl, #16]
   12fd4:	ldr	r6, [sl, #20]
   12fd8:	ldr	r2, [r6, r4]
   12fdc:	ldr	r3, [r2, #16]
   12fe0:	cmp	r3, r0
   12fe4:	movcs	r0, r3
   12fe8:	cmp	r1, fp
   12fec:	str	r0, [r2, #16]
   12ff0:	bls	131d8 <__assert_fail@plt+0x1ad4>
   12ff4:	ldr	r3, [r6, fp, lsl #2]
   12ff8:	lsl	r1, fp, #2
   12ffc:	mov	r4, #0
   13000:	mov	r2, #5
   13004:	mov	r0, r4
   13008:	str	r1, [sp, #24]
   1300c:	str	r4, [sp, #56]	; 0x38
   13010:	ldr	r1, [r3, #12]
   13014:	bl	113bc <dcgettext@plt>
   13018:	ldr	r3, [r6, fp, lsl #2]
   1301c:	mov	r5, r0
   13020:	ldr	r3, [r3]
   13024:	cmp	r3, #2
   13028:	bne	12f8c <__assert_fail@plt+0x1888>
   1302c:	ldr	r3, [sl, #24]
   13030:	cmp	r3, r4
   13034:	beq	130a0 <__assert_fail@plt+0x199c>
   13038:	cmp	r3, #4
   1303c:	beq	13094 <__assert_fail@plt+0x1990>
   13040:	cmp	r3, #3
   13044:	bne	12f8c <__assert_fail@plt+0x1888>
   13048:	add	r2, sp, #60	; 0x3c
   1304c:	ldrd	r0, [sl, #32]
   13050:	bl	172ac <__assert_fail@plt+0x5ba8>
   13054:	mov	r6, r0
   13058:	mov	r2, #5
   1305c:	movw	r1, #57148	; 0xdf3c
   13060:	movt	r1, #1
   13064:	mov	r0, r4
   13068:	bl	113bc <dcgettext@plt>
   1306c:	mov	r2, r0
   13070:	mov	r3, r6
   13074:	str	r5, [sp]
   13078:	mov	r1, #1
   1307c:	add	r0, sp, #56	; 0x38
   13080:	bl	114b8 <__asprintf_chk@plt>
   13084:	cmn	r0, #1
   13088:	streq	r4, [sp, #56]	; 0x38
   1308c:	ldr	r0, [sp, #56]	; 0x38
   13090:	b	12f98 <__assert_fail@plt+0x1894>
   13094:	ldr	r3, [sl, #28]
   13098:	tst	r3, #16
   1309c:	bne	12f8c <__assert_fail@plt+0x1888>
   130a0:	ldr	r1, [sl, #28]
   130a4:	str	fp, [sp, #36]	; 0x24
   130a8:	ldr	r3, [sl, #32]
   130ac:	ldr	r2, [sl, #36]	; 0x24
   130b0:	mov	r4, r3
   130b4:	mov	r9, r3
   130b8:	str	r1, [sp, #48]	; 0x30
   130bc:	and	r1, r1, #292	; 0x124
   130c0:	str	r3, [sp, #28]
   130c4:	mov	r8, r2
   130c8:	mov	r7, r2
   130cc:	str	r2, [sp, #32]
   130d0:	str	sl, [sp, #40]	; 0x28
   130d4:	str	r1, [sp, #44]	; 0x2c
   130d8:	mov	r0, r9
   130dc:	mov	r1, r7
   130e0:	mov	r2, #1000	; 0x3e8
   130e4:	mov	r3, #0
   130e8:	bl	1db88 <__assert_fail@plt+0xc484>
   130ec:	mov	r6, r2
   130f0:	mov	r5, r3
   130f4:	mov	r0, r9
   130f8:	mov	r1, r7
   130fc:	mov	r2, #1000	; 0x3e8
   13100:	mov	r3, #0
   13104:	bl	1db88 <__assert_fail@plt+0xc484>
   13108:	ubfx	r3, r4, #0, #10
   1310c:	mov	fp, r5
   13110:	mov	r9, r0
   13114:	lsr	r4, r4, #10
   13118:	mov	r7, r1
   1311c:	orr	sl, r3, r6
   13120:	orrs	r2, sl, fp
   13124:	orr	r4, r4, r8, lsl #22
   13128:	lsr	r8, r8, #10
   1312c:	beq	130d8 <__assert_fail@plt+0x19d4>
   13130:	clz	r3, r3
   13134:	orrs	r2, r6, r5
   13138:	strd	sl, [sp, #16]
   1313c:	lsr	r3, r3, #5
   13140:	moveq	r2, #1
   13144:	movne	r2, #0
   13148:	ldr	fp, [sp, #36]	; 0x24
   1314c:	cmp	r2, r3
   13150:	ldr	sl, [sp, #40]	; 0x28
   13154:	bcs	131f4 <__assert_fail@plt+0x1af0>
   13158:	ldr	r3, [sp, #44]	; 0x2c
   1315c:	orr	r3, r3, #184	; 0xb8
   13160:	tst	r3, #32
   13164:	beq	13204 <__assert_fail@plt+0x1b00>
   13168:	mov	r4, #1
   1316c:	mov	r5, #0
   13170:	ldrd	r0, [sp, #28]
   13174:	add	r2, sp, #60	; 0x3c
   13178:	strd	r4, [sp]
   1317c:	strd	r4, [sp, #8]
   13180:	bl	166b0 <__assert_fail@plt+0x4fac>
   13184:	mov	r5, r0
   13188:	mov	r2, #5
   1318c:	ldr	r1, [sp, #52]	; 0x34
   13190:	mov	r0, #0
   13194:	bl	113bc <dcgettext@plt>
   13198:	mov	r4, r0
   1319c:	mov	r2, #5
   131a0:	movw	r1, #57148	; 0xdf3c
   131a4:	movt	r1, #1
   131a8:	mov	r0, #0
   131ac:	bl	113bc <dcgettext@plt>
   131b0:	mov	r2, r0
   131b4:	mov	r3, r5
   131b8:	str	r4, [sp]
   131bc:	mov	r1, #1
   131c0:	add	r0, sp, #56	; 0x38
   131c4:	bl	114b8 <__asprintf_chk@plt>
   131c8:	cmn	r0, #1
   131cc:	moveq	r3, #0
   131d0:	streq	r3, [sp, #56]	; 0x38
   131d4:	b	1308c <__assert_fail@plt+0x1988>
   131d8:	add	sp, sp, #716	; 0x2cc
   131dc:	ldrd	r4, [sp]
   131e0:	ldrd	r6, [sp, #8]
   131e4:	ldrd	r8, [sp, #16]
   131e8:	ldrd	sl, [sp, #24]
   131ec:	add	sp, sp, #32
   131f0:	pop	{pc}		; (ldr pc, [sp], #4)
   131f4:	bls	13210 <__assert_fail@plt+0x1b0c>
   131f8:	ldr	r3, [sp, #48]	; 0x30
   131fc:	and	r3, r3, #260	; 0x104
   13200:	orr	r3, r3, #152	; 0x98
   13204:	orr	r3, r3, #256	; 0x100
   13208:	b	13168 <__assert_fail@plt+0x1a64>
   1320c:	bl	1b370 <__assert_fail@plt+0x9c6c>
   13210:	ldr	r3, [sp, #44]	; 0x2c
   13214:	orr	r3, r3, #152	; 0x98
   13218:	b	13160 <__assert_fail@plt+0x1a5c>
   1321c:	movw	r3, #832	; 0x340
   13220:	movt	r3, #3
   13224:	ldr	ip, [r3, #40]	; 0x28
   13228:	cmp	ip, #0
   1322c:	beq	13270 <__assert_fail@plt+0x1b6c>
   13230:	mov	r2, r0
   13234:	mov	r3, r1
   13238:	push	{lr}		; (str lr, [sp, #-4]!)
   1323c:	sub	sp, sp, #28
   13240:	mov	r0, ip
   13244:	mov	r1, sp
   13248:	strd	r2, [sp]
   1324c:	bl	15b00 <__assert_fail@plt+0x43fc>
   13250:	cmp	r0, #0
   13254:	beq	13264 <__assert_fail@plt+0x1b60>
   13258:	ldr	r0, [r0, #16]
   1325c:	add	sp, sp, #28
   13260:	pop	{pc}		; (ldr pc, [sp], #4)
   13264:	mov	r0, #0
   13268:	add	sp, sp, #28
   1326c:	pop	{pc}		; (ldr pc, [sp], #4)
   13270:	mov	r0, #0
   13274:	bx	lr
   13278:	strd	r4, [sp, #-16]!
   1327c:	movw	r4, #832	; 0x340
   13280:	movt	r4, #3
   13284:	ldr	ip, [r4, #16]
   13288:	mov	r5, r0
   1328c:	mov	r2, #4
   13290:	str	r6, [sp, #8]
   13294:	mov	r6, r1
   13298:	ldr	r0, [r4, #20]
   1329c:	str	lr, [sp, #12]
   132a0:	add	ip, ip, #1
   132a4:	mov	r1, ip
   132a8:	str	ip, [r4, #16]
   132ac:	bl	1afdc <__assert_fail@plt+0x98d8>
   132b0:	lsl	r1, r5, #3
   132b4:	ldr	ip, [r4, #16]
   132b8:	movw	r3, #380	; 0x17c
   132bc:	movt	r3, #3
   132c0:	cmp	r6, #0
   132c4:	str	r0, [r4, #20]
   132c8:	sub	r2, r1, r5
   132cc:	add	lr, r3, #4
   132d0:	lsl	r2, r2, #2
   132d4:	sub	r1, r1, r5
   132d8:	add	lr, lr, r2
   132dc:	sub	ip, ip, #-1073741823	; 0xc0000001
   132e0:	addne	r2, r3, r2
   132e4:	add	r3, r3, r1, lsl #2
   132e8:	str	lr, [r0, ip, lsl #2]
   132ec:	strne	r6, [r2, #16]
   132f0:	ldrb	r2, [r3, #28]
   132f4:	cmp	r2, #0
   132f8:	bne	13314 <__assert_fail@plt+0x1c10>
   132fc:	mov	r2, #1
   13300:	ldrd	r4, [sp]
   13304:	ldr	r6, [sp, #8]
   13308:	add	sp, sp, #12
   1330c:	strb	r2, [r3, #28]
   13310:	pop	{pc}		; (ldr pc, [sp], #4)
   13314:	movw	r3, #56776	; 0xddc8
   13318:	movt	r3, #1
   1331c:	movw	r1, #57156	; 0xdf44
   13320:	movt	r1, #1
   13324:	movw	r0, #57168	; 0xdf50
   13328:	movt	r0, #1
   1332c:	movw	r2, #425	; 0x1a9
   13330:	bl	11704 <__assert_fail@plt>
   13334:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13338:	mov	r5, r0
   1333c:	strd	r6, [sp, #8]
   13340:	strd	r8, [sp, #16]
   13344:	mov	r9, #0
   13348:	strd	sl, [sp, #24]
   1334c:	str	lr, [sp, #32]
   13350:	sub	sp, sp, #20
   13354:	bl	1153c <strlen@plt>
   13358:	add	r7, r5, r0
   1335c:	str	r9, [sp, #8]
   13360:	cmp	r5, r7
   13364:	str	r9, [sp, #12]
   13368:	beq	133ec <__assert_fail@plt+0x1ce8>
   1336c:	mov	r8, r9
   13370:	mov	r4, r5
   13374:	mov	sl, #63	; 0x3f
   13378:	b	133ac <__assert_fail@plt+0x1ca8>
   1337c:	ldr	r0, [sp, #4]
   13380:	bl	113ec <iswcntrl@plt>
   13384:	cmp	r0, #0
   13388:	mov	r2, fp
   1338c:	mov	r0, r5
   13390:	mov	r1, r4
   13394:	bne	133d4 <__assert_fail@plt+0x1cd0>
   13398:	add	r4, r4, fp
   1339c:	add	r5, r5, fp
   133a0:	bl	11344 <memmove@plt>
   133a4:	cmp	r7, r4
   133a8:	beq	133ec <__assert_fail@plt+0x1ce8>
   133ac:	sub	r6, r7, r4
   133b0:	add	r3, sp, #8
   133b4:	mov	r2, r6
   133b8:	mov	r1, r4
   133bc:	add	r0, sp, #4
   133c0:	bl	17324 <__assert_fail@plt+0x5c20>
   133c4:	cmp	r6, r0
   133c8:	mov	fp, r0
   133cc:	bcs	1337c <__assert_fail@plt+0x1c78>
   133d0:	mov	fp, #1
   133d4:	add	r4, r4, fp
   133d8:	strb	sl, [r5], #1
   133dc:	cmp	r7, r4
   133e0:	str	r9, [sp, #8]
   133e4:	str	r8, [sp, #12]
   133e8:	bne	133ac <__assert_fail@plt+0x1ca8>
   133ec:	mov	r3, #0
   133f0:	strb	r3, [r5]
   133f4:	add	sp, sp, #20
   133f8:	ldrd	r4, [sp]
   133fc:	ldrd	r6, [sp, #8]
   13400:	ldrd	r8, [sp, #16]
   13404:	ldrd	sl, [sp, #24]
   13408:	add	sp, sp, #32
   1340c:	pop	{pc}		; (ldr pc, [sp], #4)
   13410:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13414:	strd	r6, [sp, #8]
   13418:	mov	r6, r0
   1341c:	strd	r8, [sp, #16]
   13420:	strd	sl, [sp, #24]
   13424:	mov	sl, r3
   13428:	str	lr, [sp, #32]
   1342c:	vpush	{d8-d11}
   13430:	sub	sp, sp, #916	; 0x394
   13434:	ldrb	r8, [sp, #992]	; 0x3e0
   13438:	str	r1, [sp, #20]
   1343c:	ldrb	r3, [sp, #988]	; 0x3dc
   13440:	str	r2, [sp, #40]	; 0x28
   13444:	ldrb	r7, [sp, #1000]	; 0x3e8
   13448:	cmp	r8, #0
   1344c:	ldr	r4, [sp, #996]	; 0x3e4
   13450:	beq	13468 <__assert_fail@plt+0x1d64>
   13454:	movw	r5, #832	; 0x340
   13458:	movt	r5, #3
   1345c:	ldrb	r2, [r5, #44]	; 0x2c
   13460:	cmp	r2, #0
   13464:	bne	13544 <__assert_fail@plt+0x1e40>
   13468:	cmp	r3, #0
   1346c:	beq	13490 <__assert_fail@plt+0x1d8c>
   13470:	movw	r5, #832	; 0x340
   13474:	movt	r5, #3
   13478:	ldrb	r3, [r5, #45]	; 0x2d
   1347c:	cmp	r3, #0
   13480:	bne	13490 <__assert_fail@plt+0x1d8c>
   13484:	ldrb	r3, [r5, #46]	; 0x2e
   13488:	cmp	r3, #0
   1348c:	beq	13544 <__assert_fail@plt+0x1e40>
   13490:	ldr	r0, [sp, #984]	; 0x3d8
   13494:	bl	12d8c <__assert_fail@plt+0x1688>
   13498:	cmp	r0, #0
   1349c:	beq	13544 <__assert_fail@plt+0x1e40>
   134a0:	ldr	r0, [sp, #984]	; 0x3d8
   134a4:	bl	12e00 <__assert_fail@plt+0x16fc>
   134a8:	cmp	r0, #0
   134ac:	bne	13544 <__assert_fail@plt+0x1e40>
   134b0:	ldr	r2, [sp, #20]
   134b4:	clz	r9, r4
   134b8:	lsr	r9, r9, #5
   134bc:	cmp	r2, #0
   134c0:	movne	r3, r9
   134c4:	moveq	r3, #0
   134c8:	cmp	r3, #0
   134cc:	bne	13564 <__assert_fail@plt+0x1e60>
   134d0:	cmp	sl, #0
   134d4:	beq	13c94 <__assert_fail@plt+0x2590>
   134d8:	cmp	r4, #0
   134dc:	beq	1357c <__assert_fail@plt+0x1e78>
   134e0:	ldrd	r0, [r4]
   134e4:	movw	r5, #832	; 0x340
   134e8:	movt	r5, #3
   134ec:	add	r8, sp, #80	; 0x50
   134f0:	ldrd	r2, [r4, #8]
   134f4:	ldrd	sl, [r4, #16]
   134f8:	strd	r0, [sp, #72]	; 0x48
   134fc:	ldrd	r0, [r4, #32]
   13500:	orrs	ip, r2, r3
   13504:	strd	r2, [sp, #80]	; 0x50
   13508:	ldrd	r2, [r4, #24]
   1350c:	strd	sl, [sp, #88]	; 0x58
   13510:	ldrd	sl, [r4, #40]	; 0x28
   13514:	strd	r2, [sp, #96]	; 0x60
   13518:	ldrd	r2, [r4, #48]	; 0x30
   1351c:	strd	r0, [sp, #104]	; 0x68
   13520:	strd	sl, [sp, #112]	; 0x70
   13524:	strd	r2, [sp, #120]	; 0x78
   13528:	bne	135dc <__assert_fail@plt+0x1ed8>
   1352c:	ldrb	r3, [r5, #45]	; 0x2d
   13530:	cmp	r3, #0
   13534:	bne	135dc <__assert_fail@plt+0x1ed8>
   13538:	ldrb	r3, [r5, #46]	; 0x2e
   1353c:	cmp	r3, #0
   13540:	bne	135dc <__assert_fail@plt+0x1ed8>
   13544:	add	sp, sp, #916	; 0x394
   13548:	vpop	{d8-d11}
   1354c:	ldrd	r4, [sp]
   13550:	ldrd	r6, [sp, #8]
   13554:	ldrd	r8, [sp, #16]
   13558:	ldrd	sl, [sp, #24]
   1355c:	add	sp, sp, #32
   13560:	pop	{pc}		; (ldr pc, [sp], #4)
   13564:	ldrb	r3, [r2]
   13568:	cmp	r3, #47	; 0x2f
   1356c:	bne	13544 <__assert_fail@plt+0x1e40>
   13570:	ldr	r3, [sp, #20]
   13574:	cmp	sl, #0
   13578:	moveq	sl, r3
   1357c:	add	r2, sp, #72	; 0x48
   13580:	mov	r1, r6
   13584:	mov	r0, sl
   13588:	bl	15274 <__assert_fail@plt+0x3b70>
   1358c:	cmp	r0, #0
   13590:	bne	13c04 <__assert_fail@plt+0x2500>
   13594:	cmp	r7, #0
   13598:	movw	r5, #832	; 0x340
   1359c:	movt	r5, #3
   135a0:	beq	13e14 <__assert_fail@plt+0x2710>
   135a4:	ldrb	r3, [r5, #45]	; 0x2d
   135a8:	cmp	r3, #0
   135ac:	bne	13e8c <__assert_fail@plt+0x2788>
   135b0:	add	r8, sp, #80	; 0x50
   135b4:	ldrd	r2, [r8]
   135b8:	orrs	r3, r2, r3
   135bc:	bne	135d4 <__assert_fail@plt+0x1ed0>
   135c0:	ldrb	r3, [r5, #46]	; 0x2e
   135c4:	cmp	r3, #0
   135c8:	beq	13544 <__assert_fail@plt+0x1e40>
   135cc:	cmp	r4, #0
   135d0:	bne	135dc <__assert_fail@plt+0x1ed8>
   135d4:	mov	r3, #1
   135d8:	strb	r3, [r5, #52]	; 0x34
   135dc:	bl	12e7c <__assert_fail@plt+0x1778>
   135e0:	ldr	r1, [sp, #40]	; 0x28
   135e4:	cmp	r6, #0
   135e8:	movw	r3, #57184	; 0xdf60
   135ec:	movt	r3, #1
   135f0:	movne	r0, r6
   135f4:	moveq	r0, r3
   135f8:	subs	r2, r1, #0
   135fc:	moveq	r2, r3
   13600:	str	r2, [sp, #40]	; 0x28
   13604:	bl	1b348 <__assert_fail@plt+0x9c44>
   13608:	cmp	r7, #0
   1360c:	mov	r4, r0
   13610:	str	r0, [sp, #44]	; 0x2c
   13614:	beq	13640 <__assert_fail@plt+0x1f3c>
   13618:	bl	1153c <strlen@plt>
   1361c:	cmp	r0, #36	; 0x24
   13620:	bls	13640 <__assert_fail@plt+0x1f3c>
   13624:	sub	r0, r0, #36	; 0x24
   13628:	movw	r1, #57188	; 0xdf64
   1362c:	movt	r1, #1
   13630:	add	r0, r4, r0
   13634:	bl	116f8 <strspn@plt>
   13638:	cmp	r0, #36	; 0x24
   1363c:	beq	13c70 <__assert_fail@plt+0x256c>
   13640:	ldrd	r2, [r8, #32]
   13644:	movw	r1, #57184	; 0xdf60
   13648:	movt	r1, #1
   1364c:	ldr	r0, [sp, #984]	; 0x3d8
   13650:	ldrd	r6, [r8, #40]	; 0x28
   13654:	mov	fp, r3
   13658:	mvn	r3, #0
   1365c:	mov	sl, r2
   13660:	mvn	r2, #2
   13664:	cmp	r0, #0
   13668:	mov	ip, r0
   1366c:	moveq	r0, r1
   13670:	cmp	fp, r3
   13674:	strd	sl, [sp, #32]
   13678:	mov	r1, #0
   1367c:	cmpeq	sl, r2
   13680:	strd	sl, [sp, #208]	; 0xd0
   13684:	movhi	ip, r1
   13688:	movls	ip, #1
   1368c:	strd	r6, [sp, #216]	; 0xd8
   13690:	cmp	r7, r3
   13694:	mov	r3, #0
   13698:	strb	r1, [sp, #224]	; 0xe0
   1369c:	cmpeq	r6, r2
   136a0:	mov	r2, #1
   136a4:	str	r0, [sp, #984]	; 0x3d8
   136a8:	movhi	ip, #0
   136ac:	andls	ip, ip, #1
   136b0:	mvn	r0, #0
   136b4:	strb	r1, [sp, #248]	; 0xf8
   136b8:	mvn	r1, #0
   136bc:	cmp	ip, #0
   136c0:	strd	r2, [sp, #192]	; 0xc0
   136c4:	strd	r2, [sp, #200]	; 0xc8
   136c8:	strd	r6, [sp, #232]	; 0xe8
   136cc:	strd	r0, [sp, #240]	; 0xf0
   136d0:	bne	13b34 <__assert_fail@plt+0x2430>
   136d4:	mvn	r3, #0
   136d8:	ldrb	lr, [sp, #104]	; 0x68
   136dc:	mvn	r2, #2
   136e0:	ldrd	r0, [r8, #16]
   136e4:	ldr	ip, [r8, #-8]
   136e8:	ldrd	sl, [r8]
   136ec:	cmp	r1, r3
   136f0:	cmpeq	r0, r2
   136f4:	ldr	r4, [r8, #-4]
   136f8:	movhi	lr, #0
   136fc:	andls	lr, lr, #1
   13700:	strd	r0, [sp, #152]	; 0x98
   13704:	cmp	fp, r3
   13708:	strd	sl, [sp, #48]	; 0x30
   1370c:	strd	r0, [sp, #56]	; 0x38
   13710:	cmpeq	sl, r2
   13714:	ldrd	r0, [r8, #8]
   13718:	movls	r8, #1
   1371c:	movhi	r8, #0
   13720:	cmp	r1, r3
   13724:	mov	r3, #0
   13728:	strd	r0, [sp, #24]
   1372c:	cmpeq	r0, r2
   13730:	mvn	r0, #0
   13734:	str	ip, [sp, #128]	; 0x80
   13738:	movhi	r1, #0
   1373c:	andls	r1, r8, #1
   13740:	str	r4, [sp, #132]	; 0x84
   13744:	cmp	r1, r3
   13748:	strb	r3, [sp, #184]	; 0xb8
   1374c:	mvn	r1, #0
   13750:	ldrd	r2, [sp, #24]
   13754:	strd	sl, [sp, #144]	; 0x90
   13758:	strb	lr, [sp, #160]	; 0xa0
   1375c:	strd	r2, [sp, #168]	; 0xa8
   13760:	ldrd	r2, [r5, #32]
   13764:	strd	r0, [sp, #176]	; 0xb0
   13768:	strd	r2, [sp, #136]	; 0x88
   1376c:	bne	13b00 <__assert_fail@plt+0x23fc>
   13770:	ldrb	r3, [r5, #53]	; 0x35
   13774:	tst	r9, r3
   13778:	bne	13ca4 <__assert_fail@plt+0x25a0>
   1377c:	ldr	r3, [r5, #16]
   13780:	cmp	r3, #0
   13784:	beq	13868 <__assert_fail@plt+0x2164>
   13788:	vldr	d10, [pc, #976]	; 13b60 <__assert_fail@plt+0x245c>
   1378c:	movw	fp, #57184	; 0xdf60
   13790:	movt	fp, #1
   13794:	mov	sl, #0
   13798:	mvn	r8, #2
   1379c:	vldr	d9, [pc, #964]	; 13b68 <__assert_fail@plt+0x2464>
   137a0:	mvn	r9, #0
   137a4:	vldr	d8, [pc, #964]	; 13b70 <__assert_fail@plt+0x246c>
   137a8:	ldr	r2, [r5, #20]
   137ac:	lsl	r4, sl, #2
   137b0:	ldr	r2, [r2, sl, lsl #2]
   137b4:	ldr	r3, [r2, #8]
   137b8:	cmp	r3, #1
   137bc:	beq	13968 <__assert_fail@plt+0x2264>
   137c0:	cmp	r3, #0
   137c4:	bne	13958 <__assert_fail@plt+0x2254>
   137c8:	add	ip, sp, #128	; 0x80
   137cc:	ldr	r3, [r2]
   137d0:	cmp	r3, #11
   137d4:	ldrls	pc, [pc, r3, lsl #2]
   137d8:	b	13f48 <__assert_fail@plt+0x2844>
   137dc:	andeq	r3, r1, r8, lsr r9
   137e0:	andeq	r3, r1, r8, asr #18
   137e4:	andeq	r3, r1, r0, lsr #18
   137e8:	andeq	r3, r1, ip, ror #17
   137ec:	andeq	r3, r1, r4, lsl #17
   137f0:	strdeq	r3, [r1], -r8
   137f4:	andeq	r3, r1, r0, lsr #18
   137f8:	andeq	r3, r1, ip, ror #17
   137fc:	andeq	r3, r1, r4, lsl #17
   13800:	strdeq	r3, [r1], -r8
   13804:	andeq	r3, r1, r4, ror r8
   13808:	andeq	r3, r1, ip, lsl #16
   1380c:	ldr	r0, [sp, #40]	; 0x28
   13810:	bl	1b348 <__assert_fail@plt+0x9c44>
   13814:	str	r0, [sp, #68]	; 0x44
   13818:	bl	12edc <__assert_fail@plt+0x17d8>
   1381c:	mov	r1, #0
   13820:	ldr	r0, [sp, #68]	; 0x44
   13824:	add	sl, sl, #1
   13828:	bl	17998 <__assert_fail@plt+0x6294>
   1382c:	ldr	ip, [r5, #8]
   13830:	ldr	r2, [r5, #20]
   13834:	ldr	lr, [r5, #12]
   13838:	sub	ip, ip, #-1073741823	; 0xc0000001
   1383c:	ldr	r1, [r2, r4]
   13840:	ldr	ip, [lr, ip, lsl #2]
   13844:	ldr	lr, [r5, #16]
   13848:	ldr	r3, [r1, #16]
   1384c:	cmp	r3, r0
   13850:	movcs	r0, r3
   13854:	ldr	r3, [sp, #68]	; 0x44
   13858:	cmp	lr, sl
   1385c:	str	r0, [r1, #16]
   13860:	str	r3, [ip, r4]
   13864:	bhi	137ac <__assert_fail@plt+0x20a8>
   13868:	ldr	r0, [sp, #44]	; 0x2c
   1386c:	bl	15214 <__assert_fail@plt+0x3b10>
   13870:	b	13544 <__assert_fail@plt+0x1e40>
   13874:	ldr	r0, [sp, #20]
   13878:	bl	1b348 <__assert_fail@plt+0x9c44>
   1387c:	str	r0, [sp, #68]	; 0x44
   13880:	b	13818 <__assert_fail@plt+0x2114>
   13884:	ldrb	r2, [ip, #32]
   13888:	ldrd	r0, [ip, #24]
   1388c:	cmp	r1, r9
   13890:	ldrd	r6, [ip]
   13894:	cmpeq	r0, r8
   13898:	strd	r6, [sp, #24]
   1389c:	ldrd	r6, [ip, #8]
   138a0:	strd	r6, [sp, #32]
   138a4:	bls	13970 <__assert_fail@plt+0x226c>
   138a8:	cmp	r2, #0
   138ac:	beq	13930 <__assert_fail@plt+0x222c>
   138b0:	ldr	r3, [r5, #28]
   138b4:	rsbs	r0, r0, #0
   138b8:	add	ip, sp, #256	; 0x100
   138bc:	ldrd	r6, [sp, #24]
   138c0:	add	r2, ip, r2
   138c4:	rsc	r1, r1, #0
   138c8:	strd	r6, [sp]
   138cc:	ldrd	r6, [sp, #32]
   138d0:	strd	r6, [sp, #8]
   138d4:	bl	166b0 <__assert_fail@plt+0x4fac>
   138d8:	mov	r3, r0
   138dc:	mov	r2, #45	; 0x2d
   138e0:	sub	r0, r0, #1
   138e4:	strb	r2, [r3, #-1]
   138e8:	b	13810 <__assert_fail@plt+0x210c>
   138ec:	ldrb	r2, [ip, #56]	; 0x38
   138f0:	ldrd	r0, [ip, #48]	; 0x30
   138f4:	b	1388c <__assert_fail@plt+0x2188>
   138f8:	ldrd	r6, [ip, #48]	; 0x30
   138fc:	cmp	r7, r9
   13900:	cmpeq	r6, r8
   13904:	bls	13998 <__assert_fail@plt+0x2294>
   13908:	mov	r0, fp
   1390c:	bl	113c8 <strdup@plt>
   13910:	str	r0, [sp, #68]	; 0x44
   13914:	cmp	r0, #0
   13918:	bne	13818 <__assert_fail@plt+0x2114>
   1391c:	b	13ac8 <__assert_fail@plt+0x23c4>
   13920:	ldrd	r0, [ip, #16]
   13924:	cmp	r1, r9
   13928:	cmpeq	r0, r8
   1392c:	bls	13aa0 <__assert_fail@plt+0x239c>
   13930:	mov	r0, fp
   13934:	b	13810 <__assert_fail@plt+0x210c>
   13938:	ldr	r0, [sp, #44]	; 0x2c
   1393c:	bl	1b348 <__assert_fail@plt+0x9c44>
   13940:	str	r0, [sp, #68]	; 0x44
   13944:	b	13818 <__assert_fail@plt+0x2114>
   13948:	ldr	r0, [sp, #984]	; 0x3d8
   1394c:	bl	1b348 <__assert_fail@plt+0x9c44>
   13950:	str	r0, [sp, #68]	; 0x44
   13954:	b	13818 <__assert_fail@plt+0x2114>
   13958:	cmp	r3, #2
   1395c:	bne	13e70 <__assert_fail@plt+0x276c>
   13960:	mov	ip, #0
   13964:	b	137cc <__assert_fail@plt+0x20c8>
   13968:	add	ip, sp, #192	; 0xc0
   1396c:	b	137cc <__assert_fail@plt+0x20c8>
   13970:	cmp	r2, #0
   13974:	ldr	r3, [r5, #28]
   13978:	bne	138b4 <__assert_fail@plt+0x21b0>
   1397c:	ldrd	r6, [sp, #24]
   13980:	add	r2, sp, #256	; 0x100
   13984:	strd	r6, [sp]
   13988:	ldrd	r6, [sp, #32]
   1398c:	strd	r6, [sp, #8]
   13990:	bl	166b0 <__assert_fail@plt+0x4fac>
   13994:	b	13810 <__assert_fail@plt+0x210c>
   13998:	ldrd	r2, [ip, #24]
   1399c:	cmp	r3, r9
   139a0:	cmpeq	r2, r8
   139a4:	bhi	13908 <__assert_fail@plt+0x2204>
   139a8:	ldrb	r1, [ip, #56]	; 0x38
   139ac:	ldrb	r0, [ip, #32]
   139b0:	cmp	r1, #0
   139b4:	str	r0, [sp, #24]
   139b8:	bne	13ae0 <__assert_fail@plt+0x23dc>
   139bc:	add	r1, pc, #436	; 0x1b4
   139c0:	ldrd	r0, [r1]
   139c4:	cmp	r7, r1
   139c8:	cmpeq	r6, r0
   139cc:	bhi	139f4 <__assert_fail@plt+0x22f0>
   139d0:	adds	r0, r6, r2
   139d4:	mov	ip, #0
   139d8:	adcs	r1, r7, r3
   139dc:	mov	lr, ip
   139e0:	movcs	ip, #1
   139e4:	strd	r0, [sp, #32]
   139e8:	ldrd	r0, [sp, #32]
   139ec:	orrs	r1, r0, r1
   139f0:	bne	13b84 <__assert_fail@plt+0x2480>
   139f4:	mov	r0, r6
   139f8:	mov	r1, r7
   139fc:	strd	r2, [sp, #32]
   13a00:	bl	1db14 <__assert_fail@plt+0xc410>
   13a04:	vmov	d11, r0, r1
   13a08:	ldrd	r2, [sp, #32]
   13a0c:	ldr	r1, [sp, #24]
   13a10:	cmp	r1, #0
   13a14:	beq	13acc <__assert_fail@plt+0x23c8>
   13a18:	rsbs	r0, r2, #0
   13a1c:	rsc	r1, r3, #0
   13a20:	bl	1db14 <__assert_fail@plt+0xc410>
   13a24:	vmov	d7, r0, r1
   13a28:	vneg.f64	d6, d7
   13a2c:	vadd.f64	d6, d11, d6
   13a30:	vcmp.f64	d6, #0.0
   13a34:	vmrs	APSR_nzcv, fpscr
   13a38:	beq	13908 <__assert_fail@plt+0x2204>
   13a3c:	vmul.f64	d11, d11, d9
   13a40:	vdiv.f64	d7, d11, d6
   13a44:	vcvt.s32.f64	s12, d7
   13a48:	vcvt.f64.s32	d6, s12
   13a4c:	vsub.f64	d5, d6, d8
   13a50:	vcmpe.f64	d5, d7
   13a54:	vmrs	APSR_nzcv, fpscr
   13a58:	bpl	13a6c <__assert_fail@plt+0x2368>
   13a5c:	vadd.f64	d5, d6, d8
   13a60:	vcmpe.f64	d5, d7
   13a64:	vmrs	APSR_nzcv, fpscr
   13a68:	bge	13bf0 <__assert_fail@plt+0x24ec>
   13a6c:	vcmpe.f64	d7, #0.0
   13a70:	vmrs	APSR_nzcv, fpscr
   13a74:	blt	13908 <__assert_fail@plt+0x2204>
   13a78:	movw	r2, #57232	; 0xdf90
   13a7c:	movt	r2, #1
   13a80:	vstr	d7, [sp]
   13a84:	mov	r1, #1
   13a88:	add	r0, sp, #68	; 0x44
   13a8c:	bl	114b8 <__asprintf_chk@plt>
   13a90:	cmn	r0, #1
   13a94:	beq	13ac0 <__assert_fail@plt+0x23bc>
   13a98:	ldr	r0, [sp, #68]	; 0x44
   13a9c:	b	13914 <__assert_fail@plt+0x2210>
   13aa0:	ldrd	r6, [ip, #8]
   13aa4:	add	r2, sp, #256	; 0x100
   13aa8:	ldr	r3, [r5, #28]
   13aac:	strd	r6, [sp, #8]
   13ab0:	ldrd	r6, [ip]
   13ab4:	strd	r6, [sp]
   13ab8:	bl	166b0 <__assert_fail@plt+0x4fac>
   13abc:	b	13810 <__assert_fail@plt+0x210c>
   13ac0:	mov	r3, #0
   13ac4:	str	r3, [sp, #68]	; 0x44
   13ac8:	bl	1b370 <__assert_fail@plt+0x9c6c>
   13acc:	mov	r0, r2
   13ad0:	mov	r1, r3
   13ad4:	bl	1db14 <__assert_fail@plt+0xc410>
   13ad8:	vmov	d6, r0, r1
   13adc:	b	13a2c <__assert_fail@plt+0x2328>
   13ae0:	rsbs	r0, r6, #0
   13ae4:	strd	r2, [sp, #32]
   13ae8:	rsc	r1, r7, #0
   13aec:	bl	1db14 <__assert_fail@plt+0xc410>
   13af0:	vmov	d7, r0, r1
   13af4:	ldrd	r2, [sp, #32]
   13af8:	vneg.f64	d11, d7
   13afc:	b	13a0c <__assert_fail@plt+0x2308>
   13b00:	mov	r0, sl
   13b04:	mov	r1, fp
   13b08:	ldrd	sl, [sp, #24]
   13b0c:	subs	r3, r0, sl
   13b10:	sbc	r2, r1, fp
   13b14:	cmp	r1, fp
   13b18:	cmpeq	r0, sl
   13b1c:	str	r3, [sp, #176]	; 0xb0
   13b20:	movcc	r3, #1
   13b24:	movcs	r3, #0
   13b28:	str	r2, [sp, #180]	; 0xb4
   13b2c:	strb	r3, [sp, #184]	; 0xb8
   13b30:	b	13770 <__assert_fail@plt+0x206c>
   13b34:	subs	r3, sl, r6
   13b38:	sbc	r2, fp, r7
   13b3c:	cmp	fp, r7
   13b40:	cmpeq	sl, r6
   13b44:	str	r3, [sp, #240]	; 0xf0
   13b48:	movcc	r3, #1
   13b4c:	movcs	r3, #0
   13b50:	str	r2, [sp, #244]	; 0xf4
   13b54:	strb	r3, [sp, #248]	; 0xf8
   13b58:	b	136d4 <__assert_fail@plt+0x1fd0>
   13b5c:	nop	{0}
	...
   13b6c:	subsmi	r0, r9, r0
   13b70:	andeq	r0, r0, r0
   13b74:	svccc	0x00f00000	; IMB
   13b78:			; <UNDEFINED> instruction: 0xf5c28f5c
   13b7c:	addeq	r5, pc, #40, 24	; 0x2800
   13b80:	ldrdeq	sp, [r1], -r4
   13b84:	ldr	r0, [sp, #24]
   13b88:	orrs	r1, lr, ip
   13b8c:	movne	r1, #1
   13b90:	moveq	r1, #0
   13b94:	cmp	r1, r0
   13b98:	bne	139f4 <__assert_fail@plt+0x22f0>
   13b9c:	adds	r1, r6, r6
   13ba0:	ldrd	r2, [sp, #32]
   13ba4:	adc	lr, r7, r7
   13ba8:	adds	r1, r1, r6
   13bac:	adc	lr, lr, r7
   13bb0:	lsl	r0, r1, #5
   13bb4:	lsl	ip, lr, #5
   13bb8:	adds	r0, r1, r0
   13bbc:	orr	ip, ip, r1, lsr #27
   13bc0:	adc	r1, lr, ip
   13bc4:	adds	r0, r0, r6
   13bc8:	adc	r1, r1, r7
   13bcc:	bl	1db88 <__assert_fail@plt+0xc484>
   13bd0:	orrs	r3, r2, r3
   13bd4:	movne	r3, #1
   13bd8:	moveq	r3, #0
   13bdc:	adds	r0, r0, r3
   13be0:	adc	r1, r1, #0
   13be4:	bl	1db14 <__assert_fail@plt+0xc410>
   13be8:	vmov	d7, r0, r1
   13bec:	b	13a6c <__assert_fail@plt+0x2368>
   13bf0:	vcmpe.f64	d7, d6
   13bf4:	vmrs	APSR_nzcv, fpscr
   13bf8:	vaddle.f64	d7, d6, d10
   13bfc:	vmovgt.f64	d7, d5
   13c00:	b	13a6c <__assert_fail@plt+0x2368>
   13c04:	bl	1156c <__errno_location@plt>
   13c08:	cmp	r7, #0
   13c0c:	ldr	r4, [r0]
   13c10:	beq	13e34 <__assert_fail@plt+0x2730>
   13c14:	cmp	r4, #2
   13c18:	cmpne	r4, #13
   13c1c:	bne	13e34 <__assert_fail@plt+0x2730>
   13c20:	movw	r5, #832	; 0x340
   13c24:	movt	r5, #3
   13c28:	ldrb	r3, [r5, #45]	; 0x2d
   13c2c:	cmp	r3, #0
   13c30:	beq	13544 <__assert_fail@plt+0x1e40>
   13c34:	add	r8, sp, #80	; 0x50
   13c38:	mvn	r2, #0
   13c3c:	mvn	r3, #0
   13c40:	mov	r1, #0
   13c44:	movw	r0, #57184	; 0xdf60
   13c48:	movt	r0, #1
   13c4c:	strd	r2, [r8, #-8]
   13c50:	strd	r2, [r8]
   13c54:	strd	r2, [r8, #8]
   13c58:	strd	r2, [r8, #16]
   13c5c:	strd	r2, [r8, #32]
   13c60:	strd	r2, [r8, #40]	; 0x28
   13c64:	strb	r1, [sp, #104]	; 0x68
   13c68:	str	r0, [sp, #984]	; 0x3d8
   13c6c:	b	135d4 <__assert_fail@plt+0x1ed0>
   13c70:	mov	r1, #0
   13c74:	ldr	r0, [sp, #44]	; 0x2c
   13c78:	bl	147f4 <__assert_fail@plt+0x30f0>
   13c7c:	subs	r3, r0, #0
   13c80:	beq	13640 <__assert_fail@plt+0x1f3c>
   13c84:	ldr	r0, [sp, #44]	; 0x2c
   13c88:	str	r3, [sp, #44]	; 0x2c
   13c8c:	bl	15214 <__assert_fail@plt+0x3b10>
   13c90:	b	13640 <__assert_fail@plt+0x1f3c>
   13c94:	ldr	r3, [sp, #20]
   13c98:	subs	sl, r3, #0
   13c9c:	moveq	sl, r6
   13ca0:	b	134d8 <__assert_fail@plt+0x1dd4>
   13ca4:	ldrd	r0, [sp, #32]
   13ca8:	mvn	r3, #0
   13cac:	mvn	r2, #2
   13cb0:	cmp	r1, r3
   13cb4:	cmpeq	r0, r2
   13cb8:	bhi	13cd4 <__assert_fail@plt+0x25d0>
   13cbc:	ldr	r3, [r5, #96]	; 0x60
   13cc0:	ldr	r2, [r5, #100]	; 0x64
   13cc4:	adds	r3, r3, r0
   13cc8:	adc	r2, r2, r1
   13ccc:	str	r3, [r5, #96]	; 0x60
   13cd0:	str	r2, [r5, #100]	; 0x64
   13cd4:	mvn	r3, #0
   13cd8:	mvn	r2, #2
   13cdc:	cmp	r7, r3
   13ce0:	cmpeq	r6, r2
   13ce4:	bhi	13d00 <__assert_fail@plt+0x25fc>
   13ce8:	ldr	r3, [r5, #104]	; 0x68
   13cec:	ldr	r2, [r5, #108]	; 0x6c
   13cf0:	adds	r3, r3, r6
   13cf4:	adc	r2, r2, r7
   13cf8:	str	r3, [r5, #104]	; 0x68
   13cfc:	str	r2, [r5, #108]	; 0x6c
   13d00:	ldrd	r6, [sp, #48]	; 0x30
   13d04:	mvn	r3, #0
   13d08:	mvn	r2, #2
   13d0c:	cmp	r7, r3
   13d10:	cmpeq	r6, r2
   13d14:	bhi	13d40 <__assert_fail@plt+0x263c>
   13d18:	mul	r3, ip, r7
   13d1c:	ldr	r2, [r5, #64]	; 0x40
   13d20:	umull	r0, r1, ip, r6
   13d24:	mla	r3, r4, r6, r3
   13d28:	ldr	r6, [r5, #68]	; 0x44
   13d2c:	adds	r2, r2, r0
   13d30:	add	r1, r3, r1
   13d34:	str	r2, [r5, #64]	; 0x40
   13d38:	adc	r6, r6, r1
   13d3c:	str	r6, [r5, #68]	; 0x44
   13d40:	ldrd	r6, [sp, #24]
   13d44:	mvn	r3, #0
   13d48:	mvn	r2, #2
   13d4c:	cmp	r7, r3
   13d50:	cmpeq	r6, r2
   13d54:	bhi	13d80 <__assert_fail@plt+0x267c>
   13d58:	mul	r1, ip, r7
   13d5c:	ldr	r0, [r5, #72]	; 0x48
   13d60:	umull	r2, r3, ip, r6
   13d64:	mla	r1, r4, r6, r1
   13d68:	ldr	r6, [r5, #76]	; 0x4c
   13d6c:	adds	r0, r0, r2
   13d70:	add	r3, r1, r3
   13d74:	str	r0, [r5, #72]	; 0x48
   13d78:	adc	r6, r6, r3
   13d7c:	str	r6, [r5, #76]	; 0x4c
   13d80:	ldrd	r0, [sp, #56]	; 0x38
   13d84:	mvn	r3, #0
   13d88:	mvn	r2, #2
   13d8c:	cmp	r1, r3
   13d90:	cmpeq	r0, r2
   13d94:	bhi	1377c <__assert_fail@plt+0x2078>
   13d98:	mul	r1, ip, r1
   13d9c:	ldrb	r6, [r5, #88]	; 0x58
   13da0:	mov	r2, r0
   13da4:	umull	r8, r9, ip, r2
   13da8:	mla	r4, r4, r2, r1
   13dac:	ldrd	r0, [r5, #80]	; 0x50
   13db0:	cmp	r6, lr
   13db4:	add	r9, r4, r9
   13db8:	beq	13f38 <__assert_fail@plt+0x2834>
   13dbc:	cmp	r6, #0
   13dc0:	beq	13dd0 <__assert_fail@plt+0x26cc>
   13dc4:	rsbs	r0, r0, #0
   13dc8:	rsc	r1, r1, #0
   13dcc:	strd	r0, [r5, #80]	; 0x50
   13dd0:	cmp	lr, #0
   13dd4:	beq	13de0 <__assert_fail@plt+0x26dc>
   13dd8:	rsbs	r8, r8, #0
   13ddc:	rsc	r9, r9, #0
   13de0:	cmp	r9, r1
   13de4:	cmpeq	r8, r0
   13de8:	bcs	13f20 <__assert_fail@plt+0x281c>
   13dec:	subs	r2, r0, r8
   13df0:	sbc	r3, r1, r9
   13df4:	strd	r2, [r5, #80]	; 0x50
   13df8:	cmp	r6, #0
   13dfc:	beq	1377c <__assert_fail@plt+0x2078>
   13e00:	ldrd	r2, [r5, #80]	; 0x50
   13e04:	rsbs	r2, r2, #0
   13e08:	rsc	r3, r3, #0
   13e0c:	strd	r2, [r5, #80]	; 0x50
   13e10:	b	1377c <__assert_fail@plt+0x2078>
   13e14:	add	r8, sp, #80	; 0x50
   13e18:	ldrd	r2, [r8]
   13e1c:	orrs	r3, r2, r3
   13e20:	bne	135d4 <__assert_fail@plt+0x1ed0>
   13e24:	ldrb	r3, [r5, #45]	; 0x2d
   13e28:	cmp	r3, #0
   13e2c:	bne	135d4 <__assert_fail@plt+0x1ed0>
   13e30:	b	135c0 <__assert_fail@plt+0x1ebc>
   13e34:	mov	r2, sl
   13e38:	mov	r1, #3
   13e3c:	mov	r0, #0
   13e40:	bl	1a50c <__assert_fail@plt+0x8e08>
   13e44:	mov	r3, r0
   13e48:	mov	r1, r4
   13e4c:	movw	r2, #61060	; 0xee84
   13e50:	movt	r2, #1
   13e54:	mov	r0, #0
   13e58:	bl	11494 <error@plt>
   13e5c:	movw	r3, #832	; 0x340
   13e60:	movt	r3, #3
   13e64:	mov	r2, #1
   13e68:	str	r2, [r3, #48]	; 0x30
   13e6c:	b	13544 <__assert_fail@plt+0x1e40>
   13e70:	movw	r1, #57156	; 0xdf44
   13e74:	movt	r1, #1
   13e78:	ldr	r3, [pc, #-768]	; 13b80 <__assert_fail@plt+0x247c>
   13e7c:	movw	r0, #57212	; 0xdf7c
   13e80:	movt	r0, #1
   13e84:	movw	r2, #1158	; 0x486
   13e88:	bl	11704 <__assert_fail@plt>
   13e8c:	mov	r1, sl
   13e90:	add	r2, sp, #256	; 0x100
   13e94:	mov	r0, #3
   13e98:	bl	116bc <__xstat64@plt>
   13e9c:	cmp	r0, #0
   13ea0:	bne	13e14 <__assert_fail@plt+0x2710>
   13ea4:	add	r3, sp, #256	; 0x100
   13ea8:	ldrd	r0, [r3]
   13eac:	bl	1321c <__assert_fail@plt+0x1b18>
   13eb0:	cmp	r0, #0
   13eb4:	beq	13e14 <__assert_fail@plt+0x2710>
   13eb8:	ldr	sl, [r0, #8]
   13ebc:	cmp	sl, #0
   13ec0:	beq	13e14 <__assert_fail@plt+0x2710>
   13ec4:	mov	r1, r6
   13ec8:	ldr	r0, [sl]
   13ecc:	bl	11320 <strcmp@plt>
   13ed0:	cmp	r0, #0
   13ed4:	beq	13e14 <__assert_fail@plt+0x2710>
   13ed8:	ldrb	r3, [sl, #24]
   13edc:	ubfx	r3, r3, #1, #1
   13ee0:	ands	r1, r8, r3
   13ee4:	bne	13e14 <__assert_fail@plt+0x2710>
   13ee8:	add	r8, sp, #80	; 0x50
   13eec:	mvn	r2, #0
   13ef0:	strb	r1, [sp, #104]	; 0x68
   13ef4:	mvn	r3, #0
   13ef8:	movw	r1, #57184	; 0xdf60
   13efc:	movt	r1, #1
   13f00:	strd	r2, [r8, #-8]
   13f04:	strd	r2, [r8]
   13f08:	strd	r2, [r8, #8]
   13f0c:	strd	r2, [r8, #16]
   13f10:	strd	r2, [r8, #32]
   13f14:	strd	r2, [r8, #40]	; 0x28
   13f18:	str	r1, [sp, #984]	; 0x3d8
   13f1c:	b	13e18 <__assert_fail@plt+0x2714>
   13f20:	subs	r2, r8, r0
   13f24:	mov	r6, lr
   13f28:	strb	lr, [r5, #88]	; 0x58
   13f2c:	sbc	r3, r9, r1
   13f30:	strd	r2, [r5, #80]	; 0x50
   13f34:	b	13df8 <__assert_fail@plt+0x26f4>
   13f38:	adds	r2, r8, r0
   13f3c:	adc	r3, r9, r1
   13f40:	strd	r2, [r5, #80]	; 0x50
   13f44:	b	1377c <__assert_fail@plt+0x2078>
   13f48:	movw	r1, #57156	; 0xdf44
   13f4c:	movt	r1, #1
   13f50:	ldr	r3, [pc, #-984]	; 13b80 <__assert_fail@plt+0x247c>
   13f54:	movw	r0, #57240	; 0xdf98
   13f58:	movt	r0, #1
   13f5c:	movw	r2, #1260	; 0x4ec
   13f60:	bl	11704 <__assert_fail@plt>
   13f64:	subs	r4, r0, #0
   13f68:	str	r7, [sp, #-8]!
   13f6c:	str	lr, [sp, #4]
   13f70:	sub	sp, sp, #56	; 0x38
   13f74:	beq	13fbc <__assert_fail@plt+0x28b8>
   13f78:	movw	r3, #816	; 0x330
   13f7c:	movt	r3, #3
   13f80:	ldr	r5, [r3]
   13f84:	mov	r2, #5
   13f88:	movw	r1, #57264	; 0xdfb0
   13f8c:	movt	r1, #1
   13f90:	mov	r0, #0
   13f94:	bl	113bc <dcgettext@plt>
   13f98:	movw	r3, #960	; 0x3c0
   13f9c:	movt	r3, #3
   13fa0:	mov	r2, r0
   13fa4:	mov	r1, #1
   13fa8:	ldr	r3, [r3]
   13fac:	mov	r0, r5
   13fb0:	bl	115c0 <__fprintf_chk@plt>
   13fb4:	mov	r0, r4
   13fb8:	bl	11530 <exit@plt>
   13fbc:	mov	r2, #5
   13fc0:	movw	r1, #57304	; 0xdfd8
   13fc4:	movt	r1, #1
   13fc8:	movw	r5, #820	; 0x334
   13fcc:	movt	r5, #3
   13fd0:	bl	113bc <dcgettext@plt>
   13fd4:	movw	r3, #960	; 0x3c0
   13fd8:	movt	r3, #3
   13fdc:	mov	r1, r0
   13fe0:	mov	r0, #1
   13fe4:	ldr	r2, [r3]
   13fe8:	bl	1159c <__printf_chk@plt>
   13fec:	mov	r2, #5
   13ff0:	movw	r1, #57340	; 0xdffc
   13ff4:	movt	r1, #1
   13ff8:	mov	r0, r4
   13ffc:	bl	113bc <dcgettext@plt>
   14000:	ldr	r1, [r5]
   14004:	bl	112f0 <fputs_unlocked@plt>
   14008:	mov	r2, #5
   1400c:	movw	r1, #57440	; 0xe060
   14010:	movt	r1, #1
   14014:	mov	r0, r4
   14018:	bl	113bc <dcgettext@plt>
   1401c:	ldr	r1, [r5]
   14020:	bl	112f0 <fputs_unlocked@plt>
   14024:	mov	r2, #5
   14028:	movw	r1, #57516	; 0xe0ac
   1402c:	movt	r1, #1
   14030:	mov	r0, r4
   14034:	bl	113bc <dcgettext@plt>
   14038:	ldr	r1, [r5]
   1403c:	bl	112f0 <fputs_unlocked@plt>
   14040:	mov	r2, #5
   14044:	movw	r1, #57928	; 0xe248
   14048:	movt	r1, #1
   1404c:	mov	r0, r4
   14050:	bl	113bc <dcgettext@plt>
   14054:	ldr	r1, [r5]
   14058:	bl	112f0 <fputs_unlocked@plt>
   1405c:	mov	r2, #5
   14060:	movw	r1, #58184	; 0xe348
   14064:	movt	r1, #1
   14068:	mov	r0, r4
   1406c:	bl	113bc <dcgettext@plt>
   14070:	ldr	r1, [r5]
   14074:	bl	112f0 <fputs_unlocked@plt>
   14078:	mov	r2, #5
   1407c:	movw	r1, #58452	; 0xe454
   14080:	movt	r1, #1
   14084:	mov	r0, r4
   14088:	bl	113bc <dcgettext@plt>
   1408c:	ldr	r1, [r5]
   14090:	bl	112f0 <fputs_unlocked@plt>
   14094:	mov	r2, #5
   14098:	movw	r1, #58584	; 0xe4d8
   1409c:	movt	r1, #1
   140a0:	mov	r0, r4
   140a4:	bl	113bc <dcgettext@plt>
   140a8:	ldr	r1, [r5]
   140ac:	bl	112f0 <fputs_unlocked@plt>
   140b0:	mov	r2, #5
   140b4:	movw	r1, #58808	; 0xe5b8
   140b8:	movt	r1, #1
   140bc:	mov	r0, r4
   140c0:	bl	113bc <dcgettext@plt>
   140c4:	ldr	r1, [r5]
   140c8:	bl	112f0 <fputs_unlocked@plt>
   140cc:	mov	r2, #5
   140d0:	movw	r1, #58856	; 0xe5e8
   140d4:	movt	r1, #1
   140d8:	mov	r0, r4
   140dc:	bl	113bc <dcgettext@plt>
   140e0:	ldr	r1, [r5]
   140e4:	bl	112f0 <fputs_unlocked@plt>
   140e8:	mov	r2, #5
   140ec:	movw	r1, #58912	; 0xe620
   140f0:	movt	r1, #1
   140f4:	mov	r0, r4
   140f8:	bl	113bc <dcgettext@plt>
   140fc:	mov	r1, r0
   14100:	movw	r2, #59136	; 0xe700
   14104:	movt	r2, #1
   14108:	mov	r0, #1
   1410c:	bl	1159c <__printf_chk@plt>
   14110:	mov	r2, #5
   14114:	movw	r1, #59140	; 0xe704
   14118:	movt	r1, #1
   1411c:	mov	r0, r4
   14120:	bl	113bc <dcgettext@plt>
   14124:	ldr	r1, [r5]
   14128:	bl	112f0 <fputs_unlocked@plt>
   1412c:	mov	r2, #5
   14130:	movw	r1, #59352	; 0xe7d8
   14134:	movt	r1, #1
   14138:	mov	r0, r4
   1413c:	bl	113bc <dcgettext@plt>
   14140:	ldr	r1, [r5]
   14144:	bl	112f0 <fputs_unlocked@plt>
   14148:	movw	r0, #56776	; 0xddc8
   1414c:	movt	r0, #1
   14150:	ldr	ip, [r0, #20]
   14154:	ldrd	r2, [r0, #28]
   14158:	ldr	r6, [r0, #24]
   1415c:	subs	r1, ip, #0
   14160:	str	ip, [sp]
   14164:	ldrd	r8, [r0, #36]	; 0x24
   14168:	strd	r2, [sp, #8]
   1416c:	ldrd	r2, [r0, #44]	; 0x2c
   14170:	str	r6, [sp, #4]
   14174:	ldrd	r6, [r0, #52]	; 0x34
   14178:	strd	r8, [sp, #16]
   1417c:	ldrd	r8, [r0, #60]	; 0x3c
   14180:	strd	r2, [sp, #24]
   14184:	ldrd	r2, [r0, #68]	; 0x44
   14188:	strd	r6, [sp, #32]
   1418c:	movwne	r7, #57260	; 0xdfac
   14190:	mov	r6, sp
   14194:	movtne	r7, #1
   14198:	strd	r8, [sp, #40]	; 0x28
   1419c:	strd	r2, [sp, #48]	; 0x30
   141a0:	bne	14298 <__assert_fail@plt+0x2b94>
   141a4:	ldr	r6, [r6, #4]
   141a8:	movw	r1, #59572	; 0xe8b4
   141ac:	movt	r1, #1
   141b0:	mov	r2, #5
   141b4:	cmp	r6, #0
   141b8:	beq	142ac <__assert_fail@plt+0x2ba8>
   141bc:	mov	r0, #0
   141c0:	bl	113bc <dcgettext@plt>
   141c4:	mov	r1, r0
   141c8:	movw	r3, #59596	; 0xe8cc
   141cc:	movt	r3, #1
   141d0:	movw	r2, #59636	; 0xe8f4
   141d4:	movt	r2, #1
   141d8:	mov	r0, #1
   141dc:	bl	1159c <__printf_chk@plt>
   141e0:	mov	r1, #0
   141e4:	mov	r0, #5
   141e8:	bl	11614 <setlocale@plt>
   141ec:	cmp	r0, #0
   141f0:	movweq	r7, #57260	; 0xdfac
   141f4:	movteq	r7, #1
   141f8:	beq	1421c <__assert_fail@plt+0x2b18>
   141fc:	movw	r1, #59652	; 0xe904
   14200:	movt	r1, #1
   14204:	mov	r2, #3
   14208:	movw	r7, #57260	; 0xdfac
   1420c:	movt	r7, #1
   14210:	bl	116d4 <strncmp@plt>
   14214:	cmp	r0, #0
   14218:	bne	14364 <__assert_fail@plt+0x2c60>
   1421c:	mov	r2, #5
   14220:	movw	r1, #59728	; 0xe950
   14224:	movt	r1, #1
   14228:	mov	r0, #0
   1422c:	bl	113bc <dcgettext@plt>
   14230:	mov	r1, r0
   14234:	movw	r3, #57260	; 0xdfac
   14238:	movt	r3, #1
   1423c:	movw	r2, #59596	; 0xe8cc
   14240:	movt	r2, #1
   14244:	mov	r0, #1
   14248:	bl	1159c <__printf_chk@plt>
   1424c:	mov	r2, #5
   14250:	movw	r1, #59756	; 0xe96c
   14254:	movt	r1, #1
   14258:	mov	r0, #0
   1425c:	bl	113bc <dcgettext@plt>
   14260:	movw	r2, #60428	; 0xec0c
   14264:	movt	r2, #1
   14268:	cmp	r6, r7
   1426c:	movw	r3, #61172	; 0xeef4
   14270:	movt	r3, #1
   14274:	mov	r1, r0
   14278:	moveq	r3, r2
   1427c:	mov	r2, r6
   14280:	mov	r0, #1
   14284:	bl	1159c <__printf_chk@plt>
   14288:	b	13fb4 <__assert_fail@plt+0x28b0>
   1428c:	ldr	r1, [r6, #8]!
   14290:	cmp	r1, #0
   14294:	beq	141a4 <__assert_fail@plt+0x2aa0>
   14298:	mov	r0, r7
   1429c:	bl	11320 <strcmp@plt>
   142a0:	cmp	r0, #0
   142a4:	bne	1428c <__assert_fail@plt+0x2b88>
   142a8:	b	141a4 <__assert_fail@plt+0x2aa0>
   142ac:	mov	r0, r6
   142b0:	bl	113bc <dcgettext@plt>
   142b4:	mov	r1, r0
   142b8:	movw	r3, #59596	; 0xe8cc
   142bc:	movt	r3, #1
   142c0:	movw	r2, #59636	; 0xe8f4
   142c4:	movt	r2, #1
   142c8:	mov	r0, #1
   142cc:	bl	1159c <__printf_chk@plt>
   142d0:	mov	r1, r6
   142d4:	mov	r0, #5
   142d8:	bl	11614 <setlocale@plt>
   142dc:	cmp	r0, #0
   142e0:	beq	142fc <__assert_fail@plt+0x2bf8>
   142e4:	movw	r1, #59652	; 0xe904
   142e8:	movt	r1, #1
   142ec:	mov	r2, #3
   142f0:	bl	116d4 <strncmp@plt>
   142f4:	cmp	r0, #0
   142f8:	bne	14358 <__assert_fail@plt+0x2c54>
   142fc:	mov	r2, #5
   14300:	movw	r1, #59728	; 0xe950
   14304:	movt	r1, #1
   14308:	mov	r0, #0
   1430c:	bl	113bc <dcgettext@plt>
   14310:	mov	r1, r0
   14314:	movw	r3, #57260	; 0xdfac
   14318:	movt	r3, #1
   1431c:	movw	r2, #59596	; 0xe8cc
   14320:	movt	r2, #1
   14324:	mov	r0, #1
   14328:	bl	1159c <__printf_chk@plt>
   1432c:	movw	r1, #59756	; 0xe96c
   14330:	movt	r1, #1
   14334:	mov	r2, #5
   14338:	mov	r0, #0
   1433c:	bl	113bc <dcgettext@plt>
   14340:	movw	r6, #57260	; 0xdfac
   14344:	movt	r6, #1
   14348:	movw	r3, #60428	; 0xec0c
   1434c:	movt	r3, #1
   14350:	mov	r1, r0
   14354:	b	1427c <__assert_fail@plt+0x2b78>
   14358:	movw	r7, #57260	; 0xdfac
   1435c:	movt	r7, #1
   14360:	mov	r6, r7
   14364:	mov	r2, #5
   14368:	movw	r1, #59656	; 0xe908
   1436c:	movt	r1, #1
   14370:	mov	r0, #0
   14374:	bl	113bc <dcgettext@plt>
   14378:	ldr	r1, [r5]
   1437c:	bl	112f0 <fputs_unlocked@plt>
   14380:	b	1421c <__assert_fail@plt+0x2b18>
   14384:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14388:	strd	r6, [sp, #8]
   1438c:	strd	r8, [sp, #16]
   14390:	movw	r8, #380	; 0x17c
   14394:	movt	r8, #3
   14398:	strd	sl, [sp, #24]
   1439c:	movw	r9, #59856	; 0xe9d0
   143a0:	movt	r9, #1
   143a4:	str	lr, [sp, #32]
   143a8:	sub	sp, sp, #12
   143ac:	movw	sl, #59864	; 0xe9d8
   143b0:	movt	sl, #1
   143b4:	bl	1b348 <__assert_fail@plt+0x9c44>
   143b8:	mov	r5, r0
   143bc:	str	r0, [sp, #4]
   143c0:	mov	r1, #44	; 0x2c
   143c4:	mov	r0, r5
   143c8:	ldr	fp, [pc, #280]	; 144e8 <__assert_fail@plt+0x2de4>
   143cc:	bl	11548 <strchr@plt>
   143d0:	subs	r7, r0, #0
   143d4:	mov	r4, #0
   143d8:	movne	r3, #0
   143dc:	strbne	r3, [r7], #1
   143e0:	mov	r1, r5
   143e4:	ldr	r0, [fp, #4]
   143e8:	bl	11320 <strcmp@plt>
   143ec:	subs	r6, r0, #0
   143f0:	beq	14440 <__assert_fail@plt+0x2d3c>
   143f4:	add	r4, r4, #1
   143f8:	add	fp, fp, #28
   143fc:	cmp	r4, #12
   14400:	bne	143e0 <__assert_fail@plt+0x2cdc>
   14404:	movw	r1, #59872	; 0xe9e0
   14408:	movt	r1, #1
   1440c:	mov	r2, #5
   14410:	mov	r0, #0
   14414:	bl	113bc <dcgettext@plt>
   14418:	mov	r4, r0
   1441c:	mov	r0, r5
   14420:	bl	1a6e4 <__assert_fail@plt+0x8fe0>
   14424:	mov	r1, #0
   14428:	mov	r3, r0
   1442c:	mov	r2, r4
   14430:	mov	r0, r1
   14434:	bl	11494 <error@plt>
   14438:	mov	r0, #1
   1443c:	bl	13f64 <__assert_fail@plt+0x2860>
   14440:	rsb	r5, r4, r4, lsl #3
   14444:	add	r5, r8, r5, lsl #2
   14448:	ldrb	r3, [r5, #28]
   1444c:	cmp	r3, #0
   14450:	bne	144cc <__assert_fail@plt+0x2dc8>
   14454:	sub	r3, r4, #2
   14458:	cmp	r3, #2
   1445c:	ldrls	pc, [pc, r3, lsl #2]
   14460:	b	144bc <__assert_fail@plt+0x2db8>
   14464:	andeq	r4, r1, r0, ror r4
   14468:			; <UNDEFINED> instruction: 0x000144bc
   1446c:	andeq	r4, r1, ip, lsr #9
   14470:	mov	r1, r9
   14474:	mov	r0, #2
   14478:	bl	13278 <__assert_fail@plt+0x1b74>
   1447c:	cmp	r7, #0
   14480:	mov	r5, r7
   14484:	bne	143c0 <__assert_fail@plt+0x2cbc>
   14488:	ldr	r0, [sp, #4]
   1448c:	add	sp, sp, #12
   14490:	ldrd	r4, [sp]
   14494:	ldrd	r6, [sp, #8]
   14498:	ldrd	r8, [sp, #16]
   1449c:	ldrd	sl, [sp, #24]
   144a0:	ldr	lr, [sp, #32]
   144a4:	add	sp, sp, #36	; 0x24
   144a8:	b	15214 <__assert_fail@plt+0x3b10>
   144ac:	mov	r1, sl
   144b0:	mov	r0, #4
   144b4:	bl	13278 <__assert_fail@plt+0x1b74>
   144b8:	b	1447c <__assert_fail@plt+0x2d78>
   144bc:	mov	r0, r4
   144c0:	mov	r1, #0
   144c4:	bl	13278 <__assert_fail@plt+0x1b74>
   144c8:	b	1447c <__assert_fail@plt+0x2d78>
   144cc:	movw	r1, #59808	; 0xe9a0
   144d0:	movt	r1, #1
   144d4:	mov	r2, #5
   144d8:	bl	113bc <dcgettext@plt>
   144dc:	mov	r4, r0
   144e0:	ldr	r0, [r5, #8]
   144e4:	b	14420 <__assert_fail@plt+0x2d1c>
   144e8:	andeq	r0, r3, r0, lsl #3
   144ec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   144f0:	strd	r6, [sp, #8]
   144f4:	mov	r7, r1
   144f8:	strd	r8, [sp, #16]
   144fc:	mov	r8, r0
   14500:	str	fp, [sp, #24]
   14504:	add	fp, sp, #28
   14508:	str	lr, [sp, #28]
   1450c:	sub	sp, sp, #216	; 0xd8
   14510:	sub	r0, fp, #244	; 0xf4
   14514:	bl	1a6fc <__assert_fail@plt+0x8ff8>
   14518:	mov	r4, r0
   1451c:	bl	1156c <__errno_location@plt>
   14520:	cmp	r4, #0
   14524:	mov	r6, r0
   14528:	bne	14758 <__assert_fail@plt+0x3054>
   1452c:	ldr	r3, [r7, #16]
   14530:	and	r3, r3, #61440	; 0xf000
   14534:	cmp	r3, #16384	; 0x4000
   14538:	beq	146a0 <__assert_fail@plt+0x2f9c>
   1453c:	mov	r0, r8
   14540:	bl	15010 <__assert_fail@plt+0x390c>
   14544:	mov	r5, r0
   14548:	bl	1153c <strlen@plt>
   1454c:	add	r3, r0, #8
   14550:	add	r2, r0, #1
   14554:	bic	r3, r3, #7
   14558:	mov	r1, r5
   1455c:	sub	sp, sp, r3
   14560:	mov	r0, sp
   14564:	bl	11374 <memcpy@plt>
   14568:	mov	r7, r0
   1456c:	mov	r0, r5
   14570:	bl	15214 <__assert_fail@plt+0x3b10>
   14574:	mov	r0, r7
   14578:	bl	11404 <chdir@plt>
   1457c:	cmp	r0, #0
   14580:	blt	14788 <__assert_fail@plt+0x3084>
   14584:	sub	r5, fp, #236	; 0xec
   14588:	movw	r1, #60912	; 0xedf0
   1458c:	movt	r1, #1
   14590:	mov	r2, r5
   14594:	mov	r0, #3
   14598:	bl	116bc <__xstat64@plt>
   1459c:	cmp	r0, #0
   145a0:	blt	14708 <__assert_fail@plt+0x3004>
   145a4:	movw	r4, #60956	; 0xee1c
   145a8:	movt	r4, #1
   145ac:	b	145f8 <__assert_fail@plt+0x2ef4>
   145b0:	ldrd	r2, [fp, #-236]	; 0xffffff14
   145b4:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   145b8:	cmp	r1, r3
   145bc:	cmpeq	r0, r2
   145c0:	bne	14658 <__assert_fail@plt+0x2f54>
   145c4:	ldrd	r2, [fp, #-140]	; 0xffffff74
   145c8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   145cc:	cmp	r1, r3
   145d0:	cmpeq	r0, r2
   145d4:	beq	14658 <__assert_fail@plt+0x2f54>
   145d8:	mov	r0, r4
   145dc:	bl	11404 <chdir@plt>
   145e0:	cmp	r0, #0
   145e4:	blt	1474c <__assert_fail@plt+0x3048>
   145e8:	mov	r2, #104	; 0x68
   145ec:	sub	r1, fp, #132	; 0x84
   145f0:	mov	r0, r5
   145f4:	bl	11374 <memcpy@plt>
   145f8:	sub	r2, fp, #132	; 0x84
   145fc:	mov	r1, r4
   14600:	mov	r0, #3
   14604:	bl	116bc <__xstat64@plt>
   14608:	cmp	r0, #0
   1460c:	bge	145b0 <__assert_fail@plt+0x2eac>
   14610:	movw	r1, #60960	; 0xee20
   14614:	movt	r1, #1
   14618:	ldr	r4, [r6]
   1461c:	mov	r2, #5
   14620:	mov	r0, #0
   14624:	bl	113bc <dcgettext@plt>
   14628:	mov	r5, r0
   1462c:	movw	r1, #60956	; 0xee1c
   14630:	movt	r1, #1
   14634:	mov	r0, #4
   14638:	bl	1a430 <__assert_fail@plt+0x8d2c>
   1463c:	mov	r3, r0
   14640:	mov	r2, r5
   14644:	mov	r1, r4
   14648:	mov	r0, #0
   1464c:	bl	11494 <error@plt>
   14650:	mov	r5, #0
   14654:	b	14660 <__assert_fail@plt+0x2f5c>
   14658:	bl	1b3b4 <__assert_fail@plt+0x9cb0>
   1465c:	mov	r5, r0
   14660:	sub	r0, fp, #244	; 0xf4
   14664:	ldr	r4, [r6]
   14668:	bl	1a770 <__assert_fail@plt+0x906c>
   1466c:	cmp	r0, #0
   14670:	bne	147cc <__assert_fail@plt+0x30c8>
   14674:	sub	r0, fp, #244	; 0xf4
   14678:	bl	1a78c <__assert_fail@plt+0x9088>
   1467c:	str	r4, [r6]
   14680:	mov	r0, r5
   14684:	sub	sp, fp, #28
   14688:	ldrd	r4, [sp]
   1468c:	ldrd	r6, [sp, #8]
   14690:	ldrd	r8, [sp, #16]
   14694:	ldr	fp, [sp, #24]
   14698:	add	sp, sp, #28
   1469c:	pop	{pc}		; (ldr pc, [sp], #4)
   146a0:	sub	r5, fp, #236	; 0xec
   146a4:	mov	r1, r7
   146a8:	mov	r2, #104	; 0x68
   146ac:	mov	r0, r5
   146b0:	bl	11374 <memcpy@plt>
   146b4:	mov	r0, r8
   146b8:	bl	11404 <chdir@plt>
   146bc:	cmp	r0, #0
   146c0:	bge	145a4 <__assert_fail@plt+0x2ea0>
   146c4:	ldr	r6, [r6]
   146c8:	mov	r2, #5
   146cc:	mov	r0, r4
   146d0:	movw	r1, #60880	; 0xedd0
   146d4:	movt	r1, #1
   146d8:	bl	113bc <dcgettext@plt>
   146dc:	mov	r7, r0
   146e0:	mov	r1, r8
   146e4:	mov	r0, #4
   146e8:	mov	r5, r4
   146ec:	bl	1a430 <__assert_fail@plt+0x8d2c>
   146f0:	mov	r3, r0
   146f4:	mov	r2, r7
   146f8:	mov	r1, r6
   146fc:	mov	r0, r4
   14700:	bl	11494 <error@plt>
   14704:	b	14680 <__assert_fail@plt+0x2f7c>
   14708:	ldr	r8, [r6]
   1470c:	mov	r2, #5
   14710:	mov	r0, r4
   14714:	movw	r1, #60916	; 0xedf4
   14718:	movt	r1, #1
   1471c:	bl	113bc <dcgettext@plt>
   14720:	mov	r9, r0
   14724:	mov	r1, r7
   14728:	mov	r0, #4
   1472c:	mov	r5, r4
   14730:	bl	1a430 <__assert_fail@plt+0x8d2c>
   14734:	mov	r3, r0
   14738:	mov	r2, r9
   1473c:	mov	r1, r8
   14740:	mov	r0, r4
   14744:	bl	11494 <error@plt>
   14748:	b	14660 <__assert_fail@plt+0x2f5c>
   1474c:	movw	r1, #60880	; 0xedd0
   14750:	movt	r1, #1
   14754:	b	14618 <__assert_fail@plt+0x2f14>
   14758:	ldr	r4, [r6]
   1475c:	mov	r2, #5
   14760:	movw	r1, #60848	; 0xedb0
   14764:	movt	r1, #1
   14768:	mov	r0, #0
   1476c:	bl	113bc <dcgettext@plt>
   14770:	mov	r2, r0
   14774:	mov	r0, #0
   14778:	mov	r5, r0
   1477c:	mov	r1, r4
   14780:	bl	11494 <error@plt>
   14784:	b	14680 <__assert_fail@plt+0x2f7c>
   14788:	ldr	r6, [r6]
   1478c:	mov	r2, #5
   14790:	mov	r0, r4
   14794:	movw	r1, #60880	; 0xedd0
   14798:	movt	r1, #1
   1479c:	bl	113bc <dcgettext@plt>
   147a0:	mov	r8, r0
   147a4:	mov	r1, r7
   147a8:	mov	r0, #4
   147ac:	mov	r5, r4
   147b0:	bl	1a430 <__assert_fail@plt+0x8d2c>
   147b4:	mov	r3, r0
   147b8:	mov	r2, r8
   147bc:	mov	r1, r6
   147c0:	mov	r0, r4
   147c4:	bl	11494 <error@plt>
   147c8:	b	14680 <__assert_fail@plt+0x2f7c>
   147cc:	ldr	r4, [r6]
   147d0:	mov	r2, #5
   147d4:	movw	r1, #60976	; 0xee30
   147d8:	movt	r1, #1
   147dc:	mov	r0, #0
   147e0:	bl	113bc <dcgettext@plt>
   147e4:	mov	r2, r0
   147e8:	mov	r0, #1
   147ec:	mov	r1, r4
   147f0:	bl	11494 <error@plt>
   147f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   147f8:	strd	r6, [sp, #8]
   147fc:	strd	sl, [sp, #24]
   14800:	and	fp, r1, #3
   14804:	sub	r3, fp, #1
   14808:	strd	r8, [sp, #16]
   1480c:	tst	r3, fp
   14810:	str	lr, [sp, #32]
   14814:	sub	sp, sp, #3248	; 0xcb0
   14818:	sub	sp, sp, #4
   1481c:	bne	14938 <__assert_fail@plt+0x3234>
   14820:	cmp	r0, #0
   14824:	mov	r5, r0
   14828:	beq	14938 <__assert_fail@plt+0x3234>
   1482c:	ldrb	r9, [r0]
   14830:	cmp	r9, #0
   14834:	beq	14d08 <__assert_fail@plt+0x3604>
   14838:	add	r3, sp, #1184	; 0x4a0
   1483c:	cmp	r9, #47	; 0x2f
   14840:	add	r3, r3, #8
   14844:	mov	r7, r1
   14848:	addne	r4, sp, #160	; 0xa0
   1484c:	mov	r1, #1024	; 0x400
   14850:	str	r3, [sp, #1184]	; 0x4a0
   14854:	add	r3, sp, #160	; 0xa0
   14858:	str	r3, [sp, #152]	; 0x98
   1485c:	add	r3, sp, #2224	; 0x8b0
   14860:	str	r1, [sp, #156]	; 0x9c
   14864:	str	r1, [sp, #1188]	; 0x4a4
   14868:	str	r3, [sp, #2216]	; 0x8a8
   1486c:	movne	r3, r4
   14870:	subne	r6, r3, #8
   14874:	str	r1, [sp, #2220]	; 0x8ac
   14878:	beq	1494c <__assert_fail@plt+0x3248>
   1487c:	mov	r0, r4
   14880:	bl	11524 <getcwd@plt>
   14884:	cmp	r0, #0
   14888:	bne	14e84 <__assert_fail@plt+0x3780>
   1488c:	bl	1156c <__errno_location@plt>
   14890:	ldr	r3, [r0]
   14894:	cmp	r3, #12
   14898:	beq	14e60 <__assert_fail@plt+0x375c>
   1489c:	cmp	r3, #34	; 0x22
   148a0:	beq	1491c <__assert_fail@plt+0x3218>
   148a4:	mov	r6, r4
   148a8:	mov	r5, #1
   148ac:	ldr	r0, [sp, #1184]	; 0x4a0
   148b0:	add	r3, sp, #1184	; 0x4a0
   148b4:	add	r3, r3, #8
   148b8:	cmp	r0, r3
   148bc:	beq	148c4 <__assert_fail@plt+0x31c0>
   148c0:	bl	15214 <__assert_fail@plt+0x3b10>
   148c4:	ldr	r0, [sp, #2216]	; 0x8a8
   148c8:	add	r3, sp, #2224	; 0x8b0
   148cc:	cmp	r0, r3
   148d0:	beq	148d8 <__assert_fail@plt+0x31d4>
   148d4:	bl	15214 <__assert_fail@plt+0x3b10>
   148d8:	cmp	r5, #0
   148dc:	bne	14ce8 <__assert_fail@plt+0x35e4>
   148e0:	add	r0, sp, #152	; 0x98
   148e4:	strb	r5, [r4], #1
   148e8:	sub	r1, r4, r6
   148ec:	bl	1a7bc <__assert_fail@plt+0x90b8>
   148f0:	subs	r9, r0, #0
   148f4:	beq	14e60 <__assert_fail@plt+0x375c>
   148f8:	mov	r0, r9
   148fc:	add	sp, sp, #3248	; 0xcb0
   14900:	add	sp, sp, #4
   14904:	ldrd	r4, [sp]
   14908:	ldrd	r6, [sp, #8]
   1490c:	ldrd	r8, [sp, #16]
   14910:	ldrd	sl, [sp, #24]
   14914:	add	sp, sp, #32
   14918:	pop	{pc}		; (ldr pc, [sp], #4)
   1491c:	mov	r0, r6
   14920:	bl	1a82c <__assert_fail@plt+0x9128>
   14924:	cmp	r0, #0
   14928:	beq	14e60 <__assert_fail@plt+0x375c>
   1492c:	ldr	r4, [sp, #152]	; 0x98
   14930:	ldr	r1, [sp, #156]	; 0x9c
   14934:	b	1487c <__assert_fail@plt+0x3178>
   14938:	bl	1156c <__errno_location@plt>
   1493c:	mov	r3, #22
   14940:	mov	r9, #0
   14944:	str	r3, [r0]
   14948:	b	148f8 <__assert_fail@plt+0x31f4>
   1494c:	add	r6, sp, #160	; 0xa0
   14950:	strb	r9, [sp, #160]	; 0xa0
   14954:	add	r4, r6, #1
   14958:	mov	r3, #0
   1495c:	and	r2, r7, #4
   14960:	str	r2, [sp, #12]
   14964:	str	r3, [sp, #20]
   14968:	str	r3, [sp, #28]
   1496c:	str	r3, [sp, #32]
   14970:	movw	r3, #61040	; 0xee70
   14974:	movt	r3, #1
   14978:	str	fp, [sp, #16]
   1497c:	str	r3, [sp, #24]
   14980:	movw	r3, #60912	; 0xedf0
   14984:	movt	r3, #1
   14988:	str	r3, [sp, #36]	; 0x24
   1498c:	movw	r3, #26248	; 0x6688
   14990:	movt	r3, #1
   14994:	str	r3, [sp, #40]	; 0x28
   14998:	cmp	r9, #0
   1499c:	beq	14de4 <__assert_fail@plt+0x36e0>
   149a0:	cmp	r9, #47	; 0x2f
   149a4:	movne	r3, r9
   149a8:	bne	149c0 <__assert_fail@plt+0x32bc>
   149ac:	ldrb	r3, [r5, #1]!
   149b0:	cmp	r3, #47	; 0x2f
   149b4:	beq	149ac <__assert_fail@plt+0x32a8>
   149b8:	cmp	r3, #0
   149bc:	beq	14de4 <__assert_fail@plt+0x36e0>
   149c0:	mov	r8, r5
   149c4:	b	149cc <__assert_fail@plt+0x32c8>
   149c8:	mov	r8, r7
   149cc:	ldrb	r9, [r8, #1]
   149d0:	add	r7, r8, #1
   149d4:	cmp	r9, #0
   149d8:	cmpne	r9, #47	; 0x2f
   149dc:	bne	149c8 <__assert_fail@plt+0x32c4>
   149e0:	subs	sl, r7, r5
   149e4:	beq	14de4 <__assert_fail@plt+0x36e0>
   149e8:	cmp	sl, #1
   149ec:	beq	14c50 <__assert_fail@plt+0x354c>
   149f0:	cmp	r3, #46	; 0x2e
   149f4:	cmpeq	sl, #2
   149f8:	beq	14c5c <__assert_fail@plt+0x3558>
   149fc:	ldrb	r3, [r4, #-1]
   14a00:	cmp	r3, #47	; 0x2f
   14a04:	beq	14a10 <__assert_fail@plt+0x330c>
   14a08:	mov	r3, #47	; 0x2f
   14a0c:	strb	r3, [r4], #1
   14a10:	ldr	r3, [sp, #156]	; 0x9c
   14a14:	add	r9, sl, #2
   14a18:	add	r3, r6, r3
   14a1c:	sub	r3, r3, r4
   14a20:	cmp	r3, r9
   14a24:	bcs	14a54 <__assert_fail@plt+0x3350>
   14a28:	add	r0, sp, #152	; 0x98
   14a2c:	sub	r4, r4, r6
   14a30:	bl	1a8ac <__assert_fail@plt+0x91a8>
   14a34:	cmp	r0, #0
   14a38:	beq	14e60 <__assert_fail@plt+0x375c>
   14a3c:	ldr	r6, [sp, #152]	; 0x98
   14a40:	ldr	r3, [sp, #156]	; 0x9c
   14a44:	sub	r3, r3, r4
   14a48:	add	r4, r6, r4
   14a4c:	cmp	r3, r9
   14a50:	bcc	14a28 <__assert_fail@plt+0x3324>
   14a54:	mov	r2, sl
   14a58:	mov	r0, r4
   14a5c:	mov	r1, r5
   14a60:	bl	11500 <mempcpy@plt>
   14a64:	ldr	r2, [sp, #12]
   14a68:	mov	r3, #0
   14a6c:	mov	r4, r0
   14a70:	strb	r3, [r0]
   14a74:	cmp	r2, r3
   14a78:	beq	14b50 <__assert_fail@plt+0x344c>
   14a7c:	ldr	r3, [sp, #16]
   14a80:	ldrb	r9, [r8, #1]
   14a84:	cmp	r3, #2
   14a88:	movne	r3, r7
   14a8c:	movne	r1, r9
   14a90:	beq	14b48 <__assert_fail@plt+0x3444>
   14a94:	cmp	r1, #47	; 0x2f
   14a98:	beq	14aa4 <__assert_fail@plt+0x33a0>
   14a9c:	b	14aec <__assert_fail@plt+0x33e8>
   14aa0:	mov	r3, r0
   14aa4:	ldrb	r2, [r3, #1]
   14aa8:	add	r0, r3, #1
   14aac:	cmp	r2, #47	; 0x2f
   14ab0:	beq	14aa0 <__assert_fail@plt+0x339c>
   14ab4:	cmp	r2, #0
   14ab8:	add	r3, r3, #2
   14abc:	beq	14cbc <__assert_fail@plt+0x35b8>
   14ac0:	cmp	r2, #46	; 0x2e
   14ac4:	bne	14aec <__assert_fail@plt+0x33e8>
   14ac8:	ldrb	r1, [r0, #1]
   14acc:	cmp	r1, #0
   14ad0:	beq	14cbc <__assert_fail@plt+0x35b8>
   14ad4:	cmp	r1, #46	; 0x2e
   14ad8:	bne	14a94 <__assert_fail@plt+0x3390>
   14adc:	ldrb	r3, [r0, #2]
   14ae0:	cmp	r3, #47	; 0x2f
   14ae4:	cmpne	r3, #0
   14ae8:	beq	14cbc <__assert_fail@plt+0x35b8>
   14aec:	ldr	r3, [sp, #12]
   14af0:	cmp	r3, #0
   14af4:	bne	14c94 <__assert_fail@plt+0x3590>
   14af8:	bl	1156c <__errno_location@plt>
   14afc:	ldr	r5, [r0]
   14b00:	subs	r5, r5, #22
   14b04:	movne	r5, #1
   14b08:	cmp	r5, #0
   14b0c:	beq	14b44 <__assert_fail@plt+0x3440>
   14b10:	ldr	r3, [sp, #16]
   14b14:	cmp	r3, #1
   14b18:	bne	14c38 <__assert_fail@plt+0x3534>
   14b1c:	bl	1156c <__errno_location@plt>
   14b20:	ldr	r3, [r0]
   14b24:	cmp	r3, #2
   14b28:	bne	14c38 <__assert_fail@plt+0x3534>
   14b2c:	mov	r0, r7
   14b30:	ldr	r1, [sp, #24]
   14b34:	bl	116f8 <strspn@plt>
   14b38:	ldrb	r3, [r7, r0]
   14b3c:	cmp	r3, #0
   14b40:	bne	14c38 <__assert_fail@plt+0x3534>
   14b44:	ldrb	r9, [r8, #1]
   14b48:	mov	r5, r7
   14b4c:	b	14998 <__assert_fail@plt+0x3294>
   14b50:	add	r3, sp, #2224	; 0x8b0
   14b54:	sub	r9, r3, #8
   14b58:	b	14b6c <__assert_fail@plt+0x3468>
   14b5c:	mov	r0, r9
   14b60:	bl	1a82c <__assert_fail@plt+0x9128>
   14b64:	cmp	r0, #0
   14b68:	beq	14e60 <__assert_fail@plt+0x375c>
   14b6c:	ldr	sl, [sp, #2216]	; 0x8a8
   14b70:	mov	r0, r6
   14b74:	ldr	fp, [sp, #2220]	; 0x8ac
   14b78:	mov	r1, sl
   14b7c:	sub	fp, fp, #1
   14b80:	mov	r2, fp
   14b84:	bl	11428 <readlink@plt>
   14b88:	cmp	fp, r0
   14b8c:	ble	14b5c <__assert_fail@plt+0x3458>
   14b90:	cmp	r0, #0
   14b94:	mov	r9, r0
   14b98:	blt	14a7c <__assert_fail@plt+0x3378>
   14b9c:	ldr	r3, [sp, #32]
   14ba0:	cmp	r3, #19
   14ba4:	addle	r3, r3, #1
   14ba8:	strle	r3, [sp, #32]
   14bac:	ble	14d28 <__assert_fail@plt+0x3624>
   14bb0:	ldrb	r3, [r5]
   14bb4:	cmp	r3, #0
   14bb8:	beq	14d28 <__assert_fail@plt+0x3624>
   14bbc:	mov	r3, #0
   14bc0:	sub	fp, r5, r7
   14bc4:	mov	r0, #3
   14bc8:	add	r2, sp, #48	; 0x30
   14bcc:	strb	r3, [r4, fp]
   14bd0:	ldrb	r1, [r6]
   14bd4:	ldr	r3, [sp, #36]	; 0x24
   14bd8:	cmp	r1, #0
   14bdc:	movne	r3, r6
   14be0:	mov	r1, r3
   14be4:	bl	116bc <__xstat64@plt>
   14be8:	cmp	r0, #0
   14bec:	bne	14c34 <__assert_fail@plt+0x3530>
   14bf0:	ldr	r2, [sp, #20]
   14bf4:	ldrb	r3, [r5]
   14bf8:	cmp	r2, #0
   14bfc:	strb	r3, [r4, fp]
   14c00:	beq	14e30 <__assert_fail@plt+0x372c>
   14c04:	add	r2, sp, #48	; 0x30
   14c08:	mov	r1, r5
   14c0c:	ldr	r0, [sp, #20]
   14c10:	bl	151c0 <__assert_fail@plt+0x3abc>
   14c14:	cmp	r0, #0
   14c18:	beq	14d18 <__assert_fail@plt+0x3614>
   14c1c:	ldr	r3, [sp, #16]
   14c20:	cmp	r3, #2
   14c24:	beq	14b44 <__assert_fail@plt+0x3440>
   14c28:	bl	1156c <__errno_location@plt>
   14c2c:	mov	r3, #40	; 0x28
   14c30:	str	r3, [r0]
   14c34:	mov	r5, #1
   14c38:	ldr	r3, [sp, #20]
   14c3c:	cmp	r3, #0
   14c40:	beq	148ac <__assert_fail@plt+0x31a8>
   14c44:	mov	r0, r3
   14c48:	bl	16054 <__assert_fail@plt+0x4950>
   14c4c:	b	148ac <__assert_fail@plt+0x31a8>
   14c50:	cmp	r3, #46	; 0x2e
   14c54:	bne	149fc <__assert_fail@plt+0x32f8>
   14c58:	b	14b48 <__assert_fail@plt+0x3444>
   14c5c:	ldrb	r3, [r5, #1]
   14c60:	cmp	r3, #46	; 0x2e
   14c64:	bne	149fc <__assert_fail@plt+0x32f8>
   14c68:	add	r3, r6, #1
   14c6c:	cmp	r4, r3
   14c70:	bls	14b48 <__assert_fail@plt+0x3444>
   14c74:	sub	r3, r4, #1
   14c78:	cmp	r6, r3
   14c7c:	bcs	14c8c <__assert_fail@plt+0x3588>
   14c80:	ldrb	r2, [r4, #-2]
   14c84:	cmp	r2, #47	; 0x2f
   14c88:	bne	14e64 <__assert_fail@plt+0x3760>
   14c8c:	mov	r4, r3
   14c90:	b	14b48 <__assert_fail@plt+0x3444>
   14c94:	cmp	r9, #0
   14c98:	bne	14b48 <__assert_fail@plt+0x3444>
   14c9c:	mov	r2, r9
   14ca0:	mov	r3, #512	; 0x200
   14ca4:	mov	r1, r6
   14ca8:	mvn	r0, #99	; 0x63
   14cac:	bl	1135c <faccessat@plt>
   14cb0:	adds	r5, r0, #0
   14cb4:	movne	r5, #1
   14cb8:	b	14b08 <__assert_fail@plt+0x3404>
   14cbc:	ldr	r3, [sp, #24]
   14cc0:	mov	r2, #0
   14cc4:	mov	r1, r6
   14cc8:	mvn	r0, #99	; 0x63
   14ccc:	ldrh	ip, [r3]
   14cd0:	mov	r3, #512	; 0x200
   14cd4:	strh	ip, [r4]
   14cd8:	bl	1135c <faccessat@plt>
   14cdc:	adds	r5, r0, #0
   14ce0:	movne	r5, #1
   14ce4:	b	14b08 <__assert_fail@plt+0x3404>
   14ce8:	ldr	r0, [sp, #152]	; 0x98
   14cec:	add	r3, sp, #160	; 0xa0
   14cf0:	cmp	r0, r3
   14cf4:	moveq	r9, #0
   14cf8:	beq	148f8 <__assert_fail@plt+0x31f4>
   14cfc:	bl	15214 <__assert_fail@plt+0x3b10>
   14d00:	mov	r9, #0
   14d04:	b	148f8 <__assert_fail@plt+0x31f4>
   14d08:	bl	1156c <__errno_location@plt>
   14d0c:	mov	r3, #2
   14d10:	str	r3, [r0]
   14d14:	b	148f8 <__assert_fail@plt+0x31f4>
   14d18:	add	r2, sp, #48	; 0x30
   14d1c:	mov	r1, r5
   14d20:	ldr	r0, [sp, #20]
   14d24:	bl	15128 <__assert_fail@plt+0x3a24>
   14d28:	ldr	r2, [sp, #28]
   14d2c:	mov	r3, #0
   14d30:	mov	r0, r7
   14d34:	strb	r3, [sl, r9]
   14d38:	ldr	fp, [sp, #1184]	; 0x4a0
   14d3c:	cmp	r2, r3
   14d40:	beq	14e0c <__assert_fail@plt+0x3708>
   14d44:	sub	r3, r7, fp
   14d48:	str	r3, [sp, #44]	; 0x2c
   14d4c:	bl	1153c <strlen@plt>
   14d50:	ldr	r2, [sp, #1188]	; 0x4a4
   14d54:	add	r5, r0, r9
   14d58:	mov	r8, r0
   14d5c:	cmp	r5, r2
   14d60:	bcc	14d90 <__assert_fail@plt+0x368c>
   14d64:	add	r0, sp, #1184	; 0x4a0
   14d68:	bl	1a8ac <__assert_fail@plt+0x91a8>
   14d6c:	cmp	r0, #0
   14d70:	beq	14e60 <__assert_fail@plt+0x375c>
   14d74:	ldr	r3, [sp, #1188]	; 0x4a4
   14d78:	cmp	r3, r5
   14d7c:	bls	14d64 <__assert_fail@plt+0x3660>
   14d80:	ldr	r3, [sp, #28]
   14d84:	ldr	fp, [sp, #1184]	; 0x4a0
   14d88:	cmp	r3, #0
   14d8c:	beq	14d98 <__assert_fail@plt+0x3694>
   14d90:	ldr	r3, [sp, #44]	; 0x2c
   14d94:	add	r7, fp, r3
   14d98:	mov	r1, r7
   14d9c:	add	r2, r8, #1
   14da0:	add	r0, fp, r9
   14da4:	bl	11344 <memmove@plt>
   14da8:	mov	r2, r9
   14dac:	mov	r1, sl
   14db0:	mov	r0, fp
   14db4:	bl	11374 <memcpy@plt>
   14db8:	ldrb	r3, [sl]
   14dbc:	mov	r7, r0
   14dc0:	add	r2, r6, #1
   14dc4:	cmp	r3, #47	; 0x2f
   14dc8:	beq	14edc <__assert_fail@plt+0x37d8>
   14dcc:	cmp	r4, r2
   14dd0:	ldrb	r9, [r0]
   14dd4:	bhi	14ea0 <__assert_fail@plt+0x379c>
   14dd8:	mov	r3, #1
   14ddc:	str	r3, [sp, #28]
   14de0:	b	14b48 <__assert_fail@plt+0x3444>
   14de4:	add	r3, r6, #1
   14de8:	cmp	r4, r3
   14dec:	bls	14e04 <__assert_fail@plt+0x3700>
   14df0:	ldrb	r3, [r4, #-1]
   14df4:	cmp	r3, #47	; 0x2f
   14df8:	subeq	r4, r4, #1
   14dfc:	moveq	r5, #0
   14e00:	beq	14c38 <__assert_fail@plt+0x3534>
   14e04:	mov	r5, #0
   14e08:	b	14c38 <__assert_fail@plt+0x3534>
   14e0c:	bl	1153c <strlen@plt>
   14e10:	ldr	r2, [sp, #1188]	; 0x4a4
   14e14:	add	r5, r9, r0
   14e18:	mov	r8, r0
   14e1c:	cmp	r5, r2
   14e20:	bcc	14d98 <__assert_fail@plt+0x3694>
   14e24:	ldr	r3, [sp, #28]
   14e28:	str	r3, [sp, #44]	; 0x2c
   14e2c:	b	14d64 <__assert_fail@plt+0x3660>
   14e30:	ldr	ip, [sp, #40]	; 0x28
   14e34:	mov	r1, r2
   14e38:	movw	r3, #26140	; 0x661c
   14e3c:	movt	r3, #1
   14e40:	movw	r2, #26068	; 0x65d4
   14e44:	movt	r2, #1
   14e48:	mov	r0, #7
   14e4c:	str	ip, [sp]
   14e50:	bl	15e20 <__assert_fail@plt+0x471c>
   14e54:	subs	r3, r0, #0
   14e58:	str	r3, [sp, #20]
   14e5c:	bne	14c04 <__assert_fail@plt+0x3500>
   14e60:	bl	1b370 <__assert_fail@plt+0x9c6c>
   14e64:	sub	r3, r4, #2
   14e68:	cmp	r6, r3
   14e6c:	mov	r4, r3
   14e70:	beq	14b48 <__assert_fail@plt+0x3444>
   14e74:	ldrb	r2, [r3, #-1]!
   14e78:	cmp	r2, #47	; 0x2f
   14e7c:	beq	14b48 <__assert_fail@plt+0x3444>
   14e80:	b	14e68 <__assert_fail@plt+0x3764>
   14e84:	mov	r0, r4
   14e88:	mov	r1, #0
   14e8c:	bl	113f8 <rawmemchr@plt>
   14e90:	mov	r6, r4
   14e94:	ldrb	r9, [r5]
   14e98:	mov	r4, r0
   14e9c:	b	14958 <__assert_fail@plt+0x3254>
   14ea0:	sub	r3, r4, #1
   14ea4:	cmp	r3, r6
   14ea8:	bls	14ef4 <__assert_fail@plt+0x37f0>
   14eac:	ldrb	r2, [r4, #-2]
   14eb0:	cmp	r2, #47	; 0x2f
   14eb4:	beq	14ef4 <__assert_fail@plt+0x37f0>
   14eb8:	sub	r3, r4, #2
   14ebc:	cmp	r6, r3
   14ec0:	mov	r4, r3
   14ec4:	beq	14dd8 <__assert_fail@plt+0x36d4>
   14ec8:	ldrb	r2, [r3, #-1]
   14ecc:	sub	r3, r3, #1
   14ed0:	cmp	r2, #47	; 0x2f
   14ed4:	beq	14dd8 <__assert_fail@plt+0x36d4>
   14ed8:	b	14ebc <__assert_fail@plt+0x37b8>
   14edc:	mov	r4, r2
   14ee0:	mov	r2, #1
   14ee4:	strb	r3, [r6]
   14ee8:	ldrb	r9, [r0]
   14eec:	str	r2, [sp, #28]
   14ef0:	b	14b48 <__assert_fail@plt+0x3444>
   14ef4:	mov	r4, r3
   14ef8:	mov	r3, #1
   14efc:	str	r3, [sp, #28]
   14f00:	b	14b48 <__assert_fail@plt+0x3444>
   14f04:	movw	r3, #952	; 0x3b8
   14f08:	movt	r3, #3
   14f0c:	str	r0, [r3]
   14f10:	bx	lr
   14f14:	movw	r3, #952	; 0x3b8
   14f18:	movt	r3, #3
   14f1c:	strb	r0, [r3, #4]
   14f20:	bx	lr
   14f24:	movw	r3, #820	; 0x334
   14f28:	movt	r3, #3
   14f2c:	strd	r4, [sp, #-16]!
   14f30:	ldr	r0, [r3]
   14f34:	str	r6, [sp, #8]
   14f38:	str	lr, [sp, #12]
   14f3c:	sub	sp, sp, #8
   14f40:	bl	1d0f8 <__assert_fail@plt+0xb9f4>
   14f44:	cmp	r0, #0
   14f48:	beq	14f74 <__assert_fail@plt+0x3870>
   14f4c:	movw	r4, #952	; 0x3b8
   14f50:	movt	r4, #3
   14f54:	ldrb	r6, [r4, #4]
   14f58:	bl	1156c <__errno_location@plt>
   14f5c:	mov	r5, r0
   14f60:	cmp	r6, #0
   14f64:	beq	14fa0 <__assert_fail@plt+0x389c>
   14f68:	ldr	r3, [r0]
   14f6c:	cmp	r3, #32
   14f70:	bne	14fa0 <__assert_fail@plt+0x389c>
   14f74:	movw	r3, #816	; 0x330
   14f78:	movt	r3, #3
   14f7c:	ldr	r0, [r3]
   14f80:	bl	1d0f8 <__assert_fail@plt+0xb9f4>
   14f84:	cmp	r0, #0
   14f88:	bne	14fe8 <__assert_fail@plt+0x38e4>
   14f8c:	add	sp, sp, #8
   14f90:	ldrd	r4, [sp]
   14f94:	ldr	r6, [sp, #8]
   14f98:	add	sp, sp, #12
   14f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa0:	movw	r1, #61044	; 0xee74
   14fa4:	movt	r1, #1
   14fa8:	mov	r2, #5
   14fac:	mov	r0, #0
   14fb0:	bl	113bc <dcgettext@plt>
   14fb4:	mov	r6, r0
   14fb8:	ldr	r0, [r4]
   14fbc:	cmp	r0, #0
   14fc0:	beq	14ff8 <__assert_fail@plt+0x38f4>
   14fc4:	ldr	r4, [r5]
   14fc8:	bl	1a4f8 <__assert_fail@plt+0x8df4>
   14fcc:	mov	r3, r0
   14fd0:	movw	r2, #61056	; 0xee80
   14fd4:	movt	r2, #1
   14fd8:	mov	r0, #0
   14fdc:	str	r6, [sp]
   14fe0:	mov	r1, r4
   14fe4:	bl	11494 <error@plt>
   14fe8:	movw	r3, #724	; 0x2d4
   14fec:	movt	r3, #3
   14ff0:	ldr	r0, [r3]
   14ff4:	bl	11368 <_exit@plt>
   14ff8:	mov	r3, r6
   14ffc:	movw	r2, #61060	; 0xee84
   15000:	movt	r2, #1
   15004:	ldr	r1, [r5]
   15008:	bl	11494 <error@plt>
   1500c:	b	14fe8 <__assert_fail@plt+0x38e4>
   15010:	str	r4, [sp, #-8]!
   15014:	str	lr, [sp, #4]
   15018:	bl	150b4 <__assert_fail@plt+0x39b0>
   1501c:	cmp	r0, #0
   15020:	beq	15030 <__assert_fail@plt+0x392c>
   15024:	ldr	r4, [sp]
   15028:	add	sp, sp, #4
   1502c:	pop	{pc}		; (ldr pc, [sp], #4)
   15030:	bl	1b370 <__assert_fail@plt+0x9c6c>
   15034:	strd	r4, [sp, #-16]!
   15038:	mov	r4, r0
   1503c:	str	r6, [sp, #8]
   15040:	str	lr, [sp, #12]
   15044:	ldrb	ip, [r0]
   15048:	sub	r5, ip, #47	; 0x2f
   1504c:	clz	r5, r5
   15050:	bl	1cd14 <__assert_fail@plt+0xb610>
   15054:	lsr	r5, r5, #5
   15058:	sub	r0, r0, r4
   1505c:	cmp	r0, r5
   15060:	bls	150a4 <__assert_fail@plt+0x39a0>
   15064:	add	r3, r4, r0
   15068:	ldrb	r3, [r3, #-1]
   1506c:	cmp	r3, #47	; 0x2f
   15070:	bne	150a4 <__assert_fail@plt+0x39a0>
   15074:	sub	r0, r0, #2
   15078:	sub	ip, r4, #1
   1507c:	add	r3, r4, r0
   15080:	add	ip, ip, r5
   15084:	rsb	r2, r4, #1
   15088:	b	15098 <__assert_fail@plt+0x3994>
   1508c:	ldrb	r1, [r3], #-1
   15090:	cmp	r1, #47	; 0x2f
   15094:	bne	150a4 <__assert_fail@plt+0x39a0>
   15098:	cmp	r3, ip
   1509c:	add	r0, r2, r3
   150a0:	bne	1508c <__assert_fail@plt+0x3988>
   150a4:	ldrd	r4, [sp]
   150a8:	ldr	r6, [sp, #8]
   150ac:	add	sp, sp, #12
   150b0:	pop	{pc}		; (ldr pc, [sp], #4)
   150b4:	strd	r4, [sp, #-16]!
   150b8:	str	r6, [sp, #8]
   150bc:	mov	r6, r0
   150c0:	str	lr, [sp, #12]
   150c4:	bl	15034 <__assert_fail@plt+0x3930>
   150c8:	add	r3, r0, #1
   150cc:	mov	r4, r0
   150d0:	cmp	r0, #0
   150d4:	movne	r0, r3
   150d8:	addeq	r0, r3, #1
   150dc:	bl	1bea0 <__assert_fail@plt+0xa79c>
   150e0:	subs	r5, r0, #0
   150e4:	beq	15104 <__assert_fail@plt+0x3a00>
   150e8:	mov	r1, r6
   150ec:	mov	r2, r4
   150f0:	bl	11374 <memcpy@plt>
   150f4:	cmp	r4, #0
   150f8:	beq	15118 <__assert_fail@plt+0x3a14>
   150fc:	mov	r3, #0
   15100:	strb	r3, [r5, r4]
   15104:	mov	r0, r5
   15108:	ldrd	r4, [sp]
   1510c:	ldr	r6, [sp, #8]
   15110:	add	sp, sp, #12
   15114:	pop	{pc}		; (ldr pc, [sp], #4)
   15118:	mov	r3, #46	; 0x2e
   1511c:	mov	r4, #1
   15120:	strb	r3, [r5]
   15124:	b	150fc <__assert_fail@plt+0x39f8>
   15128:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1512c:	strd	r6, [sp, #8]
   15130:	str	r8, [sp, #16]
   15134:	subs	r8, r0, #0
   15138:	str	lr, [sp, #20]
   1513c:	beq	151a8 <__assert_fail@plt+0x3aa4>
   15140:	mov	r0, #24
   15144:	mov	r4, r1
   15148:	mov	r7, r2
   1514c:	bl	1aef8 <__assert_fail@plt+0x97f4>
   15150:	mov	r6, r0
   15154:	mov	r0, r4
   15158:	bl	1b348 <__assert_fail@plt+0x9c44>
   1515c:	ldrd	r4, [r7]
   15160:	mov	r1, r6
   15164:	str	r0, [r6]
   15168:	mov	r0, r8
   1516c:	ldrd	r2, [r7, #96]	; 0x60
   15170:	strd	r2, [r6, #8]
   15174:	strd	r4, [r6, #16]
   15178:	bl	16478 <__assert_fail@plt+0x4d74>
   1517c:	cmp	r0, #0
   15180:	beq	151bc <__assert_fail@plt+0x3ab8>
   15184:	cmp	r6, r0
   15188:	beq	151a8 <__assert_fail@plt+0x3aa4>
   1518c:	mov	r0, r6
   15190:	ldrd	r4, [sp]
   15194:	ldrd	r6, [sp, #8]
   15198:	ldr	r8, [sp, #16]
   1519c:	ldr	lr, [sp, #20]
   151a0:	add	sp, sp, #24
   151a4:	b	16688 <__assert_fail@plt+0x4f84>
   151a8:	ldrd	r4, [sp]
   151ac:	ldrd	r6, [sp, #8]
   151b0:	ldr	r8, [sp, #16]
   151b4:	add	sp, sp, #20
   151b8:	pop	{pc}		; (ldr pc, [sp], #4)
   151bc:	bl	1b370 <__assert_fail@plt+0x9c6c>
   151c0:	subs	r3, r0, #0
   151c4:	beq	1520c <__assert_fail@plt+0x3b08>
   151c8:	mov	r3, r1
   151cc:	strd	r4, [sp, #-12]!
   151d0:	ldrd	r4, [r2, #96]	; 0x60
   151d4:	str	lr, [sp, #8]
   151d8:	sub	sp, sp, #28
   151dc:	mov	r1, sp
   151e0:	str	r3, [sp]
   151e4:	ldrd	r2, [r2]
   151e8:	strd	r4, [sp, #8]
   151ec:	strd	r2, [sp, #16]
   151f0:	bl	15b00 <__assert_fail@plt+0x43fc>
   151f4:	adds	r0, r0, #0
   151f8:	movne	r0, #1
   151fc:	add	sp, sp, #28
   15200:	ldrd	r4, [sp]
   15204:	add	sp, sp, #8
   15208:	pop	{pc}		; (ldr pc, [sp], #4)
   1520c:	mov	r0, r3
   15210:	bx	lr
   15214:	strd	r4, [sp, #-12]!
   15218:	mov	r5, r0
   1521c:	str	lr, [sp, #8]
   15220:	sub	sp, sp, #12
   15224:	bl	1156c <__errno_location@plt>
   15228:	mov	r4, r0
   1522c:	mov	r2, #0
   15230:	ldr	r3, [r4]
   15234:	mov	r0, r5
   15238:	str	r2, [r4]
   1523c:	str	r3, [sp]
   15240:	str	r3, [sp, #4]
   15244:	bl	11350 <free@plt>
   15248:	ldr	r3, [r4]
   1524c:	add	r2, sp, #8
   15250:	clz	r3, r3
   15254:	lsr	r3, r3, #5
   15258:	add	r3, r2, r3, lsl #2
   1525c:	ldr	r3, [r3, #-8]
   15260:	str	r3, [r4]
   15264:	add	sp, sp, #12
   15268:	ldrd	r4, [sp]
   1526c:	add	sp, sp, #8
   15270:	pop	{pc}		; (ldr pc, [sp], #4)
   15274:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15278:	movw	r4, #728	; 0x2d8
   1527c:	movt	r4, #3
   15280:	ldr	r3, [r4]
   15284:	strd	r6, [sp, #8]
   15288:	mov	r6, r0
   1528c:	strd	r8, [sp, #16]
   15290:	str	sl, [sp, #24]
   15294:	mov	sl, r2
   15298:	str	lr, [sp, #28]
   1529c:	sub	sp, sp, #392	; 0x188
   152a0:	cmp	r3, #0
   152a4:	mov	r5, sp
   152a8:	blt	152e8 <__assert_fail@plt+0x3be4>
   152ac:	beq	15300 <__assert_fail@plt+0x3bfc>
   152b0:	mov	r1, r5
   152b4:	mov	r0, r6
   152b8:	bl	115a8 <statvfs64@plt>
   152bc:	cmp	r0, #0
   152c0:	blt	1539c <__assert_fail@plt+0x3c98>
   152c4:	ldr	r3, [sp, #4]
   152c8:	cmp	r3, #0
   152cc:	beq	153a4 <__assert_fail@plt+0x3ca0>
   152d0:	cmn	r3, #1
   152d4:	mov	r2, r3
   152d8:	movne	r3, #0
   152dc:	bne	153b0 <__assert_fail@plt+0x3cac>
   152e0:	mov	r3, r2
   152e4:	b	153b0 <__assert_fail@plt+0x3cac>
   152e8:	mov	r0, r5
   152ec:	bl	113b0 <uname@plt>
   152f0:	subs	r7, r0, #0
   152f4:	movne	r3, #0
   152f8:	strne	r3, [r4]
   152fc:	beq	15408 <__assert_fail@plt+0x3d04>
   15300:	mov	r1, r5
   15304:	mov	r0, r6
   15308:	bl	11638 <statfs64@plt>
   1530c:	cmp	r0, #0
   15310:	blt	1539c <__assert_fail@plt+0x3c98>
   15314:	mov	ip, #0
   15318:	ldrd	r4, [sp, #8]
   1531c:	mov	r0, ip
   15320:	ldr	r2, [sp, #60]	; 0x3c
   15324:	ldr	r1, [sp, #28]
   15328:	strd	r4, [sl, #8]
   1532c:	ldrd	r4, [sp, #40]	; 0x28
   15330:	cmn	r2, #1
   15334:	asrne	r3, r2, #31
   15338:	mvneq	r2, #0
   1533c:	mvneq	r3, #0
   15340:	rsbs	r6, ip, #0
   15344:	ldr	ip, [sp, #24]
   15348:	and	r7, r1, #-2147483648	; 0x80000000
   1534c:	rsc	r7, r7, #0
   15350:	orr	lr, r7, r1
   15354:	strd	r2, [sl]
   15358:	lsr	r1, r1, #31
   1535c:	ldrd	r2, [sp, #16]
   15360:	orr	ip, r6, ip
   15364:	ldrd	r6, [sp, #32]
   15368:	strd	r2, [sl, #16]
   1536c:	str	ip, [sl, #24]
   15370:	str	lr, [sl, #28]
   15374:	strb	r1, [sl, #32]
   15378:	strd	r6, [sl, #40]	; 0x28
   1537c:	strd	r4, [sl, #48]	; 0x30
   15380:	add	sp, sp, #392	; 0x188
   15384:	ldrd	r4, [sp]
   15388:	ldrd	r6, [sp, #8]
   1538c:	ldrd	r8, [sp, #16]
   15390:	ldr	sl, [sp, #24]
   15394:	add	sp, sp, #28
   15398:	pop	{pc}		; (ldr pc, [sp], #4)
   1539c:	mvn	r0, #0
   153a0:	b	15380 <__assert_fail@plt+0x3c7c>
   153a4:	ldr	r2, [sp]
   153a8:	cmn	r2, #1
   153ac:	beq	152e0 <__assert_fail@plt+0x3bdc>
   153b0:	ldrd	r6, [sp, #8]
   153b4:	mov	ip, #0
   153b8:	strd	r2, [sl]
   153bc:	rsbs	r4, ip, #0
   153c0:	mov	r0, ip
   153c4:	ldrd	r2, [sp, #16]
   153c8:	ldr	r1, [sp, #28]
   153cc:	strd	r6, [sl, #8]
   153d0:	ldr	ip, [sp, #24]
   153d4:	strd	r2, [sl, #16]
   153d8:	ldrd	r8, [sp, #32]
   153dc:	and	r5, r1, #-2147483648	; 0x80000000
   153e0:	ldrd	r6, [sp, #40]	; 0x28
   153e4:	rsc	r5, r5, #0
   153e8:	orr	r3, r5, r1
   153ec:	lsr	r1, r1, #31
   153f0:	orr	r2, r4, ip
   153f4:	strd	r2, [sl, #24]
   153f8:	strb	r1, [sl, #32]
   153fc:	strd	r8, [sl, #40]	; 0x28
   15400:	strd	r6, [sl, #48]	; 0x30
   15404:	b	15380 <__assert_fail@plt+0x3c7c>
   15408:	movw	r1, #61064	; 0xee88
   1540c:	movt	r1, #1
   15410:	add	r0, r5, #130	; 0x82
   15414:	bl	11308 <strverscmp@plt>
   15418:	cmp	r0, #0
   1541c:	movge	r3, #1
   15420:	strlt	r7, [r4]
   15424:	strge	r3, [r4]
   15428:	bge	152b0 <__assert_fail@plt+0x3bac>
   1542c:	b	15300 <__assert_fail@plt+0x3bfc>
   15430:	cmp	r0, #10
   15434:	movcc	r0, #10
   15438:	orr	r0, r0, #1
   1543c:	cmn	r0, #1
   15440:	bxeq	lr
   15444:	push	{lr}		; (str lr, [sp, #-4]!)
   15448:	movw	lr, #43691	; 0xaaab
   1544c:	movt	lr, #43690	; 0xaaaa
   15450:	umull	r2, r3, lr, r0
   15454:	cmp	r0, #9
   15458:	lsr	r3, r3, #1
   1545c:	add	r3, r3, r3, lsl #1
   15460:	sub	r3, r0, r3
   15464:	bls	154a4 <__assert_fail@plt+0x3da0>
   15468:	cmp	r3, #0
   1546c:	beq	154ac <__assert_fail@plt+0x3da8>
   15470:	mov	ip, #16
   15474:	mov	r1, #9
   15478:	mov	r2, #3
   1547c:	b	15488 <__assert_fail@plt+0x3d84>
   15480:	cmp	r3, #0
   15484:	beq	154ac <__assert_fail@plt+0x3da8>
   15488:	add	r2, r2, #2
   1548c:	add	r1, r1, ip
   15490:	cmp	r1, r0
   15494:	add	ip, ip, #8
   15498:	udiv	r3, r0, r2
   1549c:	mls	r3, r2, r3, r0
   154a0:	bcc	15480 <__assert_fail@plt+0x3d7c>
   154a4:	cmp	r3, #0
   154a8:	bne	154b8 <__assert_fail@plt+0x3db4>
   154ac:	add	r0, r0, #2
   154b0:	cmn	r0, #1
   154b4:	bne	15450 <__assert_fail@plt+0x3d4c>
   154b8:	pop	{pc}		; (ldr pc, [sp], #4)
   154bc:	ror	r0, r0, #3
   154c0:	udiv	r3, r0, r1
   154c4:	mls	r0, r3, r1, r0
   154c8:	bx	lr
   154cc:	sub	r0, r1, r0
   154d0:	clz	r0, r0
   154d4:	lsr	r0, r0, #5
   154d8:	bx	lr
   154dc:	str	r4, [sp, #-8]!
   154e0:	mov	r4, r0
   154e4:	mov	r0, r1
   154e8:	ldr	r1, [r4, #8]
   154ec:	ldr	r3, [r4, #24]
   154f0:	str	lr, [sp, #4]
   154f4:	blx	r3
   154f8:	ldr	r3, [r4, #8]
   154fc:	cmp	r3, r0
   15500:	bls	15518 <__assert_fail@plt+0x3e14>
   15504:	ldr	r3, [r4]
   15508:	ldr	r4, [sp]
   1550c:	add	sp, sp, #4
   15510:	add	r0, r3, r0, lsl #3
   15514:	pop	{pc}		; (ldr pc, [sp], #4)
   15518:	bl	116e0 <abort@plt>
   1551c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15520:	mov	r5, r1
   15524:	strd	r6, [sp, #8]
   15528:	mov	r7, r3
   1552c:	mov	r6, r0
   15530:	str	r8, [sp, #16]
   15534:	mov	r8, r2
   15538:	str	lr, [sp, #20]
   1553c:	bl	154dc <__assert_fail@plt+0x3dd8>
   15540:	str	r0, [r8]
   15544:	ldr	r1, [r0]
   15548:	cmp	r1, #0
   1554c:	beq	1563c <__assert_fail@plt+0x3f38>
   15550:	cmp	r1, r5
   15554:	mov	r4, r0
   15558:	beq	15604 <__assert_fail@plt+0x3f00>
   1555c:	mov	r0, r5
   15560:	ldr	r3, [r6, #28]
   15564:	blx	r3
   15568:	cmp	r0, #0
   1556c:	bne	15600 <__assert_fail@plt+0x3efc>
   15570:	ldr	r3, [r4, #4]
   15574:	cmp	r3, #0
   15578:	beq	1563c <__assert_fail@plt+0x3f38>
   1557c:	ldr	r1, [r3]
   15580:	cmp	r5, r1
   15584:	bne	155a8 <__assert_fail@plt+0x3ea4>
   15588:	b	155c4 <__assert_fail@plt+0x3ec0>
   1558c:	ldr	r4, [r4, #4]
   15590:	ldr	r3, [r4, #4]
   15594:	cmp	r3, #0
   15598:	beq	1563c <__assert_fail@plt+0x3f38>
   1559c:	ldr	r1, [r3]
   155a0:	cmp	r1, r5
   155a4:	beq	155c4 <__assert_fail@plt+0x3ec0>
   155a8:	mov	r0, r5
   155ac:	ldr	r3, [r6, #28]
   155b0:	blx	r3
   155b4:	cmp	r0, #0
   155b8:	beq	1558c <__assert_fail@plt+0x3e88>
   155bc:	ldr	r3, [r4, #4]
   155c0:	ldr	r1, [r3]
   155c4:	cmp	r7, #0
   155c8:	beq	155e8 <__assert_fail@plt+0x3ee4>
   155cc:	ldr	r0, [r3, #4]
   155d0:	mov	r2, #0
   155d4:	str	r0, [r4, #4]
   155d8:	str	r2, [r3]
   155dc:	ldr	r2, [r6, #36]	; 0x24
   155e0:	str	r2, [r3, #4]
   155e4:	str	r3, [r6, #36]	; 0x24
   155e8:	ldrd	r4, [sp]
   155ec:	mov	r0, r1
   155f0:	ldrd	r6, [sp, #8]
   155f4:	ldr	r8, [sp, #16]
   155f8:	add	sp, sp, #20
   155fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15600:	ldr	r1, [r4]
   15604:	cmp	r7, #0
   15608:	beq	155e8 <__assert_fail@plt+0x3ee4>
   1560c:	ldr	r0, [r4, #4]
   15610:	cmp	r0, #0
   15614:	streq	r0, [r4]
   15618:	beq	155e8 <__assert_fail@plt+0x3ee4>
   1561c:	ldrd	r2, [r0]
   15620:	mov	ip, #0
   15624:	strd	r2, [r4]
   15628:	str	ip, [r0]
   1562c:	ldr	r3, [r6, #36]	; 0x24
   15630:	str	r3, [r0, #4]
   15634:	str	r0, [r6, #36]	; 0x24
   15638:	b	155e8 <__assert_fail@plt+0x3ee4>
   1563c:	mov	r1, #0
   15640:	b	155e8 <__assert_fail@plt+0x3ee4>
   15644:	ldr	r2, [r0]
   15648:	movw	r3, #61072	; 0xee90
   1564c:	movt	r3, #1
   15650:	mov	r1, r0
   15654:	cmp	r2, r3
   15658:	beq	156e0 <__assert_fail@plt+0x3fdc>
   1565c:	vldr	s14, [pc, #132]	; 156e8 <__assert_fail@plt+0x3fe4>
   15660:	vldr	s15, [r2, #8]
   15664:	vcmpe.f32	s15, s14
   15668:	vmrs	APSR_nzcv, fpscr
   1566c:	ble	156d4 <__assert_fail@plt+0x3fd0>
   15670:	vldr	s13, [pc, #116]	; 156ec <__assert_fail@plt+0x3fe8>
   15674:	vcmpe.f32	s15, s13
   15678:	vmrs	APSR_nzcv, fpscr
   1567c:	bpl	156d4 <__assert_fail@plt+0x3fd0>
   15680:	vldr	s13, [pc, #104]	; 156f0 <__assert_fail@plt+0x3fec>
   15684:	vldr	s12, [r2, #12]
   15688:	vcmpe.f32	s12, s13
   1568c:	vmrs	APSR_nzcv, fpscr
   15690:	ble	156d4 <__assert_fail@plt+0x3fd0>
   15694:	vldr	s13, [r2]
   15698:	vcmpe.f32	s13, #0.0
   1569c:	vmrs	APSR_nzcv, fpscr
   156a0:	blt	156d4 <__assert_fail@plt+0x3fd0>
   156a4:	vadd.f32	s14, s13, s14
   156a8:	vldr	s13, [r2, #4]
   156ac:	vcmpe.f32	s14, s13
   156b0:	vmrs	APSR_nzcv, fpscr
   156b4:	bpl	156d4 <__assert_fail@plt+0x3fd0>
   156b8:	vldr	s12, [pc, #52]	; 156f4 <__assert_fail@plt+0x3ff0>
   156bc:	vcmpe.f32	s13, s12
   156c0:	vmrs	APSR_nzcv, fpscr
   156c4:	bhi	156d4 <__assert_fail@plt+0x3fd0>
   156c8:	vcmpe.f32	s15, s14
   156cc:	vmrs	APSR_nzcv, fpscr
   156d0:	bgt	156e0 <__assert_fail@plt+0x3fdc>
   156d4:	mov	r0, #0
   156d8:	str	r3, [r1]
   156dc:	bx	lr
   156e0:	mov	r0, #1
   156e4:	bx	lr
   156e8:	stclcc	12, cr12, [ip, #820]	; 0x334
   156ec:	svccc	0x00666666
   156f0:	svccc	0x008ccccd
   156f4:	svccc	0x00800000
   156f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   156fc:	ldr	r3, [r1, #4]
   15700:	strd	r6, [sp, #8]
   15704:	ldr	r6, [r1]
   15708:	strd	r8, [sp, #16]
   1570c:	str	sl, [sp, #24]
   15710:	str	lr, [sp, #28]
   15714:	cmp	r6, r3
   15718:	bcs	157e0 <__assert_fail@plt+0x40dc>
   1571c:	mov	r8, r2
   15720:	mov	r5, r0
   15724:	mov	r7, r1
   15728:	add	r6, r6, #8
   1572c:	mov	r9, #0
   15730:	b	15740 <__assert_fail@plt+0x403c>
   15734:	cmp	r3, r6
   15738:	add	r6, r6, #8
   1573c:	bls	157e0 <__assert_fail@plt+0x40dc>
   15740:	ldr	sl, [r6, #-8]
   15744:	cmp	sl, #0
   15748:	beq	15734 <__assert_fail@plt+0x4030>
   1574c:	ldr	r4, [r6, #-4]
   15750:	cmp	r4, #0
   15754:	bne	15774 <__assert_fail@plt+0x4070>
   15758:	b	157c4 <__assert_fail@plt+0x40c0>
   1575c:	ldr	r2, [r0, #4]
   15760:	cmp	r3, #0
   15764:	str	r2, [r4, #4]
   15768:	str	r4, [r0, #4]
   1576c:	mov	r4, r3
   15770:	beq	157c0 <__assert_fail@plt+0x40bc>
   15774:	ldr	sl, [r4]
   15778:	mov	r0, r5
   1577c:	mov	r1, sl
   15780:	bl	154dc <__assert_fail@plt+0x3dd8>
   15784:	ldr	r2, [r0]
   15788:	ldr	r3, [r4, #4]
   1578c:	cmp	r2, #0
   15790:	bne	1575c <__assert_fail@plt+0x4058>
   15794:	ldr	r1, [r5, #12]
   15798:	cmp	r3, #0
   1579c:	str	sl, [r0]
   157a0:	add	r1, r1, #1
   157a4:	str	r1, [r5, #12]
   157a8:	str	r2, [r4]
   157ac:	ldr	r2, [r5, #36]	; 0x24
   157b0:	str	r2, [r4, #4]
   157b4:	str	r4, [r5, #36]	; 0x24
   157b8:	mov	r4, r3
   157bc:	bne	15774 <__assert_fail@plt+0x4070>
   157c0:	ldr	sl, [r6, #-8]
   157c4:	cmp	r8, #0
   157c8:	str	r9, [r6, #-4]
   157cc:	beq	157fc <__assert_fail@plt+0x40f8>
   157d0:	ldr	r3, [r7, #4]
   157d4:	cmp	r3, r6
   157d8:	add	r6, r6, #8
   157dc:	bhi	15740 <__assert_fail@plt+0x403c>
   157e0:	mov	r0, #1
   157e4:	ldrd	r4, [sp]
   157e8:	ldrd	r6, [sp, #8]
   157ec:	ldrd	r8, [sp, #16]
   157f0:	ldr	sl, [sp, #24]
   157f4:	add	sp, sp, #28
   157f8:	pop	{pc}		; (ldr pc, [sp], #4)
   157fc:	mov	r1, sl
   15800:	mov	r0, r5
   15804:	bl	154dc <__assert_fail@plt+0x3dd8>
   15808:	ldr	r3, [r0]
   1580c:	mov	r4, r0
   15810:	cmp	r3, #0
   15814:	beq	15854 <__assert_fail@plt+0x4150>
   15818:	ldr	r0, [r5, #36]	; 0x24
   1581c:	cmp	r0, #0
   15820:	beq	15868 <__assert_fail@plt+0x4164>
   15824:	ldr	r3, [r0, #4]
   15828:	str	r3, [r5, #36]	; 0x24
   1582c:	ldr	r3, [r4, #4]
   15830:	str	sl, [r0]
   15834:	str	r3, [r0, #4]
   15838:	str	r0, [r4, #4]
   1583c:	ldr	r2, [r7, #12]
   15840:	str	r9, [r6, #-8]
   15844:	ldr	r3, [r7, #4]
   15848:	sub	r2, r2, #1
   1584c:	str	r2, [r7, #12]
   15850:	b	15734 <__assert_fail@plt+0x4030>
   15854:	ldr	r3, [r5, #12]
   15858:	str	sl, [r0]
   1585c:	add	r3, r3, #1
   15860:	str	r3, [r5, #12]
   15864:	b	1583c <__assert_fail@plt+0x4138>
   15868:	mov	r0, #8
   1586c:	bl	1bea0 <__assert_fail@plt+0xa79c>
   15870:	cmp	r0, #0
   15874:	bne	1582c <__assert_fail@plt+0x4128>
   15878:	mov	r0, r8
   1587c:	b	157e4 <__assert_fail@plt+0x40e0>
   15880:	ldr	r0, [r0, #8]
   15884:	bx	lr
   15888:	ldr	r0, [r0, #12]
   1588c:	bx	lr
   15890:	ldr	r0, [r0, #16]
   15894:	bx	lr
   15898:	ldm	r0, {r1, r3}
   1589c:	cmp	r1, r3
   158a0:	bcs	15914 <__assert_fail@plt+0x4210>
   158a4:	sub	ip, r3, #1
   158a8:	add	r3, r1, #16
   158ac:	sub	ip, ip, r1
   158b0:	mov	r0, #0
   158b4:	bic	ip, ip, #7
   158b8:	add	r1, r1, #8
   158bc:	add	ip, ip, r3
   158c0:	b	158d0 <__assert_fail@plt+0x41cc>
   158c4:	add	r1, r1, #8
   158c8:	cmp	r1, ip
   158cc:	beq	15910 <__assert_fail@plt+0x420c>
   158d0:	ldr	r3, [r1, #-8]
   158d4:	cmp	r3, #0
   158d8:	beq	158c4 <__assert_fail@plt+0x41c0>
   158dc:	ldr	r3, [r1, #-4]
   158e0:	mov	r2, #1
   158e4:	cmp	r3, #0
   158e8:	beq	158fc <__assert_fail@plt+0x41f8>
   158ec:	ldr	r3, [r3, #4]
   158f0:	add	r2, r2, #1
   158f4:	cmp	r3, #0
   158f8:	bne	158ec <__assert_fail@plt+0x41e8>
   158fc:	cmp	r0, r2
   15900:	add	r1, r1, #8
   15904:	movcc	r0, r2
   15908:	cmp	r1, ip
   1590c:	bne	158d0 <__assert_fail@plt+0x41cc>
   15910:	bx	lr
   15914:	mov	r0, #0
   15918:	bx	lr
   1591c:	ldm	r0, {r1, r3}
   15920:	push	{lr}		; (str lr, [sp, #-4]!)
   15924:	cmp	r1, r3
   15928:	bcs	159bc <__assert_fail@plt+0x42b8>
   1592c:	sub	ip, r3, #1
   15930:	mov	r2, #0
   15934:	sub	ip, ip, r1
   15938:	add	r3, r1, #16
   1593c:	bic	ip, ip, #7
   15940:	add	r1, r1, #8
   15944:	add	ip, ip, r3
   15948:	mov	lr, r2
   1594c:	b	1595c <__assert_fail@plt+0x4258>
   15950:	add	r1, r1, #8
   15954:	cmp	r1, ip
   15958:	beq	15998 <__assert_fail@plt+0x4294>
   1595c:	ldr	r3, [r1, #-8]
   15960:	cmp	r3, #0
   15964:	beq	15950 <__assert_fail@plt+0x424c>
   15968:	ldr	r3, [r1, #-4]
   1596c:	add	lr, lr, #1
   15970:	add	r2, r2, #1
   15974:	cmp	r3, #0
   15978:	beq	15950 <__assert_fail@plt+0x424c>
   1597c:	ldr	r3, [r3, #4]
   15980:	add	r2, r2, #1
   15984:	cmp	r3, #0
   15988:	bne	1597c <__assert_fail@plt+0x4278>
   1598c:	add	r1, r1, #8
   15990:	cmp	r1, ip
   15994:	bne	1595c <__assert_fail@plt+0x4258>
   15998:	ldr	r3, [r0, #12]
   1599c:	cmp	r3, lr
   159a0:	movne	r0, #0
   159a4:	bne	159b8 <__assert_fail@plt+0x42b4>
   159a8:	ldr	r0, [r0, #16]
   159ac:	sub	r0, r0, r2
   159b0:	clz	r0, r0
   159b4:	lsr	r0, r0, #5
   159b8:	pop	{pc}		; (ldr pc, [sp], #4)
   159bc:	mov	r2, #0
   159c0:	mov	lr, r2
   159c4:	b	15998 <__assert_fail@plt+0x4294>
   159c8:	strd	r4, [sp, #-20]!	; 0xffffffec
   159cc:	mov	r4, r1
   159d0:	ldr	r2, [r0]
   159d4:	ldr	r1, [r0, #4]
   159d8:	ldr	r3, [r0, #16]
   159dc:	strd	r6, [sp, #8]
   159e0:	str	lr, [sp, #16]
   159e4:	sub	sp, sp, #12
   159e8:	cmp	r2, r1
   159ec:	ldrd	r6, [r0, #8]
   159f0:	bcs	15af0 <__assert_fail@plt+0x43ec>
   159f4:	sub	ip, r1, #1
   159f8:	add	r1, r2, #16
   159fc:	sub	ip, ip, r2
   15a00:	add	r0, r2, #8
   15a04:	bic	ip, ip, #7
   15a08:	mov	r5, #0
   15a0c:	add	ip, ip, r1
   15a10:	b	15a20 <__assert_fail@plt+0x431c>
   15a14:	add	r0, r0, #8
   15a18:	cmp	r0, ip
   15a1c:	beq	15a60 <__assert_fail@plt+0x435c>
   15a20:	ldr	r2, [r0, #-8]
   15a24:	cmp	r2, #0
   15a28:	beq	15a14 <__assert_fail@plt+0x4310>
   15a2c:	ldr	r2, [r0, #-4]
   15a30:	mov	r1, #1
   15a34:	cmp	r2, #0
   15a38:	beq	15a4c <__assert_fail@plt+0x4348>
   15a3c:	ldr	r2, [r2, #4]
   15a40:	add	r1, r1, #1
   15a44:	cmp	r2, #0
   15a48:	bne	15a3c <__assert_fail@plt+0x4338>
   15a4c:	cmp	r5, r1
   15a50:	add	r0, r0, #8
   15a54:	movcc	r5, r1
   15a58:	cmp	r0, ip
   15a5c:	bne	15a20 <__assert_fail@plt+0x431c>
   15a60:	mov	r1, #1
   15a64:	mov	r0, r4
   15a68:	movw	r2, #61092	; 0xeea4
   15a6c:	movt	r2, #1
   15a70:	bl	115c0 <__fprintf_chk@plt>
   15a74:	mov	r3, r6
   15a78:	mov	r1, #1
   15a7c:	mov	r0, r4
   15a80:	movw	r2, #61116	; 0xeebc
   15a84:	movt	r2, #1
   15a88:	bl	115c0 <__fprintf_chk@plt>
   15a8c:	vmov	s15, r7
   15a90:	mov	r3, r7
   15a94:	mov	r1, #1
   15a98:	vldr	d5, [pc, #88]	; 15af8 <__assert_fail@plt+0x43f4>
   15a9c:	mov	r0, r4
   15aa0:	movw	r2, #61140	; 0xeed4
   15aa4:	movt	r2, #1
   15aa8:	vcvt.f64.u32	d6, s15
   15aac:	vmov	s15, r6
   15ab0:	vmul.f64	d6, d6, d5
   15ab4:	vcvt.f64.u32	d7, s15
   15ab8:	vdiv.f64	d5, d6, d7
   15abc:	vstr	d5, [sp]
   15ac0:	bl	115c0 <__fprintf_chk@plt>
   15ac4:	mov	r3, r5
   15ac8:	mov	r0, r4
   15acc:	movw	r2, #61176	; 0xeef8
   15ad0:	movt	r2, #1
   15ad4:	mov	r1, #1
   15ad8:	add	sp, sp, #12
   15adc:	ldrd	r4, [sp]
   15ae0:	ldrd	r6, [sp, #8]
   15ae4:	ldr	lr, [sp, #16]
   15ae8:	add	sp, sp, #20
   15aec:	b	115c0 <__fprintf_chk@plt>
   15af0:	mov	r5, #0
   15af4:	b	15a60 <__assert_fail@plt+0x435c>
   15af8:	andeq	r0, r0, r0
   15afc:	subsmi	r0, r9, r0
   15b00:	strd	r4, [sp, #-16]!
   15b04:	mov	r5, r1
   15b08:	str	r6, [sp, #8]
   15b0c:	mov	r6, r0
   15b10:	str	lr, [sp, #12]
   15b14:	bl	154dc <__assert_fail@plt+0x3dd8>
   15b18:	ldr	r3, [r0]
   15b1c:	cmp	r3, #0
   15b20:	beq	15b5c <__assert_fail@plt+0x4458>
   15b24:	mov	r4, r0
   15b28:	b	15b30 <__assert_fail@plt+0x442c>
   15b2c:	ldr	r3, [r4]
   15b30:	cmp	r3, r5
   15b34:	mov	r1, r3
   15b38:	mov	r0, r5
   15b3c:	beq	15b74 <__assert_fail@plt+0x4470>
   15b40:	ldr	r3, [r6, #28]
   15b44:	blx	r3
   15b48:	cmp	r0, #0
   15b4c:	bne	15b70 <__assert_fail@plt+0x446c>
   15b50:	ldr	r4, [r4, #4]
   15b54:	cmp	r4, #0
   15b58:	bne	15b2c <__assert_fail@plt+0x4428>
   15b5c:	ldrd	r4, [sp]
   15b60:	mov	r0, #0
   15b64:	ldr	r6, [sp, #8]
   15b68:	add	sp, sp, #12
   15b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b70:	ldr	r5, [r4]
   15b74:	mov	r0, r5
   15b78:	ldrd	r4, [sp]
   15b7c:	ldr	r6, [sp, #8]
   15b80:	add	sp, sp, #12
   15b84:	pop	{pc}		; (ldr pc, [sp], #4)
   15b88:	ldr	r3, [r0, #16]
   15b8c:	cmp	r3, #0
   15b90:	beq	15be4 <__assert_fail@plt+0x44e0>
   15b94:	ldr	r3, [r0]
   15b98:	ldr	r2, [r0, #4]
   15b9c:	cmp	r3, r2
   15ba0:	bcs	15bd8 <__assert_fail@plt+0x44d4>
   15ba4:	ldr	r0, [r3]
   15ba8:	cmp	r0, #0
   15bac:	bxne	lr
   15bb0:	sub	r2, r2, #1
   15bb4:	sub	r2, r2, r3
   15bb8:	bic	r2, r2, #7
   15bbc:	add	r2, r3, r2
   15bc0:	b	15bd0 <__assert_fail@plt+0x44cc>
   15bc4:	ldr	r0, [r3, #8]!
   15bc8:	cmp	r0, #0
   15bcc:	bxne	lr
   15bd0:	cmp	r3, r2
   15bd4:	bne	15bc4 <__assert_fail@plt+0x44c0>
   15bd8:	str	r4, [sp, #-8]!
   15bdc:	str	lr, [sp, #4]
   15be0:	bl	116e0 <abort@plt>
   15be4:	mov	r0, r3
   15be8:	bx	lr
   15bec:	strd	r4, [sp, #-16]!
   15bf0:	mov	r5, r0
   15bf4:	mov	r4, r1
   15bf8:	str	r6, [sp, #8]
   15bfc:	str	lr, [sp, #12]
   15c00:	bl	154dc <__assert_fail@plt+0x3dd8>
   15c04:	mov	r2, r0
   15c08:	mov	r3, r0
   15c0c:	b	15c18 <__assert_fail@plt+0x4514>
   15c10:	cmp	r3, #0
   15c14:	beq	15c30 <__assert_fail@plt+0x452c>
   15c18:	ldm	r3, {r1, r3}
   15c1c:	cmp	r1, r4
   15c20:	bne	15c10 <__assert_fail@plt+0x450c>
   15c24:	cmp	r3, #0
   15c28:	ldrne	r0, [r3]
   15c2c:	bne	15c54 <__assert_fail@plt+0x4550>
   15c30:	ldr	r3, [r5, #4]
   15c34:	b	15c44 <__assert_fail@plt+0x4540>
   15c38:	ldr	r0, [r2]
   15c3c:	cmp	r0, #0
   15c40:	bne	15c54 <__assert_fail@plt+0x4550>
   15c44:	add	r2, r2, #8
   15c48:	cmp	r3, r2
   15c4c:	bhi	15c38 <__assert_fail@plt+0x4534>
   15c50:	mov	r0, #0
   15c54:	ldrd	r4, [sp]
   15c58:	ldr	r6, [sp, #8]
   15c5c:	add	sp, sp, #12
   15c60:	pop	{pc}		; (ldr pc, [sp], #4)
   15c64:	strd	r4, [sp, #-12]!
   15c68:	ldr	r5, [r0]
   15c6c:	str	lr, [sp, #8]
   15c70:	ldr	lr, [r0, #4]
   15c74:	cmp	lr, r5
   15c78:	bls	15d04 <__assert_fail@plt+0x4600>
   15c7c:	mov	ip, #0
   15c80:	ldr	r3, [r5]
   15c84:	cmp	r3, #0
   15c88:	bne	15cac <__assert_fail@plt+0x45a8>
   15c8c:	add	r5, r5, #8
   15c90:	cmp	lr, r5
   15c94:	bhi	15c80 <__assert_fail@plt+0x457c>
   15c98:	mov	r2, ip
   15c9c:	ldrd	r4, [sp]
   15ca0:	add	sp, sp, #8
   15ca4:	mov	r0, r2
   15ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cac:	cmp	r2, ip
   15cb0:	bls	15c98 <__assert_fail@plt+0x4594>
   15cb4:	str	r3, [r1, ip, lsl #2]
   15cb8:	add	r4, ip, #1
   15cbc:	add	lr, r1, ip, lsl #2
   15cc0:	ldr	r3, [r5, #4]
   15cc4:	cmp	r3, #0
   15cc8:	beq	15cf8 <__assert_fail@plt+0x45f4>
   15ccc:	mov	ip, r4
   15cd0:	cmp	r2, ip
   15cd4:	add	ip, ip, #1
   15cd8:	beq	15c9c <__assert_fail@plt+0x4598>
   15cdc:	ldr	r4, [r3]
   15ce0:	str	r4, [lr, #4]!
   15ce4:	ldr	r3, [r3, #4]
   15ce8:	cmp	r3, #0
   15cec:	bne	15cd0 <__assert_fail@plt+0x45cc>
   15cf0:	ldr	lr, [r0, #4]
   15cf4:	b	15c8c <__assert_fail@plt+0x4588>
   15cf8:	mov	ip, r4
   15cfc:	ldr	lr, [r0, #4]
   15d00:	b	15c8c <__assert_fail@plt+0x4588>
   15d04:	mov	r2, #0
   15d08:	b	15c9c <__assert_fail@plt+0x4598>
   15d0c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15d10:	ldr	r3, [r0, #4]
   15d14:	strd	r6, [sp, #8]
   15d18:	strd	r8, [sp, #16]
   15d1c:	ldr	r8, [r0]
   15d20:	str	sl, [sp, #24]
   15d24:	str	lr, [sp, #28]
   15d28:	cmp	r3, r8
   15d2c:	bls	15da8 <__assert_fail@plt+0x46a4>
   15d30:	mov	r7, r2
   15d34:	mov	r6, r1
   15d38:	mov	r9, r0
   15d3c:	mov	r5, #0
   15d40:	ldr	r0, [r8]
   15d44:	cmp	r0, #0
   15d48:	bne	15d74 <__assert_fail@plt+0x4670>
   15d4c:	add	r8, r8, #8
   15d50:	cmp	r3, r8
   15d54:	bhi	15d40 <__assert_fail@plt+0x463c>
   15d58:	mov	r0, r5
   15d5c:	ldrd	r4, [sp]
   15d60:	ldrd	r6, [sp, #8]
   15d64:	ldrd	r8, [sp, #16]
   15d68:	ldr	sl, [sp, #24]
   15d6c:	add	sp, sp, #28
   15d70:	pop	{pc}		; (ldr pc, [sp], #4)
   15d74:	mov	r4, r8
   15d78:	b	15d80 <__assert_fail@plt+0x467c>
   15d7c:	ldr	r0, [r4]
   15d80:	mov	r1, r7
   15d84:	blx	r6
   15d88:	cmp	r0, #0
   15d8c:	beq	15d58 <__assert_fail@plt+0x4654>
   15d90:	ldr	r4, [r4, #4]
   15d94:	add	r5, r5, #1
   15d98:	cmp	r4, #0
   15d9c:	bne	15d7c <__assert_fail@plt+0x4678>
   15da0:	ldr	r3, [r9, #4]
   15da4:	b	15d4c <__assert_fail@plt+0x4648>
   15da8:	mov	r5, #0
   15dac:	b	15d58 <__assert_fail@plt+0x4654>
   15db0:	ldrb	r2, [r0]
   15db4:	cmp	r2, #0
   15db8:	beq	15de4 <__assert_fail@plt+0x46e0>
   15dbc:	mov	r3, #0
   15dc0:	rsb	r3, r3, r3, lsl #5
   15dc4:	add	r3, r3, r2
   15dc8:	ldrb	r2, [r0, #1]!
   15dcc:	udiv	ip, r3, r1
   15dd0:	cmp	r2, #0
   15dd4:	mls	r3, r1, ip, r3
   15dd8:	bne	15dc0 <__assert_fail@plt+0x46bc>
   15ddc:	mov	r0, r3
   15de0:	bx	lr
   15de4:	mov	r3, r2
   15de8:	mov	r0, r3
   15dec:	bx	lr
   15df0:	movw	r3, #61072	; 0xee90
   15df4:	movt	r3, #1
   15df8:	strd	r4, [sp, #-8]!
   15dfc:	ldrd	r4, [r3]
   15e00:	ldr	r1, [r3, #16]
   15e04:	ldrd	r2, [r3, #8]
   15e08:	strd	r4, [r0]
   15e0c:	ldrd	r4, [sp]
   15e10:	add	sp, sp, #8
   15e14:	strd	r2, [r0, #8]
   15e18:	str	r1, [r0, #16]
   15e1c:	bx	lr
   15e20:	strd	r4, [sp, #-20]!	; 0xffffffec
   15e24:	cmp	r2, #0
   15e28:	movw	ip, #21708	; 0x54cc
   15e2c:	movt	ip, #1
   15e30:	strd	r6, [sp, #8]
   15e34:	movne	r6, r2
   15e38:	str	lr, [sp, #16]
   15e3c:	sub	sp, sp, #12
   15e40:	movw	lr, #21692	; 0x54bc
   15e44:	movt	lr, #1
   15e48:	mov	r7, r1
   15e4c:	moveq	r6, lr
   15e50:	cmp	r3, #0
   15e54:	str	r0, [sp, #4]
   15e58:	mov	r0, #40	; 0x28
   15e5c:	movne	r5, r3
   15e60:	moveq	r5, ip
   15e64:	bl	1bea0 <__assert_fail@plt+0xa79c>
   15e68:	subs	r4, r0, #0
   15e6c:	beq	15f04 <__assert_fail@plt+0x4800>
   15e70:	cmp	r7, #0
   15e74:	add	r0, r4, #20
   15e78:	beq	15f1c <__assert_fail@plt+0x4818>
   15e7c:	str	r7, [r4, #20]
   15e80:	bl	15644 <__assert_fail@plt+0x3f40>
   15e84:	cmp	r0, #0
   15e88:	beq	15f64 <__assert_fail@plt+0x4860>
   15e8c:	ldrb	r3, [r7, #16]
   15e90:	cmp	r3, #0
   15e94:	beq	15f74 <__assert_fail@plt+0x4870>
   15e98:	ldr	r0, [sp, #4]
   15e9c:	bl	15430 <__assert_fail@plt+0x3d2c>
   15ea0:	lsrs	r2, r0, #30
   15ea4:	movne	r7, #1
   15ea8:	moveq	r7, #0
   15eac:	tst	r0, #536870912	; 0x20000000
   15eb0:	bne	15f5c <__assert_fail@plt+0x4858>
   15eb4:	cmp	r7, #0
   15eb8:	bne	15f5c <__assert_fail@plt+0x4858>
   15ebc:	cmp	r0, #0
   15ec0:	str	r0, [r4, #8]
   15ec4:	beq	15f64 <__assert_fail@plt+0x4860>
   15ec8:	mov	r1, #8
   15ecc:	bl	1be2c <__assert_fail@plt+0xa728>
   15ed0:	cmp	r0, #0
   15ed4:	str	r0, [r4]
   15ed8:	beq	15f64 <__assert_fail@plt+0x4860>
   15edc:	ldr	r3, [r4, #8]
   15ee0:	str	r7, [r4, #12]
   15ee4:	str	r7, [r4, #16]
   15ee8:	str	r6, [r4, #24]
   15eec:	str	r5, [r4, #28]
   15ef0:	add	r0, r0, r3, lsl #3
   15ef4:	ldr	r3, [sp, #32]
   15ef8:	str	r0, [r4, #4]
   15efc:	str	r3, [r4, #32]
   15f00:	str	r7, [r4, #36]	; 0x24
   15f04:	mov	r0, r4
   15f08:	add	sp, sp, #12
   15f0c:	ldrd	r4, [sp]
   15f10:	ldrd	r6, [sp, #8]
   15f14:	add	sp, sp, #16
   15f18:	pop	{pc}		; (ldr pc, [sp], #4)
   15f1c:	movw	r3, #61072	; 0xee90
   15f20:	movt	r3, #1
   15f24:	str	r3, [r4, #20]
   15f28:	bl	15644 <__assert_fail@plt+0x3f40>
   15f2c:	cmp	r0, #0
   15f30:	beq	15f64 <__assert_fail@plt+0x4860>
   15f34:	vldr	s13, [pc, #64]	; 15f7c <__assert_fail@plt+0x4878>
   15f38:	vldr	s15, [sp, #4]
   15f3c:	vldr	s14, [pc, #60]	; 15f80 <__assert_fail@plt+0x487c>
   15f40:	vcvt.f32.u32	s12, s15
   15f44:	vdiv.f32	s15, s12, s13
   15f48:	vcmpe.f32	s15, s14
   15f4c:	vmrs	APSR_nzcv, fpscr
   15f50:	vcvtlt.u32.f32	s15, s15
   15f54:	vstrlt	s15, [sp, #4]
   15f58:	blt	15e98 <__assert_fail@plt+0x4794>
   15f5c:	mov	r3, #0
   15f60:	str	r3, [r4, #8]
   15f64:	mov	r0, r4
   15f68:	mov	r4, #0
   15f6c:	bl	15214 <__assert_fail@plt+0x3b10>
   15f70:	b	15f04 <__assert_fail@plt+0x4800>
   15f74:	vldr	s13, [r7, #8]
   15f78:	b	15f38 <__assert_fail@plt+0x4834>
   15f7c:	svccc	0x004ccccd
   15f80:	svcmi	0x00800000
   15f84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f88:	mov	r5, r0
   15f8c:	ldr	r2, [r0, #4]
   15f90:	strd	r6, [sp, #8]
   15f94:	ldr	r6, [r0]
   15f98:	str	r8, [sp, #16]
   15f9c:	str	lr, [sp, #20]
   15fa0:	cmp	r6, r2
   15fa4:	addcc	r6, r6, #8
   15fa8:	movcc	r7, #0
   15fac:	bcc	15fc0 <__assert_fail@plt+0x48bc>
   15fb0:	b	16034 <__assert_fail@plt+0x4930>
   15fb4:	cmp	r2, r6
   15fb8:	add	r6, r6, #8
   15fbc:	bls	16034 <__assert_fail@plt+0x4930>
   15fc0:	ldr	r3, [r6, #-8]
   15fc4:	cmp	r3, #0
   15fc8:	beq	15fb4 <__assert_fail@plt+0x48b0>
   15fcc:	ldr	r4, [r6, #-4]
   15fd0:	ldr	r2, [r5, #32]
   15fd4:	cmp	r4, #0
   15fd8:	beq	1600c <__assert_fail@plt+0x4908>
   15fdc:	cmp	r2, #0
   15fe0:	beq	15ff0 <__assert_fail@plt+0x48ec>
   15fe4:	ldr	r0, [r4]
   15fe8:	blx	r2
   15fec:	ldr	r2, [r5, #32]
   15ff0:	ldr	r3, [r4, #4]
   15ff4:	ldr	r1, [r5, #36]	; 0x24
   15ff8:	str	r7, [r4]
   15ffc:	str	r1, [r4, #4]
   16000:	str	r4, [r5, #36]	; 0x24
   16004:	subs	r4, r3, #0
   16008:	bne	15fdc <__assert_fail@plt+0x48d8>
   1600c:	cmp	r2, #0
   16010:	beq	1601c <__assert_fail@plt+0x4918>
   16014:	ldr	r0, [r6, #-8]
   16018:	blx	r2
   1601c:	str	r7, [r6, #-8]
   16020:	str	r7, [r6, #-4]
   16024:	ldr	r2, [r5, #4]
   16028:	cmp	r2, r6
   1602c:	add	r6, r6, #8
   16030:	bhi	15fc0 <__assert_fail@plt+0x48bc>
   16034:	mov	r3, #0
   16038:	ldrd	r6, [sp, #8]
   1603c:	ldr	r8, [sp, #16]
   16040:	str	r3, [r5, #12]
   16044:	str	r3, [r5, #16]
   16048:	ldrd	r4, [sp]
   1604c:	add	sp, sp, #20
   16050:	pop	{pc}		; (ldr pc, [sp], #4)
   16054:	strd	r4, [sp, #-16]!
   16058:	ldr	r2, [r0, #32]
   1605c:	ldr	r5, [r0]
   16060:	ldr	r3, [r0, #4]
   16064:	cmp	r2, #0
   16068:	str	r6, [sp, #8]
   1606c:	mov	r6, r0
   16070:	str	lr, [sp, #12]
   16074:	beq	160dc <__assert_fail@plt+0x49d8>
   16078:	ldr	r2, [r0, #16]
   1607c:	cmp	r2, #0
   16080:	beq	160dc <__assert_fail@plt+0x49d8>
   16084:	cmp	r5, r3
   16088:	bcc	1609c <__assert_fail@plt+0x4998>
   1608c:	b	16110 <__assert_fail@plt+0x4a0c>
   16090:	add	r5, r5, #8
   16094:	cmp	r3, r5
   16098:	bls	160d8 <__assert_fail@plt+0x49d4>
   1609c:	ldr	r0, [r5]
   160a0:	cmp	r0, #0
   160a4:	beq	16090 <__assert_fail@plt+0x498c>
   160a8:	mov	r4, r5
   160ac:	b	160b4 <__assert_fail@plt+0x49b0>
   160b0:	ldr	r0, [r4]
   160b4:	ldr	r3, [r6, #32]
   160b8:	blx	r3
   160bc:	ldr	r4, [r4, #4]
   160c0:	cmp	r4, #0
   160c4:	bne	160b0 <__assert_fail@plt+0x49ac>
   160c8:	ldr	r3, [r6, #4]
   160cc:	add	r5, r5, #8
   160d0:	cmp	r3, r5
   160d4:	bhi	1609c <__assert_fail@plt+0x4998>
   160d8:	ldr	r5, [r6]
   160dc:	cmp	r5, r3
   160e0:	bcs	16110 <__assert_fail@plt+0x4a0c>
   160e4:	ldr	r0, [r5, #4]
   160e8:	cmp	r0, #0
   160ec:	beq	16104 <__assert_fail@plt+0x4a00>
   160f0:	ldr	r4, [r0, #4]
   160f4:	bl	15214 <__assert_fail@plt+0x3b10>
   160f8:	subs	r0, r4, #0
   160fc:	bne	160f0 <__assert_fail@plt+0x49ec>
   16100:	ldr	r3, [r6, #4]
   16104:	add	r5, r5, #8
   16108:	cmp	r3, r5
   1610c:	bhi	160e4 <__assert_fail@plt+0x49e0>
   16110:	ldr	r0, [r6, #36]	; 0x24
   16114:	cmp	r0, #0
   16118:	beq	1612c <__assert_fail@plt+0x4a28>
   1611c:	ldr	r4, [r0, #4]
   16120:	bl	15214 <__assert_fail@plt+0x3b10>
   16124:	subs	r0, r4, #0
   16128:	bne	1611c <__assert_fail@plt+0x4a18>
   1612c:	ldr	r0, [r6]
   16130:	bl	15214 <__assert_fail@plt+0x3b10>
   16134:	mov	r0, r6
   16138:	ldrd	r4, [sp]
   1613c:	ldr	r6, [sp, #8]
   16140:	ldr	lr, [sp, #12]
   16144:	add	sp, sp, #16
   16148:	b	15214 <__assert_fail@plt+0x3b10>
   1614c:	ldr	r3, [r0, #20]
   16150:	strd	r4, [sp, #-20]!	; 0xffffffec
   16154:	ldrb	r2, [r3, #16]
   16158:	strd	r6, [sp, #8]
   1615c:	mov	r6, r0
   16160:	str	lr, [sp, #16]
   16164:	sub	sp, sp, #52	; 0x34
   16168:	str	r1, [sp, #4]
   1616c:	cmp	r2, #0
   16170:	bne	1619c <__assert_fail@plt+0x4a98>
   16174:	vmov	s15, r1
   16178:	vldr	s13, [r3, #8]
   1617c:	vldr	s14, [pc, #340]	; 162d8 <__assert_fail@plt+0x4bd4>
   16180:	vcvt.f32.u32	s12, s15
   16184:	vdiv.f32	s15, s12, s13
   16188:	vcmpe.f32	s15, s14
   1618c:	vmrs	APSR_nzcv, fpscr
   16190:	vcvtlt.u32.f32	s15, s15
   16194:	vstrlt	s15, [sp, #4]
   16198:	bge	161cc <__assert_fail@plt+0x4ac8>
   1619c:	ldr	r0, [sp, #4]
   161a0:	bl	15430 <__assert_fail@plt+0x3d2c>
   161a4:	lsrs	r3, r0, #30
   161a8:	mov	r5, r0
   161ac:	movne	r4, #1
   161b0:	moveq	r4, #0
   161b4:	tst	r0, #536870912	; 0x20000000
   161b8:	movne	r4, #1
   161bc:	cmp	r0, #0
   161c0:	moveq	r4, #1
   161c4:	cmp	r4, #0
   161c8:	beq	161e8 <__assert_fail@plt+0x4ae4>
   161cc:	mov	r4, #0
   161d0:	mov	r0, r4
   161d4:	add	sp, sp, #52	; 0x34
   161d8:	ldrd	r4, [sp]
   161dc:	ldrd	r6, [sp, #8]
   161e0:	add	sp, sp, #16
   161e4:	pop	{pc}		; (ldr pc, [sp], #4)
   161e8:	ldr	r3, [r6, #8]
   161ec:	cmp	r3, r0
   161f0:	beq	162a0 <__assert_fail@plt+0x4b9c>
   161f4:	mov	r1, #8
   161f8:	bl	1be2c <__assert_fail@plt+0xa728>
   161fc:	cmp	r0, #0
   16200:	str	r0, [sp, #8]
   16204:	beq	161cc <__assert_fail@plt+0x4ac8>
   16208:	add	r3, r0, r5, lsl #3
   1620c:	ldr	r7, [r6, #20]
   16210:	mov	r2, r4
   16214:	add	r0, sp, #8
   16218:	mov	r1, r6
   1621c:	ldr	lr, [r6, #28]
   16220:	str	r3, [sp, #12]
   16224:	str	r5, [sp, #16]
   16228:	ldr	r5, [r6, #24]
   1622c:	str	r4, [sp, #20]
   16230:	ldr	ip, [r6, #32]
   16234:	str	r4, [sp, #24]
   16238:	ldr	r3, [r6, #36]	; 0x24
   1623c:	str	r7, [sp, #28]
   16240:	str	r5, [sp, #32]
   16244:	str	lr, [sp, #36]	; 0x24
   16248:	str	ip, [sp, #40]	; 0x28
   1624c:	str	r3, [sp, #44]	; 0x2c
   16250:	bl	156f8 <__assert_fail@plt+0x3ff4>
   16254:	subs	r4, r0, #0
   16258:	bne	162a8 <__assert_fail@plt+0x4ba4>
   1625c:	ldr	r3, [sp, #44]	; 0x2c
   16260:	mov	r2, #1
   16264:	add	r1, sp, #8
   16268:	mov	r0, r6
   1626c:	str	r3, [r6, #36]	; 0x24
   16270:	bl	156f8 <__assert_fail@plt+0x3ff4>
   16274:	cmp	r0, #0
   16278:	beq	162d4 <__assert_fail@plt+0x4bd0>
   1627c:	add	r1, sp, #8
   16280:	mov	r0, r6
   16284:	mov	r2, r4
   16288:	bl	156f8 <__assert_fail@plt+0x3ff4>
   1628c:	cmp	r0, #0
   16290:	beq	162d4 <__assert_fail@plt+0x4bd0>
   16294:	ldr	r0, [sp, #8]
   16298:	bl	15214 <__assert_fail@plt+0x3b10>
   1629c:	b	161d0 <__assert_fail@plt+0x4acc>
   162a0:	mov	r4, #1
   162a4:	b	161d0 <__assert_fail@plt+0x4acc>
   162a8:	ldr	r0, [r6]
   162ac:	bl	15214 <__assert_fail@plt+0x3b10>
   162b0:	ldrd	r2, [sp, #8]
   162b4:	ldr	r1, [sp, #16]
   162b8:	strd	r2, [r6]
   162bc:	ldr	r2, [sp, #20]
   162c0:	str	r1, [r6, #8]
   162c4:	ldr	r3, [sp, #44]	; 0x2c
   162c8:	str	r2, [r6, #12]
   162cc:	str	r3, [r6, #36]	; 0x24
   162d0:	b	161d0 <__assert_fail@plt+0x4acc>
   162d4:	bl	116e0 <abort@plt>
   162d8:	svcmi	0x00800000
   162dc:	strd	r4, [sp, #-16]!
   162e0:	str	r6, [sp, #8]
   162e4:	subs	r6, r1, #0
   162e8:	str	lr, [sp, #12]
   162ec:	sub	sp, sp, #8
   162f0:	beq	16470 <__assert_fail@plt+0x4d6c>
   162f4:	mov	r3, #0
   162f8:	mov	r5, r2
   162fc:	add	r2, sp, #4
   16300:	mov	r4, r0
   16304:	bl	1551c <__assert_fail@plt+0x3e18>
   16308:	subs	r3, r0, #0
   1630c:	beq	16338 <__assert_fail@plt+0x4c34>
   16310:	cmp	r5, #0
   16314:	moveq	r0, r5
   16318:	beq	16324 <__assert_fail@plt+0x4c20>
   1631c:	mov	r0, #0
   16320:	str	r3, [r5]
   16324:	add	sp, sp, #8
   16328:	ldrd	r4, [sp]
   1632c:	ldr	r6, [sp, #8]
   16330:	add	sp, sp, #12
   16334:	pop	{pc}		; (ldr pc, [sp], #4)
   16338:	vldr	s15, [r4, #8]
   1633c:	vldr	s14, [r4, #12]
   16340:	ldr	r3, [r4, #20]
   16344:	vcvt.f32.u32	s15, s15
   16348:	vcvt.f32.u32	s14, s14
   1634c:	vldr	s13, [r3, #8]
   16350:	vmul.f32	s15, s15, s13
   16354:	vcmpe.f32	s14, s15
   16358:	vmrs	APSR_nzcv, fpscr
   1635c:	bgt	163a4 <__assert_fail@plt+0x4ca0>
   16360:	ldr	r2, [sp, #4]
   16364:	ldr	r3, [r2]
   16368:	cmp	r3, #0
   1636c:	beq	16400 <__assert_fail@plt+0x4cfc>
   16370:	ldr	r3, [r4, #36]	; 0x24
   16374:	cmp	r3, #0
   16378:	beq	16424 <__assert_fail@plt+0x4d20>
   1637c:	ldr	r1, [r3, #4]
   16380:	str	r1, [r4, #36]	; 0x24
   16384:	ldr	r1, [r4, #16]
   16388:	mov	r0, #1
   1638c:	ldr	ip, [r2, #4]
   16390:	add	r1, r1, r0
   16394:	stm	r3, {r6, ip}
   16398:	str	r3, [r2, #4]
   1639c:	str	r1, [r4, #16]
   163a0:	b	16324 <__assert_fail@plt+0x4c20>
   163a4:	add	r0, r4, #20
   163a8:	bl	15644 <__assert_fail@plt+0x3f40>
   163ac:	vldr	s15, [r4, #8]
   163b0:	vldr	s14, [r4, #12]
   163b4:	ldr	r3, [r4, #20]
   163b8:	vcvt.f32.u32	s15, s15
   163bc:	vcvt.f32.u32	s14, s14
   163c0:	vldr	s13, [r3, #8]
   163c4:	vmul.f32	s12, s13, s15
   163c8:	vcmpe.f32	s14, s12
   163cc:	vmrs	APSR_nzcv, fpscr
   163d0:	ble	16360 <__assert_fail@plt+0x4c5c>
   163d4:	vldr	s14, [r3, #12]
   163d8:	ldrb	r2, [r3, #16]
   163dc:	vmul.f32	s15, s15, s14
   163e0:	vldr	s14, [pc, #140]	; 16474 <__assert_fail@plt+0x4d70>
   163e4:	cmp	r2, #0
   163e8:	vmuleq.f32	s15, s15, s13
   163ec:	vcmpe.f32	s15, s14
   163f0:	vmrs	APSR_nzcv, fpscr
   163f4:	blt	1643c <__assert_fail@plt+0x4d38>
   163f8:	mvn	r0, #0
   163fc:	b	16324 <__assert_fail@plt+0x4c20>
   16400:	ldr	r1, [r4, #12]
   16404:	mov	r0, #1
   16408:	ldr	r3, [r4, #16]
   1640c:	str	r6, [r2]
   16410:	add	r2, r1, r0
   16414:	add	r3, r3, r0
   16418:	str	r2, [r4, #12]
   1641c:	str	r3, [r4, #16]
   16420:	b	16324 <__assert_fail@plt+0x4c20>
   16424:	mov	r0, #8
   16428:	bl	1bea0 <__assert_fail@plt+0xa79c>
   1642c:	subs	r3, r0, #0
   16430:	beq	163f8 <__assert_fail@plt+0x4cf4>
   16434:	ldr	r2, [sp, #4]
   16438:	b	16384 <__assert_fail@plt+0x4c80>
   1643c:	vcvt.u32.f32	s15, s15
   16440:	mov	r0, r4
   16444:	vmov	r1, s15
   16448:	bl	1614c <__assert_fail@plt+0x4a48>
   1644c:	cmp	r0, #0
   16450:	beq	163f8 <__assert_fail@plt+0x4cf4>
   16454:	add	r2, sp, #4
   16458:	mov	r3, #0
   1645c:	mov	r1, r6
   16460:	mov	r0, r4
   16464:	bl	1551c <__assert_fail@plt+0x3e18>
   16468:	cmp	r0, #0
   1646c:	beq	16360 <__assert_fail@plt+0x4c5c>
   16470:	bl	116e0 <abort@plt>
   16474:	svcmi	0x00800000
   16478:	str	r4, [sp, #-8]!
   1647c:	mov	r4, r1
   16480:	str	lr, [sp, #4]
   16484:	sub	sp, sp, #8
   16488:	add	r2, sp, #4
   1648c:	bl	162dc <__assert_fail@plt+0x4bd8>
   16490:	cmn	r0, #1
   16494:	moveq	r0, #0
   16498:	beq	164a8 <__assert_fail@plt+0x4da4>
   1649c:	cmp	r0, #0
   164a0:	ldreq	r0, [sp, #4]
   164a4:	movne	r0, r4
   164a8:	add	sp, sp, #8
   164ac:	ldr	r4, [sp]
   164b0:	add	sp, sp, #4
   164b4:	pop	{pc}		; (ldr pc, [sp], #4)
   164b8:	strd	r4, [sp, #-16]!
   164bc:	mov	r3, #1
   164c0:	mov	r4, r0
   164c4:	str	r6, [sp, #8]
   164c8:	str	lr, [sp, #12]
   164cc:	sub	sp, sp, #8
   164d0:	add	r2, sp, #4
   164d4:	bl	1551c <__assert_fail@plt+0x3e18>
   164d8:	subs	r5, r0, #0
   164dc:	beq	164fc <__assert_fail@plt+0x4df8>
   164e0:	ldr	r2, [sp, #4]
   164e4:	ldr	r3, [r4, #16]
   164e8:	ldr	r2, [r2]
   164ec:	sub	r3, r3, #1
   164f0:	str	r3, [r4, #16]
   164f4:	cmp	r2, #0
   164f8:	beq	16514 <__assert_fail@plt+0x4e10>
   164fc:	mov	r0, r5
   16500:	add	sp, sp, #8
   16504:	ldrd	r4, [sp]
   16508:	ldr	r6, [sp, #8]
   1650c:	add	sp, sp, #12
   16510:	pop	{pc}		; (ldr pc, [sp], #4)
   16514:	vldr	s15, [r4, #8]
   16518:	ldr	r3, [r4, #12]
   1651c:	ldr	r2, [r4, #20]
   16520:	vcvt.f32.u32	s15, s15
   16524:	sub	r3, r3, #1
   16528:	vmov	s14, r3
   1652c:	vldr	s13, [r2]
   16530:	str	r3, [r4, #12]
   16534:	vmul.f32	s15, s15, s13
   16538:	vcvt.f32.u32	s14, s14
   1653c:	vcmpe.f32	s14, s15
   16540:	vmrs	APSR_nzcv, fpscr
   16544:	bpl	164fc <__assert_fail@plt+0x4df8>
   16548:	add	r0, r4, #20
   1654c:	bl	15644 <__assert_fail@plt+0x3f40>
   16550:	vldr	s15, [r4, #8]
   16554:	vldr	s13, [r4, #12]
   16558:	ldr	r3, [r4, #20]
   1655c:	vcvt.f32.u32	s15, s15
   16560:	vcvt.f32.u32	s13, s13
   16564:	vldr	s14, [r3]
   16568:	vmul.f32	s14, s15, s14
   1656c:	vcmpe.f32	s13, s14
   16570:	vmrs	APSR_nzcv, fpscr
   16574:	bpl	164fc <__assert_fail@plt+0x4df8>
   16578:	ldrb	r2, [r3, #16]
   1657c:	mov	r0, r4
   16580:	vldr	s14, [r3, #4]
   16584:	cmp	r2, #0
   16588:	vmul.f32	s15, s15, s14
   1658c:	vldreq	s14, [r3, #8]
   16590:	vmuleq.f32	s15, s15, s14
   16594:	vcvt.u32.f32	s15, s15
   16598:	vmov	r1, s15
   1659c:	bl	1614c <__assert_fail@plt+0x4a48>
   165a0:	cmp	r0, #0
   165a4:	bne	164fc <__assert_fail@plt+0x4df8>
   165a8:	ldr	r0, [r4, #36]	; 0x24
   165ac:	cmp	r0, #0
   165b0:	beq	165c4 <__assert_fail@plt+0x4ec0>
   165b4:	ldr	r6, [r0, #4]
   165b8:	bl	15214 <__assert_fail@plt+0x3b10>
   165bc:	subs	r0, r6, #0
   165c0:	bne	165b4 <__assert_fail@plt+0x4eb0>
   165c4:	mov	r3, #0
   165c8:	str	r3, [r4, #36]	; 0x24
   165cc:	b	164fc <__assert_fail@plt+0x4df8>
   165d0:	b	164b8 <__assert_fail@plt+0x4db4>
   165d4:	strd	r4, [sp, #-16]!
   165d8:	mov	r4, r0
   165dc:	mov	r5, r1
   165e0:	ldr	r0, [r0]
   165e4:	str	r6, [sp, #8]
   165e8:	str	lr, [sp, #12]
   165ec:	bl	1d3fc <__assert_fail@plt+0xbcf8>
   165f0:	ldr	ip, [r4, #8]
   165f4:	mov	r2, r5
   165f8:	mov	r3, #0
   165fc:	ldr	r1, [r4, #12]
   16600:	eor	r0, r0, ip
   16604:	bl	1db88 <__assert_fail@plt+0xc484>
   16608:	ldrd	r4, [sp]
   1660c:	mov	r0, r2
   16610:	ldr	r6, [sp, #8]
   16614:	add	sp, sp, #12
   16618:	pop	{pc}		; (ldr pc, [sp], #4)
   1661c:	strd	r4, [sp, #-16]!
   16620:	ldrd	r2, [r1, #8]
   16624:	ldrd	r4, [r0, #8]
   16628:	str	r6, [sp, #8]
   1662c:	str	lr, [sp, #12]
   16630:	cmp	r5, r3
   16634:	cmpeq	r4, r2
   16638:	beq	16650 <__assert_fail@plt+0x4f4c>
   1663c:	ldrd	r4, [sp]
   16640:	mov	r0, #0
   16644:	ldr	r6, [sp, #8]
   16648:	add	sp, sp, #12
   1664c:	pop	{pc}		; (ldr pc, [sp], #4)
   16650:	ldrd	r4, [r0, #16]
   16654:	ldrd	r2, [r1, #16]
   16658:	cmp	r5, r3
   1665c:	cmpeq	r4, r2
   16660:	bne	1663c <__assert_fail@plt+0x4f38>
   16664:	ldr	r0, [r0]
   16668:	ldr	r1, [r1]
   1666c:	bl	11320 <strcmp@plt>
   16670:	clz	r0, r0
   16674:	ldrd	r4, [sp]
   16678:	lsr	r0, r0, #5
   1667c:	ldr	r6, [sp, #8]
   16680:	add	sp, sp, #12
   16684:	pop	{pc}		; (ldr pc, [sp], #4)
   16688:	str	r4, [sp, #-8]!
   1668c:	mov	r4, r0
   16690:	ldr	r0, [r0]
   16694:	str	lr, [sp, #4]
   16698:	bl	15214 <__assert_fail@plt+0x3b10>
   1669c:	mov	r0, r4
   166a0:	ldr	r4, [sp]
   166a4:	ldr	lr, [sp, #4]
   166a8:	add	sp, sp, #8
   166ac:	b	15214 <__assert_fail@plt+0x3b10>
   166b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166b4:	strd	r6, [sp, #8]
   166b8:	mov	r7, r1
   166bc:	mov	r6, r0
   166c0:	strd	r8, [sp, #16]
   166c4:	mov	r9, r3
   166c8:	ands	r3, r3, #32
   166cc:	strd	sl, [sp, #24]
   166d0:	str	lr, [sp, #32]
   166d4:	vpush	{d8-d9}
   166d8:	sub	sp, sp, #124	; 0x7c
   166dc:	str	r2, [sp, #20]
   166e0:	str	r3, [sp, #48]	; 0x30
   166e4:	movne	r3, #1024	; 0x400
   166e8:	moveq	r3, #1000	; 0x3e8
   166ec:	strd	r6, [sp, #32]
   166f0:	str	r3, [sp, #44]	; 0x2c
   166f4:	add	r3, r2, #644	; 0x284
   166f8:	mov	r5, r3
   166fc:	bl	1165c <localeconv@plt>
   16700:	ldr	fp, [r0]
   16704:	add	r3, r5, #3
   16708:	mov	r4, r0
   1670c:	str	r3, [sp, #16]
   16710:	and	r3, r9, #3
   16714:	str	r3, [sp, #40]	; 0x28
   16718:	mov	r0, fp
   1671c:	bl	1153c <strlen@plt>
   16720:	sub	r2, r0, #1
   16724:	ldr	sl, [r4, #4]
   16728:	movw	r3, #60912	; 0xedf0
   1672c:	movt	r3, #1
   16730:	cmp	r2, #16
   16734:	ldr	r2, [r4, #8]
   16738:	movcs	fp, r3
   1673c:	str	r2, [sp, #52]	; 0x34
   16740:	mov	r2, r0
   16744:	movcc	r2, r0
   16748:	movcs	r2, #1
   1674c:	mov	r0, sl
   16750:	str	r2, [sp, #12]
   16754:	bl	1153c <strlen@plt>
   16758:	cmp	r0, #16
   1675c:	movw	r3, #61172	; 0xeef4
   16760:	movt	r3, #1
   16764:	ldrd	r4, [sp, #176]	; 0xb0
   16768:	movhi	sl, r3
   1676c:	ldrd	r2, [sp, #184]	; 0xb8
   16770:	cmp	r3, r5
   16774:	cmpeq	r2, r4
   16778:	bhi	16a30 <__assert_fail@plt+0x532c>
   1677c:	mov	r0, r4
   16780:	mov	r1, r5
   16784:	bl	1db88 <__assert_fail@plt+0xc484>
   16788:	orrs	r3, r2, r3
   1678c:	bne	167cc <__assert_fail@plt+0x50c8>
   16790:	mul	ip, r0, r7
   16794:	mov	r4, r6
   16798:	mov	r5, r7
   1679c:	mov	r3, r1
   167a0:	umull	r6, r7, r0, r6
   167a4:	mov	r2, r0
   167a8:	mla	r1, r4, r1, ip
   167ac:	strd	r6, [sp, #24]
   167b0:	add	r1, r1, r7
   167b4:	str	r1, [sp, #28]
   167b8:	ldrd	r0, [sp, #24]
   167bc:	bl	1db88 <__assert_fail@plt+0xc484>
   167c0:	cmp	r1, r5
   167c4:	cmpeq	r0, r4
   167c8:	beq	16d7c <__assert_fail@plt+0x5678>
   167cc:	ldrd	r0, [sp, #176]	; 0xb0
   167d0:	bl	1db14 <__assert_fail@plt+0xc410>
   167d4:	vmov	d9, r0, r1
   167d8:	ldrd	r0, [sp, #184]	; 0xb8
   167dc:	bl	1db14 <__assert_fail@plt+0xc410>
   167e0:	vmov	d7, r0, r1
   167e4:	ldrd	r0, [sp, #32]
   167e8:	vdiv.f64	d8, d9, d7
   167ec:	bl	1db14 <__assert_fail@plt+0xc410>
   167f0:	vmov	d7, r0, r1
   167f4:	tst	r9, #16
   167f8:	vmul.f64	d8, d8, d7
   167fc:	beq	16974 <__assert_fail@plt+0x5270>
   16800:	ldr	r6, [sp, #12]
   16804:	mov	r7, #0
   16808:	vldr	s15, [sp, #44]	; 0x2c
   1680c:	vcvt.f64.s32	d6, s15
   16810:	vmov.f64	d7, d6
   16814:	vmov.f64	d5, d7
   16818:	vmul.f64	d7, d7, d6
   1681c:	add	r7, r7, #1
   16820:	vcmpe.f64	d7, d8
   16824:	vmrs	APSR_nzcv, fpscr
   16828:	bhi	16834 <__assert_fail@plt+0x5130>
   1682c:	cmp	r7, #8
   16830:	bne	16814 <__assert_fail@plt+0x5110>
   16834:	ldr	fp, [sp, #40]	; 0x28
   16838:	add	r8, r6, #1
   1683c:	vdiv.f64	d9, d8, d5
   16840:	str	r6, [sp, #12]
   16844:	ldr	r3, [sp, #48]	; 0x30
   16848:	cmp	fp, #1
   1684c:	clz	r4, r3
   16850:	lsr	r4, r4, #5
   16854:	add	r4, r4, #1
   16858:	add	r4, r4, r8
   1685c:	beq	16e4c <__assert_fail@plt+0x5748>
   16860:	vldr	d7, [pc, #1000]	; 16c50 <__assert_fail@plt+0x554c>
   16864:	vcmpe.f64	d9, d7
   16868:	vmrs	APSR_nzcv, fpscr
   1686c:	vmovpl.f64	d7, d9
   16870:	bpl	168b0 <__assert_fail@plt+0x51ac>
   16874:	vmov	r0, r1, d9
   16878:	bl	1dbd8 <__assert_fail@plt+0xc4d4>
   1687c:	mov	r5, r0
   16880:	mov	r6, r1
   16884:	bl	1db14 <__assert_fail@plt+0xc410>
   16888:	cmp	fp, #0
   1688c:	vmov	d7, r0, r1
   16890:	bne	168b0 <__assert_fail@plt+0x51ac>
   16894:	vcmp.f64	d9, d7
   16898:	vmrs	APSR_nzcv, fpscr
   1689c:	beq	168b0 <__assert_fail@plt+0x51ac>
   168a0:	adds	r0, r5, #1
   168a4:	adc	r1, r6, #0
   168a8:	bl	1db14 <__assert_fail@plt+0xc410>
   168ac:	vmov	d7, r0, r1
   168b0:	ldr	r5, [sp, #20]
   168b4:	mvn	r2, #0
   168b8:	mov	r1, #1
   168bc:	movw	r3, #61240	; 0xef38
   168c0:	movt	r3, #1
   168c4:	vstr	d7, [sp]
   168c8:	mov	r0, r5
   168cc:	bl	11578 <__sprintf_chk@plt>
   168d0:	mov	r0, r5
   168d4:	bl	1153c <strlen@plt>
   168d8:	cmp	r0, r4
   168dc:	bls	16d14 <__assert_fail@plt+0x5610>
   168e0:	vldr	d7, [pc, #880]	; 16c58 <__assert_fail@plt+0x5554>
   168e4:	vmul.f64	d9, d9, d7
   168e8:	vldr	d7, [pc, #864]	; 16c50 <__assert_fail@plt+0x554c>
   168ec:	vcmpe.f64	d9, d7
   168f0:	vmrs	APSR_nzcv, fpscr
   168f4:	bpl	1693c <__assert_fail@plt+0x5238>
   168f8:	vmov	r0, r1, d9
   168fc:	bl	1dbd8 <__assert_fail@plt+0xc4d4>
   16900:	mov	r4, r0
   16904:	mov	r5, r1
   16908:	bl	1db14 <__assert_fail@plt+0xc410>
   1690c:	ldr	r3, [sp, #40]	; 0x28
   16910:	vmov	d7, r0, r1
   16914:	cmp	r3, #0
   16918:	bne	16938 <__assert_fail@plt+0x5234>
   1691c:	vcmp.f64	d9, d7
   16920:	vmrs	APSR_nzcv, fpscr
   16924:	beq	16938 <__assert_fail@plt+0x5234>
   16928:	adds	r0, r4, #1
   1692c:	adc	r1, r5, #0
   16930:	bl	1db14 <__assert_fail@plt+0xc410>
   16934:	vmov	d7, r0, r1
   16938:	vmov.f64	d9, d7
   1693c:	vldr	d6, [pc, #788]	; 16c58 <__assert_fail@plt+0x5554>
   16940:	mvn	r2, #0
   16944:	mov	r1, #1
   16948:	movw	r3, #61232	; 0xef30
   1694c:	movt	r3, #1
   16950:	ldr	r4, [sp, #20]
   16954:	vdiv.f64	d7, d9, d6
   16958:	mov	r0, r4
   1695c:	vstr	d7, [sp]
   16960:	bl	11578 <__sprintf_chk@plt>
   16964:	mov	r0, r4
   16968:	bl	1153c <strlen@plt>
   1696c:	mov	r8, r0
   16970:	b	169c0 <__assert_fail@plt+0x52bc>
   16974:	and	r6, r9, #3
   16978:	cmp	r6, #1
   1697c:	beq	16990 <__assert_fail@plt+0x528c>
   16980:	vldr	d7, [pc, #712]	; 16c50 <__assert_fail@plt+0x554c>
   16984:	vcmpe.f64	d8, d7
   16988:	vmrs	APSR_nzcv, fpscr
   1698c:	bmi	16d38 <__assert_fail@plt+0x5634>
   16990:	ldr	r4, [sp, #20]
   16994:	mvn	r2, #0
   16998:	mov	r1, #1
   1699c:	movw	r3, #61232	; 0xef30
   169a0:	movt	r3, #1
   169a4:	vstr	d8, [sp]
   169a8:	mov	r7, r2
   169ac:	mov	r0, r4
   169b0:	bl	11578 <__sprintf_chk@plt>
   169b4:	mov	r0, r4
   169b8:	bl	1153c <strlen@plt>
   169bc:	mov	r8, r0
   169c0:	ldr	r3, [sp, #16]
   169c4:	mov	r2, r0
   169c8:	ldr	r1, [sp, #20]
   169cc:	sub	r6, r3, r0
   169d0:	mov	r0, r6
   169d4:	add	r8, r6, r8
   169d8:	bl	11344 <memmove@plt>
   169dc:	tst	r9, #4
   169e0:	bne	16ba4 <__assert_fail@plt+0x54a0>
   169e4:	tst	r9, #128	; 0x80
   169e8:	beq	16a00 <__assert_fail@plt+0x52fc>
   169ec:	cmn	r7, #1
   169f0:	beq	16c60 <__assert_fail@plt+0x555c>
   169f4:	and	r3, r9, #256	; 0x100
   169f8:	orrs	r2, r3, r7
   169fc:	bne	16ed4 <__assert_fail@plt+0x57d0>
   16a00:	ldr	r2, [sp, #16]
   16a04:	mov	r3, #0
   16a08:	mov	r0, r6
   16a0c:	strb	r3, [r2]
   16a10:	add	sp, sp, #124	; 0x7c
   16a14:	vpop	{d8-d9}
   16a18:	ldrd	r4, [sp]
   16a1c:	ldrd	r6, [sp, #8]
   16a20:	ldrd	r8, [sp, #16]
   16a24:	ldrd	sl, [sp, #24]
   16a28:	add	sp, sp, #32
   16a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a30:	ldrd	r2, [sp, #176]	; 0xb0
   16a34:	orrs	r3, r2, r3
   16a38:	beq	167cc <__assert_fail@plt+0x50c8>
   16a3c:	ldrd	r2, [sp, #176]	; 0xb0
   16a40:	ldrd	r0, [sp, #184]	; 0xb8
   16a44:	bl	1db88 <__assert_fail@plt+0xc484>
   16a48:	orrs	r3, r2, r3
   16a4c:	mov	r4, r0
   16a50:	mov	r5, r1
   16a54:	bne	167cc <__assert_fail@plt+0x50c8>
   16a58:	mov	r2, r4
   16a5c:	mov	r3, r5
   16a60:	ldrd	r0, [sp, #32]
   16a64:	bl	1db88 <__assert_fail@plt+0xc484>
   16a68:	mov	lr, r2
   16a6c:	mov	r8, r1
   16a70:	lsl	r1, r3, #2
   16a74:	mov	r7, r0
   16a78:	lsl	r0, lr, #2
   16a7c:	mov	ip, r3
   16a80:	orr	r1, r1, lr, lsr #30
   16a84:	mov	r2, r4
   16a88:	mov	r3, r5
   16a8c:	adds	r0, r0, lr
   16a90:	adc	r1, r1, ip
   16a94:	adds	r0, r0, r0
   16a98:	adc	r1, r1, r1
   16a9c:	bl	1db88 <__assert_fail@plt+0xc484>
   16aa0:	adds	r1, r2, r2
   16aa4:	mov	r2, r4
   16aa8:	str	r7, [sp, #24]
   16aac:	adc	r3, r3, r3
   16ab0:	mov	lr, r0
   16ab4:	str	r8, [sp, #28]
   16ab8:	str	r1, [sp, #56]	; 0x38
   16abc:	str	r3, [sp, #60]	; 0x3c
   16ac0:	mov	r3, r5
   16ac4:	ldrd	r4, [sp, #56]	; 0x38
   16ac8:	cmp	r3, r5
   16acc:	cmpeq	r2, r4
   16ad0:	bls	16ebc <__assert_fail@plt+0x57b8>
   16ad4:	mov	r3, r4
   16ad8:	orrs	r3, r3, r5
   16adc:	movne	r3, #1
   16ae0:	moveq	r3, #0
   16ae4:	mov	r6, r3
   16ae8:	ands	r3, r9, #16
   16aec:	str	r3, [sp, #56]	; 0x38
   16af0:	beq	16d94 <__assert_fail@plt+0x5690>
   16af4:	ldrd	r4, [sp, #24]
   16af8:	mov	r3, #0
   16afc:	mov	r7, #0
   16b00:	ldr	r8, [sp, #44]	; 0x2c
   16b04:	cmp	r3, r5
   16b08:	mov	r2, r8
   16b0c:	cmpeq	r8, r4
   16b10:	strd	r2, [sp, #32]
   16b14:	bhi	16d98 <__assert_fail@plt+0x5694>
   16b18:	str	fp, [sp, #64]	; 0x40
   16b1c:	mov	fp, r6
   16b20:	mov	r6, lr
   16b24:	str	r9, [sp, #68]	; 0x44
   16b28:	ldr	r9, [sp, #12]
   16b2c:	b	16b54 <__assert_fail@plt+0x5450>
   16b30:	adds	fp, fp, #0
   16b34:	movne	fp, #1
   16b38:	ldrd	r2, [sp, #32]
   16b3c:	add	r7, r7, #1
   16b40:	cmp	r3, r1
   16b44:	cmpeq	r2, r0
   16b48:	bhi	16f58 <__assert_fail@plt+0x5854>
   16b4c:	cmp	r7, #8
   16b50:	beq	16f20 <__assert_fail@plt+0x581c>
   16b54:	mov	r0, r4
   16b58:	mov	r1, r5
   16b5c:	ldrd	r2, [sp, #32]
   16b60:	bl	1db88 <__assert_fail@plt+0xc484>
   16b64:	add	r2, r2, r2, lsl #2
   16b68:	mov	r4, r0
   16b6c:	mov	r5, r1
   16b70:	asr	r3, fp, #1
   16b74:	add	r6, r6, r2, lsl #1
   16b78:	udiv	ip, r6, r8
   16b7c:	mls	r2, r8, ip, r6
   16b80:	mov	r6, ip
   16b84:	add	r3, r3, r2, lsl #1
   16b88:	cmp	r8, r3
   16b8c:	add	fp, fp, r3
   16b90:	bhi	16b30 <__assert_fail@plt+0x542c>
   16b94:	cmp	r8, fp
   16b98:	movcc	fp, #3
   16b9c:	movcs	fp, #2
   16ba0:	b	16b38 <__assert_fail@plt+0x5434>
   16ba4:	mov	r0, sl
   16ba8:	sub	r4, r8, r6
   16bac:	bl	1153c <strlen@plt>
   16bb0:	mov	fp, r0
   16bb4:	mov	r1, r6
   16bb8:	mov	r2, r4
   16bbc:	add	r0, sp, #76	; 0x4c
   16bc0:	mov	r3, #41	; 0x29
   16bc4:	mvn	r5, #0
   16bc8:	bl	11434 <__memcpy_chk@plt>
   16bcc:	ldr	r6, [sp, #52]	; 0x34
   16bd0:	str	r7, [sp, #12]
   16bd4:	ldrb	r3, [r6]
   16bd8:	cmp	r3, #0
   16bdc:	beq	16bf0 <__assert_fail@plt+0x54ec>
   16be0:	cmp	r3, #255	; 0xff
   16be4:	add	r6, r6, #1
   16be8:	movne	r5, r3
   16bec:	moveq	r5, r4
   16bf0:	sub	r7, r8, r5
   16bf4:	cmp	r5, r4
   16bf8:	mov	r2, r5
   16bfc:	mov	r0, r7
   16c00:	bls	16c20 <__assert_fail@plt+0x551c>
   16c04:	sub	r6, r8, r4
   16c08:	mov	r2, r4
   16c0c:	ldr	r7, [sp, #12]
   16c10:	add	r1, sp, #76	; 0x4c
   16c14:	mov	r0, r6
   16c18:	bl	11374 <memcpy@plt>
   16c1c:	b	169e4 <__assert_fail@plt+0x52e0>
   16c20:	sub	r4, r4, r5
   16c24:	add	r3, sp, #76	; 0x4c
   16c28:	add	r1, r3, r4
   16c2c:	sub	r8, r7, fp
   16c30:	bl	11374 <memcpy@plt>
   16c34:	cmp	r4, #0
   16c38:	mov	r2, fp
   16c3c:	mov	r1, sl
   16c40:	mov	r0, r8
   16c44:	beq	170c4 <__assert_fail@plt+0x59c0>
   16c48:	bl	11374 <memcpy@plt>
   16c4c:	b	16bd4 <__assert_fail@plt+0x54d0>
   16c50:	andeq	r0, r0, r0
   16c54:	mvnsmi	r0, #0
   16c58:	andeq	r0, r0, r0
   16c5c:	eormi	r0, r4, r0
   16c60:	ldrd	r2, [sp, #184]	; 0xb8
   16c64:	cmp	r3, #0
   16c68:	cmpeq	r2, #1
   16c6c:	bls	16f18 <__assert_fail@plt+0x5814>
   16c70:	ldr	r1, [sp, #44]	; 0x2c
   16c74:	mov	r7, #1
   16c78:	mov	r2, #1
   16c7c:	mov	r3, #0
   16c80:	ldrd	r4, [sp, #184]	; 0xb8
   16c84:	mul	r0, r1, r3
   16c88:	umull	r2, r3, r2, r1
   16c8c:	add	r3, r0, r3
   16c90:	cmp	r5, r3
   16c94:	cmpeq	r4, r2
   16c98:	bls	16ca8 <__assert_fail@plt+0x55a4>
   16c9c:	add	r7, r7, #1
   16ca0:	cmp	r7, #8
   16ca4:	bne	16c84 <__assert_fail@plt+0x5580>
   16ca8:	tst	r9, #64	; 0x40
   16cac:	and	r3, r9, #256	; 0x100
   16cb0:	beq	16cd0 <__assert_fail@plt+0x55cc>
   16cb4:	ldr	r1, [sp, #20]
   16cb8:	mov	r2, #32
   16cbc:	add	r0, r1, #648	; 0x288
   16cc0:	strb	r2, [r1, #647]	; 0x287
   16cc4:	str	r0, [sp, #16]
   16cc8:	cmp	r7, #0
   16ccc:	beq	170b4 <__assert_fail@plt+0x59b0>
   16cd0:	ldr	r0, [sp, #48]	; 0x30
   16cd4:	cmp	r0, #0
   16cd8:	cmpeq	r7, #1
   16cdc:	beq	16f3c <__assert_fail@plt+0x5838>
   16ce0:	movw	r2, #61200	; 0xef10
   16ce4:	movt	r2, #1
   16ce8:	ldrb	r1, [r2, r7]
   16cec:	cmp	r3, #0
   16cf0:	ldr	r2, [sp, #16]
   16cf4:	strb	r1, [r2], #1
   16cf8:	beq	16f50 <__assert_fail@plt+0x584c>
   16cfc:	cmp	r0, #0
   16d00:	bne	16ee0 <__assert_fail@plt+0x57dc>
   16d04:	mov	r3, #66	; 0x42
   16d08:	strb	r3, [r2], #1
   16d0c:	str	r2, [sp, #16]
   16d10:	b	16a00 <__assert_fail@plt+0x52fc>
   16d14:	tst	r9, #8
   16d18:	beq	16d30 <__assert_fail@plt+0x562c>
   16d1c:	ldr	r3, [sp, #20]
   16d20:	add	r3, r3, r0
   16d24:	ldrb	r3, [r3, #-1]
   16d28:	cmp	r3, #48	; 0x30
   16d2c:	beq	17004 <__assert_fail@plt+0x5900>
   16d30:	sub	r8, r0, r8
   16d34:	b	169c0 <__assert_fail@plt+0x52bc>
   16d38:	vmov	r0, r1, d8
   16d3c:	bl	1dbd8 <__assert_fail@plt+0xc4d4>
   16d40:	mov	r4, r0
   16d44:	mov	r5, r1
   16d48:	bl	1db14 <__assert_fail@plt+0xc410>
   16d4c:	cmp	r6, #0
   16d50:	vmov	d7, r0, r1
   16d54:	bne	16d74 <__assert_fail@plt+0x5670>
   16d58:	vcmp.f64	d8, d7
   16d5c:	vmrs	APSR_nzcv, fpscr
   16d60:	beq	16d74 <__assert_fail@plt+0x5670>
   16d64:	adds	r0, r4, #1
   16d68:	adc	r1, r5, #0
   16d6c:	bl	1db14 <__assert_fail@plt+0xc410>
   16d70:	vmov	d7, r0, r1
   16d74:	vmov.f64	d8, d7
   16d78:	b	16990 <__assert_fail@plt+0x528c>
   16d7c:	mov	r3, #0
   16d80:	mov	r6, r3
   16d84:	mov	lr, r3
   16d88:	ands	r3, r9, #16
   16d8c:	str	r3, [sp, #56]	; 0x38
   16d90:	bne	16af4 <__assert_fail@plt+0x53f0>
   16d94:	mvn	r7, #0
   16d98:	ldr	r3, [sp, #40]	; 0x28
   16d9c:	cmp	r3, #1
   16da0:	beq	16e88 <__assert_fail@plt+0x5784>
   16da4:	ldr	r8, [sp, #16]
   16da8:	ldr	r3, [sp, #40]	; 0x28
   16dac:	cmp	r3, #0
   16db0:	bne	16dfc <__assert_fail@plt+0x56f8>
   16db4:	add	r3, r6, lr
   16db8:	cmp	r3, #0
   16dbc:	ble	16dfc <__assert_fail@plt+0x56f8>
   16dc0:	ldr	r3, [sp, #24]
   16dc4:	adds	r3, r3, #1
   16dc8:	str	r3, [sp, #24]
   16dcc:	ldr	r3, [sp, #28]
   16dd0:	adc	r3, r3, #0
   16dd4:	str	r3, [sp, #28]
   16dd8:	ldr	r3, [sp, #56]	; 0x38
   16ddc:	cmp	r3, #0
   16de0:	beq	16dfc <__assert_fail@plt+0x56f8>
   16de4:	ldrd	r0, [sp, #24]
   16de8:	mov	r3, #0
   16dec:	ldr	r2, [sp, #44]	; 0x2c
   16df0:	cmp	r3, r1
   16df4:	cmpeq	r2, r0
   16df8:	beq	16ef4 <__assert_fail@plt+0x57f0>
   16dfc:	ldrd	r4, [sp, #24]
   16e00:	mov	r6, r8
   16e04:	mov	r0, r4
   16e08:	mov	r1, r5
   16e0c:	mov	r2, #10
   16e10:	mov	r3, #0
   16e14:	bl	1db88 <__assert_fail@plt+0xc484>
   16e18:	add	r2, r2, #48	; 0x30
   16e1c:	mov	r0, r4
   16e20:	mov	r1, r5
   16e24:	mov	r3, #0
   16e28:	strb	r2, [r6, #-1]!
   16e2c:	mov	r2, #10
   16e30:	bl	1db88 <__assert_fail@plt+0xc484>
   16e34:	cmp	r5, #0
   16e38:	mov	r5, r1
   16e3c:	cmpeq	r4, #9
   16e40:	mov	r4, r0
   16e44:	bhi	16e04 <__assert_fail@plt+0x5700>
   16e48:	b	169dc <__assert_fail@plt+0x52d8>
   16e4c:	ldr	r5, [sp, #20]
   16e50:	mvn	r2, #0
   16e54:	movw	r3, #61240	; 0xef38
   16e58:	movt	r3, #1
   16e5c:	vstr	d9, [sp]
   16e60:	ldr	r1, [sp, #40]	; 0x28
   16e64:	mov	r0, r5
   16e68:	bl	11578 <__sprintf_chk@plt>
   16e6c:	mov	r0, r5
   16e70:	bl	1153c <strlen@plt>
   16e74:	cmp	r0, r4
   16e78:	bls	16d14 <__assert_fail@plt+0x5610>
   16e7c:	vldr	d7, [pc, #-556]	; 16c58 <__assert_fail@plt+0x5554>
   16e80:	vmul.f64	d9, d9, d7
   16e84:	b	1693c <__assert_fail@plt+0x5238>
   16e88:	mov	r5, #0
   16e8c:	ldr	r8, [sp, #16]
   16e90:	ldr	r3, [sp, #24]
   16e94:	and	r4, r3, #1
   16e98:	adds	r2, r4, r6
   16e9c:	adc	r3, r5, r6, asr #31
   16ea0:	orr	r2, r2, r3
   16ea4:	mov	r3, lr
   16ea8:	cmp	r2, r5
   16eac:	addne	r3, r3, #1
   16eb0:	cmp	r3, #5
   16eb4:	bgt	16dc0 <__assert_fail@plt+0x56bc>
   16eb8:	b	16dfc <__assert_fail@plt+0x56f8>
   16ebc:	movcs	r3, #2
   16ec0:	movcs	r6, r3
   16ec4:	bcs	16ae8 <__assert_fail@plt+0x53e4>
   16ec8:	mov	r3, #3
   16ecc:	mov	r6, r3
   16ed0:	b	16ae8 <__assert_fail@plt+0x53e4>
   16ed4:	tst	r9, #64	; 0x40
   16ed8:	beq	16cc8 <__assert_fail@plt+0x55c4>
   16edc:	b	16cb4 <__assert_fail@plt+0x55b0>
   16ee0:	ldr	r1, [sp, #16]
   16ee4:	mov	r3, #105	; 0x69
   16ee8:	add	r2, r1, #2
   16eec:	strb	r3, [r1, #1]
   16ef0:	b	16d04 <__assert_fail@plt+0x5600>
   16ef4:	cmp	r7, #8
   16ef8:	beq	16dfc <__assert_fail@plt+0x56f8>
   16efc:	tst	r9, #8
   16f00:	add	r7, r7, #1
   16f04:	beq	1707c <__assert_fail@plt+0x5978>
   16f08:	mov	r3, #49	; 0x31
   16f0c:	sub	r6, r8, #1
   16f10:	strb	r3, [r8, #-1]
   16f14:	b	169dc <__assert_fail@plt+0x52d8>
   16f18:	mov	r7, #0
   16f1c:	b	169f4 <__assert_fail@plt+0x52f0>
   16f20:	mov	lr, r6
   16f24:	mov	r6, fp
   16f28:	str	r9, [sp, #12]
   16f2c:	strd	r4, [sp, #24]
   16f30:	ldr	fp, [sp, #64]	; 0x40
   16f34:	ldr	r9, [sp, #68]	; 0x44
   16f38:	b	16d98 <__assert_fail@plt+0x5694>
   16f3c:	ldr	r2, [sp, #16]
   16f40:	mov	r1, #107	; 0x6b
   16f44:	cmp	r3, #0
   16f48:	strb	r1, [r2], #1
   16f4c:	bne	16d04 <__assert_fail@plt+0x5600>
   16f50:	str	r2, [sp, #16]
   16f54:	b	16a00 <__assert_fail@plt+0x52fc>
   16f58:	cmp	r1, #0
   16f5c:	mov	lr, r6
   16f60:	str	r9, [sp, #12]
   16f64:	cmpeq	r0, #9
   16f68:	mov	r6, fp
   16f6c:	strd	r4, [sp, #24]
   16f70:	ldr	fp, [sp, #64]	; 0x40
   16f74:	ldr	r9, [sp, #68]	; 0x44
   16f78:	bhi	16d98 <__assert_fail@plt+0x5694>
   16f7c:	ldr	r3, [sp, #40]	; 0x28
   16f80:	cmp	r3, #1
   16f84:	beq	17030 <__assert_fail@plt+0x592c>
   16f88:	ldr	r2, [sp, #40]	; 0x28
   16f8c:	adds	r3, r6, #0
   16f90:	movne	r3, #1
   16f94:	cmp	r2, #0
   16f98:	movne	r3, #0
   16f9c:	cmp	r3, #0
   16fa0:	bne	1701c <__assert_fail@plt+0x5918>
   16fa4:	cmp	ip, #0
   16fa8:	addne	r3, ip, #48	; 0x30
   16fac:	uxtbne	r3, r3
   16fb0:	bne	16fc0 <__assert_fail@plt+0x58bc>
   16fb4:	tst	r9, #8
   16fb8:	bne	17074 <__assert_fail@plt+0x5970>
   16fbc:	mov	r3, #48	; 0x30
   16fc0:	ldr	r2, [sp, #12]
   16fc4:	ldr	r1, [sp, #20]
   16fc8:	add	r8, r1, #644	; 0x284
   16fcc:	strb	r3, [r1, #646]	; 0x286
   16fd0:	mov	r3, #0
   16fd4:	add	r8, r8, #2
   16fd8:	mov	r1, fp
   16fdc:	sub	r8, r8, r2
   16fe0:	mov	r6, r3
   16fe4:	mov	r0, r8
   16fe8:	bl	11374 <memcpy@plt>
   16fec:	ldr	r3, [sp, #40]	; 0x28
   16ff0:	cmp	r3, #1
   16ff4:	beq	16dfc <__assert_fail@plt+0x56f8>
   16ff8:	mov	r3, #0
   16ffc:	mov	lr, r3
   17000:	b	16da8 <__assert_fail@plt+0x56a4>
   17004:	vldr	d7, [pc, #-948]	; 16c58 <__assert_fail@plt+0x5554>
   17008:	ldr	r3, [sp, #40]	; 0x28
   1700c:	vmul.f64	d9, d9, d7
   17010:	cmp	r3, #1
   17014:	bne	168e8 <__assert_fail@plt+0x51e4>
   17018:	b	1693c <__assert_fail@plt+0x5238>
   1701c:	cmp	ip, #9
   17020:	beq	17048 <__assert_fail@plt+0x5944>
   17024:	add	r3, ip, #49	; 0x31
   17028:	uxtb	r3, r3
   1702c:	b	16fc0 <__assert_fail@plt+0x58bc>
   17030:	and	r3, ip, #1
   17034:	add	r3, r3, r6
   17038:	cmp	r3, #2
   1703c:	movle	r3, #0
   17040:	movgt	r3, #1
   17044:	b	16f9c <__assert_fail@plt+0x5898>
   17048:	adds	r3, r0, #1
   1704c:	str	r3, [sp, #24]
   17050:	adc	r3, r1, #0
   17054:	str	r3, [sp, #28]
   17058:	ldrd	r2, [sp, #24]
   1705c:	cmp	r3, #0
   17060:	cmpeq	r2, #10
   17064:	beq	170a4 <__assert_fail@plt+0x59a0>
   17068:	mov	r3, #0
   1706c:	mov	r6, r3
   17070:	b	16fb4 <__assert_fail@plt+0x58b0>
   17074:	ldr	r8, [sp, #16]
   17078:	b	16fec <__assert_fail@plt+0x58e8>
   1707c:	ldr	r3, [sp, #12]
   17080:	mov	r0, #48	; 0x30
   17084:	mov	r1, fp
   17088:	strb	r0, [r8, #-1]
   1708c:	ldr	r2, [sp, #12]
   17090:	mvn	r3, r3
   17094:	add	r8, r8, r3
   17098:	mov	r0, r8
   1709c:	bl	11374 <memcpy@plt>
   170a0:	b	16f08 <__assert_fail@plt+0x5804>
   170a4:	mov	r3, #0
   170a8:	ldr	r8, [sp, #16]
   170ac:	mov	r6, r3
   170b0:	b	16fec <__assert_fail@plt+0x58e8>
   170b4:	cmp	r3, #0
   170b8:	ldrne	r2, [sp, #16]
   170bc:	bne	16d04 <__assert_fail@plt+0x5600>
   170c0:	b	16a00 <__assert_fail@plt+0x52fc>
   170c4:	mov	r6, r7
   170c8:	ldr	r7, [sp, #12]
   170cc:	b	169e4 <__assert_fail@plt+0x52e0>
   170d0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   170d4:	subs	r4, r0, #0
   170d8:	strd	r6, [sp, #8]
   170dc:	mov	r7, r1
   170e0:	mov	r6, r2
   170e4:	str	r8, [sp, #16]
   170e8:	strd	sl, [sp, #20]
   170ec:	str	lr, [sp, #28]
   170f0:	sub	sp, sp, #16
   170f4:	beq	17214 <__assert_fail@plt+0x5b10>
   170f8:	ldrb	r3, [r4]
   170fc:	movw	r5, #61200	; 0xef10
   17100:	movt	r5, #1
   17104:	add	r2, r5, #12
   17108:	add	r1, r5, #20
   1710c:	cmp	r3, #39	; 0x27
   17110:	mov	r3, #4
   17114:	addeq	r4, r4, #1
   17118:	moveq	r8, #4
   1711c:	mov	r0, r4
   17120:	movne	r8, #0
   17124:	bl	1c8ac <__assert_fail@plt+0xb1a8>
   17128:	cmp	r0, #0
   1712c:	blt	1716c <__assert_fail@plt+0x5a68>
   17130:	add	r5, r5, r0, lsl #2
   17134:	mov	sl, #1
   17138:	mov	fp, #0
   1713c:	mov	r0, #0
   17140:	ldr	r3, [r5, #12]
   17144:	strd	sl, [r6]
   17148:	orr	r3, r8, r3
   1714c:	str	r3, [r7]
   17150:	add	sp, sp, #16
   17154:	ldrd	r4, [sp]
   17158:	ldrd	r6, [sp, #8]
   1715c:	ldr	r8, [sp, #16]
   17160:	ldrd	sl, [sp, #20]
   17164:	add	sp, sp, #28
   17168:	pop	{pc}		; (ldr pc, [sp], #4)
   1716c:	movw	r0, #61272	; 0xef58
   17170:	movt	r0, #1
   17174:	mov	r3, r6
   17178:	mov	r2, #0
   1717c:	add	r1, sp, #12
   17180:	str	r0, [sp]
   17184:	mov	r0, r4
   17188:	bl	1b484 <__assert_fail@plt+0x9d80>
   1718c:	cmp	r0, #0
   17190:	bne	171d8 <__assert_fail@plt+0x5ad4>
   17194:	ldrb	r3, [r4]
   17198:	sub	r3, r3, #48	; 0x30
   1719c:	cmp	r3, #9
   171a0:	bls	171cc <__assert_fail@plt+0x5ac8>
   171a4:	ldr	r2, [sp, #12]
   171a8:	cmp	r4, r2
   171ac:	bne	171bc <__assert_fail@plt+0x5ab8>
   171b0:	b	17268 <__assert_fail@plt+0x5b64>
   171b4:	cmp	r2, r4
   171b8:	beq	17268 <__assert_fail@plt+0x5b64>
   171bc:	ldrb	r3, [r4, #1]!
   171c0:	sub	r3, r3, #48	; 0x30
   171c4:	cmp	r3, #9
   171c8:	bhi	171b4 <__assert_fail@plt+0x5ab0>
   171cc:	ldrd	r2, [r6]
   171d0:	str	r8, [r7]
   171d4:	b	171e4 <__assert_fail@plt+0x5ae0>
   171d8:	mov	r1, #0
   171dc:	ldrd	r2, [r6]
   171e0:	str	r1, [r7]
   171e4:	orrs	r3, r2, r3
   171e8:	bne	17150 <__assert_fail@plt+0x5a4c>
   171ec:	movw	r0, #60076	; 0xeaac
   171f0:	movt	r0, #1
   171f4:	bl	114c4 <getenv@plt>
   171f8:	cmp	r0, #0
   171fc:	mov	r3, #0
   17200:	moveq	r2, #1024	; 0x400
   17204:	movne	r2, #512	; 0x200
   17208:	mov	r0, #4
   1720c:	strd	r2, [r6]
   17210:	b	17150 <__assert_fail@plt+0x5a4c>
   17214:	movw	r0, #61248	; 0xef40
   17218:	movt	r0, #1
   1721c:	bl	114c4 <getenv@plt>
   17220:	subs	r4, r0, #0
   17224:	bne	170f8 <__assert_fail@plt+0x59f4>
   17228:	movw	r0, #61260	; 0xef4c
   1722c:	movt	r0, #1
   17230:	bl	114c4 <getenv@plt>
   17234:	subs	r4, r0, #0
   17238:	bne	170f8 <__assert_fail@plt+0x59f4>
   1723c:	movw	r0, #60076	; 0xeaac
   17240:	movt	r0, #1
   17244:	bl	114c4 <getenv@plt>
   17248:	subs	r3, r0, #0
   1724c:	beq	17294 <__assert_fail@plt+0x5b90>
   17250:	mov	r2, #512	; 0x200
   17254:	mov	r3, #0
   17258:	mov	r0, r4
   1725c:	strd	r2, [r6]
   17260:	str	r4, [r7]
   17264:	b	17150 <__assert_fail@plt+0x5a4c>
   17268:	ldrb	r3, [r2, #-1]
   1726c:	cmp	r3, #66	; 0x42
   17270:	orrne	r8, r8, #128	; 0x80
   17274:	beq	17280 <__assert_fail@plt+0x5b7c>
   17278:	orr	r8, r8, #32
   1727c:	b	171cc <__assert_fail@plt+0x5ac8>
   17280:	ldrb	r3, [r2, #-2]
   17284:	orr	r8, r8, #384	; 0x180
   17288:	cmp	r3, #105	; 0x69
   1728c:	bne	171cc <__assert_fail@plt+0x5ac8>
   17290:	b	17278 <__assert_fail@plt+0x5b74>
   17294:	mov	r4, #1024	; 0x400
   17298:	mov	r5, #0
   1729c:	mov	r0, r3
   172a0:	strd	r4, [r6]
   172a4:	str	r3, [r7]
   172a8:	b	17150 <__assert_fail@plt+0x5a4c>
   172ac:	mov	r3, #0
   172b0:	strd	r4, [sp, #-16]!
   172b4:	mov	r4, r0
   172b8:	mov	r5, r1
   172bc:	str	r6, [sp, #8]
   172c0:	add	r6, r2, #20
   172c4:	str	lr, [sp, #12]
   172c8:	strb	r3, [r2, #20]
   172cc:	mov	r0, r4
   172d0:	mov	r1, r5
   172d4:	mov	r2, #10
   172d8:	mov	r3, #0
   172dc:	bl	1db88 <__assert_fail@plt+0xc484>
   172e0:	add	ip, r2, #48	; 0x30
   172e4:	mov	r0, r4
   172e8:	mov	r1, r5
   172ec:	mov	r2, #10
   172f0:	mov	r3, #0
   172f4:	strb	ip, [r6, #-1]!
   172f8:	bl	1db88 <__assert_fail@plt+0xc484>
   172fc:	cmp	r5, #0
   17300:	mov	r5, r1
   17304:	cmpeq	r4, #9
   17308:	mov	r4, r0
   1730c:	bhi	172cc <__assert_fail@plt+0x5bc8>
   17310:	mov	r0, r6
   17314:	ldrd	r4, [sp]
   17318:	ldr	r6, [sp, #8]
   1731c:	add	sp, sp, #12
   17320:	pop	{pc}		; (ldr pc, [sp], #4)
   17324:	strd	r4, [sp, #-20]!	; 0xffffffec
   17328:	mov	r5, r2
   1732c:	strd	r6, [sp, #8]
   17330:	subs	r6, r0, #0
   17334:	mov	r7, r1
   17338:	str	lr, [sp, #16]
   1733c:	sub	sp, sp, #12
   17340:	addeq	r6, sp, #4
   17344:	mov	r0, r6
   17348:	bl	1147c <mbrtowc@plt>
   1734c:	cmp	r5, #0
   17350:	cmnne	r0, #3
   17354:	mov	r4, r0
   17358:	bhi	17374 <__assert_fail@plt+0x5c70>
   1735c:	mov	r0, r4
   17360:	add	sp, sp, #12
   17364:	ldrd	r4, [sp]
   17368:	ldrd	r6, [sp, #8]
   1736c:	add	sp, sp, #16
   17370:	pop	{pc}		; (ldr pc, [sp], #4)
   17374:	mov	r0, #0
   17378:	bl	1d3a4 <__assert_fail@plt+0xbca0>
   1737c:	cmp	r0, #0
   17380:	bne	1735c <__assert_fail@plt+0x5c58>
   17384:	ldrb	r3, [r7]
   17388:	mov	r4, #1
   1738c:	str	r3, [r6]
   17390:	b	1735c <__assert_fail@plt+0x5c58>
   17394:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17398:	mov	r4, r2
   1739c:	strd	r6, [sp, #8]
   173a0:	mov	r6, r1
   173a4:	strd	r8, [sp, #16]
   173a8:	mov	r9, r3
   173ac:	strd	sl, [sp, #24]
   173b0:	str	lr, [sp, #32]
   173b4:	sub	sp, sp, #12
   173b8:	ldr	r7, [sp, #52]	; 0x34
   173bc:	str	r0, [sp]
   173c0:	bl	1153c <strlen@plt>
   173c4:	mov	fp, r0
   173c8:	ands	sl, r7, #2
   173cc:	beq	17520 <__assert_fail@plt+0x5e1c>
   173d0:	mov	r8, #0
   173d4:	mov	r5, fp
   173d8:	mov	sl, r8
   173dc:	ldr	r2, [r9]
   173e0:	cmp	r2, r5
   173e4:	movcc	fp, r2
   173e8:	movcc	r1, #0
   173ec:	bcs	174f0 <__assert_fail@plt+0x5dec>
   173f0:	ldr	r3, [sp, #48]	; 0x30
   173f4:	str	r2, [r9]
   173f8:	cmp	r3, #0
   173fc:	beq	17514 <__assert_fail@plt+0x5e10>
   17400:	cmp	r3, #1
   17404:	moveq	r5, #0
   17408:	beq	17418 <__assert_fail@plt+0x5d14>
   1740c:	lsr	r5, r1, #1
   17410:	and	r1, r1, #1
   17414:	add	r1, r1, r5
   17418:	tst	r7, #4
   1741c:	addeq	r9, r1, fp
   17420:	movne	r9, fp
   17424:	movne	r1, #0
   17428:	tst	r7, #8
   1742c:	movne	r5, #0
   17430:	cmp	r4, #0
   17434:	beq	174b8 <__assert_fail@plt+0x5db4>
   17438:	sub	r4, r4, #1
   1743c:	mov	r0, r6
   17440:	add	r4, r6, r4
   17444:	cmp	r1, #0
   17448:	cmpne	r6, r4
   1744c:	bcs	1746c <__assert_fail@plt+0x5d68>
   17450:	mov	lr, #32
   17454:	rsb	r3, r1, #0
   17458:	strb	lr, [r0], #1
   1745c:	sub	r2, r6, r0
   17460:	cmp	r3, r2
   17464:	cmpne	r4, r0
   17468:	bhi	17454 <__assert_fail@plt+0x5d50>
   1746c:	sub	r2, r4, r0
   17470:	mov	ip, #0
   17474:	ldr	r1, [sp]
   17478:	cmp	r2, fp
   1747c:	movcs	r2, fp
   17480:	strb	ip, [r0]
   17484:	bl	11500 <mempcpy@plt>
   17488:	cmp	r5, #0
   1748c:	cmpne	r4, r0
   17490:	mov	r3, r0
   17494:	bls	174b0 <__assert_fail@plt+0x5dac>
   17498:	mov	r1, #32
   1749c:	strb	r1, [r3], #1
   174a0:	sub	r2, r3, r5
   174a4:	cmp	r0, r2
   174a8:	cmpne	r4, r3
   174ac:	bhi	1749c <__assert_fail@plt+0x5d98>
   174b0:	mov	r2, #0
   174b4:	strb	r2, [r3]
   174b8:	add	r5, r5, r9
   174bc:	mov	r0, r8
   174c0:	bl	15214 <__assert_fail@plt+0x3b10>
   174c4:	mov	r0, sl
   174c8:	bl	15214 <__assert_fail@plt+0x3b10>
   174cc:	mov	r0, r5
   174d0:	add	sp, sp, #12
   174d4:	ldrd	r4, [sp]
   174d8:	ldrd	r6, [sp, #8]
   174dc:	ldrd	r8, [sp, #16]
   174e0:	ldrd	sl, [sp, #24]
   174e4:	add	sp, sp, #32
   174e8:	pop	{pc}		; (ldr pc, [sp], #4)
   174ec:	mov	sl, #0
   174f0:	ldr	r3, [sp, #48]	; 0x30
   174f4:	cmp	r2, r5
   174f8:	subhi	r1, r2, r5
   174fc:	movls	r2, r5
   17500:	movhi	r2, r5
   17504:	movls	r1, #0
   17508:	str	r2, [r9]
   1750c:	cmp	r3, #0
   17510:	bne	17400 <__assert_fail@plt+0x5cfc>
   17514:	mov	r5, r1
   17518:	ldr	r1, [sp, #48]	; 0x30
   1751c:	b	17418 <__assert_fail@plt+0x5d14>
   17520:	bl	11458 <__ctype_get_mb_cur_max@plt>
   17524:	cmp	r0, #1
   17528:	bls	173d0 <__assert_fail@plt+0x5ccc>
   1752c:	mov	r2, sl
   17530:	mov	r0, sl
   17534:	ldr	r1, [sp]
   17538:	bl	11668 <mbstowcs@plt>
   1753c:	cmn	r0, #1
   17540:	bne	1755c <__assert_fail@plt+0x5e58>
   17544:	tst	r7, #1
   17548:	bne	173d0 <__assert_fail@plt+0x5ccc>
   1754c:	mov	r8, #0
   17550:	mvn	r5, #0
   17554:	mov	sl, r8
   17558:	b	174bc <__assert_fail@plt+0x5db8>
   1755c:	add	r5, r0, #1
   17560:	lsl	r3, r5, #2
   17564:	mov	r0, r3
   17568:	str	r3, [sp, #4]
   1756c:	bl	1bea0 <__assert_fail@plt+0xa79c>
   17570:	subs	r8, r0, #0
   17574:	beq	176a0 <__assert_fail@plt+0x5f9c>
   17578:	mov	r2, r5
   1757c:	ldr	r1, [sp]
   17580:	bl	11668 <mbstowcs@plt>
   17584:	cmp	r0, #0
   17588:	beq	176f8 <__assert_fail@plt+0x5ff4>
   1758c:	ldr	r3, [sp, #4]
   17590:	add	r3, r8, r3
   17594:	str	sl, [r3, #-4]
   17598:	ldr	r2, [r8]
   1759c:	cmp	r2, #0
   175a0:	beq	176b4 <__assert_fail@plt+0x5fb0>
   175a4:	mov	r0, r2
   175a8:	str	r4, [sp, #4]
   175ac:	mov	r4, r8
   175b0:	bl	11410 <iswprint@plt>
   175b4:	cmp	r0, #0
   175b8:	bne	175c8 <__assert_fail@plt+0x5ec4>
   175bc:	movw	r3, #65533	; 0xfffd
   175c0:	mov	sl, #1
   175c4:	str	r3, [r4]
   175c8:	ldr	r0, [r4, #4]!
   175cc:	cmp	r0, #0
   175d0:	bne	175b0 <__assert_fail@plt+0x5eac>
   175d4:	mov	r2, r0
   175d8:	mov	r1, r5
   175dc:	ldr	r4, [sp, #4]
   175e0:	mov	r0, r8
   175e4:	str	r2, [sp, #4]
   175e8:	bl	11620 <wcswidth@plt>
   175ec:	cmp	sl, #0
   175f0:	mov	r5, r0
   175f4:	ldr	r2, [sp, #4]
   175f8:	beq	176c4 <__assert_fail@plt+0x5fc0>
   175fc:	mov	r0, r2
   17600:	mov	r1, r8
   17604:	bl	11488 <wcstombs@plt>
   17608:	add	r3, r0, #1
   1760c:	str	r3, [sp, #4]
   17610:	ldr	r0, [sp, #4]
   17614:	bl	1bea0 <__assert_fail@plt+0xa79c>
   17618:	subs	sl, r0, #0
   1761c:	beq	176e8 <__assert_fail@plt+0x5fe4>
   17620:	ldr	r0, [r8]
   17624:	ldr	r3, [r9]
   17628:	cmp	r0, #0
   1762c:	beq	17704 <__assert_fail@plt+0x6000>
   17630:	mov	fp, r8
   17634:	mov	r5, #0
   17638:	str	r4, [sp]
   1763c:	mov	r4, r3
   17640:	b	17654 <__assert_fail@plt+0x5f50>
   17644:	ldr	r0, [fp, #4]!
   17648:	mov	r5, r3
   1764c:	cmp	r0, #0
   17650:	beq	17678 <__assert_fail@plt+0x5f74>
   17654:	bl	11338 <wcwidth@plt>
   17658:	cmn	r0, #1
   1765c:	bne	1766c <__assert_fail@plt+0x5f68>
   17660:	movw	r3, #65533	; 0xfffd
   17664:	mov	r0, #1
   17668:	str	r3, [fp]
   1766c:	add	r3, r0, r5
   17670:	cmp	r4, r3
   17674:	bcs	17644 <__assert_fail@plt+0x5f40>
   17678:	ldr	r4, [sp]
   1767c:	mov	r0, #0
   17680:	mov	r1, r8
   17684:	str	sl, [sp]
   17688:	ldr	r2, [sp, #4]
   1768c:	str	r0, [fp]
   17690:	mov	r0, sl
   17694:	bl	11488 <wcstombs@plt>
   17698:	mov	fp, r0
   1769c:	b	173dc <__assert_fail@plt+0x5cd8>
   176a0:	tst	r7, #1
   176a4:	movne	r5, fp
   176a8:	movne	sl, r8
   176ac:	bne	173dc <__assert_fail@plt+0x5cd8>
   176b0:	b	1754c <__assert_fail@plt+0x5e48>
   176b4:	mov	r1, r5
   176b8:	mov	r0, r8
   176bc:	bl	11620 <wcswidth@plt>
   176c0:	mov	r5, r0
   176c4:	ldr	r2, [r9]
   176c8:	cmp	r2, r5
   176cc:	bcs	174ec <__assert_fail@plt+0x5de8>
   176d0:	add	r3, fp, #1
   176d4:	str	r3, [sp, #4]
   176d8:	ldr	r0, [sp, #4]
   176dc:	bl	1bea0 <__assert_fail@plt+0xa79c>
   176e0:	subs	sl, r0, #0
   176e4:	bne	17620 <__assert_fail@plt+0x5f1c>
   176e8:	tst	r7, #1
   176ec:	mvneq	r5, #0
   176f0:	bne	173dc <__assert_fail@plt+0x5cd8>
   176f4:	b	174bc <__assert_fail@plt+0x5db8>
   176f8:	mov	sl, r0
   176fc:	mov	r5, fp
   17700:	b	173dc <__assert_fail@plt+0x5cd8>
   17704:	mov	r5, r0
   17708:	mov	fp, r8
   1770c:	b	1767c <__assert_fail@plt+0x5f78>
   17710:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17714:	strd	r6, [sp, #8]
   17718:	mov	r6, r1
   1771c:	mov	r7, #0
   17720:	strd	r8, [sp, #16]
   17724:	mov	r9, r0
   17728:	ldr	r8, [r1]
   1772c:	strd	sl, [sp, #24]
   17730:	mov	fp, r2
   17734:	mov	sl, r3
   17738:	str	lr, [sp, #32]
   1773c:	sub	sp, sp, #12
   17740:	mov	r0, r8
   17744:	add	r4, r0, #1
   17748:	mov	r0, r7
   1774c:	mov	r1, r4
   17750:	bl	1bedc <__assert_fail@plt+0xa7d8>
   17754:	subs	r5, r0, #0
   17758:	mov	r3, r6
   1775c:	mov	r2, r4
   17760:	mov	r0, r9
   17764:	mov	r1, r5
   17768:	beq	177b0 <__assert_fail@plt+0x60ac>
   1776c:	str	r8, [r6]
   17770:	mov	r7, r5
   17774:	str	fp, [sp]
   17778:	str	sl, [sp, #4]
   1777c:	bl	17394 <__assert_fail@plt+0x5c90>
   17780:	cmn	r0, #1
   17784:	beq	177bc <__assert_fail@plt+0x60b8>
   17788:	cmp	r4, r0
   1778c:	bls	17744 <__assert_fail@plt+0x6040>
   17790:	mov	r0, r5
   17794:	add	sp, sp, #12
   17798:	ldrd	r4, [sp]
   1779c:	ldrd	r6, [sp, #8]
   177a0:	ldrd	r8, [sp, #16]
   177a4:	ldrd	sl, [sp, #24]
   177a8:	add	sp, sp, #32
   177ac:	pop	{pc}		; (ldr pc, [sp], #4)
   177b0:	mov	r0, r7
   177b4:	bl	15214 <__assert_fail@plt+0x3b10>
   177b8:	b	17790 <__assert_fail@plt+0x608c>
   177bc:	mov	r0, r5
   177c0:	mov	r5, #0
   177c4:	bl	15214 <__assert_fail@plt+0x3b10>
   177c8:	b	17790 <__assert_fail@plt+0x608c>
   177cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   177d0:	mov	r4, r0
   177d4:	strd	r6, [sp, #8]
   177d8:	add	r6, r0, r1
   177dc:	str	r8, [sp, #16]
   177e0:	strd	sl, [sp, #20]
   177e4:	mov	fp, r2
   177e8:	str	lr, [sp, #28]
   177ec:	sub	sp, sp, #16
   177f0:	bl	11458 <__ctype_get_mb_cur_max@plt>
   177f4:	cmp	r0, #1
   177f8:	bls	1791c <__assert_fail@plt+0x6218>
   177fc:	cmp	r4, r6
   17800:	mov	r5, #0
   17804:	bcs	178fc <__assert_fail@plt+0x61f8>
   17808:	and	sl, fp, #2
   1780c:	b	17834 <__assert_fail@plt+0x6130>
   17810:	cmp	r3, #37	; 0x25
   17814:	bcs	17824 <__assert_fail@plt+0x6120>
   17818:	sub	r3, r3, #32
   1781c:	cmp	r3, #3
   17820:	bhi	1785c <__assert_fail@plt+0x6158>
   17824:	add	r4, r4, #1
   17828:	add	r5, r5, #1
   1782c:	cmp	r4, r6
   17830:	bcs	178fc <__assert_fail@plt+0x61f8>
   17834:	ldrb	r3, [r4]
   17838:	cmp	r3, #63	; 0x3f
   1783c:	bls	17810 <__assert_fail@plt+0x610c>
   17840:	cmp	r3, #65	; 0x41
   17844:	bcc	1785c <__assert_fail@plt+0x6158>
   17848:	cmp	r3, #95	; 0x5f
   1784c:	bls	17824 <__assert_fail@plt+0x6120>
   17850:	sub	r3, r3, #97	; 0x61
   17854:	cmp	r3, #29
   17858:	bls	17824 <__assert_fail@plt+0x6120>
   1785c:	mov	r2, #0
   17860:	mov	r3, #0
   17864:	mvn	r7, #-2147483648	; 0x80000000
   17868:	strd	r2, [sp, #8]
   1786c:	b	17890 <__assert_fail@plt+0x618c>
   17870:	cmp	r2, r0
   17874:	add	r5, r5, r0
   17878:	blt	178f8 <__assert_fail@plt+0x61f4>
   1787c:	add	r0, sp, #8
   17880:	add	r4, r4, r8
   17884:	bl	1138c <mbsinit@plt>
   17888:	cmp	r0, #0
   1788c:	bne	1782c <__assert_fail@plt+0x6128>
   17890:	add	r3, sp, #8
   17894:	sub	r2, r6, r4
   17898:	mov	r1, r4
   1789c:	add	r0, sp, #4
   178a0:	bl	17324 <__assert_fail@plt+0x5c20>
   178a4:	cmn	r0, #1
   178a8:	mov	r8, r0
   178ac:	beq	17974 <__assert_fail@plt+0x6270>
   178b0:	cmn	r0, #2
   178b4:	beq	17984 <__assert_fail@plt+0x6280>
   178b8:	cmp	r0, #0
   178bc:	ldr	r0, [sp, #4]
   178c0:	moveq	r8, #1
   178c4:	bl	11338 <wcwidth@plt>
   178c8:	cmp	r0, #0
   178cc:	sub	r2, r7, r5
   178d0:	bge	17870 <__assert_fail@plt+0x616c>
   178d4:	cmp	sl, #0
   178d8:	bne	1797c <__assert_fail@plt+0x6278>
   178dc:	ldr	r0, [sp, #4]
   178e0:	bl	113ec <iswcntrl@plt>
   178e4:	cmp	r0, #0
   178e8:	bne	1787c <__assert_fail@plt+0x6178>
   178ec:	cmn	r5, #-2147483647	; 0x80000001
   178f0:	add	r5, r5, #1
   178f4:	bne	1787c <__assert_fail@plt+0x6178>
   178f8:	mvn	r5, #-2147483648	; 0x80000000
   178fc:	mov	r0, r5
   17900:	add	sp, sp, #16
   17904:	ldrd	r4, [sp]
   17908:	ldrd	r6, [sp, #8]
   1790c:	ldr	r8, [sp, #16]
   17910:	ldrd	sl, [sp, #20]
   17914:	add	sp, sp, #28
   17918:	pop	{pc}		; (ldr pc, [sp], #4)
   1791c:	cmp	r4, r6
   17920:	movcs	r5, #0
   17924:	bcs	178fc <__assert_fail@plt+0x61f8>
   17928:	bl	11518 <__ctype_b_loc@plt>
   1792c:	ldr	r2, [r0]
   17930:	and	fp, fp, #2
   17934:	mov	r5, #0
   17938:	ldrb	r3, [r4], #1
   1793c:	lsl	r3, r3, #1
   17940:	ldrh	r3, [r2, r3]
   17944:	tst	r3, #16384	; 0x4000
   17948:	bne	1795c <__assert_fail@plt+0x6258>
   1794c:	cmp	fp, #0
   17950:	bne	1797c <__assert_fail@plt+0x6278>
   17954:	tst	r3, #2
   17958:	bne	17968 <__assert_fail@plt+0x6264>
   1795c:	cmn	r5, #-2147483647	; 0x80000001
   17960:	beq	178fc <__assert_fail@plt+0x61f8>
   17964:	add	r5, r5, #1
   17968:	cmp	r6, r4
   1796c:	bne	17938 <__assert_fail@plt+0x6234>
   17970:	b	178fc <__assert_fail@plt+0x61f8>
   17974:	tst	fp, #1
   17978:	beq	17824 <__assert_fail@plt+0x6120>
   1797c:	mvn	r5, #0
   17980:	b	178fc <__assert_fail@plt+0x61f8>
   17984:	tst	fp, #1
   17988:	bne	1797c <__assert_fail@plt+0x6278>
   1798c:	add	r5, r5, #1
   17990:	mov	r4, r6
   17994:	b	1782c <__assert_fail@plt+0x6128>
   17998:	strd	r4, [sp, #-16]!
   1799c:	mov	r5, r1
   179a0:	mov	r4, r0
   179a4:	str	r6, [sp, #8]
   179a8:	str	lr, [sp, #12]
   179ac:	bl	1153c <strlen@plt>
   179b0:	mov	r1, r0
   179b4:	mov	r2, r5
   179b8:	ldr	r6, [sp, #8]
   179bc:	mov	r0, r4
   179c0:	ldrd	r4, [sp]
   179c4:	ldr	lr, [sp, #12]
   179c8:	add	sp, sp, #16
   179cc:	b	177cc <__assert_fail@plt+0x60c8>
   179d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   179d4:	mov	r4, r0
   179d8:	strd	r6, [sp, #8]
   179dc:	str	r8, [sp, #16]
   179e0:	str	lr, [sp, #20]
   179e4:	bl	1153c <strlen@plt>
   179e8:	add	r0, r0, #1
   179ec:	mov	ip, r4
   179f0:	mov	r3, #0
   179f4:	b	17a08 <__assert_fail@plt+0x6304>
   179f8:	cmp	r0, r2
   179fc:	strb	r1, [ip], #1
   17a00:	bls	17a78 <__assert_fail@plt+0x6374>
   17a04:	mov	r3, r2
   17a08:	ldrb	r1, [r4, r3]
   17a0c:	add	r2, r3, #1
   17a10:	cmp	r1, #92	; 0x5c
   17a14:	bne	179f8 <__assert_fail@plt+0x62f4>
   17a18:	add	lr, r3, #4
   17a1c:	cmp	lr, r0
   17a20:	bcs	179f8 <__assert_fail@plt+0x62f4>
   17a24:	ldrb	r5, [r4, r2]
   17a28:	sub	r5, r5, #48	; 0x30
   17a2c:	uxtb	r6, r5
   17a30:	cmp	r6, #3
   17a34:	bhi	179f8 <__assert_fail@plt+0x62f4>
   17a38:	add	r3, r4, r3
   17a3c:	ldrb	r6, [r3, #2]
   17a40:	sub	r6, r6, #48	; 0x30
   17a44:	uxtb	r7, r6
   17a48:	cmp	r7, #7
   17a4c:	bhi	179f8 <__assert_fail@plt+0x62f4>
   17a50:	ldrb	r3, [r3, #3]
   17a54:	sub	r3, r3, #48	; 0x30
   17a58:	uxtb	r3, r3
   17a5c:	cmp	r3, #7
   17a60:	bhi	179f8 <__assert_fail@plt+0x62f4>
   17a64:	add	r5, r6, r5, lsl #3
   17a68:	mov	r2, lr
   17a6c:	add	r5, r3, r5, lsl #3
   17a70:	strb	r5, [ip], #1
   17a74:	b	17a04 <__assert_fail@plt+0x6300>
   17a78:	ldrd	r4, [sp]
   17a7c:	ldrd	r6, [sp, #8]
   17a80:	ldr	r8, [sp, #16]
   17a84:	add	sp, sp, #20
   17a88:	pop	{pc}		; (ldr pc, [sp], #4)
   17a8c:	str	r4, [sp, #-8]!
   17a90:	mov	r4, r0
   17a94:	ldr	r0, [r0]
   17a98:	str	lr, [sp, #4]
   17a9c:	bl	15214 <__assert_fail@plt+0x3b10>
   17aa0:	ldr	r0, [r4, #4]
   17aa4:	bl	15214 <__assert_fail@plt+0x3b10>
   17aa8:	ldr	r0, [r4, #8]
   17aac:	bl	15214 <__assert_fail@plt+0x3b10>
   17ab0:	ldrb	r3, [r4, #24]
   17ab4:	tst	r3, #4
   17ab8:	bne	17ad0 <__assert_fail@plt+0x63cc>
   17abc:	mov	r0, r4
   17ac0:	ldr	r4, [sp]
   17ac4:	ldr	lr, [sp, #4]
   17ac8:	add	sp, sp, #8
   17acc:	b	15214 <__assert_fail@plt+0x3b10>
   17ad0:	ldr	r0, [r4, #12]
   17ad4:	bl	15214 <__assert_fail@plt+0x3b10>
   17ad8:	b	17abc <__assert_fail@plt+0x63b8>
   17adc:	movw	r1, #61448	; 0xf008
   17ae0:	movt	r1, #1
   17ae4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17ae8:	movw	r0, #61292	; 0xef6c
   17aec:	movt	r0, #1
   17af0:	strd	r6, [sp, #8]
   17af4:	strd	r8, [sp, #16]
   17af8:	strd	sl, [sp, #24]
   17afc:	str	lr, [sp, #32]
   17b00:	sub	sp, sp, #44	; 0x2c
   17b04:	bl	1168c <fopen64@plt>
   17b08:	subs	r8, r0, #0
   17b0c:	beq	17f94 <__assert_fail@plt+0x6890>
   17b10:	movw	r2, #61336	; 0xef98
   17b14:	movt	r2, #1
   17b18:	mov	r3, #0
   17b1c:	movw	r9, #61316	; 0xef84
   17b20:	movt	r9, #1
   17b24:	add	sl, sp, #16
   17b28:	str	r2, [sp, #8]
   17b2c:	mov	r2, #65280	; 0xff00
   17b30:	movt	r2, #15
   17b34:	str	r2, [sp, #12]
   17b38:	str	r3, [sp, #20]
   17b3c:	str	r3, [sp, #24]
   17b40:	mov	r3, r8
   17b44:	mov	r2, #10
   17b48:	add	r1, sp, #24
   17b4c:	add	r0, sp, #20
   17b50:	bl	11314 <__getdelim@plt>
   17b54:	cmn	r0, #1
   17b58:	beq	17d20 <__assert_fail@plt+0x661c>
   17b5c:	add	ip, sp, #36	; 0x24
   17b60:	add	r3, sp, #32
   17b64:	ldr	r0, [sp, #20]
   17b68:	add	r2, sp, #28
   17b6c:	mov	r1, r9
   17b70:	str	ip, [sp]
   17b74:	bl	11650 <sscanf@plt>
   17b78:	sub	r0, r0, #2
   17b7c:	cmp	r0, #1
   17b80:	bhi	17b40 <__assert_fail@plt+0x643c>
   17b84:	ldr	r5, [sp, #20]
   17b88:	mov	r1, #32
   17b8c:	ldr	r3, [sp, #36]	; 0x24
   17b90:	add	r5, r5, r3
   17b94:	mov	r0, r5
   17b98:	bl	11548 <strchr@plt>
   17b9c:	subs	r4, r0, #0
   17ba0:	beq	17b40 <__assert_fail@plt+0x643c>
   17ba4:	mov	r6, #0
   17ba8:	mov	r1, #32
   17bac:	strb	r6, [r4], #1
   17bb0:	mov	r0, r4
   17bb4:	bl	11548 <strchr@plt>
   17bb8:	cmp	r0, #0
   17bbc:	beq	17b40 <__assert_fail@plt+0x643c>
   17bc0:	strb	r6, [r0], #1
   17bc4:	ldr	r1, [sp, #8]
   17bc8:	bl	1c494 <__assert_fail@plt+0xad90>
   17bcc:	cmp	r0, #0
   17bd0:	beq	17b40 <__assert_fail@plt+0x643c>
   17bd4:	add	r7, r0, #3
   17bd8:	mov	r1, #32
   17bdc:	mov	r0, r7
   17be0:	bl	11548 <strchr@plt>
   17be4:	subs	fp, r0, #0
   17be8:	beq	17b40 <__assert_fail@plt+0x643c>
   17bec:	mov	r1, #32
   17bf0:	strb	r6, [fp], #1
   17bf4:	mov	r0, fp
   17bf8:	bl	11548 <strchr@plt>
   17bfc:	cmp	r0, #0
   17c00:	beq	17b40 <__assert_fail@plt+0x643c>
   17c04:	strb	r6, [r0]
   17c08:	mov	r0, fp
   17c0c:	bl	179d0 <__assert_fail@plt+0x62cc>
   17c10:	mov	r0, r4
   17c14:	bl	179d0 <__assert_fail@plt+0x62cc>
   17c18:	mov	r0, r5
   17c1c:	bl	179d0 <__assert_fail@plt+0x62cc>
   17c20:	mov	r0, r7
   17c24:	bl	179d0 <__assert_fail@plt+0x62cc>
   17c28:	mov	r0, #32
   17c2c:	bl	1aef8 <__assert_fail@plt+0x97f4>
   17c30:	mov	r6, r0
   17c34:	mov	r0, fp
   17c38:	bl	1b348 <__assert_fail@plt+0x9c44>
   17c3c:	str	r0, [r6]
   17c40:	mov	r0, r4
   17c44:	bl	1b348 <__assert_fail@plt+0x9c44>
   17c48:	str	r0, [r6, #4]
   17c4c:	mov	r0, r5
   17c50:	bl	1b348 <__assert_fail@plt+0x9c44>
   17c54:	str	r0, [r6, #8]
   17c58:	mov	r0, r7
   17c5c:	bl	1b348 <__assert_fail@plt+0x9c44>
   17c60:	ldr	r1, [sp, #12]
   17c64:	mov	r2, #0
   17c68:	movt	r2, #65520	; 0xfff0
   17c6c:	str	r0, [r6, #12]
   17c70:	mov	r4, r0
   17c74:	ldr	ip, [sp, #28]
   17c78:	ldr	r5, [sp, #32]
   17c7c:	ldrb	r3, [r6, #24]
   17c80:	and	lr, r1, ip, lsl #8
   17c84:	bic	ip, ip, #4080	; 0xff0
   17c88:	bic	ip, ip, #15
   17c8c:	and	r1, r2, r5, lsl #12
   17c90:	uxtb	r2, r5
   17c94:	orr	ip, ip, r5, lsr #20
   17c98:	orr	r2, r2, lr
   17c9c:	orr	r2, r1, r2
   17ca0:	orr	r3, r3, #4
   17ca4:	movw	r1, #61340	; 0xef9c
   17ca8:	movt	r1, #1
   17cac:	str	r2, [r6, #16]
   17cb0:	str	ip, [r6, #20]
   17cb4:	strb	r3, [r6, #24]
   17cb8:	bl	11320 <strcmp@plt>
   17cbc:	cmp	r0, #0
   17cc0:	beq	17cdc <__assert_fail@plt+0x65d8>
   17cc4:	movw	r1, #61348	; 0xefa4
   17cc8:	movt	r1, #1
   17ccc:	mov	r0, r4
   17cd0:	bl	11320 <strcmp@plt>
   17cd4:	cmp	r0, #0
   17cd8:	bne	17d70 <__assert_fail@plt+0x666c>
   17cdc:	mov	r0, #1
   17ce0:	ldrb	r3, [r6, #24]
   17ce4:	mov	r1, #58	; 0x3a
   17ce8:	ldr	r5, [r6]
   17cec:	bfi	r3, r0, #0, #1
   17cf0:	mov	r0, r5
   17cf4:	strb	r3, [r6, #24]
   17cf8:	bl	11548 <strchr@plt>
   17cfc:	cmp	r0, #0
   17d00:	beq	17e94 <__assert_fail@plt+0x6790>
   17d04:	mov	r0, #1
   17d08:	ldrb	r3, [r6, #24]
   17d0c:	bfi	r3, r0, #1, #1
   17d10:	strb	r3, [r6, #24]
   17d14:	str	r6, [sl]
   17d18:	add	sl, r6, #28
   17d1c:	b	17b40 <__assert_fail@plt+0x643c>
   17d20:	ldr	r0, [sp, #20]
   17d24:	bl	15214 <__assert_fail@plt+0x3b10>
   17d28:	ldr	r3, [r8]
   17d2c:	tst	r3, #32
   17d30:	bne	18328 <__assert_fail@plt+0x6c24>
   17d34:	mov	r0, r8
   17d38:	bl	1d180 <__assert_fail@plt+0xba7c>
   17d3c:	cmn	r0, #1
   17d40:	beq	181e8 <__assert_fail@plt+0x6ae4>
   17d44:	mov	r3, #0
   17d48:	str	r3, [sl]
   17d4c:	ldr	r6, [sp, #16]
   17d50:	mov	r0, r6
   17d54:	add	sp, sp, #44	; 0x2c
   17d58:	ldrd	r4, [sp]
   17d5c:	ldrd	r6, [sp, #8]
   17d60:	ldrd	r8, [sp, #16]
   17d64:	ldrd	sl, [sp, #24]
   17d68:	add	sp, sp, #32
   17d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d70:	movw	r1, #61356	; 0xefac
   17d74:	movt	r1, #1
   17d78:	mov	r0, r4
   17d7c:	bl	11320 <strcmp@plt>
   17d80:	cmp	r0, #0
   17d84:	beq	17cdc <__assert_fail@plt+0x65d8>
   17d88:	movw	r1, #61364	; 0xefb4
   17d8c:	movt	r1, #1
   17d90:	mov	r0, r4
   17d94:	bl	11320 <strcmp@plt>
   17d98:	cmp	r0, #0
   17d9c:	beq	17cdc <__assert_fail@plt+0x65d8>
   17da0:	movw	r1, #61372	; 0xefbc
   17da4:	movt	r1, #1
   17da8:	mov	r0, r4
   17dac:	bl	11320 <strcmp@plt>
   17db0:	cmp	r0, #0
   17db4:	beq	17cdc <__assert_fail@plt+0x65d8>
   17db8:	movw	r1, #61380	; 0xefc4
   17dbc:	movt	r1, #1
   17dc0:	mov	r0, r4
   17dc4:	bl	11320 <strcmp@plt>
   17dc8:	cmp	r0, #0
   17dcc:	beq	17cdc <__assert_fail@plt+0x65d8>
   17dd0:	movw	r1, #61388	; 0xefcc
   17dd4:	movt	r1, #1
   17dd8:	mov	r0, r4
   17ddc:	bl	11320 <strcmp@plt>
   17de0:	cmp	r0, #0
   17de4:	beq	17cdc <__assert_fail@plt+0x65d8>
   17de8:	movw	r1, #61400	; 0xefd8
   17dec:	movt	r1, #1
   17df0:	mov	r0, r4
   17df4:	bl	11320 <strcmp@plt>
   17df8:	cmp	r0, #0
   17dfc:	beq	17cdc <__assert_fail@plt+0x65d8>
   17e00:	movw	r1, #61408	; 0xefe0
   17e04:	movt	r1, #1
   17e08:	mov	r0, r4
   17e0c:	bl	11320 <strcmp@plt>
   17e10:	cmp	r0, #0
   17e14:	beq	17cdc <__assert_fail@plt+0x65d8>
   17e18:	movw	r1, #61420	; 0xefec
   17e1c:	movt	r1, #1
   17e20:	mov	r0, r4
   17e24:	bl	11320 <strcmp@plt>
   17e28:	cmp	r0, #0
   17e2c:	beq	17cdc <__assert_fail@plt+0x65d8>
   17e30:	movw	r1, #61428	; 0xeff4
   17e34:	movt	r1, #1
   17e38:	mov	r0, r4
   17e3c:	bl	11320 <strcmp@plt>
   17e40:	cmp	r0, #0
   17e44:	beq	17cdc <__assert_fail@plt+0x65d8>
   17e48:	movw	r1, #61436	; 0xeffc
   17e4c:	movt	r1, #1
   17e50:	mov	r0, r4
   17e54:	bl	11320 <strcmp@plt>
   17e58:	cmp	r0, #0
   17e5c:	beq	17cdc <__assert_fail@plt+0x65d8>
   17e60:	movw	r1, #61444	; 0xf004
   17e64:	movt	r1, #1
   17e68:	mov	r0, r4
   17e6c:	bl	11320 <strcmp@plt>
   17e70:	cmp	r0, #0
   17e74:	beq	17cdc <__assert_fail@plt+0x65d8>
   17e78:	movw	r1, #61452	; 0xf00c
   17e7c:	movt	r1, #1
   17e80:	mov	r0, r4
   17e84:	bl	11320 <strcmp@plt>
   17e88:	clz	r0, r0
   17e8c:	lsr	r0, r0, #5
   17e90:	b	17ce0 <__assert_fail@plt+0x65dc>
   17e94:	ldrb	r3, [r5]
   17e98:	cmp	r3, #47	; 0x2f
   17e9c:	beq	1839c <__assert_fail@plt+0x6c98>
   17ea0:	movw	r1, #61484	; 0xf02c
   17ea4:	movt	r1, #1
   17ea8:	mov	r0, r4
   17eac:	bl	11320 <strcmp@plt>
   17eb0:	cmp	r0, #0
   17eb4:	beq	17d04 <__assert_fail@plt+0x6600>
   17eb8:	movw	r1, #61492	; 0xf034
   17ebc:	movt	r1, #1
   17ec0:	mov	r0, r4
   17ec4:	bl	11320 <strcmp@plt>
   17ec8:	cmp	r0, #0
   17ecc:	beq	17d04 <__assert_fail@plt+0x6600>
   17ed0:	movw	r1, #61496	; 0xf038
   17ed4:	movt	r1, #1
   17ed8:	mov	r0, r4
   17edc:	bl	11320 <strcmp@plt>
   17ee0:	cmp	r0, #0
   17ee4:	beq	17d04 <__assert_fail@plt+0x6600>
   17ee8:	movw	r1, #61504	; 0xf040
   17eec:	movt	r1, #1
   17ef0:	mov	r0, r4
   17ef4:	bl	11320 <strcmp@plt>
   17ef8:	cmp	r0, #0
   17efc:	beq	17d04 <__assert_fail@plt+0x6600>
   17f00:	movw	r1, #61516	; 0xf04c
   17f04:	movt	r1, #1
   17f08:	mov	r0, r4
   17f0c:	bl	11320 <strcmp@plt>
   17f10:	cmp	r0, #0
   17f14:	beq	17d04 <__assert_fail@plt+0x6600>
   17f18:	movw	r1, #61524	; 0xf054
   17f1c:	movt	r1, #1
   17f20:	mov	r0, r4
   17f24:	bl	11320 <strcmp@plt>
   17f28:	cmp	r0, #0
   17f2c:	beq	17d04 <__assert_fail@plt+0x6600>
   17f30:	movw	r1, #61532	; 0xf05c
   17f34:	movt	r1, #1
   17f38:	mov	r0, r4
   17f3c:	bl	11320 <strcmp@plt>
   17f40:	cmp	r0, #0
   17f44:	beq	17d04 <__assert_fail@plt+0x6600>
   17f48:	movw	r1, #61540	; 0xf064
   17f4c:	movt	r1, #1
   17f50:	mov	r0, r4
   17f54:	bl	11320 <strcmp@plt>
   17f58:	cmp	r0, #0
   17f5c:	beq	17d04 <__assert_fail@plt+0x6600>
   17f60:	mov	r0, r4
   17f64:	movw	r1, #61548	; 0xf06c
   17f68:	movt	r1, #1
   17f6c:	bl	11320 <strcmp@plt>
   17f70:	cmp	r0, #0
   17f74:	beq	17d04 <__assert_fail@plt+0x6600>
   17f78:	mov	r1, r5
   17f7c:	movw	r0, #61556	; 0xf074
   17f80:	movt	r0, #1
   17f84:	bl	11320 <strcmp@plt>
   17f88:	clz	r0, r0
   17f8c:	lsr	r0, r0, #5
   17f90:	b	17d08 <__assert_fail@plt+0x6604>
   17f94:	movw	r1, #61564	; 0xf07c
   17f98:	movt	r1, #1
   17f9c:	movw	r0, #61568	; 0xf080
   17fa0:	movt	r0, #1
   17fa4:	bl	11698 <setmntent@plt>
   17fa8:	subs	r6, r0, #0
   17fac:	beq	17d50 <__assert_fail@plt+0x664c>
   17fb0:	mov	r0, r6
   17fb4:	movw	r8, #61580	; 0xf08c
   17fb8:	movt	r8, #1
   17fbc:	movw	r7, #61340	; 0xef9c
   17fc0:	movt	r7, #1
   17fc4:	movw	fp, #61348	; 0xefa4
   17fc8:	movt	fp, #1
   17fcc:	add	sl, sp, #16
   17fd0:	bl	114a0 <getmntent@plt>
   17fd4:	subs	r5, r0, #0
   17fd8:	beq	181d8 <__assert_fail@plt+0x6ad4>
   17fdc:	mov	r1, r8
   17fe0:	bl	11464 <hasmntopt@plt>
   17fe4:	mov	r9, r0
   17fe8:	mov	r0, #32
   17fec:	bl	1aef8 <__assert_fail@plt+0x97f4>
   17ff0:	mov	r4, r0
   17ff4:	ldr	r0, [r5]
   17ff8:	bl	1b348 <__assert_fail@plt+0x9c44>
   17ffc:	str	r0, [r4]
   18000:	ldr	r0, [r5, #4]
   18004:	bl	1b348 <__assert_fail@plt+0x9c44>
   18008:	mov	r3, #0
   1800c:	str	r0, [r4, #4]
   18010:	ldr	r0, [r5, #8]
   18014:	str	r3, [r4, #8]
   18018:	bl	1b348 <__assert_fail@plt+0x9c44>
   1801c:	ldrb	r3, [r4, #24]
   18020:	mov	r1, r7
   18024:	mov	r5, r0
   18028:	str	r0, [r4, #12]
   1802c:	orr	r3, r3, #4
   18030:	strb	r3, [r4, #24]
   18034:	bl	11320 <strcmp@plt>
   18038:	cmp	r0, #0
   1803c:	beq	1817c <__assert_fail@plt+0x6a78>
   18040:	mov	r1, fp
   18044:	mov	r0, r5
   18048:	bl	11320 <strcmp@plt>
   1804c:	cmp	r0, #0
   18050:	beq	1817c <__assert_fail@plt+0x6a78>
   18054:	movw	r1, #61356	; 0xefac
   18058:	movt	r1, #1
   1805c:	mov	r0, r5
   18060:	bl	11320 <strcmp@plt>
   18064:	cmp	r0, #0
   18068:	beq	1817c <__assert_fail@plt+0x6a78>
   1806c:	movw	r1, #61364	; 0xefb4
   18070:	movt	r1, #1
   18074:	mov	r0, r5
   18078:	bl	11320 <strcmp@plt>
   1807c:	cmp	r0, #0
   18080:	beq	1817c <__assert_fail@plt+0x6a78>
   18084:	movw	r1, #61372	; 0xefbc
   18088:	movt	r1, #1
   1808c:	mov	r0, r5
   18090:	bl	11320 <strcmp@plt>
   18094:	cmp	r0, #0
   18098:	beq	1817c <__assert_fail@plt+0x6a78>
   1809c:	movw	r1, #61380	; 0xefc4
   180a0:	movt	r1, #1
   180a4:	mov	r0, r5
   180a8:	bl	11320 <strcmp@plt>
   180ac:	cmp	r0, #0
   180b0:	beq	1817c <__assert_fail@plt+0x6a78>
   180b4:	movw	r1, #61388	; 0xefcc
   180b8:	movt	r1, #1
   180bc:	mov	r0, r5
   180c0:	bl	11320 <strcmp@plt>
   180c4:	cmp	r0, #0
   180c8:	beq	1817c <__assert_fail@plt+0x6a78>
   180cc:	movw	r1, #61400	; 0xefd8
   180d0:	movt	r1, #1
   180d4:	mov	r0, r5
   180d8:	bl	11320 <strcmp@plt>
   180dc:	cmp	r0, #0
   180e0:	beq	1817c <__assert_fail@plt+0x6a78>
   180e4:	movw	r1, #61408	; 0xefe0
   180e8:	movt	r1, #1
   180ec:	mov	r0, r5
   180f0:	bl	11320 <strcmp@plt>
   180f4:	cmp	r0, #0
   180f8:	beq	1817c <__assert_fail@plt+0x6a78>
   180fc:	movw	r1, #61420	; 0xefec
   18100:	movt	r1, #1
   18104:	mov	r0, r5
   18108:	bl	11320 <strcmp@plt>
   1810c:	cmp	r0, #0
   18110:	beq	1817c <__assert_fail@plt+0x6a78>
   18114:	movw	r1, #61428	; 0xeff4
   18118:	movt	r1, #1
   1811c:	mov	r0, r5
   18120:	bl	11320 <strcmp@plt>
   18124:	cmp	r0, #0
   18128:	beq	1817c <__assert_fail@plt+0x6a78>
   1812c:	movw	r1, #61436	; 0xeffc
   18130:	movt	r1, #1
   18134:	mov	r0, r5
   18138:	bl	11320 <strcmp@plt>
   1813c:	cmp	r0, #0
   18140:	beq	1817c <__assert_fail@plt+0x6a78>
   18144:	movw	r1, #61444	; 0xf004
   18148:	movt	r1, #1
   1814c:	mov	r0, r5
   18150:	bl	11320 <strcmp@plt>
   18154:	cmp	r0, #0
   18158:	beq	1817c <__assert_fail@plt+0x6a78>
   1815c:	movw	r1, #61452	; 0xf00c
   18160:	movt	r1, #1
   18164:	mov	r0, r5
   18168:	bl	11320 <strcmp@plt>
   1816c:	orrs	r3, r9, r0
   18170:	moveq	r2, #1
   18174:	movne	r2, #0
   18178:	b	18180 <__assert_fail@plt+0x6a7c>
   1817c:	mov	r2, #1
   18180:	ldrb	r3, [r4, #24]
   18184:	mov	r1, #58	; 0x3a
   18188:	ldr	r9, [r4]
   1818c:	bfi	r3, r2, #0, #1
   18190:	mov	r0, r9
   18194:	strb	r3, [r4, #24]
   18198:	bl	11548 <strchr@plt>
   1819c:	cmp	r0, #0
   181a0:	beq	18228 <__assert_fail@plt+0x6b24>
   181a4:	mov	r0, #1
   181a8:	ldrb	r1, [r4, #24]
   181ac:	mvn	r2, #0
   181b0:	mvn	r3, #0
   181b4:	strd	r2, [r4, #16]
   181b8:	bfi	r1, r0, #1, #1
   181bc:	mov	r0, r6
   181c0:	strb	r1, [r4, #24]
   181c4:	str	r4, [sl]
   181c8:	add	sl, r4, #28
   181cc:	bl	114a0 <getmntent@plt>
   181d0:	subs	r5, r0, #0
   181d4:	bne	17fdc <__assert_fail@plt+0x68d8>
   181d8:	mov	r0, r6
   181dc:	bl	115f0 <endmntent@plt>
   181e0:	cmp	r0, #0
   181e4:	bne	17d44 <__assert_fail@plt+0x6640>
   181e8:	bl	1156c <__errno_location@plt>
   181ec:	ldr	r7, [r0]
   181f0:	mov	r5, r0
   181f4:	mov	r3, #0
   181f8:	str	r3, [sl]
   181fc:	ldr	r0, [sp, #16]
   18200:	cmp	r0, r3
   18204:	beq	1821c <__assert_fail@plt+0x6b18>
   18208:	ldr	r4, [r0, #28]
   1820c:	bl	17a8c <__assert_fail@plt+0x6388>
   18210:	subs	r0, r4, #0
   18214:	str	r4, [sp, #16]
   18218:	bne	18208 <__assert_fail@plt+0x6b04>
   1821c:	mov	r6, #0
   18220:	str	r7, [r5]
   18224:	b	17d50 <__assert_fail@plt+0x664c>
   18228:	ldrb	r3, [r9]
   1822c:	cmp	r3, #47	; 0x2f
   18230:	beq	18344 <__assert_fail@plt+0x6c40>
   18234:	movw	r1, #61484	; 0xf02c
   18238:	movt	r1, #1
   1823c:	mov	r0, r5
   18240:	bl	11320 <strcmp@plt>
   18244:	cmp	r0, #0
   18248:	beq	181a4 <__assert_fail@plt+0x6aa0>
   1824c:	movw	r1, #61492	; 0xf034
   18250:	movt	r1, #1
   18254:	mov	r0, r5
   18258:	bl	11320 <strcmp@plt>
   1825c:	cmp	r0, #0
   18260:	beq	181a4 <__assert_fail@plt+0x6aa0>
   18264:	movw	r1, #61496	; 0xf038
   18268:	movt	r1, #1
   1826c:	mov	r0, r5
   18270:	bl	11320 <strcmp@plt>
   18274:	cmp	r0, #0
   18278:	beq	181a4 <__assert_fail@plt+0x6aa0>
   1827c:	movw	r1, #61504	; 0xf040
   18280:	movt	r1, #1
   18284:	mov	r0, r5
   18288:	bl	11320 <strcmp@plt>
   1828c:	cmp	r0, #0
   18290:	beq	181a4 <__assert_fail@plt+0x6aa0>
   18294:	movw	r1, #61516	; 0xf04c
   18298:	movt	r1, #1
   1829c:	mov	r0, r5
   182a0:	bl	11320 <strcmp@plt>
   182a4:	cmp	r0, #0
   182a8:	beq	181a4 <__assert_fail@plt+0x6aa0>
   182ac:	movw	r1, #61524	; 0xf054
   182b0:	movt	r1, #1
   182b4:	mov	r0, r5
   182b8:	bl	11320 <strcmp@plt>
   182bc:	cmp	r0, #0
   182c0:	beq	181a4 <__assert_fail@plt+0x6aa0>
   182c4:	movw	r1, #61532	; 0xf05c
   182c8:	movt	r1, #1
   182cc:	mov	r0, r5
   182d0:	bl	11320 <strcmp@plt>
   182d4:	cmp	r0, #0
   182d8:	beq	181a4 <__assert_fail@plt+0x6aa0>
   182dc:	movw	r1, #61540	; 0xf064
   182e0:	movt	r1, #1
   182e4:	mov	r0, r5
   182e8:	bl	11320 <strcmp@plt>
   182ec:	cmp	r0, #0
   182f0:	beq	181a4 <__assert_fail@plt+0x6aa0>
   182f4:	mov	r0, r5
   182f8:	movw	r1, #61548	; 0xf06c
   182fc:	movt	r1, #1
   18300:	bl	11320 <strcmp@plt>
   18304:	cmp	r0, #0
   18308:	beq	181a4 <__assert_fail@plt+0x6aa0>
   1830c:	mov	r1, r9
   18310:	movw	r0, #61556	; 0xf074
   18314:	movt	r0, #1
   18318:	bl	11320 <strcmp@plt>
   1831c:	clz	r0, r0
   18320:	lsr	r0, r0, #5
   18324:	b	181a8 <__assert_fail@plt+0x6aa4>
   18328:	bl	1156c <__errno_location@plt>
   1832c:	mov	r5, r0
   18330:	mov	r0, r8
   18334:	ldr	r7, [r5]
   18338:	bl	1d180 <__assert_fail@plt+0xba7c>
   1833c:	str	r7, [r5]
   18340:	b	181f4 <__assert_fail@plt+0x6af0>
   18344:	ldrb	r3, [r9, #1]
   18348:	cmp	r3, #47	; 0x2f
   1834c:	bne	18234 <__assert_fail@plt+0x6b30>
   18350:	movw	r1, #61460	; 0xf014
   18354:	movt	r1, #1
   18358:	mov	r0, r5
   1835c:	bl	11320 <strcmp@plt>
   18360:	cmp	r0, #0
   18364:	beq	181a4 <__assert_fail@plt+0x6aa0>
   18368:	movw	r1, #61468	; 0xf01c
   1836c:	movt	r1, #1
   18370:	mov	r0, r5
   18374:	bl	11320 <strcmp@plt>
   18378:	cmp	r0, #0
   1837c:	beq	181a4 <__assert_fail@plt+0x6aa0>
   18380:	movw	r1, #61476	; 0xf024
   18384:	movt	r1, #1
   18388:	mov	r0, r5
   1838c:	bl	11320 <strcmp@plt>
   18390:	cmp	r0, #0
   18394:	beq	181a4 <__assert_fail@plt+0x6aa0>
   18398:	b	18234 <__assert_fail@plt+0x6b30>
   1839c:	ldrb	r3, [r5, #1]
   183a0:	cmp	r3, #47	; 0x2f
   183a4:	bne	17ea0 <__assert_fail@plt+0x679c>
   183a8:	movw	r1, #61460	; 0xf014
   183ac:	movt	r1, #1
   183b0:	mov	r0, r4
   183b4:	bl	11320 <strcmp@plt>
   183b8:	cmp	r0, #0
   183bc:	beq	17d04 <__assert_fail@plt+0x6600>
   183c0:	movw	r1, #61468	; 0xf01c
   183c4:	movt	r1, #1
   183c8:	mov	r0, r4
   183cc:	bl	11320 <strcmp@plt>
   183d0:	cmp	r0, #0
   183d4:	beq	17d04 <__assert_fail@plt+0x6600>
   183d8:	movw	r1, #61476	; 0xf024
   183dc:	movt	r1, #1
   183e0:	mov	r0, r4
   183e4:	bl	11320 <strcmp@plt>
   183e8:	cmp	r0, #0
   183ec:	beq	17d04 <__assert_fail@plt+0x6600>
   183f0:	b	17ea0 <__assert_fail@plt+0x679c>
   183f4:	strd	r4, [sp, #-16]!
   183f8:	subs	r4, r0, #0
   183fc:	str	r6, [sp, #8]
   18400:	str	lr, [sp, #12]
   18404:	beq	1849c <__assert_fail@plt+0x6d98>
   18408:	mov	r1, #47	; 0x2f
   1840c:	bl	1162c <strrchr@plt>
   18410:	subs	r5, r0, #0
   18414:	beq	18474 <__assert_fail@plt+0x6d70>
   18418:	add	r6, r5, #1
   1841c:	sub	r3, r6, r4
   18420:	cmp	r3, #6
   18424:	ble	18474 <__assert_fail@plt+0x6d70>
   18428:	movw	r1, #61644	; 0xf0cc
   1842c:	movt	r1, #1
   18430:	mov	r2, #7
   18434:	sub	r0, r5, #6
   18438:	bl	116d4 <strncmp@plt>
   1843c:	cmp	r0, #0
   18440:	bne	18474 <__assert_fail@plt+0x6d70>
   18444:	movw	r1, #61652	; 0xf0d4
   18448:	movt	r1, #1
   1844c:	mov	r2, #3
   18450:	mov	r0, r6
   18454:	bl	116d4 <strncmp@plt>
   18458:	cmp	r0, #0
   1845c:	movne	r4, r6
   18460:	bne	18474 <__assert_fail@plt+0x6d70>
   18464:	add	r4, r5, #4
   18468:	movw	r3, #800	; 0x320
   1846c:	movt	r3, #3
   18470:	str	r4, [r3]
   18474:	movw	r2, #960	; 0x3c0
   18478:	movt	r2, #3
   1847c:	ldr	r6, [sp, #8]
   18480:	movw	r3, #804	; 0x324
   18484:	movt	r3, #3
   18488:	str	r4, [r2]
   1848c:	str	r4, [r3]
   18490:	ldrd	r4, [sp]
   18494:	add	sp, sp, #12
   18498:	pop	{pc}		; (ldr pc, [sp], #4)
   1849c:	movw	r3, #816	; 0x330
   184a0:	movt	r3, #3
   184a4:	movw	r0, #61588	; 0xf094
   184a8:	movt	r0, #1
   184ac:	ldr	r3, [r3]
   184b0:	mov	r2, #55	; 0x37
   184b4:	mov	r1, #1
   184b8:	bl	11440 <fwrite@plt>
   184bc:	bl	116e0 <abort@plt>
   184c0:	strd	r4, [sp, #-16]!
   184c4:	mov	r4, #0
   184c8:	mov	r5, #0
   184cc:	cmp	r1, #10
   184d0:	str	r6, [sp, #8]
   184d4:	strd	r4, [r0]
   184d8:	strd	r4, [r0, #8]
   184dc:	str	lr, [sp, #12]
   184e0:	strd	r4, [r0, #16]
   184e4:	strd	r4, [r0, #24]
   184e8:	strd	r4, [r0, #32]
   184ec:	strd	r4, [r0, #40]	; 0x28
   184f0:	beq	18508 <__assert_fail@plt+0x6e04>
   184f4:	ldrd	r4, [sp]
   184f8:	str	r1, [r0]
   184fc:	ldr	r6, [sp, #8]
   18500:	add	sp, sp, #12
   18504:	pop	{pc}		; (ldr pc, [sp], #4)
   18508:	bl	116e0 <abort@plt>
   1850c:	mov	r2, #5
   18510:	strd	r4, [sp, #-16]!
   18514:	mov	r5, r0
   18518:	str	r6, [sp, #8]
   1851c:	mov	r6, r1
   18520:	mov	r1, r0
   18524:	mov	r0, #0
   18528:	str	lr, [sp, #12]
   1852c:	bl	113bc <dcgettext@plt>
   18530:	cmp	r5, r0
   18534:	mov	r4, r0
   18538:	beq	18550 <__assert_fail@plt+0x6e4c>
   1853c:	mov	r0, r4
   18540:	ldrd	r4, [sp]
   18544:	ldr	r6, [sp, #8]
   18548:	add	sp, sp, #12
   1854c:	pop	{pc}		; (ldr pc, [sp], #4)
   18550:	bl	1d430 <__assert_fail@plt+0xbd2c>
   18554:	ldrb	r3, [r0]
   18558:	bic	r3, r3, #32
   1855c:	cmp	r3, #85	; 0x55
   18560:	bne	185c8 <__assert_fail@plt+0x6ec4>
   18564:	ldrb	r3, [r0, #1]
   18568:	bic	r3, r3, #32
   1856c:	cmp	r3, #84	; 0x54
   18570:	bne	18648 <__assert_fail@plt+0x6f44>
   18574:	ldrb	r3, [r0, #2]
   18578:	bic	r3, r3, #32
   1857c:	cmp	r3, #70	; 0x46
   18580:	bne	18648 <__assert_fail@plt+0x6f44>
   18584:	ldrb	r3, [r0, #3]
   18588:	cmp	r3, #45	; 0x2d
   1858c:	bne	18648 <__assert_fail@plt+0x6f44>
   18590:	ldrb	r3, [r0, #4]
   18594:	cmp	r3, #56	; 0x38
   18598:	bne	18648 <__assert_fail@plt+0x6f44>
   1859c:	ldrb	r3, [r0, #5]
   185a0:	cmp	r3, #0
   185a4:	bne	18648 <__assert_fail@plt+0x6f44>
   185a8:	ldrb	r2, [r4]
   185ac:	movw	r3, #61740	; 0xf12c
   185b0:	movt	r3, #1
   185b4:	movw	r4, #61752	; 0xf138
   185b8:	movt	r4, #1
   185bc:	cmp	r2, #96	; 0x60
   185c0:	movne	r4, r3
   185c4:	b	1853c <__assert_fail@plt+0x6e38>
   185c8:	cmp	r3, #71	; 0x47
   185cc:	bne	18648 <__assert_fail@plt+0x6f44>
   185d0:	ldrb	r3, [r0, #1]
   185d4:	bic	r3, r3, #32
   185d8:	cmp	r3, #66	; 0x42
   185dc:	bne	18648 <__assert_fail@plt+0x6f44>
   185e0:	ldrb	r3, [r0, #2]
   185e4:	cmp	r3, #49	; 0x31
   185e8:	bne	18648 <__assert_fail@plt+0x6f44>
   185ec:	ldrb	r3, [r0, #3]
   185f0:	cmp	r3, #56	; 0x38
   185f4:	bne	18648 <__assert_fail@plt+0x6f44>
   185f8:	ldrb	r3, [r0, #4]
   185fc:	cmp	r3, #48	; 0x30
   18600:	bne	18648 <__assert_fail@plt+0x6f44>
   18604:	ldrb	r3, [r0, #5]
   18608:	cmp	r3, #51	; 0x33
   1860c:	bne	18648 <__assert_fail@plt+0x6f44>
   18610:	ldrb	r3, [r0, #6]
   18614:	cmp	r3, #48	; 0x30
   18618:	bne	18648 <__assert_fail@plt+0x6f44>
   1861c:	ldrb	r3, [r0, #7]
   18620:	cmp	r3, #0
   18624:	bne	18648 <__assert_fail@plt+0x6f44>
   18628:	ldrb	r2, [r4]
   1862c:	movw	r3, #61744	; 0xf130
   18630:	movt	r3, #1
   18634:	movw	r4, #61748	; 0xf134
   18638:	movt	r4, #1
   1863c:	cmp	r2, #96	; 0x60
   18640:	movne	r4, r3
   18644:	b	1853c <__assert_fail@plt+0x6e38>
   18648:	movw	r3, #61756	; 0xf13c
   1864c:	movt	r3, #1
   18650:	cmp	r6, #9
   18654:	movw	r4, #57180	; 0xdf5c
   18658:	movt	r4, #1
   1865c:	movne	r4, r3
   18660:	b	1853c <__assert_fail@plt+0x6e38>
   18664:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18668:	strd	r6, [sp, #8]
   1866c:	strd	r8, [sp, #16]
   18670:	strd	sl, [sp, #24]
   18674:	mov	fp, r0
   18678:	mov	sl, r1
   1867c:	str	lr, [sp, #32]
   18680:	sub	sp, sp, #116	; 0x74
   18684:	ldr	r8, [sp, #152]	; 0x98
   18688:	str	r3, [sp, #28]
   1868c:	ldr	r3, [sp, #156]	; 0x9c
   18690:	str	r2, [sp, #32]
   18694:	and	r4, r3, #2
   18698:	ubfx	r3, r3, #1, #1
   1869c:	str	r3, [sp, #44]	; 0x2c
   186a0:	bl	11458 <__ctype_get_mb_cur_max@plt>
   186a4:	str	r0, [sp, #64]	; 0x40
   186a8:	cmp	r8, #10
   186ac:	ldrls	pc, [pc, r8, lsl #2]
   186b0:	b	19e20 <__assert_fail@plt+0x871c>
   186b4:			; <UNDEFINED> instruction: 0x00018ab8
   186b8:	andeq	r8, r1, r4, asr fp
   186bc:	andeq	r9, r1, r0, lsr r1
   186c0:	andeq	r8, r1, r4, ror fp
   186c4:	andeq	r8, r1, ip, lsl sl
   186c8:	andeq	r8, r1, r8, ror #20
   186cc:	andeq	r8, r1, r8, ror #21
   186d0:	andeq	r8, r1, r4, lsr #22
   186d4:	andeq	r8, r1, r0, ror #13
   186d8:	andeq	r8, r1, r0, ror #13
   186dc:	andeq	r8, r1, r0, ror #13
   186e0:	cmp	r8, #10
   186e4:	beq	18710 <__assert_fail@plt+0x700c>
   186e8:	mov	r1, r8
   186ec:	movw	r0, #61760	; 0xf140
   186f0:	movt	r0, #1
   186f4:	bl	1850c <__assert_fail@plt+0x6e08>
   186f8:	mov	r1, r8
   186fc:	str	r0, [sp, #164]	; 0xa4
   18700:	movw	r0, #61756	; 0xf13c
   18704:	movt	r0, #1
   18708:	bl	1850c <__assert_fail@plt+0x6e08>
   1870c:	str	r0, [sp, #168]	; 0xa8
   18710:	cmp	r4, #0
   18714:	movne	r4, #0
   18718:	beq	19afc <__assert_fail@plt+0x83f8>
   1871c:	mov	r3, #1
   18720:	mov	r5, #0
   18724:	ldr	r0, [sp, #168]	; 0xa8
   18728:	str	r3, [sp, #36]	; 0x24
   1872c:	str	r3, [sp, #40]	; 0x28
   18730:	str	r5, [sp, #68]	; 0x44
   18734:	bl	1153c <strlen@plt>
   18738:	ldr	r3, [sp, #168]	; 0xa8
   1873c:	str	r5, [sp, #48]	; 0x30
   18740:	str	r0, [sp, #56]	; 0x38
   18744:	str	r3, [sp, #60]	; 0x3c
   18748:	str	r5, [sp, #72]	; 0x48
   1874c:	str	r8, [sp, #152]	; 0x98
   18750:	mov	r8, fp
   18754:	mov	r9, #0
   18758:	ldr	fp, [sp, #152]	; 0x98
   1875c:	ldr	r3, [sp, #28]
   18760:	cmn	r3, #1
   18764:	beq	18cc4 <__assert_fail@plt+0x75c0>
   18768:	ldr	r3, [sp, #28]
   1876c:	subs	r6, r3, r9
   18770:	movne	r6, #1
   18774:	cmp	r6, #0
   18778:	beq	18cdc <__assert_fail@plt+0x75d8>
   1877c:	ldr	r0, [sp, #32]
   18780:	ldr	r7, [sp, #40]	; 0x28
   18784:	add	r3, r0, r9
   18788:	cmp	fp, #2
   1878c:	moveq	r7, #0
   18790:	andne	r7, r7, #1
   18794:	str	r3, [sp, #52]	; 0x34
   18798:	cmp	r7, #0
   1879c:	beq	19178 <__assert_fail@plt+0x7a74>
   187a0:	ldr	r2, [sp, #56]	; 0x38
   187a4:	cmp	r2, #0
   187a8:	beq	19414 <__assert_fail@plt+0x7d10>
   187ac:	ldr	r1, [sp, #28]
   187b0:	cmp	r2, #1
   187b4:	mov	r3, r2
   187b8:	movls	r3, #0
   187bc:	movhi	r3, #1
   187c0:	add	r5, r9, r2
   187c4:	cmn	r1, #1
   187c8:	movne	r3, #0
   187cc:	cmp	r3, #0
   187d0:	beq	187dc <__assert_fail@plt+0x70d8>
   187d4:	bl	1153c <strlen@plt>
   187d8:	str	r0, [sp, #28]
   187dc:	ldr	r3, [sp, #28]
   187e0:	cmp	r5, r3
   187e4:	bhi	19414 <__assert_fail@plt+0x7d10>
   187e8:	ldr	r0, [sp, #52]	; 0x34
   187ec:	ldr	r2, [sp, #56]	; 0x38
   187f0:	ldr	r1, [sp, #60]	; 0x3c
   187f4:	bl	11398 <memcmp@plt>
   187f8:	cmp	r0, #0
   187fc:	bne	19414 <__assert_fail@plt+0x7d10>
   18800:	ldr	r3, [sp, #44]	; 0x2c
   18804:	cmp	r3, #0
   18808:	bne	19d44 <__assert_fail@plt+0x8640>
   1880c:	ldr	r3, [sp, #52]	; 0x34
   18810:	ldrb	r5, [r3]
   18814:	cmp	r5, #126	; 0x7e
   18818:	ldrls	pc, [pc, r5, lsl #2]
   1881c:	b	190d4 <__assert_fail@plt+0x79d0>
   18820:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18824:	ldrdeq	r9, [r1], -r4
   18828:	ldrdeq	r9, [r1], -r4
   1882c:	ldrdeq	r9, [r1], -r4
   18830:	ldrdeq	r9, [r1], -r4
   18834:	ldrdeq	r9, [r1], -r4
   18838:	ldrdeq	r9, [r1], -r4
   1883c:	andeq	r8, r1, ip, lsr #31
   18840:	andeq	r8, r1, r4, lsr #31
   18844:	andeq	r8, r1, ip, ror #29
   18848:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1884c:	andeq	r8, r1, r4, ror #29
   18850:	andeq	r8, r1, r4, ror pc
   18854:	andeq	r8, r1, r0, asr #31
   18858:	ldrdeq	r9, [r1], -r4
   1885c:	ldrdeq	r9, [r1], -r4
   18860:	ldrdeq	r9, [r1], -r4
   18864:	ldrdeq	r9, [r1], -r4
   18868:	ldrdeq	r9, [r1], -r4
   1886c:	ldrdeq	r9, [r1], -r4
   18870:	ldrdeq	r9, [r1], -r4
   18874:	ldrdeq	r9, [r1], -r4
   18878:	ldrdeq	r9, [r1], -r4
   1887c:	ldrdeq	r9, [r1], -r4
   18880:	ldrdeq	r9, [r1], -r4
   18884:	ldrdeq	r9, [r1], -r4
   18888:	ldrdeq	r9, [r1], -r4
   1888c:	ldrdeq	r9, [r1], -r4
   18890:	ldrdeq	r9, [r1], -r4
   18894:	ldrdeq	r9, [r1], -r4
   18898:	ldrdeq	r9, [r1], -r4
   1889c:	ldrdeq	r9, [r1], -r4
   188a0:	strheq	r9, [r1], -r0
   188a4:			; <UNDEFINED> instruction: 0x00018fb8
   188a8:			; <UNDEFINED> instruction: 0x00018fb8
   188ac:	muleq	r1, r4, r0
   188b0:			; <UNDEFINED> instruction: 0x00018fb8
   188b4:	andeq	r9, r1, r8, asr #1
   188b8:			; <UNDEFINED> instruction: 0x00018fb8
   188bc:	andeq	r8, r1, r4, lsl lr
   188c0:			; <UNDEFINED> instruction: 0x00018fb8
   188c4:			; <UNDEFINED> instruction: 0x00018fb8
   188c8:			; <UNDEFINED> instruction: 0x00018fb8
   188cc:	andeq	r9, r1, r8, asr #1
   188d0:	andeq	r9, r1, r8, asr #1
   188d4:	andeq	r9, r1, r8, asr #1
   188d8:	andeq	r9, r1, r8, asr #1
   188dc:	andeq	r9, r1, r8, asr #1
   188e0:	andeq	r9, r1, r8, asr #1
   188e4:	andeq	r9, r1, r8, asr #1
   188e8:	andeq	r9, r1, r8, asr #1
   188ec:	andeq	r9, r1, r8, asr #1
   188f0:	andeq	r9, r1, r8, asr #1
   188f4:	andeq	r9, r1, r8, asr #1
   188f8:	andeq	r9, r1, r8, asr #1
   188fc:	andeq	r9, r1, r8, asr #1
   18900:	andeq	r9, r1, r8, asr #1
   18904:	andeq	r9, r1, r8, asr #1
   18908:	andeq	r9, r1, r8, asr #1
   1890c:			; <UNDEFINED> instruction: 0x00018fb8
   18910:			; <UNDEFINED> instruction: 0x00018fb8
   18914:			; <UNDEFINED> instruction: 0x00018fb8
   18918:			; <UNDEFINED> instruction: 0x00018fb8
   1891c:	andeq	r8, r1, r8, ror #27
   18920:	ldrdeq	r9, [r1], -r4
   18924:	andeq	r9, r1, r8, asr #1
   18928:	andeq	r9, r1, r8, asr #1
   1892c:	andeq	r9, r1, r8, asr #1
   18930:	andeq	r9, r1, r8, asr #1
   18934:	andeq	r9, r1, r8, asr #1
   18938:	andeq	r9, r1, r8, asr #1
   1893c:	andeq	r9, r1, r8, asr #1
   18940:	andeq	r9, r1, r8, asr #1
   18944:	andeq	r9, r1, r8, asr #1
   18948:	andeq	r9, r1, r8, asr #1
   1894c:	andeq	r9, r1, r8, asr #1
   18950:	andeq	r9, r1, r8, asr #1
   18954:	andeq	r9, r1, r8, asr #1
   18958:	andeq	r9, r1, r8, asr #1
   1895c:	andeq	r9, r1, r8, asr #1
   18960:	andeq	r9, r1, r8, asr #1
   18964:	andeq	r9, r1, r8, asr #1
   18968:	andeq	r9, r1, r8, asr #1
   1896c:	andeq	r9, r1, r8, asr #1
   18970:	andeq	r9, r1, r8, asr #1
   18974:	andeq	r9, r1, r8, asr #1
   18978:	andeq	r9, r1, r8, asr #1
   1897c:	andeq	r9, r1, r8, asr #1
   18980:	andeq	r9, r1, r8, asr #1
   18984:	andeq	r9, r1, r8, asr #1
   18988:	andeq	r9, r1, r8, asr #1
   1898c:			; <UNDEFINED> instruction: 0x00018fb8
   18990:	muleq	r1, r0, sp
   18994:	andeq	r9, r1, r8, asr #1
   18998:			; <UNDEFINED> instruction: 0x00018fb8
   1899c:	andeq	r9, r1, r8, asr #1
   189a0:			; <UNDEFINED> instruction: 0x00018fb8
   189a4:	andeq	r9, r1, r8, asr #1
   189a8:	andeq	r9, r1, r8, asr #1
   189ac:	andeq	r9, r1, r8, asr #1
   189b0:	andeq	r9, r1, r8, asr #1
   189b4:	andeq	r9, r1, r8, asr #1
   189b8:	andeq	r9, r1, r8, asr #1
   189bc:	andeq	r9, r1, r8, asr #1
   189c0:	andeq	r9, r1, r8, asr #1
   189c4:	andeq	r9, r1, r8, asr #1
   189c8:	andeq	r9, r1, r8, asr #1
   189cc:	andeq	r9, r1, r8, asr #1
   189d0:	andeq	r9, r1, r8, asr #1
   189d4:	andeq	r9, r1, r8, asr #1
   189d8:	andeq	r9, r1, r8, asr #1
   189dc:	andeq	r9, r1, r8, asr #1
   189e0:	andeq	r9, r1, r8, asr #1
   189e4:	andeq	r9, r1, r8, asr #1
   189e8:	andeq	r9, r1, r8, asr #1
   189ec:	andeq	r9, r1, r8, asr #1
   189f0:	andeq	r9, r1, r8, asr #1
   189f4:	andeq	r9, r1, r8, asr #1
   189f8:	andeq	r9, r1, r8, asr #1
   189fc:	andeq	r9, r1, r8, asr #1
   18a00:	andeq	r9, r1, r8, asr #1
   18a04:	andeq	r9, r1, r8, asr #1
   18a08:	andeq	r9, r1, r8, asr #1
   18a0c:			; <UNDEFINED> instruction: 0x00018bb4
   18a10:			; <UNDEFINED> instruction: 0x00018fb8
   18a14:			; <UNDEFINED> instruction: 0x00018bb4
   18a18:	muleq	r1, r4, r0
   18a1c:	cmp	r4, #0
   18a20:	moveq	r3, #1
   18a24:	streq	r3, [sp, #40]	; 0x28
   18a28:	beq	1913c <__assert_fail@plt+0x7a38>
   18a2c:	mov	r3, #0
   18a30:	mov	r2, #1
   18a34:	mov	r4, r3
   18a38:	str	r2, [sp, #36]	; 0x24
   18a3c:	str	r2, [sp, #44]	; 0x2c
   18a40:	str	r2, [sp, #56]	; 0x38
   18a44:	str	r3, [sp, #68]	; 0x44
   18a48:	movw	r3, #61756	; 0xf13c
   18a4c:	movt	r3, #1
   18a50:	str	r4, [sp, #40]	; 0x28
   18a54:	mov	r8, #2
   18a58:	str	r4, [sp, #48]	; 0x30
   18a5c:	str	r3, [sp, #60]	; 0x3c
   18a60:	str	r4, [sp, #72]	; 0x48
   18a64:	b	1874c <__assert_fail@plt+0x7048>
   18a68:	cmp	r4, #0
   18a6c:	bne	19cb8 <__assert_fail@plt+0x85b4>
   18a70:	cmp	sl, #0
   18a74:	beq	19a78 <__assert_fail@plt+0x8374>
   18a78:	mov	r3, #34	; 0x22
   18a7c:	mov	r1, r4
   18a80:	mov	r2, #1
   18a84:	strb	r3, [fp]
   18a88:	movw	r3, #57180	; 0xdf5c
   18a8c:	movt	r3, #1
   18a90:	mov	r4, r2
   18a94:	str	r2, [sp, #36]	; 0x24
   18a98:	str	r2, [sp, #40]	; 0x28
   18a9c:	str	r1, [sp, #44]	; 0x2c
   18aa0:	str	r1, [sp, #48]	; 0x30
   18aa4:	str	r2, [sp, #56]	; 0x38
   18aa8:	str	r3, [sp, #60]	; 0x3c
   18aac:	str	r1, [sp, #68]	; 0x44
   18ab0:	str	r1, [sp, #72]	; 0x48
   18ab4:	b	1874c <__assert_fail@plt+0x7048>
   18ab8:	mov	r3, #0
   18abc:	mov	r4, r8
   18ac0:	str	r3, [sp, #40]	; 0x28
   18ac4:	str	r3, [sp, #44]	; 0x2c
   18ac8:	str	r3, [sp, #48]	; 0x30
   18acc:	str	r8, [sp, #56]	; 0x38
   18ad0:	str	r3, [sp, #60]	; 0x3c
   18ad4:	str	r3, [sp, #68]	; 0x44
   18ad8:	mov	r3, #1
   18adc:	str	r3, [sp, #36]	; 0x24
   18ae0:	str	r8, [sp, #72]	; 0x48
   18ae4:	b	1874c <__assert_fail@plt+0x7048>
   18ae8:	mov	r3, #1
   18aec:	mov	r2, #0
   18af0:	mov	r4, r2
   18af4:	mov	r8, #5
   18af8:	str	r3, [sp, #36]	; 0x24
   18afc:	str	r3, [sp, #40]	; 0x28
   18b00:	str	r3, [sp, #44]	; 0x2c
   18b04:	str	r2, [sp, #48]	; 0x30
   18b08:	str	r3, [sp, #56]	; 0x38
   18b0c:	movw	r3, #57180	; 0xdf5c
   18b10:	movt	r3, #1
   18b14:	str	r3, [sp, #60]	; 0x3c
   18b18:	str	r2, [sp, #68]	; 0x44
   18b1c:	str	r2, [sp, #72]	; 0x48
   18b20:	b	1874c <__assert_fail@plt+0x7048>
   18b24:	mov	r3, #0
   18b28:	mov	r2, #1
   18b2c:	mov	r4, r3
   18b30:	str	r2, [sp, #36]	; 0x24
   18b34:	str	r2, [sp, #40]	; 0x28
   18b38:	str	r3, [sp, #44]	; 0x2c
   18b3c:	str	r3, [sp, #48]	; 0x30
   18b40:	str	r3, [sp, #56]	; 0x38
   18b44:	str	r3, [sp, #60]	; 0x3c
   18b48:	str	r3, [sp, #68]	; 0x44
   18b4c:	str	r3, [sp, #72]	; 0x48
   18b50:	b	1874c <__assert_fail@plt+0x7048>
   18b54:	mov	r2, #1
   18b58:	mov	r3, #0
   18b5c:	mov	r4, r3
   18b60:	str	r2, [sp, #36]	; 0x24
   18b64:	str	r2, [sp, #44]	; 0x2c
   18b68:	str	r8, [sp, #56]	; 0x38
   18b6c:	str	r3, [sp, #68]	; 0x44
   18b70:	b	18a48 <__assert_fail@plt+0x7344>
   18b74:	mov	r3, #1
   18b78:	mov	r2, #0
   18b7c:	mov	r4, r2
   18b80:	mov	r8, #2
   18b84:	str	r3, [sp, #36]	; 0x24
   18b88:	str	r3, [sp, #40]	; 0x28
   18b8c:	str	r3, [sp, #44]	; 0x2c
   18b90:	str	r2, [sp, #48]	; 0x30
   18b94:	str	r3, [sp, #56]	; 0x38
   18b98:	movw	r3, #61756	; 0xf13c
   18b9c:	movt	r3, #1
   18ba0:	str	r3, [sp, #60]	; 0x3c
   18ba4:	str	r2, [sp, #68]	; 0x44
   18ba8:	str	r2, [sp, #72]	; 0x48
   18bac:	b	1874c <__assert_fail@plt+0x7048>
   18bb0:	mov	r7, #0
   18bb4:	ldr	r3, [sp, #28]
   18bb8:	cmn	r3, #1
   18bbc:	beq	19694 <__assert_fail@plt+0x7f90>
   18bc0:	ldr	r3, [sp, #28]
   18bc4:	subs	r2, r3, #1
   18bc8:	movne	r2, #1
   18bcc:	sub	r3, fp, #2
   18bd0:	cmp	r2, #0
   18bd4:	clz	r3, r3
   18bd8:	lsr	r3, r3, #5
   18bdc:	bne	18be8 <__assert_fail@plt+0x74e4>
   18be0:	cmp	r9, #0
   18be4:	beq	193f4 <__assert_fail@plt+0x7cf0>
   18be8:	mov	r6, #0
   18bec:	ldr	r2, [sp, #40]	; 0x28
   18bf0:	eor	r2, r2, #1
   18bf4:	orrs	r3, r3, r2
   18bf8:	bne	18dd0 <__assert_fail@plt+0x76cc>
   18bfc:	ldr	r2, [sp, #160]	; 0xa0
   18c00:	cmp	r2, #0
   18c04:	beq	18c24 <__assert_fail@plt+0x7520>
   18c08:	ldr	r0, [sp, #160]	; 0xa0
   18c0c:	ubfx	r1, r5, #5, #8
   18c10:	and	r2, r5, #31
   18c14:	ldr	r1, [r0, r1, lsl #2]
   18c18:	lsr	r2, r1, r2
   18c1c:	tst	r2, #1
   18c20:	bne	18c2c <__assert_fail@plt+0x7528>
   18c24:	cmp	r7, #0
   18c28:	beq	18e9c <__assert_fail@plt+0x7798>
   18c2c:	ldr	r2, [sp, #44]	; 0x2c
   18c30:	sub	r3, fp, #2
   18c34:	clz	r3, r3
   18c38:	lsr	r3, r3, #5
   18c3c:	cmp	r2, #0
   18c40:	bne	199e8 <__assert_fail@plt+0x82e4>
   18c44:	ldr	r2, [sp, #48]	; 0x30
   18c48:	eor	r2, r2, #1
   18c4c:	ands	r3, r3, r2
   18c50:	beq	18c88 <__assert_fail@plt+0x7584>
   18c54:	cmp	sl, r4
   18c58:	str	r3, [sp, #48]	; 0x30
   18c5c:	movhi	r2, #39	; 0x27
   18c60:	strbhi	r2, [r8, r4]
   18c64:	add	r2, r4, #1
   18c68:	cmp	sl, r2
   18c6c:	movhi	r1, #36	; 0x24
   18c70:	strbhi	r1, [r8, r2]
   18c74:	add	r2, r4, #2
   18c78:	add	r4, r4, #3
   18c7c:	cmp	sl, r2
   18c80:	movhi	r1, #39	; 0x27
   18c84:	strbhi	r1, [r8, r2]
   18c88:	cmp	r4, sl
   18c8c:	add	r9, r9, #1
   18c90:	movcc	r3, #92	; 0x5c
   18c94:	strbcc	r3, [r8, r4]
   18c98:	add	r4, r4, #1
   18c9c:	cmp	r4, sl
   18ca0:	ldr	r3, [sp, #36]	; 0x24
   18ca4:	strbcc	r5, [r8, r4]
   18ca8:	cmp	r6, #0
   18cac:	add	r4, r4, #1
   18cb0:	moveq	r3, #0
   18cb4:	str	r3, [sp, #36]	; 0x24
   18cb8:	ldr	r3, [sp, #28]
   18cbc:	cmn	r3, #1
   18cc0:	bne	18768 <__assert_fail@plt+0x7064>
   18cc4:	ldr	r3, [sp, #32]
   18cc8:	ldrb	r6, [r3, r9]
   18ccc:	adds	r6, r6, #0
   18cd0:	movne	r6, #1
   18cd4:	cmp	r6, #0
   18cd8:	bne	1877c <__assert_fail@plt+0x7078>
   18cdc:	str	fp, [sp, #152]	; 0x98
   18ce0:	mov	fp, r8
   18ce4:	cmp	r4, #0
   18ce8:	ldr	r1, [sp, #44]	; 0x2c
   18cec:	movne	r3, #0
   18cf0:	ldr	r8, [sp, #152]	; 0x98
   18cf4:	sub	r2, r8, #2
   18cf8:	clz	r2, r2
   18cfc:	lsr	r2, r2, #5
   18d00:	andeq	r3, r2, r1
   18d04:	cmp	r3, #0
   18d08:	bne	19dc4 <__assert_fail@plt+0x86c0>
   18d0c:	eor	r3, r1, #1
   18d10:	ands	r2, r2, r3
   18d14:	beq	19cf0 <__assert_fail@plt+0x85ec>
   18d18:	ldr	r3, [sp, #68]	; 0x44
   18d1c:	cmp	r3, #0
   18d20:	beq	19cf4 <__assert_fail@plt+0x85f0>
   18d24:	ldr	r3, [sp, #36]	; 0x24
   18d28:	cmp	r3, #0
   18d2c:	bne	19d80 <__assert_fail@plt+0x867c>
   18d30:	ldr	r3, [sp, #72]	; 0x48
   18d34:	adds	r3, r3, #0
   18d38:	movne	r3, #1
   18d3c:	cmp	sl, #0
   18d40:	movne	r3, #0
   18d44:	cmp	r3, #0
   18d48:	ldreq	r2, [sp, #68]	; 0x44
   18d4c:	beq	19cf4 <__assert_fail@plt+0x85f0>
   18d50:	ldr	r2, [sp, #72]	; 0x48
   18d54:	str	r3, [sp, #68]	; 0x44
   18d58:	movw	r3, #61756	; 0xf13c
   18d5c:	movt	r3, #1
   18d60:	mov	r1, #39	; 0x27
   18d64:	mov	r4, #1
   18d68:	ldr	sl, [sp, #72]	; 0x48
   18d6c:	mov	r8, #2
   18d70:	str	r3, [sp, #60]	; 0x3c
   18d74:	mov	r3, #0
   18d78:	strb	r1, [fp]
   18d7c:	str	r3, [sp, #44]	; 0x2c
   18d80:	str	r4, [sp, #56]	; 0x38
   18d84:	str	r2, [sp, #72]	; 0x48
   18d88:	b	1874c <__assert_fail@plt+0x7048>
   18d8c:	mov	r7, #0
   18d90:	cmp	fp, #2
   18d94:	beq	19674 <__assert_fail@plt+0x7f70>
   18d98:	ldr	r2, [sp, #40]	; 0x28
   18d9c:	ldr	r3, [sp, #56]	; 0x38
   18da0:	ldr	r1, [sp, #44]	; 0x2c
   18da4:	cmp	r3, #0
   18da8:	moveq	r3, #0
   18dac:	andne	r3, r2, r1
   18db0:	cmp	r3, #0
   18db4:	moveq	r5, #92	; 0x5c
   18db8:	moveq	r3, r5
   18dbc:	bne	19680 <__assert_fail@plt+0x7f7c>
   18dc0:	ldr	r2, [sp, #40]	; 0x28
   18dc4:	cmp	r2, #0
   18dc8:	bne	19abc <__assert_fail@plt+0x83b8>
   18dcc:	mov	r6, #0
   18dd0:	ldr	r3, [sp, #44]	; 0x2c
   18dd4:	cmp	r3, #0
   18dd8:	beq	1966c <__assert_fail@plt+0x7f68>
   18ddc:	mov	r3, #0
   18de0:	b	18bfc <__assert_fail@plt+0x74f8>
   18de4:	mov	r7, #0
   18de8:	cmp	fp, #2
   18dec:	beq	196e4 <__assert_fail@plt+0x7fe0>
   18df0:	cmp	fp, #5
   18df4:	beq	196a8 <__assert_fail@plt+0x7fa4>
   18df8:	sub	r3, fp, #2
   18dfc:	mov	r6, #0
   18e00:	clz	r3, r3
   18e04:	mov	r5, #63	; 0x3f
   18e08:	lsr	r3, r3, #5
   18e0c:	b	18bec <__assert_fail@plt+0x74e8>
   18e10:	mov	r7, #0
   18e14:	cmp	fp, #2
   18e18:	movne	r3, #0
   18e1c:	movne	r5, #39	; 0x27
   18e20:	strne	r6, [sp, #68]	; 0x44
   18e24:	bne	18bec <__assert_fail@plt+0x74e8>
   18e28:	ldr	r3, [sp, #44]	; 0x2c
   18e2c:	cmp	r3, #0
   18e30:	bne	19aec <__assert_fail@plt+0x83e8>
   18e34:	ldr	r3, [sp, #72]	; 0x48
   18e38:	cmp	sl, #0
   18e3c:	clz	r3, r3
   18e40:	lsr	r3, r3, #5
   18e44:	moveq	r3, #0
   18e48:	cmp	r3, #0
   18e4c:	bne	19a18 <__assert_fail@plt+0x8314>
   18e50:	cmp	sl, r4
   18e54:	movhi	r3, #39	; 0x27
   18e58:	strbhi	r3, [r8, r4]
   18e5c:	add	r3, r4, #1
   18e60:	cmp	sl, r3
   18e64:	movhi	r2, #92	; 0x5c
   18e68:	strbhi	r2, [r8, r3]
   18e6c:	add	r3, r4, #2
   18e70:	cmp	sl, r3
   18e74:	bls	18e80 <__assert_fail@plt+0x777c>
   18e78:	mov	r2, #39	; 0x27
   18e7c:	strb	r2, [r8, r3]
   18e80:	mov	r3, #0
   18e84:	cmp	r7, #0
   18e88:	add	r4, r4, #3
   18e8c:	mov	r5, #39	; 0x27
   18e90:	str	r3, [sp, #48]	; 0x30
   18e94:	str	r6, [sp, #68]	; 0x44
   18e98:	bne	18c2c <__assert_fail@plt+0x7528>
   18e9c:	ldr	r2, [sp, #48]	; 0x30
   18ea0:	eor	r3, r3, #1
   18ea4:	add	r9, r9, #1
   18ea8:	and	r3, r3, r2
   18eac:	uxtb	r3, r3
   18eb0:	cmp	r3, #0
   18eb4:	beq	18c9c <__assert_fail@plt+0x7598>
   18eb8:	cmp	sl, r4
   18ebc:	movhi	r3, #39	; 0x27
   18ec0:	strbhi	r3, [r8, r4]
   18ec4:	add	r3, r4, #1
   18ec8:	add	r4, r4, #2
   18ecc:	cmp	sl, r3
   18ed0:	movhi	r2, #39	; 0x27
   18ed4:	strbhi	r2, [r8, r3]
   18ed8:	mov	r3, #0
   18edc:	str	r3, [sp, #48]	; 0x30
   18ee0:	b	18c9c <__assert_fail@plt+0x7598>
   18ee4:	mov	r3, #118	; 0x76
   18ee8:	b	18dc0 <__assert_fail@plt+0x76bc>
   18eec:	mov	r3, #116	; 0x74
   18ef0:	ldr	r2, [sp, #44]	; 0x2c
   18ef4:	cmp	fp, #2
   18ef8:	movne	r2, #0
   18efc:	andeq	r2, r2, #1
   18f00:	cmp	r2, #0
   18f04:	beq	18dc0 <__assert_fail@plt+0x76bc>
   18f08:	mov	fp, r8
   18f0c:	mov	r8, #2
   18f10:	ldr	r3, [sp, #40]	; 0x28
   18f14:	cmp	r3, #0
   18f18:	movne	r8, #4
   18f1c:	mov	lr, #0
   18f20:	mov	r0, fp
   18f24:	ldr	r2, [sp, #32]
   18f28:	ldr	r3, [sp, #156]	; 0x9c
   18f2c:	ldr	r1, [sp, #164]	; 0xa4
   18f30:	bic	ip, r3, #2
   18f34:	ldr	r3, [sp, #28]
   18f38:	stm	sp, {r8, ip, lr}
   18f3c:	ldr	ip, [sp, #168]	; 0xa8
   18f40:	str	r1, [sp, #12]
   18f44:	mov	r1, sl
   18f48:	str	ip, [sp, #16]
   18f4c:	bl	18664 <__assert_fail@plt+0x6f60>
   18f50:	mov	r4, r0
   18f54:	mov	r0, r4
   18f58:	add	sp, sp, #116	; 0x74
   18f5c:	ldrd	r4, [sp]
   18f60:	ldrd	r6, [sp, #8]
   18f64:	ldrd	r8, [sp, #16]
   18f68:	ldrd	sl, [sp, #24]
   18f6c:	add	sp, sp, #32
   18f70:	pop	{pc}		; (ldr pc, [sp], #4)
   18f74:	mov	r5, #102	; 0x66
   18f78:	ldr	r2, [sp, #44]	; 0x2c
   18f7c:	sub	r3, fp, #2
   18f80:	clz	r3, r3
   18f84:	lsr	r3, r3, #5
   18f88:	cmp	r2, #0
   18f8c:	bne	199e8 <__assert_fail@plt+0x82e4>
   18f90:	mov	r6, r2
   18f94:	b	18c88 <__assert_fail@plt+0x7584>
   18f98:	mov	r5, #110	; 0x6e
   18f9c:	mov	r6, #0
   18fa0:	b	18c2c <__assert_fail@plt+0x7528>
   18fa4:	mov	r5, #98	; 0x62
   18fa8:	b	18f78 <__assert_fail@plt+0x7874>
   18fac:	mov	r5, #97	; 0x61
   18fb0:	b	18f78 <__assert_fail@plt+0x7874>
   18fb4:	mov	r7, #0
   18fb8:	mov	r6, #0
   18fbc:	b	18ddc <__assert_fail@plt+0x76d8>
   18fc0:	mov	r5, #114	; 0x72
   18fc4:	b	18f9c <__assert_fail@plt+0x7898>
   18fc8:	ldr	r3, [sp, #44]	; 0x2c
   18fcc:	cmp	r3, #0
   18fd0:	bne	19d60 <__assert_fail@plt+0x865c>
   18fd4:	mov	r7, r3
   18fd8:	ldr	r3, [sp, #48]	; 0x30
   18fdc:	sub	r2, fp, #2
   18fe0:	clz	r2, r2
   18fe4:	lsr	r2, r2, #5
   18fe8:	eor	r3, r3, #1
   18fec:	ands	r3, r2, r3
   18ff0:	beq	19a04 <__assert_fail@plt+0x8300>
   18ff4:	cmp	sl, r4
   18ff8:	movhi	r1, #39	; 0x27
   18ffc:	strbhi	r1, [r8, r4]
   19000:	add	r1, r4, #1
   19004:	cmp	sl, r1
   19008:	movhi	r0, #36	; 0x24
   1900c:	strbhi	r0, [r8, r1]
   19010:	add	r1, r4, #2
   19014:	cmp	sl, r1
   19018:	movhi	r0, #39	; 0x27
   1901c:	strbhi	r0, [r8, r1]
   19020:	add	r1, r4, #3
   19024:	cmp	sl, r1
   19028:	bls	19a5c <__assert_fail@plt+0x8358>
   1902c:	mov	r4, r1
   19030:	mov	r1, #92	; 0x5c
   19034:	mov	r0, r4
   19038:	str	r3, [sp, #48]	; 0x30
   1903c:	strb	r1, [r8, r4]
   19040:	cmp	fp, #2
   19044:	add	r4, r4, #1
   19048:	beq	19aac <__assert_fail@plt+0x83a8>
   1904c:	ldr	r1, [sp, #28]
   19050:	add	r3, r9, #1
   19054:	cmp	r3, r1
   19058:	bcs	19070 <__assert_fail@plt+0x796c>
   1905c:	ldr	r1, [sp, #32]
   19060:	ldrb	r3, [r1, r3]
   19064:	sub	r3, r3, #48	; 0x30
   19068:	cmp	r3, #9
   1906c:	bls	19ac4 <__assert_fail@plt+0x83c0>
   19070:	mov	r5, #48	; 0x30
   19074:	ldr	r3, [sp, #40]	; 0x28
   19078:	eor	r3, r3, #1
   1907c:	orrs	r2, r2, r3
   19080:	mov	r3, r6
   19084:	moveq	r6, r2
   19088:	beq	18bfc <__assert_fail@plt+0x74f8>
   1908c:	mov	r6, #0
   19090:	b	18c24 <__assert_fail@plt+0x7520>
   19094:	cmp	r9, #0
   19098:	mov	r2, r7
   1909c:	bne	1963c <__assert_fail@plt+0x7f38>
   190a0:	mov	r6, r7
   190a4:	mov	r3, r9
   190a8:	mov	r7, r2
   190ac:	b	18bec <__assert_fail@plt+0x74e8>
   190b0:	mov	r2, r7
   190b4:	mov	r6, r7
   190b8:	mov	r3, #0
   190bc:	mov	r7, r2
   190c0:	mov	r5, #32
   190c4:	b	18bec <__assert_fail@plt+0x74e8>
   190c8:	mov	r6, r7
   190cc:	b	18ddc <__assert_fail@plt+0x76d8>
   190d0:	mov	r7, #0
   190d4:	ldr	r3, [sp, #64]	; 0x40
   190d8:	cmp	r3, #1
   190dc:	bne	196fc <__assert_fail@plt+0x7ff8>
   190e0:	bl	11518 <__ctype_b_loc@plt>
   190e4:	ldr	r2, [r0]
   190e8:	sxth	r3, r5
   190ec:	lsl	r3, r3, #1
   190f0:	ldr	r1, [sp, #64]	; 0x40
   190f4:	ldrh	r3, [r2, r3]
   190f8:	mov	ip, r1
   190fc:	and	r3, r3, #16384	; 0x4000
   19100:	cmp	r3, #0
   19104:	ldr	r3, [sp, #40]	; 0x28
   19108:	movne	r6, #1
   1910c:	moveq	r6, #0
   19110:	movne	r2, #0
   19114:	andeq	r2, r3, #1
   19118:	cmp	r2, #0
   1911c:	bne	19a44 <__assert_fail@plt+0x8340>
   19120:	sub	r3, fp, #2
   19124:	clz	r3, r3
   19128:	lsr	r3, r3, #5
   1912c:	b	18bec <__assert_fail@plt+0x74e8>
   19130:	cmp	r4, #0
   19134:	bne	19dd4 <__assert_fail@plt+0x86d0>
   19138:	str	r4, [sp, #40]	; 0x28
   1913c:	cmp	sl, #0
   19140:	bne	19e04 <__assert_fail@plt+0x8700>
   19144:	mov	r3, #1
   19148:	movw	r2, #61756	; 0xf13c
   1914c:	movt	r2, #1
   19150:	mov	r4, r3
   19154:	mov	r8, #2
   19158:	str	r3, [sp, #36]	; 0x24
   1915c:	str	sl, [sp, #44]	; 0x2c
   19160:	str	sl, [sp, #48]	; 0x30
   19164:	str	r3, [sp, #56]	; 0x38
   19168:	str	r2, [sp, #60]	; 0x3c
   1916c:	str	sl, [sp, #68]	; 0x44
   19170:	str	sl, [sp, #72]	; 0x48
   19174:	b	1874c <__assert_fail@plt+0x7048>
   19178:	ldr	r3, [sp, #32]
   1917c:	ldrb	r5, [r3, r9]
   19180:	cmp	r5, #126	; 0x7e
   19184:	ldrls	pc, [pc, r5, lsl #2]
   19188:	b	190d4 <__assert_fail@plt+0x79d0>
   1918c:			; <UNDEFINED> instruction: 0x000193b0
   19190:	ldrdeq	r9, [r1], -r4
   19194:	ldrdeq	r9, [r1], -r4
   19198:	ldrdeq	r9, [r1], -r4
   1919c:	ldrdeq	r9, [r1], -r4
   191a0:	ldrdeq	r9, [r1], -r4
   191a4:	ldrdeq	r9, [r1], -r4
   191a8:	andeq	r9, r1, r8, lsr #7
   191ac:	andeq	r9, r1, r0, lsr #7
   191b0:	andeq	r8, r1, ip, ror #29
   191b4:	muleq	r1, r8, r3
   191b8:	andeq	r8, r1, r4, ror #29
   191bc:	muleq	r1, r0, r3
   191c0:	andeq	r9, r1, r8, lsl #7
   191c4:	ldrdeq	r9, [r1], -r4
   191c8:	ldrdeq	r9, [r1], -r4
   191cc:	ldrdeq	r9, [r1], -r4
   191d0:	ldrdeq	r9, [r1], -r4
   191d4:	ldrdeq	r9, [r1], -r4
   191d8:	ldrdeq	r9, [r1], -r4
   191dc:	ldrdeq	r9, [r1], -r4
   191e0:	ldrdeq	r9, [r1], -r4
   191e4:	ldrdeq	r9, [r1], -r4
   191e8:	ldrdeq	r9, [r1], -r4
   191ec:	ldrdeq	r9, [r1], -r4
   191f0:	ldrdeq	r9, [r1], -r4
   191f4:	ldrdeq	r9, [r1], -r4
   191f8:	ldrdeq	r9, [r1], -r4
   191fc:	ldrdeq	r9, [r1], -r4
   19200:	ldrdeq	r9, [r1], -r4
   19204:	ldrdeq	r9, [r1], -r4
   19208:	ldrdeq	r9, [r1], -r4
   1920c:	andeq	r9, r1, r4, lsl #8
   19210:	andeq	r9, r1, r4, ror #7
   19214:	andeq	r9, r1, r4, ror #7
   19218:	ldrdeq	r9, [r1], -r4
   1921c:	andeq	r9, r1, r4, ror #7
   19220:	andeq	r9, r1, r0, lsr #2
   19224:	andeq	r9, r1, r4, ror #7
   19228:	andeq	r8, r1, r4, lsl lr
   1922c:	andeq	r9, r1, r4, ror #7
   19230:	andeq	r9, r1, r4, ror #7
   19234:	andeq	r9, r1, r4, ror #7
   19238:	andeq	r9, r1, r0, lsr #2
   1923c:	andeq	r9, r1, r0, lsr #2
   19240:	andeq	r9, r1, r0, lsr #2
   19244:	andeq	r9, r1, r0, lsr #2
   19248:	andeq	r9, r1, r0, lsr #2
   1924c:	andeq	r9, r1, r0, lsr #2
   19250:	andeq	r9, r1, r0, lsr #2
   19254:	andeq	r9, r1, r0, lsr #2
   19258:	andeq	r9, r1, r0, lsr #2
   1925c:	andeq	r9, r1, r0, lsr #2
   19260:	andeq	r9, r1, r0, lsr #2
   19264:	andeq	r9, r1, r0, lsr #2
   19268:	andeq	r9, r1, r0, lsr #2
   1926c:	andeq	r9, r1, r0, lsr #2
   19270:	andeq	r9, r1, r0, lsr #2
   19274:	andeq	r9, r1, r0, lsr #2
   19278:	andeq	r9, r1, r4, ror #7
   1927c:	andeq	r9, r1, r4, ror #7
   19280:	andeq	r9, r1, r4, ror #7
   19284:	andeq	r9, r1, r4, ror #7
   19288:	andeq	r8, r1, r8, ror #27
   1928c:	ldrdeq	r9, [r1], -r4
   19290:	andeq	r9, r1, r0, lsr #2
   19294:	andeq	r9, r1, r0, lsr #2
   19298:	andeq	r9, r1, r0, lsr #2
   1929c:	andeq	r9, r1, r0, lsr #2
   192a0:	andeq	r9, r1, r0, lsr #2
   192a4:	andeq	r9, r1, r0, lsr #2
   192a8:	andeq	r9, r1, r0, lsr #2
   192ac:	andeq	r9, r1, r0, lsr #2
   192b0:	andeq	r9, r1, r0, lsr #2
   192b4:	andeq	r9, r1, r0, lsr #2
   192b8:	andeq	r9, r1, r0, lsr #2
   192bc:	andeq	r9, r1, r0, lsr #2
   192c0:	andeq	r9, r1, r0, lsr #2
   192c4:	andeq	r9, r1, r0, lsr #2
   192c8:	andeq	r9, r1, r0, lsr #2
   192cc:	andeq	r9, r1, r0, lsr #2
   192d0:	andeq	r9, r1, r0, lsr #2
   192d4:	andeq	r9, r1, r0, lsr #2
   192d8:	andeq	r9, r1, r0, lsr #2
   192dc:	andeq	r9, r1, r0, lsr #2
   192e0:	andeq	r9, r1, r0, lsr #2
   192e4:	andeq	r9, r1, r0, lsr #2
   192e8:	andeq	r9, r1, r0, lsr #2
   192ec:	andeq	r9, r1, r0, lsr #2
   192f0:	andeq	r9, r1, r0, lsr #2
   192f4:	andeq	r9, r1, r0, lsr #2
   192f8:	andeq	r9, r1, r4, ror #7
   192fc:	muleq	r1, r0, sp
   19300:	andeq	r9, r1, r0, lsr #2
   19304:	andeq	r9, r1, r4, ror #7
   19308:	andeq	r9, r1, r0, lsr #2
   1930c:	andeq	r9, r1, r4, ror #7
   19310:	andeq	r9, r1, r0, lsr #2
   19314:	andeq	r9, r1, r0, lsr #2
   19318:	andeq	r9, r1, r0, lsr #2
   1931c:	andeq	r9, r1, r0, lsr #2
   19320:	andeq	r9, r1, r0, lsr #2
   19324:	andeq	r9, r1, r0, lsr #2
   19328:	andeq	r9, r1, r0, lsr #2
   1932c:	andeq	r9, r1, r0, lsr #2
   19330:	andeq	r9, r1, r0, lsr #2
   19334:	andeq	r9, r1, r0, lsr #2
   19338:	andeq	r9, r1, r0, lsr #2
   1933c:	andeq	r9, r1, r0, lsr #2
   19340:	andeq	r9, r1, r0, lsr #2
   19344:	andeq	r9, r1, r0, lsr #2
   19348:	andeq	r9, r1, r0, lsr #2
   1934c:	andeq	r9, r1, r0, lsr #2
   19350:	andeq	r9, r1, r0, lsr #2
   19354:	andeq	r9, r1, r0, lsr #2
   19358:	andeq	r9, r1, r0, lsr #2
   1935c:	andeq	r9, r1, r0, lsr #2
   19360:	andeq	r9, r1, r0, lsr #2
   19364:	andeq	r9, r1, r0, lsr #2
   19368:	andeq	r9, r1, r0, lsr #2
   1936c:	andeq	r9, r1, r0, lsr #2
   19370:	andeq	r9, r1, r0, lsr #2
   19374:	andeq	r9, r1, r0, lsr #2
   19378:			; <UNDEFINED> instruction: 0x00018bb4
   1937c:	andeq	r9, r1, r4, ror #7
   19380:			; <UNDEFINED> instruction: 0x00018bb4
   19384:	ldrdeq	r9, [r1], -r4
   19388:	mov	r3, #114	; 0x72
   1938c:	b	18ef0 <__assert_fail@plt+0x77ec>
   19390:	mov	r3, #102	; 0x66
   19394:	b	18dc0 <__assert_fail@plt+0x76bc>
   19398:	mov	r3, #110	; 0x6e
   1939c:	b	18ef0 <__assert_fail@plt+0x77ec>
   193a0:	mov	r3, #98	; 0x62
   193a4:	b	18dc0 <__assert_fail@plt+0x76bc>
   193a8:	mov	r3, #97	; 0x61
   193ac:	b	18dc0 <__assert_fail@plt+0x76bc>
   193b0:	ldr	r3, [sp, #40]	; 0x28
   193b4:	cmp	r3, #0
   193b8:	bne	18fc8 <__assert_fail@plt+0x78c4>
   193bc:	ldr	r3, [sp, #156]	; 0x9c
   193c0:	tst	r3, #1
   193c4:	addne	r9, r9, #1
   193c8:	bne	1875c <__assert_fail@plt+0x7058>
   193cc:	ldr	r7, [sp, #40]	; 0x28
   193d0:	b	18dcc <__assert_fail@plt+0x76c8>
   193d4:	sub	r3, fp, #2
   193d8:	clz	r3, r3
   193dc:	lsr	r3, r3, #5
   193e0:	b	18be0 <__assert_fail@plt+0x74dc>
   193e4:	sub	r3, fp, #2
   193e8:	mov	r6, #0
   193ec:	clz	r3, r3
   193f0:	lsr	r3, r3, #5
   193f4:	ldr	r2, [sp, #44]	; 0x2c
   193f8:	tst	r2, r3
   193fc:	beq	18bec <__assert_fail@plt+0x74e8>
   19400:	b	18f08 <__assert_fail@plt+0x7804>
   19404:	sub	r3, fp, #2
   19408:	clz	r3, r3
   1940c:	lsr	r3, r3, #5
   19410:	b	193f4 <__assert_fail@plt+0x7cf0>
   19414:	ldr	r3, [sp, #52]	; 0x34
   19418:	ldrb	r5, [r3]
   1941c:	cmp	r5, #126	; 0x7e
   19420:	ldrls	pc, [pc, r5, lsl #2]
   19424:	b	190d0 <__assert_fail@plt+0x79cc>
   19428:	andeq	r8, r1, r8, asr #31
   1942c:	ldrdeq	r9, [r1], -r0
   19430:	ldrdeq	r9, [r1], -r0
   19434:	ldrdeq	r9, [r1], -r0
   19438:	ldrdeq	r9, [r1], -r0
   1943c:	ldrdeq	r9, [r1], -r0
   19440:	ldrdeq	r9, [r1], -r0
   19444:	andeq	r8, r1, ip, lsr #31
   19448:	andeq	r8, r1, r4, lsr #31
   1944c:	andeq	r9, r1, r0, ror #12
   19450:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   19454:	andeq	r9, r1, r4, asr r6
   19458:	andeq	r8, r1, r4, ror pc
   1945c:	andeq	r8, r1, r0, asr #31
   19460:	ldrdeq	r9, [r1], -r0
   19464:	ldrdeq	r9, [r1], -r0
   19468:	ldrdeq	r9, [r1], -r0
   1946c:	ldrdeq	r9, [r1], -r0
   19470:	ldrdeq	r9, [r1], -r0
   19474:	ldrdeq	r9, [r1], -r0
   19478:	ldrdeq	r9, [r1], -r0
   1947c:	ldrdeq	r9, [r1], -r0
   19480:	ldrdeq	r9, [r1], -r0
   19484:	ldrdeq	r9, [r1], -r0
   19488:	ldrdeq	r9, [r1], -r0
   1948c:	ldrdeq	r9, [r1], -r0
   19490:	ldrdeq	r9, [r1], -r0
   19494:	ldrdeq	r9, [r1], -r0
   19498:	ldrdeq	r9, [r1], -r0
   1949c:	ldrdeq	r9, [r1], -r0
   194a0:	ldrdeq	r9, [r1], -r0
   194a4:	ldrdeq	r9, [r1], -r0
   194a8:	andeq	r9, r1, ip, asr #12
   194ac:			; <UNDEFINED> instruction: 0x00018fb4
   194b0:			; <UNDEFINED> instruction: 0x00018fb4
   194b4:	andeq	r9, r1, r0, lsr r6
   194b8:			; <UNDEFINED> instruction: 0x00018fb4
   194bc:	andeq	r9, r1, r4, lsr #12
   194c0:			; <UNDEFINED> instruction: 0x00018fb4
   194c4:	andeq	r8, r1, r0, lsl lr
   194c8:			; <UNDEFINED> instruction: 0x00018fb4
   194cc:			; <UNDEFINED> instruction: 0x00018fb4
   194d0:			; <UNDEFINED> instruction: 0x00018fb4
   194d4:	andeq	r9, r1, r4, lsr #12
   194d8:	andeq	r9, r1, r4, lsr #12
   194dc:	andeq	r9, r1, r4, lsr #12
   194e0:	andeq	r9, r1, r4, lsr #12
   194e4:	andeq	r9, r1, r4, lsr #12
   194e8:	andeq	r9, r1, r4, lsr #12
   194ec:	andeq	r9, r1, r4, lsr #12
   194f0:	andeq	r9, r1, r4, lsr #12
   194f4:	andeq	r9, r1, r4, lsr #12
   194f8:	andeq	r9, r1, r4, lsr #12
   194fc:	andeq	r9, r1, r4, lsr #12
   19500:	andeq	r9, r1, r4, lsr #12
   19504:	andeq	r9, r1, r4, lsr #12
   19508:	andeq	r9, r1, r4, lsr #12
   1950c:	andeq	r9, r1, r4, lsr #12
   19510:	andeq	r9, r1, r4, lsr #12
   19514:			; <UNDEFINED> instruction: 0x00018fb4
   19518:			; <UNDEFINED> instruction: 0x00018fb4
   1951c:			; <UNDEFINED> instruction: 0x00018fb4
   19520:			; <UNDEFINED> instruction: 0x00018fb4
   19524:	andeq	r8, r1, r4, ror #27
   19528:	ldrdeq	r9, [r1], -r0
   1952c:	andeq	r9, r1, r4, lsr #12
   19530:	andeq	r9, r1, r4, lsr #12
   19534:	andeq	r9, r1, r4, lsr #12
   19538:	andeq	r9, r1, r4, lsr #12
   1953c:	andeq	r9, r1, r4, lsr #12
   19540:	andeq	r9, r1, r4, lsr #12
   19544:	andeq	r9, r1, r4, lsr #12
   19548:	andeq	r9, r1, r4, lsr #12
   1954c:	andeq	r9, r1, r4, lsr #12
   19550:	andeq	r9, r1, r4, lsr #12
   19554:	andeq	r9, r1, r4, lsr #12
   19558:	andeq	r9, r1, r4, lsr #12
   1955c:	andeq	r9, r1, r4, lsr #12
   19560:	andeq	r9, r1, r4, lsr #12
   19564:	andeq	r9, r1, r4, lsr #12
   19568:	andeq	r9, r1, r4, lsr #12
   1956c:	andeq	r9, r1, r4, lsr #12
   19570:	andeq	r9, r1, r4, lsr #12
   19574:	andeq	r9, r1, r4, lsr #12
   19578:	andeq	r9, r1, r4, lsr #12
   1957c:	andeq	r9, r1, r4, lsr #12
   19580:	andeq	r9, r1, r4, lsr #12
   19584:	andeq	r9, r1, r4, lsr #12
   19588:	andeq	r9, r1, r4, lsr #12
   1958c:	andeq	r9, r1, r4, lsr #12
   19590:	andeq	r9, r1, r4, lsr #12
   19594:			; <UNDEFINED> instruction: 0x00018fb4
   19598:	andeq	r8, r1, ip, lsl #27
   1959c:	andeq	r9, r1, r4, lsr #12
   195a0:			; <UNDEFINED> instruction: 0x00018fb4
   195a4:	andeq	r9, r1, r4, lsr #12
   195a8:			; <UNDEFINED> instruction: 0x00018fb4
   195ac:	andeq	r9, r1, r4, lsr #12
   195b0:	andeq	r9, r1, r4, lsr #12
   195b4:	andeq	r9, r1, r4, lsr #12
   195b8:	andeq	r9, r1, r4, lsr #12
   195bc:	andeq	r9, r1, r4, lsr #12
   195c0:	andeq	r9, r1, r4, lsr #12
   195c4:	andeq	r9, r1, r4, lsr #12
   195c8:	andeq	r9, r1, r4, lsr #12
   195cc:	andeq	r9, r1, r4, lsr #12
   195d0:	andeq	r9, r1, r4, lsr #12
   195d4:	andeq	r9, r1, r4, lsr #12
   195d8:	andeq	r9, r1, r4, lsr #12
   195dc:	andeq	r9, r1, r4, lsr #12
   195e0:	andeq	r9, r1, r4, lsr #12
   195e4:	andeq	r9, r1, r4, lsr #12
   195e8:	andeq	r9, r1, r4, lsr #12
   195ec:	andeq	r9, r1, r4, lsr #12
   195f0:	andeq	r9, r1, r4, lsr #12
   195f4:	andeq	r9, r1, r4, lsr #12
   195f8:	andeq	r9, r1, r4, lsr #12
   195fc:	andeq	r9, r1, r4, lsr #12
   19600:	andeq	r9, r1, r4, lsr #12
   19604:	andeq	r9, r1, r4, lsr #12
   19608:	andeq	r9, r1, r4, lsr #12
   1960c:	andeq	r9, r1, r4, lsr #12
   19610:	andeq	r9, r1, r4, lsr #12
   19614:			; <UNDEFINED> instruction: 0x00018bb0
   19618:			; <UNDEFINED> instruction: 0x00018fb4
   1961c:			; <UNDEFINED> instruction: 0x00018bb0
   19620:	andeq	r9, r1, r0, lsr r6
   19624:	mov	r6, r7
   19628:	mov	r7, #0
   1962c:	b	18ddc <__assert_fail@plt+0x76d8>
   19630:	cmp	r9, #0
   19634:	mov	r2, #0
   19638:	beq	190a0 <__assert_fail@plt+0x799c>
   1963c:	mov	r6, #0
   19640:	mov	r7, r2
   19644:	mov	r3, r6
   19648:	b	18bfc <__assert_fail@plt+0x74f8>
   1964c:	mov	r2, #0
   19650:	b	190b4 <__assert_fail@plt+0x79b0>
   19654:	mov	r7, #0
   19658:	mov	r3, #118	; 0x76
   1965c:	b	18dc0 <__assert_fail@plt+0x76bc>
   19660:	mov	r7, #0
   19664:	mov	r3, #116	; 0x74
   19668:	b	18ef0 <__assert_fail@plt+0x77ec>
   1966c:	ldr	r3, [sp, #44]	; 0x2c
   19670:	b	18c24 <__assert_fail@plt+0x7520>
   19674:	ldr	r3, [sp, #44]	; 0x2c
   19678:	cmp	r3, #0
   1967c:	bne	19aec <__assert_fail@plt+0x83e8>
   19680:	add	r9, r9, #1
   19684:	mov	r6, #0
   19688:	ldr	r3, [sp, #48]	; 0x30
   1968c:	mov	r5, #92	; 0x5c
   19690:	b	18eb0 <__assert_fail@plt+0x77ac>
   19694:	ldr	r3, [sp, #32]
   19698:	ldrb	r2, [r3, #1]
   1969c:	adds	r2, r2, #0
   196a0:	movne	r2, #1
   196a4:	b	18bcc <__assert_fail@plt+0x74c8>
   196a8:	ldr	r3, [sp, #156]	; 0x9c
   196ac:	ands	r3, r3, #4
   196b0:	beq	196d8 <__assert_fail@plt+0x7fd4>
   196b4:	ldr	r2, [sp, #28]
   196b8:	add	r3, r9, #2
   196bc:	cmp	r3, r2
   196c0:	bcs	196d4 <__assert_fail@plt+0x7fd0>
   196c4:	ldr	r2, [sp, #52]	; 0x34
   196c8:	ldrb	r5, [r2, #1]
   196cc:	cmp	r5, #63	; 0x3f
   196d0:	beq	19b50 <__assert_fail@plt+0x844c>
   196d4:	mov	r3, #0
   196d8:	mov	r5, #63	; 0x3f
   196dc:	mov	r6, r3
   196e0:	b	18bec <__assert_fail@plt+0x74e8>
   196e4:	ldr	r3, [sp, #44]	; 0x2c
   196e8:	cmp	r3, #0
   196ec:	bne	19aec <__assert_fail@plt+0x83e8>
   196f0:	mov	r6, r3
   196f4:	mov	r5, #63	; 0x3f
   196f8:	b	18c24 <__assert_fail@plt+0x7520>
   196fc:	ldr	r1, [sp, #28]
   19700:	mov	r2, #0
   19704:	mov	r3, #0
   19708:	strd	r2, [sp, #104]	; 0x68
   1970c:	cmn	r1, #1
   19710:	bne	19720 <__assert_fail@plt+0x801c>
   19714:	ldr	r0, [sp, #32]
   19718:	bl	1153c <strlen@plt>
   1971c:	str	r0, [sp, #28]
   19720:	str	r8, [sp, #76]	; 0x4c
   19724:	mov	r3, #0
   19728:	str	sl, [sp, #80]	; 0x50
   1972c:	ldr	sl, [sp, #32]
   19730:	str	r5, [sp, #84]	; 0x54
   19734:	mov	r5, r3
   19738:	ldr	r8, [sp, #44]	; 0x2c
   1973c:	str	r7, [sp, #88]	; 0x58
   19740:	str	r4, [sp, #92]	; 0x5c
   19744:	ldr	r2, [sp, #28]
   19748:	add	r4, r9, r5
   1974c:	add	r3, sp, #104	; 0x68
   19750:	add	r7, sl, r4
   19754:	add	r0, sp, #100	; 0x64
   19758:	mov	r1, r7
   1975c:	sub	r2, r2, r4
   19760:	bl	17324 <__assert_fail@plt+0x5c20>
   19764:	subs	r1, r0, #0
   19768:	beq	197b4 <__assert_fail@plt+0x80b0>
   1976c:	cmn	r1, #1
   19770:	beq	19b2c <__assert_fail@plt+0x8428>
   19774:	cmn	r1, #2
   19778:	beq	19c4c <__assert_fail@plt+0x8548>
   1977c:	cmp	fp, #2
   19780:	movne	r3, #0
   19784:	andeq	r3, r8, #1
   19788:	cmp	r3, #0
   1978c:	bne	19918 <__assert_fail@plt+0x8214>
   19790:	ldr	r0, [sp, #100]	; 0x64
   19794:	add	r5, r5, r1
   19798:	bl	11410 <iswprint@plt>
   1979c:	cmp	r0, #0
   197a0:	add	r0, sp, #104	; 0x68
   197a4:	moveq	r6, #0
   197a8:	bl	1138c <mbsinit@plt>
   197ac:	cmp	r0, #0
   197b0:	beq	19744 <__assert_fail@plt+0x8040>
   197b4:	ldr	r3, [sp, #40]	; 0x28
   197b8:	mov	ip, r5
   197bc:	eor	r2, r6, #1
   197c0:	ldr	r8, [sp, #76]	; 0x4c
   197c4:	ldr	sl, [sp, #80]	; 0x50
   197c8:	and	r2, r2, r3
   197cc:	ldr	r5, [sp, #84]	; 0x54
   197d0:	ldr	r7, [sp, #88]	; 0x58
   197d4:	ldr	r4, [sp, #92]	; 0x5c
   197d8:	cmp	ip, #1
   197dc:	bls	19118 <__assert_fail@plt+0x7a14>
   197e0:	add	r1, ip, r9
   197e4:	mov	r0, #39	; 0x27
   197e8:	ldr	lr, [sp, #52]	; 0x34
   197ec:	mov	ip, #0
   197f0:	str	r6, [sp, #52]	; 0x34
   197f4:	ldr	r6, [sp, #48]	; 0x30
   197f8:	b	198b4 <__assert_fail@plt+0x81b0>
   197fc:	ldr	ip, [sp, #44]	; 0x2c
   19800:	sub	r3, fp, #2
   19804:	clz	r3, r3
   19808:	lsr	r3, r3, #5
   1980c:	cmp	ip, #0
   19810:	bne	19a24 <__assert_fail@plt+0x8320>
   19814:	eor	ip, r6, #1
   19818:	ands	r3, r3, ip
   1981c:	beq	1984c <__assert_fail@plt+0x8148>
   19820:	cmp	sl, r4
   19824:	add	ip, r4, #1
   19828:	strbhi	r0, [r8, r4]
   1982c:	cmp	sl, ip
   19830:	movhi	r6, #36	; 0x24
   19834:	strbhi	r6, [r8, ip]
   19838:	add	ip, r4, #2
   1983c:	mov	r6, r3
   19840:	cmp	sl, ip
   19844:	add	r4, r4, #3
   19848:	strbhi	r0, [r8, ip]
   1984c:	cmp	sl, r4
   19850:	movhi	r3, #92	; 0x5c
   19854:	strbhi	r3, [r8, r4]
   19858:	add	r3, r4, #1
   1985c:	cmp	sl, r3
   19860:	bls	19870 <__assert_fail@plt+0x816c>
   19864:	lsr	ip, r5, #6
   19868:	add	ip, ip, #48	; 0x30
   1986c:	strb	ip, [r8, r3]
   19870:	add	r3, r4, #2
   19874:	cmp	sl, r3
   19878:	bls	19888 <__assert_fail@plt+0x8184>
   1987c:	ubfx	ip, r5, #3, #3
   19880:	add	ip, ip, #48	; 0x30
   19884:	strb	ip, [r8, r3]
   19888:	add	r9, r9, #1
   1988c:	and	r5, r5, #7
   19890:	cmp	r9, r1
   19894:	add	r5, r5, #48	; 0x30
   19898:	add	r4, r4, #3
   1989c:	bcs	19a50 <__assert_fail@plt+0x834c>
   198a0:	mov	ip, r2
   198a4:	cmp	sl, r4
   198a8:	strbhi	r5, [r8, r4]
   198ac:	add	r4, r4, #1
   198b0:	ldrb	r5, [lr, #1]!
   198b4:	cmp	r2, #0
   198b8:	bne	197fc <__assert_fail@plt+0x80f8>
   198bc:	eor	r3, ip, #1
   198c0:	cmp	r7, #0
   198c4:	and	r3, r3, r6
   198c8:	uxtb	r3, r3
   198cc:	beq	198e0 <__assert_fail@plt+0x81dc>
   198d0:	cmp	sl, r4
   198d4:	movhi	r7, #92	; 0x5c
   198d8:	strbhi	r7, [r8, r4]
   198dc:	add	r4, r4, #1
   198e0:	add	r9, r9, #1
   198e4:	cmp	r9, r1
   198e8:	bcs	19a38 <__assert_fail@plt+0x8334>
   198ec:	cmp	r3, #0
   198f0:	beq	19a70 <__assert_fail@plt+0x836c>
   198f4:	cmp	sl, r4
   198f8:	add	r3, r4, #1
   198fc:	mov	r7, #0
   19900:	strbhi	r0, [r8, r4]
   19904:	cmp	sl, r3
   19908:	add	r4, r4, #2
   1990c:	mov	r6, r7
   19910:	strbhi	r0, [r8, r3]
   19914:	b	198a4 <__assert_fail@plt+0x81a0>
   19918:	cmp	r1, #1
   1991c:	beq	19790 <__assert_fail@plt+0x808c>
   19920:	add	r2, r4, #1
   19924:	add	r3, sl, r1
   19928:	add	r2, sl, r2
   1992c:	add	r4, r3, r4
   19930:	ldrb	r3, [r2], #1
   19934:	sub	r3, r3, #91	; 0x5b
   19938:	cmp	r3, #33	; 0x21
   1993c:	ldrls	pc, [pc, r3, lsl #2]
   19940:	b	199cc <__assert_fail@plt+0x82c8>
   19944:	ldrdeq	r9, [r1], -r8
   19948:	ldrdeq	r9, [r1], -r8
   1994c:	andeq	r9, r1, ip, asr #19
   19950:	ldrdeq	r9, [r1], -r8
   19954:	andeq	r9, r1, ip, asr #19
   19958:	ldrdeq	r9, [r1], -r8
   1995c:	andeq	r9, r1, ip, asr #19
   19960:	andeq	r9, r1, ip, asr #19
   19964:	andeq	r9, r1, ip, asr #19
   19968:	andeq	r9, r1, ip, asr #19
   1996c:	andeq	r9, r1, ip, asr #19
   19970:	andeq	r9, r1, ip, asr #19
   19974:	andeq	r9, r1, ip, asr #19
   19978:	andeq	r9, r1, ip, asr #19
   1997c:	andeq	r9, r1, ip, asr #19
   19980:	andeq	r9, r1, ip, asr #19
   19984:	andeq	r9, r1, ip, asr #19
   19988:	andeq	r9, r1, ip, asr #19
   1998c:	andeq	r9, r1, ip, asr #19
   19990:	andeq	r9, r1, ip, asr #19
   19994:	andeq	r9, r1, ip, asr #19
   19998:	andeq	r9, r1, ip, asr #19
   1999c:	andeq	r9, r1, ip, asr #19
   199a0:	andeq	r9, r1, ip, asr #19
   199a4:	andeq	r9, r1, ip, asr #19
   199a8:	andeq	r9, r1, ip, asr #19
   199ac:	andeq	r9, r1, ip, asr #19
   199b0:	andeq	r9, r1, ip, asr #19
   199b4:	andeq	r9, r1, ip, asr #19
   199b8:	andeq	r9, r1, ip, asr #19
   199bc:	andeq	r9, r1, ip, asr #19
   199c0:	andeq	r9, r1, ip, asr #19
   199c4:	andeq	r9, r1, ip, asr #19
   199c8:	ldrdeq	r9, [r1], -r8
   199cc:	cmp	r4, r2
   199d0:	bne	19930 <__assert_fail@plt+0x822c>
   199d4:	b	19790 <__assert_fail@plt+0x808c>
   199d8:	mov	r8, #2
   199dc:	ldr	fp, [sp, #76]	; 0x4c
   199e0:	ldr	sl, [sp, #80]	; 0x50
   199e4:	b	18f10 <__assert_fail@plt+0x780c>
   199e8:	ldr	r2, [sp, #40]	; 0x28
   199ec:	str	fp, [sp, #152]	; 0x98
   199f0:	mov	fp, r8
   199f4:	ldr	r8, [sp, #152]	; 0x98
   199f8:	and	r2, r2, r3
   199fc:	str	r2, [sp, #40]	; 0x28
   19a00:	b	18f10 <__assert_fail@plt+0x780c>
   19a04:	cmp	sl, r4
   19a08:	movls	r0, r4
   19a0c:	bls	19040 <__assert_fail@plt+0x793c>
   19a10:	ldr	r3, [sp, #48]	; 0x30
   19a14:	b	19030 <__assert_fail@plt+0x792c>
   19a18:	str	sl, [sp, #72]	; 0x48
   19a1c:	ldr	sl, [sp, #44]	; 0x2c
   19a20:	b	18e80 <__assert_fail@plt+0x777c>
   19a24:	str	r3, [sp, #40]	; 0x28
   19a28:	str	fp, [sp, #152]	; 0x98
   19a2c:	mov	fp, r8
   19a30:	ldr	r8, [sp, #152]	; 0x98
   19a34:	b	18f10 <__assert_fail@plt+0x780c>
   19a38:	str	r6, [sp, #48]	; 0x30
   19a3c:	ldr	r6, [sp, #52]	; 0x34
   19a40:	b	18eb0 <__assert_fail@plt+0x77ac>
   19a44:	mov	r6, #0
   19a48:	ldr	r2, [sp, #40]	; 0x28
   19a4c:	b	197e0 <__assert_fail@plt+0x80dc>
   19a50:	str	r6, [sp, #48]	; 0x30
   19a54:	ldr	r6, [sp, #52]	; 0x34
   19a58:	b	18c9c <__assert_fail@plt+0x7598>
   19a5c:	add	r4, r4, #4
   19a60:	mov	r6, #0
   19a64:	str	r3, [sp, #48]	; 0x30
   19a68:	mov	r5, #48	; 0x30
   19a6c:	b	18c24 <__assert_fail@plt+0x7520>
   19a70:	mov	r7, r3
   19a74:	b	198a4 <__assert_fail@plt+0x81a0>
   19a78:	mov	r3, #1
   19a7c:	movw	r2, #57180	; 0xdf5c
   19a80:	movt	r2, #1
   19a84:	mov	r4, r3
   19a88:	str	r3, [sp, #36]	; 0x24
   19a8c:	str	r3, [sp, #40]	; 0x28
   19a90:	str	sl, [sp, #44]	; 0x2c
   19a94:	str	sl, [sp, #48]	; 0x30
   19a98:	str	r3, [sp, #56]	; 0x38
   19a9c:	str	r2, [sp, #60]	; 0x3c
   19aa0:	str	sl, [sp, #68]	; 0x44
   19aa4:	str	sl, [sp, #72]	; 0x48
   19aa8:	b	1874c <__assert_fail@plt+0x7048>
   19aac:	mov	r3, r6
   19ab0:	mov	r5, #48	; 0x30
   19ab4:	mov	r6, #0
   19ab8:	b	18c24 <__assert_fail@plt+0x7520>
   19abc:	mov	r5, r3
   19ac0:	b	18f9c <__assert_fail@plt+0x7898>
   19ac4:	cmp	sl, r4
   19ac8:	mov	r5, #48	; 0x30
   19acc:	movhi	r3, #48	; 0x30
   19ad0:	strbhi	r3, [r8, r4]
   19ad4:	add	r3, r0, #2
   19ad8:	add	r4, r0, #3
   19adc:	cmp	sl, r3
   19ae0:	movhi	r1, #48	; 0x30
   19ae4:	strbhi	r1, [r8, r3]
   19ae8:	b	19074 <__assert_fail@plt+0x7970>
   19aec:	str	fp, [sp, #152]	; 0x98
   19af0:	mov	fp, r8
   19af4:	ldr	r8, [sp, #152]	; 0x98
   19af8:	b	18f10 <__assert_fail@plt+0x780c>
   19afc:	ldr	r3, [sp, #164]	; 0xa4
   19b00:	ldrb	r3, [r3]
   19b04:	cmp	r3, #0
   19b08:	beq	1871c <__assert_fail@plt+0x7018>
   19b0c:	ldr	r2, [sp, #164]	; 0xa4
   19b10:	cmp	sl, r4
   19b14:	strbhi	r3, [fp, r4]
   19b18:	add	r4, r4, #1
   19b1c:	ldrb	r3, [r2, #1]!
   19b20:	cmp	r3, #0
   19b24:	bne	19b10 <__assert_fail@plt+0x840c>
   19b28:	b	1871c <__assert_fail@plt+0x7018>
   19b2c:	mov	ip, r5
   19b30:	mov	r6, #0
   19b34:	ldr	r2, [sp, #40]	; 0x28
   19b38:	ldr	r8, [sp, #76]	; 0x4c
   19b3c:	ldr	sl, [sp, #80]	; 0x50
   19b40:	ldr	r5, [sp, #84]	; 0x54
   19b44:	ldr	r7, [sp, #88]	; 0x58
   19b48:	ldr	r4, [sp, #92]	; 0x5c
   19b4c:	b	197d8 <__assert_fail@plt+0x80d4>
   19b50:	ldr	r2, [sp, #32]
   19b54:	ldrb	r1, [r2, r3]
   19b58:	sub	r2, r1, #33	; 0x21
   19b5c:	cmp	r2, #29
   19b60:	ldrls	pc, [pc, r2, lsl #2]
   19b64:	b	19c40 <__assert_fail@plt+0x853c>
   19b68:	andeq	r9, r1, r0, ror #23
   19b6c:	andeq	r9, r1, r0, asr #24
   19b70:	andeq	r9, r1, r0, asr #24
   19b74:	andeq	r9, r1, r0, asr #24
   19b78:	andeq	r9, r1, r0, asr #24
   19b7c:	andeq	r9, r1, r0, asr #24
   19b80:	andeq	r9, r1, r0, ror #23
   19b84:	andeq	r9, r1, r0, ror #23
   19b88:	andeq	r9, r1, r0, ror #23
   19b8c:	andeq	r9, r1, r0, asr #24
   19b90:	andeq	r9, r1, r0, asr #24
   19b94:	andeq	r9, r1, r0, asr #24
   19b98:	andeq	r9, r1, r0, ror #23
   19b9c:	andeq	r9, r1, r0, asr #24
   19ba0:	andeq	r9, r1, r0, ror #23
   19ba4:	andeq	r9, r1, r0, asr #24
   19ba8:	andeq	r9, r1, r0, asr #24
   19bac:	andeq	r9, r1, r0, asr #24
   19bb0:	andeq	r9, r1, r0, asr #24
   19bb4:	andeq	r9, r1, r0, asr #24
   19bb8:	andeq	r9, r1, r0, asr #24
   19bbc:	andeq	r9, r1, r0, asr #24
   19bc0:	andeq	r9, r1, r0, asr #24
   19bc4:	andeq	r9, r1, r0, asr #24
   19bc8:	andeq	r9, r1, r0, asr #24
   19bcc:	andeq	r9, r1, r0, asr #24
   19bd0:	andeq	r9, r1, r0, asr #24
   19bd4:	andeq	r9, r1, r0, ror #23
   19bd8:	andeq	r9, r1, r0, ror #23
   19bdc:	andeq	r9, r1, r0, ror #23
   19be0:	ldr	r2, [sp, #44]	; 0x2c
   19be4:	cmp	r2, #0
   19be8:	bne	19d44 <__assert_fail@plt+0x8640>
   19bec:	cmp	sl, r4
   19bf0:	mov	r5, r1
   19bf4:	movhi	r2, #63	; 0x3f
   19bf8:	mov	r9, r3
   19bfc:	strbhi	r2, [r8, r4]
   19c00:	add	r2, r4, #1
   19c04:	cmp	sl, r2
   19c08:	movhi	r0, #34	; 0x22
   19c0c:	strbhi	r0, [r8, r2]
   19c10:	add	r2, r4, #2
   19c14:	cmp	sl, r2
   19c18:	movhi	r0, #34	; 0x22
   19c1c:	strbhi	r0, [r8, r2]
   19c20:	add	r2, r4, #3
   19c24:	add	r4, r4, #4
   19c28:	cmp	sl, r2
   19c2c:	movhi	r0, #63	; 0x3f
   19c30:	strbhi	r0, [r8, r2]
   19c34:	mov	r2, #0
   19c38:	mov	r6, r2
   19c3c:	b	19074 <__assert_fail@plt+0x7970>
   19c40:	mov	r3, #0
   19c44:	mov	r6, r3
   19c48:	b	18bec <__assert_fail@plt+0x74e8>
   19c4c:	ldr	r0, [sp, #28]
   19c50:	mov	r1, r4
   19c54:	mov	r2, r7
   19c58:	mov	r3, r5
   19c5c:	mov	ip, r5
   19c60:	ldr	r8, [sp, #76]	; 0x4c
   19c64:	ldr	sl, [sp, #80]	; 0x50
   19c68:	cmp	r1, r0
   19c6c:	ldr	r5, [sp, #84]	; 0x54
   19c70:	ldr	r7, [sp, #88]	; 0x58
   19c74:	ldr	r4, [sp, #92]	; 0x5c
   19c78:	bcs	19cac <__assert_fail@plt+0x85a8>
   19c7c:	ldrb	r6, [r2]
   19c80:	cmp	r6, #0
   19c84:	bne	19c98 <__assert_fail@plt+0x8594>
   19c88:	b	19dcc <__assert_fail@plt+0x86c8>
   19c8c:	ldrb	r6, [r2, #1]!
   19c90:	cmp	r6, #0
   19c94:	beq	19d54 <__assert_fail@plt+0x8650>
   19c98:	add	r3, r3, #1
   19c9c:	add	r1, r9, r3
   19ca0:	cmp	r1, r0
   19ca4:	bcc	19c8c <__assert_fail@plt+0x8588>
   19ca8:	mov	ip, r3
   19cac:	mov	r6, #0
   19cb0:	ldr	r2, [sp, #40]	; 0x28
   19cb4:	b	197d8 <__assert_fail@plt+0x80d4>
   19cb8:	mov	r3, #1
   19cbc:	mov	r2, #0
   19cc0:	mov	r4, r2
   19cc4:	str	r3, [sp, #36]	; 0x24
   19cc8:	str	r3, [sp, #40]	; 0x28
   19ccc:	str	r3, [sp, #44]	; 0x2c
   19cd0:	str	r2, [sp, #48]	; 0x30
   19cd4:	str	r3, [sp, #56]	; 0x38
   19cd8:	movw	r3, #57180	; 0xdf5c
   19cdc:	movt	r3, #1
   19ce0:	str	r3, [sp, #60]	; 0x3c
   19ce4:	str	r2, [sp, #68]	; 0x44
   19ce8:	str	r2, [sp, #72]	; 0x48
   19cec:	b	1874c <__assert_fail@plt+0x7048>
   19cf0:	mov	r2, r3
   19cf4:	ldr	r3, [sp, #60]	; 0x3c
   19cf8:	cmp	r3, #0
   19cfc:	moveq	r2, #0
   19d00:	andne	r2, r2, #1
   19d04:	cmp	r2, #0
   19d08:	beq	19d34 <__assert_fail@plt+0x8630>
   19d0c:	mov	r2, r3
   19d10:	ldrb	r3, [r3]
   19d14:	cmp	r3, #0
   19d18:	beq	19d34 <__assert_fail@plt+0x8630>
   19d1c:	cmp	sl, r4
   19d20:	strbhi	r3, [fp, r4]
   19d24:	add	r4, r4, #1
   19d28:	ldrb	r3, [r2, #1]!
   19d2c:	cmp	r3, #0
   19d30:	bne	19d1c <__assert_fail@plt+0x8618>
   19d34:	cmp	sl, r4
   19d38:	movhi	r3, #0
   19d3c:	strbhi	r3, [fp, r4]
   19d40:	b	18f54 <__assert_fail@plt+0x7850>
   19d44:	str	fp, [sp, #152]	; 0x98
   19d48:	mov	fp, r8
   19d4c:	ldr	r8, [sp, #152]	; 0x98
   19d50:	b	18f1c <__assert_fail@plt+0x7818>
   19d54:	mov	ip, r3
   19d58:	ldr	r2, [sp, #40]	; 0x28
   19d5c:	b	197d8 <__assert_fail@plt+0x80d4>
   19d60:	str	fp, [sp, #152]	; 0x98
   19d64:	mov	fp, r8
   19d68:	ldr	r8, [sp, #152]	; 0x98
   19d6c:	sub	r3, r8, #2
   19d70:	clz	r3, r3
   19d74:	lsr	r3, r3, #5
   19d78:	str	r3, [sp, #40]	; 0x28
   19d7c:	b	18f10 <__assert_fail@plt+0x780c>
   19d80:	mov	ip, #5
   19d84:	ldr	r3, [sp, #28]
   19d88:	str	ip, [sp]
   19d8c:	ldr	r2, [sp, #156]	; 0x9c
   19d90:	ldr	ip, [sp, #164]	; 0xa4
   19d94:	ldr	r0, [sp, #160]	; 0xa0
   19d98:	str	r2, [sp, #4]
   19d9c:	ldr	r2, [sp, #32]
   19da0:	ldr	r1, [sp, #72]	; 0x48
   19da4:	str	ip, [sp, #12]
   19da8:	ldr	ip, [sp, #168]	; 0xa8
   19dac:	str	r0, [sp, #8]
   19db0:	mov	r0, fp
   19db4:	str	ip, [sp, #16]
   19db8:	bl	18664 <__assert_fail@plt+0x6f60>
   19dbc:	mov	r4, r0
   19dc0:	b	18f54 <__assert_fail@plt+0x7850>
   19dc4:	mov	r8, #2
   19dc8:	b	18f10 <__assert_fail@plt+0x780c>
   19dcc:	ldr	r2, [sp, #40]	; 0x28
   19dd0:	b	197d8 <__assert_fail@plt+0x80d4>
   19dd4:	mov	r3, #0
   19dd8:	mov	r2, #1
   19ddc:	mov	r4, r3
   19de0:	strd	r2, [sp, #36]	; 0x24
   19de4:	strd	r2, [sp, #44]	; 0x2c
   19de8:	str	r2, [sp, #56]	; 0x38
   19dec:	str	r3, [sp, #68]	; 0x44
   19df0:	str	r3, [sp, #72]	; 0x48
   19df4:	movw	r3, #61756	; 0xf13c
   19df8:	movt	r3, #1
   19dfc:	str	r3, [sp, #60]	; 0x3c
   19e00:	b	1874c <__assert_fail@plt+0x7048>
   19e04:	mov	r3, #0
   19e08:	mov	r1, #1
   19e0c:	mov	r2, r3
   19e10:	str	r1, [sp, #36]	; 0x24
   19e14:	str	r3, [sp, #48]	; 0x30
   19e18:	str	sl, [sp, #72]	; 0x48
   19e1c:	b	18d54 <__assert_fail@plt+0x7650>
   19e20:	bl	116e0 <abort@plt>
   19e24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19e28:	mov	r4, r0
   19e2c:	mov	r5, r3
   19e30:	strd	r6, [sp, #8]
   19e34:	movw	r7, #732	; 0x2dc
   19e38:	movt	r7, #3
   19e3c:	strd	r8, [sp, #16]
   19e40:	strd	sl, [sp, #24]
   19e44:	mov	sl, r1
   19e48:	mov	fp, r2
   19e4c:	str	lr, [sp, #32]
   19e50:	sub	sp, sp, #60	; 0x3c
   19e54:	bl	1156c <__errno_location@plt>
   19e58:	mov	r8, r0
   19e5c:	cmn	r4, #-2147483647	; 0x80000001
   19e60:	ldr	r6, [r7]
   19e64:	movne	r0, #0
   19e68:	moveq	r0, #1
   19e6c:	ldr	r3, [r8]
   19e70:	orrs	r0, r0, r4, lsr #31
   19e74:	str	r3, [sp, #28]
   19e78:	bne	1a008 <__assert_fail@plt+0x8904>
   19e7c:	ldr	r3, [r7, #4]
   19e80:	cmp	r3, r4
   19e84:	bgt	19ee4 <__assert_fail@plt+0x87e0>
   19e88:	add	r1, r7, #8
   19e8c:	sub	r2, r4, r3
   19e90:	str	r3, [sp, #52]	; 0x34
   19e94:	cmp	r6, r1
   19e98:	add	r2, r2, #1
   19e9c:	beq	19fe0 <__assert_fail@plt+0x88dc>
   19ea0:	mov	r1, #8
   19ea4:	mov	r0, r6
   19ea8:	mvn	r3, #-2147483648	; 0x80000000
   19eac:	str	r1, [sp]
   19eb0:	add	r1, sp, #52	; 0x34
   19eb4:	bl	1b0f0 <__assert_fail@plt+0x99ec>
   19eb8:	mov	r6, r0
   19ebc:	str	r0, [r7]
   19ec0:	ldr	r0, [r7, #4]
   19ec4:	mov	r1, #0
   19ec8:	ldr	r2, [sp, #52]	; 0x34
   19ecc:	sub	r2, r2, r0
   19ed0:	add	r0, r6, r0, lsl #3
   19ed4:	lsl	r2, r2, #3
   19ed8:	bl	11590 <memset@plt>
   19edc:	ldr	r3, [sp, #52]	; 0x34
   19ee0:	str	r3, [r7, #4]
   19ee4:	ldr	r1, [r5, #4]
   19ee8:	add	r0, r6, r4, lsl #3
   19eec:	add	ip, r5, #8
   19ef0:	mov	r3, fp
   19ef4:	mov	r2, sl
   19ef8:	ldr	r7, [r0, #4]
   19efc:	str	r0, [sp, #36]	; 0x24
   19f00:	str	ip, [sp, #40]	; 0x28
   19f04:	orr	r0, r1, #1
   19f08:	ldr	r9, [r6, r4, lsl #3]
   19f0c:	str	ip, [sp, #8]
   19f10:	ldr	lr, [r5, #44]	; 0x2c
   19f14:	str	r0, [sp, #4]
   19f18:	ldr	ip, [r5]
   19f1c:	mov	r1, r9
   19f20:	str	ip, [sp, #32]
   19f24:	ldr	ip, [r5, #40]	; 0x28
   19f28:	str	ip, [sp, #12]
   19f2c:	ldr	ip, [sp, #32]
   19f30:	str	lr, [sp, #16]
   19f34:	str	r0, [sp, #44]	; 0x2c
   19f38:	mov	r0, r7
   19f3c:	str	ip, [sp]
   19f40:	bl	18664 <__assert_fail@plt+0x6f60>
   19f44:	cmp	r9, r0
   19f48:	bhi	19fb8 <__assert_fail@plt+0x88b4>
   19f4c:	add	r9, r0, #1
   19f50:	movw	r3, #964	; 0x3c4
   19f54:	movt	r3, #3
   19f58:	cmp	r7, r3
   19f5c:	str	r9, [r6, r4, lsl #3]
   19f60:	beq	19f6c <__assert_fail@plt+0x8868>
   19f64:	mov	r0, r7
   19f68:	bl	15214 <__assert_fail@plt+0x3b10>
   19f6c:	mov	r0, r9
   19f70:	bl	1af40 <__assert_fail@plt+0x983c>
   19f74:	ldr	ip, [r5]
   19f78:	mov	r3, fp
   19f7c:	mov	r2, sl
   19f80:	mov	r1, r9
   19f84:	mov	r7, r0
   19f88:	ldr	lr, [sp, #36]	; 0x24
   19f8c:	ldr	r4, [r5, #40]	; 0x28
   19f90:	str	r0, [lr, #4]
   19f94:	ldr	lr, [r5, #44]	; 0x2c
   19f98:	str	ip, [sp]
   19f9c:	ldr	ip, [sp, #44]	; 0x2c
   19fa0:	str	ip, [sp, #4]
   19fa4:	ldr	ip, [sp, #40]	; 0x28
   19fa8:	str	r4, [sp, #12]
   19fac:	str	lr, [sp, #16]
   19fb0:	str	ip, [sp, #8]
   19fb4:	bl	18664 <__assert_fail@plt+0x6f60>
   19fb8:	ldr	r3, [sp, #28]
   19fbc:	mov	r0, r7
   19fc0:	str	r3, [r8]
   19fc4:	add	sp, sp, #60	; 0x3c
   19fc8:	ldrd	r4, [sp]
   19fcc:	ldrd	r6, [sp, #8]
   19fd0:	ldrd	r8, [sp, #16]
   19fd4:	ldrd	sl, [sp, #24]
   19fd8:	add	sp, sp, #32
   19fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   19fe0:	mov	r1, #8
   19fe4:	mvn	r3, #-2147483648	; 0x80000000
   19fe8:	str	r1, [sp]
   19fec:	add	r1, sp, #52	; 0x34
   19ff0:	bl	1b0f0 <__assert_fail@plt+0x99ec>
   19ff4:	ldrd	r2, [r7, #8]
   19ff8:	mov	r6, r0
   19ffc:	str	r0, [r7]
   1a000:	strd	r2, [r0]
   1a004:	b	19ec0 <__assert_fail@plt+0x87bc>
   1a008:	bl	116e0 <abort@plt>
   1a00c:	strd	r4, [sp, #-16]!
   1a010:	mov	r5, r0
   1a014:	str	r6, [sp, #8]
   1a018:	str	lr, [sp, #12]
   1a01c:	bl	1156c <__errno_location@plt>
   1a020:	mov	r4, r0
   1a024:	cmp	r5, #0
   1a028:	ldr	r0, [pc, #32]	; 1a050 <__assert_fail@plt+0x894c>
   1a02c:	mov	r1, #48	; 0x30
   1a030:	movne	r0, r5
   1a034:	ldr	r6, [r4]
   1a038:	bl	1b268 <__assert_fail@plt+0x9b64>
   1a03c:	str	r6, [r4]
   1a040:	ldrd	r4, [sp]
   1a044:	ldr	r6, [sp, #8]
   1a048:	add	sp, sp, #12
   1a04c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a050:	andeq	r0, r3, r4, asr #9
   1a054:	ldr	r3, [pc, #12]	; 1a068 <__assert_fail@plt+0x8964>
   1a058:	cmp	r0, #0
   1a05c:	moveq	r0, r3
   1a060:	ldr	r0, [r0]
   1a064:	bx	lr
   1a068:	andeq	r0, r3, r4, asr #9
   1a06c:	ldr	r3, [pc, #12]	; 1a080 <__assert_fail@plt+0x897c>
   1a070:	cmp	r0, #0
   1a074:	moveq	r0, r3
   1a078:	str	r1, [r0]
   1a07c:	bx	lr
   1a080:	andeq	r0, r3, r4, asr #9
   1a084:	ldr	r3, [pc, #52]	; 1a0c0 <__assert_fail@plt+0x89bc>
   1a088:	cmp	r0, #0
   1a08c:	push	{lr}		; (str lr, [sp, #-4]!)
   1a090:	lsr	lr, r1, #5
   1a094:	and	r1, r1, #31
   1a098:	moveq	r0, r3
   1a09c:	add	r3, r0, #8
   1a0a0:	ldr	ip, [r3, lr, lsl #2]
   1a0a4:	lsr	r0, ip, r1
   1a0a8:	eor	r2, r2, r0
   1a0ac:	and	r0, r0, #1
   1a0b0:	and	r2, r2, #1
   1a0b4:	eor	r1, ip, r2, lsl r1
   1a0b8:	str	r1, [r3, lr, lsl #2]
   1a0bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0c0:	andeq	r0, r3, r4, asr #9
   1a0c4:	ldr	r3, [pc, #16]	; 1a0dc <__assert_fail@plt+0x89d8>
   1a0c8:	cmp	r0, #0
   1a0cc:	movne	r3, r0
   1a0d0:	ldr	r0, [r3, #4]
   1a0d4:	str	r1, [r3, #4]
   1a0d8:	bx	lr
   1a0dc:	andeq	r0, r3, r4, asr #9
   1a0e0:	ldr	r3, [pc, #48]	; 1a118 <__assert_fail@plt+0x8a14>
   1a0e4:	cmp	r0, #0
   1a0e8:	mov	ip, #10
   1a0ec:	moveq	r0, r3
   1a0f0:	cmp	r2, #0
   1a0f4:	cmpne	r1, #0
   1a0f8:	str	ip, [r0]
   1a0fc:	beq	1a10c <__assert_fail@plt+0x8a08>
   1a100:	str	r1, [r0, #40]	; 0x28
   1a104:	str	r2, [r0, #44]	; 0x2c
   1a108:	bx	lr
   1a10c:	str	r4, [sp, #-8]!
   1a110:	str	lr, [sp, #4]
   1a114:	bl	116e0 <abort@plt>
   1a118:	andeq	r0, r3, r4, asr #9
   1a11c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a120:	strd	r6, [sp, #8]
   1a124:	mov	r7, r0
   1a128:	mov	r6, r1
   1a12c:	strd	r8, [sp, #16]
   1a130:	mov	r8, r2
   1a134:	mov	r9, r3
   1a138:	str	lr, [sp, #24]
   1a13c:	sub	sp, sp, #28
   1a140:	ldr	r4, [sp, #56]	; 0x38
   1a144:	ldr	ip, [pc, #104]	; 1a1b4 <__assert_fail@plt+0x8ab0>
   1a148:	cmp	r4, #0
   1a14c:	moveq	r4, ip
   1a150:	bl	1156c <__errno_location@plt>
   1a154:	ldr	ip, [r4, #44]	; 0x2c
   1a158:	mov	r5, r0
   1a15c:	mov	r1, r6
   1a160:	add	lr, r4, #8
   1a164:	mov	r3, r9
   1a168:	ldr	r6, [r5]
   1a16c:	mov	r2, r8
   1a170:	mov	r0, r7
   1a174:	str	ip, [sp, #16]
   1a178:	ldr	ip, [r4, #40]	; 0x28
   1a17c:	str	lr, [sp, #8]
   1a180:	str	ip, [sp, #12]
   1a184:	ldr	ip, [r4, #4]
   1a188:	str	ip, [sp, #4]
   1a18c:	ldr	ip, [r4]
   1a190:	str	ip, [sp]
   1a194:	bl	18664 <__assert_fail@plt+0x6f60>
   1a198:	str	r6, [r5]
   1a19c:	add	sp, sp, #28
   1a1a0:	ldrd	r4, [sp]
   1a1a4:	ldrd	r6, [sp, #8]
   1a1a8:	ldrd	r8, [sp, #16]
   1a1ac:	add	sp, sp, #24
   1a1b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1b4:	andeq	r0, r3, r4, asr #9
   1a1b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a1bc:	cmp	r3, #0
   1a1c0:	ldr	r4, [pc, #220]	; 1a2a4 <__assert_fail@plt+0x8ba0>
   1a1c4:	movne	r4, r3
   1a1c8:	strd	r6, [sp, #8]
   1a1cc:	mov	r6, r2
   1a1d0:	strd	r8, [sp, #16]
   1a1d4:	mov	r9, r0
   1a1d8:	strd	sl, [sp, #24]
   1a1dc:	mov	sl, r1
   1a1e0:	str	lr, [sp, #32]
   1a1e4:	sub	sp, sp, #44	; 0x2c
   1a1e8:	bl	1156c <__errno_location@plt>
   1a1ec:	ldr	r5, [r4, #4]
   1a1f0:	mov	r7, r0
   1a1f4:	mov	r1, #0
   1a1f8:	add	r8, r4, #8
   1a1fc:	mov	r3, sl
   1a200:	ldr	ip, [r4, #44]	; 0x2c
   1a204:	mov	r2, r9
   1a208:	mov	r0, r1
   1a20c:	ldr	lr, [r7]
   1a210:	cmp	r6, r1
   1a214:	orreq	r5, r5, #1
   1a218:	str	ip, [sp, #16]
   1a21c:	ldr	ip, [r4, #40]	; 0x28
   1a220:	stmib	sp, {r5, r8, ip}
   1a224:	ldr	ip, [r4]
   1a228:	str	lr, [sp, #28]
   1a22c:	str	ip, [sp]
   1a230:	bl	18664 <__assert_fail@plt+0x6f60>
   1a234:	add	r1, r0, #1
   1a238:	mov	fp, r0
   1a23c:	mov	r0, r1
   1a240:	str	r1, [sp, #36]	; 0x24
   1a244:	bl	1af40 <__assert_fail@plt+0x983c>
   1a248:	ldr	ip, [r4, #44]	; 0x2c
   1a24c:	mov	r3, sl
   1a250:	mov	r2, r9
   1a254:	ldr	r1, [sp, #36]	; 0x24
   1a258:	str	ip, [sp, #16]
   1a25c:	ldr	ip, [r4, #40]	; 0x28
   1a260:	str	r0, [sp, #32]
   1a264:	stmib	sp, {r5, r8, ip}
   1a268:	ldr	ip, [r4]
   1a26c:	str	ip, [sp]
   1a270:	bl	18664 <__assert_fail@plt+0x6f60>
   1a274:	ldr	lr, [sp, #28]
   1a278:	cmp	r6, #0
   1a27c:	ldr	r0, [sp, #32]
   1a280:	str	lr, [r7]
   1a284:	strne	fp, [r6]
   1a288:	add	sp, sp, #44	; 0x2c
   1a28c:	ldrd	r4, [sp]
   1a290:	ldrd	r6, [sp, #8]
   1a294:	ldrd	r8, [sp, #16]
   1a298:	ldrd	sl, [sp, #24]
   1a29c:	add	sp, sp, #32
   1a2a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2a4:	andeq	r0, r3, r4, asr #9
   1a2a8:	mov	r3, r2
   1a2ac:	mov	r2, #0
   1a2b0:	b	1a1b8 <__assert_fail@plt+0x8ab4>
   1a2b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a2b8:	movw	r5, #732	; 0x2dc
   1a2bc:	movt	r5, #3
   1a2c0:	ldr	r3, [r5, #4]
   1a2c4:	strd	r6, [sp, #8]
   1a2c8:	str	r8, [sp, #16]
   1a2cc:	str	lr, [sp, #20]
   1a2d0:	ldr	r7, [r5]
   1a2d4:	cmp	r3, #1
   1a2d8:	ble	1a2fc <__assert_fail@plt+0x8bf8>
   1a2dc:	mov	r4, #1
   1a2e0:	add	r6, r7, #4
   1a2e4:	ldr	r0, [r6, r4, lsl #3]
   1a2e8:	add	r4, r4, #1
   1a2ec:	bl	15214 <__assert_fail@plt+0x3b10>
   1a2f0:	ldr	r3, [r5, #4]
   1a2f4:	cmp	r3, r4
   1a2f8:	bgt	1a2e4 <__assert_fail@plt+0x8be0>
   1a2fc:	ldr	r0, [r7, #4]
   1a300:	movw	r4, #964	; 0x3c4
   1a304:	movt	r4, #3
   1a308:	cmp	r0, r4
   1a30c:	beq	1a320 <__assert_fail@plt+0x8c1c>
   1a310:	bl	15214 <__assert_fail@plt+0x3b10>
   1a314:	mov	r3, #256	; 0x100
   1a318:	str	r3, [r5, #8]
   1a31c:	str	r4, [r5, #12]
   1a320:	ldr	r4, [pc, #44]	; 1a354 <__assert_fail@plt+0x8c50>
   1a324:	cmp	r7, r4
   1a328:	beq	1a338 <__assert_fail@plt+0x8c34>
   1a32c:	mov	r0, r7
   1a330:	bl	15214 <__assert_fail@plt+0x3b10>
   1a334:	str	r4, [r5]
   1a338:	mov	r3, #1
   1a33c:	ldrd	r6, [sp, #8]
   1a340:	str	r3, [r5, #4]
   1a344:	ldrd	r4, [sp]
   1a348:	ldr	r8, [sp, #16]
   1a34c:	add	sp, sp, #20
   1a350:	pop	{pc}		; (ldr pc, [sp], #4)
   1a354:	andeq	r0, r3, r4, ror #5
   1a358:	ldr	r3, [pc, #4]	; 1a364 <__assert_fail@plt+0x8c60>
   1a35c:	mvn	r2, #0
   1a360:	b	19e24 <__assert_fail@plt+0x8720>
   1a364:	andeq	r0, r3, r4, asr #9
   1a368:	ldr	r3, [pc]	; 1a370 <__assert_fail@plt+0x8c6c>
   1a36c:	b	19e24 <__assert_fail@plt+0x8720>
   1a370:	andeq	r0, r3, r4, asr #9
   1a374:	mov	r1, r0
   1a378:	ldr	r3, [pc, #8]	; 1a388 <__assert_fail@plt+0x8c84>
   1a37c:	mvn	r2, #0
   1a380:	mov	r0, #0
   1a384:	b	19e24 <__assert_fail@plt+0x8720>
   1a388:	andeq	r0, r3, r4, asr #9
   1a38c:	mov	r2, r1
   1a390:	ldr	r3, [pc, #8]	; 1a3a0 <__assert_fail@plt+0x8c9c>
   1a394:	mov	r1, r0
   1a398:	mov	r0, #0
   1a39c:	b	19e24 <__assert_fail@plt+0x8720>
   1a3a0:	andeq	r0, r3, r4, asr #9
   1a3a4:	strd	r4, [sp, #-12]!
   1a3a8:	mov	r5, r2
   1a3ac:	mov	r4, r0
   1a3b0:	str	lr, [sp, #8]
   1a3b4:	sub	sp, sp, #52	; 0x34
   1a3b8:	mov	r0, sp
   1a3bc:	bl	184c0 <__assert_fail@plt+0x6dbc>
   1a3c0:	mov	r3, sp
   1a3c4:	mov	r1, r5
   1a3c8:	mov	r0, r4
   1a3cc:	mvn	r2, #0
   1a3d0:	bl	19e24 <__assert_fail@plt+0x8720>
   1a3d4:	add	sp, sp, #52	; 0x34
   1a3d8:	ldrd	r4, [sp]
   1a3dc:	add	sp, sp, #8
   1a3e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3e4:	strd	r4, [sp, #-16]!
   1a3e8:	mov	r5, r2
   1a3ec:	mov	r4, r0
   1a3f0:	str	r6, [sp, #8]
   1a3f4:	mov	r6, r3
   1a3f8:	str	lr, [sp, #12]
   1a3fc:	sub	sp, sp, #48	; 0x30
   1a400:	mov	r0, sp
   1a404:	bl	184c0 <__assert_fail@plt+0x6dbc>
   1a408:	mov	r3, sp
   1a40c:	mov	r2, r6
   1a410:	mov	r1, r5
   1a414:	mov	r0, r4
   1a418:	bl	19e24 <__assert_fail@plt+0x8720>
   1a41c:	add	sp, sp, #48	; 0x30
   1a420:	ldrd	r4, [sp]
   1a424:	ldr	r6, [sp, #8]
   1a428:	add	sp, sp, #12
   1a42c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a430:	mov	r2, r1
   1a434:	mov	r1, r0
   1a438:	mov	r0, #0
   1a43c:	b	1a3a4 <__assert_fail@plt+0x8ca0>
   1a440:	mov	r3, r2
   1a444:	mov	r2, r1
   1a448:	mov	r1, r0
   1a44c:	mov	r0, #0
   1a450:	b	1a3e4 <__assert_fail@plt+0x8ce0>
   1a454:	ldr	ip, [pc, #140]	; 1a4e8 <__assert_fail@plt+0x8de4>
   1a458:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a45c:	ldrd	r4, [ip]
   1a460:	strd	r6, [sp, #8]
   1a464:	ldrd	r6, [ip, #8]
   1a468:	strd	r8, [sp, #16]
   1a46c:	lsr	r9, r2, #5
   1a470:	str	lr, [sp, #24]
   1a474:	sub	sp, sp, #52	; 0x34
   1a478:	and	lr, r2, #31
   1a47c:	add	r8, sp, #8
   1a480:	mov	r2, r1
   1a484:	strd	r4, [sp]
   1a488:	mov	r1, r0
   1a48c:	mov	r3, sp
   1a490:	strd	r6, [sp, #8]
   1a494:	mov	r0, #0
   1a498:	ldrd	r4, [ip, #16]
   1a49c:	ldrd	r6, [ip, #24]
   1a4a0:	strd	r4, [sp, #16]
   1a4a4:	ldrd	r4, [ip, #32]
   1a4a8:	strd	r6, [sp, #24]
   1a4ac:	ldrd	r6, [ip, #40]	; 0x28
   1a4b0:	strd	r4, [sp, #32]
   1a4b4:	strd	r6, [sp, #40]	; 0x28
   1a4b8:	ldr	ip, [r8, r9, lsl #2]
   1a4bc:	mvn	r4, ip, lsr lr
   1a4c0:	and	r4, r4, #1
   1a4c4:	eor	lr, ip, r4, lsl lr
   1a4c8:	str	lr, [r8, r9, lsl #2]
   1a4cc:	bl	19e24 <__assert_fail@plt+0x8720>
   1a4d0:	add	sp, sp, #52	; 0x34
   1a4d4:	ldrd	r4, [sp]
   1a4d8:	ldrd	r6, [sp, #8]
   1a4dc:	ldrd	r8, [sp, #16]
   1a4e0:	add	sp, sp, #24
   1a4e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4e8:	andeq	r0, r3, r4, asr #9
   1a4ec:	mov	r2, r1
   1a4f0:	mvn	r1, #0
   1a4f4:	b	1a454 <__assert_fail@plt+0x8d50>
   1a4f8:	mov	r2, #58	; 0x3a
   1a4fc:	mvn	r1, #0
   1a500:	b	1a454 <__assert_fail@plt+0x8d50>
   1a504:	mov	r2, #58	; 0x3a
   1a508:	b	1a454 <__assert_fail@plt+0x8d50>
   1a50c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a510:	strd	r6, [sp, #8]
   1a514:	mov	r6, r0
   1a518:	mov	r7, r2
   1a51c:	str	lr, [sp, #16]
   1a520:	sub	sp, sp, #100	; 0x64
   1a524:	mov	r0, sp
   1a528:	bl	184c0 <__assert_fail@plt+0x6dbc>
   1a52c:	ldrd	r4, [sp, #8]
   1a530:	mov	r1, r7
   1a534:	mov	r0, r6
   1a538:	add	r3, sp, #48	; 0x30
   1a53c:	mvn	r2, #0
   1a540:	ldrd	r6, [sp]
   1a544:	strd	r4, [sp, #56]	; 0x38
   1a548:	ldrd	r4, [sp, #16]
   1a54c:	strd	r6, [sp, #48]	; 0x30
   1a550:	ldrd	r6, [sp, #32]
   1a554:	ldr	lr, [sp, #60]	; 0x3c
   1a558:	strd	r4, [sp, #64]	; 0x40
   1a55c:	ldrd	r4, [sp, #24]
   1a560:	mvn	ip, lr
   1a564:	and	ip, ip, #67108864	; 0x4000000
   1a568:	strd	r4, [sp, #72]	; 0x48
   1a56c:	eor	ip, ip, lr
   1a570:	ldrd	r4, [sp, #40]	; 0x28
   1a574:	str	ip, [sp, #60]	; 0x3c
   1a578:	strd	r6, [sp, #80]	; 0x50
   1a57c:	strd	r4, [sp, #88]	; 0x58
   1a580:	bl	19e24 <__assert_fail@plt+0x8720>
   1a584:	add	sp, sp, #100	; 0x64
   1a588:	ldrd	r4, [sp]
   1a58c:	ldrd	r6, [sp, #8]
   1a590:	add	sp, sp, #16
   1a594:	pop	{pc}		; (ldr pc, [sp], #4)
   1a598:	ldr	ip, [pc, #156]	; 1a63c <__assert_fail@plt+0x8f38>
   1a59c:	cmp	r2, #0
   1a5a0:	cmpne	r1, #0
   1a5a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a5a8:	strd	r6, [sp, #8]
   1a5ac:	mov	r6, r2
   1a5b0:	str	r8, [sp, #16]
   1a5b4:	mov	r8, r3
   1a5b8:	strd	sl, [sp, #20]
   1a5bc:	ldrd	r4, [ip]
   1a5c0:	str	lr, [sp, #28]
   1a5c4:	sub	sp, sp, #48	; 0x30
   1a5c8:	mov	lr, #10
   1a5cc:	ldrd	r2, [ip, #8]
   1a5d0:	ldrd	sl, [ip, #16]
   1a5d4:	strd	r4, [sp]
   1a5d8:	ldrd	r4, [ip, #32]
   1a5dc:	str	lr, [sp]
   1a5e0:	strd	r2, [sp, #8]
   1a5e4:	strd	sl, [sp, #16]
   1a5e8:	ldrd	r2, [ip, #24]
   1a5ec:	ldrd	sl, [ip, #40]	; 0x28
   1a5f0:	strd	r2, [sp, #24]
   1a5f4:	strd	r4, [sp, #32]
   1a5f8:	strd	sl, [sp, #40]	; 0x28
   1a5fc:	beq	1a638 <__assert_fail@plt+0x8f34>
   1a600:	ldr	r2, [sp, #80]	; 0x50
   1a604:	mov	r7, r1
   1a608:	mov	r3, sp
   1a60c:	mov	r1, r8
   1a610:	str	r7, [sp, #40]	; 0x28
   1a614:	str	r6, [sp, #44]	; 0x2c
   1a618:	bl	19e24 <__assert_fail@plt+0x8720>
   1a61c:	add	sp, sp, #48	; 0x30
   1a620:	ldrd	r4, [sp]
   1a624:	ldrd	r6, [sp, #8]
   1a628:	ldr	r8, [sp, #16]
   1a62c:	ldrd	sl, [sp, #20]
   1a630:	add	sp, sp, #28
   1a634:	pop	{pc}		; (ldr pc, [sp], #4)
   1a638:	bl	116e0 <abort@plt>
   1a63c:	andeq	r0, r3, r4, asr #9
   1a640:	mvn	ip, #0
   1a644:	push	{lr}		; (str lr, [sp, #-4]!)
   1a648:	sub	sp, sp, #12
   1a64c:	str	ip, [sp]
   1a650:	bl	1a598 <__assert_fail@plt+0x8e94>
   1a654:	add	sp, sp, #12
   1a658:	pop	{pc}		; (ldr pc, [sp], #4)
   1a65c:	mvn	ip, #0
   1a660:	push	{lr}		; (str lr, [sp, #-4]!)
   1a664:	sub	sp, sp, #12
   1a668:	mov	r3, r2
   1a66c:	mov	r2, r1
   1a670:	mov	r1, r0
   1a674:	mov	r0, #0
   1a678:	str	ip, [sp]
   1a67c:	bl	1a598 <__assert_fail@plt+0x8e94>
   1a680:	add	sp, sp, #12
   1a684:	pop	{pc}		; (ldr pc, [sp], #4)
   1a688:	push	{lr}		; (str lr, [sp, #-4]!)
   1a68c:	sub	sp, sp, #12
   1a690:	str	r3, [sp]
   1a694:	mov	r3, r2
   1a698:	mov	r2, r1
   1a69c:	mov	r1, r0
   1a6a0:	mov	r0, #0
   1a6a4:	bl	1a598 <__assert_fail@plt+0x8e94>
   1a6a8:	add	sp, sp, #12
   1a6ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6b0:	ldr	r3, [pc]	; 1a6b8 <__assert_fail@plt+0x8fb4>
   1a6b4:	b	19e24 <__assert_fail@plt+0x8720>
   1a6b8:	andeq	r0, r3, ip, ror #5
   1a6bc:	mov	r2, r1
   1a6c0:	ldr	r3, [pc, #8]	; 1a6d0 <__assert_fail@plt+0x8fcc>
   1a6c4:	mov	r1, r0
   1a6c8:	mov	r0, #0
   1a6cc:	b	19e24 <__assert_fail@plt+0x8720>
   1a6d0:	andeq	r0, r3, ip, ror #5
   1a6d4:	ldr	r3, [pc, #4]	; 1a6e0 <__assert_fail@plt+0x8fdc>
   1a6d8:	mvn	r2, #0
   1a6dc:	b	19e24 <__assert_fail@plt+0x8720>
   1a6e0:	andeq	r0, r3, ip, ror #5
   1a6e4:	mov	r1, r0
   1a6e8:	ldr	r3, [pc, #8]	; 1a6f8 <__assert_fail@plt+0x8ff4>
   1a6ec:	mvn	r2, #0
   1a6f0:	mov	r0, #0
   1a6f4:	b	19e24 <__assert_fail@plt+0x8720>
   1a6f8:	andeq	r0, r3, ip, ror #5
   1a6fc:	strd	r4, [sp, #-16]!
   1a700:	mov	r5, r0
   1a704:	mov	r4, #0
   1a708:	movw	r0, #60912	; 0xedf0
   1a70c:	movt	r0, #1
   1a710:	str	r6, [sp, #8]
   1a714:	mov	r1, #524288	; 0x80000
   1a718:	str	lr, [sp, #12]
   1a71c:	str	r4, [r5, #4]
   1a720:	bl	1d234 <__assert_fail@plt+0xbb30>
   1a724:	cmp	r0, r4
   1a728:	str	r0, [r5]
   1a72c:	movge	r0, r4
   1a730:	blt	1a744 <__assert_fail@plt+0x9040>
   1a734:	ldrd	r4, [sp]
   1a738:	ldr	r6, [sp, #8]
   1a73c:	add	sp, sp, #12
   1a740:	pop	{pc}		; (ldr pc, [sp], #4)
   1a744:	mov	r1, r4
   1a748:	mov	r0, r4
   1a74c:	bl	11524 <getcwd@plt>
   1a750:	clz	r4, r0
   1a754:	str	r0, [r5, #4]
   1a758:	lsr	r4, r4, #5
   1a75c:	ldr	r6, [sp, #8]
   1a760:	rsb	r0, r4, #0
   1a764:	ldrd	r4, [sp]
   1a768:	add	sp, sp, #12
   1a76c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a770:	ldr	r3, [r0]
   1a774:	cmp	r3, #0
   1a778:	blt	1a784 <__assert_fail@plt+0x9080>
   1a77c:	mov	r0, r3
   1a780:	b	11674 <fchdir@plt>
   1a784:	ldr	r0, [r0, #4]
   1a788:	b	1ce60 <__assert_fail@plt+0xb75c>
   1a78c:	str	r4, [sp, #-8]!
   1a790:	mov	r4, r0
   1a794:	ldr	r0, [r0]
   1a798:	str	lr, [sp, #4]
   1a79c:	cmp	r0, #0
   1a7a0:	blt	1a7a8 <__assert_fail@plt+0x90a4>
   1a7a4:	bl	116ec <close@plt>
   1a7a8:	ldr	r0, [r4, #4]
   1a7ac:	ldr	r4, [sp]
   1a7b0:	ldr	lr, [sp, #4]
   1a7b4:	add	sp, sp, #8
   1a7b8:	b	15214 <__assert_fail@plt+0x3b10>
   1a7bc:	strd	r4, [sp, #-16]!
   1a7c0:	ldr	r4, [r0], #8
   1a7c4:	str	r6, [sp, #8]
   1a7c8:	str	lr, [sp, #12]
   1a7cc:	cmp	r4, r0
   1a7d0:	beq	1a7fc <__assert_fail@plt+0x90f8>
   1a7d4:	mov	r0, r4
   1a7d8:	bl	1bedc <__assert_fail@plt+0xa7d8>
   1a7dc:	cmp	r0, #0
   1a7e0:	movne	r3, r0
   1a7e4:	moveq	r3, r4
   1a7e8:	ldrd	r4, [sp]
   1a7ec:	mov	r0, r3
   1a7f0:	ldr	r6, [sp, #8]
   1a7f4:	add	sp, sp, #12
   1a7f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7fc:	mov	r0, r1
   1a800:	mov	r5, r1
   1a804:	bl	1bea0 <__assert_fail@plt+0xa79c>
   1a808:	subs	r3, r0, #0
   1a80c:	beq	1a7e8 <__assert_fail@plt+0x90e4>
   1a810:	mov	r2, r5
   1a814:	mov	r1, r4
   1a818:	ldrd	r4, [sp]
   1a81c:	ldr	r6, [sp, #8]
   1a820:	ldr	lr, [sp, #12]
   1a824:	add	sp, sp, #16
   1a828:	b	11374 <memcpy@plt>
   1a82c:	strd	r4, [sp, #-16]!
   1a830:	mov	r5, r0
   1a834:	mov	r4, r0
   1a838:	ldr	r3, [r0, #4]
   1a83c:	ldr	r0, [r5], #8
   1a840:	str	r6, [sp, #8]
   1a844:	str	lr, [sp, #12]
   1a848:	lsl	r6, r3, #1
   1a84c:	cmp	r0, r5
   1a850:	beq	1a85c <__assert_fail@plt+0x9158>
   1a854:	bl	15214 <__assert_fail@plt+0x3b10>
   1a858:	ldr	r3, [r4, #4]
   1a85c:	cmp	r3, r6
   1a860:	bhi	1a88c <__assert_fail@plt+0x9188>
   1a864:	mov	r0, r6
   1a868:	bl	1bea0 <__assert_fail@plt+0xa79c>
   1a86c:	subs	r3, r0, #0
   1a870:	beq	1a898 <__assert_fail@plt+0x9194>
   1a874:	mov	r0, #1
   1a878:	stm	r4, {r3, r6}
   1a87c:	ldrd	r4, [sp]
   1a880:	ldr	r6, [sp, #8]
   1a884:	add	sp, sp, #12
   1a888:	pop	{pc}		; (ldr pc, [sp], #4)
   1a88c:	bl	1156c <__errno_location@plt>
   1a890:	mov	r3, #12
   1a894:	str	r3, [r0]
   1a898:	mov	r3, #1024	; 0x400
   1a89c:	mov	r0, #0
   1a8a0:	str	r5, [r4]
   1a8a4:	str	r3, [r4, #4]
   1a8a8:	b	1a87c <__assert_fail@plt+0x9178>
   1a8ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a8b0:	mov	r5, r0
   1a8b4:	mov	r4, r0
   1a8b8:	ldr	r3, [r0, #4]
   1a8bc:	strd	r6, [sp, #8]
   1a8c0:	ldr	r7, [r5], #8
   1a8c4:	str	r8, [sp, #16]
   1a8c8:	str	lr, [sp, #20]
   1a8cc:	lsl	r6, r3, #1
   1a8d0:	cmp	r7, r5
   1a8d4:	beq	1a918 <__assert_fail@plt+0x9214>
   1a8d8:	cmp	r3, r6
   1a8dc:	bhi	1a93c <__assert_fail@plt+0x9238>
   1a8e0:	mov	r0, r7
   1a8e4:	mov	r1, r6
   1a8e8:	bl	1bedc <__assert_fail@plt+0xa7d8>
   1a8ec:	subs	r8, r0, #0
   1a8f0:	ldreq	r7, [r4]
   1a8f4:	beq	1a948 <__assert_fail@plt+0x9244>
   1a8f8:	mov	r0, #1
   1a8fc:	str	r8, [r4]
   1a900:	str	r6, [r4, #4]
   1a904:	ldrd	r4, [sp]
   1a908:	ldrd	r6, [sp, #8]
   1a90c:	ldr	r8, [sp, #16]
   1a910:	add	sp, sp, #20
   1a914:	pop	{pc}		; (ldr pc, [sp], #4)
   1a918:	mov	r0, r6
   1a91c:	bl	1bea0 <__assert_fail@plt+0xa79c>
   1a920:	subs	r8, r0, #0
   1a924:	moveq	r0, r8
   1a928:	beq	1a904 <__assert_fail@plt+0x9200>
   1a92c:	mov	r1, r7
   1a930:	ldr	r2, [r4, #4]
   1a934:	bl	11374 <memcpy@plt>
   1a938:	b	1a8f8 <__assert_fail@plt+0x91f4>
   1a93c:	bl	1156c <__errno_location@plt>
   1a940:	mov	r3, #12
   1a944:	str	r3, [r0]
   1a948:	mov	r0, r7
   1a94c:	bl	15214 <__assert_fail@plt+0x3b10>
   1a950:	mov	r3, #1024	; 0x400
   1a954:	mov	r0, #0
   1a958:	str	r5, [r4]
   1a95c:	str	r3, [r4, #4]
   1a960:	b	1a904 <__assert_fail@plt+0x9200>
   1a964:	cmp	r1, #0
   1a968:	strd	r4, [sp, #-16]!
   1a96c:	mov	ip, r3
   1a970:	str	r6, [sp, #8]
   1a974:	mov	r4, r0
   1a978:	str	lr, [sp, #12]
   1a97c:	sub	sp, sp, #32
   1a980:	ldr	r5, [sp, #48]	; 0x30
   1a984:	ldr	r6, [sp, #52]	; 0x34
   1a988:	beq	1aacc <__assert_fail@plt+0x93c8>
   1a98c:	mov	r3, r1
   1a990:	mov	r1, #1
   1a994:	stm	sp, {r2, ip}
   1a998:	movw	r2, #61864	; 0xf1a8
   1a99c:	movt	r2, #1
   1a9a0:	bl	115c0 <__fprintf_chk@plt>
   1a9a4:	mov	r2, #5
   1a9a8:	movw	r1, #61884	; 0xf1bc
   1a9ac:	movt	r1, #1
   1a9b0:	mov	r0, #0
   1a9b4:	bl	113bc <dcgettext@plt>
   1a9b8:	movw	ip, #2022	; 0x7e6
   1a9bc:	mov	r3, r0
   1a9c0:	mov	r1, #1
   1a9c4:	movw	r2, #62612	; 0xf494
   1a9c8:	movt	r2, #1
   1a9cc:	mov	r0, r4
   1a9d0:	str	ip, [sp]
   1a9d4:	bl	115c0 <__fprintf_chk@plt>
   1a9d8:	mov	r1, r4
   1a9dc:	mov	r0, #10
   1a9e0:	bl	113a4 <fputc_unlocked@plt>
   1a9e4:	mov	r2, #5
   1a9e8:	movw	r1, #61888	; 0xf1c0
   1a9ec:	movt	r1, #1
   1a9f0:	mov	r0, #0
   1a9f4:	bl	113bc <dcgettext@plt>
   1a9f8:	mov	r2, r0
   1a9fc:	mov	r1, #1
   1aa00:	movw	r3, #62060	; 0xf26c
   1aa04:	movt	r3, #1
   1aa08:	mov	r0, r4
   1aa0c:	bl	115c0 <__fprintf_chk@plt>
   1aa10:	mov	r1, r4
   1aa14:	mov	r0, #10
   1aa18:	bl	113a4 <fputc_unlocked@plt>
   1aa1c:	cmp	r6, #9
   1aa20:	ldrls	pc, [pc, r6, lsl #2]
   1aa24:	b	1ad38 <__assert_fail@plt+0x9634>
   1aa28:			; <UNDEFINED> instruction: 0x0001aab8
   1aa2c:	andeq	sl, r1, r8, ror #21
   1aa30:	andeq	sl, r1, r4, lsr #22
   1aa34:	andeq	sl, r1, r4, ror #22
   1aa38:	andeq	sl, r1, ip, lsr #23
   1aa3c:	andeq	sl, r1, r4, ror #23
   1aa40:	andeq	sl, r1, ip, lsr #24
   1aa44:	andeq	sl, r1, r0, lsl #25
   1aa48:	ldrdeq	sl, [r1], -r8
   1aa4c:	andeq	sl, r1, r0, asr sl
   1aa50:	movw	r1, #62364	; 0xf39c
   1aa54:	movt	r1, #1
   1aa58:	mov	r2, #5
   1aa5c:	mov	r0, #0
   1aa60:	bl	113bc <dcgettext@plt>
   1aa64:	ldr	lr, [r5, #4]
   1aa68:	mov	r2, r0
   1aa6c:	mov	r1, #1
   1aa70:	mov	r0, r4
   1aa74:	ldr	r3, [r5, #8]
   1aa78:	ldr	ip, [r5, #32]
   1aa7c:	str	lr, [sp]
   1aa80:	ldr	lr, [r5, #12]
   1aa84:	str	ip, [sp, #28]
   1aa88:	ldr	ip, [r5, #28]
   1aa8c:	str	r3, [sp, #4]
   1aa90:	ldr	r3, [r5, #16]
   1aa94:	str	lr, [sp, #8]
   1aa98:	ldr	lr, [r5, #20]
   1aa9c:	str	ip, [sp, #24]
   1aaa0:	ldr	ip, [r5, #24]
   1aaa4:	str	r3, [sp, #12]
   1aaa8:	ldr	r3, [r5]
   1aaac:	str	lr, [sp, #16]
   1aab0:	str	ip, [sp, #20]
   1aab4:	bl	115c0 <__fprintf_chk@plt>
   1aab8:	add	sp, sp, #32
   1aabc:	ldrd	r4, [sp]
   1aac0:	ldr	r6, [sp, #8]
   1aac4:	add	sp, sp, #12
   1aac8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aacc:	mov	r3, r2
   1aad0:	mov	r1, #1
   1aad4:	str	ip, [sp]
   1aad8:	movw	r2, #61876	; 0xf1b4
   1aadc:	movt	r2, #1
   1aae0:	bl	115c0 <__fprintf_chk@plt>
   1aae4:	b	1a9a4 <__assert_fail@plt+0x92a0>
   1aae8:	mov	r2, #5
   1aaec:	movw	r1, #62096	; 0xf290
   1aaf0:	movt	r1, #1
   1aaf4:	mov	r0, #0
   1aaf8:	bl	113bc <dcgettext@plt>
   1aafc:	ldr	r3, [r5]
   1ab00:	mov	r2, r0
   1ab04:	mov	r1, #1
   1ab08:	mov	r0, r4
   1ab0c:	add	sp, sp, #32
   1ab10:	ldrd	r4, [sp]
   1ab14:	ldr	r6, [sp, #8]
   1ab18:	ldr	lr, [sp, #12]
   1ab1c:	add	sp, sp, #16
   1ab20:	b	115c0 <__fprintf_chk@plt>
   1ab24:	mov	r2, #5
   1ab28:	movw	r1, #62112	; 0xf2a0
   1ab2c:	movt	r1, #1
   1ab30:	mov	r0, #0
   1ab34:	bl	113bc <dcgettext@plt>
   1ab38:	ldm	r5, {r3, ip}
   1ab3c:	mov	r2, r0
   1ab40:	mov	r1, #1
   1ab44:	mov	r0, r4
   1ab48:	str	ip, [sp, #48]	; 0x30
   1ab4c:	add	sp, sp, #32
   1ab50:	ldrd	r4, [sp]
   1ab54:	ldr	r6, [sp, #8]
   1ab58:	ldr	lr, [sp, #12]
   1ab5c:	add	sp, sp, #16
   1ab60:	b	115c0 <__fprintf_chk@plt>
   1ab64:	mov	r2, #5
   1ab68:	movw	r1, #62136	; 0xf2b8
   1ab6c:	movt	r1, #1
   1ab70:	mov	r0, #0
   1ab74:	bl	113bc <dcgettext@plt>
   1ab78:	ldm	r5, {r3, lr}
   1ab7c:	mov	r2, r0
   1ab80:	mov	r1, #1
   1ab84:	mov	r0, r4
   1ab88:	ldr	ip, [r5, #8]
   1ab8c:	str	lr, [sp, #48]	; 0x30
   1ab90:	str	ip, [sp, #52]	; 0x34
   1ab94:	add	sp, sp, #32
   1ab98:	ldrd	r4, [sp]
   1ab9c:	ldr	r6, [sp, #8]
   1aba0:	ldr	lr, [sp, #12]
   1aba4:	add	sp, sp, #16
   1aba8:	b	115c0 <__fprintf_chk@plt>
   1abac:	mov	r2, #5
   1abb0:	movw	r1, #62164	; 0xf2d4
   1abb4:	movt	r1, #1
   1abb8:	mov	r0, #0
   1abbc:	bl	113bc <dcgettext@plt>
   1abc0:	ldmib	r5, {r3, ip, lr}
   1abc4:	mov	r2, r0
   1abc8:	mov	r1, #1
   1abcc:	mov	r0, r4
   1abd0:	str	r3, [sp]
   1abd4:	ldr	r3, [r5]
   1abd8:	stmib	sp, {ip, lr}
   1abdc:	bl	115c0 <__fprintf_chk@plt>
   1abe0:	b	1aab8 <__assert_fail@plt+0x93b4>
   1abe4:	mov	r2, #5
   1abe8:	movw	r1, #62196	; 0xf2f4
   1abec:	movt	r1, #1
   1abf0:	mov	r0, #0
   1abf4:	bl	113bc <dcgettext@plt>
   1abf8:	ldmib	r5, {ip, lr}
   1abfc:	mov	r2, r0
   1ac00:	mov	r1, #1
   1ac04:	mov	r0, r4
   1ac08:	ldr	r3, [r5, #16]
   1ac0c:	str	ip, [sp]
   1ac10:	ldr	ip, [r5, #12]
   1ac14:	str	r3, [sp, #12]
   1ac18:	ldr	r3, [r5]
   1ac1c:	str	lr, [sp, #4]
   1ac20:	str	ip, [sp, #8]
   1ac24:	bl	115c0 <__fprintf_chk@plt>
   1ac28:	b	1aab8 <__assert_fail@plt+0x93b4>
   1ac2c:	mov	r2, #5
   1ac30:	movw	r1, #62232	; 0xf318
   1ac34:	movt	r1, #1
   1ac38:	mov	r0, #0
   1ac3c:	bl	113bc <dcgettext@plt>
   1ac40:	ldr	lr, [r5, #4]
   1ac44:	mov	r2, r0
   1ac48:	mov	r1, #1
   1ac4c:	mov	r0, r4
   1ac50:	ldr	r3, [r5, #8]
   1ac54:	ldr	ip, [r5, #20]
   1ac58:	str	lr, [sp]
   1ac5c:	ldr	lr, [r5, #12]
   1ac60:	str	ip, [sp, #16]
   1ac64:	ldr	ip, [r5, #16]
   1ac68:	str	r3, [sp, #4]
   1ac6c:	ldr	r3, [r5]
   1ac70:	str	lr, [sp, #8]
   1ac74:	str	ip, [sp, #12]
   1ac78:	bl	115c0 <__fprintf_chk@plt>
   1ac7c:	b	1aab8 <__assert_fail@plt+0x93b4>
   1ac80:	mov	r2, #5
   1ac84:	movw	r1, #62272	; 0xf340
   1ac88:	movt	r1, #1
   1ac8c:	mov	r0, #0
   1ac90:	bl	113bc <dcgettext@plt>
   1ac94:	ldmib	r5, {r3, ip}
   1ac98:	mov	r2, r0
   1ac9c:	mov	r1, #1
   1aca0:	mov	r0, r4
   1aca4:	ldr	lr, [r5, #24]
   1aca8:	str	r3, [sp]
   1acac:	ldr	r3, [r5, #12]
   1acb0:	str	lr, [sp, #20]
   1acb4:	ldr	lr, [r5, #20]
   1acb8:	str	ip, [sp, #4]
   1acbc:	ldr	ip, [r5, #16]
   1acc0:	str	r3, [sp, #8]
   1acc4:	ldr	r3, [r5]
   1acc8:	str	ip, [sp, #12]
   1accc:	str	lr, [sp, #16]
   1acd0:	bl	115c0 <__fprintf_chk@plt>
   1acd4:	b	1aab8 <__assert_fail@plt+0x93b4>
   1acd8:	mov	r2, #5
   1acdc:	movw	r1, #62316	; 0xf36c
   1ace0:	movt	r1, #1
   1ace4:	mov	r0, #0
   1ace8:	bl	113bc <dcgettext@plt>
   1acec:	ldmib	r5, {ip, lr}
   1acf0:	mov	r2, r0
   1acf4:	mov	r1, #1
   1acf8:	mov	r0, r4
   1acfc:	ldr	r3, [r5, #28]
   1ad00:	str	ip, [sp]
   1ad04:	ldr	ip, [r5, #12]
   1ad08:	str	r3, [sp, #24]
   1ad0c:	ldr	r3, [r5, #24]
   1ad10:	str	lr, [sp, #4]
   1ad14:	ldr	lr, [r5, #16]
   1ad18:	str	ip, [sp, #8]
   1ad1c:	ldr	ip, [r5, #20]
   1ad20:	str	r3, [sp, #20]
   1ad24:	ldr	r3, [r5]
   1ad28:	str	lr, [sp, #12]
   1ad2c:	str	ip, [sp, #16]
   1ad30:	bl	115c0 <__fprintf_chk@plt>
   1ad34:	b	1aab8 <__assert_fail@plt+0x93b4>
   1ad38:	movw	r1, #62416	; 0xf3d0
   1ad3c:	movt	r1, #1
   1ad40:	b	1aa58 <__assert_fail@plt+0x9354>
   1ad44:	strd	r4, [sp, #-12]!
   1ad48:	str	lr, [sp, #8]
   1ad4c:	sub	sp, sp, #12
   1ad50:	ldr	r5, [sp, #24]
   1ad54:	ldr	ip, [r5]
   1ad58:	cmp	ip, #0
   1ad5c:	beq	1ad78 <__assert_fail@plt+0x9674>
   1ad60:	mov	lr, r5
   1ad64:	mov	ip, #0
   1ad68:	ldr	r4, [lr, #4]!
   1ad6c:	add	ip, ip, #1
   1ad70:	cmp	r4, #0
   1ad74:	bne	1ad68 <__assert_fail@plt+0x9664>
   1ad78:	stm	sp, {r5, ip}
   1ad7c:	bl	1a964 <__assert_fail@plt+0x9260>
   1ad80:	add	sp, sp, #12
   1ad84:	ldrd	r4, [sp]
   1ad88:	add	sp, sp, #8
   1ad8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad90:	strd	r4, [sp, #-16]!
   1ad94:	mov	ip, #0
   1ad98:	str	r6, [sp, #8]
   1ad9c:	str	lr, [sp, #12]
   1ada0:	sub	sp, sp, #48	; 0x30
   1ada4:	ldr	r5, [sp, #64]	; 0x40
   1ada8:	add	r6, sp, #8
   1adac:	mov	r4, r6
   1adb0:	ldr	lr, [r5], #4
   1adb4:	cmp	lr, #0
   1adb8:	str	lr, [r4], #4
   1adbc:	beq	1adcc <__assert_fail@plt+0x96c8>
   1adc0:	add	ip, ip, #1
   1adc4:	cmp	ip, #10
   1adc8:	bne	1adb0 <__assert_fail@plt+0x96ac>
   1adcc:	stm	sp, {r6, ip}
   1add0:	bl	1a964 <__assert_fail@plt+0x9260>
   1add4:	add	sp, sp, #48	; 0x30
   1add8:	ldrd	r4, [sp]
   1addc:	ldr	r6, [sp, #8]
   1ade0:	add	sp, sp, #12
   1ade4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ade8:	push	{r3}		; (str r3, [sp, #-4]!)
   1adec:	mov	ip, #0
   1adf0:	strd	r4, [sp, #-12]!
   1adf4:	str	lr, [sp, #8]
   1adf8:	sub	sp, sp, #56	; 0x38
   1adfc:	add	r3, sp, #72	; 0x48
   1ae00:	add	r5, sp, #16
   1ae04:	mov	r4, r3
   1ae08:	mov	lr, r5
   1ae0c:	str	r3, [sp, #12]
   1ae10:	ldr	r3, [r4], #4
   1ae14:	cmp	r3, #0
   1ae18:	str	r3, [lr], #4
   1ae1c:	beq	1ae2c <__assert_fail@plt+0x9728>
   1ae20:	add	ip, ip, #1
   1ae24:	cmp	ip, #10
   1ae28:	bne	1ae10 <__assert_fail@plt+0x970c>
   1ae2c:	ldr	r3, [sp, #68]	; 0x44
   1ae30:	stm	sp, {r5, ip}
   1ae34:	bl	1a964 <__assert_fail@plt+0x9260>
   1ae38:	add	sp, sp, #56	; 0x38
   1ae3c:	ldrd	r4, [sp]
   1ae40:	ldr	lr, [sp, #8]
   1ae44:	add	sp, sp, #12
   1ae48:	add	sp, sp, #4
   1ae4c:	bx	lr
   1ae50:	movw	r3, #820	; 0x334
   1ae54:	movt	r3, #3
   1ae58:	str	r4, [sp, #-8]!
   1ae5c:	mov	r0, #10
   1ae60:	ldr	r1, [r3]
   1ae64:	str	lr, [sp, #4]
   1ae68:	bl	113a4 <fputc_unlocked@plt>
   1ae6c:	mov	r2, #5
   1ae70:	movw	r1, #62476	; 0xf40c
   1ae74:	movt	r1, #1
   1ae78:	mov	r0, #0
   1ae7c:	bl	113bc <dcgettext@plt>
   1ae80:	mov	r1, r0
   1ae84:	movw	r2, #62496	; 0xf420
   1ae88:	movt	r2, #1
   1ae8c:	mov	r0, #1
   1ae90:	bl	1159c <__printf_chk@plt>
   1ae94:	mov	r2, #5
   1ae98:	movw	r1, #62520	; 0xf438
   1ae9c:	movt	r1, #1
   1aea0:	mov	r0, #0
   1aea4:	bl	113bc <dcgettext@plt>
   1aea8:	mov	r1, r0
   1aeac:	movw	r3, #59596	; 0xe8cc
   1aeb0:	movt	r3, #1
   1aeb4:	movw	r2, #59636	; 0xe8f4
   1aeb8:	movt	r2, #1
   1aebc:	mov	r0, #1
   1aec0:	bl	1159c <__printf_chk@plt>
   1aec4:	mov	r2, #5
   1aec8:	movw	r1, #62540	; 0xf44c
   1aecc:	movt	r1, #1
   1aed0:	mov	r0, #0
   1aed4:	bl	113bc <dcgettext@plt>
   1aed8:	mov	r1, r0
   1aedc:	movw	r2, #62580	; 0xf474
   1aee0:	movt	r2, #1
   1aee4:	mov	r0, #1
   1aee8:	ldr	r4, [sp]
   1aeec:	ldr	lr, [sp, #4]
   1aef0:	add	sp, sp, #8
   1aef4:	b	1159c <__printf_chk@plt>
   1aef8:	str	r4, [sp, #-8]!
   1aefc:	str	lr, [sp, #4]
   1af00:	bl	1bea0 <__assert_fail@plt+0xa79c>
   1af04:	cmp	r0, #0
   1af08:	beq	1af18 <__assert_fail@plt+0x9814>
   1af0c:	ldr	r4, [sp]
   1af10:	add	sp, sp, #4
   1af14:	pop	{pc}		; (ldr pc, [sp], #4)
   1af18:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1af1c:	str	r4, [sp, #-8]!
   1af20:	str	lr, [sp, #4]
   1af24:	bl	1bea0 <__assert_fail@plt+0xa79c>
   1af28:	cmp	r0, #0
   1af2c:	beq	1af3c <__assert_fail@plt+0x9838>
   1af30:	ldr	r4, [sp]
   1af34:	add	sp, sp, #4
   1af38:	pop	{pc}		; (ldr pc, [sp], #4)
   1af3c:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1af40:	str	r4, [sp, #-8]!
   1af44:	str	lr, [sp, #4]
   1af48:	bl	1bea0 <__assert_fail@plt+0xa79c>
   1af4c:	cmp	r0, #0
   1af50:	beq	1af60 <__assert_fail@plt+0x985c>
   1af54:	ldr	r4, [sp]
   1af58:	add	sp, sp, #4
   1af5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1af60:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1af64:	strd	r4, [sp, #-16]!
   1af68:	mov	r5, r0
   1af6c:	mov	r4, r1
   1af70:	str	r6, [sp, #8]
   1af74:	str	lr, [sp, #12]
   1af78:	bl	1bedc <__assert_fail@plt+0xa7d8>
   1af7c:	cmp	r0, #0
   1af80:	beq	1af94 <__assert_fail@plt+0x9890>
   1af84:	ldrd	r4, [sp]
   1af88:	ldr	r6, [sp, #8]
   1af8c:	add	sp, sp, #12
   1af90:	pop	{pc}		; (ldr pc, [sp], #4)
   1af94:	adds	r4, r4, #0
   1af98:	movne	r4, #1
   1af9c:	cmp	r5, #0
   1afa0:	moveq	r4, #1
   1afa4:	cmp	r4, #0
   1afa8:	beq	1af84 <__assert_fail@plt+0x9880>
   1afac:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1afb0:	cmp	r1, #0
   1afb4:	orreq	r1, r1, #1
   1afb8:	str	r4, [sp, #-8]!
   1afbc:	str	lr, [sp, #4]
   1afc0:	bl	1bedc <__assert_fail@plt+0xa7d8>
   1afc4:	cmp	r0, #0
   1afc8:	beq	1afd8 <__assert_fail@plt+0x98d4>
   1afcc:	ldr	r4, [sp]
   1afd0:	add	sp, sp, #4
   1afd4:	pop	{pc}		; (ldr pc, [sp], #4)
   1afd8:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1afdc:	strd	r4, [sp, #-16]!
   1afe0:	mov	r4, r0
   1afe4:	mov	r5, r2
   1afe8:	str	r6, [sp, #8]
   1afec:	mov	r6, r1
   1aff0:	str	lr, [sp, #12]
   1aff4:	bl	1d47c <__assert_fail@plt+0xbd78>
   1aff8:	cmp	r0, #0
   1affc:	beq	1b010 <__assert_fail@plt+0x990c>
   1b000:	ldrd	r4, [sp]
   1b004:	ldr	r6, [sp, #8]
   1b008:	add	sp, sp, #12
   1b00c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b010:	cmp	r4, #0
   1b014:	beq	1b024 <__assert_fail@plt+0x9920>
   1b018:	cmp	r6, #0
   1b01c:	cmpne	r5, #0
   1b020:	beq	1b000 <__assert_fail@plt+0x98fc>
   1b024:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b028:	b	1afdc <__assert_fail@plt+0x98d8>
   1b02c:	cmp	r2, #0
   1b030:	cmpne	r1, #0
   1b034:	str	r4, [sp, #-8]!
   1b038:	moveq	r2, #1
   1b03c:	str	lr, [sp, #4]
   1b040:	moveq	r1, r2
   1b044:	bl	1d47c <__assert_fail@plt+0xbd78>
   1b048:	cmp	r0, #0
   1b04c:	beq	1b05c <__assert_fail@plt+0x9958>
   1b050:	ldr	r4, [sp]
   1b054:	add	sp, sp, #4
   1b058:	pop	{pc}		; (ldr pc, [sp], #4)
   1b05c:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b060:	mov	r2, r1
   1b064:	mov	r1, r0
   1b068:	mov	r0, #0
   1b06c:	b	1afdc <__assert_fail@plt+0x98d8>
   1b070:	mov	r2, r1
   1b074:	mov	r1, r0
   1b078:	mov	r0, #0
   1b07c:	b	1b02c <__assert_fail@plt+0x9928>
   1b080:	cmp	r0, #0
   1b084:	strd	r4, [sp, #-16]!
   1b088:	mov	r5, r1
   1b08c:	ldr	r4, [r1]
   1b090:	str	r6, [sp, #8]
   1b094:	str	lr, [sp, #12]
   1b098:	beq	1b0c8 <__assert_fail@plt+0x99c4>
   1b09c:	lsr	r3, r4, #1
   1b0a0:	add	r3, r3, #1
   1b0a4:	adds	r4, r4, r3
   1b0a8:	bcs	1b0e4 <__assert_fail@plt+0x99e0>
   1b0ac:	mov	r1, r4
   1b0b0:	bl	1afdc <__assert_fail@plt+0x98d8>
   1b0b4:	ldr	r6, [sp, #8]
   1b0b8:	str	r4, [r5]
   1b0bc:	ldrd	r4, [sp]
   1b0c0:	add	sp, sp, #12
   1b0c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0c8:	cmp	r4, #0
   1b0cc:	bne	1b0ac <__assert_fail@plt+0x99a8>
   1b0d0:	mov	r4, #64	; 0x40
   1b0d4:	udiv	r4, r4, r2
   1b0d8:	cmp	r2, #64	; 0x40
   1b0dc:	addhi	r4, r4, #1
   1b0e0:	b	1b0ac <__assert_fail@plt+0x99a8>
   1b0e4:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b0e8:	mov	r2, #1
   1b0ec:	b	1b080 <__assert_fail@plt+0x997c>
   1b0f0:	ldr	ip, [r1]
   1b0f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b0f8:	mov	r5, r1
   1b0fc:	strd	r6, [sp, #8]
   1b100:	str	lr, [sp, #28]
   1b104:	strd	r8, [sp, #16]
   1b108:	asr	lr, ip, #1
   1b10c:	ldr	r8, [sp, #32]
   1b110:	str	sl, [sp, #24]
   1b114:	adds	r4, ip, lr
   1b118:	mvn	lr, r3
   1b11c:	lsr	lr, lr, #31
   1b120:	mvnvs	r4, #-2147483648	; 0x80000000
   1b124:	cmp	r3, r4
   1b128:	movge	r1, #0
   1b12c:	andlt	r1, lr, #1
   1b130:	cmp	r1, #0
   1b134:	movne	r4, r3
   1b138:	smull	r6, r7, r4, r8
   1b13c:	cmp	r7, r6, asr #31
   1b140:	bne	1b1c8 <__assert_fail@plt+0x9ac4>
   1b144:	cmp	r6, #63	; 0x3f
   1b148:	mov	r1, r6
   1b14c:	ble	1b1b0 <__assert_fail@plt+0x9aac>
   1b150:	cmp	r0, #0
   1b154:	sub	r6, r4, ip
   1b158:	streq	r0, [r5]
   1b15c:	cmp	r6, r2
   1b160:	bge	1b190 <__assert_fail@plt+0x9a8c>
   1b164:	adds	r4, ip, r2
   1b168:	bvs	1b1c4 <__assert_fail@plt+0x9ac0>
   1b16c:	cmp	r4, r3
   1b170:	movle	r3, #0
   1b174:	andgt	r3, lr, #1
   1b178:	cmp	r3, #0
   1b17c:	bne	1b1c4 <__assert_fail@plt+0x9ac0>
   1b180:	smull	r8, r9, r4, r8
   1b184:	cmp	r9, r8, asr #31
   1b188:	mov	r1, r8
   1b18c:	bne	1b1c4 <__assert_fail@plt+0x9ac0>
   1b190:	bl	1af64 <__assert_fail@plt+0x9860>
   1b194:	ldrd	r6, [sp, #8]
   1b198:	ldrd	r8, [sp, #16]
   1b19c:	ldr	sl, [sp, #24]
   1b1a0:	str	r4, [r5]
   1b1a4:	ldrd	r4, [sp]
   1b1a8:	add	sp, sp, #28
   1b1ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1b0:	mov	r6, #64	; 0x40
   1b1b4:	sdiv	r4, r6, r8
   1b1b8:	mls	r1, r8, r4, r6
   1b1bc:	sub	r1, r6, r1
   1b1c0:	b	1b150 <__assert_fail@plt+0x9a4c>
   1b1c4:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b1c8:	mvn	r6, #-2147483648	; 0x80000000
   1b1cc:	b	1b1b4 <__assert_fail@plt+0x9ab0>
   1b1d0:	mov	r1, #1
   1b1d4:	str	r4, [sp, #-8]!
   1b1d8:	str	lr, [sp, #4]
   1b1dc:	bl	1be2c <__assert_fail@plt+0xa728>
   1b1e0:	cmp	r0, #0
   1b1e4:	beq	1b1f4 <__assert_fail@plt+0x9af0>
   1b1e8:	ldr	r4, [sp]
   1b1ec:	add	sp, sp, #4
   1b1f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1f4:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b1f8:	mov	r1, #1
   1b1fc:	str	r4, [sp, #-8]!
   1b200:	str	lr, [sp, #4]
   1b204:	bl	1be2c <__assert_fail@plt+0xa728>
   1b208:	cmp	r0, #0
   1b20c:	beq	1b21c <__assert_fail@plt+0x9b18>
   1b210:	ldr	r4, [sp]
   1b214:	add	sp, sp, #4
   1b218:	pop	{pc}		; (ldr pc, [sp], #4)
   1b21c:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b220:	str	r4, [sp, #-8]!
   1b224:	str	lr, [sp, #4]
   1b228:	bl	1be2c <__assert_fail@plt+0xa728>
   1b22c:	cmp	r0, #0
   1b230:	beq	1b240 <__assert_fail@plt+0x9b3c>
   1b234:	ldr	r4, [sp]
   1b238:	add	sp, sp, #4
   1b23c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b240:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b244:	str	r4, [sp, #-8]!
   1b248:	str	lr, [sp, #4]
   1b24c:	bl	1be2c <__assert_fail@plt+0xa728>
   1b250:	cmp	r0, #0
   1b254:	beq	1b264 <__assert_fail@plt+0x9b60>
   1b258:	ldr	r4, [sp]
   1b25c:	add	sp, sp, #4
   1b260:	pop	{pc}		; (ldr pc, [sp], #4)
   1b264:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b268:	strd	r4, [sp, #-16]!
   1b26c:	mov	r4, r1
   1b270:	str	r6, [sp, #8]
   1b274:	mov	r6, r0
   1b278:	mov	r0, r1
   1b27c:	str	lr, [sp, #12]
   1b280:	bl	1bea0 <__assert_fail@plt+0xa79c>
   1b284:	subs	r5, r0, #0
   1b288:	beq	1b2ac <__assert_fail@plt+0x9ba8>
   1b28c:	mov	r2, r4
   1b290:	mov	r1, r6
   1b294:	bl	11374 <memcpy@plt>
   1b298:	mov	r0, r5
   1b29c:	ldrd	r4, [sp]
   1b2a0:	ldr	r6, [sp, #8]
   1b2a4:	add	sp, sp, #12
   1b2a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2ac:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b2b0:	strd	r4, [sp, #-16]!
   1b2b4:	mov	r4, r1
   1b2b8:	str	r6, [sp, #8]
   1b2bc:	mov	r6, r0
   1b2c0:	mov	r0, r1
   1b2c4:	str	lr, [sp, #12]
   1b2c8:	bl	1bea0 <__assert_fail@plt+0xa79c>
   1b2cc:	subs	r5, r0, #0
   1b2d0:	beq	1b2f4 <__assert_fail@plt+0x9bf0>
   1b2d4:	mov	r2, r4
   1b2d8:	mov	r1, r6
   1b2dc:	bl	11374 <memcpy@plt>
   1b2e0:	mov	r0, r5
   1b2e4:	ldrd	r4, [sp]
   1b2e8:	ldr	r6, [sp, #8]
   1b2ec:	add	sp, sp, #12
   1b2f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2f4:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b2f8:	strd	r4, [sp, #-16]!
   1b2fc:	mov	r4, r1
   1b300:	str	r6, [sp, #8]
   1b304:	mov	r6, r0
   1b308:	add	r0, r1, #1
   1b30c:	str	lr, [sp, #12]
   1b310:	bl	1bea0 <__assert_fail@plt+0xa79c>
   1b314:	subs	r5, r0, #0
   1b318:	beq	1b344 <__assert_fail@plt+0x9c40>
   1b31c:	mov	r3, #0
   1b320:	mov	r1, r6
   1b324:	mov	r2, r4
   1b328:	strb	r3, [r5, r4]
   1b32c:	bl	11374 <memcpy@plt>
   1b330:	mov	r0, r5
   1b334:	ldrd	r4, [sp]
   1b338:	ldr	r6, [sp, #8]
   1b33c:	add	sp, sp, #12
   1b340:	pop	{pc}		; (ldr pc, [sp], #4)
   1b344:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b348:	str	r4, [sp, #-8]!
   1b34c:	mov	r4, r0
   1b350:	str	lr, [sp, #4]
   1b354:	bl	1153c <strlen@plt>
   1b358:	add	r1, r0, #1
   1b35c:	mov	r0, r4
   1b360:	ldr	r4, [sp]
   1b364:	ldr	lr, [sp, #4]
   1b368:	add	sp, sp, #8
   1b36c:	b	1b268 <__assert_fail@plt+0x9b64>
   1b370:	movw	r3, #724	; 0x2d4
   1b374:	movt	r3, #3
   1b378:	str	r4, [sp, #-8]!
   1b37c:	ldr	r4, [r3]
   1b380:	mov	r2, #5
   1b384:	movw	r1, #62660	; 0xf4c4
   1b388:	movt	r1, #1
   1b38c:	mov	r0, #0
   1b390:	str	lr, [sp, #4]
   1b394:	bl	113bc <dcgettext@plt>
   1b398:	mov	r3, r0
   1b39c:	movw	r2, #61060	; 0xee84
   1b3a0:	movt	r2, #1
   1b3a4:	mov	r1, #0
   1b3a8:	mov	r0, r4
   1b3ac:	bl	11494 <error@plt>
   1b3b0:	bl	116e0 <abort@plt>
   1b3b4:	mov	r1, #0
   1b3b8:	str	r4, [sp, #-8]!
   1b3bc:	mov	r0, r1
   1b3c0:	str	lr, [sp, #4]
   1b3c4:	bl	11524 <getcwd@plt>
   1b3c8:	subs	r4, r0, #0
   1b3cc:	beq	1b3e0 <__assert_fail@plt+0x9cdc>
   1b3d0:	mov	r0, r4
   1b3d4:	ldr	r4, [sp]
   1b3d8:	add	sp, sp, #4
   1b3dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3e0:	bl	1156c <__errno_location@plt>
   1b3e4:	ldr	r3, [r0]
   1b3e8:	cmp	r3, #12
   1b3ec:	bne	1b3d0 <__assert_fail@plt+0x9ccc>
   1b3f0:	bl	1b370 <__assert_fail@plt+0x9c6c>
   1b3f4:	sub	r0, r0, #1
   1b3f8:	movw	ip, #724	; 0x2d4
   1b3fc:	movt	ip, #3
   1b400:	cmp	r0, #3
   1b404:	push	{lr}		; (str lr, [sp, #-4]!)
   1b408:	sub	sp, sp, #20
   1b40c:	ldr	r5, [ip]
   1b410:	bhi	1b460 <__assert_fail@plt+0x9d5c>
   1b414:	movw	ip, #62680	; 0xf4d8
   1b418:	movt	ip, #1
   1b41c:	cmp	r1, #0
   1b420:	ldr	r0, [ip, r0, lsl #2]
   1b424:	blt	1b464 <__assert_fail@plt+0x9d60>
   1b428:	ldr	r6, [r3, r1, lsl #4]
   1b42c:	movw	r4, #62696	; 0xf4e8
   1b430:	movt	r4, #1
   1b434:	mov	r1, r0
   1b438:	mov	r2, #5
   1b43c:	mov	r0, #0
   1b440:	bl	113bc <dcgettext@plt>
   1b444:	ldr	ip, [sp, #24]
   1b448:	mov	r2, r0
   1b44c:	mov	r3, r4
   1b450:	mov	r0, r5
   1b454:	mov	r1, #0
   1b458:	stm	sp, {r6, ip}
   1b45c:	bl	11494 <error@plt>
   1b460:	bl	116e0 <abort@plt>
   1b464:	mov	r3, #0
   1b468:	movw	r4, #62696	; 0xf4e8
   1b46c:	movt	r4, #1
   1b470:	add	r6, sp, #12
   1b474:	strb	r2, [sp, #12]
   1b478:	sub	r4, r4, r1
   1b47c:	strb	r3, [sp, #13]
   1b480:	b	1b434 <__assert_fail@plt+0x9d30>
   1b484:	cmp	r2, #36	; 0x24
   1b488:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b48c:	strd	r6, [sp, #8]
   1b490:	strd	r8, [sp, #16]
   1b494:	strd	sl, [sp, #24]
   1b498:	str	lr, [sp, #32]
   1b49c:	sub	sp, sp, #36	; 0x24
   1b4a0:	bhi	1bd30 <__assert_fail@plt+0xa62c>
   1b4a4:	cmp	r1, #0
   1b4a8:	mov	r8, r2
   1b4ac:	mov	r6, r0
   1b4b0:	mov	r5, r1
   1b4b4:	mov	sl, r3
   1b4b8:	addeq	r5, sp, #28
   1b4bc:	bl	1156c <__errno_location@plt>
   1b4c0:	mov	r3, #0
   1b4c4:	mov	r7, r0
   1b4c8:	str	r3, [r0]
   1b4cc:	bl	11518 <__ctype_b_loc@plt>
   1b4d0:	ldrb	r3, [r6]
   1b4d4:	mov	r2, r6
   1b4d8:	ldr	r0, [r0]
   1b4dc:	b	1b4e4 <__assert_fail@plt+0x9de0>
   1b4e0:	ldrb	r3, [r2, #1]!
   1b4e4:	lsl	r1, r3, #1
   1b4e8:	ldrh	r4, [r0, r1]
   1b4ec:	ands	r4, r4, #8192	; 0x2000
   1b4f0:	bne	1b4e0 <__assert_fail@plt+0x9ddc>
   1b4f4:	cmp	r3, #45	; 0x2d
   1b4f8:	beq	1b598 <__assert_fail@plt+0x9e94>
   1b4fc:	mov	r2, r8
   1b500:	mov	r3, r4
   1b504:	mov	r1, r5
   1b508:	mov	r0, r6
   1b50c:	bl	11380 <__strtoull_internal@plt>
   1b510:	ldr	fp, [r5]
   1b514:	mov	r9, r0
   1b518:	mov	r8, r1
   1b51c:	cmp	fp, r6
   1b520:	beq	1b580 <__assert_fail@plt+0x9e7c>
   1b524:	ldr	r4, [r7]
   1b528:	cmp	r4, #0
   1b52c:	bne	1b570 <__assert_fail@plt+0x9e6c>
   1b530:	ldr	r3, [sp, #72]	; 0x48
   1b534:	cmp	r3, #0
   1b538:	beq	1b548 <__assert_fail@plt+0x9e44>
   1b53c:	ldrb	r6, [fp]
   1b540:	cmp	r6, #0
   1b544:	bne	1b888 <__assert_fail@plt+0xa184>
   1b548:	str	r9, [sl]
   1b54c:	str	r8, [sl, #4]
   1b550:	mov	r0, r4
   1b554:	add	sp, sp, #36	; 0x24
   1b558:	ldrd	r4, [sp]
   1b55c:	ldrd	r6, [sp, #8]
   1b560:	ldrd	r8, [sp, #16]
   1b564:	ldrd	sl, [sp, #24]
   1b568:	add	sp, sp, #32
   1b56c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b570:	cmp	r4, #34	; 0x22
   1b574:	bne	1b598 <__assert_fail@plt+0x9e94>
   1b578:	mov	r4, #1
   1b57c:	b	1b530 <__assert_fail@plt+0x9e2c>
   1b580:	ldr	r3, [sp, #72]	; 0x48
   1b584:	cmp	r3, #0
   1b588:	beq	1b598 <__assert_fail@plt+0x9e94>
   1b58c:	ldrb	r6, [r6]
   1b590:	cmp	r6, #0
   1b594:	bne	1b5a0 <__assert_fail@plt+0x9e9c>
   1b598:	mov	r4, #4
   1b59c:	b	1b550 <__assert_fail@plt+0x9e4c>
   1b5a0:	mov	r1, r6
   1b5a4:	mov	r0, r3
   1b5a8:	bl	11548 <strchr@plt>
   1b5ac:	cmp	r0, #0
   1b5b0:	movne	r9, #1
   1b5b4:	movne	r8, #0
   1b5b8:	beq	1b598 <__assert_fail@plt+0x9e94>
   1b5bc:	sub	r3, r6, #69	; 0x45
   1b5c0:	cmp	r3, #47	; 0x2f
   1b5c4:	ldrls	pc, [pc, r3, lsl #2]
   1b5c8:	b	1b6d0 <__assert_fail@plt+0x9fcc>
   1b5cc:	andeq	fp, r1, ip, lsl #13
   1b5d0:	ldrdeq	fp, [r1], -r0
   1b5d4:	andeq	fp, r1, ip, lsl #13
   1b5d8:	ldrdeq	fp, [r1], -r0
   1b5dc:	ldrdeq	fp, [r1], -r0
   1b5e0:	ldrdeq	fp, [r1], -r0
   1b5e4:	andeq	fp, r1, ip, lsl #13
   1b5e8:	ldrdeq	fp, [r1], -r0
   1b5ec:	andeq	fp, r1, ip, lsl #13
   1b5f0:	ldrdeq	fp, [r1], -r0
   1b5f4:	ldrdeq	fp, [r1], -r0
   1b5f8:	andeq	fp, r1, ip, lsl #13
   1b5fc:	ldrdeq	fp, [r1], -r0
   1b600:	ldrdeq	fp, [r1], -r0
   1b604:	ldrdeq	fp, [r1], -r0
   1b608:	andeq	fp, r1, ip, lsl #13
   1b60c:	ldrdeq	fp, [r1], -r0
   1b610:	ldrdeq	fp, [r1], -r0
   1b614:	ldrdeq	fp, [r1], -r0
   1b618:	ldrdeq	fp, [r1], -r0
   1b61c:	andeq	fp, r1, ip, lsl #13
   1b620:	andeq	fp, r1, ip, lsl #13
   1b624:	ldrdeq	fp, [r1], -r0
   1b628:	ldrdeq	fp, [r1], -r0
   1b62c:	ldrdeq	fp, [r1], -r0
   1b630:	ldrdeq	fp, [r1], -r0
   1b634:	ldrdeq	fp, [r1], -r0
   1b638:	ldrdeq	fp, [r1], -r0
   1b63c:	ldrdeq	fp, [r1], -r0
   1b640:	ldrdeq	fp, [r1], -r0
   1b644:	ldrdeq	fp, [r1], -r0
   1b648:	ldrdeq	fp, [r1], -r0
   1b64c:	ldrdeq	fp, [r1], -r0
   1b650:	ldrdeq	fp, [r1], -r0
   1b654:	andeq	fp, r1, ip, lsl #13
   1b658:	ldrdeq	fp, [r1], -r0
   1b65c:	ldrdeq	fp, [r1], -r0
   1b660:	ldrdeq	fp, [r1], -r0
   1b664:	andeq	fp, r1, ip, lsl #13
   1b668:	ldrdeq	fp, [r1], -r0
   1b66c:	andeq	fp, r1, ip, lsl #13
   1b670:	ldrdeq	fp, [r1], -r0
   1b674:	ldrdeq	fp, [r1], -r0
   1b678:	ldrdeq	fp, [r1], -r0
   1b67c:	ldrdeq	fp, [r1], -r0
   1b680:	ldrdeq	fp, [r1], -r0
   1b684:	ldrdeq	fp, [r1], -r0
   1b688:	andeq	fp, r1, ip, lsl #13
   1b68c:	mov	r1, #48	; 0x30
   1b690:	ldr	r0, [sp, #72]	; 0x48
   1b694:	bl	11548 <strchr@plt>
   1b698:	cmp	r0, #0
   1b69c:	beq	1b6d0 <__assert_fail@plt+0x9fcc>
   1b6a0:	ldrb	r3, [fp, #1]
   1b6a4:	cmp	r3, #68	; 0x44
   1b6a8:	beq	1bbfc <__assert_fail@plt+0xa4f8>
   1b6ac:	cmp	r3, #105	; 0x69
   1b6b0:	beq	1b8a0 <__assert_fail@plt+0xa19c>
   1b6b4:	cmp	r3, #66	; 0x42
   1b6b8:	moveq	r3, #2
   1b6bc:	movne	r3, #1
   1b6c0:	moveq	r7, #1000	; 0x3e8
   1b6c4:	movne	r7, #1024	; 0x400
   1b6c8:	str	r3, [sp, #4]
   1b6cc:	b	1b6dc <__assert_fail@plt+0x9fd8>
   1b6d0:	mov	r3, #1
   1b6d4:	mov	r7, #1024	; 0x400
   1b6d8:	str	r3, [sp, #4]
   1b6dc:	sub	r6, r6, #66	; 0x42
   1b6e0:	cmp	r6, #53	; 0x35
   1b6e4:	ldrls	pc, [pc, r6, lsl #2]
   1b6e8:	b	1b84c <__assert_fail@plt+0xa148>
   1b6ec:	andeq	fp, r1, r4, lsr #23
   1b6f0:	andeq	fp, r1, ip, asr #16
   1b6f4:	andeq	fp, r1, ip, asr #16
   1b6f8:			; <UNDEFINED> instruction: 0x0001b9b0
   1b6fc:	andeq	fp, r1, ip, asr #16
   1b700:	andeq	fp, r1, r4, asr #15
   1b704:	andeq	fp, r1, ip, asr #16
   1b708:	andeq	fp, r1, ip, asr #16
   1b70c:	andeq	fp, r1, ip, asr #16
   1b710:	andeq	fp, r1, r4, asr r8
   1b714:	andeq	fp, r1, ip, asr #16
   1b718:	andeq	fp, r1, r0, asr fp
   1b71c:	andeq	fp, r1, ip, asr #16
   1b720:	andeq	fp, r1, ip, asr #16
   1b724:	andeq	fp, r1, r0, lsr #21
   1b728:	andeq	fp, r1, ip, asr #16
   1b72c:	andeq	fp, r1, ip, asr #16
   1b730:	andeq	fp, r1, ip, asr #16
   1b734:	andeq	fp, r1, r8, lsr #20
   1b738:	andeq	fp, r1, ip, asr #16
   1b73c:	andeq	fp, r1, ip, asr #16
   1b740:	andeq	fp, r1, ip, asr #16
   1b744:	andeq	fp, r1, ip, asr #16
   1b748:	andeq	fp, r1, r8, lsr r9
   1b74c:			; <UNDEFINED> instruction: 0x0001b8bc
   1b750:	andeq	fp, r1, ip, asr #16
   1b754:	andeq	fp, r1, ip, asr #16
   1b758:	andeq	fp, r1, ip, asr #16
   1b75c:	andeq	fp, r1, ip, asr #16
   1b760:	andeq	fp, r1, ip, asr #16
   1b764:	andeq	fp, r1, ip, asr #16
   1b768:	andeq	fp, r1, ip, asr #16
   1b76c:	andeq	fp, r1, r0, lsr fp
   1b770:	andeq	fp, r1, r4, lsr r8
   1b774:	andeq	fp, r1, ip, asr #16
   1b778:	andeq	fp, r1, ip, asr #16
   1b77c:	andeq	fp, r1, ip, asr #16
   1b780:	andeq	fp, r1, r4, asr #15
   1b784:	andeq	fp, r1, ip, asr #16
   1b788:	andeq	fp, r1, ip, asr #16
   1b78c:	andeq	fp, r1, ip, asr #16
   1b790:	andeq	fp, r1, r4, asr r8
   1b794:	andeq	fp, r1, ip, asr #16
   1b798:	andeq	fp, r1, r0, asr fp
   1b79c:	andeq	fp, r1, ip, asr #16
   1b7a0:	andeq	fp, r1, ip, asr #16
   1b7a4:	andeq	fp, r1, ip, asr #16
   1b7a8:	andeq	fp, r1, ip, asr #16
   1b7ac:	andeq	fp, r1, ip, asr #16
   1b7b0:	andeq	fp, r1, ip, asr #16
   1b7b4:	andeq	fp, r1, r8, lsr #20
   1b7b8:	andeq	fp, r1, ip, asr #16
   1b7bc:	andeq	fp, r1, ip, asr #16
   1b7c0:	andeq	fp, r1, r8, lsl fp
   1b7c4:	asr	r3, r7, #31
   1b7c8:	mov	r2, r7
   1b7cc:	cmp	r8, #0
   1b7d0:	umull	r0, r1, r9, r7
   1b7d4:	mov	ip, #0
   1b7d8:	strd	r2, [sp, #8]
   1b7dc:	bne	1bc30 <__assert_fail@plt+0xa52c>
   1b7e0:	mov	r2, r0
   1b7e4:	mov	r3, r1
   1b7e8:	cmp	ip, #0
   1b7ec:	bne	1b878 <__assert_fail@plt+0xa174>
   1b7f0:	cmp	r3, #0
   1b7f4:	mov	lr, ip
   1b7f8:	bne	1bc94 <__assert_fail@plt+0xa590>
   1b7fc:	umull	r2, r3, r2, r7
   1b800:	mov	ip, r2
   1b804:	mov	r1, r3
   1b808:	subs	r0, lr, #0
   1b80c:	bne	1b878 <__assert_fail@plt+0xa174>
   1b810:	cmp	r1, #0
   1b814:	bne	1bc74 <__assert_fail@plt+0xa570>
   1b818:	umull	r2, r3, ip, r7
   1b81c:	mov	r6, r2
   1b820:	mov	r2, r3
   1b824:	cmp	r0, #0
   1b828:	mov	r9, r6
   1b82c:	mov	r8, r2
   1b830:	bne	1b878 <__assert_fail@plt+0xa174>
   1b834:	ldr	r2, [sp, #4]
   1b838:	add	r3, fp, r2
   1b83c:	str	r3, [r5]
   1b840:	ldrb	r3, [fp, r2]
   1b844:	cmp	r3, #0
   1b848:	beq	1b548 <__assert_fail@plt+0x9e44>
   1b84c:	orr	r4, r4, #2
   1b850:	b	1b548 <__assert_fail@plt+0x9e44>
   1b854:	cmp	r8, #0
   1b858:	umull	r2, r3, r9, r7
   1b85c:	mov	ip, #0
   1b860:	asr	r1, r7, #31
   1b864:	bne	1bbcc <__assert_fail@plt+0xa4c8>
   1b868:	mov	r9, r2
   1b86c:	mov	r8, r3
   1b870:	cmp	ip, #0
   1b874:	beq	1b834 <__assert_fail@plt+0xa130>
   1b878:	mvn	r9, #0
   1b87c:	mov	r4, #1
   1b880:	mov	r8, r9
   1b884:	b	1b834 <__assert_fail@plt+0xa130>
   1b888:	mov	r1, r6
   1b88c:	ldr	r0, [sp, #72]	; 0x48
   1b890:	bl	11548 <strchr@plt>
   1b894:	cmp	r0, #0
   1b898:	bne	1b5bc <__assert_fail@plt+0x9eb8>
   1b89c:	b	1b84c <__assert_fail@plt+0xa148>
   1b8a0:	ldrb	r3, [fp, #2]
   1b8a4:	mov	r7, #1024	; 0x400
   1b8a8:	cmp	r3, #66	; 0x42
   1b8ac:	movne	r3, #1
   1b8b0:	moveq	r3, #3
   1b8b4:	str	r3, [sp, #4]
   1b8b8:	b	1b6dc <__assert_fail@plt+0x9fd8>
   1b8bc:	asr	r3, r7, #31
   1b8c0:	mov	r2, r7
   1b8c4:	mov	ip, #0
   1b8c8:	mov	r0, #7
   1b8cc:	mov	lr, ip
   1b8d0:	mov	r6, r4
   1b8d4:	strd	r2, [sp, #8]
   1b8d8:	str	r5, [sp, #16]
   1b8dc:	b	1b908 <__assert_fail@plt+0xa204>
   1b8e0:	umull	r2, r3, r9, r7
   1b8e4:	mov	r9, r2
   1b8e8:	mov	r8, r3
   1b8ec:	cmp	r1, #0
   1b8f0:	beq	1b900 <__assert_fail@plt+0xa1fc>
   1b8f4:	mvn	r9, #0
   1b8f8:	mov	ip, #1
   1b8fc:	mov	r8, r9
   1b900:	subs	r0, r0, #1
   1b904:	beq	1bbf0 <__assert_fail@plt+0xa4ec>
   1b908:	cmp	r8, #0
   1b90c:	mov	r1, #0
   1b910:	beq	1b8e0 <__assert_fail@plt+0xa1dc>
   1b914:	umull	r4, r5, r9, r7
   1b918:	mov	r3, lr
   1b91c:	mov	r2, r5
   1b920:	umlal	r2, r3, r8, r7
   1b924:	cmp	r3, #0
   1b928:	bne	1bd50 <__assert_fail@plt+0xa64c>
   1b92c:	mov	r9, r4
   1b930:	mov	r8, r2
   1b934:	b	1b8ec <__assert_fail@plt+0xa1e8>
   1b938:	asr	r3, r7, #31
   1b93c:	mov	r2, r7
   1b940:	mov	r6, #0
   1b944:	mov	lr, #8
   1b948:	mov	r0, r4
   1b94c:	mov	ip, r5
   1b950:	strd	r2, [sp, #8]
   1b954:	b	1b980 <__assert_fail@plt+0xa27c>
   1b958:	umull	r2, r3, r9, r7
   1b95c:	mov	r9, r2
   1b960:	mov	r8, r3
   1b964:	cmp	r1, #0
   1b968:	beq	1b978 <__assert_fail@plt+0xa274>
   1b96c:	mvn	r9, #0
   1b970:	mov	r6, #1
   1b974:	mov	r8, r9
   1b978:	subs	lr, lr, #1
   1b97c:	beq	1bbc0 <__assert_fail@plt+0xa4bc>
   1b980:	cmp	r8, #0
   1b984:	mov	r1, #0
   1b988:	beq	1b958 <__assert_fail@plt+0xa254>
   1b98c:	umull	r4, r5, r9, r7
   1b990:	mov	r3, #0
   1b994:	mov	r2, r5
   1b998:	umlal	r2, r3, r8, r7
   1b99c:	cmp	r3, #0
   1b9a0:	bne	1bda8 <__assert_fail@plt+0xa6a4>
   1b9a4:	mov	r9, r4
   1b9a8:	mov	r8, r2
   1b9ac:	b	1b964 <__assert_fail@plt+0xa260>
   1b9b0:	asr	r3, r7, #31
   1b9b4:	mov	r2, r7
   1b9b8:	mov	r6, #0
   1b9bc:	mov	lr, #6
   1b9c0:	mov	r0, r4
   1b9c4:	mov	ip, r5
   1b9c8:	strd	r2, [sp, #8]
   1b9cc:	b	1b9f8 <__assert_fail@plt+0xa2f4>
   1b9d0:	umull	r2, r3, r9, r7
   1b9d4:	mov	r9, r2
   1b9d8:	mov	r8, r3
   1b9dc:	cmp	r1, #0
   1b9e0:	beq	1b9f0 <__assert_fail@plt+0xa2ec>
   1b9e4:	mvn	r9, #0
   1b9e8:	mov	r6, #1
   1b9ec:	mov	r8, r9
   1b9f0:	subs	lr, lr, #1
   1b9f4:	beq	1bbc0 <__assert_fail@plt+0xa4bc>
   1b9f8:	cmp	r8, #0
   1b9fc:	mov	r1, #0
   1ba00:	beq	1b9d0 <__assert_fail@plt+0xa2cc>
   1ba04:	umull	r4, r5, r9, r7
   1ba08:	mov	r3, #0
   1ba0c:	mov	r2, r5
   1ba10:	umlal	r2, r3, r8, r7
   1ba14:	cmp	r3, #0
   1ba18:	bne	1bd70 <__assert_fail@plt+0xa66c>
   1ba1c:	mov	r9, r4
   1ba20:	mov	r8, r2
   1ba24:	b	1b9dc <__assert_fail@plt+0xa2d8>
   1ba28:	asr	r3, r7, #31
   1ba2c:	mov	r2, r7
   1ba30:	mov	r6, #0
   1ba34:	mov	lr, #4
   1ba38:	mov	r0, r4
   1ba3c:	mov	ip, r5
   1ba40:	strd	r2, [sp, #8]
   1ba44:	b	1ba70 <__assert_fail@plt+0xa36c>
   1ba48:	umull	r2, r3, r9, r7
   1ba4c:	mov	r9, r2
   1ba50:	mov	r8, r3
   1ba54:	cmp	r1, #0
   1ba58:	beq	1ba68 <__assert_fail@plt+0xa364>
   1ba5c:	mvn	r9, #0
   1ba60:	mov	r6, #1
   1ba64:	mov	r8, r9
   1ba68:	subs	lr, lr, #1
   1ba6c:	beq	1bbc0 <__assert_fail@plt+0xa4bc>
   1ba70:	cmp	r8, #0
   1ba74:	mov	r1, #0
   1ba78:	beq	1ba48 <__assert_fail@plt+0xa344>
   1ba7c:	umull	r4, r5, r9, r7
   1ba80:	mov	r3, #0
   1ba84:	mov	r2, r5
   1ba88:	umlal	r2, r3, r8, r7
   1ba8c:	cmp	r3, #0
   1ba90:	bne	1bd8c <__assert_fail@plt+0xa688>
   1ba94:	mov	r9, r4
   1ba98:	mov	r8, r2
   1ba9c:	b	1ba54 <__assert_fail@plt+0xa350>
   1baa0:	asr	r3, r7, #31
   1baa4:	mov	r2, r7
   1baa8:	mov	r6, #0
   1baac:	mov	lr, #5
   1bab0:	mov	r0, r4
   1bab4:	mov	ip, r5
   1bab8:	strd	r2, [sp, #8]
   1babc:	b	1bae8 <__assert_fail@plt+0xa3e4>
   1bac0:	umull	r2, r3, r9, r7
   1bac4:	mov	r9, r2
   1bac8:	mov	r8, r3
   1bacc:	cmp	r1, #0
   1bad0:	beq	1bae0 <__assert_fail@plt+0xa3dc>
   1bad4:	mvn	r9, #0
   1bad8:	mov	r6, #1
   1badc:	mov	r8, r9
   1bae0:	subs	lr, lr, #1
   1bae4:	beq	1bbc0 <__assert_fail@plt+0xa4bc>
   1bae8:	cmp	r8, #0
   1baec:	mov	r1, #0
   1baf0:	beq	1bac0 <__assert_fail@plt+0xa3bc>
   1baf4:	umull	r4, r5, r9, r7
   1baf8:	mov	r3, #0
   1bafc:	mov	r2, r5
   1bb00:	umlal	r2, r3, r8, r7
   1bb04:	cmp	r3, #0
   1bb08:	bne	1bcf8 <__assert_fail@plt+0xa5f4>
   1bb0c:	mov	r9, r4
   1bb10:	mov	r8, r2
   1bb14:	b	1bacc <__assert_fail@plt+0xa3c8>
   1bb18:	lsr	r3, r8, #31
   1bb1c:	adds	r9, r9, r9
   1bb20:	adc	r8, r8, r8
   1bb24:	cmp	r3, #0
   1bb28:	beq	1b834 <__assert_fail@plt+0xa130>
   1bb2c:	b	1b878 <__assert_fail@plt+0xa174>
   1bb30:	lsr	r3, r8, #23
   1bb34:	lsl	r8, r8, #9
   1bb38:	cmp	r3, #0
   1bb3c:	lsl	r3, r9, #9
   1bb40:	orr	r8, r8, r9, lsr #23
   1bb44:	bne	1b878 <__assert_fail@plt+0xa174>
   1bb48:	mov	r9, r3
   1bb4c:	b	1b834 <__assert_fail@plt+0xa130>
   1bb50:	asr	r3, r7, #31
   1bb54:	mov	r2, r7
   1bb58:	cmp	r8, #0
   1bb5c:	mov	r1, #0
   1bb60:	strd	r2, [sp, #8]
   1bb64:	umull	r2, r3, r9, r7
   1bb68:	bne	1bc0c <__assert_fail@plt+0xa508>
   1bb6c:	mov	r0, r2
   1bb70:	mov	ip, r3
   1bb74:	cmp	r1, #0
   1bb78:	bne	1b878 <__assert_fail@plt+0xa174>
   1bb7c:	cmp	ip, #0
   1bb80:	bne	1bc54 <__assert_fail@plt+0xa550>
   1bb84:	umull	r2, r3, r0, r7
   1bb88:	mov	r6, r2
   1bb8c:	mov	r2, r3
   1bb90:	cmp	r1, #0
   1bb94:	mov	r9, r6
   1bb98:	mov	r8, r2
   1bb9c:	beq	1b834 <__assert_fail@plt+0xa130>
   1bba0:	b	1b878 <__assert_fail@plt+0xa174>
   1bba4:	lsr	r3, r8, #22
   1bba8:	lsl	r8, r8, #10
   1bbac:	cmp	r3, #0
   1bbb0:	lsl	r3, r9, #10
   1bbb4:	orr	r8, r8, r9, lsr #22
   1bbb8:	beq	1bb48 <__assert_fail@plt+0xa444>
   1bbbc:	b	1b878 <__assert_fail@plt+0xa174>
   1bbc0:	mov	r5, ip
   1bbc4:	orr	r4, r0, r6
   1bbc8:	b	1b834 <__assert_fail@plt+0xa130>
   1bbcc:	strd	r2, [sp, #8]
   1bbd0:	mov	r3, ip
   1bbd4:	ldr	r2, [sp, #12]
   1bbd8:	umlal	r2, r3, r8, r7
   1bbdc:	cmp	r3, #0
   1bbe0:	bne	1bd14 <__assert_fail@plt+0xa610>
   1bbe4:	mov	r8, r2
   1bbe8:	ldr	r9, [sp, #8]
   1bbec:	b	1b870 <__assert_fail@plt+0xa16c>
   1bbf0:	orr	r4, r6, ip
   1bbf4:	ldr	r5, [sp, #16]
   1bbf8:	b	1b834 <__assert_fail@plt+0xa130>
   1bbfc:	mov	r3, #2
   1bc00:	mov	r7, #1000	; 0x3e8
   1bc04:	str	r3, [sp, #4]
   1bc08:	b	1b6dc <__assert_fail@plt+0x9fd8>
   1bc0c:	strd	r2, [sp, #16]
   1bc10:	mov	r3, r1
   1bc14:	ldr	r2, [sp, #20]
   1bc18:	umlal	r2, r3, r8, r7
   1bc1c:	cmp	r3, #0
   1bc20:	bne	1bde4 <__assert_fail@plt+0xa6e0>
   1bc24:	mov	ip, r2
   1bc28:	ldr	r0, [sp, #16]
   1bc2c:	b	1bb74 <__assert_fail@plt+0xa470>
   1bc30:	mov	r2, r1
   1bc34:	mov	r3, ip
   1bc38:	umlal	r2, r3, r8, r7
   1bc3c:	cmp	r3, #0
   1bc40:	strd	r2, [sp, #16]
   1bc44:	bne	1bcb8 <__assert_fail@plt+0xa5b4>
   1bc48:	mov	r2, r0
   1bc4c:	ldr	r3, [sp, #16]
   1bc50:	b	1b7e8 <__assert_fail@plt+0xa0e4>
   1bc54:	umull	r8, r9, r0, r7
   1bc58:	mov	r3, r1
   1bc5c:	mov	r2, r9
   1bc60:	umlal	r2, r3, ip, r7
   1bc64:	cmp	r3, #0
   1bc68:	bne	1bdc4 <__assert_fail@plt+0xa6c0>
   1bc6c:	mov	r6, r8
   1bc70:	b	1bb90 <__assert_fail@plt+0xa48c>
   1bc74:	umull	r8, r9, ip, r7
   1bc78:	mov	r3, r0
   1bc7c:	mov	r2, r9
   1bc80:	umlal	r2, r3, r1, r7
   1bc84:	cmp	r3, #0
   1bc88:	bne	1be0c <__assert_fail@plt+0xa708>
   1bc8c:	mov	r6, r8
   1bc90:	b	1b824 <__assert_fail@plt+0xa120>
   1bc94:	umull	r8, r9, r2, r7
   1bc98:	mov	r1, ip
   1bc9c:	mov	r0, r9
   1bca0:	umlal	r0, r1, r3, r7
   1bca4:	cmp	r1, #0
   1bca8:	bne	1bcd8 <__assert_fail@plt+0xa5d4>
   1bcac:	mov	ip, r8
   1bcb0:	mov	r1, r0
   1bcb4:	b	1b808 <__assert_fail@plt+0xa104>
   1bcb8:	ldr	lr, [sp, #8]
   1bcbc:	mov	r2, r0
   1bcc0:	mov	ip, #1
   1bcc4:	ldr	r3, [sp, #12]
   1bcc8:	mul	r3, r9, r3
   1bccc:	mla	r3, lr, r8, r3
   1bcd0:	add	r3, r3, r1
   1bcd4:	b	1b7e8 <__assert_fail@plt+0xa0e4>
   1bcd8:	ldr	r1, [sp, #12]
   1bcdc:	mov	lr, #1
   1bce0:	mov	ip, r8
   1bce4:	mul	r1, r2, r1
   1bce8:	ldr	r2, [sp, #8]
   1bcec:	mla	r1, r3, r2, r1
   1bcf0:	add	r1, r1, r9
   1bcf4:	b	1b808 <__assert_fail@plt+0xa104>
   1bcf8:	ldrd	r2, [sp, #8]
   1bcfc:	mov	r1, #1
   1bd00:	mul	r3, r9, r3
   1bd04:	mov	r9, r4
   1bd08:	mla	r8, r2, r8, r3
   1bd0c:	add	r8, r8, r5
   1bd10:	b	1bacc <__assert_fail@plt+0xa3c8>
   1bd14:	mul	r3, r9, r1
   1bd18:	mov	ip, #1
   1bd1c:	mla	r8, r7, r8, r3
   1bd20:	ldrd	r6, [sp, #8]
   1bd24:	mov	r9, r6
   1bd28:	add	r8, r8, r7
   1bd2c:	b	1b870 <__assert_fail@plt+0xa16c>
   1bd30:	movw	r3, #62800	; 0xf550
   1bd34:	movt	r3, #1
   1bd38:	movw	r1, #62812	; 0xf55c
   1bd3c:	movt	r1, #1
   1bd40:	movw	r0, #62828	; 0xf56c
   1bd44:	movt	r0, #1
   1bd48:	mov	r2, #85	; 0x55
   1bd4c:	bl	11704 <__assert_fail@plt>
   1bd50:	ldr	r3, [sp, #12]
   1bd54:	mov	r1, #1
   1bd58:	mul	r2, r9, r3
   1bd5c:	ldr	r3, [sp, #8]
   1bd60:	mov	r9, r4
   1bd64:	mla	r8, r3, r8, r2
   1bd68:	add	r8, r8, r5
   1bd6c:	b	1b8ec <__assert_fail@plt+0xa1e8>
   1bd70:	ldrd	r2, [sp, #8]
   1bd74:	mov	r1, #1
   1bd78:	mul	r3, r9, r3
   1bd7c:	mov	r9, r4
   1bd80:	mla	r8, r2, r8, r3
   1bd84:	add	r8, r8, r5
   1bd88:	b	1b9dc <__assert_fail@plt+0xa2d8>
   1bd8c:	ldrd	r2, [sp, #8]
   1bd90:	mov	r1, #1
   1bd94:	mul	r3, r9, r3
   1bd98:	mov	r9, r4
   1bd9c:	mla	r8, r2, r8, r3
   1bda0:	add	r8, r8, r5
   1bda4:	b	1ba54 <__assert_fail@plt+0xa350>
   1bda8:	ldrd	r2, [sp, #8]
   1bdac:	mov	r1, #1
   1bdb0:	mul	r3, r9, r3
   1bdb4:	mov	r9, r4
   1bdb8:	mla	r8, r2, r8, r3
   1bdbc:	add	r8, r8, r5
   1bdc0:	b	1b964 <__assert_fail@plt+0xa260>
   1bdc4:	ldr	r3, [sp, #12]
   1bdc8:	mov	r6, r8
   1bdcc:	mov	r1, #1
   1bdd0:	mul	r2, r0, r3
   1bdd4:	ldr	r3, [sp, #8]
   1bdd8:	mla	r2, ip, r3, r2
   1bddc:	add	r2, r2, r9
   1bde0:	b	1bb90 <__assert_fail@plt+0xa48c>
   1bde4:	ldr	r3, [sp, #12]
   1bde8:	mov	r1, #1
   1bdec:	ldr	r2, [sp, #16]
   1bdf0:	mul	ip, r9, r3
   1bdf4:	ldr	r3, [sp, #8]
   1bdf8:	mov	r0, r2
   1bdfc:	mla	ip, r3, r8, ip
   1be00:	ldr	r3, [sp, #20]
   1be04:	add	ip, ip, r3
   1be08:	b	1bb74 <__assert_fail@plt+0xa470>
   1be0c:	ldr	r3, [sp, #12]
   1be10:	mov	r6, r8
   1be14:	mov	r0, #1
   1be18:	mul	r2, ip, r3
   1be1c:	ldr	r3, [sp, #8]
   1be20:	mla	r2, r1, r3, r2
   1be24:	add	r2, r2, r9
   1be28:	b	1b824 <__assert_fail@plt+0xa120>
   1be2c:	cmp	r1, #0
   1be30:	cmpne	r0, #0
   1be34:	beq	1be80 <__assert_fail@plt+0xa77c>
   1be38:	strd	r4, [sp, #-16]!
   1be3c:	umull	r4, r5, r0, r1
   1be40:	str	r6, [sp, #8]
   1be44:	str	lr, [sp, #12]
   1be48:	adds	r3, r5, #0
   1be4c:	movne	r3, #1
   1be50:	cmp	r4, #0
   1be54:	blt	1be60 <__assert_fail@plt+0xa75c>
   1be58:	cmp	r3, #0
   1be5c:	beq	1be8c <__assert_fail@plt+0xa788>
   1be60:	bl	1156c <__errno_location@plt>
   1be64:	mov	r3, #12
   1be68:	ldrd	r4, [sp]
   1be6c:	ldr	r6, [sp, #8]
   1be70:	add	sp, sp, #12
   1be74:	str	r3, [r0]
   1be78:	mov	r0, #0
   1be7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be80:	mov	r1, #1
   1be84:	mov	r0, r1
   1be88:	b	112e4 <calloc@plt>
   1be8c:	ldrd	r4, [sp]
   1be90:	ldr	r6, [sp, #8]
   1be94:	ldr	lr, [sp, #12]
   1be98:	add	sp, sp, #16
   1be9c:	b	112e4 <calloc@plt>
   1bea0:	cmp	r0, #0
   1bea4:	beq	1beb0 <__assert_fail@plt+0xa7ac>
   1bea8:	blt	1beb8 <__assert_fail@plt+0xa7b4>
   1beac:	b	114d0 <malloc@plt>
   1beb0:	mov	r0, #1
   1beb4:	b	114d0 <malloc@plt>
   1beb8:	str	r4, [sp, #-8]!
   1bebc:	str	lr, [sp, #4]
   1bec0:	bl	1156c <__errno_location@plt>
   1bec4:	mov	r3, #12
   1bec8:	ldr	r4, [sp]
   1becc:	add	sp, sp, #4
   1bed0:	str	r3, [r0]
   1bed4:	mov	r0, #0
   1bed8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bedc:	cmp	r0, #0
   1bee0:	beq	1bf08 <__assert_fail@plt+0xa804>
   1bee4:	cmp	r1, #0
   1bee8:	str	r4, [sp, #-8]!
   1beec:	str	lr, [sp, #4]
   1bef0:	beq	1bf10 <__assert_fail@plt+0xa80c>
   1bef4:	blt	1bf24 <__assert_fail@plt+0xa820>
   1bef8:	ldr	r4, [sp]
   1befc:	ldr	lr, [sp, #4]
   1bf00:	add	sp, sp, #8
   1bf04:	b	113d4 <realloc@plt>
   1bf08:	mov	r0, r1
   1bf0c:	b	1bea0 <__assert_fail@plt+0xa79c>
   1bf10:	bl	15214 <__assert_fail@plt+0x3b10>
   1bf14:	ldr	r4, [sp]
   1bf18:	add	sp, sp, #4
   1bf1c:	mov	r0, #0
   1bf20:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf24:	bl	1156c <__errno_location@plt>
   1bf28:	mov	r3, #12
   1bf2c:	str	r3, [r0]
   1bf30:	b	1bf14 <__assert_fail@plt+0xa810>
   1bf34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bf38:	mvn	r4, #0
   1bf3c:	strd	r6, [sp, #8]
   1bf40:	mov	r6, #1
   1bf44:	mov	ip, r6
   1bf48:	str	r8, [sp, #16]
   1bf4c:	str	lr, [sp, #20]
   1bf50:	mov	lr, #0
   1bf54:	add	r3, ip, lr
   1bf58:	add	r5, r0, r4
   1bf5c:	cmp	r3, r1
   1bf60:	bcs	1bf90 <__assert_fail@plt+0xa88c>
   1bf64:	ldrb	r5, [r5, ip]
   1bf68:	ldrb	r7, [r0, r3]
   1bf6c:	cmp	r7, r5
   1bf70:	bcs	1c008 <__assert_fail@plt+0xa904>
   1bf74:	mov	lr, r3
   1bf78:	mov	ip, #1
   1bf7c:	sub	r6, r3, r4
   1bf80:	add	r3, ip, lr
   1bf84:	cmp	r3, r1
   1bf88:	add	r5, r0, r4
   1bf8c:	bcc	1bf64 <__assert_fail@plt+0xa860>
   1bf90:	mov	r8, #1
   1bf94:	mov	lr, #0
   1bf98:	str	r6, [r2]
   1bf9c:	mov	ip, r8
   1bfa0:	mvn	r5, #0
   1bfa4:	add	r3, ip, lr
   1bfa8:	add	r6, r0, r5
   1bfac:	cmp	r1, r3
   1bfb0:	bls	1bfe0 <__assert_fail@plt+0xa8dc>
   1bfb4:	ldrb	r6, [r6, ip]
   1bfb8:	ldrb	r7, [r0, r3]
   1bfbc:	cmp	r7, r6
   1bfc0:	bls	1c020 <__assert_fail@plt+0xa91c>
   1bfc4:	mov	lr, r3
   1bfc8:	mov	ip, #1
   1bfcc:	sub	r8, r3, r5
   1bfd0:	add	r3, ip, lr
   1bfd4:	cmp	r1, r3
   1bfd8:	add	r6, r0, r5
   1bfdc:	bhi	1bfb4 <__assert_fail@plt+0xa8b0>
   1bfe0:	add	r0, r4, #1
   1bfe4:	add	r5, r5, #1
   1bfe8:	ldrd	r6, [sp, #8]
   1bfec:	cmp	r5, r0
   1bff0:	movcs	r0, r5
   1bff4:	ldrd	r4, [sp]
   1bff8:	strcs	r8, [r2]
   1bffc:	ldr	r8, [sp, #16]
   1c000:	add	sp, sp, #20
   1c004:	pop	{pc}		; (ldr pc, [sp], #4)
   1c008:	beq	1c038 <__assert_fail@plt+0xa934>
   1c00c:	mov	r6, #1
   1c010:	mov	r4, lr
   1c014:	mov	ip, r6
   1c018:	add	lr, lr, r6
   1c01c:	b	1bf54 <__assert_fail@plt+0xa850>
   1c020:	beq	1c04c <__assert_fail@plt+0xa948>
   1c024:	mov	r8, #1
   1c028:	mov	r5, lr
   1c02c:	mov	ip, r8
   1c030:	add	lr, lr, r8
   1c034:	b	1bfa4 <__assert_fail@plt+0xa8a0>
   1c038:	cmp	ip, r6
   1c03c:	add	ip, ip, #1
   1c040:	moveq	lr, r3
   1c044:	moveq	ip, #1
   1c048:	b	1bf54 <__assert_fail@plt+0xa850>
   1c04c:	cmp	ip, r8
   1c050:	add	ip, ip, #1
   1c054:	moveq	lr, r3
   1c058:	moveq	ip, #1
   1c05c:	b	1bfa4 <__assert_fail@plt+0xa8a0>
   1c060:	cmp	r3, #2
   1c064:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c068:	mov	r4, r3
   1c06c:	strd	r6, [sp, #8]
   1c070:	mov	r5, r0
   1c074:	strd	r8, [sp, #16]
   1c078:	strd	sl, [sp, #24]
   1c07c:	mov	fp, r1
   1c080:	mov	sl, r2
   1c084:	str	lr, [sp, #32]
   1c088:	sub	sp, sp, #1056	; 0x420
   1c08c:	sub	sp, sp, #12
   1c090:	bls	1c470 <__assert_fail@plt+0xad6c>
   1c094:	add	r6, sp, #40	; 0x28
   1c098:	mov	r1, r3
   1c09c:	sub	r2, r6, #4
   1c0a0:	mov	r0, sl
   1c0a4:	bl	1bf34 <__assert_fail@plt+0xa830>
   1c0a8:	ldr	r3, [sp, #36]	; 0x24
   1c0ac:	str	r3, [sp]
   1c0b0:	str	r0, [sp, #4]
   1c0b4:	add	r2, sp, #1056	; 0x420
   1c0b8:	sub	r3, r6, #4
   1c0bc:	add	r2, r2, #4
   1c0c0:	str	r4, [r3, #4]!
   1c0c4:	cmp	r2, r3
   1c0c8:	bne	1c0c0 <__assert_fail@plt+0xa9bc>
   1c0cc:	ldr	r3, [sp]
   1c0d0:	cmp	r4, #0
   1c0d4:	add	r1, sl, r3
   1c0d8:	beq	1c290 <__assert_fail@plt+0xab8c>
   1c0dc:	sub	r3, r4, #1
   1c0e0:	sub	r2, sl, #1
   1c0e4:	add	ip, sl, r3
   1c0e8:	str	r3, [sp, #8]
   1c0ec:	ldrb	r0, [r2, #1]!
   1c0f0:	add	lr, sp, #1056	; 0x420
   1c0f4:	add	lr, lr, #8
   1c0f8:	mvn	r3, r2
   1c0fc:	add	r0, lr, r0, lsl #2
   1c100:	cmp	r2, ip
   1c104:	add	r3, r3, r4
   1c108:	add	r3, sl, r3
   1c10c:	str	r3, [r0, #-1024]	; 0xfffffc00
   1c110:	bne	1c0ec <__assert_fail@plt+0xa9e8>
   1c114:	mov	r0, sl
   1c118:	ldr	r2, [sp, #4]
   1c11c:	bl	11398 <memcmp@plt>
   1c120:	cmp	r0, #0
   1c124:	beq	1c2d4 <__assert_fail@plt+0xabd0>
   1c128:	ldr	r2, [sp, #4]
   1c12c:	sub	r8, r4, #2
   1c130:	mov	r7, #0
   1c134:	add	r8, r8, sl
   1c138:	rsb	r9, sl, #1
   1c13c:	sub	r3, r4, r2
   1c140:	sub	r1, r2, #1
   1c144:	cmp	r3, r2
   1c148:	movcc	r3, r2
   1c14c:	str	r1, [sp, #16]
   1c150:	add	r1, sl, r1
   1c154:	add	r3, r3, #1
   1c158:	str	r1, [sp, #12]
   1c15c:	str	r3, [sp, #20]
   1c160:	sub	r3, r4, #1
   1c164:	str	r3, [sp, #4]
   1c168:	mov	r3, r2
   1c16c:	add	r2, sl, r2
   1c170:	str	r2, [sp]
   1c174:	rsb	r2, r3, #1
   1c178:	str	r2, [sp, #8]
   1c17c:	mov	r2, fp
   1c180:	mov	fp, r3
   1c184:	b	1c18c <__assert_fail@plt+0xaa88>
   1c188:	mov	r2, r6
   1c18c:	add	r6, r7, r4
   1c190:	add	r0, r5, r2
   1c194:	mov	r1, #0
   1c198:	sub	r2, r6, r2
   1c19c:	bl	115cc <memchr@plt>
   1c1a0:	adds	r2, r6, #0
   1c1a4:	movne	r2, #1
   1c1a8:	cmp	r0, #0
   1c1ac:	moveq	r0, r2
   1c1b0:	movne	r0, #0
   1c1b4:	cmp	r0, #0
   1c1b8:	beq	1c2a4 <__assert_fail@plt+0xaba0>
   1c1bc:	add	r2, r5, r6
   1c1c0:	add	r3, sp, #1056	; 0x420
   1c1c4:	ldrb	r2, [r2, #-1]
   1c1c8:	add	r3, r3, #8
   1c1cc:	add	r2, r3, r2, lsl #2
   1c1d0:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   1c1d4:	cmp	r2, #0
   1c1d8:	addne	r7, r7, r2
   1c1dc:	bne	1c188 <__assert_fail@plt+0xaa84>
   1c1e0:	ldr	r3, [sp, #4]
   1c1e4:	cmp	fp, r3
   1c1e8:	bcs	1c230 <__assert_fail@plt+0xab2c>
   1c1ec:	ldr	r3, [sp]
   1c1f0:	add	r2, r7, fp
   1c1f4:	add	r1, r5, r2
   1c1f8:	ldrb	r2, [r5, r2]
   1c1fc:	ldrb	r0, [r3]
   1c200:	cmp	r2, r0
   1c204:	movne	lr, fp
   1c208:	bne	1c280 <__assert_fail@plt+0xab7c>
   1c20c:	ldr	r2, [sp]
   1c210:	b	1c224 <__assert_fail@plt+0xab20>
   1c214:	ldrb	r0, [r2, #1]!
   1c218:	ldrb	r3, [r1, #1]!
   1c21c:	cmp	r0, r3
   1c220:	bne	1c280 <__assert_fail@plt+0xab7c>
   1c224:	cmp	r8, r2
   1c228:	add	lr, r9, r2
   1c22c:	bne	1c214 <__assert_fail@plt+0xab10>
   1c230:	ldr	r3, [sp, #16]
   1c234:	cmn	r3, #1
   1c238:	beq	1c278 <__assert_fail@plt+0xab74>
   1c23c:	add	r2, r7, r3
   1c240:	ldr	r3, [sp, #12]
   1c244:	add	r1, r5, r2
   1c248:	ldrb	r2, [r5, r2]
   1c24c:	ldrb	r0, [r3]
   1c250:	cmp	r2, r0
   1c254:	ldreq	r2, [sp, #12]
   1c258:	beq	1c270 <__assert_fail@plt+0xab6c>
   1c25c:	b	1c2c8 <__assert_fail@plt+0xabc4>
   1c260:	ldrb	r0, [r2, #-1]!
   1c264:	ldrb	r3, [r1, #-1]!
   1c268:	cmp	r0, r3
   1c26c:	bne	1c2c8 <__assert_fail@plt+0xabc4>
   1c270:	cmp	sl, r2
   1c274:	bne	1c260 <__assert_fail@plt+0xab5c>
   1c278:	add	r0, r5, r7
   1c27c:	b	1c2a8 <__assert_fail@plt+0xaba4>
   1c280:	ldr	r3, [sp, #8]
   1c284:	add	r7, r3, r7
   1c288:	add	r7, lr, r7
   1c28c:	b	1c188 <__assert_fail@plt+0xaa84>
   1c290:	mov	r0, sl
   1c294:	ldr	r2, [sp, #4]
   1c298:	bl	11398 <memcmp@plt>
   1c29c:	cmp	r0, #0
   1c2a0:	bne	1c128 <__assert_fail@plt+0xaa24>
   1c2a4:	mov	r0, #0
   1c2a8:	add	sp, sp, #1056	; 0x420
   1c2ac:	add	sp, sp, #12
   1c2b0:	ldrd	r4, [sp]
   1c2b4:	ldrd	r6, [sp, #8]
   1c2b8:	ldrd	r8, [sp, #16]
   1c2bc:	ldrd	sl, [sp, #24]
   1c2c0:	add	sp, sp, #32
   1c2c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2c8:	ldr	r3, [sp, #20]
   1c2cc:	add	r7, r7, r3
   1c2d0:	b	1c188 <__assert_fail@plt+0xaa84>
   1c2d4:	ldr	r2, [sp, #4]
   1c2d8:	sub	r8, r4, #2
   1c2dc:	rsb	r9, sl, #1
   1c2e0:	add	r8, sl, r8
   1c2e4:	mov	r7, r0
   1c2e8:	str	sl, [sp, #12]
   1c2ec:	sub	r3, r2, #1
   1c2f0:	str	r3, [sp, #28]
   1c2f4:	add	r3, sl, r3
   1c2f8:	mov	sl, r0
   1c2fc:	str	r3, [sp, #24]
   1c300:	ldr	r3, [sp]
   1c304:	sub	r3, r4, r3
   1c308:	str	r3, [sp, #20]
   1c30c:	rsb	r3, r2, #1
   1c310:	mov	r2, fp
   1c314:	str	r3, [sp, #16]
   1c318:	b	1c338 <__assert_fail@plt+0xac34>
   1c31c:	ldr	r2, [sp]
   1c320:	cmp	sl, #0
   1c324:	cmpne	r3, r2
   1c328:	mov	sl, #0
   1c32c:	ldrcc	r3, [sp, #20]
   1c330:	add	r7, r7, r3
   1c334:	mov	r2, r6
   1c338:	add	r6, r7, r4
   1c33c:	add	r0, r5, r2
   1c340:	mov	r1, #0
   1c344:	sub	r2, r6, r2
   1c348:	bl	115cc <memchr@plt>
   1c34c:	adds	r3, r6, #0
   1c350:	movne	r3, #1
   1c354:	cmp	r0, #0
   1c358:	moveq	r0, r3
   1c35c:	movne	r0, #0
   1c360:	cmp	r0, #0
   1c364:	beq	1c2a4 <__assert_fail@plt+0xaba0>
   1c368:	add	r3, r5, r6
   1c36c:	add	r2, sp, #1056	; 0x420
   1c370:	ldrb	r3, [r3, #-1]
   1c374:	add	r2, r2, #8
   1c378:	add	r3, r2, r3, lsl #2
   1c37c:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   1c380:	cmp	r3, #0
   1c384:	bne	1c31c <__assert_fail@plt+0xac18>
   1c388:	ldr	r3, [sp, #4]
   1c38c:	cmp	sl, r3
   1c390:	movcc	r0, r3
   1c394:	ldr	r3, [sp, #8]
   1c398:	movcs	r0, sl
   1c39c:	cmp	r0, r3
   1c3a0:	bcs	1c3e4 <__assert_fail@plt+0xace0>
   1c3a4:	ldr	r3, [sp, #12]
   1c3a8:	add	r1, r7, r0
   1c3ac:	add	r2, r5, r1
   1c3b0:	ldrb	r1, [r5, r1]
   1c3b4:	ldrb	ip, [r3, r0]
   1c3b8:	add	r3, r3, r0
   1c3bc:	cmp	ip, r1
   1c3c0:	beq	1c3d8 <__assert_fail@plt+0xacd4>
   1c3c4:	b	1c45c <__assert_fail@plt+0xad58>
   1c3c8:	ldrb	ip, [r3, #1]!
   1c3cc:	ldrb	r1, [r2, #1]!
   1c3d0:	cmp	ip, r1
   1c3d4:	bne	1c45c <__assert_fail@plt+0xad58>
   1c3d8:	cmp	r8, r3
   1c3dc:	add	r0, r9, r3
   1c3e0:	bne	1c3c8 <__assert_fail@plt+0xacc4>
   1c3e4:	ldr	r3, [sp, #4]
   1c3e8:	cmp	sl, r3
   1c3ec:	bcs	1c48c <__assert_fail@plt+0xad88>
   1c3f0:	ldr	r3, [sp, #28]
   1c3f4:	add	r2, r7, r3
   1c3f8:	ldr	r3, [sp, #24]
   1c3fc:	ldrb	r1, [r3]
   1c400:	add	r3, r5, r2
   1c404:	ldrb	r2, [r5, r2]
   1c408:	cmp	r1, r2
   1c40c:	bne	1c48c <__assert_fail@plt+0xad88>
   1c410:	add	ip, r7, sl
   1c414:	add	fp, r5, r7
   1c418:	ldr	r2, [sp, #24]
   1c41c:	add	ip, ip, r5
   1c420:	b	1c434 <__assert_fail@plt+0xad30>
   1c424:	ldrb	r0, [r2, #-1]!
   1c428:	ldrb	r1, [r3, #-1]!
   1c42c:	cmp	r0, r1
   1c430:	bne	1c440 <__assert_fail@plt+0xad3c>
   1c434:	cmp	ip, r3
   1c438:	sub	lr, r3, fp
   1c43c:	bne	1c424 <__assert_fail@plt+0xad20>
   1c440:	add	sl, sl, #1
   1c444:	cmp	sl, lr
   1c448:	bhi	1c278 <__assert_fail@plt+0xab74>
   1c44c:	ldr	r3, [sp]
   1c450:	ldr	sl, [sp, #20]
   1c454:	add	r7, r7, r3
   1c458:	b	1c334 <__assert_fail@plt+0xac30>
   1c45c:	ldr	r3, [sp, #16]
   1c460:	mov	sl, #0
   1c464:	add	r7, r3, r7
   1c468:	add	r7, r0, r7
   1c46c:	b	1c334 <__assert_fail@plt+0xac30>
   1c470:	mov	r3, #1
   1c474:	sub	r2, r4, #1
   1c478:	add	r6, sp, #40	; 0x28
   1c47c:	str	r3, [sp]
   1c480:	str	r2, [sp, #4]
   1c484:	str	r3, [sp, #36]	; 0x24
   1c488:	b	1c0b4 <__assert_fail@plt+0xa9b0>
   1c48c:	ldr	lr, [sp, #4]
   1c490:	b	1c440 <__assert_fail@plt+0xad3c>
   1c494:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c498:	strd	r6, [sp, #8]
   1c49c:	strd	r8, [sp, #16]
   1c4a0:	strd	sl, [sp, #24]
   1c4a4:	str	lr, [sp, #32]
   1c4a8:	sub	sp, sp, #44	; 0x2c
   1c4ac:	ldrb	r4, [r0]
   1c4b0:	ldrb	r3, [r1]
   1c4b4:	cmp	r4, #0
   1c4b8:	beq	1c874 <__assert_fail@plt+0xb170>
   1c4bc:	cmp	r3, #0
   1c4c0:	beq	1c58c <__assert_fail@plt+0xae88>
   1c4c4:	mov	r8, r0
   1c4c8:	add	r2, r1, #1
   1c4cc:	mov	ip, r3
   1c4d0:	mov	lr, #1
   1c4d4:	b	1c4e0 <__assert_fail@plt+0xaddc>
   1c4d8:	cmp	ip, #0
   1c4dc:	beq	1c508 <__assert_fail@plt+0xae04>
   1c4e0:	cmp	ip, r4
   1c4e4:	movne	lr, #0
   1c4e8:	andeq	lr, lr, #1
   1c4ec:	ldrb	r4, [r8, #1]!
   1c4f0:	mov	r5, r2
   1c4f4:	ldrb	ip, [r2], #1
   1c4f8:	cmp	r4, #0
   1c4fc:	bne	1c4d8 <__assert_fail@plt+0xadd4>
   1c500:	cmp	ip, #0
   1c504:	bne	1c56c <__assert_fail@plt+0xae68>
   1c508:	cmp	lr, #0
   1c50c:	bne	1c58c <__assert_fail@plt+0xae88>
   1c510:	mov	r7, r1
   1c514:	mov	r6, r0
   1c518:	mov	r1, r3
   1c51c:	add	r0, r0, #1
   1c520:	bl	11548 <strchr@plt>
   1c524:	subs	r4, r0, #0
   1c528:	sub	r7, r5, r7
   1c52c:	beq	1c56c <__assert_fail@plt+0xae68>
   1c530:	cmp	r7, #1
   1c534:	beq	1c56c <__assert_fail@plt+0xae68>
   1c538:	add	r6, r6, r7
   1c53c:	sub	r5, r5, r7
   1c540:	cmp	r6, r4
   1c544:	subcs	r6, r6, r4
   1c548:	movcc	r6, #1
   1c54c:	cmp	r7, #31
   1c550:	bls	1c594 <__assert_fail@plt+0xae90>
   1c554:	mov	r0, r4
   1c558:	mov	r3, r7
   1c55c:	mov	r2, r5
   1c560:	mov	r1, r6
   1c564:	bl	1c060 <__assert_fail@plt+0xa95c>
   1c568:	mov	r4, r0
   1c56c:	mov	r0, r4
   1c570:	add	sp, sp, #44	; 0x2c
   1c574:	ldrd	r4, [sp]
   1c578:	ldrd	r6, [sp, #8]
   1c57c:	ldrd	r8, [sp, #16]
   1c580:	ldrd	sl, [sp, #24]
   1c584:	add	sp, sp, #32
   1c588:	pop	{pc}		; (ldr pc, [sp], #4)
   1c58c:	mov	r4, r0
   1c590:	b	1c56c <__assert_fail@plt+0xae68>
   1c594:	cmp	r7, #2
   1c598:	bls	1c884 <__assert_fail@plt+0xb180>
   1c59c:	add	r2, sp, #36	; 0x24
   1c5a0:	mov	r1, r7
   1c5a4:	mov	r0, r5
   1c5a8:	bl	1bf34 <__assert_fail@plt+0xa830>
   1c5ac:	ldr	r3, [sp, #36]	; 0x24
   1c5b0:	mov	r8, r0
   1c5b4:	str	r3, [sp, #16]
   1c5b8:	ldr	r3, [sp, #16]
   1c5bc:	mov	r2, r8
   1c5c0:	mov	r0, r5
   1c5c4:	add	r1, r5, r3
   1c5c8:	bl	11398 <memcmp@plt>
   1c5cc:	cmp	r0, #0
   1c5d0:	bne	1c734 <__assert_fail@plt+0xb030>
   1c5d4:	sub	r2, r8, #1
   1c5d8:	mov	r3, r8
   1c5dc:	str	r7, [sp, #4]
   1c5e0:	sub	r8, r7, #1
   1c5e4:	rsb	r9, r5, #1
   1c5e8:	str	r5, [sp, #8]
   1c5ec:	str	r2, [sp, #20]
   1c5f0:	add	r2, r5, r2
   1c5f4:	add	r8, r8, r5
   1c5f8:	mov	sl, r0
   1c5fc:	mov	r5, r0
   1c600:	str	r2, [sp, #28]
   1c604:	ldr	r2, [sp, #16]
   1c608:	sub	r2, r7, r2
   1c60c:	mov	r7, r3
   1c610:	str	r2, [sp, #24]
   1c614:	rsb	r2, r3, #1
   1c618:	str	r2, [sp, #12]
   1c61c:	mov	r2, r6
   1c620:	ldr	r3, [sp, #4]
   1c624:	add	r0, r4, r2
   1c628:	mov	r1, #0
   1c62c:	add	fp, r3, sl
   1c630:	sub	r2, fp, r2
   1c634:	bl	115cc <memchr@plt>
   1c638:	clz	r0, r0
   1c63c:	cmp	fp, #0
   1c640:	lsr	r0, r0, #5
   1c644:	moveq	r0, #0
   1c648:	cmp	r0, #0
   1c64c:	beq	1c58c <__assert_fail@plt+0xae88>
   1c650:	ldr	r3, [sp, #4]
   1c654:	cmp	r7, r5
   1c658:	movcs	r0, r7
   1c65c:	movcc	r0, r5
   1c660:	cmp	r3, r0
   1c664:	bls	1c6a8 <__assert_fail@plt+0xafa4>
   1c668:	ldr	r3, [sp, #8]
   1c66c:	add	r1, r0, sl
   1c670:	add	r2, r4, r1
   1c674:	ldrb	r1, [r4, r1]
   1c678:	ldrb	ip, [r3, r0]
   1c67c:	add	r3, r3, r0
   1c680:	cmp	r1, ip
   1c684:	beq	1c69c <__assert_fail@plt+0xaf98>
   1c688:	b	1c720 <__assert_fail@plt+0xb01c>
   1c68c:	ldrb	ip, [r3, #1]!
   1c690:	ldrb	r1, [r2, #1]!
   1c694:	cmp	ip, r1
   1c698:	bne	1c720 <__assert_fail@plt+0xb01c>
   1c69c:	cmp	r8, r3
   1c6a0:	add	r0, r9, r3
   1c6a4:	bne	1c68c <__assert_fail@plt+0xaf88>
   1c6a8:	cmp	r7, r5
   1c6ac:	bls	1c89c <__assert_fail@plt+0xb198>
   1c6b0:	ldr	r3, [sp, #20]
   1c6b4:	ldr	r0, [sp, #28]
   1c6b8:	add	r2, sl, r3
   1c6bc:	add	r3, r4, r2
   1c6c0:	ldrb	r2, [r4, r2]
   1c6c4:	ldrb	r1, [r0]
   1c6c8:	cmp	r1, r2
   1c6cc:	bne	1c89c <__assert_fail@plt+0xb198>
   1c6d0:	add	ip, r5, sl
   1c6d4:	mov	r2, r0
   1c6d8:	add	ip, ip, r4
   1c6dc:	add	r6, r4, sl
   1c6e0:	b	1c6f4 <__assert_fail@plt+0xaff0>
   1c6e4:	ldrb	r0, [r2, #-1]!
   1c6e8:	ldrb	r1, [r3, #-1]!
   1c6ec:	cmp	r0, r1
   1c6f0:	bne	1c700 <__assert_fail@plt+0xaffc>
   1c6f4:	cmp	ip, r3
   1c6f8:	sub	lr, r3, r6
   1c6fc:	bne	1c6e4 <__assert_fail@plt+0xafe0>
   1c700:	add	r5, r5, #1
   1c704:	cmp	r5, lr
   1c708:	bhi	1c84c <__assert_fail@plt+0xb148>
   1c70c:	ldr	r3, [sp, #16]
   1c710:	ldr	r5, [sp, #24]
   1c714:	add	sl, sl, r3
   1c718:	mov	r2, fp
   1c71c:	b	1c620 <__assert_fail@plt+0xaf1c>
   1c720:	ldr	r3, [sp, #12]
   1c724:	mov	r5, #0
   1c728:	add	sl, r3, sl
   1c72c:	add	sl, r0, sl
   1c730:	b	1c718 <__assert_fail@plt+0xb014>
   1c734:	sub	r3, r7, r8
   1c738:	mov	r2, r8
   1c73c:	cmp	r3, r8
   1c740:	sub	r1, r8, #1
   1c744:	movcc	r3, r2
   1c748:	sub	r8, r7, #1
   1c74c:	add	r3, r3, #1
   1c750:	add	r8, r8, r5
   1c754:	str	r1, [sp, #12]
   1c758:	mov	sl, #0
   1c75c:	add	r1, r5, r1
   1c760:	str	r3, [sp, #16]
   1c764:	mov	r3, r2
   1c768:	add	r2, r5, r2
   1c76c:	rsb	r9, r5, #1
   1c770:	str	r2, [sp, #4]
   1c774:	rsb	r2, r3, #1
   1c778:	str	r2, [sp, #8]
   1c77c:	mov	r2, r6
   1c780:	mov	r6, r3
   1c784:	str	r1, [sp, #20]
   1c788:	add	fp, r7, sl
   1c78c:	add	r0, r4, r2
   1c790:	mov	r1, #0
   1c794:	sub	r2, fp, r2
   1c798:	bl	115cc <memchr@plt>
   1c79c:	clz	r0, r0
   1c7a0:	cmp	fp, #0
   1c7a4:	lsr	r0, r0, #5
   1c7a8:	moveq	r0, #0
   1c7ac:	cmp	r0, #0
   1c7b0:	beq	1c58c <__assert_fail@plt+0xae88>
   1c7b4:	cmp	r7, r6
   1c7b8:	bls	1c800 <__assert_fail@plt+0xb0fc>
   1c7bc:	ldr	r3, [sp, #4]
   1c7c0:	add	r2, r6, sl
   1c7c4:	add	r1, r4, r2
   1c7c8:	ldrb	r2, [r4, r2]
   1c7cc:	ldrb	r0, [r3]
   1c7d0:	cmp	r2, r0
   1c7d4:	movne	lr, r6
   1c7d8:	bne	1c854 <__assert_fail@plt+0xb150>
   1c7dc:	ldr	r2, [sp, #4]
   1c7e0:	b	1c7f4 <__assert_fail@plt+0xb0f0>
   1c7e4:	ldrb	r0, [r2, #1]!
   1c7e8:	ldrb	r3, [r1, #1]!
   1c7ec:	cmp	r0, r3
   1c7f0:	bne	1c854 <__assert_fail@plt+0xb150>
   1c7f4:	cmp	r2, r8
   1c7f8:	add	lr, r9, r2
   1c7fc:	bne	1c7e4 <__assert_fail@plt+0xb0e0>
   1c800:	ldr	r3, [sp, #12]
   1c804:	cmn	r3, #1
   1c808:	beq	1c84c <__assert_fail@plt+0xb148>
   1c80c:	ldr	r3, [sp, #12]
   1c810:	add	r2, sl, r3
   1c814:	ldr	r3, [sp, #20]
   1c818:	add	r1, r4, r2
   1c81c:	ldrb	r2, [r4, r2]
   1c820:	ldrb	r0, [r3]
   1c824:	cmp	r2, r0
   1c828:	bne	1c868 <__assert_fail@plt+0xb164>
   1c82c:	mov	r2, r3
   1c830:	b	1c844 <__assert_fail@plt+0xb140>
   1c834:	ldrb	r0, [r2, #-1]!
   1c838:	ldrb	r3, [r1, #-1]!
   1c83c:	cmp	r0, r3
   1c840:	bne	1c868 <__assert_fail@plt+0xb164>
   1c844:	cmp	r5, r2
   1c848:	bne	1c834 <__assert_fail@plt+0xb130>
   1c84c:	add	r4, r4, sl
   1c850:	b	1c56c <__assert_fail@plt+0xae68>
   1c854:	ldr	r3, [sp, #8]
   1c858:	add	sl, r3, sl
   1c85c:	add	sl, lr, sl
   1c860:	mov	r2, fp
   1c864:	b	1c788 <__assert_fail@plt+0xb084>
   1c868:	ldr	r3, [sp, #16]
   1c86c:	add	sl, sl, r3
   1c870:	b	1c860 <__assert_fail@plt+0xb15c>
   1c874:	cmp	r3, #0
   1c878:	moveq	r4, r0
   1c87c:	movne	r4, #0
   1c880:	b	1c56c <__assert_fail@plt+0xae68>
   1c884:	mov	r3, #1
   1c888:	sub	r2, r7, #1
   1c88c:	mov	r8, r2
   1c890:	str	r3, [sp, #16]
   1c894:	str	r3, [sp, #36]	; 0x24
   1c898:	b	1c5b8 <__assert_fail@plt+0xaeb4>
   1c89c:	mov	lr, r7
   1c8a0:	b	1c700 <__assert_fail@plt+0xaffc>
   1c8a4:	mov	r0, #1
   1c8a8:	b	13f64 <__assert_fail@plt+0x2860>
   1c8ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c8b0:	mov	r5, r1
   1c8b4:	mov	r4, r2
   1c8b8:	strd	r6, [sp, #8]
   1c8bc:	mov	r7, r3
   1c8c0:	strd	r8, [sp, #16]
   1c8c4:	strd	sl, [sp, #24]
   1c8c8:	mov	sl, r0
   1c8cc:	str	lr, [sp, #32]
   1c8d0:	sub	sp, sp, #12
   1c8d4:	str	r2, [sp]
   1c8d8:	bl	1153c <strlen@plt>
   1c8dc:	ldr	fp, [r5]
   1c8e0:	cmp	fp, #0
   1c8e4:	beq	1c9b4 <__assert_fail@plt+0xb2b0>
   1c8e8:	mov	r6, #0
   1c8ec:	mov	r8, r0
   1c8f0:	mvn	r9, #0
   1c8f4:	str	r6, [sp, #4]
   1c8f8:	b	1c924 <__assert_fail@plt+0xb220>
   1c8fc:	bl	11398 <memcmp@plt>
   1c900:	ldr	r3, [sp, #4]
   1c904:	cmp	r0, #0
   1c908:	movne	r3, #1
   1c90c:	str	r3, [sp, #4]
   1c910:	ldr	fp, [r5, #4]!
   1c914:	add	r6, r6, #1
   1c918:	add	r4, r4, r7
   1c91c:	cmp	fp, #0
   1c920:	beq	1c980 <__assert_fail@plt+0xb27c>
   1c924:	mov	r2, r8
   1c928:	mov	r1, sl
   1c92c:	mov	r0, fp
   1c930:	bl	116d4 <strncmp@plt>
   1c934:	cmp	r0, #0
   1c938:	mov	r0, fp
   1c93c:	bne	1c910 <__assert_fail@plt+0xb20c>
   1c940:	bl	1153c <strlen@plt>
   1c944:	ldr	r3, [sp]
   1c948:	cmp	r0, r8
   1c94c:	mov	r2, r7
   1c950:	mov	r1, r4
   1c954:	mla	r0, r7, r9, r3
   1c958:	beq	1c9ac <__assert_fail@plt+0xb2a8>
   1c95c:	cmn	r9, #1
   1c960:	moveq	r9, r6
   1c964:	beq	1c910 <__assert_fail@plt+0xb20c>
   1c968:	ldr	r3, [sp]
   1c96c:	cmp	r3, #0
   1c970:	bne	1c8fc <__assert_fail@plt+0xb1f8>
   1c974:	mov	r3, #1
   1c978:	str	r3, [sp, #4]
   1c97c:	b	1c910 <__assert_fail@plt+0xb20c>
   1c980:	ldr	r3, [sp, #4]
   1c984:	cmp	r3, #0
   1c988:	mvnne	r9, #1
   1c98c:	mov	r0, r9
   1c990:	add	sp, sp, #12
   1c994:	ldrd	r4, [sp]
   1c998:	ldrd	r6, [sp, #8]
   1c99c:	ldrd	r8, [sp, #16]
   1c9a0:	ldrd	sl, [sp, #24]
   1c9a4:	add	sp, sp, #32
   1c9a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9ac:	mov	r9, r6
   1c9b0:	b	1c98c <__assert_fail@plt+0xb288>
   1c9b4:	mvn	r9, #0
   1c9b8:	b	1c98c <__assert_fail@plt+0xb288>
   1c9bc:	strd	r4, [sp, #-16]!
   1c9c0:	str	r6, [sp, #8]
   1c9c4:	mov	r6, r0
   1c9c8:	ldr	r0, [r1]
   1c9cc:	str	lr, [sp, #12]
   1c9d0:	cmp	r0, #0
   1c9d4:	beq	1ca18 <__assert_fail@plt+0xb314>
   1c9d8:	mov	r4, r1
   1c9dc:	mov	r5, #0
   1c9e0:	b	1c9f4 <__assert_fail@plt+0xb2f0>
   1c9e4:	ldr	r0, [r4, #4]!
   1c9e8:	add	r5, r5, #1
   1c9ec:	cmp	r0, #0
   1c9f0:	beq	1ca18 <__assert_fail@plt+0xb314>
   1c9f4:	mov	r1, r6
   1c9f8:	bl	11320 <strcmp@plt>
   1c9fc:	cmp	r0, #0
   1ca00:	bne	1c9e4 <__assert_fail@plt+0xb2e0>
   1ca04:	mov	r0, r5
   1ca08:	ldrd	r4, [sp]
   1ca0c:	ldr	r6, [sp, #8]
   1ca10:	add	sp, sp, #12
   1ca14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca18:	ldrd	r4, [sp]
   1ca1c:	mvn	r0, #0
   1ca20:	ldr	r6, [sp, #8]
   1ca24:	add	sp, sp, #12
   1ca28:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca2c:	cmn	r2, #1
   1ca30:	strd	r4, [sp, #-16]!
   1ca34:	mov	r5, r1
   1ca38:	movweq	r1, #62868	; 0xf594
   1ca3c:	movwne	r1, #62896	; 0xf5b0
   1ca40:	str	r6, [sp, #8]
   1ca44:	movteq	r1, #1
   1ca48:	movtne	r1, #1
   1ca4c:	str	lr, [sp, #12]
   1ca50:	mov	r6, r0
   1ca54:	sub	sp, sp, #8
   1ca58:	mov	r2, #5
   1ca5c:	mov	r0, #0
   1ca60:	bl	113bc <dcgettext@plt>
   1ca64:	mov	r4, r0
   1ca68:	mov	r2, r5
   1ca6c:	mov	r1, #8
   1ca70:	mov	r0, #0
   1ca74:	bl	1a3a4 <__assert_fail@plt+0x8ca0>
   1ca78:	mov	r5, r0
   1ca7c:	mov	r1, r6
   1ca80:	mov	r0, #1
   1ca84:	bl	1a6d4 <__assert_fail@plt+0x8fd0>
   1ca88:	mov	r1, #0
   1ca8c:	mov	r3, r5
   1ca90:	str	r0, [sp]
   1ca94:	mov	r2, r4
   1ca98:	mov	r0, r1
   1ca9c:	bl	11494 <error@plt>
   1caa0:	add	sp, sp, #8
   1caa4:	ldrd	r4, [sp]
   1caa8:	ldr	r6, [sp, #8]
   1caac:	add	sp, sp, #12
   1cab0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cab4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cab8:	mov	r4, r1
   1cabc:	movw	r1, #62928	; 0xf5d0
   1cac0:	movt	r1, #1
   1cac4:	strd	r6, [sp, #8]
   1cac8:	mov	r6, r0
   1cacc:	mov	r7, r2
   1cad0:	mov	r0, #0
   1cad4:	strd	r8, [sp, #16]
   1cad8:	mov	r2, #5
   1cadc:	strd	sl, [sp, #24]
   1cae0:	movw	sl, #816	; 0x330
   1cae4:	movt	sl, #3
   1cae8:	str	lr, [sp, #32]
   1caec:	sub	sp, sp, #12
   1caf0:	bl	113bc <dcgettext@plt>
   1caf4:	ldr	r1, [sl]
   1caf8:	bl	112f0 <fputs_unlocked@plt>
   1cafc:	ldr	fp, [r6]
   1cb00:	cmp	fp, #0
   1cb04:	beq	1cba4 <__assert_fail@plt+0xb4a0>
   1cb08:	movw	r3, #62952	; 0xf5e8
   1cb0c:	movt	r3, #1
   1cb10:	mov	r9, #0
   1cb14:	str	r3, [sp]
   1cb18:	movw	r3, #62960	; 0xf5f0
   1cb1c:	movt	r3, #1
   1cb20:	mov	r5, r9
   1cb24:	str	r3, [sp, #4]
   1cb28:	b	1cb60 <__assert_fail@plt+0xb45c>
   1cb2c:	mov	r0, fp
   1cb30:	mov	r9, r4
   1cb34:	bl	1a6e4 <__assert_fail@plt+0x8fe0>
   1cb38:	mov	r3, r0
   1cb3c:	mov	r1, #1
   1cb40:	ldr	r2, [sp]
   1cb44:	mov	r0, r8
   1cb48:	bl	115c0 <__fprintf_chk@plt>
   1cb4c:	ldr	fp, [r6, #4]!
   1cb50:	add	r5, r5, #1
   1cb54:	add	r4, r4, r7
   1cb58:	cmp	fp, #0
   1cb5c:	beq	1cba4 <__assert_fail@plt+0xb4a0>
   1cb60:	cmp	r5, #0
   1cb64:	mov	r1, r4
   1cb68:	ldr	r8, [sl]
   1cb6c:	mov	r2, r7
   1cb70:	mov	r0, r9
   1cb74:	beq	1cb2c <__assert_fail@plt+0xb428>
   1cb78:	bl	11398 <memcmp@plt>
   1cb7c:	cmp	r0, #0
   1cb80:	bne	1cb2c <__assert_fail@plt+0xb428>
   1cb84:	mov	r0, fp
   1cb88:	bl	1a6e4 <__assert_fail@plt+0x8fe0>
   1cb8c:	mov	r3, r0
   1cb90:	mov	r1, #1
   1cb94:	ldr	r2, [sp, #4]
   1cb98:	mov	r0, r8
   1cb9c:	bl	115c0 <__fprintf_chk@plt>
   1cba0:	b	1cb4c <__assert_fail@plt+0xb448>
   1cba4:	ldr	r0, [sl]
   1cba8:	ldr	r3, [r0, #20]
   1cbac:	ldr	r2, [r0, #24]
   1cbb0:	cmp	r3, r2
   1cbb4:	bcs	1cbe4 <__assert_fail@plt+0xb4e0>
   1cbb8:	add	r1, r3, #1
   1cbbc:	mov	r2, #10
   1cbc0:	str	r1, [r0, #20]
   1cbc4:	strb	r2, [r3]
   1cbc8:	add	sp, sp, #12
   1cbcc:	ldrd	r4, [sp]
   1cbd0:	ldrd	r6, [sp, #8]
   1cbd4:	ldrd	r8, [sp, #16]
   1cbd8:	ldrd	sl, [sp, #24]
   1cbdc:	add	sp, sp, #32
   1cbe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbe4:	mov	r1, #10
   1cbe8:	add	sp, sp, #12
   1cbec:	ldrd	r4, [sp]
   1cbf0:	ldrd	r6, [sp, #8]
   1cbf4:	ldrd	r8, [sp, #16]
   1cbf8:	ldrd	sl, [sp, #24]
   1cbfc:	ldr	lr, [sp, #32]
   1cc00:	add	sp, sp, #36	; 0x24
   1cc04:	b	11608 <__overflow@plt>
   1cc08:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cc0c:	mov	r5, r1
   1cc10:	mov	r4, r2
   1cc14:	ldrb	ip, [sp, #32]
   1cc18:	strd	r6, [sp, #8]
   1cc1c:	mov	r7, r0
   1cc20:	mov	r6, r3
   1cc24:	str	r8, [sp, #16]
   1cc28:	str	lr, [sp, #20]
   1cc2c:	cmp	ip, #0
   1cc30:	beq	1cc64 <__assert_fail@plt+0xb560>
   1cc34:	mov	r2, r3
   1cc38:	mov	r1, r4
   1cc3c:	ldr	r3, [sp, #24]
   1cc40:	mov	r0, r5
   1cc44:	bl	1c8ac <__assert_fail@plt+0xb1a8>
   1cc48:	cmp	r0, #0
   1cc4c:	blt	1cc74 <__assert_fail@plt+0xb570>
   1cc50:	ldrd	r4, [sp]
   1cc54:	ldrd	r6, [sp, #8]
   1cc58:	ldr	r8, [sp, #16]
   1cc5c:	add	sp, sp, #20
   1cc60:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc64:	mov	r1, r2
   1cc68:	mov	r0, r5
   1cc6c:	bl	1c9bc <__assert_fail@plt+0xb2b8>
   1cc70:	b	1cc48 <__assert_fail@plt+0xb544>
   1cc74:	mov	r2, r0
   1cc78:	mov	r1, r5
   1cc7c:	mov	r0, r7
   1cc80:	bl	1ca2c <__assert_fail@plt+0xb328>
   1cc84:	mov	r0, r4
   1cc88:	mov	r1, r6
   1cc8c:	ldr	r2, [sp, #24]
   1cc90:	bl	1cab4 <__assert_fail@plt+0xb3b0>
   1cc94:	ldr	r3, [sp, #28]
   1cc98:	blx	r3
   1cc9c:	mvn	r0, #0
   1cca0:	b	1cc50 <__assert_fail@plt+0xb54c>
   1cca4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cca8:	strd	r6, [sp, #8]
   1ccac:	ldr	r7, [r1]
   1ccb0:	str	r8, [sp, #16]
   1ccb4:	str	lr, [sp, #20]
   1ccb8:	cmp	r7, #0
   1ccbc:	beq	1ccfc <__assert_fail@plt+0xb5f8>
   1ccc0:	mov	r6, r3
   1ccc4:	mov	r8, r0
   1ccc8:	mov	r4, r2
   1cccc:	mov	r5, r1
   1ccd0:	b	1cce0 <__assert_fail@plt+0xb5dc>
   1ccd4:	ldr	r7, [r5, #4]!
   1ccd8:	cmp	r7, #0
   1ccdc:	beq	1ccfc <__assert_fail@plt+0xb5f8>
   1cce0:	mov	r1, r4
   1cce4:	mov	r2, r6
   1cce8:	mov	r0, r8
   1ccec:	add	r4, r4, r6
   1ccf0:	bl	11398 <memcmp@plt>
   1ccf4:	cmp	r0, #0
   1ccf8:	bne	1ccd4 <__assert_fail@plt+0xb5d0>
   1ccfc:	mov	r0, r7
   1cd00:	ldrd	r4, [sp]
   1cd04:	ldrd	r6, [sp, #8]
   1cd08:	ldr	r8, [sp, #16]
   1cd0c:	add	sp, sp, #20
   1cd10:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd14:	ldrb	r3, [r0]
   1cd18:	cmp	r3, #47	; 0x2f
   1cd1c:	bne	1cd2c <__assert_fail@plt+0xb628>
   1cd20:	ldrb	r3, [r0, #1]!
   1cd24:	cmp	r3, #47	; 0x2f
   1cd28:	beq	1cd20 <__assert_fail@plt+0xb61c>
   1cd2c:	cmp	r3, #0
   1cd30:	beq	1cd60 <__assert_fail@plt+0xb65c>
   1cd34:	mov	r2, r0
   1cd38:	mov	r1, #0
   1cd3c:	cmp	r3, #47	; 0x2f
   1cd40:	moveq	r1, #1
   1cd44:	beq	1cd54 <__assert_fail@plt+0xb650>
   1cd48:	cmp	r1, #0
   1cd4c:	movne	r0, r2
   1cd50:	movne	r1, #0
   1cd54:	ldrb	r3, [r2, #1]!
   1cd58:	cmp	r3, #0
   1cd5c:	bne	1cd3c <__assert_fail@plt+0xb638>
   1cd60:	bx	lr
   1cd64:	str	r4, [sp, #-8]!
   1cd68:	mov	r4, r0
   1cd6c:	str	lr, [sp, #4]
   1cd70:	bl	1153c <strlen@plt>
   1cd74:	cmp	r0, #1
   1cd78:	bls	1cd9c <__assert_fail@plt+0xb698>
   1cd7c:	add	r2, r4, r0
   1cd80:	mov	r3, r0
   1cd84:	ldrb	r2, [r2, #-1]
   1cd88:	cmp	r2, #47	; 0x2f
   1cd8c:	subeq	r3, r0, #2
   1cd90:	rsbeq	r1, r4, #1
   1cd94:	addeq	r3, r4, r3
   1cd98:	beq	1cda8 <__assert_fail@plt+0xb6a4>
   1cd9c:	ldr	r4, [sp]
   1cda0:	add	sp, sp, #4
   1cda4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cda8:	cmp	r3, r4
   1cdac:	add	r0, r1, r3
   1cdb0:	beq	1cd9c <__assert_fail@plt+0xb698>
   1cdb4:	ldrb	r2, [r3], #-1
   1cdb8:	cmp	r2, #47	; 0x2f
   1cdbc:	beq	1cda8 <__assert_fail@plt+0xb6a4>
   1cdc0:	ldr	r4, [sp]
   1cdc4:	add	sp, sp, #4
   1cdc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdcc:	cmp	r0, #0
   1cdd0:	bxlt	lr
   1cdd4:	str	r4, [sp, #-8]!
   1cdd8:	str	lr, [sp, #4]
   1cddc:	bl	116ec <close@plt>
   1cde0:	cmp	r0, #0
   1cde4:	bne	1cdf4 <__assert_fail@plt+0xb6f0>
   1cde8:	ldr	r4, [sp]
   1cdec:	add	sp, sp, #4
   1cdf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdf4:	movw	r3, #62968	; 0xf5f8
   1cdf8:	movt	r3, #1
   1cdfc:	movw	r1, #62992	; 0xf610
   1ce00:	movt	r1, #1
   1ce04:	movw	r0, #63012	; 0xf624
   1ce08:	movt	r0, #1
   1ce0c:	mov	r2, #64	; 0x40
   1ce10:	bl	11704 <__assert_fail@plt>
   1ce14:	mov	r2, #18688	; 0x4900
   1ce18:	strd	r4, [sp, #-16]!
   1ce1c:	mov	r4, r0
   1ce20:	ldr	r0, [r0]
   1ce24:	str	r6, [sp, #8]
   1ce28:	str	lr, [sp, #12]
   1ce2c:	bl	11554 <openat64@plt>
   1ce30:	subs	r5, r0, #0
   1ce34:	blt	1ce58 <__assert_fail@plt+0xb754>
   1ce38:	ldr	r0, [r4]
   1ce3c:	bl	1cdcc <__assert_fail@plt+0xb6c8>
   1ce40:	mov	r0, #0
   1ce44:	str	r5, [r4]
   1ce48:	ldrd	r4, [sp]
   1ce4c:	ldr	r6, [sp, #8]
   1ce50:	add	sp, sp, #12
   1ce54:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce58:	mvn	r0, #0
   1ce5c:	b	1ce48 <__assert_fail@plt+0xb744>
   1ce60:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ce64:	strd	r6, [sp, #8]
   1ce68:	mov	r6, r0
   1ce6c:	strd	r8, [sp, #16]
   1ce70:	str	lr, [sp, #24]
   1ce74:	sub	sp, sp, #12
   1ce78:	bl	11404 <chdir@plt>
   1ce7c:	subs	r4, r0, #0
   1ce80:	beq	1cf84 <__assert_fail@plt+0xb880>
   1ce84:	bl	1156c <__errno_location@plt>
   1ce88:	ldr	r3, [r0]
   1ce8c:	mov	r9, r0
   1ce90:	cmp	r3, #36	; 0x24
   1ce94:	bne	1cf84 <__assert_fail@plt+0xb880>
   1ce98:	mov	r0, r6
   1ce9c:	bl	1153c <strlen@plt>
   1cea0:	mvn	r3, #99	; 0x63
   1cea4:	subs	r7, r0, #0
   1cea8:	str	r3, [sp, #4]
   1ceac:	beq	1d0bc <__assert_fail@plt+0xb9b8>
   1ceb0:	cmp	r7, #4096	; 0x1000
   1ceb4:	bcc	1d0d8 <__assert_fail@plt+0xb9d4>
   1ceb8:	movw	r1, #61040	; 0xee70
   1cebc:	movt	r1, #1
   1cec0:	mov	r0, r6
   1cec4:	bl	116f8 <strspn@plt>
   1cec8:	cmp	r0, #2
   1cecc:	mov	r5, r0
   1ced0:	beq	1cfd4 <__assert_fail@plt+0xb8d0>
   1ced4:	cmp	r0, #0
   1ced8:	moveq	r5, r6
   1cedc:	bne	1cfa0 <__assert_fail@plt+0xb89c>
   1cee0:	ldrb	r3, [r5]
   1cee4:	cmp	r3, #47	; 0x2f
   1cee8:	beq	1d084 <__assert_fail@plt+0xb980>
   1ceec:	add	r6, r6, r7
   1cef0:	cmp	r5, r6
   1cef4:	bhi	1d0a0 <__assert_fail@plt+0xb99c>
   1cef8:	sub	r3, r6, r5
   1cefc:	cmp	r3, #4096	; 0x1000
   1cf00:	blt	1d030 <__assert_fail@plt+0xb92c>
   1cf04:	movw	r7, #61040	; 0xee70
   1cf08:	movt	r7, #1
   1cf0c:	mov	r8, #47	; 0x2f
   1cf10:	b	1cf60 <__assert_fail@plt+0xb85c>
   1cf14:	mov	r3, #0
   1cf18:	sub	r2, r4, r5
   1cf1c:	cmp	r2, #4096	; 0x1000
   1cf20:	strb	r3, [r4]
   1cf24:	bge	1d068 <__assert_fail@plt+0xb964>
   1cf28:	mov	r1, r5
   1cf2c:	add	r0, sp, #4
   1cf30:	bl	1ce14 <__assert_fail@plt+0xb710>
   1cf34:	cmp	r0, #0
   1cf38:	strb	r8, [r4]
   1cf3c:	bne	1cfbc <__assert_fail@plt+0xb8b8>
   1cf40:	add	r4, r4, #1
   1cf44:	mov	r1, r7
   1cf48:	mov	r0, r4
   1cf4c:	bl	116f8 <strspn@plt>
   1cf50:	add	r5, r4, r0
   1cf54:	sub	r3, r6, r5
   1cf58:	cmp	r3, #4096	; 0x1000
   1cf5c:	blt	1d030 <__assert_fail@plt+0xb92c>
   1cf60:	mov	r2, #4096	; 0x1000
   1cf64:	mov	r1, #47	; 0x2f
   1cf68:	mov	r0, r5
   1cf6c:	bl	11560 <memrchr@plt>
   1cf70:	subs	r4, r0, #0
   1cf74:	bne	1cf14 <__assert_fail@plt+0xb810>
   1cf78:	mov	r3, #36	; 0x24
   1cf7c:	mvn	r4, #0
   1cf80:	str	r3, [r9]
   1cf84:	mov	r0, r4
   1cf88:	add	sp, sp, #12
   1cf8c:	ldrd	r4, [sp]
   1cf90:	ldrd	r6, [sp, #8]
   1cf94:	ldrd	r8, [sp, #16]
   1cf98:	add	sp, sp, #24
   1cf9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cfa0:	movw	r1, #61040	; 0xee70
   1cfa4:	movt	r1, #1
   1cfa8:	add	r0, sp, #4
   1cfac:	bl	1ce14 <__assert_fail@plt+0xb710>
   1cfb0:	cmp	r0, #0
   1cfb4:	addeq	r5, r6, r5
   1cfb8:	beq	1cee0 <__assert_fail@plt+0xb7dc>
   1cfbc:	ldr	r5, [r9]
   1cfc0:	mvn	r4, #0
   1cfc4:	ldr	r0, [sp, #4]
   1cfc8:	bl	1cdcc <__assert_fail@plt+0xb6c8>
   1cfcc:	str	r5, [r9]
   1cfd0:	b	1cf84 <__assert_fail@plt+0xb880>
   1cfd4:	sub	r2, r7, #3
   1cfd8:	mov	r1, #47	; 0x2f
   1cfdc:	add	r0, r6, #3
   1cfe0:	bl	115cc <memchr@plt>
   1cfe4:	subs	r4, r0, #0
   1cfe8:	mvneq	r4, #0
   1cfec:	beq	1cf84 <__assert_fail@plt+0xb880>
   1cff0:	mov	r3, #0
   1cff4:	mov	r1, r6
   1cff8:	add	r0, sp, #4
   1cffc:	strb	r3, [r4]
   1d000:	bl	1ce14 <__assert_fail@plt+0xb710>
   1d004:	mov	r3, #47	; 0x2f
   1d008:	cmp	r0, #0
   1d00c:	strb	r3, [r4]
   1d010:	bne	1cfbc <__assert_fail@plt+0xb8b8>
   1d014:	add	r4, r4, #1
   1d018:	movw	r1, #61040	; 0xee70
   1d01c:	movt	r1, #1
   1d020:	mov	r0, r4
   1d024:	bl	116f8 <strspn@plt>
   1d028:	add	r5, r4, r0
   1d02c:	b	1cee0 <__assert_fail@plt+0xb7dc>
   1d030:	cmp	r6, r5
   1d034:	bls	1d04c <__assert_fail@plt+0xb948>
   1d038:	mov	r1, r5
   1d03c:	add	r0, sp, #4
   1d040:	bl	1ce14 <__assert_fail@plt+0xb710>
   1d044:	cmp	r0, #0
   1d048:	bne	1cfbc <__assert_fail@plt+0xb8b8>
   1d04c:	ldr	r0, [sp, #4]
   1d050:	bl	11674 <fchdir@plt>
   1d054:	subs	r4, r0, #0
   1d058:	bne	1cfbc <__assert_fail@plt+0xb8b8>
   1d05c:	ldr	r0, [sp, #4]
   1d060:	bl	1cdcc <__assert_fail@plt+0xb6c8>
   1d064:	b	1cf84 <__assert_fail@plt+0xb880>
   1d068:	movw	r1, #62992	; 0xf610
   1d06c:	movt	r1, #1
   1d070:	ldr	r3, [pc, #124]	; 1d0f4 <__assert_fail@plt+0xb9f0>
   1d074:	movw	r0, #63076	; 0xf664
   1d078:	movt	r0, #1
   1d07c:	mov	r2, #179	; 0xb3
   1d080:	bl	11704 <__assert_fail@plt>
   1d084:	movw	r1, #62992	; 0xf610
   1d088:	movt	r1, #1
   1d08c:	ldr	r3, [pc, #96]	; 1d0f4 <__assert_fail@plt+0xb9f0>
   1d090:	movw	r0, #63048	; 0xf648
   1d094:	movt	r0, #1
   1d098:	mov	r2, #162	; 0xa2
   1d09c:	bl	11704 <__assert_fail@plt>
   1d0a0:	movw	r1, #62992	; 0xf610
   1d0a4:	movt	r1, #1
   1d0a8:	ldr	r3, [pc, #68]	; 1d0f4 <__assert_fail@plt+0xb9f0>
   1d0ac:	movw	r0, #63060	; 0xf654
   1d0b0:	movt	r0, #1
   1d0b4:	mov	r2, #163	; 0xa3
   1d0b8:	bl	11704 <__assert_fail@plt>
   1d0bc:	movw	r1, #62992	; 0xf610
   1d0c0:	movt	r1, #1
   1d0c4:	ldr	r3, [pc, #40]	; 1d0f4 <__assert_fail@plt+0xb9f0>
   1d0c8:	movw	r0, #63028	; 0xf634
   1d0cc:	movt	r0, #1
   1d0d0:	mov	r2, #126	; 0x7e
   1d0d4:	bl	11704 <__assert_fail@plt>
   1d0d8:	movw	r1, #62992	; 0xf610
   1d0dc:	movt	r1, #1
   1d0e0:	ldr	r3, [pc, #12]	; 1d0f4 <__assert_fail@plt+0xb9f0>
   1d0e4:	movw	r0, #63036	; 0xf63c
   1d0e8:	movt	r0, #1
   1d0ec:	mov	r2, #127	; 0x7f
   1d0f0:	bl	11704 <__assert_fail@plt>
   1d0f4:	andeq	pc, r1, r4, lsl #12
   1d0f8:	strd	r4, [sp, #-16]!
   1d0fc:	mov	r4, r0
   1d100:	str	r6, [sp, #8]
   1d104:	str	lr, [sp, #12]
   1d108:	bl	11470 <__fpending@plt>
   1d10c:	ldr	r5, [r4]
   1d110:	mov	r6, r0
   1d114:	mov	r0, r4
   1d118:	bl	1d180 <__assert_fail@plt+0xba7c>
   1d11c:	mov	r4, r0
   1d120:	and	r5, r5, #32
   1d124:	cmp	r5, #0
   1d128:	bne	1d160 <__assert_fail@plt+0xba5c>
   1d12c:	cmp	r0, #0
   1d130:	beq	1d14c <__assert_fail@plt+0xba48>
   1d134:	cmp	r6, #0
   1d138:	bne	1d178 <__assert_fail@plt+0xba74>
   1d13c:	bl	1156c <__errno_location@plt>
   1d140:	ldr	r4, [r0]
   1d144:	subs	r4, r4, #9
   1d148:	mvnne	r4, #0
   1d14c:	mov	r0, r4
   1d150:	ldrd	r4, [sp]
   1d154:	ldr	r6, [sp, #8]
   1d158:	add	sp, sp, #12
   1d15c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d160:	cmp	r0, #0
   1d164:	bne	1d178 <__assert_fail@plt+0xba74>
   1d168:	bl	1156c <__errno_location@plt>
   1d16c:	str	r4, [r0]
   1d170:	mvn	r4, #0
   1d174:	b	1d14c <__assert_fail@plt+0xba48>
   1d178:	mvn	r4, #0
   1d17c:	b	1d14c <__assert_fail@plt+0xba48>
   1d180:	strd	r4, [sp, #-12]!
   1d184:	mov	r4, r0
   1d188:	str	lr, [sp, #8]
   1d18c:	sub	sp, sp, #12
   1d190:	bl	115b4 <fileno@plt>
   1d194:	cmp	r0, #0
   1d198:	mov	r0, r4
   1d19c:	blt	1d220 <__assert_fail@plt+0xbb1c>
   1d1a0:	bl	114e8 <__freading@plt>
   1d1a4:	cmp	r0, #0
   1d1a8:	bne	1d1ec <__assert_fail@plt+0xbae8>
   1d1ac:	mov	r0, r4
   1d1b0:	bl	1d274 <__assert_fail@plt+0xbb70>
   1d1b4:	cmp	r0, #0
   1d1b8:	beq	1d21c <__assert_fail@plt+0xbb18>
   1d1bc:	bl	1156c <__errno_location@plt>
   1d1c0:	mov	r5, r0
   1d1c4:	mov	r0, r4
   1d1c8:	ldr	r4, [r5]
   1d1cc:	bl	115d8 <fclose@plt>
   1d1d0:	cmp	r4, #0
   1d1d4:	mvnne	r0, #0
   1d1d8:	strne	r4, [r5]
   1d1dc:	add	sp, sp, #12
   1d1e0:	ldrd	r4, [sp]
   1d1e4:	add	sp, sp, #8
   1d1e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d1ec:	mov	r0, r4
   1d1f0:	bl	115b4 <fileno@plt>
   1d1f4:	mov	r1, #1
   1d1f8:	mov	r2, #0
   1d1fc:	mov	r3, #0
   1d200:	str	r1, [sp]
   1d204:	bl	1144c <lseek64@plt>
   1d208:	mvn	r3, #0
   1d20c:	mvn	r2, #0
   1d210:	cmp	r1, r3
   1d214:	cmpeq	r0, r2
   1d218:	bne	1d1ac <__assert_fail@plt+0xbaa8>
   1d21c:	mov	r0, r4
   1d220:	add	sp, sp, #12
   1d224:	ldrd	r4, [sp]
   1d228:	ldr	lr, [sp, #8]
   1d22c:	add	sp, sp, #12
   1d230:	b	115d8 <fclose@plt>
   1d234:	push	{r1, r2, r3}
   1d238:	push	{lr}		; (str lr, [sp, #-4]!)
   1d23c:	sub	sp, sp, #8
   1d240:	ldr	r1, [sp, #12]
   1d244:	ands	r2, r1, #64	; 0x40
   1d248:	bne	1d264 <__assert_fail@plt+0xbb60>
   1d24c:	bl	114ac <open64@plt>
   1d250:	bl	1d578 <__assert_fail@plt+0xbe74>
   1d254:	add	sp, sp, #8
   1d258:	pop	{lr}		; (ldr lr, [sp], #4)
   1d25c:	add	sp, sp, #12
   1d260:	bx	lr
   1d264:	add	r3, sp, #16
   1d268:	ldr	r2, [sp, #16]
   1d26c:	str	r3, [sp, #4]
   1d270:	b	1d24c <__assert_fail@plt+0xbb48>
   1d274:	str	r4, [sp, #-8]!
   1d278:	subs	r4, r0, #0
   1d27c:	str	lr, [sp, #4]
   1d280:	sub	sp, sp, #8
   1d284:	beq	1d2a0 <__assert_fail@plt+0xbb9c>
   1d288:	bl	114e8 <__freading@plt>
   1d28c:	cmp	r0, #0
   1d290:	beq	1d2a0 <__assert_fail@plt+0xbb9c>
   1d294:	ldr	r3, [r4]
   1d298:	tst	r3, #256	; 0x100
   1d29c:	bne	1d2b8 <__assert_fail@plt+0xbbb4>
   1d2a0:	mov	r0, r4
   1d2a4:	add	sp, sp, #8
   1d2a8:	ldr	r4, [sp]
   1d2ac:	ldr	lr, [sp, #4]
   1d2b0:	add	sp, sp, #8
   1d2b4:	b	1132c <fflush@plt>
   1d2b8:	mov	r1, #1
   1d2bc:	mov	r2, #0
   1d2c0:	mov	r3, #0
   1d2c4:	mov	r0, r4
   1d2c8:	str	r1, [sp]
   1d2cc:	bl	1d2d4 <__assert_fail@plt+0xbbd0>
   1d2d0:	b	1d2a0 <__assert_fail@plt+0xbb9c>
   1d2d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d2d8:	mov	r4, r0
   1d2dc:	ldr	ip, [r0, #4]
   1d2e0:	strd	r6, [sp, #8]
   1d2e4:	str	lr, [sp, #20]
   1d2e8:	ldr	lr, [r0, #8]
   1d2ec:	str	r8, [sp, #16]
   1d2f0:	sub	sp, sp, #8
   1d2f4:	ldr	r5, [sp, #32]
   1d2f8:	cmp	lr, ip
   1d2fc:	beq	1d324 <__assert_fail@plt+0xbc20>
   1d300:	mov	r0, r4
   1d304:	str	r5, [sp, #32]
   1d308:	add	sp, sp, #8
   1d30c:	ldrd	r4, [sp]
   1d310:	ldrd	r6, [sp, #8]
   1d314:	ldr	r8, [sp, #16]
   1d318:	ldr	lr, [sp, #20]
   1d31c:	add	sp, sp, #24
   1d320:	b	115e4 <fseeko64@plt>
   1d324:	ldr	ip, [r0, #16]
   1d328:	ldr	lr, [r0, #20]
   1d32c:	cmp	lr, ip
   1d330:	bne	1d300 <__assert_fail@plt+0xbbfc>
   1d334:	ldr	r8, [r0, #36]	; 0x24
   1d338:	cmp	r8, #0
   1d33c:	bne	1d300 <__assert_fail@plt+0xbbfc>
   1d340:	mov	r6, r2
   1d344:	mov	r7, r3
   1d348:	bl	115b4 <fileno@plt>
   1d34c:	mov	r2, r6
   1d350:	mov	r3, r7
   1d354:	str	r5, [sp]
   1d358:	bl	1144c <lseek64@plt>
   1d35c:	mvn	r3, #0
   1d360:	mvn	r2, #0
   1d364:	cmp	r1, r3
   1d368:	cmpeq	r0, r2
   1d36c:	beq	1d39c <__assert_fail@plt+0xbc98>
   1d370:	ldr	r3, [r4]
   1d374:	strd	r0, [r4, #80]	; 0x50
   1d378:	bic	r3, r3, #16
   1d37c:	str	r3, [r4]
   1d380:	mov	r0, r8
   1d384:	add	sp, sp, #8
   1d388:	ldrd	r4, [sp]
   1d38c:	ldrd	r6, [sp, #8]
   1d390:	ldr	r8, [sp, #16]
   1d394:	add	sp, sp, #20
   1d398:	pop	{pc}		; (ldr pc, [sp], #4)
   1d39c:	mvn	r8, #0
   1d3a0:	b	1d380 <__assert_fail@plt+0xbc7c>
   1d3a4:	push	{lr}		; (str lr, [sp, #-4]!)
   1d3a8:	sub	sp, sp, #268	; 0x10c
   1d3ac:	movw	r2, #257	; 0x101
   1d3b0:	add	r1, sp, #4
   1d3b4:	bl	1d4b4 <__assert_fail@plt+0xbdb0>
   1d3b8:	cmp	r0, #0
   1d3bc:	movne	r0, #0
   1d3c0:	bne	1d3f4 <__assert_fail@plt+0xbcf0>
   1d3c4:	movw	r1, #63096	; 0xf678
   1d3c8:	movt	r1, #1
   1d3cc:	add	r0, sp, #4
   1d3d0:	bl	11320 <strcmp@plt>
   1d3d4:	cmp	r0, #0
   1d3d8:	beq	1d3f4 <__assert_fail@plt+0xbcf0>
   1d3dc:	add	r0, sp, #4
   1d3e0:	movw	r1, #63100	; 0xf67c
   1d3e4:	movt	r1, #1
   1d3e8:	bl	11320 <strcmp@plt>
   1d3ec:	adds	r0, r0, #0
   1d3f0:	movne	r0, #1
   1d3f4:	add	sp, sp, #268	; 0x10c
   1d3f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d3fc:	ldrb	r3, [r0]
   1d400:	cmp	r3, #0
   1d404:	beq	1d428 <__assert_fail@plt+0xbd24>
   1d408:	mov	r2, #0
   1d40c:	add	r2, r3, r2, ror #23
   1d410:	ldrb	r3, [r0, #1]!
   1d414:	cmp	r3, #0
   1d418:	bne	1d40c <__assert_fail@plt+0xbd08>
   1d41c:	udiv	r3, r2, r1
   1d420:	mls	r0, r1, r3, r2
   1d424:	bx	lr
   1d428:	mov	r0, r3
   1d42c:	bx	lr
   1d430:	mov	r0, #14
   1d434:	str	r4, [sp, #-8]!
   1d438:	str	lr, [sp, #4]
   1d43c:	bl	11644 <nl_langinfo@plt>
   1d440:	cmp	r0, #0
   1d444:	beq	1d468 <__assert_fail@plt+0xbd64>
   1d448:	ldrb	r2, [r0]
   1d44c:	movw	r3, #63108	; 0xf684
   1d450:	movt	r3, #1
   1d454:	ldr	r4, [sp]
   1d458:	add	sp, sp, #4
   1d45c:	cmp	r2, #0
   1d460:	moveq	r0, r3
   1d464:	pop	{pc}		; (ldr pc, [sp], #4)
   1d468:	ldr	r4, [sp]
   1d46c:	add	sp, sp, #4
   1d470:	movw	r0, #63108	; 0xf684
   1d474:	movt	r0, #1
   1d478:	pop	{pc}		; (ldr pc, [sp], #4)
   1d47c:	umull	r2, r3, r1, r2
   1d480:	cmp	r3, #0
   1d484:	bne	1d490 <__assert_fail@plt+0xbd8c>
   1d488:	mov	r1, r2
   1d48c:	b	1bedc <__assert_fail@plt+0xa7d8>
   1d490:	str	r4, [sp, #-8]!
   1d494:	str	lr, [sp, #4]
   1d498:	bl	1156c <__errno_location@plt>
   1d49c:	mov	r3, #12
   1d4a0:	ldr	r4, [sp]
   1d4a4:	add	sp, sp, #4
   1d4a8:	str	r3, [r0]
   1d4ac:	mov	r0, #0
   1d4b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4b4:	strd	r4, [sp, #-16]!
   1d4b8:	mov	r5, r1
   1d4bc:	mov	r1, #0
   1d4c0:	mov	r4, r2
   1d4c4:	str	r6, [sp, #8]
   1d4c8:	str	lr, [sp, #12]
   1d4cc:	bl	11614 <setlocale@plt>
   1d4d0:	subs	r6, r0, #0
   1d4d4:	beq	1d554 <__assert_fail@plt+0xbe50>
   1d4d8:	bl	1153c <strlen@plt>
   1d4dc:	cmp	r4, r0
   1d4e0:	bhi	1d500 <__assert_fail@plt+0xbdfc>
   1d4e4:	cmp	r4, #0
   1d4e8:	moveq	r0, #34	; 0x22
   1d4ec:	bne	1d524 <__assert_fail@plt+0xbe20>
   1d4f0:	ldrd	r4, [sp]
   1d4f4:	ldr	r6, [sp, #8]
   1d4f8:	add	sp, sp, #12
   1d4fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d500:	add	r2, r0, #1
   1d504:	mov	r1, r6
   1d508:	mov	r0, r5
   1d50c:	bl	11374 <memcpy@plt>
   1d510:	ldrd	r4, [sp]
   1d514:	mov	r0, #0
   1d518:	ldr	r6, [sp, #8]
   1d51c:	add	sp, sp, #12
   1d520:	pop	{pc}		; (ldr pc, [sp], #4)
   1d524:	sub	r4, r4, #1
   1d528:	mov	r1, r6
   1d52c:	mov	r2, r4
   1d530:	mov	r0, r5
   1d534:	bl	11374 <memcpy@plt>
   1d538:	mov	r3, #0
   1d53c:	mov	r0, #34	; 0x22
   1d540:	strb	r3, [r5, r4]
   1d544:	ldrd	r4, [sp]
   1d548:	ldr	r6, [sp, #8]
   1d54c:	add	sp, sp, #12
   1d550:	pop	{pc}		; (ldr pc, [sp], #4)
   1d554:	cmp	r4, #0
   1d558:	mov	r0, #22
   1d55c:	strbne	r6, [r5]
   1d560:	ldrd	r4, [sp]
   1d564:	ldr	r6, [sp, #8]
   1d568:	add	sp, sp, #12
   1d56c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d570:	mov	r1, #0
   1d574:	b	11614 <setlocale@plt>
   1d578:	cmp	r0, #2
   1d57c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d580:	mov	r4, r0
   1d584:	strd	r6, [sp, #8]
   1d588:	str	r8, [sp, #16]
   1d58c:	str	lr, [sp, #20]
   1d590:	bls	1d5ac <__assert_fail@plt+0xbea8>
   1d594:	mov	r0, r4
   1d598:	ldrd	r4, [sp]
   1d59c:	ldrd	r6, [sp, #8]
   1d5a0:	ldr	r8, [sp, #16]
   1d5a4:	add	sp, sp, #20
   1d5a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5ac:	bl	1d5d4 <__assert_fail@plt+0xbed0>
   1d5b0:	mov	r7, r0
   1d5b4:	bl	1156c <__errno_location@plt>
   1d5b8:	mov	r5, r0
   1d5bc:	mov	r0, r4
   1d5c0:	ldr	r6, [r5]
   1d5c4:	mov	r4, r7
   1d5c8:	bl	116ec <close@plt>
   1d5cc:	str	r6, [r5]
   1d5d0:	b	1d594 <__assert_fail@plt+0xbe90>
   1d5d4:	mov	r2, #3
   1d5d8:	mov	r1, #0
   1d5dc:	b	1d5e0 <__assert_fail@plt+0xbedc>
   1d5e0:	push	{r1, r2, r3}
   1d5e4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d5e8:	strd	r6, [sp, #8]
   1d5ec:	str	lr, [sp, #16]
   1d5f0:	sub	sp, sp, #8
   1d5f4:	ldr	r1, [sp, #28]
   1d5f8:	add	r2, sp, #32
   1d5fc:	str	r2, [sp, #4]
   1d600:	cmp	r1, #0
   1d604:	beq	1d6e0 <__assert_fail@plt+0xbfdc>
   1d608:	movw	r3, #1030	; 0x406
   1d60c:	mov	r6, r0
   1d610:	cmp	r1, r3
   1d614:	beq	1d6f0 <__assert_fail@plt+0xbfec>
   1d618:	cmp	r1, #11
   1d61c:	beq	1d698 <__assert_fail@plt+0xbf94>
   1d620:	ble	1d678 <__assert_fail@plt+0xbf74>
   1d624:	movw	r2, #1031	; 0x407
   1d628:	cmp	r1, r2
   1d62c:	bgt	1d6b4 <__assert_fail@plt+0xbfb0>
   1d630:	cmp	r1, r3
   1d634:	bge	1d644 <__assert_fail@plt+0xbf40>
   1d638:	movw	r3, #1025	; 0x401
   1d63c:	cmp	r1, r3
   1d640:	beq	1d698 <__assert_fail@plt+0xbf94>
   1d644:	ldr	r3, [sp, #4]
   1d648:	mov	r0, r6
   1d64c:	ldr	r2, [r3]
   1d650:	bl	115fc <fcntl64@plt>
   1d654:	mov	r4, r0
   1d658:	mov	r0, r4
   1d65c:	add	sp, sp, #8
   1d660:	ldrd	r4, [sp]
   1d664:	ldrd	r6, [sp, #8]
   1d668:	ldr	lr, [sp, #16]
   1d66c:	add	sp, sp, #20
   1d670:	add	sp, sp, #12
   1d674:	bx	lr
   1d678:	cmp	r1, #4
   1d67c:	beq	1d644 <__assert_fail@plt+0xbf40>
   1d680:	bgt	1d6a8 <__assert_fail@plt+0xbfa4>
   1d684:	cmp	r1, #2
   1d688:	beq	1d644 <__assert_fail@plt+0xbf40>
   1d68c:	bgt	1d698 <__assert_fail@plt+0xbf94>
   1d690:	cmp	r1, #1
   1d694:	bne	1d644 <__assert_fail@plt+0xbf40>
   1d698:	mov	r0, r6
   1d69c:	bl	115fc <fcntl64@plt>
   1d6a0:	mov	r4, r0
   1d6a4:	b	1d658 <__assert_fail@plt+0xbf54>
   1d6a8:	cmp	r1, #9
   1d6ac:	bne	1d644 <__assert_fail@plt+0xbf40>
   1d6b0:	b	1d698 <__assert_fail@plt+0xbf94>
   1d6b4:	movw	r3, #1033	; 0x409
   1d6b8:	cmp	r1, r3
   1d6bc:	beq	1d644 <__assert_fail@plt+0xbf40>
   1d6c0:	blt	1d698 <__assert_fail@plt+0xbf94>
   1d6c4:	movw	r3, #1034	; 0x40a
   1d6c8:	cmp	r1, r3
   1d6cc:	bne	1d644 <__assert_fail@plt+0xbf40>
   1d6d0:	mov	r0, r6
   1d6d4:	bl	115fc <fcntl64@plt>
   1d6d8:	mov	r4, r0
   1d6dc:	b	1d658 <__assert_fail@plt+0xbf54>
   1d6e0:	ldr	r2, [sp, #32]
   1d6e4:	bl	115fc <fcntl64@plt>
   1d6e8:	mov	r4, r0
   1d6ec:	b	1d658 <__assert_fail@plt+0xbf54>
   1d6f0:	movw	r5, #1268	; 0x4f4
   1d6f4:	movt	r5, #3
   1d6f8:	ldr	r7, [r2]
   1d6fc:	add	r2, sp, #36	; 0x24
   1d700:	ldr	r3, [r5]
   1d704:	str	r2, [sp, #4]
   1d708:	mov	r2, r7
   1d70c:	cmp	r3, #0
   1d710:	blt	1d72c <__assert_fail@plt+0xc028>
   1d714:	bl	115fc <fcntl64@plt>
   1d718:	subs	r4, r0, #0
   1d71c:	blt	1d794 <__assert_fail@plt+0xc090>
   1d720:	mov	r3, #1
   1d724:	str	r3, [r5]
   1d728:	b	1d658 <__assert_fail@plt+0xbf54>
   1d72c:	mov	r1, #0
   1d730:	bl	115fc <fcntl64@plt>
   1d734:	subs	r4, r0, #0
   1d738:	blt	1d658 <__assert_fail@plt+0xbf54>
   1d73c:	ldr	r3, [r5]
   1d740:	cmn	r3, #1
   1d744:	bne	1d658 <__assert_fail@plt+0xbf54>
   1d748:	mov	r1, #1
   1d74c:	mov	r0, r4
   1d750:	bl	115fc <fcntl64@plt>
   1d754:	subs	r2, r0, #0
   1d758:	blt	1d774 <__assert_fail@plt+0xc070>
   1d75c:	orr	r2, r2, #1
   1d760:	mov	r1, #2
   1d764:	mov	r0, r4
   1d768:	bl	115fc <fcntl64@plt>
   1d76c:	cmn	r0, #1
   1d770:	bne	1d658 <__assert_fail@plt+0xbf54>
   1d774:	bl	1156c <__errno_location@plt>
   1d778:	mov	r5, r0
   1d77c:	mov	r0, r4
   1d780:	ldr	r6, [r5]
   1d784:	mvn	r4, #0
   1d788:	bl	116ec <close@plt>
   1d78c:	str	r6, [r5]
   1d790:	b	1d658 <__assert_fail@plt+0xbf54>
   1d794:	bl	1156c <__errno_location@plt>
   1d798:	ldr	r3, [r0]
   1d79c:	cmp	r3, #22
   1d7a0:	bne	1d720 <__assert_fail@plt+0xc01c>
   1d7a4:	mov	r2, r7
   1d7a8:	mov	r0, r6
   1d7ac:	mov	r1, #0
   1d7b0:	bl	115fc <fcntl64@plt>
   1d7b4:	subs	r4, r0, #0
   1d7b8:	mvnge	r3, #0
   1d7bc:	strge	r3, [r5]
   1d7c0:	bge	1d748 <__assert_fail@plt+0xc044>
   1d7c4:	b	1d658 <__assert_fail@plt+0xbf54>
   1d7c8:	eor	r1, r1, #-2147483648	; 0x80000000
   1d7cc:	b	1d7d4 <__assert_fail@plt+0xc0d0>
   1d7d0:	eor	r3, r3, #-2147483648	; 0x80000000
   1d7d4:	push	{r4, r5, lr}
   1d7d8:	lsl	r4, r1, #1
   1d7dc:	lsl	r5, r3, #1
   1d7e0:	teq	r4, r5
   1d7e4:	teqeq	r0, r2
   1d7e8:	orrsne	ip, r4, r0
   1d7ec:	orrsne	ip, r5, r2
   1d7f0:	mvnsne	ip, r4, asr #21
   1d7f4:	mvnsne	ip, r5, asr #21
   1d7f8:	beq	1d9e4 <__assert_fail@plt+0xc2e0>
   1d7fc:	lsr	r4, r4, #21
   1d800:	rsbs	r5, r4, r5, lsr #21
   1d804:	rsblt	r5, r5, #0
   1d808:	ble	1d828 <__assert_fail@plt+0xc124>
   1d80c:	add	r4, r4, r5
   1d810:	eor	r2, r0, r2
   1d814:	eor	r3, r1, r3
   1d818:	eor	r0, r2, r0
   1d81c:	eor	r1, r3, r1
   1d820:	eor	r2, r0, r2
   1d824:	eor	r3, r1, r3
   1d828:	cmp	r5, #54	; 0x36
   1d82c:	pophi	{r4, r5, pc}
   1d830:	tst	r1, #-2147483648	; 0x80000000
   1d834:	lsl	r1, r1, #12
   1d838:	mov	ip, #1048576	; 0x100000
   1d83c:	orr	r1, ip, r1, lsr #12
   1d840:	beq	1d84c <__assert_fail@plt+0xc148>
   1d844:	rsbs	r0, r0, #0
   1d848:	rsc	r1, r1, #0
   1d84c:	tst	r3, #-2147483648	; 0x80000000
   1d850:	lsl	r3, r3, #12
   1d854:	orr	r3, ip, r3, lsr #12
   1d858:	beq	1d864 <__assert_fail@plt+0xc160>
   1d85c:	rsbs	r2, r2, #0
   1d860:	rsc	r3, r3, #0
   1d864:	teq	r4, r5
   1d868:	beq	1d9cc <__assert_fail@plt+0xc2c8>
   1d86c:	sub	r4, r4, #1
   1d870:	rsbs	lr, r5, #32
   1d874:	blt	1d890 <__assert_fail@plt+0xc18c>
   1d878:	lsl	ip, r2, lr
   1d87c:	adds	r0, r0, r2, lsr r5
   1d880:	adc	r1, r1, #0
   1d884:	adds	r0, r0, r3, lsl lr
   1d888:	adcs	r1, r1, r3, asr r5
   1d88c:	b	1d8ac <__assert_fail@plt+0xc1a8>
   1d890:	sub	r5, r5, #32
   1d894:	add	lr, lr, #32
   1d898:	cmp	r2, #1
   1d89c:	lsl	ip, r3, lr
   1d8a0:	orrcs	ip, ip, #2
   1d8a4:	adds	r0, r0, r3, asr r5
   1d8a8:	adcs	r1, r1, r3, asr #31
   1d8ac:	and	r5, r1, #-2147483648	; 0x80000000
   1d8b0:	bpl	1d8c0 <__assert_fail@plt+0xc1bc>
   1d8b4:	rsbs	ip, ip, #0
   1d8b8:	rscs	r0, r0, #0
   1d8bc:	rsc	r1, r1, #0
   1d8c0:	cmp	r1, #1048576	; 0x100000
   1d8c4:	bcc	1d904 <__assert_fail@plt+0xc200>
   1d8c8:	cmp	r1, #2097152	; 0x200000
   1d8cc:	bcc	1d8ec <__assert_fail@plt+0xc1e8>
   1d8d0:	lsrs	r1, r1, #1
   1d8d4:	rrxs	r0, r0
   1d8d8:	rrx	ip, ip
   1d8dc:	add	r4, r4, #1
   1d8e0:	lsl	r2, r4, #21
   1d8e4:	cmn	r2, #4194304	; 0x400000
   1d8e8:	bcs	1da44 <__assert_fail@plt+0xc340>
   1d8ec:	cmp	ip, #-2147483648	; 0x80000000
   1d8f0:	lsrseq	ip, r0, #1
   1d8f4:	adcs	r0, r0, #0
   1d8f8:	adc	r1, r1, r4, lsl #20
   1d8fc:	orr	r1, r1, r5
   1d900:	pop	{r4, r5, pc}
   1d904:	lsls	ip, ip, #1
   1d908:	adcs	r0, r0, r0
   1d90c:	adc	r1, r1, r1
   1d910:	tst	r1, #1048576	; 0x100000
   1d914:	sub	r4, r4, #1
   1d918:	bne	1d8ec <__assert_fail@plt+0xc1e8>
   1d91c:	teq	r1, #0
   1d920:	moveq	r1, r0
   1d924:	moveq	r0, #0
   1d928:	clz	r3, r1
   1d92c:	addeq	r3, r3, #32
   1d930:	sub	r3, r3, #11
   1d934:	subs	r2, r3, #32
   1d938:	bge	1d95c <__assert_fail@plt+0xc258>
   1d93c:	adds	r2, r2, #12
   1d940:	ble	1d958 <__assert_fail@plt+0xc254>
   1d944:	add	ip, r2, #20
   1d948:	rsb	r2, r2, #12
   1d94c:	lsl	r0, r1, ip
   1d950:	lsr	r1, r1, r2
   1d954:	b	1d96c <__assert_fail@plt+0xc268>
   1d958:	add	r2, r2, #20
   1d95c:	rsble	ip, r2, #32
   1d960:	lsl	r1, r1, r2
   1d964:	orrle	r1, r1, r0, lsr ip
   1d968:	lslle	r0, r0, r2
   1d96c:	subs	r4, r4, r3
   1d970:	addge	r1, r1, r4, lsl #20
   1d974:	orrge	r1, r1, r5
   1d978:	popge	{r4, r5, pc}
   1d97c:	mvn	r4, r4
   1d980:	subs	r4, r4, #31
   1d984:	bge	1d9c0 <__assert_fail@plt+0xc2bc>
   1d988:	adds	r4, r4, #12
   1d98c:	bgt	1d9a8 <__assert_fail@plt+0xc2a4>
   1d990:	add	r4, r4, #20
   1d994:	rsb	r2, r4, #32
   1d998:	lsr	r0, r0, r4
   1d99c:	orr	r0, r0, r1, lsl r2
   1d9a0:	orr	r1, r5, r1, lsr r4
   1d9a4:	pop	{r4, r5, pc}
   1d9a8:	rsb	r4, r4, #12
   1d9ac:	rsb	r2, r4, #32
   1d9b0:	lsr	r0, r0, r2
   1d9b4:	orr	r0, r0, r1, lsl r4
   1d9b8:	mov	r1, r5
   1d9bc:	pop	{r4, r5, pc}
   1d9c0:	lsr	r0, r1, r4
   1d9c4:	mov	r1, r5
   1d9c8:	pop	{r4, r5, pc}
   1d9cc:	teq	r4, #0
   1d9d0:	eor	r3, r3, #1048576	; 0x100000
   1d9d4:	eoreq	r1, r1, #1048576	; 0x100000
   1d9d8:	addeq	r4, r4, #1
   1d9dc:	subne	r5, r5, #1
   1d9e0:	b	1d86c <__assert_fail@plt+0xc168>
   1d9e4:	mvns	ip, r4, asr #21
   1d9e8:	mvnsne	ip, r5, asr #21
   1d9ec:	beq	1da54 <__assert_fail@plt+0xc350>
   1d9f0:	teq	r4, r5
   1d9f4:	teqeq	r0, r2
   1d9f8:	beq	1da0c <__assert_fail@plt+0xc308>
   1d9fc:	orrs	ip, r4, r0
   1da00:	moveq	r1, r3
   1da04:	moveq	r0, r2
   1da08:	pop	{r4, r5, pc}
   1da0c:	teq	r1, r3
   1da10:	movne	r1, #0
   1da14:	movne	r0, #0
   1da18:	popne	{r4, r5, pc}
   1da1c:	lsrs	ip, r4, #21
   1da20:	bne	1da34 <__assert_fail@plt+0xc330>
   1da24:	lsls	r0, r0, #1
   1da28:	adcs	r1, r1, r1
   1da2c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1da30:	pop	{r4, r5, pc}
   1da34:	adds	r4, r4, #4194304	; 0x400000
   1da38:	addcc	r1, r1, #1048576	; 0x100000
   1da3c:	popcc	{r4, r5, pc}
   1da40:	and	r5, r1, #-2147483648	; 0x80000000
   1da44:	orr	r1, r5, #2130706432	; 0x7f000000
   1da48:	orr	r1, r1, #15728640	; 0xf00000
   1da4c:	mov	r0, #0
   1da50:	pop	{r4, r5, pc}
   1da54:	mvns	ip, r4, asr #21
   1da58:	movne	r1, r3
   1da5c:	movne	r0, r2
   1da60:	mvnseq	ip, r5, asr #21
   1da64:	movne	r3, r1
   1da68:	movne	r2, r0
   1da6c:	orrs	r4, r0, r1, lsl #12
   1da70:	orrseq	r5, r2, r3, lsl #12
   1da74:	teqeq	r1, r3
   1da78:	orrne	r1, r1, #524288	; 0x80000
   1da7c:	pop	{r4, r5, pc}
   1da80:	teq	r0, #0
   1da84:	moveq	r1, #0
   1da88:	bxeq	lr
   1da8c:	push	{r4, r5, lr}
   1da90:	mov	r4, #1024	; 0x400
   1da94:	add	r4, r4, #50	; 0x32
   1da98:	mov	r5, #0
   1da9c:	mov	r1, #0
   1daa0:	b	1d91c <__assert_fail@plt+0xc218>
   1daa4:	teq	r0, #0
   1daa8:	moveq	r1, #0
   1daac:	bxeq	lr
   1dab0:	push	{r4, r5, lr}
   1dab4:	mov	r4, #1024	; 0x400
   1dab8:	add	r4, r4, #50	; 0x32
   1dabc:	ands	r5, r0, #-2147483648	; 0x80000000
   1dac0:	rsbmi	r0, r0, #0
   1dac4:	mov	r1, #0
   1dac8:	b	1d91c <__assert_fail@plt+0xc218>
   1dacc:	lsls	r2, r0, #1
   1dad0:	asr	r1, r2, #3
   1dad4:	rrx	r1, r1
   1dad8:	lsl	r0, r2, #28
   1dadc:	andsne	r3, r2, #-16777216	; 0xff000000
   1dae0:	teqne	r3, #-16777216	; 0xff000000
   1dae4:	eorne	r1, r1, #939524096	; 0x38000000
   1dae8:	bxne	lr
   1daec:	bics	r2, r2, #-16777216	; 0xff000000
   1daf0:	bxeq	lr
   1daf4:	teq	r3, #-16777216	; 0xff000000
   1daf8:	orreq	r1, r1, #524288	; 0x80000
   1dafc:	bxeq	lr
   1db00:	push	{r4, r5, lr}
   1db04:	mov	r4, #896	; 0x380
   1db08:	and	r5, r1, #-2147483648	; 0x80000000
   1db0c:	bic	r1, r1, #-2147483648	; 0x80000000
   1db10:	b	1d91c <__assert_fail@plt+0xc218>
   1db14:	orrs	r2, r0, r1
   1db18:	bxeq	lr
   1db1c:	push	{r4, r5, lr}
   1db20:	mov	r5, #0
   1db24:	b	1db44 <__assert_fail@plt+0xc440>
   1db28:	orrs	r2, r0, r1
   1db2c:	bxeq	lr
   1db30:	push	{r4, r5, lr}
   1db34:	ands	r5, r1, #-2147483648	; 0x80000000
   1db38:	bpl	1db44 <__assert_fail@plt+0xc440>
   1db3c:	rsbs	r0, r0, #0
   1db40:	rsc	r1, r1, #0
   1db44:	mov	r4, #1024	; 0x400
   1db48:	add	r4, r4, #50	; 0x32
   1db4c:	lsrs	ip, r1, #22
   1db50:	beq	1d8c0 <__assert_fail@plt+0xc1bc>
   1db54:	mov	r2, #3
   1db58:	lsrs	ip, ip, #3
   1db5c:	addne	r2, r2, #3
   1db60:	lsrs	ip, ip, #3
   1db64:	addne	r2, r2, #3
   1db68:	add	r2, r2, ip, lsr #3
   1db6c:	rsb	r3, r2, #32
   1db70:	lsl	ip, r0, r3
   1db74:	lsr	r0, r0, r2
   1db78:	orr	r0, r0, r1, lsl r3
   1db7c:	lsr	r1, r1, r2
   1db80:	add	r4, r4, r2
   1db84:	b	1d8c0 <__assert_fail@plt+0xc1bc>
   1db88:	cmp	r3, #0
   1db8c:	cmpeq	r2, #0
   1db90:	bne	1dba8 <__assert_fail@plt+0xc4a4>
   1db94:	cmp	r1, #0
   1db98:	cmpeq	r0, #0
   1db9c:	mvnne	r1, #0
   1dba0:	mvnne	r0, #0
   1dba4:	b	1dbc4 <__assert_fail@plt+0xc4c0>
   1dba8:	sub	sp, sp, #8
   1dbac:	push	{sp, lr}
   1dbb0:	bl	1dc18 <__assert_fail@plt+0xc514>
   1dbb4:	ldr	lr, [sp, #4]
   1dbb8:	add	sp, sp, #8
   1dbbc:	pop	{r2, r3}
   1dbc0:	bx	lr
   1dbc4:	push	{r1, lr}
   1dbc8:	mov	r0, #8
   1dbcc:	bl	112fc <raise@plt>
   1dbd0:	pop	{r1, pc}
   1dbd4:	andeq	r0, r0, r0
   1dbd8:	vmov	d6, r0, r1
   1dbdc:	vldr	d7, [pc, #36]	; 1dc08 <__assert_fail@plt+0xc504>
   1dbe0:	vldr	d5, [pc, #40]	; 1dc10 <__assert_fail@plt+0xc50c>
   1dbe4:	vmul.f64	d7, d6, d7
   1dbe8:	vcvt.u32.f64	s14, d7
   1dbec:	vcvt.f64.u32	d4, s14
   1dbf0:	vmov	r1, s14
   1dbf4:	vmls.f64	d6, d4, d5
   1dbf8:	vcvt.u32.f64	s15, d6
   1dbfc:	vmov	r0, s15
   1dc00:	bx	lr
   1dc04:	nop			; (mov r0, r0)
   1dc08:	andeq	r0, r0, r0
   1dc0c:	ldclcc	0, cr0, [r0]
   1dc10:	andeq	r0, r0, r0
   1dc14:	mvnsmi	r0, r0
   1dc18:	cmp	r1, r3
   1dc1c:	cmpeq	r0, r2
   1dc20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc24:	mov	r4, r0
   1dc28:	movcc	r0, #0
   1dc2c:	mov	r5, r1
   1dc30:	ldr	lr, [sp, #36]	; 0x24
   1dc34:	movcc	r1, r0
   1dc38:	bcc	1dd34 <__assert_fail@plt+0xc630>
   1dc3c:	cmp	r3, #0
   1dc40:	clzeq	ip, r2
   1dc44:	clzne	ip, r3
   1dc48:	addeq	ip, ip, #32
   1dc4c:	cmp	r5, #0
   1dc50:	clzeq	r1, r4
   1dc54:	addeq	r1, r1, #32
   1dc58:	clzne	r1, r5
   1dc5c:	sub	ip, ip, r1
   1dc60:	sub	sl, ip, #32
   1dc64:	lsl	r9, r3, ip
   1dc68:	rsb	fp, ip, #32
   1dc6c:	orr	r9, r9, r2, lsl sl
   1dc70:	orr	r9, r9, r2, lsr fp
   1dc74:	lsl	r8, r2, ip
   1dc78:	cmp	r5, r9
   1dc7c:	cmpeq	r4, r8
   1dc80:	movcc	r0, #0
   1dc84:	movcc	r1, r0
   1dc88:	bcc	1dca4 <__assert_fail@plt+0xc5a0>
   1dc8c:	mov	r0, #1
   1dc90:	subs	r4, r4, r8
   1dc94:	lsl	r1, r0, sl
   1dc98:	orr	r1, r1, r0, lsr fp
   1dc9c:	lsl	r0, r0, ip
   1dca0:	sbc	r5, r5, r9
   1dca4:	cmp	ip, #0
   1dca8:	beq	1dd34 <__assert_fail@plt+0xc630>
   1dcac:	lsr	r6, r8, #1
   1dcb0:	orr	r6, r6, r9, lsl #31
   1dcb4:	lsr	r7, r9, #1
   1dcb8:	mov	r2, ip
   1dcbc:	b	1dce0 <__assert_fail@plt+0xc5dc>
   1dcc0:	subs	r3, r4, r6
   1dcc4:	sbc	r8, r5, r7
   1dcc8:	adds	r3, r3, r3
   1dccc:	adc	r8, r8, r8
   1dcd0:	adds	r4, r3, #1
   1dcd4:	adc	r5, r8, #0
   1dcd8:	subs	r2, r2, #1
   1dcdc:	beq	1dcfc <__assert_fail@plt+0xc5f8>
   1dce0:	cmp	r5, r7
   1dce4:	cmpeq	r4, r6
   1dce8:	bcs	1dcc0 <__assert_fail@plt+0xc5bc>
   1dcec:	adds	r4, r4, r4
   1dcf0:	adc	r5, r5, r5
   1dcf4:	subs	r2, r2, #1
   1dcf8:	bne	1dce0 <__assert_fail@plt+0xc5dc>
   1dcfc:	lsr	r3, r4, ip
   1dd00:	orr	r3, r3, r5, lsl fp
   1dd04:	lsr	r2, r5, ip
   1dd08:	orr	r3, r3, r5, lsr sl
   1dd0c:	adds	r0, r0, r4
   1dd10:	mov	r4, r3
   1dd14:	lsl	r3, r2, ip
   1dd18:	orr	r3, r3, r4, lsl sl
   1dd1c:	lsl	ip, r4, ip
   1dd20:	orr	r3, r3, r4, lsr fp
   1dd24:	adc	r1, r1, r5
   1dd28:	subs	r0, r0, ip
   1dd2c:	mov	r5, r2
   1dd30:	sbc	r1, r1, r3
   1dd34:	cmp	lr, #0
   1dd38:	strdne	r4, [lr]
   1dd3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dd44:	mov	r7, r0
   1dd48:	ldr	r6, [pc, #72]	; 1dd98 <__assert_fail@plt+0xc694>
   1dd4c:	ldr	r5, [pc, #72]	; 1dd9c <__assert_fail@plt+0xc698>
   1dd50:	add	r6, pc, r6
   1dd54:	add	r5, pc, r5
   1dd58:	sub	r6, r6, r5
   1dd5c:	mov	r8, r1
   1dd60:	mov	r9, r2
   1dd64:	bl	112c4 <calloc@plt-0x20>
   1dd68:	asrs	r6, r6, #2
   1dd6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd70:	mov	r4, #0
   1dd74:	add	r4, r4, #1
   1dd78:	ldr	r3, [r5], #4
   1dd7c:	mov	r2, r9
   1dd80:	mov	r1, r8
   1dd84:	mov	r0, r7
   1dd88:	blx	r3
   1dd8c:	cmp	r6, r4
   1dd90:	bne	1dd74 <__assert_fail@plt+0xc670>
   1dd94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd98:			; <UNDEFINED> instruction: 0x000121bc
   1dd9c:			; <UNDEFINED> instruction: 0x000121b4
   1dda0:	bx	lr
   1dda4:	ldr	r3, [pc, #12]	; 1ddb8 <__assert_fail@plt+0xc6b4>
   1dda8:	mov	r1, #0
   1ddac:	add	r3, pc, r3
   1ddb0:	ldr	r2, [r3]
   1ddb4:	b	11584 <__cxa_atexit@plt>
   1ddb8:	andeq	r2, r1, r4, asr #7

Disassembly of section .fini:

0001ddbc <.fini>:
   1ddbc:	push	{r3, lr}
   1ddc0:	pop	{r3, pc}
