
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

000111d4 <.init>:
   111d4:	push	{r3, lr}
   111d8:	bl	11560 <__assert_fail@plt+0x48>
   111dc:	pop	{r3, pc}

Disassembly of section .plt:

000111e0 <pthread_mutex_unlock@plt-0x14>:
   111e0:	push	{lr}		; (str lr, [sp, #-4]!)
   111e4:	ldr	lr, [pc, #4]	; 111f0 <pthread_mutex_unlock@plt-0x4>
   111e8:	add	lr, pc, lr
   111ec:	ldr	pc, [lr, #8]!
   111f0:	andeq	r3, r2, r0, lsl lr

000111f4 <pthread_mutex_unlock@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #143360	; 0x23000
   111fc:	ldr	pc, [ip, #3600]!	; 0xe10

00011200 <calloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #143360	; 0x23000
   11208:	ldr	pc, [ip, #3592]!	; 0xe08

0001120c <fputs_unlocked@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #143360	; 0x23000
   11214:	ldr	pc, [ip, #3584]!	; 0xe00

00011218 <wctype@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #143360	; 0x23000
   11220:	ldr	pc, [ip, #3576]!	; 0xdf8

00011224 <raise@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #143360	; 0x23000
   1122c:	ldr	pc, [ip, #3568]!	; 0xdf0

00011230 <wcrtomb@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #143360	; 0x23000
   11238:	ldr	pc, [ip, #3560]!	; 0xde8

0001123c <iswctype@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #143360	; 0x23000
   11244:	ldr	pc, [ip, #3552]!	; 0xde0

00011248 <strcmp@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #143360	; 0x23000
   11250:	ldr	pc, [ip, #3544]!	; 0xdd8

00011254 <posix_fadvise64@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #143360	; 0x23000
   1125c:	ldr	pc, [ip, #3536]!	; 0xdd0

00011260 <pthread_mutex_destroy@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #143360	; 0x23000
   11268:	ldr	pc, [ip, #3528]!	; 0xdc8

0001126c <fflush@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #143360	; 0x23000
   11274:	ldr	pc, [ip, #3520]!	; 0xdc0

00011278 <memmove@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #143360	; 0x23000
   11280:	ldr	pc, [ip, #3512]!	; 0xdb8

00011284 <free@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #143360	; 0x23000
   1128c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011290 <pthread_mutex_lock@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #143360	; 0x23000
   11298:	ldr	pc, [ip, #3496]!	; 0xda8

0001129c <_exit@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #143360	; 0x23000
   112a4:	ldr	pc, [ip, #3488]!	; 0xda0

000112a8 <memcpy@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #143360	; 0x23000
   112b0:	ldr	pc, [ip, #3480]!	; 0xd98

000112b4 <tolower@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #143360	; 0x23000
   112bc:	ldr	pc, [ip, #3472]!	; 0xd90

000112c0 <pthread_mutex_init@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #143360	; 0x23000
   112c8:	ldr	pc, [ip, #3464]!	; 0xd88

000112cc <towlower@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #143360	; 0x23000
   112d4:	ldr	pc, [ip, #3456]!	; 0xd80

000112d8 <mbsinit@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #143360	; 0x23000
   112e0:	ldr	pc, [ip, #3448]!	; 0xd78

000112e4 <fwrite_unlocked@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #143360	; 0x23000
   112ec:	ldr	pc, [ip, #3440]!	; 0xd70

000112f0 <memcmp@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #143360	; 0x23000
   112f8:	ldr	pc, [ip, #3432]!	; 0xd68

000112fc <stpcpy@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #143360	; 0x23000
   11304:	ldr	pc, [ip, #3424]!	; 0xd60

00011308 <getc_unlocked@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #143360	; 0x23000
   11310:	ldr	pc, [ip, #3416]!	; 0xd58

00011314 <dcgettext@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #143360	; 0x23000
   1131c:	ldr	pc, [ip, #3408]!	; 0xd50

00011320 <realloc@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #143360	; 0x23000
   11328:	ldr	pc, [ip, #3400]!	; 0xd48

0001132c <textdomain@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #143360	; 0x23000
   11334:	ldr	pc, [ip, #3392]!	; 0xd40

00011338 <iswprint@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #143360	; 0x23000
   11340:	ldr	pc, [ip, #3384]!	; 0xd38

00011344 <fwrite@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #143360	; 0x23000
   1134c:	ldr	pc, [ip, #3376]!	; 0xd30

00011350 <lseek64@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #143360	; 0x23000
   11358:	ldr	pc, [ip, #3368]!	; 0xd28

0001135c <__ctype_get_mb_cur_max@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #143360	; 0x23000
   11364:	ldr	pc, [ip, #3360]!	; 0xd20

00011368 <__fpending@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #143360	; 0x23000
   11370:	ldr	pc, [ip, #3352]!	; 0xd18

00011374 <ferror_unlocked@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #143360	; 0x23000
   1137c:	ldr	pc, [ip, #3344]!	; 0xd10

00011380 <mbrtowc@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #143360	; 0x23000
   11388:	ldr	pc, [ip, #3336]!	; 0xd08

0001138c <error@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #143360	; 0x23000
   11394:	ldr	pc, [ip, #3328]!	; 0xd00

00011398 <malloc@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #143360	; 0x23000
   113a0:	ldr	pc, [ip, #3320]!	; 0xcf8

000113a4 <__libc_start_main@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #143360	; 0x23000
   113ac:	ldr	pc, [ip, #3312]!	; 0xcf0

000113b0 <__freading@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #143360	; 0x23000
   113b8:	ldr	pc, [ip, #3304]!	; 0xce8

000113bc <__gmon_start__@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #143360	; 0x23000
   113c4:	ldr	pc, [ip, #3296]!	; 0xce0

000113c8 <getopt_long@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #143360	; 0x23000
   113d0:	ldr	pc, [ip, #3288]!	; 0xcd8

000113d4 <__ctype_b_loc@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #143360	; 0x23000
   113dc:	ldr	pc, [ip, #3280]!	; 0xcd0

000113e0 <exit@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #143360	; 0x23000
   113e8:	ldr	pc, [ip, #3272]!	; 0xcc8

000113ec <strlen@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #143360	; 0x23000
   113f4:	ldr	pc, [ip, #3264]!	; 0xcc0

000113f8 <strchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #143360	; 0x23000
   11400:	ldr	pc, [ip, #3256]!	; 0xcb8

00011404 <__errno_location@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #143360	; 0x23000
   1140c:	ldr	pc, [ip, #3248]!	; 0xcb0

00011410 <iswalnum@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #143360	; 0x23000
   11418:	ldr	pc, [ip, #3240]!	; 0xca8

0001141c <__cxa_atexit@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #143360	; 0x23000
   11424:	ldr	pc, [ip, #3232]!	; 0xca0

00011428 <memset@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #143360	; 0x23000
   11430:	ldr	pc, [ip, #3224]!	; 0xc98

00011434 <btowc@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #143360	; 0x23000
   1143c:	ldr	pc, [ip, #3216]!	; 0xc90

00011440 <__printf_chk@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #143360	; 0x23000
   11448:	ldr	pc, [ip, #3208]!	; 0xc88

0001144c <fileno@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #143360	; 0x23000
   11454:	ldr	pc, [ip, #3200]!	; 0xc80

00011458 <__fprintf_chk@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #143360	; 0x23000
   11460:	ldr	pc, [ip, #3192]!	; 0xc78

00011464 <strtoimax@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #143360	; 0x23000
   1146c:	ldr	pc, [ip, #3184]!	; 0xc70

00011470 <fclose@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #143360	; 0x23000
   11478:	ldr	pc, [ip, #3176]!	; 0xc68

0001147c <fseeko64@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #143360	; 0x23000
   11484:	ldr	pc, [ip, #3168]!	; 0xc60

00011488 <setlocale@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #143360	; 0x23000
   11490:	ldr	pc, [ip, #3160]!	; 0xc58

00011494 <toupper@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #143360	; 0x23000
   1149c:	ldr	pc, [ip, #3152]!	; 0xc50

000114a0 <strrchr@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #143360	; 0x23000
   114a8:	ldr	pc, [ip, #3144]!	; 0xc48

000114ac <nl_langinfo@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #143360	; 0x23000
   114b4:	ldr	pc, [ip, #3136]!	; 0xc40

000114b8 <clearerr_unlocked@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #143360	; 0x23000
   114c0:	ldr	pc, [ip, #3128]!	; 0xc38

000114c4 <fopen64@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #143360	; 0x23000
   114cc:	ldr	pc, [ip, #3120]!	; 0xc30

000114d0 <bindtextdomain@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #143360	; 0x23000
   114d8:	ldr	pc, [ip, #3112]!	; 0xc28

000114dc <towupper@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #143360	; 0x23000
   114e4:	ldr	pc, [ip, #3104]!	; 0xc20

000114e8 <strncmp@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #143360	; 0x23000
   114f0:	ldr	pc, [ip, #3096]!	; 0xc18

000114f4 <abort@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #143360	; 0x23000
   114fc:	ldr	pc, [ip, #3088]!	; 0xc10

00011500 <feof_unlocked@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #143360	; 0x23000
   11508:	ldr	pc, [ip, #3080]!	; 0xc08

0001150c <putchar_unlocked@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #143360	; 0x23000
   11514:	ldr	pc, [ip, #3072]!	; 0xc00

00011518 <__assert_fail@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #143360	; 0x23000
   11520:	ldr	pc, [ip, #3064]!	; 0xbf8

Disassembly of section .text:

00011524 <.text>:
   11524:	mov	fp, #0
   11528:	mov	lr, #0
   1152c:	pop	{r1}		; (ldr r1, [sp], #4)
   11530:	mov	r2, sp
   11534:	push	{r2}		; (str r2, [sp, #-4]!)
   11538:	push	{r0}		; (str r0, [sp, #-4]!)
   1153c:	ldr	ip, [pc, #16]	; 11554 <__assert_fail@plt+0x3c>
   11540:	push	{ip}		; (str ip, [sp, #-4]!)
   11544:	ldr	r0, [pc, #12]	; 11558 <__assert_fail@plt+0x40>
   11548:	ldr	r3, [pc, #12]	; 1155c <__assert_fail@plt+0x44>
   1154c:	bl	113a4 <__libc_start_main@plt>
   11550:	bl	114f4 <abort@plt>
   11554:	ldrdeq	r2, [r2], -r8
   11558:	muleq	r1, r4, r9
   1155c:	andeq	r2, r2, r8, ror pc
   11560:	ldr	r3, [pc, #20]	; 1157c <__assert_fail@plt+0x64>
   11564:	ldr	r2, [pc, #20]	; 11580 <__assert_fail@plt+0x68>
   11568:	add	r3, pc, r3
   1156c:	ldr	r2, [r3, r2]
   11570:	cmp	r2, #0
   11574:	bxeq	lr
   11578:	b	113bc <__gmon_start__@plt>
   1157c:	muleq	r2, r0, sl
   11580:	andeq	r0, r0, ip, lsl r1
   11584:	ldr	r0, [pc, #24]	; 115a4 <__assert_fail@plt+0x8c>
   11588:	ldr	r3, [pc, #24]	; 115a8 <__assert_fail@plt+0x90>
   1158c:	cmp	r3, r0
   11590:	bxeq	lr
   11594:	ldr	r3, [pc, #16]	; 115ac <__assert_fail@plt+0x94>
   11598:	cmp	r3, #0
   1159c:	bxeq	lr
   115a0:	bx	r3
   115a4:			; <UNDEFINED> instruction: 0x000351b0
   115a8:			; <UNDEFINED> instruction: 0x000351b0
   115ac:	andeq	r0, r0, r0
   115b0:	ldr	r0, [pc, #36]	; 115dc <__assert_fail@plt+0xc4>
   115b4:	ldr	r1, [pc, #36]	; 115e0 <__assert_fail@plt+0xc8>
   115b8:	sub	r1, r1, r0
   115bc:	asr	r1, r1, #2
   115c0:	add	r1, r1, r1, lsr #31
   115c4:	asrs	r1, r1, #1
   115c8:	bxeq	lr
   115cc:	ldr	r3, [pc, #16]	; 115e4 <__assert_fail@plt+0xcc>
   115d0:	cmp	r3, #0
   115d4:	bxeq	lr
   115d8:	bx	r3
   115dc:			; <UNDEFINED> instruction: 0x000351b0
   115e0:			; <UNDEFINED> instruction: 0x000351b0
   115e4:	andeq	r0, r0, r0
   115e8:	push	{r4, lr}
   115ec:	ldr	r4, [pc, #24]	; 1160c <__assert_fail@plt+0xf4>
   115f0:	ldrb	r3, [r4]
   115f4:	cmp	r3, #0
   115f8:	popne	{r4, pc}
   115fc:	bl	11584 <__assert_fail@plt+0x6c>
   11600:	mov	r3, #1
   11604:	strb	r3, [r4]
   11608:	pop	{r4, pc}
   1160c:	ldrdeq	r5, [r3], -r4
   11610:	b	115b0 <__assert_fail@plt+0x98>
   11614:	push	{fp, lr}
   11618:	mov	fp, sp
   1161c:	mov	r4, r0
   11620:	cmp	r0, #0
   11624:	bne	1176c <__assert_fail@plt+0x254>
   11628:	movw	r1, #12331	; 0x302b
   1162c:	movt	r1, #2
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	bl	11314 <dcgettext@plt>
   1163c:	mov	r1, r0
   11640:	movw	r0, #21904	; 0x5590
   11644:	movt	r0, #3
   11648:	ldr	r2, [r0]
   1164c:	mov	r0, #1
   11650:	bl	11440 <__printf_chk@plt>
   11654:	movw	r1, #12364	; 0x304c
   11658:	movt	r1, #2
   1165c:	mov	r0, #0
   11660:	mov	r2, #5
   11664:	bl	11314 <dcgettext@plt>
   11668:	movw	r5, #20940	; 0x51cc
   1166c:	movt	r5, #3
   11670:	ldr	r1, [r5]
   11674:	bl	1120c <fputs_unlocked@plt>
   11678:	bl	117b0 <__assert_fail@plt+0x298>
   1167c:	bl	117e0 <__assert_fail@plt+0x2c8>
   11680:	movw	r1, #12426	; 0x308a
   11684:	movt	r1, #2
   11688:	mov	r0, #0
   1168c:	mov	r2, #5
   11690:	bl	11314 <dcgettext@plt>
   11694:	ldr	r1, [r5]
   11698:	bl	1120c <fputs_unlocked@plt>
   1169c:	movw	r1, #12636	; 0x315c
   116a0:	movt	r1, #2
   116a4:	mov	r0, #0
   116a8:	mov	r2, #5
   116ac:	bl	11314 <dcgettext@plt>
   116b0:	ldr	r1, [r5]
   116b4:	bl	1120c <fputs_unlocked@plt>
   116b8:	movw	r1, #13079	; 0x3317
   116bc:	movt	r1, #2
   116c0:	mov	r0, #0
   116c4:	mov	r2, #5
   116c8:	bl	11314 <dcgettext@plt>
   116cc:	ldr	r1, [r5]
   116d0:	bl	1120c <fputs_unlocked@plt>
   116d4:	movw	r1, #13222	; 0x33a6
   116d8:	movt	r1, #2
   116dc:	mov	r0, #0
   116e0:	mov	r2, #5
   116e4:	bl	11314 <dcgettext@plt>
   116e8:	ldr	r1, [r5]
   116ec:	bl	1120c <fputs_unlocked@plt>
   116f0:	movw	r1, #13267	; 0x33d3
   116f4:	movt	r1, #2
   116f8:	mov	r0, #0
   116fc:	mov	r2, #5
   11700:	bl	11314 <dcgettext@plt>
   11704:	ldr	r1, [r5]
   11708:	bl	1120c <fputs_unlocked@plt>
   1170c:	movw	r1, #13321	; 0x3409
   11710:	movt	r1, #2
   11714:	mov	r0, #0
   11718:	mov	r2, #5
   1171c:	bl	11314 <dcgettext@plt>
   11720:	ldr	r1, [r5]
   11724:	bl	1120c <fputs_unlocked@plt>
   11728:	movw	r1, #13644	; 0x354c
   1172c:	movt	r1, #2
   11730:	mov	r0, #0
   11734:	mov	r2, #5
   11738:	bl	11314 <dcgettext@plt>
   1173c:	ldr	r1, [r5]
   11740:	bl	1120c <fputs_unlocked@plt>
   11744:	movw	r1, #13846	; 0x3616
   11748:	movt	r1, #2
   1174c:	mov	r0, #0
   11750:	mov	r2, #5
   11754:	bl	11314 <dcgettext@plt>
   11758:	ldr	r1, [r5]
   1175c:	bl	1120c <fputs_unlocked@plt>
   11760:	bl	11810 <__assert_fail@plt+0x2f8>
   11764:	mov	r0, r4
   11768:	bl	113e0 <exit@plt>
   1176c:	movw	r0, #20928	; 0x51c0
   11770:	movt	r0, #3
   11774:	ldr	r5, [r0]
   11778:	movw	r1, #12292	; 0x3004
   1177c:	movt	r1, #2
   11780:	mov	r0, #0
   11784:	mov	r2, #5
   11788:	bl	11314 <dcgettext@plt>
   1178c:	mov	r2, r0
   11790:	movw	r0, #21904	; 0x5590
   11794:	movt	r0, #3
   11798:	ldr	r3, [r0]
   1179c:	mov	r0, r5
   117a0:	mov	r1, #1
   117a4:	bl	11458 <__fprintf_chk@plt>
   117a8:	mov	r0, r4
   117ac:	bl	113e0 <exit@plt>
   117b0:	push	{fp, lr}
   117b4:	mov	fp, sp
   117b8:	movw	r1, #14358	; 0x3816
   117bc:	movt	r1, #2
   117c0:	mov	r0, #0
   117c4:	mov	r2, #5
   117c8:	bl	11314 <dcgettext@plt>
   117cc:	movw	r1, #20940	; 0x51cc
   117d0:	movt	r1, #3
   117d4:	ldr	r1, [r1]
   117d8:	pop	{fp, lr}
   117dc:	b	1120c <fputs_unlocked@plt>
   117e0:	push	{fp, lr}
   117e4:	mov	fp, sp
   117e8:	movw	r1, #14414	; 0x384e
   117ec:	movt	r1, #2
   117f0:	mov	r0, #0
   117f4:	mov	r2, #5
   117f8:	bl	11314 <dcgettext@plt>
   117fc:	movw	r1, #20940	; 0x51cc
   11800:	movt	r1, #3
   11804:	ldr	r1, [r1]
   11808:	pop	{fp, lr}
   1180c:	b	1120c <fputs_unlocked@plt>
   11810:	push	{r4, r5, fp, lr}
   11814:	add	fp, sp, #8
   11818:	sub	sp, sp, #56	; 0x38
   1181c:	movw	r0, #15304	; 0x3bc8
   11820:	movt	r0, #2
   11824:	add	r1, r0, #32
   11828:	mov	r5, sp
   1182c:	mov	r2, #48	; 0x30
   11830:	vld1.64	{d16-d17}, [r1]
   11834:	add	r1, r5, #32
   11838:	add	r3, r0, #16
   1183c:	vld1.64	{d18-d19}, [r0], r2
   11840:	vld1.64	{d20-d21}, [r3]
   11844:	vldr	d22, [r0]
   11848:	vst1.64	{d16-d17}, [r1]
   1184c:	add	r0, r5, #16
   11850:	vst1.64	{d20-d21}, [r0]
   11854:	mov	r0, r5
   11858:	vst1.64	{d18-d19}, [r0], r2
   1185c:	vstr	d22, [r0]
   11860:	ldr	r1, [sp]
   11864:	cmp	r1, #0
   11868:	beq	11890 <__assert_fail@plt+0x378>
   1186c:	mov	r5, sp
   11870:	movw	r4, #13993	; 0x36a9
   11874:	movt	r4, #2
   11878:	mov	r0, r4
   1187c:	bl	11248 <strcmp@plt>
   11880:	cmp	r0, #0
   11884:	ldrne	r1, [r5, #8]!
   11888:	cmpne	r1, #0
   1188c:	bne	11878 <__assert_fail@plt+0x360>
   11890:	ldr	r4, [r5, #4]
   11894:	movw	r1, #14584	; 0x38f8
   11898:	movt	r1, #2
   1189c:	mov	r0, #0
   118a0:	mov	r2, #5
   118a4:	bl	11314 <dcgettext@plt>
   118a8:	mov	r1, r0
   118ac:	movw	r2, #14314	; 0x37ea
   118b0:	movt	r2, #2
   118b4:	movw	r3, #14607	; 0x390f
   118b8:	movt	r3, #2
   118bc:	mov	r0, #1
   118c0:	bl	11440 <__printf_chk@plt>
   118c4:	movw	r5, #13993	; 0x36a9
   118c8:	movt	r5, #2
   118cc:	cmp	r4, #0
   118d0:	moveq	r4, r5
   118d4:	mov	r0, #5
   118d8:	mov	r1, #0
   118dc:	bl	11488 <setlocale@plt>
   118e0:	cmp	r0, #0
   118e4:	beq	11924 <__assert_fail@plt+0x40c>
   118e8:	movw	r1, #14647	; 0x3937
   118ec:	movt	r1, #2
   118f0:	mov	r2, #3
   118f4:	bl	114e8 <strncmp@plt>
   118f8:	cmp	r0, #0
   118fc:	beq	11924 <__assert_fail@plt+0x40c>
   11900:	movw	r1, #14651	; 0x393b
   11904:	movt	r1, #2
   11908:	mov	r0, #0
   1190c:	mov	r2, #5
   11910:	bl	11314 <dcgettext@plt>
   11914:	movw	r1, #20940	; 0x51cc
   11918:	movt	r1, #3
   1191c:	ldr	r1, [r1]
   11920:	bl	1120c <fputs_unlocked@plt>
   11924:	movw	r1, #14722	; 0x3982
   11928:	movt	r1, #2
   1192c:	mov	r0, #0
   11930:	mov	r2, #5
   11934:	bl	11314 <dcgettext@plt>
   11938:	mov	r1, r0
   1193c:	movw	r2, #14607	; 0x390f
   11940:	movt	r2, #2
   11944:	mov	r0, #1
   11948:	mov	r3, r5
   1194c:	bl	11440 <__printf_chk@plt>
   11950:	movw	r1, #14749	; 0x399d
   11954:	movt	r1, #2
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	bl	11314 <dcgettext@plt>
   11964:	mov	r1, r0
   11968:	movw	r0, #14517	; 0x38b5
   1196c:	movt	r0, #2
   11970:	movw	r3, #14990	; 0x3a8e
   11974:	movt	r3, #2
   11978:	cmp	r4, r5
   1197c:	moveq	r3, r0
   11980:	mov	r0, #1
   11984:	mov	r2, r4
   11988:	bl	11440 <__printf_chk@plt>
   1198c:	sub	sp, fp, #8
   11990:	pop	{r4, r5, fp, pc}
   11994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11998:	add	fp, sp, #28
   1199c:	sub	sp, sp, #20
   119a0:	mov	r9, r1
   119a4:	mov	r5, r0
   119a8:	ldr	r0, [r1]
   119ac:	bl	12de0 <__assert_fail@plt+0x18c8>
   119b0:	movw	r1, #14990	; 0x3a8e
   119b4:	movt	r1, #2
   119b8:	mov	r0, #6
   119bc:	bl	11488 <setlocale@plt>
   119c0:	movw	r6, #14318	; 0x37ee
   119c4:	movt	r6, #2
   119c8:	movw	r1, #13996	; 0x36ac
   119cc:	movt	r1, #2
   119d0:	mov	r0, r6
   119d4:	bl	114d0 <bindtextdomain@plt>
   119d8:	mov	r0, r6
   119dc:	bl	1132c <textdomain@plt>
   119e0:	movw	r0, #10768	; 0x2a10
   119e4:	movt	r0, #1
   119e8:	bl	22fdc <__assert_fail@plt+0x11ac4>
   119ec:	movw	r8, #20952	; 0x51d8
   119f0:	movt	r8, #3
   119f4:	mov	r0, #0
   119f8:	mov	r4, #0
   119fc:	strb	r0, [r8]
   11a00:	mov	r6, #1
   11a04:	b	11a10 <__assert_fail@plt+0x4f8>
   11a08:	strd	r0, [r2]
   11a0c:	mov	r6, sl
   11a10:	mov	sl, r6
   11a14:	str	r4, [sp]
   11a18:	mov	r0, r5
   11a1c:	mov	r1, r9
   11a20:	movw	r2, #14020	; 0x36c4
   11a24:	movt	r2, #2
   11a28:	movw	r3, #15048	; 0x3ac8
   11a2c:	movt	r3, #2
   11a30:	bl	113c8 <getopt_long@plt>
   11a34:	add	r0, r0, #3
   11a38:	cmp	r0, #122	; 0x7a
   11a3c:	mov	r6, #0
   11a40:	bhi	11a10 <__assert_fail@plt+0x4f8>
   11a44:	add	r1, pc, #4
   11a48:	mov	r6, #0
   11a4c:	ldr	pc, [r1, r0, lsl #2]
   11a50:	andeq	r2, r1, r0, lsr #4
   11a54:	andeq	r2, r1, r4, ror r2
   11a58:	andeq	r2, r1, r8, asr #32
   11a5c:	andeq	r1, r1, r0, lsl sl
   11a60:	andeq	r1, r1, r0, lsl sl
   11a64:	andeq	r1, r1, r0, lsl sl
   11a68:	andeq	r1, r1, r0, lsl sl
   11a6c:	andeq	r1, r1, r0, lsl sl
   11a70:	andeq	r1, r1, r0, lsl sl
   11a74:	andeq	r1, r1, r0, lsl sl
   11a78:	andeq	r1, r1, r0, lsl sl
   11a7c:	andeq	r1, r1, r0, lsl sl
   11a80:	andeq	r1, r1, r0, lsl sl
   11a84:	andeq	r1, r1, r0, lsl sl
   11a88:	andeq	r1, r1, r0, lsl sl
   11a8c:	andeq	r1, r1, r0, lsl sl
   11a90:	andeq	r1, r1, r0, lsl sl
   11a94:	andeq	r1, r1, r0, lsl sl
   11a98:	andeq	r1, r1, r0, lsl sl
   11a9c:	andeq	r1, r1, r0, lsl sl
   11aa0:	andeq	r1, r1, r0, lsl sl
   11aa4:	andeq	r1, r1, r0, lsl sl
   11aa8:	andeq	r1, r1, r0, lsl sl
   11aac:	andeq	r1, r1, r0, lsl sl
   11ab0:	andeq	r1, r1, r0, lsl sl
   11ab4:	andeq	r1, r1, r0, lsl sl
   11ab8:	andeq	r1, r1, r0, lsl sl
   11abc:	andeq	r1, r1, r0, lsl sl
   11ac0:	andeq	r1, r1, r0, lsl sl
   11ac4:	andeq	r1, r1, r0, lsl sl
   11ac8:	andeq	r1, r1, r0, lsl sl
   11acc:	andeq	r1, r1, r0, lsl sl
   11ad0:	andeq	r1, r1, r0, lsl sl
   11ad4:	andeq	r1, r1, r0, lsl sl
   11ad8:	andeq	r1, r1, r0, lsl sl
   11adc:	andeq	r1, r1, r0, lsl sl
   11ae0:	andeq	r1, r1, r0, lsl sl
   11ae4:	andeq	r1, r1, r0, lsl sl
   11ae8:	andeq	r1, r1, r0, lsl sl
   11aec:	andeq	r1, r1, r0, lsl sl
   11af0:	andeq	r1, r1, r0, lsl sl
   11af4:	andeq	r1, r1, r0, lsl sl
   11af8:	andeq	r1, r1, r0, lsl sl
   11afc:	andeq	r1, r1, r0, lsl sl
   11b00:	andeq	r1, r1, r0, lsl sl
   11b04:	andeq	r1, r1, r0, lsl sl
   11b08:	andeq	r1, r1, r0, lsl sl
   11b0c:	andeq	r1, r1, r0, lsl sl
   11b10:	andeq	r1, r1, r0, lsl sl
   11b14:	andeq	r1, r1, r0, lsl sl
   11b18:	andeq	r1, r1, r0, lsl sl
   11b1c:	andeq	r1, r1, r0, lsl sl
   11b20:	andeq	r1, r1, r0, lsl sl
   11b24:	andeq	r1, r1, r0, lsl sl
   11b28:	andeq	r1, r1, r0, lsl sl
   11b2c:	andeq	r1, r1, r0, lsl sl
   11b30:	andeq	r1, r1, r0, lsl sl
   11b34:	andeq	r1, r1, r0, lsl sl
   11b38:	andeq	r1, r1, r0, lsl sl
   11b3c:	andeq	r1, r1, r0, lsl sl
   11b40:	andeq	r1, r1, r0, lsl sl
   11b44:	andeq	r1, r1, r0, lsl sl
   11b48:	andeq	r1, r1, r0, lsl sl
   11b4c:	andeq	r1, r1, r0, lsl sl
   11b50:	andeq	r1, r1, r0, lsl sl
   11b54:	andeq	r1, r1, r0, lsl sl
   11b58:	andeq	r1, r1, r0, lsl sl
   11b5c:	andeq	r1, r1, r0, lsl sl
   11b60:	andeq	r1, r1, r0, lsl sl
   11b64:	andeq	r1, r1, r0, lsl sl
   11b68:	andeq	r1, r1, r0, lsl sl
   11b6c:	andeq	r1, r1, r0, lsl sl
   11b70:	andeq	r1, r1, r0, lsl sl
   11b74:	andeq	r1, r1, r0, lsl sl
   11b78:	andeq	r1, r1, r0, lsl sl
   11b7c:	andeq	r1, r1, r0, lsl sl
   11b80:	andeq	r1, r1, r0, lsl sl
   11b84:	andeq	r1, r1, r0, lsl sl
   11b88:	andeq	r1, r1, r0, lsl sl
   11b8c:	andeq	r1, r1, r0, lsl sl
   11b90:	andeq	r1, r1, r0, lsl sl
   11b94:	andeq	r1, r1, r0, lsl sl
   11b98:	andeq	r1, r1, r0, lsl sl
   11b9c:	andeq	r1, r1, r0, lsl sl
   11ba0:	andeq	r1, r1, r0, lsl sl
   11ba4:	andeq	r1, r1, r0, lsl sl
   11ba8:	andeq	r1, r1, r0, lsl sl
   11bac:	andeq	r1, r1, r0, lsl sl
   11bb0:	andeq	r1, r1, r0, lsl sl
   11bb4:	andeq	r1, r1, r0, lsl sl
   11bb8:	andeq	r1, r1, r0, lsl sl
   11bbc:	andeq	r1, r1, r0, lsl sl
   11bc0:	andeq	r1, r1, r0, lsl sl
   11bc4:	andeq	r1, r1, r0, lsl sl
   11bc8:	andeq	r1, r1, r0, lsl sl
   11bcc:	andeq	r1, r1, r0, lsl sl
   11bd0:	andeq	r1, r1, r0, lsl sl
   11bd4:	andeq	r1, r1, r0, lsl sl
   11bd8:	andeq	r1, r1, r0, lsl sl
   11bdc:	andeq	r1, r1, r0, lsl sl
   11be0:	andeq	r1, r1, r0, lsl sl
   11be4:	andeq	r1, r1, ip, lsr ip
   11be8:	andeq	r1, r1, r0, lsl sl
   11bec:	andeq	r1, r1, r4, lsr #29
   11bf0:	andeq	r1, r1, r0, lsl sl
   11bf4:	andeq	r1, r1, r4, lsl pc
   11bf8:	andeq	r1, r1, r0, lsl sl
   11bfc:	strdeq	r1, [r1], -r0
   11c00:	andeq	r1, r1, r0, lsr sp
   11c04:	andeq	r1, r1, r0, lsl sl
   11c08:	andeq	r1, r1, r0, lsl sl
   11c0c:	muleq	r1, r0, sp
   11c10:	andeq	r1, r1, r0, lsl sl
   11c14:	muleq	r1, r0, ip
   11c18:	andeq	r1, r1, r0, lsl sl
   11c1c:	andeq	r1, r1, ip, lsr #28
   11c20:	andeq	r1, r1, r0, lsl sl
   11c24:	andeq	r1, r1, r0, lsl sl
   11c28:	andeq	r1, r1, r8, ror ip
   11c2c:	andeq	r1, r1, r0, lsl sl
   11c30:	andeq	r1, r1, r0, lsl sl
   11c34:	andeq	r1, r1, r4, asr #28
   11c38:	andeq	r1, r1, r0, lsl #31
   11c3c:	movw	r0, #20780	; 0x512c
   11c40:	movt	r0, #3
   11c44:	movw	r1, #21244	; 0x52fc
   11c48:	movt	r1, #3
   11c4c:	movw	r2, #21276	; 0x531c
   11c50:	movt	r2, #3
   11c54:	bl	1229c <__assert_fail@plt+0xd84>
   11c58:	cmp	r0, #0
   11c5c:	mov	r6, sl
   11c60:	bne	11a10 <__assert_fail@plt+0x4f8>
   11c64:	mov	r6, #0
   11c68:	mov	r0, #0
   11c6c:	movw	r1, #14077	; 0x36fd
   11c70:	movt	r1, #2
   11c74:	b	11f4c <__assert_fail@plt+0xa34>
   11c78:	movw	r0, #20944	; 0x51d0
   11c7c:	movt	r0, #3
   11c80:	ldr	r0, [r0]
   11c84:	movw	r1, #20816	; 0x5150
   11c88:	movt	r1, #3
   11c8c:	b	11fe0 <__assert_fail@plt+0xac8>
   11c90:	mov	r7, r8
   11c94:	movw	r0, #20944	; 0x51d0
   11c98:	movt	r0, #3
   11c9c:	ldr	r8, [r0]
   11ca0:	mov	r0, r8
   11ca4:	movw	r1, #14271	; 0x37bf
   11ca8:	movt	r1, #2
   11cac:	bl	11248 <strcmp@plt>
   11cb0:	cmp	r0, #0
   11cb4:	beq	12000 <__assert_fail@plt+0xae8>
   11cb8:	mov	r0, r8
   11cbc:	movw	r1, #14274	; 0x37c2
   11cc0:	movt	r1, #2
   11cc4:	bl	11248 <strcmp@plt>
   11cc8:	cmp	r0, #0
   11ccc:	beq	12014 <__assert_fail@plt+0xafc>
   11cd0:	mov	r0, r8
   11cd4:	movw	r1, #14277	; 0x37c5
   11cd8:	movt	r1, #2
   11cdc:	bl	11248 <strcmp@plt>
   11ce0:	cmp	r0, #0
   11ce4:	beq	12028 <__assert_fail@plt+0xb10>
   11ce8:	mov	r6, #0
   11cec:	mov	r0, #0
   11cf0:	movw	r1, #14280	; 0x37c8
   11cf4:	movt	r1, #2
   11cf8:	mov	r2, #5
   11cfc:	bl	11314 <dcgettext@plt>
   11d00:	mov	r8, r0
   11d04:	movw	r0, #20944	; 0x51d0
   11d08:	movt	r0, #3
   11d0c:	ldr	r0, [r0]
   11d10:	bl	14618 <__assert_fail@plt+0x3100>
   11d14:	mov	r3, r0
   11d18:	mov	r0, #0
   11d1c:	mov	r1, #0
   11d20:	mov	r2, r8
   11d24:	bl	1138c <error@plt>
   11d28:	mov	r8, r7
   11d2c:	b	11a10 <__assert_fail@plt+0x4f8>
   11d30:	movw	r0, #20944	; 0x51d0
   11d34:	movt	r0, #3
   11d38:	ldr	r7, [r0]
   11d3c:	mov	r0, #0
   11d40:	movw	r1, #14174	; 0x375e
   11d44:	movt	r1, #2
   11d48:	mov	r2, #5
   11d4c:	bl	11314 <dcgettext@plt>
   11d50:	mvn	r1, #0
   11d54:	str	r1, [sp]
   11d58:	mvn	r1, #-2147483648	; 0x80000000
   11d5c:	str	r1, [sp, #4]
   11d60:	movw	r1, #14990	; 0x3a8e
   11d64:	movt	r1, #2
   11d68:	str	r1, [sp, #8]
   11d6c:	str	r0, [sp, #12]
   11d70:	str	r4, [sp, #16]
   11d74:	mov	r0, r7
   11d78:	mov	r2, #0
   11d7c:	mov	r3, #-2147483648	; 0x80000000
   11d80:	bl	22038 <__assert_fail@plt+0x10b20>
   11d84:	movw	r2, #20800	; 0x5140
   11d88:	movt	r2, #3
   11d8c:	b	11a08 <__assert_fail@plt+0x4f0>
   11d90:	movw	r0, #20944	; 0x51d0
   11d94:	movt	r0, #3
   11d98:	ldr	r7, [r0]
   11d9c:	mov	r0, #0
   11da0:	movw	r1, #14204	; 0x377c
   11da4:	movt	r1, #2
   11da8:	mov	r2, #5
   11dac:	bl	11314 <dcgettext@plt>
   11db0:	mvn	r1, #0
   11db4:	str	r1, [sp]
   11db8:	mvn	r1, #-2147483648	; 0x80000000
   11dbc:	str	r1, [sp, #4]
   11dc0:	movw	r1, #14990	; 0x3a8e
   11dc4:	movt	r1, #2
   11dc8:	str	r1, [sp, #8]
   11dcc:	str	r0, [sp, #12]
   11dd0:	str	r4, [sp, #16]
   11dd4:	mov	r0, r7
   11dd8:	mov	r2, #1
   11ddc:	mov	r3, #0
   11de0:	bl	22038 <__assert_fail@plt+0x10b20>
   11de4:	movw	r2, #20808	; 0x5148
   11de8:	movt	r2, #3
   11dec:	b	11a08 <__assert_fail@plt+0x4f0>
   11df0:	movw	r0, #20776	; 0x5128
   11df4:	movt	r0, #3
   11df8:	movw	r1, #20956	; 0x51dc
   11dfc:	movt	r1, #3
   11e00:	movw	r2, #20988	; 0x51fc
   11e04:	movt	r2, #3
   11e08:	bl	1229c <__assert_fail@plt+0xd84>
   11e0c:	cmp	r0, #0
   11e10:	mov	r6, sl
   11e14:	bne	11a10 <__assert_fail@plt+0x4f8>
   11e18:	mov	r6, #0
   11e1c:	mov	r0, #0
   11e20:	movw	r1, #14042	; 0x36da
   11e24:	movt	r1, #2
   11e28:	b	11f4c <__assert_fail@plt+0xa34>
   11e2c:	mov	r0, #1
   11e30:	movw	r1, #21820	; 0x553c
   11e34:	movt	r1, #3
   11e38:	strb	r0, [r1]
   11e3c:	mov	r6, sl
   11e40:	b	11a10 <__assert_fail@plt+0x4f8>
   11e44:	movw	r0, #20944	; 0x51d0
   11e48:	movt	r0, #3
   11e4c:	ldr	r7, [r0]
   11e50:	mov	r0, #0
   11e54:	movw	r1, #14145	; 0x3741
   11e58:	movt	r1, #2
   11e5c:	mov	r2, #5
   11e60:	bl	11314 <dcgettext@plt>
   11e64:	mvn	r1, #0
   11e68:	str	r1, [sp]
   11e6c:	mvn	r1, #-2147483648	; 0x80000000
   11e70:	str	r1, [sp, #4]
   11e74:	movw	r1, #14990	; 0x3a8e
   11e78:	movt	r1, #2
   11e7c:	str	r1, [sp, #8]
   11e80:	str	r0, [sp, #12]
   11e84:	str	r4, [sp, #16]
   11e88:	mov	r0, r7
   11e8c:	mov	r2, #0
   11e90:	mov	r3, #-2147483648	; 0x80000000
   11e94:	bl	22038 <__assert_fail@plt+0x10b20>
   11e98:	movw	r2, #20792	; 0x5138
   11e9c:	movt	r2, #3
   11ea0:	b	11a08 <__assert_fail@plt+0x4f0>
   11ea4:	movw	r6, #20944	; 0x51d0
   11ea8:	movt	r6, #3
   11eac:	ldr	r7, [r6]
   11eb0:	mov	r0, r7
   11eb4:	bl	113ec <strlen@plt>
   11eb8:	sub	r0, r0, #1
   11ebc:	cmp	r0, #1
   11ec0:	bhi	11fec <__assert_fail@plt+0xad4>
   11ec4:	ldr	r0, [r6]
   11ec8:	ldrb	r1, [r0]
   11ecc:	cmp	r1, #0
   11ed0:	mov	r6, sl
   11ed4:	beq	11a10 <__assert_fail@plt+0x4f8>
   11ed8:	movw	r1, #20828	; 0x515c
   11edc:	movt	r1, #3
   11ee0:	ldr	r1, [r1]
   11ee4:	movw	r3, #20944	; 0x51d0
   11ee8:	movt	r3, #3
   11eec:	add	r2, r0, #1
   11ef0:	str	r2, [r3]
   11ef4:	ldrb	r0, [r0]
   11ef8:	strb	r0, [r1], #1
   11efc:	ldr	r0, [r3]
   11f00:	ldrb	r2, [r0]
   11f04:	cmp	r2, #0
   11f08:	bne	11eec <__assert_fail@plt+0x9d4>
   11f0c:	mov	r6, sl
   11f10:	b	11a10 <__assert_fail@plt+0x4f8>
   11f14:	movw	r0, #20784	; 0x5130
   11f18:	movt	r0, #3
   11f1c:	movw	r1, #21532	; 0x541c
   11f20:	movt	r1, #3
   11f24:	movw	r2, #21564	; 0x543c
   11f28:	movt	r2, #3
   11f2c:	bl	1229c <__assert_fail@plt+0xd84>
   11f30:	cmp	r0, #0
   11f34:	mov	r6, sl
   11f38:	bne	11a10 <__assert_fail@plt+0x4f8>
   11f3c:	mov	r6, #0
   11f40:	mov	r0, #0
   11f44:	movw	r1, #14110	; 0x371e
   11f48:	movt	r1, #2
   11f4c:	mov	r2, #5
   11f50:	bl	11314 <dcgettext@plt>
   11f54:	mov	r7, r0
   11f58:	movw	r0, #20944	; 0x51d0
   11f5c:	movt	r0, #3
   11f60:	ldr	r0, [r0]
   11f64:	bl	14618 <__assert_fail@plt+0x3100>
   11f68:	mov	r3, r0
   11f6c:	mov	r0, #0
   11f70:	mov	r1, #0
   11f74:	mov	r2, r7
   11f78:	bl	1138c <error@plt>
   11f7c:	b	11a10 <__assert_fail@plt+0x4f8>
   11f80:	movw	r0, #20944	; 0x51d0
   11f84:	movt	r0, #3
   11f88:	ldr	r7, [r0]
   11f8c:	mov	r0, #0
   11f90:	movw	r1, #14239	; 0x379f
   11f94:	movt	r1, #2
   11f98:	mov	r2, #5
   11f9c:	bl	11314 <dcgettext@plt>
   11fa0:	mvn	r1, #-2147483648	; 0x80000000
   11fa4:	str	r1, [sp]
   11fa8:	mov	r2, #0
   11fac:	str	r2, [sp, #4]
   11fb0:	movw	r1, #14990	; 0x3a8e
   11fb4:	movt	r1, #2
   11fb8:	str	r1, [sp, #8]
   11fbc:	str	r0, [sp, #12]
   11fc0:	mov	r4, #0
   11fc4:	str	r2, [sp, #16]
   11fc8:	mov	r0, r7
   11fcc:	mov	r2, #1
   11fd0:	mov	r3, #0
   11fd4:	bl	22038 <__assert_fail@plt+0x10b20>
   11fd8:	movw	r1, #20820	; 0x5154
   11fdc:	movt	r1, #3
   11fe0:	str	r0, [r1]
   11fe4:	mov	r6, sl
   11fe8:	b	11a10 <__assert_fail@plt+0x4f8>
   11fec:	movw	r0, #20828	; 0x515c
   11ff0:	movt	r0, #3
   11ff4:	str	r7, [r0]
   11ff8:	mov	r6, sl
   11ffc:	b	11a10 <__assert_fail@plt+0x4f8>
   12000:	movw	r0, #20824	; 0x5158
   12004:	movt	r0, #3
   12008:	movw	r1, #15272	; 0x3ba8
   1200c:	movt	r1, #2
   12010:	b	12038 <__assert_fail@plt+0xb20>
   12014:	movw	r0, #20824	; 0x5158
   12018:	movt	r0, #3
   1201c:	movw	r1, #15281	; 0x3bb1
   12020:	movt	r1, #2
   12024:	b	12038 <__assert_fail@plt+0xb20>
   12028:	movw	r0, #20824	; 0x5158
   1202c:	movt	r0, #3
   12030:	movw	r1, #15289	; 0x3bb9
   12034:	movt	r1, #2
   12038:	str	r1, [r0]
   1203c:	mov	r6, sl
   12040:	mov	r8, r7
   12044:	b	11a10 <__assert_fail@plt+0x4f8>
   12048:	tst	sl, #1
   1204c:	beq	1227c <__assert_fail@plt+0xd64>
   12050:	movw	r0, #20828	; 0x515c
   12054:	movt	r0, #3
   12058:	mov	r4, r0
   1205c:	ldr	r0, [r0]
   12060:	bl	113ec <strlen@plt>
   12064:	mov	r6, r0
   12068:	add	r0, r0, r0, lsl #1
   1206c:	movw	r1, #21824	; 0x5540
   12070:	movt	r1, #3
   12074:	str	r0, [r1]
   12078:	add	r0, r0, #1
   1207c:	bl	21b40 <__assert_fail@plt+0x10628>
   12080:	movw	r7, #21828	; 0x5544
   12084:	movt	r7, #3
   12088:	str	r0, [r7]
   1208c:	ldr	r1, [r4]
   12090:	bl	112fc <stpcpy@plt>
   12094:	ldr	r1, [r4]
   12098:	bl	112fc <stpcpy@plt>
   1209c:	ldr	r1, [r4]
   120a0:	bl	112fc <stpcpy@plt>
   120a4:	lsl	r0, r6, #1
   120a8:	movw	r1, #21832	; 0x5548
   120ac:	movt	r1, #3
   120b0:	str	r0, [r1]
   120b4:	movw	r0, #21840	; 0x5550
   120b8:	movt	r0, #3
   120bc:	str	r6, [r0]
   120c0:	ldr	r0, [r7]
   120c4:	add	r0, r0, r6
   120c8:	movw	r1, #21836	; 0x554c
   120cc:	movt	r1, #3
   120d0:	str	r0, [r1]
   120d4:	add	r0, r0, r6
   120d8:	movw	r1, #21844	; 0x5554
   120dc:	movt	r1, #3
   120e0:	str	r0, [r1]
   120e4:	movw	r0, #21848	; 0x5558
   120e8:	movt	r0, #3
   120ec:	bl	12ce4 <__assert_fail@plt+0x17cc>
   120f0:	movw	r0, #20816	; 0x5150
   120f4:	movt	r0, #3
   120f8:	ldr	r0, [r0]
   120fc:	bl	113ec <strlen@plt>
   12100:	mov	r6, r0
   12104:	movw	r0, #20820	; 0x5154
   12108:	movt	r0, #3
   1210c:	mov	r4, r0
   12110:	ldr	r0, [r0]
   12114:	add	r0, r6, r0
   12118:	add	r0, r0, #1
   1211c:	bl	21b40 <__assert_fail@plt+0x10628>
   12120:	mov	r7, r0
   12124:	movw	r0, #21860	; 0x5564
   12128:	movt	r0, #3
   1212c:	str	r7, [r0]
   12130:	ldr	r0, [r4]
   12134:	add	r6, r0, r6
   12138:	mov	r0, r7
   1213c:	mov	r1, #32
   12140:	mov	r2, r6
   12144:	bl	11428 <memset@plt>
   12148:	mov	r0, #0
   1214c:	strb	r0, [r7, r6]
   12150:	movw	r0, #21876	; 0x5574
   12154:	movt	r0, #3
   12158:	movw	r1, #21244	; 0x52fc
   1215c:	movt	r1, #3
   12160:	str	r1, [r0]
   12164:	movw	r0, #20792	; 0x5138
   12168:	movt	r0, #3
   1216c:	ldrd	r0, [r0]
   12170:	movw	r2, #21864	; 0x5568
   12174:	movt	r2, #3
   12178:	strd	r0, [r2]
   1217c:	movw	r0, #20780	; 0x512c
   12180:	movt	r0, #3
   12184:	ldr	r0, [r0]
   12188:	movw	r1, #21872	; 0x5570
   1218c:	movt	r1, #3
   12190:	str	r0, [r1]
   12194:	movw	r7, #20920	; 0x51b8
   12198:	movt	r7, #3
   1219c:	ldr	r0, [r7]
   121a0:	cmp	r0, r5
   121a4:	bne	121bc <__assert_fail@plt+0xca4>
   121a8:	movw	r0, #15460	; 0x3c64
   121ac:	movt	r0, #2
   121b0:	bl	123a4 <__assert_fail@plt+0xe8c>
   121b4:	mov	r6, r0
   121b8:	b	121f0 <__assert_fail@plt+0xcd8>
   121bc:	ldr	r1, [r7]
   121c0:	mov	r6, #1
   121c4:	cmp	r1, r5
   121c8:	bge	121f0 <__assert_fail@plt+0xcd8>
   121cc:	mov	r6, #1
   121d0:	ldr	r0, [r9, r1, lsl #2]
   121d4:	bl	123a4 <__assert_fail@plt+0xe8c>
   121d8:	ldr	r1, [r7]
   121dc:	add	r1, r1, #1
   121e0:	str	r1, [r7]
   121e4:	and	r6, r6, r0
   121e8:	cmp	r1, r5
   121ec:	blt	121d0 <__assert_fail@plt+0xcb8>
   121f0:	ldrb	r0, [r8]
   121f4:	cmp	r0, #1
   121f8:	bne	12214 <__assert_fail@plt+0xcfc>
   121fc:	movw	r0, #20936	; 0x51c8
   12200:	movt	r0, #3
   12204:	ldr	r0, [r0]
   12208:	bl	12b38 <__assert_fail@plt+0x1620>
   1220c:	cmn	r0, #1
   12210:	beq	12284 <__assert_fail@plt+0xd6c>
   12214:	eor	r0, r6, #1
   12218:	sub	sp, fp, #28
   1221c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12220:	movw	r0, #20836	; 0x5164
   12224:	movt	r0, #3
   12228:	ldr	r3, [r0]
   1222c:	movw	r0, #20940	; 0x51cc
   12230:	movt	r0, #3
   12234:	ldr	r0, [r0]
   12238:	mov	r1, #0
   1223c:	movw	r2, #14342	; 0x3806
   12240:	movt	r2, #2
   12244:	movw	r7, #14328	; 0x37f8
   12248:	movt	r7, #2
   1224c:	str	r7, [sp]
   12250:	str	r2, [sp, #4]
   12254:	str	r1, [sp, #8]
   12258:	movw	r1, #13993	; 0x36a9
   1225c:	movt	r1, #2
   12260:	movw	r2, #14314	; 0x37ea
   12264:	movt	r2, #2
   12268:	bl	21a38 <__assert_fail@plt+0x10520>
   1226c:	mov	r0, #0
   12270:	bl	113e0 <exit@plt>
   12274:	mov	r0, #0
   12278:	bl	11614 <__assert_fail@plt+0xfc>
   1227c:	mov	r0, #1
   12280:	bl	11614 <__assert_fail@plt+0xfc>
   12284:	bl	11404 <__errno_location@plt>
   12288:	ldr	r1, [r0]
   1228c:	movw	r2, #15460	; 0x3c64
   12290:	movt	r2, #2
   12294:	mov	r0, #1
   12298:	bl	1138c <error@plt>
   1229c:	push	{r4, r5, r6, sl, fp, lr}
   122a0:	add	fp, sp, #16
   122a4:	mov	r6, r1
   122a8:	mov	r1, r0
   122ac:	movw	ip, #20944	; 0x51d0
   122b0:	movt	ip, #3
   122b4:	ldr	r5, [ip]
   122b8:	ldrb	r0, [r5]
   122bc:	sub	r3, r0, #97	; 0x61
   122c0:	mov	r0, #0
   122c4:	cmp	r3, #19
   122c8:	bhi	12330 <__assert_fail@plt+0xe18>
   122cc:	add	r4, pc, #0
   122d0:	ldr	pc, [r4, r3, lsl #2]
   122d4:	andeq	r2, r1, r4, lsr #6
   122d8:	andeq	r2, r1, r0, lsr r3
   122dc:	andeq	r2, r1, r0, lsr r3
   122e0:	andeq	r2, r1, r0, lsr r3
   122e4:	andeq	r2, r1, r0, lsr r3
   122e8:	andeq	r2, r1, r0, lsr r3
   122ec:	andeq	r2, r1, r0, lsr r3
   122f0:	andeq	r2, r1, r0, lsr r3
   122f4:	andeq	r2, r1, r0, lsr r3
   122f8:	andeq	r2, r1, r0, lsr r3
   122fc:	andeq	r2, r1, r0, lsr r3
   12300:	andeq	r2, r1, r0, lsr r3
   12304:	andeq	r2, r1, r0, lsr r3
   12308:	andeq	r2, r1, r4, lsr #6
   1230c:	andeq	r2, r1, r0, lsr r3
   12310:	andeq	r2, r1, r4, lsr r3
   12314:	andeq	r2, r1, r0, lsr r3
   12318:	andeq	r2, r1, r0, lsr r3
   1231c:	andeq	r2, r1, r0, lsr r3
   12320:	andeq	r2, r1, r4, lsr #6
   12324:	ldr	r0, [ip]
   12328:	str	r0, [r1]
   1232c:	mov	r0, #1
   12330:	pop	{r4, r5, r6, sl, fp, pc}
   12334:	add	r0, r5, #1
   12338:	str	r0, [ip]
   1233c:	str	r5, [r1]
   12340:	mov	r0, #0
   12344:	str	r0, [r6]
   12348:	str	r0, [r6, #4]
   1234c:	str	r2, [r6, #16]
   12350:	str	r0, [r6, #20]
   12354:	movw	r0, #22216	; 0x56c8
   12358:	movt	r0, #3
   1235c:	movw	r1, #710	; 0x2c6
   12360:	str	r1, [r0]
   12364:	ldr	r5, [ip]
   12368:	mov	r0, r5
   1236c:	bl	113ec <strlen@plt>
   12370:	mov	r1, r0
   12374:	mov	r0, r5
   12378:	mov	r2, r6
   1237c:	bl	14a2c <__assert_fail@plt+0x3514>
   12380:	mov	r3, r0
   12384:	mov	r0, #1
   12388:	cmp	r3, #0
   1238c:	popeq	{r4, r5, r6, sl, fp, pc}
   12390:	movw	r2, #14074	; 0x36fa
   12394:	movt	r2, #2
   12398:	mov	r0, #1
   1239c:	mov	r1, #0
   123a0:	bl	1138c <error@plt>
   123a4:	push	{r4, r5, r6, r7, fp, lr}
   123a8:	add	fp, sp, #16
   123ac:	mov	r4, r0
   123b0:	movw	r1, #15460	; 0x3c64
   123b4:	movt	r1, #2
   123b8:	bl	11248 <strcmp@plt>
   123bc:	cmp	r0, #0
   123c0:	beq	123ec <__assert_fail@plt+0xed4>
   123c4:	movw	r1, #14172	; 0x375c
   123c8:	movt	r1, #2
   123cc:	mov	r0, r4
   123d0:	bl	114c4 <fopen64@plt>
   123d4:	mov	r6, r0
   123d8:	cmp	r0, #0
   123dc:	bne	12408 <__assert_fail@plt+0xef0>
   123e0:	bl	11404 <__errno_location@plt>
   123e4:	ldr	r5, [r0]
   123e8:	b	12484 <__assert_fail@plt+0xf6c>
   123ec:	movw	r0, #20952	; 0x51d8
   123f0:	movt	r0, #3
   123f4:	mov	r1, #1
   123f8:	strb	r1, [r0]
   123fc:	movw	r0, #20936	; 0x51c8
   12400:	movt	r0, #3
   12404:	ldr	r6, [r0]
   12408:	mov	r0, r6
   1240c:	mov	r1, #2
   12410:	bl	12afc <__assert_fail@plt+0x15e4>
   12414:	mov	r0, r6
   12418:	bl	124b8 <__assert_fail@plt+0xfa0>
   1241c:	bl	11404 <__errno_location@plt>
   12420:	mov	r7, r0
   12424:	ldr	r5, [r0]
   12428:	mov	r0, r6
   1242c:	bl	11374 <ferror_unlocked@plt>
   12430:	cmp	r0, #0
   12434:	moveq	r5, r0
   12438:	movw	r1, #15460	; 0x3c64
   1243c:	movt	r1, #2
   12440:	mov	r0, r4
   12444:	bl	11248 <strcmp@plt>
   12448:	cmp	r0, #0
   1244c:	beq	1246c <__assert_fail@plt+0xf54>
   12450:	mov	r0, r6
   12454:	bl	12b38 <__assert_fail@plt+0x1620>
   12458:	cmp	r5, #0
   1245c:	bne	12474 <__assert_fail@plt+0xf5c>
   12460:	cmp	r0, #0
   12464:	ldrne	r5, [r7]
   12468:	b	12474 <__assert_fail@plt+0xf5c>
   1246c:	mov	r0, r6
   12470:	bl	114b8 <clearerr_unlocked@plt>
   12474:	cmp	r5, #0
   12478:	moveq	r6, #1
   1247c:	moveq	r0, r6
   12480:	popeq	{r4, r5, r6, r7, fp, pc}
   12484:	mov	r6, #0
   12488:	mov	r0, #0
   1248c:	mov	r1, #3
   12490:	mov	r2, r4
   12494:	bl	144d8 <__assert_fail@plt+0x2fc0>
   12498:	mov	r3, r0
   1249c:	movw	r2, #14074	; 0x36fa
   124a0:	movt	r2, #2
   124a4:	mov	r0, #0
   124a8:	mov	r1, r5
   124ac:	bl	1138c <error@plt>
   124b0:	mov	r0, r6
   124b4:	pop	{r4, r5, r6, r7, fp, pc}
   124b8:	push	{r4, r5, fp, lr}
   124bc:	add	fp, sp, #8
   124c0:	mov	r4, r0
   124c4:	movw	r0, #21848	; 0x5558
   124c8:	movt	r0, #3
   124cc:	mov	r1, r4
   124d0:	bl	12cf8 <__assert_fail@plt+0x17e0>
   124d4:	cmp	r0, #0
   124d8:	popeq	{r4, r5, fp, pc}
   124dc:	movw	r5, #21848	; 0x5558
   124e0:	movt	r5, #3
   124e4:	bl	1253c <__assert_fail@plt+0x1024>
   124e8:	cmp	r0, #3
   124ec:	bhi	12524 <__assert_fail@plt+0x100c>
   124f0:	add	r1, pc, #0
   124f4:	ldr	pc, [r1, r0, lsl #2]
   124f8:	andeq	r2, r1, r8, lsl #10
   124fc:	andeq	r2, r1, r0, lsl r5
   12500:	andeq	r2, r1, r8, lsl r5
   12504:	andeq	r2, r1, r0, lsr #10
   12508:	bl	12638 <__assert_fail@plt+0x1120>
   1250c:	b	12524 <__assert_fail@plt+0x100c>
   12510:	bl	1267c <__assert_fail@plt+0x1164>
   12514:	b	12524 <__assert_fail@plt+0x100c>
   12518:	bl	126c0 <__assert_fail@plt+0x11a8>
   1251c:	b	12524 <__assert_fail@plt+0x100c>
   12520:	bl	12704 <__assert_fail@plt+0x11ec>
   12524:	mov	r0, r5
   12528:	mov	r1, r4
   1252c:	bl	12cf8 <__assert_fail@plt+0x17e0>
   12530:	cmp	r0, #0
   12534:	bne	124e4 <__assert_fail@plt+0xfcc>
   12538:	pop	{r4, r5, fp, pc}
   1253c:	push	{r4, r5, r6, r7, fp, lr}
   12540:	add	fp, sp, #16
   12544:	movw	r0, #21848	; 0x5558
   12548:	movt	r0, #3
   1254c:	ldr	r1, [r0, #4]
   12550:	sub	r7, r1, #1
   12554:	mov	r4, #3
   12558:	cmp	r7, #2
   1255c:	movwcs	r1, #21840	; 0x5550
   12560:	movtcs	r1, #3
   12564:	ldrcs	r5, [r1]
   12568:	cmpcs	r5, #2
   1256c:	bcs	12578 <__assert_fail@plt+0x1060>
   12570:	mov	r0, r4
   12574:	pop	{r4, r5, r6, r7, fp, pc}
   12578:	movw	r1, #20828	; 0x515c
   1257c:	movt	r1, #3
   12580:	ldr	r1, [r1]
   12584:	ldrh	r1, [r1]
   12588:	ldr	r6, [r0, #8]
   1258c:	ldrh	r0, [r6]
   12590:	cmp	r0, r1
   12594:	bne	12570 <__assert_fail@plt+0x1058>
   12598:	movw	r0, #21824	; 0x5540
   1259c:	movt	r0, #3
   125a0:	ldr	r2, [r0]
   125a4:	cmp	r7, r2
   125a8:	bne	125d0 <__assert_fail@plt+0x10b8>
   125ac:	movw	r0, #21828	; 0x5544
   125b0:	movt	r0, #3
   125b4:	ldr	r1, [r0]
   125b8:	mov	r0, r6
   125bc:	bl	112f0 <memcmp@plt>
   125c0:	cmp	r0, #0
   125c4:	moveq	r4, #0
   125c8:	moveq	r0, r4
   125cc:	popeq	{r4, r5, r6, r7, fp, pc}
   125d0:	movw	r0, #21832	; 0x5548
   125d4:	movt	r0, #3
   125d8:	ldr	r2, [r0]
   125dc:	cmp	r7, r2
   125e0:	bne	12608 <__assert_fail@plt+0x10f0>
   125e4:	movw	r0, #21836	; 0x554c
   125e8:	movt	r0, #3
   125ec:	ldr	r1, [r0]
   125f0:	mov	r0, r6
   125f4:	bl	112f0 <memcmp@plt>
   125f8:	cmp	r0, #0
   125fc:	moveq	r4, #1
   12600:	moveq	r0, r4
   12604:	popeq	{r4, r5, r6, r7, fp, pc}
   12608:	cmp	r7, r5
   1260c:	bne	12570 <__assert_fail@plt+0x1058>
   12610:	movw	r0, #21844	; 0x5554
   12614:	movt	r0, #3
   12618:	ldr	r1, [r0]
   1261c:	mov	r0, r6
   12620:	mov	r2, r5
   12624:	bl	112f0 <memcmp@plt>
   12628:	cmp	r0, #0
   1262c:	moveq	r4, #2
   12630:	mov	r0, r4
   12634:	pop	{r4, r5, r6, r7, fp, pc}
   12638:	push	{fp, lr}
   1263c:	mov	fp, sp
   12640:	movw	r0, #21876	; 0x5574
   12644:	movt	r0, #3
   12648:	movw	r1, #20956	; 0x51dc
   1264c:	movt	r1, #3
   12650:	str	r1, [r0]
   12654:	movw	r0, #20776	; 0x5128
   12658:	movt	r0, #3
   1265c:	ldr	r0, [r0]
   12660:	movw	r1, #21872	; 0x5570
   12664:	movt	r1, #3
   12668:	str	r0, [r1]
   1266c:	bl	128c4 <__assert_fail@plt+0x13ac>
   12670:	mov	r0, #10
   12674:	pop	{fp, lr}
   12678:	b	1150c <putchar_unlocked@plt>
   1267c:	push	{fp, lr}
   12680:	mov	fp, sp
   12684:	movw	r0, #21876	; 0x5574
   12688:	movt	r0, #3
   1268c:	movw	r1, #21244	; 0x52fc
   12690:	movt	r1, #3
   12694:	str	r1, [r0]
   12698:	movw	r0, #20780	; 0x512c
   1269c:	movt	r0, #3
   126a0:	ldr	r0, [r0]
   126a4:	movw	r1, #21872	; 0x5570
   126a8:	movt	r1, #3
   126ac:	str	r0, [r1]
   126b0:	bl	128c4 <__assert_fail@plt+0x13ac>
   126b4:	mov	r0, #10
   126b8:	pop	{fp, lr}
   126bc:	b	1150c <putchar_unlocked@plt>
   126c0:	push	{fp, lr}
   126c4:	mov	fp, sp
   126c8:	movw	r0, #21876	; 0x5574
   126cc:	movt	r0, #3
   126d0:	movw	r1, #21532	; 0x541c
   126d4:	movt	r1, #3
   126d8:	str	r1, [r0]
   126dc:	movw	r0, #20784	; 0x5130
   126e0:	movt	r0, #3
   126e4:	ldr	r0, [r0]
   126e8:	movw	r1, #21872	; 0x5570
   126ec:	movt	r1, #3
   126f0:	str	r0, [r1]
   126f4:	bl	128c4 <__assert_fail@plt+0x13ac>
   126f8:	mov	r0, #10
   126fc:	pop	{fp, lr}
   12700:	b	1150c <putchar_unlocked@plt>
   12704:	push	{r4, r5, fp, lr}
   12708:	add	fp, sp, #8
   1270c:	sub	sp, sp, #8
   12710:	movw	r0, #21872	; 0x5570
   12714:	movt	r0, #3
   12718:	ldr	r0, [r0]
   1271c:	ldrb	r0, [r0]
   12720:	sub	r0, r0, #97	; 0x61
   12724:	cmp	r0, #19
   12728:	bhi	12898 <__assert_fail@plt+0x1380>
   1272c:	add	r1, pc, #0
   12730:	ldr	pc, [r1, r0, lsl #2]
   12734:	andeq	r2, r1, r4, lsl #15
   12738:	muleq	r1, r8, r8
   1273c:	muleq	r1, r8, r8
   12740:	muleq	r1, r8, r8
   12744:	muleq	r1, r8, r8
   12748:	muleq	r1, r8, r8
   1274c:	muleq	r1, r8, r8
   12750:	muleq	r1, r8, r8
   12754:	muleq	r1, r8, r8
   12758:	muleq	r1, r8, r8
   1275c:	muleq	r1, r8, r8
   12760:	muleq	r1, r8, r8
   12764:	muleq	r1, r8, r8
   12768:	andeq	r2, r1, ip, ror r8
   1276c:	muleq	r1, r8, r8
   12770:	strdeq	r2, [r1], -r4
   12774:	muleq	r1, r8, r8
   12778:	muleq	r1, r8, r8
   1277c:	muleq	r1, r8, r8
   12780:	andeq	r2, r1, r0, ror #16
   12784:	movw	r0, #20808	; 0x5148
   12788:	movt	r0, #3
   1278c:	ldrd	r0, [r0]
   12790:	subs	r2, r0, #2
   12794:	sbcs	r2, r1, #0
   12798:	blt	12874 <__assert_fail@plt+0x135c>
   1279c:	movw	r2, #21848	; 0x5558
   127a0:	movt	r2, #3
   127a4:	ldr	r2, [r2, #4]
   127a8:	cmp	r2, #1
   127ac:	bgt	127d8 <__assert_fail@plt+0x12c0>
   127b0:	movw	r2, #21888	; 0x5580
   127b4:	movt	r2, #3
   127b8:	ldrd	r4, [r2]
   127bc:	adds	r4, r4, #1
   127c0:	adc	r5, r5, #0
   127c4:	strd	r4, [r2]
   127c8:	eor	r0, r4, r0
   127cc:	eor	r1, r5, r1
   127d0:	orrs	r0, r0, r1
   127d4:	bne	1287c <__assert_fail@plt+0x1364>
   127d8:	bl	12904 <__assert_fail@plt+0x13ec>
   127dc:	movw	r0, #21888	; 0x5580
   127e0:	movt	r0, #3
   127e4:	mov	r1, #0
   127e8:	str	r1, [r0]
   127ec:	str	r1, [r0, #4]
   127f0:	b	12898 <__assert_fail@plt+0x1380>
   127f4:	movw	r0, #21876	; 0x5574
   127f8:	movt	r0, #3
   127fc:	ldr	r0, [r0]
   12800:	movw	r1, #21848	; 0x5558
   12804:	movt	r1, #3
   12808:	ldr	r2, [r1, #4]
   1280c:	ldr	r1, [r1, #8]
   12810:	mov	r3, #0
   12814:	sub	r2, r2, #1
   12818:	stm	sp, {r2, r3}
   1281c:	mov	r3, #0
   12820:	bl	15f00 <__assert_fail@plt+0x49e8>
   12824:	cmn	r0, #1
   12828:	beq	1287c <__assert_fail@plt+0x1364>
   1282c:	cmn	r0, #2
   12830:	bne	12874 <__assert_fail@plt+0x135c>
   12834:	bl	11404 <__errno_location@plt>
   12838:	ldr	r4, [r0]
   1283c:	movw	r1, #14991	; 0x3a8f
   12840:	movt	r1, #2
   12844:	mov	r0, #0
   12848:	mov	r2, #5
   1284c:	bl	11314 <dcgettext@plt>
   12850:	mov	r2, r0
   12854:	mov	r0, #1
   12858:	mov	r1, r4
   1285c:	bl	1138c <error@plt>
   12860:	movw	r0, #21848	; 0x5558
   12864:	movt	r0, #3
   12868:	ldr	r0, [r0, #4]
   1286c:	cmp	r0, #2
   12870:	blt	1287c <__assert_fail@plt+0x1364>
   12874:	bl	12904 <__assert_fail@plt+0x13ec>
   12878:	b	12898 <__assert_fail@plt+0x1380>
   1287c:	movw	r0, #20940	; 0x51cc
   12880:	movt	r0, #3
   12884:	ldr	r1, [r0]
   12888:	movw	r0, #21860	; 0x5564
   1288c:	movt	r0, #3
   12890:	ldr	r0, [r0]
   12894:	bl	1120c <fputs_unlocked@plt>
   12898:	movw	r0, #20940	; 0x51cc
   1289c:	movt	r0, #3
   128a0:	ldr	r3, [r0]
   128a4:	movw	r0, #21848	; 0x5558
   128a8:	movt	r0, #3
   128ac:	ldr	r2, [r0, #4]
   128b0:	ldr	r0, [r0, #8]
   128b4:	mov	r1, #1
   128b8:	sub	sp, fp, #8
   128bc:	pop	{r4, r5, fp, lr}
   128c0:	b	112e4 <fwrite_unlocked@plt>
   128c4:	movw	r0, #21820	; 0x553c
   128c8:	movt	r0, #3
   128cc:	ldrb	r0, [r0]
   128d0:	cmp	r0, #0
   128d4:	bxne	lr
   128d8:	movw	r0, #21880	; 0x5578
   128dc:	movt	r0, #3
   128e0:	mov	r1, #0
   128e4:	strb	r1, [r0]
   128e8:	movw	r0, #20792	; 0x5138
   128ec:	movt	r0, #3
   128f0:	ldrd	r0, [r0]
   128f4:	movw	r2, #21864	; 0x5568
   128f8:	movt	r2, #3
   128fc:	strd	r0, [r2]
   12900:	bx	lr
   12904:	push	{r4, r5, r6, r7, fp, lr}
   12908:	add	fp, sp, #16
   1290c:	sub	sp, sp, #16
   12910:	movw	r4, #21880	; 0x5578
   12914:	movt	r4, #3
   12918:	ldrb	r0, [r4]
   1291c:	cmp	r0, #1
   12920:	beq	129cc <__assert_fail@plt+0x14b4>
   12924:	movw	r0, #20820	; 0x5154
   12928:	movt	r0, #3
   1292c:	ldr	r2, [r0]
   12930:	movw	r0, #20824	; 0x5158
   12934:	movt	r0, #3
   12938:	ldr	r1, [r0]
   1293c:	movw	r6, #21864	; 0x5568
   12940:	movt	r6, #3
   12944:	ldm	r6, {r0, r3}
   12948:	movw	r5, #20816	; 0x5150
   1294c:	movt	r5, #3
   12950:	ldr	r5, [r5]
   12954:	stm	sp, {r0, r3, r5}
   12958:	mov	r5, #1
   1295c:	mov	r0, #1
   12960:	bl	11440 <__printf_chk@plt>
   12964:	movw	r0, #20800	; 0x5140
   12968:	movt	r0, #3
   1296c:	ldrd	r0, [r0]
   12970:	ldrd	r2, [r6]
   12974:	adds	r0, r2, r0
   12978:	adc	r7, r3, r1
   1297c:	stm	r6, {r0, r7}
   12980:	mov	r0, #0
   12984:	cmn	r3, #1
   12988:	mov	r2, #0
   1298c:	movwgt	r2, #1
   12990:	cmn	r7, #1
   12994:	mov	r3, #0
   12998:	movwgt	r3, #1
   1299c:	subs	r3, r2, r3
   129a0:	movwne	r3, #1
   129a4:	cmn	r1, #1
   129a8:	movwgt	r0, #1
   129ac:	sub	r0, r2, r0
   129b0:	clz	r0, r0
   129b4:	lsr	r0, r0, #5
   129b8:	and	r0, r0, r3
   129bc:	cmp	r0, #1
   129c0:	strbeq	r5, [r4]
   129c4:	sub	sp, fp, #16
   129c8:	pop	{r4, r5, r6, r7, fp, pc}
   129cc:	movw	r1, #15026	; 0x3ab2
   129d0:	movt	r1, #2
   129d4:	mov	r0, #0
   129d8:	mov	r2, #5
   129dc:	bl	11314 <dcgettext@plt>
   129e0:	mov	r2, r0
   129e4:	mov	r0, #1
   129e8:	mov	r1, #0
   129ec:	bl	1138c <error@plt>
   129f0:	movw	r1, #21896	; 0x5588
   129f4:	movt	r1, #3
   129f8:	str	r0, [r1]
   129fc:	bx	lr
   12a00:	movw	r1, #21900	; 0x558c
   12a04:	movt	r1, #3
   12a08:	strb	r0, [r1]
   12a0c:	bx	lr
   12a10:	push	{r4, r5, r6, sl, fp, lr}
   12a14:	add	fp, sp, #16
   12a18:	sub	sp, sp, #8
   12a1c:	movw	r0, #20940	; 0x51cc
   12a20:	movt	r0, #3
   12a24:	ldr	r0, [r0]
   12a28:	bl	229cc <__assert_fail@plt+0x114b4>
   12a2c:	cmp	r0, #0
   12a30:	beq	12a58 <__assert_fail@plt+0x1540>
   12a34:	movw	r0, #21900	; 0x558c
   12a38:	movt	r0, #3
   12a3c:	ldrb	r0, [r0]
   12a40:	cmp	r0, #0
   12a44:	beq	12a78 <__assert_fail@plt+0x1560>
   12a48:	bl	11404 <__errno_location@plt>
   12a4c:	ldr	r0, [r0]
   12a50:	cmp	r0, #32
   12a54:	bne	12a78 <__assert_fail@plt+0x1560>
   12a58:	movw	r0, #20928	; 0x51c0
   12a5c:	movt	r0, #3
   12a60:	ldr	r0, [r0]
   12a64:	bl	229cc <__assert_fail@plt+0x114b4>
   12a68:	cmp	r0, #0
   12a6c:	subeq	sp, fp, #16
   12a70:	popeq	{r4, r5, r6, sl, fp, pc}
   12a74:	b	12ae8 <__assert_fail@plt+0x15d0>
   12a78:	movw	r1, #15375	; 0x3c0f
   12a7c:	movt	r1, #2
   12a80:	mov	r0, #0
   12a84:	mov	r2, #5
   12a88:	bl	11314 <dcgettext@plt>
   12a8c:	mov	r4, r0
   12a90:	movw	r0, #21896	; 0x5588
   12a94:	movt	r0, #3
   12a98:	ldr	r6, [r0]
   12a9c:	bl	11404 <__errno_location@plt>
   12aa0:	ldr	r5, [r0]
   12aa4:	cmp	r6, #0
   12aa8:	bne	12ac4 <__assert_fail@plt+0x15ac>
   12aac:	movw	r2, #14074	; 0x36fa
   12ab0:	movt	r2, #2
   12ab4:	mov	r0, #0
   12ab8:	mov	r1, r5
   12abc:	mov	r3, r4
   12ac0:	b	12ae4 <__assert_fail@plt+0x15cc>
   12ac4:	mov	r0, r6
   12ac8:	bl	144c8 <__assert_fail@plt+0x2fb0>
   12acc:	mov	r3, r0
   12ad0:	str	r4, [sp]
   12ad4:	movw	r2, #15387	; 0x3c1b
   12ad8:	movt	r2, #2
   12adc:	mov	r0, #0
   12ae0:	mov	r1, r5
   12ae4:	bl	1138c <error@plt>
   12ae8:	movw	r0, #20840	; 0x5168
   12aec:	movt	r0, #3
   12af0:	ldr	r0, [r0]
   12af4:	bl	1129c <_exit@plt>
   12af8:	b	11254 <posix_fadvise64@plt>
   12afc:	cmp	r0, #0
   12b00:	bxeq	lr
   12b04:	push	{r4, sl, fp, lr}
   12b08:	add	fp, sp, #8
   12b0c:	sub	sp, sp, #16
   12b10:	mov	r4, r1
   12b14:	bl	1144c <fileno@plt>
   12b18:	mov	r1, #0
   12b1c:	str	r1, [sp]
   12b20:	stmib	sp, {r1, r4}
   12b24:	mov	r2, #0
   12b28:	mov	r3, #0
   12b2c:	bl	12af8 <__assert_fail@plt+0x15e0>
   12b30:	sub	sp, fp, #8
   12b34:	pop	{r4, sl, fp, pc}
   12b38:	push	{r4, r5, fp, lr}
   12b3c:	add	fp, sp, #8
   12b40:	sub	sp, sp, #8
   12b44:	mov	r4, r0
   12b48:	bl	1144c <fileno@plt>
   12b4c:	cmn	r0, #1
   12b50:	ble	12bc8 <__assert_fail@plt+0x16b0>
   12b54:	mov	r0, r4
   12b58:	bl	113b0 <__freading@plt>
   12b5c:	cmp	r0, #0
   12b60:	beq	12b8c <__assert_fail@plt+0x1674>
   12b64:	mov	r0, r4
   12b68:	bl	1144c <fileno@plt>
   12b6c:	mov	r1, #1
   12b70:	str	r1, [sp]
   12b74:	mov	r2, #0
   12b78:	mov	r3, #0
   12b7c:	bl	11350 <lseek64@plt>
   12b80:	and	r0, r0, r1
   12b84:	cmn	r0, #1
   12b88:	beq	12bc8 <__assert_fail@plt+0x16b0>
   12b8c:	mov	r0, r4
   12b90:	bl	12bd8 <__assert_fail@plt+0x16c0>
   12b94:	cmp	r0, #0
   12b98:	beq	12bc8 <__assert_fail@plt+0x16b0>
   12b9c:	bl	11404 <__errno_location@plt>
   12ba0:	ldr	r5, [r0]
   12ba4:	mov	r0, r4
   12ba8:	bl	11470 <fclose@plt>
   12bac:	cmp	r5, #0
   12bb0:	beq	12bc0 <__assert_fail@plt+0x16a8>
   12bb4:	bl	11404 <__errno_location@plt>
   12bb8:	str	r5, [r0]
   12bbc:	mvn	r0, #0
   12bc0:	sub	sp, fp, #8
   12bc4:	pop	{r4, r5, fp, pc}
   12bc8:	mov	r0, r4
   12bcc:	sub	sp, fp, #8
   12bd0:	pop	{r4, r5, fp, lr}
   12bd4:	b	11470 <fclose@plt>
   12bd8:	push	{r4, sl, fp, lr}
   12bdc:	add	fp, sp, #8
   12be0:	mov	r4, r0
   12be4:	cmp	r0, #0
   12be8:	beq	12c00 <__assert_fail@plt+0x16e8>
   12bec:	mov	r0, r4
   12bf0:	bl	113b0 <__freading@plt>
   12bf4:	cmp	r0, #0
   12bf8:	movne	r0, r4
   12bfc:	blne	12c0c <__assert_fail@plt+0x16f4>
   12c00:	mov	r0, r4
   12c04:	pop	{r4, sl, fp, lr}
   12c08:	b	1126c <fflush@plt>
   12c0c:	ldrb	r1, [r0, #1]
   12c10:	tst	r1, #1
   12c14:	bxeq	lr
   12c18:	push	{fp, lr}
   12c1c:	mov	fp, sp
   12c20:	sub	sp, sp, #8
   12c24:	mov	r1, #1
   12c28:	str	r1, [sp]
   12c2c:	mov	r2, #0
   12c30:	mov	r3, #0
   12c34:	bl	12c40 <__assert_fail@plt+0x1728>
   12c38:	mov	sp, fp
   12c3c:	pop	{fp, pc}
   12c40:	push	{r4, r5, r6, r7, fp, lr}
   12c44:	add	fp, sp, #16
   12c48:	sub	sp, sp, #8
   12c4c:	mov	r5, r3
   12c50:	mov	r6, r2
   12c54:	mov	r4, r0
   12c58:	ldr	r0, [r0, #4]
   12c5c:	ldr	r1, [r4, #8]
   12c60:	cmp	r1, r0
   12c64:	bne	12c80 <__assert_fail@plt+0x1768>
   12c68:	ldrd	r0, [r4, #16]
   12c6c:	cmp	r1, r0
   12c70:	bne	12c80 <__assert_fail@plt+0x1768>
   12c74:	ldr	r0, [r4, #36]	; 0x24
   12c78:	cmp	r0, #0
   12c7c:	beq	12c98 <__assert_fail@plt+0x1780>
   12c80:	mov	r0, r4
   12c84:	mov	r2, r6
   12c88:	mov	r3, r5
   12c8c:	sub	sp, fp, #16
   12c90:	pop	{r4, r5, r6, r7, fp, lr}
   12c94:	b	1147c <fseeko64@plt>
   12c98:	ldr	r7, [fp, #8]
   12c9c:	mov	r0, r4
   12ca0:	bl	1144c <fileno@plt>
   12ca4:	str	r7, [sp]
   12ca8:	mov	r2, r6
   12cac:	mov	r3, r5
   12cb0:	bl	11350 <lseek64@plt>
   12cb4:	and	r2, r0, r1
   12cb8:	cmn	r2, #1
   12cbc:	mvneq	r0, #0
   12cc0:	subeq	sp, fp, #16
   12cc4:	popeq	{r4, r5, r6, r7, fp, pc}
   12cc8:	strd	r0, [r4, #80]	; 0x50
   12ccc:	ldr	r0, [r4]
   12cd0:	bic	r0, r0, #16
   12cd4:	str	r0, [r4]
   12cd8:	mov	r0, #0
   12cdc:	sub	sp, fp, #16
   12ce0:	pop	{r4, r5, r6, r7, fp, pc}
   12ce4:	mov	r1, #0
   12ce8:	str	r1, [r0]
   12cec:	str	r1, [r0, #4]
   12cf0:	str	r1, [r0, #8]
   12cf4:	bx	lr
   12cf8:	mov	r2, #10
   12cfc:	b	12d00 <__assert_fail@plt+0x17e8>
   12d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d04:	add	fp, sp, #28
   12d08:	sub	sp, sp, #4
   12d0c:	mov	sl, r2
   12d10:	mov	r8, r1
   12d14:	mov	r4, r0
   12d18:	ldr	r5, [r0]
   12d1c:	ldr	r6, [r0, #8]
   12d20:	mov	r0, r1
   12d24:	bl	11500 <feof_unlocked@plt>
   12d28:	cmp	r0, #0
   12d2c:	beq	12d38 <__assert_fail@plt+0x1820>
   12d30:	mov	r4, #0
   12d34:	b	12dcc <__assert_fail@plt+0x18b4>
   12d38:	add	r9, r6, r5
   12d3c:	mov	r7, r6
   12d40:	mov	r0, r8
   12d44:	bl	11308 <getc_unlocked@plt>
   12d48:	mov	r5, r0
   12d4c:	cmn	r0, #1
   12d50:	bne	12d7c <__assert_fail@plt+0x1864>
   12d54:	cmp	r7, r6
   12d58:	beq	12d30 <__assert_fail@plt+0x1818>
   12d5c:	mov	r0, r8
   12d60:	bl	11374 <ferror_unlocked@plt>
   12d64:	cmp	r0, #0
   12d68:	bne	12d30 <__assert_fail@plt+0x1818>
   12d6c:	ldrb	r0, [r7, #-1]
   12d70:	cmp	r0, sl
   12d74:	mov	r5, sl
   12d78:	beq	12dc4 <__assert_fail@plt+0x18ac>
   12d7c:	cmp	r7, r9
   12d80:	bne	12db8 <__assert_fail@plt+0x18a0>
   12d84:	ldr	r7, [r4]
   12d88:	mov	r0, #1
   12d8c:	str	r0, [sp]
   12d90:	mov	r0, r6
   12d94:	mov	r1, r4
   12d98:	mov	r2, #1
   12d9c:	mvn	r3, #0
   12da0:	bl	21c64 <__assert_fail@plt+0x1074c>
   12da4:	mov	r6, r0
   12da8:	str	r0, [r4, #8]
   12dac:	add	r7, r0, r7
   12db0:	ldr	r0, [r4]
   12db4:	add	r9, r6, r0
   12db8:	strb	r5, [r7], #1
   12dbc:	cmp	r5, sl
   12dc0:	bne	12d40 <__assert_fail@plt+0x1828>
   12dc4:	sub	r0, r7, r6
   12dc8:	str	r0, [r4, #4]
   12dcc:	mov	r0, r4
   12dd0:	sub	sp, fp, #28
   12dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dd8:	ldr	r0, [r0, #8]
   12ddc:	b	22b14 <__assert_fail@plt+0x115fc>
   12de0:	push	{r4, r5, fp, lr}
   12de4:	add	fp, sp, #8
   12de8:	cmp	r0, #0
   12dec:	beq	12e80 <__assert_fail@plt+0x1968>
   12df0:	mov	r4, r0
   12df4:	mov	r1, #47	; 0x2f
   12df8:	bl	114a0 <strrchr@plt>
   12dfc:	cmp	r0, #0
   12e00:	mov	r5, r4
   12e04:	addne	r5, r0, #1
   12e08:	sub	r0, r5, r4
   12e0c:	cmp	r0, #7
   12e10:	blt	12e64 <__assert_fail@plt+0x194c>
   12e14:	sub	r0, r5, #7
   12e18:	movw	r1, #15450	; 0x3c5a
   12e1c:	movt	r1, #2
   12e20:	mov	r2, #7
   12e24:	bl	114e8 <strncmp@plt>
   12e28:	cmp	r0, #0
   12e2c:	bne	12e64 <__assert_fail@plt+0x194c>
   12e30:	movw	r1, #15458	; 0x3c62
   12e34:	movt	r1, #2
   12e38:	mov	r0, r5
   12e3c:	mov	r2, #3
   12e40:	bl	114e8 <strncmp@plt>
   12e44:	cmp	r0, #0
   12e48:	beq	12e54 <__assert_fail@plt+0x193c>
   12e4c:	mov	r4, r5
   12e50:	b	12e64 <__assert_fail@plt+0x194c>
   12e54:	add	r4, r5, #3
   12e58:	movw	r0, #20912	; 0x51b0
   12e5c:	movt	r0, #3
   12e60:	str	r4, [r0]
   12e64:	movw	r0, #20916	; 0x51b4
   12e68:	movt	r0, #3
   12e6c:	str	r4, [r0]
   12e70:	movw	r0, #21904	; 0x5590
   12e74:	movt	r0, #3
   12e78:	str	r4, [r0]
   12e7c:	pop	{r4, r5, fp, pc}
   12e80:	movw	r0, #20928	; 0x51c0
   12e84:	movt	r0, #3
   12e88:	ldr	r3, [r0]
   12e8c:	movw	r0, #15394	; 0x3c22
   12e90:	movt	r0, #2
   12e94:	mov	r1, #55	; 0x37
   12e98:	mov	r2, #1
   12e9c:	bl	11344 <fwrite@plt>
   12ea0:	bl	114f4 <abort@plt>
   12ea4:	push	{r4, r5, r6, sl, fp, lr}
   12ea8:	add	fp, sp, #16
   12eac:	mov	r4, r0
   12eb0:	movw	r0, #21912	; 0x5598
   12eb4:	movt	r0, #3
   12eb8:	cmp	r4, #0
   12ebc:	moveq	r4, r0
   12ec0:	bl	11404 <__errno_location@plt>
   12ec4:	mov	r5, r0
   12ec8:	ldr	r6, [r0]
   12ecc:	mov	r0, r4
   12ed0:	mov	r1, #48	; 0x30
   12ed4:	bl	21e34 <__assert_fail@plt+0x1091c>
   12ed8:	str	r6, [r5]
   12edc:	pop	{r4, r5, r6, sl, fp, pc}
   12ee0:	movw	r1, #21912	; 0x5598
   12ee4:	movt	r1, #3
   12ee8:	cmp	r0, #0
   12eec:	movne	r1, r0
   12ef0:	ldr	r0, [r1]
   12ef4:	bx	lr
   12ef8:	movw	r2, #21912	; 0x5598
   12efc:	movt	r2, #3
   12f00:	cmp	r0, #0
   12f04:	movne	r2, r0
   12f08:	str	r1, [r2]
   12f0c:	bx	lr
   12f10:	movw	r3, #21912	; 0x5598
   12f14:	movt	r3, #3
   12f18:	cmp	r0, #0
   12f1c:	movne	r3, r0
   12f20:	ubfx	r0, r1, #5, #3
   12f24:	add	r0, r3, r0, lsl #2
   12f28:	ldr	r3, [r0, #8]
   12f2c:	and	r1, r1, #31
   12f30:	eor	r2, r2, r3, lsr r1
   12f34:	and	r2, r2, #1
   12f38:	eor	r2, r3, r2, lsl r1
   12f3c:	str	r2, [r0, #8]
   12f40:	mov	r0, #1
   12f44:	and	r0, r0, r3, lsr r1
   12f48:	bx	lr
   12f4c:	movw	r2, #21912	; 0x5598
   12f50:	movt	r2, #3
   12f54:	cmp	r0, #0
   12f58:	movne	r2, r0
   12f5c:	ldr	r0, [r2, #4]
   12f60:	str	r1, [r2, #4]
   12f64:	bx	lr
   12f68:	movw	r3, #21912	; 0x5598
   12f6c:	movt	r3, #3
   12f70:	cmp	r0, #0
   12f74:	movne	r3, r0
   12f78:	mov	r0, #10
   12f7c:	str	r0, [r3]
   12f80:	cmp	r1, #0
   12f84:	cmpne	r2, #0
   12f88:	bne	12f98 <__assert_fail@plt+0x1a80>
   12f8c:	push	{fp, lr}
   12f90:	mov	fp, sp
   12f94:	bl	114f4 <abort@plt>
   12f98:	str	r1, [r3, #40]	; 0x28
   12f9c:	str	r2, [r3, #44]	; 0x2c
   12fa0:	bx	lr
   12fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fa8:	add	fp, sp, #28
   12fac:	sub	sp, sp, #20
   12fb0:	mov	r8, r3
   12fb4:	mov	r9, r2
   12fb8:	mov	sl, r1
   12fbc:	mov	r7, r0
   12fc0:	ldr	r0, [fp, #8]
   12fc4:	movw	r5, #21912	; 0x5598
   12fc8:	movt	r5, #3
   12fcc:	cmp	r0, #0
   12fd0:	movne	r5, r0
   12fd4:	bl	11404 <__errno_location@plt>
   12fd8:	mov	r4, r0
   12fdc:	ldm	r5, {r0, r1}
   12fe0:	ldr	r2, [r5, #40]	; 0x28
   12fe4:	ldr	r3, [r5, #44]	; 0x2c
   12fe8:	ldr	r6, [r4]
   12fec:	add	r5, r5, #8
   12ff0:	stm	sp, {r0, r1, r5}
   12ff4:	str	r2, [sp, #12]
   12ff8:	str	r3, [sp, #16]
   12ffc:	mov	r0, r7
   13000:	mov	r1, sl
   13004:	mov	r2, r9
   13008:	mov	r3, r8
   1300c:	bl	1301c <__assert_fail@plt+0x1b04>
   13010:	str	r6, [r4]
   13014:	sub	sp, fp, #28
   13018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1301c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13020:	add	fp, sp, #28
   13024:	sub	sp, sp, #156	; 0x9c
   13028:	mov	r9, r3
   1302c:	str	r2, [fp, #-84]	; 0xffffffac
   13030:	mov	r6, r1
   13034:	mov	r7, r0
   13038:	ldr	r0, [fp, #12]
   1303c:	and	r1, r0, #4
   13040:	str	r1, [sp, #32]
   13044:	and	r1, r0, #1
   13048:	str	r1, [sp, #36]	; 0x24
   1304c:	ubfx	sl, r0, #1, #1
   13050:	bl	1135c <__ctype_get_mb_cur_max@plt>
   13054:	str	r0, [sp, #40]	; 0x28
   13058:	ldr	r0, [fp, #24]
   1305c:	str	r0, [sp, #76]	; 0x4c
   13060:	ldr	r0, [fp, #20]
   13064:	str	r0, [sp, #68]	; 0x44
   13068:	ldr	r0, [fp, #8]
   1306c:	str	r0, [fp, #-60]	; 0xffffffc4
   13070:	mov	r0, #0
   13074:	str	r0, [sp, #72]	; 0x48
   13078:	mov	r0, #0
   1307c:	str	r0, [sp, #92]	; 0x5c
   13080:	mov	r0, #0
   13084:	str	r0, [fp, #-72]	; 0xffffffb8
   13088:	mov	r0, #0
   1308c:	mov	r1, #0
   13090:	str	r1, [fp, #-56]	; 0xffffffc8
   13094:	mov	r1, #0
   13098:	str	r1, [sp, #56]	; 0x38
   1309c:	mov	r5, #1
   130a0:	str	r7, [sp, #80]	; 0x50
   130a4:	mov	r4, r6
   130a8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   130ac:	cmp	r6, #10
   130b0:	bhi	14018 <__assert_fail@plt+0x2b00>
   130b4:	add	r1, pc, #20
   130b8:	mov	r8, #0
   130bc:	mov	r2, #1
   130c0:	mov	r3, #0
   130c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   130c8:	mov	lr, r9
   130cc:	ldr	pc, [r1, r6, lsl #2]
   130d0:	andeq	r3, r1, r8, lsr #3
   130d4:	ldrdeq	r3, [r1], -r8
   130d8:	muleq	r1, r8, r1
   130dc:	muleq	r1, r0, r1
   130e0:	andeq	r3, r1, ip, asr #3
   130e4:	andeq	r3, r1, ip, lsr #4
   130e8:			; <UNDEFINED> instruction: 0x000131b8
   130ec:	andeq	r3, r1, r8, lsl #5
   130f0:	strdeq	r3, [r1], -ip
   130f4:	strdeq	r3, [r1], -ip
   130f8:	andeq	r3, r1, r4, lsr #2
   130fc:	movw	r0, #15540	; 0x3cb4
   13100:	movt	r0, #2
   13104:	mov	r1, r6
   13108:	bl	14624 <__assert_fail@plt+0x310c>
   1310c:	str	r0, [sp, #68]	; 0x44
   13110:	movw	r0, #15542	; 0x3cb6
   13114:	movt	r0, #2
   13118:	mov	r1, r6
   1311c:	bl	14624 <__assert_fail@plt+0x310c>
   13120:	str	r0, [sp, #76]	; 0x4c
   13124:	mov	r8, #0
   13128:	tst	sl, #1
   1312c:	bne	13164 <__assert_fail@plt+0x1c4c>
   13130:	ldr	r0, [sp, #68]	; 0x44
   13134:	ldrb	r0, [r0]
   13138:	cmp	r0, #0
   1313c:	beq	13164 <__assert_fail@plt+0x1c4c>
   13140:	ldr	r1, [sp, #68]	; 0x44
   13144:	add	r1, r1, #1
   13148:	mov	r8, #0
   1314c:	cmp	r8, r4
   13150:	strbcc	r0, [r7, r8]
   13154:	ldrb	r0, [r1, r8]
   13158:	add	r8, r8, #1
   1315c:	cmp	r0, #0
   13160:	bne	1314c <__assert_fail@plt+0x1c34>
   13164:	ldr	r6, [sp, #76]	; 0x4c
   13168:	mov	r0, r6
   1316c:	bl	113ec <strlen@plt>
   13170:	str	r0, [fp, #-72]	; 0xffffffb8
   13174:	str	r6, [sp, #92]	; 0x5c
   13178:	mov	r2, #1
   1317c:	mov	r3, sl
   13180:	ldr	ip, [fp, #-84]	; 0xffffffac
   13184:	mov	lr, r9
   13188:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1318c:	b	13288 <__assert_fail@plt+0x1d70>
   13190:	mov	r0, #1
   13194:	b	131d8 <__assert_fail@plt+0x1cc0>
   13198:	tst	sl, #1
   1319c:	bne	131d8 <__assert_fail@plt+0x1cc0>
   131a0:	mov	r2, r0
   131a4:	b	13200 <__assert_fail@plt+0x1ce8>
   131a8:	mov	r6, #0
   131ac:	mov	r8, #0
   131b0:	mov	r2, r0
   131b4:	b	13284 <__assert_fail@plt+0x1d6c>
   131b8:	mov	r0, #1
   131bc:	str	r0, [fp, #-72]	; 0xffffffb8
   131c0:	mov	r8, #0
   131c4:	mov	r6, #5
   131c8:	b	13244 <__assert_fail@plt+0x1d2c>
   131cc:	mov	r2, #1
   131d0:	tst	sl, #1
   131d4:	beq	13200 <__assert_fail@plt+0x1ce8>
   131d8:	mov	r1, #1
   131dc:	str	r1, [fp, #-72]	; 0xffffffb8
   131e0:	mov	r8, #0
   131e4:	mov	r6, #2
   131e8:	movw	r1, #15542	; 0x3cb6
   131ec:	movt	r1, #2
   131f0:	str	r1, [sp, #92]	; 0x5c
   131f4:	mov	r2, r0
   131f8:	mov	r3, #1
   131fc:	b	13288 <__assert_fail@plt+0x1d70>
   13200:	mov	r8, #1
   13204:	mov	r6, #2
   13208:	cmp	r4, #0
   1320c:	movne	r0, #39	; 0x27
   13210:	strbne	r0, [r7]
   13214:	movw	r0, #15542	; 0x3cb6
   13218:	movt	r0, #2
   1321c:	str	r0, [sp, #92]	; 0x5c
   13220:	mov	r0, #1
   13224:	str	r0, [fp, #-72]	; 0xffffffb8
   13228:	b	13284 <__assert_fail@plt+0x1d6c>
   1322c:	mov	r6, #5
   13230:	tst	sl, #1
   13234:	beq	1325c <__assert_fail@plt+0x1d44>
   13238:	mov	r0, #1
   1323c:	str	r0, [fp, #-72]	; 0xffffffb8
   13240:	mov	r8, #0
   13244:	movw	r0, #15538	; 0x3cb2
   13248:	movt	r0, #2
   1324c:	str	r0, [sp, #92]	; 0x5c
   13250:	mov	r2, #1
   13254:	mov	r3, #1
   13258:	b	13288 <__assert_fail@plt+0x1d70>
   1325c:	cmp	r4, #0
   13260:	movne	r0, #34	; 0x22
   13264:	strbne	r0, [r7]
   13268:	mov	r8, #1
   1326c:	movw	r0, #15538	; 0x3cb2
   13270:	movt	r0, #2
   13274:	str	r0, [sp, #92]	; 0x5c
   13278:	mov	r0, #1
   1327c:	str	r0, [fp, #-72]	; 0xffffffb8
   13280:	mov	r2, #1
   13284:	mov	r3, #0
   13288:	ldr	r0, [fp, #16]
   1328c:	cmp	r0, #0
   13290:	movwne	r0, #1
   13294:	and	r0, r0, r3
   13298:	str	r0, [fp, #-88]	; 0xffffffa8
   1329c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132a0:	cmp	r0, #0
   132a4:	movwne	r0, #1
   132a8:	and	r1, r0, r3
   132ac:	and	r1, r2, r1
   132b0:	str	r1, [sp, #48]	; 0x30
   132b4:	str	r6, [fp, #-60]	; 0xffffffc4
   132b8:	subs	r6, r6, #2
   132bc:	clz	r1, r6
   132c0:	lsr	r1, r1, #5
   132c4:	and	r1, r1, r3
   132c8:	str	r1, [sp, #60]	; 0x3c
   132cc:	str	r6, [fp, #-80]	; 0xffffffb0
   132d0:	mov	r1, r6
   132d4:	movwne	r1, #1
   132d8:	str	r3, [fp, #-76]	; 0xffffffb4
   132dc:	eor	r3, r3, #1
   132e0:	str	r3, [sp, #88]	; 0x58
   132e4:	orr	r3, r1, r3
   132e8:	str	r3, [sp, #64]	; 0x40
   132ec:	and	r1, r1, r2
   132f0:	str	r1, [fp, #-68]	; 0xffffffbc
   132f4:	and	r0, r0, r1
   132f8:	str	r0, [fp, #-64]	; 0xffffffc0
   132fc:	str	r2, [sp, #84]	; 0x54
   13300:	eor	r0, r2, #1
   13304:	str	r0, [sp, #52]	; 0x34
   13308:	mov	r6, #0
   1330c:	cmn	lr, #1
   13310:	beq	13320 <__assert_fail@plt+0x1e08>
   13314:	cmp	r6, lr
   13318:	bne	1332c <__assert_fail@plt+0x1e14>
   1331c:	b	13e98 <__assert_fail@plt+0x2980>
   13320:	ldrb	r0, [ip, r6]
   13324:	cmp	r0, #0
   13328:	beq	13e98 <__assert_fail@plt+0x2980>
   1332c:	str	r5, [fp, #-48]	; 0xffffffd0
   13330:	mov	sl, #0
   13334:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13338:	cmp	r0, #0
   1333c:	beq	13370 <__assert_fail@plt+0x1e58>
   13340:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13344:	add	r5, r6, r0
   13348:	cmp	r0, #2
   1334c:	bcc	13368 <__assert_fail@plt+0x1e50>
   13350:	cmn	lr, #1
   13354:	bne	13368 <__assert_fail@plt+0x1e50>
   13358:	mov	r0, ip
   1335c:	bl	113ec <strlen@plt>
   13360:	ldr	ip, [fp, #-84]	; 0xffffffac
   13364:	mov	lr, r0
   13368:	cmp	r5, lr
   1336c:	bls	1337c <__assert_fail@plt+0x1e64>
   13370:	mov	r0, #0
   13374:	str	r0, [fp, #-52]	; 0xffffffcc
   13378:	b	133c8 <__assert_fail@plt+0x1eb0>
   1337c:	mov	r5, r4
   13380:	mov	r4, lr
   13384:	add	r0, ip, r6
   13388:	ldr	r1, [sp, #92]	; 0x5c
   1338c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13390:	bl	112f0 <memcmp@plt>
   13394:	cmp	r0, #0
   13398:	mov	r1, r0
   1339c:	movwne	r1, #1
   133a0:	ldr	r2, [sp, #88]	; 0x58
   133a4:	orr	r1, r1, r2
   133a8:	tst	r1, #1
   133ac:	beq	13f5c <__assert_fail@plt+0x2a44>
   133b0:	clz	r0, r0
   133b4:	lsr	r0, r0, #5
   133b8:	str	r0, [fp, #-52]	; 0xffffffcc
   133bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   133c0:	mov	lr, r4
   133c4:	mov	r4, r5
   133c8:	ldrb	r5, [ip, r6]
   133cc:	cmp	r5, #126	; 0x7e
   133d0:	bhi	1378c <__assert_fail@plt+0x2274>
   133d4:	mov	r9, #1
   133d8:	mov	r2, #110	; 0x6e
   133dc:	mov	r0, #97	; 0x61
   133e0:	add	r3, pc, #4
   133e4:	mov	r1, #0
   133e8:	ldr	pc, [r3, r5, lsl #2]
   133ec:	andeq	r3, r1, r4, lsl #13
   133f0:	andeq	r3, r1, ip, lsl #15
   133f4:	andeq	r3, r1, ip, lsl #15
   133f8:	andeq	r3, r1, ip, lsl #15
   133fc:	andeq	r3, r1, ip, lsl #15
   13400:	andeq	r3, r1, ip, lsl #15
   13404:	andeq	r3, r1, ip, lsl #15
   13408:	andeq	r3, r1, r0, asr r8
   1340c:	andeq	r3, r1, r4, ror #12
   13410:	andeq	r3, r1, ip, asr r6
   13414:	andeq	r3, r1, r0, ror r6
   13418:	strdeq	r3, [r1], -r4
   1341c:	andeq	r3, r1, r4, asr r6
   13420:	andeq	r3, r1, ip, ror #12
   13424:	andeq	r3, r1, ip, lsl #15
   13428:	andeq	r3, r1, ip, lsl #15
   1342c:	andeq	r3, r1, ip, lsl #15
   13430:	andeq	r3, r1, ip, lsl #15
   13434:	andeq	r3, r1, ip, lsl #15
   13438:	andeq	r3, r1, ip, lsl #15
   1343c:	andeq	r3, r1, ip, lsl #15
   13440:	andeq	r3, r1, ip, lsl #15
   13444:	andeq	r3, r1, ip, lsl #15
   13448:	andeq	r3, r1, ip, lsl #15
   1344c:	andeq	r3, r1, ip, lsl #15
   13450:	andeq	r3, r1, ip, lsl #15
   13454:	andeq	r3, r1, ip, lsl #15
   13458:	andeq	r3, r1, ip, lsl #15
   1345c:	andeq	r3, r1, ip, lsl #15
   13460:	andeq	r3, r1, ip, lsl #15
   13464:	andeq	r3, r1, ip, lsl #15
   13468:	andeq	r3, r1, ip, lsl #15
   1346c:	andeq	r3, r1, r0, lsl #16
   13470:	andeq	r3, r1, r4, lsl #16
   13474:	andeq	r3, r1, r4, lsl #16
   13478:	strdeq	r3, [r1], -ip
   1347c:	andeq	r3, r1, r4, lsl #16
   13480:	andeq	r3, r1, r8, ror #11
   13484:	andeq	r3, r1, r4, lsl #16
   13488:	strdeq	r3, [r1], -ip
   1348c:	andeq	r3, r1, r4, lsl #16
   13490:	andeq	r3, r1, r4, lsl #16
   13494:	andeq	r3, r1, r4, lsl #16
   13498:	andeq	r3, r1, r8, ror #11
   1349c:	andeq	r3, r1, r8, ror #11
   134a0:	andeq	r3, r1, r8, ror #11
   134a4:	andeq	r3, r1, r8, ror #11
   134a8:	andeq	r3, r1, r8, ror #11
   134ac:	andeq	r3, r1, r8, ror #11
   134b0:	andeq	r3, r1, r8, ror #11
   134b4:	andeq	r3, r1, r8, ror #11
   134b8:	andeq	r3, r1, r8, ror #11
   134bc:	andeq	r3, r1, r8, ror #11
   134c0:	andeq	r3, r1, r8, ror #11
   134c4:	andeq	r3, r1, r8, ror #11
   134c8:	andeq	r3, r1, r8, ror #11
   134cc:	andeq	r3, r1, r8, ror #11
   134d0:	andeq	r3, r1, r8, ror #11
   134d4:	andeq	r3, r1, r8, ror #11
   134d8:	andeq	r3, r1, r4, lsl #16
   134dc:	andeq	r3, r1, r4, lsl #16
   134e0:	andeq	r3, r1, r4, lsl #16
   134e4:	andeq	r3, r1, r4, lsl #16
   134e8:	andeq	r3, r1, r4, asr #13
   134ec:	andeq	r3, r1, ip, lsl #15
   134f0:	andeq	r3, r1, r8, ror #11
   134f4:	andeq	r3, r1, r8, ror #11
   134f8:	andeq	r3, r1, r8, ror #11
   134fc:	andeq	r3, r1, r8, ror #11
   13500:	andeq	r3, r1, r8, ror #11
   13504:	andeq	r3, r1, r8, ror #11
   13508:	andeq	r3, r1, r8, ror #11
   1350c:	andeq	r3, r1, r8, ror #11
   13510:	andeq	r3, r1, r8, ror #11
   13514:	andeq	r3, r1, r8, ror #11
   13518:	andeq	r3, r1, r8, ror #11
   1351c:	andeq	r3, r1, r8, ror #11
   13520:	andeq	r3, r1, r8, ror #11
   13524:	andeq	r3, r1, r8, ror #11
   13528:	andeq	r3, r1, r8, ror #11
   1352c:	andeq	r3, r1, r8, ror #11
   13530:	andeq	r3, r1, r8, ror #11
   13534:	andeq	r3, r1, r8, ror #11
   13538:	andeq	r3, r1, r8, ror #11
   1353c:	andeq	r3, r1, r8, ror #11
   13540:	andeq	r3, r1, r8, ror #11
   13544:	andeq	r3, r1, r8, ror #11
   13548:	andeq	r3, r1, r8, ror #11
   1354c:	andeq	r3, r1, r8, ror #11
   13550:	andeq	r3, r1, r8, ror #11
   13554:	andeq	r3, r1, r8, ror #11
   13558:	andeq	r3, r1, r4, lsl #16
   1355c:	andeq	r3, r1, r0, lsr r6
   13560:	andeq	r3, r1, r8, ror #11
   13564:	andeq	r3, r1, r4, lsl #16
   13568:	andeq	r3, r1, r8, ror #11
   1356c:	andeq	r3, r1, r4, lsl #16
   13570:	andeq	r3, r1, r8, ror #11
   13574:	andeq	r3, r1, r8, ror #11
   13578:	andeq	r3, r1, r8, ror #11
   1357c:	andeq	r3, r1, r8, ror #11
   13580:	andeq	r3, r1, r8, ror #11
   13584:	andeq	r3, r1, r8, ror #11
   13588:	andeq	r3, r1, r8, ror #11
   1358c:	andeq	r3, r1, r8, ror #11
   13590:	andeq	r3, r1, r8, ror #11
   13594:	andeq	r3, r1, r8, ror #11
   13598:	andeq	r3, r1, r8, ror #11
   1359c:	andeq	r3, r1, r8, ror #11
   135a0:	andeq	r3, r1, r8, ror #11
   135a4:	andeq	r3, r1, r8, ror #11
   135a8:	andeq	r3, r1, r8, ror #11
   135ac:	andeq	r3, r1, r8, ror #11
   135b0:	andeq	r3, r1, r8, ror #11
   135b4:	andeq	r3, r1, r8, ror #11
   135b8:	andeq	r3, r1, r8, ror #11
   135bc:	andeq	r3, r1, r8, ror #11
   135c0:	andeq	r3, r1, r8, ror #11
   135c4:	andeq	r3, r1, r8, ror #11
   135c8:	andeq	r3, r1, r8, ror #11
   135cc:	andeq	r3, r1, r8, ror #11
   135d0:	andeq	r3, r1, r8, ror #11
   135d4:	andeq	r3, r1, r8, ror #11
   135d8:	andeq	r3, r1, r0, lsl r6
   135dc:	andeq	r3, r1, r4, lsl #16
   135e0:	andeq	r3, r1, r0, lsl r6
   135e4:	strdeq	r3, [r1], -ip
   135e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   135ec:	cmp	r0, #0
   135f0:	beq	13864 <__assert_fail@plt+0x234c>
   135f4:	ldr	r0, [fp, #16]
   135f8:	b	13868 <__assert_fail@plt+0x2350>
   135fc:	mov	r9, #0
   13600:	cmp	r6, #0
   13604:	beq	13800 <__assert_fail@plt+0x22e8>
   13608:	mov	sl, #0
   1360c:	b	135e8 <__assert_fail@plt+0x20d0>
   13610:	mov	r9, #0
   13614:	cmn	lr, #1
   13618:	beq	137e4 <__assert_fail@plt+0x22cc>
   1361c:	cmp	r6, #0
   13620:	bne	13608 <__assert_fail@plt+0x20f0>
   13624:	cmp	lr, #1
   13628:	beq	13800 <__assert_fail@plt+0x22e8>
   1362c:	b	13608 <__assert_fail@plt+0x20f0>
   13630:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13634:	cmp	r0, #2
   13638:	bne	1382c <__assert_fail@plt+0x2314>
   1363c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13640:	tst	r0, #1
   13644:	bne	13f74 <__assert_fail@plt+0x2a5c>
   13648:	mov	sl, #0
   1364c:	mov	r0, #92	; 0x5c
   13650:	b	13840 <__assert_fail@plt+0x2328>
   13654:	mov	r0, #102	; 0x66
   13658:	b	13850 <__assert_fail@plt+0x2338>
   1365c:	mov	r2, #116	; 0x74
   13660:	b	13670 <__assert_fail@plt+0x2158>
   13664:	mov	r0, #98	; 0x62
   13668:	b	13850 <__assert_fail@plt+0x2338>
   1366c:	mov	r2, #114	; 0x72
   13670:	ldr	r0, [sp, #64]	; 0x40
   13674:	tst	r0, #1
   13678:	mov	r0, r2
   1367c:	bne	13850 <__assert_fail@plt+0x2338>
   13680:	b	13f74 <__assert_fail@plt+0x2a5c>
   13684:	ldr	r0, [sp, #84]	; 0x54
   13688:	tst	r0, #1
   1368c:	beq	13940 <__assert_fail@plt+0x2428>
   13690:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13694:	tst	r0, #1
   13698:	bne	13f74 <__assert_fail@plt+0x2a5c>
   1369c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   136a0:	cmp	r0, #2
   136a4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   136a8:	movwne	r0, #1
   136ac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   136b0:	orr	r0, r0, r2
   136b4:	tst	r0, #1
   136b8:	beq	13d34 <__assert_fail@plt+0x281c>
   136bc:	mov	r0, r8
   136c0:	b	13d68 <__assert_fail@plt+0x2850>
   136c4:	mov	sl, #0
   136c8:	mov	r5, #63	; 0x3f
   136cc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   136d0:	cmp	r0, #5
   136d4:	beq	13af4 <__assert_fail@plt+0x25dc>
   136d8:	cmp	r0, #2
   136dc:	bne	13b94 <__assert_fail@plt+0x267c>
   136e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   136e4:	tst	r0, #1
   136e8:	mov	r9, #0
   136ec:	beq	135e8 <__assert_fail@plt+0x20d0>
   136f0:	b	13f74 <__assert_fail@plt+0x2a5c>
   136f4:	mov	r0, #118	; 0x76
   136f8:	b	13850 <__assert_fail@plt+0x2338>
   136fc:	mov	r5, #39	; 0x27
   13700:	mov	r0, #1
   13704:	str	r0, [sp, #56]	; 0x38
   13708:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1370c:	cmp	r0, #2
   13710:	bne	13960 <__assert_fail@plt+0x2448>
   13714:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13718:	tst	r0, #1
   1371c:	bne	13f74 <__assert_fail@plt+0x2a5c>
   13720:	ldr	r2, [sp, #72]	; 0x48
   13724:	cmp	r2, #0
   13728:	mov	r0, r2
   1372c:	movwne	r0, #1
   13730:	clz	r1, r4
   13734:	lsr	r1, r1, #5
   13738:	orrs	r0, r0, r1
   1373c:	moveq	r2, r4
   13740:	str	r2, [sp, #72]	; 0x48
   13744:	moveq	r4, r0
   13748:	cmp	r8, r4
   1374c:	movcc	r0, #39	; 0x27
   13750:	strbcc	r0, [r7, r8]
   13754:	add	r0, r8, #1
   13758:	cmp	r0, r4
   1375c:	movcc	r1, #92	; 0x5c
   13760:	strbcc	r1, [r7, r0]
   13764:	add	r0, r8, #2
   13768:	cmp	r0, r4
   1376c:	movcc	r1, #39	; 0x27
   13770:	strbcc	r1, [r7, r0]
   13774:	add	r8, r8, #3
   13778:	mov	r0, #0
   1377c:	str	r0, [fp, #-56]	; 0xffffffc8
   13780:	mov	sl, #0
   13784:	mov	r9, #1
   13788:	b	135e8 <__assert_fail@plt+0x20d0>
   1378c:	str	r4, [sp, #24]
   13790:	ldr	r0, [sp, #40]	; 0x28
   13794:	cmp	r0, #1
   13798:	bne	13968 <__assert_fail@plt+0x2450>
   1379c:	str	lr, [sp, #28]
   137a0:	bl	113d4 <__ctype_b_loc@plt>
   137a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   137a8:	ldr	r0, [r0]
   137ac:	add	r0, r0, r5, lsl #1
   137b0:	ldrb	r0, [r0, #1]
   137b4:	ubfx	r9, r0, #6, #1
   137b8:	mov	r1, #1
   137bc:	ldr	r4, [sp, #24]
   137c0:	ldr	r0, [sp, #52]	; 0x34
   137c4:	orr	r0, r9, r0
   137c8:	mov	r2, r1
   137cc:	cmp	r1, #1
   137d0:	bhi	13b9c <__assert_fail@plt+0x2684>
   137d4:	tst	r0, #1
   137d8:	beq	13b9c <__assert_fail@plt+0x2684>
   137dc:	ldr	lr, [sp, #28]
   137e0:	b	135e8 <__assert_fail@plt+0x20d0>
   137e4:	cmp	r6, #0
   137e8:	ldrbeq	r0, [ip, #1]
   137ec:	cmpeq	r0, #0
   137f0:	beq	13800 <__assert_fail@plt+0x22e8>
   137f4:	mvn	lr, #0
   137f8:	mov	sl, #0
   137fc:	b	135e8 <__assert_fail@plt+0x20d0>
   13800:	mov	r1, #1
   13804:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13808:	cmp	r0, #2
   1380c:	bne	13824 <__assert_fail@plt+0x230c>
   13810:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13814:	tst	r0, #1
   13818:	mov	r9, r1
   1381c:	beq	135e8 <__assert_fail@plt+0x20d0>
   13820:	b	13f74 <__assert_fail@plt+0x2a5c>
   13824:	mov	r9, r1
   13828:	b	135e8 <__assert_fail@plt+0x20d0>
   1382c:	mov	sl, #0
   13830:	mov	r0, #92	; 0x5c
   13834:	ldr	r1, [sp, #48]	; 0x30
   13838:	cmp	r1, #0
   1383c:	beq	13850 <__assert_fail@plt+0x2338>
   13840:	mov	r9, #0
   13844:	cmp	sl, #0
   13848:	beq	13e00 <__assert_fail@plt+0x28e8>
   1384c:	b	13e3c <__assert_fail@plt+0x2924>
   13850:	mov	r9, #0
   13854:	ldr	r1, [sp, #84]	; 0x54
   13858:	tst	r1, #1
   1385c:	mov	sl, #0
   13860:	bne	138a0 <__assert_fail@plt+0x2388>
   13864:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13868:	cmp	r0, #0
   1386c:	mov	r0, r5
   13870:	beq	13894 <__assert_fail@plt+0x237c>
   13874:	ubfx	r0, r5, #5, #3
   13878:	ldr	r1, [fp, #16]
   1387c:	ldr	r0, [r1, r0, lsl #2]
   13880:	and	r1, r5, #31
   13884:	mov	r2, #1
   13888:	tst	r0, r2, lsl r1
   1388c:	mov	r0, r5
   13890:	bne	138a0 <__assert_fail@plt+0x2388>
   13894:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13898:	cmp	r1, #0
   1389c:	beq	13df8 <__assert_fail@plt+0x28e0>
   138a0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   138a4:	tst	r1, #1
   138a8:	bne	13f74 <__assert_fail@plt+0x2a5c>
   138ac:	ldr	r1, [fp, #-60]	; 0xffffffc4
   138b0:	cmp	r1, #2
   138b4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   138b8:	movwne	r1, #1
   138bc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   138c0:	orr	r1, r1, r2
   138c4:	tst	r1, #1
   138c8:	beq	138d4 <__assert_fail@plt+0x23bc>
   138cc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   138d0:	b	13910 <__assert_fail@plt+0x23f8>
   138d4:	cmp	r8, r4
   138d8:	movcc	r1, #39	; 0x27
   138dc:	strbcc	r1, [r7, r8]
   138e0:	add	r1, r8, #1
   138e4:	cmp	r1, r4
   138e8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   138ec:	movcc	r2, #36	; 0x24
   138f0:	strbcc	r2, [r7, r1]
   138f4:	add	r1, r8, #2
   138f8:	cmp	r1, r4
   138fc:	movcc	r2, #39	; 0x27
   13900:	strbcc	r2, [r7, r1]
   13904:	add	r8, r8, #3
   13908:	mov	r1, #1
   1390c:	str	r1, [fp, #-56]	; 0xffffffc8
   13910:	cmp	r8, r4
   13914:	movcc	r1, #92	; 0x5c
   13918:	strbcc	r1, [r7, r8]
   1391c:	add	r8, r8, #1
   13920:	cmp	r8, r4
   13924:	strbcc	r0, [r7, r8]
   13928:	and	r5, r5, r9
   1392c:	add	r8, r8, #1
   13930:	add	r6, r6, #1
   13934:	cmn	lr, #1
   13938:	bne	13314 <__assert_fail@plt+0x1dfc>
   1393c:	b	13320 <__assert_fail@plt+0x1e08>
   13940:	mov	r9, #0
   13944:	ldr	r0, [sp, #36]	; 0x24
   13948:	cmp	r0, #0
   1394c:	mov	sl, #0
   13950:	mov	r5, #0
   13954:	beq	13864 <__assert_fail@plt+0x234c>
   13958:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1395c:	b	13930 <__assert_fail@plt+0x2418>
   13960:	mov	r9, #1
   13964:	b	135e8 <__assert_fail@plt+0x20d0>
   13968:	mov	r0, #0
   1396c:	str	r0, [fp, #-36]	; 0xffffffdc
   13970:	str	r0, [fp, #-40]	; 0xffffffd8
   13974:	cmn	lr, #1
   13978:	bne	1398c <__assert_fail@plt+0x2474>
   1397c:	mov	r0, ip
   13980:	bl	113ec <strlen@plt>
   13984:	ldr	ip, [fp, #-84]	; 0xffffffac
   13988:	mov	lr, r0
   1398c:	add	r0, ip, r6
   13990:	str	r0, [sp, #20]
   13994:	mov	r9, #1
   13998:	mov	r7, #0
   1399c:	sub	r4, fp, #40	; 0x28
   139a0:	str	lr, [sp, #28]
   139a4:	str	r7, [sp, #44]	; 0x2c
   139a8:	add	r7, r7, r6
   139ac:	add	r1, ip, r7
   139b0:	sub	r2, lr, r7
   139b4:	sub	r0, fp, #44	; 0x2c
   139b8:	mov	r3, r4
   139bc:	bl	22bc4 <__assert_fail@plt+0x116ac>
   139c0:	cmp	r0, #0
   139c4:	beq	13e84 <__assert_fail@plt+0x296c>
   139c8:	cmn	r0, #1
   139cc:	beq	13e44 <__assert_fail@plt+0x292c>
   139d0:	cmn	r0, #2
   139d4:	ldr	lr, [sp, #28]
   139d8:	beq	13e4c <__assert_fail@plt+0x2934>
   139dc:	cmp	r0, #2
   139e0:	mov	r1, #0
   139e4:	movwcc	r1, #1
   139e8:	ldr	r2, [sp, #60]	; 0x3c
   139ec:	eor	r2, r2, #1
   139f0:	orrs	r1, r2, r1
   139f4:	ldr	r4, [sp, #24]
   139f8:	bne	13ab8 <__assert_fail@plt+0x25a0>
   139fc:	ldr	r1, [sp, #44]	; 0x2c
   13a00:	ldr	r2, [sp, #20]
   13a04:	add	r1, r2, r1
   13a08:	mov	r2, #1
   13a0c:	ldrb	r3, [r1, r2]
   13a10:	sub	r3, r3, #91	; 0x5b
   13a14:	cmp	r3, #33	; 0x21
   13a18:	bhi	13aac <__assert_fail@plt+0x2594>
   13a1c:	add	r7, pc, #0
   13a20:	ldr	pc, [r7, r3, lsl #2]
   13a24:	andeq	r3, r1, ip, ror #30
   13a28:	andeq	r3, r1, ip, ror #30
   13a2c:	andeq	r3, r1, ip, lsr #21
   13a30:	andeq	r3, r1, ip, ror #30
   13a34:	andeq	r3, r1, ip, lsr #21
   13a38:	andeq	r3, r1, ip, ror #30
   13a3c:	andeq	r3, r1, ip, lsr #21
   13a40:	andeq	r3, r1, ip, lsr #21
   13a44:	andeq	r3, r1, ip, lsr #21
   13a48:	andeq	r3, r1, ip, lsr #21
   13a4c:	andeq	r3, r1, ip, lsr #21
   13a50:	andeq	r3, r1, ip, lsr #21
   13a54:	andeq	r3, r1, ip, lsr #21
   13a58:	andeq	r3, r1, ip, lsr #21
   13a5c:	andeq	r3, r1, ip, lsr #21
   13a60:	andeq	r3, r1, ip, lsr #21
   13a64:	andeq	r3, r1, ip, lsr #21
   13a68:	andeq	r3, r1, ip, lsr #21
   13a6c:	andeq	r3, r1, ip, lsr #21
   13a70:	andeq	r3, r1, ip, lsr #21
   13a74:	andeq	r3, r1, ip, lsr #21
   13a78:	andeq	r3, r1, ip, lsr #21
   13a7c:	andeq	r3, r1, ip, lsr #21
   13a80:	andeq	r3, r1, ip, lsr #21
   13a84:	andeq	r3, r1, ip, lsr #21
   13a88:	andeq	r3, r1, ip, lsr #21
   13a8c:	andeq	r3, r1, ip, lsr #21
   13a90:	andeq	r3, r1, ip, lsr #21
   13a94:	andeq	r3, r1, ip, lsr #21
   13a98:	andeq	r3, r1, ip, lsr #21
   13a9c:	andeq	r3, r1, ip, lsr #21
   13aa0:	andeq	r3, r1, ip, lsr #21
   13aa4:	andeq	r3, r1, ip, lsr #21
   13aa8:	andeq	r3, r1, ip, ror #30
   13aac:	add	r2, r2, #1
   13ab0:	cmp	r2, r0
   13ab4:	bcc	13a0c <__assert_fail@plt+0x24f4>
   13ab8:	ldr	r7, [sp, #44]	; 0x2c
   13abc:	add	r7, r0, r7
   13ac0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13ac4:	bl	11338 <iswprint@plt>
   13ac8:	cmp	r0, #0
   13acc:	movwne	r0, #1
   13ad0:	and	r9, r9, r0
   13ad4:	sub	r4, fp, #40	; 0x28
   13ad8:	mov	r0, r4
   13adc:	bl	112d8 <mbsinit@plt>
   13ae0:	ldr	lr, [sp, #28]
   13ae4:	cmp	r0, #0
   13ae8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13aec:	beq	139a4 <__assert_fail@plt+0x248c>
   13af0:	b	13e8c <__assert_fail@plt+0x2974>
   13af4:	ldr	r0, [sp, #32]
   13af8:	cmp	r0, #0
   13afc:	beq	13b94 <__assert_fail@plt+0x267c>
   13b00:	add	r0, r6, #2
   13b04:	cmp	r0, lr
   13b08:	bcs	13b94 <__assert_fail@plt+0x267c>
   13b0c:	add	r1, ip, r6
   13b10:	ldrb	r1, [r1, #1]
   13b14:	cmp	r1, #63	; 0x3f
   13b18:	bne	13b94 <__assert_fail@plt+0x267c>
   13b1c:	ldrb	r9, [ip, r0]
   13b20:	sub	r2, r9, #33	; 0x21
   13b24:	cmp	r2, #29
   13b28:	bhi	13b94 <__assert_fail@plt+0x267c>
   13b2c:	mov	r3, #1
   13b30:	movw	r1, #20929	; 0x51c1
   13b34:	movt	r1, #14336	; 0x3800
   13b38:	tst	r1, r3, lsl r2
   13b3c:	beq	13b94 <__assert_fail@plt+0x267c>
   13b40:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13b44:	tst	r1, #1
   13b48:	bne	13f74 <__assert_fail@plt+0x2a5c>
   13b4c:	cmp	r8, r4
   13b50:	movcc	r1, #63	; 0x3f
   13b54:	strbcc	r1, [r7, r8]
   13b58:	add	r2, r8, #1
   13b5c:	cmp	r2, r4
   13b60:	movcc	r1, #34	; 0x22
   13b64:	strbcc	r1, [r7, r2]
   13b68:	add	r2, r8, #2
   13b6c:	cmp	r2, r4
   13b70:	movcc	r1, #34	; 0x22
   13b74:	strbcc	r1, [r7, r2]
   13b78:	add	r2, r8, #3
   13b7c:	cmp	r2, r4
   13b80:	movcc	r1, #63	; 0x3f
   13b84:	strbcc	r1, [r7, r2]
   13b88:	add	r8, r8, #4
   13b8c:	mov	r6, r0
   13b90:	mov	r5, r9
   13b94:	mov	r9, #0
   13b98:	b	135e8 <__assert_fail@plt+0x20d0>
   13b9c:	add	r1, r2, r6
   13ba0:	str	r1, [sp, #44]	; 0x2c
   13ba4:	add	r1, r6, #1
   13ba8:	mov	r3, #0
   13bac:	ldr	lr, [sp, #28]
   13bb0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13bb4:	tst	r0, #1
   13bb8:	bne	13cac <__assert_fail@plt+0x2794>
   13bbc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13bc0:	tst	r2, #1
   13bc4:	bne	13f74 <__assert_fail@plt+0x2a5c>
   13bc8:	cmp	r6, #2
   13bcc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13bd0:	movwne	r3, #1
   13bd4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13bd8:	orr	r3, r3, r2
   13bdc:	tst	r3, #1
   13be0:	bne	13c1c <__assert_fail@plt+0x2704>
   13be4:	cmp	r8, r4
   13be8:	movcc	r2, #39	; 0x27
   13bec:	strbcc	r2, [r7, r8]
   13bf0:	add	r3, r8, #1
   13bf4:	cmp	r3, r4
   13bf8:	movcc	r2, #36	; 0x24
   13bfc:	strbcc	r2, [r7, r3]
   13c00:	add	r3, r8, #2
   13c04:	cmp	r3, r4
   13c08:	movcc	r2, #39	; 0x27
   13c0c:	strbcc	r2, [r7, r3]
   13c10:	add	r8, r8, #3
   13c14:	mov	r2, #1
   13c18:	str	r2, [fp, #-56]	; 0xffffffc8
   13c1c:	cmp	r8, r4
   13c20:	movcc	r2, #92	; 0x5c
   13c24:	strbcc	r2, [r7, r8]
   13c28:	add	r3, r8, #1
   13c2c:	cmp	r3, r4
   13c30:	bcs	13c50 <__assert_fail@plt+0x2738>
   13c34:	and	r7, r5, #192	; 0xc0
   13c38:	mov	r2, #48	; 0x30
   13c3c:	orr	r7, r2, r7, lsr #6
   13c40:	ldr	r6, [sp, #80]	; 0x50
   13c44:	strb	r7, [r6, r3]
   13c48:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13c4c:	ldr	r7, [sp, #80]	; 0x50
   13c50:	add	r3, r8, #2
   13c54:	cmp	r3, r4
   13c58:	bcs	13c78 <__assert_fail@plt+0x2760>
   13c5c:	lsr	r7, r5, #3
   13c60:	mov	r2, #6
   13c64:	bfi	r7, r2, #3, #29
   13c68:	ldr	r6, [sp, #80]	; 0x50
   13c6c:	strb	r7, [r6, r3]
   13c70:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13c74:	ldr	r7, [sp, #80]	; 0x50
   13c78:	mov	r2, #6
   13c7c:	bfi	r5, r2, #3, #29
   13c80:	add	r8, r8, #3
   13c84:	mov	r3, #1
   13c88:	b	13cd0 <__assert_fail@plt+0x27b8>
   13c8c:	ldr	r7, [sp, #80]	; 0x50
   13c90:	cmp	r8, r4
   13c94:	strbcc	r5, [r7, r8]
   13c98:	ldrb	r5, [ip, r1]
   13c9c:	add	r1, r1, #1
   13ca0:	add	r8, r8, #1
   13ca4:	tst	r0, #1
   13ca8:	beq	13bbc <__assert_fail@plt+0x26a4>
   13cac:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13cb0:	tst	r2, #1
   13cb4:	beq	13cc8 <__assert_fail@plt+0x27b0>
   13cb8:	cmp	r8, r4
   13cbc:	movcc	r2, #92	; 0x5c
   13cc0:	strbcc	r2, [r7, r8]
   13cc4:	add	r8, r8, #1
   13cc8:	mov	r2, #0
   13ccc:	str	r2, [fp, #-52]	; 0xffffffcc
   13cd0:	and	sl, r3, #1
   13cd4:	ldr	r2, [sp, #44]	; 0x2c
   13cd8:	cmp	r2, r1
   13cdc:	bls	13de8 <__assert_fail@plt+0x28d0>
   13ce0:	cmp	sl, #0
   13ce4:	movwne	sl, #1
   13ce8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13cec:	mvn	r7, r2
   13cf0:	orr	r7, r7, sl
   13cf4:	tst	r7, #1
   13cf8:	bne	13c8c <__assert_fail@plt+0x2774>
   13cfc:	cmp	r8, r4
   13d00:	ldrcc	r7, [sp, #80]	; 0x50
   13d04:	movcc	r2, #39	; 0x27
   13d08:	strbcc	r2, [r7, r8]
   13d0c:	add	r7, r8, #1
   13d10:	cmp	r7, r4
   13d14:	ldrcc	r6, [sp, #80]	; 0x50
   13d18:	movcc	r2, #39	; 0x27
   13d1c:	strbcc	r2, [r6, r7]
   13d20:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   13d24:	add	r8, r8, #2
   13d28:	mov	r2, #0
   13d2c:	str	r2, [fp, #-56]	; 0xffffffc8
   13d30:	b	13c8c <__assert_fail@plt+0x2774>
   13d34:	cmp	r8, r4
   13d38:	movcc	r0, #39	; 0x27
   13d3c:	strbcc	r0, [r7, r8]
   13d40:	add	r0, r8, #1
   13d44:	cmp	r0, r4
   13d48:	movcc	r1, #36	; 0x24
   13d4c:	strbcc	r1, [r7, r0]
   13d50:	add	r0, r8, #2
   13d54:	cmp	r0, r4
   13d58:	movcc	r1, #39	; 0x27
   13d5c:	strbcc	r1, [r7, r0]
   13d60:	add	r0, r8, #3
   13d64:	mov	r2, #1
   13d68:	cmp	r0, r4
   13d6c:	movcc	r1, #92	; 0x5c
   13d70:	strbcc	r1, [r7, r0]
   13d74:	str	r2, [fp, #-56]	; 0xffffffc8
   13d78:	add	r8, r0, #1
   13d7c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13d80:	cmp	r1, #2
   13d84:	beq	13dd8 <__assert_fail@plt+0x28c0>
   13d88:	add	r1, r6, #1
   13d8c:	mov	r9, #0
   13d90:	mov	sl, #1
   13d94:	mov	r5, #48	; 0x30
   13d98:	cmp	r1, lr
   13d9c:	bcs	135e8 <__assert_fail@plt+0x20d0>
   13da0:	ldrb	r1, [ip, r1]
   13da4:	sub	r1, r1, #48	; 0x30
   13da8:	uxtb	r1, r1
   13dac:	cmp	r1, #9
   13db0:	bhi	135e8 <__assert_fail@plt+0x20d0>
   13db4:	cmp	r8, r4
   13db8:	movcc	r1, #48	; 0x30
   13dbc:	strbcc	r1, [r7, r8]
   13dc0:	add	r1, r0, #2
   13dc4:	cmp	r1, r4
   13dc8:	movcc	r2, #48	; 0x30
   13dcc:	strbcc	r2, [r7, r1]
   13dd0:	add	r8, r0, #3
   13dd4:	b	135e8 <__assert_fail@plt+0x20d0>
   13dd8:	mov	r0, #48	; 0x30
   13ddc:	mov	sl, #1
   13de0:	mov	r9, #0
   13de4:	b	13894 <__assert_fail@plt+0x237c>
   13de8:	sub	r6, r1, #1
   13dec:	cmp	sl, #0
   13df0:	movwne	sl, #1
   13df4:	mov	r0, r5
   13df8:	cmp	sl, #0
   13dfc:	bne	13e3c <__assert_fail@plt+0x2924>
   13e00:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13e04:	tst	r1, #1
   13e08:	beq	13e3c <__assert_fail@plt+0x2924>
   13e0c:	cmp	r8, r4
   13e10:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13e14:	movcc	r1, #39	; 0x27
   13e18:	strbcc	r1, [r7, r8]
   13e1c:	add	r1, r8, #1
   13e20:	cmp	r1, r4
   13e24:	movcc	r2, #39	; 0x27
   13e28:	strbcc	r2, [r7, r1]
   13e2c:	add	r8, r8, #2
   13e30:	mov	r1, #0
   13e34:	str	r1, [fp, #-56]	; 0xffffffc8
   13e38:	b	13920 <__assert_fail@plt+0x2408>
   13e3c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13e40:	b	13920 <__assert_fail@plt+0x2408>
   13e44:	mov	r9, #0
   13e48:	b	13e84 <__assert_fail@plt+0x296c>
   13e4c:	mov	r9, #0
   13e50:	cmp	r7, lr
   13e54:	bcs	13e84 <__assert_fail@plt+0x296c>
   13e58:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e5c:	ldr	r7, [sp, #44]	; 0x2c
   13e60:	ldr	r0, [sp, #20]
   13e64:	ldrb	r0, [r0, r7]
   13e68:	cmp	r0, #0
   13e6c:	beq	13e8c <__assert_fail@plt+0x2974>
   13e70:	add	r7, r7, #1
   13e74:	add	r0, r6, r7
   13e78:	cmp	r0, lr
   13e7c:	bcc	13e60 <__assert_fail@plt+0x2948>
   13e80:	b	13e8c <__assert_fail@plt+0x2974>
   13e84:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e88:	ldr	r7, [sp, #44]	; 0x2c
   13e8c:	mov	r1, r7
   13e90:	ldr	r7, [sp, #80]	; 0x50
   13e94:	b	137bc <__assert_fail@plt+0x22a4>
   13e98:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13e9c:	eor	r0, r1, #2
   13ea0:	orr	r0, r0, r8
   13ea4:	clz	r0, r0
   13ea8:	lsr	r0, r0, #5
   13eac:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13eb0:	tst	r2, r0
   13eb4:	bne	13f74 <__assert_fail@plt+0x2a5c>
   13eb8:	cmp	r1, #2
   13ebc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13ec0:	movwne	r0, #1
   13ec4:	orr	r0, r2, r0
   13ec8:	tst	r0, #1
   13ecc:	ldreq	r0, [sp, #56]	; 0x38
   13ed0:	eoreq	r0, r0, #1
   13ed4:	tsteq	r0, #1
   13ed8:	bne	13f0c <__assert_fail@plt+0x29f4>
   13edc:	mov	r9, lr
   13ee0:	tst	r5, #1
   13ee4:	bne	13fdc <__assert_fail@plt+0x2ac4>
   13ee8:	ldr	r0, [sp, #72]	; 0x48
   13eec:	cmp	r0, #0
   13ef0:	beq	13f0c <__assert_fail@plt+0x29f4>
   13ef4:	mov	r5, #0
   13ef8:	cmp	r4, #0
   13efc:	ldr	r0, [sp, #84]	; 0x54
   13f00:	mov	sl, r2
   13f04:	ldr	r6, [sp, #72]	; 0x48
   13f08:	beq	130a4 <__assert_fail@plt+0x1b8c>
   13f0c:	ldr	r1, [sp, #92]	; 0x5c
   13f10:	clz	r0, r1
   13f14:	lsr	r0, r0, #5
   13f18:	orr	r0, r0, r2
   13f1c:	tst	r0, #1
   13f20:	bne	13f4c <__assert_fail@plt+0x2a34>
   13f24:	ldrb	r0, [r1]
   13f28:	cmp	r0, #0
   13f2c:	beq	13f4c <__assert_fail@plt+0x2a34>
   13f30:	add	r1, r1, #1
   13f34:	cmp	r8, r4
   13f38:	strbcc	r0, [r7, r8]
   13f3c:	add	r8, r8, #1
   13f40:	ldrb	r0, [r1], #1
   13f44:	cmp	r0, #0
   13f48:	bne	13f34 <__assert_fail@plt+0x2a1c>
   13f4c:	cmp	r8, r4
   13f50:	movcc	r0, #0
   13f54:	strbcc	r0, [r7, r8]
   13f58:	b	13fd0 <__assert_fail@plt+0x2ab8>
   13f5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f60:	mov	lr, r4
   13f64:	mov	r4, r5
   13f68:	b	13f74 <__assert_fail@plt+0x2a5c>
   13f6c:	ldr	r7, [sp, #80]	; 0x50
   13f70:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f74:	mov	r0, #0
   13f78:	ldr	r1, [fp, #12]
   13f7c:	bic	r1, r1, #2
   13f80:	ldr	r2, [sp, #84]	; 0x54
   13f84:	tst	r2, #1
   13f88:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13f8c:	mov	r2, r3
   13f90:	movwne	r2, #4
   13f94:	cmp	r3, #2
   13f98:	movne	r2, r3
   13f9c:	str	r2, [sp]
   13fa0:	str	r1, [sp, #4]
   13fa4:	str	r0, [sp, #8]
   13fa8:	ldr	r0, [sp, #68]	; 0x44
   13fac:	str	r0, [sp, #12]
   13fb0:	ldr	r0, [sp, #76]	; 0x4c
   13fb4:	str	r0, [sp, #16]
   13fb8:	mov	r0, r7
   13fbc:	mov	r1, r4
   13fc0:	mov	r2, ip
   13fc4:	mov	r3, lr
   13fc8:	bl	1301c <__assert_fail@plt+0x1b04>
   13fcc:	mov	r8, r0
   13fd0:	mov	r0, r8
   13fd4:	sub	sp, fp, #28
   13fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fdc:	mov	r0, #5
   13fe0:	str	r0, [sp]
   13fe4:	ldr	r0, [fp, #12]
   13fe8:	str	r0, [sp, #4]
   13fec:	ldr	r0, [fp, #16]
   13ff0:	str	r0, [sp, #8]
   13ff4:	ldr	r0, [sp, #68]	; 0x44
   13ff8:	str	r0, [sp, #12]
   13ffc:	ldr	r0, [sp, #76]	; 0x4c
   14000:	str	r0, [sp, #16]
   14004:	mov	r0, r7
   14008:	ldr	r1, [sp, #72]	; 0x48
   1400c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14010:	mov	r3, r9
   14014:	b	13fc8 <__assert_fail@plt+0x2ab0>
   14018:	bl	114f4 <abort@plt>
   1401c:	mov	r3, r2
   14020:	mov	r2, #0
   14024:	b	14028 <__assert_fail@plt+0x2b10>
   14028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1402c:	add	fp, sp, #28
   14030:	sub	sp, sp, #36	; 0x24
   14034:	mov	r4, r2
   14038:	str	r2, [sp, #24]
   1403c:	mov	r5, r1
   14040:	mov	r6, r0
   14044:	str	r0, [sp, #20]
   14048:	movw	r8, #21912	; 0x5598
   1404c:	movt	r8, #3
   14050:	cmp	r3, #0
   14054:	movne	r8, r3
   14058:	bl	11404 <__errno_location@plt>
   1405c:	str	r0, [sp, #28]
   14060:	ldm	r8, {r3, r9}
   14064:	ldr	r1, [r8, #40]	; 0x28
   14068:	ldr	r2, [r8, #44]	; 0x2c
   1406c:	ldr	r7, [r0]
   14070:	str	r7, [sp, #32]
   14074:	add	sl, r8, #8
   14078:	cmp	r4, #0
   1407c:	orreq	r9, r9, #1
   14080:	stm	sp, {r3, r9, sl}
   14084:	str	r1, [sp, #12]
   14088:	str	r2, [sp, #16]
   1408c:	mov	r0, #0
   14090:	mov	r1, #0
   14094:	mov	r2, r6
   14098:	mov	r3, r5
   1409c:	mov	r7, r5
   140a0:	bl	1301c <__assert_fail@plt+0x1b04>
   140a4:	mov	r5, r0
   140a8:	add	r4, r0, #1
   140ac:	mov	r0, r4
   140b0:	bl	21b7c <__assert_fail@plt+0x10664>
   140b4:	mov	r6, r0
   140b8:	ldr	r0, [r8]
   140bc:	ldr	r1, [r8, #40]	; 0x28
   140c0:	ldr	r2, [r8, #44]	; 0x2c
   140c4:	stm	sp, {r0, r9, sl}
   140c8:	str	r1, [sp, #12]
   140cc:	str	r2, [sp, #16]
   140d0:	mov	r0, r6
   140d4:	mov	r1, r4
   140d8:	ldr	r2, [sp, #20]
   140dc:	mov	r3, r7
   140e0:	bl	1301c <__assert_fail@plt+0x1b04>
   140e4:	ldr	r0, [sp, #24]
   140e8:	ldr	r1, [sp, #32]
   140ec:	ldr	r2, [sp, #28]
   140f0:	str	r1, [r2]
   140f4:	cmp	r0, #0
   140f8:	strne	r5, [r0]
   140fc:	mov	r0, r6
   14100:	sub	sp, fp, #28
   14104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14108:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1410c:	add	fp, sp, #24
   14110:	movw	r8, #20848	; 0x5170
   14114:	movt	r8, #3
   14118:	ldr	r4, [r8]
   1411c:	movw	r5, #20852	; 0x5174
   14120:	movt	r5, #3
   14124:	ldr	r0, [r5]
   14128:	cmp	r0, #2
   1412c:	blt	14158 <__assert_fail@plt+0x2c40>
   14130:	add	r7, r4, #12
   14134:	mov	r6, #0
   14138:	ldr	r0, [r7, r6, lsl #3]
   1413c:	bl	22b14 <__assert_fail@plt+0x115fc>
   14140:	add	r0, r6, #1
   14144:	ldr	r1, [r5]
   14148:	add	r2, r6, #2
   1414c:	cmp	r2, r1
   14150:	mov	r6, r0
   14154:	blt	14138 <__assert_fail@plt+0x2c20>
   14158:	ldr	r0, [r4, #4]
   1415c:	movw	r7, #21960	; 0x55c8
   14160:	movt	r7, #3
   14164:	cmp	r0, r7
   14168:	beq	14180 <__assert_fail@plt+0x2c68>
   1416c:	bl	22b14 <__assert_fail@plt+0x115fc>
   14170:	movw	r0, #20856	; 0x5178
   14174:	movt	r0, #3
   14178:	mov	r6, #256	; 0x100
   1417c:	strd	r6, [r0]
   14180:	movw	r6, #20856	; 0x5178
   14184:	movt	r6, #3
   14188:	cmp	r4, r6
   1418c:	beq	1419c <__assert_fail@plt+0x2c84>
   14190:	mov	r0, r4
   14194:	bl	22b14 <__assert_fail@plt+0x115fc>
   14198:	str	r6, [r8]
   1419c:	mov	r0, #1
   141a0:	str	r0, [r5]
   141a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   141a8:	movw	r3, #21912	; 0x5598
   141ac:	movt	r3, #3
   141b0:	mvn	r2, #0
   141b4:	b	141b8 <__assert_fail@plt+0x2ca0>
   141b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141bc:	add	fp, sp, #28
   141c0:	sub	sp, sp, #44	; 0x2c
   141c4:	mov	r7, r3
   141c8:	str	r2, [sp, #36]	; 0x24
   141cc:	str	r1, [sp, #32]
   141d0:	mov	r5, r0
   141d4:	bl	11404 <__errno_location@plt>
   141d8:	cmp	r5, #0
   141dc:	blt	14348 <__assert_fail@plt+0x2e30>
   141e0:	cmn	r5, #-2147483647	; 0x80000001
   141e4:	beq	14348 <__assert_fail@plt+0x2e30>
   141e8:	movw	r4, #20848	; 0x5170
   141ec:	movt	r4, #3
   141f0:	ldr	r6, [r4]
   141f4:	str	r0, [sp, #28]
   141f8:	ldr	r0, [r0]
   141fc:	str	r0, [sp, #24]
   14200:	movw	r8, #20852	; 0x5174
   14204:	movt	r8, #3
   14208:	ldr	r1, [r8]
   1420c:	cmp	r1, r5
   14210:	ble	1421c <__assert_fail@plt+0x2d04>
   14214:	mov	sl, r6
   14218:	b	14284 <__assert_fail@plt+0x2d6c>
   1421c:	str	r1, [fp, #-32]	; 0xffffffe0
   14220:	mov	r0, #8
   14224:	str	r0, [sp]
   14228:	movw	r9, #20856	; 0x5178
   1422c:	movt	r9, #3
   14230:	subs	r0, r6, r9
   14234:	movne	r0, r6
   14238:	add	r2, r5, #1
   1423c:	sub	r2, r2, r1
   14240:	sub	r1, fp, #32
   14244:	mvn	r3, #-2147483648	; 0x80000000
   14248:	bl	21c64 <__assert_fail@plt+0x1074c>
   1424c:	mov	sl, r0
   14250:	str	r0, [r4]
   14254:	cmp	r6, r9
   14258:	ldrdeq	r0, [r9]
   1425c:	stmeq	sl, {r0, r1}
   14260:	ldr	r1, [r8]
   14264:	add	r0, sl, r1, lsl #3
   14268:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1426c:	sub	r1, r2, r1
   14270:	lsl	r2, r1, #3
   14274:	mov	r1, #0
   14278:	bl	11428 <memset@plt>
   1427c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14280:	str	r0, [r8]
   14284:	mov	r9, sl
   14288:	ldr	r6, [r9, r5, lsl #3]!
   1428c:	ldr	r4, [r9, #4]!
   14290:	ldm	r7, {r0, r1}
   14294:	ldr	r2, [r7, #40]	; 0x28
   14298:	ldr	r3, [r7, #44]	; 0x2c
   1429c:	orr	r8, r1, #1
   142a0:	add	r1, r7, #8
   142a4:	stm	sp, {r0, r8}
   142a8:	str	r1, [sp, #20]
   142ac:	add	r0, sp, #8
   142b0:	stm	r0, {r1, r2, r3}
   142b4:	mov	r0, r4
   142b8:	mov	r1, r6
   142bc:	ldr	r2, [sp, #32]
   142c0:	ldr	r3, [sp, #36]	; 0x24
   142c4:	bl	1301c <__assert_fail@plt+0x1b04>
   142c8:	cmp	r6, r0
   142cc:	bhi	14330 <__assert_fail@plt+0x2e18>
   142d0:	add	r6, r0, #1
   142d4:	str	r6, [sl, r5, lsl #3]
   142d8:	movw	r0, #21960	; 0x55c8
   142dc:	movt	r0, #3
   142e0:	cmp	r4, r0
   142e4:	beq	142f0 <__assert_fail@plt+0x2dd8>
   142e8:	mov	r0, r4
   142ec:	bl	22b14 <__assert_fail@plt+0x115fc>
   142f0:	mov	r0, r6
   142f4:	bl	21b7c <__assert_fail@plt+0x10664>
   142f8:	mov	r4, r0
   142fc:	str	r0, [r9]
   14300:	ldr	r0, [r7]
   14304:	ldr	r1, [r7, #40]	; 0x28
   14308:	ldr	r2, [r7, #44]	; 0x2c
   1430c:	stm	sp, {r0, r8}
   14310:	ldr	r0, [sp, #20]
   14314:	add	r3, sp, #8
   14318:	stm	r3, {r0, r1, r2}
   1431c:	mov	r0, r4
   14320:	mov	r1, r6
   14324:	ldr	r2, [sp, #32]
   14328:	ldr	r3, [sp, #36]	; 0x24
   1432c:	bl	1301c <__assert_fail@plt+0x1b04>
   14330:	ldr	r0, [sp, #28]
   14334:	ldr	r1, [sp, #24]
   14338:	str	r1, [r0]
   1433c:	mov	r0, r4
   14340:	sub	sp, fp, #28
   14344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14348:	bl	114f4 <abort@plt>
   1434c:	movw	r3, #21912	; 0x5598
   14350:	movt	r3, #3
   14354:	b	141b8 <__assert_fail@plt+0x2ca0>
   14358:	mov	r1, r0
   1435c:	mov	r0, #0
   14360:	b	141a8 <__assert_fail@plt+0x2c90>
   14364:	mov	r2, r1
   14368:	mov	r1, r0
   1436c:	mov	r0, #0
   14370:	b	1434c <__assert_fail@plt+0x2e34>
   14374:	push	{r4, r5, r6, sl, fp, lr}
   14378:	add	fp, sp, #16
   1437c:	sub	sp, sp, #48	; 0x30
   14380:	mov	r4, r2
   14384:	mov	r5, r0
   14388:	mov	r6, sp
   1438c:	mov	r0, r6
   14390:	bl	143b0 <__assert_fail@plt+0x2e98>
   14394:	mov	r0, r5
   14398:	mov	r1, r4
   1439c:	mvn	r2, #0
   143a0:	mov	r3, r6
   143a4:	bl	141b8 <__assert_fail@plt+0x2ca0>
   143a8:	sub	sp, fp, #16
   143ac:	pop	{r4, r5, r6, sl, fp, pc}
   143b0:	vmov.i32	q8, #0	; 0x00000000
   143b4:	mov	r2, #32
   143b8:	mov	r3, r0
   143bc:	vst1.32	{d16-d17}, [r3], r2
   143c0:	vst1.32	{d16-d17}, [r3]
   143c4:	add	r2, r0, #16
   143c8:	vst1.32	{d16-d17}, [r2]
   143cc:	cmp	r1, #10
   143d0:	strne	r1, [r0]
   143d4:	bxne	lr
   143d8:	push	{fp, lr}
   143dc:	mov	fp, sp
   143e0:	bl	114f4 <abort@plt>
   143e4:	push	{r4, r5, r6, r7, fp, lr}
   143e8:	add	fp, sp, #16
   143ec:	sub	sp, sp, #48	; 0x30
   143f0:	mov	r4, r3
   143f4:	mov	r5, r2
   143f8:	mov	r6, r0
   143fc:	mov	r7, sp
   14400:	mov	r0, r7
   14404:	bl	143b0 <__assert_fail@plt+0x2e98>
   14408:	mov	r0, r6
   1440c:	mov	r1, r5
   14410:	mov	r2, r4
   14414:	mov	r3, r7
   14418:	bl	141b8 <__assert_fail@plt+0x2ca0>
   1441c:	sub	sp, fp, #16
   14420:	pop	{r4, r5, r6, r7, fp, pc}
   14424:	mov	r2, r1
   14428:	mov	r1, r0
   1442c:	mov	r0, #0
   14430:	b	14374 <__assert_fail@plt+0x2e5c>
   14434:	mov	r3, r2
   14438:	mov	r2, r1
   1443c:	mov	r1, r0
   14440:	mov	r0, #0
   14444:	b	143e4 <__assert_fail@plt+0x2ecc>
   14448:	push	{r4, r5, r6, sl, fp, lr}
   1444c:	add	fp, sp, #16
   14450:	sub	sp, sp, #48	; 0x30
   14454:	mov	r4, r1
   14458:	mov	r5, r0
   1445c:	mov	r0, #32
   14460:	movw	r1, #21912	; 0x5598
   14464:	movt	r1, #3
   14468:	add	r3, r1, #16
   1446c:	vld1.64	{d16-d17}, [r1], r0
   14470:	mov	r6, sp
   14474:	vld1.64	{d18-d19}, [r3]
   14478:	add	r3, r6, #16
   1447c:	vld1.64	{d20-d21}, [r1]
   14480:	vst1.64	{d18-d19}, [r3]
   14484:	mov	r1, r6
   14488:	vst1.64	{d16-d17}, [r1], r0
   1448c:	vst1.64	{d20-d21}, [r1]
   14490:	mov	r0, r6
   14494:	mov	r1, r2
   14498:	mov	r2, #1
   1449c:	bl	12f10 <__assert_fail@plt+0x19f8>
   144a0:	mov	r0, #0
   144a4:	mov	r1, r5
   144a8:	mov	r2, r4
   144ac:	mov	r3, r6
   144b0:	bl	141b8 <__assert_fail@plt+0x2ca0>
   144b4:	sub	sp, fp, #16
   144b8:	pop	{r4, r5, r6, sl, fp, pc}
   144bc:	mov	r2, r1
   144c0:	mvn	r1, #0
   144c4:	b	14448 <__assert_fail@plt+0x2f30>
   144c8:	mov	r1, #58	; 0x3a
   144cc:	b	144bc <__assert_fail@plt+0x2fa4>
   144d0:	mov	r2, #58	; 0x3a
   144d4:	b	14448 <__assert_fail@plt+0x2f30>
   144d8:	push	{r4, r5, r6, sl, fp, lr}
   144dc:	add	fp, sp, #16
   144e0:	sub	sp, sp, #48	; 0x30
   144e4:	mov	r4, r2
   144e8:	mov	r5, r0
   144ec:	mov	r6, sp
   144f0:	mov	r0, r6
   144f4:	bl	143b0 <__assert_fail@plt+0x2e98>
   144f8:	mov	r0, r6
   144fc:	mov	r1, #58	; 0x3a
   14500:	mov	r2, #1
   14504:	bl	12f10 <__assert_fail@plt+0x19f8>
   14508:	mov	r0, r5
   1450c:	mov	r1, r4
   14510:	mvn	r2, #0
   14514:	mov	r3, r6
   14518:	bl	141b8 <__assert_fail@plt+0x2ca0>
   1451c:	sub	sp, fp, #16
   14520:	pop	{r4, r5, r6, sl, fp, pc}
   14524:	push	{fp, lr}
   14528:	mov	fp, sp
   1452c:	sub	sp, sp, #8
   14530:	mvn	ip, #0
   14534:	str	ip, [sp]
   14538:	bl	14544 <__assert_fail@plt+0x302c>
   1453c:	mov	sp, fp
   14540:	pop	{fp, pc}
   14544:	push	{r4, r5, r6, r7, fp, lr}
   14548:	add	fp, sp, #16
   1454c:	sub	sp, sp, #48	; 0x30
   14550:	mov	r7, r3
   14554:	mov	r5, r0
   14558:	mov	r0, #32
   1455c:	movw	r3, #21912	; 0x5598
   14560:	movt	r3, #3
   14564:	add	r4, r3, #16
   14568:	vld1.64	{d16-d17}, [r3], r0
   1456c:	mov	r6, sp
   14570:	vld1.64	{d18-d19}, [r4]
   14574:	add	r4, r6, #16
   14578:	vld1.64	{d20-d21}, [r3]
   1457c:	vst1.64	{d18-d19}, [r4]
   14580:	mov	r3, r6
   14584:	vst1.64	{d16-d17}, [r3], r0
   14588:	vst1.64	{d20-d21}, [r3]
   1458c:	mov	r0, r6
   14590:	bl	12f68 <__assert_fail@plt+0x1a50>
   14594:	ldr	r2, [fp, #8]
   14598:	mov	r0, r5
   1459c:	mov	r1, r7
   145a0:	mov	r3, r6
   145a4:	bl	141b8 <__assert_fail@plt+0x2ca0>
   145a8:	sub	sp, fp, #16
   145ac:	pop	{r4, r5, r6, r7, fp, pc}
   145b0:	mov	r3, r2
   145b4:	mov	r2, r1
   145b8:	mov	r1, r0
   145bc:	mov	r0, #0
   145c0:	b	14524 <__assert_fail@plt+0x300c>
   145c4:	push	{fp, lr}
   145c8:	mov	fp, sp
   145cc:	sub	sp, sp, #8
   145d0:	mov	ip, r2
   145d4:	mov	r2, r1
   145d8:	mov	r1, r0
   145dc:	str	r3, [sp]
   145e0:	mov	r0, #0
   145e4:	mov	r3, ip
   145e8:	bl	14544 <__assert_fail@plt+0x302c>
   145ec:	mov	sp, fp
   145f0:	pop	{fp, pc}
   145f4:	movw	r3, #20864	; 0x5180
   145f8:	movt	r3, #3
   145fc:	b	141b8 <__assert_fail@plt+0x2ca0>
   14600:	mov	r2, r1
   14604:	mov	r1, r0
   14608:	mov	r0, #0
   1460c:	b	145f4 <__assert_fail@plt+0x30dc>
   14610:	mvn	r2, #0
   14614:	b	145f4 <__assert_fail@plt+0x30dc>
   14618:	mov	r1, r0
   1461c:	mov	r0, #0
   14620:	b	14610 <__assert_fail@plt+0x30f8>
   14624:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14628:	add	fp, sp, #24
   1462c:	sub	sp, sp, #16
   14630:	mov	r4, r1
   14634:	mov	r5, r0
   14638:	mov	r7, #0
   1463c:	mov	r0, #0
   14640:	mov	r1, r5
   14644:	mov	r2, #5
   14648:	bl	11314 <dcgettext@plt>
   1464c:	cmp	r0, r5
   14650:	beq	1465c <__assert_fail@plt+0x3144>
   14654:	sub	sp, fp, #24
   14658:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1465c:	bl	22b8c <__assert_fail@plt+0x11674>
   14660:	mov	r6, r0
   14664:	mov	r8, #56	; 0x38
   14668:	mov	r0, #45	; 0x2d
   1466c:	stm	sp, {r0, r8}
   14670:	str	r7, [sp, #8]
   14674:	str	r7, [sp, #12]
   14678:	mov	r0, r6
   1467c:	mov	r1, #85	; 0x55
   14680:	mov	r2, #84	; 0x54
   14684:	mov	r3, #70	; 0x46
   14688:	bl	14720 <__assert_fail@plt+0x3208>
   1468c:	cmp	r0, #0
   14690:	beq	146ac <__assert_fail@plt+0x3194>
   14694:	ldrb	r1, [r5]
   14698:	movw	r2, #15544	; 0x3cb8
   1469c:	movt	r2, #2
   146a0:	movw	r0, #15548	; 0x3cbc
   146a4:	movt	r0, #2
   146a8:	b	146f0 <__assert_fail@plt+0x31d8>
   146ac:	mov	r0, #48	; 0x30
   146b0:	mov	r1, #51	; 0x33
   146b4:	str	r8, [sp]
   146b8:	stmib	sp, {r0, r1}
   146bc:	str	r0, [sp, #12]
   146c0:	mov	r0, r6
   146c4:	mov	r1, #71	; 0x47
   146c8:	mov	r2, #66	; 0x42
   146cc:	mov	r3, #49	; 0x31
   146d0:	bl	14720 <__assert_fail@plt+0x3208>
   146d4:	cmp	r0, #0
   146d8:	beq	14700 <__assert_fail@plt+0x31e8>
   146dc:	ldrb	r1, [r5]
   146e0:	movw	r2, #15552	; 0x3cc0
   146e4:	movt	r2, #2
   146e8:	movw	r0, #15556	; 0x3cc4
   146ec:	movt	r0, #2
   146f0:	cmp	r1, #96	; 0x60
   146f4:	moveq	r0, r2
   146f8:	sub	sp, fp, #24
   146fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14700:	movw	r1, #15538	; 0x3cb2
   14704:	movt	r1, #2
   14708:	movw	r0, #15542	; 0x3cb6
   1470c:	movt	r0, #2
   14710:	cmp	r4, #9
   14714:	moveq	r0, r1
   14718:	sub	sp, fp, #24
   1471c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14720:	push	{r4, r5, r6, r7, fp, lr}
   14724:	add	fp, sp, #16
   14728:	sub	sp, sp, #16
   1472c:	mov	r4, r3
   14730:	mov	r5, r2
   14734:	mov	r7, r1
   14738:	mov	r6, r0
   1473c:	mov	r0, r1
   14740:	bl	2295c <__assert_fail@plt+0x11444>
   14744:	ldrb	r1, [r6]
   14748:	cmp	r0, #0
   1474c:	andne	r1, r1, #223	; 0xdf
   14750:	mov	r0, #0
   14754:	cmp	r1, r7
   14758:	bne	14798 <__assert_fail@plt+0x3280>
   1475c:	cmp	r7, #0
   14760:	moveq	r0, #1
   14764:	subeq	sp, fp, #16
   14768:	popeq	{r4, r5, r6, r7, fp, pc}
   1476c:	ldr	r0, [fp, #20]
   14770:	ldr	r1, [fp, #16]
   14774:	ldr	r2, [fp, #12]
   14778:	ldr	r3, [fp, #8]
   1477c:	str	r2, [sp]
   14780:	str	r1, [sp, #4]
   14784:	str	r0, [sp, #8]
   14788:	mov	r0, r6
   1478c:	mov	r1, r5
   14790:	mov	r2, r4
   14794:	bl	147a0 <__assert_fail@plt+0x3288>
   14798:	sub	sp, fp, #16
   1479c:	pop	{r4, r5, r6, r7, fp, pc}
   147a0:	push	{r4, r5, r6, r7, fp, lr}
   147a4:	add	fp, sp, #16
   147a8:	sub	sp, sp, #8
   147ac:	mov	r4, r3
   147b0:	mov	r5, r2
   147b4:	mov	r7, r1
   147b8:	mov	r6, r0
   147bc:	mov	r0, r1
   147c0:	bl	2295c <__assert_fail@plt+0x11444>
   147c4:	ldrb	r1, [r6, #1]
   147c8:	cmp	r0, #0
   147cc:	andne	r1, r1, #223	; 0xdf
   147d0:	mov	r0, #0
   147d4:	cmp	r1, r7
   147d8:	bne	14810 <__assert_fail@plt+0x32f8>
   147dc:	cmp	r7, #0
   147e0:	moveq	r0, #1
   147e4:	subeq	sp, fp, #16
   147e8:	popeq	{r4, r5, r6, r7, fp, pc}
   147ec:	ldr	r0, [fp, #16]
   147f0:	ldr	r1, [fp, #12]
   147f4:	ldr	r3, [fp, #8]
   147f8:	str	r1, [sp]
   147fc:	str	r0, [sp, #4]
   14800:	mov	r0, r6
   14804:	mov	r1, r5
   14808:	mov	r2, r4
   1480c:	bl	14818 <__assert_fail@plt+0x3300>
   14810:	sub	sp, fp, #16
   14814:	pop	{r4, r5, r6, r7, fp, pc}
   14818:	push	{r4, r5, r6, r7, fp, lr}
   1481c:	add	fp, sp, #16
   14820:	sub	sp, sp, #8
   14824:	mov	r4, r3
   14828:	mov	r5, r2
   1482c:	mov	r7, r1
   14830:	mov	r6, r0
   14834:	mov	r0, r1
   14838:	bl	2295c <__assert_fail@plt+0x11444>
   1483c:	ldrb	r1, [r6, #2]
   14840:	cmp	r0, #0
   14844:	andne	r1, r1, #223	; 0xdf
   14848:	mov	r0, #0
   1484c:	cmp	r1, r7
   14850:	bne	14880 <__assert_fail@plt+0x3368>
   14854:	cmp	r7, #0
   14858:	moveq	r0, #1
   1485c:	subeq	sp, fp, #16
   14860:	popeq	{r4, r5, r6, r7, fp, pc}
   14864:	ldr	r0, [fp, #12]
   14868:	ldr	r3, [fp, #8]
   1486c:	str	r0, [sp]
   14870:	mov	r0, r6
   14874:	mov	r1, r5
   14878:	mov	r2, r4
   1487c:	bl	14888 <__assert_fail@plt+0x3370>
   14880:	sub	sp, fp, #16
   14884:	pop	{r4, r5, r6, r7, fp, pc}
   14888:	push	{r4, r5, r6, r7, fp, lr}
   1488c:	add	fp, sp, #16
   14890:	mov	r4, r3
   14894:	mov	r5, r2
   14898:	mov	r7, r1
   1489c:	mov	r6, r0
   148a0:	mov	r0, r1
   148a4:	bl	2295c <__assert_fail@plt+0x11444>
   148a8:	ldrb	r1, [r6, #3]
   148ac:	ldr	r3, [fp, #8]
   148b0:	cmp	r0, #0
   148b4:	andne	r1, r1, #223	; 0xdf
   148b8:	mov	r0, #0
   148bc:	cmp	r1, r7
   148c0:	popne	{r4, r5, r6, r7, fp, pc}
   148c4:	cmp	r7, #0
   148c8:	beq	148e0 <__assert_fail@plt+0x33c8>
   148cc:	mov	r0, r6
   148d0:	mov	r1, r5
   148d4:	mov	r2, r4
   148d8:	pop	{r4, r5, r6, r7, fp, lr}
   148dc:	b	148e8 <__assert_fail@plt+0x33d0>
   148e0:	mov	r0, #1
   148e4:	pop	{r4, r5, r6, r7, fp, pc}
   148e8:	push	{r4, r5, r6, r7, fp, lr}
   148ec:	add	fp, sp, #16
   148f0:	mov	r4, r3
   148f4:	mov	r5, r2
   148f8:	mov	r7, r1
   148fc:	mov	r6, r0
   14900:	mov	r0, r1
   14904:	bl	2295c <__assert_fail@plt+0x11444>
   14908:	ldrb	r1, [r6, #4]
   1490c:	cmp	r0, #0
   14910:	andne	r1, r1, #223	; 0xdf
   14914:	mov	r0, #0
   14918:	cmp	r1, r7
   1491c:	popne	{r4, r5, r6, r7, fp, pc}
   14920:	cmp	r7, #0
   14924:	beq	1493c <__assert_fail@plt+0x3424>
   14928:	mov	r0, r6
   1492c:	mov	r1, r5
   14930:	mov	r2, r4
   14934:	pop	{r4, r5, r6, r7, fp, lr}
   14938:	b	14944 <__assert_fail@plt+0x342c>
   1493c:	mov	r0, #1
   14940:	pop	{r4, r5, r6, r7, fp, pc}
   14944:	push	{r4, r5, r6, sl, fp, lr}
   14948:	add	fp, sp, #16
   1494c:	mov	r4, r2
   14950:	mov	r6, r1
   14954:	mov	r5, r0
   14958:	mov	r0, r1
   1495c:	bl	2295c <__assert_fail@plt+0x11444>
   14960:	ldrb	r1, [r5, #5]
   14964:	cmp	r0, #0
   14968:	andne	r1, r1, #223	; 0xdf
   1496c:	mov	r0, #0
   14970:	cmp	r1, r6
   14974:	popne	{r4, r5, r6, sl, fp, pc}
   14978:	cmp	r6, #0
   1497c:	beq	14990 <__assert_fail@plt+0x3478>
   14980:	mov	r0, r5
   14984:	mov	r1, r4
   14988:	pop	{r4, r5, r6, sl, fp, lr}
   1498c:	b	14998 <__assert_fail@plt+0x3480>
   14990:	mov	r0, #1
   14994:	pop	{r4, r5, r6, sl, fp, pc}
   14998:	push	{r4, r5, fp, lr}
   1499c:	add	fp, sp, #8
   149a0:	mov	r5, r1
   149a4:	mov	r4, r0
   149a8:	mov	r0, r1
   149ac:	bl	2295c <__assert_fail@plt+0x11444>
   149b0:	ldrb	r1, [r4, #6]
   149b4:	cmp	r0, #0
   149b8:	andne	r1, r1, #223	; 0xdf
   149bc:	mov	r0, #0
   149c0:	cmp	r1, r5
   149c4:	popne	{r4, r5, fp, pc}
   149c8:	cmp	r5, #0
   149cc:	beq	149dc <__assert_fail@plt+0x34c4>
   149d0:	mov	r0, r4
   149d4:	pop	{r4, r5, fp, lr}
   149d8:	b	149e4 <__assert_fail@plt+0x34cc>
   149dc:	mov	r0, #1
   149e0:	pop	{r4, r5, fp, pc}
   149e4:	push	{r4, sl, fp, lr}
   149e8:	add	fp, sp, #8
   149ec:	mov	r4, r0
   149f0:	mov	r0, #0
   149f4:	bl	2295c <__assert_fail@plt+0x11444>
   149f8:	ldrb	r1, [r4, #7]
   149fc:	cmp	r0, #0
   14a00:	beq	14a18 <__assert_fail@plt+0x3500>
   14a04:	tst	r1, #223	; 0xdf
   14a08:	moveq	r0, #1
   14a0c:	popeq	{r4, sl, fp, pc}
   14a10:	mov	r0, #0
   14a14:	pop	{r4, sl, fp, pc}
   14a18:	cmp	r1, #0
   14a1c:	moveq	r0, #1
   14a20:	popeq	{r4, sl, fp, pc}
   14a24:	mov	r0, #0
   14a28:	pop	{r4, sl, fp, pc}
   14a2c:	push	{fp, lr}
   14a30:	mov	fp, sp
   14a34:	mov	ip, r1
   14a38:	mov	lr, r0
   14a3c:	movw	r0, #22216	; 0x56c8
   14a40:	movt	r0, #3
   14a44:	ldr	r3, [r0]
   14a48:	mov	r0, #16
   14a4c:	and	r0, r0, r3, lsr #21
   14a50:	ldrb	r1, [r2, #28]
   14a54:	and	r1, r1, #111	; 0x6f
   14a58:	orr	r0, r1, r0
   14a5c:	orr	r0, r0, #128	; 0x80
   14a60:	strb	r0, [r2, #28]
   14a64:	mov	r0, r2
   14a68:	mov	r1, lr
   14a6c:	mov	r2, ip
   14a70:	bl	14aa8 <__assert_fail@plt+0x3590>
   14a74:	cmp	r0, #0
   14a78:	moveq	r0, #0
   14a7c:	popeq	{fp, pc}
   14a80:	movw	r1, #16032	; 0x3ea0
   14a84:	movt	r1, #2
   14a88:	ldr	r0, [r1, r0, lsl #2]
   14a8c:	movw	r1, #15648	; 0x3d20
   14a90:	movt	r1, #2
   14a94:	add	r1, r1, r0
   14a98:	mov	r0, #0
   14a9c:	mov	r2, #5
   14aa0:	pop	{fp, lr}
   14aa4:	b	11314 <dcgettext@plt>
   14aa8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14aac:	add	fp, sp, #24
   14ab0:	sub	sp, sp, #96	; 0x60
   14ab4:	mov	r6, r3
   14ab8:	mov	r7, r2
   14abc:	mov	r8, r1
   14ac0:	mov	r4, r0
   14ac4:	mov	r0, #0
   14ac8:	str	r0, [fp, #-28]	; 0xffffffe4
   14acc:	str	r0, [r4, #8]
   14ad0:	str	r3, [r4, #12]
   14ad4:	str	r0, [r4, #24]
   14ad8:	ldrb	r0, [r4, #28]
   14adc:	and	r0, r0, #144	; 0x90
   14ae0:	strb	r0, [r4, #28]
   14ae4:	ldr	r5, [r4]
   14ae8:	ldr	r0, [r4, #4]
   14aec:	cmp	r0, #159	; 0x9f
   14af0:	bls	14c44 <__assert_fail@plt+0x372c>
   14af4:	mov	r0, #160	; 0xa0
   14af8:	str	r0, [r4, #8]
   14afc:	mov	r0, r5
   14b00:	mov	r1, r7
   14b04:	bl	161bc <__assert_fail@plt+0x4ca4>
   14b08:	str	r0, [fp, #-28]	; 0xffffffe4
   14b0c:	cmp	r0, #0
   14b10:	bne	14b44 <__assert_fail@plt+0x362c>
   14b14:	movw	r1, #0
   14b18:	movt	r1, #0
   14b1c:	movw	r2, #0
   14b20:	movt	r2, #0
   14b24:	orrs	r1, r2, r1
   14b28:	beq	14b44 <__assert_fail@plt+0x362c>
   14b2c:	add	r0, r5, #136	; 0x88
   14b30:	mov	r1, #0
   14b34:	bl	112c0 <pthread_mutex_init@plt>
   14b38:	cmp	r0, #0
   14b3c:	bne	14c70 <__assert_fail@plt+0x3758>
   14b40:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14b44:	cmp	r0, #0
   14b48:	bne	14c78 <__assert_fail@plt+0x3760>
   14b4c:	ldr	r3, [r4, #20]
   14b50:	str	r5, [sp, #4]
   14b54:	ubfx	r0, r6, #22, #1
   14b58:	str	r0, [sp]
   14b5c:	add	r0, sp, #8
   14b60:	mov	r1, r8
   14b64:	mov	r2, r7
   14b68:	bl	16368 <__assert_fail@plt+0x4e50>
   14b6c:	str	r0, [fp, #-28]	; 0xffffffe4
   14b70:	cmp	r0, #0
   14b74:	bne	14c10 <__assert_fail@plt+0x36f8>
   14b78:	mov	r0, #0
   14b7c:	str	r0, [r4, #24]
   14b80:	add	r0, sp, #8
   14b84:	sub	r3, fp, #28
   14b88:	mov	r1, r4
   14b8c:	mov	r2, r6
   14b90:	bl	1653c <__assert_fail@plt+0x5024>
   14b94:	str	r0, [r5, #52]	; 0x34
   14b98:	cmp	r0, #0
   14b9c:	beq	14c10 <__assert_fail@plt+0x36f8>
   14ba0:	mov	r0, r4
   14ba4:	bl	16610 <__assert_fail@plt+0x50f8>
   14ba8:	str	r0, [fp, #-28]	; 0xffffffe4
   14bac:	cmp	r0, #0
   14bb0:	bne	14c10 <__assert_fail@plt+0x36f8>
   14bb4:	ands	r0, r6, #4194304	; 0x400000
   14bb8:	bne	14bdc <__assert_fail@plt+0x36c4>
   14bbc:	ldrb	r0, [r5, #88]	; 0x58
   14bc0:	ands	r0, r0, #4
   14bc4:	beq	14bdc <__assert_fail@plt+0x36c4>
   14bc8:	ldr	r0, [r4, #20]
   14bcc:	cmp	r0, #0
   14bd0:	bne	14bdc <__assert_fail@plt+0x36c4>
   14bd4:	mov	r0, r5
   14bd8:	bl	1682c <__assert_fail@plt+0x5314>
   14bdc:	mov	r0, r5
   14be0:	bl	169c8 <__assert_fail@plt+0x54b0>
   14be4:	str	r0, [fp, #-28]	; 0xffffffe4
   14be8:	mov	r0, r4
   14bec:	bl	164b8 <__assert_fail@plt+0x4fa0>
   14bf0:	add	r0, sp, #8
   14bf4:	bl	16508 <__assert_fail@plt+0x4ff0>
   14bf8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14bfc:	cmp	r0, #0
   14c00:	bne	14c20 <__assert_fail@plt+0x3708>
   14c04:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14c08:	sub	sp, fp, #24
   14c0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c10:	mov	r0, r4
   14c14:	bl	164b8 <__assert_fail@plt+0x4fa0>
   14c18:	add	r0, sp, #8
   14c1c:	bl	16508 <__assert_fail@plt+0x4ff0>
   14c20:	movw	r0, #0
   14c24:	movt	r0, #0
   14c28:	movw	r1, #0
   14c2c:	movt	r1, #0
   14c30:	orrs	r0, r1, r0
   14c34:	beq	14c78 <__assert_fail@plt+0x3760>
   14c38:	add	r0, r5, #136	; 0x88
   14c3c:	bl	11260 <pthread_mutex_destroy@plt>
   14c40:	b	14c78 <__assert_fail@plt+0x3760>
   14c44:	mov	r9, #160	; 0xa0
   14c48:	mov	r0, r5
   14c4c:	mov	r1, #160	; 0xa0
   14c50:	bl	22654 <__assert_fail@plt+0x1113c>
   14c54:	cmp	r0, #0
   14c58:	moveq	r0, #12
   14c5c:	subeq	sp, fp, #24
   14c60:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c64:	mov	r5, r0
   14c68:	stm	r4, {r0, r9}
   14c6c:	b	14af4 <__assert_fail@plt+0x35dc>
   14c70:	mov	r0, #12
   14c74:	str	r0, [fp, #-28]	; 0xffffffe4
   14c78:	mov	r0, r5
   14c7c:	bl	152dc <__assert_fail@plt+0x3dc4>
   14c80:	mov	r0, #0
   14c84:	str	r0, [r4]
   14c88:	str	r0, [r4, #4]
   14c8c:	b	14c04 <__assert_fail@plt+0x36ec>
   14c90:	movw	r2, #22216	; 0x56c8
   14c94:	movt	r2, #3
   14c98:	ldr	r1, [r2]
   14c9c:	str	r0, [r2]
   14ca0:	mov	r0, r1
   14ca4:	bx	lr
   14ca8:	push	{r4, r5, r6, sl, fp, lr}
   14cac:	add	fp, sp, #16
   14cb0:	mov	r4, r0
   14cb4:	ldr	r6, [r0]
   14cb8:	ldr	r5, [r0, #16]
   14cbc:	mov	r0, r5
   14cc0:	mov	r1, #0
   14cc4:	mov	r2, #256	; 0x100
   14cc8:	bl	11428 <memset@plt>
   14ccc:	ldr	r1, [r6, #36]	; 0x24
   14cd0:	mov	r0, r4
   14cd4:	mov	r2, r5
   14cd8:	bl	14d44 <__assert_fail@plt+0x382c>
   14cdc:	ldr	r0, [r6, #36]	; 0x24
   14ce0:	ldr	r1, [r6, #40]	; 0x28
   14ce4:	cmp	r0, r1
   14ce8:	beq	14cf8 <__assert_fail@plt+0x37e0>
   14cec:	mov	r0, r4
   14cf0:	mov	r2, r5
   14cf4:	bl	14d44 <__assert_fail@plt+0x382c>
   14cf8:	ldr	r0, [r6, #36]	; 0x24
   14cfc:	ldr	r1, [r6, #44]	; 0x2c
   14d00:	cmp	r0, r1
   14d04:	beq	14d14 <__assert_fail@plt+0x37fc>
   14d08:	mov	r0, r4
   14d0c:	mov	r2, r5
   14d10:	bl	14d44 <__assert_fail@plt+0x382c>
   14d14:	ldr	r0, [r6, #36]	; 0x24
   14d18:	ldr	r1, [r6, #48]	; 0x30
   14d1c:	cmp	r0, r1
   14d20:	beq	14d30 <__assert_fail@plt+0x3818>
   14d24:	mov	r0, r4
   14d28:	mov	r2, r5
   14d2c:	bl	14d44 <__assert_fail@plt+0x382c>
   14d30:	ldrb	r0, [r4, #28]
   14d34:	orr	r0, r0, #8
   14d38:	strb	r0, [r4, #28]
   14d3c:	mov	r0, #0
   14d40:	pop	{r4, r5, r6, sl, fp, pc}
   14d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d48:	add	fp, sp, #28
   14d4c:	sub	sp, sp, #308	; 0x134
   14d50:	str	r2, [sp, #28]
   14d54:	str	r0, [sp, #16]
   14d58:	ldr	r8, [r0]
   14d5c:	ldr	r0, [r8, #92]	; 0x5c
   14d60:	mov	sl, #0
   14d64:	cmp	r0, #1
   14d68:	ldreq	r0, [sp, #16]
   14d6c:	ldrbeq	r0, [r0, #14]
   14d70:	ubfxeq	sl, r0, #6, #1
   14d74:	ldr	r0, [r1, #8]
   14d78:	cmp	r0, #1
   14d7c:	blt	150b8 <__assert_fail@plt+0x3ba0>
   14d80:	add	r0, sp, #32
   14d84:	add	r0, r0, #1
   14d88:	str	r0, [sp]
   14d8c:	mov	r4, #1
   14d90:	movw	r0, #1
   14d94:	movt	r0, #32
   14d98:	add	r0, r0, #254	; 0xfe
   14d9c:	str	r0, [sp, #4]
   14da0:	mov	r2, #0
   14da4:	str	r1, [sp, #8]
   14da8:	str	r8, [sp, #20]
   14dac:	ldr	r0, [r1, #12]
   14db0:	str	r2, [sp, #12]
   14db4:	ldr	r9, [r0, r2, lsl #2]
   14db8:	ldr	r0, [r8]
   14dbc:	add	r1, r0, r9, lsl #3
   14dc0:	ldrb	r5, [r1, #4]
   14dc4:	cmp	r5, #1
   14dc8:	beq	14e50 <__assert_fail@plt+0x3938>
   14dcc:	cmp	r5, #6
   14dd0:	beq	14f50 <__assert_fail@plt+0x3a38>
   14dd4:	cmp	r5, #3
   14dd8:	bne	14fd4 <__assert_fail@plt+0x3abc>
   14ddc:	mov	r7, #0
   14de0:	ldr	r5, [sp, #28]
   14de4:	mov	r6, #0
   14de8:	str	r9, [sp, #24]
   14dec:	ldr	r0, [r8]
   14df0:	ldr	r0, [r0, r9, lsl #3]
   14df4:	ldr	r9, [r0, r6, lsl #2]
   14df8:	mov	r8, #0
   14dfc:	b	14e14 <__assert_fail@plt+0x38fc>
   14e00:	add	r0, r7, r8
   14e04:	bl	112b4 <tolower@plt>
   14e08:	ldr	r1, [sp, #28]
   14e0c:	strb	r4, [r1, r0]
   14e10:	b	14e24 <__assert_fail@plt+0x390c>
   14e14:	tst	r9, r4, lsl r8
   14e18:	strbne	r4, [r5, r8]
   14e1c:	cmpne	sl, #0
   14e20:	bne	14e00 <__assert_fail@plt+0x38e8>
   14e24:	add	r8, r8, #1
   14e28:	cmp	r8, #32
   14e2c:	bne	14e14 <__assert_fail@plt+0x38fc>
   14e30:	add	r5, r5, #32
   14e34:	add	r6, r6, #1
   14e38:	add	r7, r7, #32
   14e3c:	cmp	r6, #8
   14e40:	ldr	r8, [sp, #20]
   14e44:	ldr	r9, [sp, #24]
   14e48:	bne	14dec <__assert_fail@plt+0x38d4>
   14e4c:	b	150a0 <__assert_fail@plt+0x3b88>
   14e50:	ldrb	r0, [r0, r9, lsl #3]
   14e54:	ldr	r1, [sp, #28]
   14e58:	strb	r4, [r1, r0]
   14e5c:	cmp	sl, #0
   14e60:	beq	14e70 <__assert_fail@plt+0x3958>
   14e64:	bl	112b4 <tolower@plt>
   14e68:	ldr	r1, [sp, #28]
   14e6c:	strb	r4, [r1, r0]
   14e70:	ldr	r0, [sp, #16]
   14e74:	ldrb	r0, [r0, #14]
   14e78:	tst	r0, #64	; 0x40
   14e7c:	beq	150a0 <__assert_fail@plt+0x3b88>
   14e80:	ldr	r0, [r8, #92]	; 0x5c
   14e84:	cmp	r0, #2
   14e88:	blt	150a0 <__assert_fail@plt+0x3b88>
   14e8c:	ldr	r0, [r8]
   14e90:	ldrb	r0, [r0, r9, lsl #3]
   14e94:	strb	r0, [sp, #32]
   14e98:	ldr	r0, [r8, #8]
   14e9c:	add	r1, r9, #1
   14ea0:	cmp	r1, r0
   14ea4:	ldr	r0, [sp]
   14ea8:	add	r5, sp, #32
   14eac:	bcs	14ef8 <__assert_fail@plt+0x39e0>
   14eb0:	ldr	r0, [sp]
   14eb4:	ldr	r1, [r8]
   14eb8:	add	r1, r1, r9, lsl #3
   14ebc:	ldr	r2, [r1, #12]
   14ec0:	ldr	r3, [sp, #4]
   14ec4:	and	r2, r2, r3
   14ec8:	movw	r3, #1
   14ecc:	movt	r3, #32
   14ed0:	cmp	r2, r3
   14ed4:	bne	14ef8 <__assert_fail@plt+0x39e0>
   14ed8:	ldrb	r1, [r1, #8]
   14edc:	strb	r1, [r0], #1
   14ee0:	add	r1, r9, #1
   14ee4:	ldr	r2, [r8, #8]
   14ee8:	add	r3, r9, #2
   14eec:	cmp	r3, r2
   14ef0:	mov	r9, r1
   14ef4:	bcc	14eb4 <__assert_fail@plt+0x399c>
   14ef8:	mov	r1, #0
   14efc:	str	r1, [fp, #-44]	; 0xffffffd4
   14f00:	str	r1, [fp, #-48]	; 0xffffffd0
   14f04:	sub	r6, r0, r5
   14f08:	sub	r0, fp, #36	; 0x24
   14f0c:	mov	r1, r5
   14f10:	mov	r2, r6
   14f14:	sub	r3, fp, #48	; 0x30
   14f18:	bl	22bc4 <__assert_fail@plt+0x116ac>
   14f1c:	cmp	r0, r6
   14f20:	bne	150a0 <__assert_fail@plt+0x3b88>
   14f24:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14f28:	bl	112cc <towlower@plt>
   14f2c:	mov	r1, r0
   14f30:	mov	r0, r5
   14f34:	sub	r2, fp, #48	; 0x30
   14f38:	bl	11230 <wcrtomb@plt>
   14f3c:	cmn	r0, #1
   14f40:	ldrbne	r0, [sp, #32]
   14f44:	ldrne	r1, [sp, #28]
   14f48:	strbne	r4, [r1, r0]
   14f4c:	b	150a0 <__assert_fail@plt+0x3b88>
   14f50:	ldr	r6, [r0, r9, lsl #3]
   14f54:	ldr	r0, [r8, #92]	; 0x5c
   14f58:	cmp	r0, #2
   14f5c:	blt	14fec <__assert_fail@plt+0x3ad4>
   14f60:	ldr	r0, [r6, #36]	; 0x24
   14f64:	cmp	r0, #0
   14f68:	bne	14f80 <__assert_fail@plt+0x3a68>
   14f6c:	ldrb	r0, [r6, #16]
   14f70:	tst	r0, #1
   14f74:	ldreq	r0, [r6, #32]
   14f78:	cmpeq	r0, #0
   14f7c:	beq	14fec <__assert_fail@plt+0x3ad4>
   14f80:	mov	r0, #0
   14f84:	strb	r0, [fp, #-48]	; 0xffffffd0
   14f88:	add	r5, sp, #32
   14f8c:	mov	r0, #0
   14f90:	str	r0, [sp, #36]	; 0x24
   14f94:	str	r0, [sp, #32]
   14f98:	mov	r0, #0
   14f9c:	sub	r1, fp, #48	; 0x30
   14fa0:	mov	r2, #1
   14fa4:	mov	r3, r5
   14fa8:	bl	22bc4 <__assert_fail@plt+0x116ac>
   14fac:	cmn	r0, #2
   14fb0:	ldrbeq	r0, [fp, #-48]	; 0xffffffd0
   14fb4:	ldreq	r1, [sp, #28]
   14fb8:	strbeq	r4, [r1, r0]
   14fbc:	ldrb	r0, [fp, #-48]	; 0xffffffd0
   14fc0:	add	r0, r0, #1
   14fc4:	strb	r0, [fp, #-48]	; 0xffffffd0
   14fc8:	tst	r0, #255	; 0xff
   14fcc:	bne	14f8c <__assert_fail@plt+0x3a74>
   14fd0:	b	150a0 <__assert_fail@plt+0x3b88>
   14fd4:	cmp	r5, #7
   14fd8:	bhi	150a0 <__assert_fail@plt+0x3b88>
   14fdc:	mov	r0, #164	; 0xa4
   14fe0:	tst	r0, r4, lsl r5
   14fe4:	beq	150a0 <__assert_fail@plt+0x3b88>
   14fe8:	b	150c0 <__assert_fail@plt+0x3ba8>
   14fec:	ldr	r0, [r6, #20]
   14ff0:	cmp	r0, #1
   14ff4:	blt	150a0 <__assert_fail@plt+0x3b88>
   14ff8:	mov	r9, #0
   14ffc:	mov	r0, #0
   15000:	str	r0, [fp, #-44]	; 0xffffffd4
   15004:	str	r0, [fp, #-48]	; 0xffffffd0
   15008:	ldr	r0, [r6]
   1500c:	ldr	r1, [r0, r9, lsl #2]
   15010:	add	r5, sp, #32
   15014:	mov	r0, r5
   15018:	sub	r2, fp, #48	; 0x30
   1501c:	bl	11230 <wcrtomb@plt>
   15020:	cmn	r0, #1
   15024:	beq	15048 <__assert_fail@plt+0x3b30>
   15028:	ldrb	r0, [sp, #32]
   1502c:	ldr	r1, [sp, #28]
   15030:	strb	r4, [r1, r0]
   15034:	cmp	sl, #0
   15038:	beq	15048 <__assert_fail@plt+0x3b30>
   1503c:	bl	112b4 <tolower@plt>
   15040:	ldr	r1, [sp, #28]
   15044:	strb	r4, [r1, r0]
   15048:	ldr	r0, [sp, #16]
   1504c:	ldrb	r0, [r0, #14]
   15050:	tst	r0, #64	; 0x40
   15054:	beq	15090 <__assert_fail@plt+0x3b78>
   15058:	ldr	r0, [r8, #92]	; 0x5c
   1505c:	cmp	r0, #2
   15060:	blt	15090 <__assert_fail@plt+0x3b78>
   15064:	ldr	r0, [r6]
   15068:	ldr	r0, [r0, r9, lsl #2]
   1506c:	bl	112cc <towlower@plt>
   15070:	mov	r1, r0
   15074:	mov	r0, r5
   15078:	sub	r2, fp, #48	; 0x30
   1507c:	bl	11230 <wcrtomb@plt>
   15080:	cmn	r0, #1
   15084:	ldrbne	r0, [sp, #32]
   15088:	ldrne	r1, [sp, #28]
   1508c:	strbne	r4, [r1, r0]
   15090:	add	r9, r9, #1
   15094:	ldr	r0, [r6, #20]
   15098:	cmp	r9, r0
   1509c:	blt	14ffc <__assert_fail@plt+0x3ae4>
   150a0:	ldr	r1, [sp, #8]
   150a4:	ldr	r0, [r1, #8]
   150a8:	ldr	r2, [sp, #12]
   150ac:	add	r2, r2, #1
   150b0:	cmp	r2, r0
   150b4:	blt	14dac <__assert_fail@plt+0x3894>
   150b8:	sub	sp, fp, #28
   150bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150c0:	ldr	r0, [sp, #28]
   150c4:	mov	r1, #1
   150c8:	mov	r2, #256	; 0x100
   150cc:	bl	11428 <memset@plt>
   150d0:	cmp	r5, #2
   150d4:	ldreq	r1, [sp, #16]
   150d8:	ldrbeq	r0, [r1, #28]
   150dc:	orreq	r0, r0, #1
   150e0:	strbeq	r0, [r1, #28]
   150e4:	sub	sp, fp, #28
   150e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150f0:	add	fp, sp, #24
   150f4:	mov	r7, r2
   150f8:	mov	r8, r1
   150fc:	mov	r4, r0
   15100:	mov	r0, #0
   15104:	str	r0, [r4]
   15108:	str	r0, [r4, #4]
   1510c:	str	r0, [r4, #8]
   15110:	mov	r0, #256	; 0x100
   15114:	bl	22624 <__assert_fail@plt+0x1110c>
   15118:	str	r0, [r4, #16]
   1511c:	cmp	r0, #0
   15120:	beq	151d0 <__assert_fail@plt+0x3cb8>
   15124:	movw	r0, #45820	; 0xb2fc
   15128:	movt	r0, #3
   1512c:	tst	r7, #1
   15130:	movweq	r0, #710	; 0x2c6
   15134:	movteq	r0, #257	; 0x101
   15138:	and	r1, r7, #2
   1513c:	orr	r5, r0, r1, lsl #21
   15140:	tst	r7, #4
   15144:	bne	15158 <__assert_fail@plt+0x3c40>
   15148:	ldrb	r0, [r4, #28]
   1514c:	and	r0, r0, #127	; 0x7f
   15150:	strb	r0, [r4, #28]
   15154:	b	15174 <__assert_fail@plt+0x3c5c>
   15158:	ldrb	r0, [r4, #28]
   1515c:	orr	r0, r0, #128	; 0x80
   15160:	strb	r0, [r4, #28]
   15164:	movw	r0, #45758	; 0xb2be
   15168:	movt	r0, #323	; 0x143
   1516c:	and	r0, r5, r0
   15170:	orr	r5, r0, #256	; 0x100
   15174:	mov	r6, #0
   15178:	str	r6, [r4, #20]
   1517c:	and	r0, r7, #8
   15180:	ldrb	r1, [r4, #28]
   15184:	and	r1, r1, #239	; 0xef
   15188:	orr	r0, r1, r0, lsl #1
   1518c:	strb	r0, [r4, #28]
   15190:	mov	r0, r8
   15194:	bl	113ec <strlen@plt>
   15198:	mov	r2, r0
   1519c:	mov	r0, r4
   151a0:	mov	r1, r8
   151a4:	mov	r3, r5
   151a8:	bl	14aa8 <__assert_fail@plt+0x3590>
   151ac:	mov	r5, r0
   151b0:	cmp	r0, #16
   151b4:	movweq	r5, #8
   151b8:	cmp	r5, #0
   151bc:	bne	151dc <__assert_fail@plt+0x3cc4>
   151c0:	mov	r0, r4
   151c4:	bl	14ca8 <__assert_fail@plt+0x3790>
   151c8:	mov	r0, r6
   151cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151d0:	mov	r6, #12
   151d4:	mov	r0, r6
   151d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151dc:	ldr	r0, [r4, #16]
   151e0:	bl	22b14 <__assert_fail@plt+0x115fc>
   151e4:	str	r6, [r4, #16]
   151e8:	mov	r0, r5
   151ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151f0:	push	{r4, r5, r6, r7, fp, lr}
   151f4:	add	fp, sp, #16
   151f8:	cmp	r0, #17
   151fc:	bcs	15270 <__assert_fail@plt+0x3d58>
   15200:	mov	r5, r3
   15204:	mov	r4, r2
   15208:	movw	r1, #16032	; 0x3ea0
   1520c:	movt	r1, #2
   15210:	ldr	r0, [r1, r0, lsl #2]
   15214:	movw	r1, #15648	; 0x3d20
   15218:	movt	r1, #2
   1521c:	add	r1, r1, r0
   15220:	mov	r0, #0
   15224:	mov	r2, #5
   15228:	bl	11314 <dcgettext@plt>
   1522c:	mov	r6, r0
   15230:	bl	113ec <strlen@plt>
   15234:	add	r7, r0, #1
   15238:	cmp	r5, #0
   1523c:	beq	15258 <__assert_fail@plt+0x3d40>
   15240:	cmp	r7, r5
   15244:	mov	r2, r7
   15248:	bhi	15260 <__assert_fail@plt+0x3d48>
   1524c:	mov	r0, r4
   15250:	mov	r1, r6
   15254:	bl	112a8 <memcpy@plt>
   15258:	mov	r0, r7
   1525c:	pop	{r4, r5, r6, r7, fp, pc}
   15260:	sub	r2, r5, #1
   15264:	mov	r0, #0
   15268:	strb	r0, [r4, r2]
   1526c:	b	1524c <__assert_fail@plt+0x3d34>
   15270:	bl	114f4 <abort@plt>
   15274:	push	{r4, r5, fp, lr}
   15278:	add	fp, sp, #8
   1527c:	mov	r4, r0
   15280:	ldr	r5, [r0]
   15284:	cmp	r5, #0
   15288:	beq	152b4 <__assert_fail@plt+0x3d9c>
   1528c:	movw	r0, #0
   15290:	movt	r0, #0
   15294:	movw	r1, #0
   15298:	movt	r1, #0
   1529c:	orrs	r0, r1, r0
   152a0:	beq	152ac <__assert_fail@plt+0x3d94>
   152a4:	add	r0, r5, #136	; 0x88
   152a8:	bl	11260 <pthread_mutex_destroy@plt>
   152ac:	mov	r0, r5
   152b0:	bl	152dc <__assert_fail@plt+0x3dc4>
   152b4:	mov	r5, #0
   152b8:	str	r5, [r4]
   152bc:	str	r5, [r4, #4]
   152c0:	ldr	r0, [r4, #16]
   152c4:	bl	22b14 <__assert_fail@plt+0x115fc>
   152c8:	str	r5, [r4, #16]
   152cc:	ldr	r0, [r4, #20]
   152d0:	bl	22b14 <__assert_fail@plt+0x115fc>
   152d4:	str	r5, [r4, #20]
   152d8:	pop	{r4, r5, fp, pc}
   152dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152e0:	add	fp, sp, #24
   152e4:	mov	r8, r0
   152e8:	ldr	r0, [r0]
   152ec:	cmp	r0, #0
   152f0:	ldrne	r0, [r8, #8]
   152f4:	cmpne	r0, #0
   152f8:	beq	15324 <__assert_fail@plt+0x3e0c>
   152fc:	mov	r5, #0
   15300:	mov	r6, #0
   15304:	ldr	r0, [r8]
   15308:	add	r0, r0, r5
   1530c:	bl	160f4 <__assert_fail@plt+0x4bdc>
   15310:	add	r5, r5, #8
   15314:	add	r6, r6, #1
   15318:	ldr	r0, [r8, #8]
   1531c:	cmp	r6, r0
   15320:	bcc	15304 <__assert_fail@plt+0x3dec>
   15324:	ldr	r0, [r8, #12]
   15328:	bl	22b14 <__assert_fail@plt+0x115fc>
   1532c:	ldr	r0, [r8, #8]
   15330:	cmp	r0, #0
   15334:	beq	15390 <__assert_fail@plt+0x3e78>
   15338:	mov	r5, #0
   1533c:	mov	r6, #8
   15340:	ldr	r0, [r8, #24]
   15344:	cmp	r0, #0
   15348:	beq	15354 <__assert_fail@plt+0x3e3c>
   1534c:	ldr	r0, [r0, r6]
   15350:	bl	22b14 <__assert_fail@plt+0x115fc>
   15354:	ldr	r0, [r8, #28]
   15358:	cmp	r0, #0
   1535c:	beq	15368 <__assert_fail@plt+0x3e50>
   15360:	ldr	r0, [r0, r6]
   15364:	bl	22b14 <__assert_fail@plt+0x115fc>
   15368:	ldr	r0, [r8, #20]
   1536c:	cmp	r0, #0
   15370:	beq	1537c <__assert_fail@plt+0x3e64>
   15374:	ldr	r0, [r0, r6]
   15378:	bl	22b14 <__assert_fail@plt+0x115fc>
   1537c:	add	r6, r6, #12
   15380:	add	r5, r5, #1
   15384:	ldr	r0, [r8, #8]
   15388:	cmp	r5, r0
   1538c:	bcc	15340 <__assert_fail@plt+0x3e28>
   15390:	ldr	r0, [r8, #20]
   15394:	bl	22b14 <__assert_fail@plt+0x115fc>
   15398:	ldr	r0, [r8, #24]
   1539c:	bl	22b14 <__assert_fail@plt+0x115fc>
   153a0:	ldr	r0, [r8, #28]
   153a4:	bl	22b14 <__assert_fail@plt+0x115fc>
   153a8:	ldr	r0, [r8]
   153ac:	bl	22b14 <__assert_fail@plt+0x115fc>
   153b0:	ldr	r0, [r8, #32]
   153b4:	cmp	r0, #0
   153b8:	beq	15414 <__assert_fail@plt+0x3efc>
   153bc:	mov	r5, #0
   153c0:	ldr	r6, [r8, #32]
   153c4:	add	r0, r5, r5, lsl #1
   153c8:	ldr	r0, [r6, r0, lsl #2]!
   153cc:	add	r7, r6, #8
   153d0:	cmp	r0, #1
   153d4:	blt	153f8 <__assert_fail@plt+0x3ee0>
   153d8:	mov	r4, #0
   153dc:	ldr	r0, [r7]
   153e0:	ldr	r0, [r0, r4, lsl #2]
   153e4:	bl	16124 <__assert_fail@plt+0x4c0c>
   153e8:	add	r4, r4, #1
   153ec:	ldr	r0, [r6]
   153f0:	cmp	r4, r0
   153f4:	blt	153dc <__assert_fail@plt+0x3ec4>
   153f8:	ldr	r0, [r7]
   153fc:	bl	22b14 <__assert_fail@plt+0x115fc>
   15400:	add	r0, r5, #1
   15404:	ldr	r1, [r8, #68]	; 0x44
   15408:	cmp	r5, r1
   1540c:	mov	r5, r0
   15410:	bcc	153c0 <__assert_fail@plt+0x3ea8>
   15414:	ldr	r0, [r8, #32]
   15418:	bl	22b14 <__assert_fail@plt+0x115fc>
   1541c:	ldr	r0, [r8, #60]	; 0x3c
   15420:	movw	r1, #16100	; 0x3ee4
   15424:	movt	r1, #2
   15428:	cmp	r0, r1
   1542c:	beq	15434 <__assert_fail@plt+0x3f1c>
   15430:	bl	22b14 <__assert_fail@plt+0x115fc>
   15434:	ldr	r0, [r8, #132]	; 0x84
   15438:	bl	22b14 <__assert_fail@plt+0x115fc>
   1543c:	mov	r0, r8
   15440:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15444:	b	22b14 <__assert_fail@plt+0x115fc>
   15448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1544c:	add	fp, sp, #28
   15450:	sub	sp, sp, #28
   15454:	mov	r7, #2
   15458:	ldr	sl, [fp, #8]
   1545c:	cmp	sl, #7
   15460:	bhi	15534 <__assert_fail@plt+0x401c>
   15464:	mov	r6, r3
   15468:	mov	r9, r2
   1546c:	mov	r4, r1
   15470:	mov	r5, r0
   15474:	ldr	r0, [r0]
   15478:	str	r0, [sp, #24]
   1547c:	tst	sl, #4
   15480:	bne	15498 <__assert_fail@plt+0x3f80>
   15484:	mov	r0, r4
   15488:	bl	113ec <strlen@plt>
   1548c:	mov	r7, r0
   15490:	mov	r8, #0
   15494:	b	154a0 <__assert_fail@plt+0x3f88>
   15498:	ldr	r8, [r6]
   1549c:	ldr	r7, [r6, #4]
   154a0:	movw	r0, #0
   154a4:	movt	r0, #0
   154a8:	movw	r1, #0
   154ac:	movt	r1, #0
   154b0:	orrs	r0, r1, r0
   154b4:	str	r0, [sp, #20]
   154b8:	beq	154c8 <__assert_fail@plt+0x3fb0>
   154bc:	ldr	r0, [sp, #24]
   154c0:	add	r0, r0, #136	; 0x88
   154c4:	bl	11290 <pthread_mutex_lock@plt>
   154c8:	ldrb	r0, [r5, #28]
   154cc:	tst	r0, #16
   154d0:	bne	154e4 <__assert_fail@plt+0x3fcc>
   154d4:	str	r7, [sp]
   154d8:	stmib	sp, {r7, r9}
   154dc:	str	r6, [sp, #12]
   154e0:	b	154f8 <__assert_fail@plt+0x3fe0>
   154e4:	mov	r0, #0
   154e8:	str	r7, [sp]
   154ec:	str	r7, [sp, #4]
   154f0:	str	r0, [sp, #8]
   154f4:	str	r0, [sp, #12]
   154f8:	str	sl, [sp, #16]
   154fc:	mov	r0, r5
   15500:	mov	r1, r4
   15504:	mov	r2, r7
   15508:	mov	r3, r8
   1550c:	bl	15540 <__assert_fail@plt+0x4028>
   15510:	mov	r7, r0
   15514:	ldr	r0, [sp, #20]
   15518:	cmp	r0, #0
   1551c:	beq	1552c <__assert_fail@plt+0x4014>
   15520:	ldr	r0, [sp, #24]
   15524:	add	r0, r0, #136	; 0x88
   15528:	bl	111f4 <pthread_mutex_unlock@plt>
   1552c:	cmp	r7, #0
   15530:	movwne	r7, #1
   15534:	mov	r0, r7
   15538:	sub	sp, fp, #28
   1553c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15544:	add	fp, sp, #28
   15548:	sub	sp, sp, #212	; 0xd4
   1554c:	mov	r6, r3
   15550:	str	r2, [sp, #60]	; 0x3c
   15554:	str	r1, [sp, #36]	; 0x24
   15558:	mov	sl, r0
   1555c:	ldr	r8, [r0]
   15560:	add	r0, sp, #64	; 0x40
   15564:	mov	r7, #0
   15568:	mov	r1, #0
   1556c:	mov	r2, #136	; 0x88
   15570:	bl	11428 <memset@plt>
   15574:	str	r8, [sp, #148]	; 0x94
   15578:	ldr	r1, [sl, #16]
   1557c:	ldr	r0, [fp, #16]
   15580:	ldr	ip, [fp, #8]
   15584:	cmp	r1, #0
   15588:	mov	r5, #0
   1558c:	beq	155a8 <__assert_fail@plt+0x4090>
   15590:	ldrb	r2, [sl, #28]
   15594:	and	r2, r2, #9
   15598:	cmp	r2, #8
   1559c:	movne	r1, #0
   155a0:	subs	r5, r6, ip
   155a4:	movne	r5, r1
   155a8:	str	r6, [sp, #44]	; 0x2c
   155ac:	ldr	r1, [sl, #8]
   155b0:	ldr	r2, [sl, #24]
   155b4:	mvn	r3, r2
   155b8:	cmp	r2, r0
   155bc:	addcc	r7, r3, r0
   155c0:	mov	r9, #1
   155c4:	cmp	r1, #0
   155c8:	beq	15ac4 <__assert_fail@plt+0x45ac>
   155cc:	ldr	r1, [r8, #36]	; 0x24
   155d0:	cmp	r1, #0
   155d4:	ldrne	r2, [r8, #40]	; 0x28
   155d8:	cmpne	r2, #0
   155dc:	beq	15ac4 <__assert_fail@plt+0x45ac>
   155e0:	ldr	r3, [r8, #44]	; 0x2c
   155e4:	cmp	r3, #0
   155e8:	ldrne	r6, [r8, #48]	; 0x30
   155ec:	cmpne	r6, #0
   155f0:	beq	15ac4 <__assert_fail@plt+0x45ac>
   155f4:	ldr	lr, [sl, #20]
   155f8:	ldr	r1, [r1, #8]
   155fc:	cmp	r1, #0
   15600:	bne	15610 <__assert_fail@plt+0x40f8>
   15604:	ldr	r1, [r2, #8]
   15608:	cmp	r1, #0
   1560c:	beq	15b90 <__assert_fail@plt+0x4678>
   15610:	mov	r6, ip
   15614:	ldr	r0, [fp, #16]
   15618:	mov	r4, r7
   1561c:	subs	r0, r0, r7
   15620:	str	r0, [sp, #48]	; 0x30
   15624:	mov	r0, #1
   15628:	str	r0, [sp, #40]	; 0x28
   1562c:	bne	15640 <__assert_fail@plt+0x4128>
   15630:	ldr	r0, [r8, #76]	; 0x4c
   15634:	cmp	r0, #0
   15638:	movwne	r0, #1
   1563c:	str	r0, [sp, #40]	; 0x28
   15640:	ldr	r0, [r8, #8]
   15644:	ldr	r1, [sl, #12]
   15648:	str	r8, [sp, #8]
   1564c:	str	lr, [sp, #56]	; 0x38
   15650:	str	lr, [sp]
   15654:	ubfx	r1, r1, #22, #1
   15658:	str	r1, [sp, #4]
   1565c:	add	r3, r0, #1
   15660:	add	r0, sp, #64	; 0x40
   15664:	ldr	r7, [sp, #36]	; 0x24
   15668:	mov	r1, r7
   1566c:	ldr	r2, [sp, #60]	; 0x3c
   15670:	bl	1be28 <__assert_fail@plt+0xa910>
   15674:	cmp	r0, #0
   15678:	bne	15cd4 <__assert_fail@plt+0x47bc>
   1567c:	ldr	r1, [fp, #24]
   15680:	ldr	r0, [fp, #12]
   15684:	str	r0, [sp, #116]	; 0x74
   15688:	str	r0, [sp, #120]	; 0x78
   1568c:	str	sl, [sp, #32]
   15690:	ldrb	r0, [sl, #28]
   15694:	lsr	r0, r0, #7
   15698:	strb	r0, [sp, #141]	; 0x8d
   1569c:	ldr	r0, [r8, #76]	; 0x4c
   156a0:	lsl	r2, r0, #1
   156a4:	add	r0, sp, #64	; 0x40
   156a8:	bl	1bed8 <__assert_fail@plt+0xa9c0>
   156ac:	cmp	r0, #0
   156b0:	bne	15cd4 <__assert_fail@plt+0x47bc>
   156b4:	ldr	r0, [sp, #48]	; 0x30
   156b8:	cmp	r0, #1
   156bc:	bhi	156cc <__assert_fail@plt+0x41b4>
   156c0:	ldrb	r0, [r8, #88]	; 0x58
   156c4:	tst	r0, #2
   156c8:	beq	156f4 <__assert_fail@plt+0x41dc>
   156cc:	mov	r9, #12
   156d0:	ldr	r0, [sp, #100]	; 0x64
   156d4:	cmn	r0, #-1073741822	; 0xc0000002
   156d8:	bhi	15aa4 <__assert_fail@plt+0x458c>
   156dc:	mov	r1, #4
   156e0:	add	r0, r1, r0, lsl #2
   156e4:	bl	22624 <__assert_fail@plt+0x1110c>
   156e8:	str	r0, [sp, #164]	; 0xa4
   156ec:	cmp	r0, #0
   156f0:	beq	15aa4 <__assert_fail@plt+0x458c>
   156f4:	str	r4, [sp, #16]
   156f8:	ldr	r4, [sp, #44]	; 0x2c
   156fc:	str	r4, [fp, #-36]	; 0xffffffdc
   15700:	mov	r0, #4
   15704:	ldr	r1, [fp, #24]
   15708:	tst	r1, #1
   1570c:	mov	r1, #4
   15710:	movweq	r1, #6
   15714:	str	r1, [sp, #124]	; 0x7c
   15718:	cmp	r6, r4
   1571c:	mov	lr, #1
   15720:	mvnlt	lr, #0
   15724:	mov	r1, r8
   15728:	mov	r8, r6
   1572c:	movlt	r8, r4
   15730:	mov	sl, r4
   15734:	movlt	sl, r6
   15738:	str	r1, [sp, #52]	; 0x34
   1573c:	ldr	ip, [r1, #92]	; 0x5c
   15740:	cmp	r5, #0
   15744:	beq	15790 <__assert_fail@plt+0x4278>
   15748:	cmp	ip, #1
   1574c:	ldr	r2, [sp, #60]	; 0x3c
   15750:	ldr	r3, [sp, #56]	; 0x38
   15754:	beq	15774 <__assert_fail@plt+0x425c>
   15758:	ldr	r0, [sp, #32]
   1575c:	ldr	r0, [r0, #12]
   15760:	and	r0, r0, #4194304	; 0x400000
   15764:	orr	r0, r3, r0
   15768:	clz	r0, r0
   1576c:	lsr	r0, r0, #5
   15770:	lsl	r0, r0, #2
   15774:	cmp	r3, #0
   15778:	mov	r1, r3
   1577c:	movwne	r1, #1
   15780:	cmp	r6, r4
   15784:	orrge	r1, r1, #2
   15788:	orr	r0, r1, r0
   1578c:	b	1579c <__assert_fail@plt+0x4284>
   15790:	mov	r0, #8
   15794:	ldr	r2, [sp, #60]	; 0x3c
   15798:	ldr	r3, [sp, #56]	; 0x38
   1579c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   157a0:	cmp	r1, sl
   157a4:	cmpge	r8, r1
   157a8:	blt	15a9c <__assert_fail@plt+0x4584>
   157ac:	sub	r1, fp, #36	; 0x24
   157b0:	cmp	r6, r4
   157b4:	movwlt	r1, #0
   157b8:	str	r1, [sp, #28]
   157bc:	sub	r4, r0, #4
   157c0:	add	r9, sp, #64	; 0x40
   157c4:	str	ip, [sp, #44]	; 0x2c
   157c8:	str	lr, [sp, #24]
   157cc:	str	r4, [sp, #20]
   157d0:	cmp	r4, #4
   157d4:	bhi	15838 <__assert_fail@plt+0x4320>
   157d8:	add	r0, pc, #0
   157dc:	ldr	pc, [r0, r4, lsl #2]
   157e0:	strdeq	r5, [r1], -r4
   157e4:	strdeq	r5, [r1], -r4
   157e8:			; <UNDEFINED> instruction: 0x000158bc
   157ec:	andeq	r5, r1, ip, ror #17
   157f0:	andeq	r5, r1, r8, lsr #18
   157f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   157f8:	cmp	r0, sl
   157fc:	blt	15a9c <__assert_fail@plt+0x4584>
   15800:	mov	r1, #0
   15804:	cmp	r0, r2
   15808:	ldrblt	r1, [r7, r0]
   1580c:	cmp	r3, #0
   15810:	ldrbne	r1, [r3, r1]
   15814:	ldrb	r1, [r5, r1]
   15818:	cmp	r1, #0
   1581c:	bne	15928 <__assert_fail@plt+0x4410>
   15820:	sub	r1, r0, #1
   15824:	str	r1, [fp, #-36]	; 0xffffffdc
   15828:	cmp	r0, sl
   1582c:	mov	r0, r1
   15830:	bgt	15800 <__assert_fail@plt+0x42e8>
   15834:	b	15a9c <__assert_fail@plt+0x4584>
   15838:	ldr	r0, [sp, #88]	; 0x58
   1583c:	ldr	r2, [sp, #96]	; 0x60
   15840:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15844:	sub	r0, r1, r0
   15848:	cmp	r0, r2
   1584c:	bcs	15890 <__assert_fail@plt+0x4378>
   15850:	mov	r1, #0
   15854:	ldr	r2, [sp, #92]	; 0x5c
   15858:	cmp	r0, r2
   1585c:	ldrcc	r1, [sp, #68]	; 0x44
   15860:	ldrbcc	r1, [r1, r0]
   15864:	ldrb	r0, [r5, r1]
   15868:	cmp	r0, #0
   1586c:	bne	15928 <__assert_fail@plt+0x4410>
   15870:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15874:	add	r0, r0, lr
   15878:	str	r0, [fp, #-36]	; 0xffffffdc
   1587c:	cmp	r0, sl
   15880:	blt	15a9c <__assert_fail@plt+0x4584>
   15884:	cmp	r0, r8
   15888:	ble	15838 <__assert_fail@plt+0x4320>
   1588c:	b	15a9c <__assert_fail@plt+0x4584>
   15890:	mov	r0, r9
   15894:	ldr	r2, [fp, #24]
   15898:	bl	1bf60 <__assert_fail@plt+0xaa48>
   1589c:	cmp	r0, #0
   158a0:	bne	15cdc <__assert_fail@plt+0x47c4>
   158a4:	ldr	r0, [sp, #88]	; 0x58
   158a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   158ac:	sub	r0, r1, r0
   158b0:	add	r9, sp, #64	; 0x40
   158b4:	ldr	lr, [sp, #24]
   158b8:	b	15850 <__assert_fail@plt+0x4338>
   158bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   158c0:	cmp	r0, r8
   158c4:	bge	1591c <__assert_fail@plt+0x4404>
   158c8:	ldrb	r1, [r7, r0]
   158cc:	ldrb	r1, [r5, r1]
   158d0:	cmp	r1, #0
   158d4:	bne	1591c <__assert_fail@plt+0x4404>
   158d8:	add	r0, r0, #1
   158dc:	str	r0, [fp, #-36]	; 0xffffffdc
   158e0:	cmp	r0, r8
   158e4:	blt	158c8 <__assert_fail@plt+0x43b0>
   158e8:	b	1591c <__assert_fail@plt+0x4404>
   158ec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   158f0:	cmp	r0, r8
   158f4:	bge	1591c <__assert_fail@plt+0x4404>
   158f8:	ldrb	r1, [r7, r0]
   158fc:	ldrb	r1, [r3, r1]
   15900:	ldrb	r1, [r5, r1]
   15904:	cmp	r1, #0
   15908:	bne	1591c <__assert_fail@plt+0x4404>
   1590c:	add	r0, r0, #1
   15910:	str	r0, [fp, #-36]	; 0xffffffdc
   15914:	cmp	r0, r8
   15918:	blt	158f8 <__assert_fail@plt+0x43e0>
   1591c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15920:	cmp	r1, r8
   15924:	beq	15a7c <__assert_fail@plt+0x4564>
   15928:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1592c:	mov	r0, r9
   15930:	ldr	r2, [fp, #24]
   15934:	bl	1bf60 <__assert_fail@plt+0xaa48>
   15938:	cmp	r0, #0
   1593c:	bne	15cdc <__assert_fail@plt+0x47c4>
   15940:	ldr	r0, [sp, #44]	; 0x2c
   15944:	cmp	r0, #1
   15948:	add	r9, sp, #64	; 0x40
   1594c:	ldrne	r0, [sp, #92]	; 0x5c
   15950:	cmpne	r0, #0
   15954:	bne	159d8 <__assert_fail@plt+0x44c0>
   15958:	mov	r0, #0
   1595c:	str	r0, [sp, #172]	; 0xac
   15960:	str	r0, [sp, #184]	; 0xb8
   15964:	str	r0, [sp, #168]	; 0xa8
   15968:	mov	r0, r9
   1596c:	ldr	r1, [sp, #40]	; 0x28
   15970:	ldr	r2, [sp, #28]
   15974:	bl	1c58c <__assert_fail@plt+0xb074>
   15978:	cmn	r0, #1
   1597c:	mov	r4, r9
   15980:	beq	15a40 <__assert_fail@plt+0x4528>
   15984:	mov	r2, r0
   15988:	cmn	r0, #2
   1598c:	beq	15ce4 <__assert_fail@plt+0x47cc>
   15990:	str	r2, [sp, #156]	; 0x9c
   15994:	ldr	r0, [sp, #48]	; 0x30
   15998:	cmp	r0, #2
   1599c:	bcc	159ec <__assert_fail@plt+0x44d4>
   159a0:	ldr	r0, [sp, #32]
   159a4:	ldrb	r0, [r0, #28]
   159a8:	ands	r0, r0, #16
   159ac:	bne	159ec <__assert_fail@plt+0x44d4>
   159b0:	ldr	r0, [sp, #164]	; 0xa4
   159b4:	ldr	r1, [r0, r2, lsl #2]
   159b8:	add	r0, sp, #64	; 0x40
   159bc:	bl	1c900 <__assert_fail@plt+0xb3e8>
   159c0:	str	r0, [sp, #160]	; 0xa0
   159c4:	ldr	r0, [sp, #52]	; 0x34
   159c8:	ldrb	r0, [r0, #88]	; 0x58
   159cc:	tst	r0, #1
   159d0:	beq	15a10 <__assert_fail@plt+0x44f8>
   159d4:	b	15a20 <__assert_fail@plt+0x4508>
   159d8:	ldr	r0, [sp, #72]	; 0x48
   159dc:	ldr	r0, [r0]
   159e0:	cmn	r0, #1
   159e4:	bne	15958 <__assert_fail@plt+0x4440>
   159e8:	b	15a4c <__assert_fail@plt+0x4534>
   159ec:	ldr	r0, [sp, #52]	; 0x34
   159f0:	ldr	r0, [r0, #76]	; 0x4c
   159f4:	cmp	r0, #0
   159f8:	beq	15ad0 <__assert_fail@plt+0x45b8>
   159fc:	ldr	r0, [sp, #164]	; 0xa4
   15a00:	ldr	r1, [r0, r2, lsl #2]
   15a04:	add	r0, sp, #64	; 0x40
   15a08:	bl	1c900 <__assert_fail@plt+0xb3e8>
   15a0c:	str	r0, [sp, #160]	; 0xa0
   15a10:	ldr	r0, [sp, #52]	; 0x34
   15a14:	ldr	r0, [r0, #76]	; 0x4c
   15a18:	cmp	r0, #0
   15a1c:	beq	15ad0 <__assert_fail@plt+0x45b8>
   15a20:	add	r0, sp, #64	; 0x40
   15a24:	bl	1c978 <__assert_fail@plt+0xb460>
   15a28:	cmp	r0, #0
   15a2c:	beq	15ad0 <__assert_fail@plt+0x45b8>
   15a30:	mov	r9, r0
   15a34:	cmp	r0, #1
   15a38:	add	r4, sp, #64	; 0x40
   15a3c:	bne	15aa0 <__assert_fail@plt+0x4588>
   15a40:	mov	r0, r4
   15a44:	bl	1cb98 <__assert_fail@plt+0xb680>
   15a48:	mov	r9, r4
   15a4c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15a50:	ldr	lr, [sp, #24]
   15a54:	add	r0, r0, lr
   15a58:	str	r0, [fp, #-36]	; 0xffffffdc
   15a5c:	cmp	r0, sl
   15a60:	blt	15a9c <__assert_fail@plt+0x4584>
   15a64:	cmp	r8, r0
   15a68:	ldr	r2, [sp, #60]	; 0x3c
   15a6c:	ldr	r4, [sp, #20]
   15a70:	ldr	r3, [sp, #56]	; 0x38
   15a74:	bge	157d0 <__assert_fail@plt+0x42b8>
   15a78:	b	15a9c <__assert_fail@plt+0x4584>
   15a7c:	mov	r0, #0
   15a80:	cmp	r1, r2
   15a84:	ldrblt	r0, [r7, r1]
   15a88:	cmp	r3, #0
   15a8c:	ldrbne	r0, [r3, r0]
   15a90:	ldrb	r0, [r5, r0]
   15a94:	cmp	r0, #0
   15a98:	bne	15928 <__assert_fail@plt+0x4410>
   15a9c:	mov	r9, #1
   15aa0:	ldr	r8, [sp, #52]	; 0x34
   15aa4:	ldr	r0, [sp, #164]	; 0xa4
   15aa8:	bl	22b14 <__assert_fail@plt+0x115fc>
   15aac:	ldr	r0, [r8, #76]	; 0x4c
   15ab0:	cmp	r0, #0
   15ab4:	addne	r0, sp, #64	; 0x40
   15ab8:	blne	1cec0 <__assert_fail@plt+0xb9a8>
   15abc:	add	r0, sp, #64	; 0x40
   15ac0:	bl	16508 <__assert_fail@plt+0x4ff0>
   15ac4:	mov	r0, r9
   15ac8:	sub	sp, fp, #28
   15acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ad0:	ldr	sl, [sp, #48]	; 0x30
   15ad4:	cmp	sl, #0
   15ad8:	beq	15bcc <__assert_fail@plt+0x46b4>
   15adc:	cmp	sl, #1
   15ae0:	ldr	r8, [sp, #52]	; 0x34
   15ae4:	ldr	r6, [sp, #16]
   15ae8:	ldr	r4, [fp, #16]
   15aec:	beq	15b0c <__assert_fail@plt+0x45f4>
   15af0:	mvn	r0, r6
   15af4:	add	r0, r0, r4
   15af8:	lsl	r2, r0, #3
   15afc:	ldr	r0, [fp, #20]
   15b00:	add	r0, r0, #8
   15b04:	mov	r1, #255	; 0xff
   15b08:	bl	11428 <memset@plt>
   15b0c:	mov	r0, #0
   15b10:	ldr	r1, [sp, #156]	; 0x9c
   15b14:	ldr	r2, [fp, #20]
   15b18:	stm	r2, {r0, r1}
   15b1c:	cmp	sl, #2
   15b20:	bcc	15b74 <__assert_fail@plt+0x465c>
   15b24:	ldr	r0, [sp, #32]
   15b28:	ldrb	r0, [r0, #28]
   15b2c:	ands	r0, r0, #16
   15b30:	bne	15b74 <__assert_fail@plt+0x465c>
   15b34:	ldrb	r1, [r8, #88]	; 0x58
   15b38:	mov	r0, #0
   15b3c:	tst	r1, #1
   15b40:	beq	15b54 <__assert_fail@plt+0x463c>
   15b44:	ldr	r1, [r8, #76]	; 0x4c
   15b48:	mov	r0, #0
   15b4c:	cmp	r1, #0
   15b50:	movwgt	r0, #1
   15b54:	str	r0, [sp]
   15b58:	add	r1, sp, #64	; 0x40
   15b5c:	ldr	r0, [sp, #32]
   15b60:	mov	r2, sl
   15b64:	ldr	r3, [fp, #20]
   15b68:	bl	1cc40 <__assert_fail@plt+0xb728>
   15b6c:	cmp	r0, #0
   15b70:	bne	15cd4 <__assert_fail@plt+0x47bc>
   15b74:	ldr	r0, [fp, #20]
   15b78:	add	r0, r0, #4
   15b7c:	add	r1, sp, #64	; 0x40
   15b80:	add	lr, r1, #32
   15b84:	ldrb	r2, [sp, #140]	; 0x8c
   15b88:	mov	r3, r4
   15b8c:	b	15c18 <__assert_fail@plt+0x4700>
   15b90:	ldr	r1, [r3, #8]
   15b94:	cmp	r1, #0
   15b98:	beq	15ba8 <__assert_fail@plt+0x4690>
   15b9c:	ldrsb	r1, [sl, #28]
   15ba0:	cmp	r1, #0
   15ba4:	blt	15610 <__assert_fail@plt+0x40f8>
   15ba8:	mov	r6, #0
   15bac:	ldr	r0, [sp, #44]	; 0x2c
   15bb0:	cmp	r0, #0
   15bb4:	beq	15bd4 <__assert_fail@plt+0x46bc>
   15bb8:	cmp	ip, #0
   15bbc:	mov	r0, #0
   15bc0:	str	r0, [sp, #44]	; 0x2c
   15bc4:	bne	15ac4 <__assert_fail@plt+0x45ac>
   15bc8:	b	15614 <__assert_fail@plt+0x40fc>
   15bcc:	mov	r9, #0
   15bd0:	b	15aa0 <__assert_fail@plt+0x4588>
   15bd4:	mov	r0, #0
   15bd8:	str	r0, [sp, #44]	; 0x2c
   15bdc:	b	15614 <__assert_fail@plt+0x40fc>
   15be0:	ldr	ip, [sp, #76]	; 0x4c
   15be4:	ldr	r5, [sp, #92]	; 0x5c
   15be8:	cmp	r7, r5
   15bec:	mov	r1, lr
   15bf0:	addne	r1, ip, r7, lsl #2
   15bf4:	ldr	r1, [r1]
   15bf8:	str	r1, [r0, #-4]
   15bfc:	ldr	r1, [r0]
   15c00:	cmp	r1, r5
   15c04:	mov	r4, lr
   15c08:	addne	r4, ip, r1, lsl #2
   15c0c:	ldr	r1, [r4]
   15c10:	str	r1, [r0]
   15c14:	b	15c2c <__assert_fail@plt+0x4714>
   15c18:	ldr	r7, [r0, #-4]
   15c1c:	cmn	r7, #1
   15c20:	beq	15c40 <__assert_fail@plt+0x4728>
   15c24:	cmp	r2, #0
   15c28:	bne	15be0 <__assert_fail@plt+0x46c8>
   15c2c:	ldmda	r0, {r1, r7}
   15c30:	ldr	r5, [fp, #-36]	; 0xffffffdc
   15c34:	add	r1, r1, r5
   15c38:	add	r7, r7, r5
   15c3c:	stmda	r0, {r1, r7}
   15c40:	add	r0, r0, #8
   15c44:	sub	r3, r3, #1
   15c48:	cmp	r6, r3
   15c4c:	bne	15c18 <__assert_fail@plt+0x4700>
   15c50:	cmp	r6, #0
   15c54:	ldr	r4, [fp, #20]
   15c58:	ble	15c6c <__assert_fail@plt+0x4754>
   15c5c:	add	r0, r4, sl, lsl #3
   15c60:	lsl	r2, r6, #3
   15c64:	mov	r1, #255	; 0xff
   15c68:	bl	11428 <memset@plt>
   15c6c:	ldr	r0, [r8, #132]	; 0x84
   15c70:	mov	r9, #0
   15c74:	cmp	r0, #0
   15c78:	beq	15aa4 <__assert_fail@plt+0x458c>
   15c7c:	cmp	sl, #2
   15c80:	bcc	15aa4 <__assert_fail@plt+0x458c>
   15c84:	ldr	r1, [fp, #16]
   15c88:	sub	r1, r1, #1
   15c8c:	sub	r1, r1, r6
   15c90:	mov	r2, #0
   15c94:	ldr	r3, [r0, r2, lsl #2]
   15c98:	cmp	r2, r3
   15c9c:	beq	15cc0 <__assert_fail@plt+0x47a8>
   15ca0:	add	r7, r4, r2, lsl #3
   15ca4:	add	r3, r4, r3, lsl #3
   15ca8:	ldr	r3, [r3, #8]
   15cac:	str	r3, [r7, #8]
   15cb0:	ldr	r3, [r0, r2, lsl #2]
   15cb4:	add	r3, r4, r3, lsl #3
   15cb8:	ldr	r3, [r3, #12]
   15cbc:	str	r3, [r7, #12]
   15cc0:	add	r2, r2, #1
   15cc4:	cmp	r1, r2
   15cc8:	bne	15c94 <__assert_fail@plt+0x477c>
   15ccc:	mov	r9, #0
   15cd0:	b	15aa4 <__assert_fail@plt+0x458c>
   15cd4:	mov	r9, r0
   15cd8:	b	15aa4 <__assert_fail@plt+0x458c>
   15cdc:	mov	r9, r0
   15ce0:	b	15aa0 <__assert_fail@plt+0x4588>
   15ce4:	mov	r9, #12
   15ce8:	b	15aa0 <__assert_fail@plt+0x4588>
   15cec:	push	{fp, lr}
   15cf0:	mov	fp, sp
   15cf4:	sub	sp, sp, #16
   15cf8:	mov	ip, #1
   15cfc:	str	ip, [sp, #12]
   15d00:	str	r2, [sp, #4]
   15d04:	mov	ip, #0
   15d08:	str	ip, [sp]
   15d0c:	ldr	ip, [fp, #8]
   15d10:	str	ip, [sp, #8]
   15d14:	bl	15d20 <__assert_fail@plt+0x4808>
   15d18:	mov	sp, fp
   15d1c:	pop	{fp, pc}
   15d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d24:	add	fp, sp, #28
   15d28:	sub	sp, sp, #36	; 0x24
   15d2c:	mvn	r7, #0
   15d30:	cmp	r3, #0
   15d34:	blt	15ed0 <__assert_fail@plt+0x49b8>
   15d38:	mov	r9, r3
   15d3c:	mov	r8, r2
   15d40:	cmp	r3, r2
   15d44:	bgt	15ed0 <__assert_fail@plt+0x49b8>
   15d48:	mov	r5, r0
   15d4c:	str	r1, [sp, #28]
   15d50:	ldr	r0, [fp, #8]
   15d54:	add	r0, r0, r9
   15d58:	ldr	r4, [r5]
   15d5c:	cmp	r0, r8
   15d60:	mov	r6, r8
   15d64:	bicle	r6, r0, r0, asr #31
   15d68:	movw	r0, #0
   15d6c:	movt	r0, #0
   15d70:	movw	r1, #0
   15d74:	movt	r1, #0
   15d78:	orrs	r0, r1, r0
   15d7c:	str	r0, [sp, #32]
   15d80:	beq	15d8c <__assert_fail@plt+0x4874>
   15d84:	add	r0, r4, #136	; 0x88
   15d88:	bl	11290 <pthread_mutex_lock@plt>
   15d8c:	str	r4, [sp, #20]
   15d90:	ldr	r4, [fp, #16]
   15d94:	ldrb	r0, [r5, #28]
   15d98:	ubfx	r1, r0, #5, #2
   15d9c:	str	r1, [sp, #24]
   15da0:	cmp	r6, r9
   15da4:	ble	15dc0 <__assert_fail@plt+0x48a8>
   15da8:	tst	r0, #8
   15dac:	bne	15dc0 <__assert_fail@plt+0x48a8>
   15db0:	ldr	r0, [r5, #16]
   15db4:	cmp	r0, #0
   15db8:	movne	r0, r5
   15dbc:	blne	14ca8 <__assert_fail@plt+0x3790>
   15dc0:	mov	r7, #1
   15dc4:	mov	sl, #0
   15dc8:	cmp	r4, #0
   15dcc:	beq	15e04 <__assert_fail@plt+0x48ec>
   15dd0:	ldrb	r0, [r5, #28]
   15dd4:	ands	r1, r0, #16
   15dd8:	bne	15e04 <__assert_fail@plt+0x48ec>
   15ddc:	and	r0, r0, #6
   15de0:	cmp	r0, #4
   15de4:	bne	15df8 <__assert_fail@plt+0x48e0>
   15de8:	ldr	r7, [r4]
   15dec:	ldr	r0, [r5, #24]
   15df0:	cmp	r7, r0
   15df4:	bls	15ef0 <__assert_fail@plt+0x49d8>
   15df8:	ldr	r0, [r5, #24]
   15dfc:	add	r7, r0, #1
   15e00:	mov	sl, r4
   15e04:	lsl	r0, r7, #3
   15e08:	bl	22624 <__assert_fail@plt+0x1110c>
   15e0c:	cmp	r0, #0
   15e10:	beq	15edc <__assert_fail@plt+0x49c4>
   15e14:	mov	r4, r0
   15e18:	ldr	r0, [fp, #12]
   15e1c:	str	r6, [sp]
   15e20:	stmib	sp, {r0, r7}
   15e24:	str	r4, [sp, #12]
   15e28:	ldr	r0, [sp, #24]
   15e2c:	str	r0, [sp, #16]
   15e30:	mov	r0, r5
   15e34:	ldr	r1, [sp, #28]
   15e38:	mov	r2, r8
   15e3c:	mov	r3, r9
   15e40:	bl	15540 <__assert_fail@plt+0x4028>
   15e44:	cmp	r0, #0
   15e48:	beq	15e5c <__assert_fail@plt+0x4944>
   15e4c:	mvn	r7, #1
   15e50:	cmp	r0, #1
   15e54:	mvneq	r7, #0
   15e58:	b	15eb0 <__assert_fail@plt+0x4998>
   15e5c:	cmp	sl, #0
   15e60:	beq	15e94 <__assert_fail@plt+0x497c>
   15e64:	ldrb	r0, [r5, #28]
   15e68:	ubfx	r3, r0, #1, #2
   15e6c:	mov	r0, sl
   15e70:	mov	r1, r4
   15e74:	mov	r2, r7
   15e78:	bl	1bcd0 <__assert_fail@plt+0xa7b8>
   15e7c:	ldrb	r1, [r5, #28]
   15e80:	and	r1, r1, #249	; 0xf9
   15e84:	bfi	r1, r0, #1, #2
   15e88:	strb	r1, [r5, #28]
   15e8c:	tst	r0, #3
   15e90:	beq	15eac <__assert_fail@plt+0x4994>
   15e94:	ldr	r0, [fp, #20]
   15e98:	cmp	r0, #0
   15e9c:	ldreq	r7, [r4]
   15ea0:	ldrne	r0, [r4, #4]
   15ea4:	subne	r7, r0, r9
   15ea8:	b	15eb0 <__assert_fail@plt+0x4998>
   15eac:	mvn	r7, #1
   15eb0:	ldr	r5, [sp, #32]
   15eb4:	mov	r0, r4
   15eb8:	bl	22b14 <__assert_fail@plt+0x115fc>
   15ebc:	cmp	r5, #0
   15ec0:	beq	15ed0 <__assert_fail@plt+0x49b8>
   15ec4:	ldr	r0, [sp, #20]
   15ec8:	add	r0, r0, #136	; 0x88
   15ecc:	bl	111f4 <pthread_mutex_unlock@plt>
   15ed0:	mov	r0, r7
   15ed4:	sub	sp, fp, #28
   15ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15edc:	mvn	r7, #1
   15ee0:	ldr	r5, [sp, #32]
   15ee4:	cmp	r5, #0
   15ee8:	bne	15ec4 <__assert_fail@plt+0x49ac>
   15eec:	b	15ed0 <__assert_fail@plt+0x49b8>
   15ef0:	cmp	r7, #1
   15ef4:	movwlt	r4, #0
   15ef8:	movwlt	r7, #1
   15efc:	b	15e00 <__assert_fail@plt+0x48e8>
   15f00:	push	{fp, lr}
   15f04:	mov	fp, sp
   15f08:	sub	sp, sp, #16
   15f0c:	mov	ip, #0
   15f10:	str	ip, [sp, #12]
   15f14:	str	r2, [sp, #4]
   15f18:	ldr	ip, [fp, #12]
   15f1c:	str	ip, [sp, #8]
   15f20:	ldr	ip, [fp, #8]
   15f24:	str	ip, [sp]
   15f28:	bl	15d20 <__assert_fail@plt+0x4808>
   15f2c:	mov	sp, fp
   15f30:	pop	{fp, pc}
   15f34:	push	{fp, lr}
   15f38:	mov	fp, sp
   15f3c:	sub	sp, sp, #24
   15f40:	mov	ip, #1
   15f44:	str	ip, [sp, #20]
   15f48:	mov	ip, #0
   15f4c:	str	ip, [sp, #8]
   15f50:	ldr	ip, [fp, #20]
   15f54:	str	ip, [sp, #16]
   15f58:	ldr	ip, [fp, #16]
   15f5c:	str	ip, [sp, #12]
   15f60:	ldr	ip, [fp, #12]
   15f64:	str	ip, [sp, #4]
   15f68:	ldr	ip, [fp, #8]
   15f6c:	str	ip, [sp]
   15f70:	bl	15f7c <__assert_fail@plt+0x4a64>
   15f74:	mov	sp, fp
   15f78:	pop	{fp, pc}
   15f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f80:	add	fp, sp, #28
   15f84:	sub	sp, sp, #20
   15f88:	mov	r6, r2
   15f8c:	mov	r8, r1
   15f90:	mov	r1, r0
   15f94:	ldr	r4, [fp, #8]
   15f98:	orr	r0, r4, r2
   15f9c:	ldr	r2, [fp, #24]
   15fa0:	orr	r0, r0, r2
   15fa4:	cmp	r0, #0
   15fa8:	blt	1605c <__assert_fail@plt+0x4b44>
   15fac:	adds	sl, r6, r4
   15fb0:	bvs	1605c <__assert_fail@plt+0x4b44>
   15fb4:	mov	r5, #0
   15fb8:	cmp	r4, #1
   15fbc:	blt	16010 <__assert_fail@plt+0x4af8>
   15fc0:	mov	r9, r3
   15fc4:	cmp	r6, #1
   15fc8:	blt	16018 <__assert_fail@plt+0x4b00>
   15fcc:	mov	r0, sl
   15fd0:	mov	r5, r1
   15fd4:	bl	22624 <__assert_fail@plt+0x1110c>
   15fd8:	cmp	r0, #0
   15fdc:	beq	1605c <__assert_fail@plt+0x4b44>
   15fe0:	mov	r7, r0
   15fe4:	mov	r1, r8
   15fe8:	mov	r2, r6
   15fec:	bl	112a8 <memcpy@plt>
   15ff0:	add	r0, r7, r6
   15ff4:	mov	r1, r9
   15ff8:	mov	r2, r4
   15ffc:	bl	112a8 <memcpy@plt>
   16000:	ldr	r2, [fp, #24]
   16004:	mov	r1, r5
   16008:	mov	r5, r7
   1600c:	b	1601c <__assert_fail@plt+0x4b04>
   16010:	mov	r7, r8
   16014:	b	1601c <__assert_fail@plt+0x4b04>
   16018:	mov	r7, r9
   1601c:	ldr	r0, [fp, #28]
   16020:	add	r6, fp, #12
   16024:	ldm	r6, {r3, r4, r6}
   16028:	str	r4, [sp]
   1602c:	stmib	sp, {r2, r6}
   16030:	str	r0, [sp, #12]
   16034:	mov	r0, r1
   16038:	mov	r1, r7
   1603c:	mov	r2, sl
   16040:	bl	15d20 <__assert_fail@plt+0x4808>
   16044:	mov	r4, r0
   16048:	mov	r0, r5
   1604c:	bl	22b14 <__assert_fail@plt+0x115fc>
   16050:	mov	r0, r4
   16054:	sub	sp, fp, #28
   16058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1605c:	mvn	r0, #1
   16060:	sub	sp, fp, #28
   16064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16068:	push	{fp, lr}
   1606c:	mov	fp, sp
   16070:	sub	sp, sp, #24
   16074:	mov	ip, #0
   16078:	str	ip, [sp, #20]
   1607c:	ldr	ip, [fp, #24]
   16080:	str	ip, [sp, #16]
   16084:	ldr	ip, [fp, #20]
   16088:	str	ip, [sp, #12]
   1608c:	ldr	ip, [fp, #16]
   16090:	str	ip, [sp, #8]
   16094:	ldr	ip, [fp, #12]
   16098:	str	ip, [sp, #4]
   1609c:	ldr	ip, [fp, #8]
   160a0:	str	ip, [sp]
   160a4:	bl	15f7c <__assert_fail@plt+0x4a64>
   160a8:	mov	sp, fp
   160ac:	pop	{fp, pc}
   160b0:	ldrb	ip, [r0, #28]
   160b4:	bic	ip, ip, #6
   160b8:	cmp	r2, #0
   160bc:	beq	160dc <__assert_fail@plt+0x4bc4>
   160c0:	push	{fp, lr}
   160c4:	mov	fp, sp
   160c8:	ldr	lr, [fp, #8]
   160cc:	orr	ip, ip, #2
   160d0:	strb	ip, [r0, #28]
   160d4:	stm	r1, {r2, r3, lr}
   160d8:	pop	{fp, pc}
   160dc:	strb	ip, [r0, #28]
   160e0:	mov	r0, #0
   160e4:	str	r0, [r1]
   160e8:	str	r0, [r1, #4]
   160ec:	str	r0, [r1, #8]
   160f0:	bx	lr
   160f4:	ldr	r1, [r0, #4]
   160f8:	movw	r2, #255	; 0xff
   160fc:	movt	r2, #4
   16100:	and	r1, r1, r2
   16104:	cmp	r1, #6
   16108:	bne	16114 <__assert_fail@plt+0x4bfc>
   1610c:	ldr	r0, [r0]
   16110:	b	16184 <__assert_fail@plt+0x4c6c>
   16114:	cmp	r1, #3
   16118:	bxne	lr
   1611c:	ldr	r0, [r0]
   16120:	b	22b14 <__assert_fail@plt+0x115fc>
   16124:	push	{r4, sl, fp, lr}
   16128:	add	fp, sp, #8
   1612c:	mov	r4, r0
   16130:	ldr	r0, [r0, #24]
   16134:	bl	22b14 <__assert_fail@plt+0x115fc>
   16138:	ldr	r0, [r4, #36]	; 0x24
   1613c:	bl	22b14 <__assert_fail@plt+0x115fc>
   16140:	ldr	r0, [r4, #40]	; 0x28
   16144:	add	r1, r4, #4
   16148:	cmp	r0, r1
   1614c:	beq	16160 <__assert_fail@plt+0x4c48>
   16150:	ldr	r0, [r0, #8]
   16154:	bl	22b14 <__assert_fail@plt+0x115fc>
   16158:	ldr	r0, [r4, #40]	; 0x28
   1615c:	bl	22b14 <__assert_fail@plt+0x115fc>
   16160:	ldr	r0, [r4, #12]
   16164:	bl	22b14 <__assert_fail@plt+0x115fc>
   16168:	ldr	r0, [r4, #48]	; 0x30
   1616c:	bl	22b14 <__assert_fail@plt+0x115fc>
   16170:	ldr	r0, [r4, #44]	; 0x2c
   16174:	bl	22b14 <__assert_fail@plt+0x115fc>
   16178:	mov	r0, r4
   1617c:	pop	{r4, sl, fp, lr}
   16180:	b	22b14 <__assert_fail@plt+0x115fc>
   16184:	push	{r4, sl, fp, lr}
   16188:	add	fp, sp, #8
   1618c:	mov	r4, r0
   16190:	ldr	r0, [r0]
   16194:	bl	22b14 <__assert_fail@plt+0x115fc>
   16198:	ldr	r0, [r4, #4]
   1619c:	bl	22b14 <__assert_fail@plt+0x115fc>
   161a0:	ldr	r0, [r4, #8]
   161a4:	bl	22b14 <__assert_fail@plt+0x115fc>
   161a8:	ldr	r0, [r4, #12]
   161ac:	bl	22b14 <__assert_fail@plt+0x115fc>
   161b0:	mov	r0, r4
   161b4:	pop	{r4, sl, fp, lr}
   161b8:	b	22b14 <__assert_fail@plt+0x115fc>
   161bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   161c0:	add	fp, sp, #24
   161c4:	mov	r5, r1
   161c8:	mov	r9, r0
   161cc:	mov	r1, #0
   161d0:	mov	r2, #160	; 0xa0
   161d4:	bl	11428 <memset@plt>
   161d8:	mov	r0, #31
   161dc:	str	r0, [r9, #64]	; 0x40
   161e0:	movw	r0, #43689	; 0xaaa9
   161e4:	movt	r0, #2730	; 0xaaa
   161e8:	cmp	r5, r0
   161ec:	bhi	16360 <__assert_fail@plt+0x4e48>
   161f0:	add	r0, r5, #1
   161f4:	str	r0, [r9, #4]
   161f8:	lsl	r0, r0, #3
   161fc:	bl	22624 <__assert_fail@plt+0x1110c>
   16200:	str	r0, [r9]
   16204:	mov	r0, #1
   16208:	mov	r6, r0
   1620c:	lsl	r0, r0, #1
   16210:	cmp	r6, r5
   16214:	bls	16208 <__assert_fail@plt+0x4cf0>
   16218:	mov	r0, #12
   1621c:	mov	r1, r6
   16220:	bl	225d0 <__assert_fail@plt+0x110b8>
   16224:	str	r0, [r9, #32]
   16228:	sub	r0, r6, #1
   1622c:	str	r0, [r9, #68]	; 0x44
   16230:	bl	1135c <__ctype_get_mb_cur_max@plt>
   16234:	str	r0, [r9, #92]	; 0x5c
   16238:	mov	r0, #14
   1623c:	bl	114ac <nl_langinfo@plt>
   16240:	ldrb	r1, [r0]
   16244:	orr	r1, r1, #32
   16248:	cmp	r1, #117	; 0x75
   1624c:	bne	16298 <__assert_fail@plt+0x4d80>
   16250:	ldrb	r1, [r0, #1]
   16254:	orr	r1, r1, #32
   16258:	cmp	r1, #116	; 0x74
   1625c:	bne	16298 <__assert_fail@plt+0x4d80>
   16260:	ldrb	r1, [r0, #2]
   16264:	orr	r1, r1, #32
   16268:	cmp	r1, #102	; 0x66
   1626c:	bne	16298 <__assert_fail@plt+0x4d80>
   16270:	ldrb	r1, [r0, #3]!
   16274:	cmp	r1, #45	; 0x2d
   16278:	addeq	r0, r0, #1
   1627c:	movw	r1, #16148	; 0x3f14
   16280:	movt	r1, #2
   16284:	bl	11248 <strcmp@plt>
   16288:	cmp	r0, #0
   1628c:	ldrbeq	r0, [r9, #88]	; 0x58
   16290:	orreq	r0, r0, #4
   16294:	strbeq	r0, [r9, #88]	; 0x58
   16298:	ldrb	r0, [r9, #88]	; 0x58
   1629c:	and	r1, r0, #247	; 0xf7
   162a0:	strb	r1, [r9, #88]	; 0x58
   162a4:	ldr	r1, [r9, #92]	; 0x5c
   162a8:	cmp	r1, #2
   162ac:	blt	16344 <__assert_fail@plt+0x4e2c>
   162b0:	tst	r0, #4
   162b4:	bne	16338 <__assert_fail@plt+0x4e20>
   162b8:	mov	r8, #1
   162bc:	mov	r0, #32
   162c0:	mov	r1, #1
   162c4:	bl	225d0 <__assert_fail@plt+0x110b8>
   162c8:	str	r0, [r9, #60]	; 0x3c
   162cc:	cmp	r0, #0
   162d0:	beq	16360 <__assert_fail@plt+0x4e48>
   162d4:	mov	r7, #0
   162d8:	mov	r6, #0
   162dc:	mov	r4, #0
   162e0:	add	r5, r7, r4
   162e4:	mov	r0, r5
   162e8:	bl	11434 <btowc@plt>
   162ec:	cmn	r0, #1
   162f0:	ldrne	r1, [r9, #60]	; 0x3c
   162f4:	ldrne	r2, [r1, r6, lsl #2]
   162f8:	orrne	r2, r2, r8, lsl r4
   162fc:	strne	r2, [r1, r6, lsl #2]
   16300:	cmp	r5, #127	; 0x7f
   16304:	bhi	16318 <__assert_fail@plt+0x4e00>
   16308:	cmp	r5, r0
   1630c:	ldrbne	r0, [r9, #88]	; 0x58
   16310:	orrne	r0, r0, #8
   16314:	strbne	r0, [r9, #88]	; 0x58
   16318:	add	r4, r4, #1
   1631c:	cmp	r4, #32
   16320:	bne	162e0 <__assert_fail@plt+0x4dc8>
   16324:	add	r6, r6, #1
   16328:	add	r7, r7, #32
   1632c:	cmp	r6, #8
   16330:	bne	162dc <__assert_fail@plt+0x4dc4>
   16334:	b	16344 <__assert_fail@plt+0x4e2c>
   16338:	movw	r0, #16100	; 0x3ee4
   1633c:	movt	r0, #2
   16340:	str	r0, [r9, #60]	; 0x3c
   16344:	ldr	r0, [r9]
   16348:	cmp	r0, #0
   1634c:	ldrne	r1, [r9, #32]
   16350:	movne	r0, #0
   16354:	cmpne	r1, #0
   16358:	moveq	r0, #12
   1635c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16360:	mov	r0, #12
   16364:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16368:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1636c:	add	fp, sp, #24
   16370:	sub	sp, sp, #8
   16374:	mov	r8, r3
   16378:	mov	r5, r2
   1637c:	mov	r7, r1
   16380:	mov	r4, r0
   16384:	vmov.i32	q8, #0	; 0x00000000
   16388:	mov	r0, #80	; 0x50
   1638c:	mov	r1, r4
   16390:	vst1.32	{d16-d17}, [r1], r0
   16394:	mov	r0, #0
   16398:	str	r0, [r1]
   1639c:	add	r0, r4, #64	; 0x40
   163a0:	vst1.32	{d16-d17}, [r0]
   163a4:	add	r0, r4, #48	; 0x30
   163a8:	vst1.32	{d16-d17}, [r0]
   163ac:	add	r0, r4, #32
   163b0:	vst1.32	{d16-d17}, [r0]
   163b4:	add	r0, r4, #16
   163b8:	vst1.32	{d16-d17}, [r0]
   163bc:	ldr	r6, [fp, #12]
   163c0:	str	r6, [sp, #4]
   163c4:	ldr	r9, [fp, #8]
   163c8:	str	r9, [sp]
   163cc:	mov	r0, r7
   163d0:	mov	r1, r2
   163d4:	mov	r2, r4
   163d8:	bl	16bac <__assert_fail@plt+0x5694>
   163dc:	cmp	r5, #1
   163e0:	blt	163f8 <__assert_fail@plt+0x4ee0>
   163e4:	add	r1, r5, #1
   163e8:	mov	r0, r4
   163ec:	bl	16c04 <__assert_fail@plt+0x56ec>
   163f0:	cmp	r0, #0
   163f4:	bne	164b0 <__assert_fail@plt+0x4f98>
   163f8:	ldrb	r0, [r4, #75]	; 0x4b
   163fc:	cmp	r0, #0
   16400:	ldrne	r7, [r4, #4]
   16404:	str	r7, [r4, #4]
   16408:	ldr	r0, [r6, #92]	; 0x5c
   1640c:	cmp	r9, #0
   16410:	beq	1646c <__assert_fail@plt+0x4f54>
   16414:	cmp	r0, #2
   16418:	blt	16480 <__assert_fail@plt+0x4f68>
   1641c:	mov	r0, r4
   16420:	bl	16ca8 <__assert_fail@plt+0x5790>
   16424:	cmp	r0, #0
   16428:	bne	164b0 <__assert_fail@plt+0x4f98>
   1642c:	ldr	r1, [r4, #32]
   16430:	mov	r0, #0
   16434:	cmp	r1, r5
   16438:	bge	164b0 <__assert_fail@plt+0x4f98>
   1643c:	ldr	r2, [r4, #28]
   16440:	ldr	r1, [r4, #36]	; 0x24
   16444:	ldr	r3, [r6, #92]	; 0x5c
   16448:	add	r2, r3, r2
   1644c:	cmp	r1, r2
   16450:	bgt	164b0 <__assert_fail@plt+0x4f98>
   16454:	lsl	r1, r1, #1
   16458:	mov	r0, r4
   1645c:	bl	16c04 <__assert_fail@plt+0x56ec>
   16460:	cmp	r0, #0
   16464:	beq	1641c <__assert_fail@plt+0x4f04>
   16468:	b	164b0 <__assert_fail@plt+0x4f98>
   1646c:	cmp	r0, #2
   16470:	blt	1648c <__assert_fail@plt+0x4f74>
   16474:	mov	r0, r4
   16478:	bl	172dc <__assert_fail@plt+0x5dc4>
   1647c:	b	164ac <__assert_fail@plt+0x4f94>
   16480:	mov	r0, r4
   16484:	bl	17270 <__assert_fail@plt+0x5d58>
   16488:	b	164ac <__assert_fail@plt+0x4f94>
   1648c:	cmp	r8, #0
   16490:	beq	164a0 <__assert_fail@plt+0x4f88>
   16494:	mov	r0, r4
   16498:	bl	1746c <__assert_fail@plt+0x5f54>
   1649c:	b	164ac <__assert_fail@plt+0x4f94>
   164a0:	ldr	r0, [r4, #36]	; 0x24
   164a4:	str	r0, [r4, #28]
   164a8:	str	r0, [r4, #32]
   164ac:	mov	r0, #0
   164b0:	sub	sp, fp, #24
   164b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   164b8:	push	{r4, r5, fp, lr}
   164bc:	add	fp, sp, #8
   164c0:	ldr	r4, [r0]
   164c4:	ldr	r0, [r4, #56]	; 0x38
   164c8:	cmp	r0, #0
   164cc:	beq	164e4 <__assert_fail@plt+0x4fcc>
   164d0:	ldr	r5, [r0]
   164d4:	bl	22b14 <__assert_fail@plt+0x115fc>
   164d8:	cmp	r5, #0
   164dc:	mov	r0, r5
   164e0:	bne	164d0 <__assert_fail@plt+0x4fb8>
   164e4:	mov	r0, #31
   164e8:	str	r0, [r4, #64]	; 0x40
   164ec:	mov	r5, #0
   164f0:	str	r5, [r4, #52]	; 0x34
   164f4:	str	r5, [r4, #56]	; 0x38
   164f8:	ldr	r0, [r4, #16]
   164fc:	bl	22b14 <__assert_fail@plt+0x115fc>
   16500:	str	r5, [r4, #16]
   16504:	pop	{r4, r5, fp, pc}
   16508:	push	{r4, sl, fp, lr}
   1650c:	add	fp, sp, #8
   16510:	mov	r4, r0
   16514:	ldr	r0, [r0, #8]
   16518:	bl	22b14 <__assert_fail@plt+0x115fc>
   1651c:	ldr	r0, [r4, #12]
   16520:	bl	22b14 <__assert_fail@plt+0x115fc>
   16524:	ldrb	r0, [r4, #75]	; 0x4b
   16528:	cmp	r0, #0
   1652c:	popeq	{r4, sl, fp, pc}
   16530:	ldr	r0, [r4, #4]
   16534:	pop	{r4, sl, fp, lr}
   16538:	b	22b14 <__assert_fail@plt+0x115fc>
   1653c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16540:	add	fp, sp, #28
   16544:	sub	sp, sp, #20
   16548:	mov	r8, r3
   1654c:	mov	r4, r2
   16550:	mov	r7, r1
   16554:	mov	r5, r0
   16558:	ldr	r9, [r1]
   1655c:	str	r2, [r9, #128]	; 0x80
   16560:	orr	r2, r2, #8388608	; 0x800000
   16564:	add	sl, sp, #12
   16568:	mov	r0, sl
   1656c:	mov	r1, r5
   16570:	bl	174cc <__assert_fail@plt+0x5fb4>
   16574:	mov	r6, #0
   16578:	stm	sp, {r6, r8}
   1657c:	mov	r0, r5
   16580:	mov	r1, r7
   16584:	mov	r2, sl
   16588:	mov	r3, r4
   1658c:	bl	174ec <__assert_fail@plt+0x5fd4>
   16590:	mov	r7, r0
   16594:	cmp	r0, #0
   16598:	bne	165a8 <__assert_fail@plt+0x5090>
   1659c:	ldr	r0, [r8]
   165a0:	cmp	r0, #0
   165a4:	bne	165f4 <__assert_fail@plt+0x50dc>
   165a8:	mov	r0, r9
   165ac:	mov	r1, #0
   165b0:	mov	r2, #0
   165b4:	mov	r3, #2
   165b8:	bl	17658 <__assert_fail@plt+0x6140>
   165bc:	mov	r4, r0
   165c0:	cmp	r7, #0
   165c4:	beq	165e4 <__assert_fail@plt+0x50cc>
   165c8:	mov	r0, r9
   165cc:	mov	r1, r7
   165d0:	mov	r2, r4
   165d4:	mov	r3, #16
   165d8:	bl	17658 <__assert_fail@plt+0x6140>
   165dc:	mov	r6, r0
   165e0:	b	165e8 <__assert_fail@plt+0x50d0>
   165e4:	mov	r6, r4
   165e8:	cmp	r4, #0
   165ec:	cmpne	r6, #0
   165f0:	beq	16600 <__assert_fail@plt+0x50e8>
   165f4:	mov	r0, r6
   165f8:	sub	sp, fp, #28
   165fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16600:	mov	r0, #12
   16604:	str	r0, [r8]
   16608:	mov	r6, #0
   1660c:	b	165f4 <__assert_fail@plt+0x50dc>
   16610:	push	{r4, r5, r6, r7, fp, lr}
   16614:	add	fp, sp, #16
   16618:	mov	r6, r0
   1661c:	ldr	r4, [r0]
   16620:	ldr	r0, [r4, #4]
   16624:	lsl	r0, r0, #2
   16628:	bl	22624 <__assert_fail@plt+0x1110c>
   1662c:	str	r0, [r4, #12]
   16630:	ldr	r0, [r4, #4]
   16634:	lsl	r0, r0, #2
   16638:	bl	22624 <__assert_fail@plt+0x1110c>
   1663c:	str	r0, [r4, #16]
   16640:	ldr	r0, [r4, #4]
   16644:	add	r0, r0, r0, lsl #1
   16648:	lsl	r0, r0, #2
   1664c:	bl	22624 <__assert_fail@plt+0x1110c>
   16650:	str	r0, [r4, #20]
   16654:	ldr	r0, [r4, #4]
   16658:	add	r0, r0, r0, lsl #1
   1665c:	lsl	r0, r0, #2
   16660:	bl	22624 <__assert_fail@plt+0x1110c>
   16664:	str	r0, [r4, #24]
   16668:	ldr	r1, [r4, #12]
   1666c:	mov	r7, #12
   16670:	cmp	r1, #0
   16674:	ldrne	r1, [r4, #16]
   16678:	cmpne	r1, #0
   1667c:	beq	16690 <__assert_fail@plt+0x5178>
   16680:	cmp	r0, #0
   16684:	ldrne	r0, [r4, #20]
   16688:	cmpne	r0, #0
   1668c:	bne	16698 <__assert_fail@plt+0x5180>
   16690:	mov	r0, r7
   16694:	pop	{r4, r5, r6, r7, fp, pc}
   16698:	ldr	r0, [r6, #24]
   1669c:	lsl	r0, r0, #2
   166a0:	bl	22624 <__assert_fail@plt+0x1110c>
   166a4:	str	r0, [r4, #132]	; 0x84
   166a8:	cmp	r0, #0
   166ac:	beq	16750 <__assert_fail@plt+0x5238>
   166b0:	ldr	r0, [r6, #24]
   166b4:	cmp	r0, #0
   166b8:	beq	166d8 <__assert_fail@plt+0x51c0>
   166bc:	ldr	r0, [r4, #132]	; 0x84
   166c0:	mov	r1, #0
   166c4:	str	r1, [r0, r1, lsl #2]
   166c8:	add	r1, r1, #1
   166cc:	ldr	r2, [r6, #24]
   166d0:	cmp	r1, r2
   166d4:	bcc	166c4 <__assert_fail@plt+0x51ac>
   166d8:	ldr	r0, [r4, #52]	; 0x34
   166dc:	movw	r1, #42472	; 0xa5e8
   166e0:	movt	r1, #1
   166e4:	mov	r2, r4
   166e8:	bl	1a568 <__assert_fail@plt+0x9050>
   166ec:	ldr	r1, [r6, #24]
   166f0:	mov	r0, #0
   166f4:	cmp	r1, #0
   166f8:	beq	16734 <__assert_fail@plt+0x521c>
   166fc:	ldr	r2, [r4, #132]	; 0x84
   16700:	ldr	r3, [r2]
   16704:	cmp	r3, #0
   16708:	bne	16738 <__assert_fail@plt+0x5220>
   1670c:	mov	r3, #1
   16710:	mov	r0, r3
   16714:	ldr	r1, [r6, #24]
   16718:	cmp	r3, r1
   1671c:	bcs	16738 <__assert_fail@plt+0x5220>
   16720:	ldr	r5, [r2, r0, lsl #2]
   16724:	add	r3, r0, #1
   16728:	cmp	r0, r5
   1672c:	beq	16710 <__assert_fail@plt+0x51f8>
   16730:	b	16738 <__assert_fail@plt+0x5220>
   16734:	mov	r1, #0
   16738:	cmp	r0, r1
   1673c:	bne	16750 <__assert_fail@plt+0x5238>
   16740:	ldr	r0, [r4, #132]	; 0x84
   16744:	bl	22b14 <__assert_fail@plt+0x115fc>
   16748:	mov	r0, #0
   1674c:	str	r0, [r4, #132]	; 0x84
   16750:	ldr	r0, [r4, #52]	; 0x34
   16754:	movw	r1, #42624	; 0xa680
   16758:	movt	r1, #1
   1675c:	mov	r2, r6
   16760:	bl	18090 <__assert_fail@plt+0x6b78>
   16764:	cmp	r0, #0
   16768:	bne	16828 <__assert_fail@plt+0x5310>
   1676c:	ldr	r0, [r4, #52]	; 0x34
   16770:	movw	r1, #42760	; 0xa708
   16774:	movt	r1, #1
   16778:	mov	r2, r4
   1677c:	bl	18090 <__assert_fail@plt+0x6b78>
   16780:	cmp	r0, #0
   16784:	bne	16828 <__assert_fail@plt+0x5310>
   16788:	ldr	r0, [r4, #52]	; 0x34
   1678c:	movw	r1, #42900	; 0xa794
   16790:	movt	r1, #1
   16794:	mov	r2, r4
   16798:	bl	1a568 <__assert_fail@plt+0x9050>
   1679c:	ldr	r0, [r4, #52]	; 0x34
   167a0:	movw	r1, #43000	; 0xa7f8
   167a4:	movt	r1, #1
   167a8:	mov	r2, r4
   167ac:	bl	1a568 <__assert_fail@plt+0x9050>
   167b0:	cmp	r0, #0
   167b4:	bne	16828 <__assert_fail@plt+0x5310>
   167b8:	mov	r0, r4
   167bc:	bl	1a90c <__assert_fail@plt+0x93f4>
   167c0:	cmp	r0, #0
   167c4:	popne	{r4, r5, r6, r7, fp, pc}
   167c8:	ldrb	r0, [r6, #28]
   167cc:	tst	r0, #16
   167d0:	bne	167e8 <__assert_fail@plt+0x52d0>
   167d4:	ldr	r0, [r6, #24]
   167d8:	cmp	r0, #0
   167dc:	ldrbne	r0, [r4, #88]	; 0x58
   167e0:	tstne	r0, #1
   167e4:	bne	167f4 <__assert_fail@plt+0x52dc>
   167e8:	ldr	r0, [r4, #76]	; 0x4c
   167ec:	cmp	r0, #0
   167f0:	beq	1681c <__assert_fail@plt+0x5304>
   167f4:	ldr	r0, [r4, #8]
   167f8:	add	r0, r0, r0, lsl #1
   167fc:	lsl	r0, r0, #2
   16800:	bl	22624 <__assert_fail@plt+0x1110c>
   16804:	str	r0, [r4, #28]
   16808:	cmp	r0, #0
   1680c:	beq	16690 <__assert_fail@plt+0x5178>
   16810:	mov	r0, r4
   16814:	pop	{r4, r5, r6, r7, fp, lr}
   16818:	b	1a9c8 <__assert_fail@plt+0x94b0>
   1681c:	mov	r7, #0
   16820:	mov	r0, r7
   16824:	pop	{r4, r5, r6, r7, fp, pc}
   16828:	pop	{r4, r5, r6, r7, fp, pc}
   1682c:	push	{r4, r5, r6, r7, fp, lr}
   16830:	add	fp, sp, #16
   16834:	ldr	r1, [r0, #8]
   16838:	cmp	r1, #0
   1683c:	beq	1691c <__assert_fail@plt+0x5404>
   16840:	ldr	r3, [r0]
   16844:	mov	r5, #0
   16848:	mov	ip, #1
   1684c:	mov	lr, #139	; 0x8b
   16850:	mov	r2, #0
   16854:	mov	r4, #0
   16858:	add	r1, r3, r4, lsl #3
   1685c:	ldrb	r6, [r1, #4]
   16860:	sub	r6, r6, #1
   16864:	cmp	r6, #11
   16868:	bhi	169c4 <__assert_fail@plt+0x54ac>
   1686c:	add	r7, pc, #0
   16870:	ldr	pc, [r7, r6, lsl #2]
   16874:	strdeq	r6, [r1], -ip
   16878:	andeq	r6, r1, r4, lsr #17
   1687c:			; <UNDEFINED> instruction: 0x000168b8
   16880:	andeq	r6, r1, r4, lsr #17
   16884:	andeq	r6, r1, r4, lsl r9
   16888:	andeq	r6, r1, r0, asr #19
   1688c:	andeq	r6, r1, r4, asr #19
   16890:	andeq	r6, r1, r4, lsr #17
   16894:	andeq	r6, r1, r4, lsr #17
   16898:	andeq	r6, r1, r4, lsr #17
   1689c:	andeq	r6, r1, r4, lsr #17
   168a0:	ldrdeq	r6, [r1], -ip
   168a4:	ldr	r1, [r0, #8]
   168a8:	add	r4, r4, #1
   168ac:	cmp	r4, r1
   168b0:	bcc	16858 <__assert_fail@plt+0x5340>
   168b4:	b	16924 <__assert_fail@plt+0x540c>
   168b8:	ldr	r1, [r3, r4, lsl #3]
   168bc:	mov	r6, #4
   168c0:	ldr	r7, [r1, r6, lsl #2]
   168c4:	cmp	r7, #0
   168c8:	popne	{r4, r5, r6, r7, fp, pc}
   168cc:	add	r6, r6, #1
   168d0:	cmp	r6, #7
   168d4:	bls	168c0 <__assert_fail@plt+0x53a8>
   168d8:	b	168a4 <__assert_fail@plt+0x538c>
   168dc:	ldr	r1, [r3, r4, lsl #3]
   168e0:	sub	r1, r1, #16
   168e4:	ror	r1, r1, #4
   168e8:	cmp	r1, #7
   168ec:	bhi	169c0 <__assert_fail@plt+0x54a8>
   168f0:	tst	lr, ip, lsl r1
   168f4:	bne	168a4 <__assert_fail@plt+0x538c>
   168f8:	b	169c0 <__assert_fail@plt+0x54a8>
   168fc:	ldrsb	r1, [r1]
   16900:	cmp	r1, #0
   16904:	mov	r1, #0
   16908:	movwlt	r1, #1
   1690c:	orr	r2, r2, r1
   16910:	b	168a4 <__assert_fail@plt+0x538c>
   16914:	mov	r5, #1
   16918:	b	168a4 <__assert_fail@plt+0x538c>
   1691c:	mov	r2, #0
   16920:	mov	r5, #0
   16924:	tst	r2, #1
   16928:	tsteq	r5, #1
   1692c:	beq	16990 <__assert_fail@plt+0x5478>
   16930:	ldr	r1, [r0, #8]
   16934:	cmp	r1, #0
   16938:	beq	16990 <__assert_fail@plt+0x5478>
   1693c:	mov	r2, #0
   16940:	mov	r3, #7
   16944:	ldr	r1, [r0]
   16948:	add	r4, r1, r2, lsl #3
   1694c:	ldr	r1, [r4, #4]
   16950:	uxtb	r6, r1
   16954:	cmp	r6, #5
   16958:	beq	16978 <__assert_fail@plt+0x5460>
   1695c:	cmp	r6, #1
   16960:	bne	16980 <__assert_fail@plt+0x5468>
   16964:	ldrsb	r7, [r4]
   16968:	cmn	r7, #1
   1696c:	bgt	16980 <__assert_fail@plt+0x5468>
   16970:	bic	r1, r1, #2097152	; 0x200000
   16974:	b	1697c <__assert_fail@plt+0x5464>
   16978:	bfi	r1, r3, #0, #8
   1697c:	str	r1, [r4, #4]
   16980:	ldr	r1, [r0, #8]
   16984:	add	r2, r2, #1
   16988:	cmp	r2, r1
   1698c:	bcc	16944 <__assert_fail@plt+0x542c>
   16990:	mov	r1, #1
   16994:	str	r1, [r0, #92]	; 0x5c
   16998:	ldr	r1, [r0, #76]	; 0x4c
   1699c:	mov	r2, #0
   169a0:	cmp	r1, #0
   169a4:	movwgt	r2, #1
   169a8:	orr	r1, r5, r2
   169ac:	and	r1, r1, #1
   169b0:	ldrb	r2, [r0, #88]	; 0x58
   169b4:	and	r2, r2, #249	; 0xf9
   169b8:	orr	r1, r2, r1, lsl #1
   169bc:	strb	r1, [r0, #88]	; 0x58
   169c0:	pop	{r4, r5, r6, r7, fp, pc}
   169c4:	bl	114f4 <abort@plt>
   169c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   169cc:	add	fp, sp, #24
   169d0:	sub	sp, sp, #16
   169d4:	mov	r9, r0
   169d8:	ldr	r0, [r0, #24]
   169dc:	ldr	r1, [r9, #52]	; 0x34
   169e0:	ldr	r1, [r1, #12]
   169e4:	ldr	r1, [r1, #28]
   169e8:	str	r1, [r9, #72]	; 0x48
   169ec:	add	r1, r1, r1, lsl #1
   169f0:	add	r1, r0, r1, lsl #2
   169f4:	mov	r0, sp
   169f8:	bl	1b70c <__assert_fail@plt+0xa1f4>
   169fc:	str	r0, [sp, #12]
   16a00:	cmp	r0, #0
   16a04:	bne	16ba4 <__assert_fail@plt+0x568c>
   16a08:	ldr	r0, [r9, #76]	; 0x4c
   16a0c:	cmp	r0, #1
   16a10:	ldrge	r0, [sp, #4]
   16a14:	cmpge	r0, #1
   16a18:	blt	16ae4 <__assert_fail@plt+0x55cc>
   16a1c:	mov	r7, #0
   16a20:	mov	r8, sp
   16a24:	ldr	r3, [sp, #8]
   16a28:	ldr	r1, [r3, r7, lsl #2]
   16a2c:	ldr	r6, [r9]
   16a30:	add	r2, r6, r1, lsl #3
   16a34:	ldrb	ip, [r2, #4]
   16a38:	cmp	ip, #4
   16a3c:	bne	16ad4 <__assert_fail@plt+0x55bc>
   16a40:	mov	r5, #0
   16a44:	cmp	r0, #1
   16a48:	blt	16a7c <__assert_fail@plt+0x5564>
   16a4c:	ldr	r4, [r3, r5, lsl #2]
   16a50:	add	r2, r6, r4, lsl #3
   16a54:	ldrb	r2, [r2, #4]
   16a58:	cmp	r2, #9
   16a5c:	bne	16a70 <__assert_fail@plt+0x5558>
   16a60:	ldr	r2, [r6, r1, lsl #3]
   16a64:	ldr	r4, [r6, r4, lsl #3]
   16a68:	cmp	r4, r2
   16a6c:	beq	16a7c <__assert_fail@plt+0x5564>
   16a70:	add	r5, r5, #1
   16a74:	cmp	r5, r0
   16a78:	blt	16a4c <__assert_fail@plt+0x5534>
   16a7c:	cmp	r5, r0
   16a80:	beq	16ad4 <__assert_fail@plt+0x55bc>
   16a84:	cmp	ip, #4
   16a88:	bne	16ad4 <__assert_fail@plt+0x55bc>
   16a8c:	ldr	r0, [r9, #20]
   16a90:	add	r1, r1, r1, lsl #1
   16a94:	add	r0, r0, r1, lsl #2
   16a98:	ldr	r0, [r0, #8]
   16a9c:	ldr	r6, [r0]
   16aa0:	mov	r0, r8
   16aa4:	mov	r1, r6
   16aa8:	bl	1b788 <__assert_fail@plt+0xa270>
   16aac:	cmp	r0, #0
   16ab0:	bne	16ad4 <__assert_fail@plt+0x55bc>
   16ab4:	ldr	r0, [r9, #24]
   16ab8:	add	r1, r6, r6, lsl #1
   16abc:	add	r1, r0, r1, lsl #2
   16ac0:	mov	r0, r8
   16ac4:	bl	1b308 <__assert_fail@plt+0x9df0>
   16ac8:	mov	r7, #0
   16acc:	cmp	r0, #0
   16ad0:	bne	16ba4 <__assert_fail@plt+0x568c>
   16ad4:	add	r7, r7, #1
   16ad8:	ldr	r0, [sp, #4]
   16adc:	cmp	r7, r0
   16ae0:	blt	16a24 <__assert_fail@plt+0x550c>
   16ae4:	add	r0, sp, #12
   16ae8:	mov	r2, sp
   16aec:	mov	r1, r9
   16af0:	mov	r3, #0
   16af4:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   16af8:	str	r0, [r9, #36]	; 0x24
   16afc:	cmp	r0, #0
   16b00:	beq	16b80 <__assert_fail@plt+0x5668>
   16b04:	ldrsb	r1, [r0, #52]	; 0x34
   16b08:	cmn	r1, #1
   16b0c:	ble	16b20 <__assert_fail@plt+0x5608>
   16b10:	str	r0, [r9, #40]	; 0x28
   16b14:	str	r0, [r9, #44]	; 0x2c
   16b18:	str	r0, [r9, #48]	; 0x30
   16b1c:	b	16b98 <__assert_fail@plt+0x5680>
   16b20:	add	r5, sp, #12
   16b24:	mov	r6, sp
   16b28:	mov	r0, r5
   16b2c:	mov	r1, r9
   16b30:	mov	r2, r6
   16b34:	mov	r3, #1
   16b38:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   16b3c:	str	r0, [r9, #40]	; 0x28
   16b40:	mov	r0, r5
   16b44:	mov	r1, r9
   16b48:	mov	r2, r6
   16b4c:	mov	r3, #2
   16b50:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   16b54:	str	r0, [r9, #44]	; 0x2c
   16b58:	mov	r0, r5
   16b5c:	mov	r1, r9
   16b60:	mov	r2, r6
   16b64:	mov	r3, #6
   16b68:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   16b6c:	str	r0, [r9, #48]	; 0x30
   16b70:	ldr	r1, [r9, #40]	; 0x28
   16b74:	cmp	r1, #0
   16b78:	cmpne	r0, #0
   16b7c:	bne	16b8c <__assert_fail@plt+0x5674>
   16b80:	ldr	r0, [sp, #12]
   16b84:	sub	sp, fp, #24
   16b88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16b8c:	ldr	r0, [r9, #44]	; 0x2c
   16b90:	cmp	r0, #0
   16b94:	beq	16b80 <__assert_fail@plt+0x5668>
   16b98:	ldr	r0, [sp, #8]
   16b9c:	bl	22b14 <__assert_fail@plt+0x115fc>
   16ba0:	mov	r0, #0
   16ba4:	sub	sp, fp, #24
   16ba8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16bac:	str	r1, [r2, #48]	; 0x30
   16bb0:	str	r0, [r2]
   16bb4:	str	r1, [r2, #44]	; 0x2c
   16bb8:	str	r3, [r2, #64]	; 0x40
   16bbc:	ldr	r0, [sp]
   16bc0:	strb	r0, [r2, #72]	; 0x48
   16bc4:	cmp	r3, #0
   16bc8:	movwne	r3, #1
   16bcc:	orr	r0, r3, r0
   16bd0:	strb	r0, [r2, #75]	; 0x4b
   16bd4:	ldr	r0, [sp, #4]
   16bd8:	ldr	r3, [r0, #92]	; 0x5c
   16bdc:	str	r3, [r2, #80]	; 0x50
   16be0:	ldrb	r3, [r0, #88]	; 0x58
   16be4:	ubfx	r3, r3, #2, #1
   16be8:	strb	r3, [r2, #73]	; 0x49
   16bec:	ldrb	r0, [r0, #88]	; 0x58
   16bf0:	str	r1, [r2, #56]	; 0x38
   16bf4:	str	r1, [r2, #52]	; 0x34
   16bf8:	ubfx	r0, r0, #3, #1
   16bfc:	strb	r0, [r2, #74]	; 0x4a
   16c00:	bx	lr
   16c04:	push	{r4, r5, r6, r7, fp, lr}
   16c08:	add	fp, sp, #16
   16c0c:	mov	r4, r1
   16c10:	mov	r5, r0
   16c14:	ldr	r0, [r0, #80]	; 0x50
   16c18:	cmp	r0, #2
   16c1c:	blt	16c68 <__assert_fail@plt+0x5750>
   16c20:	mov	r6, #12
   16c24:	cmn	r4, #-1073741823	; 0xc0000001
   16c28:	bhi	16c94 <__assert_fail@plt+0x577c>
   16c2c:	ldr	r0, [r5, #8]
   16c30:	lsl	r7, r4, #2
   16c34:	mov	r1, r7
   16c38:	bl	22654 <__assert_fail@plt+0x1113c>
   16c3c:	cmp	r0, #0
   16c40:	beq	16c94 <__assert_fail@plt+0x577c>
   16c44:	str	r0, [r5, #8]
   16c48:	ldr	r0, [r5, #12]
   16c4c:	cmp	r0, #0
   16c50:	beq	16c68 <__assert_fail@plt+0x5750>
   16c54:	mov	r1, r7
   16c58:	bl	22654 <__assert_fail@plt+0x1113c>
   16c5c:	cmp	r0, #0
   16c60:	beq	16c94 <__assert_fail@plt+0x577c>
   16c64:	str	r0, [r5, #12]
   16c68:	ldrb	r0, [r5, #75]	; 0x4b
   16c6c:	cmp	r0, #0
   16c70:	beq	16c8c <__assert_fail@plt+0x5774>
   16c74:	ldr	r0, [r5, #4]
   16c78:	mov	r1, r4
   16c7c:	bl	22654 <__assert_fail@plt+0x1113c>
   16c80:	cmp	r0, #0
   16c84:	beq	16c9c <__assert_fail@plt+0x5784>
   16c88:	str	r0, [r5, #4]
   16c8c:	str	r4, [r5, #36]	; 0x24
   16c90:	mov	r6, #0
   16c94:	mov	r0, r6
   16c98:	pop	{r4, r5, r6, r7, fp, pc}
   16c9c:	mov	r6, #12
   16ca0:	mov	r0, r6
   16ca4:	pop	{r4, r5, r6, r7, fp, pc}
   16ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cac:	add	fp, sp, #28
   16cb0:	sub	sp, sp, #92	; 0x5c
   16cb4:	mov	r6, r0
   16cb8:	ldrb	r0, [r0, #74]	; 0x4a
   16cbc:	ldr	sl, [r6, #28]
   16cc0:	ldr	r5, [r6, #36]	; 0x24
   16cc4:	ldr	r1, [r6, #48]	; 0x30
   16cc8:	cmp	r5, r1
   16ccc:	movgt	r5, r1
   16cd0:	cmp	r0, #0
   16cd4:	str	r6, [sp]
   16cd8:	bne	16cf4 <__assert_fail@plt+0x57dc>
   16cdc:	ldr	r0, [r6, #64]	; 0x40
   16ce0:	cmp	r0, #0
   16ce4:	bne	16cf4 <__assert_fail@plt+0x57dc>
   16ce8:	ldrb	r0, [r6, #76]	; 0x4c
   16cec:	cmp	r0, #0
   16cf0:	beq	16cfc <__assert_fail@plt+0x57e4>
   16cf4:	ldr	ip, [r6, #32]
   16cf8:	b	16f14 <__assert_fail@plt+0x59fc>
   16cfc:	cmp	r5, sl
   16d00:	ble	16d10 <__assert_fail@plt+0x57f8>
   16d04:	add	r8, r6, #16
   16d08:	mov	r9, r5
   16d0c:	b	16d68 <__assert_fail@plt+0x5850>
   16d10:	mov	ip, sl
   16d14:	b	1723c <__assert_fail@plt+0x5d24>
   16d18:	add	r0, r4, #1
   16d1c:	cmp	r0, #2
   16d20:	bcc	16d38 <__assert_fail@plt+0x5820>
   16d24:	ldr	r1, [sp]
   16d28:	ldr	r0, [r1, #36]	; 0x24
   16d2c:	ldr	r1, [r1, #48]	; 0x30
   16d30:	cmp	r0, r1
   16d34:	blt	16ed0 <__assert_fail@plt+0x59b8>
   16d38:	ldr	r1, [sp]
   16d3c:	ldr	r0, [r1, #4]
   16d40:	strb	r6, [r0, r7]
   16d44:	ldr	r0, [r1, #8]
   16d48:	str	r6, [r0, r7, lsl #2]
   16d4c:	add	sl, r7, #1
   16d50:	cmn	r4, #1
   16d54:	bne	16eac <__assert_fail@plt+0x5994>
   16d58:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16d5c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16d60:	stm	r8, {r0, r1}
   16d64:	b	16eac <__assert_fail@plt+0x5994>
   16d68:	ldr	r0, [r6]
   16d6c:	ldr	r1, [r6, #24]
   16d70:	add	r1, r1, sl
   16d74:	ldrb	r6, [r0, r1]
   16d78:	tst	r6, #128	; 0x80
   16d7c:	bne	16dc4 <__assert_fail@plt+0x58ac>
   16d80:	mov	r0, r8
   16d84:	mov	r4, sl
   16d88:	bl	112d8 <mbsinit@plt>
   16d8c:	cmp	r0, #0
   16d90:	beq	16dc4 <__assert_fail@plt+0x58ac>
   16d94:	mov	r0, r6
   16d98:	bl	114dc <towupper@plt>
   16d9c:	mov	sl, r4
   16da0:	cmp	r0, #127	; 0x7f
   16da4:	bhi	16dc4 <__assert_fail@plt+0x58ac>
   16da8:	ldr	r2, [sp]
   16dac:	ldr	r1, [r2, #4]
   16db0:	strb	r0, [r1, sl]
   16db4:	ldr	r1, [r2, #8]
   16db8:	str	r0, [r1, sl, lsl #2]
   16dbc:	add	sl, sl, #1
   16dc0:	b	16eac <__assert_fail@plt+0x5994>
   16dc4:	ldm	r8, {r0, r1}
   16dc8:	str	r1, [fp, #-36]	; 0xffffffdc
   16dcc:	str	r0, [fp, #-40]	; 0xffffffd8
   16dd0:	sub	r2, r5, sl
   16dd4:	ldr	r1, [sp]
   16dd8:	ldr	r0, [r1]
   16ddc:	ldr	r1, [r1, #24]
   16de0:	add	r0, r0, r1
   16de4:	mov	r7, sl
   16de8:	add	r1, r0, sl
   16dec:	add	r0, sp, #12
   16df0:	mov	r3, r8
   16df4:	bl	22bc4 <__assert_fail@plt+0x116ac>
   16df8:	mov	r4, r0
   16dfc:	sub	r0, r0, #1
   16e00:	cmn	r0, #4
   16e04:	bhi	16d18 <__assert_fail@plt+0x5800>
   16e08:	ldr	r0, [sp, #12]
   16e0c:	bl	114dc <towupper@plt>
   16e10:	mov	r6, r0
   16e14:	ldr	r0, [sp, #12]
   16e18:	cmp	r6, r0
   16e1c:	add	sl, sp, #16
   16e20:	bne	16e44 <__assert_fail@plt+0x592c>
   16e24:	ldr	r5, [sp]
   16e28:	ldr	r1, [r5]
   16e2c:	ldr	r0, [r5, #4]
   16e30:	ldr	r2, [r5, #24]
   16e34:	add	r0, r0, r7
   16e38:	add	r1, r1, r2
   16e3c:	add	r1, r1, r7
   16e40:	b	16e6c <__assert_fail@plt+0x5954>
   16e44:	mov	r0, sl
   16e48:	mov	r1, r6
   16e4c:	sub	r2, fp, #40	; 0x28
   16e50:	bl	11230 <wcrtomb@plt>
   16e54:	cmp	r4, r0
   16e58:	bne	16ec0 <__assert_fail@plt+0x59a8>
   16e5c:	ldr	r5, [sp]
   16e60:	ldr	r0, [r5, #4]
   16e64:	add	r0, r0, r7
   16e68:	mov	r1, sl
   16e6c:	mov	r2, r4
   16e70:	bl	112a8 <memcpy@plt>
   16e74:	ldr	r0, [r5, #8]
   16e78:	str	r6, [r0, r7, lsl #2]
   16e7c:	add	r6, r4, r7
   16e80:	add	sl, r7, #1
   16e84:	cmp	sl, r6
   16e88:	mov	r5, r9
   16e8c:	bge	16eac <__assert_fail@plt+0x5994>
   16e90:	mvn	r1, #3
   16e94:	add	r2, r1, r4, lsl #2
   16e98:	add	r0, r0, r7, lsl #2
   16e9c:	add	r0, r0, #4
   16ea0:	mov	r1, #255	; 0xff
   16ea4:	bl	11428 <memset@plt>
   16ea8:	mov	sl, r6
   16eac:	cmp	r5, sl
   16eb0:	mov	ip, sl
   16eb4:	ldr	r6, [sp]
   16eb8:	bgt	16d68 <__assert_fail@plt+0x5850>
   16ebc:	b	1723c <__assert_fail@plt+0x5d24>
   16ec0:	mov	ip, r7
   16ec4:	mov	sl, r7
   16ec8:	ldr	r6, [sp]
   16ecc:	b	16f1c <__assert_fail@plt+0x5a04>
   16ed0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16ed4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16ed8:	stm	r8, {r0, r1}
   16edc:	mov	ip, r7
   16ee0:	mov	sl, r7
   16ee4:	ldr	r6, [sp]
   16ee8:	b	1723c <__assert_fail@plt+0x5d24>
   16eec:	mvn	r1, #3
   16ef0:	add	r2, r1, r5, lsl #2
   16ef4:	add	r0, r0, sl, lsl #2
   16ef8:	add	r0, r0, #4
   16efc:	mov	r1, #255	; 0xff
   16f00:	mov	r5, ip
   16f04:	bl	11428 <memset@plt>
   16f08:	mov	ip, r5
   16f0c:	mov	sl, r4
   16f10:	ldr	r5, [sp, #4]
   16f14:	cmp	sl, r5
   16f18:	bge	1723c <__assert_fail@plt+0x5d24>
   16f1c:	mov	r3, r6
   16f20:	ldr	r0, [r6, #16]!
   16f24:	ldr	r1, [r6, #4]
   16f28:	str	r0, [fp, #-40]	; 0xffffffd8
   16f2c:	str	r1, [fp, #-36]	; 0xffffffdc
   16f30:	str	r5, [sp, #4]
   16f34:	sub	r2, r5, sl
   16f38:	ldr	r0, [r6, #48]	; 0x30
   16f3c:	cmp	r0, #0
   16f40:	bne	17008 <__assert_fail@plt+0x5af0>
   16f44:	ldr	r0, [r3]
   16f48:	ldr	r1, [r3, #24]
   16f4c:	add	r0, r0, r1
   16f50:	add	r4, r0, ip
   16f54:	mov	r9, ip
   16f58:	add	r0, sp, #8
   16f5c:	mov	r1, r4
   16f60:	mov	r3, r6
   16f64:	bl	22bc4 <__assert_fail@plt+0x116ac>
   16f68:	mov	r5, r0
   16f6c:	sub	r8, r0, #1
   16f70:	cmn	r8, #4
   16f74:	bhi	17064 <__assert_fail@plt+0x5b4c>
   16f78:	ldr	r0, [sp, #8]
   16f7c:	bl	114dc <towupper@plt>
   16f80:	mov	r7, r0
   16f84:	ldr	r0, [sp, #8]
   16f88:	cmp	r7, r0
   16f8c:	bne	16fa4 <__assert_fail@plt+0x5a8c>
   16f90:	ldr	r6, [sp]
   16f94:	ldr	r0, [r6, #4]
   16f98:	add	r0, r0, sl
   16f9c:	mov	r1, r4
   16fa0:	b	16fcc <__assert_fail@plt+0x5ab4>
   16fa4:	add	r0, sp, #16
   16fa8:	sub	r2, fp, #40	; 0x28
   16fac:	mov	r1, r7
   16fb0:	bl	11230 <wcrtomb@plt>
   16fb4:	cmp	r0, r5
   16fb8:	bne	170e0 <__assert_fail@plt+0x5bc8>
   16fbc:	ldr	r6, [sp]
   16fc0:	ldr	r0, [r6, #4]
   16fc4:	add	r0, r0, sl
   16fc8:	add	r1, sp, #16
   16fcc:	mov	r2, r5
   16fd0:	bl	112a8 <memcpy@plt>
   16fd4:	ldrb	r0, [r6, #76]	; 0x4c
   16fd8:	cmp	r0, #0
   16fdc:	mov	ip, r9
   16fe0:	bne	17208 <__assert_fail@plt+0x5cf0>
   16fe4:	ldr	r0, [r6, #8]
   16fe8:	str	r7, [r0, sl, lsl #2]
   16fec:	add	r4, r5, sl
   16ff0:	add	ip, r5, ip
   16ff4:	add	r1, sl, #1
   16ff8:	cmp	r1, r4
   16ffc:	blt	16eec <__assert_fail@plt+0x59d4>
   17000:	mov	sl, r1
   17004:	b	16f10 <__assert_fail@plt+0x59f8>
   17008:	add	r4, sp, #16
   1700c:	cmp	r2, #1
   17010:	ldrge	r1, [sp]
   17014:	ldrge	r1, [r1, #80]	; 0x50
   17018:	cmpge	r1, #1
   1701c:	blt	16f54 <__assert_fail@plt+0x5a3c>
   17020:	mov	r1, #0
   17024:	add	r4, sp, #16
   17028:	ldr	r5, [sp]
   1702c:	ldr	r3, [r5]
   17030:	ldr	r7, [r5, #24]
   17034:	add	r3, r3, r7
   17038:	add	r3, r3, ip
   1703c:	ldrb	r3, [r3, r1]
   17040:	ldrb	r3, [r0, r3]
   17044:	strb	r3, [r4, r1]
   17048:	add	r1, r1, #1
   1704c:	cmp	r1, r2
   17050:	bge	16f54 <__assert_fail@plt+0x5a3c>
   17054:	ldr	r3, [r5, #80]	; 0x50
   17058:	cmp	r1, r3
   1705c:	blt	1702c <__assert_fail@plt+0x5b14>
   17060:	b	16f54 <__assert_fail@plt+0x5a3c>
   17064:	add	r0, r5, #1
   17068:	cmp	r0, #2
   1706c:	mov	ip, r9
   17070:	ldr	r3, [sp]
   17074:	bcc	17088 <__assert_fail@plt+0x5b70>
   17078:	ldr	r0, [r3, #36]	; 0x24
   1707c:	ldr	r1, [r3, #48]	; 0x30
   17080:	cmp	r0, r1
   17084:	blt	1722c <__assert_fail@plt+0x5d14>
   17088:	ldr	r0, [r3]
   1708c:	ldr	r2, [r3, #24]
   17090:	ldr	r1, [r3, #64]	; 0x40
   17094:	add	r2, r2, ip
   17098:	ldrb	r0, [r0, r2]
   1709c:	cmp	r1, #0
   170a0:	ldrbne	r0, [r1, r0]
   170a4:	ldr	r2, [sp]
   170a8:	ldr	r1, [r2, #4]
   170ac:	strb	r0, [r1, sl]
   170b0:	ldrb	r1, [r2, #76]	; 0x4c
   170b4:	cmp	r1, #0
   170b8:	ldrne	r1, [r2, #12]
   170bc:	strne	ip, [r1, sl, lsl #2]
   170c0:	ldr	r1, [r2, #8]
   170c4:	str	r0, [r1, sl, lsl #2]
   170c8:	add	sl, sl, #1
   170cc:	add	ip, ip, #1
   170d0:	cmn	r5, #1
   170d4:	beq	1725c <__assert_fail@plt+0x5d44>
   170d8:	ldr	r6, [sp]
   170dc:	b	16f10 <__assert_fail@plt+0x59f8>
   170e0:	mov	r2, r0
   170e4:	cmn	r0, #1
   170e8:	beq	16f90 <__assert_fail@plt+0x5a78>
   170ec:	mov	ip, r9
   170f0:	add	r1, r2, sl
   170f4:	ldr	r3, [sp]
   170f8:	ldr	r0, [r3, #36]	; 0x24
   170fc:	cmp	r1, r0
   17100:	bhi	1722c <__assert_fail@plt+0x5d14>
   17104:	str	r1, [sp, #4]
   17108:	ldr	r1, [r3, #12]
   1710c:	cmp	r1, #0
   17110:	mov	r6, r3
   17114:	bne	17134 <__assert_fail@plt+0x5c1c>
   17118:	lsl	r0, r0, #2
   1711c:	mov	r4, r2
   17120:	bl	22624 <__assert_fail@plt+0x1110c>
   17124:	mov	r2, r4
   17128:	str	r0, [r6, #12]
   1712c:	cmp	r0, #0
   17130:	beq	17250 <__assert_fail@plt+0x5d38>
   17134:	ldrb	r0, [r6, #76]	; 0x4c
   17138:	cmp	r0, #0
   1713c:	bne	17168 <__assert_fail@plt+0x5c50>
   17140:	cmp	sl, #0
   17144:	beq	17160 <__assert_fail@plt+0x5c48>
   17148:	ldr	r0, [r6, #12]
   1714c:	mov	r1, #0
   17150:	str	r1, [r0, r1, lsl #2]
   17154:	add	r1, r1, #1
   17158:	cmp	sl, r1
   1715c:	bne	17150 <__assert_fail@plt+0x5c38>
   17160:	mov	r0, #1
   17164:	strb	r0, [r6, #76]	; 0x4c
   17168:	ldr	r0, [r6, #4]
   1716c:	add	r0, r0, sl
   17170:	add	r1, sp, #16
   17174:	mov	r4, r2
   17178:	bl	112a8 <memcpy@plt>
   1717c:	ldr	r1, [r6, #8]
   17180:	str	r7, [r1, sl, lsl #2]
   17184:	ldr	r0, [r6, #12]
   17188:	mov	ip, r9
   1718c:	str	r9, [r0, sl, lsl #2]
   17190:	cmp	r4, #2
   17194:	bcc	171cc <__assert_fail@plt+0x5cb4>
   17198:	add	r0, r0, sl, lsl #2
   1719c:	add	r1, r1, sl, lsl #2
   171a0:	mov	r2, #1
   171a4:	mvn	r3, #0
   171a8:	cmp	r2, r5
   171ac:	mov	r7, r8
   171b0:	movcc	r7, r2
   171b4:	add	r7, r7, ip
   171b8:	str	r7, [r0, r2, lsl #2]
   171bc:	str	r3, [r1, r2, lsl #2]
   171c0:	add	r2, r2, #1
   171c4:	cmp	r4, r2
   171c8:	bne	171a8 <__assert_fail@plt+0x5c90>
   171cc:	sub	r1, r4, r5
   171d0:	ldr	r0, [r6, #48]	; 0x30
   171d4:	ldr	r2, [r6, #52]	; 0x34
   171d8:	add	r0, r0, r1
   171dc:	str	r0, [r6, #48]	; 0x30
   171e0:	cmp	r2, ip
   171e4:	ldrgt	r2, [r6, #56]	; 0x38
   171e8:	addgt	r1, r2, r1
   171ec:	strgt	r1, [r6, #56]	; 0x38
   171f0:	add	ip, r5, ip
   171f4:	ldr	r5, [r6, #36]	; 0x24
   171f8:	cmp	r5, r0
   171fc:	movgt	r5, r0
   17200:	ldr	sl, [sp, #4]
   17204:	b	16f14 <__assert_fail@plt+0x59fc>
   17208:	ldr	r0, [r6, #12]
   1720c:	add	r0, r0, sl, lsl #2
   17210:	mov	r1, ip
   17214:	mov	r2, r5
   17218:	str	r1, [r0], #4
   1721c:	add	r1, r1, #1
   17220:	subs	r2, r2, #1
   17224:	bne	17218 <__assert_fail@plt+0x5d00>
   17228:	b	16fe4 <__assert_fail@plt+0x5acc>
   1722c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17230:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17234:	stm	r6, {r0, r1}
   17238:	mov	r6, r3
   1723c:	str	sl, [r6, #28]
   17240:	str	ip, [r6, #32]
   17244:	mov	r0, #0
   17248:	sub	sp, fp, #28
   1724c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17250:	mov	r0, #12
   17254:	sub	sp, fp, #28
   17258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1725c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17260:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17264:	stm	r6, {r0, r1}
   17268:	ldr	r6, [sp]
   1726c:	b	16f10 <__assert_fail@plt+0x59f8>
   17270:	push	{r4, r5, r6, sl, fp, lr}
   17274:	add	fp, sp, #16
   17278:	mov	r4, r0
   1727c:	ldr	r5, [r0, #28]
   17280:	ldr	r6, [r0, #36]	; 0x24
   17284:	ldr	r0, [r0, #48]	; 0x30
   17288:	cmp	r6, r0
   1728c:	movgt	r6, r0
   17290:	cmp	r5, r6
   17294:	bge	172d0 <__assert_fail@plt+0x5db8>
   17298:	ldr	r0, [r4]
   1729c:	ldr	r2, [r4, #24]
   172a0:	ldr	r1, [r4, #64]	; 0x40
   172a4:	add	r0, r0, r2
   172a8:	ldrb	r0, [r0, r5]
   172ac:	cmp	r1, #0
   172b0:	ldrbne	r0, [r1, r0]
   172b4:	bl	11494 <toupper@plt>
   172b8:	ldr	r1, [r4, #4]
   172bc:	strb	r0, [r1, r5]
   172c0:	add	r5, r5, #1
   172c4:	cmp	r5, r6
   172c8:	blt	17298 <__assert_fail@plt+0x5d80>
   172cc:	mov	r5, r6
   172d0:	str	r5, [r4, #28]
   172d4:	str	r5, [r4, #32]
   172d8:	pop	{r4, r5, r6, sl, fp, pc}
   172dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172e0:	add	fp, sp, #28
   172e4:	sub	sp, sp, #68	; 0x44
   172e8:	mov	r4, r0
   172ec:	ldr	r6, [r0, #28]
   172f0:	ldr	r7, [r0, #36]	; 0x24
   172f4:	ldr	r0, [r0, #48]	; 0x30
   172f8:	cmp	r7, r0
   172fc:	movgt	r7, r0
   17300:	cmp	r7, r6
   17304:	ble	17458 <__assert_fail@plt+0x5f40>
   17308:	add	r8, r4, #16
   1730c:	mov	r5, sp
   17310:	sub	r2, r7, r6
   17314:	ldm	r8, {r9, sl}
   17318:	ldr	r0, [r4, #64]	; 0x40
   1731c:	cmp	r0, #0
   17320:	bne	173e0 <__assert_fail@plt+0x5ec8>
   17324:	ldr	r0, [r4]
   17328:	ldr	r1, [r4, #24]
   1732c:	add	r0, r0, r1
   17330:	add	r1, r0, r6
   17334:	mov	r0, r5
   17338:	mov	r3, r8
   1733c:	bl	22bc4 <__assert_fail@plt+0x116ac>
   17340:	add	r1, r0, #1
   17344:	cmp	r1, #2
   17348:	bcc	17364 <__assert_fail@plt+0x5e4c>
   1734c:	cmn	r0, #2
   17350:	bne	17390 <__assert_fail@plt+0x5e78>
   17354:	ldr	r0, [r4, #36]	; 0x24
   17358:	ldr	r1, [r4, #48]	; 0x30
   1735c:	cmp	r0, r1
   17360:	blt	17454 <__assert_fail@plt+0x5f3c>
   17364:	ldr	r0, [r4]
   17368:	ldr	r1, [r4, #24]
   1736c:	add	r1, r1, r6
   17370:	ldrb	r0, [r0, r1]
   17374:	str	r0, [sp]
   17378:	ldr	r1, [r4, #64]	; 0x40
   1737c:	cmp	r1, #0
   17380:	ldrbne	r0, [r1, r0]
   17384:	strne	r0, [sp]
   17388:	stm	r8, {r9, sl}
   1738c:	mov	r0, #1
   17390:	mov	r9, r5
   17394:	ldr	r3, [r4, #8]
   17398:	ldr	r1, [sp]
   1739c:	str	r1, [r3, r6, lsl #2]
   173a0:	add	r5, r0, r6
   173a4:	add	r1, r6, #1
   173a8:	cmp	r1, r5
   173ac:	bge	173cc <__assert_fail@plt+0x5eb4>
   173b0:	mvn	r1, #3
   173b4:	add	r2, r1, r0, lsl #2
   173b8:	add	r0, r3, r6, lsl #2
   173bc:	add	r0, r0, #4
   173c0:	mov	r1, #255	; 0xff
   173c4:	bl	11428 <memset@plt>
   173c8:	mov	r1, r5
   173cc:	cmp	r7, r1
   173d0:	mov	r6, r1
   173d4:	mov	r5, r9
   173d8:	bgt	17310 <__assert_fail@plt+0x5df8>
   173dc:	b	1745c <__assert_fail@plt+0x5f44>
   173e0:	cmp	r2, #1
   173e4:	add	r1, sp, #4
   173e8:	blt	17334 <__assert_fail@plt+0x5e1c>
   173ec:	ldr	r0, [r4, #80]	; 0x50
   173f0:	cmp	r0, #1
   173f4:	add	r1, sp, #4
   173f8:	blt	17334 <__assert_fail@plt+0x5e1c>
   173fc:	mov	lr, r5
   17400:	mov	r0, #0
   17404:	ldm	r4, {r1, ip}
   17408:	ldr	r5, [r4, #24]
   1740c:	ldr	r3, [r4, #64]	; 0x40
   17410:	add	r1, r1, r5
   17414:	add	r1, r1, r6
   17418:	ldrb	r1, [r1, r0]
   1741c:	ldrb	r1, [r3, r1]
   17420:	add	r3, ip, r6
   17424:	strb	r1, [r3, r0]
   17428:	add	r3, sp, #4
   1742c:	strb	r1, [r3, r0]
   17430:	add	r0, r0, #1
   17434:	cmp	r0, r2
   17438:	bge	17448 <__assert_fail@plt+0x5f30>
   1743c:	ldr	r1, [r4, #80]	; 0x50
   17440:	cmp	r0, r1
   17444:	blt	17404 <__assert_fail@plt+0x5eec>
   17448:	add	r1, sp, #4
   1744c:	mov	r5, lr
   17450:	b	17334 <__assert_fail@plt+0x5e1c>
   17454:	stm	r8, {r9, sl}
   17458:	mov	r1, r6
   1745c:	str	r1, [r4, #28]
   17460:	str	r1, [r4, #32]
   17464:	sub	sp, fp, #28
   17468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1746c:	ldr	r1, [r0, #28]
   17470:	ldr	ip, [r0, #36]	; 0x24
   17474:	ldr	r3, [r0, #48]	; 0x30
   17478:	cmp	ip, r3
   1747c:	movgt	ip, r3
   17480:	cmp	r1, ip
   17484:	bge	174c0 <__assert_fail@plt+0x5fa8>
   17488:	push	{r4, sl, fp, lr}
   1748c:	add	fp, sp, #8
   17490:	ldm	r0, {r3, lr}
   17494:	ldr	r2, [r0, #24]
   17498:	ldr	r4, [r0, #64]	; 0x40
   1749c:	add	r2, r3, r2
   174a0:	ldrb	r2, [r2, r1]
   174a4:	ldrb	r2, [r4, r2]
   174a8:	strb	r2, [lr, r1]
   174ac:	add	r1, r1, #1
   174b0:	cmp	r1, ip
   174b4:	blt	17490 <__assert_fail@plt+0x5f78>
   174b8:	mov	r1, ip
   174bc:	pop	{r4, sl, fp, lr}
   174c0:	str	r1, [r0, #28]
   174c4:	str	r1, [r0, #32]
   174c8:	bx	lr
   174cc:	push	{r4, sl, fp, lr}
   174d0:	add	fp, sp, #8
   174d4:	mov	r4, r1
   174d8:	bl	17690 <__assert_fail@plt+0x6178>
   174dc:	ldr	r1, [r4, #40]	; 0x28
   174e0:	add	r0, r1, r0
   174e4:	str	r0, [r4, #40]	; 0x28
   174e8:	pop	{r4, sl, fp, pc}
   174ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174f0:	add	fp, sp, #28
   174f4:	sub	sp, sp, #28
   174f8:	mov	r5, r2
   174fc:	mov	sl, r0
   17500:	ldr	r4, [r1]
   17504:	ldr	r0, [r4, #84]	; 0x54
   17508:	str	r0, [sp, #12]
   1750c:	ldr	r7, [fp, #12]
   17510:	str	r7, [sp, #4]
   17514:	ldr	r8, [fp, #8]
   17518:	str	r8, [sp]
   1751c:	mov	r0, sl
   17520:	str	r1, [sp, #16]
   17524:	str	r3, [sp, #20]
   17528:	bl	17f20 <__assert_fail@plt+0x6a08>
   1752c:	mov	r6, r0
   17530:	cmp	r0, #0
   17534:	bne	17544 <__assert_fail@plt+0x602c>
   17538:	ldr	r0, [r7]
   1753c:	cmp	r0, #0
   17540:	bne	1762c <__assert_fail@plt+0x6114>
   17544:	ldr	r0, [sp, #20]
   17548:	orr	r7, r0, #8388608	; 0x800000
   1754c:	ldrb	r0, [r5, #4]
   17550:	cmp	r0, #10
   17554:	bne	17610 <__assert_fail@plt+0x60f8>
   17558:	mov	r0, r5
   1755c:	mov	r1, sl
   17560:	mov	r2, r7
   17564:	bl	174cc <__assert_fail@plt+0x5fb4>
   17568:	ldrb	r0, [r5, #4]
   1756c:	orr	r1, r0, #8
   17570:	mov	r2, #0
   17574:	cmp	r1, #10
   17578:	bne	1759c <__assert_fail@plt+0x6084>
   1757c:	mov	r0, r4
   17580:	mov	r1, r6
   17584:	mov	r3, #10
   17588:	bl	17658 <__assert_fail@plt+0x6140>
   1758c:	mov	r6, r0
   17590:	cmp	r0, #0
   17594:	bne	1754c <__assert_fail@plt+0x6034>
   17598:	b	17620 <__assert_fail@plt+0x6108>
   1759c:	cmp	r8, #0
   175a0:	beq	175ac <__assert_fail@plt+0x6094>
   175a4:	cmp	r0, #9
   175a8:	beq	1757c <__assert_fail@plt+0x6064>
   175ac:	ldr	r0, [r4, #84]	; 0x54
   175b0:	str	r0, [sp, #24]
   175b4:	ldr	r0, [sp, #12]
   175b8:	str	r0, [r4, #84]	; 0x54
   175bc:	mov	r9, r8
   175c0:	str	r8, [sp]
   175c4:	ldr	r8, [fp, #12]
   175c8:	str	r8, [sp, #4]
   175cc:	mov	r0, sl
   175d0:	ldr	r1, [sp, #16]
   175d4:	mov	r2, r5
   175d8:	ldr	r3, [sp, #20]
   175dc:	bl	17f20 <__assert_fail@plt+0x6a08>
   175e0:	mov	r2, r0
   175e4:	cmp	r0, #0
   175e8:	bne	175f8 <__assert_fail@plt+0x60e0>
   175ec:	ldr	r0, [r8]
   175f0:	cmp	r0, #0
   175f4:	bne	17634 <__assert_fail@plt+0x611c>
   175f8:	ldr	r0, [r4, #84]	; 0x54
   175fc:	ldr	r1, [sp, #24]
   17600:	orr	r0, r0, r1
   17604:	str	r0, [r4, #84]	; 0x54
   17608:	mov	r8, r9
   1760c:	b	1757c <__assert_fail@plt+0x6064>
   17610:	mov	r4, r6
   17614:	mov	r0, r4
   17618:	sub	sp, fp, #28
   1761c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17620:	mov	r0, #12
   17624:	ldr	r1, [fp, #12]
   17628:	str	r0, [r1]
   1762c:	mov	r4, #0
   17630:	b	17614 <__assert_fail@plt+0x60fc>
   17634:	cmp	r6, #0
   17638:	beq	1762c <__assert_fail@plt+0x6114>
   1763c:	movw	r1, #33032	; 0x8108
   17640:	movt	r1, #1
   17644:	mov	r4, #0
   17648:	mov	r0, r6
   1764c:	mov	r2, #0
   17650:	bl	18090 <__assert_fail@plt+0x6b78>
   17654:	b	17614 <__assert_fail@plt+0x60fc>
   17658:	push	{fp, lr}
   1765c:	mov	fp, sp
   17660:	sub	sp, sp, #8
   17664:	mov	ip, #0
   17668:	str	ip, [sp]
   1766c:	uxtb	ip, r3
   17670:	ldr	r3, [sp, #4]
   17674:	bfc	r3, #0, #23
   17678:	orr	r3, r3, ip
   1767c:	str	r3, [sp, #4]
   17680:	mov	r3, sp
   17684:	bl	186d0 <__assert_fail@plt+0x71b8>
   17688:	mov	sp, fp
   1768c:	pop	{fp, pc}
   17690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17694:	add	fp, sp, #28
   17698:	sub	sp, sp, #12
   1769c:	mov	r7, r1
   176a0:	mov	sl, r0
   176a4:	ldr	r0, [r1, #40]	; 0x28
   176a8:	ldr	r1, [r1, #56]	; 0x38
   176ac:	cmp	r1, r0
   176b0:	ble	1778c <__assert_fail@plt+0x6274>
   176b4:	mov	r9, r2
   176b8:	ldr	r1, [r7, #4]
   176bc:	ldrb	r6, [r1, r0]
   176c0:	mov	r5, sl
   176c4:	strb	r6, [r5], #4
   176c8:	ldr	r4, [r5]
   176cc:	bic	r0, r4, #6291456	; 0x600000
   176d0:	str	r0, [r5]
   176d4:	ldr	r0, [r7, #80]	; 0x50
   176d8:	movw	r8, #65280	; 0xff00
   176dc:	movt	r8, #65439	; 0xff9f
   176e0:	cmp	r0, #2
   176e4:	blt	17708 <__assert_fail@plt+0x61f0>
   176e8:	ldr	r1, [r7, #28]
   176ec:	ldr	r0, [r7, #40]	; 0x28
   176f0:	cmp	r0, r1
   176f4:	beq	17708 <__assert_fail@plt+0x61f0>
   176f8:	ldr	r1, [r7, #8]
   176fc:	ldr	r0, [r1, r0, lsl #2]
   17700:	cmn	r0, #1
   17704:	beq	17bc0 <__assert_fail@plt+0x66a8>
   17708:	cmp	r6, #92	; 0x5c
   1770c:	bne	1779c <__assert_fail@plt+0x6284>
   17710:	ldr	r0, [r7, #40]	; 0x28
   17714:	ldr	r1, [r7, #48]	; 0x30
   17718:	add	r0, r0, #1
   1771c:	cmp	r0, r1
   17720:	bge	177f0 <__assert_fail@plt+0x62d8>
   17724:	mov	r0, r7
   17728:	bl	17e44 <__assert_fail@plt+0x692c>
   1772c:	mov	r6, r0
   17730:	strb	r0, [sl]
   17734:	and	r0, r4, r8
   17738:	orr	r4, r0, #1
   1773c:	str	r4, [sl, #4]
   17740:	ldr	r0, [r7, #80]	; 0x50
   17744:	cmp	r0, #2
   17748:	blt	17a14 <__assert_fail@plt+0x64fc>
   1774c:	ldr	r0, [r7, #40]	; 0x28
   17750:	add	r1, r0, #1
   17754:	mov	r0, r7
   17758:	bl	17f04 <__assert_fail@plt+0x69ec>
   1775c:	mov	r7, r0
   17760:	bl	11410 <iswalnum@plt>
   17764:	cmp	r0, #0
   17768:	movwne	r0, #1
   1776c:	sub	r1, r7, #95	; 0x5f
   17770:	clz	r1, r1
   17774:	lsr	r1, r1, #5
   17778:	orr	r0, r1, r0
   1777c:	ldr	r1, [r5]
   17780:	bic	r1, r1, #4194304	; 0x400000
   17784:	orr	r0, r1, r0, lsl #22
   17788:	b	17a34 <__assert_fail@plt+0x651c>
   1778c:	mov	r0, #2
   17790:	strb	r0, [sl, #4]
   17794:	mov	r8, #0
   17798:	b	17e38 <__assert_fail@plt+0x6920>
   1779c:	and	r0, r4, r8
   177a0:	orr	r4, r0, #1
   177a4:	str	r4, [r5]
   177a8:	ldr	r0, [r7, #80]	; 0x50
   177ac:	cmp	r0, #2
   177b0:	blt	177fc <__assert_fail@plt+0x62e4>
   177b4:	ldr	r1, [r7, #40]	; 0x28
   177b8:	mov	r0, r7
   177bc:	bl	17f04 <__assert_fail@plt+0x69ec>
   177c0:	mov	r4, r0
   177c4:	bl	11410 <iswalnum@plt>
   177c8:	cmp	r0, #0
   177cc:	movwne	r0, #1
   177d0:	sub	r1, r4, #95	; 0x5f
   177d4:	clz	r1, r1
   177d8:	lsr	r1, r1, #5
   177dc:	orr	r0, r1, r0
   177e0:	ldr	r1, [r5]
   177e4:	bic	r1, r1, #4194304	; 0x400000
   177e8:	orr	r0, r1, r0, lsl #22
   177ec:	b	1781c <__assert_fail@plt+0x6304>
   177f0:	and	r0, r4, r8
   177f4:	orr	r0, r0, #36	; 0x24
   177f8:	b	17bcc <__assert_fail@plt+0x66b4>
   177fc:	bl	113d4 <__ctype_b_loc@plt>
   17800:	ldr	r0, [r0]
   17804:	add	r0, r0, r6, lsl #1
   17808:	ldrh	r0, [r0]
   1780c:	ubfx	r0, r0, #3, #1
   17810:	cmp	r6, #95	; 0x5f
   17814:	movweq	r0, #1
   17818:	orr	r0, r4, r0, lsl #22
   1781c:	str	r0, [r5]
   17820:	sub	r1, r6, #10
   17824:	mov	r8, #1
   17828:	cmp	r1, #115	; 0x73
   1782c:	bhi	17e38 <__assert_fail@plt+0x6920>
   17830:	add	r2, pc, #0
   17834:	ldr	pc, [r2, r1, lsl #2]
   17838:	andeq	r7, r1, r8, lsl #20
   1783c:	andeq	r7, r1, r8, lsr lr
   17840:	andeq	r7, r1, r8, lsr lr
   17844:	andeq	r7, r1, r8, lsr lr
   17848:	andeq	r7, r1, r8, lsr lr
   1784c:	andeq	r7, r1, r8, lsr lr
   17850:	andeq	r7, r1, r8, lsr lr
   17854:	andeq	r7, r1, r8, lsr lr
   17858:	andeq	r7, r1, r8, lsr lr
   1785c:	andeq	r7, r1, r8, lsr lr
   17860:	andeq	r7, r1, r8, lsr lr
   17864:	andeq	r7, r1, r8, lsr lr
   17868:	andeq	r7, r1, r8, lsr lr
   1786c:	andeq	r7, r1, r8, lsr lr
   17870:	andeq	r7, r1, r8, lsr lr
   17874:	andeq	r7, r1, r8, lsr lr
   17878:	andeq	r7, r1, r8, lsr lr
   1787c:	andeq	r7, r1, r8, lsr lr
   17880:	andeq	r7, r1, r8, lsr lr
   17884:	andeq	r7, r1, r8, lsr lr
   17888:	andeq	r7, r1, r8, lsr lr
   1788c:	andeq	r7, r1, r8, lsr lr
   17890:	andeq	r7, r1, r8, lsr lr
   17894:	andeq	r7, r1, r8, lsr lr
   17898:	andeq	r7, r1, r8, lsr lr
   1789c:	andeq	r7, r1, r8, lsr lr
   178a0:	ldrdeq	r7, [r1], -r8
   178a4:	andeq	r7, r1, r8, lsr lr
   178a8:	andeq	r7, r1, r8, lsr lr
   178ac:	andeq	r7, r1, r8, lsr lr
   178b0:	andeq	r7, r1, r8, lsr ip
   178b4:	andeq	r7, r1, r4, asr #24
   178b8:	andeq	r7, r1, r0, asr ip
   178bc:	andeq	r7, r1, r8, asr ip
   178c0:	andeq	r7, r1, r8, lsr lr
   178c4:	andeq	r7, r1, r8, lsr lr
   178c8:	andeq	r7, r1, r8, ror #24
   178cc:	andeq	r7, r1, r8, lsr lr
   178d0:	andeq	r7, r1, r8, lsr lr
   178d4:	andeq	r7, r1, r8, lsr lr
   178d8:	andeq	r7, r1, r8, lsr lr
   178dc:	andeq	r7, r1, r8, lsr lr
   178e0:	andeq	r7, r1, r8, lsr lr
   178e4:	andeq	r7, r1, r8, lsr lr
   178e8:	andeq	r7, r1, r8, lsr lr
   178ec:	andeq	r7, r1, r8, lsr lr
   178f0:	andeq	r7, r1, r8, lsr lr
   178f4:	andeq	r7, r1, r8, lsr lr
   178f8:	andeq	r7, r1, r8, lsr lr
   178fc:	andeq	r7, r1, r8, lsr lr
   17900:	andeq	r7, r1, r8, lsr lr
   17904:	andeq	r7, r1, r8, lsr lr
   17908:	andeq	r7, r1, r8, lsr lr
   1790c:	andeq	r7, r1, r0, ror ip
   17910:	andeq	r7, r1, r8, lsr lr
   17914:	andeq	r7, r1, r8, lsr lr
   17918:	andeq	r7, r1, r8, lsr lr
   1791c:	andeq	r7, r1, r8, lsr lr
   17920:	andeq	r7, r1, r8, lsr lr
   17924:	andeq	r7, r1, r8, lsr lr
   17928:	andeq	r7, r1, r8, lsr lr
   1792c:	andeq	r7, r1, r8, lsr lr
   17930:	andeq	r7, r1, r8, lsr lr
   17934:	andeq	r7, r1, r8, lsr lr
   17938:	andeq	r7, r1, r8, lsr lr
   1793c:	andeq	r7, r1, r8, lsr lr
   17940:	andeq	r7, r1, r8, lsr lr
   17944:	andeq	r7, r1, r8, lsr lr
   17948:	andeq	r7, r1, r8, lsr lr
   1794c:	andeq	r7, r1, r8, lsr lr
   17950:	andeq	r7, r1, r8, lsr lr
   17954:	andeq	r7, r1, r8, lsr lr
   17958:	andeq	r7, r1, r8, lsr lr
   1795c:	andeq	r7, r1, r8, lsr lr
   17960:	andeq	r7, r1, r8, lsr lr
   17964:	andeq	r7, r1, r8, lsr lr
   17968:	andeq	r7, r1, r8, lsr lr
   1796c:	andeq	r7, r1, r8, lsr lr
   17970:	andeq	r7, r1, r8, lsr lr
   17974:	andeq	r7, r1, r8, lsr lr
   17978:	andeq	r7, r1, r8, lsr lr
   1797c:	andeq	r7, r1, r0, lsl #25
   17980:	andeq	r7, r1, r8, lsr lr
   17984:	andeq	r7, r1, r8, lsr lr
   17988:	andeq	r7, r1, r8, lsl #25
   1798c:	andeq	r7, r1, r8, lsr lr
   17990:	andeq	r7, r1, r8, lsr lr
   17994:	andeq	r7, r1, r8, lsr lr
   17998:	andeq	r7, r1, r8, lsr lr
   1799c:	andeq	r7, r1, r8, lsr lr
   179a0:	andeq	r7, r1, r8, lsr lr
   179a4:	andeq	r7, r1, r8, lsr lr
   179a8:	andeq	r7, r1, r8, lsr lr
   179ac:	andeq	r7, r1, r8, lsr lr
   179b0:	andeq	r7, r1, r8, lsr lr
   179b4:	andeq	r7, r1, r8, lsr lr
   179b8:	andeq	r7, r1, r8, lsr lr
   179bc:	andeq	r7, r1, r8, lsr lr
   179c0:	andeq	r7, r1, r8, lsr lr
   179c4:	andeq	r7, r1, r8, lsr lr
   179c8:	andeq	r7, r1, r8, lsr lr
   179cc:	andeq	r7, r1, r8, lsr lr
   179d0:	andeq	r7, r1, r8, lsr lr
   179d4:	andeq	r7, r1, r8, lsr lr
   179d8:	andeq	r7, r1, r8, lsr lr
   179dc:	andeq	r7, r1, r8, lsr lr
   179e0:	andeq	r7, r1, r8, lsr lr
   179e4:	andeq	r7, r1, r8, lsr lr
   179e8:	andeq	r7, r1, r8, lsr lr
   179ec:	andeq	r7, r1, r8, lsr lr
   179f0:	andeq	r7, r1, r8, lsr lr
   179f4:	andeq	r7, r1, r8, lsr lr
   179f8:	andeq	r7, r1, r8, lsr lr
   179fc:			; <UNDEFINED> instruction: 0x00017cb0
   17a00:	andeq	r7, r1, r0, asr #25
   17a04:	ldrdeq	r7, [r1], -r4
   17a08:	tst	r9, #2048	; 0x800
   17a0c:	bne	17ccc <__assert_fail@plt+0x67b4>
   17a10:	b	17e38 <__assert_fail@plt+0x6920>
   17a14:	bl	113d4 <__ctype_b_loc@plt>
   17a18:	ldr	r0, [r0]
   17a1c:	add	r0, r0, r6, lsl #1
   17a20:	ldrh	r0, [r0]
   17a24:	ubfx	r0, r0, #3, #1
   17a28:	cmp	r6, #95	; 0x5f
   17a2c:	movweq	r0, #1
   17a30:	orr	r0, r4, r0, lsl #22
   17a34:	str	r0, [r5]
   17a38:	sub	r1, r6, #39	; 0x27
   17a3c:	mov	r8, #2
   17a40:	cmp	r1, #86	; 0x56
   17a44:	bhi	17e38 <__assert_fail@plt+0x6920>
   17a48:	add	r2, pc, #0
   17a4c:	ldr	pc, [r2, r1, lsl #2]
   17a50:	andeq	r7, r1, r0, lsl sp
   17a54:	andeq	r7, r1, r0, lsr #26
   17a58:	andeq	r7, r1, r0, lsr sp
   17a5c:	andeq	r7, r1, r8, lsr lr
   17a60:	andeq	r7, r1, r0, asr #26
   17a64:	andeq	r7, r1, r8, lsr lr
   17a68:	andeq	r7, r1, r8, lsr lr
   17a6c:	andeq	r7, r1, r8, lsr lr
   17a70:	andeq	r7, r1, r8, lsr lr
   17a74:	andeq	r7, r1, r8, lsr lr
   17a78:	andeq	r7, r1, ip, lsr #23
   17a7c:	andeq	r7, r1, ip, lsr #23
   17a80:	andeq	r7, r1, ip, lsr #23
   17a84:	andeq	r7, r1, ip, lsr #23
   17a88:	andeq	r7, r1, ip, lsr #23
   17a8c:	andeq	r7, r1, ip, lsr #23
   17a90:	andeq	r7, r1, ip, lsr #23
   17a94:	andeq	r7, r1, ip, lsr #23
   17a98:	andeq	r7, r1, ip, lsr #23
   17a9c:	andeq	r7, r1, r8, lsr lr
   17aa0:	andeq	r7, r1, r8, lsr lr
   17aa4:	andeq	r7, r1, r8, asr sp
   17aa8:	andeq	r7, r1, r8, lsr lr
   17aac:	andeq	r7, r1, r8, ror #26
   17ab0:	andeq	r7, r1, r8, ror sp
   17ab4:	andeq	r7, r1, r8, lsr lr
   17ab8:	andeq	r7, r1, r8, lsr lr
   17abc:	muleq	r1, r0, sp
   17ac0:	andeq	r7, r1, r8, lsr lr
   17ac4:	andeq	r7, r1, r8, lsr lr
   17ac8:	andeq	r7, r1, r8, lsr lr
   17acc:	andeq	r7, r1, r8, lsr lr
   17ad0:	andeq	r7, r1, r8, lsr lr
   17ad4:	andeq	r7, r1, r8, lsr lr
   17ad8:	andeq	r7, r1, r8, lsr lr
   17adc:	andeq	r7, r1, r8, lsr lr
   17ae0:	andeq	r7, r1, r8, lsr lr
   17ae4:	andeq	r7, r1, r8, lsr lr
   17ae8:	andeq	r7, r1, r8, lsr lr
   17aec:	andeq	r7, r1, r8, lsr lr
   17af0:	andeq	r7, r1, r8, lsr lr
   17af4:	andeq	r7, r1, r8, lsr lr
   17af8:	andeq	r7, r1, r8, lsr lr
   17afc:	andeq	r7, r1, r8, lsr lr
   17b00:	andeq	r7, r1, r0, lsr #27
   17b04:	andeq	r7, r1, r8, lsr lr
   17b08:	andeq	r7, r1, r8, lsr lr
   17b0c:	andeq	r7, r1, r8, lsr lr
   17b10:			; <UNDEFINED> instruction: 0x00017db0
   17b14:	andeq	r7, r1, r8, lsr lr
   17b18:	andeq	r7, r1, r8, lsr lr
   17b1c:	andeq	r7, r1, r8, lsr lr
   17b20:	andeq	r7, r1, r8, lsr lr
   17b24:	andeq	r7, r1, r8, lsr lr
   17b28:	andeq	r7, r1, r8, lsr lr
   17b2c:	andeq	r7, r1, r8, lsr lr
   17b30:	andeq	r7, r1, r8, lsr lr
   17b34:	andeq	r7, r1, r0, asr #27
   17b38:	andeq	r7, r1, r8, lsr lr
   17b3c:	ldrdeq	r7, [r1], -r0
   17b40:	andeq	r7, r1, r8, lsr lr
   17b44:	andeq	r7, r1, r8, lsr lr
   17b48:	andeq	r7, r1, r8, lsr lr
   17b4c:	andeq	r7, r1, r8, lsr lr
   17b50:	andeq	r7, r1, r8, lsr lr
   17b54:	andeq	r7, r1, r8, lsr lr
   17b58:	andeq	r7, r1, r8, lsr lr
   17b5c:	andeq	r7, r1, r8, lsr lr
   17b60:	andeq	r7, r1, r8, lsr lr
   17b64:	andeq	r7, r1, r8, lsr lr
   17b68:	andeq	r7, r1, r8, lsr lr
   17b6c:	andeq	r7, r1, r8, lsr lr
   17b70:	andeq	r7, r1, r8, lsr lr
   17b74:	andeq	r7, r1, r8, lsr lr
   17b78:	andeq	r7, r1, r8, lsr lr
   17b7c:	andeq	r7, r1, r8, lsr lr
   17b80:	andeq	r7, r1, r0, ror #27
   17b84:	andeq	r7, r1, r8, lsr lr
   17b88:	andeq	r7, r1, r8, lsr lr
   17b8c:	andeq	r7, r1, r8, lsr lr
   17b90:	strdeq	r7, [r1], -r0
   17b94:	andeq	r7, r1, r8, lsr lr
   17b98:	andeq	r7, r1, r8, lsr lr
   17b9c:	andeq	r7, r1, r8, lsr lr
   17ba0:	andeq	r7, r1, r0, lsl #28
   17ba4:	andeq	r7, r1, r4, lsl lr
   17ba8:	andeq	r7, r1, r0, lsr #28
   17bac:	tst	r9, #16384	; 0x4000
   17bb0:	bne	17e38 <__assert_fail@plt+0x6920>
   17bb4:	sub	r1, r6, #49	; 0x31
   17bb8:	mov	r2, #4
   17bbc:	b	17ca0 <__assert_fail@plt+0x6788>
   17bc0:	and	r0, r4, r8
   17bc4:	orr	r0, r0, #1
   17bc8:	orr	r0, r0, #2097152	; 0x200000
   17bcc:	str	r0, [r5]
   17bd0:	mov	r8, #1
   17bd4:	b	17e38 <__assert_fail@plt+0x6920>
   17bd8:	tst	r9, #8
   17bdc:	bne	17c24 <__assert_fail@plt+0x670c>
   17be0:	ldr	r0, [r7, #40]	; 0x28
   17be4:	ldr	r1, [r7, #48]	; 0x30
   17be8:	add	r0, r0, #1
   17bec:	cmp	r0, r1
   17bf0:	beq	17c24 <__assert_fail@plt+0x670c>
   17bf4:	str	r0, [r7, #40]	; 0x28
   17bf8:	add	r0, sp, #4
   17bfc:	mov	r1, r7
   17c00:	mov	r2, r9
   17c04:	bl	17690 <__assert_fail@plt+0x6178>
   17c08:	ldr	r0, [r7, #40]	; 0x28
   17c0c:	sub	r0, r0, #1
   17c10:	str	r0, [r7, #40]	; 0x28
   17c14:	ldrb	r0, [sp, #8]
   17c18:	sub	r0, r0, #9
   17c1c:	cmp	r0, #1
   17c20:	bhi	17e38 <__assert_fail@plt+0x6920>
   17c24:	mov	r0, #32
   17c28:	str	r0, [sl]
   17c2c:	mov	r0, #12
   17c30:	strb	r0, [sl, #4]
   17c34:	b	17e38 <__assert_fail@plt+0x6920>
   17c38:	tst	r9, #8192	; 0x2000
   17c3c:	bne	17d28 <__assert_fail@plt+0x6810>
   17c40:	b	17e38 <__assert_fail@plt+0x6920>
   17c44:	tst	r9, #8192	; 0x2000
   17c48:	bne	17d38 <__assert_fail@plt+0x6820>
   17c4c:	b	17e38 <__assert_fail@plt+0x6920>
   17c50:	mov	r1, #11
   17c54:	b	17e30 <__assert_fail@plt+0x6918>
   17c58:	movw	r1, #1026	; 0x402
   17c5c:	tst	r9, r1
   17c60:	bne	17e38 <__assert_fail@plt+0x6920>
   17c64:	b	17d50 <__assert_fail@plt+0x6838>
   17c68:	mov	r1, #5
   17c6c:	b	17e30 <__assert_fail@plt+0x6918>
   17c70:	movw	r1, #1026	; 0x402
   17c74:	tst	r9, r1
   17c78:	bne	17e38 <__assert_fail@plt+0x6920>
   17c7c:	b	17d88 <__assert_fail@plt+0x6870>
   17c80:	mov	r1, #20
   17c84:	b	17e30 <__assert_fail@plt+0x6918>
   17c88:	movw	r1, #8
   17c8c:	movt	r1, #128	; 0x80
   17c90:	tst	r9, r1
   17c94:	beq	17ce4 <__assert_fail@plt+0x67cc>
   17c98:	mov	r1, #16
   17c9c:	mov	r2, #12
   17ca0:	bfi	r0, r2, #0, #8
   17ca4:	str	r1, [sl]
   17ca8:	str	r0, [sl, #4]
   17cac:	b	17e38 <__assert_fail@plt+0x6920>
   17cb0:	and	r1, r9, #4608	; 0x1200
   17cb4:	cmp	r1, #4608	; 0x1200
   17cb8:	beq	17e0c <__assert_fail@plt+0x68f4>
   17cbc:	b	17e38 <__assert_fail@plt+0x6920>
   17cc0:	and	r1, r9, #33792	; 0x8400
   17cc4:	cmp	r1, #32768	; 0x8000
   17cc8:	bne	17e38 <__assert_fail@plt+0x6920>
   17ccc:	mov	r1, #10
   17cd0:	b	17e30 <__assert_fail@plt+0x6918>
   17cd4:	and	r1, r9, #4608	; 0x1200
   17cd8:	cmp	r1, #4608	; 0x1200
   17cdc:	beq	17e2c <__assert_fail@plt+0x6914>
   17ce0:	b	17e38 <__assert_fail@plt+0x6920>
   17ce4:	ldr	r1, [r7, #40]	; 0x28
   17ce8:	cmp	r1, #0
   17cec:	beq	17c98 <__assert_fail@plt+0x6780>
   17cf0:	tst	r9, #2048	; 0x800
   17cf4:	beq	17e38 <__assert_fail@plt+0x6920>
   17cf8:	ldr	r2, [r7, #4]
   17cfc:	add	r1, r2, r1
   17d00:	ldrb	r1, [r1, #-1]
   17d04:	cmp	r1, #10
   17d08:	beq	17c98 <__assert_fail@plt+0x6780>
   17d0c:	b	17e38 <__assert_fail@plt+0x6920>
   17d10:	tst	r9, #524288	; 0x80000
   17d14:	bne	17e38 <__assert_fail@plt+0x6920>
   17d18:	mov	r1, #128	; 0x80
   17d1c:	b	17c9c <__assert_fail@plt+0x6784>
   17d20:	tst	r9, #8192	; 0x2000
   17d24:	bne	17e38 <__assert_fail@plt+0x6920>
   17d28:	mov	r1, #8
   17d2c:	b	17e30 <__assert_fail@plt+0x6918>
   17d30:	tst	r9, #8192	; 0x2000
   17d34:	bne	17e38 <__assert_fail@plt+0x6920>
   17d38:	mov	r1, #9
   17d3c:	b	17e30 <__assert_fail@plt+0x6918>
   17d40:	movw	r1, #1026	; 0x402
   17d44:	and	r1, r9, r1
   17d48:	cmp	r1, #2
   17d4c:	bne	17e38 <__assert_fail@plt+0x6920>
   17d50:	mov	r1, #18
   17d54:	b	17e30 <__assert_fail@plt+0x6918>
   17d58:	tst	r9, #524288	; 0x80000
   17d5c:	bne	17e38 <__assert_fail@plt+0x6920>
   17d60:	mov	r1, #6
   17d64:	b	17c9c <__assert_fail@plt+0x6784>
   17d68:	tst	r9, #524288	; 0x80000
   17d6c:	bne	17e38 <__assert_fail@plt+0x6920>
   17d70:	mov	r1, #9
   17d74:	b	17c9c <__assert_fail@plt+0x6784>
   17d78:	movw	r1, #1026	; 0x402
   17d7c:	and	r1, r9, r1
   17d80:	cmp	r1, #2
   17d84:	bne	17e38 <__assert_fail@plt+0x6920>
   17d88:	mov	r1, #19
   17d8c:	b	17e30 <__assert_fail@plt+0x6918>
   17d90:	tst	r9, #524288	; 0x80000
   17d94:	bne	17e38 <__assert_fail@plt+0x6920>
   17d98:	mov	r1, #512	; 0x200
   17d9c:	b	17c9c <__assert_fail@plt+0x6784>
   17da0:	tst	r9, #524288	; 0x80000
   17da4:	bne	17e38 <__assert_fail@plt+0x6920>
   17da8:	mov	r1, #35	; 0x23
   17dac:	b	17e30 <__assert_fail@plt+0x6918>
   17db0:	tst	r9, #524288	; 0x80000
   17db4:	bne	17e38 <__assert_fail@plt+0x6920>
   17db8:	mov	r1, #33	; 0x21
   17dbc:	b	17e30 <__assert_fail@plt+0x6918>
   17dc0:	tst	r9, #524288	; 0x80000
   17dc4:	bne	17e38 <__assert_fail@plt+0x6920>
   17dc8:	mov	r1, #64	; 0x40
   17dcc:	b	17c9c <__assert_fail@plt+0x6784>
   17dd0:	tst	r9, #524288	; 0x80000
   17dd4:	bne	17e38 <__assert_fail@plt+0x6920>
   17dd8:	mov	r1, #256	; 0x100
   17ddc:	b	17c9c <__assert_fail@plt+0x6784>
   17de0:	tst	r9, #524288	; 0x80000
   17de4:	bne	17e38 <__assert_fail@plt+0x6920>
   17de8:	mov	r1, #34	; 0x22
   17dec:	b	17e30 <__assert_fail@plt+0x6918>
   17df0:	tst	r9, #524288	; 0x80000
   17df4:	bne	17e38 <__assert_fail@plt+0x6920>
   17df8:	mov	r1, #32
   17dfc:	b	17e30 <__assert_fail@plt+0x6918>
   17e00:	and	r1, r9, #4608	; 0x1200
   17e04:	cmp	r1, #512	; 0x200
   17e08:	bne	17e38 <__assert_fail@plt+0x6920>
   17e0c:	mov	r1, #23
   17e10:	b	17e30 <__assert_fail@plt+0x6918>
   17e14:	tst	r9, #33792	; 0x8400
   17e18:	bne	17e38 <__assert_fail@plt+0x6920>
   17e1c:	b	17ccc <__assert_fail@plt+0x67b4>
   17e20:	and	r1, r9, #4608	; 0x1200
   17e24:	cmp	r1, #512	; 0x200
   17e28:	bne	17e38 <__assert_fail@plt+0x6920>
   17e2c:	mov	r1, #24
   17e30:	bfi	r0, r1, #0, #8
   17e34:	str	r0, [r5]
   17e38:	mov	r0, r8
   17e3c:	sub	sp, fp, #28
   17e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e44:	ldrb	r1, [r0, #75]	; 0x4b
   17e48:	cmp	r1, #0
   17e4c:	bne	17e6c <__assert_fail@plt+0x6954>
   17e50:	ldr	r1, [r0, #4]
   17e54:	ldr	r0, [r0, #40]	; 0x28
   17e58:	add	r0, r1, r0
   17e5c:	add	r0, r0, #1
   17e60:	ldrb	r3, [r0]
   17e64:	uxtb	r0, r3
   17e68:	bx	lr
   17e6c:	ldr	r1, [r0, #80]	; 0x50
   17e70:	cmp	r1, #2
   17e74:	blt	17eac <__assert_fail@plt+0x6994>
   17e78:	ldr	r2, [r0, #8]
   17e7c:	ldr	r3, [r0, #40]	; 0x28
   17e80:	add	ip, r3, #1
   17e84:	ldr	r1, [r2, ip, lsl #2]
   17e88:	cmn	r1, #1
   17e8c:	beq	17ef8 <__assert_fail@plt+0x69e0>
   17e90:	ldr	r1, [r0, #28]
   17e94:	add	r3, r3, #2
   17e98:	cmp	r1, r3
   17e9c:	beq	17eac <__assert_fail@plt+0x6994>
   17ea0:	ldr	r1, [r2, r3, lsl #2]
   17ea4:	cmn	r1, #1
   17ea8:	beq	17ef8 <__assert_fail@plt+0x69e0>
   17eac:	push	{fp, lr}
   17eb0:	mov	fp, sp
   17eb4:	ldrb	lr, [r0, #76]	; 0x4c
   17eb8:	ldr	r1, [r0, #40]	; 0x28
   17ebc:	add	ip, r1, #1
   17ec0:	cmp	lr, #0
   17ec4:	mov	r3, ip
   17ec8:	ldrne	r3, [r0, #12]
   17ecc:	ldrne	r3, [r3, ip, lsl #2]
   17ed0:	ldr	r1, [r0]
   17ed4:	ldr	r2, [r0, #24]
   17ed8:	add	r2, r2, r3
   17edc:	add	r1, r1, r2
   17ee0:	ldrsb	r3, [r1]
   17ee4:	cmp	lr, #0
   17ee8:	pop	{fp, lr}
   17eec:	beq	17e64 <__assert_fail@plt+0x694c>
   17ef0:	cmn	r3, #1
   17ef4:	bgt	17e64 <__assert_fail@plt+0x694c>
   17ef8:	ldr	r0, [r0, #4]
   17efc:	add	r0, r0, ip
   17f00:	b	17e60 <__assert_fail@plt+0x6948>
   17f04:	ldr	r2, [r0, #80]	; 0x50
   17f08:	cmp	r2, #1
   17f0c:	ldrne	r0, [r0, #8]
   17f10:	ldrne	r0, [r0, r1, lsl #2]
   17f14:	ldreq	r0, [r0, #4]
   17f18:	ldrbeq	r0, [r0, r1]
   17f1c:	bx	lr
   17f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f24:	add	fp, sp, #28
   17f28:	sub	sp, sp, #20
   17f2c:	mov	r6, r2
   17f30:	mov	r7, r1
   17f34:	mov	r1, r0
   17f38:	ldr	r0, [r7]
   17f3c:	str	r0, [sp, #8]
   17f40:	ldr	r5, [fp, #12]
   17f44:	str	r5, [sp, #4]
   17f48:	ldr	r4, [fp, #8]
   17f4c:	str	r4, [sp]
   17f50:	str	r1, [sp, #12]
   17f54:	mov	r0, r1
   17f58:	mov	r1, r7
   17f5c:	str	r3, [sp, #16]
   17f60:	bl	18120 <__assert_fail@plt+0x6c08>
   17f64:	cmp	r0, #0
   17f68:	bne	17f90 <__assert_fail@plt+0x6a78>
   17f6c:	ldr	r1, [r5]
   17f70:	cmp	r1, #0
   17f74:	beq	17f90 <__assert_fail@plt+0x6a78>
   17f78:	mov	r6, #0
   17f7c:	b	1805c <__assert_fail@plt+0x6b44>
   17f80:	cmp	r5, #0
   17f84:	movne	r8, r5
   17f88:	mov	r0, r8
   17f8c:	mov	r4, r9
   17f90:	mov	r5, r0
   17f94:	ldrb	r0, [r6, #4]
   17f98:	orr	r1, r0, #8
   17f9c:	cmp	r1, #10
   17fa0:	beq	18058 <__assert_fail@plt+0x6b40>
   17fa4:	cmp	r4, #0
   17fa8:	beq	17fb4 <__assert_fail@plt+0x6a9c>
   17fac:	cmp	r0, #9
   17fb0:	beq	18058 <__assert_fail@plt+0x6b40>
   17fb4:	mov	r9, r4
   17fb8:	str	r4, [sp]
   17fbc:	ldr	sl, [fp, #12]
   17fc0:	str	sl, [sp, #4]
   17fc4:	ldr	r0, [sp, #12]
   17fc8:	mov	r1, r7
   17fcc:	mov	r2, r6
   17fd0:	ldr	r3, [sp, #16]
   17fd4:	bl	18120 <__assert_fail@plt+0x6c08>
   17fd8:	mov	r8, r0
   17fdc:	cmp	r0, #0
   17fe0:	bne	17ff0 <__assert_fail@plt+0x6ad8>
   17fe4:	ldr	r0, [sl]
   17fe8:	cmp	r0, #0
   17fec:	bne	18068 <__assert_fail@plt+0x6b50>
   17ff0:	cmp	r5, #0
   17ff4:	cmpne	r8, #0
   17ff8:	beq	17f80 <__assert_fail@plt+0x6a68>
   17ffc:	ldr	r0, [sp, #8]
   18000:	mov	r1, r5
   18004:	mov	r2, r8
   18008:	mov	r3, #16
   1800c:	bl	17658 <__assert_fail@plt+0x6140>
   18010:	cmp	r0, #0
   18014:	mov	r4, r9
   18018:	bne	17f90 <__assert_fail@plt+0x6a78>
   1801c:	movw	r4, #33032	; 0x8108
   18020:	movt	r4, #1
   18024:	mov	r6, #0
   18028:	mov	r0, r8
   1802c:	mov	r1, r4
   18030:	mov	r2, #0
   18034:	bl	18090 <__assert_fail@plt+0x6b78>
   18038:	mov	r0, r5
   1803c:	mov	r1, r4
   18040:	mov	r2, #0
   18044:	bl	18090 <__assert_fail@plt+0x6b78>
   18048:	mov	r0, #12
   1804c:	ldr	r1, [fp, #12]
   18050:	str	r0, [r1]
   18054:	b	1805c <__assert_fail@plt+0x6b44>
   18058:	mov	r6, r5
   1805c:	mov	r0, r6
   18060:	sub	sp, fp, #28
   18064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18068:	cmp	r5, #0
   1806c:	mov	r6, #0
   18070:	beq	1805c <__assert_fail@plt+0x6b44>
   18074:	movw	r1, #33032	; 0x8108
   18078:	movt	r1, #1
   1807c:	mov	r6, #0
   18080:	mov	r0, r5
   18084:	mov	r2, #0
   18088:	bl	18090 <__assert_fail@plt+0x6b78>
   1808c:	b	1805c <__assert_fail@plt+0x6b44>
   18090:	push	{r4, r5, r6, sl, fp, lr}
   18094:	add	fp, sp, #16
   18098:	mov	r4, r2
   1809c:	mov	r5, r1
   180a0:	b	180a8 <__assert_fail@plt+0x6b90>
   180a4:	ldr	r0, [r6, #8]
   180a8:	mov	r6, r0
   180ac:	ldr	r0, [r0, #4]
   180b0:	cmp	r0, #0
   180b4:	bne	180a8 <__assert_fail@plt+0x6b90>
   180b8:	ldr	r0, [r6, #8]
   180bc:	cmp	r0, #0
   180c0:	bne	180a4 <__assert_fail@plt+0x6b8c>
   180c4:	mov	r0, r4
   180c8:	mov	r1, r6
   180cc:	blx	r5
   180d0:	cmp	r0, #0
   180d4:	bne	18104 <__assert_fail@plt+0x6bec>
   180d8:	ldr	r1, [r6]
   180dc:	cmp	r1, #0
   180e0:	popeq	{r4, r5, r6, sl, fp, pc}
   180e4:	ldr	r0, [r1, #8]
   180e8:	cmp	r0, r6
   180ec:	mov	r6, r1
   180f0:	beq	180c4 <__assert_fail@plt+0x6bac>
   180f4:	cmp	r0, #0
   180f8:	mov	r6, r1
   180fc:	beq	180c4 <__assert_fail@plt+0x6bac>
   18100:	b	180a8 <__assert_fail@plt+0x6b90>
   18104:	pop	{r4, r5, r6, sl, fp, pc}
   18108:	push	{fp, lr}
   1810c:	mov	fp, sp
   18110:	add	r0, r1, #20
   18114:	bl	160f4 <__assert_fail@plt+0x4bdc>
   18118:	mov	r0, #0
   1811c:	pop	{fp, pc}
   18120:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18124:	add	fp, sp, #28
   18128:	sub	sp, sp, #12
   1812c:	mov	r9, r3
   18130:	mov	r5, r2
   18134:	mov	r6, r1
   18138:	mov	sl, r0
   1813c:	and	ip, r3, #16
   18140:	and	r8, r3, #32
   18144:	and	r0, r3, #16777216	; 0x1000000
   18148:	str	r0, [sp, #8]
   1814c:	ldr	r3, [fp, #12]
   18150:	ldr	r4, [fp, #8]
   18154:	mvn	r1, #0
   18158:	b	1817c <__assert_fail@plt+0x6c64>
   1815c:	mov	r0, r5
   18160:	mov	r1, sl
   18164:	mov	r2, r9
   18168:	mov	r7, ip
   1816c:	bl	174cc <__assert_fail@plt+0x5fb4>
   18170:	mvn	r1, #0
   18174:	mov	ip, r7
   18178:	ldr	r3, [fp, #12]
   1817c:	ldr	r0, [r5, #4]
   18180:	uxtab	r1, r1, r0
   18184:	ldr	r7, [r6]
   18188:	cmp	r1, #35	; 0x23
   1818c:	bhi	18234 <__assert_fail@plt+0x6d1c>
   18190:	add	r2, pc, #0
   18194:	ldr	pc, [r2, r1, lsl #2]
   18198:	strdeq	r8, [r1], -ip
   1819c:			; <UNDEFINED> instruction: 0x000186b4
   181a0:	andeq	r8, r1, r4, lsr r2
   181a4:			; <UNDEFINED> instruction: 0x000183b8
   181a8:	andeq	r8, r1, r4, lsl r4
   181ac:	andeq	r8, r1, r4, lsr r2
   181b0:	andeq	r8, r1, r4, lsr r2
   181b4:	andeq	r8, r1, r8, asr r4
   181b8:	andeq	r8, r1, r4, asr #4
   181bc:			; <UNDEFINED> instruction: 0x000186b4
   181c0:	andeq	r8, r1, r4, lsr r2
   181c4:	andeq	r8, r1, r0, lsl #9
   181c8:	andeq	r8, r1, r4, lsr r2
   181cc:	andeq	r8, r1, r4, lsr r2
   181d0:	andeq	r8, r1, r4, lsr r2
   181d4:	andeq	r8, r1, r4, lsr r2
   181d8:	andeq	r8, r1, r4, lsr r2
   181dc:	andeq	r8, r1, r4, lsr r2
   181e0:	andeq	r8, r1, r4, lsr r2
   181e4:	andeq	r8, r1, r0, asr #9
   181e8:	andeq	r8, r1, r4, lsr r2
   181ec:	andeq	r8, r1, r4, lsr r2
   181f0:	andeq	r8, r1, r8, lsr #4
   181f4:	andeq	r8, r1, r4, asr r2
   181f8:	andeq	r8, r1, r4, lsr r2
   181fc:	andeq	r8, r1, r4, lsr r2
   18200:	andeq	r8, r1, r4, lsr r2
   18204:	andeq	r8, r1, r4, lsr r2
   18208:	andeq	r8, r1, r4, lsr r2
   1820c:	andeq	r8, r1, r4, lsr r2
   18210:	andeq	r8, r1, r4, lsr r2
   18214:	andeq	r8, r1, ip, lsl #5
   18218:	andeq	r8, r1, ip, lsl #5
   1821c:	andeq	r8, r1, r0, asr #5
   18220:	andeq	r8, r1, r0, asr #5
   18224:			; <UNDEFINED> instruction: 0x000185b8
   18228:	ldr	r1, [sp, #8]
   1822c:	cmp	r1, #0
   18230:	bne	18684 <__assert_fail@plt+0x716c>
   18234:	cmp	r8, #0
   18238:	bne	18684 <__assert_fail@plt+0x716c>
   1823c:	cmp	ip, #0
   18240:	bne	1815c <__assert_fail@plt+0x6c44>
   18244:	tst	r9, #131072	; 0x20000
   18248:	uxtbeq	r1, r0
   1824c:	cmpeq	r1, #9
   18250:	beq	185c4 <__assert_fail@plt+0x70ac>
   18254:	mov	r1, #1
   18258:	bfi	r0, r1, #0, #8
   1825c:	str	r0, [r5, #4]
   18260:	mov	r4, #0
   18264:	mov	r0, r7
   18268:	mov	r1, #0
   1826c:	mov	r2, #0
   18270:	mov	r3, r5
   18274:	bl	186d0 <__assert_fail@plt+0x71b8>
   18278:	mov	r6, r0
   1827c:	cmp	r0, #0
   18280:	mov	r8, sl
   18284:	bne	184f8 <__assert_fail@plt+0x6fe0>
   18288:	b	18638 <__assert_fail@plt+0x7120>
   1828c:	mov	r8, sl
   18290:	ldr	r1, [sl, #64]	; 0x40
   18294:	mvn	r2, #32
   18298:	uxtab	r0, r2, r0
   1829c:	clz	r0, r0
   182a0:	lsr	r0, r0, #5
   182a4:	stm	sp, {r0, r3}
   182a8:	movw	r2, #16150	; 0x3f16
   182ac:	movt	r2, #2
   182b0:	mov	r4, r3
   182b4:	movw	r3, #14649	; 0x3939
   182b8:	movt	r3, #2
   182bc:	b	182f0 <__assert_fail@plt+0x6dd8>
   182c0:	mov	r8, sl
   182c4:	ldr	r1, [sl, #64]	; 0x40
   182c8:	mvn	r2, #34	; 0x22
   182cc:	uxtab	r0, r2, r0
   182d0:	clz	r0, r0
   182d4:	lsr	r0, r0, #5
   182d8:	stm	sp, {r0, r3}
   182dc:	movw	r2, #16156	; 0x3f1c
   182e0:	movt	r2, #2
   182e4:	mov	r4, r3
   182e8:	movw	r3, #14990	; 0x3a8e
   182ec:	movt	r3, #2
   182f0:	mov	r0, r7
   182f4:	bl	18e8c <__assert_fail@plt+0x7974>
   182f8:	b	184e0 <__assert_fail@plt+0x6fc8>
   182fc:	mov	r4, #0
   18300:	mov	r0, r7
   18304:	mov	r1, #0
   18308:	mov	r2, #0
   1830c:	mov	r3, r5
   18310:	bl	186d0 <__assert_fail@plt+0x71b8>
   18314:	cmp	r0, #0
   18318:	beq	18638 <__assert_fail@plt+0x7120>
   1831c:	mov	r6, r0
   18320:	ldr	r0, [r7, #92]	; 0x5c
   18324:	cmp	r0, #2
   18328:	mov	r8, sl
   1832c:	blt	184f8 <__assert_fail@plt+0x6fe0>
   18330:	ldr	r0, [r8, #40]	; 0x28
   18334:	ldr	r1, [r8, #56]	; 0x38
   18338:	cmp	r1, r0
   1833c:	ble	184f8 <__assert_fail@plt+0x6fe0>
   18340:	ldr	r1, [r8, #28]
   18344:	cmp	r0, r1
   18348:	beq	184f8 <__assert_fail@plt+0x6fe0>
   1834c:	ldr	r1, [r8, #8]
   18350:	ldr	r0, [r1, r0, lsl #2]
   18354:	cmn	r0, #1
   18358:	bne	184f8 <__assert_fail@plt+0x6fe0>
   1835c:	mov	r0, r5
   18360:	mov	r1, r8
   18364:	mov	r2, r9
   18368:	bl	174cc <__assert_fail@plt+0x5fb4>
   1836c:	mov	r0, r7
   18370:	mov	r1, #0
   18374:	mov	r2, #0
   18378:	mov	r3, r5
   1837c:	bl	186d0 <__assert_fail@plt+0x71b8>
   18380:	mov	r4, r0
   18384:	mov	r0, r7
   18388:	mov	r1, r6
   1838c:	mov	r2, r4
   18390:	mov	r3, #16
   18394:	bl	17658 <__assert_fail@plt+0x6140>
   18398:	cmp	r4, #0
   1839c:	ldr	r1, [fp, #12]
   183a0:	movne	r6, r0
   183a4:	cmpne	r0, #0
   183a8:	bne	18330 <__assert_fail@plt+0x6e18>
   183ac:	mov	r0, #12
   183b0:	str	r0, [r1]
   183b4:	b	186b4 <__assert_fail@plt+0x719c>
   183b8:	ldr	r0, [r5]
   183bc:	mov	r1, #1
   183c0:	ldr	r2, [r7, #84]	; 0x54
   183c4:	tst	r2, r1, lsl r0
   183c8:	beq	186c4 <__assert_fail@plt+0x71ac>
   183cc:	lsl	r0, r1, r0
   183d0:	ldr	r1, [r7, #80]	; 0x50
   183d4:	orr	r0, r1, r0
   183d8:	str	r0, [r7, #80]	; 0x50
   183dc:	mov	r4, #0
   183e0:	mov	r0, r7
   183e4:	mov	r1, #0
   183e8:	mov	r2, #0
   183ec:	mov	r3, r5
   183f0:	bl	186d0 <__assert_fail@plt+0x71b8>
   183f4:	cmp	r0, #0
   183f8:	beq	18638 <__assert_fail@plt+0x7120>
   183fc:	mov	r6, r0
   18400:	mov	r8, sl
   18404:	ldr	r0, [r7, #76]	; 0x4c
   18408:	add	r0, r0, #1
   1840c:	str	r0, [r7, #76]	; 0x4c
   18410:	b	18448 <__assert_fail@plt+0x6f30>
   18414:	mov	r4, #0
   18418:	mov	r0, r7
   1841c:	mov	r1, #0
   18420:	mov	r2, #0
   18424:	mov	r3, r5
   18428:	bl	186d0 <__assert_fail@plt+0x71b8>
   1842c:	cmp	r0, #0
   18430:	beq	18638 <__assert_fail@plt+0x7120>
   18434:	mov	r6, r0
   18438:	ldr	r0, [r7, #92]	; 0x5c
   1843c:	cmp	r0, #2
   18440:	mov	r8, sl
   18444:	blt	184f8 <__assert_fail@plt+0x6fe0>
   18448:	ldrb	r0, [r7, #88]	; 0x58
   1844c:	orr	r0, r0, #2
   18450:	strb	r0, [r7, #88]	; 0x58
   18454:	b	184f8 <__assert_fail@plt+0x6fe0>
   18458:	add	r0, r4, #1
   1845c:	stm	sp, {r0, r3}
   18460:	mov	r8, sl
   18464:	mov	r0, sl
   18468:	mov	r1, r6
   1846c:	mov	r2, r5
   18470:	mov	r4, r3
   18474:	mov	r3, r9
   18478:	bl	18778 <__assert_fail@plt+0x7260>
   1847c:	b	184e0 <__assert_fail@plt+0x6fc8>
   18480:	ldr	r0, [r5]
   18484:	movw	r1, #783	; 0x30f
   18488:	tst	r0, r1
   1848c:	beq	184a4 <__assert_fail@plt+0x6f8c>
   18490:	ldrb	r0, [r7, #88]	; 0x58
   18494:	tst	r0, #16
   18498:	moveq	r0, r7
   1849c:	bleq	18db0 <__assert_fail@plt+0x7898>
   184a0:	ldr	r0, [r5]
   184a4:	cmp	r0, #256	; 0x100
   184a8:	beq	185d0 <__assert_fail@plt+0x70b8>
   184ac:	cmp	r0, #512	; 0x200
   184b0:	bne	18648 <__assert_fail@plt+0x7130>
   184b4:	mov	r6, #10
   184b8:	mov	r0, #5
   184bc:	b	185d8 <__assert_fail@plt+0x70c0>
   184c0:	str	r3, [sp]
   184c4:	mov	r8, sl
   184c8:	mov	r0, sl
   184cc:	mov	r1, r7
   184d0:	mov	r2, r5
   184d4:	mov	r4, r3
   184d8:	mov	r3, r9
   184dc:	bl	1888c <__assert_fail@plt+0x7374>
   184e0:	mov	r6, r0
   184e4:	cmp	r0, #0
   184e8:	bne	184f8 <__assert_fail@plt+0x6fe0>
   184ec:	ldr	r0, [r4]
   184f0:	cmp	r0, #0
   184f4:	bne	186b4 <__assert_fail@plt+0x719c>
   184f8:	mov	r0, r5
   184fc:	mov	r1, r8
   18500:	mov	r2, r9
   18504:	bl	174cc <__assert_fail@plt+0x5fb4>
   18508:	mov	r4, #1
   1850c:	movw	r8, #2048	; 0x800
   18510:	movt	r8, #140	; 0x8c
   18514:	ldr	r2, [fp, #12]
   18518:	ldrb	r0, [r5, #4]
   1851c:	cmp	r0, #23
   18520:	bhi	185b0 <__assert_fail@plt+0x7098>
   18524:	tst	r8, r4, lsl r0
   18528:	beq	185b0 <__assert_fail@plt+0x7098>
   1852c:	str	r9, [sp]
   18530:	str	r2, [sp, #4]
   18534:	mov	r0, r6
   18538:	mov	r1, sl
   1853c:	mov	r2, r7
   18540:	mov	r3, r5
   18544:	bl	1907c <__assert_fail@plt+0x7b64>
   18548:	ldr	r2, [fp, #12]
   1854c:	cmp	r0, #0
   18550:	bne	18560 <__assert_fail@plt+0x7048>
   18554:	ldr	r1, [r2]
   18558:	cmp	r1, #0
   1855c:	bne	18690 <__assert_fail@plt+0x7178>
   18560:	ldr	r1, [sp, #8]
   18564:	cmp	r1, #0
   18568:	mov	r6, r0
   1856c:	beq	18518 <__assert_fail@plt+0x7000>
   18570:	ldrb	r1, [r5, #4]
   18574:	cmp	r1, #23
   18578:	beq	18588 <__assert_fail@plt+0x7070>
   1857c:	cmp	r1, #11
   18580:	mov	r6, r0
   18584:	bne	18518 <__assert_fail@plt+0x7000>
   18588:	cmp	r0, #0
   1858c:	beq	185a4 <__assert_fail@plt+0x708c>
   18590:	movw	r1, #33032	; 0x8108
   18594:	movt	r1, #1
   18598:	mov	r2, #0
   1859c:	bl	18090 <__assert_fail@plt+0x6b78>
   185a0:	ldr	r2, [fp, #12]
   185a4:	mov	r0, #13
   185a8:	str	r0, [r2]
   185ac:	b	186b4 <__assert_fail@plt+0x719c>
   185b0:	mov	r4, r6
   185b4:	b	186b8 <__assert_fail@plt+0x71a0>
   185b8:	mov	r0, #5
   185bc:	str	r0, [r3]
   185c0:	b	186b4 <__assert_fail@plt+0x719c>
   185c4:	mov	r0, #16
   185c8:	str	r0, [r3]
   185cc:	b	186b4 <__assert_fail@plt+0x719c>
   185d0:	mov	r6, #9
   185d4:	mov	r0, #6
   185d8:	str	r0, [r5]
   185dc:	mov	r4, #0
   185e0:	mov	r0, r7
   185e4:	mov	r1, #0
   185e8:	mov	r2, #0
   185ec:	mov	r3, r5
   185f0:	bl	186d0 <__assert_fail@plt+0x71b8>
   185f4:	mov	r8, r0
   185f8:	str	r6, [r5]
   185fc:	mov	r0, r7
   18600:	mov	r1, #0
   18604:	mov	r2, #0
   18608:	mov	r3, r5
   1860c:	bl	186d0 <__assert_fail@plt+0x71b8>
   18610:	mov	r1, r0
   18614:	mov	r0, r7
   18618:	mov	r7, r1
   1861c:	mov	r1, r8
   18620:	mov	r2, r7
   18624:	mov	r3, #10
   18628:	bl	17658 <__assert_fail@plt+0x6140>
   1862c:	cmp	r8, #0
   18630:	cmpne	r7, #0
   18634:	bne	18660 <__assert_fail@plt+0x7148>
   18638:	mov	r0, #12
   1863c:	ldr	r1, [fp, #12]
   18640:	str	r0, [r1]
   18644:	b	186b8 <__assert_fail@plt+0x71a0>
   18648:	mov	r4, #0
   1864c:	mov	r0, r7
   18650:	mov	r1, #0
   18654:	mov	r2, #0
   18658:	mov	r3, r5
   1865c:	bl	186d0 <__assert_fail@plt+0x71b8>
   18660:	mov	r6, r0
   18664:	cmp	r0, #0
   18668:	beq	18638 <__assert_fail@plt+0x7120>
   1866c:	mov	r0, r5
   18670:	mov	r1, sl
   18674:	mov	r2, r9
   18678:	bl	174cc <__assert_fail@plt+0x5fb4>
   1867c:	mov	r4, r6
   18680:	b	186b8 <__assert_fail@plt+0x71a0>
   18684:	mov	r0, #13
   18688:	str	r0, [r3]
   1868c:	b	186b4 <__assert_fail@plt+0x719c>
   18690:	cmp	r6, #0
   18694:	beq	186b4 <__assert_fail@plt+0x719c>
   18698:	movw	r1, #33032	; 0x8108
   1869c:	movt	r1, #1
   186a0:	mov	r4, #0
   186a4:	mov	r0, r6
   186a8:	mov	r2, #0
   186ac:	bl	18090 <__assert_fail@plt+0x6b78>
   186b0:	b	186b8 <__assert_fail@plt+0x71a0>
   186b4:	mov	r4, #0
   186b8:	mov	r0, r4
   186bc:	sub	sp, fp, #28
   186c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186c4:	mov	r0, #6
   186c8:	ldr	r1, [fp, #12]
   186cc:	b	183b0 <__assert_fail@plt+0x6e98>
   186d0:	push	{r4, r5, r6, r7, fp, lr}
   186d4:	add	fp, sp, #16
   186d8:	mov	r6, r3
   186dc:	mov	r4, r2
   186e0:	mov	r5, r1
   186e4:	mov	r7, r0
   186e8:	ldr	r0, [r0, #64]	; 0x40
   186ec:	cmp	r0, #31
   186f0:	beq	1874c <__assert_fail@plt+0x7234>
   186f4:	ldr	r0, [r7, #56]	; 0x38
   186f8:	ldr	r1, [r7, #64]	; 0x40
   186fc:	add	r2, r1, #1
   18700:	str	r2, [r7, #64]	; 0x40
   18704:	add	r0, r0, r1, lsl #5
   18708:	mov	r1, #0
   1870c:	str	r1, [r0, #4]!
   18710:	str	r5, [r0, #4]
   18714:	str	r4, [r0, #8]
   18718:	ldm	r6, {r2, r3}
   1871c:	str	r1, [r0, #12]
   18720:	str	r1, [r0, #16]
   18724:	mvn	r1, #0
   18728:	str	r1, [r0, #28]
   1872c:	str	r2, [r0, #20]
   18730:	bic	r1, r3, #786432	; 0xc0000
   18734:	str	r1, [r0, #24]
   18738:	cmp	r5, #0
   1873c:	strne	r0, [r5]
   18740:	cmp	r4, #0
   18744:	strne	r0, [r4]
   18748:	pop	{r4, r5, r6, r7, fp, pc}
   1874c:	mov	r0, #996	; 0x3e4
   18750:	bl	22624 <__assert_fail@plt+0x1110c>
   18754:	cmp	r0, #0
   18758:	moveq	r0, #0
   1875c:	popeq	{r4, r5, r6, r7, fp, pc}
   18760:	ldr	r1, [r7, #56]	; 0x38
   18764:	str	r1, [r0]
   18768:	mov	r1, #0
   1876c:	str	r1, [r7, #64]	; 0x40
   18770:	str	r0, [r7, #56]	; 0x38
   18774:	b	186f4 <__assert_fail@plt+0x71dc>
   18778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1877c:	add	fp, sp, #28
   18780:	sub	sp, sp, #12
   18784:	mov	r5, r3
   18788:	mov	r6, r2
   1878c:	mov	r7, r1
   18790:	mov	r4, r0
   18794:	ldr	r8, [r1]
   18798:	ldr	sl, [r1, #24]
   1879c:	add	r0, sl, #1
   187a0:	str	r0, [r1, #24]
   187a4:	orr	r2, r3, #8388608	; 0x800000
   187a8:	mov	r0, r6
   187ac:	mov	r1, r4
   187b0:	bl	174cc <__assert_fail@plt+0x5fb4>
   187b4:	ldrb	r0, [r6, #4]
   187b8:	mov	r1, #0
   187bc:	ldr	r9, [fp, #12]
   187c0:	cmp	r0, #9
   187c4:	beq	18810 <__assert_fail@plt+0x72f8>
   187c8:	ldr	r0, [fp, #8]
   187cc:	stm	sp, {r0, r9}
   187d0:	mov	r0, r4
   187d4:	mov	r1, r7
   187d8:	mov	r2, r6
   187dc:	mov	r3, r5
   187e0:	bl	174ec <__assert_fail@plt+0x5fd4>
   187e4:	mov	r1, r0
   187e8:	ldr	r0, [r9]
   187ec:	mov	r5, #0
   187f0:	cmp	r0, #0
   187f4:	bne	18848 <__assert_fail@plt+0x7330>
   187f8:	ldrb	r0, [r6, #4]
   187fc:	cmp	r0, #9
   18800:	bne	18860 <__assert_fail@plt+0x7348>
   18804:	ldr	r0, [r9]
   18808:	cmp	r0, #0
   1880c:	bne	18848 <__assert_fail@plt+0x7330>
   18810:	cmp	sl, #8
   18814:	ldrls	r0, [r8, #84]	; 0x54
   18818:	movls	r2, #1
   1881c:	orrls	r0, r0, r2, lsl sl
   18820:	strls	r0, [r8, #84]	; 0x54
   18824:	mov	r5, #0
   18828:	mov	r0, r8
   1882c:	mov	r2, #0
   18830:	mov	r3, #17
   18834:	bl	17658 <__assert_fail@plt+0x6140>
   18838:	cmp	r0, #0
   1883c:	beq	18854 <__assert_fail@plt+0x733c>
   18840:	str	sl, [r0, #20]
   18844:	mov	r5, r0
   18848:	mov	r0, r5
   1884c:	sub	sp, fp, #28
   18850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18854:	mov	r0, #12
   18858:	str	r0, [r9]
   1885c:	b	18848 <__assert_fail@plt+0x7330>
   18860:	cmp	r1, #0
   18864:	beq	18880 <__assert_fail@plt+0x7368>
   18868:	movw	r2, #33032	; 0x8108
   1886c:	movt	r2, #1
   18870:	mov	r0, r1
   18874:	mov	r1, r2
   18878:	mov	r2, #0
   1887c:	bl	18090 <__assert_fail@plt+0x6b78>
   18880:	mov	r0, #8
   18884:	str	r0, [r9]
   18888:	b	18848 <__assert_fail@plt+0x7330>
   1888c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18890:	add	fp, sp, #28
   18894:	sub	sp, sp, #124	; 0x7c
   18898:	mov	r8, r3
   1889c:	mov	r6, r2
   188a0:	mov	r9, r1
   188a4:	mov	r7, r0
   188a8:	mov	r5, #0
   188ac:	str	r5, [fp, #-32]	; 0xffffffe0
   188b0:	str	r5, [fp, #-36]	; 0xffffffdc
   188b4:	mov	r0, #32
   188b8:	mov	r1, #1
   188bc:	bl	225d0 <__assert_fail@plt+0x110b8>
   188c0:	mov	r4, r0
   188c4:	mov	r0, #40	; 0x28
   188c8:	mov	r1, #1
   188cc:	bl	225d0 <__assert_fail@plt+0x110b8>
   188d0:	mov	sl, r0
   188d4:	cmp	r4, #0
   188d8:	cmpne	sl, #0
   188dc:	beq	18d68 <__assert_fail@plt+0x7850>
   188e0:	mov	r0, r6
   188e4:	mov	r1, r7
   188e8:	mov	r2, r8
   188ec:	bl	193b0 <__assert_fail@plt+0x7e98>
   188f0:	mov	r5, r0
   188f4:	ldrb	r0, [r6, #4]
   188f8:	cmp	r0, #25
   188fc:	beq	18910 <__assert_fail@plt+0x73f8>
   18900:	cmp	r0, #2
   18904:	beq	18d60 <__assert_fail@plt+0x7848>
   18908:	mov	r0, #0
   1890c:	b	18960 <__assert_fail@plt+0x7448>
   18910:	ldrb	r0, [sl, #16]
   18914:	orr	r0, r0, #1
   18918:	strb	r0, [sl, #16]
   1891c:	tst	r8, #256	; 0x100
   18920:	beq	18930 <__assert_fail@plt+0x7418>
   18924:	mov	r0, r4
   18928:	mov	r1, #10
   1892c:	bl	19524 <__assert_fail@plt+0x800c>
   18930:	ldr	r0, [r7, #40]	; 0x28
   18934:	add	r0, r0, r5
   18938:	str	r0, [r7, #40]	; 0x28
   1893c:	mov	r0, r6
   18940:	mov	r1, r7
   18944:	mov	r2, r8
   18948:	bl	193b0 <__assert_fail@plt+0x7e98>
   1894c:	mov	r5, r0
   18950:	ldrb	r0, [r6, #4]
   18954:	cmp	r0, #2
   18958:	beq	18d60 <__assert_fail@plt+0x7848>
   1895c:	mov	r0, #1
   18960:	str	r0, [sp, #20]
   18964:	ldr	r0, [r6, #4]
   18968:	uxtb	r1, r0
   1896c:	cmp	r1, #21
   18970:	moveq	r1, #1
   18974:	bfieq	r0, r1, #0, #8
   18978:	streq	r0, [r6, #4]
   1897c:	str	sl, [sp, #24]
   18980:	mov	r0, #3
   18984:	str	r0, [fp, #-44]	; 0xffffffd4
   18988:	add	r0, sp, #68	; 0x44
   1898c:	str	r0, [fp, #-40]	; 0xffffffd8
   18990:	mov	r0, #1
   18994:	str	r8, [sp]
   18998:	str	r0, [sp, #4]
   1899c:	sub	r0, fp, #44	; 0x2c
   189a0:	mov	r1, r7
   189a4:	mov	r2, r6
   189a8:	mov	r3, r5
   189ac:	bl	19548 <__assert_fail@plt+0x8030>
   189b0:	cmp	r0, #0
   189b4:	bne	18d50 <__assert_fail@plt+0x7838>
   189b8:	mov	r0, #0
   189bc:	str	r0, [sp, #16]
   189c0:	mov	r0, r6
   189c4:	mov	r1, r7
   189c8:	mov	r2, r8
   189cc:	bl	193b0 <__assert_fail@plt+0x7e98>
   189d0:	mov	sl, r0
   189d4:	ldr	r5, [fp, #-44]	; 0xffffffd4
   189d8:	cmp	r5, #2
   189dc:	beq	18a44 <__assert_fail@plt+0x752c>
   189e0:	cmp	r5, #4
   189e4:	bne	18a08 <__assert_fail@plt+0x74f0>
   189e8:	ldr	r0, [r7, #64]	; 0x40
   189ec:	ldr	r1, [fp, #-40]	; 0xffffffd8
   189f0:	stm	sp, {r1, r8}
   189f4:	mov	r1, r4
   189f8:	ldr	r2, [sp, #24]
   189fc:	sub	r3, fp, #36	; 0x24
   18a00:	bl	198e4 <__assert_fail@plt+0x83cc>
   18a04:	b	18a50 <__assert_fail@plt+0x7538>
   18a08:	ldrb	r0, [r6, #4]
   18a0c:	cmp	r0, #22
   18a10:	beq	18ab0 <__assert_fail@plt+0x7598>
   18a14:	cmp	r0, #2
   18a18:	beq	18d4c <__assert_fail@plt+0x7834>
   18a1c:	cmp	r5, #1
   18a20:	beq	18b70 <__assert_fail@plt+0x7658>
   18a24:	cmp	r5, #2
   18a28:	beq	18a44 <__assert_fail@plt+0x752c>
   18a2c:	cmp	r5, #3
   18a30:	bne	18ba0 <__assert_fail@plt+0x7688>
   18a34:	ldr	r1, [fp, #-40]	; 0xffffffd8
   18a38:	mov	r0, r4
   18a3c:	bl	198ac <__assert_fail@plt+0x8394>
   18a40:	b	18a50 <__assert_fail@plt+0x7538>
   18a44:	ldr	r1, [fp, #-40]	; 0xffffffd8
   18a48:	mov	r0, r4
   18a4c:	bl	19874 <__assert_fail@plt+0x835c>
   18a50:	ldr	r1, [fp, #8]
   18a54:	str	r0, [r1]
   18a58:	cmp	r0, #0
   18a5c:	bne	18d58 <__assert_fail@plt+0x7840>
   18a60:	ldrb	r0, [r6, #4]
   18a64:	cmp	r0, #21
   18a68:	beq	18bd8 <__assert_fail@plt+0x76c0>
   18a6c:	cmp	r0, #2
   18a70:	beq	18d4c <__assert_fail@plt+0x7834>
   18a74:	mov	r0, #3
   18a78:	str	r0, [fp, #-44]	; 0xffffffd4
   18a7c:	add	r0, sp, #68	; 0x44
   18a80:	str	r0, [fp, #-40]	; 0xffffffd8
   18a84:	str	r8, [sp]
   18a88:	mov	r0, #0
   18a8c:	str	r0, [sp, #4]
   18a90:	sub	r0, fp, #44	; 0x2c
   18a94:	mov	r1, r7
   18a98:	mov	r2, r6
   18a9c:	mov	r3, sl
   18aa0:	bl	19548 <__assert_fail@plt+0x8030>
   18aa4:	cmp	r0, #0
   18aa8:	beq	189c0 <__assert_fail@plt+0x74a8>
   18aac:	b	18d50 <__assert_fail@plt+0x7838>
   18ab0:	ldr	r0, [r7, #40]	; 0x28
   18ab4:	add	r0, r0, sl
   18ab8:	str	r0, [r7, #40]	; 0x28
   18abc:	add	r0, sp, #28
   18ac0:	mov	r1, r7
   18ac4:	mov	r2, r8
   18ac8:	bl	193b0 <__assert_fail@plt+0x7e98>
   18acc:	mov	r3, r0
   18ad0:	ldrb	r0, [sp, #32]
   18ad4:	cmp	r0, #21
   18ad8:	beq	18b54 <__assert_fail@plt+0x763c>
   18adc:	cmp	r0, #2
   18ae0:	sub	r1, fp, #52	; 0x34
   18ae4:	beq	18d4c <__assert_fail@plt+0x7834>
   18ae8:	mov	r0, #3
   18aec:	str	r0, [fp, #-52]	; 0xffffffcc
   18af0:	add	r0, sp, #36	; 0x24
   18af4:	str	r0, [fp, #-48]	; 0xffffffd0
   18af8:	str	r8, [sp]
   18afc:	mov	r0, #1
   18b00:	str	r0, [sp, #4]
   18b04:	mov	r0, r1
   18b08:	mov	r5, r1
   18b0c:	mov	r1, r7
   18b10:	add	r2, sp, #28
   18b14:	bl	19548 <__assert_fail@plt+0x8030>
   18b18:	cmp	r0, #0
   18b1c:	bne	18d50 <__assert_fail@plt+0x7838>
   18b20:	mov	r0, r6
   18b24:	mov	r1, r7
   18b28:	mov	r2, r8
   18b2c:	bl	193b0 <__assert_fail@plt+0x7e98>
   18b30:	mov	sl, r0
   18b34:	stm	sp, {r5, r9}
   18b38:	str	r8, [sp, #8]
   18b3c:	mov	r0, r4
   18b40:	ldr	r1, [sp, #24]
   18b44:	sub	r2, fp, #32
   18b48:	sub	r3, fp, #44	; 0x2c
   18b4c:	bl	19650 <__assert_fail@plt+0x8138>
   18b50:	b	18a50 <__assert_fail@plt+0x7538>
   18b54:	ldr	r0, [r7, #40]	; 0x28
   18b58:	sub	r0, r0, sl
   18b5c:	str	r0, [r7, #40]	; 0x28
   18b60:	mov	r0, #1
   18b64:	strb	r0, [r6, #4]
   18b68:	cmp	r5, #1
   18b6c:	bne	18a24 <__assert_fail@plt+0x750c>
   18b70:	ldr	r5, [sp, #24]
   18b74:	ldr	r0, [r5, #20]
   18b78:	ldr	r1, [sp, #16]
   18b7c:	cmp	r1, r0
   18b80:	beq	18bb0 <__assert_fail@plt+0x7698>
   18b84:	ldr	r0, [r5]
   18b88:	ldr	r1, [r5, #20]
   18b8c:	add	r2, r1, #1
   18b90:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18b94:	str	r2, [r5, #20]
   18b98:	str	r3, [r0, r1, lsl #2]
   18b9c:	b	18a60 <__assert_fail@plt+0x7548>
   18ba0:	ldrb	r1, [fp, #-40]	; 0xffffffd8
   18ba4:	mov	r0, r4
   18ba8:	bl	19524 <__assert_fail@plt+0x800c>
   18bac:	b	18a60 <__assert_fail@plt+0x7548>
   18bb0:	mov	r1, #1
   18bb4:	orr	r0, r1, r0, lsl #1
   18bb8:	str	r0, [sp, #16]
   18bbc:	lsl	r1, r0, #2
   18bc0:	ldr	r0, [r5]
   18bc4:	bl	22654 <__assert_fail@plt+0x1113c>
   18bc8:	cmp	r0, #0
   18bcc:	beq	18d88 <__assert_fail@plt+0x7870>
   18bd0:	str	r0, [r5]
   18bd4:	b	18b84 <__assert_fail@plt+0x766c>
   18bd8:	ldr	r0, [r7, #40]	; 0x28
   18bdc:	add	r0, r0, sl
   18be0:	str	r0, [r7, #40]	; 0x28
   18be4:	ldr	r0, [sp, #20]
   18be8:	cmp	r0, #0
   18bec:	movne	r0, r4
   18bf0:	blne	1a14c <__assert_fail@plt+0x8c34>
   18bf4:	ldr	r0, [r9, #92]	; 0x5c
   18bf8:	cmp	r0, #2
   18bfc:	ldr	sl, [sp, #24]
   18c00:	blt	18c10 <__assert_fail@plt+0x76f8>
   18c04:	ldr	r1, [r9, #60]	; 0x3c
   18c08:	mov	r0, r4
   18c0c:	bl	1a16c <__assert_fail@plt+0x8c54>
   18c10:	ldr	r0, [sl, #20]
   18c14:	cmp	r0, #0
   18c18:	bne	18c40 <__assert_fail@plt+0x7728>
   18c1c:	ldr	r0, [sl, #24]
   18c20:	cmp	r0, #0
   18c24:	bne	18c40 <__assert_fail@plt+0x7728>
   18c28:	ldr	r0, [sl, #28]
   18c2c:	cmp	r0, #0
   18c30:	bne	18c40 <__assert_fail@plt+0x7728>
   18c34:	ldr	r0, [sl, #32]
   18c38:	cmp	r0, #0
   18c3c:	beq	18cfc <__assert_fail@plt+0x77e4>
   18c40:	ldrb	r0, [r9, #88]	; 0x58
   18c44:	orr	r0, r0, #2
   18c48:	strb	r0, [r9, #88]	; 0x58
   18c4c:	str	sl, [sp, #68]	; 0x44
   18c50:	ldr	r7, [sp, #72]	; 0x48
   18c54:	mov	r0, #6
   18c58:	strb	r0, [sp, #72]	; 0x48
   18c5c:	mov	r6, #0
   18c60:	add	r3, sp, #68	; 0x44
   18c64:	mov	r0, r9
   18c68:	mov	r1, #0
   18c6c:	mov	r2, #0
   18c70:	bl	186d0 <__assert_fail@plt+0x71b8>
   18c74:	cmp	r0, #0
   18c78:	beq	18d8c <__assert_fail@plt+0x7874>
   18c7c:	mov	r5, r0
   18c80:	bic	r0, r7, #255	; 0xff
   18c84:	ldr	r1, [r4, r6, lsl #2]
   18c88:	cmp	r1, #0
   18c8c:	bne	18ca8 <__assert_fail@plt+0x7790>
   18c90:	add	r6, r6, #1
   18c94:	cmp	r6, #7
   18c98:	bls	18c84 <__assert_fail@plt+0x776c>
   18c9c:	mov	r0, r4
   18ca0:	bl	22b14 <__assert_fail@plt+0x115fc>
   18ca4:	b	18cf0 <__assert_fail@plt+0x77d8>
   18ca8:	str	r4, [sp, #68]	; 0x44
   18cac:	orr	r0, r0, #3
   18cb0:	str	r0, [sp, #72]	; 0x48
   18cb4:	add	r3, sp, #68	; 0x44
   18cb8:	mov	r0, r9
   18cbc:	mov	r1, #0
   18cc0:	mov	r2, #0
   18cc4:	bl	186d0 <__assert_fail@plt+0x71b8>
   18cc8:	cmp	r0, #0
   18ccc:	beq	18d8c <__assert_fail@plt+0x7874>
   18cd0:	mov	r1, r0
   18cd4:	mov	r0, r9
   18cd8:	mov	r2, r5
   18cdc:	mov	r3, #10
   18ce0:	bl	17658 <__assert_fail@plt+0x6140>
   18ce4:	mov	r5, r0
   18ce8:	cmp	r0, #0
   18cec:	beq	18d8c <__assert_fail@plt+0x7874>
   18cf0:	mov	r0, r5
   18cf4:	sub	sp, fp, #28
   18cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cfc:	ldr	r0, [r9, #92]	; 0x5c
   18d00:	cmp	r0, #2
   18d04:	blt	18d20 <__assert_fail@plt+0x7808>
   18d08:	ldr	r0, [sl, #36]	; 0x24
   18d0c:	cmp	r0, #0
   18d10:	bne	18c40 <__assert_fail@plt+0x7728>
   18d14:	ldrb	r0, [sl, #16]
   18d18:	tst	r0, #1
   18d1c:	bne	18c40 <__assert_fail@plt+0x7728>
   18d20:	mov	r0, sl
   18d24:	bl	16184 <__assert_fail@plt+0x4c6c>
   18d28:	str	r4, [sp, #68]	; 0x44
   18d2c:	mov	r0, #3
   18d30:	strb	r0, [sp, #72]	; 0x48
   18d34:	add	r3, sp, #68	; 0x44
   18d38:	mov	r0, r9
   18d3c:	mov	r1, #0
   18d40:	mov	r2, #0
   18d44:	bl	186d0 <__assert_fail@plt+0x71b8>
   18d48:	b	18ce4 <__assert_fail@plt+0x77cc>
   18d4c:	mov	r0, #7
   18d50:	ldr	r1, [fp, #8]
   18d54:	str	r0, [r1]
   18d58:	ldr	sl, [sp, #24]
   18d5c:	b	18d98 <__assert_fail@plt+0x7880>
   18d60:	mov	r0, #2
   18d64:	b	18d90 <__assert_fail@plt+0x7878>
   18d68:	mov	r0, r4
   18d6c:	bl	22b14 <__assert_fail@plt+0x115fc>
   18d70:	mov	r0, sl
   18d74:	bl	22b14 <__assert_fail@plt+0x115fc>
   18d78:	mov	r0, #12
   18d7c:	ldr	r1, [fp, #8]
   18d80:	str	r0, [r1]
   18d84:	b	18cf0 <__assert_fail@plt+0x77d8>
   18d88:	mov	sl, r5
   18d8c:	mov	r0, #12
   18d90:	ldr	r1, [fp, #8]
   18d94:	str	r0, [r1]
   18d98:	mov	r0, r4
   18d9c:	bl	22b14 <__assert_fail@plt+0x115fc>
   18da0:	mov	r0, sl
   18da4:	bl	16184 <__assert_fail@plt+0x4c6c>
   18da8:	mov	r5, #0
   18dac:	b	18cf0 <__assert_fail@plt+0x77d8>
   18db0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18db4:	add	fp, sp, #24
   18db8:	mov	r4, r0
   18dbc:	ldrb	r0, [r0, #88]	; 0x58
   18dc0:	orr	r1, r0, #16
   18dc4:	strb	r1, [r4, #88]	; 0x58
   18dc8:	tst	r0, #8
   18dcc:	bne	18e08 <__assert_fail@plt+0x78f0>
   18dd0:	movw	r1, #0
   18dd4:	movt	r1, #1023	; 0x3ff
   18dd8:	mov	r2, #0
   18ddc:	mvn	r3, #2013265921	; 0x78000001
   18de0:	mvn	r7, #-134217727	; 0xf8000001
   18de4:	str	r2, [r4, #96]	; 0x60
   18de8:	add	r2, r4, #100	; 0x64
   18dec:	stm	r2, {r1, r3, r7}
   18df0:	tst	r0, #4
   18df4:	beq	18e14 <__assert_fail@plt+0x78fc>
   18df8:	vmov.i32	q8, #0	; 0x00000000
   18dfc:	add	r0, r4, #112	; 0x70
   18e00:	vst1.32	{d16-d17}, [r0]
   18e04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18e08:	mov	r5, #0
   18e0c:	mov	r8, #0
   18e10:	b	18e1c <__assert_fail@plt+0x7904>
   18e14:	mov	r8, #4
   18e18:	mov	r5, #128	; 0x80
   18e1c:	bl	113d4 <__ctype_b_loc@plt>
   18e20:	ldr	r0, [r0]
   18e24:	add	r6, r0, r5, lsl #1
   18e28:	mov	r1, #1
   18e2c:	b	18e44 <__assert_fail@plt+0x792c>
   18e30:	add	r6, r6, #64	; 0x40
   18e34:	add	r8, r8, #1
   18e38:	add	r5, r5, #32
   18e3c:	cmp	r8, #8
   18e40:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   18e44:	add	r0, r4, r8, lsl #2
   18e48:	add	r2, r0, #96	; 0x60
   18e4c:	mov	r3, #0
   18e50:	mov	r0, r6
   18e54:	add	r7, r5, r3
   18e58:	cmp	r7, #95	; 0x5f
   18e5c:	beq	18e6c <__assert_fail@plt+0x7954>
   18e60:	ldrh	r7, [r0]
   18e64:	ands	r7, r7, #8
   18e68:	beq	18e78 <__assert_fail@plt+0x7960>
   18e6c:	ldr	r7, [r2]
   18e70:	orr	r7, r7, r1, lsl r3
   18e74:	str	r7, [r2]
   18e78:	add	r0, r0, #2
   18e7c:	add	r3, r3, #1
   18e80:	cmp	r3, #32
   18e84:	bne	18e54 <__assert_fail@plt+0x793c>
   18e88:	b	18e30 <__assert_fail@plt+0x7918>
   18e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e90:	add	fp, sp, #28
   18e94:	sub	sp, sp, #20
   18e98:	mov	r8, r3
   18e9c:	mov	r6, r2
   18ea0:	mov	r4, r1
   18ea4:	mov	r9, r0
   18ea8:	mov	r7, #0
   18eac:	str	r7, [sp, #16]
   18eb0:	mov	r0, #32
   18eb4:	mov	r1, #1
   18eb8:	bl	225d0 <__assert_fail@plt+0x110b8>
   18ebc:	ldr	r1, [fp, #12]
   18ec0:	cmp	r0, #0
   18ec4:	beq	19034 <__assert_fail@plt+0x7b1c>
   18ec8:	mov	r5, r0
   18ecc:	mov	r0, #40	; 0x28
   18ed0:	mov	r1, #1
   18ed4:	bl	225d0 <__assert_fail@plt+0x110b8>
   18ed8:	cmp	r0, #0
   18edc:	beq	19040 <__assert_fail@plt+0x7b28>
   18ee0:	mov	sl, r0
   18ee4:	ldr	r1, [fp, #8]
   18ee8:	ldrb	r0, [r0, #16]
   18eec:	and	r0, r0, #254	; 0xfe
   18ef0:	orr	r0, r0, r1
   18ef4:	strb	r0, [sl, #16]
   18ef8:	mov	r7, #0
   18efc:	stm	sp, {r6, r7}
   18f00:	add	r3, sp, #16
   18f04:	mov	r0, r4
   18f08:	mov	r1, r5
   18f0c:	mov	r2, sl
   18f10:	bl	198e4 <__assert_fail@plt+0x83cc>
   18f14:	cmp	r0, #0
   18f18:	bne	1905c <__assert_fail@plt+0x7b44>
   18f1c:	ldrb	r0, [r8]
   18f20:	cmp	r0, #0
   18f24:	beq	18f44 <__assert_fail@plt+0x7a2c>
   18f28:	add	r4, r8, #1
   18f2c:	uxtb	r1, r0
   18f30:	mov	r0, r5
   18f34:	bl	19524 <__assert_fail@plt+0x800c>
   18f38:	ldrb	r0, [r4], #1
   18f3c:	cmp	r0, #0
   18f40:	bne	18f2c <__assert_fail@plt+0x7a14>
   18f44:	ldr	r0, [fp, #8]
   18f48:	cmp	r0, #0
   18f4c:	movne	r0, r5
   18f50:	blne	1a14c <__assert_fail@plt+0x8c34>
   18f54:	ldr	r0, [r9, #92]	; 0x5c
   18f58:	cmp	r0, #2
   18f5c:	blt	18f6c <__assert_fail@plt+0x7a54>
   18f60:	ldr	r1, [r9, #60]	; 0x3c
   18f64:	mov	r0, r5
   18f68:	bl	1a16c <__assert_fail@plt+0x8c54>
   18f6c:	str	r5, [sp, #8]
   18f70:	ldr	r4, [sp, #12]
   18f74:	bfc	r4, #0, #23
   18f78:	orr	r0, r4, #3
   18f7c:	str	r0, [sp, #12]
   18f80:	mov	r7, #0
   18f84:	add	r3, sp, #8
   18f88:	mov	r0, r9
   18f8c:	mov	r1, #0
   18f90:	mov	r2, #0
   18f94:	bl	186d0 <__assert_fail@plt+0x71b8>
   18f98:	cmp	r0, #0
   18f9c:	beq	19018 <__assert_fail@plt+0x7b00>
   18fa0:	mov	r6, r0
   18fa4:	ldr	r0, [r9, #92]	; 0x5c
   18fa8:	cmp	r0, #2
   18fac:	blt	19000 <__assert_fail@plt+0x7ae8>
   18fb0:	str	sl, [sp, #8]
   18fb4:	orr	r0, r4, #6
   18fb8:	str	r0, [sp, #12]
   18fbc:	ldrb	r0, [r9, #88]	; 0x58
   18fc0:	orr	r0, r0, #2
   18fc4:	strb	r0, [r9, #88]	; 0x58
   18fc8:	add	r3, sp, #8
   18fcc:	mov	r0, r9
   18fd0:	mov	r1, #0
   18fd4:	mov	r2, #0
   18fd8:	bl	186d0 <__assert_fail@plt+0x71b8>
   18fdc:	cmp	r0, #0
   18fe0:	beq	19018 <__assert_fail@plt+0x7b00>
   18fe4:	mov	r2, r0
   18fe8:	mov	r0, r9
   18fec:	mov	r1, r6
   18ff0:	mov	r3, #10
   18ff4:	bl	17658 <__assert_fail@plt+0x6140>
   18ff8:	mov	r7, r0
   18ffc:	b	1900c <__assert_fail@plt+0x7af4>
   19000:	mov	r0, sl
   19004:	bl	16184 <__assert_fail@plt+0x4c6c>
   19008:	mov	r7, r6
   1900c:	mov	r0, r7
   19010:	sub	sp, fp, #28
   19014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19018:	mov	r0, r5
   1901c:	bl	22b14 <__assert_fail@plt+0x115fc>
   19020:	mov	r0, sl
   19024:	bl	16184 <__assert_fail@plt+0x4c6c>
   19028:	mov	r0, #12
   1902c:	ldr	r1, [fp, #12]
   19030:	b	19038 <__assert_fail@plt+0x7b20>
   19034:	mov	r0, #12
   19038:	str	r0, [r1]
   1903c:	b	1900c <__assert_fail@plt+0x7af4>
   19040:	mov	r0, r5
   19044:	bl	22b14 <__assert_fail@plt+0x115fc>
   19048:	mov	r0, #12
   1904c:	ldr	r1, [fp, #12]
   19050:	str	r0, [r1]
   19054:	mov	r7, #0
   19058:	b	1900c <__assert_fail@plt+0x7af4>
   1905c:	mov	r6, r0
   19060:	mov	r0, r5
   19064:	bl	22b14 <__assert_fail@plt+0x115fc>
   19068:	mov	r0, sl
   1906c:	bl	16184 <__assert_fail@plt+0x4c6c>
   19070:	ldr	r0, [fp, #12]
   19074:	str	r6, [r0]
   19078:	b	1900c <__assert_fail@plt+0x7af4>
   1907c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19080:	add	fp, sp, #28
   19084:	sub	sp, sp, #20
   19088:	mov	r7, r3
   1908c:	mov	r5, r2
   19090:	mov	r8, r1
   19094:	mov	r4, r0
   19098:	ldrb	r0, [r3, #4]
   1909c:	ldr	r1, [fp, #12]
   190a0:	str	r1, [sp, #16]
   190a4:	ldr	sl, [fp, #8]
   190a8:	cmp	r0, #23
   190ac:	bne	19104 <__assert_fail@plt+0x7bec>
   190b0:	ldr	r0, [r7]
   190b4:	str	r0, [sp, #12]
   190b8:	ldr	r0, [r7, #4]
   190bc:	str	r0, [sp, #8]
   190c0:	ldr	r0, [r8, #40]	; 0x28
   190c4:	str	r0, [sp, #4]
   190c8:	mov	r0, r8
   190cc:	mov	r1, r7
   190d0:	mov	r2, sl
   190d4:	bl	1a3c0 <__assert_fail@plt+0x8ea8>
   190d8:	cmn	r0, #1
   190dc:	bne	19120 <__assert_fail@plt+0x7c08>
   190e0:	ldrb	r0, [r7, #4]
   190e4:	cmp	r0, #1
   190e8:	bne	190fc <__assert_fail@plt+0x7be4>
   190ec:	ldrb	r0, [r7]
   190f0:	mov	r6, #0
   190f4:	cmp	r0, #44	; 0x2c
   190f8:	beq	1912c <__assert_fail@plt+0x7c14>
   190fc:	mov	r0, #10
   19100:	b	19374 <__assert_fail@plt+0x7e5c>
   19104:	mvn	r9, #0
   19108:	cmp	r0, #19
   1910c:	movweq	r9, #1
   19110:	sub	r0, r0, #18
   19114:	clz	r0, r0
   19118:	lsr	r6, r0, #5
   1911c:	b	191c4 <__assert_fail@plt+0x7cac>
   19120:	mov	r6, r0
   19124:	cmn	r0, #2
   19128:	beq	1914c <__assert_fail@plt+0x7c34>
   1912c:	ldrb	r0, [r7, #4]
   19130:	cmp	r0, #24
   19134:	mov	r9, r6
   19138:	beq	19194 <__assert_fail@plt+0x7c7c>
   1913c:	cmp	r0, #1
   19140:	ldrbeq	r0, [r7]
   19144:	cmpeq	r0, #44	; 0x2c
   19148:	beq	19178 <__assert_fail@plt+0x7c60>
   1914c:	tst	sl, #2097152	; 0x200000
   19150:	beq	1938c <__assert_fail@plt+0x7e74>
   19154:	ldr	r0, [sp, #4]
   19158:	str	r0, [r8, #40]	; 0x28
   1915c:	ldr	r0, [sp, #12]
   19160:	str	r0, [r7]
   19164:	ldr	r0, [sp, #8]
   19168:	str	r0, [r7, #4]
   1916c:	mov	r0, #1
   19170:	strb	r0, [r7, #4]
   19174:	b	19380 <__assert_fail@plt+0x7e68>
   19178:	mov	r0, r8
   1917c:	mov	r1, r7
   19180:	mov	r2, sl
   19184:	bl	1a3c0 <__assert_fail@plt+0x8ea8>
   19188:	mov	r9, r0
   1918c:	cmn	r0, #2
   19190:	beq	1914c <__assert_fail@plt+0x7c34>
   19194:	cmn	r9, #1
   19198:	beq	191a4 <__assert_fail@plt+0x7c8c>
   1919c:	cmp	r6, r9
   191a0:	bgt	190fc <__assert_fail@plt+0x7be4>
   191a4:	ldrb	r0, [r7, #4]
   191a8:	cmp	r0, #24
   191ac:	bne	190fc <__assert_fail@plt+0x7be4>
   191b0:	cmn	r9, #1
   191b4:	mov	r0, r9
   191b8:	moveq	r0, r6
   191bc:	cmp	r0, #32768	; 0x8000
   191c0:	bge	193a8 <__assert_fail@plt+0x7e90>
   191c4:	mov	r0, r7
   191c8:	mov	r1, r8
   191cc:	mov	r2, sl
   191d0:	bl	174cc <__assert_fail@plt+0x5fb4>
   191d4:	cmp	r4, #0
   191d8:	beq	1937c <__assert_fail@plt+0x7e64>
   191dc:	orrs	r0, r9, r6
   191e0:	beq	192d4 <__assert_fail@plt+0x7dbc>
   191e4:	mov	r8, #0
   191e8:	cmp	r6, #1
   191ec:	bge	192ec <__assert_fail@plt+0x7dd4>
   191f0:	ldrb	r0, [r4, #24]
   191f4:	cmp	r0, #17
   191f8:	bne	19210 <__assert_fail@plt+0x7cf8>
   191fc:	ldr	r2, [r4, #20]
   19200:	movw	r1, #42308	; 0xa544
   19204:	movt	r1, #1
   19208:	mov	r0, r4
   1920c:	bl	18090 <__assert_fail@plt+0x6b78>
   19210:	mov	r3, #10
   19214:	cmn	r9, #1
   19218:	movweq	r3, #11
   1921c:	mov	r0, r5
   19220:	mov	r1, r4
   19224:	mov	r2, #0
   19228:	bl	17658 <__assert_fail@plt+0x6140>
   1922c:	cmp	r0, #0
   19230:	beq	19370 <__assert_fail@plt+0x7e58>
   19234:	mov	r7, r0
   19238:	add	r0, r6, #2
   1923c:	cmp	r0, r9
   19240:	ble	19268 <__assert_fail@plt+0x7d50>
   19244:	cmp	r8, #0
   19248:	beq	192cc <__assert_fail@plt+0x7db4>
   1924c:	mov	r0, r5
   19250:	mov	r1, r8
   19254:	mov	r2, r7
   19258:	mov	r3, #16
   1925c:	sub	sp, fp, #28
   19260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19264:	b	17658 <__assert_fail@plt+0x6140>
   19268:	add	r6, r6, #1
   1926c:	mov	r0, r4
   19270:	mov	r1, r5
   19274:	bl	1a468 <__assert_fail@plt+0x8f50>
   19278:	mov	r4, r0
   1927c:	mov	r0, r5
   19280:	mov	r1, r7
   19284:	mov	r2, r4
   19288:	mov	r3, #16
   1928c:	bl	17658 <__assert_fail@plt+0x6140>
   19290:	cmp	r4, #0
   19294:	movne	r1, r0
   19298:	cmpne	r0, #0
   1929c:	beq	19370 <__assert_fail@plt+0x7e58>
   192a0:	mov	r0, r5
   192a4:	mov	r2, #0
   192a8:	mov	r3, #10
   192ac:	bl	17658 <__assert_fail@plt+0x6140>
   192b0:	cmp	r0, #0
   192b4:	beq	19370 <__assert_fail@plt+0x7e58>
   192b8:	mov	r7, r0
   192bc:	add	r6, r6, #1
   192c0:	cmp	r6, r9
   192c4:	blt	1926c <__assert_fail@plt+0x7d54>
   192c8:	b	19244 <__assert_fail@plt+0x7d2c>
   192cc:	mov	r4, r7
   192d0:	b	19380 <__assert_fail@plt+0x7e68>
   192d4:	movw	r1, #33032	; 0x8108
   192d8:	movt	r1, #1
   192dc:	mov	r0, r4
   192e0:	mov	r2, #0
   192e4:	bl	18090 <__assert_fail@plt+0x6b78>
   192e8:	b	1937c <__assert_fail@plt+0x7e64>
   192ec:	bne	19318 <__assert_fail@plt+0x7e00>
   192f0:	mov	r8, r4
   192f4:	cmp	r6, r9
   192f8:	beq	19368 <__assert_fail@plt+0x7e50>
   192fc:	mov	r0, r4
   19300:	mov	r1, r5
   19304:	bl	1a468 <__assert_fail@plt+0x8f50>
   19308:	mov	r4, r0
   1930c:	cmp	r0, #0
   19310:	bne	191f0 <__assert_fail@plt+0x7cd8>
   19314:	b	19370 <__assert_fail@plt+0x7e58>
   19318:	mov	r7, #1
   1931c:	mov	r8, r4
   19320:	mov	r0, r4
   19324:	mov	r1, r5
   19328:	bl	1a468 <__assert_fail@plt+0x8f50>
   1932c:	mov	r4, r0
   19330:	mov	r0, r5
   19334:	mov	r1, r8
   19338:	mov	r2, r4
   1933c:	mov	r3, #16
   19340:	bl	17658 <__assert_fail@plt+0x6140>
   19344:	cmp	r4, #0
   19348:	movne	r8, r0
   1934c:	cmpne	r0, #0
   19350:	beq	19370 <__assert_fail@plt+0x7e58>
   19354:	add	r7, r7, #1
   19358:	cmp	r7, r6
   1935c:	blt	19320 <__assert_fail@plt+0x7e08>
   19360:	cmp	r6, r9
   19364:	bne	192fc <__assert_fail@plt+0x7de4>
   19368:	mov	r4, r8
   1936c:	b	19380 <__assert_fail@plt+0x7e68>
   19370:	mov	r0, #12
   19374:	ldr	r1, [sp, #16]
   19378:	str	r0, [r1]
   1937c:	mov	r4, #0
   19380:	mov	r0, r4
   19384:	sub	sp, fp, #28
   19388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1938c:	ldrb	r0, [r7, #4]
   19390:	mov	r1, #10
   19394:	cmp	r0, #2
   19398:	movweq	r1, #9
   1939c:	ldr	r0, [sp, #16]
   193a0:	str	r1, [r0]
   193a4:	b	1937c <__assert_fail@plt+0x7e64>
   193a8:	mov	r0, #15
   193ac:	b	19374 <__assert_fail@plt+0x7e5c>
   193b0:	push	{r4, sl, fp, lr}
   193b4:	add	fp, sp, #8
   193b8:	ldr	ip, [r1, #40]	; 0x28
   193bc:	ldr	r3, [r1, #56]	; 0x38
   193c0:	cmp	r3, ip
   193c4:	ble	19444 <__assert_fail@plt+0x7f2c>
   193c8:	ldr	r3, [r1, #4]
   193cc:	ldrb	ip, [r3, ip]
   193d0:	strb	ip, [r0]
   193d4:	ldr	r3, [r1, #80]	; 0x50
   193d8:	cmp	r3, #2
   193dc:	blt	19400 <__assert_fail@plt+0x7ee8>
   193e0:	ldr	lr, [r1, #28]
   193e4:	ldr	r4, [r1, #40]	; 0x28
   193e8:	cmp	r4, lr
   193ec:	beq	19400 <__assert_fail@plt+0x7ee8>
   193f0:	ldr	r3, [r1, #8]
   193f4:	ldr	r3, [r3, r4, lsl #2]
   193f8:	cmn	r3, #1
   193fc:	beq	194f0 <__assert_fail@plt+0x7fd8>
   19400:	tst	r2, #1
   19404:	beq	19458 <__assert_fail@plt+0x7f40>
   19408:	cmp	ip, #92	; 0x5c
   1940c:	bne	19458 <__assert_fail@plt+0x7f40>
   19410:	ldr	r2, [r1, #40]	; 0x28
   19414:	ldr	r3, [r1, #48]	; 0x30
   19418:	add	r2, r2, #1
   1941c:	cmp	r2, r3
   19420:	bge	194f0 <__assert_fail@plt+0x7fd8>
   19424:	str	r2, [r1, #40]	; 0x28
   19428:	ldr	r1, [r1, #4]
   1942c:	ldrb	r2, [r1, r2]
   19430:	mov	r1, #1
   19434:	strb	r1, [r0, #4]
   19438:	strb	r2, [r0]
   1943c:	mov	r0, r1
   19440:	pop	{r4, sl, fp, pc}
   19444:	mov	r1, #2
   19448:	strb	r1, [r0, #4]
   1944c:	mov	r1, #0
   19450:	mov	r0, r1
   19454:	pop	{r4, sl, fp, pc}
   19458:	cmp	ip, #92	; 0x5c
   1945c:	bgt	194b0 <__assert_fail@plt+0x7f98>
   19460:	cmp	ip, #45	; 0x2d
   19464:	beq	194c8 <__assert_fail@plt+0x7fb0>
   19468:	cmp	ip, #91	; 0x5b
   1946c:	bne	194f0 <__assert_fail@plt+0x7fd8>
   19470:	ldr	r3, [r1, #40]	; 0x28
   19474:	ldr	r4, [r1, #48]	; 0x30
   19478:	add	r3, r3, #1
   1947c:	cmp	r3, r4
   19480:	bge	194e4 <__assert_fail@plt+0x7fcc>
   19484:	ldr	r1, [r1, #4]
   19488:	ldrb	r1, [r1, r3]
   1948c:	strb	r1, [r0]
   19490:	cmp	r1, #61	; 0x3d
   19494:	beq	19500 <__assert_fail@plt+0x7fe8>
   19498:	cmp	r1, #58	; 0x3a
   1949c:	beq	19508 <__assert_fail@plt+0x7ff0>
   194a0:	cmp	r1, #46	; 0x2e
   194a4:	bne	194ec <__assert_fail@plt+0x7fd4>
   194a8:	mov	r1, #26
   194ac:	b	19514 <__assert_fail@plt+0x7ffc>
   194b0:	cmp	ip, #93	; 0x5d
   194b4:	beq	194d0 <__assert_fail@plt+0x7fb8>
   194b8:	cmp	ip, #94	; 0x5e
   194bc:	bne	194f0 <__assert_fail@plt+0x7fd8>
   194c0:	mov	r1, #25
   194c4:	b	194d4 <__assert_fail@plt+0x7fbc>
   194c8:	mov	r1, #22
   194cc:	b	194d4 <__assert_fail@plt+0x7fbc>
   194d0:	mov	r1, #21
   194d4:	strb	r1, [r0, #4]
   194d8:	mov	r1, #1
   194dc:	mov	r0, r1
   194e0:	pop	{r4, sl, fp, pc}
   194e4:	mov	r1, #0
   194e8:	strb	r1, [r0]
   194ec:	strb	ip, [r0]
   194f0:	mov	r1, #1
   194f4:	strb	r1, [r0, #4]
   194f8:	mov	r0, r1
   194fc:	pop	{r4, sl, fp, pc}
   19500:	mov	r1, #28
   19504:	b	19514 <__assert_fail@plt+0x7ffc>
   19508:	tst	r2, #4
   1950c:	beq	194ec <__assert_fail@plt+0x7fd4>
   19510:	mov	r1, #30
   19514:	strb	r1, [r0, #4]
   19518:	mov	r1, #2
   1951c:	mov	r0, r1
   19520:	pop	{r4, sl, fp, pc}
   19524:	asr	r2, r1, #31
   19528:	add	r2, r1, r2, lsr #27
   1952c:	asr	r2, r2, #5
   19530:	ldr	ip, [r0, r2, lsl #2]
   19534:	and	r1, r1, #31
   19538:	mov	r3, #1
   1953c:	orr	r1, ip, r3, lsl r1
   19540:	str	r1, [r0, r2, lsl #2]
   19544:	bx	lr
   19548:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1954c:	add	fp, sp, #24
   19550:	sub	sp, sp, #8
   19554:	mov	r5, r3
   19558:	mov	r8, r2
   1955c:	mov	r6, r1
   19560:	mov	r9, r0
   19564:	ldr	r7, [r1, #40]	; 0x28
   19568:	mov	r0, r1
   1956c:	mov	r1, r7
   19570:	bl	1a190 <__assert_fail@plt+0x8c78>
   19574:	cmp	r0, #2
   19578:	blt	195b0 <__assert_fail@plt+0x8098>
   1957c:	mov	r4, r0
   19580:	mov	r0, #1
   19584:	str	r0, [r9]
   19588:	mov	r0, r6
   1958c:	mov	r1, r7
   19590:	bl	17f04 <__assert_fail@plt+0x69ec>
   19594:	str	r0, [r9, #4]
   19598:	ldr	r0, [r6, #40]	; 0x28
   1959c:	add	r0, r0, r4
   195a0:	str	r0, [r6, #40]	; 0x28
   195a4:	mov	r0, #0
   195a8:	sub	sp, fp, #24
   195ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   195b0:	ldr	r0, [fp, #12]
   195b4:	ldr	r2, [fp, #8]
   195b8:	add	r1, r7, r5
   195bc:	str	r1, [r6, #40]	; 0x28
   195c0:	ldrb	r1, [r8, #4]
   195c4:	sub	r1, r1, #22
   195c8:	cmp	r1, #8
   195cc:	bhi	19638 <__assert_fail@plt+0x8120>
   195d0:	add	r3, pc, #0
   195d4:	ldr	pc, [r3, r1, lsl #2]
   195d8:	andeq	r9, r1, r4, lsl r6
   195dc:	andeq	r9, r1, r8, lsr r6
   195e0:	andeq	r9, r1, r8, lsr r6
   195e4:	andeq	r9, r1, r8, lsr r6
   195e8:	strdeq	r9, [r1], -ip
   195ec:	andeq	r9, r1, r8, lsr r6
   195f0:	strdeq	r9, [r1], -ip
   195f4:	andeq	r9, r1, r8, lsr r6
   195f8:	strdeq	r9, [r1], -ip
   195fc:	mov	r0, r9
   19600:	mov	r1, r6
   19604:	mov	r2, r8
   19608:	sub	sp, fp, #24
   1960c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   19610:	b	1a1ec <__assert_fail@plt+0x8cd4>
   19614:	cmp	r0, #0
   19618:	bne	19638 <__assert_fail@plt+0x8120>
   1961c:	mov	r0, sp
   19620:	mov	r1, r6
   19624:	bl	193b0 <__assert_fail@plt+0x7e98>
   19628:	ldrb	r1, [sp, #4]
   1962c:	mov	r0, #11
   19630:	cmp	r1, #21
   19634:	bne	19648 <__assert_fail@plt+0x8130>
   19638:	mov	r0, #0
   1963c:	str	r0, [r9]
   19640:	ldrb	r1, [r8]
   19644:	strb	r1, [r9, #4]
   19648:	sub	sp, fp, #24
   1964c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19654:	add	fp, sp, #28
   19658:	sub	sp, sp, #12
   1965c:	mov	sl, r0
   19660:	ldr	r7, [r3]
   19664:	mov	r0, #11
   19668:	cmp	r7, #2
   1966c:	cmpne	r7, #4
   19670:	beq	19688 <__assert_fail@plt+0x8170>
   19674:	ldr	r8, [fp, #8]
   19678:	ldr	r5, [r8]
   1967c:	cmp	r5, #2
   19680:	cmpne	r5, #4
   19684:	bne	19690 <__assert_fail@plt+0x8178>
   19688:	sub	sp, fp, #28
   1968c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19690:	mov	r6, r3
   19694:	mov	r9, r2
   19698:	mov	r4, r1
   1969c:	cmp	r7, #3
   196a0:	bne	196b4 <__assert_fail@plt+0x819c>
   196a4:	ldr	r0, [r6, #4]
   196a8:	bl	113ec <strlen@plt>
   196ac:	cmp	r0, #1
   196b0:	bhi	197fc <__assert_fail@plt+0x82e4>
   196b4:	cmp	r5, #3
   196b8:	bne	196cc <__assert_fail@plt+0x81b4>
   196bc:	ldr	r0, [r8, #4]
   196c0:	bl	113ec <strlen@plt>
   196c4:	cmp	r0, #1
   196c8:	bhi	197fc <__assert_fail@plt+0x82e4>
   196cc:	cmp	r7, #3
   196d0:	beq	196e4 <__assert_fail@plt+0x81cc>
   196d4:	mov	r0, #0
   196d8:	cmp	r7, #0
   196dc:	ldrbeq	r0, [r6, #4]
   196e0:	b	196ec <__assert_fail@plt+0x81d4>
   196e4:	ldr	r0, [r6, #4]
   196e8:	ldrb	r0, [r0]
   196ec:	stmib	sp, {r4, r9}
   196f0:	cmp	r5, #3
   196f4:	beq	19708 <__assert_fail@plt+0x81f0>
   196f8:	mov	r9, #0
   196fc:	cmp	r5, #0
   19700:	ldrbeq	r9, [r8, #4]
   19704:	b	19710 <__assert_fail@plt+0x81f8>
   19708:	ldr	r1, [r8, #4]
   1970c:	ldrb	r9, [r1]
   19710:	ldr	r4, [fp, #12]
   19714:	cmp	r7, #3
   19718:	cmpne	r7, #0
   1971c:	bne	19730 <__assert_fail@plt+0x8218>
   19720:	mov	r1, r4
   19724:	bl	1a3b0 <__assert_fail@plt+0x8e98>
   19728:	mov	r7, r0
   1972c:	b	19734 <__assert_fail@plt+0x821c>
   19730:	ldr	r7, [r6, #4]
   19734:	ldr	r0, [r8]
   19738:	cmp	r0, #3
   1973c:	cmpne	r0, #0
   19740:	bne	19758 <__assert_fail@plt+0x8240>
   19744:	mov	r0, r9
   19748:	mov	r1, r4
   1974c:	bl	1a3b0 <__assert_fail@plt+0x8e98>
   19750:	mov	r6, r0
   19754:	b	1975c <__assert_fail@plt+0x8244>
   19758:	ldr	r6, [r8, #4]
   1975c:	ldr	r1, [sp, #8]
   19760:	ldr	r5, [sp, #4]
   19764:	mov	r0, #3
   19768:	cmn	r7, #1
   1976c:	cmnne	r6, #1
   19770:	beq	19688 <__assert_fail@plt+0x8170>
   19774:	ldr	r0, [fp, #16]
   19778:	tst	r0, #65536	; 0x10000
   1977c:	beq	1978c <__assert_fail@plt+0x8274>
   19780:	cmp	r7, r6
   19784:	mov	r0, #11
   19788:	bhi	19688 <__assert_fail@plt+0x8170>
   1978c:	ldr	r0, [r4, #92]	; 0x5c
   19790:	cmp	r0, #2
   19794:	blt	197c8 <__assert_fail@plt+0x82b0>
   19798:	ldr	r0, [r5, #32]
   1979c:	ldr	r1, [r1]
   197a0:	cmp	r1, r0
   197a4:	beq	19808 <__assert_fail@plt+0x82f0>
   197a8:	ldr	r0, [r5, #4]
   197ac:	ldr	r1, [r5, #32]
   197b0:	str	r7, [r0, r1, lsl #2]
   197b4:	ldr	r0, [r5, #8]
   197b8:	ldr	r1, [r5, #32]
   197bc:	add	r2, r1, #1
   197c0:	str	r2, [r5, #32]
   197c4:	str	r6, [r0, r1, lsl #2]
   197c8:	mov	r5, #0
   197cc:	cmp	r7, r5
   197d0:	cmpls	r5, r6
   197d4:	bhi	197e4 <__assert_fail@plt+0x82cc>
   197d8:	mov	r0, sl
   197dc:	mov	r1, r5
   197e0:	bl	19524 <__assert_fail@plt+0x800c>
   197e4:	add	r5, r5, #1
   197e8:	cmp	r5, #256	; 0x100
   197ec:	bne	197cc <__assert_fail@plt+0x82b4>
   197f0:	mov	r0, #0
   197f4:	sub	sp, fp, #28
   197f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197fc:	mov	r0, #3
   19800:	sub	sp, fp, #28
   19804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19808:	mov	r1, #1
   1980c:	orr	r8, r1, r0, lsl #1
   19810:	lsl	r4, r8, #2
   19814:	ldr	r0, [r5, #4]
   19818:	mov	r1, r4
   1981c:	bl	22654 <__assert_fail@plt+0x1113c>
   19820:	mov	r9, r0
   19824:	ldr	r0, [r5, #8]
   19828:	mov	r1, r4
   1982c:	bl	22654 <__assert_fail@plt+0x1113c>
   19830:	mov	r4, r0
   19834:	cmp	r9, #0
   19838:	cmpne	r4, #0
   1983c:	bne	1985c <__assert_fail@plt+0x8344>
   19840:	mov	r0, r9
   19844:	bl	22b14 <__assert_fail@plt+0x115fc>
   19848:	mov	r0, r4
   1984c:	bl	22b14 <__assert_fail@plt+0x115fc>
   19850:	mov	r0, #12
   19854:	sub	sp, fp, #28
   19858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1985c:	ldr	r5, [sp, #4]
   19860:	str	r9, [r5, #4]
   19864:	str	r4, [r5, #8]
   19868:	ldr	r0, [sp, #8]
   1986c:	str	r8, [r0]
   19870:	b	197a8 <__assert_fail@plt+0x8290>
   19874:	push	{r4, r5, fp, lr}
   19878:	add	fp, sp, #8
   1987c:	mov	r5, r1
   19880:	mov	r4, r0
   19884:	mov	r0, r1
   19888:	bl	113ec <strlen@plt>
   1988c:	cmp	r0, #1
   19890:	movne	r0, #3
   19894:	popne	{r4, r5, fp, pc}
   19898:	ldrb	r1, [r5]
   1989c:	mov	r0, r4
   198a0:	bl	19524 <__assert_fail@plt+0x800c>
   198a4:	mov	r0, #0
   198a8:	pop	{r4, r5, fp, pc}
   198ac:	push	{r4, r5, fp, lr}
   198b0:	add	fp, sp, #8
   198b4:	mov	r5, r1
   198b8:	mov	r4, r0
   198bc:	mov	r0, r1
   198c0:	bl	113ec <strlen@plt>
   198c4:	cmp	r0, #1
   198c8:	movne	r0, #3
   198cc:	popne	{r4, r5, fp, pc}
   198d0:	ldrb	r1, [r5]
   198d4:	mov	r0, r4
   198d8:	bl	19524 <__assert_fail@plt+0x800c>
   198dc:	mov	r0, #0
   198e0:	pop	{r4, r5, fp, pc}
   198e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   198e8:	add	fp, sp, #24
   198ec:	mov	r5, r3
   198f0:	mov	r7, r2
   198f4:	mov	r4, r1
   198f8:	mov	r8, r0
   198fc:	ldr	r6, [fp, #8]
   19900:	ldrb	r0, [fp, #14]
   19904:	tst	r0, #64	; 0x40
   19908:	beq	19944 <__assert_fail@plt+0x842c>
   1990c:	movw	r1, #16162	; 0x3f22
   19910:	movt	r1, #2
   19914:	mov	r0, r6
   19918:	bl	11248 <strcmp@plt>
   1991c:	cmp	r0, #0
   19920:	beq	1993c <__assert_fail@plt+0x8424>
   19924:	movw	r1, #16168	; 0x3f28
   19928:	movt	r1, #2
   1992c:	mov	r0, r6
   19930:	bl	11248 <strcmp@plt>
   19934:	cmp	r0, #0
   19938:	bne	19944 <__assert_fail@plt+0x842c>
   1993c:	movw	r6, #16174	; 0x3f2e
   19940:	movt	r6, #2
   19944:	ldr	r0, [r7, #36]	; 0x24
   19948:	ldr	r1, [r5]
   1994c:	cmp	r1, r0
   19950:	beq	19e60 <__assert_fail@plt+0x8948>
   19954:	mov	r0, r6
   19958:	bl	11218 <wctype@plt>
   1995c:	ldr	r1, [r7, #12]
   19960:	ldr	r2, [r7, #36]	; 0x24
   19964:	add	r3, r2, #1
   19968:	str	r3, [r7, #36]	; 0x24
   1996c:	str	r0, [r1, r2, lsl #2]
   19970:	movw	r1, #16150	; 0x3f16
   19974:	movt	r1, #2
   19978:	mov	r0, r6
   1997c:	bl	11248 <strcmp@plt>
   19980:	cmp	r0, #0
   19984:	beq	19ae8 <__assert_fail@plt+0x85d0>
   19988:	movw	r1, #16180	; 0x3f34
   1998c:	movt	r1, #2
   19990:	mov	r0, r6
   19994:	bl	11248 <strcmp@plt>
   19998:	cmp	r0, #0
   1999c:	beq	19b38 <__assert_fail@plt+0x8620>
   199a0:	movw	r1, #16168	; 0x3f28
   199a4:	movt	r1, #2
   199a8:	mov	r0, r6
   199ac:	bl	11248 <strcmp@plt>
   199b0:	cmp	r0, #0
   199b4:	beq	19b88 <__assert_fail@plt+0x8670>
   199b8:	movw	r1, #16156	; 0x3f1c
   199bc:	movt	r1, #2
   199c0:	mov	r0, r6
   199c4:	bl	11248 <strcmp@plt>
   199c8:	cmp	r0, #0
   199cc:	beq	19bdc <__assert_fail@plt+0x86c4>
   199d0:	movw	r1, #16174	; 0x3f2e
   199d4:	movt	r1, #2
   199d8:	mov	r0, r6
   199dc:	bl	11248 <strcmp@plt>
   199e0:	cmp	r0, #0
   199e4:	beq	19c30 <__assert_fail@plt+0x8718>
   199e8:	movw	r1, #16211	; 0x3f53
   199ec:	movt	r1, #2
   199f0:	mov	r0, r6
   199f4:	bl	11248 <strcmp@plt>
   199f8:	cmp	r0, #0
   199fc:	beq	19c84 <__assert_fail@plt+0x876c>
   19a00:	movw	r1, #16186	; 0x3f3a
   19a04:	movt	r1, #2
   19a08:	mov	r0, r6
   19a0c:	bl	11248 <strcmp@plt>
   19a10:	cmp	r0, #0
   19a14:	beq	19cd8 <__assert_fail@plt+0x87c0>
   19a18:	movw	r1, #16162	; 0x3f22
   19a1c:	movt	r1, #2
   19a20:	mov	r0, r6
   19a24:	bl	11248 <strcmp@plt>
   19a28:	cmp	r0, #0
   19a2c:	beq	19d28 <__assert_fail@plt+0x8810>
   19a30:	movw	r1, #16192	; 0x3f40
   19a34:	movt	r1, #2
   19a38:	mov	r0, r6
   19a3c:	bl	11248 <strcmp@plt>
   19a40:	cmp	r0, #0
   19a44:	beq	19d78 <__assert_fail@plt+0x8860>
   19a48:	movw	r1, #16198	; 0x3f46
   19a4c:	movt	r1, #2
   19a50:	mov	r0, r6
   19a54:	bl	11248 <strcmp@plt>
   19a58:	cmp	r0, #0
   19a5c:	beq	19dc4 <__assert_fail@plt+0x88ac>
   19a60:	movw	r1, #16204	; 0x3f4c
   19a64:	movt	r1, #2
   19a68:	mov	r0, r6
   19a6c:	bl	11248 <strcmp@plt>
   19a70:	cmp	r0, #0
   19a74:	beq	19e14 <__assert_fail@plt+0x88fc>
   19a78:	movw	r1, #16210	; 0x3f52
   19a7c:	movt	r1, #2
   19a80:	mov	r0, r6
   19a84:	bl	11248 <strcmp@plt>
   19a88:	mov	r1, r0
   19a8c:	mov	r0, #4
   19a90:	cmp	r1, #0
   19a94:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   19a98:	bl	113d4 <__ctype_b_loc@plt>
   19a9c:	mov	r6, r0
   19aa0:	cmp	r8, #0
   19aa4:	bne	1a09c <__assert_fail@plt+0x8b84>
   19aa8:	mov	r7, #0
   19aac:	mov	r5, #0
   19ab0:	ldr	r0, [r6]
   19ab4:	add	r0, r0, r7
   19ab8:	ldrb	r0, [r0, #1]
   19abc:	tst	r0, #16
   19ac0:	beq	19ad0 <__assert_fail@plt+0x85b8>
   19ac4:	mov	r0, r4
   19ac8:	mov	r1, r5
   19acc:	bl	19524 <__assert_fail@plt+0x800c>
   19ad0:	add	r7, r7, #2
   19ad4:	add	r5, r5, #1
   19ad8:	mov	r0, #0
   19adc:	cmp	r5, #256	; 0x100
   19ae0:	bne	19ab0 <__assert_fail@plt+0x8598>
   19ae4:	b	19e5c <__assert_fail@plt+0x8944>
   19ae8:	bl	113d4 <__ctype_b_loc@plt>
   19aec:	mov	r6, r0
   19af0:	cmp	r8, #0
   19af4:	bne	19e8c <__assert_fail@plt+0x8974>
   19af8:	mov	r7, #0
   19afc:	mov	r5, #0
   19b00:	b	19b18 <__assert_fail@plt+0x8600>
   19b04:	add	r7, r7, #2
   19b08:	add	r5, r5, #1
   19b0c:	cmp	r5, #256	; 0x100
   19b10:	moveq	r0, #0
   19b14:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b18:	ldr	r0, [r6]
   19b1c:	ldrb	r0, [r0, r7]
   19b20:	tst	r0, #8
   19b24:	beq	19b04 <__assert_fail@plt+0x85ec>
   19b28:	mov	r0, r4
   19b2c:	mov	r1, r5
   19b30:	bl	19524 <__assert_fail@plt+0x800c>
   19b34:	b	19b04 <__assert_fail@plt+0x85ec>
   19b38:	bl	113d4 <__ctype_b_loc@plt>
   19b3c:	mov	r6, r0
   19b40:	cmp	r8, #0
   19b44:	bne	19ec4 <__assert_fail@plt+0x89ac>
   19b48:	mov	r7, #0
   19b4c:	mov	r5, #0
   19b50:	b	19b68 <__assert_fail@plt+0x8650>
   19b54:	add	r7, r7, #2
   19b58:	add	r5, r5, #1
   19b5c:	cmp	r5, #256	; 0x100
   19b60:	moveq	r0, #0
   19b64:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b68:	ldr	r0, [r6]
   19b6c:	ldrb	r0, [r0, r7]
   19b70:	tst	r0, #2
   19b74:	beq	19b54 <__assert_fail@plt+0x863c>
   19b78:	mov	r0, r4
   19b7c:	mov	r1, r5
   19b80:	bl	19524 <__assert_fail@plt+0x800c>
   19b84:	b	19b54 <__assert_fail@plt+0x863c>
   19b88:	bl	113d4 <__ctype_b_loc@plt>
   19b8c:	mov	r6, r0
   19b90:	cmp	r8, #0
   19b94:	bne	19efc <__assert_fail@plt+0x89e4>
   19b98:	mov	r7, #0
   19b9c:	mov	r5, #0
   19ba0:	b	19bb8 <__assert_fail@plt+0x86a0>
   19ba4:	add	r7, r7, #2
   19ba8:	add	r5, r5, #1
   19bac:	cmp	r5, #256	; 0x100
   19bb0:	moveq	r0, #0
   19bb4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   19bb8:	ldr	r0, [r6]
   19bbc:	add	r0, r0, r7
   19bc0:	ldrb	r0, [r0, #1]
   19bc4:	tst	r0, #2
   19bc8:	beq	19ba4 <__assert_fail@plt+0x868c>
   19bcc:	mov	r0, r4
   19bd0:	mov	r1, r5
   19bd4:	bl	19524 <__assert_fail@plt+0x800c>
   19bd8:	b	19ba4 <__assert_fail@plt+0x868c>
   19bdc:	bl	113d4 <__ctype_b_loc@plt>
   19be0:	mov	r6, r0
   19be4:	cmp	r8, #0
   19be8:	bne	19f38 <__assert_fail@plt+0x8a20>
   19bec:	mov	r7, #0
   19bf0:	mov	r5, #0
   19bf4:	b	19c0c <__assert_fail@plt+0x86f4>
   19bf8:	add	r7, r7, #2
   19bfc:	add	r5, r5, #1
   19c00:	cmp	r5, #256	; 0x100
   19c04:	moveq	r0, #0
   19c08:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   19c0c:	ldr	r0, [r6]
   19c10:	add	r0, r0, r7
   19c14:	ldrb	r0, [r0, #1]
   19c18:	tst	r0, #32
   19c1c:	beq	19bf8 <__assert_fail@plt+0x86e0>
   19c20:	mov	r0, r4
   19c24:	mov	r1, r5
   19c28:	bl	19524 <__assert_fail@plt+0x800c>
   19c2c:	b	19bf8 <__assert_fail@plt+0x86e0>
   19c30:	bl	113d4 <__ctype_b_loc@plt>
   19c34:	mov	r6, r0
   19c38:	cmp	r8, #0
   19c3c:	bne	19f74 <__assert_fail@plt+0x8a5c>
   19c40:	mov	r7, #0
   19c44:	mov	r5, #0
   19c48:	b	19c60 <__assert_fail@plt+0x8748>
   19c4c:	add	r7, r7, #2
   19c50:	add	r5, r5, #1
   19c54:	cmp	r5, #256	; 0x100
   19c58:	moveq	r0, #0
   19c5c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   19c60:	ldr	r0, [r6]
   19c64:	add	r0, r0, r7
   19c68:	ldrb	r0, [r0, #1]
   19c6c:	tst	r0, #4
   19c70:	beq	19c4c <__assert_fail@plt+0x8734>
   19c74:	mov	r0, r4
   19c78:	mov	r1, r5
   19c7c:	bl	19524 <__assert_fail@plt+0x800c>
   19c80:	b	19c4c <__assert_fail@plt+0x8734>
   19c84:	bl	113d4 <__ctype_b_loc@plt>
   19c88:	mov	r6, r0
   19c8c:	cmp	r8, #0
   19c90:	bne	19fb0 <__assert_fail@plt+0x8a98>
   19c94:	mov	r7, #0
   19c98:	mov	r5, #0
   19c9c:	b	19cb4 <__assert_fail@plt+0x879c>
   19ca0:	add	r7, r7, #2
   19ca4:	add	r5, r5, #1
   19ca8:	cmp	r5, #256	; 0x100
   19cac:	moveq	r0, #0
   19cb0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   19cb4:	ldr	r0, [r6]
   19cb8:	add	r0, r0, r7
   19cbc:	ldrb	r0, [r0, #1]
   19cc0:	tst	r0, #8
   19cc4:	beq	19ca0 <__assert_fail@plt+0x8788>
   19cc8:	mov	r0, r4
   19ccc:	mov	r1, r5
   19cd0:	bl	19524 <__assert_fail@plt+0x800c>
   19cd4:	b	19ca0 <__assert_fail@plt+0x8788>
   19cd8:	bl	113d4 <__ctype_b_loc@plt>
   19cdc:	mov	r6, r0
   19ce0:	cmp	r8, #0
   19ce4:	bne	19fec <__assert_fail@plt+0x8ad4>
   19ce8:	mov	r7, #0
   19cec:	mov	r5, #0
   19cf0:	ldr	r0, [r6]
   19cf4:	add	r0, r0, r7
   19cf8:	ldrb	r0, [r0, #1]
   19cfc:	tst	r0, #64	; 0x40
   19d00:	beq	19d10 <__assert_fail@plt+0x87f8>
   19d04:	mov	r0, r4
   19d08:	mov	r1, r5
   19d0c:	bl	19524 <__assert_fail@plt+0x800c>
   19d10:	add	r7, r7, #2
   19d14:	add	r5, r5, #1
   19d18:	mov	r0, #0
   19d1c:	cmp	r5, #256	; 0x100
   19d20:	bne	19cf0 <__assert_fail@plt+0x87d8>
   19d24:	b	19e5c <__assert_fail@plt+0x8944>
   19d28:	bl	113d4 <__ctype_b_loc@plt>
   19d2c:	mov	r6, r0
   19d30:	cmp	r8, #0
   19d34:	bne	1a028 <__assert_fail@plt+0x8b10>
   19d38:	mov	r7, #0
   19d3c:	mov	r5, #0
   19d40:	ldr	r0, [r6]
   19d44:	add	r0, r0, r7
   19d48:	ldrb	r0, [r0, #1]
   19d4c:	tst	r0, #1
   19d50:	beq	19d60 <__assert_fail@plt+0x8848>
   19d54:	mov	r0, r4
   19d58:	mov	r1, r5
   19d5c:	bl	19524 <__assert_fail@plt+0x800c>
   19d60:	add	r7, r7, #2
   19d64:	add	r5, r5, #1
   19d68:	mov	r0, #0
   19d6c:	cmp	r5, #256	; 0x100
   19d70:	bne	19d40 <__assert_fail@plt+0x8828>
   19d74:	b	19e5c <__assert_fail@plt+0x8944>
   19d78:	bl	113d4 <__ctype_b_loc@plt>
   19d7c:	mov	r6, r0
   19d80:	cmp	r8, #0
   19d84:	bne	1a064 <__assert_fail@plt+0x8b4c>
   19d88:	mov	r7, #0
   19d8c:	mov	r5, #0
   19d90:	ldr	r0, [r6]
   19d94:	ldrb	r0, [r0, r7]
   19d98:	tst	r0, #1
   19d9c:	beq	19dac <__assert_fail@plt+0x8894>
   19da0:	mov	r0, r4
   19da4:	mov	r1, r5
   19da8:	bl	19524 <__assert_fail@plt+0x800c>
   19dac:	add	r7, r7, #2
   19db0:	add	r5, r5, #1
   19db4:	mov	r0, #0
   19db8:	cmp	r5, #256	; 0x100
   19dbc:	bne	19d90 <__assert_fail@plt+0x8878>
   19dc0:	b	19e5c <__assert_fail@plt+0x8944>
   19dc4:	bl	113d4 <__ctype_b_loc@plt>
   19dc8:	mov	r6, r0
   19dcc:	cmp	r8, #0
   19dd0:	bne	1a0d8 <__assert_fail@plt+0x8bc0>
   19dd4:	mov	r7, #0
   19dd8:	mov	r5, #0
   19ddc:	ldr	r0, [r6]
   19de0:	add	r0, r0, r7
   19de4:	ldrsh	r0, [r0]
   19de8:	cmn	r0, #1
   19dec:	bgt	19dfc <__assert_fail@plt+0x88e4>
   19df0:	mov	r0, r4
   19df4:	mov	r1, r5
   19df8:	bl	19524 <__assert_fail@plt+0x800c>
   19dfc:	add	r7, r7, #2
   19e00:	add	r5, r5, #1
   19e04:	mov	r0, #0
   19e08:	cmp	r5, #256	; 0x100
   19e0c:	bne	19ddc <__assert_fail@plt+0x88c4>
   19e10:	b	19e5c <__assert_fail@plt+0x8944>
   19e14:	bl	113d4 <__ctype_b_loc@plt>
   19e18:	mov	r6, r0
   19e1c:	cmp	r8, #0
   19e20:	bne	1a114 <__assert_fail@plt+0x8bfc>
   19e24:	mov	r7, #0
   19e28:	mov	r5, #0
   19e2c:	ldr	r0, [r6]
   19e30:	ldrb	r0, [r0, r7]
   19e34:	tst	r0, #4
   19e38:	beq	19e48 <__assert_fail@plt+0x8930>
   19e3c:	mov	r0, r4
   19e40:	mov	r1, r5
   19e44:	bl	19524 <__assert_fail@plt+0x800c>
   19e48:	add	r7, r7, #2
   19e4c:	add	r5, r5, #1
   19e50:	mov	r0, #0
   19e54:	cmp	r5, #256	; 0x100
   19e58:	bne	19e2c <__assert_fail@plt+0x8914>
   19e5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19e60:	mov	r1, #1
   19e64:	orr	r9, r1, r0, lsl #1
   19e68:	lsl	r1, r9, #2
   19e6c:	ldr	r0, [r7, #12]
   19e70:	bl	22654 <__assert_fail@plt+0x1113c>
   19e74:	cmp	r0, #0
   19e78:	moveq	r0, #12
   19e7c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   19e80:	str	r0, [r7, #12]
   19e84:	str	r9, [r5]
   19e88:	b	19954 <__assert_fail@plt+0x843c>
   19e8c:	mov	r5, #0
   19e90:	ldr	r0, [r6]
   19e94:	ldrb	r0, [r0, r5]
   19e98:	tst	r0, #8
   19e9c:	beq	19eac <__assert_fail@plt+0x8994>
   19ea0:	ldrb	r1, [r8]
   19ea4:	mov	r0, r4
   19ea8:	bl	19524 <__assert_fail@plt+0x800c>
   19eac:	add	r8, r8, #1
   19eb0:	add	r5, r5, #2
   19eb4:	mov	r0, #0
   19eb8:	cmp	r5, #512	; 0x200
   19ebc:	bne	19e90 <__assert_fail@plt+0x8978>
   19ec0:	b	19e5c <__assert_fail@plt+0x8944>
   19ec4:	mov	r5, #0
   19ec8:	ldr	r0, [r6]
   19ecc:	ldrb	r0, [r0, r5]
   19ed0:	tst	r0, #2
   19ed4:	beq	19ee4 <__assert_fail@plt+0x89cc>
   19ed8:	ldrb	r1, [r8]
   19edc:	mov	r0, r4
   19ee0:	bl	19524 <__assert_fail@plt+0x800c>
   19ee4:	add	r8, r8, #1
   19ee8:	add	r5, r5, #2
   19eec:	mov	r0, #0
   19ef0:	cmp	r5, #512	; 0x200
   19ef4:	bne	19ec8 <__assert_fail@plt+0x89b0>
   19ef8:	b	19e5c <__assert_fail@plt+0x8944>
   19efc:	mov	r5, #0
   19f00:	ldr	r0, [r6]
   19f04:	add	r0, r0, r5
   19f08:	ldrb	r0, [r0, #1]
   19f0c:	tst	r0, #2
   19f10:	beq	19f20 <__assert_fail@plt+0x8a08>
   19f14:	ldrb	r1, [r8]
   19f18:	mov	r0, r4
   19f1c:	bl	19524 <__assert_fail@plt+0x800c>
   19f20:	add	r8, r8, #1
   19f24:	add	r5, r5, #2
   19f28:	mov	r0, #0
   19f2c:	cmp	r5, #512	; 0x200
   19f30:	bne	19f00 <__assert_fail@plt+0x89e8>
   19f34:	b	19e5c <__assert_fail@plt+0x8944>
   19f38:	mov	r5, #0
   19f3c:	ldr	r0, [r6]
   19f40:	add	r0, r0, r5
   19f44:	ldrb	r0, [r0, #1]
   19f48:	tst	r0, #32
   19f4c:	beq	19f5c <__assert_fail@plt+0x8a44>
   19f50:	ldrb	r1, [r8]
   19f54:	mov	r0, r4
   19f58:	bl	19524 <__assert_fail@plt+0x800c>
   19f5c:	add	r8, r8, #1
   19f60:	add	r5, r5, #2
   19f64:	mov	r0, #0
   19f68:	cmp	r5, #512	; 0x200
   19f6c:	bne	19f3c <__assert_fail@plt+0x8a24>
   19f70:	b	19e5c <__assert_fail@plt+0x8944>
   19f74:	mov	r5, #0
   19f78:	ldr	r0, [r6]
   19f7c:	add	r0, r0, r5
   19f80:	ldrb	r0, [r0, #1]
   19f84:	tst	r0, #4
   19f88:	beq	19f98 <__assert_fail@plt+0x8a80>
   19f8c:	ldrb	r1, [r8]
   19f90:	mov	r0, r4
   19f94:	bl	19524 <__assert_fail@plt+0x800c>
   19f98:	add	r8, r8, #1
   19f9c:	add	r5, r5, #2
   19fa0:	mov	r0, #0
   19fa4:	cmp	r5, #512	; 0x200
   19fa8:	bne	19f78 <__assert_fail@plt+0x8a60>
   19fac:	b	19e5c <__assert_fail@plt+0x8944>
   19fb0:	mov	r5, #0
   19fb4:	ldr	r0, [r6]
   19fb8:	add	r0, r0, r5
   19fbc:	ldrb	r0, [r0, #1]
   19fc0:	tst	r0, #8
   19fc4:	beq	19fd4 <__assert_fail@plt+0x8abc>
   19fc8:	ldrb	r1, [r8]
   19fcc:	mov	r0, r4
   19fd0:	bl	19524 <__assert_fail@plt+0x800c>
   19fd4:	add	r8, r8, #1
   19fd8:	add	r5, r5, #2
   19fdc:	mov	r0, #0
   19fe0:	cmp	r5, #512	; 0x200
   19fe4:	bne	19fb4 <__assert_fail@plt+0x8a9c>
   19fe8:	b	19e5c <__assert_fail@plt+0x8944>
   19fec:	mov	r5, #0
   19ff0:	ldr	r0, [r6]
   19ff4:	add	r0, r0, r5
   19ff8:	ldrb	r0, [r0, #1]
   19ffc:	tst	r0, #64	; 0x40
   1a000:	beq	1a010 <__assert_fail@plt+0x8af8>
   1a004:	ldrb	r1, [r8]
   1a008:	mov	r0, r4
   1a00c:	bl	19524 <__assert_fail@plt+0x800c>
   1a010:	add	r8, r8, #1
   1a014:	add	r5, r5, #2
   1a018:	mov	r0, #0
   1a01c:	cmp	r5, #512	; 0x200
   1a020:	bne	19ff0 <__assert_fail@plt+0x8ad8>
   1a024:	b	19e5c <__assert_fail@plt+0x8944>
   1a028:	mov	r5, #0
   1a02c:	ldr	r0, [r6]
   1a030:	add	r0, r0, r5
   1a034:	ldrb	r0, [r0, #1]
   1a038:	tst	r0, #1
   1a03c:	beq	1a04c <__assert_fail@plt+0x8b34>
   1a040:	ldrb	r1, [r8]
   1a044:	mov	r0, r4
   1a048:	bl	19524 <__assert_fail@plt+0x800c>
   1a04c:	add	r8, r8, #1
   1a050:	add	r5, r5, #2
   1a054:	mov	r0, #0
   1a058:	cmp	r5, #512	; 0x200
   1a05c:	bne	1a02c <__assert_fail@plt+0x8b14>
   1a060:	b	19e5c <__assert_fail@plt+0x8944>
   1a064:	mov	r5, #0
   1a068:	ldr	r0, [r6]
   1a06c:	ldrb	r0, [r0, r5]
   1a070:	tst	r0, #1
   1a074:	beq	1a084 <__assert_fail@plt+0x8b6c>
   1a078:	ldrb	r1, [r8]
   1a07c:	mov	r0, r4
   1a080:	bl	19524 <__assert_fail@plt+0x800c>
   1a084:	add	r8, r8, #1
   1a088:	add	r5, r5, #2
   1a08c:	mov	r0, #0
   1a090:	cmp	r5, #512	; 0x200
   1a094:	bne	1a068 <__assert_fail@plt+0x8b50>
   1a098:	b	19e5c <__assert_fail@plt+0x8944>
   1a09c:	mov	r5, #0
   1a0a0:	ldr	r0, [r6]
   1a0a4:	add	r0, r0, r5
   1a0a8:	ldrb	r0, [r0, #1]
   1a0ac:	tst	r0, #16
   1a0b0:	beq	1a0c0 <__assert_fail@plt+0x8ba8>
   1a0b4:	ldrb	r1, [r8]
   1a0b8:	mov	r0, r4
   1a0bc:	bl	19524 <__assert_fail@plt+0x800c>
   1a0c0:	add	r8, r8, #1
   1a0c4:	add	r5, r5, #2
   1a0c8:	mov	r0, #0
   1a0cc:	cmp	r5, #512	; 0x200
   1a0d0:	bne	1a0a0 <__assert_fail@plt+0x8b88>
   1a0d4:	b	19e5c <__assert_fail@plt+0x8944>
   1a0d8:	mov	r5, #0
   1a0dc:	ldr	r0, [r6]
   1a0e0:	add	r0, r0, r5
   1a0e4:	ldrsh	r0, [r0]
   1a0e8:	cmn	r0, #1
   1a0ec:	bgt	1a0fc <__assert_fail@plt+0x8be4>
   1a0f0:	ldrb	r1, [r8]
   1a0f4:	mov	r0, r4
   1a0f8:	bl	19524 <__assert_fail@plt+0x800c>
   1a0fc:	add	r8, r8, #1
   1a100:	add	r5, r5, #2
   1a104:	mov	r0, #0
   1a108:	cmp	r5, #512	; 0x200
   1a10c:	bne	1a0dc <__assert_fail@plt+0x8bc4>
   1a110:	b	19e5c <__assert_fail@plt+0x8944>
   1a114:	mov	r5, #0
   1a118:	ldr	r0, [r6]
   1a11c:	ldrb	r0, [r0, r5]
   1a120:	tst	r0, #4
   1a124:	beq	1a134 <__assert_fail@plt+0x8c1c>
   1a128:	ldrb	r1, [r8]
   1a12c:	mov	r0, r4
   1a130:	bl	19524 <__assert_fail@plt+0x800c>
   1a134:	add	r8, r8, #1
   1a138:	add	r5, r5, #2
   1a13c:	mov	r0, #0
   1a140:	cmp	r5, #512	; 0x200
   1a144:	bne	1a118 <__assert_fail@plt+0x8c00>
   1a148:	b	19e5c <__assert_fail@plt+0x8944>
   1a14c:	mov	r1, #0
   1a150:	ldr	r2, [r0, r1, lsl #2]
   1a154:	mvn	r2, r2
   1a158:	str	r2, [r0, r1, lsl #2]
   1a15c:	add	r1, r1, #1
   1a160:	cmp	r1, #8
   1a164:	bne	1a150 <__assert_fail@plt+0x8c38>
   1a168:	bx	lr
   1a16c:	mov	r2, #0
   1a170:	ldr	ip, [r1, r2, lsl #2]
   1a174:	ldr	r3, [r0, r2, lsl #2]
   1a178:	and	r3, r3, ip
   1a17c:	str	r3, [r0, r2, lsl #2]
   1a180:	add	r2, r2, #1
   1a184:	cmp	r2, #8
   1a188:	bne	1a170 <__assert_fail@plt+0x8c58>
   1a18c:	bx	lr
   1a190:	push	{fp, lr}
   1a194:	mov	fp, sp
   1a198:	mov	lr, r0
   1a19c:	ldr	r3, [r0, #80]	; 0x50
   1a1a0:	mov	r0, #1
   1a1a4:	cmp	r3, #1
   1a1a8:	beq	1a1e8 <__assert_fail@plt+0x8cd0>
   1a1ac:	ldr	ip, [lr, #28]
   1a1b0:	add	r3, r1, #1
   1a1b4:	cmp	r3, ip
   1a1b8:	bge	1a1e8 <__assert_fail@plt+0x8cd0>
   1a1bc:	ldr	r0, [lr, #8]
   1a1c0:	add	ip, r0, r1, lsl #2
   1a1c4:	mov	r0, #1
   1a1c8:	ldr	r3, [ip, r0, lsl #2]
   1a1cc:	cmn	r3, #1
   1a1d0:	popne	{fp, pc}
   1a1d4:	add	r0, r0, #1
   1a1d8:	add	r3, r1, r0
   1a1dc:	ldr	r2, [lr, #28]
   1a1e0:	cmp	r3, r2
   1a1e4:	blt	1a1c8 <__assert_fail@plt+0x8cb0>
   1a1e8:	pop	{fp, pc}
   1a1ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a1f0:	add	fp, sp, #24
   1a1f4:	mov	r7, r1
   1a1f8:	mov	r9, r0
   1a1fc:	ldr	r0, [r1, #40]	; 0x28
   1a200:	ldr	r1, [r1, #56]	; 0x38
   1a204:	mov	r8, #7
   1a208:	cmp	r1, r0
   1a20c:	ble	1a2d4 <__assert_fail@plt+0x8dbc>
   1a210:	mov	r6, r2
   1a214:	ldrb	r5, [r2]
   1a218:	mov	r4, #0
   1a21c:	ldrb	r0, [r6, #4]
   1a220:	cmp	r0, #30
   1a224:	bne	1a234 <__assert_fail@plt+0x8d1c>
   1a228:	mov	r0, r7
   1a22c:	bl	1a2dc <__assert_fail@plt+0x8dc4>
   1a230:	b	1a248 <__assert_fail@plt+0x8d30>
   1a234:	ldr	r0, [r7, #4]
   1a238:	ldr	r1, [r7, #40]	; 0x28
   1a23c:	add	r2, r1, #1
   1a240:	str	r2, [r7, #40]	; 0x28
   1a244:	ldrb	r0, [r0, r1]
   1a248:	ldr	r1, [r7, #40]	; 0x28
   1a24c:	ldr	r2, [r7, #56]	; 0x38
   1a250:	cmp	r2, r1
   1a254:	ble	1a2d4 <__assert_fail@plt+0x8dbc>
   1a258:	cmp	r0, r5
   1a25c:	bne	1a270 <__assert_fail@plt+0x8d58>
   1a260:	ldr	r2, [r7, #4]
   1a264:	ldrb	r2, [r2, r1]
   1a268:	cmp	r2, #93	; 0x5d
   1a26c:	beq	1a28c <__assert_fail@plt+0x8d74>
   1a270:	ldr	r1, [r9, #4]
   1a274:	strb	r0, [r1, r4]
   1a278:	add	r0, r4, #1
   1a27c:	cmp	r4, #30
   1a280:	mov	r4, r0
   1a284:	bls	1a21c <__assert_fail@plt+0x8d04>
   1a288:	b	1a2d4 <__assert_fail@plt+0x8dbc>
   1a28c:	add	r0, r1, #1
   1a290:	str	r0, [r7, #40]	; 0x28
   1a294:	ldr	r0, [r9, #4]
   1a298:	mov	r8, #0
   1a29c:	strb	r8, [r0, r4]
   1a2a0:	ldrb	r0, [r6, #4]
   1a2a4:	cmp	r0, #30
   1a2a8:	beq	1a2c4 <__assert_fail@plt+0x8dac>
   1a2ac:	cmp	r0, #28
   1a2b0:	beq	1a2cc <__assert_fail@plt+0x8db4>
   1a2b4:	cmp	r0, #26
   1a2b8:	bne	1a2d4 <__assert_fail@plt+0x8dbc>
   1a2bc:	mov	r0, #3
   1a2c0:	b	1a2d0 <__assert_fail@plt+0x8db8>
   1a2c4:	mov	r0, #4
   1a2c8:	b	1a2d0 <__assert_fail@plt+0x8db8>
   1a2cc:	mov	r0, #2
   1a2d0:	str	r0, [r9]
   1a2d4:	mov	r0, r8
   1a2d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a2dc:	push	{r4, r5, r6, sl, fp, lr}
   1a2e0:	add	fp, sp, #16
   1a2e4:	mov	r4, r0
   1a2e8:	ldrb	r0, [r0, #75]	; 0x4b
   1a2ec:	cmp	r0, #0
   1a2f0:	bne	1a310 <__assert_fail@plt+0x8df8>
   1a2f4:	ldr	r0, [r4, #4]
   1a2f8:	ldr	r1, [r4, #40]	; 0x28
   1a2fc:	add	r2, r1, #1
   1a300:	str	r2, [r4, #40]	; 0x28
   1a304:	ldrb	r6, [r0, r1]
   1a308:	uxtb	r0, r6
   1a30c:	pop	{r4, r5, r6, sl, fp, pc}
   1a310:	ldrb	r0, [r4, #76]	; 0x4c
   1a314:	cmp	r0, #0
   1a318:	beq	1a37c <__assert_fail@plt+0x8e64>
   1a31c:	ldr	r0, [r4, #28]
   1a320:	ldr	r5, [r4, #40]	; 0x28
   1a324:	cmp	r5, r0
   1a328:	beq	1a33c <__assert_fail@plt+0x8e24>
   1a32c:	ldr	r0, [r4, #8]
   1a330:	ldr	r0, [r0, r5, lsl #2]
   1a334:	cmn	r0, #1
   1a338:	beq	1a398 <__assert_fail@plt+0x8e80>
   1a33c:	ldr	r0, [r4]
   1a340:	ldr	r1, [r4, #12]
   1a344:	ldr	r2, [r4, #24]
   1a348:	ldr	r1, [r1, r5, lsl #2]
   1a34c:	add	r1, r2, r1
   1a350:	add	r0, r0, r1
   1a354:	ldrsb	r6, [r0]
   1a358:	cmn	r6, #1
   1a35c:	ble	1a398 <__assert_fail@plt+0x8e80>
   1a360:	mov	r0, r4
   1a364:	mov	r1, r5
   1a368:	bl	1a190 <__assert_fail@plt+0x8c78>
   1a36c:	add	r0, r0, r5
   1a370:	str	r0, [r4, #40]	; 0x28
   1a374:	uxtb	r0, r6
   1a378:	pop	{r4, r5, r6, sl, fp, pc}
   1a37c:	ldr	r0, [r4]
   1a380:	ldr	r1, [r4, #24]
   1a384:	ldr	r2, [r4, #40]	; 0x28
   1a388:	add	r3, r2, #1
   1a38c:	str	r3, [r4, #40]	; 0x28
   1a390:	add	r1, r2, r1
   1a394:	b	1a304 <__assert_fail@plt+0x8dec>
   1a398:	add	r0, r5, #1
   1a39c:	str	r0, [r4, #40]	; 0x28
   1a3a0:	ldr	r0, [r4, #4]
   1a3a4:	ldrb	r6, [r0, r5]
   1a3a8:	uxtb	r0, r6
   1a3ac:	pop	{r4, r5, r6, sl, fp, pc}
   1a3b0:	ldr	r1, [r1, #92]	; 0x5c
   1a3b4:	cmp	r1, #2
   1a3b8:	bxlt	lr
   1a3bc:	b	11434 <btowc@plt>
   1a3c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a3c4:	add	fp, sp, #24
   1a3c8:	mov	r4, r2
   1a3cc:	mov	r5, r1
   1a3d0:	mov	r6, r0
   1a3d4:	mvn	r0, #0
   1a3d8:	movw	r8, #32816	; 0x8030
   1a3dc:	b	1a3f4 <__assert_fail@plt+0x8edc>
   1a3e0:	add	r0, r7, r7, lsl #2
   1a3e4:	add	r1, r1, r0, lsl #1
   1a3e8:	sub	r0, r1, #48	; 0x30
   1a3ec:	cmp	r1, r8
   1a3f0:	movwgt	r0, #32768	; 0x8000
   1a3f4:	mov	r7, r0
   1a3f8:	mov	r0, r5
   1a3fc:	mov	r1, r6
   1a400:	mov	r2, r4
   1a404:	bl	174cc <__assert_fail@plt+0x5fb4>
   1a408:	ldrb	r2, [r5, #4]
   1a40c:	cmp	r2, #24
   1a410:	beq	1a460 <__assert_fail@plt+0x8f48>
   1a414:	cmp	r2, #2
   1a418:	beq	1a45c <__assert_fail@plt+0x8f44>
   1a41c:	ldrb	r1, [r5]
   1a420:	cmp	r1, #44	; 0x2c
   1a424:	beq	1a460 <__assert_fail@plt+0x8f48>
   1a428:	mvn	r0, #1
   1a42c:	cmp	r1, #48	; 0x30
   1a430:	bcc	1a3f4 <__assert_fail@plt+0x8edc>
   1a434:	cmp	r2, #1
   1a438:	bne	1a3f4 <__assert_fail@plt+0x8edc>
   1a43c:	cmn	r7, #2
   1a440:	beq	1a3f4 <__assert_fail@plt+0x8edc>
   1a444:	cmp	r1, #57	; 0x39
   1a448:	bhi	1a3f4 <__assert_fail@plt+0x8edc>
   1a44c:	cmn	r7, #1
   1a450:	bne	1a3e0 <__assert_fail@plt+0x8ec8>
   1a454:	sub	r0, r1, #48	; 0x30
   1a458:	b	1a3f4 <__assert_fail@plt+0x8edc>
   1a45c:	mvn	r7, #1
   1a460:	mov	r0, r7
   1a464:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a468:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a46c:	add	fp, sp, #24
   1a470:	sub	sp, sp, #8
   1a474:	mov	r8, r1
   1a478:	mov	r5, r0
   1a47c:	mov	r3, r0
   1a480:	ldr	r7, [r3], #20
   1a484:	mov	r6, #0
   1a488:	mov	r0, r1
   1a48c:	mov	r1, #0
   1a490:	mov	r2, #0
   1a494:	bl	186d0 <__assert_fail@plt+0x71b8>
   1a498:	str	r0, [sp, #4]
   1a49c:	cmp	r0, #0
   1a4a0:	beq	1a538 <__assert_fail@plt+0x9020>
   1a4a4:	add	r4, sp, #4
   1a4a8:	mov	r6, #0
   1a4ac:	str	r7, [r0]
   1a4b0:	ldr	r0, [r4]
   1a4b4:	ldr	r1, [r0, #24]
   1a4b8:	orr	r1, r1, #262144	; 0x40000
   1a4bc:	str	r1, [r0, #24]
   1a4c0:	ldr	r0, [r5, #4]
   1a4c4:	ldr	r7, [r4]
   1a4c8:	cmp	r0, #0
   1a4cc:	beq	1a4dc <__assert_fail@plt+0x8fc4>
   1a4d0:	add	r4, r7, #4
   1a4d4:	mov	r5, r0
   1a4d8:	b	1a510 <__assert_fail@plt+0x8ff8>
   1a4dc:	mov	r1, #0
   1a4e0:	mov	r0, r5
   1a4e4:	ldr	r5, [r5, #8]
   1a4e8:	cmp	r5, r1
   1a4ec:	cmpne	r5, #0
   1a4f0:	bne	1a50c <__assert_fail@plt+0x8ff4>
   1a4f4:	ldr	r7, [r7]
   1a4f8:	ldr	r5, [r0]
   1a4fc:	cmp	r5, #0
   1a500:	mov	r1, r0
   1a504:	bne	1a4e0 <__assert_fail@plt+0x8fc8>
   1a508:	b	1a534 <__assert_fail@plt+0x901c>
   1a50c:	add	r4, r7, #8
   1a510:	add	r3, r5, #20
   1a514:	mov	r0, r8
   1a518:	mov	r1, #0
   1a51c:	mov	r2, #0
   1a520:	bl	186d0 <__assert_fail@plt+0x71b8>
   1a524:	str	r0, [r4]
   1a528:	cmp	r0, #0
   1a52c:	bne	1a4ac <__assert_fail@plt+0x8f94>
   1a530:	b	1a538 <__assert_fail@plt+0x9020>
   1a534:	ldr	r6, [sp, #4]
   1a538:	mov	r0, r6
   1a53c:	sub	sp, fp, #24
   1a540:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a544:	ldr	r2, [r1, #24]
   1a548:	uxtb	r3, r2
   1a54c:	cmp	r3, #17
   1a550:	ldreq	r3, [r1, #20]
   1a554:	cmpeq	r3, r0
   1a558:	orreq	r0, r2, #524288	; 0x80000
   1a55c:	streq	r0, [r1, #24]
   1a560:	mov	r0, #0
   1a564:	bx	lr
   1a568:	push	{r4, r5, r6, r7, fp, lr}
   1a56c:	add	fp, sp, #16
   1a570:	mov	r4, r2
   1a574:	mov	r5, r1
   1a578:	mov	r6, r0
   1a57c:	mov	r0, r2
   1a580:	mov	r1, r6
   1a584:	blx	r5
   1a588:	cmp	r0, #0
   1a58c:	popne	{r4, r5, r6, r7, fp, pc}
   1a590:	ldr	r7, [r6, #4]
   1a594:	cmp	r7, #0
   1a598:	bne	1a5cc <__assert_fail@plt+0x90b4>
   1a59c:	mov	r1, #0
   1a5a0:	b	1a5b8 <__assert_fail@plt+0x90a0>
   1a5a4:	ldr	r6, [r0]
   1a5a8:	cmp	r6, #0
   1a5ac:	mov	r1, r0
   1a5b0:	moveq	r0, #0
   1a5b4:	popeq	{r4, r5, r6, r7, fp, pc}
   1a5b8:	mov	r0, r6
   1a5bc:	ldr	r7, [r6, #8]
   1a5c0:	cmp	r7, r1
   1a5c4:	cmpne	r7, #0
   1a5c8:	beq	1a5a4 <__assert_fail@plt+0x908c>
   1a5cc:	mov	r0, r4
   1a5d0:	mov	r1, r7
   1a5d4:	blx	r5
   1a5d8:	cmp	r0, #0
   1a5dc:	mov	r6, r7
   1a5e0:	beq	1a590 <__assert_fail@plt+0x9078>
   1a5e4:	pop	{r4, r5, r6, r7, fp, pc}
   1a5e8:	ldrb	r2, [r1, #24]
   1a5ec:	cmp	r2, #17
   1a5f0:	beq	1a624 <__assert_fail@plt+0x910c>
   1a5f4:	cmp	r2, #4
   1a5f8:	bne	1a678 <__assert_fail@plt+0x9160>
   1a5fc:	ldr	r2, [r0, #132]	; 0x84
   1a600:	cmp	r2, #0
   1a604:	beq	1a678 <__assert_fail@plt+0x9160>
   1a608:	ldr	r3, [r1, #20]
   1a60c:	ldr	r2, [r2, r3, lsl #2]
   1a610:	str	r2, [r1, #20]
   1a614:	ldr	r1, [r0, #80]	; 0x50
   1a618:	mov	r3, #1
   1a61c:	orr	r1, r1, r3, lsl r2
   1a620:	b	1a674 <__assert_fail@plt+0x915c>
   1a624:	ldr	r2, [r1, #4]
   1a628:	cmp	r2, #0
   1a62c:	beq	1a678 <__assert_fail@plt+0x9160>
   1a630:	ldrb	r3, [r2, #24]
   1a634:	cmp	r3, #17
   1a638:	bne	1a678 <__assert_fail@plt+0x9160>
   1a63c:	ldr	r3, [r2, #4]
   1a640:	ldr	r2, [r2, #20]
   1a644:	str	r3, [r1, #4]
   1a648:	cmp	r3, #0
   1a64c:	strne	r1, [r3]
   1a650:	ldr	r1, [r1, #20]
   1a654:	ldr	r3, [r0, #132]	; 0x84
   1a658:	ldr	r1, [r3, r1, lsl #2]
   1a65c:	str	r1, [r3, r2, lsl #2]
   1a660:	cmp	r2, #31
   1a664:	bgt	1a678 <__assert_fail@plt+0x9160>
   1a668:	ldr	r1, [r0, #80]	; 0x50
   1a66c:	mov	r3, #1
   1a670:	bic	r1, r1, r3, lsl r2
   1a674:	str	r1, [r0, #80]	; 0x50
   1a678:	mov	r0, #0
   1a67c:	bx	lr
   1a680:	push	{r4, r5, fp, lr}
   1a684:	add	fp, sp, #8
   1a688:	sub	sp, sp, #8
   1a68c:	mov	r4, r1
   1a690:	mov	r5, r0
   1a694:	mov	r0, #0
   1a698:	str	r0, [sp, #4]
   1a69c:	ldr	r2, [r1, #4]
   1a6a0:	cmp	r2, #0
   1a6a4:	beq	1a6cc <__assert_fail@plt+0x91b4>
   1a6a8:	ldrb	r0, [r2, #24]
   1a6ac:	cmp	r0, #17
   1a6b0:	bne	1a6cc <__assert_fail@plt+0x91b4>
   1a6b4:	add	r0, sp, #4
   1a6b8:	mov	r1, r5
   1a6bc:	bl	1aa90 <__assert_fail@plt+0x9578>
   1a6c0:	str	r0, [r4, #4]
   1a6c4:	cmp	r0, #0
   1a6c8:	strne	r4, [r0]
   1a6cc:	ldr	r2, [r4, #8]
   1a6d0:	cmp	r2, #0
   1a6d4:	beq	1a6fc <__assert_fail@plt+0x91e4>
   1a6d8:	ldrb	r0, [r2, #24]
   1a6dc:	cmp	r0, #17
   1a6e0:	bne	1a6fc <__assert_fail@plt+0x91e4>
   1a6e4:	add	r0, sp, #4
   1a6e8:	mov	r1, r5
   1a6ec:	bl	1aa90 <__assert_fail@plt+0x9578>
   1a6f0:	str	r0, [r4, #8]
   1a6f4:	cmp	r0, #0
   1a6f8:	strne	r4, [r0]
   1a6fc:	ldr	r0, [sp, #4]
   1a700:	sub	sp, fp, #8
   1a704:	pop	{r4, r5, fp, pc}
   1a708:	push	{r4, r5, fp, lr}
   1a70c:	add	fp, sp, #8
   1a710:	mov	r4, r1
   1a714:	mov	r5, r0
   1a718:	ldr	r2, [r1, #24]
   1a71c:	uxtb	r0, r2
   1a720:	cmp	r0, #16
   1a724:	bne	1a744 <__assert_fail@plt+0x922c>
   1a728:	ldr	r0, [r4, #4]
   1a72c:	ldr	r1, [r0, #12]
   1a730:	str	r1, [r4, #12]
   1a734:	ldr	r0, [r0, #28]
   1a738:	str	r0, [r4, #28]
   1a73c:	mov	r0, #0
   1a740:	pop	{r4, r5, fp, pc}
   1a744:	str	r4, [r4, #12]
   1a748:	ldr	r1, [r4, #20]
   1a74c:	mov	r0, r5
   1a750:	bl	1abac <__assert_fail@plt+0x9694>
   1a754:	str	r0, [r4, #28]
   1a758:	cmn	r0, #1
   1a75c:	moveq	r0, #12
   1a760:	popeq	{r4, r5, fp, pc}
   1a764:	mov	r1, r0
   1a768:	ldrb	r2, [r4, #24]
   1a76c:	mov	r0, #0
   1a770:	cmp	r2, #12
   1a774:	popne	{r4, r5, fp, pc}
   1a778:	ldr	r2, [r5]
   1a77c:	add	r1, r2, r1, lsl #3
   1a780:	ldr	r2, [r1, #4]
   1a784:	ldr	r3, [r4, #20]
   1a788:	bfi	r2, r3, #8, #10
   1a78c:	str	r2, [r1, #4]
   1a790:	pop	{r4, r5, fp, pc}
   1a794:	ldrb	r0, [r1, #24]
   1a798:	cmp	r0, #16
   1a79c:	beq	1a7b0 <__assert_fail@plt+0x9298>
   1a7a0:	cmp	r0, #11
   1a7a4:	bne	1a7cc <__assert_fail@plt+0x92b4>
   1a7a8:	ldr	r0, [r1, #4]
   1a7ac:	b	1a7ec <__assert_fail@plt+0x92d4>
   1a7b0:	ldmib	r1, {r0, r2}
   1a7b4:	ldr	r3, [r2, #12]
   1a7b8:	str	r3, [r0, #16]
   1a7bc:	ldr	r0, [r1, #16]
   1a7c0:	str	r0, [r2, #16]
   1a7c4:	mov	r0, #0
   1a7c8:	bx	lr
   1a7cc:	ldr	r0, [r1, #4]
   1a7d0:	cmp	r0, #0
   1a7d4:	ldrne	r2, [r1, #16]
   1a7d8:	strne	r2, [r0, #16]
   1a7dc:	ldr	r0, [r1, #8]
   1a7e0:	cmp	r0, #0
   1a7e4:	beq	1a7f0 <__assert_fail@plt+0x92d8>
   1a7e8:	ldr	r1, [r1, #16]
   1a7ec:	str	r1, [r0, #16]
   1a7f0:	mov	r0, #0
   1a7f4:	bx	lr
   1a7f8:	ldr	ip, [r1, #28]
   1a7fc:	ldrb	r2, [r1, #24]
   1a800:	sub	r2, r2, #2
   1a804:	cmp	r2, #14
   1a808:	bhi	1a8c0 <__assert_fail@plt+0x93a8>
   1a80c:	add	r3, pc, #0
   1a810:	ldr	pc, [r3, r2, lsl #2]
   1a814:	andeq	sl, r1, r4, lsl #18
   1a818:	andeq	sl, r1, r0, asr #17
   1a81c:	ldrdeq	sl, [r1], -r4
   1a820:	andeq	sl, r1, r0, asr #17
   1a824:	andeq	sl, r1, r0, asr #17
   1a828:	andeq	sl, r1, r0, asr #17
   1a82c:	andeq	sl, r1, r0, asr r8
   1a830:	andeq	sl, r1, r0, asr r8
   1a834:	andeq	sl, r1, r8, ror #16
   1a838:	andeq	sl, r1, r8, ror #16
   1a83c:	andeq	sl, r1, r0, asr r8
   1a840:	andeq	sl, r1, r0, asr #17
   1a844:	andeq	sl, r1, r0, asr #17
   1a848:	andeq	sl, r1, r0, asr #17
   1a84c:	andeq	sl, r1, r4, lsl #18
   1a850:	ldr	r0, [r0, #20]
   1a854:	add	r2, ip, ip, lsl #1
   1a858:	add	r0, r0, r2, lsl #2
   1a85c:	ldr	r1, [r1, #16]
   1a860:	ldr	r1, [r1, #28]
   1a864:	b	1adf4 <__assert_fail@plt+0x98dc>
   1a868:	push	{fp, lr}
   1a86c:	mov	fp, sp
   1a870:	ldrb	r2, [r0, #88]	; 0x58
   1a874:	orr	r2, r2, #1
   1a878:	strb	r2, [r0, #88]	; 0x58
   1a87c:	add	r3, r1, #16
   1a880:	ldr	lr, [r1, #4]
   1a884:	ldr	r1, [r1, #8]
   1a888:	cmp	r1, #0
   1a88c:	mov	r2, r3
   1a890:	addne	r2, r1, #12
   1a894:	ldr	r1, [r2]
   1a898:	ldr	r2, [r1, #28]
   1a89c:	cmp	lr, #0
   1a8a0:	addne	r3, lr, #12
   1a8a4:	ldr	r1, [r3]
   1a8a8:	ldr	r1, [r1, #28]
   1a8ac:	ldr	r0, [r0, #20]
   1a8b0:	add	r3, ip, ip, lsl #1
   1a8b4:	add	r0, r0, r3, lsl #2
   1a8b8:	pop	{fp, lr}
   1a8bc:	b	1ad7c <__assert_fail@plt+0x9864>
   1a8c0:	ldr	r0, [r0, #12]
   1a8c4:	ldr	r1, [r1, #16]
   1a8c8:	ldr	r1, [r1, #28]
   1a8cc:	str	r1, [r0, ip, lsl #2]
   1a8d0:	b	1a904 <__assert_fail@plt+0x93ec>
   1a8d4:	ldr	r3, [r0, #12]
   1a8d8:	ldr	r2, [r1, #16]
   1a8dc:	ldr	r2, [r2, #28]
   1a8e0:	str	r2, [r3, ip, lsl #2]
   1a8e4:	ldrb	r1, [r1, #24]
   1a8e8:	cmp	r1, #4
   1a8ec:	bne	1a904 <__assert_fail@plt+0x93ec>
   1a8f0:	ldr	r0, [r0, #20]
   1a8f4:	add	r1, ip, ip, lsl #1
   1a8f8:	add	r0, r0, r1, lsl #2
   1a8fc:	mov	r1, r2
   1a900:	b	1adf4 <__assert_fail@plt+0x98dc>
   1a904:	mov	r0, #0
   1a908:	bx	lr
   1a90c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a910:	add	fp, sp, #24
   1a914:	sub	sp, sp, #16
   1a918:	mov	r4, r0
   1a91c:	ldr	r0, [r0, #8]
   1a920:	cmp	r0, #0
   1a924:	beq	1a9bc <__assert_fail@plt+0x94a4>
   1a928:	mov	r7, #0
   1a92c:	add	r8, sp, #4
   1a930:	mov	r6, #0
   1a934:	ldr	r0, [r4, #24]
   1a938:	add	r5, r6, r6, lsl #1
   1a93c:	add	r0, r0, r5, lsl #2
   1a940:	ldr	r0, [r0, #4]
   1a944:	cmp	r0, #0
   1a948:	beq	1a954 <__assert_fail@plt+0x943c>
   1a94c:	mov	r0, r7
   1a950:	b	1a994 <__assert_fail@plt+0x947c>
   1a954:	mov	r0, r8
   1a958:	mov	r1, r4
   1a95c:	mov	r2, r6
   1a960:	mov	r3, #1
   1a964:	bl	1ae40 <__assert_fail@plt+0x9928>
   1a968:	cmp	r0, #0
   1a96c:	bne	1a9c0 <__assert_fail@plt+0x94a8>
   1a970:	ldr	r0, [r4, #24]
   1a974:	add	r0, r0, r5, lsl #2
   1a978:	ldr	r0, [r0, #4]
   1a97c:	cmp	r0, #0
   1a980:	mov	r0, r7
   1a984:	bne	1a994 <__assert_fail@plt+0x947c>
   1a988:	ldr	r0, [sp, #12]
   1a98c:	bl	22b14 <__assert_fail@plt+0x115fc>
   1a990:	mov	r0, #1
   1a994:	ldr	r1, [r4, #8]
   1a998:	add	r2, r6, #1
   1a99c:	subs	r3, r2, r1
   1a9a0:	mov	r6, r3
   1a9a4:	movne	r6, r2
   1a9a8:	movwne	r3, #1
   1a9ac:	and	r7, r0, r3
   1a9b0:	tst	r0, #1
   1a9b4:	cmpeq	r2, r1
   1a9b8:	bne	1a934 <__assert_fail@plt+0x941c>
   1a9bc:	mov	r0, #0
   1a9c0:	sub	sp, fp, #24
   1a9c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a9c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a9cc:	add	fp, sp, #24
   1a9d0:	mov	r4, r0
   1a9d4:	ldr	r0, [r0, #8]
   1a9d8:	cmp	r0, #0
   1a9dc:	beq	1aa88 <__assert_fail@plt+0x9570>
   1a9e0:	mov	r0, #0
   1a9e4:	mov	r1, #0
   1a9e8:	mov	r2, #0
   1a9ec:	ldr	r3, [r4, #28]
   1a9f0:	str	r0, [r3, r1]!
   1a9f4:	str	r0, [r3, #4]
   1a9f8:	str	r0, [r3, #8]
   1a9fc:	add	r1, r1, #12
   1aa00:	add	r2, r2, #1
   1aa04:	ldr	r3, [r4, #8]
   1aa08:	cmp	r2, r3
   1aa0c:	bcc	1a9ec <__assert_fail@plt+0x94d4>
   1aa10:	cmp	r3, #0
   1aa14:	beq	1aa88 <__assert_fail@plt+0x9570>
   1aa18:	mov	r5, #0
   1aa1c:	ldr	r0, [r4, #24]
   1aa20:	add	r8, r5, r5, lsl #1
   1aa24:	add	r0, r0, r8, lsl #2
   1aa28:	ldr	r1, [r0, #4]
   1aa2c:	cmp	r1, #1
   1aa30:	blt	1aa78 <__assert_fail@plt+0x9560>
   1aa34:	ldr	r7, [r0, #8]
   1aa38:	mov	r6, #0
   1aa3c:	ldr	r0, [r7, r6, lsl #2]
   1aa40:	add	r0, r0, r0, lsl #1
   1aa44:	ldr	r1, [r4, #28]
   1aa48:	add	r0, r1, r0, lsl #2
   1aa4c:	mov	r1, r5
   1aa50:	bl	1b6ac <__assert_fail@plt+0xa194>
   1aa54:	cmp	r0, #0
   1aa58:	moveq	r0, #12
   1aa5c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa60:	add	r6, r6, #1
   1aa64:	ldr	r0, [r4, #24]
   1aa68:	add	r0, r0, r8, lsl #2
   1aa6c:	ldr	r0, [r0, #4]
   1aa70:	cmp	r6, r0
   1aa74:	blt	1aa3c <__assert_fail@plt+0x9524>
   1aa78:	add	r5, r5, #1
   1aa7c:	ldr	r0, [r4, #8]
   1aa80:	cmp	r5, r0
   1aa84:	bcc	1aa1c <__assert_fail@plt+0x9504>
   1aa88:	mov	r0, #0
   1aa8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa94:	add	fp, sp, #28
   1aa98:	sub	sp, sp, #4
   1aa9c:	mov	r9, r2
   1aaa0:	mov	r8, r0
   1aaa4:	ldr	r5, [r2, #4]
   1aaa8:	ldr	r6, [r1]
   1aaac:	cmp	r5, #0
   1aab0:	ldrbne	r0, [r1, #28]
   1aab4:	andsne	r0, r0, #16
   1aab8:	bne	1ab84 <__assert_fail@plt+0x966c>
   1aabc:	mov	r0, r6
   1aac0:	mov	r1, #0
   1aac4:	mov	r2, #0
   1aac8:	mov	r3, #8
   1aacc:	bl	17658 <__assert_fail@plt+0x6140>
   1aad0:	mov	sl, r0
   1aad4:	mov	r0, r6
   1aad8:	mov	r1, #0
   1aadc:	mov	r2, #0
   1aae0:	mov	r3, #9
   1aae4:	bl	17658 <__assert_fail@plt+0x6140>
   1aae8:	mov	r4, r0
   1aaec:	cmp	r5, #0
   1aaf0:	mov	r7, r0
   1aaf4:	beq	1ab10 <__assert_fail@plt+0x95f8>
   1aaf8:	mov	r0, r6
   1aafc:	mov	r1, r5
   1ab00:	mov	r2, r4
   1ab04:	mov	r3, #16
   1ab08:	bl	17658 <__assert_fail@plt+0x6140>
   1ab0c:	mov	r7, r0
   1ab10:	mov	r0, r6
   1ab14:	mov	r1, sl
   1ab18:	mov	r2, r7
   1ab1c:	mov	r3, #16
   1ab20:	bl	17658 <__assert_fail@plt+0x6140>
   1ab24:	cmp	r4, #0
   1ab28:	beq	1ab38 <__assert_fail@plt+0x9620>
   1ab2c:	cmp	sl, #0
   1ab30:	cmpne	r7, #0
   1ab34:	bne	1ab48 <__assert_fail@plt+0x9630>
   1ab38:	mov	r0, #12
   1ab3c:	str	r0, [r8]
   1ab40:	mov	r5, #0
   1ab44:	b	1aba0 <__assert_fail@plt+0x9688>
   1ab48:	mov	r5, r0
   1ab4c:	cmp	r0, #0
   1ab50:	beq	1ab38 <__assert_fail@plt+0x9620>
   1ab54:	ldr	r0, [r9, #20]
   1ab58:	str	r0, [r4, #20]
   1ab5c:	str	r0, [sl, #20]
   1ab60:	ldr	r0, [r4, #24]
   1ab64:	ldr	r1, [r9, #24]
   1ab68:	lsr	r1, r1, #19
   1ab6c:	bfi	r0, r1, #19, #1
   1ab70:	str	r0, [r4, #24]
   1ab74:	ldr	r0, [sl, #24]
   1ab78:	bfi	r0, r1, #19, #1
   1ab7c:	str	r0, [sl, #24]
   1ab80:	b	1aba0 <__assert_fail@plt+0x9688>
   1ab84:	ldr	r0, [r9, #20]
   1ab88:	cmp	r0, #31
   1ab8c:	bgt	1aba0 <__assert_fail@plt+0x9688>
   1ab90:	ldr	r1, [r6, #80]	; 0x50
   1ab94:	mov	r2, #1
   1ab98:	tst	r1, r2, lsl r0
   1ab9c:	bne	1aabc <__assert_fail@plt+0x95a4>
   1aba0:	mov	r0, r5
   1aba4:	sub	sp, fp, #28
   1aba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abb0:	add	fp, sp, #28
   1abb4:	sub	sp, sp, #12
   1abb8:	mov	r5, r2
   1abbc:	mov	r9, r1
   1abc0:	mov	r4, r0
   1abc4:	ldr	r7, [r0, #4]
   1abc8:	ldr	r0, [r0, #8]
   1abcc:	cmp	r0, r7
   1abd0:	bcs	1aca0 <__assert_fail@plt+0x9788>
   1abd4:	ldr	r0, [r4]
   1abd8:	ldr	r1, [r4, #8]
   1abdc:	str	r9, [r0, r1, lsl #3]!
   1abe0:	str	r5, [r0, #4]
   1abe4:	ldr	r0, [r4]
   1abe8:	ldr	r1, [r4, #8]
   1abec:	add	r0, r0, r1, lsl #3
   1abf0:	ldr	r1, [r0, #4]
   1abf4:	bfc	r1, #8, #10
   1abf8:	str	r1, [r0, #4]
   1abfc:	uxtb	r1, r5
   1ac00:	cmp	r1, #5
   1ac04:	bne	1ac18 <__assert_fail@plt+0x9700>
   1ac08:	ldr	r2, [r4, #92]	; 0x5c
   1ac0c:	mov	r0, #1048576	; 0x100000
   1ac10:	cmp	r2, #1
   1ac14:	bgt	1ac28 <__assert_fail@plt+0x9710>
   1ac18:	sub	r0, r1, #6
   1ac1c:	clz	r0, r0
   1ac20:	lsr	r0, r0, #5
   1ac24:	lsl	r0, r0, #20
   1ac28:	ldr	r1, [r4]
   1ac2c:	ldr	r2, [r4, #8]
   1ac30:	add	r1, r1, r2, lsl #3
   1ac34:	ldr	r2, [r1, #4]
   1ac38:	bic	r2, r2, #1048576	; 0x100000
   1ac3c:	orr	r0, r2, r0
   1ac40:	str	r0, [r1, #4]
   1ac44:	ldr	r0, [r4, #8]
   1ac48:	ldr	r1, [r4, #12]
   1ac4c:	mvn	r2, #0
   1ac50:	str	r2, [r1, r0, lsl #2]
   1ac54:	ldr	r0, [r4, #8]
   1ac58:	ldr	r1, [r4, #20]
   1ac5c:	add	r0, r0, r0, lsl #1
   1ac60:	mov	r2, #0
   1ac64:	str	r2, [r1, r0, lsl #2]!
   1ac68:	str	r2, [r1, #4]
   1ac6c:	str	r2, [r1, #8]
   1ac70:	ldr	r0, [r4, #8]
   1ac74:	ldr	r1, [r4, #24]
   1ac78:	add	r0, r0, r0, lsl #1
   1ac7c:	str	r2, [r1, r0, lsl #2]!
   1ac80:	str	r2, [r1, #4]
   1ac84:	str	r2, [r1, #8]
   1ac88:	ldr	r6, [r4, #8]
   1ac8c:	add	r0, r6, #1
   1ac90:	str	r0, [r4, #8]
   1ac94:	mov	r0, r6
   1ac98:	sub	sp, fp, #28
   1ac9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aca0:	lsl	r1, r7, #1
   1aca4:	mvn	r6, #0
   1aca8:	movw	r0, #21845	; 0x5555
   1acac:	movt	r0, #5461	; 0x1555
   1acb0:	cmp	r1, r0
   1acb4:	bhi	1ac94 <__assert_fail@plt+0x977c>
   1acb8:	str	r1, [sp, #8]
   1acbc:	ldr	r0, [r4]
   1acc0:	lsl	r1, r7, #4
   1acc4:	bl	22654 <__assert_fail@plt+0x1113c>
   1acc8:	cmp	r0, #0
   1accc:	beq	1ac94 <__assert_fail@plt+0x977c>
   1acd0:	str	r0, [r4]
   1acd4:	ldr	r0, [r4, #12]
   1acd8:	lsl	r8, r7, #3
   1acdc:	mov	r1, r8
   1ace0:	bl	22654 <__assert_fail@plt+0x1113c>
   1ace4:	str	r0, [sp, #4]
   1ace8:	ldr	r0, [r4, #16]
   1acec:	mov	r1, r8
   1acf0:	bl	22654 <__assert_fail@plt+0x1113c>
   1acf4:	mov	r2, r0
   1acf8:	ldr	r0, [r4, #20]
   1acfc:	add	r1, r7, r7, lsl #1
   1ad00:	mov	r7, r2
   1ad04:	lsl	r8, r1, #3
   1ad08:	mov	r1, r8
   1ad0c:	bl	22654 <__assert_fail@plt+0x1113c>
   1ad10:	mov	sl, r0
   1ad14:	ldr	r0, [r4, #24]
   1ad18:	mov	r1, r8
   1ad1c:	bl	22654 <__assert_fail@plt+0x1113c>
   1ad20:	mov	r8, r0
   1ad24:	ldr	r0, [sp, #4]
   1ad28:	cmp	r0, #0
   1ad2c:	beq	1ad3c <__assert_fail@plt+0x9824>
   1ad30:	cmp	r7, #0
   1ad34:	cmpne	sl, #0
   1ad38:	bne	1ad5c <__assert_fail@plt+0x9844>
   1ad3c:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ad40:	mov	r0, r7
   1ad44:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ad48:	mov	r0, sl
   1ad4c:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ad50:	mov	r0, r8
   1ad54:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ad58:	b	1ac94 <__assert_fail@plt+0x977c>
   1ad5c:	cmp	r8, #0
   1ad60:	beq	1ad3c <__assert_fail@plt+0x9824>
   1ad64:	add	r1, r4, #12
   1ad68:	stm	r1, {r0, r7, sl}
   1ad6c:	str	r8, [r4, #24]
   1ad70:	ldr	r0, [sp, #8]
   1ad74:	str	r0, [r4, #4]
   1ad78:	b	1abd4 <__assert_fail@plt+0x96bc>
   1ad7c:	push	{r4, r5, r6, sl, fp, lr}
   1ad80:	add	fp, sp, #16
   1ad84:	mov	r5, r2
   1ad88:	mov	r4, r1
   1ad8c:	mov	r6, r0
   1ad90:	mov	r0, #2
   1ad94:	str	r0, [r6]
   1ad98:	mov	r0, #8
   1ad9c:	bl	22624 <__assert_fail@plt+0x1110c>
   1ada0:	str	r0, [r6, #8]
   1ada4:	cmp	r0, #0
   1ada8:	moveq	r0, #12
   1adac:	popeq	{r4, r5, r6, sl, fp, pc}
   1adb0:	cmp	r4, r5
   1adb4:	bne	1add0 <__assert_fail@plt+0x98b8>
   1adb8:	mov	r0, #1
   1adbc:	str	r0, [r6, #4]
   1adc0:	ldr	r0, [r6, #8]
   1adc4:	str	r4, [r0]
   1adc8:	mov	r0, #0
   1adcc:	pop	{r4, r5, r6, sl, fp, pc}
   1add0:	mov	r0, #2
   1add4:	str	r0, [r6, #4]
   1add8:	ldr	r0, [r6, #8]
   1addc:	cmp	r4, r5
   1ade0:	stmlt	r0, {r4, r5}
   1ade4:	strge	r5, [r0]
   1ade8:	strge	r4, [r0, #4]
   1adec:	mov	r0, #0
   1adf0:	pop	{r4, r5, r6, sl, fp, pc}
   1adf4:	push	{r4, r5, fp, lr}
   1adf8:	add	fp, sp, #8
   1adfc:	mov	r5, r1
   1ae00:	mov	r4, r0
   1ae04:	mov	r0, #1
   1ae08:	str	r0, [r4]
   1ae0c:	str	r0, [r4, #4]
   1ae10:	mov	r0, #4
   1ae14:	bl	22624 <__assert_fail@plt+0x1110c>
   1ae18:	str	r0, [r4, #8]
   1ae1c:	cmp	r0, #0
   1ae20:	strne	r5, [r0]
   1ae24:	movne	r0, #0
   1ae28:	popne	{r4, r5, fp, pc}
   1ae2c:	mov	r0, #0
   1ae30:	str	r0, [r4]
   1ae34:	str	r0, [r4, #4]
   1ae38:	mov	r0, #12
   1ae3c:	pop	{r4, r5, fp, pc}
   1ae40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae44:	add	fp, sp, #28
   1ae48:	sub	sp, sp, #44	; 0x2c
   1ae4c:	mov	r8, r3
   1ae50:	mov	r6, r2
   1ae54:	mov	r5, r1
   1ae58:	mov	r7, r0
   1ae5c:	ldr	r0, [r1, #20]
   1ae60:	add	r4, r2, r2, lsl #1
   1ae64:	add	r0, r0, r4, lsl #2
   1ae68:	ldr	r0, [r0, #4]
   1ae6c:	add	r1, r0, #1
   1ae70:	add	r0, sp, #32
   1ae74:	bl	1b04c <__assert_fail@plt+0x9b34>
   1ae78:	cmp	r0, #0
   1ae7c:	bne	1b044 <__assert_fail@plt+0x9b2c>
   1ae80:	ldr	r0, [sp, #36]	; 0x24
   1ae84:	ldr	r1, [sp, #40]	; 0x28
   1ae88:	add	r2, r0, #1
   1ae8c:	str	r2, [sp, #36]	; 0x24
   1ae90:	str	r6, [r1, r0, lsl #2]
   1ae94:	ldr	r0, [r5, #24]
   1ae98:	add	r0, r0, r4, lsl #2
   1ae9c:	mvn	r1, #0
   1aea0:	str	r1, [r0, #4]
   1aea4:	ldr	r1, [r5]
   1aea8:	add	r0, r1, r6, lsl #3
   1aeac:	ldr	r0, [r0, #4]
   1aeb0:	ubfx	r0, r0, #8, #10
   1aeb4:	cmp	r0, #0
   1aeb8:	beq	1af08 <__assert_fail@plt+0x99f0>
   1aebc:	ldr	r2, [r5, #20]
   1aec0:	add	r2, r2, r4, lsl #2
   1aec4:	ldr	r3, [r2, #4]
   1aec8:	cmp	r3, #0
   1aecc:	beq	1af08 <__assert_fail@plt+0x99f0>
   1aed0:	ldr	r2, [r2, #8]
   1aed4:	ldr	r2, [r2]
   1aed8:	add	r1, r1, r2, lsl #3
   1aedc:	ldrb	r1, [r1, #6]
   1aee0:	tst	r1, #4
   1aee4:	bne	1af08 <__assert_fail@plt+0x99f0>
   1aee8:	str	r0, [sp]
   1aeec:	mov	r0, r5
   1aef0:	mov	r1, r6
   1aef4:	mov	r2, r6
   1aef8:	mov	r3, r6
   1aefc:	bl	1b07c <__assert_fail@plt+0x9b64>
   1af00:	cmp	r0, #0
   1af04:	bne	1b044 <__assert_fail@plt+0x9b2c>
   1af08:	ldr	r0, [r5]
   1af0c:	add	r0, r0, r6, lsl #3
   1af10:	ldrb	r0, [r0, #4]
   1af14:	tst	r0, #8
   1af18:	beq	1b018 <__assert_fail@plt+0x9b00>
   1af1c:	ldr	r0, [r5, #20]
   1af20:	add	r1, r0, r4, lsl #2
   1af24:	ldr	r1, [r1, #4]
   1af28:	cmp	r1, #1
   1af2c:	blt	1b018 <__assert_fail@plt+0x9b00>
   1af30:	str	r8, [sp, #8]
   1af34:	str	r7, [sp, #12]
   1af38:	mov	r8, #0
   1af3c:	add	r7, sp, #16
   1af40:	add	sl, sp, #32
   1af44:	mov	r6, #0
   1af48:	add	r0, r0, r4, lsl #2
   1af4c:	ldr	r0, [r0, #8]
   1af50:	ldr	r2, [r0, r6, lsl #2]
   1af54:	add	r9, r2, r2, lsl #1
   1af58:	ldr	r0, [r5, #24]
   1af5c:	add	r0, r0, r9, lsl #2
   1af60:	ldr	r1, [r0, #4]
   1af64:	cmn	r1, #1
   1af68:	beq	1afd0 <__assert_fail@plt+0x9ab8>
   1af6c:	cmp	r1, #0
   1af70:	bne	1af90 <__assert_fail@plt+0x9a78>
   1af74:	mov	r0, r7
   1af78:	mov	r1, r5
   1af7c:	mov	r3, #0
   1af80:	bl	1ae40 <__assert_fail@plt+0x9928>
   1af84:	cmp	r0, #0
   1af88:	beq	1afa0 <__assert_fail@plt+0x9a88>
   1af8c:	b	1b044 <__assert_fail@plt+0x9b2c>
   1af90:	vldr	d16, [r0]
   1af94:	ldr	r0, [r0, #8]
   1af98:	str	r0, [sp, #24]
   1af9c:	vstr	d16, [sp, #16]
   1afa0:	mov	r0, sl
   1afa4:	mov	r1, r7
   1afa8:	bl	1b308 <__assert_fail@plt+0x9df0>
   1afac:	cmp	r0, #0
   1afb0:	bne	1b044 <__assert_fail@plt+0x9b2c>
   1afb4:	ldr	r0, [r5, #24]
   1afb8:	add	r0, r0, r9, lsl #2
   1afbc:	ldr	r0, [r0, #4]
   1afc0:	cmp	r0, #0
   1afc4:	bne	1afd4 <__assert_fail@plt+0x9abc>
   1afc8:	ldr	r0, [sp, #24]
   1afcc:	bl	22b14 <__assert_fail@plt+0x115fc>
   1afd0:	mov	r8, #1
   1afd4:	ldr	r0, [r5, #20]
   1afd8:	add	r1, r0, r4, lsl #2
   1afdc:	ldr	r1, [r1, #4]
   1afe0:	add	r6, r6, #1
   1afe4:	cmp	r6, r1
   1afe8:	blt	1af48 <__assert_fail@plt+0x9a30>
   1afec:	tst	r8, #1
   1aff0:	ldr	r7, [sp, #12]
   1aff4:	ldr	r0, [sp, #8]
   1aff8:	beq	1b018 <__assert_fail@plt+0x9b00>
   1affc:	cmp	r0, #0
   1b000:	bne	1b018 <__assert_fail@plt+0x9b00>
   1b004:	ldr	r0, [r5, #24]
   1b008:	add	r0, r0, r4, lsl #2
   1b00c:	mov	r1, #0
   1b010:	str	r1, [r0, #4]
   1b014:	b	1b030 <__assert_fail@plt+0x9b18>
   1b018:	ldr	r0, [r5, #24]
   1b01c:	vldr	d16, [sp, #32]
   1b020:	add	r0, r0, r4, lsl #2
   1b024:	ldr	r1, [sp, #40]	; 0x28
   1b028:	str	r1, [r0, #8]
   1b02c:	vstr	d16, [r0]
   1b030:	ldr	r0, [sp, #40]	; 0x28
   1b034:	vldr	d16, [sp, #32]
   1b038:	str	r0, [r7, #8]
   1b03c:	vstr	d16, [r7]
   1b040:	mov	r0, #0
   1b044:	sub	sp, fp, #28
   1b048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b04c:	push	{r4, r5, fp, lr}
   1b050:	add	fp, sp, #8
   1b054:	mov	r4, r0
   1b058:	mov	r5, #0
   1b05c:	stm	r0, {r1, r5}
   1b060:	lsl	r0, r1, #2
   1b064:	bl	22624 <__assert_fail@plt+0x1110c>
   1b068:	str	r0, [r4, #8]
   1b06c:	cmp	r0, #0
   1b070:	movweq	r5, #12
   1b074:	mov	r0, r5
   1b078:	pop	{r4, r5, fp, pc}
   1b07c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b080:	add	fp, sp, #28
   1b084:	sub	sp, sp, #20
   1b088:	str	r3, [sp, #8]
   1b08c:	mov	r8, r2
   1b090:	mov	sl, r1
   1b094:	mov	r5, r0
   1b098:	ldr	r0, [fp, #8]
   1b09c:	str	r0, [sp, #16]
   1b0a0:	ldr	r0, [r5]
   1b0a4:	add	r0, r0, sl, lsl #3
   1b0a8:	ldrb	r1, [r0, #4]!
   1b0ac:	cmp	r1, #4
   1b0b0:	bne	1b12c <__assert_fail@plt+0x9c14>
   1b0b4:	ldr	r0, [r5, #12]
   1b0b8:	ldr	r1, [r5, #20]
   1b0bc:	ldr	r4, [r0, sl, lsl #2]
   1b0c0:	add	r6, r8, r8, lsl #1
   1b0c4:	add	r0, r1, r6, lsl #2
   1b0c8:	mov	r1, #0
   1b0cc:	str	r1, [r0, #4]
   1b0d0:	mov	r0, r5
   1b0d4:	mov	r1, r4
   1b0d8:	ldr	r2, [sp, #16]
   1b0dc:	bl	1b49c <__assert_fail@plt+0x9f84>
   1b0e0:	mov	r9, #12
   1b0e4:	cmn	r0, #1
   1b0e8:	beq	1b2ec <__assert_fail@plt+0x9dd4>
   1b0ec:	mov	r7, r0
   1b0f0:	ldr	r0, [r5, #12]
   1b0f4:	ldr	r1, [r0, sl, lsl #2]
   1b0f8:	str	r1, [r0, r8, lsl #2]
   1b0fc:	ldr	r0, [r5, #20]
   1b100:	add	r0, r0, r6, lsl #2
   1b104:	mov	r1, r7
   1b108:	bl	1b524 <__assert_fail@plt+0xa00c>
   1b10c:	mov	r1, #0
   1b110:	cmp	r0, #0
   1b114:	mov	sl, r4
   1b118:	mov	r8, r7
   1b11c:	beq	1b2ec <__assert_fail@plt+0x9dd4>
   1b120:	cmp	r1, #0
   1b124:	beq	1b0a0 <__assert_fail@plt+0x9b88>
   1b128:	b	1b2cc <__assert_fail@plt+0x9db4>
   1b12c:	ldr	r1, [r5, #20]
   1b130:	add	r7, sl, sl, lsl #1
   1b134:	add	r3, r1, r7, lsl #2
   1b138:	ldr	r2, [r3, #4]
   1b13c:	cmp	r2, #0
   1b140:	beq	1b2dc <__assert_fail@plt+0x9dc4>
   1b144:	ldr	r3, [r3, #8]
   1b148:	ldr	r9, [r3]
   1b14c:	add	r4, r8, r8, lsl #1
   1b150:	add	r6, r1, r4, lsl #2
   1b154:	mov	r1, #0
   1b158:	str	r1, [r6, #4]
   1b15c:	cmp	r2, #1
   1b160:	bne	1b19c <__assert_fail@plt+0x9c84>
   1b164:	ldr	r1, [sp, #8]
   1b168:	cmp	sl, r1
   1b16c:	bne	1b1d4 <__assert_fail@plt+0x9cbc>
   1b170:	cmp	r8, sl
   1b174:	beq	1b1d4 <__assert_fail@plt+0x9cbc>
   1b178:	mov	r0, r6
   1b17c:	mov	r1, r9
   1b180:	bl	1b524 <__assert_fail@plt+0xa00c>
   1b184:	cmp	r0, #0
   1b188:	mov	r1, #1
   1b18c:	movwne	r1, #2
   1b190:	cmp	r1, #0
   1b194:	beq	1b0a0 <__assert_fail@plt+0x9b88>
   1b198:	b	1b2cc <__assert_fail@plt+0x9db4>
   1b19c:	str	r4, [sp, #12]
   1b1a0:	mov	r0, r5
   1b1a4:	mov	r1, r9
   1b1a8:	ldr	r4, [sp, #16]
   1b1ac:	mov	r2, r4
   1b1b0:	bl	1b62c <__assert_fail@plt+0xa114>
   1b1b4:	cmn	r0, #1
   1b1b8:	beq	1b214 <__assert_fail@plt+0x9cfc>
   1b1bc:	mov	r1, r0
   1b1c0:	mov	r0, r6
   1b1c4:	bl	1b524 <__assert_fail@plt+0xa00c>
   1b1c8:	cmp	r0, #0
   1b1cc:	bne	1b278 <__assert_fail@plt+0x9d60>
   1b1d0:	b	1b300 <__assert_fail@plt+0x9de8>
   1b1d4:	ldr	r0, [r0]
   1b1d8:	ubfx	r0, r0, #8, #10
   1b1dc:	ldr	r2, [sp, #16]
   1b1e0:	orr	r2, r0, r2
   1b1e4:	mov	r0, r5
   1b1e8:	mov	r1, r9
   1b1ec:	str	r2, [sp, #16]
   1b1f0:	bl	1b49c <__assert_fail@plt+0x9f84>
   1b1f4:	mov	sl, r9
   1b1f8:	mov	r9, #12
   1b1fc:	cmn	r0, #1
   1b200:	beq	1b2ec <__assert_fail@plt+0x9dd4>
   1b204:	mov	r8, r0
   1b208:	ldr	r0, [r5, #20]
   1b20c:	add	r0, r0, r4, lsl #2
   1b210:	b	1b2b4 <__assert_fail@plt+0x9d9c>
   1b214:	mov	r0, r5
   1b218:	mov	r8, r9
   1b21c:	mov	r1, r9
   1b220:	mov	r2, r4
   1b224:	bl	1b49c <__assert_fail@plt+0x9f84>
   1b228:	mov	r9, #12
   1b22c:	cmn	r0, #1
   1b230:	beq	1b2ec <__assert_fail@plt+0x9dd4>
   1b234:	mov	r6, r0
   1b238:	ldr	r0, [r5, #20]
   1b23c:	ldr	r1, [sp, #12]
   1b240:	add	r0, r0, r1, lsl #2
   1b244:	mov	r1, r6
   1b248:	bl	1b524 <__assert_fail@plt+0xa00c>
   1b24c:	cmp	r0, #0
   1b250:	beq	1b2ec <__assert_fail@plt+0x9dd4>
   1b254:	ldr	r4, [sp, #16]
   1b258:	str	r4, [sp]
   1b25c:	mov	r0, r5
   1b260:	mov	r1, r8
   1b264:	mov	r2, r6
   1b268:	ldr	r3, [sp, #8]
   1b26c:	bl	1b07c <__assert_fail@plt+0x9b64>
   1b270:	cmp	r0, #0
   1b274:	bne	1b2f8 <__assert_fail@plt+0x9de0>
   1b278:	ldr	r0, [r5, #20]
   1b27c:	add	r0, r0, r7, lsl #2
   1b280:	ldr	r0, [r0, #8]
   1b284:	ldr	sl, [r0, #4]
   1b288:	mov	r0, r5
   1b28c:	mov	r1, sl
   1b290:	mov	r2, r4
   1b294:	bl	1b49c <__assert_fail@plt+0x9f84>
   1b298:	mov	r9, #12
   1b29c:	cmn	r0, #1
   1b2a0:	beq	1b2ec <__assert_fail@plt+0x9dd4>
   1b2a4:	mov	r8, r0
   1b2a8:	ldr	r0, [r5, #20]
   1b2ac:	ldr	r1, [sp, #12]
   1b2b0:	add	r0, r0, r1, lsl #2
   1b2b4:	mov	r1, r8
   1b2b8:	bl	1b524 <__assert_fail@plt+0xa00c>
   1b2bc:	mov	r1, #0
   1b2c0:	cmp	r0, #0
   1b2c4:	bne	1b120 <__assert_fail@plt+0x9c08>
   1b2c8:	b	1b2ec <__assert_fail@plt+0x9dd4>
   1b2cc:	mov	r9, #12
   1b2d0:	cmp	r1, #2
   1b2d4:	moveq	r9, #0
   1b2d8:	b	1b2ec <__assert_fail@plt+0x9dd4>
   1b2dc:	ldr	r0, [r5, #12]
   1b2e0:	ldr	r1, [r0, sl, lsl #2]
   1b2e4:	str	r1, [r0, r8, lsl #2]
   1b2e8:	mov	r9, #0
   1b2ec:	mov	r0, r9
   1b2f0:	sub	sp, fp, #28
   1b2f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2f8:	mov	r9, r0
   1b2fc:	b	1b2ec <__assert_fail@plt+0x9dd4>
   1b300:	mov	r9, #12
   1b304:	b	1b2ec <__assert_fail@plt+0x9dd4>
   1b308:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b30c:	add	fp, sp, #24
   1b310:	mov	r8, #0
   1b314:	cmp	r1, #0
   1b318:	beq	1b474 <__assert_fail@plt+0x9f5c>
   1b31c:	mov	r6, r1
   1b320:	ldr	r1, [r1, #4]
   1b324:	cmp	r1, #0
   1b328:	beq	1b474 <__assert_fail@plt+0x9f5c>
   1b32c:	mov	r9, r0
   1b330:	ldr	r2, [r0]
   1b334:	ldr	r0, [r0, #4]
   1b338:	add	r3, r0, r1, lsl #1
   1b33c:	cmp	r2, r3
   1b340:	bge	1b36c <__assert_fail@plt+0x9e54>
   1b344:	add	r7, r2, r1
   1b348:	lsl	r1, r7, #3
   1b34c:	ldr	r0, [r9, #8]
   1b350:	bl	22654 <__assert_fail@plt+0x1113c>
   1b354:	cmp	r0, #0
   1b358:	beq	1b490 <__assert_fail@plt+0x9f78>
   1b35c:	str	r0, [r9, #8]
   1b360:	lsl	r0, r7, #1
   1b364:	str	r0, [r9]
   1b368:	ldr	r0, [r9, #4]
   1b36c:	ldr	r2, [r6, #4]
   1b370:	cmp	r0, #0
   1b374:	beq	1b47c <__assert_fail@plt+0x9f64>
   1b378:	add	r7, r0, r2, lsl #1
   1b37c:	sub	r1, r0, #1
   1b380:	sub	r0, r2, #1
   1b384:	orr	r2, r0, r1
   1b388:	cmp	r2, #0
   1b38c:	blt	1b3d8 <__assert_fail@plt+0x9ec0>
   1b390:	ldr	r2, [r6, #8]
   1b394:	ldr	r3, [r9, #8]
   1b398:	ldr	r4, [r2, r0, lsl #2]
   1b39c:	ldr	r5, [r3, r1, lsl #2]
   1b3a0:	cmp	r5, r4
   1b3a4:	bne	1b3b4 <__assert_fail@plt+0x9e9c>
   1b3a8:	sub	r1, r1, #1
   1b3ac:	sub	r0, r0, #1
   1b3b0:	b	1b3cc <__assert_fail@plt+0x9eb4>
   1b3b4:	bge	1b3c8 <__assert_fail@plt+0x9eb0>
   1b3b8:	sub	r7, r7, #1
   1b3bc:	str	r4, [r3, r7, lsl #2]
   1b3c0:	sub	r0, r0, #1
   1b3c4:	b	1b3cc <__assert_fail@plt+0x9eb4>
   1b3c8:	sub	r1, r1, #1
   1b3cc:	orr	r5, r0, r1
   1b3d0:	cmn	r5, #1
   1b3d4:	bgt	1b398 <__assert_fail@plt+0x9e80>
   1b3d8:	cmp	r0, #0
   1b3dc:	blt	1b3fc <__assert_fail@plt+0x9ee4>
   1b3e0:	add	r2, r0, #1
   1b3e4:	sub	r7, r7, r2
   1b3e8:	ldr	r0, [r9, #8]
   1b3ec:	add	r0, r0, r7, lsl #2
   1b3f0:	ldr	r1, [r6, #8]
   1b3f4:	lsl	r2, r2, #2
   1b3f8:	bl	112a8 <memcpy@plt>
   1b3fc:	ldr	r1, [r6, #4]
   1b400:	ldr	r0, [r9, #4]
   1b404:	add	r1, r0, r1, lsl #1
   1b408:	sub	r1, r1, #1
   1b40c:	sub	r2, r1, r7
   1b410:	adds	r2, r2, #1
   1b414:	beq	1b474 <__assert_fail@plt+0x9f5c>
   1b418:	add	r3, r2, r0
   1b41c:	str	r3, [r9, #4]
   1b420:	sub	r3, r0, #1
   1b424:	ldr	r0, [r9, #8]
   1b428:	ldr	r6, [r0, r3, lsl #2]
   1b42c:	ldr	r5, [r0, r1, lsl #2]
   1b430:	cmp	r5, r6
   1b434:	ble	1b450 <__assert_fail@plt+0x9f38>
   1b438:	add	r6, r2, r3
   1b43c:	str	r5, [r0, r6, lsl #2]
   1b440:	subs	r2, r2, #1
   1b444:	sub	r1, r1, #1
   1b448:	bne	1b428 <__assert_fail@plt+0x9f10>
   1b44c:	b	1b474 <__assert_fail@plt+0x9f5c>
   1b450:	add	r5, r2, r3
   1b454:	str	r6, [r0, r5, lsl #2]
   1b458:	sub	r6, r3, #1
   1b45c:	cmp	r3, #0
   1b460:	mov	r3, r6
   1b464:	bgt	1b428 <__assert_fail@plt+0x9f10>
   1b468:	add	r1, r0, r7, lsl #2
   1b46c:	lsl	r2, r2, #2
   1b470:	bl	112a8 <memcpy@plt>
   1b474:	mov	r0, r8
   1b478:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b47c:	str	r2, [r9, #4]
   1b480:	ldr	r0, [r9, #8]
   1b484:	ldr	r2, [r6, #4]
   1b488:	ldr	r1, [r6, #8]
   1b48c:	b	1b46c <__assert_fail@plt+0x9f54>
   1b490:	mov	r8, #12
   1b494:	mov	r0, r8
   1b498:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b49c:	push	{r4, r5, r6, sl, fp, lr}
   1b4a0:	add	fp, sp, #16
   1b4a4:	mov	r6, r2
   1b4a8:	mov	r4, r1
   1b4ac:	mov	r5, r0
   1b4b0:	ldr	r0, [r0]
   1b4b4:	ldr	r1, [r0, r1, lsl #3]!
   1b4b8:	ldr	r2, [r0, #4]
   1b4bc:	mov	r0, r5
   1b4c0:	bl	1abac <__assert_fail@plt+0x9694>
   1b4c4:	cmn	r0, #1
   1b4c8:	ldrne	r1, [r5]
   1b4cc:	addne	r1, r1, r0, lsl #3
   1b4d0:	ldrne	r2, [r1, #4]
   1b4d4:	bfine	r2, r6, #8, #10
   1b4d8:	strne	r2, [r1, #4]
   1b4dc:	ldrne	r1, [r5]
   1b4e0:	addne	r2, r1, r4, lsl #3
   1b4e4:	ldrne	r2, [r2, #4]
   1b4e8:	movwne	r3, #65280	; 0xff00
   1b4ec:	movtne	r3, #3
   1b4f0:	andne	r2, r2, r3
   1b4f4:	addne	r1, r1, r0, lsl #3
   1b4f8:	ldrne	r3, [r1, #4]
   1b4fc:	orrne	r2, r2, r3
   1b500:	strne	r2, [r1, #4]
   1b504:	ldrne	r1, [r5]
   1b508:	addne	r1, r1, r0, lsl #3
   1b50c:	ldrne	r2, [r1, #4]
   1b510:	orrne	r2, r2, #262144	; 0x40000
   1b514:	strne	r2, [r1, #4]
   1b518:	ldrne	r1, [r5, #16]
   1b51c:	strne	r4, [r1, r0, lsl #2]
   1b520:	pop	{r4, r5, r6, sl, fp, pc}
   1b524:	push	{r4, r5, fp, lr}
   1b528:	add	fp, sp, #8
   1b52c:	mov	r5, r1
   1b530:	mov	r4, r0
   1b534:	ldr	r2, [r0]
   1b538:	cmp	r2, #0
   1b53c:	beq	1b568 <__assert_fail@plt+0xa050>
   1b540:	ldr	r1, [r4, #4]
   1b544:	cmp	r1, #0
   1b548:	bne	1b580 <__assert_fail@plt+0xa068>
   1b54c:	ldr	r0, [r4, #8]
   1b550:	str	r5, [r0]
   1b554:	ldr	r0, [r4, #4]
   1b558:	add	r0, r0, #1
   1b55c:	str	r0, [r4, #4]
   1b560:	mov	r0, #1
   1b564:	pop	{r4, r5, fp, pc}
   1b568:	mov	r0, r4
   1b56c:	mov	r1, r5
   1b570:	bl	1adf4 <__assert_fail@plt+0x98dc>
   1b574:	clz	r0, r0
   1b578:	lsr	r0, r0, #5
   1b57c:	pop	{r4, r5, fp, pc}
   1b580:	cmp	r2, r1
   1b584:	bne	1b5b0 <__assert_fail@plt+0xa098>
   1b588:	lsl	r0, r2, #1
   1b58c:	str	r0, [r4]
   1b590:	ldr	r0, [r4, #8]
   1b594:	lsl	r1, r2, #3
   1b598:	bl	22654 <__assert_fail@plt+0x1113c>
   1b59c:	cmp	r0, #0
   1b5a0:	moveq	r0, #0
   1b5a4:	popeq	{r4, r5, fp, pc}
   1b5a8:	str	r0, [r4, #8]
   1b5ac:	ldr	r1, [r4, #4]
   1b5b0:	ldr	ip, [r4, #8]
   1b5b4:	ldr	r2, [ip]
   1b5b8:	cmp	r2, r5
   1b5bc:	ble	1b5f4 <__assert_fail@plt+0xa0dc>
   1b5c0:	cmp	r1, #1
   1b5c4:	blt	1b624 <__assert_fail@plt+0xa10c>
   1b5c8:	add	r2, ip, r1, lsl #2
   1b5cc:	add	r1, r1, #1
   1b5d0:	mov	r3, r2
   1b5d4:	ldr	r0, [r3, #-4]!
   1b5d8:	str	r0, [r2]
   1b5dc:	sub	r1, r1, #1
   1b5e0:	cmp	r1, #1
   1b5e4:	mov	r2, r3
   1b5e8:	bgt	1b5d4 <__assert_fail@plt+0xa0bc>
   1b5ec:	sub	r1, r1, #1
   1b5f0:	b	1b624 <__assert_fail@plt+0xa10c>
   1b5f4:	add	r2, ip, r1, lsl #2
   1b5f8:	ldr	r3, [r2, #-4]
   1b5fc:	cmp	r3, r5
   1b600:	ble	1b624 <__assert_fail@plt+0xa10c>
   1b604:	sub	r1, r1, #2
   1b608:	str	r3, [r2]
   1b60c:	ldr	r3, [r2, #-8]
   1b610:	sub	r2, r2, #4
   1b614:	sub	r1, r1, #1
   1b618:	cmp	r3, r5
   1b61c:	bgt	1b608 <__assert_fail@plt+0xa0f0>
   1b620:	add	r1, r1, #2
   1b624:	str	r5, [ip, r1, lsl #2]
   1b628:	b	1b554 <__assert_fail@plt+0xa03c>
   1b62c:	push	{r4, r5, fp, lr}
   1b630:	add	fp, sp, #8
   1b634:	mov	ip, r0
   1b638:	ldr	r3, [r0, #8]
   1b63c:	sub	lr, r3, #1
   1b640:	mvn	r0, #0
   1b644:	cmp	lr, #1
   1b648:	blt	1b6a0 <__assert_fail@plt+0xa188>
   1b64c:	ldr	r4, [ip]
   1b650:	add	r4, r4, lr, lsl #3
   1b654:	ldr	r5, [r4, #4]
   1b658:	ands	r4, r5, #262144	; 0x40000
   1b65c:	beq	1b6a0 <__assert_fail@plt+0xa188>
   1b660:	ldr	r4, [ip, #16]
   1b664:	sub	lr, r4, #4
   1b668:	ldr	r4, [lr, r3, lsl #2]
   1b66c:	cmp	r4, r1
   1b670:	ubfxeq	r4, r5, #8, #10
   1b674:	cmpeq	r4, r2
   1b678:	beq	1b6a4 <__assert_fail@plt+0xa18c>
   1b67c:	sub	r4, r3, #2
   1b680:	cmp	r4, #1
   1b684:	poplt	{r4, r5, fp, pc}
   1b688:	ldr	r4, [ip]
   1b68c:	add	r4, r4, r3, lsl #3
   1b690:	ldr	r5, [r4, #-12]
   1b694:	ands	r4, r5, #262144	; 0x40000
   1b698:	sub	r3, r3, #1
   1b69c:	bne	1b668 <__assert_fail@plt+0xa150>
   1b6a0:	pop	{r4, r5, fp, pc}
   1b6a4:	sub	r0, r3, #1
   1b6a8:	pop	{r4, r5, fp, pc}
   1b6ac:	push	{r4, r5, fp, lr}
   1b6b0:	add	fp, sp, #8
   1b6b4:	mov	r4, r1
   1b6b8:	mov	r5, r0
   1b6bc:	ldr	r0, [r0]
   1b6c0:	ldr	r1, [r5, #4]
   1b6c4:	cmp	r0, r1
   1b6c8:	bne	1b6f4 <__assert_fail@plt+0xa1dc>
   1b6cc:	mov	r1, #2
   1b6d0:	add	r0, r1, r0, lsl #1
   1b6d4:	str	r0, [r5]
   1b6d8:	lsl	r1, r0, #2
   1b6dc:	ldr	r0, [r5, #8]
   1b6e0:	bl	22654 <__assert_fail@plt+0x1113c>
   1b6e4:	cmp	r0, #0
   1b6e8:	moveq	r0, #0
   1b6ec:	popeq	{r4, r5, fp, pc}
   1b6f0:	str	r0, [r5, #8]
   1b6f4:	ldmib	r5, {r0, r1}
   1b6f8:	add	r2, r0, #1
   1b6fc:	str	r2, [r5, #4]
   1b700:	str	r4, [r1, r0, lsl #2]
   1b704:	mov	r0, #1
   1b708:	pop	{r4, r5, fp, pc}
   1b70c:	push	{r4, r5, fp, lr}
   1b710:	add	fp, sp, #8
   1b714:	mov	r5, r1
   1b718:	mov	r4, r0
   1b71c:	ldr	r0, [r1, #4]
   1b720:	str	r0, [r4, #4]
   1b724:	ldr	r1, [r1, #4]
   1b728:	cmp	r1, #1
   1b72c:	blt	1b760 <__assert_fail@plt+0xa248>
   1b730:	str	r0, [r4]
   1b734:	lsl	r0, r0, #2
   1b738:	bl	22624 <__assert_fail@plt+0x1110c>
   1b73c:	str	r0, [r4, #8]
   1b740:	cmp	r0, #0
   1b744:	beq	1b774 <__assert_fail@plt+0xa25c>
   1b748:	ldr	r2, [r5, #4]
   1b74c:	ldr	r1, [r5, #8]
   1b750:	lsl	r2, r2, #2
   1b754:	bl	112a8 <memcpy@plt>
   1b758:	mov	r0, #0
   1b75c:	pop	{r4, r5, fp, pc}
   1b760:	mov	r0, #0
   1b764:	str	r0, [r4]
   1b768:	str	r0, [r4, #4]
   1b76c:	str	r0, [r4, #8]
   1b770:	pop	{r4, r5, fp, pc}
   1b774:	mov	r0, #0
   1b778:	str	r0, [r4]
   1b77c:	str	r0, [r4, #4]
   1b780:	mov	r0, #12
   1b784:	pop	{r4, r5, fp, pc}
   1b788:	mov	ip, r0
   1b78c:	ldr	r0, [r0, #4]
   1b790:	cmp	r0, #1
   1b794:	movlt	r0, #0
   1b798:	bxlt	lr
   1b79c:	push	{r4, r5, r6, r7, fp, lr}
   1b7a0:	add	fp, sp, #16
   1b7a4:	subs	r2, r0, #1
   1b7a8:	mov	r0, #0
   1b7ac:	mov	r3, #0
   1b7b0:	beq	1b7e0 <__assert_fail@plt+0xa2c8>
   1b7b4:	ldr	lr, [ip, #8]
   1b7b8:	mov	r3, #0
   1b7bc:	mov	r4, #1
   1b7c0:	add	r5, r2, r3
   1b7c4:	lsr	r6, r5, #1
   1b7c8:	ldr	r7, [lr, r6, lsl #2]
   1b7cc:	cmp	r7, r1
   1b7d0:	movge	r2, r6
   1b7d4:	addlt	r3, r4, r5, lsr #1
   1b7d8:	cmp	r3, r2
   1b7dc:	bcc	1b7c0 <__assert_fail@plt+0xa2a8>
   1b7e0:	ldr	r2, [ip, #8]
   1b7e4:	ldr	r2, [r2, r3, lsl #2]
   1b7e8:	cmp	r2, r1
   1b7ec:	addeq	r0, r3, #1
   1b7f0:	pop	{r4, r5, r6, r7, fp, pc}
   1b7f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7f8:	add	fp, sp, #28
   1b7fc:	sub	sp, sp, #12
   1b800:	mov	r6, r1
   1b804:	ldr	r1, [r2, #4]
   1b808:	cmp	r1, #0
   1b80c:	beq	1b8d4 <__assert_fail@plt+0xa3bc>
   1b810:	mov	r5, r3
   1b814:	mov	sl, r2
   1b818:	str	r0, [sp, #4]
   1b81c:	mov	r0, r2
   1b820:	mov	r1, r3
   1b824:	bl	1b8e8 <__assert_fail@plt+0xa3d0>
   1b828:	mov	r4, r0
   1b82c:	ldr	r0, [r6, #32]
   1b830:	str	r6, [sp, #8]
   1b834:	ldr	r1, [r6, #68]	; 0x44
   1b838:	and	r1, r1, r4
   1b83c:	add	r1, r1, r1, lsl #1
   1b840:	mov	r6, r0
   1b844:	ldr	r2, [r6, r1, lsl #2]!
   1b848:	cmp	r2, #1
   1b84c:	blt	1b8a0 <__assert_fail@plt+0xa388>
   1b850:	add	r0, r0, r1, lsl #2
   1b854:	ldr	r8, [r0, #8]
   1b858:	mov	r9, #0
   1b85c:	ldr	r7, [r8, r9, lsl #2]
   1b860:	ldr	r0, [r7]
   1b864:	cmp	r0, r4
   1b868:	bne	1b890 <__assert_fail@plt+0xa378>
   1b86c:	ldrb	r0, [r7, #52]	; 0x34
   1b870:	and	r0, r0, #15
   1b874:	cmp	r0, r5
   1b878:	bne	1b890 <__assert_fail@plt+0xa378>
   1b87c:	ldr	r0, [r7, #40]	; 0x28
   1b880:	mov	r1, sl
   1b884:	bl	1b914 <__assert_fail@plt+0xa3fc>
   1b888:	cmp	r0, #0
   1b88c:	bne	1b8dc <__assert_fail@plt+0xa3c4>
   1b890:	ldr	r0, [r6]
   1b894:	add	r9, r9, #1
   1b898:	cmp	r9, r0
   1b89c:	blt	1b85c <__assert_fail@plt+0xa344>
   1b8a0:	ldr	r0, [sp, #8]
   1b8a4:	mov	r1, sl
   1b8a8:	mov	r2, r5
   1b8ac:	mov	r3, r4
   1b8b0:	bl	1b974 <__assert_fail@plt+0xa45c>
   1b8b4:	mov	r7, r0
   1b8b8:	cmp	r0, #0
   1b8bc:	bne	1b8dc <__assert_fail@plt+0xa3c4>
   1b8c0:	mov	r0, #12
   1b8c4:	ldr	r1, [sp, #4]
   1b8c8:	str	r0, [r1]
   1b8cc:	mov	r7, #0
   1b8d0:	b	1b8dc <__assert_fail@plt+0xa3c4>
   1b8d4:	mov	r7, #0
   1b8d8:	str	r7, [r0]
   1b8dc:	mov	r0, r7
   1b8e0:	sub	sp, fp, #28
   1b8e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8e8:	mov	r2, r0
   1b8ec:	ldr	r3, [r0, #4]
   1b8f0:	add	r0, r3, r1
   1b8f4:	cmp	r3, #1
   1b8f8:	bxlt	lr
   1b8fc:	ldr	r1, [r2, #8]
   1b900:	ldr	r2, [r1], #4
   1b904:	add	r0, r2, r0
   1b908:	subs	r3, r3, #1
   1b90c:	bne	1b900 <__assert_fail@plt+0xa3e8>
   1b910:	bx	lr
   1b914:	push	{fp, lr}
   1b918:	mov	fp, sp
   1b91c:	mov	lr, r0
   1b920:	mov	r0, #0
   1b924:	cmp	lr, #0
   1b928:	cmpne	r1, #0
   1b92c:	beq	1b970 <__assert_fail@plt+0xa458>
   1b930:	ldr	ip, [lr, #4]
   1b934:	ldr	r3, [r1, #4]
   1b938:	cmp	ip, r3
   1b93c:	popne	{fp, pc}
   1b940:	sub	r3, ip, #1
   1b944:	add	r2, r3, #1
   1b948:	cmp	r2, #1
   1b94c:	movlt	r0, #1
   1b950:	poplt	{fp, pc}
   1b954:	ldr	r2, [r1, #8]
   1b958:	ldr	ip, [r2, r3, lsl #2]
   1b95c:	ldr	r2, [lr, #8]
   1b960:	ldr	r2, [r2, r3, lsl #2]
   1b964:	sub	r3, r3, #1
   1b968:	cmp	r2, ip
   1b96c:	beq	1b944 <__assert_fail@plt+0xa42c>
   1b970:	pop	{fp, pc}
   1b974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b978:	add	fp, sp, #28
   1b97c:	sub	sp, sp, #20
   1b980:	mov	r8, r3
   1b984:	mov	r9, r2
   1b988:	mov	r7, r1
   1b98c:	mov	r6, r0
   1b990:	mov	r0, #56	; 0x38
   1b994:	mov	r1, #1
   1b998:	bl	225d0 <__assert_fail@plt+0x110b8>
   1b99c:	cmp	r0, #0
   1b9a0:	beq	1bb6c <__assert_fail@plt+0xa654>
   1b9a4:	mov	r4, r0
   1b9a8:	add	r5, r0, #4
   1b9ac:	mov	r0, r5
   1b9b0:	mov	r1, r7
   1b9b4:	bl	1b70c <__assert_fail@plt+0xa1f4>
   1b9b8:	cmp	r0, #0
   1b9bc:	bne	1bb74 <__assert_fail@plt+0xa65c>
   1b9c0:	str	r8, [sp, #4]
   1b9c4:	str	r5, [r4, #40]	; 0x28
   1b9c8:	and	r0, r9, #15
   1b9cc:	ldrb	r1, [r4, #52]	; 0x34
   1b9d0:	and	r1, r1, #240	; 0xf0
   1b9d4:	orr	r0, r1, r0
   1b9d8:	strb	r0, [r4, #52]	; 0x34
   1b9dc:	ldr	r0, [r7, #4]
   1b9e0:	cmp	r0, #1
   1b9e4:	blt	1bb40 <__assert_fail@plt+0xa628>
   1b9e8:	mov	r3, r5
   1b9ec:	and	r0, r9, #4
   1b9f0:	str	r0, [sp]
   1b9f4:	and	r0, r9, #2
   1b9f8:	str	r0, [sp, #8]
   1b9fc:	and	r0, r9, #1
   1ba00:	str	r0, [sp, #16]
   1ba04:	mov	r8, #0
   1ba08:	movw	r0, #65280	; 0xff00
   1ba0c:	movt	r0, #3
   1ba10:	add	sl, r0, #255	; 0xff
   1ba14:	mov	r9, #0
   1ba18:	str	r5, [sp, #12]
   1ba1c:	ldr	r0, [r7, #8]
   1ba20:	ldr	r0, [r0, r8, lsl #2]
   1ba24:	ldr	r1, [r6]
   1ba28:	add	r0, r1, r0, lsl #3
   1ba2c:	ldr	r5, [r0, #4]
   1ba30:	and	r0, r5, sl
   1ba34:	cmp	r0, #1
   1ba38:	beq	1bb30 <__assert_fail@plt+0xa618>
   1ba3c:	movw	r0, #65280	; 0xff00
   1ba40:	movt	r0, #3
   1ba44:	and	r0, r5, r0
   1ba48:	mov	r1, #32
   1ba4c:	and	r1, r1, r5, lsr #15
   1ba50:	ldrb	r2, [r4, #52]	; 0x34
   1ba54:	orr	r1, r2, r1
   1ba58:	strb	r1, [r4, #52]	; 0x34
   1ba5c:	uxtb	r2, r5
   1ba60:	cmp	r2, #2
   1ba64:	beq	1ba78 <__assert_fail@plt+0xa560>
   1ba68:	cmp	r2, #4
   1ba6c:	bne	1ba84 <__assert_fail@plt+0xa56c>
   1ba70:	mov	r2, #64	; 0x40
   1ba74:	b	1ba7c <__assert_fail@plt+0xa564>
   1ba78:	mov	r2, #16
   1ba7c:	orr	r1, r1, r2
   1ba80:	strb	r1, [r4, #52]	; 0x34
   1ba84:	cmp	r0, #0
   1ba88:	beq	1bb30 <__assert_fail@plt+0xa618>
   1ba8c:	ldr	r0, [r4, #40]	; 0x28
   1ba90:	cmp	r0, r3
   1ba94:	bne	1bad0 <__assert_fail@plt+0xa5b8>
   1ba98:	mov	r0, #12
   1ba9c:	bl	22624 <__assert_fail@plt+0x1110c>
   1baa0:	cmp	r0, #0
   1baa4:	beq	1bb64 <__assert_fail@plt+0xa64c>
   1baa8:	str	r0, [r4, #40]	; 0x28
   1baac:	mov	r1, r7
   1bab0:	bl	1b70c <__assert_fail@plt+0xa1f4>
   1bab4:	cmp	r0, #0
   1bab8:	bne	1bb64 <__assert_fail@plt+0xa64c>
   1babc:	ldrb	r0, [r4, #52]	; 0x34
   1bac0:	orr	r0, r0, #128	; 0x80
   1bac4:	strb	r0, [r4, #52]	; 0x34
   1bac8:	mov	r9, #0
   1bacc:	ldr	r3, [sp, #12]
   1bad0:	ldr	r0, [sp, #16]
   1bad4:	cmp	r0, #0
   1bad8:	bne	1bae4 <__assert_fail@plt+0xa5cc>
   1badc:	ands	r0, r5, #256	; 0x100
   1bae0:	bne	1bb1c <__assert_fail@plt+0xa604>
   1bae4:	ldr	r0, [sp, #16]
   1bae8:	cmp	r0, #0
   1baec:	andsne	r0, r5, #512	; 0x200
   1baf0:	bne	1bb1c <__assert_fail@plt+0xa604>
   1baf4:	ldr	r0, [sp, #8]
   1baf8:	cmp	r0, #0
   1bafc:	bne	1bb08 <__assert_fail@plt+0xa5f0>
   1bb00:	ands	r0, r5, #4096	; 0x1000
   1bb04:	bne	1bb1c <__assert_fail@plt+0xa604>
   1bb08:	ldr	r0, [sp]
   1bb0c:	cmp	r0, #0
   1bb10:	bne	1bb30 <__assert_fail@plt+0xa618>
   1bb14:	ands	r0, r5, #16384	; 0x4000
   1bb18:	beq	1bb30 <__assert_fail@plt+0xa618>
   1bb1c:	sub	r1, r8, r9
   1bb20:	mov	r0, r3
   1bb24:	bl	1bb80 <__assert_fail@plt+0xa668>
   1bb28:	ldr	r3, [sp, #12]
   1bb2c:	add	r9, r9, #1
   1bb30:	ldr	r0, [r7, #4]
   1bb34:	add	r8, r8, #1
   1bb38:	cmp	r8, r0
   1bb3c:	blt	1ba1c <__assert_fail@plt+0xa504>
   1bb40:	mov	r0, r6
   1bb44:	mov	r1, r4
   1bb48:	ldr	r2, [sp, #4]
   1bb4c:	bl	1bbc8 <__assert_fail@plt+0xa6b0>
   1bb50:	cmp	r0, #0
   1bb54:	bne	1bb64 <__assert_fail@plt+0xa64c>
   1bb58:	mov	r0, r4
   1bb5c:	sub	sp, fp, #28
   1bb60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb64:	mov	r0, r4
   1bb68:	bl	16124 <__assert_fail@plt+0x4c0c>
   1bb6c:	mov	r4, #0
   1bb70:	b	1bb58 <__assert_fail@plt+0xa640>
   1bb74:	mov	r0, r4
   1bb78:	bl	22b14 <__assert_fail@plt+0x115fc>
   1bb7c:	b	1bb6c <__assert_fail@plt+0xa654>
   1bb80:	cmp	r1, #0
   1bb84:	ldrge	r2, [r0, #4]
   1bb88:	cmpge	r2, r1
   1bb8c:	bgt	1bb94 <__assert_fail@plt+0xa67c>
   1bb90:	bx	lr
   1bb94:	sub	r2, r2, #1
   1bb98:	str	r2, [r0, #4]
   1bb9c:	cmp	r2, r1
   1bba0:	bxle	lr
   1bba4:	ldr	r2, [r0, #8]
   1bba8:	add	r3, r2, r1, lsl #2
   1bbac:	ldr	r3, [r3, #4]
   1bbb0:	str	r3, [r2, r1, lsl #2]
   1bbb4:	add	r1, r1, #1
   1bbb8:	ldr	r3, [r0, #4]
   1bbbc:	cmp	r1, r3
   1bbc0:	blt	1bba8 <__assert_fail@plt+0xa690>
   1bbc4:	b	1bb90 <__assert_fail@plt+0xa678>
   1bbc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbcc:	add	fp, sp, #28
   1bbd0:	sub	sp, sp, #4
   1bbd4:	mov	r9, r2
   1bbd8:	mov	r4, r1
   1bbdc:	mov	r7, r0
   1bbe0:	str	r2, [r1]
   1bbe4:	ldr	r1, [r1, #8]
   1bbe8:	add	r5, r4, #16
   1bbec:	mov	r0, r5
   1bbf0:	bl	1b04c <__assert_fail@plt+0x9b34>
   1bbf4:	mov	r8, #12
   1bbf8:	cmp	r0, #0
   1bbfc:	bne	1bc90 <__assert_fail@plt+0xa778>
   1bc00:	ldr	r0, [r4, #8]
   1bc04:	cmp	r0, #1
   1bc08:	blt	1bc4c <__assert_fail@plt+0xa734>
   1bc0c:	mov	r6, #0
   1bc10:	ldr	r0, [r4, #12]
   1bc14:	ldr	r1, [r0, r6, lsl #2]
   1bc18:	ldr	r0, [r7]
   1bc1c:	add	r0, r0, r1, lsl #3
   1bc20:	ldrb	r0, [r0, #4]
   1bc24:	tst	r0, #8
   1bc28:	bne	1bc3c <__assert_fail@plt+0xa724>
   1bc2c:	mov	r0, r5
   1bc30:	bl	1b6ac <__assert_fail@plt+0xa194>
   1bc34:	cmp	r0, #0
   1bc38:	beq	1bc90 <__assert_fail@plt+0xa778>
   1bc3c:	ldr	r0, [r4, #8]
   1bc40:	add	r6, r6, #1
   1bc44:	cmp	r6, r0
   1bc48:	blt	1bc10 <__assert_fail@plt+0xa6f8>
   1bc4c:	ldr	sl, [r7, #32]
   1bc50:	ldr	r0, [r7, #68]	; 0x44
   1bc54:	and	r0, r0, r9
   1bc58:	add	r7, r0, r0, lsl #1
   1bc5c:	mov	r6, sl
   1bc60:	ldr	r1, [r6, r7, lsl #2]!
   1bc64:	mov	r5, r6
   1bc68:	ldr	r0, [r5, #4]!
   1bc6c:	cmp	r0, r1
   1bc70:	ble	1bc9c <__assert_fail@plt+0xa784>
   1bc74:	add	r0, sl, r7, lsl #2
   1bc78:	ldr	r0, [r0, #8]
   1bc7c:	ldr	r1, [r6]
   1bc80:	add	r2, r1, #1
   1bc84:	str	r2, [r6]
   1bc88:	str	r4, [r0, r1, lsl #2]
   1bc8c:	mov	r8, #0
   1bc90:	mov	r0, r8
   1bc94:	sub	sp, fp, #28
   1bc98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc9c:	add	r9, sl, r7, lsl #2
   1bca0:	ldr	r0, [r9, #8]!
   1bca4:	mov	r2, #2
   1bca8:	add	r1, r2, r1, lsl #1
   1bcac:	str	r1, [sp]
   1bcb0:	lsl	r1, r1, #2
   1bcb4:	bl	22654 <__assert_fail@plt+0x1113c>
   1bcb8:	cmp	r0, #0
   1bcbc:	beq	1bc90 <__assert_fail@plt+0xa778>
   1bcc0:	str	r0, [r9]
   1bcc4:	ldr	r0, [sp]
   1bcc8:	str	r0, [r5]
   1bccc:	b	1bc74 <__assert_fail@plt+0xa75c>
   1bcd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcd4:	add	fp, sp, #28
   1bcd8:	sub	sp, sp, #4
   1bcdc:	mov	r5, r2
   1bce0:	mov	sl, r1
   1bce4:	mov	r4, r0
   1bce8:	add	r8, r2, #1
   1bcec:	cmp	r3, #1
   1bcf0:	beq	1bd44 <__assert_fail@plt+0xa82c>
   1bcf4:	mov	r6, #2
   1bcf8:	cmp	r3, #0
   1bcfc:	bne	1bd54 <__assert_fail@plt+0xa83c>
   1bd00:	lsl	r6, r8, #2
   1bd04:	mov	r0, r6
   1bd08:	bl	22624 <__assert_fail@plt+0x1110c>
   1bd0c:	str	r0, [r4, #4]
   1bd10:	mov	r7, #0
   1bd14:	cmp	r0, #0
   1bd18:	beq	1be08 <__assert_fail@plt+0xa8f0>
   1bd1c:	mov	r0, r6
   1bd20:	bl	22624 <__assert_fail@plt+0x1110c>
   1bd24:	str	r0, [r4, #8]
   1bd28:	cmp	r0, #0
   1bd2c:	beq	1be14 <__assert_fail@plt+0xa8fc>
   1bd30:	str	r8, [r4]
   1bd34:	mov	r6, #1
   1bd38:	cmp	r5, #1
   1bd3c:	bge	1bd5c <__assert_fail@plt+0xa844>
   1bd40:	b	1bdd4 <__assert_fail@plt+0xa8bc>
   1bd44:	ldr	r0, [r4]
   1bd48:	mov	r6, #1
   1bd4c:	cmp	r8, r0
   1bd50:	bhi	1bd88 <__assert_fail@plt+0xa870>
   1bd54:	cmp	r5, #1
   1bd58:	blt	1bdd4 <__assert_fail@plt+0xa8bc>
   1bd5c:	add	r0, sl, #4
   1bd60:	ldmib	r4, {r1, r2}
   1bd64:	mov	r3, r5
   1bd68:	ldr	r7, [r0, #-4]
   1bd6c:	str	r7, [r1], #4
   1bd70:	ldr	r7, [r0]
   1bd74:	str	r7, [r2], #4
   1bd78:	add	r0, r0, #8
   1bd7c:	subs	r3, r3, #1
   1bd80:	bne	1bd68 <__assert_fail@plt+0xa850>
   1bd84:	b	1bdd8 <__assert_fail@plt+0xa8c0>
   1bd88:	ldr	r0, [r4, #4]
   1bd8c:	lsl	r9, r8, #2
   1bd90:	mov	r1, r9
   1bd94:	bl	22654 <__assert_fail@plt+0x1113c>
   1bd98:	mov	r7, #0
   1bd9c:	str	r0, [sp]
   1bda0:	cmp	r0, #0
   1bda4:	beq	1be08 <__assert_fail@plt+0xa8f0>
   1bda8:	ldr	r0, [r4, #8]
   1bdac:	mov	r1, r9
   1bdb0:	bl	22654 <__assert_fail@plt+0x1113c>
   1bdb4:	cmp	r0, #0
   1bdb8:	beq	1be20 <__assert_fail@plt+0xa908>
   1bdbc:	str	r8, [r4]
   1bdc0:	ldr	r1, [sp]
   1bdc4:	str	r1, [r4, #4]
   1bdc8:	str	r0, [r4, #8]
   1bdcc:	cmp	r5, #1
   1bdd0:	bge	1bd5c <__assert_fail@plt+0xa844>
   1bdd4:	mov	r5, #0
   1bdd8:	ldr	r0, [r4]
   1bddc:	cmp	r5, r0
   1bde0:	bcs	1be04 <__assert_fail@plt+0xa8ec>
   1bde4:	ldmib	r4, {r0, r1}
   1bde8:	mvn	r2, #0
   1bdec:	str	r2, [r1, r5, lsl #2]
   1bdf0:	str	r2, [r0, r5, lsl #2]
   1bdf4:	add	r5, r5, #1
   1bdf8:	ldr	r3, [r4]
   1bdfc:	cmp	r5, r3
   1be00:	bcc	1bdec <__assert_fail@plt+0xa8d4>
   1be04:	mov	r7, r6
   1be08:	mov	r0, r7
   1be0c:	sub	sp, fp, #28
   1be10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be14:	ldr	r0, [r4, #4]
   1be18:	bl	22b14 <__assert_fail@plt+0x115fc>
   1be1c:	b	1be08 <__assert_fail@plt+0xa8f0>
   1be20:	ldr	r0, [sp]
   1be24:	b	1be18 <__assert_fail@plt+0xa900>
   1be28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1be2c:	add	fp, sp, #24
   1be30:	sub	sp, sp, #8
   1be34:	mov	r7, r3
   1be38:	mov	r4, r2
   1be3c:	mov	r8, r1
   1be40:	mov	r5, r0
   1be44:	ldr	r9, [fp, #16]
   1be48:	ldr	r6, [r9, #92]	; 0x5c
   1be4c:	str	r9, [sp, #4]
   1be50:	ldr	r0, [fp, #12]
   1be54:	str	r0, [sp]
   1be58:	ldr	r3, [fp, #8]
   1be5c:	mov	r0, r1
   1be60:	mov	r1, r2
   1be64:	mov	r2, r5
   1be68:	bl	16bac <__assert_fail@plt+0x5694>
   1be6c:	cmp	r6, r7
   1be70:	movgt	r7, r6
   1be74:	add	r1, r4, #1
   1be78:	cmp	r1, r7
   1be7c:	movge	r1, r7
   1be80:	mov	r0, r5
   1be84:	bl	16c04 <__assert_fail@plt+0x56ec>
   1be88:	cmp	r0, #0
   1be8c:	bne	1bed0 <__assert_fail@plt+0xa9b8>
   1be90:	add	r1, r9, #96	; 0x60
   1be94:	str	r1, [r5, #68]	; 0x44
   1be98:	ldrb	r1, [r9, #88]	; 0x58
   1be9c:	ubfx	r1, r1, #4, #1
   1bea0:	strb	r1, [r5, #78]	; 0x4e
   1bea4:	ldrb	r1, [r5, #75]	; 0x4b
   1bea8:	cmp	r1, #0
   1beac:	beq	1beb8 <__assert_fail@plt+0xa9a0>
   1beb0:	mov	r4, #0
   1beb4:	b	1bec8 <__assert_fail@plt+0xa9b0>
   1beb8:	str	r8, [r5, #4]
   1bebc:	ldr	r1, [r9, #92]	; 0x5c
   1bec0:	cmp	r1, #1
   1bec4:	movwgt	r4, #0
   1bec8:	str	r4, [r5, #28]
   1becc:	str	r4, [r5, #32]
   1bed0:	sub	sp, fp, #24
   1bed4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bed8:	push	{r4, r5, r6, sl, fp, lr}
   1bedc:	add	fp, sp, #16
   1bee0:	mov	r4, r2
   1bee4:	mov	r5, r0
   1bee8:	mvn	r0, #0
   1beec:	str	r1, [r5, #88]	; 0x58
   1bef0:	str	r0, [r5, #92]	; 0x5c
   1bef4:	cmp	r2, #1
   1bef8:	blt	1bf44 <__assert_fail@plt+0xaa2c>
   1befc:	mov	r6, #12
   1bf00:	movw	r0, #43690	; 0xaaaa
   1bf04:	movt	r0, #2730	; 0xaaa
   1bf08:	cmp	r4, r0
   1bf0c:	bhi	1bf3c <__assert_fail@plt+0xaa24>
   1bf10:	add	r0, r4, r4, lsl #1
   1bf14:	lsl	r0, r0, #3
   1bf18:	bl	22624 <__assert_fail@plt+0x1110c>
   1bf1c:	str	r0, [r5, #116]	; 0x74
   1bf20:	lsl	r0, r4, #2
   1bf24:	bl	22624 <__assert_fail@plt+0x1110c>
   1bf28:	str	r0, [r5, #132]	; 0x84
   1bf2c:	cmp	r0, #0
   1bf30:	ldrne	r0, [r5, #116]	; 0x74
   1bf34:	cmpne	r0, #0
   1bf38:	bne	1bf44 <__assert_fail@plt+0xaa2c>
   1bf3c:	mov	r0, r6
   1bf40:	pop	{r4, r5, r6, sl, fp, pc}
   1bf44:	mov	r0, #1
   1bf48:	str	r0, [r5, #120]	; 0x78
   1bf4c:	str	r4, [r5, #112]	; 0x70
   1bf50:	str	r4, [r5, #128]	; 0x80
   1bf54:	mov	r6, #0
   1bf58:	mov	r0, r6
   1bf5c:	pop	{r4, r5, r6, sl, fp, pc}
   1bf60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf64:	add	fp, sp, #28
   1bf68:	sub	sp, sp, #28
   1bf6c:	mov	r6, r2
   1bf70:	mov	r7, r1
   1bf74:	mov	r4, r0
   1bf78:	ldr	r0, [r0, #24]
   1bf7c:	cmp	r0, r1
   1bf80:	ble	1c0ec <__assert_fail@plt+0xabd4>
   1bf84:	ldr	r0, [r4, #80]	; 0x50
   1bf88:	cmp	r0, #2
   1bf8c:	movge	r0, #0
   1bf90:	strge	r0, [r4, #16]
   1bf94:	strge	r0, [r4, #20]
   1bf98:	mov	r0, #0
   1bf9c:	str	r0, [r4, #24]
   1bfa0:	str	r0, [r4, #28]
   1bfa4:	str	r0, [r4, #32]
   1bfa8:	strb	r0, [r4, #76]	; 0x4c
   1bfac:	mov	r0, #4
   1bfb0:	tst	r6, #1
   1bfb4:	movweq	r0, #6
   1bfb8:	ldr	r1, [r4, #44]	; 0x2c
   1bfbc:	ldr	r2, [r4, #52]	; 0x34
   1bfc0:	str	r1, [r4, #48]	; 0x30
   1bfc4:	str	r2, [r4, #56]	; 0x38
   1bfc8:	str	r0, [r4, #60]	; 0x3c
   1bfcc:	ldrb	r0, [r4, #75]	; 0x4b
   1bfd0:	cmp	r0, #0
   1bfd4:	mov	r5, r7
   1bfd8:	ldreq	r0, [r4]
   1bfdc:	streq	r0, [r4, #4]
   1bfe0:	moveq	r5, r7
   1bfe4:	cmp	r5, #0
   1bfe8:	beq	1c074 <__assert_fail@plt+0xab5c>
   1bfec:	ldr	r0, [r4, #32]
   1bff0:	cmp	r5, r0
   1bff4:	bge	1c0fc <__assert_fail@plt+0xabe4>
   1bff8:	ldrb	r0, [r4, #76]	; 0x4c
   1bffc:	cmp	r0, #0
   1c000:	bne	1c230 <__assert_fail@plt+0xad18>
   1c004:	sub	r1, r5, #1
   1c008:	mov	r0, r4
   1c00c:	mov	r2, r6
   1c010:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1c014:	str	r0, [r4, #60]	; 0x3c
   1c018:	ldr	r0, [r4, #80]	; 0x50
   1c01c:	cmp	r0, #2
   1c020:	blt	1c03c <__assert_fail@plt+0xab24>
   1c024:	ldr	r0, [r4, #8]
   1c028:	ldr	r2, [r4, #28]
   1c02c:	add	r1, r0, r5, lsl #2
   1c030:	sub	r2, r2, r5
   1c034:	lsl	r2, r2, #2
   1c038:	bl	11278 <memmove@plt>
   1c03c:	ldrb	r0, [r4, #75]	; 0x4b
   1c040:	cmp	r0, #0
   1c044:	bne	1c324 <__assert_fail@plt+0xae0c>
   1c048:	ldr	r0, [r4, #28]
   1c04c:	ldr	r1, [r4, #32]
   1c050:	sub	r0, r0, r5
   1c054:	sub	r1, r1, r5
   1c058:	str	r0, [r4, #28]
   1c05c:	str	r1, [r4, #32]
   1c060:	ldrb	r0, [r4, #75]	; 0x4b
   1c064:	cmp	r0, #0
   1c068:	ldreq	r0, [r4, #4]
   1c06c:	addeq	r0, r0, r5
   1c070:	streq	r0, [r4, #4]
   1c074:	str	r7, [r4, #24]
   1c078:	ldr	r0, [r4, #48]	; 0x30
   1c07c:	ldr	r1, [r4, #56]	; 0x38
   1c080:	ldr	r2, [r4, #80]	; 0x50
   1c084:	sub	r0, r0, r5
   1c088:	str	r0, [r4, #48]	; 0x30
   1c08c:	sub	r1, r1, r5
   1c090:	str	r1, [r4, #56]	; 0x38
   1c094:	cmp	r2, #2
   1c098:	blt	1c0c0 <__assert_fail@plt+0xaba8>
   1c09c:	ldrb	r0, [r4, #72]	; 0x48
   1c0a0:	cmp	r0, #0
   1c0a4:	beq	1c0d4 <__assert_fail@plt+0xabbc>
   1c0a8:	mov	r0, r4
   1c0ac:	bl	16ca8 <__assert_fail@plt+0x5790>
   1c0b0:	cmp	r0, #0
   1c0b4:	beq	1c0dc <__assert_fail@plt+0xabc4>
   1c0b8:	sub	sp, fp, #28
   1c0bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0c0:	ldrb	r1, [r4, #75]	; 0x4b
   1c0c4:	cmp	r1, #0
   1c0c8:	bne	1c33c <__assert_fail@plt+0xae24>
   1c0cc:	str	r0, [r4, #28]
   1c0d0:	b	1c0dc <__assert_fail@plt+0xabc4>
   1c0d4:	mov	r0, r4
   1c0d8:	bl	172dc <__assert_fail@plt+0x5dc4>
   1c0dc:	mov	r0, #0
   1c0e0:	str	r0, [r4, #40]	; 0x28
   1c0e4:	sub	sp, fp, #28
   1c0e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0ec:	sub	r5, r7, r0
   1c0f0:	cmp	r5, #0
   1c0f4:	bne	1bfec <__assert_fail@plt+0xaad4>
   1c0f8:	b	1c074 <__assert_fail@plt+0xab5c>
   1c0fc:	ldr	r9, [r4, #28]
   1c100:	ldrb	r0, [r4, #76]	; 0x4c
   1c104:	cmp	r0, #0
   1c108:	bne	1c4b4 <__assert_fail@plt+0xaf9c>
   1c10c:	mov	r0, #0
   1c110:	str	r0, [r4, #28]
   1c114:	ldr	r1, [r4, #80]	; 0x50
   1c118:	cmp	r1, #2
   1c11c:	blt	1c354 <__assert_fail@plt+0xae3c>
   1c120:	mvn	r0, #0
   1c124:	str	r0, [sp, #24]
   1c128:	ldrb	r0, [r4, #73]	; 0x49
   1c12c:	cmp	r0, #0
   1c130:	beq	1c1e4 <__assert_fail@plt+0xaccc>
   1c134:	ldr	r2, [r4]
   1c138:	ldr	r0, [r4, #24]
   1c13c:	add	r0, r2, r0
   1c140:	add	r8, r0, r5
   1c144:	sub	r1, r5, r1
   1c148:	add	r1, r0, r1
   1c14c:	cmp	r1, r2
   1c150:	movcc	r1, r2
   1c154:	mov	sl, r8
   1c158:	sub	sl, sl, #1
   1c15c:	cmp	sl, r1
   1c160:	bcc	1c1d8 <__assert_fail@plt+0xacc0>
   1c164:	ldrb	r2, [sl]
   1c168:	and	r2, r2, #192	; 0xc0
   1c16c:	cmp	r2, #128	; 0x80
   1c170:	beq	1c158 <__assert_fail@plt+0xac40>
   1c174:	ldr	r1, [r4, #48]	; 0x30
   1c178:	add	r3, r0, r1
   1c17c:	sub	r2, r3, sl
   1c180:	ldr	r0, [r4, #64]	; 0x40
   1c184:	cmp	r0, #0
   1c188:	mov	r1, sl
   1c18c:	bne	1c53c <__assert_fail@plt+0xb024>
   1c190:	mov	r0, #0
   1c194:	str	r0, [sp, #20]
   1c198:	str	r0, [sp, #16]
   1c19c:	add	r0, sp, #12
   1c1a0:	add	r3, sp, #16
   1c1a4:	bl	22bc4 <__assert_fail@plt+0x116ac>
   1c1a8:	sub	r1, r8, sl
   1c1ac:	cmp	r0, r1
   1c1b0:	bcc	1c1d8 <__assert_fail@plt+0xacc0>
   1c1b4:	cmn	r0, #3
   1c1b8:	bhi	1c1d8 <__assert_fail@plt+0xacc0>
   1c1bc:	mov	r2, #0
   1c1c0:	str	r2, [r4, #16]
   1c1c4:	str	r2, [r4, #20]
   1c1c8:	sub	r0, r0, r1
   1c1cc:	str	r0, [r4, #28]
   1c1d0:	ldr	r0, [sp, #12]
   1c1d4:	str	r0, [sp, #24]
   1c1d8:	ldr	r8, [sp, #24]
   1c1dc:	cmn	r8, #1
   1c1e0:	bne	1c208 <__assert_fail@plt+0xacf0>
   1c1e4:	add	r2, sp, #24
   1c1e8:	mov	r0, r4
   1c1ec:	mov	r1, r7
   1c1f0:	bl	1cfb0 <__assert_fail@plt+0xba98>
   1c1f4:	sub	r0, r0, r7
   1c1f8:	str	r0, [r4, #28]
   1c1fc:	ldr	r8, [sp, #24]
   1c200:	cmn	r8, #1
   1c204:	beq	1c478 <__assert_fail@plt+0xaf60>
   1c208:	ldrb	r0, [r4, #78]	; 0x4e
   1c20c:	cmp	r0, #0
   1c210:	bne	1c518 <__assert_fail@plt+0xb000>
   1c214:	mov	r0, #0
   1c218:	cmp	r8, #10
   1c21c:	bne	1c488 <__assert_fail@plt+0xaf70>
   1c220:	ldrb	r0, [r4, #77]	; 0x4d
   1c224:	cmp	r0, #0
   1c228:	movwne	r0, #2
   1c22c:	b	1c488 <__assert_fail@plt+0xaf70>
   1c230:	ldr	r8, [r4, #12]
   1c234:	ldr	r9, [r4, #28]
   1c238:	mov	r0, #0
   1c23c:	mov	r1, r9
   1c240:	add	r2, r0, r1
   1c244:	add	r2, r2, r2, lsr #31
   1c248:	asr	sl, r2, #1
   1c24c:	ldr	r2, [r8, sl, lsl #2]
   1c250:	cmp	r2, r5
   1c254:	mov	r3, sl
   1c258:	bgt	1c268 <__assert_fail@plt+0xad50>
   1c25c:	bge	1c274 <__assert_fail@plt+0xad5c>
   1c260:	add	r0, sl, #1
   1c264:	mov	r3, r1
   1c268:	cmp	r0, r3
   1c26c:	mov	r1, r3
   1c270:	blt	1c240 <__assert_fail@plt+0xad28>
   1c274:	cmp	r2, r5
   1c278:	addlt	sl, sl, #1
   1c27c:	sub	r1, sl, #1
   1c280:	mov	r0, r4
   1c284:	mov	r2, r6
   1c288:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1c28c:	str	r0, [r4, #60]	; 0x3c
   1c290:	cmp	r9, r5
   1c294:	ble	1c2a8 <__assert_fail@plt+0xad90>
   1c298:	cmp	sl, r5
   1c29c:	ldreq	r0, [r8, sl, lsl #2]
   1c2a0:	cmpeq	r0, r5
   1c2a4:	beq	1c404 <__assert_fail@plt+0xaeec>
   1c2a8:	mov	r0, #0
   1c2ac:	strb	r0, [r4, #76]	; 0x4c
   1c2b0:	sub	r0, r5, r7
   1c2b4:	ldr	r1, [r4, #44]	; 0x2c
   1c2b8:	ldr	r2, [r4, #52]	; 0x34
   1c2bc:	add	r1, r0, r1
   1c2c0:	str	r1, [r4, #48]	; 0x30
   1c2c4:	add	r0, r0, r2
   1c2c8:	str	r0, [r4, #56]	; 0x38
   1c2cc:	sub	r1, r8, #4
   1c2d0:	mov	r0, sl
   1c2d4:	cmp	sl, #1
   1c2d8:	blt	1c2ec <__assert_fail@plt+0xadd4>
   1c2dc:	ldr	r2, [r1, r0, lsl #2]
   1c2e0:	sub	sl, r0, #1
   1c2e4:	cmp	r2, r5
   1c2e8:	beq	1c2d0 <__assert_fail@plt+0xadb8>
   1c2ec:	cmp	r0, r9
   1c2f0:	bge	1c310 <__assert_fail@plt+0xadf8>
   1c2f4:	ldr	r1, [r4, #8]
   1c2f8:	ldr	r2, [r1, r0, lsl #2]
   1c2fc:	cmn	r2, #1
   1c300:	bne	1c310 <__assert_fail@plt+0xadf8>
   1c304:	add	r0, r0, #1
   1c308:	cmp	r0, r9
   1c30c:	blt	1c2f8 <__assert_fail@plt+0xade0>
   1c310:	cmp	r0, r9
   1c314:	bne	1c3a0 <__assert_fail@plt+0xae88>
   1c318:	mov	r0, #0
   1c31c:	str	r0, [r4, #28]
   1c320:	b	1c498 <__assert_fail@plt+0xaf80>
   1c324:	ldr	r0, [r4, #4]
   1c328:	ldr	r2, [r4, #28]
   1c32c:	add	r1, r0, r5
   1c330:	sub	r2, r2, r5
   1c334:	bl	11278 <memmove@plt>
   1c338:	b	1c048 <__assert_fail@plt+0xab30>
   1c33c:	ldrb	r0, [r4, #72]	; 0x48
   1c340:	cmp	r0, #0
   1c344:	beq	1c3ec <__assert_fail@plt+0xaed4>
   1c348:	mov	r0, r4
   1c34c:	bl	17270 <__assert_fail@plt+0x5d58>
   1c350:	b	1c0dc <__assert_fail@plt+0xabc4>
   1c354:	ldr	r2, [r4]
   1c358:	ldr	r3, [r4, #24]
   1c35c:	ldr	r1, [r4, #64]	; 0x40
   1c360:	add	r3, r5, r3
   1c364:	add	r2, r2, r3
   1c368:	ldrb	r6, [r2, #-1]
   1c36c:	str	r0, [r4, #32]
   1c370:	cmp	r1, #0
   1c374:	ldrbne	r6, [r1, r6]
   1c378:	ldr	r0, [r4, #68]	; 0x44
   1c37c:	mov	r1, r6
   1c380:	bl	1d05c <__assert_fail@plt+0xbb44>
   1c384:	mov	r1, #1
   1c388:	cmp	r0, #0
   1c38c:	moveq	r1, #0
   1c390:	cmpeq	r6, #10
   1c394:	beq	1c4a4 <__assert_fail@plt+0xaf8c>
   1c398:	str	r1, [r4, #60]	; 0x3c
   1c39c:	b	1c060 <__assert_fail@plt+0xab48>
   1c3a0:	ldr	r0, [r8, r0, lsl #2]
   1c3a4:	subs	r0, r0, r5
   1c3a8:	str	r0, [r4, #28]
   1c3ac:	beq	1c498 <__assert_fail@plt+0xaf80>
   1c3b0:	ldr	r2, [r4, #28]
   1c3b4:	cmp	r2, #1
   1c3b8:	blt	1c3dc <__assert_fail@plt+0xaec4>
   1c3bc:	ldr	r0, [r4, #8]
   1c3c0:	mov	r1, #0
   1c3c4:	mvn	r3, #0
   1c3c8:	str	r3, [r0, r1, lsl #2]
   1c3cc:	add	r1, r1, #1
   1c3d0:	ldr	r2, [r4, #28]
   1c3d4:	cmp	r1, r2
   1c3d8:	blt	1c3c8 <__assert_fail@plt+0xaeb0>
   1c3dc:	ldr	r0, [r4, #4]
   1c3e0:	mov	r1, #255	; 0xff
   1c3e4:	bl	11428 <memset@plt>
   1c3e8:	b	1c498 <__assert_fail@plt+0xaf80>
   1c3ec:	ldr	r0, [r4, #64]	; 0x40
   1c3f0:	cmp	r0, #0
   1c3f4:	beq	1c0dc <__assert_fail@plt+0xabc4>
   1c3f8:	mov	r0, r4
   1c3fc:	bl	1746c <__assert_fail@plt+0x5f54>
   1c400:	b	1c0dc <__assert_fail@plt+0xabc4>
   1c404:	ldr	r0, [r4, #8]
   1c408:	add	r1, r0, r5, lsl #2
   1c40c:	sub	r2, r9, r5
   1c410:	lsl	r2, r2, #2
   1c414:	bl	11278 <memmove@plt>
   1c418:	ldr	r0, [r4, #4]
   1c41c:	ldr	r2, [r4, #28]
   1c420:	add	r1, r0, r5
   1c424:	sub	r2, r2, r5
   1c428:	bl	11278 <memmove@plt>
   1c42c:	ldr	r0, [r4, #28]
   1c430:	ldr	r1, [r4, #32]
   1c434:	sub	r0, r0, r5
   1c438:	sub	r1, r1, r5
   1c43c:	str	r0, [r4, #28]
   1c440:	str	r1, [r4, #32]
   1c444:	cmp	r0, #1
   1c448:	blt	1c060 <__assert_fail@plt+0xab48>
   1c44c:	ldr	r0, [r4, #12]
   1c450:	add	r1, r0, r5, lsl #2
   1c454:	mov	r2, #0
   1c458:	ldr	r3, [r1, r2, lsl #2]
   1c45c:	sub	r3, r3, r5
   1c460:	str	r3, [r0, r2, lsl #2]
   1c464:	add	r2, r2, #1
   1c468:	ldr	r3, [r4, #28]
   1c46c:	cmp	r2, r3
   1c470:	blt	1c458 <__assert_fail@plt+0xaf40>
   1c474:	b	1c060 <__assert_fail@plt+0xab48>
   1c478:	sub	r1, r9, #1
   1c47c:	mov	r0, r4
   1c480:	mov	r2, r6
   1c484:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1c488:	str	r0, [r4, #60]	; 0x3c
   1c48c:	ldr	r0, [r4, #28]
   1c490:	cmp	r0, #0
   1c494:	bne	1c4dc <__assert_fail@plt+0xafc4>
   1c498:	ldr	r0, [r4, #28]
   1c49c:	str	r0, [r4, #32]
   1c4a0:	b	1c060 <__assert_fail@plt+0xab48>
   1c4a4:	ldrb	r1, [r4, #77]	; 0x4d
   1c4a8:	cmp	r1, #0
   1c4ac:	movwne	r1, #2
   1c4b0:	b	1c398 <__assert_fail@plt+0xae80>
   1c4b4:	mov	r0, #0
   1c4b8:	strb	r0, [r4, #76]	; 0x4c
   1c4bc:	sub	r0, r5, r7
   1c4c0:	ldr	r1, [r4, #44]	; 0x2c
   1c4c4:	ldr	r2, [r4, #52]	; 0x34
   1c4c8:	add	r1, r0, r1
   1c4cc:	str	r1, [r4, #48]	; 0x30
   1c4d0:	add	r0, r0, r2
   1c4d4:	str	r0, [r4, #56]	; 0x38
   1c4d8:	b	1c10c <__assert_fail@plt+0xabf4>
   1c4dc:	ldr	r2, [r4, #28]
   1c4e0:	cmp	r2, #1
   1c4e4:	blt	1c508 <__assert_fail@plt+0xaff0>
   1c4e8:	ldr	r0, [r4, #8]
   1c4ec:	mov	r1, #0
   1c4f0:	mvn	r3, #0
   1c4f4:	str	r3, [r0, r1, lsl #2]
   1c4f8:	add	r1, r1, #1
   1c4fc:	ldr	r2, [r4, #28]
   1c500:	cmp	r1, r2
   1c504:	blt	1c4f4 <__assert_fail@plt+0xafdc>
   1c508:	ldrb	r0, [r4, #75]	; 0x4b
   1c50c:	cmp	r0, #0
   1c510:	bne	1c3dc <__assert_fail@plt+0xaec4>
   1c514:	b	1c498 <__assert_fail@plt+0xaf80>
   1c518:	mov	r0, r8
   1c51c:	bl	11410 <iswalnum@plt>
   1c520:	mov	r1, r0
   1c524:	mov	r0, #1
   1c528:	cmp	r8, #95	; 0x5f
   1c52c:	beq	1c488 <__assert_fail@plt+0xaf70>
   1c530:	cmp	r1, #0
   1c534:	beq	1c214 <__assert_fail@plt+0xacfc>
   1c538:	b	1c488 <__assert_fail@plt+0xaf70>
   1c53c:	cmp	r2, #1
   1c540:	blt	1c584 <__assert_fail@plt+0xb06c>
   1c544:	sub	r1, sl, #1
   1c548:	sub	r1, r1, r3
   1c54c:	cmn	r1, #7
   1c550:	mvnle	r1, #6
   1c554:	mvn	r3, #1
   1c558:	sub	ip, r3, r1
   1c55c:	add	r1, sp, #6
   1c560:	ldrb	r3, [sl, ip]
   1c564:	ldrb	r3, [r0, r3]
   1c568:	strb	r3, [r1, ip]
   1c56c:	sub	lr, ip, #1
   1c570:	add	r3, ip, #1
   1c574:	cmp	r3, #1
   1c578:	mov	ip, lr
   1c57c:	bgt	1c560 <__assert_fail@plt+0xb048>
   1c580:	b	1c190 <__assert_fail@plt+0xac78>
   1c584:	add	r1, sp, #6
   1c588:	b	1c190 <__assert_fail@plt+0xac78>
   1c58c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c590:	add	fp, sp, #28
   1c594:	sub	sp, sp, #20
   1c598:	mov	sl, r2
   1c59c:	str	r1, [sp, #12]
   1c5a0:	mov	r7, r0
   1c5a4:	ldr	r5, [r0, #84]	; 0x54
   1c5a8:	ldr	r8, [r0, #40]	; 0x28
   1c5ac:	mov	r0, #0
   1c5b0:	str	r0, [sp, #16]
   1c5b4:	cmp	r2, #0
   1c5b8:	str	r2, [sp, #4]
   1c5bc:	movwne	sl, #1
   1c5c0:	ldr	r4, [r5, #36]	; 0x24
   1c5c4:	ldrsb	r0, [r4, #52]	; 0x34
   1c5c8:	cmn	r0, #1
   1c5cc:	bgt	1c638 <__assert_fail@plt+0xb120>
   1c5d0:	ldr	r2, [r7, #88]	; 0x58
   1c5d4:	sub	r1, r8, #1
   1c5d8:	mov	r0, r7
   1c5dc:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1c5e0:	tst	r0, #1
   1c5e4:	bne	1c634 <__assert_fail@plt+0xb11c>
   1c5e8:	mov	r3, r0
   1c5ec:	cmp	r0, #0
   1c5f0:	beq	1c638 <__assert_fail@plt+0xb120>
   1c5f4:	ands	r1, r3, #2
   1c5f8:	and	r0, r3, #4
   1c5fc:	cmpne	r0, #0
   1c600:	bne	1c690 <__assert_fail@plt+0xb178>
   1c604:	cmp	r1, #0
   1c608:	bne	1c6a0 <__assert_fail@plt+0xb188>
   1c60c:	cmp	r0, #0
   1c610:	beq	1c638 <__assert_fail@plt+0xb120>
   1c614:	ldr	r2, [r4, #40]	; 0x28
   1c618:	add	r0, sp, #16
   1c61c:	mov	r1, r5
   1c620:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   1c624:	mov	r4, r0
   1c628:	cmp	r4, #0
   1c62c:	bne	1c640 <__assert_fail@plt+0xb128>
   1c630:	b	1c844 <__assert_fail@plt+0xb32c>
   1c634:	ldr	r4, [r5, #40]	; 0x28
   1c638:	cmp	r4, #0
   1c63c:	beq	1c844 <__assert_fail@plt+0xb32c>
   1c640:	ldr	r0, [r7, #100]	; 0x64
   1c644:	cmp	r0, #0
   1c648:	beq	1c65c <__assert_fail@plt+0xb144>
   1c64c:	str	r4, [r0, r8, lsl #2]
   1c650:	ldr	r0, [r5, #76]	; 0x4c
   1c654:	cmp	r0, #0
   1c658:	bne	1c874 <__assert_fail@plt+0xb35c>
   1c65c:	ldrb	r0, [r4, #52]	; 0x34
   1c660:	tst	r0, #16
   1c664:	bne	1c84c <__assert_fail@plt+0xb334>
   1c668:	mov	r0, #0
   1c66c:	str	r0, [sp, #8]
   1c670:	mvn	r6, #0
   1c674:	str	r8, [sp]
   1c678:	ldr	r0, [r7, #40]	; 0x28
   1c67c:	ldr	r1, [r7, #56]	; 0x38
   1c680:	cmp	r1, r0
   1c684:	ble	1c820 <__assert_fail@plt+0xb308>
   1c688:	add	r8, sp, #16
   1c68c:	b	1c70c <__assert_fail@plt+0xb1f4>
   1c690:	ldr	r4, [r5, #48]	; 0x30
   1c694:	cmp	r4, #0
   1c698:	bne	1c640 <__assert_fail@plt+0xb128>
   1c69c:	b	1c844 <__assert_fail@plt+0xb32c>
   1c6a0:	ldr	r4, [r5, #44]	; 0x2c
   1c6a4:	cmp	r4, #0
   1c6a8:	bne	1c640 <__assert_fail@plt+0xb128>
   1c6ac:	b	1c844 <__assert_fail@plt+0xb32c>
   1c6b0:	ldr	r2, [r7, #48]	; 0x30
   1c6b4:	cmp	r1, r2
   1c6b8:	bge	1c720 <__assert_fail@plt+0xb208>
   1c6bc:	b	1c6cc <__assert_fail@plt+0xb1b4>
   1c6c0:	ldr	r2, [r7, #48]	; 0x30
   1c6c4:	cmp	r1, r2
   1c6c8:	bge	1c72c <__assert_fail@plt+0xb214>
   1c6cc:	add	r1, r0, #2
   1c6d0:	mov	r0, r7
   1c6d4:	bl	1d408 <__assert_fail@plt+0xbef0>
   1c6d8:	str	r0, [sp, #16]
   1c6dc:	cmp	r0, #0
   1c6e0:	beq	1c72c <__assert_fail@plt+0xb214>
   1c6e4:	b	1c844 <__assert_fail@plt+0xb32c>
   1c6e8:	cmp	r9, r4
   1c6ec:	ldr	r0, [sp]
   1c6f0:	moveq	r0, r5
   1c6f4:	str	r0, [sp]
   1c6f8:	sub	r0, r9, r4
   1c6fc:	clz	r0, r0
   1c700:	lsr	r0, r0, #5
   1c704:	and	sl, sl, r0
   1c708:	b	1c7c0 <__assert_fail@plt+0xb2a8>
   1c70c:	mov	r9, r4
   1c710:	add	r5, r0, #1
   1c714:	ldr	r1, [r7, #36]	; 0x24
   1c718:	cmp	r5, r1
   1c71c:	bge	1c6b0 <__assert_fail@plt+0xb198>
   1c720:	ldr	r1, [r7, #28]
   1c724:	cmp	r5, r1
   1c728:	bge	1c6c0 <__assert_fail@plt+0xb1a8>
   1c72c:	mov	r0, r8
   1c730:	mov	r1, r7
   1c734:	mov	r2, r9
   1c738:	bl	1d4dc <__assert_fail@plt+0xbfc4>
   1c73c:	mov	r4, r0
   1c740:	ldr	r0, [r7, #100]	; 0x64
   1c744:	cmp	r0, #0
   1c748:	beq	1c760 <__assert_fail@plt+0xb248>
   1c74c:	mov	r0, r8
   1c750:	mov	r1, r7
   1c754:	mov	r2, r4
   1c758:	bl	1d58c <__assert_fail@plt+0xc074>
   1c75c:	mov	r4, r0
   1c760:	cmp	r4, #0
   1c764:	bne	1c7b4 <__assert_fail@plt+0xb29c>
   1c768:	ldr	r0, [sp, #16]
   1c76c:	cmp	r0, #0
   1c770:	bne	1c844 <__assert_fail@plt+0xb32c>
   1c774:	ldr	r0, [sp, #8]
   1c778:	clz	r0, r0
   1c77c:	lsr	r0, r0, #5
   1c780:	ldr	r1, [sp, #12]
   1c784:	orr	r0, r0, r1
   1c788:	cmp	r0, #1
   1c78c:	bne	1c820 <__assert_fail@plt+0xb308>
   1c790:	ldr	r0, [r7, #100]	; 0x64
   1c794:	cmp	r0, #0
   1c798:	beq	1c820 <__assert_fail@plt+0xb308>
   1c79c:	mov	r0, r8
   1c7a0:	mov	r1, r7
   1c7a4:	bl	1d6d8 <__assert_fail@plt+0xc1c0>
   1c7a8:	mov	r4, r0
   1c7ac:	cmp	r0, #0
   1c7b0:	beq	1c820 <__assert_fail@plt+0xb308>
   1c7b4:	tst	sl, #1
   1c7b8:	bne	1c6e8 <__assert_fail@plt+0xb1d0>
   1c7bc:	mov	sl, #0
   1c7c0:	ldrb	r0, [r4, #52]	; 0x34
   1c7c4:	tst	r0, #16
   1c7c8:	beq	1c810 <__assert_fail@plt+0xb2f8>
   1c7cc:	sxtb	r0, r0
   1c7d0:	cmn	r0, #1
   1c7d4:	bgt	1c7f0 <__assert_fail@plt+0xb2d8>
   1c7d8:	ldr	r2, [r7, #40]	; 0x28
   1c7dc:	mov	r0, r7
   1c7e0:	mov	r1, r4
   1c7e4:	bl	1c900 <__assert_fail@plt+0xb3e8>
   1c7e8:	cmp	r0, #0
   1c7ec:	beq	1c810 <__assert_fail@plt+0xb2f8>
   1c7f0:	ldr	r6, [r7, #40]	; 0x28
   1c7f4:	ldr	r0, [sp, #12]
   1c7f8:	cmp	r0, #0
   1c7fc:	beq	1c838 <__assert_fail@plt+0xb320>
   1c800:	mov	r0, #0
   1c804:	str	r0, [sp, #4]
   1c808:	mov	r0, #1
   1c80c:	str	r0, [sp, #8]
   1c810:	ldr	r0, [r7, #40]	; 0x28
   1c814:	ldr	r1, [r7, #56]	; 0x38
   1c818:	cmp	r1, r0
   1c81c:	bgt	1c70c <__assert_fail@plt+0xb1f4>
   1c820:	ldr	r2, [sp, #4]
   1c824:	cmp	r2, #0
   1c828:	ldrne	r0, [r2]
   1c82c:	ldrne	r1, [sp]
   1c830:	addne	r0, r0, r1
   1c834:	strne	r0, [r2]
   1c838:	mov	r0, r6
   1c83c:	sub	sp, fp, #28
   1c840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c844:	mvn	r6, #1
   1c848:	b	1c838 <__assert_fail@plt+0xb320>
   1c84c:	sxtb	r0, r0
   1c850:	cmn	r0, #1
   1c854:	ble	1c8c4 <__assert_fail@plt+0xb3ac>
   1c858:	mov	r0, #1
   1c85c:	str	r0, [sp, #8]
   1c860:	ldr	r0, [sp, #12]
   1c864:	cmp	r0, #0
   1c868:	mov	r6, r8
   1c86c:	bne	1c674 <__assert_fail@plt+0xb15c>
   1c870:	b	1c8f8 <__assert_fail@plt+0xb3e0>
   1c874:	add	r5, r4, #4
   1c878:	mov	sl, #0
   1c87c:	mov	r0, r7
   1c880:	mov	r1, r5
   1c884:	mov	r2, #0
   1c888:	bl	1d084 <__assert_fail@plt+0xbb6c>
   1c88c:	str	r0, [sp, #16]
   1c890:	cmp	r0, #0
   1c894:	bne	1c8bc <__assert_fail@plt+0xb3a4>
   1c898:	ldrb	r0, [r4, #52]	; 0x34
   1c89c:	tst	r0, #64	; 0x40
   1c8a0:	beq	1c65c <__assert_fail@plt+0xb144>
   1c8a4:	mov	r0, r7
   1c8a8:	mov	r1, r5
   1c8ac:	bl	1d110 <__assert_fail@plt+0xbbf8>
   1c8b0:	str	r0, [sp, #16]
   1c8b4:	cmp	r0, #0
   1c8b8:	beq	1c65c <__assert_fail@plt+0xb144>
   1c8bc:	mov	r6, r0
   1c8c0:	b	1c838 <__assert_fail@plt+0xb320>
   1c8c4:	mov	r0, r7
   1c8c8:	mov	r1, r4
   1c8cc:	mov	r2, r8
   1c8d0:	bl	1c900 <__assert_fail@plt+0xb3e8>
   1c8d4:	cmp	r0, #0
   1c8d8:	mov	r6, r8
   1c8dc:	mvneq	r6, #0
   1c8e0:	movwne	r0, #1
   1c8e4:	str	r0, [sp, #8]
   1c8e8:	beq	1c674 <__assert_fail@plt+0xb15c>
   1c8ec:	ldr	r0, [sp, #12]
   1c8f0:	cmp	r0, #0
   1c8f4:	bne	1c674 <__assert_fail@plt+0xb15c>
   1c8f8:	mov	r6, r8
   1c8fc:	b	1c838 <__assert_fail@plt+0xb320>
   1c900:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c904:	add	fp, sp, #24
   1c908:	mov	r3, r2
   1c90c:	mov	r8, r1
   1c910:	mov	r6, r0
   1c914:	ldr	r2, [r0, #88]	; 0x58
   1c918:	mov	r1, r3
   1c91c:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1c920:	mov	r9, r0
   1c924:	ldr	r0, [r8, #8]
   1c928:	cmp	r0, #1
   1c92c:	blt	1c96c <__assert_fail@plt+0xb454>
   1c930:	ldr	r4, [r8, #12]
   1c934:	ldr	r6, [r6, #84]	; 0x54
   1c938:	mov	r5, #0
   1c93c:	ldr	r7, [r4, r5, lsl #2]
   1c940:	mov	r0, r6
   1c944:	mov	r1, r7
   1c948:	mov	r2, r9
   1c94c:	bl	1fda8 <__assert_fail@plt+0xe890>
   1c950:	cmp	r0, #0
   1c954:	movne	r0, r7
   1c958:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c95c:	add	r5, r5, #1
   1c960:	ldr	r0, [r8, #8]
   1c964:	cmp	r5, r0
   1c968:	blt	1c93c <__assert_fail@plt+0xb424>
   1c96c:	mov	r7, #0
   1c970:	mov	r0, r7
   1c974:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c97c:	add	fp, sp, #28
   1c980:	sub	sp, sp, #44	; 0x2c
   1c984:	ldr	r7, [r0, #92]	; 0x5c
   1c988:	cmn	r7, #-1073741822	; 0xc0000002
   1c98c:	bhi	1cb88 <__assert_fail@plt+0xb670>
   1c990:	ldr	r5, [r0, #84]	; 0x54
   1c994:	str	r0, [sp, #12]
   1c998:	ldr	sl, [r0, #96]	; 0x60
   1c99c:	mov	r0, #4
   1c9a0:	add	r6, r0, r7, lsl #2
   1c9a4:	mov	r0, r6
   1c9a8:	bl	22624 <__assert_fail@plt+0x1110c>
   1c9ac:	mov	r4, #12
   1c9b0:	cmp	r0, #0
   1c9b4:	beq	1cb58 <__assert_fail@plt+0xb640>
   1c9b8:	mov	r9, r0
   1c9bc:	ldr	r0, [r5, #76]	; 0x4c
   1c9c0:	cmp	r0, #0
   1c9c4:	beq	1c9ec <__assert_fail@plt+0xb4d4>
   1c9c8:	mov	r0, r6
   1c9cc:	bl	22624 <__assert_fail@plt+0x1110c>
   1c9d0:	cmp	r0, #0
   1c9d4:	beq	1cb5c <__assert_fail@plt+0xb644>
   1c9d8:	mov	r8, r0
   1c9dc:	str	r5, [sp, #8]
   1c9e0:	add	r4, sp, #16
   1c9e4:	mov	r5, sl
   1c9e8:	b	1ca54 <__assert_fail@plt+0xb53c>
   1c9ec:	str	r7, [sp]
   1c9f0:	add	r4, sp, #16
   1c9f4:	mov	r8, #0
   1c9f8:	mov	r0, r4
   1c9fc:	mov	r1, r9
   1ca00:	mov	r2, #0
   1ca04:	mov	r3, sl
   1ca08:	bl	1fe1c <__assert_fail@plt+0xe904>
   1ca0c:	ldr	r0, [sp, #12]
   1ca10:	mov	r1, r4
   1ca14:	bl	1fe3c <__assert_fail@plt+0xe924>
   1ca18:	mov	r4, r0
   1ca1c:	ldr	r0, [sp, #40]	; 0x28
   1ca20:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ca24:	cmp	r4, #0
   1ca28:	bne	1cb60 <__assert_fail@plt+0xb648>
   1ca2c:	ldr	r0, [r9]
   1ca30:	cmp	r0, #0
   1ca34:	bne	1cb3c <__assert_fail@plt+0xb624>
   1ca38:	mov	r4, #1
   1ca3c:	b	1cb60 <__assert_fail@plt+0xb648>
   1ca40:	mov	r0, sl
   1ca44:	mov	r2, r7
   1ca48:	bl	1c900 <__assert_fail@plt+0xb3e8>
   1ca4c:	mov	r4, r5
   1ca50:	mov	r5, r0
   1ca54:	add	sl, r7, #1
   1ca58:	lsl	r2, sl, #2
   1ca5c:	mov	r0, r8
   1ca60:	mov	r1, #0
   1ca64:	bl	11428 <memset@plt>
   1ca68:	str	r7, [sp]
   1ca6c:	mov	r0, r4
   1ca70:	mov	r1, r9
   1ca74:	mov	r6, r8
   1ca78:	mov	r2, r8
   1ca7c:	mov	r8, r5
   1ca80:	mov	r3, r5
   1ca84:	bl	1fe1c <__assert_fail@plt+0xe904>
   1ca88:	ldr	r0, [sp, #12]
   1ca8c:	mov	r5, r4
   1ca90:	mov	r1, r4
   1ca94:	bl	1fe3c <__assert_fail@plt+0xe924>
   1ca98:	mov	r4, r0
   1ca9c:	ldr	r0, [sp, #40]	; 0x28
   1caa0:	bl	22b14 <__assert_fail@plt+0x115fc>
   1caa4:	cmp	r4, #0
   1caa8:	bne	1cb90 <__assert_fail@plt+0xb678>
   1caac:	mov	r1, r9
   1cab0:	ldr	r0, [r9]
   1cab4:	cmp	r0, #0
   1cab8:	ldreq	r0, [r6]
   1cabc:	cmpeq	r0, #0
   1cac0:	bne	1cb10 <__assert_fail@plt+0xb5f8>
   1cac4:	mov	r4, #1
   1cac8:	cmp	r7, #1
   1cacc:	blt	1cb7c <__assert_fail@plt+0xb664>
   1cad0:	sub	r7, r7, #1
   1cad4:	ldr	sl, [sp, #12]
   1cad8:	ldr	r0, [sl, #100]	; 0x64
   1cadc:	mov	r9, r1
   1cae0:	mov	r8, r6
   1cae4:	ldr	r1, [r0, r7, lsl #2]
   1cae8:	cmp	r1, #0
   1caec:	ldrbne	r2, [r1, #52]	; 0x34
   1caf0:	tstne	r2, #16
   1caf4:	bne	1ca40 <__assert_fail@plt+0xb528>
   1caf8:	sub	r1, r7, #1
   1cafc:	add	r2, r7, #1
   1cb00:	cmp	r2, #2
   1cb04:	mov	r7, r1
   1cb08:	bge	1cae4 <__assert_fail@plt+0xb5cc>
   1cb0c:	b	1cb60 <__assert_fail@plt+0xb648>
   1cb10:	ldr	r0, [sp, #8]
   1cb14:	mov	r9, r1
   1cb18:	mov	r2, r6
   1cb1c:	mov	r3, sl
   1cb20:	bl	1ff48 <__assert_fail@plt+0xea30>
   1cb24:	mov	r4, r0
   1cb28:	mov	r0, r6
   1cb2c:	bl	22b14 <__assert_fail@plt+0x115fc>
   1cb30:	cmp	r4, #0
   1cb34:	mov	sl, r8
   1cb38:	bne	1cb5c <__assert_fail@plt+0xb644>
   1cb3c:	ldr	r4, [sp, #12]
   1cb40:	ldr	r0, [r4, #100]	; 0x64
   1cb44:	bl	22b14 <__assert_fail@plt+0x115fc>
   1cb48:	str	r7, [r4, #92]	; 0x5c
   1cb4c:	str	sl, [r4, #96]	; 0x60
   1cb50:	str	r9, [r4, #100]	; 0x64
   1cb54:	mov	r4, #0
   1cb58:	mov	r9, #0
   1cb5c:	mov	r8, #0
   1cb60:	mov	r0, r9
   1cb64:	bl	22b14 <__assert_fail@plt+0x115fc>
   1cb68:	mov	r0, r8
   1cb6c:	bl	22b14 <__assert_fail@plt+0x115fc>
   1cb70:	mov	r0, r4
   1cb74:	sub	sp, fp, #28
   1cb78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb7c:	mov	r9, r1
   1cb80:	mov	r8, r6
   1cb84:	b	1cb60 <__assert_fail@plt+0xb648>
   1cb88:	mov	r4, #12
   1cb8c:	b	1cb70 <__assert_fail@plt+0xb658>
   1cb90:	mov	r8, r6
   1cb94:	b	1cb60 <__assert_fail@plt+0xb648>
   1cb98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cb9c:	add	fp, sp, #24
   1cba0:	mov	r8, r0
   1cba4:	ldr	r0, [r0, #124]	; 0x7c
   1cba8:	cmp	r0, #1
   1cbac:	blt	1cc30 <__assert_fail@plt+0xb718>
   1cbb0:	mov	r7, #0
   1cbb4:	ldr	r0, [r8, #132]	; 0x84
   1cbb8:	ldr	r5, [r0, r7, lsl #2]
   1cbbc:	ldr	r0, [r5, #16]
   1cbc0:	cmp	r0, #1
   1cbc4:	blt	1cbf4 <__assert_fail@plt+0xb6dc>
   1cbc8:	mov	r4, #0
   1cbcc:	ldr	r0, [r5, #20]
   1cbd0:	ldr	r6, [r0, r4, lsl #2]
   1cbd4:	ldr	r0, [r6, #16]
   1cbd8:	bl	22b14 <__assert_fail@plt+0x115fc>
   1cbdc:	mov	r0, r6
   1cbe0:	bl	22b14 <__assert_fail@plt+0x115fc>
   1cbe4:	add	r4, r4, #1
   1cbe8:	ldr	r0, [r5, #16]
   1cbec:	cmp	r4, r0
   1cbf0:	blt	1cbcc <__assert_fail@plt+0xb6b4>
   1cbf4:	ldr	r0, [r5, #20]
   1cbf8:	bl	22b14 <__assert_fail@plt+0x115fc>
   1cbfc:	ldr	r0, [r5, #8]
   1cc00:	cmp	r0, #0
   1cc04:	beq	1cc18 <__assert_fail@plt+0xb700>
   1cc08:	ldr	r0, [r0, #8]
   1cc0c:	bl	22b14 <__assert_fail@plt+0x115fc>
   1cc10:	ldr	r0, [r5, #8]
   1cc14:	bl	22b14 <__assert_fail@plt+0x115fc>
   1cc18:	mov	r0, r5
   1cc1c:	bl	22b14 <__assert_fail@plt+0x115fc>
   1cc20:	add	r7, r7, #1
   1cc24:	ldr	r0, [r8, #124]	; 0x7c
   1cc28:	cmp	r7, r0
   1cc2c:	blt	1cbb4 <__assert_fail@plt+0xb69c>
   1cc30:	mov	r0, #0
   1cc34:	str	r0, [r8, #108]	; 0x6c
   1cc38:	str	r0, [r8, #124]	; 0x7c
   1cc3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cc40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc44:	add	fp, sp, #28
   1cc48:	sub	sp, sp, #204	; 0xcc
   1cc4c:	mov	r5, r3
   1cc50:	mov	r6, r2
   1cc54:	mov	r8, r1
   1cc58:	ldr	r4, [r0]
   1cc5c:	movw	r0, #16136	; 0x3f08
   1cc60:	movt	r0, #2
   1cc64:	vldr	d16, [r0]
   1cc68:	ldr	r0, [r0, #8]
   1cc6c:	str	r0, [fp, #-56]	; 0xffffffc8
   1cc70:	vstr	d16, [fp, #-64]	; 0xffffffc0
   1cc74:	add	r0, sp, #28
   1cc78:	bl	20fe4 <__assert_fail@plt+0xfacc>
   1cc7c:	mov	r7, #0
   1cc80:	ldr	r0, [fp, #8]
   1cc84:	cmp	r0, #0
   1cc88:	mov	r9, #0
   1cc8c:	beq	1ccb0 <__assert_fail@plt+0xb798>
   1cc90:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1cc94:	add	r0, r0, r0, lsl #1
   1cc98:	lsl	r0, r0, #3
   1cc9c:	bl	22624 <__assert_fail@plt+0x1110c>
   1cca0:	str	r0, [fp, #-56]	; 0xffffffc8
   1cca4:	cmp	r0, #0
   1cca8:	beq	1ceb4 <__assert_fail@plt+0xb99c>
   1ccac:	sub	r9, fp, #64	; 0x40
   1ccb0:	ldr	sl, [r4, #72]	; 0x48
   1ccb4:	str	r7, [fp, #-44]	; 0xffffffd4
   1ccb8:	str	r7, [fp, #-48]	; 0xffffffd0
   1ccbc:	str	r7, [fp, #-40]	; 0xffffffd8
   1ccc0:	add	r0, sp, #28
   1ccc4:	mov	r1, r6
   1ccc8:	bl	20ffc <__assert_fail@plt+0xfae4>
   1cccc:	cmp	r0, #0
   1ccd0:	beq	1cea4 <__assert_fail@plt+0xb98c>
   1ccd4:	str	r4, [sp, #20]
   1ccd8:	str	r8, [sp, #24]
   1ccdc:	add	r0, sp, #28
   1cce0:	bl	210d4 <__assert_fail@plt+0xfbbc>
   1cce4:	mov	r4, r0
   1cce8:	lsl	r2, r6, #3
   1ccec:	mov	r1, r5
   1ccf0:	bl	112a8 <memcpy@plt>
   1ccf4:	ldr	r8, [r5]
   1ccf8:	ldr	r0, [r5, #4]
   1ccfc:	str	r8, [fp, #-32]	; 0xffffffe0
   1cd00:	cmp	r8, r0
   1cd04:	bgt	1ce78 <__assert_fail@plt+0xb960>
   1cd08:	clz	r0, r6
   1cd0c:	lsr	r0, r0, #5
   1cd10:	clz	r1, r9
   1cd14:	lsr	r1, r1, #5
   1cd18:	orr	r0, r1, r0
   1cd1c:	str	r0, [sp, #16]
   1cd20:	ldr	r7, [sp, #24]
   1cd24:	str	r8, [sp]
   1cd28:	str	r6, [sp, #4]
   1cd2c:	ldr	r0, [sp, #20]
   1cd30:	mov	r1, r5
   1cd34:	mov	r2, r4
   1cd38:	mov	r3, sl
   1cd3c:	bl	210dc <__assert_fail@plt+0xfbc4>
   1cd40:	ldr	r0, [r5, #4]
   1cd44:	cmp	r8, r0
   1cd48:	ldreq	r0, [r7, #96]	; 0x60
   1cd4c:	cmpeq	sl, r0
   1cd50:	beq	1cd70 <__assert_fail@plt+0xb858>
   1cd54:	cmp	r9, #0
   1cd58:	beq	1cdd8 <__assert_fail@plt+0xb8c0>
   1cd5c:	sub	r0, fp, #48	; 0x30
   1cd60:	mov	r1, sl
   1cd64:	bl	1b788 <__assert_fail@plt+0xa270>
   1cd68:	cmp	r0, #0
   1cd6c:	beq	1cdd8 <__assert_fail@plt+0xb8c0>
   1cd70:	ldr	r0, [sp, #16]
   1cd74:	cmp	r0, #0
   1cd78:	bne	1ce78 <__assert_fail@plt+0xb960>
   1cd7c:	mov	r0, #0
   1cd80:	ldr	r1, [r5, r0, lsl #3]
   1cd84:	cmp	r1, #0
   1cd88:	blt	1cd9c <__assert_fail@plt+0xb884>
   1cd8c:	add	r1, r5, r0, lsl #3
   1cd90:	ldr	r1, [r1, #4]
   1cd94:	cmn	r1, #1
   1cd98:	beq	1cdac <__assert_fail@plt+0xb894>
   1cd9c:	add	r0, r0, #1
   1cda0:	cmp	r0, r6
   1cda4:	bcc	1cd80 <__assert_fail@plt+0xb868>
   1cda8:	b	1ce78 <__assert_fail@plt+0xb960>
   1cdac:	str	r4, [sp]
   1cdb0:	sub	r0, fp, #48	; 0x30
   1cdb4:	str	r0, [sp, #4]
   1cdb8:	mov	r0, r9
   1cdbc:	sub	r1, fp, #32
   1cdc0:	mov	r2, r6
   1cdc4:	mov	r3, r5
   1cdc8:	bl	21190 <__assert_fail@plt+0xfc78>
   1cdcc:	mov	sl, r0
   1cdd0:	cmn	r0, #1
   1cdd4:	ble	1ce78 <__assert_fail@plt+0xb960>
   1cdd8:	sub	r0, fp, #32
   1cddc:	stm	sp, {r0, sl}
   1cde0:	sub	r0, fp, #48	; 0x30
   1cde4:	str	r0, [sp, #8]
   1cde8:	str	r9, [sp, #12]
   1cdec:	mov	r0, r7
   1cdf0:	mov	r1, r6
   1cdf4:	mov	r2, r5
   1cdf8:	mov	r3, r4
   1cdfc:	bl	21248 <__assert_fail@plt+0xfd30>
   1ce00:	mov	sl, r0
   1ce04:	cmn	r0, #1
   1ce08:	ble	1ce20 <__assert_fail@plt+0xb908>
   1ce0c:	ldr	r0, [r5, #4]
   1ce10:	ldr	r8, [fp, #-32]	; 0xffffffe0
   1ce14:	cmp	r8, r0
   1ce18:	ble	1cd24 <__assert_fail@plt+0xb80c>
   1ce1c:	b	1ce78 <__assert_fail@plt+0xb960>
   1ce20:	cmn	sl, #2
   1ce24:	beq	1ce9c <__assert_fail@plt+0xb984>
   1ce28:	str	r4, [sp]
   1ce2c:	sub	r0, fp, #48	; 0x30
   1ce30:	str	r0, [sp, #4]
   1ce34:	mov	r0, r9
   1ce38:	sub	r1, fp, #32
   1ce3c:	mov	r2, r6
   1ce40:	mov	r3, r5
   1ce44:	bl	21190 <__assert_fail@plt+0xfc78>
   1ce48:	mov	sl, r0
   1ce4c:	cmn	r0, #1
   1ce50:	bgt	1ce0c <__assert_fail@plt+0xb8f4>
   1ce54:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ce58:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ce5c:	add	r0, sp, #28
   1ce60:	bl	21050 <__assert_fail@plt+0xfb38>
   1ce64:	mov	r0, r9
   1ce68:	bl	2106c <__assert_fail@plt+0xfb54>
   1ce6c:	mov	r0, #1
   1ce70:	sub	sp, fp, #28
   1ce74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce78:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ce7c:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ce80:	add	r0, sp, #28
   1ce84:	bl	21050 <__assert_fail@plt+0xfb38>
   1ce88:	mov	r0, r9
   1ce8c:	bl	2106c <__assert_fail@plt+0xfb54>
   1ce90:	mov	r0, #0
   1ce94:	sub	sp, fp, #28
   1ce98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce9c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1cea0:	bl	22b14 <__assert_fail@plt+0x115fc>
   1cea4:	add	r0, sp, #28
   1cea8:	bl	21050 <__assert_fail@plt+0xfb38>
   1ceac:	mov	r0, r9
   1ceb0:	bl	2106c <__assert_fail@plt+0xfb54>
   1ceb4:	mov	r0, #12
   1ceb8:	sub	sp, fp, #28
   1cebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cec0:	push	{r4, sl, fp, lr}
   1cec4:	add	fp, sp, #8
   1cec8:	mov	r4, r0
   1cecc:	bl	1cb98 <__assert_fail@plt+0xb680>
   1ced0:	ldr	r0, [r4, #132]	; 0x84
   1ced4:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ced8:	ldr	r0, [r4, #116]	; 0x74
   1cedc:	pop	{r4, sl, fp, lr}
   1cee0:	b	22b14 <__assert_fail@plt+0x115fc>
   1cee4:	push	{r4, r5, fp, lr}
   1cee8:	add	fp, sp, #8
   1ceec:	mov	r4, r0
   1cef0:	cmn	r1, #1
   1cef4:	ldrle	r0, [r4, #60]	; 0x3c
   1cef8:	pople	{r4, r5, fp, pc}
   1cefc:	ldr	r0, [r4, #48]	; 0x30
   1cf00:	cmp	r0, r1
   1cf04:	beq	1cfa4 <__assert_fail@plt+0xba8c>
   1cf08:	ldr	r0, [r4, #80]	; 0x50
   1cf0c:	cmp	r0, #2
   1cf10:	blt	1cf64 <__assert_fail@plt+0xba4c>
   1cf14:	ldr	r0, [r4, #8]
   1cf18:	b	1cf30 <__assert_fail@plt+0xba18>
   1cf1c:	sub	r2, r1, #1
   1cf20:	cmp	r1, #0
   1cf24:	mov	r1, r2
   1cf28:	ldrle	r0, [r4, #60]	; 0x3c
   1cf2c:	pople	{r4, r5, fp, pc}
   1cf30:	ldr	r5, [r0, r1, lsl #2]
   1cf34:	cmn	r5, #1
   1cf38:	beq	1cf1c <__assert_fail@plt+0xba04>
   1cf3c:	ldrb	r0, [r4, #78]	; 0x4e
   1cf40:	cmp	r0, #0
   1cf44:	beq	1cf88 <__assert_fail@plt+0xba70>
   1cf48:	mov	r0, r5
   1cf4c:	bl	11410 <iswalnum@plt>
   1cf50:	mov	r1, r0
   1cf54:	mov	r0, #1
   1cf58:	cmp	r5, #95	; 0x5f
   1cf5c:	bne	1cf80 <__assert_fail@plt+0xba68>
   1cf60:	b	1cfa0 <__assert_fail@plt+0xba88>
   1cf64:	ldr	r2, [r4, #4]
   1cf68:	ldr	r0, [r4, #68]	; 0x44
   1cf6c:	ldrb	r5, [r2, r1]
   1cf70:	mov	r1, r5
   1cf74:	bl	1d05c <__assert_fail@plt+0xbb44>
   1cf78:	mov	r1, r0
   1cf7c:	mov	r0, #1
   1cf80:	cmp	r1, #0
   1cf84:	bne	1cfa0 <__assert_fail@plt+0xba88>
   1cf88:	mov	r0, #0
   1cf8c:	cmp	r5, #10
   1cf90:	popne	{r4, r5, fp, pc}
   1cf94:	ldrb	r0, [r4, #77]	; 0x4d
   1cf98:	cmp	r0, #0
   1cf9c:	movwne	r0, #2
   1cfa0:	pop	{r4, r5, fp, pc}
   1cfa4:	and	r0, r2, #2
   1cfa8:	eor	r0, r0, #10
   1cfac:	pop	{r4, r5, fp, pc}
   1cfb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfb4:	add	fp, sp, #28
   1cfb8:	sub	sp, sp, #12
   1cfbc:	str	r2, [sp, #4]
   1cfc0:	mov	sl, r1
   1cfc4:	mov	r7, r0
   1cfc8:	ldr	r0, [r0, #24]
   1cfcc:	ldr	r1, [r7, #32]
   1cfd0:	add	r5, r1, r0
   1cfd4:	mvn	r1, #0
   1cfd8:	cmp	r5, sl
   1cfdc:	bge	1d048 <__assert_fail@plt+0xbb30>
   1cfe0:	add	r4, r7, #16
   1cfe4:	b	1d008 <__assert_fail@plt+0xbaf0>
   1cfe8:	mov	r1, #0
   1cfec:	cmp	r6, #0
   1cff0:	cmpne	r0, #0
   1cff4:	ldrne	r0, [r7]
   1cff8:	ldrbne	r1, [r0, r5]
   1cffc:	stm	r4, {r8, r9}
   1d000:	mov	r0, #1
   1d004:	b	1d03c <__assert_fail@plt+0xbb24>
   1d008:	ldr	r0, [r7]
   1d00c:	ldr	r2, [r7, #44]	; 0x2c
   1d010:	add	r1, r0, r5
   1d014:	sub	r6, r2, r5
   1d018:	ldm	r4, {r8, r9}
   1d01c:	add	r0, sp, #8
   1d020:	mov	r2, r6
   1d024:	mov	r3, r4
   1d028:	bl	22bc4 <__assert_fail@plt+0x116ac>
   1d02c:	sub	r1, r0, #1
   1d030:	cmn	r1, #3
   1d034:	bcs	1cfe8 <__assert_fail@plt+0xbad0>
   1d038:	ldr	r1, [sp, #8]
   1d03c:	add	r5, r0, r5
   1d040:	cmp	r5, sl
   1d044:	blt	1d008 <__assert_fail@plt+0xbaf0>
   1d048:	ldr	r0, [sp, #4]
   1d04c:	str	r1, [r0]
   1d050:	mov	r0, r5
   1d054:	sub	sp, fp, #28
   1d058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d05c:	asr	r2, r1, #31
   1d060:	add	r2, r1, r2, lsr #27
   1d064:	asr	r2, r2, #5
   1d068:	ldr	r0, [r0, r2, lsl #2]
   1d06c:	and	r1, r1, #31
   1d070:	mov	r2, #1
   1d074:	and	r0, r0, r2, lsl r1
   1d078:	cmp	r0, #0
   1d07c:	movwne	r0, #1
   1d080:	bx	lr
   1d084:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d088:	add	fp, sp, #24
   1d08c:	mov	r6, r0
   1d090:	ldr	r0, [r1, #4]
   1d094:	cmp	r0, #1
   1d098:	blt	1d108 <__assert_fail@plt+0xbbf0>
   1d09c:	mov	r8, r2
   1d0a0:	mov	r5, r1
   1d0a4:	ldr	r7, [r6, #84]	; 0x54
   1d0a8:	mov	r4, #0
   1d0ac:	mov	r9, #1
   1d0b0:	ldr	r0, [r5, #8]
   1d0b4:	ldr	r1, [r0, r4, lsl #2]
   1d0b8:	ldr	r0, [r7]
   1d0bc:	add	r2, r0, r1, lsl #3
   1d0c0:	ldrb	r2, [r2, #4]
   1d0c4:	cmp	r2, #8
   1d0c8:	bne	1d0f8 <__assert_fail@plt+0xbbe0>
   1d0cc:	ldr	r0, [r0, r1, lsl #3]
   1d0d0:	cmp	r0, #31
   1d0d4:	bgt	1d0f8 <__assert_fail@plt+0xbbe0>
   1d0d8:	ldr	r2, [r7, #80]	; 0x50
   1d0dc:	tst	r2, r9, lsl r0
   1d0e0:	beq	1d0f8 <__assert_fail@plt+0xbbe0>
   1d0e4:	mov	r0, r6
   1d0e8:	mov	r2, r8
   1d0ec:	bl	1d74c <__assert_fail@plt+0xc234>
   1d0f0:	cmp	r0, #0
   1d0f4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d0f8:	add	r4, r4, #1
   1d0fc:	ldr	r0, [r5, #4]
   1d100:	cmp	r4, r0
   1d104:	blt	1d0b0 <__assert_fail@plt+0xbb98>
   1d108:	mov	r0, #0
   1d10c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d114:	add	fp, sp, #28
   1d118:	sub	sp, sp, #52	; 0x34
   1d11c:	mov	r5, r0
   1d120:	ldr	r0, [r1, #4]
   1d124:	cmp	r0, #1
   1d128:	blt	1d3e8 <__assert_fail@plt+0xbed0>
   1d12c:	mov	r8, r1
   1d130:	ldr	r9, [r5, #84]	; 0x54
   1d134:	ldr	r0, [r5, #40]	; 0x28
   1d138:	str	r0, [sp, #32]
   1d13c:	mov	sl, #0
   1d140:	str	r1, [sp, #4]
   1d144:	str	r9, [sp, #16]
   1d148:	ldr	r0, [r8, #8]
   1d14c:	ldr	r4, [r0, sl, lsl #2]
   1d150:	ldr	r0, [r9]
   1d154:	add	r0, r0, r4, lsl #3
   1d158:	ldr	r6, [r0, #4]
   1d15c:	uxtb	r0, r6
   1d160:	cmp	r0, #4
   1d164:	bne	1d3d8 <__assert_fail@plt+0xbec0>
   1d168:	movw	r0, #65280	; 0xff00
   1d16c:	movt	r0, #3
   1d170:	tst	r6, r0
   1d174:	beq	1d1c8 <__assert_fail@plt+0xbcb0>
   1d178:	ldr	r2, [r5, #88]	; 0x58
   1d17c:	mov	r0, r5
   1d180:	ldr	r1, [sp, #32]
   1d184:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1d188:	and	r1, r0, #1
   1d18c:	tst	r6, #1024	; 0x400
   1d190:	beq	1d19c <__assert_fail@plt+0xbc84>
   1d194:	cmp	r1, #0
   1d198:	beq	1d3d8 <__assert_fail@plt+0xbec0>
   1d19c:	tst	r6, #2048	; 0x800
   1d1a0:	cmpne	r1, #0
   1d1a4:	bne	1d3d8 <__assert_fail@plt+0xbec0>
   1d1a8:	tst	r6, #8192	; 0x2000
   1d1ac:	beq	1d1b8 <__assert_fail@plt+0xbca0>
   1d1b0:	ands	r1, r0, #2
   1d1b4:	beq	1d3d8 <__assert_fail@plt+0xbec0>
   1d1b8:	tst	r6, #32768	; 0x8000
   1d1bc:	beq	1d1c8 <__assert_fail@plt+0xbcb0>
   1d1c0:	ands	r0, r0, #8
   1d1c4:	beq	1d3d8 <__assert_fail@plt+0xbec0>
   1d1c8:	ldr	r6, [r5, #108]	; 0x6c
   1d1cc:	mov	r0, r5
   1d1d0:	mov	r1, r4
   1d1d4:	ldr	r2, [sp, #32]
   1d1d8:	bl	1d7d8 <__assert_fail@plt+0xc2c0>
   1d1dc:	str	r0, [fp, #-32]	; 0xffffffe0
   1d1e0:	cmp	r0, #0
   1d1e4:	bne	1d3f0 <__assert_fail@plt+0xbed8>
   1d1e8:	ldr	r0, [r5, #108]	; 0x6c
   1d1ec:	cmp	r6, r0
   1d1f0:	bge	1d3d8 <__assert_fail@plt+0xbec0>
   1d1f4:	add	r0, r6, r6, lsl #1
   1d1f8:	lsl	r7, r0, #3
   1d1fc:	str	r4, [sp, #8]
   1d200:	ldr	r0, [r5, #116]	; 0x74
   1d204:	ldr	r1, [r0, r7]
   1d208:	cmp	r1, r4
   1d20c:	bne	1d3c4 <__assert_fail@plt+0xbeac>
   1d210:	add	r0, r0, r7
   1d214:	ldr	r1, [r0, #4]
   1d218:	ldr	r2, [sp, #32]
   1d21c:	cmp	r1, r2
   1d220:	bne	1d3c4 <__assert_fail@plt+0xbeac>
   1d224:	ldr	r2, [r0, #8]
   1d228:	ldr	r3, [r0, #12]
   1d22c:	ldr	r0, [r9, #24]
   1d230:	str	r0, [sp, #28]
   1d234:	cmp	r3, r2
   1d238:	bne	1d250 <__assert_fail@plt+0xbd38>
   1d23c:	ldr	r0, [r9, #20]
   1d240:	add	r1, r4, r4, lsl #1
   1d244:	add	r0, r0, r1, lsl #2
   1d248:	ldr	r0, [r0, #8]
   1d24c:	b	1d258 <__assert_fail@plt+0xbd40>
   1d250:	ldr	r0, [r9, #12]
   1d254:	add	r0, r0, r4, lsl #2
   1d258:	ldr	r0, [r0]
   1d25c:	add	r9, r0, r0, lsl #1
   1d260:	ldr	r4, [sp, #32]
   1d264:	str	r3, [sp, #20]
   1d268:	add	r0, r3, r4
   1d26c:	str	r2, [sp, #24]
   1d270:	sub	r8, r0, r2
   1d274:	sub	r1, r8, #1
   1d278:	ldr	r2, [r5, #88]	; 0x58
   1d27c:	mov	r0, r5
   1d280:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1d284:	mov	r3, r0
   1d288:	ldr	r0, [r5, #100]	; 0x64
   1d28c:	ldr	r1, [r0, r4, lsl #2]
   1d290:	ldr	r0, [r0, r8, lsl #2]
   1d294:	cmp	r1, #0
   1d298:	ldrne	r1, [r1, #8]
   1d29c:	moveq	r1, #0
   1d2a0:	str	r1, [sp, #12]
   1d2a4:	add	r4, sp, #36	; 0x24
   1d2a8:	ldr	r1, [sp, #28]
   1d2ac:	add	r2, r1, r9, lsl #2
   1d2b0:	cmp	r0, #0
   1d2b4:	str	r2, [sp, #28]
   1d2b8:	beq	1d328 <__assert_fail@plt+0xbe10>
   1d2bc:	mov	r9, r3
   1d2c0:	ldr	r1, [r0, #40]	; 0x28
   1d2c4:	mov	r0, r4
   1d2c8:	bl	1db88 <__assert_fail@plt+0xc670>
   1d2cc:	str	r0, [fp, #-32]	; 0xffffffe0
   1d2d0:	cmp	r0, #0
   1d2d4:	ldr	r1, [sp, #16]
   1d2d8:	bne	1d3fc <__assert_fail@plt+0xbee4>
   1d2dc:	sub	r0, fp, #32
   1d2e0:	mov	r2, r4
   1d2e4:	mov	r3, r9
   1d2e8:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   1d2ec:	ldr	r1, [r5, #100]	; 0x64
   1d2f0:	str	r0, [r1, r8, lsl #2]
   1d2f4:	ldr	r0, [sp, #44]	; 0x2c
   1d2f8:	bl	22b14 <__assert_fail@plt+0x115fc>
   1d2fc:	ldr	r0, [r5, #100]	; 0x64
   1d300:	ldr	r0, [r0, r8, lsl #2]
   1d304:	cmp	r0, #0
   1d308:	bne	1d318 <__assert_fail@plt+0xbe00>
   1d30c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d310:	cmp	r0, #0
   1d314:	bne	1d3f0 <__assert_fail@plt+0xbed8>
   1d318:	ldr	r8, [sp, #4]
   1d31c:	ldr	r4, [sp, #8]
   1d320:	ldr	r9, [sp, #16]
   1d324:	b	1d364 <__assert_fail@plt+0xbe4c>
   1d328:	sub	r0, fp, #32
   1d32c:	ldr	r9, [sp, #16]
   1d330:	mov	r1, r9
   1d334:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   1d338:	ldr	r1, [r5, #100]	; 0x64
   1d33c:	str	r0, [r1, r8, lsl #2]
   1d340:	ldr	r0, [r5, #100]	; 0x64
   1d344:	ldr	r0, [r0, r8, lsl #2]
   1d348:	cmp	r0, #0
   1d34c:	ldr	r8, [sp, #4]
   1d350:	ldr	r4, [sp, #8]
   1d354:	bne	1d364 <__assert_fail@plt+0xbe4c>
   1d358:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d35c:	cmp	r0, #0
   1d360:	bne	1d3f0 <__assert_fail@plt+0xbed8>
   1d364:	ldr	r0, [sp, #24]
   1d368:	ldr	r1, [sp, #20]
   1d36c:	cmp	r1, r0
   1d370:	bne	1d3c4 <__assert_fail@plt+0xbeac>
   1d374:	ldr	r0, [r5, #100]	; 0x64
   1d378:	ldr	r1, [sp, #32]
   1d37c:	ldr	r0, [r0, r1, lsl #2]
   1d380:	ldr	r0, [r0, #8]
   1d384:	ldr	r1, [sp, #12]
   1d388:	cmp	r0, r1
   1d38c:	ble	1d3c4 <__assert_fail@plt+0xbeac>
   1d390:	mov	r0, r5
   1d394:	ldr	r1, [sp, #28]
   1d398:	ldr	r2, [sp, #32]
   1d39c:	bl	1d084 <__assert_fail@plt+0xbb6c>
   1d3a0:	str	r0, [fp, #-32]	; 0xffffffe0
   1d3a4:	cmp	r0, #0
   1d3a8:	bne	1d3f0 <__assert_fail@plt+0xbed8>
   1d3ac:	mov	r0, r5
   1d3b0:	ldr	r1, [sp, #28]
   1d3b4:	bl	1d110 <__assert_fail@plt+0xbbf8>
   1d3b8:	str	r0, [fp, #-32]	; 0xffffffe0
   1d3bc:	cmp	r0, #0
   1d3c0:	bne	1d3f0 <__assert_fail@plt+0xbed8>
   1d3c4:	add	r7, r7, #24
   1d3c8:	add	r6, r6, #1
   1d3cc:	ldr	r0, [r5, #108]	; 0x6c
   1d3d0:	cmp	r6, r0
   1d3d4:	blt	1d200 <__assert_fail@plt+0xbce8>
   1d3d8:	ldr	r0, [r8, #4]
   1d3dc:	add	sl, sl, #1
   1d3e0:	cmp	sl, r0
   1d3e4:	blt	1d148 <__assert_fail@plt+0xbc30>
   1d3e8:	mov	r0, #0
   1d3ec:	str	r0, [fp, #-32]	; 0xffffffe0
   1d3f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d3f4:	sub	sp, fp, #28
   1d3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3fc:	ldr	r0, [sp, #44]	; 0x2c
   1d400:	bl	22b14 <__assert_fail@plt+0x115fc>
   1d404:	b	1d3f0 <__assert_fail@plt+0xbed8>
   1d408:	push	{r4, r5, fp, lr}
   1d40c:	add	fp, sp, #8
   1d410:	mov	r4, r0
   1d414:	ldr	r0, [r0, #36]	; 0x24
   1d418:	mov	r5, #12
   1d41c:	cmn	r0, #-536870910	; 0xe0000002
   1d420:	bhi	1d4d4 <__assert_fail@plt+0xbfbc>
   1d424:	ldr	r2, [r4, #48]	; 0x30
   1d428:	cmp	r2, r0, lsl #1
   1d42c:	lslge	r2, r0, #1
   1d430:	cmp	r2, r1
   1d434:	movle	r2, r1
   1d438:	mov	r0, r4
   1d43c:	mov	r1, r2
   1d440:	bl	16c04 <__assert_fail@plt+0x56ec>
   1d444:	cmp	r0, #0
   1d448:	popne	{r4, r5, fp, pc}
   1d44c:	ldr	r0, [r4, #100]	; 0x64
   1d450:	cmp	r0, #0
   1d454:	beq	1d474 <__assert_fail@plt+0xbf5c>
   1d458:	ldr	r1, [r4, #36]	; 0x24
   1d45c:	mov	r2, #4
   1d460:	add	r1, r2, r1, lsl #2
   1d464:	bl	22654 <__assert_fail@plt+0x1113c>
   1d468:	cmp	r0, #0
   1d46c:	beq	1d4d4 <__assert_fail@plt+0xbfbc>
   1d470:	str	r0, [r4, #100]	; 0x64
   1d474:	ldr	r0, [r4, #80]	; 0x50
   1d478:	ldrb	r1, [r4, #72]	; 0x48
   1d47c:	cmp	r1, #0
   1d480:	beq	1d4a0 <__assert_fail@plt+0xbf88>
   1d484:	cmp	r0, #2
   1d488:	blt	1d4b4 <__assert_fail@plt+0xbf9c>
   1d48c:	mov	r0, r4
   1d490:	bl	16ca8 <__assert_fail@plt+0x5790>
   1d494:	cmp	r0, #0
   1d498:	popne	{r4, r5, fp, pc}
   1d49c:	b	1d4d0 <__assert_fail@plt+0xbfb8>
   1d4a0:	cmp	r0, #2
   1d4a4:	blt	1d4c0 <__assert_fail@plt+0xbfa8>
   1d4a8:	mov	r0, r4
   1d4ac:	bl	172dc <__assert_fail@plt+0x5dc4>
   1d4b0:	b	1d4d0 <__assert_fail@plt+0xbfb8>
   1d4b4:	mov	r0, r4
   1d4b8:	bl	17270 <__assert_fail@plt+0x5d58>
   1d4bc:	b	1d4d0 <__assert_fail@plt+0xbfb8>
   1d4c0:	ldr	r0, [r4, #64]	; 0x40
   1d4c4:	cmp	r0, #0
   1d4c8:	movne	r0, r4
   1d4cc:	blne	1746c <__assert_fail@plt+0x5f54>
   1d4d0:	mov	r5, #0
   1d4d4:	mov	r0, r5
   1d4d8:	pop	{r4, r5, fp, pc}
   1d4dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d4e0:	add	fp, sp, #24
   1d4e4:	mov	r6, r2
   1d4e8:	mov	r4, r1
   1d4ec:	mov	r5, r0
   1d4f0:	ldrb	r0, [r2, #52]	; 0x34
   1d4f4:	tst	r0, #32
   1d4f8:	bne	1d570 <__assert_fail@plt+0xc058>
   1d4fc:	ldr	r0, [r4, #4]
   1d500:	ldr	r1, [r4, #40]	; 0x28
   1d504:	add	r2, r1, #1
   1d508:	str	r2, [r4, #40]	; 0x28
   1d50c:	ldrb	r7, [r0, r1]
   1d510:	ldr	r0, [r6, #44]	; 0x2c
   1d514:	cmp	r0, #0
   1d518:	ldrne	r0, [r0, r7, lsl #2]
   1d51c:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d520:	ldr	r8, [r6, #48]	; 0x30
   1d524:	cmp	r8, #0
   1d528:	bne	1d550 <__assert_fail@plt+0xc038>
   1d52c:	ldr	r0, [r4, #84]	; 0x54
   1d530:	mov	r1, r6
   1d534:	bl	1f334 <__assert_fail@plt+0xde1c>
   1d538:	cmp	r0, #0
   1d53c:	bne	1d510 <__assert_fail@plt+0xbff8>
   1d540:	mov	r0, #12
   1d544:	str	r0, [r5]
   1d548:	mov	r0, #0
   1d54c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d550:	ldr	r0, [r4, #40]	; 0x28
   1d554:	ldr	r2, [r4, #88]	; 0x58
   1d558:	sub	r1, r0, #1
   1d55c:	mov	r0, r4
   1d560:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1d564:	bfi	r7, r0, #8, #1
   1d568:	ldr	r0, [r8, r7, lsl #2]
   1d56c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d570:	mov	r0, r4
   1d574:	mov	r1, r6
   1d578:	bl	1f170 <__assert_fail@plt+0xdc58>
   1d57c:	str	r0, [r5]
   1d580:	cmp	r0, #0
   1d584:	beq	1d4fc <__assert_fail@plt+0xbfe4>
   1d588:	b	1d548 <__assert_fail@plt+0xc030>
   1d58c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d590:	add	fp, sp, #24
   1d594:	sub	sp, sp, #16
   1d598:	mov	r7, r2
   1d59c:	mov	r4, r1
   1d5a0:	mov	r8, r0
   1d5a4:	ldr	r5, [r1, #40]	; 0x28
   1d5a8:	ldr	r6, [r1, #84]	; 0x54
   1d5ac:	ldr	r0, [r1, #100]	; 0x64
   1d5b0:	ldr	r1, [r1, #104]	; 0x68
   1d5b4:	cmp	r5, r1
   1d5b8:	ble	1d5c8 <__assert_fail@plt+0xc0b0>
   1d5bc:	str	r7, [r0, r5, lsl #2]
   1d5c0:	str	r5, [r4, #104]	; 0x68
   1d5c4:	b	1d664 <__assert_fail@plt+0xc14c>
   1d5c8:	ldr	r1, [r0, r5, lsl #2]
   1d5cc:	cmp	r1, #0
   1d5d0:	beq	1d604 <__assert_fail@plt+0xc0ec>
   1d5d4:	ldr	r0, [r0, r5, lsl #2]
   1d5d8:	ldr	r2, [r0, #40]	; 0x28
   1d5dc:	cmp	r7, #0
   1d5e0:	beq	1d60c <__assert_fail@plt+0xc0f4>
   1d5e4:	ldr	r9, [r7, #40]	; 0x28
   1d5e8:	mov	r0, sp
   1d5ec:	mov	r1, r9
   1d5f0:	bl	1db88 <__assert_fail@plt+0xc670>
   1d5f4:	str	r0, [r8]
   1d5f8:	cmp	r0, #0
   1d5fc:	beq	1d620 <__assert_fail@plt+0xc108>
   1d600:	b	1d6d0 <__assert_fail@plt+0xc1b8>
   1d604:	str	r7, [r0, r5, lsl #2]
   1d608:	b	1d664 <__assert_fail@plt+0xc14c>
   1d60c:	vldr	d16, [r2]
   1d610:	ldr	r0, [r2, #8]
   1d614:	str	r0, [sp, #8]
   1d618:	vstr	d16, [sp]
   1d61c:	mov	r9, #0
   1d620:	ldr	r0, [r4, #40]	; 0x28
   1d624:	ldr	r2, [r4, #88]	; 0x58
   1d628:	sub	r1, r0, #1
   1d62c:	mov	r0, r4
   1d630:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1d634:	mov	r3, r0
   1d638:	mov	r2, sp
   1d63c:	mov	r0, r8
   1d640:	mov	r1, r6
   1d644:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   1d648:	mov	r7, r0
   1d64c:	ldr	r0, [r4, #100]	; 0x64
   1d650:	str	r7, [r0, r5, lsl #2]
   1d654:	cmp	r9, #0
   1d658:	beq	1d664 <__assert_fail@plt+0xc14c>
   1d65c:	ldr	r0, [sp, #8]
   1d660:	bl	22b14 <__assert_fail@plt+0x115fc>
   1d664:	cmp	r7, #0
   1d668:	ldrne	r0, [r6, #76]	; 0x4c
   1d66c:	cmpne	r0, #0
   1d670:	bne	1d680 <__assert_fail@plt+0xc168>
   1d674:	mov	r0, r7
   1d678:	sub	sp, fp, #24
   1d67c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d680:	add	r6, r7, #4
   1d684:	mov	r0, r4
   1d688:	mov	r1, r6
   1d68c:	mov	r2, r5
   1d690:	bl	1d084 <__assert_fail@plt+0xbb6c>
   1d694:	str	r0, [r8]
   1d698:	cmp	r0, #0
   1d69c:	bne	1d6d0 <__assert_fail@plt+0xc1b8>
   1d6a0:	ldrb	r0, [r7, #52]	; 0x34
   1d6a4:	tst	r0, #64	; 0x40
   1d6a8:	beq	1d674 <__assert_fail@plt+0xc15c>
   1d6ac:	mov	r0, r4
   1d6b0:	mov	r1, r6
   1d6b4:	bl	1d110 <__assert_fail@plt+0xbbf8>
   1d6b8:	str	r0, [r8]
   1d6bc:	cmp	r0, #0
   1d6c0:	mov	r7, #0
   1d6c4:	ldreq	r0, [r4, #100]	; 0x64
   1d6c8:	ldreq	r7, [r0, r5, lsl #2]
   1d6cc:	b	1d674 <__assert_fail@plt+0xc15c>
   1d6d0:	mov	r7, #0
   1d6d4:	b	1d674 <__assert_fail@plt+0xc15c>
   1d6d8:	push	{r4, r5, r6, sl, fp, lr}
   1d6dc:	add	fp, sp, #16
   1d6e0:	mov	r4, r1
   1d6e4:	mov	r6, r0
   1d6e8:	b	1d70c <__assert_fail@plt+0xc1f4>
   1d6ec:	mov	r0, r6
   1d6f0:	mov	r1, r4
   1d6f4:	mov	r2, #0
   1d6f8:	bl	1d58c <__assert_fail@plt+0xc074>
   1d6fc:	cmp	r0, #0
   1d700:	ldreq	r1, [r6]
   1d704:	cmpeq	r1, #0
   1d708:	popne	{r4, r5, r6, sl, fp, pc}
   1d70c:	ldr	r1, [r4, #40]	; 0x28
   1d710:	ldr	r0, [r4, #104]	; 0x68
   1d714:	cmp	r1, r0
   1d718:	movge	r0, #0
   1d71c:	popge	{r4, r5, r6, sl, fp, pc}
   1d720:	add	r2, r1, #1
   1d724:	ldr	r3, [r4, #40]	; 0x28
   1d728:	ldr	r5, [r4, #100]	; 0x64
   1d72c:	add	r3, r3, #1
   1d730:	str	r3, [r4, #40]	; 0x28
   1d734:	add	r1, r5, r1, lsl #2
   1d738:	ldr	r1, [r1, #4]
   1d73c:	cmp	r1, #0
   1d740:	mov	r1, r2
   1d744:	beq	1d714 <__assert_fail@plt+0xc1fc>
   1d748:	b	1d6ec <__assert_fail@plt+0xc1d4>
   1d74c:	push	{r4, r5, r6, r7, fp, lr}
   1d750:	add	fp, sp, #16
   1d754:	mov	r4, r2
   1d758:	mov	r6, r1
   1d75c:	mov	r5, r0
   1d760:	ldr	r0, [r0, #124]	; 0x7c
   1d764:	ldr	r7, [r5, #128]	; 0x80
   1d768:	cmp	r0, r7
   1d76c:	beq	1d7b4 <__assert_fail@plt+0xc29c>
   1d770:	mov	r0, #1
   1d774:	mov	r1, #24
   1d778:	bl	225d0 <__assert_fail@plt+0x110b8>
   1d77c:	ldr	r1, [r5, #124]	; 0x7c
   1d780:	ldr	r2, [r5, #132]	; 0x84
   1d784:	str	r0, [r2, r1, lsl #2]
   1d788:	ldr	r0, [r5, #132]	; 0x84
   1d78c:	ldr	r0, [r0, r1, lsl #2]
   1d790:	cmp	r0, #0
   1d794:	strne	r6, [r0, #4]
   1d798:	addne	r1, r1, #1
   1d79c:	strne	r1, [r5, #124]	; 0x7c
   1d7a0:	strne	r4, [r0]
   1d7a4:	movne	r0, #0
   1d7a8:	popne	{r4, r5, r6, r7, fp, pc}
   1d7ac:	mov	r0, #12
   1d7b0:	pop	{r4, r5, r6, r7, fp, pc}
   1d7b4:	ldr	r0, [r5, #132]	; 0x84
   1d7b8:	lsl	r1, r7, #3
   1d7bc:	bl	22654 <__assert_fail@plt+0x1113c>
   1d7c0:	cmp	r0, #0
   1d7c4:	beq	1d7ac <__assert_fail@plt+0xc294>
   1d7c8:	lsl	r1, r7, #1
   1d7cc:	str	r1, [r5, #128]	; 0x80
   1d7d0:	str	r0, [r5, #132]	; 0x84
   1d7d4:	b	1d770 <__assert_fail@plt+0xc258>
   1d7d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7dc:	add	fp, sp, #28
   1d7e0:	sub	sp, sp, #52	; 0x34
   1d7e4:	str	r1, [sp, #36]	; 0x24
   1d7e8:	mov	r4, r0
   1d7ec:	ldr	r5, [r0, #4]
   1d7f0:	ldr	r6, [r0, #84]	; 0x54
   1d7f4:	str	r2, [fp, #-36]	; 0xffffffdc
   1d7f8:	mov	r1, r2
   1d7fc:	bl	1ddb8 <__assert_fail@plt+0xc8a0>
   1d800:	cmn	r0, #1
   1d804:	beq	1d834 <__assert_fail@plt+0xc31c>
   1d808:	ldr	r1, [r4, #116]	; 0x74
   1d80c:	add	r0, r0, r0, lsl #1
   1d810:	add	r0, r1, r0, lsl #3
   1d814:	ldr	r2, [sp, #36]	; 0x24
   1d818:	ldr	r1, [r0]
   1d81c:	cmp	r1, r2
   1d820:	beq	1db68 <__assert_fail@plt+0xc650>
   1d824:	ldrb	r1, [r0, #20]
   1d828:	add	r0, r0, #24
   1d82c:	cmp	r1, #0
   1d830:	bne	1d818 <__assert_fail@plt+0xc300>
   1d834:	ldr	r0, [r4, #124]	; 0x7c
   1d838:	cmp	r0, #1
   1d83c:	blt	1db68 <__assert_fail@plt+0xc650>
   1d840:	mov	ip, r6
   1d844:	ldr	r0, [r6]
   1d848:	ldr	r1, [sp, #36]	; 0x24
   1d84c:	ldr	r2, [r0, r1, lsl #3]
   1d850:	mov	r6, #0
   1d854:	str	r4, [sp, #28]
   1d858:	mov	r3, r5
   1d85c:	str	ip, [sp, #24]
   1d860:	str	r2, [sp, #20]
   1d864:	b	1da10 <__assert_fail@plt+0xc4f8>
   1d868:	ldr	ip, [sp, #24]
   1d86c:	ldr	r2, [sp, #20]
   1d870:	b	1d8b0 <__assert_fail@plt+0xc398>
   1d874:	ldr	r0, [r4, #48]	; 0x30
   1d878:	cmp	r6, r0
   1d87c:	bge	1db54 <__assert_fail@plt+0xc63c>
   1d880:	mov	r9, r6
   1d884:	add	r1, r6, #1
   1d888:	mov	r0, r4
   1d88c:	bl	1d408 <__assert_fail@plt+0xbef0>
   1d890:	cmp	r0, #0
   1d894:	bne	1db78 <__assert_fail@plt+0xc660>
   1d898:	ldr	r3, [r4, #4]
   1d89c:	ldr	r7, [sp, #32]
   1d8a0:	mov	r6, r9
   1d8a4:	ldr	ip, [sp, #24]
   1d8a8:	ldr	r2, [sp, #20]
   1d8ac:	b	1d8c8 <__assert_fail@plt+0xc3b0>
   1d8b0:	ldr	r0, [r7]
   1d8b4:	cmp	r5, r0
   1d8b8:	ble	1d8e0 <__assert_fail@plt+0xc3c8>
   1d8bc:	ldr	r0, [r4, #28]
   1d8c0:	cmp	r6, r0
   1d8c4:	bge	1d874 <__assert_fail@plt+0xc35c>
   1d8c8:	ldrb	r0, [r3, r6]
   1d8cc:	add	r1, r3, r5
   1d8d0:	ldrb	r1, [r1, #-1]
   1d8d4:	cmp	r0, r1
   1d8d8:	bne	1db54 <__assert_fail@plt+0xc63c>
   1d8dc:	add	r6, r6, #1
   1d8e0:	ldr	r0, [r4, #100]	; 0x64
   1d8e4:	ldr	r0, [r0, r5, lsl #2]
   1d8e8:	cmp	r0, #0
   1d8ec:	beq	1d9f4 <__assert_fail@plt+0xc4dc>
   1d8f0:	mov	r9, r6
   1d8f4:	mov	sl, r3
   1d8f8:	add	r1, r0, #4
   1d8fc:	mov	r0, ip
   1d900:	mov	r3, #9
   1d904:	bl	1df70 <__assert_fail@plt+0xca58>
   1d908:	cmn	r0, #1
   1d90c:	beq	1d9e0 <__assert_fail@plt+0xc4c8>
   1d910:	mov	r4, r0
   1d914:	ldr	r1, [sp, #32]
   1d918:	ldr	r0, [r1, #8]
   1d91c:	cmp	r0, #0
   1d920:	bne	1d94c <__assert_fail@plt+0xc434>
   1d924:	ldr	r0, [r1]
   1d928:	sub	r0, r5, r0
   1d92c:	add	r1, r0, #1
   1d930:	mov	r8, #12
   1d934:	mov	r0, #12
   1d938:	bl	225d0 <__assert_fail@plt+0x110b8>
   1d93c:	ldr	r1, [sp, #32]
   1d940:	str	r0, [r1, #8]
   1d944:	cmp	r0, #0
   1d948:	beq	1db6c <__assert_fail@plt+0xc654>
   1d94c:	ldr	r3, [r1]
   1d950:	ldr	r2, [r1, #4]
   1d954:	ldr	r1, [r1, #8]
   1d958:	stm	sp, {r4, r5}
   1d95c:	mov	r0, #9
   1d960:	str	r0, [sp, #8]
   1d964:	ldr	r0, [sp, #28]
   1d968:	bl	1dfc4 <__assert_fail@plt+0xcaac>
   1d96c:	ldr	r7, [sp, #32]
   1d970:	cmp	r0, #1
   1d974:	mov	r3, sl
   1d978:	mov	r6, r9
   1d97c:	ldr	ip, [sp, #24]
   1d980:	ldr	r2, [sp, #20]
   1d984:	beq	1d9f4 <__assert_fail@plt+0xc4dc>
   1d988:	mov	r8, r0
   1d98c:	cmp	r0, #0
   1d990:	bne	1db6c <__assert_fail@plt+0xc654>
   1d994:	mov	r0, r7
   1d998:	mov	r1, r4
   1d99c:	mov	r2, r5
   1d9a0:	bl	1e398 <__assert_fail@plt+0xce80>
   1d9a4:	cmp	r0, #0
   1d9a8:	beq	1db80 <__assert_fail@plt+0xc668>
   1d9ac:	mov	r2, r0
   1d9b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d9b4:	str	r0, [sp]
   1d9b8:	ldr	r4, [sp, #28]
   1d9bc:	mov	r0, r4
   1d9c0:	mov	r1, r7
   1d9c4:	ldr	r3, [sp, #36]	; 0x24
   1d9c8:	bl	1ded8 <__assert_fail@plt+0xc9c0>
   1d9cc:	cmp	r0, #1
   1d9d0:	bhi	1db78 <__assert_fail@plt+0xc660>
   1d9d4:	ldr	r3, [r4, #4]
   1d9d8:	ldr	r7, [sp, #32]
   1d9dc:	b	1d9e8 <__assert_fail@plt+0xc4d0>
   1d9e0:	ldr	r7, [sp, #32]
   1d9e4:	mov	r3, sl
   1d9e8:	mov	r6, r9
   1d9ec:	ldr	ip, [sp, #24]
   1d9f0:	ldr	r2, [sp, #20]
   1d9f4:	add	r1, r5, #1
   1d9f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d9fc:	cmp	r5, r0
   1da00:	mov	r5, r1
   1da04:	ldr	r4, [sp, #28]
   1da08:	blt	1d8b0 <__assert_fail@plt+0xc398>
   1da0c:	b	1db54 <__assert_fail@plt+0xc63c>
   1da10:	ldr	r0, [r4, #132]	; 0x84
   1da14:	ldr	r7, [r0, r6, lsl #2]
   1da18:	ldr	r0, [r7, #4]
   1da1c:	ldr	r1, [ip]
   1da20:	ldr	r0, [r1, r0, lsl #3]
   1da24:	cmp	r0, r2
   1da28:	str	r6, [sp, #16]
   1da2c:	bne	1db54 <__assert_fail@plt+0xc63c>
   1da30:	ldr	r5, [r7]
   1da34:	ldr	r0, [r7, #16]
   1da38:	cmp	r0, #1
   1da3c:	str	r7, [sp, #32]
   1da40:	mov	sl, #0
   1da44:	blt	1da54 <__assert_fail@plt+0xc53c>
   1da48:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1da4c:	mov	r9, r5
   1da50:	b	1da88 <__assert_fail@plt+0xc570>
   1da54:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1da58:	b	1db2c <__assert_fail@plt+0xc614>
   1da5c:	ldr	r0, [r4, #48]	; 0x30
   1da60:	cmp	r1, r0
   1da64:	bgt	1db28 <__assert_fail@plt+0xc610>
   1da68:	mov	r7, r6
   1da6c:	mov	r0, r4
   1da70:	bl	1de44 <__assert_fail@plt+0xc92c>
   1da74:	cmp	r0, #0
   1da78:	bne	1db78 <__assert_fail@plt+0xc660>
   1da7c:	ldr	r3, [r4, #4]
   1da80:	mov	r6, r7
   1da84:	b	1dab8 <__assert_fail@plt+0xc5a0>
   1da88:	ldr	r0, [r7, #20]
   1da8c:	ldr	r2, [r0, sl, lsl #2]
   1da90:	ldr	r0, [r2, #4]
   1da94:	str	r0, [fp, #-32]	; 0xffffffe0
   1da98:	sub	r5, r0, r9
   1da9c:	cmp	r5, #1
   1daa0:	blt	1dae4 <__assert_fail@plt+0xc5cc>
   1daa4:	add	r1, r5, r6
   1daa8:	ldr	r0, [r4, #28]
   1daac:	cmp	r1, r0
   1dab0:	str	r2, [sp, #40]	; 0x28
   1dab4:	bgt	1da5c <__assert_fail@plt+0xc544>
   1dab8:	add	r0, r3, r6
   1dabc:	add	r1, r3, r9
   1dac0:	mov	r8, r6
   1dac4:	mov	r2, r5
   1dac8:	mov	r7, r3
   1dacc:	bl	112f0 <memcmp@plt>
   1dad0:	mov	r3, r7
   1dad4:	cmp	r0, #0
   1dad8:	ldr	r7, [sp, #32]
   1dadc:	ldr	r2, [sp, #40]	; 0x28
   1dae0:	bne	1db28 <__assert_fail@plt+0xc610>
   1dae4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1dae8:	str	r0, [sp]
   1daec:	mov	r0, r4
   1daf0:	mov	r1, r7
   1daf4:	ldr	r3, [sp, #36]	; 0x24
   1daf8:	bl	1ded8 <__assert_fail@plt+0xc9c0>
   1dafc:	cmp	r0, #1
   1db00:	bhi	1db78 <__assert_fail@plt+0xc660>
   1db04:	add	r6, r5, r6
   1db08:	add	sl, sl, #1
   1db0c:	ldr	r3, [r4, #4]
   1db10:	ldr	r0, [r7, #16]
   1db14:	cmp	sl, r0
   1db18:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1db1c:	mov	r9, r5
   1db20:	blt	1da88 <__assert_fail@plt+0xc570>
   1db24:	b	1db2c <__assert_fail@plt+0xc614>
   1db28:	mov	r5, r9
   1db2c:	ldr	r0, [r7, #16]
   1db30:	cmp	sl, r0
   1db34:	blt	1db4c <__assert_fail@plt+0xc634>
   1db38:	cmp	sl, #0
   1db3c:	addne	r5, r5, #1
   1db40:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1db44:	cmp	r5, r0
   1db48:	ble	1d868 <__assert_fail@plt+0xc350>
   1db4c:	ldr	ip, [sp, #24]
   1db50:	ldr	r2, [sp, #20]
   1db54:	ldr	r6, [sp, #16]
   1db58:	add	r6, r6, #1
   1db5c:	ldr	r0, [r4, #124]	; 0x7c
   1db60:	cmp	r6, r0
   1db64:	blt	1da10 <__assert_fail@plt+0xc4f8>
   1db68:	mov	r8, #0
   1db6c:	mov	r0, r8
   1db70:	sub	sp, fp, #28
   1db74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db78:	mov	r8, r0
   1db7c:	b	1db6c <__assert_fail@plt+0xc654>
   1db80:	mov	r8, #12
   1db84:	b	1db6c <__assert_fail@plt+0xc654>
   1db88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db8c:	add	fp, sp, #28
   1db90:	sub	sp, sp, #4
   1db94:	mov	sl, r2
   1db98:	mov	r8, r0
   1db9c:	cmp	r1, #0
   1dba0:	beq	1dbd8 <__assert_fail@plt+0xc6c0>
   1dba4:	mov	r6, r1
   1dba8:	ldr	r0, [r1, #4]
   1dbac:	cmp	sl, #0
   1dbb0:	beq	1dbc4 <__assert_fail@plt+0xc6ac>
   1dbb4:	cmp	r0, #1
   1dbb8:	ldrge	r1, [sl, #4]
   1dbbc:	cmpge	r1, #1
   1dbc0:	bge	1dc18 <__assert_fail@plt+0xc700>
   1dbc4:	cmp	r0, #1
   1dbc8:	blt	1dbd8 <__assert_fail@plt+0xc6c0>
   1dbcc:	mov	r0, r8
   1dbd0:	mov	r1, r6
   1dbd4:	b	1dbf4 <__assert_fail@plt+0xc6dc>
   1dbd8:	cmp	sl, #0
   1dbdc:	beq	1dc00 <__assert_fail@plt+0xc6e8>
   1dbe0:	ldr	r0, [sl, #4]
   1dbe4:	cmp	r0, #1
   1dbe8:	blt	1dc00 <__assert_fail@plt+0xc6e8>
   1dbec:	mov	r0, r8
   1dbf0:	mov	r1, sl
   1dbf4:	sub	sp, fp, #28
   1dbf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbfc:	b	1b70c <__assert_fail@plt+0xa1f4>
   1dc00:	mov	r0, #0
   1dc04:	str	r0, [r8]
   1dc08:	str	r0, [r8, #4]
   1dc0c:	str	r0, [r8, #8]
   1dc10:	sub	sp, fp, #28
   1dc14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc18:	add	r0, r1, r0
   1dc1c:	str	r0, [r8]
   1dc20:	lsl	r0, r0, #2
   1dc24:	bl	22624 <__assert_fail@plt+0x1110c>
   1dc28:	str	r0, [r8, #8]
   1dc2c:	cmp	r0, #0
   1dc30:	beq	1ddac <__assert_fail@plt+0xc894>
   1dc34:	ldr	r2, [sl, #4]
   1dc38:	mov	r4, #0
   1dc3c:	cmp	r2, #0
   1dc40:	mov	r0, #0
   1dc44:	movwgt	r0, #1
   1dc48:	ldr	r3, [r6, #4]
   1dc4c:	cmp	r3, #1
   1dc50:	blt	1dd10 <__assert_fail@plt+0xc7f8>
   1dc54:	mov	r9, #0
   1dc58:	cmp	r2, #1
   1dc5c:	blt	1dd20 <__assert_fail@plt+0xc808>
   1dc60:	mov	ip, #0
   1dc64:	mov	r0, #0
   1dc68:	mov	r4, ip
   1dc6c:	mov	r7, r0
   1dc70:	ldr	r0, [sl, #8]
   1dc74:	ldr	r1, [r0, r4, lsl #2]
   1dc78:	ldr	r0, [r6, #8]
   1dc7c:	ldr	r5, [r0, r9, lsl #2]
   1dc80:	cmp	r5, r1
   1dc84:	ble	1dcc4 <__assert_fail@plt+0xc7ac>
   1dc88:	ldr	r0, [r8, #8]
   1dc8c:	str	r1, [r0, r7, lsl #2]
   1dc90:	ldr	r2, [sl, #4]
   1dc94:	add	r1, r4, #1
   1dc98:	cmp	r2, r1
   1dc9c:	mov	r0, #0
   1dca0:	movwgt	r0, #1
   1dca4:	ldr	r3, [r6, #4]
   1dca8:	cmp	r3, r9
   1dcac:	ble	1dd4c <__assert_fail@plt+0xc834>
   1dcb0:	add	r7, r7, #1
   1dcb4:	cmp	r2, r1
   1dcb8:	mov	r4, r1
   1dcbc:	bgt	1dc70 <__assert_fail@plt+0xc758>
   1dcc0:	b	1dd24 <__assert_fail@plt+0xc80c>
   1dcc4:	ldr	r0, [r8, #8]
   1dcc8:	str	r5, [r0, r7, lsl #2]
   1dccc:	add	lr, r4, #1
   1dcd0:	cmp	r5, r1
   1dcd4:	mov	ip, r4
   1dcd8:	moveq	ip, lr
   1dcdc:	ldr	r2, [sl, #4]
   1dce0:	cmp	r2, ip
   1dce4:	mov	r0, #0
   1dce8:	movwgt	r0, #1
   1dcec:	add	r9, r9, #1
   1dcf0:	ldr	r3, [r6, #4]
   1dcf4:	cmp	r3, r9
   1dcf8:	ble	1dd94 <__assert_fail@plt+0xc87c>
   1dcfc:	add	r0, r7, #1
   1dd00:	cmp	r2, ip
   1dd04:	bgt	1dc68 <__assert_fail@plt+0xc750>
   1dd08:	add	r7, r7, #1
   1dd0c:	b	1dd24 <__assert_fail@plt+0xc80c>
   1dd10:	mov	r6, #0
   1dd14:	cmp	r0, #0
   1dd18:	bne	1dd5c <__assert_fail@plt+0xc844>
   1dd1c:	b	1dd84 <__assert_fail@plt+0xc86c>
   1dd20:	mov	r7, #0
   1dd24:	ldr	r0, [r8, #8]
   1dd28:	add	r0, r0, r7, lsl #2
   1dd2c:	ldr	r1, [r6, #8]
   1dd30:	add	r1, r1, r9, lsl #2
   1dd34:	sub	r2, r3, r9
   1dd38:	lsl	r2, r2, #2
   1dd3c:	bl	112a8 <memcpy@plt>
   1dd40:	sub	r0, r7, r9
   1dd44:	ldr	r1, [r6, #4]
   1dd48:	b	1dd80 <__assert_fail@plt+0xc868>
   1dd4c:	add	r6, r7, #1
   1dd50:	add	r4, r4, #1
   1dd54:	cmp	r0, #0
   1dd58:	beq	1dd84 <__assert_fail@plt+0xc86c>
   1dd5c:	ldr	r0, [r8, #8]
   1dd60:	add	r0, r0, r6, lsl #2
   1dd64:	ldr	r1, [sl, #8]
   1dd68:	add	r1, r1, r4, lsl #2
   1dd6c:	sub	r2, r2, r4
   1dd70:	lsl	r2, r2, #2
   1dd74:	bl	112a8 <memcpy@plt>
   1dd78:	sub	r0, r6, r4
   1dd7c:	ldr	r1, [sl, #4]
   1dd80:	add	r6, r0, r1
   1dd84:	str	r6, [r8, #4]
   1dd88:	mov	r0, #0
   1dd8c:	sub	sp, fp, #28
   1dd90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd94:	cmp	r5, r1
   1dd98:	moveq	r4, lr
   1dd9c:	add	r6, r7, #1
   1dda0:	cmp	r0, #0
   1dda4:	bne	1dd5c <__assert_fail@plt+0xc844>
   1dda8:	b	1dd84 <__assert_fail@plt+0xc86c>
   1ddac:	mov	r0, #12
   1ddb0:	sub	sp, fp, #28
   1ddb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddb8:	push	{r4, r5, r6, r7, fp, lr}
   1ddbc:	add	fp, sp, #16
   1ddc0:	mov	ip, r0
   1ddc4:	ldr	lr, [r0, #108]	; 0x6c
   1ddc8:	cmp	lr, #1
   1ddcc:	blt	1de30 <__assert_fail@plt+0xc918>
   1ddd0:	ldr	r2, [ip, #116]	; 0x74
   1ddd4:	mov	r0, #0
   1ddd8:	mov	r3, #1
   1dddc:	mov	r4, lr
   1dde0:	add	r5, r0, r4
   1dde4:	add	r5, r5, r5, lsr #31
   1dde8:	asr	r6, r5, #1
   1ddec:	add	r7, r6, r6, lsl #1
   1ddf0:	add	r7, r2, r7, lsl #3
   1ddf4:	ldr	r7, [r7, #4]
   1ddf8:	cmp	r7, r1
   1ddfc:	addlt	r0, r3, r5, asr #1
   1de00:	movge	r4, r6
   1de04:	cmp	r0, r4
   1de08:	blt	1dde0 <__assert_fail@plt+0xc8c8>
   1de0c:	cmp	r0, lr
   1de10:	bge	1de3c <__assert_fail@plt+0xc924>
   1de14:	ldr	r2, [ip, #116]	; 0x74
   1de18:	add	r3, r0, r0, lsl #1
   1de1c:	add	r2, r2, r3, lsl #3
   1de20:	ldr	r2, [r2, #4]
   1de24:	cmp	r2, r1
   1de28:	mvnne	r0, #0
   1de2c:	pop	{r4, r5, r6, r7, fp, pc}
   1de30:	mov	r0, #0
   1de34:	cmp	r0, lr
   1de38:	blt	1de14 <__assert_fail@plt+0xc8fc>
   1de3c:	mvn	r0, #0
   1de40:	pop	{r4, r5, r6, r7, fp, pc}
   1de44:	push	{r4, r5, r6, r7, fp, lr}
   1de48:	add	fp, sp, #16
   1de4c:	mov	r4, r1
   1de50:	mov	r5, r0
   1de54:	ldr	r0, [r0, #36]	; 0x24
   1de58:	ldr	r7, [r5, #104]	; 0x68
   1de5c:	cmp	r0, r1
   1de60:	ldrle	r1, [r5, #48]	; 0x30
   1de64:	cmple	r0, r1
   1de68:	blt	1deb8 <__assert_fail@plt+0xc9a0>
   1de6c:	ldr	r0, [r5, #28]
   1de70:	cmp	r0, r4
   1de74:	ldrle	r1, [r5, #48]	; 0x30
   1de78:	cmple	r0, r1
   1de7c:	blt	1deb8 <__assert_fail@plt+0xc9a0>
   1de80:	mov	r6, #0
   1de84:	cmp	r7, r4
   1de88:	bge	1ded0 <__assert_fail@plt+0xc9b8>
   1de8c:	sub	r0, r4, r7
   1de90:	lsl	r2, r0, #2
   1de94:	ldr	r0, [r5, #100]	; 0x64
   1de98:	add	r0, r0, r7, lsl #2
   1de9c:	add	r0, r0, #4
   1dea0:	mov	r6, #0
   1dea4:	mov	r1, #0
   1dea8:	bl	11428 <memset@plt>
   1deac:	str	r4, [r5, #104]	; 0x68
   1deb0:	mov	r0, r6
   1deb4:	pop	{r4, r5, r6, r7, fp, pc}
   1deb8:	add	r1, r4, #1
   1debc:	mov	r0, r5
   1dec0:	bl	1d408 <__assert_fail@plt+0xbef0>
   1dec4:	mov	r6, r0
   1dec8:	cmp	r0, #0
   1decc:	beq	1de80 <__assert_fail@plt+0xc968>
   1ded0:	mov	r0, r6
   1ded4:	pop	{r4, r5, r6, r7, fp, pc}
   1ded8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1dedc:	add	fp, sp, #24
   1dee0:	sub	sp, sp, #16
   1dee4:	mov	r7, r3
   1dee8:	mov	r6, r2
   1deec:	mov	r8, r1
   1def0:	mov	r4, r0
   1def4:	ldr	r2, [r2]
   1def8:	ldr	r3, [r6, #4]
   1defc:	mov	r0, #8
   1df00:	str	r0, [sp, #8]
   1df04:	ldr	r5, [fp, #8]
   1df08:	str	r5, [sp, #4]
   1df0c:	str	r7, [sp]
   1df10:	add	r1, r6, #8
   1df14:	mov	r0, r4
   1df18:	bl	1dfc4 <__assert_fail@plt+0xcaac>
   1df1c:	cmp	r0, #0
   1df20:	beq	1df2c <__assert_fail@plt+0xca14>
   1df24:	sub	sp, fp, #24
   1df28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1df2c:	ldr	r3, [r8]
   1df30:	ldr	r0, [r6, #4]
   1df34:	str	r0, [sp]
   1df38:	mov	r0, r4
   1df3c:	mov	r1, r7
   1df40:	mov	r2, r5
   1df44:	bl	1e418 <__assert_fail@plt+0xcf00>
   1df48:	cmp	r0, #0
   1df4c:	bne	1df24 <__assert_fail@plt+0xca0c>
   1df50:	ldr	r0, [r6, #4]
   1df54:	add	r0, r0, r5
   1df58:	ldr	r1, [r8]
   1df5c:	sub	r1, r0, r1
   1df60:	mov	r0, r4
   1df64:	sub	sp, fp, #24
   1df68:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1df6c:	b	1de44 <__assert_fail@plt+0xc92c>
   1df70:	push	{r4, r5, fp, lr}
   1df74:	add	fp, sp, #8
   1df78:	ldr	r4, [r1, #4]
   1df7c:	cmp	r4, #1
   1df80:	blt	1dfbc <__assert_fail@plt+0xcaa4>
   1df84:	ldr	ip, [r0]
   1df88:	ldr	lr, [r1, #8]
   1df8c:	mov	r4, #0
   1df90:	ldr	r0, [lr, r4, lsl #2]
   1df94:	add	r5, ip, r0, lsl #3
   1df98:	ldrb	r5, [r5, #4]
   1df9c:	cmp	r5, r3
   1dfa0:	ldreq	r5, [ip, r0, lsl #3]
   1dfa4:	cmpeq	r5, r2
   1dfa8:	popeq	{r4, r5, fp, pc}
   1dfac:	add	r4, r4, #1
   1dfb0:	ldr	r0, [r1, #4]
   1dfb4:	cmp	r4, r0
   1dfb8:	blt	1df90 <__assert_fail@plt+0xca78>
   1dfbc:	mvn	r0, #0
   1dfc0:	pop	{r4, r5, fp, pc}
   1dfc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfc8:	add	fp, sp, #28
   1dfcc:	sub	sp, sp, #44	; 0x2c
   1dfd0:	mov	sl, r3
   1dfd4:	mov	r8, r2
   1dfd8:	mov	r7, r1
   1dfdc:	mov	r4, r0
   1dfe0:	ldr	r1, [r0, #84]	; 0x54
   1dfe4:	mov	r0, #0
   1dfe8:	str	r0, [fp, #-32]	; 0xffffffe0
   1dfec:	str	r1, [sp, #20]
   1dff0:	ldr	r0, [r1]
   1dff4:	ldr	r0, [r0, r2, lsl #3]
   1dff8:	str	r0, [sp, #16]
   1dffc:	ldr	r0, [r4, #120]	; 0x78
   1e000:	ldr	r1, [fp, #12]
   1e004:	add	r0, r0, r1
   1e008:	ldr	r5, [r7, #4]
   1e00c:	cmp	r5, r0
   1e010:	ble	1e330 <__assert_fail@plt+0xce18>
   1e014:	ldr	r0, [r4, #40]	; 0x28
   1e018:	str	r0, [sp, #12]
   1e01c:	ldr	r2, [r4, #88]	; 0x58
   1e020:	ldr	r0, [r4, #100]	; 0x64
   1e024:	str	r0, [sp, #8]
   1e028:	ldr	r6, [r7]
   1e02c:	ldr	r0, [r7, #8]
   1e030:	str	r0, [r4, #100]	; 0x64
   1e034:	cmp	r6, #0
   1e038:	moveq	r6, sl
   1e03c:	str	r6, [r4, #40]	; 0x28
   1e040:	sub	r1, r6, #1
   1e044:	mov	r0, r4
   1e048:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1e04c:	mov	r9, r0
   1e050:	cmp	r6, sl
   1e054:	mov	r5, r4
   1e058:	bne	1e098 <__assert_fail@plt+0xcb80>
   1e05c:	add	r0, sp, #24
   1e060:	mov	r1, r8
   1e064:	bl	1adf4 <__assert_fail@plt+0x98dc>
   1e068:	str	r0, [fp, #-32]	; 0xffffffe0
   1e06c:	cmp	r0, #0
   1e070:	bne	1e390 <__assert_fail@plt+0xce78>
   1e074:	add	r1, sp, #24
   1e078:	ldr	r0, [sp, #20]
   1e07c:	ldr	r2, [sp, #16]
   1e080:	ldr	r3, [fp, #16]
   1e084:	bl	1e514 <__assert_fail@plt+0xcffc>
   1e088:	str	r0, [fp, #-32]	; 0xffffffe0
   1e08c:	cmp	r0, #0
   1e090:	beq	1e100 <__assert_fail@plt+0xcbe8>
   1e094:	b	1e320 <__assert_fail@plt+0xce08>
   1e098:	ldr	r0, [r5, #100]	; 0x64
   1e09c:	ldr	r8, [r0, r6, lsl #2]
   1e0a0:	cmp	r8, #0
   1e0a4:	beq	1e0c8 <__assert_fail@plt+0xcbb0>
   1e0a8:	ldrb	r0, [r8, #52]	; 0x34
   1e0ac:	tst	r0, #64	; 0x40
   1e0b0:	bne	1e0dc <__assert_fail@plt+0xcbc4>
   1e0b4:	mov	r0, #0
   1e0b8:	str	r0, [sp, #28]
   1e0bc:	str	r0, [sp, #24]
   1e0c0:	str	r0, [sp, #32]
   1e0c4:	b	1e0f4 <__assert_fail@plt+0xcbdc>
   1e0c8:	mov	r8, #0
   1e0cc:	str	r8, [sp, #28]
   1e0d0:	str	r8, [sp, #24]
   1e0d4:	str	r8, [sp, #32]
   1e0d8:	b	1e168 <__assert_fail@plt+0xcc50>
   1e0dc:	add	r1, r8, #4
   1e0e0:	add	r0, sp, #24
   1e0e4:	bl	1b70c <__assert_fail@plt+0xa1f4>
   1e0e8:	str	r0, [fp, #-32]	; 0xffffffe0
   1e0ec:	cmp	r0, #0
   1e0f0:	bne	1e390 <__assert_fail@plt+0xce78>
   1e0f4:	ldrb	r0, [r8, #52]	; 0x34
   1e0f8:	tst	r0, #64	; 0x40
   1e0fc:	beq	1e168 <__assert_fail@plt+0xcc50>
   1e100:	ldr	r0, [sp, #28]
   1e104:	cmp	r0, #0
   1e108:	beq	1e134 <__assert_fail@plt+0xcc1c>
   1e10c:	ldr	r0, [fp, #16]
   1e110:	str	r0, [sp]
   1e114:	add	r1, sp, #24
   1e118:	mov	r0, r5
   1e11c:	mov	r2, r6
   1e120:	ldr	r3, [sp, #16]
   1e124:	bl	1e60c <__assert_fail@plt+0xd0f4>
   1e128:	str	r0, [fp, #-32]	; 0xffffffe0
   1e12c:	cmp	r0, #0
   1e130:	bne	1e320 <__assert_fail@plt+0xce08>
   1e134:	sub	r0, fp, #32
   1e138:	add	r2, sp, #24
   1e13c:	ldr	r1, [sp, #20]
   1e140:	mov	r3, r9
   1e144:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   1e148:	mov	r8, r0
   1e14c:	cmp	r0, #0
   1e150:	bne	1e160 <__assert_fail@plt+0xcc48>
   1e154:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e158:	cmp	r0, #0
   1e15c:	bne	1e320 <__assert_fail@plt+0xce08>
   1e160:	ldr	r0, [r5, #100]	; 0x64
   1e164:	str	r8, [r0, r6, lsl #2]
   1e168:	ldr	r0, [fp, #12]
   1e16c:	cmp	r6, r0
   1e170:	bge	1e2c4 <__assert_fail@plt+0xcdac>
   1e174:	str	r7, [sp, #4]
   1e178:	add	r7, r6, #1
   1e17c:	add	r4, sp, #24
   1e180:	mov	sl, #0
   1e184:	sub	r6, r7, #1
   1e188:	ldr	r0, [r5, #120]	; 0x78
   1e18c:	cmp	sl, r0
   1e190:	bgt	1e2c0 <__assert_fail@plt+0xcda8>
   1e194:	mov	r0, #0
   1e198:	str	r0, [sp, #28]
   1e19c:	ldr	r0, [r5, #100]	; 0x64
   1e1a0:	ldr	r0, [r0, r7, lsl #2]
   1e1a4:	cmp	r0, #0
   1e1a8:	beq	1e1c4 <__assert_fail@plt+0xccac>
   1e1ac:	add	r1, r0, #4
   1e1b0:	mov	r0, r4
   1e1b4:	bl	1b308 <__assert_fail@plt+0x9df0>
   1e1b8:	str	r0, [fp, #-32]	; 0xffffffe0
   1e1bc:	cmp	r0, #0
   1e1c0:	bne	1e320 <__assert_fail@plt+0xce08>
   1e1c4:	cmp	r8, #0
   1e1c8:	beq	1e1ec <__assert_fail@plt+0xccd4>
   1e1cc:	add	r2, r8, #16
   1e1d0:	mov	r0, r5
   1e1d4:	mov	r1, r6
   1e1d8:	mov	r3, r4
   1e1dc:	bl	1e8a0 <__assert_fail@plt+0xd388>
   1e1e0:	str	r0, [fp, #-32]	; 0xffffffe0
   1e1e4:	cmp	r0, #0
   1e1e8:	bne	1e320 <__assert_fail@plt+0xce08>
   1e1ec:	ldr	r0, [sp, #28]
   1e1f0:	cmp	r0, #0
   1e1f4:	beq	1e254 <__assert_fail@plt+0xcd3c>
   1e1f8:	mov	r8, r6
   1e1fc:	mov	r9, r5
   1e200:	ldr	r0, [sp, #20]
   1e204:	mov	r1, r4
   1e208:	ldr	r6, [sp, #16]
   1e20c:	mov	r2, r6
   1e210:	ldr	r5, [fp, #16]
   1e214:	mov	r3, r5
   1e218:	bl	1e514 <__assert_fail@plt+0xcffc>
   1e21c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e220:	cmp	r0, #0
   1e224:	bne	1e320 <__assert_fail@plt+0xce08>
   1e228:	str	r5, [sp]
   1e22c:	mov	r5, r9
   1e230:	mov	r0, r9
   1e234:	mov	r1, r4
   1e238:	mov	r2, r7
   1e23c:	mov	r3, r6
   1e240:	bl	1e60c <__assert_fail@plt+0xd0f4>
   1e244:	str	r0, [fp, #-32]	; 0xffffffe0
   1e248:	cmp	r0, #0
   1e24c:	mov	r6, r8
   1e250:	bne	1e320 <__assert_fail@plt+0xce08>
   1e254:	ldr	r2, [r5, #88]	; 0x58
   1e258:	mov	r0, r5
   1e25c:	mov	r1, r6
   1e260:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1e264:	mov	r3, r0
   1e268:	sub	r0, fp, #32
   1e26c:	ldr	r1, [sp, #20]
   1e270:	mov	r2, r4
   1e274:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   1e278:	mov	r8, r0
   1e27c:	cmp	r0, #0
   1e280:	bne	1e290 <__assert_fail@plt+0xcd78>
   1e284:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e288:	cmp	r0, #0
   1e28c:	bne	1e320 <__assert_fail@plt+0xce08>
   1e290:	ldr	r0, [r5, #100]	; 0x64
   1e294:	str	r8, [r0, r7, lsl #2]
   1e298:	cmp	r8, #0
   1e29c:	mov	r1, #0
   1e2a0:	addeq	r1, sl, #1
   1e2a4:	add	r0, r7, #1
   1e2a8:	ldr	r2, [fp, #12]
   1e2ac:	cmp	r7, r2
   1e2b0:	mov	r7, r0
   1e2b4:	mov	sl, r1
   1e2b8:	blt	1e184 <__assert_fail@plt+0xcc6c>
   1e2bc:	sub	r6, r0, #1
   1e2c0:	ldr	r7, [sp, #4]
   1e2c4:	ldr	r0, [sp, #32]
   1e2c8:	bl	22b14 <__assert_fail@plt+0x115fc>
   1e2cc:	ldr	r0, [r5, #100]	; 0x64
   1e2d0:	ldr	r1, [fp, #12]
   1e2d4:	ldr	r0, [r0, r1, lsl #2]
   1e2d8:	str	r6, [r7]
   1e2dc:	ldr	r1, [sp, #12]
   1e2e0:	str	r1, [r5, #40]	; 0x28
   1e2e4:	ldr	r1, [sp, #8]
   1e2e8:	str	r1, [r5, #100]	; 0x64
   1e2ec:	cmp	r0, #0
   1e2f0:	beq	1e310 <__assert_fail@plt+0xcdf8>
   1e2f4:	ldr	r1, [fp, #8]
   1e2f8:	add	r0, r0, #4
   1e2fc:	bl	1b788 <__assert_fail@plt+0xa270>
   1e300:	mov	r4, #0
   1e304:	cmp	r0, #0
   1e308:	moveq	r4, #1
   1e30c:	b	1e314 <__assert_fail@plt+0xcdfc>
   1e310:	mov	r4, #1
   1e314:	mov	r0, r4
   1e318:	sub	sp, fp, #28
   1e31c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e320:	ldr	r0, [sp, #32]
   1e324:	bl	22b14 <__assert_fail@plt+0x115fc>
   1e328:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1e32c:	b	1e314 <__assert_fail@plt+0xcdfc>
   1e330:	str	r4, [sp, #12]
   1e334:	mvn	r1, #-2147483648	; 0x80000000
   1e338:	sub	r1, r1, r5
   1e33c:	mov	r4, #12
   1e340:	cmp	r1, r0
   1e344:	ble	1e314 <__assert_fail@plt+0xcdfc>
   1e348:	add	r6, r0, #1
   1e34c:	add	r1, r6, r5
   1e350:	cmn	r1, #-1073741823	; 0xc0000001
   1e354:	bhi	1e314 <__assert_fail@plt+0xcdfc>
   1e358:	ldr	r0, [r7, #8]
   1e35c:	mov	r9, r1
   1e360:	lsl	r1, r1, #2
   1e364:	bl	22654 <__assert_fail@plt+0x1113c>
   1e368:	cmp	r0, #0
   1e36c:	beq	1e314 <__assert_fail@plt+0xcdfc>
   1e370:	str	r9, [r7, #4]
   1e374:	str	r0, [r7, #8]
   1e378:	add	r0, r0, r5, lsl #2
   1e37c:	lsl	r2, r6, #2
   1e380:	mov	r1, #0
   1e384:	bl	11428 <memset@plt>
   1e388:	ldr	r4, [sp, #12]
   1e38c:	b	1e014 <__assert_fail@plt+0xcafc>
   1e390:	mov	r4, r0
   1e394:	b	1e314 <__assert_fail@plt+0xcdfc>
   1e398:	push	{r4, r5, r6, r7, fp, lr}
   1e39c:	add	fp, sp, #16
   1e3a0:	mov	r5, r2
   1e3a4:	mov	r6, r1
   1e3a8:	mov	r4, r0
   1e3ac:	ldr	r0, [r0, #12]
   1e3b0:	ldr	r1, [r4, #16]
   1e3b4:	cmp	r1, r0
   1e3b8:	beq	1e3ec <__assert_fail@plt+0xced4>
   1e3bc:	mov	r0, #1
   1e3c0:	mov	r1, #20
   1e3c4:	bl	225d0 <__assert_fail@plt+0x110b8>
   1e3c8:	cmp	r0, #0
   1e3cc:	ldrne	r1, [r4, #16]
   1e3d0:	ldrne	r2, [r4, #20]
   1e3d4:	strne	r0, [r2, r1, lsl #2]
   1e3d8:	strne	r6, [r0]
   1e3dc:	strne	r5, [r0, #4]
   1e3e0:	addne	r1, r1, #1
   1e3e4:	strne	r1, [r4, #16]
   1e3e8:	pop	{r4, r5, r6, r7, fp, pc}
   1e3ec:	mov	r1, #1
   1e3f0:	orr	r7, r1, r0, lsl #1
   1e3f4:	lsl	r1, r7, #2
   1e3f8:	ldr	r0, [r4, #20]
   1e3fc:	bl	22654 <__assert_fail@plt+0x1113c>
   1e400:	cmp	r0, #0
   1e404:	moveq	r0, #0
   1e408:	popeq	{r4, r5, r6, r7, fp, pc}
   1e40c:	str	r7, [r4, #12]
   1e410:	str	r0, [r4, #20]
   1e414:	b	1e3bc <__assert_fail@plt+0xcea4>
   1e418:	push	{r4, r5, r6, r7, fp, lr}
   1e41c:	add	fp, sp, #16
   1e420:	mov	r5, r3
   1e424:	mov	r6, r2
   1e428:	mov	r7, r1
   1e42c:	mov	r4, r0
   1e430:	ldr	r1, [r0, #108]	; 0x6c
   1e434:	ldr	r2, [r0, #112]	; 0x70
   1e438:	cmp	r1, r2
   1e43c:	blt	1e48c <__assert_fail@plt+0xcf74>
   1e440:	ldr	r0, [r4, #116]	; 0x74
   1e444:	add	r1, r2, r2, lsl #1
   1e448:	lsl	r1, r1, #4
   1e44c:	bl	22654 <__assert_fail@plt+0x1113c>
   1e450:	cmp	r0, #0
   1e454:	beq	1e504 <__assert_fail@plt+0xcfec>
   1e458:	str	r0, [r4, #116]	; 0x74
   1e45c:	ldr	r1, [r4, #108]	; 0x6c
   1e460:	ldr	r2, [r4, #112]	; 0x70
   1e464:	add	r1, r1, r1, lsl #1
   1e468:	add	r0, r0, r1, lsl #3
   1e46c:	add	r1, r2, r2, lsl #1
   1e470:	lsl	r2, r1, #3
   1e474:	mov	r1, #0
   1e478:	bl	11428 <memset@plt>
   1e47c:	ldr	r1, [r4, #108]	; 0x6c
   1e480:	ldr	r0, [r4, #112]	; 0x70
   1e484:	lsl	r0, r0, #1
   1e488:	str	r0, [r4, #112]	; 0x70
   1e48c:	ldr	r2, [fp, #8]
   1e490:	cmp	r1, #1
   1e494:	blt	1e4b8 <__assert_fail@plt+0xcfa0>
   1e498:	ldr	r0, [r4, #116]	; 0x74
   1e49c:	sub	r3, r1, #1
   1e4a0:	add	r3, r3, r3, lsl #1
   1e4a4:	add	r0, r0, r3, lsl #3
   1e4a8:	ldr	r3, [r0, #4]
   1e4ac:	cmp	r3, r6
   1e4b0:	moveq	r3, #1
   1e4b4:	strbeq	r3, [r0, #20]
   1e4b8:	ldr	r3, [r4, #116]	; 0x74
   1e4bc:	add	r0, r1, r1, lsl #1
   1e4c0:	str	r7, [r3, r0, lsl #3]!
   1e4c4:	mov	r0, #0
   1e4c8:	cmp	r2, r5
   1e4cc:	mov	r7, #0
   1e4d0:	mvneq	r7, #0
   1e4d4:	str	r6, [r3, #4]
   1e4d8:	str	r5, [r3, #8]
   1e4dc:	str	r2, [r3, #12]
   1e4e0:	str	r7, [r3, #16]
   1e4e4:	add	r1, r1, #1
   1e4e8:	str	r1, [r4, #108]	; 0x6c
   1e4ec:	strb	r0, [r3, #20]
   1e4f0:	sub	r1, r2, r5
   1e4f4:	ldr	r2, [r4, #120]	; 0x78
   1e4f8:	cmp	r2, r1
   1e4fc:	strlt	r1, [r4, #120]	; 0x78
   1e500:	pop	{r4, r5, r6, r7, fp, pc}
   1e504:	ldr	r0, [r4, #116]	; 0x74
   1e508:	bl	22b14 <__assert_fail@plt+0x115fc>
   1e50c:	mov	r0, #12
   1e510:	pop	{r4, r5, r6, r7, fp, pc}
   1e514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e518:	add	fp, sp, #28
   1e51c:	sub	sp, sp, #20
   1e520:	mov	r9, r3
   1e524:	mov	sl, r2
   1e528:	mov	r4, r1
   1e52c:	mov	r7, r0
   1e530:	ldr	r1, [r1, #4]
   1e534:	add	r0, sp, #8
   1e538:	bl	1b04c <__assert_fail@plt+0x9b34>
   1e53c:	cmp	r0, #0
   1e540:	bne	1e604 <__assert_fail@plt+0xd0ec>
   1e544:	ldr	r0, [r4, #4]
   1e548:	cmp	r0, #1
   1e54c:	blt	1e5cc <__assert_fail@plt+0xd0b4>
   1e550:	mov	r8, #0
   1e554:	ldr	r0, [r4, #8]
   1e558:	ldr	r5, [r0, r8, lsl #2]
   1e55c:	add	r0, r5, r5, lsl #1
   1e560:	ldr	r1, [r7, #24]
   1e564:	add	r6, r1, r0, lsl #2
   1e568:	mov	r0, r7
   1e56c:	mov	r1, r6
   1e570:	mov	r2, sl
   1e574:	mov	r3, r9
   1e578:	bl	1df70 <__assert_fail@plt+0xca58>
   1e57c:	cmn	r0, #1
   1e580:	beq	1e5a8 <__assert_fail@plt+0xd090>
   1e584:	str	r9, [sp]
   1e588:	mov	r0, r7
   1e58c:	add	r1, sp, #8
   1e590:	mov	r2, r5
   1e594:	mov	r3, sl
   1e598:	bl	1ea5c <__assert_fail@plt+0xd544>
   1e59c:	cmp	r0, #0
   1e5a0:	beq	1e5bc <__assert_fail@plt+0xd0a4>
   1e5a4:	b	1e5f4 <__assert_fail@plt+0xd0dc>
   1e5a8:	add	r0, sp, #8
   1e5ac:	mov	r1, r6
   1e5b0:	bl	1b308 <__assert_fail@plt+0x9df0>
   1e5b4:	cmp	r0, #0
   1e5b8:	bne	1e5f4 <__assert_fail@plt+0xd0dc>
   1e5bc:	ldr	r0, [r4, #4]
   1e5c0:	add	r8, r8, #1
   1e5c4:	cmp	r8, r0
   1e5c8:	blt	1e554 <__assert_fail@plt+0xd03c>
   1e5cc:	ldr	r0, [r4, #8]
   1e5d0:	bl	22b14 <__assert_fail@plt+0x115fc>
   1e5d4:	vldr	d16, [sp, #8]
   1e5d8:	ldr	r0, [sp, #16]
   1e5dc:	str	r0, [r4, #8]
   1e5e0:	vstr	d16, [r4]
   1e5e4:	mov	r5, #0
   1e5e8:	mov	r0, r5
   1e5ec:	sub	sp, fp, #28
   1e5f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5f4:	mov	r5, r0
   1e5f8:	ldr	r0, [sp, #16]
   1e5fc:	bl	22b14 <__assert_fail@plt+0x115fc>
   1e600:	b	1e5e8 <__assert_fail@plt+0xd0d0>
   1e604:	mov	r5, r0
   1e608:	b	1e5e8 <__assert_fail@plt+0xd0d0>
   1e60c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e610:	add	fp, sp, #28
   1e614:	sub	sp, sp, #44	; 0x2c
   1e618:	str	r3, [sp, #8]
   1e61c:	mov	r6, r2
   1e620:	mov	r7, r1
   1e624:	ldr	r8, [r0, #84]	; 0x54
   1e628:	str	r0, [sp, #20]
   1e62c:	mov	r1, r2
   1e630:	bl	1ddb8 <__assert_fail@plt+0xc8a0>
   1e634:	mov	r1, #0
   1e638:	cmn	r0, #1
   1e63c:	beq	1e894 <__assert_fail@plt+0xd37c>
   1e640:	add	r1, r0, r0, lsl #1
   1e644:	add	sl, sp, #28
   1e648:	str	r8, [sp, #12]
   1e64c:	str	r7, [sp, #24]
   1e650:	str	r1, [sp, #4]
   1e654:	b	1e65c <__assert_fail@plt+0xd144>
   1e658:	ldr	r1, [sp, #4]
   1e65c:	ldr	r0, [sp, #20]
   1e660:	ldr	r0, [r0, #116]	; 0x74
   1e664:	add	r0, r0, r1, lsl #3
   1e668:	add	r0, r0, #12
   1e66c:	mov	r9, r0
   1e670:	ldr	r1, [r0, #-12]
   1e674:	mov	r0, r7
   1e678:	bl	1b788 <__assert_fail@plt+0xa270>
   1e67c:	cmp	r0, #0
   1e680:	beq	1e844 <__assert_fail@plt+0xd32c>
   1e684:	ldmda	r9, {r0, r1}
   1e688:	add	r1, r1, r6
   1e68c:	sub	r5, r1, r0
   1e690:	cmp	r5, r6
   1e694:	bne	1e734 <__assert_fail@plt+0xd21c>
   1e698:	mov	r5, r6
   1e69c:	ldr	r0, [r8, #20]
   1e6a0:	ldr	r1, [r9, #-12]
   1e6a4:	add	r1, r1, r1, lsl #1
   1e6a8:	add	r0, r0, r1, lsl #2
   1e6ac:	ldr	r0, [r0, #8]
   1e6b0:	ldr	r4, [r0]
   1e6b4:	mov	r0, r7
   1e6b8:	mov	r1, r4
   1e6bc:	bl	1b788 <__assert_fail@plt+0xa270>
   1e6c0:	mov	r1, #4
   1e6c4:	cmp	r0, #0
   1e6c8:	bne	1e724 <__assert_fail@plt+0xd20c>
   1e6cc:	mov	r6, r8
   1e6d0:	mov	r0, sl
   1e6d4:	mov	r1, r4
   1e6d8:	bl	1adf4 <__assert_fail@plt+0x98dc>
   1e6dc:	mov	r8, r0
   1e6e0:	str	r0, [fp, #-32]	; 0xffffffe0
   1e6e4:	mov	r0, r6
   1e6e8:	mov	r1, sl
   1e6ec:	ldr	r2, [sp, #8]
   1e6f0:	ldr	r3, [fp, #8]
   1e6f4:	bl	1e514 <__assert_fail@plt+0xcffc>
   1e6f8:	mov	r6, r0
   1e6fc:	mov	r0, r7
   1e700:	mov	r1, sl
   1e704:	bl	1b308 <__assert_fail@plt+0x9df0>
   1e708:	mov	r4, r0
   1e70c:	ldr	r0, [sp, #36]	; 0x24
   1e710:	bl	22b14 <__assert_fail@plt+0x115fc>
   1e714:	orr	r0, r6, r8
   1e718:	orrs	r0, r0, r4
   1e71c:	mov	r1, #2
   1e720:	bne	1e858 <__assert_fail@plt+0xd340>
   1e724:	ldr	r8, [sp, #12]
   1e728:	mov	r6, r5
   1e72c:	add	sl, sp, #28
   1e730:	b	1e834 <__assert_fail@plt+0xd31c>
   1e734:	ldr	r0, [sp, #20]
   1e738:	ldr	r0, [r0, #100]	; 0x64
   1e73c:	ldr	r0, [r0, r5, lsl #2]
   1e740:	ldr	r1, [r9, #-12]
   1e744:	ldr	r2, [r8, #12]
   1e748:	ldr	r7, [r2, r1, lsl #2]
   1e74c:	cmp	r0, #0
   1e750:	beq	1e7c4 <__assert_fail@plt+0xd2ac>
   1e754:	add	r4, r0, #4
   1e758:	mov	r0, r4
   1e75c:	mov	r1, r7
   1e760:	bl	1b788 <__assert_fail@plt+0xa270>
   1e764:	mov	r1, #4
   1e768:	add	sl, sp, #28
   1e76c:	cmp	r0, #0
   1e770:	bne	1e834 <__assert_fail@plt+0xd31c>
   1e774:	mov	r0, sl
   1e778:	mov	r1, r4
   1e77c:	bl	1b70c <__assert_fail@plt+0xa1f4>
   1e780:	mov	r4, r0
   1e784:	str	r0, [fp, #-32]	; 0xffffffe0
   1e788:	mov	r0, sl
   1e78c:	mov	r1, r7
   1e790:	bl	1b524 <__assert_fail@plt+0xa00c>
   1e794:	cmp	r4, #0
   1e798:	bne	1e7a4 <__assert_fail@plt+0xd28c>
   1e79c:	cmp	r0, #0
   1e7a0:	bne	1e7e0 <__assert_fail@plt+0xd2c8>
   1e7a4:	ldr	r0, [sp, #36]	; 0x24
   1e7a8:	bl	22b14 <__assert_fail@plt+0x115fc>
   1e7ac:	cmp	r4, #0
   1e7b0:	movweq	r4, #12
   1e7b4:	str	r4, [fp, #-32]	; 0xffffffe0
   1e7b8:	mov	r1, #1
   1e7bc:	str	r4, [sp, #16]
   1e7c0:	b	1e834 <__assert_fail@plt+0xd31c>
   1e7c4:	add	sl, sp, #28
   1e7c8:	mov	r0, sl
   1e7cc:	mov	r1, r7
   1e7d0:	bl	1adf4 <__assert_fail@plt+0x98dc>
   1e7d4:	str	r0, [fp, #-32]	; 0xffffffe0
   1e7d8:	cmp	r0, #0
   1e7dc:	bne	1e878 <__assert_fail@plt+0xd360>
   1e7e0:	sub	r0, fp, #32
   1e7e4:	mov	r1, r8
   1e7e8:	mov	r2, sl
   1e7ec:	bl	1eb64 <__assert_fail@plt+0xd64c>
   1e7f0:	ldr	r4, [sp, #20]
   1e7f4:	ldr	r1, [r4, #100]	; 0x64
   1e7f8:	str	r0, [r1, r5, lsl #2]
   1e7fc:	ldr	r0, [sp, #36]	; 0x24
   1e800:	bl	22b14 <__assert_fail@plt+0x115fc>
   1e804:	ldr	r0, [r4, #100]	; 0x64
   1e808:	ldr	r0, [r0, r5, lsl #2]
   1e80c:	clz	r0, r0
   1e810:	lsr	r0, r0, #5
   1e814:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1e818:	cmp	r2, #0
   1e81c:	mov	r1, r2
   1e820:	movwne	r1, #1
   1e824:	ands	r1, r0, r1
   1e828:	ldr	r0, [sp, #16]
   1e82c:	movne	r0, r2
   1e830:	str	r0, [sp, #16]
   1e834:	ldr	r7, [sp, #24]
   1e838:	cmp	r1, #0
   1e83c:	cmpne	r1, #4
   1e840:	bne	1e880 <__assert_fail@plt+0xd368>
   1e844:	add	r0, r9, #24
   1e848:	ldrb	r1, [r9, #8]
   1e84c:	cmp	r1, #0
   1e850:	bne	1e66c <__assert_fail@plt+0xd154>
   1e854:	b	1e890 <__assert_fail@plt+0xd378>
   1e858:	cmp	r6, #0
   1e85c:	movne	r4, r6
   1e860:	cmp	r8, #0
   1e864:	movne	r4, r8
   1e868:	str	r4, [fp, #-32]	; 0xffffffe0
   1e86c:	mov	r1, #1
   1e870:	str	r4, [sp, #16]
   1e874:	b	1e724 <__assert_fail@plt+0xd20c>
   1e878:	mov	r1, #1
   1e87c:	b	1e830 <__assert_fail@plt+0xd318>
   1e880:	cmp	r1, #2
   1e884:	beq	1e658 <__assert_fail@plt+0xd140>
   1e888:	ldr	r1, [sp, #16]
   1e88c:	b	1e894 <__assert_fail@plt+0xd37c>
   1e890:	mov	r1, #0
   1e894:	mov	r0, r1
   1e898:	sub	sp, fp, #28
   1e89c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8a4:	add	fp, sp, #28
   1e8a8:	sub	sp, sp, #36	; 0x24
   1e8ac:	str	r0, [sp, #12]
   1e8b0:	ldr	r5, [r0, #84]	; 0x54
   1e8b4:	mov	r0, #0
   1e8b8:	str	r0, [sp, #32]
   1e8bc:	str	r0, [sp, #20]
   1e8c0:	str	r0, [sp, #16]
   1e8c4:	str	r0, [sp, #24]
   1e8c8:	ldr	r0, [r2, #4]
   1e8cc:	cmp	r0, #1
   1e8d0:	blt	1ea1c <__assert_fail@plt+0xd504>
   1e8d4:	mov	sl, r3
   1e8d8:	mov	r4, r2
   1e8dc:	mov	r6, r1
   1e8e0:	mov	r7, #0
   1e8e4:	str	r1, [sp, #8]
   1e8e8:	str	r2, [sp, #4]
   1e8ec:	str	r3, [sp]
   1e8f0:	ldr	r0, [r4, #8]
   1e8f4:	ldr	r8, [r0, r7, lsl #2]
   1e8f8:	ldr	r0, [r5]
   1e8fc:	add	r0, r0, r8, lsl #3
   1e900:	ldrb	r0, [r0, #6]
   1e904:	tst	r0, #16
   1e908:	bne	1e92c <__assert_fail@plt+0xd414>
   1e90c:	ldr	r0, [r5]
   1e910:	add	r1, r0, r8, lsl #3
   1e914:	ldr	r0, [sp, #12]
   1e918:	mov	r2, r6
   1e91c:	bl	1f03c <__assert_fail@plt+0xdb24>
   1e920:	cmp	r0, #0
   1e924:	bne	1e9f4 <__assert_fail@plt+0xd4dc>
   1e928:	b	1ea0c <__assert_fail@plt+0xd4f4>
   1e92c:	mov	r0, r5
   1e930:	mov	r1, r8
   1e934:	ldr	r9, [sp, #12]
   1e938:	mov	r2, r9
   1e93c:	mov	r3, r6
   1e940:	bl	1ed68 <__assert_fail@plt+0xd850>
   1e944:	cmp	r0, #2
   1e948:	blt	1e9ec <__assert_fail@plt+0xd4d4>
   1e94c:	add	r4, r0, r6
   1e950:	ldr	r0, [r9, #100]	; 0x64
   1e954:	ldr	r0, [r0, r4, lsl #2]
   1e958:	ldr	r1, [r5, #12]
   1e95c:	ldr	r2, [r1, r8, lsl #2]
   1e960:	mov	r1, #0
   1e964:	str	r1, [sp, #20]
   1e968:	cmp	r0, #0
   1e96c:	mov	sl, r9
   1e970:	add	r6, sp, #16
   1e974:	beq	1e998 <__assert_fail@plt+0xd480>
   1e978:	add	r1, r0, #4
   1e97c:	mov	r0, r6
   1e980:	mov	r9, r2
   1e984:	bl	1b308 <__assert_fail@plt+0x9df0>
   1e988:	mov	r2, r9
   1e98c:	str	r0, [sp, #32]
   1e990:	cmp	r0, #0
   1e994:	bne	1ea44 <__assert_fail@plt+0xd52c>
   1e998:	mov	r0, r6
   1e99c:	mov	r1, r2
   1e9a0:	bl	1b524 <__assert_fail@plt+0xa00c>
   1e9a4:	cmp	r0, #0
   1e9a8:	beq	1ea30 <__assert_fail@plt+0xd518>
   1e9ac:	mov	r2, r6
   1e9b0:	add	r0, sp, #32
   1e9b4:	mov	r1, r5
   1e9b8:	bl	1eb64 <__assert_fail@plt+0xd64c>
   1e9bc:	ldr	r1, [sl, #100]	; 0x64
   1e9c0:	str	r0, [r1, r4, lsl #2]
   1e9c4:	ldr	r0, [sl, #100]	; 0x64
   1e9c8:	ldr	r0, [r0, r4, lsl #2]
   1e9cc:	cmp	r0, #0
   1e9d0:	ldr	sl, [sp]
   1e9d4:	ldmib	sp, {r4, r6}
   1e9d8:	bne	1e9f4 <__assert_fail@plt+0xd4dc>
   1e9dc:	ldr	r9, [sp, #32]
   1e9e0:	cmp	r9, #0
   1e9e4:	beq	1e9f4 <__assert_fail@plt+0xd4dc>
   1e9e8:	b	1ea48 <__assert_fail@plt+0xd530>
   1e9ec:	cmp	r0, #0
   1e9f0:	beq	1e90c <__assert_fail@plt+0xd3f4>
   1e9f4:	ldr	r0, [r5, #12]
   1e9f8:	ldr	r1, [r0, r8, lsl #2]
   1e9fc:	mov	r0, sl
   1ea00:	bl	1b524 <__assert_fail@plt+0xa00c>
   1ea04:	cmp	r0, #0
   1ea08:	beq	1ea30 <__assert_fail@plt+0xd518>
   1ea0c:	ldr	r0, [r4, #4]
   1ea10:	add	r7, r7, #1
   1ea14:	cmp	r7, r0
   1ea18:	blt	1e8f0 <__assert_fail@plt+0xd3d8>
   1ea1c:	ldr	r0, [sp, #24]
   1ea20:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ea24:	mov	r0, #0
   1ea28:	sub	sp, fp, #28
   1ea2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea30:	ldr	r0, [sp, #24]
   1ea34:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ea38:	mov	r0, #12
   1ea3c:	sub	sp, fp, #28
   1ea40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea44:	mov	r9, r0
   1ea48:	ldr	r0, [sp, #24]
   1ea4c:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ea50:	mov	r0, r9
   1ea54:	sub	sp, fp, #28
   1ea58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ea60:	add	fp, sp, #24
   1ea64:	sub	sp, sp, #8
   1ea68:	mov	r5, r3
   1ea6c:	mov	r7, r2
   1ea70:	mov	r4, r1
   1ea74:	mov	r6, r0
   1ea78:	mov	r0, r1
   1ea7c:	mov	r1, r2
   1ea80:	bl	1b788 <__assert_fail@plt+0xa270>
   1ea84:	cmp	r0, #0
   1ea88:	beq	1ea98 <__assert_fail@plt+0xd580>
   1ea8c:	mov	r0, #0
   1ea90:	sub	sp, fp, #24
   1ea94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ea98:	ldr	r8, [fp, #8]
   1ea9c:	ldr	r0, [r6]
   1eaa0:	add	r1, r0, r7, lsl #3
   1eaa4:	ldrb	r1, [r1, #4]
   1eaa8:	cmp	r1, r8
   1eaac:	ldreq	r0, [r0, r7, lsl #3]
   1eab0:	cmpeq	r0, r5
   1eab4:	beq	1eb3c <__assert_fail@plt+0xd624>
   1eab8:	mov	r0, r4
   1eabc:	mov	r1, r7
   1eac0:	bl	1b524 <__assert_fail@plt+0xa00c>
   1eac4:	cmp	r0, #0
   1eac8:	beq	1eb58 <__assert_fail@plt+0xd640>
   1eacc:	ldr	r0, [r6, #20]
   1ead0:	add	r7, r7, r7, lsl #1
   1ead4:	add	r0, r0, r7, lsl #2
   1ead8:	ldr	r1, [r0, #4]
   1eadc:	cmp	r1, #2
   1eae0:	beq	1eaf0 <__assert_fail@plt+0xd5d8>
   1eae4:	cmp	r1, #0
   1eae8:	bne	1eb14 <__assert_fail@plt+0xd5fc>
   1eaec:	b	1ea8c <__assert_fail@plt+0xd574>
   1eaf0:	ldr	r0, [r0, #8]
   1eaf4:	ldr	r2, [r0, #4]
   1eaf8:	str	r8, [sp]
   1eafc:	mov	r0, r6
   1eb00:	mov	r1, r4
   1eb04:	mov	r3, r5
   1eb08:	bl	1ea5c <__assert_fail@plt+0xd544>
   1eb0c:	cmp	r0, #0
   1eb10:	bne	1ea90 <__assert_fail@plt+0xd578>
   1eb14:	ldr	r0, [r6, #20]
   1eb18:	add	r0, r0, r7, lsl #2
   1eb1c:	ldr	r0, [r0, #8]
   1eb20:	ldr	r7, [r0]
   1eb24:	mov	r0, r4
   1eb28:	mov	r1, r7
   1eb2c:	bl	1b788 <__assert_fail@plt+0xa270>
   1eb30:	cmp	r0, #0
   1eb34:	beq	1ea9c <__assert_fail@plt+0xd584>
   1eb38:	b	1ea8c <__assert_fail@plt+0xd574>
   1eb3c:	cmp	r8, #9
   1eb40:	bne	1ea8c <__assert_fail@plt+0xd574>
   1eb44:	mov	r0, r4
   1eb48:	mov	r1, r7
   1eb4c:	bl	1b524 <__assert_fail@plt+0xa00c>
   1eb50:	cmp	r0, #0
   1eb54:	bne	1ea8c <__assert_fail@plt+0xd574>
   1eb58:	mov	r0, #12
   1eb5c:	sub	sp, fp, #24
   1eb60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1eb64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb68:	add	fp, sp, #28
   1eb6c:	sub	sp, sp, #4
   1eb70:	mov	r9, r1
   1eb74:	ldr	r1, [r2, #4]
   1eb78:	cmp	r1, #0
   1eb7c:	beq	1ec20 <__assert_fail@plt+0xd708>
   1eb80:	mov	sl, r2
   1eb84:	str	r0, [sp]
   1eb88:	mov	r6, #0
   1eb8c:	mov	r0, r2
   1eb90:	mov	r1, #0
   1eb94:	bl	1b8e8 <__assert_fail@plt+0xa3d0>
   1eb98:	mov	r7, r0
   1eb9c:	ldr	r0, [r9, #32]
   1eba0:	ldr	r1, [r9, #68]	; 0x44
   1eba4:	and	r1, r1, r7
   1eba8:	add	r1, r1, r1, lsl #1
   1ebac:	mov	r5, r0
   1ebb0:	ldr	r2, [r5, r1, lsl #2]!
   1ebb4:	cmp	r2, #1
   1ebb8:	blt	1ebf8 <__assert_fail@plt+0xd6e0>
   1ebbc:	add	r0, r0, r1, lsl #2
   1ebc0:	ldr	r8, [r0, #8]
   1ebc4:	ldr	r4, [r8, r6, lsl #2]
   1ebc8:	ldr	r0, [r4]
   1ebcc:	cmp	r7, r0
   1ebd0:	bne	1ebe8 <__assert_fail@plt+0xd6d0>
   1ebd4:	add	r0, r4, #4
   1ebd8:	mov	r1, sl
   1ebdc:	bl	1b914 <__assert_fail@plt+0xa3fc>
   1ebe0:	cmp	r0, #0
   1ebe4:	bne	1ec14 <__assert_fail@plt+0xd6fc>
   1ebe8:	ldr	r0, [r5]
   1ebec:	add	r6, r6, #1
   1ebf0:	cmp	r6, r0
   1ebf4:	blt	1ebc4 <__assert_fail@plt+0xd6ac>
   1ebf8:	mov	r0, r9
   1ebfc:	mov	r1, sl
   1ec00:	mov	r2, r7
   1ec04:	bl	1ec40 <__assert_fail@plt+0xd728>
   1ec08:	mov	r4, r0
   1ec0c:	cmp	r0, #0
   1ec10:	beq	1ec2c <__assert_fail@plt+0xd714>
   1ec14:	mov	r0, r4
   1ec18:	sub	sp, fp, #28
   1ec1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec20:	mov	r4, #0
   1ec24:	str	r4, [r0]
   1ec28:	b	1ec14 <__assert_fail@plt+0xd6fc>
   1ec2c:	mov	r0, #12
   1ec30:	ldr	r1, [sp]
   1ec34:	str	r0, [r1]
   1ec38:	mov	r4, #0
   1ec3c:	b	1ec14 <__assert_fail@plt+0xd6fc>
   1ec40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ec44:	add	fp, sp, #24
   1ec48:	mov	r8, r2
   1ec4c:	mov	r7, r1
   1ec50:	mov	r9, r0
   1ec54:	mov	r0, #56	; 0x38
   1ec58:	mov	r1, #1
   1ec5c:	bl	225d0 <__assert_fail@plt+0x110b8>
   1ec60:	cmp	r0, #0
   1ec64:	beq	1ed5c <__assert_fail@plt+0xd844>
   1ec68:	mov	r4, r0
   1ec6c:	add	r5, r0, #4
   1ec70:	mov	r0, r5
   1ec74:	mov	r1, r7
   1ec78:	bl	1b70c <__assert_fail@plt+0xa1f4>
   1ec7c:	cmp	r0, #0
   1ec80:	bne	1ed48 <__assert_fail@plt+0xd830>
   1ec84:	str	r5, [r4, #40]	; 0x28
   1ec88:	ldr	r0, [r7, #4]
   1ec8c:	cmp	r0, #1
   1ec90:	blt	1ed28 <__assert_fail@plt+0xd810>
   1ec94:	mov	r0, #0
   1ec98:	movw	ip, #65280	; 0xff00
   1ec9c:	movt	ip, #3
   1eca0:	add	r2, ip, #255	; 0xff
   1eca4:	mov	lr, #32
   1eca8:	ldr	r1, [r7, #8]
   1ecac:	ldr	r1, [r1, r0, lsl #2]
   1ecb0:	ldr	r3, [r9]
   1ecb4:	add	r5, r3, r1, lsl #3
   1ecb8:	ldr	r3, [r5, #4]!
   1ecbc:	and	r1, r3, r2
   1ecc0:	cmp	r1, #1
   1ecc4:	beq	1ed18 <__assert_fail@plt+0xd800>
   1ecc8:	and	r1, lr, r3, lsr #15
   1eccc:	ldrb	r6, [r4, #52]	; 0x34
   1ecd0:	orr	r1, r6, r1
   1ecd4:	strb	r1, [r4, #52]	; 0x34
   1ecd8:	uxtb	r3, r3
   1ecdc:	cmp	r3, #12
   1ece0:	beq	1ed10 <__assert_fail@plt+0xd7f8>
   1ece4:	cmp	r3, #4
   1ece8:	beq	1ecfc <__assert_fail@plt+0xd7e4>
   1ecec:	cmp	r3, #2
   1ecf0:	bne	1ed04 <__assert_fail@plt+0xd7ec>
   1ecf4:	orr	r1, r1, #16
   1ecf8:	b	1ed14 <__assert_fail@plt+0xd7fc>
   1ecfc:	orr	r1, r1, #64	; 0x40
   1ed00:	b	1ed14 <__assert_fail@plt+0xd7fc>
   1ed04:	ldr	r3, [r5]
   1ed08:	tst	r3, ip
   1ed0c:	beq	1ed18 <__assert_fail@plt+0xd800>
   1ed10:	orr	r1, r1, #128	; 0x80
   1ed14:	strb	r1, [r4, #52]	; 0x34
   1ed18:	ldr	r1, [r7, #4]
   1ed1c:	add	r0, r0, #1
   1ed20:	cmp	r0, r1
   1ed24:	blt	1eca8 <__assert_fail@plt+0xd790>
   1ed28:	mov	r0, r9
   1ed2c:	mov	r1, r4
   1ed30:	mov	r2, r8
   1ed34:	bl	1bbc8 <__assert_fail@plt+0xa6b0>
   1ed38:	cmp	r0, #0
   1ed3c:	bne	1ed54 <__assert_fail@plt+0xd83c>
   1ed40:	mov	r0, r4
   1ed44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ed48:	mov	r0, r4
   1ed4c:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ed50:	b	1ed5c <__assert_fail@plt+0xd844>
   1ed54:	mov	r0, r4
   1ed58:	bl	16124 <__assert_fail@plt+0x4c0c>
   1ed5c:	mov	r4, #0
   1ed60:	mov	r0, r4
   1ed64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ed68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed6c:	add	fp, sp, #28
   1ed70:	sub	sp, sp, #4
   1ed74:	mov	sl, r3
   1ed78:	mov	r7, r2
   1ed7c:	mov	r5, r0
   1ed80:	ldr	r6, [r0]
   1ed84:	add	r0, r6, r1, lsl #3
   1ed88:	ldrb	r8, [r0, #4]
   1ed8c:	cmp	r8, #7
   1ed90:	beq	1ef30 <__assert_fail@plt+0xda18>
   1ed94:	mov	r4, r1
   1ed98:	mov	r0, r7
   1ed9c:	mov	r1, sl
   1eda0:	bl	1a190 <__assert_fail@plt+0x8c78>
   1eda4:	mov	r9, r0
   1eda8:	mov	r2, #0
   1edac:	cmp	r8, #5
   1edb0:	bne	1edf4 <__assert_fail@plt+0xd8dc>
   1edb4:	cmp	r9, #2
   1edb8:	blt	1ef1c <__assert_fail@plt+0xda04>
   1edbc:	ldr	r0, [r5, #128]	; 0x80
   1edc0:	tst	r0, #64	; 0x40
   1edc4:	bne	1edd8 <__assert_fail@plt+0xd8c0>
   1edc8:	ldr	r1, [r7, #4]
   1edcc:	ldrb	r1, [r1, sl]
   1edd0:	cmp	r1, #10
   1edd4:	beq	1ef1c <__assert_fail@plt+0xda04>
   1edd8:	tst	r0, #128	; 0x80
   1eddc:	beq	1ef18 <__assert_fail@plt+0xda00>
   1ede0:	ldr	r0, [r7, #4]
   1ede4:	ldrb	r0, [r0, sl]
   1ede8:	cmp	r0, #0
   1edec:	movne	r2, r9
   1edf0:	b	1ef1c <__assert_fail@plt+0xda04>
   1edf4:	cmp	r8, #6
   1edf8:	bne	1ef1c <__assert_fail@plt+0xda04>
   1edfc:	cmp	r9, #2
   1ee00:	blt	1ef1c <__assert_fail@plt+0xda04>
   1ee04:	ldr	r4, [r6, r4, lsl #3]
   1ee08:	ldr	r0, [r4, #32]
   1ee0c:	cmp	r0, #0
   1ee10:	bne	1ee2c <__assert_fail@plt+0xd914>
   1ee14:	ldr	r0, [r4, #36]	; 0x24
   1ee18:	cmp	r0, #0
   1ee1c:	bne	1ee2c <__assert_fail@plt+0xd914>
   1ee20:	ldr	r0, [r4, #20]
   1ee24:	cmp	r0, #0
   1ee28:	beq	1ef28 <__assert_fail@plt+0xda10>
   1ee2c:	mov	r0, r7
   1ee30:	mov	r1, sl
   1ee34:	bl	17f04 <__assert_fail@plt+0x69ec>
   1ee38:	mov	r6, r0
   1ee3c:	ldr	r0, [r4, #20]
   1ee40:	cmp	r0, #1
   1ee44:	blt	1ee6c <__assert_fail@plt+0xd954>
   1ee48:	ldr	r0, [r4]
   1ee4c:	mov	r1, #0
   1ee50:	ldr	r2, [r0, r1, lsl #2]
   1ee54:	cmp	r6, r2
   1ee58:	beq	1eeec <__assert_fail@plt+0xd9d4>
   1ee5c:	add	r1, r1, #1
   1ee60:	ldr	r2, [r4, #20]
   1ee64:	cmp	r1, r2
   1ee68:	blt	1ee50 <__assert_fail@plt+0xd938>
   1ee6c:	ldr	r0, [r4, #36]	; 0x24
   1ee70:	cmp	r0, #1
   1ee74:	blt	1eea4 <__assert_fail@plt+0xd98c>
   1ee78:	mov	r5, #0
   1ee7c:	ldr	r0, [r4, #12]
   1ee80:	ldr	r1, [r0, r5, lsl #2]
   1ee84:	mov	r0, r6
   1ee88:	bl	1123c <iswctype@plt>
   1ee8c:	cmp	r0, #0
   1ee90:	bne	1eeec <__assert_fail@plt+0xd9d4>
   1ee94:	add	r5, r5, #1
   1ee98:	ldr	r0, [r4, #36]	; 0x24
   1ee9c:	cmp	r5, r0
   1eea0:	blt	1ee7c <__assert_fail@plt+0xd964>
   1eea4:	ldr	r0, [r4, #32]
   1eea8:	cmp	r0, #1
   1eeac:	blt	1eee4 <__assert_fail@plt+0xd9cc>
   1eeb0:	ldr	r0, [r4, #4]
   1eeb4:	mov	r1, #0
   1eeb8:	ldr	r2, [r0, r1, lsl #2]
   1eebc:	cmp	r2, r6
   1eec0:	bhi	1eed4 <__assert_fail@plt+0xd9bc>
   1eec4:	ldr	r2, [r4, #8]
   1eec8:	ldr	r2, [r2, r1, lsl #2]
   1eecc:	cmp	r6, r2
   1eed0:	bls	1eeec <__assert_fail@plt+0xd9d4>
   1eed4:	add	r1, r1, #1
   1eed8:	ldr	r2, [r4, #32]
   1eedc:	cmp	r1, r2
   1eee0:	blt	1eeb8 <__assert_fail@plt+0xd9a0>
   1eee4:	mov	r0, #0
   1eee8:	b	1eef0 <__assert_fail@plt+0xd9d8>
   1eeec:	mov	r0, r9
   1eef0:	ldrb	r1, [r4, #16]
   1eef4:	tst	r1, #1
   1eef8:	mov	r2, #0
   1eefc:	bne	1ef08 <__assert_fail@plt+0xd9f0>
   1ef00:	mov	r2, r0
   1ef04:	b	1ef1c <__assert_fail@plt+0xda04>
   1ef08:	cmp	r0, #0
   1ef0c:	bgt	1ef1c <__assert_fail@plt+0xda04>
   1ef10:	cmp	r9, #1
   1ef14:	movle	r9, #1
   1ef18:	mov	r2, r9
   1ef1c:	mov	r0, r2
   1ef20:	sub	sp, fp, #28
   1ef24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef28:	mov	r6, #0
   1ef2c:	b	1ee3c <__assert_fail@plt+0xd924>
   1ef30:	ldr	r0, [r7, #4]
   1ef34:	ldrb	r5, [r0, sl]
   1ef38:	mov	r2, #0
   1ef3c:	cmp	r5, #194	; 0xc2
   1ef40:	bcc	1ef1c <__assert_fail@plt+0xda04>
   1ef44:	ldr	r1, [r7, #48]	; 0x30
   1ef48:	add	r2, sl, #2
   1ef4c:	cmp	r2, r1
   1ef50:	ble	1ef5c <__assert_fail@plt+0xda44>
   1ef54:	mov	r2, #0
   1ef58:	b	1ef1c <__assert_fail@plt+0xda04>
   1ef5c:	add	r0, r0, sl
   1ef60:	ldrb	r3, [r0, #1]
   1ef64:	cmp	r5, #223	; 0xdf
   1ef68:	bhi	1ef88 <__assert_fail@plt+0xda70>
   1ef6c:	mov	r2, #2
   1ef70:	cmp	r3, #191	; 0xbf
   1ef74:	movwhi	r2, #0
   1ef78:	sxtb	r0, r3
   1ef7c:	cmn	r0, #1
   1ef80:	movwgt	r2, #0
   1ef84:	b	1ef1c <__assert_fail@plt+0xda04>
   1ef88:	cmp	r5, #239	; 0xef
   1ef8c:	bhi	1efa8 <__assert_fail@plt+0xda90>
   1ef90:	mov	r2, #3
   1ef94:	cmp	r5, #224	; 0xe0
   1ef98:	bne	1f004 <__assert_fail@plt+0xdaec>
   1ef9c:	cmp	r3, #160	; 0xa0
   1efa0:	bcc	1ef54 <__assert_fail@plt+0xda3c>
   1efa4:	b	1f004 <__assert_fail@plt+0xdaec>
   1efa8:	cmp	r5, #247	; 0xf7
   1efac:	bhi	1efc8 <__assert_fail@plt+0xdab0>
   1efb0:	mov	r2, #4
   1efb4:	cmp	r5, #240	; 0xf0
   1efb8:	bne	1f004 <__assert_fail@plt+0xdaec>
   1efbc:	cmp	r3, #144	; 0x90
   1efc0:	bcc	1ef54 <__assert_fail@plt+0xda3c>
   1efc4:	b	1f004 <__assert_fail@plt+0xdaec>
   1efc8:	cmp	r5, #251	; 0xfb
   1efcc:	bhi	1efe8 <__assert_fail@plt+0xdad0>
   1efd0:	mov	r2, #5
   1efd4:	cmp	r5, #248	; 0xf8
   1efd8:	bne	1f004 <__assert_fail@plt+0xdaec>
   1efdc:	cmp	r3, #136	; 0x88
   1efe0:	bcc	1ef54 <__assert_fail@plt+0xda3c>
   1efe4:	b	1f004 <__assert_fail@plt+0xdaec>
   1efe8:	cmp	r5, #253	; 0xfd
   1efec:	bhi	1ef54 <__assert_fail@plt+0xda3c>
   1eff0:	mov	r2, #6
   1eff4:	cmp	r5, #252	; 0xfc
   1eff8:	bne	1f004 <__assert_fail@plt+0xdaec>
   1effc:	cmp	r3, #132	; 0x84
   1f000:	bcc	1ef54 <__assert_fail@plt+0xda3c>
   1f004:	add	r3, r2, sl
   1f008:	cmp	r3, r1
   1f00c:	bgt	1ef54 <__assert_fail@plt+0xda3c>
   1f010:	mov	r1, #1
   1f014:	ldrb	r3, [r0, r1]
   1f018:	sxtb	r7, r3
   1f01c:	cmn	r7, #1
   1f020:	bgt	1ef54 <__assert_fail@plt+0xda3c>
   1f024:	cmp	r3, #191	; 0xbf
   1f028:	bhi	1ef54 <__assert_fail@plt+0xda3c>
   1f02c:	add	r1, r1, #1
   1f030:	cmp	r1, r2
   1f034:	bcc	1f014 <__assert_fail@plt+0xdafc>
   1f038:	b	1ef1c <__assert_fail@plt+0xda04>
   1f03c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f040:	add	fp, sp, #24
   1f044:	mov	r6, r0
   1f048:	ldr	r7, [r1, #4]
   1f04c:	mvn	r0, #0
   1f050:	uxtab	r0, r0, r7
   1f054:	mov	r8, #0
   1f058:	cmp	r0, #6
   1f05c:	bhi	1f168 <__assert_fail@plt+0xdc50>
   1f060:	mov	r5, r2
   1f064:	ldr	r2, [r6, #4]
   1f068:	ldrb	r2, [r2, r5]
   1f06c:	sxtb	r3, r2
   1f070:	add	r4, pc, #0
   1f074:	ldr	pc, [r4, r0, lsl #2]
   1f078:	muleq	r1, r4, r0
   1f07c:	andeq	pc, r1, r8, ror #2
   1f080:	andeq	pc, r1, r8, lsr #1
   1f084:	andeq	pc, r1, r8, ror #2
   1f088:	andeq	pc, r1, r8, asr #1
   1f08c:	andeq	pc, r1, r8, ror #2
   1f090:	andeq	pc, r1, r0, asr #1
   1f094:	ldrb	r0, [r1]
   1f098:	uxtb	r1, r3
   1f09c:	cmp	r0, r1
   1f0a0:	beq	1f0fc <__assert_fail@plt+0xdbe4>
   1f0a4:	b	1f168 <__assert_fail@plt+0xdc50>
   1f0a8:	ldr	r0, [r1]
   1f0ac:	mov	r1, r2
   1f0b0:	bl	1d05c <__assert_fail@plt+0xbb44>
   1f0b4:	cmp	r0, #0
   1f0b8:	bne	1f0fc <__assert_fail@plt+0xdbe4>
   1f0bc:	b	1f168 <__assert_fail@plt+0xdc50>
   1f0c0:	cmp	r3, #0
   1f0c4:	blt	1f168 <__assert_fail@plt+0xdc50>
   1f0c8:	cmp	r2, #0
   1f0cc:	beq	1f0ec <__assert_fail@plt+0xdbd4>
   1f0d0:	cmp	r2, #10
   1f0d4:	bne	1f0fc <__assert_fail@plt+0xdbe4>
   1f0d8:	ldr	r0, [r6, #84]	; 0x54
   1f0dc:	ldrb	r0, [r0, #128]	; 0x80
   1f0e0:	tst	r0, #64	; 0x40
   1f0e4:	bne	1f0fc <__assert_fail@plt+0xdbe4>
   1f0e8:	b	1f168 <__assert_fail@plt+0xdc50>
   1f0ec:	ldr	r0, [r6, #84]	; 0x54
   1f0f0:	ldrb	r0, [r0, #128]	; 0x80
   1f0f4:	tst	r0, #128	; 0x80
   1f0f8:	bne	1f168 <__assert_fail@plt+0xdc50>
   1f0fc:	movw	r0, #65280	; 0xff00
   1f100:	movt	r0, #3
   1f104:	tst	r7, r0
   1f108:	beq	1f164 <__assert_fail@plt+0xdc4c>
   1f10c:	ldr	r2, [r6, #88]	; 0x58
   1f110:	mov	r0, r6
   1f114:	mov	r1, r5
   1f118:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1f11c:	and	r1, r0, #1
   1f120:	tst	r7, #1024	; 0x400
   1f124:	beq	1f130 <__assert_fail@plt+0xdc18>
   1f128:	cmp	r1, #0
   1f12c:	beq	1f168 <__assert_fail@plt+0xdc50>
   1f130:	tst	r7, #2048	; 0x800
   1f134:	cmpne	r1, #0
   1f138:	bne	1f168 <__assert_fail@plt+0xdc50>
   1f13c:	tst	r7, #8192	; 0x2000
   1f140:	beq	1f14c <__assert_fail@plt+0xdc34>
   1f144:	ands	r1, r0, #2
   1f148:	beq	1f168 <__assert_fail@plt+0xdc50>
   1f14c:	and	r1, r7, #32768	; 0x8000
   1f150:	mov	r2, #1
   1f154:	eor	r1, r2, r1, lsr #15
   1f158:	and	r0, r0, #8
   1f15c:	orr	r0, r1, r0, lsr #3
   1f160:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f164:	mov	r8, #1
   1f168:	mov	r0, r8
   1f16c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f174:	add	fp, sp, #28
   1f178:	sub	sp, sp, #20
   1f17c:	mov	r5, r0
   1f180:	ldr	r0, [r1, #8]
   1f184:	cmp	r0, #1
   1f188:	blt	1f328 <__assert_fail@plt+0xde10>
   1f18c:	mov	r4, r1
   1f190:	ldr	sl, [r5, #84]	; 0x54
   1f194:	mov	r8, #0
   1f198:	movw	r9, #65280	; 0xff00
   1f19c:	movt	r9, #3
   1f1a0:	ldr	r0, [r4, #12]
   1f1a4:	ldr	r7, [r0, r8, lsl #2]
   1f1a8:	ldr	r0, [sl]
   1f1ac:	add	r0, r0, r7, lsl #3
   1f1b0:	ldr	r6, [r0, #4]
   1f1b4:	tst	r6, #1048576	; 0x100000
   1f1b8:	beq	1f318 <__assert_fail@plt+0xde00>
   1f1bc:	tst	r6, r9
   1f1c0:	beq	1f214 <__assert_fail@plt+0xdcfc>
   1f1c4:	ldr	r1, [r5, #40]	; 0x28
   1f1c8:	ldr	r2, [r5, #88]	; 0x58
   1f1cc:	mov	r0, r5
   1f1d0:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1f1d4:	and	r1, r0, #1
   1f1d8:	tst	r6, #1024	; 0x400
   1f1dc:	beq	1f1e8 <__assert_fail@plt+0xdcd0>
   1f1e0:	cmp	r1, #0
   1f1e4:	beq	1f318 <__assert_fail@plt+0xde00>
   1f1e8:	tst	r6, #2048	; 0x800
   1f1ec:	cmpne	r1, #0
   1f1f0:	bne	1f318 <__assert_fail@plt+0xde00>
   1f1f4:	tst	r6, #8192	; 0x2000
   1f1f8:	beq	1f204 <__assert_fail@plt+0xdcec>
   1f1fc:	ands	r1, r0, #2
   1f200:	beq	1f318 <__assert_fail@plt+0xde00>
   1f204:	tst	r6, #32768	; 0x8000
   1f208:	beq	1f214 <__assert_fail@plt+0xdcfc>
   1f20c:	ands	r0, r0, #8
   1f210:	beq	1f318 <__assert_fail@plt+0xde00>
   1f214:	ldr	r3, [r5, #40]	; 0x28
   1f218:	mov	r0, sl
   1f21c:	mov	r1, r7
   1f220:	mov	r2, r5
   1f224:	bl	1ed68 <__assert_fail@plt+0xd850>
   1f228:	cmp	r0, #0
   1f22c:	beq	1f318 <__assert_fail@plt+0xde00>
   1f230:	ldr	r1, [r5, #40]	; 0x28
   1f234:	ldr	r2, [r5, #120]	; 0x78
   1f238:	cmp	r2, r0
   1f23c:	movlt	r2, r0
   1f240:	str	r2, [r5, #120]	; 0x78
   1f244:	add	r6, r1, r0
   1f248:	mov	r0, r5
   1f24c:	mov	r1, r6
   1f250:	bl	1de44 <__assert_fail@plt+0xc92c>
   1f254:	str	r0, [sp, #16]
   1f258:	cmp	r0, #0
   1f25c:	bne	1f32c <__assert_fail@plt+0xde14>
   1f260:	ldr	r0, [r5, #100]	; 0x64
   1f264:	ldr	r9, [r0, r6, lsl #2]
   1f268:	ldr	r0, [sl, #12]
   1f26c:	ldr	r1, [sl, #24]
   1f270:	ldr	r0, [r0, r7, lsl #2]
   1f274:	add	r0, r0, r0, lsl #1
   1f278:	add	r2, r1, r0, lsl #2
   1f27c:	cmp	r9, #0
   1f280:	beq	1f2a4 <__assert_fail@plt+0xdd8c>
   1f284:	ldr	r1, [r9, #40]	; 0x28
   1f288:	mov	r7, sp
   1f28c:	mov	r0, r7
   1f290:	bl	1db88 <__assert_fail@plt+0xc670>
   1f294:	str	r0, [sp, #16]
   1f298:	cmp	r0, #0
   1f29c:	beq	1f2b8 <__assert_fail@plt+0xdda0>
   1f2a0:	b	1f32c <__assert_fail@plt+0xde14>
   1f2a4:	vldr	d16, [r2]
   1f2a8:	ldr	r0, [r2, #8]
   1f2ac:	str	r0, [sp, #8]
   1f2b0:	vstr	d16, [sp]
   1f2b4:	mov	r7, sp
   1f2b8:	ldr	r2, [r5, #88]	; 0x58
   1f2bc:	sub	r1, r6, #1
   1f2c0:	mov	r0, r5
   1f2c4:	bl	1cee4 <__assert_fail@plt+0xb9cc>
   1f2c8:	mov	r3, r0
   1f2cc:	add	r0, sp, #16
   1f2d0:	mov	r1, sl
   1f2d4:	mov	r2, r7
   1f2d8:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   1f2dc:	ldr	r1, [r5, #100]	; 0x64
   1f2e0:	str	r0, [r1, r6, lsl #2]
   1f2e4:	cmp	r9, #0
   1f2e8:	beq	1f2f4 <__assert_fail@plt+0xdddc>
   1f2ec:	ldr	r0, [sp, #8]
   1f2f0:	bl	22b14 <__assert_fail@plt+0x115fc>
   1f2f4:	ldr	r0, [r5, #100]	; 0x64
   1f2f8:	ldr	r0, [r0, r6, lsl #2]
   1f2fc:	cmp	r0, #0
   1f300:	movw	r9, #65280	; 0xff00
   1f304:	movt	r9, #3
   1f308:	bne	1f318 <__assert_fail@plt+0xde00>
   1f30c:	ldr	r0, [sp, #16]
   1f310:	cmp	r0, #0
   1f314:	bne	1f32c <__assert_fail@plt+0xde14>
   1f318:	add	r8, r8, #1
   1f31c:	ldr	r0, [r4, #8]
   1f320:	cmp	r8, r0
   1f324:	blt	1f1a0 <__assert_fail@plt+0xdc88>
   1f328:	mov	r0, #0
   1f32c:	sub	sp, fp, #28
   1f330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f338:	add	fp, sp, #28
   1f33c:	sub	sp, sp, #68	; 0x44
   1f340:	sub	sp, sp, #14336	; 0x3800
   1f344:	mov	r4, r1
   1f348:	mov	r7, r0
   1f34c:	mov	r6, #0
   1f350:	str	r6, [r1, #44]	; 0x2c
   1f354:	str	r6, [r1, #48]	; 0x30
   1f358:	sub	lr, fp, #4096	; 0x1000
   1f35c:	sub	r2, lr, #2128	; 0x850
   1f360:	add	r3, sp, #16
   1f364:	bl	1f7e4 <__assert_fail@plt+0xe2cc>
   1f368:	cmp	r0, #0
   1f36c:	ble	1f6fc <__assert_fail@plt+0xe1e4>
   1f370:	mov	r5, r0
   1f374:	str	r4, [sp, #4]
   1f378:	add	r1, r0, #1
   1f37c:	sub	r0, fp, #3120	; 0xc30
   1f380:	bl	1b04c <__assert_fail@plt+0x9b34>
   1f384:	str	r0, [fp, #-36]	; 0xffffffdc
   1f388:	cmp	r0, #0
   1f38c:	bne	1f6c8 <__assert_fail@plt+0xe1b0>
   1f390:	sub	r0, fp, #3152	; 0xc50
   1f394:	bl	1fd14 <__assert_fail@plt+0xe7fc>
   1f398:	sub	r9, fp, #3120	; 0xc30
   1f39c:	sub	lr, fp, #1024	; 0x400
   1f3a0:	sub	r6, lr, #36	; 0x24
   1f3a4:	mov	sl, #0
   1f3a8:	mov	r0, #0
   1f3ac:	str	r0, [sp, #8]
   1f3b0:	str	r5, [sp, #12]
   1f3b4:	mov	r0, #0
   1f3b8:	str	r0, [fp, #-3116]	; 0xfffff3d4
   1f3bc:	add	r0, sl, sl, lsl #1
   1f3c0:	sub	lr, fp, #4096	; 0x1000
   1f3c4:	sub	r1, lr, #2128	; 0x850
   1f3c8:	add	r0, r1, r0, lsl #2
   1f3cc:	mov	r4, r0
   1f3d0:	ldr	r1, [r4, #4]!
   1f3d4:	cmp	r1, #1
   1f3d8:	blt	1f43c <__assert_fail@plt+0xdf24>
   1f3dc:	ldr	r5, [r0, #8]
   1f3e0:	mov	r6, #0
   1f3e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1f3e8:	ldr	r0, [r5, r6, lsl #2]
   1f3ec:	ldr	r2, [r7, #12]
   1f3f0:	ldr	r0, [r2, r0, lsl #2]
   1f3f4:	cmn	r0, #1
   1f3f8:	beq	1f41c <__assert_fail@plt+0xdf04>
   1f3fc:	ldr	r1, [r7, #24]
   1f400:	add	r0, r0, r0, lsl #1
   1f404:	add	r1, r1, r0, lsl #2
   1f408:	mov	r0, r9
   1f40c:	bl	1b308 <__assert_fail@plt+0x9df0>
   1f410:	mov	r1, #0
   1f414:	cmp	r0, #0
   1f418:	bne	1f6c0 <__assert_fail@plt+0xe1a8>
   1f41c:	ldr	r0, [r4]
   1f420:	add	r6, r6, #1
   1f424:	cmp	r6, r0
   1f428:	blt	1f3e8 <__assert_fail@plt+0xded0>
   1f42c:	str	r1, [fp, #-36]	; 0xffffffdc
   1f430:	ldr	r5, [sp, #12]
   1f434:	sub	lr, fp, #1024	; 0x400
   1f438:	sub	r6, lr, #36	; 0x24
   1f43c:	sub	r0, fp, #36	; 0x24
   1f440:	mov	r1, r7
   1f444:	mov	r2, r9
   1f448:	mov	r3, #0
   1f44c:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   1f450:	mov	r8, r0
   1f454:	str	r0, [r6, sl, lsl #2]
   1f458:	cmp	r0, #0
   1f45c:	bne	1f46c <__assert_fail@plt+0xdf54>
   1f460:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f464:	cmp	r0, #0
   1f468:	bne	1f6c8 <__assert_fail@plt+0xe1b0>
   1f46c:	ldrsb	r0, [r8, #52]	; 0x34
   1f470:	cmn	r0, #1
   1f474:	ble	1f498 <__assert_fail@plt+0xdf80>
   1f478:	sub	lr, fp, #2048	; 0x800
   1f47c:	sub	r0, lr, #36	; 0x24
   1f480:	str	r8, [r0, sl, lsl #2]
   1f484:	ldr	r0, [r6, sl, lsl #2]
   1f488:	sub	lr, fp, #3072	; 0xc00
   1f48c:	sub	r1, lr, #36	; 0x24
   1f490:	str	r0, [r1, sl, lsl #2]
   1f494:	b	1f524 <__assert_fail@plt+0xe00c>
   1f498:	sub	r0, fp, #36	; 0x24
   1f49c:	mov	r1, r7
   1f4a0:	mov	r2, r9
   1f4a4:	mov	r3, #1
   1f4a8:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   1f4ac:	sub	lr, fp, #2048	; 0x800
   1f4b0:	sub	r1, lr, #36	; 0x24
   1f4b4:	str	r0, [r1, sl, lsl #2]
   1f4b8:	cmp	r0, #0
   1f4bc:	bne	1f4cc <__assert_fail@plt+0xdfb4>
   1f4c0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1f4c4:	cmp	r1, #0
   1f4c8:	bne	1f6c8 <__assert_fail@plt+0xe1b0>
   1f4cc:	cmp	r8, r0
   1f4d0:	beq	1f4f0 <__assert_fail@plt+0xdfd8>
   1f4d4:	ldr	r0, [r7, #92]	; 0x5c
   1f4d8:	cmp	r0, #1
   1f4dc:	mov	r0, #0
   1f4e0:	movwgt	r0, #1
   1f4e4:	ldr	r1, [sp, #8]
   1f4e8:	orr	r1, r1, r0
   1f4ec:	str	r1, [sp, #8]
   1f4f0:	sub	r0, fp, #36	; 0x24
   1f4f4:	mov	r1, r7
   1f4f8:	mov	r2, r9
   1f4fc:	mov	r3, #2
   1f500:	bl	1b7f4 <__assert_fail@plt+0xa2dc>
   1f504:	sub	lr, fp, #3072	; 0xc00
   1f508:	sub	r1, lr, #36	; 0x24
   1f50c:	str	r0, [r1, sl, lsl #2]
   1f510:	cmp	r0, #0
   1f514:	bne	1f524 <__assert_fail@plt+0xe00c>
   1f518:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f51c:	cmp	r0, #0
   1f520:	bne	1f6c8 <__assert_fail@plt+0xe1b0>
   1f524:	add	r0, sp, #16
   1f528:	add	r1, r0, sl, lsl #5
   1f52c:	sub	r0, fp, #3152	; 0xc50
   1f530:	bl	1fd24 <__assert_fail@plt+0xe80c>
   1f534:	add	sl, sl, #1
   1f538:	cmp	sl, r5
   1f53c:	blt	1f3b4 <__assert_fail@plt+0xde9c>
   1f540:	ldr	r0, [sp, #8]
   1f544:	tst	r0, #1
   1f548:	bne	1f720 <__assert_fail@plt+0xe208>
   1f54c:	mov	r0, #4
   1f550:	mov	r1, #256	; 0x100
   1f554:	bl	225d0 <__assert_fail@plt+0x110b8>
   1f558:	mov	r8, r0
   1f55c:	ldr	r0, [sp, #4]
   1f560:	str	r8, [r0, #44]	; 0x2c
   1f564:	cmp	r8, #0
   1f568:	beq	1f6c8 <__assert_fail@plt+0xe1b0>
   1f56c:	mov	r0, #0
   1f570:	mov	r1, #0
   1f574:	add	r5, sp, #16
   1f578:	mov	r9, r5
   1f57c:	sub	r2, fp, #3152	; 0xc50
   1f580:	ldr	r2, [r2, r1, lsl #2]
   1f584:	cmp	r2, #0
   1f588:	beq	1f600 <__assert_fail@plt+0xe0e8>
   1f58c:	add	r3, r7, r1, lsl #2
   1f590:	add	ip, r3, #96	; 0x60
   1f594:	lsl	r4, r1, #5
   1f598:	mov	r6, #1
   1f59c:	b	1f5e0 <__assert_fail@plt+0xe0c8>
   1f5a0:	mov	lr, #0
   1f5a4:	ldr	r3, [r9, lr, lsl #3]
   1f5a8:	add	lr, lr, #4
   1f5ac:	tst	r3, r6
   1f5b0:	beq	1f5a4 <__assert_fail@plt+0xe08c>
   1f5b4:	ldr	r3, [ip]
   1f5b8:	tst	r3, r6
   1f5bc:	sub	r3, fp, #2048	; 0x800
   1f5c0:	sub	r3, r3, #36	; 0x24
   1f5c4:	sub	r5, fp, #1024	; 0x400
   1f5c8:	sub	r5, r5, #36	; 0x24
   1f5cc:	moveq	r3, r5
   1f5d0:	add	r3, r3, lr
   1f5d4:	ldr	r3, [r3, #-4]
   1f5d8:	str	r3, [r8, r4, lsl #2]
   1f5dc:	b	1f5e8 <__assert_fail@plt+0xe0d0>
   1f5e0:	tst	r2, #1
   1f5e4:	bne	1f5a0 <__assert_fail@plt+0xe088>
   1f5e8:	add	r4, r4, #1
   1f5ec:	lsr	r3, r2, #1
   1f5f0:	lsl	r6, r6, #1
   1f5f4:	cmp	r0, r2, lsr #1
   1f5f8:	mov	r2, r3
   1f5fc:	bne	1f5e0 <__assert_fail@plt+0xe0c8>
   1f600:	add	r9, r9, #4
   1f604:	add	r1, r1, #1
   1f608:	cmp	r1, #8
   1f60c:	bne	1f57c <__assert_fail@plt+0xe064>
   1f610:	sub	r0, fp, #3152	; 0xc50
   1f614:	mov	r1, #10
   1f618:	bl	1d05c <__assert_fail@plt+0xbb44>
   1f61c:	cmp	r0, #0
   1f620:	beq	1f680 <__assert_fail@plt+0xe168>
   1f624:	ldr	r0, [sp, #12]
   1f628:	cmp	r0, #1
   1f62c:	blt	1f680 <__assert_fail@plt+0xe168>
   1f630:	mov	r4, #0
   1f634:	add	r5, sp, #16
   1f638:	mov	r0, r5
   1f63c:	mov	r1, #10
   1f640:	bl	1d05c <__assert_fail@plt+0xbb44>
   1f644:	cmp	r0, #0
   1f648:	bne	1f664 <__assert_fail@plt+0xe14c>
   1f64c:	add	r5, r5, #32
   1f650:	add	r4, r4, #1
   1f654:	ldr	r0, [sp, #12]
   1f658:	cmp	r4, r0
   1f65c:	blt	1f638 <__assert_fail@plt+0xe120>
   1f660:	b	1f680 <__assert_fail@plt+0xe168>
   1f664:	sub	lr, fp, #3072	; 0xc00
   1f668:	sub	r0, lr, #36	; 0x24
   1f66c:	ldr	r0, [r0, r4, lsl #2]
   1f670:	str	r0, [r8, #40]	; 0x28
   1f674:	ldr	r1, [sp, #8]
   1f678:	tst	r1, #1
   1f67c:	strne	r0, [r8, #1064]	; 0x428
   1f680:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   1f684:	bl	22b14 <__assert_fail@plt+0x115fc>
   1f688:	mov	r6, #1
   1f68c:	ldr	r5, [sp, #12]
   1f690:	cmp	r5, #1
   1f694:	blt	1f6b4 <__assert_fail@plt+0xe19c>
   1f698:	sub	lr, fp, #4096	; 0x1000
   1f69c:	sub	r0, lr, #2128	; 0x850
   1f6a0:	add	r4, r0, #8
   1f6a4:	ldr	r0, [r4], #12
   1f6a8:	bl	22b14 <__assert_fail@plt+0x115fc>
   1f6ac:	subs	r5, r5, #1
   1f6b0:	bne	1f6a4 <__assert_fail@plt+0xe18c>
   1f6b4:	mov	r0, r6
   1f6b8:	sub	sp, fp, #28
   1f6bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6c0:	str	r0, [fp, #-36]	; 0xffffffdc
   1f6c4:	ldr	r5, [sp, #12]
   1f6c8:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   1f6cc:	bl	22b14 <__assert_fail@plt+0x115fc>
   1f6d0:	mov	r6, #0
   1f6d4:	cmp	r5, #1
   1f6d8:	blt	1f6b4 <__assert_fail@plt+0xe19c>
   1f6dc:	sub	lr, fp, #4096	; 0x1000
   1f6e0:	sub	r0, lr, #2128	; 0x850
   1f6e4:	add	r4, r0, #8
   1f6e8:	ldr	r0, [r4], #12
   1f6ec:	bl	22b14 <__assert_fail@plt+0x115fc>
   1f6f0:	subs	r5, r5, #1
   1f6f4:	bne	1f6e8 <__assert_fail@plt+0xe1d0>
   1f6f8:	b	1f6b4 <__assert_fail@plt+0xe19c>
   1f6fc:	bne	1f6b4 <__assert_fail@plt+0xe19c>
   1f700:	mov	r0, #4
   1f704:	mov	r1, #256	; 0x100
   1f708:	bl	225d0 <__assert_fail@plt+0x110b8>
   1f70c:	mov	r6, r0
   1f710:	str	r0, [r4, #44]	; 0x2c
   1f714:	cmp	r0, #0
   1f718:	movwne	r6, #1
   1f71c:	b	1f6b4 <__assert_fail@plt+0xe19c>
   1f720:	mov	r0, #4
   1f724:	mov	r1, #512	; 0x200
   1f728:	bl	225d0 <__assert_fail@plt+0x110b8>
   1f72c:	mov	r8, r0
   1f730:	ldr	r0, [sp, #4]
   1f734:	str	r8, [r0, #48]	; 0x30
   1f738:	cmp	r8, #0
   1f73c:	beq	1f6c8 <__assert_fail@plt+0xe1b0>
   1f740:	sub	ip, r6, #4
   1f744:	sub	lr, fp, #2048	; 0x800
   1f748:	sub	r0, lr, #36	; 0x24
   1f74c:	sub	lr, r0, #4
   1f750:	mov	r2, #0
   1f754:	add	r3, sp, #16
   1f758:	mov	r7, #0
   1f75c:	sub	r0, fp, #3152	; 0xc50
   1f760:	ldr	r5, [r0, r7, lsl #2]
   1f764:	cmp	r5, #0
   1f768:	beq	1f7d0 <__assert_fail@plt+0xe2b8>
   1f76c:	lsl	r0, r7, #5
   1f770:	mov	r1, #1
   1f774:	b	1f7b0 <__assert_fail@plt+0xe298>
   1f778:	mov	r4, r3
   1f77c:	mov	sl, ip
   1f780:	mov	r9, lr
   1f784:	add	sl, sl, #4
   1f788:	add	r9, r9, #4
   1f78c:	ldr	r6, [r4], #32
   1f790:	tst	r6, r1
   1f794:	beq	1f784 <__assert_fail@plt+0xe26c>
   1f798:	ldr	r4, [sl]
   1f79c:	mov	r6, r8
   1f7a0:	str	r4, [r6, r0, lsl #2]!
   1f7a4:	ldr	r4, [r9]
   1f7a8:	str	r4, [r6, #1024]	; 0x400
   1f7ac:	b	1f7b8 <__assert_fail@plt+0xe2a0>
   1f7b0:	tst	r5, #1
   1f7b4:	bne	1f778 <__assert_fail@plt+0xe260>
   1f7b8:	add	r0, r0, #1
   1f7bc:	lsr	r4, r5, #1
   1f7c0:	lsl	r1, r1, #1
   1f7c4:	cmp	r2, r5, lsr #1
   1f7c8:	mov	r5, r4
   1f7cc:	bne	1f7b0 <__assert_fail@plt+0xe298>
   1f7d0:	add	r3, r3, #4
   1f7d4:	add	r7, r7, #1
   1f7d8:	cmp	r7, #8
   1f7dc:	bne	1f75c <__assert_fail@plt+0xe244>
   1f7e0:	b	1f610 <__assert_fail@plt+0xe0f8>
   1f7e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7e8:	add	fp, sp, #28
   1f7ec:	sub	sp, sp, #148	; 0x94
   1f7f0:	str	r3, [sp, #40]	; 0x28
   1f7f4:	str	r2, [sp, #36]	; 0x24
   1f7f8:	mov	r8, r1
   1f7fc:	mov	sl, r0
   1f800:	sub	r7, fp, #64	; 0x40
   1f804:	mov	r0, r7
   1f808:	bl	1fd14 <__assert_fail@plt+0xe7fc>
   1f80c:	ldr	r0, [r8, #8]
   1f810:	cmp	r0, #1
   1f814:	blt	1fcd0 <__assert_fail@plt+0xe7b8>
   1f818:	add	r4, sl, #96	; 0x60
   1f81c:	mov	r6, #0
   1f820:	add	r5, sp, #80	; 0x50
   1f824:	mov	r0, #0
   1f828:	str	r0, [sp, #44]	; 0x2c
   1f82c:	str	r8, [sp, #16]
   1f830:	stm	sp, {r4, sl}
   1f834:	ldr	r0, [r8, #12]
   1f838:	ldr	r0, [r0, r6, lsl #2]
   1f83c:	ldr	r1, [sl]
   1f840:	add	r3, r1, r0, lsl #3
   1f844:	ldr	r9, [r3, #4]!
   1f848:	uxtb	r2, r9
   1f84c:	cmp	r2, #1
   1f850:	str	r2, [sp, #32]
   1f854:	bne	1f930 <__assert_fail@plt+0xe418>
   1f858:	str	r3, [sp, #12]
   1f85c:	str	r0, [sp, #28]
   1f860:	str	r1, [sp, #24]
   1f864:	ldrb	r1, [r1, r0, lsl #3]
   1f868:	mov	r0, r7
   1f86c:	bl	19524 <__assert_fail@plt+0x800c>
   1f870:	movw	r0, #65280	; 0xff00
   1f874:	movt	r0, #3
   1f878:	ands	r0, r9, r0
   1f87c:	beq	1facc <__assert_fail@plt+0xe5b4>
   1f880:	tst	r9, #8192	; 0x2000
   1f884:	beq	1f8b8 <__assert_fail@plt+0xe3a0>
   1f888:	mov	r0, r7
   1f88c:	mov	r1, #10
   1f890:	bl	1d05c <__assert_fail@plt+0xbb44>
   1f894:	str	r0, [sp, #8]
   1f898:	mov	r0, r7
   1f89c:	bl	1fd14 <__assert_fail@plt+0xe7fc>
   1f8a0:	ldr	r0, [sp, #8]
   1f8a4:	cmp	r0, #0
   1f8a8:	beq	1fca8 <__assert_fail@plt+0xe790>
   1f8ac:	mov	r0, r7
   1f8b0:	mov	r1, #10
   1f8b4:	bl	19524 <__assert_fail@plt+0x800c>
   1f8b8:	tst	r9, #32768	; 0x8000
   1f8bc:	bne	1fa8c <__assert_fail@plt+0xe574>
   1f8c0:	tst	r9, #1024	; 0x400
   1f8c4:	beq	1fa20 <__assert_fail@plt+0xe508>
   1f8c8:	ldr	r0, [sp, #32]
   1f8cc:	cmp	r0, #1
   1f8d0:	bne	1f8e4 <__assert_fail@plt+0xe3cc>
   1f8d4:	ldr	r0, [sp, #12]
   1f8d8:	ldrb	r0, [r0, #2]
   1f8dc:	tst	r0, #64	; 0x40
   1f8e0:	beq	1fa8c <__assert_fail@plt+0xe574>
   1f8e4:	mov	ip, r6
   1f8e8:	ldr	r0, [sl, #92]	; 0x5c
   1f8ec:	cmp	r0, #1
   1f8f0:	ble	1f9ec <__assert_fail@plt+0xe4d4>
   1f8f4:	ldr	r1, [sl, #60]	; 0x3c
   1f8f8:	mov	r0, #0
   1f8fc:	mov	r2, #0
   1f900:	ldr	r3, [r4, r2, lsl #2]
   1f904:	ldr	r6, [r1, r2, lsl #2]
   1f908:	mvn	r6, r6
   1f90c:	orr	r3, r3, r6
   1f910:	ldr	r6, [r7, r2, lsl #2]
   1f914:	and	r3, r6, r3
   1f918:	str	r3, [r7, r2, lsl #2]
   1f91c:	orr	r0, r3, r0
   1f920:	add	r2, r2, #1
   1f924:	cmp	r2, #8
   1f928:	bne	1f900 <__assert_fail@plt+0xe3e8>
   1f92c:	b	1fa14 <__assert_fail@plt+0xe4fc>
   1f930:	cmp	r2, #7
   1f934:	beq	1f964 <__assert_fail@plt+0xe44c>
   1f938:	cmp	r2, #5
   1f93c:	beq	1f988 <__assert_fail@plt+0xe470>
   1f940:	cmp	r2, #3
   1f944:	bne	1fca8 <__assert_fail@plt+0xe790>
   1f948:	str	r3, [sp, #12]
   1f94c:	str	r0, [sp, #28]
   1f950:	str	r1, [sp, #24]
   1f954:	ldr	r1, [r1, r0, lsl #3]
   1f958:	mov	r0, r7
   1f95c:	bl	1fd24 <__assert_fail@plt+0xe80c>
   1f960:	b	1f870 <__assert_fail@plt+0xe358>
   1f964:	str	r3, [sp, #12]
   1f968:	str	r1, [sp, #24]
   1f96c:	str	r0, [sp, #28]
   1f970:	mvn	r0, #0
   1f974:	str	r0, [fp, #-52]	; 0xffffffcc
   1f978:	str	r0, [fp, #-56]	; 0xffffffc8
   1f97c:	str	r0, [fp, #-60]	; 0xffffffc4
   1f980:	str	r0, [fp, #-64]	; 0xffffffc0
   1f984:	b	1f9b8 <__assert_fail@plt+0xe4a0>
   1f988:	str	r3, [sp, #12]
   1f98c:	str	r1, [sp, #24]
   1f990:	str	r0, [sp, #28]
   1f994:	ldr	r0, [sl, #92]	; 0x5c
   1f998:	cmp	r0, #2
   1f99c:	blt	1f9b0 <__assert_fail@plt+0xe498>
   1f9a0:	ldr	r1, [sl, #60]	; 0x3c
   1f9a4:	mov	r0, r7
   1f9a8:	bl	1fd24 <__assert_fail@plt+0xe80c>
   1f9ac:	b	1f9b8 <__assert_fail@plt+0xe4a0>
   1f9b0:	mov	r0, r7
   1f9b4:	bl	1fd48 <__assert_fail@plt+0xe830>
   1f9b8:	ldrb	r0, [sl, #128]	; 0x80
   1f9bc:	tst	r0, #64	; 0x40
   1f9c0:	bne	1f9d0 <__assert_fail@plt+0xe4b8>
   1f9c4:	mov	r0, r7
   1f9c8:	mov	r1, #10
   1f9cc:	bl	1fd70 <__assert_fail@plt+0xe858>
   1f9d0:	ldrb	r0, [sl, #128]	; 0x80
   1f9d4:	tst	r0, #128	; 0x80
   1f9d8:	beq	1f870 <__assert_fail@plt+0xe358>
   1f9dc:	mov	r0, r7
   1f9e0:	mov	r1, #0
   1f9e4:	bl	1fd70 <__assert_fail@plt+0xe858>
   1f9e8:	b	1f870 <__assert_fail@plt+0xe358>
   1f9ec:	mov	r0, #0
   1f9f0:	mov	r1, #0
   1f9f4:	ldr	r2, [r4, r1, lsl #2]
   1f9f8:	ldr	r3, [r7, r1, lsl #2]
   1f9fc:	and	r2, r3, r2
   1fa00:	str	r2, [r7, r1, lsl #2]
   1fa04:	orr	r0, r2, r0
   1fa08:	add	r1, r1, #1
   1fa0c:	cmp	r1, #8
   1fa10:	bne	1f9f4 <__assert_fail@plt+0xe4dc>
   1fa14:	cmp	r0, #0
   1fa18:	mov	r6, ip
   1fa1c:	beq	1fca8 <__assert_fail@plt+0xe790>
   1fa20:	tst	r9, #2048	; 0x800
   1fa24:	beq	1facc <__assert_fail@plt+0xe5b4>
   1fa28:	ldr	r0, [sp, #32]
   1fa2c:	cmp	r0, #1
   1fa30:	bne	1fa44 <__assert_fail@plt+0xe52c>
   1fa34:	ldr	r0, [sp, #12]
   1fa38:	ldrb	r0, [r0, #2]
   1fa3c:	tst	r0, #64	; 0x40
   1fa40:	bne	1fa8c <__assert_fail@plt+0xe574>
   1fa44:	ldr	r0, [sl, #92]	; 0x5c
   1fa48:	mov	ip, r6
   1fa4c:	cmp	r0, #1
   1fa50:	ble	1fa98 <__assert_fail@plt+0xe580>
   1fa54:	ldr	r1, [sl, #60]	; 0x3c
   1fa58:	mov	r0, #0
   1fa5c:	mov	r2, #0
   1fa60:	ldr	r3, [r4, r2, lsl #2]
   1fa64:	ldr	r6, [r1, r2, lsl #2]
   1fa68:	and	r3, r6, r3
   1fa6c:	ldr	r6, [r7, r2, lsl #2]
   1fa70:	bic	r3, r6, r3
   1fa74:	str	r3, [r7, r2, lsl #2]
   1fa78:	orr	r0, r3, r0
   1fa7c:	add	r2, r2, #1
   1fa80:	cmp	r2, #8
   1fa84:	bne	1fa60 <__assert_fail@plt+0xe548>
   1fa88:	b	1fac0 <__assert_fail@plt+0xe5a8>
   1fa8c:	mov	r0, r7
   1fa90:	bl	1fd14 <__assert_fail@plt+0xe7fc>
   1fa94:	b	1fca8 <__assert_fail@plt+0xe790>
   1fa98:	mov	r0, #0
   1fa9c:	mov	r1, #0
   1faa0:	ldr	r2, [r4, r1, lsl #2]
   1faa4:	ldr	r3, [r7, r1, lsl #2]
   1faa8:	bic	r2, r3, r2
   1faac:	str	r2, [r7, r1, lsl #2]
   1fab0:	orr	r0, r2, r0
   1fab4:	add	r1, r1, #1
   1fab8:	cmp	r1, #8
   1fabc:	bne	1faa0 <__assert_fail@plt+0xe588>
   1fac0:	cmp	r0, #0
   1fac4:	mov	r6, ip
   1fac8:	beq	1fca8 <__assert_fail@plt+0xe790>
   1facc:	str	r6, [sp, #20]
   1fad0:	ldr	r9, [sp, #44]	; 0x2c
   1fad4:	mov	r6, #0
   1fad8:	cmp	r9, #1
   1fadc:	blt	1fc30 <__assert_fail@plt+0xe718>
   1fae0:	ldr	sl, [sp, #40]	; 0x28
   1fae4:	ldr	r4, [sp, #32]
   1fae8:	cmp	r4, #1
   1faec:	bne	1fb10 <__assert_fail@plt+0xe5f8>
   1faf0:	ldr	r0, [sp, #28]
   1faf4:	ldr	r1, [sp, #24]
   1faf8:	ldrb	r1, [r1, r0, lsl #3]
   1fafc:	ldr	r0, [sp, #40]	; 0x28
   1fb00:	add	r0, r0, r6, lsl #5
   1fb04:	bl	1d05c <__assert_fail@plt+0xbb44>
   1fb08:	cmp	r0, #0
   1fb0c:	beq	1fc20 <__assert_fail@plt+0xe708>
   1fb10:	mov	r0, #0
   1fb14:	mov	r1, #0
   1fb18:	ldr	r2, [r7, r1, lsl #2]
   1fb1c:	ldr	r3, [sl, r1, lsl #2]
   1fb20:	and	r2, r3, r2
   1fb24:	str	r2, [r5, r1, lsl #2]
   1fb28:	orr	r0, r2, r0
   1fb2c:	add	r1, r1, #1
   1fb30:	cmp	r1, #8
   1fb34:	bne	1fb18 <__assert_fail@plt+0xe600>
   1fb38:	cmp	r0, #0
   1fb3c:	beq	1fc20 <__assert_fail@plt+0xe708>
   1fb40:	mov	r8, r9
   1fb44:	mov	r9, #0
   1fb48:	mov	r0, #0
   1fb4c:	mov	r1, #0
   1fb50:	add	r5, sp, #48	; 0x30
   1fb54:	ldr	r2, [r7, r1, lsl #2]
   1fb58:	ldr	r3, [sl, r1, lsl #2]
   1fb5c:	bic	r4, r3, r2
   1fb60:	str	r4, [r5, r1, lsl #2]
   1fb64:	bic	r2, r2, r3
   1fb68:	str	r2, [r7, r1, lsl #2]
   1fb6c:	orr	r9, r2, r9
   1fb70:	orr	r0, r4, r0
   1fb74:	add	r1, r1, #1
   1fb78:	cmp	r1, #8
   1fb7c:	bne	1fb54 <__assert_fail@plt+0xe63c>
   1fb80:	cmp	r0, #0
   1fb84:	beq	1fbd4 <__assert_fail@plt+0xe6bc>
   1fb88:	ldr	r4, [sp, #40]	; 0x28
   1fb8c:	add	r0, r4, r8, lsl #5
   1fb90:	add	r1, sp, #48	; 0x30
   1fb94:	bl	1fd94 <__assert_fail@plt+0xe87c>
   1fb98:	add	r0, r4, r6, lsl #5
   1fb9c:	add	r5, sp, #80	; 0x50
   1fba0:	mov	r1, r5
   1fba4:	bl	1fd94 <__assert_fail@plt+0xe87c>
   1fba8:	add	r0, r8, r8, lsl #1
   1fbac:	ldr	r2, [sp, #36]	; 0x24
   1fbb0:	add	r0, r2, r0, lsl #2
   1fbb4:	add	r1, r6, r6, lsl #1
   1fbb8:	add	r1, r2, r1, lsl #2
   1fbbc:	bl	1b70c <__assert_fail@plt+0xa1f4>
   1fbc0:	cmp	r0, #0
   1fbc4:	bne	1fce4 <__assert_fail@plt+0xe7cc>
   1fbc8:	add	r8, r8, #1
   1fbcc:	str	r8, [sp, #44]	; 0x2c
   1fbd0:	b	1fbdc <__assert_fail@plt+0xe6c4>
   1fbd4:	str	r8, [sp, #44]	; 0x2c
   1fbd8:	add	r5, sp, #80	; 0x50
   1fbdc:	ldr	r8, [sp, #16]
   1fbe0:	ldr	r0, [r8, #12]
   1fbe4:	ldr	r1, [sp, #20]
   1fbe8:	ldr	r1, [r0, r1, lsl #2]
   1fbec:	add	r0, r6, r6, lsl #1
   1fbf0:	ldr	r2, [sp, #36]	; 0x24
   1fbf4:	add	r0, r2, r0, lsl #2
   1fbf8:	bl	1b524 <__assert_fail@plt+0xa00c>
   1fbfc:	cmp	r0, #0
   1fc00:	beq	1fce8 <__assert_fail@plt+0xe7d0>
   1fc04:	cmp	r9, #0
   1fc08:	mov	r0, #0
   1fc0c:	movweq	r0, #17
   1fc10:	cmp	r0, #0
   1fc14:	bne	1fc88 <__assert_fail@plt+0xe770>
   1fc18:	ldr	r9, [sp, #44]	; 0x2c
   1fc1c:	ldr	r4, [sp, #32]
   1fc20:	add	sl, sl, #32
   1fc24:	add	r6, r6, #1
   1fc28:	cmp	r6, r9
   1fc2c:	blt	1fae8 <__assert_fail@plt+0xe5d0>
   1fc30:	cmp	r6, r9
   1fc34:	bne	1fc9c <__assert_fail@plt+0xe784>
   1fc38:	ldr	r0, [sp, #40]	; 0x28
   1fc3c:	add	r0, r0, r9, lsl #5
   1fc40:	mov	r1, r7
   1fc44:	bl	1fd94 <__assert_fail@plt+0xe87c>
   1fc48:	ldr	r0, [r8, #12]
   1fc4c:	ldr	r6, [sp, #20]
   1fc50:	ldr	r1, [r0, r6, lsl #2]
   1fc54:	add	r0, r9, r9, lsl #1
   1fc58:	ldr	r2, [sp, #36]	; 0x24
   1fc5c:	add	r0, r2, r0, lsl #2
   1fc60:	bl	1adf4 <__assert_fail@plt+0x98dc>
   1fc64:	cmp	r0, #0
   1fc68:	ldr	sl, [sp, #4]
   1fc6c:	bne	1fcec <__assert_fail@plt+0xe7d4>
   1fc70:	mov	r0, r7
   1fc74:	bl	1fd14 <__assert_fail@plt+0xe7fc>
   1fc78:	add	r9, r9, #1
   1fc7c:	str	r9, [sp, #44]	; 0x2c
   1fc80:	ldr	r4, [sp]
   1fc84:	b	1fca8 <__assert_fail@plt+0xe790>
   1fc88:	cmp	r0, #17
   1fc8c:	bne	1fcbc <__assert_fail@plt+0xe7a4>
   1fc90:	ldr	r9, [sp, #44]	; 0x2c
   1fc94:	cmp	r6, r9
   1fc98:	beq	1fc38 <__assert_fail@plt+0xe720>
   1fc9c:	str	r9, [sp, #44]	; 0x2c
   1fca0:	ldm	sp, {r4, sl}
   1fca4:	ldr	r6, [sp, #20]
   1fca8:	ldr	r0, [r8, #8]
   1fcac:	add	r6, r6, #1
   1fcb0:	cmp	r6, r0
   1fcb4:	blt	1f834 <__assert_fail@plt+0xe31c>
   1fcb8:	b	1fcd8 <__assert_fail@plt+0xe7c0>
   1fcbc:	cmp	r9, #0
   1fcc0:	ldm	sp, {r4, sl}
   1fcc4:	ldr	r6, [sp, #20]
   1fcc8:	bne	1fca8 <__assert_fail@plt+0xe790>
   1fccc:	b	1fcd8 <__assert_fail@plt+0xe7c0>
   1fcd0:	mov	r0, #0
   1fcd4:	str	r0, [sp, #44]	; 0x2c
   1fcd8:	ldr	r0, [sp, #44]	; 0x2c
   1fcdc:	sub	sp, fp, #28
   1fce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fce4:	str	r8, [sp, #44]	; 0x2c
   1fce8:	ldr	r9, [sp, #44]	; 0x2c
   1fcec:	cmp	r9, #1
   1fcf0:	blt	1fd0c <__assert_fail@plt+0xe7f4>
   1fcf4:	ldr	r0, [sp, #36]	; 0x24
   1fcf8:	add	r5, r0, #8
   1fcfc:	ldr	r0, [r5], #12
   1fd00:	bl	22b14 <__assert_fail@plt+0x115fc>
   1fd04:	subs	r9, r9, #1
   1fd08:	bne	1fcfc <__assert_fail@plt+0xe7e4>
   1fd0c:	mvn	r0, #0
   1fd10:	b	1fcd4 <__assert_fail@plt+0xe7bc>
   1fd14:	vmov.i32	q8, #0	; 0x00000000
   1fd18:	vst1.32	{d16-d17}, [r0]!
   1fd1c:	vst1.32	{d16-d17}, [r0]
   1fd20:	bx	lr
   1fd24:	mov	r2, #0
   1fd28:	ldr	ip, [r1, r2, lsl #2]
   1fd2c:	ldr	r3, [r0, r2, lsl #2]
   1fd30:	orr	r3, r3, ip
   1fd34:	str	r3, [r0, r2, lsl #2]
   1fd38:	add	r2, r2, #1
   1fd3c:	cmp	r2, #8
   1fd40:	bne	1fd28 <__assert_fail@plt+0xe810>
   1fd44:	bx	lr
   1fd48:	mvn	r1, #0
   1fd4c:	str	r1, [r0]
   1fd50:	str	r1, [r0, #4]
   1fd54:	str	r1, [r0, #8]
   1fd58:	str	r1, [r0, #12]
   1fd5c:	str	r1, [r0, #16]
   1fd60:	str	r1, [r0, #20]
   1fd64:	str	r1, [r0, #24]
   1fd68:	str	r1, [r0, #28]
   1fd6c:	bx	lr
   1fd70:	asr	r2, r1, #31
   1fd74:	add	r2, r1, r2, lsr #27
   1fd78:	asr	r2, r2, #5
   1fd7c:	ldr	ip, [r0, r2, lsl #2]
   1fd80:	and	r1, r1, #31
   1fd84:	mov	r3, #1
   1fd88:	bic	r1, ip, r3, lsl r1
   1fd8c:	str	r1, [r0, r2, lsl #2]
   1fd90:	bx	lr
   1fd94:	vld1.32	{d16-d17}, [r1]!
   1fd98:	vld1.32	{d18-d19}, [r1]
   1fd9c:	vst1.32	{d16-d17}, [r0]!
   1fda0:	vst1.32	{d18-d19}, [r0]
   1fda4:	bx	lr
   1fda8:	ldr	r0, [r0]
   1fdac:	add	r0, r0, r1, lsl #3
   1fdb0:	ldr	r1, [r0, #4]
   1fdb4:	uxtb	r3, r1
   1fdb8:	mov	r0, #0
   1fdbc:	cmp	r3, #2
   1fdc0:	bne	1fe18 <__assert_fail@plt+0xe900>
   1fdc4:	movw	r3, #65280	; 0xff00
   1fdc8:	movt	r3, #3
   1fdcc:	tst	r1, r3
   1fdd0:	moveq	r0, #1
   1fdd4:	bxeq	lr
   1fdd8:	ands	ip, r2, #1
   1fddc:	bne	1fde8 <__assert_fail@plt+0xe8d0>
   1fde0:	ands	r3, r1, #1024	; 0x400
   1fde4:	bne	1fe18 <__assert_fail@plt+0xe900>
   1fde8:	cmp	ip, #0
   1fdec:	andsne	r3, r1, #2048	; 0x800
   1fdf0:	bne	1fe18 <__assert_fail@plt+0xe900>
   1fdf4:	tst	r2, #2
   1fdf8:	bne	1fe04 <__assert_fail@plt+0xe8ec>
   1fdfc:	ands	r3, r1, #8192	; 0x2000
   1fe00:	bxne	lr
   1fe04:	and	r0, r1, #32768	; 0x8000
   1fe08:	mov	r1, #1
   1fe0c:	eor	r0, r1, r0, lsr #15
   1fe10:	and	r1, r2, #8
   1fe14:	orr	r0, r0, r1, lsr #3
   1fe18:	bx	lr
   1fe1c:	stm	r0, {r1, r2, r3}
   1fe20:	mov	r1, #0
   1fe24:	str	r1, [r0, #24]
   1fe28:	str	r1, [r0, #20]
   1fe2c:	str	r1, [r0, #16]
   1fe30:	ldr	r1, [sp]
   1fe34:	str	r1, [r0, #12]
   1fe38:	bx	lr
   1fe3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe40:	add	fp, sp, #28
   1fe44:	sub	sp, sp, #12
   1fe48:	mov	sl, r1
   1fe4c:	mov	r6, r0
   1fe50:	ldr	r1, [r1, #8]
   1fe54:	ldr	r5, [sl, #12]
   1fe58:	mov	r0, sp
   1fe5c:	bl	1adf4 <__assert_fail@plt+0x98dc>
   1fe60:	cmp	r0, #0
   1fe64:	bne	1ff40 <__assert_fail@plt+0xea28>
   1fe68:	mov	r3, sp
   1fe6c:	mov	r0, r6
   1fe70:	mov	r1, sl
   1fe74:	mov	r2, r5
   1fe78:	bl	1fff4 <__assert_fail@plt+0xeadc>
   1fe7c:	cmp	r0, #0
   1fe80:	bne	1ff0c <__assert_fail@plt+0xe9f4>
   1fe84:	mov	r9, #0
   1fe88:	mov	r8, sp
   1fe8c:	mov	r1, #0
   1fe90:	cmp	r5, #1
   1fe94:	blt	1ff14 <__assert_fail@plt+0xe9fc>
   1fe98:	ldr	r0, [sl]
   1fe9c:	ldr	r2, [r0, r5, lsl #2]
   1fea0:	cmp	r2, #0
   1fea4:	mov	r4, #0
   1fea8:	addeq	r4, r1, #1
   1feac:	ldr	r1, [r6, #120]	; 0x78
   1feb0:	cmp	r4, r1
   1feb4:	bgt	1ff1c <__assert_fail@plt+0xea04>
   1feb8:	str	r9, [sp, #4]
   1febc:	ldr	r0, [r6, #100]	; 0x64
   1fec0:	sub	r5, r5, #1
   1fec4:	ldr	r0, [r0, r5, lsl #2]
   1fec8:	cmp	r0, #0
   1fecc:	beq	1feec <__assert_fail@plt+0xe9d4>
   1fed0:	mov	r0, r6
   1fed4:	mov	r1, sl
   1fed8:	mov	r2, r5
   1fedc:	mov	r3, r8
   1fee0:	bl	2011c <__assert_fail@plt+0xec04>
   1fee4:	cmp	r0, #0
   1fee8:	bne	1ff0c <__assert_fail@plt+0xe9f4>
   1feec:	mov	r0, r6
   1fef0:	mov	r1, sl
   1fef4:	mov	r2, r5
   1fef8:	mov	r3, r8
   1fefc:	bl	1fff4 <__assert_fail@plt+0xeadc>
   1ff00:	cmp	r0, #0
   1ff04:	mov	r1, r4
   1ff08:	beq	1fe90 <__assert_fail@plt+0xe978>
   1ff0c:	mov	r7, r0
   1ff10:	b	1ff2c <__assert_fail@plt+0xea14>
   1ff14:	mov	r7, #0
   1ff18:	b	1ff2c <__assert_fail@plt+0xea14>
   1ff1c:	lsl	r2, r5, #2
   1ff20:	mov	r7, #0
   1ff24:	mov	r1, #0
   1ff28:	bl	11428 <memset@plt>
   1ff2c:	ldr	r0, [sp, #8]
   1ff30:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ff34:	mov	r0, r7
   1ff38:	sub	sp, fp, #28
   1ff3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff40:	mov	r7, r0
   1ff44:	b	1ff34 <__assert_fail@plt+0xea1c>
   1ff48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff4c:	add	fp, sp, #28
   1ff50:	sub	sp, sp, #20
   1ff54:	cmp	r3, #1
   1ff58:	blt	1ffe8 <__assert_fail@plt+0xead0>
   1ff5c:	mov	r4, r3
   1ff60:	mov	r5, r2
   1ff64:	mov	r6, r1
   1ff68:	mov	sl, r0
   1ff6c:	mov	r7, #0
   1ff70:	add	r8, sp, #4
   1ff74:	add	r9, sp, #16
   1ff78:	ldr	r0, [r5, r7, lsl #2]
   1ff7c:	ldr	r1, [r6, r7, lsl #2]
   1ff80:	cmp	r1, #0
   1ff84:	beq	1ffd8 <__assert_fail@plt+0xeac0>
   1ff88:	cmp	r0, #0
   1ff8c:	beq	1ffdc <__assert_fail@plt+0xeac4>
   1ff90:	add	r1, r1, #4
   1ff94:	add	r2, r0, #4
   1ff98:	mov	r0, r8
   1ff9c:	bl	1db88 <__assert_fail@plt+0xc670>
   1ffa0:	str	r0, [sp, #16]
   1ffa4:	cmp	r0, #0
   1ffa8:	bne	1ffec <__assert_fail@plt+0xead4>
   1ffac:	mov	r0, r9
   1ffb0:	mov	r1, sl
   1ffb4:	mov	r2, r8
   1ffb8:	bl	1eb64 <__assert_fail@plt+0xd64c>
   1ffbc:	str	r0, [r6, r7, lsl #2]
   1ffc0:	ldr	r0, [sp, #12]
   1ffc4:	bl	22b14 <__assert_fail@plt+0x115fc>
   1ffc8:	ldr	r0, [sp, #16]
   1ffcc:	cmp	r0, #0
   1ffd0:	beq	1ffdc <__assert_fail@plt+0xeac4>
   1ffd4:	b	1ffec <__assert_fail@plt+0xead4>
   1ffd8:	str	r0, [r6, r7, lsl #2]
   1ffdc:	add	r7, r7, #1
   1ffe0:	cmp	r7, r4
   1ffe4:	blt	1ff78 <__assert_fail@plt+0xea60>
   1ffe8:	mov	r0, #0
   1ffec:	sub	sp, fp, #28
   1fff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fff8:	add	fp, sp, #28
   1fffc:	sub	sp, sp, #12
   20000:	mov	sl, r2
   20004:	mov	r8, r1
   20008:	mov	r6, r0
   2000c:	ldr	r9, [r0, #84]	; 0x54
   20010:	mov	r0, #0
   20014:	str	r0, [sp, #8]
   20018:	ldr	r1, [r6, #100]	; 0x64
   2001c:	ldr	r7, [r1, r2, lsl #2]
   20020:	cmp	r7, #0
   20024:	mov	r4, r7
   20028:	addne	r4, r4, #4
   2002c:	ldr	r1, [r3, #4]
   20030:	cmp	r1, #0
   20034:	beq	200c4 <__assert_fail@plt+0xebac>
   20038:	mov	r5, r3
   2003c:	cmp	r7, #0
   20040:	beq	20094 <__assert_fail@plt+0xeb7c>
   20044:	mov	r0, r9
   20048:	mov	r1, r5
   2004c:	mov	r2, r4
   20050:	bl	20260 <__assert_fail@plt+0xed48>
   20054:	str	r0, [sp, #8]
   20058:	cmp	r0, #0
   2005c:	bne	200ec <__assert_fail@plt+0xebd4>
   20060:	ldr	r0, [r8, #20]
   20064:	cmp	r0, #0
   20068:	beq	20094 <__assert_fail@plt+0xeb7c>
   2006c:	ldr	r0, [r6, #116]	; 0x74
   20070:	stm	sp, {r0, sl}
   20074:	add	r3, r8, #16
   20078:	mov	r0, r9
   2007c:	mov	r1, r5
   20080:	mov	r2, r4
   20084:	bl	20338 <__assert_fail@plt+0xee20>
   20088:	str	r0, [sp, #8]
   2008c:	cmp	r0, #0
   20090:	bne	200ec <__assert_fail@plt+0xebd4>
   20094:	add	r0, sp, #8
   20098:	mov	r1, r9
   2009c:	mov	r2, r5
   200a0:	bl	1eb64 <__assert_fail@plt+0xd64c>
   200a4:	ldr	r1, [r8]
   200a8:	str	r0, [r1, sl, lsl #2]
   200ac:	ldr	r0, [sp, #8]
   200b0:	cmp	r0, #0
   200b4:	bne	200ec <__assert_fail@plt+0xebd4>
   200b8:	cmp	r7, #0
   200bc:	bne	200d4 <__assert_fail@plt+0xebbc>
   200c0:	b	200e8 <__assert_fail@plt+0xebd0>
   200c4:	ldr	r1, [r8]
   200c8:	str	r0, [r1, sl, lsl #2]
   200cc:	cmp	r7, #0
   200d0:	beq	200e8 <__assert_fail@plt+0xebd0>
   200d4:	ldr	r0, [r6, #100]	; 0x64
   200d8:	ldr	r0, [r0, sl, lsl #2]
   200dc:	ldrb	r0, [r0, #52]	; 0x34
   200e0:	tst	r0, #64	; 0x40
   200e4:	bne	200f4 <__assert_fail@plt+0xebdc>
   200e8:	mov	r0, #0
   200ec:	sub	sp, fp, #28
   200f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200f4:	mov	r0, r6
   200f8:	mov	r1, r8
   200fc:	mov	r2, sl
   20100:	mov	r3, r4
   20104:	bl	2057c <__assert_fail@plt+0xf064>
   20108:	str	r0, [sp, #8]
   2010c:	cmp	r0, #0
   20110:	moveq	r0, #0
   20114:	sub	sp, fp, #28
   20118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2011c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20120:	add	fp, sp, #28
   20124:	sub	sp, sp, #20
   20128:	str	r3, [sp, #12]
   2012c:	mov	sl, r0
   20130:	ldr	r0, [r0, #100]	; 0x64
   20134:	ldr	r7, [r0, r2, lsl #2]
   20138:	ldr	r0, [r7, #20]
   2013c:	cmp	r0, #1
   20140:	blt	20248 <__assert_fail@plt+0xed30>
   20144:	mov	r5, r2
   20148:	mov	r6, r1
   2014c:	ldr	r8, [sl, #84]	; 0x54
   20150:	add	r0, r1, #16
   20154:	str	r0, [sp, #8]
   20158:	add	r0, r2, #1
   2015c:	str	r0, [sp, #16]
   20160:	mov	r9, #0
   20164:	ldr	r0, [r7, #24]
   20168:	ldr	r4, [r0, r9, lsl #2]
   2016c:	ldr	r0, [r8]
   20170:	add	r0, r0, r4, lsl #3
   20174:	ldrb	r0, [r0, #6]
   20178:	tst	r0, #16
   2017c:	beq	201a4 <__assert_fail@plt+0xec8c>
   20180:	ldr	r0, [r6, #12]
   20184:	str	r0, [sp]
   20188:	mov	r0, sl
   2018c:	mov	r1, r6
   20190:	mov	r2, r4
   20194:	mov	r3, r5
   20198:	bl	20f64 <__assert_fail@plt+0xfa4c>
   2019c:	cmp	r0, #0
   201a0:	bne	201f4 <__assert_fail@plt+0xecdc>
   201a4:	ldr	r0, [r8]
   201a8:	add	r1, r0, r4, lsl #3
   201ac:	mov	r0, sl
   201b0:	mov	r2, r5
   201b4:	bl	1f03c <__assert_fail@plt+0xdb24>
   201b8:	cmp	r0, #0
   201bc:	beq	20238 <__assert_fail@plt+0xed20>
   201c0:	ldr	r0, [r6]
   201c4:	ldr	r1, [sp, #16]
   201c8:	ldr	r0, [r0, r1, lsl #2]
   201cc:	cmp	r0, #0
   201d0:	beq	20238 <__assert_fail@plt+0xed20>
   201d4:	ldr	r1, [r8, #12]
   201d8:	ldr	r1, [r1, r4, lsl #2]
   201dc:	add	r0, r0, #4
   201e0:	bl	1b788 <__assert_fail@plt+0xa270>
   201e4:	mov	r1, r0
   201e8:	mov	r0, #1
   201ec:	cmp	r1, #0
   201f0:	beq	20238 <__assert_fail@plt+0xed20>
   201f4:	ldr	r1, [r6, #20]
   201f8:	cmp	r1, #0
   201fc:	beq	20224 <__assert_fail@plt+0xed0c>
   20200:	ldr	r1, [r8, #12]
   20204:	ldr	r2, [r1, r4, lsl #2]
   20208:	stm	sp, {r4, r5}
   2020c:	add	r3, r0, r5
   20210:	mov	r0, sl
   20214:	ldr	r1, [sp, #8]
   20218:	bl	20bfc <__assert_fail@plt+0xf6e4>
   2021c:	cmp	r0, #0
   20220:	bne	20238 <__assert_fail@plt+0xed20>
   20224:	ldr	r0, [sp, #12]
   20228:	mov	r1, r4
   2022c:	bl	1b524 <__assert_fail@plt+0xa00c>
   20230:	cmp	r0, #0
   20234:	beq	20254 <__assert_fail@plt+0xed3c>
   20238:	add	r9, r9, #1
   2023c:	ldr	r0, [r7, #20]
   20240:	cmp	r9, r0
   20244:	blt	20164 <__assert_fail@plt+0xec4c>
   20248:	mov	r0, #0
   2024c:	sub	sp, fp, #28
   20250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20254:	mov	r0, #12
   20258:	sub	sp, fp, #28
   2025c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20260:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20264:	add	fp, sp, #24
   20268:	sub	sp, sp, #8
   2026c:	mov	r8, r2
   20270:	mov	r5, r1
   20274:	mov	r6, r0
   20278:	mov	r0, #0
   2027c:	str	r0, [sp, #4]
   20280:	add	r0, sp, #4
   20284:	mov	r1, r6
   20288:	mov	r2, r5
   2028c:	bl	1eb64 <__assert_fail@plt+0xd64c>
   20290:	ldr	r9, [sp, #4]
   20294:	cmp	r9, #0
   20298:	bne	20324 <__assert_fail@plt+0xee0c>
   2029c:	mov	r7, r0
   202a0:	ldr	r0, [r7, #28]!
   202a4:	cmp	r0, #0
   202a8:	bne	20310 <__assert_fail@plt+0xedf8>
   202ac:	ldr	r1, [r5, #4]
   202b0:	mov	r0, r7
   202b4:	bl	1b04c <__assert_fail@plt+0x9b34>
   202b8:	str	r0, [sp, #4]
   202bc:	mov	r9, #12
   202c0:	cmp	r0, #0
   202c4:	bne	20324 <__assert_fail@plt+0xee0c>
   202c8:	ldr	r0, [r5, #4]
   202cc:	cmp	r0, #1
   202d0:	blt	20310 <__assert_fail@plt+0xedf8>
   202d4:	mov	r4, #0
   202d8:	ldr	r0, [r5, #8]
   202dc:	ldr	r0, [r0, r4, lsl #2]
   202e0:	add	r0, r0, r0, lsl #1
   202e4:	ldr	r1, [r6, #28]
   202e8:	add	r1, r1, r0, lsl #2
   202ec:	mov	r0, r7
   202f0:	bl	1b308 <__assert_fail@plt+0x9df0>
   202f4:	cmp	r0, #0
   202f8:	bne	20330 <__assert_fail@plt+0xee18>
   202fc:	add	r4, r4, #1
   20300:	ldr	r1, [r5, #4]
   20304:	cmp	r4, r1
   20308:	blt	202d8 <__assert_fail@plt+0xedc0>
   2030c:	str	r0, [sp, #4]
   20310:	mov	r0, r5
   20314:	mov	r1, r8
   20318:	mov	r2, r7
   2031c:	bl	20868 <__assert_fail@plt+0xf350>
   20320:	mov	r9, r0
   20324:	mov	r0, r9
   20328:	sub	sp, fp, #24
   2032c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20330:	str	r0, [sp, #4]
   20334:	b	20324 <__assert_fail@plt+0xee0c>
   20338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2033c:	add	fp, sp, #28
   20340:	sub	sp, sp, #12
   20344:	str	r2, [sp, #4]
   20348:	mov	r6, r0
   2034c:	ldr	r0, [r3, #4]
   20350:	cmp	r0, #1
   20354:	blt	20570 <__assert_fail@plt+0xf058>
   20358:	mov	r4, r3
   2035c:	mov	r9, r1
   20360:	mov	r8, #0
   20364:	str	r6, [sp]
   20368:	str	r3, [sp, #8]
   2036c:	ldr	r0, [r4, #8]
   20370:	ldr	r0, [r0, r8, lsl #2]
   20374:	add	r0, r0, r0, lsl #1
   20378:	ldr	r1, [fp, #8]
   2037c:	add	r1, r1, r0, lsl #3
   20380:	ldr	r2, [r1, #8]
   20384:	ldr	r3, [fp, #12]
   20388:	cmp	r2, r3
   2038c:	bge	20560 <__assert_fail@plt+0xf048>
   20390:	ldr	r1, [r1, #4]
   20394:	ldr	r2, [fp, #12]
   20398:	cmp	r1, r2
   2039c:	blt	20560 <__assert_fail@plt+0xf048>
   203a0:	ldr	r1, [fp, #8]
   203a4:	ldr	r2, [r1, r0, lsl #3]!
   203a8:	ldr	r0, [r6]
   203ac:	ldr	sl, [r0, r2, lsl #3]
   203b0:	ldr	r1, [r1, #12]
   203b4:	ldr	r2, [fp, #12]
   203b8:	cmp	r1, r2
   203bc:	bne	204f0 <__assert_fail@plt+0xefd8>
   203c0:	ldr	r1, [r9, #4]
   203c4:	cmp	r1, #1
   203c8:	blt	20560 <__assert_fail@plt+0xf048>
   203cc:	ldmib	r9, {r2, r3}
   203d0:	mvn	ip, #0
   203d4:	mov	r7, #0
   203d8:	mvn	r1, #0
   203dc:	ldr	r5, [r3, r7, lsl #2]
   203e0:	add	r4, r0, r5, lsl #3
   203e4:	ldrb	r4, [r4, #4]
   203e8:	cmp	r4, #9
   203ec:	beq	20408 <__assert_fail@plt+0xeef0>
   203f0:	cmp	r4, #8
   203f4:	bne	20414 <__assert_fail@plt+0xeefc>
   203f8:	ldr	r4, [r0, r5, lsl #3]
   203fc:	cmp	sl, r4
   20400:	moveq	r1, r5
   20404:	b	20414 <__assert_fail@plt+0xeefc>
   20408:	ldr	r4, [r0, r5, lsl #3]
   2040c:	cmp	sl, r4
   20410:	moveq	ip, r5
   20414:	add	r7, r7, #1
   20418:	cmp	r7, r2
   2041c:	blt	203dc <__assert_fail@plt+0xeec4>
   20420:	cmp	r1, #0
   20424:	blt	2044c <__assert_fail@plt+0xef34>
   20428:	mov	r0, r6
   2042c:	mov	r2, r9
   20430:	ldr	r3, [sp, #4]
   20434:	mov	r4, ip
   20438:	bl	20a54 <__assert_fail@plt+0xf53c>
   2043c:	mov	ip, r4
   20440:	ldr	r6, [sp]
   20444:	cmp	r0, #0
   20448:	bne	20574 <__assert_fail@plt+0xf05c>
   2044c:	cmp	ip, #0
   20450:	ldr	r4, [sp, #8]
   20454:	ldrge	r0, [r9, #4]
   20458:	cmpge	r0, #1
   2045c:	blt	20560 <__assert_fail@plt+0xf048>
   20460:	mov	sl, #0
   20464:	ldr	r0, [r9, #8]
   20468:	ldr	r4, [r0, sl, lsl #2]
   2046c:	add	r5, r4, r4, lsl #1
   20470:	ldr	r0, [r6, #28]
   20474:	add	r0, r0, r5, lsl #2
   20478:	mov	r1, ip
   2047c:	mov	r7, ip
   20480:	bl	1b788 <__assert_fail@plt+0xa270>
   20484:	cmp	r0, #0
   20488:	beq	20494 <__assert_fail@plt+0xef7c>
   2048c:	mov	ip, r7
   20490:	b	204d8 <__assert_fail@plt+0xefc0>
   20494:	ldr	r0, [r6, #24]
   20498:	add	r0, r0, r5, lsl #2
   2049c:	mov	r5, r7
   204a0:	mov	r1, r7
   204a4:	bl	1b788 <__assert_fail@plt+0xa270>
   204a8:	cmp	r0, #0
   204ac:	bne	204d4 <__assert_fail@plt+0xefbc>
   204b0:	mov	r0, r6
   204b4:	mov	r1, r4
   204b8:	mov	r2, r9
   204bc:	ldr	r3, [sp, #4]
   204c0:	bl	20a54 <__assert_fail@plt+0xf53c>
   204c4:	cmp	r0, #0
   204c8:	bne	20574 <__assert_fail@plt+0xf05c>
   204cc:	sub	sl, sl, #1
   204d0:	ldr	r6, [sp]
   204d4:	mov	ip, r5
   204d8:	ldr	r0, [r9, #4]
   204dc:	add	sl, sl, #1
   204e0:	cmp	sl, r0
   204e4:	ldr	r4, [sp, #8]
   204e8:	blt	20464 <__assert_fail@plt+0xef4c>
   204ec:	b	20560 <__assert_fail@plt+0xf048>
   204f0:	ldr	r0, [r9, #4]
   204f4:	cmp	r0, #1
   204f8:	blt	20560 <__assert_fail@plt+0xf048>
   204fc:	mov	r5, #0
   20500:	ldr	r0, [r9, #8]
   20504:	ldr	r1, [r0, r5, lsl #2]
   20508:	ldr	r0, [r6]
   2050c:	add	r2, r0, r1, lsl #3
   20510:	ldr	r2, [r2, #4]
   20514:	and	r2, r2, #254	; 0xfe
   20518:	orr	r2, r2, #1
   2051c:	cmp	r2, #9
   20520:	ldreq	r0, [r0, r1, lsl #3]
   20524:	cmpeq	sl, r0
   20528:	beq	20540 <__assert_fail@plt+0xf028>
   2052c:	ldr	r0, [r9, #4]
   20530:	add	r5, r5, #1
   20534:	cmp	r5, r0
   20538:	blt	20500 <__assert_fail@plt+0xefe8>
   2053c:	b	20560 <__assert_fail@plt+0xf048>
   20540:	mov	r0, r6
   20544:	mov	r2, r9
   20548:	ldr	r3, [sp, #4]
   2054c:	bl	20a54 <__assert_fail@plt+0xf53c>
   20550:	ldr	r6, [sp]
   20554:	cmp	r0, #0
   20558:	beq	2052c <__assert_fail@plt+0xf014>
   2055c:	b	20574 <__assert_fail@plt+0xf05c>
   20560:	add	r8, r8, #1
   20564:	ldr	r0, [r4, #4]
   20568:	cmp	r8, r0
   2056c:	blt	2036c <__assert_fail@plt+0xee54>
   20570:	mov	r0, #0
   20574:	sub	sp, fp, #28
   20578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2057c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20580:	add	fp, sp, #28
   20584:	sub	sp, sp, #84	; 0x54
   20588:	mov	r4, r3
   2058c:	mov	r7, r2
   20590:	str	r1, [sp, #52]	; 0x34
   20594:	ldr	r1, [r0, #84]	; 0x54
   20598:	str	r1, [sp, #48]	; 0x30
   2059c:	str	r0, [sp, #44]	; 0x2c
   205a0:	mov	r1, r2
   205a4:	bl	1ddb8 <__assert_fail@plt+0xc8a0>
   205a8:	str	r0, [sp, #20]
   205ac:	mov	sl, #0
   205b0:	cmn	r0, #1
   205b4:	beq	2084c <__assert_fail@plt+0xf334>
   205b8:	str	sl, [sp, #56]	; 0x38
   205bc:	str	r4, [sp, #24]
   205c0:	ldr	r0, [r4, #4]
   205c4:	cmp	r0, #1
   205c8:	blt	2084c <__assert_fail@plt+0xf334>
   205cc:	add	r0, r7, #1
   205d0:	str	r0, [sp, #8]
   205d4:	add	r0, sp, #56	; 0x38
   205d8:	add	r0, r0, #16
   205dc:	str	r0, [sp, #28]
   205e0:	ldr	r2, [sp, #52]	; 0x34
   205e4:	add	r0, r2, #16
   205e8:	str	r0, [sp, #32]
   205ec:	ldr	r0, [sp, #20]
   205f0:	add	r0, r0, r0, lsl #1
   205f4:	str	r0, [sp, #16]
   205f8:	lsl	r0, r0, #3
   205fc:	str	r0, [sp, #12]
   20600:	mov	r1, #0
   20604:	ldr	sl, [sp, #24]
   20608:	ldr	r3, [sp, #48]	; 0x30
   2060c:	str	r7, [sp, #40]	; 0x28
   20610:	ldr	r0, [sl, #8]
   20614:	str	r1, [sp, #36]	; 0x24
   20618:	ldr	r9, [r0, r1, lsl #2]
   2061c:	ldr	r0, [r3]
   20620:	add	r0, r0, r9, lsl #3
   20624:	ldrb	r0, [r0, #4]
   20628:	ldr	r1, [r2, #8]
   2062c:	cmp	r9, r1
   20630:	bne	2064c <__assert_fail@plt+0xf134>
   20634:	cmp	r0, #4
   20638:	bne	20820 <__assert_fail@plt+0xf308>
   2063c:	ldr	r0, [r2, #12]
   20640:	cmp	r0, r7
   20644:	bne	20654 <__assert_fail@plt+0xf13c>
   20648:	b	20820 <__assert_fail@plt+0xf308>
   2064c:	cmp	r0, #4
   20650:	bne	20820 <__assert_fail@plt+0xf308>
   20654:	ldr	r0, [sp, #44]	; 0x2c
   20658:	ldr	r0, [r0, #116]	; 0x74
   2065c:	ldr	r1, [sp, #16]
   20660:	add	r5, r0, r1, lsl #3
   20664:	ldr	r4, [sp, #12]
   20668:	ldr	r8, [sp, #20]
   2066c:	b	20684 <__assert_fail@plt+0xf16c>
   20670:	mov	r0, r5
   20674:	ldr	r7, [sp, #40]	; 0x28
   20678:	ldr	r2, [sp, #52]	; 0x34
   2067c:	ldr	r3, [sp, #48]	; 0x30
   20680:	b	20808 <__assert_fail@plt+0xf2f0>
   20684:	ldr	r0, [r5]
   20688:	cmp	r0, r9
   2068c:	bne	20804 <__assert_fail@plt+0xf2ec>
   20690:	ldr	r0, [r5, #8]
   20694:	ldr	r1, [r5, #12]
   20698:	subs	r0, r1, r0
   2069c:	add	r6, r0, r7
   206a0:	beq	206b0 <__assert_fail@plt+0xf198>
   206a4:	ldr	r0, [r3, #12]
   206a8:	add	r0, r0, r9, lsl #2
   206ac:	b	206c0 <__assert_fail@plt+0xf1a8>
   206b0:	ldr	r0, [r3, #20]
   206b4:	add	r1, r9, r9, lsl #1
   206b8:	add	r0, r0, r1, lsl #2
   206bc:	ldr	r0, [r0, #8]
   206c0:	ldr	r1, [r2, #12]
   206c4:	cmp	r6, r1
   206c8:	bgt	20804 <__assert_fail@plt+0xf2ec>
   206cc:	ldr	r1, [r2]
   206d0:	ldr	r1, [r1, r6, lsl #2]
   206d4:	cmp	r1, #0
   206d8:	beq	20804 <__assert_fail@plt+0xf2ec>
   206dc:	ldr	r7, [r0]
   206e0:	add	r0, r1, #4
   206e4:	mov	r1, r7
   206e8:	bl	1b788 <__assert_fail@plt+0xa270>
   206ec:	cmp	r0, #0
   206f0:	beq	20670 <__assert_fail@plt+0xf158>
   206f4:	str	r7, [sp]
   206f8:	str	r6, [sp, #4]
   206fc:	ldr	r0, [sp, #44]	; 0x2c
   20700:	ldr	r1, [sp, #32]
   20704:	mov	r2, r9
   20708:	ldr	r7, [sp, #40]	; 0x28
   2070c:	mov	r3, r7
   20710:	bl	20bfc <__assert_fail@plt+0xf6e4>
   20714:	cmp	r0, #0
   20718:	mov	r0, r5
   2071c:	ldr	r2, [sp, #52]	; 0x34
   20720:	ldr	r3, [sp, #48]	; 0x30
   20724:	bne	20808 <__assert_fail@plt+0xf2f0>
   20728:	ldr	r0, [sp, #56]	; 0x38
   2072c:	cmp	r0, #0
   20730:	bne	20764 <__assert_fail@plt+0xf24c>
   20734:	mov	r0, r2
   20738:	mov	r1, #12
   2073c:	vld1.32	{d16-d17}, [r0], r1
   20740:	vld1.32	{d18-d19}, [r0]
   20744:	add	r0, sp, #56	; 0x38
   20748:	vst1.64	{d16-d17}, [r0], r1
   2074c:	vst1.32	{d18-d19}, [r0]
   20750:	ldr	r0, [sp, #28]
   20754:	ldr	r1, [sp, #32]
   20758:	bl	1b70c <__assert_fail@plt+0xa1f4>
   2075c:	cmp	r0, #0
   20760:	bne	20858 <__assert_fail@plt+0xf340>
   20764:	str	r7, [sp, #68]	; 0x44
   20768:	str	r9, [sp, #64]	; 0x40
   2076c:	ldr	r0, [sp, #28]
   20770:	mov	r1, r8
   20774:	bl	1b524 <__assert_fail@plt+0xa00c>
   20778:	cmp	r0, #0
   2077c:	beq	20860 <__assert_fail@plt+0xf348>
   20780:	mov	r0, r7
   20784:	ldr	r7, [sp, #56]	; 0x38
   20788:	ldr	r5, [r7, r0, lsl #2]
   2078c:	ldr	r0, [sp, #44]	; 0x2c
   20790:	add	r1, sp, #56	; 0x38
   20794:	bl	1fe3c <__assert_fail@plt+0xe924>
   20798:	cmp	r0, #0
   2079c:	bne	20858 <__assert_fail@plt+0xf340>
   207a0:	ldr	r0, [sp, #52]	; 0x34
   207a4:	ldr	r1, [r0, #4]
   207a8:	cmp	r1, #0
   207ac:	beq	207c8 <__assert_fail@plt+0xf2b0>
   207b0:	ldr	r0, [sp, #48]	; 0x30
   207b4:	mov	r2, r7
   207b8:	ldr	r3, [sp, #8]
   207bc:	bl	1ff48 <__assert_fail@plt+0xea30>
   207c0:	cmp	r0, #0
   207c4:	bne	20858 <__assert_fail@plt+0xf340>
   207c8:	ldr	r0, [sp, #40]	; 0x28
   207cc:	str	r5, [r7, r0, lsl #2]
   207d0:	mov	r7, r0
   207d4:	ldr	r5, [sp, #28]
   207d8:	mov	r0, r5
   207dc:	mov	r1, r8
   207e0:	bl	1b788 <__assert_fail@plt+0xa270>
   207e4:	sub	r1, r0, #1
   207e8:	mov	r0, r5
   207ec:	bl	1bb80 <__assert_fail@plt+0xa668>
   207f0:	ldr	r0, [sp, #44]	; 0x2c
   207f4:	ldr	r0, [r0, #116]	; 0x74
   207f8:	add	r0, r0, r4
   207fc:	ldr	sl, [sp, #24]
   20800:	b	20678 <__assert_fail@plt+0xf160>
   20804:	mov	r0, r5
   20808:	add	r4, r4, #24
   2080c:	add	r5, r0, #24
   20810:	add	r8, r8, #1
   20814:	ldrb	r0, [r0, #20]
   20818:	cmp	r0, #0
   2081c:	bne	20684 <__assert_fail@plt+0xf16c>
   20820:	ldr	r1, [sp, #36]	; 0x24
   20824:	add	r1, r1, #1
   20828:	ldr	r0, [sl, #4]
   2082c:	cmp	r1, r0
   20830:	blt	20610 <__assert_fail@plt+0xf0f8>
   20834:	mov	sl, #0
   20838:	ldr	r0, [sp, #56]	; 0x38
   2083c:	cmp	r0, #0
   20840:	beq	2084c <__assert_fail@plt+0xf334>
   20844:	ldr	r0, [sp, #80]	; 0x50
   20848:	bl	22b14 <__assert_fail@plt+0x115fc>
   2084c:	mov	r0, sl
   20850:	sub	sp, fp, #28
   20854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20858:	mov	sl, r0
   2085c:	b	20838 <__assert_fail@plt+0xf320>
   20860:	mov	sl, #12
   20864:	b	20838 <__assert_fail@plt+0xf320>
   20868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2086c:	add	fp, sp, #28
   20870:	sub	sp, sp, #4
   20874:	mov	r9, r2
   20878:	mov	r8, r0
   2087c:	ldr	r2, [r1, #4]
   20880:	mov	r0, #0
   20884:	cmp	r2, #0
   20888:	beq	20a40 <__assert_fail@plt+0xf528>
   2088c:	mov	sl, r1
   20890:	ldr	r1, [r9, #4]
   20894:	cmp	r1, #0
   20898:	beq	20a40 <__assert_fail@plt+0xf528>
   2089c:	add	r0, r1, r2
   208a0:	ldm	r8, {r1, r2}
   208a4:	add	r2, r2, r0
   208a8:	cmp	r2, r1
   208ac:	ble	208d0 <__assert_fail@plt+0xf3b8>
   208b0:	add	r4, r1, r0
   208b4:	lsl	r1, r4, #2
   208b8:	ldr	r0, [r8, #8]
   208bc:	bl	22654 <__assert_fail@plt+0x1113c>
   208c0:	cmp	r0, #0
   208c4:	beq	20a48 <__assert_fail@plt+0xf530>
   208c8:	str	r4, [r8]
   208cc:	str	r0, [r8, #8]
   208d0:	ldr	r1, [r8, #4]
   208d4:	ldr	r6, [sl, #4]
   208d8:	ldr	r0, [sl, #8]
   208dc:	add	r3, r6, r1
   208e0:	ldr	r5, [r9, #4]
   208e4:	ldr	r2, [r9, #8]
   208e8:	add	ip, r3, r5
   208ec:	sub	r7, r1, #1
   208f0:	sub	r3, r5, #1
   208f4:	sub	r4, r6, #1
   208f8:	ldr	r1, [r2, r3, lsl #2]
   208fc:	ldr	r6, [r0, r4, lsl #2]
   20900:	cmp	r6, r1
   20904:	beq	20920 <__assert_fail@plt+0xf408>
   20908:	blt	20950 <__assert_fail@plt+0xf438>
   2090c:	sub	r1, r4, #1
   20910:	cmp	r4, #0
   20914:	mov	r4, r1
   20918:	bgt	208f8 <__assert_fail@plt+0xf3e0>
   2091c:	b	209a0 <__assert_fail@plt+0xf488>
   20920:	cmp	r7, #0
   20924:	blt	20980 <__assert_fail@plt+0xf468>
   20928:	ldr	r5, [r8, #8]
   2092c:	mov	r1, r7
   20930:	ldr	r7, [r5, r1, lsl #2]
   20934:	cmp	r7, r6
   20938:	ble	2095c <__assert_fail@plt+0xf444>
   2093c:	sub	r7, r1, #1
   20940:	cmp	r1, #0
   20944:	mov	r1, r7
   20948:	bgt	20930 <__assert_fail@plt+0xf418>
   2094c:	b	20980 <__assert_fail@plt+0xf468>
   20950:	subs	r3, r3, #1
   20954:	bge	208f8 <__assert_fail@plt+0xf3e0>
   20958:	b	209a0 <__assert_fail@plt+0xf488>
   2095c:	ldr	r7, [r8, #8]
   20960:	ldr	r7, [r7, r1, lsl #2]
   20964:	cmp	r7, r6
   20968:	mov	r7, r1
   2096c:	bne	20980 <__assert_fail@plt+0xf468>
   20970:	mov	r7, r1
   20974:	cmp	r4, #1
   20978:	bge	20994 <__assert_fail@plt+0xf47c>
   2097c:	b	209a0 <__assert_fail@plt+0xf488>
   20980:	ldr	r1, [r8, #8]
   20984:	sub	ip, ip, #1
   20988:	str	r6, [r1, ip, lsl #2]
   2098c:	cmp	r4, #1
   20990:	blt	209a0 <__assert_fail@plt+0xf488>
   20994:	subs	r3, r3, #1
   20998:	sub	r4, r4, #1
   2099c:	bge	208f8 <__assert_fail@plt+0xf3e0>
   209a0:	ldr	r1, [sl, #4]
   209a4:	ldr	r7, [r8, #4]
   209a8:	add	r0, r7, r1
   209ac:	ldr	r3, [r9, #4]
   209b0:	add	r0, r0, r3
   209b4:	sub	r0, r0, #1
   209b8:	sub	r6, r0, ip
   209bc:	add	r2, r6, #1
   209c0:	add	r5, r2, r7
   209c4:	str	r5, [r8, #4]
   209c8:	cmp	r7, #1
   209cc:	cmpge	r6, #0
   209d0:	blt	20a2c <__assert_fail@plt+0xf514>
   209d4:	add	r3, r7, r3
   209d8:	add	r1, r3, r1
   209dc:	sub	r3, r1, ip
   209e0:	ldr	r1, [r8, #8]
   209e4:	add	r3, r1, r3, lsl #2
   209e8:	sub	r7, r7, #1
   209ec:	ldr	r6, [r1, r7, lsl #2]
   209f0:	ldr	r5, [r1, r0, lsl #2]
   209f4:	cmp	r5, r6
   209f8:	bgt	20a14 <__assert_fail@plt+0xf4fc>
   209fc:	str	r6, [r3, r7, lsl #2]
   20a00:	sub	r6, r7, #1
   20a04:	cmp	r7, #0
   20a08:	mov	r7, r6
   20a0c:	bgt	209ec <__assert_fail@plt+0xf4d4>
   20a10:	b	20a2c <__assert_fail@plt+0xf514>
   20a14:	str	r5, [r3, r7, lsl #2]
   20a18:	sub	r3, r3, #4
   20a1c:	subs	r2, r2, #1
   20a20:	sub	r0, r0, #1
   20a24:	bne	209ec <__assert_fail@plt+0xf4d4>
   20a28:	mov	r2, #0
   20a2c:	ldr	r0, [r8, #8]
   20a30:	add	r1, r0, ip, lsl #2
   20a34:	lsl	r2, r2, #2
   20a38:	bl	112a8 <memcpy@plt>
   20a3c:	mov	r0, #0
   20a40:	sub	sp, fp, #28
   20a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a48:	mov	r0, #12
   20a4c:	sub	sp, fp, #28
   20a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a58:	add	fp, sp, #28
   20a5c:	sub	sp, sp, #28
   20a60:	str	r3, [sp]
   20a64:	mov	r7, r1
   20a68:	str	r0, [sp, #12]
   20a6c:	ldr	r0, [r0, #28]
   20a70:	mov	r8, #0
   20a74:	str	r8, [sp, #20]
   20a78:	str	r8, [sp, #16]
   20a7c:	str	r8, [sp, #24]
   20a80:	add	r1, r1, r1, lsl #1
   20a84:	add	r1, r0, r1, lsl #2
   20a88:	mov	r4, r1
   20a8c:	ldr	r0, [r4, #4]!
   20a90:	cmp	r0, #1
   20a94:	blt	20be0 <__assert_fail@plt+0xf6c8>
   20a98:	str	r2, [sp, #4]
   20a9c:	str	r1, [sp, #8]
   20aa0:	add	r9, r1, #8
   20aa4:	mov	r6, #0
   20aa8:	ldr	r0, [r9]
   20aac:	ldr	r0, [r0, r6, lsl #2]
   20ab0:	cmp	r0, r7
   20ab4:	beq	20b74 <__assert_fail@plt+0xf65c>
   20ab8:	ldr	r1, [sp, #12]
   20abc:	ldr	r1, [r1]
   20ac0:	add	r1, r1, r0, lsl #3
   20ac4:	ldrb	r1, [r1, #4]
   20ac8:	tst	r1, #8
   20acc:	beq	20b74 <__assert_fail@plt+0xf65c>
   20ad0:	ldr	r1, [sp, #12]
   20ad4:	ldr	r1, [r1, #20]
   20ad8:	add	r5, r0, r0, lsl #1
   20adc:	add	r0, r1, r5, lsl #2
   20ae0:	ldr	r1, [r0, #4]
   20ae4:	ldr	r0, [r0, #8]
   20ae8:	ldr	r8, [r0]
   20aec:	mvn	sl, #0
   20af0:	cmp	r1, #2
   20af4:	ldrge	sl, [r0, #4]
   20af8:	ldr	r0, [sp, #8]
   20afc:	mov	r1, r8
   20b00:	bl	1b788 <__assert_fail@plt+0xa270>
   20b04:	cmp	r0, #0
   20b08:	beq	20b40 <__assert_fail@plt+0xf628>
   20b0c:	cmp	sl, #1
   20b10:	blt	20b74 <__assert_fail@plt+0xf65c>
   20b14:	ldr	r0, [sp, #8]
   20b18:	mov	r1, sl
   20b1c:	bl	1b788 <__assert_fail@plt+0xa270>
   20b20:	cmp	r0, #0
   20b24:	bne	20b74 <__assert_fail@plt+0xf65c>
   20b28:	ldr	r0, [sp, #4]
   20b2c:	mov	r1, sl
   20b30:	bl	1b788 <__assert_fail@plt+0xa270>
   20b34:	cmp	r0, #0
   20b38:	bne	20b54 <__assert_fail@plt+0xf63c>
   20b3c:	b	20b74 <__assert_fail@plt+0xf65c>
   20b40:	ldr	r0, [sp, #4]
   20b44:	mov	r1, r8
   20b48:	bl	1b788 <__assert_fail@plt+0xa270>
   20b4c:	cmp	r0, #0
   20b50:	beq	20b0c <__assert_fail@plt+0xf5f4>
   20b54:	ldr	r0, [sp, #12]
   20b58:	ldr	r0, [r0, #28]
   20b5c:	add	r2, r0, r5, lsl #2
   20b60:	add	r0, sp, #16
   20b64:	ldr	r1, [sp]
   20b68:	bl	20868 <__assert_fail@plt+0xf350>
   20b6c:	cmp	r0, #0
   20b70:	bne	20bf4 <__assert_fail@plt+0xf6dc>
   20b74:	add	r6, r6, #1
   20b78:	ldr	r0, [r4]
   20b7c:	cmp	r6, r0
   20b80:	blt	20aa8 <__assert_fail@plt+0xf590>
   20b84:	cmp	r0, #1
   20b88:	mov	r8, #0
   20b8c:	ldr	r5, [sp, #4]
   20b90:	blt	20be0 <__assert_fail@plt+0xf6c8>
   20b94:	mov	r7, #0
   20b98:	add	sl, sp, #16
   20b9c:	ldr	r0, [r9]
   20ba0:	ldr	r6, [r0, r7, lsl #2]
   20ba4:	mov	r0, sl
   20ba8:	mov	r1, r6
   20bac:	bl	1b788 <__assert_fail@plt+0xa270>
   20bb0:	cmp	r0, #0
   20bb4:	bne	20bd0 <__assert_fail@plt+0xf6b8>
   20bb8:	mov	r0, r5
   20bbc:	mov	r1, r6
   20bc0:	bl	1b788 <__assert_fail@plt+0xa270>
   20bc4:	sub	r1, r0, #1
   20bc8:	mov	r0, r5
   20bcc:	bl	1bb80 <__assert_fail@plt+0xa668>
   20bd0:	ldr	r0, [r4]
   20bd4:	add	r7, r7, #1
   20bd8:	cmp	r7, r0
   20bdc:	blt	20b9c <__assert_fail@plt+0xf684>
   20be0:	ldr	r0, [sp, #24]
   20be4:	bl	22b14 <__assert_fail@plt+0x115fc>
   20be8:	mov	r0, r8
   20bec:	sub	sp, fp, #28
   20bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20bf4:	mov	r8, r0
   20bf8:	b	20be0 <__assert_fail@plt+0xf6c8>
   20bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c00:	add	fp, sp, #28
   20c04:	sub	sp, sp, #20
   20c08:	str	r2, [sp, #12]
   20c0c:	mov	r6, r1
   20c10:	mov	r7, r0
   20c14:	str	r3, [sp, #16]
   20c18:	mov	r1, r3
   20c1c:	bl	1ddb8 <__assert_fail@plt+0xc8a0>
   20c20:	str	r0, [sp, #8]
   20c24:	ldr	r1, [fp, #12]
   20c28:	mov	r0, r7
   20c2c:	bl	1ddb8 <__assert_fail@plt+0xc8a0>
   20c30:	mov	r4, r0
   20c34:	ldr	r0, [r6, #4]
   20c38:	cmp	r0, #1
   20c3c:	blt	20cc0 <__assert_fail@plt+0xf7a8>
   20c40:	ldr	sl, [r7, #84]	; 0x54
   20c44:	mov	r5, #0
   20c48:	ldr	r0, [r6, #8]
   20c4c:	ldr	r1, [r0, r5, lsl #2]
   20c50:	add	r0, r1, r1, lsl #1
   20c54:	ldr	r2, [r7, #116]	; 0x74
   20c58:	ldr	r0, [r2, r0, lsl #3]
   20c5c:	ldr	r2, [sl]
   20c60:	ldr	r9, [r2, r0, lsl #3]
   20c64:	ldr	r0, [sp, #16]
   20c68:	str	r0, [sp]
   20c6c:	ldr	r0, [sp, #8]
   20c70:	str	r0, [sp, #4]
   20c74:	mov	r0, r7
   20c78:	mov	r2, r9
   20c7c:	ldr	r3, [sp, #12]
   20c80:	bl	20cd8 <__assert_fail@plt+0xf7c0>
   20c84:	mov	r8, r0
   20c88:	ldr	r0, [r6, #8]
   20c8c:	ldr	r1, [r0, r5, lsl #2]
   20c90:	ldr	r0, [fp, #12]
   20c94:	stm	sp, {r0, r4}
   20c98:	mov	r0, r7
   20c9c:	mov	r2, r9
   20ca0:	ldr	r3, [fp, #8]
   20ca4:	bl	20cd8 <__assert_fail@plt+0xf7c0>
   20ca8:	cmp	r0, r8
   20cac:	bne	20ccc <__assert_fail@plt+0xf7b4>
   20cb0:	add	r5, r5, #1
   20cb4:	ldr	r0, [r6, #4]
   20cb8:	cmp	r5, r0
   20cbc:	blt	20c48 <__assert_fail@plt+0xf730>
   20cc0:	mov	r0, #0
   20cc4:	sub	sp, fp, #28
   20cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ccc:	mov	r0, #1
   20cd0:	sub	sp, fp, #28
   20cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cd8:	push	{r4, r5, fp, lr}
   20cdc:	add	fp, sp, #8
   20ce0:	sub	sp, sp, #8
   20ce4:	ldr	r4, [r0, #116]	; 0x74
   20ce8:	add	r1, r1, r1, lsl #1
   20cec:	add	r4, r4, r1, lsl #3
   20cf0:	ldr	ip, [r4, #8]
   20cf4:	mvn	r1, #0
   20cf8:	ldr	lr, [fp, #8]
   20cfc:	cmp	ip, lr
   20d00:	bgt	20d50 <__assert_fail@plt+0xf838>
   20d04:	ldr	r4, [r4, #12]
   20d08:	mov	r1, #1
   20d0c:	cmp	r4, lr
   20d10:	blt	20d50 <__assert_fail@plt+0xf838>
   20d14:	sub	r1, r4, lr
   20d18:	clz	r1, r1
   20d1c:	lsr	r4, r1, #5
   20d20:	mov	r5, #1
   20d24:	lsl	r1, r4, #1
   20d28:	cmp	ip, lr
   20d2c:	orreq	r1, r5, r4, lsl #1
   20d30:	cmp	r1, #0
   20d34:	beq	20d4c <__assert_fail@plt+0xf834>
   20d38:	ldr	r5, [fp, #12]
   20d3c:	str	r5, [sp]
   20d40:	bl	20d5c <__assert_fail@plt+0xf844>
   20d44:	sub	sp, fp, #8
   20d48:	pop	{r4, r5, fp, pc}
   20d4c:	mov	r1, #0
   20d50:	mov	r0, r1
   20d54:	sub	sp, fp, #8
   20d58:	pop	{r4, r5, fp, pc}
   20d5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d60:	add	fp, sp, #28
   20d64:	sub	sp, sp, #36	; 0x24
   20d68:	mov	r6, r2
   20d6c:	mov	r5, r1
   20d70:	mov	r7, r0
   20d74:	ldr	r4, [r0, #84]	; 0x54
   20d78:	ldr	r0, [r4, #24]
   20d7c:	str	r3, [sp, #32]
   20d80:	add	r1, r3, r3, lsl #1
   20d84:	add	r0, r0, r1, lsl #2
   20d88:	mov	r2, r0
   20d8c:	ldr	r1, [r2, #4]!
   20d90:	str	r2, [sp, #24]
   20d94:	cmp	r1, #1
   20d98:	blt	20f30 <__assert_fail@plt+0xfa18>
   20d9c:	mov	r1, #1
   20da0:	mvn	r2, r1, lsl r6
   20da4:	str	r2, [sp, #16]
   20da8:	lsl	r1, r1, r6
   20dac:	str	r1, [sp, #20]
   20db0:	mov	sl, #0
   20db4:	cmp	r6, #31
   20db8:	mov	r1, #0
   20dbc:	movwgt	r1, #1
   20dc0:	and	r2, r5, #2
   20dc4:	str	r2, [sp, #8]
   20dc8:	orr	r1, r1, r2, lsr #1
   20dcc:	str	r1, [sp, #12]
   20dd0:	add	r0, r0, #8
   20dd4:	str	r0, [sp, #28]
   20dd8:	and	r0, r5, #1
   20ddc:	str	r0, [sp, #4]
   20de0:	ldr	r0, [sp, #28]
   20de4:	ldr	r0, [r0]
   20de8:	ldr	r8, [r0, sl, lsl #2]
   20dec:	ldr	r0, [r4]
   20df0:	add	r1, r0, r8, lsl #3
   20df4:	ldrb	r1, [r1, #4]
   20df8:	cmp	r1, #9
   20dfc:	beq	20ee8 <__assert_fail@plt+0xf9d0>
   20e00:	cmp	r1, #8
   20e04:	beq	20f04 <__assert_fail@plt+0xf9ec>
   20e08:	cmp	r1, #4
   20e0c:	bne	20f1c <__assert_fail@plt+0xfa04>
   20e10:	ldr	r0, [fp, #8]
   20e14:	cmn	r0, #1
   20e18:	beq	20f1c <__assert_fail@plt+0xfa04>
   20e1c:	ldr	r0, [r7, #116]	; 0x74
   20e20:	ldr	r1, [fp, #8]
   20e24:	add	r1, r1, r1, lsl #1
   20e28:	add	r0, r0, r1, lsl #3
   20e2c:	add	r9, r0, #16
   20e30:	ldr	r0, [r9, #-16]
   20e34:	cmp	r0, r8
   20e38:	bne	20ed4 <__assert_fail@plt+0xf9bc>
   20e3c:	cmp	r6, #31
   20e40:	bgt	20e54 <__assert_fail@plt+0xf93c>
   20e44:	ldr	r0, [r9]
   20e48:	ldr	r1, [sp, #20]
   20e4c:	tst	r0, r1
   20e50:	beq	20ed4 <__assert_fail@plt+0xf9bc>
   20e54:	ldr	r0, [r4, #20]
   20e58:	add	r1, r8, r8, lsl #1
   20e5c:	add	r0, r0, r1, lsl #2
   20e60:	ldr	r0, [r0, #8]
   20e64:	ldr	r3, [r0]
   20e68:	ldr	r0, [sp, #32]
   20e6c:	cmp	r3, r0
   20e70:	beq	20f3c <__assert_fail@plt+0xfa24>
   20e74:	ldr	r0, [fp, #8]
   20e78:	str	r0, [sp]
   20e7c:	mov	r0, r7
   20e80:	mov	r1, r5
   20e84:	mov	r2, r6
   20e88:	bl	20d5c <__assert_fail@plt+0xf844>
   20e8c:	cmp	r0, #0
   20e90:	beq	20ea8 <__assert_fail@plt+0xf990>
   20e94:	cmn	r0, #1
   20e98:	beq	20f50 <__assert_fail@plt+0xfa38>
   20e9c:	cmp	r6, #31
   20ea0:	ble	20ec4 <__assert_fail@plt+0xf9ac>
   20ea4:	b	20ed4 <__assert_fail@plt+0xf9bc>
   20ea8:	ldr	r0, [sp, #12]
   20eac:	cmp	r0, #0
   20eb0:	beq	20ec4 <__assert_fail@plt+0xf9ac>
   20eb4:	ldr	r0, [sp, #8]
   20eb8:	cmp	r0, #0
   20ebc:	beq	20ed4 <__assert_fail@plt+0xf9bc>
   20ec0:	b	20f4c <__assert_fail@plt+0xfa34>
   20ec4:	ldr	r0, [r9]
   20ec8:	ldr	r1, [sp, #16]
   20ecc:	and	r0, r0, r1
   20ed0:	str	r0, [r9]
   20ed4:	ldrb	r0, [r9, #4]
   20ed8:	add	r9, r9, #24
   20edc:	cmp	r0, #0
   20ee0:	bne	20e30 <__assert_fail@plt+0xf918>
   20ee4:	b	20f1c <__assert_fail@plt+0xfa04>
   20ee8:	ldr	r1, [sp, #8]
   20eec:	cmp	r1, #0
   20ef0:	beq	20f1c <__assert_fail@plt+0xfa04>
   20ef4:	ldr	r0, [r0, r8, lsl #3]
   20ef8:	cmp	r0, r6
   20efc:	bne	20f1c <__assert_fail@plt+0xfa04>
   20f00:	b	20f4c <__assert_fail@plt+0xfa34>
   20f04:	ldr	r1, [sp, #4]
   20f08:	cmp	r1, #0
   20f0c:	beq	20f1c <__assert_fail@plt+0xfa04>
   20f10:	ldr	r0, [r0, r8, lsl #3]
   20f14:	cmp	r0, r6
   20f18:	beq	20f58 <__assert_fail@plt+0xfa40>
   20f1c:	ldr	r0, [sp, #24]
   20f20:	ldr	r0, [r0]
   20f24:	add	sl, sl, #1
   20f28:	cmp	sl, r0
   20f2c:	blt	20de0 <__assert_fail@plt+0xf8c8>
   20f30:	ubfx	r0, r5, #1, #1
   20f34:	sub	sp, fp, #28
   20f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f3c:	ldr	r0, [sp, #4]
   20f40:	rsb	r0, r0, #0
   20f44:	sub	sp, fp, #28
   20f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f4c:	mov	r0, #0
   20f50:	sub	sp, fp, #28
   20f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f58:	mvn	r0, #0
   20f5c:	sub	sp, fp, #28
   20f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20f68:	add	fp, sp, #24
   20f6c:	mov	r7, r3
   20f70:	mov	r5, r2
   20f74:	mov	r8, r1
   20f78:	mov	r2, r0
   20f7c:	ldr	r6, [r0, #84]	; 0x54
   20f80:	mov	r0, r6
   20f84:	mov	r1, r5
   20f88:	bl	1ed68 <__assert_fail@plt+0xd850>
   20f8c:	mov	r4, r0
   20f90:	cmp	r0, #1
   20f94:	blt	20fd0 <__assert_fail@plt+0xfab8>
   20f98:	ldr	r1, [fp, #8]
   20f9c:	add	r0, r4, r7
   20fa0:	cmp	r0, r1
   20fa4:	bgt	20fd0 <__assert_fail@plt+0xfab8>
   20fa8:	ldr	r1, [r8]
   20fac:	ldr	r0, [r1, r0, lsl #2]
   20fb0:	cmp	r0, #0
   20fb4:	beq	20fd8 <__assert_fail@plt+0xfac0>
   20fb8:	ldr	r1, [r6, #12]
   20fbc:	ldr	r1, [r1, r5, lsl #2]
   20fc0:	add	r0, r0, #4
   20fc4:	bl	1b788 <__assert_fail@plt+0xa270>
   20fc8:	cmp	r0, #0
   20fcc:	moveq	r4, #0
   20fd0:	mov	r0, r4
   20fd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20fd8:	mov	r4, #0
   20fdc:	mov	r0, r4
   20fe0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20fe4:	mov	r1, #16
   20fe8:	mov	r2, #0
   20fec:	add	r3, r0, #12
   20ff0:	str	r2, [r0]
   20ff4:	stmib	r0, {r1, r3}
   20ff8:	bx	lr
   20ffc:	push	{r4, sl, fp, lr}
   21000:	add	fp, sp, #8
   21004:	mov	r4, r0
   21008:	ldr	r0, [r0]
   2100c:	cmp	r0, r1
   21010:	bcs	21044 <__assert_fail@plt+0xfb2c>
   21014:	add	r2, r4, #12
   21018:	mov	r0, r4
   2101c:	mov	r3, #8
   21020:	bl	22a54 <__assert_fail@plt+0x1153c>
   21024:	mov	r1, r0
   21028:	mov	r0, #1
   2102c:	cmp	r1, #0
   21030:	popne	{r4, sl, fp, pc}
   21034:	mov	r0, r4
   21038:	bl	2154c <__assert_fail@plt+0x10034>
   2103c:	mov	r0, #0
   21040:	pop	{r4, sl, fp, pc}
   21044:	str	r1, [r4]
   21048:	mov	r0, #1
   2104c:	pop	{r4, sl, fp, pc}
   21050:	push	{r4, sl, fp, lr}
   21054:	add	fp, sp, #8
   21058:	mov	r4, r0
   2105c:	bl	21574 <__assert_fail@plt+0x1005c>
   21060:	mov	r0, r4
   21064:	pop	{r4, sl, fp, lr}
   21068:	b	20fe4 <__assert_fail@plt+0xfacc>
   2106c:	cmp	r0, #0
   21070:	bxeq	lr
   21074:	push	{r4, r5, r6, sl, fp, lr}
   21078:	add	fp, sp, #16
   2107c:	mov	r4, r0
   21080:	ldr	r1, [r0]
   21084:	ldr	r0, [r0, #8]
   21088:	cmp	r1, #1
   2108c:	blt	210cc <__assert_fail@plt+0xfbb4>
   21090:	mov	r5, #0
   21094:	mov	r6, #0
   21098:	add	r0, r0, r5
   2109c:	ldr	r0, [r0, #20]
   210a0:	bl	22b14 <__assert_fail@plt+0x115fc>
   210a4:	ldr	r0, [r4, #8]
   210a8:	add	r0, r0, r5
   210ac:	ldr	r0, [r0, #8]
   210b0:	bl	22b14 <__assert_fail@plt+0x115fc>
   210b4:	add	r5, r5, #24
   210b8:	add	r6, r6, #1
   210bc:	ldr	r1, [r4]
   210c0:	ldr	r0, [r4, #8]
   210c4:	cmp	r6, r1
   210c8:	blt	21098 <__assert_fail@plt+0xfb80>
   210cc:	pop	{r4, r5, r6, sl, fp, lr}
   210d0:	b	22b14 <__assert_fail@plt+0x115fc>
   210d4:	ldr	r0, [r0, #8]
   210d8:	bx	lr
   210dc:	push	{r4, r5, fp, lr}
   210e0:	add	fp, sp, #8
   210e4:	ldr	r4, [r0]
   210e8:	add	r0, r4, r3, lsl #3
   210ec:	ldr	r0, [r0, #4]
   210f0:	uxtb	r5, r0
   210f4:	ldr	lr, [fp, #12]
   210f8:	ldr	ip, [fp, #8]
   210fc:	cmp	r5, #9
   21100:	beq	2112c <__assert_fail@plt+0xfc14>
   21104:	cmp	r5, #8
   21108:	bne	21128 <__assert_fail@plt+0xfc10>
   2110c:	ldr	r0, [r4, r3, lsl #3]
   21110:	add	r0, r0, #1
   21114:	cmp	r0, lr
   21118:	strlt	ip, [r1, r0, lsl #3]!
   2111c:	mvnlt	r0, #0
   21120:	strlt	r0, [r1, #4]
   21124:	poplt	{r4, r5, fp, pc}
   21128:	pop	{r4, r5, fp, pc}
   2112c:	ldr	r3, [r4, r3, lsl #3]
   21130:	add	r3, r3, #1
   21134:	cmp	r3, lr
   21138:	popge	{r4, r5, fp, pc}
   2113c:	ldr	r4, [r1, r3, lsl #3]
   21140:	cmp	r4, ip
   21144:	bge	21164 <__assert_fail@plt+0xfc4c>
   21148:	add	r0, r1, r3, lsl #3
   2114c:	str	ip, [r0, #4]
   21150:	lsl	r3, lr, #3
   21154:	mov	r0, r2
   21158:	mov	r2, r3
   2115c:	pop	{r4, r5, fp, lr}
   21160:	b	112a8 <memcpy@plt>
   21164:	tst	r0, #524288	; 0x80000
   21168:	ldrne	r0, [r2, r3, lsl #3]
   2116c:	cmnne	r0, #1
   21170:	bne	21180 <__assert_fail@plt+0xfc68>
   21174:	add	r0, r1, r3, lsl #3
   21178:	str	ip, [r0, #4]
   2117c:	pop	{r4, r5, fp, pc}
   21180:	lsl	r3, lr, #3
   21184:	mov	r0, r1
   21188:	mov	r1, r2
   2118c:	b	21158 <__assert_fail@plt+0xfc40>
   21190:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21194:	add	fp, sp, #24
   21198:	mov	r4, r0
   2119c:	mvn	r0, #0
   211a0:	cmp	r4, #0
   211a4:	beq	21244 <__assert_fail@plt+0xfd2c>
   211a8:	mov	r5, r2
   211ac:	ldr	r2, [r4]
   211b0:	cmp	r2, #0
   211b4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   211b8:	ldr	r9, [fp, #12]
   211bc:	ldr	r8, [fp, #8]
   211c0:	sub	r0, r2, #1
   211c4:	str	r0, [r4]
   211c8:	ldr	r2, [r4, #8]
   211cc:	add	r6, r0, r0, lsl #1
   211d0:	ldr	r0, [r2, r6, lsl #3]!
   211d4:	str	r0, [r1]
   211d8:	ldr	r1, [r2, #8]
   211dc:	lsl	r7, r5, #3
   211e0:	mov	r0, r3
   211e4:	mov	r2, r7
   211e8:	bl	112a8 <memcpy@plt>
   211ec:	ldr	r0, [r4, #8]
   211f0:	add	r0, r0, r6, lsl #3
   211f4:	ldr	r0, [r0, #8]
   211f8:	add	r1, r0, r5, lsl #3
   211fc:	mov	r0, r8
   21200:	mov	r2, r7
   21204:	bl	112a8 <memcpy@plt>
   21208:	ldr	r0, [r9, #8]
   2120c:	bl	22b14 <__assert_fail@plt+0x115fc>
   21210:	ldr	r0, [r4, #8]
   21214:	add	r0, r0, r6, lsl #3
   21218:	ldr	r0, [r0, #8]
   2121c:	bl	22b14 <__assert_fail@plt+0x115fc>
   21220:	ldr	r0, [r4, #8]
   21224:	add	r0, r0, r6, lsl #3
   21228:	vldr	d16, [r0, #12]
   2122c:	ldr	r0, [r0, #20]
   21230:	str	r0, [r9, #8]
   21234:	vstr	d16, [r9]
   21238:	ldr	r0, [r4, #8]
   2123c:	add	r0, r0, r6, lsl #3
   21240:	ldr	r0, [r0, #4]
   21244:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2124c:	add	fp, sp, #28
   21250:	sub	sp, sp, #20
   21254:	mov	r9, r3
   21258:	mov	r5, r0
   2125c:	ldr	r4, [r0, #84]	; 0x54
   21260:	ldr	r3, [r4]
   21264:	ldr	sl, [fp, #12]
   21268:	add	r0, r3, sl, lsl #3
   2126c:	ldr	r7, [r0, #4]
   21270:	ldr	r0, [fp, #16]
   21274:	ldr	r6, [fp, #8]
   21278:	tst	r7, #8
   2127c:	bne	21338 <__assert_fail@plt+0xfe20>
   21280:	tst	r7, #1048576	; 0x100000
   21284:	bne	213d8 <__assert_fail@plt+0xfec0>
   21288:	mov	ip, r1
   2128c:	mov	r9, r6
   21290:	uxtb	r1, r7
   21294:	cmp	r1, #4
   21298:	bne	213fc <__assert_fail@plt+0xfee4>
   2129c:	ldr	r0, [r3, sl, lsl #3]
   212a0:	add	r0, r0, #1
   212a4:	mov	r7, #0
   212a8:	mov	r6, ip
   212ac:	cmp	r0, ip
   212b0:	mov	r3, r2
   212b4:	movlt	r1, r3
   212b8:	ldrlt	r2, [r1, r0, lsl #3]!
   212bc:	ldrlt	r1, [r1, #4]
   212c0:	sublt	r7, r1, r2
   212c4:	ldr	r1, [fp, #20]
   212c8:	cmp	r1, #0
   212cc:	beq	21480 <__assert_fail@plt+0xff68>
   212d0:	mvn	r8, #0
   212d4:	cmp	r0, r6
   212d8:	bge	214ec <__assert_fail@plt+0xffd4>
   212dc:	ldr	r1, [r3, r0, lsl #3]
   212e0:	cmn	r1, #1
   212e4:	beq	214ec <__assert_fail@plt+0xffd4>
   212e8:	add	r0, r3, r0, lsl #3
   212ec:	ldr	r0, [r0, #4]
   212f0:	cmn	r0, #1
   212f4:	beq	214ec <__assert_fail@plt+0xffd4>
   212f8:	cmp	r7, #0
   212fc:	beq	214f8 <__assert_fail@plt+0xffe0>
   21300:	mov	r0, r9
   21304:	ldr	r2, [r9]
   21308:	ldr	r0, [r5, #28]
   2130c:	sub	r0, r0, r2
   21310:	cmp	r0, r7
   21314:	blt	214ec <__assert_fail@plt+0xffd4>
   21318:	ldr	r3, [r5, #4]
   2131c:	add	r0, r3, r1
   21320:	add	r1, r3, r2
   21324:	mov	r2, r7
   21328:	bl	112f0 <memcmp@plt>
   2132c:	cmp	r0, #0
   21330:	bne	214ec <__assert_fail@plt+0xffd4>
   21334:	b	21488 <__assert_fail@plt+0xff70>
   21338:	str	r1, [sp, #12]
   2133c:	str	r2, [sp, #16]
   21340:	ldr	r2, [r6]
   21344:	ldr	r1, [r5, #100]	; 0x64
   21348:	ldr	r5, [r1, r2, lsl #2]
   2134c:	ldr	r4, [r4, #20]
   21350:	mov	r1, sl
   21354:	bl	1b788 <__assert_fail@plt+0xa270>
   21358:	cmp	r0, #0
   2135c:	bne	21378 <__assert_fail@plt+0xfe60>
   21360:	ldr	r0, [fp, #16]
   21364:	mov	r1, sl
   21368:	bl	1b524 <__assert_fail@plt+0xa00c>
   2136c:	mvn	r8, #1
   21370:	cmp	r0, #0
   21374:	beq	214ec <__assert_fail@plt+0xffd4>
   21378:	add	r0, sl, sl, lsl #1
   2137c:	add	r1, r4, r0, lsl #2
   21380:	mov	r0, r1
   21384:	ldr	r2, [r0, #4]!
   21388:	cmp	r2, #1
   2138c:	blt	21424 <__assert_fail@plt+0xff0c>
   21390:	add	sl, r5, #4
   21394:	ldr	r7, [r1, #8]
   21398:	ldr	r6, [r0]
   2139c:	mov	r5, #0
   213a0:	mvn	r8, #0
   213a4:	ldr	r4, [r7, r5, lsl #2]
   213a8:	mov	r0, sl
   213ac:	mov	r1, r4
   213b0:	bl	1b788 <__assert_fail@plt+0xa270>
   213b4:	cmp	r0, #0
   213b8:	beq	213c8 <__assert_fail@plt+0xfeb0>
   213bc:	cmn	r8, #1
   213c0:	bne	2142c <__assert_fail@plt+0xff14>
   213c4:	mov	r8, r4
   213c8:	add	r5, r5, #1
   213cc:	cmp	r5, r6
   213d0:	blt	213a4 <__assert_fail@plt+0xfe8c>
   213d4:	b	214ec <__assert_fail@plt+0xffd4>
   213d8:	mov	r9, r6
   213dc:	ldr	r3, [r6]
   213e0:	mov	r0, r4
   213e4:	mov	r1, sl
   213e8:	mov	r2, r5
   213ec:	bl	1ed68 <__assert_fail@plt+0xd850>
   213f0:	mov	r7, r0
   213f4:	cmp	r0, #0
   213f8:	bne	21488 <__assert_fail@plt+0xff70>
   213fc:	ldr	r0, [r4]
   21400:	add	r1, r0, sl, lsl #3
   21404:	ldr	r2, [r9]
   21408:	mov	r0, r5
   2140c:	bl	1f03c <__assert_fail@plt+0xdb24>
   21410:	mvn	r8, #0
   21414:	mov	r7, #1
   21418:	cmp	r0, #0
   2141c:	bne	21488 <__assert_fail@plt+0xff70>
   21420:	b	214ec <__assert_fail@plt+0xffd4>
   21424:	mvn	r8, #0
   21428:	b	214ec <__assert_fail@plt+0xffd4>
   2142c:	ldr	r5, [fp, #16]
   21430:	mov	r0, r5
   21434:	mov	r1, r8
   21438:	bl	1b788 <__assert_fail@plt+0xa270>
   2143c:	cmp	r0, #0
   21440:	bne	214e8 <__assert_fail@plt+0xffd0>
   21444:	ldr	r0, [fp, #20]
   21448:	cmp	r0, #0
   2144c:	beq	214ec <__assert_fail@plt+0xffd4>
   21450:	ldr	r1, [fp, #8]
   21454:	ldr	r1, [r1]
   21458:	ldr	r2, [sp, #16]
   2145c:	stm	sp, {r2, r9}
   21460:	str	r5, [sp, #8]
   21464:	mov	r2, r4
   21468:	ldr	r3, [sp, #12]
   2146c:	bl	2158c <__assert_fail@plt+0x10074>
   21470:	mvn	r4, #1
   21474:	cmp	r0, #0
   21478:	movne	r8, r4
   2147c:	b	214ec <__assert_fail@plt+0xffd4>
   21480:	cmp	r7, #0
   21484:	beq	214f8 <__assert_fail@plt+0xffe0>
   21488:	ldr	r0, [r4, #12]
   2148c:	ldr	r4, [r0, sl, lsl #2]
   21490:	ldr	r0, [r9]
   21494:	add	r0, r0, r7
   21498:	str	r0, [r9]
   2149c:	ldr	r1, [fp, #20]
   214a0:	cmp	r1, #0
   214a4:	beq	214dc <__assert_fail@plt+0xffc4>
   214a8:	ldr	r1, [r5, #92]	; 0x5c
   214ac:	mvn	r8, #0
   214b0:	cmp	r0, r1
   214b4:	bgt	214ec <__assert_fail@plt+0xffd4>
   214b8:	ldr	r1, [r5, #100]	; 0x64
   214bc:	ldr	r0, [r1, r0, lsl #2]
   214c0:	cmp	r0, #0
   214c4:	beq	214ec <__assert_fail@plt+0xffd4>
   214c8:	add	r0, r0, #4
   214cc:	mov	r1, r4
   214d0:	bl	1b788 <__assert_fail@plt+0xa270>
   214d4:	cmp	r0, #0
   214d8:	beq	214ec <__assert_fail@plt+0xffd4>
   214dc:	mov	r0, #0
   214e0:	ldr	r1, [fp, #16]
   214e4:	str	r0, [r1, #4]
   214e8:	mov	r8, r4
   214ec:	mov	r0, r8
   214f0:	sub	sp, fp, #28
   214f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214f8:	ldr	r0, [fp, #16]
   214fc:	mov	r1, sl
   21500:	bl	1b524 <__assert_fail@plt+0xa00c>
   21504:	cmp	r0, #0
   21508:	beq	21544 <__assert_fail@plt+0x1002c>
   2150c:	ldr	r0, [r4, #20]
   21510:	add	r1, sl, sl, lsl #1
   21514:	add	r0, r0, r1, lsl #2
   21518:	ldr	r0, [r0, #8]
   2151c:	ldr	r8, [r0]
   21520:	ldr	r0, [r9]
   21524:	ldr	r1, [r5, #100]	; 0x64
   21528:	ldr	r0, [r1, r0, lsl #2]
   2152c:	add	r0, r0, #4
   21530:	mov	r1, r8
   21534:	bl	1b788 <__assert_fail@plt+0xa270>
   21538:	cmp	r0, #0
   2153c:	bne	214ec <__assert_fail@plt+0xffd4>
   21540:	b	213fc <__assert_fail@plt+0xfee4>
   21544:	mvn	r8, #1
   21548:	b	214ec <__assert_fail@plt+0xffd4>
   2154c:	push	{r4, sl, fp, lr}
   21550:	add	fp, sp, #8
   21554:	mov	r4, r0
   21558:	bl	21574 <__assert_fail@plt+0x1005c>
   2155c:	mov	r0, #0
   21560:	add	r1, r4, #12
   21564:	mvn	r2, #0
   21568:	stm	r4, {r0, r2}
   2156c:	str	r1, [r4, #8]
   21570:	pop	{r4, sl, fp, pc}
   21574:	mov	r1, r0
   21578:	ldr	r0, [r0, #8]
   2157c:	add	r1, r1, #12
   21580:	cmp	r0, r1
   21584:	bxeq	lr
   21588:	b	22b14 <__assert_fail@plt+0x115fc>
   2158c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21590:	add	fp, sp, #28
   21594:	sub	sp, sp, #12
   21598:	mov	r6, r3
   2159c:	mov	r9, r2
   215a0:	mov	r5, r1
   215a4:	mov	r4, r0
   215a8:	ldr	r7, [r0]
   215ac:	ldr	r1, [r0, #4]
   215b0:	add	r0, r7, #1
   215b4:	str	r0, [r4]
   215b8:	ldr	r2, [fp, #16]
   215bc:	str	r2, [sp, #8]
   215c0:	ldr	r2, [fp, #12]
   215c4:	str	r2, [sp, #4]
   215c8:	ldr	sl, [fp, #8]
   215cc:	cmp	r0, r1
   215d0:	bne	215fc <__assert_fail@plt+0x100e4>
   215d4:	ldr	r0, [r4, #8]
   215d8:	add	r1, r1, r1, lsl #1
   215dc:	lsl	r1, r1, #4
   215e0:	bl	22654 <__assert_fail@plt+0x1113c>
   215e4:	cmp	r0, #0
   215e8:	beq	21670 <__assert_fail@plt+0x10158>
   215ec:	str	r0, [r4, #8]
   215f0:	ldr	r0, [r4, #4]
   215f4:	lsl	r0, r0, #1
   215f8:	str	r0, [r4, #4]
   215fc:	ldr	r0, [r4, #8]
   21600:	add	r8, r7, r7, lsl #1
   21604:	str	r5, [r0, r8, lsl #3]!
   21608:	str	r9, [r0, #4]
   2160c:	lsl	r0, r6, #4
   21610:	bl	22624 <__assert_fail@plt+0x1110c>
   21614:	ldr	r1, [r4, #8]
   21618:	add	r1, r1, r8, lsl #3
   2161c:	str	r0, [r1, #8]
   21620:	cmp	r0, #0
   21624:	beq	21670 <__assert_fail@plt+0x10158>
   21628:	lsl	r5, r6, #3
   2162c:	mov	r1, sl
   21630:	mov	r2, r5
   21634:	bl	112a8 <memcpy@plt>
   21638:	ldr	r0, [r4, #8]
   2163c:	add	r0, r0, r8, lsl #3
   21640:	ldr	r0, [r0, #8]
   21644:	add	r0, r0, r6, lsl #3
   21648:	ldr	r1, [sp, #4]
   2164c:	mov	r2, r5
   21650:	bl	112a8 <memcpy@plt>
   21654:	ldr	r0, [r4, #8]
   21658:	add	r0, r0, r8, lsl #3
   2165c:	add	r0, r0, #12
   21660:	ldr	r1, [sp, #8]
   21664:	sub	sp, fp, #28
   21668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2166c:	b	1b70c <__assert_fail@plt+0xa1f4>
   21670:	mov	r0, #12
   21674:	sub	sp, fp, #28
   21678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2167c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21680:	add	fp, sp, #24
   21684:	sub	sp, sp, #32
   21688:	mov	r4, r2
   2168c:	mov	r8, r0
   21690:	ldr	r6, [fp, #12]
   21694:	ldr	r7, [fp, #8]
   21698:	cmp	r1, #0
   2169c:	beq	216c4 <__assert_fail@plt+0x101ac>
   216a0:	mov	r5, r1
   216a4:	str	r4, [sp]
   216a8:	str	r3, [sp, #4]
   216ac:	movw	r2, #16217	; 0x3f59
   216b0:	movt	r2, #2
   216b4:	mov	r0, r8
   216b8:	mov	r1, #1
   216bc:	mov	r3, r5
   216c0:	b	216dc <__assert_fail@plt+0x101c4>
   216c4:	str	r3, [sp]
   216c8:	movw	r2, #16229	; 0x3f65
   216cc:	movt	r2, #2
   216d0:	mov	r0, r8
   216d4:	mov	r1, #1
   216d8:	mov	r3, r4
   216dc:	bl	11458 <__fprintf_chk@plt>
   216e0:	movw	r1, #16236	; 0x3f6c
   216e4:	movt	r1, #2
   216e8:	mov	r0, #0
   216ec:	mov	r2, #5
   216f0:	bl	11314 <dcgettext@plt>
   216f4:	mov	r3, r0
   216f8:	movw	r0, #2022	; 0x7e6
   216fc:	str	r0, [sp]
   21700:	movw	r2, #16954	; 0x423a
   21704:	movt	r2, #2
   21708:	mov	r0, r8
   2170c:	mov	r1, #1
   21710:	bl	11458 <__fprintf_chk@plt>
   21714:	movw	r4, #13991	; 0x36a7
   21718:	movt	r4, #2
   2171c:	mov	r0, r4
   21720:	mov	r1, r8
   21724:	bl	1120c <fputs_unlocked@plt>
   21728:	movw	r1, #16240	; 0x3f70
   2172c:	movt	r1, #2
   21730:	mov	r0, #0
   21734:	mov	r2, #5
   21738:	bl	11314 <dcgettext@plt>
   2173c:	mov	r2, r0
   21740:	movw	r3, #16411	; 0x401b
   21744:	movt	r3, #2
   21748:	mov	r0, r8
   2174c:	mov	r1, #1
   21750:	bl	11458 <__fprintf_chk@plt>
   21754:	mov	r0, r4
   21758:	mov	r1, r8
   2175c:	bl	1120c <fputs_unlocked@plt>
   21760:	cmp	r6, #9
   21764:	bhi	217a0 <__assert_fail@plt+0x10288>
   21768:	add	r0, pc, #0
   2176c:	ldr	pc, [r0, r6, lsl #2]
   21770:	muleq	r2, r8, r7
   21774:	andeq	r1, r2, ip, lsr #15
   21778:	ldrdeq	r1, [r2], -ip
   2177c:	andeq	r1, r2, r4, lsl #16
   21780:	andeq	r1, r2, ip, lsr #16
   21784:	andeq	r1, r2, r4, asr r8
   21788:	andeq	r1, r2, ip, ror r8
   2178c:			; <UNDEFINED> instruction: 0x000218b4
   21790:	andeq	r1, r2, r4, asr r9
   21794:	strdeq	r1, [r2], -ip
   21798:	sub	sp, fp, #24
   2179c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   217a0:	movw	r1, #16764	; 0x417c
   217a4:	movt	r1, #2
   217a8:	b	21904 <__assert_fail@plt+0x103ec>
   217ac:	movw	r1, #16445	; 0x403d
   217b0:	movt	r1, #2
   217b4:	mov	r0, #0
   217b8:	mov	r2, #5
   217bc:	bl	11314 <dcgettext@plt>
   217c0:	mov	r2, r0
   217c4:	ldr	r3, [r7]
   217c8:	mov	r0, r8
   217cc:	mov	r1, #1
   217d0:	sub	sp, fp, #24
   217d4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   217d8:	b	11458 <__fprintf_chk@plt>
   217dc:	movw	r1, #16461	; 0x404d
   217e0:	movt	r1, #2
   217e4:	mov	r0, #0
   217e8:	mov	r2, #5
   217ec:	bl	11314 <dcgettext@plt>
   217f0:	mov	r2, r0
   217f4:	ldr	r3, [r7]
   217f8:	ldr	r0, [r7, #4]
   217fc:	str	r0, [sp]
   21800:	b	218f0 <__assert_fail@plt+0x103d8>
   21804:	movw	r1, #16484	; 0x4064
   21808:	movt	r1, #2
   2180c:	mov	r0, #0
   21810:	mov	r2, #5
   21814:	bl	11314 <dcgettext@plt>
   21818:	mov	r2, r0
   2181c:	ldr	r3, [r7]
   21820:	ldmib	r7, {r0, r1}
   21824:	stm	sp, {r0, r1}
   21828:	b	218f0 <__assert_fail@plt+0x103d8>
   2182c:	movw	r1, #16512	; 0x4080
   21830:	movt	r1, #2
   21834:	mov	r0, #0
   21838:	mov	r2, #5
   2183c:	bl	11314 <dcgettext@plt>
   21840:	mov	r2, r0
   21844:	ldr	r3, [r7]
   21848:	ldmib	r7, {r0, r1, r7}
   2184c:	stm	sp, {r0, r1, r7}
   21850:	b	218f0 <__assert_fail@plt+0x103d8>
   21854:	movw	r1, #16544	; 0x40a0
   21858:	movt	r1, #2
   2185c:	mov	r0, #0
   21860:	mov	r2, #5
   21864:	bl	11314 <dcgettext@plt>
   21868:	mov	r2, r0
   2186c:	ldr	r3, [r7]
   21870:	ldmib	r7, {r0, r1, r6, r7}
   21874:	stm	sp, {r0, r1, r6, r7}
   21878:	b	218f0 <__assert_fail@plt+0x103d8>
   2187c:	movw	r1, #16580	; 0x40c4
   21880:	movt	r1, #2
   21884:	mov	r0, #0
   21888:	mov	r2, #5
   2188c:	bl	11314 <dcgettext@plt>
   21890:	mov	r2, r0
   21894:	ldr	r3, [r7]
   21898:	ldmib	r7, {r0, r1, r6}
   2189c:	ldr	r5, [r7, #16]
   218a0:	ldr	r7, [r7, #20]
   218a4:	stm	sp, {r0, r1, r6}
   218a8:	str	r5, [sp, #12]
   218ac:	str	r7, [sp, #16]
   218b0:	b	218f0 <__assert_fail@plt+0x103d8>
   218b4:	movw	r1, #16620	; 0x40ec
   218b8:	movt	r1, #2
   218bc:	mov	r0, #0
   218c0:	mov	r2, #5
   218c4:	bl	11314 <dcgettext@plt>
   218c8:	mov	r2, r0
   218cc:	ldr	r3, [r7]
   218d0:	ldmib	r7, {r0, r1, r6}
   218d4:	ldr	r5, [r7, #16]
   218d8:	ldr	r4, [r7, #20]
   218dc:	ldr	r7, [r7, #24]
   218e0:	stm	sp, {r0, r1, r6}
   218e4:	str	r5, [sp, #12]
   218e8:	str	r4, [sp, #16]
   218ec:	str	r7, [sp, #20]
   218f0:	mov	r0, r8
   218f4:	mov	r1, #1
   218f8:	b	219a4 <__assert_fail@plt+0x1048c>
   218fc:	movw	r1, #16712	; 0x4148
   21900:	movt	r1, #2
   21904:	mov	r0, #0
   21908:	mov	r2, #5
   2190c:	bl	11314 <dcgettext@plt>
   21910:	mov	ip, r0
   21914:	ldr	r3, [r7]
   21918:	ldr	r0, [r7, #4]
   2191c:	ldr	r1, [r7, #8]
   21920:	ldr	r6, [r7, #12]
   21924:	ldr	r5, [r7, #16]
   21928:	ldr	r4, [r7, #20]
   2192c:	ldr	r2, [r7, #24]
   21930:	ldr	lr, [r7, #28]
   21934:	ldr	r7, [r7, #32]
   21938:	stm	sp, {r0, r1, r6}
   2193c:	str	r5, [sp, #12]
   21940:	str	r4, [sp, #16]
   21944:	str	r2, [sp, #20]
   21948:	str	lr, [sp, #24]
   2194c:	str	r7, [sp, #28]
   21950:	b	21998 <__assert_fail@plt+0x10480>
   21954:	movw	r1, #16664	; 0x4118
   21958:	movt	r1, #2
   2195c:	mov	r0, #0
   21960:	mov	r2, #5
   21964:	bl	11314 <dcgettext@plt>
   21968:	mov	ip, r0
   2196c:	ldr	r3, [r7]
   21970:	ldmib	r7, {r0, r1, r6}
   21974:	ldr	r5, [r7, #16]
   21978:	ldr	r4, [r7, #20]
   2197c:	ldr	r2, [r7, #24]
   21980:	ldr	r7, [r7, #28]
   21984:	stm	sp, {r0, r1, r6}
   21988:	str	r5, [sp, #12]
   2198c:	str	r4, [sp, #16]
   21990:	str	r2, [sp, #20]
   21994:	str	r7, [sp, #24]
   21998:	mov	r0, r8
   2199c:	mov	r1, #1
   219a0:	mov	r2, ip
   219a4:	bl	11458 <__fprintf_chk@plt>
   219a8:	sub	sp, fp, #24
   219ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   219b0:	push	{r4, sl, fp, lr}
   219b4:	add	fp, sp, #8
   219b8:	sub	sp, sp, #8
   219bc:	mov	lr, #0
   219c0:	ldr	ip, [fp, #8]
   219c4:	ldr	r4, [ip, lr, lsl #2]
   219c8:	add	lr, lr, #1
   219cc:	cmp	r4, #0
   219d0:	bne	219c4 <__assert_fail@plt+0x104ac>
   219d4:	sub	r4, lr, #1
   219d8:	str	ip, [sp]
   219dc:	str	r4, [sp, #4]
   219e0:	bl	2167c <__assert_fail@plt+0x10164>
   219e4:	sub	sp, fp, #8
   219e8:	pop	{r4, sl, fp, pc}
   219ec:	push	{r4, r5, fp, lr}
   219f0:	add	fp, sp, #8
   219f4:	sub	sp, sp, #48	; 0x30
   219f8:	mov	ip, #0
   219fc:	ldr	r4, [fp, #8]
   21a00:	add	lr, sp, #8
   21a04:	ldr	r5, [r4]
   21a08:	str	r5, [lr, ip, lsl #2]
   21a0c:	cmp	r5, #0
   21a10:	beq	21a24 <__assert_fail@plt+0x1050c>
   21a14:	add	ip, ip, #1
   21a18:	add	r4, r4, #4
   21a1c:	cmp	ip, #10
   21a20:	bcc	21a04 <__assert_fail@plt+0x104ec>
   21a24:	str	lr, [sp]
   21a28:	str	ip, [sp, #4]
   21a2c:	bl	2167c <__assert_fail@plt+0x10164>
   21a30:	sub	sp, fp, #8
   21a34:	pop	{r4, r5, fp, pc}
   21a38:	push	{fp, lr}
   21a3c:	mov	fp, sp
   21a40:	sub	sp, sp, #8
   21a44:	add	ip, fp, #8
   21a48:	str	ip, [sp, #4]
   21a4c:	str	ip, [sp]
   21a50:	bl	219ec <__assert_fail@plt+0x104d4>
   21a54:	mov	sp, fp
   21a58:	pop	{fp, pc}
   21a5c:	push	{fp, lr}
   21a60:	mov	fp, sp
   21a64:	movw	r0, #20940	; 0x51cc
   21a68:	movt	r0, #3
   21a6c:	ldr	r1, [r0]
   21a70:	movw	r0, #13991	; 0x36a7
   21a74:	movt	r0, #2
   21a78:	bl	1120c <fputs_unlocked@plt>
   21a7c:	movw	r1, #16824	; 0x41b8
   21a80:	movt	r1, #2
   21a84:	mov	r0, #0
   21a88:	mov	r2, #5
   21a8c:	bl	11314 <dcgettext@plt>
   21a90:	mov	r1, r0
   21a94:	movw	r2, #16844	; 0x41cc
   21a98:	movt	r2, #2
   21a9c:	mov	r0, #1
   21aa0:	bl	11440 <__printf_chk@plt>
   21aa4:	movw	r1, #16866	; 0x41e2
   21aa8:	movt	r1, #2
   21aac:	mov	r0, #0
   21ab0:	mov	r2, #5
   21ab4:	bl	11314 <dcgettext@plt>
   21ab8:	mov	r1, r0
   21abc:	movw	r2, #14314	; 0x37ea
   21ac0:	movt	r2, #2
   21ac4:	movw	r3, #14607	; 0x390f
   21ac8:	movt	r3, #2
   21acc:	mov	r0, #1
   21ad0:	bl	11440 <__printf_chk@plt>
   21ad4:	movw	r1, #16886	; 0x41f6
   21ad8:	movt	r1, #2
   21adc:	mov	r0, #0
   21ae0:	mov	r2, #5
   21ae4:	bl	11314 <dcgettext@plt>
   21ae8:	mov	r1, r0
   21aec:	movw	r2, #16925	; 0x421d
   21af0:	movt	r2, #2
   21af4:	mov	r0, #1
   21af8:	pop	{fp, lr}
   21afc:	b	11440 <__printf_chk@plt>
   21b00:	b	21b04 <__assert_fail@plt+0x105ec>
   21b04:	push	{r4, r5, r6, sl, fp, lr}
   21b08:	add	fp, sp, #16
   21b0c:	mov	r4, r2
   21b10:	mov	r5, r1
   21b14:	mov	r6, r0
   21b18:	bl	22c24 <__assert_fail@plt+0x1170c>
   21b1c:	cmp	r0, #0
   21b20:	popne	{r4, r5, r6, sl, fp, pc}
   21b24:	cmp	r6, #0
   21b28:	beq	21b3c <__assert_fail@plt+0x10624>
   21b2c:	cmp	r5, #0
   21b30:	cmpne	r4, #0
   21b34:	bne	21b3c <__assert_fail@plt+0x10624>
   21b38:	pop	{r4, r5, r6, sl, fp, pc}
   21b3c:	bl	21ef0 <__assert_fail@plt+0x109d8>
   21b40:	push	{fp, lr}
   21b44:	mov	fp, sp
   21b48:	bl	22624 <__assert_fail@plt+0x1110c>
   21b4c:	bl	21b54 <__assert_fail@plt+0x1063c>
   21b50:	pop	{fp, pc}
   21b54:	cmp	r0, #0
   21b58:	bxne	lr
   21b5c:	push	{fp, lr}
   21b60:	mov	fp, sp
   21b64:	bl	21ef0 <__assert_fail@plt+0x109d8>
   21b68:	push	{fp, lr}
   21b6c:	mov	fp, sp
   21b70:	bl	22b58 <__assert_fail@plt+0x11640>
   21b74:	bl	21b54 <__assert_fail@plt+0x1063c>
   21b78:	pop	{fp, pc}
   21b7c:	b	21b40 <__assert_fail@plt+0x10628>
   21b80:	push	{r4, r5, fp, lr}
   21b84:	add	fp, sp, #8
   21b88:	mov	r4, r1
   21b8c:	mov	r5, r0
   21b90:	bl	22654 <__assert_fail@plt+0x1113c>
   21b94:	cmp	r0, #0
   21b98:	popne	{r4, r5, fp, pc}
   21b9c:	cmp	r5, #0
   21ba0:	beq	21bb0 <__assert_fail@plt+0x10698>
   21ba4:	cmp	r4, #0
   21ba8:	bne	21bb0 <__assert_fail@plt+0x10698>
   21bac:	pop	{r4, r5, fp, pc}
   21bb0:	bl	21ef0 <__assert_fail@plt+0x109d8>
   21bb4:	push	{fp, lr}
   21bb8:	mov	fp, sp
   21bbc:	bl	22b5c <__assert_fail@plt+0x11644>
   21bc0:	bl	21b54 <__assert_fail@plt+0x1063c>
   21bc4:	pop	{fp, pc}
   21bc8:	push	{fp, lr}
   21bcc:	mov	fp, sp
   21bd0:	bl	22b6c <__assert_fail@plt+0x11654>
   21bd4:	bl	21b54 <__assert_fail@plt+0x1063c>
   21bd8:	pop	{fp, pc}
   21bdc:	push	{fp, lr}
   21be0:	mov	fp, sp
   21be4:	mov	r2, r1
   21be8:	mov	r1, r0
   21bec:	mov	r0, #0
   21bf0:	bl	21b04 <__assert_fail@plt+0x105ec>
   21bf4:	pop	{fp, pc}
   21bf8:	mov	r2, r1
   21bfc:	mov	r1, r0
   21c00:	mov	r0, #0
   21c04:	b	21bc8 <__assert_fail@plt+0x106b0>
   21c08:	mov	r2, #1
   21c0c:	b	21c10 <__assert_fail@plt+0x106f8>
   21c10:	push	{r4, r5, fp, lr}
   21c14:	add	fp, sp, #8
   21c18:	mov	r4, r1
   21c1c:	ldr	r5, [r1]
   21c20:	cmp	r0, #0
   21c24:	beq	21c3c <__assert_fail@plt+0x10724>
   21c28:	mov	r1, #1
   21c2c:	add	r1, r1, r5, lsr #1
   21c30:	adds	r5, r5, r1
   21c34:	bcc	21c54 <__assert_fail@plt+0x1073c>
   21c38:	bl	21ef0 <__assert_fail@plt+0x109d8>
   21c3c:	cmp	r5, #0
   21c40:	bne	21c54 <__assert_fail@plt+0x1073c>
   21c44:	mov	r1, #64	; 0x40
   21c48:	udiv	r5, r1, r2
   21c4c:	cmp	r2, #64	; 0x40
   21c50:	addhi	r5, r5, #1
   21c54:	mov	r1, r5
   21c58:	bl	21b04 <__assert_fail@plt+0x105ec>
   21c5c:	str	r5, [r4]
   21c60:	pop	{r4, r5, fp, pc}
   21c64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21c68:	add	fp, sp, #24
   21c6c:	mov	r8, r1
   21c70:	ldr	r6, [r1]
   21c74:	add	r1, r6, r6, asr #1
   21c78:	cmp	r1, r6
   21c7c:	mvnvs	r1, #-2147483648	; 0x80000000
   21c80:	cmp	r1, r3
   21c84:	mov	r5, r1
   21c88:	movgt	r5, r3
   21c8c:	cmn	r3, #1
   21c90:	movle	r5, r1
   21c94:	ldr	r4, [fp, #8]
   21c98:	cmn	r4, #1
   21c9c:	ble	21cc4 <__assert_fail@plt+0x107ac>
   21ca0:	cmp	r4, #0
   21ca4:	beq	21d18 <__assert_fail@plt+0x10800>
   21ca8:	cmn	r5, #1
   21cac:	ble	21cec <__assert_fail@plt+0x107d4>
   21cb0:	mvn	r7, #-2147483648	; 0x80000000
   21cb4:	udiv	r1, r7, r4
   21cb8:	cmp	r1, r5
   21cbc:	bge	21d18 <__assert_fail@plt+0x10800>
   21cc0:	b	21d28 <__assert_fail@plt+0x10810>
   21cc4:	cmn	r5, #1
   21cc8:	ble	21d08 <__assert_fail@plt+0x107f0>
   21ccc:	cmn	r4, #1
   21cd0:	beq	21d18 <__assert_fail@plt+0x10800>
   21cd4:	mov	r1, #-2147483648	; 0x80000000
   21cd8:	sdiv	r1, r1, r4
   21cdc:	mvn	r7, #-2147483648	; 0x80000000
   21ce0:	cmp	r1, r5
   21ce4:	bge	21d18 <__assert_fail@plt+0x10800>
   21ce8:	b	21d28 <__assert_fail@plt+0x10810>
   21cec:	beq	21d18 <__assert_fail@plt+0x10800>
   21cf0:	mov	r1, #-2147483648	; 0x80000000
   21cf4:	sdiv	r1, r1, r5
   21cf8:	mvn	r7, #-2147483648	; 0x80000000
   21cfc:	cmp	r1, r4
   21d00:	bge	21d18 <__assert_fail@plt+0x10800>
   21d04:	b	21d28 <__assert_fail@plt+0x10810>
   21d08:	mvn	r7, #-2147483648	; 0x80000000
   21d0c:	sdiv	r1, r7, r4
   21d10:	cmp	r5, r1
   21d14:	blt	21d28 <__assert_fail@plt+0x10810>
   21d18:	mul	r1, r5, r4
   21d1c:	mov	r7, #64	; 0x40
   21d20:	cmp	r1, #63	; 0x3f
   21d24:	bgt	21d30 <__assert_fail@plt+0x10818>
   21d28:	sdiv	r5, r7, r4
   21d2c:	mul	r1, r5, r4
   21d30:	cmp	r0, #0
   21d34:	moveq	r7, #0
   21d38:	streq	r7, [r8]
   21d3c:	sub	r7, r5, r6
   21d40:	cmp	r7, r2
   21d44:	bge	21df0 <__assert_fail@plt+0x108d8>
   21d48:	add	r5, r6, r2
   21d4c:	mov	r1, #0
   21d50:	cmp	r5, r3
   21d54:	mov	r2, #0
   21d58:	movwgt	r2, #1
   21d5c:	cmn	r3, #1
   21d60:	movwgt	r1, #1
   21d64:	cmp	r5, r6
   21d68:	bvs	21dd8 <__assert_fail@plt+0x108c0>
   21d6c:	ands	r1, r1, r2
   21d70:	bne	21dd8 <__assert_fail@plt+0x108c0>
   21d74:	cmn	r4, #1
   21d78:	ble	21da0 <__assert_fail@plt+0x10888>
   21d7c:	cmp	r4, #0
   21d80:	beq	21dec <__assert_fail@plt+0x108d4>
   21d84:	cmn	r5, #1
   21d88:	ble	21dc4 <__assert_fail@plt+0x108ac>
   21d8c:	mvn	r1, #-2147483648	; 0x80000000
   21d90:	udiv	r1, r1, r4
   21d94:	cmp	r1, r5
   21d98:	bge	21dec <__assert_fail@plt+0x108d4>
   21d9c:	b	21dd8 <__assert_fail@plt+0x108c0>
   21da0:	cmn	r5, #1
   21da4:	ble	21ddc <__assert_fail@plt+0x108c4>
   21da8:	cmn	r4, #1
   21dac:	beq	21dec <__assert_fail@plt+0x108d4>
   21db0:	mov	r1, #-2147483648	; 0x80000000
   21db4:	sdiv	r1, r1, r4
   21db8:	cmp	r1, r5
   21dbc:	bge	21dec <__assert_fail@plt+0x108d4>
   21dc0:	b	21dd8 <__assert_fail@plt+0x108c0>
   21dc4:	beq	21dec <__assert_fail@plt+0x108d4>
   21dc8:	mov	r1, #-2147483648	; 0x80000000
   21dcc:	sdiv	r1, r1, r5
   21dd0:	cmp	r1, r4
   21dd4:	bge	21dec <__assert_fail@plt+0x108d4>
   21dd8:	bl	21ef0 <__assert_fail@plt+0x109d8>
   21ddc:	mvn	r1, #-2147483648	; 0x80000000
   21de0:	sdiv	r1, r1, r4
   21de4:	cmp	r5, r1
   21de8:	blt	21dd8 <__assert_fail@plt+0x108c0>
   21dec:	mul	r1, r5, r4
   21df0:	bl	21b80 <__assert_fail@plt+0x10668>
   21df4:	str	r5, [r8]
   21df8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21dfc:	mov	r1, #1
   21e00:	b	21e04 <__assert_fail@plt+0x108ec>
   21e04:	push	{fp, lr}
   21e08:	mov	fp, sp
   21e0c:	bl	225d0 <__assert_fail@plt+0x110b8>
   21e10:	bl	21b54 <__assert_fail@plt+0x1063c>
   21e14:	pop	{fp, pc}
   21e18:	mov	r1, #1
   21e1c:	b	21e20 <__assert_fail@plt+0x10908>
   21e20:	push	{fp, lr}
   21e24:	mov	fp, sp
   21e28:	bl	22b68 <__assert_fail@plt+0x11650>
   21e2c:	bl	21b54 <__assert_fail@plt+0x1063c>
   21e30:	pop	{fp, pc}
   21e34:	push	{r4, r5, r6, sl, fp, lr}
   21e38:	add	fp, sp, #16
   21e3c:	mov	r4, r1
   21e40:	mov	r5, r0
   21e44:	mov	r0, r1
   21e48:	bl	21b40 <__assert_fail@plt+0x10628>
   21e4c:	mov	r6, r0
   21e50:	mov	r1, r5
   21e54:	mov	r2, r4
   21e58:	bl	112a8 <memcpy@plt>
   21e5c:	mov	r0, r6
   21e60:	pop	{r4, r5, r6, sl, fp, pc}
   21e64:	push	{r4, r5, r6, sl, fp, lr}
   21e68:	add	fp, sp, #16
   21e6c:	mov	r4, r1
   21e70:	mov	r5, r0
   21e74:	mov	r0, r1
   21e78:	bl	21b68 <__assert_fail@plt+0x10650>
   21e7c:	mov	r6, r0
   21e80:	mov	r1, r5
   21e84:	mov	r2, r4
   21e88:	bl	112a8 <memcpy@plt>
   21e8c:	mov	r0, r6
   21e90:	pop	{r4, r5, r6, sl, fp, pc}
   21e94:	push	{r4, r5, r6, sl, fp, lr}
   21e98:	add	fp, sp, #16
   21e9c:	mov	r4, r1
   21ea0:	mov	r5, r0
   21ea4:	add	r0, r1, #1
   21ea8:	bl	21b68 <__assert_fail@plt+0x10650>
   21eac:	mov	r6, r0
   21eb0:	mov	r0, #0
   21eb4:	strb	r0, [r6, r4]
   21eb8:	mov	r0, r6
   21ebc:	mov	r1, r5
   21ec0:	mov	r2, r4
   21ec4:	bl	112a8 <memcpy@plt>
   21ec8:	mov	r0, r6
   21ecc:	pop	{r4, r5, r6, sl, fp, pc}
   21ed0:	push	{r4, sl, fp, lr}
   21ed4:	add	fp, sp, #8
   21ed8:	mov	r4, r0
   21edc:	bl	113ec <strlen@plt>
   21ee0:	add	r1, r0, #1
   21ee4:	mov	r0, r4
   21ee8:	pop	{r4, sl, fp, lr}
   21eec:	b	21e34 <__assert_fail@plt+0x1091c>
   21ef0:	push	{fp, lr}
   21ef4:	mov	fp, sp
   21ef8:	movw	r0, #20840	; 0x5168
   21efc:	movt	r0, #3
   21f00:	ldr	r4, [r0]
   21f04:	movw	r1, #17001	; 0x4269
   21f08:	movt	r1, #2
   21f0c:	mov	r0, #0
   21f10:	mov	r2, #5
   21f14:	bl	11314 <dcgettext@plt>
   21f18:	mov	r3, r0
   21f1c:	movw	r2, #14074	; 0x36fa
   21f20:	movt	r2, #2
   21f24:	mov	r0, r4
   21f28:	mov	r1, #0
   21f2c:	bl	1138c <error@plt>
   21f30:	bl	114f4 <abort@plt>
   21f34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21f38:	add	fp, sp, #24
   21f3c:	sub	sp, sp, #16
   21f40:	mov	r5, r3
   21f44:	mov	r6, r2
   21f48:	mov	r2, r1
   21f4c:	mov	r8, r0
   21f50:	ldr	r0, [fp, #16]
   21f54:	str	r0, [sp]
   21f58:	add	r3, sp, #8
   21f5c:	mov	r0, r8
   21f60:	mov	r1, #0
   21f64:	bl	22040 <__assert_fail@plt+0x10b28>
   21f68:	cmp	r0, #0
   21f6c:	bne	2201c <__assert_fail@plt+0x10b04>
   21f70:	ldr	r7, [sp, #8]
   21f74:	ldr	r4, [sp, #12]
   21f78:	subs	r0, r7, r6
   21f7c:	sbcs	r0, r4, r5
   21f80:	blt	21fa4 <__assert_fail@plt+0x10a8c>
   21f84:	ldr	r0, [fp, #12]
   21f88:	ldr	r1, [fp, #8]
   21f8c:	subs	r1, r1, r7
   21f90:	sbcs	r0, r0, r4
   21f94:	ldrge	r0, [sp, #8]
   21f98:	ldrge	r1, [sp, #12]
   21f9c:	subge	sp, fp, #24
   21fa0:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   21fa4:	subs	r0, r7, #1073741824	; 0x40000000
   21fa8:	sbcs	r0, r4, #0
   21fac:	blt	21fbc <__assert_fail@plt+0x10aa4>
   21fb0:	bl	11404 <__errno_location@plt>
   21fb4:	mov	r1, #75	; 0x4b
   21fb8:	b	21fd8 <__assert_fail@plt+0x10ac0>
   21fbc:	bl	11404 <__errno_location@plt>
   21fc0:	mvn	r1, #0
   21fc4:	mvn	r2, #1073741824	; 0x40000000
   21fc8:	subs	r2, r2, r7
   21fcc:	sbcs	r1, r1, r4
   21fd0:	movlt	r1, #34	; 0x22
   21fd4:	movge	r1, #75	; 0x4b
   21fd8:	str	r1, [r0]
   21fdc:	ldr	r5, [fp, #24]
   21fe0:	ldr	r6, [fp, #20]
   21fe4:	bl	11404 <__errno_location@plt>
   21fe8:	ldr	r4, [r0]
   21fec:	mov	r0, r8
   21ff0:	bl	14618 <__assert_fail@plt+0x3100>
   21ff4:	str	r0, [sp]
   21ff8:	subs	r1, r4, #22
   21ffc:	movne	r1, r4
   22000:	cmp	r5, #0
   22004:	movweq	r5, #1
   22008:	movw	r2, #15387	; 0x3c1b
   2200c:	movt	r2, #2
   22010:	mov	r0, r5
   22014:	mov	r3, r6
   22018:	bl	1138c <error@plt>
   2201c:	cmp	r0, #1
   22020:	beq	21fb0 <__assert_fail@plt+0x10a98>
   22024:	cmp	r0, #3
   22028:	bne	21fdc <__assert_fail@plt+0x10ac4>
   2202c:	bl	11404 <__errno_location@plt>
   22030:	mov	r1, #0
   22034:	b	21fd8 <__assert_fail@plt+0x10ac0>
   22038:	mov	r1, #10
   2203c:	b	21f34 <__assert_fail@plt+0x10a1c>
   22040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22044:	add	fp, sp, #28
   22048:	sub	sp, sp, #20
   2204c:	cmp	r2, #37	; 0x25
   22050:	bcs	22464 <__assert_fail@plt+0x10f4c>
   22054:	mov	r9, r3
   22058:	mov	r7, r2
   2205c:	mov	r6, r1
   22060:	mov	r4, r0
   22064:	ldr	sl, [fp, #8]
   22068:	bl	11404 <__errno_location@plt>
   2206c:	mov	r5, r0
   22070:	mov	r0, #0
   22074:	str	r0, [r5]
   22078:	add	r8, sp, #16
   2207c:	cmp	r6, #0
   22080:	movne	r8, r6
   22084:	mov	r0, r4
   22088:	mov	r1, r8
   2208c:	mov	r2, r7
   22090:	bl	11464 <strtoimax@plt>
   22094:	str	r1, [sp, #12]
   22098:	str	r0, [sp, #8]
   2209c:	ldr	r7, [r8]
   220a0:	cmp	r7, r4
   220a4:	beq	220d0 <__assert_fail@plt+0x10bb8>
   220a8:	ldr	r0, [r5]
   220ac:	cmp	r0, #0
   220b0:	beq	22108 <__assert_fail@plt+0x10bf0>
   220b4:	mov	r5, #4
   220b8:	cmp	r0, #34	; 0x22
   220bc:	bne	22458 <__assert_fail@plt+0x10f40>
   220c0:	mov	r5, #1
   220c4:	cmp	sl, #0
   220c8:	bne	22114 <__assert_fail@plt+0x10bfc>
   220cc:	b	2244c <__assert_fail@plt+0x10f34>
   220d0:	mov	r5, #4
   220d4:	cmp	sl, #0
   220d8:	ldrbne	r1, [r7]
   220dc:	cmpne	r1, #0
   220e0:	beq	22458 <__assert_fail@plt+0x10f40>
   220e4:	mov	r0, sl
   220e8:	bl	113f8 <strchr@plt>
   220ec:	cmp	r0, #0
   220f0:	beq	22458 <__assert_fail@plt+0x10f40>
   220f4:	mov	r5, #0
   220f8:	str	r5, [sp, #12]
   220fc:	mov	r0, #1
   22100:	str	r0, [sp, #8]
   22104:	b	22114 <__assert_fail@plt+0x10bfc>
   22108:	mov	r5, r0
   2210c:	cmp	sl, #0
   22110:	beq	2244c <__assert_fail@plt+0x10f34>
   22114:	ldrb	r4, [r7]
   22118:	cmp	r4, #0
   2211c:	beq	2244c <__assert_fail@plt+0x10f34>
   22120:	mov	r0, sl
   22124:	mov	r1, r4
   22128:	bl	113f8 <strchr@plt>
   2212c:	cmp	r0, #0
   22130:	beq	22348 <__assert_fail@plt+0x10e30>
   22134:	sub	r0, r4, #69	; 0x45
   22138:	mov	r1, #1
   2213c:	str	r1, [sp, #4]
   22140:	mov	r6, #1024	; 0x400
   22144:	cmp	r0, #47	; 0x2f
   22148:	bhi	22244 <__assert_fail@plt+0x10d2c>
   2214c:	add	r1, pc, #0
   22150:	ldr	pc, [r1, r0, lsl #2]
   22154:	andeq	r2, r2, r4, lsl r2
   22158:	andeq	r2, r2, r4, asr #4
   2215c:	andeq	r2, r2, r4, lsl r2
   22160:	andeq	r2, r2, r4, asr #4
   22164:	andeq	r2, r2, r4, asr #4
   22168:	andeq	r2, r2, r4, asr #4
   2216c:	andeq	r2, r2, r4, lsl r2
   22170:	andeq	r2, r2, r4, asr #4
   22174:	andeq	r2, r2, r4, lsl r2
   22178:	andeq	r2, r2, r4, asr #4
   2217c:	andeq	r2, r2, r4, asr #4
   22180:	andeq	r2, r2, r4, lsl r2
   22184:	andeq	r2, r2, r4, asr #4
   22188:	andeq	r2, r2, r4, asr #4
   2218c:	andeq	r2, r2, r4, asr #4
   22190:	andeq	r2, r2, r4, lsl r2
   22194:	andeq	r2, r2, r4, asr #4
   22198:	andeq	r2, r2, r4, asr #4
   2219c:	andeq	r2, r2, r4, asr #4
   221a0:	andeq	r2, r2, r4, asr #4
   221a4:	andeq	r2, r2, r4, lsl r2
   221a8:	andeq	r2, r2, r4, lsl r2
   221ac:	andeq	r2, r2, r4, asr #4
   221b0:	andeq	r2, r2, r4, asr #4
   221b4:	andeq	r2, r2, r4, asr #4
   221b8:	andeq	r2, r2, r4, asr #4
   221bc:	andeq	r2, r2, r4, asr #4
   221c0:	andeq	r2, r2, r4, asr #4
   221c4:	andeq	r2, r2, r4, asr #4
   221c8:	andeq	r2, r2, r4, asr #4
   221cc:	andeq	r2, r2, r4, asr #4
   221d0:	andeq	r2, r2, r4, asr #4
   221d4:	andeq	r2, r2, r4, asr #4
   221d8:	andeq	r2, r2, r4, asr #4
   221dc:	andeq	r2, r2, r4, lsl r2
   221e0:	andeq	r2, r2, r4, asr #4
   221e4:	andeq	r2, r2, r4, asr #4
   221e8:	andeq	r2, r2, r4, asr #4
   221ec:	andeq	r2, r2, r4, lsl r2
   221f0:	andeq	r2, r2, r4, asr #4
   221f4:	andeq	r2, r2, r4, lsl r2
   221f8:	andeq	r2, r2, r4, asr #4
   221fc:	andeq	r2, r2, r4, asr #4
   22200:	andeq	r2, r2, r4, asr #4
   22204:	andeq	r2, r2, r4, asr #4
   22208:	andeq	r2, r2, r4, asr #4
   2220c:	andeq	r2, r2, r4, asr #4
   22210:	andeq	r2, r2, r4, lsl r2
   22214:	mov	r0, sl
   22218:	mov	r1, #48	; 0x30
   2221c:	bl	113f8 <strchr@plt>
   22220:	cmp	r0, #0
   22224:	beq	22244 <__assert_fail@plt+0x10d2c>
   22228:	ldrb	r0, [r7, #1]
   2222c:	cmp	r0, #66	; 0x42
   22230:	cmpne	r0, #68	; 0x44
   22234:	bne	2235c <__assert_fail@plt+0x10e44>
   22238:	mov	r0, #2
   2223c:	str	r0, [sp, #4]
   22240:	mov	r6, #1000	; 0x3e8
   22244:	sub	r1, r4, #66	; 0x42
   22248:	cmp	r1, #53	; 0x35
   2224c:	bhi	22348 <__assert_fail@plt+0x10e30>
   22250:	mov	r0, #0
   22254:	add	r2, pc, #0
   22258:	ldr	pc, [r2, r1, lsl #2]
   2225c:	andeq	r2, r2, ip, asr #7
   22260:	andeq	r2, r2, r8, asr #6
   22264:	andeq	r2, r2, r8, asr #6
   22268:	ldrdeq	r2, [r2], -r8
   2226c:	andeq	r2, r2, r8, asr #6
   22270:	andeq	r2, r2, r4, lsr r3
   22274:	andeq	r2, r2, r8, asr #6
   22278:	andeq	r2, r2, r8, asr #6
   2227c:	andeq	r2, r2, r8, asr #6
   22280:	andeq	r2, r2, ip, ror r3
   22284:	andeq	r2, r2, r8, asr #6
   22288:	muleq	r2, r0, r3
   2228c:	andeq	r2, r2, r8, asr #6
   22290:	andeq	r2, r2, r8, asr #6
   22294:	andeq	r2, r2, ip, ror #7
   22298:	andeq	r2, r2, r8, asr #6
   2229c:	andeq	r2, r2, r8, asr #6
   222a0:	andeq	r2, r2, r8, asr #6
   222a4:	andeq	r2, r2, r4, lsr #7
   222a8:	andeq	r2, r2, r8, asr #6
   222ac:	andeq	r2, r2, r8, asr #6
   222b0:	andeq	r2, r2, r8, asr #6
   222b4:	andeq	r2, r2, r8, asr #6
   222b8:	andeq	r2, r2, r0, lsl #8
   222bc:			; <UNDEFINED> instruction: 0x000223b8
   222c0:	andeq	r2, r2, r8, asr #6
   222c4:	andeq	r2, r2, r8, asr #6
   222c8:	andeq	r2, r2, r8, asr #6
   222cc:	andeq	r2, r2, r8, asr #6
   222d0:	andeq	r2, r2, r8, asr #6
   222d4:	andeq	r2, r2, r8, asr #6
   222d8:	andeq	r2, r2, r8, asr #6
   222dc:	andeq	r2, r2, r4, lsl r4
   222e0:	andeq	r2, r2, ip, lsr #8
   222e4:	andeq	r2, r2, r8, asr #6
   222e8:	andeq	r2, r2, r8, asr #6
   222ec:	andeq	r2, r2, r8, asr #6
   222f0:	andeq	r2, r2, r4, lsr r3
   222f4:	andeq	r2, r2, r8, asr #6
   222f8:	andeq	r2, r2, r8, asr #6
   222fc:	andeq	r2, r2, r8, asr #6
   22300:	andeq	r2, r2, ip, ror r3
   22304:	andeq	r2, r2, r8, asr #6
   22308:	muleq	r2, r0, r3
   2230c:	andeq	r2, r2, r8, asr #6
   22310:	andeq	r2, r2, r8, asr #6
   22314:	andeq	r2, r2, r8, asr #6
   22318:	andeq	r2, r2, r8, asr #6
   2231c:	andeq	r2, r2, r8, asr #6
   22320:	andeq	r2, r2, r8, asr #6
   22324:	andeq	r2, r2, r4, lsr #7
   22328:	andeq	r2, r2, r8, asr #6
   2232c:	andeq	r2, r2, r8, asr #6
   22330:	andeq	r2, r2, r0, lsr #8
   22334:	add	r0, sp, #8
   22338:	mov	r1, r6
   2233c:	mov	r2, #3
   22340:	bl	22588 <__assert_fail@plt+0x11070>
   22344:	b	2242c <__assert_fail@plt+0x10f14>
   22348:	ldr	r0, [sp, #8]
   2234c:	ldr	r1, [sp, #12]
   22350:	strd	r0, [r9]
   22354:	orr	r5, r5, #2
   22358:	b	22458 <__assert_fail@plt+0x10f40>
   2235c:	cmp	r0, #105	; 0x69
   22360:	bne	22244 <__assert_fail@plt+0x10d2c>
   22364:	ldrb	r0, [r7, #2]
   22368:	mov	r1, #1
   2236c:	cmp	r0, #66	; 0x42
   22370:	movweq	r1, #3
   22374:	str	r1, [sp, #4]
   22378:	b	22244 <__assert_fail@plt+0x10d2c>
   2237c:	add	r0, sp, #8
   22380:	mov	r1, r6
   22384:	mov	r2, #1
   22388:	bl	22588 <__assert_fail@plt+0x11070>
   2238c:	b	2242c <__assert_fail@plt+0x10f14>
   22390:	add	r0, sp, #8
   22394:	mov	r1, r6
   22398:	mov	r2, #2
   2239c:	bl	22588 <__assert_fail@plt+0x11070>
   223a0:	b	2242c <__assert_fail@plt+0x10f14>
   223a4:	add	r0, sp, #8
   223a8:	mov	r1, r6
   223ac:	mov	r2, #4
   223b0:	bl	22588 <__assert_fail@plt+0x11070>
   223b4:	b	2242c <__assert_fail@plt+0x10f14>
   223b8:	add	r0, sp, #8
   223bc:	mov	r1, r6
   223c0:	mov	r2, #7
   223c4:	bl	22588 <__assert_fail@plt+0x11070>
   223c8:	b	2242c <__assert_fail@plt+0x10f14>
   223cc:	add	r0, sp, #8
   223d0:	mov	r1, #1024	; 0x400
   223d4:	b	22428 <__assert_fail@plt+0x10f10>
   223d8:	add	r0, sp, #8
   223dc:	mov	r1, r6
   223e0:	mov	r2, #6
   223e4:	bl	22588 <__assert_fail@plt+0x11070>
   223e8:	b	2242c <__assert_fail@plt+0x10f14>
   223ec:	add	r0, sp, #8
   223f0:	mov	r1, r6
   223f4:	mov	r2, #5
   223f8:	bl	22588 <__assert_fail@plt+0x11070>
   223fc:	b	2242c <__assert_fail@plt+0x10f14>
   22400:	add	r0, sp, #8
   22404:	mov	r1, r6
   22408:	mov	r2, #8
   2240c:	bl	22588 <__assert_fail@plt+0x11070>
   22410:	b	2242c <__assert_fail@plt+0x10f14>
   22414:	add	r0, sp, #8
   22418:	mov	r1, #512	; 0x200
   2241c:	b	22428 <__assert_fail@plt+0x10f10>
   22420:	add	r0, sp, #8
   22424:	mov	r1, #2
   22428:	bl	22484 <__assert_fail@plt+0x10f6c>
   2242c:	ldr	r1, [r8]
   22430:	ldr	r3, [sp, #4]
   22434:	add	r2, r1, r3
   22438:	str	r2, [r8]
   2243c:	ldrb	r1, [r1, r3]
   22440:	orr	r5, r0, r5
   22444:	cmp	r1, #0
   22448:	orrne	r5, r5, #2
   2244c:	ldr	r0, [sp, #8]
   22450:	ldr	r1, [sp, #12]
   22454:	strd	r0, [r9]
   22458:	mov	r0, r5
   2245c:	sub	sp, fp, #28
   22460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22464:	movw	r0, #17018	; 0x427a
   22468:	movt	r0, #2
   2246c:	movw	r1, #17056	; 0x42a0
   22470:	movt	r1, #2
   22474:	movw	r3, #17072	; 0x42b0
   22478:	movt	r3, #2
   2247c:	mov	r2, #85	; 0x55
   22480:	bl	11518 <__assert_fail@plt>
   22484:	push	{r4, r5, r6, r7, fp, lr}
   22488:	add	fp, sp, #16
   2248c:	mov	r5, r1
   22490:	mov	r4, r0
   22494:	cmn	r1, #1
   22498:	ble	224c0 <__assert_fail@plt+0x10fa8>
   2249c:	cmp	r5, #0
   224a0:	beq	22524 <__assert_fail@plt+0x1100c>
   224a4:	ldrd	r6, [r4]
   224a8:	cmn	r7, #1
   224ac:	ble	224f8 <__assert_fail@plt+0x10fe0>
   224b0:	asr	r3, r5, #31
   224b4:	mvn	r0, #0
   224b8:	mvn	r1, #-2147483648	; 0x80000000
   224bc:	b	224e0 <__assert_fail@plt+0x10fc8>
   224c0:	ldrd	r6, [r4]
   224c4:	cmn	r7, #1
   224c8:	ble	22540 <__assert_fail@plt+0x11028>
   224cc:	cmn	r5, #1
   224d0:	beq	22524 <__assert_fail@plt+0x1100c>
   224d4:	asr	r3, r5, #31
   224d8:	mov	r0, #0
   224dc:	mov	r1, #-2147483648	; 0x80000000
   224e0:	mov	r2, r5
   224e4:	bl	22d6c <__assert_fail@plt+0x11854>
   224e8:	subs	r0, r0, r6
   224ec:	sbcs	r0, r1, r7
   224f0:	bge	22524 <__assert_fail@plt+0x1100c>
   224f4:	b	22560 <__assert_fail@plt+0x11048>
   224f8:	and	r0, r6, r7
   224fc:	cmn	r0, #1
   22500:	beq	22524 <__assert_fail@plt+0x1100c>
   22504:	mov	r0, #0
   22508:	mov	r1, #-2147483648	; 0x80000000
   2250c:	mov	r2, r6
   22510:	mov	r3, r7
   22514:	bl	22d6c <__assert_fail@plt+0x11854>
   22518:	subs	r0, r0, r5
   2251c:	sbcs	r0, r1, r5, asr #31
   22520:	blt	22560 <__assert_fail@plt+0x11048>
   22524:	ldrd	r0, [r4]
   22528:	umull	r2, r3, r0, r5
   2252c:	asr	r7, r5, #31
   22530:	mla	r0, r0, r7, r3
   22534:	mla	r1, r1, r5, r0
   22538:	mov	r0, #0
   2253c:	b	2257c <__assert_fail@plt+0x11064>
   22540:	asr	r3, r5, #31
   22544:	mvn	r0, #0
   22548:	mvn	r1, #-2147483648	; 0x80000000
   2254c:	mov	r2, r5
   22550:	bl	22d6c <__assert_fail@plt+0x11854>
   22554:	subs	r0, r6, r0
   22558:	sbcs	r0, r7, r1
   2255c:	bge	22524 <__assert_fail@plt+0x1100c>
   22560:	ldr	r0, [r4, #4]
   22564:	mvn	r1, #-2147483648	; 0x80000000
   22568:	cmp	r0, #0
   2256c:	movlt	r1, #-2147483648	; 0x80000000
   22570:	mvn	r2, #0
   22574:	movwlt	r2, #0
   22578:	mov	r0, #1
   2257c:	str	r2, [r4]
   22580:	str	r1, [r4, #4]
   22584:	pop	{r4, r5, r6, r7, fp, pc}
   22588:	push	{r4, r5, r6, r7, fp, lr}
   2258c:	add	fp, sp, #16
   22590:	cmp	r2, #0
   22594:	moveq	r6, #0
   22598:	moveq	r0, r6
   2259c:	popeq	{r4, r5, r6, r7, fp, pc}
   225a0:	mov	r4, r2
   225a4:	mov	r5, r1
   225a8:	mov	r7, r0
   225ac:	mov	r6, #0
   225b0:	mov	r0, r7
   225b4:	mov	r1, r5
   225b8:	bl	22484 <__assert_fail@plt+0x10f6c>
   225bc:	orr	r6, r0, r6
   225c0:	subs	r4, r4, #1
   225c4:	bne	225b0 <__assert_fail@plt+0x11098>
   225c8:	mov	r0, r6
   225cc:	pop	{r4, r5, r6, r7, fp, pc}
   225d0:	clz	r2, r1
   225d4:	lsr	r2, r2, #5
   225d8:	clz	r3, r0
   225dc:	lsr	r3, r3, #5
   225e0:	orrs	r2, r3, r2
   225e4:	movwne	r1, #1
   225e8:	movwne	r0, #1
   225ec:	cmp	r1, #0
   225f0:	beq	22620 <__assert_fail@plt+0x11108>
   225f4:	mvn	r2, #-2147483648	; 0x80000000
   225f8:	udiv	r2, r2, r1
   225fc:	cmp	r2, r0
   22600:	bcs	22620 <__assert_fail@plt+0x11108>
   22604:	push	{fp, lr}
   22608:	mov	fp, sp
   2260c:	bl	11404 <__errno_location@plt>
   22610:	mov	r1, #12
   22614:	str	r1, [r0]
   22618:	mov	r0, #0
   2261c:	pop	{fp, pc}
   22620:	b	11200 <calloc@plt>
   22624:	cmp	r0, #0
   22628:	movweq	r0, #1
   2262c:	cmn	r0, #1
   22630:	ble	22638 <__assert_fail@plt+0x11120>
   22634:	b	11398 <malloc@plt>
   22638:	push	{fp, lr}
   2263c:	mov	fp, sp
   22640:	bl	11404 <__errno_location@plt>
   22644:	mov	r1, #12
   22648:	str	r1, [r0]
   2264c:	mov	r0, #0
   22650:	pop	{fp, pc}
   22654:	push	{fp, lr}
   22658:	mov	fp, sp
   2265c:	cmp	r0, #0
   22660:	beq	2267c <__assert_fail@plt+0x11164>
   22664:	cmp	r1, #0
   22668:	beq	22688 <__assert_fail@plt+0x11170>
   2266c:	cmn	r1, #1
   22670:	ble	22694 <__assert_fail@plt+0x1117c>
   22674:	pop	{fp, lr}
   22678:	b	11320 <realloc@plt>
   2267c:	mov	r0, r1
   22680:	pop	{fp, lr}
   22684:	b	22624 <__assert_fail@plt+0x1110c>
   22688:	bl	22b14 <__assert_fail@plt+0x115fc>
   2268c:	mov	r0, #0
   22690:	pop	{fp, pc}
   22694:	bl	11404 <__errno_location@plt>
   22698:	mov	r1, #12
   2269c:	str	r1, [r0]
   226a0:	mov	r0, #0
   226a4:	pop	{fp, pc}
   226a8:	mov	r1, r0
   226ac:	sub	r2, r0, #65	; 0x41
   226b0:	mov	r0, #1
   226b4:	cmp	r2, #26
   226b8:	subcs	r2, r1, #97	; 0x61
   226bc:	cmpcs	r2, #26
   226c0:	bcs	226c8 <__assert_fail@plt+0x111b0>
   226c4:	bx	lr
   226c8:	sub	r1, r1, #48	; 0x30
   226cc:	cmp	r1, #10
   226d0:	movcs	r0, #0
   226d4:	bx	lr
   226d8:	mov	r1, r0
   226dc:	sub	r2, r0, #65	; 0x41
   226e0:	mov	r0, #1
   226e4:	cmp	r2, #26
   226e8:	subcs	r1, r1, #97	; 0x61
   226ec:	cmpcs	r1, #26
   226f0:	movcs	r0, #0
   226f4:	bx	lr
   226f8:	mov	r1, #0
   226fc:	cmp	r0, #128	; 0x80
   22700:	movwcc	r1, #1
   22704:	mov	r0, r1
   22708:	bx	lr
   2270c:	sub	r1, r0, #9
   22710:	clz	r1, r1
   22714:	lsr	r1, r1, #5
   22718:	sub	r0, r0, #32
   2271c:	clz	r0, r0
   22720:	lsr	r0, r0, #5
   22724:	orr	r0, r0, r1
   22728:	bx	lr
   2272c:	mov	r1, r0
   22730:	mov	r0, #1
   22734:	cmp	r1, #32
   22738:	bxcc	lr
   2273c:	cmp	r1, #127	; 0x7f
   22740:	movne	r0, #0
   22744:	bx	lr
   22748:	sub	r1, r0, #48	; 0x30
   2274c:	mov	r0, #0
   22750:	cmp	r1, #10
   22754:	movwcc	r0, #1
   22758:	bx	lr
   2275c:	sub	r1, r0, #33	; 0x21
   22760:	mov	r0, #0
   22764:	cmp	r1, #94	; 0x5e
   22768:	movwcc	r0, #1
   2276c:	bx	lr
   22770:	sub	r1, r0, #97	; 0x61
   22774:	mov	r0, #0
   22778:	cmp	r1, #26
   2277c:	movwcc	r0, #1
   22780:	bx	lr
   22784:	sub	r1, r0, #32
   22788:	mov	r0, #0
   2278c:	cmp	r1, #95	; 0x5f
   22790:	movwcc	r0, #1
   22794:	bx	lr
   22798:	sub	r1, r0, #33	; 0x21
   2279c:	cmp	r1, #93	; 0x5d
   227a0:	bhi	2292c <__assert_fail@plt+0x11414>
   227a4:	mov	r0, #1
   227a8:	add	r2, pc, #0
   227ac:	ldr	pc, [r2, r1, lsl #2]
   227b0:	andeq	r2, r2, r8, lsr #18
   227b4:	andeq	r2, r2, r8, lsr #18
   227b8:	andeq	r2, r2, r8, lsr #18
   227bc:	andeq	r2, r2, r8, lsr #18
   227c0:	andeq	r2, r2, r8, lsr #18
   227c4:	andeq	r2, r2, r8, lsr #18
   227c8:	andeq	r2, r2, r8, lsr #18
   227cc:	andeq	r2, r2, r8, lsr #18
   227d0:	andeq	r2, r2, r8, lsr #18
   227d4:	andeq	r2, r2, r8, lsr #18
   227d8:	andeq	r2, r2, r8, lsr #18
   227dc:	andeq	r2, r2, r8, lsr #18
   227e0:	andeq	r2, r2, r8, lsr #18
   227e4:	andeq	r2, r2, r8, lsr #18
   227e8:	andeq	r2, r2, r8, lsr #18
   227ec:	andeq	r2, r2, ip, lsr #18
   227f0:	andeq	r2, r2, ip, lsr #18
   227f4:	andeq	r2, r2, ip, lsr #18
   227f8:	andeq	r2, r2, ip, lsr #18
   227fc:	andeq	r2, r2, ip, lsr #18
   22800:	andeq	r2, r2, ip, lsr #18
   22804:	andeq	r2, r2, ip, lsr #18
   22808:	andeq	r2, r2, ip, lsr #18
   2280c:	andeq	r2, r2, ip, lsr #18
   22810:	andeq	r2, r2, ip, lsr #18
   22814:	andeq	r2, r2, r8, lsr #18
   22818:	andeq	r2, r2, r8, lsr #18
   2281c:	andeq	r2, r2, r8, lsr #18
   22820:	andeq	r2, r2, r8, lsr #18
   22824:	andeq	r2, r2, r8, lsr #18
   22828:	andeq	r2, r2, r8, lsr #18
   2282c:	andeq	r2, r2, r8, lsr #18
   22830:	andeq	r2, r2, ip, lsr #18
   22834:	andeq	r2, r2, ip, lsr #18
   22838:	andeq	r2, r2, ip, lsr #18
   2283c:	andeq	r2, r2, ip, lsr #18
   22840:	andeq	r2, r2, ip, lsr #18
   22844:	andeq	r2, r2, ip, lsr #18
   22848:	andeq	r2, r2, ip, lsr #18
   2284c:	andeq	r2, r2, ip, lsr #18
   22850:	andeq	r2, r2, ip, lsr #18
   22854:	andeq	r2, r2, ip, lsr #18
   22858:	andeq	r2, r2, ip, lsr #18
   2285c:	andeq	r2, r2, ip, lsr #18
   22860:	andeq	r2, r2, ip, lsr #18
   22864:	andeq	r2, r2, ip, lsr #18
   22868:	andeq	r2, r2, ip, lsr #18
   2286c:	andeq	r2, r2, ip, lsr #18
   22870:	andeq	r2, r2, ip, lsr #18
   22874:	andeq	r2, r2, ip, lsr #18
   22878:	andeq	r2, r2, ip, lsr #18
   2287c:	andeq	r2, r2, ip, lsr #18
   22880:	andeq	r2, r2, ip, lsr #18
   22884:	andeq	r2, r2, ip, lsr #18
   22888:	andeq	r2, r2, ip, lsr #18
   2288c:	andeq	r2, r2, ip, lsr #18
   22890:	andeq	r2, r2, ip, lsr #18
   22894:	andeq	r2, r2, ip, lsr #18
   22898:	andeq	r2, r2, r8, lsr #18
   2289c:	andeq	r2, r2, r8, lsr #18
   228a0:	andeq	r2, r2, r8, lsr #18
   228a4:	andeq	r2, r2, r8, lsr #18
   228a8:	andeq	r2, r2, r8, lsr #18
   228ac:	andeq	r2, r2, r8, lsr #18
   228b0:	andeq	r2, r2, ip, lsr #18
   228b4:	andeq	r2, r2, ip, lsr #18
   228b8:	andeq	r2, r2, ip, lsr #18
   228bc:	andeq	r2, r2, ip, lsr #18
   228c0:	andeq	r2, r2, ip, lsr #18
   228c4:	andeq	r2, r2, ip, lsr #18
   228c8:	andeq	r2, r2, ip, lsr #18
   228cc:	andeq	r2, r2, ip, lsr #18
   228d0:	andeq	r2, r2, ip, lsr #18
   228d4:	andeq	r2, r2, ip, lsr #18
   228d8:	andeq	r2, r2, ip, lsr #18
   228dc:	andeq	r2, r2, ip, lsr #18
   228e0:	andeq	r2, r2, ip, lsr #18
   228e4:	andeq	r2, r2, ip, lsr #18
   228e8:	andeq	r2, r2, ip, lsr #18
   228ec:	andeq	r2, r2, ip, lsr #18
   228f0:	andeq	r2, r2, ip, lsr #18
   228f4:	andeq	r2, r2, ip, lsr #18
   228f8:	andeq	r2, r2, ip, lsr #18
   228fc:	andeq	r2, r2, ip, lsr #18
   22900:	andeq	r2, r2, ip, lsr #18
   22904:	andeq	r2, r2, ip, lsr #18
   22908:	andeq	r2, r2, ip, lsr #18
   2290c:	andeq	r2, r2, ip, lsr #18
   22910:	andeq	r2, r2, ip, lsr #18
   22914:	andeq	r2, r2, ip, lsr #18
   22918:	andeq	r2, r2, r8, lsr #18
   2291c:	andeq	r2, r2, r8, lsr #18
   22920:	andeq	r2, r2, r8, lsr #18
   22924:	andeq	r2, r2, r8, lsr #18
   22928:	bx	lr
   2292c:	mov	r0, #0
   22930:	bx	lr
   22934:	sub	r0, r0, #9
   22938:	cmp	r0, #23
   2293c:	movhi	r0, #0
   22940:	bxhi	lr
   22944:	bic	r0, r0, #-16777216	; 0xff000000
   22948:	movw	r1, #31
   2294c:	movt	r1, #128	; 0x80
   22950:	mov	r2, #1
   22954:	and	r0, r2, r1, lsr r0
   22958:	bx	lr
   2295c:	sub	r1, r0, #65	; 0x41
   22960:	mov	r0, #0
   22964:	cmp	r1, #26
   22968:	movwcc	r0, #1
   2296c:	bx	lr
   22970:	mov	r1, r0
   22974:	sub	r2, r0, #48	; 0x30
   22978:	mov	r0, #1
   2297c:	cmp	r2, #22
   22980:	bhi	22998 <__assert_fail@plt+0x11480>
   22984:	mov	ip, #1
   22988:	movw	r3, #1023	; 0x3ff
   2298c:	movt	r3, #126	; 0x7e
   22990:	tst	r3, ip, lsl r2
   22994:	bxne	lr
   22998:	sub	r1, r1, #97	; 0x61
   2299c:	cmp	r1, #6
   229a0:	movcs	r0, #0
   229a4:	bxcs	lr
   229a8:	bx	lr
   229ac:	sub	r1, r0, #65	; 0x41
   229b0:	cmp	r1, #26
   229b4:	addcc	r0, r0, #32
   229b8:	bx	lr
   229bc:	sub	r1, r0, #97	; 0x61
   229c0:	cmp	r1, #26
   229c4:	subcc	r0, r0, #32
   229c8:	bx	lr
   229cc:	push	{r4, r5, r6, sl, fp, lr}
   229d0:	add	fp, sp, #16
   229d4:	mov	r4, r0
   229d8:	bl	11368 <__fpending@plt>
   229dc:	mov	r5, r0
   229e0:	mov	r0, r4
   229e4:	bl	11374 <ferror_unlocked@plt>
   229e8:	mov	r6, r0
   229ec:	mov	r0, r4
   229f0:	bl	12b38 <__assert_fail@plt+0x1620>
   229f4:	cmp	r6, #0
   229f8:	beq	22a18 <__assert_fail@plt+0x11500>
   229fc:	mvn	r4, #0
   22a00:	cmp	r0, #0
   22a04:	bne	22a4c <__assert_fail@plt+0x11534>
   22a08:	bl	11404 <__errno_location@plt>
   22a0c:	mov	r1, #0
   22a10:	str	r1, [r0]
   22a14:	b	22a4c <__assert_fail@plt+0x11534>
   22a18:	cmp	r0, #0
   22a1c:	mov	r4, r0
   22a20:	mvnne	r4, #0
   22a24:	cmp	r5, #0
   22a28:	bne	22a4c <__assert_fail@plt+0x11534>
   22a2c:	cmp	r0, #0
   22a30:	beq	22a4c <__assert_fail@plt+0x11534>
   22a34:	bl	11404 <__errno_location@plt>
   22a38:	ldr	r0, [r0]
   22a3c:	subs	r4, r0, #9
   22a40:	mvnne	r4, #0
   22a44:	mov	r0, r4
   22a48:	pop	{r4, r5, r6, sl, fp, pc}
   22a4c:	mov	r0, r4
   22a50:	pop	{r4, r5, r6, sl, fp, pc}
   22a54:	push	{r4, r5, r6, r7, fp, lr}
   22a58:	add	fp, sp, #16
   22a5c:	mov	r5, r1
   22a60:	mov	r4, r0
   22a64:	ldr	r0, [r0, #4]
   22a68:	cmp	r0, r1
   22a6c:	strcs	r5, [r4]
   22a70:	movcs	r0, #1
   22a74:	popcs	{r4, r5, r6, r7, fp, pc}
   22a78:	mov	r6, r3
   22a7c:	cmp	r3, #0
   22a80:	beq	22aa8 <__assert_fail@plt+0x11590>
   22a84:	mvn	r0, #0
   22a88:	udiv	r0, r0, r6
   22a8c:	cmp	r0, r5
   22a90:	bcs	22aa8 <__assert_fail@plt+0x11590>
   22a94:	bl	11404 <__errno_location@plt>
   22a98:	mov	r1, #12
   22a9c:	str	r1, [r0]
   22aa0:	mov	r0, #0
   22aa4:	pop	{r4, r5, r6, r7, fp, pc}
   22aa8:	mul	r1, r6, r5
   22aac:	ldr	r0, [r4, #8]
   22ab0:	cmp	r0, r2
   22ab4:	beq	22acc <__assert_fail@plt+0x115b4>
   22ab8:	bl	22654 <__assert_fail@plt+0x1113c>
   22abc:	mov	r7, r0
   22ac0:	cmp	r0, #0
   22ac4:	bne	22afc <__assert_fail@plt+0x115e4>
   22ac8:	b	22b0c <__assert_fail@plt+0x115f4>
   22acc:	mov	r0, r1
   22ad0:	bl	22624 <__assert_fail@plt+0x1110c>
   22ad4:	cmp	r0, #0
   22ad8:	beq	22b0c <__assert_fail@plt+0x115f4>
   22adc:	mov	r7, r0
   22ae0:	ldr	r1, [r4, #8]
   22ae4:	cmp	r1, #0
   22ae8:	beq	22afc <__assert_fail@plt+0x115e4>
   22aec:	ldr	r0, [r4]
   22af0:	mul	r2, r0, r6
   22af4:	mov	r0, r7
   22af8:	bl	112a8 <memcpy@plt>
   22afc:	str	r5, [r4]
   22b00:	stmib	r4, {r5, r7}
   22b04:	mov	r0, #1
   22b08:	pop	{r4, r5, r6, r7, fp, pc}
   22b0c:	mov	r0, #0
   22b10:	pop	{r4, r5, r6, r7, fp, pc}
   22b14:	push	{r4, r5, r6, sl, fp, lr}
   22b18:	add	fp, sp, #16
   22b1c:	mov	r4, r0
   22b20:	bl	11404 <__errno_location@plt>
   22b24:	mov	r5, r0
   22b28:	ldr	r6, [r0]
   22b2c:	mov	r0, r4
   22b30:	bl	11284 <free@plt>
   22b34:	str	r6, [r5]
   22b38:	pop	{r4, r5, r6, sl, fp, pc}
   22b3c:	push	{fp, lr}
   22b40:	mov	fp, sp
   22b44:	bl	11404 <__errno_location@plt>
   22b48:	mov	r1, #12
   22b4c:	str	r1, [r0]
   22b50:	mov	r0, #0
   22b54:	pop	{fp, pc}
   22b58:	b	22624 <__assert_fail@plt+0x1110c>
   22b5c:	cmp	r1, #0
   22b60:	orreq	r1, r1, #1
   22b64:	b	22654 <__assert_fail@plt+0x1113c>
   22b68:	b	225d0 <__assert_fail@plt+0x110b8>
   22b6c:	clz	r3, r2
   22b70:	lsr	ip, r3, #5
   22b74:	clz	r3, r1
   22b78:	lsr	r3, r3, #5
   22b7c:	orrs	r3, r3, ip
   22b80:	movwne	r1, #1
   22b84:	movwne	r2, #1
   22b88:	b	22c24 <__assert_fail@plt+0x1170c>
   22b8c:	push	{fp, lr}
   22b90:	mov	fp, sp
   22b94:	mov	r0, #14
   22b98:	bl	114ac <nl_langinfo@plt>
   22b9c:	movw	r1, #14990	; 0x3a8e
   22ba0:	movt	r1, #2
   22ba4:	cmp	r0, #0
   22ba8:	movne	r1, r0
   22bac:	ldrb	r2, [r1]
   22bb0:	movw	r0, #17150	; 0x42fe
   22bb4:	movt	r0, #2
   22bb8:	cmp	r2, #0
   22bbc:	movne	r0, r1
   22bc0:	pop	{fp, pc}
   22bc4:	push	{r4, r5, r6, r7, fp, lr}
   22bc8:	add	fp, sp, #16
   22bcc:	sub	sp, sp, #8
   22bd0:	mov	r7, r2
   22bd4:	mov	r4, r1
   22bd8:	add	r5, sp, #4
   22bdc:	cmp	r0, #0
   22be0:	movne	r5, r0
   22be4:	mov	r0, r5
   22be8:	bl	11380 <mbrtowc@plt>
   22bec:	mov	r6, r0
   22bf0:	cmp	r7, #0
   22bf4:	beq	22c18 <__assert_fail@plt+0x11700>
   22bf8:	cmn	r6, #2
   22bfc:	bcc	22c18 <__assert_fail@plt+0x11700>
   22c00:	mov	r0, #0
   22c04:	bl	22c60 <__assert_fail@plt+0x11748>
   22c08:	cmp	r0, #0
   22c0c:	ldrbeq	r0, [r4]
   22c10:	streq	r0, [r5]
   22c14:	moveq	r6, #1
   22c18:	mov	r0, r6
   22c1c:	sub	sp, fp, #16
   22c20:	pop	{r4, r5, r6, r7, fp, pc}
   22c24:	cmp	r2, #0
   22c28:	beq	22c58 <__assert_fail@plt+0x11740>
   22c2c:	mvn	r3, #0
   22c30:	udiv	r3, r3, r2
   22c34:	cmp	r3, r1
   22c38:	bcs	22c58 <__assert_fail@plt+0x11740>
   22c3c:	push	{fp, lr}
   22c40:	mov	fp, sp
   22c44:	bl	11404 <__errno_location@plt>
   22c48:	mov	r1, #12
   22c4c:	str	r1, [r0]
   22c50:	mov	r0, #0
   22c54:	pop	{fp, pc}
   22c58:	mul	r1, r2, r1
   22c5c:	b	22654 <__assert_fail@plt+0x1113c>
   22c60:	push	{r4, sl, fp, lr}
   22c64:	add	fp, sp, #8
   22c68:	sub	sp, sp, #264	; 0x108
   22c6c:	add	r1, sp, #7
   22c70:	movw	r2, #257	; 0x101
   22c74:	bl	22cc4 <__assert_fail@plt+0x117ac>
   22c78:	mov	r4, #0
   22c7c:	cmp	r0, #0
   22c80:	bne	22cb8 <__assert_fail@plt+0x117a0>
   22c84:	add	r0, sp, #7
   22c88:	movw	r1, #17156	; 0x4304
   22c8c:	movt	r1, #2
   22c90:	bl	11248 <strcmp@plt>
   22c94:	cmp	r0, #0
   22c98:	beq	22cb8 <__assert_fail@plt+0x117a0>
   22c9c:	add	r0, sp, #7
   22ca0:	movw	r1, #17158	; 0x4306
   22ca4:	movt	r1, #2
   22ca8:	bl	11248 <strcmp@plt>
   22cac:	mov	r4, r0
   22cb0:	cmp	r0, #0
   22cb4:	movwne	r4, #1
   22cb8:	mov	r0, r4
   22cbc:	sub	sp, fp, #8
   22cc0:	pop	{r4, sl, fp, pc}
   22cc4:	b	22cc8 <__assert_fail@plt+0x117b0>
   22cc8:	push	{r4, r5, r6, r7, fp, lr}
   22ccc:	add	fp, sp, #16
   22cd0:	mov	r6, r2
   22cd4:	mov	r4, r1
   22cd8:	bl	22d64 <__assert_fail@plt+0x1184c>
   22cdc:	cmp	r0, #0
   22ce0:	beq	22d10 <__assert_fail@plt+0x117f8>
   22ce4:	mov	r7, r0
   22ce8:	bl	113ec <strlen@plt>
   22cec:	cmp	r0, r6
   22cf0:	bcs	22d30 <__assert_fail@plt+0x11818>
   22cf4:	add	r2, r0, #1
   22cf8:	mov	r0, r4
   22cfc:	mov	r1, r7
   22d00:	bl	112a8 <memcpy@plt>
   22d04:	mov	r5, #0
   22d08:	mov	r0, r5
   22d0c:	pop	{r4, r5, r6, r7, fp, pc}
   22d10:	mov	r5, #22
   22d14:	cmp	r6, #0
   22d18:	movne	r0, #0
   22d1c:	strbne	r0, [r4]
   22d20:	movne	r0, r5
   22d24:	popne	{r4, r5, r6, r7, fp, pc}
   22d28:	mov	r0, r5
   22d2c:	pop	{r4, r5, r6, r7, fp, pc}
   22d30:	mov	r5, #34	; 0x22
   22d34:	cmp	r6, #0
   22d38:	beq	22d58 <__assert_fail@plt+0x11840>
   22d3c:	sub	r6, r6, #1
   22d40:	mov	r0, r4
   22d44:	mov	r1, r7
   22d48:	mov	r2, r6
   22d4c:	bl	112a8 <memcpy@plt>
   22d50:	mov	r0, #0
   22d54:	strb	r0, [r4, r6]
   22d58:	mov	r0, r5
   22d5c:	pop	{r4, r5, r6, r7, fp, pc}
   22d60:	b	22d64 <__assert_fail@plt+0x1184c>
   22d64:	mov	r1, #0
   22d68:	b	11488 <setlocale@plt>
   22d6c:	cmp	r3, #0
   22d70:	cmpeq	r2, #0
   22d74:	bne	22d98 <__assert_fail@plt+0x11880>
   22d78:	cmp	r1, #0
   22d7c:	movlt	r1, #-2147483648	; 0x80000000
   22d80:	movlt	r0, #0
   22d84:	blt	22d94 <__assert_fail@plt+0x1187c>
   22d88:	cmpeq	r0, #0
   22d8c:	mvnne	r1, #-2147483648	; 0x80000000
   22d90:	mvnne	r0, #0
   22d94:	b	22e40 <__assert_fail@plt+0x11928>
   22d98:	sub	sp, sp, #8
   22d9c:	push	{sp, lr}
   22da0:	cmp	r1, #0
   22da4:	blt	22dc4 <__assert_fail@plt+0x118ac>
   22da8:	cmp	r3, #0
   22dac:	blt	22df8 <__assert_fail@plt+0x118e0>
   22db0:	bl	22e50 <__assert_fail@plt+0x11938>
   22db4:	ldr	lr, [sp, #4]
   22db8:	add	sp, sp, #8
   22dbc:	pop	{r2, r3}
   22dc0:	bx	lr
   22dc4:	rsbs	r0, r0, #0
   22dc8:	sbc	r1, r1, r1, lsl #1
   22dcc:	cmp	r3, #0
   22dd0:	blt	22e1c <__assert_fail@plt+0x11904>
   22dd4:	bl	22e50 <__assert_fail@plt+0x11938>
   22dd8:	ldr	lr, [sp, #4]
   22ddc:	add	sp, sp, #8
   22de0:	pop	{r2, r3}
   22de4:	rsbs	r0, r0, #0
   22de8:	sbc	r1, r1, r1, lsl #1
   22dec:	rsbs	r2, r2, #0
   22df0:	sbc	r3, r3, r3, lsl #1
   22df4:	bx	lr
   22df8:	rsbs	r2, r2, #0
   22dfc:	sbc	r3, r3, r3, lsl #1
   22e00:	bl	22e50 <__assert_fail@plt+0x11938>
   22e04:	ldr	lr, [sp, #4]
   22e08:	add	sp, sp, #8
   22e0c:	pop	{r2, r3}
   22e10:	rsbs	r0, r0, #0
   22e14:	sbc	r1, r1, r1, lsl #1
   22e18:	bx	lr
   22e1c:	rsbs	r2, r2, #0
   22e20:	sbc	r3, r3, r3, lsl #1
   22e24:	bl	22e50 <__assert_fail@plt+0x11938>
   22e28:	ldr	lr, [sp, #4]
   22e2c:	add	sp, sp, #8
   22e30:	pop	{r2, r3}
   22e34:	rsbs	r2, r2, #0
   22e38:	sbc	r3, r3, r3, lsl #1
   22e3c:	bx	lr
   22e40:	push	{r1, lr}
   22e44:	mov	r0, #8
   22e48:	bl	11224 <raise@plt>
   22e4c:	pop	{r1, pc}
   22e50:	cmp	r1, r3
   22e54:	cmpeq	r0, r2
   22e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e5c:	mov	r4, r0
   22e60:	movcc	r0, #0
   22e64:	mov	r5, r1
   22e68:	ldr	lr, [sp, #36]	; 0x24
   22e6c:	movcc	r1, r0
   22e70:	bcc	22f6c <__assert_fail@plt+0x11a54>
   22e74:	cmp	r3, #0
   22e78:	clzeq	ip, r2
   22e7c:	clzne	ip, r3
   22e80:	addeq	ip, ip, #32
   22e84:	cmp	r5, #0
   22e88:	clzeq	r1, r4
   22e8c:	addeq	r1, r1, #32
   22e90:	clzne	r1, r5
   22e94:	sub	ip, ip, r1
   22e98:	sub	sl, ip, #32
   22e9c:	lsl	r9, r3, ip
   22ea0:	rsb	fp, ip, #32
   22ea4:	orr	r9, r9, r2, lsl sl
   22ea8:	orr	r9, r9, r2, lsr fp
   22eac:	lsl	r8, r2, ip
   22eb0:	cmp	r5, r9
   22eb4:	cmpeq	r4, r8
   22eb8:	movcc	r0, #0
   22ebc:	movcc	r1, r0
   22ec0:	bcc	22edc <__assert_fail@plt+0x119c4>
   22ec4:	mov	r0, #1
   22ec8:	subs	r4, r4, r8
   22ecc:	lsl	r1, r0, sl
   22ed0:	orr	r1, r1, r0, lsr fp
   22ed4:	lsl	r0, r0, ip
   22ed8:	sbc	r5, r5, r9
   22edc:	cmp	ip, #0
   22ee0:	beq	22f6c <__assert_fail@plt+0x11a54>
   22ee4:	lsr	r6, r8, #1
   22ee8:	orr	r6, r6, r9, lsl #31
   22eec:	lsr	r7, r9, #1
   22ef0:	mov	r2, ip
   22ef4:	b	22f18 <__assert_fail@plt+0x11a00>
   22ef8:	subs	r3, r4, r6
   22efc:	sbc	r8, r5, r7
   22f00:	adds	r3, r3, r3
   22f04:	adc	r8, r8, r8
   22f08:	adds	r4, r3, #1
   22f0c:	adc	r5, r8, #0
   22f10:	subs	r2, r2, #1
   22f14:	beq	22f34 <__assert_fail@plt+0x11a1c>
   22f18:	cmp	r5, r7
   22f1c:	cmpeq	r4, r6
   22f20:	bcs	22ef8 <__assert_fail@plt+0x119e0>
   22f24:	adds	r4, r4, r4
   22f28:	adc	r5, r5, r5
   22f2c:	subs	r2, r2, #1
   22f30:	bne	22f18 <__assert_fail@plt+0x11a00>
   22f34:	lsr	r3, r4, ip
   22f38:	orr	r3, r3, r5, lsl fp
   22f3c:	lsr	r2, r5, ip
   22f40:	orr	r3, r3, r5, lsr sl
   22f44:	adds	r0, r0, r4
   22f48:	mov	r4, r3
   22f4c:	lsl	r3, r2, ip
   22f50:	orr	r3, r3, r4, lsl sl
   22f54:	lsl	ip, r4, ip
   22f58:	orr	r3, r3, r4, lsr fp
   22f5c:	adc	r1, r1, r5
   22f60:	subs	r0, r0, ip
   22f64:	mov	r5, r2
   22f68:	sbc	r1, r1, r3
   22f6c:	cmp	lr, #0
   22f70:	strdne	r4, [lr]
   22f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22f7c:	mov	r7, r0
   22f80:	ldr	r6, [pc, #72]	; 22fd0 <__assert_fail@plt+0x11ab8>
   22f84:	ldr	r5, [pc, #72]	; 22fd4 <__assert_fail@plt+0x11abc>
   22f88:	add	r6, pc, r6
   22f8c:	add	r5, pc, r5
   22f90:	sub	r6, r6, r5
   22f94:	mov	r8, r1
   22f98:	mov	r9, r2
   22f9c:	bl	111d4 <pthread_mutex_unlock@plt-0x20>
   22fa0:	asrs	r6, r6, #2
   22fa4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   22fa8:	mov	r4, #0
   22fac:	add	r4, r4, #1
   22fb0:	ldr	r3, [r5], #4
   22fb4:	mov	r2, r9
   22fb8:	mov	r1, r8
   22fbc:	mov	r0, r7
   22fc0:	blx	r3
   22fc4:	cmp	r6, r4
   22fc8:	bne	22fac <__assert_fail@plt+0x11a94>
   22fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22fd0:	andeq	r1, r1, ip, ror pc
   22fd4:	andeq	r1, r1, r4, ror pc
   22fd8:	bx	lr
   22fdc:	ldr	r3, [pc, #12]	; 22ff0 <__assert_fail@plt+0x11ad8>
   22fe0:	mov	r1, #0
   22fe4:	add	r3, pc, r3
   22fe8:	ldr	r2, [r3]
   22fec:	b	1141c <__cxa_atexit@plt>
   22ff0:	andeq	r2, r1, r8, lsr r1

Disassembly of section .fini:

00022ff4 <.fini>:
   22ff4:	push	{r3, lr}
   22ff8:	pop	{r3, pc}
