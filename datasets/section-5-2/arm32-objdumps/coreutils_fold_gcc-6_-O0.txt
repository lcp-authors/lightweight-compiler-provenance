
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010cc0 <.init>:
   10cc0:	push	{r3, lr}
   10cc4:	bl	10fa4 <__assert_fail@plt+0x48>
   10cc8:	pop	{r3, pc}

Disassembly of section .plt:

00010ccc <calloc@plt-0x14>:
   10ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cd0:	ldr	lr, [pc, #4]	; 10cdc <calloc@plt-0x4>
   10cd4:	add	lr, pc, lr
   10cd8:	ldr	pc, [lr, #8]!
   10cdc:	andeq	r8, r1, r4, lsr #6

00010ce0 <calloc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #24, 20	; 0x18000
   10ce8:	ldr	pc, [ip, #804]!	; 0x324

00010cec <fputs_unlocked@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #24, 20	; 0x18000
   10cf4:	ldr	pc, [ip, #796]!	; 0x31c

00010cf8 <raise@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #788]!	; 0x314

00010d04 <strcmp@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #780]!	; 0x30c

00010d10 <posix_fadvise64@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #772]!	; 0x304

00010d1c <printf@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #764]!	; 0x2fc

00010d28 <fflush@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #756]!	; 0x2f4

00010d34 <memmove@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d40 <free@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #740]!	; 0x2e4

00010d4c <_exit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #24, 20	; 0x18000
   10d54:	ldr	pc, [ip, #732]!	; 0x2dc

00010d58 <memcpy@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #24, 20	; 0x18000
   10d60:	ldr	pc, [ip, #724]!	; 0x2d4

00010d64 <mbsinit@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #24, 20	; 0x18000
   10d6c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d70 <fwrite_unlocked@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #24, 20	; 0x18000
   10d78:	ldr	pc, [ip, #708]!	; 0x2c4

00010d7c <memcmp@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #24, 20	; 0x18000
   10d84:	ldr	pc, [ip, #700]!	; 0x2bc

00010d88 <fputc_unlocked@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #24, 20	; 0x18000
   10d90:	ldr	pc, [ip, #692]!	; 0x2b4

00010d94 <getc_unlocked@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #24, 20	; 0x18000
   10d9c:	ldr	pc, [ip, #684]!	; 0x2ac

00010da0 <realloc@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #24, 20	; 0x18000
   10da8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dac <textdomain@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #24, 20	; 0x18000
   10db4:	ldr	pc, [ip, #668]!	; 0x29c

00010db8 <iswprint@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #660]!	; 0x294

00010dc4 <fwrite@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #652]!	; 0x28c

00010dd0 <lseek64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #644]!	; 0x284

00010ddc <__ctype_get_mb_cur_max@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #636]!	; 0x27c

00010de8 <__fpending@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #628]!	; 0x274

00010df4 <ferror_unlocked@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #620]!	; 0x26c

00010e00 <mbrtowc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #24, 20	; 0x18000
   10e08:	ldr	pc, [ip, #612]!	; 0x264

00010e0c <error@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #24, 20	; 0x18000
   10e14:	ldr	pc, [ip, #604]!	; 0x25c

00010e18 <malloc@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #24, 20	; 0x18000
   10e20:	ldr	pc, [ip, #596]!	; 0x254

00010e24 <__libc_start_main@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #588]!	; 0x24c

00010e30 <__freading@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #580]!	; 0x244

00010e3c <__gmon_start__@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #572]!	; 0x23c

00010e48 <getopt_long@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #564]!	; 0x234

00010e54 <__ctype_b_loc@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #556]!	; 0x22c

00010e60 <exit@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #548]!	; 0x224

00010e6c <gettext@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #540]!	; 0x21c

00010e78 <strlen@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #532]!	; 0x214

00010e84 <strchr@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #524]!	; 0x20c

00010e90 <fprintf@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #516]!	; 0x204

00010e9c <__errno_location@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #508]!	; 0x1fc

00010ea8 <__cxa_atexit@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #500]!	; 0x1f4

00010eb4 <memset@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec0 <fileno@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #484]!	; 0x1e4

00010ecc <strtoumax@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ed8 <fclose@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ee4 <fseeko64@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef0 <setlocale@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #452]!	; 0x1c4

00010efc <strrchr@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #444]!	; 0x1bc

00010f08 <nl_langinfo@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #436]!	; 0x1b4

00010f14 <clearerr_unlocked@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f20 <fopen64@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #420]!	; 0x1a4

00010f2c <bindtextdomain@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #412]!	; 0x19c

00010f38 <strncmp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #404]!	; 0x194

00010f44 <abort@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #396]!	; 0x18c

00010f50 <putchar_unlocked@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #388]!	; 0x184

00010f5c <__assert_fail@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #380]!	; 0x17c

Disassembly of section .text:

00010f68 <.text>:
   10f68:	mov	fp, #0
   10f6c:	mov	lr, #0
   10f70:	pop	{r1}		; (ldr r1, [sp], #4)
   10f74:	mov	r2, sp
   10f78:	push	{r2}		; (str r2, [sp, #-4]!)
   10f7c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f80:	ldr	ip, [pc, #16]	; 10f98 <__assert_fail@plt+0x3c>
   10f84:	push	{ip}		; (str ip, [sp, #-4]!)
   10f88:	ldr	r0, [pc, #12]	; 10f9c <__assert_fail@plt+0x40>
   10f8c:	ldr	r3, [pc, #12]	; 10fa0 <__assert_fail@plt+0x44>
   10f90:	bl	10e24 <__libc_start_main@plt>
   10f94:	bl	10f44 <abort@plt>
   10f98:	andeq	r7, r1, r0, lsr #20
   10f9c:	andeq	r1, r1, r0, ror #18
   10fa0:	andeq	r7, r1, r0, asr #19
   10fa4:	ldr	r3, [pc, #20]	; 10fc0 <__assert_fail@plt+0x64>
   10fa8:	ldr	r2, [pc, #20]	; 10fc4 <__assert_fail@plt+0x68>
   10fac:	add	r3, pc, r3
   10fb0:	ldr	r2, [r3, r2]
   10fb4:	cmp	r2, #0
   10fb8:	bxeq	lr
   10fbc:	b	10e3c <__gmon_start__@plt>
   10fc0:	andeq	r8, r1, ip, asr #32
   10fc4:	andeq	r0, r0, r4, ror #1
   10fc8:	ldr	r3, [pc, #28]	; 10fec <__assert_fail@plt+0x90>
   10fcc:	ldr	r0, [pc, #28]	; 10ff0 <__assert_fail@plt+0x94>
   10fd0:	sub	r3, r3, r0
   10fd4:	cmp	r3, #6
   10fd8:	bxls	lr
   10fdc:	ldr	r3, [pc, #16]	; 10ff4 <__assert_fail@plt+0x98>
   10fe0:	cmp	r3, #0
   10fe4:	bxeq	lr
   10fe8:	bx	r3
   10fec:	andeq	r9, r2, fp, lsr r1
   10ff0:	andeq	r9, r2, r8, lsr r1
   10ff4:	andeq	r0, r0, r0
   10ff8:	ldr	r1, [pc, #36]	; 11024 <__assert_fail@plt+0xc8>
   10ffc:	ldr	r0, [pc, #36]	; 11028 <__assert_fail@plt+0xcc>
   11000:	sub	r1, r1, r0
   11004:	asr	r1, r1, #2
   11008:	add	r1, r1, r1, lsr #31
   1100c:	asrs	r1, r1, #1
   11010:	bxeq	lr
   11014:	ldr	r3, [pc, #16]	; 1102c <__assert_fail@plt+0xd0>
   11018:	cmp	r3, #0
   1101c:	bxeq	lr
   11020:	bx	r3
   11024:	andeq	r9, r2, r8, lsr r1
   11028:	andeq	r9, r2, r8, lsr r1
   1102c:	andeq	r0, r0, r0
   11030:	push	{r4, lr}
   11034:	ldr	r4, [pc, #24]	; 11054 <__assert_fail@plt+0xf8>
   11038:	ldrb	r3, [r4]
   1103c:	cmp	r3, #0
   11040:	popne	{r4, pc}
   11044:	bl	10fc8 <__assert_fail@plt+0x6c>
   11048:	mov	r3, #1
   1104c:	strb	r3, [r4]
   11050:	pop	{r4, pc}
   11054:	andeq	r9, r2, ip, asr r1
   11058:	ldr	r0, [pc, #40]	; 11088 <__assert_fail@plt+0x12c>
   1105c:	ldr	r3, [r0]
   11060:	cmp	r3, #0
   11064:	bne	1106c <__assert_fail@plt+0x110>
   11068:	b	10ff8 <__assert_fail@plt+0x9c>
   1106c:	ldr	r3, [pc, #24]	; 1108c <__assert_fail@plt+0x130>
   11070:	cmp	r3, #0
   11074:	beq	11068 <__assert_fail@plt+0x10c>
   11078:	push	{r4, lr}
   1107c:	blx	r3
   11080:	pop	{r4, lr}
   11084:	b	10ff8 <__assert_fail@plt+0x9c>
   11088:	andeq	r8, r2, r4, lsl pc
   1108c:	andeq	r0, r0, r0
   11090:	push	{fp}		; (str fp, [sp, #-4]!)
   11094:	add	fp, sp, #0
   11098:	sub	sp, sp, #12
   1109c:	mov	r3, r0
   110a0:	strb	r3, [fp, #-5]
   110a4:	ldrb	r3, [fp, #-5]
   110a8:	mov	r0, r3
   110ac:	add	sp, fp, #0
   110b0:	pop	{fp}		; (ldr fp, [sp], #4)
   110b4:	bx	lr
   110b8:	push	{fp, lr}
   110bc:	add	fp, sp, #4
   110c0:	ldr	r0, [pc, #32]	; 110e8 <__assert_fail@plt+0x18c>
   110c4:	bl	10e6c <gettext@plt>
   110c8:	mov	r2, r0
   110cc:	ldr	r3, [pc, #24]	; 110ec <__assert_fail@plt+0x190>
   110d0:	ldr	r3, [r3]
   110d4:	mov	r1, r3
   110d8:	mov	r0, r2
   110dc:	bl	10cec <fputs_unlocked@plt>
   110e0:	nop			; (mov r0, r0)
   110e4:	pop	{fp, pc}
   110e8:	andeq	r7, r1, r8, asr #20
   110ec:	andeq	r9, r2, r4, asr r1
   110f0:	push	{fp, lr}
   110f4:	add	fp, sp, #4
   110f8:	ldr	r0, [pc, #32]	; 11120 <__assert_fail@plt+0x1c4>
   110fc:	bl	10e6c <gettext@plt>
   11100:	mov	r2, r0
   11104:	ldr	r3, [pc, #24]	; 11124 <__assert_fail@plt+0x1c8>
   11108:	ldr	r3, [r3]
   1110c:	mov	r1, r3
   11110:	mov	r0, r2
   11114:	bl	10cec <fputs_unlocked@plt>
   11118:	nop			; (mov r0, r0)
   1111c:	pop	{fp, pc}
   11120:	andeq	r7, r1, r0, lsl #21
   11124:	andeq	r9, r2, r4, asr r1
   11128:	push	{fp, lr}
   1112c:	add	fp, sp, #4
   11130:	sub	sp, sp, #80	; 0x50
   11134:	str	r0, [fp, #-80]	; 0xffffffb0
   11138:	ldr	r3, [pc, #348]	; 1129c <__assert_fail@plt+0x340>
   1113c:	sub	ip, fp, #72	; 0x48
   11140:	mov	lr, r3
   11144:	ldm	lr!, {r0, r1, r2, r3}
   11148:	stmia	ip!, {r0, r1, r2, r3}
   1114c:	ldm	lr!, {r0, r1, r2, r3}
   11150:	stmia	ip!, {r0, r1, r2, r3}
   11154:	ldm	lr!, {r0, r1, r2, r3}
   11158:	stmia	ip!, {r0, r1, r2, r3}
   1115c:	ldm	lr, {r0, r1}
   11160:	stm	ip, {r0, r1}
   11164:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11168:	str	r3, [fp, #-8]
   1116c:	sub	r3, fp, #72	; 0x48
   11170:	str	r3, [fp, #-12]
   11174:	b	11184 <__assert_fail@plt+0x228>
   11178:	ldr	r3, [fp, #-12]
   1117c:	add	r3, r3, #8
   11180:	str	r3, [fp, #-12]
   11184:	ldr	r3, [fp, #-12]
   11188:	ldr	r3, [r3]
   1118c:	cmp	r3, #0
   11190:	beq	111b4 <__assert_fail@plt+0x258>
   11194:	ldr	r3, [fp, #-12]
   11198:	ldr	r3, [r3]
   1119c:	mov	r1, r3
   111a0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   111a4:	bl	10d04 <strcmp@plt>
   111a8:	mov	r3, r0
   111ac:	cmp	r3, #0
   111b0:	bne	11178 <__assert_fail@plt+0x21c>
   111b4:	ldr	r3, [fp, #-12]
   111b8:	ldr	r3, [r3, #4]
   111bc:	cmp	r3, #0
   111c0:	beq	111d0 <__assert_fail@plt+0x274>
   111c4:	ldr	r3, [fp, #-12]
   111c8:	ldr	r3, [r3, #4]
   111cc:	str	r3, [fp, #-8]
   111d0:	ldr	r0, [pc, #200]	; 112a0 <__assert_fail@plt+0x344>
   111d4:	bl	10e6c <gettext@plt>
   111d8:	mov	r3, r0
   111dc:	ldr	r2, [pc, #192]	; 112a4 <__assert_fail@plt+0x348>
   111e0:	ldr	r1, [pc, #192]	; 112a8 <__assert_fail@plt+0x34c>
   111e4:	mov	r0, r3
   111e8:	bl	10d1c <printf@plt>
   111ec:	mov	r1, #0
   111f0:	mov	r0, #5
   111f4:	bl	10ef0 <setlocale@plt>
   111f8:	str	r0, [fp, #-16]
   111fc:	ldr	r3, [fp, #-16]
   11200:	cmp	r3, #0
   11204:	beq	11244 <__assert_fail@plt+0x2e8>
   11208:	mov	r2, #3
   1120c:	ldr	r1, [pc, #152]	; 112ac <__assert_fail@plt+0x350>
   11210:	ldr	r0, [fp, #-16]
   11214:	bl	10f38 <strncmp@plt>
   11218:	mov	r3, r0
   1121c:	cmp	r3, #0
   11220:	beq	11244 <__assert_fail@plt+0x2e8>
   11224:	ldr	r0, [pc, #132]	; 112b0 <__assert_fail@plt+0x354>
   11228:	bl	10e6c <gettext@plt>
   1122c:	mov	r2, r0
   11230:	ldr	r3, [pc, #124]	; 112b4 <__assert_fail@plt+0x358>
   11234:	ldr	r3, [r3]
   11238:	mov	r1, r3
   1123c:	mov	r0, r2
   11240:	bl	10cec <fputs_unlocked@plt>
   11244:	ldr	r0, [pc, #108]	; 112b8 <__assert_fail@plt+0x35c>
   11248:	bl	10e6c <gettext@plt>
   1124c:	mov	r3, r0
   11250:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11254:	ldr	r1, [pc, #72]	; 112a4 <__assert_fail@plt+0x348>
   11258:	mov	r0, r3
   1125c:	bl	10d1c <printf@plt>
   11260:	ldr	r0, [pc, #84]	; 112bc <__assert_fail@plt+0x360>
   11264:	bl	10e6c <gettext@plt>
   11268:	ldr	r2, [fp, #-8]
   1126c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11270:	cmp	r2, r3
   11274:	bne	11280 <__assert_fail@plt+0x324>
   11278:	ldr	r3, [pc, #64]	; 112c0 <__assert_fail@plt+0x364>
   1127c:	b	11284 <__assert_fail@plt+0x328>
   11280:	ldr	r3, [pc, #60]	; 112c4 <__assert_fail@plt+0x368>
   11284:	mov	r2, r3
   11288:	ldr	r1, [fp, #-8]
   1128c:	bl	10d1c <printf@plt>
   11290:	nop			; (mov r0, r0)
   11294:	sub	sp, fp, #4
   11298:	pop	{fp, pc}
   1129c:	andeq	r7, r1, r0, asr #24
   112a0:	andeq	r7, r1, ip, asr #21
   112a4:	andeq	r7, r1, r4, ror #21
   112a8:	andeq	r7, r1, ip, lsl #22
   112ac:	andeq	r7, r1, ip, lsl fp
   112b0:	andeq	r7, r1, r0, lsr #22
   112b4:	andeq	r9, r2, r4, asr r1
   112b8:	andeq	r7, r1, r8, ror #22
   112bc:	andeq	r7, r1, r4, lsl #23
   112c0:			; <UNDEFINED> instruction: 0x00017bb8
   112c4:	andeq	r7, r1, r4, asr #23
   112c8:	push	{r4, fp, lr}
   112cc:	add	fp, sp, #8
   112d0:	sub	sp, sp, #12
   112d4:	str	r0, [fp, #-16]
   112d8:	ldr	r3, [fp, #-16]
   112dc:	cmp	r3, #0
   112e0:	beq	11310 <__assert_fail@plt+0x3b4>
   112e4:	ldr	r3, [pc, #220]	; 113c8 <__assert_fail@plt+0x46c>
   112e8:	ldr	r4, [r3]
   112ec:	ldr	r0, [pc, #216]	; 113cc <__assert_fail@plt+0x470>
   112f0:	bl	10e6c <gettext@plt>
   112f4:	mov	r1, r0
   112f8:	ldr	r3, [pc, #208]	; 113d0 <__assert_fail@plt+0x474>
   112fc:	ldr	r3, [r3]
   11300:	mov	r2, r3
   11304:	mov	r0, r4
   11308:	bl	10e90 <fprintf@plt>
   1130c:	b	113c0 <__assert_fail@plt+0x464>
   11310:	ldr	r0, [pc, #188]	; 113d4 <__assert_fail@plt+0x478>
   11314:	bl	10e6c <gettext@plt>
   11318:	mov	r2, r0
   1131c:	ldr	r3, [pc, #172]	; 113d0 <__assert_fail@plt+0x474>
   11320:	ldr	r3, [r3]
   11324:	mov	r1, r3
   11328:	mov	r0, r2
   1132c:	bl	10d1c <printf@plt>
   11330:	ldr	r0, [pc, #160]	; 113d8 <__assert_fail@plt+0x47c>
   11334:	bl	10e6c <gettext@plt>
   11338:	mov	r2, r0
   1133c:	ldr	r3, [pc, #152]	; 113dc <__assert_fail@plt+0x480>
   11340:	ldr	r3, [r3]
   11344:	mov	r1, r3
   11348:	mov	r0, r2
   1134c:	bl	10cec <fputs_unlocked@plt>
   11350:	bl	110b8 <__assert_fail@plt+0x15c>
   11354:	bl	110f0 <__assert_fail@plt+0x194>
   11358:	ldr	r0, [pc, #128]	; 113e0 <__assert_fail@plt+0x484>
   1135c:	bl	10e6c <gettext@plt>
   11360:	mov	r2, r0
   11364:	ldr	r3, [pc, #112]	; 113dc <__assert_fail@plt+0x480>
   11368:	ldr	r3, [r3]
   1136c:	mov	r1, r3
   11370:	mov	r0, r2
   11374:	bl	10cec <fputs_unlocked@plt>
   11378:	ldr	r0, [pc, #100]	; 113e4 <__assert_fail@plt+0x488>
   1137c:	bl	10e6c <gettext@plt>
   11380:	mov	r2, r0
   11384:	ldr	r3, [pc, #80]	; 113dc <__assert_fail@plt+0x480>
   11388:	ldr	r3, [r3]
   1138c:	mov	r1, r3
   11390:	mov	r0, r2
   11394:	bl	10cec <fputs_unlocked@plt>
   11398:	ldr	r0, [pc, #72]	; 113e8 <__assert_fail@plt+0x48c>
   1139c:	bl	10e6c <gettext@plt>
   113a0:	mov	r2, r0
   113a4:	ldr	r3, [pc, #48]	; 113dc <__assert_fail@plt+0x480>
   113a8:	ldr	r3, [r3]
   113ac:	mov	r1, r3
   113b0:	mov	r0, r2
   113b4:	bl	10cec <fputs_unlocked@plt>
   113b8:	ldr	r0, [pc, #44]	; 113ec <__assert_fail@plt+0x490>
   113bc:	bl	11128 <__assert_fail@plt+0x1cc>
   113c0:	ldr	r0, [fp, #-16]
   113c4:	bl	10e60 <exit@plt>
   113c8:	andeq	r9, r2, r8, asr #2
   113cc:	andeq	r7, r1, r4, lsr #26
   113d0:	andeq	r9, r2, r4, ror r1
   113d4:	andeq	r7, r1, ip, asr #26
   113d8:	andeq	r7, r1, r0, ror sp
   113dc:	andeq	r9, r2, r4, asr r1
   113e0:	andeq	r7, r1, ip, lsr #27
   113e4:	andeq	r7, r1, r0, asr #28
   113e8:	andeq	r7, r1, r0, ror lr
   113ec:	andeq	r7, r1, r8, lsr #29
   113f0:	push	{fp}		; (str fp, [sp, #-4]!)
   113f4:	add	fp, sp, #0
   113f8:	sub	sp, sp, #12
   113fc:	str	r0, [fp, #-8]
   11400:	mov	r3, r1
   11404:	strb	r3, [fp, #-9]
   11408:	ldr	r3, [pc, #160]	; 114b0 <__assert_fail@plt+0x554>
   1140c:	ldrb	r3, [r3]
   11410:	eor	r3, r3, #1
   11414:	uxtb	r3, r3
   11418:	cmp	r3, #0
   1141c:	beq	11490 <__assert_fail@plt+0x534>
   11420:	ldrb	r3, [fp, #-9]
   11424:	cmp	r3, #8
   11428:	bne	11448 <__assert_fail@plt+0x4ec>
   1142c:	ldr	r3, [fp, #-8]
   11430:	cmp	r3, #0
   11434:	beq	1149c <__assert_fail@plt+0x540>
   11438:	ldr	r3, [fp, #-8]
   1143c:	sub	r3, r3, #1
   11440:	str	r3, [fp, #-8]
   11444:	b	1149c <__assert_fail@plt+0x540>
   11448:	ldrb	r3, [fp, #-9]
   1144c:	cmp	r3, #13
   11450:	bne	11460 <__assert_fail@plt+0x504>
   11454:	mov	r3, #0
   11458:	str	r3, [fp, #-8]
   1145c:	b	1149c <__assert_fail@plt+0x540>
   11460:	ldrb	r3, [fp, #-9]
   11464:	cmp	r3, #9
   11468:	bne	11480 <__assert_fail@plt+0x524>
   1146c:	ldr	r3, [fp, #-8]
   11470:	bic	r3, r3, #7
   11474:	add	r3, r3, #8
   11478:	str	r3, [fp, #-8]
   1147c:	b	1149c <__assert_fail@plt+0x540>
   11480:	ldr	r3, [fp, #-8]
   11484:	add	r3, r3, #1
   11488:	str	r3, [fp, #-8]
   1148c:	b	1149c <__assert_fail@plt+0x540>
   11490:	ldr	r3, [fp, #-8]
   11494:	add	r3, r3, #1
   11498:	str	r3, [fp, #-8]
   1149c:	ldr	r3, [fp, #-8]
   114a0:	mov	r0, r3
   114a4:	add	sp, fp, #0
   114a8:	pop	{fp}		; (ldr fp, [sp], #4)
   114ac:	bx	lr
   114b0:	andeq	r9, r2, r1, ror #2
   114b4:	push	{r4, fp, lr}
   114b8:	add	fp, sp, #8
   114bc:	sub	sp, sp, #44	; 0x2c
   114c0:	str	r0, [fp, #-48]	; 0xffffffd0
   114c4:	str	r1, [fp, #-52]	; 0xffffffcc
   114c8:	mov	r3, #0
   114cc:	str	r3, [fp, #-20]	; 0xffffffec
   114d0:	mov	r3, #0
   114d4:	str	r3, [fp, #-24]	; 0xffffffe8
   114d8:	ldr	r1, [pc, #1116]	; 1193c <__assert_fail@plt+0x9e0>
   114dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   114e0:	bl	10d04 <strcmp@plt>
   114e4:	mov	r3, r0
   114e8:	cmp	r3, #0
   114ec:	bne	1150c <__assert_fail@plt+0x5b0>
   114f0:	ldr	r3, [pc, #1096]	; 11940 <__assert_fail@plt+0x9e4>
   114f4:	ldr	r3, [r3]
   114f8:	str	r3, [fp, #-16]
   114fc:	ldr	r3, [pc, #1088]	; 11944 <__assert_fail@plt+0x9e8>
   11500:	mov	r2, #1
   11504:	strb	r2, [r3]
   11508:	b	1151c <__assert_fail@plt+0x5c0>
   1150c:	ldr	r1, [pc, #1076]	; 11948 <__assert_fail@plt+0x9ec>
   11510:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11514:	bl	10f20 <fopen64@plt>
   11518:	str	r0, [fp, #-16]
   1151c:	ldr	r3, [fp, #-16]
   11520:	cmp	r3, #0
   11524:	bne	11560 <__assert_fail@plt+0x604>
   11528:	bl	10e9c <__errno_location@plt>
   1152c:	mov	r3, r0
   11530:	ldr	r4, [r3]
   11534:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11538:	mov	r1, #3
   1153c:	mov	r0, #0
   11540:	bl	1461c <__assert_fail@plt+0x36c0>
   11544:	mov	r3, r0
   11548:	ldr	r2, [pc, #1020]	; 1194c <__assert_fail@plt+0x9f0>
   1154c:	mov	r1, r4
   11550:	mov	r0, #0
   11554:	bl	10e0c <error@plt>
   11558:	mov	r3, #0
   1155c:	b	11930 <__assert_fail@plt+0x9d4>
   11560:	mov	r1, #2
   11564:	ldr	r0, [fp, #-16]
   11568:	bl	11e7c <__assert_fail@plt+0xf20>
   1156c:	b	11834 <__assert_fail@plt+0x8d8>
   11570:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11574:	add	r2, r3, #1
   11578:	ldr	r3, [pc, #976]	; 11950 <__assert_fail@plt+0x9f4>
   1157c:	ldr	r3, [r3]
   11580:	cmp	r2, r3
   11584:	bcc	115a8 <__assert_fail@plt+0x64c>
   11588:	ldr	r3, [pc, #964]	; 11954 <__assert_fail@plt+0x9f8>
   1158c:	ldr	r3, [r3]
   11590:	ldr	r1, [pc, #952]	; 11950 <__assert_fail@plt+0x9f4>
   11594:	mov	r0, r3
   11598:	bl	152e8 <__assert_fail@plt+0x438c>
   1159c:	mov	r2, r0
   115a0:	ldr	r3, [pc, #940]	; 11954 <__assert_fail@plt+0x9f8>
   115a4:	str	r2, [r3]
   115a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   115ac:	cmp	r3, #10
   115b0:	bne	11608 <__assert_fail@plt+0x6ac>
   115b4:	ldr	r3, [pc, #920]	; 11954 <__assert_fail@plt+0x9f8>
   115b8:	ldr	r2, [r3]
   115bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   115c0:	add	r1, r3, #1
   115c4:	str	r1, [fp, #-24]	; 0xffffffe8
   115c8:	add	r3, r2, r3
   115cc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   115d0:	uxtb	r2, r2
   115d4:	strb	r2, [r3]
   115d8:	ldr	r3, [pc, #884]	; 11954 <__assert_fail@plt+0x9f8>
   115dc:	ldr	r0, [r3]
   115e0:	ldr	r3, [pc, #880]	; 11958 <__assert_fail@plt+0x9fc>
   115e4:	ldr	r3, [r3]
   115e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   115ec:	mov	r1, #1
   115f0:	bl	10d70 <fwrite_unlocked@plt>
   115f4:	mov	r3, #0
   115f8:	str	r3, [fp, #-24]	; 0xffffffe8
   115fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11600:	str	r3, [fp, #-20]	; 0xffffffec
   11604:	b	11834 <__assert_fail@plt+0x8d8>
   11608:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1160c:	uxtb	r3, r3
   11610:	mov	r1, r3
   11614:	ldr	r0, [fp, #-20]	; 0xffffffec
   11618:	bl	113f0 <__assert_fail@plt+0x494>
   1161c:	str	r0, [fp, #-20]	; 0xffffffec
   11620:	ldr	r2, [fp, #-20]	; 0xffffffec
   11624:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11628:	cmp	r2, r3
   1162c:	bls	11810 <__assert_fail@plt+0x8b4>
   11630:	ldr	r3, [pc, #804]	; 1195c <__assert_fail@plt+0xa00>
   11634:	ldrb	r3, [r3]
   11638:	cmp	r3, #0
   1163c:	beq	1178c <__assert_fail@plt+0x830>
   11640:	mov	r3, #0
   11644:	strb	r3, [fp, #-29]	; 0xffffffe3
   11648:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1164c:	str	r3, [fp, #-36]	; 0xffffffdc
   11650:	b	116b0 <__assert_fail@plt+0x754>
   11654:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11658:	sub	r3, r3, #1
   1165c:	str	r3, [fp, #-36]	; 0xffffffdc
   11660:	bl	10e54 <__ctype_b_loc@plt>
   11664:	mov	r3, r0
   11668:	ldr	r4, [r3]
   1166c:	ldr	r3, [pc, #736]	; 11954 <__assert_fail@plt+0x9f8>
   11670:	ldr	r2, [r3]
   11674:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11678:	add	r3, r2, r3
   1167c:	ldrb	r3, [r3]
   11680:	mov	r0, r3
   11684:	bl	11090 <__assert_fail@plt+0x134>
   11688:	mov	r3, r0
   1168c:	lsl	r3, r3, #1
   11690:	add	r3, r4, r3
   11694:	ldrh	r3, [r3]
   11698:	and	r3, r3, #1
   1169c:	cmp	r3, #0
   116a0:	beq	116b0 <__assert_fail@plt+0x754>
   116a4:	mov	r3, #1
   116a8:	strb	r3, [fp, #-29]	; 0xffffffe3
   116ac:	b	116bc <__assert_fail@plt+0x760>
   116b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   116b4:	cmp	r3, #0
   116b8:	bne	11654 <__assert_fail@plt+0x6f8>
   116bc:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   116c0:	cmp	r3, #0
   116c4:	beq	1178c <__assert_fail@plt+0x830>
   116c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   116cc:	add	r3, r3, #1
   116d0:	str	r3, [fp, #-36]	; 0xffffffdc
   116d4:	ldr	r3, [pc, #632]	; 11954 <__assert_fail@plt+0x9f8>
   116d8:	ldr	r0, [r3]
   116dc:	ldr	r3, [pc, #628]	; 11958 <__assert_fail@plt+0x9fc>
   116e0:	ldr	r3, [r3]
   116e4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   116e8:	mov	r1, #1
   116ec:	bl	10d70 <fwrite_unlocked@plt>
   116f0:	mov	r0, #10
   116f4:	bl	10f50 <putchar_unlocked@plt>
   116f8:	ldr	r3, [pc, #596]	; 11954 <__assert_fail@plt+0x9f8>
   116fc:	ldr	r0, [r3]
   11700:	ldr	r3, [pc, #588]	; 11954 <__assert_fail@plt+0x9f8>
   11704:	ldr	r2, [r3]
   11708:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1170c:	add	r1, r2, r3
   11710:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11714:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11718:	sub	r3, r2, r3
   1171c:	mov	r2, r3
   11720:	bl	10d34 <memmove@plt>
   11724:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11728:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1172c:	sub	r3, r2, r3
   11730:	str	r3, [fp, #-24]	; 0xffffffe8
   11734:	mov	r3, #0
   11738:	str	r3, [fp, #-40]	; 0xffffffd8
   1173c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11740:	str	r3, [fp, #-20]	; 0xffffffec
   11744:	b	11778 <__assert_fail@plt+0x81c>
   11748:	ldr	r3, [pc, #516]	; 11954 <__assert_fail@plt+0x9f8>
   1174c:	ldr	r2, [r3]
   11750:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11754:	add	r3, r2, r3
   11758:	ldrb	r3, [r3]
   1175c:	mov	r1, r3
   11760:	ldr	r0, [fp, #-20]	; 0xffffffec
   11764:	bl	113f0 <__assert_fail@plt+0x494>
   11768:	str	r0, [fp, #-20]	; 0xffffffec
   1176c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11770:	add	r3, r3, #1
   11774:	str	r3, [fp, #-40]	; 0xffffffd8
   11778:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1177c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11780:	cmp	r2, r3
   11784:	bcc	11748 <__assert_fail@plt+0x7ec>
   11788:	b	11608 <__assert_fail@plt+0x6ac>
   1178c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11790:	cmp	r3, #0
   11794:	bne	117c0 <__assert_fail@plt+0x864>
   11798:	ldr	r3, [pc, #436]	; 11954 <__assert_fail@plt+0x9f8>
   1179c:	ldr	r2, [r3]
   117a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117a4:	add	r1, r3, #1
   117a8:	str	r1, [fp, #-24]	; 0xffffffe8
   117ac:	add	r3, r2, r3
   117b0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   117b4:	uxtb	r2, r2
   117b8:	strb	r2, [r3]
   117bc:	b	11834 <__assert_fail@plt+0x8d8>
   117c0:	ldr	r3, [pc, #396]	; 11954 <__assert_fail@plt+0x9f8>
   117c4:	ldr	r2, [r3]
   117c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117cc:	add	r1, r3, #1
   117d0:	str	r1, [fp, #-24]	; 0xffffffe8
   117d4:	add	r3, r2, r3
   117d8:	mov	r2, #10
   117dc:	strb	r2, [r3]
   117e0:	ldr	r3, [pc, #364]	; 11954 <__assert_fail@plt+0x9f8>
   117e4:	ldr	r0, [r3]
   117e8:	ldr	r3, [pc, #360]	; 11958 <__assert_fail@plt+0x9fc>
   117ec:	ldr	r3, [r3]
   117f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   117f4:	mov	r1, #1
   117f8:	bl	10d70 <fwrite_unlocked@plt>
   117fc:	mov	r3, #0
   11800:	str	r3, [fp, #-24]	; 0xffffffe8
   11804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11808:	str	r3, [fp, #-20]	; 0xffffffec
   1180c:	b	11608 <__assert_fail@plt+0x6ac>
   11810:	ldr	r3, [pc, #316]	; 11954 <__assert_fail@plt+0x9f8>
   11814:	ldr	r2, [r3]
   11818:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1181c:	add	r1, r3, #1
   11820:	str	r1, [fp, #-24]	; 0xffffffe8
   11824:	add	r3, r2, r3
   11828:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1182c:	uxtb	r2, r2
   11830:	strb	r2, [r3]
   11834:	ldr	r0, [fp, #-16]
   11838:	bl	10d94 <getc_unlocked@plt>
   1183c:	str	r0, [fp, #-44]	; 0xffffffd4
   11840:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11844:	cmn	r3, #1
   11848:	bne	11570 <__assert_fail@plt+0x614>
   1184c:	bl	10e9c <__errno_location@plt>
   11850:	mov	r3, r0
   11854:	ldr	r3, [r3]
   11858:	str	r3, [fp, #-28]	; 0xffffffe4
   1185c:	ldr	r0, [fp, #-16]
   11860:	bl	10df4 <ferror_unlocked@plt>
   11864:	mov	r3, r0
   11868:	cmp	r3, #0
   1186c:	bne	11878 <__assert_fail@plt+0x91c>
   11870:	mov	r3, #0
   11874:	str	r3, [fp, #-28]	; 0xffffffe4
   11878:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1187c:	cmp	r3, #0
   11880:	beq	118a0 <__assert_fail@plt+0x944>
   11884:	ldr	r3, [pc, #200]	; 11954 <__assert_fail@plt+0x9f8>
   11888:	ldr	r0, [r3]
   1188c:	ldr	r3, [pc, #196]	; 11958 <__assert_fail@plt+0x9fc>
   11890:	ldr	r3, [r3]
   11894:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11898:	mov	r1, #1
   1189c:	bl	10d70 <fwrite_unlocked@plt>
   118a0:	ldr	r1, [pc, #148]	; 1193c <__assert_fail@plt+0x9e0>
   118a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   118a8:	bl	10d04 <strcmp@plt>
   118ac:	mov	r3, r0
   118b0:	cmp	r3, #0
   118b4:	bne	118c4 <__assert_fail@plt+0x968>
   118b8:	ldr	r0, [fp, #-16]
   118bc:	bl	10f14 <clearerr_unlocked@plt>
   118c0:	b	118f4 <__assert_fail@plt+0x998>
   118c4:	ldr	r0, [fp, #-16]
   118c8:	bl	11ed8 <__assert_fail@plt+0xf7c>
   118cc:	mov	r3, r0
   118d0:	cmp	r3, #0
   118d4:	beq	118f4 <__assert_fail@plt+0x998>
   118d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118dc:	cmp	r3, #0
   118e0:	bne	118f4 <__assert_fail@plt+0x998>
   118e4:	bl	10e9c <__errno_location@plt>
   118e8:	mov	r3, r0
   118ec:	ldr	r3, [r3]
   118f0:	str	r3, [fp, #-28]	; 0xffffffe4
   118f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118f8:	cmp	r3, #0
   118fc:	beq	1192c <__assert_fail@plt+0x9d0>
   11900:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11904:	mov	r1, #3
   11908:	mov	r0, #0
   1190c:	bl	1461c <__assert_fail@plt+0x36c0>
   11910:	mov	r3, r0
   11914:	ldr	r2, [pc, #48]	; 1194c <__assert_fail@plt+0x9f0>
   11918:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1191c:	mov	r0, #0
   11920:	bl	10e0c <error@plt>
   11924:	mov	r3, #0
   11928:	b	11930 <__assert_fail@plt+0x9d4>
   1192c:	mov	r3, #1
   11930:	mov	r0, r3
   11934:	sub	sp, fp, #8
   11938:	pop	{r4, fp, pc}
   1193c:			; <UNDEFINED> instruction: 0x00017eb0
   11940:	andeq	r9, r2, r0, asr r1
   11944:	andeq	r9, r2, r2, ror #2
   11948:			; <UNDEFINED> instruction: 0x00017eb4
   1194c:			; <UNDEFINED> instruction: 0x00017eb8
   11950:	andeq	r9, r2, r4, ror #2
   11954:	andeq	r9, r2, r8, ror #2
   11958:	andeq	r9, r2, r4, asr r1
   1195c:	andeq	r9, r2, r0, ror #2
   11960:	push	{r4, fp, lr}
   11964:	add	fp, sp, #8
   11968:	sub	sp, sp, #60	; 0x3c
   1196c:	str	r0, [fp, #-40]	; 0xffffffd8
   11970:	str	r1, [fp, #-44]	; 0xffffffd4
   11974:	mov	r3, #80	; 0x50
   11978:	str	r3, [fp, #-16]
   1197c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11980:	ldr	r3, [r3]
   11984:	mov	r0, r3
   11988:	bl	1215c <__assert_fail@plt+0x1200>
   1198c:	ldr	r1, [pc, #708]	; 11c58 <__assert_fail@plt+0xcfc>
   11990:	mov	r0, #6
   11994:	bl	10ef0 <setlocale@plt>
   11998:	ldr	r1, [pc, #700]	; 11c5c <__assert_fail@plt+0xd00>
   1199c:	ldr	r0, [pc, #700]	; 11c60 <__assert_fail@plt+0xd04>
   119a0:	bl	10f2c <bindtextdomain@plt>
   119a4:	ldr	r0, [pc, #692]	; 11c60 <__assert_fail@plt+0xd04>
   119a8:	bl	10dac <textdomain@plt>
   119ac:	ldr	r0, [pc, #688]	; 11c64 <__assert_fail@plt+0xd08>
   119b0:	bl	17a24 <__assert_fail@plt+0x6ac8>
   119b4:	ldr	r3, [pc, #684]	; 11c68 <__assert_fail@plt+0xd0c>
   119b8:	mov	r2, #0
   119bc:	strb	r2, [r3]
   119c0:	ldr	r3, [pc, #672]	; 11c68 <__assert_fail@plt+0xd0c>
   119c4:	ldrb	r2, [r3]
   119c8:	ldr	r3, [pc, #668]	; 11c6c <__assert_fail@plt+0xd10>
   119cc:	strb	r2, [r3]
   119d0:	ldr	r3, [pc, #660]	; 11c6c <__assert_fail@plt+0xd10>
   119d4:	ldrb	r2, [r3]
   119d8:	ldr	r3, [pc, #656]	; 11c70 <__assert_fail@plt+0xd14>
   119dc:	strb	r2, [r3]
   119e0:	b	11b2c <__assert_fail@plt+0xbd0>
   119e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   119e8:	cmp	r3, #57	; 0x39
   119ec:	bgt	11a0c <__assert_fail@plt+0xab0>
   119f0:	cmp	r3, #48	; 0x30
   119f4:	bge	11a44 <__assert_fail@plt+0xae8>
   119f8:	cmn	r3, #3
   119fc:	beq	11aec <__assert_fail@plt+0xb90>
   11a00:	cmn	r3, #2
   11a04:	beq	11ae4 <__assert_fail@plt+0xb88>
   11a08:	b	11b24 <__assert_fail@plt+0xbc8>
   11a0c:	cmp	r3, #115	; 0x73
   11a10:	beq	11a34 <__assert_fail@plt+0xad8>
   11a14:	cmp	r3, #119	; 0x77
   11a18:	beq	11a8c <__assert_fail@plt+0xb30>
   11a1c:	cmp	r3, #98	; 0x62
   11a20:	bne	11b24 <__assert_fail@plt+0xbc8>
   11a24:	ldr	r3, [pc, #576]	; 11c6c <__assert_fail@plt+0xd10>
   11a28:	mov	r2, #1
   11a2c:	strb	r2, [r3]
   11a30:	b	11b2c <__assert_fail@plt+0xbd0>
   11a34:	ldr	r3, [pc, #564]	; 11c70 <__assert_fail@plt+0xd14>
   11a38:	mov	r2, #1
   11a3c:	strb	r2, [r3]
   11a40:	b	11b2c <__assert_fail@plt+0xbd0>
   11a44:	ldr	r3, [pc, #552]	; 11c74 <__assert_fail@plt+0xd18>
   11a48:	ldr	r3, [r3]
   11a4c:	cmp	r3, #0
   11a50:	beq	11a6c <__assert_fail@plt+0xb10>
   11a54:	ldr	r3, [pc, #536]	; 11c74 <__assert_fail@plt+0xd18>
   11a58:	ldr	r3, [r3]
   11a5c:	sub	r3, r3, #1
   11a60:	ldr	r2, [pc, #524]	; 11c74 <__assert_fail@plt+0xd18>
   11a64:	str	r3, [r2]
   11a68:	b	11a8c <__assert_fail@plt+0xb30>
   11a6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a70:	uxtb	r3, r3
   11a74:	strb	r3, [fp, #-32]	; 0xffffffe0
   11a78:	mov	r3, #0
   11a7c:	strb	r3, [fp, #-31]	; 0xffffffe1
   11a80:	ldr	r2, [pc, #492]	; 11c74 <__assert_fail@plt+0xd18>
   11a84:	sub	r3, fp, #32
   11a88:	str	r3, [r2]
   11a8c:	ldr	r3, [pc, #480]	; 11c74 <__assert_fail@plt+0xd18>
   11a90:	ldr	r4, [r3]
   11a94:	ldr	r0, [pc, #476]	; 11c78 <__assert_fail@plt+0xd1c>
   11a98:	bl	10e6c <gettext@plt>
   11a9c:	mov	r2, r0
   11aa0:	mov	r3, #0
   11aa4:	str	r3, [sp, #16]
   11aa8:	str	r2, [sp, #12]
   11aac:	ldr	r3, [pc, #420]	; 11c58 <__assert_fail@plt+0xcfc>
   11ab0:	str	r3, [sp, #8]
   11ab4:	mvn	r2, #9
   11ab8:	mov	r3, #0
   11abc:	strd	r2, [sp]
   11ac0:	mov	r2, #1
   11ac4:	mov	r3, #0
   11ac8:	mov	r0, r4
   11acc:	bl	15d78 <__assert_fail@plt+0x4e1c>
   11ad0:	mov	r2, r0
   11ad4:	mov	r3, r1
   11ad8:	mov	r3, r2
   11adc:	str	r3, [fp, #-16]
   11ae0:	b	11b2c <__assert_fail@plt+0xbd0>
   11ae4:	mov	r0, #0
   11ae8:	bl	112c8 <__assert_fail@plt+0x36c>
   11aec:	ldr	r3, [pc, #392]	; 11c7c <__assert_fail@plt+0xd20>
   11af0:	ldr	r0, [r3]
   11af4:	ldr	r3, [pc, #388]	; 11c80 <__assert_fail@plt+0xd24>
   11af8:	ldr	r2, [r3]
   11afc:	mov	r3, #0
   11b00:	str	r3, [sp, #4]
   11b04:	ldr	r3, [pc, #376]	; 11c84 <__assert_fail@plt+0xd28>
   11b08:	str	r3, [sp]
   11b0c:	mov	r3, r2
   11b10:	ldr	r2, [pc, #368]	; 11c88 <__assert_fail@plt+0xd2c>
   11b14:	ldr	r1, [pc, #368]	; 11c8c <__assert_fail@plt+0xd30>
   11b18:	bl	14f58 <__assert_fail@plt+0x3ffc>
   11b1c:	mov	r0, #0
   11b20:	bl	10e60 <exit@plt>
   11b24:	mov	r0, #1
   11b28:	bl	112c8 <__assert_fail@plt+0x36c>
   11b2c:	mov	r3, #0
   11b30:	str	r3, [sp]
   11b34:	ldr	r3, [pc, #340]	; 11c90 <__assert_fail@plt+0xd34>
   11b38:	ldr	r2, [pc, #340]	; 11c94 <__assert_fail@plt+0xd38>
   11b3c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11b40:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11b44:	bl	10e48 <getopt_long@plt>
   11b48:	str	r0, [fp, #-28]	; 0xffffffe4
   11b4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b50:	cmn	r3, #1
   11b54:	bne	119e4 <__assert_fail@plt+0xa88>
   11b58:	ldr	r3, [pc, #312]	; 11c98 <__assert_fail@plt+0xd3c>
   11b5c:	ldr	r3, [r3]
   11b60:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11b64:	cmp	r2, r3
   11b68:	bne	11b84 <__assert_fail@plt+0xc28>
   11b6c:	ldr	r1, [fp, #-16]
   11b70:	ldr	r0, [pc, #292]	; 11c9c <__assert_fail@plt+0xd40>
   11b74:	bl	114b4 <__assert_fail@plt+0x558>
   11b78:	mov	r3, r0
   11b7c:	strb	r3, [fp, #-21]	; 0xffffffeb
   11b80:	b	11bf8 <__assert_fail@plt+0xc9c>
   11b84:	mov	r3, #1
   11b88:	strb	r3, [fp, #-21]	; 0xffffffeb
   11b8c:	ldr	r3, [pc, #260]	; 11c98 <__assert_fail@plt+0xd3c>
   11b90:	ldr	r3, [r3]
   11b94:	str	r3, [fp, #-20]	; 0xffffffec
   11b98:	b	11be8 <__assert_fail@plt+0xc8c>
   11b9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ba0:	lsl	r3, r3, #2
   11ba4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11ba8:	add	r3, r2, r3
   11bac:	ldr	r3, [r3]
   11bb0:	ldr	r1, [fp, #-16]
   11bb4:	mov	r0, r3
   11bb8:	bl	114b4 <__assert_fail@plt+0x558>
   11bbc:	mov	r3, r0
   11bc0:	mov	r2, r3
   11bc4:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11bc8:	and	r3, r3, r2
   11bcc:	cmp	r3, #0
   11bd0:	movne	r3, #1
   11bd4:	moveq	r3, #0
   11bd8:	strb	r3, [fp, #-21]	; 0xffffffeb
   11bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   11be0:	add	r3, r3, #1
   11be4:	str	r3, [fp, #-20]	; 0xffffffec
   11be8:	ldr	r2, [fp, #-20]	; 0xffffffec
   11bec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11bf0:	cmp	r2, r3
   11bf4:	blt	11b9c <__assert_fail@plt+0xc40>
   11bf8:	ldr	r3, [pc, #104]	; 11c68 <__assert_fail@plt+0xd0c>
   11bfc:	ldrb	r3, [r3]
   11c00:	cmp	r3, #0
   11c04:	beq	11c40 <__assert_fail@plt+0xce4>
   11c08:	ldr	r3, [pc, #144]	; 11ca0 <__assert_fail@plt+0xd44>
   11c0c:	ldr	r3, [r3]
   11c10:	mov	r0, r3
   11c14:	bl	11ed8 <__assert_fail@plt+0xf7c>
   11c18:	mov	r3, r0
   11c1c:	cmn	r3, #1
   11c20:	bne	11c40 <__assert_fail@plt+0xce4>
   11c24:	bl	10e9c <__errno_location@plt>
   11c28:	mov	r3, r0
   11c2c:	ldr	r3, [r3]
   11c30:	ldr	r2, [pc, #100]	; 11c9c <__assert_fail@plt+0xd40>
   11c34:	mov	r1, r3
   11c38:	mov	r0, #1
   11c3c:	bl	10e0c <error@plt>
   11c40:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11c44:	eor	r3, r3, #1
   11c48:	uxtb	r3, r3
   11c4c:	mov	r0, r3
   11c50:	sub	sp, fp, #8
   11c54:	pop	{r4, fp, pc}
   11c58:	andeq	r7, r1, r4, asr #23
   11c5c:			; <UNDEFINED> instruction: 0x00017ebc
   11c60:	ldrdeq	r7, [r1], -ip
   11c64:	andeq	r1, r1, r8, lsl #26
   11c68:	andeq	r9, r2, r2, ror #2
   11c6c:	andeq	r9, r2, r1, ror #2
   11c70:	andeq	r9, r2, r0, ror #2
   11c74:	andeq	r9, r2, r8, asr r1
   11c78:	ldrdeq	r7, [r1], -r4
   11c7c:	andeq	r9, r2, r4, asr r1
   11c80:	strdeq	r9, [r2], -r0
   11c84:	strdeq	r7, [r1], -r0
   11c88:	andeq	r7, r1, ip, lsl #22
   11c8c:	andeq	r7, r1, r8, lsr #29
   11c90:	andeq	r7, r1, r4, asr #25
   11c94:	andeq	r7, r1, r8, ror ip
   11c98:	andeq	r9, r2, r0, asr #2
   11c9c:			; <UNDEFINED> instruction: 0x00017eb0
   11ca0:	andeq	r9, r2, r0, asr r1
   11ca4:	push	{fp}		; (str fp, [sp, #-4]!)
   11ca8:	add	fp, sp, #0
   11cac:	sub	sp, sp, #12
   11cb0:	str	r0, [fp, #-8]
   11cb4:	ldr	r2, [pc, #20]	; 11cd0 <__assert_fail@plt+0xd74>
   11cb8:	ldr	r3, [fp, #-8]
   11cbc:	str	r3, [r2]
   11cc0:	nop			; (mov r0, r0)
   11cc4:	add	sp, fp, #0
   11cc8:	pop	{fp}		; (ldr fp, [sp], #4)
   11ccc:	bx	lr
   11cd0:	andeq	r9, r2, ip, ror #2
   11cd4:	push	{fp}		; (str fp, [sp, #-4]!)
   11cd8:	add	fp, sp, #0
   11cdc:	sub	sp, sp, #12
   11ce0:	mov	r3, r0
   11ce4:	strb	r3, [fp, #-5]
   11ce8:	ldr	r2, [pc, #20]	; 11d04 <__assert_fail@plt+0xda8>
   11cec:	ldrb	r3, [fp, #-5]
   11cf0:	strb	r3, [r2]
   11cf4:	nop			; (mov r0, r0)
   11cf8:	add	sp, fp, #0
   11cfc:	pop	{fp}		; (ldr fp, [sp], #4)
   11d00:	bx	lr
   11d04:	andeq	r9, r2, r0, ror r1
   11d08:	push	{r4, fp, lr}
   11d0c:	add	fp, sp, #8
   11d10:	sub	sp, sp, #20
   11d14:	ldr	r3, [pc, #256]	; 11e1c <__assert_fail@plt+0xec0>
   11d18:	ldr	r3, [r3]
   11d1c:	mov	r0, r3
   11d20:	bl	168b0 <__assert_fail@plt+0x5954>
   11d24:	mov	r3, r0
   11d28:	cmp	r3, #0
   11d2c:	beq	11de4 <__assert_fail@plt+0xe88>
   11d30:	ldr	r3, [pc, #232]	; 11e20 <__assert_fail@plt+0xec4>
   11d34:	ldrb	r3, [r3]
   11d38:	eor	r3, r3, #1
   11d3c:	uxtb	r3, r3
   11d40:	cmp	r3, #0
   11d44:	bne	11d5c <__assert_fail@plt+0xe00>
   11d48:	bl	10e9c <__errno_location@plt>
   11d4c:	mov	r3, r0
   11d50:	ldr	r3, [r3]
   11d54:	cmp	r3, #32
   11d58:	beq	11de4 <__assert_fail@plt+0xe88>
   11d5c:	ldr	r0, [pc, #192]	; 11e24 <__assert_fail@plt+0xec8>
   11d60:	bl	10e6c <gettext@plt>
   11d64:	str	r0, [fp, #-16]
   11d68:	ldr	r3, [pc, #184]	; 11e28 <__assert_fail@plt+0xecc>
   11d6c:	ldr	r3, [r3]
   11d70:	cmp	r3, #0
   11d74:	beq	11db8 <__assert_fail@plt+0xe5c>
   11d78:	bl	10e9c <__errno_location@plt>
   11d7c:	mov	r3, r0
   11d80:	ldr	r4, [r3]
   11d84:	ldr	r3, [pc, #156]	; 11e28 <__assert_fail@plt+0xecc>
   11d88:	ldr	r3, [r3]
   11d8c:	mov	r0, r3
   11d90:	bl	145bc <__assert_fail@plt+0x3660>
   11d94:	mov	r2, r0
   11d98:	ldr	r3, [fp, #-16]
   11d9c:	str	r3, [sp]
   11da0:	mov	r3, r2
   11da4:	ldr	r2, [pc, #128]	; 11e2c <__assert_fail@plt+0xed0>
   11da8:	mov	r1, r4
   11dac:	mov	r0, #0
   11db0:	bl	10e0c <error@plt>
   11db4:	b	11dd4 <__assert_fail@plt+0xe78>
   11db8:	bl	10e9c <__errno_location@plt>
   11dbc:	mov	r3, r0
   11dc0:	ldr	r1, [r3]
   11dc4:	ldr	r3, [fp, #-16]
   11dc8:	ldr	r2, [pc, #96]	; 11e30 <__assert_fail@plt+0xed4>
   11dcc:	mov	r0, #0
   11dd0:	bl	10e0c <error@plt>
   11dd4:	ldr	r3, [pc, #88]	; 11e34 <__assert_fail@plt+0xed8>
   11dd8:	ldr	r3, [r3]
   11ddc:	mov	r0, r3
   11de0:	bl	10d4c <_exit@plt>
   11de4:	ldr	r3, [pc, #76]	; 11e38 <__assert_fail@plt+0xedc>
   11de8:	ldr	r3, [r3]
   11dec:	mov	r0, r3
   11df0:	bl	168b0 <__assert_fail@plt+0x5954>
   11df4:	mov	r3, r0
   11df8:	cmp	r3, #0
   11dfc:	beq	11e10 <__assert_fail@plt+0xeb4>
   11e00:	ldr	r3, [pc, #44]	; 11e34 <__assert_fail@plt+0xed8>
   11e04:	ldr	r3, [r3]
   11e08:	mov	r0, r3
   11e0c:	bl	10d4c <_exit@plt>
   11e10:	nop			; (mov r0, r0)
   11e14:	sub	sp, fp, #8
   11e18:	pop	{r4, fp, pc}
   11e1c:	andeq	r9, r2, r4, asr r1
   11e20:	andeq	r9, r2, r0, ror r1
   11e24:	andeq	r7, r1, r0, lsl pc
   11e28:	andeq	r9, r2, ip, ror #2
   11e2c:	andeq	r7, r1, ip, lsl pc
   11e30:	andeq	r7, r1, r4, lsr #30
   11e34:	strdeq	r9, [r2], -r4
   11e38:	andeq	r9, r2, r8, asr #2
   11e3c:	push	{fp, lr}
   11e40:	add	fp, sp, #4
   11e44:	sub	sp, sp, #40	; 0x28
   11e48:	str	r0, [fp, #-16]
   11e4c:	strd	r2, [fp, #-28]	; 0xffffffe4
   11e50:	ldr	r3, [fp, #12]
   11e54:	str	r3, [sp, #8]
   11e58:	ldrd	r2, [fp, #4]
   11e5c:	strd	r2, [sp]
   11e60:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11e64:	ldr	r0, [fp, #-16]
   11e68:	bl	10d10 <posix_fadvise64@plt>
   11e6c:	str	r0, [fp, #-8]
   11e70:	nop			; (mov r0, r0)
   11e74:	sub	sp, fp, #4
   11e78:	pop	{fp, pc}
   11e7c:	push	{fp, lr}
   11e80:	add	fp, sp, #4
   11e84:	sub	sp, sp, #24
   11e88:	str	r0, [fp, #-8]
   11e8c:	str	r1, [fp, #-12]
   11e90:	ldr	r3, [fp, #-8]
   11e94:	cmp	r3, #0
   11e98:	beq	11ecc <__assert_fail@plt+0xf70>
   11e9c:	ldr	r0, [fp, #-8]
   11ea0:	bl	10ec0 <fileno@plt>
   11ea4:	mov	r1, r0
   11ea8:	ldr	r3, [fp, #-12]
   11eac:	str	r3, [sp, #8]
   11eb0:	mov	r2, #0
   11eb4:	mov	r3, #0
   11eb8:	strd	r2, [sp]
   11ebc:	mov	r2, #0
   11ec0:	mov	r3, #0
   11ec4:	mov	r0, r1
   11ec8:	bl	11e3c <__assert_fail@plt+0xee0>
   11ecc:	nop			; (mov r0, r0)
   11ed0:	sub	sp, fp, #4
   11ed4:	pop	{fp, pc}
   11ed8:	push	{fp, lr}
   11edc:	add	fp, sp, #4
   11ee0:	sub	sp, sp, #32
   11ee4:	str	r0, [fp, #-24]	; 0xffffffe8
   11ee8:	mov	r3, #0
   11eec:	str	r3, [fp, #-8]
   11ef0:	mov	r3, #0
   11ef4:	str	r3, [fp, #-12]
   11ef8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11efc:	bl	10ec0 <fileno@plt>
   11f00:	str	r0, [fp, #-16]
   11f04:	ldr	r3, [fp, #-16]
   11f08:	cmp	r3, #0
   11f0c:	bge	11f20 <__assert_fail@plt+0xfc4>
   11f10:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f14:	bl	10ed8 <fclose@plt>
   11f18:	mov	r3, r0
   11f1c:	b	11fc4 <__assert_fail@plt+0x1068>
   11f20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f24:	bl	10e30 <__freading@plt>
   11f28:	mov	r3, r0
   11f2c:	cmp	r3, #0
   11f30:	beq	11f6c <__assert_fail@plt+0x1010>
   11f34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f38:	bl	10ec0 <fileno@plt>
   11f3c:	mov	r1, r0
   11f40:	mov	r3, #1
   11f44:	str	r3, [sp]
   11f48:	mov	r2, #0
   11f4c:	mov	r3, #0
   11f50:	mov	r0, r1
   11f54:	bl	10dd0 <lseek64@plt>
   11f58:	mvn	r2, #0
   11f5c:	mvn	r3, #0
   11f60:	cmp	r1, r3
   11f64:	cmpeq	r0, r2
   11f68:	beq	11f90 <__assert_fail@plt+0x1034>
   11f6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f70:	bl	12018 <__assert_fail@plt+0x10bc>
   11f74:	mov	r3, r0
   11f78:	cmp	r3, #0
   11f7c:	beq	11f90 <__assert_fail@plt+0x1034>
   11f80:	bl	10e9c <__errno_location@plt>
   11f84:	mov	r3, r0
   11f88:	ldr	r3, [r3]
   11f8c:	str	r3, [fp, #-8]
   11f90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11f94:	bl	10ed8 <fclose@plt>
   11f98:	str	r0, [fp, #-12]
   11f9c:	ldr	r3, [fp, #-8]
   11fa0:	cmp	r3, #0
   11fa4:	beq	11fc0 <__assert_fail@plt+0x1064>
   11fa8:	bl	10e9c <__errno_location@plt>
   11fac:	mov	r2, r0
   11fb0:	ldr	r3, [fp, #-8]
   11fb4:	str	r3, [r2]
   11fb8:	mvn	r3, #0
   11fbc:	str	r3, [fp, #-12]
   11fc0:	ldr	r3, [fp, #-12]
   11fc4:	mov	r0, r3
   11fc8:	sub	sp, fp, #4
   11fcc:	pop	{fp, pc}
   11fd0:	push	{fp, lr}
   11fd4:	add	fp, sp, #4
   11fd8:	sub	sp, sp, #16
   11fdc:	str	r0, [fp, #-8]
   11fe0:	ldr	r3, [fp, #-8]
   11fe4:	ldr	r3, [r3]
   11fe8:	and	r3, r3, #256	; 0x100
   11fec:	cmp	r3, #0
   11ff0:	beq	1200c <__assert_fail@plt+0x10b0>
   11ff4:	mov	r3, #1
   11ff8:	str	r3, [sp]
   11ffc:	mov	r2, #0
   12000:	mov	r3, #0
   12004:	ldr	r0, [fp, #-8]
   12008:	bl	12078 <__assert_fail@plt+0x111c>
   1200c:	nop			; (mov r0, r0)
   12010:	sub	sp, fp, #4
   12014:	pop	{fp, pc}
   12018:	push	{fp, lr}
   1201c:	add	fp, sp, #4
   12020:	sub	sp, sp, #8
   12024:	str	r0, [fp, #-8]
   12028:	ldr	r3, [fp, #-8]
   1202c:	cmp	r3, #0
   12030:	beq	12048 <__assert_fail@plt+0x10ec>
   12034:	ldr	r0, [fp, #-8]
   12038:	bl	10e30 <__freading@plt>
   1203c:	mov	r3, r0
   12040:	cmp	r3, #0
   12044:	bne	12058 <__assert_fail@plt+0x10fc>
   12048:	ldr	r0, [fp, #-8]
   1204c:	bl	10d28 <fflush@plt>
   12050:	mov	r3, r0
   12054:	b	1206c <__assert_fail@plt+0x1110>
   12058:	ldr	r0, [fp, #-8]
   1205c:	bl	11fd0 <__assert_fail@plt+0x1074>
   12060:	ldr	r0, [fp, #-8]
   12064:	bl	10d28 <fflush@plt>
   12068:	mov	r3, r0
   1206c:	mov	r0, r3
   12070:	sub	sp, fp, #4
   12074:	pop	{fp, pc}
   12078:	push	{fp, lr}
   1207c:	add	fp, sp, #4
   12080:	sub	sp, sp, #32
   12084:	str	r0, [fp, #-16]
   12088:	strd	r2, [fp, #-28]	; 0xffffffe4
   1208c:	ldr	r3, [fp, #-16]
   12090:	ldr	r2, [r3, #8]
   12094:	ldr	r3, [fp, #-16]
   12098:	ldr	r3, [r3, #4]
   1209c:	cmp	r2, r3
   120a0:	bne	12138 <__assert_fail@plt+0x11dc>
   120a4:	ldr	r3, [fp, #-16]
   120a8:	ldr	r2, [r3, #20]
   120ac:	ldr	r3, [fp, #-16]
   120b0:	ldr	r3, [r3, #16]
   120b4:	cmp	r2, r3
   120b8:	bne	12138 <__assert_fail@plt+0x11dc>
   120bc:	ldr	r3, [fp, #-16]
   120c0:	ldr	r3, [r3, #36]	; 0x24
   120c4:	cmp	r3, #0
   120c8:	bne	12138 <__assert_fail@plt+0x11dc>
   120cc:	ldr	r0, [fp, #-16]
   120d0:	bl	10ec0 <fileno@plt>
   120d4:	mov	r1, r0
   120d8:	ldr	r3, [fp, #4]
   120dc:	str	r3, [sp]
   120e0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   120e4:	mov	r0, r1
   120e8:	bl	10dd0 <lseek64@plt>
   120ec:	strd	r0, [fp, #-12]
   120f0:	ldrd	r2, [fp, #-12]
   120f4:	mvn	r0, #0
   120f8:	mvn	r1, #0
   120fc:	cmp	r3, r1
   12100:	cmpeq	r2, r0
   12104:	bne	12110 <__assert_fail@plt+0x11b4>
   12108:	mvn	r3, #0
   1210c:	b	12150 <__assert_fail@plt+0x11f4>
   12110:	ldr	r3, [fp, #-16]
   12114:	ldr	r3, [r3]
   12118:	bic	r2, r3, #16
   1211c:	ldr	r3, [fp, #-16]
   12120:	str	r2, [r3]
   12124:	ldr	r1, [fp, #-16]
   12128:	ldrd	r2, [fp, #-12]
   1212c:	strd	r2, [r1, #80]	; 0x50
   12130:	mov	r3, #0
   12134:	b	12150 <__assert_fail@plt+0x11f4>
   12138:	ldr	r3, [fp, #4]
   1213c:	str	r3, [sp]
   12140:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12144:	ldr	r0, [fp, #-16]
   12148:	bl	10ee4 <fseeko64@plt>
   1214c:	mov	r3, r0
   12150:	mov	r0, r3
   12154:	sub	sp, fp, #4
   12158:	pop	{fp, pc}
   1215c:	push	{fp, lr}
   12160:	add	fp, sp, #4
   12164:	sub	sp, sp, #16
   12168:	str	r0, [fp, #-16]
   1216c:	ldr	r3, [fp, #-16]
   12170:	cmp	r3, #0
   12174:	bne	12194 <__assert_fail@plt+0x1238>
   12178:	ldr	r3, [pc, #220]	; 1225c <__assert_fail@plt+0x1300>
   1217c:	ldr	r3, [r3]
   12180:	mov	r2, #55	; 0x37
   12184:	mov	r1, #1
   12188:	ldr	r0, [pc, #208]	; 12260 <__assert_fail@plt+0x1304>
   1218c:	bl	10dc4 <fwrite@plt>
   12190:	bl	10f44 <abort@plt>
   12194:	mov	r1, #47	; 0x2f
   12198:	ldr	r0, [fp, #-16]
   1219c:	bl	10efc <strrchr@plt>
   121a0:	str	r0, [fp, #-8]
   121a4:	ldr	r3, [fp, #-8]
   121a8:	cmp	r3, #0
   121ac:	beq	121bc <__assert_fail@plt+0x1260>
   121b0:	ldr	r3, [fp, #-8]
   121b4:	add	r3, r3, #1
   121b8:	b	121c0 <__assert_fail@plt+0x1264>
   121bc:	ldr	r3, [fp, #-16]
   121c0:	str	r3, [fp, #-12]
   121c4:	ldr	r2, [fp, #-12]
   121c8:	ldr	r3, [fp, #-16]
   121cc:	sub	r3, r2, r3
   121d0:	cmp	r3, #6
   121d4:	ble	12238 <__assert_fail@plt+0x12dc>
   121d8:	ldr	r3, [fp, #-12]
   121dc:	sub	r3, r3, #7
   121e0:	mov	r2, #7
   121e4:	ldr	r1, [pc, #120]	; 12264 <__assert_fail@plt+0x1308>
   121e8:	mov	r0, r3
   121ec:	bl	10f38 <strncmp@plt>
   121f0:	mov	r3, r0
   121f4:	cmp	r3, #0
   121f8:	bne	12238 <__assert_fail@plt+0x12dc>
   121fc:	ldr	r3, [fp, #-12]
   12200:	str	r3, [fp, #-16]
   12204:	mov	r2, #3
   12208:	ldr	r1, [pc, #88]	; 12268 <__assert_fail@plt+0x130c>
   1220c:	ldr	r0, [fp, #-12]
   12210:	bl	10f38 <strncmp@plt>
   12214:	mov	r3, r0
   12218:	cmp	r3, #0
   1221c:	bne	12238 <__assert_fail@plt+0x12dc>
   12220:	ldr	r3, [fp, #-12]
   12224:	add	r3, r3, #3
   12228:	str	r3, [fp, #-16]
   1222c:	ldr	r2, [pc, #56]	; 1226c <__assert_fail@plt+0x1310>
   12230:	ldr	r3, [fp, #-16]
   12234:	str	r3, [r2]
   12238:	ldr	r2, [pc, #48]	; 12270 <__assert_fail@plt+0x1314>
   1223c:	ldr	r3, [fp, #-16]
   12240:	str	r3, [r2]
   12244:	ldr	r2, [pc, #40]	; 12274 <__assert_fail@plt+0x1318>
   12248:	ldr	r3, [fp, #-16]
   1224c:	str	r3, [r2]
   12250:	nop			; (mov r0, r0)
   12254:	sub	sp, fp, #4
   12258:	pop	{fp, pc}
   1225c:	andeq	r9, r2, r8, asr #2
   12260:	andeq	r7, r1, r8, lsr #30
   12264:	andeq	r7, r1, r0, ror #30
   12268:	andeq	r7, r1, r8, ror #30
   1226c:	andeq	r9, r2, r8, lsr r1
   12270:	andeq	r9, r2, r4, ror r1
   12274:	andeq	r9, r2, ip, lsr r1
   12278:	push	{fp, lr}
   1227c:	add	fp, sp, #4
   12280:	sub	sp, sp, #16
   12284:	str	r0, [fp, #-16]
   12288:	bl	10e9c <__errno_location@plt>
   1228c:	mov	r3, r0
   12290:	ldr	r3, [r3]
   12294:	str	r3, [fp, #-8]
   12298:	ldr	r3, [fp, #-16]
   1229c:	cmp	r3, #0
   122a0:	beq	122ac <__assert_fail@plt+0x1350>
   122a4:	ldr	r3, [fp, #-16]
   122a8:	b	122b0 <__assert_fail@plt+0x1354>
   122ac:	ldr	r3, [pc, #48]	; 122e4 <__assert_fail@plt+0x1388>
   122b0:	mov	r1, #48	; 0x30
   122b4:	mov	r0, r3
   122b8:	bl	15a9c <__assert_fail@plt+0x4b40>
   122bc:	mov	r3, r0
   122c0:	str	r3, [fp, #-12]
   122c4:	bl	10e9c <__errno_location@plt>
   122c8:	mov	r2, r0
   122cc:	ldr	r3, [fp, #-8]
   122d0:	str	r3, [r2]
   122d4:	ldr	r3, [fp, #-12]
   122d8:	mov	r0, r3
   122dc:	sub	sp, fp, #4
   122e0:	pop	{fp, pc}
   122e4:	andeq	r9, r2, r8, ror r1
   122e8:	push	{fp}		; (str fp, [sp, #-4]!)
   122ec:	add	fp, sp, #0
   122f0:	sub	sp, sp, #12
   122f4:	str	r0, [fp, #-8]
   122f8:	ldr	r3, [fp, #-8]
   122fc:	cmp	r3, #0
   12300:	beq	1230c <__assert_fail@plt+0x13b0>
   12304:	ldr	r3, [fp, #-8]
   12308:	b	12310 <__assert_fail@plt+0x13b4>
   1230c:	ldr	r3, [pc, #16]	; 12324 <__assert_fail@plt+0x13c8>
   12310:	ldr	r3, [r3]
   12314:	mov	r0, r3
   12318:	add	sp, fp, #0
   1231c:	pop	{fp}		; (ldr fp, [sp], #4)
   12320:	bx	lr
   12324:	andeq	r9, r2, r8, ror r1
   12328:	push	{fp}		; (str fp, [sp, #-4]!)
   1232c:	add	fp, sp, #0
   12330:	sub	sp, sp, #12
   12334:	str	r0, [fp, #-8]
   12338:	str	r1, [fp, #-12]
   1233c:	ldr	r3, [fp, #-8]
   12340:	cmp	r3, #0
   12344:	beq	12350 <__assert_fail@plt+0x13f4>
   12348:	ldr	r3, [fp, #-8]
   1234c:	b	12354 <__assert_fail@plt+0x13f8>
   12350:	ldr	r3, [pc, #20]	; 1236c <__assert_fail@plt+0x1410>
   12354:	ldr	r2, [fp, #-12]
   12358:	str	r2, [r3]
   1235c:	nop			; (mov r0, r0)
   12360:	add	sp, fp, #0
   12364:	pop	{fp}		; (ldr fp, [sp], #4)
   12368:	bx	lr
   1236c:	andeq	r9, r2, r8, ror r1
   12370:	push	{fp}		; (str fp, [sp, #-4]!)
   12374:	add	fp, sp, #0
   12378:	sub	sp, sp, #36	; 0x24
   1237c:	str	r0, [fp, #-24]	; 0xffffffe8
   12380:	mov	r3, r1
   12384:	str	r2, [fp, #-32]	; 0xffffffe0
   12388:	strb	r3, [fp, #-25]	; 0xffffffe7
   1238c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   12390:	strb	r3, [fp, #-5]
   12394:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12398:	cmp	r3, #0
   1239c:	beq	123a8 <__assert_fail@plt+0x144c>
   123a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123a4:	b	123ac <__assert_fail@plt+0x1450>
   123a8:	ldr	r3, [pc, #124]	; 1242c <__assert_fail@plt+0x14d0>
   123ac:	add	r2, r3, #8
   123b0:	ldrb	r3, [fp, #-5]
   123b4:	lsr	r3, r3, #5
   123b8:	uxtb	r3, r3
   123bc:	lsl	r3, r3, #2
   123c0:	add	r3, r2, r3
   123c4:	str	r3, [fp, #-12]
   123c8:	ldrb	r3, [fp, #-5]
   123cc:	and	r3, r3, #31
   123d0:	str	r3, [fp, #-16]
   123d4:	ldr	r3, [fp, #-12]
   123d8:	ldr	r2, [r3]
   123dc:	ldr	r3, [fp, #-16]
   123e0:	lsr	r3, r2, r3
   123e4:	and	r3, r3, #1
   123e8:	str	r3, [fp, #-20]	; 0xffffffec
   123ec:	ldr	r3, [fp, #-12]
   123f0:	ldr	r3, [r3]
   123f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   123f8:	and	r1, r2, #1
   123fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   12400:	eor	r1, r1, r2
   12404:	ldr	r2, [fp, #-16]
   12408:	lsl	r2, r1, r2
   1240c:	eor	r2, r2, r3
   12410:	ldr	r3, [fp, #-12]
   12414:	str	r2, [r3]
   12418:	ldr	r3, [fp, #-20]	; 0xffffffec
   1241c:	mov	r0, r3
   12420:	add	sp, fp, #0
   12424:	pop	{fp}		; (ldr fp, [sp], #4)
   12428:	bx	lr
   1242c:	andeq	r9, r2, r8, ror r1
   12430:	push	{fp}		; (str fp, [sp, #-4]!)
   12434:	add	fp, sp, #0
   12438:	sub	sp, sp, #20
   1243c:	str	r0, [fp, #-16]
   12440:	str	r1, [fp, #-20]	; 0xffffffec
   12444:	ldr	r3, [fp, #-16]
   12448:	cmp	r3, #0
   1244c:	bne	12458 <__assert_fail@plt+0x14fc>
   12450:	ldr	r3, [pc, #44]	; 12484 <__assert_fail@plt+0x1528>
   12454:	str	r3, [fp, #-16]
   12458:	ldr	r3, [fp, #-16]
   1245c:	ldr	r3, [r3, #4]
   12460:	str	r3, [fp, #-8]
   12464:	ldr	r3, [fp, #-16]
   12468:	ldr	r2, [fp, #-20]	; 0xffffffec
   1246c:	str	r2, [r3, #4]
   12470:	ldr	r3, [fp, #-8]
   12474:	mov	r0, r3
   12478:	add	sp, fp, #0
   1247c:	pop	{fp}		; (ldr fp, [sp], #4)
   12480:	bx	lr
   12484:	andeq	r9, r2, r8, ror r1
   12488:	push	{fp, lr}
   1248c:	add	fp, sp, #4
   12490:	sub	sp, sp, #16
   12494:	str	r0, [fp, #-8]
   12498:	str	r1, [fp, #-12]
   1249c:	str	r2, [fp, #-16]
   124a0:	ldr	r3, [fp, #-8]
   124a4:	cmp	r3, #0
   124a8:	bne	124b4 <__assert_fail@plt+0x1558>
   124ac:	ldr	r3, [pc, #76]	; 12500 <__assert_fail@plt+0x15a4>
   124b0:	str	r3, [fp, #-8]
   124b4:	ldr	r3, [fp, #-8]
   124b8:	mov	r2, #10
   124bc:	str	r2, [r3]
   124c0:	ldr	r3, [fp, #-12]
   124c4:	cmp	r3, #0
   124c8:	beq	124d8 <__assert_fail@plt+0x157c>
   124cc:	ldr	r3, [fp, #-16]
   124d0:	cmp	r3, #0
   124d4:	bne	124dc <__assert_fail@plt+0x1580>
   124d8:	bl	10f44 <abort@plt>
   124dc:	ldr	r3, [fp, #-8]
   124e0:	ldr	r2, [fp, #-12]
   124e4:	str	r2, [r3, #40]	; 0x28
   124e8:	ldr	r3, [fp, #-8]
   124ec:	ldr	r2, [fp, #-16]
   124f0:	str	r2, [r3, #44]	; 0x2c
   124f4:	nop			; (mov r0, r0)
   124f8:	sub	sp, fp, #4
   124fc:	pop	{fp, pc}
   12500:	andeq	r9, r2, r8, ror r1
   12504:	push	{fp, lr}
   12508:	add	fp, sp, #4
   1250c:	sub	sp, sp, #56	; 0x38
   12510:	str	r0, [fp, #-56]	; 0xffffffc8
   12514:	str	r1, [fp, #-60]	; 0xffffffc4
   12518:	sub	r3, fp, #52	; 0x34
   1251c:	mov	r2, #48	; 0x30
   12520:	mov	r1, #0
   12524:	mov	r0, r3
   12528:	bl	10eb4 <memset@plt>
   1252c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12530:	cmp	r3, #10
   12534:	bne	1253c <__assert_fail@plt+0x15e0>
   12538:	bl	10f44 <abort@plt>
   1253c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12540:	str	r3, [fp, #-52]	; 0xffffffcc
   12544:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12548:	mov	lr, r3
   1254c:	sub	ip, fp, #52	; 0x34
   12550:	ldm	ip!, {r0, r1, r2, r3}
   12554:	stmia	lr!, {r0, r1, r2, r3}
   12558:	ldm	ip!, {r0, r1, r2, r3}
   1255c:	stmia	lr!, {r0, r1, r2, r3}
   12560:	ldm	ip, {r0, r1, r2, r3}
   12564:	stm	lr, {r0, r1, r2, r3}
   12568:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1256c:	sub	sp, fp, #4
   12570:	pop	{fp, pc}
   12574:	push	{fp, lr}
   12578:	add	fp, sp, #4
   1257c:	sub	sp, sp, #16
   12580:	str	r0, [fp, #-16]
   12584:	str	r1, [fp, #-20]	; 0xffffffec
   12588:	ldr	r0, [fp, #-16]
   1258c:	bl	10e6c <gettext@plt>
   12590:	str	r0, [fp, #-8]
   12594:	ldr	r2, [fp, #-8]
   12598:	ldr	r3, [fp, #-16]
   1259c:	cmp	r2, r3
   125a0:	beq	125ac <__assert_fail@plt+0x1650>
   125a4:	ldr	r3, [fp, #-8]
   125a8:	b	1263c <__assert_fail@plt+0x16e0>
   125ac:	bl	16b50 <__assert_fail@plt+0x5bf4>
   125b0:	str	r0, [fp, #-12]
   125b4:	ldr	r1, [pc, #140]	; 12648 <__assert_fail@plt+0x16ec>
   125b8:	ldr	r0, [fp, #-12]
   125bc:	bl	16818 <__assert_fail@plt+0x58bc>
   125c0:	mov	r3, r0
   125c4:	cmp	r3, #0
   125c8:	bne	125ec <__assert_fail@plt+0x1690>
   125cc:	ldr	r3, [fp, #-16]
   125d0:	ldrb	r3, [r3]
   125d4:	cmp	r3, #96	; 0x60
   125d8:	bne	125e4 <__assert_fail@plt+0x1688>
   125dc:	ldr	r3, [pc, #104]	; 1264c <__assert_fail@plt+0x16f0>
   125e0:	b	1263c <__assert_fail@plt+0x16e0>
   125e4:	ldr	r3, [pc, #100]	; 12650 <__assert_fail@plt+0x16f4>
   125e8:	b	1263c <__assert_fail@plt+0x16e0>
   125ec:	ldr	r1, [pc, #96]	; 12654 <__assert_fail@plt+0x16f8>
   125f0:	ldr	r0, [fp, #-12]
   125f4:	bl	16818 <__assert_fail@plt+0x58bc>
   125f8:	mov	r3, r0
   125fc:	cmp	r3, #0
   12600:	bne	12624 <__assert_fail@plt+0x16c8>
   12604:	ldr	r3, [fp, #-16]
   12608:	ldrb	r3, [r3]
   1260c:	cmp	r3, #96	; 0x60
   12610:	bne	1261c <__assert_fail@plt+0x16c0>
   12614:	ldr	r3, [pc, #60]	; 12658 <__assert_fail@plt+0x16fc>
   12618:	b	1263c <__assert_fail@plt+0x16e0>
   1261c:	ldr	r3, [pc, #56]	; 1265c <__assert_fail@plt+0x1700>
   12620:	b	1263c <__assert_fail@plt+0x16e0>
   12624:	ldr	r3, [fp, #-20]	; 0xffffffec
   12628:	cmp	r3, #9
   1262c:	bne	12638 <__assert_fail@plt+0x16dc>
   12630:	ldr	r3, [pc, #40]	; 12660 <__assert_fail@plt+0x1704>
   12634:	b	1263c <__assert_fail@plt+0x16e0>
   12638:	ldr	r3, [pc, #36]	; 12664 <__assert_fail@plt+0x1708>
   1263c:	mov	r0, r3
   12640:	sub	sp, fp, #4
   12644:	pop	{fp, pc}
   12648:	andeq	r8, r1, r8, lsr #32
   1264c:	andeq	r8, r1, r0, lsr r0
   12650:	andeq	r8, r1, r4, lsr r0
   12654:	andeq	r8, r1, r8, lsr r0
   12658:	andeq	r8, r1, r0, asr #32
   1265c:	andeq	r8, r1, r4, asr #32
   12660:	andeq	r8, r1, r8, asr #32
   12664:	andeq	r8, r1, ip, asr #32
   12668:	push	{r4, fp, lr}
   1266c:	add	fp, sp, #8
   12670:	sub	sp, sp, #116	; 0x74
   12674:	str	r0, [fp, #-88]	; 0xffffffa8
   12678:	str	r1, [fp, #-92]	; 0xffffffa4
   1267c:	str	r2, [fp, #-96]	; 0xffffffa0
   12680:	str	r3, [fp, #-100]	; 0xffffff9c
   12684:	mov	r3, #0
   12688:	str	r3, [fp, #-20]	; 0xffffffec
   1268c:	mov	r3, #0
   12690:	str	r3, [fp, #-24]	; 0xffffffe8
   12694:	mov	r3, #0
   12698:	str	r3, [fp, #-28]	; 0xffffffe4
   1269c:	mov	r3, #0
   126a0:	str	r3, [fp, #-32]	; 0xffffffe0
   126a4:	mov	r3, #0
   126a8:	strb	r3, [fp, #-33]	; 0xffffffdf
   126ac:	bl	10ddc <__ctype_get_mb_cur_max@plt>
   126b0:	mov	r3, r0
   126b4:	cmp	r3, #1
   126b8:	moveq	r3, #1
   126bc:	movne	r3, #0
   126c0:	strb	r3, [fp, #-57]	; 0xffffffc7
   126c4:	ldr	r3, [fp, #8]
   126c8:	and	r3, r3, #2
   126cc:	cmp	r3, #0
   126d0:	movne	r3, #1
   126d4:	moveq	r3, #0
   126d8:	strb	r3, [fp, #-34]	; 0xffffffde
   126dc:	mov	r3, #0
   126e0:	strb	r3, [fp, #-35]	; 0xffffffdd
   126e4:	mov	r3, #0
   126e8:	strb	r3, [fp, #-36]	; 0xffffffdc
   126ec:	mov	r3, #1
   126f0:	strb	r3, [fp, #-37]	; 0xffffffdb
   126f4:	ldr	r3, [fp, #4]
   126f8:	cmp	r3, #10
   126fc:	ldrls	pc, [pc, r3, lsl #2]
   12700:	b	12908 <__assert_fail@plt+0x19ac>
   12704:	strdeq	r2, [r1], -ip
   12708:	andeq	r2, r1, r8, ror r8
   1270c:	muleq	r1, ip, r8
   12710:	andeq	r2, r1, r0, ror r8
   12714:	andeq	r2, r1, r0, lsl #17
   12718:	andeq	r2, r1, r0, asr #14
   1271c:	andeq	r2, r1, r0, lsr r7
   12720:	andeq	r2, r1, r0, lsr #15
   12724:			; <UNDEFINED> instruction: 0x000127b4
   12728:			; <UNDEFINED> instruction: 0x000127b4
   1272c:			; <UNDEFINED> instruction: 0x000127b4
   12730:	mov	r3, #5
   12734:	str	r3, [fp, #4]
   12738:	mov	r3, #1
   1273c:	strb	r3, [fp, #-34]	; 0xffffffde
   12740:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12744:	eor	r3, r3, #1
   12748:	uxtb	r3, r3
   1274c:	cmp	r3, #0
   12750:	beq	12784 <__assert_fail@plt+0x1828>
   12754:	ldr	r2, [fp, #-20]	; 0xffffffec
   12758:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1275c:	cmp	r2, r3
   12760:	bcs	12778 <__assert_fail@plt+0x181c>
   12764:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12768:	ldr	r3, [fp, #-20]	; 0xffffffec
   1276c:	add	r3, r2, r3
   12770:	mov	r2, #34	; 0x22
   12774:	strb	r2, [r3]
   12778:	ldr	r3, [fp, #-20]	; 0xffffffec
   1277c:	add	r3, r3, #1
   12780:	str	r3, [fp, #-20]	; 0xffffffec
   12784:	mov	r3, #1
   12788:	strb	r3, [fp, #-33]	; 0xffffffdf
   1278c:	ldr	r3, [pc, #3872]	; 136b4 <__assert_fail@plt+0x2758>
   12790:	str	r3, [fp, #-28]	; 0xffffffe4
   12794:	mov	r3, #1
   12798:	str	r3, [fp, #-32]	; 0xffffffe0
   1279c:	b	1290c <__assert_fail@plt+0x19b0>
   127a0:	mov	r3, #1
   127a4:	strb	r3, [fp, #-33]	; 0xffffffdf
   127a8:	mov	r3, #0
   127ac:	strb	r3, [fp, #-34]	; 0xffffffde
   127b0:	b	1290c <__assert_fail@plt+0x19b0>
   127b4:	ldr	r3, [fp, #4]
   127b8:	cmp	r3, #10
   127bc:	beq	127e0 <__assert_fail@plt+0x1884>
   127c0:	ldr	r1, [fp, #4]
   127c4:	ldr	r0, [pc, #3820]	; 136b8 <__assert_fail@plt+0x275c>
   127c8:	bl	12574 <__assert_fail@plt+0x1618>
   127cc:	str	r0, [fp, #16]
   127d0:	ldr	r1, [fp, #4]
   127d4:	ldr	r0, [pc, #3808]	; 136bc <__assert_fail@plt+0x2760>
   127d8:	bl	12574 <__assert_fail@plt+0x1618>
   127dc:	str	r0, [fp, #20]
   127e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   127e4:	eor	r3, r3, #1
   127e8:	uxtb	r3, r3
   127ec:	cmp	r3, #0
   127f0:	beq	12850 <__assert_fail@plt+0x18f4>
   127f4:	ldr	r3, [fp, #16]
   127f8:	str	r3, [fp, #-28]	; 0xffffffe4
   127fc:	b	12840 <__assert_fail@plt+0x18e4>
   12800:	ldr	r2, [fp, #-20]	; 0xffffffec
   12804:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12808:	cmp	r2, r3
   1280c:	bcs	12828 <__assert_fail@plt+0x18cc>
   12810:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12814:	ldr	r3, [fp, #-20]	; 0xffffffec
   12818:	add	r3, r2, r3
   1281c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12820:	ldrb	r2, [r2]
   12824:	strb	r2, [r3]
   12828:	ldr	r3, [fp, #-20]	; 0xffffffec
   1282c:	add	r3, r3, #1
   12830:	str	r3, [fp, #-20]	; 0xffffffec
   12834:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12838:	add	r3, r3, #1
   1283c:	str	r3, [fp, #-28]	; 0xffffffe4
   12840:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12844:	ldrb	r3, [r3]
   12848:	cmp	r3, #0
   1284c:	bne	12800 <__assert_fail@plt+0x18a4>
   12850:	mov	r3, #1
   12854:	strb	r3, [fp, #-33]	; 0xffffffdf
   12858:	ldr	r3, [fp, #20]
   1285c:	str	r3, [fp, #-28]	; 0xffffffe4
   12860:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12864:	bl	10e78 <strlen@plt>
   12868:	str	r0, [fp, #-32]	; 0xffffffe0
   1286c:	b	1290c <__assert_fail@plt+0x19b0>
   12870:	mov	r3, #1
   12874:	strb	r3, [fp, #-33]	; 0xffffffdf
   12878:	mov	r3, #1
   1287c:	strb	r3, [fp, #-34]	; 0xffffffde
   12880:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12884:	eor	r3, r3, #1
   12888:	uxtb	r3, r3
   1288c:	cmp	r3, #0
   12890:	beq	1289c <__assert_fail@plt+0x1940>
   12894:	mov	r3, #1
   12898:	strb	r3, [fp, #-33]	; 0xffffffdf
   1289c:	mov	r3, #2
   128a0:	str	r3, [fp, #4]
   128a4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   128a8:	eor	r3, r3, #1
   128ac:	uxtb	r3, r3
   128b0:	cmp	r3, #0
   128b4:	beq	128e8 <__assert_fail@plt+0x198c>
   128b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   128bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   128c0:	cmp	r2, r3
   128c4:	bcs	128dc <__assert_fail@plt+0x1980>
   128c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   128cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   128d0:	add	r3, r2, r3
   128d4:	mov	r2, #39	; 0x27
   128d8:	strb	r2, [r3]
   128dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   128e0:	add	r3, r3, #1
   128e4:	str	r3, [fp, #-20]	; 0xffffffec
   128e8:	ldr	r3, [pc, #3532]	; 136bc <__assert_fail@plt+0x2760>
   128ec:	str	r3, [fp, #-28]	; 0xffffffe4
   128f0:	mov	r3, #1
   128f4:	str	r3, [fp, #-32]	; 0xffffffe0
   128f8:	b	1290c <__assert_fail@plt+0x19b0>
   128fc:	mov	r3, #0
   12900:	strb	r3, [fp, #-34]	; 0xffffffde
   12904:	b	1290c <__assert_fail@plt+0x19b0>
   12908:	bl	10f44 <abort@plt>
   1290c:	mov	r3, #0
   12910:	str	r3, [fp, #-16]
   12914:	b	13aa4 <__assert_fail@plt+0x2b48>
   12918:	mov	r3, #0
   1291c:	strb	r3, [fp, #-40]	; 0xffffffd8
   12920:	mov	r3, #0
   12924:	strb	r3, [fp, #-41]	; 0xffffffd7
   12928:	mov	r3, #0
   1292c:	strb	r3, [fp, #-42]	; 0xffffffd6
   12930:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12934:	cmp	r3, #0
   12938:	beq	129d4 <__assert_fail@plt+0x1a78>
   1293c:	ldr	r3, [fp, #4]
   12940:	cmp	r3, #2
   12944:	beq	129d4 <__assert_fail@plt+0x1a78>
   12948:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1294c:	cmp	r3, #0
   12950:	beq	129d4 <__assert_fail@plt+0x1a78>
   12954:	ldr	r2, [fp, #-16]
   12958:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1295c:	add	r4, r2, r3
   12960:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12964:	cmn	r3, #1
   12968:	bne	1298c <__assert_fail@plt+0x1a30>
   1296c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12970:	cmp	r3, #1
   12974:	bls	1298c <__assert_fail@plt+0x1a30>
   12978:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1297c:	bl	10e78 <strlen@plt>
   12980:	str	r0, [fp, #-100]	; 0xffffff9c
   12984:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12988:	b	12990 <__assert_fail@plt+0x1a34>
   1298c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12990:	cmp	r4, r3
   12994:	bhi	129d4 <__assert_fail@plt+0x1a78>
   12998:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1299c:	ldr	r3, [fp, #-16]
   129a0:	add	r3, r2, r3
   129a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   129a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   129ac:	mov	r0, r3
   129b0:	bl	10d7c <memcmp@plt>
   129b4:	mov	r3, r0
   129b8:	cmp	r3, #0
   129bc:	bne	129d4 <__assert_fail@plt+0x1a78>
   129c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   129c4:	cmp	r3, #0
   129c8:	bne	13c60 <__assert_fail@plt+0x2d04>
   129cc:	mov	r3, #1
   129d0:	strb	r3, [fp, #-40]	; 0xffffffd8
   129d4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   129d8:	ldr	r3, [fp, #-16]
   129dc:	add	r3, r2, r3
   129e0:	ldrb	r3, [r3]
   129e4:	strb	r3, [fp, #-38]	; 0xffffffda
   129e8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   129ec:	cmp	r3, #126	; 0x7e
   129f0:	ldrls	pc, [pc, r3, lsl #2]
   129f4:	b	13220 <__assert_fail@plt+0x22c4>
   129f8:	strdeq	r2, [r1], -r4
   129fc:	andeq	r3, r1, r0, lsr #4
   12a00:	andeq	r3, r1, r0, lsr #4
   12a04:	andeq	r3, r1, r0, lsr #4
   12a08:	andeq	r3, r1, r0, lsr #4
   12a0c:	andeq	r3, r1, r0, lsr #4
   12a10:	andeq	r3, r1, r0, lsr #4
   12a14:	andeq	r2, r1, r4, ror #31
   12a18:	strdeq	r2, [r1], -r0
   12a1c:	andeq	r3, r1, r0, lsr #32
   12a20:	andeq	r3, r1, r8
   12a24:	andeq	r3, r1, ip, lsr #32
   12a28:	strdeq	r2, [r1], -ip
   12a2c:	andeq	r3, r1, r4, lsl r0
   12a30:	andeq	r3, r1, r0, lsr #4
   12a34:	andeq	r3, r1, r0, lsr #4
   12a38:	andeq	r3, r1, r0, lsr #4
   12a3c:	andeq	r3, r1, r0, lsr #4
   12a40:	andeq	r3, r1, r0, lsr #4
   12a44:	andeq	r3, r1, r0, lsr #4
   12a48:	andeq	r3, r1, r0, lsr #4
   12a4c:	andeq	r3, r1, r0, lsr #4
   12a50:	andeq	r3, r1, r0, lsr #4
   12a54:	andeq	r3, r1, r0, lsr #4
   12a58:	andeq	r3, r1, r0, lsr #4
   12a5c:	andeq	r3, r1, r0, lsr #4
   12a60:	andeq	r3, r1, r0, lsr #4
   12a64:	andeq	r3, r1, r0, lsr #4
   12a68:	andeq	r3, r1, r0, lsr #4
   12a6c:	andeq	r3, r1, r0, lsr #4
   12a70:	andeq	r3, r1, r0, lsr #4
   12a74:	andeq	r3, r1, r0, lsr #4
   12a78:	andeq	r3, r1, r4, lsl #2
   12a7c:	andeq	r3, r1, ip, lsl #2
   12a80:	andeq	r3, r1, ip, lsl #2
   12a84:	strdeq	r3, [r1], -r8
   12a88:	andeq	r3, r1, ip, lsl #2
   12a8c:	andeq	r3, r1, r4, lsl r2
   12a90:	andeq	r3, r1, ip, lsl #2
   12a94:	andeq	r3, r1, r8, lsr #2
   12a98:	andeq	r3, r1, ip, lsl #2
   12a9c:	andeq	r3, r1, ip, lsl #2
   12aa0:	andeq	r3, r1, ip, lsl #2
   12aa4:	andeq	r3, r1, r4, lsl r2
   12aa8:	andeq	r3, r1, r4, lsl r2
   12aac:	andeq	r3, r1, r4, lsl r2
   12ab0:	andeq	r3, r1, r4, lsl r2
   12ab4:	andeq	r3, r1, r4, lsl r2
   12ab8:	andeq	r3, r1, r4, lsl r2
   12abc:	andeq	r3, r1, r4, lsl r2
   12ac0:	andeq	r3, r1, r4, lsl r2
   12ac4:	andeq	r3, r1, r4, lsl r2
   12ac8:	andeq	r3, r1, r4, lsl r2
   12acc:	andeq	r3, r1, r4, lsl r2
   12ad0:	andeq	r3, r1, r4, lsl r2
   12ad4:	andeq	r3, r1, r4, lsl r2
   12ad8:	andeq	r3, r1, r4, lsl r2
   12adc:	andeq	r3, r1, r4, lsl r2
   12ae0:	andeq	r3, r1, r4, lsl r2
   12ae4:	andeq	r3, r1, ip, lsl #2
   12ae8:	andeq	r3, r1, ip, lsl #2
   12aec:	andeq	r3, r1, ip, lsl #2
   12af0:	andeq	r3, r1, ip, lsl #2
   12af4:	ldrdeq	r2, [r1], -r4
   12af8:	andeq	r3, r1, r0, lsr #4
   12afc:	andeq	r3, r1, r4, lsl r2
   12b00:	andeq	r3, r1, r4, lsl r2
   12b04:	andeq	r3, r1, r4, lsl r2
   12b08:	andeq	r3, r1, r4, lsl r2
   12b0c:	andeq	r3, r1, r4, lsl r2
   12b10:	andeq	r3, r1, r4, lsl r2
   12b14:	andeq	r3, r1, r4, lsl r2
   12b18:	andeq	r3, r1, r4, lsl r2
   12b1c:	andeq	r3, r1, r4, lsl r2
   12b20:	andeq	r3, r1, r4, lsl r2
   12b24:	andeq	r3, r1, r4, lsl r2
   12b28:	andeq	r3, r1, r4, lsl r2
   12b2c:	andeq	r3, r1, r4, lsl r2
   12b30:	andeq	r3, r1, r4, lsl r2
   12b34:	andeq	r3, r1, r4, lsl r2
   12b38:	andeq	r3, r1, r4, lsl r2
   12b3c:	andeq	r3, r1, r4, lsl r2
   12b40:	andeq	r3, r1, r4, lsl r2
   12b44:	andeq	r3, r1, r4, lsl r2
   12b48:	andeq	r3, r1, r4, lsl r2
   12b4c:	andeq	r3, r1, r4, lsl r2
   12b50:	andeq	r3, r1, r4, lsl r2
   12b54:	andeq	r3, r1, r4, lsl r2
   12b58:	andeq	r3, r1, r4, lsl r2
   12b5c:	andeq	r3, r1, r4, lsl r2
   12b60:	andeq	r3, r1, r4, lsl r2
   12b64:	andeq	r3, r1, ip, lsl #2
   12b68:	andeq	r3, r1, r8, lsr r0
   12b6c:	andeq	r3, r1, r4, lsl r2
   12b70:	andeq	r3, r1, ip, lsl #2
   12b74:	andeq	r3, r1, r4, lsl r2
   12b78:	andeq	r3, r1, ip, lsl #2
   12b7c:	andeq	r3, r1, r4, lsl r2
   12b80:	andeq	r3, r1, r4, lsl r2
   12b84:	andeq	r3, r1, r4, lsl r2
   12b88:	andeq	r3, r1, r4, lsl r2
   12b8c:	andeq	r3, r1, r4, lsl r2
   12b90:	andeq	r3, r1, r4, lsl r2
   12b94:	andeq	r3, r1, r4, lsl r2
   12b98:	andeq	r3, r1, r4, lsl r2
   12b9c:	andeq	r3, r1, r4, lsl r2
   12ba0:	andeq	r3, r1, r4, lsl r2
   12ba4:	andeq	r3, r1, r4, lsl r2
   12ba8:	andeq	r3, r1, r4, lsl r2
   12bac:	andeq	r3, r1, r4, lsl r2
   12bb0:	andeq	r3, r1, r4, lsl r2
   12bb4:	andeq	r3, r1, r4, lsl r2
   12bb8:	andeq	r3, r1, r4, lsl r2
   12bbc:	andeq	r3, r1, r4, lsl r2
   12bc0:	andeq	r3, r1, r4, lsl r2
   12bc4:	andeq	r3, r1, r4, lsl r2
   12bc8:	andeq	r3, r1, r4, lsl r2
   12bcc:	andeq	r3, r1, r4, lsl r2
   12bd0:	andeq	r3, r1, r4, lsl r2
   12bd4:	andeq	r3, r1, r4, lsl r2
   12bd8:	andeq	r3, r1, r4, lsl r2
   12bdc:	andeq	r3, r1, r4, lsl r2
   12be0:	andeq	r3, r1, r4, lsl r2
   12be4:	strheq	r3, [r1], -r0
   12be8:	andeq	r3, r1, ip, lsl #2
   12bec:	strheq	r3, [r1], -r0
   12bf0:	strdeq	r3, [r1], -r8
   12bf4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12bf8:	cmp	r3, #0
   12bfc:	beq	12dc0 <__assert_fail@plt+0x1e64>
   12c00:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12c04:	cmp	r3, #0
   12c08:	bne	13c68 <__assert_fail@plt+0x2d0c>
   12c0c:	mov	r3, #1
   12c10:	strb	r3, [fp, #-41]	; 0xffffffd7
   12c14:	ldr	r3, [fp, #4]
   12c18:	cmp	r3, #2
   12c1c:	bne	12ccc <__assert_fail@plt+0x1d70>
   12c20:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12c24:	eor	r3, r3, #1
   12c28:	uxtb	r3, r3
   12c2c:	cmp	r3, #0
   12c30:	beq	12ccc <__assert_fail@plt+0x1d70>
   12c34:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12c3c:	cmp	r2, r3
   12c40:	bcs	12c58 <__assert_fail@plt+0x1cfc>
   12c44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12c48:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c4c:	add	r3, r2, r3
   12c50:	mov	r2, #39	; 0x27
   12c54:	strb	r2, [r3]
   12c58:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c5c:	add	r3, r3, #1
   12c60:	str	r3, [fp, #-20]	; 0xffffffec
   12c64:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12c6c:	cmp	r2, r3
   12c70:	bcs	12c88 <__assert_fail@plt+0x1d2c>
   12c74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12c78:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c7c:	add	r3, r2, r3
   12c80:	mov	r2, #36	; 0x24
   12c84:	strb	r2, [r3]
   12c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c8c:	add	r3, r3, #1
   12c90:	str	r3, [fp, #-20]	; 0xffffffec
   12c94:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12c9c:	cmp	r2, r3
   12ca0:	bcs	12cb8 <__assert_fail@plt+0x1d5c>
   12ca4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ca8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12cac:	add	r3, r2, r3
   12cb0:	mov	r2, #39	; 0x27
   12cb4:	strb	r2, [r3]
   12cb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12cbc:	add	r3, r3, #1
   12cc0:	str	r3, [fp, #-20]	; 0xffffffec
   12cc4:	mov	r3, #1
   12cc8:	strb	r3, [fp, #-35]	; 0xffffffdd
   12ccc:	ldr	r2, [fp, #-20]	; 0xffffffec
   12cd0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12cd4:	cmp	r2, r3
   12cd8:	bcs	12cf0 <__assert_fail@plt+0x1d94>
   12cdc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ce0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ce4:	add	r3, r2, r3
   12ce8:	mov	r2, #92	; 0x5c
   12cec:	strb	r2, [r3]
   12cf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12cf4:	add	r3, r3, #1
   12cf8:	str	r3, [fp, #-20]	; 0xffffffec
   12cfc:	ldr	r3, [fp, #4]
   12d00:	cmp	r3, #2
   12d04:	beq	12db4 <__assert_fail@plt+0x1e58>
   12d08:	ldr	r3, [fp, #-16]
   12d0c:	add	r2, r3, #1
   12d10:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12d14:	cmp	r2, r3
   12d18:	bcs	12db4 <__assert_fail@plt+0x1e58>
   12d1c:	ldr	r3, [fp, #-16]
   12d20:	add	r3, r3, #1
   12d24:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12d28:	add	r3, r2, r3
   12d2c:	ldrb	r3, [r3]
   12d30:	cmp	r3, #47	; 0x2f
   12d34:	bls	12db4 <__assert_fail@plt+0x1e58>
   12d38:	ldr	r3, [fp, #-16]
   12d3c:	add	r3, r3, #1
   12d40:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12d44:	add	r3, r2, r3
   12d48:	ldrb	r3, [r3]
   12d4c:	cmp	r3, #57	; 0x39
   12d50:	bhi	12db4 <__assert_fail@plt+0x1e58>
   12d54:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12d5c:	cmp	r2, r3
   12d60:	bcs	12d78 <__assert_fail@plt+0x1e1c>
   12d64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12d68:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d6c:	add	r3, r2, r3
   12d70:	mov	r2, #48	; 0x30
   12d74:	strb	r2, [r3]
   12d78:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d7c:	add	r3, r3, #1
   12d80:	str	r3, [fp, #-20]	; 0xffffffec
   12d84:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12d8c:	cmp	r2, r3
   12d90:	bcs	12da8 <__assert_fail@plt+0x1e4c>
   12d94:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12d98:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d9c:	add	r3, r2, r3
   12da0:	mov	r2, #48	; 0x30
   12da4:	strb	r2, [r3]
   12da8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dac:	add	r3, r3, #1
   12db0:	str	r3, [fp, #-20]	; 0xffffffec
   12db4:	mov	r3, #48	; 0x30
   12db8:	strb	r3, [fp, #-38]	; 0xffffffda
   12dbc:	b	137fc <__assert_fail@plt+0x28a0>
   12dc0:	ldr	r3, [fp, #8]
   12dc4:	and	r3, r3, #1
   12dc8:	cmp	r3, #0
   12dcc:	beq	137fc <__assert_fail@plt+0x28a0>
   12dd0:	b	13a98 <__assert_fail@plt+0x2b3c>
   12dd4:	ldr	r3, [fp, #4]
   12dd8:	cmp	r3, #2
   12ddc:	beq	12dec <__assert_fail@plt+0x1e90>
   12de0:	cmp	r3, #5
   12de4:	beq	12dfc <__assert_fail@plt+0x1ea0>
   12de8:	b	12fe0 <__assert_fail@plt+0x2084>
   12dec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12df0:	cmp	r3, #0
   12df4:	beq	12fd4 <__assert_fail@plt+0x2078>
   12df8:	b	13ca4 <__assert_fail@plt+0x2d48>
   12dfc:	ldr	r3, [fp, #8]
   12e00:	and	r3, r3, #4
   12e04:	cmp	r3, #0
   12e08:	beq	12fdc <__assert_fail@plt+0x2080>
   12e0c:	ldr	r3, [fp, #-16]
   12e10:	add	r2, r3, #2
   12e14:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12e18:	cmp	r2, r3
   12e1c:	bcs	12fdc <__assert_fail@plt+0x2080>
   12e20:	ldr	r3, [fp, #-16]
   12e24:	add	r3, r3, #1
   12e28:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12e2c:	add	r3, r2, r3
   12e30:	ldrb	r3, [r3]
   12e34:	cmp	r3, #63	; 0x3f
   12e38:	bne	12fdc <__assert_fail@plt+0x2080>
   12e3c:	ldr	r3, [fp, #-16]
   12e40:	add	r3, r3, #2
   12e44:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12e48:	add	r3, r2, r3
   12e4c:	ldrb	r3, [r3]
   12e50:	sub	r3, r3, #33	; 0x21
   12e54:	cmp	r3, #29
   12e58:	ldrls	pc, [pc, r3, lsl #2]
   12e5c:	b	12fcc <__assert_fail@plt+0x2070>
   12e60:	ldrdeq	r2, [r1], -r8
   12e64:	andeq	r2, r1, ip, asr #31
   12e68:	andeq	r2, r1, ip, asr #31
   12e6c:	andeq	r2, r1, ip, asr #31
   12e70:	andeq	r2, r1, ip, asr #31
   12e74:	andeq	r2, r1, ip, asr #31
   12e78:	ldrdeq	r2, [r1], -r8
   12e7c:	ldrdeq	r2, [r1], -r8
   12e80:	ldrdeq	r2, [r1], -r8
   12e84:	andeq	r2, r1, ip, asr #31
   12e88:	andeq	r2, r1, ip, asr #31
   12e8c:	andeq	r2, r1, ip, asr #31
   12e90:	ldrdeq	r2, [r1], -r8
   12e94:	andeq	r2, r1, ip, asr #31
   12e98:	ldrdeq	r2, [r1], -r8
   12e9c:	andeq	r2, r1, ip, asr #31
   12ea0:	andeq	r2, r1, ip, asr #31
   12ea4:	andeq	r2, r1, ip, asr #31
   12ea8:	andeq	r2, r1, ip, asr #31
   12eac:	andeq	r2, r1, ip, asr #31
   12eb0:	andeq	r2, r1, ip, asr #31
   12eb4:	andeq	r2, r1, ip, asr #31
   12eb8:	andeq	r2, r1, ip, asr #31
   12ebc:	andeq	r2, r1, ip, asr #31
   12ec0:	andeq	r2, r1, ip, asr #31
   12ec4:	andeq	r2, r1, ip, asr #31
   12ec8:	andeq	r2, r1, ip, asr #31
   12ecc:	ldrdeq	r2, [r1], -r8
   12ed0:	ldrdeq	r2, [r1], -r8
   12ed4:	ldrdeq	r2, [r1], -r8
   12ed8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12edc:	cmp	r3, #0
   12ee0:	bne	13c70 <__assert_fail@plt+0x2d14>
   12ee4:	ldr	r3, [fp, #-16]
   12ee8:	add	r3, r3, #2
   12eec:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12ef0:	add	r3, r2, r3
   12ef4:	ldrb	r3, [r3]
   12ef8:	strb	r3, [fp, #-38]	; 0xffffffda
   12efc:	ldr	r3, [fp, #-16]
   12f00:	add	r3, r3, #2
   12f04:	str	r3, [fp, #-16]
   12f08:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f10:	cmp	r2, r3
   12f14:	bcs	12f2c <__assert_fail@plt+0x1fd0>
   12f18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f20:	add	r3, r2, r3
   12f24:	mov	r2, #63	; 0x3f
   12f28:	strb	r2, [r3]
   12f2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f30:	add	r3, r3, #1
   12f34:	str	r3, [fp, #-20]	; 0xffffffec
   12f38:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f40:	cmp	r2, r3
   12f44:	bcs	12f5c <__assert_fail@plt+0x2000>
   12f48:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f50:	add	r3, r2, r3
   12f54:	mov	r2, #34	; 0x22
   12f58:	strb	r2, [r3]
   12f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f60:	add	r3, r3, #1
   12f64:	str	r3, [fp, #-20]	; 0xffffffec
   12f68:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f6c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f70:	cmp	r2, r3
   12f74:	bcs	12f8c <__assert_fail@plt+0x2030>
   12f78:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f80:	add	r3, r2, r3
   12f84:	mov	r2, #34	; 0x22
   12f88:	strb	r2, [r3]
   12f8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f90:	add	r3, r3, #1
   12f94:	str	r3, [fp, #-20]	; 0xffffffec
   12f98:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12fa0:	cmp	r2, r3
   12fa4:	bcs	12fbc <__assert_fail@plt+0x2060>
   12fa8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12fac:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fb0:	add	r3, r2, r3
   12fb4:	mov	r2, #63	; 0x3f
   12fb8:	strb	r2, [r3]
   12fbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fc0:	add	r3, r3, #1
   12fc4:	str	r3, [fp, #-20]	; 0xffffffec
   12fc8:	b	12fd0 <__assert_fail@plt+0x2074>
   12fcc:	nop			; (mov r0, r0)
   12fd0:	b	12fdc <__assert_fail@plt+0x2080>
   12fd4:	nop			; (mov r0, r0)
   12fd8:	b	13828 <__assert_fail@plt+0x28cc>
   12fdc:	nop			; (mov r0, r0)
   12fe0:	b	13828 <__assert_fail@plt+0x28cc>
   12fe4:	mov	r3, #97	; 0x61
   12fe8:	strb	r3, [fp, #-39]	; 0xffffffd9
   12fec:	b	13098 <__assert_fail@plt+0x213c>
   12ff0:	mov	r3, #98	; 0x62
   12ff4:	strb	r3, [fp, #-39]	; 0xffffffd9
   12ff8:	b	13098 <__assert_fail@plt+0x213c>
   12ffc:	mov	r3, #102	; 0x66
   13000:	strb	r3, [fp, #-39]	; 0xffffffd9
   13004:	b	13098 <__assert_fail@plt+0x213c>
   13008:	mov	r3, #110	; 0x6e
   1300c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13010:	b	13080 <__assert_fail@plt+0x2124>
   13014:	mov	r3, #114	; 0x72
   13018:	strb	r3, [fp, #-39]	; 0xffffffd9
   1301c:	b	13080 <__assert_fail@plt+0x2124>
   13020:	mov	r3, #116	; 0x74
   13024:	strb	r3, [fp, #-39]	; 0xffffffd9
   13028:	b	13080 <__assert_fail@plt+0x2124>
   1302c:	mov	r3, #118	; 0x76
   13030:	strb	r3, [fp, #-39]	; 0xffffffd9
   13034:	b	13098 <__assert_fail@plt+0x213c>
   13038:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1303c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13040:	ldr	r3, [fp, #4]
   13044:	cmp	r3, #2
   13048:	bne	1305c <__assert_fail@plt+0x2100>
   1304c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13050:	cmp	r3, #0
   13054:	beq	139b0 <__assert_fail@plt+0x2a54>
   13058:	b	13ca4 <__assert_fail@plt+0x2d48>
   1305c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13060:	cmp	r3, #0
   13064:	beq	13080 <__assert_fail@plt+0x2124>
   13068:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1306c:	cmp	r3, #0
   13070:	beq	13080 <__assert_fail@plt+0x2124>
   13074:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13078:	cmp	r3, #0
   1307c:	bne	139b8 <__assert_fail@plt+0x2a5c>
   13080:	ldr	r3, [fp, #4]
   13084:	cmp	r3, #2
   13088:	bne	13098 <__assert_fail@plt+0x213c>
   1308c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13090:	cmp	r3, #0
   13094:	bne	13c78 <__assert_fail@plt+0x2d1c>
   13098:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1309c:	cmp	r3, #0
   130a0:	beq	13804 <__assert_fail@plt+0x28a8>
   130a4:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   130a8:	strb	r3, [fp, #-38]	; 0xffffffda
   130ac:	b	138b0 <__assert_fail@plt+0x2954>
   130b0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   130b4:	cmn	r3, #1
   130b8:	bne	130dc <__assert_fail@plt+0x2180>
   130bc:	ldr	r3, [fp, #-96]	; 0xffffffa0
   130c0:	add	r3, r3, #1
   130c4:	ldrb	r3, [r3]
   130c8:	cmp	r3, #0
   130cc:	movne	r3, #1
   130d0:	moveq	r3, #0
   130d4:	uxtb	r3, r3
   130d8:	b	130f0 <__assert_fail@plt+0x2194>
   130dc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   130e0:	cmp	r3, #1
   130e4:	movne	r3, #1
   130e8:	moveq	r3, #0
   130ec:	uxtb	r3, r3
   130f0:	cmp	r3, #0
   130f4:	bne	1380c <__assert_fail@plt+0x28b0>
   130f8:	ldr	r3, [fp, #-16]
   130fc:	cmp	r3, #0
   13100:	bne	13814 <__assert_fail@plt+0x28b8>
   13104:	mov	r3, #1
   13108:	strb	r3, [fp, #-42]	; 0xffffffd6
   1310c:	ldr	r3, [fp, #4]
   13110:	cmp	r3, #2
   13114:	bne	1381c <__assert_fail@plt+0x28c0>
   13118:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1311c:	cmp	r3, #0
   13120:	beq	1381c <__assert_fail@plt+0x28c0>
   13124:	b	13ca4 <__assert_fail@plt+0x2d48>
   13128:	mov	r3, #1
   1312c:	strb	r3, [fp, #-36]	; 0xffffffdc
   13130:	mov	r3, #1
   13134:	strb	r3, [fp, #-42]	; 0xffffffd6
   13138:	ldr	r3, [fp, #4]
   1313c:	cmp	r3, #2
   13140:	bne	13824 <__assert_fail@plt+0x28c8>
   13144:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13148:	cmp	r3, #0
   1314c:	bne	13c80 <__assert_fail@plt+0x2d24>
   13150:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13154:	cmp	r3, #0
   13158:	beq	13178 <__assert_fail@plt+0x221c>
   1315c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13160:	cmp	r3, #0
   13164:	bne	13178 <__assert_fail@plt+0x221c>
   13168:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1316c:	str	r3, [fp, #-24]	; 0xffffffe8
   13170:	mov	r3, #0
   13174:	str	r3, [fp, #-92]	; 0xffffffa4
   13178:	ldr	r2, [fp, #-20]	; 0xffffffec
   1317c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13180:	cmp	r2, r3
   13184:	bcs	1319c <__assert_fail@plt+0x2240>
   13188:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1318c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13190:	add	r3, r2, r3
   13194:	mov	r2, #39	; 0x27
   13198:	strb	r2, [r3]
   1319c:	ldr	r3, [fp, #-20]	; 0xffffffec
   131a0:	add	r3, r3, #1
   131a4:	str	r3, [fp, #-20]	; 0xffffffec
   131a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   131ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131b0:	cmp	r2, r3
   131b4:	bcs	131cc <__assert_fail@plt+0x2270>
   131b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   131c0:	add	r3, r2, r3
   131c4:	mov	r2, #92	; 0x5c
   131c8:	strb	r2, [r3]
   131cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   131d0:	add	r3, r3, #1
   131d4:	str	r3, [fp, #-20]	; 0xffffffec
   131d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   131dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131e0:	cmp	r2, r3
   131e4:	bcs	131fc <__assert_fail@plt+0x22a0>
   131e8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   131f0:	add	r3, r2, r3
   131f4:	mov	r2, #39	; 0x27
   131f8:	strb	r2, [r3]
   131fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13200:	add	r3, r3, #1
   13204:	str	r3, [fp, #-20]	; 0xffffffec
   13208:	mov	r3, #0
   1320c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13210:	b	13824 <__assert_fail@plt+0x28c8>
   13214:	mov	r3, #1
   13218:	strb	r3, [fp, #-42]	; 0xffffffd6
   1321c:	b	13828 <__assert_fail@plt+0x28cc>
   13220:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   13224:	cmp	r3, #0
   13228:	beq	13268 <__assert_fail@plt+0x230c>
   1322c:	mov	r3, #1
   13230:	str	r3, [fp, #-48]	; 0xffffffd0
   13234:	bl	10e54 <__ctype_b_loc@plt>
   13238:	mov	r3, r0
   1323c:	ldr	r2, [r3]
   13240:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13244:	lsl	r3, r3, #1
   13248:	add	r3, r2, r3
   1324c:	ldrh	r3, [r3]
   13250:	and	r3, r3, #16384	; 0x4000
   13254:	cmp	r3, #0
   13258:	movne	r3, #1
   1325c:	moveq	r3, #0
   13260:	strb	r3, [fp, #-49]	; 0xffffffcf
   13264:	b	134b4 <__assert_fail@plt+0x2558>
   13268:	sub	r3, fp, #76	; 0x4c
   1326c:	mov	r2, #8
   13270:	mov	r1, #0
   13274:	mov	r0, r3
   13278:	bl	10eb4 <memset@plt>
   1327c:	mov	r3, #0
   13280:	str	r3, [fp, #-48]	; 0xffffffd0
   13284:	mov	r3, #1
   13288:	strb	r3, [fp, #-49]	; 0xffffffcf
   1328c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13290:	cmn	r3, #1
   13294:	bne	132a4 <__assert_fail@plt+0x2348>
   13298:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1329c:	bl	10e78 <strlen@plt>
   132a0:	str	r0, [fp, #-100]	; 0xffffff9c
   132a4:	ldr	r2, [fp, #-16]
   132a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   132ac:	add	r3, r2, r3
   132b0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   132b4:	add	r1, r2, r3
   132b8:	ldr	r2, [fp, #-16]
   132bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   132c0:	add	r3, r2, r3
   132c4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   132c8:	sub	r2, r2, r3
   132cc:	sub	r3, fp, #76	; 0x4c
   132d0:	sub	r0, fp, #80	; 0x50
   132d4:	bl	16bac <__assert_fail@plt+0x5c50>
   132d8:	str	r0, [fp, #-64]	; 0xffffffc0
   132dc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   132e0:	cmp	r3, #0
   132e4:	beq	134a8 <__assert_fail@plt+0x254c>
   132e8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   132ec:	cmn	r3, #1
   132f0:	bne	13300 <__assert_fail@plt+0x23a4>
   132f4:	mov	r3, #0
   132f8:	strb	r3, [fp, #-49]	; 0xffffffcf
   132fc:	b	134b4 <__assert_fail@plt+0x2558>
   13300:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13304:	cmn	r3, #2
   13308:	bne	13360 <__assert_fail@plt+0x2404>
   1330c:	mov	r3, #0
   13310:	strb	r3, [fp, #-49]	; 0xffffffcf
   13314:	b	13324 <__assert_fail@plt+0x23c8>
   13318:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1331c:	add	r3, r3, #1
   13320:	str	r3, [fp, #-48]	; 0xffffffd0
   13324:	ldr	r2, [fp, #-16]
   13328:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1332c:	add	r2, r2, r3
   13330:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13334:	cmp	r2, r3
   13338:	bcs	134b0 <__assert_fail@plt+0x2554>
   1333c:	ldr	r2, [fp, #-16]
   13340:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13344:	add	r3, r2, r3
   13348:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1334c:	add	r3, r2, r3
   13350:	ldrb	r3, [r3]
   13354:	cmp	r3, #0
   13358:	bne	13318 <__assert_fail@plt+0x23bc>
   1335c:	b	134b0 <__assert_fail@plt+0x2554>
   13360:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13364:	cmp	r3, #0
   13368:	beq	1345c <__assert_fail@plt+0x2500>
   1336c:	ldr	r3, [fp, #4]
   13370:	cmp	r3, #2
   13374:	bne	1345c <__assert_fail@plt+0x2500>
   13378:	mov	r3, #1
   1337c:	str	r3, [fp, #-56]	; 0xffffffc8
   13380:	b	1344c <__assert_fail@plt+0x24f0>
   13384:	ldr	r2, [fp, #-16]
   13388:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1338c:	add	r2, r2, r3
   13390:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13394:	add	r3, r2, r3
   13398:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1339c:	add	r3, r2, r3
   133a0:	ldrb	r3, [r3]
   133a4:	sub	r3, r3, #91	; 0x5b
   133a8:	cmp	r3, #33	; 0x21
   133ac:	ldrls	pc, [pc, r3, lsl #2]
   133b0:	b	1343c <__assert_fail@plt+0x24e0>
   133b4:	andeq	r3, r1, r8, lsl #25
   133b8:	andeq	r3, r1, r8, lsl #25
   133bc:	andeq	r3, r1, ip, lsr r4
   133c0:	andeq	r3, r1, r8, lsl #25
   133c4:	andeq	r3, r1, ip, lsr r4
   133c8:	andeq	r3, r1, r8, lsl #25
   133cc:	andeq	r3, r1, ip, lsr r4
   133d0:	andeq	r3, r1, ip, lsr r4
   133d4:	andeq	r3, r1, ip, lsr r4
   133d8:	andeq	r3, r1, ip, lsr r4
   133dc:	andeq	r3, r1, ip, lsr r4
   133e0:	andeq	r3, r1, ip, lsr r4
   133e4:	andeq	r3, r1, ip, lsr r4
   133e8:	andeq	r3, r1, ip, lsr r4
   133ec:	andeq	r3, r1, ip, lsr r4
   133f0:	andeq	r3, r1, ip, lsr r4
   133f4:	andeq	r3, r1, ip, lsr r4
   133f8:	andeq	r3, r1, ip, lsr r4
   133fc:	andeq	r3, r1, ip, lsr r4
   13400:	andeq	r3, r1, ip, lsr r4
   13404:	andeq	r3, r1, ip, lsr r4
   13408:	andeq	r3, r1, ip, lsr r4
   1340c:	andeq	r3, r1, ip, lsr r4
   13410:	andeq	r3, r1, ip, lsr r4
   13414:	andeq	r3, r1, ip, lsr r4
   13418:	andeq	r3, r1, ip, lsr r4
   1341c:	andeq	r3, r1, ip, lsr r4
   13420:	andeq	r3, r1, ip, lsr r4
   13424:	andeq	r3, r1, ip, lsr r4
   13428:	andeq	r3, r1, ip, lsr r4
   1342c:	andeq	r3, r1, ip, lsr r4
   13430:	andeq	r3, r1, ip, lsr r4
   13434:	andeq	r3, r1, ip, lsr r4
   13438:	andeq	r3, r1, r8, lsl #25
   1343c:	nop			; (mov r0, r0)
   13440:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13444:	add	r3, r3, #1
   13448:	str	r3, [fp, #-56]	; 0xffffffc8
   1344c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13450:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13454:	cmp	r2, r3
   13458:	bcc	13384 <__assert_fail@plt+0x2428>
   1345c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13460:	mov	r0, r3
   13464:	bl	10db8 <iswprint@plt>
   13468:	mov	r3, r0
   1346c:	cmp	r3, #0
   13470:	bne	1347c <__assert_fail@plt+0x2520>
   13474:	mov	r3, #0
   13478:	strb	r3, [fp, #-49]	; 0xffffffcf
   1347c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13480:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13484:	add	r3, r2, r3
   13488:	str	r3, [fp, #-48]	; 0xffffffd0
   1348c:	sub	r3, fp, #76	; 0x4c
   13490:	mov	r0, r3
   13494:	bl	10d64 <mbsinit@plt>
   13498:	mov	r3, r0
   1349c:	cmp	r3, #0
   134a0:	beq	132a4 <__assert_fail@plt+0x2348>
   134a4:	b	134b4 <__assert_fail@plt+0x2558>
   134a8:	nop			; (mov r0, r0)
   134ac:	b	134b4 <__assert_fail@plt+0x2558>
   134b0:	nop			; (mov r0, r0)
   134b4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   134b8:	strb	r3, [fp, #-42]	; 0xffffffd6
   134bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   134c0:	cmp	r3, #1
   134c4:	bhi	134e8 <__assert_fail@plt+0x258c>
   134c8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   134cc:	cmp	r3, #0
   134d0:	beq	13828 <__assert_fail@plt+0x28cc>
   134d4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   134d8:	eor	r3, r3, #1
   134dc:	uxtb	r3, r3
   134e0:	cmp	r3, #0
   134e4:	beq	13828 <__assert_fail@plt+0x28cc>
   134e8:	ldr	r2, [fp, #-16]
   134ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   134f0:	add	r3, r2, r3
   134f4:	str	r3, [fp, #-68]	; 0xffffffbc
   134f8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   134fc:	cmp	r3, #0
   13500:	beq	136c0 <__assert_fail@plt+0x2764>
   13504:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13508:	eor	r3, r3, #1
   1350c:	uxtb	r3, r3
   13510:	cmp	r3, #0
   13514:	beq	136c0 <__assert_fail@plt+0x2764>
   13518:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1351c:	cmp	r3, #0
   13520:	bne	13c90 <__assert_fail@plt+0x2d34>
   13524:	mov	r3, #1
   13528:	strb	r3, [fp, #-41]	; 0xffffffd7
   1352c:	ldr	r3, [fp, #4]
   13530:	cmp	r3, #2
   13534:	bne	135e4 <__assert_fail@plt+0x2688>
   13538:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1353c:	eor	r3, r3, #1
   13540:	uxtb	r3, r3
   13544:	cmp	r3, #0
   13548:	beq	135e4 <__assert_fail@plt+0x2688>
   1354c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13550:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13554:	cmp	r2, r3
   13558:	bcs	13570 <__assert_fail@plt+0x2614>
   1355c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13560:	ldr	r3, [fp, #-20]	; 0xffffffec
   13564:	add	r3, r2, r3
   13568:	mov	r2, #39	; 0x27
   1356c:	strb	r2, [r3]
   13570:	ldr	r3, [fp, #-20]	; 0xffffffec
   13574:	add	r3, r3, #1
   13578:	str	r3, [fp, #-20]	; 0xffffffec
   1357c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13580:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13584:	cmp	r2, r3
   13588:	bcs	135a0 <__assert_fail@plt+0x2644>
   1358c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13590:	ldr	r3, [fp, #-20]	; 0xffffffec
   13594:	add	r3, r2, r3
   13598:	mov	r2, #36	; 0x24
   1359c:	strb	r2, [r3]
   135a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135a4:	add	r3, r3, #1
   135a8:	str	r3, [fp, #-20]	; 0xffffffec
   135ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   135b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   135b4:	cmp	r2, r3
   135b8:	bcs	135d0 <__assert_fail@plt+0x2674>
   135bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   135c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135c4:	add	r3, r2, r3
   135c8:	mov	r2, #39	; 0x27
   135cc:	strb	r2, [r3]
   135d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135d4:	add	r3, r3, #1
   135d8:	str	r3, [fp, #-20]	; 0xffffffec
   135dc:	mov	r3, #1
   135e0:	strb	r3, [fp, #-35]	; 0xffffffdd
   135e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   135e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   135ec:	cmp	r2, r3
   135f0:	bcs	13608 <__assert_fail@plt+0x26ac>
   135f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   135f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   135fc:	add	r3, r2, r3
   13600:	mov	r2, #92	; 0x5c
   13604:	strb	r2, [r3]
   13608:	ldr	r3, [fp, #-20]	; 0xffffffec
   1360c:	add	r3, r3, #1
   13610:	str	r3, [fp, #-20]	; 0xffffffec
   13614:	ldr	r2, [fp, #-20]	; 0xffffffec
   13618:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1361c:	cmp	r2, r3
   13620:	bcs	13648 <__assert_fail@plt+0x26ec>
   13624:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13628:	ldr	r3, [fp, #-20]	; 0xffffffec
   1362c:	add	r3, r2, r3
   13630:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13634:	lsr	r2, r2, #6
   13638:	uxtb	r2, r2
   1363c:	add	r2, r2, #48	; 0x30
   13640:	uxtb	r2, r2
   13644:	strb	r2, [r3]
   13648:	ldr	r3, [fp, #-20]	; 0xffffffec
   1364c:	add	r3, r3, #1
   13650:	str	r3, [fp, #-20]	; 0xffffffec
   13654:	ldr	r2, [fp, #-20]	; 0xffffffec
   13658:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1365c:	cmp	r2, r3
   13660:	bcs	13690 <__assert_fail@plt+0x2734>
   13664:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13668:	ldr	r3, [fp, #-20]	; 0xffffffec
   1366c:	add	r3, r2, r3
   13670:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13674:	lsr	r2, r2, #3
   13678:	uxtb	r2, r2
   1367c:	and	r2, r2, #7
   13680:	uxtb	r2, r2
   13684:	add	r2, r2, #48	; 0x30
   13688:	uxtb	r2, r2
   1368c:	strb	r2, [r3]
   13690:	ldr	r3, [fp, #-20]	; 0xffffffec
   13694:	add	r3, r3, #1
   13698:	str	r3, [fp, #-20]	; 0xffffffec
   1369c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   136a0:	and	r3, r3, #7
   136a4:	uxtb	r3, r3
   136a8:	add	r3, r3, #48	; 0x30
   136ac:	strb	r3, [fp, #-38]	; 0xffffffda
   136b0:	b	13704 <__assert_fail@plt+0x27a8>
   136b4:	andeq	r8, r1, r8, asr #32
   136b8:	andeq	r8, r1, r0, asr r0
   136bc:	andeq	r8, r1, ip, asr #32
   136c0:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   136c4:	cmp	r3, #0
   136c8:	beq	13704 <__assert_fail@plt+0x27a8>
   136cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   136d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136d4:	cmp	r2, r3
   136d8:	bcs	136f0 <__assert_fail@plt+0x2794>
   136dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   136e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   136e4:	add	r3, r2, r3
   136e8:	mov	r2, #92	; 0x5c
   136ec:	strb	r2, [r3]
   136f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   136f4:	add	r3, r3, #1
   136f8:	str	r3, [fp, #-20]	; 0xffffffec
   136fc:	mov	r3, #0
   13700:	strb	r3, [fp, #-40]	; 0xffffffd8
   13704:	ldr	r3, [fp, #-16]
   13708:	add	r2, r3, #1
   1370c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13710:	cmp	r2, r3
   13714:	bcs	137f4 <__assert_fail@plt+0x2898>
   13718:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1371c:	cmp	r3, #0
   13720:	beq	137a0 <__assert_fail@plt+0x2844>
   13724:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13728:	eor	r3, r3, #1
   1372c:	uxtb	r3, r3
   13730:	cmp	r3, #0
   13734:	beq	137a0 <__assert_fail@plt+0x2844>
   13738:	ldr	r2, [fp, #-20]	; 0xffffffec
   1373c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13740:	cmp	r2, r3
   13744:	bcs	1375c <__assert_fail@plt+0x2800>
   13748:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1374c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13750:	add	r3, r2, r3
   13754:	mov	r2, #39	; 0x27
   13758:	strb	r2, [r3]
   1375c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13760:	add	r3, r3, #1
   13764:	str	r3, [fp, #-20]	; 0xffffffec
   13768:	ldr	r2, [fp, #-20]	; 0xffffffec
   1376c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13770:	cmp	r2, r3
   13774:	bcs	1378c <__assert_fail@plt+0x2830>
   13778:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1377c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13780:	add	r3, r2, r3
   13784:	mov	r2, #39	; 0x27
   13788:	strb	r2, [r3]
   1378c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13790:	add	r3, r3, #1
   13794:	str	r3, [fp, #-20]	; 0xffffffec
   13798:	mov	r3, #0
   1379c:	strb	r3, [fp, #-35]	; 0xffffffdd
   137a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   137a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   137a8:	cmp	r2, r3
   137ac:	bcs	137c4 <__assert_fail@plt+0x2868>
   137b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   137b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   137b8:	add	r3, r2, r3
   137bc:	ldrb	r2, [fp, #-38]	; 0xffffffda
   137c0:	strb	r2, [r3]
   137c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   137c8:	add	r3, r3, #1
   137cc:	str	r3, [fp, #-20]	; 0xffffffec
   137d0:	ldr	r3, [fp, #-16]
   137d4:	add	r3, r3, #1
   137d8:	str	r3, [fp, #-16]
   137dc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   137e0:	ldr	r3, [fp, #-16]
   137e4:	add	r3, r2, r3
   137e8:	ldrb	r3, [r3]
   137ec:	strb	r3, [fp, #-38]	; 0xffffffda
   137f0:	b	134f8 <__assert_fail@plt+0x259c>
   137f4:	nop			; (mov r0, r0)
   137f8:	b	139c4 <__assert_fail@plt+0x2a68>
   137fc:	nop			; (mov r0, r0)
   13800:	b	13828 <__assert_fail@plt+0x28cc>
   13804:	nop			; (mov r0, r0)
   13808:	b	13828 <__assert_fail@plt+0x28cc>
   1380c:	nop			; (mov r0, r0)
   13810:	b	13828 <__assert_fail@plt+0x28cc>
   13814:	nop			; (mov r0, r0)
   13818:	b	13828 <__assert_fail@plt+0x28cc>
   1381c:	nop			; (mov r0, r0)
   13820:	b	13828 <__assert_fail@plt+0x28cc>
   13824:	nop			; (mov r0, r0)
   13828:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1382c:	eor	r3, r3, #1
   13830:	uxtb	r3, r3
   13834:	cmp	r3, #0
   13838:	bne	13848 <__assert_fail@plt+0x28ec>
   1383c:	ldr	r3, [fp, #4]
   13840:	cmp	r3, #2
   13844:	bne	1385c <__assert_fail@plt+0x2900>
   13848:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1384c:	eor	r3, r3, #1
   13850:	uxtb	r3, r3
   13854:	cmp	r3, #0
   13858:	bne	1389c <__assert_fail@plt+0x2940>
   1385c:	ldr	r3, [fp, #12]
   13860:	cmp	r3, #0
   13864:	beq	1389c <__assert_fail@plt+0x2940>
   13868:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1386c:	lsr	r3, r3, #5
   13870:	uxtb	r3, r3
   13874:	lsl	r3, r3, #2
   13878:	ldr	r2, [fp, #12]
   1387c:	add	r3, r2, r3
   13880:	ldr	r2, [r3]
   13884:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13888:	and	r3, r3, #31
   1388c:	lsr	r3, r2, r3
   13890:	and	r3, r3, #1
   13894:	cmp	r3, #0
   13898:	bne	138b0 <__assert_fail@plt+0x2954>
   1389c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   138a0:	eor	r3, r3, #1
   138a4:	uxtb	r3, r3
   138a8:	cmp	r3, #0
   138ac:	bne	139c0 <__assert_fail@plt+0x2a64>
   138b0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   138b4:	cmp	r3, #0
   138b8:	bne	13c98 <__assert_fail@plt+0x2d3c>
   138bc:	mov	r3, #1
   138c0:	strb	r3, [fp, #-41]	; 0xffffffd7
   138c4:	ldr	r3, [fp, #4]
   138c8:	cmp	r3, #2
   138cc:	bne	1397c <__assert_fail@plt+0x2a20>
   138d0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   138d4:	eor	r3, r3, #1
   138d8:	uxtb	r3, r3
   138dc:	cmp	r3, #0
   138e0:	beq	1397c <__assert_fail@plt+0x2a20>
   138e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   138e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   138ec:	cmp	r2, r3
   138f0:	bcs	13908 <__assert_fail@plt+0x29ac>
   138f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   138f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138fc:	add	r3, r2, r3
   13900:	mov	r2, #39	; 0x27
   13904:	strb	r2, [r3]
   13908:	ldr	r3, [fp, #-20]	; 0xffffffec
   1390c:	add	r3, r3, #1
   13910:	str	r3, [fp, #-20]	; 0xffffffec
   13914:	ldr	r2, [fp, #-20]	; 0xffffffec
   13918:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1391c:	cmp	r2, r3
   13920:	bcs	13938 <__assert_fail@plt+0x29dc>
   13924:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13928:	ldr	r3, [fp, #-20]	; 0xffffffec
   1392c:	add	r3, r2, r3
   13930:	mov	r2, #36	; 0x24
   13934:	strb	r2, [r3]
   13938:	ldr	r3, [fp, #-20]	; 0xffffffec
   1393c:	add	r3, r3, #1
   13940:	str	r3, [fp, #-20]	; 0xffffffec
   13944:	ldr	r2, [fp, #-20]	; 0xffffffec
   13948:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1394c:	cmp	r2, r3
   13950:	bcs	13968 <__assert_fail@plt+0x2a0c>
   13954:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13958:	ldr	r3, [fp, #-20]	; 0xffffffec
   1395c:	add	r3, r2, r3
   13960:	mov	r2, #39	; 0x27
   13964:	strb	r2, [r3]
   13968:	ldr	r3, [fp, #-20]	; 0xffffffec
   1396c:	add	r3, r3, #1
   13970:	str	r3, [fp, #-20]	; 0xffffffec
   13974:	mov	r3, #1
   13978:	strb	r3, [fp, #-35]	; 0xffffffdd
   1397c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13980:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13984:	cmp	r2, r3
   13988:	bcs	139a0 <__assert_fail@plt+0x2a44>
   1398c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13990:	ldr	r3, [fp, #-20]	; 0xffffffec
   13994:	add	r3, r2, r3
   13998:	mov	r2, #92	; 0x5c
   1399c:	strb	r2, [r3]
   139a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   139a4:	add	r3, r3, #1
   139a8:	str	r3, [fp, #-20]	; 0xffffffec
   139ac:	b	139c4 <__assert_fail@plt+0x2a68>
   139b0:	nop			; (mov r0, r0)
   139b4:	b	139c4 <__assert_fail@plt+0x2a68>
   139b8:	nop			; (mov r0, r0)
   139bc:	b	139c4 <__assert_fail@plt+0x2a68>
   139c0:	nop			; (mov r0, r0)
   139c4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   139c8:	cmp	r3, #0
   139cc:	beq	13a4c <__assert_fail@plt+0x2af0>
   139d0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   139d4:	eor	r3, r3, #1
   139d8:	uxtb	r3, r3
   139dc:	cmp	r3, #0
   139e0:	beq	13a4c <__assert_fail@plt+0x2af0>
   139e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   139e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139ec:	cmp	r2, r3
   139f0:	bcs	13a08 <__assert_fail@plt+0x2aac>
   139f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   139fc:	add	r3, r2, r3
   13a00:	mov	r2, #39	; 0x27
   13a04:	strb	r2, [r3]
   13a08:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a0c:	add	r3, r3, #1
   13a10:	str	r3, [fp, #-20]	; 0xffffffec
   13a14:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a1c:	cmp	r2, r3
   13a20:	bcs	13a38 <__assert_fail@plt+0x2adc>
   13a24:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a28:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a2c:	add	r3, r2, r3
   13a30:	mov	r2, #39	; 0x27
   13a34:	strb	r2, [r3]
   13a38:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a3c:	add	r3, r3, #1
   13a40:	str	r3, [fp, #-20]	; 0xffffffec
   13a44:	mov	r3, #0
   13a48:	strb	r3, [fp, #-35]	; 0xffffffdd
   13a4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a50:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a54:	cmp	r2, r3
   13a58:	bcs	13a70 <__assert_fail@plt+0x2b14>
   13a5c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a60:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a64:	add	r3, r2, r3
   13a68:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13a6c:	strb	r2, [r3]
   13a70:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a74:	add	r3, r3, #1
   13a78:	str	r3, [fp, #-20]	; 0xffffffec
   13a7c:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   13a80:	eor	r3, r3, #1
   13a84:	uxtb	r3, r3
   13a88:	cmp	r3, #0
   13a8c:	beq	13a98 <__assert_fail@plt+0x2b3c>
   13a90:	mov	r3, #0
   13a94:	strb	r3, [fp, #-37]	; 0xffffffdb
   13a98:	ldr	r3, [fp, #-16]
   13a9c:	add	r3, r3, #1
   13aa0:	str	r3, [fp, #-16]
   13aa4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13aa8:	cmn	r3, #1
   13aac:	bne	13ad4 <__assert_fail@plt+0x2b78>
   13ab0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13ab4:	ldr	r3, [fp, #-16]
   13ab8:	add	r3, r2, r3
   13abc:	ldrb	r3, [r3]
   13ac0:	cmp	r3, #0
   13ac4:	movne	r3, #1
   13ac8:	moveq	r3, #0
   13acc:	uxtb	r3, r3
   13ad0:	b	13aec <__assert_fail@plt+0x2b90>
   13ad4:	ldr	r2, [fp, #-16]
   13ad8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13adc:	cmp	r2, r3
   13ae0:	movne	r3, #1
   13ae4:	moveq	r3, #0
   13ae8:	uxtb	r3, r3
   13aec:	cmp	r3, #0
   13af0:	bne	12918 <__assert_fail@plt+0x19bc>
   13af4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13af8:	cmp	r3, #0
   13afc:	bne	13b18 <__assert_fail@plt+0x2bbc>
   13b00:	ldr	r3, [fp, #4]
   13b04:	cmp	r3, #2
   13b08:	bne	13b18 <__assert_fail@plt+0x2bbc>
   13b0c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b10:	cmp	r3, #0
   13b14:	bne	13ca0 <__assert_fail@plt+0x2d44>
   13b18:	ldr	r3, [fp, #4]
   13b1c:	cmp	r3, #2
   13b20:	bne	13bc0 <__assert_fail@plt+0x2c64>
   13b24:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b28:	eor	r3, r3, #1
   13b2c:	uxtb	r3, r3
   13b30:	cmp	r3, #0
   13b34:	beq	13bc0 <__assert_fail@plt+0x2c64>
   13b38:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   13b3c:	cmp	r3, #0
   13b40:	beq	13bc0 <__assert_fail@plt+0x2c64>
   13b44:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13b48:	cmp	r3, #0
   13b4c:	beq	13b94 <__assert_fail@plt+0x2c38>
   13b50:	ldr	r3, [fp, #20]
   13b54:	str	r3, [sp, #16]
   13b58:	ldr	r3, [fp, #16]
   13b5c:	str	r3, [sp, #12]
   13b60:	ldr	r3, [fp, #12]
   13b64:	str	r3, [sp, #8]
   13b68:	ldr	r3, [fp, #8]
   13b6c:	str	r3, [sp, #4]
   13b70:	mov	r3, #5
   13b74:	str	r3, [sp]
   13b78:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13b7c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13b80:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13b84:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13b88:	bl	12668 <__assert_fail@plt+0x170c>
   13b8c:	mov	r3, r0
   13b90:	b	13d08 <__assert_fail@plt+0x2dac>
   13b94:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b98:	cmp	r3, #0
   13b9c:	bne	13bc0 <__assert_fail@plt+0x2c64>
   13ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ba4:	cmp	r3, #0
   13ba8:	beq	13bc0 <__assert_fail@plt+0x2c64>
   13bac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bb0:	str	r3, [fp, #-92]	; 0xffffffa4
   13bb4:	mov	r3, #0
   13bb8:	str	r3, [fp, #-20]	; 0xffffffec
   13bbc:	b	126f4 <__assert_fail@plt+0x1798>
   13bc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13bc4:	cmp	r3, #0
   13bc8:	beq	13c34 <__assert_fail@plt+0x2cd8>
   13bcc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13bd0:	eor	r3, r3, #1
   13bd4:	uxtb	r3, r3
   13bd8:	cmp	r3, #0
   13bdc:	beq	13c34 <__assert_fail@plt+0x2cd8>
   13be0:	b	13c24 <__assert_fail@plt+0x2cc8>
   13be4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13be8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bec:	cmp	r2, r3
   13bf0:	bcs	13c0c <__assert_fail@plt+0x2cb0>
   13bf4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13bf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bfc:	add	r3, r2, r3
   13c00:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13c04:	ldrb	r2, [r2]
   13c08:	strb	r2, [r3]
   13c0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c10:	add	r3, r3, #1
   13c14:	str	r3, [fp, #-20]	; 0xffffffec
   13c18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13c1c:	add	r3, r3, #1
   13c20:	str	r3, [fp, #-28]	; 0xffffffe4
   13c24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13c28:	ldrb	r3, [r3]
   13c2c:	cmp	r3, #0
   13c30:	bne	13be4 <__assert_fail@plt+0x2c88>
   13c34:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c3c:	cmp	r2, r3
   13c40:	bcs	13c58 <__assert_fail@plt+0x2cfc>
   13c44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c48:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c4c:	add	r3, r2, r3
   13c50:	mov	r2, #0
   13c54:	strb	r2, [r3]
   13c58:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c5c:	b	13d08 <__assert_fail@plt+0x2dac>
   13c60:	nop			; (mov r0, r0)
   13c64:	b	13ca4 <__assert_fail@plt+0x2d48>
   13c68:	nop			; (mov r0, r0)
   13c6c:	b	13ca4 <__assert_fail@plt+0x2d48>
   13c70:	nop			; (mov r0, r0)
   13c74:	b	13ca4 <__assert_fail@plt+0x2d48>
   13c78:	nop			; (mov r0, r0)
   13c7c:	b	13ca4 <__assert_fail@plt+0x2d48>
   13c80:	nop			; (mov r0, r0)
   13c84:	b	13ca4 <__assert_fail@plt+0x2d48>
   13c88:	nop			; (mov r0, r0)
   13c8c:	b	13ca4 <__assert_fail@plt+0x2d48>
   13c90:	nop			; (mov r0, r0)
   13c94:	b	13ca4 <__assert_fail@plt+0x2d48>
   13c98:	nop			; (mov r0, r0)
   13c9c:	b	13ca4 <__assert_fail@plt+0x2d48>
   13ca0:	nop			; (mov r0, r0)
   13ca4:	ldr	r3, [fp, #4]
   13ca8:	cmp	r3, #2
   13cac:	bne	13cc4 <__assert_fail@plt+0x2d68>
   13cb0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13cb4:	cmp	r3, #0
   13cb8:	beq	13cc4 <__assert_fail@plt+0x2d68>
   13cbc:	mov	r3, #4
   13cc0:	str	r3, [fp, #4]
   13cc4:	ldr	r3, [fp, #8]
   13cc8:	bic	r3, r3, #2
   13ccc:	ldr	r2, [fp, #20]
   13cd0:	str	r2, [sp, #16]
   13cd4:	ldr	r2, [fp, #16]
   13cd8:	str	r2, [sp, #12]
   13cdc:	mov	r2, #0
   13ce0:	str	r2, [sp, #8]
   13ce4:	str	r3, [sp, #4]
   13ce8:	ldr	r3, [fp, #4]
   13cec:	str	r3, [sp]
   13cf0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13cf4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13cf8:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13cfc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13d00:	bl	12668 <__assert_fail@plt+0x170c>
   13d04:	mov	r3, r0
   13d08:	mov	r0, r3
   13d0c:	sub	sp, fp, #8
   13d10:	pop	{r4, fp, pc}
   13d14:	push	{fp, lr}
   13d18:	add	fp, sp, #4
   13d1c:	sub	sp, sp, #56	; 0x38
   13d20:	str	r0, [fp, #-24]	; 0xffffffe8
   13d24:	str	r1, [fp, #-28]	; 0xffffffe4
   13d28:	str	r2, [fp, #-32]	; 0xffffffe0
   13d2c:	str	r3, [fp, #-36]	; 0xffffffdc
   13d30:	ldr	r3, [fp, #4]
   13d34:	cmp	r3, #0
   13d38:	beq	13d44 <__assert_fail@plt+0x2de8>
   13d3c:	ldr	r3, [fp, #4]
   13d40:	b	13d48 <__assert_fail@plt+0x2dec>
   13d44:	ldr	r3, [pc, #132]	; 13dd0 <__assert_fail@plt+0x2e74>
   13d48:	str	r3, [fp, #-8]
   13d4c:	bl	10e9c <__errno_location@plt>
   13d50:	mov	r3, r0
   13d54:	ldr	r3, [r3]
   13d58:	str	r3, [fp, #-12]
   13d5c:	ldr	r3, [fp, #-8]
   13d60:	ldr	r3, [r3]
   13d64:	ldr	r2, [fp, #-8]
   13d68:	ldr	r2, [r2, #4]
   13d6c:	ldr	r1, [fp, #-8]
   13d70:	add	r1, r1, #8
   13d74:	ldr	r0, [fp, #-8]
   13d78:	ldr	r0, [r0, #40]	; 0x28
   13d7c:	ldr	ip, [fp, #-8]
   13d80:	ldr	ip, [ip, #44]	; 0x2c
   13d84:	str	ip, [sp, #16]
   13d88:	str	r0, [sp, #12]
   13d8c:	str	r1, [sp, #8]
   13d90:	str	r2, [sp, #4]
   13d94:	str	r3, [sp]
   13d98:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13d9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13da0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13da4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13da8:	bl	12668 <__assert_fail@plt+0x170c>
   13dac:	str	r0, [fp, #-16]
   13db0:	bl	10e9c <__errno_location@plt>
   13db4:	mov	r2, r0
   13db8:	ldr	r3, [fp, #-12]
   13dbc:	str	r3, [r2]
   13dc0:	ldr	r3, [fp, #-16]
   13dc4:	mov	r0, r3
   13dc8:	sub	sp, fp, #4
   13dcc:	pop	{fp, pc}
   13dd0:	andeq	r9, r2, r8, ror r1
   13dd4:	push	{fp, lr}
   13dd8:	add	fp, sp, #4
   13ddc:	sub	sp, sp, #16
   13de0:	str	r0, [fp, #-8]
   13de4:	str	r1, [fp, #-12]
   13de8:	str	r2, [fp, #-16]
   13dec:	ldr	r3, [fp, #-16]
   13df0:	mov	r2, #0
   13df4:	ldr	r1, [fp, #-12]
   13df8:	ldr	r0, [fp, #-8]
   13dfc:	bl	13e10 <__assert_fail@plt+0x2eb4>
   13e00:	mov	r3, r0
   13e04:	mov	r0, r3
   13e08:	sub	sp, fp, #4
   13e0c:	pop	{fp, pc}
   13e10:	push	{fp, lr}
   13e14:	add	fp, sp, #4
   13e18:	sub	sp, sp, #64	; 0x40
   13e1c:	str	r0, [fp, #-32]	; 0xffffffe0
   13e20:	str	r1, [fp, #-36]	; 0xffffffdc
   13e24:	str	r2, [fp, #-40]	; 0xffffffd8
   13e28:	str	r3, [fp, #-44]	; 0xffffffd4
   13e2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13e30:	cmp	r3, #0
   13e34:	beq	13e40 <__assert_fail@plt+0x2ee4>
   13e38:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13e3c:	b	13e44 <__assert_fail@plt+0x2ee8>
   13e40:	ldr	r3, [pc, #292]	; 13f6c <__assert_fail@plt+0x3010>
   13e44:	str	r3, [fp, #-8]
   13e48:	bl	10e9c <__errno_location@plt>
   13e4c:	mov	r3, r0
   13e50:	ldr	r3, [r3]
   13e54:	str	r3, [fp, #-12]
   13e58:	ldr	r3, [fp, #-8]
   13e5c:	ldr	r3, [r3, #4]
   13e60:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13e64:	cmp	r2, #0
   13e68:	moveq	r2, #1
   13e6c:	movne	r2, #0
   13e70:	uxtb	r2, r2
   13e74:	orr	r3, r3, r2
   13e78:	str	r3, [fp, #-16]
   13e7c:	ldr	r3, [fp, #-8]
   13e80:	ldr	r3, [r3]
   13e84:	ldr	r2, [fp, #-8]
   13e88:	add	r2, r2, #8
   13e8c:	ldr	r1, [fp, #-8]
   13e90:	ldr	r1, [r1, #40]	; 0x28
   13e94:	ldr	r0, [fp, #-8]
   13e98:	ldr	r0, [r0, #44]	; 0x2c
   13e9c:	str	r0, [sp, #16]
   13ea0:	str	r1, [sp, #12]
   13ea4:	str	r2, [sp, #8]
   13ea8:	ldr	r2, [fp, #-16]
   13eac:	str	r2, [sp, #4]
   13eb0:	str	r3, [sp]
   13eb4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13eb8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13ebc:	mov	r1, #0
   13ec0:	mov	r0, #0
   13ec4:	bl	12668 <__assert_fail@plt+0x170c>
   13ec8:	mov	r3, r0
   13ecc:	add	r3, r3, #1
   13ed0:	str	r3, [fp, #-20]	; 0xffffffec
   13ed4:	ldr	r0, [fp, #-20]	; 0xffffffec
   13ed8:	bl	1510c <__assert_fail@plt+0x41b0>
   13edc:	mov	r3, r0
   13ee0:	str	r3, [fp, #-24]	; 0xffffffe8
   13ee4:	ldr	r3, [fp, #-8]
   13ee8:	ldr	r3, [r3]
   13eec:	ldr	r2, [fp, #-8]
   13ef0:	add	r2, r2, #8
   13ef4:	ldr	r1, [fp, #-8]
   13ef8:	ldr	r1, [r1, #40]	; 0x28
   13efc:	ldr	r0, [fp, #-8]
   13f00:	ldr	r0, [r0, #44]	; 0x2c
   13f04:	str	r0, [sp, #16]
   13f08:	str	r1, [sp, #12]
   13f0c:	str	r2, [sp, #8]
   13f10:	ldr	r2, [fp, #-16]
   13f14:	str	r2, [sp, #4]
   13f18:	str	r3, [sp]
   13f1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13f20:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f24:	ldr	r1, [fp, #-20]	; 0xffffffec
   13f28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13f2c:	bl	12668 <__assert_fail@plt+0x170c>
   13f30:	bl	10e9c <__errno_location@plt>
   13f34:	mov	r2, r0
   13f38:	ldr	r3, [fp, #-12]
   13f3c:	str	r3, [r2]
   13f40:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13f44:	cmp	r3, #0
   13f48:	beq	13f5c <__assert_fail@plt+0x3000>
   13f4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f50:	sub	r2, r3, #1
   13f54:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13f58:	str	r2, [r3]
   13f5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f60:	mov	r0, r3
   13f64:	sub	sp, fp, #4
   13f68:	pop	{fp, pc}
   13f6c:	andeq	r9, r2, r8, ror r1
   13f70:	push	{fp, lr}
   13f74:	add	fp, sp, #4
   13f78:	sub	sp, sp, #8
   13f7c:	ldr	r3, [pc, #196]	; 14048 <__assert_fail@plt+0x30ec>
   13f80:	ldr	r3, [r3]
   13f84:	str	r3, [fp, #-12]
   13f88:	mov	r3, #1
   13f8c:	str	r3, [fp, #-8]
   13f90:	b	13fbc <__assert_fail@plt+0x3060>
   13f94:	ldr	r3, [fp, #-8]
   13f98:	lsl	r3, r3, #3
   13f9c:	ldr	r2, [fp, #-12]
   13fa0:	add	r3, r2, r3
   13fa4:	ldr	r3, [r3, #4]
   13fa8:	mov	r0, r3
   13fac:	bl	16988 <__assert_fail@plt+0x5a2c>
   13fb0:	ldr	r3, [fp, #-8]
   13fb4:	add	r3, r3, #1
   13fb8:	str	r3, [fp, #-8]
   13fbc:	ldr	r3, [pc, #136]	; 1404c <__assert_fail@plt+0x30f0>
   13fc0:	ldr	r3, [r3]
   13fc4:	ldr	r2, [fp, #-8]
   13fc8:	cmp	r2, r3
   13fcc:	blt	13f94 <__assert_fail@plt+0x3038>
   13fd0:	ldr	r3, [fp, #-12]
   13fd4:	ldr	r3, [r3, #4]
   13fd8:	ldr	r2, [pc, #112]	; 14050 <__assert_fail@plt+0x30f4>
   13fdc:	cmp	r3, r2
   13fe0:	beq	1400c <__assert_fail@plt+0x30b0>
   13fe4:	ldr	r3, [fp, #-12]
   13fe8:	ldr	r3, [r3, #4]
   13fec:	mov	r0, r3
   13ff0:	bl	16988 <__assert_fail@plt+0x5a2c>
   13ff4:	ldr	r3, [pc, #88]	; 14054 <__assert_fail@plt+0x30f8>
   13ff8:	mov	r2, #256	; 0x100
   13ffc:	str	r2, [r3]
   14000:	ldr	r3, [pc, #76]	; 14054 <__assert_fail@plt+0x30f8>
   14004:	ldr	r2, [pc, #68]	; 14050 <__assert_fail@plt+0x30f4>
   14008:	str	r2, [r3, #4]
   1400c:	ldr	r3, [fp, #-12]
   14010:	ldr	r2, [pc, #60]	; 14054 <__assert_fail@plt+0x30f8>
   14014:	cmp	r3, r2
   14018:	beq	14030 <__assert_fail@plt+0x30d4>
   1401c:	ldr	r0, [fp, #-12]
   14020:	bl	16988 <__assert_fail@plt+0x5a2c>
   14024:	ldr	r3, [pc, #28]	; 14048 <__assert_fail@plt+0x30ec>
   14028:	ldr	r2, [pc, #36]	; 14054 <__assert_fail@plt+0x30f8>
   1402c:	str	r2, [r3]
   14030:	ldr	r3, [pc, #20]	; 1404c <__assert_fail@plt+0x30f0>
   14034:	mov	r2, #1
   14038:	str	r2, [r3]
   1403c:	nop			; (mov r0, r0)
   14040:	sub	sp, fp, #4
   14044:	pop	{fp, pc}
   14048:	andeq	r9, r2, r4, lsl #2
   1404c:	strdeq	r9, [r2], -r8
   14050:	andeq	r9, r2, r8, lsr #3
   14054:	strdeq	r9, [r2], -ip
   14058:	push	{r4, fp, lr}
   1405c:	add	fp, sp, #8
   14060:	sub	sp, sp, #84	; 0x54
   14064:	str	r0, [fp, #-56]	; 0xffffffc8
   14068:	str	r1, [fp, #-60]	; 0xffffffc4
   1406c:	str	r2, [fp, #-64]	; 0xffffffc0
   14070:	str	r3, [fp, #-68]	; 0xffffffbc
   14074:	bl	10e9c <__errno_location@plt>
   14078:	mov	r3, r0
   1407c:	ldr	r3, [r3]
   14080:	str	r3, [fp, #-24]	; 0xffffffe8
   14084:	ldr	r3, [pc, #640]	; 1430c <__assert_fail@plt+0x33b0>
   14088:	ldr	r3, [r3]
   1408c:	str	r3, [fp, #-16]
   14090:	mvn	r3, #-2147483648	; 0x80000000
   14094:	str	r3, [fp, #-28]	; 0xffffffe4
   14098:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1409c:	cmp	r3, #0
   140a0:	blt	140b4 <__assert_fail@plt+0x3158>
   140a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   140a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   140ac:	cmp	r2, r3
   140b0:	blt	140b8 <__assert_fail@plt+0x315c>
   140b4:	bl	10f44 <abort@plt>
   140b8:	ldr	r3, [pc, #592]	; 14310 <__assert_fail@plt+0x33b4>
   140bc:	ldr	r2, [r3]
   140c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   140c4:	cmp	r2, r3
   140c8:	bgt	1419c <__assert_fail@plt+0x3240>
   140cc:	ldr	r3, [fp, #-16]
   140d0:	ldr	r2, [pc, #572]	; 14314 <__assert_fail@plt+0x33b8>
   140d4:	cmp	r3, r2
   140d8:	moveq	r3, #1
   140dc:	movne	r3, #0
   140e0:	strb	r3, [fp, #-29]	; 0xffffffe3
   140e4:	ldr	r3, [pc, #548]	; 14310 <__assert_fail@plt+0x33b4>
   140e8:	ldr	r3, [r3]
   140ec:	str	r3, [fp, #-48]	; 0xffffffd0
   140f0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   140f4:	cmp	r3, #0
   140f8:	beq	14104 <__assert_fail@plt+0x31a8>
   140fc:	mov	r0, #0
   14100:	b	14108 <__assert_fail@plt+0x31ac>
   14104:	ldr	r0, [fp, #-16]
   14108:	ldr	r3, [pc, #512]	; 14310 <__assert_fail@plt+0x33b4>
   1410c:	ldr	r3, [r3]
   14110:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14114:	sub	r3, r2, r3
   14118:	add	r2, r3, #1
   1411c:	sub	r1, fp, #48	; 0x30
   14120:	mov	r3, #8
   14124:	str	r3, [sp]
   14128:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1412c:	bl	1542c <__assert_fail@plt+0x44d0>
   14130:	str	r0, [fp, #-16]
   14134:	ldr	r2, [pc, #464]	; 1430c <__assert_fail@plt+0x33b0>
   14138:	ldr	r3, [fp, #-16]
   1413c:	str	r3, [r2]
   14140:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   14144:	cmp	r3, #0
   14148:	beq	1415c <__assert_fail@plt+0x3200>
   1414c:	ldr	r3, [fp, #-16]
   14150:	ldr	r2, [pc, #444]	; 14314 <__assert_fail@plt+0x33b8>
   14154:	ldm	r2, {r0, r1}
   14158:	stm	r3, {r0, r1}
   1415c:	ldr	r3, [pc, #428]	; 14310 <__assert_fail@plt+0x33b4>
   14160:	ldr	r3, [r3]
   14164:	lsl	r3, r3, #3
   14168:	ldr	r2, [fp, #-16]
   1416c:	add	r0, r2, r3
   14170:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14174:	ldr	r3, [pc, #404]	; 14310 <__assert_fail@plt+0x33b4>
   14178:	ldr	r3, [r3]
   1417c:	sub	r3, r2, r3
   14180:	lsl	r3, r3, #3
   14184:	mov	r2, r3
   14188:	mov	r1, #0
   1418c:	bl	10eb4 <memset@plt>
   14190:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14194:	ldr	r2, [pc, #372]	; 14310 <__assert_fail@plt+0x33b4>
   14198:	str	r3, [r2]
   1419c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   141a0:	lsl	r3, r3, #3
   141a4:	ldr	r2, [fp, #-16]
   141a8:	add	r3, r2, r3
   141ac:	ldr	r3, [r3]
   141b0:	str	r3, [fp, #-36]	; 0xffffffdc
   141b4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   141b8:	lsl	r3, r3, #3
   141bc:	ldr	r2, [fp, #-16]
   141c0:	add	r3, r2, r3
   141c4:	ldr	r3, [r3, #4]
   141c8:	str	r3, [fp, #-20]	; 0xffffffec
   141cc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   141d0:	ldr	r3, [r3, #4]
   141d4:	orr	r3, r3, #1
   141d8:	str	r3, [fp, #-40]	; 0xffffffd8
   141dc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   141e0:	ldr	r3, [r3]
   141e4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   141e8:	add	r2, r2, #8
   141ec:	ldr	r1, [fp, #-68]	; 0xffffffbc
   141f0:	ldr	r1, [r1, #40]	; 0x28
   141f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   141f8:	ldr	r0, [r0, #44]	; 0x2c
   141fc:	str	r0, [sp, #16]
   14200:	str	r1, [sp, #12]
   14204:	str	r2, [sp, #8]
   14208:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1420c:	str	r2, [sp, #4]
   14210:	str	r3, [sp]
   14214:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14218:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1421c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14220:	ldr	r0, [fp, #-20]	; 0xffffffec
   14224:	bl	12668 <__assert_fail@plt+0x170c>
   14228:	str	r0, [fp, #-44]	; 0xffffffd4
   1422c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14230:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14234:	cmp	r2, r3
   14238:	bhi	142ec <__assert_fail@plt+0x3390>
   1423c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14240:	lsl	r3, r3, #3
   14244:	ldr	r2, [fp, #-16]
   14248:	add	r3, r2, r3
   1424c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14250:	add	r2, r2, #1
   14254:	str	r2, [fp, #-36]	; 0xffffffdc
   14258:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1425c:	str	r2, [r3]
   14260:	ldr	r3, [fp, #-20]	; 0xffffffec
   14264:	ldr	r2, [pc, #172]	; 14318 <__assert_fail@plt+0x33bc>
   14268:	cmp	r3, r2
   1426c:	beq	14278 <__assert_fail@plt+0x331c>
   14270:	ldr	r0, [fp, #-20]	; 0xffffffec
   14274:	bl	16988 <__assert_fail@plt+0x5a2c>
   14278:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1427c:	lsl	r3, r3, #3
   14280:	ldr	r2, [fp, #-16]
   14284:	add	r4, r2, r3
   14288:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1428c:	bl	1510c <__assert_fail@plt+0x41b0>
   14290:	mov	r3, r0
   14294:	str	r3, [fp, #-20]	; 0xffffffec
   14298:	ldr	r3, [fp, #-20]	; 0xffffffec
   1429c:	str	r3, [r4, #4]
   142a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   142a4:	ldr	r3, [r3]
   142a8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   142ac:	add	r2, r2, #8
   142b0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   142b4:	ldr	r1, [r1, #40]	; 0x28
   142b8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   142bc:	ldr	r0, [r0, #44]	; 0x2c
   142c0:	str	r0, [sp, #16]
   142c4:	str	r1, [sp, #12]
   142c8:	str	r2, [sp, #8]
   142cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   142d0:	str	r2, [sp, #4]
   142d4:	str	r3, [sp]
   142d8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   142dc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   142e0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   142e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   142e8:	bl	12668 <__assert_fail@plt+0x170c>
   142ec:	bl	10e9c <__errno_location@plt>
   142f0:	mov	r2, r0
   142f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142f8:	str	r3, [r2]
   142fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14300:	mov	r0, r3
   14304:	sub	sp, fp, #8
   14308:	pop	{r4, fp, pc}
   1430c:	andeq	r9, r2, r4, lsl #2
   14310:	strdeq	r9, [r2], -r8
   14314:	strdeq	r9, [r2], -ip
   14318:	andeq	r9, r2, r8, lsr #3
   1431c:	push	{fp, lr}
   14320:	add	fp, sp, #4
   14324:	sub	sp, sp, #8
   14328:	str	r0, [fp, #-8]
   1432c:	str	r1, [fp, #-12]
   14330:	ldr	r3, [pc, #28]	; 14354 <__assert_fail@plt+0x33f8>
   14334:	mvn	r2, #0
   14338:	ldr	r1, [fp, #-12]
   1433c:	ldr	r0, [fp, #-8]
   14340:	bl	14058 <__assert_fail@plt+0x30fc>
   14344:	mov	r3, r0
   14348:	mov	r0, r3
   1434c:	sub	sp, fp, #4
   14350:	pop	{fp, pc}
   14354:	andeq	r9, r2, r8, ror r1
   14358:	push	{fp, lr}
   1435c:	add	fp, sp, #4
   14360:	sub	sp, sp, #16
   14364:	str	r0, [fp, #-8]
   14368:	str	r1, [fp, #-12]
   1436c:	str	r2, [fp, #-16]
   14370:	ldr	r3, [pc, #28]	; 14394 <__assert_fail@plt+0x3438>
   14374:	ldr	r2, [fp, #-16]
   14378:	ldr	r1, [fp, #-12]
   1437c:	ldr	r0, [fp, #-8]
   14380:	bl	14058 <__assert_fail@plt+0x30fc>
   14384:	mov	r3, r0
   14388:	mov	r0, r3
   1438c:	sub	sp, fp, #4
   14390:	pop	{fp, pc}
   14394:	andeq	r9, r2, r8, ror r1
   14398:	push	{fp, lr}
   1439c:	add	fp, sp, #4
   143a0:	sub	sp, sp, #8
   143a4:	str	r0, [fp, #-8]
   143a8:	ldr	r1, [fp, #-8]
   143ac:	mov	r0, #0
   143b0:	bl	1431c <__assert_fail@plt+0x33c0>
   143b4:	mov	r3, r0
   143b8:	mov	r0, r3
   143bc:	sub	sp, fp, #4
   143c0:	pop	{fp, pc}
   143c4:	push	{fp, lr}
   143c8:	add	fp, sp, #4
   143cc:	sub	sp, sp, #8
   143d0:	str	r0, [fp, #-8]
   143d4:	str	r1, [fp, #-12]
   143d8:	ldr	r2, [fp, #-12]
   143dc:	ldr	r1, [fp, #-8]
   143e0:	mov	r0, #0
   143e4:	bl	14358 <__assert_fail@plt+0x33fc>
   143e8:	mov	r3, r0
   143ec:	mov	r0, r3
   143f0:	sub	sp, fp, #4
   143f4:	pop	{fp, pc}
   143f8:	push	{fp, lr}
   143fc:	add	fp, sp, #4
   14400:	sub	sp, sp, #64	; 0x40
   14404:	str	r0, [fp, #-56]	; 0xffffffc8
   14408:	str	r1, [fp, #-60]	; 0xffffffc4
   1440c:	str	r2, [fp, #-64]	; 0xffffffc0
   14410:	sub	r3, fp, #52	; 0x34
   14414:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14418:	mov	r0, r3
   1441c:	bl	12504 <__assert_fail@plt+0x15a8>
   14420:	sub	r3, fp, #52	; 0x34
   14424:	mvn	r2, #0
   14428:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1442c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14430:	bl	14058 <__assert_fail@plt+0x30fc>
   14434:	mov	r3, r0
   14438:	mov	r0, r3
   1443c:	sub	sp, fp, #4
   14440:	pop	{fp, pc}
   14444:	push	{fp, lr}
   14448:	add	fp, sp, #4
   1444c:	sub	sp, sp, #64	; 0x40
   14450:	str	r0, [fp, #-56]	; 0xffffffc8
   14454:	str	r1, [fp, #-60]	; 0xffffffc4
   14458:	str	r2, [fp, #-64]	; 0xffffffc0
   1445c:	str	r3, [fp, #-68]	; 0xffffffbc
   14460:	sub	r3, fp, #52	; 0x34
   14464:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14468:	mov	r0, r3
   1446c:	bl	12504 <__assert_fail@plt+0x15a8>
   14470:	sub	r3, fp, #52	; 0x34
   14474:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14478:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1447c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14480:	bl	14058 <__assert_fail@plt+0x30fc>
   14484:	mov	r3, r0
   14488:	mov	r0, r3
   1448c:	sub	sp, fp, #4
   14490:	pop	{fp, pc}
   14494:	push	{fp, lr}
   14498:	add	fp, sp, #4
   1449c:	sub	sp, sp, #8
   144a0:	str	r0, [fp, #-8]
   144a4:	str	r1, [fp, #-12]
   144a8:	ldr	r2, [fp, #-12]
   144ac:	ldr	r1, [fp, #-8]
   144b0:	mov	r0, #0
   144b4:	bl	143f8 <__assert_fail@plt+0x349c>
   144b8:	mov	r3, r0
   144bc:	mov	r0, r3
   144c0:	sub	sp, fp, #4
   144c4:	pop	{fp, pc}
   144c8:	push	{fp, lr}
   144cc:	add	fp, sp, #4
   144d0:	sub	sp, sp, #16
   144d4:	str	r0, [fp, #-8]
   144d8:	str	r1, [fp, #-12]
   144dc:	str	r2, [fp, #-16]
   144e0:	ldr	r3, [fp, #-16]
   144e4:	ldr	r2, [fp, #-12]
   144e8:	ldr	r1, [fp, #-8]
   144ec:	mov	r0, #0
   144f0:	bl	14444 <__assert_fail@plt+0x34e8>
   144f4:	mov	r3, r0
   144f8:	mov	r0, r3
   144fc:	sub	sp, fp, #4
   14500:	pop	{fp, pc}
   14504:	push	{fp, lr}
   14508:	add	fp, sp, #4
   1450c:	sub	sp, sp, #64	; 0x40
   14510:	str	r0, [fp, #-56]	; 0xffffffc8
   14514:	str	r1, [fp, #-60]	; 0xffffffc4
   14518:	mov	r3, r2
   1451c:	strb	r3, [fp, #-61]	; 0xffffffc3
   14520:	ldr	r3, [pc, #84]	; 1457c <__assert_fail@plt+0x3620>
   14524:	sub	ip, fp, #52	; 0x34
   14528:	mov	lr, r3
   1452c:	ldm	lr!, {r0, r1, r2, r3}
   14530:	stmia	ip!, {r0, r1, r2, r3}
   14534:	ldm	lr!, {r0, r1, r2, r3}
   14538:	stmia	ip!, {r0, r1, r2, r3}
   1453c:	ldm	lr, {r0, r1, r2, r3}
   14540:	stm	ip, {r0, r1, r2, r3}
   14544:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   14548:	sub	r3, fp, #52	; 0x34
   1454c:	mov	r2, #1
   14550:	mov	r0, r3
   14554:	bl	12370 <__assert_fail@plt+0x1414>
   14558:	sub	r3, fp, #52	; 0x34
   1455c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14560:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14564:	mov	r0, #0
   14568:	bl	14058 <__assert_fail@plt+0x30fc>
   1456c:	mov	r3, r0
   14570:	mov	r0, r3
   14574:	sub	sp, fp, #4
   14578:	pop	{fp, pc}
   1457c:	andeq	r9, r2, r8, ror r1
   14580:	push	{fp, lr}
   14584:	add	fp, sp, #4
   14588:	sub	sp, sp, #8
   1458c:	str	r0, [fp, #-8]
   14590:	mov	r3, r1
   14594:	strb	r3, [fp, #-9]
   14598:	ldrb	r3, [fp, #-9]
   1459c:	mov	r2, r3
   145a0:	mvn	r1, #0
   145a4:	ldr	r0, [fp, #-8]
   145a8:	bl	14504 <__assert_fail@plt+0x35a8>
   145ac:	mov	r3, r0
   145b0:	mov	r0, r3
   145b4:	sub	sp, fp, #4
   145b8:	pop	{fp, pc}
   145bc:	push	{fp, lr}
   145c0:	add	fp, sp, #4
   145c4:	sub	sp, sp, #8
   145c8:	str	r0, [fp, #-8]
   145cc:	mov	r1, #58	; 0x3a
   145d0:	ldr	r0, [fp, #-8]
   145d4:	bl	14580 <__assert_fail@plt+0x3624>
   145d8:	mov	r3, r0
   145dc:	mov	r0, r3
   145e0:	sub	sp, fp, #4
   145e4:	pop	{fp, pc}
   145e8:	push	{fp, lr}
   145ec:	add	fp, sp, #4
   145f0:	sub	sp, sp, #8
   145f4:	str	r0, [fp, #-8]
   145f8:	str	r1, [fp, #-12]
   145fc:	mov	r2, #58	; 0x3a
   14600:	ldr	r1, [fp, #-12]
   14604:	ldr	r0, [fp, #-8]
   14608:	bl	14504 <__assert_fail@plt+0x35a8>
   1460c:	mov	r3, r0
   14610:	mov	r0, r3
   14614:	sub	sp, fp, #4
   14618:	pop	{fp, pc}
   1461c:	push	{fp, lr}
   14620:	add	fp, sp, #4
   14624:	sub	sp, sp, #112	; 0x70
   14628:	str	r0, [fp, #-56]	; 0xffffffc8
   1462c:	str	r1, [fp, #-60]	; 0xffffffc4
   14630:	str	r2, [fp, #-64]	; 0xffffffc0
   14634:	sub	r3, fp, #116	; 0x74
   14638:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1463c:	mov	r0, r3
   14640:	bl	12504 <__assert_fail@plt+0x15a8>
   14644:	sub	ip, fp, #52	; 0x34
   14648:	sub	lr, fp, #116	; 0x74
   1464c:	ldm	lr!, {r0, r1, r2, r3}
   14650:	stmia	ip!, {r0, r1, r2, r3}
   14654:	ldm	lr!, {r0, r1, r2, r3}
   14658:	stmia	ip!, {r0, r1, r2, r3}
   1465c:	ldm	lr, {r0, r1, r2, r3}
   14660:	stm	ip, {r0, r1, r2, r3}
   14664:	sub	r3, fp, #52	; 0x34
   14668:	mov	r2, #1
   1466c:	mov	r1, #58	; 0x3a
   14670:	mov	r0, r3
   14674:	bl	12370 <__assert_fail@plt+0x1414>
   14678:	sub	r3, fp, #52	; 0x34
   1467c:	mvn	r2, #0
   14680:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14684:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14688:	bl	14058 <__assert_fail@plt+0x30fc>
   1468c:	mov	r3, r0
   14690:	mov	r0, r3
   14694:	sub	sp, fp, #4
   14698:	pop	{fp, pc}
   1469c:	push	{fp, lr}
   146a0:	add	fp, sp, #4
   146a4:	sub	sp, sp, #24
   146a8:	str	r0, [fp, #-8]
   146ac:	str	r1, [fp, #-12]
   146b0:	str	r2, [fp, #-16]
   146b4:	str	r3, [fp, #-20]	; 0xffffffec
   146b8:	mvn	r3, #0
   146bc:	str	r3, [sp]
   146c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146c4:	ldr	r2, [fp, #-16]
   146c8:	ldr	r1, [fp, #-12]
   146cc:	ldr	r0, [fp, #-8]
   146d0:	bl	146e4 <__assert_fail@plt+0x3788>
   146d4:	mov	r3, r0
   146d8:	mov	r0, r3
   146dc:	sub	sp, fp, #4
   146e0:	pop	{fp, pc}
   146e4:	push	{fp, lr}
   146e8:	add	fp, sp, #4
   146ec:	sub	sp, sp, #64	; 0x40
   146f0:	str	r0, [fp, #-56]	; 0xffffffc8
   146f4:	str	r1, [fp, #-60]	; 0xffffffc4
   146f8:	str	r2, [fp, #-64]	; 0xffffffc0
   146fc:	str	r3, [fp, #-68]	; 0xffffffbc
   14700:	ldr	r3, [pc, #84]	; 1475c <__assert_fail@plt+0x3800>
   14704:	sub	ip, fp, #52	; 0x34
   14708:	mov	lr, r3
   1470c:	ldm	lr!, {r0, r1, r2, r3}
   14710:	stmia	ip!, {r0, r1, r2, r3}
   14714:	ldm	lr!, {r0, r1, r2, r3}
   14718:	stmia	ip!, {r0, r1, r2, r3}
   1471c:	ldm	lr, {r0, r1, r2, r3}
   14720:	stm	ip, {r0, r1, r2, r3}
   14724:	sub	r3, fp, #52	; 0x34
   14728:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1472c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14730:	mov	r0, r3
   14734:	bl	12488 <__assert_fail@plt+0x152c>
   14738:	sub	r3, fp, #52	; 0x34
   1473c:	ldr	r2, [fp, #4]
   14740:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14744:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14748:	bl	14058 <__assert_fail@plt+0x30fc>
   1474c:	mov	r3, r0
   14750:	mov	r0, r3
   14754:	sub	sp, fp, #4
   14758:	pop	{fp, pc}
   1475c:	andeq	r9, r2, r8, ror r1
   14760:	push	{fp, lr}
   14764:	add	fp, sp, #4
   14768:	sub	sp, sp, #16
   1476c:	str	r0, [fp, #-8]
   14770:	str	r1, [fp, #-12]
   14774:	str	r2, [fp, #-16]
   14778:	ldr	r3, [fp, #-16]
   1477c:	ldr	r2, [fp, #-12]
   14780:	ldr	r1, [fp, #-8]
   14784:	mov	r0, #0
   14788:	bl	1469c <__assert_fail@plt+0x3740>
   1478c:	mov	r3, r0
   14790:	mov	r0, r3
   14794:	sub	sp, fp, #4
   14798:	pop	{fp, pc}
   1479c:	push	{fp, lr}
   147a0:	add	fp, sp, #4
   147a4:	sub	sp, sp, #24
   147a8:	str	r0, [fp, #-8]
   147ac:	str	r1, [fp, #-12]
   147b0:	str	r2, [fp, #-16]
   147b4:	str	r3, [fp, #-20]	; 0xffffffec
   147b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   147bc:	str	r3, [sp]
   147c0:	ldr	r3, [fp, #-16]
   147c4:	ldr	r2, [fp, #-12]
   147c8:	ldr	r1, [fp, #-8]
   147cc:	mov	r0, #0
   147d0:	bl	146e4 <__assert_fail@plt+0x3788>
   147d4:	mov	r3, r0
   147d8:	mov	r0, r3
   147dc:	sub	sp, fp, #4
   147e0:	pop	{fp, pc}
   147e4:	push	{fp, lr}
   147e8:	add	fp, sp, #4
   147ec:	sub	sp, sp, #16
   147f0:	str	r0, [fp, #-8]
   147f4:	str	r1, [fp, #-12]
   147f8:	str	r2, [fp, #-16]
   147fc:	ldr	r3, [pc, #28]	; 14820 <__assert_fail@plt+0x38c4>
   14800:	ldr	r2, [fp, #-16]
   14804:	ldr	r1, [fp, #-12]
   14808:	ldr	r0, [fp, #-8]
   1480c:	bl	14058 <__assert_fail@plt+0x30fc>
   14810:	mov	r3, r0
   14814:	mov	r0, r3
   14818:	sub	sp, fp, #4
   1481c:	pop	{fp, pc}
   14820:	andeq	r9, r2, r8, lsl #2
   14824:	push	{fp, lr}
   14828:	add	fp, sp, #4
   1482c:	sub	sp, sp, #8
   14830:	str	r0, [fp, #-8]
   14834:	str	r1, [fp, #-12]
   14838:	ldr	r2, [fp, #-12]
   1483c:	ldr	r1, [fp, #-8]
   14840:	mov	r0, #0
   14844:	bl	147e4 <__assert_fail@plt+0x3888>
   14848:	mov	r3, r0
   1484c:	mov	r0, r3
   14850:	sub	sp, fp, #4
   14854:	pop	{fp, pc}
   14858:	push	{fp, lr}
   1485c:	add	fp, sp, #4
   14860:	sub	sp, sp, #8
   14864:	str	r0, [fp, #-8]
   14868:	str	r1, [fp, #-12]
   1486c:	mvn	r2, #0
   14870:	ldr	r1, [fp, #-12]
   14874:	ldr	r0, [fp, #-8]
   14878:	bl	147e4 <__assert_fail@plt+0x3888>
   1487c:	mov	r3, r0
   14880:	mov	r0, r3
   14884:	sub	sp, fp, #4
   14888:	pop	{fp, pc}
   1488c:	push	{fp, lr}
   14890:	add	fp, sp, #4
   14894:	sub	sp, sp, #8
   14898:	str	r0, [fp, #-8]
   1489c:	ldr	r1, [fp, #-8]
   148a0:	mov	r0, #0
   148a4:	bl	14858 <__assert_fail@plt+0x38fc>
   148a8:	mov	r3, r0
   148ac:	mov	r0, r3
   148b0:	sub	sp, fp, #4
   148b4:	pop	{fp, pc}
   148b8:	push	{r4, r5, r6, r7, fp, lr}
   148bc:	add	fp, sp, #20
   148c0:	sub	sp, sp, #48	; 0x30
   148c4:	str	r0, [fp, #-24]	; 0xffffffe8
   148c8:	str	r1, [fp, #-28]	; 0xffffffe4
   148cc:	str	r2, [fp, #-32]	; 0xffffffe0
   148d0:	str	r3, [fp, #-36]	; 0xffffffdc
   148d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   148d8:	cmp	r3, #0
   148dc:	beq	14900 <__assert_fail@plt+0x39a4>
   148e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   148e4:	str	r3, [sp]
   148e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   148ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   148f0:	ldr	r1, [pc, #1260]	; 14de4 <__assert_fail@plt+0x3e88>
   148f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   148f8:	bl	10e90 <fprintf@plt>
   148fc:	b	14914 <__assert_fail@plt+0x39b8>
   14900:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14904:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14908:	ldr	r1, [pc, #1240]	; 14de8 <__assert_fail@plt+0x3e8c>
   1490c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14910:	bl	10e90 <fprintf@plt>
   14914:	ldr	r0, [pc, #1232]	; 14dec <__assert_fail@plt+0x3e90>
   14918:	bl	10e6c <gettext@plt>
   1491c:	mov	r2, r0
   14920:	ldr	r3, [pc, #1224]	; 14df0 <__assert_fail@plt+0x3e94>
   14924:	ldr	r1, [pc, #1224]	; 14df4 <__assert_fail@plt+0x3e98>
   14928:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1492c:	bl	10e90 <fprintf@plt>
   14930:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14934:	mov	r0, #10
   14938:	bl	10d88 <fputc_unlocked@plt>
   1493c:	ldr	r0, [pc, #1204]	; 14df8 <__assert_fail@plt+0x3e9c>
   14940:	bl	10e6c <gettext@plt>
   14944:	mov	r3, r0
   14948:	ldr	r2, [pc, #1196]	; 14dfc <__assert_fail@plt+0x3ea0>
   1494c:	mov	r1, r3
   14950:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14954:	bl	10e90 <fprintf@plt>
   14958:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1495c:	mov	r0, #10
   14960:	bl	10d88 <fputc_unlocked@plt>
   14964:	ldr	r3, [fp, #8]
   14968:	cmp	r3, #9
   1496c:	ldrls	pc, [pc, r3, lsl #2]
   14970:	b	14d2c <__assert_fail@plt+0x3dd0>
   14974:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14978:	muleq	r1, ip, r9
   1497c:	andeq	r4, r1, r0, asr #19
   14980:	andeq	r4, r1, ip, ror #19
   14984:	andeq	r4, r1, ip, lsr #20
   14988:	andeq	r4, r1, r4, lsl #21
   1498c:	andeq	r4, r1, ip, ror #21
   14990:	andeq	r4, r1, r4, ror #22
   14994:	andeq	r4, r1, ip, ror #23
   14998:	andeq	r4, r1, r4, lsl #25
   1499c:	ldr	r0, [pc, #1116]	; 14e00 <__assert_fail@plt+0x3ea4>
   149a0:	bl	10e6c <gettext@plt>
   149a4:	mov	r1, r0
   149a8:	ldr	r3, [fp, #4]
   149ac:	ldr	r3, [r3]
   149b0:	mov	r2, r3
   149b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   149b8:	bl	10e90 <fprintf@plt>
   149bc:	b	14dd8 <__assert_fail@plt+0x3e7c>
   149c0:	ldr	r0, [pc, #1084]	; 14e04 <__assert_fail@plt+0x3ea8>
   149c4:	bl	10e6c <gettext@plt>
   149c8:	mov	r1, r0
   149cc:	ldr	r3, [fp, #4]
   149d0:	ldr	r2, [r3]
   149d4:	ldr	r3, [fp, #4]
   149d8:	add	r3, r3, #4
   149dc:	ldr	r3, [r3]
   149e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   149e4:	bl	10e90 <fprintf@plt>
   149e8:	b	14dd8 <__assert_fail@plt+0x3e7c>
   149ec:	ldr	r0, [pc, #1044]	; 14e08 <__assert_fail@plt+0x3eac>
   149f0:	bl	10e6c <gettext@plt>
   149f4:	ldr	r3, [fp, #4]
   149f8:	ldr	r2, [r3]
   149fc:	ldr	r3, [fp, #4]
   14a00:	add	r3, r3, #4
   14a04:	ldr	r1, [r3]
   14a08:	ldr	r3, [fp, #4]
   14a0c:	add	r3, r3, #8
   14a10:	ldr	r3, [r3]
   14a14:	str	r3, [sp]
   14a18:	mov	r3, r1
   14a1c:	mov	r1, r0
   14a20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a24:	bl	10e90 <fprintf@plt>
   14a28:	b	14dd8 <__assert_fail@plt+0x3e7c>
   14a2c:	ldr	r0, [pc, #984]	; 14e0c <__assert_fail@plt+0x3eb0>
   14a30:	bl	10e6c <gettext@plt>
   14a34:	mov	ip, r0
   14a38:	ldr	r3, [fp, #4]
   14a3c:	ldr	r1, [r3]
   14a40:	ldr	r3, [fp, #4]
   14a44:	add	r3, r3, #4
   14a48:	ldr	r0, [r3]
   14a4c:	ldr	r3, [fp, #4]
   14a50:	add	r3, r3, #8
   14a54:	ldr	r3, [r3]
   14a58:	ldr	r2, [fp, #4]
   14a5c:	add	r2, r2, #12
   14a60:	ldr	r2, [r2]
   14a64:	str	r2, [sp, #4]
   14a68:	str	r3, [sp]
   14a6c:	mov	r3, r0
   14a70:	mov	r2, r1
   14a74:	mov	r1, ip
   14a78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a7c:	bl	10e90 <fprintf@plt>
   14a80:	b	14dd8 <__assert_fail@plt+0x3e7c>
   14a84:	ldr	r0, [pc, #900]	; 14e10 <__assert_fail@plt+0x3eb4>
   14a88:	bl	10e6c <gettext@plt>
   14a8c:	mov	lr, r0
   14a90:	ldr	r3, [fp, #4]
   14a94:	ldr	r0, [r3]
   14a98:	ldr	r3, [fp, #4]
   14a9c:	add	r3, r3, #4
   14aa0:	ldr	ip, [r3]
   14aa4:	ldr	r3, [fp, #4]
   14aa8:	add	r3, r3, #8
   14aac:	ldr	r3, [r3]
   14ab0:	ldr	r2, [fp, #4]
   14ab4:	add	r2, r2, #12
   14ab8:	ldr	r2, [r2]
   14abc:	ldr	r1, [fp, #4]
   14ac0:	add	r1, r1, #16
   14ac4:	ldr	r1, [r1]
   14ac8:	str	r1, [sp, #8]
   14acc:	str	r2, [sp, #4]
   14ad0:	str	r3, [sp]
   14ad4:	mov	r3, ip
   14ad8:	mov	r2, r0
   14adc:	mov	r1, lr
   14ae0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14ae4:	bl	10e90 <fprintf@plt>
   14ae8:	b	14dd8 <__assert_fail@plt+0x3e7c>
   14aec:	ldr	r0, [pc, #800]	; 14e14 <__assert_fail@plt+0x3eb8>
   14af0:	bl	10e6c <gettext@plt>
   14af4:	mov	r4, r0
   14af8:	ldr	r3, [fp, #4]
   14afc:	ldr	ip, [r3]
   14b00:	ldr	r3, [fp, #4]
   14b04:	add	r3, r3, #4
   14b08:	ldr	lr, [r3]
   14b0c:	ldr	r3, [fp, #4]
   14b10:	add	r3, r3, #8
   14b14:	ldr	r3, [r3]
   14b18:	ldr	r2, [fp, #4]
   14b1c:	add	r2, r2, #12
   14b20:	ldr	r2, [r2]
   14b24:	ldr	r1, [fp, #4]
   14b28:	add	r1, r1, #16
   14b2c:	ldr	r1, [r1]
   14b30:	ldr	r0, [fp, #4]
   14b34:	add	r0, r0, #20
   14b38:	ldr	r0, [r0]
   14b3c:	str	r0, [sp, #12]
   14b40:	str	r1, [sp, #8]
   14b44:	str	r2, [sp, #4]
   14b48:	str	r3, [sp]
   14b4c:	mov	r3, lr
   14b50:	mov	r2, ip
   14b54:	mov	r1, r4
   14b58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14b5c:	bl	10e90 <fprintf@plt>
   14b60:	b	14dd8 <__assert_fail@plt+0x3e7c>
   14b64:	ldr	r0, [pc, #684]	; 14e18 <__assert_fail@plt+0x3ebc>
   14b68:	bl	10e6c <gettext@plt>
   14b6c:	mov	r5, r0
   14b70:	ldr	r3, [fp, #4]
   14b74:	ldr	lr, [r3]
   14b78:	ldr	r3, [fp, #4]
   14b7c:	add	r3, r3, #4
   14b80:	ldr	r4, [r3]
   14b84:	ldr	r3, [fp, #4]
   14b88:	add	r3, r3, #8
   14b8c:	ldr	r3, [r3]
   14b90:	ldr	r2, [fp, #4]
   14b94:	add	r2, r2, #12
   14b98:	ldr	r2, [r2]
   14b9c:	ldr	r1, [fp, #4]
   14ba0:	add	r1, r1, #16
   14ba4:	ldr	r1, [r1]
   14ba8:	ldr	r0, [fp, #4]
   14bac:	add	r0, r0, #20
   14bb0:	ldr	r0, [r0]
   14bb4:	ldr	ip, [fp, #4]
   14bb8:	add	ip, ip, #24
   14bbc:	ldr	ip, [ip]
   14bc0:	str	ip, [sp, #16]
   14bc4:	str	r0, [sp, #12]
   14bc8:	str	r1, [sp, #8]
   14bcc:	str	r2, [sp, #4]
   14bd0:	str	r3, [sp]
   14bd4:	mov	r3, r4
   14bd8:	mov	r2, lr
   14bdc:	mov	r1, r5
   14be0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14be4:	bl	10e90 <fprintf@plt>
   14be8:	b	14dd8 <__assert_fail@plt+0x3e7c>
   14bec:	ldr	r0, [pc, #552]	; 14e1c <__assert_fail@plt+0x3ec0>
   14bf0:	bl	10e6c <gettext@plt>
   14bf4:	mov	r6, r0
   14bf8:	ldr	r3, [fp, #4]
   14bfc:	ldr	r4, [r3]
   14c00:	ldr	r3, [fp, #4]
   14c04:	add	r3, r3, #4
   14c08:	ldr	r5, [r3]
   14c0c:	ldr	r3, [fp, #4]
   14c10:	add	r3, r3, #8
   14c14:	ldr	r3, [r3]
   14c18:	ldr	r2, [fp, #4]
   14c1c:	add	r2, r2, #12
   14c20:	ldr	r2, [r2]
   14c24:	ldr	r1, [fp, #4]
   14c28:	add	r1, r1, #16
   14c2c:	ldr	r1, [r1]
   14c30:	ldr	r0, [fp, #4]
   14c34:	add	r0, r0, #20
   14c38:	ldr	r0, [r0]
   14c3c:	ldr	ip, [fp, #4]
   14c40:	add	ip, ip, #24
   14c44:	ldr	ip, [ip]
   14c48:	ldr	lr, [fp, #4]
   14c4c:	add	lr, lr, #28
   14c50:	ldr	lr, [lr]
   14c54:	str	lr, [sp, #20]
   14c58:	str	ip, [sp, #16]
   14c5c:	str	r0, [sp, #12]
   14c60:	str	r1, [sp, #8]
   14c64:	str	r2, [sp, #4]
   14c68:	str	r3, [sp]
   14c6c:	mov	r3, r5
   14c70:	mov	r2, r4
   14c74:	mov	r1, r6
   14c78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14c7c:	bl	10e90 <fprintf@plt>
   14c80:	b	14dd8 <__assert_fail@plt+0x3e7c>
   14c84:	ldr	r0, [pc, #404]	; 14e20 <__assert_fail@plt+0x3ec4>
   14c88:	bl	10e6c <gettext@plt>
   14c8c:	mov	r7, r0
   14c90:	ldr	r3, [fp, #4]
   14c94:	ldr	r5, [r3]
   14c98:	ldr	r3, [fp, #4]
   14c9c:	add	r3, r3, #4
   14ca0:	ldr	r6, [r3]
   14ca4:	ldr	r3, [fp, #4]
   14ca8:	add	r3, r3, #8
   14cac:	ldr	r3, [r3]
   14cb0:	ldr	r2, [fp, #4]
   14cb4:	add	r2, r2, #12
   14cb8:	ldr	r2, [r2]
   14cbc:	ldr	r1, [fp, #4]
   14cc0:	add	r1, r1, #16
   14cc4:	ldr	r1, [r1]
   14cc8:	ldr	r0, [fp, #4]
   14ccc:	add	r0, r0, #20
   14cd0:	ldr	r0, [r0]
   14cd4:	ldr	ip, [fp, #4]
   14cd8:	add	ip, ip, #24
   14cdc:	ldr	ip, [ip]
   14ce0:	ldr	lr, [fp, #4]
   14ce4:	add	lr, lr, #28
   14ce8:	ldr	lr, [lr]
   14cec:	ldr	r4, [fp, #4]
   14cf0:	add	r4, r4, #32
   14cf4:	ldr	r4, [r4]
   14cf8:	str	r4, [sp, #24]
   14cfc:	str	lr, [sp, #20]
   14d00:	str	ip, [sp, #16]
   14d04:	str	r0, [sp, #12]
   14d08:	str	r1, [sp, #8]
   14d0c:	str	r2, [sp, #4]
   14d10:	str	r3, [sp]
   14d14:	mov	r3, r6
   14d18:	mov	r2, r5
   14d1c:	mov	r1, r7
   14d20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14d24:	bl	10e90 <fprintf@plt>
   14d28:	b	14dd8 <__assert_fail@plt+0x3e7c>
   14d2c:	ldr	r0, [pc, #240]	; 14e24 <__assert_fail@plt+0x3ec8>
   14d30:	bl	10e6c <gettext@plt>
   14d34:	mov	r7, r0
   14d38:	ldr	r3, [fp, #4]
   14d3c:	ldr	r5, [r3]
   14d40:	ldr	r3, [fp, #4]
   14d44:	add	r3, r3, #4
   14d48:	ldr	r6, [r3]
   14d4c:	ldr	r3, [fp, #4]
   14d50:	add	r3, r3, #8
   14d54:	ldr	r3, [r3]
   14d58:	ldr	r2, [fp, #4]
   14d5c:	add	r2, r2, #12
   14d60:	ldr	r2, [r2]
   14d64:	ldr	r1, [fp, #4]
   14d68:	add	r1, r1, #16
   14d6c:	ldr	r1, [r1]
   14d70:	ldr	r0, [fp, #4]
   14d74:	add	r0, r0, #20
   14d78:	ldr	r0, [r0]
   14d7c:	ldr	ip, [fp, #4]
   14d80:	add	ip, ip, #24
   14d84:	ldr	ip, [ip]
   14d88:	ldr	lr, [fp, #4]
   14d8c:	add	lr, lr, #28
   14d90:	ldr	lr, [lr]
   14d94:	ldr	r4, [fp, #4]
   14d98:	add	r4, r4, #32
   14d9c:	ldr	r4, [r4]
   14da0:	str	r4, [sp, #24]
   14da4:	str	lr, [sp, #20]
   14da8:	str	ip, [sp, #16]
   14dac:	str	r0, [sp, #12]
   14db0:	str	r1, [sp, #8]
   14db4:	str	r2, [sp, #4]
   14db8:	str	r3, [sp]
   14dbc:	mov	r3, r6
   14dc0:	mov	r2, r5
   14dc4:	mov	r1, r7
   14dc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14dcc:	bl	10e90 <fprintf@plt>
   14dd0:	b	14dd8 <__assert_fail@plt+0x3e7c>
   14dd4:	nop			; (mov r0, r0)
   14dd8:	nop			; (mov r0, r0)
   14ddc:	sub	sp, fp, #20
   14de0:	pop	{r4, r5, r6, r7, fp, pc}
   14de4:	andeq	r8, r1, r4, asr r0
   14de8:	andeq	r8, r1, r0, rrx
   14dec:	andeq	r8, r1, r8, rrx
   14df0:	andeq	r0, r0, r6, ror #15
   14df4:	andeq	r8, r1, r8, ror r3
   14df8:	andeq	r8, r1, ip, rrx
   14dfc:	andeq	r8, r1, r8, lsl r1
   14e00:	andeq	r8, r1, ip, lsr r1
   14e04:	andeq	r8, r1, ip, asr #2
   14e08:	andeq	r8, r1, r4, ror #2
   14e0c:	andeq	r8, r1, r0, lsl #3
   14e10:	andeq	r8, r1, r0, lsr #3
   14e14:	andeq	r8, r1, r4, asr #3
   14e18:	andeq	r8, r1, ip, ror #3
   14e1c:	andeq	r8, r1, r8, lsl r2
   14e20:	andeq	r8, r1, r8, asr #4
   14e24:	andeq	r8, r1, ip, ror r2
   14e28:	push	{fp, lr}
   14e2c:	add	fp, sp, #4
   14e30:	sub	sp, sp, #32
   14e34:	str	r0, [fp, #-16]
   14e38:	str	r1, [fp, #-20]	; 0xffffffec
   14e3c:	str	r2, [fp, #-24]	; 0xffffffe8
   14e40:	str	r3, [fp, #-28]	; 0xffffffe4
   14e44:	mov	r3, #0
   14e48:	str	r3, [fp, #-8]
   14e4c:	b	14e5c <__assert_fail@plt+0x3f00>
   14e50:	ldr	r3, [fp, #-8]
   14e54:	add	r3, r3, #1
   14e58:	str	r3, [fp, #-8]
   14e5c:	ldr	r3, [fp, #-8]
   14e60:	lsl	r3, r3, #2
   14e64:	ldr	r2, [fp, #4]
   14e68:	add	r3, r2, r3
   14e6c:	ldr	r3, [r3]
   14e70:	cmp	r3, #0
   14e74:	bne	14e50 <__assert_fail@plt+0x3ef4>
   14e78:	ldr	r3, [fp, #-8]
   14e7c:	str	r3, [sp, #4]
   14e80:	ldr	r3, [fp, #4]
   14e84:	str	r3, [sp]
   14e88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14e90:	ldr	r1, [fp, #-20]	; 0xffffffec
   14e94:	ldr	r0, [fp, #-16]
   14e98:	bl	148b8 <__assert_fail@plt+0x395c>
   14e9c:	nop			; (mov r0, r0)
   14ea0:	sub	sp, fp, #4
   14ea4:	pop	{fp, pc}
   14ea8:	push	{fp, lr}
   14eac:	add	fp, sp, #4
   14eb0:	sub	sp, sp, #72	; 0x48
   14eb4:	str	r0, [fp, #-56]	; 0xffffffc8
   14eb8:	str	r1, [fp, #-60]	; 0xffffffc4
   14ebc:	str	r2, [fp, #-64]	; 0xffffffc0
   14ec0:	str	r3, [fp, #-68]	; 0xffffffbc
   14ec4:	mov	r3, #0
   14ec8:	str	r3, [fp, #-8]
   14ecc:	b	14edc <__assert_fail@plt+0x3f80>
   14ed0:	ldr	r3, [fp, #-8]
   14ed4:	add	r3, r3, #1
   14ed8:	str	r3, [fp, #-8]
   14edc:	ldr	r3, [fp, #-8]
   14ee0:	cmp	r3, #9
   14ee4:	bhi	14f28 <__assert_fail@plt+0x3fcc>
   14ee8:	ldr	r3, [fp, #4]
   14eec:	add	r2, r3, #4
   14ef0:	str	r2, [fp, #4]
   14ef4:	ldr	r2, [r3]
   14ef8:	ldr	r3, [fp, #-8]
   14efc:	lsl	r3, r3, #2
   14f00:	sub	r1, fp, #4
   14f04:	add	r3, r1, r3
   14f08:	str	r2, [r3, #-44]	; 0xffffffd4
   14f0c:	ldr	r3, [fp, #-8]
   14f10:	lsl	r3, r3, #2
   14f14:	sub	r2, fp, #4
   14f18:	add	r3, r2, r3
   14f1c:	ldr	r3, [r3, #-44]	; 0xffffffd4
   14f20:	cmp	r3, #0
   14f24:	bne	14ed0 <__assert_fail@plt+0x3f74>
   14f28:	ldr	r3, [fp, #-8]
   14f2c:	str	r3, [sp, #4]
   14f30:	sub	r3, fp, #48	; 0x30
   14f34:	str	r3, [sp]
   14f38:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14f3c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14f40:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14f44:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14f48:	bl	148b8 <__assert_fail@plt+0x395c>
   14f4c:	nop			; (mov r0, r0)
   14f50:	sub	sp, fp, #4
   14f54:	pop	{fp, pc}
   14f58:	push	{r3}		; (str r3, [sp, #-4]!)
   14f5c:	push	{fp, lr}
   14f60:	add	fp, sp, #4
   14f64:	sub	sp, sp, #36	; 0x24
   14f68:	str	r0, [fp, #-20]	; 0xffffffec
   14f6c:	str	r1, [fp, #-24]	; 0xffffffe8
   14f70:	str	r2, [fp, #-28]	; 0xffffffe4
   14f74:	add	r3, fp, #8
   14f78:	str	r3, [fp, #-12]
   14f7c:	ldr	r3, [fp, #-12]
   14f80:	str	r3, [sp]
   14f84:	ldr	r3, [fp, #4]
   14f88:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14f8c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14f90:	ldr	r0, [fp, #-20]	; 0xffffffec
   14f94:	bl	14ea8 <__assert_fail@plt+0x3f4c>
   14f98:	nop			; (mov r0, r0)
   14f9c:	sub	sp, fp, #4
   14fa0:	pop	{fp, lr}
   14fa4:	add	sp, sp, #4
   14fa8:	bx	lr
   14fac:	push	{fp, lr}
   14fb0:	add	fp, sp, #4
   14fb4:	ldr	r3, [pc, #96]	; 1501c <__assert_fail@plt+0x40c0>
   14fb8:	ldr	r3, [r3]
   14fbc:	mov	r1, r3
   14fc0:	mov	r0, #10
   14fc4:	bl	10d88 <fputc_unlocked@plt>
   14fc8:	ldr	r0, [pc, #80]	; 15020 <__assert_fail@plt+0x40c4>
   14fcc:	bl	10e6c <gettext@plt>
   14fd0:	mov	r3, r0
   14fd4:	ldr	r1, [pc, #72]	; 15024 <__assert_fail@plt+0x40c8>
   14fd8:	mov	r0, r3
   14fdc:	bl	10d1c <printf@plt>
   14fe0:	ldr	r0, [pc, #64]	; 15028 <__assert_fail@plt+0x40cc>
   14fe4:	bl	10e6c <gettext@plt>
   14fe8:	mov	r3, r0
   14fec:	ldr	r2, [pc, #56]	; 1502c <__assert_fail@plt+0x40d0>
   14ff0:	ldr	r1, [pc, #56]	; 15030 <__assert_fail@plt+0x40d4>
   14ff4:	mov	r0, r3
   14ff8:	bl	10d1c <printf@plt>
   14ffc:	ldr	r0, [pc, #48]	; 15034 <__assert_fail@plt+0x40d8>
   15000:	bl	10e6c <gettext@plt>
   15004:	mov	r3, r0
   15008:	ldr	r1, [pc, #40]	; 15038 <__assert_fail@plt+0x40dc>
   1500c:	mov	r0, r3
   15010:	bl	10d1c <printf@plt>
   15014:	nop			; (mov r0, r0)
   15018:	pop	{fp, pc}
   1501c:	andeq	r9, r2, r4, asr r1
   15020:			; <UNDEFINED> instruction: 0x000182b8
   15024:	andeq	r8, r1, ip, asr #5
   15028:	andeq	r8, r1, r4, ror #5
   1502c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   15030:	andeq	r8, r1, r0, lsr #6
   15034:	andeq	r8, r1, r0, lsr r3
   15038:	andeq	r8, r1, r8, asr r3
   1503c:	push	{fp, lr}
   15040:	add	fp, sp, #4
   15044:	sub	sp, sp, #16
   15048:	str	r0, [fp, #-8]
   1504c:	str	r1, [fp, #-12]
   15050:	str	r2, [fp, #-16]
   15054:	ldr	r2, [fp, #-16]
   15058:	ldr	r1, [fp, #-12]
   1505c:	ldr	r0, [fp, #-8]
   15060:	bl	151cc <__assert_fail@plt+0x4270>
   15064:	mov	r3, r0
   15068:	mov	r0, r3
   1506c:	sub	sp, fp, #4
   15070:	pop	{fp, pc}
   15074:	push	{fp, lr}
   15078:	add	fp, sp, #4
   1507c:	sub	sp, sp, #8
   15080:	str	r0, [fp, #-8]
   15084:	ldr	r3, [fp, #-8]
   15088:	cmp	r3, #0
   1508c:	bne	15094 <__assert_fail@plt+0x4138>
   15090:	bl	15bc0 <__assert_fail@plt+0x4c64>
   15094:	ldr	r3, [fp, #-8]
   15098:	mov	r0, r3
   1509c:	sub	sp, fp, #4
   150a0:	pop	{fp, pc}
   150a4:	push	{fp, lr}
   150a8:	add	fp, sp, #4
   150ac:	sub	sp, sp, #8
   150b0:	str	r0, [fp, #-8]
   150b4:	ldr	r0, [fp, #-8]
   150b8:	bl	166a0 <__assert_fail@plt+0x5744>
   150bc:	mov	r3, r0
   150c0:	mov	r0, r3
   150c4:	bl	15074 <__assert_fail@plt+0x4118>
   150c8:	mov	r3, r0
   150cc:	mov	r0, r3
   150d0:	sub	sp, fp, #4
   150d4:	pop	{fp, pc}
   150d8:	push	{fp, lr}
   150dc:	add	fp, sp, #4
   150e0:	sub	sp, sp, #8
   150e4:	str	r0, [fp, #-8]
   150e8:	ldr	r0, [fp, #-8]
   150ec:	bl	16a38 <__assert_fail@plt+0x5adc>
   150f0:	mov	r3, r0
   150f4:	mov	r0, r3
   150f8:	bl	15074 <__assert_fail@plt+0x4118>
   150fc:	mov	r3, r0
   15100:	mov	r0, r3
   15104:	sub	sp, fp, #4
   15108:	pop	{fp, pc}
   1510c:	push	{fp, lr}
   15110:	add	fp, sp, #4
   15114:	sub	sp, sp, #8
   15118:	str	r0, [fp, #-8]
   1511c:	ldr	r0, [fp, #-8]
   15120:	bl	150a4 <__assert_fail@plt+0x4148>
   15124:	mov	r3, r0
   15128:	mov	r0, r3
   1512c:	sub	sp, fp, #4
   15130:	pop	{fp, pc}
   15134:	push	{fp, lr}
   15138:	add	fp, sp, #4
   1513c:	sub	sp, sp, #16
   15140:	str	r0, [fp, #-16]
   15144:	str	r1, [fp, #-20]	; 0xffffffec
   15148:	ldr	r1, [fp, #-20]	; 0xffffffec
   1514c:	ldr	r0, [fp, #-16]
   15150:	bl	16748 <__assert_fail@plt+0x57ec>
   15154:	str	r0, [fp, #-8]
   15158:	ldr	r3, [fp, #-8]
   1515c:	cmp	r3, #0
   15160:	bne	15180 <__assert_fail@plt+0x4224>
   15164:	ldr	r3, [fp, #-16]
   15168:	cmp	r3, #0
   1516c:	beq	1517c <__assert_fail@plt+0x4220>
   15170:	ldr	r3, [fp, #-20]	; 0xffffffec
   15174:	cmp	r3, #0
   15178:	beq	15180 <__assert_fail@plt+0x4224>
   1517c:	bl	15bc0 <__assert_fail@plt+0x4c64>
   15180:	ldr	r3, [fp, #-8]
   15184:	mov	r0, r3
   15188:	sub	sp, fp, #4
   1518c:	pop	{fp, pc}
   15190:	push	{fp, lr}
   15194:	add	fp, sp, #4
   15198:	sub	sp, sp, #8
   1519c:	str	r0, [fp, #-8]
   151a0:	str	r1, [fp, #-12]
   151a4:	ldr	r1, [fp, #-12]
   151a8:	ldr	r0, [fp, #-8]
   151ac:	bl	16a64 <__assert_fail@plt+0x5b08>
   151b0:	mov	r3, r0
   151b4:	mov	r0, r3
   151b8:	bl	15074 <__assert_fail@plt+0x4118>
   151bc:	mov	r3, r0
   151c0:	mov	r0, r3
   151c4:	sub	sp, fp, #4
   151c8:	pop	{fp, pc}
   151cc:	push	{fp, lr}
   151d0:	add	fp, sp, #4
   151d4:	sub	sp, sp, #24
   151d8:	str	r0, [fp, #-16]
   151dc:	str	r1, [fp, #-20]	; 0xffffffec
   151e0:	str	r2, [fp, #-24]	; 0xffffffe8
   151e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   151e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   151ec:	ldr	r0, [fp, #-16]
   151f0:	bl	16c58 <__assert_fail@plt+0x5cfc>
   151f4:	str	r0, [fp, #-8]
   151f8:	ldr	r3, [fp, #-8]
   151fc:	cmp	r3, #0
   15200:	bne	1522c <__assert_fail@plt+0x42d0>
   15204:	ldr	r3, [fp, #-16]
   15208:	cmp	r3, #0
   1520c:	beq	15228 <__assert_fail@plt+0x42cc>
   15210:	ldr	r3, [fp, #-20]	; 0xffffffec
   15214:	cmp	r3, #0
   15218:	beq	1522c <__assert_fail@plt+0x42d0>
   1521c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15220:	cmp	r3, #0
   15224:	beq	1522c <__assert_fail@plt+0x42d0>
   15228:	bl	15bc0 <__assert_fail@plt+0x4c64>
   1522c:	ldr	r3, [fp, #-8]
   15230:	mov	r0, r3
   15234:	sub	sp, fp, #4
   15238:	pop	{fp, pc}
   1523c:	push	{fp, lr}
   15240:	add	fp, sp, #4
   15244:	sub	sp, sp, #16
   15248:	str	r0, [fp, #-8]
   1524c:	str	r1, [fp, #-12]
   15250:	str	r2, [fp, #-16]
   15254:	ldr	r2, [fp, #-16]
   15258:	ldr	r1, [fp, #-12]
   1525c:	ldr	r0, [fp, #-8]
   15260:	bl	16aec <__assert_fail@plt+0x5b90>
   15264:	mov	r3, r0
   15268:	mov	r0, r3
   1526c:	bl	15074 <__assert_fail@plt+0x4118>
   15270:	mov	r3, r0
   15274:	mov	r0, r3
   15278:	sub	sp, fp, #4
   1527c:	pop	{fp, pc}
   15280:	push	{fp, lr}
   15284:	add	fp, sp, #4
   15288:	sub	sp, sp, #8
   1528c:	str	r0, [fp, #-8]
   15290:	str	r1, [fp, #-12]
   15294:	ldr	r2, [fp, #-12]
   15298:	ldr	r1, [fp, #-8]
   1529c:	mov	r0, #0
   152a0:	bl	151cc <__assert_fail@plt+0x4270>
   152a4:	mov	r3, r0
   152a8:	mov	r0, r3
   152ac:	sub	sp, fp, #4
   152b0:	pop	{fp, pc}
   152b4:	push	{fp, lr}
   152b8:	add	fp, sp, #4
   152bc:	sub	sp, sp, #8
   152c0:	str	r0, [fp, #-8]
   152c4:	str	r1, [fp, #-12]
   152c8:	ldr	r2, [fp, #-12]
   152cc:	ldr	r1, [fp, #-8]
   152d0:	mov	r0, #0
   152d4:	bl	1523c <__assert_fail@plt+0x42e0>
   152d8:	mov	r3, r0
   152dc:	mov	r0, r3
   152e0:	sub	sp, fp, #4
   152e4:	pop	{fp, pc}
   152e8:	push	{fp, lr}
   152ec:	add	fp, sp, #4
   152f0:	sub	sp, sp, #8
   152f4:	str	r0, [fp, #-8]
   152f8:	str	r1, [fp, #-12]
   152fc:	mov	r2, #1
   15300:	ldr	r1, [fp, #-12]
   15304:	ldr	r0, [fp, #-8]
   15308:	bl	1531c <__assert_fail@plt+0x43c0>
   1530c:	mov	r3, r0
   15310:	mov	r0, r3
   15314:	sub	sp, fp, #4
   15318:	pop	{fp, pc}
   1531c:	push	{fp, lr}
   15320:	add	fp, sp, #4
   15324:	sub	sp, sp, #24
   15328:	str	r0, [fp, #-16]
   1532c:	str	r1, [fp, #-20]	; 0xffffffec
   15330:	str	r2, [fp, #-24]	; 0xffffffe8
   15334:	ldr	r3, [fp, #-20]	; 0xffffffec
   15338:	ldr	r3, [r3]
   1533c:	str	r3, [fp, #-8]
   15340:	ldr	r3, [fp, #-16]
   15344:	cmp	r3, #0
   15348:	bne	15394 <__assert_fail@plt+0x4438>
   1534c:	ldr	r3, [fp, #-8]
   15350:	cmp	r3, #0
   15354:	bne	153f8 <__assert_fail@plt+0x449c>
   15358:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1535c:	mov	r0, #64	; 0x40
   15360:	bl	17400 <__assert_fail@plt+0x64a4>
   15364:	mov	r3, r0
   15368:	str	r3, [fp, #-8]
   1536c:	ldr	r3, [fp, #-8]
   15370:	cmp	r3, #0
   15374:	moveq	r3, #1
   15378:	movne	r3, #0
   1537c:	uxtb	r3, r3
   15380:	mov	r2, r3
   15384:	ldr	r3, [fp, #-8]
   15388:	add	r3, r2, r3
   1538c:	str	r3, [fp, #-8]
   15390:	b	153f8 <__assert_fail@plt+0x449c>
   15394:	ldr	r3, [fp, #-8]
   15398:	lsr	r3, r3, #1
   1539c:	add	r3, r3, #1
   153a0:	mvn	r2, r3
   153a4:	ldr	r3, [fp, #-8]
   153a8:	cmp	r2, r3
   153ac:	bcs	153d0 <__assert_fail@plt+0x4474>
   153b0:	ldr	r3, [fp, #-8]
   153b4:	lsr	r2, r3, #1
   153b8:	ldr	r3, [fp, #-8]
   153bc:	add	r3, r2, r3
   153c0:	add	r3, r3, #1
   153c4:	str	r3, [fp, #-8]
   153c8:	mov	r3, #1
   153cc:	b	153ec <__assert_fail@plt+0x4490>
   153d0:	ldr	r3, [fp, #-8]
   153d4:	lsr	r2, r3, #1
   153d8:	ldr	r3, [fp, #-8]
   153dc:	add	r3, r2, r3
   153e0:	add	r3, r3, #1
   153e4:	str	r3, [fp, #-8]
   153e8:	mov	r3, #0
   153ec:	cmp	r3, #0
   153f0:	beq	153f8 <__assert_fail@plt+0x449c>
   153f4:	bl	15bc0 <__assert_fail@plt+0x4c64>
   153f8:	ldr	r3, [fp, #-8]
   153fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15400:	mov	r1, r3
   15404:	ldr	r0, [fp, #-16]
   15408:	bl	151cc <__assert_fail@plt+0x4270>
   1540c:	str	r0, [fp, #-16]
   15410:	ldr	r2, [fp, #-8]
   15414:	ldr	r3, [fp, #-20]	; 0xffffffec
   15418:	str	r2, [r3]
   1541c:	ldr	r3, [fp, #-16]
   15420:	mov	r0, r3
   15424:	sub	sp, fp, #4
   15428:	pop	{fp, pc}
   1542c:	push	{fp, lr}
   15430:	add	fp, sp, #4
   15434:	sub	sp, sp, #32
   15438:	str	r0, [fp, #-24]	; 0xffffffe8
   1543c:	str	r1, [fp, #-28]	; 0xffffffe4
   15440:	str	r2, [fp, #-32]	; 0xffffffe0
   15444:	str	r3, [fp, #-36]	; 0xffffffdc
   15448:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1544c:	ldr	r3, [r3]
   15450:	str	r3, [fp, #-8]
   15454:	ldr	r3, [fp, #-8]
   15458:	asr	r3, r3, #1
   1545c:	cmp	r3, #0
   15460:	bge	15488 <__assert_fail@plt+0x452c>
   15464:	ldr	r3, [fp, #-8]
   15468:	asr	r3, r3, #1
   1546c:	rsb	r2, r3, #-2147483648	; 0x80000000
   15470:	ldr	r3, [fp, #-8]
   15474:	cmp	r2, r3
   15478:	movgt	r3, #1
   1547c:	movle	r3, #0
   15480:	uxtb	r3, r3
   15484:	b	154dc <__assert_fail@plt+0x4580>
   15488:	ldr	r3, [fp, #-8]
   1548c:	cmp	r3, #0
   15490:	bge	154b8 <__assert_fail@plt+0x455c>
   15494:	ldr	r3, [fp, #-8]
   15498:	asr	r2, r3, #1
   1549c:	ldr	r3, [fp, #-8]
   154a0:	rsb	r3, r3, #-2147483648	; 0x80000000
   154a4:	cmp	r2, r3
   154a8:	movlt	r3, #1
   154ac:	movge	r3, #0
   154b0:	uxtb	r3, r3
   154b4:	b	154dc <__assert_fail@plt+0x4580>
   154b8:	ldr	r3, [fp, #-8]
   154bc:	asr	r2, r3, #1
   154c0:	mvn	r3, #-2147483648	; 0x80000000
   154c4:	sub	r3, r3, r2
   154c8:	ldr	r2, [fp, #-8]
   154cc:	cmp	r3, r2
   154d0:	movlt	r3, #1
   154d4:	movge	r3, #0
   154d8:	uxtb	r3, r3
   154dc:	cmp	r3, #0
   154e0:	beq	15504 <__assert_fail@plt+0x45a8>
   154e4:	ldr	r3, [fp, #-8]
   154e8:	asr	r3, r3, #1
   154ec:	mov	r2, r3
   154f0:	ldr	r3, [fp, #-8]
   154f4:	add	r3, r2, r3
   154f8:	str	r3, [fp, #-16]
   154fc:	mov	r3, #1
   15500:	b	15520 <__assert_fail@plt+0x45c4>
   15504:	ldr	r3, [fp, #-8]
   15508:	asr	r3, r3, #1
   1550c:	mov	r2, r3
   15510:	ldr	r3, [fp, #-8]
   15514:	add	r3, r2, r3
   15518:	str	r3, [fp, #-16]
   1551c:	mov	r3, #0
   15520:	cmp	r3, #0
   15524:	beq	15530 <__assert_fail@plt+0x45d4>
   15528:	mvn	r3, #-2147483648	; 0x80000000
   1552c:	str	r3, [fp, #-16]
   15530:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15534:	cmp	r3, #0
   15538:	blt	15554 <__assert_fail@plt+0x45f8>
   1553c:	ldr	r3, [fp, #-16]
   15540:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15544:	cmp	r2, r3
   15548:	bge	15554 <__assert_fail@plt+0x45f8>
   1554c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15550:	str	r3, [fp, #-16]
   15554:	ldr	r3, [fp, #4]
   15558:	cmp	r3, #0
   1555c:	bge	155ec <__assert_fail@plt+0x4690>
   15560:	ldr	r3, [fp, #-16]
   15564:	cmp	r3, #0
   15568:	bge	15598 <__assert_fail@plt+0x463c>
   1556c:	ldr	r1, [fp, #4]
   15570:	mvn	r0, #-2147483648	; 0x80000000
   15574:	bl	1760c <__assert_fail@plt+0x66b0>
   15578:	mov	r3, r0
   1557c:	mov	r2, r3
   15580:	ldr	r3, [fp, #-16]
   15584:	cmp	r2, r3
   15588:	movgt	r3, #1
   1558c:	movle	r3, #0
   15590:	uxtb	r3, r3
   15594:	b	1568c <__assert_fail@plt+0x4730>
   15598:	ldr	r3, [fp, #4]
   1559c:	cmn	r3, #1
   155a0:	bne	155c0 <__assert_fail@plt+0x4664>
   155a4:	ldr	r3, [fp, #-16]
   155a8:	add	r3, r3, #-2147483648	; 0x80000000
   155ac:	cmp	r3, #0
   155b0:	movgt	r3, #1
   155b4:	movle	r3, #0
   155b8:	uxtb	r3, r3
   155bc:	b	1568c <__assert_fail@plt+0x4730>
   155c0:	ldr	r1, [fp, #4]
   155c4:	mov	r0, #-2147483648	; 0x80000000
   155c8:	bl	1760c <__assert_fail@plt+0x66b0>
   155cc:	mov	r3, r0
   155d0:	mov	r2, r3
   155d4:	ldr	r3, [fp, #-16]
   155d8:	cmp	r2, r3
   155dc:	movlt	r3, #1
   155e0:	movge	r3, #0
   155e4:	uxtb	r3, r3
   155e8:	b	1568c <__assert_fail@plt+0x4730>
   155ec:	ldr	r3, [fp, #4]
   155f0:	cmp	r3, #0
   155f4:	beq	15688 <__assert_fail@plt+0x472c>
   155f8:	ldr	r3, [fp, #-16]
   155fc:	cmp	r3, #0
   15600:	bge	1565c <__assert_fail@plt+0x4700>
   15604:	ldr	r3, [fp, #-16]
   15608:	cmn	r3, #1
   1560c:	bne	1562c <__assert_fail@plt+0x46d0>
   15610:	ldr	r3, [fp, #4]
   15614:	add	r3, r3, #-2147483648	; 0x80000000
   15618:	cmp	r3, #0
   1561c:	movgt	r3, #1
   15620:	movle	r3, #0
   15624:	uxtb	r3, r3
   15628:	b	1568c <__assert_fail@plt+0x4730>
   1562c:	ldr	r3, [fp, #-16]
   15630:	mov	r1, r3
   15634:	mov	r0, #-2147483648	; 0x80000000
   15638:	bl	1760c <__assert_fail@plt+0x66b0>
   1563c:	mov	r3, r0
   15640:	mov	r2, r3
   15644:	ldr	r3, [fp, #4]
   15648:	cmp	r2, r3
   1564c:	movlt	r3, #1
   15650:	movge	r3, #0
   15654:	uxtb	r3, r3
   15658:	b	1568c <__assert_fail@plt+0x4730>
   1565c:	ldr	r1, [fp, #4]
   15660:	mvn	r0, #-2147483648	; 0x80000000
   15664:	bl	1760c <__assert_fail@plt+0x66b0>
   15668:	mov	r3, r0
   1566c:	mov	r2, r3
   15670:	ldr	r3, [fp, #-16]
   15674:	cmp	r2, r3
   15678:	movlt	r3, #1
   1567c:	movge	r3, #0
   15680:	uxtb	r3, r3
   15684:	b	1568c <__assert_fail@plt+0x4730>
   15688:	mov	r3, #0
   1568c:	cmp	r3, #0
   15690:	beq	156b0 <__assert_fail@plt+0x4754>
   15694:	ldr	r3, [fp, #-16]
   15698:	mov	r2, r3
   1569c:	ldr	r3, [fp, #4]
   156a0:	mul	r3, r3, r2
   156a4:	str	r3, [fp, #-20]	; 0xffffffec
   156a8:	mov	r3, #1
   156ac:	b	156c8 <__assert_fail@plt+0x476c>
   156b0:	ldr	r3, [fp, #-16]
   156b4:	mov	r2, r3
   156b8:	ldr	r3, [fp, #4]
   156bc:	mul	r3, r3, r2
   156c0:	str	r3, [fp, #-20]	; 0xffffffec
   156c4:	mov	r3, #0
   156c8:	cmp	r3, #0
   156cc:	beq	156d8 <__assert_fail@plt+0x477c>
   156d0:	mvn	r3, #-2147483648	; 0x80000000
   156d4:	b	156f0 <__assert_fail@plt+0x4794>
   156d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   156dc:	cmp	r3, #63	; 0x3f
   156e0:	bgt	156ec <__assert_fail@plt+0x4790>
   156e4:	mov	r3, #64	; 0x40
   156e8:	b	156f0 <__assert_fail@plt+0x4794>
   156ec:	mov	r3, #0
   156f0:	str	r3, [fp, #-12]
   156f4:	ldr	r3, [fp, #-12]
   156f8:	cmp	r3, #0
   156fc:	beq	15738 <__assert_fail@plt+0x47dc>
   15700:	ldr	r1, [fp, #4]
   15704:	ldr	r0, [fp, #-12]
   15708:	bl	1760c <__assert_fail@plt+0x66b0>
   1570c:	mov	r3, r0
   15710:	str	r3, [fp, #-16]
   15714:	ldr	r3, [fp, #-12]
   15718:	ldr	r1, [fp, #4]
   1571c:	mov	r0, r3
   15720:	bl	1782c <__assert_fail@plt+0x68d0>
   15724:	mov	r3, r1
   15728:	mov	r2, r3
   1572c:	ldr	r3, [fp, #-12]
   15730:	sub	r3, r3, r2
   15734:	str	r3, [fp, #-20]	; 0xffffffec
   15738:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1573c:	cmp	r3, #0
   15740:	bne	15750 <__assert_fail@plt+0x47f4>
   15744:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15748:	mov	r2, #0
   1574c:	str	r2, [r3]
   15750:	ldr	r2, [fp, #-16]
   15754:	ldr	r3, [fp, #-8]
   15758:	sub	r2, r2, r3
   1575c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15760:	cmp	r2, r3
   15764:	bge	1599c <__assert_fail@plt+0x4a40>
   15768:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1576c:	cmp	r3, #0
   15770:	bge	15794 <__assert_fail@plt+0x4838>
   15774:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15778:	rsb	r2, r3, #-2147483648	; 0x80000000
   1577c:	ldr	r3, [fp, #-8]
   15780:	cmp	r2, r3
   15784:	movgt	r3, #1
   15788:	movle	r3, #0
   1578c:	uxtb	r3, r3
   15790:	b	157e0 <__assert_fail@plt+0x4884>
   15794:	ldr	r3, [fp, #-8]
   15798:	cmp	r3, #0
   1579c:	bge	157c0 <__assert_fail@plt+0x4864>
   157a0:	ldr	r3, [fp, #-8]
   157a4:	rsb	r2, r3, #-2147483648	; 0x80000000
   157a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   157ac:	cmp	r2, r3
   157b0:	movgt	r3, #1
   157b4:	movle	r3, #0
   157b8:	uxtb	r3, r3
   157bc:	b	157e0 <__assert_fail@plt+0x4884>
   157c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   157c4:	mvn	r3, #-2147483648	; 0x80000000
   157c8:	sub	r3, r3, r2
   157cc:	ldr	r2, [fp, #-8]
   157d0:	cmp	r3, r2
   157d4:	movlt	r3, #1
   157d8:	movge	r3, #0
   157dc:	uxtb	r3, r3
   157e0:	cmp	r3, #0
   157e4:	beq	157fc <__assert_fail@plt+0x48a0>
   157e8:	ldr	r2, [fp, #-8]
   157ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   157f0:	add	r3, r2, r3
   157f4:	str	r3, [fp, #-16]
   157f8:	b	15998 <__assert_fail@plt+0x4a3c>
   157fc:	ldr	r2, [fp, #-8]
   15800:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15804:	add	r3, r2, r3
   15808:	str	r3, [fp, #-16]
   1580c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15810:	cmp	r3, #0
   15814:	blt	15828 <__assert_fail@plt+0x48cc>
   15818:	ldr	r3, [fp, #-16]
   1581c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15820:	cmp	r2, r3
   15824:	blt	15998 <__assert_fail@plt+0x4a3c>
   15828:	ldr	r3, [fp, #4]
   1582c:	cmp	r3, #0
   15830:	bge	158c0 <__assert_fail@plt+0x4964>
   15834:	ldr	r3, [fp, #-16]
   15838:	cmp	r3, #0
   1583c:	bge	1586c <__assert_fail@plt+0x4910>
   15840:	ldr	r1, [fp, #4]
   15844:	mvn	r0, #-2147483648	; 0x80000000
   15848:	bl	1760c <__assert_fail@plt+0x66b0>
   1584c:	mov	r3, r0
   15850:	mov	r2, r3
   15854:	ldr	r3, [fp, #-16]
   15858:	cmp	r2, r3
   1585c:	movgt	r3, #1
   15860:	movle	r3, #0
   15864:	uxtb	r3, r3
   15868:	b	15960 <__assert_fail@plt+0x4a04>
   1586c:	ldr	r3, [fp, #4]
   15870:	cmn	r3, #1
   15874:	bne	15894 <__assert_fail@plt+0x4938>
   15878:	ldr	r3, [fp, #-16]
   1587c:	add	r3, r3, #-2147483648	; 0x80000000
   15880:	cmp	r3, #0
   15884:	movgt	r3, #1
   15888:	movle	r3, #0
   1588c:	uxtb	r3, r3
   15890:	b	15960 <__assert_fail@plt+0x4a04>
   15894:	ldr	r1, [fp, #4]
   15898:	mov	r0, #-2147483648	; 0x80000000
   1589c:	bl	1760c <__assert_fail@plt+0x66b0>
   158a0:	mov	r3, r0
   158a4:	mov	r2, r3
   158a8:	ldr	r3, [fp, #-16]
   158ac:	cmp	r2, r3
   158b0:	movlt	r3, #1
   158b4:	movge	r3, #0
   158b8:	uxtb	r3, r3
   158bc:	b	15960 <__assert_fail@plt+0x4a04>
   158c0:	ldr	r3, [fp, #4]
   158c4:	cmp	r3, #0
   158c8:	beq	1595c <__assert_fail@plt+0x4a00>
   158cc:	ldr	r3, [fp, #-16]
   158d0:	cmp	r3, #0
   158d4:	bge	15930 <__assert_fail@plt+0x49d4>
   158d8:	ldr	r3, [fp, #-16]
   158dc:	cmn	r3, #1
   158e0:	bne	15900 <__assert_fail@plt+0x49a4>
   158e4:	ldr	r3, [fp, #4]
   158e8:	add	r3, r3, #-2147483648	; 0x80000000
   158ec:	cmp	r3, #0
   158f0:	movgt	r3, #1
   158f4:	movle	r3, #0
   158f8:	uxtb	r3, r3
   158fc:	b	15960 <__assert_fail@plt+0x4a04>
   15900:	ldr	r3, [fp, #-16]
   15904:	mov	r1, r3
   15908:	mov	r0, #-2147483648	; 0x80000000
   1590c:	bl	1760c <__assert_fail@plt+0x66b0>
   15910:	mov	r3, r0
   15914:	mov	r2, r3
   15918:	ldr	r3, [fp, #4]
   1591c:	cmp	r2, r3
   15920:	movlt	r3, #1
   15924:	movge	r3, #0
   15928:	uxtb	r3, r3
   1592c:	b	15960 <__assert_fail@plt+0x4a04>
   15930:	ldr	r1, [fp, #4]
   15934:	mvn	r0, #-2147483648	; 0x80000000
   15938:	bl	1760c <__assert_fail@plt+0x66b0>
   1593c:	mov	r3, r0
   15940:	mov	r2, r3
   15944:	ldr	r3, [fp, #-16]
   15948:	cmp	r2, r3
   1594c:	movlt	r3, #1
   15950:	movge	r3, #0
   15954:	uxtb	r3, r3
   15958:	b	15960 <__assert_fail@plt+0x4a04>
   1595c:	mov	r3, #0
   15960:	cmp	r3, #0
   15964:	beq	15980 <__assert_fail@plt+0x4a24>
   15968:	ldr	r3, [fp, #-16]
   1596c:	mov	r2, r3
   15970:	ldr	r3, [fp, #4]
   15974:	mul	r3, r3, r2
   15978:	str	r3, [fp, #-20]	; 0xffffffec
   1597c:	b	15998 <__assert_fail@plt+0x4a3c>
   15980:	ldr	r3, [fp, #-16]
   15984:	mov	r2, r3
   15988:	ldr	r3, [fp, #4]
   1598c:	mul	r3, r3, r2
   15990:	str	r3, [fp, #-20]	; 0xffffffec
   15994:	b	1599c <__assert_fail@plt+0x4a40>
   15998:	bl	15bc0 <__assert_fail@plt+0x4c64>
   1599c:	ldr	r3, [fp, #-20]	; 0xffffffec
   159a0:	mov	r1, r3
   159a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   159a8:	bl	15134 <__assert_fail@plt+0x41d8>
   159ac:	str	r0, [fp, #-24]	; 0xffffffe8
   159b0:	ldr	r2, [fp, #-16]
   159b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   159b8:	str	r2, [r3]
   159bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159c0:	mov	r0, r3
   159c4:	sub	sp, fp, #4
   159c8:	pop	{fp, pc}
   159cc:	push	{fp, lr}
   159d0:	add	fp, sp, #4
   159d4:	sub	sp, sp, #8
   159d8:	str	r0, [fp, #-8]
   159dc:	mov	r1, #1
   159e0:	ldr	r0, [fp, #-8]
   159e4:	bl	15a24 <__assert_fail@plt+0x4ac8>
   159e8:	mov	r3, r0
   159ec:	mov	r0, r3
   159f0:	sub	sp, fp, #4
   159f4:	pop	{fp, pc}
   159f8:	push	{fp, lr}
   159fc:	add	fp, sp, #4
   15a00:	sub	sp, sp, #8
   15a04:	str	r0, [fp, #-8]
   15a08:	mov	r1, #1
   15a0c:	ldr	r0, [fp, #-8]
   15a10:	bl	15a60 <__assert_fail@plt+0x4b04>
   15a14:	mov	r3, r0
   15a18:	mov	r0, r3
   15a1c:	sub	sp, fp, #4
   15a20:	pop	{fp, pc}
   15a24:	push	{fp, lr}
   15a28:	add	fp, sp, #4
   15a2c:	sub	sp, sp, #8
   15a30:	str	r0, [fp, #-8]
   15a34:	str	r1, [fp, #-12]
   15a38:	ldr	r1, [fp, #-12]
   15a3c:	ldr	r0, [fp, #-8]
   15a40:	bl	165dc <__assert_fail@plt+0x5680>
   15a44:	mov	r3, r0
   15a48:	mov	r0, r3
   15a4c:	bl	15074 <__assert_fail@plt+0x4118>
   15a50:	mov	r3, r0
   15a54:	mov	r0, r3
   15a58:	sub	sp, fp, #4
   15a5c:	pop	{fp, pc}
   15a60:	push	{fp, lr}
   15a64:	add	fp, sp, #4
   15a68:	sub	sp, sp, #8
   15a6c:	str	r0, [fp, #-8]
   15a70:	str	r1, [fp, #-12]
   15a74:	ldr	r1, [fp, #-12]
   15a78:	ldr	r0, [fp, #-8]
   15a7c:	bl	16ab4 <__assert_fail@plt+0x5b58>
   15a80:	mov	r3, r0
   15a84:	mov	r0, r3
   15a88:	bl	15074 <__assert_fail@plt+0x4118>
   15a8c:	mov	r3, r0
   15a90:	mov	r0, r3
   15a94:	sub	sp, fp, #4
   15a98:	pop	{fp, pc}
   15a9c:	push	{fp, lr}
   15aa0:	add	fp, sp, #4
   15aa4:	sub	sp, sp, #8
   15aa8:	str	r0, [fp, #-8]
   15aac:	str	r1, [fp, #-12]
   15ab0:	ldr	r0, [fp, #-12]
   15ab4:	bl	150a4 <__assert_fail@plt+0x4148>
   15ab8:	mov	r3, r0
   15abc:	ldr	r2, [fp, #-12]
   15ac0:	ldr	r1, [fp, #-8]
   15ac4:	mov	r0, r3
   15ac8:	bl	10d58 <memcpy@plt>
   15acc:	mov	r3, r0
   15ad0:	mov	r0, r3
   15ad4:	sub	sp, fp, #4
   15ad8:	pop	{fp, pc}
   15adc:	push	{fp, lr}
   15ae0:	add	fp, sp, #4
   15ae4:	sub	sp, sp, #8
   15ae8:	str	r0, [fp, #-8]
   15aec:	str	r1, [fp, #-12]
   15af0:	ldr	r0, [fp, #-12]
   15af4:	bl	150d8 <__assert_fail@plt+0x417c>
   15af8:	mov	r3, r0
   15afc:	mov	r0, r3
   15b00:	ldr	r3, [fp, #-12]
   15b04:	mov	r2, r3
   15b08:	ldr	r1, [fp, #-8]
   15b0c:	bl	10d58 <memcpy@plt>
   15b10:	mov	r3, r0
   15b14:	mov	r0, r3
   15b18:	sub	sp, fp, #4
   15b1c:	pop	{fp, pc}
   15b20:	push	{fp, lr}
   15b24:	add	fp, sp, #4
   15b28:	sub	sp, sp, #16
   15b2c:	str	r0, [fp, #-16]
   15b30:	str	r1, [fp, #-20]	; 0xffffffec
   15b34:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b38:	add	r3, r3, #1
   15b3c:	mov	r0, r3
   15b40:	bl	150d8 <__assert_fail@plt+0x417c>
   15b44:	mov	r3, r0
   15b48:	str	r3, [fp, #-8]
   15b4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b50:	ldr	r2, [fp, #-8]
   15b54:	add	r3, r2, r3
   15b58:	mov	r2, #0
   15b5c:	strb	r2, [r3]
   15b60:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b64:	mov	r2, r3
   15b68:	ldr	r1, [fp, #-16]
   15b6c:	ldr	r0, [fp, #-8]
   15b70:	bl	10d58 <memcpy@plt>
   15b74:	mov	r3, r0
   15b78:	mov	r0, r3
   15b7c:	sub	sp, fp, #4
   15b80:	pop	{fp, pc}
   15b84:	push	{fp, lr}
   15b88:	add	fp, sp, #4
   15b8c:	sub	sp, sp, #8
   15b90:	str	r0, [fp, #-8]
   15b94:	ldr	r0, [fp, #-8]
   15b98:	bl	10e78 <strlen@plt>
   15b9c:	mov	r3, r0
   15ba0:	add	r3, r3, #1
   15ba4:	mov	r1, r3
   15ba8:	ldr	r0, [fp, #-8]
   15bac:	bl	15a9c <__assert_fail@plt+0x4b40>
   15bb0:	mov	r3, r0
   15bb4:	mov	r0, r3
   15bb8:	sub	sp, fp, #4
   15bbc:	pop	{fp, pc}
   15bc0:	push	{r4, r5, fp, lr}
   15bc4:	add	fp, sp, #12
   15bc8:	ldr	r3, [pc, #32]	; 15bf0 <__assert_fail@plt+0x4c94>
   15bcc:	ldr	r4, [r3]
   15bd0:	ldr	r0, [pc, #28]	; 15bf4 <__assert_fail@plt+0x4c98>
   15bd4:	bl	10e6c <gettext@plt>
   15bd8:	mov	r3, r0
   15bdc:	ldr	r2, [pc, #20]	; 15bf8 <__assert_fail@plt+0x4c9c>
   15be0:	mov	r1, #0
   15be4:	mov	r0, r4
   15be8:	bl	10e0c <error@plt>
   15bec:	bl	10f44 <abort@plt>
   15bf0:	strdeq	r9, [r2], -r4
   15bf4:	andeq	r8, r1, r8, lsr #7
   15bf8:			; <UNDEFINED> instruction: 0x000183bc
   15bfc:	push	{r4, r5, fp, lr}
   15c00:	add	fp, sp, #12
   15c04:	sub	sp, sp, #40	; 0x28
   15c08:	str	r0, [fp, #-32]	; 0xffffffe0
   15c0c:	str	r1, [fp, #-36]	; 0xffffffdc
   15c10:	strd	r2, [fp, #-44]	; 0xffffffd4
   15c14:	sub	r2, fp, #28
   15c18:	ldr	r3, [fp, #12]
   15c1c:	str	r3, [sp]
   15c20:	mov	r3, r2
   15c24:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15c28:	mov	r1, #0
   15c2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15c30:	bl	15f9c <__assert_fail@plt+0x5040>
   15c34:	str	r0, [fp, #-16]
   15c38:	ldr	r3, [fp, #-16]
   15c3c:	cmp	r3, #0
   15c40:	bne	15cb4 <__assert_fail@plt+0x4d58>
   15c44:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   15c48:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   15c4c:	cmp	r1, r3
   15c50:	cmpeq	r0, r2
   15c54:	bcc	15c6c <__assert_fail@plt+0x4d10>
   15c58:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15c5c:	ldrd	r0, [fp, #4]
   15c60:	cmp	r1, r3
   15c64:	cmpeq	r0, r2
   15c68:	bcs	15cf0 <__assert_fail@plt+0x4d94>
   15c6c:	mov	r3, #1
   15c70:	str	r3, [fp, #-16]
   15c74:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15c78:	mvn	r0, #-1073741824	; 0xc0000000
   15c7c:	mov	r1, #0
   15c80:	cmp	r3, r1
   15c84:	cmpeq	r2, r0
   15c88:	bls	15ca0 <__assert_fail@plt+0x4d44>
   15c8c:	bl	10e9c <__errno_location@plt>
   15c90:	mov	r2, r0
   15c94:	mov	r3, #75	; 0x4b
   15c98:	str	r3, [r2]
   15c9c:	b	15cf0 <__assert_fail@plt+0x4d94>
   15ca0:	bl	10e9c <__errno_location@plt>
   15ca4:	mov	r2, r0
   15ca8:	mov	r3, #34	; 0x22
   15cac:	str	r3, [r2]
   15cb0:	b	15cf0 <__assert_fail@plt+0x4d94>
   15cb4:	ldr	r3, [fp, #-16]
   15cb8:	cmp	r3, #1
   15cbc:	bne	15cd4 <__assert_fail@plt+0x4d78>
   15cc0:	bl	10e9c <__errno_location@plt>
   15cc4:	mov	r2, r0
   15cc8:	mov	r3, #75	; 0x4b
   15ccc:	str	r3, [r2]
   15cd0:	b	15cf0 <__assert_fail@plt+0x4d94>
   15cd4:	ldr	r3, [fp, #-16]
   15cd8:	cmp	r3, #3
   15cdc:	bne	15cf0 <__assert_fail@plt+0x4d94>
   15ce0:	bl	10e9c <__errno_location@plt>
   15ce4:	mov	r2, r0
   15ce8:	mov	r3, #0
   15cec:	str	r3, [r2]
   15cf0:	ldr	r3, [fp, #-16]
   15cf4:	cmp	r3, #0
   15cf8:	beq	15d60 <__assert_fail@plt+0x4e04>
   15cfc:	ldr	r3, [fp, #20]
   15d00:	cmp	r3, #0
   15d04:	beq	15d10 <__assert_fail@plt+0x4db4>
   15d08:	ldr	r4, [fp, #20]
   15d0c:	b	15d14 <__assert_fail@plt+0x4db8>
   15d10:	mov	r4, #1
   15d14:	bl	10e9c <__errno_location@plt>
   15d18:	mov	r3, r0
   15d1c:	ldr	r3, [r3]
   15d20:	cmp	r3, #22
   15d24:	beq	15d38 <__assert_fail@plt+0x4ddc>
   15d28:	bl	10e9c <__errno_location@plt>
   15d2c:	mov	r3, r0
   15d30:	ldr	r5, [r3]
   15d34:	b	15d3c <__assert_fail@plt+0x4de0>
   15d38:	mov	r5, #0
   15d3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15d40:	bl	1488c <__assert_fail@plt+0x3930>
   15d44:	mov	r3, r0
   15d48:	str	r3, [sp]
   15d4c:	ldr	r3, [fp, #16]
   15d50:	ldr	r2, [pc, #28]	; 15d74 <__assert_fail@plt+0x4e18>
   15d54:	mov	r1, r5
   15d58:	mov	r0, r4
   15d5c:	bl	10e0c <error@plt>
   15d60:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15d64:	mov	r0, r2
   15d68:	mov	r1, r3
   15d6c:	sub	sp, fp, #12
   15d70:	pop	{r4, r5, fp, pc}
   15d74:	andeq	r8, r1, r0, asr #7
   15d78:	push	{fp, lr}
   15d7c:	add	fp, sp, #4
   15d80:	sub	sp, sp, #40	; 0x28
   15d84:	str	r0, [fp, #-8]
   15d88:	strd	r2, [fp, #-20]	; 0xffffffec
   15d8c:	ldr	r3, [fp, #20]
   15d90:	str	r3, [sp, #16]
   15d94:	ldr	r3, [fp, #16]
   15d98:	str	r3, [sp, #12]
   15d9c:	ldr	r3, [fp, #12]
   15da0:	str	r3, [sp, #8]
   15da4:	ldrd	r2, [fp, #4]
   15da8:	strd	r2, [sp]
   15dac:	ldrd	r2, [fp, #-20]	; 0xffffffec
   15db0:	mov	r1, #10
   15db4:	ldr	r0, [fp, #-8]
   15db8:	bl	15bfc <__assert_fail@plt+0x4ca0>
   15dbc:	mov	r2, r0
   15dc0:	mov	r3, r1
   15dc4:	mov	r0, r2
   15dc8:	mov	r1, r3
   15dcc:	sub	sp, fp, #4
   15dd0:	pop	{fp, pc}
   15dd4:	push	{fp, lr}
   15dd8:	add	fp, sp, #4
   15ddc:	sub	sp, sp, #16
   15de0:	str	r0, [fp, #-16]
   15de4:	str	r1, [fp, #-20]	; 0xffffffec
   15de8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15dec:	cmp	r3, #0
   15df0:	bge	15e2c <__assert_fail@plt+0x4ed0>
   15df4:	ldr	r1, [fp, #-20]	; 0xffffffec
   15df8:	mov	r0, #0
   15dfc:	bl	1760c <__assert_fail@plt+0x66b0>
   15e00:	mov	r3, r0
   15e04:	mov	r0, r3
   15e08:	asr	r1, r0, #31
   15e0c:	ldr	r3, [fp, #-16]
   15e10:	ldrd	r2, [r3]
   15e14:	cmp	r1, r3
   15e18:	cmpeq	r0, r2
   15e1c:	movcc	r3, #1
   15e20:	movcs	r3, #0
   15e24:	uxtb	r3, r3
   15e28:	b	15e88 <__assert_fail@plt+0x4f2c>
   15e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e30:	cmp	r3, #0
   15e34:	beq	15e7c <__assert_fail@plt+0x4f20>
   15e38:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e3c:	mov	r2, r3
   15e40:	asr	r3, r2, #31
   15e44:	mvn	r0, #0
   15e48:	mvn	r1, #0
   15e4c:	bl	1784c <__assert_fail@plt+0x68f0>
   15e50:	mov	r2, r0
   15e54:	mov	r3, r1
   15e58:	mov	r0, r2
   15e5c:	mov	r1, r3
   15e60:	ldr	r3, [fp, #-16]
   15e64:	ldrd	r2, [r3]
   15e68:	cmp	r1, r3
   15e6c:	cmpeq	r0, r2
   15e70:	bcs	15e7c <__assert_fail@plt+0x4f20>
   15e74:	mov	r3, #1
   15e78:	b	15e80 <__assert_fail@plt+0x4f24>
   15e7c:	mov	r3, #0
   15e80:	and	r3, r3, #1
   15e84:	uxtb	r3, r3
   15e88:	cmp	r3, #0
   15e8c:	beq	15ec8 <__assert_fail@plt+0x4f6c>
   15e90:	ldr	r3, [fp, #-16]
   15e94:	ldrd	r0, [r3]
   15e98:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e9c:	mov	r2, r3
   15ea0:	asr	r3, r2, #31
   15ea4:	mul	lr, r2, r1
   15ea8:	mul	ip, r0, r3
   15eac:	add	ip, lr, ip
   15eb0:	umull	r2, r3, r0, r2
   15eb4:	add	r1, ip, r3
   15eb8:	mov	r3, r1
   15ebc:	strd	r2, [fp, #-12]
   15ec0:	mov	r3, #1
   15ec4:	b	15efc <__assert_fail@plt+0x4fa0>
   15ec8:	ldr	r3, [fp, #-16]
   15ecc:	ldrd	r0, [r3]
   15ed0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ed4:	mov	r2, r3
   15ed8:	asr	r3, r2, #31
   15edc:	mul	lr, r2, r1
   15ee0:	mul	ip, r0, r3
   15ee4:	add	ip, lr, ip
   15ee8:	umull	r2, r3, r0, r2
   15eec:	add	r1, ip, r3
   15ef0:	mov	r3, r1
   15ef4:	strd	r2, [fp, #-12]
   15ef8:	mov	r3, #0
   15efc:	cmp	r3, #0
   15f00:	beq	15f1c <__assert_fail@plt+0x4fc0>
   15f04:	ldr	r1, [fp, #-16]
   15f08:	mvn	r2, #0
   15f0c:	mvn	r3, #0
   15f10:	strd	r2, [r1]
   15f14:	mov	r3, #1
   15f18:	b	15f2c <__assert_fail@plt+0x4fd0>
   15f1c:	ldrd	r2, [fp, #-12]
   15f20:	ldr	r1, [fp, #-16]
   15f24:	strd	r2, [r1]
   15f28:	mov	r3, #0
   15f2c:	mov	r0, r3
   15f30:	sub	sp, fp, #4
   15f34:	pop	{fp, pc}
   15f38:	push	{fp, lr}
   15f3c:	add	fp, sp, #4
   15f40:	sub	sp, sp, #24
   15f44:	str	r0, [fp, #-16]
   15f48:	str	r1, [fp, #-20]	; 0xffffffec
   15f4c:	str	r2, [fp, #-24]	; 0xffffffe8
   15f50:	mov	r3, #0
   15f54:	str	r3, [fp, #-8]
   15f58:	b	15f78 <__assert_fail@plt+0x501c>
   15f5c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15f60:	ldr	r0, [fp, #-16]
   15f64:	bl	15dd4 <__assert_fail@plt+0x4e78>
   15f68:	mov	r2, r0
   15f6c:	ldr	r3, [fp, #-8]
   15f70:	orr	r3, r3, r2
   15f74:	str	r3, [fp, #-8]
   15f78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f7c:	sub	r2, r3, #1
   15f80:	str	r2, [fp, #-24]	; 0xffffffe8
   15f84:	cmp	r3, #0
   15f88:	bne	15f5c <__assert_fail@plt+0x5000>
   15f8c:	ldr	r3, [fp, #-8]
   15f90:	mov	r0, r3
   15f94:	sub	sp, fp, #4
   15f98:	pop	{fp, pc}
   15f9c:	push	{fp, lr}
   15fa0:	add	fp, sp, #4
   15fa4:	sub	sp, sp, #56	; 0x38
   15fa8:	str	r0, [fp, #-48]	; 0xffffffd0
   15fac:	str	r1, [fp, #-52]	; 0xffffffcc
   15fb0:	str	r2, [fp, #-56]	; 0xffffffc8
   15fb4:	str	r3, [fp, #-60]	; 0xffffffc4
   15fb8:	mov	r3, #0
   15fbc:	str	r3, [fp, #-8]
   15fc0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15fc4:	cmp	r3, #0
   15fc8:	blt	15fd8 <__assert_fail@plt+0x507c>
   15fcc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15fd0:	cmp	r3, #36	; 0x24
   15fd4:	ble	15fec <__assert_fail@plt+0x5090>
   15fd8:	ldr	r3, [pc, #1520]	; 165d0 <__assert_fail@plt+0x5674>
   15fdc:	mov	r2, #85	; 0x55
   15fe0:	ldr	r1, [pc, #1516]	; 165d4 <__assert_fail@plt+0x5678>
   15fe4:	ldr	r0, [pc, #1516]	; 165d8 <__assert_fail@plt+0x567c>
   15fe8:	bl	10f5c <__assert_fail@plt>
   15fec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15ff0:	cmp	r3, #0
   15ff4:	bne	16000 <__assert_fail@plt+0x50a4>
   15ff8:	sub	r3, fp, #36	; 0x24
   15ffc:	b	16004 <__assert_fail@plt+0x50a8>
   16000:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16004:	str	r3, [fp, #-32]	; 0xffffffe0
   16008:	bl	10e9c <__errno_location@plt>
   1600c:	mov	r2, r0
   16010:	mov	r3, #0
   16014:	str	r3, [r2]
   16018:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1601c:	str	r3, [fp, #-12]
   16020:	ldr	r3, [fp, #-12]
   16024:	ldrb	r3, [r3]
   16028:	strb	r3, [fp, #-13]
   1602c:	b	16048 <__assert_fail@plt+0x50ec>
   16030:	ldr	r3, [fp, #-12]
   16034:	add	r3, r3, #1
   16038:	str	r3, [fp, #-12]
   1603c:	ldr	r3, [fp, #-12]
   16040:	ldrb	r3, [r3]
   16044:	strb	r3, [fp, #-13]
   16048:	bl	10e54 <__ctype_b_loc@plt>
   1604c:	mov	r3, r0
   16050:	ldr	r2, [r3]
   16054:	ldrb	r3, [fp, #-13]
   16058:	lsl	r3, r3, #1
   1605c:	add	r3, r2, r3
   16060:	ldrh	r3, [r3]
   16064:	and	r3, r3, #8192	; 0x2000
   16068:	cmp	r3, #0
   1606c:	bne	16030 <__assert_fail@plt+0x50d4>
   16070:	ldrb	r3, [fp, #-13]
   16074:	cmp	r3, #45	; 0x2d
   16078:	bne	16084 <__assert_fail@plt+0x5128>
   1607c:	mov	r3, #4
   16080:	b	165c4 <__assert_fail@plt+0x5668>
   16084:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16088:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1608c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16090:	bl	10ecc <strtoumax@plt>
   16094:	mov	r2, r0
   16098:	mov	r3, r1
   1609c:	strd	r2, [fp, #-44]	; 0xffffffd4
   160a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   160a4:	ldr	r2, [r3]
   160a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   160ac:	cmp	r2, r3
   160b0:	bne	16110 <__assert_fail@plt+0x51b4>
   160b4:	ldr	r3, [fp, #4]
   160b8:	cmp	r3, #0
   160bc:	beq	16108 <__assert_fail@plt+0x51ac>
   160c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   160c4:	ldr	r3, [r3]
   160c8:	ldrb	r3, [r3]
   160cc:	cmp	r3, #0
   160d0:	beq	16108 <__assert_fail@plt+0x51ac>
   160d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   160d8:	ldr	r3, [r3]
   160dc:	ldrb	r3, [r3]
   160e0:	mov	r1, r3
   160e4:	ldr	r0, [fp, #4]
   160e8:	bl	10e84 <strchr@plt>
   160ec:	mov	r3, r0
   160f0:	cmp	r3, #0
   160f4:	beq	16108 <__assert_fail@plt+0x51ac>
   160f8:	mov	r2, #1
   160fc:	mov	r3, #0
   16100:	strd	r2, [fp, #-44]	; 0xffffffd4
   16104:	b	16148 <__assert_fail@plt+0x51ec>
   16108:	mov	r3, #4
   1610c:	b	165c4 <__assert_fail@plt+0x5668>
   16110:	bl	10e9c <__errno_location@plt>
   16114:	mov	r3, r0
   16118:	ldr	r3, [r3]
   1611c:	cmp	r3, #0
   16120:	beq	16148 <__assert_fail@plt+0x51ec>
   16124:	bl	10e9c <__errno_location@plt>
   16128:	mov	r3, r0
   1612c:	ldr	r3, [r3]
   16130:	cmp	r3, #34	; 0x22
   16134:	beq	16140 <__assert_fail@plt+0x51e4>
   16138:	mov	r3, #4
   1613c:	b	165c4 <__assert_fail@plt+0x5668>
   16140:	mov	r3, #1
   16144:	str	r3, [fp, #-8]
   16148:	ldr	r3, [fp, #4]
   1614c:	cmp	r3, #0
   16150:	bne	16168 <__assert_fail@plt+0x520c>
   16154:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16158:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1615c:	strd	r2, [r1]
   16160:	ldr	r3, [fp, #-8]
   16164:	b	165c4 <__assert_fail@plt+0x5668>
   16168:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1616c:	ldr	r3, [r3]
   16170:	ldrb	r3, [r3]
   16174:	cmp	r3, #0
   16178:	beq	165b4 <__assert_fail@plt+0x5658>
   1617c:	mov	r3, #1024	; 0x400
   16180:	str	r3, [fp, #-20]	; 0xffffffec
   16184:	mov	r3, #1
   16188:	str	r3, [fp, #-24]	; 0xffffffe8
   1618c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16190:	ldr	r3, [r3]
   16194:	ldrb	r3, [r3]
   16198:	mov	r1, r3
   1619c:	ldr	r0, [fp, #4]
   161a0:	bl	10e84 <strchr@plt>
   161a4:	mov	r3, r0
   161a8:	cmp	r3, #0
   161ac:	bne	161c8 <__assert_fail@plt+0x526c>
   161b0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   161b4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   161b8:	strd	r2, [r1]
   161bc:	ldr	r3, [fp, #-8]
   161c0:	orr	r3, r3, #2
   161c4:	b	165c4 <__assert_fail@plt+0x5668>
   161c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   161cc:	ldr	r3, [r3]
   161d0:	ldrb	r3, [r3]
   161d4:	sub	r3, r3, #69	; 0x45
   161d8:	cmp	r3, #47	; 0x2f
   161dc:	ldrls	pc, [pc, r3, lsl #2]
   161e0:	b	1632c <__assert_fail@plt+0x53d0>
   161e4:	andeq	r6, r1, r4, lsr #5
   161e8:	andeq	r6, r1, ip, lsr #6
   161ec:	andeq	r6, r1, r4, lsr #5
   161f0:	andeq	r6, r1, ip, lsr #6
   161f4:	andeq	r6, r1, ip, lsr #6
   161f8:	andeq	r6, r1, ip, lsr #6
   161fc:	andeq	r6, r1, r4, lsr #5
   16200:	andeq	r6, r1, ip, lsr #6
   16204:	andeq	r6, r1, r4, lsr #5
   16208:	andeq	r6, r1, ip, lsr #6
   1620c:	andeq	r6, r1, ip, lsr #6
   16210:	andeq	r6, r1, r4, lsr #5
   16214:	andeq	r6, r1, ip, lsr #6
   16218:	andeq	r6, r1, ip, lsr #6
   1621c:	andeq	r6, r1, ip, lsr #6
   16220:	andeq	r6, r1, r4, lsr #5
   16224:	andeq	r6, r1, ip, lsr #6
   16228:	andeq	r6, r1, ip, lsr #6
   1622c:	andeq	r6, r1, ip, lsr #6
   16230:	andeq	r6, r1, ip, lsr #6
   16234:	andeq	r6, r1, r4, lsr #5
   16238:	andeq	r6, r1, r4, lsr #5
   1623c:	andeq	r6, r1, ip, lsr #6
   16240:	andeq	r6, r1, ip, lsr #6
   16244:	andeq	r6, r1, ip, lsr #6
   16248:	andeq	r6, r1, ip, lsr #6
   1624c:	andeq	r6, r1, ip, lsr #6
   16250:	andeq	r6, r1, ip, lsr #6
   16254:	andeq	r6, r1, ip, lsr #6
   16258:	andeq	r6, r1, ip, lsr #6
   1625c:	andeq	r6, r1, ip, lsr #6
   16260:	andeq	r6, r1, ip, lsr #6
   16264:	andeq	r6, r1, ip, lsr #6
   16268:	andeq	r6, r1, ip, lsr #6
   1626c:	andeq	r6, r1, r4, lsr #5
   16270:	andeq	r6, r1, ip, lsr #6
   16274:	andeq	r6, r1, ip, lsr #6
   16278:	andeq	r6, r1, ip, lsr #6
   1627c:	andeq	r6, r1, r4, lsr #5
   16280:	andeq	r6, r1, ip, lsr #6
   16284:	andeq	r6, r1, r4, lsr #5
   16288:	andeq	r6, r1, ip, lsr #6
   1628c:	andeq	r6, r1, ip, lsr #6
   16290:	andeq	r6, r1, ip, lsr #6
   16294:	andeq	r6, r1, ip, lsr #6
   16298:	andeq	r6, r1, ip, lsr #6
   1629c:	andeq	r6, r1, ip, lsr #6
   162a0:	andeq	r6, r1, r4, lsr #5
   162a4:	mov	r1, #48	; 0x30
   162a8:	ldr	r0, [fp, #4]
   162ac:	bl	10e84 <strchr@plt>
   162b0:	mov	r3, r0
   162b4:	cmp	r3, #0
   162b8:	beq	1632c <__assert_fail@plt+0x53d0>
   162bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162c0:	ldr	r3, [r3]
   162c4:	add	r3, r3, #1
   162c8:	ldrb	r3, [r3]
   162cc:	cmp	r3, #68	; 0x44
   162d0:	beq	16310 <__assert_fail@plt+0x53b4>
   162d4:	cmp	r3, #105	; 0x69
   162d8:	beq	162e8 <__assert_fail@plt+0x538c>
   162dc:	cmp	r3, #66	; 0x42
   162e0:	beq	16310 <__assert_fail@plt+0x53b4>
   162e4:	b	1632c <__assert_fail@plt+0x53d0>
   162e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162ec:	ldr	r3, [r3]
   162f0:	add	r3, r3, #2
   162f4:	ldrb	r3, [r3]
   162f8:	cmp	r3, #66	; 0x42
   162fc:	bne	16328 <__assert_fail@plt+0x53cc>
   16300:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16304:	add	r3, r3, #2
   16308:	str	r3, [fp, #-24]	; 0xffffffe8
   1630c:	b	16328 <__assert_fail@plt+0x53cc>
   16310:	mov	r3, #1000	; 0x3e8
   16314:	str	r3, [fp, #-20]	; 0xffffffec
   16318:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1631c:	add	r3, r3, #1
   16320:	str	r3, [fp, #-24]	; 0xffffffe8
   16324:	b	1632c <__assert_fail@plt+0x53d0>
   16328:	nop			; (mov r0, r0)
   1632c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16330:	ldr	r3, [r3]
   16334:	ldrb	r3, [r3]
   16338:	sub	r3, r3, #66	; 0x42
   1633c:	cmp	r3, #53	; 0x35
   16340:	ldrls	pc, [pc, r3, lsl #2]
   16344:	b	16554 <__assert_fail@plt+0x55f8>
   16348:	andeq	r6, r1, r8, lsr r4
   1634c:	andeq	r6, r1, r4, asr r5
   16350:	andeq	r6, r1, r4, asr r5
   16354:	andeq	r6, r1, ip, asr r4
   16358:	andeq	r6, r1, r4, asr r5
   1635c:	andeq	r6, r1, r8, ror r4
   16360:	andeq	r6, r1, r4, asr r5
   16364:	andeq	r6, r1, r4, asr r5
   16368:	andeq	r6, r1, r4, asr r5
   1636c:	muleq	r1, r4, r4
   16370:	andeq	r6, r1, r4, asr r5
   16374:			; <UNDEFINED> instruction: 0x000164b0
   16378:	andeq	r6, r1, r4, asr r5
   1637c:	andeq	r6, r1, r4, asr r5
   16380:	andeq	r6, r1, ip, asr #9
   16384:	andeq	r6, r1, r4, asr r5
   16388:	andeq	r6, r1, r4, asr r5
   1638c:	andeq	r6, r1, r4, asr r5
   16390:	andeq	r6, r1, r8, ror #9
   16394:	andeq	r6, r1, r4, asr r5
   16398:	andeq	r6, r1, r4, asr r5
   1639c:	andeq	r6, r1, r4, asr r5
   163a0:	andeq	r6, r1, r4, asr r5
   163a4:	andeq	r6, r1, ip, lsl r5
   163a8:	andeq	r6, r1, r8, lsr r5
   163ac:	andeq	r6, r1, r4, asr r5
   163b0:	andeq	r6, r1, r4, asr r5
   163b4:	andeq	r6, r1, r4, asr r5
   163b8:	andeq	r6, r1, r4, asr r5
   163bc:	andeq	r6, r1, r4, asr r5
   163c0:	andeq	r6, r1, r4, asr r5
   163c4:	andeq	r6, r1, r4, asr r5
   163c8:	andeq	r6, r1, r0, lsr #8
   163cc:	andeq	r6, r1, r0, asr r4
   163d0:	andeq	r6, r1, r4, asr r5
   163d4:	andeq	r6, r1, r4, asr r5
   163d8:	andeq	r6, r1, r4, asr r5
   163dc:	andeq	r6, r1, r8, ror r4
   163e0:	andeq	r6, r1, r4, asr r5
   163e4:	andeq	r6, r1, r4, asr r5
   163e8:	andeq	r6, r1, r4, asr r5
   163ec:	muleq	r1, r4, r4
   163f0:	andeq	r6, r1, r4, asr r5
   163f4:			; <UNDEFINED> instruction: 0x000164b0
   163f8:	andeq	r6, r1, r4, asr r5
   163fc:	andeq	r6, r1, r4, asr r5
   16400:	andeq	r6, r1, r4, asr r5
   16404:	andeq	r6, r1, r4, asr r5
   16408:	andeq	r6, r1, r4, asr r5
   1640c:	andeq	r6, r1, r4, asr r5
   16410:	andeq	r6, r1, r8, ror #9
   16414:	andeq	r6, r1, r4, asr r5
   16418:	andeq	r6, r1, r4, asr r5
   1641c:	andeq	r6, r1, r4, lsl #10
   16420:	sub	r3, fp, #44	; 0x2c
   16424:	mov	r1, #512	; 0x200
   16428:	mov	r0, r3
   1642c:	bl	15dd4 <__assert_fail@plt+0x4e78>
   16430:	str	r0, [fp, #-28]	; 0xffffffe4
   16434:	b	1656c <__assert_fail@plt+0x5610>
   16438:	sub	r3, fp, #44	; 0x2c
   1643c:	mov	r1, #1024	; 0x400
   16440:	mov	r0, r3
   16444:	bl	15dd4 <__assert_fail@plt+0x4e78>
   16448:	str	r0, [fp, #-28]	; 0xffffffe4
   1644c:	b	1656c <__assert_fail@plt+0x5610>
   16450:	mov	r3, #0
   16454:	str	r3, [fp, #-28]	; 0xffffffe4
   16458:	b	1656c <__assert_fail@plt+0x5610>
   1645c:	sub	r3, fp, #44	; 0x2c
   16460:	mov	r2, #6
   16464:	ldr	r1, [fp, #-20]	; 0xffffffec
   16468:	mov	r0, r3
   1646c:	bl	15f38 <__assert_fail@plt+0x4fdc>
   16470:	str	r0, [fp, #-28]	; 0xffffffe4
   16474:	b	1656c <__assert_fail@plt+0x5610>
   16478:	sub	r3, fp, #44	; 0x2c
   1647c:	mov	r2, #3
   16480:	ldr	r1, [fp, #-20]	; 0xffffffec
   16484:	mov	r0, r3
   16488:	bl	15f38 <__assert_fail@plt+0x4fdc>
   1648c:	str	r0, [fp, #-28]	; 0xffffffe4
   16490:	b	1656c <__assert_fail@plt+0x5610>
   16494:	sub	r3, fp, #44	; 0x2c
   16498:	mov	r2, #1
   1649c:	ldr	r1, [fp, #-20]	; 0xffffffec
   164a0:	mov	r0, r3
   164a4:	bl	15f38 <__assert_fail@plt+0x4fdc>
   164a8:	str	r0, [fp, #-28]	; 0xffffffe4
   164ac:	b	1656c <__assert_fail@plt+0x5610>
   164b0:	sub	r3, fp, #44	; 0x2c
   164b4:	mov	r2, #2
   164b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   164bc:	mov	r0, r3
   164c0:	bl	15f38 <__assert_fail@plt+0x4fdc>
   164c4:	str	r0, [fp, #-28]	; 0xffffffe4
   164c8:	b	1656c <__assert_fail@plt+0x5610>
   164cc:	sub	r3, fp, #44	; 0x2c
   164d0:	mov	r2, #5
   164d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   164d8:	mov	r0, r3
   164dc:	bl	15f38 <__assert_fail@plt+0x4fdc>
   164e0:	str	r0, [fp, #-28]	; 0xffffffe4
   164e4:	b	1656c <__assert_fail@plt+0x5610>
   164e8:	sub	r3, fp, #44	; 0x2c
   164ec:	mov	r2, #4
   164f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   164f4:	mov	r0, r3
   164f8:	bl	15f38 <__assert_fail@plt+0x4fdc>
   164fc:	str	r0, [fp, #-28]	; 0xffffffe4
   16500:	b	1656c <__assert_fail@plt+0x5610>
   16504:	sub	r3, fp, #44	; 0x2c
   16508:	mov	r1, #2
   1650c:	mov	r0, r3
   16510:	bl	15dd4 <__assert_fail@plt+0x4e78>
   16514:	str	r0, [fp, #-28]	; 0xffffffe4
   16518:	b	1656c <__assert_fail@plt+0x5610>
   1651c:	sub	r3, fp, #44	; 0x2c
   16520:	mov	r2, #8
   16524:	ldr	r1, [fp, #-20]	; 0xffffffec
   16528:	mov	r0, r3
   1652c:	bl	15f38 <__assert_fail@plt+0x4fdc>
   16530:	str	r0, [fp, #-28]	; 0xffffffe4
   16534:	b	1656c <__assert_fail@plt+0x5610>
   16538:	sub	r3, fp, #44	; 0x2c
   1653c:	mov	r2, #7
   16540:	ldr	r1, [fp, #-20]	; 0xffffffec
   16544:	mov	r0, r3
   16548:	bl	15f38 <__assert_fail@plt+0x4fdc>
   1654c:	str	r0, [fp, #-28]	; 0xffffffe4
   16550:	b	1656c <__assert_fail@plt+0x5610>
   16554:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16558:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1655c:	strd	r2, [r1]
   16560:	ldr	r3, [fp, #-8]
   16564:	orr	r3, r3, #2
   16568:	b	165c4 <__assert_fail@plt+0x5668>
   1656c:	ldr	r2, [fp, #-8]
   16570:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16574:	orr	r3, r2, r3
   16578:	str	r3, [fp, #-8]
   1657c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16580:	ldr	r2, [r3]
   16584:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16588:	add	r2, r2, r3
   1658c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16590:	str	r2, [r3]
   16594:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16598:	ldr	r3, [r3]
   1659c:	ldrb	r3, [r3]
   165a0:	cmp	r3, #0
   165a4:	beq	165b4 <__assert_fail@plt+0x5658>
   165a8:	ldr	r3, [fp, #-8]
   165ac:	orr	r3, r3, #2
   165b0:	str	r3, [fp, #-8]
   165b4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   165b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   165bc:	strd	r2, [r1]
   165c0:	ldr	r3, [fp, #-8]
   165c4:	mov	r0, r3
   165c8:	sub	sp, fp, #4
   165cc:	pop	{fp, pc}
   165d0:	andeq	r8, r1, r0, lsl #8
   165d4:	andeq	r8, r1, r8, asr #7
   165d8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   165dc:	push	{r4, r5, fp, lr}
   165e0:	add	fp, sp, #12
   165e4:	sub	sp, sp, #16
   165e8:	str	r0, [fp, #-24]	; 0xffffffe8
   165ec:	str	r1, [fp, #-28]	; 0xffffffe4
   165f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165f4:	cmp	r3, #0
   165f8:	beq	16608 <__assert_fail@plt+0x56ac>
   165fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16600:	cmp	r3, #0
   16604:	bne	16618 <__assert_fail@plt+0x56bc>
   16608:	mov	r3, #1
   1660c:	str	r3, [fp, #-28]	; 0xffffffe4
   16610:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16614:	str	r3, [fp, #-24]	; 0xffffffe8
   16618:	mov	r1, #0
   1661c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16620:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16624:	umull	r2, r3, r2, r3
   16628:	mov	r4, r3
   1662c:	mov	r5, #0
   16630:	cmp	r4, #0
   16634:	beq	1663c <__assert_fail@plt+0x56e0>
   16638:	mov	r1, #1
   1663c:	cmp	r2, #0
   16640:	bge	16648 <__assert_fail@plt+0x56ec>
   16644:	mov	r1, #1
   16648:	mov	r3, r2
   1664c:	str	r3, [fp, #-20]	; 0xffffffec
   16650:	mov	r3, r1
   16654:	and	r3, r3, #1
   16658:	uxtb	r3, r3
   1665c:	cmp	r3, #0
   16660:	beq	1667c <__assert_fail@plt+0x5720>
   16664:	bl	10e9c <__errno_location@plt>
   16668:	mov	r2, r0
   1666c:	mov	r3, #12
   16670:	str	r3, [r2]
   16674:	mov	r3, #0
   16678:	b	16694 <__assert_fail@plt+0x5738>
   1667c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16680:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16684:	bl	10ce0 <calloc@plt>
   16688:	mov	r3, r0
   1668c:	str	r3, [fp, #-16]
   16690:	ldr	r3, [fp, #-16]
   16694:	mov	r0, r3
   16698:	sub	sp, fp, #12
   1669c:	pop	{r4, r5, fp, pc}
   166a0:	push	{r4, r5, fp, lr}
   166a4:	add	fp, sp, #12
   166a8:	sub	sp, sp, #16
   166ac:	str	r0, [fp, #-24]	; 0xffffffe8
   166b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166b4:	cmp	r3, #0
   166b8:	bne	166c4 <__assert_fail@plt+0x5768>
   166bc:	mov	r3, #1
   166c0:	str	r3, [fp, #-24]	; 0xffffffe8
   166c4:	mov	r1, #0
   166c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166cc:	mov	r2, r3
   166d0:	mov	r3, #0
   166d4:	mov	r4, r3
   166d8:	mov	r5, #0
   166dc:	cmp	r4, #0
   166e0:	beq	166e8 <__assert_fail@plt+0x578c>
   166e4:	mov	r1, #1
   166e8:	cmp	r2, #0
   166ec:	bge	166f4 <__assert_fail@plt+0x5798>
   166f0:	mov	r1, #1
   166f4:	mov	r3, r2
   166f8:	str	r3, [fp, #-20]	; 0xffffffec
   166fc:	mov	r3, r1
   16700:	and	r3, r3, #1
   16704:	uxtb	r3, r3
   16708:	cmp	r3, #0
   1670c:	beq	16728 <__assert_fail@plt+0x57cc>
   16710:	bl	10e9c <__errno_location@plt>
   16714:	mov	r2, r0
   16718:	mov	r3, #12
   1671c:	str	r3, [r2]
   16720:	mov	r3, #0
   16724:	b	1673c <__assert_fail@plt+0x57e0>
   16728:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1672c:	bl	10e18 <malloc@plt>
   16730:	mov	r3, r0
   16734:	str	r3, [fp, #-16]
   16738:	ldr	r3, [fp, #-16]
   1673c:	mov	r0, r3
   16740:	sub	sp, fp, #12
   16744:	pop	{r4, r5, fp, pc}
   16748:	push	{r4, r5, fp, lr}
   1674c:	add	fp, sp, #12
   16750:	sub	sp, sp, #16
   16754:	str	r0, [fp, #-24]	; 0xffffffe8
   16758:	str	r1, [fp, #-28]	; 0xffffffe4
   1675c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16760:	cmp	r3, #0
   16764:	bne	16778 <__assert_fail@plt+0x581c>
   16768:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1676c:	bl	166a0 <__assert_fail@plt+0x5744>
   16770:	mov	r3, r0
   16774:	b	1680c <__assert_fail@plt+0x58b0>
   16778:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1677c:	cmp	r3, #0
   16780:	bne	16794 <__assert_fail@plt+0x5838>
   16784:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16788:	bl	16988 <__assert_fail@plt+0x5a2c>
   1678c:	mov	r3, #0
   16790:	b	1680c <__assert_fail@plt+0x58b0>
   16794:	mov	r1, #0
   16798:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1679c:	mov	r2, r3
   167a0:	mov	r3, #0
   167a4:	mov	r4, r3
   167a8:	mov	r5, #0
   167ac:	cmp	r4, #0
   167b0:	beq	167b8 <__assert_fail@plt+0x585c>
   167b4:	mov	r1, #1
   167b8:	cmp	r2, #0
   167bc:	bge	167c4 <__assert_fail@plt+0x5868>
   167c0:	mov	r1, #1
   167c4:	mov	r3, r2
   167c8:	str	r3, [fp, #-20]	; 0xffffffec
   167cc:	mov	r3, r1
   167d0:	and	r3, r3, #1
   167d4:	uxtb	r3, r3
   167d8:	cmp	r3, #0
   167dc:	beq	167f8 <__assert_fail@plt+0x589c>
   167e0:	bl	10e9c <__errno_location@plt>
   167e4:	mov	r2, r0
   167e8:	mov	r3, #12
   167ec:	str	r3, [r2]
   167f0:	mov	r3, #0
   167f4:	b	1680c <__assert_fail@plt+0x58b0>
   167f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   167fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16800:	bl	10da0 <realloc@plt>
   16804:	str	r0, [fp, #-16]
   16808:	ldr	r3, [fp, #-16]
   1680c:	mov	r0, r3
   16810:	sub	sp, fp, #12
   16814:	pop	{r4, r5, fp, pc}
   16818:	push	{r4, r5, fp, lr}
   1681c:	add	fp, sp, #12
   16820:	sub	sp, sp, #16
   16824:	str	r0, [fp, #-24]	; 0xffffffe8
   16828:	str	r1, [fp, #-28]	; 0xffffffe4
   1682c:	ldr	r5, [fp, #-24]	; 0xffffffe8
   16830:	ldr	r4, [fp, #-28]	; 0xffffffe4
   16834:	cmp	r5, r4
   16838:	bne	16844 <__assert_fail@plt+0x58e8>
   1683c:	mov	r3, #0
   16840:	b	168a4 <__assert_fail@plt+0x5948>
   16844:	ldrb	r3, [r5]
   16848:	mov	r0, r3
   1684c:	bl	1717c <__assert_fail@plt+0x6220>
   16850:	mov	r3, r0
   16854:	strb	r3, [fp, #-13]
   16858:	ldrb	r3, [r4]
   1685c:	mov	r0, r3
   16860:	bl	1717c <__assert_fail@plt+0x6220>
   16864:	mov	r3, r0
   16868:	strb	r3, [fp, #-14]
   1686c:	ldrb	r3, [fp, #-13]
   16870:	cmp	r3, #0
   16874:	beq	16894 <__assert_fail@plt+0x5938>
   16878:	add	r5, r5, #1
   1687c:	add	r4, r4, #1
   16880:	ldrb	r2, [fp, #-13]
   16884:	ldrb	r3, [fp, #-14]
   16888:	cmp	r2, r3
   1688c:	beq	16844 <__assert_fail@plt+0x58e8>
   16890:	b	16898 <__assert_fail@plt+0x593c>
   16894:	nop			; (mov r0, r0)
   16898:	ldrb	r2, [fp, #-13]
   1689c:	ldrb	r3, [fp, #-14]
   168a0:	sub	r3, r2, r3
   168a4:	mov	r0, r3
   168a8:	sub	sp, fp, #12
   168ac:	pop	{r4, r5, fp, pc}
   168b0:	push	{fp, lr}
   168b4:	add	fp, sp, #4
   168b8:	sub	sp, sp, #16
   168bc:	str	r0, [fp, #-16]
   168c0:	ldr	r0, [fp, #-16]
   168c4:	bl	10de8 <__fpending@plt>
   168c8:	mov	r3, r0
   168cc:	cmp	r3, #0
   168d0:	movne	r3, #1
   168d4:	moveq	r3, #0
   168d8:	strb	r3, [fp, #-5]
   168dc:	ldr	r0, [fp, #-16]
   168e0:	bl	10df4 <ferror_unlocked@plt>
   168e4:	mov	r3, r0
   168e8:	cmp	r3, #0
   168ec:	movne	r3, #1
   168f0:	moveq	r3, #0
   168f4:	strb	r3, [fp, #-6]
   168f8:	ldr	r0, [fp, #-16]
   168fc:	bl	11ed8 <__assert_fail@plt+0xf7c>
   16900:	mov	r3, r0
   16904:	cmp	r3, #0
   16908:	movne	r3, #1
   1690c:	moveq	r3, #0
   16910:	strb	r3, [fp, #-7]
   16914:	ldrb	r3, [fp, #-6]
   16918:	cmp	r3, #0
   1691c:	bne	1694c <__assert_fail@plt+0x59f0>
   16920:	ldrb	r3, [fp, #-7]
   16924:	cmp	r3, #0
   16928:	beq	16978 <__assert_fail@plt+0x5a1c>
   1692c:	ldrb	r3, [fp, #-5]
   16930:	cmp	r3, #0
   16934:	bne	1694c <__assert_fail@plt+0x59f0>
   16938:	bl	10e9c <__errno_location@plt>
   1693c:	mov	r3, r0
   16940:	ldr	r3, [r3]
   16944:	cmp	r3, #9
   16948:	beq	16978 <__assert_fail@plt+0x5a1c>
   1694c:	ldrb	r3, [fp, #-7]
   16950:	eor	r3, r3, #1
   16954:	uxtb	r3, r3
   16958:	cmp	r3, #0
   1695c:	beq	16970 <__assert_fail@plt+0x5a14>
   16960:	bl	10e9c <__errno_location@plt>
   16964:	mov	r2, r0
   16968:	mov	r3, #0
   1696c:	str	r3, [r2]
   16970:	mvn	r3, #0
   16974:	b	1697c <__assert_fail@plt+0x5a20>
   16978:	mov	r3, #0
   1697c:	mov	r0, r3
   16980:	sub	sp, fp, #4
   16984:	pop	{fp, pc}
   16988:	push	{r4, fp, lr}
   1698c:	add	fp, sp, #8
   16990:	sub	sp, sp, #20
   16994:	str	r0, [fp, #-24]	; 0xffffffe8
   16998:	bl	10e9c <__errno_location@plt>
   1699c:	mov	r3, r0
   169a0:	ldr	r3, [r3]
   169a4:	str	r3, [fp, #-20]	; 0xffffffec
   169a8:	bl	10e9c <__errno_location@plt>
   169ac:	mov	r3, r0
   169b0:	ldr	r3, [r3]
   169b4:	str	r3, [fp, #-16]
   169b8:	bl	10e9c <__errno_location@plt>
   169bc:	mov	r2, r0
   169c0:	mov	r3, #0
   169c4:	str	r3, [r2]
   169c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   169cc:	bl	10d40 <free@plt>
   169d0:	bl	10e9c <__errno_location@plt>
   169d4:	mov	r4, r0
   169d8:	bl	10e9c <__errno_location@plt>
   169dc:	mov	r3, r0
   169e0:	ldr	r3, [r3]
   169e4:	cmp	r3, #0
   169e8:	moveq	r3, #1
   169ec:	movne	r3, #0
   169f0:	uxtb	r3, r3
   169f4:	lsl	r3, r3, #2
   169f8:	sub	r2, fp, #12
   169fc:	add	r3, r2, r3
   16a00:	ldr	r3, [r3, #-8]
   16a04:	str	r3, [r4]
   16a08:	nop			; (mov r0, r0)
   16a0c:	sub	sp, fp, #8
   16a10:	pop	{r4, fp, pc}
   16a14:	push	{fp, lr}
   16a18:	add	fp, sp, #4
   16a1c:	bl	10e9c <__errno_location@plt>
   16a20:	mov	r2, r0
   16a24:	mov	r3, #12
   16a28:	str	r3, [r2]
   16a2c:	mov	r3, #0
   16a30:	mov	r0, r3
   16a34:	pop	{fp, pc}
   16a38:	push	{fp, lr}
   16a3c:	add	fp, sp, #4
   16a40:	sub	sp, sp, #8
   16a44:	str	r0, [fp, #-8]
   16a48:	ldr	r3, [fp, #-8]
   16a4c:	mov	r0, r3
   16a50:	bl	166a0 <__assert_fail@plt+0x5744>
   16a54:	mov	r3, r0
   16a58:	mov	r0, r3
   16a5c:	sub	sp, fp, #4
   16a60:	pop	{fp, pc}
   16a64:	push	{fp, lr}
   16a68:	add	fp, sp, #4
   16a6c:	sub	sp, sp, #8
   16a70:	str	r0, [fp, #-8]
   16a74:	str	r1, [fp, #-12]
   16a78:	ldr	r3, [fp, #-12]
   16a7c:	cmp	r3, #0
   16a80:	moveq	r3, #1
   16a84:	movne	r3, #0
   16a88:	uxtb	r3, r3
   16a8c:	mov	r2, r3
   16a90:	ldr	r3, [fp, #-12]
   16a94:	orr	r3, r2, r3
   16a98:	mov	r1, r3
   16a9c:	ldr	r0, [fp, #-8]
   16aa0:	bl	16748 <__assert_fail@plt+0x57ec>
   16aa4:	mov	r3, r0
   16aa8:	mov	r0, r3
   16aac:	sub	sp, fp, #4
   16ab0:	pop	{fp, pc}
   16ab4:	push	{fp, lr}
   16ab8:	add	fp, sp, #4
   16abc:	sub	sp, sp, #8
   16ac0:	str	r0, [fp, #-8]
   16ac4:	str	r1, [fp, #-12]
   16ac8:	ldr	r3, [fp, #-8]
   16acc:	ldr	r2, [fp, #-12]
   16ad0:	mov	r1, r2
   16ad4:	mov	r0, r3
   16ad8:	bl	165dc <__assert_fail@plt+0x5680>
   16adc:	mov	r3, r0
   16ae0:	mov	r0, r3
   16ae4:	sub	sp, fp, #4
   16ae8:	pop	{fp, pc}
   16aec:	push	{fp, lr}
   16af0:	add	fp, sp, #4
   16af4:	sub	sp, sp, #16
   16af8:	str	r0, [fp, #-8]
   16afc:	str	r1, [fp, #-12]
   16b00:	str	r2, [fp, #-16]
   16b04:	ldr	r3, [fp, #-12]
   16b08:	cmp	r3, #0
   16b0c:	beq	16b1c <__assert_fail@plt+0x5bc0>
   16b10:	ldr	r3, [fp, #-16]
   16b14:	cmp	r3, #0
   16b18:	bne	16b2c <__assert_fail@plt+0x5bd0>
   16b1c:	mov	r3, #1
   16b20:	str	r3, [fp, #-16]
   16b24:	ldr	r3, [fp, #-16]
   16b28:	str	r3, [fp, #-12]
   16b2c:	ldr	r3, [fp, #-12]
   16b30:	ldr	r2, [fp, #-16]
   16b34:	mov	r1, r3
   16b38:	ldr	r0, [fp, #-8]
   16b3c:	bl	16c58 <__assert_fail@plt+0x5cfc>
   16b40:	mov	r3, r0
   16b44:	mov	r0, r3
   16b48:	sub	sp, fp, #4
   16b4c:	pop	{fp, pc}
   16b50:	push	{fp, lr}
   16b54:	add	fp, sp, #4
   16b58:	sub	sp, sp, #8
   16b5c:	mov	r0, #14
   16b60:	bl	10f08 <nl_langinfo@plt>
   16b64:	str	r0, [fp, #-8]
   16b68:	ldr	r3, [fp, #-8]
   16b6c:	cmp	r3, #0
   16b70:	bne	16b7c <__assert_fail@plt+0x5c20>
   16b74:	ldr	r3, [pc, #40]	; 16ba4 <__assert_fail@plt+0x5c48>
   16b78:	str	r3, [fp, #-8]
   16b7c:	ldr	r3, [fp, #-8]
   16b80:	ldrb	r3, [r3]
   16b84:	cmp	r3, #0
   16b88:	bne	16b94 <__assert_fail@plt+0x5c38>
   16b8c:	ldr	r3, [pc, #20]	; 16ba8 <__assert_fail@plt+0x5c4c>
   16b90:	str	r3, [fp, #-8]
   16b94:	ldr	r3, [fp, #-8]
   16b98:	mov	r0, r3
   16b9c:	sub	sp, fp, #4
   16ba0:	pop	{fp, pc}
   16ba4:	andeq	r8, r1, ip, lsl #8
   16ba8:	andeq	r8, r1, r0, lsl r4
   16bac:	push	{fp, lr}
   16bb0:	add	fp, sp, #4
   16bb4:	sub	sp, sp, #32
   16bb8:	str	r0, [fp, #-24]	; 0xffffffe8
   16bbc:	str	r1, [fp, #-28]	; 0xffffffe4
   16bc0:	str	r2, [fp, #-32]	; 0xffffffe0
   16bc4:	str	r3, [fp, #-36]	; 0xffffffdc
   16bc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16bcc:	cmp	r3, #0
   16bd0:	bne	16bdc <__assert_fail@plt+0x5c80>
   16bd4:	sub	r3, fp, #16
   16bd8:	str	r3, [fp, #-24]	; 0xffffffe8
   16bdc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16be0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16be4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16be8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16bec:	bl	10e00 <mbrtowc@plt>
   16bf0:	str	r0, [fp, #-8]
   16bf4:	ldr	r3, [fp, #-8]
   16bf8:	cmn	r3, #3
   16bfc:	bls	16c48 <__assert_fail@plt+0x5cec>
   16c00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16c04:	cmp	r3, #0
   16c08:	beq	16c48 <__assert_fail@plt+0x5cec>
   16c0c:	mov	r0, #0
   16c10:	bl	171fc <__assert_fail@plt+0x62a0>
   16c14:	mov	r3, r0
   16c18:	eor	r3, r3, #1
   16c1c:	uxtb	r3, r3
   16c20:	cmp	r3, #0
   16c24:	beq	16c48 <__assert_fail@plt+0x5cec>
   16c28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16c2c:	ldrb	r3, [r3]
   16c30:	strb	r3, [fp, #-9]
   16c34:	ldrb	r2, [fp, #-9]
   16c38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c3c:	str	r2, [r3]
   16c40:	mov	r3, #1
   16c44:	b	16c4c <__assert_fail@plt+0x5cf0>
   16c48:	ldr	r3, [fp, #-8]
   16c4c:	mov	r0, r3
   16c50:	sub	sp, fp, #4
   16c54:	pop	{fp, pc}
   16c58:	push	{fp, lr}
   16c5c:	add	fp, sp, #4
   16c60:	sub	sp, sp, #24
   16c64:	str	r0, [fp, #-16]
   16c68:	str	r1, [fp, #-20]	; 0xffffffec
   16c6c:	str	r2, [fp, #-24]	; 0xffffffe8
   16c70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c74:	cmp	r3, #0
   16c78:	beq	16cb4 <__assert_fail@plt+0x5d58>
   16c7c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16c80:	mvn	r0, #0
   16c84:	bl	17400 <__assert_fail@plt+0x64a4>
   16c88:	mov	r3, r0
   16c8c:	mov	r2, r3
   16c90:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c94:	cmp	r2, r3
   16c98:	bcs	16cb4 <__assert_fail@plt+0x5d58>
   16c9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ca0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16ca4:	mul	r3, r2, r3
   16ca8:	str	r3, [fp, #-8]
   16cac:	mov	r3, #1
   16cb0:	b	16cc8 <__assert_fail@plt+0x5d6c>
   16cb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16cbc:	mul	r3, r2, r3
   16cc0:	str	r3, [fp, #-8]
   16cc4:	mov	r3, #0
   16cc8:	cmp	r3, #0
   16ccc:	beq	16ce8 <__assert_fail@plt+0x5d8c>
   16cd0:	bl	10e9c <__errno_location@plt>
   16cd4:	mov	r2, r0
   16cd8:	mov	r3, #12
   16cdc:	str	r3, [r2]
   16ce0:	mov	r3, #0
   16ce4:	b	16cfc <__assert_fail@plt+0x5da0>
   16ce8:	ldr	r3, [fp, #-8]
   16cec:	mov	r1, r3
   16cf0:	ldr	r0, [fp, #-16]
   16cf4:	bl	16748 <__assert_fail@plt+0x57ec>
   16cf8:	mov	r3, r0
   16cfc:	mov	r0, r3
   16d00:	sub	sp, fp, #4
   16d04:	pop	{fp, pc}
   16d08:	push	{fp}		; (str fp, [sp, #-4]!)
   16d0c:	add	fp, sp, #0
   16d10:	sub	sp, sp, #12
   16d14:	str	r0, [fp, #-8]
   16d18:	ldr	r3, [fp, #-8]
   16d1c:	cmp	r3, #90	; 0x5a
   16d20:	bgt	16d3c <__assert_fail@plt+0x5de0>
   16d24:	cmp	r3, #65	; 0x41
   16d28:	bge	16d48 <__assert_fail@plt+0x5dec>
   16d2c:	sub	r3, r3, #48	; 0x30
   16d30:	cmp	r3, #9
   16d34:	bhi	16d50 <__assert_fail@plt+0x5df4>
   16d38:	b	16d48 <__assert_fail@plt+0x5dec>
   16d3c:	sub	r3, r3, #97	; 0x61
   16d40:	cmp	r3, #25
   16d44:	bhi	16d50 <__assert_fail@plt+0x5df4>
   16d48:	mov	r3, #1
   16d4c:	b	16d54 <__assert_fail@plt+0x5df8>
   16d50:	mov	r3, #0
   16d54:	mov	r0, r3
   16d58:	add	sp, fp, #0
   16d5c:	pop	{fp}		; (ldr fp, [sp], #4)
   16d60:	bx	lr
   16d64:	push	{fp}		; (str fp, [sp, #-4]!)
   16d68:	add	fp, sp, #0
   16d6c:	sub	sp, sp, #12
   16d70:	str	r0, [fp, #-8]
   16d74:	ldr	r3, [fp, #-8]
   16d78:	cmp	r3, #65	; 0x41
   16d7c:	blt	16d9c <__assert_fail@plt+0x5e40>
   16d80:	cmp	r3, #90	; 0x5a
   16d84:	ble	16d94 <__assert_fail@plt+0x5e38>
   16d88:	sub	r3, r3, #97	; 0x61
   16d8c:	cmp	r3, #25
   16d90:	bhi	16d9c <__assert_fail@plt+0x5e40>
   16d94:	mov	r3, #1
   16d98:	b	16da0 <__assert_fail@plt+0x5e44>
   16d9c:	mov	r3, #0
   16da0:	mov	r0, r3
   16da4:	add	sp, fp, #0
   16da8:	pop	{fp}		; (ldr fp, [sp], #4)
   16dac:	bx	lr
   16db0:	push	{fp}		; (str fp, [sp, #-4]!)
   16db4:	add	fp, sp, #0
   16db8:	sub	sp, sp, #12
   16dbc:	str	r0, [fp, #-8]
   16dc0:	ldr	r3, [fp, #-8]
   16dc4:	add	r3, r3, #0
   16dc8:	cmp	r3, #127	; 0x7f
   16dcc:	bhi	16dd8 <__assert_fail@plt+0x5e7c>
   16dd0:	mov	r3, #1
   16dd4:	b	16ddc <__assert_fail@plt+0x5e80>
   16dd8:	mov	r3, #0
   16ddc:	mov	r0, r3
   16de0:	add	sp, fp, #0
   16de4:	pop	{fp}		; (ldr fp, [sp], #4)
   16de8:	bx	lr
   16dec:	push	{fp}		; (str fp, [sp, #-4]!)
   16df0:	add	fp, sp, #0
   16df4:	sub	sp, sp, #12
   16df8:	str	r0, [fp, #-8]
   16dfc:	ldr	r3, [fp, #-8]
   16e00:	cmp	r3, #32
   16e04:	beq	16e14 <__assert_fail@plt+0x5eb8>
   16e08:	ldr	r3, [fp, #-8]
   16e0c:	cmp	r3, #9
   16e10:	bne	16e1c <__assert_fail@plt+0x5ec0>
   16e14:	mov	r3, #1
   16e18:	b	16e20 <__assert_fail@plt+0x5ec4>
   16e1c:	mov	r3, #0
   16e20:	and	r3, r3, #1
   16e24:	uxtb	r3, r3
   16e28:	mov	r0, r3
   16e2c:	add	sp, fp, #0
   16e30:	pop	{fp}		; (ldr fp, [sp], #4)
   16e34:	bx	lr
   16e38:	push	{fp}		; (str fp, [sp, #-4]!)
   16e3c:	add	fp, sp, #0
   16e40:	sub	sp, sp, #12
   16e44:	str	r0, [fp, #-8]
   16e48:	ldr	r3, [fp, #-8]
   16e4c:	cmp	r3, #0
   16e50:	blt	16e6c <__assert_fail@plt+0x5f10>
   16e54:	cmp	r3, #31
   16e58:	ble	16e64 <__assert_fail@plt+0x5f08>
   16e5c:	cmp	r3, #127	; 0x7f
   16e60:	bne	16e6c <__assert_fail@plt+0x5f10>
   16e64:	mov	r3, #1
   16e68:	b	16e70 <__assert_fail@plt+0x5f14>
   16e6c:	mov	r3, #0
   16e70:	mov	r0, r3
   16e74:	add	sp, fp, #0
   16e78:	pop	{fp}		; (ldr fp, [sp], #4)
   16e7c:	bx	lr
   16e80:	push	{fp}		; (str fp, [sp, #-4]!)
   16e84:	add	fp, sp, #0
   16e88:	sub	sp, sp, #12
   16e8c:	str	r0, [fp, #-8]
   16e90:	ldr	r3, [fp, #-8]
   16e94:	sub	r3, r3, #48	; 0x30
   16e98:	cmp	r3, #9
   16e9c:	bhi	16ea8 <__assert_fail@plt+0x5f4c>
   16ea0:	mov	r3, #1
   16ea4:	b	16eac <__assert_fail@plt+0x5f50>
   16ea8:	mov	r3, #0
   16eac:	mov	r0, r3
   16eb0:	add	sp, fp, #0
   16eb4:	pop	{fp}		; (ldr fp, [sp], #4)
   16eb8:	bx	lr
   16ebc:	push	{fp}		; (str fp, [sp, #-4]!)
   16ec0:	add	fp, sp, #0
   16ec4:	sub	sp, sp, #12
   16ec8:	str	r0, [fp, #-8]
   16ecc:	ldr	r3, [fp, #-8]
   16ed0:	sub	r3, r3, #33	; 0x21
   16ed4:	cmp	r3, #93	; 0x5d
   16ed8:	bhi	16ee4 <__assert_fail@plt+0x5f88>
   16edc:	mov	r3, #1
   16ee0:	b	16ee8 <__assert_fail@plt+0x5f8c>
   16ee4:	mov	r3, #0
   16ee8:	mov	r0, r3
   16eec:	add	sp, fp, #0
   16ef0:	pop	{fp}		; (ldr fp, [sp], #4)
   16ef4:	bx	lr
   16ef8:	push	{fp}		; (str fp, [sp, #-4]!)
   16efc:	add	fp, sp, #0
   16f00:	sub	sp, sp, #12
   16f04:	str	r0, [fp, #-8]
   16f08:	ldr	r3, [fp, #-8]
   16f0c:	sub	r3, r3, #97	; 0x61
   16f10:	cmp	r3, #25
   16f14:	bhi	16f20 <__assert_fail@plt+0x5fc4>
   16f18:	mov	r3, #1
   16f1c:	b	16f24 <__assert_fail@plt+0x5fc8>
   16f20:	mov	r3, #0
   16f24:	mov	r0, r3
   16f28:	add	sp, fp, #0
   16f2c:	pop	{fp}		; (ldr fp, [sp], #4)
   16f30:	bx	lr
   16f34:	push	{fp}		; (str fp, [sp, #-4]!)
   16f38:	add	fp, sp, #0
   16f3c:	sub	sp, sp, #12
   16f40:	str	r0, [fp, #-8]
   16f44:	ldr	r3, [fp, #-8]
   16f48:	sub	r3, r3, #32
   16f4c:	cmp	r3, #94	; 0x5e
   16f50:	bhi	16f5c <__assert_fail@plt+0x6000>
   16f54:	mov	r3, #1
   16f58:	b	16f60 <__assert_fail@plt+0x6004>
   16f5c:	mov	r3, #0
   16f60:	mov	r0, r3
   16f64:	add	sp, fp, #0
   16f68:	pop	{fp}		; (ldr fp, [sp], #4)
   16f6c:	bx	lr
   16f70:	push	{fp}		; (str fp, [sp, #-4]!)
   16f74:	add	fp, sp, #0
   16f78:	sub	sp, sp, #12
   16f7c:	str	r0, [fp, #-8]
   16f80:	ldr	r3, [fp, #-8]
   16f84:	cmp	r3, #64	; 0x40
   16f88:	bgt	16fa4 <__assert_fail@plt+0x6048>
   16f8c:	cmp	r3, #58	; 0x3a
   16f90:	bge	16fc0 <__assert_fail@plt+0x6064>
   16f94:	sub	r3, r3, #33	; 0x21
   16f98:	cmp	r3, #14
   16f9c:	bhi	16fc8 <__assert_fail@plt+0x606c>
   16fa0:	b	16fc0 <__assert_fail@plt+0x6064>
   16fa4:	cmp	r3, #91	; 0x5b
   16fa8:	blt	16fc8 <__assert_fail@plt+0x606c>
   16fac:	cmp	r3, #96	; 0x60
   16fb0:	ble	16fc0 <__assert_fail@plt+0x6064>
   16fb4:	sub	r3, r3, #123	; 0x7b
   16fb8:	cmp	r3, #3
   16fbc:	bhi	16fc8 <__assert_fail@plt+0x606c>
   16fc0:	mov	r3, #1
   16fc4:	b	16fcc <__assert_fail@plt+0x6070>
   16fc8:	mov	r3, #0
   16fcc:	mov	r0, r3
   16fd0:	add	sp, fp, #0
   16fd4:	pop	{fp}		; (ldr fp, [sp], #4)
   16fd8:	bx	lr
   16fdc:	push	{fp}		; (str fp, [sp, #-4]!)
   16fe0:	add	fp, sp, #0
   16fe4:	sub	sp, sp, #12
   16fe8:	str	r0, [fp, #-8]
   16fec:	ldr	r3, [fp, #-8]
   16ff0:	cmp	r3, #9
   16ff4:	blt	17010 <__assert_fail@plt+0x60b4>
   16ff8:	cmp	r3, #13
   16ffc:	ble	17008 <__assert_fail@plt+0x60ac>
   17000:	cmp	r3, #32
   17004:	bne	17010 <__assert_fail@plt+0x60b4>
   17008:	mov	r3, #1
   1700c:	b	17014 <__assert_fail@plt+0x60b8>
   17010:	mov	r3, #0
   17014:	mov	r0, r3
   17018:	add	sp, fp, #0
   1701c:	pop	{fp}		; (ldr fp, [sp], #4)
   17020:	bx	lr
   17024:	push	{fp}		; (str fp, [sp, #-4]!)
   17028:	add	fp, sp, #0
   1702c:	sub	sp, sp, #12
   17030:	str	r0, [fp, #-8]
   17034:	ldr	r3, [fp, #-8]
   17038:	sub	r3, r3, #65	; 0x41
   1703c:	cmp	r3, #25
   17040:	bhi	1704c <__assert_fail@plt+0x60f0>
   17044:	mov	r3, #1
   17048:	b	17050 <__assert_fail@plt+0x60f4>
   1704c:	mov	r3, #0
   17050:	mov	r0, r3
   17054:	add	sp, fp, #0
   17058:	pop	{fp}		; (ldr fp, [sp], #4)
   1705c:	bx	lr
   17060:	push	{fp}		; (str fp, [sp, #-4]!)
   17064:	add	fp, sp, #0
   17068:	sub	sp, sp, #12
   1706c:	str	r0, [fp, #-8]
   17070:	ldr	r3, [fp, #-8]
   17074:	sub	r3, r3, #48	; 0x30
   17078:	cmp	r3, #54	; 0x36
   1707c:	addls	pc, pc, r3, lsl #2
   17080:	b	17168 <__assert_fail@plt+0x620c>
   17084:	b	17160 <__assert_fail@plt+0x6204>
   17088:	b	17160 <__assert_fail@plt+0x6204>
   1708c:	b	17160 <__assert_fail@plt+0x6204>
   17090:	b	17160 <__assert_fail@plt+0x6204>
   17094:	b	17160 <__assert_fail@plt+0x6204>
   17098:	b	17160 <__assert_fail@plt+0x6204>
   1709c:	b	17160 <__assert_fail@plt+0x6204>
   170a0:	b	17160 <__assert_fail@plt+0x6204>
   170a4:	b	17160 <__assert_fail@plt+0x6204>
   170a8:	b	17160 <__assert_fail@plt+0x6204>
   170ac:	b	17168 <__assert_fail@plt+0x620c>
   170b0:	b	17168 <__assert_fail@plt+0x620c>
   170b4:	b	17168 <__assert_fail@plt+0x620c>
   170b8:	b	17168 <__assert_fail@plt+0x620c>
   170bc:	b	17168 <__assert_fail@plt+0x620c>
   170c0:	b	17168 <__assert_fail@plt+0x620c>
   170c4:	b	17168 <__assert_fail@plt+0x620c>
   170c8:	b	17160 <__assert_fail@plt+0x6204>
   170cc:	b	17160 <__assert_fail@plt+0x6204>
   170d0:	b	17160 <__assert_fail@plt+0x6204>
   170d4:	b	17160 <__assert_fail@plt+0x6204>
   170d8:	b	17160 <__assert_fail@plt+0x6204>
   170dc:	b	17160 <__assert_fail@plt+0x6204>
   170e0:	b	17168 <__assert_fail@plt+0x620c>
   170e4:	b	17168 <__assert_fail@plt+0x620c>
   170e8:	b	17168 <__assert_fail@plt+0x620c>
   170ec:	b	17168 <__assert_fail@plt+0x620c>
   170f0:	b	17168 <__assert_fail@plt+0x620c>
   170f4:	b	17168 <__assert_fail@plt+0x620c>
   170f8:	b	17168 <__assert_fail@plt+0x620c>
   170fc:	b	17168 <__assert_fail@plt+0x620c>
   17100:	b	17168 <__assert_fail@plt+0x620c>
   17104:	b	17168 <__assert_fail@plt+0x620c>
   17108:	b	17168 <__assert_fail@plt+0x620c>
   1710c:	b	17168 <__assert_fail@plt+0x620c>
   17110:	b	17168 <__assert_fail@plt+0x620c>
   17114:	b	17168 <__assert_fail@plt+0x620c>
   17118:	b	17168 <__assert_fail@plt+0x620c>
   1711c:	b	17168 <__assert_fail@plt+0x620c>
   17120:	b	17168 <__assert_fail@plt+0x620c>
   17124:	b	17168 <__assert_fail@plt+0x620c>
   17128:	b	17168 <__assert_fail@plt+0x620c>
   1712c:	b	17168 <__assert_fail@plt+0x620c>
   17130:	b	17168 <__assert_fail@plt+0x620c>
   17134:	b	17168 <__assert_fail@plt+0x620c>
   17138:	b	17168 <__assert_fail@plt+0x620c>
   1713c:	b	17168 <__assert_fail@plt+0x620c>
   17140:	b	17168 <__assert_fail@plt+0x620c>
   17144:	b	17168 <__assert_fail@plt+0x620c>
   17148:	b	17160 <__assert_fail@plt+0x6204>
   1714c:	b	17160 <__assert_fail@plt+0x6204>
   17150:	b	17160 <__assert_fail@plt+0x6204>
   17154:	b	17160 <__assert_fail@plt+0x6204>
   17158:	b	17160 <__assert_fail@plt+0x6204>
   1715c:	b	17160 <__assert_fail@plt+0x6204>
   17160:	mov	r3, #1
   17164:	b	1716c <__assert_fail@plt+0x6210>
   17168:	mov	r3, #0
   1716c:	mov	r0, r3
   17170:	add	sp, fp, #0
   17174:	pop	{fp}		; (ldr fp, [sp], #4)
   17178:	bx	lr
   1717c:	push	{fp}		; (str fp, [sp, #-4]!)
   17180:	add	fp, sp, #0
   17184:	sub	sp, sp, #12
   17188:	str	r0, [fp, #-8]
   1718c:	ldr	r3, [fp, #-8]
   17190:	sub	r3, r3, #65	; 0x41
   17194:	cmp	r3, #25
   17198:	bhi	171a8 <__assert_fail@plt+0x624c>
   1719c:	ldr	r3, [fp, #-8]
   171a0:	add	r3, r3, #32
   171a4:	b	171ac <__assert_fail@plt+0x6250>
   171a8:	ldr	r3, [fp, #-8]
   171ac:	mov	r0, r3
   171b0:	add	sp, fp, #0
   171b4:	pop	{fp}		; (ldr fp, [sp], #4)
   171b8:	bx	lr
   171bc:	push	{fp}		; (str fp, [sp, #-4]!)
   171c0:	add	fp, sp, #0
   171c4:	sub	sp, sp, #12
   171c8:	str	r0, [fp, #-8]
   171cc:	ldr	r3, [fp, #-8]
   171d0:	sub	r3, r3, #97	; 0x61
   171d4:	cmp	r3, #25
   171d8:	bhi	171e8 <__assert_fail@plt+0x628c>
   171dc:	ldr	r3, [fp, #-8]
   171e0:	sub	r3, r3, #32
   171e4:	b	171ec <__assert_fail@plt+0x6290>
   171e8:	ldr	r3, [fp, #-8]
   171ec:	mov	r0, r3
   171f0:	add	sp, fp, #0
   171f4:	pop	{fp}		; (ldr fp, [sp], #4)
   171f8:	bx	lr
   171fc:	push	{fp, lr}
   17200:	add	fp, sp, #4
   17204:	sub	sp, sp, #272	; 0x110
   17208:	str	r0, [fp, #-272]	; 0xfffffef0
   1720c:	sub	r3, fp, #264	; 0x108
   17210:	ldr	r2, [pc, #116]	; 1728c <__assert_fail@plt+0x6330>
   17214:	mov	r1, r3
   17218:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1721c:	bl	173a0 <__assert_fail@plt+0x6444>
   17220:	mov	r3, r0
   17224:	cmp	r3, #0
   17228:	beq	17234 <__assert_fail@plt+0x62d8>
   1722c:	mov	r3, #0
   17230:	b	17280 <__assert_fail@plt+0x6324>
   17234:	sub	r3, fp, #264	; 0x108
   17238:	ldr	r1, [pc, #80]	; 17290 <__assert_fail@plt+0x6334>
   1723c:	mov	r0, r3
   17240:	bl	10d04 <strcmp@plt>
   17244:	mov	r3, r0
   17248:	cmp	r3, #0
   1724c:	beq	17274 <__assert_fail@plt+0x6318>
   17250:	sub	r3, fp, #264	; 0x108
   17254:	ldr	r1, [pc, #56]	; 17294 <__assert_fail@plt+0x6338>
   17258:	mov	r0, r3
   1725c:	bl	10d04 <strcmp@plt>
   17260:	mov	r3, r0
   17264:	cmp	r3, #0
   17268:	beq	17274 <__assert_fail@plt+0x6318>
   1726c:	mov	r3, #1
   17270:	b	17278 <__assert_fail@plt+0x631c>
   17274:	mov	r3, #0
   17278:	and	r3, r3, #1
   1727c:	uxtb	r3, r3
   17280:	mov	r0, r3
   17284:	sub	sp, fp, #4
   17288:	pop	{fp, pc}
   1728c:	andeq	r0, r0, r1, lsl #2
   17290:	andeq	r8, r1, r8, lsl r4
   17294:	andeq	r8, r1, ip, lsl r4
   17298:	push	{fp, lr}
   1729c:	add	fp, sp, #4
   172a0:	sub	sp, sp, #16
   172a4:	str	r0, [fp, #-16]
   172a8:	mov	r1, #0
   172ac:	ldr	r0, [fp, #-16]
   172b0:	bl	10ef0 <setlocale@plt>
   172b4:	str	r0, [fp, #-8]
   172b8:	ldr	r3, [fp, #-8]
   172bc:	mov	r0, r3
   172c0:	sub	sp, fp, #4
   172c4:	pop	{fp, pc}
   172c8:	push	{fp, lr}
   172cc:	add	fp, sp, #4
   172d0:	sub	sp, sp, #24
   172d4:	str	r0, [fp, #-16]
   172d8:	str	r1, [fp, #-20]	; 0xffffffec
   172dc:	str	r2, [fp, #-24]	; 0xffffffe8
   172e0:	ldr	r0, [fp, #-16]
   172e4:	bl	17298 <__assert_fail@plt+0x633c>
   172e8:	str	r0, [fp, #-8]
   172ec:	ldr	r3, [fp, #-8]
   172f0:	cmp	r3, #0
   172f4:	bne	17318 <__assert_fail@plt+0x63bc>
   172f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172fc:	cmp	r3, #0
   17300:	beq	17310 <__assert_fail@plt+0x63b4>
   17304:	ldr	r3, [fp, #-20]	; 0xffffffec
   17308:	mov	r2, #0
   1730c:	strb	r2, [r3]
   17310:	mov	r3, #22
   17314:	b	17394 <__assert_fail@plt+0x6438>
   17318:	ldr	r0, [fp, #-8]
   1731c:	bl	10e78 <strlen@plt>
   17320:	str	r0, [fp, #-12]
   17324:	ldr	r2, [fp, #-12]
   17328:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1732c:	cmp	r2, r3
   17330:	bcs	17354 <__assert_fail@plt+0x63f8>
   17334:	ldr	r3, [fp, #-12]
   17338:	add	r3, r3, #1
   1733c:	mov	r2, r3
   17340:	ldr	r1, [fp, #-8]
   17344:	ldr	r0, [fp, #-20]	; 0xffffffec
   17348:	bl	10d58 <memcpy@plt>
   1734c:	mov	r3, #0
   17350:	b	17394 <__assert_fail@plt+0x6438>
   17354:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17358:	cmp	r3, #0
   1735c:	beq	17390 <__assert_fail@plt+0x6434>
   17360:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17364:	sub	r3, r3, #1
   17368:	mov	r2, r3
   1736c:	ldr	r1, [fp, #-8]
   17370:	ldr	r0, [fp, #-20]	; 0xffffffec
   17374:	bl	10d58 <memcpy@plt>
   17378:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1737c:	sub	r3, r3, #1
   17380:	ldr	r2, [fp, #-20]	; 0xffffffec
   17384:	add	r3, r2, r3
   17388:	mov	r2, #0
   1738c:	strb	r2, [r3]
   17390:	mov	r3, #34	; 0x22
   17394:	mov	r0, r3
   17398:	sub	sp, fp, #4
   1739c:	pop	{fp, pc}
   173a0:	push	{fp, lr}
   173a4:	add	fp, sp, #4
   173a8:	sub	sp, sp, #16
   173ac:	str	r0, [fp, #-8]
   173b0:	str	r1, [fp, #-12]
   173b4:	str	r2, [fp, #-16]
   173b8:	ldr	r2, [fp, #-16]
   173bc:	ldr	r1, [fp, #-12]
   173c0:	ldr	r0, [fp, #-8]
   173c4:	bl	172c8 <__assert_fail@plt+0x636c>
   173c8:	mov	r3, r0
   173cc:	mov	r0, r3
   173d0:	sub	sp, fp, #4
   173d4:	pop	{fp, pc}
   173d8:	push	{fp, lr}
   173dc:	add	fp, sp, #4
   173e0:	sub	sp, sp, #8
   173e4:	str	r0, [fp, #-8]
   173e8:	ldr	r0, [fp, #-8]
   173ec:	bl	17298 <__assert_fail@plt+0x633c>
   173f0:	mov	r3, r0
   173f4:	mov	r0, r3
   173f8:	sub	sp, fp, #4
   173fc:	pop	{fp, pc}
   17400:	subs	r2, r1, #1
   17404:	bxeq	lr
   17408:	bcc	175e0 <__assert_fail@plt+0x6684>
   1740c:	cmp	r0, r1
   17410:	bls	175c4 <__assert_fail@plt+0x6668>
   17414:	tst	r1, r2
   17418:	beq	175d0 <__assert_fail@plt+0x6674>
   1741c:	clz	r3, r0
   17420:	clz	r2, r1
   17424:	sub	r3, r2, r3
   17428:	rsbs	r3, r3, #31
   1742c:	addne	r3, r3, r3, lsl #1
   17430:	mov	r2, #0
   17434:	addne	pc, pc, r3, lsl #2
   17438:	nop			; (mov r0, r0)
   1743c:	cmp	r0, r1, lsl #31
   17440:	adc	r2, r2, r2
   17444:	subcs	r0, r0, r1, lsl #31
   17448:	cmp	r0, r1, lsl #30
   1744c:	adc	r2, r2, r2
   17450:	subcs	r0, r0, r1, lsl #30
   17454:	cmp	r0, r1, lsl #29
   17458:	adc	r2, r2, r2
   1745c:	subcs	r0, r0, r1, lsl #29
   17460:	cmp	r0, r1, lsl #28
   17464:	adc	r2, r2, r2
   17468:	subcs	r0, r0, r1, lsl #28
   1746c:	cmp	r0, r1, lsl #27
   17470:	adc	r2, r2, r2
   17474:	subcs	r0, r0, r1, lsl #27
   17478:	cmp	r0, r1, lsl #26
   1747c:	adc	r2, r2, r2
   17480:	subcs	r0, r0, r1, lsl #26
   17484:	cmp	r0, r1, lsl #25
   17488:	adc	r2, r2, r2
   1748c:	subcs	r0, r0, r1, lsl #25
   17490:	cmp	r0, r1, lsl #24
   17494:	adc	r2, r2, r2
   17498:	subcs	r0, r0, r1, lsl #24
   1749c:	cmp	r0, r1, lsl #23
   174a0:	adc	r2, r2, r2
   174a4:	subcs	r0, r0, r1, lsl #23
   174a8:	cmp	r0, r1, lsl #22
   174ac:	adc	r2, r2, r2
   174b0:	subcs	r0, r0, r1, lsl #22
   174b4:	cmp	r0, r1, lsl #21
   174b8:	adc	r2, r2, r2
   174bc:	subcs	r0, r0, r1, lsl #21
   174c0:	cmp	r0, r1, lsl #20
   174c4:	adc	r2, r2, r2
   174c8:	subcs	r0, r0, r1, lsl #20
   174cc:	cmp	r0, r1, lsl #19
   174d0:	adc	r2, r2, r2
   174d4:	subcs	r0, r0, r1, lsl #19
   174d8:	cmp	r0, r1, lsl #18
   174dc:	adc	r2, r2, r2
   174e0:	subcs	r0, r0, r1, lsl #18
   174e4:	cmp	r0, r1, lsl #17
   174e8:	adc	r2, r2, r2
   174ec:	subcs	r0, r0, r1, lsl #17
   174f0:	cmp	r0, r1, lsl #16
   174f4:	adc	r2, r2, r2
   174f8:	subcs	r0, r0, r1, lsl #16
   174fc:	cmp	r0, r1, lsl #15
   17500:	adc	r2, r2, r2
   17504:	subcs	r0, r0, r1, lsl #15
   17508:	cmp	r0, r1, lsl #14
   1750c:	adc	r2, r2, r2
   17510:	subcs	r0, r0, r1, lsl #14
   17514:	cmp	r0, r1, lsl #13
   17518:	adc	r2, r2, r2
   1751c:	subcs	r0, r0, r1, lsl #13
   17520:	cmp	r0, r1, lsl #12
   17524:	adc	r2, r2, r2
   17528:	subcs	r0, r0, r1, lsl #12
   1752c:	cmp	r0, r1, lsl #11
   17530:	adc	r2, r2, r2
   17534:	subcs	r0, r0, r1, lsl #11
   17538:	cmp	r0, r1, lsl #10
   1753c:	adc	r2, r2, r2
   17540:	subcs	r0, r0, r1, lsl #10
   17544:	cmp	r0, r1, lsl #9
   17548:	adc	r2, r2, r2
   1754c:	subcs	r0, r0, r1, lsl #9
   17550:	cmp	r0, r1, lsl #8
   17554:	adc	r2, r2, r2
   17558:	subcs	r0, r0, r1, lsl #8
   1755c:	cmp	r0, r1, lsl #7
   17560:	adc	r2, r2, r2
   17564:	subcs	r0, r0, r1, lsl #7
   17568:	cmp	r0, r1, lsl #6
   1756c:	adc	r2, r2, r2
   17570:	subcs	r0, r0, r1, lsl #6
   17574:	cmp	r0, r1, lsl #5
   17578:	adc	r2, r2, r2
   1757c:	subcs	r0, r0, r1, lsl #5
   17580:	cmp	r0, r1, lsl #4
   17584:	adc	r2, r2, r2
   17588:	subcs	r0, r0, r1, lsl #4
   1758c:	cmp	r0, r1, lsl #3
   17590:	adc	r2, r2, r2
   17594:	subcs	r0, r0, r1, lsl #3
   17598:	cmp	r0, r1, lsl #2
   1759c:	adc	r2, r2, r2
   175a0:	subcs	r0, r0, r1, lsl #2
   175a4:	cmp	r0, r1, lsl #1
   175a8:	adc	r2, r2, r2
   175ac:	subcs	r0, r0, r1, lsl #1
   175b0:	cmp	r0, r1
   175b4:	adc	r2, r2, r2
   175b8:	subcs	r0, r0, r1
   175bc:	mov	r0, r2
   175c0:	bx	lr
   175c4:	moveq	r0, #1
   175c8:	movne	r0, #0
   175cc:	bx	lr
   175d0:	clz	r2, r1
   175d4:	rsb	r2, r2, #31
   175d8:	lsr	r0, r0, r2
   175dc:	bx	lr
   175e0:	cmp	r0, #0
   175e4:	mvnne	r0, #0
   175e8:	b	17888 <__assert_fail@plt+0x692c>
   175ec:	cmp	r1, #0
   175f0:	beq	175e0 <__assert_fail@plt+0x6684>
   175f4:	push	{r0, r1, lr}
   175f8:	bl	17400 <__assert_fail@plt+0x64a4>
   175fc:	pop	{r1, r2, lr}
   17600:	mul	r3, r2, r0
   17604:	sub	r1, r1, r3
   17608:	bx	lr
   1760c:	cmp	r1, #0
   17610:	beq	1781c <__assert_fail@plt+0x68c0>
   17614:	eor	ip, r0, r1
   17618:	rsbmi	r1, r1, #0
   1761c:	subs	r2, r1, #1
   17620:	beq	177e8 <__assert_fail@plt+0x688c>
   17624:	movs	r3, r0
   17628:	rsbmi	r3, r0, #0
   1762c:	cmp	r3, r1
   17630:	bls	177f4 <__assert_fail@plt+0x6898>
   17634:	tst	r1, r2
   17638:	beq	17804 <__assert_fail@plt+0x68a8>
   1763c:	clz	r2, r3
   17640:	clz	r0, r1
   17644:	sub	r2, r0, r2
   17648:	rsbs	r2, r2, #31
   1764c:	addne	r2, r2, r2, lsl #1
   17650:	mov	r0, #0
   17654:	addne	pc, pc, r2, lsl #2
   17658:	nop			; (mov r0, r0)
   1765c:	cmp	r3, r1, lsl #31
   17660:	adc	r0, r0, r0
   17664:	subcs	r3, r3, r1, lsl #31
   17668:	cmp	r3, r1, lsl #30
   1766c:	adc	r0, r0, r0
   17670:	subcs	r3, r3, r1, lsl #30
   17674:	cmp	r3, r1, lsl #29
   17678:	adc	r0, r0, r0
   1767c:	subcs	r3, r3, r1, lsl #29
   17680:	cmp	r3, r1, lsl #28
   17684:	adc	r0, r0, r0
   17688:	subcs	r3, r3, r1, lsl #28
   1768c:	cmp	r3, r1, lsl #27
   17690:	adc	r0, r0, r0
   17694:	subcs	r3, r3, r1, lsl #27
   17698:	cmp	r3, r1, lsl #26
   1769c:	adc	r0, r0, r0
   176a0:	subcs	r3, r3, r1, lsl #26
   176a4:	cmp	r3, r1, lsl #25
   176a8:	adc	r0, r0, r0
   176ac:	subcs	r3, r3, r1, lsl #25
   176b0:	cmp	r3, r1, lsl #24
   176b4:	adc	r0, r0, r0
   176b8:	subcs	r3, r3, r1, lsl #24
   176bc:	cmp	r3, r1, lsl #23
   176c0:	adc	r0, r0, r0
   176c4:	subcs	r3, r3, r1, lsl #23
   176c8:	cmp	r3, r1, lsl #22
   176cc:	adc	r0, r0, r0
   176d0:	subcs	r3, r3, r1, lsl #22
   176d4:	cmp	r3, r1, lsl #21
   176d8:	adc	r0, r0, r0
   176dc:	subcs	r3, r3, r1, lsl #21
   176e0:	cmp	r3, r1, lsl #20
   176e4:	adc	r0, r0, r0
   176e8:	subcs	r3, r3, r1, lsl #20
   176ec:	cmp	r3, r1, lsl #19
   176f0:	adc	r0, r0, r0
   176f4:	subcs	r3, r3, r1, lsl #19
   176f8:	cmp	r3, r1, lsl #18
   176fc:	adc	r0, r0, r0
   17700:	subcs	r3, r3, r1, lsl #18
   17704:	cmp	r3, r1, lsl #17
   17708:	adc	r0, r0, r0
   1770c:	subcs	r3, r3, r1, lsl #17
   17710:	cmp	r3, r1, lsl #16
   17714:	adc	r0, r0, r0
   17718:	subcs	r3, r3, r1, lsl #16
   1771c:	cmp	r3, r1, lsl #15
   17720:	adc	r0, r0, r0
   17724:	subcs	r3, r3, r1, lsl #15
   17728:	cmp	r3, r1, lsl #14
   1772c:	adc	r0, r0, r0
   17730:	subcs	r3, r3, r1, lsl #14
   17734:	cmp	r3, r1, lsl #13
   17738:	adc	r0, r0, r0
   1773c:	subcs	r3, r3, r1, lsl #13
   17740:	cmp	r3, r1, lsl #12
   17744:	adc	r0, r0, r0
   17748:	subcs	r3, r3, r1, lsl #12
   1774c:	cmp	r3, r1, lsl #11
   17750:	adc	r0, r0, r0
   17754:	subcs	r3, r3, r1, lsl #11
   17758:	cmp	r3, r1, lsl #10
   1775c:	adc	r0, r0, r0
   17760:	subcs	r3, r3, r1, lsl #10
   17764:	cmp	r3, r1, lsl #9
   17768:	adc	r0, r0, r0
   1776c:	subcs	r3, r3, r1, lsl #9
   17770:	cmp	r3, r1, lsl #8
   17774:	adc	r0, r0, r0
   17778:	subcs	r3, r3, r1, lsl #8
   1777c:	cmp	r3, r1, lsl #7
   17780:	adc	r0, r0, r0
   17784:	subcs	r3, r3, r1, lsl #7
   17788:	cmp	r3, r1, lsl #6
   1778c:	adc	r0, r0, r0
   17790:	subcs	r3, r3, r1, lsl #6
   17794:	cmp	r3, r1, lsl #5
   17798:	adc	r0, r0, r0
   1779c:	subcs	r3, r3, r1, lsl #5
   177a0:	cmp	r3, r1, lsl #4
   177a4:	adc	r0, r0, r0
   177a8:	subcs	r3, r3, r1, lsl #4
   177ac:	cmp	r3, r1, lsl #3
   177b0:	adc	r0, r0, r0
   177b4:	subcs	r3, r3, r1, lsl #3
   177b8:	cmp	r3, r1, lsl #2
   177bc:	adc	r0, r0, r0
   177c0:	subcs	r3, r3, r1, lsl #2
   177c4:	cmp	r3, r1, lsl #1
   177c8:	adc	r0, r0, r0
   177cc:	subcs	r3, r3, r1, lsl #1
   177d0:	cmp	r3, r1
   177d4:	adc	r0, r0, r0
   177d8:	subcs	r3, r3, r1
   177dc:	cmp	ip, #0
   177e0:	rsbmi	r0, r0, #0
   177e4:	bx	lr
   177e8:	teq	ip, r0
   177ec:	rsbmi	r0, r0, #0
   177f0:	bx	lr
   177f4:	movcc	r0, #0
   177f8:	asreq	r0, ip, #31
   177fc:	orreq	r0, r0, #1
   17800:	bx	lr
   17804:	clz	r2, r1
   17808:	rsb	r2, r2, #31
   1780c:	cmp	ip, #0
   17810:	lsr	r0, r3, r2
   17814:	rsbmi	r0, r0, #0
   17818:	bx	lr
   1781c:	cmp	r0, #0
   17820:	mvngt	r0, #-2147483648	; 0x80000000
   17824:	movlt	r0, #-2147483648	; 0x80000000
   17828:	b	17888 <__assert_fail@plt+0x692c>
   1782c:	cmp	r1, #0
   17830:	beq	1781c <__assert_fail@plt+0x68c0>
   17834:	push	{r0, r1, lr}
   17838:	bl	17614 <__assert_fail@plt+0x66b8>
   1783c:	pop	{r1, r2, lr}
   17840:	mul	r3, r2, r0
   17844:	sub	r1, r1, r3
   17848:	bx	lr
   1784c:	cmp	r3, #0
   17850:	cmpeq	r2, #0
   17854:	bne	1786c <__assert_fail@plt+0x6910>
   17858:	cmp	r1, #0
   1785c:	cmpeq	r0, #0
   17860:	mvnne	r1, #0
   17864:	mvnne	r0, #0
   17868:	b	17888 <__assert_fail@plt+0x692c>
   1786c:	sub	sp, sp, #8
   17870:	push	{sp, lr}
   17874:	bl	17898 <__assert_fail@plt+0x693c>
   17878:	ldr	lr, [sp, #4]
   1787c:	add	sp, sp, #8
   17880:	pop	{r2, r3}
   17884:	bx	lr
   17888:	push	{r1, lr}
   1788c:	mov	r0, #8
   17890:	bl	10cf8 <raise@plt>
   17894:	pop	{r1, pc}
   17898:	cmp	r1, r3
   1789c:	push	{r4, r5, r6, r7, r8, r9, lr}
   178a0:	cmpeq	r0, r2
   178a4:	mov	r4, r0
   178a8:	mov	r5, r1
   178ac:	ldr	r9, [sp, #28]
   178b0:	movcc	r0, #0
   178b4:	movcc	r1, #0
   178b8:	bcc	179b0 <__assert_fail@plt+0x6a54>
   178bc:	cmp	r3, #0
   178c0:	clzeq	ip, r2
   178c4:	clzne	ip, r3
   178c8:	addeq	ip, ip, #32
   178cc:	cmp	r5, #0
   178d0:	clzeq	r1, r4
   178d4:	addeq	r1, r1, #32
   178d8:	clzne	r1, r5
   178dc:	sub	ip, ip, r1
   178e0:	sub	lr, ip, #32
   178e4:	lsl	r7, r3, ip
   178e8:	rsb	r8, ip, #32
   178ec:	orr	r7, r7, r2, lsl lr
   178f0:	orr	r7, r7, r2, lsr r8
   178f4:	lsl	r6, r2, ip
   178f8:	cmp	r5, r7
   178fc:	cmpeq	r4, r6
   17900:	movcc	r0, #0
   17904:	movcc	r1, #0
   17908:	bcc	17924 <__assert_fail@plt+0x69c8>
   1790c:	mov	r3, #1
   17910:	subs	r4, r4, r6
   17914:	lsl	r1, r3, lr
   17918:	lsl	r0, r3, ip
   1791c:	orr	r1, r1, r3, lsr r8
   17920:	sbc	r5, r5, r7
   17924:	cmp	ip, #0
   17928:	beq	179b0 <__assert_fail@plt+0x6a54>
   1792c:	lsrs	r3, r7, #1
   17930:	rrx	r2, r6
   17934:	mov	r6, ip
   17938:	b	1795c <__assert_fail@plt+0x6a00>
   1793c:	subs	r4, r4, r2
   17940:	sbc	r5, r5, r3
   17944:	adds	r4, r4, r4
   17948:	adc	r5, r5, r5
   1794c:	adds	r4, r4, #1
   17950:	adc	r5, r5, #0
   17954:	subs	r6, r6, #1
   17958:	beq	17978 <__assert_fail@plt+0x6a1c>
   1795c:	cmp	r5, r3
   17960:	cmpeq	r4, r2
   17964:	bcs	1793c <__assert_fail@plt+0x69e0>
   17968:	adds	r4, r4, r4
   1796c:	adc	r5, r5, r5
   17970:	subs	r6, r6, #1
   17974:	bne	1795c <__assert_fail@plt+0x6a00>
   17978:	lsr	r6, r4, ip
   1797c:	lsr	r7, r5, ip
   17980:	orr	r6, r6, r5, lsl r8
   17984:	adds	r2, r0, r4
   17988:	orr	r6, r6, r5, lsr lr
   1798c:	adc	r3, r1, r5
   17990:	lsl	r1, r7, ip
   17994:	orr	r1, r1, r6, lsl lr
   17998:	lsl	r0, r6, ip
   1799c:	orr	r1, r1, r6, lsr r8
   179a0:	subs	r0, r2, r0
   179a4:	mov	r4, r6
   179a8:	mov	r5, r7
   179ac:	sbc	r1, r3, r1
   179b0:	cmp	r9, #0
   179b4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   179b8:	strd	r4, [r9]
   179bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   179c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   179c4:	mov	r7, r0
   179c8:	ldr	r6, [pc, #72]	; 17a18 <__assert_fail@plt+0x6abc>
   179cc:	ldr	r5, [pc, #72]	; 17a1c <__assert_fail@plt+0x6ac0>
   179d0:	add	r6, pc, r6
   179d4:	add	r5, pc, r5
   179d8:	sub	r6, r6, r5
   179dc:	mov	r8, r1
   179e0:	mov	r9, r2
   179e4:	bl	10cc0 <calloc@plt-0x20>
   179e8:	asrs	r6, r6, #2
   179ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   179f0:	mov	r4, #0
   179f4:	add	r4, r4, #1
   179f8:	ldr	r3, [r5], #4
   179fc:	mov	r2, r9
   17a00:	mov	r1, r8
   17a04:	mov	r0, r7
   17a08:	blx	r3
   17a0c:	cmp	r6, r4
   17a10:	bne	179f4 <__assert_fail@plt+0x6a98>
   17a14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a18:	andeq	r1, r1, r8, lsr r5
   17a1c:	andeq	r1, r1, r0, lsr r5
   17a20:	bx	lr
   17a24:	ldr	r3, [pc, #12]	; 17a38 <__assert_fail@plt+0x6adc>
   17a28:	mov	r1, #0
   17a2c:	add	r3, pc, r3
   17a30:	ldr	r2, [r3]
   17a34:	b	10ea8 <__cxa_atexit@plt>
   17a38:			; <UNDEFINED> instruction: 0x000116b8

Disassembly of section .fini:

00017a3c <.fini>:
   17a3c:	push	{r3, lr}
   17a40:	pop	{r3, pc}
