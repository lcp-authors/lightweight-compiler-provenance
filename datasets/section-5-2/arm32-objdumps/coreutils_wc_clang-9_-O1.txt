
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

000112ac <.init>:
   112ac:	push	{r3, lr}
   112b0:	bl	1163c <__assert_fail@plt+0x4c>
   112b4:	pop	{r3, pc}

Disassembly of section .plt:

000112b8 <calloc@plt-0x14>:
   112b8:	push	{lr}		; (str lr, [sp, #-4]!)
   112bc:	ldr	lr, [pc, #4]	; 112c8 <calloc@plt-0x4>
   112c0:	add	lr, pc, lr
   112c4:	ldr	pc, [lr, #8]!
   112c8:	andeq	r7, r1, r8, lsr sp

000112cc <calloc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #94208	; 0x17000
   112d4:	ldr	pc, [ip, #3384]!	; 0xd38

000112d8 <fputs_unlocked@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #94208	; 0x17000
   112e0:	ldr	pc, [ip, #3376]!	; 0xd30

000112e4 <raise@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #94208	; 0x17000
   112ec:	ldr	pc, [ip, #3368]!	; 0xd28

000112f0 <strcmp@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #94208	; 0x17000
   112f8:	ldr	pc, [ip, #3360]!	; 0xd20

000112fc <posix_fadvise64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #94208	; 0x17000
   11304:	ldr	pc, [ip, #3352]!	; 0xd18

00011308 <read@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #94208	; 0x17000
   11310:	ldr	pc, [ip, #3344]!	; 0xd10

00011314 <fflush@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #94208	; 0x17000
   1131c:	ldr	pc, [ip, #3336]!	; 0xd08

00011320 <wcwidth@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #94208	; 0x17000
   11328:	ldr	pc, [ip, #3328]!	; 0xd00

0001132c <memmove@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #94208	; 0x17000
   11334:	ldr	pc, [ip, #3320]!	; 0xcf8

00011338 <free@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #94208	; 0x17000
   11340:	ldr	pc, [ip, #3312]!	; 0xcf0

00011344 <ferror@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #94208	; 0x17000
   1134c:	ldr	pc, [ip, #3304]!	; 0xce8

00011350 <_exit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #94208	; 0x17000
   11358:	ldr	pc, [ip, #3296]!	; 0xce0

0001135c <memcpy@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #94208	; 0x17000
   11364:	ldr	pc, [ip, #3288]!	; 0xcd8

00011368 <mbsinit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #94208	; 0x17000
   11370:	ldr	pc, [ip, #3280]!	; 0xcd0

00011374 <dcgettext@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #94208	; 0x17000
   1137c:	ldr	pc, [ip, #3272]!	; 0xcc8

00011380 <sysconf@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #94208	; 0x17000
   11388:	ldr	pc, [ip, #3264]!	; 0xcc0

0001138c <realloc@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #94208	; 0x17000
   11394:	ldr	pc, [ip, #3256]!	; 0xcb8

00011398 <textdomain@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #94208	; 0x17000
   113a0:	ldr	pc, [ip, #3248]!	; 0xcb0

000113a4 <iswcntrl@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #94208	; 0x17000
   113ac:	ldr	pc, [ip, #3240]!	; 0xca8

000113b0 <rawmemchr@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #94208	; 0x17000
   113b8:	ldr	pc, [ip, #3232]!	; 0xca0

000113bc <iswprint@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #94208	; 0x17000
   113c4:	ldr	pc, [ip, #3224]!	; 0xc98

000113c8 <__fxstat64@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #94208	; 0x17000
   113d0:	ldr	pc, [ip, #3216]!	; 0xc90

000113d4 <fwrite@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #94208	; 0x17000
   113dc:	ldr	pc, [ip, #3208]!	; 0xc88

000113e0 <lseek64@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #94208	; 0x17000
   113e8:	ldr	pc, [ip, #3200]!	; 0xc80

000113ec <__ctype_get_mb_cur_max@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #94208	; 0x17000
   113f4:	ldr	pc, [ip, #3192]!	; 0xc78

000113f8 <__fpending@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #94208	; 0x17000
   11400:	ldr	pc, [ip, #3184]!	; 0xc70

00011404 <ferror_unlocked@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #94208	; 0x17000
   1140c:	ldr	pc, [ip, #3176]!	; 0xc68

00011410 <mbrtowc@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #94208	; 0x17000
   11418:	ldr	pc, [ip, #3168]!	; 0xc60

0001141c <error@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #94208	; 0x17000
   11424:	ldr	pc, [ip, #3160]!	; 0xc58

00011428 <open64@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #94208	; 0x17000
   11430:	ldr	pc, [ip, #3152]!	; 0xc50

00011434 <getenv@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #94208	; 0x17000
   1143c:	ldr	pc, [ip, #3144]!	; 0xc48

00011440 <sysinfo@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #94208	; 0x17000
   11448:	ldr	pc, [ip, #3136]!	; 0xc40

0001144c <malloc@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #94208	; 0x17000
   11454:	ldr	pc, [ip, #3128]!	; 0xc38

00011458 <__libc_start_main@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #94208	; 0x17000
   11460:	ldr	pc, [ip, #3120]!	; 0xc30

00011464 <__freading@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #94208	; 0x17000
   1146c:	ldr	pc, [ip, #3112]!	; 0xc28

00011470 <__gmon_start__@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #94208	; 0x17000
   11478:	ldr	pc, [ip, #3104]!	; 0xc20

0001147c <getopt_long@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #94208	; 0x17000
   11484:	ldr	pc, [ip, #3096]!	; 0xc18

00011488 <__ctype_b_loc@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #94208	; 0x17000
   11490:	ldr	pc, [ip, #3088]!	; 0xc10

00011494 <exit@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #94208	; 0x17000
   1149c:	ldr	pc, [ip, #3080]!	; 0xc08

000114a0 <feof@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #94208	; 0x17000
   114a8:	ldr	pc, [ip, #3072]!	; 0xc00

000114ac <iswspace@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #94208	; 0x17000
   114b4:	ldr	pc, [ip, #3064]!	; 0xbf8

000114b8 <bcmp@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #94208	; 0x17000
   114c0:	ldr	pc, [ip, #3056]!	; 0xbf0

000114c4 <strlen@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #94208	; 0x17000
   114cc:	ldr	pc, [ip, #3048]!	; 0xbe8

000114d0 <strchr@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #94208	; 0x17000
   114d8:	ldr	pc, [ip, #3040]!	; 0xbe0

000114dc <getpagesize@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #94208	; 0x17000
   114e4:	ldr	pc, [ip, #3032]!	; 0xbd8

000114e8 <__errno_location@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #94208	; 0x17000
   114f0:	ldr	pc, [ip, #3024]!	; 0xbd0

000114f4 <__cxa_atexit@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #94208	; 0x17000
   114fc:	ldr	pc, [ip, #3016]!	; 0xbc8

00011500 <setvbuf@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #94208	; 0x17000
   11508:	ldr	pc, [ip, #3008]!	; 0xbc0

0001150c <memset@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #94208	; 0x17000
   11514:	ldr	pc, [ip, #3000]!	; 0xbb8

00011518 <btowc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #94208	; 0x17000
   11520:	ldr	pc, [ip, #2992]!	; 0xbb0

00011524 <fgetc@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #94208	; 0x17000
   1152c:	ldr	pc, [ip, #2984]!	; 0xba8

00011530 <__printf_chk@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #94208	; 0x17000
   11538:	ldr	pc, [ip, #2976]!	; 0xba0

0001153c <fileno@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #94208	; 0x17000
   11544:	ldr	pc, [ip, #2968]!	; 0xb98

00011548 <__fprintf_chk@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #94208	; 0x17000
   11550:	ldr	pc, [ip, #2960]!	; 0xb90

00011554 <fclose@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #94208	; 0x17000
   1155c:	ldr	pc, [ip, #2952]!	; 0xb88

00011560 <fseeko64@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #94208	; 0x17000
   11568:	ldr	pc, [ip, #2944]!	; 0xb80

0001156c <setlocale@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #94208	; 0x17000
   11574:	ldr	pc, [ip, #2936]!	; 0xb78

00011578 <strrchr@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #94208	; 0x17000
   11580:	ldr	pc, [ip, #2928]!	; 0xb70

00011584 <nl_langinfo@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #94208	; 0x17000
   1158c:	ldr	pc, [ip, #2920]!	; 0xb68

00011590 <fopen64@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #94208	; 0x17000
   11598:	ldr	pc, [ip, #2912]!	; 0xb60

0001159c <bindtextdomain@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #94208	; 0x17000
   115a4:	ldr	pc, [ip, #2904]!	; 0xb58

000115a8 <getdelim@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #94208	; 0x17000
   115b0:	ldr	pc, [ip, #2896]!	; 0xb50

000115b4 <__xstat64@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #94208	; 0x17000
   115bc:	ldr	pc, [ip, #2888]!	; 0xb48

000115c0 <strncmp@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #94208	; 0x17000
   115c8:	ldr	pc, [ip, #2880]!	; 0xb40

000115cc <abort@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #94208	; 0x17000
   115d4:	ldr	pc, [ip, #2872]!	; 0xb38

000115d8 <close@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #94208	; 0x17000
   115e0:	ldr	pc, [ip, #2864]!	; 0xb30

000115e4 <putchar_unlocked@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #94208	; 0x17000
   115ec:	ldr	pc, [ip, #2856]!	; 0xb28

000115f0 <__assert_fail@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #94208	; 0x17000
   115f8:	ldr	pc, [ip, #2848]!	; 0xb20

Disassembly of section .text:

00011600 <_obstack_begin@@Base-0x548c>:
   11600:	mov	fp, #0
   11604:	mov	lr, #0
   11608:	pop	{r1}		; (ldr r1, [sp], #4)
   1160c:	mov	r2, sp
   11610:	push	{r2}		; (str r2, [sp, #-4]!)
   11614:	push	{r0}		; (str r0, [sp, #-4]!)
   11618:	ldr	ip, [pc, #16]	; 11630 <__assert_fail@plt+0x40>
   1161c:	push	{ip}		; (str ip, [sp, #-4]!)
   11620:	ldr	r0, [pc, #12]	; 11634 <__assert_fail@plt+0x44>
   11624:	ldr	r3, [pc, #12]	; 11638 <__assert_fail@plt+0x48>
   11628:	bl	11458 <__libc_start_main@plt>
   1162c:	bl	115cc <abort@plt>
   11630:	andeq	r7, r1, r4, ror r4
   11634:	ldrdeq	r1, [r1], -r8
   11638:	andeq	r7, r1, r4, lsl r4
   1163c:	ldr	r3, [pc, #20]	; 11658 <__assert_fail@plt+0x68>
   11640:	ldr	r2, [pc, #20]	; 1165c <__assert_fail@plt+0x6c>
   11644:	add	r3, pc, r3
   11648:	ldr	r2, [r3, r2]
   1164c:	cmp	r2, #0
   11650:	bxeq	lr
   11654:	b	11470 <__gmon_start__@plt>
   11658:			; <UNDEFINED> instruction: 0x000179b4
   1165c:	andeq	r0, r0, ip, lsl r1
   11660:	ldr	r0, [pc, #24]	; 11680 <__assert_fail@plt+0x90>
   11664:	ldr	r3, [pc, #24]	; 11684 <__assert_fail@plt+0x94>
   11668:	cmp	r3, r0
   1166c:	bxeq	lr
   11670:	ldr	r3, [pc, #16]	; 11688 <__assert_fail@plt+0x98>
   11674:	cmp	r3, #0
   11678:	bxeq	lr
   1167c:	bx	r3
   11680:	andeq	r9, r2, r4, ror r1
   11684:	andeq	r9, r2, r4, ror r1
   11688:	andeq	r0, r0, r0
   1168c:	ldr	r0, [pc, #36]	; 116b8 <__assert_fail@plt+0xc8>
   11690:	ldr	r1, [pc, #36]	; 116bc <__assert_fail@plt+0xcc>
   11694:	sub	r1, r1, r0
   11698:	asr	r1, r1, #2
   1169c:	add	r1, r1, r1, lsr #31
   116a0:	asrs	r1, r1, #1
   116a4:	bxeq	lr
   116a8:	ldr	r3, [pc, #16]	; 116c0 <__assert_fail@plt+0xd0>
   116ac:	cmp	r3, #0
   116b0:	bxeq	lr
   116b4:	bx	r3
   116b8:	andeq	r9, r2, r4, ror r1
   116bc:	andeq	r9, r2, r4, ror r1
   116c0:	andeq	r0, r0, r0
   116c4:	push	{r4, lr}
   116c8:	ldr	r4, [pc, #24]	; 116e8 <__assert_fail@plt+0xf8>
   116cc:	ldrb	r3, [r4]
   116d0:	cmp	r3, #0
   116d4:	popne	{r4, pc}
   116d8:	bl	11660 <__assert_fail@plt+0x70>
   116dc:	mov	r3, #1
   116e0:	strb	r3, [r4]
   116e4:	pop	{r4, pc}
   116e8:	muleq	r2, ip, r1
   116ec:	b	1168c <__assert_fail@plt+0x9c>
   116f0:	push	{fp, lr}
   116f4:	mov	fp, sp
   116f8:	mov	r4, r0
   116fc:	cmp	r0, #0
   11700:	bne	117d8 <__assert_fail@plt+0x1e8>
   11704:	movw	r1, #29923	; 0x74e3
   11708:	movt	r1, #1
   1170c:	mov	r0, #0
   11710:	mov	r2, #5
   11714:	bl	11374 <dcgettext@plt>
   11718:	mov	r1, r0
   1171c:	movw	r0, #37356	; 0x91ec
   11720:	movt	r0, #2
   11724:	ldr	r2, [r0]
   11728:	mov	r0, #1
   1172c:	mov	r3, r2
   11730:	bl	11530 <__printf_chk@plt>
   11734:	movw	r1, #29994	; 0x752a
   11738:	movt	r1, #1
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	bl	11374 <dcgettext@plt>
   11748:	movw	r5, #37268	; 0x9194
   1174c:	movt	r5, #2
   11750:	ldr	r1, [r5]
   11754:	bl	112d8 <fputs_unlocked@plt>
   11758:	bl	1181c <__assert_fail@plt+0x22c>
   1175c:	movw	r1, #30188	; 0x75ec
   11760:	movt	r1, #1
   11764:	mov	r0, #0
   11768:	mov	r2, #5
   1176c:	bl	11374 <dcgettext@plt>
   11770:	ldr	r1, [r5]
   11774:	bl	112d8 <fputs_unlocked@plt>
   11778:	movw	r1, #30489	; 0x7719
   1177c:	movt	r1, #1
   11780:	mov	r0, #0
   11784:	mov	r2, #5
   11788:	bl	11374 <dcgettext@plt>
   1178c:	ldr	r1, [r5]
   11790:	bl	112d8 <fputs_unlocked@plt>
   11794:	movw	r1, #30790	; 0x7846
   11798:	movt	r1, #1
   1179c:	mov	r0, #0
   117a0:	mov	r2, #5
   117a4:	bl	11374 <dcgettext@plt>
   117a8:	ldr	r1, [r5]
   117ac:	bl	112d8 <fputs_unlocked@plt>
   117b0:	movw	r1, #30835	; 0x7873
   117b4:	movt	r1, #1
   117b8:	mov	r0, #0
   117bc:	mov	r2, #5
   117c0:	bl	11374 <dcgettext@plt>
   117c4:	ldr	r1, [r5]
   117c8:	bl	112d8 <fputs_unlocked@plt>
   117cc:	bl	1184c <__assert_fail@plt+0x25c>
   117d0:	mov	r0, r4
   117d4:	bl	11494 <exit@plt>
   117d8:	movw	r0, #37256	; 0x9188
   117dc:	movt	r0, #2
   117e0:	ldr	r5, [r0]
   117e4:	movw	r1, #29884	; 0x74bc
   117e8:	movt	r1, #1
   117ec:	mov	r0, #0
   117f0:	mov	r2, #5
   117f4:	bl	11374 <dcgettext@plt>
   117f8:	mov	r2, r0
   117fc:	movw	r0, #37356	; 0x91ec
   11800:	movt	r0, #2
   11804:	ldr	r3, [r0]
   11808:	mov	r0, r5
   1180c:	mov	r1, #1
   11810:	bl	11548 <__fprintf_chk@plt>
   11814:	mov	r0, r4
   11818:	bl	11494 <exit@plt>
   1181c:	push	{fp, lr}
   11820:	mov	fp, sp
   11824:	movw	r1, #31303	; 0x7a47
   11828:	movt	r1, #1
   1182c:	mov	r0, #0
   11830:	mov	r2, #5
   11834:	bl	11374 <dcgettext@plt>
   11838:	movw	r1, #37268	; 0x9194
   1183c:	movt	r1, #2
   11840:	ldr	r1, [r1]
   11844:	pop	{fp, lr}
   11848:	b	112d8 <fputs_unlocked@plt>
   1184c:	push	{r4, r5, r6, sl, fp, lr}
   11850:	add	fp, sp, #16
   11854:	sub	sp, sp, #56	; 0x38
   11858:	movw	r0, #31904	; 0x7ca0
   1185c:	movt	r0, #1
   11860:	add	r1, r0, #32
   11864:	mov	r2, #48	; 0x30
   11868:	vld1.64	{d16-d17}, [r1]
   1186c:	mov	r6, sp
   11870:	add	r1, r6, #32
   11874:	add	r3, r0, #16
   11878:	vld1.64	{d18-d19}, [r0], r2
   1187c:	vld1.64	{d20-d21}, [r3]
   11880:	vldr	d22, [r0]
   11884:	vst1.64	{d16-d17}, [r1]
   11888:	add	r0, r6, #16
   1188c:	vst1.64	{d20-d21}, [r0]
   11890:	mov	r0, r6
   11894:	vst1.64	{d18-d19}, [r0], r2
   11898:	vstr	d22, [r0]
   1189c:	ldr	r1, [sp]
   118a0:	cmp	r1, #0
   118a4:	movw	r4, #30889	; 0x78a9
   118a8:	movt	r4, #1
   118ac:	beq	118d4 <__assert_fail@plt+0x2e4>
   118b0:	mov	r6, sp
   118b4:	movw	r5, #30889	; 0x78a9
   118b8:	movt	r5, #1
   118bc:	mov	r0, r5
   118c0:	bl	112f0 <strcmp@plt>
   118c4:	cmp	r0, #0
   118c8:	ldrne	r1, [r6, #8]!
   118cc:	cmpne	r1, #0
   118d0:	bne	118bc <__assert_fail@plt+0x2cc>
   118d4:	ldr	r5, [r6, #4]
   118d8:	movw	r1, #31454	; 0x7ade
   118dc:	movt	r1, #1
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	bl	11374 <dcgettext@plt>
   118ec:	mov	r1, r0
   118f0:	movw	r2, #30938	; 0x78da
   118f4:	movt	r2, #1
   118f8:	movw	r3, #31477	; 0x7af5
   118fc:	movt	r3, #1
   11900:	mov	r0, #1
   11904:	bl	11530 <__printf_chk@plt>
   11908:	cmp	r5, #0
   1190c:	moveq	r5, r4
   11910:	mov	r0, #5
   11914:	mov	r1, #0
   11918:	bl	1156c <setlocale@plt>
   1191c:	cmp	r0, #0
   11920:	beq	11960 <__assert_fail@plt+0x370>
   11924:	movw	r1, #31517	; 0x7b1d
   11928:	movt	r1, #1
   1192c:	mov	r2, #3
   11930:	bl	115c0 <strncmp@plt>
   11934:	cmp	r0, #0
   11938:	beq	11960 <__assert_fail@plt+0x370>
   1193c:	movw	r1, #31521	; 0x7b21
   11940:	movt	r1, #1
   11944:	mov	r0, #0
   11948:	mov	r2, #5
   1194c:	bl	11374 <dcgettext@plt>
   11950:	movw	r1, #37268	; 0x9194
   11954:	movt	r1, #2
   11958:	ldr	r1, [r1]
   1195c:	bl	112d8 <fputs_unlocked@plt>
   11960:	movw	r1, #31592	; 0x7b68
   11964:	movt	r1, #1
   11968:	mov	r0, #0
   1196c:	mov	r2, #5
   11970:	bl	11374 <dcgettext@plt>
   11974:	mov	r1, r0
   11978:	movw	r2, #31477	; 0x7af5
   1197c:	movt	r2, #1
   11980:	mov	r0, #1
   11984:	mov	r3, r4
   11988:	bl	11530 <__printf_chk@plt>
   1198c:	movw	r0, #31387	; 0x7a9b
   11990:	movt	r0, #1
   11994:	movw	r6, #31669	; 0x7bb5
   11998:	movt	r6, #1
   1199c:	cmp	r5, r4
   119a0:	moveq	r6, r0
   119a4:	movw	r1, #31619	; 0x7b83
   119a8:	movt	r1, #1
   119ac:	mov	r0, #0
   119b0:	mov	r2, #5
   119b4:	bl	11374 <dcgettext@plt>
   119b8:	mov	r1, r0
   119bc:	mov	r0, #1
   119c0:	mov	r2, r5
   119c4:	mov	r3, r6
   119c8:	sub	sp, fp, #16
   119cc:	pop	{r4, r5, r6, sl, fp, lr}
   119d0:	b	11530 <__printf_chk@plt>
   119d4:	nop	{0}
   119d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119dc:	add	fp, sp, #28
   119e0:	sub	sp, sp, #4
   119e4:	vpush	{d8-d10}
   119e8:	sub	sp, sp, #312	; 0x138
   119ec:	mov	r5, r1
   119f0:	mov	r6, r0
   119f4:	ldr	r0, [r1]
   119f8:	bl	13c90 <__assert_fail@plt+0x26a0>
   119fc:	movw	r1, #31669	; 0x7bb5
   11a00:	movt	r1, #1
   11a04:	mov	r0, #6
   11a08:	bl	1156c <setlocale@plt>
   11a0c:	movw	r4, #30942	; 0x78de
   11a10:	movt	r4, #1
   11a14:	movw	r1, #30892	; 0x78ac
   11a18:	movt	r1, #1
   11a1c:	mov	r0, r4
   11a20:	bl	1159c <bindtextdomain@plt>
   11a24:	mov	r0, r4
   11a28:	bl	11398 <textdomain@plt>
   11a2c:	movw	r0, #14104	; 0x3718
   11a30:	movt	r0, #1
   11a34:	bl	17478 <_obstack_memory_used@@Base+0x6f0>
   11a38:	bl	114dc <getpagesize@plt>
   11a3c:	movw	r1, #37280	; 0x91a0
   11a40:	movt	r1, #2
   11a44:	str	r0, [r1]
   11a48:	movw	r0, #37268	; 0x9194
   11a4c:	movt	r0, #2
   11a50:	ldr	r0, [r0]
   11a54:	mov	sl, #0
   11a58:	mov	r1, #0
   11a5c:	mov	r2, #1
   11a60:	mov	r3, #0
   11a64:	bl	11500 <setvbuf@plt>
   11a68:	movw	r0, #30916	; 0x78c4
   11a6c:	movt	r0, #1
   11a70:	bl	11434 <getenv@plt>
   11a74:	movw	r1, #37296	; 0x91b0
   11a78:	movt	r1, #2
   11a7c:	str	sl, [r1]
   11a80:	str	sl, [r1, #4]
   11a84:	movw	r1, #37304	; 0x91b8
   11a88:	movt	r1, #2
   11a8c:	str	sl, [r1]
   11a90:	str	sl, [r1, #4]
   11a94:	movw	r1, #37312	; 0x91c0
   11a98:	movt	r1, #2
   11a9c:	str	sl, [r1]
   11aa0:	str	sl, [r1, #4]
   11aa4:	movw	r1, #37320	; 0x91c8
   11aa8:	movt	r1, #2
   11aac:	str	sl, [r1]
   11ab0:	str	sl, [r1, #4]
   11ab4:	movw	r1, #37328	; 0x91d0
   11ab8:	movt	r1, #2
   11abc:	str	sl, [r1]
   11ac0:	str	sl, [r1, #4]
   11ac4:	movw	r9, #37285	; 0x91a5
   11ac8:	movt	r9, #2
   11acc:	strb	sl, [r9]
   11ad0:	movw	r1, #37286	; 0x91a6
   11ad4:	movt	r1, #2
   11ad8:	strb	sl, [r1]
   11adc:	movw	r1, #37287	; 0x91a7
   11ae0:	movt	r1, #2
   11ae4:	strb	sl, [r1]
   11ae8:	movw	r1, #37288	; 0x91a8
   11aec:	movt	r1, #2
   11af0:	strb	sl, [r1]
   11af4:	movw	r1, #37289	; 0x91a9
   11af8:	movt	r1, #2
   11afc:	strb	sl, [r1]
   11b00:	cmp	r0, #0
   11b04:	movwne	r0, #1
   11b08:	movw	r1, #37284	; 0x91a4
   11b0c:	movt	r1, #2
   11b10:	strb	r0, [r1]
   11b14:	movw	r8, #30932	; 0x78d4
   11b18:	movt	r8, #1
   11b1c:	movw	r7, #31744	; 0x7c00
   11b20:	movt	r7, #1
   11b24:	mov	r4, #0
   11b28:	str	sl, [sp]
   11b2c:	mov	r0, r6
   11b30:	mov	r1, r5
   11b34:	mov	r2, r8
   11b38:	mov	r3, r7
   11b3c:	bl	1147c <getopt_long@plt>
   11b40:	cmp	r0, #75	; 0x4b
   11b44:	ble	11c6c <__assert_fail@plt+0x67c>
   11b48:	sub	r1, r0, #76	; 0x4c
   11b4c:	cmp	r1, #43	; 0x2b
   11b50:	bhi	11c1c <__assert_fail@plt+0x62c>
   11b54:	add	r2, pc, #4
   11b58:	mov	r0, r9
   11b5c:	ldr	pc, [r2, r1, lsl #2]
   11b60:	andeq	r1, r1, r0, lsl ip
   11b64:	andeq	r2, r1, r8, lsr #5
   11b68:	andeq	r2, r1, r8, lsr #5
   11b6c:	andeq	r2, r1, r8, lsr #5
   11b70:	andeq	r2, r1, r8, lsr #5
   11b74:	andeq	r2, r1, r8, lsr #5
   11b78:	andeq	r2, r1, r8, lsr #5
   11b7c:	andeq	r2, r1, r8, lsr #5
   11b80:	andeq	r2, r1, r8, lsr #5
   11b84:	andeq	r2, r1, r8, lsr #5
   11b88:	andeq	r2, r1, r8, lsr #5
   11b8c:	andeq	r2, r1, r8, lsr #5
   11b90:	andeq	r2, r1, r8, lsr #5
   11b94:	andeq	r2, r1, r8, lsr #5
   11b98:	andeq	r2, r1, r8, lsr #5
   11b9c:	andeq	r2, r1, r8, lsr #5
   11ba0:	andeq	r2, r1, r8, lsr #5
   11ba4:	andeq	r2, r1, r8, lsr #5
   11ba8:	andeq	r2, r1, r8, lsr #5
   11bac:	andeq	r2, r1, r8, lsr #5
   11bb0:	andeq	r2, r1, r8, lsr #5
   11bb4:	andeq	r2, r1, r8, lsr #5
   11bb8:	andeq	r2, r1, r8, lsr #5
   11bbc:	andeq	r1, r1, r0, ror #24
   11bc0:	andeq	r2, r1, r8, lsr #5
   11bc4:	andeq	r2, r1, r8, lsr #5
   11bc8:	andeq	r2, r1, r8, lsr #5
   11bcc:	andeq	r2, r1, r8, lsr #5
   11bd0:	andeq	r2, r1, r8, lsr #5
   11bd4:	andeq	r2, r1, r8, lsr #5
   11bd8:	andeq	r2, r1, r8, lsr #5
   11bdc:	andeq	r2, r1, r8, lsr #5
   11be0:	andeq	r1, r1, ip, asr #24
   11be4:	andeq	r1, r1, r0, asr #24
   11be8:	andeq	r2, r1, r8, lsr #5
   11bec:	andeq	r2, r1, r8, lsr #5
   11bf0:	andeq	r2, r1, r8, lsr #5
   11bf4:	andeq	r2, r1, r8, lsr #5
   11bf8:	andeq	r2, r1, r8, lsr #5
   11bfc:	andeq	r2, r1, r8, lsr #5
   11c00:	andeq	r2, r1, r8, lsr #5
   11c04:	andeq	r2, r1, r8, lsr #5
   11c08:	andeq	r2, r1, r8, lsr #5
   11c0c:	andeq	r1, r1, r8, asr ip
   11c10:	movw	r0, #37289	; 0x91a9
   11c14:	movt	r0, #2
   11c18:	b	11c60 <__assert_fail@plt+0x670>
   11c1c:	cmp	r0, #256	; 0x100
   11c20:	beq	11b28 <__assert_fail@plt+0x538>
   11c24:	movw	r1, #257	; 0x101
   11c28:	cmp	r0, r1
   11c2c:	bne	122a8 <__assert_fail@plt+0xcb8>
   11c30:	movw	r0, #37272	; 0x9198
   11c34:	movt	r0, #2
   11c38:	ldr	r4, [r0]
   11c3c:	b	11b28 <__assert_fail@plt+0x538>
   11c40:	movw	r0, #37286	; 0x91a6
   11c44:	movt	r0, #2
   11c48:	b	11c60 <__assert_fail@plt+0x670>
   11c4c:	movw	r0, #37288	; 0x91a8
   11c50:	movt	r0, #2
   11c54:	b	11c60 <__assert_fail@plt+0x670>
   11c58:	movw	r0, #37287	; 0x91a7
   11c5c:	movt	r0, #2
   11c60:	mov	r1, #1
   11c64:	strb	r1, [r0]
   11c68:	b	11b28 <__assert_fail@plt+0x538>
   11c6c:	cmn	r0, #1
   11c70:	bne	12230 <__assert_fail@plt+0xc40>
   11c74:	movw	r0, #37288	; 0x91a8
   11c78:	movt	r0, #2
   11c7c:	ldrb	r1, [r0]
   11c80:	cmp	r1, #0
   11c84:	bne	11ce4 <__assert_fail@plt+0x6f4>
   11c88:	movw	r1, #37287	; 0x91a7
   11c8c:	movt	r1, #2
   11c90:	ldrb	r2, [r1]
   11c94:	cmp	r2, #0
   11c98:	bne	11ce4 <__assert_fail@plt+0x6f4>
   11c9c:	movw	r2, #37286	; 0x91a6
   11ca0:	movt	r2, #2
   11ca4:	ldrb	r2, [r2]
   11ca8:	cmp	r2, #0
   11cac:	bne	11ce4 <__assert_fail@plt+0x6f4>
   11cb0:	movw	r2, #37285	; 0x91a5
   11cb4:	movt	r2, #2
   11cb8:	ldrb	r3, [r2]
   11cbc:	cmp	r3, #0
   11cc0:	bne	11ce4 <__assert_fail@plt+0x6f4>
   11cc4:	movw	r3, #37289	; 0x91a9
   11cc8:	movt	r3, #2
   11ccc:	ldrb	r3, [r3]
   11cd0:	cmp	r3, #0
   11cd4:	moveq	r3, #1
   11cd8:	strbeq	r3, [r1]
   11cdc:	strbeq	r3, [r2]
   11ce0:	strbeq	r3, [r0]
   11ce4:	movw	r7, #37248	; 0x9180
   11ce8:	movt	r7, #2
   11cec:	ldr	r0, [r7]
   11cf0:	cmp	r4, #0
   11cf4:	beq	11d74 <__assert_fail@plt+0x784>
   11cf8:	cmp	r0, r6
   11cfc:	blt	122d0 <__assert_fail@plt+0xce0>
   11d00:	movw	r1, #32098	; 0x7d62
   11d04:	movt	r1, #1
   11d08:	mov	r0, r4
   11d0c:	bl	112f0 <strcmp@plt>
   11d10:	cmp	r0, #0
   11d14:	beq	11d9c <__assert_fail@plt+0x7ac>
   11d18:	movw	r1, #31119	; 0x798f
   11d1c:	movt	r1, #1
   11d20:	mov	r0, r4
   11d24:	bl	11590 <fopen64@plt>
   11d28:	mov	r5, r0
   11d2c:	cmp	r0, #0
   11d30:	bne	11da8 <__assert_fail@plt+0x7b8>
   11d34:	bl	114e8 <__errno_location@plt>
   11d38:	ldr	r5, [r0]
   11d3c:	movw	r1, #31048	; 0x7948
   11d40:	movt	r1, #1
   11d44:	mov	r0, #0
   11d48:	mov	r2, #5
   11d4c:	bl	11374 <dcgettext@plt>
   11d50:	mov	r6, r0
   11d54:	mov	r0, #4
   11d58:	mov	r1, r4
   11d5c:	bl	15290 <__assert_fail@plt+0x3ca0>
   11d60:	mov	r3, r0
   11d64:	mov	r0, #1
   11d68:	mov	r1, r5
   11d6c:	mov	r2, r6
   11d70:	bl	1141c <error@plt>
   11d74:	subs	r1, r6, r0
   11d78:	movle	r1, #1
   11d7c:	str	r1, [sp, #52]	; 0x34
   11d80:	movw	r7, #37336	; 0x91d8
   11d84:	movt	r7, #2
   11d88:	addgt	r7, r5, r0, lsl #2
   11d8c:	mov	r0, r7
   11d90:	bl	13588 <__assert_fail@plt+0x1f98>
   11d94:	mov	r5, r0
   11d98:	b	11e28 <__assert_fail@plt+0x838>
   11d9c:	movw	r0, #37264	; 0x9190
   11da0:	movt	r0, #2
   11da4:	ldr	r5, [r0]
   11da8:	mov	r0, r5
   11dac:	bl	1153c <fileno@plt>
   11db0:	add	r1, sp, #56	; 0x38
   11db4:	bl	174a0 <_obstack_memory_used@@Base+0x718>
   11db8:	cmp	r0, #0
   11dbc:	bne	11e10 <__assert_fail@plt+0x820>
   11dc0:	ldr	r0, [sp, #72]	; 0x48
   11dc4:	and	r0, r0, #61440	; 0xf000
   11dc8:	cmp	r0, #32768	; 0x8000
   11dcc:	bne	11e10 <__assert_fail@plt+0x820>
   11dd0:	ldr	r0, [sp, #104]	; 0x68
   11dd4:	ldr	r1, [sp, #108]	; 0x6c
   11dd8:	bl	17240 <_obstack_memory_used@@Base+0x4b8>
   11ddc:	vldr	d9, [pc, #1004]	; 121d0 <__assert_fail@plt+0xbe0>
   11de0:	vmov	d8, r0, r1
   11de4:	bl	13c00 <__assert_fail@plt+0x2610>
   11de8:	vmov.f64	d10, #96	; 0x3f000000  0.5
   11dec:	vmul.f64	d16, d0, d10
   11df0:	vcmpe.f64	d16, d9
   11df4:	vmrs	APSR_nzcv, fpscr
   11df8:	bgt	11e04 <__assert_fail@plt+0x814>
   11dfc:	bl	13c00 <__assert_fail@plt+0x2610>
   11e00:	vmul.f64	d9, d0, d10
   11e04:	vcmpe.f64	d9, d8
   11e08:	vmrs	APSR_nzcv, fpscr
   11e0c:	bge	121d8 <__assert_fail@plt+0xbe8>
   11e10:	mov	r0, r5
   11e14:	bl	135b8 <__assert_fail@plt+0x1fc8>
   11e18:	mov	r5, r0
   11e1c:	mov	r7, #0
   11e20:	mov	r0, #0
   11e24:	str	r0, [sp, #52]	; 0x34
   11e28:	mov	r0, #0
   11e2c:	cmp	r5, #0
   11e30:	beq	122a4 <__assert_fail@plt+0xcb4>
   11e34:	str	r0, [sp, #48]	; 0x30
   11e38:	ldr	r6, [sp, #52]	; 0x34
   11e3c:	mov	r0, r6
   11e40:	mov	r1, r7
   11e44:	bl	1239c <__assert_fail@plt+0xdac>
   11e48:	mov	r7, r0
   11e4c:	mov	r0, r6
   11e50:	mov	r1, r7
   11e54:	bl	1249c <__assert_fail@plt+0xeac>
   11e58:	movw	r1, #37340	; 0x91dc
   11e5c:	movt	r1, #2
   11e60:	str	r0, [r1]
   11e64:	add	r1, sp, #56	; 0x38
   11e68:	mov	r0, r5
   11e6c:	bl	135f0 <__assert_fail@plt+0x2000>
   11e70:	cmp	r0, #0
   11e74:	mov	r6, r5
   11e78:	beq	12020 <__assert_fail@plt+0xa30>
   11e7c:	mov	sl, r0
   11e80:	mov	r9, #0
   11e84:	mov	r5, #1
   11e88:	b	11f34 <__assert_fail@plt+0x944>
   11e8c:	cmp	r4, #0
   11e90:	beq	11ff0 <__assert_fail@plt+0xa00>
   11e94:	mov	r0, r6
   11e98:	bl	136a8 <__assert_fail@plt+0x20b8>
   11e9c:	mov	sl, r7
   11ea0:	mov	r7, r6
   11ea4:	mov	r6, r0
   11ea8:	mov	r8, #0
   11eac:	mov	r0, #0
   11eb0:	mov	r1, #3
   11eb4:	mov	r2, r4
   11eb8:	bl	15344 <__assert_fail@plt+0x3d54>
   11ebc:	mov	r5, r0
   11ec0:	mov	r0, #0
   11ec4:	movw	r1, #31256	; 0x7a18
   11ec8:	movt	r1, #1
   11ecc:	mov	r2, #5
   11ed0:	bl	11374 <dcgettext@plt>
   11ed4:	str	r6, [sp]
   11ed8:	mov	r6, r7
   11edc:	mov	r7, sl
   11ee0:	str	r0, [sp, #4]
   11ee4:	mov	r0, #0
   11ee8:	mov	r1, #0
   11eec:	movw	r2, #31286	; 0x7a36
   11ef0:	movt	r2, #1
   11ef4:	mov	r3, r5
   11ef8:	bl	1141c <error@plt>
   11efc:	ldr	r0, [sp, #52]	; 0x34
   11f00:	cmp	r0, #0
   11f04:	moveq	r0, #1
   11f08:	streq	r0, [r7]
   11f0c:	mov	r0, r6
   11f10:	add	r1, sp, #56	; 0x38
   11f14:	bl	135f0 <__assert_fail@plt+0x2000>
   11f18:	mov	sl, r0
   11f1c:	add	r9, r9, #1
   11f20:	cmp	r8, #0
   11f24:	movwne	r8, #1
   11f28:	cmp	r0, #0
   11f2c:	mov	r5, r8
   11f30:	beq	12024 <__assert_fail@plt+0xa34>
   11f34:	cmp	r4, #0
   11f38:	mov	r0, #0
   11f3c:	beq	11fb4 <__assert_fail@plt+0x9c4>
   11f40:	mov	r0, r4
   11f44:	movw	r1, #32098	; 0x7d62
   11f48:	movt	r1, #1
   11f4c:	bl	112f0 <strcmp@plt>
   11f50:	cmp	r0, #0
   11f54:	mov	r0, #0
   11f58:	bne	11fb4 <__assert_fail@plt+0x9c4>
   11f5c:	mov	r0, sl
   11f60:	movw	r1, #32098	; 0x7d62
   11f64:	movt	r1, #1
   11f68:	bl	112f0 <strcmp@plt>
   11f6c:	cmp	r0, #0
   11f70:	mov	r0, #0
   11f74:	bne	11fb4 <__assert_fail@plt+0x9c4>
   11f78:	mov	r0, #0
   11f7c:	movw	r1, #31193	; 0x79d9
   11f80:	movt	r1, #1
   11f84:	mov	r2, #5
   11f88:	bl	11374 <dcgettext@plt>
   11f8c:	mov	r8, r0
   11f90:	mov	r0, #4
   11f94:	mov	r1, sl
   11f98:	bl	15290 <__assert_fail@plt+0x3ca0>
   11f9c:	mov	r3, r0
   11fa0:	mov	r0, #0
   11fa4:	mov	r1, #0
   11fa8:	mov	r2, r8
   11fac:	bl	1141c <error@plt>
   11fb0:	mov	r0, #1
   11fb4:	ldrb	r1, [sl]
   11fb8:	cmp	r1, #0
   11fbc:	beq	11e8c <__assert_fail@plt+0x89c>
   11fc0:	mov	r8, #0
   11fc4:	cmp	r0, #0
   11fc8:	bne	11efc <__assert_fail@plt+0x90c>
   11fcc:	ldr	r0, [sp, #52]	; 0x34
   11fd0:	cmp	r0, #0
   11fd4:	movne	r0, r9
   11fd8:	rsb	r0, r0, r0, lsl #3
   11fdc:	add	r1, r7, r0, lsl #4
   11fe0:	mov	r0, sl
   11fe4:	bl	12564 <__assert_fail@plt+0xf74>
   11fe8:	and	r8, r5, r0
   11fec:	b	11efc <__assert_fail@plt+0x90c>
   11ff0:	mov	r8, #0
   11ff4:	mov	r0, #0
   11ff8:	movw	r1, #31256	; 0x7a18
   11ffc:	movt	r1, #1
   12000:	mov	r2, #5
   12004:	bl	11374 <dcgettext@plt>
   12008:	mov	r3, r0
   1200c:	mov	r0, #0
   12010:	mov	r1, #0
   12014:	movw	r2, #31996	; 0x7cfc
   12018:	movt	r2, #1
   1201c:	b	11ef8 <__assert_fail@plt+0x908>
   12020:	mov	r8, #1
   12024:	ldr	r0, [sp, #56]	; 0x38
   12028:	cmp	r0, #2
   1202c:	beq	1208c <__assert_fail@plt+0xa9c>
   12030:	cmp	r0, #4
   12034:	bne	1229c <__assert_fail@plt+0xcac>
   12038:	mov	r9, r7
   1203c:	bl	114e8 <__errno_location@plt>
   12040:	ldr	r5, [r0]
   12044:	mov	r8, #0
   12048:	movw	r1, #31106	; 0x7982
   1204c:	movt	r1, #1
   12050:	mov	r0, #0
   12054:	mov	r2, #5
   12058:	bl	11374 <dcgettext@plt>
   1205c:	mov	r7, r0
   12060:	mov	r0, #0
   12064:	mov	r1, #3
   12068:	mov	r2, r4
   1206c:	bl	15344 <__assert_fail@plt+0x3d54>
   12070:	mov	r3, r0
   12074:	mov	r0, #0
   12078:	mov	r1, r5
   1207c:	mov	r2, r7
   12080:	bl	1141c <error@plt>
   12084:	mov	r7, r9
   12088:	b	12098 <__assert_fail@plt+0xaa8>
   1208c:	cmp	r4, #0
   12090:	eorseq	r0, r8, #1
   12094:	beq	121ac <__assert_fail@plt+0xbbc>
   12098:	ldr	r0, [sp, #48]	; 0x30
   1209c:	cmp	r0, #0
   120a0:	beq	120ac <__assert_fail@plt+0xabc>
   120a4:	add	r0, sp, #164	; 0xa4
   120a8:	bl	1591c <__assert_fail@plt+0x432c>
   120ac:	mov	r0, r6
   120b0:	bl	136a8 <__assert_fail@plt+0x20b8>
   120b4:	cmp	r0, #2
   120b8:	bcc	12164 <__assert_fail@plt+0xb74>
   120bc:	movw	r0, #37320	; 0x91c8
   120c0:	movt	r0, #2
   120c4:	ldr	r1, [r0]
   120c8:	ldr	r0, [r0, #4]
   120cc:	str	r1, [sp, #48]	; 0x30
   120d0:	str	r0, [sp, #52]	; 0x34
   120d4:	movw	r0, #37328	; 0x91d0
   120d8:	movt	r0, #2
   120dc:	ldr	r1, [r0]
   120e0:	ldr	r0, [r0, #4]
   120e4:	str	r1, [sp, #40]	; 0x28
   120e8:	str	r0, [sp, #44]	; 0x2c
   120ec:	movw	r0, #37312	; 0x91c0
   120f0:	movt	r0, #2
   120f4:	ldrd	r4, [r0]
   120f8:	movw	r0, #37304	; 0x91b8
   120fc:	movt	r0, #2
   12100:	mov	r9, r6
   12104:	ldr	r6, [r0]
   12108:	ldr	r0, [r0, #4]
   1210c:	str	r0, [sp, #32]
   12110:	movw	r0, #37296	; 0x91b0
   12114:	movt	r0, #2
   12118:	ldr	sl, [r0]
   1211c:	ldr	r0, [r0, #4]
   12120:	str	r0, [sp, #36]	; 0x24
   12124:	movw	r1, #31297	; 0x7a41
   12128:	movt	r1, #1
   1212c:	mov	r0, #0
   12130:	mov	r2, #5
   12134:	bl	11374 <dcgettext@plt>
   12138:	stm	sp, {r4, r5, r6}
   1213c:	mov	r6, r9
   12140:	ldr	r1, [sp, #32]
   12144:	str	r1, [sp, #12]
   12148:	str	sl, [sp, #16]
   1214c:	ldr	r1, [sp, #36]	; 0x24
   12150:	str	r1, [sp, #20]
   12154:	str	r0, [sp, #24]
   12158:	add	r3, sp, #40	; 0x28
   1215c:	ldm	r3, {r0, r1, r2, r3}
   12160:	bl	12668 <__assert_fail@plt+0x1078>
   12164:	mov	r0, r6
   12168:	bl	136cc <__assert_fail@plt+0x20dc>
   1216c:	mov	r0, r7
   12170:	bl	13948 <__assert_fail@plt+0x2358>
   12174:	movw	r0, #37344	; 0x91e0
   12178:	movt	r0, #2
   1217c:	ldrb	r0, [r0]
   12180:	cmp	r0, #1
   12184:	bne	12198 <__assert_fail@plt+0xba8>
   12188:	mov	r0, #0
   1218c:	bl	115d8 <close@plt>
   12190:	cmp	r0, #0
   12194:	bne	1234c <__assert_fail@plt+0xd5c>
   12198:	eor	r0, r8, #1
   1219c:	sub	sp, fp, #56	; 0x38
   121a0:	vpop	{d8-d10}
   121a4:	add	sp, sp, #4
   121a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121ac:	mov	r0, r6
   121b0:	bl	136a8 <__assert_fail@plt+0x20b8>
   121b4:	cmp	r0, #0
   121b8:	bne	12098 <__assert_fail@plt+0xaa8>
   121bc:	mov	r0, #0
   121c0:	mov	r1, r7
   121c4:	bl	12564 <__assert_fail@plt+0xf74>
   121c8:	and	r8, r8, r0
   121cc:	b	12098 <__assert_fail@plt+0xaa8>
   121d0:	andeq	r0, r0, r0
   121d4:	cmnmi	r4, r0
   121d8:	add	r6, sp, #164	; 0xa4
   121dc:	mov	r0, r6
   121e0:	bl	1589c <__assert_fail@plt+0x42ac>
   121e4:	mov	r0, r5
   121e8:	mov	r1, r6
   121ec:	bl	15950 <__assert_fail@plt+0x4360>
   121f0:	cmp	r0, #0
   121f4:	beq	12364 <__assert_fail@plt+0xd74>
   121f8:	mov	r0, r5
   121fc:	bl	13840 <__assert_fail@plt+0x2250>
   12200:	cmp	r0, #0
   12204:	bne	12364 <__assert_fail@plt+0xd74>
   12208:	ldr	r0, [sp, #164]	; 0xa4
   1220c:	str	r0, [sp, #52]	; 0x34
   12210:	ldr	r7, [sp, #168]	; 0xa8
   12214:	mov	r0, r7
   12218:	bl	13588 <__assert_fail@plt+0x1f98>
   1221c:	mov	r5, r0
   12220:	mov	r0, #1
   12224:	cmp	r5, #0
   12228:	bne	11e34 <__assert_fail@plt+0x844>
   1222c:	b	122a4 <__assert_fail@plt+0xcb4>
   12230:	cmn	r0, #3
   12234:	bne	1228c <__assert_fail@plt+0xc9c>
   12238:	movw	r0, #37160	; 0x9128
   1223c:	movt	r0, #2
   12240:	ldr	r3, [r0]
   12244:	movw	r0, #37268	; 0x9194
   12248:	movt	r0, #2
   1224c:	ldr	r0, [r0]
   12250:	mov	r1, #0
   12254:	movw	r2, #30963	; 0x78f3
   12258:	movt	r2, #1
   1225c:	movw	r7, #30952	; 0x78e8
   12260:	movt	r7, #1
   12264:	str	r7, [sp]
   12268:	str	r2, [sp, #4]
   1226c:	str	r1, [sp, #8]
   12270:	movw	r1, #30889	; 0x78a9
   12274:	movt	r1, #1
   12278:	movw	r2, #30938	; 0x78da
   1227c:	movt	r2, #1
   12280:	bl	1602c <__assert_fail@plt+0x4a3c>
   12284:	mov	r0, #0
   12288:	bl	11494 <exit@plt>
   1228c:	cmn	r0, #2
   12290:	bne	122a8 <__assert_fail@plt+0xcb8>
   12294:	mov	r0, #0
   12298:	bl	116f0 <__assert_fail@plt+0x100>
   1229c:	cmp	r0, #3
   122a0:	bne	122b0 <__assert_fail@plt+0xcc0>
   122a4:	bl	164bc <__assert_fail@plt+0x4ecc>
   122a8:	mov	r0, #1
   122ac:	bl	116f0 <__assert_fail@plt+0x100>
   122b0:	movw	r0, #31121	; 0x7991
   122b4:	movt	r0, #1
   122b8:	movw	r1, #31161	; 0x79b9
   122bc:	movt	r1, #1
   122c0:	movw	r3, #31170	; 0x79c2
   122c4:	movt	r3, #1
   122c8:	movw	r2, #938	; 0x3aa
   122cc:	bl	115f0 <__assert_fail@plt>
   122d0:	movw	r1, #30979	; 0x7903
   122d4:	movt	r1, #1
   122d8:	mov	r0, #0
   122dc:	mov	r2, #5
   122e0:	bl	11374 <dcgettext@plt>
   122e4:	mov	r4, r0
   122e8:	ldr	r0, [r7]
   122ec:	ldr	r1, [r5, r0, lsl #2]
   122f0:	mov	r0, #4
   122f4:	bl	15290 <__assert_fail@plt+0x3ca0>
   122f8:	mov	r3, r0
   122fc:	mov	r0, #0
   12300:	mov	r1, #0
   12304:	mov	r2, r4
   12308:	bl	1141c <error@plt>
   1230c:	movw	r0, #37256	; 0x9188
   12310:	movt	r0, #2
   12314:	ldr	r4, [r0]
   12318:	movw	r1, #30996	; 0x7914
   1231c:	movt	r1, #1
   12320:	mov	r0, #0
   12324:	mov	r2, #5
   12328:	bl	11374 <dcgettext@plt>
   1232c:	mov	r3, r0
   12330:	movw	r2, #32288	; 0x7e20
   12334:	movt	r2, #1
   12338:	mov	r0, r4
   1233c:	mov	r1, #1
   12340:	bl	11548 <__fprintf_chk@plt>
   12344:	mov	r0, #1
   12348:	bl	116f0 <__assert_fail@plt+0x100>
   1234c:	bl	114e8 <__errno_location@plt>
   12350:	ldr	r1, [r0]
   12354:	movw	r2, #32098	; 0x7d62
   12358:	movt	r2, #1
   1235c:	mov	r0, #1
   12360:	bl	1141c <error@plt>
   12364:	movw	r1, #31075	; 0x7963
   12368:	movt	r1, #1
   1236c:	mov	r0, #0
   12370:	mov	r2, #5
   12374:	bl	11374 <dcgettext@plt>
   12378:	mov	r5, r0
   1237c:	mov	r0, #4
   12380:	mov	r1, r4
   12384:	bl	15290 <__assert_fail@plt+0x3ca0>
   12388:	mov	r3, r0
   1238c:	mov	r0, #1
   12390:	mov	r1, #0
   12394:	mov	r2, r5
   12398:	bl	1141c <error@plt>
   1239c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   123a0:	add	fp, sp, #24
   123a4:	mov	r4, r1
   123a8:	mov	r5, r0
   123ac:	cmp	r0, #0
   123b0:	movweq	r0, #1
   123b4:	mov	r1, #112	; 0x70
   123b8:	bl	161d0 <__assert_fail@plt+0x4be0>
   123bc:	mov	r8, r0
   123c0:	cmp	r5, #0
   123c4:	beq	12424 <__assert_fail@plt+0xe34>
   123c8:	cmp	r5, #1
   123cc:	bne	12434 <__assert_fail@plt+0xe44>
   123d0:	movw	r0, #37288	; 0x91a8
   123d4:	movt	r0, #2
   123d8:	ldrb	r0, [r0]
   123dc:	movw	r1, #37287	; 0x91a7
   123e0:	movt	r1, #2
   123e4:	ldrb	r1, [r1]
   123e8:	add	r0, r1, r0
   123ec:	movw	r1, #37286	; 0x91a6
   123f0:	movt	r1, #2
   123f4:	ldrb	r1, [r1]
   123f8:	add	r0, r0, r1
   123fc:	movw	r1, #37285	; 0x91a5
   12400:	movt	r1, #2
   12404:	ldrb	r1, [r1]
   12408:	add	r0, r0, r1
   1240c:	movw	r1, #37289	; 0x91a9
   12410:	movt	r1, #2
   12414:	ldrb	r1, [r1]
   12418:	add	r0, r0, r1
   1241c:	cmp	r0, #1
   12420:	bne	12434 <__assert_fail@plt+0xe44>
   12424:	mov	r0, #1
   12428:	str	r0, [r8]
   1242c:	mov	r0, r8
   12430:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12434:	add	r7, r8, #8
   12438:	movw	r9, #32098	; 0x7d62
   1243c:	movt	r9, #1
   12440:	b	12464 <__assert_fail@plt+0xe74>
   12444:	mov	r0, #0
   12448:	mov	r1, r7
   1244c:	bl	174a0 <_obstack_memory_used@@Base+0x718>
   12450:	str	r0, [r7, #-8]
   12454:	add	r4, r4, #4
   12458:	subs	r5, r5, #1
   1245c:	add	r7, r7, #112	; 0x70
   12460:	beq	12494 <__assert_fail@plt+0xea4>
   12464:	ldr	r6, [r4]
   12468:	cmp	r6, #0
   1246c:	beq	12444 <__assert_fail@plt+0xe54>
   12470:	mov	r0, r6
   12474:	mov	r1, r9
   12478:	bl	112f0 <strcmp@plt>
   1247c:	cmp	r0, #0
   12480:	beq	12444 <__assert_fail@plt+0xe54>
   12484:	mov	r0, r6
   12488:	mov	r1, r7
   1248c:	bl	17490 <_obstack_memory_used@@Base+0x708>
   12490:	b	12450 <__assert_fail@plt+0xe60>
   12494:	mov	r0, r8
   12498:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1249c:	push	{r4, r5, r6, r7, fp, lr}
   124a0:	add	fp, sp, #16
   124a4:	mov	r6, #1
   124a8:	cmp	r0, #0
   124ac:	beq	124bc <__assert_fail@plt+0xecc>
   124b0:	ldr	r2, [r1]
   124b4:	cmp	r2, #0
   124b8:	ble	124c4 <__assert_fail@plt+0xed4>
   124bc:	mov	r0, r6
   124c0:	pop	{r4, r5, r6, r7, fp, pc}
   124c4:	add	r1, r1, #56	; 0x38
   124c8:	mov	r4, #0
   124cc:	mov	r7, #1
   124d0:	mov	r5, #0
   124d4:	b	124f0 <__assert_fail@plt+0xf00>
   124d8:	ldrd	r2, [r1]
   124dc:	adds	r4, r2, r4
   124e0:	adc	r5, r3, r5
   124e4:	add	r1, r1, #112	; 0x70
   124e8:	subs	r0, r0, #1
   124ec:	beq	12514 <__assert_fail@plt+0xf24>
   124f0:	ldr	r2, [r1, #-56]	; 0xffffffc8
   124f4:	cmp	r2, #0
   124f8:	bne	124e4 <__assert_fail@plt+0xef4>
   124fc:	ldr	r2, [r1, #-32]	; 0xffffffe0
   12500:	and	r2, r2, #61440	; 0xf000
   12504:	cmp	r2, #32768	; 0x8000
   12508:	beq	124d8 <__assert_fail@plt+0xee8>
   1250c:	mov	r7, #7
   12510:	b	124e4 <__assert_fail@plt+0xef4>
   12514:	mov	r6, #1
   12518:	subs	r0, r4, #10
   1251c:	sbcs	r0, r5, #0
   12520:	bcc	12554 <__assert_fail@plt+0xf64>
   12524:	mov	r6, #1
   12528:	mov	r0, r4
   1252c:	mov	r1, r5
   12530:	mov	r2, #10
   12534:	mov	r3, #0
   12538:	bl	172a0 <_obstack_memory_used@@Base+0x518>
   1253c:	add	r6, r6, #1
   12540:	rsbs	r2, r4, #99	; 0x63
   12544:	rscs	r2, r5, #0
   12548:	mov	r4, r0
   1254c:	mov	r5, r1
   12550:	bcc	12528 <__assert_fail@plt+0xf38>
   12554:	cmp	r6, r7
   12558:	movlt	r6, r7
   1255c:	mov	r0, r6
   12560:	pop	{r4, r5, r6, r7, fp, pc}
   12564:	push	{r4, r5, r6, r7, fp, lr}
   12568:	add	fp, sp, #16
   1256c:	sub	sp, sp, #8
   12570:	mov	r6, r1
   12574:	mov	r4, r0
   12578:	cmp	r0, #0
   1257c:	beq	125ec <__assert_fail@plt+0xffc>
   12580:	movw	r1, #32098	; 0x7d62
   12584:	movt	r1, #1
   12588:	mov	r0, r4
   1258c:	bl	112f0 <strcmp@plt>
   12590:	cmp	r0, #0
   12594:	beq	125ec <__assert_fail@plt+0xffc>
   12598:	mov	r5, #0
   1259c:	mov	r0, r4
   125a0:	mov	r1, #0
   125a4:	bl	11428 <open64@plt>
   125a8:	cmn	r0, #1
   125ac:	beq	1262c <__assert_fail@plt+0x103c>
   125b0:	mov	r7, r0
   125b4:	str	r5, [sp]
   125b8:	str	r5, [sp, #4]
   125bc:	mov	r1, r4
   125c0:	mov	r2, r6
   125c4:	bl	12830 <__assert_fail@plt+0x1240>
   125c8:	mov	r5, r0
   125cc:	mov	r0, r7
   125d0:	bl	115d8 <close@plt>
   125d4:	cmp	r0, #0
   125d8:	beq	1265c <__assert_fail@plt+0x106c>
   125dc:	bl	114e8 <__errno_location@plt>
   125e0:	ldr	r6, [r0]
   125e4:	mov	r5, #0
   125e8:	b	12634 <__assert_fail@plt+0x1044>
   125ec:	movw	r0, #37344	; 0x91e0
   125f0:	movt	r0, #2
   125f4:	mov	r1, #1
   125f8:	strb	r1, [r0]
   125fc:	mov	r0, #0
   12600:	mov	r1, #0
   12604:	bl	16504 <__assert_fail@plt+0x4f14>
   12608:	mvn	r0, #0
   1260c:	str	r0, [sp]
   12610:	str	r0, [sp, #4]
   12614:	mov	r0, #0
   12618:	mov	r1, r4
   1261c:	mov	r2, r6
   12620:	bl	12830 <__assert_fail@plt+0x1240>
   12624:	sub	sp, fp, #16
   12628:	pop	{r4, r5, r6, r7, fp, pc}
   1262c:	bl	114e8 <__errno_location@plt>
   12630:	ldr	r6, [r0]
   12634:	mov	r0, #0
   12638:	mov	r1, #3
   1263c:	mov	r2, r4
   12640:	bl	15344 <__assert_fail@plt+0x3d54>
   12644:	mov	r3, r0
   12648:	movw	r2, #31996	; 0x7cfc
   1264c:	movt	r2, #1
   12650:	mov	r0, #0
   12654:	mov	r1, r6
   12658:	bl	1141c <error@plt>
   1265c:	mov	r0, r5
   12660:	sub	sp, fp, #16
   12664:	pop	{r4, r5, r6, r7, fp, pc}
   12668:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1266c:	add	fp, sp, #24
   12670:	sub	sp, sp, #24
   12674:	mov	r6, r3
   12678:	mov	r7, r2
   1267c:	movw	r8, #31960	; 0x7cd8
   12680:	movt	r8, #1
   12684:	movw	r2, #37288	; 0x91a8
   12688:	movt	r2, #2
   1268c:	ldrb	r2, [r2]
   12690:	cmp	r2, #1
   12694:	movw	r9, #37340	; 0x91dc
   12698:	movt	r9, #2
   1269c:	bne	126cc <__assert_fail@plt+0x10dc>
   126a0:	ldr	r4, [r9]
   126a4:	add	r2, sp, #3
   126a8:	bl	13a18 <__assert_fail@plt+0x2428>
   126ac:	mov	r3, r0
   126b0:	movw	r5, #31960	; 0x7cd8
   126b4:	movt	r5, #1
   126b8:	add	r1, r5, #1
   126bc:	mov	r0, #1
   126c0:	mov	r2, r4
   126c4:	bl	11530 <__printf_chk@plt>
   126c8:	b	126d0 <__assert_fail@plt+0x10e0>
   126cc:	add	r5, r8, #1
   126d0:	movw	r0, #37287	; 0x91a7
   126d4:	movt	r0, #2
   126d8:	ldrb	r0, [r0]
   126dc:	cmp	r0, #1
   126e0:	bne	12714 <__assert_fail@plt+0x1124>
   126e4:	ldr	r4, [r9]
   126e8:	add	r2, sp, #3
   126ec:	mov	r0, r7
   126f0:	mov	r1, r6
   126f4:	bl	13a18 <__assert_fail@plt+0x2428>
   126f8:	mov	r3, r0
   126fc:	mov	r0, #1
   12700:	mov	r1, r5
   12704:	mov	r2, r4
   12708:	bl	11530 <__printf_chk@plt>
   1270c:	movw	r5, #31960	; 0x7cd8
   12710:	movt	r5, #1
   12714:	movw	r0, #37286	; 0x91a6
   12718:	movt	r0, #2
   1271c:	ldrb	r0, [r0]
   12720:	cmp	r0, #1
   12724:	bne	12758 <__assert_fail@plt+0x1168>
   12728:	ldr	r1, [fp, #12]
   1272c:	ldr	r0, [fp, #8]
   12730:	ldr	r4, [r9]
   12734:	add	r2, sp, #3
   12738:	bl	13a18 <__assert_fail@plt+0x2428>
   1273c:	mov	r3, r0
   12740:	mov	r0, #1
   12744:	mov	r1, r5
   12748:	mov	r2, r4
   1274c:	bl	11530 <__printf_chk@plt>
   12750:	movw	r5, #31960	; 0x7cd8
   12754:	movt	r5, #1
   12758:	movw	r0, #37285	; 0x91a5
   1275c:	movt	r0, #2
   12760:	ldrb	r0, [r0]
   12764:	cmp	r0, #1
   12768:	bne	12798 <__assert_fail@plt+0x11a8>
   1276c:	ldr	r1, [fp, #20]
   12770:	ldr	r0, [fp, #16]
   12774:	ldr	r4, [r9]
   12778:	add	r2, sp, #3
   1277c:	bl	13a18 <__assert_fail@plt+0x2428>
   12780:	mov	r3, r0
   12784:	mov	r0, #1
   12788:	mov	r1, r5
   1278c:	mov	r2, r4
   12790:	bl	11530 <__printf_chk@plt>
   12794:	b	1279c <__assert_fail@plt+0x11ac>
   12798:	mov	r8, r5
   1279c:	ldr	r5, [fp, #32]
   127a0:	movw	r0, #37289	; 0x91a9
   127a4:	movt	r0, #2
   127a8:	ldrb	r0, [r0]
   127ac:	cmp	r0, #1
   127b0:	bne	127dc <__assert_fail@plt+0x11ec>
   127b4:	ldr	r1, [fp, #28]
   127b8:	ldr	r0, [fp, #24]
   127bc:	ldr	r4, [r9]
   127c0:	add	r2, sp, #3
   127c4:	bl	13a18 <__assert_fail@plt+0x2428>
   127c8:	mov	r3, r0
   127cc:	mov	r0, #1
   127d0:	mov	r1, r8
   127d4:	mov	r2, r4
   127d8:	bl	11530 <__printf_chk@plt>
   127dc:	cmp	r5, #0
   127e0:	beq	12820 <__assert_fail@plt+0x1230>
   127e4:	mov	r0, r5
   127e8:	mov	r1, #10
   127ec:	bl	114d0 <strchr@plt>
   127f0:	cmp	r0, #0
   127f4:	beq	1280c <__assert_fail@plt+0x121c>
   127f8:	mov	r0, #0
   127fc:	mov	r1, #3
   12800:	mov	r2, r5
   12804:	bl	15344 <__assert_fail@plt+0x3d54>
   12808:	mov	r5, r0
   1280c:	movw	r1, #31995	; 0x7cfb
   12810:	movt	r1, #1
   12814:	mov	r0, #1
   12818:	mov	r2, r5
   1281c:	bl	11530 <__printf_chk@plt>
   12820:	mov	r0, #10
   12824:	bl	115e4 <putchar_unlocked@plt>
   12828:	sub	sp, fp, #24
   1282c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12834:	add	fp, sp, #28
   12838:	sub	sp, sp, #116	; 0x74
   1283c:	sub	sp, sp, #16384	; 0x4000
   12840:	mov	r8, r2
   12844:	str	r0, [sp, #40]	; 0x28
   12848:	cmp	r1, #0
   1284c:	str	r1, [sp, #32]
   12850:	mov	r0, r1
   12854:	bne	1286c <__assert_fail@plt+0x127c>
   12858:	movw	r1, #31729	; 0x7bf1
   1285c:	movt	r1, #1
   12860:	mov	r0, #0
   12864:	mov	r2, #5
   12868:	bl	11374 <dcgettext@plt>
   1286c:	str	r0, [sp, #28]
   12870:	mov	r5, #0
   12874:	str	r5, [sp, #100]	; 0x64
   12878:	str	r5, [sp, #96]	; 0x60
   1287c:	str	r5, [sp, #92]	; 0x5c
   12880:	str	r5, [sp, #88]	; 0x58
   12884:	bl	113ec <__ctype_get_mb_cur_max@plt>
   12888:	cmp	r0, #1
   1288c:	mov	r1, #0
   12890:	movwhi	r1, #1
   12894:	movw	r2, #37286	; 0x91a6
   12898:	movt	r2, #2
   1289c:	ldrb	r2, [r2]
   128a0:	and	r3, r1, r2
   128a4:	cmp	r0, #2
   128a8:	mov	r0, #0
   128ac:	movwcc	r0, #1
   128b0:	and	r0, r2, r0
   128b4:	movw	r1, #37285	; 0x91a5
   128b8:	movt	r1, #2
   128bc:	ldrb	r1, [r1]
   128c0:	orr	r0, r1, r0
   128c4:	eor	r0, r0, #1
   128c8:	str	r3, [sp, #36]	; 0x24
   128cc:	orr	r7, r3, r0
   128d0:	movw	r0, #37289	; 0x91a9
   128d4:	movt	r0, #2
   128d8:	ldrb	r0, [r0]
   128dc:	movw	r1, #37287	; 0x91a7
   128e0:	movt	r1, #2
   128e4:	ldrb	r1, [r1]
   128e8:	orr	r6, r1, r0
   128ec:	movw	r4, #37288	; 0x91a8
   128f0:	movt	r4, #2
   128f4:	tst	r7, #1
   128f8:	ldrbeq	r0, [r4]
   128fc:	cmpeq	r0, #0
   12900:	beq	12928 <__assert_fail@plt+0x1338>
   12904:	mov	r0, #2
   12908:	str	r5, [sp]
   1290c:	str	r5, [sp, #4]
   12910:	str	r0, [sp, #8]
   12914:	ldr	r0, [sp, #40]	; 0x28
   12918:	mov	r2, #0
   1291c:	mov	r3, #0
   12920:	bl	13800 <__assert_fail@plt+0x2210>
   12924:	b	12930 <__assert_fail@plt+0x1340>
   12928:	tst	r6, #1
   1292c:	bne	12904 <__assert_fail@plt+0x1314>
   12930:	ldrb	r0, [r4]
   12934:	orr	r0, r6, r0
   12938:	orr	r0, r7, r0
   1293c:	tst	r0, #1
   12940:	beq	12cf0 <__assert_fail@plt+0x1700>
   12944:	ldr	r0, [sp, #36]	; 0x24
   12948:	orr	r0, r0, r6
   1294c:	tst	r0, #1
   12950:	beq	12d48 <__assert_fail@plt+0x1758>
   12954:	bl	113ec <__ctype_get_mb_cur_max@plt>
   12958:	cmp	r0, #1
   1295c:	bls	12d88 <__assert_fail@plt+0x1798>
   12960:	mov	r1, #0
   12964:	str	r1, [sp, #84]	; 0x54
   12968:	mov	r0, #0
   1296c:	str	r0, [sp, #56]	; 0x38
   12970:	str	r1, [sp, #80]	; 0x50
   12974:	mov	r0, #0
   12978:	str	r0, [sp, #52]	; 0x34
   1297c:	mov	r5, #0
   12980:	mov	r0, #0
   12984:	str	r0, [sp, #72]	; 0x48
   12988:	mov	r0, #0
   1298c:	str	r0, [sp, #64]	; 0x40
   12990:	mov	r0, #0
   12994:	str	r0, [sp, #60]	; 0x3c
   12998:	mov	r0, #0
   1299c:	str	r0, [sp, #68]	; 0x44
   129a0:	mov	r0, #0
   129a4:	str	r0, [sp, #48]	; 0x30
   129a8:	mov	r0, #0
   129ac:	str	r0, [sp, #44]	; 0x2c
   129b0:	mov	r8, #0
   129b4:	mov	r4, #0
   129b8:	add	r0, sp, #104	; 0x68
   129bc:	add	r1, r0, r4
   129c0:	rsb	r2, r4, #16384	; 0x4000
   129c4:	ldr	r0, [sp, #40]	; 0x28
   129c8:	bl	15bd4 <__assert_fail@plt+0x45e4>
   129cc:	cmp	r0, #0
   129d0:	beq	12f84 <__assert_fail@plt+0x1994>
   129d4:	cmn	r0, #1
   129d8:	beq	12f90 <__assert_fail@plt+0x19a0>
   129dc:	ldr	r1, [sp, #88]	; 0x58
   129e0:	ldr	r2, [sp, #92]	; 0x5c
   129e4:	adds	r1, r1, r0
   129e8:	str	r1, [sp, #88]	; 0x58
   129ec:	adc	r1, r2, #0
   129f0:	str	r1, [sp, #92]	; 0x5c
   129f4:	add	r7, r0, r4
   129f8:	add	sl, sp, #104	; 0x68
   129fc:	tst	r8, #1
   12a00:	bne	12a4c <__assert_fail@plt+0x145c>
   12a04:	b	12a24 <__assert_fail@plt+0x1434>
   12a08:	sub	r7, r7, #1
   12a0c:	add	sl, sl, #1
   12a10:	mov	r8, #1
   12a14:	cmp	r7, #0
   12a18:	beq	129b4 <__assert_fail@plt+0x13c4>
   12a1c:	tst	r8, #1
   12a20:	bne	12a4c <__assert_fail@plt+0x145c>
   12a24:	ldrb	r0, [sl]
   12a28:	bl	13af0 <__assert_fail@plt+0x2500>
   12a2c:	cmp	r0, #0
   12a30:	beq	12a4c <__assert_fail@plt+0x145c>
   12a34:	ldrb	r0, [sl]
   12a38:	str	r0, [sp, #76]	; 0x4c
   12a3c:	mov	r9, #1
   12a40:	mov	r8, #0
   12a44:	mov	r1, #0
   12a48:	b	12a9c <__assert_fail@plt+0x14ac>
   12a4c:	ldr	r4, [sp, #80]	; 0x50
   12a50:	ldr	r6, [sp, #84]	; 0x54
   12a54:	add	r0, sp, #76	; 0x4c
   12a58:	mov	r1, sl
   12a5c:	mov	r2, r7
   12a60:	add	r3, sp, #80	; 0x50
   12a64:	bl	13b18 <__assert_fail@plt+0x2528>
   12a68:	cmn	r0, #1
   12a6c:	beq	12a08 <__assert_fail@plt+0x1418>
   12a70:	mov	r9, r0
   12a74:	cmn	r0, #2
   12a78:	beq	12cb4 <__assert_fail@plt+0x16c4>
   12a7c:	add	r0, sp, #80	; 0x50
   12a80:	bl	11368 <mbsinit@plt>
   12a84:	clz	r0, r0
   12a88:	lsr	r8, r0, #5
   12a8c:	cmp	r9, #0
   12a90:	beq	12b34 <__assert_fail@plt+0x1544>
   12a94:	mov	r1, #1
   12a98:	ldr	r0, [sp, #76]	; 0x4c
   12a9c:	sub	r2, r0, #9
   12aa0:	cmp	r2, #23
   12aa4:	bhi	12ba0 <__assert_fail@plt+0x15b0>
   12aa8:	add	r3, pc, #0
   12aac:	ldr	pc, [r3, r2, lsl #2]
   12ab0:	andeq	r2, r1, r0, lsl fp
   12ab4:	andeq	r2, r1, r4, asr #22
   12ab8:	andeq	r2, r1, r8, lsr #24
   12abc:	andeq	r2, r1, ip, asr fp
   12ac0:	andeq	r2, r1, ip, asr fp
   12ac4:	andeq	r2, r1, r0, lsr #23
   12ac8:	andeq	r2, r1, r0, lsr #23
   12acc:	andeq	r2, r1, r0, lsr #23
   12ad0:	andeq	r2, r1, r0, lsr #23
   12ad4:	andeq	r2, r1, r0, lsr #23
   12ad8:	andeq	r2, r1, r0, lsr #23
   12adc:	andeq	r2, r1, r0, lsr #23
   12ae0:	andeq	r2, r1, r0, lsr #23
   12ae4:	andeq	r2, r1, r0, lsr #23
   12ae8:	andeq	r2, r1, r0, lsr #23
   12aec:	andeq	r2, r1, r0, lsr #23
   12af0:	andeq	r2, r1, r0, lsr #23
   12af4:	andeq	r2, r1, r0, lsr #23
   12af8:	andeq	r2, r1, r0, lsr #23
   12afc:	andeq	r2, r1, r0, lsr #23
   12b00:	andeq	r2, r1, r0, lsr #23
   12b04:	andeq	r2, r1, r0, lsr #23
   12b08:	andeq	r2, r1, r0, lsr #23
   12b0c:	andeq	r2, r1, r0, lsl ip
   12b10:	ldr	r1, [sp, #48]	; 0x30
   12b14:	and	r0, r1, #7
   12b18:	subs	r0, r1, r0
   12b1c:	ldr	r1, [sp, #44]	; 0x2c
   12b20:	sbc	r1, r1, #0
   12b24:	adds	r0, r0, #8
   12b28:	str	r0, [sp, #48]	; 0x30
   12b2c:	adc	r0, r1, #0
   12b30:	b	12c24 <__assert_fail@plt+0x1634>
   12b34:	mov	r0, #0
   12b38:	str	r0, [sp, #76]	; 0x4c
   12b3c:	mov	r9, #1
   12b40:	b	12ba8 <__assert_fail@plt+0x15b8>
   12b44:	ldr	r0, [sp, #96]	; 0x60
   12b48:	ldr	r1, [sp, #100]	; 0x64
   12b4c:	adds	r0, r0, #1
   12b50:	str	r0, [sp, #96]	; 0x60
   12b54:	adc	r0, r1, #0
   12b58:	str	r0, [sp, #100]	; 0x64
   12b5c:	ldr	r1, [sp, #56]	; 0x38
   12b60:	ldr	r3, [sp, #48]	; 0x30
   12b64:	subs	r0, r1, r3
   12b68:	ldr	r2, [sp, #52]	; 0x34
   12b6c:	ldr	r6, [sp, #44]	; 0x2c
   12b70:	sbcs	r0, r2, r6
   12b74:	mov	r0, #0
   12b78:	movwcc	r0, #1
   12b7c:	cmp	r0, #0
   12b80:	movne	r2, r6
   12b84:	str	r2, [sp, #52]	; 0x34
   12b88:	movne	r1, r3
   12b8c:	str	r1, [sp, #56]	; 0x38
   12b90:	mov	r0, #0
   12b94:	str	r0, [sp, #48]	; 0x30
   12b98:	mov	r0, #0
   12b9c:	b	12c24 <__assert_fail@plt+0x1634>
   12ba0:	cmp	r1, #0
   12ba4:	beq	12c6c <__assert_fail@plt+0x167c>
   12ba8:	bl	113bc <iswprint@plt>
   12bac:	cmp	r0, #0
   12bb0:	beq	12c50 <__assert_fail@plt+0x1660>
   12bb4:	movw	r0, #37289	; 0x91a9
   12bb8:	movt	r0, #2
   12bbc:	ldrb	r0, [r0]
   12bc0:	cmp	r0, #1
   12bc4:	bne	12bec <__assert_fail@plt+0x15fc>
   12bc8:	ldr	r0, [sp, #76]	; 0x4c
   12bcc:	bl	11320 <wcwidth@plt>
   12bd0:	bic	r0, r0, r0, asr #31
   12bd4:	ldr	r1, [sp, #48]	; 0x30
   12bd8:	adds	r1, r1, r0
   12bdc:	str	r1, [sp, #48]	; 0x30
   12be0:	ldr	r0, [sp, #44]	; 0x2c
   12be4:	adc	r0, r0, #0
   12be8:	str	r0, [sp, #44]	; 0x2c
   12bec:	ldr	r0, [sp, #76]	; 0x4c
   12bf0:	bl	114ac <iswspace@plt>
   12bf4:	cmp	r0, #0
   12bf8:	bne	12c28 <__assert_fail@plt+0x1638>
   12bfc:	ldr	r0, [sp, #76]	; 0x4c
   12c00:	bl	13388 <__assert_fail@plt+0x1d98>
   12c04:	cmp	r0, #0
   12c08:	bne	12c28 <__assert_fail@plt+0x1638>
   12c0c:	b	12cac <__assert_fail@plt+0x16bc>
   12c10:	ldr	r0, [sp, #48]	; 0x30
   12c14:	adds	r0, r0, #1
   12c18:	str	r0, [sp, #48]	; 0x30
   12c1c:	ldr	r0, [sp, #44]	; 0x2c
   12c20:	adc	r0, r0, #0
   12c24:	str	r0, [sp, #44]	; 0x2c
   12c28:	ldr	r0, [sp, #68]	; 0x44
   12c2c:	and	r0, r0, #1
   12c30:	ldr	r1, [sp, #64]	; 0x40
   12c34:	adds	r1, r1, r0
   12c38:	str	r1, [sp, #64]	; 0x40
   12c3c:	ldr	r0, [sp, #60]	; 0x3c
   12c40:	adc	r0, r0, #0
   12c44:	str	r0, [sp, #60]	; 0x3c
   12c48:	mov	r0, #0
   12c4c:	str	r0, [sp, #68]	; 0x44
   12c50:	ldr	r0, [sp, #72]	; 0x48
   12c54:	sub	r7, r7, r9
   12c58:	add	sl, sl, r9
   12c5c:	adds	r5, r5, #1
   12c60:	adc	r0, r0, #0
   12c64:	str	r0, [sp, #72]	; 0x48
   12c68:	b	12a14 <__assert_fail@plt+0x1424>
   12c6c:	bl	11488 <__ctype_b_loc@plt>
   12c70:	ldr	r4, [r0]
   12c74:	ldrb	r0, [sl]
   12c78:	bl	133d8 <__assert_fail@plt+0x1de8>
   12c7c:	add	r0, r4, r0, lsl #1
   12c80:	ldrh	r0, [r0]
   12c84:	tst	r0, #16384	; 0x4000
   12c88:	beq	12c50 <__assert_fail@plt+0x1660>
   12c8c:	ldr	r1, [sp, #48]	; 0x30
   12c90:	adds	r1, r1, #1
   12c94:	str	r1, [sp, #48]	; 0x30
   12c98:	ldr	r1, [sp, #44]	; 0x2c
   12c9c:	adc	r1, r1, #0
   12ca0:	str	r1, [sp, #44]	; 0x2c
   12ca4:	tst	r0, #8192	; 0x2000
   12ca8:	bne	12c28 <__assert_fail@plt+0x1638>
   12cac:	mov	r0, #1
   12cb0:	b	12c4c <__assert_fail@plt+0x165c>
   12cb4:	str	r4, [sp, #80]	; 0x50
   12cb8:	str	r6, [sp, #84]	; 0x54
   12cbc:	mov	r8, #1
   12cc0:	cmp	r7, #0
   12cc4:	mov	r4, #0
   12cc8:	beq	129b8 <__assert_fail@plt+0x13c8>
   12ccc:	cmp	r7, #16384	; 0x4000
   12cd0:	addeq	sl, sl, #1
   12cd4:	movweq	r7, #16383	; 0x3fff
   12cd8:	add	r0, sp, #104	; 0x68
   12cdc:	mov	r1, sl
   12ce0:	mov	r2, r7
   12ce4:	bl	1132c <memmove@plt>
   12ce8:	mov	r4, r7
   12cec:	b	129b8 <__assert_fail@plt+0x13c8>
   12cf0:	ldr	r0, [r8]
   12cf4:	cmp	r0, #1
   12cf8:	blt	12d0c <__assert_fail@plt+0x171c>
   12cfc:	add	r1, r8, #8
   12d00:	ldr	r0, [sp, #40]	; 0x28
   12d04:	bl	174a0 <_obstack_memory_used@@Base+0x718>
   12d08:	str	r0, [r8]
   12d0c:	cmp	r0, #0
   12d10:	bne	13190 <__assert_fail@plt+0x1ba0>
   12d14:	add	r0, r8, #8
   12d18:	bl	1336c <__assert_fail@plt+0x1d7c>
   12d1c:	cmp	r0, #0
   12d20:	beq	13190 <__assert_fail@plt+0x1ba0>
   12d24:	ldr	r0, [r8, #60]	; 0x3c
   12d28:	cmp	r0, #0
   12d2c:	bmi	13190 <__assert_fail@plt+0x1ba0>
   12d30:	ldr	r5, [fp, #12]
   12d34:	ldr	r6, [r8, #56]	; 0x38
   12d38:	cmn	r5, #1
   12d3c:	ble	130b8 <__assert_fail@plt+0x1ac8>
   12d40:	ldr	r7, [fp, #8]
   12d44:	b	130d8 <__assert_fail@plt+0x1ae8>
   12d48:	add	r2, sp, #96	; 0x60
   12d4c:	add	r3, sp, #88	; 0x58
   12d50:	ldr	r0, [sp, #28]
   12d54:	ldr	r1, [sp, #40]	; 0x28
   12d58:	bl	133f0 <__assert_fail@plt+0x1e00>
   12d5c:	str	r0, [sp, #40]	; 0x28
   12d60:	mov	sl, #0
   12d64:	mov	r8, #0
   12d68:	mov	r9, #0
   12d6c:	mov	r7, #0
   12d70:	mov	lr, #0
   12d74:	mov	r3, #0
   12d78:	ldr	ip, [sp, #32]
   12d7c:	movw	r2, #37286	; 0x91a6
   12d80:	movt	r2, #2
   12d84:	b	1327c <__assert_fail@plt+0x1c8c>
   12d88:	mov	sl, #0
   12d8c:	mov	ip, #0
   12d90:	mov	r3, #0
   12d94:	mov	r6, #0
   12d98:	mov	r4, #0
   12d9c:	mov	r8, #0
   12da0:	mov	r2, #0
   12da4:	str	r2, [sp, #72]	; 0x48
   12da8:	str	r3, [sp, #68]	; 0x44
   12dac:	mov	r7, ip
   12db0:	ldr	r0, [sp, #40]	; 0x28
   12db4:	add	r1, sp, #104	; 0x68
   12db8:	mov	r2, #16384	; 0x4000
   12dbc:	bl	15bd4 <__assert_fail@plt+0x45e4>
   12dc0:	cmp	r0, #0
   12dc4:	beq	13024 <__assert_fail@plt+0x1a34>
   12dc8:	mov	r5, r0
   12dcc:	cmn	r0, #1
   12dd0:	beq	13030 <__assert_fail@plt+0x1a40>
   12dd4:	ldr	r0, [sp, #88]	; 0x58
   12dd8:	ldr	r1, [sp, #92]	; 0x5c
   12ddc:	adds	r0, r0, r5
   12de0:	str	r0, [sp, #88]	; 0x58
   12de4:	adc	r0, r1, #0
   12de8:	str	r0, [sp, #92]	; 0x5c
   12dec:	add	r9, sp, #104	; 0x68
   12df0:	mov	ip, r7
   12df4:	ldr	r3, [sp, #68]	; 0x44
   12df8:	ldr	r2, [sp, #72]	; 0x48
   12dfc:	ldrb	r7, [r9], #1
   12e00:	sub	r0, r7, #9
   12e04:	cmp	r0, #23
   12e08:	bhi	12ecc <__assert_fail@plt+0x18dc>
   12e0c:	add	r1, pc, #0
   12e10:	ldr	pc, [r1, r0, lsl #2]
   12e14:	andeq	r2, r1, r4, ror lr
   12e18:	andeq	r2, r1, ip, lsl #29
   12e1c:	andeq	r2, r1, r0, ror #30
   12e20:	andeq	r2, r1, r4, lsr #29
   12e24:	andeq	r2, r1, r4, lsr #29
   12e28:	andeq	r2, r1, ip, asr #29
   12e2c:	andeq	r2, r1, ip, asr #29
   12e30:	andeq	r2, r1, ip, asr #29
   12e34:	andeq	r2, r1, ip, asr #29
   12e38:	andeq	r2, r1, ip, asr #29
   12e3c:	andeq	r2, r1, ip, asr #29
   12e40:	andeq	r2, r1, ip, asr #29
   12e44:	andeq	r2, r1, ip, asr #29
   12e48:	andeq	r2, r1, ip, asr #29
   12e4c:	andeq	r2, r1, ip, asr #29
   12e50:	andeq	r2, r1, ip, asr #29
   12e54:	andeq	r2, r1, ip, asr #29
   12e58:	andeq	r2, r1, ip, asr #29
   12e5c:	andeq	r2, r1, ip, asr #29
   12e60:	andeq	r2, r1, ip, asr #29
   12e64:	andeq	r2, r1, ip, asr #29
   12e68:	andeq	r2, r1, ip, asr #29
   12e6c:	andeq	r2, r1, ip, asr #29
   12e70:	andeq	r2, r1, r0, lsl pc
   12e74:	and	r0, r8, #7
   12e78:	subs	r0, r8, r0
   12e7c:	sbc	r1, r2, #0
   12e80:	adds	r8, r0, #8
   12e84:	adc	r2, r1, #0
   12e88:	b	12f60 <__assert_fail@plt+0x1970>
   12e8c:	ldr	r0, [sp, #96]	; 0x60
   12e90:	ldr	r1, [sp, #100]	; 0x64
   12e94:	adds	r0, r0, #1
   12e98:	str	r0, [sp, #96]	; 0x60
   12e9c:	adc	r0, r1, #0
   12ea0:	str	r0, [sp, #100]	; 0x64
   12ea4:	subs	r0, sl, r8
   12ea8:	sbcs	r0, ip, r2
   12eac:	mov	r0, #0
   12eb0:	movwcc	r0, #1
   12eb4:	cmp	r0, #0
   12eb8:	movne	ip, r2
   12ebc:	movne	sl, r8
   12ec0:	mov	r8, #0
   12ec4:	mov	r2, #0
   12ec8:	b	12f60 <__assert_fail@plt+0x1970>
   12ecc:	str	r2, [sp, #72]	; 0x48
   12ed0:	str	r3, [sp, #68]	; 0x44
   12ed4:	str	ip, [sp, #52]	; 0x34
   12ed8:	str	sl, [sp, #56]	; 0x38
   12edc:	bl	11488 <__ctype_b_loc@plt>
   12ee0:	ldr	sl, [r0]
   12ee4:	mov	r0, r7
   12ee8:	bl	133d8 <__assert_fail@plt+0x1de8>
   12eec:	add	r0, sl, r7, lsl #1
   12ef0:	ldrh	r0, [r0]
   12ef4:	tst	r0, #16384	; 0x4000
   12ef8:	bne	12f1c <__assert_fail@plt+0x192c>
   12efc:	ldr	sl, [sp, #56]	; 0x38
   12f00:	ldr	ip, [sp, #52]	; 0x34
   12f04:	ldr	r3, [sp, #68]	; 0x44
   12f08:	ldr	r2, [sp, #72]	; 0x48
   12f0c:	b	12f70 <__assert_fail@plt+0x1980>
   12f10:	adds	r8, r8, #1
   12f14:	adc	r2, r2, #0
   12f18:	b	12f60 <__assert_fail@plt+0x1970>
   12f1c:	adds	r8, r8, #1
   12f20:	ldr	r2, [sp, #72]	; 0x48
   12f24:	adc	r2, r2, #0
   12f28:	tst	r0, #8192	; 0x2000
   12f2c:	ldr	sl, [sp, #56]	; 0x38
   12f30:	bne	12f58 <__assert_fail@plt+0x1968>
   12f34:	str	r2, [sp, #72]	; 0x48
   12f38:	mov	r0, r7
   12f3c:	bl	133dc <__assert_fail@plt+0x1dec>
   12f40:	cmp	r0, #0
   12f44:	beq	12f7c <__assert_fail@plt+0x198c>
   12f48:	ldr	ip, [sp, #52]	; 0x34
   12f4c:	ldr	r3, [sp, #68]	; 0x44
   12f50:	ldr	r2, [sp, #72]	; 0x48
   12f54:	b	12f60 <__assert_fail@plt+0x1970>
   12f58:	ldr	ip, [sp, #52]	; 0x34
   12f5c:	ldr	r3, [sp, #68]	; 0x44
   12f60:	and	r0, r4, #1
   12f64:	adds	r3, r3, r0
   12f68:	adc	r6, r6, #0
   12f6c:	mov	r4, #0
   12f70:	subs	r5, r5, #1
   12f74:	bne	12dfc <__assert_fail@plt+0x180c>
   12f78:	b	12da4 <__assert_fail@plt+0x17b4>
   12f7c:	mov	r4, #1
   12f80:	b	12f00 <__assert_fail@plt+0x1910>
   12f84:	mov	r0, #1
   12f88:	str	r0, [sp, #40]	; 0x28
   12f8c:	b	12fc8 <__assert_fail@plt+0x19d8>
   12f90:	bl	114e8 <__errno_location@plt>
   12f94:	ldr	r7, [r0]
   12f98:	mov	r0, #0
   12f9c:	str	r0, [sp, #40]	; 0x28
   12fa0:	mov	r0, #0
   12fa4:	mov	r1, #3
   12fa8:	ldr	r2, [sp, #28]
   12fac:	bl	15344 <__assert_fail@plt+0x3d54>
   12fb0:	mov	r3, r0
   12fb4:	movw	r2, #31996	; 0x7cfc
   12fb8:	movt	r2, #1
   12fbc:	mov	r0, #0
   12fc0:	mov	r1, r7
   12fc4:	bl	1141c <error@plt>
   12fc8:	ldr	ip, [sp, #32]
   12fcc:	movw	r2, #37286	; 0x91a6
   12fd0:	movt	r2, #2
   12fd4:	ldr	sl, [sp, #56]	; 0x38
   12fd8:	ldr	r8, [sp, #52]	; 0x34
   12fdc:	ldr	r3, [sp, #64]	; 0x40
   12fe0:	ldr	r7, [sp, #60]	; 0x3c
   12fe4:	mov	r0, #0
   12fe8:	ldr	r6, [sp, #48]	; 0x30
   12fec:	subs	r1, sl, r6
   12ff0:	ldr	r4, [sp, #44]	; 0x2c
   12ff4:	sbcs	r1, r8, r4
   12ff8:	movwcc	r0, #1
   12ffc:	cmp	r0, #0
   13000:	movne	r8, r4
   13004:	movne	sl, r6
   13008:	ldr	r0, [sp, #68]	; 0x44
   1300c:	and	r0, r0, #1
   13010:	adds	lr, r3, r0
   13014:	adc	r3, r7, #0
   13018:	mov	r9, r5
   1301c:	ldr	r7, [sp, #72]	; 0x48
   13020:	b	1327c <__assert_fail@plt+0x1c8c>
   13024:	mov	r0, #1
   13028:	str	r0, [sp, #40]	; 0x28
   1302c:	b	13068 <__assert_fail@plt+0x1a78>
   13030:	bl	114e8 <__errno_location@plt>
   13034:	ldr	r5, [r0]
   13038:	mov	r0, #0
   1303c:	str	r0, [sp, #40]	; 0x28
   13040:	mov	r0, #0
   13044:	mov	r1, #3
   13048:	ldr	r2, [sp, #28]
   1304c:	bl	15344 <__assert_fail@plt+0x3d54>
   13050:	mov	r3, r0
   13054:	movw	r2, #31996	; 0x7cfc
   13058:	movt	r2, #1
   1305c:	mov	r0, #0
   13060:	mov	r1, r5
   13064:	bl	1141c <error@plt>
   13068:	movw	r2, #37286	; 0x91a6
   1306c:	movt	r2, #2
   13070:	mov	r1, r7
   13074:	ldr	r3, [sp, #68]	; 0x44
   13078:	ldr	r7, [sp, #72]	; 0x48
   1307c:	mov	r9, #0
   13080:	subs	r0, sl, r8
   13084:	sbcs	r0, r1, r7
   13088:	mov	r0, #0
   1308c:	movwcc	r0, #1
   13090:	cmp	r0, #0
   13094:	movne	r1, r7
   13098:	movne	sl, r8
   1309c:	and	r0, r4, #1
   130a0:	adds	lr, r3, r0
   130a4:	adc	r3, r6, #0
   130a8:	mov	r7, #0
   130ac:	ldr	ip, [sp, #32]
   130b0:	mov	r8, r1
   130b4:	b	1327c <__assert_fail@plt+0x1c8c>
   130b8:	mov	r0, #1
   130bc:	str	r0, [sp]
   130c0:	ldr	r0, [sp, #40]	; 0x28
   130c4:	mov	r2, #0
   130c8:	mov	r3, #0
   130cc:	bl	113e0 <lseek64@plt>
   130d0:	mov	r7, r0
   130d4:	mov	r5, r1
   130d8:	movw	r0, #37280	; 0x91a0
   130dc:	movt	r0, #2
   130e0:	ldr	r0, [r0]
   130e4:	udiv	r1, r6, r0
   130e8:	mls	r0, r1, r0, r6
   130ec:	cmp	r0, #0
   130f0:	beq	13128 <__assert_fail@plt+0x1b38>
   130f4:	mov	sl, #0
   130f8:	subs	r0, r6, r7
   130fc:	rscs	r1, r5, #0
   13100:	mov	r2, #0
   13104:	movwlt	r2, #1
   13108:	cmp	r2, #0
   1310c:	movwne	r1, #0
   13110:	str	r1, [sp, #92]	; 0x5c
   13114:	movwne	r0, #0
   13118:	str	r0, [sp, #88]	; 0x58
   1311c:	mov	r0, #1
   13120:	str	r0, [sp, #40]	; 0x28
   13124:	b	12d64 <__assert_fail@plt+0x1774>
   13128:	ldr	r0, [r8, #64]	; 0x40
   1312c:	movw	r1, #513	; 0x201
   13130:	cmp	r0, #536870913	; 0x20000001
   13134:	movw	r2, #513	; 0x201
   13138:	addcc	r2, r0, #1
   1313c:	cmp	r0, #0
   13140:	movle	r2, r1
   13144:	udiv	r0, r6, r2
   13148:	mul	r4, r0, r2
   1314c:	subs	r0, r7, r4
   13150:	sbcs	r0, r5, #0
   13154:	bcs	13190 <__assert_fail@plt+0x1ba0>
   13158:	mvn	r6, #0
   1315c:	mov	r0, #1
   13160:	str	r0, [sp]
   13164:	ldr	r0, [sp, #40]	; 0x28
   13168:	mov	r2, r4
   1316c:	mov	r3, #0
   13170:	bl	113e0 <lseek64@plt>
   13174:	subs	r0, r6, r0
   13178:	sbcs	r0, r6, r1
   1317c:	bge	13190 <__assert_fail@plt+0x1ba0>
   13180:	subs	r0, r4, r7
   13184:	str	r0, [sp, #88]	; 0x58
   13188:	rsc	r0, r5, #0
   1318c:	str	r0, [sp, #92]	; 0x5c
   13190:	mov	r0, #2
   13194:	mov	r1, #0
   13198:	str	r1, [sp]
   1319c:	str	r1, [sp, #4]
   131a0:	str	r0, [sp, #8]
   131a4:	ldr	r5, [sp, #40]	; 0x28
   131a8:	mov	r0, r5
   131ac:	mov	r2, #0
   131b0:	mov	r3, #0
   131b4:	bl	13800 <__assert_fail@plt+0x2210>
   131b8:	add	r4, sp, #104	; 0x68
   131bc:	ldr	r6, [sp, #32]
   131c0:	mov	r0, r5
   131c4:	mov	r1, r4
   131c8:	mov	r2, #16384	; 0x4000
   131cc:	bl	15bd4 <__assert_fail@plt+0x45e4>
   131d0:	cmp	r0, #0
   131d4:	beq	131fc <__assert_fail@plt+0x1c0c>
   131d8:	cmn	r0, #1
   131dc:	beq	13220 <__assert_fail@plt+0x1c30>
   131e0:	ldr	r1, [sp, #88]	; 0x58
   131e4:	ldr	r2, [sp, #92]	; 0x5c
   131e8:	adds	r0, r1, r0
   131ec:	str	r0, [sp, #88]	; 0x58
   131f0:	adc	r0, r2, #0
   131f4:	str	r0, [sp, #92]	; 0x5c
   131f8:	b	131c0 <__assert_fail@plt+0x1bd0>
   131fc:	mov	sl, #0
   13200:	mov	r0, #1
   13204:	str	r0, [sp, #40]	; 0x28
   13208:	mov	r8, #0
   1320c:	mov	r9, #0
   13210:	mov	r7, #0
   13214:	mov	lr, #0
   13218:	mov	r3, #0
   1321c:	b	13270 <__assert_fail@plt+0x1c80>
   13220:	bl	114e8 <__errno_location@plt>
   13224:	ldr	r5, [r0]
   13228:	mov	sl, #0
   1322c:	mov	r0, #0
   13230:	mov	r1, #3
   13234:	ldr	r2, [sp, #28]
   13238:	bl	15344 <__assert_fail@plt+0x3d54>
   1323c:	mov	r3, r0
   13240:	movw	r2, #31996	; 0x7cfc
   13244:	movt	r2, #1
   13248:	mov	r0, #0
   1324c:	mov	r1, r5
   13250:	bl	1141c <error@plt>
   13254:	mov	r8, #0
   13258:	mov	r9, #0
   1325c:	mov	r7, #0
   13260:	mov	lr, #0
   13264:	mov	r3, #0
   13268:	mov	r0, #0
   1326c:	str	r0, [sp, #40]	; 0x28
   13270:	movw	r2, #37286	; 0x91a6
   13274:	movt	r2, #2
   13278:	mov	ip, r6
   1327c:	ldrb	r2, [r2]
   13280:	ldr	r0, [sp, #96]	; 0x60
   13284:	ldr	r1, [sp, #100]	; 0x64
   13288:	ldr	r4, [sp, #88]	; 0x58
   1328c:	ldr	r6, [sp, #92]	; 0x5c
   13290:	ldr	r5, [sp, #36]	; 0x24
   13294:	eor	r5, r5, #1
   13298:	ands	r2, r2, r5
   1329c:	movne	r7, r6
   132a0:	movne	r9, r4
   132a4:	str	r9, [sp]
   132a8:	str	r7, [sp, #4]
   132ac:	add	r2, sp, #8
   132b0:	stm	r2, {r4, r6, sl}
   132b4:	str	r8, [sp, #20]
   132b8:	str	ip, [sp, #24]
   132bc:	mov	r2, lr
   132c0:	mov	r4, lr
   132c4:	mov	r5, r3
   132c8:	bl	12668 <__assert_fail@plt+0x1078>
   132cc:	movw	r0, #37328	; 0x91d0
   132d0:	movt	r0, #2
   132d4:	ldrd	r2, [r0]
   132d8:	ldr	r1, [sp, #96]	; 0x60
   132dc:	ldr	r6, [sp, #100]	; 0x64
   132e0:	adds	r2, r2, r1
   132e4:	adc	r3, r3, r6
   132e8:	strd	r2, [r0]
   132ec:	movw	r0, #37320	; 0x91c8
   132f0:	movt	r0, #2
   132f4:	ldrd	r2, [r0]
   132f8:	adds	r1, r2, r4
   132fc:	str	r1, [r0]
   13300:	adc	r1, r3, r5
   13304:	movw	r2, #37312	; 0x91c0
   13308:	movt	r2, #2
   1330c:	ldrd	r4, [r2]
   13310:	adds	r3, r4, r9
   13314:	str	r3, [r2]
   13318:	str	r1, [r0, #4]
   1331c:	adc	r0, r5, r7
   13320:	movw	r1, #37304	; 0x91b8
   13324:	movt	r1, #2
   13328:	ldrd	r4, [r1]
   1332c:	ldr	r3, [sp, #88]	; 0x58
   13330:	ldr	r7, [sp, #92]	; 0x5c
   13334:	adds	r4, r4, r3
   13338:	str	r0, [r2, #4]
   1333c:	adc	r5, r5, r7
   13340:	strd	r4, [r1]
   13344:	movw	r0, #37296	; 0x91b0
   13348:	movt	r0, #2
   1334c:	ldrd	r2, [r0]
   13350:	subs	r1, r2, sl
   13354:	sbcs	r1, r3, r8
   13358:	strcc	sl, [r0]
   1335c:	strcc	r8, [r0, #4]
   13360:	ldr	r0, [sp, #40]	; 0x28
   13364:	sub	sp, fp, #28
   13368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1336c:	ldr	r0, [r0, #16]
   13370:	and	r0, r0, #53248	; 0xd000
   13374:	orr	r0, r0, #8192	; 0x2000
   13378:	cmp	r0, #40960	; 0xa000
   1337c:	moveq	r0, #1
   13380:	movne	r0, #0
   13384:	bx	lr
   13388:	mov	r1, r0
   1338c:	movw	r0, #37284	; 0x91a4
   13390:	movt	r0, #2
   13394:	ldrb	r2, [r0]
   13398:	mov	r0, #0
   1339c:	cmp	r2, #0
   133a0:	bxne	lr
   133a4:	mov	r0, #1
   133a8:	cmp	r1, #160	; 0xa0
   133ac:	movwne	r2, #8199	; 0x2007
   133b0:	cmpne	r1, r2
   133b4:	bne	133bc <__assert_fail@plt+0x1dcc>
   133b8:	bx	lr
   133bc:	movw	r2, #8239	; 0x202f
   133c0:	cmp	r1, r2
   133c4:	movwne	r0, #8288	; 0x2060
   133c8:	subne	r0, r1, r0
   133cc:	clzne	r0, r0
   133d0:	lsrne	r0, r0, #5
   133d4:	bx	lr
   133d8:	bx	lr
   133dc:	push	{fp, lr}
   133e0:	mov	fp, sp
   133e4:	bl	11518 <btowc@plt>
   133e8:	pop	{fp, lr}
   133ec:	b	13388 <__assert_fail@plt+0x1d98>
   133f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133f4:	add	fp, sp, #28
   133f8:	sub	sp, sp, #36	; 0x24
   133fc:	sub	sp, sp, #16384	; 0x4000
   13400:	str	r1, [sp, #16]
   13404:	mov	r4, #0
   13408:	cmp	r2, #0
   1340c:	cmpne	r3, #0
   13410:	bne	13420 <__assert_fail@plt+0x1e30>
   13414:	mov	r0, r4
   13418:	sub	sp, fp, #28
   1341c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13420:	str	r3, [sp, #4]
   13424:	str	r2, [sp, #8]
   13428:	str	r0, [sp, #12]
   1342c:	mov	r4, #0
   13430:	mov	r5, #0
   13434:	mov	r7, #0
   13438:	mov	r8, #0
   1343c:	mov	r9, #0
   13440:	b	13478 <__assert_fail@plt+0x1e88>
   13444:	subs	r0, r4, r8
   13448:	sbc	r1, r5, r9
   1344c:	movw	r2, #34953	; 0x8889
   13450:	movt	r2, #34952	; 0x8888
   13454:	umull	r2, r3, r6, r2
   13458:	rsbs	r0, r0, r3, lsr #3
   1345c:	rscs	r0, r1, #0
   13460:	mov	r7, #0
   13464:	movwcs	r7, #1
   13468:	mov	r8, r4
   1346c:	mov	r9, r5
   13470:	ldr	r4, [sp, #24]
   13474:	ldr	r5, [sp, #20]
   13478:	ldr	r0, [sp, #16]
   1347c:	add	r1, sp, #31
   13480:	mov	r2, #16384	; 0x4000
   13484:	bl	15bd4 <__assert_fail@plt+0x45e4>
   13488:	cmp	r0, #0
   1348c:	beq	13538 <__assert_fail@plt+0x1f48>
   13490:	mov	r6, r0
   13494:	cmn	r0, #1
   13498:	beq	13550 <__assert_fail@plt+0x1f60>
   1349c:	adds	r4, r4, r6
   134a0:	str	r4, [sp, #24]
   134a4:	adc	r5, r5, #0
   134a8:	str	r5, [sp, #20]
   134ac:	tst	r7, #1
   134b0:	beq	13504 <__assert_fail@plt+0x1f14>
   134b4:	add	r0, sp, #31
   134b8:	add	sl, r0, r6
   134bc:	mov	r1, #10
   134c0:	strb	r1, [sl]
   134c4:	mov	r1, #10
   134c8:	bl	113b0 <rawmemchr@plt>
   134cc:	cmp	r0, sl
   134d0:	mov	r4, r8
   134d4:	mov	r5, r9
   134d8:	bcs	13444 <__assert_fail@plt+0x1e54>
   134dc:	mov	r4, r8
   134e0:	mov	r5, r9
   134e4:	adds	r4, r4, #1
   134e8:	adc	r5, r5, #0
   134ec:	add	r0, r0, #1
   134f0:	mov	r1, #10
   134f4:	bl	113b0 <rawmemchr@plt>
   134f8:	cmp	r0, sl
   134fc:	bcc	134e4 <__assert_fail@plt+0x1ef4>
   13500:	b	13444 <__assert_fail@plt+0x1e54>
   13504:	mov	r0, r6
   13508:	mov	r4, r8
   1350c:	mov	r5, r9
   13510:	add	r1, sp, #31
   13514:	adds	r2, r4, #1
   13518:	adc	r3, r5, #0
   1351c:	ldrb	r7, [r1], #1
   13520:	cmp	r7, #10
   13524:	moveq	r4, r2
   13528:	moveq	r5, r3
   1352c:	subs	r0, r0, #1
   13530:	bne	13514 <__assert_fail@plt+0x1f24>
   13534:	b	13444 <__assert_fail@plt+0x1e54>
   13538:	ldr	r0, [sp, #4]
   1353c:	strd	r4, [r0]
   13540:	ldr	r0, [sp, #8]
   13544:	strd	r8, [r0]
   13548:	mov	r4, #1
   1354c:	b	13414 <__assert_fail@plt+0x1e24>
   13550:	bl	114e8 <__errno_location@plt>
   13554:	ldr	r5, [r0]
   13558:	mov	r4, #0
   1355c:	mov	r0, #0
   13560:	mov	r1, #3
   13564:	ldr	r2, [sp, #12]
   13568:	bl	15344 <__assert_fail@plt+0x3d54>
   1356c:	mov	r3, r0
   13570:	movw	r2, #31996	; 0x7cfc
   13574:	movt	r2, #1
   13578:	mov	r0, #0
   1357c:	mov	r1, r5
   13580:	bl	1141c <error@plt>
   13584:	b	13414 <__assert_fail@plt+0x1e24>
   13588:	push	{r4, sl, fp, lr}
   1358c:	add	fp, sp, #8
   13590:	mov	r4, r0
   13594:	mov	r0, #24
   13598:	bl	1655c <__assert_fail@plt+0x4f6c>
   1359c:	cmp	r0, #0
   135a0:	moveq	r0, #0
   135a4:	strne	r4, [r0, #16]
   135a8:	strne	r4, [r0, #20]
   135ac:	movne	r1, #0
   135b0:	strne	r1, [r0]
   135b4:	pop	{r4, sl, fp, pc}
   135b8:	push	{r4, sl, fp, lr}
   135bc:	add	fp, sp, #8
   135c0:	mov	r4, r0
   135c4:	mov	r0, #24
   135c8:	bl	1655c <__assert_fail@plt+0x4f6c>
   135cc:	cmp	r0, #0
   135d0:	beq	135e8 <__assert_fail@plt+0x1ff8>
   135d4:	vmov.i32	q8, #0	; 0x00000000
   135d8:	mov	r1, r0
   135dc:	str	r4, [r1], #4
   135e0:	vst1.32	{d16-d17}, [r1]
   135e4:	pop	{r4, sl, fp, pc}
   135e8:	mov	r0, #0
   135ec:	pop	{r4, sl, fp, pc}
   135f0:	push	{r4, r5, r6, sl, fp, lr}
   135f4:	add	fp, sp, #16
   135f8:	mov	r4, r1
   135fc:	mov	r5, r0
   13600:	ldr	r3, [r0]
   13604:	cmp	r3, #0
   13608:	beq	13644 <__assert_fail@plt+0x2054>
   1360c:	add	r0, r5, #8
   13610:	add	r1, r5, #12
   13614:	mov	r6, #0
   13618:	mov	r2, #0
   1361c:	bl	115a8 <getdelim@plt>
   13620:	cmn	r0, #1
   13624:	ble	13674 <__assert_fail@plt+0x2084>
   13628:	mov	r0, #1
   1362c:	str	r0, [r4]
   13630:	ldmib	r5, {r0, r6}
   13634:	add	r0, r0, #1
   13638:	str	r0, [r5, #4]
   1363c:	mov	r0, r6
   13640:	pop	{r4, r5, r6, sl, fp, pc}
   13644:	ldr	r0, [r5, #20]
   13648:	ldr	r0, [r0]
   1364c:	cmp	r0, #0
   13650:	beq	13694 <__assert_fail@plt+0x20a4>
   13654:	mov	r0, #1
   13658:	str	r0, [r4]
   1365c:	ldr	r0, [r5, #20]
   13660:	add	r1, r0, #4
   13664:	str	r1, [r5, #20]
   13668:	ldr	r6, [r0]
   1366c:	mov	r0, r6
   13670:	pop	{r4, r5, r6, sl, fp, pc}
   13674:	ldr	r0, [r5]
   13678:	bl	114a0 <feof@plt>
   1367c:	mov	r1, #2
   13680:	cmp	r0, #0
   13684:	movweq	r1, #4
   13688:	str	r1, [r4]
   1368c:	mov	r0, r6
   13690:	pop	{r4, r5, r6, sl, fp, pc}
   13694:	mov	r0, #2
   13698:	str	r0, [r4]
   1369c:	mov	r6, #0
   136a0:	mov	r0, r6
   136a4:	pop	{r4, r5, r6, sl, fp, pc}
   136a8:	ldr	r1, [r0]
   136ac:	cmp	r1, #0
   136b0:	ldrne	r0, [r0, #4]
   136b4:	bxne	lr
   136b8:	ldr	r1, [r0, #16]
   136bc:	ldr	r0, [r0, #20]
   136c0:	sub	r0, r0, r1
   136c4:	asr	r0, r0, #2
   136c8:	bx	lr
   136cc:	push	{r4, sl, fp, lr}
   136d0:	add	fp, sp, #8
   136d4:	mov	r4, r0
   136d8:	ldr	r0, [r0]
   136dc:	cmp	r0, #0
   136e0:	beq	136ec <__assert_fail@plt+0x20fc>
   136e4:	ldr	r0, [r4, #8]
   136e8:	bl	13948 <__assert_fail@plt+0x2358>
   136ec:	mov	r0, r4
   136f0:	pop	{r4, sl, fp, lr}
   136f4:	b	13948 <__assert_fail@plt+0x2358>
   136f8:	movw	r1, #37348	; 0x91e4
   136fc:	movt	r1, #2
   13700:	str	r0, [r1]
   13704:	bx	lr
   13708:	movw	r1, #37352	; 0x91e8
   1370c:	movt	r1, #2
   13710:	strb	r0, [r1]
   13714:	bx	lr
   13718:	push	{r4, r5, r6, sl, fp, lr}
   1371c:	add	fp, sp, #16
   13720:	sub	sp, sp, #8
   13724:	movw	r0, #37268	; 0x9194
   13728:	movt	r0, #2
   1372c:	ldr	r0, [r0]
   13730:	bl	16914 <__assert_fail@plt+0x5324>
   13734:	cmp	r0, #0
   13738:	beq	13760 <__assert_fail@plt+0x2170>
   1373c:	movw	r0, #37352	; 0x91e8
   13740:	movt	r0, #2
   13744:	ldrb	r0, [r0]
   13748:	cmp	r0, #0
   1374c:	beq	13780 <__assert_fail@plt+0x2190>
   13750:	bl	114e8 <__errno_location@plt>
   13754:	ldr	r0, [r0]
   13758:	cmp	r0, #32
   1375c:	bne	13780 <__assert_fail@plt+0x2190>
   13760:	movw	r0, #37256	; 0x9188
   13764:	movt	r0, #2
   13768:	ldr	r0, [r0]
   1376c:	bl	16914 <__assert_fail@plt+0x5324>
   13770:	cmp	r0, #0
   13774:	subeq	sp, fp, #16
   13778:	popeq	{r4, r5, r6, sl, fp, pc}
   1377c:	b	137f0 <__assert_fail@plt+0x2200>
   13780:	movw	r1, #31980	; 0x7cec
   13784:	movt	r1, #1
   13788:	mov	r0, #0
   1378c:	mov	r2, #5
   13790:	bl	11374 <dcgettext@plt>
   13794:	mov	r4, r0
   13798:	movw	r0, #37348	; 0x91e4
   1379c:	movt	r0, #2
   137a0:	ldr	r6, [r0]
   137a4:	bl	114e8 <__errno_location@plt>
   137a8:	ldr	r5, [r0]
   137ac:	cmp	r6, #0
   137b0:	bne	137cc <__assert_fail@plt+0x21dc>
   137b4:	movw	r2, #31996	; 0x7cfc
   137b8:	movt	r2, #1
   137bc:	mov	r0, #0
   137c0:	mov	r1, r5
   137c4:	mov	r3, r4
   137c8:	b	137ec <__assert_fail@plt+0x21fc>
   137cc:	mov	r0, r6
   137d0:	bl	15334 <__assert_fail@plt+0x3d44>
   137d4:	mov	r3, r0
   137d8:	str	r4, [sp]
   137dc:	movw	r2, #31992	; 0x7cf8
   137e0:	movt	r2, #1
   137e4:	mov	r0, #0
   137e8:	mov	r1, r5
   137ec:	bl	1141c <error@plt>
   137f0:	movw	r0, #37164	; 0x912c
   137f4:	movt	r0, #2
   137f8:	ldr	r0, [r0]
   137fc:	bl	11350 <_exit@plt>
   13800:	b	112fc <posix_fadvise64@plt>
   13804:	cmp	r0, #0
   13808:	bxeq	lr
   1380c:	push	{r4, sl, fp, lr}
   13810:	add	fp, sp, #8
   13814:	sub	sp, sp, #16
   13818:	mov	r4, r1
   1381c:	bl	1153c <fileno@plt>
   13820:	mov	r1, #0
   13824:	str	r1, [sp]
   13828:	stmib	sp, {r1, r4}
   1382c:	mov	r2, #0
   13830:	mov	r3, #0
   13834:	bl	13800 <__assert_fail@plt+0x2210>
   13838:	sub	sp, fp, #8
   1383c:	pop	{r4, sl, fp, pc}
   13840:	push	{r4, r5, fp, lr}
   13844:	add	fp, sp, #8
   13848:	sub	sp, sp, #8
   1384c:	mov	r4, r0
   13850:	bl	1153c <fileno@plt>
   13854:	cmn	r0, #1
   13858:	ble	138d0 <__assert_fail@plt+0x22e0>
   1385c:	mov	r0, r4
   13860:	bl	11464 <__freading@plt>
   13864:	cmp	r0, #0
   13868:	beq	13894 <__assert_fail@plt+0x22a4>
   1386c:	mov	r0, r4
   13870:	bl	1153c <fileno@plt>
   13874:	mov	r1, #1
   13878:	str	r1, [sp]
   1387c:	mov	r2, #0
   13880:	mov	r3, #0
   13884:	bl	113e0 <lseek64@plt>
   13888:	and	r0, r0, r1
   1388c:	cmn	r0, #1
   13890:	beq	138d0 <__assert_fail@plt+0x22e0>
   13894:	mov	r0, r4
   13898:	bl	138e0 <__assert_fail@plt+0x22f0>
   1389c:	cmp	r0, #0
   138a0:	beq	138d0 <__assert_fail@plt+0x22e0>
   138a4:	bl	114e8 <__errno_location@plt>
   138a8:	ldr	r5, [r0]
   138ac:	mov	r0, r4
   138b0:	bl	11554 <fclose@plt>
   138b4:	cmp	r5, #0
   138b8:	beq	138c8 <__assert_fail@plt+0x22d8>
   138bc:	bl	114e8 <__errno_location@plt>
   138c0:	str	r5, [r0]
   138c4:	mvn	r0, #0
   138c8:	sub	sp, fp, #8
   138cc:	pop	{r4, r5, fp, pc}
   138d0:	mov	r0, r4
   138d4:	sub	sp, fp, #8
   138d8:	pop	{r4, r5, fp, lr}
   138dc:	b	11554 <fclose@plt>
   138e0:	push	{r4, sl, fp, lr}
   138e4:	add	fp, sp, #8
   138e8:	mov	r4, r0
   138ec:	cmp	r0, #0
   138f0:	beq	13908 <__assert_fail@plt+0x2318>
   138f4:	mov	r0, r4
   138f8:	bl	11464 <__freading@plt>
   138fc:	cmp	r0, #0
   13900:	movne	r0, r4
   13904:	blne	13914 <__assert_fail@plt+0x2324>
   13908:	mov	r0, r4
   1390c:	pop	{r4, sl, fp, lr}
   13910:	b	11314 <fflush@plt>
   13914:	push	{fp, lr}
   13918:	mov	fp, sp
   1391c:	sub	sp, sp, #8
   13920:	ldrb	r1, [r0, #1]
   13924:	tst	r1, #1
   13928:	beq	13940 <__assert_fail@plt+0x2350>
   1392c:	mov	r1, #1
   13930:	str	r1, [sp]
   13934:	mov	r2, #0
   13938:	mov	r3, #0
   1393c:	bl	13970 <__assert_fail@plt+0x2380>
   13940:	mov	sp, fp
   13944:	pop	{fp, pc}
   13948:	push	{r4, r5, r6, sl, fp, lr}
   1394c:	add	fp, sp, #16
   13950:	mov	r4, r0
   13954:	bl	114e8 <__errno_location@plt>
   13958:	mov	r5, r0
   1395c:	ldr	r6, [r0]
   13960:	mov	r0, r4
   13964:	bl	11338 <free@plt>
   13968:	str	r6, [r5]
   1396c:	pop	{r4, r5, r6, sl, fp, pc}
   13970:	push	{r4, r5, r6, r7, fp, lr}
   13974:	add	fp, sp, #16
   13978:	sub	sp, sp, #8
   1397c:	mov	r5, r3
   13980:	mov	r6, r2
   13984:	mov	r4, r0
   13988:	ldr	r0, [r0, #4]
   1398c:	ldr	r1, [r4, #8]
   13990:	cmp	r1, r0
   13994:	bne	139b0 <__assert_fail@plt+0x23c0>
   13998:	ldrd	r0, [r4, #16]
   1399c:	cmp	r1, r0
   139a0:	bne	139b0 <__assert_fail@plt+0x23c0>
   139a4:	ldr	r0, [r4, #36]	; 0x24
   139a8:	cmp	r0, #0
   139ac:	beq	139c8 <__assert_fail@plt+0x23d8>
   139b0:	mov	r0, r4
   139b4:	mov	r2, r6
   139b8:	mov	r3, r5
   139bc:	sub	sp, fp, #16
   139c0:	pop	{r4, r5, r6, r7, fp, lr}
   139c4:	b	11560 <fseeko64@plt>
   139c8:	ldr	r7, [fp, #8]
   139cc:	mov	r0, r4
   139d0:	bl	1153c <fileno@plt>
   139d4:	str	r7, [sp]
   139d8:	mov	r2, r6
   139dc:	mov	r3, r5
   139e0:	bl	113e0 <lseek64@plt>
   139e4:	and	r2, r0, r1
   139e8:	cmn	r2, #1
   139ec:	beq	13a0c <__assert_fail@plt+0x241c>
   139f0:	strd	r0, [r4, #80]	; 0x50
   139f4:	ldr	r0, [r4]
   139f8:	bic	r0, r0, #16
   139fc:	str	r0, [r4]
   13a00:	mov	r0, #0
   13a04:	sub	sp, fp, #16
   13a08:	pop	{r4, r5, r6, r7, fp, pc}
   13a0c:	mvn	r0, #0
   13a10:	sub	sp, fp, #16
   13a14:	pop	{r4, r5, r6, r7, fp, pc}
   13a18:	push	{r4, r5, r6, sl, fp, lr}
   13a1c:	add	fp, sp, #16
   13a20:	mov	r4, r1
   13a24:	mov	r5, r0
   13a28:	mov	r0, #0
   13a2c:	strb	r0, [r2, #20]
   13a30:	add	r6, r2, #19
   13a34:	mov	r0, r5
   13a38:	mov	r1, r4
   13a3c:	mov	r2, #10
   13a40:	mov	r3, #0
   13a44:	bl	172a0 <_obstack_memory_used@@Base+0x518>
   13a48:	add	r2, r0, r0, lsl #2
   13a4c:	sub	r2, r5, r2, lsl #1
   13a50:	orr	r2, r2, #48	; 0x30
   13a54:	strb	r2, [r6], #-1
   13a58:	rsbs	r2, r5, #9
   13a5c:	rscs	r2, r4, #0
   13a60:	mov	r5, r0
   13a64:	mov	r4, r1
   13a68:	bcc	13a34 <__assert_fail@plt+0x2444>
   13a6c:	add	r0, r6, #1
   13a70:	pop	{r4, r5, r6, sl, fp, pc}
   13a74:	push	{r4, sl, fp, lr}
   13a78:	add	fp, sp, #8
   13a7c:	mov	r4, r0
   13a80:	bl	11320 <wcwidth@plt>
   13a84:	cmn	r0, #1
   13a88:	popgt	{r4, sl, fp, pc}
   13a8c:	mov	r0, r4
   13a90:	bl	113a4 <iswcntrl@plt>
   13a94:	clz	r0, r0
   13a98:	lsr	r0, r0, #5
   13a9c:	pop	{r4, sl, fp, pc}
   13aa0:	push	{r4, r5, r6, sl, fp, lr}
   13aa4:	add	fp, sp, #16
   13aa8:	mov	r5, r1
   13aac:	mov	r4, r0
   13ab0:	ldr	r6, [r1], #16
   13ab4:	cmp	r6, r1
   13ab8:	bne	13acc <__assert_fail@plt+0x24dc>
   13abc:	ldr	r2, [r5, #4]
   13ac0:	add	r6, r4, #16
   13ac4:	mov	r0, r6
   13ac8:	bl	1135c <memcpy@plt>
   13acc:	str	r6, [r4]
   13ad0:	ldr	r0, [r5, #4]
   13ad4:	str	r0, [r4, #4]
   13ad8:	ldrb	r0, [r5, #8]
   13adc:	strb	r0, [r4, #8]
   13ae0:	cmp	r0, #0
   13ae4:	ldrne	r0, [r5, #12]
   13ae8:	strne	r0, [r4, #12]
   13aec:	pop	{r4, r5, r6, sl, fp, pc}
   13af0:	ubfx	r1, r0, #5, #3
   13af4:	movw	r2, #32000	; 0x7d00
   13af8:	movt	r2, #1
   13afc:	ldr	r1, [r2, r1, lsl #2]
   13b00:	and	r0, r0, #31
   13b04:	mov	r2, #1
   13b08:	and	r0, r1, r2, lsl r0
   13b0c:	cmp	r0, #0
   13b10:	movwne	r0, #1
   13b14:	bx	lr
   13b18:	push	{r4, r5, r6, r7, fp, lr}
   13b1c:	add	fp, sp, #16
   13b20:	sub	sp, sp, #8
   13b24:	mov	r7, r2
   13b28:	mov	r4, r1
   13b2c:	add	r5, sp, #4
   13b30:	cmp	r0, #0
   13b34:	movne	r5, r0
   13b38:	mov	r0, r5
   13b3c:	bl	11410 <mbrtowc@plt>
   13b40:	mov	r6, r0
   13b44:	cmp	r7, #0
   13b48:	beq	13b70 <__assert_fail@plt+0x2580>
   13b4c:	cmn	r6, #2
   13b50:	bcc	13b70 <__assert_fail@plt+0x2580>
   13b54:	mov	r0, #0
   13b58:	bl	16998 <__assert_fail@plt+0x53a8>
   13b5c:	cmp	r0, #0
   13b60:	bne	13b70 <__assert_fail@plt+0x2580>
   13b64:	ldrb	r0, [r4]
   13b68:	str	r0, [r5]
   13b6c:	mov	r6, #1
   13b70:	mov	r0, r6
   13b74:	sub	sp, fp, #16
   13b78:	pop	{r4, r5, r6, r7, fp, pc}
   13b7c:	andeq	r0, r0, r0
   13b80:	push	{r4, sl, fp, lr}
   13b84:	add	fp, sp, #8
   13b88:	sub	sp, sp, #64	; 0x40
   13b8c:	mov	r0, #85	; 0x55
   13b90:	bl	11380 <sysconf@plt>
   13b94:	mov	r4, r0
   13b98:	mov	r0, #30
   13b9c:	bl	11380 <sysconf@plt>
   13ba0:	orr	r1, r0, r4
   13ba4:	cmn	r1, #1
   13ba8:	ble	13bc8 <__assert_fail@plt+0x25d8>
   13bac:	vmov	s0, r0
   13bb0:	vcvt.f64.s32	d16, s0
   13bb4:	vmov	s0, r4
   13bb8:	vcvt.f64.s32	d17, s0
   13bbc:	vmul.f64	d0, d17, d16
   13bc0:	sub	sp, fp, #8
   13bc4:	pop	{r4, sl, fp, pc}
   13bc8:	mov	r0, sp
   13bcc:	bl	11440 <sysinfo@plt>
   13bd0:	cmp	r0, #0
   13bd4:	beq	13be4 <__assert_fail@plt+0x25f4>
   13bd8:	vldr	d0, [pc, #24]	; 13bf8 <__assert_fail@plt+0x2608>
   13bdc:	sub	sp, fp, #8
   13be0:	pop	{r4, sl, fp, pc}
   13be4:	vldr	s0, [sp, #16]
   13be8:	vldr	s2, [sp, #52]	; 0x34
   13bec:	vcvt.f64.u32	d16, s2
   13bf0:	vcvt.f64.u32	d17, s0
   13bf4:	b	13bbc <__assert_fail@plt+0x25cc>
   13bf8:	andeq	r0, r0, r0
   13bfc:	orrsmi	r0, r0, r0
   13c00:	push	{r4, sl, fp, lr}
   13c04:	add	fp, sp, #8
   13c08:	sub	sp, sp, #64	; 0x40
   13c0c:	mov	r0, #86	; 0x56
   13c10:	bl	11380 <sysconf@plt>
   13c14:	mov	r4, r0
   13c18:	mov	r0, #30
   13c1c:	bl	11380 <sysconf@plt>
   13c20:	orrs	r1, r0, r4
   13c24:	bmi	13c44 <__assert_fail@plt+0x2654>
   13c28:	vmov	s0, r0
   13c2c:	vcvt.f64.s32	d16, s0
   13c30:	vmov	s0, r4
   13c34:	vcvt.f64.s32	d17, s0
   13c38:	vmul.f64	d0, d17, d16
   13c3c:	sub	sp, fp, #8
   13c40:	pop	{r4, sl, fp, pc}
   13c44:	mov	r0, sp
   13c48:	bl	11440 <sysinfo@plt>
   13c4c:	cmp	r0, #0
   13c50:	beq	13c68 <__assert_fail@plt+0x2678>
   13c54:	bl	13b80 <__assert_fail@plt+0x2590>
   13c58:	vmov.f64	d16, #80	; 0x3e800000  0.250
   13c5c:	vmul.f64	d0, d0, d16
   13c60:	sub	sp, fp, #8
   13c64:	pop	{r4, sl, fp, pc}
   13c68:	vldr	s0, [sp, #20]
   13c6c:	vldr	s2, [sp, #28]
   13c70:	vldr	s4, [sp, #52]	; 0x34
   13c74:	vcvt.f64.u32	d16, s2
   13c78:	vcvt.f64.u32	d17, s0
   13c7c:	vcvt.f64.u32	d18, s4
   13c80:	vadd.f64	d16, d17, d16
   13c84:	vmul.f64	d0, d16, d18
   13c88:	sub	sp, fp, #8
   13c8c:	pop	{r4, sl, fp, pc}
   13c90:	push	{r4, r5, fp, lr}
   13c94:	add	fp, sp, #8
   13c98:	cmp	r0, #0
   13c9c:	beq	13d30 <__assert_fail@plt+0x2740>
   13ca0:	mov	r4, r0
   13ca4:	mov	r1, #47	; 0x2f
   13ca8:	bl	11578 <strrchr@plt>
   13cac:	cmp	r0, #0
   13cb0:	mov	r5, r4
   13cb4:	addne	r5, r0, #1
   13cb8:	sub	r0, r5, r4
   13cbc:	cmp	r0, #7
   13cc0:	blt	13d14 <__assert_fail@plt+0x2724>
   13cc4:	sub	r0, r5, #7
   13cc8:	movw	r1, #32088	; 0x7d58
   13ccc:	movt	r1, #1
   13cd0:	mov	r2, #7
   13cd4:	bl	115c0 <strncmp@plt>
   13cd8:	cmp	r0, #0
   13cdc:	bne	13d14 <__assert_fail@plt+0x2724>
   13ce0:	movw	r1, #32096	; 0x7d60
   13ce4:	movt	r1, #1
   13ce8:	mov	r0, r5
   13cec:	mov	r2, #3
   13cf0:	bl	115c0 <strncmp@plt>
   13cf4:	cmp	r0, #0
   13cf8:	beq	13d04 <__assert_fail@plt+0x2714>
   13cfc:	mov	r4, r5
   13d00:	b	13d14 <__assert_fail@plt+0x2724>
   13d04:	add	r4, r5, #3
   13d08:	movw	r0, #37240	; 0x9178
   13d0c:	movt	r0, #2
   13d10:	str	r4, [r0]
   13d14:	movw	r0, #37244	; 0x917c
   13d18:	movt	r0, #2
   13d1c:	str	r4, [r0]
   13d20:	movw	r0, #37356	; 0x91ec
   13d24:	movt	r0, #2
   13d28:	str	r4, [r0]
   13d2c:	pop	{r4, r5, fp, pc}
   13d30:	movw	r0, #37256	; 0x9188
   13d34:	movt	r0, #2
   13d38:	ldr	r3, [r0]
   13d3c:	movw	r0, #32032	; 0x7d20
   13d40:	movt	r0, #1
   13d44:	mov	r1, #55	; 0x37
   13d48:	mov	r2, #1
   13d4c:	bl	113d4 <fwrite@plt>
   13d50:	bl	115cc <abort@plt>
   13d54:	push	{r4, r5, r6, sl, fp, lr}
   13d58:	add	fp, sp, #16
   13d5c:	mov	r4, r0
   13d60:	movw	r0, #37360	; 0x91f0
   13d64:	movt	r0, #2
   13d68:	cmp	r4, #0
   13d6c:	moveq	r4, r0
   13d70:	bl	114e8 <__errno_location@plt>
   13d74:	mov	r5, r0
   13d78:	ldr	r6, [r0]
   13d7c:	mov	r0, r4
   13d80:	mov	r1, #48	; 0x30
   13d84:	bl	1641c <__assert_fail@plt+0x4e2c>
   13d88:	str	r6, [r5]
   13d8c:	pop	{r4, r5, r6, sl, fp, pc}
   13d90:	movw	r1, #37360	; 0x91f0
   13d94:	movt	r1, #2
   13d98:	cmp	r0, #0
   13d9c:	movne	r1, r0
   13da0:	ldr	r0, [r1]
   13da4:	bx	lr
   13da8:	movw	r2, #37360	; 0x91f0
   13dac:	movt	r2, #2
   13db0:	cmp	r0, #0
   13db4:	movne	r2, r0
   13db8:	str	r1, [r2]
   13dbc:	bx	lr
   13dc0:	movw	r3, #37360	; 0x91f0
   13dc4:	movt	r3, #2
   13dc8:	cmp	r0, #0
   13dcc:	movne	r3, r0
   13dd0:	ubfx	r0, r1, #5, #3
   13dd4:	add	ip, r3, r0, lsl #2
   13dd8:	ldr	r3, [ip, #8]
   13ddc:	and	r1, r1, #31
   13de0:	mov	r0, #1
   13de4:	and	r0, r0, r3, lsr r1
   13de8:	and	r2, r2, #1
   13dec:	eor	r2, r0, r2
   13df0:	eor	r1, r3, r2, lsl r1
   13df4:	str	r1, [ip, #8]
   13df8:	bx	lr
   13dfc:	movw	r2, #37360	; 0x91f0
   13e00:	movt	r2, #2
   13e04:	cmp	r0, #0
   13e08:	movne	r2, r0
   13e0c:	ldr	r0, [r2, #4]
   13e10:	str	r1, [r2, #4]
   13e14:	bx	lr
   13e18:	push	{fp, lr}
   13e1c:	mov	fp, sp
   13e20:	movw	r3, #37360	; 0x91f0
   13e24:	movt	r3, #2
   13e28:	cmp	r0, #0
   13e2c:	movne	r3, r0
   13e30:	mov	r0, #10
   13e34:	str	r0, [r3]
   13e38:	cmp	r1, #0
   13e3c:	cmpne	r2, #0
   13e40:	bne	13e48 <__assert_fail@plt+0x2858>
   13e44:	bl	115cc <abort@plt>
   13e48:	str	r1, [r3, #40]	; 0x28
   13e4c:	str	r2, [r3, #44]	; 0x2c
   13e50:	pop	{fp, pc}
   13e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e58:	add	fp, sp, #28
   13e5c:	sub	sp, sp, #20
   13e60:	mov	r8, r3
   13e64:	mov	r9, r2
   13e68:	mov	sl, r1
   13e6c:	mov	r7, r0
   13e70:	ldr	r0, [fp, #8]
   13e74:	movw	r5, #37360	; 0x91f0
   13e78:	movt	r5, #2
   13e7c:	cmp	r0, #0
   13e80:	movne	r5, r0
   13e84:	bl	114e8 <__errno_location@plt>
   13e88:	mov	r4, r0
   13e8c:	ldm	r5, {r0, r1}
   13e90:	ldr	r2, [r5, #40]	; 0x28
   13e94:	ldr	r3, [r5, #44]	; 0x2c
   13e98:	ldr	r6, [r4]
   13e9c:	add	r5, r5, #8
   13ea0:	stm	sp, {r0, r1, r5}
   13ea4:	str	r2, [sp, #12]
   13ea8:	str	r3, [sp, #16]
   13eac:	mov	r0, r7
   13eb0:	mov	r1, sl
   13eb4:	mov	r2, r9
   13eb8:	mov	r3, r8
   13ebc:	bl	13ecc <__assert_fail@plt+0x28dc>
   13ec0:	str	r6, [r4]
   13ec4:	sub	sp, fp, #28
   13ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ed0:	add	fp, sp, #28
   13ed4:	sub	sp, sp, #156	; 0x9c
   13ed8:	mov	r9, r3
   13edc:	mov	r7, r1
   13ee0:	mov	r6, r0
   13ee4:	str	r2, [fp, #-80]	; 0xffffffb0
   13ee8:	add	r0, r2, #1
   13eec:	str	r0, [sp, #76]	; 0x4c
   13ef0:	ldr	r0, [fp, #12]
   13ef4:	and	r1, r0, #1
   13ef8:	str	r1, [sp, #40]	; 0x28
   13efc:	and	r1, r0, #4
   13f00:	str	r1, [sp, #36]	; 0x24
   13f04:	ubfx	r4, r0, #1, #1
   13f08:	bl	113ec <__ctype_get_mb_cur_max@plt>
   13f0c:	str	r0, [sp, #44]	; 0x2c
   13f10:	ldr	r0, [fp, #24]
   13f14:	str	r0, [sp, #88]	; 0x58
   13f18:	ldr	r0, [fp, #20]
   13f1c:	str	r0, [sp, #80]	; 0x50
   13f20:	ldr	r1, [fp, #8]
   13f24:	mov	r0, #0
   13f28:	str	r0, [sp, #84]	; 0x54
   13f2c:	mov	r0, #0
   13f30:	str	r0, [fp, #-84]	; 0xffffffac
   13f34:	mov	r0, #0
   13f38:	str	r0, [fp, #-72]	; 0xffffffb8
   13f3c:	mov	r0, #0
   13f40:	mov	r2, #0
   13f44:	str	r2, [fp, #-56]	; 0xffffffc8
   13f48:	mov	r2, #0
   13f4c:	str	r2, [sp, #64]	; 0x40
   13f50:	mov	r2, #1
   13f54:	str	r2, [fp, #-48]	; 0xffffffd0
   13f58:	cmp	r1, #10
   13f5c:	bhi	14e88 <__assert_fail@plt+0x3898>
   13f60:	mov	sl, r7
   13f64:	mov	r7, r1
   13f68:	add	r1, pc, #24
   13f6c:	mov	r8, #0
   13f70:	mov	r2, #1
   13f74:	mov	r3, #0
   13f78:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13f7c:	mov	lr, r9
   13f80:	mov	r5, r6
   13f84:	ldr	pc, [r1, r7, lsl #2]
   13f88:	andeq	r4, r1, ip, asr r0
   13f8c:	muleq	r1, ip, r0
   13f90:	andeq	r4, r1, ip, rrx
   13f94:	andeq	r4, r1, r4, asr r0
   13f98:	muleq	r1, r0, r0
   13f9c:	strdeq	r4, [r1], -r0
   13fa0:	andeq	r4, r1, ip, ror r0
   13fa4:	andeq	r4, r1, ip, asr #2
   13fa8:			; <UNDEFINED> instruction: 0x00013fb4
   13fac:			; <UNDEFINED> instruction: 0x00013fb4
   13fb0:	andeq	r3, r1, r0, ror #31
   13fb4:	movw	r0, #32176	; 0x7db0
   13fb8:	movt	r0, #1
   13fbc:	mov	r1, r7
   13fc0:	bl	15490 <__assert_fail@plt+0x3ea0>
   13fc4:	str	r0, [sp, #80]	; 0x50
   13fc8:	movw	r0, #32178	; 0x7db2
   13fcc:	movt	r0, #1
   13fd0:	mov	r1, r7
   13fd4:	bl	15490 <__assert_fail@plt+0x3ea0>
   13fd8:	mov	r5, r6
   13fdc:	str	r0, [sp, #88]	; 0x58
   13fe0:	mov	r8, #0
   13fe4:	tst	r4, #1
   13fe8:	str	r7, [fp, #-64]	; 0xffffffc0
   13fec:	bne	14024 <__assert_fail@plt+0x2a34>
   13ff0:	ldr	r0, [sp, #80]	; 0x50
   13ff4:	ldrb	r0, [r0]
   13ff8:	cmp	r0, #0
   13ffc:	beq	14024 <__assert_fail@plt+0x2a34>
   14000:	ldr	r1, [sp, #80]	; 0x50
   14004:	add	r1, r1, #1
   14008:	mov	r8, #0
   1400c:	cmp	r8, sl
   14010:	strbcc	r0, [r5, r8]
   14014:	ldrb	r0, [r1, r8]
   14018:	add	r8, r8, #1
   1401c:	cmp	r0, #0
   14020:	bne	1400c <__assert_fail@plt+0x2a1c>
   14024:	ldr	r7, [sp, #88]	; 0x58
   14028:	mov	r0, r7
   1402c:	bl	114c4 <strlen@plt>
   14030:	mov	r5, r6
   14034:	str	r0, [fp, #-72]	; 0xffffffb8
   14038:	str	r7, [fp, #-84]	; 0xffffffac
   1403c:	mov	r2, #1
   14040:	mov	r3, r4
   14044:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14048:	mov	lr, r9
   1404c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14050:	b	1414c <__assert_fail@plt+0x2b5c>
   14054:	mov	r0, #1
   14058:	b	1409c <__assert_fail@plt+0x2aac>
   1405c:	mov	r7, #0
   14060:	mov	r8, #0
   14064:	mov	r2, r0
   14068:	b	14148 <__assert_fail@plt+0x2b58>
   1406c:	tst	r4, #1
   14070:	bne	1409c <__assert_fail@plt+0x2aac>
   14074:	mov	r2, r0
   14078:	b	140c4 <__assert_fail@plt+0x2ad4>
   1407c:	mov	r0, #1
   14080:	str	r0, [fp, #-72]	; 0xffffffb8
   14084:	mov	r8, #0
   14088:	mov	r7, #5
   1408c:	b	14108 <__assert_fail@plt+0x2b18>
   14090:	mov	r2, #1
   14094:	tst	r4, #1
   14098:	beq	140c4 <__assert_fail@plt+0x2ad4>
   1409c:	mov	r1, #1
   140a0:	str	r1, [fp, #-72]	; 0xffffffb8
   140a4:	mov	r8, #0
   140a8:	mov	r7, #2
   140ac:	movw	r1, #32178	; 0x7db2
   140b0:	movt	r1, #1
   140b4:	str	r1, [fp, #-84]	; 0xffffffac
   140b8:	mov	r2, r0
   140bc:	mov	r3, #1
   140c0:	b	1414c <__assert_fail@plt+0x2b5c>
   140c4:	mov	r8, #1
   140c8:	mov	r7, #2
   140cc:	cmp	sl, #0
   140d0:	movne	r0, #39	; 0x27
   140d4:	strbne	r0, [r5]
   140d8:	movw	r0, #32178	; 0x7db2
   140dc:	movt	r0, #1
   140e0:	str	r0, [fp, #-84]	; 0xffffffac
   140e4:	mov	r0, #1
   140e8:	str	r0, [fp, #-72]	; 0xffffffb8
   140ec:	b	14148 <__assert_fail@plt+0x2b58>
   140f0:	mov	r7, #5
   140f4:	tst	r4, #1
   140f8:	beq	14120 <__assert_fail@plt+0x2b30>
   140fc:	mov	r0, #1
   14100:	str	r0, [fp, #-72]	; 0xffffffb8
   14104:	mov	r8, #0
   14108:	movw	r0, #31159	; 0x79b7
   1410c:	movt	r0, #1
   14110:	str	r0, [fp, #-84]	; 0xffffffac
   14114:	mov	r2, #1
   14118:	mov	r3, #1
   1411c:	b	1414c <__assert_fail@plt+0x2b5c>
   14120:	cmp	sl, #0
   14124:	movne	r0, #34	; 0x22
   14128:	strbne	r0, [r5]
   1412c:	mov	r8, #1
   14130:	movw	r0, #31159	; 0x79b7
   14134:	movt	r0, #1
   14138:	str	r0, [fp, #-84]	; 0xffffffac
   1413c:	mov	r0, #1
   14140:	str	r0, [fp, #-72]	; 0xffffffb8
   14144:	mov	r2, #1
   14148:	mov	r3, #0
   1414c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14150:	cmp	r0, #0
   14154:	movwne	r0, #1
   14158:	and	r1, r0, r3
   1415c:	and	r1, r2, r1
   14160:	str	r1, [sp, #56]	; 0x38
   14164:	sub	r1, r7, #2
   14168:	clz	r1, r1
   1416c:	lsr	r1, r1, #5
   14170:	and	r1, r1, r3
   14174:	str	r1, [sp, #68]	; 0x44
   14178:	str	r7, [fp, #-64]	; 0xffffffc0
   1417c:	subs	r1, r7, #2
   14180:	movwne	r1, #1
   14184:	eor	r4, r3, #1
   14188:	str	r4, [fp, #-88]	; 0xffffffa8
   1418c:	orr	r4, r1, r4
   14190:	str	r4, [sp, #72]	; 0x48
   14194:	and	r1, r1, r2
   14198:	and	r0, r0, r1
   1419c:	str	r0, [fp, #-60]	; 0xffffffc4
   141a0:	str	r3, [fp, #-76]	; 0xffffffb4
   141a4:	orr	r0, r1, r3
   141a8:	eor	r0, r0, #1
   141ac:	ldr	r1, [fp, #16]
   141b0:	clz	r1, r1
   141b4:	lsr	r1, r1, #5
   141b8:	orr	r0, r1, r0
   141bc:	str	r0, [fp, #-68]	; 0xffffffbc
   141c0:	str	r2, [sp, #92]	; 0x5c
   141c4:	eor	r0, r2, #1
   141c8:	str	r0, [sp, #60]	; 0x3c
   141cc:	mov	r7, #0
   141d0:	cmn	lr, #1
   141d4:	beq	141e4 <__assert_fail@plt+0x2bf4>
   141d8:	cmp	r7, lr
   141dc:	bne	141f0 <__assert_fail@plt+0x2c00>
   141e0:	b	14cfc <__assert_fail@plt+0x370c>
   141e4:	ldrb	r0, [ip, r7]
   141e8:	cmp	r0, #0
   141ec:	beq	14cfc <__assert_fail@plt+0x370c>
   141f0:	mov	r9, #0
   141f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   141f8:	cmp	r0, #0
   141fc:	beq	14230 <__assert_fail@plt+0x2c40>
   14200:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14204:	add	r4, r7, r0
   14208:	cmp	r0, #2
   1420c:	bcc	14228 <__assert_fail@plt+0x2c38>
   14210:	cmn	lr, #1
   14214:	bne	14228 <__assert_fail@plt+0x2c38>
   14218:	mov	r0, ip
   1421c:	bl	114c4 <strlen@plt>
   14220:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14224:	mov	lr, r0
   14228:	cmp	r4, lr
   1422c:	bls	1423c <__assert_fail@plt+0x2c4c>
   14230:	mov	r0, #0
   14234:	str	r0, [fp, #-52]	; 0xffffffcc
   14238:	b	14280 <__assert_fail@plt+0x2c90>
   1423c:	mov	r4, lr
   14240:	add	r0, ip, r7
   14244:	ldr	r1, [fp, #-84]	; 0xffffffac
   14248:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1424c:	bl	114b8 <bcmp@plt>
   14250:	cmp	r0, #0
   14254:	mov	r1, r0
   14258:	movwne	r1, #1
   1425c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14260:	orr	r1, r1, r2
   14264:	tst	r1, #1
   14268:	beq	14dd0 <__assert_fail@plt+0x37e0>
   1426c:	clz	r0, r0
   14270:	lsr	r0, r0, #5
   14274:	str	r0, [fp, #-52]	; 0xffffffcc
   14278:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1427c:	mov	lr, r4
   14280:	ldrb	r4, [ip, r7]
   14284:	cmp	r4, #126	; 0x7e
   14288:	bhi	147b8 <__assert_fail@plt+0x31c8>
   1428c:	mov	r6, #1
   14290:	mov	r2, #110	; 0x6e
   14294:	mov	r0, #97	; 0x61
   14298:	add	r3, pc, #4
   1429c:	mov	r1, #0
   142a0:	ldr	pc, [r3, r4, lsl #2]
   142a4:	andeq	r4, r1, r8, lsl r6
   142a8:			; <UNDEFINED> instruction: 0x000147b8
   142ac:			; <UNDEFINED> instruction: 0x000147b8
   142b0:			; <UNDEFINED> instruction: 0x000147b8
   142b4:			; <UNDEFINED> instruction: 0x000147b8
   142b8:			; <UNDEFINED> instruction: 0x000147b8
   142bc:			; <UNDEFINED> instruction: 0x000147b8
   142c0:	andeq	r4, r1, ip, lsl #17
   142c4:	strdeq	r4, [r1], -r8
   142c8:	strdeq	r4, [r1], -r0
   142cc:	andeq	r4, r1, r4, lsl #12
   142d0:	andeq	r4, r1, r0, lsr #14
   142d4:	andeq	r4, r1, r8, ror #11
   142d8:	andeq	r4, r1, r0, lsl #12
   142dc:			; <UNDEFINED> instruction: 0x000147b8
   142e0:			; <UNDEFINED> instruction: 0x000147b8
   142e4:			; <UNDEFINED> instruction: 0x000147b8
   142e8:			; <UNDEFINED> instruction: 0x000147b8
   142ec:			; <UNDEFINED> instruction: 0x000147b8
   142f0:			; <UNDEFINED> instruction: 0x000147b8
   142f4:			; <UNDEFINED> instruction: 0x000147b8
   142f8:			; <UNDEFINED> instruction: 0x000147b8
   142fc:			; <UNDEFINED> instruction: 0x000147b8
   14300:			; <UNDEFINED> instruction: 0x000147b8
   14304:			; <UNDEFINED> instruction: 0x000147b8
   14308:			; <UNDEFINED> instruction: 0x000147b8
   1430c:			; <UNDEFINED> instruction: 0x000147b8
   14310:			; <UNDEFINED> instruction: 0x000147b8
   14314:			; <UNDEFINED> instruction: 0x000147b8
   14318:			; <UNDEFINED> instruction: 0x000147b8
   1431c:			; <UNDEFINED> instruction: 0x000147b8
   14320:			; <UNDEFINED> instruction: 0x000147b8
   14324:	muleq	r1, ip, r5
   14328:	andeq	r4, r1, r0, lsr #11
   1432c:	andeq	r4, r1, r0, lsr #11
   14330:	andeq	r4, r1, r8, lsl #11
   14334:	andeq	r4, r1, r0, lsr #11
   14338:	andeq	r4, r1, r0, lsr #9
   1433c:	andeq	r4, r1, r0, lsr #11
   14340:	andeq	r4, r1, r8, lsr #14
   14344:	andeq	r4, r1, r0, lsr #11
   14348:	andeq	r4, r1, r0, lsr #11
   1434c:	andeq	r4, r1, r0, lsr #11
   14350:	andeq	r4, r1, r0, lsr #9
   14354:	andeq	r4, r1, r0, lsr #9
   14358:	andeq	r4, r1, r0, lsr #9
   1435c:	andeq	r4, r1, r0, lsr #9
   14360:	andeq	r4, r1, r0, lsr #9
   14364:	andeq	r4, r1, r0, lsr #9
   14368:	andeq	r4, r1, r0, lsr #9
   1436c:	andeq	r4, r1, r0, lsr #9
   14370:	andeq	r4, r1, r0, lsr #9
   14374:	andeq	r4, r1, r0, lsr #9
   14378:	andeq	r4, r1, r0, lsr #9
   1437c:	andeq	r4, r1, r0, lsr #9
   14380:	andeq	r4, r1, r0, lsr #9
   14384:	andeq	r4, r1, r0, lsr #9
   14388:	andeq	r4, r1, r0, lsr #9
   1438c:	andeq	r4, r1, r0, lsr #9
   14390:	andeq	r4, r1, r0, lsr #11
   14394:	andeq	r4, r1, r0, lsr #11
   14398:	andeq	r4, r1, r0, lsr #11
   1439c:	andeq	r4, r1, r0, lsr #11
   143a0:	strdeq	r4, [r1], -r0
   143a4:			; <UNDEFINED> instruction: 0x000147b8
   143a8:	andeq	r4, r1, r0, lsr #9
   143ac:	andeq	r4, r1, r0, lsr #9
   143b0:	andeq	r4, r1, r0, lsr #9
   143b4:	andeq	r4, r1, r0, lsr #9
   143b8:	andeq	r4, r1, r0, lsr #9
   143bc:	andeq	r4, r1, r0, lsr #9
   143c0:	andeq	r4, r1, r0, lsr #9
   143c4:	andeq	r4, r1, r0, lsr #9
   143c8:	andeq	r4, r1, r0, lsr #9
   143cc:	andeq	r4, r1, r0, lsr #9
   143d0:	andeq	r4, r1, r0, lsr #9
   143d4:	andeq	r4, r1, r0, lsr #9
   143d8:	andeq	r4, r1, r0, lsr #9
   143dc:	andeq	r4, r1, r0, lsr #9
   143e0:	andeq	r4, r1, r0, lsr #9
   143e4:	andeq	r4, r1, r0, lsr #9
   143e8:	andeq	r4, r1, r0, lsr #9
   143ec:	andeq	r4, r1, r0, lsr #9
   143f0:	andeq	r4, r1, r0, lsr #9
   143f4:	andeq	r4, r1, r0, lsr #9
   143f8:	andeq	r4, r1, r0, lsr #9
   143fc:	andeq	r4, r1, r0, lsr #9
   14400:	andeq	r4, r1, r0, lsr #9
   14404:	andeq	r4, r1, r0, lsr #9
   14408:	andeq	r4, r1, r0, lsr #9
   1440c:	andeq	r4, r1, r0, lsr #9
   14410:	andeq	r4, r1, r0, lsr #11
   14414:	andeq	r4, r1, r8, asr #11
   14418:	andeq	r4, r1, r0, lsr #9
   1441c:	andeq	r4, r1, r0, lsr #11
   14420:	andeq	r4, r1, r0, lsr #9
   14424:	andeq	r4, r1, r0, lsr #11
   14428:	andeq	r4, r1, r0, lsr #9
   1442c:	andeq	r4, r1, r0, lsr #9
   14430:	andeq	r4, r1, r0, lsr #9
   14434:	andeq	r4, r1, r0, lsr #9
   14438:	andeq	r4, r1, r0, lsr #9
   1443c:	andeq	r4, r1, r0, lsr #9
   14440:	andeq	r4, r1, r0, lsr #9
   14444:	andeq	r4, r1, r0, lsr #9
   14448:	andeq	r4, r1, r0, lsr #9
   1444c:	andeq	r4, r1, r0, lsr #9
   14450:	andeq	r4, r1, r0, lsr #9
   14454:	andeq	r4, r1, r0, lsr #9
   14458:	andeq	r4, r1, r0, lsr #9
   1445c:	andeq	r4, r1, r0, lsr #9
   14460:	andeq	r4, r1, r0, lsr #9
   14464:	andeq	r4, r1, r0, lsr #9
   14468:	andeq	r4, r1, r0, lsr #9
   1446c:	andeq	r4, r1, r0, lsr #9
   14470:	andeq	r4, r1, r0, lsr #9
   14474:	andeq	r4, r1, r0, lsr #9
   14478:	andeq	r4, r1, r0, lsr #9
   1447c:	andeq	r4, r1, r0, lsr #9
   14480:	andeq	r4, r1, r0, lsr #9
   14484:	andeq	r4, r1, r0, lsr #9
   14488:	andeq	r4, r1, r0, lsr #9
   1448c:	andeq	r4, r1, r0, lsr #9
   14490:	andeq	r4, r1, ip, asr r5
   14494:	andeq	r4, r1, r0, lsr #11
   14498:	andeq	r4, r1, ip, asr r5
   1449c:	andeq	r4, r1, r8, lsl #11
   144a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   144a4:	tst	r0, #1
   144a8:	bne	144d4 <__assert_fail@plt+0x2ee4>
   144ac:	ubfx	r0, r4, #5, #3
   144b0:	ldr	r1, [fp, #16]
   144b4:	ldr	r0, [r1, r0, lsl #2]
   144b8:	and	r1, r4, #31
   144bc:	mov	r2, #1
   144c0:	tst	r0, r2, lsl r1
   144c4:	beq	144d4 <__assert_fail@plt+0x2ee4>
   144c8:	mov	r0, r4
   144cc:	mov	r1, r6
   144d0:	b	144e8 <__assert_fail@plt+0x2ef8>
   144d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   144d8:	cmp	r0, #0
   144dc:	mov	r0, r4
   144e0:	mov	r1, r6
   144e4:	beq	14820 <__assert_fail@plt+0x3230>
   144e8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   144ec:	tst	r2, #1
   144f0:	bne	14de4 <__assert_fail@plt+0x37f4>
   144f4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   144f8:	subs	r2, r2, #2
   144fc:	movwne	r2, #1
   14500:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14504:	orr	r2, r2, r3
   14508:	tst	r2, #1
   1450c:	bne	14548 <__assert_fail@plt+0x2f58>
   14510:	cmp	r8, sl
   14514:	movcc	r2, #39	; 0x27
   14518:	strbcc	r2, [r5, r8]
   1451c:	add	r2, r8, #1
   14520:	cmp	r2, sl
   14524:	movcc	r3, #36	; 0x24
   14528:	strbcc	r3, [r5, r2]
   1452c:	add	r2, r8, #2
   14530:	cmp	r2, sl
   14534:	movcc	r3, #39	; 0x27
   14538:	strbcc	r3, [r5, r2]
   1453c:	add	r8, r8, #3
   14540:	mov	r2, #1
   14544:	str	r2, [fp, #-56]	; 0xffffffc8
   14548:	cmp	r8, sl
   1454c:	movcc	r2, #92	; 0x5c
   14550:	strbcc	r2, [r5, r8]
   14554:	add	r8, r8, #1
   14558:	b	14864 <__assert_fail@plt+0x3274>
   1455c:	cmp	lr, #1
   14560:	beq	14588 <__assert_fail@plt+0x2f98>
   14564:	mov	r6, #0
   14568:	cmn	lr, #1
   1456c:	bne	14594 <__assert_fail@plt+0x2fa4>
   14570:	ldrb	r0, [ip, #1]
   14574:	cmp	r0, #0
   14578:	beq	14588 <__assert_fail@plt+0x2f98>
   1457c:	mvn	lr, #0
   14580:	mov	r9, #0
   14584:	b	144a0 <__assert_fail@plt+0x2eb0>
   14588:	mov	r6, #0
   1458c:	cmp	r7, #0
   14590:	beq	1459c <__assert_fail@plt+0x2fac>
   14594:	mov	r9, #0
   14598:	b	144a0 <__assert_fail@plt+0x2eb0>
   1459c:	mov	r1, #1
   145a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   145a4:	cmp	r0, #2
   145a8:	bne	145c0 <__assert_fail@plt+0x2fd0>
   145ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   145b0:	tst	r0, #1
   145b4:	mov	r6, r1
   145b8:	beq	144a0 <__assert_fail@plt+0x2eb0>
   145bc:	b	14de4 <__assert_fail@plt+0x37f4>
   145c0:	mov	r6, r1
   145c4:	b	144a0 <__assert_fail@plt+0x2eb0>
   145c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   145cc:	cmp	r0, #2
   145d0:	bne	14804 <__assert_fail@plt+0x3214>
   145d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   145d8:	tst	r0, #1
   145dc:	bne	14de4 <__assert_fail@plt+0x37f4>
   145e0:	mov	r9, #0
   145e4:	b	14818 <__assert_fail@plt+0x3228>
   145e8:	mov	r0, #102	; 0x66
   145ec:	b	1488c <__assert_fail@plt+0x329c>
   145f0:	mov	r2, #116	; 0x74
   145f4:	b	14604 <__assert_fail@plt+0x3014>
   145f8:	mov	r0, #98	; 0x62
   145fc:	b	1488c <__assert_fail@plt+0x329c>
   14600:	mov	r2, #114	; 0x72
   14604:	ldr	r0, [sp, #72]	; 0x48
   14608:	tst	r0, #1
   1460c:	mov	r0, r2
   14610:	bne	1488c <__assert_fail@plt+0x329c>
   14614:	b	14de4 <__assert_fail@plt+0x37f4>
   14618:	ldr	r0, [sp, #92]	; 0x5c
   1461c:	tst	r0, #1
   14620:	beq	148a8 <__assert_fail@plt+0x32b8>
   14624:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14628:	tst	r0, #1
   1462c:	bne	14de4 <__assert_fail@plt+0x37f4>
   14630:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14634:	subs	r0, r0, #2
   14638:	movwne	r0, #1
   1463c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14640:	orr	r0, r0, r1
   14644:	tst	r0, #1
   14648:	bne	14684 <__assert_fail@plt+0x3094>
   1464c:	cmp	r8, sl
   14650:	movcc	r0, #39	; 0x27
   14654:	strbcc	r0, [r5, r8]
   14658:	add	r0, r8, #1
   1465c:	cmp	r0, sl
   14660:	movcc	r1, #36	; 0x24
   14664:	strbcc	r1, [r5, r0]
   14668:	add	r0, r8, #2
   1466c:	cmp	r0, sl
   14670:	movcc	r1, #39	; 0x27
   14674:	strbcc	r1, [r5, r0]
   14678:	add	r8, r8, #3
   1467c:	mov	r0, #1
   14680:	str	r0, [fp, #-56]	; 0xffffffc8
   14684:	cmp	r8, sl
   14688:	movcc	r0, #92	; 0x5c
   1468c:	strbcc	r0, [r5, r8]
   14690:	add	r0, r8, #1
   14694:	mov	r6, #0
   14698:	mov	r9, #1
   1469c:	mov	r4, #48	; 0x30
   146a0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   146a4:	cmp	r1, #2
   146a8:	beq	14a6c <__assert_fail@plt+0x347c>
   146ac:	add	r1, r7, #1
   146b0:	cmp	r1, lr
   146b4:	bcs	14a6c <__assert_fail@plt+0x347c>
   146b8:	ldrb	r1, [ip, r1]
   146bc:	sub	r1, r1, #48	; 0x30
   146c0:	uxtb	r1, r1
   146c4:	cmp	r1, #9
   146c8:	bhi	14a6c <__assert_fail@plt+0x347c>
   146cc:	cmp	r0, sl
   146d0:	movcc	r1, #48	; 0x30
   146d4:	strbcc	r1, [r5, r0]
   146d8:	add	r0, r8, #2
   146dc:	cmp	r0, sl
   146e0:	movcc	r1, #48	; 0x30
   146e4:	strbcc	r1, [r5, r0]
   146e8:	add	r8, r8, #3
   146ec:	b	144a0 <__assert_fail@plt+0x2eb0>
   146f0:	mov	r9, #0
   146f4:	mov	r4, #63	; 0x3f
   146f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   146fc:	cmp	r0, #5
   14700:	beq	14a74 <__assert_fail@plt+0x3484>
   14704:	cmp	r0, #2
   14708:	bne	14b1c <__assert_fail@plt+0x352c>
   1470c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14710:	tst	r0, #1
   14714:	mov	r6, #0
   14718:	beq	144a0 <__assert_fail@plt+0x2eb0>
   1471c:	b	14de4 <__assert_fail@plt+0x37f4>
   14720:	mov	r0, #118	; 0x76
   14724:	b	1488c <__assert_fail@plt+0x329c>
   14728:	mov	r4, #39	; 0x27
   1472c:	mov	r0, #1
   14730:	str	r0, [sp, #64]	; 0x40
   14734:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14738:	cmp	r0, #2
   1473c:	bne	148c4 <__assert_fail@plt+0x32d4>
   14740:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14744:	tst	r0, #1
   14748:	bne	14de4 <__assert_fail@plt+0x37f4>
   1474c:	ldr	r2, [sp, #84]	; 0x54
   14750:	cmp	r2, #0
   14754:	mov	r0, r2
   14758:	movwne	r0, #1
   1475c:	clz	r1, sl
   14760:	lsr	r1, r1, #5
   14764:	orrs	r0, r0, r1
   14768:	moveq	r2, sl
   1476c:	str	r2, [sp, #84]	; 0x54
   14770:	moveq	sl, r0
   14774:	cmp	r8, sl
   14778:	movcc	r0, #39	; 0x27
   1477c:	strbcc	r0, [r5, r8]
   14780:	add	r0, r8, #1
   14784:	cmp	r0, sl
   14788:	movcc	r1, #92	; 0x5c
   1478c:	strbcc	r1, [r5, r0]
   14790:	add	r0, r8, #2
   14794:	cmp	r0, sl
   14798:	movcc	r1, #39	; 0x27
   1479c:	strbcc	r1, [r5, r0]
   147a0:	add	r8, r8, #3
   147a4:	mov	r0, #0
   147a8:	str	r0, [fp, #-56]	; 0xffffffc8
   147ac:	mov	r9, #0
   147b0:	mov	r6, #1
   147b4:	b	144a0 <__assert_fail@plt+0x2eb0>
   147b8:	ldr	r0, [sp, #44]	; 0x2c
   147bc:	cmp	r0, #1
   147c0:	bne	148cc <__assert_fail@plt+0x32dc>
   147c4:	str	lr, [sp, #32]
   147c8:	bl	11488 <__ctype_b_loc@plt>
   147cc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   147d0:	ldr	r0, [r0]
   147d4:	add	r0, r0, r4, lsl #1
   147d8:	ldrb	r0, [r0, #1]
   147dc:	ubfx	r6, r0, #6, #1
   147e0:	mov	r2, #1
   147e4:	ldr	r0, [sp, #60]	; 0x3c
   147e8:	orr	r1, r6, r0
   147ec:	cmp	r2, #1
   147f0:	bhi	14b24 <__assert_fail@plt+0x3534>
   147f4:	tst	r1, #1
   147f8:	beq	14b24 <__assert_fail@plt+0x3534>
   147fc:	ldr	lr, [sp, #32]
   14800:	b	144a0 <__assert_fail@plt+0x2eb0>
   14804:	mov	r9, #0
   14808:	mov	r0, #92	; 0x5c
   1480c:	ldr	r1, [sp, #56]	; 0x38
   14810:	cmp	r1, #0
   14814:	beq	1488c <__assert_fail@plt+0x329c>
   14818:	mov	r4, #92	; 0x5c
   1481c:	mov	r6, #0
   14820:	cmp	r9, #0
   14824:	bne	1485c <__assert_fail@plt+0x326c>
   14828:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1482c:	tst	r0, #1
   14830:	beq	1485c <__assert_fail@plt+0x326c>
   14834:	cmp	r8, sl
   14838:	movcc	r0, #39	; 0x27
   1483c:	strbcc	r0, [r5, r8]
   14840:	add	r0, r8, #1
   14844:	cmp	r0, sl
   14848:	movcc	r1, #39	; 0x27
   1484c:	strbcc	r1, [r5, r0]
   14850:	add	r8, r8, #2
   14854:	mov	r0, #0
   14858:	str	r0, [fp, #-56]	; 0xffffffc8
   1485c:	mov	r1, r6
   14860:	mov	r0, r4
   14864:	cmp	r8, sl
   14868:	strbcc	r0, [r5, r8]
   1486c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14870:	and	r0, r0, r1
   14874:	str	r0, [fp, #-48]	; 0xffffffd0
   14878:	add	r8, r8, #1
   1487c:	add	r7, r7, #1
   14880:	cmn	lr, #1
   14884:	bne	141d8 <__assert_fail@plt+0x2be8>
   14888:	b	141e4 <__assert_fail@plt+0x2bf4>
   1488c:	mov	r9, #0
   14890:	ldr	r1, [sp, #92]	; 0x5c
   14894:	tst	r1, #1
   14898:	mov	r6, #0
   1489c:	mov	r1, #0
   148a0:	beq	144a0 <__assert_fail@plt+0x2eb0>
   148a4:	b	144e8 <__assert_fail@plt+0x2ef8>
   148a8:	mov	r4, #0
   148ac:	ldr	r0, [sp, #40]	; 0x28
   148b0:	cmp	r0, #0
   148b4:	mov	r9, #0
   148b8:	mov	r6, #0
   148bc:	beq	144a0 <__assert_fail@plt+0x2eb0>
   148c0:	b	1487c <__assert_fail@plt+0x328c>
   148c4:	mov	r6, #1
   148c8:	b	144a0 <__assert_fail@plt+0x2eb0>
   148cc:	mov	r0, #0
   148d0:	str	r0, [fp, #-36]	; 0xffffffdc
   148d4:	str	r0, [fp, #-40]	; 0xffffffd8
   148d8:	cmn	lr, #1
   148dc:	bne	148f0 <__assert_fail@plt+0x3300>
   148e0:	mov	r0, ip
   148e4:	bl	114c4 <strlen@plt>
   148e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   148ec:	mov	lr, r0
   148f0:	ldr	r0, [sp, #76]	; 0x4c
   148f4:	add	r0, r0, r7
   148f8:	str	r0, [sp, #24]
   148fc:	mov	r6, #1
   14900:	mov	r2, #0
   14904:	sub	r0, fp, #40	; 0x28
   14908:	mov	r3, r0
   1490c:	str	r5, [sp, #28]
   14910:	str	lr, [sp, #32]
   14914:	b	14958 <__assert_fail@plt+0x3368>
   14918:	ldr	r5, [sp, #52]	; 0x34
   1491c:	add	r5, r0, r5
   14920:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14924:	bl	113bc <iswprint@plt>
   14928:	cmp	r0, #0
   1492c:	movwne	r0, #1
   14930:	and	r6, r6, r0
   14934:	sub	r0, fp, #40	; 0x28
   14938:	bl	11368 <mbsinit@plt>
   1493c:	sub	r3, fp, #40	; 0x28
   14940:	mov	r2, r5
   14944:	ldr	lr, [sp, #32]
   14948:	cmp	r0, #0
   1494c:	ldr	r5, [sp, #28]
   14950:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14954:	bne	147e4 <__assert_fail@plt+0x31f4>
   14958:	str	r2, [sp, #52]	; 0x34
   1495c:	add	r0, r2, r7
   14960:	add	r1, ip, r0
   14964:	str	r0, [sp, #48]	; 0x30
   14968:	sub	r2, lr, r0
   1496c:	sub	r0, fp, #44	; 0x2c
   14970:	bl	13b18 <__assert_fail@plt+0x2528>
   14974:	cmp	r0, #0
   14978:	beq	14cf0 <__assert_fail@plt+0x3700>
   1497c:	cmn	r0, #1
   14980:	beq	14cac <__assert_fail@plt+0x36bc>
   14984:	cmn	r0, #2
   14988:	ldr	lr, [sp, #32]
   1498c:	beq	14cb4 <__assert_fail@plt+0x36c4>
   14990:	cmp	r0, #2
   14994:	mov	r1, #0
   14998:	movwcc	r1, #1
   1499c:	ldr	r2, [sp, #68]	; 0x44
   149a0:	eor	r2, r2, #1
   149a4:	orrs	r1, r2, r1
   149a8:	bne	14918 <__assert_fail@plt+0x3328>
   149ac:	ldr	r1, [sp, #52]	; 0x34
   149b0:	ldr	r2, [sp, #24]
   149b4:	add	r1, r2, r1
   149b8:	sub	r2, r0, #1
   149bc:	b	149cc <__assert_fail@plt+0x33dc>
   149c0:	add	r1, r1, #1
   149c4:	subs	r2, r2, #1
   149c8:	beq	14918 <__assert_fail@plt+0x3328>
   149cc:	ldrb	r3, [r1]
   149d0:	sub	r3, r3, #91	; 0x5b
   149d4:	cmp	r3, #33	; 0x21
   149d8:	bhi	149c0 <__assert_fail@plt+0x33d0>
   149dc:	add	r5, pc, #0
   149e0:	ldr	pc, [r5, r3, lsl #2]
   149e4:	ldrdeq	r4, [r1], -ip
   149e8:	ldrdeq	r4, [r1], -ip
   149ec:	andeq	r4, r1, r0, asr #19
   149f0:	ldrdeq	r4, [r1], -ip
   149f4:	andeq	r4, r1, r0, asr #19
   149f8:	ldrdeq	r4, [r1], -ip
   149fc:	andeq	r4, r1, r0, asr #19
   14a00:	andeq	r4, r1, r0, asr #19
   14a04:	andeq	r4, r1, r0, asr #19
   14a08:	andeq	r4, r1, r0, asr #19
   14a0c:	andeq	r4, r1, r0, asr #19
   14a10:	andeq	r4, r1, r0, asr #19
   14a14:	andeq	r4, r1, r0, asr #19
   14a18:	andeq	r4, r1, r0, asr #19
   14a1c:	andeq	r4, r1, r0, asr #19
   14a20:	andeq	r4, r1, r0, asr #19
   14a24:	andeq	r4, r1, r0, asr #19
   14a28:	andeq	r4, r1, r0, asr #19
   14a2c:	andeq	r4, r1, r0, asr #19
   14a30:	andeq	r4, r1, r0, asr #19
   14a34:	andeq	r4, r1, r0, asr #19
   14a38:	andeq	r4, r1, r0, asr #19
   14a3c:	andeq	r4, r1, r0, asr #19
   14a40:	andeq	r4, r1, r0, asr #19
   14a44:	andeq	r4, r1, r0, asr #19
   14a48:	andeq	r4, r1, r0, asr #19
   14a4c:	andeq	r4, r1, r0, asr #19
   14a50:	andeq	r4, r1, r0, asr #19
   14a54:	andeq	r4, r1, r0, asr #19
   14a58:	andeq	r4, r1, r0, asr #19
   14a5c:	andeq	r4, r1, r0, asr #19
   14a60:	andeq	r4, r1, r0, asr #19
   14a64:	andeq	r4, r1, r0, asr #19
   14a68:	ldrdeq	r4, [r1], -ip
   14a6c:	mov	r8, r0
   14a70:	b	144a0 <__assert_fail@plt+0x2eb0>
   14a74:	ldr	r0, [sp, #36]	; 0x24
   14a78:	cmp	r0, #0
   14a7c:	beq	14b1c <__assert_fail@plt+0x352c>
   14a80:	add	r0, r7, #2
   14a84:	cmp	r0, lr
   14a88:	bcs	14b1c <__assert_fail@plt+0x352c>
   14a8c:	add	r1, r7, ip
   14a90:	ldrb	r1, [r1, #1]
   14a94:	cmp	r1, #63	; 0x3f
   14a98:	bne	14b1c <__assert_fail@plt+0x352c>
   14a9c:	ldrb	r1, [ip, r0]
   14aa0:	sub	r2, r1, #33	; 0x21
   14aa4:	cmp	r2, #29
   14aa8:	bhi	14b1c <__assert_fail@plt+0x352c>
   14aac:	mov	r3, #1
   14ab0:	movw	r6, #20929	; 0x51c1
   14ab4:	movt	r6, #14336	; 0x3800
   14ab8:	tst	r6, r3, lsl r2
   14abc:	beq	14b1c <__assert_fail@plt+0x352c>
   14ac0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14ac4:	tst	r2, #1
   14ac8:	bne	14de4 <__assert_fail@plt+0x37f4>
   14acc:	cmp	r8, sl
   14ad0:	movcc	r2, #63	; 0x3f
   14ad4:	strbcc	r2, [r5, r8]
   14ad8:	add	r2, r8, #1
   14adc:	cmp	r2, sl
   14ae0:	movcc	r3, #34	; 0x22
   14ae4:	strbcc	r3, [r5, r2]
   14ae8:	add	r2, r8, #2
   14aec:	cmp	r2, sl
   14af0:	movcc	r3, #34	; 0x22
   14af4:	strbcc	r3, [r5, r2]
   14af8:	add	r2, r8, #3
   14afc:	cmp	r2, sl
   14b00:	movcc	r3, #63	; 0x3f
   14b04:	strbcc	r3, [r5, r2]
   14b08:	add	r8, r8, #4
   14b0c:	mov	r7, r0
   14b10:	mov	r4, r1
   14b14:	mov	r6, #0
   14b18:	b	144a0 <__assert_fail@plt+0x2eb0>
   14b1c:	mov	r6, #0
   14b20:	b	144a0 <__assert_fail@plt+0x2eb0>
   14b24:	add	r0, r2, r7
   14b28:	str	r0, [sp, #52]	; 0x34
   14b2c:	mov	r2, #0
   14b30:	ldr	lr, [sp, #32]
   14b34:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14b38:	str	r1, [sp, #48]	; 0x30
   14b3c:	tst	r1, #1
   14b40:	bne	14c1c <__assert_fail@plt+0x362c>
   14b44:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14b48:	tst	r1, #1
   14b4c:	bne	14de4 <__assert_fail@plt+0x37f4>
   14b50:	mov	r3, r0
   14b54:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14b58:	subs	r1, r0, #2
   14b5c:	movwne	r1, #1
   14b60:	orr	r1, r1, r3
   14b64:	tst	r1, #1
   14b68:	bne	14ba0 <__assert_fail@plt+0x35b0>
   14b6c:	cmp	r8, sl
   14b70:	movcc	r0, #39	; 0x27
   14b74:	strbcc	r0, [r5, r8]
   14b78:	add	r2, r8, #1
   14b7c:	cmp	r2, sl
   14b80:	movcc	r0, #36	; 0x24
   14b84:	strbcc	r0, [r5, r2]
   14b88:	add	r2, r8, #2
   14b8c:	cmp	r2, sl
   14b90:	movcc	r0, #39	; 0x27
   14b94:	strbcc	r0, [r5, r2]
   14b98:	add	r8, r8, #3
   14b9c:	mov	r3, #1
   14ba0:	cmp	r8, sl
   14ba4:	movcc	r1, #92	; 0x5c
   14ba8:	strbcc	r1, [r5, r8]
   14bac:	add	r2, r8, #1
   14bb0:	cmp	r2, sl
   14bb4:	bcs	14bc8 <__assert_fail@plt+0x35d8>
   14bb8:	uxtb	r1, r4
   14bbc:	mov	r0, #48	; 0x30
   14bc0:	orr	r1, r0, r1, lsr #6
   14bc4:	strb	r1, [r5, r2]
   14bc8:	add	r2, r8, #2
   14bcc:	cmp	r2, sl
   14bd0:	lsrcc	r1, r4, #3
   14bd4:	movcc	r0, #6
   14bd8:	bficc	r1, r0, #3, #29
   14bdc:	strbcc	r1, [r5, r2]
   14be0:	mov	r0, #6
   14be4:	bfi	r4, r0, #3, #29
   14be8:	add	r8, r8, #3
   14bec:	mov	r2, #1
   14bf0:	mov	r0, r3
   14bf4:	b	14c40 <__assert_fail@plt+0x3650>
   14bf8:	cmp	r8, sl
   14bfc:	strbcc	r4, [r5, r8]
   14c00:	ldr	r1, [sp, #76]	; 0x4c
   14c04:	ldrb	r4, [r1, r7]
   14c08:	add	r8, r8, #1
   14c0c:	mov	r7, r3
   14c10:	ldr	r1, [sp, #48]	; 0x30
   14c14:	tst	r1, #1
   14c18:	beq	14b44 <__assert_fail@plt+0x3554>
   14c1c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14c20:	tst	r1, #1
   14c24:	beq	14c38 <__assert_fail@plt+0x3648>
   14c28:	cmp	r8, sl
   14c2c:	movcc	r1, #92	; 0x5c
   14c30:	strbcc	r1, [r5, r8]
   14c34:	add	r8, r8, #1
   14c38:	mov	r1, #0
   14c3c:	str	r1, [fp, #-52]	; 0xffffffcc
   14c40:	and	r9, r2, #1
   14c44:	add	r3, r7, #1
   14c48:	ldr	r1, [sp, #52]	; 0x34
   14c4c:	cmp	r1, r3
   14c50:	bls	14c94 <__assert_fail@plt+0x36a4>
   14c54:	cmp	r9, #0
   14c58:	movwne	r9, #1
   14c5c:	mvn	r1, r0
   14c60:	orr	r1, r1, r9
   14c64:	tst	r1, #1
   14c68:	bne	14bf8 <__assert_fail@plt+0x3608>
   14c6c:	cmp	r8, sl
   14c70:	movcc	r1, #39	; 0x27
   14c74:	strbcc	r1, [r5, r8]
   14c78:	add	r1, r8, #1
   14c7c:	cmp	r1, sl
   14c80:	movcc	r0, #39	; 0x27
   14c84:	strbcc	r0, [r5, r1]
   14c88:	add	r8, r8, #2
   14c8c:	mov	r0, #0
   14c90:	b	14bf8 <__assert_fail@plt+0x3608>
   14c94:	str	r0, [fp, #-56]	; 0xffffffc8
   14c98:	cmp	r9, #0
   14c9c:	movwne	r9, #1
   14ca0:	cmp	r9, #0
   14ca4:	beq	14828 <__assert_fail@plt+0x3238>
   14ca8:	b	1485c <__assert_fail@plt+0x326c>
   14cac:	mov	r6, #0
   14cb0:	b	14cf0 <__assert_fail@plt+0x3700>
   14cb4:	mov	r6, #0
   14cb8:	ldr	r0, [sp, #48]	; 0x30
   14cbc:	cmp	r0, lr
   14cc0:	bcs	14cf0 <__assert_fail@plt+0x3700>
   14cc4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14cc8:	add	r0, ip, r7
   14ccc:	ldr	r2, [sp, #52]	; 0x34
   14cd0:	ldrb	r1, [r0, r2]
   14cd4:	cmp	r1, #0
   14cd8:	beq	147e4 <__assert_fail@plt+0x31f4>
   14cdc:	add	r2, r2, #1
   14ce0:	add	r1, r7, r2
   14ce4:	cmp	r1, lr
   14ce8:	bcc	14cd0 <__assert_fail@plt+0x36e0>
   14cec:	b	147e4 <__assert_fail@plt+0x31f4>
   14cf0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14cf4:	ldr	r2, [sp, #52]	; 0x34
   14cf8:	b	147e4 <__assert_fail@plt+0x31f4>
   14cfc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14d00:	eor	r0, r1, #2
   14d04:	orr	r0, r0, r8
   14d08:	clz	r0, r0
   14d0c:	lsr	r0, r0, #5
   14d10:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14d14:	tst	r3, r0
   14d18:	bne	14de4 <__assert_fail@plt+0x37f4>
   14d1c:	mov	r6, r5
   14d20:	subs	r0, r1, #2
   14d24:	movwne	r0, #1
   14d28:	orr	r0, r3, r0
   14d2c:	tst	r0, #1
   14d30:	ldr	r2, [sp, #92]	; 0x5c
   14d34:	ldreq	r0, [sp, #64]	; 0x40
   14d38:	eoreq	r0, r0, #1
   14d3c:	tsteq	r0, #1
   14d40:	bne	14d80 <__assert_fail@plt+0x3790>
   14d44:	mov	r9, lr
   14d48:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14d4c:	tst	r0, #1
   14d50:	bne	14e4c <__assert_fail@plt+0x385c>
   14d54:	ldr	r0, [sp, #84]	; 0x54
   14d58:	cmp	r0, #0
   14d5c:	beq	14d80 <__assert_fail@plt+0x3790>
   14d60:	mov	r0, #0
   14d64:	str	r0, [fp, #-48]	; 0xffffffd0
   14d68:	mov	r1, #2
   14d6c:	cmp	sl, #0
   14d70:	mov	r0, r2
   14d74:	mov	r4, r3
   14d78:	ldr	r7, [sp, #84]	; 0x54
   14d7c:	beq	13f58 <__assert_fail@plt+0x2968>
   14d80:	ldr	r1, [fp, #-84]	; 0xffffffac
   14d84:	clz	r0, r1
   14d88:	lsr	r0, r0, #5
   14d8c:	orr	r0, r0, r3
   14d90:	tst	r0, #1
   14d94:	bne	14dc0 <__assert_fail@plt+0x37d0>
   14d98:	ldrb	r0, [r1]
   14d9c:	cmp	r0, #0
   14da0:	beq	14dc0 <__assert_fail@plt+0x37d0>
   14da4:	add	r1, r1, #1
   14da8:	cmp	r8, sl
   14dac:	strbcc	r0, [r6, r8]
   14db0:	add	r8, r8, #1
   14db4:	ldrb	r0, [r1], #1
   14db8:	cmp	r0, #0
   14dbc:	bne	14da8 <__assert_fail@plt+0x37b8>
   14dc0:	cmp	r8, sl
   14dc4:	movcc	r0, #0
   14dc8:	strbcc	r0, [r6, r8]
   14dcc:	b	14e40 <__assert_fail@plt+0x3850>
   14dd0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14dd4:	mov	lr, r4
   14dd8:	b	14de4 <__assert_fail@plt+0x37f4>
   14ddc:	ldr	r5, [sp, #28]
   14de0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14de4:	mov	r0, #0
   14de8:	ldr	r1, [fp, #12]
   14dec:	bic	r1, r1, #2
   14df0:	mov	r2, #2
   14df4:	ldr	r3, [sp, #92]	; 0x5c
   14df8:	tst	r3, #1
   14dfc:	movwne	r2, #4
   14e00:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14e04:	cmp	r3, #2
   14e08:	movne	r2, r3
   14e0c:	str	r2, [sp]
   14e10:	str	r1, [sp, #4]
   14e14:	str	r0, [sp, #8]
   14e18:	ldr	r0, [sp, #80]	; 0x50
   14e1c:	str	r0, [sp, #12]
   14e20:	ldr	r0, [sp, #88]	; 0x58
   14e24:	str	r0, [sp, #16]
   14e28:	mov	r0, r5
   14e2c:	mov	r1, sl
   14e30:	mov	r2, ip
   14e34:	mov	r3, lr
   14e38:	bl	13ecc <__assert_fail@plt+0x28dc>
   14e3c:	mov	r8, r0
   14e40:	mov	r0, r8
   14e44:	sub	sp, fp, #28
   14e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e4c:	mov	r0, #5
   14e50:	str	r0, [sp]
   14e54:	ldr	r0, [fp, #12]
   14e58:	str	r0, [sp, #4]
   14e5c:	ldr	r0, [fp, #16]
   14e60:	str	r0, [sp, #8]
   14e64:	ldr	r0, [sp, #80]	; 0x50
   14e68:	str	r0, [sp, #12]
   14e6c:	ldr	r0, [sp, #88]	; 0x58
   14e70:	str	r0, [sp, #16]
   14e74:	mov	r0, r6
   14e78:	ldr	r1, [sp, #84]	; 0x54
   14e7c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14e80:	mov	r3, r9
   14e84:	b	14e38 <__assert_fail@plt+0x3848>
   14e88:	bl	115cc <abort@plt>
   14e8c:	mov	r3, r2
   14e90:	mov	r2, #0
   14e94:	b	14e98 <__assert_fail@plt+0x38a8>
   14e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e9c:	add	fp, sp, #28
   14ea0:	sub	sp, sp, #36	; 0x24
   14ea4:	mov	r4, r2
   14ea8:	str	r2, [sp, #24]
   14eac:	mov	r5, r1
   14eb0:	mov	r6, r0
   14eb4:	str	r0, [sp, #20]
   14eb8:	movw	r8, #37360	; 0x91f0
   14ebc:	movt	r8, #2
   14ec0:	cmp	r3, #0
   14ec4:	movne	r8, r3
   14ec8:	bl	114e8 <__errno_location@plt>
   14ecc:	str	r0, [sp, #28]
   14ed0:	ldm	r8, {r3, r9}
   14ed4:	ldr	r1, [r8, #40]	; 0x28
   14ed8:	ldr	r2, [r8, #44]	; 0x2c
   14edc:	ldr	r7, [r0]
   14ee0:	str	r7, [sp, #32]
   14ee4:	add	sl, r8, #8
   14ee8:	cmp	r4, #0
   14eec:	orreq	r9, r9, #1
   14ef0:	stm	sp, {r3, r9, sl}
   14ef4:	str	r1, [sp, #12]
   14ef8:	str	r2, [sp, #16]
   14efc:	mov	r0, #0
   14f00:	mov	r1, #0
   14f04:	mov	r2, r6
   14f08:	mov	r3, r5
   14f0c:	mov	r7, r5
   14f10:	bl	13ecc <__assert_fail@plt+0x28dc>
   14f14:	mov	r5, r0
   14f18:	add	r4, r0, #1
   14f1c:	mov	r0, r4
   14f20:	bl	16170 <__assert_fail@plt+0x4b80>
   14f24:	mov	r6, r0
   14f28:	ldr	r0, [r8]
   14f2c:	ldr	r1, [r8, #40]	; 0x28
   14f30:	ldr	r2, [r8, #44]	; 0x2c
   14f34:	stm	sp, {r0, r9, sl}
   14f38:	str	r1, [sp, #12]
   14f3c:	str	r2, [sp, #16]
   14f40:	mov	r0, r6
   14f44:	mov	r1, r4
   14f48:	ldr	r2, [sp, #20]
   14f4c:	mov	r3, r7
   14f50:	bl	13ecc <__assert_fail@plt+0x28dc>
   14f54:	ldr	r0, [sp, #24]
   14f58:	ldr	r1, [sp, #32]
   14f5c:	ldr	r2, [sp, #28]
   14f60:	str	r1, [r2]
   14f64:	cmp	r0, #0
   14f68:	strne	r5, [r0]
   14f6c:	mov	r0, r6
   14f70:	sub	sp, fp, #28
   14f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f7c:	add	fp, sp, #24
   14f80:	movw	r8, #37168	; 0x9130
   14f84:	movt	r8, #2
   14f88:	ldr	r4, [r8]
   14f8c:	movw	r5, #37172	; 0x9134
   14f90:	movt	r5, #2
   14f94:	ldr	r0, [r5]
   14f98:	cmp	r0, #2
   14f9c:	blt	14fc8 <__assert_fail@plt+0x39d8>
   14fa0:	add	r7, r4, #12
   14fa4:	mov	r6, #0
   14fa8:	ldr	r0, [r7, r6, lsl #3]
   14fac:	bl	13948 <__assert_fail@plt+0x2358>
   14fb0:	add	r0, r6, #1
   14fb4:	ldr	r1, [r5]
   14fb8:	add	r2, r6, #2
   14fbc:	cmp	r2, r1
   14fc0:	mov	r6, r0
   14fc4:	blt	14fa8 <__assert_fail@plt+0x39b8>
   14fc8:	ldr	r0, [r4, #4]
   14fcc:	movw	r9, #37408	; 0x9220
   14fd0:	movt	r9, #2
   14fd4:	cmp	r0, r9
   14fd8:	movw	r7, #37176	; 0x9138
   14fdc:	movt	r7, #2
   14fe0:	beq	14ff0 <__assert_fail@plt+0x3a00>
   14fe4:	bl	13948 <__assert_fail@plt+0x2358>
   14fe8:	mov	r0, #256	; 0x100
   14fec:	stm	r7, {r0, r9}
   14ff0:	cmp	r4, r7
   14ff4:	beq	15004 <__assert_fail@plt+0x3a14>
   14ff8:	mov	r0, r4
   14ffc:	bl	13948 <__assert_fail@plt+0x2358>
   15000:	str	r7, [r8]
   15004:	mov	r0, #1
   15008:	str	r0, [r5]
   1500c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15010:	movw	r3, #37360	; 0x91f0
   15014:	movt	r3, #2
   15018:	mvn	r2, #0
   1501c:	b	15020 <__assert_fail@plt+0x3a30>
   15020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15024:	add	fp, sp, #28
   15028:	sub	sp, sp, #44	; 0x2c
   1502c:	mov	r7, r3
   15030:	str	r2, [sp, #36]	; 0x24
   15034:	str	r1, [sp, #32]
   15038:	mov	r5, r0
   1503c:	bl	114e8 <__errno_location@plt>
   15040:	cmp	r5, #0
   15044:	bmi	151b4 <__assert_fail@plt+0x3bc4>
   15048:	cmn	r5, #-2147483647	; 0x80000001
   1504c:	beq	151b4 <__assert_fail@plt+0x3bc4>
   15050:	movw	r4, #37168	; 0x9130
   15054:	movt	r4, #2
   15058:	ldr	r6, [r4]
   1505c:	str	r0, [sp, #28]
   15060:	ldr	r0, [r0]
   15064:	str	r0, [sp, #24]
   15068:	movw	r8, #37172	; 0x9134
   1506c:	movt	r8, #2
   15070:	ldr	r1, [r8]
   15074:	cmp	r1, r5
   15078:	ble	15084 <__assert_fail@plt+0x3a94>
   1507c:	mov	sl, r6
   15080:	b	150f0 <__assert_fail@plt+0x3b00>
   15084:	str	r1, [fp, #-32]	; 0xffffffe0
   15088:	mov	r0, #8
   1508c:	str	r0, [sp]
   15090:	movw	r9, #37176	; 0x9138
   15094:	movt	r9, #2
   15098:	subs	r0, r6, r9
   1509c:	movne	r0, r6
   150a0:	sub	r1, r5, r1
   150a4:	add	r2, r1, #1
   150a8:	sub	r1, fp, #32
   150ac:	mvn	r3, #-2147483648	; 0x80000000
   150b0:	bl	1624c <__assert_fail@plt+0x4c5c>
   150b4:	mov	sl, r0
   150b8:	str	r0, [r4]
   150bc:	cmp	r6, r9
   150c0:	bne	150cc <__assert_fail@plt+0x3adc>
   150c4:	ldrd	r0, [r9]
   150c8:	stm	sl, {r0, r1}
   150cc:	ldr	r1, [r8]
   150d0:	add	r0, sl, r1, lsl #3
   150d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   150d8:	sub	r1, r2, r1
   150dc:	lsl	r2, r1, #3
   150e0:	mov	r1, #0
   150e4:	bl	1150c <memset@plt>
   150e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   150ec:	str	r0, [r8]
   150f0:	mov	r9, sl
   150f4:	ldr	r6, [r9, r5, lsl #3]!
   150f8:	ldr	r4, [r9, #4]!
   150fc:	ldm	r7, {r0, r1}
   15100:	ldr	r2, [r7, #40]	; 0x28
   15104:	ldr	r3, [r7, #44]	; 0x2c
   15108:	orr	r8, r1, #1
   1510c:	add	r1, r7, #8
   15110:	stm	sp, {r0, r8}
   15114:	str	r1, [sp, #20]
   15118:	add	r0, sp, #8
   1511c:	stm	r0, {r1, r2, r3}
   15120:	mov	r0, r4
   15124:	mov	r1, r6
   15128:	ldr	r2, [sp, #32]
   1512c:	ldr	r3, [sp, #36]	; 0x24
   15130:	bl	13ecc <__assert_fail@plt+0x28dc>
   15134:	cmp	r6, r0
   15138:	bhi	1519c <__assert_fail@plt+0x3bac>
   1513c:	add	r6, r0, #1
   15140:	str	r6, [sl, r5, lsl #3]
   15144:	movw	r0, #37408	; 0x9220
   15148:	movt	r0, #2
   1514c:	cmp	r4, r0
   15150:	beq	1515c <__assert_fail@plt+0x3b6c>
   15154:	mov	r0, r4
   15158:	bl	13948 <__assert_fail@plt+0x2358>
   1515c:	mov	r0, r6
   15160:	bl	16170 <__assert_fail@plt+0x4b80>
   15164:	mov	r4, r0
   15168:	str	r0, [r9]
   1516c:	ldr	r0, [r7]
   15170:	ldr	r1, [r7, #40]	; 0x28
   15174:	ldr	r2, [r7, #44]	; 0x2c
   15178:	stm	sp, {r0, r8}
   1517c:	ldr	r0, [sp, #20]
   15180:	add	r3, sp, #8
   15184:	stm	r3, {r0, r1, r2}
   15188:	mov	r0, r4
   1518c:	mov	r1, r6
   15190:	ldr	r2, [sp, #32]
   15194:	ldr	r3, [sp, #36]	; 0x24
   15198:	bl	13ecc <__assert_fail@plt+0x28dc>
   1519c:	ldr	r0, [sp, #28]
   151a0:	ldr	r1, [sp, #24]
   151a4:	str	r1, [r0]
   151a8:	mov	r0, r4
   151ac:	sub	sp, fp, #28
   151b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151b4:	bl	115cc <abort@plt>
   151b8:	movw	r3, #37360	; 0x91f0
   151bc:	movt	r3, #2
   151c0:	b	15020 <__assert_fail@plt+0x3a30>
   151c4:	mov	r1, r0
   151c8:	mov	r0, #0
   151cc:	b	15010 <__assert_fail@plt+0x3a20>
   151d0:	mov	r2, r1
   151d4:	mov	r1, r0
   151d8:	mov	r0, #0
   151dc:	b	151b8 <__assert_fail@plt+0x3bc8>
   151e0:	push	{r4, r5, r6, sl, fp, lr}
   151e4:	add	fp, sp, #16
   151e8:	sub	sp, sp, #48	; 0x30
   151ec:	mov	r4, r2
   151f0:	mov	r5, r0
   151f4:	mov	r6, sp
   151f8:	mov	r0, r6
   151fc:	bl	1521c <__assert_fail@plt+0x3c2c>
   15200:	mov	r0, r5
   15204:	mov	r1, r4
   15208:	mvn	r2, #0
   1520c:	mov	r3, r6
   15210:	bl	15020 <__assert_fail@plt+0x3a30>
   15214:	sub	sp, fp, #16
   15218:	pop	{r4, r5, r6, sl, fp, pc}
   1521c:	push	{fp, lr}
   15220:	mov	fp, sp
   15224:	vmov.i32	q8, #0	; 0x00000000
   15228:	mov	r2, #32
   1522c:	mov	r3, r0
   15230:	vst1.32	{d16-d17}, [r3], r2
   15234:	vst1.32	{d16-d17}, [r3]
   15238:	add	r2, r0, #16
   1523c:	vst1.32	{d16-d17}, [r2]
   15240:	cmp	r1, #10
   15244:	strne	r1, [r0]
   15248:	popne	{fp, pc}
   1524c:	bl	115cc <abort@plt>
   15250:	push	{r4, r5, r6, r7, fp, lr}
   15254:	add	fp, sp, #16
   15258:	sub	sp, sp, #48	; 0x30
   1525c:	mov	r4, r3
   15260:	mov	r5, r2
   15264:	mov	r6, r0
   15268:	mov	r7, sp
   1526c:	mov	r0, r7
   15270:	bl	1521c <__assert_fail@plt+0x3c2c>
   15274:	mov	r0, r6
   15278:	mov	r1, r5
   1527c:	mov	r2, r4
   15280:	mov	r3, r7
   15284:	bl	15020 <__assert_fail@plt+0x3a30>
   15288:	sub	sp, fp, #16
   1528c:	pop	{r4, r5, r6, r7, fp, pc}
   15290:	mov	r2, r1
   15294:	mov	r1, r0
   15298:	mov	r0, #0
   1529c:	b	151e0 <__assert_fail@plt+0x3bf0>
   152a0:	mov	r3, r2
   152a4:	mov	r2, r1
   152a8:	mov	r1, r0
   152ac:	mov	r0, #0
   152b0:	b	15250 <__assert_fail@plt+0x3c60>
   152b4:	push	{r4, r5, r6, sl, fp, lr}
   152b8:	add	fp, sp, #16
   152bc:	sub	sp, sp, #48	; 0x30
   152c0:	mov	r4, r1
   152c4:	mov	r5, r0
   152c8:	movw	r0, #37360	; 0x91f0
   152cc:	movt	r0, #2
   152d0:	add	r1, r0, #16
   152d4:	mov	r3, #32
   152d8:	vld1.64	{d16-d17}, [r0], r3
   152dc:	vld1.64	{d18-d19}, [r1]
   152e0:	mov	r6, sp
   152e4:	add	r1, r6, #16
   152e8:	vld1.64	{d20-d21}, [r0]
   152ec:	vst1.64	{d18-d19}, [r1]
   152f0:	mov	r0, r6
   152f4:	vst1.64	{d16-d17}, [r0], r3
   152f8:	vst1.64	{d20-d21}, [r0]
   152fc:	mov	r0, r6
   15300:	mov	r1, r2
   15304:	mov	r2, #1
   15308:	bl	13dc0 <__assert_fail@plt+0x27d0>
   1530c:	mov	r0, #0
   15310:	mov	r1, r5
   15314:	mov	r2, r4
   15318:	mov	r3, r6
   1531c:	bl	15020 <__assert_fail@plt+0x3a30>
   15320:	sub	sp, fp, #16
   15324:	pop	{r4, r5, r6, sl, fp, pc}
   15328:	mov	r2, r1
   1532c:	mvn	r1, #0
   15330:	b	152b4 <__assert_fail@plt+0x3cc4>
   15334:	mov	r1, #58	; 0x3a
   15338:	b	15328 <__assert_fail@plt+0x3d38>
   1533c:	mov	r2, #58	; 0x3a
   15340:	b	152b4 <__assert_fail@plt+0x3cc4>
   15344:	push	{r4, r5, r6, sl, fp, lr}
   15348:	add	fp, sp, #16
   1534c:	sub	sp, sp, #48	; 0x30
   15350:	mov	r4, r2
   15354:	mov	r5, r0
   15358:	mov	r6, sp
   1535c:	mov	r0, r6
   15360:	bl	1521c <__assert_fail@plt+0x3c2c>
   15364:	mov	r0, r6
   15368:	mov	r1, #58	; 0x3a
   1536c:	mov	r2, #1
   15370:	bl	13dc0 <__assert_fail@plt+0x27d0>
   15374:	mov	r0, r5
   15378:	mov	r1, r4
   1537c:	mvn	r2, #0
   15380:	mov	r3, r6
   15384:	bl	15020 <__assert_fail@plt+0x3a30>
   15388:	sub	sp, fp, #16
   1538c:	pop	{r4, r5, r6, sl, fp, pc}
   15390:	push	{fp, lr}
   15394:	mov	fp, sp
   15398:	sub	sp, sp, #8
   1539c:	mvn	ip, #0
   153a0:	str	ip, [sp]
   153a4:	bl	153b0 <__assert_fail@plt+0x3dc0>
   153a8:	mov	sp, fp
   153ac:	pop	{fp, pc}
   153b0:	push	{r4, r5, r6, r7, fp, lr}
   153b4:	add	fp, sp, #16
   153b8:	sub	sp, sp, #48	; 0x30
   153bc:	mov	r7, r3
   153c0:	mov	r5, r0
   153c4:	movw	r0, #37360	; 0x91f0
   153c8:	movt	r0, #2
   153cc:	add	r3, r0, #16
   153d0:	mov	r4, #32
   153d4:	vld1.64	{d16-d17}, [r0], r4
   153d8:	vld1.64	{d18-d19}, [r3]
   153dc:	mov	r6, sp
   153e0:	add	r3, r6, #16
   153e4:	vld1.64	{d20-d21}, [r0]
   153e8:	vst1.64	{d18-d19}, [r3]
   153ec:	mov	r0, r6
   153f0:	vst1.64	{d16-d17}, [r0], r4
   153f4:	vst1.64	{d20-d21}, [r0]
   153f8:	mov	r0, r6
   153fc:	bl	13e18 <__assert_fail@plt+0x2828>
   15400:	ldr	r2, [fp, #8]
   15404:	mov	r0, r5
   15408:	mov	r1, r7
   1540c:	mov	r3, r6
   15410:	bl	15020 <__assert_fail@plt+0x3a30>
   15414:	sub	sp, fp, #16
   15418:	pop	{r4, r5, r6, r7, fp, pc}
   1541c:	mov	r3, r2
   15420:	mov	r2, r1
   15424:	mov	r1, r0
   15428:	mov	r0, #0
   1542c:	b	15390 <__assert_fail@plt+0x3da0>
   15430:	push	{fp, lr}
   15434:	mov	fp, sp
   15438:	sub	sp, sp, #8
   1543c:	mov	ip, r2
   15440:	mov	r2, r1
   15444:	mov	r1, r0
   15448:	str	r3, [sp]
   1544c:	mov	r0, #0
   15450:	mov	r3, ip
   15454:	bl	153b0 <__assert_fail@plt+0x3dc0>
   15458:	mov	sp, fp
   1545c:	pop	{fp, pc}
   15460:	movw	r3, #37184	; 0x9140
   15464:	movt	r3, #2
   15468:	b	15020 <__assert_fail@plt+0x3a30>
   1546c:	mov	r2, r1
   15470:	mov	r1, r0
   15474:	mov	r0, #0
   15478:	b	15460 <__assert_fail@plt+0x3e70>
   1547c:	mvn	r2, #0
   15480:	b	15460 <__assert_fail@plt+0x3e70>
   15484:	mov	r1, r0
   15488:	mov	r0, #0
   1548c:	b	1547c <__assert_fail@plt+0x3e8c>
   15490:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15494:	add	fp, sp, #24
   15498:	sub	sp, sp, #16
   1549c:	mov	r4, r1
   154a0:	mov	r5, r0
   154a4:	mov	r7, #0
   154a8:	mov	r0, #0
   154ac:	mov	r1, r5
   154b0:	mov	r2, #5
   154b4:	bl	11374 <dcgettext@plt>
   154b8:	cmp	r0, r5
   154bc:	beq	154c8 <__assert_fail@plt+0x3ed8>
   154c0:	sub	sp, fp, #24
   154c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   154c8:	bl	16a54 <__assert_fail@plt+0x5464>
   154cc:	mov	r6, r0
   154d0:	mov	r8, #56	; 0x38
   154d4:	mov	r0, #45	; 0x2d
   154d8:	stm	sp, {r0, r8}
   154dc:	str	r7, [sp, #8]
   154e0:	str	r7, [sp, #12]
   154e4:	mov	r0, r6
   154e8:	mov	r1, #85	; 0x55
   154ec:	mov	r2, #84	; 0x54
   154f0:	mov	r3, #70	; 0x46
   154f4:	bl	1558c <__assert_fail@plt+0x3f9c>
   154f8:	cmp	r0, #0
   154fc:	beq	15518 <__assert_fail@plt+0x3f28>
   15500:	ldrb	r1, [r5]
   15504:	movw	r2, #32180	; 0x7db4
   15508:	movt	r2, #1
   1550c:	movw	r0, #32184	; 0x7db8
   15510:	movt	r0, #1
   15514:	b	1555c <__assert_fail@plt+0x3f6c>
   15518:	mov	r0, #48	; 0x30
   1551c:	mov	r1, #51	; 0x33
   15520:	str	r8, [sp]
   15524:	stmib	sp, {r0, r1}
   15528:	str	r0, [sp, #12]
   1552c:	mov	r0, r6
   15530:	mov	r1, #71	; 0x47
   15534:	mov	r2, #66	; 0x42
   15538:	mov	r3, #49	; 0x31
   1553c:	bl	1558c <__assert_fail@plt+0x3f9c>
   15540:	cmp	r0, #0
   15544:	beq	1556c <__assert_fail@plt+0x3f7c>
   15548:	ldrb	r1, [r5]
   1554c:	movw	r2, #32188	; 0x7dbc
   15550:	movt	r2, #1
   15554:	movw	r0, #32192	; 0x7dc0
   15558:	movt	r0, #1
   1555c:	cmp	r1, #96	; 0x60
   15560:	moveq	r0, r2
   15564:	sub	sp, fp, #24
   15568:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1556c:	movw	r1, #31159	; 0x79b7
   15570:	movt	r1, #1
   15574:	movw	r0, #32178	; 0x7db2
   15578:	movt	r0, #1
   1557c:	cmp	r4, #9
   15580:	moveq	r0, r1
   15584:	sub	sp, fp, #24
   15588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1558c:	push	{r4, r5, r6, r7, fp, lr}
   15590:	add	fp, sp, #16
   15594:	sub	sp, sp, #16
   15598:	mov	r4, r3
   1559c:	mov	r5, r2
   155a0:	mov	r7, r1
   155a4:	mov	r6, r0
   155a8:	mov	r0, r1
   155ac:	bl	168a4 <__assert_fail@plt+0x52b4>
   155b0:	ldrb	r1, [r6]
   155b4:	cmp	r0, #0
   155b8:	andne	r1, r1, #223	; 0xdf
   155bc:	mov	r0, #0
   155c0:	cmp	r1, r7
   155c4:	bne	155fc <__assert_fail@plt+0x400c>
   155c8:	cmp	r7, #0
   155cc:	beq	15604 <__assert_fail@plt+0x4014>
   155d0:	ldr	r0, [fp, #20]
   155d4:	ldr	r1, [fp, #16]
   155d8:	ldr	r2, [fp, #12]
   155dc:	ldr	r3, [fp, #8]
   155e0:	str	r2, [sp]
   155e4:	str	r1, [sp, #4]
   155e8:	str	r0, [sp, #8]
   155ec:	mov	r0, r6
   155f0:	mov	r1, r5
   155f4:	mov	r2, r4
   155f8:	bl	15610 <__assert_fail@plt+0x4020>
   155fc:	sub	sp, fp, #16
   15600:	pop	{r4, r5, r6, r7, fp, pc}
   15604:	mov	r0, #1
   15608:	sub	sp, fp, #16
   1560c:	pop	{r4, r5, r6, r7, fp, pc}
   15610:	push	{r4, r5, r6, r7, fp, lr}
   15614:	add	fp, sp, #16
   15618:	sub	sp, sp, #8
   1561c:	mov	r4, r3
   15620:	mov	r5, r2
   15624:	mov	r7, r1
   15628:	mov	r6, r0
   1562c:	mov	r0, r1
   15630:	bl	168a4 <__assert_fail@plt+0x52b4>
   15634:	ldrb	r1, [r6, #1]
   15638:	cmp	r0, #0
   1563c:	andne	r1, r1, #223	; 0xdf
   15640:	mov	r0, #0
   15644:	cmp	r1, r7
   15648:	bne	15678 <__assert_fail@plt+0x4088>
   1564c:	cmp	r7, #0
   15650:	beq	15680 <__assert_fail@plt+0x4090>
   15654:	ldr	r0, [fp, #16]
   15658:	ldr	r1, [fp, #12]
   1565c:	ldr	r3, [fp, #8]
   15660:	str	r1, [sp]
   15664:	str	r0, [sp, #4]
   15668:	mov	r0, r6
   1566c:	mov	r1, r5
   15670:	mov	r2, r4
   15674:	bl	1568c <__assert_fail@plt+0x409c>
   15678:	sub	sp, fp, #16
   1567c:	pop	{r4, r5, r6, r7, fp, pc}
   15680:	mov	r0, #1
   15684:	sub	sp, fp, #16
   15688:	pop	{r4, r5, r6, r7, fp, pc}
   1568c:	push	{r4, r5, r6, r7, fp, lr}
   15690:	add	fp, sp, #16
   15694:	sub	sp, sp, #8
   15698:	mov	r4, r3
   1569c:	mov	r5, r2
   156a0:	mov	r7, r1
   156a4:	mov	r6, r0
   156a8:	mov	r0, r1
   156ac:	bl	168a4 <__assert_fail@plt+0x52b4>
   156b0:	ldrb	r1, [r6, #2]
   156b4:	cmp	r0, #0
   156b8:	andne	r1, r1, #223	; 0xdf
   156bc:	mov	r0, #0
   156c0:	cmp	r1, r7
   156c4:	bne	156ec <__assert_fail@plt+0x40fc>
   156c8:	cmp	r7, #0
   156cc:	beq	156f4 <__assert_fail@plt+0x4104>
   156d0:	ldr	r0, [fp, #12]
   156d4:	ldr	r3, [fp, #8]
   156d8:	str	r0, [sp]
   156dc:	mov	r0, r6
   156e0:	mov	r1, r5
   156e4:	mov	r2, r4
   156e8:	bl	15700 <__assert_fail@plt+0x4110>
   156ec:	sub	sp, fp, #16
   156f0:	pop	{r4, r5, r6, r7, fp, pc}
   156f4:	mov	r0, #1
   156f8:	sub	sp, fp, #16
   156fc:	pop	{r4, r5, r6, r7, fp, pc}
   15700:	push	{r4, r5, r6, r7, fp, lr}
   15704:	add	fp, sp, #16
   15708:	mov	r4, r3
   1570c:	mov	r5, r2
   15710:	mov	r7, r1
   15714:	mov	r6, r0
   15718:	mov	r0, r1
   1571c:	bl	168a4 <__assert_fail@plt+0x52b4>
   15720:	ldrb	r1, [r6, #3]
   15724:	ldr	r3, [fp, #8]
   15728:	cmp	r0, #0
   1572c:	andne	r1, r1, #223	; 0xdf
   15730:	mov	r0, #0
   15734:	cmp	r1, r7
   15738:	bne	1575c <__assert_fail@plt+0x416c>
   1573c:	cmp	r7, #0
   15740:	beq	15758 <__assert_fail@plt+0x4168>
   15744:	mov	r0, r6
   15748:	mov	r1, r5
   1574c:	mov	r2, r4
   15750:	pop	{r4, r5, r6, r7, fp, lr}
   15754:	b	15760 <__assert_fail@plt+0x4170>
   15758:	mov	r0, #1
   1575c:	pop	{r4, r5, r6, r7, fp, pc}
   15760:	push	{r4, r5, r6, r7, fp, lr}
   15764:	add	fp, sp, #16
   15768:	mov	r4, r3
   1576c:	mov	r5, r2
   15770:	mov	r7, r1
   15774:	mov	r6, r0
   15778:	mov	r0, r1
   1577c:	bl	168a4 <__assert_fail@plt+0x52b4>
   15780:	ldrb	r1, [r6, #4]
   15784:	cmp	r0, #0
   15788:	andne	r1, r1, #223	; 0xdf
   1578c:	mov	r0, #0
   15790:	cmp	r1, r7
   15794:	bne	157b8 <__assert_fail@plt+0x41c8>
   15798:	cmp	r7, #0
   1579c:	beq	157b4 <__assert_fail@plt+0x41c4>
   157a0:	mov	r0, r6
   157a4:	mov	r1, r5
   157a8:	mov	r2, r4
   157ac:	pop	{r4, r5, r6, r7, fp, lr}
   157b0:	b	157bc <__assert_fail@plt+0x41cc>
   157b4:	mov	r0, #1
   157b8:	pop	{r4, r5, r6, r7, fp, pc}
   157bc:	push	{r4, r5, r6, sl, fp, lr}
   157c0:	add	fp, sp, #16
   157c4:	mov	r4, r2
   157c8:	mov	r6, r1
   157cc:	mov	r5, r0
   157d0:	mov	r0, r1
   157d4:	bl	168a4 <__assert_fail@plt+0x52b4>
   157d8:	ldrb	r1, [r5, #5]
   157dc:	cmp	r0, #0
   157e0:	andne	r1, r1, #223	; 0xdf
   157e4:	mov	r0, #0
   157e8:	cmp	r1, r6
   157ec:	bne	1580c <__assert_fail@plt+0x421c>
   157f0:	cmp	r6, #0
   157f4:	beq	15808 <__assert_fail@plt+0x4218>
   157f8:	mov	r0, r5
   157fc:	mov	r1, r4
   15800:	pop	{r4, r5, r6, sl, fp, lr}
   15804:	b	15810 <__assert_fail@plt+0x4220>
   15808:	mov	r0, #1
   1580c:	pop	{r4, r5, r6, sl, fp, pc}
   15810:	push	{r4, r5, fp, lr}
   15814:	add	fp, sp, #8
   15818:	mov	r5, r1
   1581c:	mov	r4, r0
   15820:	mov	r0, r1
   15824:	bl	168a4 <__assert_fail@plt+0x52b4>
   15828:	ldrb	r1, [r4, #6]
   1582c:	cmp	r0, #0
   15830:	andne	r1, r1, #223	; 0xdf
   15834:	mov	r0, #0
   15838:	cmp	r1, r5
   1583c:	popne	{r4, r5, fp, pc}
   15840:	cmp	r5, #0
   15844:	beq	15854 <__assert_fail@plt+0x4264>
   15848:	mov	r0, r4
   1584c:	pop	{r4, r5, fp, lr}
   15850:	b	1585c <__assert_fail@plt+0x426c>
   15854:	mov	r0, #1
   15858:	pop	{r4, r5, fp, pc}
   1585c:	push	{r4, sl, fp, lr}
   15860:	add	fp, sp, #8
   15864:	mov	r4, r0
   15868:	mov	r0, #0
   1586c:	bl	168a4 <__assert_fail@plt+0x52b4>
   15870:	ldrb	r1, [r4, #7]
   15874:	cmp	r0, #0
   15878:	beq	1588c <__assert_fail@plt+0x429c>
   1587c:	tst	r1, #223	; 0xdf
   15880:	bne	15894 <__assert_fail@plt+0x42a4>
   15884:	mov	r0, #1
   15888:	pop	{r4, sl, fp, pc}
   1588c:	cmp	r1, #0
   15890:	beq	15884 <__assert_fail@plt+0x4294>
   15894:	mov	r0, #0
   15898:	pop	{r4, sl, fp, pc}
   1589c:	push	{r4, r5, r6, sl, fp, lr}
   158a0:	add	fp, sp, #16
   158a4:	sub	sp, sp, #8
   158a8:	mov	r4, r0
   158ac:	mov	r0, #0
   158b0:	str	r0, [r4]
   158b4:	str	r0, [r4, #4]
   158b8:	str	r0, [r4, #8]
   158bc:	movw	r6, #14664	; 0x3948
   158c0:	movt	r6, #1
   158c4:	str	r6, [sp]
   158c8:	add	r0, r4, #12
   158cc:	movw	r5, #25948	; 0x655c
   158d0:	movt	r5, #1
   158d4:	mov	r1, #0
   158d8:	mov	r2, #0
   158dc:	mov	r3, r5
   158e0:	bl	16a8c <_obstack_begin@@Base>
   158e4:	str	r6, [sp]
   158e8:	add	r0, r4, #56	; 0x38
   158ec:	mov	r1, #0
   158f0:	mov	r2, #0
   158f4:	mov	r3, r5
   158f8:	bl	16a8c <_obstack_begin@@Base>
   158fc:	str	r6, [sp]
   15900:	add	r0, r4, #100	; 0x64
   15904:	mov	r1, #0
   15908:	mov	r2, #0
   1590c:	mov	r3, r5
   15910:	bl	16a8c <_obstack_begin@@Base>
   15914:	sub	sp, fp, #16
   15918:	pop	{r4, r5, r6, sl, fp, pc}
   1591c:	push	{r4, sl, fp, lr}
   15920:	add	fp, sp, #8
   15924:	mov	r4, r0
   15928:	add	r0, r0, #12
   1592c:	mov	r1, #0
   15930:	bl	16d08 <_obstack_free@@Base>
   15934:	add	r0, r4, #56	; 0x38
   15938:	mov	r1, #0
   1593c:	bl	16d08 <_obstack_free@@Base>
   15940:	add	r0, r4, #100	; 0x64
   15944:	mov	r1, #0
   15948:	pop	{r4, sl, fp, lr}
   1594c:	b	16d08 <_obstack_free@@Base>
   15950:	push	{r4, r5, r6, r7, fp, lr}
   15954:	add	fp, sp, #16
   15958:	mov	r5, r1
   1595c:	mov	r4, r0
   15960:	bl	11524 <fgetc@plt>
   15964:	cmn	r0, #1
   15968:	beq	159c8 <__assert_fail@plt+0x43d8>
   1596c:	mov	r7, r0
   15970:	add	r6, r5, #12
   15974:	b	159a8 <__assert_fail@plt+0x43b8>
   15978:	ldr	r0, [r5, #24]
   1597c:	add	r1, r0, #1
   15980:	str	r1, [r5, #24]
   15984:	strb	r7, [r0]
   15988:	cmp	r7, #0
   1598c:	moveq	r0, r5
   15990:	bleq	15afc <__assert_fail@plt+0x450c>
   15994:	mov	r0, r4
   15998:	bl	11524 <fgetc@plt>
   1599c:	mov	r7, r0
   159a0:	cmn	r0, #1
   159a4:	beq	159c8 <__assert_fail@plt+0x43d8>
   159a8:	ldr	r0, [r5, #24]
   159ac:	ldr	r1, [r5, #28]
   159b0:	cmp	r1, r0
   159b4:	bne	15978 <__assert_fail@plt+0x4388>
   159b8:	mov	r0, r6
   159bc:	mov	r1, #1
   159c0:	bl	16b74 <_obstack_newchunk@@Base>
   159c4:	b	15978 <__assert_fail@plt+0x4388>
   159c8:	ldr	r1, [r5, #20]
   159cc:	ldr	r0, [r5, #24]
   159d0:	cmp	r0, r1
   159d4:	beq	15a0c <__assert_fail@plt+0x441c>
   159d8:	ldr	r1, [r5, #28]
   159dc:	cmp	r1, r0
   159e0:	bne	159f0 <__assert_fail@plt+0x4400>
   159e4:	add	r0, r5, #12
   159e8:	mov	r1, #1
   159ec:	bl	16b74 <_obstack_newchunk@@Base>
   159f0:	ldr	r0, [r5, #24]
   159f4:	add	r1, r0, #1
   159f8:	str	r1, [r5, #24]
   159fc:	mov	r1, #0
   15a00:	strb	r1, [r0]
   15a04:	mov	r0, r5
   15a08:	bl	15afc <__assert_fail@plt+0x450c>
   15a0c:	ldr	r0, [r5, #68]	; 0x44
   15a10:	ldr	r1, [r5, #72]	; 0x48
   15a14:	sub	r0, r1, r0
   15a18:	cmp	r0, #3
   15a1c:	bhi	15a2c <__assert_fail@plt+0x443c>
   15a20:	add	r0, r5, #56	; 0x38
   15a24:	mov	r1, #4
   15a28:	bl	16b74 <_obstack_newchunk@@Base>
   15a2c:	ldr	r0, [r5, #68]	; 0x44
   15a30:	mov	r1, #0
   15a34:	str	r1, [r0]
   15a38:	ldr	r0, [r5, #64]	; 0x40
   15a3c:	ldr	r1, [r5, #68]	; 0x44
   15a40:	add	r1, r1, #4
   15a44:	str	r1, [r5, #68]	; 0x44
   15a48:	cmp	r1, r0
   15a4c:	bne	15a5c <__assert_fail@plt+0x446c>
   15a50:	ldrb	r1, [r5, #96]	; 0x60
   15a54:	orr	r1, r1, #2
   15a58:	strb	r1, [r5, #96]	; 0x60
   15a5c:	ldr	r2, [r5, #60]	; 0x3c
   15a60:	ldr	r3, [r5, #68]	; 0x44
   15a64:	ldr	r1, [r5, #72]	; 0x48
   15a68:	ldr	r7, [r5, #80]	; 0x50
   15a6c:	add	r3, r7, r3
   15a70:	bic	r3, r3, r7
   15a74:	str	r3, [r5, #68]	; 0x44
   15a78:	sub	r3, r3, r2
   15a7c:	sub	r2, r1, r2
   15a80:	cmp	r3, r2
   15a84:	strhi	r1, [r5, #68]	; 0x44
   15a88:	str	r0, [r5, #4]
   15a8c:	ldr	r1, [r5, #68]	; 0x44
   15a90:	ldr	r0, [r5, #108]	; 0x6c
   15a94:	ldr	r2, [r5, #112]	; 0x70
   15a98:	str	r1, [r5, #64]	; 0x40
   15a9c:	cmp	r2, r0
   15aa0:	bne	15ab0 <__assert_fail@plt+0x44c0>
   15aa4:	ldrb	r1, [r5, #140]	; 0x8c
   15aa8:	orr	r1, r1, #2
   15aac:	strb	r1, [r5, #140]	; 0x8c
   15ab0:	ldr	r2, [r5, #104]	; 0x68
   15ab4:	ldr	r3, [r5, #112]	; 0x70
   15ab8:	ldr	r1, [r5, #116]	; 0x74
   15abc:	ldr	r7, [r5, #124]	; 0x7c
   15ac0:	add	r3, r7, r3
   15ac4:	bic	r3, r3, r7
   15ac8:	str	r3, [r5, #112]	; 0x70
   15acc:	sub	r3, r3, r2
   15ad0:	sub	r2, r1, r2
   15ad4:	cmp	r3, r2
   15ad8:	strhi	r1, [r5, #112]	; 0x70
   15adc:	str	r0, [r5, #8]
   15ae0:	ldr	r0, [r5, #112]	; 0x70
   15ae4:	str	r0, [r5, #108]	; 0x6c
   15ae8:	mov	r0, r4
   15aec:	bl	11344 <ferror@plt>
   15af0:	clz	r0, r0
   15af4:	lsr	r0, r0, #5
   15af8:	pop	{r4, r5, r6, r7, fp, pc}
   15afc:	push	{r4, r5, r6, r7, fp, lr}
   15b00:	add	fp, sp, #16
   15b04:	mov	r4, r0
   15b08:	ldr	r5, [r0, #20]
   15b0c:	ldr	r6, [r0, #24]
   15b10:	cmp	r6, r5
   15b14:	bne	15b24 <__assert_fail@plt+0x4534>
   15b18:	ldrb	r0, [r4, #52]	; 0x34
   15b1c:	orr	r0, r0, #2
   15b20:	strb	r0, [r4, #52]	; 0x34
   15b24:	ldr	r1, [r4, #16]
   15b28:	ldr	r0, [r4, #28]
   15b2c:	ldr	r2, [r4, #36]	; 0x24
   15b30:	add	r3, r2, r6
   15b34:	bic	r2, r3, r2
   15b38:	str	r2, [r4, #24]
   15b3c:	sub	r2, r2, r1
   15b40:	sub	r1, r0, r1
   15b44:	cmp	r2, r1
   15b48:	strhi	r0, [r4, #24]
   15b4c:	mvn	r7, r5
   15b50:	ldr	r0, [r4, #24]
   15b54:	ldr	r1, [r4, #68]	; 0x44
   15b58:	ldr	r2, [r4, #72]	; 0x48
   15b5c:	str	r0, [r4, #20]
   15b60:	sub	r0, r2, r1
   15b64:	cmp	r0, #3
   15b68:	bhi	15b78 <__assert_fail@plt+0x4588>
   15b6c:	add	r0, r4, #56	; 0x38
   15b70:	mov	r1, #4
   15b74:	bl	16b74 <_obstack_newchunk@@Base>
   15b78:	add	r6, r6, r7
   15b7c:	ldr	r0, [r4, #68]	; 0x44
   15b80:	str	r5, [r0]
   15b84:	ldr	r0, [r4, #68]	; 0x44
   15b88:	ldr	r1, [r4, #112]	; 0x70
   15b8c:	ldr	r2, [r4, #116]	; 0x74
   15b90:	add	r0, r0, #4
   15b94:	str	r0, [r4, #68]	; 0x44
   15b98:	sub	r0, r2, r1
   15b9c:	cmp	r0, #3
   15ba0:	bhi	15bb0 <__assert_fail@plt+0x45c0>
   15ba4:	add	r0, r4, #100	; 0x64
   15ba8:	mov	r1, #4
   15bac:	bl	16b74 <_obstack_newchunk@@Base>
   15bb0:	ldr	r0, [r4, #112]	; 0x70
   15bb4:	str	r6, [r0]
   15bb8:	ldr	r0, [r4]
   15bbc:	ldr	r1, [r4, #112]	; 0x70
   15bc0:	add	r1, r1, #4
   15bc4:	str	r1, [r4, #112]	; 0x70
   15bc8:	add	r0, r0, #1
   15bcc:	str	r0, [r4]
   15bd0:	pop	{r4, r5, r6, r7, fp, pc}
   15bd4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15bd8:	add	fp, sp, #24
   15bdc:	mov	r7, r2
   15be0:	mov	r5, r1
   15be4:	mov	r6, r0
   15be8:	movw	r9, #0
   15bec:	movt	r9, #32752	; 0x7ff0
   15bf0:	mov	r0, r6
   15bf4:	mov	r1, r5
   15bf8:	mov	r2, r7
   15bfc:	bl	11308 <read@plt>
   15c00:	mov	r4, r0
   15c04:	cmn	r0, #1
   15c08:	bgt	15c64 <__assert_fail@plt+0x4674>
   15c0c:	bl	114e8 <__errno_location@plt>
   15c10:	ldr	r0, [r0]
   15c14:	cmp	r0, #4
   15c18:	beq	15bf0 <__assert_fail@plt+0x4600>
   15c1c:	cmp	r7, r9
   15c20:	mov	r1, #0
   15c24:	movwhi	r1, #1
   15c28:	sub	r2, r0, #22
   15c2c:	clz	r2, r2
   15c30:	lsr	r2, r2, #5
   15c34:	ands	r1, r1, r2
   15c38:	moveq	r8, r4
   15c3c:	mov	r1, r7
   15c40:	movwne	r1, #0
   15c44:	movtne	r1, #32752	; 0x7ff0
   15c48:	cmp	r7, r9
   15c4c:	bls	15c5c <__assert_fail@plt+0x466c>
   15c50:	cmp	r0, #22
   15c54:	mov	r7, r1
   15c58:	beq	15bf0 <__assert_fail@plt+0x4600>
   15c5c:	mov	r0, r8
   15c60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15c64:	mov	r0, r4
   15c68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15c6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c70:	add	fp, sp, #24
   15c74:	sub	sp, sp, #32
   15c78:	mov	r4, r2
   15c7c:	mov	r8, r0
   15c80:	ldr	r6, [fp, #12]
   15c84:	ldr	r7, [fp, #8]
   15c88:	cmp	r1, #0
   15c8c:	beq	15cb4 <__assert_fail@plt+0x46c4>
   15c90:	mov	r5, r1
   15c94:	str	r4, [sp]
   15c98:	str	r3, [sp, #4]
   15c9c:	movw	r2, #32280	; 0x7e18
   15ca0:	movt	r2, #1
   15ca4:	mov	r0, r8
   15ca8:	mov	r1, #1
   15cac:	mov	r3, r5
   15cb0:	b	15ccc <__assert_fail@plt+0x46dc>
   15cb4:	str	r3, [sp]
   15cb8:	movw	r2, #32292	; 0x7e24
   15cbc:	movt	r2, #1
   15cc0:	mov	r0, r8
   15cc4:	mov	r1, #1
   15cc8:	mov	r3, r4
   15ccc:	bl	11548 <__fprintf_chk@plt>
   15cd0:	movw	r1, #32299	; 0x7e2b
   15cd4:	movt	r1, #1
   15cd8:	mov	r0, #0
   15cdc:	mov	r2, #5
   15ce0:	bl	11374 <dcgettext@plt>
   15ce4:	mov	r3, r0
   15ce8:	movw	r0, #2022	; 0x7e6
   15cec:	str	r0, [sp]
   15cf0:	movw	r2, #33017	; 0x80f9
   15cf4:	movt	r2, #1
   15cf8:	mov	r0, r8
   15cfc:	mov	r1, #1
   15d00:	bl	11548 <__fprintf_chk@plt>
   15d04:	movw	r4, #31668	; 0x7bb4
   15d08:	movt	r4, #1
   15d0c:	mov	r0, r4
   15d10:	mov	r1, r8
   15d14:	bl	112d8 <fputs_unlocked@plt>
   15d18:	movw	r1, #32303	; 0x7e2f
   15d1c:	movt	r1, #1
   15d20:	mov	r0, #0
   15d24:	mov	r2, #5
   15d28:	bl	11374 <dcgettext@plt>
   15d2c:	mov	r2, r0
   15d30:	movw	r3, #32474	; 0x7eda
   15d34:	movt	r3, #1
   15d38:	mov	r0, r8
   15d3c:	mov	r1, #1
   15d40:	bl	11548 <__fprintf_chk@plt>
   15d44:	mov	r0, r4
   15d48:	mov	r1, r8
   15d4c:	bl	112d8 <fputs_unlocked@plt>
   15d50:	cmp	r6, #9
   15d54:	bhi	15d90 <__assert_fail@plt+0x47a0>
   15d58:	add	r0, pc, #0
   15d5c:	ldr	pc, [r0, r6, lsl #2]
   15d60:	andeq	r5, r1, r8, lsl #27
   15d64:	muleq	r1, ip, sp
   15d68:	andeq	r5, r1, ip, asr #27
   15d6c:	strdeq	r5, [r1], -r4
   15d70:	andeq	r5, r1, ip, lsl lr
   15d74:	andeq	r5, r1, r4, asr #28
   15d78:	andeq	r5, r1, ip, ror #28
   15d7c:	andeq	r5, r1, r4, lsr #29
   15d80:	andeq	r5, r1, r4, asr #30
   15d84:	andeq	r5, r1, ip, ror #29
   15d88:	sub	sp, fp, #24
   15d8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d90:	movw	r1, #32827	; 0x803b
   15d94:	movt	r1, #1
   15d98:	b	15ef4 <__assert_fail@plt+0x4904>
   15d9c:	movw	r1, #32508	; 0x7efc
   15da0:	movt	r1, #1
   15da4:	mov	r0, #0
   15da8:	mov	r2, #5
   15dac:	bl	11374 <dcgettext@plt>
   15db0:	mov	r2, r0
   15db4:	ldr	r3, [r7]
   15db8:	mov	r0, r8
   15dbc:	mov	r1, #1
   15dc0:	sub	sp, fp, #24
   15dc4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15dc8:	b	11548 <__fprintf_chk@plt>
   15dcc:	movw	r1, #32524	; 0x7f0c
   15dd0:	movt	r1, #1
   15dd4:	mov	r0, #0
   15dd8:	mov	r2, #5
   15ddc:	bl	11374 <dcgettext@plt>
   15de0:	mov	r2, r0
   15de4:	ldr	r3, [r7]
   15de8:	ldr	r0, [r7, #4]
   15dec:	str	r0, [sp]
   15df0:	b	15ee0 <__assert_fail@plt+0x48f0>
   15df4:	movw	r1, #32547	; 0x7f23
   15df8:	movt	r1, #1
   15dfc:	mov	r0, #0
   15e00:	mov	r2, #5
   15e04:	bl	11374 <dcgettext@plt>
   15e08:	mov	r2, r0
   15e0c:	ldr	r3, [r7]
   15e10:	ldmib	r7, {r0, r1}
   15e14:	stm	sp, {r0, r1}
   15e18:	b	15ee0 <__assert_fail@plt+0x48f0>
   15e1c:	movw	r1, #32575	; 0x7f3f
   15e20:	movt	r1, #1
   15e24:	mov	r0, #0
   15e28:	mov	r2, #5
   15e2c:	bl	11374 <dcgettext@plt>
   15e30:	mov	r2, r0
   15e34:	ldr	r3, [r7]
   15e38:	ldmib	r7, {r0, r1, r7}
   15e3c:	stm	sp, {r0, r1, r7}
   15e40:	b	15ee0 <__assert_fail@plt+0x48f0>
   15e44:	movw	r1, #32607	; 0x7f5f
   15e48:	movt	r1, #1
   15e4c:	mov	r0, #0
   15e50:	mov	r2, #5
   15e54:	bl	11374 <dcgettext@plt>
   15e58:	mov	r2, r0
   15e5c:	ldr	r3, [r7]
   15e60:	ldmib	r7, {r0, r1, r6, r7}
   15e64:	stm	sp, {r0, r1, r6, r7}
   15e68:	b	15ee0 <__assert_fail@plt+0x48f0>
   15e6c:	movw	r1, #32643	; 0x7f83
   15e70:	movt	r1, #1
   15e74:	mov	r0, #0
   15e78:	mov	r2, #5
   15e7c:	bl	11374 <dcgettext@plt>
   15e80:	mov	r2, r0
   15e84:	ldr	r3, [r7]
   15e88:	ldmib	r7, {r0, r1, r6}
   15e8c:	ldr	r5, [r7, #16]
   15e90:	ldr	r7, [r7, #20]
   15e94:	stm	sp, {r0, r1, r6}
   15e98:	str	r5, [sp, #12]
   15e9c:	str	r7, [sp, #16]
   15ea0:	b	15ee0 <__assert_fail@plt+0x48f0>
   15ea4:	movw	r1, #32683	; 0x7fab
   15ea8:	movt	r1, #1
   15eac:	mov	r0, #0
   15eb0:	mov	r2, #5
   15eb4:	bl	11374 <dcgettext@plt>
   15eb8:	mov	r2, r0
   15ebc:	ldr	r3, [r7]
   15ec0:	ldmib	r7, {r0, r1, r6}
   15ec4:	ldr	r5, [r7, #16]
   15ec8:	ldr	r4, [r7, #20]
   15ecc:	ldr	r7, [r7, #24]
   15ed0:	stm	sp, {r0, r1, r6}
   15ed4:	str	r5, [sp, #12]
   15ed8:	str	r4, [sp, #16]
   15edc:	str	r7, [sp, #20]
   15ee0:	mov	r0, r8
   15ee4:	mov	r1, #1
   15ee8:	b	15f94 <__assert_fail@plt+0x49a4>
   15eec:	movw	r1, #32775	; 0x8007
   15ef0:	movt	r1, #1
   15ef4:	mov	r0, #0
   15ef8:	mov	r2, #5
   15efc:	bl	11374 <dcgettext@plt>
   15f00:	mov	ip, r0
   15f04:	ldr	r3, [r7]
   15f08:	ldr	r0, [r7, #4]
   15f0c:	ldr	r1, [r7, #8]
   15f10:	ldr	r6, [r7, #12]
   15f14:	ldr	r5, [r7, #16]
   15f18:	ldr	r4, [r7, #20]
   15f1c:	ldr	r2, [r7, #24]
   15f20:	ldr	lr, [r7, #28]
   15f24:	ldr	r7, [r7, #32]
   15f28:	stm	sp, {r0, r1, r6}
   15f2c:	str	r5, [sp, #12]
   15f30:	str	r4, [sp, #16]
   15f34:	str	r2, [sp, #20]
   15f38:	str	lr, [sp, #24]
   15f3c:	str	r7, [sp, #28]
   15f40:	b	15f88 <__assert_fail@plt+0x4998>
   15f44:	movw	r1, #32727	; 0x7fd7
   15f48:	movt	r1, #1
   15f4c:	mov	r0, #0
   15f50:	mov	r2, #5
   15f54:	bl	11374 <dcgettext@plt>
   15f58:	mov	ip, r0
   15f5c:	ldr	r3, [r7]
   15f60:	ldmib	r7, {r0, r1, r6}
   15f64:	ldr	r5, [r7, #16]
   15f68:	ldr	r4, [r7, #20]
   15f6c:	ldr	r2, [r7, #24]
   15f70:	ldr	r7, [r7, #28]
   15f74:	stm	sp, {r0, r1, r6}
   15f78:	str	r5, [sp, #12]
   15f7c:	str	r4, [sp, #16]
   15f80:	str	r2, [sp, #20]
   15f84:	str	r7, [sp, #24]
   15f88:	mov	r0, r8
   15f8c:	mov	r1, #1
   15f90:	mov	r2, ip
   15f94:	bl	11548 <__fprintf_chk@plt>
   15f98:	sub	sp, fp, #24
   15f9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fa0:	push	{r4, sl, fp, lr}
   15fa4:	add	fp, sp, #8
   15fa8:	sub	sp, sp, #8
   15fac:	mov	lr, #0
   15fb0:	ldr	ip, [fp, #8]
   15fb4:	ldr	r4, [ip, lr, lsl #2]
   15fb8:	add	lr, lr, #1
   15fbc:	cmp	r4, #0
   15fc0:	bne	15fb4 <__assert_fail@plt+0x49c4>
   15fc4:	sub	r4, lr, #1
   15fc8:	str	ip, [sp]
   15fcc:	str	r4, [sp, #4]
   15fd0:	bl	15c6c <__assert_fail@plt+0x467c>
   15fd4:	sub	sp, fp, #8
   15fd8:	pop	{r4, sl, fp, pc}
   15fdc:	push	{r4, r5, fp, lr}
   15fe0:	add	fp, sp, #8
   15fe4:	sub	sp, sp, #48	; 0x30
   15fe8:	mov	ip, #0
   15fec:	ldr	r4, [fp, #8]
   15ff0:	add	lr, sp, #8
   15ff4:	ldr	r5, [r4]
   15ff8:	str	r5, [lr, ip, lsl #2]
   15ffc:	cmp	r5, #0
   16000:	beq	16018 <__assert_fail@plt+0x4a28>
   16004:	add	ip, ip, #1
   16008:	add	r4, r4, #4
   1600c:	cmp	ip, #10
   16010:	bne	15ff4 <__assert_fail@plt+0x4a04>
   16014:	mov	ip, #10
   16018:	str	lr, [sp]
   1601c:	str	ip, [sp, #4]
   16020:	bl	15c6c <__assert_fail@plt+0x467c>
   16024:	sub	sp, fp, #8
   16028:	pop	{r4, r5, fp, pc}
   1602c:	push	{fp, lr}
   16030:	mov	fp, sp
   16034:	sub	sp, sp, #8
   16038:	add	ip, fp, #8
   1603c:	str	ip, [sp, #4]
   16040:	str	ip, [sp]
   16044:	bl	15fdc <__assert_fail@plt+0x49ec>
   16048:	mov	sp, fp
   1604c:	pop	{fp, pc}
   16050:	push	{fp, lr}
   16054:	mov	fp, sp
   16058:	movw	r0, #37268	; 0x9194
   1605c:	movt	r0, #2
   16060:	ldr	r1, [r0]
   16064:	movw	r0, #31668	; 0x7bb4
   16068:	movt	r0, #1
   1606c:	bl	112d8 <fputs_unlocked@plt>
   16070:	movw	r1, #32887	; 0x8077
   16074:	movt	r1, #1
   16078:	mov	r0, #0
   1607c:	mov	r2, #5
   16080:	bl	11374 <dcgettext@plt>
   16084:	mov	r1, r0
   16088:	movw	r2, #32907	; 0x808b
   1608c:	movt	r2, #1
   16090:	mov	r0, #1
   16094:	bl	11530 <__printf_chk@plt>
   16098:	movw	r1, #32929	; 0x80a1
   1609c:	movt	r1, #1
   160a0:	mov	r0, #0
   160a4:	mov	r2, #5
   160a8:	bl	11374 <dcgettext@plt>
   160ac:	mov	r1, r0
   160b0:	movw	r2, #30938	; 0x78da
   160b4:	movt	r2, #1
   160b8:	movw	r3, #31477	; 0x7af5
   160bc:	movt	r3, #1
   160c0:	mov	r0, #1
   160c4:	bl	11530 <__printf_chk@plt>
   160c8:	movw	r1, #32949	; 0x80b5
   160cc:	movt	r1, #1
   160d0:	mov	r0, #0
   160d4:	mov	r2, #5
   160d8:	bl	11374 <dcgettext@plt>
   160dc:	mov	r1, r0
   160e0:	movw	r2, #32988	; 0x80dc
   160e4:	movt	r2, #1
   160e8:	mov	r0, #1
   160ec:	pop	{fp, lr}
   160f0:	b	11530 <__printf_chk@plt>
   160f4:	b	160f8 <__assert_fail@plt+0x4b08>
   160f8:	push	{r4, r5, r6, sl, fp, lr}
   160fc:	add	fp, sp, #16
   16100:	mov	r4, r2
   16104:	mov	r5, r1
   16108:	mov	r6, r0
   1610c:	bl	16e00 <_obstack_memory_used@@Base+0x78>
   16110:	cmp	r0, #0
   16114:	popne	{r4, r5, r6, sl, fp, pc}
   16118:	cmp	r6, #0
   1611c:	beq	16130 <__assert_fail@plt+0x4b40>
   16120:	cmp	r5, #0
   16124:	cmpne	r4, #0
   16128:	bne	16130 <__assert_fail@plt+0x4b40>
   1612c:	pop	{r4, r5, r6, sl, fp, pc}
   16130:	bl	164bc <__assert_fail@plt+0x4ecc>
   16134:	push	{fp, lr}
   16138:	mov	fp, sp
   1613c:	bl	1655c <__assert_fail@plt+0x4f6c>
   16140:	pop	{fp, lr}
   16144:	b	16148 <__assert_fail@plt+0x4b58>
   16148:	cmp	r0, #0
   1614c:	bxne	lr
   16150:	push	{fp, lr}
   16154:	mov	fp, sp
   16158:	bl	164bc <__assert_fail@plt+0x4ecc>
   1615c:	push	{fp, lr}
   16160:	mov	fp, sp
   16164:	bl	16a20 <__assert_fail@plt+0x5430>
   16168:	pop	{fp, lr}
   1616c:	b	16148 <__assert_fail@plt+0x4b58>
   16170:	b	16134 <__assert_fail@plt+0x4b44>
   16174:	push	{r4, r5, fp, lr}
   16178:	add	fp, sp, #8
   1617c:	mov	r4, r1
   16180:	mov	r5, r0
   16184:	bl	1658c <__assert_fail@plt+0x4f9c>
   16188:	cmp	r0, #0
   1618c:	popne	{r4, r5, fp, pc}
   16190:	cmp	r5, #0
   16194:	beq	161a4 <__assert_fail@plt+0x4bb4>
   16198:	cmp	r4, #0
   1619c:	bne	161a4 <__assert_fail@plt+0x4bb4>
   161a0:	pop	{r4, r5, fp, pc}
   161a4:	bl	164bc <__assert_fail@plt+0x4ecc>
   161a8:	push	{fp, lr}
   161ac:	mov	fp, sp
   161b0:	bl	16a24 <__assert_fail@plt+0x5434>
   161b4:	pop	{fp, lr}
   161b8:	b	16148 <__assert_fail@plt+0x4b58>
   161bc:	push	{fp, lr}
   161c0:	mov	fp, sp
   161c4:	bl	16a34 <__assert_fail@plt+0x5444>
   161c8:	pop	{fp, lr}
   161cc:	b	16148 <__assert_fail@plt+0x4b58>
   161d0:	mov	r2, r1
   161d4:	mov	r1, r0
   161d8:	mov	r0, #0
   161dc:	b	160f8 <__assert_fail@plt+0x4b08>
   161e0:	mov	r2, r1
   161e4:	mov	r1, r0
   161e8:	mov	r0, #0
   161ec:	b	161bc <__assert_fail@plt+0x4bcc>
   161f0:	mov	r2, #1
   161f4:	b	161f8 <__assert_fail@plt+0x4c08>
   161f8:	push	{r4, r5, fp, lr}
   161fc:	add	fp, sp, #8
   16200:	mov	r4, r1
   16204:	ldr	r5, [r1]
   16208:	cmp	r0, #0
   1620c:	beq	16224 <__assert_fail@plt+0x4c34>
   16210:	mov	r1, #1
   16214:	add	r1, r1, r5, lsr #1
   16218:	adds	r5, r5, r1
   1621c:	bcc	1623c <__assert_fail@plt+0x4c4c>
   16220:	bl	164bc <__assert_fail@plt+0x4ecc>
   16224:	cmp	r5, #0
   16228:	bne	1623c <__assert_fail@plt+0x4c4c>
   1622c:	mov	r1, #64	; 0x40
   16230:	udiv	r5, r1, r2
   16234:	cmp	r2, #64	; 0x40
   16238:	addhi	r5, r5, #1
   1623c:	mov	r1, r5
   16240:	bl	160f8 <__assert_fail@plt+0x4b08>
   16244:	str	r5, [r4]
   16248:	pop	{r4, r5, fp, pc}
   1624c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16250:	add	fp, sp, #24
   16254:	mov	r8, r1
   16258:	ldr	r6, [r1]
   1625c:	add	r1, r6, r6, asr #1
   16260:	cmp	r1, r6
   16264:	mvnvs	r1, #-2147483648	; 0x80000000
   16268:	cmp	r1, r3
   1626c:	mov	r5, r1
   16270:	movgt	r5, r3
   16274:	cmn	r3, #1
   16278:	movle	r5, r1
   1627c:	ldr	r4, [fp, #8]
   16280:	cmn	r4, #1
   16284:	ble	162ac <__assert_fail@plt+0x4cbc>
   16288:	cmp	r4, #0
   1628c:	beq	16300 <__assert_fail@plt+0x4d10>
   16290:	cmn	r5, #1
   16294:	ble	162d4 <__assert_fail@plt+0x4ce4>
   16298:	mvn	r7, #-2147483648	; 0x80000000
   1629c:	udiv	r1, r7, r4
   162a0:	cmp	r1, r5
   162a4:	bge	16300 <__assert_fail@plt+0x4d10>
   162a8:	b	16310 <__assert_fail@plt+0x4d20>
   162ac:	cmn	r5, #1
   162b0:	ble	162f0 <__assert_fail@plt+0x4d00>
   162b4:	cmn	r4, #1
   162b8:	beq	16300 <__assert_fail@plt+0x4d10>
   162bc:	mov	r1, #-2147483648	; 0x80000000
   162c0:	sdiv	r1, r1, r4
   162c4:	mvn	r7, #-2147483648	; 0x80000000
   162c8:	cmp	r1, r5
   162cc:	bge	16300 <__assert_fail@plt+0x4d10>
   162d0:	b	16310 <__assert_fail@plt+0x4d20>
   162d4:	beq	16300 <__assert_fail@plt+0x4d10>
   162d8:	mov	r1, #-2147483648	; 0x80000000
   162dc:	sdiv	r1, r1, r5
   162e0:	mvn	r7, #-2147483648	; 0x80000000
   162e4:	cmp	r1, r4
   162e8:	bge	16300 <__assert_fail@plt+0x4d10>
   162ec:	b	16310 <__assert_fail@plt+0x4d20>
   162f0:	mvn	r7, #-2147483648	; 0x80000000
   162f4:	sdiv	r1, r7, r4
   162f8:	cmp	r5, r1
   162fc:	blt	16310 <__assert_fail@plt+0x4d20>
   16300:	mul	r1, r5, r4
   16304:	mov	r7, #64	; 0x40
   16308:	cmp	r1, #63	; 0x3f
   1630c:	bgt	16318 <__assert_fail@plt+0x4d28>
   16310:	sdiv	r5, r7, r4
   16314:	mul	r1, r5, r4
   16318:	cmp	r0, #0
   1631c:	moveq	r7, #0
   16320:	streq	r7, [r8]
   16324:	sub	r7, r5, r6
   16328:	cmp	r7, r2
   1632c:	bge	163d8 <__assert_fail@plt+0x4de8>
   16330:	add	r5, r6, r2
   16334:	mov	r1, #0
   16338:	cmp	r5, r3
   1633c:	mov	r2, #0
   16340:	movwgt	r2, #1
   16344:	cmn	r3, #1
   16348:	movwgt	r1, #1
   1634c:	cmp	r5, r6
   16350:	bvs	163c0 <__assert_fail@plt+0x4dd0>
   16354:	ands	r1, r1, r2
   16358:	bne	163c0 <__assert_fail@plt+0x4dd0>
   1635c:	cmn	r4, #1
   16360:	ble	16388 <__assert_fail@plt+0x4d98>
   16364:	cmp	r4, #0
   16368:	beq	163d4 <__assert_fail@plt+0x4de4>
   1636c:	cmn	r5, #1
   16370:	ble	163ac <__assert_fail@plt+0x4dbc>
   16374:	mvn	r1, #-2147483648	; 0x80000000
   16378:	udiv	r1, r1, r4
   1637c:	cmp	r1, r5
   16380:	bge	163d4 <__assert_fail@plt+0x4de4>
   16384:	b	163c0 <__assert_fail@plt+0x4dd0>
   16388:	cmn	r5, #1
   1638c:	ble	163c4 <__assert_fail@plt+0x4dd4>
   16390:	cmn	r4, #1
   16394:	beq	163d4 <__assert_fail@plt+0x4de4>
   16398:	mov	r1, #-2147483648	; 0x80000000
   1639c:	sdiv	r1, r1, r4
   163a0:	cmp	r1, r5
   163a4:	bge	163d4 <__assert_fail@plt+0x4de4>
   163a8:	b	163c0 <__assert_fail@plt+0x4dd0>
   163ac:	beq	163d4 <__assert_fail@plt+0x4de4>
   163b0:	mov	r1, #-2147483648	; 0x80000000
   163b4:	sdiv	r1, r1, r5
   163b8:	cmp	r1, r4
   163bc:	bge	163d4 <__assert_fail@plt+0x4de4>
   163c0:	bl	164bc <__assert_fail@plt+0x4ecc>
   163c4:	mvn	r1, #-2147483648	; 0x80000000
   163c8:	sdiv	r1, r1, r4
   163cc:	cmp	r5, r1
   163d0:	blt	163c0 <__assert_fail@plt+0x4dd0>
   163d4:	mul	r1, r5, r4
   163d8:	bl	16174 <__assert_fail@plt+0x4b84>
   163dc:	str	r5, [r8]
   163e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   163e4:	mov	r1, #1
   163e8:	b	163ec <__assert_fail@plt+0x4dfc>
   163ec:	push	{fp, lr}
   163f0:	mov	fp, sp
   163f4:	bl	16508 <__assert_fail@plt+0x4f18>
   163f8:	pop	{fp, lr}
   163fc:	b	16148 <__assert_fail@plt+0x4b58>
   16400:	mov	r1, #1
   16404:	b	16408 <__assert_fail@plt+0x4e18>
   16408:	push	{fp, lr}
   1640c:	mov	fp, sp
   16410:	bl	16a30 <__assert_fail@plt+0x5440>
   16414:	pop	{fp, lr}
   16418:	b	16148 <__assert_fail@plt+0x4b58>
   1641c:	push	{r4, r5, fp, lr}
   16420:	add	fp, sp, #8
   16424:	mov	r4, r1
   16428:	mov	r5, r0
   1642c:	mov	r0, r1
   16430:	bl	16134 <__assert_fail@plt+0x4b44>
   16434:	mov	r1, r5
   16438:	mov	r2, r4
   1643c:	pop	{r4, r5, fp, lr}
   16440:	b	1135c <memcpy@plt>
   16444:	push	{r4, r5, fp, lr}
   16448:	add	fp, sp, #8
   1644c:	mov	r4, r1
   16450:	mov	r5, r0
   16454:	mov	r0, r1
   16458:	bl	1615c <__assert_fail@plt+0x4b6c>
   1645c:	mov	r1, r5
   16460:	mov	r2, r4
   16464:	pop	{r4, r5, fp, lr}
   16468:	b	1135c <memcpy@plt>
   1646c:	push	{r4, r5, fp, lr}
   16470:	add	fp, sp, #8
   16474:	mov	r4, r1
   16478:	mov	r5, r0
   1647c:	add	r0, r1, #1
   16480:	bl	1615c <__assert_fail@plt+0x4b6c>
   16484:	mov	r1, #0
   16488:	strb	r1, [r0, r4]
   1648c:	mov	r1, r5
   16490:	mov	r2, r4
   16494:	pop	{r4, r5, fp, lr}
   16498:	b	1135c <memcpy@plt>
   1649c:	push	{r4, sl, fp, lr}
   164a0:	add	fp, sp, #8
   164a4:	mov	r4, r0
   164a8:	bl	114c4 <strlen@plt>
   164ac:	add	r1, r0, #1
   164b0:	mov	r0, r4
   164b4:	pop	{r4, sl, fp, lr}
   164b8:	b	1641c <__assert_fail@plt+0x4e2c>
   164bc:	push	{fp, lr}
   164c0:	mov	fp, sp
   164c4:	movw	r0, #37164	; 0x912c
   164c8:	movt	r0, #2
   164cc:	ldr	r4, [r0]
   164d0:	movw	r1, #33064	; 0x8128
   164d4:	movt	r1, #1
   164d8:	mov	r0, #0
   164dc:	mov	r2, #5
   164e0:	bl	11374 <dcgettext@plt>
   164e4:	mov	r3, r0
   164e8:	movw	r2, #31996	; 0x7cfc
   164ec:	movt	r2, #1
   164f0:	mov	r0, r4
   164f4:	mov	r1, #0
   164f8:	bl	1141c <error@plt>
   164fc:	bl	115cc <abort@plt>
   16500:	bx	lr
   16504:	b	165e8 <__assert_fail@plt+0x4ff8>
   16508:	clz	r2, r1
   1650c:	lsr	r2, r2, #5
   16510:	clz	r3, r0
   16514:	lsr	r3, r3, #5
   16518:	orrs	r2, r3, r2
   1651c:	movwne	r1, #1
   16520:	movwne	r0, #1
   16524:	cmp	r1, #0
   16528:	beq	16558 <__assert_fail@plt+0x4f68>
   1652c:	mvn	r2, #-2147483648	; 0x80000000
   16530:	udiv	r2, r2, r1
   16534:	cmp	r2, r0
   16538:	bcs	16558 <__assert_fail@plt+0x4f68>
   1653c:	push	{fp, lr}
   16540:	mov	fp, sp
   16544:	bl	114e8 <__errno_location@plt>
   16548:	mov	r1, #12
   1654c:	str	r1, [r0]
   16550:	mov	r0, #0
   16554:	pop	{fp, pc}
   16558:	b	112cc <calloc@plt>
   1655c:	cmp	r0, #0
   16560:	movweq	r0, #1
   16564:	cmn	r0, #1
   16568:	ble	16570 <__assert_fail@plt+0x4f80>
   1656c:	b	1144c <malloc@plt>
   16570:	push	{fp, lr}
   16574:	mov	fp, sp
   16578:	bl	114e8 <__errno_location@plt>
   1657c:	mov	r1, #12
   16580:	str	r1, [r0]
   16584:	mov	r0, #0
   16588:	pop	{fp, pc}
   1658c:	push	{fp, lr}
   16590:	mov	fp, sp
   16594:	cmp	r0, #0
   16598:	beq	165b4 <__assert_fail@plt+0x4fc4>
   1659c:	cmp	r1, #0
   165a0:	beq	165c0 <__assert_fail@plt+0x4fd0>
   165a4:	cmn	r1, #1
   165a8:	ble	165cc <__assert_fail@plt+0x4fdc>
   165ac:	pop	{fp, lr}
   165b0:	b	1138c <realloc@plt>
   165b4:	mov	r0, r1
   165b8:	pop	{fp, lr}
   165bc:	b	1655c <__assert_fail@plt+0x4f6c>
   165c0:	bl	13948 <__assert_fail@plt+0x2358>
   165c4:	mov	r0, #0
   165c8:	pop	{fp, pc}
   165cc:	bl	114e8 <__errno_location@plt>
   165d0:	mov	r1, #12
   165d4:	str	r1, [r0]
   165d8:	mov	r0, #0
   165dc:	pop	{fp, pc}
   165e0:	mov	r0, #0
   165e4:	bx	lr
   165e8:	mov	r0, #0
   165ec:	bx	lr
   165f0:	mov	r1, r0
   165f4:	sub	r2, r0, #65	; 0x41
   165f8:	mov	r0, #1
   165fc:	cmp	r2, #26
   16600:	subcs	r2, r1, #97	; 0x61
   16604:	cmpcs	r2, #26
   16608:	bcs	16610 <__assert_fail@plt+0x5020>
   1660c:	bx	lr
   16610:	sub	r1, r1, #48	; 0x30
   16614:	cmp	r1, #10
   16618:	movcs	r0, #0
   1661c:	bx	lr
   16620:	mov	r1, r0
   16624:	sub	r2, r0, #65	; 0x41
   16628:	mov	r0, #1
   1662c:	cmp	r2, #26
   16630:	subcs	r1, r1, #97	; 0x61
   16634:	cmpcs	r1, #26
   16638:	movcs	r0, #0
   1663c:	bx	lr
   16640:	mov	r1, #0
   16644:	cmp	r0, #128	; 0x80
   16648:	movwcc	r1, #1
   1664c:	mov	r0, r1
   16650:	bx	lr
   16654:	sub	r1, r0, #9
   16658:	clz	r1, r1
   1665c:	lsr	r1, r1, #5
   16660:	sub	r0, r0, #32
   16664:	clz	r0, r0
   16668:	lsr	r0, r0, #5
   1666c:	orr	r0, r0, r1
   16670:	bx	lr
   16674:	mov	r1, r0
   16678:	mov	r0, #1
   1667c:	cmp	r1, #32
   16680:	bxcc	lr
   16684:	cmp	r1, #127	; 0x7f
   16688:	movne	r0, #0
   1668c:	bx	lr
   16690:	sub	r1, r0, #48	; 0x30
   16694:	mov	r0, #0
   16698:	cmp	r1, #10
   1669c:	movwcc	r0, #1
   166a0:	bx	lr
   166a4:	sub	r1, r0, #33	; 0x21
   166a8:	mov	r0, #0
   166ac:	cmp	r1, #94	; 0x5e
   166b0:	movwcc	r0, #1
   166b4:	bx	lr
   166b8:	sub	r1, r0, #97	; 0x61
   166bc:	mov	r0, #0
   166c0:	cmp	r1, #26
   166c4:	movwcc	r0, #1
   166c8:	bx	lr
   166cc:	sub	r1, r0, #32
   166d0:	mov	r0, #0
   166d4:	cmp	r1, #95	; 0x5f
   166d8:	movwcc	r0, #1
   166dc:	bx	lr
   166e0:	sub	r1, r0, #33	; 0x21
   166e4:	cmp	r1, #93	; 0x5d
   166e8:	bhi	16874 <__assert_fail@plt+0x5284>
   166ec:	mov	r0, #1
   166f0:	add	r2, pc, #0
   166f4:	ldr	pc, [r2, r1, lsl #2]
   166f8:	andeq	r6, r1, r0, ror r8
   166fc:	andeq	r6, r1, r0, ror r8
   16700:	andeq	r6, r1, r0, ror r8
   16704:	andeq	r6, r1, r0, ror r8
   16708:	andeq	r6, r1, r0, ror r8
   1670c:	andeq	r6, r1, r0, ror r8
   16710:	andeq	r6, r1, r0, ror r8
   16714:	andeq	r6, r1, r0, ror r8
   16718:	andeq	r6, r1, r0, ror r8
   1671c:	andeq	r6, r1, r0, ror r8
   16720:	andeq	r6, r1, r0, ror r8
   16724:	andeq	r6, r1, r0, ror r8
   16728:	andeq	r6, r1, r0, ror r8
   1672c:	andeq	r6, r1, r0, ror r8
   16730:	andeq	r6, r1, r0, ror r8
   16734:	andeq	r6, r1, r4, ror r8
   16738:	andeq	r6, r1, r4, ror r8
   1673c:	andeq	r6, r1, r4, ror r8
   16740:	andeq	r6, r1, r4, ror r8
   16744:	andeq	r6, r1, r4, ror r8
   16748:	andeq	r6, r1, r4, ror r8
   1674c:	andeq	r6, r1, r4, ror r8
   16750:	andeq	r6, r1, r4, ror r8
   16754:	andeq	r6, r1, r4, ror r8
   16758:	andeq	r6, r1, r4, ror r8
   1675c:	andeq	r6, r1, r0, ror r8
   16760:	andeq	r6, r1, r0, ror r8
   16764:	andeq	r6, r1, r0, ror r8
   16768:	andeq	r6, r1, r0, ror r8
   1676c:	andeq	r6, r1, r0, ror r8
   16770:	andeq	r6, r1, r0, ror r8
   16774:	andeq	r6, r1, r0, ror r8
   16778:	andeq	r6, r1, r4, ror r8
   1677c:	andeq	r6, r1, r4, ror r8
   16780:	andeq	r6, r1, r4, ror r8
   16784:	andeq	r6, r1, r4, ror r8
   16788:	andeq	r6, r1, r4, ror r8
   1678c:	andeq	r6, r1, r4, ror r8
   16790:	andeq	r6, r1, r4, ror r8
   16794:	andeq	r6, r1, r4, ror r8
   16798:	andeq	r6, r1, r4, ror r8
   1679c:	andeq	r6, r1, r4, ror r8
   167a0:	andeq	r6, r1, r4, ror r8
   167a4:	andeq	r6, r1, r4, ror r8
   167a8:	andeq	r6, r1, r4, ror r8
   167ac:	andeq	r6, r1, r4, ror r8
   167b0:	andeq	r6, r1, r4, ror r8
   167b4:	andeq	r6, r1, r4, ror r8
   167b8:	andeq	r6, r1, r4, ror r8
   167bc:	andeq	r6, r1, r4, ror r8
   167c0:	andeq	r6, r1, r4, ror r8
   167c4:	andeq	r6, r1, r4, ror r8
   167c8:	andeq	r6, r1, r4, ror r8
   167cc:	andeq	r6, r1, r4, ror r8
   167d0:	andeq	r6, r1, r4, ror r8
   167d4:	andeq	r6, r1, r4, ror r8
   167d8:	andeq	r6, r1, r4, ror r8
   167dc:	andeq	r6, r1, r4, ror r8
   167e0:	andeq	r6, r1, r0, ror r8
   167e4:	andeq	r6, r1, r0, ror r8
   167e8:	andeq	r6, r1, r0, ror r8
   167ec:	andeq	r6, r1, r0, ror r8
   167f0:	andeq	r6, r1, r0, ror r8
   167f4:	andeq	r6, r1, r0, ror r8
   167f8:	andeq	r6, r1, r4, ror r8
   167fc:	andeq	r6, r1, r4, ror r8
   16800:	andeq	r6, r1, r4, ror r8
   16804:	andeq	r6, r1, r4, ror r8
   16808:	andeq	r6, r1, r4, ror r8
   1680c:	andeq	r6, r1, r4, ror r8
   16810:	andeq	r6, r1, r4, ror r8
   16814:	andeq	r6, r1, r4, ror r8
   16818:	andeq	r6, r1, r4, ror r8
   1681c:	andeq	r6, r1, r4, ror r8
   16820:	andeq	r6, r1, r4, ror r8
   16824:	andeq	r6, r1, r4, ror r8
   16828:	andeq	r6, r1, r4, ror r8
   1682c:	andeq	r6, r1, r4, ror r8
   16830:	andeq	r6, r1, r4, ror r8
   16834:	andeq	r6, r1, r4, ror r8
   16838:	andeq	r6, r1, r4, ror r8
   1683c:	andeq	r6, r1, r4, ror r8
   16840:	andeq	r6, r1, r4, ror r8
   16844:	andeq	r6, r1, r4, ror r8
   16848:	andeq	r6, r1, r4, ror r8
   1684c:	andeq	r6, r1, r4, ror r8
   16850:	andeq	r6, r1, r4, ror r8
   16854:	andeq	r6, r1, r4, ror r8
   16858:	andeq	r6, r1, r4, ror r8
   1685c:	andeq	r6, r1, r4, ror r8
   16860:	andeq	r6, r1, r0, ror r8
   16864:	andeq	r6, r1, r0, ror r8
   16868:	andeq	r6, r1, r0, ror r8
   1686c:	andeq	r6, r1, r0, ror r8
   16870:	bx	lr
   16874:	mov	r0, #0
   16878:	bx	lr
   1687c:	sub	r0, r0, #9
   16880:	cmp	r0, #23
   16884:	movhi	r0, #0
   16888:	bxhi	lr
   1688c:	bic	r0, r0, #-16777216	; 0xff000000
   16890:	movw	r1, #31
   16894:	movt	r1, #128	; 0x80
   16898:	mov	r2, #1
   1689c:	and	r0, r2, r1, lsr r0
   168a0:	bx	lr
   168a4:	sub	r1, r0, #65	; 0x41
   168a8:	mov	r0, #0
   168ac:	cmp	r1, #26
   168b0:	movwcc	r0, #1
   168b4:	bx	lr
   168b8:	mov	r1, r0
   168bc:	sub	r2, r0, #48	; 0x30
   168c0:	mov	r0, #1
   168c4:	cmp	r2, #22
   168c8:	bhi	168e0 <__assert_fail@plt+0x52f0>
   168cc:	mov	ip, #1
   168d0:	movw	r3, #1023	; 0x3ff
   168d4:	movt	r3, #126	; 0x7e
   168d8:	tst	r3, ip, lsl r2
   168dc:	bxne	lr
   168e0:	sub	r1, r1, #97	; 0x61
   168e4:	cmp	r1, #6
   168e8:	movcs	r0, #0
   168ec:	bxcs	lr
   168f0:	bx	lr
   168f4:	sub	r1, r0, #65	; 0x41
   168f8:	cmp	r1, #26
   168fc:	addcc	r0, r0, #32
   16900:	bx	lr
   16904:	sub	r1, r0, #97	; 0x61
   16908:	cmp	r1, #26
   1690c:	subcc	r0, r0, #32
   16910:	bx	lr
   16914:	push	{r4, r5, r6, sl, fp, lr}
   16918:	add	fp, sp, #16
   1691c:	mov	r4, r0
   16920:	bl	113f8 <__fpending@plt>
   16924:	mov	r5, r0
   16928:	mov	r0, r4
   1692c:	bl	11404 <ferror_unlocked@plt>
   16930:	mov	r6, r0
   16934:	mov	r0, r4
   16938:	bl	13840 <__assert_fail@plt+0x2250>
   1693c:	cmp	r6, #0
   16940:	beq	16964 <__assert_fail@plt+0x5374>
   16944:	mvn	r4, #0
   16948:	cmp	r0, #0
   1694c:	bne	16990 <__assert_fail@plt+0x53a0>
   16950:	bl	114e8 <__errno_location@plt>
   16954:	mov	r1, #0
   16958:	str	r1, [r0]
   1695c:	mov	r0, r4
   16960:	pop	{r4, r5, r6, sl, fp, pc}
   16964:	cmp	r0, #0
   16968:	mov	r4, r0
   1696c:	mvnne	r4, #0
   16970:	cmp	r5, #0
   16974:	bne	16990 <__assert_fail@plt+0x53a0>
   16978:	cmp	r0, #0
   1697c:	beq	16990 <__assert_fail@plt+0x53a0>
   16980:	bl	114e8 <__errno_location@plt>
   16984:	ldr	r0, [r0]
   16988:	subs	r4, r0, #9
   1698c:	mvnne	r4, #0
   16990:	mov	r0, r4
   16994:	pop	{r4, r5, r6, sl, fp, pc}
   16998:	push	{r4, sl, fp, lr}
   1699c:	add	fp, sp, #8
   169a0:	sub	sp, sp, #264	; 0x108
   169a4:	add	r1, sp, #7
   169a8:	movw	r2, #257	; 0x101
   169ac:	bl	16e3c <_obstack_memory_used@@Base+0xb4>
   169b0:	mov	r4, #0
   169b4:	cmp	r0, #0
   169b8:	bne	169f8 <__assert_fail@plt+0x5408>
   169bc:	add	r0, sp, #7
   169c0:	movw	r1, #33081	; 0x8139
   169c4:	movt	r1, #1
   169c8:	mov	r2, #2
   169cc:	bl	114b8 <bcmp@plt>
   169d0:	cmp	r0, #0
   169d4:	beq	169f8 <__assert_fail@plt+0x5408>
   169d8:	add	r0, sp, #7
   169dc:	movw	r1, #33083	; 0x813b
   169e0:	movt	r1, #1
   169e4:	mov	r2, #6
   169e8:	bl	114b8 <bcmp@plt>
   169ec:	mov	r4, r0
   169f0:	cmp	r0, #0
   169f4:	movwne	r4, #1
   169f8:	mov	r0, r4
   169fc:	sub	sp, fp, #8
   16a00:	pop	{r4, sl, fp, pc}
   16a04:	push	{fp, lr}
   16a08:	mov	fp, sp
   16a0c:	bl	114e8 <__errno_location@plt>
   16a10:	mov	r1, #12
   16a14:	str	r1, [r0]
   16a18:	mov	r0, #0
   16a1c:	pop	{fp, pc}
   16a20:	b	1655c <__assert_fail@plt+0x4f6c>
   16a24:	cmp	r1, #0
   16a28:	orreq	r1, r1, #1
   16a2c:	b	1658c <__assert_fail@plt+0x4f9c>
   16a30:	b	16508 <__assert_fail@plt+0x4f18>
   16a34:	clz	r3, r2
   16a38:	lsr	ip, r3, #5
   16a3c:	clz	r3, r1
   16a40:	lsr	r3, r3, #5
   16a44:	orrs	r3, r3, ip
   16a48:	movwne	r1, #1
   16a4c:	movwne	r2, #1
   16a50:	b	16e00 <_obstack_memory_used@@Base+0x78>
   16a54:	push	{fp, lr}
   16a58:	mov	fp, sp
   16a5c:	mov	r0, #14
   16a60:	bl	11584 <nl_langinfo@plt>
   16a64:	movw	r1, #31669	; 0x7bb5
   16a68:	movt	r1, #1
   16a6c:	cmp	r0, #0
   16a70:	movne	r1, r0
   16a74:	ldrb	r2, [r1]
   16a78:	movw	r0, #33089	; 0x8141
   16a7c:	movt	r0, #1
   16a80:	cmp	r2, #0
   16a84:	movne	r0, r1
   16a88:	pop	{fp, pc}

00016a8c <_obstack_begin@@Base>:
   16a8c:	push	{fp, lr}
   16a90:	mov	fp, sp
   16a94:	str	r3, [r0, #28]
   16a98:	ldr	r3, [fp, #8]
   16a9c:	str	r3, [r0, #32]
   16aa0:	ldrb	r3, [r0, #40]	; 0x28
   16aa4:	and	r3, r3, #254	; 0xfe
   16aa8:	strb	r3, [r0, #40]	; 0x28
   16aac:	bl	16ab8 <_obstack_begin@@Base+0x2c>
   16ab0:	mov	r0, #1
   16ab4:	pop	{fp, pc}
   16ab8:	push	{r4, r5, r6, sl, fp, lr}
   16abc:	add	fp, sp, #16
   16ac0:	mov	r5, r2
   16ac4:	mov	r4, r0
   16ac8:	cmp	r1, #0
   16acc:	movweq	r1, #4072	; 0xfe8
   16ad0:	str	r1, [r0]
   16ad4:	cmp	r2, #0
   16ad8:	movweq	r5, #8
   16adc:	sub	r6, r5, #1
   16ae0:	str	r6, [r0, #24]
   16ae4:	bl	16c8c <_obstack_newchunk@@Base+0x118>
   16ae8:	str	r0, [r4, #4]
   16aec:	cmp	r0, #0
   16af0:	addne	r1, r0, r6
   16af4:	addne	r1, r1, #8
   16af8:	rsbne	r2, r5, #0
   16afc:	andne	r1, r1, r2
   16b00:	strne	r1, [r4, #12]
   16b04:	strne	r1, [r4, #8]
   16b08:	ldrne	r1, [r4]
   16b0c:	addne	r1, r0, r1
   16b10:	strne	r1, [r0]
   16b14:	strne	r1, [r4, #16]
   16b18:	movne	r1, #0
   16b1c:	strne	r1, [r0, #4]
   16b20:	ldrbne	r0, [r4, #40]	; 0x28
   16b24:	andne	r0, r0, #249	; 0xf9
   16b28:	strbne	r0, [r4, #40]	; 0x28
   16b2c:	popne	{r4, r5, r6, sl, fp, pc}
   16b30:	movw	r0, #37232	; 0x9170
   16b34:	movt	r0, #2
   16b38:	ldr	r0, [r0]
   16b3c:	blx	r0

00016b40 <_obstack_begin_1@@Base>:
   16b40:	push	{fp, lr}
   16b44:	mov	fp, sp
   16b48:	str	r3, [r0, #28]
   16b4c:	ldr	r3, [fp, #12]
   16b50:	str	r3, [r0, #36]	; 0x24
   16b54:	ldr	r3, [fp, #8]
   16b58:	str	r3, [r0, #32]
   16b5c:	ldrb	r3, [r0, #40]	; 0x28
   16b60:	orr	r3, r3, #1
   16b64:	strb	r3, [r0, #40]	; 0x28
   16b68:	bl	16ab8 <_obstack_begin@@Base+0x2c>
   16b6c:	mov	r0, #1
   16b70:	pop	{fp, pc}

00016b74 <_obstack_newchunk@@Base>:
   16b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b78:	add	fp, sp, #28
   16b7c:	sub	sp, sp, #4
   16b80:	mov	r4, r0
   16b84:	ldr	r2, [r0]
   16b88:	ldr	r0, [r0, #8]
   16b8c:	ldr	r3, [r4, #12]
   16b90:	sub	sl, r3, r0
   16b94:	add	r1, sl, r1
   16b98:	ldr	r0, [r4, #24]
   16b9c:	mov	r3, #0
   16ba0:	adds	r7, r1, r0
   16ba4:	adc	r0, r3, #0
   16ba8:	mov	r3, #100	; 0x64
   16bac:	add	r3, r3, sl, lsr #3
   16bb0:	adds	r6, r3, r7
   16bb4:	movcs	r6, r7
   16bb8:	cmp	r6, r2
   16bbc:	movcc	r6, r2
   16bc0:	cmp	r1, sl
   16bc4:	bcc	16c7c <_obstack_newchunk@@Base+0x108>
   16bc8:	cmp	r0, #0
   16bcc:	bne	16c7c <_obstack_newchunk@@Base+0x108>
   16bd0:	ldr	r8, [r4, #4]
   16bd4:	mov	r0, r4
   16bd8:	mov	r1, r6
   16bdc:	bl	16c8c <_obstack_newchunk@@Base+0x118>
   16be0:	cmp	r0, #0
   16be4:	beq	16c7c <_obstack_newchunk@@Base+0x108>
   16be8:	mov	r7, r0
   16bec:	str	r0, [r4, #4]
   16bf0:	str	r8, [r0, #4]
   16bf4:	add	r0, r0, r6
   16bf8:	str	r0, [r4, #16]
   16bfc:	str	r0, [r7]
   16c00:	ldr	r9, [r4, #8]
   16c04:	ldr	r5, [r4, #24]
   16c08:	add	r0, r7, r5
   16c0c:	add	r0, r0, #8
   16c10:	bic	r6, r0, r5
   16c14:	mov	r0, r6
   16c18:	mov	r1, r9
   16c1c:	mov	r2, sl
   16c20:	bl	1135c <memcpy@plt>
   16c24:	ldrb	r0, [r4, #40]	; 0x28
   16c28:	tst	r0, #2
   16c2c:	bne	16c5c <_obstack_newchunk@@Base+0xe8>
   16c30:	mvn	r0, r5
   16c34:	add	r1, r8, r5
   16c38:	add	r1, r1, #8
   16c3c:	and	r0, r1, r0
   16c40:	cmp	r9, r0
   16c44:	bne	16c5c <_obstack_newchunk@@Base+0xe8>
   16c48:	ldr	r0, [r8, #4]
   16c4c:	str	r0, [r7, #4]
   16c50:	mov	r0, r4
   16c54:	mov	r1, r8
   16c58:	bl	16cb0 <_obstack_newchunk@@Base+0x13c>
   16c5c:	add	r0, r6, sl
   16c60:	str	r6, [r4, #8]
   16c64:	str	r0, [r4, #12]
   16c68:	ldrb	r0, [r4, #40]	; 0x28
   16c6c:	and	r0, r0, #253	; 0xfd
   16c70:	strb	r0, [r4, #40]	; 0x28
   16c74:	sub	sp, fp, #28
   16c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c7c:	movw	r0, #37232	; 0x9170
   16c80:	movt	r0, #2
   16c84:	ldr	r0, [r0]
   16c88:	blx	r0
   16c8c:	ldrb	r2, [r0, #40]	; 0x28
   16c90:	tst	r2, #1
   16c94:	bne	16ca4 <_obstack_newchunk@@Base+0x130>
   16c98:	ldr	r2, [r0, #28]
   16c9c:	mov	r0, r1
   16ca0:	bx	r2
   16ca4:	ldr	r2, [r0, #28]
   16ca8:	ldr	r0, [r0, #36]	; 0x24
   16cac:	bx	r2
   16cb0:	ldrb	r2, [r0, #40]	; 0x28
   16cb4:	tst	r2, #1
   16cb8:	bne	16cc8 <_obstack_newchunk@@Base+0x154>
   16cbc:	ldr	r2, [r0, #32]
   16cc0:	mov	r0, r1
   16cc4:	bx	r2
   16cc8:	ldr	r2, [r0, #32]
   16ccc:	ldr	r0, [r0, #36]	; 0x24
   16cd0:	bx	r2

00016cd4 <_obstack_allocated_p@@Base>:
   16cd4:	ldr	r2, [r0, #4]
   16cd8:	mov	r0, #0
   16cdc:	b	16ce4 <_obstack_allocated_p@@Base+0x10>
   16ce0:	ldr	r2, [r2, #4]
   16ce4:	cmp	r2, #0
   16ce8:	bxeq	lr
   16cec:	cmp	r2, r1
   16cf0:	bcs	16ce0 <_obstack_allocated_p@@Base+0xc>
   16cf4:	ldr	r3, [r2]
   16cf8:	cmp	r3, r1
   16cfc:	bcc	16ce0 <_obstack_allocated_p@@Base+0xc>
   16d00:	mov	r0, #1
   16d04:	bx	lr

00016d08 <_obstack_free@@Base>:
   16d08:	push	{r4, r5, r6, sl, fp, lr}
   16d0c:	add	fp, sp, #16
   16d10:	mov	r5, r1
   16d14:	ldr	r1, [r0, #4]
   16d18:	cmp	r1, #0
   16d1c:	beq	16d7c <_obstack_free@@Base+0x74>
   16d20:	mov	r4, r0
   16d24:	cmp	r1, r5
   16d28:	bcc	16d58 <_obstack_free@@Base+0x50>
   16d2c:	ldr	r6, [r1, #4]
   16d30:	mov	r0, r4
   16d34:	bl	16cb0 <_obstack_newchunk@@Base+0x13c>
   16d38:	ldrb	r0, [r4, #40]	; 0x28
   16d3c:	orr	r0, r0, #2
   16d40:	strb	r0, [r4, #40]	; 0x28
   16d44:	cmp	r6, #0
   16d48:	mov	r1, r6
   16d4c:	beq	16d7c <_obstack_free@@Base+0x74>
   16d50:	cmp	r1, r5
   16d54:	bcs	16d2c <_obstack_free@@Base+0x24>
   16d58:	ldr	r0, [r1]
   16d5c:	cmp	r0, r5
   16d60:	bcc	16d2c <_obstack_free@@Base+0x24>
   16d64:	str	r5, [r4, #8]
   16d68:	str	r5, [r4, #12]
   16d6c:	ldr	r0, [r1]
   16d70:	str	r1, [r4, #4]
   16d74:	str	r0, [r4, #16]
   16d78:	pop	{r4, r5, r6, sl, fp, pc}
   16d7c:	cmp	r5, #0
   16d80:	popeq	{r4, r5, r6, sl, fp, pc}
   16d84:	bl	115cc <abort@plt>

00016d88 <_obstack_memory_used@@Base>:
   16d88:	ldr	r1, [r0, #4]
   16d8c:	mov	r0, #0
   16d90:	b	16da4 <_obstack_memory_used@@Base+0x1c>
   16d94:	sub	r0, r0, r1
   16d98:	ldr	r2, [r1]
   16d9c:	ldr	r1, [r1, #4]
   16da0:	add	r0, r0, r2
   16da4:	cmp	r1, #0
   16da8:	bxeq	lr
   16dac:	b	16d94 <_obstack_memory_used@@Base+0xc>
   16db0:	push	{fp, lr}
   16db4:	mov	fp, sp
   16db8:	movw	r0, #37256	; 0x9188
   16dbc:	movt	r0, #2
   16dc0:	ldr	r4, [r0]
   16dc4:	movw	r1, #33064	; 0x8128
   16dc8:	movt	r1, #1
   16dcc:	mov	r0, #0
   16dd0:	mov	r2, #5
   16dd4:	bl	11374 <dcgettext@plt>
   16dd8:	mov	r3, r0
   16ddc:	movw	r2, #32288	; 0x7e20
   16de0:	movt	r2, #1
   16de4:	mov	r0, r4
   16de8:	mov	r1, #1
   16dec:	bl	11548 <__fprintf_chk@plt>
   16df0:	movw	r0, #37164	; 0x912c
   16df4:	movt	r0, #2
   16df8:	ldr	r0, [r0]
   16dfc:	bl	11494 <exit@plt>
   16e00:	cmp	r2, #0
   16e04:	beq	16e34 <_obstack_memory_used@@Base+0xac>
   16e08:	mvn	r3, #0
   16e0c:	udiv	r3, r3, r2
   16e10:	cmp	r3, r1
   16e14:	bcs	16e34 <_obstack_memory_used@@Base+0xac>
   16e18:	push	{fp, lr}
   16e1c:	mov	fp, sp
   16e20:	bl	114e8 <__errno_location@plt>
   16e24:	mov	r1, #12
   16e28:	str	r1, [r0]
   16e2c:	mov	r0, #0
   16e30:	pop	{fp, pc}
   16e34:	mul	r1, r2, r1
   16e38:	b	1658c <__assert_fail@plt+0x4f9c>
   16e3c:	b	16e40 <_obstack_memory_used@@Base+0xb8>
   16e40:	push	{r4, r5, r6, r7, fp, lr}
   16e44:	add	fp, sp, #16
   16e48:	mov	r6, r2
   16e4c:	mov	r4, r1
   16e50:	bl	16ed8 <_obstack_memory_used@@Base+0x150>
   16e54:	cmp	r0, #0
   16e58:	beq	16e88 <_obstack_memory_used@@Base+0x100>
   16e5c:	mov	r7, r0
   16e60:	bl	114c4 <strlen@plt>
   16e64:	cmp	r0, r6
   16e68:	bcs	16ea4 <_obstack_memory_used@@Base+0x11c>
   16e6c:	add	r2, r0, #1
   16e70:	mov	r0, r4
   16e74:	mov	r1, r7
   16e78:	bl	1135c <memcpy@plt>
   16e7c:	mov	r5, #0
   16e80:	mov	r0, r5
   16e84:	pop	{r4, r5, r6, r7, fp, pc}
   16e88:	mov	r5, #22
   16e8c:	cmp	r6, #0
   16e90:	beq	16ecc <_obstack_memory_used@@Base+0x144>
   16e94:	mov	r0, #0
   16e98:	strb	r0, [r4]
   16e9c:	mov	r0, r5
   16ea0:	pop	{r4, r5, r6, r7, fp, pc}
   16ea4:	mov	r5, #34	; 0x22
   16ea8:	cmp	r6, #0
   16eac:	beq	16ecc <_obstack_memory_used@@Base+0x144>
   16eb0:	sub	r6, r6, #1
   16eb4:	mov	r0, r4
   16eb8:	mov	r1, r7
   16ebc:	mov	r2, r6
   16ec0:	bl	1135c <memcpy@plt>
   16ec4:	mov	r0, #0
   16ec8:	strb	r0, [r4, r6]
   16ecc:	mov	r0, r5
   16ed0:	pop	{r4, r5, r6, r7, fp, pc}
   16ed4:	b	16ed8 <_obstack_memory_used@@Base+0x150>
   16ed8:	mov	r1, #0
   16edc:	b	1156c <setlocale@plt>
   16ee0:	eor	r1, r1, #-2147483648	; 0x80000000
   16ee4:	b	16eec <_obstack_memory_used@@Base+0x164>
   16ee8:	eor	r3, r3, #-2147483648	; 0x80000000
   16eec:	push	{r4, r5, lr}
   16ef0:	lsl	r4, r1, #1
   16ef4:	lsl	r5, r3, #1
   16ef8:	teq	r4, r5
   16efc:	teqeq	r0, r2
   16f00:	orrsne	ip, r4, r0
   16f04:	orrsne	ip, r5, r2
   16f08:	mvnsne	ip, r4, asr #21
   16f0c:	mvnsne	ip, r5, asr #21
   16f10:	beq	170fc <_obstack_memory_used@@Base+0x374>
   16f14:	lsr	r4, r4, #21
   16f18:	rsbs	r5, r4, r5, lsr #21
   16f1c:	rsblt	r5, r5, #0
   16f20:	ble	16f40 <_obstack_memory_used@@Base+0x1b8>
   16f24:	add	r4, r4, r5
   16f28:	eor	r2, r0, r2
   16f2c:	eor	r3, r1, r3
   16f30:	eor	r0, r2, r0
   16f34:	eor	r1, r3, r1
   16f38:	eor	r2, r0, r2
   16f3c:	eor	r3, r1, r3
   16f40:	cmp	r5, #54	; 0x36
   16f44:	pophi	{r4, r5, pc}
   16f48:	tst	r1, #-2147483648	; 0x80000000
   16f4c:	lsl	r1, r1, #12
   16f50:	mov	ip, #1048576	; 0x100000
   16f54:	orr	r1, ip, r1, lsr #12
   16f58:	beq	16f64 <_obstack_memory_used@@Base+0x1dc>
   16f5c:	rsbs	r0, r0, #0
   16f60:	rsc	r1, r1, #0
   16f64:	tst	r3, #-2147483648	; 0x80000000
   16f68:	lsl	r3, r3, #12
   16f6c:	orr	r3, ip, r3, lsr #12
   16f70:	beq	16f7c <_obstack_memory_used@@Base+0x1f4>
   16f74:	rsbs	r2, r2, #0
   16f78:	rsc	r3, r3, #0
   16f7c:	teq	r4, r5
   16f80:	beq	170e4 <_obstack_memory_used@@Base+0x35c>
   16f84:	sub	r4, r4, #1
   16f88:	rsbs	lr, r5, #32
   16f8c:	blt	16fa8 <_obstack_memory_used@@Base+0x220>
   16f90:	lsl	ip, r2, lr
   16f94:	adds	r0, r0, r2, lsr r5
   16f98:	adc	r1, r1, #0
   16f9c:	adds	r0, r0, r3, lsl lr
   16fa0:	adcs	r1, r1, r3, asr r5
   16fa4:	b	16fc4 <_obstack_memory_used@@Base+0x23c>
   16fa8:	sub	r5, r5, #32
   16fac:	add	lr, lr, #32
   16fb0:	cmp	r2, #1
   16fb4:	lsl	ip, r3, lr
   16fb8:	orrcs	ip, ip, #2
   16fbc:	adds	r0, r0, r3, asr r5
   16fc0:	adcs	r1, r1, r3, asr #31
   16fc4:	and	r5, r1, #-2147483648	; 0x80000000
   16fc8:	bpl	16fd8 <_obstack_memory_used@@Base+0x250>
   16fcc:	rsbs	ip, ip, #0
   16fd0:	rscs	r0, r0, #0
   16fd4:	rsc	r1, r1, #0
   16fd8:	cmp	r1, #1048576	; 0x100000
   16fdc:	bcc	1701c <_obstack_memory_used@@Base+0x294>
   16fe0:	cmp	r1, #2097152	; 0x200000
   16fe4:	bcc	17004 <_obstack_memory_used@@Base+0x27c>
   16fe8:	lsrs	r1, r1, #1
   16fec:	rrxs	r0, r0
   16ff0:	rrx	ip, ip
   16ff4:	add	r4, r4, #1
   16ff8:	lsl	r2, r4, #21
   16ffc:	cmn	r2, #4194304	; 0x400000
   17000:	bcs	1715c <_obstack_memory_used@@Base+0x3d4>
   17004:	cmp	ip, #-2147483648	; 0x80000000
   17008:	lsrseq	ip, r0, #1
   1700c:	adcs	r0, r0, #0
   17010:	adc	r1, r1, r4, lsl #20
   17014:	orr	r1, r1, r5
   17018:	pop	{r4, r5, pc}
   1701c:	lsls	ip, ip, #1
   17020:	adcs	r0, r0, r0
   17024:	adc	r1, r1, r1
   17028:	tst	r1, #1048576	; 0x100000
   1702c:	sub	r4, r4, #1
   17030:	bne	17004 <_obstack_memory_used@@Base+0x27c>
   17034:	teq	r1, #0
   17038:	moveq	r1, r0
   1703c:	moveq	r0, #0
   17040:	clz	r3, r1
   17044:	addeq	r3, r3, #32
   17048:	sub	r3, r3, #11
   1704c:	subs	r2, r3, #32
   17050:	bge	17074 <_obstack_memory_used@@Base+0x2ec>
   17054:	adds	r2, r2, #12
   17058:	ble	17070 <_obstack_memory_used@@Base+0x2e8>
   1705c:	add	ip, r2, #20
   17060:	rsb	r2, r2, #12
   17064:	lsl	r0, r1, ip
   17068:	lsr	r1, r1, r2
   1706c:	b	17084 <_obstack_memory_used@@Base+0x2fc>
   17070:	add	r2, r2, #20
   17074:	rsble	ip, r2, #32
   17078:	lsl	r1, r1, r2
   1707c:	orrle	r1, r1, r0, lsr ip
   17080:	lslle	r0, r0, r2
   17084:	subs	r4, r4, r3
   17088:	addge	r1, r1, r4, lsl #20
   1708c:	orrge	r1, r1, r5
   17090:	popge	{r4, r5, pc}
   17094:	mvn	r4, r4
   17098:	subs	r4, r4, #31
   1709c:	bge	170d8 <_obstack_memory_used@@Base+0x350>
   170a0:	adds	r4, r4, #12
   170a4:	bgt	170c0 <_obstack_memory_used@@Base+0x338>
   170a8:	add	r4, r4, #20
   170ac:	rsb	r2, r4, #32
   170b0:	lsr	r0, r0, r4
   170b4:	orr	r0, r0, r1, lsl r2
   170b8:	orr	r1, r5, r1, lsr r4
   170bc:	pop	{r4, r5, pc}
   170c0:	rsb	r4, r4, #12
   170c4:	rsb	r2, r4, #32
   170c8:	lsr	r0, r0, r2
   170cc:	orr	r0, r0, r1, lsl r4
   170d0:	mov	r1, r5
   170d4:	pop	{r4, r5, pc}
   170d8:	lsr	r0, r1, r4
   170dc:	mov	r1, r5
   170e0:	pop	{r4, r5, pc}
   170e4:	teq	r4, #0
   170e8:	eor	r3, r3, #1048576	; 0x100000
   170ec:	eoreq	r1, r1, #1048576	; 0x100000
   170f0:	addeq	r4, r4, #1
   170f4:	subne	r5, r5, #1
   170f8:	b	16f84 <_obstack_memory_used@@Base+0x1fc>
   170fc:	mvns	ip, r4, asr #21
   17100:	mvnsne	ip, r5, asr #21
   17104:	beq	1716c <_obstack_memory_used@@Base+0x3e4>
   17108:	teq	r4, r5
   1710c:	teqeq	r0, r2
   17110:	beq	17124 <_obstack_memory_used@@Base+0x39c>
   17114:	orrs	ip, r4, r0
   17118:	moveq	r1, r3
   1711c:	moveq	r0, r2
   17120:	pop	{r4, r5, pc}
   17124:	teq	r1, r3
   17128:	movne	r1, #0
   1712c:	movne	r0, #0
   17130:	popne	{r4, r5, pc}
   17134:	lsrs	ip, r4, #21
   17138:	bne	1714c <_obstack_memory_used@@Base+0x3c4>
   1713c:	lsls	r0, r0, #1
   17140:	adcs	r1, r1, r1
   17144:	orrcs	r1, r1, #-2147483648	; 0x80000000
   17148:	pop	{r4, r5, pc}
   1714c:	adds	r4, r4, #4194304	; 0x400000
   17150:	addcc	r1, r1, #1048576	; 0x100000
   17154:	popcc	{r4, r5, pc}
   17158:	and	r5, r1, #-2147483648	; 0x80000000
   1715c:	orr	r1, r5, #2130706432	; 0x7f000000
   17160:	orr	r1, r1, #15728640	; 0xf00000
   17164:	mov	r0, #0
   17168:	pop	{r4, r5, pc}
   1716c:	mvns	ip, r4, asr #21
   17170:	movne	r1, r3
   17174:	movne	r0, r2
   17178:	mvnseq	ip, r5, asr #21
   1717c:	movne	r3, r1
   17180:	movne	r2, r0
   17184:	orrs	r4, r0, r1, lsl #12
   17188:	orrseq	r5, r2, r3, lsl #12
   1718c:	teqeq	r1, r3
   17190:	orrne	r1, r1, #524288	; 0x80000
   17194:	pop	{r4, r5, pc}
   17198:	teq	r0, #0
   1719c:	moveq	r1, #0
   171a0:	bxeq	lr
   171a4:	push	{r4, r5, lr}
   171a8:	mov	r4, #1024	; 0x400
   171ac:	add	r4, r4, #50	; 0x32
   171b0:	mov	r5, #0
   171b4:	mov	r1, #0
   171b8:	b	17034 <_obstack_memory_used@@Base+0x2ac>
   171bc:	teq	r0, #0
   171c0:	moveq	r1, #0
   171c4:	bxeq	lr
   171c8:	push	{r4, r5, lr}
   171cc:	mov	r4, #1024	; 0x400
   171d0:	add	r4, r4, #50	; 0x32
   171d4:	ands	r5, r0, #-2147483648	; 0x80000000
   171d8:	rsbmi	r0, r0, #0
   171dc:	mov	r1, #0
   171e0:	b	17034 <_obstack_memory_used@@Base+0x2ac>
   171e4:	lsls	r2, r0, #1
   171e8:	asr	r1, r2, #3
   171ec:	rrx	r1, r1
   171f0:	lsl	r0, r2, #28
   171f4:	andsne	r3, r2, #-16777216	; 0xff000000
   171f8:	teqne	r3, #-16777216	; 0xff000000
   171fc:	eorne	r1, r1, #939524096	; 0x38000000
   17200:	bxne	lr
   17204:	bics	r2, r2, #-16777216	; 0xff000000
   17208:	bxeq	lr
   1720c:	teq	r3, #-16777216	; 0xff000000
   17210:	orreq	r1, r1, #524288	; 0x80000
   17214:	bxeq	lr
   17218:	push	{r4, r5, lr}
   1721c:	mov	r4, #896	; 0x380
   17220:	and	r5, r1, #-2147483648	; 0x80000000
   17224:	bic	r1, r1, #-2147483648	; 0x80000000
   17228:	b	17034 <_obstack_memory_used@@Base+0x2ac>
   1722c:	orrs	r2, r0, r1
   17230:	bxeq	lr
   17234:	push	{r4, r5, lr}
   17238:	mov	r5, #0
   1723c:	b	1725c <_obstack_memory_used@@Base+0x4d4>
   17240:	orrs	r2, r0, r1
   17244:	bxeq	lr
   17248:	push	{r4, r5, lr}
   1724c:	ands	r5, r1, #-2147483648	; 0x80000000
   17250:	bpl	1725c <_obstack_memory_used@@Base+0x4d4>
   17254:	rsbs	r0, r0, #0
   17258:	rsc	r1, r1, #0
   1725c:	mov	r4, #1024	; 0x400
   17260:	add	r4, r4, #50	; 0x32
   17264:	lsrs	ip, r1, #22
   17268:	beq	16fd8 <_obstack_memory_used@@Base+0x250>
   1726c:	mov	r2, #3
   17270:	lsrs	ip, ip, #3
   17274:	addne	r2, r2, #3
   17278:	lsrs	ip, ip, #3
   1727c:	addne	r2, r2, #3
   17280:	add	r2, r2, ip, lsr #3
   17284:	rsb	r3, r2, #32
   17288:	lsl	ip, r0, r3
   1728c:	lsr	r0, r0, r2
   17290:	orr	r0, r0, r1, lsl r3
   17294:	lsr	r1, r1, r2
   17298:	add	r4, r4, r2
   1729c:	b	16fd8 <_obstack_memory_used@@Base+0x250>
   172a0:	cmp	r3, #0
   172a4:	cmpeq	r2, #0
   172a8:	bne	172c0 <_obstack_memory_used@@Base+0x538>
   172ac:	cmp	r1, #0
   172b0:	cmpeq	r0, #0
   172b4:	mvnne	r1, #0
   172b8:	mvnne	r0, #0
   172bc:	b	172dc <_obstack_memory_used@@Base+0x554>
   172c0:	sub	sp, sp, #8
   172c4:	push	{sp, lr}
   172c8:	bl	172ec <_obstack_memory_used@@Base+0x564>
   172cc:	ldr	lr, [sp, #4]
   172d0:	add	sp, sp, #8
   172d4:	pop	{r2, r3}
   172d8:	bx	lr
   172dc:	push	{r1, lr}
   172e0:	mov	r0, #8
   172e4:	bl	112e4 <raise@plt>
   172e8:	pop	{r1, pc}
   172ec:	cmp	r1, r3
   172f0:	cmpeq	r0, r2
   172f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172f8:	mov	r4, r0
   172fc:	movcc	r0, #0
   17300:	mov	r5, r1
   17304:	ldr	lr, [sp, #36]	; 0x24
   17308:	movcc	r1, r0
   1730c:	bcc	17408 <_obstack_memory_used@@Base+0x680>
   17310:	cmp	r3, #0
   17314:	clzeq	ip, r2
   17318:	clzne	ip, r3
   1731c:	addeq	ip, ip, #32
   17320:	cmp	r5, #0
   17324:	clzeq	r1, r4
   17328:	addeq	r1, r1, #32
   1732c:	clzne	r1, r5
   17330:	sub	ip, ip, r1
   17334:	sub	sl, ip, #32
   17338:	lsl	r9, r3, ip
   1733c:	rsb	fp, ip, #32
   17340:	orr	r9, r9, r2, lsl sl
   17344:	orr	r9, r9, r2, lsr fp
   17348:	lsl	r8, r2, ip
   1734c:	cmp	r5, r9
   17350:	cmpeq	r4, r8
   17354:	movcc	r0, #0
   17358:	movcc	r1, r0
   1735c:	bcc	17378 <_obstack_memory_used@@Base+0x5f0>
   17360:	mov	r0, #1
   17364:	subs	r4, r4, r8
   17368:	lsl	r1, r0, sl
   1736c:	orr	r1, r1, r0, lsr fp
   17370:	lsl	r0, r0, ip
   17374:	sbc	r5, r5, r9
   17378:	cmp	ip, #0
   1737c:	beq	17408 <_obstack_memory_used@@Base+0x680>
   17380:	lsr	r6, r8, #1
   17384:	orr	r6, r6, r9, lsl #31
   17388:	lsr	r7, r9, #1
   1738c:	mov	r2, ip
   17390:	b	173b4 <_obstack_memory_used@@Base+0x62c>
   17394:	subs	r3, r4, r6
   17398:	sbc	r8, r5, r7
   1739c:	adds	r3, r3, r3
   173a0:	adc	r8, r8, r8
   173a4:	adds	r4, r3, #1
   173a8:	adc	r5, r8, #0
   173ac:	subs	r2, r2, #1
   173b0:	beq	173d0 <_obstack_memory_used@@Base+0x648>
   173b4:	cmp	r5, r7
   173b8:	cmpeq	r4, r6
   173bc:	bcs	17394 <_obstack_memory_used@@Base+0x60c>
   173c0:	adds	r4, r4, r4
   173c4:	adc	r5, r5, r5
   173c8:	subs	r2, r2, #1
   173cc:	bne	173b4 <_obstack_memory_used@@Base+0x62c>
   173d0:	lsr	r3, r4, ip
   173d4:	orr	r3, r3, r5, lsl fp
   173d8:	lsr	r2, r5, ip
   173dc:	orr	r3, r3, r5, lsr sl
   173e0:	adds	r0, r0, r4
   173e4:	mov	r4, r3
   173e8:	lsl	r3, r2, ip
   173ec:	orr	r3, r3, r4, lsl sl
   173f0:	lsl	ip, r4, ip
   173f4:	orr	r3, r3, r4, lsr fp
   173f8:	adc	r1, r1, r5
   173fc:	subs	r0, r0, ip
   17400:	mov	r5, r2
   17404:	sbc	r1, r1, r3
   17408:	cmp	lr, #0
   1740c:	strdne	r4, [lr]
   17410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17414:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17418:	mov	r7, r0
   1741c:	ldr	r6, [pc, #72]	; 1746c <_obstack_memory_used@@Base+0x6e4>
   17420:	ldr	r5, [pc, #72]	; 17470 <_obstack_memory_used@@Base+0x6e8>
   17424:	add	r6, pc, r6
   17428:	add	r5, pc, r5
   1742c:	sub	r6, r6, r5
   17430:	mov	r8, r1
   17434:	mov	r9, r2
   17438:	bl	112ac <calloc@plt-0x20>
   1743c:	asrs	r6, r6, #2
   17440:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17444:	mov	r4, #0
   17448:	add	r4, r4, #1
   1744c:	ldr	r3, [r5], #4
   17450:	mov	r2, r9
   17454:	mov	r1, r8
   17458:	mov	r0, r7
   1745c:	blx	r3
   17460:	cmp	r6, r4
   17464:	bne	17448 <_obstack_memory_used@@Base+0x6c0>
   17468:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1746c:	andeq	r1, r1, r0, ror #21
   17470:	ldrdeq	r1, [r1], -r8
   17474:	bx	lr
   17478:	ldr	r3, [pc, #12]	; 1748c <_obstack_memory_used@@Base+0x704>
   1747c:	mov	r1, #0
   17480:	add	r3, pc, r3
   17484:	ldr	r2, [r3]
   17488:	b	114f4 <__cxa_atexit@plt>
   1748c:	muleq	r1, ip, ip
   17490:	mov	r2, r1
   17494:	mov	r1, r0
   17498:	mov	r0, #3
   1749c:	b	115b4 <__xstat64@plt>
   174a0:	mov	r2, r1
   174a4:	mov	r1, r0
   174a8:	mov	r0, #3
   174ac:	b	113c8 <__fxstat64@plt>

Disassembly of section .fini:

000174b0 <.fini>:
   174b0:	push	{r3, lr}
   174b4:	pop	{r3, pc}
