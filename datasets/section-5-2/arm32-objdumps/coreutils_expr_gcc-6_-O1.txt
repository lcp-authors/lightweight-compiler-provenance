
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00011148 <.init>:
   11148:	push	{r3, lr}
   1114c:	bl	11540 <__assert_fail@plt+0x48>
   11150:	pop	{r3, pc}

Disassembly of section .plt:

00011154 <pthread_mutex_unlock@plt-0x14>:
   11154:	push	{lr}		; (str lr, [sp, #-4]!)
   11158:	ldr	lr, [pc, #4]	; 11164 <pthread_mutex_unlock@plt-0x4>
   1115c:	add	lr, pc, lr
   11160:	ldr	pc, [lr, #8]!
   11164:	muleq	r2, ip, lr

00011168 <pthread_mutex_unlock@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #36, 20	; 0x24000
   11170:	ldr	pc, [ip, #3740]!	; 0xe9c

00011174 <calloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #36, 20	; 0x24000
   1117c:	ldr	pc, [ip, #3732]!	; 0xe94

00011180 <fputs_unlocked@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #36, 20	; 0x24000
   11188:	ldr	pc, [ip, #3724]!	; 0xe8c

0001118c <wctype@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #36, 20	; 0x24000
   11194:	ldr	pc, [ip, #3716]!	; 0xe84

00011198 <raise@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #36, 20	; 0x24000
   111a0:	ldr	pc, [ip, #3708]!	; 0xe7c

000111a4 <wcrtomb@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #36, 20	; 0x24000
   111ac:	ldr	pc, [ip, #3700]!	; 0xe74

000111b0 <iswctype@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #36, 20	; 0x24000
   111b8:	ldr	pc, [ip, #3692]!	; 0xe6c

000111bc <strcmp@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #36, 20	; 0x24000
   111c4:	ldr	pc, [ip, #3684]!	; 0xe64

000111c8 <__gmpz_tdiv_q@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #36, 20	; 0x24000
   111d0:	ldr	pc, [ip, #3676]!	; 0xe5c

000111d4 <strcspn@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #36, 20	; 0x24000
   111dc:	ldr	pc, [ip, #3668]!	; 0xe54

000111e0 <pthread_mutex_destroy@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #36, 20	; 0x24000
   111e8:	ldr	pc, [ip, #3660]!	; 0xe4c

000111ec <fflush@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #36, 20	; 0x24000
   111f4:	ldr	pc, [ip, #3652]!	; 0xe44

000111f8 <wcwidth@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #36, 20	; 0x24000
   11200:	ldr	pc, [ip, #3644]!	; 0xe3c

00011204 <memmove@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #36, 20	; 0x24000
   1120c:	ldr	pc, [ip, #3636]!	; 0xe34

00011210 <free@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #36, 20	; 0x24000
   11218:	ldr	pc, [ip, #3628]!	; 0xe2c

0001121c <pthread_mutex_lock@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #36, 20	; 0x24000
   11224:	ldr	pc, [ip, #3620]!	; 0xe24

00011228 <_exit@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #36, 20	; 0x24000
   11230:	ldr	pc, [ip, #3612]!	; 0xe1c

00011234 <memcpy@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #36, 20	; 0x24000
   1123c:	ldr	pc, [ip, #3604]!	; 0xe14

00011240 <__gmpz_sub@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #36, 20	; 0x24000
   11248:	ldr	pc, [ip, #3596]!	; 0xe0c

0001124c <pthread_mutex_init@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #36, 20	; 0x24000
   11254:	ldr	pc, [ip, #3588]!	; 0xe04

00011258 <towlower@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #36, 20	; 0x24000
   11260:	ldr	pc, [ip, #3580]!	; 0xdfc

00011264 <mbsinit@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #36, 20	; 0x24000
   1126c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011270 <memcmp@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #36, 20	; 0x24000
   11278:	ldr	pc, [ip, #3564]!	; 0xdec

0001127c <fputc_unlocked@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #36, 20	; 0x24000
   11284:	ldr	pc, [ip, #3556]!	; 0xde4

00011288 <dcgettext@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #36, 20	; 0x24000
   11290:	ldr	pc, [ip, #3548]!	; 0xddc

00011294 <__gmpz_get_str@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #36, 20	; 0x24000
   1129c:	ldr	pc, [ip, #3540]!	; 0xdd4

000112a0 <realloc@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #36, 20	; 0x24000
   112a8:	ldr	pc, [ip, #3532]!	; 0xdcc

000112ac <__gmpz_mul@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #36, 20	; 0x24000
   112b4:	ldr	pc, [ip, #3524]!	; 0xdc4

000112b8 <textdomain@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #36, 20	; 0x24000
   112c0:	ldr	pc, [ip, #3516]!	; 0xdbc

000112c4 <iswcntrl@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #36, 20	; 0x24000
   112cc:	ldr	pc, [ip, #3508]!	; 0xdb4

000112d0 <__gmpz_out_str@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #36, 20	; 0x24000
   112d8:	ldr	pc, [ip, #3500]!	; 0xdac

000112dc <iswprint@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #36, 20	; 0x24000
   112e4:	ldr	pc, [ip, #3492]!	; 0xda4

000112e8 <fwrite@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #36, 20	; 0x24000
   112f0:	ldr	pc, [ip, #3484]!	; 0xd9c

000112f4 <lseek64@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #36, 20	; 0x24000
   112fc:	ldr	pc, [ip, #3476]!	; 0xd94

00011300 <__ctype_get_mb_cur_max@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #36, 20	; 0x24000
   11308:	ldr	pc, [ip, #3468]!	; 0xd8c

0001130c <__fpending@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #36, 20	; 0x24000
   11314:	ldr	pc, [ip, #3460]!	; 0xd84

00011318 <mbrtowc@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #36, 20	; 0x24000
   11320:	ldr	pc, [ip, #3452]!	; 0xd7c

00011324 <error@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #36, 20	; 0x24000
   1132c:	ldr	pc, [ip, #3444]!	; 0xd74

00011330 <strcoll@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #36, 20	; 0x24000
   11338:	ldr	pc, [ip, #3436]!	; 0xd6c

0001133c <puts@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #36, 20	; 0x24000
   11344:	ldr	pc, [ip, #3428]!	; 0xd64

00011348 <malloc@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #36, 20	; 0x24000
   11350:	ldr	pc, [ip, #3420]!	; 0xd5c

00011354 <__libc_start_main@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #36, 20	; 0x24000
   1135c:	ldr	pc, [ip, #3412]!	; 0xd54

00011360 <__freading@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #36, 20	; 0x24000
   11368:	ldr	pc, [ip, #3404]!	; 0xd4c

0001136c <__ctype_tolower_loc@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #36, 20	; 0x24000
   11374:	ldr	pc, [ip, #3396]!	; 0xd44

00011378 <__ctype_toupper_loc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #36, 20	; 0x24000
   11380:	ldr	pc, [ip, #3388]!	; 0xd3c

00011384 <__gmon_start__@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #36, 20	; 0x24000
   1138c:	ldr	pc, [ip, #3380]!	; 0xd34

00011390 <mempcpy@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #36, 20	; 0x24000
   11398:	ldr	pc, [ip, #3372]!	; 0xd2c

0001139c <getopt_long@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #36, 20	; 0x24000
   113a4:	ldr	pc, [ip, #3364]!	; 0xd24

000113a8 <__ctype_b_loc@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #36, 20	; 0x24000
   113b0:	ldr	pc, [ip, #3356]!	; 0xd1c

000113b4 <exit@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #36, 20	; 0x24000
   113bc:	ldr	pc, [ip, #3348]!	; 0xd14

000113c0 <strlen@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #36, 20	; 0x24000
   113c8:	ldr	pc, [ip, #3340]!	; 0xd0c

000113cc <strchr@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #36, 20	; 0x24000
   113d4:	ldr	pc, [ip, #3332]!	; 0xd04

000113d8 <__gmpz_tdiv_r@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #36, 20	; 0x24000
   113e0:	ldr	pc, [ip, #3324]!	; 0xcfc

000113e4 <__gmpz_clear@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #36, 20	; 0x24000
   113ec:	ldr	pc, [ip, #3316]!	; 0xcf4

000113f0 <__errno_location@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #36, 20	; 0x24000
   113f8:	ldr	pc, [ip, #3308]!	; 0xcec

000113fc <iswalnum@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #36, 20	; 0x24000
   11404:	ldr	pc, [ip, #3300]!	; 0xce4

00011408 <__cxa_atexit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #36, 20	; 0x24000
   11410:	ldr	pc, [ip, #3292]!	; 0xcdc

00011414 <memset@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #36, 20	; 0x24000
   1141c:	ldr	pc, [ip, #3284]!	; 0xcd4

00011420 <btowc@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #36, 20	; 0x24000
   11428:	ldr	pc, [ip, #3276]!	; 0xccc

0001142c <__printf_chk@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #36, 20	; 0x24000
   11434:	ldr	pc, [ip, #3268]!	; 0xcc4

00011438 <fileno@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #36, 20	; 0x24000
   11440:	ldr	pc, [ip, #3260]!	; 0xcbc

00011444 <__fprintf_chk@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #36, 20	; 0x24000
   1144c:	ldr	pc, [ip, #3252]!	; 0xcb4

00011450 <memchr@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #36, 20	; 0x24000
   11458:	ldr	pc, [ip, #3244]!	; 0xcac

0001145c <fclose@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #36, 20	; 0x24000
   11464:	ldr	pc, [ip, #3236]!	; 0xca4

00011468 <fseeko64@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #36, 20	; 0x24000
   11470:	ldr	pc, [ip, #3228]!	; 0xc9c

00011474 <__gmpz_init_set_ui@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #36, 20	; 0x24000
   1147c:	ldr	pc, [ip, #3220]!	; 0xc94

00011480 <__overflow@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #36, 20	; 0x24000
   11488:	ldr	pc, [ip, #3212]!	; 0xc8c

0001148c <setlocale@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #36, 20	; 0x24000
   11494:	ldr	pc, [ip, #3204]!	; 0xc84

00011498 <strrchr@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #36, 20	; 0x24000
   114a0:	ldr	pc, [ip, #3196]!	; 0xc7c

000114a4 <nl_langinfo@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #36, 20	; 0x24000
   114ac:	ldr	pc, [ip, #3188]!	; 0xc74

000114b0 <__gmpz_add@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #36, 20	; 0x24000
   114b8:	ldr	pc, [ip, #3180]!	; 0xc6c

000114bc <__gmpz_init_set_str@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #36, 20	; 0x24000
   114c4:	ldr	pc, [ip, #3172]!	; 0xc64

000114c8 <bindtextdomain@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #36, 20	; 0x24000
   114d0:	ldr	pc, [ip, #3164]!	; 0xc5c

000114d4 <towupper@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #36, 20	; 0x24000
   114dc:	ldr	pc, [ip, #3156]!	; 0xc54

000114e0 <strncmp@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #36, 20	; 0x24000
   114e8:	ldr	pc, [ip, #3148]!	; 0xc4c

000114ec <abort@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #36, 20	; 0x24000
   114f4:	ldr	pc, [ip, #3140]!	; 0xc44

000114f8 <__assert_fail@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #36, 20	; 0x24000
   11500:	ldr	pc, [ip, #3132]!	; 0xc3c

Disassembly of section .text:

00011504 <.text>:
   11504:	mov	fp, #0
   11508:	mov	lr, #0
   1150c:	pop	{r1}		; (ldr r1, [sp], #4)
   11510:	mov	r2, sp
   11514:	push	{r2}		; (str r2, [sp, #-4]!)
   11518:	push	{r0}		; (str r0, [sp, #-4]!)
   1151c:	ldr	ip, [pc, #16]	; 11534 <__assert_fail@plt+0x3c>
   11520:	push	{ip}		; (str ip, [sp, #-4]!)
   11524:	ldr	r0, [pc, #12]	; 11538 <__assert_fail@plt+0x40>
   11528:	ldr	r3, [pc, #12]	; 1153c <__assert_fail@plt+0x44>
   1152c:	bl	11354 <__libc_start_main@plt>
   11530:	bl	114ec <abort@plt>
   11534:	ldrdeq	r4, [r2], -ip
   11538:	andeq	r3, r1, r0, lsr r0
   1153c:	andeq	r4, r2, ip, ror r0
   11540:	ldr	r3, [pc, #20]	; 1155c <__assert_fail@plt+0x64>
   11544:	ldr	r2, [pc, #20]	; 11560 <__assert_fail@plt+0x68>
   11548:	add	r3, pc, r3
   1154c:	ldr	r2, [r3, r2]
   11550:	cmp	r2, #0
   11554:	bxeq	lr
   11558:	b	11384 <__gmon_start__@plt>
   1155c:			; <UNDEFINED> instruction: 0x00024ab0
   11560:	andeq	r0, r0, r0, asr #2
   11564:	ldr	r3, [pc, #28]	; 11588 <__assert_fail@plt+0x90>
   11568:	ldr	r0, [pc, #28]	; 1158c <__assert_fail@plt+0x94>
   1156c:	sub	r3, r3, r0
   11570:	cmp	r3, #6
   11574:	bxls	lr
   11578:	ldr	r3, [pc, #16]	; 11590 <__assert_fail@plt+0x98>
   1157c:	cmp	r3, #0
   11580:	bxeq	lr
   11584:	bx	r3
   11588:	muleq	r3, r3, r1
   1158c:	muleq	r3, r0, r1
   11590:	andeq	r0, r0, r0
   11594:	ldr	r1, [pc, #36]	; 115c0 <__assert_fail@plt+0xc8>
   11598:	ldr	r0, [pc, #36]	; 115c4 <__assert_fail@plt+0xcc>
   1159c:	sub	r1, r1, r0
   115a0:	asr	r1, r1, #2
   115a4:	add	r1, r1, r1, lsr #31
   115a8:	asrs	r1, r1, #1
   115ac:	bxeq	lr
   115b0:	ldr	r3, [pc, #16]	; 115c8 <__assert_fail@plt+0xd0>
   115b4:	cmp	r3, #0
   115b8:	bxeq	lr
   115bc:	bx	r3
   115c0:	muleq	r3, r0, r1
   115c4:	muleq	r3, r0, r1
   115c8:	andeq	r0, r0, r0
   115cc:	push	{r4, lr}
   115d0:	ldr	r4, [pc, #24]	; 115f0 <__assert_fail@plt+0xf8>
   115d4:	ldrb	r3, [r4]
   115d8:	cmp	r3, #0
   115dc:	popne	{r4, pc}
   115e0:	bl	11564 <__assert_fail@plt+0x6c>
   115e4:	mov	r3, #1
   115e8:	strb	r3, [r4]
   115ec:	pop	{r4, pc}
   115f0:	andeq	r6, r3, ip, lsr #3
   115f4:	ldr	r0, [pc, #40]	; 11624 <__assert_fail@plt+0x12c>
   115f8:	ldr	r3, [r0]
   115fc:	cmp	r3, #0
   11600:	bne	11608 <__assert_fail@plt+0x110>
   11604:	b	11594 <__assert_fail@plt+0x9c>
   11608:	ldr	r3, [pc, #24]	; 11628 <__assert_fail@plt+0x130>
   1160c:	cmp	r3, #0
   11610:	beq	11604 <__assert_fail@plt+0x10c>
   11614:	push	{r4, lr}
   11618:	blx	r3
   1161c:	pop	{r4, lr}
   11620:	b	11594 <__assert_fail@plt+0x9c>
   11624:	andeq	r5, r3, ip, lsl #30
   11628:	andeq	r0, r0, r0
   1162c:	ldrb	r3, [r0]
   11630:	cmp	r3, #45	; 0x2d
   11634:	addeq	r0, r0, #1
   11638:	ldrb	r3, [r0]
   1163c:	sub	r3, r3, #48	; 0x30
   11640:	cmp	r3, #9
   11644:	bhi	1165c <__assert_fail@plt+0x164>
   11648:	ldrb	r3, [r0, #1]!
   1164c:	cmp	r3, #0
   11650:	bne	11638 <__assert_fail@plt+0x140>
   11654:	mov	r0, #1
   11658:	bx	lr
   1165c:	mov	r0, #0
   11660:	bx	lr
   11664:	push	{r4, lr}
   11668:	mov	r1, r0
   1166c:	ldr	r3, [pc, #48]	; 116a4 <__assert_fail@plt+0x1ac>
   11670:	ldr	r4, [r3]
   11674:	ldr	r0, [r4]
   11678:	cmp	r0, #0
   1167c:	beq	1169c <__assert_fail@plt+0x1a4>
   11680:	bl	111bc <strcmp@plt>
   11684:	clz	r0, r0
   11688:	lsr	r0, r0, #5
   1168c:	add	r4, r4, r0, lsl #2
   11690:	ldr	r3, [pc, #12]	; 116a4 <__assert_fail@plt+0x1ac>
   11694:	str	r4, [r3]
   11698:	pop	{r4, pc}
   1169c:	mov	r0, #0
   116a0:	pop	{r4, pc}
   116a4:			; <UNDEFINED> instruction: 0x000361b0
   116a8:	push	{lr}		; (str lr, [sp, #-4]!)
   116ac:	sub	sp, sp, #60	; 0x3c
   116b0:	subs	r6, r0, #0
   116b4:	beq	116f0 <__assert_fail@plt+0x1f8>
   116b8:	ldr	r3, [pc, #904]	; 11a48 <__assert_fail@plt+0x550>
   116bc:	ldr	r4, [r3]
   116c0:	mov	r2, #5
   116c4:	ldr	r1, [pc, #896]	; 11a4c <__assert_fail@plt+0x554>
   116c8:	mov	r0, #0
   116cc:	bl	11288 <dcgettext@plt>
   116d0:	ldr	r3, [pc, #888]	; 11a50 <__assert_fail@plt+0x558>
   116d4:	ldr	r3, [r3]
   116d8:	mov	r2, r0
   116dc:	mov	r1, #1
   116e0:	mov	r0, r4
   116e4:	bl	11444 <__fprintf_chk@plt>
   116e8:	mov	r0, r6
   116ec:	bl	113b4 <exit@plt>
   116f0:	mov	r2, #5
   116f4:	ldr	r1, [pc, #856]	; 11a54 <__assert_fail@plt+0x55c>
   116f8:	mov	r0, #0
   116fc:	bl	11288 <dcgettext@plt>
   11700:	ldr	r3, [pc, #840]	; 11a50 <__assert_fail@plt+0x558>
   11704:	ldr	r2, [r3]
   11708:	mov	r3, r2
   1170c:	mov	r1, r0
   11710:	mov	r0, #1
   11714:	bl	1142c <__printf_chk@plt>
   11718:	ldr	r3, [pc, #824]	; 11a58 <__assert_fail@plt+0x560>
   1171c:	ldr	r0, [r3]
   11720:	ldr	r3, [r0, #20]
   11724:	ldr	r2, [r0, #24]
   11728:	cmp	r3, r2
   1172c:	addcc	r2, r3, #1
   11730:	strcc	r2, [r0, #20]
   11734:	movcc	r2, #10
   11738:	strbcc	r2, [r3]
   1173c:	bcs	11944 <__assert_fail@plt+0x44c>
   11740:	mov	r2, #5
   11744:	ldr	r1, [pc, #784]	; 11a5c <__assert_fail@plt+0x564>
   11748:	mov	r0, #0
   1174c:	bl	11288 <dcgettext@plt>
   11750:	ldr	r4, [pc, #768]	; 11a58 <__assert_fail@plt+0x560>
   11754:	ldr	r1, [r4]
   11758:	bl	11180 <fputs_unlocked@plt>
   1175c:	mov	r2, #5
   11760:	ldr	r1, [pc, #760]	; 11a60 <__assert_fail@plt+0x568>
   11764:	mov	r0, #0
   11768:	bl	11288 <dcgettext@plt>
   1176c:	ldr	r1, [r4]
   11770:	bl	11180 <fputs_unlocked@plt>
   11774:	mov	r2, #5
   11778:	ldr	r1, [pc, #740]	; 11a64 <__assert_fail@plt+0x56c>
   1177c:	mov	r0, #0
   11780:	bl	11288 <dcgettext@plt>
   11784:	ldr	r1, [r4]
   11788:	bl	11180 <fputs_unlocked@plt>
   1178c:	mov	r2, #5
   11790:	ldr	r1, [pc, #720]	; 11a68 <__assert_fail@plt+0x570>
   11794:	mov	r0, #0
   11798:	bl	11288 <dcgettext@plt>
   1179c:	ldr	r1, [r4]
   117a0:	bl	11180 <fputs_unlocked@plt>
   117a4:	mov	r2, #5
   117a8:	ldr	r1, [pc, #700]	; 11a6c <__assert_fail@plt+0x574>
   117ac:	mov	r0, #0
   117b0:	bl	11288 <dcgettext@plt>
   117b4:	ldr	r1, [r4]
   117b8:	bl	11180 <fputs_unlocked@plt>
   117bc:	mov	r2, #5
   117c0:	ldr	r1, [pc, #680]	; 11a70 <__assert_fail@plt+0x578>
   117c4:	mov	r0, #0
   117c8:	bl	11288 <dcgettext@plt>
   117cc:	ldr	r1, [r4]
   117d0:	bl	11180 <fputs_unlocked@plt>
   117d4:	mov	r2, #5
   117d8:	ldr	r1, [pc, #660]	; 11a74 <__assert_fail@plt+0x57c>
   117dc:	mov	r0, #0
   117e0:	bl	11288 <dcgettext@plt>
   117e4:	ldr	r1, [r4]
   117e8:	bl	11180 <fputs_unlocked@plt>
   117ec:	mov	r2, #5
   117f0:	ldr	r1, [pc, #640]	; 11a78 <__assert_fail@plt+0x580>
   117f4:	mov	r0, #0
   117f8:	bl	11288 <dcgettext@plt>
   117fc:	ldr	r1, [r4]
   11800:	bl	11180 <fputs_unlocked@plt>
   11804:	mov	r2, #5
   11808:	ldr	r1, [pc, #620]	; 11a7c <__assert_fail@plt+0x584>
   1180c:	mov	r0, #0
   11810:	bl	11288 <dcgettext@plt>
   11814:	ldr	r1, [r4]
   11818:	bl	11180 <fputs_unlocked@plt>
   1181c:	mov	r2, #5
   11820:	ldr	r1, [pc, #600]	; 11a80 <__assert_fail@plt+0x588>
   11824:	mov	r0, #0
   11828:	bl	11288 <dcgettext@plt>
   1182c:	ldr	r1, [r4]
   11830:	bl	11180 <fputs_unlocked@plt>
   11834:	mov	ip, sp
   11838:	ldr	lr, [pc, #580]	; 11a84 <__assert_fail@plt+0x58c>
   1183c:	ldm	lr!, {r0, r1, r2, r3}
   11840:	stmia	ip!, {r0, r1, r2, r3}
   11844:	ldm	lr!, {r0, r1, r2, r3}
   11848:	stmia	ip!, {r0, r1, r2, r3}
   1184c:	ldm	lr!, {r0, r1, r2, r3}
   11850:	stmia	ip!, {r0, r1, r2, r3}
   11854:	ldm	lr, {r0, r1}
   11858:	stm	ip, {r0, r1}
   1185c:	ldr	r1, [sp]
   11860:	cmp	r1, #0
   11864:	moveq	r4, sp
   11868:	beq	11890 <__assert_fail@plt+0x398>
   1186c:	mov	r4, sp
   11870:	ldr	r5, [pc, #528]	; 11a88 <__assert_fail@plt+0x590>
   11874:	mov	r0, r5
   11878:	bl	111bc <strcmp@plt>
   1187c:	cmp	r0, #0
   11880:	beq	11890 <__assert_fail@plt+0x398>
   11884:	ldr	r1, [r4, #8]!
   11888:	cmp	r1, #0
   1188c:	bne	11874 <__assert_fail@plt+0x37c>
   11890:	ldr	r4, [r4, #4]
   11894:	cmp	r4, #0
   11898:	beq	119b8 <__assert_fail@plt+0x4c0>
   1189c:	mov	r2, #5
   118a0:	ldr	r1, [pc, #484]	; 11a8c <__assert_fail@plt+0x594>
   118a4:	mov	r0, #0
   118a8:	bl	11288 <dcgettext@plt>
   118ac:	ldr	r3, [pc, #476]	; 11a90 <__assert_fail@plt+0x598>
   118b0:	ldr	r2, [pc, #476]	; 11a94 <__assert_fail@plt+0x59c>
   118b4:	mov	r1, r0
   118b8:	mov	r0, #1
   118bc:	bl	1142c <__printf_chk@plt>
   118c0:	mov	r1, #0
   118c4:	mov	r0, #5
   118c8:	bl	1148c <setlocale@plt>
   118cc:	cmp	r0, #0
   118d0:	beq	118e8 <__assert_fail@plt+0x3f0>
   118d4:	mov	r2, #3
   118d8:	ldr	r1, [pc, #440]	; 11a98 <__assert_fail@plt+0x5a0>
   118dc:	bl	114e0 <strncmp@plt>
   118e0:	cmp	r0, #0
   118e4:	bne	11954 <__assert_fail@plt+0x45c>
   118e8:	mov	r2, #5
   118ec:	ldr	r1, [pc, #424]	; 11a9c <__assert_fail@plt+0x5a4>
   118f0:	mov	r0, #0
   118f4:	bl	11288 <dcgettext@plt>
   118f8:	ldr	r5, [pc, #392]	; 11a88 <__assert_fail@plt+0x590>
   118fc:	mov	r3, r5
   11900:	ldr	r2, [pc, #392]	; 11a90 <__assert_fail@plt+0x598>
   11904:	mov	r1, r0
   11908:	mov	r0, #1
   1190c:	bl	1142c <__printf_chk@plt>
   11910:	mov	r2, #5
   11914:	ldr	r1, [pc, #388]	; 11aa0 <__assert_fail@plt+0x5a8>
   11918:	mov	r0, #0
   1191c:	bl	11288 <dcgettext@plt>
   11920:	mov	r1, r0
   11924:	ldr	r2, [pc, #376]	; 11aa4 <__assert_fail@plt+0x5ac>
   11928:	ldr	r3, [pc, #376]	; 11aa8 <__assert_fail@plt+0x5b0>
   1192c:	cmp	r4, r5
   11930:	movne	r3, r2
   11934:	mov	r2, r4
   11938:	mov	r0, #1
   1193c:	bl	1142c <__printf_chk@plt>
   11940:	b	116e8 <__assert_fail@plt+0x1f0>
   11944:	mov	r1, #10
   11948:	bl	11480 <__overflow@plt>
   1194c:	b	11740 <__assert_fail@plt+0x248>
   11950:	ldr	r4, [pc, #304]	; 11a88 <__assert_fail@plt+0x590>
   11954:	mov	r2, #5
   11958:	ldr	r1, [pc, #332]	; 11aac <__assert_fail@plt+0x5b4>
   1195c:	mov	r0, #0
   11960:	bl	11288 <dcgettext@plt>
   11964:	ldr	r3, [pc, #236]	; 11a58 <__assert_fail@plt+0x560>
   11968:	ldr	r1, [r3]
   1196c:	bl	11180 <fputs_unlocked@plt>
   11970:	b	118e8 <__assert_fail@plt+0x3f0>
   11974:	mov	r2, #5
   11978:	ldr	r1, [pc, #284]	; 11a9c <__assert_fail@plt+0x5a4>
   1197c:	mov	r0, #0
   11980:	bl	11288 <dcgettext@plt>
   11984:	ldr	r4, [pc, #252]	; 11a88 <__assert_fail@plt+0x590>
   11988:	mov	r3, r4
   1198c:	ldr	r2, [pc, #252]	; 11a90 <__assert_fail@plt+0x598>
   11990:	mov	r1, r0
   11994:	mov	r0, #1
   11998:	bl	1142c <__printf_chk@plt>
   1199c:	mov	r2, #5
   119a0:	ldr	r1, [pc, #248]	; 11aa0 <__assert_fail@plt+0x5a8>
   119a4:	mov	r0, #0
   119a8:	bl	11288 <dcgettext@plt>
   119ac:	mov	r1, r0
   119b0:	ldr	r3, [pc, #240]	; 11aa8 <__assert_fail@plt+0x5b0>
   119b4:	b	11934 <__assert_fail@plt+0x43c>
   119b8:	mov	r2, #5
   119bc:	ldr	r1, [pc, #200]	; 11a8c <__assert_fail@plt+0x594>
   119c0:	mov	r0, #0
   119c4:	bl	11288 <dcgettext@plt>
   119c8:	ldr	r3, [pc, #192]	; 11a90 <__assert_fail@plt+0x598>
   119cc:	ldr	r2, [pc, #192]	; 11a94 <__assert_fail@plt+0x59c>
   119d0:	mov	r1, r0
   119d4:	mov	r0, #1
   119d8:	bl	1142c <__printf_chk@plt>
   119dc:	mov	r1, #0
   119e0:	mov	r0, #5
   119e4:	bl	1148c <setlocale@plt>
   119e8:	cmp	r0, #0
   119ec:	beq	11974 <__assert_fail@plt+0x47c>
   119f0:	mov	r2, #3
   119f4:	ldr	r1, [pc, #156]	; 11a98 <__assert_fail@plt+0x5a0>
   119f8:	bl	114e0 <strncmp@plt>
   119fc:	cmp	r0, #0
   11a00:	bne	11950 <__assert_fail@plt+0x458>
   11a04:	mov	r2, #5
   11a08:	ldr	r1, [pc, #140]	; 11a9c <__assert_fail@plt+0x5a4>
   11a0c:	mov	r0, #0
   11a10:	bl	11288 <dcgettext@plt>
   11a14:	ldr	r4, [pc, #108]	; 11a88 <__assert_fail@plt+0x590>
   11a18:	mov	r3, r4
   11a1c:	ldr	r2, [pc, #108]	; 11a90 <__assert_fail@plt+0x598>
   11a20:	mov	r1, r0
   11a24:	mov	r0, #1
   11a28:	bl	1142c <__printf_chk@plt>
   11a2c:	mov	r2, #5
   11a30:	ldr	r1, [pc, #104]	; 11aa0 <__assert_fail@plt+0x5a8>
   11a34:	mov	r0, #0
   11a38:	bl	11288 <dcgettext@plt>
   11a3c:	mov	r1, r0
   11a40:	ldr	r3, [pc, #96]	; 11aa8 <__assert_fail@plt+0x5b0>
   11a44:	b	11934 <__assert_fail@plt+0x43c>
   11a48:	andeq	r6, r3, r0, lsr #3
   11a4c:	andeq	r4, r2, r8, asr r1
   11a50:			; <UNDEFINED> instruction: 0x000361bc
   11a54:	andeq	r4, r2, r0, lsl #3
   11a58:	andeq	r6, r3, r4, lsr #3
   11a5c:	andeq	r4, r2, r8, lsr #3
   11a60:	ldrdeq	r4, [r2], -r8
   11a64:	andeq	r4, r2, r0, lsl r2
   11a68:	andeq	r4, r2, r4, lsr #6
   11a6c:	andeq	r4, r2, r8, asr #8
   11a70:			; <UNDEFINED> instruction: 0x000244bc
   11a74:	andeq	r4, r2, r8, ror r5
   11a78:			; <UNDEFINED> instruction: 0x000246b0
   11a7c:	andeq	r4, r2, ip, ror r7
   11a80:	andeq	r4, r2, r0, lsr #17
   11a84:	andeq	r4, r2, r4, lsl #2
   11a88:	andeq	r4, r2, r0, asr r1
   11a8c:	andeq	r4, r2, ip, lsr r9
   11a90:	andeq	r4, r2, r4, asr r9
   11a94:	andeq	r4, r2, ip, ror r9
   11a98:	andeq	r4, r2, ip, lsl #19
   11a9c:	ldrdeq	r4, [r2], -r8
   11aa0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   11aa4:			; <UNDEFINED> instruction: 0x000244b8
   11aa8:	andeq	r4, r2, r0, ror #24
   11aac:	muleq	r2, r0, r9
   11ab0:	push	{r4, r5, r6, lr}
   11ab4:	ldr	r3, [pc, #68]	; 11b00 <__assert_fail@plt+0x608>
   11ab8:	ldr	r4, [r3]
   11abc:	ldr	r3, [r4]
   11ac0:	cmp	r3, #0
   11ac4:	popne	{r4, r5, r6, pc}
   11ac8:	mov	r2, #5
   11acc:	ldr	r1, [pc, #48]	; 11b04 <__assert_fail@plt+0x60c>
   11ad0:	mov	r0, #0
   11ad4:	bl	11288 <dcgettext@plt>
   11ad8:	mov	r5, r0
   11adc:	ldr	r2, [r4, #-4]
   11ae0:	mov	r1, #8
   11ae4:	mov	r0, #0
   11ae8:	bl	152a0 <__assert_fail@plt+0x3da8>
   11aec:	mov	r3, r0
   11af0:	mov	r2, r5
   11af4:	mov	r1, #0
   11af8:	mov	r0, #2
   11afc:	bl	11324 <error@plt>
   11b00:			; <UNDEFINED> instruction: 0x000361b0
   11b04:	andeq	r4, r2, r8, lsr #20
   11b08:	ldr	r3, [r0]
   11b0c:	cmp	r3, #0
   11b10:	beq	11b24 <__assert_fail@plt+0x62c>
   11b14:	cmp	r3, #1
   11b18:	beq	11b34 <__assert_fail@plt+0x63c>
   11b1c:	push	{r4, lr}
   11b20:	bl	114ec <abort@plt>
   11b24:	ldr	r0, [r0, #8]
   11b28:	clz	r0, r0
   11b2c:	lsr	r0, r0, #5
   11b30:	bx	lr
   11b34:	ldr	r3, [r0, #4]
   11b38:	ldrb	r2, [r3]
   11b3c:	cmp	r2, #0
   11b40:	moveq	r0, #1
   11b44:	beq	11b30 <__assert_fail@plt+0x638>
   11b48:	cmp	r2, #45	; 0x2d
   11b4c:	addeq	r3, r3, #1
   11b50:	ldrb	r2, [r3]
   11b54:	cmp	r2, #48	; 0x30
   11b58:	bne	11b70 <__assert_fail@plt+0x678>
   11b5c:	ldrb	r2, [r3, #1]!
   11b60:	cmp	r2, #0
   11b64:	bne	11b50 <__assert_fail@plt+0x658>
   11b68:	mov	r0, #1
   11b6c:	b	11b30 <__assert_fail@plt+0x638>
   11b70:	mov	r0, #0
   11b74:	b	11b30 <__assert_fail@plt+0x638>
   11b78:	push	{r4, r5, r6, lr}
   11b7c:	mov	r5, r0
   11b80:	mov	r0, #16
   11b84:	bl	230ec <__assert_fail@plt+0x11bf4>
   11b88:	mov	r4, r0
   11b8c:	mov	r3, #1
   11b90:	str	r3, [r0]
   11b94:	mov	r0, r5
   11b98:	bl	23674 <__assert_fail@plt+0x1217c>
   11b9c:	str	r0, [r4, #4]
   11ba0:	mov	r0, r4
   11ba4:	pop	{r4, r5, r6, pc}
   11ba8:	push	{r4, r5, r6, lr}
   11bac:	ldr	r3, [r0]
   11bb0:	cmp	r3, #0
   11bb4:	beq	11c1c <__assert_fail@plt+0x724>
   11bb8:	mov	r4, r0
   11bbc:	cmp	r3, #1
   11bc0:	bne	11c18 <__assert_fail@plt+0x720>
   11bc4:	ldr	r6, [r0, #4]
   11bc8:	mov	r0, r6
   11bcc:	bl	1162c <__assert_fail@plt+0x134>
   11bd0:	subs	r5, r0, #0
   11bd4:	beq	11c20 <__assert_fail@plt+0x728>
   11bd8:	mov	r2, #10
   11bdc:	mov	r1, r6
   11be0:	add	r0, r4, #4
   11be4:	bl	114bc <__gmpz_init_set_str@plt>
   11be8:	cmp	r0, #0
   11bec:	bne	11c04 <__assert_fail@plt+0x70c>
   11bf0:	mov	r0, r6
   11bf4:	bl	13340 <__assert_fail@plt+0x1e48>
   11bf8:	mov	r3, #0
   11bfc:	str	r3, [r4]
   11c00:	b	11c20 <__assert_fail@plt+0x728>
   11c04:	mov	r3, r6
   11c08:	ldr	r2, [pc, #24]	; 11c28 <__assert_fail@plt+0x730>
   11c0c:	mov	r1, #34	; 0x22
   11c10:	mov	r0, #3
   11c14:	bl	11324 <error@plt>
   11c18:	bl	114ec <abort@plt>
   11c1c:	mov	r5, #1
   11c20:	mov	r0, r5
   11c24:	pop	{r4, r5, r6, pc}
   11c28:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   11c2c:	push	{r4, r5, r6, lr}
   11c30:	ldr	r3, [r0]
   11c34:	cmp	r3, #0
   11c38:	beq	11c48 <__assert_fail@plt+0x750>
   11c3c:	cmp	r3, #1
   11c40:	popeq	{r4, r5, r6, pc}
   11c44:	bl	114ec <abort@plt>
   11c48:	mov	r4, r0
   11c4c:	add	r5, r0, #4
   11c50:	mov	r2, r5
   11c54:	mov	r1, #10
   11c58:	mov	r0, #0
   11c5c:	bl	11294 <__gmpz_get_str@plt>
   11c60:	mov	r6, r0
   11c64:	mov	r0, r5
   11c68:	bl	113e4 <__gmpz_clear@plt>
   11c6c:	str	r6, [r4, #4]
   11c70:	mov	r3, #1
   11c74:	str	r3, [r4]
   11c78:	pop	{r4, r5, r6, pc}
   11c7c:	push	{r4, lr}
   11c80:	mov	r4, r0
   11c84:	ldr	r3, [r0]
   11c88:	cmp	r3, #1
   11c8c:	beq	11ca4 <__assert_fail@plt+0x7ac>
   11c90:	add	r0, r0, #4
   11c94:	bl	113e4 <__gmpz_clear@plt>
   11c98:	mov	r0, r4
   11c9c:	bl	13340 <__assert_fail@plt+0x1e48>
   11ca0:	pop	{r4, pc}
   11ca4:	ldr	r0, [r0, #4]
   11ca8:	bl	13340 <__assert_fail@plt+0x1e48>
   11cac:	b	11c98 <__assert_fail@plt+0x7a0>
   11cb0:	push	{r4, r5, r6, lr}
   11cb4:	mov	r5, r0
   11cb8:	mov	r0, #16
   11cbc:	bl	230ec <__assert_fail@plt+0x11bf4>
   11cc0:	mov	r4, r0
   11cc4:	mov	r3, #0
   11cc8:	str	r3, [r0], #4
   11ccc:	mov	r1, r5
   11cd0:	bl	11474 <__gmpz_init_set_ui@plt>
   11cd4:	mov	r0, r4
   11cd8:	pop	{r4, r5, r6, pc}
   11cdc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11ce0:	sub	sp, sp, #368	; 0x170
   11ce4:	mov	r6, r0
   11ce8:	mov	r4, r1
   11cec:	bl	11c2c <__assert_fail@plt+0x734>
   11cf0:	mov	r0, r4
   11cf4:	bl	11c2c <__assert_fail@plt+0x734>
   11cf8:	mov	r3, #0
   11cfc:	str	r3, [sp, #68]	; 0x44
   11d00:	str	r3, [sp, #72]	; 0x48
   11d04:	str	r3, [sp, #76]	; 0x4c
   11d08:	str	r3, [sp, #336]	; 0x150
   11d0c:	str	r3, [sp, #340]	; 0x154
   11d10:	add	r2, sp, #80	; 0x50
   11d14:	str	r2, [sp, #352]	; 0x160
   11d18:	str	r3, [sp, #356]	; 0x164
   11d1c:	ldr	r2, [pc, #796]	; 12040 <__assert_fail@plt+0xb48>
   11d20:	ldr	r3, [pc, #796]	; 12044 <__assert_fail@plt+0xb4c>
   11d24:	str	r2, [r3]
   11d28:	ldr	r4, [r4, #4]
   11d2c:	mov	r0, r4
   11d30:	bl	113c0 <strlen@plt>
   11d34:	add	r2, sp, #336	; 0x150
   11d38:	mov	r1, r0
   11d3c:	mov	r0, r4
   11d40:	bl	21e84 <__assert_fail@plt+0x1098c>
   11d44:	cmp	r0, #0
   11d48:	bne	11df0 <__assert_fail@plt+0x8f8>
   11d4c:	ldrb	r3, [sp, #364]	; 0x16c
   11d50:	bic	r3, r3, #128	; 0x80
   11d54:	strb	r3, [sp, #364]	; 0x16c
   11d58:	ldr	r4, [r6, #4]
   11d5c:	mov	r0, r4
   11d60:	bl	113c0 <strlen@plt>
   11d64:	add	r3, sp, #68	; 0x44
   11d68:	str	r3, [sp]
   11d6c:	mov	r3, #0
   11d70:	mov	r2, r0
   11d74:	mov	r1, r4
   11d78:	add	r0, sp, #336	; 0x150
   11d7c:	bl	22774 <__assert_fail@plt+0x1127c>
   11d80:	subs	r5, r0, #0
   11d84:	blt	11fc4 <__assert_fail@plt+0xacc>
   11d88:	ldr	r4, [sp, #360]	; 0x168
   11d8c:	cmp	r4, #0
   11d90:	beq	11e04 <__assert_fail@plt+0x90c>
   11d94:	ldr	r3, [sp, #76]	; 0x4c
   11d98:	ldr	r3, [r3, #4]
   11d9c:	cmp	r3, #0
   11da0:	ldrlt	r0, [pc, #672]	; 12048 <__assert_fail@plt+0xb50>
   11da4:	ldrge	r2, [r6, #4]
   11da8:	movge	r1, #0
   11dac:	strbge	r1, [r2, r3]
   11db0:	ldrge	r0, [r6, #4]
   11db4:	ldrge	r3, [sp, #72]	; 0x48
   11db8:	ldrge	r3, [r3, #4]
   11dbc:	addge	r0, r0, r3
   11dc0:	bl	11b78 <__assert_fail@plt+0x680>
   11dc4:	mov	r4, r0
   11dc8:	ldr	r3, [sp, #68]	; 0x44
   11dcc:	cmp	r3, #0
   11dd0:	bne	1202c <__assert_fail@plt+0xb34>
   11dd4:	mov	r3, #0
   11dd8:	str	r3, [sp, #352]	; 0x160
   11ddc:	add	r0, sp, #336	; 0x150
   11de0:	bl	22608 <__assert_fail@plt+0x11110>
   11de4:	mov	r0, r4
   11de8:	add	sp, sp, #368	; 0x170
   11dec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11df0:	mov	r3, r0
   11df4:	ldr	r2, [pc, #592]	; 1204c <__assert_fail@plt+0xb54>
   11df8:	mov	r1, #0
   11dfc:	mov	r0, #2
   11e00:	bl	11324 <error@plt>
   11e04:	bl	11300 <__ctype_get_mb_cur_max@plt>
   11e08:	cmp	r0, #1
   11e0c:	beq	11fb0 <__assert_fail@plt+0xab8>
   11e10:	ldr	r8, [r6, #4]
   11e14:	str	r8, [sp, #28]
   11e18:	mov	r3, #0
   11e1c:	strb	r3, [sp, #12]
   11e20:	str	r3, [sp, #16]
   11e24:	str	r3, [sp, #20]
   11e28:	strb	r3, [sp, #24]
   11e2c:	mov	r6, #1
   11e30:	mov	r7, r3
   11e34:	ldr	r9, [pc, #532]	; 12050 <__assert_fail@plt+0xb58>
   11e38:	b	11f04 <__assert_fail@plt+0xa0c>
   11e3c:	add	r0, sp, #16
   11e40:	bl	11264 <mbsinit@plt>
   11e44:	cmp	r0, #0
   11e48:	beq	11f50 <__assert_fail@plt+0xa58>
   11e4c:	strb	r6, [sp, #12]
   11e50:	ldr	sl, [sp, #28]
   11e54:	bl	11300 <__ctype_get_mb_cur_max@plt>
   11e58:	mov	r1, r0
   11e5c:	mov	r0, sl
   11e60:	bl	228a8 <__assert_fail@plt+0x113b0>
   11e64:	add	r3, sp, #16
   11e68:	mov	r2, r0
   11e6c:	mov	r1, sl
   11e70:	add	r0, sp, #40	; 0x28
   11e74:	bl	135c4 <__assert_fail@plt+0x20cc>
   11e78:	str	r0, [sp, #32]
   11e7c:	cmn	r0, #1
   11e80:	streq	r6, [sp, #32]
   11e84:	strbeq	r7, [sp, #36]	; 0x24
   11e88:	beq	11ed0 <__assert_fail@plt+0x9d8>
   11e8c:	cmn	r0, #2
   11e90:	beq	11f64 <__assert_fail@plt+0xa6c>
   11e94:	cmp	r0, #0
   11e98:	bne	11ebc <__assert_fail@plt+0x9c4>
   11e9c:	str	r6, [sp, #32]
   11ea0:	ldr	r3, [sp, #28]
   11ea4:	ldrb	r3, [r3]
   11ea8:	cmp	r3, #0
   11eac:	bne	11f78 <__assert_fail@plt+0xa80>
   11eb0:	ldr	r3, [sp, #40]	; 0x28
   11eb4:	cmp	r3, #0
   11eb8:	bne	11f8c <__assert_fail@plt+0xa94>
   11ebc:	strb	r6, [sp, #36]	; 0x24
   11ec0:	add	r0, sp, #16
   11ec4:	bl	11264 <mbsinit@plt>
   11ec8:	cmp	r0, #0
   11ecc:	strbne	r7, [sp, #12]
   11ed0:	strb	r6, [sp, #24]
   11ed4:	ldrb	r3, [sp, #36]	; 0x24
   11ed8:	cmp	r3, #0
   11edc:	bne	11fa0 <__assert_fail@plt+0xaa8>
   11ee0:	ldr	r3, [sp, #28]
   11ee4:	sub	r2, r3, r8
   11ee8:	cmp	r5, r2
   11eec:	bls	11fb4 <__assert_fail@plt+0xabc>
   11ef0:	add	r4, r4, #1
   11ef4:	ldr	r2, [sp, #32]
   11ef8:	add	r3, r3, r2
   11efc:	str	r3, [sp, #28]
   11f00:	strb	r7, [sp, #24]
   11f04:	ldrb	r3, [sp, #24]
   11f08:	cmp	r3, #0
   11f0c:	bne	11ed4 <__assert_fail@plt+0x9dc>
   11f10:	ldrb	r3, [sp, #12]
   11f14:	cmp	r3, #0
   11f18:	bne	11e50 <__assert_fail@plt+0x958>
   11f1c:	ldr	r1, [sp, #28]
   11f20:	ldrb	r3, [r1]
   11f24:	lsr	r2, r3, #5
   11f28:	and	r3, r3, #31
   11f2c:	ldr	r2, [r9, r2, lsl #2]
   11f30:	lsr	r3, r2, r3
   11f34:	tst	r3, #1
   11f38:	beq	11e3c <__assert_fail@plt+0x944>
   11f3c:	str	r6, [sp, #32]
   11f40:	ldrb	r3, [r1]
   11f44:	str	r3, [sp, #40]	; 0x28
   11f48:	strb	r6, [sp, #36]	; 0x24
   11f4c:	b	11ed0 <__assert_fail@plt+0x9d8>
   11f50:	ldr	r3, [pc, #252]	; 12054 <__assert_fail@plt+0xb5c>
   11f54:	mov	r2, #143	; 0x8f
   11f58:	ldr	r1, [pc, #248]	; 12058 <__assert_fail@plt+0xb60>
   11f5c:	ldr	r0, [pc, #248]	; 1205c <__assert_fail@plt+0xb64>
   11f60:	bl	114f8 <__assert_fail@plt>
   11f64:	ldr	r0, [sp, #28]
   11f68:	bl	113c0 <strlen@plt>
   11f6c:	str	r0, [sp, #32]
   11f70:	strb	r7, [sp, #36]	; 0x24
   11f74:	b	11ed0 <__assert_fail@plt+0x9d8>
   11f78:	ldr	r3, [pc, #212]	; 12054 <__assert_fail@plt+0xb5c>
   11f7c:	mov	r2, #171	; 0xab
   11f80:	ldr	r1, [pc, #208]	; 12058 <__assert_fail@plt+0xb60>
   11f84:	ldr	r0, [pc, #212]	; 12060 <__assert_fail@plt+0xb68>
   11f88:	bl	114f8 <__assert_fail@plt>
   11f8c:	ldr	r3, [pc, #192]	; 12054 <__assert_fail@plt+0xb5c>
   11f90:	mov	r2, #172	; 0xac
   11f94:	ldr	r1, [pc, #188]	; 12058 <__assert_fail@plt+0xb60>
   11f98:	ldr	r0, [pc, #196]	; 12064 <__assert_fail@plt+0xb6c>
   11f9c:	bl	114f8 <__assert_fail@plt>
   11fa0:	ldr	r3, [sp, #40]	; 0x28
   11fa4:	cmp	r3, #0
   11fa8:	bne	11ee0 <__assert_fail@plt+0x9e8>
   11fac:	b	11fb4 <__assert_fail@plt+0xabc>
   11fb0:	mov	r4, r5
   11fb4:	mov	r0, r4
   11fb8:	bl	11cb0 <__assert_fail@plt+0x7b8>
   11fbc:	mov	r4, r0
   11fc0:	b	11dc8 <__assert_fail@plt+0x8d0>
   11fc4:	cmn	r5, #1
   11fc8:	bne	11ff8 <__assert_fail@plt+0xb00>
   11fcc:	ldr	r3, [sp, #360]	; 0x168
   11fd0:	cmp	r3, #0
   11fd4:	beq	11fe8 <__assert_fail@plt+0xaf0>
   11fd8:	ldr	r0, [pc, #104]	; 12048 <__assert_fail@plt+0xb50>
   11fdc:	bl	11b78 <__assert_fail@plt+0x680>
   11fe0:	mov	r4, r0
   11fe4:	b	11dc8 <__assert_fail@plt+0x8d0>
   11fe8:	mov	r0, #0
   11fec:	bl	11cb0 <__assert_fail@plt+0x7b8>
   11ff0:	mov	r4, r0
   11ff4:	b	11dc8 <__assert_fail@plt+0x8d0>
   11ff8:	cmn	r5, #2
   11ffc:	movne	r4, #75	; 0x4b
   12000:	bne	1200c <__assert_fail@plt+0xb14>
   12004:	bl	113f0 <__errno_location@plt>
   12008:	ldr	r4, [r0]
   1200c:	mov	r2, #5
   12010:	ldr	r1, [pc, #80]	; 12068 <__assert_fail@plt+0xb70>
   12014:	mov	r0, #0
   12018:	bl	11288 <dcgettext@plt>
   1201c:	mov	r2, r0
   12020:	mov	r1, r4
   12024:	mov	r0, #3
   12028:	bl	11324 <error@plt>
   1202c:	ldr	r0, [sp, #72]	; 0x48
   12030:	bl	13340 <__assert_fail@plt+0x1e48>
   12034:	ldr	r0, [sp, #76]	; 0x4c
   12038:	bl	13340 <__assert_fail@plt+0x1e48>
   1203c:	b	11dd4 <__assert_fail@plt+0x8dc>
   12040:	andeq	r0, r0, r6, asr #5
   12044:	strdeq	r6, [r3], -r0
   12048:			; <UNDEFINED> instruction: 0x000244b8
   1204c:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   12050:	andeq	r4, r2, r8, lsl sp
   12054:	andeq	r4, r2, ip, lsr r1
   12058:	andeq	r4, r2, r0, asr sl
   1205c:	andeq	r4, r2, r0, ror #20
   12060:	andeq	r4, r2, r8, ror sl
   12064:	muleq	r2, r0, sl
   12068:	andeq	r4, r2, r4, lsr #21
   1206c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12070:	sub	sp, sp, #132	; 0x84
   12074:	mov	r8, r0
   12078:	ldr	r0, [pc, #2484]	; 12a34 <__assert_fail@plt+0x153c>
   1207c:	bl	11664 <__assert_fail@plt+0x16c>
   12080:	cmp	r0, #0
   12084:	bne	120d4 <__assert_fail@plt+0xbdc>
   12088:	ldr	r0, [pc, #2472]	; 12a38 <__assert_fail@plt+0x1540>
   1208c:	bl	11664 <__assert_fail@plt+0x16c>
   12090:	cmp	r0, #0
   12094:	bne	12100 <__assert_fail@plt+0xc08>
   12098:	ldr	r0, [pc, #2460]	; 12a3c <__assert_fail@plt+0x1544>
   1209c:	bl	11664 <__assert_fail@plt+0x16c>
   120a0:	subs	r6, r0, #0
   120a4:	beq	1214c <__assert_fail@plt+0xc54>
   120a8:	mov	r0, r8
   120ac:	bl	1206c <__assert_fail@plt+0xb74>
   120b0:	mov	r7, r0
   120b4:	mov	r0, r8
   120b8:	bl	1206c <__assert_fail@plt+0xb74>
   120bc:	mov	r4, r0
   120c0:	cmp	r8, #0
   120c4:	bne	1212c <__assert_fail@plt+0xc34>
   120c8:	mov	r0, r4
   120cc:	bl	11c7c <__assert_fail@plt+0x784>
   120d0:	b	120f4 <__assert_fail@plt+0xbfc>
   120d4:	bl	11ab0 <__assert_fail@plt+0x5b8>
   120d8:	ldr	r2, [pc, #2400]	; 12a40 <__assert_fail@plt+0x1548>
   120dc:	ldr	r3, [r2]
   120e0:	add	r1, r3, #4
   120e4:	str	r1, [r2]
   120e8:	ldr	r0, [r3]
   120ec:	bl	11b78 <__assert_fail@plt+0x680>
   120f0:	mov	r7, r0
   120f4:	mov	r0, r7
   120f8:	add	sp, sp, #132	; 0x84
   120fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12100:	mov	r0, r8
   12104:	bl	1206c <__assert_fail@plt+0xb74>
   12108:	mov	r4, r0
   1210c:	bl	11c2c <__assert_fail@plt+0x734>
   12110:	ldr	r0, [r4, #4]
   12114:	bl	1381c <__assert_fail@plt+0x2324>
   12118:	bl	11cb0 <__assert_fail@plt+0x7b8>
   1211c:	mov	r7, r0
   12120:	mov	r0, r4
   12124:	bl	11c7c <__assert_fail@plt+0x784>
   12128:	b	120f4 <__assert_fail@plt+0xbfc>
   1212c:	mov	r1, r0
   12130:	mov	r0, r7
   12134:	bl	11cdc <__assert_fail@plt+0x7e4>
   12138:	mov	r5, r0
   1213c:	mov	r0, r7
   12140:	bl	11c7c <__assert_fail@plt+0x784>
   12144:	mov	r7, r5
   12148:	b	120c8 <__assert_fail@plt+0xbd0>
   1214c:	ldr	r0, [pc, #2288]	; 12a44 <__assert_fail@plt+0x154c>
   12150:	bl	11664 <__assert_fail@plt+0x16c>
   12154:	cmp	r0, #0
   12158:	bne	121e4 <__assert_fail@plt+0xcec>
   1215c:	ldr	r0, [pc, #2276]	; 12a48 <__assert_fail@plt+0x1550>
   12160:	bl	11664 <__assert_fail@plt+0x16c>
   12164:	cmp	r0, #0
   12168:	beq	1292c <__assert_fail@plt+0x1434>
   1216c:	mov	r0, r8
   12170:	bl	1206c <__assert_fail@plt+0xb74>
   12174:	mov	r5, r0
   12178:	mov	r0, r8
   1217c:	bl	1206c <__assert_fail@plt+0xb74>
   12180:	mov	r4, r0
   12184:	mov	r0, r8
   12188:	bl	1206c <__assert_fail@plt+0xb74>
   1218c:	mov	r6, r0
   12190:	str	r0, [sp]
   12194:	mov	r0, r5
   12198:	bl	11c2c <__assert_fail@plt+0x734>
   1219c:	mov	r0, r4
   121a0:	bl	11ba8 <__assert_fail@plt+0x6b0>
   121a4:	cmp	r0, #0
   121a8:	beq	121bc <__assert_fail@plt+0xcc4>
   121ac:	mov	r0, r6
   121b0:	bl	11ba8 <__assert_fail@plt+0x6b0>
   121b4:	subs	r6, r0, #0
   121b8:	bne	12600 <__assert_fail@plt+0x1108>
   121bc:	ldr	r0, [pc, #2184]	; 12a4c <__assert_fail@plt+0x1554>
   121c0:	bl	11b78 <__assert_fail@plt+0x680>
   121c4:	mov	r7, r0
   121c8:	mov	r0, r5
   121cc:	bl	11c7c <__assert_fail@plt+0x784>
   121d0:	mov	r0, r4
   121d4:	bl	11c7c <__assert_fail@plt+0x784>
   121d8:	ldr	r0, [sp]
   121dc:	bl	11c7c <__assert_fail@plt+0x784>
   121e0:	b	120f4 <__assert_fail@plt+0xbfc>
   121e4:	mov	r0, r8
   121e8:	bl	1206c <__assert_fail@plt+0xb74>
   121ec:	mov	r4, r0
   121f0:	str	r0, [sp]
   121f4:	mov	r0, r8
   121f8:	bl	1206c <__assert_fail@plt+0xb74>
   121fc:	mov	r9, r0
   12200:	mov	r0, r4
   12204:	bl	11c2c <__assert_fail@plt+0x734>
   12208:	mov	r0, r9
   1220c:	bl	11c2c <__assert_fail@plt+0x734>
   12210:	ldr	fp, [r9, #4]
   12214:	ldrb	r3, [fp]
   12218:	cmp	r3, #0
   1221c:	moveq	r8, #0
   12220:	bne	12244 <__assert_fail@plt+0xd4c>
   12224:	mov	r0, r8
   12228:	bl	11cb0 <__assert_fail@plt+0x7b8>
   1222c:	mov	r7, r0
   12230:	ldr	r0, [sp]
   12234:	bl	11c7c <__assert_fail@plt+0x784>
   12238:	mov	r0, r9
   1223c:	bl	11c7c <__assert_fail@plt+0x784>
   12240:	b	120f4 <__assert_fail@plt+0xbfc>
   12244:	ldr	r3, [sp]
   12248:	ldr	r4, [r3, #4]
   1224c:	bl	11300 <__ctype_get_mb_cur_max@plt>
   12250:	cmp	r0, #1
   12254:	bls	125e0 <__assert_fail@plt+0x10e8>
   12258:	str	r4, [sp, #32]
   1225c:	mov	r8, #0
   12260:	strb	r8, [sp, #16]
   12264:	str	r8, [sp, #20]
   12268:	str	r8, [sp, #24]
   1226c:	strb	r8, [sp, #28]
   12270:	mov	r4, #1
   12274:	mov	r5, r8
   12278:	ldr	sl, [pc, #2000]	; 12a50 <__assert_fail@plt+0x1558>
   1227c:	b	122ac <__assert_fail@plt+0xdb4>
   12280:	ldr	r3, [sp, #32]
   12284:	ldrb	r1, [r3]
   12288:	mov	r0, fp
   1228c:	bl	1361c <__assert_fail@plt+0x2124>
   12290:	cmp	r0, #0
   12294:	bne	12224 <__assert_fail@plt+0xd2c>
   12298:	ldr	r2, [sp, #36]	; 0x24
   1229c:	ldr	r3, [sp, #32]
   122a0:	add	r3, r3, r2
   122a4:	str	r3, [sp, #32]
   122a8:	strb	r5, [sp, #28]
   122ac:	ldrb	r3, [sp, #28]
   122b0:	cmp	r3, #0
   122b4:	bne	122f8 <__assert_fail@plt+0xe00>
   122b8:	ldrb	r3, [sp, #16]
   122bc:	cmp	r3, #0
   122c0:	bne	124f8 <__assert_fail@plt+0x1000>
   122c4:	ldr	r1, [sp, #32]
   122c8:	ldrb	r3, [r1]
   122cc:	lsr	r2, r3, #5
   122d0:	and	r3, r3, #31
   122d4:	ldr	r2, [sl, r2, lsl #2]
   122d8:	lsr	r3, r2, r3
   122dc:	tst	r3, #1
   122e0:	beq	124e4 <__assert_fail@plt+0xfec>
   122e4:	str	r4, [sp, #36]	; 0x24
   122e8:	ldrb	r3, [r1]
   122ec:	str	r3, [sp, #44]	; 0x2c
   122f0:	strb	r4, [sp, #40]	; 0x28
   122f4:	strb	r4, [sp, #28]
   122f8:	ldrb	r3, [sp, #40]	; 0x28
   122fc:	cmp	r3, #0
   12300:	bne	125cc <__assert_fail@plt+0x10d4>
   12304:	add	r8, r8, #1
   12308:	ldr	r3, [sp, #36]	; 0x24
   1230c:	cmp	r3, #1
   12310:	beq	12280 <__assert_fail@plt+0xd88>
   12314:	str	fp, [sp, #88]	; 0x58
   12318:	strb	r5, [sp, #72]	; 0x48
   1231c:	str	r5, [sp, #76]	; 0x4c
   12320:	str	r5, [sp, #80]	; 0x50
   12324:	strb	r5, [sp, #84]	; 0x54
   12328:	b	1241c <__assert_fail@plt+0xf24>
   1232c:	ldr	r1, [sp, #32]
   12330:	ldr	r0, [sp, #88]	; 0x58
   12334:	bl	11270 <memcmp@plt>
   12338:	clz	r0, r0
   1233c:	lsr	r0, r0, #5
   12340:	b	123fc <__assert_fail@plt+0xf04>
   12344:	add	r0, sp, #76	; 0x4c
   12348:	bl	11264 <mbsinit@plt>
   1234c:	cmp	r0, #0
   12350:	beq	12468 <__assert_fail@plt+0xf70>
   12354:	strb	r4, [sp, #72]	; 0x48
   12358:	ldr	r7, [sp, #88]	; 0x58
   1235c:	bl	11300 <__ctype_get_mb_cur_max@plt>
   12360:	mov	r1, r0
   12364:	mov	r0, r7
   12368:	bl	228a8 <__assert_fail@plt+0x113b0>
   1236c:	add	r3, sp, #76	; 0x4c
   12370:	mov	r2, r0
   12374:	mov	r1, r7
   12378:	add	r0, sp, #100	; 0x64
   1237c:	bl	135c4 <__assert_fail@plt+0x20cc>
   12380:	str	r0, [sp, #92]	; 0x5c
   12384:	cmn	r0, #1
   12388:	streq	r4, [sp, #92]	; 0x5c
   1238c:	strbeq	r5, [sp, #96]	; 0x60
   12390:	beq	123d8 <__assert_fail@plt+0xee0>
   12394:	cmn	r0, #2
   12398:	beq	1247c <__assert_fail@plt+0xf84>
   1239c:	cmp	r0, #0
   123a0:	bne	123c4 <__assert_fail@plt+0xecc>
   123a4:	str	r4, [sp, #92]	; 0x5c
   123a8:	ldr	r3, [sp, #88]	; 0x58
   123ac:	ldrb	r3, [r3]
   123b0:	cmp	r3, #0
   123b4:	bne	12490 <__assert_fail@plt+0xf98>
   123b8:	ldr	r3, [sp, #100]	; 0x64
   123bc:	cmp	r3, #0
   123c0:	bne	124a4 <__assert_fail@plt+0xfac>
   123c4:	strb	r4, [sp, #96]	; 0x60
   123c8:	add	r0, sp, #76	; 0x4c
   123cc:	bl	11264 <mbsinit@plt>
   123d0:	cmp	r0, #0
   123d4:	strbne	r5, [sp, #72]	; 0x48
   123d8:	strb	r4, [sp, #84]	; 0x54
   123dc:	ldrb	r3, [sp, #96]	; 0x60
   123e0:	cmp	r3, #0
   123e4:	bne	124b8 <__assert_fail@plt+0xfc0>
   123e8:	ldr	r2, [sp, #92]	; 0x5c
   123ec:	ldr	r3, [sp, #36]	; 0x24
   123f0:	cmp	r2, r3
   123f4:	movne	r0, r6
   123f8:	beq	1232c <__assert_fail@plt+0xe34>
   123fc:	and	r0, r0, #1
   12400:	cmp	r0, #0
   12404:	bne	12224 <__assert_fail@plt+0xd2c>
   12408:	ldr	r2, [sp, #92]	; 0x5c
   1240c:	ldr	r3, [sp, #88]	; 0x58
   12410:	add	r3, r3, r2
   12414:	str	r3, [sp, #88]	; 0x58
   12418:	strb	r5, [sp, #84]	; 0x54
   1241c:	ldrb	r3, [sp, #84]	; 0x54
   12420:	cmp	r3, #0
   12424:	bne	123dc <__assert_fail@plt+0xee4>
   12428:	ldrb	r3, [sp, #72]	; 0x48
   1242c:	cmp	r3, #0
   12430:	bne	12358 <__assert_fail@plt+0xe60>
   12434:	ldr	r1, [sp, #88]	; 0x58
   12438:	ldrb	r3, [r1]
   1243c:	lsr	r2, r3, #5
   12440:	and	r3, r3, #31
   12444:	ldr	r2, [sl, r2, lsl #2]
   12448:	lsr	r3, r2, r3
   1244c:	tst	r3, #1
   12450:	beq	12344 <__assert_fail@plt+0xe4c>
   12454:	str	r4, [sp, #92]	; 0x5c
   12458:	ldrb	r3, [r1]
   1245c:	str	r3, [sp, #100]	; 0x64
   12460:	strb	r4, [sp, #96]	; 0x60
   12464:	b	123d8 <__assert_fail@plt+0xee0>
   12468:	ldr	r3, [pc, #1508]	; 12a54 <__assert_fail@plt+0x155c>
   1246c:	mov	r2, #143	; 0x8f
   12470:	ldr	r1, [pc, #1504]	; 12a58 <__assert_fail@plt+0x1560>
   12474:	ldr	r0, [pc, #1504]	; 12a5c <__assert_fail@plt+0x1564>
   12478:	bl	114f8 <__assert_fail@plt>
   1247c:	ldr	r0, [sp, #88]	; 0x58
   12480:	bl	113c0 <strlen@plt>
   12484:	str	r0, [sp, #92]	; 0x5c
   12488:	strb	r5, [sp, #96]	; 0x60
   1248c:	b	123d8 <__assert_fail@plt+0xee0>
   12490:	ldr	r3, [pc, #1468]	; 12a54 <__assert_fail@plt+0x155c>
   12494:	mov	r2, #171	; 0xab
   12498:	ldr	r1, [pc, #1464]	; 12a58 <__assert_fail@plt+0x1560>
   1249c:	ldr	r0, [pc, #1468]	; 12a60 <__assert_fail@plt+0x1568>
   124a0:	bl	114f8 <__assert_fail@plt>
   124a4:	ldr	r3, [pc, #1448]	; 12a54 <__assert_fail@plt+0x155c>
   124a8:	mov	r2, #172	; 0xac
   124ac:	ldr	r1, [pc, #1444]	; 12a58 <__assert_fail@plt+0x1560>
   124b0:	ldr	r0, [pc, #1452]	; 12a64 <__assert_fail@plt+0x156c>
   124b4:	bl	114f8 <__assert_fail@plt>
   124b8:	ldr	r2, [sp, #100]	; 0x64
   124bc:	cmp	r2, #0
   124c0:	beq	12298 <__assert_fail@plt+0xda0>
   124c4:	ldrb	r3, [sp, #40]	; 0x28
   124c8:	cmp	r3, #0
   124cc:	beq	123e8 <__assert_fail@plt+0xef0>
   124d0:	ldr	r0, [sp, #44]	; 0x2c
   124d4:	cmp	r0, r2
   124d8:	movne	r0, #0
   124dc:	moveq	r0, #1
   124e0:	b	12400 <__assert_fail@plt+0xf08>
   124e4:	add	r0, sp, #20
   124e8:	bl	11264 <mbsinit@plt>
   124ec:	cmp	r0, #0
   124f0:	beq	1257c <__assert_fail@plt+0x1084>
   124f4:	strb	r4, [sp, #16]
   124f8:	ldr	r7, [sp, #32]
   124fc:	bl	11300 <__ctype_get_mb_cur_max@plt>
   12500:	mov	r1, r0
   12504:	mov	r0, r7
   12508:	bl	228a8 <__assert_fail@plt+0x113b0>
   1250c:	add	r3, sp, #20
   12510:	mov	r2, r0
   12514:	mov	r1, r7
   12518:	add	r0, sp, #44	; 0x2c
   1251c:	bl	135c4 <__assert_fail@plt+0x20cc>
   12520:	str	r0, [sp, #36]	; 0x24
   12524:	cmn	r0, #1
   12528:	streq	r4, [sp, #36]	; 0x24
   1252c:	strbeq	r5, [sp, #40]	; 0x28
   12530:	beq	122f4 <__assert_fail@plt+0xdfc>
   12534:	cmn	r0, #2
   12538:	beq	12590 <__assert_fail@plt+0x1098>
   1253c:	cmp	r0, #0
   12540:	bne	12564 <__assert_fail@plt+0x106c>
   12544:	str	r4, [sp, #36]	; 0x24
   12548:	ldr	r3, [sp, #32]
   1254c:	ldrb	r3, [r3]
   12550:	cmp	r3, #0
   12554:	bne	125a4 <__assert_fail@plt+0x10ac>
   12558:	ldr	r3, [sp, #44]	; 0x2c
   1255c:	cmp	r3, #0
   12560:	bne	125b8 <__assert_fail@plt+0x10c0>
   12564:	strb	r4, [sp, #40]	; 0x28
   12568:	add	r0, sp, #20
   1256c:	bl	11264 <mbsinit@plt>
   12570:	cmp	r0, #0
   12574:	strbne	r5, [sp, #16]
   12578:	b	122f4 <__assert_fail@plt+0xdfc>
   1257c:	ldr	r3, [pc, #1232]	; 12a54 <__assert_fail@plt+0x155c>
   12580:	mov	r2, #143	; 0x8f
   12584:	ldr	r1, [pc, #1228]	; 12a58 <__assert_fail@plt+0x1560>
   12588:	ldr	r0, [pc, #1228]	; 12a5c <__assert_fail@plt+0x1564>
   1258c:	bl	114f8 <__assert_fail@plt>
   12590:	ldr	r0, [sp, #32]
   12594:	bl	113c0 <strlen@plt>
   12598:	str	r0, [sp, #36]	; 0x24
   1259c:	strb	r5, [sp, #40]	; 0x28
   125a0:	b	122f4 <__assert_fail@plt+0xdfc>
   125a4:	ldr	r3, [pc, #1192]	; 12a54 <__assert_fail@plt+0x155c>
   125a8:	mov	r2, #171	; 0xab
   125ac:	ldr	r1, [pc, #1188]	; 12a58 <__assert_fail@plt+0x1560>
   125b0:	ldr	r0, [pc, #1192]	; 12a60 <__assert_fail@plt+0x1568>
   125b4:	bl	114f8 <__assert_fail@plt>
   125b8:	ldr	r3, [pc, #1172]	; 12a54 <__assert_fail@plt+0x155c>
   125bc:	mov	r2, #172	; 0xac
   125c0:	ldr	r1, [pc, #1168]	; 12a58 <__assert_fail@plt+0x1560>
   125c4:	ldr	r0, [pc, #1176]	; 12a64 <__assert_fail@plt+0x156c>
   125c8:	bl	114f8 <__assert_fail@plt>
   125cc:	ldr	r3, [sp, #44]	; 0x2c
   125d0:	cmp	r3, #0
   125d4:	bne	12304 <__assert_fail@plt+0xe0c>
   125d8:	mov	r8, #0
   125dc:	b	12224 <__assert_fail@plt+0xd2c>
   125e0:	mov	r1, fp
   125e4:	mov	r0, r4
   125e8:	bl	111d4 <strcspn@plt>
   125ec:	ldrb	r3, [r4, r0]
   125f0:	cmp	r3, #0
   125f4:	addne	r8, r0, #1
   125f8:	moveq	r8, #0
   125fc:	b	12224 <__assert_fail@plt+0xd2c>
   12600:	ldr	r3, [r4, #8]
   12604:	cmp	r3, #0
   12608:	mvnlt	r9, #0
   1260c:	blt	1261c <__assert_fail@plt+0x1124>
   12610:	cmp	r3, #1
   12614:	mvnhi	r9, #1
   12618:	bls	126b0 <__assert_fail@plt+0x11b8>
   1261c:	ldr	r3, [sp]
   12620:	ldr	r3, [r3, #8]
   12624:	cmp	r3, #0
   12628:	mvnlt	r8, #0
   1262c:	blt	1263c <__assert_fail@plt+0x1144>
   12630:	cmp	r3, #1
   12634:	mvnhi	r8, #1
   12638:	bls	126d0 <__assert_fail@plt+0x11d8>
   1263c:	ldr	r7, [r5, #4]
   12640:	mov	r0, r7
   12644:	bl	113c0 <strlen@plt>
   12648:	mov	sl, r0
   1264c:	bl	11300 <__ctype_get_mb_cur_max@plt>
   12650:	cmp	r0, #1
   12654:	movls	r0, sl
   12658:	bls	12664 <__assert_fail@plt+0x116c>
   1265c:	mov	r0, r7
   12660:	bl	1381c <__assert_fail@plt+0x2324>
   12664:	clz	r3, r9
   12668:	lsr	r3, r3, #5
   1266c:	cmp	r0, r9
   12670:	orrcc	r3, r3, #1
   12674:	cmp	r3, #0
   12678:	bne	12688 <__assert_fail@plt+0x1190>
   1267c:	sub	r3, r8, #1
   12680:	cmn	r3, #3
   12684:	bls	126f4 <__assert_fail@plt+0x11fc>
   12688:	ldr	r0, [pc, #956]	; 12a4c <__assert_fail@plt+0x1554>
   1268c:	bl	23674 <__assert_fail@plt+0x1217c>
   12690:	str	r0, [sp, #8]
   12694:	ldr	r6, [sp, #8]
   12698:	mov	r0, r6
   1269c:	bl	11b78 <__assert_fail@plt+0x680>
   126a0:	mov	r7, r0
   126a4:	mov	r0, r6
   126a8:	bl	13340 <__assert_fail@plt+0x1e48>
   126ac:	b	121c8 <__assert_fail@plt+0xcd0>
   126b0:	ldr	r2, [r4, #12]
   126b4:	ldr	r9, [r2]
   126b8:	cmp	r3, #0
   126bc:	moveq	r9, #0
   126c0:	beq	1261c <__assert_fail@plt+0x1124>
   126c4:	cmn	r9, #1
   126c8:	mvneq	r9, #1
   126cc:	b	1261c <__assert_fail@plt+0x1124>
   126d0:	ldr	r2, [sp]
   126d4:	ldr	r2, [r2, #12]
   126d8:	ldr	r8, [r2]
   126dc:	cmp	r3, #0
   126e0:	moveq	r8, #0
   126e4:	beq	1263c <__assert_fail@plt+0x1144>
   126e8:	cmn	r8, #1
   126ec:	mvneq	r8, #1
   126f0:	b	1263c <__assert_fail@plt+0x1144>
   126f4:	rsb	r3, r9, #1
   126f8:	add	r0, r3, r0
   126fc:	cmp	r0, r8
   12700:	movcc	r8, r0
   12704:	bl	11300 <__ctype_get_mb_cur_max@plt>
   12708:	cmp	r0, #1
   1270c:	beq	1274c <__assert_fail@plt+0x1254>
   12710:	add	r0, sl, #1
   12714:	bl	230ec <__assert_fail@plt+0x11bf4>
   12718:	str	r0, [sp, #8]
   1271c:	str	r7, [sp, #88]	; 0x58
   12720:	mov	r3, #0
   12724:	strb	r3, [sp, #72]	; 0x48
   12728:	str	r3, [sp, #76]	; 0x4c
   1272c:	str	r3, [sp, #80]	; 0x50
   12730:	strb	r3, [sp, #84]	; 0x54
   12734:	str	r0, [sp, #4]
   12738:	mov	r7, #1
   1273c:	mov	sl, r7
   12740:	mov	fp, #0
   12744:	str	r4, [sp, #12]
   12748:	b	12868 <__assert_fail@plt+0x1370>
   1274c:	add	r0, r8, #1
   12750:	bl	230ec <__assert_fail@plt+0x11bf4>
   12754:	str	r0, [sp, #8]
   12758:	sub	r1, r9, #1
   1275c:	mov	r2, r8
   12760:	add	r1, r7, r1
   12764:	bl	11390 <mempcpy@plt>
   12768:	str	r0, [sp, #4]
   1276c:	b	1291c <__assert_fail@plt+0x1424>
   12770:	sub	r8, r8, #1
   12774:	ldr	r2, [sp, #92]	; 0x5c
   12778:	ldr	r1, [sp, #88]	; 0x58
   1277c:	ldr	r0, [sp, #4]
   12780:	bl	11390 <mempcpy@plt>
   12784:	str	r0, [sp, #4]
   12788:	b	12850 <__assert_fail@plt+0x1358>
   1278c:	add	r0, sp, #76	; 0x4c
   12790:	bl	11264 <mbsinit@plt>
   12794:	cmp	r0, #0
   12798:	beq	128b8 <__assert_fail@plt+0x13c0>
   1279c:	strb	sl, [sp, #72]	; 0x48
   127a0:	ldr	r4, [sp, #88]	; 0x58
   127a4:	bl	11300 <__ctype_get_mb_cur_max@plt>
   127a8:	mov	r1, r0
   127ac:	mov	r0, r4
   127b0:	bl	228a8 <__assert_fail@plt+0x113b0>
   127b4:	add	r3, sp, #76	; 0x4c
   127b8:	mov	r2, r0
   127bc:	mov	r1, r4
   127c0:	add	r0, sp, #100	; 0x64
   127c4:	bl	135c4 <__assert_fail@plt+0x20cc>
   127c8:	str	r0, [sp, #92]	; 0x5c
   127cc:	cmn	r0, #1
   127d0:	streq	sl, [sp, #92]	; 0x5c
   127d4:	strbeq	fp, [sp, #96]	; 0x60
   127d8:	beq	12820 <__assert_fail@plt+0x1328>
   127dc:	cmn	r0, #2
   127e0:	beq	128cc <__assert_fail@plt+0x13d4>
   127e4:	cmp	r0, #0
   127e8:	bne	1280c <__assert_fail@plt+0x1314>
   127ec:	str	sl, [sp, #92]	; 0x5c
   127f0:	ldr	r3, [sp, #88]	; 0x58
   127f4:	ldrb	r3, [r3]
   127f8:	cmp	r3, #0
   127fc:	bne	128e0 <__assert_fail@plt+0x13e8>
   12800:	ldr	r3, [sp, #100]	; 0x64
   12804:	cmp	r3, #0
   12808:	bne	128f4 <__assert_fail@plt+0x13fc>
   1280c:	strb	sl, [sp, #96]	; 0x60
   12810:	add	r0, sp, #76	; 0x4c
   12814:	bl	11264 <mbsinit@plt>
   12818:	cmp	r0, #0
   1281c:	strbne	fp, [sp, #72]	; 0x48
   12820:	strb	sl, [sp, #84]	; 0x54
   12824:	ldrb	r3, [sp, #96]	; 0x60
   12828:	cmp	r3, #0
   1282c:	moveq	r3, r6
   12830:	bne	12908 <__assert_fail@plt+0x1410>
   12834:	cmp	r8, #0
   12838:	moveq	r3, #0
   1283c:	andne	r3, r3, #1
   12840:	cmp	r3, #0
   12844:	beq	12918 <__assert_fail@plt+0x1420>
   12848:	cmp	r7, r9
   1284c:	bcs	12770 <__assert_fail@plt+0x1278>
   12850:	ldr	r2, [sp, #92]	; 0x5c
   12854:	ldr	r3, [sp, #88]	; 0x58
   12858:	add	r3, r3, r2
   1285c:	str	r3, [sp, #88]	; 0x58
   12860:	strb	fp, [sp, #84]	; 0x54
   12864:	add	r7, r7, #1
   12868:	ldrb	r3, [sp, #84]	; 0x54
   1286c:	cmp	r3, #0
   12870:	bne	12824 <__assert_fail@plt+0x132c>
   12874:	ldrb	r3, [sp, #72]	; 0x48
   12878:	cmp	r3, #0
   1287c:	bne	127a0 <__assert_fail@plt+0x12a8>
   12880:	ldr	r1, [sp, #88]	; 0x58
   12884:	ldrb	r3, [r1]
   12888:	lsr	r2, r3, #5
   1288c:	and	r3, r3, #31
   12890:	ldr	r0, [pc, #440]	; 12a50 <__assert_fail@plt+0x1558>
   12894:	ldr	r2, [r0, r2, lsl #2]
   12898:	lsr	r3, r2, r3
   1289c:	tst	r3, #1
   128a0:	beq	1278c <__assert_fail@plt+0x1294>
   128a4:	str	sl, [sp, #92]	; 0x5c
   128a8:	ldrb	r3, [r1]
   128ac:	str	r3, [sp, #100]	; 0x64
   128b0:	strb	sl, [sp, #96]	; 0x60
   128b4:	b	12820 <__assert_fail@plt+0x1328>
   128b8:	ldr	r3, [pc, #404]	; 12a54 <__assert_fail@plt+0x155c>
   128bc:	mov	r2, #143	; 0x8f
   128c0:	ldr	r1, [pc, #400]	; 12a58 <__assert_fail@plt+0x1560>
   128c4:	ldr	r0, [pc, #400]	; 12a5c <__assert_fail@plt+0x1564>
   128c8:	bl	114f8 <__assert_fail@plt>
   128cc:	ldr	r0, [sp, #88]	; 0x58
   128d0:	bl	113c0 <strlen@plt>
   128d4:	str	r0, [sp, #92]	; 0x5c
   128d8:	strb	fp, [sp, #96]	; 0x60
   128dc:	b	12820 <__assert_fail@plt+0x1328>
   128e0:	ldr	r3, [pc, #364]	; 12a54 <__assert_fail@plt+0x155c>
   128e4:	mov	r2, #171	; 0xab
   128e8:	ldr	r1, [pc, #360]	; 12a58 <__assert_fail@plt+0x1560>
   128ec:	ldr	r0, [pc, #364]	; 12a60 <__assert_fail@plt+0x1568>
   128f0:	bl	114f8 <__assert_fail@plt>
   128f4:	ldr	r3, [pc, #344]	; 12a54 <__assert_fail@plt+0x155c>
   128f8:	mov	r2, #172	; 0xac
   128fc:	ldr	r1, [pc, #340]	; 12a58 <__assert_fail@plt+0x1560>
   12900:	ldr	r0, [pc, #348]	; 12a64 <__assert_fail@plt+0x156c>
   12904:	bl	114f8 <__assert_fail@plt>
   12908:	ldr	r3, [sp, #100]	; 0x64
   1290c:	adds	r3, r3, #0
   12910:	movne	r3, #1
   12914:	b	12834 <__assert_fail@plt+0x133c>
   12918:	ldr	r4, [sp, #12]
   1291c:	mov	r3, #0
   12920:	ldr	r2, [sp, #4]
   12924:	strb	r3, [r2]
   12928:	b	12694 <__assert_fail@plt+0x119c>
   1292c:	bl	11ab0 <__assert_fail@plt+0x5b8>
   12930:	ldr	r0, [pc, #304]	; 12a68 <__assert_fail@plt+0x1570>
   12934:	bl	11664 <__assert_fail@plt+0x16c>
   12938:	cmp	r0, #0
   1293c:	beq	129e4 <__assert_fail@plt+0x14ec>
   12940:	mov	r0, r8
   12944:	bl	12f8c <__assert_fail@plt+0x1a94>
   12948:	mov	r7, r0
   1294c:	ldr	r3, [pc, #236]	; 12a40 <__assert_fail@plt+0x1548>
   12950:	ldr	r4, [r3]
   12954:	ldr	r3, [r4]
   12958:	cmp	r3, #0
   1295c:	beq	129ac <__assert_fail@plt+0x14b4>
   12960:	ldr	r0, [pc, #260]	; 12a6c <__assert_fail@plt+0x1574>
   12964:	bl	11664 <__assert_fail@plt+0x16c>
   12968:	cmp	r0, #0
   1296c:	bne	120f4 <__assert_fail@plt+0xbfc>
   12970:	mov	r2, #5
   12974:	ldr	r1, [pc, #244]	; 12a70 <__assert_fail@plt+0x1578>
   12978:	bl	11288 <dcgettext@plt>
   1297c:	mov	r4, r0
   12980:	ldr	r3, [pc, #184]	; 12a40 <__assert_fail@plt+0x1548>
   12984:	ldr	r3, [r3]
   12988:	ldr	r2, [r3]
   1298c:	mov	r1, #8
   12990:	mov	r0, #0
   12994:	bl	152a0 <__assert_fail@plt+0x3da8>
   12998:	mov	r3, r0
   1299c:	mov	r2, r4
   129a0:	mov	r1, #0
   129a4:	mov	r0, #2
   129a8:	bl	11324 <error@plt>
   129ac:	mov	r2, #5
   129b0:	ldr	r1, [pc, #188]	; 12a74 <__assert_fail@plt+0x157c>
   129b4:	mov	r0, #0
   129b8:	bl	11288 <dcgettext@plt>
   129bc:	mov	r5, r0
   129c0:	ldr	r2, [r4, #-4]
   129c4:	mov	r1, #8
   129c8:	mov	r0, #0
   129cc:	bl	152a0 <__assert_fail@plt+0x3da8>
   129d0:	mov	r3, r0
   129d4:	mov	r2, r5
   129d8:	mov	r1, #0
   129dc:	mov	r0, #2
   129e0:	bl	11324 <error@plt>
   129e4:	ldr	r0, [pc, #128]	; 12a6c <__assert_fail@plt+0x1574>
   129e8:	bl	11664 <__assert_fail@plt+0x16c>
   129ec:	cmp	r0, #0
   129f0:	bne	12a14 <__assert_fail@plt+0x151c>
   129f4:	ldr	r2, [pc, #68]	; 12a40 <__assert_fail@plt+0x1548>
   129f8:	ldr	r3, [r2]
   129fc:	add	r1, r3, #4
   12a00:	str	r1, [r2]
   12a04:	ldr	r0, [r3]
   12a08:	bl	11b78 <__assert_fail@plt+0x680>
   12a0c:	mov	r7, r0
   12a10:	b	120f4 <__assert_fail@plt+0xbfc>
   12a14:	mov	r2, #5
   12a18:	ldr	r1, [pc, #88]	; 12a78 <__assert_fail@plt+0x1580>
   12a1c:	mov	r0, #0
   12a20:	bl	11288 <dcgettext@plt>
   12a24:	mov	r2, r0
   12a28:	mov	r1, #0
   12a2c:	mov	r0, #2
   12a30:	bl	11324 <error@plt>
   12a34:	andeq	r4, r2, r8, asr #21
   12a38:	andeq	r4, r2, ip, asr #21
   12a3c:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   12a40:			; <UNDEFINED> instruction: 0x000361b0
   12a44:	ldrdeq	r4, [r2], -ip
   12a48:	andeq	r4, r2, r4, ror #21
   12a4c:			; <UNDEFINED> instruction: 0x000244b8
   12a50:	andeq	r4, r2, r8, lsl sp
   12a54:	andeq	r4, r2, ip, lsr r1
   12a58:	andeq	r4, r2, r0, asr sl
   12a5c:	andeq	r4, r2, r0, ror #20
   12a60:	andeq	r4, r2, r8, ror sl
   12a64:	muleq	r2, r0, sl
   12a68:	andeq	r4, r2, ip, ror #21
   12a6c:	andeq	r4, r2, r8, lsl fp
   12a70:	andeq	r4, r2, ip, lsl fp
   12a74:	strdeq	r4, [r2], -r0
   12a78:	andeq	r4, r2, r8, asr #22
   12a7c:	push	{r4, r5, r6, r7, r8, lr}
   12a80:	mov	r5, r0
   12a84:	bl	1206c <__assert_fail@plt+0xb74>
   12a88:	mov	r7, r0
   12a8c:	ldr	r6, [pc, #84]	; 12ae8 <__assert_fail@plt+0x15f0>
   12a90:	b	12a9c <__assert_fail@plt+0x15a4>
   12a94:	mov	r0, r4
   12a98:	bl	11c7c <__assert_fail@plt+0x784>
   12a9c:	mov	r0, r6
   12aa0:	bl	11664 <__assert_fail@plt+0x16c>
   12aa4:	cmp	r0, #0
   12aa8:	beq	12ae0 <__assert_fail@plt+0x15e8>
   12aac:	mov	r0, r5
   12ab0:	bl	1206c <__assert_fail@plt+0xb74>
   12ab4:	mov	r4, r0
   12ab8:	cmp	r5, #0
   12abc:	beq	12a94 <__assert_fail@plt+0x159c>
   12ac0:	mov	r1, r0
   12ac4:	mov	r0, r7
   12ac8:	bl	11cdc <__assert_fail@plt+0x7e4>
   12acc:	mov	r8, r0
   12ad0:	mov	r0, r7
   12ad4:	bl	11c7c <__assert_fail@plt+0x784>
   12ad8:	mov	r7, r8
   12adc:	b	12a94 <__assert_fail@plt+0x159c>
   12ae0:	mov	r0, r7
   12ae4:	pop	{r4, r5, r6, r7, r8, pc}
   12ae8:	andeq	r4, r2, r8, ror #22
   12aec:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12af0:	mov	r6, r0
   12af4:	bl	12a7c <__assert_fail@plt+0x1584>
   12af8:	mov	r8, r0
   12afc:	ldr	r7, [pc, #260]	; 12c08 <__assert_fail@plt+0x1710>
   12b00:	ldr	r9, [pc, #260]	; 12c0c <__assert_fail@plt+0x1714>
   12b04:	ldr	fp, [pc, #260]	; 12c10 <__assert_fail@plt+0x1718>
   12b08:	ldr	sl, [pc, #260]	; 12c14 <__assert_fail@plt+0x171c>
   12b0c:	b	12bc8 <__assert_fail@plt+0x16d0>
   12b10:	mov	r5, #0
   12b14:	mov	r0, r6
   12b18:	bl	12a7c <__assert_fail@plt+0x1584>
   12b1c:	mov	r4, r0
   12b20:	cmp	r6, #0
   12b24:	beq	12bc0 <__assert_fail@plt+0x16c8>
   12b28:	mov	r0, r8
   12b2c:	bl	11ba8 <__assert_fail@plt+0x6b0>
   12b30:	cmp	r0, #0
   12b34:	beq	12b6c <__assert_fail@plt+0x1674>
   12b38:	mov	r0, r4
   12b3c:	bl	11ba8 <__assert_fail@plt+0x6b0>
   12b40:	cmp	r0, #0
   12b44:	beq	12b6c <__assert_fail@plt+0x1674>
   12b48:	cmp	r5, #0
   12b4c:	beq	12bac <__assert_fail@plt+0x16b4>
   12b50:	ldr	r3, [r4, #8]
   12b54:	cmp	r3, #0
   12b58:	beq	12b8c <__assert_fail@plt+0x1694>
   12b5c:	cmp	r5, #1
   12b60:	moveq	r3, fp
   12b64:	movne	r3, sl
   12b68:	b	12bb0 <__assert_fail@plt+0x16b8>
   12b6c:	mov	r2, #5
   12b70:	ldr	r1, [pc, #160]	; 12c18 <__assert_fail@plt+0x1720>
   12b74:	mov	r0, #0
   12b78:	bl	11288 <dcgettext@plt>
   12b7c:	mov	r2, r0
   12b80:	mov	r1, #0
   12b84:	mov	r0, #2
   12b88:	bl	11324 <error@plt>
   12b8c:	mov	r2, #5
   12b90:	ldr	r1, [pc, #132]	; 12c1c <__assert_fail@plt+0x1724>
   12b94:	mov	r0, #0
   12b98:	bl	11288 <dcgettext@plt>
   12b9c:	mov	r2, r0
   12ba0:	mov	r1, #0
   12ba4:	mov	r0, #2
   12ba8:	bl	11324 <error@plt>
   12bac:	ldr	r3, [pc, #108]	; 12c20 <__assert_fail@plt+0x1728>
   12bb0:	add	r0, r8, #4
   12bb4:	add	r2, r4, #4
   12bb8:	mov	r1, r0
   12bbc:	blx	r3
   12bc0:	mov	r0, r4
   12bc4:	bl	11c7c <__assert_fail@plt+0x784>
   12bc8:	mov	r0, r7
   12bcc:	bl	11664 <__assert_fail@plt+0x16c>
   12bd0:	cmp	r0, #0
   12bd4:	bne	12b10 <__assert_fail@plt+0x1618>
   12bd8:	mov	r0, r9
   12bdc:	bl	11664 <__assert_fail@plt+0x16c>
   12be0:	cmp	r0, #0
   12be4:	movne	r5, #1
   12be8:	bne	12b14 <__assert_fail@plt+0x161c>
   12bec:	ldr	r0, [pc, #48]	; 12c24 <__assert_fail@plt+0x172c>
   12bf0:	bl	11664 <__assert_fail@plt+0x16c>
   12bf4:	cmp	r0, #0
   12bf8:	movne	r5, #2
   12bfc:	bne	12b14 <__assert_fail@plt+0x161c>
   12c00:	mov	r0, r8
   12c04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c08:	andeq	r4, r2, ip, ror #22
   12c0c:	andeq	r4, r2, r0, ror fp
   12c10:	andeq	r1, r1, r8, asr #3
   12c14:	ldrdeq	r1, [r1], -r8
   12c18:	andeq	r4, r2, r8, ror fp
   12c1c:	muleq	r2, r0, fp
   12c20:	andeq	r1, r1, ip, lsr #5
   12c24:	andeq	r4, r2, r4, ror fp
   12c28:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c2c:	mov	r6, r0
   12c30:	bl	12aec <__assert_fail@plt+0x15f4>
   12c34:	mov	r8, r0
   12c38:	ldr	r7, [pc, #184]	; 12cf8 <__assert_fail@plt+0x1800>
   12c3c:	mov	r9, #0
   12c40:	ldr	fp, [pc, #180]	; 12cfc <__assert_fail@plt+0x1804>
   12c44:	ldr	sl, [pc, #180]	; 12d00 <__assert_fail@plt+0x1808>
   12c48:	b	12ca8 <__assert_fail@plt+0x17b0>
   12c4c:	mov	r5, r9
   12c50:	mov	r0, r6
   12c54:	bl	12aec <__assert_fail@plt+0x15f4>
   12c58:	mov	r4, r0
   12c5c:	cmp	r6, #0
   12c60:	beq	12ca0 <__assert_fail@plt+0x17a8>
   12c64:	mov	r0, r8
   12c68:	bl	11ba8 <__assert_fail@plt+0x6b0>
   12c6c:	cmp	r0, #0
   12c70:	beq	12cd0 <__assert_fail@plt+0x17d8>
   12c74:	mov	r0, r4
   12c78:	bl	11ba8 <__assert_fail@plt+0x6b0>
   12c7c:	cmp	r0, #0
   12c80:	beq	12cd0 <__assert_fail@plt+0x17d8>
   12c84:	cmp	r5, #0
   12c88:	moveq	r3, fp
   12c8c:	movne	r3, sl
   12c90:	add	r0, r8, #4
   12c94:	add	r2, r4, #4
   12c98:	mov	r1, r0
   12c9c:	blx	r3
   12ca0:	mov	r0, r4
   12ca4:	bl	11c7c <__assert_fail@plt+0x784>
   12ca8:	mov	r0, r7
   12cac:	bl	11664 <__assert_fail@plt+0x16c>
   12cb0:	cmp	r0, #0
   12cb4:	bne	12c4c <__assert_fail@plt+0x1754>
   12cb8:	ldr	r0, [pc, #68]	; 12d04 <__assert_fail@plt+0x180c>
   12cbc:	bl	11664 <__assert_fail@plt+0x16c>
   12cc0:	cmp	r0, #0
   12cc4:	beq	12cf0 <__assert_fail@plt+0x17f8>
   12cc8:	mov	r5, #1
   12ccc:	b	12c50 <__assert_fail@plt+0x1758>
   12cd0:	mov	r2, #5
   12cd4:	ldr	r1, [pc, #44]	; 12d08 <__assert_fail@plt+0x1810>
   12cd8:	mov	r0, #0
   12cdc:	bl	11288 <dcgettext@plt>
   12ce0:	mov	r2, r0
   12ce4:	mov	r1, #0
   12ce8:	mov	r0, #2
   12cec:	bl	11324 <error@plt>
   12cf0:	mov	r0, r8
   12cf4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cf8:	andeq	r4, r2, r8, asr #21
   12cfc:			; <UNDEFINED> instruction: 0x000114b0
   12d00:	andeq	r1, r1, r0, asr #4
   12d04:	andeq	r4, r2, r4, lsr #23
   12d08:	andeq	r4, r2, r8, ror fp
   12d0c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d10:	mov	r6, r0
   12d14:	bl	12c28 <__assert_fail@plt+0x1730>
   12d18:	mov	r4, r0
   12d1c:	ldr	r9, [pc, #416]	; 12ec4 <__assert_fail@plt+0x19cc>
   12d20:	ldr	fp, [pc, #416]	; 12ec8 <__assert_fail@plt+0x19d0>
   12d24:	b	12e34 <__assert_fail@plt+0x193c>
   12d28:	mov	r7, #0
   12d2c:	mov	r0, r6
   12d30:	bl	12c28 <__assert_fail@plt+0x1730>
   12d34:	mov	r5, r0
   12d38:	cmp	r6, #0
   12d3c:	beq	12e14 <__assert_fail@plt+0x191c>
   12d40:	mov	r0, r4
   12d44:	bl	11c2c <__assert_fail@plt+0x734>
   12d48:	mov	r0, r5
   12d4c:	bl	11c2c <__assert_fail@plt+0x734>
   12d50:	ldr	r8, [r4, #4]
   12d54:	mov	r0, r8
   12d58:	bl	1162c <__assert_fail@plt+0x134>
   12d5c:	cmp	r0, #0
   12d60:	beq	12d88 <__assert_fail@plt+0x1890>
   12d64:	ldr	sl, [r5, #4]
   12d68:	mov	r0, sl
   12d6c:	bl	1162c <__assert_fail@plt+0x134>
   12d70:	cmp	r0, #0
   12d74:	beq	12d88 <__assert_fail@plt+0x1890>
   12d78:	mov	r1, sl
   12d7c:	mov	r0, r8
   12d80:	bl	228d4 <__assert_fail@plt+0x113dc>
   12d84:	b	12da0 <__assert_fail@plt+0x18a8>
   12d88:	bl	113f0 <__errno_location@plt>
   12d8c:	mov	r3, #0
   12d90:	str	r3, [r0]
   12d94:	ldr	r1, [r5, #4]
   12d98:	ldr	r0, [r4, #4]
   12d9c:	bl	11330 <strcoll@plt>
   12da0:	cmp	r7, #5
   12da4:	ldrls	pc, [pc, r7, lsl #2]
   12da8:	b	12e10 <__assert_fail@plt+0x1918>
   12dac:	andeq	r2, r1, r4, asr #27
   12db0:	andeq	r2, r1, ip, asr #27
   12db4:	ldrdeq	r2, [r1], -ip
   12db8:	andeq	r2, r1, r8, ror #27
   12dbc:	strdeq	r2, [r1], -r4
   12dc0:	andeq	r2, r1, r0, lsl #28
   12dc4:	lsr	r7, r0, #31
   12dc8:	b	12e18 <__assert_fail@plt+0x1920>
   12dcc:	cmp	r0, #0
   12dd0:	movgt	r7, #0
   12dd4:	movle	r7, #1
   12dd8:	b	12e18 <__assert_fail@plt+0x1920>
   12ddc:	clz	r7, r0
   12de0:	lsr	r7, r7, #5
   12de4:	b	12e18 <__assert_fail@plt+0x1920>
   12de8:	adds	r7, r0, #0
   12dec:	movne	r7, #1
   12df0:	b	12e18 <__assert_fail@plt+0x1920>
   12df4:	mvn	r7, r0
   12df8:	lsr	r7, r7, #31
   12dfc:	b	12e18 <__assert_fail@plt+0x1920>
   12e00:	cmp	r0, #0
   12e04:	movle	r7, #0
   12e08:	movgt	r7, #1
   12e0c:	b	12e18 <__assert_fail@plt+0x1920>
   12e10:	bl	114ec <abort@plt>
   12e14:	mov	r7, r6
   12e18:	mov	r0, r4
   12e1c:	bl	11c7c <__assert_fail@plt+0x784>
   12e20:	mov	r0, r5
   12e24:	bl	11c7c <__assert_fail@plt+0x784>
   12e28:	mov	r0, r7
   12e2c:	bl	11cb0 <__assert_fail@plt+0x7b8>
   12e30:	mov	r4, r0
   12e34:	mov	r0, r9
   12e38:	bl	11664 <__assert_fail@plt+0x16c>
   12e3c:	cmp	r0, #0
   12e40:	bne	12d28 <__assert_fail@plt+0x1830>
   12e44:	mov	r0, fp
   12e48:	bl	11664 <__assert_fail@plt+0x16c>
   12e4c:	cmp	r0, #0
   12e50:	movne	r7, #1
   12e54:	bne	12d2c <__assert_fail@plt+0x1834>
   12e58:	ldr	r0, [pc, #108]	; 12ecc <__assert_fail@plt+0x19d4>
   12e5c:	bl	11664 <__assert_fail@plt+0x16c>
   12e60:	cmp	r0, #0
   12e64:	movne	r7, #2
   12e68:	bne	12d2c <__assert_fail@plt+0x1834>
   12e6c:	ldr	r0, [pc, #92]	; 12ed0 <__assert_fail@plt+0x19d8>
   12e70:	bl	11664 <__assert_fail@plt+0x16c>
   12e74:	cmp	r0, #0
   12e78:	movne	r7, #2
   12e7c:	bne	12d2c <__assert_fail@plt+0x1834>
   12e80:	ldr	r0, [pc, #76]	; 12ed4 <__assert_fail@plt+0x19dc>
   12e84:	bl	11664 <__assert_fail@plt+0x16c>
   12e88:	cmp	r0, #0
   12e8c:	movne	r7, #3
   12e90:	bne	12d2c <__assert_fail@plt+0x1834>
   12e94:	ldr	r0, [pc, #60]	; 12ed8 <__assert_fail@plt+0x19e0>
   12e98:	bl	11664 <__assert_fail@plt+0x16c>
   12e9c:	cmp	r0, #0
   12ea0:	movne	r7, #4
   12ea4:	bne	12d2c <__assert_fail@plt+0x1834>
   12ea8:	ldr	r0, [pc, #44]	; 12edc <__assert_fail@plt+0x19e4>
   12eac:	bl	11664 <__assert_fail@plt+0x16c>
   12eb0:	cmp	r0, #0
   12eb4:	movne	r7, #5
   12eb8:	bne	12d2c <__assert_fail@plt+0x1834>
   12ebc:	mov	r0, r4
   12ec0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ec4:	andeq	r4, r2, r8, lsr #23
   12ec8:	andeq	r4, r2, ip, lsr #23
   12ecc:			; <UNDEFINED> instruction: 0x00024bb0
   12ed0:			; <UNDEFINED> instruction: 0x00024bb4
   12ed4:			; <UNDEFINED> instruction: 0x00024bb8
   12ed8:			; <UNDEFINED> instruction: 0x00024bbc
   12edc:	andeq	r4, r2, r0, asr #23
   12ee0:	push	{r4, r5, r6, r7, r8, lr}
   12ee4:	mov	r6, r0
   12ee8:	bl	12d0c <__assert_fail@plt+0x1814>
   12eec:	mov	r4, r0
   12ef0:	ldr	r7, [pc, #144]	; 12f88 <__assert_fail@plt+0x1a90>
   12ef4:	mov	r8, #0
   12ef8:	b	12f44 <__assert_fail@plt+0x1a4c>
   12efc:	and	r0, r0, #1
   12f00:	bl	12d0c <__assert_fail@plt+0x1814>
   12f04:	mov	r5, r0
   12f08:	mov	r0, r4
   12f0c:	bl	11b08 <__assert_fail@plt+0x610>
   12f10:	cmp	r0, #0
   12f14:	bne	12f28 <__assert_fail@plt+0x1a30>
   12f18:	mov	r0, r5
   12f1c:	bl	11b08 <__assert_fail@plt+0x610>
   12f20:	cmp	r0, #0
   12f24:	beq	12f74 <__assert_fail@plt+0x1a7c>
   12f28:	mov	r0, r4
   12f2c:	bl	11c7c <__assert_fail@plt+0x784>
   12f30:	mov	r0, r5
   12f34:	bl	11c7c <__assert_fail@plt+0x784>
   12f38:	mov	r0, r8
   12f3c:	bl	11cb0 <__assert_fail@plt+0x7b8>
   12f40:	mov	r4, r0
   12f44:	mov	r0, r7
   12f48:	bl	11664 <__assert_fail@plt+0x16c>
   12f4c:	cmp	r0, #0
   12f50:	beq	12f80 <__assert_fail@plt+0x1a88>
   12f54:	cmp	r6, #0
   12f58:	moveq	r0, r6
   12f5c:	beq	12efc <__assert_fail@plt+0x1a04>
   12f60:	mov	r0, r4
   12f64:	bl	11b08 <__assert_fail@plt+0x610>
   12f68:	eor	r0, r0, #1
   12f6c:	uxtb	r0, r0
   12f70:	b	12efc <__assert_fail@plt+0x1a04>
   12f74:	mov	r0, r5
   12f78:	bl	11c7c <__assert_fail@plt+0x784>
   12f7c:	b	12f44 <__assert_fail@plt+0x1a4c>
   12f80:	mov	r0, r4
   12f84:	pop	{r4, r5, r6, r7, r8, pc}
   12f88:	andeq	r4, r2, r4, asr #23
   12f8c:	push	{r4, r5, r6, r7, r8, lr}
   12f90:	mov	r6, r0
   12f94:	bl	12ee0 <__assert_fail@plt+0x19e8>
   12f98:	mov	r4, r0
   12f9c:	ldr	r7, [pc, #136]	; 1302c <__assert_fail@plt+0x1b34>
   12fa0:	mov	r8, #0
   12fa4:	b	12fb0 <__assert_fail@plt+0x1ab8>
   12fa8:	mov	r0, r5
   12fac:	bl	11c7c <__assert_fail@plt+0x784>
   12fb0:	mov	r0, r7
   12fb4:	bl	11664 <__assert_fail@plt+0x16c>
   12fb8:	cmp	r0, #0
   12fbc:	beq	13024 <__assert_fail@plt+0x1b2c>
   12fc0:	cmp	r6, #0
   12fc4:	moveq	r0, r6
   12fc8:	beq	12fd4 <__assert_fail@plt+0x1adc>
   12fcc:	mov	r0, r4
   12fd0:	bl	11b08 <__assert_fail@plt+0x610>
   12fd4:	and	r0, r0, #1
   12fd8:	bl	12ee0 <__assert_fail@plt+0x19e8>
   12fdc:	mov	r5, r0
   12fe0:	mov	r0, r4
   12fe4:	bl	11b08 <__assert_fail@plt+0x610>
   12fe8:	cmp	r0, #0
   12fec:	beq	12fa8 <__assert_fail@plt+0x1ab0>
   12ff0:	mov	r0, r4
   12ff4:	bl	11c7c <__assert_fail@plt+0x784>
   12ff8:	mov	r0, r5
   12ffc:	bl	11b08 <__assert_fail@plt+0x610>
   13000:	cmp	r0, #0
   13004:	moveq	r4, r5
   13008:	beq	12fb0 <__assert_fail@plt+0x1ab8>
   1300c:	mov	r0, r5
   13010:	bl	11c7c <__assert_fail@plt+0x784>
   13014:	mov	r0, r8
   13018:	bl	11cb0 <__assert_fail@plt+0x7b8>
   1301c:	mov	r4, r0
   13020:	b	12fb0 <__assert_fail@plt+0x1ab8>
   13024:	mov	r0, r4
   13028:	pop	{r4, r5, r6, r7, r8, pc}
   1302c:	andeq	r4, r2, r8, asr #23
   13030:	push	{r4, r5, r6, lr}
   13034:	sub	sp, sp, #24
   13038:	mov	r5, r0
   1303c:	mov	r4, r1
   13040:	ldr	r0, [r1]
   13044:	bl	139f0 <__assert_fail@plt+0x24f8>
   13048:	ldr	r1, [pc, #408]	; 131e8 <__assert_fail@plt+0x1cf0>
   1304c:	mov	r0, #6
   13050:	bl	1148c <setlocale@plt>
   13054:	ldr	r6, [pc, #400]	; 131ec <__assert_fail@plt+0x1cf4>
   13058:	ldr	r1, [pc, #400]	; 131f0 <__assert_fail@plt+0x1cf8>
   1305c:	mov	r0, r6
   13060:	bl	114c8 <bindtextdomain@plt>
   13064:	mov	r0, r6
   13068:	bl	112b8 <textdomain@plt>
   1306c:	mov	r2, #3
   13070:	ldr	r3, [pc, #380]	; 131f4 <__assert_fail@plt+0x1cfc>
   13074:	str	r2, [r3]
   13078:	ldr	r0, [pc, #376]	; 131f8 <__assert_fail@plt+0x1d00>
   1307c:	bl	240e0 <__assert_fail@plt+0x12be8>
   13080:	mov	r3, #0
   13084:	str	r3, [sp, #20]
   13088:	ldr	r3, [pc, #364]	; 131fc <__assert_fail@plt+0x1d04>
   1308c:	str	r3, [sp, #16]
   13090:	ldr	r3, [pc, #360]	; 13200 <__assert_fail@plt+0x1d08>
   13094:	str	r3, [sp, #12]
   13098:	ldr	r3, [pc, #356]	; 13204 <__assert_fail@plt+0x1d0c>
   1309c:	str	r3, [sp, #8]
   130a0:	ldr	r3, [pc, #352]	; 13208 <__assert_fail@plt+0x1d10>
   130a4:	str	r3, [sp, #4]
   130a8:	ldr	r3, [pc, #348]	; 1320c <__assert_fail@plt+0x1d14>
   130ac:	str	r3, [sp]
   130b0:	ldr	r3, [pc, #344]	; 13210 <__assert_fail@plt+0x1d18>
   130b4:	ldr	r2, [pc, #344]	; 13214 <__assert_fail@plt+0x1d1c>
   130b8:	mov	r1, r4
   130bc:	mov	r0, r5
   130c0:	bl	13398 <__assert_fail@plt+0x1ea0>
   130c4:	cmp	r5, #1
   130c8:	bls	13150 <__assert_fail@plt+0x1c58>
   130cc:	ldr	r1, [pc, #324]	; 13218 <__assert_fail@plt+0x1d20>
   130d0:	ldr	r0, [r4, #4]
   130d4:	bl	111bc <strcmp@plt>
   130d8:	cmp	r0, #0
   130dc:	bne	130f0 <__assert_fail@plt+0x1bf8>
   130e0:	add	r4, r4, #4
   130e4:	sub	r5, r5, #1
   130e8:	cmp	r5, #1
   130ec:	bls	13150 <__assert_fail@plt+0x1c58>
   130f0:	ldr	r5, [pc, #292]	; 1321c <__assert_fail@plt+0x1d24>
   130f4:	add	r4, r4, #4
   130f8:	str	r4, [r5]
   130fc:	mov	r0, #1
   13100:	bl	12f8c <__assert_fail@plt+0x1a94>
   13104:	mov	r6, r0
   13108:	ldr	r4, [r5]
   1310c:	ldr	r3, [r4]
   13110:	cmp	r3, #0
   13114:	beq	13178 <__assert_fail@plt+0x1c80>
   13118:	mov	r2, #5
   1311c:	ldr	r1, [pc, #252]	; 13220 <__assert_fail@plt+0x1d28>
   13120:	mov	r0, #0
   13124:	bl	11288 <dcgettext@plt>
   13128:	mov	r5, r0
   1312c:	ldr	r2, [r4]
   13130:	mov	r1, #8
   13134:	mov	r0, #0
   13138:	bl	152a0 <__assert_fail@plt+0x3da8>
   1313c:	mov	r3, r0
   13140:	mov	r2, r5
   13144:	mov	r1, #0
   13148:	mov	r0, #2
   1314c:	bl	11324 <error@plt>
   13150:	mov	r2, #5
   13154:	ldr	r1, [pc, #200]	; 13224 <__assert_fail@plt+0x1d2c>
   13158:	mov	r0, #0
   1315c:	bl	11288 <dcgettext@plt>
   13160:	mov	r2, r0
   13164:	mov	r1, #0
   13168:	mov	r0, r1
   1316c:	bl	11324 <error@plt>
   13170:	mov	r0, #2
   13174:	bl	116a8 <__assert_fail@plt+0x1b0>
   13178:	ldr	r3, [r0]
   1317c:	cmp	r3, #0
   13180:	beq	13190 <__assert_fail@plt+0x1c98>
   13184:	cmp	r3, #1
   13188:	beq	131d4 <__assert_fail@plt+0x1cdc>
   1318c:	bl	114ec <abort@plt>
   13190:	ldr	r4, [pc, #144]	; 13228 <__assert_fail@plt+0x1d30>
   13194:	add	r2, r0, #4
   13198:	mov	r1, #10
   1319c:	ldr	r0, [r4]
   131a0:	bl	112d0 <__gmpz_out_str@plt>
   131a4:	ldr	r0, [r4]
   131a8:	ldr	r3, [r0, #20]
   131ac:	ldr	r2, [r0, #24]
   131b0:	cmp	r3, r2
   131b4:	addcc	r2, r3, #1
   131b8:	strcc	r2, [r0, #20]
   131bc:	movcc	r2, #10
   131c0:	strbcc	r2, [r3]
   131c4:	bcc	131dc <__assert_fail@plt+0x1ce4>
   131c8:	mov	r1, #10
   131cc:	bl	11480 <__overflow@plt>
   131d0:	b	131dc <__assert_fail@plt+0x1ce4>
   131d4:	ldr	r0, [r0, #4]
   131d8:	bl	1133c <puts@plt>
   131dc:	mov	r0, r6
   131e0:	bl	11b08 <__assert_fail@plt+0x610>
   131e4:	bl	113b4 <exit@plt>
   131e8:			; <UNDEFINED> instruction: 0x000244b8
   131ec:	andeq	r4, r2, r0, lsl #19
   131f0:	andeq	r4, r2, ip, asr #23
   131f4:	andeq	r6, r3, ip, asr #2
   131f8:	andeq	r3, r1, ip, asr #4
   131fc:	andeq	r4, r2, r4, ror #23
   13200:	strdeq	r4, [r2], -r0
   13204:	andeq	r4, r2, r0, lsl #24
   13208:	andeq	r1, r1, r8, lsr #13
   1320c:	andeq	r4, r2, ip, lsl #24
   13210:	andeq	r4, r2, ip, ror r9
   13214:	andeq	r4, r2, r0, asr r1
   13218:	andeq	r4, r2, ip, lsl ip
   1321c:			; <UNDEFINED> instruction: 0x000361b0
   13220:	andeq	r4, r2, r0, lsr ip
   13224:	andeq	r4, r2, r0, lsr #24
   13228:	andeq	r6, r3, r4, lsr #3
   1322c:	ldr	r3, [pc, #4]	; 13238 <__assert_fail@plt+0x1d40>
   13230:	str	r0, [r3]
   13234:	bx	lr
   13238:			; <UNDEFINED> instruction: 0x000361b4
   1323c:	ldr	r3, [pc, #4]	; 13248 <__assert_fail@plt+0x1d50>
   13240:	strb	r0, [r3, #4]
   13244:	bx	lr
   13248:			; <UNDEFINED> instruction: 0x000361b4
   1324c:	push	{r4, r5, r6, lr}
   13250:	sub	sp, sp, #8
   13254:	ldr	r3, [pc, #200]	; 13324 <__assert_fail@plt+0x1e2c>
   13258:	ldr	r0, [r3]
   1325c:	bl	237a0 <__assert_fail@plt+0x122a8>
   13260:	cmp	r0, #0
   13264:	beq	13288 <__assert_fail@plt+0x1d90>
   13268:	ldr	r3, [pc, #184]	; 13328 <__assert_fail@plt+0x1e30>
   1326c:	ldrb	r3, [r3, #4]
   13270:	cmp	r3, #0
   13274:	beq	132a4 <__assert_fail@plt+0x1dac>
   13278:	bl	113f0 <__errno_location@plt>
   1327c:	ldr	r3, [r0]
   13280:	cmp	r3, #32
   13284:	bne	132a4 <__assert_fail@plt+0x1dac>
   13288:	ldr	r3, [pc, #156]	; 1332c <__assert_fail@plt+0x1e34>
   1328c:	ldr	r0, [r3]
   13290:	bl	237a0 <__assert_fail@plt+0x122a8>
   13294:	cmp	r0, #0
   13298:	bne	13318 <__assert_fail@plt+0x1e20>
   1329c:	add	sp, sp, #8
   132a0:	pop	{r4, r5, r6, pc}
   132a4:	mov	r2, #5
   132a8:	ldr	r1, [pc, #128]	; 13330 <__assert_fail@plt+0x1e38>
   132ac:	mov	r0, #0
   132b0:	bl	11288 <dcgettext@plt>
   132b4:	mov	r4, r0
   132b8:	ldr	r3, [pc, #104]	; 13328 <__assert_fail@plt+0x1e30>
   132bc:	ldr	r5, [r3]
   132c0:	cmp	r5, #0
   132c4:	beq	132fc <__assert_fail@plt+0x1e04>
   132c8:	bl	113f0 <__errno_location@plt>
   132cc:	ldr	r6, [r0]
   132d0:	mov	r0, r5
   132d4:	bl	153b8 <__assert_fail@plt+0x3ec0>
   132d8:	str	r4, [sp]
   132dc:	mov	r3, r0
   132e0:	ldr	r2, [pc, #76]	; 13334 <__assert_fail@plt+0x1e3c>
   132e4:	mov	r1, r6
   132e8:	mov	r0, #0
   132ec:	bl	11324 <error@plt>
   132f0:	ldr	r3, [pc, #64]	; 13338 <__assert_fail@plt+0x1e40>
   132f4:	ldr	r0, [r3]
   132f8:	bl	11228 <_exit@plt>
   132fc:	bl	113f0 <__errno_location@plt>
   13300:	mov	r3, r4
   13304:	ldr	r2, [pc, #48]	; 1333c <__assert_fail@plt+0x1e44>
   13308:	ldr	r1, [r0]
   1330c:	mov	r0, #0
   13310:	bl	11324 <error@plt>
   13314:	b	132f0 <__assert_fail@plt+0x1df8>
   13318:	ldr	r3, [pc, #24]	; 13338 <__assert_fail@plt+0x1e40>
   1331c:	ldr	r0, [r3]
   13320:	bl	11228 <_exit@plt>
   13324:	andeq	r6, r3, r4, lsr #3
   13328:			; <UNDEFINED> instruction: 0x000361b4
   1332c:	andeq	r6, r3, r0, lsr #3
   13330:	andeq	r4, r2, r4, asr #25
   13334:	ldrdeq	r4, [r2], -r0
   13338:	andeq	r6, r3, ip, asr #2
   1333c:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   13340:	push	{r4, r5, lr}
   13344:	sub	sp, sp, #12
   13348:	mov	r5, r0
   1334c:	bl	113f0 <__errno_location@plt>
   13350:	mov	r4, r0
   13354:	ldr	r3, [r0]
   13358:	str	r3, [sp]
   1335c:	str	r3, [sp, #4]
   13360:	mov	r3, #0
   13364:	str	r3, [r0]
   13368:	mov	r0, r5
   1336c:	bl	11210 <free@plt>
   13370:	ldr	r3, [r4]
   13374:	cmp	r3, #0
   13378:	moveq	r3, #4
   1337c:	movne	r3, #0
   13380:	add	r2, sp, #8
   13384:	add	r3, r2, r3
   13388:	ldr	r3, [r3, #-8]
   1338c:	str	r3, [r4]
   13390:	add	sp, sp, #12
   13394:	pop	{r4, r5, pc}
   13398:	push	{r4, r5, r6, lr}
   1339c:	sub	sp, sp, #16
   133a0:	ldr	ip, [pc, #152]	; 13440 <__assert_fail@plt+0x1f48>
   133a4:	ldr	r4, [ip]
   133a8:	mov	lr, #0
   133ac:	str	lr, [ip]
   133b0:	cmp	r0, #2
   133b4:	beq	133d4 <__assert_fail@plt+0x1edc>
   133b8:	ldr	r3, [pc, #128]	; 13440 <__assert_fail@plt+0x1f48>
   133bc:	str	r4, [r3]
   133c0:	mov	r2, #0
   133c4:	ldr	r3, [pc, #120]	; 13444 <__assert_fail@plt+0x1f4c>
   133c8:	str	r2, [r3]
   133cc:	add	sp, sp, #16
   133d0:	pop	{r4, r5, r6, pc}
   133d4:	mov	r6, r3
   133d8:	mov	r5, r2
   133dc:	str	lr, [sp]
   133e0:	ldr	r3, [pc, #96]	; 13448 <__assert_fail@plt+0x1f50>
   133e4:	ldr	r2, [pc, #96]	; 1344c <__assert_fail@plt+0x1f54>
   133e8:	bl	1139c <getopt_long@plt>
   133ec:	cmn	r0, #1
   133f0:	beq	133b8 <__assert_fail@plt+0x1ec0>
   133f4:	cmp	r0, #104	; 0x68
   133f8:	beq	13430 <__assert_fail@plt+0x1f38>
   133fc:	cmp	r0, #118	; 0x76
   13400:	bne	133b8 <__assert_fail@plt+0x1ec0>
   13404:	add	r3, sp, #40	; 0x28
   13408:	str	r3, [sp, #12]
   1340c:	ldr	r2, [pc, #60]	; 13450 <__assert_fail@plt+0x1f58>
   13410:	ldr	r0, [r2]
   13414:	str	r3, [sp]
   13418:	ldr	r3, [sp, #32]
   1341c:	mov	r2, r6
   13420:	mov	r1, r5
   13424:	bl	22fd4 <__assert_fail@plt+0x11adc>
   13428:	mov	r0, #0
   1342c:	bl	113b4 <exit@plt>
   13430:	mov	r0, #0
   13434:	ldr	r3, [sp, #36]	; 0x24
   13438:	blx	r3
   1343c:	b	133b8 <__assert_fail@plt+0x1ec0>
   13440:	andeq	r6, r3, r8, lsr #3
   13444:	muleq	r3, r8, r1
   13448:	ldrdeq	r4, [r2], -r8
   1344c:	andeq	r4, r2, r8, asr #21
   13450:	andeq	r6, r3, r4, lsr #3
   13454:	push	{r4, r5, r6, lr}
   13458:	sub	sp, sp, #16
   1345c:	mov	r5, r2
   13460:	mov	r6, r3
   13464:	ldr	r3, [pc, #160]	; 1350c <__assert_fail@plt+0x2014>
   13468:	ldr	r4, [r3]
   1346c:	mov	r2, #1
   13470:	str	r2, [r3]
   13474:	mov	r3, #0
   13478:	str	r3, [sp]
   1347c:	ldr	r3, [pc, #140]	; 13510 <__assert_fail@plt+0x2018>
   13480:	ldr	ip, [pc, #140]	; 13514 <__assert_fail@plt+0x201c>
   13484:	ldr	r2, [pc, #140]	; 13518 <__assert_fail@plt+0x2020>
   13488:	ldrb	lr, [sp, #36]	; 0x24
   1348c:	cmp	lr, #0
   13490:	moveq	r2, ip
   13494:	bl	1139c <getopt_long@plt>
   13498:	cmn	r0, #1
   1349c:	beq	134d0 <__assert_fail@plt+0x1fd8>
   134a0:	cmp	r0, #104	; 0x68
   134a4:	beq	134c4 <__assert_fail@plt+0x1fcc>
   134a8:	cmp	r0, #118	; 0x76
   134ac:	beq	134e0 <__assert_fail@plt+0x1fe8>
   134b0:	ldr	r3, [pc, #100]	; 1351c <__assert_fail@plt+0x2024>
   134b4:	ldr	r0, [r3]
   134b8:	ldr	r3, [sp, #40]	; 0x28
   134bc:	blx	r3
   134c0:	b	134d0 <__assert_fail@plt+0x1fd8>
   134c4:	mov	r0, #0
   134c8:	ldr	r3, [sp, #40]	; 0x28
   134cc:	blx	r3
   134d0:	ldr	r3, [pc, #52]	; 1350c <__assert_fail@plt+0x2014>
   134d4:	str	r4, [r3]
   134d8:	add	sp, sp, #16
   134dc:	pop	{r4, r5, r6, pc}
   134e0:	add	r3, sp, #44	; 0x2c
   134e4:	str	r3, [sp, #12]
   134e8:	ldr	r2, [pc, #48]	; 13520 <__assert_fail@plt+0x2028>
   134ec:	ldr	r0, [r2]
   134f0:	str	r3, [sp]
   134f4:	ldr	r3, [sp, #32]
   134f8:	mov	r2, r6
   134fc:	mov	r1, r5
   13500:	bl	22fd4 <__assert_fail@plt+0x11adc>
   13504:	mov	r0, #0
   13508:	bl	113b4 <exit@plt>
   1350c:	andeq	r6, r3, r8, lsr #3
   13510:	ldrdeq	r4, [r2], -r8
   13514:	andeq	r4, r2, r8, asr #21
   13518:			; <UNDEFINED> instruction: 0x000244b8
   1351c:	andeq	r6, r3, ip, asr #2
   13520:	andeq	r6, r3, r4, lsr #3
   13524:	push	{r4, lr}
   13528:	mov	r4, r0
   1352c:	bl	111f8 <wcwidth@plt>
   13530:	cmp	r0, #0
   13534:	popge	{r4, pc}
   13538:	mov	r0, r4
   1353c:	bl	112c4 <iswcntrl@plt>
   13540:	clz	r0, r0
   13544:	lsr	r0, r0, #5
   13548:	pop	{r4, pc}
   1354c:	push	{r4, r5, r6, lr}
   13550:	mov	r5, r0
   13554:	mov	r4, r1
   13558:	mov	r3, r1
   1355c:	ldr	r1, [r3], #16
   13560:	cmp	r1, r3
   13564:	strne	r1, [r0]
   13568:	beq	1358c <__assert_fail@plt+0x2094>
   1356c:	ldr	r3, [r4, #4]
   13570:	str	r3, [r5, #4]
   13574:	ldrb	r3, [r4, #8]
   13578:	strb	r3, [r5, #8]
   1357c:	cmp	r3, #0
   13580:	ldrne	r3, [r4, #12]
   13584:	strne	r3, [r5, #12]
   13588:	pop	{r4, r5, r6, pc}
   1358c:	add	r6, r0, #16
   13590:	ldr	r2, [r4, #4]
   13594:	mov	r0, r6
   13598:	bl	11234 <memcpy@plt>
   1359c:	str	r6, [r5]
   135a0:	b	1356c <__assert_fail@plt+0x2074>
   135a4:	lsr	r2, r0, #5
   135a8:	and	r0, r0, #31
   135ac:	ldr	r3, [pc, #12]	; 135c0 <__assert_fail@plt+0x20c8>
   135b0:	ldr	r3, [r3, r2, lsl #2]
   135b4:	lsr	r0, r3, r0
   135b8:	and	r0, r0, #1
   135bc:	bx	lr
   135c0:	andeq	r4, r2, r8, lsl sp
   135c4:	push	{r4, r5, r6, r7, lr}
   135c8:	sub	sp, sp, #12
   135cc:	mov	r7, r1
   135d0:	mov	r5, r2
   135d4:	subs	r6, r0, #0
   135d8:	addeq	r6, sp, #4
   135dc:	mov	r0, r6
   135e0:	bl	11318 <mbrtowc@plt>
   135e4:	mov	r4, r0
   135e8:	cmp	r5, #0
   135ec:	cmnne	r0, #3
   135f0:	bhi	13600 <__assert_fail@plt+0x2108>
   135f4:	mov	r0, r4
   135f8:	add	sp, sp, #12
   135fc:	pop	{r4, r5, r6, r7, pc}
   13600:	mov	r0, #0
   13604:	bl	23a98 <__assert_fail@plt+0x125a0>
   13608:	cmp	r0, #0
   1360c:	ldrbeq	r3, [r7]
   13610:	streq	r3, [r6]
   13614:	moveq	r4, #1
   13618:	b	135f4 <__assert_fail@plt+0x20fc>
   1361c:	push	{r4, r5, r6, r7, r8, lr}
   13620:	sub	sp, sp, #56	; 0x38
   13624:	mov	r5, r0
   13628:	mov	r4, r1
   1362c:	bl	11300 <__ctype_get_mb_cur_max@plt>
   13630:	cmp	r0, #1
   13634:	bls	13644 <__assert_fail@plt+0x214c>
   13638:	uxtb	r6, r4
   1363c:	cmp	r6, #47	; 0x2f
   13640:	bhi	13658 <__assert_fail@plt+0x2160>
   13644:	mov	r1, r4
   13648:	mov	r0, r5
   1364c:	bl	113cc <strchr@plt>
   13650:	add	sp, sp, #56	; 0x38
   13654:	pop	{r4, r5, r6, r7, r8, pc}
   13658:	str	r5, [sp, #16]
   1365c:	mov	r3, #0
   13660:	strb	r3, [sp]
   13664:	str	r3, [sp, #4]
   13668:	str	r3, [sp, #8]
   1366c:	strb	r3, [sp, #12]
   13670:	mov	r4, #1
   13674:	mov	r5, r3
   13678:	ldr	r7, [pc, #388]	; 13804 <__assert_fail@plt+0x230c>
   1367c:	b	13740 <__assert_fail@plt+0x2248>
   13680:	add	r0, sp, #4
   13684:	bl	11264 <mbsinit@plt>
   13688:	cmp	r0, #0
   1368c:	beq	1378c <__assert_fail@plt+0x2294>
   13690:	strb	r4, [sp]
   13694:	ldr	r8, [sp, #16]
   13698:	bl	11300 <__ctype_get_mb_cur_max@plt>
   1369c:	mov	r1, r0
   136a0:	mov	r0, r8
   136a4:	bl	228a8 <__assert_fail@plt+0x113b0>
   136a8:	add	r3, sp, #4
   136ac:	mov	r2, r0
   136b0:	mov	r1, r8
   136b4:	add	r0, sp, #28
   136b8:	bl	135c4 <__assert_fail@plt+0x20cc>
   136bc:	str	r0, [sp, #20]
   136c0:	cmn	r0, #1
   136c4:	streq	r4, [sp, #20]
   136c8:	strbeq	r5, [sp, #24]
   136cc:	beq	13714 <__assert_fail@plt+0x221c>
   136d0:	cmn	r0, #2
   136d4:	beq	137a0 <__assert_fail@plt+0x22a8>
   136d8:	cmp	r0, #0
   136dc:	bne	13700 <__assert_fail@plt+0x2208>
   136e0:	str	r4, [sp, #20]
   136e4:	ldr	r3, [sp, #16]
   136e8:	ldrb	r3, [r3]
   136ec:	cmp	r3, #0
   136f0:	bne	137b4 <__assert_fail@plt+0x22bc>
   136f4:	ldr	r3, [sp, #28]
   136f8:	cmp	r3, #0
   136fc:	bne	137c8 <__assert_fail@plt+0x22d0>
   13700:	strb	r4, [sp, #24]
   13704:	add	r0, sp, #4
   13708:	bl	11264 <mbsinit@plt>
   1370c:	cmp	r0, #0
   13710:	strbne	r5, [sp]
   13714:	strb	r4, [sp, #12]
   13718:	ldrb	r3, [sp, #24]
   1371c:	cmp	r3, #0
   13720:	bne	137dc <__assert_fail@plt+0x22e4>
   13724:	ldr	r2, [sp, #20]
   13728:	cmp	r2, #1
   1372c:	beq	137f0 <__assert_fail@plt+0x22f8>
   13730:	ldr	r3, [sp, #16]
   13734:	add	r3, r3, r2
   13738:	str	r3, [sp, #16]
   1373c:	strb	r5, [sp, #12]
   13740:	ldrb	r3, [sp, #12]
   13744:	cmp	r3, #0
   13748:	bne	13718 <__assert_fail@plt+0x2220>
   1374c:	ldrb	r3, [sp]
   13750:	cmp	r3, #0
   13754:	bne	13694 <__assert_fail@plt+0x219c>
   13758:	ldr	r1, [sp, #16]
   1375c:	ldrb	r3, [r1]
   13760:	lsr	r2, r3, #5
   13764:	and	r3, r3, #31
   13768:	ldr	r2, [r7, r2, lsl #2]
   1376c:	lsr	r3, r2, r3
   13770:	tst	r3, #1
   13774:	beq	13680 <__assert_fail@plt+0x2188>
   13778:	str	r4, [sp, #20]
   1377c:	ldrb	r3, [r1]
   13780:	str	r3, [sp, #28]
   13784:	strb	r4, [sp, #24]
   13788:	b	13714 <__assert_fail@plt+0x221c>
   1378c:	ldr	r3, [pc, #116]	; 13808 <__assert_fail@plt+0x2310>
   13790:	mov	r2, #143	; 0x8f
   13794:	ldr	r1, [pc, #112]	; 1380c <__assert_fail@plt+0x2314>
   13798:	ldr	r0, [pc, #112]	; 13810 <__assert_fail@plt+0x2318>
   1379c:	bl	114f8 <__assert_fail@plt>
   137a0:	ldr	r0, [sp, #16]
   137a4:	bl	113c0 <strlen@plt>
   137a8:	str	r0, [sp, #20]
   137ac:	strb	r5, [sp, #24]
   137b0:	b	13714 <__assert_fail@plt+0x221c>
   137b4:	ldr	r3, [pc, #76]	; 13808 <__assert_fail@plt+0x2310>
   137b8:	mov	r2, #171	; 0xab
   137bc:	ldr	r1, [pc, #72]	; 1380c <__assert_fail@plt+0x2314>
   137c0:	ldr	r0, [pc, #76]	; 13814 <__assert_fail@plt+0x231c>
   137c4:	bl	114f8 <__assert_fail@plt>
   137c8:	ldr	r3, [pc, #56]	; 13808 <__assert_fail@plt+0x2310>
   137cc:	mov	r2, #172	; 0xac
   137d0:	ldr	r1, [pc, #52]	; 1380c <__assert_fail@plt+0x2314>
   137d4:	ldr	r0, [pc, #60]	; 13818 <__assert_fail@plt+0x2320>
   137d8:	bl	114f8 <__assert_fail@plt>
   137dc:	ldr	r3, [sp, #28]
   137e0:	cmp	r3, #0
   137e4:	bne	13724 <__assert_fail@plt+0x222c>
   137e8:	mov	r0, #0
   137ec:	b	13650 <__assert_fail@plt+0x2158>
   137f0:	ldr	r0, [sp, #16]
   137f4:	ldrb	r3, [r0]
   137f8:	cmp	r3, r6
   137fc:	bne	13730 <__assert_fail@plt+0x2238>
   13800:	b	13650 <__assert_fail@plt+0x2158>
   13804:	andeq	r4, r2, r8, lsl sp
   13808:	andeq	r4, r2, r8, lsr sp
   1380c:	andeq	r4, r2, ip, asr #26
   13810:	andeq	r4, r2, r0, ror #20
   13814:	andeq	r4, r2, r8, ror sl
   13818:	muleq	r2, r0, sl
   1381c:	push	{r4, r5, r6, r7, r8, lr}
   13820:	sub	sp, sp, #56	; 0x38
   13824:	mov	r4, r0
   13828:	bl	11300 <__ctype_get_mb_cur_max@plt>
   1382c:	cmp	r0, #1
   13830:	bls	139c8 <__assert_fail@plt+0x24d0>
   13834:	str	r4, [sp, #16]
   13838:	mov	r4, #0
   1383c:	strb	r4, [sp]
   13840:	str	r4, [sp, #4]
   13844:	str	r4, [sp, #8]
   13848:	strb	r4, [sp, #12]
   1384c:	mov	r6, #1
   13850:	mov	r5, r4
   13854:	ldr	r7, [pc, #380]	; 139d8 <__assert_fail@plt+0x24e0>
   13858:	b	13914 <__assert_fail@plt+0x241c>
   1385c:	add	r0, sp, #4
   13860:	bl	11264 <mbsinit@plt>
   13864:	cmp	r0, #0
   13868:	beq	13960 <__assert_fail@plt+0x2468>
   1386c:	strb	r6, [sp]
   13870:	ldr	r8, [sp, #16]
   13874:	bl	11300 <__ctype_get_mb_cur_max@plt>
   13878:	mov	r1, r0
   1387c:	mov	r0, r8
   13880:	bl	228a8 <__assert_fail@plt+0x113b0>
   13884:	add	r3, sp, #4
   13888:	mov	r2, r0
   1388c:	mov	r1, r8
   13890:	add	r0, sp, #28
   13894:	bl	135c4 <__assert_fail@plt+0x20cc>
   13898:	str	r0, [sp, #20]
   1389c:	cmn	r0, #1
   138a0:	streq	r6, [sp, #20]
   138a4:	strbeq	r5, [sp, #24]
   138a8:	beq	138f0 <__assert_fail@plt+0x23f8>
   138ac:	cmn	r0, #2
   138b0:	beq	13974 <__assert_fail@plt+0x247c>
   138b4:	cmp	r0, #0
   138b8:	bne	138dc <__assert_fail@plt+0x23e4>
   138bc:	str	r6, [sp, #20]
   138c0:	ldr	r3, [sp, #16]
   138c4:	ldrb	r3, [r3]
   138c8:	cmp	r3, #0
   138cc:	bne	13988 <__assert_fail@plt+0x2490>
   138d0:	ldr	r3, [sp, #28]
   138d4:	cmp	r3, #0
   138d8:	bne	1399c <__assert_fail@plt+0x24a4>
   138dc:	strb	r6, [sp, #24]
   138e0:	add	r0, sp, #4
   138e4:	bl	11264 <mbsinit@plt>
   138e8:	cmp	r0, #0
   138ec:	strbne	r5, [sp]
   138f0:	ldrb	r3, [sp, #24]
   138f4:	cmp	r3, #0
   138f8:	bne	139b0 <__assert_fail@plt+0x24b8>
   138fc:	add	r4, r4, #1
   13900:	ldr	r2, [sp, #20]
   13904:	ldr	r3, [sp, #16]
   13908:	add	r3, r3, r2
   1390c:	str	r3, [sp, #16]
   13910:	strb	r5, [sp, #12]
   13914:	ldrb	r3, [sp, #12]
   13918:	cmp	r3, #0
   1391c:	bne	138f0 <__assert_fail@plt+0x23f8>
   13920:	ldrb	r3, [sp]
   13924:	cmp	r3, #0
   13928:	bne	13870 <__assert_fail@plt+0x2378>
   1392c:	ldr	r1, [sp, #16]
   13930:	ldrb	r3, [r1]
   13934:	lsr	r2, r3, #5
   13938:	and	r3, r3, #31
   1393c:	ldr	r2, [r7, r2, lsl #2]
   13940:	lsr	r3, r2, r3
   13944:	tst	r3, #1
   13948:	beq	1385c <__assert_fail@plt+0x2364>
   1394c:	str	r6, [sp, #20]
   13950:	ldrb	r3, [r1]
   13954:	str	r3, [sp, #28]
   13958:	strb	r6, [sp, #24]
   1395c:	b	138f0 <__assert_fail@plt+0x23f8>
   13960:	ldr	r3, [pc, #116]	; 139dc <__assert_fail@plt+0x24e4>
   13964:	mov	r2, #143	; 0x8f
   13968:	ldr	r1, [pc, #112]	; 139e0 <__assert_fail@plt+0x24e8>
   1396c:	ldr	r0, [pc, #112]	; 139e4 <__assert_fail@plt+0x24ec>
   13970:	bl	114f8 <__assert_fail@plt>
   13974:	ldr	r0, [sp, #16]
   13978:	bl	113c0 <strlen@plt>
   1397c:	str	r0, [sp, #20]
   13980:	strb	r5, [sp, #24]
   13984:	b	138f0 <__assert_fail@plt+0x23f8>
   13988:	ldr	r3, [pc, #76]	; 139dc <__assert_fail@plt+0x24e4>
   1398c:	mov	r2, #171	; 0xab
   13990:	ldr	r1, [pc, #72]	; 139e0 <__assert_fail@plt+0x24e8>
   13994:	ldr	r0, [pc, #76]	; 139e8 <__assert_fail@plt+0x24f0>
   13998:	bl	114f8 <__assert_fail@plt>
   1399c:	ldr	r3, [pc, #56]	; 139dc <__assert_fail@plt+0x24e4>
   139a0:	mov	r2, #172	; 0xac
   139a4:	ldr	r1, [pc, #52]	; 139e0 <__assert_fail@plt+0x24e8>
   139a8:	ldr	r0, [pc, #60]	; 139ec <__assert_fail@plt+0x24f4>
   139ac:	bl	114f8 <__assert_fail@plt>
   139b0:	ldr	r3, [sp, #28]
   139b4:	cmp	r3, #0
   139b8:	bne	138fc <__assert_fail@plt+0x2404>
   139bc:	mov	r0, r4
   139c0:	add	sp, sp, #56	; 0x38
   139c4:	pop	{r4, r5, r6, r7, r8, pc}
   139c8:	mov	r0, r4
   139cc:	bl	113c0 <strlen@plt>
   139d0:	mov	r4, r0
   139d4:	b	139bc <__assert_fail@plt+0x24c4>
   139d8:	andeq	r4, r2, r8, lsl sp
   139dc:	andeq	r4, r2, ip, asr sp
   139e0:	andeq	r4, r2, ip, asr #26
   139e4:	andeq	r4, r2, r0, ror #20
   139e8:	andeq	r4, r2, r8, ror sl
   139ec:	muleq	r2, r0, sl
   139f0:	push	{r4, r5, r6, lr}
   139f4:	subs	r4, r0, #0
   139f8:	beq	13a70 <__assert_fail@plt+0x2578>
   139fc:	mov	r1, #47	; 0x2f
   13a00:	mov	r0, r4
   13a04:	bl	11498 <strrchr@plt>
   13a08:	cmp	r0, #0
   13a0c:	addne	r5, r0, #1
   13a10:	moveq	r5, r4
   13a14:	sub	r3, r5, r4
   13a18:	cmp	r3, #6
   13a1c:	ble	13a5c <__assert_fail@plt+0x2564>
   13a20:	mov	r2, #7
   13a24:	ldr	r1, [pc, #96]	; 13a8c <__assert_fail@plt+0x2594>
   13a28:	sub	r0, r5, #7
   13a2c:	bl	114e0 <strncmp@plt>
   13a30:	cmp	r0, #0
   13a34:	bne	13a5c <__assert_fail@plt+0x2564>
   13a38:	mov	r2, #3
   13a3c:	ldr	r1, [pc, #76]	; 13a90 <__assert_fail@plt+0x2598>
   13a40:	mov	r0, r5
   13a44:	bl	114e0 <strncmp@plt>
   13a48:	cmp	r0, #0
   13a4c:	addeq	r4, r5, #3
   13a50:	ldreq	r3, [pc, #60]	; 13a94 <__assert_fail@plt+0x259c>
   13a54:	streq	r4, [r3]
   13a58:	movne	r4, r5
   13a5c:	ldr	r3, [pc, #52]	; 13a98 <__assert_fail@plt+0x25a0>
   13a60:	str	r4, [r3]
   13a64:	ldr	r3, [pc, #48]	; 13a9c <__assert_fail@plt+0x25a4>
   13a68:	str	r4, [r3]
   13a6c:	pop	{r4, r5, r6, pc}
   13a70:	ldr	r3, [pc, #40]	; 13aa0 <__assert_fail@plt+0x25a8>
   13a74:	ldr	r3, [r3]
   13a78:	mov	r2, #55	; 0x37
   13a7c:	mov	r1, #1
   13a80:	ldr	r0, [pc, #28]	; 13aa4 <__assert_fail@plt+0x25ac>
   13a84:	bl	112e8 <fwrite@plt>
   13a88:	bl	114ec <abort@plt>
   13a8c:	andeq	r4, r2, r8, lsr #27
   13a90:			; <UNDEFINED> instruction: 0x00024db0
   13a94:	muleq	r3, r0, r1
   13a98:			; <UNDEFINED> instruction: 0x000361bc
   13a9c:	muleq	r3, r4, r1
   13aa0:	andeq	r6, r3, r0, lsr #3
   13aa4:	andeq	r4, r2, r0, ror sp
   13aa8:	push	{r4, r5, r6, lr}
   13aac:	mov	r5, r0
   13ab0:	mov	r4, r1
   13ab4:	mov	r2, #48	; 0x30
   13ab8:	mov	r1, #0
   13abc:	bl	11414 <memset@plt>
   13ac0:	cmp	r4, #10
   13ac4:	beq	13ad4 <__assert_fail@plt+0x25dc>
   13ac8:	str	r4, [r5]
   13acc:	mov	r0, r5
   13ad0:	pop	{r4, r5, r6, pc}
   13ad4:	bl	114ec <abort@plt>
   13ad8:	push	{r4, r5, r6, lr}
   13adc:	mov	r4, r0
   13ae0:	mov	r5, r1
   13ae4:	mov	r2, #5
   13ae8:	mov	r1, r0
   13aec:	mov	r0, #0
   13af0:	bl	11288 <dcgettext@plt>
   13af4:	cmp	r4, r0
   13af8:	popne	{r4, r5, r6, pc}
   13afc:	bl	23af8 <__assert_fail@plt+0x12600>
   13b00:	ldrb	r3, [r0]
   13b04:	bic	r3, r3, #32
   13b08:	cmp	r3, #85	; 0x55
   13b0c:	beq	13b88 <__assert_fail@plt+0x2690>
   13b10:	cmp	r3, #71	; 0x47
   13b14:	bne	13be4 <__assert_fail@plt+0x26ec>
   13b18:	ldrb	r3, [r0, #1]
   13b1c:	bic	r3, r3, #32
   13b20:	cmp	r3, #66	; 0x42
   13b24:	bne	13be4 <__assert_fail@plt+0x26ec>
   13b28:	ldrb	r3, [r0, #2]
   13b2c:	cmp	r3, #49	; 0x31
   13b30:	bne	13be4 <__assert_fail@plt+0x26ec>
   13b34:	ldrb	r3, [r0, #3]
   13b38:	cmp	r3, #56	; 0x38
   13b3c:	bne	13be4 <__assert_fail@plt+0x26ec>
   13b40:	ldrb	r3, [r0, #4]
   13b44:	cmp	r3, #48	; 0x30
   13b48:	bne	13be4 <__assert_fail@plt+0x26ec>
   13b4c:	ldrb	r3, [r0, #5]
   13b50:	cmp	r3, #51	; 0x33
   13b54:	bne	13be4 <__assert_fail@plt+0x26ec>
   13b58:	ldrb	r3, [r0, #6]
   13b5c:	cmp	r3, #48	; 0x30
   13b60:	bne	13be4 <__assert_fail@plt+0x26ec>
   13b64:	ldrb	r3, [r0, #7]
   13b68:	cmp	r3, #0
   13b6c:	bne	13be4 <__assert_fail@plt+0x26ec>
   13b70:	ldrb	r2, [r4]
   13b74:	ldr	r3, [pc, #124]	; 13bf8 <__assert_fail@plt+0x2700>
   13b78:	ldr	r0, [pc, #124]	; 13bfc <__assert_fail@plt+0x2704>
   13b7c:	cmp	r2, #96	; 0x60
   13b80:	movne	r0, r3
   13b84:	pop	{r4, r5, r6, pc}
   13b88:	ldrb	r3, [r0, #1]
   13b8c:	bic	r3, r3, #32
   13b90:	cmp	r3, #84	; 0x54
   13b94:	bne	13be4 <__assert_fail@plt+0x26ec>
   13b98:	ldrb	r3, [r0, #2]
   13b9c:	bic	r3, r3, #32
   13ba0:	cmp	r3, #70	; 0x46
   13ba4:	bne	13be4 <__assert_fail@plt+0x26ec>
   13ba8:	ldrb	r3, [r0, #3]
   13bac:	cmp	r3, #45	; 0x2d
   13bb0:	bne	13be4 <__assert_fail@plt+0x26ec>
   13bb4:	ldrb	r3, [r0, #4]
   13bb8:	cmp	r3, #56	; 0x38
   13bbc:	bne	13be4 <__assert_fail@plt+0x26ec>
   13bc0:	ldrb	r3, [r0, #5]
   13bc4:	cmp	r3, #0
   13bc8:	bne	13be4 <__assert_fail@plt+0x26ec>
   13bcc:	ldrb	r2, [r4]
   13bd0:	ldr	r3, [pc, #40]	; 13c00 <__assert_fail@plt+0x2708>
   13bd4:	ldr	r0, [pc, #40]	; 13c04 <__assert_fail@plt+0x270c>
   13bd8:	cmp	r2, #96	; 0x60
   13bdc:	movne	r0, r3
   13be0:	pop	{r4, r5, r6, pc}
   13be4:	ldr	r3, [pc, #28]	; 13c08 <__assert_fail@plt+0x2710>
   13be8:	ldr	r0, [pc, #28]	; 13c0c <__assert_fail@plt+0x2714>
   13bec:	cmp	r5, #9
   13bf0:	movne	r0, r3
   13bf4:	pop	{r4, r5, r6, pc}
   13bf8:	andeq	r4, r2, ip, lsl #28
   13bfc:	andeq	r4, r2, r8, lsl lr
   13c00:	andeq	r4, r2, r8, lsl #28
   13c04:	andeq	r4, r2, ip, lsl lr
   13c08:	andeq	r4, r2, r0, lsl lr
   13c0c:	andeq	r4, r2, r4, lsl lr
   13c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c14:	sub	sp, sp, #116	; 0x74
   13c18:	str	r0, [sp, #36]	; 0x24
   13c1c:	mov	sl, r1
   13c20:	str	r2, [sp, #52]	; 0x34
   13c24:	str	r3, [sp, #28]
   13c28:	ldr	r8, [sp, #152]	; 0x98
   13c2c:	bl	11300 <__ctype_get_mb_cur_max@plt>
   13c30:	str	r0, [sp, #84]	; 0x54
   13c34:	ldr	r3, [sp, #156]	; 0x9c
   13c38:	lsr	r3, r3, #1
   13c3c:	and	r3, r3, #1
   13c40:	str	r3, [sp, #32]
   13c44:	mov	r3, #1
   13c48:	str	r3, [sp, #40]	; 0x28
   13c4c:	mov	r3, #0
   13c50:	str	r3, [sp, #80]	; 0x50
   13c54:	str	r3, [sp, #44]	; 0x2c
   13c58:	str	r3, [sp, #48]	; 0x30
   13c5c:	str	r3, [sp, #60]	; 0x3c
   13c60:	str	r3, [sp, #72]	; 0x48
   13c64:	str	r3, [sp, #76]	; 0x4c
   13c68:	mov	r7, sl
   13c6c:	mov	sl, r8
   13c70:	cmp	sl, #10
   13c74:	ldrls	pc, [pc, sl, lsl #2]
   13c78:	b	13e30 <__assert_fail@plt+0x2938>
   13c7c:	andeq	r3, r1, r0, ror #25
   13c80:			; <UNDEFINED> instruction: 0x00013cb0
   13c84:	andeq	r3, r1, ip, lsl #28
   13c88:	andeq	r3, r1, r8, lsr #25
   13c8c:	andeq	r3, r1, r0, asr #27
   13c90:	strdeq	r3, [r1], -r0
   13c94:	andeq	r4, r1, ip, asr sp
   13c98:	andeq	r3, r1, r4, lsr lr
   13c9c:	andeq	r3, r1, ip, lsr #26
   13ca0:	andeq	r3, r1, ip, lsr #26
   13ca4:	andeq	r3, r1, ip, lsr #26
   13ca8:	mov	r3, #1
   13cac:	str	r3, [sp, #48]	; 0x30
   13cb0:	mov	r3, #1
   13cb4:	str	r3, [sp, #32]
   13cb8:	str	r3, [sp, #60]	; 0x3c
   13cbc:	ldr	r3, [pc, #4068]	; 14ca8 <__assert_fail@plt+0x37b0>
   13cc0:	str	r3, [sp, #72]	; 0x48
   13cc4:	mov	fp, #0
   13cc8:	mov	sl, #2
   13ccc:	mov	r6, #0
   13cd0:	ldr	r3, [sp, #48]	; 0x30
   13cd4:	eor	r3, r3, #1
   13cd8:	str	r3, [sp, #68]	; 0x44
   13cdc:	b	145c4 <__assert_fail@plt+0x30cc>
   13ce0:	mov	r3, #0
   13ce4:	str	r3, [sp, #32]
   13ce8:	mov	fp, r3
   13cec:	b	13ccc <__assert_fail@plt+0x27d4>
   13cf0:	ldr	r3, [sp, #32]
   13cf4:	cmp	r3, #0
   13cf8:	bne	13e4c <__assert_fail@plt+0x2954>
   13cfc:	cmp	r7, #0
   13d00:	beq	13e6c <__assert_fail@plt+0x2974>
   13d04:	ldr	r3, [sp, #36]	; 0x24
   13d08:	mov	r2, #34	; 0x22
   13d0c:	strb	r2, [r3]
   13d10:	mov	r3, #1
   13d14:	str	r3, [sp, #48]	; 0x30
   13d18:	str	r3, [sp, #60]	; 0x3c
   13d1c:	ldr	r3, [pc, #3980]	; 14cb0 <__assert_fail@plt+0x37b8>
   13d20:	str	r3, [sp, #72]	; 0x48
   13d24:	mov	fp, #1
   13d28:	b	13ccc <__assert_fail@plt+0x27d4>
   13d2c:	cmp	sl, #10
   13d30:	beq	13d54 <__assert_fail@plt+0x285c>
   13d34:	mov	r1, sl
   13d38:	ldr	r0, [pc, #3948]	; 14cac <__assert_fail@plt+0x37b4>
   13d3c:	bl	13ad8 <__assert_fail@plt+0x25e0>
   13d40:	str	r0, [sp, #164]	; 0xa4
   13d44:	mov	r1, sl
   13d48:	ldr	r0, [pc, #3928]	; 14ca8 <__assert_fail@plt+0x37b0>
   13d4c:	bl	13ad8 <__assert_fail@plt+0x25e0>
   13d50:	str	r0, [sp, #168]	; 0xa8
   13d54:	ldr	r3, [sp, #32]
   13d58:	cmp	r3, #0
   13d5c:	movne	fp, #0
   13d60:	bne	13d98 <__assert_fail@plt+0x28a0>
   13d64:	ldr	r3, [sp, #164]	; 0xa4
   13d68:	ldrb	r3, [r3]
   13d6c:	cmp	r3, #0
   13d70:	beq	13db8 <__assert_fail@plt+0x28c0>
   13d74:	ldr	r2, [sp, #164]	; 0xa4
   13d78:	mov	fp, #0
   13d7c:	ldr	r1, [sp, #36]	; 0x24
   13d80:	cmp	r7, fp
   13d84:	strbhi	r3, [r1, fp]
   13d88:	add	fp, fp, #1
   13d8c:	ldrb	r3, [r2, #1]!
   13d90:	cmp	r3, #0
   13d94:	bne	13d80 <__assert_fail@plt+0x2888>
   13d98:	ldr	r0, [sp, #168]	; 0xa8
   13d9c:	bl	113c0 <strlen@plt>
   13da0:	str	r0, [sp, #60]	; 0x3c
   13da4:	ldr	r3, [sp, #168]	; 0xa8
   13da8:	str	r3, [sp, #72]	; 0x48
   13dac:	mov	r3, #1
   13db0:	str	r3, [sp, #48]	; 0x30
   13db4:	b	13ccc <__assert_fail@plt+0x27d4>
   13db8:	mov	fp, #0
   13dbc:	b	13d98 <__assert_fail@plt+0x28a0>
   13dc0:	ldr	r3, [sp, #32]
   13dc4:	cmp	r3, #0
   13dc8:	bne	13e88 <__assert_fail@plt+0x2990>
   13dcc:	mov	r3, #1
   13dd0:	str	r3, [sp, #48]	; 0x30
   13dd4:	cmp	r7, #0
   13dd8:	beq	13ea4 <__assert_fail@plt+0x29ac>
   13ddc:	ldr	r3, [sp, #36]	; 0x24
   13de0:	mov	r2, #39	; 0x27
   13de4:	strb	r2, [r3]
   13de8:	mov	r3, #0
   13dec:	str	r3, [sp, #32]
   13df0:	mov	r3, #1
   13df4:	str	r3, [sp, #60]	; 0x3c
   13df8:	ldr	r3, [pc, #3752]	; 14ca8 <__assert_fail@plt+0x37b0>
   13dfc:	str	r3, [sp, #72]	; 0x48
   13e00:	mov	fp, #1
   13e04:	mov	sl, #2
   13e08:	b	13ccc <__assert_fail@plt+0x27d4>
   13e0c:	ldr	r3, [sp, #32]
   13e10:	cmp	r3, #0
   13e14:	beq	13dd4 <__assert_fail@plt+0x28dc>
   13e18:	mov	r3, #1
   13e1c:	str	r3, [sp, #60]	; 0x3c
   13e20:	ldr	r3, [pc, #3712]	; 14ca8 <__assert_fail@plt+0x37b0>
   13e24:	str	r3, [sp, #72]	; 0x48
   13e28:	mov	fp, #0
   13e2c:	b	13ccc <__assert_fail@plt+0x27d4>
   13e30:	bl	114ec <abort@plt>
   13e34:	mov	r3, #0
   13e38:	str	r3, [sp, #32]
   13e3c:	mov	r3, #1
   13e40:	str	r3, [sp, #48]	; 0x30
   13e44:	mov	fp, #0
   13e48:	b	13ccc <__assert_fail@plt+0x27d4>
   13e4c:	ldr	r3, [sp, #32]
   13e50:	str	r3, [sp, #48]	; 0x30
   13e54:	mov	r3, #1
   13e58:	str	r3, [sp, #60]	; 0x3c
   13e5c:	ldr	r3, [pc, #3660]	; 14cb0 <__assert_fail@plt+0x37b8>
   13e60:	str	r3, [sp, #72]	; 0x48
   13e64:	mov	fp, #0
   13e68:	b	13ccc <__assert_fail@plt+0x27d4>
   13e6c:	mov	r3, #1
   13e70:	str	r3, [sp, #48]	; 0x30
   13e74:	str	r3, [sp, #60]	; 0x3c
   13e78:	ldr	r3, [pc, #3632]	; 14cb0 <__assert_fail@plt+0x37b8>
   13e7c:	str	r3, [sp, #72]	; 0x48
   13e80:	mov	fp, #1
   13e84:	b	13ccc <__assert_fail@plt+0x27d4>
   13e88:	mov	r3, #1
   13e8c:	str	r3, [sp, #60]	; 0x3c
   13e90:	ldr	r3, [pc, #3600]	; 14ca8 <__assert_fail@plt+0x37b0>
   13e94:	str	r3, [sp, #72]	; 0x48
   13e98:	mov	fp, #0
   13e9c:	mov	sl, #2
   13ea0:	b	13ccc <__assert_fail@plt+0x27d4>
   13ea4:	mov	r3, #0
   13ea8:	str	r3, [sp, #32]
   13eac:	mov	r3, #1
   13eb0:	str	r3, [sp, #60]	; 0x3c
   13eb4:	ldr	r3, [pc, #3564]	; 14ca8 <__assert_fail@plt+0x37b0>
   13eb8:	str	r3, [sp, #72]	; 0x48
   13ebc:	mov	fp, #1
   13ec0:	mov	sl, #2
   13ec4:	b	13ccc <__assert_fail@plt+0x27d4>
   13ec8:	mov	r3, #0
   13ecc:	str	r3, [sp, #56]	; 0x38
   13ed0:	ldr	r3, [sp, #52]	; 0x34
   13ed4:	add	r2, r3, r6
   13ed8:	str	r2, [sp, #64]	; 0x40
   13edc:	ldrb	r4, [r3, r6]
   13ee0:	cmp	r4, #126	; 0x7e
   13ee4:	ldrls	pc, [pc, r4, lsl #2]
   13ee8:	b	14724 <__assert_fail@plt+0x322c>
   13eec:	andeq	r4, r1, r4, lsl #2
   13ef0:	andeq	r4, r1, r4, lsr #14
   13ef4:	andeq	r4, r1, r4, lsr #14
   13ef8:	andeq	r4, r1, r4, lsr #14
   13efc:	andeq	r4, r1, r4, lsr #14
   13f00:	andeq	r4, r1, r4, lsr #14
   13f04:	andeq	r4, r1, r4, lsr #14
   13f08:	andeq	r4, r1, r0, ror #8
   13f0c:	strdeq	r4, [r1], -ip
   13f10:	andeq	r4, r1, r8, lsl r4
   13f14:	andeq	r4, r1, r0, lsl r4
   13f18:	andeq	r4, r1, r0, lsl #7
   13f1c:	andeq	r4, r1, r8, ror r3
   13f20:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f24:	andeq	r4, r1, r4, lsr #14
   13f28:	andeq	r4, r1, r4, lsr #14
   13f2c:	andeq	r4, r1, r4, lsr #14
   13f30:	andeq	r4, r1, r4, lsr #14
   13f34:	andeq	r4, r1, r4, lsr #14
   13f38:	andeq	r4, r1, r4, lsr #14
   13f3c:	andeq	r4, r1, r4, lsr #14
   13f40:	andeq	r4, r1, r4, lsr #14
   13f44:	andeq	r4, r1, r4, lsr #14
   13f48:	andeq	r4, r1, r4, lsr #14
   13f4c:	andeq	r4, r1, r4, lsr #14
   13f50:	andeq	r4, r1, r4, lsr #14
   13f54:	andeq	r4, r1, r4, lsr #14
   13f58:	andeq	r4, r1, r4, lsr #14
   13f5c:	andeq	r4, r1, r4, lsr #14
   13f60:	andeq	r4, r1, r4, lsr #14
   13f64:	andeq	r4, r1, r4, lsr #14
   13f68:	andeq	r4, r1, r4, lsr #14
   13f6c:			; <UNDEFINED> instruction: 0x000144b4
   13f70:			; <UNDEFINED> instruction: 0x000144b0
   13f74:			; <UNDEFINED> instruction: 0x000144b0
   13f78:	andeq	r4, r1, r8, lsl #9
   13f7c:			; <UNDEFINED> instruction: 0x000144b0
   13f80:	strdeq	r4, [r1], -r8
   13f84:			; <UNDEFINED> instruction: 0x000144b0
   13f88:	andeq	r4, r1, r8, lsl #13
   13f8c:			; <UNDEFINED> instruction: 0x000144b0
   13f90:			; <UNDEFINED> instruction: 0x000144b0
   13f94:			; <UNDEFINED> instruction: 0x000144b0
   13f98:	strdeq	r4, [r1], -r8
   13f9c:	strdeq	r4, [r1], -r8
   13fa0:	strdeq	r4, [r1], -r8
   13fa4:	strdeq	r4, [r1], -r8
   13fa8:	strdeq	r4, [r1], -r8
   13fac:	strdeq	r4, [r1], -r8
   13fb0:	strdeq	r4, [r1], -r8
   13fb4:	strdeq	r4, [r1], -r8
   13fb8:	strdeq	r4, [r1], -r8
   13fbc:	strdeq	r4, [r1], -r8
   13fc0:	strdeq	r4, [r1], -r8
   13fc4:	strdeq	r4, [r1], -r8
   13fc8:	strdeq	r4, [r1], -r8
   13fcc:	strdeq	r4, [r1], -r8
   13fd0:	strdeq	r4, [r1], -r8
   13fd4:	strdeq	r4, [r1], -r8
   13fd8:			; <UNDEFINED> instruction: 0x000144b0
   13fdc:			; <UNDEFINED> instruction: 0x000144b0
   13fe0:			; <UNDEFINED> instruction: 0x000144b0
   13fe4:			; <UNDEFINED> instruction: 0x000144b0
   13fe8:	andeq	r4, r1, ip, lsl #4
   13fec:	andeq	r4, r1, r4, lsr #14
   13ff0:	strdeq	r4, [r1], -r8
   13ff4:	strdeq	r4, [r1], -r8
   13ff8:	strdeq	r4, [r1], -r8
   13ffc:	strdeq	r4, [r1], -r8
   14000:	strdeq	r4, [r1], -r8
   14004:	strdeq	r4, [r1], -r8
   14008:	strdeq	r4, [r1], -r8
   1400c:	strdeq	r4, [r1], -r8
   14010:	strdeq	r4, [r1], -r8
   14014:	strdeq	r4, [r1], -r8
   14018:	strdeq	r4, [r1], -r8
   1401c:	strdeq	r4, [r1], -r8
   14020:	strdeq	r4, [r1], -r8
   14024:	strdeq	r4, [r1], -r8
   14028:	strdeq	r4, [r1], -r8
   1402c:	strdeq	r4, [r1], -r8
   14030:	strdeq	r4, [r1], -r8
   14034:	strdeq	r4, [r1], -r8
   14038:	strdeq	r4, [r1], -r8
   1403c:	strdeq	r4, [r1], -r8
   14040:	strdeq	r4, [r1], -r8
   14044:	strdeq	r4, [r1], -r8
   14048:	strdeq	r4, [r1], -r8
   1404c:	strdeq	r4, [r1], -r8
   14050:	strdeq	r4, [r1], -r8
   14054:	strdeq	r4, [r1], -r8
   14058:			; <UNDEFINED> instruction: 0x000144b0
   1405c:	andeq	r4, r1, r8, lsl #7
   14060:	strdeq	r4, [r1], -r8
   14064:			; <UNDEFINED> instruction: 0x000144b0
   14068:	strdeq	r4, [r1], -r8
   1406c:			; <UNDEFINED> instruction: 0x000144b0
   14070:	strdeq	r4, [r1], -r8
   14074:	strdeq	r4, [r1], -r8
   14078:	strdeq	r4, [r1], -r8
   1407c:	strdeq	r4, [r1], -r8
   14080:	strdeq	r4, [r1], -r8
   14084:	strdeq	r4, [r1], -r8
   14088:	strdeq	r4, [r1], -r8
   1408c:	strdeq	r4, [r1], -r8
   14090:	strdeq	r4, [r1], -r8
   14094:	strdeq	r4, [r1], -r8
   14098:	strdeq	r4, [r1], -r8
   1409c:	strdeq	r4, [r1], -r8
   140a0:	strdeq	r4, [r1], -r8
   140a4:	strdeq	r4, [r1], -r8
   140a8:	strdeq	r4, [r1], -r8
   140ac:	strdeq	r4, [r1], -r8
   140b0:	strdeq	r4, [r1], -r8
   140b4:	strdeq	r4, [r1], -r8
   140b8:	strdeq	r4, [r1], -r8
   140bc:	strdeq	r4, [r1], -r8
   140c0:	strdeq	r4, [r1], -r8
   140c4:	strdeq	r4, [r1], -r8
   140c8:	strdeq	r4, [r1], -r8
   140cc:	strdeq	r4, [r1], -r8
   140d0:	strdeq	r4, [r1], -r8
   140d4:	strdeq	r4, [r1], -r8
   140d8:	andeq	r4, r1, r8, ror #8
   140dc:			; <UNDEFINED> instruction: 0x000144b0
   140e0:	andeq	r4, r1, r8, ror #8
   140e4:	andeq	r4, r1, r8, lsl #9
   140e8:	mov	r3, #0
   140ec:	str	r3, [sp, #56]	; 0x38
   140f0:	b	13ed0 <__assert_fail@plt+0x29d8>
   140f4:	mov	r3, #114	; 0x72
   140f8:	b	1441c <__assert_fail@plt+0x2f24>
   140fc:	mov	r3, #98	; 0x62
   14100:	b	14434 <__assert_fail@plt+0x2f3c>
   14104:	ldr	r3, [sp, #48]	; 0x30
   14108:	cmp	r3, #0
   1410c:	beq	141f4 <__assert_fail@plt+0x2cfc>
   14110:	ldr	r3, [sp, #32]
   14114:	cmp	r3, #0
   14118:	bne	14c7c <__assert_fail@plt+0x3784>
   1411c:	ldr	r3, [sp, #44]	; 0x2c
   14120:	eor	r3, r3, #1
   14124:	cmp	sl, #2
   14128:	movne	r3, #0
   1412c:	andeq	r3, r3, #1
   14130:	cmp	r3, #0
   14134:	moveq	r2, fp
   14138:	beq	1417c <__assert_fail@plt+0x2c84>
   1413c:	cmp	r7, fp
   14140:	ldrhi	r2, [sp, #36]	; 0x24
   14144:	movhi	r1, #39	; 0x27
   14148:	strbhi	r1, [r2, fp]
   1414c:	add	r2, fp, #1
   14150:	cmp	r7, r2
   14154:	ldrhi	r1, [sp, #36]	; 0x24
   14158:	movhi	r0, #36	; 0x24
   1415c:	strbhi	r0, [r1, r2]
   14160:	add	r2, fp, #2
   14164:	cmp	r7, r2
   14168:	ldrhi	r1, [sp, #36]	; 0x24
   1416c:	movhi	r0, #39	; 0x27
   14170:	strbhi	r0, [r1, r2]
   14174:	add	r2, fp, #3
   14178:	str	r3, [sp, #44]	; 0x2c
   1417c:	cmp	r7, r2
   14180:	ldrhi	r3, [sp, #36]	; 0x24
   14184:	movhi	r1, #92	; 0x5c
   14188:	strbhi	r1, [r3, r2]
   1418c:	add	fp, r2, #1
   14190:	cmp	r5, #0
   14194:	beq	14b00 <__assert_fail@plt+0x3608>
   14198:	add	r3, r6, #1
   1419c:	ldr	r1, [sp, #28]
   141a0:	cmp	r1, r3
   141a4:	bls	14b10 <__assert_fail@plt+0x3618>
   141a8:	ldr	r1, [sp, #52]	; 0x34
   141ac:	ldrb	r3, [r1, r3]
   141b0:	sub	r3, r3, #48	; 0x30
   141b4:	uxtb	r3, r3
   141b8:	cmp	r3, #9
   141bc:	bhi	14b1c <__assert_fail@plt+0x3624>
   141c0:	cmp	r7, fp
   141c4:	movhi	r3, #48	; 0x30
   141c8:	ldrhi	r1, [sp, #36]	; 0x24
   141cc:	strbhi	r3, [r1, fp]
   141d0:	add	r3, r2, #2
   141d4:	cmp	r7, r3
   141d8:	movhi	r1, #48	; 0x30
   141dc:	ldrhi	r0, [sp, #36]	; 0x24
   141e0:	strbhi	r1, [r0, r3]
   141e4:	add	fp, r2, #3
   141e8:	ldr	r8, [sp, #32]
   141ec:	mov	r4, #48	; 0x30
   141f0:	b	144cc <__assert_fail@plt+0x2fd4>
   141f4:	ldr	r3, [sp, #156]	; 0x9c
   141f8:	tst	r3, #1
   141fc:	bne	145c0 <__assert_fail@plt+0x30c8>
   14200:	ldr	r5, [sp, #48]	; 0x30
   14204:	mov	r8, r5
   14208:	b	144cc <__assert_fail@plt+0x2fd4>
   1420c:	cmp	sl, #2
   14210:	beq	14228 <__assert_fail@plt+0x2d30>
   14214:	cmp	sl, #5
   14218:	beq	14240 <__assert_fail@plt+0x2d48>
   1421c:	mov	r8, #0
   14220:	mov	r5, r8
   14224:	b	144cc <__assert_fail@plt+0x2fd4>
   14228:	ldr	r3, [sp, #32]
   1422c:	cmp	r3, #0
   14230:	bne	14c90 <__assert_fail@plt+0x3798>
   14234:	mov	r8, r3
   14238:	mov	r5, r3
   1423c:	b	144cc <__assert_fail@plt+0x2fd4>
   14240:	ldr	r3, [sp, #156]	; 0x9c
   14244:	tst	r3, #4
   14248:	beq	14b28 <__assert_fail@plt+0x3630>
   1424c:	add	r3, r6, #2
   14250:	ldr	r2, [sp, #28]
   14254:	cmp	r2, r3
   14258:	bls	14b34 <__assert_fail@plt+0x363c>
   1425c:	ldr	r2, [sp, #52]	; 0x34
   14260:	add	r2, r2, r6
   14264:	ldrb	r2, [r2, #1]
   14268:	cmp	r2, #63	; 0x3f
   1426c:	movne	r8, #0
   14270:	movne	r5, r8
   14274:	bne	144cc <__assert_fail@plt+0x2fd4>
   14278:	ldr	r2, [sp, #52]	; 0x34
   1427c:	ldrb	r2, [r2, r3]
   14280:	sub	r1, r2, #33	; 0x21
   14284:	cmp	r1, #29
   14288:	ldrls	pc, [pc, r1, lsl #2]
   1428c:	b	14b40 <__assert_fail@plt+0x3648>
   14290:	andeq	r4, r1, r8, lsl #6
   14294:	andeq	r4, r1, r0, asr #22
   14298:	andeq	r4, r1, r0, asr #22
   1429c:	andeq	r4, r1, r0, asr #22
   142a0:	andeq	r4, r1, r0, asr #22
   142a4:	andeq	r4, r1, r0, asr #22
   142a8:	andeq	r4, r1, r8, lsl #6
   142ac:	andeq	r4, r1, r8, lsl #6
   142b0:	andeq	r4, r1, r8, lsl #6
   142b4:	andeq	r4, r1, r0, asr #22
   142b8:	andeq	r4, r1, r0, asr #22
   142bc:	andeq	r4, r1, r0, asr #22
   142c0:	andeq	r4, r1, r8, lsl #6
   142c4:	andeq	r4, r1, r0, asr #22
   142c8:	andeq	r4, r1, r8, lsl #6
   142cc:	andeq	r4, r1, r0, asr #22
   142d0:	andeq	r4, r1, r0, asr #22
   142d4:	andeq	r4, r1, r0, asr #22
   142d8:	andeq	r4, r1, r0, asr #22
   142dc:	andeq	r4, r1, r0, asr #22
   142e0:	andeq	r4, r1, r0, asr #22
   142e4:	andeq	r4, r1, r0, asr #22
   142e8:	andeq	r4, r1, r0, asr #22
   142ec:	andeq	r4, r1, r0, asr #22
   142f0:	andeq	r4, r1, r0, asr #22
   142f4:	andeq	r4, r1, r0, asr #22
   142f8:	andeq	r4, r1, r0, asr #22
   142fc:	andeq	r4, r1, r8, lsl #6
   14300:	andeq	r4, r1, r8, lsl #6
   14304:	andeq	r4, r1, r8, lsl #6
   14308:	ldr	r1, [sp, #32]
   1430c:	cmp	r1, #0
   14310:	bne	14d50 <__assert_fail@plt+0x3858>
   14314:	cmp	r7, fp
   14318:	movhi	r1, #63	; 0x3f
   1431c:	ldrhi	r0, [sp, #36]	; 0x24
   14320:	strbhi	r1, [r0, fp]
   14324:	add	r1, fp, #1
   14328:	cmp	r7, r1
   1432c:	ldrhi	r0, [sp, #36]	; 0x24
   14330:	movhi	ip, #34	; 0x22
   14334:	strbhi	ip, [r0, r1]
   14338:	add	r1, fp, #2
   1433c:	cmp	r7, r1
   14340:	ldrhi	r0, [sp, #36]	; 0x24
   14344:	movhi	ip, #34	; 0x22
   14348:	strbhi	ip, [r0, r1]
   1434c:	add	r1, fp, #3
   14350:	cmp	r7, r1
   14354:	movhi	r0, #63	; 0x3f
   14358:	ldrhi	ip, [sp, #36]	; 0x24
   1435c:	strbhi	r0, [ip, r1]
   14360:	add	fp, fp, #4
   14364:	ldr	r5, [sp, #32]
   14368:	mov	r8, r5
   1436c:	mov	r4, r2
   14370:	mov	r6, r3
   14374:	b	144cc <__assert_fail@plt+0x2fd4>
   14378:	mov	r3, #102	; 0x66
   1437c:	b	14434 <__assert_fail@plt+0x2f3c>
   14380:	mov	r3, #118	; 0x76
   14384:	b	14434 <__assert_fail@plt+0x2f3c>
   14388:	cmp	sl, #2
   1438c:	beq	143f8 <__assert_fail@plt+0x2f00>
   14390:	ldr	r3, [sp, #48]	; 0x30
   14394:	ldr	r2, [sp, #32]
   14398:	and	r3, r3, r2
   1439c:	tst	r9, r3
   143a0:	moveq	r3, r4
   143a4:	beq	14434 <__assert_fail@plt+0x2f3c>
   143a8:	mov	r8, #0
   143ac:	mov	r5, r8
   143b0:	eor	r5, r5, #1
   143b4:	ldr	r3, [sp, #44]	; 0x2c
   143b8:	and	r5, r5, r3
   143bc:	tst	r5, #255	; 0xff
   143c0:	beq	145a0 <__assert_fail@plt+0x30a8>
   143c4:	cmp	r7, fp
   143c8:	ldrhi	r3, [sp, #36]	; 0x24
   143cc:	movhi	r2, #39	; 0x27
   143d0:	strbhi	r2, [r3, fp]
   143d4:	add	r3, fp, #1
   143d8:	cmp	r7, r3
   143dc:	ldrhi	r2, [sp, #36]	; 0x24
   143e0:	movhi	r1, #39	; 0x27
   143e4:	strbhi	r1, [r2, r3]
   143e8:	add	fp, fp, #2
   143ec:	mov	r3, #0
   143f0:	str	r3, [sp, #44]	; 0x2c
   143f4:	b	145a0 <__assert_fail@plt+0x30a8>
   143f8:	ldr	r3, [sp, #32]
   143fc:	cmp	r3, #0
   14400:	bne	14c9c <__assert_fail@plt+0x37a4>
   14404:	mov	r8, r3
   14408:	mov	r5, r3
   1440c:	b	143b0 <__assert_fail@plt+0x2eb8>
   14410:	mov	r3, #110	; 0x6e
   14414:	b	1441c <__assert_fail@plt+0x2f24>
   14418:	mov	r3, #116	; 0x74
   1441c:	ldr	r2, [sp, #32]
   14420:	cmp	sl, #2
   14424:	movne	r2, #0
   14428:	andeq	r2, r2, #1
   1442c:	cmp	r2, #0
   14430:	bne	14454 <__assert_fail@plt+0x2f5c>
   14434:	ldr	r2, [sp, #48]	; 0x30
   14438:	cmp	r2, #0
   1443c:	moveq	r8, r2
   14440:	moveq	r5, r2
   14444:	beq	144cc <__assert_fail@plt+0x2fd4>
   14448:	mov	r4, r3
   1444c:	mov	r8, #0
   14450:	b	14524 <__assert_fail@plt+0x302c>
   14454:	mov	r8, sl
   14458:	mov	sl, r7
   1445c:	b	14cc8 <__assert_fail@plt+0x37d0>
   14460:	mov	r3, #97	; 0x61
   14464:	b	14434 <__assert_fail@plt+0x2f3c>
   14468:	ldr	r3, [sp, #28]
   1446c:	cmn	r3, #1
   14470:	beq	1449c <__assert_fail@plt+0x2fa4>
   14474:	ldr	r3, [sp, #28]
   14478:	subs	r3, r3, #1
   1447c:	movne	r3, #1
   14480:	cmp	r3, #0
   14484:	bne	14b4c <__assert_fail@plt+0x3654>
   14488:	cmp	r6, #0
   1448c:	beq	144b4 <__assert_fail@plt+0x2fbc>
   14490:	mov	r8, #0
   14494:	mov	r5, r8
   14498:	b	144cc <__assert_fail@plt+0x2fd4>
   1449c:	ldr	r3, [sp, #52]	; 0x34
   144a0:	ldrb	r3, [r3, #1]
   144a4:	adds	r3, r3, #0
   144a8:	movne	r3, #1
   144ac:	b	14480 <__assert_fail@plt+0x2f88>
   144b0:	mov	r8, #0
   144b4:	ldr	r5, [sp, #32]
   144b8:	cmp	sl, #2
   144bc:	movne	r5, #0
   144c0:	andeq	r5, r5, #1
   144c4:	cmp	r5, #0
   144c8:	bne	1467c <__assert_fail@plt+0x3184>
   144cc:	ldr	r3, [sp, #68]	; 0x44
   144d0:	cmp	sl, #2
   144d4:	orreq	r3, r3, #1
   144d8:	eor	r3, r3, #1
   144dc:	ldr	r2, [sp, #32]
   144e0:	orr	r3, r2, r3
   144e4:	tst	r3, #255	; 0xff
   144e8:	beq	14518 <__assert_fail@plt+0x3020>
   144ec:	ldr	r3, [sp, #160]	; 0xa0
   144f0:	cmp	r3, #0
   144f4:	beq	14518 <__assert_fail@plt+0x3020>
   144f8:	lsr	r2, r4, #5
   144fc:	uxtb	r2, r2
   14500:	and	r3, r4, #31
   14504:	ldr	r1, [sp, #160]	; 0xa0
   14508:	ldr	r2, [r1, r2, lsl #2]
   1450c:	lsr	r3, r2, r3
   14510:	tst	r3, #1
   14514:	bne	14524 <__assert_fail@plt+0x302c>
   14518:	ldr	r3, [sp, #56]	; 0x38
   1451c:	cmp	r3, #0
   14520:	beq	143b0 <__assert_fail@plt+0x2eb8>
   14524:	ldr	r3, [sp, #32]
   14528:	cmp	r3, #0
   1452c:	bne	14d38 <__assert_fail@plt+0x3840>
   14530:	ldr	r3, [sp, #44]	; 0x2c
   14534:	eor	r3, r3, #1
   14538:	cmp	sl, #2
   1453c:	movne	r3, #0
   14540:	andeq	r3, r3, #1
   14544:	cmp	r3, #0
   14548:	beq	1458c <__assert_fail@plt+0x3094>
   1454c:	cmp	r7, fp
   14550:	ldrhi	r2, [sp, #36]	; 0x24
   14554:	movhi	r1, #39	; 0x27
   14558:	strbhi	r1, [r2, fp]
   1455c:	add	r2, fp, #1
   14560:	cmp	r7, r2
   14564:	ldrhi	r1, [sp, #36]	; 0x24
   14568:	movhi	r0, #36	; 0x24
   1456c:	strbhi	r0, [r1, r2]
   14570:	add	r2, fp, #2
   14574:	cmp	r7, r2
   14578:	ldrhi	r1, [sp, #36]	; 0x24
   1457c:	movhi	r0, #39	; 0x27
   14580:	strbhi	r0, [r1, r2]
   14584:	add	fp, fp, #3
   14588:	str	r3, [sp, #44]	; 0x2c
   1458c:	cmp	r7, fp
   14590:	ldrhi	r3, [sp, #36]	; 0x24
   14594:	movhi	r2, #92	; 0x5c
   14598:	strbhi	r2, [r3, fp]
   1459c:	add	fp, fp, #1
   145a0:	cmp	fp, r7
   145a4:	ldrcc	r3, [sp, #36]	; 0x24
   145a8:	strbcc	r4, [r3, fp]
   145ac:	add	fp, fp, #1
   145b0:	ldr	r3, [sp, #40]	; 0x28
   145b4:	cmp	r8, #0
   145b8:	moveq	r3, #0
   145bc:	str	r3, [sp, #40]	; 0x28
   145c0:	add	r6, r6, #1
   145c4:	ldr	r3, [sp, #28]
   145c8:	cmn	r3, #1
   145cc:	beq	14b58 <__assert_fail@plt+0x3660>
   145d0:	ldr	r3, [sp, #28]
   145d4:	subs	r8, r3, r6
   145d8:	movne	r8, #1
   145dc:	cmp	r8, #0
   145e0:	beq	14b6c <__assert_fail@plt+0x3674>
   145e4:	ldr	r5, [sp, #48]	; 0x30
   145e8:	cmp	sl, #2
   145ec:	moveq	r5, #0
   145f0:	andne	r5, r5, #1
   145f4:	ldr	r3, [sp, #60]	; 0x3c
   145f8:	adds	r9, r3, #0
   145fc:	movne	r9, #1
   14600:	ands	r2, r5, r9
   14604:	str	r2, [sp, #56]	; 0x38
   14608:	beq	13ed0 <__assert_fail@plt+0x29d8>
   1460c:	add	r4, r6, r3
   14610:	ldr	r2, [sp, #28]
   14614:	cmp	r3, #1
   14618:	movls	r3, #0
   1461c:	movhi	r3, #1
   14620:	cmn	r2, #1
   14624:	movne	r3, #0
   14628:	cmp	r3, #0
   1462c:	beq	1463c <__assert_fail@plt+0x3144>
   14630:	ldr	r0, [sp, #52]	; 0x34
   14634:	bl	113c0 <strlen@plt>
   14638:	str	r0, [sp, #28]
   1463c:	ldr	r3, [sp, #28]
   14640:	cmp	r3, r4
   14644:	bcc	13ec8 <__assert_fail@plt+0x29d0>
   14648:	ldr	r2, [sp, #60]	; 0x3c
   1464c:	ldr	r1, [sp, #72]	; 0x48
   14650:	ldr	r3, [sp, #52]	; 0x34
   14654:	add	r0, r3, r6
   14658:	bl	11270 <memcmp@plt>
   1465c:	cmp	r0, #0
   14660:	bne	140e8 <__assert_fail@plt+0x2bf0>
   14664:	ldr	r3, [sp, #32]
   14668:	cmp	r3, #0
   1466c:	beq	13ed0 <__assert_fail@plt+0x29d8>
   14670:	mov	r8, sl
   14674:	mov	sl, r7
   14678:	b	14cc8 <__assert_fail@plt+0x37d0>
   1467c:	mov	r8, sl
   14680:	mov	sl, r7
   14684:	b	14cc8 <__assert_fail@plt+0x37d0>
   14688:	cmp	sl, #2
   1468c:	strne	r8, [sp, #80]	; 0x50
   14690:	movne	r5, #0
   14694:	bne	144cc <__assert_fail@plt+0x2fd4>
   14698:	ldr	r3, [sp, #32]
   1469c:	cmp	r3, #0
   146a0:	bne	14cb4 <__assert_fail@plt+0x37bc>
   146a4:	ldr	r2, [sp, #76]	; 0x4c
   146a8:	adds	r3, r7, #0
   146ac:	movne	r3, #1
   146b0:	cmp	r2, #0
   146b4:	movne	r3, #0
   146b8:	cmp	r3, #0
   146bc:	movne	r3, #0
   146c0:	bne	146f0 <__assert_fail@plt+0x31f8>
   146c4:	cmp	r7, fp
   146c8:	ldrhi	r3, [sp, #36]	; 0x24
   146cc:	movhi	r2, #39	; 0x27
   146d0:	strbhi	r2, [r3, fp]
   146d4:	add	r3, fp, #1
   146d8:	cmp	r7, r3
   146dc:	ldrhi	r2, [sp, #36]	; 0x24
   146e0:	movhi	r1, #92	; 0x5c
   146e4:	strbhi	r1, [r2, r3]
   146e8:	mov	r3, r7
   146ec:	ldr	r7, [sp, #76]	; 0x4c
   146f0:	add	r2, fp, #2
   146f4:	cmp	r2, r3
   146f8:	ldrcc	r1, [sp, #36]	; 0x24
   146fc:	movcc	r0, #39	; 0x27
   14700:	strbcc	r0, [r1, r2]
   14704:	add	fp, fp, #3
   14708:	ldr	r2, [sp, #32]
   1470c:	mov	r5, r2
   14710:	str	r8, [sp, #80]	; 0x50
   14714:	str	r2, [sp, #44]	; 0x2c
   14718:	str	r7, [sp, #76]	; 0x4c
   1471c:	mov	r7, r3
   14720:	b	144cc <__assert_fail@plt+0x2fd4>
   14724:	ldr	r5, [sp, #84]	; 0x54
   14728:	cmp	r5, #1
   1472c:	beq	1475c <__assert_fail@plt+0x3264>
   14730:	mov	r3, #0
   14734:	str	r3, [sp, #104]	; 0x68
   14738:	str	r3, [sp, #108]	; 0x6c
   1473c:	ldr	r3, [sp, #28]
   14740:	cmn	r3, #1
   14744:	beq	14790 <__assert_fail@plt+0x3298>
   14748:	mov	r3, #0
   1474c:	str	r4, [sp, #88]	; 0x58
   14750:	str	fp, [sp, #92]	; 0x5c
   14754:	mov	fp, r3
   14758:	b	148b8 <__assert_fail@plt+0x33c0>
   1475c:	bl	113a8 <__ctype_b_loc@plt>
   14760:	ldr	r2, [r0]
   14764:	lsl	r3, r4, #1
   14768:	ldrh	r8, [r2, r3]
   1476c:	lsr	r8, r8, #14
   14770:	and	r8, r8, #1
   14774:	mov	r2, r5
   14778:	eor	r5, r8, #1
   1477c:	ldr	r3, [sp, #48]	; 0x30
   14780:	and	r5, r5, r3
   14784:	ands	r5, r5, #255	; 0xff
   14788:	beq	144cc <__assert_fail@plt+0x2fd4>
   1478c:	b	14950 <__assert_fail@plt+0x3458>
   14790:	ldr	r0, [sp, #52]	; 0x34
   14794:	bl	113c0 <strlen@plt>
   14798:	str	r0, [sp, #28]
   1479c:	b	14748 <__assert_fail@plt+0x3250>
   147a0:	mov	r2, fp
   147a4:	mov	r1, r4
   147a8:	ldr	r4, [sp, #88]	; 0x58
   147ac:	ldr	fp, [sp, #92]	; 0x5c
   147b0:	ldr	r0, [sp, #28]
   147b4:	cmp	r0, r5
   147b8:	bls	14984 <__assert_fail@plt+0x348c>
   147bc:	ldrb	r3, [r1]
   147c0:	cmp	r3, #0
   147c4:	beq	1498c <__assert_fail@plt+0x3494>
   147c8:	mov	r3, r1
   147cc:	add	r2, r2, #1
   147d0:	add	r1, r6, r2
   147d4:	cmp	r0, r1
   147d8:	bls	14994 <__assert_fail@plt+0x349c>
   147dc:	ldrb	r1, [r3, #1]!
   147e0:	cmp	r1, #0
   147e4:	bne	147cc <__assert_fail@plt+0x32d4>
   147e8:	mov	r8, #0
   147ec:	b	14948 <__assert_fail@plt+0x3450>
   147f0:	cmp	r4, r5
   147f4:	beq	14894 <__assert_fail@plt+0x339c>
   147f8:	ldrb	r3, [r4, #1]!
   147fc:	sub	r3, r3, #91	; 0x5b
   14800:	cmp	r3, #33	; 0x21
   14804:	ldrls	pc, [pc, r3, lsl #2]
   14808:	b	147f0 <__assert_fail@plt+0x32f8>
   1480c:	andeq	r4, r1, r0, asr #25
   14810:	andeq	r4, r1, r0, asr #25
   14814:	strdeq	r4, [r1], -r0
   14818:	andeq	r4, r1, r0, asr #25
   1481c:	strdeq	r4, [r1], -r0
   14820:	andeq	r4, r1, r0, asr #25
   14824:	strdeq	r4, [r1], -r0
   14828:	strdeq	r4, [r1], -r0
   1482c:	strdeq	r4, [r1], -r0
   14830:	strdeq	r4, [r1], -r0
   14834:	strdeq	r4, [r1], -r0
   14838:	strdeq	r4, [r1], -r0
   1483c:	strdeq	r4, [r1], -r0
   14840:	strdeq	r4, [r1], -r0
   14844:	strdeq	r4, [r1], -r0
   14848:	strdeq	r4, [r1], -r0
   1484c:	strdeq	r4, [r1], -r0
   14850:	strdeq	r4, [r1], -r0
   14854:	strdeq	r4, [r1], -r0
   14858:	strdeq	r4, [r1], -r0
   1485c:	strdeq	r4, [r1], -r0
   14860:	strdeq	r4, [r1], -r0
   14864:	strdeq	r4, [r1], -r0
   14868:	strdeq	r4, [r1], -r0
   1486c:	strdeq	r4, [r1], -r0
   14870:	strdeq	r4, [r1], -r0
   14874:	strdeq	r4, [r1], -r0
   14878:	strdeq	r4, [r1], -r0
   1487c:	strdeq	r4, [r1], -r0
   14880:	strdeq	r4, [r1], -r0
   14884:	strdeq	r4, [r1], -r0
   14888:	strdeq	r4, [r1], -r0
   1488c:	strdeq	r4, [r1], -r0
   14890:	andeq	r4, r1, r0, asr #25
   14894:	ldr	r0, [sp, #100]	; 0x64
   14898:	bl	112dc <iswprint@plt>
   1489c:	cmp	r0, #0
   148a0:	moveq	r8, #0
   148a4:	add	fp, fp, r9
   148a8:	add	r0, sp, #104	; 0x68
   148ac:	bl	11264 <mbsinit@plt>
   148b0:	cmp	r0, #0
   148b4:	bne	14928 <__assert_fail@plt+0x3430>
   148b8:	add	r5, r6, fp
   148bc:	ldr	r3, [sp, #52]	; 0x34
   148c0:	add	r4, r3, r5
   148c4:	add	r3, sp, #104	; 0x68
   148c8:	ldr	r2, [sp, #28]
   148cc:	sub	r2, r2, r5
   148d0:	mov	r1, r4
   148d4:	add	r0, sp, #100	; 0x64
   148d8:	bl	135c4 <__assert_fail@plt+0x20cc>
   148dc:	subs	r9, r0, #0
   148e0:	beq	1499c <__assert_fail@plt+0x34a4>
   148e4:	cmn	r9, #1
   148e8:	beq	14938 <__assert_fail@plt+0x3440>
   148ec:	cmn	r9, #2
   148f0:	beq	147a0 <__assert_fail@plt+0x32a8>
   148f4:	ldr	r3, [sp, #32]
   148f8:	cmp	sl, #2
   148fc:	movne	r3, #0
   14900:	andeq	r3, r3, #1
   14904:	cmp	r3, #0
   14908:	beq	14894 <__assert_fail@plt+0x339c>
   1490c:	cmp	r9, #1
   14910:	bls	14894 <__assert_fail@plt+0x339c>
   14914:	sub	r3, r9, #1
   14918:	add	r5, r3, r5
   1491c:	ldr	r3, [sp, #52]	; 0x34
   14920:	add	r5, r3, r5
   14924:	b	147f8 <__assert_fail@plt+0x3300>
   14928:	ldr	r4, [sp, #88]	; 0x58
   1492c:	mov	r2, fp
   14930:	ldr	fp, [sp, #92]	; 0x5c
   14934:	b	14948 <__assert_fail@plt+0x3450>
   14938:	ldr	r4, [sp, #88]	; 0x58
   1493c:	mov	r2, fp
   14940:	ldr	fp, [sp, #92]	; 0x5c
   14944:	mov	r8, #0
   14948:	cmp	r2, #1
   1494c:	bls	14778 <__assert_fail@plt+0x3280>
   14950:	add	r1, r6, r2
   14954:	ldr	ip, [sp, #64]	; 0x40
   14958:	mov	r5, #0
   1495c:	eor	r3, r8, #1
   14960:	ldr	r2, [sp, #48]	; 0x30
   14964:	and	r3, r3, r2
   14968:	uxtb	r3, r3
   1496c:	ldr	r9, [sp, #32]
   14970:	ldr	lr, [sp, #44]	; 0x2c
   14974:	ldr	r2, [sp, #56]	; 0x38
   14978:	str	r8, [sp, #56]	; 0x38
   1497c:	ldr	r0, [sp, #36]	; 0x24
   14980:	b	14a1c <__assert_fail@plt+0x3524>
   14984:	mov	r8, #0
   14988:	b	14948 <__assert_fail@plt+0x3450>
   1498c:	mov	r8, #0
   14990:	b	14948 <__assert_fail@plt+0x3450>
   14994:	mov	r8, #0
   14998:	b	14948 <__assert_fail@plt+0x3450>
   1499c:	ldr	r4, [sp, #88]	; 0x58
   149a0:	mov	r2, fp
   149a4:	ldr	fp, [sp, #92]	; 0x5c
   149a8:	b	14948 <__assert_fail@plt+0x3450>
   149ac:	cmp	r2, #0
   149b0:	beq	149c4 <__assert_fail@plt+0x34cc>
   149b4:	cmp	r7, fp
   149b8:	movhi	r2, #92	; 0x5c
   149bc:	strbhi	r2, [r0, fp]
   149c0:	add	fp, fp, #1
   149c4:	add	r8, r6, #1
   149c8:	cmp	r1, r8
   149cc:	bls	14ad4 <__assert_fail@plt+0x35dc>
   149d0:	eor	r2, r5, #1
   149d4:	and	r2, r2, lr
   149d8:	ands	r2, r2, #255	; 0xff
   149dc:	beq	14af0 <__assert_fail@plt+0x35f8>
   149e0:	cmp	r7, fp
   149e4:	movhi	r2, #39	; 0x27
   149e8:	strbhi	r2, [r0, fp]
   149ec:	add	r2, fp, #1
   149f0:	cmp	r7, r2
   149f4:	movhi	lr, #39	; 0x27
   149f8:	strbhi	lr, [r0, r2]
   149fc:	add	fp, fp, #2
   14a00:	mov	r6, r8
   14a04:	mov	r2, r3
   14a08:	mov	lr, r3
   14a0c:	cmp	r7, fp
   14a10:	strbhi	r4, [r0, fp]
   14a14:	add	fp, fp, #1
   14a18:	ldrb	r4, [ip, #1]!
   14a1c:	cmp	r3, #0
   14a20:	beq	149ac <__assert_fail@plt+0x34b4>
   14a24:	cmp	r9, #0
   14a28:	bne	14d2c <__assert_fail@plt+0x3834>
   14a2c:	eor	r5, lr, #1
   14a30:	cmp	sl, #2
   14a34:	movne	r5, #0
   14a38:	andeq	r5, r5, #1
   14a3c:	cmp	r5, #0
   14a40:	beq	14a78 <__assert_fail@plt+0x3580>
   14a44:	cmp	r7, fp
   14a48:	movhi	lr, #39	; 0x27
   14a4c:	strbhi	lr, [r0, fp]
   14a50:	add	lr, fp, #1
   14a54:	cmp	r7, lr
   14a58:	movhi	r8, #36	; 0x24
   14a5c:	strbhi	r8, [r0, lr]
   14a60:	add	lr, fp, #2
   14a64:	cmp	r7, lr
   14a68:	movhi	r8, #39	; 0x27
   14a6c:	strbhi	r8, [r0, lr]
   14a70:	add	fp, fp, #3
   14a74:	mov	lr, r5
   14a78:	cmp	r7, fp
   14a7c:	movhi	r5, #92	; 0x5c
   14a80:	strbhi	r5, [r0, fp]
   14a84:	add	r5, fp, #1
   14a88:	cmp	r7, r5
   14a8c:	lsrhi	r8, r4, #6
   14a90:	addhi	r8, r8, #48	; 0x30
   14a94:	strbhi	r8, [r0, r5]
   14a98:	add	r8, fp, #2
   14a9c:	cmp	r7, r8
   14aa0:	lsrhi	r5, r4, #3
   14aa4:	andhi	r5, r5, #7
   14aa8:	addhi	r5, r5, #48	; 0x30
   14aac:	strbhi	r5, [r0, r8]
   14ab0:	add	fp, fp, #3
   14ab4:	and	r4, r4, #7
   14ab8:	add	r4, r4, #48	; 0x30
   14abc:	add	r5, r6, #1
   14ac0:	cmp	r1, r5
   14ac4:	bls	14ae0 <__assert_fail@plt+0x35e8>
   14ac8:	mov	r6, r5
   14acc:	mov	r5, r3
   14ad0:	b	14a0c <__assert_fail@plt+0x3514>
   14ad4:	str	lr, [sp, #44]	; 0x2c
   14ad8:	ldr	r8, [sp, #56]	; 0x38
   14adc:	b	143b0 <__assert_fail@plt+0x2eb8>
   14ae0:	str	lr, [sp, #44]	; 0x2c
   14ae4:	ldr	r8, [sp, #56]	; 0x38
   14ae8:	mov	r5, r3
   14aec:	b	143b0 <__assert_fail@plt+0x2eb8>
   14af0:	mov	r6, r8
   14af4:	b	14a0c <__assert_fail@plt+0x3514>
   14af8:	mov	r5, #0
   14afc:	b	144cc <__assert_fail@plt+0x2fd4>
   14b00:	mov	r8, r5
   14b04:	ldr	r5, [sp, #48]	; 0x30
   14b08:	mov	r4, #48	; 0x30
   14b0c:	b	144cc <__assert_fail@plt+0x2fd4>
   14b10:	ldr	r8, [sp, #32]
   14b14:	mov	r4, #48	; 0x30
   14b18:	b	144cc <__assert_fail@plt+0x2fd4>
   14b1c:	ldr	r8, [sp, #32]
   14b20:	mov	r4, #48	; 0x30
   14b24:	b	144cc <__assert_fail@plt+0x2fd4>
   14b28:	mov	r8, #0
   14b2c:	mov	r5, r8
   14b30:	b	144cc <__assert_fail@plt+0x2fd4>
   14b34:	mov	r8, #0
   14b38:	mov	r5, r8
   14b3c:	b	144cc <__assert_fail@plt+0x2fd4>
   14b40:	mov	r8, #0
   14b44:	mov	r5, r8
   14b48:	b	144cc <__assert_fail@plt+0x2fd4>
   14b4c:	mov	r8, #0
   14b50:	mov	r5, r8
   14b54:	b	144cc <__assert_fail@plt+0x2fd4>
   14b58:	ldr	r3, [sp, #52]	; 0x34
   14b5c:	ldrb	r8, [r3, r6]
   14b60:	adds	r8, r8, #0
   14b64:	movne	r8, #1
   14b68:	b	145dc <__assert_fail@plt+0x30e4>
   14b6c:	cmp	sl, #2
   14b70:	movne	r3, #0
   14b74:	moveq	r3, #1
   14b78:	ldr	r1, [sp, #32]
   14b7c:	mov	r2, r1
   14b80:	and	r2, r2, r3
   14b84:	cmp	fp, #0
   14b88:	movne	r2, #0
   14b8c:	andeq	r2, r2, #1
   14b90:	cmp	r2, #0
   14b94:	bne	14d44 <__assert_fail@plt+0x384c>
   14b98:	eor	r2, r1, #1
   14b9c:	and	r3, r3, r2
   14ba0:	ldr	r1, [sp, #80]	; 0x50
   14ba4:	tst	r1, r3
   14ba8:	beq	14c20 <__assert_fail@plt+0x3728>
   14bac:	ldr	r3, [sp, #40]	; 0x28
   14bb0:	cmp	r3, #0
   14bb4:	bne	14bdc <__assert_fail@plt+0x36e4>
   14bb8:	ldr	r1, [sp, #76]	; 0x4c
   14bbc:	clz	r3, r7
   14bc0:	lsr	r3, r3, #5
   14bc4:	cmp	r1, #0
   14bc8:	moveq	r3, #0
   14bcc:	cmp	r3, #0
   14bd0:	beq	14c20 <__assert_fail@plt+0x3728>
   14bd4:	ldr	r7, [sp, #76]	; 0x4c
   14bd8:	b	13c70 <__assert_fail@plt+0x2778>
   14bdc:	ldr	r3, [sp, #168]	; 0xa8
   14be0:	str	r3, [sp, #16]
   14be4:	ldr	r3, [sp, #164]	; 0xa4
   14be8:	str	r3, [sp, #12]
   14bec:	ldr	r3, [sp, #160]	; 0xa0
   14bf0:	str	r3, [sp, #8]
   14bf4:	ldr	r3, [sp, #156]	; 0x9c
   14bf8:	str	r3, [sp, #4]
   14bfc:	mov	r3, #5
   14c00:	str	r3, [sp]
   14c04:	ldr	r3, [sp, #28]
   14c08:	ldr	r2, [sp, #52]	; 0x34
   14c0c:	ldr	r1, [sp, #76]	; 0x4c
   14c10:	ldr	r0, [sp, #36]	; 0x24
   14c14:	bl	13c10 <__assert_fail@plt+0x2718>
   14c18:	mov	fp, r0
   14c1c:	b	14d20 <__assert_fail@plt+0x3828>
   14c20:	mov	sl, r7
   14c24:	ldr	r3, [sp, #72]	; 0x48
   14c28:	cmp	r3, #0
   14c2c:	moveq	r2, #0
   14c30:	andne	r2, r2, #1
   14c34:	cmp	r2, #0
   14c38:	beq	14c68 <__assert_fail@plt+0x3770>
   14c3c:	mov	r2, r3
   14c40:	ldrb	r3, [r3]
   14c44:	cmp	r3, #0
   14c48:	beq	14c68 <__assert_fail@plt+0x3770>
   14c4c:	ldr	r1, [sp, #36]	; 0x24
   14c50:	cmp	sl, fp
   14c54:	strbhi	r3, [r1, fp]
   14c58:	add	fp, fp, #1
   14c5c:	ldrb	r3, [r2, #1]!
   14c60:	cmp	r3, #0
   14c64:	bne	14c50 <__assert_fail@plt+0x3758>
   14c68:	cmp	sl, fp
   14c6c:	movhi	r3, #0
   14c70:	ldrhi	r2, [sp, #36]	; 0x24
   14c74:	strbhi	r3, [r2, fp]
   14c78:	b	14d20 <__assert_fail@plt+0x3828>
   14c7c:	mov	r8, sl
   14c80:	mov	sl, r7
   14c84:	ldr	r3, [sp, #32]
   14c88:	str	r3, [sp, #48]	; 0x30
   14c8c:	b	14cc8 <__assert_fail@plt+0x37d0>
   14c90:	mov	r8, sl
   14c94:	mov	sl, r7
   14c98:	b	14cc8 <__assert_fail@plt+0x37d0>
   14c9c:	mov	r8, sl
   14ca0:	mov	sl, r7
   14ca4:	b	14cc8 <__assert_fail@plt+0x37d0>
   14ca8:	andeq	r4, r2, r0, lsl lr
   14cac:	andeq	r4, r2, r0, lsr #28
   14cb0:	andeq	r4, r2, r4, lsl lr
   14cb4:	mov	r8, sl
   14cb8:	mov	sl, r7
   14cbc:	b	14cc8 <__assert_fail@plt+0x37d0>
   14cc0:	mov	r8, sl
   14cc4:	mov	sl, r7
   14cc8:	ldr	r3, [sp, #48]	; 0x30
   14ccc:	cmp	r8, #2
   14cd0:	movne	r3, #0
   14cd4:	andeq	r3, r3, #1
   14cd8:	cmp	r3, #0
   14cdc:	movne	r8, #4
   14ce0:	ldr	r3, [sp, #168]	; 0xa8
   14ce4:	str	r3, [sp, #16]
   14ce8:	ldr	r3, [sp, #164]	; 0xa4
   14cec:	str	r3, [sp, #12]
   14cf0:	mov	r3, #0
   14cf4:	str	r3, [sp, #8]
   14cf8:	ldr	r3, [sp, #156]	; 0x9c
   14cfc:	bic	r3, r3, #2
   14d00:	str	r3, [sp, #4]
   14d04:	str	r8, [sp]
   14d08:	ldr	r3, [sp, #28]
   14d0c:	ldr	r2, [sp, #52]	; 0x34
   14d10:	mov	r1, sl
   14d14:	ldr	r0, [sp, #36]	; 0x24
   14d18:	bl	13c10 <__assert_fail@plt+0x2718>
   14d1c:	mov	fp, r0
   14d20:	mov	r0, fp
   14d24:	add	sp, sp, #116	; 0x74
   14d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d2c:	mov	r8, sl
   14d30:	mov	sl, r7
   14d34:	b	14cc8 <__assert_fail@plt+0x37d0>
   14d38:	mov	r8, sl
   14d3c:	mov	sl, r7
   14d40:	b	14cc8 <__assert_fail@plt+0x37d0>
   14d44:	mov	r8, sl
   14d48:	mov	sl, r7
   14d4c:	b	14cc8 <__assert_fail@plt+0x37d0>
   14d50:	mov	r8, sl
   14d54:	mov	sl, r7
   14d58:	b	14ce0 <__assert_fail@plt+0x37e8>
   14d5c:	mov	r3, #1
   14d60:	str	r3, [sp, #32]
   14d64:	str	r3, [sp, #48]	; 0x30
   14d68:	str	r3, [sp, #60]	; 0x3c
   14d6c:	ldr	r3, [pc, #-196]	; 14cb0 <__assert_fail@plt+0x37b8>
   14d70:	str	r3, [sp, #72]	; 0x48
   14d74:	mov	fp, #0
   14d78:	mov	sl, #5
   14d7c:	b	13ccc <__assert_fail@plt+0x27d4>
   14d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d84:	sub	sp, sp, #52	; 0x34
   14d88:	mov	r5, r0
   14d8c:	str	r1, [sp, #24]
   14d90:	str	r2, [sp, #28]
   14d94:	mov	r4, r3
   14d98:	bl	113f0 <__errno_location@plt>
   14d9c:	str	r0, [sp, #32]
   14da0:	ldr	r3, [r0]
   14da4:	str	r3, [sp, #36]	; 0x24
   14da8:	ldr	r3, [pc, #396]	; 14f3c <__assert_fail@plt+0x3a44>
   14dac:	ldr	r6, [r3]
   14db0:	cmn	r5, #-2147483647	; 0x80000001
   14db4:	movne	r3, #0
   14db8:	moveq	r3, #1
   14dbc:	orrs	r3, r3, r5, lsr #31
   14dc0:	bne	14f00 <__assert_fail@plt+0x3a08>
   14dc4:	ldr	r3, [pc, #368]	; 14f3c <__assert_fail@plt+0x3a44>
   14dc8:	ldr	r2, [r3, #4]
   14dcc:	cmp	r5, r2
   14dd0:	blt	14e38 <__assert_fail@plt+0x3940>
   14dd4:	str	r2, [sp, #44]	; 0x2c
   14dd8:	add	r3, r3, #8
   14ddc:	cmp	r6, r3
   14de0:	beq	14f04 <__assert_fail@plt+0x3a0c>
   14de4:	sub	r2, r5, r2
   14de8:	mov	r3, #8
   14dec:	str	r3, [sp]
   14df0:	mvn	r3, #-2147483648	; 0x80000000
   14df4:	add	r2, r2, #1
   14df8:	add	r1, sp, #44	; 0x2c
   14dfc:	mov	r0, r6
   14e00:	bl	23298 <__assert_fail@plt+0x11da0>
   14e04:	mov	r6, r0
   14e08:	ldr	r3, [pc, #300]	; 14f3c <__assert_fail@plt+0x3a44>
   14e0c:	str	r0, [r3]
   14e10:	ldr	r7, [pc, #292]	; 14f3c <__assert_fail@plt+0x3a44>
   14e14:	ldr	r0, [r7, #4]
   14e18:	ldr	r2, [sp, #44]	; 0x2c
   14e1c:	sub	r2, r2, r0
   14e20:	lsl	r2, r2, #3
   14e24:	mov	r1, #0
   14e28:	add	r0, r6, r0, lsl #3
   14e2c:	bl	11414 <memset@plt>
   14e30:	ldr	r3, [sp, #44]	; 0x2c
   14e34:	str	r3, [r7, #4]
   14e38:	add	fp, r6, r5, lsl #3
   14e3c:	ldr	r8, [r6, r5, lsl #3]
   14e40:	ldr	r7, [fp, #4]
   14e44:	ldr	r9, [r4, #4]
   14e48:	orr	r9, r9, #1
   14e4c:	add	sl, r4, #8
   14e50:	ldr	r3, [r4, #44]	; 0x2c
   14e54:	str	r3, [sp, #16]
   14e58:	ldr	r3, [r4, #40]	; 0x28
   14e5c:	str	r3, [sp, #12]
   14e60:	str	sl, [sp, #8]
   14e64:	str	r9, [sp, #4]
   14e68:	ldr	r3, [r4]
   14e6c:	str	r3, [sp]
   14e70:	ldr	r3, [sp, #28]
   14e74:	ldr	r2, [sp, #24]
   14e78:	mov	r1, r8
   14e7c:	mov	r0, r7
   14e80:	bl	13c10 <__assert_fail@plt+0x2718>
   14e84:	cmp	r8, r0
   14e88:	bhi	14ee8 <__assert_fail@plt+0x39f0>
   14e8c:	add	r8, r0, #1
   14e90:	str	r8, [r6, r5, lsl #3]
   14e94:	ldr	r3, [pc, #164]	; 14f40 <__assert_fail@plt+0x3a48>
   14e98:	cmp	r7, r3
   14e9c:	beq	14ea8 <__assert_fail@plt+0x39b0>
   14ea0:	mov	r0, r7
   14ea4:	bl	13340 <__assert_fail@plt+0x1e48>
   14ea8:	mov	r0, r8
   14eac:	bl	23114 <__assert_fail@plt+0x11c1c>
   14eb0:	mov	r7, r0
   14eb4:	str	r0, [fp, #4]
   14eb8:	ldr	r3, [r4, #44]	; 0x2c
   14ebc:	str	r3, [sp, #16]
   14ec0:	ldr	r3, [r4, #40]	; 0x28
   14ec4:	str	r3, [sp, #12]
   14ec8:	str	sl, [sp, #8]
   14ecc:	str	r9, [sp, #4]
   14ed0:	ldr	r3, [r4]
   14ed4:	str	r3, [sp]
   14ed8:	ldr	r3, [sp, #28]
   14edc:	ldr	r2, [sp, #24]
   14ee0:	mov	r1, r8
   14ee4:	bl	13c10 <__assert_fail@plt+0x2718>
   14ee8:	ldr	r3, [sp, #32]
   14eec:	ldr	r2, [sp, #36]	; 0x24
   14ef0:	str	r2, [r3]
   14ef4:	mov	r0, r7
   14ef8:	add	sp, sp, #52	; 0x34
   14efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f00:	bl	114ec <abort@plt>
   14f04:	sub	r2, r5, r2
   14f08:	mov	r3, #8
   14f0c:	str	r3, [sp]
   14f10:	mvn	r3, #-2147483648	; 0x80000000
   14f14:	add	r2, r2, #1
   14f18:	add	r1, sp, #44	; 0x2c
   14f1c:	mov	r0, #0
   14f20:	bl	23298 <__assert_fail@plt+0x11da0>
   14f24:	mov	r6, r0
   14f28:	ldr	r3, [pc, #12]	; 14f3c <__assert_fail@plt+0x3a44>
   14f2c:	str	r0, [r3], #8
   14f30:	ldm	r3, {r0, r1}
   14f34:	stm	r6, {r0, r1}
   14f38:	b	14e10 <__assert_fail@plt+0x3918>
   14f3c:	andeq	r6, r3, r0, asr r1
   14f40:	andeq	r6, r3, r0, asr #3
   14f44:	push	{r4, r5, r6, lr}
   14f48:	mov	r4, r0
   14f4c:	bl	113f0 <__errno_location@plt>
   14f50:	mov	r5, r0
   14f54:	ldr	r6, [r0]
   14f58:	cmp	r4, #0
   14f5c:	ldr	r3, [pc, #20]	; 14f78 <__assert_fail@plt+0x3a80>
   14f60:	moveq	r4, r3
   14f64:	mov	r1, #48	; 0x30
   14f68:	mov	r0, r4
   14f6c:	bl	23600 <__assert_fail@plt+0x12108>
   14f70:	str	r6, [r5]
   14f74:	pop	{r4, r5, r6, pc}
   14f78:	andeq	r6, r3, r0, asr #5
   14f7c:	subs	r3, r0, #0
   14f80:	ldr	r2, [pc, #8]	; 14f90 <__assert_fail@plt+0x3a98>
   14f84:	moveq	r3, r2
   14f88:	ldr	r0, [r3]
   14f8c:	bx	lr
   14f90:	andeq	r6, r3, r0, asr #5
   14f94:	subs	r3, r0, #0
   14f98:	ldr	r2, [pc, #8]	; 14fa8 <__assert_fail@plt+0x3ab0>
   14f9c:	moveq	r3, r2
   14fa0:	str	r1, [r3]
   14fa4:	bx	lr
   14fa8:	andeq	r6, r3, r0, asr #5
   14fac:	push	{lr}		; (str lr, [sp, #-4]!)
   14fb0:	subs	r3, r0, #0
   14fb4:	ldr	r0, [pc, #44]	; 14fe8 <__assert_fail@plt+0x3af0>
   14fb8:	moveq	r3, r0
   14fbc:	add	r3, r3, #8
   14fc0:	lsr	lr, r1, #5
   14fc4:	and	r1, r1, #31
   14fc8:	ldr	ip, [r3, lr, lsl #2]
   14fcc:	lsr	r0, ip, r1
   14fd0:	eor	r2, r2, r0
   14fd4:	and	r2, r2, #1
   14fd8:	eor	r1, ip, r2, lsl r1
   14fdc:	str	r1, [r3, lr, lsl #2]
   14fe0:	and	r0, r0, #1
   14fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fe8:	andeq	r6, r3, r0, asr #5
   14fec:	subs	r3, r0, #0
   14ff0:	ldr	r2, [pc, #12]	; 15004 <__assert_fail@plt+0x3b0c>
   14ff4:	moveq	r3, r2
   14ff8:	ldr	r0, [r3, #4]
   14ffc:	str	r1, [r3, #4]
   15000:	bx	lr
   15004:	andeq	r6, r3, r0, asr #5
   15008:	subs	r3, r0, #0
   1500c:	ldr	r0, [pc, #40]	; 1503c <__assert_fail@plt+0x3b44>
   15010:	moveq	r3, r0
   15014:	mov	r0, #10
   15018:	str	r0, [r3]
   1501c:	cmp	r2, #0
   15020:	cmpne	r1, #0
   15024:	beq	15034 <__assert_fail@plt+0x3b3c>
   15028:	str	r1, [r3, #40]	; 0x28
   1502c:	str	r2, [r3, #44]	; 0x2c
   15030:	bx	lr
   15034:	push	{r4, lr}
   15038:	bl	114ec <abort@plt>
   1503c:	andeq	r6, r3, r0, asr #5
   15040:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15044:	sub	sp, sp, #24
   15048:	mov	r7, r0
   1504c:	mov	r8, r1
   15050:	mov	r9, r2
   15054:	mov	sl, r3
   15058:	ldr	r4, [sp, #56]	; 0x38
   1505c:	cmp	r4, #0
   15060:	ldr	r3, [pc, #84]	; 150bc <__assert_fail@plt+0x3bc4>
   15064:	moveq	r4, r3
   15068:	bl	113f0 <__errno_location@plt>
   1506c:	mov	r5, r0
   15070:	ldr	r6, [r0]
   15074:	ldr	r3, [r4, #44]	; 0x2c
   15078:	str	r3, [sp, #16]
   1507c:	ldr	r3, [r4, #40]	; 0x28
   15080:	str	r3, [sp, #12]
   15084:	add	r3, r4, #8
   15088:	str	r3, [sp, #8]
   1508c:	ldr	r3, [r4, #4]
   15090:	str	r3, [sp, #4]
   15094:	ldr	r3, [r4]
   15098:	str	r3, [sp]
   1509c:	mov	r3, sl
   150a0:	mov	r2, r9
   150a4:	mov	r1, r8
   150a8:	mov	r0, r7
   150ac:	bl	13c10 <__assert_fail@plt+0x2718>
   150b0:	str	r6, [r5]
   150b4:	add	sp, sp, #24
   150b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   150bc:	andeq	r6, r3, r0, asr #5
   150c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150c4:	sub	sp, sp, #44	; 0x2c
   150c8:	str	r0, [sp, #28]
   150cc:	str	r1, [sp, #32]
   150d0:	mov	r6, r2
   150d4:	subs	r4, r3, #0
   150d8:	ldr	r3, [pc, #172]	; 1518c <__assert_fail@plt+0x3c94>
   150dc:	moveq	r4, r3
   150e0:	bl	113f0 <__errno_location@plt>
   150e4:	mov	r7, r0
   150e8:	ldr	fp, [r0]
   150ec:	ldr	r5, [r4, #4]
   150f0:	cmp	r6, #0
   150f4:	orreq	r5, r5, #1
   150f8:	add	r9, r4, #8
   150fc:	ldr	r3, [r4, #44]	; 0x2c
   15100:	str	r3, [sp, #16]
   15104:	ldr	r3, [r4, #40]	; 0x28
   15108:	str	r3, [sp, #12]
   1510c:	str	r9, [sp, #8]
   15110:	str	r5, [sp, #4]
   15114:	ldr	r3, [r4]
   15118:	str	r3, [sp]
   1511c:	ldr	r3, [sp, #32]
   15120:	ldr	r2, [sp, #28]
   15124:	mov	r1, #0
   15128:	mov	r0, r1
   1512c:	bl	13c10 <__assert_fail@plt+0x2718>
   15130:	mov	sl, r0
   15134:	add	r8, r0, #1
   15138:	mov	r0, r8
   1513c:	bl	23114 <__assert_fail@plt+0x11c1c>
   15140:	str	r0, [sp, #36]	; 0x24
   15144:	ldr	r3, [r4, #44]	; 0x2c
   15148:	str	r3, [sp, #16]
   1514c:	ldr	r3, [r4, #40]	; 0x28
   15150:	str	r3, [sp, #12]
   15154:	str	r9, [sp, #8]
   15158:	str	r5, [sp, #4]
   1515c:	ldr	r3, [r4]
   15160:	str	r3, [sp]
   15164:	ldr	r3, [sp, #32]
   15168:	ldr	r2, [sp, #28]
   1516c:	mov	r1, r8
   15170:	bl	13c10 <__assert_fail@plt+0x2718>
   15174:	str	fp, [r7]
   15178:	cmp	r6, #0
   1517c:	strne	sl, [r6]
   15180:	ldr	r0, [sp, #36]	; 0x24
   15184:	add	sp, sp, #44	; 0x2c
   15188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1518c:	andeq	r6, r3, r0, asr #5
   15190:	push	{r4, lr}
   15194:	mov	r3, r2
   15198:	mov	r2, #0
   1519c:	bl	150c0 <__assert_fail@plt+0x3bc8>
   151a0:	pop	{r4, pc}
   151a4:	push	{r4, r5, r6, r7, r8, lr}
   151a8:	ldr	r3, [pc, #140]	; 1523c <__assert_fail@plt+0x3d44>
   151ac:	ldr	r7, [r3]
   151b0:	ldr	r3, [r3, #4]
   151b4:	cmp	r3, #1
   151b8:	ble	151e4 <__assert_fail@plt+0x3cec>
   151bc:	mov	r5, r7
   151c0:	mov	r4, #1
   151c4:	ldr	r6, [pc, #112]	; 1523c <__assert_fail@plt+0x3d44>
   151c8:	ldr	r0, [r5, #12]
   151cc:	bl	13340 <__assert_fail@plt+0x1e48>
   151d0:	add	r4, r4, #1
   151d4:	add	r5, r5, #8
   151d8:	ldr	r3, [r6, #4]
   151dc:	cmp	r3, r4
   151e0:	bgt	151c8 <__assert_fail@plt+0x3cd0>
   151e4:	ldr	r0, [r7, #4]
   151e8:	ldr	r3, [pc, #80]	; 15240 <__assert_fail@plt+0x3d48>
   151ec:	cmp	r0, r3
   151f0:	beq	1520c <__assert_fail@plt+0x3d14>
   151f4:	bl	13340 <__assert_fail@plt+0x1e48>
   151f8:	ldr	r3, [pc, #60]	; 1523c <__assert_fail@plt+0x3d44>
   151fc:	mov	r2, #256	; 0x100
   15200:	str	r2, [r3, #8]
   15204:	ldr	r2, [pc, #52]	; 15240 <__assert_fail@plt+0x3d48>
   15208:	str	r2, [r3, #12]
   1520c:	ldr	r3, [pc, #48]	; 15244 <__assert_fail@plt+0x3d4c>
   15210:	cmp	r7, r3
   15214:	beq	1522c <__assert_fail@plt+0x3d34>
   15218:	mov	r0, r7
   1521c:	bl	13340 <__assert_fail@plt+0x1e48>
   15220:	ldr	r3, [pc, #20]	; 1523c <__assert_fail@plt+0x3d44>
   15224:	add	r2, r3, #8
   15228:	str	r2, [r3]
   1522c:	mov	r2, #1
   15230:	ldr	r3, [pc, #4]	; 1523c <__assert_fail@plt+0x3d44>
   15234:	str	r2, [r3, #4]
   15238:	pop	{r4, r5, r6, r7, r8, pc}
   1523c:	andeq	r6, r3, r0, asr r1
   15240:	andeq	r6, r3, r0, asr #3
   15244:	andeq	r6, r3, r8, asr r1
   15248:	push	{r4, lr}
   1524c:	ldr	r3, [pc, #8]	; 1525c <__assert_fail@plt+0x3d64>
   15250:	mvn	r2, #0
   15254:	bl	14d80 <__assert_fail@plt+0x3888>
   15258:	pop	{r4, pc}
   1525c:	andeq	r6, r3, r0, asr #5
   15260:	push	{r4, lr}
   15264:	ldr	r3, [pc, #4]	; 15270 <__assert_fail@plt+0x3d78>
   15268:	bl	14d80 <__assert_fail@plt+0x3888>
   1526c:	pop	{r4, pc}
   15270:	andeq	r6, r3, r0, asr #5
   15274:	push	{r4, lr}
   15278:	mov	r1, r0
   1527c:	mov	r0, #0
   15280:	bl	15248 <__assert_fail@plt+0x3d50>
   15284:	pop	{r4, pc}
   15288:	push	{r4, lr}
   1528c:	mov	r2, r1
   15290:	mov	r1, r0
   15294:	mov	r0, #0
   15298:	bl	15260 <__assert_fail@plt+0x3d68>
   1529c:	pop	{r4, pc}
   152a0:	push	{r4, r5, lr}
   152a4:	sub	sp, sp, #52	; 0x34
   152a8:	mov	r4, r0
   152ac:	mov	r5, r2
   152b0:	mov	r0, sp
   152b4:	bl	13aa8 <__assert_fail@plt+0x25b0>
   152b8:	mov	r3, sp
   152bc:	mvn	r2, #0
   152c0:	mov	r1, r5
   152c4:	mov	r0, r4
   152c8:	bl	14d80 <__assert_fail@plt+0x3888>
   152cc:	add	sp, sp, #52	; 0x34
   152d0:	pop	{r4, r5, pc}
   152d4:	push	{r4, r5, r6, lr}
   152d8:	sub	sp, sp, #48	; 0x30
   152dc:	mov	r4, r0
   152e0:	mov	r5, r2
   152e4:	mov	r6, r3
   152e8:	mov	r0, sp
   152ec:	bl	13aa8 <__assert_fail@plt+0x25b0>
   152f0:	mov	r3, sp
   152f4:	mov	r2, r6
   152f8:	mov	r1, r5
   152fc:	mov	r0, r4
   15300:	bl	14d80 <__assert_fail@plt+0x3888>
   15304:	add	sp, sp, #48	; 0x30
   15308:	pop	{r4, r5, r6, pc}
   1530c:	push	{r4, lr}
   15310:	mov	r2, r1
   15314:	mov	r1, r0
   15318:	mov	r0, #0
   1531c:	bl	152a0 <__assert_fail@plt+0x3da8>
   15320:	pop	{r4, pc}
   15324:	push	{r4, lr}
   15328:	mov	r3, r2
   1532c:	mov	r2, r1
   15330:	mov	r1, r0
   15334:	mov	r0, #0
   15338:	bl	152d4 <__assert_fail@plt+0x3ddc>
   1533c:	pop	{r4, pc}
   15340:	push	{r4, r5, r6, lr}
   15344:	sub	sp, sp, #48	; 0x30
   15348:	mov	r4, r0
   1534c:	mov	r5, r1
   15350:	mov	r6, r2
   15354:	mov	ip, sp
   15358:	ldr	lr, [pc, #64]	; 153a0 <__assert_fail@plt+0x3ea8>
   1535c:	ldm	lr!, {r0, r1, r2, r3}
   15360:	stmia	ip!, {r0, r1, r2, r3}
   15364:	ldm	lr!, {r0, r1, r2, r3}
   15368:	stmia	ip!, {r0, r1, r2, r3}
   1536c:	ldm	lr, {r0, r1, r2, r3}
   15370:	stm	ip, {r0, r1, r2, r3}
   15374:	mov	r2, #1
   15378:	mov	r1, r6
   1537c:	mov	r0, sp
   15380:	bl	14fac <__assert_fail@plt+0x3ab4>
   15384:	mov	r3, sp
   15388:	mov	r2, r5
   1538c:	mov	r1, r4
   15390:	mov	r0, #0
   15394:	bl	14d80 <__assert_fail@plt+0x3888>
   15398:	add	sp, sp, #48	; 0x30
   1539c:	pop	{r4, r5, r6, pc}
   153a0:	andeq	r6, r3, r0, asr #5
   153a4:	push	{r4, lr}
   153a8:	mov	r2, r1
   153ac:	mvn	r1, #0
   153b0:	bl	15340 <__assert_fail@plt+0x3e48>
   153b4:	pop	{r4, pc}
   153b8:	push	{r4, lr}
   153bc:	mov	r1, #58	; 0x3a
   153c0:	bl	153a4 <__assert_fail@plt+0x3eac>
   153c4:	pop	{r4, pc}
   153c8:	push	{r4, lr}
   153cc:	mov	r2, #58	; 0x3a
   153d0:	bl	15340 <__assert_fail@plt+0x3e48>
   153d4:	pop	{r4, pc}
   153d8:	push	{r4, r5, lr}
   153dc:	sub	sp, sp, #100	; 0x64
   153e0:	mov	r4, r0
   153e4:	mov	r5, r2
   153e8:	mov	r0, sp
   153ec:	bl	13aa8 <__assert_fail@plt+0x25b0>
   153f0:	add	lr, sp, #48	; 0x30
   153f4:	mov	ip, sp
   153f8:	ldm	ip!, {r0, r1, r2, r3}
   153fc:	stmia	lr!, {r0, r1, r2, r3}
   15400:	ldm	ip!, {r0, r1, r2, r3}
   15404:	stmia	lr!, {r0, r1, r2, r3}
   15408:	ldm	ip, {r0, r1, r2, r3}
   1540c:	stm	lr, {r0, r1, r2, r3}
   15410:	mov	r2, #1
   15414:	mov	r1, #58	; 0x3a
   15418:	add	r0, sp, #48	; 0x30
   1541c:	bl	14fac <__assert_fail@plt+0x3ab4>
   15420:	add	r3, sp, #48	; 0x30
   15424:	mvn	r2, #0
   15428:	mov	r1, r5
   1542c:	mov	r0, r4
   15430:	bl	14d80 <__assert_fail@plt+0x3888>
   15434:	add	sp, sp, #100	; 0x64
   15438:	pop	{r4, r5, pc}
   1543c:	push	{r4, r5, r6, r7, lr}
   15440:	sub	sp, sp, #52	; 0x34
   15444:	mov	r4, r0
   15448:	mov	r6, r1
   1544c:	mov	r7, r2
   15450:	mov	r5, r3
   15454:	mov	ip, sp
   15458:	ldr	lr, [pc, #64]	; 154a0 <__assert_fail@plt+0x3fa8>
   1545c:	ldm	lr!, {r0, r1, r2, r3}
   15460:	stmia	ip!, {r0, r1, r2, r3}
   15464:	ldm	lr!, {r0, r1, r2, r3}
   15468:	stmia	ip!, {r0, r1, r2, r3}
   1546c:	ldm	lr, {r0, r1, r2, r3}
   15470:	stm	ip, {r0, r1, r2, r3}
   15474:	mov	r2, r7
   15478:	mov	r1, r6
   1547c:	mov	r0, sp
   15480:	bl	15008 <__assert_fail@plt+0x3b10>
   15484:	mov	r3, sp
   15488:	ldr	r2, [sp, #72]	; 0x48
   1548c:	mov	r1, r5
   15490:	mov	r0, r4
   15494:	bl	14d80 <__assert_fail@plt+0x3888>
   15498:	add	sp, sp, #52	; 0x34
   1549c:	pop	{r4, r5, r6, r7, pc}
   154a0:	andeq	r6, r3, r0, asr #5
   154a4:	push	{lr}		; (str lr, [sp, #-4]!)
   154a8:	sub	sp, sp, #12
   154ac:	mvn	ip, #0
   154b0:	str	ip, [sp]
   154b4:	bl	1543c <__assert_fail@plt+0x3f44>
   154b8:	add	sp, sp, #12
   154bc:	pop	{pc}		; (ldr pc, [sp], #4)
   154c0:	push	{r4, lr}
   154c4:	mov	r3, r2
   154c8:	mov	r2, r1
   154cc:	mov	r1, r0
   154d0:	mov	r0, #0
   154d4:	bl	154a4 <__assert_fail@plt+0x3fac>
   154d8:	pop	{r4, pc}
   154dc:	push	{lr}		; (str lr, [sp, #-4]!)
   154e0:	sub	sp, sp, #12
   154e4:	str	r3, [sp]
   154e8:	mov	r3, r2
   154ec:	mov	r2, r1
   154f0:	mov	r1, r0
   154f4:	mov	r0, #0
   154f8:	bl	1543c <__assert_fail@plt+0x3f44>
   154fc:	add	sp, sp, #12
   15500:	pop	{pc}		; (ldr pc, [sp], #4)
   15504:	push	{r4, lr}
   15508:	ldr	r3, [pc, #4]	; 15514 <__assert_fail@plt+0x401c>
   1550c:	bl	14d80 <__assert_fail@plt+0x3888>
   15510:	pop	{r4, pc}
   15514:	andeq	r6, r3, r0, ror #2
   15518:	push	{r4, lr}
   1551c:	mov	r2, r1
   15520:	mov	r1, r0
   15524:	mov	r0, #0
   15528:	bl	15504 <__assert_fail@plt+0x400c>
   1552c:	pop	{r4, pc}
   15530:	push	{r4, lr}
   15534:	mvn	r2, #0
   15538:	bl	15504 <__assert_fail@plt+0x400c>
   1553c:	pop	{r4, pc}
   15540:	push	{r4, lr}
   15544:	mov	r1, r0
   15548:	mov	r0, #0
   1554c:	bl	15530 <__assert_fail@plt+0x4038>
   15550:	pop	{r4, pc}
   15554:	ldr	r3, [r0, #80]	; 0x50
   15558:	cmp	r3, #1
   1555c:	beq	155b0 <__assert_fail@plt+0x40b8>
   15560:	add	ip, r1, #1
   15564:	ldr	r3, [r0, #28]
   15568:	cmp	ip, r3
   1556c:	bge	155b8 <__assert_fail@plt+0x40c0>
   15570:	ldr	r0, [r0, #8]
   15574:	add	r2, r0, ip, lsl #2
   15578:	ldr	r0, [r0, ip, lsl #2]
   1557c:	cmn	r0, #1
   15580:	bne	155c0 <__assert_fail@plt+0x40c8>
   15584:	sub	r1, r3, r1
   15588:	mov	r3, #2
   1558c:	mov	r0, r3
   15590:	cmp	r3, r1
   15594:	beq	155ac <__assert_fail@plt+0x40b4>
   15598:	add	r3, r3, #1
   1559c:	ldr	ip, [r2, #4]!
   155a0:	cmn	ip, #1
   155a4:	beq	1558c <__assert_fail@plt+0x4094>
   155a8:	bx	lr
   155ac:	bx	lr
   155b0:	mov	r0, #1
   155b4:	bx	lr
   155b8:	mov	r0, #1
   155bc:	bx	lr
   155c0:	mov	r0, #1
   155c4:	bx	lr
   155c8:	ldr	r3, [r0, #80]	; 0x50
   155cc:	cmp	r3, #1
   155d0:	ldreq	r3, [r0, #4]
   155d4:	ldrbeq	r0, [r3, r1]
   155d8:	ldrne	r3, [r0, #8]
   155dc:	ldrne	r0, [r3, r1, lsl #2]
   155e0:	bx	lr
   155e4:	ldr	ip, [r0, #36]	; 0x24
   155e8:	ldr	r3, [r0, #48]	; 0x30
   155ec:	cmp	ip, r3
   155f0:	movge	ip, r3
   155f4:	ldr	r3, [r0, #28]
   155f8:	cmp	ip, r3
   155fc:	ble	1562c <__assert_fail@plt+0x4134>
   15600:	ldr	r2, [r0]
   15604:	ldr	r1, [r0, #24]
   15608:	add	r2, r2, r3
   1560c:	ldrb	r2, [r2, r1]
   15610:	ldr	r1, [r0, #64]	; 0x40
   15614:	ldrb	r1, [r1, r2]
   15618:	ldr	r2, [r0, #4]
   1561c:	strb	r1, [r2, r3]
   15620:	add	r3, r3, #1
   15624:	cmp	ip, r3
   15628:	bne	15600 <__assert_fail@plt+0x4108>
   1562c:	str	r3, [r0, #28]
   15630:	str	r3, [r0, #32]
   15634:	bx	lr
   15638:	push	{r4, r5, lr}
   1563c:	mov	r4, r0
   15640:	cmp	r1, #0
   15644:	cmpne	r0, #0
   15648:	moveq	r0, #1
   1564c:	movne	r0, #0
   15650:	beq	156a4 <__assert_fail@plt+0x41ac>
   15654:	mov	r5, r1
   15658:	ldr	r2, [r4, #4]
   1565c:	ldr	r3, [r1, #4]
   15660:	cmp	r2, r3
   15664:	subeq	r3, r2, #1
   15668:	lsleq	r3, r3, #2
   1566c:	beq	15674 <__assert_fail@plt+0x417c>
   15670:	pop	{r4, r5, pc}
   15674:	subs	r2, r2, #1
   15678:	bmi	1569c <__assert_fail@plt+0x41a4>
   1567c:	ldr	ip, [r4, #8]
   15680:	ldr	lr, [ip, r3]
   15684:	ldr	ip, [r5, #8]
   15688:	ldr	ip, [ip, r3]
   1568c:	sub	r3, r3, #4
   15690:	cmp	lr, ip
   15694:	beq	15674 <__assert_fail@plt+0x417c>
   15698:	pop	{r4, r5, pc}
   1569c:	mov	r0, #1
   156a0:	pop	{r4, r5, pc}
   156a4:	mov	r0, #0
   156a8:	pop	{r4, r5, pc}
   156ac:	push	{r4, lr}
   156b0:	ldr	lr, [r0, #4]
   156b4:	cmp	lr, #0
   156b8:	ble	1573c <__assert_fail@plt+0x4244>
   156bc:	sub	lr, lr, #1
   156c0:	mov	ip, #0
   156c4:	cmp	ip, lr
   156c8:	bcs	1571c <__assert_fail@plt+0x4224>
   156cc:	add	r2, ip, lr
   156d0:	lsr	r2, r2, #1
   156d4:	ldr	r4, [r0, #8]
   156d8:	ldr	r3, [r4, r2, lsl #2]
   156dc:	cmp	r1, r3
   156e0:	bgt	15708 <__assert_fail@plt+0x4210>
   156e4:	cmp	ip, r2
   156e8:	bcs	1571c <__assert_fail@plt+0x4224>
   156ec:	add	r3, ip, r2
   156f0:	lsr	r3, r3, #1
   156f4:	ldr	lr, [r4, r3, lsl #2]
   156f8:	cmp	lr, r1
   156fc:	blt	15710 <__assert_fail@plt+0x4218>
   15700:	mov	r2, r3
   15704:	b	156e4 <__assert_fail@plt+0x41ec>
   15708:	mov	r3, r2
   1570c:	mov	r2, lr
   15710:	add	ip, r3, #1
   15714:	mov	lr, r2
   15718:	b	156c4 <__assert_fail@plt+0x41cc>
   1571c:	ldr	r3, [r0, #8]
   15720:	ldr	r3, [r3, ip, lsl #2]
   15724:	cmp	r1, r3
   15728:	beq	15734 <__assert_fail@plt+0x423c>
   1572c:	mov	r0, #0
   15730:	pop	{r4, pc}
   15734:	add	r0, ip, #1
   15738:	pop	{r4, pc}
   1573c:	mov	r0, #0
   15740:	pop	{r4, pc}
   15744:	cmp	r1, #0
   15748:	bxlt	lr
   1574c:	ldr	r3, [r0, #4]
   15750:	cmp	r1, r3
   15754:	bxge	lr
   15758:	sub	r3, r3, #1
   1575c:	str	r3, [r0, #4]
   15760:	cmp	r1, r3
   15764:	bxge	lr
   15768:	push	{lr}		; (str lr, [sp, #-4]!)
   1576c:	lsl	r3, r1, #2
   15770:	ldr	ip, [r0, #8]
   15774:	add	r2, r3, #4
   15778:	ldr	lr, [ip, r2]
   1577c:	str	lr, [ip, r3]
   15780:	add	r1, r1, #1
   15784:	mov	r3, r2
   15788:	ldr	r2, [r0, #4]
   1578c:	cmp	r2, r1
   15790:	bgt	15770 <__assert_fail@plt+0x4278>
   15794:	pop	{pc}		; (ldr pc, [sp], #4)
   15798:	ldrb	r3, [r1, #24]
   1579c:	cmp	r3, #4
   157a0:	beq	157b4 <__assert_fail@plt+0x42bc>
   157a4:	cmp	r3, #17
   157a8:	beq	157e0 <__assert_fail@plt+0x42e8>
   157ac:	mov	r0, #0
   157b0:	bx	lr
   157b4:	ldr	r3, [r0, #132]	; 0x84
   157b8:	cmp	r3, #0
   157bc:	beq	157ac <__assert_fail@plt+0x42b4>
   157c0:	ldr	r2, [r1, #20]
   157c4:	ldr	r2, [r3, r2, lsl #2]
   157c8:	str	r2, [r1, #20]
   157cc:	ldr	r3, [r0, #80]	; 0x50
   157d0:	mov	r1, #1
   157d4:	orr	r3, r3, r1, lsl r2
   157d8:	str	r3, [r0, #80]	; 0x50
   157dc:	b	157ac <__assert_fail@plt+0x42b4>
   157e0:	ldr	r3, [r1, #4]
   157e4:	cmp	r3, #0
   157e8:	beq	157ac <__assert_fail@plt+0x42b4>
   157ec:	ldrb	r2, [r3, #24]
   157f0:	cmp	r2, #17
   157f4:	bne	157ac <__assert_fail@plt+0x42b4>
   157f8:	ldr	r2, [r3, #20]
   157fc:	ldr	r3, [r3, #4]
   15800:	str	r3, [r1, #4]
   15804:	cmp	r3, #0
   15808:	strne	r1, [r3]
   1580c:	ldr	r3, [r0, #132]	; 0x84
   15810:	ldr	r1, [r1, #20]
   15814:	ldr	r1, [r3, r1, lsl #2]
   15818:	str	r1, [r3, r2, lsl #2]
   1581c:	cmp	r2, #31
   15820:	ldrle	r3, [r0, #80]	; 0x50
   15824:	movle	r1, #1
   15828:	bicle	r2, r3, r1, lsl r2
   1582c:	strle	r2, [r0, #80]	; 0x50
   15830:	b	157ac <__assert_fail@plt+0x42b4>
   15834:	ldrb	r3, [r1, #24]
   15838:	cmp	r3, #11
   1583c:	beq	1586c <__assert_fail@plt+0x4374>
   15840:	cmp	r3, #16
   15844:	beq	1587c <__assert_fail@plt+0x4384>
   15848:	ldr	r3, [r1, #4]
   1584c:	cmp	r3, #0
   15850:	ldrne	r2, [r1, #16]
   15854:	strne	r2, [r3, #16]
   15858:	ldr	r3, [r1, #8]
   1585c:	cmp	r3, #0
   15860:	ldrne	r2, [r1, #16]
   15864:	strne	r2, [r3, #16]
   15868:	b	15874 <__assert_fail@plt+0x437c>
   1586c:	ldr	r3, [r1, #4]
   15870:	str	r1, [r3, #16]
   15874:	mov	r0, #0
   15878:	bx	lr
   1587c:	ldr	r3, [r1, #4]
   15880:	ldr	r2, [r1, #8]
   15884:	ldr	r2, [r2, #12]
   15888:	str	r2, [r3, #16]
   1588c:	ldr	r3, [r1, #8]
   15890:	ldr	r2, [r1, #16]
   15894:	str	r2, [r3, #16]
   15898:	b	15874 <__assert_fail@plt+0x437c>
   1589c:	ldr	r3, [r1, #40]	; 0x28
   158a0:	ldr	ip, [r1, #56]	; 0x38
   158a4:	cmp	ip, r3
   158a8:	ble	15920 <__assert_fail@plt+0x4428>
   158ac:	push	{lr}		; (str lr, [sp, #-4]!)
   158b0:	ldr	ip, [r1, #4]
   158b4:	ldrb	r3, [ip, r3]
   158b8:	strb	r3, [r0]
   158bc:	ldr	ip, [r1, #80]	; 0x50
   158c0:	cmp	ip, #1
   158c4:	ble	158e8 <__assert_fail@plt+0x43f0>
   158c8:	ldr	ip, [r1, #40]	; 0x28
   158cc:	ldr	lr, [r1, #28]
   158d0:	cmp	ip, lr
   158d4:	beq	158e8 <__assert_fail@plt+0x43f0>
   158d8:	ldr	lr, [r1, #8]
   158dc:	ldr	ip, [lr, ip, lsl #2]
   158e0:	cmn	ip, #1
   158e4:	beq	15930 <__assert_fail@plt+0x4438>
   158e8:	cmp	r3, #92	; 0x5c
   158ec:	beq	15940 <__assert_fail@plt+0x4448>
   158f0:	cmp	r3, #91	; 0x5b
   158f4:	beq	1598c <__assert_fail@plt+0x4494>
   158f8:	cmp	r3, #93	; 0x5d
   158fc:	beq	15a18 <__assert_fail@plt+0x4520>
   15900:	cmp	r3, #94	; 0x5e
   15904:	beq	15a28 <__assert_fail@plt+0x4530>
   15908:	cmp	r3, #45	; 0x2d
   1590c:	bne	1595c <__assert_fail@plt+0x4464>
   15910:	mov	r3, #22
   15914:	strb	r3, [r0, #4]
   15918:	mov	r0, #1
   1591c:	pop	{pc}		; (ldr pc, [sp], #4)
   15920:	mov	r3, #2
   15924:	strb	r3, [r0, #4]
   15928:	mov	r0, #0
   1592c:	bx	lr
   15930:	mov	r3, #1
   15934:	strb	r3, [r0, #4]
   15938:	mov	r0, r3
   1593c:	pop	{pc}		; (ldr pc, [sp], #4)
   15940:	tst	r2, #1
   15944:	beq	1595c <__assert_fail@plt+0x4464>
   15948:	ldr	r3, [r1, #40]	; 0x28
   1594c:	add	r3, r3, #1
   15950:	ldr	r2, [r1, #48]	; 0x30
   15954:	cmp	r3, r2
   15958:	blt	1596c <__assert_fail@plt+0x4474>
   1595c:	mov	r3, #1
   15960:	strb	r3, [r0, #4]
   15964:	mov	r0, r3
   15968:	pop	{pc}		; (ldr pc, [sp], #4)
   1596c:	str	r3, [r1, #40]	; 0x28
   15970:	ldr	r2, [r1, #4]
   15974:	ldrb	r3, [r2, r3]
   15978:	strb	r3, [r0]
   1597c:	mov	r3, #1
   15980:	strb	r3, [r0, #4]
   15984:	mov	r0, r3
   15988:	pop	{pc}		; (ldr pc, [sp], #4)
   1598c:	ldr	r3, [r1, #40]	; 0x28
   15990:	add	lr, r3, #1
   15994:	ldr	ip, [r1, #48]	; 0x30
   15998:	cmp	lr, ip
   1599c:	bge	15a00 <__assert_fail@plt+0x4508>
   159a0:	ldr	r1, [r1, #4]
   159a4:	add	r3, r1, r3
   159a8:	ldrb	r3, [r3, #1]
   159ac:	strb	r3, [r0]
   159b0:	cmp	r3, #58	; 0x3a
   159b4:	beq	159e8 <__assert_fail@plt+0x44f0>
   159b8:	cmp	r3, #61	; 0x3d
   159bc:	beq	159d8 <__assert_fail@plt+0x44e0>
   159c0:	cmp	r3, #46	; 0x2e
   159c4:	bne	15a00 <__assert_fail@plt+0x4508>
   159c8:	mov	r3, #26
   159cc:	strb	r3, [r0, #4]
   159d0:	mov	r0, #2
   159d4:	pop	{pc}		; (ldr pc, [sp], #4)
   159d8:	mov	r3, #28
   159dc:	strb	r3, [r0, #4]
   159e0:	mov	r0, #2
   159e4:	pop	{pc}		; (ldr pc, [sp], #4)
   159e8:	tst	r2, #4
   159ec:	beq	15a00 <__assert_fail@plt+0x4508>
   159f0:	mov	r3, #30
   159f4:	strb	r3, [r0, #4]
   159f8:	mov	r0, #2
   159fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15a00:	mov	r3, #1
   15a04:	strb	r3, [r0, #4]
   15a08:	mov	r2, #91	; 0x5b
   15a0c:	strb	r2, [r0]
   15a10:	mov	r0, r3
   15a14:	pop	{pc}		; (ldr pc, [sp], #4)
   15a18:	mov	r3, #21
   15a1c:	strb	r3, [r0, #4]
   15a20:	mov	r0, #1
   15a24:	pop	{pc}		; (ldr pc, [sp], #4)
   15a28:	mov	r3, #25
   15a2c:	strb	r3, [r0, #4]
   15a30:	mov	r0, #1
   15a34:	pop	{pc}		; (ldr pc, [sp], #4)
   15a38:	ldrb	r3, [r1, #24]
   15a3c:	cmp	r3, #17
   15a40:	beq	15a4c <__assert_fail@plt+0x4554>
   15a44:	mov	r0, #0
   15a48:	bx	lr
   15a4c:	ldr	r3, [r1, #20]
   15a50:	cmp	r0, r3
   15a54:	ldrbeq	r3, [r1, #26]
   15a58:	orreq	r3, r3, #8
   15a5c:	strbeq	r3, [r1, #26]
   15a60:	b	15a44 <__assert_fail@plt+0x454c>
   15a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a68:	sub	sp, sp, #52	; 0x34
   15a6c:	str	r0, [sp, #8]
   15a70:	str	r1, [sp, #12]
   15a74:	mov	r7, r2
   15a78:	str	r3, [sp, #40]	; 0x28
   15a7c:	ldr	r9, [r0, #84]	; 0x54
   15a80:	add	r3, r3, r3, lsl #1
   15a84:	ldr	sl, [r9, #24]
   15a88:	add	sl, sl, r3, lsl #2
   15a8c:	ldr	r3, [sl, #4]
   15a90:	cmp	r3, #0
   15a94:	ble	15c40 <__assert_fail@plt+0x4748>
   15a98:	ldr	r3, [sp, #88]	; 0x58
   15a9c:	add	r3, r3, r3, lsl #1
   15aa0:	lsl	r3, r3, #3
   15aa4:	mov	r2, #1
   15aa8:	lsl	r2, r2, r7
   15aac:	str	r2, [sp, #20]
   15ab0:	mvn	r2, r2
   15ab4:	str	r2, [sp, #24]
   15ab8:	mov	r8, #0
   15abc:	mov	r2, r1
   15ac0:	and	r1, r1, #1
   15ac4:	str	r1, [sp, #28]
   15ac8:	and	r2, r2, #2
   15acc:	str	r2, [sp, #16]
   15ad0:	add	r3, r3, #24
   15ad4:	str	r3, [sp, #44]	; 0x2c
   15ad8:	b	15bbc <__assert_fail@plt+0x46c4>
   15adc:	ldr	r3, [r9, #20]
   15ae0:	add	r3, r3, fp
   15ae4:	ldr	r3, [r3, #8]
   15ae8:	ldr	r3, [r3]
   15aec:	cmp	sl, r3
   15af0:	beq	15b74 <__assert_fail@plt+0x467c>
   15af4:	str	r8, [sp]
   15af8:	mov	r2, r7
   15afc:	ldr	r1, [sp, #12]
   15b00:	ldr	r0, [sp, #8]
   15b04:	bl	15a64 <__assert_fail@plt+0x456c>
   15b08:	cmn	r0, #1
   15b0c:	beq	15b80 <__assert_fail@plt+0x4688>
   15b10:	cmp	r0, #0
   15b14:	bne	15b24 <__assert_fail@plt+0x462c>
   15b18:	ldr	r3, [sp, #16]
   15b1c:	cmp	r3, #0
   15b20:	bne	15b80 <__assert_fail@plt+0x4688>
   15b24:	cmp	r7, #31
   15b28:	ldrle	r3, [r6, #-8]
   15b2c:	ldrle	r2, [sp, #24]
   15b30:	andle	r3, r3, r2
   15b34:	strle	r3, [r6, #-8]
   15b38:	add	r4, r4, #24
   15b3c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   15b40:	cmp	r3, #0
   15b44:	beq	15b88 <__assert_fail@plt+0x4690>
   15b48:	mov	r6, r4
   15b4c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15b50:	cmp	r5, r3
   15b54:	bne	15b38 <__assert_fail@plt+0x4640>
   15b58:	cmp	r7, #31
   15b5c:	bgt	15adc <__assert_fail@plt+0x45e4>
   15b60:	ldr	r3, [r4, #-8]
   15b64:	ldr	r2, [sp, #20]
   15b68:	tst	r2, r3
   15b6c:	beq	15b38 <__assert_fail@plt+0x4640>
   15b70:	b	15adc <__assert_fail@plt+0x45e4>
   15b74:	ldr	r3, [sp, #12]
   15b78:	ands	r0, r3, #1
   15b7c:	mvnne	r0, #0
   15b80:	add	sp, sp, #52	; 0x34
   15b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b88:	ldr	sl, [sp, #32]
   15b8c:	ldr	r8, [sp, #36]	; 0x24
   15b90:	b	15bac <__assert_fail@plt+0x46b4>
   15b94:	ldr	r3, [sp, #28]
   15b98:	cmp	r3, #0
   15b9c:	beq	15bac <__assert_fail@plt+0x46b4>
   15ba0:	ldr	r3, [r2, r5, lsl #3]
   15ba4:	cmp	r3, r7
   15ba8:	beq	15c50 <__assert_fail@plt+0x4758>
   15bac:	add	r8, r8, #1
   15bb0:	ldr	r3, [sl, #4]
   15bb4:	cmp	r3, r8
   15bb8:	ble	15c40 <__assert_fail@plt+0x4748>
   15bbc:	ldr	r3, [sl, #8]
   15bc0:	ldr	r5, [r3, r8, lsl #2]
   15bc4:	ldr	r2, [r9]
   15bc8:	add	r3, r2, r5, lsl #3
   15bcc:	ldrb	r3, [r3, #4]
   15bd0:	cmp	r3, #8
   15bd4:	beq	15b94 <__assert_fail@plt+0x469c>
   15bd8:	cmp	r3, #9
   15bdc:	beq	15c20 <__assert_fail@plt+0x4728>
   15be0:	cmp	r3, #4
   15be4:	bne	15bac <__assert_fail@plt+0x46b4>
   15be8:	ldr	r3, [sp, #88]	; 0x58
   15bec:	cmn	r3, #1
   15bf0:	beq	15bac <__assert_fail@plt+0x46b4>
   15bf4:	add	fp, r5, r5, lsl #1
   15bf8:	lsl	fp, fp, #2
   15bfc:	ldr	r3, [sp, #8]
   15c00:	ldr	r4, [r3, #116]	; 0x74
   15c04:	ldr	r3, [sp, #44]	; 0x2c
   15c08:	add	r4, r4, r3
   15c0c:	str	sl, [sp, #32]
   15c10:	str	r8, [sp, #36]	; 0x24
   15c14:	ldr	sl, [sp, #40]	; 0x28
   15c18:	ldr	r8, [sp, #88]	; 0x58
   15c1c:	b	15b48 <__assert_fail@plt+0x4650>
   15c20:	ldr	r3, [sp, #16]
   15c24:	cmp	r3, #0
   15c28:	beq	15bac <__assert_fail@plt+0x46b4>
   15c2c:	ldr	r3, [r2, r5, lsl #3]
   15c30:	cmp	r7, r3
   15c34:	bne	15bac <__assert_fail@plt+0x46b4>
   15c38:	mov	r0, #0
   15c3c:	b	15b80 <__assert_fail@plt+0x4688>
   15c40:	ldr	r3, [sp, #12]
   15c44:	lsr	r0, r3, #1
   15c48:	and	r0, r0, #1
   15c4c:	b	15b80 <__assert_fail@plt+0x4688>
   15c50:	mvn	r0, #0
   15c54:	b	15b80 <__assert_fail@plt+0x4688>
   15c58:	push	{lr}		; (str lr, [sp, #-4]!)
   15c5c:	sub	sp, sp, #12
   15c60:	ldr	lr, [sp, #16]
   15c64:	add	r1, r1, r1, lsl #1
   15c68:	ldr	ip, [r0, #116]	; 0x74
   15c6c:	add	r1, ip, r1, lsl #3
   15c70:	ldr	ip, [r1, #8]
   15c74:	cmp	ip, lr
   15c78:	bgt	15cc8 <__assert_fail@plt+0x47d0>
   15c7c:	ldr	r1, [r1, #12]
   15c80:	cmp	lr, r1
   15c84:	movgt	r1, #1
   15c88:	bgt	15ca8 <__assert_fail@plt+0x47b0>
   15c8c:	cmp	lr, r1
   15c90:	moveq	r1, #2
   15c94:	movne	r1, #0
   15c98:	cmp	ip, lr
   15c9c:	orreq	r1, r1, #1
   15ca0:	cmp	r1, #0
   15ca4:	bne	15cb4 <__assert_fail@plt+0x47bc>
   15ca8:	mov	r0, r1
   15cac:	add	sp, sp, #12
   15cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cb4:	ldr	ip, [sp, #20]
   15cb8:	str	ip, [sp]
   15cbc:	bl	15a64 <__assert_fail@plt+0x456c>
   15cc0:	mov	r1, r0
   15cc4:	b	15ca8 <__assert_fail@plt+0x47b0>
   15cc8:	mvn	r1, #0
   15ccc:	b	15ca8 <__assert_fail@plt+0x47b0>
   15cd0:	push	{r4, r5, lr}
   15cd4:	mov	r4, r0
   15cd8:	ldr	r5, [r0, #108]	; 0x6c
   15cdc:	mov	r2, r5
   15ce0:	mov	r0, #0
   15ce4:	cmp	r0, r2
   15ce8:	bge	15d54 <__assert_fail@plt+0x485c>
   15cec:	add	ip, r0, r2
   15cf0:	add	ip, ip, ip, lsr #31
   15cf4:	asr	ip, ip, #1
   15cf8:	ldr	lr, [r4, #116]	; 0x74
   15cfc:	add	r3, ip, ip, lsl #1
   15d00:	add	r3, lr, r3, lsl #3
   15d04:	ldr	r3, [r3, #4]
   15d08:	cmp	r1, r3
   15d0c:	bgt	15d40 <__assert_fail@plt+0x4848>
   15d10:	cmp	r0, ip
   15d14:	bge	15d54 <__assert_fail@plt+0x485c>
   15d18:	add	r3, r0, ip
   15d1c:	add	r3, r3, r3, lsr #31
   15d20:	asr	r3, r3, #1
   15d24:	add	r2, r3, r3, lsl #1
   15d28:	add	r2, lr, r2, lsl #3
   15d2c:	ldr	r2, [r2, #4]
   15d30:	cmp	r2, r1
   15d34:	blt	15d48 <__assert_fail@plt+0x4850>
   15d38:	mov	ip, r3
   15d3c:	b	15d10 <__assert_fail@plt+0x4818>
   15d40:	mov	r3, ip
   15d44:	mov	ip, r2
   15d48:	add	r0, r3, #1
   15d4c:	mov	r2, ip
   15d50:	b	15ce4 <__assert_fail@plt+0x47ec>
   15d54:	cmp	r5, r0
   15d58:	ble	15d78 <__assert_fail@plt+0x4880>
   15d5c:	ldr	r3, [r4, #116]	; 0x74
   15d60:	add	r2, r0, r0, lsl #1
   15d64:	add	r3, r3, r2, lsl #3
   15d68:	ldr	r3, [r3, #4]
   15d6c:	cmp	r1, r3
   15d70:	mvnne	r0, #0
   15d74:	pop	{r4, r5, pc}
   15d78:	mvn	r0, #0
   15d7c:	pop	{r4, r5, pc}
   15d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d84:	sub	sp, sp, #20
   15d88:	mov	r4, r0
   15d8c:	mov	r6, r1
   15d90:	str	r2, [sp, #12]
   15d94:	mov	r8, r3
   15d98:	ldr	sl, [r0, #84]	; 0x54
   15d9c:	mov	r1, r3
   15da0:	bl	15cd0 <__assert_fail@plt+0x47d8>
   15da4:	mov	fp, r0
   15da8:	ldr	r1, [sp, #60]	; 0x3c
   15dac:	mov	r0, r4
   15db0:	bl	15cd0 <__assert_fail@plt+0x47d8>
   15db4:	str	r0, [sp, #8]
   15db8:	ldr	r3, [r6, #4]
   15dbc:	cmp	r3, #0
   15dc0:	ble	15e54 <__assert_fail@plt+0x495c>
   15dc4:	mov	r5, #0
   15dc8:	ldr	r3, [r6, #8]
   15dcc:	ldr	r1, [r3, r5, lsl #2]
   15dd0:	ldr	r3, [r4, #116]	; 0x74
   15dd4:	add	r2, r1, r1, lsl #1
   15dd8:	ldr	r2, [r3, r2, lsl #3]
   15ddc:	ldr	r3, [sl]
   15de0:	ldr	r7, [r3, r2, lsl #3]
   15de4:	str	fp, [sp, #4]
   15de8:	str	r8, [sp]
   15dec:	ldr	r3, [sp, #12]
   15df0:	mov	r2, r7
   15df4:	mov	r0, r4
   15df8:	bl	15c58 <__assert_fail@plt+0x4760>
   15dfc:	mov	r9, r0
   15e00:	ldr	r3, [r6, #8]
   15e04:	ldr	r1, [r3, r5, lsl #2]
   15e08:	ldr	r3, [sp, #8]
   15e0c:	str	r3, [sp, #4]
   15e10:	ldr	r3, [sp, #60]	; 0x3c
   15e14:	str	r3, [sp]
   15e18:	ldr	r3, [sp, #56]	; 0x38
   15e1c:	mov	r2, r7
   15e20:	mov	r0, r4
   15e24:	bl	15c58 <__assert_fail@plt+0x4760>
   15e28:	cmp	r9, r0
   15e2c:	beq	15e3c <__assert_fail@plt+0x4944>
   15e30:	mov	r0, #1
   15e34:	add	sp, sp, #20
   15e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e3c:	add	r5, r5, #1
   15e40:	ldr	r3, [r6, #4]
   15e44:	cmp	r3, r5
   15e48:	bgt	15dc8 <__assert_fail@plt+0x48d0>
   15e4c:	mov	r0, #0
   15e50:	b	15e34 <__assert_fail@plt+0x493c>
   15e54:	mov	r0, #0
   15e58:	b	15e34 <__assert_fail@plt+0x493c>
   15e5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e60:	sub	sp, sp, #8
   15e64:	mov	r5, r0
   15e68:	mov	r4, r1
   15e6c:	mov	r8, r2
   15e70:	mov	r9, r3
   15e74:	ldr	r6, [r1, #40]	; 0x28
   15e78:	mov	r1, r6
   15e7c:	mov	r0, r4
   15e80:	bl	15554 <__assert_fail@plt+0x405c>
   15e84:	cmp	r0, #1
   15e88:	ble	15ec0 <__assert_fail@plt+0x49c8>
   15e8c:	mov	r7, r0
   15e90:	mov	r3, #1
   15e94:	str	r3, [r5]
   15e98:	ldr	r1, [r4, #40]	; 0x28
   15e9c:	mov	r0, r4
   15ea0:	bl	155c8 <__assert_fail@plt+0x40d0>
   15ea4:	str	r0, [r5, #4]
   15ea8:	ldr	r3, [r4, #40]	; 0x28
   15eac:	add	r7, r3, r7
   15eb0:	str	r7, [r4, #40]	; 0x28
   15eb4:	mov	r0, #0
   15eb8:	add	sp, sp, #8
   15ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ec0:	add	r6, r6, r9
   15ec4:	str	r6, [r4, #40]	; 0x28
   15ec8:	ldrb	r3, [r8, #4]
   15ecc:	and	r2, r3, #251	; 0xfb
   15ed0:	cmp	r3, #28
   15ed4:	cmpne	r2, #26
   15ed8:	beq	15f08 <__assert_fail@plt+0x4a10>
   15edc:	ldrb	r2, [sp, #48]	; 0x30
   15ee0:	cmp	r3, #22
   15ee4:	moveq	r3, r2
   15ee8:	orrne	r3, r2, #1
   15eec:	cmp	r3, #0
   15ef0:	beq	160b0 <__assert_fail@plt+0x4bb8>
   15ef4:	mov	r0, #0
   15ef8:	str	r0, [r5]
   15efc:	ldrb	r3, [r8]
   15f00:	strb	r3, [r5, #4]
   15f04:	b	15eb8 <__assert_fail@plt+0x49c0>
   15f08:	ldr	r3, [r4, #56]	; 0x38
   15f0c:	cmp	r6, r3
   15f10:	movge	r0, #7
   15f14:	bge	15eb8 <__assert_fail@plt+0x49c0>
   15f18:	ldrb	r9, [r8]
   15f1c:	mov	r6, #0
   15f20:	b	16008 <__assert_fail@plt+0x4b10>
   15f24:	ldrb	r3, [r4, #75]	; 0x4b
   15f28:	cmp	r3, #0
   15f2c:	bne	15f48 <__assert_fail@plt+0x4a50>
   15f30:	ldr	r2, [r4, #4]
   15f34:	ldr	r3, [r4, #40]	; 0x28
   15f38:	add	r1, r3, #1
   15f3c:	str	r1, [r4, #40]	; 0x28
   15f40:	ldrb	r7, [r2, r3]
   15f44:	b	16028 <__assert_fail@plt+0x4b30>
   15f48:	ldrb	r3, [r4, #76]	; 0x4c
   15f4c:	cmp	r3, #0
   15f50:	beq	15fd4 <__assert_fail@plt+0x4adc>
   15f54:	ldr	sl, [r4, #40]	; 0x28
   15f58:	ldr	r3, [r4, #28]
   15f5c:	cmp	sl, r3
   15f60:	beq	15f74 <__assert_fail@plt+0x4a7c>
   15f64:	ldr	r3, [r4, #8]
   15f68:	ldr	r3, [r3, sl, lsl #2]
   15f6c:	cmn	r3, #1
   15f70:	beq	15fa8 <__assert_fail@plt+0x4ab0>
   15f74:	ldr	r2, [r4, #12]
   15f78:	ldr	r3, [r4]
   15f7c:	ldr	r1, [r2, sl, lsl #2]
   15f80:	ldr	r2, [r4, #24]
   15f84:	add	r3, r3, r1
   15f88:	ldrb	r7, [r3, r2]
   15f8c:	bics	r3, r7, #127	; 0x7f
   15f90:	beq	15fbc <__assert_fail@plt+0x4ac4>
   15f94:	ldr	r3, [r4, #4]
   15f98:	add	r2, sl, #1
   15f9c:	str	r2, [r4, #40]	; 0x28
   15fa0:	ldrb	r7, [r3, sl]
   15fa4:	b	16028 <__assert_fail@plt+0x4b30>
   15fa8:	ldr	r3, [r4, #4]
   15fac:	add	r2, sl, #1
   15fb0:	str	r2, [r4, #40]	; 0x28
   15fb4:	ldrb	r7, [r3, sl]
   15fb8:	b	16028 <__assert_fail@plt+0x4b30>
   15fbc:	mov	r1, sl
   15fc0:	mov	r0, r4
   15fc4:	bl	15554 <__assert_fail@plt+0x405c>
   15fc8:	add	r0, sl, r0
   15fcc:	str	r0, [r4, #40]	; 0x28
   15fd0:	b	16028 <__assert_fail@plt+0x4b30>
   15fd4:	ldr	r3, [r4]
   15fd8:	ldr	r1, [r4, #24]
   15fdc:	ldr	r2, [r4, #40]	; 0x28
   15fe0:	add	r0, r2, #1
   15fe4:	str	r0, [r4, #40]	; 0x28
   15fe8:	add	r3, r3, r1
   15fec:	ldrb	r7, [r3, r2]
   15ff0:	b	16028 <__assert_fail@plt+0x4b30>
   15ff4:	ldr	r3, [r5, #4]
   15ff8:	strb	r7, [r3, r6]
   15ffc:	add	r6, r6, #1
   16000:	cmp	r6, #32
   16004:	beq	160dc <__assert_fail@plt+0x4be4>
   16008:	ldrb	r3, [r8, #4]
   1600c:	cmp	r3, #30
   16010:	beq	15f24 <__assert_fail@plt+0x4a2c>
   16014:	ldr	r2, [r4, #4]
   16018:	ldr	r3, [r4, #40]	; 0x28
   1601c:	add	r1, r3, #1
   16020:	str	r1, [r4, #40]	; 0x28
   16024:	ldrb	r7, [r2, r3]
   16028:	ldr	r3, [r4, #40]	; 0x28
   1602c:	ldr	r2, [r4, #56]	; 0x38
   16030:	cmp	r2, r3
   16034:	ble	160d4 <__assert_fail@plt+0x4bdc>
   16038:	cmp	r9, r7
   1603c:	bne	15ff4 <__assert_fail@plt+0x4afc>
   16040:	ldr	r2, [r4, #4]
   16044:	ldrb	r2, [r2, r3]
   16048:	cmp	r2, #93	; 0x5d
   1604c:	bne	15ff4 <__assert_fail@plt+0x4afc>
   16050:	add	r3, r3, #1
   16054:	str	r3, [r4, #40]	; 0x28
   16058:	ldr	r3, [r5, #4]
   1605c:	mov	r2, #0
   16060:	strb	r2, [r3, r6]
   16064:	ldrb	r3, [r8, #4]
   16068:	cmp	r3, #28
   1606c:	beq	16090 <__assert_fail@plt+0x4b98>
   16070:	cmp	r3, #30
   16074:	beq	160a0 <__assert_fail@plt+0x4ba8>
   16078:	cmp	r3, #26
   1607c:	moveq	r3, #3
   16080:	streq	r3, [r5]
   16084:	moveq	r0, r2
   16088:	movne	r0, #0
   1608c:	b	15eb8 <__assert_fail@plt+0x49c0>
   16090:	mov	r3, #2
   16094:	str	r3, [r5]
   16098:	mov	r0, #0
   1609c:	b	15eb8 <__assert_fail@plt+0x49c0>
   160a0:	mov	r3, #4
   160a4:	str	r3, [r5]
   160a8:	mov	r0, #0
   160ac:	b	15eb8 <__assert_fail@plt+0x49c0>
   160b0:	ldr	r2, [sp, #44]	; 0x2c
   160b4:	mov	r1, r4
   160b8:	mov	r0, sp
   160bc:	bl	1589c <__assert_fail@plt+0x43a4>
   160c0:	ldrb	r3, [sp, #4]
   160c4:	cmp	r3, #21
   160c8:	movne	r0, #11
   160cc:	bne	15eb8 <__assert_fail@plt+0x49c0>
   160d0:	b	15ef4 <__assert_fail@plt+0x49fc>
   160d4:	mov	r0, #7
   160d8:	b	15eb8 <__assert_fail@plt+0x49c0>
   160dc:	mov	r0, #7
   160e0:	b	15eb8 <__assert_fail@plt+0x49c0>
   160e4:	push	{r4, r5, r6, lr}
   160e8:	mov	r4, r0
   160ec:	mov	r6, r1
   160f0:	mov	r5, r2
   160f4:	b	160fc <__assert_fail@plt+0x4c04>
   160f8:	mov	r4, r3
   160fc:	ldr	r3, [r4, #4]
   16100:	cmp	r3, #0
   16104:	bne	160f8 <__assert_fail@plt+0x4c00>
   16108:	ldr	r3, [r4, #8]
   1610c:	cmp	r3, #0
   16110:	bne	160f8 <__assert_fail@plt+0x4c00>
   16114:	mov	r1, r4
   16118:	mov	r0, r5
   1611c:	blx	r6
   16120:	cmp	r0, #0
   16124:	popne	{r4, r5, r6, pc}
   16128:	ldr	r2, [r4]
   1612c:	cmp	r2, #0
   16130:	popeq	{r4, r5, r6, pc}
   16134:	ldr	r3, [r2, #8]
   16138:	cmp	r4, r3
   1613c:	cmpne	r3, #0
   16140:	moveq	r1, #1
   16144:	movne	r1, #0
   16148:	mov	r4, r2
   1614c:	cmp	r1, #0
   16150:	bne	16114 <__assert_fail@plt+0x4c1c>
   16154:	b	160f8 <__assert_fail@plt+0x4c00>
   16158:	push	{r4, r5, r6, r7, r8, lr}
   1615c:	mov	r4, r0
   16160:	mov	r6, r1
   16164:	mov	r5, r2
   16168:	mov	r7, #0
   1616c:	b	16174 <__assert_fail@plt+0x4c7c>
   16170:	mov	r4, r3
   16174:	mov	r1, r4
   16178:	mov	r0, r5
   1617c:	blx	r6
   16180:	cmp	r0, #0
   16184:	popne	{r4, r5, r6, r7, r8, pc}
   16188:	ldr	r3, [r4, #4]
   1618c:	cmp	r3, #0
   16190:	moveq	r2, r7
   16194:	bne	16170 <__assert_fail@plt+0x4c78>
   16198:	ldr	r3, [r4, #8]
   1619c:	cmp	r3, #0
   161a0:	cmpne	r2, r3
   161a4:	bne	16170 <__assert_fail@plt+0x4c78>
   161a8:	ldr	r3, [r4]
   161ac:	mov	r2, r4
   161b0:	cmp	r3, #0
   161b4:	popeq	{r4, r5, r6, r7, r8, pc}
   161b8:	mov	r4, r3
   161bc:	b	16198 <__assert_fail@plt+0x4ca0>
   161c0:	push	{r4, r5, r6, lr}
   161c4:	mov	r4, r0
   161c8:	mov	r5, r1
   161cc:	ldr	r3, [r0, #80]	; 0x50
   161d0:	cmp	r3, #1
   161d4:	ble	1621c <__assert_fail@plt+0x4d24>
   161d8:	cmn	r1, #-1073741823	; 0xc0000001
   161dc:	bhi	16250 <__assert_fail@plt+0x4d58>
   161e0:	lsl	r6, r1, #2
   161e4:	mov	r1, r6
   161e8:	ldr	r0, [r0, #8]
   161ec:	bl	23750 <__assert_fail@plt+0x12258>
   161f0:	cmp	r0, #0
   161f4:	beq	16258 <__assert_fail@plt+0x4d60>
   161f8:	str	r0, [r4, #8]
   161fc:	ldr	r0, [r4, #12]
   16200:	cmp	r0, #0
   16204:	beq	1621c <__assert_fail@plt+0x4d24>
   16208:	mov	r1, r6
   1620c:	bl	23750 <__assert_fail@plt+0x12258>
   16210:	cmp	r0, #0
   16214:	beq	16260 <__assert_fail@plt+0x4d68>
   16218:	str	r0, [r4, #12]
   1621c:	ldrb	r3, [r4, #75]	; 0x4b
   16220:	cmp	r3, #0
   16224:	bne	16234 <__assert_fail@plt+0x4d3c>
   16228:	str	r5, [r4, #36]	; 0x24
   1622c:	mov	r0, #0
   16230:	pop	{r4, r5, r6, pc}
   16234:	mov	r1, r5
   16238:	ldr	r0, [r4, #4]
   1623c:	bl	23750 <__assert_fail@plt+0x12258>
   16240:	cmp	r0, #0
   16244:	beq	16268 <__assert_fail@plt+0x4d70>
   16248:	str	r0, [r4, #4]
   1624c:	b	16228 <__assert_fail@plt+0x4d30>
   16250:	mov	r0, #12
   16254:	pop	{r4, r5, r6, pc}
   16258:	mov	r0, #12
   1625c:	pop	{r4, r5, r6, pc}
   16260:	mov	r0, #12
   16264:	pop	{r4, r5, r6, pc}
   16268:	mov	r0, #12
   1626c:	pop	{r4, r5, r6, pc}
   16270:	push	{r4, r5, r6, lr}
   16274:	mov	r4, r0
   16278:	mov	r5, r1
   1627c:	ldr	r1, [r0]
   16280:	ldr	r3, [r0, #4]
   16284:	cmp	r1, r3
   16288:	beq	162a8 <__assert_fail@plt+0x4db0>
   1628c:	ldr	r2, [r4, #8]
   16290:	ldr	r3, [r4, #4]
   16294:	add	r1, r3, #1
   16298:	str	r1, [r4, #4]
   1629c:	str	r5, [r2, r3, lsl #2]
   162a0:	mov	r0, #1
   162a4:	pop	{r4, r5, r6, pc}
   162a8:	add	r1, r1, #1
   162ac:	lsl	r3, r1, #1
   162b0:	str	r3, [r0]
   162b4:	lsl	r1, r1, #3
   162b8:	ldr	r0, [r0, #8]
   162bc:	bl	23750 <__assert_fail@plt+0x12258>
   162c0:	cmp	r0, #0
   162c4:	strne	r0, [r4, #8]
   162c8:	bne	1628c <__assert_fail@plt+0x4d94>
   162cc:	mov	r0, #0
   162d0:	pop	{r4, r5, r6, pc}
   162d4:	push	{r4, r5, r6, r7, r8, lr}
   162d8:	mov	r7, r0
   162dc:	mov	r5, r1
   162e0:	mov	r4, r2
   162e4:	mov	r6, r3
   162e8:	ldr	r3, [r0, #64]	; 0x40
   162ec:	cmp	r3, #31
   162f0:	beq	16364 <__assert_fail@plt+0x4e6c>
   162f4:	ldr	r3, [r7, #56]	; 0x38
   162f8:	ldr	r2, [r7, #64]	; 0x40
   162fc:	add	r1, r2, #1
   16300:	str	r1, [r7, #64]	; 0x40
   16304:	lsl	r2, r2, #5
   16308:	add	ip, r2, #4
   1630c:	add	ip, r3, ip
   16310:	add	r3, r3, r2
   16314:	mov	r2, #0
   16318:	str	r2, [r3, #4]
   1631c:	str	r5, [r3, #8]
   16320:	str	r4, [r3, #12]
   16324:	add	lr, r3, #24
   16328:	ldm	r6, {r0, r1}
   1632c:	stm	lr, {r0, r1}
   16330:	ldrb	r1, [r3, #30]
   16334:	and	r1, r1, #243	; 0xf3
   16338:	strb	r1, [r3, #30]
   1633c:	str	r2, [r3, #16]
   16340:	str	r2, [r3, #20]
   16344:	mvn	r2, #0
   16348:	str	r2, [r3, #32]
   1634c:	cmp	r5, #0
   16350:	strne	ip, [r5]
   16354:	cmp	r4, #0
   16358:	strne	ip, [r4]
   1635c:	mov	r0, ip
   16360:	pop	{r4, r5, r6, r7, r8, pc}
   16364:	mov	r0, #996	; 0x3e4
   16368:	bl	23720 <__assert_fail@plt+0x12228>
   1636c:	cmp	r0, #0
   16370:	beq	1638c <__assert_fail@plt+0x4e94>
   16374:	ldr	r3, [r7, #56]	; 0x38
   16378:	str	r3, [r0]
   1637c:	str	r0, [r7, #56]	; 0x38
   16380:	mov	r3, #0
   16384:	str	r3, [r7, #64]	; 0x40
   16388:	b	162f4 <__assert_fail@plt+0x4dfc>
   1638c:	mov	ip, #0
   16390:	b	1635c <__assert_fail@plt+0x4e64>
   16394:	push	{r4, r5, r6, r7, r8, lr}
   16398:	sub	sp, sp, #8
   1639c:	mov	r4, r0
   163a0:	mov	r8, r1
   163a4:	ldr	r5, [r0]
   163a8:	add	r6, sp, #4
   163ac:	mov	r7, #0
   163b0:	add	r3, r4, #20
   163b4:	mov	r2, r7
   163b8:	mov	r1, r7
   163bc:	mov	r0, r8
   163c0:	bl	162d4 <__assert_fail@plt+0x4ddc>
   163c4:	str	r0, [r6]
   163c8:	cmp	r0, #0
   163cc:	beq	16404 <__assert_fail@plt+0x4f0c>
   163d0:	str	r5, [r0]
   163d4:	ldr	r2, [r6]
   163d8:	ldrb	r3, [r2, #26]
   163dc:	orr	r3, r3, #4
   163e0:	strb	r3, [r2, #26]
   163e4:	ldr	r5, [r6]
   163e8:	ldr	r3, [r4, #4]
   163ec:	cmp	r3, #0
   163f0:	beq	1640c <__assert_fail@plt+0x4f14>
   163f4:	add	r6, r5, #4
   163f8:	mov	r4, r3
   163fc:	b	163b0 <__assert_fail@plt+0x4eb8>
   16400:	ldr	r0, [sp, #4]
   16404:	add	sp, sp, #8
   16408:	pop	{r4, r5, r6, r7, r8, pc}
   1640c:	mov	r2, r7
   16410:	ldr	r3, [r4, #8]
   16414:	cmp	r3, #0
   16418:	cmpne	r2, r3
   1641c:	bne	1643c <__assert_fail@plt+0x4f44>
   16420:	ldr	r3, [r4]
   16424:	ldr	r5, [r5]
   16428:	mov	r2, r4
   1642c:	cmp	r3, #0
   16430:	beq	16400 <__assert_fail@plt+0x4f08>
   16434:	mov	r4, r3
   16438:	b	16410 <__assert_fail@plt+0x4f18>
   1643c:	add	r6, r5, #8
   16440:	mov	r4, r3
   16444:	b	163b0 <__assert_fail@plt+0x4eb8>
   16448:	push	{lr}		; (str lr, [sp, #-4]!)
   1644c:	sub	sp, sp, #12
   16450:	mov	ip, #0
   16454:	str	ip, [sp]
   16458:	str	ip, [sp, #4]
   1645c:	strb	r3, [sp, #4]
   16460:	mov	r3, sp
   16464:	bl	162d4 <__assert_fail@plt+0x4ddc>
   16468:	add	sp, sp, #12
   1646c:	pop	{pc}		; (ldr pc, [sp], #4)
   16470:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16474:	ldr	r6, [r1]
   16478:	ldr	r5, [r2, #4]
   1647c:	ldrb	r1, [r1, #28]
   16480:	adds	r3, r5, #0
   16484:	movne	r3, #1
   16488:	ands	r3, r3, r1, lsr #4
   1648c:	beq	164ac <__assert_fail@plt+0x4fb4>
   16490:	ldr	r3, [r2, #20]
   16494:	cmp	r3, #31
   16498:	bgt	16574 <__assert_fail@plt+0x507c>
   1649c:	ldr	r1, [r6, #80]	; 0x50
   164a0:	lsr	r3, r1, r3
   164a4:	tst	r3, #1
   164a8:	beq	16574 <__assert_fail@plt+0x507c>
   164ac:	mov	r4, r2
   164b0:	mov	r9, r0
   164b4:	mov	r3, #8
   164b8:	mov	r2, #0
   164bc:	mov	r1, r2
   164c0:	mov	r0, r6
   164c4:	bl	16448 <__assert_fail@plt+0x4f50>
   164c8:	mov	r7, r0
   164cc:	mov	r3, #9
   164d0:	mov	r2, #0
   164d4:	mov	r1, r2
   164d8:	mov	r0, r6
   164dc:	bl	16448 <__assert_fail@plt+0x4f50>
   164e0:	mov	r8, r0
   164e4:	cmp	r5, #0
   164e8:	moveq	sl, r0
   164ec:	beq	16508 <__assert_fail@plt+0x5010>
   164f0:	mov	r3, #16
   164f4:	mov	r2, r0
   164f8:	mov	r1, r5
   164fc:	mov	r0, r6
   16500:	bl	16448 <__assert_fail@plt+0x4f50>
   16504:	mov	sl, r0
   16508:	mov	r3, #16
   1650c:	mov	r2, sl
   16510:	mov	r1, r7
   16514:	mov	r0, r6
   16518:	bl	16448 <__assert_fail@plt+0x4f50>
   1651c:	mov	r5, r0
   16520:	cmp	sl, #0
   16524:	cmpne	r0, #0
   16528:	beq	1657c <__assert_fail@plt+0x5084>
   1652c:	cmp	r8, #0
   16530:	cmpne	r7, #0
   16534:	beq	1657c <__assert_fail@plt+0x5084>
   16538:	ldr	r3, [r4, #20]
   1653c:	str	r3, [r8, #20]
   16540:	str	r3, [r7, #20]
   16544:	ldrb	r3, [r4, #26]
   16548:	lsr	r3, r3, #3
   1654c:	and	r3, r3, #1
   16550:	ldrb	r2, [r8, #26]
   16554:	and	r1, r3, #1
   16558:	bic	r2, r2, #8
   1655c:	orr	r2, r2, r1, lsl #3
   16560:	strb	r2, [r8, #26]
   16564:	ldrb	r2, [r7, #26]
   16568:	bic	r2, r2, #8
   1656c:	orr	r3, r2, r1, lsl #3
   16570:	strb	r3, [r7, #26]
   16574:	mov	r0, r5
   16578:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1657c:	mov	r3, #12
   16580:	str	r3, [r9]
   16584:	mov	r5, #0
   16588:	b	16574 <__assert_fail@plt+0x507c>
   1658c:	push	{r4, r5, lr}
   16590:	sub	sp, sp, #12
   16594:	mov	r5, r0
   16598:	mov	r4, r1
   1659c:	mov	r3, #0
   165a0:	str	r3, [sp, #4]
   165a4:	ldr	r2, [r1, #4]
   165a8:	cmp	r2, r3
   165ac:	beq	165bc <__assert_fail@plt+0x50c4>
   165b0:	ldrb	r3, [r2, #24]
   165b4:	cmp	r3, #17
   165b8:	beq	165e0 <__assert_fail@plt+0x50e8>
   165bc:	ldr	r2, [r4, #8]
   165c0:	cmp	r2, #0
   165c4:	beq	165d4 <__assert_fail@plt+0x50dc>
   165c8:	ldrb	r3, [r2, #24]
   165cc:	cmp	r3, #17
   165d0:	beq	165fc <__assert_fail@plt+0x5104>
   165d4:	ldr	r0, [sp, #4]
   165d8:	add	sp, sp, #12
   165dc:	pop	{r4, r5, pc}
   165e0:	mov	r1, r0
   165e4:	add	r0, sp, #4
   165e8:	bl	16470 <__assert_fail@plt+0x4f78>
   165ec:	str	r0, [r4, #4]
   165f0:	cmp	r0, #0
   165f4:	strne	r4, [r0]
   165f8:	b	165bc <__assert_fail@plt+0x50c4>
   165fc:	mov	r1, r5
   16600:	add	r0, sp, #4
   16604:	bl	16470 <__assert_fail@plt+0x4f78>
   16608:	str	r0, [r4, #8]
   1660c:	cmp	r0, #0
   16610:	strne	r4, [r0]
   16614:	b	165d4 <__assert_fail@plt+0x50dc>
   16618:	push	{r4, r5, r6, lr}
   1661c:	mov	r4, r0
   16620:	mov	r5, r1
   16624:	mov	r3, #1
   16628:	str	r3, [r0]
   1662c:	str	r3, [r0, #4]
   16630:	mov	r0, #4
   16634:	bl	23720 <__assert_fail@plt+0x12228>
   16638:	str	r0, [r4, #8]
   1663c:	cmp	r0, #0
   16640:	moveq	r3, #0
   16644:	streq	r3, [r4, #4]
   16648:	streq	r3, [r4]
   1664c:	moveq	r0, #12
   16650:	strne	r5, [r0]
   16654:	movne	r0, #0
   16658:	pop	{r4, r5, r6, pc}
   1665c:	push	{r4, lr}
   16660:	mov	r4, r0
   16664:	str	r1, [r0]
   16668:	mov	r3, #0
   1666c:	str	r3, [r0, #4]
   16670:	lsl	r0, r1, #2
   16674:	bl	23720 <__assert_fail@plt+0x12228>
   16678:	str	r0, [r4, #8]
   1667c:	cmp	r0, #0
   16680:	moveq	r0, #12
   16684:	movne	r0, #0
   16688:	pop	{r4, pc}
   1668c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16690:	mov	r6, r0
   16694:	mov	r5, r1
   16698:	mov	r7, r2
   1669c:	mov	r8, r1
   166a0:	str	r2, [r8], #16
   166a4:	ldr	r1, [r1, #8]
   166a8:	mov	r0, r8
   166ac:	bl	1665c <__assert_fail@plt+0x5164>
   166b0:	subs	r9, r0, #0
   166b4:	bne	1677c <__assert_fail@plt+0x5284>
   166b8:	ldr	r3, [r5, #8]
   166bc:	cmp	r3, #0
   166c0:	ble	16710 <__assert_fail@plt+0x5218>
   166c4:	mov	r4, #0
   166c8:	b	166dc <__assert_fail@plt+0x51e4>
   166cc:	add	r4, r4, #1
   166d0:	ldr	r3, [r5, #8]
   166d4:	cmp	r3, r4
   166d8:	ble	16710 <__assert_fail@plt+0x5218>
   166dc:	ldr	r3, [r5, #12]
   166e0:	ldr	r1, [r3, r4, lsl #2]
   166e4:	ldr	r3, [r6]
   166e8:	add	r3, r3, r1, lsl #3
   166ec:	ldrb	r3, [r3, #4]
   166f0:	tst	r3, #8
   166f4:	bne	166cc <__assert_fail@plt+0x51d4>
   166f8:	mov	r0, r8
   166fc:	bl	16270 <__assert_fail@plt+0x4d78>
   16700:	cmp	r0, #0
   16704:	bne	166cc <__assert_fail@plt+0x51d4>
   16708:	mov	r9, #12
   1670c:	b	1674c <__assert_fail@plt+0x5254>
   16710:	ldr	r4, [r6, #68]	; 0x44
   16714:	and	r7, r7, r4
   16718:	add	r7, r7, r7, lsl #1
   1671c:	lsl	r4, r7, #2
   16720:	ldr	r6, [r6, #32]
   16724:	add	r7, r6, r4
   16728:	ldr	r3, [r6, r4]
   1672c:	ldr	r2, [r7, #4]
   16730:	cmp	r2, r3
   16734:	ble	16754 <__assert_fail@plt+0x525c>
   16738:	ldr	r2, [r7, #8]
   1673c:	ldr	r3, [r6, r4]
   16740:	add	r1, r3, #1
   16744:	str	r1, [r6, r4]
   16748:	str	r5, [r2, r3, lsl #2]
   1674c:	mov	r0, r9
   16750:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16754:	add	r3, r3, #1
   16758:	lsl	r8, r3, #1
   1675c:	lsl	r1, r3, #3
   16760:	ldr	r0, [r7, #8]
   16764:	bl	23750 <__assert_fail@plt+0x12258>
   16768:	cmp	r0, #0
   1676c:	beq	16784 <__assert_fail@plt+0x528c>
   16770:	str	r0, [r7, #8]
   16774:	str	r8, [r7, #4]
   16778:	b	16738 <__assert_fail@plt+0x5240>
   1677c:	mov	r9, #12
   16780:	b	1674c <__assert_fail@plt+0x5254>
   16784:	mov	r9, #12
   16788:	b	1674c <__assert_fail@plt+0x5254>
   1678c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16790:	sub	sp, sp, #80	; 0x50
   16794:	mov	r4, r0
   16798:	ldr	r8, [r0, #36]	; 0x24
   1679c:	ldr	r3, [r0, #48]	; 0x30
   167a0:	cmp	r8, r3
   167a4:	movge	r8, r3
   167a8:	ldr	sl, [r0, #28]
   167ac:	cmp	r8, sl
   167b0:	ble	16910 <__assert_fail@plt+0x5418>
   167b4:	add	r7, sp, #8
   167b8:	add	r6, r0, #16
   167bc:	mov	r9, #1
   167c0:	mvn	r5, #0
   167c4:	b	168a8 <__assert_fail@plt+0x53b0>
   167c8:	ldr	r3, [r4, #80]	; 0x50
   167cc:	cmp	r3, #0
   167d0:	cmpgt	r2, #0
   167d4:	ble	16828 <__assert_fail@plt+0x5330>
   167d8:	add	r0, sp, #15
   167dc:	mov	r3, #0
   167e0:	ldr	r1, [r4]
   167e4:	ldr	ip, [r4, #24]
   167e8:	add	r1, r1, sl
   167ec:	add	r1, r1, r3
   167f0:	ldrb	r1, [r1, ip]
   167f4:	ldr	ip, [r4, #64]	; 0x40
   167f8:	ldrb	ip, [ip, r1]
   167fc:	ldr	r1, [r4, #4]
   16800:	add	r1, r1, sl
   16804:	strb	ip, [r1, r3]
   16808:	strb	ip, [r0, #1]!
   1680c:	add	r3, r3, #1
   16810:	ldr	r1, [r4, #80]	; 0x50
   16814:	cmp	r1, r3
   16818:	cmpgt	r2, r3
   1681c:	bgt	167e0 <__assert_fail@plt+0x52e8>
   16820:	add	r1, sp, #16
   16824:	b	168d0 <__assert_fail@plt+0x53d8>
   16828:	add	r1, sp, #16
   1682c:	b	168d0 <__assert_fail@plt+0x53d8>
   16830:	ldr	r3, [r4]
   16834:	ldr	r2, [r4, #24]
   16838:	add	r3, r3, sl
   1683c:	ldrb	r3, [r3, r2]
   16840:	str	r3, [sp, #4]
   16844:	ldr	r2, [r4, #64]	; 0x40
   16848:	cmp	r2, #0
   1684c:	ldrbne	r3, [r2, r3]
   16850:	strne	r3, [sp, #4]
   16854:	ldm	r7, {r0, r1}
   16858:	stm	r6, {r0, r1}
   1685c:	mov	r0, r9
   16860:	add	r2, sl, #1
   16864:	lsl	r3, sl, #2
   16868:	ldr	r1, [r4, #8]
   1686c:	ldr	ip, [sp, #4]
   16870:	str	ip, [r1, sl, lsl #2]
   16874:	add	sl, sl, r0
   16878:	mov	ip, sl
   1687c:	cmp	r2, sl
   16880:	bge	16920 <__assert_fail@plt+0x5428>
   16884:	add	r3, r3, #4
   16888:	add	r2, r2, #1
   1688c:	ldr	r1, [r4, #8]
   16890:	str	r5, [r1, r3]
   16894:	add	r3, r3, #4
   16898:	cmp	ip, r2
   1689c:	bne	16888 <__assert_fail@plt+0x5390>
   168a0:	cmp	r8, sl
   168a4:	ble	16910 <__assert_fail@plt+0x5418>
   168a8:	sub	r2, r8, sl
   168ac:	ldm	r6, {r0, r1}
   168b0:	stm	r7, {r0, r1}
   168b4:	ldr	r3, [r4, #64]	; 0x40
   168b8:	cmp	r3, #0
   168bc:	bne	167c8 <__assert_fail@plt+0x52d0>
   168c0:	ldr	r1, [r4, #24]
   168c4:	add	r3, sl, r1
   168c8:	ldr	r1, [r4]
   168cc:	add	r1, r1, r3
   168d0:	mov	r3, r6
   168d4:	add	r0, sp, #4
   168d8:	bl	135c4 <__assert_fail@plt+0x20cc>
   168dc:	sub	r3, r0, #1
   168e0:	cmn	r3, #3
   168e4:	bhi	16830 <__assert_fail@plt+0x5338>
   168e8:	cmn	r0, #2
   168ec:	bne	16860 <__assert_fail@plt+0x5368>
   168f0:	ldr	r2, [r4, #36]	; 0x24
   168f4:	ldr	r3, [r4, #48]	; 0x30
   168f8:	cmp	r2, r3
   168fc:	bge	16830 <__assert_fail@plt+0x5338>
   16900:	add	r3, r4, #16
   16904:	add	r2, sp, #8
   16908:	ldm	r2, {r0, r1}
   1690c:	stm	r3, {r0, r1}
   16910:	str	sl, [r4, #28]
   16914:	str	sl, [r4, #32]
   16918:	add	sp, sp, #80	; 0x50
   1691c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16920:	mov	sl, r2
   16924:	b	168a0 <__assert_fail@plt+0x53a8>
   16928:	ldr	r3, [r1, #4]
   1692c:	cmp	r3, #0
   16930:	beq	16ac8 <__assert_fail@plt+0x55d0>
   16934:	ldr	ip, [r2, #4]
   16938:	cmp	ip, #0
   1693c:	beq	16ad0 <__assert_fail@plt+0x55d8>
   16940:	push	{r4, r5, r6, r7, r8, lr}
   16944:	mov	r6, r2
   16948:	mov	r5, r1
   1694c:	mov	r7, r0
   16950:	add	r3, r3, ip
   16954:	ldr	r4, [r0]
   16958:	ldr	r2, [r0, #4]
   1695c:	add	r2, r3, r2
   16960:	cmp	r2, r4
   16964:	bgt	1698c <__assert_fail@plt+0x5494>
   16968:	ldr	r3, [r7, #4]
   1696c:	ldr	r2, [r5, #4]
   16970:	ldr	r0, [r6, #4]
   16974:	add	r1, r3, r2
   16978:	add	r1, r1, r0
   1697c:	sub	r2, r2, #1
   16980:	sub	r0, r0, #1
   16984:	sub	r3, r3, #1
   16988:	b	16a18 <__assert_fail@plt+0x5520>
   1698c:	add	r4, r3, r4
   16990:	lsl	r1, r4, #2
   16994:	ldr	r0, [r0, #8]
   16998:	bl	23750 <__assert_fail@plt+0x12258>
   1699c:	cmp	r0, #0
   169a0:	beq	16ad8 <__assert_fail@plt+0x55e0>
   169a4:	str	r0, [r7, #8]
   169a8:	str	r4, [r7]
   169ac:	b	16968 <__assert_fail@plt+0x5470>
   169b0:	cmp	r3, #0
   169b4:	blt	169f0 <__assert_fail@plt+0x54f8>
   169b8:	ldr	r8, [r7, #8]
   169bc:	add	ip, r8, r3, lsl #2
   169c0:	ldr	r4, [r8, r3, lsl #2]
   169c4:	cmp	lr, r4
   169c8:	bge	169e4 <__assert_fail@plt+0x54ec>
   169cc:	sub	r3, r3, #1
   169d0:	cmn	r3, #1
   169d4:	beq	16ae0 <__assert_fail@plt+0x55e8>
   169d8:	ldr	r4, [ip, #-4]!
   169dc:	cmp	lr, r4
   169e0:	blt	169cc <__assert_fail@plt+0x54d4>
   169e4:	ldr	ip, [r8, r3, lsl #2]
   169e8:	cmp	lr, ip
   169ec:	beq	169fc <__assert_fail@plt+0x5504>
   169f0:	sub	r1, r1, #1
   169f4:	ldr	ip, [r7, #8]
   169f8:	str	lr, [ip, r1, lsl #2]
   169fc:	subs	r2, r2, #1
   16a00:	bmi	16a40 <__assert_fail@plt+0x5548>
   16a04:	subs	r0, r0, #1
   16a08:	bpl	16a18 <__assert_fail@plt+0x5520>
   16a0c:	b	16a40 <__assert_fail@plt+0x5548>
   16a10:	subs	r2, r2, #1
   16a14:	bmi	16a40 <__assert_fail@plt+0x5548>
   16a18:	ldr	ip, [r5, #8]
   16a1c:	ldr	lr, [ip, r2, lsl #2]
   16a20:	ldr	ip, [r6, #8]
   16a24:	ldr	ip, [ip, r0, lsl #2]
   16a28:	cmp	lr, ip
   16a2c:	beq	169b0 <__assert_fail@plt+0x54b8>
   16a30:	cmp	lr, ip
   16a34:	bge	16a10 <__assert_fail@plt+0x5518>
   16a38:	subs	r0, r0, #1
   16a3c:	bpl	16a18 <__assert_fail@plt+0x5520>
   16a40:	ldr	r3, [r7, #4]
   16a44:	sub	r0, r3, #1
   16a48:	ldr	r2, [r5, #4]
   16a4c:	add	r2, r3, r2
   16a50:	ldr	ip, [r6, #4]
   16a54:	add	r2, r2, ip
   16a58:	sub	r4, r2, #1
   16a5c:	sub	r2, r2, r1
   16a60:	add	r3, r3, r2
   16a64:	str	r3, [r7, #4]
   16a68:	cmp	r0, #0
   16a6c:	cmpge	r2, #0
   16a70:	bgt	16a9c <__assert_fail@plt+0x55a4>
   16a74:	ldr	r0, [r7, #8]
   16a78:	lsl	r2, r2, #2
   16a7c:	add	r1, r0, r1, lsl #2
   16a80:	bl	11234 <memcpy@plt>
   16a84:	mov	r0, #0
   16a88:	pop	{r4, r5, r6, r7, r8, pc}
   16a8c:	add	lr, r0, r2
   16a90:	str	ip, [r3, lr, lsl #2]
   16a94:	subs	r0, r0, #1
   16a98:	bmi	16a74 <__assert_fail@plt+0x557c>
   16a9c:	ldr	r3, [r7, #8]
   16aa0:	ldr	lr, [r3, r4, lsl #2]
   16aa4:	ldr	ip, [r3, r0, lsl #2]
   16aa8:	cmp	lr, ip
   16aac:	ble	16a8c <__assert_fail@plt+0x5594>
   16ab0:	sub	r4, r4, #1
   16ab4:	add	ip, r0, r2
   16ab8:	str	lr, [r3, ip, lsl #2]
   16abc:	subs	r2, r2, #1
   16ac0:	bne	16a9c <__assert_fail@plt+0x55a4>
   16ac4:	b	16a74 <__assert_fail@plt+0x557c>
   16ac8:	mov	r0, #0
   16acc:	bx	lr
   16ad0:	mov	r0, #0
   16ad4:	bx	lr
   16ad8:	mov	r0, #12
   16adc:	pop	{r4, r5, r6, r7, r8, pc}
   16ae0:	mvn	r3, #0
   16ae4:	b	169f0 <__assert_fail@plt+0x54f8>
   16ae8:	ldr	r3, [r1, #4]
   16aec:	str	r3, [r0, #4]
   16af0:	ldr	r2, [r1, #4]
   16af4:	cmp	r2, #0
   16af8:	ble	16b4c <__assert_fail@plt+0x5654>
   16afc:	push	{r4, r5, r6, lr}
   16b00:	mov	r5, r1
   16b04:	mov	r4, r0
   16b08:	str	r3, [r0]
   16b0c:	lsl	r0, r3, #2
   16b10:	bl	23720 <__assert_fail@plt+0x12228>
   16b14:	str	r0, [r4, #8]
   16b18:	cmp	r0, #0
   16b1c:	beq	16b38 <__assert_fail@plt+0x5640>
   16b20:	ldr	r2, [r5, #4]
   16b24:	lsl	r2, r2, #2
   16b28:	ldr	r1, [r5, #8]
   16b2c:	bl	11234 <memcpy@plt>
   16b30:	mov	r0, #0
   16b34:	pop	{r4, r5, r6, pc}
   16b38:	mov	r3, #0
   16b3c:	str	r3, [r4, #4]
   16b40:	str	r3, [r4]
   16b44:	mov	r0, #12
   16b48:	pop	{r4, r5, r6, pc}
   16b4c:	mov	r3, #0
   16b50:	str	r3, [r0]
   16b54:	str	r3, [r0, #4]
   16b58:	str	r3, [r0, #8]
   16b5c:	mov	r0, r3
   16b60:	bx	lr
   16b64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b68:	mov	r8, r0
   16b6c:	mov	r5, r2
   16b70:	subs	r7, r1, #0
   16b74:	beq	16bcc <__assert_fail@plt+0x56d4>
   16b78:	ldr	r0, [r7, #4]
   16b7c:	cmp	r2, #0
   16b80:	cmpne	r0, #0
   16b84:	ble	16bc4 <__assert_fail@plt+0x56cc>
   16b88:	ldr	r3, [r2, #4]
   16b8c:	cmp	r3, #0
   16b90:	ble	16bc4 <__assert_fail@plt+0x56cc>
   16b94:	add	r0, r0, r3
   16b98:	str	r0, [r8]
   16b9c:	lsl	r0, r0, #2
   16ba0:	bl	23720 <__assert_fail@plt+0x12228>
   16ba4:	str	r0, [r8, #8]
   16ba8:	cmp	r0, #0
   16bac:	beq	16ce8 <__assert_fail@plt+0x57f0>
   16bb0:	mov	r3, #0
   16bb4:	mov	r2, #1
   16bb8:	mov	r4, r3
   16bbc:	mov	r6, r3
   16bc0:	b	16c30 <__assert_fail@plt+0x5738>
   16bc4:	cmp	r0, #0
   16bc8:	bgt	16bf0 <__assert_fail@plt+0x56f8>
   16bcc:	cmp	r5, #0
   16bd0:	beq	16c00 <__assert_fail@plt+0x5708>
   16bd4:	ldr	r3, [r5, #4]
   16bd8:	cmp	r3, #0
   16bdc:	ble	16c00 <__assert_fail@plt+0x5708>
   16be0:	mov	r1, r5
   16be4:	mov	r0, r8
   16be8:	bl	16ae8 <__assert_fail@plt+0x55f0>
   16bec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16bf0:	mov	r1, r7
   16bf4:	mov	r0, r8
   16bf8:	bl	16ae8 <__assert_fail@plt+0x55f0>
   16bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c00:	mov	r0, #0
   16c04:	str	r0, [r8]
   16c08:	str	r0, [r8, #4]
   16c0c:	str	r0, [r8, #8]
   16c10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c14:	cmp	r1, r0
   16c18:	addeq	r4, r4, #1
   16c1c:	add	r6, r6, #1
   16c20:	ldr	r0, [r8, #8]
   16c24:	str	r1, [r0, r3]
   16c28:	add	r2, r2, #1
   16c2c:	add	r3, r3, #4
   16c30:	sub	r0, r2, #1
   16c34:	mov	r9, r0
   16c38:	ldr	r1, [r7, #4]
   16c3c:	cmp	r6, r1
   16c40:	bge	16ca4 <__assert_fail@plt+0x57ac>
   16c44:	ldr	ip, [r5, #4]
   16c48:	cmp	r4, ip
   16c4c:	bge	16c78 <__assert_fail@plt+0x5780>
   16c50:	ldr	r1, [r7, #8]
   16c54:	ldr	r1, [r1, r6, lsl #2]
   16c58:	ldr	r0, [r5, #8]
   16c5c:	ldr	r0, [r0, r4, lsl #2]
   16c60:	cmp	r1, r0
   16c64:	ble	16c14 <__assert_fail@plt+0x571c>
   16c68:	add	r4, r4, #1
   16c6c:	ldr	r1, [r8, #8]
   16c70:	str	r0, [r1, r3]
   16c74:	b	16c28 <__assert_fail@plt+0x5730>
   16c78:	ldr	r3, [r8, #8]
   16c7c:	sub	r2, r1, r6
   16c80:	ldr	r1, [r7, #8]
   16c84:	lsl	r2, r2, #2
   16c88:	add	r1, r1, r6, lsl #2
   16c8c:	add	r0, r3, r0, lsl #2
   16c90:	bl	11234 <memcpy@plt>
   16c94:	ldr	r3, [r7, #4]
   16c98:	sub	r6, r3, r6
   16c9c:	add	r9, r9, r6
   16ca0:	b	16cb0 <__assert_fail@plt+0x57b8>
   16ca4:	ldr	r2, [r5, #4]
   16ca8:	cmp	r4, r2
   16cac:	blt	16cbc <__assert_fail@plt+0x57c4>
   16cb0:	str	r9, [r8, #4]
   16cb4:	mov	r0, #0
   16cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cbc:	ldr	r3, [r8, #8]
   16cc0:	sub	r2, r2, r4
   16cc4:	ldr	r1, [r5, #8]
   16cc8:	lsl	r2, r2, #2
   16ccc:	add	r1, r1, r4, lsl #2
   16cd0:	add	r0, r3, r0, lsl #2
   16cd4:	bl	11234 <memcpy@plt>
   16cd8:	ldr	r3, [r5, #4]
   16cdc:	sub	r4, r3, r4
   16ce0:	add	r9, r9, r4
   16ce4:	b	16cb0 <__assert_fail@plt+0x57b8>
   16ce8:	mov	r0, #12
   16cec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cf4:	sub	sp, sp, #92	; 0x5c
   16cf8:	mov	r5, r0
   16cfc:	ldr	r4, [r0, #28]
   16d00:	ldr	r6, [r0, #36]	; 0x24
   16d04:	ldr	r3, [r0, #48]	; 0x30
   16d08:	cmp	r6, r3
   16d0c:	movge	r6, r3
   16d10:	ldrb	r3, [r0, #74]	; 0x4a
   16d14:	cmp	r3, #0
   16d18:	bne	16d28 <__assert_fail@plt+0x5830>
   16d1c:	ldr	r3, [r0, #64]	; 0x40
   16d20:	cmp	r3, #0
   16d24:	beq	16d48 <__assert_fail@plt+0x5850>
   16d28:	ldr	r7, [r5, #32]
   16d2c:	cmp	r4, r6
   16d30:	blt	16e88 <__assert_fail@plt+0x5990>
   16d34:	str	r4, [r5, #28]
   16d38:	str	r7, [r5, #32]
   16d3c:	mov	r0, #0
   16d40:	add	sp, sp, #92	; 0x5c
   16d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d48:	ldrb	r3, [r0, #76]	; 0x4c
   16d4c:	cmp	r3, #0
   16d50:	bne	16d28 <__assert_fail@plt+0x5830>
   16d54:	cmp	r4, r6
   16d58:	bge	17010 <__assert_fail@plt+0x5b18>
   16d5c:	add	r3, r0, #16
   16d60:	str	r3, [sp, #4]
   16d64:	mvn	r7, #0
   16d68:	b	16e34 <__assert_fail@plt+0x593c>
   16d6c:	ldr	r3, [sp, #4]
   16d70:	ldm	r3, {r0, r1}
   16d74:	add	r2, sp, #80	; 0x50
   16d78:	stm	r2, {r0, r1}
   16d7c:	mov	r9, r4
   16d80:	add	r1, r8, r4
   16d84:	sub	r2, r6, r4
   16d88:	add	r1, fp, r1
   16d8c:	add	r0, sp, #12
   16d90:	bl	135c4 <__assert_fail@plt+0x20cc>
   16d94:	mov	r8, r0
   16d98:	sub	r3, r0, #1
   16d9c:	cmn	r3, #4
   16da0:	bhi	16f9c <__assert_fail@plt+0x5aa4>
   16da4:	ldr	fp, [sp, #12]
   16da8:	mov	r0, fp
   16dac:	bl	114d4 <towupper@plt>
   16db0:	mov	sl, r0
   16db4:	cmp	fp, r0
   16db8:	beq	16f78 <__assert_fail@plt+0x5a80>
   16dbc:	add	r2, sp, #80	; 0x50
   16dc0:	mov	r1, r0
   16dc4:	add	r0, sp, #16
   16dc8:	bl	111a4 <wcrtomb@plt>
   16dcc:	cmp	r8, r0
   16dd0:	bne	16e84 <__assert_fail@plt+0x598c>
   16dd4:	ldr	r0, [r5, #4]
   16dd8:	mov	r2, r8
   16ddc:	add	r1, sp, #16
   16de0:	add	r0, r0, r4
   16de4:	bl	11234 <memcpy@plt>
   16de8:	add	r4, r4, #1
   16dec:	lsl	r3, r9, #2
   16df0:	ldr	r2, [r5, #8]
   16df4:	str	sl, [r2, r9, lsl #2]
   16df8:	sub	r2, r4, #1
   16dfc:	add	r8, r2, r8
   16e00:	mov	r1, r8
   16e04:	cmp	r4, r8
   16e08:	bge	16e2c <__assert_fail@plt+0x5934>
   16e0c:	add	r3, r3, #4
   16e10:	add	r4, r4, #1
   16e14:	ldr	r2, [r5, #8]
   16e18:	str	r7, [r2, r3]
   16e1c:	add	r3, r3, #4
   16e20:	cmp	r1, r4
   16e24:	bne	16e10 <__assert_fail@plt+0x5918>
   16e28:	mov	r4, r8
   16e2c:	cmp	r6, r4
   16e30:	ble	17010 <__assert_fail@plt+0x5b18>
   16e34:	ldr	fp, [r5]
   16e38:	ldr	r8, [r5, #24]
   16e3c:	add	r3, fp, r8
   16e40:	ldrb	sl, [r3, r4]
   16e44:	bics	r3, sl, #127	; 0x7f
   16e48:	bne	16d6c <__assert_fail@plt+0x5874>
   16e4c:	ldr	r0, [sp, #4]
   16e50:	bl	11264 <mbsinit@plt>
   16e54:	cmp	r0, #0
   16e58:	beq	16d6c <__assert_fail@plt+0x5874>
   16e5c:	mov	r0, sl
   16e60:	bl	114d4 <towupper@plt>
   16e64:	bics	r3, r0, #127	; 0x7f
   16e68:	bne	16d6c <__assert_fail@plt+0x5874>
   16e6c:	ldr	r3, [r5, #4]
   16e70:	strb	r0, [r3, r4]
   16e74:	ldr	r3, [r5, #8]
   16e78:	str	r0, [r3, r4, lsl #2]
   16e7c:	add	r4, r4, #1
   16e80:	b	16e2c <__assert_fail@plt+0x5934>
   16e84:	mov	r7, r4
   16e88:	sub	r2, r6, r4
   16e8c:	add	r3, r5, #16
   16e90:	ldm	r3, {r0, r1}
   16e94:	add	r3, sp, #88	; 0x58
   16e98:	stmdb	r3, {r0, r1}
   16e9c:	ldr	r1, [r5, #64]	; 0x40
   16ea0:	cmp	r1, #0
   16ea4:	bne	17020 <__assert_fail@plt+0x5b28>
   16ea8:	ldr	r3, [r5, #24]
   16eac:	add	r3, r7, r3
   16eb0:	ldr	r1, [r5]
   16eb4:	add	r3, r1, r3
   16eb8:	str	r3, [sp, #4]
   16ebc:	add	r3, r5, #16
   16ec0:	ldr	r1, [sp, #4]
   16ec4:	add	r0, sp, #12
   16ec8:	bl	135c4 <__assert_fail@plt+0x20cc>
   16ecc:	mov	r8, r0
   16ed0:	sub	fp, r0, #1
   16ed4:	cmn	fp, #4
   16ed8:	bhi	17214 <__assert_fail@plt+0x5d1c>
   16edc:	ldr	sl, [sp, #12]
   16ee0:	mov	r0, sl
   16ee4:	bl	114d4 <towupper@plt>
   16ee8:	mov	r9, r0
   16eec:	cmp	sl, r0
   16ef0:	beq	171cc <__assert_fail@plt+0x5cd4>
   16ef4:	add	r2, sp, #80	; 0x50
   16ef8:	mov	r1, r0
   16efc:	add	r0, sp, #16
   16f00:	bl	111a4 <wcrtomb@plt>
   16f04:	mov	sl, r0
   16f08:	cmp	r8, r0
   16f0c:	bne	17080 <__assert_fail@plt+0x5b88>
   16f10:	ldr	r0, [r5, #4]
   16f14:	mov	r2, r8
   16f18:	add	r1, sp, #16
   16f1c:	add	r0, r0, r4
   16f20:	bl	11234 <memcpy@plt>
   16f24:	ldrb	r3, [r5, #76]	; 0x4c
   16f28:	cmp	r3, #0
   16f2c:	bne	171e4 <__assert_fail@plt+0x5cec>
   16f30:	add	r7, r7, r8
   16f34:	add	r2, r4, #1
   16f38:	lsl	r3, r4, #2
   16f3c:	ldr	r1, [r5, #8]
   16f40:	str	r9, [r1, r4, lsl #2]
   16f44:	add	r4, r4, r8
   16f48:	mov	ip, r4
   16f4c:	cmp	r2, r4
   16f50:	bge	172a8 <__assert_fail@plt+0x5db0>
   16f54:	add	r3, r3, #4
   16f58:	mvn	r0, #0
   16f5c:	add	r2, r2, #1
   16f60:	ldr	r1, [r5, #8]
   16f64:	str	r0, [r1, r3]
   16f68:	add	r3, r3, #4
   16f6c:	cmp	ip, r2
   16f70:	bne	16f5c <__assert_fail@plt+0x5a64>
   16f74:	b	16d2c <__assert_fail@plt+0x5834>
   16f78:	ldr	r0, [r5, #4]
   16f7c:	ldr	r3, [r5, #24]
   16f80:	add	r3, r4, r3
   16f84:	ldr	r1, [r5]
   16f88:	mov	r2, r8
   16f8c:	add	r1, r1, r3
   16f90:	add	r0, r0, r4
   16f94:	bl	11234 <memcpy@plt>
   16f98:	b	16de8 <__assert_fail@plt+0x58f0>
   16f9c:	cmn	r3, #3
   16fa0:	bhi	16fd4 <__assert_fail@plt+0x5adc>
   16fa4:	cmn	r0, #2
   16fa8:	bne	17000 <__assert_fail@plt+0x5b08>
   16fac:	ldr	r2, [r5, #36]	; 0x24
   16fb0:	ldr	r3, [r5, #48]	; 0x30
   16fb4:	cmp	r2, r3
   16fb8:	blt	17000 <__assert_fail@plt+0x5b08>
   16fbc:	ldr	r3, [r5, #4]
   16fc0:	strb	sl, [r3, r4]
   16fc4:	add	r4, r4, #1
   16fc8:	ldr	r3, [r5, #8]
   16fcc:	str	sl, [r3, r9, lsl #2]
   16fd0:	b	16e2c <__assert_fail@plt+0x5934>
   16fd4:	ldr	r3, [r5, #4]
   16fd8:	strb	sl, [r3, r4]
   16fdc:	add	r4, r4, #1
   16fe0:	ldr	r3, [r5, #8]
   16fe4:	str	sl, [r3, r9, lsl #2]
   16fe8:	cmn	r0, #1
   16fec:	addeq	r3, sp, #80	; 0x50
   16ff0:	ldmeq	r3, {r0, r1}
   16ff4:	ldreq	r3, [sp, #4]
   16ff8:	stmeq	r3, {r0, r1}
   16ffc:	b	16e2c <__assert_fail@plt+0x5934>
   17000:	add	r3, r5, #16
   17004:	add	r2, sp, #88	; 0x58
   17008:	ldmdb	r2, {r0, r1}
   1700c:	stm	r3, {r0, r1}
   17010:	str	r4, [r5, #28]
   17014:	str	r4, [r5, #32]
   17018:	mov	r0, #0
   1701c:	b	16d40 <__assert_fail@plt+0x5848>
   17020:	ldr	r8, [r5, #80]	; 0x50
   17024:	cmp	r2, #0
   17028:	cmpgt	r8, #0
   1702c:	ble	17074 <__assert_fail@plt+0x5b7c>
   17030:	ldr	r3, [r5, #24]
   17034:	add	r3, r7, r3
   17038:	sub	r3, r3, #1
   1703c:	ldr	r0, [r5]
   17040:	add	r0, r0, r3
   17044:	add	ip, sp, #15
   17048:	mov	r3, #0
   1704c:	ldrb	lr, [r0, #1]!
   17050:	ldrb	lr, [r1, lr]
   17054:	strb	lr, [ip, #1]!
   17058:	add	r3, r3, #1
   1705c:	cmp	r8, r3
   17060:	cmpgt	r2, r3
   17064:	bgt	1704c <__assert_fail@plt+0x5b54>
   17068:	add	r3, sp, #16
   1706c:	str	r3, [sp, #4]
   17070:	b	16ebc <__assert_fail@plt+0x59c4>
   17074:	add	r3, sp, #16
   17078:	str	r3, [sp, #4]
   1707c:	b	16ebc <__assert_fail@plt+0x59c4>
   17080:	cmn	r0, #1
   17084:	beq	171b4 <__assert_fail@plt+0x5cbc>
   17088:	mov	r6, r4
   1708c:	add	r3, r4, r0
   17090:	str	r3, [sp, #4]
   17094:	ldr	r0, [r5, #36]	; 0x24
   17098:	cmp	r3, r0
   1709c:	bls	170b4 <__assert_fail@plt+0x5bbc>
   170a0:	add	r3, r5, #16
   170a4:	add	r2, sp, #88	; 0x58
   170a8:	ldmdb	r2, {r0, r1}
   170ac:	stm	r3, {r0, r1}
   170b0:	b	16d34 <__assert_fail@plt+0x583c>
   170b4:	ldr	r3, [r5, #12]
   170b8:	cmp	r3, #0
   170bc:	beq	17198 <__assert_fail@plt+0x5ca0>
   170c0:	ldrb	r3, [r5, #76]	; 0x4c
   170c4:	cmp	r3, #0
   170c8:	bne	170f0 <__assert_fail@plt+0x5bf8>
   170cc:	cmp	r6, #0
   170d0:	beq	170e8 <__assert_fail@plt+0x5bf0>
   170d4:	ldr	r2, [r5, #12]
   170d8:	str	r3, [r2, r3, lsl #2]
   170dc:	add	r3, r3, #1
   170e0:	cmp	r6, r3
   170e4:	bne	170d4 <__assert_fail@plt+0x5bdc>
   170e8:	mov	r3, #1
   170ec:	strb	r3, [r5, #76]	; 0x4c
   170f0:	ldr	r0, [r5, #4]
   170f4:	mov	r2, sl
   170f8:	add	r1, sp, #16
   170fc:	add	r0, r0, r6
   17100:	bl	11234 <memcpy@plt>
   17104:	lsl	r3, r6, #2
   17108:	ldr	r2, [r5, #8]
   1710c:	str	r9, [r2, r6, lsl #2]
   17110:	ldr	r2, [r5, #12]
   17114:	str	r7, [r2, r6, lsl #2]
   17118:	cmp	sl, #1
   1711c:	bls	1715c <__assert_fail@plt+0x5c64>
   17120:	add	r3, r3, #4
   17124:	mov	r2, #1
   17128:	mvn	r0, #0
   1712c:	ldr	ip, [r5, #12]
   17130:	cmp	r8, r2
   17134:	movhi	r1, r2
   17138:	movls	r1, fp
   1713c:	add	r1, r7, r1
   17140:	str	r1, [ip, r3]
   17144:	ldr	r1, [r5, #8]
   17148:	str	r0, [r1, r3]
   1714c:	add	r2, r2, #1
   17150:	add	r3, r3, #4
   17154:	cmp	r2, sl
   17158:	bne	1712c <__assert_fail@plt+0x5c34>
   1715c:	sub	sl, sl, r8
   17160:	ldr	r6, [r5, #48]	; 0x30
   17164:	add	r6, sl, r6
   17168:	str	r6, [r5, #48]	; 0x30
   1716c:	ldr	r3, [r5, #52]	; 0x34
   17170:	cmp	r7, r3
   17174:	ldrlt	r3, [r5, #56]	; 0x38
   17178:	addlt	sl, r3, sl
   1717c:	strlt	sl, [r5, #56]	; 0x38
   17180:	ldr	r3, [r5, #36]	; 0x24
   17184:	cmp	r6, r3
   17188:	movge	r6, r3
   1718c:	ldr	r4, [sp, #4]
   17190:	add	r7, r7, r8
   17194:	b	16d2c <__assert_fail@plt+0x5834>
   17198:	lsl	r0, r0, #2
   1719c:	bl	23720 <__assert_fail@plt+0x12228>
   171a0:	str	r0, [r5, #12]
   171a4:	cmp	r0, #0
   171a8:	moveq	r0, #12
   171ac:	bne	170c0 <__assert_fail@plt+0x5bc8>
   171b0:	b	16d40 <__assert_fail@plt+0x5848>
   171b4:	ldr	r0, [r5, #4]
   171b8:	mov	r2, r8
   171bc:	ldr	r1, [sp, #4]
   171c0:	add	r0, r0, r4
   171c4:	bl	11234 <memcpy@plt>
   171c8:	b	16f24 <__assert_fail@plt+0x5a2c>
   171cc:	ldr	r0, [r5, #4]
   171d0:	mov	r2, r8
   171d4:	ldr	r1, [sp, #4]
   171d8:	add	r0, r0, r4
   171dc:	bl	11234 <memcpy@plt>
   171e0:	b	16f24 <__assert_fail@plt+0x5a2c>
   171e4:	cmp	r8, #0
   171e8:	beq	16f30 <__assert_fail@plt+0x5a38>
   171ec:	lsl	r2, r4, #2
   171f0:	mov	r3, r7
   171f4:	add	r0, r8, r7
   171f8:	ldr	r1, [r5, #12]
   171fc:	str	r3, [r1, r2]
   17200:	add	r2, r2, #4
   17204:	add	r3, r3, #1
   17208:	cmp	r3, r0
   1720c:	bne	171f8 <__assert_fail@plt+0x5d00>
   17210:	b	16f30 <__assert_fail@plt+0x5a38>
   17214:	cmn	fp, #3
   17218:	bhi	17248 <__assert_fail@plt+0x5d50>
   1721c:	cmn	r0, #2
   17220:	beq	17238 <__assert_fail@plt+0x5d40>
   17224:	add	r3, r5, #16
   17228:	add	r2, sp, #88	; 0x58
   1722c:	ldmdb	r2, {r0, r1}
   17230:	stm	r3, {r0, r1}
   17234:	b	16d34 <__assert_fail@plt+0x583c>
   17238:	ldr	r2, [r5, #36]	; 0x24
   1723c:	ldr	r3, [r5, #48]	; 0x30
   17240:	cmp	r2, r3
   17244:	blt	17224 <__assert_fail@plt+0x5d2c>
   17248:	ldr	r3, [r5]
   1724c:	ldr	r2, [r5, #24]
   17250:	add	r3, r3, r7
   17254:	ldrb	r3, [r3, r2]
   17258:	ldr	r2, [r5, #64]	; 0x40
   1725c:	cmp	r2, #0
   17260:	ldrbne	r3, [r2, r3]
   17264:	mov	r1, r4
   17268:	ldr	r2, [r5, #4]
   1726c:	strb	r3, [r2, r4]
   17270:	ldrb	r2, [r5, #76]	; 0x4c
   17274:	cmp	r2, #0
   17278:	ldrne	r2, [r5, #12]
   1727c:	strne	r7, [r2, r4, lsl #2]
   17280:	add	r7, r7, #1
   17284:	add	r4, r4, #1
   17288:	ldr	r2, [r5, #8]
   1728c:	str	r3, [r2, r1, lsl #2]
   17290:	cmn	r8, #1
   17294:	addeq	r3, r5, #16
   17298:	addeq	r2, sp, #88	; 0x58
   1729c:	ldmdbeq	r2, {r0, r1}
   172a0:	stmeq	r3, {r0, r1}
   172a4:	b	16d2c <__assert_fail@plt+0x5834>
   172a8:	mov	r4, r2
   172ac:	b	16d2c <__assert_fail@plt+0x5834>
   172b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   172b4:	mov	r6, r0
   172b8:	ldr	r8, [r0, #36]	; 0x24
   172bc:	ldr	r3, [r0, #48]	; 0x30
   172c0:	cmp	r8, r3
   172c4:	movge	r8, r3
   172c8:	ldr	r4, [r0, #28]
   172cc:	cmp	r8, r4
   172d0:	ble	1732c <__assert_fail@plt+0x5e34>
   172d4:	ldr	r9, [pc, #92]	; 17338 <__assert_fail@plt+0x5e40>
   172d8:	b	172ec <__assert_fail@plt+0x5df4>
   172dc:	strb	r5, [r7]
   172e0:	add	r4, r4, #1
   172e4:	cmp	r8, r4
   172e8:	beq	1732c <__assert_fail@plt+0x5e34>
   172ec:	ldr	r3, [r6]
   172f0:	ldr	r2, [r6, #24]
   172f4:	add	r3, r3, r4
   172f8:	ldrb	r5, [r3, r2]
   172fc:	ldr	r3, [r6, #64]	; 0x40
   17300:	cmp	r3, #0
   17304:	ldrbne	r5, [r3, r5]
   17308:	ldr	r7, [r6, #4]
   1730c:	add	r7, r7, r4
   17310:	add	r3, r5, #128	; 0x80
   17314:	cmp	r3, r9
   17318:	bhi	172dc <__assert_fail@plt+0x5de4>
   1731c:	bl	11378 <__ctype_toupper_loc@plt>
   17320:	ldr	r3, [r0]
   17324:	ldr	r5, [r3, r5, lsl #2]
   17328:	b	172dc <__assert_fail@plt+0x5de4>
   1732c:	str	r4, [r6, #28]
   17330:	str	r4, [r6, #32]
   17334:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17338:	andeq	r0, r0, pc, ror r1
   1733c:	push	{r4, r5, r6, lr}
   17340:	ldr	r3, [r0, #36]	; 0x24
   17344:	cmn	r3, #-536870910	; 0xe0000002
   17348:	bhi	17404 <__assert_fail@plt+0x5f0c>
   1734c:	mov	r4, r0
   17350:	lsl	r3, r3, #1
   17354:	ldr	r2, [r0, #48]	; 0x30
   17358:	cmp	r3, r2
   1735c:	movge	r3, r2
   17360:	cmp	r3, r1
   17364:	movge	r1, r3
   17368:	bl	161c0 <__assert_fail@plt+0x4cc8>
   1736c:	subs	r5, r0, #0
   17370:	bne	173c0 <__assert_fail@plt+0x5ec8>
   17374:	ldr	r0, [r4, #100]	; 0x64
   17378:	cmp	r0, #0
   1737c:	beq	1739c <__assert_fail@plt+0x5ea4>
   17380:	ldr	r1, [r4, #36]	; 0x24
   17384:	add	r1, r1, #1
   17388:	lsl	r1, r1, #2
   1738c:	bl	23750 <__assert_fail@plt+0x12258>
   17390:	cmp	r0, #0
   17394:	beq	1740c <__assert_fail@plt+0x5f14>
   17398:	str	r0, [r4, #100]	; 0x64
   1739c:	ldrb	r3, [r4, #72]	; 0x48
   173a0:	cmp	r3, #0
   173a4:	beq	173d4 <__assert_fail@plt+0x5edc>
   173a8:	ldr	r3, [r4, #80]	; 0x50
   173ac:	cmp	r3, #1
   173b0:	ble	173c8 <__assert_fail@plt+0x5ed0>
   173b4:	mov	r0, r4
   173b8:	bl	16cf0 <__assert_fail@plt+0x57f8>
   173bc:	mov	r5, r0
   173c0:	mov	r0, r5
   173c4:	pop	{r4, r5, r6, pc}
   173c8:	mov	r0, r4
   173cc:	bl	172b0 <__assert_fail@plt+0x5db8>
   173d0:	b	173c0 <__assert_fail@plt+0x5ec8>
   173d4:	ldr	r3, [r4, #80]	; 0x50
   173d8:	cmp	r3, #1
   173dc:	bgt	173f8 <__assert_fail@plt+0x5f00>
   173e0:	ldr	r3, [r4, #64]	; 0x40
   173e4:	cmp	r3, #0
   173e8:	beq	173c0 <__assert_fail@plt+0x5ec8>
   173ec:	mov	r0, r4
   173f0:	bl	155e4 <__assert_fail@plt+0x40ec>
   173f4:	b	173c0 <__assert_fail@plt+0x5ec8>
   173f8:	mov	r0, r4
   173fc:	bl	1678c <__assert_fail@plt+0x5294>
   17400:	b	173c0 <__assert_fail@plt+0x5ec8>
   17404:	mov	r5, #12
   17408:	b	173c0 <__assert_fail@plt+0x5ec8>
   1740c:	mov	r5, #12
   17410:	b	173c0 <__assert_fail@plt+0x5ec8>
   17414:	ldr	r3, [r1, #40]	; 0x28
   17418:	ldr	ip, [r1, #56]	; 0x38
   1741c:	cmp	ip, r3
   17420:	ble	176ac <__assert_fail@plt+0x61b4>
   17424:	push	{r4, r5, r6, r7, r8, lr}
   17428:	sub	sp, sp, #8
   1742c:	ldr	ip, [r1, #4]
   17430:	ldrb	r6, [ip, r3]
   17434:	strb	r6, [r0]
   17438:	ldrb	r3, [r0, #6]
   1743c:	and	r3, r3, #159	; 0x9f
   17440:	strb	r3, [r0, #6]
   17444:	ldr	r3, [r1, #80]	; 0x50
   17448:	cmp	r3, #1
   1744c:	ble	17470 <__assert_fail@plt+0x5f78>
   17450:	ldr	ip, [r1, #40]	; 0x28
   17454:	ldr	lr, [r1, #28]
   17458:	cmp	ip, lr
   1745c:	beq	17470 <__assert_fail@plt+0x5f78>
   17460:	ldr	lr, [r1, #8]
   17464:	ldr	ip, [lr, ip, lsl #2]
   17468:	cmn	ip, #1
   1746c:	beq	176bc <__assert_fail@plt+0x61c4>
   17470:	mov	r7, r2
   17474:	mov	r4, r1
   17478:	mov	r5, r0
   1747c:	cmp	r6, #92	; 0x5c
   17480:	beq	176dc <__assert_fail@plt+0x61e4>
   17484:	mov	r3, #1
   17488:	strb	r3, [r0, #4]
   1748c:	ldr	r3, [r1, #80]	; 0x50
   17490:	cmp	r3, #1
   17494:	ble	17b9c <__assert_fail@plt+0x66a4>
   17498:	ldr	r1, [r1, #40]	; 0x28
   1749c:	mov	r0, r4
   174a0:	bl	155c8 <__assert_fail@plt+0x40d0>
   174a4:	mov	r8, r0
   174a8:	bl	113fc <iswalnum@plt>
   174ac:	adds	r3, r0, #0
   174b0:	movne	r3, #1
   174b4:	ldrb	r0, [r5, #6]
   174b8:	cmp	r8, #95	; 0x5f
   174bc:	orreq	r3, r3, #1
   174c0:	bic	r0, r0, #64	; 0x40
   174c4:	orr	r0, r0, r3, lsl #6
   174c8:	strb	r0, [r5, #6]
   174cc:	sub	r6, r6, #10
   174d0:	cmp	r6, #115	; 0x73
   174d4:	ldrls	pc, [pc, r6, lsl #2]
   174d8:	b	17dac <__assert_fail@plt+0x68b4>
   174dc:	ldrdeq	r7, [r1], -r0
   174e0:	andeq	r7, r1, ip, lsr #27
   174e4:	andeq	r7, r1, ip, lsr #27
   174e8:	andeq	r7, r1, ip, lsr #27
   174ec:	andeq	r7, r1, ip, lsr #27
   174f0:	andeq	r7, r1, ip, lsr #27
   174f4:	andeq	r7, r1, ip, lsr #27
   174f8:	andeq	r7, r1, ip, lsr #27
   174fc:	andeq	r7, r1, ip, lsr #27
   17500:	andeq	r7, r1, ip, lsr #27
   17504:	andeq	r7, r1, ip, lsr #27
   17508:	andeq	r7, r1, ip, lsr #27
   1750c:	andeq	r7, r1, ip, lsr #27
   17510:	andeq	r7, r1, ip, lsr #27
   17514:	andeq	r7, r1, ip, lsr #27
   17518:	andeq	r7, r1, ip, lsr #27
   1751c:	andeq	r7, r1, ip, lsr #27
   17520:	andeq	r7, r1, ip, lsr #27
   17524:	andeq	r7, r1, ip, lsr #27
   17528:	andeq	r7, r1, ip, lsr #27
   1752c:	andeq	r7, r1, ip, lsr #27
   17530:	andeq	r7, r1, ip, lsr #27
   17534:	andeq	r7, r1, ip, lsr #27
   17538:	andeq	r7, r1, ip, lsr #27
   1753c:	andeq	r7, r1, ip, lsr #27
   17540:	andeq	r7, r1, ip, lsr #27
   17544:	andeq	r7, r1, r8, lsr sp
   17548:	andeq	r7, r1, ip, lsr #27
   1754c:	andeq	r7, r1, ip, lsr #27
   17550:	andeq	r7, r1, ip, lsr #27
   17554:	andeq	r7, r1, ip, lsl #25
   17558:	andeq	r7, r1, r4, lsr #25
   1755c:	andeq	r7, r1, r4, lsl #24
   17560:	andeq	r7, r1, r4, lsl ip
   17564:	andeq	r7, r1, ip, lsr #27
   17568:	andeq	r7, r1, ip, lsr #27
   1756c:	andeq	r7, r1, ip, asr #25
   17570:	andeq	r7, r1, ip, lsr #27
   17574:	andeq	r7, r1, ip, lsr #27
   17578:	andeq	r7, r1, ip, lsr #27
   1757c:	andeq	r7, r1, ip, lsr #27
   17580:	andeq	r7, r1, ip, lsr #27
   17584:	andeq	r7, r1, ip, lsr #27
   17588:	andeq	r7, r1, ip, lsr #27
   1758c:	andeq	r7, r1, ip, lsr #27
   17590:	andeq	r7, r1, ip, lsr #27
   17594:	andeq	r7, r1, ip, lsr #27
   17598:	andeq	r7, r1, ip, lsr #27
   1759c:	andeq	r7, r1, ip, lsr #27
   175a0:	andeq	r7, r1, ip, lsr #27
   175a4:	andeq	r7, r1, ip, lsr #27
   175a8:	andeq	r7, r1, ip, lsr #27
   175ac:	andeq	r7, r1, ip, lsr #27
   175b0:	andeq	r7, r1, r4, lsr ip
   175b4:	andeq	r7, r1, ip, lsr #27
   175b8:	andeq	r7, r1, ip, lsr #27
   175bc:	andeq	r7, r1, ip, lsr #27
   175c0:	andeq	r7, r1, ip, lsr #27
   175c4:	andeq	r7, r1, ip, lsr #27
   175c8:	andeq	r7, r1, ip, lsr #27
   175cc:	andeq	r7, r1, ip, lsr #27
   175d0:	andeq	r7, r1, ip, lsr #27
   175d4:	andeq	r7, r1, ip, lsr #27
   175d8:	andeq	r7, r1, ip, lsr #27
   175dc:	andeq	r7, r1, ip, lsr #27
   175e0:	andeq	r7, r1, ip, lsr #27
   175e4:	andeq	r7, r1, ip, lsr #27
   175e8:	andeq	r7, r1, ip, lsr #27
   175ec:	andeq	r7, r1, ip, lsr #27
   175f0:	andeq	r7, r1, ip, lsr #27
   175f4:	andeq	r7, r1, ip, lsr #27
   175f8:	andeq	r7, r1, ip, lsr #27
   175fc:	andeq	r7, r1, ip, lsr #27
   17600:	andeq	r7, r1, ip, lsr #27
   17604:	andeq	r7, r1, ip, lsr #27
   17608:	andeq	r7, r1, ip, lsr #27
   1760c:	andeq	r7, r1, ip, lsr #27
   17610:	andeq	r7, r1, ip, lsr #27
   17614:	andeq	r7, r1, ip, lsr #27
   17618:	andeq	r7, r1, ip, lsr #27
   1761c:	andeq	r7, r1, ip, lsr #27
   17620:			; <UNDEFINED> instruction: 0x00017cbc
   17624:	andeq	r7, r1, ip, lsr #27
   17628:	andeq	r7, r1, ip, lsr #27
   1762c:	ldrdeq	r7, [r1], -ip
   17630:	andeq	r7, r1, ip, lsr #27
   17634:	andeq	r7, r1, ip, lsr #27
   17638:	andeq	r7, r1, ip, lsr #27
   1763c:	andeq	r7, r1, ip, lsr #27
   17640:	andeq	r7, r1, ip, lsr #27
   17644:	andeq	r7, r1, ip, lsr #27
   17648:	andeq	r7, r1, ip, lsr #27
   1764c:	andeq	r7, r1, ip, lsr #27
   17650:	andeq	r7, r1, ip, lsr #27
   17654:	andeq	r7, r1, ip, lsr #27
   17658:	andeq	r7, r1, ip, lsr #27
   1765c:	andeq	r7, r1, ip, lsr #27
   17660:	andeq	r7, r1, ip, lsr #27
   17664:	andeq	r7, r1, ip, lsr #27
   17668:	andeq	r7, r1, ip, lsr #27
   1766c:	andeq	r7, r1, ip, lsr #27
   17670:	andeq	r7, r1, ip, lsr #27
   17674:	andeq	r7, r1, ip, lsr #27
   17678:	andeq	r7, r1, ip, lsr #27
   1767c:	andeq	r7, r1, ip, lsr #27
   17680:	andeq	r7, r1, ip, lsr #27
   17684:	andeq	r7, r1, ip, lsr #27
   17688:	andeq	r7, r1, ip, lsr #27
   1768c:	andeq	r7, r1, ip, lsr #27
   17690:	andeq	r7, r1, ip, lsr #27
   17694:	andeq	r7, r1, ip, lsr #27
   17698:	andeq	r7, r1, ip, lsr #27
   1769c:	andeq	r7, r1, ip, lsr #27
   176a0:	andeq	r7, r1, r4, asr ip
   176a4:	andeq	r7, r1, r8, ror #23
   176a8:	andeq	r7, r1, r0, ror ip
   176ac:	mov	r3, #2
   176b0:	strb	r3, [r0, #4]
   176b4:	mov	r0, #0
   176b8:	bx	lr
   176bc:	mov	r3, #1
   176c0:	strb	r3, [r0, #4]
   176c4:	ldrb	r2, [r0, #6]
   176c8:	orr	r2, r2, #32
   176cc:	strb	r2, [r0, #6]
   176d0:	mov	r0, r3
   176d4:	add	sp, sp, #8
   176d8:	pop	{r4, r5, r6, r7, r8, pc}
   176dc:	ldr	r1, [r1, #40]	; 0x28
   176e0:	add	r2, r1, #1
   176e4:	ldr	r0, [r4, #48]	; 0x30
   176e8:	cmp	r2, r0
   176ec:	bge	178c0 <__assert_fail@plt+0x63c8>
   176f0:	ldrb	r0, [r4, #75]	; 0x4b
   176f4:	cmp	r0, #0
   176f8:	bne	178d0 <__assert_fail@plt+0x63d8>
   176fc:	ldr	r3, [r4, #4]
   17700:	ldrb	r6, [r3, r2]
   17704:	strb	r6, [r5]
   17708:	mov	r3, #1
   1770c:	strb	r3, [r5, #4]
   17710:	ldr	r3, [r4, #80]	; 0x50
   17714:	cmp	r3, #1
   17718:	ble	1794c <__assert_fail@plt+0x6454>
   1771c:	ldr	r1, [r4, #40]	; 0x28
   17720:	add	r1, r1, #1
   17724:	mov	r0, r4
   17728:	bl	155c8 <__assert_fail@plt+0x40d0>
   1772c:	mov	r4, r0
   17730:	bl	113fc <iswalnum@plt>
   17734:	adds	r3, r0, #0
   17738:	movne	r3, #1
   1773c:	ldrb	r0, [r5, #6]
   17740:	cmp	r4, #95	; 0x5f
   17744:	orreq	r3, r3, #1
   17748:	bic	r0, r0, #64	; 0x40
   1774c:	orr	r0, r0, r3, lsl #6
   17750:	strb	r0, [r5, #6]
   17754:	sub	r3, r6, #39	; 0x27
   17758:	cmp	r3, #86	; 0x56
   1775c:	ldrls	pc, [pc, r3, lsl #2]
   17760:	b	17da4 <__assert_fail@plt+0x68ac>
   17764:	ldrdeq	r7, [r1], -r0
   17768:	strdeq	r7, [r1], -r4
   1776c:	andeq	r7, r1, ip, lsl #22
   17770:	andeq	r7, r1, r4, lsr #27
   17774:	andeq	r7, r1, r4, lsr #22
   17778:	andeq	r7, r1, r4, lsr #27
   1777c:	andeq	r7, r1, r4, lsr #27
   17780:	andeq	r7, r1, r4, lsr #27
   17784:	andeq	r7, r1, r4, lsr #27
   17788:	andeq	r7, r1, r4, lsr #27
   1778c:	muleq	r1, r8, r9
   17790:	muleq	r1, r8, r9
   17794:	muleq	r1, r8, r9
   17798:	muleq	r1, r8, r9
   1779c:	muleq	r1, r8, r9
   177a0:	muleq	r1, r8, r9
   177a4:	muleq	r1, r8, r9
   177a8:	muleq	r1, r8, r9
   177ac:	muleq	r1, r8, r9
   177b0:	andeq	r7, r1, r4, lsr #27
   177b4:	andeq	r7, r1, r4, lsr #27
   177b8:			; <UNDEFINED> instruction: 0x000179bc
   177bc:	andeq	r7, r1, r4, lsr #27
   177c0:	andeq	r7, r1, r0, ror #19
   177c4:	andeq	r7, r1, r4, asr #22
   177c8:	andeq	r7, r1, r4, lsr #27
   177cc:	andeq	r7, r1, r4, lsr #27
   177d0:	andeq	r7, r1, r8, lsr #20
   177d4:	andeq	r7, r1, r4, lsr #27
   177d8:	andeq	r7, r1, r4, lsr #27
   177dc:	andeq	r7, r1, r4, lsr #27
   177e0:	andeq	r7, r1, r4, lsr #27
   177e4:	andeq	r7, r1, r4, lsr #27
   177e8:	andeq	r7, r1, r4, lsr #27
   177ec:	andeq	r7, r1, r4, lsr #27
   177f0:	andeq	r7, r1, r4, lsr #27
   177f4:	andeq	r7, r1, r4, lsr #27
   177f8:	andeq	r7, r1, r4, lsr #27
   177fc:	andeq	r7, r1, r4, lsr #27
   17800:	andeq	r7, r1, r4, lsr #27
   17804:	andeq	r7, r1, r4, lsr #27
   17808:	andeq	r7, r1, r4, lsr #27
   1780c:	andeq	r7, r1, r4, lsr #27
   17810:	andeq	r7, r1, r4, lsr #27
   17814:	muleq	r1, r4, sl
   17818:	andeq	r7, r1, r4, lsr #27
   1781c:	andeq	r7, r1, r4, lsr #27
   17820:	andeq	r7, r1, r4, lsr #27
   17824:	andeq	r7, r1, r4, ror #20
   17828:	andeq	r7, r1, r4, lsr #27
   1782c:	andeq	r7, r1, r4, lsr #27
   17830:	andeq	r7, r1, r4, lsr #27
   17834:	andeq	r7, r1, r4, lsr #27
   17838:	andeq	r7, r1, r4, lsr #27
   1783c:	andeq	r7, r1, r4, lsr #27
   17840:	andeq	r7, r1, r4, lsr #27
   17844:	andeq	r7, r1, r4, lsr #27
   17848:	andeq	r7, r1, ip, lsr #21
   1784c:	andeq	r7, r1, r4, lsr #27
   17850:	andeq	r7, r1, r4, lsl #20
   17854:	andeq	r7, r1, r4, lsr #27
   17858:	andeq	r7, r1, r4, lsr #27
   1785c:	andeq	r7, r1, r4, lsr #27
   17860:	andeq	r7, r1, r4, lsr #27
   17864:	andeq	r7, r1, r4, lsr #27
   17868:	andeq	r7, r1, r4, lsr #27
   1786c:	andeq	r7, r1, r4, lsr #27
   17870:	andeq	r7, r1, r4, lsr #27
   17874:	andeq	r7, r1, r4, lsr #27
   17878:	andeq	r7, r1, r4, lsr #27
   1787c:	andeq	r7, r1, r4, lsr #27
   17880:	andeq	r7, r1, r4, lsr #27
   17884:	andeq	r7, r1, r4, lsr #27
   17888:	andeq	r7, r1, r4, lsr #27
   1788c:	andeq	r7, r1, r4, lsr #27
   17890:	andeq	r7, r1, r4, lsr #27
   17894:	andeq	r7, r1, ip, ror sl
   17898:	andeq	r7, r1, r4, lsr #27
   1789c:	andeq	r7, r1, r4, lsr #27
   178a0:	andeq	r7, r1, r4, lsr #27
   178a4:	andeq	r7, r1, ip, asr #20
   178a8:	andeq	r7, r1, r4, lsr #27
   178ac:	andeq	r7, r1, r4, lsr #27
   178b0:	andeq	r7, r1, r4, lsr #27
   178b4:	andeq	r7, r1, r4, ror #22
   178b8:	andeq	r7, r1, r0, lsl #19
   178bc:	andeq	r7, r1, r0, lsl #23
   178c0:	mov	r3, #36	; 0x24
   178c4:	strb	r3, [r5, #4]
   178c8:	mov	r0, #1
   178cc:	b	176d4 <__assert_fail@plt+0x61dc>
   178d0:	cmp	r3, #1
   178d4:	ble	1790c <__assert_fail@plt+0x6414>
   178d8:	ldr	r3, [r4, #8]
   178dc:	lsl	ip, r2, #2
   178e0:	ldr	r0, [r3, r2, lsl #2]
   178e4:	cmn	r0, #1
   178e8:	beq	17940 <__assert_fail@plt+0x6448>
   178ec:	add	r1, r1, #2
   178f0:	ldr	r0, [r4, #28]
   178f4:	cmp	r0, r1
   178f8:	beq	1790c <__assert_fail@plt+0x6414>
   178fc:	add	r3, r3, ip
   17900:	ldr	r3, [r3, #4]
   17904:	cmn	r3, #1
   17908:	beq	17940 <__assert_fail@plt+0x6448>
   1790c:	ldrb	r3, [r4, #76]	; 0x4c
   17910:	cmp	r3, #0
   17914:	beq	17db4 <__assert_fail@plt+0x68bc>
   17918:	ldr	r1, [r4, #12]
   1791c:	ldr	r3, [r4]
   17920:	ldr	r0, [r1, r2, lsl #2]
   17924:	ldr	r1, [r4, #24]
   17928:	add	r3, r3, r0
   1792c:	ldrb	r6, [r3, r1]
   17930:	bics	r3, r6, #127	; 0x7f
   17934:	ldrne	r3, [r4, #4]
   17938:	ldrbne	r6, [r3, r2]
   1793c:	b	17704 <__assert_fail@plt+0x620c>
   17940:	ldr	r3, [r4, #4]
   17944:	ldrb	r6, [r3, r2]
   17948:	b	17704 <__assert_fail@plt+0x620c>
   1794c:	bl	113a8 <__ctype_b_loc@plt>
   17950:	ldr	r2, [r0]
   17954:	lsl	r3, r6, #1
   17958:	ldrh	r3, [r2, r3]
   1795c:	lsr	r3, r3, #3
   17960:	and	r3, r3, #1
   17964:	ldrb	r2, [r5, #6]
   17968:	cmp	r6, #95	; 0x5f
   1796c:	orreq	r3, r3, #1
   17970:	bic	r2, r2, #64	; 0x40
   17974:	orr	r3, r2, r3, lsl #6
   17978:	strb	r3, [r5, #6]
   1797c:	b	17754 <__assert_fail@plt+0x625c>
   17980:	tst	r7, #33792	; 0x8400
   17984:	movne	r0, #2
   17988:	moveq	r3, #10
   1798c:	strbeq	r3, [r5, #4]
   17990:	moveq	r0, #2
   17994:	b	176d4 <__assert_fail@plt+0x61dc>
   17998:	tst	r7, #16384	; 0x4000
   1799c:	movne	r0, #2
   179a0:	bne	176d4 <__assert_fail@plt+0x61dc>
   179a4:	mov	r3, #4
   179a8:	strb	r3, [r5, #4]
   179ac:	sub	r6, r6, #49	; 0x31
   179b0:	str	r6, [r5]
   179b4:	mov	r0, #2
   179b8:	b	176d4 <__assert_fail@plt+0x61dc>
   179bc:	tst	r7, #524288	; 0x80000
   179c0:	movne	r0, #2
   179c4:	bne	176d4 <__assert_fail@plt+0x61dc>
   179c8:	mov	r3, #12
   179cc:	strb	r3, [r5, #4]
   179d0:	mov	r3, #6
   179d4:	str	r3, [r5]
   179d8:	mov	r0, #2
   179dc:	b	176d4 <__assert_fail@plt+0x61dc>
   179e0:	tst	r7, #524288	; 0x80000
   179e4:	movne	r0, #2
   179e8:	bne	176d4 <__assert_fail@plt+0x61dc>
   179ec:	mov	r3, #12
   179f0:	strb	r3, [r5, #4]
   179f4:	mov	r3, #9
   179f8:	str	r3, [r5]
   179fc:	mov	r0, #2
   17a00:	b	176d4 <__assert_fail@plt+0x61dc>
   17a04:	tst	r7, #524288	; 0x80000
   17a08:	movne	r0, #2
   17a0c:	bne	176d4 <__assert_fail@plt+0x61dc>
   17a10:	mov	r3, #12
   17a14:	strb	r3, [r5, #4]
   17a18:	mov	r3, #256	; 0x100
   17a1c:	str	r3, [r5]
   17a20:	mov	r0, #2
   17a24:	b	176d4 <__assert_fail@plt+0x61dc>
   17a28:	tst	r7, #524288	; 0x80000
   17a2c:	movne	r0, #2
   17a30:	bne	176d4 <__assert_fail@plt+0x61dc>
   17a34:	mov	r3, #12
   17a38:	strb	r3, [r5, #4]
   17a3c:	mov	r3, #512	; 0x200
   17a40:	str	r3, [r5]
   17a44:	mov	r0, #2
   17a48:	b	176d4 <__assert_fail@plt+0x61dc>
   17a4c:	tst	r7, #524288	; 0x80000
   17a50:	movne	r0, #2
   17a54:	moveq	r3, #32
   17a58:	strbeq	r3, [r5, #4]
   17a5c:	moveq	r0, #2
   17a60:	b	176d4 <__assert_fail@plt+0x61dc>
   17a64:	tst	r7, #524288	; 0x80000
   17a68:	movne	r0, #2
   17a6c:	moveq	r3, #33	; 0x21
   17a70:	strbeq	r3, [r5, #4]
   17a74:	moveq	r0, #2
   17a78:	b	176d4 <__assert_fail@plt+0x61dc>
   17a7c:	tst	r7, #524288	; 0x80000
   17a80:	movne	r0, #2
   17a84:	moveq	r3, #34	; 0x22
   17a88:	strbeq	r3, [r5, #4]
   17a8c:	moveq	r0, #2
   17a90:	b	176d4 <__assert_fail@plt+0x61dc>
   17a94:	tst	r7, #524288	; 0x80000
   17a98:	movne	r0, #2
   17a9c:	moveq	r3, #35	; 0x23
   17aa0:	strbeq	r3, [r5, #4]
   17aa4:	moveq	r0, #2
   17aa8:	b	176d4 <__assert_fail@plt+0x61dc>
   17aac:	tst	r7, #524288	; 0x80000
   17ab0:	movne	r0, #2
   17ab4:	bne	176d4 <__assert_fail@plt+0x61dc>
   17ab8:	mov	r3, #12
   17abc:	strb	r3, [r5, #4]
   17ac0:	mov	r3, #64	; 0x40
   17ac4:	str	r3, [r5]
   17ac8:	mov	r0, #2
   17acc:	b	176d4 <__assert_fail@plt+0x61dc>
   17ad0:	tst	r7, #524288	; 0x80000
   17ad4:	movne	r0, #2
   17ad8:	bne	176d4 <__assert_fail@plt+0x61dc>
   17adc:	mov	r3, #12
   17ae0:	strb	r3, [r5, #4]
   17ae4:	mov	r3, #128	; 0x80
   17ae8:	str	r3, [r5]
   17aec:	mov	r0, #2
   17af0:	b	176d4 <__assert_fail@plt+0x61dc>
   17af4:	tst	r7, #8192	; 0x2000
   17af8:	movne	r0, #2
   17afc:	moveq	r3, #8
   17b00:	strbeq	r3, [r5, #4]
   17b04:	moveq	r0, #2
   17b08:	b	176d4 <__assert_fail@plt+0x61dc>
   17b0c:	tst	r7, #8192	; 0x2000
   17b10:	movne	r0, #2
   17b14:	moveq	r3, #9
   17b18:	strbeq	r3, [r5, #4]
   17b1c:	moveq	r0, #2
   17b20:	b	176d4 <__assert_fail@plt+0x61dc>
   17b24:	ldr	r3, [pc, #668]	; 17dc8 <__assert_fail@plt+0x68d0>
   17b28:	and	r3, r3, r7
   17b2c:	cmp	r3, #2
   17b30:	moveq	r3, #18
   17b34:	strbeq	r3, [r5, #4]
   17b38:	moveq	r0, #2
   17b3c:	movne	r0, #2
   17b40:	b	176d4 <__assert_fail@plt+0x61dc>
   17b44:	ldr	r3, [pc, #636]	; 17dc8 <__assert_fail@plt+0x68d0>
   17b48:	and	r3, r3, r7
   17b4c:	cmp	r3, #2
   17b50:	moveq	r3, #19
   17b54:	strbeq	r3, [r5, #4]
   17b58:	moveq	r0, #2
   17b5c:	movne	r0, #2
   17b60:	b	176d4 <__assert_fail@plt+0x61dc>
   17b64:	and	r7, r7, #4608	; 0x1200
   17b68:	cmp	r7, #512	; 0x200
   17b6c:	moveq	r3, #23
   17b70:	strbeq	r3, [r5, #4]
   17b74:	moveq	r0, #2
   17b78:	movne	r0, #2
   17b7c:	b	176d4 <__assert_fail@plt+0x61dc>
   17b80:	and	r7, r7, #4608	; 0x1200
   17b84:	cmp	r7, #512	; 0x200
   17b88:	moveq	r3, #24
   17b8c:	strbeq	r3, [r5, #4]
   17b90:	moveq	r0, #2
   17b94:	movne	r0, #2
   17b98:	b	176d4 <__assert_fail@plt+0x61dc>
   17b9c:	bl	113a8 <__ctype_b_loc@plt>
   17ba0:	ldr	r2, [r0]
   17ba4:	lsl	r3, r6, #1
   17ba8:	ldrh	r3, [r2, r3]
   17bac:	lsr	r3, r3, #3
   17bb0:	and	r3, r3, #1
   17bb4:	ldrb	r2, [r5, #6]
   17bb8:	cmp	r6, #95	; 0x5f
   17bbc:	orreq	r3, r3, #1
   17bc0:	bic	r2, r2, #64	; 0x40
   17bc4:	orr	r3, r2, r3, lsl #6
   17bc8:	strb	r3, [r5, #6]
   17bcc:	b	174cc <__assert_fail@plt+0x5fd4>
   17bd0:	tst	r7, #2048	; 0x800
   17bd4:	moveq	r0, #1
   17bd8:	movne	r3, #10
   17bdc:	strbne	r3, [r5, #4]
   17be0:	movne	r0, #1
   17be4:	b	176d4 <__assert_fail@plt+0x61dc>
   17be8:	and	r7, r7, #33792	; 0x8400
   17bec:	cmp	r7, #32768	; 0x8000
   17bf0:	moveq	r3, #10
   17bf4:	strbeq	r3, [r5, #4]
   17bf8:	moveq	r0, #1
   17bfc:	movne	r0, #1
   17c00:	b	176d4 <__assert_fail@plt+0x61dc>
   17c04:	mov	r3, #11
   17c08:	strb	r3, [r5, #4]
   17c0c:	mov	r0, #1
   17c10:	b	176d4 <__assert_fail@plt+0x61dc>
   17c14:	ldr	r3, [pc, #428]	; 17dc8 <__assert_fail@plt+0x68d0>
   17c18:	and	r3, r3, r7
   17c1c:	cmp	r3, #0
   17c20:	movne	r0, #1
   17c24:	moveq	r3, #18
   17c28:	strbeq	r3, [r5, #4]
   17c2c:	moveq	r0, #1
   17c30:	b	176d4 <__assert_fail@plt+0x61dc>
   17c34:	ldr	r3, [pc, #396]	; 17dc8 <__assert_fail@plt+0x68d0>
   17c38:	and	r3, r3, r7
   17c3c:	cmp	r3, #0
   17c40:	movne	r0, #1
   17c44:	moveq	r3, #19
   17c48:	strbeq	r3, [r5, #4]
   17c4c:	moveq	r0, #1
   17c50:	b	176d4 <__assert_fail@plt+0x61dc>
   17c54:	and	r7, r7, #4608	; 0x1200
   17c58:	cmp	r7, #4608	; 0x1200
   17c5c:	moveq	r3, #23
   17c60:	strbeq	r3, [r5, #4]
   17c64:	moveq	r0, #1
   17c68:	movne	r0, #1
   17c6c:	b	176d4 <__assert_fail@plt+0x61dc>
   17c70:	and	r7, r7, #4608	; 0x1200
   17c74:	cmp	r7, #4608	; 0x1200
   17c78:	moveq	r3, #24
   17c7c:	strbeq	r3, [r5, #4]
   17c80:	moveq	r0, #1
   17c84:	movne	r0, #1
   17c88:	b	176d4 <__assert_fail@plt+0x61dc>
   17c8c:	tst	r7, #8192	; 0x2000
   17c90:	moveq	r0, #1
   17c94:	movne	r3, #8
   17c98:	strbne	r3, [r5, #4]
   17c9c:	movne	r0, #1
   17ca0:	b	176d4 <__assert_fail@plt+0x61dc>
   17ca4:	tst	r7, #8192	; 0x2000
   17ca8:	moveq	r0, #1
   17cac:	movne	r3, #9
   17cb0:	strbne	r3, [r5, #4]
   17cb4:	movne	r0, #1
   17cb8:	b	176d4 <__assert_fail@plt+0x61dc>
   17cbc:	mov	r3, #20
   17cc0:	strb	r3, [r5, #4]
   17cc4:	mov	r0, #1
   17cc8:	b	176d4 <__assert_fail@plt+0x61dc>
   17ccc:	mov	r3, #5
   17cd0:	strb	r3, [r5, #4]
   17cd4:	mov	r0, #1
   17cd8:	b	176d4 <__assert_fail@plt+0x61dc>
   17cdc:	ldr	r3, [pc, #232]	; 17dcc <__assert_fail@plt+0x68d4>
   17ce0:	and	r3, r3, r7
   17ce4:	cmp	r3, #0
   17ce8:	bne	17d20 <__assert_fail@plt+0x6828>
   17cec:	ldr	r3, [r4, #40]	; 0x28
   17cf0:	cmp	r3, #0
   17cf4:	beq	17d20 <__assert_fail@plt+0x6828>
   17cf8:	ldr	r2, [r4, #4]
   17cfc:	add	r3, r2, r3
   17d00:	ldrb	r2, [r3, #-1]
   17d04:	lsr	r3, r7, #11
   17d08:	eor	r3, r3, #1
   17d0c:	cmp	r2, #10
   17d10:	orrne	r3, r3, #1
   17d14:	tst	r3, #1
   17d18:	movne	r0, #1
   17d1c:	bne	176d4 <__assert_fail@plt+0x61dc>
   17d20:	mov	r3, #12
   17d24:	strb	r3, [r5, #4]
   17d28:	mov	r3, #16
   17d2c:	str	r3, [r5]
   17d30:	mov	r0, #1
   17d34:	b	176d4 <__assert_fail@plt+0x61dc>
   17d38:	tst	r7, #8
   17d3c:	bne	17d8c <__assert_fail@plt+0x6894>
   17d40:	ldr	r3, [r4, #40]	; 0x28
   17d44:	add	r3, r3, #1
   17d48:	ldr	r2, [r4, #48]	; 0x30
   17d4c:	cmp	r3, r2
   17d50:	beq	17d8c <__assert_fail@plt+0x6894>
   17d54:	str	r3, [r4, #40]	; 0x28
   17d58:	mov	r2, r7
   17d5c:	mov	r1, r4
   17d60:	mov	r0, sp
   17d64:	bl	17414 <__assert_fail@plt+0x5f1c>
   17d68:	ldr	r3, [r4, #40]	; 0x28
   17d6c:	sub	r3, r3, #1
   17d70:	str	r3, [r4, #40]	; 0x28
   17d74:	ldrb	r3, [sp, #4]
   17d78:	sub	r3, r3, #9
   17d7c:	uxtb	r3, r3
   17d80:	cmp	r3, #1
   17d84:	movhi	r0, #1
   17d88:	bhi	176d4 <__assert_fail@plt+0x61dc>
   17d8c:	mov	r3, #12
   17d90:	strb	r3, [r5, #4]
   17d94:	mov	r3, #32
   17d98:	str	r3, [r5]
   17d9c:	mov	r0, #1
   17da0:	b	176d4 <__assert_fail@plt+0x61dc>
   17da4:	mov	r0, #2
   17da8:	b	176d4 <__assert_fail@plt+0x61dc>
   17dac:	mov	r0, #1
   17db0:	b	176d4 <__assert_fail@plt+0x61dc>
   17db4:	ldr	r3, [r4]
   17db8:	ldr	r1, [r4, #24]
   17dbc:	add	r2, r3, r2
   17dc0:	ldrb	r6, [r2, r1]
   17dc4:	b	17704 <__assert_fail@plt+0x620c>
   17dc8:	andeq	r0, r0, r2, lsl #8
   17dcc:	addeq	r0, r0, r8
   17dd0:	push	{r4, lr}
   17dd4:	mov	r4, r1
   17dd8:	bl	17414 <__assert_fail@plt+0x5f1c>
   17ddc:	ldr	r3, [r4, #40]	; 0x28
   17de0:	add	r0, r3, r0
   17de4:	str	r0, [r4, #40]	; 0x28
   17de8:	pop	{r4, pc}
   17dec:	push	{r4, r5, r6, r7, r8, lr}
   17df0:	mov	r7, r0
   17df4:	mov	r4, r1
   17df8:	mov	r6, r2
   17dfc:	mvn	r5, #0
   17e00:	mov	r2, r6
   17e04:	mov	r1, r7
   17e08:	mov	r0, r4
   17e0c:	bl	17dd0 <__assert_fail@plt+0x68d8>
   17e10:	ldrb	r2, [r4]
   17e14:	ldrb	r3, [r4, #4]
   17e18:	cmp	r3, #2
   17e1c:	beq	17e84 <__assert_fail@plt+0x698c>
   17e20:	cmp	r3, #24
   17e24:	cmpne	r2, #44	; 0x2c
   17e28:	beq	17e88 <__assert_fail@plt+0x6990>
   17e2c:	cmp	r3, #1
   17e30:	mvnne	r5, #1
   17e34:	bne	17e00 <__assert_fail@plt+0x6908>
   17e38:	sub	r3, r2, #48	; 0x30
   17e3c:	uxtb	r3, r3
   17e40:	cmp	r3, #9
   17e44:	movhi	r3, #0
   17e48:	movls	r3, #1
   17e4c:	cmn	r5, #2
   17e50:	moveq	r3, #0
   17e54:	cmp	r3, #0
   17e58:	mvneq	r5, #1
   17e5c:	beq	17e00 <__assert_fail@plt+0x6908>
   17e60:	cmn	r5, #1
   17e64:	subeq	r5, r2, #48	; 0x30
   17e68:	beq	17e00 <__assert_fail@plt+0x6908>
   17e6c:	add	r5, r5, r5, lsl #2
   17e70:	add	r2, r2, r5, lsl #1
   17e74:	sub	r5, r2, #48	; 0x30
   17e78:	cmp	r5, #32768	; 0x8000
   17e7c:	movge	r5, #32768	; 0x8000
   17e80:	b	17e00 <__assert_fail@plt+0x6908>
   17e84:	mvn	r5, #1
   17e88:	mov	r0, r5
   17e8c:	pop	{r4, r5, r6, r7, r8, pc}
   17e90:	push	{r4, lr}
   17e94:	mov	r4, r0
   17e98:	ldr	r0, [r0]
   17e9c:	bl	13340 <__assert_fail@plt+0x1e48>
   17ea0:	ldr	r0, [r4, #4]
   17ea4:	bl	13340 <__assert_fail@plt+0x1e48>
   17ea8:	ldr	r0, [r4, #8]
   17eac:	bl	13340 <__assert_fail@plt+0x1e48>
   17eb0:	ldr	r0, [r4, #12]
   17eb4:	bl	13340 <__assert_fail@plt+0x1e48>
   17eb8:	mov	r0, r4
   17ebc:	bl	13340 <__assert_fail@plt+0x1e48>
   17ec0:	pop	{r4, pc}
   17ec4:	push	{r4, lr}
   17ec8:	ldr	r2, [r0, #4]
   17ecc:	ldr	r3, [pc, #40]	; 17efc <__assert_fail@plt+0x6a04>
   17ed0:	and	r3, r3, r2
   17ed4:	cmp	r3, #6
   17ed8:	beq	17ef0 <__assert_fail@plt+0x69f8>
   17edc:	cmp	r3, #3
   17ee0:	popne	{r4, pc}
   17ee4:	ldr	r0, [r0]
   17ee8:	bl	13340 <__assert_fail@plt+0x1e48>
   17eec:	pop	{r4, pc}
   17ef0:	ldr	r0, [r0]
   17ef4:	bl	17e90 <__assert_fail@plt+0x6998>
   17ef8:	pop	{r4, pc}
   17efc:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   17f00:	push	{r4, lr}
   17f04:	add	r0, r1, #20
   17f08:	bl	17ec4 <__assert_fail@plt+0x69cc>
   17f0c:	mov	r0, #0
   17f10:	pop	{r4, pc}
   17f14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17f18:	sub	sp, sp, #8
   17f1c:	mov	r4, r0
   17f20:	add	r3, sp, #8
   17f24:	stmdb	r3, {r1, r2}
   17f28:	ldrb	r5, [sp, #4]
   17f2c:	ldr	r3, [r0, #4]
   17f30:	ldr	r2, [r0, #8]
   17f34:	cmp	r2, r3
   17f38:	bcs	1800c <__assert_fail@plt+0x6b14>
   17f3c:	ldr	r2, [r4, #8]
   17f40:	ldr	r3, [r4]
   17f44:	add	r3, r3, r2, lsl #3
   17f48:	add	r2, sp, #8
   17f4c:	ldmdb	r2, {r0, r1}
   17f50:	stm	r3, {r0, r1}
   17f54:	ldr	r3, [r4, #8]
   17f58:	ldr	r2, [r4]
   17f5c:	add	r2, r2, r3, lsl #3
   17f60:	ldr	r3, [r2, #4]
   17f64:	bic	r3, r3, #261120	; 0x3fc00
   17f68:	bic	r3, r3, #768	; 0x300
   17f6c:	str	r3, [r2, #4]
   17f70:	ldr	r3, [r4, #8]
   17f74:	ldr	r2, [r4]
   17f78:	add	r2, r2, r3, lsl #3
   17f7c:	cmp	r5, #5
   17f80:	beq	180d8 <__assert_fail@plt+0x6be0>
   17f84:	cmp	r5, #6
   17f88:	movne	r5, #0
   17f8c:	moveq	r5, #1
   17f90:	ldrb	r3, [r2, #6]
   17f94:	and	r5, r5, #1
   17f98:	bic	r3, r3, #16
   17f9c:	orr	r5, r3, r5, lsl #4
   17fa0:	strb	r5, [r2, #6]
   17fa4:	ldr	r2, [r4, #8]
   17fa8:	ldr	r3, [r4, #12]
   17fac:	mvn	r1, #0
   17fb0:	str	r1, [r3, r2, lsl #2]
   17fb4:	ldr	r3, [r4, #8]
   17fb8:	add	r3, r3, r3, lsl #1
   17fbc:	lsl	r3, r3, #2
   17fc0:	ldr	r0, [r4, #20]
   17fc4:	add	r1, r0, r3
   17fc8:	mov	r2, #0
   17fcc:	str	r2, [r0, r3]
   17fd0:	str	r2, [r1, #4]
   17fd4:	str	r2, [r1, #8]
   17fd8:	ldr	r3, [r4, #8]
   17fdc:	add	r3, r3, r3, lsl #1
   17fe0:	lsl	r3, r3, #2
   17fe4:	ldr	r0, [r4, #24]
   17fe8:	add	r1, r0, r3
   17fec:	str	r2, [r0, r3]
   17ff0:	str	r2, [r1, #4]
   17ff4:	str	r2, [r1, #8]
   17ff8:	ldr	r0, [r4, #8]
   17ffc:	add	r3, r0, #1
   18000:	str	r3, [r4, #8]
   18004:	add	sp, sp, #8
   18008:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1800c:	lsl	r6, r3, #1
   18010:	ldr	r3, [pc, #228]	; 180fc <__assert_fail@plt+0x6c04>
   18014:	cmp	r6, r3
   18018:	bhi	180ec <__assert_fail@plt+0x6bf4>
   1801c:	lsl	r1, r6, #3
   18020:	ldr	r0, [r0]
   18024:	bl	23750 <__assert_fail@plt+0x12258>
   18028:	cmp	r0, #0
   1802c:	beq	180f4 <__assert_fail@plt+0x6bfc>
   18030:	str	r0, [r4]
   18034:	lsl	r7, r6, #2
   18038:	mov	r1, r7
   1803c:	ldr	r0, [r4, #12]
   18040:	bl	23750 <__assert_fail@plt+0x12258>
   18044:	mov	r9, r0
   18048:	mov	r1, r7
   1804c:	ldr	r0, [r4, #16]
   18050:	bl	23750 <__assert_fail@plt+0x12258>
   18054:	mov	r8, r0
   18058:	add	r7, r6, r6, lsl #1
   1805c:	lsl	r7, r7, #2
   18060:	mov	r1, r7
   18064:	ldr	r0, [r4, #20]
   18068:	bl	23750 <__assert_fail@plt+0x12258>
   1806c:	mov	sl, r0
   18070:	mov	r1, r7
   18074:	ldr	r0, [r4, #24]
   18078:	bl	23750 <__assert_fail@plt+0x12258>
   1807c:	mov	r7, r0
   18080:	cmp	r8, #0
   18084:	cmpne	r9, #0
   18088:	beq	180b0 <__assert_fail@plt+0x6bb8>
   1808c:	cmp	r0, #0
   18090:	cmpne	sl, #0
   18094:	beq	180b0 <__assert_fail@plt+0x6bb8>
   18098:	str	r9, [r4, #12]
   1809c:	str	r8, [r4, #16]
   180a0:	str	sl, [r4, #20]
   180a4:	str	r0, [r4, #24]
   180a8:	str	r6, [r4, #4]
   180ac:	b	17f3c <__assert_fail@plt+0x6a44>
   180b0:	mov	r0, r9
   180b4:	bl	13340 <__assert_fail@plt+0x1e48>
   180b8:	mov	r0, r8
   180bc:	bl	13340 <__assert_fail@plt+0x1e48>
   180c0:	mov	r0, sl
   180c4:	bl	13340 <__assert_fail@plt+0x1e48>
   180c8:	mov	r0, r7
   180cc:	bl	13340 <__assert_fail@plt+0x1e48>
   180d0:	mvn	r0, #0
   180d4:	b	18004 <__assert_fail@plt+0x6b0c>
   180d8:	ldr	r3, [r4, #92]	; 0x5c
   180dc:	cmp	r3, #1
   180e0:	movgt	r5, #1
   180e4:	bgt	17f90 <__assert_fail@plt+0x6a98>
   180e8:	b	17f84 <__assert_fail@plt+0x6a8c>
   180ec:	mvn	r0, #0
   180f0:	b	18004 <__assert_fail@plt+0x6b0c>
   180f4:	mvn	r0, #0
   180f8:	b	18004 <__assert_fail@plt+0x6b0c>
   180fc:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   18100:	ldrb	r3, [r1, #24]
   18104:	cmp	r3, #16
   18108:	beq	18148 <__assert_fail@plt+0x6c50>
   1810c:	push	{r4, r5, r6, lr}
   18110:	mov	r4, r1
   18114:	mov	r5, r0
   18118:	str	r1, [r4, #12]
   1811c:	add	r3, r1, #20
   18120:	ldm	r3, {r1, r2}
   18124:	bl	17f14 <__assert_fail@plt+0x6a1c>
   18128:	str	r0, [r4, #28]
   1812c:	cmn	r0, #1
   18130:	beq	18190 <__assert_fail@plt+0x6c98>
   18134:	ldrb	r3, [r4, #24]
   18138:	cmp	r3, #12
   1813c:	beq	18164 <__assert_fail@plt+0x6c6c>
   18140:	mov	r0, #0
   18144:	pop	{r4, r5, r6, pc}
   18148:	ldr	r3, [r1, #4]
   1814c:	ldr	r2, [r3, #12]
   18150:	str	r2, [r1, #12]
   18154:	ldr	r3, [r3, #28]
   18158:	str	r3, [r1, #28]
   1815c:	mov	r0, #0
   18160:	bx	lr
   18164:	ldr	r3, [r5]
   18168:	ldr	r2, [r4, #20]
   1816c:	add	r0, r3, r0, lsl #3
   18170:	ldr	r3, [r0, #4]
   18174:	ldr	r1, [pc, #28]	; 18198 <__assert_fail@plt+0x6ca0>
   18178:	and	r2, r2, r1
   1817c:	bic	r3, r3, r1, lsl #8
   18180:	orr	r3, r3, r2, lsl #8
   18184:	str	r3, [r0, #4]
   18188:	mov	r0, #0
   1818c:	pop	{r4, r5, r6, pc}
   18190:	mov	r0, #12
   18194:	pop	{r4, r5, r6, pc}
   18198:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1819c:	push	{r4, r5, r6, r7, r8, lr}
   181a0:	mov	r4, r0
   181a4:	mov	r5, r1
   181a8:	mov	r7, r2
   181ac:	lsl	r6, r1, #3
   181b0:	ldr	r3, [r0]
   181b4:	add	r3, r3, r6
   181b8:	ldm	r3, {r1, r2}
   181bc:	bl	17f14 <__assert_fail@plt+0x6a1c>
   181c0:	cmn	r0, #1
   181c4:	popeq	{r4, r5, r6, r7, r8, pc}
   181c8:	lsl	r1, r0, #3
   181cc:	ldr	r2, [r4]
   181d0:	add	r2, r2, r1
   181d4:	ldr	r3, [r2, #4]
   181d8:	ldr	ip, [pc, #96]	; 18240 <__assert_fail@plt+0x6d48>
   181dc:	and	r7, r7, ip
   181e0:	lsl	ip, ip, #8
   181e4:	bic	r3, r3, ip
   181e8:	orr	r3, r3, r7, lsl #8
   181ec:	str	r3, [r2, #4]
   181f0:	ldr	r3, [r4]
   181f4:	add	lr, r3, r1
   181f8:	add	r6, r3, r6
   181fc:	ldr	r2, [r6, #4]
   18200:	lsl	r6, r2, #14
   18204:	ldr	r3, [lr, #4]
   18208:	lsl	r2, r3, #14
   1820c:	lsr	r2, r2, #22
   18210:	orr	r2, r2, r6, lsr #22
   18214:	bic	r3, r3, ip
   18218:	orr	r3, r3, r2, lsl #8
   1821c:	str	r3, [lr, #4]
   18220:	ldr	r3, [r4]
   18224:	add	r1, r3, r1
   18228:	ldrb	r3, [r1, #6]
   1822c:	orr	r3, r3, #4
   18230:	strb	r3, [r1, #6]
   18234:	ldr	r3, [r4, #16]
   18238:	str	r5, [r3, r0, lsl #2]
   1823c:	pop	{r4, r5, r6, r7, r8, pc}
   18240:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18244:	push	{r4, lr}
   18248:	mov	r4, r0
   1824c:	ldr	r0, [r0, #24]
   18250:	bl	13340 <__assert_fail@plt+0x1e48>
   18254:	ldr	r0, [r4, #36]	; 0x24
   18258:	bl	13340 <__assert_fail@plt+0x1e48>
   1825c:	ldr	r3, [r4, #40]	; 0x28
   18260:	add	r2, r4, #4
   18264:	cmp	r3, r2
   18268:	beq	1827c <__assert_fail@plt+0x6d84>
   1826c:	ldr	r0, [r3, #8]
   18270:	bl	13340 <__assert_fail@plt+0x1e48>
   18274:	ldr	r0, [r4, #40]	; 0x28
   18278:	bl	13340 <__assert_fail@plt+0x1e48>
   1827c:	ldr	r0, [r4, #12]
   18280:	bl	13340 <__assert_fail@plt+0x1e48>
   18284:	ldr	r0, [r4, #48]	; 0x30
   18288:	bl	13340 <__assert_fail@plt+0x1e48>
   1828c:	ldr	r0, [r4, #44]	; 0x2c
   18290:	bl	13340 <__assert_fail@plt+0x1e48>
   18294:	mov	r0, r4
   18298:	bl	13340 <__assert_fail@plt+0x1e48>
   1829c:	pop	{r4, pc}
   182a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182a4:	sub	sp, sp, #20
   182a8:	mov	ip, #0
   182ac:	str	ip, [r0]
   182b0:	ldr	r5, [r2, #4]
   182b4:	cmp	r5, ip
   182b8:	beq	18584 <__assert_fail@plt+0x708c>
   182bc:	add	r8, r3, r5
   182c0:	ble	182dc <__assert_fail@plt+0x6de4>
   182c4:	ldr	ip, [r2, #8]
   182c8:	add	r5, ip, r5, lsl #2
   182cc:	ldr	lr, [ip], #4
   182d0:	add	r8, r8, lr
   182d4:	cmp	r5, ip
   182d8:	bne	182cc <__assert_fail@plt+0x6dd4>
   182dc:	mov	r4, r3
   182e0:	mov	r7, r2
   182e4:	mov	r9, r1
   182e8:	str	r0, [sp, #12]
   182ec:	ldr	r3, [r1, #68]	; 0x44
   182f0:	and	r3, r3, r8
   182f4:	add	r3, r3, r3, lsl #1
   182f8:	lsl	r3, r3, #2
   182fc:	ldr	r2, [r1, #32]
   18300:	add	r1, r2, r3
   18304:	ldr	fp, [r2, r3]
   18308:	cmp	fp, #0
   1830c:	ble	18364 <__assert_fail@plt+0x6e6c>
   18310:	ldr	sl, [r1, #8]
   18314:	sub	sl, sl, #4
   18318:	mov	r5, #0
   1831c:	b	1832c <__assert_fail@plt+0x6e34>
   18320:	add	r5, r5, #1
   18324:	cmp	r5, fp
   18328:	beq	18364 <__assert_fail@plt+0x6e6c>
   1832c:	ldr	r6, [sl, #4]!
   18330:	ldr	r3, [r6]
   18334:	cmp	r3, r8
   18338:	bne	18320 <__assert_fail@plt+0x6e28>
   1833c:	ldrb	r3, [r6, #52]	; 0x34
   18340:	and	r3, r3, #15
   18344:	cmp	r4, r3
   18348:	bne	18320 <__assert_fail@plt+0x6e28>
   1834c:	mov	r1, r7
   18350:	ldr	r0, [r6, #40]	; 0x28
   18354:	bl	15638 <__assert_fail@plt+0x4140>
   18358:	cmp	r0, #0
   1835c:	beq	18320 <__assert_fail@plt+0x6e28>
   18360:	b	1856c <__assert_fail@plt+0x7074>
   18364:	mov	r1, #1
   18368:	mov	r0, #56	; 0x38
   1836c:	bl	236d0 <__assert_fail@plt+0x121d8>
   18370:	subs	r6, r0, #0
   18374:	beq	183e4 <__assert_fail@plt+0x6eec>
   18378:	add	fp, r6, #4
   1837c:	mov	r1, r7
   18380:	mov	r0, fp
   18384:	bl	16ae8 <__assert_fail@plt+0x55f0>
   18388:	cmp	r0, #0
   1838c:	bne	183dc <__assert_fail@plt+0x6ee4>
   18390:	ldrb	r2, [r6, #52]	; 0x34
   18394:	and	r3, r4, #15
   18398:	bic	r2, r2, #15
   1839c:	orr	r3, r3, r2
   183a0:	strb	r3, [r6, #52]	; 0x34
   183a4:	str	fp, [r6, #40]	; 0x28
   183a8:	ldr	r3, [r7, #4]
   183ac:	cmp	r3, #0
   183b0:	ble	18554 <__assert_fail@plt+0x705c>
   183b4:	mov	sl, #0
   183b8:	mov	r5, sl
   183bc:	and	r3, r4, #4
   183c0:	str	r3, [sp, #4]
   183c4:	and	r3, r4, #2
   183c8:	str	r3, [sp]
   183cc:	and	r3, r4, #1
   183d0:	str	r8, [sp, #8]
   183d4:	mov	r8, r3
   183d8:	b	184a0 <__assert_fail@plt+0x6fa8>
   183dc:	mov	r0, r6
   183e0:	bl	13340 <__assert_fail@plt+0x1e48>
   183e4:	mov	r3, #12
   183e8:	ldr	r2, [sp, #12]
   183ec:	str	r3, [r2]
   183f0:	mov	r6, #0
   183f4:	b	1856c <__assert_fail@plt+0x7074>
   183f8:	mov	r0, #12
   183fc:	bl	23720 <__assert_fail@plt+0x12228>
   18400:	cmp	r0, #0
   18404:	beq	18430 <__assert_fail@plt+0x6f38>
   18408:	str	r0, [r6, #40]	; 0x28
   1840c:	mov	r1, r7
   18410:	bl	16ae8 <__assert_fail@plt+0x55f0>
   18414:	cmp	r0, #0
   18418:	bne	1843c <__assert_fail@plt+0x6f44>
   1841c:	ldrb	r3, [r6, #52]	; 0x34
   18420:	orr	r3, r3, #128	; 0x80
   18424:	strb	r3, [r6, #52]	; 0x34
   18428:	mov	sl, #0
   1842c:	b	18534 <__assert_fail@plt+0x703c>
   18430:	mov	r0, r6
   18434:	bl	18244 <__assert_fail@plt+0x6d4c>
   18438:	b	183e4 <__assert_fail@plt+0x6eec>
   1843c:	mov	r0, r6
   18440:	bl	18244 <__assert_fail@plt+0x6d4c>
   18444:	b	183e4 <__assert_fail@plt+0x6eec>
   18448:	tst	r4, #2
   1844c:	beq	18458 <__assert_fail@plt+0x6f60>
   18450:	cmp	r8, #0
   18454:	bne	18480 <__assert_fail@plt+0x6f88>
   18458:	tst	r4, #16
   1845c:	beq	1846c <__assert_fail@plt+0x6f74>
   18460:	ldr	r3, [sp]
   18464:	cmp	r3, #0
   18468:	beq	18480 <__assert_fail@plt+0x6f88>
   1846c:	tst	r4, #64	; 0x40
   18470:	beq	18490 <__assert_fail@plt+0x6f98>
   18474:	ldr	r3, [sp, #4]
   18478:	cmp	r3, #0
   1847c:	bne	18490 <__assert_fail@plt+0x6f98>
   18480:	sub	r1, r5, sl
   18484:	mov	r0, fp
   18488:	bl	15744 <__assert_fail@plt+0x424c>
   1848c:	add	sl, sl, #1
   18490:	add	r5, r5, #1
   18494:	ldr	r3, [r7, #4]
   18498:	cmp	r5, r3
   1849c:	bge	18550 <__assert_fail@plt+0x7058>
   184a0:	ldr	r3, [r7, #8]
   184a4:	ldr	r2, [r3, r5, lsl #2]
   184a8:	ldr	r3, [r9]
   184ac:	add	r3, r3, r2, lsl #3
   184b0:	ldrb	r2, [r3, #4]
   184b4:	ldr	r4, [r3, #4]
   184b8:	lsl	r4, r4, #14
   184bc:	lsrs	r4, r4, #22
   184c0:	moveq	r1, #1
   184c4:	movne	r1, #0
   184c8:	cmp	r2, #1
   184cc:	movne	r1, #0
   184d0:	andeq	r1, r1, #1
   184d4:	cmp	r1, #0
   184d8:	bne	18490 <__assert_fail@plt+0x6f98>
   184dc:	ldrb	r1, [r6, #52]	; 0x34
   184e0:	ldrb	r3, [r3, #6]
   184e4:	lsr	r3, r3, #4
   184e8:	orr	r3, r3, r1, lsr #5
   184ec:	and	r3, r3, #1
   184f0:	bic	r1, r1, #32
   184f4:	orr	r3, r1, r3, lsl #5
   184f8:	strb	r3, [r6, #52]	; 0x34
   184fc:	cmp	r2, #2
   18500:	uxtbeq	r3, r3
   18504:	orreq	r3, r3, #16
   18508:	strbeq	r3, [r6, #52]	; 0x34
   1850c:	beq	18520 <__assert_fail@plt+0x7028>
   18510:	cmp	r2, #4
   18514:	ldrbeq	r3, [r6, #52]	; 0x34
   18518:	orreq	r3, r3, #64	; 0x40
   1851c:	strbeq	r3, [r6, #52]	; 0x34
   18520:	cmp	r4, #0
   18524:	beq	18490 <__assert_fail@plt+0x6f98>
   18528:	ldr	r3, [r6, #40]	; 0x28
   1852c:	cmp	fp, r3
   18530:	beq	183f8 <__assert_fail@plt+0x6f00>
   18534:	tst	r4, #1
   18538:	beq	18448 <__assert_fail@plt+0x6f50>
   1853c:	cmp	r8, #0
   18540:	beq	18480 <__assert_fail@plt+0x6f88>
   18544:	tst	r4, #2
   18548:	bne	18480 <__assert_fail@plt+0x6f88>
   1854c:	b	18458 <__assert_fail@plt+0x6f60>
   18550:	ldr	r8, [sp, #8]
   18554:	mov	r2, r8
   18558:	mov	r1, r6
   1855c:	mov	r0, r9
   18560:	bl	1668c <__assert_fail@plt+0x5194>
   18564:	cmp	r0, #0
   18568:	bne	18578 <__assert_fail@plt+0x7080>
   1856c:	mov	r0, r6
   18570:	add	sp, sp, #20
   18574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18578:	mov	r0, r6
   1857c:	bl	18244 <__assert_fail@plt+0x6d4c>
   18580:	b	183e4 <__assert_fail@plt+0x6eec>
   18584:	mov	r6, #0
   18588:	b	1856c <__assert_fail@plt+0x7074>
   1858c:	push	{r4, r5, r6, lr}
   18590:	ldr	r5, [r0]
   18594:	ldr	r0, [r5, #56]	; 0x38
   18598:	cmp	r0, #0
   1859c:	beq	185b4 <__assert_fail@plt+0x70bc>
   185a0:	ldr	r4, [r0]
   185a4:	bl	13340 <__assert_fail@plt+0x1e48>
   185a8:	mov	r0, r4
   185ac:	cmp	r4, #0
   185b0:	bne	185a0 <__assert_fail@plt+0x70a8>
   185b4:	mov	r4, #0
   185b8:	str	r4, [r5, #56]	; 0x38
   185bc:	mov	r3, #31
   185c0:	str	r3, [r5, #64]	; 0x40
   185c4:	str	r4, [r5, #52]	; 0x34
   185c8:	ldr	r0, [r5, #16]
   185cc:	bl	13340 <__assert_fail@plt+0x1e48>
   185d0:	str	r4, [r5, #16]
   185d4:	pop	{r4, r5, r6, pc}
   185d8:	push	{r4, lr}
   185dc:	mov	r4, r0
   185e0:	ldr	r0, [r0, #8]
   185e4:	bl	13340 <__assert_fail@plt+0x1e48>
   185e8:	ldr	r0, [r4, #12]
   185ec:	bl	13340 <__assert_fail@plt+0x1e48>
   185f0:	ldrb	r3, [r4, #75]	; 0x4b
   185f4:	cmp	r3, #0
   185f8:	popeq	{r4, pc}
   185fc:	ldr	r0, [r4, #4]
   18600:	bl	13340 <__assert_fail@plt+0x1e48>
   18604:	pop	{r4, pc}
   18608:	push	{r4, r5, r6, r7, r8, lr}
   1860c:	mov	r6, r0
   18610:	ldr	r3, [r0]
   18614:	cmp	r3, #0
   18618:	beq	18648 <__assert_fail@plt+0x7150>
   1861c:	ldr	r3, [r0, #8]
   18620:	cmp	r3, #0
   18624:	beq	18648 <__assert_fail@plt+0x7150>
   18628:	mov	r4, #0
   1862c:	ldr	r0, [r6]
   18630:	add	r0, r0, r4, lsl #3
   18634:	bl	17ec4 <__assert_fail@plt+0x69cc>
   18638:	add	r4, r4, #1
   1863c:	ldr	r3, [r6, #8]
   18640:	cmp	r3, r4
   18644:	bhi	1862c <__assert_fail@plt+0x7134>
   18648:	ldr	r0, [r6, #12]
   1864c:	bl	13340 <__assert_fail@plt+0x1e48>
   18650:	ldr	r3, [r6, #8]
   18654:	cmp	r3, #0
   18658:	beq	186c8 <__assert_fail@plt+0x71d0>
   1865c:	mov	r4, #0
   18660:	mov	r5, r4
   18664:	b	1867c <__assert_fail@plt+0x7184>
   18668:	add	r5, r5, #1
   1866c:	add	r4, r4, #12
   18670:	ldr	r3, [r6, #8]
   18674:	cmp	r3, r5
   18678:	bls	186c8 <__assert_fail@plt+0x71d0>
   1867c:	ldr	r3, [r6, #24]
   18680:	cmp	r3, #0
   18684:	beq	18694 <__assert_fail@plt+0x719c>
   18688:	add	r3, r3, r4
   1868c:	ldr	r0, [r3, #8]
   18690:	bl	13340 <__assert_fail@plt+0x1e48>
   18694:	ldr	r3, [r6, #28]
   18698:	cmp	r3, #0
   1869c:	beq	186ac <__assert_fail@plt+0x71b4>
   186a0:	add	r3, r3, r4
   186a4:	ldr	r0, [r3, #8]
   186a8:	bl	13340 <__assert_fail@plt+0x1e48>
   186ac:	ldr	r3, [r6, #20]
   186b0:	cmp	r3, #0
   186b4:	beq	18668 <__assert_fail@plt+0x7170>
   186b8:	add	r3, r3, r4
   186bc:	ldr	r0, [r3, #8]
   186c0:	bl	13340 <__assert_fail@plt+0x1e48>
   186c4:	b	18668 <__assert_fail@plt+0x7170>
   186c8:	ldr	r0, [r6, #20]
   186cc:	bl	13340 <__assert_fail@plt+0x1e48>
   186d0:	ldr	r0, [r6, #24]
   186d4:	bl	13340 <__assert_fail@plt+0x1e48>
   186d8:	ldr	r0, [r6, #28]
   186dc:	bl	13340 <__assert_fail@plt+0x1e48>
   186e0:	ldr	r0, [r6]
   186e4:	bl	13340 <__assert_fail@plt+0x1e48>
   186e8:	ldr	r3, [r6, #32]
   186ec:	cmp	r3, #0
   186f0:	beq	1874c <__assert_fail@plt+0x7254>
   186f4:	mov	r7, #0
   186f8:	mov	r8, r7
   186fc:	ldr	r3, [r6, #32]
   18700:	add	r5, r3, r7
   18704:	ldr	r3, [r3, r7]
   18708:	cmp	r3, #0
   1870c:	ble	18730 <__assert_fail@plt+0x7238>
   18710:	mov	r4, #0
   18714:	ldr	r3, [r5, #8]
   18718:	ldr	r0, [r3, r4, lsl #2]
   1871c:	bl	18244 <__assert_fail@plt+0x6d4c>
   18720:	add	r4, r4, #1
   18724:	ldr	r3, [r5]
   18728:	cmp	r3, r4
   1872c:	bgt	18714 <__assert_fail@plt+0x721c>
   18730:	ldr	r0, [r5, #8]
   18734:	bl	13340 <__assert_fail@plt+0x1e48>
   18738:	add	r8, r8, #1
   1873c:	add	r7, r7, #12
   18740:	ldr	r3, [r6, #68]	; 0x44
   18744:	cmp	r3, r8
   18748:	bcs	186fc <__assert_fail@plt+0x7204>
   1874c:	ldr	r0, [r6, #32]
   18750:	bl	13340 <__assert_fail@plt+0x1e48>
   18754:	ldr	r0, [r6, #60]	; 0x3c
   18758:	ldr	r3, [pc, #28]	; 1877c <__assert_fail@plt+0x7284>
   1875c:	cmp	r0, r3
   18760:	beq	18768 <__assert_fail@plt+0x7270>
   18764:	bl	13340 <__assert_fail@plt+0x1e48>
   18768:	ldr	r0, [r6, #132]	; 0x84
   1876c:	bl	13340 <__assert_fail@plt+0x1e48>
   18770:	mov	r0, r6
   18774:	bl	13340 <__assert_fail@plt+0x1e48>
   18778:	pop	{r4, r5, r6, r7, r8, pc}
   1877c:	andeq	r4, r2, ip, lsl #29
   18780:	push	{r4, r5, r6, r7, r8, lr}
   18784:	mov	r8, r0
   18788:	ldr	r3, [r0, #124]	; 0x7c
   1878c:	cmp	r3, #0
   18790:	ble	1881c <__assert_fail@plt+0x7324>
   18794:	mov	r7, #0
   18798:	b	187b4 <__assert_fail@plt+0x72bc>
   1879c:	mov	r0, r6
   187a0:	bl	13340 <__assert_fail@plt+0x1e48>
   187a4:	add	r7, r7, #1
   187a8:	ldr	r3, [r8, #124]	; 0x7c
   187ac:	cmp	r3, r7
   187b0:	ble	1881c <__assert_fail@plt+0x7324>
   187b4:	ldr	r3, [r8, #132]	; 0x84
   187b8:	ldr	r6, [r3, r7, lsl #2]
   187bc:	ldr	r3, [r6, #16]
   187c0:	cmp	r3, #0
   187c4:	ble	187f4 <__assert_fail@plt+0x72fc>
   187c8:	mov	r4, #0
   187cc:	ldr	r3, [r6, #20]
   187d0:	ldr	r5, [r3, r4, lsl #2]
   187d4:	ldr	r0, [r5, #16]
   187d8:	bl	13340 <__assert_fail@plt+0x1e48>
   187dc:	mov	r0, r5
   187e0:	bl	13340 <__assert_fail@plt+0x1e48>
   187e4:	add	r4, r4, #1
   187e8:	ldr	r3, [r6, #16]
   187ec:	cmp	r3, r4
   187f0:	bgt	187cc <__assert_fail@plt+0x72d4>
   187f4:	ldr	r0, [r6, #20]
   187f8:	bl	13340 <__assert_fail@plt+0x1e48>
   187fc:	ldr	r3, [r6, #8]
   18800:	cmp	r3, #0
   18804:	beq	1879c <__assert_fail@plt+0x72a4>
   18808:	ldr	r0, [r3, #8]
   1880c:	bl	13340 <__assert_fail@plt+0x1e48>
   18810:	ldr	r0, [r6, #8]
   18814:	bl	13340 <__assert_fail@plt+0x1e48>
   18818:	b	1879c <__assert_fail@plt+0x72a4>
   1881c:	mov	r3, #0
   18820:	str	r3, [r8, #124]	; 0x7c
   18824:	str	r3, [r8, #108]	; 0x6c
   18828:	pop	{r4, r5, r6, r7, r8, pc}
   1882c:	push	{r4, r5, r6, lr}
   18830:	mov	r4, r0
   18834:	ldr	r0, [r0, #8]
   18838:	add	r5, r4, #12
   1883c:	cmp	r0, r5
   18840:	beq	18848 <__assert_fail@plt+0x7350>
   18844:	bl	13340 <__assert_fail@plt+0x1e48>
   18848:	mov	r3, #0
   1884c:	str	r3, [r4]
   18850:	mov	r3, #16
   18854:	str	r3, [r4, #4]
   18858:	str	r5, [r4, #8]
   1885c:	pop	{r4, r5, r6, pc}
   18860:	push	{r4, r5, r6, lr}
   18864:	subs	r5, r0, #0
   18868:	beq	188bc <__assert_fail@plt+0x73c4>
   1886c:	ldr	r3, [r5]
   18870:	cmp	r3, #0
   18874:	ble	188b4 <__assert_fail@plt+0x73bc>
   18878:	mov	r4, #0
   1887c:	mov	r6, r4
   18880:	ldr	r3, [r5, #8]
   18884:	add	r3, r3, r4
   18888:	ldr	r0, [r3, #20]
   1888c:	bl	13340 <__assert_fail@plt+0x1e48>
   18890:	ldr	r3, [r5, #8]
   18894:	add	r3, r3, r4
   18898:	ldr	r0, [r3, #8]
   1889c:	bl	13340 <__assert_fail@plt+0x1e48>
   188a0:	add	r6, r6, #1
   188a4:	add	r4, r4, #24
   188a8:	ldr	r3, [r5]
   188ac:	cmp	r3, r6
   188b0:	bgt	18880 <__assert_fail@plt+0x7388>
   188b4:	ldr	r0, [r5, #8]
   188b8:	bl	13340 <__assert_fail@plt+0x1e48>
   188bc:	mov	r0, #0
   188c0:	pop	{r4, r5, r6, pc}
   188c4:	push	{r4, r5, r6, lr}
   188c8:	ldr	r2, [r1, #28]
   188cc:	ldrb	r3, [r1, #24]
   188d0:	sub	r3, r3, #2
   188d4:	cmp	r3, #14
   188d8:	ldrls	pc, [pc, r3, lsl #2]
   188dc:	b	18a18 <__assert_fail@plt+0x7520>
   188e0:	andeq	r8, r1, r0, lsr sl
   188e4:	andeq	r8, r1, r8, lsl sl
   188e8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188ec:	andeq	r8, r1, r8, lsl sl
   188f0:	andeq	r8, r1, r8, lsl sl
   188f4:	andeq	r8, r1, r8, lsl sl
   188f8:			; <UNDEFINED> instruction: 0x000189bc
   188fc:			; <UNDEFINED> instruction: 0x000189bc
   18900:	andeq	r8, r1, ip, lsl r9
   18904:	andeq	r8, r1, ip, lsl r9
   18908:			; <UNDEFINED> instruction: 0x000189bc
   1890c:	andeq	r8, r1, r8, lsl sl
   18910:	andeq	r8, r1, r8, lsl sl
   18914:	andeq	r8, r1, r8, lsl sl
   18918:	andeq	r8, r1, r0, lsr sl
   1891c:	ldrb	r3, [r0, #88]	; 0x58
   18920:	orr	r3, r3, #1
   18924:	strb	r3, [r0, #88]	; 0x58
   18928:	ldr	r3, [r1, #4]
   1892c:	cmp	r3, #0
   18930:	ldrne	r3, [r3, #12]
   18934:	ldreq	r3, [r1, #16]
   18938:	ldr	r4, [r3, #28]
   1893c:	ldr	r3, [r1, #8]
   18940:	cmp	r3, #0
   18944:	ldrne	r3, [r3, #12]
   18948:	ldreq	r3, [r1, #16]
   1894c:	ldr	r5, [r3, #28]
   18950:	add	r2, r2, r2, lsl #1
   18954:	lsl	r2, r2, #2
   18958:	ldr	r3, [r0, #20]
   1895c:	add	r6, r3, r2
   18960:	mov	r1, #2
   18964:	str	r1, [r3, r2]
   18968:	mov	r0, #8
   1896c:	bl	23720 <__assert_fail@plt+0x12228>
   18970:	str	r0, [r6, #8]
   18974:	cmp	r0, #0
   18978:	beq	18a38 <__assert_fail@plt+0x7540>
   1897c:	cmp	r4, r5
   18980:	beq	189a8 <__assert_fail@plt+0x74b0>
   18984:	mov	r3, #2
   18988:	str	r3, [r6, #4]
   1898c:	cmp	r4, r5
   18990:	strlt	r4, [r0]
   18994:	strlt	r5, [r0, #4]
   18998:	strge	r5, [r0]
   1899c:	strge	r4, [r0, #4]
   189a0:	mov	r0, #0
   189a4:	pop	{r4, r5, r6, pc}
   189a8:	mov	r3, #1
   189ac:	str	r3, [r6, #4]
   189b0:	str	r4, [r0]
   189b4:	mov	r0, #0
   189b8:	pop	{r4, r5, r6, pc}
   189bc:	ldr	r1, [r1, #16]
   189c0:	add	r2, r2, r2, lsl #1
   189c4:	ldr	r0, [r0, #20]
   189c8:	ldr	r1, [r1, #28]
   189cc:	add	r0, r0, r2, lsl #2
   189d0:	bl	16618 <__assert_fail@plt+0x5120>
   189d4:	pop	{r4, r5, r6, pc}
   189d8:	ldr	r3, [r1, #16]
   189dc:	ldr	ip, [r3, #28]
   189e0:	ldr	r3, [r0, #12]
   189e4:	str	ip, [r3, r2, lsl #2]
   189e8:	ldrb	r3, [r1, #24]
   189ec:	cmp	r3, #4
   189f0:	beq	189fc <__assert_fail@plt+0x7504>
   189f4:	mov	r0, #0
   189f8:	pop	{r4, r5, r6, pc}
   189fc:	ldr	r1, [r0, #12]
   18a00:	add	ip, r2, r2, lsl #1
   18a04:	ldr	r0, [r0, #20]
   18a08:	ldr	r1, [r1, r2, lsl #2]
   18a0c:	add	r0, r0, ip, lsl #2
   18a10:	bl	16618 <__assert_fail@plt+0x5120>
   18a14:	pop	{r4, r5, r6, pc}
   18a18:	ldr	r3, [r1, #16]
   18a1c:	ldr	r1, [r3, #28]
   18a20:	ldr	r3, [r0, #12]
   18a24:	str	r1, [r3, r2, lsl #2]
   18a28:	mov	r0, #0
   18a2c:	pop	{r4, r5, r6, pc}
   18a30:	mov	r0, #0
   18a34:	pop	{r4, r5, r6, pc}
   18a38:	mov	r0, #12
   18a3c:	pop	{r4, r5, r6, pc}
   18a40:	push	{r4, r5, r6, lr}
   18a44:	mov	r4, r0
   18a48:	mov	r5, r1
   18a4c:	ldr	r1, [r0]
   18a50:	cmp	r1, #0
   18a54:	beq	18a80 <__assert_fail@plt+0x7588>
   18a58:	ldr	r3, [r0, #4]
   18a5c:	cmp	r3, #0
   18a60:	bne	18a94 <__assert_fail@plt+0x759c>
   18a64:	ldr	r3, [r0, #8]
   18a68:	str	r5, [r3]
   18a6c:	ldr	r3, [r0, #4]
   18a70:	add	r3, r3, #1
   18a74:	str	r3, [r0, #4]
   18a78:	mov	r0, #1
   18a7c:	pop	{r4, r5, r6, pc}
   18a80:	mov	r1, r5
   18a84:	bl	16618 <__assert_fail@plt+0x5120>
   18a88:	clz	r0, r0
   18a8c:	lsr	r0, r0, #5
   18a90:	pop	{r4, r5, r6, pc}
   18a94:	cmp	r1, r3
   18a98:	beq	18af4 <__assert_fail@plt+0x75fc>
   18a9c:	ldr	r1, [r4, #8]
   18aa0:	ldr	r3, [r1]
   18aa4:	cmp	r5, r3
   18aa8:	bge	18b18 <__assert_fail@plt+0x7620>
   18aac:	ldr	r3, [r4, #4]
   18ab0:	cmp	r3, #0
   18ab4:	ble	18ad8 <__assert_fail@plt+0x75e0>
   18ab8:	lsl	r2, r3, #2
   18abc:	ldr	r1, [r4, #8]
   18ac0:	add	r0, r1, r2
   18ac4:	ldr	r0, [r0, #-4]
   18ac8:	str	r0, [r1, r2]
   18acc:	sub	r2, r2, #4
   18ad0:	subs	r3, r3, #1
   18ad4:	bne	18abc <__assert_fail@plt+0x75c4>
   18ad8:	ldr	r2, [r4, #8]
   18adc:	str	r5, [r2, r3, lsl #2]
   18ae0:	ldr	r3, [r4, #4]
   18ae4:	add	r3, r3, #1
   18ae8:	str	r3, [r4, #4]
   18aec:	mov	r0, #1
   18af0:	pop	{r4, r5, r6, pc}
   18af4:	lsl	r3, r1, #1
   18af8:	str	r3, [r0]
   18afc:	lsl	r1, r1, #3
   18b00:	ldr	r0, [r0, #8]
   18b04:	bl	23750 <__assert_fail@plt+0x12258>
   18b08:	cmp	r0, #0
   18b0c:	beq	18b58 <__assert_fail@plt+0x7660>
   18b10:	str	r0, [r4, #8]
   18b14:	b	18a9c <__assert_fail@plt+0x75a4>
   18b18:	ldr	r3, [r4, #4]
   18b1c:	sub	r0, r3, #-1073741823	; 0xc0000001
   18b20:	lsl	r2, r0, #2
   18b24:	ldr	r0, [r1, r0, lsl #2]
   18b28:	cmp	r5, r0
   18b2c:	bge	18ad8 <__assert_fail@plt+0x75e0>
   18b30:	add	r2, r2, #4
   18b34:	str	r0, [r1, r2]
   18b38:	sub	r3, r3, #1
   18b3c:	ldr	r1, [r4, #8]
   18b40:	add	r0, r1, r2
   18b44:	ldr	r0, [r0, #-8]
   18b48:	sub	r2, r2, #4
   18b4c:	cmp	r5, r0
   18b50:	blt	18b34 <__assert_fail@plt+0x763c>
   18b54:	b	18ad8 <__assert_fail@plt+0x75e0>
   18b58:	mov	r0, #0
   18b5c:	pop	{r4, r5, r6, pc}
   18b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b64:	sub	sp, sp, #20
   18b68:	mov	r4, r0
   18b6c:	mov	r5, r1
   18b70:	mov	r6, r2
   18b74:	mov	r9, r3
   18b78:	ldr	r7, [sp, #56]	; 0x38
   18b7c:	mov	r8, #0
   18b80:	b	18d54 <__assert_fail@plt+0x785c>
   18b84:	lsl	fp, r5, #2
   18b88:	ldr	r3, [r4, #12]
   18b8c:	ldr	r5, [r3, r5, lsl #2]
   18b90:	str	r6, [sp, #12]
   18b94:	add	r6, r6, r6, lsl #1
   18b98:	lsl	sl, r6, #2
   18b9c:	ldr	r3, [r4, #20]
   18ba0:	add	r3, r3, sl
   18ba4:	str	r8, [r3, #4]
   18ba8:	mov	r2, r7
   18bac:	mov	r1, r5
   18bb0:	mov	r0, r4
   18bb4:	bl	1819c <__assert_fail@plt+0x6ca4>
   18bb8:	mov	r6, r0
   18bbc:	cmn	r0, #1
   18bc0:	beq	18e44 <__assert_fail@plt+0x794c>
   18bc4:	ldr	r3, [r4, #12]
   18bc8:	ldr	r2, [r3, fp]
   18bcc:	ldr	r1, [sp, #12]
   18bd0:	str	r2, [r3, r1, lsl #2]
   18bd4:	ldr	r0, [r4, #20]
   18bd8:	mov	r1, r6
   18bdc:	add	r0, r0, sl
   18be0:	bl	18a40 <__assert_fail@plt+0x7548>
   18be4:	cmp	r0, #0
   18be8:	bne	18d54 <__assert_fail@plt+0x785c>
   18bec:	mov	r0, #12
   18bf0:	b	18e70 <__assert_fail@plt+0x7978>
   18bf4:	ldr	r3, [r4, #12]
   18bf8:	ldr	r2, [r3, r5, lsl #2]
   18bfc:	str	r2, [r3, r6, lsl #2]
   18c00:	mov	r0, #0
   18c04:	b	18e70 <__assert_fail@plt+0x7978>
   18c08:	ldr	r2, [r2, #8]
   18c0c:	ldr	fp, [r2]
   18c10:	add	sl, r6, r6, lsl #1
   18c14:	lsl	sl, sl, #2
   18c18:	add	r3, r3, sl
   18c1c:	str	r8, [r3, #4]
   18c20:	cmp	r5, r9
   18c24:	movne	r3, #0
   18c28:	moveq	r3, #1
   18c2c:	cmp	r5, r6
   18c30:	moveq	r3, #0
   18c34:	cmp	r3, #0
   18c38:	bne	18c8c <__assert_fail@plt+0x7794>
   18c3c:	ldr	r3, [r4]
   18c40:	add	ip, r3, ip
   18c44:	ldr	r3, [ip, #4]
   18c48:	lsl	r3, r3, #14
   18c4c:	orr	r7, r7, r3, lsr #22
   18c50:	mov	r2, r7
   18c54:	mov	r1, fp
   18c58:	mov	r0, r4
   18c5c:	bl	1819c <__assert_fail@plt+0x6ca4>
   18c60:	mov	r6, r0
   18c64:	cmn	r0, #1
   18c68:	beq	18e4c <__assert_fail@plt+0x7954>
   18c6c:	ldr	r0, [r4, #20]
   18c70:	mov	r1, r6
   18c74:	add	r0, r0, sl
   18c78:	bl	18a40 <__assert_fail@plt+0x7548>
   18c7c:	cmp	r0, #0
   18c80:	beq	18cac <__assert_fail@plt+0x77b4>
   18c84:	mov	r5, fp
   18c88:	b	18d54 <__assert_fail@plt+0x785c>
   18c8c:	ldr	r0, [r4, #20]
   18c90:	mov	r1, fp
   18c94:	add	r0, r0, sl
   18c98:	bl	18a40 <__assert_fail@plt+0x7548>
   18c9c:	cmp	r0, #0
   18ca0:	moveq	r0, #12
   18ca4:	movne	r0, #0
   18ca8:	b	18e70 <__assert_fail@plt+0x7978>
   18cac:	mov	r0, #12
   18cb0:	b	18e70 <__assert_fail@plt+0x7978>
   18cb4:	sub	r1, r1, #1
   18cb8:	add	r3, r3, ip
   18cbc:	add	r3, lr, r3
   18cc0:	ldrb	r6, [r3, #6]
   18cc4:	cmp	r1, #0
   18cc8:	movle	r0, #0
   18ccc:	movgt	r0, #1
   18cd0:	ands	r0, r0, r6, lsr #2
   18cd4:	beq	18de4 <__assert_fail@plt+0x78ec>
   18cd8:	ldr	r0, [r2, #-4]!
   18cdc:	cmp	r5, r0
   18ce0:	bne	18cb4 <__assert_fail@plt+0x77bc>
   18ce4:	ldr	r0, [r3, #4]
   18ce8:	lsl	r0, r0, #14
   18cec:	cmp	r7, r0, lsr #22
   18cf0:	bne	18cb4 <__assert_fail@plt+0x77bc>
   18cf4:	cmn	r1, #1
   18cf8:	beq	18de4 <__assert_fail@plt+0x78ec>
   18cfc:	ldr	r0, [r4, #20]
   18d00:	add	r0, r0, fp
   18d04:	bl	18a40 <__assert_fail@plt+0x7548>
   18d08:	cmp	r0, #0
   18d0c:	beq	18e64 <__assert_fail@plt+0x796c>
   18d10:	ldr	r3, [r4, #20]
   18d14:	add	sl, r3, sl
   18d18:	ldr	r3, [sl, #8]
   18d1c:	ldr	r5, [r3, #4]
   18d20:	mov	r2, r7
   18d24:	mov	r1, r5
   18d28:	mov	r0, r4
   18d2c:	bl	1819c <__assert_fail@plt+0x6ca4>
   18d30:	mov	r6, r0
   18d34:	cmn	r0, #1
   18d38:	beq	18e6c <__assert_fail@plt+0x7974>
   18d3c:	ldr	r0, [r4, #20]
   18d40:	mov	r1, r6
   18d44:	add	r0, r0, fp
   18d48:	bl	18a40 <__assert_fail@plt+0x7548>
   18d4c:	cmp	r0, #0
   18d50:	beq	18e3c <__assert_fail@plt+0x7944>
   18d54:	lsl	ip, r5, #3
   18d58:	ldr	r3, [r4]
   18d5c:	add	r3, r3, ip
   18d60:	ldrb	r3, [r3, #4]
   18d64:	cmp	r3, #4
   18d68:	beq	18b84 <__assert_fail@plt+0x768c>
   18d6c:	ldr	r3, [r4, #20]
   18d70:	add	sl, r5, r5, lsl #1
   18d74:	lsl	sl, sl, #2
   18d78:	add	r2, r3, sl
   18d7c:	ldr	r1, [r2, #4]
   18d80:	cmp	r1, #0
   18d84:	beq	18bf4 <__assert_fail@plt+0x76fc>
   18d88:	cmp	r1, #1
   18d8c:	beq	18c08 <__assert_fail@plt+0x7710>
   18d90:	ldr	r2, [r2, #8]
   18d94:	ldr	r5, [r2]
   18d98:	add	r6, r6, r6, lsl #1
   18d9c:	lsl	fp, r6, #2
   18da0:	add	r3, r3, fp
   18da4:	str	r8, [r3, #4]
   18da8:	ldr	ip, [r4, #8]
   18dac:	sub	r1, ip, #1
   18db0:	ldr	lr, [r4]
   18db4:	add	r3, lr, r1, lsl #3
   18db8:	ldrb	r0, [r3, #6]
   18dbc:	cmp	r1, #0
   18dc0:	movle	r2, #0
   18dc4:	movgt	r2, #1
   18dc8:	ands	r2, r2, r0, lsr #2
   18dcc:	beq	18de4 <__assert_fail@plt+0x78ec>
   18dd0:	ldr	r2, [r4, #16]
   18dd4:	add	r2, r2, ip, lsl #2
   18dd8:	rsb	ip, r3, ip, lsl #3
   18ddc:	sub	ip, ip, #16
   18de0:	b	18cd8 <__assert_fail@plt+0x77e0>
   18de4:	mov	r2, r7
   18de8:	mov	r1, r5
   18dec:	mov	r0, r4
   18df0:	bl	1819c <__assert_fail@plt+0x6ca4>
   18df4:	mov	r6, r0
   18df8:	cmn	r0, #1
   18dfc:	beq	18e54 <__assert_fail@plt+0x795c>
   18e00:	ldr	r0, [r4, #20]
   18e04:	mov	r1, r6
   18e08:	add	r0, r0, fp
   18e0c:	bl	18a40 <__assert_fail@plt+0x7548>
   18e10:	cmp	r0, #0
   18e14:	beq	18e5c <__assert_fail@plt+0x7964>
   18e18:	str	r7, [sp]
   18e1c:	mov	r3, r9
   18e20:	mov	r2, r6
   18e24:	mov	r1, r5
   18e28:	mov	r0, r4
   18e2c:	bl	18b60 <__assert_fail@plt+0x7668>
   18e30:	cmp	r0, #0
   18e34:	beq	18d10 <__assert_fail@plt+0x7818>
   18e38:	b	18e70 <__assert_fail@plt+0x7978>
   18e3c:	mov	r0, #12
   18e40:	b	18e70 <__assert_fail@plt+0x7978>
   18e44:	mov	r0, #12
   18e48:	b	18e70 <__assert_fail@plt+0x7978>
   18e4c:	mov	r0, #12
   18e50:	b	18e70 <__assert_fail@plt+0x7978>
   18e54:	mov	r0, #12
   18e58:	b	18e70 <__assert_fail@plt+0x7978>
   18e5c:	mov	r0, #12
   18e60:	b	18e70 <__assert_fail@plt+0x7978>
   18e64:	mov	r0, #12
   18e68:	b	18e70 <__assert_fail@plt+0x7978>
   18e6c:	mov	r0, #12
   18e70:	add	sp, sp, #20
   18e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e78:	push	{r4, r5, r6, r7, r8, r9, lr}
   18e7c:	sub	sp, sp, #12
   18e80:	mov	r6, r0
   18e84:	mov	r7, r1
   18e88:	mov	r4, r2
   18e8c:	mov	r9, r3
   18e90:	ldr	r8, [sp, #40]	; 0x28
   18e94:	b	18ee0 <__assert_fail@plt+0x79e8>
   18e98:	mov	r1, r4
   18e9c:	mov	r0, r7
   18ea0:	bl	18a40 <__assert_fail@plt+0x7548>
   18ea4:	cmp	r0, #0
   18ea8:	beq	18f70 <__assert_fail@plt+0x7a78>
   18eac:	add	r5, r5, r5, lsl #1
   18eb0:	lsl	r5, r5, #2
   18eb4:	ldr	r3, [r6, #20]
   18eb8:	add	r3, r3, r5
   18ebc:	ldr	r2, [r3, #4]
   18ec0:	cmp	r2, #0
   18ec4:	beq	18f7c <__assert_fail@plt+0x7a84>
   18ec8:	cmp	r2, #2
   18ecc:	beq	18f40 <__assert_fail@plt+0x7a48>
   18ed0:	ldr	r3, [r6, #20]
   18ed4:	add	r5, r3, r5
   18ed8:	ldr	r3, [r5, #8]
   18edc:	ldr	r4, [r3]
   18ee0:	mov	r1, r4
   18ee4:	mov	r0, r7
   18ee8:	bl	156ac <__assert_fail@plt+0x41b4>
   18eec:	cmp	r0, #0
   18ef0:	bne	18f68 <__assert_fail@plt+0x7a70>
   18ef4:	mov	r5, r4
   18ef8:	ldr	r3, [r6]
   18efc:	add	r2, r3, r4, lsl #3
   18f00:	ldrb	r2, [r2, #4]
   18f04:	cmp	r2, r8
   18f08:	bne	18e98 <__assert_fail@plt+0x79a0>
   18f0c:	ldr	r3, [r3, r4, lsl #3]
   18f10:	cmp	r9, r3
   18f14:	bne	18e98 <__assert_fail@plt+0x79a0>
   18f18:	cmp	r2, #9
   18f1c:	movne	r0, #0
   18f20:	bne	18f74 <__assert_fail@plt+0x7a7c>
   18f24:	mov	r1, r4
   18f28:	mov	r0, r7
   18f2c:	bl	18a40 <__assert_fail@plt+0x7548>
   18f30:	cmp	r0, #0
   18f34:	moveq	r0, #12
   18f38:	movne	r0, #0
   18f3c:	b	18f74 <__assert_fail@plt+0x7a7c>
   18f40:	ldr	r3, [r3, #8]
   18f44:	ldr	r2, [r3, #4]
   18f48:	str	r8, [sp]
   18f4c:	mov	r3, r9
   18f50:	mov	r1, r7
   18f54:	mov	r0, r6
   18f58:	bl	18e78 <__assert_fail@plt+0x7980>
   18f5c:	cmp	r0, #0
   18f60:	beq	18ed0 <__assert_fail@plt+0x79d8>
   18f64:	b	18f74 <__assert_fail@plt+0x7a7c>
   18f68:	mov	r0, #0
   18f6c:	b	18f74 <__assert_fail@plt+0x7a7c>
   18f70:	mov	r0, #12
   18f74:	add	sp, sp, #12
   18f78:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18f7c:	mov	r0, #0
   18f80:	b	18f74 <__assert_fail@plt+0x7a7c>
   18f84:	push	{r4, r5, r6, lr}
   18f88:	subs	r6, r1, #0
   18f8c:	beq	1910c <__assert_fail@plt+0x7c14>
   18f90:	ldr	r2, [r6, #4]
   18f94:	cmp	r2, #0
   18f98:	beq	19114 <__assert_fail@plt+0x7c1c>
   18f9c:	mov	r4, r0
   18fa0:	ldr	r1, [r0]
   18fa4:	ldr	r3, [r0, #4]
   18fa8:	add	r0, r3, r2, lsl #1
   18fac:	cmp	r1, r0
   18fb0:	blt	19010 <__assert_fail@plt+0x7b18>
   18fb4:	cmp	r3, #0
   18fb8:	beq	19044 <__assert_fail@plt+0x7b4c>
   18fbc:	ldr	r2, [r6, #4]
   18fc0:	add	r5, r3, r2, lsl #1
   18fc4:	sub	r2, r2, #1
   18fc8:	sub	r3, r3, #1
   18fcc:	cmp	r2, #0
   18fd0:	cmpge	r3, #0
   18fd4:	blt	19068 <__assert_fail@plt+0x7b70>
   18fd8:	ldr	ip, [r4, #8]
   18fdc:	ldr	r0, [ip, r3, lsl #2]
   18fe0:	ldr	r1, [r6, #8]
   18fe4:	ldr	r1, [r1, r2, lsl #2]
   18fe8:	cmp	r0, r1
   18fec:	subeq	r2, r2, #1
   18ff0:	subeq	r3, r3, #1
   18ff4:	beq	18fcc <__assert_fail@plt+0x7ad4>
   18ff8:	cmp	r0, r1
   18ffc:	sublt	r5, r5, #1
   19000:	sublt	r2, r2, #1
   19004:	strlt	r1, [ip, r5, lsl #2]
   19008:	subge	r3, r3, #1
   1900c:	b	18fcc <__assert_fail@plt+0x7ad4>
   19010:	add	r1, r2, r1
   19014:	lsl	r5, r1, #1
   19018:	lsl	r1, r1, #3
   1901c:	ldr	r0, [r4, #8]
   19020:	bl	23750 <__assert_fail@plt+0x12258>
   19024:	cmp	r0, #0
   19028:	beq	1911c <__assert_fail@plt+0x7c24>
   1902c:	str	r0, [r4, #8]
   19030:	str	r5, [r4]
   19034:	ldr	r3, [r4, #4]
   19038:	cmp	r3, #0
   1903c:	bne	18fbc <__assert_fail@plt+0x7ac4>
   19040:	b	19048 <__assert_fail@plt+0x7b50>
   19044:	ldr	r0, [r4, #8]
   19048:	ldr	r3, [r6, #4]
   1904c:	str	r3, [r4, #4]
   19050:	ldr	r2, [r6, #4]
   19054:	lsl	r2, r2, #2
   19058:	ldr	r1, [r6, #8]
   1905c:	bl	11234 <memcpy@plt>
   19060:	mov	r0, #0
   19064:	pop	{r4, r5, r6, pc}
   19068:	cmp	r2, #0
   1906c:	blt	1908c <__assert_fail@plt+0x7b94>
   19070:	add	r2, r2, #1
   19074:	sub	r5, r5, r2
   19078:	ldr	r0, [r4, #8]
   1907c:	lsl	r2, r2, #2
   19080:	ldr	r1, [r6, #8]
   19084:	add	r0, r0, r5, lsl #2
   19088:	bl	11234 <memcpy@plt>
   1908c:	ldr	r3, [r4, #4]
   19090:	ldr	r2, [r6, #4]
   19094:	add	r2, r3, r2, lsl #1
   19098:	sub	lr, r2, #1
   1909c:	subs	r2, r2, r5
   190a0:	beq	19124 <__assert_fail@plt+0x7c2c>
   190a4:	sub	r1, r3, #1
   190a8:	add	r3, r3, r2
   190ac:	str	r3, [r4, #4]
   190b0:	b	190c4 <__assert_fail@plt+0x7bcc>
   190b4:	add	ip, r1, r2
   190b8:	str	r0, [r3, ip, lsl #2]
   190bc:	subs	r1, r1, #1
   190c0:	bmi	190f4 <__assert_fail@plt+0x7bfc>
   190c4:	ldr	r3, [r4, #8]
   190c8:	ldr	ip, [r3, lr, lsl #2]
   190cc:	ldr	r0, [r3, r1, lsl #2]
   190d0:	cmp	ip, r0
   190d4:	ble	190b4 <__assert_fail@plt+0x7bbc>
   190d8:	sub	lr, lr, #1
   190dc:	add	r0, r1, r2
   190e0:	str	ip, [r3, r0, lsl #2]
   190e4:	subs	r2, r2, #1
   190e8:	bne	190c4 <__assert_fail@plt+0x7bcc>
   190ec:	mov	r0, #0
   190f0:	pop	{r4, r5, r6, pc}
   190f4:	ldr	r0, [r4, #8]
   190f8:	lsl	r2, r2, #2
   190fc:	add	r1, r0, r5, lsl #2
   19100:	bl	11234 <memcpy@plt>
   19104:	mov	r0, #0
   19108:	pop	{r4, r5, r6, pc}
   1910c:	mov	r0, #0
   19110:	pop	{r4, r5, r6, pc}
   19114:	mov	r0, #0
   19118:	pop	{r4, r5, r6, pc}
   1911c:	mov	r0, #12
   19120:	pop	{r4, r5, r6, pc}
   19124:	mov	r0, #0
   19128:	pop	{r4, r5, r6, pc}
   1912c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19130:	sub	sp, sp, #44	; 0x2c
   19134:	mov	sl, r0
   19138:	mov	r5, r1
   1913c:	mov	r4, r2
   19140:	str	r3, [sp, #12]
   19144:	add	r8, r2, r2, lsl #1
   19148:	lsl	r8, r8, #2
   1914c:	ldr	r3, [r1, #20]
   19150:	add	r3, r3, r8
   19154:	ldr	r1, [r3, #4]
   19158:	add	r1, r1, #1
   1915c:	add	r0, sp, #28
   19160:	bl	1665c <__assert_fail@plt+0x5164>
   19164:	subs	fp, r0, #0
   19168:	bne	19330 <__assert_fail@plt+0x7e38>
   1916c:	mov	r9, r8
   19170:	ldr	r3, [sp, #32]
   19174:	add	r2, r3, #1
   19178:	str	r2, [sp, #32]
   1917c:	ldr	r2, [sp, #36]	; 0x24
   19180:	str	r4, [r2, r3, lsl #2]
   19184:	ldr	r3, [r5, #24]
   19188:	add	r3, r3, r8
   1918c:	mvn	r2, #0
   19190:	str	r2, [r3, #4]
   19194:	ldr	r2, [r5]
   19198:	lsl	r6, r4, #3
   1919c:	add	r1, r2, r6
   191a0:	ldr	r0, [r1, #4]
   191a4:	ldr	r3, [pc, #424]	; 19354 <__assert_fail@plt+0x7e5c>
   191a8:	and	r3, r3, r0
   191ac:	cmp	r3, #0
   191b0:	beq	191e0 <__assert_fail@plt+0x7ce8>
   191b4:	ldr	r3, [r5, #20]
   191b8:	add	r3, r3, r8
   191bc:	ldr	r0, [r3, #4]
   191c0:	cmp	r0, #0
   191c4:	beq	1933c <__assert_fail@plt+0x7e44>
   191c8:	ldr	r3, [r3, #8]
   191cc:	ldr	r3, [r3]
   191d0:	add	r2, r2, r3, lsl #3
   191d4:	ldrb	r3, [r2, #6]
   191d8:	tst	r3, #4
   191dc:	beq	1921c <__assert_fail@plt+0x7d24>
   191e0:	ldr	r3, [r5]
   191e4:	add	r6, r3, r6
   191e8:	ldrb	r3, [r6, #4]
   191ec:	tst	r3, #8
   191f0:	beq	1933c <__assert_fail@plt+0x7e44>
   191f4:	ldr	r3, [r5, #20]
   191f8:	add	r3, r3, r8
   191fc:	ldr	r2, [r3, #4]
   19200:	cmp	r2, #0
   19204:	ble	1933c <__assert_fail@plt+0x7e44>
   19208:	mov	r2, #0
   1920c:	str	r2, [sp, #8]
   19210:	mov	r6, r2
   19214:	add	r7, sp, #16
   19218:	b	19288 <__assert_fail@plt+0x7d90>
   1921c:	ldr	r3, [r1, #4]
   19220:	lsl	r3, r3, #14
   19224:	lsr	r3, r3, #22
   19228:	str	r3, [sp]
   1922c:	mov	r3, r4
   19230:	mov	r2, r4
   19234:	mov	r1, r4
   19238:	mov	r0, r5
   1923c:	bl	18b60 <__assert_fail@plt+0x7668>
   19240:	cmp	r0, #0
   19244:	beq	191e0 <__assert_fail@plt+0x7ce8>
   19248:	mov	fp, r0
   1924c:	b	19330 <__assert_fail@plt+0x7e38>
   19250:	mov	r3, #0
   19254:	mov	r1, r5
   19258:	mov	r0, r7
   1925c:	bl	1912c <__assert_fail@plt+0x7c34>
   19260:	cmp	r0, #0
   19264:	beq	192c4 <__assert_fail@plt+0x7dcc>
   19268:	mov	fp, r0
   1926c:	b	19330 <__assert_fail@plt+0x7e38>
   19270:	add	r6, r6, #1
   19274:	ldr	r3, [r5, #20]
   19278:	add	r3, r3, r9
   1927c:	ldr	r2, [r3, #4]
   19280:	cmp	r2, r6
   19284:	ble	19300 <__assert_fail@plt+0x7e08>
   19288:	ldr	r3, [r3, #8]
   1928c:	ldr	r2, [r3, r6, lsl #2]
   19290:	add	r4, r2, r2, lsl #1
   19294:	lsl	r4, r4, #2
   19298:	ldr	r3, [r5, #24]
   1929c:	add	r3, r3, r4
   192a0:	ldr	r1, [r3, #4]
   192a4:	cmn	r1, #1
   192a8:	moveq	r3, #1
   192ac:	streq	r3, [sp, #8]
   192b0:	beq	19270 <__assert_fail@plt+0x7d78>
   192b4:	cmp	r1, #0
   192b8:	beq	19250 <__assert_fail@plt+0x7d58>
   192bc:	ldm	r3, {r0, r1, r2}
   192c0:	stm	r7, {r0, r1, r2}
   192c4:	mov	r1, r7
   192c8:	add	r0, sp, #28
   192cc:	bl	18f84 <__assert_fail@plt+0x7a8c>
   192d0:	cmp	r0, #0
   192d4:	bne	19268 <__assert_fail@plt+0x7d70>
   192d8:	ldr	r3, [r5, #24]
   192dc:	add	r4, r3, r4
   192e0:	ldr	r3, [r4, #4]
   192e4:	cmp	r3, #0
   192e8:	bne	19270 <__assert_fail@plt+0x7d78>
   192ec:	ldr	r0, [sp, #24]
   192f0:	bl	13340 <__assert_fail@plt+0x1e48>
   192f4:	mov	r3, #1
   192f8:	str	r3, [sp, #8]
   192fc:	b	19270 <__assert_fail@plt+0x7d78>
   19300:	ldr	r3, [sp, #12]
   19304:	eor	r3, r3, #1
   19308:	ldr	r2, [sp, #8]
   1930c:	tst	r2, r3
   19310:	beq	1933c <__assert_fail@plt+0x7e44>
   19314:	ldr	r3, [r5, #24]
   19318:	add	r8, r3, r8
   1931c:	mov	r3, #0
   19320:	str	r3, [r8, #4]
   19324:	add	r3, sp, #40	; 0x28
   19328:	ldmdb	r3, {r0, r1, r2}
   1932c:	stm	sl, {r0, r1, r2}
   19330:	mov	r0, fp
   19334:	add	sp, sp, #44	; 0x2c
   19338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1933c:	ldr	r3, [r5, #24]
   19340:	add	r8, r3, r8
   19344:	add	r3, sp, #40	; 0x28
   19348:	ldmdb	r3, {r0, r1, r2}
   1934c:	stm	r8, {r0, r1, r2}
   19350:	b	19324 <__assert_fail@plt+0x7e2c>
   19354:	andeq	pc, r3, r0, lsl #30
   19358:	push	{r4, r5, r6, lr}
   1935c:	mov	r5, r0
   19360:	cmp	r1, #0
   19364:	blt	193a8 <__assert_fail@plt+0x7eb0>
   19368:	ldr	r3, [r0, #48]	; 0x30
   1936c:	cmp	r1, r3
   19370:	beq	193b0 <__assert_fail@plt+0x7eb8>
   19374:	ldr	r3, [r0, #80]	; 0x50
   19378:	cmp	r3, #1
   1937c:	ble	1941c <__assert_fail@plt+0x7f24>
   19380:	ldr	r3, [r0, #8]
   19384:	add	r3, r3, r1, lsl #2
   19388:	ldr	r4, [r3], #-4
   1938c:	cmn	r4, #1
   19390:	bne	193c4 <__assert_fail@plt+0x7ecc>
   19394:	sub	r1, r1, #1
   19398:	cmn	r1, #1
   1939c:	bne	19388 <__assert_fail@plt+0x7e90>
   193a0:	ldr	r0, [r5, #60]	; 0x3c
   193a4:	pop	{r4, r5, r6, pc}
   193a8:	ldr	r0, [r0, #60]	; 0x3c
   193ac:	pop	{r4, r5, r6, pc}
   193b0:	and	r2, r2, #2
   193b4:	cmp	r2, #0
   193b8:	movne	r0, #8
   193bc:	moveq	r0, #10
   193c0:	pop	{r4, r5, r6, pc}
   193c4:	ldrb	r3, [r5, #78]	; 0x4e
   193c8:	cmp	r3, #0
   193cc:	bne	193e0 <__assert_fail@plt+0x7ee8>
   193d0:	cmp	r4, #10
   193d4:	beq	19408 <__assert_fail@plt+0x7f10>
   193d8:	mov	r0, #0
   193dc:	pop	{r4, r5, r6, pc}
   193e0:	mov	r0, r4
   193e4:	bl	113fc <iswalnum@plt>
   193e8:	adds	r3, r0, #0
   193ec:	movne	r3, #1
   193f0:	cmp	r4, #95	; 0x5f
   193f4:	orreq	r3, r3, #1
   193f8:	cmp	r3, #0
   193fc:	beq	193d0 <__assert_fail@plt+0x7ed8>
   19400:	mov	r0, #1
   19404:	pop	{r4, r5, r6, pc}
   19408:	ldrb	r0, [r5, #77]	; 0x4d
   1940c:	cmp	r0, #0
   19410:	movne	r0, #2
   19414:	moveq	r0, #0
   19418:	pop	{r4, r5, r6, pc}
   1941c:	ldr	r3, [r0, #4]
   19420:	ldrb	r2, [r3, r1]
   19424:	asr	r0, r2, #5
   19428:	ldr	r3, [r5, #68]	; 0x44
   1942c:	and	r1, r2, #31
   19430:	ldr	r3, [r3, r0, lsl #2]
   19434:	lsr	r3, r3, r1
   19438:	tst	r3, #1
   1943c:	bne	19464 <__assert_fail@plt+0x7f6c>
   19440:	cmp	r2, #10
   19444:	beq	19450 <__assert_fail@plt+0x7f58>
   19448:	mov	r0, #0
   1944c:	pop	{r4, r5, r6, pc}
   19450:	ldrb	r0, [r5, #77]	; 0x4d
   19454:	cmp	r0, #0
   19458:	movne	r0, #2
   1945c:	moveq	r0, #0
   19460:	pop	{r4, r5, r6, pc}
   19464:	mov	r0, #1
   19468:	pop	{r4, r5, r6, pc}
   1946c:	push	{r4, lr}
   19470:	ldr	r3, [r0, #4]
   19474:	ldrb	ip, [r3, r2]
   19478:	ldrb	r3, [r1, #4]
   1947c:	sub	r3, r3, #1
   19480:	cmp	r3, #6
   19484:	ldrls	pc, [pc, r3, lsl #2]
   19488:	b	195a8 <__assert_fail@plt+0x80b0>
   1948c:	andeq	r9, r1, r8, lsr #9
   19490:	andeq	r9, r1, r8, lsr #11
   19494:			; <UNDEFINED> instruction: 0x000194bc
   19498:	andeq	r9, r1, r8, lsr #11
   1949c:	andeq	r9, r1, r4, lsr r5
   194a0:	andeq	r9, r1, r8, lsr #11
   194a4:	andeq	r9, r1, ip, lsr #10
   194a8:	ldrb	r3, [r1]
   194ac:	cmp	r3, ip
   194b0:	beq	194d8 <__assert_fail@plt+0x7fe0>
   194b4:	mov	r0, #0
   194b8:	pop	{r4, pc}
   194bc:	lsr	lr, ip, #5
   194c0:	ldr	r3, [r1]
   194c4:	and	ip, ip, #31
   194c8:	ldr	r3, [r3, lr, lsl #2]
   194cc:	lsr	ip, r3, ip
   194d0:	tst	ip, #1
   194d4:	beq	195b0 <__assert_fail@plt+0x80b8>
   194d8:	ldr	ip, [r1, #4]
   194dc:	ldr	r3, [pc, #260]	; 195e8 <__assert_fail@plt+0x80f0>
   194e0:	and	r3, r3, ip
   194e4:	cmp	r3, #0
   194e8:	beq	195c0 <__assert_fail@plt+0x80c8>
   194ec:	mov	r3, r2
   194f0:	mov	r4, r1
   194f4:	ldr	r2, [r0, #88]	; 0x58
   194f8:	mov	r1, r3
   194fc:	bl	19358 <__assert_fail@plt+0x7e60>
   19500:	ldr	r3, [r4, #4]
   19504:	lsl	r3, r3, #14
   19508:	lsr	r3, r3, #22
   1950c:	tst	r3, #4
   19510:	beq	19574 <__assert_fail@plt+0x807c>
   19514:	tst	r0, #1
   19518:	beq	195c8 <__assert_fail@plt+0x80d0>
   1951c:	tst	r3, #8
   19520:	beq	19584 <__assert_fail@plt+0x808c>
   19524:	mov	r0, #0
   19528:	pop	{r4, pc}
   1952c:	tst	ip, #128	; 0x80
   19530:	bne	195b8 <__assert_fail@plt+0x80c0>
   19534:	cmp	ip, #10
   19538:	beq	1955c <__assert_fail@plt+0x8064>
   1953c:	cmp	ip, #0
   19540:	bne	194d8 <__assert_fail@plt+0x7fe0>
   19544:	ldr	r3, [r0, #84]	; 0x54
   19548:	ldr	r3, [r3, #128]	; 0x80
   1954c:	tst	r3, #128	; 0x80
   19550:	beq	194d8 <__assert_fail@plt+0x7fe0>
   19554:	mov	r0, #0
   19558:	pop	{r4, pc}
   1955c:	ldr	r3, [r0, #84]	; 0x54
   19560:	ldr	r3, [r3, #128]	; 0x80
   19564:	tst	r3, #64	; 0x40
   19568:	bne	194d8 <__assert_fail@plt+0x7fe0>
   1956c:	mov	r0, #0
   19570:	pop	{r4, pc}
   19574:	tst	r3, #8
   19578:	beq	19584 <__assert_fail@plt+0x808c>
   1957c:	tst	r0, #1
   19580:	bne	195d0 <__assert_fail@plt+0x80d8>
   19584:	tst	r3, #32
   19588:	beq	19594 <__assert_fail@plt+0x809c>
   1958c:	tst	r0, #2
   19590:	beq	195d8 <__assert_fail@plt+0x80e0>
   19594:	tst	r3, #128	; 0x80
   19598:	beq	195e0 <__assert_fail@plt+0x80e8>
   1959c:	lsr	r0, r0, #3
   195a0:	and	r0, r0, #1
   195a4:	pop	{r4, pc}
   195a8:	mov	r0, #0
   195ac:	pop	{r4, pc}
   195b0:	mov	r0, #0
   195b4:	pop	{r4, pc}
   195b8:	mov	r0, #0
   195bc:	pop	{r4, pc}
   195c0:	mov	r0, #1
   195c4:	pop	{r4, pc}
   195c8:	mov	r0, #0
   195cc:	pop	{r4, pc}
   195d0:	mov	r0, #0
   195d4:	pop	{r4, pc}
   195d8:	mov	r0, #0
   195dc:	pop	{r4, pc}
   195e0:	mov	r0, #1
   195e4:	pop	{r4, pc}
   195e8:	andeq	pc, r3, r0, lsl #30
   195ec:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195f0:	ldr	r7, [r0, #84]	; 0x54
   195f4:	ldr	r3, [r1, #4]
   195f8:	cmp	r3, #0
   195fc:	ble	196e4 <__assert_fail@plt+0x81ec>
   19600:	mov	r9, r2
   19604:	mov	r6, r1
   19608:	mov	r8, r0
   1960c:	mov	r4, #0
   19610:	b	19644 <__assert_fail@plt+0x814c>
   19614:	lsl	sl, r1, #1
   19618:	lsl	r1, r1, #3
   1961c:	bl	23750 <__assert_fail@plt+0x12258>
   19620:	cmp	r0, #0
   19624:	beq	196ec <__assert_fail@plt+0x81f4>
   19628:	str	r0, [r8, #132]	; 0x84
   1962c:	str	sl, [r8, #128]	; 0x80
   19630:	b	19690 <__assert_fail@plt+0x8198>
   19634:	add	r4, r4, #1
   19638:	ldr	r3, [r6, #4]
   1963c:	cmp	r3, r4
   19640:	ble	196dc <__assert_fail@plt+0x81e4>
   19644:	ldr	r3, [r6, #8]
   19648:	ldr	r5, [r3, r4, lsl #2]
   1964c:	ldr	r3, [r7]
   19650:	add	r2, r3, r5, lsl #3
   19654:	ldrb	r2, [r2, #4]
   19658:	cmp	r2, #8
   1965c:	bne	19634 <__assert_fail@plt+0x813c>
   19660:	ldr	r3, [r3, r5, lsl #3]
   19664:	cmp	r3, #31
   19668:	bgt	19634 <__assert_fail@plt+0x813c>
   1966c:	ldr	r2, [r7, #80]	; 0x50
   19670:	lsr	r3, r2, r3
   19674:	tst	r3, #1
   19678:	beq	19634 <__assert_fail@plt+0x813c>
   1967c:	ldr	r0, [r8, #132]	; 0x84
   19680:	ldr	r1, [r8, #128]	; 0x80
   19684:	ldr	r3, [r8, #124]	; 0x7c
   19688:	cmp	r1, r3
   1968c:	beq	19614 <__assert_fail@plt+0x811c>
   19690:	ldr	fp, [r8, #124]	; 0x7c
   19694:	ldr	sl, [r8, #132]	; 0x84
   19698:	mov	r1, #24
   1969c:	mov	r0, #1
   196a0:	bl	236d0 <__assert_fail@plt+0x121d8>
   196a4:	str	r0, [sl, fp, lsl #2]
   196a8:	ldr	r2, [r8, #124]	; 0x7c
   196ac:	ldr	r3, [r8, #132]	; 0x84
   196b0:	ldr	r3, [r3, r2, lsl #2]
   196b4:	cmp	r3, #0
   196b8:	beq	196ec <__assert_fail@plt+0x81f4>
   196bc:	str	r5, [r3, #4]
   196c0:	ldr	r2, [r8, #132]	; 0x84
   196c4:	ldr	r3, [r8, #124]	; 0x7c
   196c8:	add	r1, r3, #1
   196cc:	str	r1, [r8, #124]	; 0x7c
   196d0:	ldr	r3, [r2, r3, lsl #2]
   196d4:	str	r9, [r3]
   196d8:	b	19634 <__assert_fail@plt+0x813c>
   196dc:	mov	r0, #0
   196e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196e4:	mov	r0, #0
   196e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196ec:	mov	r0, #12
   196f0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196f4:	push	{r4, r5, r6, lr}
   196f8:	mov	r4, r0
   196fc:	mov	r5, r1
   19700:	ldr	r6, [r0, #104]	; 0x68
   19704:	ldr	r3, [r0, #36]	; 0x24
   19708:	cmp	r3, r1
   1970c:	bgt	1971c <__assert_fail@plt+0x8224>
   19710:	ldr	r2, [r0, #48]	; 0x30
   19714:	cmp	r3, r2
   19718:	blt	19734 <__assert_fail@plt+0x823c>
   1971c:	ldr	r3, [r4, #28]
   19720:	cmp	r5, r3
   19724:	blt	19748 <__assert_fail@plt+0x8250>
   19728:	ldr	r2, [r4, #48]	; 0x30
   1972c:	cmp	r3, r2
   19730:	bge	19748 <__assert_fail@plt+0x8250>
   19734:	add	r1, r5, #1
   19738:	mov	r0, r4
   1973c:	bl	1733c <__assert_fail@plt+0x5e44>
   19740:	cmp	r0, #0
   19744:	popne	{r4, r5, r6, pc}
   19748:	cmp	r6, r5
   1974c:	bge	19778 <__assert_fail@plt+0x8280>
   19750:	sub	r2, r5, r6
   19754:	add	r6, r6, #1
   19758:	ldr	r0, [r4, #100]	; 0x64
   1975c:	lsl	r2, r2, #2
   19760:	mov	r1, #0
   19764:	add	r0, r0, r6, lsl #2
   19768:	bl	11414 <memset@plt>
   1976c:	str	r5, [r4, #104]	; 0x68
   19770:	mov	r0, #0
   19774:	pop	{r4, r5, r6, pc}
   19778:	mov	r0, #0
   1977c:	pop	{r4, r5, r6, pc}
   19780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19784:	sub	sp, sp, #28
   19788:	mov	r7, r0
   1978c:	mov	r8, r1
   19790:	mov	r5, r2
   19794:	mov	r4, r3
   19798:	ldr	r1, [r1, #4]
   1979c:	add	r0, sp, #12
   197a0:	bl	1665c <__assert_fail@plt+0x5164>
   197a4:	subs	r9, r0, #0
   197a8:	bne	198a0 <__assert_fail@plt+0x83a8>
   197ac:	ldr	r3, [r8, #4]
   197b0:	cmp	r3, #0
   197b4:	ble	19884 <__assert_fail@plt+0x838c>
   197b8:	mov	r6, #0
   197bc:	b	19820 <__assert_fail@plt+0x8328>
   197c0:	add	r3, r3, #1
   197c4:	cmp	fp, r3
   197c8:	beq	19854 <__assert_fail@plt+0x835c>
   197cc:	ldr	r0, [ip, #4]!
   197d0:	add	lr, sl, r0, lsl #3
   197d4:	ldrb	lr, [lr, #4]
   197d8:	cmp	r4, lr
   197dc:	bne	197c0 <__assert_fail@plt+0x82c8>
   197e0:	ldr	lr, [sl, r0, lsl #3]
   197e4:	cmp	r5, lr
   197e8:	bne	197c0 <__assert_fail@plt+0x82c8>
   197ec:	cmn	r0, #1
   197f0:	beq	19854 <__assert_fail@plt+0x835c>
   197f4:	str	r4, [sp]
   197f8:	mov	r3, r5
   197fc:	add	r1, sp, #12
   19800:	mov	r0, r7
   19804:	bl	18e78 <__assert_fail@plt+0x7980>
   19808:	subs	sl, r0, #0
   1980c:	bne	19870 <__assert_fail@plt+0x8378>
   19810:	add	r6, r6, #1
   19814:	ldr	r3, [r8, #4]
   19818:	cmp	r3, r6
   1981c:	ble	19884 <__assert_fail@plt+0x838c>
   19820:	ldr	r3, [r8, #8]
   19824:	ldr	r2, [r3, r6, lsl #2]
   19828:	add	r3, r2, r2, lsl #1
   1982c:	ldr	r1, [r7, #24]
   19830:	add	r1, r1, r3, lsl #2
   19834:	ldr	fp, [r1, #4]
   19838:	cmp	fp, #0
   1983c:	ble	19854 <__assert_fail@plt+0x835c>
   19840:	ldr	sl, [r7]
   19844:	ldr	ip, [r1, #8]
   19848:	sub	ip, ip, #4
   1984c:	mov	r3, #0
   19850:	b	197cc <__assert_fail@plt+0x82d4>
   19854:	add	r0, sp, #12
   19858:	bl	18f84 <__assert_fail@plt+0x7a8c>
   1985c:	subs	sl, r0, #0
   19860:	beq	19810 <__assert_fail@plt+0x8318>
   19864:	ldr	r0, [sp, #20]
   19868:	bl	13340 <__assert_fail@plt+0x1e48>
   1986c:	b	19878 <__assert_fail@plt+0x8380>
   19870:	ldr	r0, [sp, #20]
   19874:	bl	13340 <__assert_fail@plt+0x1e48>
   19878:	mov	r0, sl
   1987c:	add	sp, sp, #28
   19880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19884:	ldr	r0, [r8, #8]
   19888:	bl	13340 <__assert_fail@plt+0x1e48>
   1988c:	add	r3, sp, #24
   19890:	ldmdb	r3, {r0, r1, r2}
   19894:	stm	r8, {r0, r1, r2}
   19898:	mov	sl, r9
   1989c:	b	19878 <__assert_fail@plt+0x8380>
   198a0:	mov	sl, r9
   198a4:	b	19878 <__assert_fail@plt+0x8380>
   198a8:	push	{r4, r5, r6, r7, r8, lr}
   198ac:	mov	r4, r0
   198b0:	mov	r5, r1
   198b4:	mov	r1, r2
   198b8:	ldr	r2, [r0, #88]	; 0x58
   198bc:	bl	19358 <__assert_fail@plt+0x7e60>
   198c0:	ldr	lr, [r5, #8]
   198c4:	cmp	lr, #0
   198c8:	ble	19970 <__assert_fail@plt+0x8478>
   198cc:	ldr	r3, [r4, #84]	; 0x54
   198d0:	ldr	r4, [r3]
   198d4:	ldr	ip, [r5, #12]
   198d8:	sub	ip, ip, #4
   198dc:	mov	r1, #0
   198e0:	and	r7, r0, #8
   198e4:	and	r6, r0, #2
   198e8:	and	r5, r0, #1
   198ec:	b	1992c <__assert_fail@plt+0x8434>
   198f0:	tst	r3, #8
   198f4:	beq	19900 <__assert_fail@plt+0x8408>
   198f8:	cmp	r5, #0
   198fc:	bne	19920 <__assert_fail@plt+0x8428>
   19900:	tst	r3, #32
   19904:	beq	19910 <__assert_fail@plt+0x8418>
   19908:	cmp	r6, #0
   1990c:	beq	19920 <__assert_fail@plt+0x8428>
   19910:	tst	r3, #128	; 0x80
   19914:	popeq	{r4, r5, r6, r7, r8, pc}
   19918:	cmp	r7, #0
   1991c:	popne	{r4, r5, r6, r7, r8, pc}
   19920:	add	r1, r1, #1
   19924:	cmp	lr, r1
   19928:	beq	19978 <__assert_fail@plt+0x8480>
   1992c:	ldr	r0, [ip, #4]!
   19930:	add	r2, r4, r0, lsl #3
   19934:	ldr	r3, [r2, #4]
   19938:	lsl	r3, r3, #14
   1993c:	lsr	r3, r3, #22
   19940:	ldrb	r2, [r2, #4]
   19944:	cmp	r2, #2
   19948:	bne	19920 <__assert_fail@plt+0x8428>
   1994c:	cmp	r3, #0
   19950:	popeq	{r4, r5, r6, r7, r8, pc}
   19954:	tst	r3, #4
   19958:	beq	198f0 <__assert_fail@plt+0x83f8>
   1995c:	cmp	r5, #0
   19960:	beq	19920 <__assert_fail@plt+0x8428>
   19964:	tst	r3, #8
   19968:	bne	19920 <__assert_fail@plt+0x8428>
   1996c:	b	19900 <__assert_fail@plt+0x8408>
   19970:	mov	r0, #0
   19974:	pop	{r4, r5, r6, r7, r8, pc}
   19978:	mov	r0, #0
   1997c:	pop	{r4, r5, r6, r7, r8, pc}
   19980:	push	{r4, r5, r6, r7, r8, lr}
   19984:	ldr	r7, [sp, #28]
   19988:	subs	r5, r0, #0
   1998c:	beq	19a2c <__assert_fail@plt+0x8534>
   19990:	ldr	r4, [r5]
   19994:	cmp	r4, #0
   19998:	beq	19a34 <__assert_fail@plt+0x853c>
   1999c:	mov	r0, r3
   199a0:	sub	r4, r4, #1
   199a4:	str	r4, [r5]
   199a8:	add	r4, r4, r4, lsl #1
   199ac:	lsl	r4, r4, #3
   199b0:	ldr	r3, [r5, #8]
   199b4:	ldr	r3, [r3, r4]
   199b8:	str	r3, [r1]
   199bc:	lsl	r6, r2, #3
   199c0:	ldr	r3, [r5, #8]
   199c4:	add	r3, r3, r4
   199c8:	mov	r2, r6
   199cc:	ldr	r1, [r3, #8]
   199d0:	bl	11234 <memcpy@plt>
   199d4:	ldr	r3, [r5, #8]
   199d8:	add	r3, r3, r4
   199dc:	ldr	r1, [r3, #8]
   199e0:	mov	r2, r6
   199e4:	add	r1, r1, r6
   199e8:	ldr	r0, [sp, #24]
   199ec:	bl	11234 <memcpy@plt>
   199f0:	ldr	r0, [r7, #8]
   199f4:	bl	13340 <__assert_fail@plt+0x1e48>
   199f8:	ldr	r3, [r5, #8]
   199fc:	add	r3, r3, r4
   19a00:	ldr	r0, [r3, #8]
   19a04:	bl	13340 <__assert_fail@plt+0x1e48>
   19a08:	ldr	r3, [r5, #8]
   19a0c:	add	r3, r3, r4
   19a10:	add	r3, r3, #12
   19a14:	ldm	r3, {r0, r1, r2}
   19a18:	stm	r7, {r0, r1, r2}
   19a1c:	ldr	r3, [r5, #8]
   19a20:	add	r4, r3, r4
   19a24:	ldr	r0, [r4, #4]
   19a28:	pop	{r4, r5, r6, r7, r8, pc}
   19a2c:	mvn	r0, #0
   19a30:	pop	{r4, r5, r6, r7, r8, pc}
   19a34:	mvn	r0, #0
   19a38:	pop	{r4, r5, r6, r7, r8, pc}
   19a3c:	push	{r4, r5, r6, r7, r8, lr}
   19a40:	mov	r6, r0
   19a44:	mov	r5, r1
   19a48:	mov	r4, r2
   19a4c:	mov	r8, r3
   19a50:	ldr	r3, [sp, #28]
   19a54:	tst	r3, #4194304	; 0x400000
   19a58:	beq	19a90 <__assert_fail@plt+0x8598>
   19a5c:	ldr	r1, [pc, #2780]	; 1a540 <__assert_fail@plt+0x9048>
   19a60:	ldr	r0, [sp, #24]
   19a64:	bl	111bc <strcmp@plt>
   19a68:	cmp	r0, #0
   19a6c:	beq	19ae4 <__assert_fail@plt+0x85ec>
   19a70:	ldr	r1, [pc, #2764]	; 1a544 <__assert_fail@plt+0x904c>
   19a74:	ldr	r0, [sp, #24]
   19a78:	bl	111bc <strcmp@plt>
   19a7c:	ldr	r3, [pc, #2756]	; 1a548 <__assert_fail@plt+0x9050>
   19a80:	ldr	r2, [sp, #24]
   19a84:	cmp	r0, #0
   19a88:	moveq	r2, r3
   19a8c:	str	r2, [sp, #24]
   19a90:	ldr	r3, [r8]
   19a94:	ldr	r2, [r4, #36]	; 0x24
   19a98:	cmp	r3, r2
   19a9c:	beq	19af0 <__assert_fail@plt+0x85f8>
   19aa0:	ldr	r8, [r4, #12]
   19aa4:	ldr	r7, [r4, #36]	; 0x24
   19aa8:	add	r3, r7, #1
   19aac:	str	r3, [r4, #36]	; 0x24
   19ab0:	ldr	r0, [sp, #24]
   19ab4:	bl	1118c <wctype@plt>
   19ab8:	str	r0, [r8, r7, lsl #2]
   19abc:	ldr	r1, [pc, #2696]	; 1a54c <__assert_fail@plt+0x9054>
   19ac0:	ldr	r0, [sp, #24]
   19ac4:	bl	111bc <strcmp@plt>
   19ac8:	subs	r4, r0, #0
   19acc:	bne	19bcc <__assert_fail@plt+0x86d4>
   19ad0:	cmp	r6, #0
   19ad4:	bne	19b18 <__assert_fail@plt+0x8620>
   19ad8:	bl	113a8 <__ctype_b_loc@plt>
   19adc:	mov	ip, #1
   19ae0:	b	19b7c <__assert_fail@plt+0x8684>
   19ae4:	ldr	r3, [pc, #2652]	; 1a548 <__assert_fail@plt+0x9050>
   19ae8:	str	r3, [sp, #24]
   19aec:	b	19a90 <__assert_fail@plt+0x8598>
   19af0:	lsl	r3, r3, #1
   19af4:	add	r7, r3, #1
   19af8:	lsl	r1, r7, #2
   19afc:	ldr	r0, [r4, #12]
   19b00:	bl	23750 <__assert_fail@plt+0x12258>
   19b04:	cmp	r0, #0
   19b08:	beq	1a530 <__assert_fail@plt+0x9038>
   19b0c:	str	r0, [r4, #12]
   19b10:	str	r7, [r8]
   19b14:	b	19aa0 <__assert_fail@plt+0x85a8>
   19b18:	bl	113a8 <__ctype_b_loc@plt>
   19b1c:	mov	r2, r6
   19b20:	mov	r3, #0
   19b24:	mov	r4, #1
   19b28:	b	19b3c <__assert_fail@plt+0x8644>
   19b2c:	add	r3, r3, #2
   19b30:	add	r2, r2, #1
   19b34:	cmp	r3, #512	; 0x200
   19b38:	beq	19b68 <__assert_fail@plt+0x8670>
   19b3c:	ldr	r1, [r0]
   19b40:	ldrh	r1, [r1, r3]
   19b44:	tst	r1, #8
   19b48:	beq	19b2c <__assert_fail@plt+0x8634>
   19b4c:	ldrb	r1, [r2]
   19b50:	asr	lr, r1, #5
   19b54:	and	r1, r1, #31
   19b58:	ldr	ip, [r5, lr, lsl #2]
   19b5c:	orr	r1, ip, r4, lsl r1
   19b60:	str	r1, [r5, lr, lsl #2]
   19b64:	b	19b2c <__assert_fail@plt+0x8634>
   19b68:	mov	r0, #0
   19b6c:	pop	{r4, r5, r6, r7, r8, pc}
   19b70:	add	r4, r4, #1
   19b74:	cmp	r4, #256	; 0x100
   19b78:	beq	19bc4 <__assert_fail@plt+0x86cc>
   19b7c:	ldr	r2, [r0]
   19b80:	lsl	r3, r4, #1
   19b84:	ldrh	r3, [r2, r3]
   19b88:	tst	r3, #8
   19b8c:	beq	19b70 <__assert_fail@plt+0x8678>
   19b90:	add	r3, r4, #31
   19b94:	cmp	r4, #0
   19b98:	movge	r3, r4
   19b9c:	asr	r3, r3, #5
   19ba0:	asr	r2, r4, #31
   19ba4:	lsr	r1, r2, #27
   19ba8:	add	r2, r4, r1
   19bac:	and	r2, r2, #31
   19bb0:	sub	r2, r2, r1
   19bb4:	ldr	r1, [r5, r3, lsl #2]
   19bb8:	orr	r2, r1, ip, lsl r2
   19bbc:	str	r2, [r5, r3, lsl #2]
   19bc0:	b	19b70 <__assert_fail@plt+0x8678>
   19bc4:	mov	r0, #0
   19bc8:	pop	{r4, r5, r6, r7, r8, pc}
   19bcc:	ldr	r1, [pc, #2428]	; 1a550 <__assert_fail@plt+0x9058>
   19bd0:	ldr	r0, [sp, #24]
   19bd4:	bl	111bc <strcmp@plt>
   19bd8:	subs	r4, r0, #0
   19bdc:	bne	19ca8 <__assert_fail@plt+0x87b0>
   19be0:	cmp	r6, #0
   19be4:	bne	19bf4 <__assert_fail@plt+0x86fc>
   19be8:	bl	113a8 <__ctype_b_loc@plt>
   19bec:	mov	ip, #1
   19bf0:	b	19c58 <__assert_fail@plt+0x8760>
   19bf4:	bl	113a8 <__ctype_b_loc@plt>
   19bf8:	mov	r2, r6
   19bfc:	mov	r3, #0
   19c00:	mov	r4, #1
   19c04:	b	19c18 <__assert_fail@plt+0x8720>
   19c08:	add	r3, r3, #2
   19c0c:	add	r2, r2, #1
   19c10:	cmp	r3, #512	; 0x200
   19c14:	beq	19c44 <__assert_fail@plt+0x874c>
   19c18:	ldr	r1, [r0]
   19c1c:	ldrh	r1, [r1, r3]
   19c20:	tst	r1, #2
   19c24:	beq	19c08 <__assert_fail@plt+0x8710>
   19c28:	ldrb	r1, [r2]
   19c2c:	asr	lr, r1, #5
   19c30:	and	r1, r1, #31
   19c34:	ldr	ip, [r5, lr, lsl #2]
   19c38:	orr	r1, ip, r4, lsl r1
   19c3c:	str	r1, [r5, lr, lsl #2]
   19c40:	b	19c08 <__assert_fail@plt+0x8710>
   19c44:	mov	r0, #0
   19c48:	pop	{r4, r5, r6, r7, r8, pc}
   19c4c:	add	r4, r4, #1
   19c50:	cmp	r4, #256	; 0x100
   19c54:	beq	19ca0 <__assert_fail@plt+0x87a8>
   19c58:	ldr	r2, [r0]
   19c5c:	lsl	r3, r4, #1
   19c60:	ldrh	r3, [r2, r3]
   19c64:	tst	r3, #2
   19c68:	beq	19c4c <__assert_fail@plt+0x8754>
   19c6c:	add	r3, r4, #31
   19c70:	cmp	r4, #0
   19c74:	movge	r3, r4
   19c78:	asr	r3, r3, #5
   19c7c:	asr	r2, r4, #31
   19c80:	lsr	r1, r2, #27
   19c84:	add	r2, r4, r1
   19c88:	and	r2, r2, #31
   19c8c:	sub	r2, r2, r1
   19c90:	ldr	r1, [r5, r3, lsl #2]
   19c94:	orr	r2, r1, ip, lsl r2
   19c98:	str	r2, [r5, r3, lsl #2]
   19c9c:	b	19c4c <__assert_fail@plt+0x8754>
   19ca0:	mov	r0, #0
   19ca4:	pop	{r4, r5, r6, r7, r8, pc}
   19ca8:	ldr	r1, [pc, #2196]	; 1a544 <__assert_fail@plt+0x904c>
   19cac:	ldr	r0, [sp, #24]
   19cb0:	bl	111bc <strcmp@plt>
   19cb4:	subs	r4, r0, #0
   19cb8:	bne	19d84 <__assert_fail@plt+0x888c>
   19cbc:	cmp	r6, #0
   19cc0:	bne	19cd0 <__assert_fail@plt+0x87d8>
   19cc4:	bl	113a8 <__ctype_b_loc@plt>
   19cc8:	mov	ip, #1
   19ccc:	b	19d34 <__assert_fail@plt+0x883c>
   19cd0:	bl	113a8 <__ctype_b_loc@plt>
   19cd4:	mov	r2, r6
   19cd8:	mov	r3, #0
   19cdc:	mov	r4, #1
   19ce0:	b	19cf4 <__assert_fail@plt+0x87fc>
   19ce4:	add	r3, r3, #2
   19ce8:	add	r2, r2, #1
   19cec:	cmp	r3, #512	; 0x200
   19cf0:	beq	19d20 <__assert_fail@plt+0x8828>
   19cf4:	ldr	r1, [r0]
   19cf8:	ldrh	r1, [r1, r3]
   19cfc:	tst	r1, #512	; 0x200
   19d00:	beq	19ce4 <__assert_fail@plt+0x87ec>
   19d04:	ldrb	r1, [r2]
   19d08:	asr	lr, r1, #5
   19d0c:	and	r1, r1, #31
   19d10:	ldr	ip, [r5, lr, lsl #2]
   19d14:	orr	r1, ip, r4, lsl r1
   19d18:	str	r1, [r5, lr, lsl #2]
   19d1c:	b	19ce4 <__assert_fail@plt+0x87ec>
   19d20:	mov	r0, #0
   19d24:	pop	{r4, r5, r6, r7, r8, pc}
   19d28:	add	r4, r4, #1
   19d2c:	cmp	r4, #256	; 0x100
   19d30:	beq	19d7c <__assert_fail@plt+0x8884>
   19d34:	ldr	r2, [r0]
   19d38:	lsl	r3, r4, #1
   19d3c:	ldrh	r3, [r2, r3]
   19d40:	tst	r3, #512	; 0x200
   19d44:	beq	19d28 <__assert_fail@plt+0x8830>
   19d48:	add	r3, r4, #31
   19d4c:	cmp	r4, #0
   19d50:	movge	r3, r4
   19d54:	asr	r3, r3, #5
   19d58:	asr	r2, r4, #31
   19d5c:	lsr	r1, r2, #27
   19d60:	add	r2, r4, r1
   19d64:	and	r2, r2, #31
   19d68:	sub	r2, r2, r1
   19d6c:	ldr	r1, [r5, r3, lsl #2]
   19d70:	orr	r2, r1, ip, lsl r2
   19d74:	str	r2, [r5, r3, lsl #2]
   19d78:	b	19d28 <__assert_fail@plt+0x8830>
   19d7c:	mov	r0, #0
   19d80:	pop	{r4, r5, r6, r7, r8, pc}
   19d84:	ldr	r1, [pc, #1992]	; 1a554 <__assert_fail@plt+0x905c>
   19d88:	ldr	r0, [sp, #24]
   19d8c:	bl	111bc <strcmp@plt>
   19d90:	subs	r4, r0, #0
   19d94:	bne	19e60 <__assert_fail@plt+0x8968>
   19d98:	cmp	r6, #0
   19d9c:	bne	19dac <__assert_fail@plt+0x88b4>
   19da0:	bl	113a8 <__ctype_b_loc@plt>
   19da4:	mov	ip, #1
   19da8:	b	19e10 <__assert_fail@plt+0x8918>
   19dac:	bl	113a8 <__ctype_b_loc@plt>
   19db0:	mov	r2, r6
   19db4:	mov	r3, #0
   19db8:	mov	r4, #1
   19dbc:	b	19dd0 <__assert_fail@plt+0x88d8>
   19dc0:	add	r3, r3, #2
   19dc4:	add	r2, r2, #1
   19dc8:	cmp	r3, #512	; 0x200
   19dcc:	beq	19dfc <__assert_fail@plt+0x8904>
   19dd0:	ldr	r1, [r0]
   19dd4:	ldrh	r1, [r1, r3]
   19dd8:	tst	r1, #8192	; 0x2000
   19ddc:	beq	19dc0 <__assert_fail@plt+0x88c8>
   19de0:	ldrb	r1, [r2]
   19de4:	asr	lr, r1, #5
   19de8:	and	r1, r1, #31
   19dec:	ldr	ip, [r5, lr, lsl #2]
   19df0:	orr	r1, ip, r4, lsl r1
   19df4:	str	r1, [r5, lr, lsl #2]
   19df8:	b	19dc0 <__assert_fail@plt+0x88c8>
   19dfc:	mov	r0, #0
   19e00:	pop	{r4, r5, r6, r7, r8, pc}
   19e04:	add	r4, r4, #1
   19e08:	cmp	r4, #256	; 0x100
   19e0c:	beq	19e58 <__assert_fail@plt+0x8960>
   19e10:	ldr	r2, [r0]
   19e14:	lsl	r3, r4, #1
   19e18:	ldrh	r3, [r2, r3]
   19e1c:	tst	r3, #8192	; 0x2000
   19e20:	beq	19e04 <__assert_fail@plt+0x890c>
   19e24:	add	r3, r4, #31
   19e28:	cmp	r4, #0
   19e2c:	movge	r3, r4
   19e30:	asr	r3, r3, #5
   19e34:	asr	r2, r4, #31
   19e38:	lsr	r1, r2, #27
   19e3c:	add	r2, r4, r1
   19e40:	and	r2, r2, #31
   19e44:	sub	r2, r2, r1
   19e48:	ldr	r1, [r5, r3, lsl #2]
   19e4c:	orr	r2, r1, ip, lsl r2
   19e50:	str	r2, [r5, r3, lsl #2]
   19e54:	b	19e04 <__assert_fail@plt+0x890c>
   19e58:	mov	r0, #0
   19e5c:	pop	{r4, r5, r6, r7, r8, pc}
   19e60:	ldr	r1, [pc, #1760]	; 1a548 <__assert_fail@plt+0x9050>
   19e64:	ldr	r0, [sp, #24]
   19e68:	bl	111bc <strcmp@plt>
   19e6c:	subs	r4, r0, #0
   19e70:	bne	19f3c <__assert_fail@plt+0x8a44>
   19e74:	cmp	r6, #0
   19e78:	bne	19e88 <__assert_fail@plt+0x8990>
   19e7c:	bl	113a8 <__ctype_b_loc@plt>
   19e80:	mov	ip, #1
   19e84:	b	19eec <__assert_fail@plt+0x89f4>
   19e88:	bl	113a8 <__ctype_b_loc@plt>
   19e8c:	mov	r2, r6
   19e90:	mov	r3, #0
   19e94:	mov	r4, #1
   19e98:	b	19eac <__assert_fail@plt+0x89b4>
   19e9c:	add	r3, r3, #2
   19ea0:	add	r2, r2, #1
   19ea4:	cmp	r3, #512	; 0x200
   19ea8:	beq	19ed8 <__assert_fail@plt+0x89e0>
   19eac:	ldr	r1, [r0]
   19eb0:	ldrh	r1, [r1, r3]
   19eb4:	tst	r1, #1024	; 0x400
   19eb8:	beq	19e9c <__assert_fail@plt+0x89a4>
   19ebc:	ldrb	r1, [r2]
   19ec0:	asr	lr, r1, #5
   19ec4:	and	r1, r1, #31
   19ec8:	ldr	ip, [r5, lr, lsl #2]
   19ecc:	orr	r1, ip, r4, lsl r1
   19ed0:	str	r1, [r5, lr, lsl #2]
   19ed4:	b	19e9c <__assert_fail@plt+0x89a4>
   19ed8:	mov	r0, #0
   19edc:	pop	{r4, r5, r6, r7, r8, pc}
   19ee0:	add	r4, r4, #1
   19ee4:	cmp	r4, #256	; 0x100
   19ee8:	beq	19f34 <__assert_fail@plt+0x8a3c>
   19eec:	ldr	r2, [r0]
   19ef0:	lsl	r3, r4, #1
   19ef4:	ldrh	r3, [r2, r3]
   19ef8:	tst	r3, #1024	; 0x400
   19efc:	beq	19ee0 <__assert_fail@plt+0x89e8>
   19f00:	add	r3, r4, #31
   19f04:	cmp	r4, #0
   19f08:	movge	r3, r4
   19f0c:	asr	r3, r3, #5
   19f10:	asr	r2, r4, #31
   19f14:	lsr	r1, r2, #27
   19f18:	add	r2, r4, r1
   19f1c:	and	r2, r2, #31
   19f20:	sub	r2, r2, r1
   19f24:	ldr	r1, [r5, r3, lsl #2]
   19f28:	orr	r2, r1, ip, lsl r2
   19f2c:	str	r2, [r5, r3, lsl #2]
   19f30:	b	19ee0 <__assert_fail@plt+0x89e8>
   19f34:	mov	r0, #0
   19f38:	pop	{r4, r5, r6, r7, r8, pc}
   19f3c:	ldr	r1, [pc, #1556]	; 1a558 <__assert_fail@plt+0x9060>
   19f40:	ldr	r0, [sp, #24]
   19f44:	bl	111bc <strcmp@plt>
   19f48:	subs	r4, r0, #0
   19f4c:	bne	1a018 <__assert_fail@plt+0x8b20>
   19f50:	cmp	r6, #0
   19f54:	bne	19f64 <__assert_fail@plt+0x8a6c>
   19f58:	bl	113a8 <__ctype_b_loc@plt>
   19f5c:	mov	ip, #1
   19f60:	b	19fc8 <__assert_fail@plt+0x8ad0>
   19f64:	bl	113a8 <__ctype_b_loc@plt>
   19f68:	mov	r2, r6
   19f6c:	mov	r3, #0
   19f70:	mov	r4, #1
   19f74:	b	19f88 <__assert_fail@plt+0x8a90>
   19f78:	add	r3, r3, #2
   19f7c:	add	r2, r2, #1
   19f80:	cmp	r3, #512	; 0x200
   19f84:	beq	19fb4 <__assert_fail@plt+0x8abc>
   19f88:	ldr	r1, [r0]
   19f8c:	ldrh	r1, [r1, r3]
   19f90:	tst	r1, #2048	; 0x800
   19f94:	beq	19f78 <__assert_fail@plt+0x8a80>
   19f98:	ldrb	r1, [r2]
   19f9c:	asr	lr, r1, #5
   19fa0:	and	r1, r1, #31
   19fa4:	ldr	ip, [r5, lr, lsl #2]
   19fa8:	orr	r1, ip, r4, lsl r1
   19fac:	str	r1, [r5, lr, lsl #2]
   19fb0:	b	19f78 <__assert_fail@plt+0x8a80>
   19fb4:	mov	r0, #0
   19fb8:	pop	{r4, r5, r6, r7, r8, pc}
   19fbc:	add	r4, r4, #1
   19fc0:	cmp	r4, #256	; 0x100
   19fc4:	beq	1a010 <__assert_fail@plt+0x8b18>
   19fc8:	ldr	r2, [r0]
   19fcc:	lsl	r3, r4, #1
   19fd0:	ldrh	r3, [r2, r3]
   19fd4:	tst	r3, #2048	; 0x800
   19fd8:	beq	19fbc <__assert_fail@plt+0x8ac4>
   19fdc:	add	r3, r4, #31
   19fe0:	cmp	r4, #0
   19fe4:	movge	r3, r4
   19fe8:	asr	r3, r3, #5
   19fec:	asr	r2, r4, #31
   19ff0:	lsr	r1, r2, #27
   19ff4:	add	r2, r4, r1
   19ff8:	and	r2, r2, #31
   19ffc:	sub	r2, r2, r1
   1a000:	ldr	r1, [r5, r3, lsl #2]
   1a004:	orr	r2, r1, ip, lsl r2
   1a008:	str	r2, [r5, r3, lsl #2]
   1a00c:	b	19fbc <__assert_fail@plt+0x8ac4>
   1a010:	mov	r0, #0
   1a014:	pop	{r4, r5, r6, r7, r8, pc}
   1a018:	ldr	r1, [pc, #1340]	; 1a55c <__assert_fail@plt+0x9064>
   1a01c:	ldr	r0, [sp, #24]
   1a020:	bl	111bc <strcmp@plt>
   1a024:	subs	r4, r0, #0
   1a028:	bne	1a0f4 <__assert_fail@plt+0x8bfc>
   1a02c:	cmp	r6, #0
   1a030:	bne	1a040 <__assert_fail@plt+0x8b48>
   1a034:	bl	113a8 <__ctype_b_loc@plt>
   1a038:	mov	ip, #1
   1a03c:	b	1a0a4 <__assert_fail@plt+0x8bac>
   1a040:	bl	113a8 <__ctype_b_loc@plt>
   1a044:	mov	r2, r6
   1a048:	mov	r3, #0
   1a04c:	mov	r4, #1
   1a050:	b	1a064 <__assert_fail@plt+0x8b6c>
   1a054:	add	r3, r3, #2
   1a058:	add	r2, r2, #1
   1a05c:	cmp	r3, #512	; 0x200
   1a060:	beq	1a090 <__assert_fail@plt+0x8b98>
   1a064:	ldr	r1, [r0]
   1a068:	ldrh	r1, [r1, r3]
   1a06c:	tst	r1, #16384	; 0x4000
   1a070:	beq	1a054 <__assert_fail@plt+0x8b5c>
   1a074:	ldrb	r1, [r2]
   1a078:	asr	lr, r1, #5
   1a07c:	and	r1, r1, #31
   1a080:	ldr	ip, [r5, lr, lsl #2]
   1a084:	orr	r1, ip, r4, lsl r1
   1a088:	str	r1, [r5, lr, lsl #2]
   1a08c:	b	1a054 <__assert_fail@plt+0x8b5c>
   1a090:	mov	r0, #0
   1a094:	pop	{r4, r5, r6, r7, r8, pc}
   1a098:	add	r4, r4, #1
   1a09c:	cmp	r4, #256	; 0x100
   1a0a0:	beq	1a0ec <__assert_fail@plt+0x8bf4>
   1a0a4:	ldr	r2, [r0]
   1a0a8:	lsl	r3, r4, #1
   1a0ac:	ldrh	r3, [r2, r3]
   1a0b0:	tst	r3, #16384	; 0x4000
   1a0b4:	beq	1a098 <__assert_fail@plt+0x8ba0>
   1a0b8:	add	r3, r4, #31
   1a0bc:	cmp	r4, #0
   1a0c0:	movge	r3, r4
   1a0c4:	asr	r3, r3, #5
   1a0c8:	asr	r2, r4, #31
   1a0cc:	lsr	r1, r2, #27
   1a0d0:	add	r2, r4, r1
   1a0d4:	and	r2, r2, #31
   1a0d8:	sub	r2, r2, r1
   1a0dc:	ldr	r1, [r5, r3, lsl #2]
   1a0e0:	orr	r2, r1, ip, lsl r2
   1a0e4:	str	r2, [r5, r3, lsl #2]
   1a0e8:	b	1a098 <__assert_fail@plt+0x8ba0>
   1a0ec:	mov	r0, #0
   1a0f0:	pop	{r4, r5, r6, r7, r8, pc}
   1a0f4:	ldr	r1, [pc, #1092]	; 1a540 <__assert_fail@plt+0x9048>
   1a0f8:	ldr	r0, [sp, #24]
   1a0fc:	bl	111bc <strcmp@plt>
   1a100:	subs	r4, r0, #0
   1a104:	bne	1a1d0 <__assert_fail@plt+0x8cd8>
   1a108:	cmp	r6, #0
   1a10c:	bne	1a11c <__assert_fail@plt+0x8c24>
   1a110:	bl	113a8 <__ctype_b_loc@plt>
   1a114:	mov	ip, #1
   1a118:	b	1a180 <__assert_fail@plt+0x8c88>
   1a11c:	bl	113a8 <__ctype_b_loc@plt>
   1a120:	mov	r2, r6
   1a124:	mov	r3, #0
   1a128:	mov	r4, #1
   1a12c:	b	1a140 <__assert_fail@plt+0x8c48>
   1a130:	add	r3, r3, #2
   1a134:	add	r2, r2, #1
   1a138:	cmp	r3, #512	; 0x200
   1a13c:	beq	1a16c <__assert_fail@plt+0x8c74>
   1a140:	ldr	r1, [r0]
   1a144:	ldrh	r1, [r1, r3]
   1a148:	tst	r1, #256	; 0x100
   1a14c:	beq	1a130 <__assert_fail@plt+0x8c38>
   1a150:	ldrb	r1, [r2]
   1a154:	asr	lr, r1, #5
   1a158:	and	r1, r1, #31
   1a15c:	ldr	ip, [r5, lr, lsl #2]
   1a160:	orr	r1, ip, r4, lsl r1
   1a164:	str	r1, [r5, lr, lsl #2]
   1a168:	b	1a130 <__assert_fail@plt+0x8c38>
   1a16c:	mov	r0, #0
   1a170:	pop	{r4, r5, r6, r7, r8, pc}
   1a174:	add	r4, r4, #1
   1a178:	cmp	r4, #256	; 0x100
   1a17c:	beq	1a1c8 <__assert_fail@plt+0x8cd0>
   1a180:	ldr	r2, [r0]
   1a184:	lsl	r3, r4, #1
   1a188:	ldrh	r3, [r2, r3]
   1a18c:	tst	r3, #256	; 0x100
   1a190:	beq	1a174 <__assert_fail@plt+0x8c7c>
   1a194:	add	r3, r4, #31
   1a198:	cmp	r4, #0
   1a19c:	movge	r3, r4
   1a1a0:	asr	r3, r3, #5
   1a1a4:	asr	r2, r4, #31
   1a1a8:	lsr	r1, r2, #27
   1a1ac:	add	r2, r4, r1
   1a1b0:	and	r2, r2, #31
   1a1b4:	sub	r2, r2, r1
   1a1b8:	ldr	r1, [r5, r3, lsl #2]
   1a1bc:	orr	r2, r1, ip, lsl r2
   1a1c0:	str	r2, [r5, r3, lsl #2]
   1a1c4:	b	1a174 <__assert_fail@plt+0x8c7c>
   1a1c8:	mov	r0, #0
   1a1cc:	pop	{r4, r5, r6, r7, r8, pc}
   1a1d0:	ldr	r1, [pc, #904]	; 1a560 <__assert_fail@plt+0x9068>
   1a1d4:	ldr	r0, [sp, #24]
   1a1d8:	bl	111bc <strcmp@plt>
   1a1dc:	subs	r4, r0, #0
   1a1e0:	bne	1a2ac <__assert_fail@plt+0x8db4>
   1a1e4:	cmp	r6, #0
   1a1e8:	beq	1a244 <__assert_fail@plt+0x8d4c>
   1a1ec:	bl	113a8 <__ctype_b_loc@plt>
   1a1f0:	mov	r2, r6
   1a1f4:	mov	r3, #0
   1a1f8:	mov	r4, #1
   1a1fc:	b	1a210 <__assert_fail@plt+0x8d18>
   1a200:	add	r3, r3, #2
   1a204:	add	r2, r2, #1
   1a208:	cmp	r3, #512	; 0x200
   1a20c:	beq	1a23c <__assert_fail@plt+0x8d44>
   1a210:	ldr	r1, [r0]
   1a214:	ldrh	r1, [r1, r3]
   1a218:	tst	r1, #1
   1a21c:	beq	1a200 <__assert_fail@plt+0x8d08>
   1a220:	ldrb	r1, [r2]
   1a224:	asr	lr, r1, #5
   1a228:	and	r1, r1, #31
   1a22c:	ldr	ip, [r5, lr, lsl #2]
   1a230:	orr	r1, ip, r4, lsl r1
   1a234:	str	r1, [r5, lr, lsl #2]
   1a238:	b	1a200 <__assert_fail@plt+0x8d08>
   1a23c:	mov	r0, #0
   1a240:	pop	{r4, r5, r6, r7, r8, pc}
   1a244:	bl	113a8 <__ctype_b_loc@plt>
   1a248:	mov	ip, #1
   1a24c:	b	1a25c <__assert_fail@plt+0x8d64>
   1a250:	add	r4, r4, #1
   1a254:	cmp	r4, #256	; 0x100
   1a258:	beq	1a2a4 <__assert_fail@plt+0x8dac>
   1a25c:	ldr	r2, [r0]
   1a260:	lsl	r3, r4, #1
   1a264:	ldrh	r3, [r2, r3]
   1a268:	tst	r3, #1
   1a26c:	beq	1a250 <__assert_fail@plt+0x8d58>
   1a270:	add	r3, r4, #31
   1a274:	cmp	r4, #0
   1a278:	movge	r3, r4
   1a27c:	asr	r3, r3, #5
   1a280:	asr	r2, r4, #31
   1a284:	lsr	r1, r2, #27
   1a288:	add	r2, r4, r1
   1a28c:	and	r2, r2, #31
   1a290:	sub	r2, r2, r1
   1a294:	ldr	r1, [r5, r3, lsl #2]
   1a298:	orr	r2, r1, ip, lsl r2
   1a29c:	str	r2, [r5, r3, lsl #2]
   1a2a0:	b	1a250 <__assert_fail@plt+0x8d58>
   1a2a4:	mov	r0, #0
   1a2a8:	pop	{r4, r5, r6, r7, r8, pc}
   1a2ac:	ldr	r1, [pc, #688]	; 1a564 <__assert_fail@plt+0x906c>
   1a2b0:	ldr	r0, [sp, #24]
   1a2b4:	bl	111bc <strcmp@plt>
   1a2b8:	subs	r4, r0, #0
   1a2bc:	bne	1a388 <__assert_fail@plt+0x8e90>
   1a2c0:	cmp	r6, #0
   1a2c4:	beq	1a320 <__assert_fail@plt+0x8e28>
   1a2c8:	bl	113a8 <__ctype_b_loc@plt>
   1a2cc:	mov	r2, r6
   1a2d0:	mov	r3, #0
   1a2d4:	mov	r4, #1
   1a2d8:	b	1a2ec <__assert_fail@plt+0x8df4>
   1a2dc:	add	r3, r3, #2
   1a2e0:	add	r2, r2, #1
   1a2e4:	cmp	r3, #512	; 0x200
   1a2e8:	beq	1a318 <__assert_fail@plt+0x8e20>
   1a2ec:	ldr	r1, [r0]
   1a2f0:	ldrsh	r1, [r1, r3]
   1a2f4:	cmp	r1, #0
   1a2f8:	bge	1a2dc <__assert_fail@plt+0x8de4>
   1a2fc:	ldrb	r1, [r2]
   1a300:	asr	lr, r1, #5
   1a304:	and	r1, r1, #31
   1a308:	ldr	ip, [r5, lr, lsl #2]
   1a30c:	orr	r1, ip, r4, lsl r1
   1a310:	str	r1, [r5, lr, lsl #2]
   1a314:	b	1a2dc <__assert_fail@plt+0x8de4>
   1a318:	mov	r0, #0
   1a31c:	pop	{r4, r5, r6, r7, r8, pc}
   1a320:	bl	113a8 <__ctype_b_loc@plt>
   1a324:	mov	ip, #1
   1a328:	b	1a338 <__assert_fail@plt+0x8e40>
   1a32c:	add	r4, r4, #1
   1a330:	cmp	r4, #256	; 0x100
   1a334:	beq	1a380 <__assert_fail@plt+0x8e88>
   1a338:	ldr	r2, [r0]
   1a33c:	lsl	r3, r4, #1
   1a340:	ldrsh	r3, [r2, r3]
   1a344:	cmp	r3, #0
   1a348:	bge	1a32c <__assert_fail@plt+0x8e34>
   1a34c:	add	r3, r4, #31
   1a350:	cmp	r4, #0
   1a354:	movge	r3, r4
   1a358:	asr	r3, r3, #5
   1a35c:	asr	r2, r4, #31
   1a360:	lsr	r1, r2, #27
   1a364:	add	r2, r4, r1
   1a368:	and	r2, r2, #31
   1a36c:	sub	r2, r2, r1
   1a370:	ldr	r1, [r5, r3, lsl #2]
   1a374:	orr	r2, r1, ip, lsl r2
   1a378:	str	r2, [r5, r3, lsl #2]
   1a37c:	b	1a32c <__assert_fail@plt+0x8e34>
   1a380:	mov	r0, #0
   1a384:	pop	{r4, r5, r6, r7, r8, pc}
   1a388:	ldr	r1, [pc, #472]	; 1a568 <__assert_fail@plt+0x9070>
   1a38c:	ldr	r0, [sp, #24]
   1a390:	bl	111bc <strcmp@plt>
   1a394:	subs	r4, r0, #0
   1a398:	bne	1a45c <__assert_fail@plt+0x8f64>
   1a39c:	cmp	r6, #0
   1a3a0:	beq	1a3f4 <__assert_fail@plt+0x8efc>
   1a3a4:	bl	113a8 <__ctype_b_loc@plt>
   1a3a8:	mov	r2, r6
   1a3ac:	mov	r3, #0
   1a3b0:	mov	r4, #1
   1a3b4:	ldr	r1, [r0]
   1a3b8:	ldrh	r1, [r1, r3]
   1a3bc:	tst	r1, #4
   1a3c0:	beq	1a3dc <__assert_fail@plt+0x8ee4>
   1a3c4:	ldrb	r1, [r2]
   1a3c8:	asr	lr, r1, #5
   1a3cc:	and	r1, r1, #31
   1a3d0:	ldr	ip, [r5, lr, lsl #2]
   1a3d4:	orr	r1, ip, r4, lsl r1
   1a3d8:	str	r1, [r5, lr, lsl #2]
   1a3dc:	add	r3, r3, #2
   1a3e0:	add	r2, r2, #1
   1a3e4:	cmp	r3, #512	; 0x200
   1a3e8:	bne	1a3b4 <__assert_fail@plt+0x8ebc>
   1a3ec:	mov	r0, #0
   1a3f0:	pop	{r4, r5, r6, r7, r8, pc}
   1a3f4:	bl	113a8 <__ctype_b_loc@plt>
   1a3f8:	mov	ip, #1
   1a3fc:	b	1a40c <__assert_fail@plt+0x8f14>
   1a400:	add	r4, r4, #1
   1a404:	cmp	r4, #256	; 0x100
   1a408:	beq	1a454 <__assert_fail@plt+0x8f5c>
   1a40c:	ldr	r2, [r0]
   1a410:	lsl	r3, r4, #1
   1a414:	ldrh	r3, [r2, r3]
   1a418:	tst	r3, #4
   1a41c:	beq	1a400 <__assert_fail@plt+0x8f08>
   1a420:	add	r3, r4, #31
   1a424:	cmp	r4, #0
   1a428:	movge	r3, r4
   1a42c:	asr	r3, r3, #5
   1a430:	asr	r2, r4, #31
   1a434:	lsr	r1, r2, #27
   1a438:	add	r2, r4, r1
   1a43c:	and	r2, r2, #31
   1a440:	sub	r2, r2, r1
   1a444:	ldr	r1, [r5, r3, lsl #2]
   1a448:	orr	r2, r1, ip, lsl r2
   1a44c:	str	r2, [r5, r3, lsl #2]
   1a450:	b	1a400 <__assert_fail@plt+0x8f08>
   1a454:	mov	r0, #0
   1a458:	pop	{r4, r5, r6, r7, r8, pc}
   1a45c:	ldr	r1, [pc, #264]	; 1a56c <__assert_fail@plt+0x9074>
   1a460:	ldr	r0, [sp, #24]
   1a464:	bl	111bc <strcmp@plt>
   1a468:	subs	r4, r0, #0
   1a46c:	bne	1a538 <__assert_fail@plt+0x9040>
   1a470:	cmp	r6, #0
   1a474:	beq	1a4c8 <__assert_fail@plt+0x8fd0>
   1a478:	bl	113a8 <__ctype_b_loc@plt>
   1a47c:	mov	r2, r6
   1a480:	mov	r3, #0
   1a484:	mov	r4, #1
   1a488:	ldr	r1, [r0]
   1a48c:	ldrh	r1, [r1, r3]
   1a490:	tst	r1, #4096	; 0x1000
   1a494:	beq	1a4b0 <__assert_fail@plt+0x8fb8>
   1a498:	ldrb	r1, [r2]
   1a49c:	asr	lr, r1, #5
   1a4a0:	and	r1, r1, #31
   1a4a4:	ldr	ip, [r5, lr, lsl #2]
   1a4a8:	orr	r1, ip, r4, lsl r1
   1a4ac:	str	r1, [r5, lr, lsl #2]
   1a4b0:	add	r3, r3, #2
   1a4b4:	add	r2, r2, #1
   1a4b8:	cmp	r3, #512	; 0x200
   1a4bc:	bne	1a488 <__assert_fail@plt+0x8f90>
   1a4c0:	mov	r0, #0
   1a4c4:	pop	{r4, r5, r6, r7, r8, pc}
   1a4c8:	bl	113a8 <__ctype_b_loc@plt>
   1a4cc:	mov	ip, #1
   1a4d0:	b	1a4e0 <__assert_fail@plt+0x8fe8>
   1a4d4:	add	r4, r4, #1
   1a4d8:	cmp	r4, #256	; 0x100
   1a4dc:	beq	1a528 <__assert_fail@plt+0x9030>
   1a4e0:	ldr	r2, [r0]
   1a4e4:	lsl	r3, r4, #1
   1a4e8:	ldrh	r3, [r2, r3]
   1a4ec:	tst	r3, #4096	; 0x1000
   1a4f0:	beq	1a4d4 <__assert_fail@plt+0x8fdc>
   1a4f4:	add	r3, r4, #31
   1a4f8:	cmp	r4, #0
   1a4fc:	movge	r3, r4
   1a500:	asr	r3, r3, #5
   1a504:	asr	r2, r4, #31
   1a508:	lsr	r1, r2, #27
   1a50c:	add	r2, r4, r1
   1a510:	and	r2, r2, #31
   1a514:	sub	r2, r2, r1
   1a518:	ldr	r1, [r5, r3, lsl #2]
   1a51c:	orr	r2, r1, ip, lsl r2
   1a520:	str	r2, [r5, r3, lsl #2]
   1a524:	b	1a4d4 <__assert_fail@plt+0x8fdc>
   1a528:	mov	r0, #0
   1a52c:	pop	{r4, r5, r6, r7, r8, pc}
   1a530:	mov	r0, #12
   1a534:	pop	{r4, r5, r6, r7, r8, pc}
   1a538:	mov	r0, #4
   1a53c:	pop	{r4, r5, r6, r7, r8, pc}
   1a540:	andeq	r5, r2, r8, ror r0
   1a544:	andeq	r5, r2, r0, lsl #1
   1a548:	andeq	r5, r2, r0, ror r0
   1a54c:	andeq	r5, r2, r8, lsl #1
   1a550:	muleq	r2, r0, r0
   1a554:	muleq	r2, r8, r0
   1a558:	andeq	r5, r2, r0, lsr #1
   1a55c:	andeq	r5, r2, r8, lsr #1
   1a560:	strheq	r5, [r2], -r0
   1a564:	strheq	r5, [r2], -r8
   1a568:	andeq	r5, r2, r0, asr #1
   1a56c:	andeq	r5, r2, r8, asr #1
   1a570:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a574:	sub	sp, sp, #24
   1a578:	mov	r6, r0
   1a57c:	mov	r9, r1
   1a580:	mov	sl, r2
   1a584:	mov	r5, r3
   1a588:	ldrb	r8, [sp, #56]	; 0x38
   1a58c:	mov	r3, #0
   1a590:	str	r3, [sp, #20]
   1a594:	mov	r1, #1
   1a598:	mov	r0, #32
   1a59c:	bl	236d0 <__assert_fail@plt+0x121d8>
   1a5a0:	subs	r4, r0, #0
   1a5a4:	beq	1a70c <__assert_fail@plt+0x9214>
   1a5a8:	mov	r1, #1
   1a5ac:	mov	r0, #40	; 0x28
   1a5b0:	bl	236d0 <__assert_fail@plt+0x121d8>
   1a5b4:	subs	r7, r0, #0
   1a5b8:	beq	1a720 <__assert_fail@plt+0x9228>
   1a5bc:	ldrb	r2, [r7, #16]
   1a5c0:	and	r3, r8, #1
   1a5c4:	bic	r2, r2, #1
   1a5c8:	orr	r3, r3, r2
   1a5cc:	strb	r3, [r7, #16]
   1a5d0:	mov	r3, #0
   1a5d4:	str	r3, [sp, #4]
   1a5d8:	str	sl, [sp]
   1a5dc:	add	r3, sp, #20
   1a5e0:	mov	r2, r7
   1a5e4:	mov	r1, r4
   1a5e8:	mov	r0, r9
   1a5ec:	bl	19a3c <__assert_fail@plt+0x8544>
   1a5f0:	subs	r9, r0, #0
   1a5f4:	bne	1a73c <__assert_fail@plt+0x9244>
   1a5f8:	ldrb	r3, [r5]
   1a5fc:	cmp	r3, #0
   1a600:	movne	r0, #1
   1a604:	beq	1a628 <__assert_fail@plt+0x9130>
   1a608:	lsr	r1, r3, #5
   1a60c:	and	r3, r3, #31
   1a610:	ldr	r2, [r4, r1, lsl #2]
   1a614:	orr	r3, r2, r0, lsl r3
   1a618:	str	r3, [r4, r1, lsl #2]
   1a61c:	ldrb	r3, [r5, #1]!
   1a620:	cmp	r3, #0
   1a624:	bne	1a608 <__assert_fail@plt+0x9110>
   1a628:	cmp	r8, #0
   1a62c:	beq	1a64c <__assert_fail@plt+0x9154>
   1a630:	sub	r3, r4, #4
   1a634:	add	r1, r4, #28
   1a638:	ldr	r2, [r3, #4]
   1a63c:	mvn	r2, r2
   1a640:	str	r2, [r3, #4]!
   1a644:	cmp	r3, r1
   1a648:	bne	1a638 <__assert_fail@plt+0x9140>
   1a64c:	ldr	r3, [r6, #92]	; 0x5c
   1a650:	cmp	r3, #1
   1a654:	ble	1a680 <__assert_fail@plt+0x9188>
   1a658:	sub	r3, r4, #4
   1a65c:	ldr	r1, [r6, #60]	; 0x3c
   1a660:	sub	r1, r1, #4
   1a664:	add	ip, r4, #28
   1a668:	ldr	r2, [r3, #4]
   1a66c:	ldr	r0, [r1, #4]!
   1a670:	and	r2, r2, r0
   1a674:	str	r2, [r3, #4]!
   1a678:	cmp	r3, ip
   1a67c:	bne	1a668 <__assert_fail@plt+0x9170>
   1a680:	mov	r1, #0
   1a684:	str	r1, [sp, #16]
   1a688:	str	r4, [sp, #12]
   1a68c:	mov	r3, #3
   1a690:	strb	r3, [sp, #16]
   1a694:	add	r3, sp, #12
   1a698:	mov	r2, r1
   1a69c:	mov	r0, r6
   1a6a0:	bl	162d4 <__assert_fail@plt+0x4ddc>
   1a6a4:	subs	r5, r0, #0
   1a6a8:	beq	1a768 <__assert_fail@plt+0x9270>
   1a6ac:	ldr	r3, [r6, #92]	; 0x5c
   1a6b0:	cmp	r3, #1
   1a6b4:	ble	1a75c <__assert_fail@plt+0x9264>
   1a6b8:	mov	r3, #6
   1a6bc:	strb	r3, [sp, #16]
   1a6c0:	add	r3, sp, #24
   1a6c4:	str	r7, [r3, #-12]!
   1a6c8:	ldrb	r2, [r6, #88]	; 0x58
   1a6cc:	orr	r2, r2, #2
   1a6d0:	strb	r2, [r6, #88]	; 0x58
   1a6d4:	mov	r2, #0
   1a6d8:	mov	r1, r2
   1a6dc:	mov	r0, r6
   1a6e0:	bl	162d4 <__assert_fail@plt+0x4ddc>
   1a6e4:	subs	r2, r0, #0
   1a6e8:	beq	1a768 <__assert_fail@plt+0x9270>
   1a6ec:	mov	r3, #10
   1a6f0:	mov	r1, r5
   1a6f4:	mov	r0, r6
   1a6f8:	bl	16448 <__assert_fail@plt+0x4f50>
   1a6fc:	mov	r5, r0
   1a700:	mov	r0, r5
   1a704:	add	sp, sp, #24
   1a708:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a70c:	mov	r3, #12
   1a710:	ldr	r2, [sp, #60]	; 0x3c
   1a714:	str	r3, [r2]
   1a718:	mov	r5, #0
   1a71c:	b	1a700 <__assert_fail@plt+0x9208>
   1a720:	mov	r0, r4
   1a724:	bl	13340 <__assert_fail@plt+0x1e48>
   1a728:	mov	r3, #12
   1a72c:	ldr	r2, [sp, #60]	; 0x3c
   1a730:	str	r3, [r2]
   1a734:	mov	r5, #0
   1a738:	b	1a700 <__assert_fail@plt+0x9208>
   1a73c:	mov	r0, r4
   1a740:	bl	13340 <__assert_fail@plt+0x1e48>
   1a744:	mov	r0, r7
   1a748:	bl	17e90 <__assert_fail@plt+0x6998>
   1a74c:	ldr	r3, [sp, #60]	; 0x3c
   1a750:	str	r9, [r3]
   1a754:	mov	r5, #0
   1a758:	b	1a700 <__assert_fail@plt+0x9208>
   1a75c:	mov	r0, r7
   1a760:	bl	17e90 <__assert_fail@plt+0x6998>
   1a764:	b	1a700 <__assert_fail@plt+0x9208>
   1a768:	mov	r0, r4
   1a76c:	bl	13340 <__assert_fail@plt+0x1e48>
   1a770:	mov	r0, r7
   1a774:	bl	17e90 <__assert_fail@plt+0x6998>
   1a778:	mov	r3, #12
   1a77c:	ldr	r2, [sp, #60]	; 0x3c
   1a780:	str	r3, [r2]
   1a784:	mov	r5, #0
   1a788:	b	1a700 <__assert_fail@plt+0x9208>
   1a78c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a790:	ldr	r9, [r0]
   1a794:	add	ip, r9, r1, lsl #3
   1a798:	ldrb	r8, [ip, #4]
   1a79c:	cmp	r8, #7
   1a7a0:	beq	1a7f4 <__assert_fail@plt+0x92fc>
   1a7a4:	mov	r4, r3
   1a7a8:	mov	r5, r2
   1a7ac:	mov	r7, r1
   1a7b0:	mov	r6, r0
   1a7b4:	mov	r1, r3
   1a7b8:	mov	r0, r2
   1a7bc:	bl	15554 <__assert_fail@plt+0x405c>
   1a7c0:	mov	sl, r0
   1a7c4:	cmp	r8, #5
   1a7c8:	beq	1a90c <__assert_fail@plt+0x9414>
   1a7cc:	cmp	r8, #6
   1a7d0:	movne	r8, #0
   1a7d4:	moveq	r8, #1
   1a7d8:	cmp	r0, #1
   1a7dc:	movle	r8, #0
   1a7e0:	cmp	r8, #0
   1a7e4:	moveq	sl, #0
   1a7e8:	bne	1a954 <__assert_fail@plt+0x945c>
   1a7ec:	mov	r0, sl
   1a7f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7f4:	ldr	r0, [r2, #4]
   1a7f8:	ldrb	r1, [r0, r3]
   1a7fc:	cmp	r1, #193	; 0xc1
   1a800:	movls	sl, #0
   1a804:	bls	1a7ec <__assert_fail@plt+0x92f4>
   1a808:	ldr	ip, [r2, #48]	; 0x30
   1a80c:	add	r2, r3, #2
   1a810:	cmp	r2, ip
   1a814:	movgt	sl, #0
   1a818:	bgt	1a7ec <__assert_fail@plt+0x92f4>
   1a81c:	add	lr, r3, #1
   1a820:	add	r2, r0, lr
   1a824:	ldrb	lr, [r0, lr]
   1a828:	cmp	r1, #223	; 0xdf
   1a82c:	bhi	1a844 <__assert_fail@plt+0x934c>
   1a830:	eor	lr, lr, #128	; 0x80
   1a834:	cmp	lr, #63	; 0x3f
   1a838:	movls	sl, #2
   1a83c:	movhi	sl, #0
   1a840:	b	1a7ec <__assert_fail@plt+0x92f4>
   1a844:	cmp	r1, #239	; 0xef
   1a848:	bhi	1a8a8 <__assert_fail@plt+0x93b0>
   1a84c:	cmp	lr, #159	; 0x9f
   1a850:	cmpls	r1, #224	; 0xe0
   1a854:	movne	sl, #3
   1a858:	beq	1aa8c <__assert_fail@plt+0x9594>
   1a85c:	add	r1, sl, r3
   1a860:	cmp	ip, r1
   1a864:	blt	1aa9c <__assert_fail@plt+0x95a4>
   1a868:	add	r3, r0, r3
   1a86c:	ldrb	r3, [r3, #1]
   1a870:	eor	r3, r3, #128	; 0x80
   1a874:	cmp	r3, #63	; 0x3f
   1a878:	bhi	1aa94 <__assert_fail@plt+0x959c>
   1a87c:	mov	r1, r2
   1a880:	mov	r2, #1
   1a884:	add	r2, r2, #1
   1a888:	cmp	sl, r2
   1a88c:	ble	1a7ec <__assert_fail@plt+0x92f4>
   1a890:	ldrb	r3, [r1, #1]!
   1a894:	eor	r3, r3, #128	; 0x80
   1a898:	cmp	r3, #63	; 0x3f
   1a89c:	bls	1a884 <__assert_fail@plt+0x938c>
   1a8a0:	mov	sl, #0
   1a8a4:	b	1a7ec <__assert_fail@plt+0x92f4>
   1a8a8:	cmp	r1, #247	; 0xf7
   1a8ac:	bhi	1a8c8 <__assert_fail@plt+0x93d0>
   1a8b0:	cmp	lr, #143	; 0x8f
   1a8b4:	cmpls	r1, #240	; 0xf0
   1a8b8:	movne	sl, #4
   1a8bc:	bne	1a85c <__assert_fail@plt+0x9364>
   1a8c0:	mov	sl, #0
   1a8c4:	b	1a7ec <__assert_fail@plt+0x92f4>
   1a8c8:	cmp	r1, #251	; 0xfb
   1a8cc:	bhi	1a8e8 <__assert_fail@plt+0x93f0>
   1a8d0:	cmp	lr, #135	; 0x87
   1a8d4:	cmpls	r1, #248	; 0xf8
   1a8d8:	movne	sl, #5
   1a8dc:	bne	1a85c <__assert_fail@plt+0x9364>
   1a8e0:	mov	sl, #0
   1a8e4:	b	1a7ec <__assert_fail@plt+0x92f4>
   1a8e8:	cmp	r1, #253	; 0xfd
   1a8ec:	movhi	sl, #0
   1a8f0:	bhi	1a7ec <__assert_fail@plt+0x92f4>
   1a8f4:	cmp	lr, #131	; 0x83
   1a8f8:	cmpls	r1, #252	; 0xfc
   1a8fc:	movne	sl, #6
   1a900:	bne	1a85c <__assert_fail@plt+0x9364>
   1a904:	mov	sl, #0
   1a908:	b	1a7ec <__assert_fail@plt+0x92f4>
   1a90c:	cmp	r0, #1
   1a910:	movle	sl, #0
   1a914:	ble	1a7ec <__assert_fail@plt+0x92f4>
   1a918:	ldr	r3, [r6, #128]	; 0x80
   1a91c:	tst	r3, #64	; 0x40
   1a920:	bne	1a938 <__assert_fail@plt+0x9440>
   1a924:	ldr	r2, [r5, #4]
   1a928:	ldrb	r2, [r2, r4]
   1a92c:	cmp	r2, #10
   1a930:	moveq	sl, #0
   1a934:	beq	1a7ec <__assert_fail@plt+0x92f4>
   1a938:	tst	r3, #128	; 0x80
   1a93c:	beq	1a7ec <__assert_fail@plt+0x92f4>
   1a940:	ldr	r3, [r5, #4]
   1a944:	ldrb	r3, [r3, r4]
   1a948:	cmp	r3, #0
   1a94c:	moveq	sl, #0
   1a950:	b	1a7ec <__assert_fail@plt+0x92f4>
   1a954:	ldr	r6, [r9, r7, lsl #3]
   1a958:	ldr	r3, [r6, #32]
   1a95c:	cmp	r3, #0
   1a960:	bne	1a9a0 <__assert_fail@plt+0x94a8>
   1a964:	ldr	r3, [r6, #36]	; 0x24
   1a968:	cmp	r3, #0
   1a96c:	bne	1a9a0 <__assert_fail@plt+0x94a8>
   1a970:	ldr	r3, [r6, #20]
   1a974:	cmp	r3, #0
   1a978:	moveq	r4, #0
   1a97c:	beq	1aa44 <__assert_fail@plt+0x954c>
   1a980:	mov	r1, r4
   1a984:	mov	r0, r5
   1a988:	bl	155c8 <__assert_fail@plt+0x40d0>
   1a98c:	mov	r4, r0
   1a990:	ldr	r0, [r6, #20]
   1a994:	cmp	r0, #0
   1a998:	bgt	1a9bc <__assert_fail@plt+0x94c4>
   1a99c:	b	1aa44 <__assert_fail@plt+0x954c>
   1a9a0:	mov	r1, r4
   1a9a4:	mov	r0, r5
   1a9a8:	bl	155c8 <__assert_fail@plt+0x40d0>
   1a9ac:	mov	r4, r0
   1a9b0:	ldr	r0, [r6, #20]
   1a9b4:	cmp	r0, #0
   1a9b8:	ble	1aa0c <__assert_fail@plt+0x9514>
   1a9bc:	ldr	r2, [r6]
   1a9c0:	ldr	r3, [r2]
   1a9c4:	cmp	r4, r3
   1a9c8:	beq	1a9e8 <__assert_fail@plt+0x94f0>
   1a9cc:	mov	r3, #0
   1a9d0:	add	r3, r3, #1
   1a9d4:	cmp	r0, r3
   1a9d8:	beq	1aa0c <__assert_fail@plt+0x9514>
   1a9dc:	ldr	r1, [r2, #4]!
   1a9e0:	cmp	r4, r1
   1a9e4:	bne	1a9d0 <__assert_fail@plt+0x94d8>
   1a9e8:	ldrb	r3, [r6, #16]
   1a9ec:	tst	r3, #1
   1a9f0:	beq	1a7ec <__assert_fail@plt+0x92f4>
   1a9f4:	cmp	sl, #0
   1a9f8:	movgt	sl, #0
   1a9fc:	bgt	1a7ec <__assert_fail@plt+0x92f4>
   1aa00:	cmp	sl, #1
   1aa04:	movlt	sl, #1
   1aa08:	b	1a7ec <__assert_fail@plt+0x92f4>
   1aa0c:	ldr	r3, [r6, #36]	; 0x24
   1aa10:	cmp	r3, #0
   1aa14:	ble	1aa44 <__assert_fail@plt+0x954c>
   1aa18:	mov	r5, #0
   1aa1c:	ldr	r3, [r6, #12]
   1aa20:	ldr	r1, [r3, r5, lsl #2]
   1aa24:	mov	r0, r4
   1aa28:	bl	111b0 <iswctype@plt>
   1aa2c:	cmp	r0, #0
   1aa30:	bne	1a9e8 <__assert_fail@plt+0x94f0>
   1aa34:	add	r5, r5, #1
   1aa38:	ldr	r3, [r6, #36]	; 0x24
   1aa3c:	cmp	r3, r5
   1aa40:	bgt	1aa1c <__assert_fail@plt+0x9524>
   1aa44:	ldr	r0, [r6, #32]
   1aa48:	cmp	r0, #0
   1aa4c:	ble	1aaa4 <__assert_fail@plt+0x95ac>
   1aa50:	ldr	r2, [r6, #4]
   1aa54:	sub	r2, r2, #4
   1aa58:	mov	r3, #0
   1aa5c:	b	1aa6c <__assert_fail@plt+0x9574>
   1aa60:	add	r3, r3, #1
   1aa64:	cmp	r0, r3
   1aa68:	beq	1aaa4 <__assert_fail@plt+0x95ac>
   1aa6c:	ldr	r1, [r2, #4]!
   1aa70:	cmp	r4, r1
   1aa74:	bcc	1aa60 <__assert_fail@plt+0x9568>
   1aa78:	ldr	r1, [r6, #8]
   1aa7c:	ldr	r1, [r1, r3, lsl #2]
   1aa80:	cmp	r4, r1
   1aa84:	bhi	1aa60 <__assert_fail@plt+0x9568>
   1aa88:	b	1a9e8 <__assert_fail@plt+0x94f0>
   1aa8c:	mov	sl, #0
   1aa90:	b	1a7ec <__assert_fail@plt+0x92f4>
   1aa94:	mov	sl, #0
   1aa98:	b	1a7ec <__assert_fail@plt+0x92f4>
   1aa9c:	mov	sl, #0
   1aaa0:	b	1a7ec <__assert_fail@plt+0x92f4>
   1aaa4:	ldrb	r3, [r6, #16]
   1aaa8:	tst	r3, #1
   1aaac:	bne	1aa00 <__assert_fail@plt+0x9508>
   1aab0:	mov	sl, #0
   1aab4:	b	1a7ec <__assert_fail@plt+0x92f4>
   1aab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aabc:	sub	sp, sp, #28
   1aac0:	str	r3, [sp, #4]
   1aac4:	add	r3, r1, r1, lsl #1
   1aac8:	ldr	r6, [r0, #28]
   1aacc:	add	r6, r6, r3, lsl #2
   1aad0:	mov	r3, #0
   1aad4:	str	r3, [sp, #12]
   1aad8:	str	r3, [sp, #16]
   1aadc:	str	r3, [sp, #20]
   1aae0:	ldr	r3, [r6, #4]
   1aae4:	cmp	r3, #0
   1aae8:	ble	1ab64 <__assert_fail@plt+0x966c>
   1aaec:	mov	r7, r0
   1aaf0:	mov	r8, r1
   1aaf4:	mov	fp, r2
   1aaf8:	mov	r5, #0
   1aafc:	b	1abd0 <__assert_fail@plt+0x96d8>
   1ab00:	ldr	r0, [sp, #20]
   1ab04:	bl	13340 <__assert_fail@plt+0x1e48>
   1ab08:	b	1ab70 <__assert_fail@plt+0x9678>
   1ab0c:	cmp	r3, #0
   1ab10:	ble	1ab64 <__assert_fail@plt+0x966c>
   1ab14:	mov	r4, #0
   1ab18:	b	1ab2c <__assert_fail@plt+0x9634>
   1ab1c:	add	r4, r4, #1
   1ab20:	ldr	r3, [r6, #4]
   1ab24:	cmp	r3, r4
   1ab28:	ble	1ab64 <__assert_fail@plt+0x966c>
   1ab2c:	ldr	r3, [r6, #8]
   1ab30:	ldr	r5, [r3, r4, lsl #2]
   1ab34:	mov	r1, r5
   1ab38:	add	r0, sp, #12
   1ab3c:	bl	156ac <__assert_fail@plt+0x41b4>
   1ab40:	cmp	r0, #0
   1ab44:	bne	1ab1c <__assert_fail@plt+0x9624>
   1ab48:	mov	r1, r5
   1ab4c:	mov	r0, fp
   1ab50:	bl	156ac <__assert_fail@plt+0x41b4>
   1ab54:	sub	r1, r0, #1
   1ab58:	mov	r0, fp
   1ab5c:	bl	15744 <__assert_fail@plt+0x424c>
   1ab60:	b	1ab1c <__assert_fail@plt+0x9624>
   1ab64:	ldr	r0, [sp, #20]
   1ab68:	bl	13340 <__assert_fail@plt+0x1e48>
   1ab6c:	mov	r4, #0
   1ab70:	mov	r0, r4
   1ab74:	add	sp, sp, #28
   1ab78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab7c:	mov	r1, r9
   1ab80:	mov	r0, r6
   1ab84:	bl	156ac <__assert_fail@plt+0x41b4>
   1ab88:	cmp	r0, #0
   1ab8c:	bne	1abc0 <__assert_fail@plt+0x96c8>
   1ab90:	mov	r1, r9
   1ab94:	mov	r0, fp
   1ab98:	bl	156ac <__assert_fail@plt+0x41b4>
   1ab9c:	cmp	r0, #0
   1aba0:	beq	1abc0 <__assert_fail@plt+0x96c8>
   1aba4:	ldr	r2, [r7, #28]
   1aba8:	add	r2, r2, r4
   1abac:	ldr	r1, [sp, #4]
   1abb0:	add	r0, sp, #12
   1abb4:	bl	16928 <__assert_fail@plt+0x5430>
   1abb8:	subs	r4, r0, #0
   1abbc:	bne	1ab00 <__assert_fail@plt+0x9608>
   1abc0:	add	r5, r5, #1
   1abc4:	ldr	r3, [r6, #4]
   1abc8:	cmp	r3, r5
   1abcc:	ble	1ab0c <__assert_fail@plt+0x9614>
   1abd0:	ldr	r3, [r6, #8]
   1abd4:	ldr	r4, [r3, r5, lsl #2]
   1abd8:	cmp	r8, r4
   1abdc:	beq	1abc0 <__assert_fail@plt+0x96c8>
   1abe0:	ldr	r3, [r7]
   1abe4:	add	r3, r3, r4, lsl #3
   1abe8:	ldrb	r3, [r3, #4]
   1abec:	tst	r3, #8
   1abf0:	beq	1abc0 <__assert_fail@plt+0x96c8>
   1abf4:	add	r4, r4, r4, lsl #1
   1abf8:	lsl	r4, r4, #2
   1abfc:	ldr	r3, [r7, #20]
   1ac00:	add	r3, r3, r4
   1ac04:	ldr	r2, [r3, #8]
   1ac08:	ldr	r9, [r2]
   1ac0c:	ldr	r3, [r3, #4]
   1ac10:	cmp	r3, #1
   1ac14:	ble	1ab7c <__assert_fail@plt+0x9684>
   1ac18:	ldr	sl, [r2, #4]
   1ac1c:	mov	r1, r9
   1ac20:	mov	r0, r6
   1ac24:	bl	156ac <__assert_fail@plt+0x41b4>
   1ac28:	cmp	r0, #0
   1ac2c:	bne	1ac44 <__assert_fail@plt+0x974c>
   1ac30:	mov	r1, r9
   1ac34:	mov	r0, fp
   1ac38:	bl	156ac <__assert_fail@plt+0x41b4>
   1ac3c:	cmp	r0, #0
   1ac40:	bne	1aba4 <__assert_fail@plt+0x96ac>
   1ac44:	cmp	sl, #0
   1ac48:	ble	1abc0 <__assert_fail@plt+0x96c8>
   1ac4c:	mov	r1, sl
   1ac50:	mov	r0, r6
   1ac54:	bl	156ac <__assert_fail@plt+0x41b4>
   1ac58:	cmp	r0, #0
   1ac5c:	bne	1abc0 <__assert_fail@plt+0x96c8>
   1ac60:	mov	r1, sl
   1ac64:	mov	r0, fp
   1ac68:	bl	156ac <__assert_fail@plt+0x41b4>
   1ac6c:	cmp	r0, #0
   1ac70:	beq	1abc0 <__assert_fail@plt+0x96c8>
   1ac74:	b	1aba4 <__assert_fail@plt+0x96ac>
   1ac78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac7c:	sub	sp, sp, #36	; 0x24
   1ac80:	mov	r4, r0
   1ac84:	mov	r6, r1
   1ac88:	mov	r7, r2
   1ac8c:	ldr	r5, [r0, #24]
   1ac90:	cmp	r5, r1
   1ac94:	suble	r5, r1, r5
   1ac98:	ble	1acfc <__assert_fail@plt+0x9804>
   1ac9c:	ldr	r3, [r0, #80]	; 0x50
   1aca0:	cmp	r3, #1
   1aca4:	movgt	r3, #0
   1aca8:	strgt	r3, [r0, #16]
   1acac:	strgt	r3, [r0, #20]
   1acb0:	ldr	r3, [r0, #44]	; 0x2c
   1acb4:	str	r3, [r0, #48]	; 0x30
   1acb8:	ldr	r3, [r0, #52]	; 0x34
   1acbc:	str	r3, [r0, #56]	; 0x38
   1acc0:	mov	r3, #0
   1acc4:	str	r3, [r0, #28]
   1acc8:	str	r3, [r0, #24]
   1accc:	str	r3, [r0, #32]
   1acd0:	strb	r3, [r0, #76]	; 0x4c
   1acd4:	and	r3, r2, #1
   1acd8:	cmp	r3, #0
   1acdc:	movne	r3, #4
   1ace0:	moveq	r3, #6
   1ace4:	str	r3, [r0, #60]	; 0x3c
   1ace8:	ldrb	r3, [r0, #75]	; 0x4b
   1acec:	cmp	r3, #0
   1acf0:	ldreq	r3, [r0]
   1acf4:	streq	r3, [r0, #4]
   1acf8:	mov	r5, r1
   1acfc:	cmp	r5, #0
   1ad00:	beq	1ad8c <__assert_fail@plt+0x9894>
   1ad04:	ldr	r3, [r4, #32]
   1ad08:	cmp	r5, r3
   1ad0c:	bge	1afdc <__assert_fail@plt+0x9ae4>
   1ad10:	ldrb	r3, [r4, #76]	; 0x4c
   1ad14:	cmp	r3, #0
   1ad18:	bne	1add4 <__assert_fail@plt+0x98dc>
   1ad1c:	mov	r2, r7
   1ad20:	sub	r1, r5, #1
   1ad24:	mov	r0, r4
   1ad28:	bl	19358 <__assert_fail@plt+0x7e60>
   1ad2c:	str	r0, [r4, #60]	; 0x3c
   1ad30:	ldr	r3, [r4, #80]	; 0x50
   1ad34:	cmp	r3, #1
   1ad38:	ble	1ad54 <__assert_fail@plt+0x985c>
   1ad3c:	ldr	r0, [r4, #8]
   1ad40:	ldr	r2, [r4, #28]
   1ad44:	sub	r2, r2, r5
   1ad48:	lsl	r2, r2, #2
   1ad4c:	add	r1, r0, r5, lsl #2
   1ad50:	bl	11204 <memmove@plt>
   1ad54:	ldrb	r3, [r4, #75]	; 0x4b
   1ad58:	cmp	r3, #0
   1ad5c:	bne	1afc4 <__assert_fail@plt+0x9acc>
   1ad60:	ldr	r3, [r4, #28]
   1ad64:	sub	r3, r3, r5
   1ad68:	str	r3, [r4, #28]
   1ad6c:	ldr	r3, [r4, #32]
   1ad70:	sub	r3, r3, r5
   1ad74:	str	r3, [r4, #32]
   1ad78:	ldrb	r3, [r4, #75]	; 0x4b
   1ad7c:	cmp	r3, #0
   1ad80:	ldreq	r3, [r4, #4]
   1ad84:	addeq	r3, r3, r5
   1ad88:	streq	r3, [r4, #4]
   1ad8c:	str	r6, [r4, #24]
   1ad90:	ldr	r3, [r4, #48]	; 0x30
   1ad94:	sub	r3, r3, r5
   1ad98:	str	r3, [r4, #48]	; 0x30
   1ad9c:	ldr	r2, [r4, #56]	; 0x38
   1ada0:	sub	r5, r2, r5
   1ada4:	str	r5, [r4, #56]	; 0x38
   1ada8:	ldr	r2, [r4, #80]	; 0x50
   1adac:	cmp	r2, #1
   1adb0:	ble	1b340 <__assert_fail@plt+0x9e48>
   1adb4:	ldrb	r3, [r4, #72]	; 0x48
   1adb8:	cmp	r3, #0
   1adbc:	beq	1b328 <__assert_fail@plt+0x9e30>
   1adc0:	mov	r0, r4
   1adc4:	bl	16cf0 <__assert_fail@plt+0x57f8>
   1adc8:	cmp	r0, #0
   1adcc:	beq	1b330 <__assert_fail@plt+0x9e38>
   1add0:	b	1b338 <__assert_fail@plt+0x9e40>
   1add4:	ldr	sl, [r4, #28]
   1add8:	ldr	r9, [r4, #12]
   1addc:	mov	r2, sl
   1ade0:	mov	r1, #0
   1ade4:	b	1adf4 <__assert_fail@plt+0x98fc>
   1ade8:	mov	r2, r8
   1adec:	cmp	r1, r2
   1adf0:	bge	1ae18 <__assert_fail@plt+0x9920>
   1adf4:	add	r3, r1, r2
   1adf8:	add	r3, r3, r3, lsr #31
   1adfc:	asr	r8, r3, #1
   1ae00:	ldr	r3, [r9, r8, lsl #2]
   1ae04:	cmp	r5, r3
   1ae08:	blt	1ade8 <__assert_fail@plt+0x98f0>
   1ae0c:	ble	1ae20 <__assert_fail@plt+0x9928>
   1ae10:	add	r1, r8, #1
   1ae14:	b	1adec <__assert_fail@plt+0x98f4>
   1ae18:	cmp	r5, r3
   1ae1c:	addgt	r8, r8, #1
   1ae20:	mov	r2, r7
   1ae24:	sub	r1, r8, #1
   1ae28:	mov	r0, r4
   1ae2c:	bl	19358 <__assert_fail@plt+0x7e60>
   1ae30:	str	r0, [r4, #60]	; 0x3c
   1ae34:	cmp	r5, sl
   1ae38:	movge	r3, #0
   1ae3c:	movlt	r3, #1
   1ae40:	cmp	r5, r8
   1ae44:	movne	r3, #0
   1ae48:	cmp	r3, #0
   1ae4c:	bne	1af2c <__assert_fail@plt+0x9a34>
   1ae50:	ldr	r3, [r4, #44]	; 0x2c
   1ae54:	sub	r3, r3, r6
   1ae58:	add	r3, r3, r5
   1ae5c:	str	r3, [r4, #48]	; 0x30
   1ae60:	ldr	r3, [r4, #52]	; 0x34
   1ae64:	sub	r3, r3, r6
   1ae68:	add	r3, r3, r5
   1ae6c:	str	r3, [r4, #56]	; 0x38
   1ae70:	mov	r3, #0
   1ae74:	strb	r3, [r4, #76]	; 0x4c
   1ae78:	cmp	r8, r3
   1ae7c:	ble	1aea8 <__assert_fail@plt+0x99b0>
   1ae80:	sub	r2, r8, #-1073741823	; 0xc0000001
   1ae84:	add	r3, r9, r2, lsl #2
   1ae88:	ldr	r2, [r9, r2, lsl #2]
   1ae8c:	cmp	r5, r2
   1ae90:	bne	1aea8 <__assert_fail@plt+0x99b0>
   1ae94:	subs	r8, r8, #1
   1ae98:	beq	1aea8 <__assert_fail@plt+0x99b0>
   1ae9c:	ldr	r2, [r3, #-4]!
   1aea0:	cmp	r5, r2
   1aea4:	beq	1ae94 <__assert_fail@plt+0x999c>
   1aea8:	cmp	sl, r8
   1aeac:	ble	1afb0 <__assert_fail@plt+0x9ab8>
   1aeb0:	ldr	r2, [r4, #8]
   1aeb4:	add	r3, r2, r8, lsl #2
   1aeb8:	ldr	r2, [r2, r8, lsl #2]
   1aebc:	cmn	r2, #1
   1aec0:	bne	1aedc <__assert_fail@plt+0x99e4>
   1aec4:	add	r8, r8, #1
   1aec8:	cmp	sl, r8
   1aecc:	beq	1afb8 <__assert_fail@plt+0x9ac0>
   1aed0:	ldr	r2, [r3, #4]!
   1aed4:	cmn	r2, #1
   1aed8:	beq	1aec4 <__assert_fail@plt+0x99cc>
   1aedc:	ldr	r2, [r9, r8, lsl #2]
   1aee0:	sub	r2, r2, r5
   1aee4:	str	r2, [r4, #28]
   1aee8:	cmp	r2, #0
   1aeec:	beq	1af20 <__assert_fail@plt+0x9a28>
   1aef0:	ble	1af14 <__assert_fail@plt+0x9a1c>
   1aef4:	mov	r3, #0
   1aef8:	mvn	r1, #0
   1aefc:	ldr	r2, [r4, #8]
   1af00:	str	r1, [r2, r3, lsl #2]
   1af04:	add	r3, r3, #1
   1af08:	ldr	r2, [r4, #28]
   1af0c:	cmp	r2, r3
   1af10:	bgt	1aefc <__assert_fail@plt+0x9a04>
   1af14:	mov	r1, #255	; 0xff
   1af18:	ldr	r0, [r4, #4]
   1af1c:	bl	11414 <memset@plt>
   1af20:	ldr	r3, [r4, #28]
   1af24:	str	r3, [r4, #32]
   1af28:	b	1ad78 <__assert_fail@plt+0x9880>
   1af2c:	ldr	r3, [r9, r8, lsl #2]
   1af30:	cmp	r5, r3
   1af34:	bne	1ae50 <__assert_fail@plt+0x9958>
   1af38:	ldr	r0, [r4, #8]
   1af3c:	lsl	r7, r5, #2
   1af40:	sub	r2, sl, r5
   1af44:	lsl	r2, r2, #2
   1af48:	add	r1, r0, r7
   1af4c:	bl	11204 <memmove@plt>
   1af50:	ldr	r0, [r4, #4]
   1af54:	ldr	r2, [r4, #28]
   1af58:	sub	r2, r2, r5
   1af5c:	add	r1, r0, r5
   1af60:	bl	11204 <memmove@plt>
   1af64:	ldr	r3, [r4, #28]
   1af68:	sub	r3, r3, r5
   1af6c:	str	r3, [r4, #28]
   1af70:	ldr	r2, [r4, #32]
   1af74:	sub	r2, r2, r5
   1af78:	str	r2, [r4, #32]
   1af7c:	cmp	r3, #0
   1af80:	ble	1ad78 <__assert_fail@plt+0x9880>
   1af84:	mov	r3, #0
   1af88:	ldr	r1, [r4, #12]
   1af8c:	ldr	r2, [r1, r7]
   1af90:	sub	r2, r2, r5
   1af94:	str	r2, [r1, r3, lsl #2]
   1af98:	add	r3, r3, #1
   1af9c:	add	r7, r7, #4
   1afa0:	ldr	r2, [r4, #28]
   1afa4:	cmp	r2, r3
   1afa8:	bgt	1af88 <__assert_fail@plt+0x9a90>
   1afac:	b	1ad78 <__assert_fail@plt+0x9880>
   1afb0:	cmp	sl, r8
   1afb4:	bne	1aedc <__assert_fail@plt+0x99e4>
   1afb8:	mov	r3, #0
   1afbc:	str	r3, [r4, #28]
   1afc0:	b	1af20 <__assert_fail@plt+0x9a28>
   1afc4:	ldr	r0, [r4, #4]
   1afc8:	ldr	r2, [r4, #28]
   1afcc:	sub	r2, r2, r5
   1afd0:	add	r1, r0, r5
   1afd4:	bl	11204 <memmove@plt>
   1afd8:	b	1ad60 <__assert_fail@plt+0x9868>
   1afdc:	ldr	fp, [r4, #28]
   1afe0:	ldrb	r3, [r4, #76]	; 0x4c
   1afe4:	cmp	r3, #0
   1afe8:	bne	1b0f0 <__assert_fail@plt+0x9bf8>
   1afec:	mov	r3, #0
   1aff0:	str	r3, [r4, #28]
   1aff4:	ldr	r3, [r4, #80]	; 0x50
   1aff8:	cmp	r3, #1
   1affc:	ble	1b2b8 <__assert_fail@plt+0x9dc0>
   1b000:	ldrb	r2, [r4, #73]	; 0x49
   1b004:	cmp	r2, #0
   1b008:	beq	1b0cc <__assert_fail@plt+0x9bd4>
   1b00c:	ldr	r0, [r4]
   1b010:	ldr	r8, [r4, #24]
   1b014:	add	r8, r0, r8
   1b018:	sub	r3, r5, r3
   1b01c:	add	r3, r8, r3
   1b020:	cmp	r0, r3
   1b024:	movcc	r0, r3
   1b028:	mov	r9, r5
   1b02c:	sub	r3, r5, #1
   1b030:	add	r1, r8, r3
   1b034:	cmp	r1, r0
   1b038:	bcc	1b0cc <__assert_fail@plt+0x9bd4>
   1b03c:	ldrb	r3, [r8, r3]
   1b040:	and	r3, r3, #192	; 0xc0
   1b044:	cmp	r3, #128	; 0x80
   1b048:	subeq	r3, r1, #1
   1b04c:	subeq	r0, r0, #1
   1b050:	bne	1b074 <__assert_fail@plt+0x9b7c>
   1b054:	mov	r1, r3
   1b058:	cmp	r3, r0
   1b05c:	beq	1b0cc <__assert_fail@plt+0x9bd4>
   1b060:	sub	r3, r3, #1
   1b064:	ldrb	r2, [r1]
   1b068:	and	r2, r2, #192	; 0xc0
   1b06c:	cmp	r2, #128	; 0x80
   1b070:	beq	1b054 <__assert_fail@plt+0x9b5c>
   1b074:	mov	sl, r1
   1b078:	ldr	r2, [r4, #48]	; 0x30
   1b07c:	add	r2, r8, r2
   1b080:	sub	r2, r2, r1
   1b084:	ldr	r3, [r4, #64]	; 0x40
   1b088:	cmp	r3, #0
   1b08c:	bne	1b11c <__assert_fail@plt+0x9c24>
   1b090:	mov	r3, #0
   1b094:	str	r3, [sp, #24]
   1b098:	str	r3, [sp, #28]
   1b09c:	add	r3, sp, #24
   1b0a0:	add	r0, sp, #12
   1b0a4:	bl	135c4 <__assert_fail@plt+0x20cc>
   1b0a8:	add	r8, r8, r9
   1b0ac:	sub	sl, r8, sl
   1b0b0:	cmp	r0, sl
   1b0b4:	movcc	r3, #0
   1b0b8:	movcs	r3, #1
   1b0bc:	cmn	r0, #3
   1b0c0:	movhi	r3, #0
   1b0c4:	cmp	r3, #0
   1b0c8:	bne	1b160 <__assert_fail@plt+0x9c68>
   1b0cc:	ldr	ip, [r4, #24]
   1b0d0:	ldr	r3, [r4, #32]
   1b0d4:	add	ip, ip, r3
   1b0d8:	cmp	r6, ip
   1b0dc:	ble	1b380 <__assert_fail@plt+0x9e88>
   1b0e0:	add	sl, sp, #24
   1b0e4:	add	r9, r4, #16
   1b0e8:	str	r5, [sp, #4]
   1b0ec:	b	1b190 <__assert_fail@plt+0x9c98>
   1b0f0:	ldr	r3, [r4, #44]	; 0x2c
   1b0f4:	sub	r3, r3, r6
   1b0f8:	add	r3, r3, r5
   1b0fc:	str	r3, [r4, #48]	; 0x30
   1b100:	ldr	r3, [r4, #52]	; 0x34
   1b104:	sub	r3, r3, r6
   1b108:	add	r3, r3, r5
   1b10c:	str	r3, [r4, #56]	; 0x38
   1b110:	mov	r3, #0
   1b114:	strb	r3, [r4, #76]	; 0x4c
   1b118:	b	1afec <__assert_fail@plt+0x9af4>
   1b11c:	cmp	r2, #6
   1b120:	movlt	ip, r2
   1b124:	movge	ip, #6
   1b128:	cmp	ip, #1
   1b12c:	addmi	r1, sp, #16
   1b130:	bmi	1b090 <__assert_fail@plt+0x9b98>
   1b134:	add	r0, r1, ip
   1b138:	add	lr, sp, #32
   1b13c:	add	ip, lr, ip
   1b140:	sub	ip, ip, #17
   1b144:	ldrb	lr, [r0, #-1]!
   1b148:	ldrb	lr, [r3, lr]
   1b14c:	strb	lr, [ip], #-1
   1b150:	cmp	r0, r1
   1b154:	bne	1b144 <__assert_fail@plt+0x9c4c>
   1b158:	add	r1, sp, #16
   1b15c:	b	1b090 <__assert_fail@plt+0x9b98>
   1b160:	mov	r3, #0
   1b164:	str	r3, [r4, #16]
   1b168:	str	r3, [r4, #20]
   1b16c:	sub	sl, r0, sl
   1b170:	str	sl, [r4, #28]
   1b174:	ldr	r8, [sp, #12]
   1b178:	cmn	r8, #1
   1b17c:	bne	1b208 <__assert_fail@plt+0x9d10>
   1b180:	b	1b0cc <__assert_fail@plt+0x9bd4>
   1b184:	add	ip, r8, r0
   1b188:	cmp	r6, ip
   1b18c:	ble	1b1f0 <__assert_fail@plt+0x9cf8>
   1b190:	ldr	r5, [r4, #44]	; 0x2c
   1b194:	sub	r5, r5, ip
   1b198:	ldm	r9, {r0, r1}
   1b19c:	stm	sl, {r0, r1}
   1b1a0:	mov	r8, ip
   1b1a4:	ldr	r1, [r4]
   1b1a8:	mov	r3, r9
   1b1ac:	mov	r2, r5
   1b1b0:	add	r1, r1, ip
   1b1b4:	add	r0, sp, #16
   1b1b8:	bl	135c4 <__assert_fail@plt+0x20cc>
   1b1bc:	sub	r3, r0, #1
   1b1c0:	cmn	r3, #4
   1b1c4:	ldrls	r3, [sp, #16]
   1b1c8:	bls	1b184 <__assert_fail@plt+0x9c8c>
   1b1cc:	cmp	r5, #0
   1b1d0:	cmpne	r0, #0
   1b1d4:	ldrne	r3, [r4]
   1b1d8:	ldrbne	r3, [r3, r8]
   1b1dc:	moveq	r3, #0
   1b1e0:	ldm	sl, {r0, r1}
   1b1e4:	stm	r9, {r0, r1}
   1b1e8:	mov	r0, #1
   1b1ec:	b	1b184 <__assert_fail@plt+0x9c8c>
   1b1f0:	ldr	r5, [sp, #4]
   1b1f4:	mov	r8, r3
   1b1f8:	sub	ip, ip, r6
   1b1fc:	str	ip, [r4, #28]
   1b200:	cmn	r3, #1
   1b204:	beq	1b388 <__assert_fail@plt+0x9e90>
   1b208:	ldrb	r3, [r4, #78]	; 0x4e
   1b20c:	cmp	r3, #0
   1b210:	bne	1b23c <__assert_fail@plt+0x9d44>
   1b214:	cmp	r8, #10
   1b218:	movne	r3, #0
   1b21c:	beq	1b264 <__assert_fail@plt+0x9d6c>
   1b220:	str	r3, [r4, #60]	; 0x3c
   1b224:	ldr	r2, [r4, #28]
   1b228:	cmp	r2, #0
   1b22c:	bne	1b278 <__assert_fail@plt+0x9d80>
   1b230:	ldr	r3, [r4, #28]
   1b234:	str	r3, [r4, #32]
   1b238:	b	1ad78 <__assert_fail@plt+0x9880>
   1b23c:	mov	r0, r8
   1b240:	bl	113fc <iswalnum@plt>
   1b244:	clz	r0, r0
   1b248:	lsr	r0, r0, #5
   1b24c:	cmp	r8, #95	; 0x5f
   1b250:	moveq	r0, #0
   1b254:	cmp	r0, #0
   1b258:	moveq	r3, #1
   1b25c:	bne	1b214 <__assert_fail@plt+0x9d1c>
   1b260:	b	1b220 <__assert_fail@plt+0x9d28>
   1b264:	ldrb	r3, [r4, #77]	; 0x4d
   1b268:	cmp	r3, #0
   1b26c:	movne	r3, #2
   1b270:	moveq	r3, #0
   1b274:	b	1b220 <__assert_fail@plt+0x9d28>
   1b278:	ble	1b29c <__assert_fail@plt+0x9da4>
   1b27c:	mov	r3, #0
   1b280:	mvn	r1, #0
   1b284:	ldr	r2, [r4, #8]
   1b288:	str	r1, [r2, r3, lsl #2]
   1b28c:	add	r3, r3, #1
   1b290:	ldr	r2, [r4, #28]
   1b294:	cmp	r2, r3
   1b298:	bgt	1b284 <__assert_fail@plt+0x9d8c>
   1b29c:	ldrb	r3, [r4, #75]	; 0x4b
   1b2a0:	cmp	r3, #0
   1b2a4:	beq	1b230 <__assert_fail@plt+0x9d38>
   1b2a8:	mov	r1, #255	; 0xff
   1b2ac:	ldr	r0, [r4, #4]
   1b2b0:	bl	11414 <memset@plt>
   1b2b4:	b	1b230 <__assert_fail@plt+0x9d38>
   1b2b8:	ldr	r3, [r4]
   1b2bc:	ldr	r2, [r4, #24]
   1b2c0:	add	r3, r3, r5
   1b2c4:	add	r3, r3, r2
   1b2c8:	ldrb	r3, [r3, #-1]
   1b2cc:	mov	r2, #0
   1b2d0:	str	r2, [r4, #32]
   1b2d4:	ldr	r2, [r4, #64]	; 0x40
   1b2d8:	cmp	r2, #0
   1b2dc:	ldrbne	r3, [r2, r3]
   1b2e0:	lsr	r1, r3, #5
   1b2e4:	ldr	r0, [r4, #68]	; 0x44
   1b2e8:	and	r2, r3, #31
   1b2ec:	ldr	r1, [r0, r1, lsl #2]
   1b2f0:	lsr	r2, r1, r2
   1b2f4:	tst	r2, #1
   1b2f8:	movne	r3, #1
   1b2fc:	bne	1b30c <__assert_fail@plt+0x9e14>
   1b300:	cmp	r3, #10
   1b304:	movne	r3, #0
   1b308:	beq	1b314 <__assert_fail@plt+0x9e1c>
   1b30c:	str	r3, [r4, #60]	; 0x3c
   1b310:	b	1ad78 <__assert_fail@plt+0x9880>
   1b314:	ldrb	r3, [r4, #77]	; 0x4d
   1b318:	cmp	r3, #0
   1b31c:	movne	r3, #2
   1b320:	moveq	r3, #0
   1b324:	b	1b30c <__assert_fail@plt+0x9e14>
   1b328:	mov	r0, r4
   1b32c:	bl	1678c <__assert_fail@plt+0x5294>
   1b330:	mov	r0, #0
   1b334:	str	r0, [r4, #40]	; 0x28
   1b338:	add	sp, sp, #36	; 0x24
   1b33c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b340:	ldrb	r2, [r4, #75]	; 0x4b
   1b344:	cmp	r2, #0
   1b348:	streq	r3, [r4, #28]
   1b34c:	beq	1b330 <__assert_fail@plt+0x9e38>
   1b350:	ldrb	r3, [r4, #72]	; 0x48
   1b354:	cmp	r3, #0
   1b358:	bne	1b374 <__assert_fail@plt+0x9e7c>
   1b35c:	ldr	r3, [r4, #64]	; 0x40
   1b360:	cmp	r3, #0
   1b364:	beq	1b330 <__assert_fail@plt+0x9e38>
   1b368:	mov	r0, r4
   1b36c:	bl	155e4 <__assert_fail@plt+0x40ec>
   1b370:	b	1b330 <__assert_fail@plt+0x9e38>
   1b374:	mov	r0, r4
   1b378:	bl	172b0 <__assert_fail@plt+0x5db8>
   1b37c:	b	1b330 <__assert_fail@plt+0x9e38>
   1b380:	sub	ip, ip, r6
   1b384:	str	ip, [r4, #28]
   1b388:	mov	r2, r7
   1b38c:	sub	r1, fp, #1
   1b390:	mov	r0, r4
   1b394:	bl	19358 <__assert_fail@plt+0x7e60>
   1b398:	str	r0, [r4, #60]	; 0x3c
   1b39c:	b	1b224 <__assert_fail@plt+0x9d2c>
   1b3a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3a4:	sub	sp, sp, #14464	; 0x3880
   1b3a8:	sub	sp, sp, #52	; 0x34
   1b3ac:	mov	r9, r0
   1b3b0:	mov	r4, r1
   1b3b4:	str	r1, [sp, #4]
   1b3b8:	mov	r1, #0
   1b3bc:	str	r1, [r4, #44]	; 0x2c
   1b3c0:	str	r1, [r4, #48]	; 0x30
   1b3c4:	mov	r2, #32
   1b3c8:	add	r0, sp, #32
   1b3cc:	bl	11414 <memset@plt>
   1b3d0:	ldr	r3, [r4, #8]
   1b3d4:	cmp	r3, #0
   1b3d8:	ble	1ba2c <__assert_fail@plt+0xa534>
   1b3dc:	mov	r8, #0
   1b3e0:	str	r8, [sp, #12]
   1b3e4:	add	r3, sp, #8320	; 0x2080
   1b3e8:	str	r3, [sp, #24]
   1b3ec:	add	r3, sp, #32
   1b3f0:	str	r3, [sp, #28]
   1b3f4:	str	r9, [sp, #20]
   1b3f8:	b	1b838 <__assert_fail@plt+0xa340>
   1b3fc:	ldrb	r3, [r3, r2, lsl #3]
   1b400:	asr	r1, r3, #5
   1b404:	and	r3, r3, #31
   1b408:	ldr	ip, [sp, #28]
   1b40c:	ldr	r2, [ip, r1, lsl #2]
   1b410:	mov	r0, #1
   1b414:	orr	r3, r2, r0, lsl r3
   1b418:	str	r3, [ip, r1, lsl #2]
   1b41c:	cmp	r4, #0
   1b420:	beq	1b500 <__assert_fail@plt+0xa008>
   1b424:	tst	r4, #32
   1b428:	bne	1b5bc <__assert_fail@plt+0xa0c4>
   1b42c:	tst	r4, #128	; 0x80
   1b430:	bne	1b5e8 <__assert_fail@plt+0xa0f0>
   1b434:	tst	r4, #4
   1b438:	beq	1b49c <__assert_fail@plt+0x9fa4>
   1b43c:	cmp	r9, #1
   1b440:	beq	1b5fc <__assert_fail@plt+0xa104>
   1b444:	ldr	r2, [sp, #20]
   1b448:	ldr	r3, [r2, #92]	; 0x5c
   1b44c:	cmp	r3, #1
   1b450:	ble	1b620 <__assert_fail@plt+0xa128>
   1b454:	add	r0, sp, #32
   1b458:	add	r1, r2, #96	; 0x60
   1b45c:	ldr	lr, [r2, #60]	; 0x3c
   1b460:	sub	lr, lr, #4
   1b464:	add	r5, r2, #128	; 0x80
   1b468:	mov	ip, #0
   1b46c:	ldr	r2, [r1], #4
   1b470:	ldr	r3, [lr, #4]!
   1b474:	mvn	r3, r3
   1b478:	orr	r3, r3, r2
   1b47c:	ldr	r2, [r0]
   1b480:	and	r3, r3, r2
   1b484:	str	r3, [r0], #4
   1b488:	orr	ip, ip, r3
   1b48c:	cmp	r1, r5
   1b490:	bne	1b46c <__assert_fail@plt+0x9f74>
   1b494:	cmp	ip, #0
   1b498:	beq	1b818 <__assert_fail@plt+0xa320>
   1b49c:	tst	r4, #8
   1b4a0:	beq	1b500 <__assert_fail@plt+0xa008>
   1b4a4:	cmp	r9, #1
   1b4a8:	beq	1b654 <__assert_fail@plt+0xa15c>
   1b4ac:	ldr	r2, [sp, #20]
   1b4b0:	ldr	r3, [r2, #92]	; 0x5c
   1b4b4:	cmp	r3, #1
   1b4b8:	ble	1b678 <__assert_fail@plt+0xa180>
   1b4bc:	add	ip, sp, #32
   1b4c0:	add	r0, r2, #96	; 0x60
   1b4c4:	ldr	lr, [r2, #60]	; 0x3c
   1b4c8:	sub	lr, lr, #4
   1b4cc:	add	r4, r2, #128	; 0x80
   1b4d0:	mov	r1, #0
   1b4d4:	ldr	r3, [r0], #4
   1b4d8:	ldr	r2, [lr, #4]!
   1b4dc:	and	r2, r2, r3
   1b4e0:	ldr	r3, [ip]
   1b4e4:	bic	r3, r3, r2
   1b4e8:	str	r3, [ip], #4
   1b4ec:	orr	r1, r1, r3
   1b4f0:	cmp	r0, r4
   1b4f4:	bne	1b4d4 <__assert_fail@plt+0x9fdc>
   1b4f8:	cmp	r1, #0
   1b4fc:	beq	1b818 <__assert_fail@plt+0xa320>
   1b500:	cmp	r8, #0
   1b504:	ble	1b80c <__assert_fail@plt+0xa314>
   1b508:	add	r5, sp, #124	; 0x7c
   1b50c:	add	r6, sp, #8320	; 0x2080
   1b510:	mov	r7, #0
   1b514:	b	1b724 <__assert_fail@plt+0xa22c>
   1b518:	ldr	ip, [r3, r2, lsl #3]
   1b51c:	add	r0, sp, #32
   1b520:	sub	r1, ip, #4
   1b524:	add	ip, ip, #28
   1b528:	ldr	r3, [r0]
   1b52c:	ldr	r2, [r1, #4]!
   1b530:	orr	r3, r3, r2
   1b534:	str	r3, [r0], #4
   1b538:	cmp	r1, ip
   1b53c:	bne	1b528 <__assert_fail@plt+0xa030>
   1b540:	b	1b41c <__assert_fail@plt+0x9f24>
   1b544:	ldr	r2, [sp, #20]
   1b548:	ldr	r3, [r2, #92]	; 0x5c
   1b54c:	cmp	r3, #1
   1b550:	ble	1b5a8 <__assert_fail@plt+0xa0b0>
   1b554:	ldr	ip, [r2, #60]	; 0x3c
   1b558:	add	r0, sp, #32
   1b55c:	sub	r1, ip, #4
   1b560:	add	ip, ip, #28
   1b564:	ldr	r3, [r0]
   1b568:	ldr	r2, [r1, #4]!
   1b56c:	orr	r3, r3, r2
   1b570:	str	r3, [r0], #4
   1b574:	cmp	r1, ip
   1b578:	bne	1b564 <__assert_fail@plt+0xa06c>
   1b57c:	ldr	r3, [sp, #20]
   1b580:	ldr	r3, [r3, #128]	; 0x80
   1b584:	tst	r3, #64	; 0x40
   1b588:	ldreq	r2, [sp, #32]
   1b58c:	biceq	r2, r2, #1024	; 0x400
   1b590:	streq	r2, [sp, #32]
   1b594:	tst	r3, #128	; 0x80
   1b598:	ldrne	r3, [sp, #32]
   1b59c:	bicne	r3, r3, #1
   1b5a0:	strne	r3, [sp, #32]
   1b5a4:	b	1b41c <__assert_fail@plt+0x9f24>
   1b5a8:	mov	r2, #32
   1b5ac:	mvn	r1, #0
   1b5b0:	ldr	r0, [sp, #28]
   1b5b4:	bl	11414 <memset@plt>
   1b5b8:	b	1b57c <__assert_fail@plt+0xa084>
   1b5bc:	ldr	r5, [sp, #32]
   1b5c0:	and	r5, r5, #1024	; 0x400
   1b5c4:	mov	r2, #32
   1b5c8:	mov	r1, #0
   1b5cc:	ldr	r0, [sp, #28]
   1b5d0:	bl	11414 <memset@plt>
   1b5d4:	cmp	r5, #0
   1b5d8:	beq	1b818 <__assert_fail@plt+0xa320>
   1b5dc:	mov	r3, #1024	; 0x400
   1b5e0:	str	r3, [sp, #32]
   1b5e4:	b	1b42c <__assert_fail@plt+0x9f34>
   1b5e8:	mov	r2, #32
   1b5ec:	mov	r1, #0
   1b5f0:	ldr	r0, [sp, #28]
   1b5f4:	bl	11414 <memset@plt>
   1b5f8:	b	1b818 <__assert_fail@plt+0xa320>
   1b5fc:	ldr	r3, [sp, #16]
   1b600:	ldrb	r3, [r3, #6]
   1b604:	tst	r3, #64	; 0x40
   1b608:	bne	1b444 <__assert_fail@plt+0x9f4c>
   1b60c:	mov	r2, #32
   1b610:	mov	r1, #0
   1b614:	ldr	r0, [sp, #28]
   1b618:	bl	11414 <memset@plt>
   1b61c:	b	1b818 <__assert_fail@plt+0xa320>
   1b620:	add	r1, sp, #32
   1b624:	ldr	r3, [sp, #20]
   1b628:	add	r2, r3, #96	; 0x60
   1b62c:	add	r0, r3, #128	; 0x80
   1b630:	mov	ip, #0
   1b634:	ldr	r3, [r2], #4
   1b638:	ldr	lr, [r1]
   1b63c:	and	r3, r3, lr
   1b640:	str	r3, [r1], #4
   1b644:	orr	ip, ip, r3
   1b648:	cmp	r2, r0
   1b64c:	bne	1b634 <__assert_fail@plt+0xa13c>
   1b650:	b	1b494 <__assert_fail@plt+0x9f9c>
   1b654:	ldr	r3, [sp, #16]
   1b658:	ldrb	r3, [r3, #6]
   1b65c:	tst	r3, #64	; 0x40
   1b660:	beq	1b4ac <__assert_fail@plt+0x9fb4>
   1b664:	mov	r2, #32
   1b668:	mov	r1, #0
   1b66c:	ldr	r0, [sp, #28]
   1b670:	bl	11414 <memset@plt>
   1b674:	b	1b818 <__assert_fail@plt+0xa320>
   1b678:	add	r0, sp, #32
   1b67c:	ldr	r3, [sp, #20]
   1b680:	add	r2, r3, #96	; 0x60
   1b684:	add	ip, r3, #128	; 0x80
   1b688:	mov	r1, #0
   1b68c:	ldr	lr, [r2], #4
   1b690:	ldr	r3, [r0]
   1b694:	bic	r3, r3, lr
   1b698:	str	r3, [r0], #4
   1b69c:	orr	r1, r1, r3
   1b6a0:	cmp	r2, ip
   1b6a4:	bne	1b68c <__assert_fail@plt+0xa194>
   1b6a8:	b	1b4f8 <__assert_fail@plt+0xa000>
   1b6ac:	ldr	r3, [sp, #16]
   1b6b0:	ldrb	r2, [r3]
   1b6b4:	asr	r1, r2, #5
   1b6b8:	lsl	r3, r7, #5
   1b6bc:	add	r3, r3, r1, lsl #2
   1b6c0:	add	r1, sp, #14464	; 0x3880
   1b6c4:	add	r1, r1, #48	; 0x30
   1b6c8:	add	r3, r1, r3
   1b6cc:	sub	r3, r3, #14336	; 0x3800
   1b6d0:	and	r2, r2, #31
   1b6d4:	ldr	r3, [r3, #-48]	; 0xffffffd0
   1b6d8:	lsr	r2, r3, r2
   1b6dc:	tst	r2, #1
   1b6e0:	beq	1b710 <__assert_fail@plt+0xa218>
   1b6e4:	b	1b72c <__assert_fail@plt+0xa234>
   1b6e8:	ldr	r3, [sp, #4]
   1b6ec:	ldr	r3, [r3, #12]
   1b6f0:	ldr	r2, [sp, #8]
   1b6f4:	ldr	r1, [r3, r2]
   1b6f8:	mov	r0, r6
   1b6fc:	bl	18a40 <__assert_fail@plt+0x7548>
   1b700:	cmp	r0, #0
   1b704:	beq	1b940 <__assert_fail@plt+0xa448>
   1b708:	cmp	r4, #0
   1b70c:	beq	1b810 <__assert_fail@plt+0xa318>
   1b710:	add	r7, r7, #1
   1b714:	add	r5, r5, #32
   1b718:	add	r6, r6, #12
   1b71c:	cmp	r7, r8
   1b720:	bge	1b810 <__assert_fail@plt+0xa318>
   1b724:	cmp	r9, #1
   1b728:	beq	1b6ac <__assert_fail@plt+0xa1b4>
   1b72c:	add	r0, sp, #32
   1b730:	add	r4, sp, #64	; 0x40
   1b734:	add	sl, r5, #32
   1b738:	mov	r1, r5
   1b73c:	mov	lr, r0
   1b740:	mov	ip, #0
   1b744:	ldr	r3, [lr], #4
   1b748:	ldr	r2, [r1, #4]!
   1b74c:	and	r3, r3, r2
   1b750:	str	r3, [r4], #4
   1b754:	orr	ip, ip, r3
   1b758:	cmp	r1, sl
   1b75c:	bne	1b744 <__assert_fail@plt+0xa24c>
   1b760:	cmp	ip, #0
   1b764:	beq	1b710 <__assert_fail@plt+0xa218>
   1b768:	add	fp, sp, #96	; 0x60
   1b76c:	mov	ip, r5
   1b770:	mov	r4, #0
   1b774:	mov	sl, r4
   1b778:	ldr	r3, [r0]
   1b77c:	ldr	r2, [ip, #4]!
   1b780:	bic	lr, r2, r3
   1b784:	str	lr, [fp], #4
   1b788:	orr	sl, sl, lr
   1b78c:	bic	r3, r3, r2
   1b790:	str	r3, [r0], #4
   1b794:	orr	r4, r4, r3
   1b798:	cmp	ip, r1
   1b79c:	bne	1b778 <__assert_fail@plt+0xa280>
   1b7a0:	cmp	sl, #0
   1b7a4:	beq	1b6e8 <__assert_fail@plt+0xa1f0>
   1b7a8:	add	r3, sp, #14464	; 0x3880
   1b7ac:	add	r3, r3, #48	; 0x30
   1b7b0:	add	ip, r3, r8, lsl #5
   1b7b4:	sub	ip, ip, #14336	; 0x3800
   1b7b8:	sub	ip, ip, #48	; 0x30
   1b7bc:	add	lr, sp, #96	; 0x60
   1b7c0:	ldm	lr!, {r0, r1, r2, r3}
   1b7c4:	stmia	ip!, {r0, r1, r2, r3}
   1b7c8:	ldm	lr, {r0, r1, r2, r3}
   1b7cc:	stm	ip, {r0, r1, r2, r3}
   1b7d0:	add	ip, r5, #4
   1b7d4:	add	lr, sp, #64	; 0x40
   1b7d8:	ldm	lr!, {r0, r1, r2, r3}
   1b7dc:	stmia	ip!, {r0, r1, r2, r3}
   1b7e0:	ldm	lr, {r0, r1, r2, r3}
   1b7e4:	stm	ip, {r0, r1, r2, r3}
   1b7e8:	add	r0, r8, r8, lsl #1
   1b7ec:	mov	r1, r6
   1b7f0:	ldr	r3, [sp, #24]
   1b7f4:	add	r0, r3, r0, lsl #2
   1b7f8:	bl	16ae8 <__assert_fail@plt+0x55f0>
   1b7fc:	cmp	r0, #0
   1b800:	bne	1b940 <__assert_fail@plt+0xa448>
   1b804:	add	r8, r8, #1
   1b808:	b	1b6e8 <__assert_fail@plt+0xa1f0>
   1b80c:	mov	r7, #0
   1b810:	cmp	r8, r7
   1b814:	beq	1b8d4 <__assert_fail@plt+0xa3dc>
   1b818:	ldr	r3, [sp, #12]
   1b81c:	add	r3, r3, #1
   1b820:	mov	r2, r3
   1b824:	str	r3, [sp, #12]
   1b828:	ldr	r3, [sp, #4]
   1b82c:	ldr	r3, [r3, #8]
   1b830:	cmp	r2, r3
   1b834:	bge	1b978 <__assert_fail@plt+0xa480>
   1b838:	ldr	r2, [sp, #12]
   1b83c:	lsl	r3, r2, #2
   1b840:	str	r3, [sp, #8]
   1b844:	ldr	r3, [sp, #4]
   1b848:	ldr	r3, [r3, #12]
   1b84c:	ldr	r2, [r3, r2, lsl #2]
   1b850:	ldr	r3, [sp, #20]
   1b854:	ldr	r3, [r3]
   1b858:	add	r1, r3, r2, lsl #3
   1b85c:	str	r1, [sp, #16]
   1b860:	ldrb	r9, [r1, #4]
   1b864:	ldr	r4, [r1, #4]
   1b868:	lsl	r4, r4, #14
   1b86c:	lsr	r4, r4, #22
   1b870:	cmp	r9, #1
   1b874:	beq	1b3fc <__assert_fail@plt+0x9f04>
   1b878:	cmp	r9, #3
   1b87c:	beq	1b518 <__assert_fail@plt+0xa020>
   1b880:	cmp	r9, #5
   1b884:	beq	1b544 <__assert_fail@plt+0xa04c>
   1b888:	cmp	r9, #7
   1b88c:	bne	1b818 <__assert_fail@plt+0xa320>
   1b890:	mvn	r3, #0
   1b894:	ldr	r2, [sp, #28]
   1b898:	str	r3, [r2]
   1b89c:	str	r3, [r2, #4]
   1b8a0:	str	r3, [r2, #8]
   1b8a4:	str	r3, [r2, #12]
   1b8a8:	ldr	r3, [sp, #20]
   1b8ac:	ldr	r2, [r3, #128]	; 0x80
   1b8b0:	tst	r2, #64	; 0x40
   1b8b4:	ldreq	r3, [sp, #32]
   1b8b8:	biceq	r3, r3, #1024	; 0x400
   1b8bc:	streq	r3, [sp, #32]
   1b8c0:	tst	r2, #128	; 0x80
   1b8c4:	ldrne	r3, [sp, #32]
   1b8c8:	bicne	r3, r3, #1
   1b8cc:	strne	r3, [sp, #32]
   1b8d0:	b	1b41c <__assert_fail@plt+0x9f24>
   1b8d4:	add	r3, sp, #14464	; 0x3880
   1b8d8:	add	r3, r3, #48	; 0x30
   1b8dc:	add	ip, r3, r8, lsl #5
   1b8e0:	sub	ip, ip, #14336	; 0x3800
   1b8e4:	sub	ip, ip, #48	; 0x30
   1b8e8:	add	lr, sp, #32
   1b8ec:	ldm	lr!, {r0, r1, r2, r3}
   1b8f0:	stmia	ip!, {r0, r1, r2, r3}
   1b8f4:	ldm	lr, {r0, r1, r2, r3}
   1b8f8:	stm	ip, {r0, r1, r2, r3}
   1b8fc:	ldr	r3, [sp, #4]
   1b900:	ldr	r3, [r3, #12]
   1b904:	add	r0, r8, r8, lsl #1
   1b908:	ldr	r2, [sp, #8]
   1b90c:	ldr	r1, [r3, r2]
   1b910:	ldr	r3, [sp, #24]
   1b914:	add	r0, r3, r0, lsl #2
   1b918:	bl	16618 <__assert_fail@plt+0x5120>
   1b91c:	cmp	r0, #0
   1b920:	bne	1b93c <__assert_fail@plt+0xa444>
   1b924:	add	r8, r8, #1
   1b928:	mov	r2, #32
   1b92c:	mov	r1, #0
   1b930:	ldr	r0, [sp, #28]
   1b934:	bl	11414 <memset@plt>
   1b938:	b	1b818 <__assert_fail@plt+0xa320>
   1b93c:	mov	r8, r7
   1b940:	cmp	r8, #0
   1b944:	ble	1b968 <__assert_fail@plt+0xa470>
   1b948:	add	r4, sp, #8320	; 0x2080
   1b94c:	mov	r5, #0
   1b950:	ldr	r0, [r4, #8]
   1b954:	bl	13340 <__assert_fail@plt+0x1e48>
   1b958:	add	r5, r5, #1
   1b95c:	add	r4, r4, #12
   1b960:	cmp	r5, r8
   1b964:	bne	1b950 <__assert_fail@plt+0xa458>
   1b968:	mov	r0, #0
   1b96c:	add	sp, sp, #14464	; 0x3880
   1b970:	add	sp, sp, #52	; 0x34
   1b974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b978:	ldr	r9, [sp, #20]
   1b97c:	cmp	r8, #0
   1b980:	ble	1ba24 <__assert_fail@plt+0xa52c>
   1b984:	add	r1, r8, #1
   1b988:	add	r0, sp, #11392	; 0x2c80
   1b98c:	add	r0, r0, #32
   1b990:	bl	1665c <__assert_fail@plt+0x5164>
   1b994:	add	r3, sp, #14464	; 0x3880
   1b998:	add	r3, r3, #44	; 0x2c
   1b99c:	str	r0, [r3]
   1b9a0:	cmp	r0, #0
   1b9a4:	bne	1baa0 <__assert_fail@plt+0xa5a8>
   1b9a8:	mov	r2, #32
   1b9ac:	mov	r1, #0
   1b9b0:	add	r0, sp, #11392	; 0x2c80
   1b9b4:	bl	11414 <memset@plt>
   1b9b8:	add	r3, sp, #8320	; 0x2080
   1b9bc:	str	r3, [sp, #20]
   1b9c0:	add	r6, sp, #124	; 0x7c
   1b9c4:	add	r2, sp, #12416	; 0x3080
   1b9c8:	add	r2, r2, #48	; 0x30
   1b9cc:	sub	fp, r2, #4
   1b9d0:	add	r2, sp, #13440	; 0x3480
   1b9d4:	add	r2, r2, #48	; 0x30
   1b9d8:	sub	sl, r2, #8
   1b9dc:	mov	r7, r3
   1b9e0:	mov	r3, #0
   1b9e4:	str	r3, [sp, #16]
   1b9e8:	str	r3, [sp, #8]
   1b9ec:	add	r3, sp, #11392	; 0x2c80
   1b9f0:	add	r3, r3, #48	; 0x30
   1b9f4:	sub	r3, r3, #4
   1b9f8:	str	r3, [sp, #12]
   1b9fc:	add	r3, sp, #11392	; 0x2c80
   1ba00:	add	r3, r3, #36	; 0x24
   1ba04:	mov	r2, #0
   1ba08:	str	r2, [r3]
   1ba0c:	mov	r5, r7
   1ba10:	ldr	r3, [r7, #4]
   1ba14:	cmp	r3, r2
   1ba18:	ble	1bad8 <__assert_fail@plt+0xa5e0>
   1ba1c:	mov	r4, r2
   1ba20:	b	1ba5c <__assert_fail@plt+0xa564>
   1ba24:	movne	r0, #0
   1ba28:	bne	1b96c <__assert_fail@plt+0xa474>
   1ba2c:	mov	r1, #256	; 0x100
   1ba30:	mov	r0, #4
   1ba34:	bl	236d0 <__assert_fail@plt+0x121d8>
   1ba38:	ldr	r3, [sp, #4]
   1ba3c:	str	r0, [r3, #44]	; 0x2c
   1ba40:	adds	r0, r0, #0
   1ba44:	movne	r0, #1
   1ba48:	b	1b96c <__assert_fail@plt+0xa474>
   1ba4c:	add	r4, r4, #1
   1ba50:	ldr	r3, [r5, #4]
   1ba54:	cmp	r3, r4
   1ba58:	ble	1bad8 <__assert_fail@plt+0xa5e0>
   1ba5c:	ldr	r3, [r5, #8]
   1ba60:	ldr	r2, [r3, r4, lsl #2]
   1ba64:	ldr	r3, [r9, #12]
   1ba68:	ldr	r1, [r3, r2, lsl #2]
   1ba6c:	cmn	r1, #1
   1ba70:	beq	1ba4c <__assert_fail@plt+0xa554>
   1ba74:	add	r1, r1, r1, lsl #1
   1ba78:	ldr	r3, [r9, #24]
   1ba7c:	add	r1, r3, r1, lsl #2
   1ba80:	add	r0, sp, #11392	; 0x2c80
   1ba84:	add	r0, r0, #32
   1ba88:	bl	18f84 <__assert_fail@plt+0x7a8c>
   1ba8c:	add	r3, sp, #14464	; 0x3880
   1ba90:	add	r3, r3, #44	; 0x2c
   1ba94:	str	r0, [r3]
   1ba98:	cmp	r0, #0
   1ba9c:	beq	1ba4c <__assert_fail@plt+0xa554>
   1baa0:	add	r3, sp, #11392	; 0x2c80
   1baa4:	add	r3, r3, #40	; 0x28
   1baa8:	ldr	r0, [r3]
   1baac:	bl	13340 <__assert_fail@plt+0x1e48>
   1bab0:	add	r4, sp, #8320	; 0x2080
   1bab4:	mov	r5, #0
   1bab8:	ldr	r0, [r4, #8]
   1babc:	bl	13340 <__assert_fail@plt+0x1e48>
   1bac0:	add	r5, r5, #1
   1bac4:	add	r4, r4, #12
   1bac8:	cmp	r5, r8
   1bacc:	bne	1bab8 <__assert_fail@plt+0xa5c0>
   1bad0:	mov	r0, #0
   1bad4:	b	1b96c <__assert_fail@plt+0xa474>
   1bad8:	mov	r3, #0
   1badc:	add	r2, sp, #11392	; 0x2c80
   1bae0:	add	r2, r2, #32
   1bae4:	mov	r1, r9
   1bae8:	add	r0, sp, #14464	; 0x3880
   1baec:	add	r0, r0, #44	; 0x2c
   1baf0:	bl	182a0 <__assert_fail@plt+0x6da8>
   1baf4:	mov	r4, r0
   1baf8:	str	r0, [sl, #4]!
   1bafc:	cmp	r0, #0
   1bb00:	beq	1bba0 <__assert_fail@plt+0xa6a8>
   1bb04:	ldrsb	r3, [r4, #52]	; 0x34
   1bb08:	cmp	r3, #0
   1bb0c:	blt	1bbb8 <__assert_fail@plt+0xa6c0>
   1bb10:	str	r4, [fp]
   1bb14:	ldr	r3, [sp, #12]
   1bb18:	ldr	r2, [sp, #8]
   1bb1c:	str	r4, [r3, r2, lsl #2]
   1bb20:	add	r4, sp, #11392	; 0x2c80
   1bb24:	add	r0, r6, #32
   1bb28:	mov	r1, r4
   1bb2c:	ldr	r3, [r1]
   1bb30:	ldr	r2, [r6, #4]!
   1bb34:	orr	r3, r3, r2
   1bb38:	str	r3, [r1], #4
   1bb3c:	cmp	r0, r6
   1bb40:	bne	1bb2c <__assert_fail@plt+0xa634>
   1bb44:	ldr	r3, [sp, #8]
   1bb48:	add	r3, r3, #1
   1bb4c:	str	r3, [sp, #8]
   1bb50:	add	r7, r7, #12
   1bb54:	add	fp, fp, #4
   1bb58:	mov	r6, r0
   1bb5c:	cmp	r3, r8
   1bb60:	bne	1b9fc <__assert_fail@plt+0xa504>
   1bb64:	ldr	r3, [sp, #16]
   1bb68:	cmp	r3, #0
   1bb6c:	bne	1bcf0 <__assert_fail@plt+0xa7f8>
   1bb70:	mov	r1, #256	; 0x100
   1bb74:	mov	r0, #4
   1bb78:	bl	236d0 <__assert_fail@plt+0x121d8>
   1bb7c:	ldr	r3, [sp, #4]
   1bb80:	str	r0, [r3, #44]	; 0x2c
   1bb84:	cmp	r0, #0
   1bb88:	beq	1baa0 <__assert_fail@plt+0xa5a8>
   1bb8c:	mov	r2, r0
   1bb90:	add	r1, r9, #96	; 0x60
   1bb94:	add	r7, sp, #128	; 0x80
   1bb98:	add	sl, r0, #1024	; 0x400
   1bb9c:	b	1bcd8 <__assert_fail@plt+0xa7e0>
   1bba0:	add	r3, sp, #14464	; 0x3880
   1bba4:	add	r3, r3, #44	; 0x2c
   1bba8:	ldr	r3, [r3]
   1bbac:	cmp	r3, #0
   1bbb0:	beq	1bb04 <__assert_fail@plt+0xa60c>
   1bbb4:	b	1baa0 <__assert_fail@plt+0xa5a8>
   1bbb8:	mov	r3, #1
   1bbbc:	add	r2, sp, #11392	; 0x2c80
   1bbc0:	add	r2, r2, #32
   1bbc4:	mov	r1, r9
   1bbc8:	add	r0, sp, #14464	; 0x3880
   1bbcc:	add	r0, r0, #44	; 0x2c
   1bbd0:	bl	182a0 <__assert_fail@plt+0x6da8>
   1bbd4:	str	r0, [fp]
   1bbd8:	cmp	r0, #0
   1bbdc:	beq	1bc44 <__assert_fail@plt+0xa74c>
   1bbe0:	cmp	r4, r0
   1bbe4:	beq	1bbfc <__assert_fail@plt+0xa704>
   1bbe8:	ldr	r3, [r9, #92]	; 0x5c
   1bbec:	ldr	r2, [sp, #16]
   1bbf0:	cmp	r3, #1
   1bbf4:	movgt	r2, #1
   1bbf8:	str	r2, [sp, #16]
   1bbfc:	mov	r3, #2
   1bc00:	add	r2, sp, #11392	; 0x2c80
   1bc04:	add	r2, r2, #32
   1bc08:	mov	r1, r9
   1bc0c:	add	r0, sp, #14464	; 0x3880
   1bc10:	add	r0, r0, #44	; 0x2c
   1bc14:	bl	182a0 <__assert_fail@plt+0x6da8>
   1bc18:	ldr	r3, [sp, #12]
   1bc1c:	ldr	r2, [sp, #8]
   1bc20:	str	r0, [r3, r2, lsl #2]
   1bc24:	cmp	r0, #0
   1bc28:	bne	1bb20 <__assert_fail@plt+0xa628>
   1bc2c:	add	r3, sp, #14464	; 0x3880
   1bc30:	add	r3, r3, #44	; 0x2c
   1bc34:	ldr	r3, [r3]
   1bc38:	cmp	r3, #0
   1bc3c:	beq	1bb20 <__assert_fail@plt+0xa628>
   1bc40:	b	1baa0 <__assert_fail@plt+0xa5a8>
   1bc44:	add	r3, sp, #14464	; 0x3880
   1bc48:	add	r3, r3, #44	; 0x2c
   1bc4c:	ldr	r3, [r3]
   1bc50:	cmp	r3, #0
   1bc54:	beq	1bbe0 <__assert_fail@plt+0xa6e8>
   1bc58:	b	1baa0 <__assert_fail@plt+0xa5a8>
   1bc5c:	mov	r3, #0
   1bc60:	b	1bca0 <__assert_fail@plt+0xa7a8>
   1bc64:	lsl	lr, lr, #1
   1bc68:	add	r8, r8, #4
   1bc6c:	lsrs	r6, r6, #1
   1bc70:	beq	1bcc4 <__assert_fail@plt+0xa7cc>
   1bc74:	tst	r6, #1
   1bc78:	beq	1bc64 <__assert_fail@plt+0xa76c>
   1bc7c:	mov	r5, r7
   1bc80:	ldr	r3, [r7]
   1bc84:	tst	lr, r3
   1bc88:	bne	1bc5c <__assert_fail@plt+0xa764>
   1bc8c:	mov	r3, #0
   1bc90:	add	r3, r3, #1
   1bc94:	ldr	ip, [r5, r3, lsl #5]
   1bc98:	tst	lr, ip
   1bc9c:	beq	1bc90 <__assert_fail@plt+0xa798>
   1bca0:	ldr	ip, [r1]
   1bca4:	tst	lr, ip
   1bca8:	add	ip, sp, #14464	; 0x3880
   1bcac:	add	ip, ip, #48	; 0x30
   1bcb0:	add	r3, ip, r3, lsl #2
   1bcb4:	ldrne	r3, [r3, #-2052]	; 0xfffff7fc
   1bcb8:	ldreq	r3, [r3, #-1028]	; 0xfffffbfc
   1bcbc:	str	r3, [r8]
   1bcc0:	b	1bc64 <__assert_fail@plt+0xa76c>
   1bcc4:	add	r2, r2, #128	; 0x80
   1bcc8:	add	r1, r1, #4
   1bccc:	add	r7, r7, #4
   1bcd0:	cmp	r2, sl
   1bcd4:	beq	1bd54 <__assert_fail@plt+0xa85c>
   1bcd8:	ldr	r6, [r4], #4
   1bcdc:	cmp	r6, #0
   1bce0:	beq	1bcc4 <__assert_fail@plt+0xa7cc>
   1bce4:	mov	r8, r2
   1bce8:	mov	lr, #1
   1bcec:	b	1bc74 <__assert_fail@plt+0xa77c>
   1bcf0:	mov	r1, #512	; 0x200
   1bcf4:	mov	r0, #4
   1bcf8:	bl	236d0 <__assert_fail@plt+0x121d8>
   1bcfc:	ldr	r3, [sp, #4]
   1bd00:	str	r0, [r3, #48]	; 0x30
   1bd04:	cmp	r0, #0
   1bd08:	beq	1baa0 <__assert_fail@plt+0xa5a8>
   1bd0c:	mov	r5, r0
   1bd10:	add	ip, sp, #128	; 0x80
   1bd14:	add	r7, r0, #1024	; 0x400
   1bd18:	ldr	r6, [r4], #4
   1bd1c:	cmp	r6, #0
   1bd20:	beq	1bd44 <__assert_fail@plt+0xa84c>
   1bd24:	mov	r8, r5
   1bd28:	mov	r1, #1
   1bd2c:	tst	r6, #1
   1bd30:	bne	1bd7c <__assert_fail@plt+0xa884>
   1bd34:	lsl	r1, r1, #1
   1bd38:	add	r8, r8, #4
   1bd3c:	lsrs	r6, r6, #1
   1bd40:	bne	1bd2c <__assert_fail@plt+0xa834>
   1bd44:	add	r5, r5, #128	; 0x80
   1bd48:	add	ip, ip, #4
   1bd4c:	cmp	r7, r5
   1bd50:	bne	1bd18 <__assert_fail@plt+0xa820>
   1bd54:	add	r3, sp, #11392	; 0x2c80
   1bd58:	ldr	r3, [r3]
   1bd5c:	tst	r3, #1024	; 0x400
   1bd60:	beq	1be0c <__assert_fail@plt+0xa914>
   1bd64:	ldr	r3, [sp, #128]	; 0x80
   1bd68:	tst	r3, #1024	; 0x400
   1bd6c:	bne	1bde8 <__assert_fail@plt+0xa8f0>
   1bd70:	mov	r3, #0
   1bd74:	add	r2, sp, #128	; 0x80
   1bd78:	b	1bdd4 <__assert_fail@plt+0xa8dc>
   1bd7c:	mov	lr, ip
   1bd80:	ldr	r3, [ip]
   1bd84:	tst	r1, r3
   1bd88:	bne	1bdc0 <__assert_fail@plt+0xa8c8>
   1bd8c:	mov	r3, #0
   1bd90:	add	r3, r3, #1
   1bd94:	ldr	r2, [lr, r3, lsl #5]
   1bd98:	tst	r1, r2
   1bd9c:	beq	1bd90 <__assert_fail@plt+0xa898>
   1bda0:	add	r2, sp, #14464	; 0x3880
   1bda4:	add	r2, r2, #48	; 0x30
   1bda8:	add	r3, r2, r3, lsl #2
   1bdac:	ldr	r2, [r3, #-1028]	; 0xfffffbfc
   1bdb0:	str	r2, [r8]
   1bdb4:	ldr	r3, [r3, #-2052]	; 0xfffff7fc
   1bdb8:	str	r3, [r8, #1024]	; 0x400
   1bdbc:	b	1bd34 <__assert_fail@plt+0xa83c>
   1bdc0:	mov	r3, #0
   1bdc4:	b	1bda0 <__assert_fail@plt+0xa8a8>
   1bdc8:	ldr	r1, [r2, r3, lsl #5]
   1bdcc:	tst	r1, #1024	; 0x400
   1bdd0:	bne	1bdec <__assert_fail@plt+0xa8f4>
   1bdd4:	add	r3, r3, #1
   1bdd8:	ldr	r1, [sp, #8]
   1bddc:	cmp	r1, r3
   1bde0:	bne	1bdc8 <__assert_fail@plt+0xa8d0>
   1bde4:	b	1be0c <__assert_fail@plt+0xa914>
   1bde8:	mov	r3, #0
   1bdec:	add	r2, sp, #14464	; 0x3880
   1bdf0:	add	r2, r2, #48	; 0x30
   1bdf4:	add	r3, r2, r3, lsl #2
   1bdf8:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   1bdfc:	str	r3, [r0, #40]	; 0x28
   1be00:	ldr	r2, [sp, #16]
   1be04:	cmp	r2, #0
   1be08:	strne	r3, [r0, #1064]	; 0x428
   1be0c:	add	r3, sp, #11392	; 0x2c80
   1be10:	add	r3, r3, #40	; 0x28
   1be14:	ldr	r0, [r3]
   1be18:	bl	13340 <__assert_fail@plt+0x1e48>
   1be1c:	mov	r4, #0
   1be20:	ldr	r5, [sp, #20]
   1be24:	ldr	r6, [sp, #8]
   1be28:	ldr	r0, [r5, #8]
   1be2c:	bl	13340 <__assert_fail@plt+0x1e48>
   1be30:	add	r4, r4, #1
   1be34:	add	r5, r5, #12
   1be38:	cmp	r6, r4
   1be3c:	bne	1be28 <__assert_fail@plt+0xa930>
   1be40:	mov	r0, #1
   1be44:	b	1b96c <__assert_fail@plt+0xa474>
   1be48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be4c:	sub	sp, sp, #300	; 0x12c
   1be50:	ldr	r3, [r0]
   1be54:	str	r3, [sp, #4]
   1be58:	ldr	r3, [r3, #92]	; 0x5c
   1be5c:	cmp	r3, #1
   1be60:	ldreq	r3, [r0, #12]
   1be64:	lsreq	r3, r3, #22
   1be68:	andeq	r3, r3, #1
   1be6c:	movne	r3, #0
   1be70:	mov	sl, r3
   1be74:	ldr	r3, [r1, #8]
   1be78:	cmp	r3, #0
   1be7c:	ble	1c1b8 <__assert_fail@plt+0xacc0>
   1be80:	mov	r8, r2
   1be84:	str	r1, [sp, #16]
   1be88:	str	r0, [sp, #20]
   1be8c:	mov	r3, #0
   1be90:	str	r3, [sp, #8]
   1be94:	ldr	fp, [pc, #1020]	; 1c298 <__assert_fail@plt+0xada0>
   1be98:	b	1c14c <__assert_fail@plt+0xac54>
   1be9c:	ldrb	r5, [r2, r4, lsl #3]
   1bea0:	strb	r3, [r8, r5]
   1bea4:	cmp	sl, #0
   1bea8:	beq	1becc <__assert_fail@plt+0xa9d4>
   1beac:	add	r3, r5, #128	; 0x80
   1beb0:	cmp	r3, fp
   1beb4:	bhi	1bec4 <__assert_fail@plt+0xa9cc>
   1beb8:	bl	1136c <__ctype_tolower_loc@plt>
   1bebc:	ldr	r3, [r0]
   1bec0:	ldr	r5, [r3, r5, lsl #2]
   1bec4:	mov	r3, #1
   1bec8:	strb	r3, [r8, r5]
   1becc:	ldr	r3, [sp, #20]
   1bed0:	ldr	r3, [r3, #12]
   1bed4:	tst	r3, #4194304	; 0x400000
   1bed8:	beq	1c12c <__assert_fail@plt+0xac34>
   1bedc:	ldr	ip, [sp, #4]
   1bee0:	ldr	r3, [ip, #92]	; 0x5c
   1bee4:	cmp	r3, #1
   1bee8:	ble	1c12c <__assert_fail@plt+0xac34>
   1beec:	ldr	r3, [ip]
   1bef0:	ldrb	r3, [r3, r4, lsl #3]
   1bef4:	strb	r3, [sp, #40]	; 0x28
   1bef8:	add	r1, r4, #1
   1befc:	ldr	r3, [ip, #8]
   1bf00:	cmp	r1, r3
   1bf04:	bcs	1bfd8 <__assert_fail@plt+0xaae0>
   1bf08:	ldr	r0, [sp, #12]
   1bf0c:	add	r3, r0, #8
   1bf10:	ldr	r2, [ip]
   1bf14:	add	r3, r2, r3
   1bf18:	ldr	r2, [r3, #4]
   1bf1c:	bic	r2, r2, #-16777216	; 0xff000000
   1bf20:	bic	r2, r2, #14614528	; 0xdf0000
   1bf24:	bic	r2, r2, #65280	; 0xff00
   1bf28:	ldr	lr, [pc, #876]	; 1c29c <__assert_fail@plt+0xada4>
   1bf2c:	cmp	r2, lr
   1bf30:	bne	1bfe0 <__assert_fail@plt+0xaae8>
   1bf34:	add	r0, r0, #16
   1bf38:	add	r4, sp, #41	; 0x29
   1bf3c:	ldrb	r3, [r3]
   1bf40:	strb	r3, [r4], #1
   1bf44:	add	r1, r1, #1
   1bf48:	ldr	r3, [ip, #8]
   1bf4c:	cmp	r1, r3
   1bf50:	bcs	1bf7c <__assert_fail@plt+0xaa84>
   1bf54:	ldr	r3, [ip]
   1bf58:	add	r3, r3, r0
   1bf5c:	add	r0, r0, #8
   1bf60:	ldr	r2, [r3, #4]
   1bf64:	bic	r2, r2, #-16777216	; 0xff000000
   1bf68:	bic	r2, r2, #14614528	; 0xdf0000
   1bf6c:	bic	r2, r2, #65280	; 0xff00
   1bf70:	ldr	lr, [pc, #804]	; 1c29c <__assert_fail@plt+0xada4>
   1bf74:	cmp	r2, lr
   1bf78:	beq	1bf3c <__assert_fail@plt+0xaa44>
   1bf7c:	mov	r3, #0
   1bf80:	str	r3, [sp, #32]
   1bf84:	str	r3, [sp, #36]	; 0x24
   1bf88:	add	r3, sp, #40	; 0x28
   1bf8c:	sub	r4, r4, r3
   1bf90:	add	r3, sp, #32
   1bf94:	mov	r2, r4
   1bf98:	add	r1, sp, #40	; 0x28
   1bf9c:	add	r0, sp, #28
   1bfa0:	bl	135c4 <__assert_fail@plt+0x20cc>
   1bfa4:	cmp	r4, r0
   1bfa8:	bne	1c12c <__assert_fail@plt+0xac34>
   1bfac:	ldr	r0, [sp, #28]
   1bfb0:	bl	11258 <towlower@plt>
   1bfb4:	add	r2, sp, #32
   1bfb8:	mov	r1, r0
   1bfbc:	add	r0, sp, #40	; 0x28
   1bfc0:	bl	111a4 <wcrtomb@plt>
   1bfc4:	cmn	r0, #1
   1bfc8:	ldrbne	r3, [sp, #40]	; 0x28
   1bfcc:	movne	r2, #1
   1bfd0:	strbne	r2, [r8, r3]
   1bfd4:	b	1c12c <__assert_fail@plt+0xac34>
   1bfd8:	add	r4, sp, #41	; 0x29
   1bfdc:	b	1bf7c <__assert_fail@plt+0xaa84>
   1bfe0:	add	r4, sp, #41	; 0x29
   1bfe4:	b	1bf7c <__assert_fail@plt+0xaa84>
   1bfe8:	mov	r3, #0
   1bfec:	str	r3, [sp]
   1bff0:	mov	r9, #1
   1bff4:	b	1c05c <__assert_fail@plt+0xab64>
   1bff8:	strb	r9, [r8, r3]
   1bffc:	add	r4, r4, #1
   1c000:	add	r5, r5, #1
   1c004:	add	r6, r6, #4
   1c008:	cmp	r4, #32
   1c00c:	beq	1c048 <__assert_fail@plt+0xab50>
   1c010:	lsr	r3, r7, r4
   1c014:	tst	r3, #1
   1c018:	beq	1bffc <__assert_fail@plt+0xab04>
   1c01c:	strb	r9, [r8, r5]
   1c020:	cmp	sl, #0
   1c024:	beq	1bffc <__assert_fail@plt+0xab04>
   1c028:	add	r3, r5, #128	; 0x80
   1c02c:	cmp	r3, fp
   1c030:	movhi	r3, r5
   1c034:	bhi	1bff8 <__assert_fail@plt+0xab00>
   1c038:	bl	1136c <__ctype_tolower_loc@plt>
   1c03c:	ldr	r3, [r0]
   1c040:	ldr	r3, [r3, r6]
   1c044:	b	1bff8 <__assert_fail@plt+0xab00>
   1c048:	ldr	r3, [sp]
   1c04c:	add	r3, r3, #4
   1c050:	str	r3, [sp]
   1c054:	cmp	r3, #32
   1c058:	beq	1c12c <__assert_fail@plt+0xac34>
   1c05c:	ldr	r2, [sp]
   1c060:	lsl	r5, r2, #3
   1c064:	ldr	r3, [sp, #4]
   1c068:	ldr	r3, [r3]
   1c06c:	ldr	r1, [sp, #12]
   1c070:	ldr	r3, [r3, r1]
   1c074:	ldr	r7, [r3, r2]
   1c078:	lsl	r6, r2, #5
   1c07c:	mov	r4, #0
   1c080:	b	1c010 <__assert_fail@plt+0xab18>
   1c084:	ldr	r5, [r2, r4, lsl #3]
   1c088:	ldr	r3, [sp, #4]
   1c08c:	ldr	r3, [r3, #92]	; 0x5c
   1c090:	cmp	r3, #1
   1c094:	ble	1c0bc <__assert_fail@plt+0xabc4>
   1c098:	ldr	r3, [r5, #36]	; 0x24
   1c09c:	cmp	r3, #0
   1c0a0:	bne	1c0dc <__assert_fail@plt+0xabe4>
   1c0a4:	ldrb	r3, [r5, #16]
   1c0a8:	tst	r3, #1
   1c0ac:	bne	1c0dc <__assert_fail@plt+0xabe4>
   1c0b0:	ldr	r3, [r5, #32]
   1c0b4:	cmp	r3, #0
   1c0b8:	bne	1c0dc <__assert_fail@plt+0xabe4>
   1c0bc:	ldr	r3, [r5, #20]
   1c0c0:	cmp	r3, #0
   1c0c4:	ble	1c12c <__assert_fail@plt+0xac34>
   1c0c8:	mov	r4, #0
   1c0cc:	mov	r9, r4
   1c0d0:	str	sl, [sp]
   1c0d4:	ldr	sl, [sp, #20]
   1c0d8:	b	1c220 <__assert_fail@plt+0xad28>
   1c0dc:	mov	r3, #0
   1c0e0:	strb	r3, [sp, #32]
   1c0e4:	mov	r4, #0
   1c0e8:	mov	r5, #1
   1c0ec:	str	r4, [sp, #40]	; 0x28
   1c0f0:	str	r4, [sp, #44]	; 0x2c
   1c0f4:	add	r3, sp, #40	; 0x28
   1c0f8:	mov	r2, r5
   1c0fc:	add	r1, sp, #32
   1c100:	mov	r0, r4
   1c104:	bl	135c4 <__assert_fail@plt+0x20cc>
   1c108:	cmn	r0, #2
   1c10c:	ldrbeq	r3, [sp, #32]
   1c110:	strbeq	r5, [r8, r3]
   1c114:	ldrb	r3, [sp, #32]
   1c118:	add	r3, r3, #1
   1c11c:	uxtb	r3, r3
   1c120:	strb	r3, [sp, #32]
   1c124:	cmp	r3, #0
   1c128:	bne	1c0ec <__assert_fail@plt+0xabf4>
   1c12c:	ldr	r3, [sp, #8]
   1c130:	add	r3, r3, #1
   1c134:	mov	r2, r3
   1c138:	str	r3, [sp, #8]
   1c13c:	ldr	r3, [sp, #16]
   1c140:	ldr	r3, [r3, #8]
   1c144:	cmp	r3, r2
   1c148:	ble	1c1b8 <__assert_fail@plt+0xacc0>
   1c14c:	ldr	r3, [sp, #16]
   1c150:	ldr	r3, [r3, #12]
   1c154:	ldr	r2, [sp, #8]
   1c158:	ldr	r4, [r3, r2, lsl #2]
   1c15c:	lsl	r3, r4, #3
   1c160:	str	r3, [sp, #12]
   1c164:	ldr	r2, [sp, #4]
   1c168:	ldr	r2, [r2]
   1c16c:	add	r3, r2, r3
   1c170:	ldrb	r3, [r3, #4]
   1c174:	mov	r5, r3
   1c178:	cmp	r3, #1
   1c17c:	beq	1be9c <__assert_fail@plt+0xa9a4>
   1c180:	cmp	r3, #3
   1c184:	beq	1bfe8 <__assert_fail@plt+0xaaf0>
   1c188:	cmp	r3, #6
   1c18c:	beq	1c084 <__assert_fail@plt+0xab8c>
   1c190:	and	r2, r3, #253	; 0xfd
   1c194:	cmp	r3, #2
   1c198:	cmpne	r2, #5
   1c19c:	bne	1c12c <__assert_fail@plt+0xac34>
   1c1a0:	mov	r2, #256	; 0x100
   1c1a4:	mov	r1, #1
   1c1a8:	mov	r0, r8
   1c1ac:	bl	11414 <memset@plt>
   1c1b0:	cmp	r5, #2
   1c1b4:	beq	1c284 <__assert_fail@plt+0xad8c>
   1c1b8:	add	sp, sp, #300	; 0x12c
   1c1bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1c0:	mov	r3, #1
   1c1c4:	strb	r3, [r8, r6]
   1c1c8:	ldr	r3, [sl, #12]
   1c1cc:	tst	r3, #4194304	; 0x400000
   1c1d0:	beq	1c210 <__assert_fail@plt+0xad18>
   1c1d4:	ldr	r3, [sp, #4]
   1c1d8:	ldr	r3, [r3, #92]	; 0x5c
   1c1dc:	cmp	r3, #1
   1c1e0:	ble	1c210 <__assert_fail@plt+0xad18>
   1c1e4:	ldr	r3, [r5]
   1c1e8:	ldr	r0, [r3, r7]
   1c1ec:	bl	11258 <towlower@plt>
   1c1f0:	add	r2, sp, #32
   1c1f4:	mov	r1, r0
   1c1f8:	add	r0, sp, #40	; 0x28
   1c1fc:	bl	111a4 <wcrtomb@plt>
   1c200:	cmn	r0, #1
   1c204:	ldrbne	r3, [sp, #40]	; 0x28
   1c208:	movne	r2, #1
   1c20c:	strbne	r2, [r8, r3]
   1c210:	add	r4, r4, #1
   1c214:	ldr	r3, [r5, #20]
   1c218:	cmp	r3, r4
   1c21c:	ble	1c27c <__assert_fail@plt+0xad84>
   1c220:	str	r9, [sp, #32]
   1c224:	str	r9, [sp, #36]	; 0x24
   1c228:	lsl	r7, r4, #2
   1c22c:	ldr	r3, [r5]
   1c230:	add	r2, sp, #32
   1c234:	ldr	r1, [r3, r4, lsl #2]
   1c238:	add	r0, sp, #40	; 0x28
   1c23c:	bl	111a4 <wcrtomb@plt>
   1c240:	cmn	r0, #1
   1c244:	beq	1c1c8 <__assert_fail@plt+0xacd0>
   1c248:	ldrb	r6, [sp, #40]	; 0x28
   1c24c:	mov	r3, #1
   1c250:	strb	r3, [r8, r6]
   1c254:	ldr	r3, [sp]
   1c258:	cmp	r3, #0
   1c25c:	beq	1c1c8 <__assert_fail@plt+0xacd0>
   1c260:	add	r3, r6, #128	; 0x80
   1c264:	cmp	r3, fp
   1c268:	bhi	1c1c0 <__assert_fail@plt+0xacc8>
   1c26c:	bl	1136c <__ctype_tolower_loc@plt>
   1c270:	ldr	r3, [r0]
   1c274:	ldr	r6, [r3, r6, lsl #2]
   1c278:	b	1c1c0 <__assert_fail@plt+0xacc8>
   1c27c:	ldr	sl, [sp]
   1c280:	b	1c12c <__assert_fail@plt+0xac34>
   1c284:	ldr	r2, [sp, #20]
   1c288:	ldrb	r3, [r2, #28]
   1c28c:	orr	r3, r3, #1
   1c290:	strb	r3, [r2, #28]
   1c294:	b	1c1b8 <__assert_fail@plt+0xacc0>
   1c298:	andeq	r0, r0, pc, ror r1
   1c29c:	eoreq	r0, r0, r1
   1c2a0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2a4:	mov	r3, #0
   1c2a8:	str	r3, [r0]
   1c2ac:	ldr	lr, [r2, #4]
   1c2b0:	cmp	lr, r3
   1c2b4:	beq	1c49c <__assert_fail@plt+0xafa4>
   1c2b8:	mov	r6, lr
   1c2bc:	ble	1c2d8 <__assert_fail@plt+0xade0>
   1c2c0:	ldr	r3, [r2, #8]
   1c2c4:	add	lr, r3, lr, lsl #2
   1c2c8:	ldr	ip, [r3], #4
   1c2cc:	add	r6, r6, ip
   1c2d0:	cmp	r3, lr
   1c2d4:	bne	1c2c8 <__assert_fail@plt+0xadd0>
   1c2d8:	mov	sl, r2
   1c2dc:	mov	r7, r1
   1c2e0:	mov	r8, r0
   1c2e4:	ldr	r3, [r1, #68]	; 0x44
   1c2e8:	and	r3, r3, r6
   1c2ec:	add	r3, r3, r3, lsl #1
   1c2f0:	lsl	r3, r3, #2
   1c2f4:	ldr	r2, [r1, #32]
   1c2f8:	add	r1, r2, r3
   1c2fc:	ldr	fp, [r2, r3]
   1c300:	cmp	fp, #0
   1c304:	ble	1c34c <__assert_fail@plt+0xae54>
   1c308:	ldr	r9, [r1, #8]
   1c30c:	sub	r9, r9, #4
   1c310:	mov	r5, #0
   1c314:	b	1c324 <__assert_fail@plt+0xae2c>
   1c318:	add	r5, r5, #1
   1c31c:	cmp	r5, fp
   1c320:	beq	1c34c <__assert_fail@plt+0xae54>
   1c324:	ldr	r4, [r9, #4]!
   1c328:	ldr	r3, [r4]
   1c32c:	cmp	r6, r3
   1c330:	bne	1c318 <__assert_fail@plt+0xae20>
   1c334:	mov	r1, sl
   1c338:	add	r0, r4, #4
   1c33c:	bl	15638 <__assert_fail@plt+0x4140>
   1c340:	cmp	r0, #0
   1c344:	beq	1c318 <__assert_fail@plt+0xae20>
   1c348:	b	1c488 <__assert_fail@plt+0xaf90>
   1c34c:	mov	r1, #1
   1c350:	mov	r0, #56	; 0x38
   1c354:	bl	236d0 <__assert_fail@plt+0x121d8>
   1c358:	subs	r4, r0, #0
   1c35c:	beq	1c3a4 <__assert_fail@plt+0xaeac>
   1c360:	add	r5, r4, #4
   1c364:	mov	r1, sl
   1c368:	mov	r0, r5
   1c36c:	bl	16ae8 <__assert_fail@plt+0x55f0>
   1c370:	cmp	r0, #0
   1c374:	bne	1c39c <__assert_fail@plt+0xaea4>
   1c378:	str	r5, [r4, #40]	; 0x28
   1c37c:	ldr	lr, [sl, #4]
   1c380:	cmp	lr, #0
   1c384:	ble	1c470 <__assert_fail@plt+0xaf78>
   1c388:	ldr	r5, [r7]
   1c38c:	ldr	ip, [sl, #8]
   1c390:	add	lr, ip, lr, lsl #2
   1c394:	ldr	r9, [pc, #264]	; 1c4a4 <__assert_fail@plt+0xafac>
   1c398:	b	1c408 <__assert_fail@plt+0xaf10>
   1c39c:	mov	r0, r4
   1c3a0:	bl	13340 <__assert_fail@plt+0x1e48>
   1c3a4:	mov	r3, #12
   1c3a8:	str	r3, [r8]
   1c3ac:	mov	r4, #0
   1c3b0:	b	1c488 <__assert_fail@plt+0xaf90>
   1c3b4:	ldr	r3, [r2, #4]
   1c3b8:	tst	r3, r9
   1c3bc:	beq	1c400 <__assert_fail@plt+0xaf08>
   1c3c0:	ldrb	r0, [r2, #6]
   1c3c4:	ldrb	r3, [r4, #52]	; 0x34
   1c3c8:	lsr	r1, r3, #5
   1c3cc:	orr	r1, r1, r0, lsr #4
   1c3d0:	and	r1, r1, #1
   1c3d4:	bic	r3, r3, #32
   1c3d8:	orr	r3, r3, r1, lsl #5
   1c3dc:	strb	r3, [r4, #52]	; 0x34
   1c3e0:	b	1c460 <__assert_fail@plt+0xaf68>
   1c3e4:	ldrb	r3, [r4, #52]	; 0x34
   1c3e8:	orr	r3, r3, #64	; 0x40
   1c3ec:	strb	r3, [r4, #52]	; 0x34
   1c3f0:	b	1c400 <__assert_fail@plt+0xaf08>
   1c3f4:	ldrb	r3, [r4, #52]	; 0x34
   1c3f8:	orr	r3, r3, #128	; 0x80
   1c3fc:	strb	r3, [r4, #52]	; 0x34
   1c400:	cmp	ip, lr
   1c404:	beq	1c470 <__assert_fail@plt+0xaf78>
   1c408:	ldr	r2, [ip], #4
   1c40c:	add	r2, r5, r2, lsl #3
   1c410:	ldrb	r0, [r2, #4]
   1c414:	cmp	r0, #1
   1c418:	beq	1c3b4 <__assert_fail@plt+0xaebc>
   1c41c:	ldrb	r1, [r4, #52]	; 0x34
   1c420:	ldrb	r3, [r2, #6]
   1c424:	lsr	r3, r3, #4
   1c428:	orr	r3, r3, r1, lsr #5
   1c42c:	and	r3, r3, #1
   1c430:	bic	r1, r1, #32
   1c434:	orr	r3, r1, r3, lsl #5
   1c438:	strb	r3, [r4, #52]	; 0x34
   1c43c:	cmp	r0, #2
   1c440:	uxtbeq	r3, r3
   1c444:	orreq	r3, r3, #16
   1c448:	strbeq	r3, [r4, #52]	; 0x34
   1c44c:	beq	1c400 <__assert_fail@plt+0xaf08>
   1c450:	cmp	r0, #4
   1c454:	beq	1c3e4 <__assert_fail@plt+0xaeec>
   1c458:	cmp	r0, #12
   1c45c:	beq	1c3f4 <__assert_fail@plt+0xaefc>
   1c460:	ldr	r3, [r2, #4]
   1c464:	tst	r3, r9
   1c468:	beq	1c400 <__assert_fail@plt+0xaf08>
   1c46c:	b	1c3f4 <__assert_fail@plt+0xaefc>
   1c470:	mov	r2, r6
   1c474:	mov	r1, r4
   1c478:	mov	r0, r7
   1c47c:	bl	1668c <__assert_fail@plt+0x5194>
   1c480:	cmp	r0, #0
   1c484:	bne	1c490 <__assert_fail@plt+0xaf98>
   1c488:	mov	r0, r4
   1c48c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c490:	mov	r0, r4
   1c494:	bl	18244 <__assert_fail@plt+0x6d4c>
   1c498:	b	1c3a4 <__assert_fail@plt+0xaeac>
   1c49c:	mov	r4, #0
   1c4a0:	b	1c488 <__assert_fail@plt+0xaf90>
   1c4a4:	andeq	pc, r3, r0, lsl #30
   1c4a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c4ac:	sub	sp, sp, #20
   1c4b0:	subs	r8, r3, #0
   1c4b4:	ble	1c554 <__assert_fail@plt+0xb05c>
   1c4b8:	mov	r9, r0
   1c4bc:	mov	r4, r1
   1c4c0:	mov	r5, r2
   1c4c4:	mov	r6, #0
   1c4c8:	b	1c4e8 <__assert_fail@plt+0xaff0>
   1c4cc:	ldr	r3, [r5]
   1c4d0:	str	r3, [r4]
   1c4d4:	add	r6, r6, #1
   1c4d8:	add	r4, r4, #4
   1c4dc:	add	r5, r5, #4
   1c4e0:	cmp	r8, r6
   1c4e4:	beq	1c54c <__assert_fail@plt+0xb054>
   1c4e8:	ldr	r1, [r4]
   1c4ec:	cmp	r1, #0
   1c4f0:	beq	1c4cc <__assert_fail@plt+0xafd4>
   1c4f4:	ldr	r2, [r5]
   1c4f8:	cmp	r2, #0
   1c4fc:	beq	1c4d4 <__assert_fail@plt+0xafdc>
   1c500:	add	r2, r2, #4
   1c504:	add	r1, r1, #4
   1c508:	mov	r0, sp
   1c50c:	bl	16b64 <__assert_fail@plt+0x566c>
   1c510:	str	r0, [sp, #12]
   1c514:	cmp	r0, #0
   1c518:	bne	1c544 <__assert_fail@plt+0xb04c>
   1c51c:	mov	r2, sp
   1c520:	mov	r1, r9
   1c524:	add	r0, sp, #12
   1c528:	bl	1c2a0 <__assert_fail@plt+0xada8>
   1c52c:	str	r0, [r4]
   1c530:	ldr	r0, [sp, #8]
   1c534:	bl	13340 <__assert_fail@plt+0x1e48>
   1c538:	ldr	r0, [sp, #12]
   1c53c:	cmp	r0, #0
   1c540:	beq	1c4d4 <__assert_fail@plt+0xafdc>
   1c544:	add	sp, sp, #20
   1c548:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c54c:	mov	r0, #0
   1c550:	b	1c544 <__assert_fail@plt+0xb04c>
   1c554:	mov	r0, #0
   1c558:	b	1c544 <__assert_fail@plt+0xb04c>
   1c55c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c560:	sub	sp, sp, #28
   1c564:	mov	sl, r0
   1c568:	mov	r7, r1
   1c56c:	mov	r8, r2
   1c570:	str	r3, [sp, #4]
   1c574:	mov	r1, r2
   1c578:	bl	15cd0 <__assert_fail@plt+0x47d8>
   1c57c:	cmn	r0, #1
   1c580:	moveq	r0, #0
   1c584:	beq	1c75c <__assert_fail@plt+0xb264>
   1c588:	ldr	fp, [sl, #84]	; 0x54
   1c58c:	add	r0, r0, r0, lsl #1
   1c590:	lsl	r0, r0, #3
   1c594:	add	r3, r0, #24
   1c598:	str	r3, [sp]
   1c59c:	b	1c6fc <__assert_fail@plt+0xb204>
   1c5a0:	ldr	r3, [fp, #20]
   1c5a4:	add	r6, r6, r6, lsl #1
   1c5a8:	add	r6, r3, r6, lsl #2
   1c5ac:	ldr	r3, [r6, #8]
   1c5b0:	ldr	r5, [r3]
   1c5b4:	mov	r1, r5
   1c5b8:	mov	r0, r7
   1c5bc:	bl	156ac <__assert_fail@plt+0x41b4>
   1c5c0:	cmp	r0, #0
   1c5c4:	beq	1c6ac <__assert_fail@plt+0xb1b4>
   1c5c8:	add	r4, r4, #24
   1c5cc:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1c5d0:	cmp	r3, #0
   1c5d4:	beq	1c758 <__assert_fail@plt+0xb260>
   1c5d8:	ldr	r6, [r4, #-24]	; 0xffffffe8
   1c5dc:	mov	r1, r6
   1c5e0:	mov	r0, r7
   1c5e4:	bl	156ac <__assert_fail@plt+0x41b4>
   1c5e8:	cmp	r0, #0
   1c5ec:	beq	1c5c8 <__assert_fail@plt+0xb0d0>
   1c5f0:	ldr	r5, [r4, #-12]
   1c5f4:	add	r5, r8, r5
   1c5f8:	ldr	r3, [r4, #-16]
   1c5fc:	sub	r5, r5, r3
   1c600:	cmp	r8, r5
   1c604:	beq	1c5a0 <__assert_fail@plt+0xb0a8>
   1c608:	ldr	r3, [fp, #12]
   1c60c:	ldr	r9, [r3, r6, lsl #2]
   1c610:	ldr	r3, [sl, #100]	; 0x64
   1c614:	ldr	r6, [r3, r5, lsl #2]
   1c618:	cmp	r6, #0
   1c61c:	beq	1c73c <__assert_fail@plt+0xb244>
   1c620:	add	r6, r6, #4
   1c624:	mov	r1, r9
   1c628:	mov	r0, r6
   1c62c:	bl	156ac <__assert_fail@plt+0x41b4>
   1c630:	cmp	r0, #0
   1c634:	bne	1c5c8 <__assert_fail@plt+0xb0d0>
   1c638:	mov	r1, r6
   1c63c:	add	r0, sp, #8
   1c640:	bl	16ae8 <__assert_fail@plt+0x55f0>
   1c644:	str	r0, [sp, #20]
   1c648:	mov	r1, r9
   1c64c:	add	r0, sp, #8
   1c650:	bl	18a40 <__assert_fail@plt+0x7548>
   1c654:	eor	r0, r0, #1
   1c658:	ldr	r3, [sp, #20]
   1c65c:	cmp	r3, #0
   1c660:	orrne	r0, r0, #1
   1c664:	tst	r0, #255	; 0xff
   1c668:	bne	1c724 <__assert_fail@plt+0xb22c>
   1c66c:	ldr	r6, [sl, #100]	; 0x64
   1c670:	add	r2, sp, #8
   1c674:	mov	r1, fp
   1c678:	add	r0, sp, #20
   1c67c:	bl	1c2a0 <__assert_fail@plt+0xada8>
   1c680:	str	r0, [r6, r5, lsl #2]
   1c684:	ldr	r0, [sp, #16]
   1c688:	bl	13340 <__assert_fail@plt+0x1e48>
   1c68c:	ldr	r3, [sl, #100]	; 0x64
   1c690:	ldr	r3, [r3, r5, lsl #2]
   1c694:	cmp	r3, #0
   1c698:	bne	1c5c8 <__assert_fail@plt+0xb0d0>
   1c69c:	ldr	r0, [sp, #20]
   1c6a0:	cmp	r0, #0
   1c6a4:	beq	1c5c8 <__assert_fail@plt+0xb0d0>
   1c6a8:	b	1c75c <__assert_fail@plt+0xb264>
   1c6ac:	mov	r1, r5
   1c6b0:	add	r0, sp, #8
   1c6b4:	bl	16618 <__assert_fail@plt+0x5120>
   1c6b8:	str	r0, [sp, #20]
   1c6bc:	ldr	r3, [sp, #64]	; 0x40
   1c6c0:	ldr	r2, [sp, #4]
   1c6c4:	add	r1, sp, #8
   1c6c8:	mov	r0, fp
   1c6cc:	bl	19780 <__assert_fail@plt+0x8288>
   1c6d0:	mov	r4, r0
   1c6d4:	add	r1, sp, #8
   1c6d8:	mov	r0, r7
   1c6dc:	bl	18f84 <__assert_fail@plt+0x7a8c>
   1c6e0:	mov	r5, r0
   1c6e4:	ldr	r0, [sp, #16]
   1c6e8:	bl	13340 <__assert_fail@plt+0x1e48>
   1c6ec:	ldr	r0, [sp, #20]
   1c6f0:	orr	r3, r4, r5
   1c6f4:	orrs	r3, r3, r0
   1c6f8:	bne	1c70c <__assert_fail@plt+0xb214>
   1c6fc:	ldr	r4, [sl, #116]	; 0x74
   1c700:	ldr	r3, [sp]
   1c704:	add	r4, r4, r3
   1c708:	b	1c5d8 <__assert_fail@plt+0xb0e0>
   1c70c:	cmp	r0, #0
   1c710:	bne	1c75c <__assert_fail@plt+0xb264>
   1c714:	cmp	r4, #0
   1c718:	movne	r0, r4
   1c71c:	moveq	r0, r5
   1c720:	b	1c75c <__assert_fail@plt+0xb264>
   1c724:	ldr	r0, [sp, #16]
   1c728:	bl	13340 <__assert_fail@plt+0x1e48>
   1c72c:	ldr	r0, [sp, #20]
   1c730:	cmp	r0, #0
   1c734:	moveq	r0, #12
   1c738:	b	1c75c <__assert_fail@plt+0xb264>
   1c73c:	mov	r1, r9
   1c740:	add	r0, sp, #8
   1c744:	bl	16618 <__assert_fail@plt+0x5120>
   1c748:	str	r0, [sp, #20]
   1c74c:	cmp	r0, #0
   1c750:	beq	1c66c <__assert_fail@plt+0xb174>
   1c754:	b	1c75c <__assert_fail@plt+0xb264>
   1c758:	mov	r0, #0
   1c75c:	add	sp, sp, #28
   1c760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c768:	sub	sp, sp, #92	; 0x5c
   1c76c:	mov	sl, r0
   1c770:	str	r1, [sp, #44]	; 0x2c
   1c774:	mov	r7, r2
   1c778:	mov	r5, r3
   1c77c:	ldr	r3, [r0, #84]	; 0x54
   1c780:	mov	r2, r3
   1c784:	str	r3, [sp, #36]	; 0x24
   1c788:	mov	r3, #0
   1c78c:	str	r3, [sp, #84]	; 0x54
   1c790:	ldr	r3, [r2]
   1c794:	ldr	r3, [r3, r7, lsl #3]
   1c798:	str	r3, [sp, #40]	; 0x28
   1c79c:	ldr	r6, [r1, #4]
   1c7a0:	ldr	r4, [r0, #120]	; 0x78
   1c7a4:	ldr	r3, [sp, #132]	; 0x84
   1c7a8:	add	r4, r3, r4
   1c7ac:	add	r4, r4, #1
   1c7b0:	cmp	r6, r4
   1c7b4:	blt	1c8cc <__assert_fail@plt+0xb3d4>
   1c7b8:	ldr	r3, [sp, #44]	; 0x2c
   1c7bc:	ldr	fp, [r3]
   1c7c0:	cmp	fp, #0
   1c7c4:	beq	1cd3c <__assert_fail@plt+0xb844>
   1c7c8:	ldr	r2, [sl, #100]	; 0x64
   1c7cc:	str	r2, [sp, #48]	; 0x30
   1c7d0:	ldr	r2, [sl, #40]	; 0x28
   1c7d4:	str	r2, [sp, #52]	; 0x34
   1c7d8:	ldr	r6, [r3, #8]
   1c7dc:	str	r6, [sl, #100]	; 0x64
   1c7e0:	str	fp, [sl, #40]	; 0x28
   1c7e4:	str	sl, [sp, #20]
   1c7e8:	ldr	r2, [sl, #88]	; 0x58
   1c7ec:	sub	r1, fp, #1
   1c7f0:	mov	r0, sl
   1c7f4:	bl	19358 <__assert_fail@plt+0x7e60>
   1c7f8:	mov	r4, r0
   1c7fc:	cmp	fp, r5
   1c800:	beq	1cd74 <__assert_fail@plt+0xb87c>
   1c804:	ldr	r6, [r6, fp, lsl #2]
   1c808:	cmp	r6, #0
   1c80c:	beq	1cde0 <__assert_fail@plt+0xb8e8>
   1c810:	ldrb	r3, [r6, #52]	; 0x34
   1c814:	tst	r3, #64	; 0x40
   1c818:	bne	1c91c <__assert_fail@plt+0xb424>
   1c81c:	mov	r3, #0
   1c820:	str	r3, [sp, #72]	; 0x48
   1c824:	str	r3, [sp, #76]	; 0x4c
   1c828:	str	r3, [sp, #80]	; 0x50
   1c82c:	ldrb	r3, [r6, #52]	; 0x34
   1c830:	tst	r3, #64	; 0x40
   1c834:	beq	1c890 <__assert_fail@plt+0xb398>
   1c838:	ldr	r3, [sp, #76]	; 0x4c
   1c83c:	cmp	r3, #0
   1c840:	beq	1c86c <__assert_fail@plt+0xb374>
   1c844:	ldr	r3, [sp, #136]	; 0x88
   1c848:	str	r3, [sp]
   1c84c:	ldr	r3, [sp, #40]	; 0x28
   1c850:	mov	r2, fp
   1c854:	add	r1, sp, #72	; 0x48
   1c858:	mov	r0, sl
   1c85c:	bl	1c55c <__assert_fail@plt+0xb064>
   1c860:	str	r0, [sp, #84]	; 0x54
   1c864:	cmp	r0, #0
   1c868:	bne	1c938 <__assert_fail@plt+0xb440>
   1c86c:	mov	r3, r4
   1c870:	add	r2, sp, #72	; 0x48
   1c874:	ldr	r1, [sp, #36]	; 0x24
   1c878:	add	r0, sp, #84	; 0x54
   1c87c:	bl	182a0 <__assert_fail@plt+0x6da8>
   1c880:	subs	r6, r0, #0
   1c884:	beq	1c948 <__assert_fail@plt+0xb450>
   1c888:	ldr	r3, [sl, #100]	; 0x64
   1c88c:	str	r6, [r3, fp, lsl #2]
   1c890:	ldr	r3, [sp, #132]	; 0x84
   1c894:	cmp	r3, fp
   1c898:	ble	1cd0c <__assert_fail@plt+0xb814>
   1c89c:	ldr	r3, [sl, #120]	; 0x78
   1c8a0:	cmp	r3, #0
   1c8a4:	blt	1cd14 <__assert_fail@plt+0xb81c>
   1c8a8:	add	r3, fp, #1
   1c8ac:	lsl	r3, r3, #2
   1c8b0:	str	r3, [sp, #16]
   1c8b4:	mov	r3, #0
   1c8b8:	str	r3, [sp, #32]
   1c8bc:	mov	r9, r3
   1c8c0:	str	fp, [sp, #12]
   1c8c4:	mov	fp, sl
   1c8c8:	b	1cbdc <__assert_fail@plt+0xb6e4>
   1c8cc:	mvn	r3, #-2147483648	; 0x80000000
   1c8d0:	sub	r3, r3, r6
   1c8d4:	cmp	r4, r3
   1c8d8:	bgt	1cd24 <__assert_fail@plt+0xb82c>
   1c8dc:	add	r8, r6, r4
   1c8e0:	cmn	r8, #-1073741823	; 0xc0000001
   1c8e4:	bhi	1cd2c <__assert_fail@plt+0xb834>
   1c8e8:	lsl	r1, r8, #2
   1c8ec:	ldr	r9, [sp, #44]	; 0x2c
   1c8f0:	ldr	r0, [r9, #8]
   1c8f4:	bl	23750 <__assert_fail@plt+0x12258>
   1c8f8:	cmp	r0, #0
   1c8fc:	beq	1cd34 <__assert_fail@plt+0xb83c>
   1c900:	str	r0, [r9, #8]
   1c904:	str	r8, [r9, #4]
   1c908:	lsl	r2, r4, #2
   1c90c:	mov	r1, #0
   1c910:	add	r0, r0, r6, lsl #2
   1c914:	bl	11414 <memset@plt>
   1c918:	b	1c7b8 <__assert_fail@plt+0xb2c0>
   1c91c:	add	r1, r6, #4
   1c920:	add	r0, sp, #72	; 0x48
   1c924:	bl	16ae8 <__assert_fail@plt+0x55f0>
   1c928:	str	r0, [sp, #84]	; 0x54
   1c92c:	cmp	r0, #0
   1c930:	beq	1c82c <__assert_fail@plt+0xb334>
   1c934:	b	1c970 <__assert_fail@plt+0xb478>
   1c938:	ldr	r0, [sp, #80]	; 0x50
   1c93c:	bl	13340 <__assert_fail@plt+0x1e48>
   1c940:	ldr	r0, [sp, #84]	; 0x54
   1c944:	b	1c970 <__assert_fail@plt+0xb478>
   1c948:	ldr	r3, [sp, #84]	; 0x54
   1c94c:	cmp	r3, #0
   1c950:	beq	1c888 <__assert_fail@plt+0xb390>
   1c954:	ldr	r0, [sp, #80]	; 0x50
   1c958:	bl	13340 <__assert_fail@plt+0x1e48>
   1c95c:	ldr	r0, [sp, #84]	; 0x54
   1c960:	b	1c970 <__assert_fail@plt+0xb478>
   1c964:	ldr	r0, [sp, #80]	; 0x50
   1c968:	bl	13340 <__assert_fail@plt+0x1e48>
   1c96c:	ldr	r0, [sp, #84]	; 0x54
   1c970:	add	sp, sp, #92	; 0x5c
   1c974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c978:	ldr	r3, [sp, #12]
   1c97c:	ldr	r2, [sp, #20]
   1c980:	mov	r0, r5
   1c984:	bl	1a78c <__assert_fail@plt+0x9294>
   1c988:	mov	r8, r0
   1c98c:	cmp	r0, #1
   1c990:	ble	1ca24 <__assert_fail@plt+0xb52c>
   1c994:	ldr	r3, [r5, #12]
   1c998:	ldr	r2, [r3, fp, lsl #2]
   1c99c:	str	r2, [sp, #24]
   1c9a0:	ldr	r3, [sp, #12]
   1c9a4:	add	r3, r3, r0
   1c9a8:	mov	r2, r3
   1c9ac:	str	r3, [sp, #28]
   1c9b0:	ldr	r3, [sl, #100]	; 0x64
   1c9b4:	ldr	r1, [r3, r2, lsl #2]
   1c9b8:	str	r9, [sp, #64]	; 0x40
   1c9bc:	cmp	r1, #0
   1c9c0:	beq	1c9dc <__assert_fail@plt+0xb4e4>
   1c9c4:	add	r1, r1, #4
   1c9c8:	add	r0, sp, #60	; 0x3c
   1c9cc:	bl	18f84 <__assert_fail@plt+0x7a8c>
   1c9d0:	str	r0, [sp, #56]	; 0x38
   1c9d4:	cmp	r0, #0
   1c9d8:	bne	1ca98 <__assert_fail@plt+0xb5a0>
   1c9dc:	ldr	r1, [sp, #24]
   1c9e0:	add	r0, sp, #60	; 0x3c
   1c9e4:	bl	18a40 <__assert_fail@plt+0x7548>
   1c9e8:	cmp	r0, #0
   1c9ec:	beq	1cab8 <__assert_fail@plt+0xb5c0>
   1c9f0:	ldr	r3, [sl, #100]	; 0x64
   1c9f4:	str	r3, [sp, #24]
   1c9f8:	add	r2, sp, #60	; 0x3c
   1c9fc:	mov	r1, r5
   1ca00:	add	r0, sp, #56	; 0x38
   1ca04:	bl	1c2a0 <__assert_fail@plt+0xada8>
   1ca08:	ldr	r1, [sp, #24]
   1ca0c:	ldr	r2, [sp, #28]
   1ca10:	str	r0, [r1, r2, lsl #2]
   1ca14:	ldr	r3, [sl, #100]	; 0x64
   1ca18:	ldr	r3, [r3, r2, lsl #2]
   1ca1c:	cmp	r3, #0
   1ca20:	beq	1cac4 <__assert_fail@plt+0xb5cc>
   1ca24:	cmp	r8, #0
   1ca28:	beq	1ca78 <__assert_fail@plt+0xb580>
   1ca2c:	ldr	r3, [r5, #12]
   1ca30:	ldr	r1, [r3, fp, lsl #2]
   1ca34:	add	r0, sp, #72	; 0x48
   1ca38:	bl	18a40 <__assert_fail@plt+0x7548>
   1ca3c:	cmp	r0, #0
   1ca40:	beq	1cae4 <__assert_fail@plt+0xb5ec>
   1ca44:	add	r4, r4, #1
   1ca48:	ldr	r3, [r6, #20]
   1ca4c:	cmp	r4, r3
   1ca50:	bge	1cb04 <__assert_fail@plt+0xb60c>
   1ca54:	ldr	r3, [r6, #24]
   1ca58:	ldr	r1, [r3, r4, lsl #2]
   1ca5c:	mov	fp, r1
   1ca60:	lsl	r7, r1, #3
   1ca64:	ldr	r3, [r5]
   1ca68:	add	r3, r3, r7
   1ca6c:	ldrb	r3, [r3, #6]
   1ca70:	tst	r3, #16
   1ca74:	bne	1c978 <__assert_fail@plt+0xb480>
   1ca78:	ldr	r1, [r5]
   1ca7c:	ldr	r2, [sp, #12]
   1ca80:	add	r1, r1, r7
   1ca84:	mov	r0, sl
   1ca88:	bl	1946c <__assert_fail@plt+0x7f74>
   1ca8c:	cmp	r0, #0
   1ca90:	beq	1ca44 <__assert_fail@plt+0xb54c>
   1ca94:	b	1ca2c <__assert_fail@plt+0xb534>
   1ca98:	mov	fp, sl
   1ca9c:	ldr	r0, [sp, #68]	; 0x44
   1caa0:	bl	13340 <__assert_fail@plt+0x1e48>
   1caa4:	ldr	r3, [sp, #56]	; 0x38
   1caa8:	str	r3, [sp, #84]	; 0x54
   1caac:	cmp	r3, #0
   1cab0:	beq	1cb14 <__assert_fail@plt+0xb61c>
   1cab4:	b	1caf4 <__assert_fail@plt+0xb5fc>
   1cab8:	ldr	r0, [sp, #68]	; 0x44
   1cabc:	bl	13340 <__assert_fail@plt+0x1e48>
   1cac0:	b	1caec <__assert_fail@plt+0xb5f4>
   1cac4:	ldr	r3, [sp, #56]	; 0x38
   1cac8:	cmp	r3, #0
   1cacc:	beq	1ca24 <__assert_fail@plt+0xb52c>
   1cad0:	mov	fp, sl
   1cad4:	ldr	r0, [sp, #68]	; 0x44
   1cad8:	bl	13340 <__assert_fail@plt+0x1e48>
   1cadc:	ldr	r3, [sp, #56]	; 0x38
   1cae0:	b	1caa8 <__assert_fail@plt+0xb5b0>
   1cae4:	ldr	r0, [sp, #68]	; 0x44
   1cae8:	bl	13340 <__assert_fail@plt+0x1e48>
   1caec:	mov	r3, #12
   1caf0:	str	r3, [sp, #84]	; 0x54
   1caf4:	ldr	r0, [sp, #80]	; 0x50
   1caf8:	bl	13340 <__assert_fail@plt+0x1e48>
   1cafc:	ldr	r0, [sp, #84]	; 0x54
   1cb00:	b	1c970 <__assert_fail@plt+0xb478>
   1cb04:	mov	fp, sl
   1cb08:	ldr	r0, [sp, #68]	; 0x44
   1cb0c:	bl	13340 <__assert_fail@plt+0x1e48>
   1cb10:	str	r9, [sp, #84]	; 0x54
   1cb14:	ldr	r3, [sp, #12]
   1cb18:	add	r4, r3, #1
   1cb1c:	ldr	r3, [sp, #76]	; 0x4c
   1cb20:	cmp	r3, #0
   1cb24:	beq	1cb70 <__assert_fail@plt+0xb678>
   1cb28:	ldr	r3, [sp, #136]	; 0x88
   1cb2c:	ldr	r2, [sp, #40]	; 0x28
   1cb30:	add	r1, sp, #72	; 0x48
   1cb34:	ldr	r0, [sp, #36]	; 0x24
   1cb38:	bl	19780 <__assert_fail@plt+0x8288>
   1cb3c:	str	r0, [sp, #84]	; 0x54
   1cb40:	cmp	r0, #0
   1cb44:	bne	1cc5c <__assert_fail@plt+0xb764>
   1cb48:	ldr	r3, [sp, #136]	; 0x88
   1cb4c:	str	r3, [sp]
   1cb50:	ldr	r3, [sp, #40]	; 0x28
   1cb54:	mov	r2, r4
   1cb58:	add	r1, sp, #72	; 0x48
   1cb5c:	mov	r0, fp
   1cb60:	bl	1c55c <__assert_fail@plt+0xb064>
   1cb64:	str	r0, [sp, #84]	; 0x54
   1cb68:	cmp	r0, #0
   1cb6c:	bne	1cc6c <__assert_fail@plt+0xb774>
   1cb70:	ldr	r2, [fp, #88]	; 0x58
   1cb74:	ldr	r1, [sp, #12]
   1cb78:	ldr	r0, [sp, #20]
   1cb7c:	bl	19358 <__assert_fail@plt+0x7e60>
   1cb80:	mov	r3, r0
   1cb84:	add	r2, sp, #72	; 0x48
   1cb88:	ldr	r1, [sp, #36]	; 0x24
   1cb8c:	add	r0, sp, #84	; 0x54
   1cb90:	bl	182a0 <__assert_fail@plt+0x6da8>
   1cb94:	subs	r6, r0, #0
   1cb98:	beq	1cc7c <__assert_fail@plt+0xb784>
   1cb9c:	ldr	r3, [fp, #100]	; 0x64
   1cba0:	ldr	r2, [sp, #16]
   1cba4:	str	r6, [r3, r2]
   1cba8:	mov	r3, #0
   1cbac:	str	r3, [sp, #32]
   1cbb0:	ldr	r3, [sp, #132]	; 0x84
   1cbb4:	cmp	r3, r4
   1cbb8:	ble	1cd1c <__assert_fail@plt+0xb824>
   1cbbc:	ldr	r3, [sp, #16]
   1cbc0:	add	r3, r3, #4
   1cbc4:	str	r3, [sp, #16]
   1cbc8:	ldr	r3, [fp, #120]	; 0x78
   1cbcc:	ldr	r2, [sp, #32]
   1cbd0:	cmp	r2, r3
   1cbd4:	bgt	1ccb4 <__assert_fail@plt+0xb7bc>
   1cbd8:	str	r4, [sp, #12]
   1cbdc:	str	r9, [sp, #76]	; 0x4c
   1cbe0:	ldr	r3, [fp, #100]	; 0x64
   1cbe4:	ldr	r2, [sp, #16]
   1cbe8:	ldr	r1, [r3, r2]
   1cbec:	cmp	r1, #0
   1cbf0:	beq	1cdf4 <__assert_fail@plt+0xb8fc>
   1cbf4:	add	r1, r1, #4
   1cbf8:	add	r0, sp, #72	; 0x48
   1cbfc:	bl	18f84 <__assert_fail@plt+0x7a8c>
   1cc00:	str	r0, [sp, #84]	; 0x54
   1cc04:	cmp	r0, #0
   1cc08:	bne	1c964 <__assert_fail@plt+0xb46c>
   1cc0c:	cmp	r6, #0
   1cc10:	beq	1cb14 <__assert_fail@plt+0xb61c>
   1cc14:	ldr	r5, [fp, #84]	; 0x54
   1cc18:	str	r9, [sp, #56]	; 0x38
   1cc1c:	str	r9, [sp, #60]	; 0x3c
   1cc20:	str	r9, [sp, #64]	; 0x40
   1cc24:	str	r9, [sp, #68]	; 0x44
   1cc28:	ldr	r3, [r6, #20]
   1cc2c:	cmp	r3, #0
   1cc30:	ble	1cb08 <__assert_fail@plt+0xb610>
   1cc34:	ldr	r3, [r6, #24]
   1cc38:	ldr	r1, [r3]
   1cc3c:	lsl	r7, r1, #3
   1cc40:	ldr	r3, [r5]
   1cc44:	add	r3, r3, r7
   1cc48:	mov	r4, #0
   1cc4c:	mov	r2, fp
   1cc50:	mov	fp, r1
   1cc54:	mov	sl, r2
   1cc58:	b	1ca6c <__assert_fail@plt+0xb574>
   1cc5c:	ldr	r0, [sp, #80]	; 0x50
   1cc60:	bl	13340 <__assert_fail@plt+0x1e48>
   1cc64:	ldr	r0, [sp, #84]	; 0x54
   1cc68:	b	1c970 <__assert_fail@plt+0xb478>
   1cc6c:	ldr	r0, [sp, #80]	; 0x50
   1cc70:	bl	13340 <__assert_fail@plt+0x1e48>
   1cc74:	ldr	r0, [sp, #84]	; 0x54
   1cc78:	b	1c970 <__assert_fail@plt+0xb478>
   1cc7c:	ldr	r3, [sp, #84]	; 0x54
   1cc80:	cmp	r3, #0
   1cc84:	bne	1cca4 <__assert_fail@plt+0xb7ac>
   1cc88:	ldr	r3, [fp, #100]	; 0x64
   1cc8c:	ldr	r2, [sp, #16]
   1cc90:	str	r9, [r3, r2]
   1cc94:	ldr	r3, [sp, #32]
   1cc98:	add	r3, r3, #1
   1cc9c:	str	r3, [sp, #32]
   1cca0:	b	1cbb0 <__assert_fail@plt+0xb6b8>
   1cca4:	ldr	r0, [sp, #80]	; 0x50
   1cca8:	bl	13340 <__assert_fail@plt+0x1e48>
   1ccac:	ldr	r0, [sp, #84]	; 0x54
   1ccb0:	b	1c970 <__assert_fail@plt+0xb478>
   1ccb4:	mov	sl, fp
   1ccb8:	ldr	r0, [sp, #80]	; 0x50
   1ccbc:	bl	13340 <__assert_fail@plt+0x1e48>
   1ccc0:	ldr	r3, [sl, #100]	; 0x64
   1ccc4:	ldr	r2, [sp, #132]	; 0x84
   1ccc8:	ldr	r3, [r3, r2, lsl #2]
   1cccc:	cmp	r3, #0
   1ccd0:	beq	1cdc0 <__assert_fail@plt+0xb8c8>
   1ccd4:	ldr	r2, [sp, #44]	; 0x2c
   1ccd8:	str	r4, [r2]
   1ccdc:	ldr	r2, [sp, #48]	; 0x30
   1cce0:	str	r2, [sl, #100]	; 0x64
   1cce4:	ldr	r2, [sp, #52]	; 0x34
   1cce8:	str	r2, [sl, #40]	; 0x28
   1ccec:	adds	r0, r3, #4
   1ccf0:	moveq	r0, #1
   1ccf4:	beq	1c970 <__assert_fail@plt+0xb478>
   1ccf8:	ldr	r1, [sp, #128]	; 0x80
   1ccfc:	bl	156ac <__assert_fail@plt+0x41b4>
   1cd00:	clz	r0, r0
   1cd04:	lsr	r0, r0, #5
   1cd08:	b	1c970 <__assert_fail@plt+0xb478>
   1cd0c:	mov	r4, fp
   1cd10:	b	1ccb8 <__assert_fail@plt+0xb7c0>
   1cd14:	mov	r4, fp
   1cd18:	b	1ccb8 <__assert_fail@plt+0xb7c0>
   1cd1c:	mov	sl, fp
   1cd20:	b	1ccb8 <__assert_fail@plt+0xb7c0>
   1cd24:	mov	r0, #12
   1cd28:	b	1c970 <__assert_fail@plt+0xb478>
   1cd2c:	mov	r0, #12
   1cd30:	b	1c970 <__assert_fail@plt+0xb478>
   1cd34:	mov	r0, #12
   1cd38:	b	1c970 <__assert_fail@plt+0xb478>
   1cd3c:	ldr	r3, [sl, #100]	; 0x64
   1cd40:	str	r3, [sp, #48]	; 0x30
   1cd44:	ldr	r3, [sl, #40]	; 0x28
   1cd48:	str	r3, [sp, #52]	; 0x34
   1cd4c:	ldr	r3, [sp, #44]	; 0x2c
   1cd50:	ldr	r3, [r3, #8]
   1cd54:	str	r3, [sl, #100]	; 0x64
   1cd58:	str	r5, [sl, #40]	; 0x28
   1cd5c:	str	sl, [sp, #20]
   1cd60:	ldr	r2, [sl, #88]	; 0x58
   1cd64:	sub	r1, r5, #1
   1cd68:	mov	r0, sl
   1cd6c:	bl	19358 <__assert_fail@plt+0x7e60>
   1cd70:	mov	r4, r0
   1cd74:	mov	r1, r7
   1cd78:	add	r0, sp, #72	; 0x48
   1cd7c:	bl	16618 <__assert_fail@plt+0x5120>
   1cd80:	str	r0, [sp, #84]	; 0x54
   1cd84:	cmp	r0, #0
   1cd88:	bne	1c970 <__assert_fail@plt+0xb478>
   1cd8c:	ldr	r3, [sp, #136]	; 0x88
   1cd90:	ldr	r2, [sp, #40]	; 0x28
   1cd94:	add	r1, sp, #72	; 0x48
   1cd98:	ldr	r0, [sp, #36]	; 0x24
   1cd9c:	bl	19780 <__assert_fail@plt+0x8288>
   1cda0:	str	r0, [sp, #84]	; 0x54
   1cda4:	cmp	r0, #0
   1cda8:	moveq	fp, r5
   1cdac:	beq	1c838 <__assert_fail@plt+0xb340>
   1cdb0:	ldr	r0, [sp, #80]	; 0x50
   1cdb4:	bl	13340 <__assert_fail@plt+0x1e48>
   1cdb8:	ldr	r0, [sp, #84]	; 0x54
   1cdbc:	b	1c970 <__assert_fail@plt+0xb478>
   1cdc0:	ldr	r3, [sp, #44]	; 0x2c
   1cdc4:	str	r4, [r3]
   1cdc8:	ldr	r3, [sp, #48]	; 0x30
   1cdcc:	str	r3, [sl, #100]	; 0x64
   1cdd0:	ldr	r3, [sp, #52]	; 0x34
   1cdd4:	str	r3, [sl, #40]	; 0x28
   1cdd8:	mov	r0, #1
   1cddc:	b	1c970 <__assert_fail@plt+0xb478>
   1cde0:	mov	r3, #0
   1cde4:	str	r3, [sp, #72]	; 0x48
   1cde8:	str	r3, [sp, #76]	; 0x4c
   1cdec:	str	r3, [sp, #80]	; 0x50
   1cdf0:	b	1c890 <__assert_fail@plt+0xb398>
   1cdf4:	cmp	r6, #0
   1cdf8:	bne	1cc14 <__assert_fail@plt+0xb71c>
   1cdfc:	ldr	r3, [sp, #12]
   1ce00:	add	r4, r3, #1
   1ce04:	b	1cb70 <__assert_fail@plt+0xb678>
   1ce08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ce0c:	sub	sp, sp, #16
   1ce10:	mov	r4, r0
   1ce14:	mov	r8, r1
   1ce18:	mov	r6, r2
   1ce1c:	mov	r9, r3
   1ce20:	ldr	r5, [sp, #48]	; 0x30
   1ce24:	mov	r1, r2
   1ce28:	ldr	r2, [r1], #8
   1ce2c:	mov	r3, #8
   1ce30:	str	r3, [sp, #8]
   1ce34:	str	r5, [sp, #4]
   1ce38:	str	r9, [sp]
   1ce3c:	ldr	r3, [r6, #4]
   1ce40:	bl	1c764 <__assert_fail@plt+0xb26c>
   1ce44:	cmp	r0, #0
   1ce48:	beq	1ce54 <__assert_fail@plt+0xb95c>
   1ce4c:	add	sp, sp, #16
   1ce50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce54:	ldr	sl, [r8]
   1ce58:	ldr	r7, [r6, #4]
   1ce5c:	ldr	r1, [r4, #112]	; 0x70
   1ce60:	ldr	r3, [r4, #108]	; 0x6c
   1ce64:	cmp	r3, r1
   1ce68:	bge	1cf54 <__assert_fail@plt+0xba5c>
   1ce6c:	ldr	r3, [r4, #108]	; 0x6c
   1ce70:	cmp	r3, #0
   1ce74:	ble	1ce9c <__assert_fail@plt+0xb9a4>
   1ce78:	add	r3, r3, r3, lsl #1
   1ce7c:	lsl	r3, r3, #3
   1ce80:	sub	r3, r3, #24
   1ce84:	ldr	r2, [r4, #116]	; 0x74
   1ce88:	add	r3, r2, r3
   1ce8c:	ldr	r2, [r3, #4]
   1ce90:	cmp	r5, r2
   1ce94:	moveq	r2, #1
   1ce98:	strbeq	r2, [r3, #20]
   1ce9c:	ldr	r3, [r4, #108]	; 0x6c
   1cea0:	ldr	r2, [r4, #116]	; 0x74
   1cea4:	add	r3, r3, r3, lsl #1
   1cea8:	str	r9, [r2, r3, lsl #3]
   1ceac:	ldr	r3, [r4, #108]	; 0x6c
   1ceb0:	ldr	r2, [r4, #116]	; 0x74
   1ceb4:	add	r3, r3, r3, lsl #1
   1ceb8:	add	r3, r2, r3, lsl #3
   1cebc:	str	r5, [r3, #4]
   1cec0:	ldr	r3, [r4, #108]	; 0x6c
   1cec4:	ldr	r2, [r4, #116]	; 0x74
   1cec8:	add	r3, r3, r3, lsl #1
   1cecc:	add	r3, r2, r3, lsl #3
   1ced0:	str	sl, [r3, #8]
   1ced4:	ldr	r3, [r4, #108]	; 0x6c
   1ced8:	ldr	r2, [r4, #116]	; 0x74
   1cedc:	add	r3, r3, r3, lsl #1
   1cee0:	add	r3, r2, r3, lsl #3
   1cee4:	str	r7, [r3, #12]
   1cee8:	ldr	r3, [r4, #108]	; 0x6c
   1ceec:	ldr	r2, [r4, #116]	; 0x74
   1cef0:	add	r3, r3, r3, lsl #1
   1cef4:	add	r3, r2, r3, lsl #3
   1cef8:	cmp	sl, r7
   1cefc:	movne	r2, #0
   1cf00:	mvneq	r2, #0
   1cf04:	str	r2, [r3, #16]
   1cf08:	ldr	r2, [r4, #116]	; 0x74
   1cf0c:	ldr	r3, [r4, #108]	; 0x6c
   1cf10:	add	r1, r3, #1
   1cf14:	str	r1, [r4, #108]	; 0x6c
   1cf18:	add	r3, r3, r3, lsl #1
   1cf1c:	add	r3, r2, r3, lsl #3
   1cf20:	mov	r2, #0
   1cf24:	strb	r2, [r3, #20]
   1cf28:	sub	r7, r7, sl
   1cf2c:	ldr	r3, [r4, #120]	; 0x78
   1cf30:	cmp	r3, r7
   1cf34:	strlt	r7, [r4, #120]	; 0x78
   1cf38:	ldr	r1, [r6, #4]
   1cf3c:	add	r5, r5, r1
   1cf40:	ldr	r1, [r8]
   1cf44:	sub	r1, r5, r1
   1cf48:	mov	r0, r4
   1cf4c:	bl	196f4 <__assert_fail@plt+0x81fc>
   1cf50:	b	1ce4c <__assert_fail@plt+0xb954>
   1cf54:	add	r1, r1, r1, lsl #1
   1cf58:	lsl	r1, r1, #4
   1cf5c:	ldr	r0, [r4, #116]	; 0x74
   1cf60:	bl	23750 <__assert_fail@plt+0x12258>
   1cf64:	cmp	r0, #0
   1cf68:	beq	1cfa0 <__assert_fail@plt+0xbaa8>
   1cf6c:	str	r0, [r4, #116]	; 0x74
   1cf70:	ldr	r2, [r4, #112]	; 0x70
   1cf74:	add	r2, r2, r2, lsl #1
   1cf78:	ldr	r3, [r4, #108]	; 0x6c
   1cf7c:	add	r3, r3, r3, lsl #1
   1cf80:	lsl	r2, r2, #3
   1cf84:	mov	r1, #0
   1cf88:	add	r0, r0, r3, lsl #3
   1cf8c:	bl	11414 <memset@plt>
   1cf90:	ldr	r3, [r4, #112]	; 0x70
   1cf94:	lsl	r3, r3, #1
   1cf98:	str	r3, [r4, #112]	; 0x70
   1cf9c:	b	1ce6c <__assert_fail@plt+0xb974>
   1cfa0:	ldr	r0, [r4, #116]	; 0x74
   1cfa4:	bl	13340 <__assert_fail@plt+0x1e48>
   1cfa8:	mov	r0, #12
   1cfac:	b	1ce4c <__assert_fail@plt+0xb954>
   1cfb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfb4:	sub	sp, sp, #84	; 0x54
   1cfb8:	ldr	r3, [r0, #84]	; 0x54
   1cfbc:	str	r3, [sp, #32]
   1cfc0:	ldr	r3, [r0, #40]	; 0x28
   1cfc4:	mov	r2, r3
   1cfc8:	str	r3, [sp, #28]
   1cfcc:	ldr	r3, [r1, #4]
   1cfd0:	cmp	r3, #0
   1cfd4:	ble	1d69c <__assert_fail@plt+0xc1a4>
   1cfd8:	mov	sl, r0
   1cfdc:	lsl	r3, r2, #2
   1cfe0:	str	r3, [sp, #44]	; 0x2c
   1cfe4:	mov	r3, #0
   1cfe8:	str	r3, [sp, #20]
   1cfec:	mov	r8, r1
   1cff0:	b	1d630 <__assert_fail@plt+0xc138>
   1cff4:	tst	r3, #8
   1cff8:	beq	1d004 <__assert_fail@plt+0xbb0c>
   1cffc:	tst	r0, #1
   1d000:	bne	1d614 <__assert_fail@plt+0xc11c>
   1d004:	tst	r3, #32
   1d008:	beq	1d014 <__assert_fail@plt+0xbb1c>
   1d00c:	tst	r0, #2
   1d010:	beq	1d614 <__assert_fail@plt+0xc11c>
   1d014:	tst	r3, #128	; 0x80
   1d018:	beq	1d024 <__assert_fail@plt+0xbb2c>
   1d01c:	tst	r0, #8
   1d020:	beq	1d614 <__assert_fail@plt+0xc11c>
   1d024:	ldr	fp, [sl, #108]	; 0x6c
   1d028:	ldr	r1, [sp, #28]
   1d02c:	mov	r0, sl
   1d030:	bl	15cd0 <__assert_fail@plt+0x47d8>
   1d034:	cmn	r0, #1
   1d038:	beq	1d06c <__assert_fail@plt+0xbb74>
   1d03c:	add	r0, r0, r0, lsl #1
   1d040:	lsl	r3, r0, #3
   1d044:	add	r2, r3, #24
   1d048:	ldr	r3, [sl, #116]	; 0x74
   1d04c:	add	r3, r3, r2
   1d050:	ldr	r2, [r3, #-24]	; 0xffffffe8
   1d054:	cmp	r9, r2
   1d058:	beq	1d3dc <__assert_fail@plt+0xbee4>
   1d05c:	add	r3, r3, #24
   1d060:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   1d064:	cmp	r2, #0
   1d068:	bne	1d050 <__assert_fail@plt+0xbb58>
   1d06c:	ldr	r3, [sl, #84]	; 0x54
   1d070:	str	r3, [sp, #48]	; 0x30
   1d074:	ldr	r3, [r3]
   1d078:	ldr	r3, [r3, r9, lsl #3]
   1d07c:	str	r3, [sp, #52]	; 0x34
   1d080:	ldr	r3, [sl, #124]	; 0x7c
   1d084:	cmp	r3, #0
   1d088:	ble	1d3dc <__assert_fail@plt+0xbee4>
   1d08c:	ldr	r3, [sl, #4]
   1d090:	mov	r2, #0
   1d094:	str	r2, [sp, #40]	; 0x28
   1d098:	str	r9, [sp, #36]	; 0x24
   1d09c:	str	fp, [sp, #56]	; 0x38
   1d0a0:	str	r8, [sp, #60]	; 0x3c
   1d0a4:	mov	r8, r3
   1d0a8:	b	1d180 <__assert_fail@plt+0xbc88>
   1d0ac:	mov	r2, r5
   1d0b0:	ldr	r3, [sp, #24]
   1d0b4:	add	r1, r8, r3
   1d0b8:	add	r0, r8, r6
   1d0bc:	bl	11270 <memcmp@plt>
   1d0c0:	cmp	r0, #0
   1d0c4:	bne	1d158 <__assert_fail@plt+0xbc60>
   1d0c8:	add	r6, r6, r5
   1d0cc:	ldr	r3, [sp, #28]
   1d0d0:	str	r3, [sp]
   1d0d4:	ldr	r3, [sp, #36]	; 0x24
   1d0d8:	mov	r2, r9
   1d0dc:	mov	r1, r4
   1d0e0:	mov	r0, sl
   1d0e4:	bl	1ce08 <__assert_fail@plt+0xb910>
   1d0e8:	ldr	r8, [sl, #4]
   1d0ec:	cmp	r0, #1
   1d0f0:	bhi	1d3e8 <__assert_fail@plt+0xbef0>
   1d0f4:	add	r7, r7, #1
   1d0f8:	str	fp, [sp, #24]
   1d0fc:	ldr	r3, [r4, #16]
   1d100:	cmp	r7, r3
   1d104:	bge	1d1cc <__assert_fail@plt+0xbcd4>
   1d108:	ldr	r3, [r4, #20]
   1d10c:	ldr	r9, [r3, r7, lsl #2]
   1d110:	ldr	fp, [r9, #4]
   1d114:	ldr	r3, [sp, #24]
   1d118:	sub	r5, fp, r3
   1d11c:	cmp	r5, #0
   1d120:	ble	1d0c8 <__assert_fail@plt+0xbbd0>
   1d124:	add	r1, r6, r5
   1d128:	ldr	r3, [sl, #28]
   1d12c:	cmp	r1, r3
   1d130:	ble	1d0ac <__assert_fail@plt+0xbbb4>
   1d134:	ldr	r3, [sl, #48]	; 0x30
   1d138:	cmp	r1, r3
   1d13c:	bgt	1d158 <__assert_fail@plt+0xbc60>
   1d140:	mov	r0, sl
   1d144:	bl	196f4 <__assert_fail@plt+0x81fc>
   1d148:	cmp	r0, #0
   1d14c:	bne	1d3a0 <__assert_fail@plt+0xbea8>
   1d150:	ldr	r8, [sl, #4]
   1d154:	b	1d0ac <__assert_fail@plt+0xbbb4>
   1d158:	ldr	r3, [r4, #16]
   1d15c:	cmp	r3, r7
   1d160:	ble	1d1c8 <__assert_fail@plt+0xbcd0>
   1d164:	ldr	r3, [sp, #40]	; 0x28
   1d168:	add	r3, r3, #1
   1d16c:	mov	r2, r3
   1d170:	str	r3, [sp, #40]	; 0x28
   1d174:	ldr	r3, [sl, #124]	; 0x7c
   1d178:	cmp	r2, r3
   1d17c:	bge	1d3d0 <__assert_fail@plt+0xbed8>
   1d180:	ldr	r3, [sl, #132]	; 0x84
   1d184:	ldr	r2, [sp, #40]	; 0x28
   1d188:	ldr	r4, [r3, r2, lsl #2]
   1d18c:	ldr	r2, [r4, #4]
   1d190:	ldr	r3, [sp, #48]	; 0x30
   1d194:	ldr	r3, [r3]
   1d198:	ldr	r3, [r3, r2, lsl #3]
   1d19c:	ldr	r2, [sp, #52]	; 0x34
   1d1a0:	cmp	r2, r3
   1d1a4:	bne	1d164 <__assert_fail@plt+0xbc6c>
   1d1a8:	ldr	r3, [r4]
   1d1ac:	str	r3, [sp, #24]
   1d1b0:	ldr	r3, [r4, #16]
   1d1b4:	cmp	r3, #0
   1d1b8:	ble	1d1ec <__assert_fail@plt+0xbcf4>
   1d1bc:	ldr	r6, [sp, #28]
   1d1c0:	mov	r7, #0
   1d1c4:	b	1d108 <__assert_fail@plt+0xbc10>
   1d1c8:	ldr	fp, [sp, #24]
   1d1cc:	cmp	r7, #0
   1d1d0:	addgt	fp, fp, #1
   1d1d4:	ldr	r3, [sp, #28]
   1d1d8:	cmp	r3, fp
   1d1dc:	blt	1d164 <__assert_fail@plt+0xbc6c>
   1d1e0:	lsl	r9, fp, #2
   1d1e4:	ldr	r7, [sp, #52]	; 0x34
   1d1e8:	b	1d310 <__assert_fail@plt+0xbe18>
   1d1ec:	ldr	r6, [sp, #28]
   1d1f0:	ldr	fp, [sp, #24]
   1d1f4:	b	1d1d4 <__assert_fail@plt+0xbcdc>
   1d1f8:	ldr	r3, [sl, #48]	; 0x30
   1d1fc:	cmp	r3, r6
   1d200:	ble	1d164 <__assert_fail@plt+0xbc6c>
   1d204:	add	r1, r6, #1
   1d208:	mov	r0, sl
   1d20c:	bl	1733c <__assert_fail@plt+0x5e44>
   1d210:	cmp	r0, #0
   1d214:	bne	1d3a0 <__assert_fail@plt+0xbea8>
   1d218:	ldr	r8, [sl, #4]
   1d21c:	b	1d32c <__assert_fail@plt+0xbe34>
   1d220:	add	r3, r3, #1
   1d224:	cmp	ip, r3
   1d228:	beq	1d2fc <__assert_fail@plt+0xbe04>
   1d22c:	ldr	r5, [r2, #4]!
   1d230:	add	r1, r0, r5, lsl #3
   1d234:	ldrb	r1, [r1, #4]
   1d238:	cmp	r1, #9
   1d23c:	bne	1d220 <__assert_fail@plt+0xbd28>
   1d240:	ldr	r1, [r0, r5, lsl #3]
   1d244:	cmp	r7, r1
   1d248:	bne	1d220 <__assert_fail@plt+0xbd28>
   1d24c:	cmn	r5, #1
   1d250:	beq	1d2fc <__assert_fail@plt+0xbe04>
   1d254:	ldr	r3, [r4, #8]
   1d258:	cmp	r3, #0
   1d25c:	beq	1d37c <__assert_fail@plt+0xbe84>
   1d260:	ldr	r3, [r4]
   1d264:	ldr	r2, [r4, #4]
   1d268:	ldr	r1, [r4, #8]
   1d26c:	mov	r0, #9
   1d270:	str	r0, [sp, #8]
   1d274:	str	fp, [sp, #4]
   1d278:	str	r5, [sp]
   1d27c:	mov	r0, sl
   1d280:	bl	1c764 <__assert_fail@plt+0xb26c>
   1d284:	cmp	r0, #1
   1d288:	beq	1d2fc <__assert_fail@plt+0xbe04>
   1d28c:	cmp	r0, #0
   1d290:	bne	1d3a0 <__assert_fail@plt+0xbea8>
   1d294:	ldr	r3, [r4, #16]
   1d298:	ldr	r2, [r4, #12]
   1d29c:	cmp	r3, r2
   1d2a0:	beq	1d3a8 <__assert_fail@plt+0xbeb0>
   1d2a4:	mov	r1, #20
   1d2a8:	mov	r0, #1
   1d2ac:	bl	236d0 <__assert_fail@plt+0x121d8>
   1d2b0:	subs	r2, r0, #0
   1d2b4:	beq	1d6a8 <__assert_fail@plt+0xc1b0>
   1d2b8:	ldr	r1, [r4, #16]
   1d2bc:	ldr	r3, [r4, #20]
   1d2c0:	str	r2, [r3, r1, lsl #2]
   1d2c4:	str	r5, [r2]
   1d2c8:	str	fp, [r2, #4]
   1d2cc:	ldr	r3, [r4, #16]
   1d2d0:	add	r3, r3, #1
   1d2d4:	str	r3, [r4, #16]
   1d2d8:	ldr	r3, [sp, #28]
   1d2dc:	str	r3, [sp]
   1d2e0:	ldr	r3, [sp, #36]	; 0x24
   1d2e4:	mov	r1, r4
   1d2e8:	mov	r0, sl
   1d2ec:	bl	1ce08 <__assert_fail@plt+0xb910>
   1d2f0:	ldr	r8, [sl, #4]
   1d2f4:	cmp	r0, #1
   1d2f8:	bhi	1d438 <__assert_fail@plt+0xbf40>
   1d2fc:	add	fp, fp, #1
   1d300:	add	r9, r9, #4
   1d304:	ldr	r3, [sp, #28]
   1d308:	cmp	r3, fp
   1d30c:	blt	1d164 <__assert_fail@plt+0xbc6c>
   1d310:	ldr	r3, [r4]
   1d314:	sub	r3, fp, r3
   1d318:	cmp	r3, #0
   1d31c:	ble	1d348 <__assert_fail@plt+0xbe50>
   1d320:	ldr	r3, [sl, #28]
   1d324:	cmp	r3, r6
   1d328:	ble	1d1f8 <__assert_fail@plt+0xbd00>
   1d32c:	add	r2, r6, #1
   1d330:	add	r3, r8, fp
   1d334:	ldrb	r1, [r8, r6]
   1d338:	ldrb	r3, [r3, #-1]
   1d33c:	cmp	r1, r3
   1d340:	bne	1d164 <__assert_fail@plt+0xbc6c>
   1d344:	mov	r6, r2
   1d348:	ldr	r3, [sl, #100]	; 0x64
   1d34c:	ldr	r3, [r3, r9]
   1d350:	cmp	r3, #0
   1d354:	beq	1d2fc <__assert_fail@plt+0xbe04>
   1d358:	ldr	ip, [r3, #8]
   1d35c:	cmp	ip, #0
   1d360:	ble	1d2fc <__assert_fail@plt+0xbe04>
   1d364:	ldr	r2, [sp, #48]	; 0x30
   1d368:	ldr	r0, [r2]
   1d36c:	ldr	r2, [r3, #12]
   1d370:	sub	r2, r2, #4
   1d374:	mov	r3, #0
   1d378:	b	1d22c <__assert_fail@plt+0xbd34>
   1d37c:	ldr	r1, [r4]
   1d380:	sub	r1, fp, r1
   1d384:	add	r1, r1, #1
   1d388:	mov	r0, #12
   1d38c:	bl	236d0 <__assert_fail@plt+0x121d8>
   1d390:	str	r0, [r4, #8]
   1d394:	cmp	r0, #0
   1d398:	bne	1d260 <__assert_fail@plt+0xbd68>
   1d39c:	mov	r0, #12
   1d3a0:	str	r0, [sp, #76]	; 0x4c
   1d3a4:	b	1d488 <__assert_fail@plt+0xbf90>
   1d3a8:	lsl	r3, r3, #1
   1d3ac:	add	r8, r3, #1
   1d3b0:	lsl	r1, r8, #2
   1d3b4:	ldr	r0, [r4, #20]
   1d3b8:	bl	23750 <__assert_fail@plt+0x12258>
   1d3bc:	cmp	r0, #0
   1d3c0:	beq	1d6a8 <__assert_fail@plt+0xc1b0>
   1d3c4:	str	r0, [r4, #20]
   1d3c8:	str	r8, [r4, #12]
   1d3cc:	b	1d2a4 <__assert_fail@plt+0xbdac>
   1d3d0:	ldr	r9, [sp, #36]	; 0x24
   1d3d4:	ldr	fp, [sp, #56]	; 0x38
   1d3d8:	ldr	r8, [sp, #60]	; 0x3c
   1d3dc:	mov	r3, #0
   1d3e0:	str	r3, [sp, #76]	; 0x4c
   1d3e4:	b	1d400 <__assert_fail@plt+0xbf08>
   1d3e8:	ldr	r9, [sp, #36]	; 0x24
   1d3ec:	ldr	fp, [sp, #56]	; 0x38
   1d3f0:	ldr	r8, [sp, #60]	; 0x3c
   1d3f4:	str	r0, [sp, #76]	; 0x4c
   1d3f8:	cmp	r0, #0
   1d3fc:	bne	1d488 <__assert_fail@plt+0xbf90>
   1d400:	lsl	r3, r9, #2
   1d404:	str	r3, [sp, #52]	; 0x34
   1d408:	ldr	r3, [sl, #108]	; 0x6c
   1d40c:	cmp	fp, r3
   1d410:	bge	1d614 <__assert_fail@plt+0xc11c>
   1d414:	add	r3, r9, r9, lsl #1
   1d418:	lsl	r3, r3, #2
   1d41c:	str	r3, [sp, #56]	; 0x38
   1d420:	add	r4, fp, fp, lsl #1
   1d424:	lsl	r4, r4, #3
   1d428:	ldr	r6, [sp, #28]
   1d42c:	str	r8, [sp, #60]	; 0x3c
   1d430:	ldr	r8, [sp, #32]
   1d434:	b	1d4b8 <__assert_fail@plt+0xbfc0>
   1d438:	ldr	r9, [sp, #36]	; 0x24
   1d43c:	ldr	fp, [sp, #56]	; 0x38
   1d440:	ldr	r8, [sp, #60]	; 0x3c
   1d444:	b	1d3f4 <__assert_fail@plt+0xbefc>
   1d448:	ldr	r3, [sp, #40]	; 0x28
   1d44c:	ldr	r2, [sp, #24]
   1d450:	mov	r1, r8
   1d454:	add	r0, sp, #76	; 0x4c
   1d458:	bl	182a0 <__assert_fail@plt+0x6da8>
   1d45c:	str	r0, [r7, r5, lsl #2]
   1d460:	ldr	r3, [sl, #100]	; 0x64
   1d464:	ldr	r3, [r3, r5, lsl #2]
   1d468:	cmp	r3, #0
   1d46c:	bne	1d5ac <__assert_fail@plt+0xc0b4>
   1d470:	ldr	r3, [sp, #76]	; 0x4c
   1d474:	cmp	r3, #0
   1d478:	beq	1d5ac <__assert_fail@plt+0xc0b4>
   1d47c:	b	1d488 <__assert_fail@plt+0xbf90>
   1d480:	ldr	r0, [sp, #72]	; 0x48
   1d484:	bl	13340 <__assert_fail@plt+0x1e48>
   1d488:	ldr	r0, [sp, #76]	; 0x4c
   1d48c:	add	sp, sp, #84	; 0x54
   1d490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d494:	ldr	r3, [sp, #76]	; 0x4c
   1d498:	cmp	r3, #0
   1d49c:	beq	1d5ac <__assert_fail@plt+0xc0b4>
   1d4a0:	b	1d488 <__assert_fail@plt+0xbf90>
   1d4a4:	add	fp, fp, #1
   1d4a8:	add	r4, r4, #24
   1d4ac:	ldr	r3, [sl, #108]	; 0x6c
   1d4b0:	cmp	r3, fp
   1d4b4:	ble	1d610 <__assert_fail@plt+0xc118>
   1d4b8:	ldr	r3, [sl, #116]	; 0x74
   1d4bc:	add	r2, r3, r4
   1d4c0:	ldr	r3, [r3, r4]
   1d4c4:	cmp	r9, r3
   1d4c8:	bne	1d4a4 <__assert_fail@plt+0xbfac>
   1d4cc:	ldr	r3, [r2, #4]
   1d4d0:	cmp	r6, r3
   1d4d4:	bne	1d4a4 <__assert_fail@plt+0xbfac>
   1d4d8:	ldr	r3, [r2, #12]
   1d4dc:	ldr	r5, [r2, #8]
   1d4e0:	subs	r2, r3, r5
   1d4e4:	str	r2, [sp, #36]	; 0x24
   1d4e8:	ldreq	r2, [r8, #20]
   1d4ec:	ldreq	r1, [sp, #56]	; 0x38
   1d4f0:	addeq	r2, r2, r1
   1d4f4:	ldreq	r2, [r2, #8]
   1d4f8:	ldreq	r2, [r2]
   1d4fc:	ldrne	r2, [r8, #12]
   1d500:	ldrne	r1, [sp, #52]	; 0x34
   1d504:	ldrne	r2, [r2, r1]
   1d508:	add	r2, r2, r2, lsl #1
   1d50c:	ldr	r1, [r8, #24]
   1d510:	add	r2, r1, r2, lsl #2
   1d514:	str	r2, [sp, #24]
   1d518:	add	r3, r6, r3
   1d51c:	sub	r5, r3, r5
   1d520:	ldr	r2, [sl, #88]	; 0x58
   1d524:	sub	r1, r5, #1
   1d528:	mov	r0, sl
   1d52c:	bl	19358 <__assert_fail@plt+0x7e60>
   1d530:	str	r0, [sp, #40]	; 0x28
   1d534:	ldr	r7, [sl, #100]	; 0x64
   1d538:	ldr	r3, [r7, r5, lsl #2]
   1d53c:	ldr	r2, [sp, #44]	; 0x2c
   1d540:	ldr	r2, [r7, r2]
   1d544:	cmp	r2, #0
   1d548:	ldrne	r2, [r2, #8]
   1d54c:	moveq	r2, #0
   1d550:	str	r2, [sp, #48]	; 0x30
   1d554:	cmp	r3, #0
   1d558:	beq	1d448 <__assert_fail@plt+0xbf50>
   1d55c:	ldr	r2, [sp, #24]
   1d560:	ldr	r1, [r3, #40]	; 0x28
   1d564:	add	r0, sp, #64	; 0x40
   1d568:	bl	16b64 <__assert_fail@plt+0x566c>
   1d56c:	str	r0, [sp, #76]	; 0x4c
   1d570:	cmp	r0, #0
   1d574:	bne	1d480 <__assert_fail@plt+0xbf88>
   1d578:	ldr	r7, [sl, #100]	; 0x64
   1d57c:	ldr	r3, [sp, #40]	; 0x28
   1d580:	add	r2, sp, #64	; 0x40
   1d584:	mov	r1, r8
   1d588:	add	r0, sp, #76	; 0x4c
   1d58c:	bl	182a0 <__assert_fail@plt+0x6da8>
   1d590:	str	r0, [r7, r5, lsl #2]
   1d594:	ldr	r0, [sp, #72]	; 0x48
   1d598:	bl	13340 <__assert_fail@plt+0x1e48>
   1d59c:	ldr	r3, [sl, #100]	; 0x64
   1d5a0:	ldr	r3, [r3, r5, lsl #2]
   1d5a4:	cmp	r3, #0
   1d5a8:	beq	1d494 <__assert_fail@plt+0xbf9c>
   1d5ac:	ldr	r3, [sp, #36]	; 0x24
   1d5b0:	cmp	r3, #0
   1d5b4:	bne	1d4a4 <__assert_fail@plt+0xbfac>
   1d5b8:	ldr	r3, [sl, #100]	; 0x64
   1d5bc:	ldr	r2, [sp, #44]	; 0x2c
   1d5c0:	ldr	r3, [r3, r2]
   1d5c4:	ldr	r3, [r3, #8]
   1d5c8:	ldr	r2, [sp, #48]	; 0x30
   1d5cc:	cmp	r2, r3
   1d5d0:	bge	1d4a4 <__assert_fail@plt+0xbfac>
   1d5d4:	mov	r2, r6
   1d5d8:	ldr	r5, [sp, #24]
   1d5dc:	mov	r1, r5
   1d5e0:	mov	r0, sl
   1d5e4:	bl	195ec <__assert_fail@plt+0x80f4>
   1d5e8:	str	r0, [sp, #76]	; 0x4c
   1d5ec:	cmp	r0, #0
   1d5f0:	bne	1d488 <__assert_fail@plt+0xbf90>
   1d5f4:	mov	r1, r5
   1d5f8:	mov	r0, sl
   1d5fc:	bl	1cfb0 <__assert_fail@plt+0xbab8>
   1d600:	str	r0, [sp, #76]	; 0x4c
   1d604:	cmp	r0, #0
   1d608:	beq	1d4a4 <__assert_fail@plt+0xbfac>
   1d60c:	b	1d488 <__assert_fail@plt+0xbf90>
   1d610:	ldr	r8, [sp, #60]	; 0x3c
   1d614:	ldr	r3, [sp, #20]
   1d618:	add	r3, r3, #1
   1d61c:	mov	r2, r3
   1d620:	str	r3, [sp, #20]
   1d624:	ldr	r3, [r8, #4]
   1d628:	cmp	r3, r2
   1d62c:	ble	1d69c <__assert_fail@plt+0xc1a4>
   1d630:	ldr	r3, [r8, #8]
   1d634:	ldr	r2, [sp, #20]
   1d638:	ldr	r9, [r3, r2, lsl #2]
   1d63c:	ldr	r3, [sp, #32]
   1d640:	ldr	r4, [r3]
   1d644:	add	r4, r4, r9, lsl #3
   1d648:	ldrb	r3, [r4, #4]
   1d64c:	cmp	r3, #4
   1d650:	bne	1d614 <__assert_fail@plt+0xc11c>
   1d654:	ldr	r3, [r4, #4]
   1d658:	ldr	r2, [pc, #84]	; 1d6b4 <__assert_fail@plt+0xc1bc>
   1d65c:	tst	r3, r2
   1d660:	beq	1d024 <__assert_fail@plt+0xbb2c>
   1d664:	ldr	r2, [sl, #88]	; 0x58
   1d668:	ldr	r1, [sp, #28]
   1d66c:	mov	r0, sl
   1d670:	bl	19358 <__assert_fail@plt+0x7e60>
   1d674:	ldr	r3, [r4, #4]
   1d678:	lsl	r3, r3, #14
   1d67c:	lsr	r3, r3, #22
   1d680:	tst	r3, #4
   1d684:	beq	1cff4 <__assert_fail@plt+0xbafc>
   1d688:	tst	r0, #1
   1d68c:	beq	1d614 <__assert_fail@plt+0xc11c>
   1d690:	tst	r3, #8
   1d694:	bne	1d614 <__assert_fail@plt+0xc11c>
   1d698:	b	1d004 <__assert_fail@plt+0xbb0c>
   1d69c:	mov	r3, #0
   1d6a0:	str	r3, [sp, #76]	; 0x4c
   1d6a4:	b	1d488 <__assert_fail@plt+0xbf90>
   1d6a8:	mov	r3, #12
   1d6ac:	str	r3, [sp, #76]	; 0x4c
   1d6b0:	b	1d488 <__assert_fail@plt+0xbf90>
   1d6b4:	andeq	pc, r3, r0, lsl #30
   1d6b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d6bc:	sub	sp, sp, #16
   1d6c0:	mov	r8, r0
   1d6c4:	mov	r4, r1
   1d6c8:	mov	r5, r2
   1d6cc:	ldr	r7, [r1, #84]	; 0x54
   1d6d0:	ldr	r6, [r1, #40]	; 0x28
   1d6d4:	ldr	r3, [r1, #104]	; 0x68
   1d6d8:	cmp	r6, r3
   1d6dc:	ble	1d738 <__assert_fail@plt+0xc240>
   1d6e0:	ldr	r3, [r1, #100]	; 0x64
   1d6e4:	str	r2, [r3, r6, lsl #2]
   1d6e8:	str	r6, [r1, #104]	; 0x68
   1d6ec:	ldr	r3, [r7, #76]	; 0x4c
   1d6f0:	cmp	r3, #0
   1d6f4:	cmpne	r5, #0
   1d6f8:	moveq	r0, r5
   1d6fc:	beq	1d730 <__assert_fail@plt+0xc238>
   1d700:	add	r7, r5, #4
   1d704:	mov	r2, r6
   1d708:	mov	r1, r7
   1d70c:	mov	r0, r4
   1d710:	bl	195ec <__assert_fail@plt+0x80f4>
   1d714:	str	r0, [r8]
   1d718:	cmp	r0, #0
   1d71c:	bne	1d820 <__assert_fail@plt+0xc328>
   1d720:	ldrb	r3, [r5, #52]	; 0x34
   1d724:	tst	r3, #64	; 0x40
   1d728:	moveq	r0, r5
   1d72c:	bne	1d7fc <__assert_fail@plt+0xc304>
   1d730:	add	sp, sp, #16
   1d734:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d738:	ldr	r9, [r1, #100]	; 0x64
   1d73c:	ldr	r3, [r9, r6, lsl #2]
   1d740:	cmp	r3, #0
   1d744:	streq	r2, [r9, r6, lsl #2]
   1d748:	beq	1d6ec <__assert_fail@plt+0xc1f4>
   1d74c:	ldr	r2, [r3, #40]	; 0x28
   1d750:	cmp	r5, #0
   1d754:	beq	1d7c0 <__assert_fail@plt+0xc2c8>
   1d758:	ldr	r9, [r5, #40]	; 0x28
   1d75c:	mov	r1, r9
   1d760:	add	r0, sp, #4
   1d764:	bl	16b64 <__assert_fail@plt+0x566c>
   1d768:	str	r0, [r8]
   1d76c:	cmp	r0, #0
   1d770:	movne	r0, #0
   1d774:	bne	1d730 <__assert_fail@plt+0xc238>
   1d778:	ldr	r1, [r4, #40]	; 0x28
   1d77c:	ldr	r2, [r4, #88]	; 0x58
   1d780:	sub	r1, r1, #1
   1d784:	mov	r0, r4
   1d788:	bl	19358 <__assert_fail@plt+0x7e60>
   1d78c:	ldr	sl, [r4, #100]	; 0x64
   1d790:	mov	r3, r0
   1d794:	add	r2, sp, #4
   1d798:	mov	r1, r7
   1d79c:	mov	r0, r8
   1d7a0:	bl	182a0 <__assert_fail@plt+0x6da8>
   1d7a4:	mov	r5, r0
   1d7a8:	str	r0, [sl, r6, lsl #2]
   1d7ac:	cmp	r9, #0
   1d7b0:	beq	1d6ec <__assert_fail@plt+0xc1f4>
   1d7b4:	ldr	r0, [sp, #12]
   1d7b8:	bl	13340 <__assert_fail@plt+0x1e48>
   1d7bc:	b	1d6ec <__assert_fail@plt+0xc1f4>
   1d7c0:	add	r5, sp, #4
   1d7c4:	ldm	r2, {r0, r1, r2}
   1d7c8:	stm	r5, {r0, r1, r2}
   1d7cc:	ldr	r2, [r4, #88]	; 0x58
   1d7d0:	sub	r1, r6, #1
   1d7d4:	mov	r0, r4
   1d7d8:	bl	19358 <__assert_fail@plt+0x7e60>
   1d7dc:	mov	r3, r0
   1d7e0:	mov	r2, r5
   1d7e4:	mov	r1, r7
   1d7e8:	mov	r0, r8
   1d7ec:	bl	182a0 <__assert_fail@plt+0x6da8>
   1d7f0:	mov	r5, r0
   1d7f4:	str	r0, [r9, r6, lsl #2]
   1d7f8:	b	1d6ec <__assert_fail@plt+0xc1f4>
   1d7fc:	mov	r1, r7
   1d800:	mov	r0, r4
   1d804:	bl	1cfb0 <__assert_fail@plt+0xbab8>
   1d808:	str	r0, [r8]
   1d80c:	cmp	r0, #0
   1d810:	bne	1d828 <__assert_fail@plt+0xc330>
   1d814:	ldr	r3, [r4, #100]	; 0x64
   1d818:	ldr	r0, [r3, r6, lsl #2]
   1d81c:	b	1d730 <__assert_fail@plt+0xc238>
   1d820:	mov	r0, #0
   1d824:	b	1d730 <__assert_fail@plt+0xc238>
   1d828:	mov	r0, #0
   1d82c:	b	1d730 <__assert_fail@plt+0xc238>
   1d830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d834:	sub	sp, sp, #92	; 0x5c
   1d838:	str	r0, [sp, #28]
   1d83c:	mov	sl, r1
   1d840:	mov	fp, r2
   1d844:	mov	r5, r3
   1d848:	ldr	r6, [r0, #84]	; 0x54
   1d84c:	mov	r3, #0
   1d850:	str	r3, [sp, #84]	; 0x54
   1d854:	lsl	r3, r2, #2
   1d858:	str	r3, [sp, #32]
   1d85c:	ldr	r3, [r0, #100]	; 0x64
   1d860:	ldr	r3, [r3, r2, lsl #2]
   1d864:	cmp	r3, #0
   1d868:	addne	r3, r3, #4
   1d86c:	moveq	r3, #0
   1d870:	str	r3, [sp, #12]
   1d874:	ldr	r3, [r5, #4]
   1d878:	cmp	r3, #0
   1d87c:	bne	1d8c4 <__assert_fail@plt+0xc3cc>
   1d880:	ldr	r3, [r1]
   1d884:	mov	r2, #0
   1d888:	str	r2, [r3, fp, lsl #2]
   1d88c:	ldr	r3, [sp, #12]
   1d890:	cmp	r3, #0
   1d894:	moveq	r4, #0
   1d898:	beq	1d8b8 <__assert_fail@plt+0xc3c0>
   1d89c:	ldr	r3, [sp, #28]
   1d8a0:	ldr	r3, [r3, #100]	; 0x64
   1d8a4:	ldr	r3, [r3, fp, lsl #2]
   1d8a8:	ldrb	r3, [r3, #52]	; 0x34
   1d8ac:	tst	r3, #64	; 0x40
   1d8b0:	moveq	r4, #0
   1d8b4:	bne	1db6c <__assert_fail@plt+0xc674>
   1d8b8:	mov	r0, r4
   1d8bc:	add	sp, sp, #92	; 0x5c
   1d8c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8c4:	ldr	r3, [sp, #12]
   1d8c8:	cmp	r3, #0
   1d8cc:	beq	1db44 <__assert_fail@plt+0xc64c>
   1d8d0:	add	r0, sp, #88	; 0x58
   1d8d4:	mov	r3, #0
   1d8d8:	str	r3, [r0, #-32]!	; 0xffffffe0
   1d8dc:	mov	r2, r5
   1d8e0:	mov	r1, r6
   1d8e4:	bl	1c2a0 <__assert_fail@plt+0xada8>
   1d8e8:	mov	r7, r0
   1d8ec:	ldr	r4, [sp, #56]	; 0x38
   1d8f0:	cmp	r4, #0
   1d8f4:	bne	1d8b8 <__assert_fail@plt+0xc3c0>
   1d8f8:	ldr	r3, [r0, #28]
   1d8fc:	cmp	r3, #0
   1d900:	bne	1d964 <__assert_fail@plt+0xc46c>
   1d904:	add	r8, r0, #28
   1d908:	ldr	r1, [r5, #4]
   1d90c:	mov	r0, r8
   1d910:	bl	1665c <__assert_fail@plt+0x5164>
   1d914:	str	r0, [sp, #56]	; 0x38
   1d918:	cmp	r0, #0
   1d91c:	bne	1de2c <__assert_fail@plt+0xc934>
   1d920:	ldr	r3, [r5, #4]
   1d924:	cmp	r3, #0
   1d928:	ble	1d964 <__assert_fail@plt+0xc46c>
   1d92c:	ldr	r3, [r5, #8]
   1d930:	ldr	r1, [r3, r4, lsl #2]
   1d934:	add	r1, r1, r1, lsl #1
   1d938:	ldr	r3, [r6, #28]
   1d93c:	add	r1, r3, r1, lsl #2
   1d940:	mov	r0, r8
   1d944:	bl	18f84 <__assert_fail@plt+0x7a8c>
   1d948:	str	r0, [sp, #56]	; 0x38
   1d94c:	cmp	r0, #0
   1d950:	bne	1de34 <__assert_fail@plt+0xc93c>
   1d954:	add	r4, r4, #1
   1d958:	ldr	r3, [r5, #4]
   1d95c:	cmp	r4, r3
   1d960:	blt	1d92c <__assert_fail@plt+0xc434>
   1d964:	add	r2, r7, #28
   1d968:	ldr	r1, [sp, #12]
   1d96c:	mov	r0, r5
   1d970:	bl	16928 <__assert_fail@plt+0x5430>
   1d974:	mov	r4, r0
   1d978:	str	r0, [sp, #84]	; 0x54
   1d97c:	cmp	r0, #0
   1d980:	bne	1d8b8 <__assert_fail@plt+0xc3c0>
   1d984:	ldr	r3, [sl, #20]
   1d988:	cmp	r3, #0
   1d98c:	bne	1d9b8 <__assert_fail@plt+0xc4c0>
   1d990:	ldr	r4, [sl]
   1d994:	mov	r2, r5
   1d998:	mov	r1, r6
   1d99c:	add	r0, sp, #84	; 0x54
   1d9a0:	bl	1c2a0 <__assert_fail@plt+0xada8>
   1d9a4:	str	r0, [r4, fp, lsl #2]
   1d9a8:	ldr	r4, [sp, #84]	; 0x54
   1d9ac:	cmp	r4, #0
   1d9b0:	beq	1d89c <__assert_fail@plt+0xc3a4>
   1d9b4:	b	1d8b8 <__assert_fail@plt+0xc3c0>
   1d9b8:	ldr	r3, [sp, #28]
   1d9bc:	ldr	r3, [r3, #116]	; 0x74
   1d9c0:	str	r3, [sp, #20]
   1d9c4:	ble	1de3c <__assert_fail@plt+0xc944>
   1d9c8:	mov	r7, #0
   1d9cc:	b	1de88 <__assert_fail@plt+0xc990>
   1d9d0:	ldr	lr, [r5, #4]
   1d9d4:	cmp	lr, #0
   1d9d8:	ble	1de78 <__assert_fail@plt+0xc980>
   1d9dc:	ldr	r3, [r5, #8]
   1d9e0:	add	lr, r3, lr, lsl #2
   1d9e4:	mvn	r2, #0
   1d9e8:	mov	r4, r2
   1d9ec:	mov	r1, r2
   1d9f0:	b	1da08 <__assert_fail@plt+0xc510>
   1d9f4:	ldr	ip, [r0, r2, lsl #3]
   1d9f8:	cmp	r8, ip
   1d9fc:	moveq	r1, r2
   1da00:	cmp	lr, r3
   1da04:	beq	1da34 <__assert_fail@plt+0xc53c>
   1da08:	ldr	r2, [r3], #4
   1da0c:	add	ip, r0, r2, lsl #3
   1da10:	ldrb	ip, [ip, #4]
   1da14:	cmp	ip, #8
   1da18:	beq	1d9f4 <__assert_fail@plt+0xc4fc>
   1da1c:	cmp	ip, #9
   1da20:	bne	1da00 <__assert_fail@plt+0xc508>
   1da24:	ldr	ip, [r0, r2, lsl #3]
   1da28:	cmp	r8, ip
   1da2c:	moveq	r4, r2
   1da30:	b	1da00 <__assert_fail@plt+0xc508>
   1da34:	str	r4, [sp, #16]
   1da38:	cmp	r1, #0
   1da3c:	blt	1de6c <__assert_fail@plt+0xc974>
   1da40:	ldr	r3, [sp, #12]
   1da44:	mov	r2, r5
   1da48:	mov	r0, r6
   1da4c:	bl	1aab8 <__assert_fail@plt+0x95c0>
   1da50:	cmp	r0, #0
   1da54:	bne	1dee0 <__assert_fail@plt+0xc9e8>
   1da58:	cmp	r4, #0
   1da5c:	blt	1de78 <__assert_fail@plt+0xc980>
   1da60:	ldr	r3, [r5, #4]
   1da64:	cmp	r3, #0
   1da68:	ble	1de78 <__assert_fail@plt+0xc980>
   1da6c:	mov	r8, #0
   1da70:	b	1da84 <__assert_fail@plt+0xc58c>
   1da74:	add	r8, r8, #1
   1da78:	ldr	r3, [r5, #4]
   1da7c:	cmp	r8, r3
   1da80:	bge	1de78 <__assert_fail@plt+0xc980>
   1da84:	ldr	r3, [r5, #8]
   1da88:	ldr	r9, [r3, r8, lsl #2]
   1da8c:	add	r4, r9, r9, lsl #1
   1da90:	lsl	r4, r4, #2
   1da94:	ldr	r0, [r6, #28]
   1da98:	ldr	r1, [sp, #16]
   1da9c:	add	r0, r0, r4
   1daa0:	bl	156ac <__assert_fail@plt+0x41b4>
   1daa4:	cmp	r0, #0
   1daa8:	bne	1da74 <__assert_fail@plt+0xc57c>
   1daac:	ldr	r0, [r6, #24]
   1dab0:	ldr	r1, [sp, #16]
   1dab4:	add	r0, r0, r4
   1dab8:	bl	156ac <__assert_fail@plt+0x41b4>
   1dabc:	cmp	r0, #0
   1dac0:	bne	1da74 <__assert_fail@plt+0xc57c>
   1dac4:	ldr	r3, [sp, #12]
   1dac8:	mov	r2, r5
   1dacc:	mov	r1, r9
   1dad0:	mov	r0, r6
   1dad4:	bl	1aab8 <__assert_fail@plt+0x95c0>
   1dad8:	cmp	r0, #0
   1dadc:	bne	1dee8 <__assert_fail@plt+0xc9f0>
   1dae0:	sub	r8, r8, #1
   1dae4:	b	1da74 <__assert_fail@plt+0xc57c>
   1dae8:	add	r9, r9, #1
   1daec:	ldr	r3, [r5, #4]
   1daf0:	cmp	r9, r3
   1daf4:	bge	1de78 <__assert_fail@plt+0xc980>
   1daf8:	ldr	r3, [r5, #8]
   1dafc:	ldr	r1, [r3, r9, lsl #2]
   1db00:	ldr	r2, [r6]
   1db04:	add	r3, r2, r1, lsl #3
   1db08:	ldrb	r3, [r3, #4]
   1db0c:	sub	r3, r3, #8
   1db10:	cmp	r3, #1
   1db14:	bhi	1dae8 <__assert_fail@plt+0xc5f0>
   1db18:	ldr	r3, [r2, r1, lsl #3]
   1db1c:	cmp	r8, r3
   1db20:	bne	1dae8 <__assert_fail@plt+0xc5f0>
   1db24:	ldr	r3, [sp, #12]
   1db28:	mov	r2, r5
   1db2c:	mov	r0, r6
   1db30:	bl	1aab8 <__assert_fail@plt+0x95c0>
   1db34:	cmp	r0, #0
   1db38:	beq	1dae8 <__assert_fail@plt+0xc5f0>
   1db3c:	mov	r4, r0
   1db40:	b	1d8b8 <__assert_fail@plt+0xc3c0>
   1db44:	ldr	r4, [r1]
   1db48:	mov	r2, r5
   1db4c:	mov	r1, r6
   1db50:	add	r0, sp, #84	; 0x54
   1db54:	bl	1c2a0 <__assert_fail@plt+0xada8>
   1db58:	str	r0, [r4, fp, lsl #2]
   1db5c:	ldr	r4, [sp, #84]	; 0x54
   1db60:	cmp	r4, #0
   1db64:	beq	1d88c <__assert_fail@plt+0xc394>
   1db68:	b	1d8b8 <__assert_fail@plt+0xc3c0>
   1db6c:	mov	r1, fp
   1db70:	ldr	r4, [sp, #28]
   1db74:	mov	r0, r4
   1db78:	bl	15cd0 <__assert_fail@plt+0x47d8>
   1db7c:	str	r0, [sp, #44]	; 0x2c
   1db80:	cmn	r0, #1
   1db84:	moveq	r4, #0
   1db88:	beq	1d8b8 <__assert_fail@plt+0xc3c0>
   1db8c:	ldr	r9, [r4, #84]	; 0x54
   1db90:	mov	r3, #0
   1db94:	str	r3, [sp, #56]	; 0x38
   1db98:	ldr	r1, [sp, #12]
   1db9c:	ldr	r3, [r1, #4]
   1dba0:	cmp	r3, #0
   1dba4:	ble	1de24 <__assert_fail@plt+0xc92c>
   1dba8:	add	r3, r0, r0, lsl #1
   1dbac:	lsl	r3, r3, #3
   1dbb0:	str	r3, [sp, #48]	; 0x30
   1dbb4:	mov	r3, #0
   1dbb8:	str	r3, [sp, #16]
   1dbbc:	add	r3, sl, #16
   1dbc0:	str	r3, [sp, #40]	; 0x28
   1dbc4:	add	r3, fp, #1
   1dbc8:	str	r3, [sp, #52]	; 0x34
   1dbcc:	str	fp, [sp, #12]
   1dbd0:	mov	fp, r1
   1dbd4:	b	1dd9c <__assert_fail@plt+0xc8a4>
   1dbd8:	ldr	r3, [sl, #12]
   1dbdc:	ldr	r1, [sp, #12]
   1dbe0:	cmp	r1, r3
   1dbe4:	bne	1ddc0 <__assert_fail@plt+0xc8c8>
   1dbe8:	b	1dd80 <__assert_fail@plt+0xc888>
   1dbec:	add	ip, sp, #56	; 0x38
   1dbf0:	mov	lr, sl
   1dbf4:	ldm	lr!, {r0, r1, r2, r3}
   1dbf8:	stmia	ip!, {r0, r1, r2, r3}
   1dbfc:	ldm	lr, {r0, r1, r2}
   1dc00:	stm	ip, {r0, r1, r2}
   1dc04:	ldr	r1, [sp, #40]	; 0x28
   1dc08:	add	r0, sp, #72	; 0x48
   1dc0c:	bl	16ae8 <__assert_fail@plt+0x55f0>
   1dc10:	cmp	r0, #0
   1dc14:	beq	1dd10 <__assert_fail@plt+0xc818>
   1dc18:	mov	r4, r0
   1dc1c:	b	1ddfc <__assert_fail@plt+0xc904>
   1dc20:	ldr	r3, [sp, #56]	; 0x38
   1dc24:	ldr	r2, [sp, #32]
   1dc28:	str	r4, [r3, r2]
   1dc2c:	mov	r1, r5
   1dc30:	add	r0, sp, #72	; 0x48
   1dc34:	bl	156ac <__assert_fail@plt+0x41b4>
   1dc38:	sub	r1, r0, #1
   1dc3c:	add	r0, sp, #72	; 0x48
   1dc40:	bl	15744 <__assert_fail@plt+0x424c>
   1dc44:	ldr	r3, [sp, #28]
   1dc48:	ldr	r4, [r3, #116]	; 0x74
   1dc4c:	add	r4, r4, r6
   1dc50:	add	r5, r5, #1
   1dc54:	add	r2, r4, #24
   1dc58:	add	r6, r6, #24
   1dc5c:	ldrb	r3, [r4, #20]
   1dc60:	cmp	r3, #0
   1dc64:	beq	1dd7c <__assert_fail@plt+0xc884>
   1dc68:	mov	r4, r2
   1dc6c:	ldr	r3, [r4]
   1dc70:	cmp	r7, r3
   1dc74:	bne	1dc50 <__assert_fail@plt+0xc758>
   1dc78:	ldr	r3, [r4, #12]
   1dc7c:	ldr	r2, [r4, #8]
   1dc80:	sub	r3, r3, r2
   1dc84:	ldr	r2, [sp, #12]
   1dc88:	add	r8, r2, r3
   1dc8c:	cmp	r3, #0
   1dc90:	ldrne	r3, [r9, #12]
   1dc94:	ldrne	r2, [sp, #20]
   1dc98:	ldrne	fp, [r3, r2]
   1dc9c:	ldreq	r3, [r9, #20]
   1dca0:	ldreq	r2, [sp, #24]
   1dca4:	addeq	r3, r3, r2
   1dca8:	ldreq	r3, [r3, #8]
   1dcac:	ldreq	fp, [r3]
   1dcb0:	ldr	r3, [sl, #12]
   1dcb4:	cmp	r8, r3
   1dcb8:	bgt	1dc50 <__assert_fail@plt+0xc758>
   1dcbc:	ldr	r3, [sl]
   1dcc0:	ldr	r0, [r3, r8, lsl #2]
   1dcc4:	cmp	r0, #0
   1dcc8:	beq	1dc50 <__assert_fail@plt+0xc758>
   1dccc:	mov	r1, fp
   1dcd0:	add	r0, r0, #4
   1dcd4:	bl	156ac <__assert_fail@plt+0x41b4>
   1dcd8:	cmp	r0, #0
   1dcdc:	beq	1dc50 <__assert_fail@plt+0xc758>
   1dce0:	str	r8, [sp, #4]
   1dce4:	str	fp, [sp]
   1dce8:	ldr	r3, [sp, #12]
   1dcec:	mov	r2, r7
   1dcf0:	ldr	r1, [sp, #40]	; 0x28
   1dcf4:	ldr	r0, [sp, #28]
   1dcf8:	bl	15d80 <__assert_fail@plt+0x4888>
   1dcfc:	cmp	r0, #0
   1dd00:	bne	1dc50 <__assert_fail@plt+0xc758>
   1dd04:	ldr	r3, [sp, #56]	; 0x38
   1dd08:	cmp	r3, #0
   1dd0c:	beq	1dbec <__assert_fail@plt+0xc6f4>
   1dd10:	str	r7, [sp, #64]	; 0x40
   1dd14:	ldr	r3, [sp, #12]
   1dd18:	str	r3, [sp, #68]	; 0x44
   1dd1c:	mov	r1, r5
   1dd20:	add	r0, sp, #72	; 0x48
   1dd24:	bl	18a40 <__assert_fail@plt+0x7548>
   1dd28:	cmp	r0, #0
   1dd2c:	beq	1de14 <__assert_fail@plt+0xc91c>
   1dd30:	ldr	r3, [sp, #56]	; 0x38
   1dd34:	ldr	r2, [sp, #32]
   1dd38:	ldr	r4, [r3, r2]
   1dd3c:	add	r1, sp, #56	; 0x38
   1dd40:	ldr	r0, [sp, #28]
   1dd44:	bl	1def0 <__assert_fail@plt+0xc9f8>
   1dd48:	cmp	r0, #0
   1dd4c:	bne	1de1c <__assert_fail@plt+0xc924>
   1dd50:	ldr	r1, [sl, #4]
   1dd54:	cmp	r1, #0
   1dd58:	beq	1dc20 <__assert_fail@plt+0xc728>
   1dd5c:	ldr	r3, [sp, #52]	; 0x34
   1dd60:	ldr	r2, [sp, #56]	; 0x38
   1dd64:	mov	r0, r9
   1dd68:	bl	1c4a8 <__assert_fail@plt+0xafb0>
   1dd6c:	cmp	r0, #0
   1dd70:	beq	1dc20 <__assert_fail@plt+0xc728>
   1dd74:	mov	r4, r0
   1dd78:	b	1ddfc <__assert_fail@plt+0xc904>
   1dd7c:	ldr	fp, [sp, #36]	; 0x24
   1dd80:	ldr	r3, [sp, #16]
   1dd84:	add	r3, r3, #1
   1dd88:	mov	r2, r3
   1dd8c:	str	r3, [sp, #16]
   1dd90:	ldr	r3, [fp, #4]
   1dd94:	cmp	r2, r3
   1dd98:	bge	1ddf8 <__assert_fail@plt+0xc900>
   1dd9c:	ldr	r3, [fp, #8]
   1dda0:	ldr	r2, [sp, #16]
   1dda4:	ldr	r7, [r3, r2, lsl #2]
   1dda8:	ldr	r3, [r9]
   1ddac:	add	r3, r3, r7, lsl #3
   1ddb0:	ldrb	r2, [r3, #4]
   1ddb4:	ldr	r3, [sl, #8]
   1ddb8:	cmp	r7, r3
   1ddbc:	beq	1dbd8 <__assert_fail@plt+0xc6e0>
   1ddc0:	cmp	r2, #4
   1ddc4:	bne	1dd80 <__assert_fail@plt+0xc888>
   1ddc8:	ldr	r3, [sp, #28]
   1ddcc:	ldr	r4, [r3, #116]	; 0x74
   1ddd0:	ldr	r6, [sp, #48]	; 0x30
   1ddd4:	add	r4, r4, r6
   1ddd8:	add	r3, r7, r7, lsl #1
   1dddc:	lsl	r3, r3, #2
   1dde0:	str	r3, [sp, #24]
   1dde4:	lsl	r3, r7, #2
   1dde8:	str	r3, [sp, #20]
   1ddec:	ldr	r5, [sp, #44]	; 0x2c
   1ddf0:	str	fp, [sp, #36]	; 0x24
   1ddf4:	b	1dc6c <__assert_fail@plt+0xc774>
   1ddf8:	mov	r4, #0
   1ddfc:	ldr	r3, [sp, #56]	; 0x38
   1de00:	cmp	r3, #0
   1de04:	beq	1d8b8 <__assert_fail@plt+0xc3c0>
   1de08:	ldr	r0, [sp, #80]	; 0x50
   1de0c:	bl	13340 <__assert_fail@plt+0x1e48>
   1de10:	b	1d8b8 <__assert_fail@plt+0xc3c0>
   1de14:	mov	r4, #12
   1de18:	b	1ddfc <__assert_fail@plt+0xc904>
   1de1c:	mov	r4, r0
   1de20:	b	1ddfc <__assert_fail@plt+0xc904>
   1de24:	mov	r4, #0
   1de28:	b	1d8b8 <__assert_fail@plt+0xc3c0>
   1de2c:	mov	r4, #12
   1de30:	b	1d8b8 <__assert_fail@plt+0xc3c0>
   1de34:	mov	r4, #12
   1de38:	b	1d8b8 <__assert_fail@plt+0xc3c0>
   1de3c:	add	r0, sp, #88	; 0x58
   1de40:	mov	r3, #0
   1de44:	str	r3, [r0, #-4]!
   1de48:	ldr	r4, [sl]
   1de4c:	mov	r2, r5
   1de50:	mov	r1, r6
   1de54:	bl	1c2a0 <__assert_fail@plt+0xada8>
   1de58:	str	r0, [r4, fp, lsl #2]
   1de5c:	ldr	r4, [sp, #84]	; 0x54
   1de60:	cmp	r4, #0
   1de64:	beq	1d89c <__assert_fail@plt+0xc3a4>
   1de68:	b	1d8b8 <__assert_fail@plt+0xc3c0>
   1de6c:	ldr	r3, [sp, #16]
   1de70:	cmp	r3, #0
   1de74:	bge	1da6c <__assert_fail@plt+0xc574>
   1de78:	add	r7, r7, #1
   1de7c:	ldr	r3, [sl, #20]
   1de80:	cmp	r7, r3
   1de84:	bge	1de3c <__assert_fail@plt+0xc944>
   1de88:	ldr	r3, [sl, #24]
   1de8c:	ldr	r3, [r3, r7, lsl #2]
   1de90:	add	r3, r3, r3, lsl #1
   1de94:	ldr	ip, [sp, #20]
   1de98:	add	r2, ip, r3, lsl #3
   1de9c:	ldr	r1, [r2, #8]
   1dea0:	cmp	fp, r1
   1dea4:	ble	1de78 <__assert_fail@plt+0xc980>
   1dea8:	ldr	r1, [r2, #4]
   1deac:	cmp	fp, r1
   1deb0:	bgt	1de78 <__assert_fail@plt+0xc980>
   1deb4:	ldr	r0, [r6]
   1deb8:	ldr	r3, [ip, r3, lsl #3]
   1debc:	ldr	r8, [r0, r3, lsl #3]
   1dec0:	ldr	r3, [r2, #12]
   1dec4:	cmp	fp, r3
   1dec8:	beq	1d9d0 <__assert_fail@plt+0xc4d8>
   1decc:	ldr	r3, [r5, #4]
   1ded0:	cmp	r3, #0
   1ded4:	movgt	r9, #0
   1ded8:	bgt	1daf8 <__assert_fail@plt+0xc600>
   1dedc:	b	1de78 <__assert_fail@plt+0xc980>
   1dee0:	mov	r4, r0
   1dee4:	b	1d8b8 <__assert_fail@plt+0xc3c0>
   1dee8:	mov	r4, r0
   1deec:	b	1d8b8 <__assert_fail@plt+0xc3c0>
   1def0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1def4:	sub	sp, sp, #60	; 0x3c
   1def8:	mov	r5, r0
   1defc:	str	r0, [sp, #12]
   1df00:	mov	r9, r1
   1df04:	ldr	fp, [r1, #12]
   1df08:	lsl	r3, fp, #2
   1df0c:	str	r3, [sp, #16]
   1df10:	ldr	r1, [r1, #8]
   1df14:	add	r0, sp, #44	; 0x2c
   1df18:	bl	16618 <__assert_fail@plt+0x5120>
   1df1c:	subs	r4, r0, #0
   1df20:	bne	1e1b4 <__assert_fail@plt+0xccbc>
   1df24:	add	r3, sp, #44	; 0x2c
   1df28:	mov	r2, fp
   1df2c:	mov	r1, r9
   1df30:	mov	r0, r5
   1df34:	bl	1d830 <__assert_fail@plt+0xc338>
   1df38:	subs	r3, r0, #0
   1df3c:	str	r3, [sp, #36]	; 0x24
   1df40:	bne	1e1a0 <__assert_fail@plt+0xcca8>
   1df44:	cmp	fp, #0
   1df48:	ldrle	r4, [sp, #36]	; 0x24
   1df4c:	ble	1e1ac <__assert_fail@plt+0xccb4>
   1df50:	mov	r3, #0
   1df54:	str	r3, [sp, #32]
   1df58:	add	r3, r9, #16
   1df5c:	str	r3, [sp, #28]
   1df60:	mov	sl, fp
   1df64:	mov	fp, r9
   1df68:	b	1e104 <__assert_fail@plt+0xcc0c>
   1df6c:	ldr	r2, [sp, #16]
   1df70:	mov	r1, #0
   1df74:	bl	11414 <memset@plt>
   1df78:	ldr	r0, [sp, #52]	; 0x34
   1df7c:	bl	13340 <__assert_fail@plt+0x1e48>
   1df80:	ldr	r4, [sp, #36]	; 0x24
   1df84:	b	1e1b4 <__assert_fail@plt+0xccbc>
   1df88:	ldr	r3, [fp, #12]
   1df8c:	str	r3, [sp, #20]
   1df90:	ldr	r2, [sp, #12]
   1df94:	ldr	r3, [r2, #84]	; 0x54
   1df98:	mov	r0, r3
   1df9c:	mov	r3, sl
   1dfa0:	mov	r1, r4
   1dfa4:	str	r0, [sp, #24]
   1dfa8:	bl	1a78c <__assert_fail@plt+0x9294>
   1dfac:	subs	r9, r0, #0
   1dfb0:	ble	1dff8 <__assert_fail@plt+0xcb00>
   1dfb4:	add	r3, sl, r9
   1dfb8:	ldr	r2, [sp, #20]
   1dfbc:	cmp	r2, r3
   1dfc0:	blt	1e000 <__assert_fail@plt+0xcb08>
   1dfc4:	ldr	r2, [fp]
   1dfc8:	ldr	r0, [r2, r3, lsl #2]
   1dfcc:	cmp	r0, #0
   1dfd0:	beq	1e080 <__assert_fail@plt+0xcb88>
   1dfd4:	ldr	r3, [sp, #24]
   1dfd8:	ldr	r3, [r3, #12]
   1dfdc:	ldr	r2, [sp, #8]
   1dfe0:	ldr	r1, [r3, r2, lsl #2]
   1dfe4:	add	r0, r0, #4
   1dfe8:	bl	156ac <__assert_fail@plt+0x41b4>
   1dfec:	cmp	r0, #0
   1dff0:	beq	1e080 <__assert_fail@plt+0xcb88>
   1dff4:	b	1e000 <__assert_fail@plt+0xcb08>
   1dff8:	cmp	r9, #0
   1dffc:	beq	1e080 <__assert_fail@plt+0xcb88>
   1e000:	ldr	r3, [fp, #20]
   1e004:	cmp	r3, #0
   1e008:	beq	1e038 <__assert_fail@plt+0xcb40>
   1e00c:	ldr	r3, [r8, #12]
   1e010:	ldr	r2, [sp, #8]
   1e014:	ldr	r2, [r3, r2, lsl #2]
   1e018:	str	sl, [sp, #4]
   1e01c:	str	r4, [sp]
   1e020:	add	r3, sl, r9
   1e024:	ldr	r1, [sp, #28]
   1e028:	ldr	r0, [sp, #12]
   1e02c:	bl	15d80 <__assert_fail@plt+0x4888>
   1e030:	cmp	r0, #0
   1e034:	bne	1e04c <__assert_fail@plt+0xcb54>
   1e038:	mov	r1, r4
   1e03c:	add	r0, sp, #44	; 0x2c
   1e040:	bl	18a40 <__assert_fail@plt+0x7548>
   1e044:	cmp	r0, #0
   1e048:	beq	1e1a8 <__assert_fail@plt+0xccb0>
   1e04c:	add	r5, r5, #1
   1e050:	ldr	r3, [r7, #20]
   1e054:	cmp	r5, r3
   1e058:	bge	1e0d4 <__assert_fail@plt+0xcbdc>
   1e05c:	ldr	r3, [r7, #24]
   1e060:	ldr	r4, [r3, r5, lsl #2]
   1e064:	str	r4, [sp, #8]
   1e068:	lsl	r6, r4, #3
   1e06c:	ldr	r3, [r8]
   1e070:	add	r3, r3, r6
   1e074:	ldrb	r3, [r3, #6]
   1e078:	tst	r3, #16
   1e07c:	bne	1df88 <__assert_fail@plt+0xca90>
   1e080:	ldr	r1, [r8]
   1e084:	mov	r2, sl
   1e088:	add	r1, r1, r6
   1e08c:	ldr	r0, [sp, #12]
   1e090:	bl	1946c <__assert_fail@plt+0x7f74>
   1e094:	cmp	r0, #0
   1e098:	beq	1e04c <__assert_fail@plt+0xcb54>
   1e09c:	ldr	r3, [fp]
   1e0a0:	ldr	r2, [sp, #16]
   1e0a4:	ldr	r0, [r3, r2]
   1e0a8:	cmp	r0, #0
   1e0ac:	beq	1e04c <__assert_fail@plt+0xcb54>
   1e0b0:	ldr	r3, [r8, #12]
   1e0b4:	ldr	r2, [sp, #8]
   1e0b8:	ldr	r1, [r3, r2, lsl #2]
   1e0bc:	add	r0, r0, #4
   1e0c0:	bl	156ac <__assert_fail@plt+0x41b4>
   1e0c4:	cmp	r0, #0
   1e0c8:	beq	1e04c <__assert_fail@plt+0xcb54>
   1e0cc:	mov	r9, #1
   1e0d0:	b	1e000 <__assert_fail@plt+0xcb08>
   1e0d4:	add	r3, sp, #44	; 0x2c
   1e0d8:	mov	r2, sl
   1e0dc:	mov	r1, fp
   1e0e0:	ldr	r0, [sp, #12]
   1e0e4:	bl	1d830 <__assert_fail@plt+0xc338>
   1e0e8:	cmp	r0, #0
   1e0ec:	bne	1e190 <__assert_fail@plt+0xcc98>
   1e0f0:	ldr	r3, [sp, #16]
   1e0f4:	sub	r3, r3, #4
   1e0f8:	str	r3, [sp, #16]
   1e0fc:	cmp	sl, #0
   1e100:	beq	1e198 <__assert_fail@plt+0xcca0>
   1e104:	ldr	r0, [fp]
   1e108:	ldr	r3, [sp, #16]
   1e10c:	ldr	r3, [r0, r3]
   1e110:	cmp	r3, #0
   1e114:	ldreq	r3, [sp, #32]
   1e118:	addeq	r3, r3, #1
   1e11c:	movne	r3, #0
   1e120:	str	r3, [sp, #32]
   1e124:	ldr	r3, [sp, #12]
   1e128:	ldr	r3, [r3, #120]	; 0x78
   1e12c:	ldr	r2, [sp, #32]
   1e130:	cmp	r2, r3
   1e134:	bgt	1df6c <__assert_fail@plt+0xca74>
   1e138:	mov	r3, #0
   1e13c:	str	r3, [sp, #48]	; 0x30
   1e140:	sub	sl, sl, #1
   1e144:	ldr	r2, [sp, #12]
   1e148:	ldr	r3, [r2, #100]	; 0x64
   1e14c:	ldr	r1, [sp, #16]
   1e150:	add	r3, r3, r1
   1e154:	ldr	r7, [r3, #-4]
   1e158:	cmp	r7, #0
   1e15c:	beq	1e0d4 <__assert_fail@plt+0xcbdc>
   1e160:	ldr	r8, [r2, #84]	; 0x54
   1e164:	ldr	r3, [r7, #20]
   1e168:	cmp	r3, #0
   1e16c:	ble	1e0d4 <__assert_fail@plt+0xcbdc>
   1e170:	ldr	r3, [r7, #24]
   1e174:	ldr	r4, [r3]
   1e178:	str	r4, [sp, #8]
   1e17c:	lsl	r6, r4, #3
   1e180:	ldr	r3, [r8]
   1e184:	add	r3, r3, r6
   1e188:	mov	r5, #0
   1e18c:	b	1e074 <__assert_fail@plt+0xcb7c>
   1e190:	mov	r4, r0
   1e194:	b	1e1ac <__assert_fail@plt+0xccb4>
   1e198:	mov	r4, r0
   1e19c:	b	1e1ac <__assert_fail@plt+0xccb4>
   1e1a0:	ldr	r4, [sp, #36]	; 0x24
   1e1a4:	b	1e1ac <__assert_fail@plt+0xccb4>
   1e1a8:	mov	r4, #12
   1e1ac:	ldr	r0, [sp, #52]	; 0x34
   1e1b0:	bl	13340 <__assert_fail@plt+0x1e48>
   1e1b4:	mov	r0, r4
   1e1b8:	add	sp, sp, #60	; 0x3c
   1e1bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1c4:	sub	sp, sp, #412	; 0x19c
   1e1c8:	mov	r6, r0
   1e1cc:	str	r0, [sp, #24]
   1e1d0:	str	r1, [sp, #36]	; 0x24
   1e1d4:	str	r2, [sp, #48]	; 0x30
   1e1d8:	mov	r4, r3
   1e1dc:	ldr	r5, [sp, #448]	; 0x1c0
   1e1e0:	ldr	fp, [r0]
   1e1e4:	mov	r2, #136	; 0x88
   1e1e8:	mov	r1, #0
   1e1ec:	add	r0, sp, #268	; 0x10c
   1e1f0:	bl	11414 <memset@plt>
   1e1f4:	str	fp, [sp, #352]	; 0x160
   1e1f8:	ldr	r2, [r6, #16]
   1e1fc:	cmp	r2, #0
   1e200:	beq	1e59c <__assert_fail@plt+0xd0a4>
   1e204:	ldrb	r3, [r6, #28]
   1e208:	subs	r1, r4, r5
   1e20c:	movne	r1, #1
   1e210:	ands	r1, r1, r3, lsr #3
   1e214:	beq	1e5a8 <__assert_fail@plt+0xd0b0>
   1e218:	and	r3, r3, #1
   1e21c:	cmp	r3, #0
   1e220:	movne	r2, #0
   1e224:	str	r2, [sp, #52]	; 0x34
   1e228:	ldr	r3, [sp, #24]
   1e22c:	ldr	r3, [r3, #24]
   1e230:	ldr	r2, [sp, #456]	; 0x1c8
   1e234:	cmp	r3, r2
   1e238:	subcc	r2, r2, #1
   1e23c:	subcc	r3, r2, r3
   1e240:	movcs	r3, #0
   1e244:	str	r3, [sp, #64]	; 0x40
   1e248:	ldr	r2, [sp, #24]
   1e24c:	ldr	r3, [r2, #8]
   1e250:	cmp	r3, #0
   1e254:	beq	1f7a4 <__assert_fail@plt+0xe2ac>
   1e258:	ldr	r3, [fp, #36]	; 0x24
   1e25c:	cmp	r3, #0
   1e260:	moveq	r3, #1
   1e264:	streq	r3, [sp, #28]
   1e268:	beq	1f828 <__assert_fail@plt+0xe330>
   1e26c:	ldr	r3, [fp, #40]	; 0x28
   1e270:	cmp	r3, #0
   1e274:	beq	1f7b0 <__assert_fail@plt+0xe2b8>
   1e278:	ldr	r3, [fp, #44]	; 0x2c
   1e27c:	cmp	r3, #0
   1e280:	moveq	r3, #1
   1e284:	streq	r3, [sp, #28]
   1e288:	beq	1f828 <__assert_fail@plt+0xe330>
   1e28c:	ldr	r3, [fp, #48]	; 0x30
   1e290:	cmp	r3, #0
   1e294:	beq	1f7bc <__assert_fail@plt+0xe2c4>
   1e298:	ldr	r3, [fp, #36]	; 0x24
   1e29c:	ldr	r3, [r3, #8]
   1e2a0:	cmp	r3, #0
   1e2a4:	bne	1e2f0 <__assert_fail@plt+0xcdf8>
   1e2a8:	ldr	r3, [fp, #40]	; 0x28
   1e2ac:	ldr	r3, [r3, #8]
   1e2b0:	cmp	r3, #0
   1e2b4:	bne	1e2f0 <__assert_fail@plt+0xcdf8>
   1e2b8:	ldr	r3, [fp, #44]	; 0x2c
   1e2bc:	ldr	r3, [r3, #8]
   1e2c0:	cmp	r3, #0
   1e2c4:	beq	1e2d4 <__assert_fail@plt+0xcddc>
   1e2c8:	ldrsb	r3, [r2, #28]
   1e2cc:	cmp	r3, #0
   1e2d0:	blt	1e2f0 <__assert_fail@plt+0xcdf8>
   1e2d4:	cmp	r4, #0
   1e2d8:	cmpne	r5, #0
   1e2dc:	movne	r3, #1
   1e2e0:	strne	r3, [sp, #28]
   1e2e4:	bne	1f828 <__assert_fail@plt+0xe330>
   1e2e8:	mov	r5, #0
   1e2ec:	mov	r4, r5
   1e2f0:	ldr	r3, [sp, #456]	; 0x1c8
   1e2f4:	ldr	r2, [sp, #64]	; 0x40
   1e2f8:	subs	r3, r3, r2
   1e2fc:	str	r3, [sp, #60]	; 0x3c
   1e300:	movne	r3, #1
   1e304:	strne	r3, [sp, #16]
   1e308:	bne	1e31c <__assert_fail@plt+0xce24>
   1e30c:	ldr	r3, [fp, #76]	; 0x4c
   1e310:	adds	r3, r3, #0
   1e314:	movne	r3, #1
   1e318:	str	r3, [sp, #16]
   1e31c:	ldr	r2, [sp, #24]
   1e320:	ldr	r3, [r2, #20]
   1e324:	mov	lr, r3
   1e328:	str	r3, [sp, #76]	; 0x4c
   1e32c:	ldr	r3, [r2, #12]
   1e330:	lsr	r3, r3, #22
   1e334:	and	r3, r3, #1
   1e338:	ldr	r0, [fp, #92]	; 0x5c
   1e33c:	ldr	r2, [fp, #8]
   1e340:	add	r2, r2, #1
   1e344:	cmp	r2, r0
   1e348:	movlt	r2, r0
   1e34c:	ldr	ip, [sp, #48]	; 0x30
   1e350:	add	r1, ip, #1
   1e354:	ldr	r6, [sp, #36]	; 0x24
   1e358:	str	r6, [sp, #268]	; 0x10c
   1e35c:	str	ip, [sp, #316]	; 0x13c
   1e360:	str	ip, [sp, #312]	; 0x138
   1e364:	str	lr, [sp, #332]	; 0x14c
   1e368:	strb	r3, [sp, #340]	; 0x154
   1e36c:	adds	r6, lr, #0
   1e370:	movne	r6, #1
   1e374:	orr	r3, r3, r6
   1e378:	strb	r3, [sp, #343]	; 0x157
   1e37c:	str	r0, [sp, #348]	; 0x15c
   1e380:	ldrb	r3, [fp, #88]	; 0x58
   1e384:	lsr	r0, r3, #2
   1e388:	and	r0, r0, #1
   1e38c:	strb	r0, [sp, #341]	; 0x155
   1e390:	lsr	r3, r3, #3
   1e394:	and	r3, r3, #1
   1e398:	strb	r3, [sp, #342]	; 0x156
   1e39c:	str	ip, [sp, #324]	; 0x144
   1e3a0:	str	ip, [sp, #320]	; 0x140
   1e3a4:	cmp	r2, r1
   1e3a8:	movlt	r1, r2
   1e3ac:	add	r0, sp, #268	; 0x10c
   1e3b0:	bl	161c0 <__assert_fail@plt+0x4cc8>
   1e3b4:	subs	r3, r0, #0
   1e3b8:	str	r3, [sp, #28]
   1e3bc:	bne	1f80c <__assert_fail@plt+0xe314>
   1e3c0:	add	r3, fp, #96	; 0x60
   1e3c4:	str	r3, [sp, #336]	; 0x150
   1e3c8:	ldrb	r3, [fp, #88]	; 0x58
   1e3cc:	lsr	r3, r3, #4
   1e3d0:	and	r3, r3, #1
   1e3d4:	strb	r3, [sp, #346]	; 0x15a
   1e3d8:	ldrb	r3, [sp, #343]	; 0x157
   1e3dc:	cmp	r3, #0
   1e3e0:	beq	1f7c8 <__assert_fail@plt+0xe2d0>
   1e3e4:	mov	r3, #0
   1e3e8:	str	r3, [sp, #296]	; 0x128
   1e3ec:	str	r3, [sp, #300]	; 0x12c
   1e3f0:	ldr	r3, [sp, #452]	; 0x1c4
   1e3f4:	str	r3, [sp, #324]	; 0x144
   1e3f8:	str	r3, [sp, #320]	; 0x140
   1e3fc:	ldr	r3, [sp, #24]
   1e400:	ldrb	r3, [r3, #28]
   1e404:	lsr	r3, r3, #7
   1e408:	strb	r3, [sp, #345]	; 0x159
   1e40c:	ldr	r7, [fp, #76]	; 0x4c
   1e410:	lsl	r7, r7, #1
   1e414:	ldr	r3, [sp, #464]	; 0x1d0
   1e418:	str	r3, [sp, #356]	; 0x164
   1e41c:	mvn	r3, #0
   1e420:	str	r3, [sp, #360]	; 0x168
   1e424:	cmp	r7, #0
   1e428:	ble	1e464 <__assert_fail@plt+0xcf6c>
   1e42c:	ldr	r3, [pc, #4000]	; 1f3d4 <__assert_fail@plt+0xdedc>
   1e430:	cmp	r7, r3
   1e434:	bhi	1f7e8 <__assert_fail@plt+0xe2f0>
   1e438:	add	r0, r7, r7, lsl #1
   1e43c:	lsl	r0, r0, #3
   1e440:	bl	23720 <__assert_fail@plt+0x12228>
   1e444:	str	r0, [sp, #384]	; 0x180
   1e448:	lsl	r0, r7, #2
   1e44c:	bl	23720 <__assert_fail@plt+0x12228>
   1e450:	str	r0, [sp, #400]	; 0x190
   1e454:	ldr	r3, [sp, #384]	; 0x180
   1e458:	cmp	r0, #0
   1e45c:	cmpne	r3, #0
   1e460:	beq	1f7e8 <__assert_fail@plt+0xe2f0>
   1e464:	str	r7, [sp, #380]	; 0x17c
   1e468:	mov	r3, #1
   1e46c:	str	r3, [sp, #388]	; 0x184
   1e470:	str	r7, [sp, #396]	; 0x18c
   1e474:	ldr	r3, [sp, #60]	; 0x3c
   1e478:	cmp	r3, #1
   1e47c:	bls	1e5b4 <__assert_fail@plt+0xd0bc>
   1e480:	ldr	r3, [sp, #304]	; 0x130
   1e484:	cmn	r3, #-1073741822	; 0xc0000002
   1e488:	bhi	1f740 <__assert_fail@plt+0xe248>
   1e48c:	add	r3, r3, #1
   1e490:	lsl	r0, r3, #2
   1e494:	bl	23720 <__assert_fail@plt+0x12228>
   1e498:	str	r0, [sp, #368]	; 0x170
   1e49c:	cmp	r0, #0
   1e4a0:	beq	1f74c <__assert_fail@plt+0xe254>
   1e4a4:	str	r4, [sp, #404]	; 0x194
   1e4a8:	ldr	r3, [sp, #464]	; 0x1d0
   1e4ac:	and	r3, r3, #1
   1e4b0:	cmp	r3, #0
   1e4b4:	movne	r3, #4
   1e4b8:	moveq	r3, #6
   1e4bc:	str	r3, [sp, #328]	; 0x148
   1e4c0:	cmp	r4, r5
   1e4c4:	mvngt	r3, #0
   1e4c8:	movle	r3, #1
   1e4cc:	str	r3, [sp, #84]	; 0x54
   1e4d0:	movlt	r3, r4
   1e4d4:	movge	r3, r5
   1e4d8:	str	r3, [sp, #56]	; 0x38
   1e4dc:	movge	r3, r4
   1e4e0:	movlt	r3, r5
   1e4e4:	str	r3, [sp, #44]	; 0x2c
   1e4e8:	ldr	r3, [fp, #92]	; 0x5c
   1e4ec:	str	r3, [sp, #80]	; 0x50
   1e4f0:	ldr	r2, [sp, #52]	; 0x34
   1e4f4:	cmp	r2, #0
   1e4f8:	moveq	r3, #8
   1e4fc:	beq	1e544 <__assert_fail@plt+0xd04c>
   1e500:	cmp	r3, #1
   1e504:	moveq	r3, #4
   1e508:	beq	1e530 <__assert_fail@plt+0xd038>
   1e50c:	ldr	r3, [sp, #24]
   1e510:	ldr	r3, [r3, #12]
   1e514:	lsr	r3, r3, #22
   1e518:	eor	r3, r3, #1
   1e51c:	ldr	r2, [sp, #76]	; 0x4c
   1e520:	cmp	r2, #0
   1e524:	movne	r3, #0
   1e528:	andeq	r3, r3, #1
   1e52c:	lsl	r3, r3, #2
   1e530:	cmp	r4, r5
   1e534:	movle	r2, #2
   1e538:	movgt	r2, #0
   1e53c:	orr	r3, r6, r3
   1e540:	orr	r3, r3, r2
   1e544:	ldr	r2, [sp, #56]	; 0x38
   1e548:	cmp	r4, r2
   1e54c:	movge	r2, #0
   1e550:	movlt	r2, #1
   1e554:	ldr	r1, [sp, #44]	; 0x2c
   1e558:	cmp	r4, r1
   1e55c:	orrgt	r2, r2, #1
   1e560:	str	r2, [sp, #68]	; 0x44
   1e564:	cmp	r2, #0
   1e568:	bne	1f758 <__assert_fail@plt+0xe260>
   1e56c:	add	r2, sp, #408	; 0x198
   1e570:	cmp	r4, r5
   1e574:	suble	r2, r2, #4
   1e578:	movgt	r2, #0
   1e57c:	str	r2, [sp, #88]	; 0x58
   1e580:	adds	r2, r2, #0
   1e584:	movne	r2, #1
   1e588:	str	r2, [sp, #92]	; 0x5c
   1e58c:	sub	r3, r3, #4
   1e590:	str	r3, [sp, #72]	; 0x48
   1e594:	str	fp, [sp, #40]	; 0x28
   1e598:	b	1fb0c <__assert_fail@plt+0xe614>
   1e59c:	mov	r3, #0
   1e5a0:	str	r3, [sp, #52]	; 0x34
   1e5a4:	b	1e228 <__assert_fail@plt+0xcd30>
   1e5a8:	mov	r3, #0
   1e5ac:	str	r3, [sp, #52]	; 0x34
   1e5b0:	b	1e228 <__assert_fail@plt+0xcd30>
   1e5b4:	ldrb	r3, [fp, #88]	; 0x58
   1e5b8:	tst	r3, #2
   1e5bc:	beq	1e4a4 <__assert_fail@plt+0xcfac>
   1e5c0:	b	1e480 <__assert_fail@plt+0xcf88>
   1e5c4:	ldr	r3, [sp, #404]	; 0x194
   1e5c8:	ldr	r2, [sp, #44]	; 0x2c
   1e5cc:	cmp	r2, r3
   1e5d0:	ble	1e748 <__assert_fail@plt+0xd250>
   1e5d4:	ldr	r1, [sp, #36]	; 0x24
   1e5d8:	add	r2, r1, r3
   1e5dc:	ldrb	r1, [r1, r3]
   1e5e0:	ldr	r0, [sp, #76]	; 0x4c
   1e5e4:	ldrb	r1, [r0, r1]
   1e5e8:	ldr	r0, [sp, #52]	; 0x34
   1e5ec:	ldrb	r1, [r0, r1]
   1e5f0:	cmp	r1, #0
   1e5f4:	bne	1e770 <__assert_fail@plt+0xd278>
   1e5f8:	ldr	ip, [sp, #52]	; 0x34
   1e5fc:	ldr	lr, [sp, #76]	; 0x4c
   1e600:	ldr	r0, [sp, #44]	; 0x2c
   1e604:	add	r3, r3, #1
   1e608:	cmp	r0, r3
   1e60c:	beq	1e6f8 <__assert_fail@plt+0xd200>
   1e610:	ldrb	r1, [r2, #1]!
   1e614:	ldrb	r1, [lr, r1]
   1e618:	ldrb	r1, [ip, r1]
   1e61c:	cmp	r1, #0
   1e620:	beq	1e604 <__assert_fail@plt+0xd10c>
   1e624:	str	r3, [sp, #404]	; 0x194
   1e628:	b	1e770 <__assert_fail@plt+0xd278>
   1e62c:	ldr	r3, [sp, #404]	; 0x194
   1e630:	ldr	r2, [sp, #44]	; 0x2c
   1e634:	cmp	r2, r3
   1e638:	ble	1e748 <__assert_fail@plt+0xd250>
   1e63c:	ldr	r1, [sp, #36]	; 0x24
   1e640:	add	r2, r1, r3
   1e644:	ldrb	r1, [r1, r3]
   1e648:	ldr	r0, [sp, #52]	; 0x34
   1e64c:	ldrb	r1, [r0, r1]
   1e650:	cmp	r1, #0
   1e654:	bne	1e770 <__assert_fail@plt+0xd278>
   1e658:	ldr	ip, [sp, #52]	; 0x34
   1e65c:	ldr	r0, [sp, #44]	; 0x2c
   1e660:	add	r3, r3, #1
   1e664:	cmp	r0, r3
   1e668:	beq	1e740 <__assert_fail@plt+0xd248>
   1e66c:	ldrb	r1, [r2, #1]!
   1e670:	ldrb	r1, [ip, r1]
   1e674:	cmp	r1, #0
   1e678:	beq	1e660 <__assert_fail@plt+0xd168>
   1e67c:	str	r3, [sp, #404]	; 0x194
   1e680:	b	1e770 <__assert_fail@plt+0xd278>
   1e684:	ldr	r3, [sp, #404]	; 0x194
   1e688:	ldr	r2, [sp, #56]	; 0x38
   1e68c:	cmp	r2, r3
   1e690:	bgt	1e6f0 <__assert_fail@plt+0xd1f8>
   1e694:	ldr	r1, [sp, #68]	; 0x44
   1e698:	ldr	ip, [sp, #52]	; 0x34
   1e69c:	ldr	r0, [sp, #76]	; 0x4c
   1e6a0:	ldr	r4, [sp, #56]	; 0x38
   1e6a4:	ldr	r5, [sp, #36]	; 0x24
   1e6a8:	ldr	lr, [sp, #48]	; 0x30
   1e6ac:	cmp	lr, r3
   1e6b0:	ldrbgt	r2, [r5, r3]
   1e6b4:	movle	r2, #0
   1e6b8:	cmp	r0, #0
   1e6bc:	ldrbne	r2, [r0, r2]
   1e6c0:	ldrb	r2, [ip, r2]
   1e6c4:	cmp	r2, #0
   1e6c8:	bne	1e75c <__assert_fail@plt+0xd264>
   1e6cc:	sub	r3, r3, #1
   1e6d0:	mov	r1, #1
   1e6d4:	cmp	r4, r3
   1e6d8:	ble	1e6ac <__assert_fail@plt+0xd1b4>
   1e6dc:	ldr	fp, [sp, #40]	; 0x28
   1e6e0:	str	r3, [sp, #404]	; 0x194
   1e6e4:	mov	r3, #1
   1e6e8:	str	r3, [sp, #28]
   1e6ec:	b	1f80c <__assert_fail@plt+0xe314>
   1e6f0:	ldr	fp, [sp, #40]	; 0x28
   1e6f4:	b	1e6e4 <__assert_fail@plt+0xd1ec>
   1e6f8:	str	r3, [sp, #404]	; 0x194
   1e6fc:	ldr	r2, [sp, #48]	; 0x30
   1e700:	ldr	r3, [sp, #44]	; 0x2c
   1e704:	cmp	r2, r3
   1e708:	ldrgt	r2, [sp, #36]	; 0x24
   1e70c:	ldrbgt	r3, [r2, r3]
   1e710:	movle	r3, #0
   1e714:	ldr	r2, [sp, #76]	; 0x4c
   1e718:	cmp	r2, #0
   1e71c:	ldrbne	r3, [r2, r3]
   1e720:	ldr	r2, [sp, #52]	; 0x34
   1e724:	ldrb	r3, [r2, r3]
   1e728:	cmp	r3, #0
   1e72c:	bne	1e770 <__assert_fail@plt+0xd278>
   1e730:	ldr	fp, [sp, #40]	; 0x28
   1e734:	mov	r3, #1
   1e738:	str	r3, [sp, #28]
   1e73c:	b	1f80c <__assert_fail@plt+0xe314>
   1e740:	str	r3, [sp, #404]	; 0x194
   1e744:	b	1e6fc <__assert_fail@plt+0xd204>
   1e748:	ldr	r3, [sp, #404]	; 0x194
   1e74c:	ldr	r2, [sp, #44]	; 0x2c
   1e750:	cmp	r2, r3
   1e754:	bne	1e770 <__assert_fail@plt+0xd278>
   1e758:	b	1e6fc <__assert_fail@plt+0xd204>
   1e75c:	cmp	r1, #0
   1e760:	strne	r3, [sp, #404]	; 0x194
   1e764:	ldr	r2, [sp, #56]	; 0x38
   1e768:	cmp	r2, r3
   1e76c:	bgt	1e830 <__assert_fail@plt+0xd338>
   1e770:	ldr	r2, [sp, #464]	; 0x1d0
   1e774:	ldr	r1, [sp, #404]	; 0x194
   1e778:	add	r0, sp, #268	; 0x10c
   1e77c:	bl	1ac78 <__assert_fail@plt+0x9780>
   1e780:	subs	r3, r0, #0
   1e784:	str	r3, [sp, #28]
   1e788:	bne	1f780 <__assert_fail@plt+0xe288>
   1e78c:	ldr	r3, [sp, #80]	; 0x50
   1e790:	cmp	r3, #1
   1e794:	beq	1e7b4 <__assert_fail@plt+0xd2bc>
   1e798:	ldr	r3, [sp, #296]	; 0x128
   1e79c:	cmp	r3, #0
   1e7a0:	beq	1e7b4 <__assert_fail@plt+0xd2bc>
   1e7a4:	ldr	r3, [sp, #276]	; 0x114
   1e7a8:	ldr	r3, [r3]
   1e7ac:	cmn	r3, #1
   1e7b0:	beq	1fad4 <__assert_fail@plt+0xe5dc>
   1e7b4:	mov	r3, #0
   1e7b8:	str	r3, [sp, #388]	; 0x184
   1e7bc:	str	r3, [sp, #376]	; 0x178
   1e7c0:	str	r3, [sp, #372]	; 0x174
   1e7c4:	ldr	r4, [sp, #352]	; 0x160
   1e7c8:	ldr	r3, [sp, #308]	; 0x134
   1e7cc:	str	r3, [sp, #32]
   1e7d0:	mov	r3, #0
   1e7d4:	str	r3, [sp, #104]	; 0x68
   1e7d8:	ldr	r6, [r4, #36]	; 0x24
   1e7dc:	ldrsb	r3, [r6, #52]	; 0x34
   1e7e0:	cmp	r3, #0
   1e7e4:	blt	1e8e8 <__assert_fail@plt+0xd3f0>
   1e7e8:	ldr	r3, [sp, #368]	; 0x170
   1e7ec:	cmp	r3, #0
   1e7f0:	beq	1e9a8 <__assert_fail@plt+0xd4b0>
   1e7f4:	ldr	r2, [sp, #32]
   1e7f8:	str	r6, [r3, r2, lsl #2]
   1e7fc:	ldr	r3, [r4, #76]	; 0x4c
   1e800:	cmp	r3, #0
   1e804:	ldreq	fp, [sp, #92]	; 0x5c
   1e808:	bne	1e958 <__assert_fail@plt+0xd460>
   1e80c:	ldrb	r3, [r6, #52]	; 0x34
   1e810:	tst	r3, #16
   1e814:	bne	1e9b0 <__assert_fail@plt+0xd4b8>
   1e818:	mvn	sl, #0
   1e81c:	mov	r3, #0
   1e820:	str	r3, [sp, #12]
   1e824:	ldr	r3, [sp, #88]	; 0x58
   1e828:	str	r3, [sp, #20]
   1e82c:	b	1ed4c <__assert_fail@plt+0xd854>
   1e830:	ldr	fp, [sp, #40]	; 0x28
   1e834:	mov	r3, #1
   1e838:	str	r3, [sp, #28]
   1e83c:	b	1f80c <__assert_fail@plt+0xe314>
   1e840:	ldr	r5, [sp, #52]	; 0x34
   1e844:	ldr	r6, [sp, #84]	; 0x54
   1e848:	ldr	r7, [sp, #56]	; 0x38
   1e84c:	ldr	r8, [sp, #44]	; 0x2c
   1e850:	b	1e89c <__assert_fail@plt+0xd3a4>
   1e854:	ldr	r2, [sp, #296]	; 0x128
   1e858:	cmp	r3, r2
   1e85c:	ldrcc	r2, [sp, #272]	; 0x110
   1e860:	ldrbcc	r3, [r2, r3]
   1e864:	movcs	r3, #0
   1e868:	ldrb	r3, [r5, r3]
   1e86c:	cmp	r3, #0
   1e870:	bne	1e770 <__assert_fail@plt+0xd278>
   1e874:	add	r3, r6, r4
   1e878:	str	r3, [sp, #404]	; 0x194
   1e87c:	cmp	r8, r3
   1e880:	movge	r2, #0
   1e884:	movlt	r2, #1
   1e888:	cmp	r7, r3
   1e88c:	movle	r3, r2
   1e890:	orrgt	r3, r2, #1
   1e894:	cmp	r3, #0
   1e898:	bne	1e8d8 <__assert_fail@plt+0xd3e0>
   1e89c:	ldr	r4, [sp, #404]	; 0x194
   1e8a0:	ldr	r3, [sp, #292]	; 0x124
   1e8a4:	sub	r3, r4, r3
   1e8a8:	ldr	r2, [sp, #300]	; 0x12c
   1e8ac:	cmp	r3, r2
   1e8b0:	bcc	1e854 <__assert_fail@plt+0xd35c>
   1e8b4:	ldr	r2, [sp, #464]	; 0x1d0
   1e8b8:	mov	r1, r4
   1e8bc:	add	r0, sp, #268	; 0x10c
   1e8c0:	bl	1ac78 <__assert_fail@plt+0x9780>
   1e8c4:	cmp	r0, #0
   1e8c8:	bne	1f774 <__assert_fail@plt+0xe27c>
   1e8cc:	ldr	r3, [sp, #292]	; 0x124
   1e8d0:	sub	r3, r4, r3
   1e8d4:	b	1e854 <__assert_fail@plt+0xd35c>
   1e8d8:	ldr	fp, [sp, #40]	; 0x28
   1e8dc:	mov	r3, #1
   1e8e0:	str	r3, [sp, #28]
   1e8e4:	b	1f80c <__assert_fail@plt+0xe314>
   1e8e8:	ldr	r2, [sp, #356]	; 0x164
   1e8ec:	ldr	r3, [sp, #32]
   1e8f0:	sub	r1, r3, #1
   1e8f4:	add	r0, sp, #268	; 0x10c
   1e8f8:	bl	19358 <__assert_fail@plt+0x7e60>
   1e8fc:	tst	r0, #1
   1e900:	ldrne	r6, [r4, #40]	; 0x28
   1e904:	bne	1e7e8 <__assert_fail@plt+0xd2f0>
   1e908:	cmp	r0, #0
   1e90c:	beq	1e7e8 <__assert_fail@plt+0xd2f0>
   1e910:	and	r3, r0, #6
   1e914:	cmp	r3, #6
   1e918:	ldreq	r6, [r4, #48]	; 0x30
   1e91c:	beq	1e7e8 <__assert_fail@plt+0xd2f0>
   1e920:	tst	r0, #2
   1e924:	ldrne	r6, [r4, #44]	; 0x2c
   1e928:	bne	1e7e8 <__assert_fail@plt+0xd2f0>
   1e92c:	tst	r0, #4
   1e930:	beq	1e7e8 <__assert_fail@plt+0xd2f0>
   1e934:	mov	r3, r0
   1e938:	ldr	r2, [r6, #40]	; 0x28
   1e93c:	mov	r1, r4
   1e940:	add	r0, sp, #104	; 0x68
   1e944:	bl	182a0 <__assert_fail@plt+0x6da8>
   1e948:	subs	r6, r0, #0
   1e94c:	bne	1e7e8 <__assert_fail@plt+0xd2f0>
   1e950:	ldr	fp, [sp, #40]	; 0x28
   1e954:	b	1f804 <__assert_fail@plt+0xe30c>
   1e958:	add	r4, r6, #4
   1e95c:	mov	r2, #0
   1e960:	mov	r1, r4
   1e964:	add	r0, sp, #268	; 0x10c
   1e968:	bl	195ec <__assert_fail@plt+0x80f4>
   1e96c:	str	r0, [sp, #104]	; 0x68
   1e970:	cmp	r0, #0
   1e974:	bne	1ee08 <__assert_fail@plt+0xd910>
   1e978:	ldrb	r3, [r6, #52]	; 0x34
   1e97c:	tst	r3, #64	; 0x40
   1e980:	ldreq	fp, [sp, #68]	; 0x44
   1e984:	beq	1e80c <__assert_fail@plt+0xd314>
   1e988:	mov	r1, r4
   1e98c:	add	r0, sp, #268	; 0x10c
   1e990:	bl	1cfb0 <__assert_fail@plt+0xbab8>
   1e994:	str	r0, [sp, #104]	; 0x68
   1e998:	cmp	r0, #0
   1e99c:	bne	1ee10 <__assert_fail@plt+0xd918>
   1e9a0:	ldr	fp, [sp, #68]	; 0x44
   1e9a4:	b	1e80c <__assert_fail@plt+0xd314>
   1e9a8:	ldr	fp, [sp, #92]	; 0x5c
   1e9ac:	b	1e80c <__assert_fail@plt+0xd314>
   1e9b0:	ldrsb	r3, [r6, #52]	; 0x34
   1e9b4:	cmp	r3, #0
   1e9b8:	blt	1e9d8 <__assert_fail@plt+0xd4e0>
   1e9bc:	ldr	r3, [sp, #16]
   1e9c0:	cmp	r3, #0
   1e9c4:	beq	1ea00 <__assert_fail@plt+0xd508>
   1e9c8:	ldr	sl, [sp, #32]
   1e9cc:	mov	r3, #1
   1e9d0:	str	r3, [sp, #12]
   1e9d4:	b	1e824 <__assert_fail@plt+0xd32c>
   1e9d8:	ldr	r2, [sp, #32]
   1e9dc:	mov	r1, r6
   1e9e0:	add	r0, sp, #268	; 0x10c
   1e9e4:	bl	198a8 <__assert_fail@plt+0x83b0>
   1e9e8:	cmp	r0, #0
   1e9ec:	bne	1e9bc <__assert_fail@plt+0xd4c4>
   1e9f0:	mvn	sl, #0
   1e9f4:	mov	r3, #0
   1e9f8:	str	r3, [sp, #12]
   1e9fc:	b	1e824 <__assert_fail@plt+0xd32c>
   1ea00:	ldr	sl, [sp, #32]
   1ea04:	b	1f924 <__assert_fail@plt+0xe42c>
   1ea08:	ldr	r2, [sp, #316]	; 0x13c
   1ea0c:	cmp	r3, r2
   1ea10:	bge	1ed6c <__assert_fail@plt+0xd874>
   1ea14:	add	r1, r1, #2
   1ea18:	add	r0, sp, #268	; 0x10c
   1ea1c:	bl	1733c <__assert_fail@plt+0x5e44>
   1ea20:	str	r0, [sp, #104]	; 0x68
   1ea24:	cmp	r0, #0
   1ea28:	beq	1ed78 <__assert_fail@plt+0xd880>
   1ea2c:	ldr	fp, [sp, #40]	; 0x28
   1ea30:	b	1f804 <__assert_fail@plt+0xe30c>
   1ea34:	ldr	r2, [sp, #316]	; 0x13c
   1ea38:	cmp	r3, r2
   1ea3c:	bge	1ed78 <__assert_fail@plt+0xd880>
   1ea40:	b	1ea14 <__assert_fail@plt+0xd51c>
   1ea44:	ldr	r8, [sp, #352]	; 0x160
   1ea48:	ldr	r3, [r6, #8]
   1ea4c:	cmp	r3, #0
   1ea50:	ble	1f7f4 <__assert_fail@plt+0xe2fc>
   1ea54:	mov	r5, #0
   1ea58:	b	1eab8 <__assert_fail@plt+0xd5c0>
   1ea5c:	tst	r3, #8
   1ea60:	beq	1ea6c <__assert_fail@plt+0xd574>
   1ea64:	tst	r0, #1
   1ea68:	bne	1eaa8 <__assert_fail@plt+0xd5b0>
   1ea6c:	tst	r3, #32
   1ea70:	beq	1ea7c <__assert_fail@plt+0xd584>
   1ea74:	tst	r0, #2
   1ea78:	beq	1eaa8 <__assert_fail@plt+0xd5b0>
   1ea7c:	tst	r3, #128	; 0x80
   1ea80:	beq	1ea8c <__assert_fail@plt+0xd594>
   1ea84:	tst	r0, #8
   1ea88:	beq	1eaa8 <__assert_fail@plt+0xd5b0>
   1ea8c:	ldr	r3, [sp, #308]	; 0x134
   1ea90:	add	r2, sp, #268	; 0x10c
   1ea94:	mov	r1, r7
   1ea98:	mov	r0, r8
   1ea9c:	bl	1a78c <__assert_fail@plt+0x9294>
   1eaa0:	cmp	r0, #0
   1eaa4:	bne	1eb1c <__assert_fail@plt+0xd624>
   1eaa8:	add	r5, r5, #1
   1eaac:	ldr	r3, [r6, #8]
   1eab0:	cmp	r5, r3
   1eab4:	bge	1f7f4 <__assert_fail@plt+0xe2fc>
   1eab8:	ldr	r3, [r6, #12]
   1eabc:	ldr	r7, [r3, r5, lsl #2]
   1eac0:	ldr	r4, [r8]
   1eac4:	add	r4, r4, r7, lsl #3
   1eac8:	ldrb	r3, [r4, #6]
   1eacc:	tst	r3, #16
   1ead0:	beq	1eaa8 <__assert_fail@plt+0xd5b0>
   1ead4:	ldr	r3, [r4, #4]
   1ead8:	ldr	r2, [pc, #2296]	; 1f3d8 <__assert_fail@plt+0xdee0>
   1eadc:	tst	r3, r2
   1eae0:	beq	1ea8c <__assert_fail@plt+0xd594>
   1eae4:	ldr	r2, [sp, #356]	; 0x164
   1eae8:	ldr	r1, [sp, #308]	; 0x134
   1eaec:	add	r0, sp, #268	; 0x10c
   1eaf0:	bl	19358 <__assert_fail@plt+0x7e60>
   1eaf4:	ldr	r3, [r4, #4]
   1eaf8:	lsl	r3, r3, #14
   1eafc:	lsr	r3, r3, #22
   1eb00:	tst	r3, #4
   1eb04:	beq	1ea5c <__assert_fail@plt+0xd564>
   1eb08:	tst	r0, #1
   1eb0c:	beq	1eaa8 <__assert_fail@plt+0xd5b0>
   1eb10:	tst	r3, #8
   1eb14:	bne	1eaa8 <__assert_fail@plt+0xd5b0>
   1eb18:	b	1ea6c <__assert_fail@plt+0xd574>
   1eb1c:	ldr	r4, [sp, #308]	; 0x134
   1eb20:	add	r4, r0, r4
   1eb24:	ldr	r3, [sp, #388]	; 0x184
   1eb28:	cmp	r3, r0
   1eb2c:	movge	r0, r3
   1eb30:	str	r0, [sp, #388]	; 0x184
   1eb34:	mov	r1, r4
   1eb38:	add	r0, sp, #268	; 0x10c
   1eb3c:	bl	196f4 <__assert_fail@plt+0x81fc>
   1eb40:	str	r0, [sp, #116]	; 0x74
   1eb44:	cmp	r0, #0
   1eb48:	bne	1ebd8 <__assert_fail@plt+0xd6e0>
   1eb4c:	ldr	r3, [r8, #12]
   1eb50:	ldr	r2, [r3, r7, lsl #2]
   1eb54:	add	r2, r2, r2, lsl #1
   1eb58:	ldr	r3, [r8, #24]
   1eb5c:	add	r2, r3, r2, lsl #2
   1eb60:	ldr	r7, [sp, #368]	; 0x170
   1eb64:	ldr	r3, [r7, r4, lsl #2]
   1eb68:	cmp	r3, #0
   1eb6c:	beq	1ebf0 <__assert_fail@plt+0xd6f8>
   1eb70:	ldr	r1, [r3, #40]	; 0x28
   1eb74:	add	r0, sp, #128	; 0x80
   1eb78:	bl	16b64 <__assert_fail@plt+0x566c>
   1eb7c:	str	r0, [sp, #116]	; 0x74
   1eb80:	cmp	r0, #0
   1eb84:	bne	1ebd8 <__assert_fail@plt+0xd6e0>
   1eb88:	ldr	r2, [sp, #356]	; 0x164
   1eb8c:	sub	r1, r4, #1
   1eb90:	add	r0, sp, #268	; 0x10c
   1eb94:	bl	19358 <__assert_fail@plt+0x7e60>
   1eb98:	ldr	r7, [sp, #368]	; 0x170
   1eb9c:	mov	r3, r0
   1eba0:	add	r2, sp, #128	; 0x80
   1eba4:	mov	r1, r8
   1eba8:	add	r0, sp, #116	; 0x74
   1ebac:	bl	182a0 <__assert_fail@plt+0x6da8>
   1ebb0:	str	r0, [r7, r4, lsl #2]
   1ebb4:	ldr	r0, [sp, #136]	; 0x88
   1ebb8:	bl	13340 <__assert_fail@plt+0x1e48>
   1ebbc:	ldr	r3, [sp, #368]	; 0x170
   1ebc0:	ldr	r3, [r3, r4, lsl #2]
   1ebc4:	cmp	r3, #0
   1ebc8:	bne	1eaa8 <__assert_fail@plt+0xd5b0>
   1ebcc:	ldr	r0, [sp, #116]	; 0x74
   1ebd0:	cmp	r0, #0
   1ebd4:	beq	1eaa8 <__assert_fail@plt+0xd5b0>
   1ebd8:	str	r0, [sp, #104]	; 0x68
   1ebdc:	ldr	r3, [sp, #368]	; 0x170
   1ebe0:	cmp	r3, #0
   1ebe4:	beq	1f900 <__assert_fail@plt+0xe408>
   1ebe8:	mov	r4, #0
   1ebec:	b	1edb4 <__assert_fail@plt+0xd8bc>
   1ebf0:	ldm	r2, {r0, r1, r2}
   1ebf4:	add	r3, sp, #128	; 0x80
   1ebf8:	stm	r3, {r0, r1, r2}
   1ebfc:	ldr	r2, [sp, #356]	; 0x164
   1ec00:	sub	r1, r4, #1
   1ec04:	add	r0, sp, #268	; 0x10c
   1ec08:	bl	19358 <__assert_fail@plt+0x7e60>
   1ec0c:	mov	r3, r0
   1ec10:	add	r2, sp, #128	; 0x80
   1ec14:	mov	r1, r8
   1ec18:	add	r0, sp, #116	; 0x74
   1ec1c:	bl	182a0 <__assert_fail@plt+0x6da8>
   1ec20:	str	r0, [r7, r4, lsl #2]
   1ec24:	b	1ebbc <__assert_fail@plt+0xd6c4>
   1ec28:	ldr	r5, [r6, #48]	; 0x30
   1ec2c:	cmp	r5, #0
   1ec30:	beq	1ec58 <__assert_fail@plt+0xd760>
   1ec34:	ldr	r2, [sp, #356]	; 0x164
   1ec38:	ldr	r1, [sp, #308]	; 0x134
   1ec3c:	sub	r1, r1, #1
   1ec40:	add	r0, sp, #268	; 0x10c
   1ec44:	bl	19358 <__assert_fail@plt+0x7e60>
   1ec48:	tst	r0, #1
   1ec4c:	addne	r4, r4, #256	; 0x100
   1ec50:	ldr	r4, [r5, r4, lsl #2]
   1ec54:	b	1eda8 <__assert_fail@plt+0xd8b0>
   1ec58:	mov	r1, r6
   1ec5c:	ldr	r0, [sp, #352]	; 0x160
   1ec60:	bl	1b3a0 <__assert_fail@plt+0x9ea8>
   1ec64:	cmp	r0, #0
   1ec68:	bne	1ed98 <__assert_fail@plt+0xd8a0>
   1ec6c:	mov	r3, #12
   1ec70:	str	r3, [sp, #104]	; 0x68
   1ec74:	b	1ebdc <__assert_fail@plt+0xd6e4>
   1ec78:	ldr	r3, [sp, #104]	; 0x68
   1ec7c:	cmp	r3, #0
   1ec80:	bne	1f800 <__assert_fail@plt+0xe308>
   1ec84:	ldr	r3, [sp, #368]	; 0x170
   1ec88:	cmp	r3, #0
   1ec8c:	beq	1f90c <__assert_fail@plt+0xe414>
   1ec90:	ldr	r3, [sp, #16]
   1ec94:	eor	r3, r3, #1
   1ec98:	ldr	r2, [sp, #12]
   1ec9c:	tst	r2, r3
   1eca0:	bne	1f90c <__assert_fail@plt+0xe414>
   1eca4:	ldr	r0, [sp, #372]	; 0x174
   1eca8:	ldr	r2, [sp, #308]	; 0x134
   1ecac:	ldr	r1, [sp, #368]	; 0x170
   1ecb0:	add	r1, r1, r2, lsl #2
   1ecb4:	add	r2, r2, #1
   1ecb8:	cmp	r0, r2
   1ecbc:	blt	1f90c <__assert_fail@plt+0xe414>
   1ecc0:	ldr	r3, [sp, #308]	; 0x134
   1ecc4:	add	r3, r3, #1
   1ecc8:	str	r3, [sp, #308]	; 0x134
   1eccc:	ldr	r3, [r1, #4]!
   1ecd0:	cmp	r3, #0
   1ecd4:	beq	1ecb4 <__assert_fail@plt+0xd7bc>
   1ecd8:	mov	r2, #0
   1ecdc:	add	r1, sp, #268	; 0x10c
   1ece0:	add	r0, sp, #104	; 0x68
   1ece4:	bl	1d6b8 <__assert_fail@plt+0xc1c0>
   1ece8:	mov	r4, r0
   1ecec:	ldr	r3, [sp, #104]	; 0x68
   1ecf0:	cmp	r3, #0
   1ecf4:	cmpeq	r0, #0
   1ecf8:	beq	1eca4 <__assert_fail@plt+0xd7ac>
   1ecfc:	cmp	r0, #0
   1ed00:	bne	1edd0 <__assert_fail@plt+0xd8d8>
   1ed04:	b	1f90c <__assert_fail@plt+0xe414>
   1ed08:	ldr	r3, [sp, #68]	; 0x44
   1ed0c:	cmp	r6, r4
   1ed10:	movne	fp, r3
   1ed14:	ldr	r3, [sp, #32]
   1ed18:	cmp	r6, r4
   1ed1c:	moveq	r3, r9
   1ed20:	str	r3, [sp, #32]
   1ed24:	b	1edd8 <__assert_fail@plt+0xd8e0>
   1ed28:	ldr	sl, [sp, #308]	; 0x134
   1ed2c:	ldr	r3, [sp, #16]
   1ed30:	cmp	r3, #0
   1ed34:	beq	1f924 <__assert_fail@plt+0xe42c>
   1ed38:	mov	r3, #1
   1ed3c:	str	r3, [sp, #12]
   1ed40:	mov	r3, #0
   1ed44:	str	r3, [sp, #20]
   1ed48:	mov	r6, r4
   1ed4c:	ldr	r1, [sp, #308]	; 0x134
   1ed50:	ldr	r3, [sp, #324]	; 0x144
   1ed54:	cmp	r1, r3
   1ed58:	bge	1f90c <__assert_fail@plt+0xe414>
   1ed5c:	add	r9, r1, #1
   1ed60:	ldr	r3, [sp, #304]	; 0x130
   1ed64:	cmp	r9, r3
   1ed68:	bge	1ea08 <__assert_fail@plt+0xd510>
   1ed6c:	ldr	r3, [sp, #296]	; 0x128
   1ed70:	cmp	r9, r3
   1ed74:	bge	1ea34 <__assert_fail@plt+0xd53c>
   1ed78:	ldrb	r3, [r6, #52]	; 0x34
   1ed7c:	tst	r3, #32
   1ed80:	bne	1ea44 <__assert_fail@plt+0xd54c>
   1ed84:	ldr	r3, [sp, #308]	; 0x134
   1ed88:	add	r2, r3, #1
   1ed8c:	str	r2, [sp, #308]	; 0x134
   1ed90:	ldr	r2, [sp, #272]	; 0x110
   1ed94:	ldrb	r4, [r2, r3]
   1ed98:	ldr	r3, [r6, #44]	; 0x2c
   1ed9c:	cmp	r3, #0
   1eda0:	beq	1ec28 <__assert_fail@plt+0xd730>
   1eda4:	ldr	r4, [r3, r4, lsl #2]
   1eda8:	ldr	r3, [sp, #368]	; 0x170
   1edac:	cmp	r3, #0
   1edb0:	beq	1edc8 <__assert_fail@plt+0xd8d0>
   1edb4:	mov	r2, r4
   1edb8:	add	r1, sp, #268	; 0x10c
   1edbc:	add	r0, sp, #104	; 0x68
   1edc0:	bl	1d6b8 <__assert_fail@plt+0xc1c0>
   1edc4:	mov	r4, r0
   1edc8:	cmp	r4, #0
   1edcc:	beq	1ec78 <__assert_fail@plt+0xd780>
   1edd0:	cmp	fp, #0
   1edd4:	bne	1ed08 <__assert_fail@plt+0xd810>
   1edd8:	ldrb	r3, [r4, #52]	; 0x34
   1eddc:	tst	r3, #16
   1ede0:	beq	1ed48 <__assert_fail@plt+0xd850>
   1ede4:	tst	r3, #128	; 0x80
   1ede8:	beq	1ed28 <__assert_fail@plt+0xd830>
   1edec:	ldr	r2, [sp, #308]	; 0x134
   1edf0:	mov	r1, r4
   1edf4:	add	r0, sp, #268	; 0x10c
   1edf8:	bl	198a8 <__assert_fail@plt+0x83b0>
   1edfc:	cmp	r0, #0
   1ee00:	beq	1ed48 <__assert_fail@plt+0xd850>
   1ee04:	b	1ed28 <__assert_fail@plt+0xd830>
   1ee08:	mov	sl, r0
   1ee0c:	b	1f924 <__assert_fail@plt+0xe42c>
   1ee10:	mov	sl, r0
   1ee14:	b	1f924 <__assert_fail@plt+0xe42c>
   1ee18:	ldr	r2, [sp, #40]	; 0x28
   1ee1c:	ldr	r3, [r2, #76]	; 0x4c
   1ee20:	cmp	r3, #0
   1ee24:	bne	1fa94 <__assert_fail@plt+0xe59c>
   1ee28:	mov	r9, fp
   1ee2c:	mov	fp, r2
   1ee30:	b	1eee0 <__assert_fail@plt+0xd9e8>
   1ee34:	mov	r3, fp
   1ee38:	ldr	fp, [sp, #12]
   1ee3c:	mov	r2, r6
   1ee40:	mov	r1, r5
   1ee44:	mov	r0, r9
   1ee48:	bl	1c4a8 <__assert_fail@plt+0xafb0>
   1ee4c:	mov	r8, r0
   1ee50:	mov	r0, r6
   1ee54:	bl	13340 <__assert_fail@plt+0x1e48>
   1ee58:	cmp	r8, #0
   1ee5c:	beq	1eeb4 <__assert_fail@plt+0xd9bc>
   1ee60:	mov	r6, #0
   1ee64:	b	1fab4 <__assert_fail@plt+0xe5bc>
   1ee68:	str	r5, [sp, #128]	; 0x80
   1ee6c:	mov	r3, #0
   1ee70:	str	r3, [sp, #132]	; 0x84
   1ee74:	str	r7, [sp, #136]	; 0x88
   1ee78:	str	sl, [sp, #140]	; 0x8c
   1ee7c:	str	r3, [sp, #144]	; 0x90
   1ee80:	str	r3, [sp, #148]	; 0x94
   1ee84:	str	r3, [sp, #152]	; 0x98
   1ee88:	add	r1, sp, #128	; 0x80
   1ee8c:	add	r0, sp, #268	; 0x10c
   1ee90:	bl	1def0 <__assert_fail@plt+0xc9f8>
   1ee94:	mov	r8, r0
   1ee98:	ldr	r0, [sp, #152]	; 0x98
   1ee9c:	bl	13340 <__assert_fail@plt+0x1e48>
   1eea0:	cmp	r8, #0
   1eea4:	bne	1fab0 <__assert_fail@plt+0xe5b8>
   1eea8:	ldr	r3, [r5]
   1eeac:	cmp	r3, #0
   1eeb0:	beq	1fb5c <__assert_fail@plt+0xe664>
   1eeb4:	mov	r9, fp
   1eeb8:	ldr	fp, [sp, #40]	; 0x28
   1eebc:	ldr	r0, [sp, #368]	; 0x170
   1eec0:	bl	13340 <__assert_fail@plt+0x1e48>
   1eec4:	str	r5, [sp, #368]	; 0x170
   1eec8:	str	r7, [sp, #364]	; 0x16c
   1eecc:	str	sl, [sp, #360]	; 0x168
   1eed0:	mov	r0, #0
   1eed4:	bl	13340 <__assert_fail@plt+0x1e48>
   1eed8:	mov	r0, #0
   1eedc:	bl	13340 <__assert_fail@plt+0x1e48>
   1eee0:	ldr	r3, [sp, #60]	; 0x3c
   1eee4:	cmp	r3, #0
   1eee8:	beq	1f80c <__assert_fail@plt+0xe314>
   1eeec:	cmp	r3, #1
   1eef0:	bls	1f844 <__assert_fail@plt+0xe34c>
   1eef4:	ldr	r2, [sp, #460]	; 0x1cc
   1eef8:	str	r2, [sp, #36]	; 0x24
   1eefc:	sub	r4, r3, #-536870911	; 0xe0000001
   1ef00:	lsl	r4, r4, #3
   1ef04:	mov	r3, r2
   1ef08:	add	r1, r2, r4
   1ef0c:	mvn	r2, #0
   1ef10:	str	r2, [r3, #12]
   1ef14:	str	r2, [r3, #8]!
   1ef18:	cmp	r3, r1
   1ef1c:	bne	1ef10 <__assert_fail@plt+0xda18>
   1ef20:	mov	r3, #0
   1ef24:	ldr	r2, [sp, #460]	; 0x1cc
   1ef28:	str	r3, [r2]
   1ef2c:	ldr	r3, [sp, #360]	; 0x168
   1ef30:	str	r3, [r2, #4]
   1ef34:	ldr	r3, [sp, #24]
   1ef38:	ldrb	r3, [r3, #28]
   1ef3c:	eor	r3, r3, #16
   1ef40:	ands	r3, r9, r3, lsr #4
   1ef44:	beq	1f23c <__assert_fail@plt+0xdd44>
   1ef48:	ldrb	r3, [fp, #88]	; 0x58
   1ef4c:	tst	r3, #1
   1ef50:	beq	1f85c <__assert_fail@plt+0xe364>
   1ef54:	ldr	r3, [fp, #76]	; 0x4c
   1ef58:	cmp	r3, #0
   1ef5c:	ble	1f85c <__assert_fail@plt+0xe364>
   1ef60:	ldr	r3, [sp, #24]
   1ef64:	ldr	r3, [r3]
   1ef68:	str	r3, [sp, #24]
   1ef6c:	mov	r3, #0
   1ef70:	str	r3, [sp, #116]	; 0x74
   1ef74:	mov	r2, #2
   1ef78:	str	r2, [sp, #120]	; 0x78
   1ef7c:	str	r3, [sp, #124]	; 0x7c
   1ef80:	str	r3, [sp, #128]	; 0x80
   1ef84:	mov	r3, #16
   1ef88:	str	r3, [sp, #132]	; 0x84
   1ef8c:	add	r3, sp, #140	; 0x8c
   1ef90:	str	r3, [sp, #136]	; 0x88
   1ef94:	mov	r0, #48	; 0x30
   1ef98:	bl	23720 <__assert_fail@plt+0x12228>
   1ef9c:	str	r0, [sp, #124]	; 0x7c
   1efa0:	cmp	r0, #0
   1efa4:	addne	r9, sp, #116	; 0x74
   1efa8:	beq	1f8f4 <__assert_fail@plt+0xe3fc>
   1efac:	ldr	r3, [sp, #24]
   1efb0:	ldr	sl, [r3, #72]	; 0x48
   1efb4:	mov	r3, #0
   1efb8:	str	r3, [sp, #104]	; 0x68
   1efbc:	str	r3, [sp, #108]	; 0x6c
   1efc0:	str	r3, [sp, #112]	; 0x70
   1efc4:	ldr	r3, [sp, #128]	; 0x80
   1efc8:	ldr	r2, [sp, #60]	; 0x3c
   1efcc:	cmp	r2, r3
   1efd0:	bhi	1f048 <__assert_fail@plt+0xdb50>
   1efd4:	ldr	r3, [sp, #60]	; 0x3c
   1efd8:	str	r3, [sp, #128]	; 0x80
   1efdc:	ldr	r3, [sp, #136]	; 0x88
   1efe0:	str	r3, [sp, #16]
   1efe4:	add	r2, r4, #8
   1efe8:	str	r2, [sp, #32]
   1efec:	ldr	r1, [sp, #460]	; 0x1cc
   1eff0:	mov	r0, r3
   1eff4:	bl	11234 <memcpy@plt>
   1eff8:	ldr	r3, [sp, #460]	; 0x1cc
   1effc:	ldr	r3, [r3]
   1f000:	add	r2, sp, #408	; 0x198
   1f004:	str	r3, [r2, #-308]!	; 0xfffffecc
   1f008:	str	r2, [sp, #40]	; 0x28
   1f00c:	ldr	r3, [sp, #60]	; 0x3c
   1f010:	mov	r2, r3
   1f014:	lsl	r3, r3, #4
   1f018:	str	r3, [sp, #44]	; 0x2c
   1f01c:	str	fp, [sp, #12]
   1f020:	mov	fp, r2
   1f024:	ldr	r4, [sp, #460]	; 0x1cc
   1f028:	b	1f47c <__assert_fail@plt+0xdf84>
   1f02c:	ldr	fp, [sp, #40]	; 0x28
   1f030:	mov	r3, #1
   1f034:	str	r3, [sp, #28]
   1f038:	b	1f80c <__assert_fail@plt+0xe314>
   1f03c:	mov	r9, fp
   1f040:	ldr	fp, [sp, #40]	; 0x28
   1f044:	b	1eee0 <__assert_fail@plt+0xd9e8>
   1f048:	mov	r3, #8
   1f04c:	add	r2, sp, #140	; 0x8c
   1f050:	ldr	r1, [sp, #60]	; 0x3c
   1f054:	add	r0, sp, #128	; 0x80
   1f058:	bl	23818 <__assert_fail@plt+0x12320>
   1f05c:	cmp	r0, #0
   1f060:	bne	1efdc <__assert_fail@plt+0xdae4>
   1f064:	ldr	r0, [sp, #136]	; 0x88
   1f068:	add	r3, sp, #140	; 0x8c
   1f06c:	cmp	r0, r3
   1f070:	beq	1f078 <__assert_fail@plt+0xdb80>
   1f074:	bl	13340 <__assert_fail@plt+0x1e48>
   1f078:	add	r3, sp, #140	; 0x8c
   1f07c:	str	r3, [sp, #136]	; 0x88
   1f080:	mov	r3, #0
   1f084:	str	r3, [sp, #128]	; 0x80
   1f088:	mvn	r3, #0
   1f08c:	str	r3, [sp, #132]	; 0x84
   1f090:	add	r0, sp, #128	; 0x80
   1f094:	bl	1882c <__assert_fail@plt+0x7334>
   1f098:	mov	r0, r9
   1f09c:	bl	18860 <__assert_fail@plt+0x7368>
   1f0a0:	mov	r3, #12
   1f0a4:	str	r3, [sp, #28]
   1f0a8:	b	1f80c <__assert_fail@plt+0xe314>
   1f0ac:	ldr	r3, [r3, sl, lsl #3]
   1f0b0:	add	r3, r3, #1
   1f0b4:	cmp	fp, r3
   1f0b8:	addgt	r1, r4, r3, lsl #3
   1f0bc:	strgt	r2, [r4, r3, lsl #3]
   1f0c0:	mvngt	r3, #0
   1f0c4:	strgt	r3, [r1, #4]
   1f0c8:	ldr	r2, [r4, #4]
   1f0cc:	ldr	r3, [sp, #100]	; 0x64
   1f0d0:	cmp	r2, r3
   1f0d4:	beq	1f18c <__assert_fail@plt+0xdc94>
   1f0d8:	cmp	r9, #0
   1f0dc:	beq	1f0f4 <__assert_fail@plt+0xdbfc>
   1f0e0:	mov	r1, sl
   1f0e4:	add	r0, sp, #104	; 0x68
   1f0e8:	bl	156ac <__assert_fail@plt+0x41b4>
   1f0ec:	cmp	r0, #0
   1f0f0:	bne	1f1ac <__assert_fail@plt+0xdcb4>
   1f0f4:	ldr	r5, [sp, #352]	; 0x160
   1f0f8:	mov	r7, sl
   1f0fc:	lsl	r8, sl, #3
   1f100:	ldr	r3, [r5]
   1f104:	add	r1, r3, r8
   1f108:	ldrb	r2, [r1, #4]
   1f10c:	tst	r2, #8
   1f110:	beq	1f3dc <__assert_fail@plt+0xdee4>
   1f114:	ldr	r3, [sp, #368]	; 0x170
   1f118:	ldr	r2, [sp, #100]	; 0x64
   1f11c:	ldr	r3, [r3, r2, lsl #2]
   1f120:	add	r3, r3, #4
   1f124:	str	r3, [sp, #20]
   1f128:	add	r3, sl, sl, lsl #1
   1f12c:	ldr	r5, [r5, #20]
   1f130:	add	r5, r5, r3, lsl #2
   1f134:	mov	r1, sl
   1f138:	add	r0, sp, #104	; 0x68
   1f13c:	bl	156ac <__assert_fail@plt+0x41b4>
   1f140:	cmp	r0, #0
   1f144:	beq	1f270 <__assert_fail@plt+0xdd78>
   1f148:	ldr	r8, [r5, #4]
   1f14c:	cmp	r8, #0
   1f150:	mvnle	sl, #0
   1f154:	ble	1f898 <__assert_fail@plt+0xe3a0>
   1f158:	ldr	r7, [r5, #8]
   1f15c:	sub	r7, r7, #4
   1f160:	mvn	sl, #0
   1f164:	mov	r5, #0
   1f168:	b	1f3ac <__assert_fail@plt+0xdeb4>
   1f16c:	str	r2, [r1, #4]
   1f170:	ldr	r2, [sp, #32]
   1f174:	mov	r1, r4
   1f178:	ldr	r0, [sp, #16]
   1f17c:	bl	11234 <memcpy@plt>
   1f180:	b	1f0c8 <__assert_fail@plt+0xdbd0>
   1f184:	str	r2, [r1, #4]
   1f188:	b	1f0c8 <__assert_fail@plt+0xdbd0>
   1f18c:	ldr	r3, [sp, #364]	; 0x16c
   1f190:	cmp	sl, r3
   1f194:	bne	1f0d8 <__assert_fail@plt+0xdbe0>
   1f198:	cmp	r9, #0
   1f19c:	beq	1f268 <__assert_fail@plt+0xdd70>
   1f1a0:	ldr	r2, [sp, #36]	; 0x24
   1f1a4:	mov	r3, #0
   1f1a8:	b	1f1c8 <__assert_fail@plt+0xdcd0>
   1f1ac:	ldr	r2, [sp, #36]	; 0x24
   1f1b0:	mov	r3, #0
   1f1b4:	b	1f1c8 <__assert_fail@plt+0xdcd0>
   1f1b8:	add	r3, r3, #1
   1f1bc:	add	r2, r2, #8
   1f1c0:	cmp	fp, r3
   1f1c4:	beq	1f214 <__assert_fail@plt+0xdd1c>
   1f1c8:	ldr	r1, [r4, r3, lsl #3]
   1f1cc:	cmp	r1, #0
   1f1d0:	blt	1f1b8 <__assert_fail@plt+0xdcc0>
   1f1d4:	ldr	r1, [r2, #4]
   1f1d8:	cmn	r1, #1
   1f1dc:	bne	1f1b8 <__assert_fail@plt+0xdcc0>
   1f1e0:	add	r3, sp, #104	; 0x68
   1f1e4:	str	r3, [sp, #4]
   1f1e8:	ldr	r3, [sp, #16]
   1f1ec:	str	r3, [sp]
   1f1f0:	mov	r3, r4
   1f1f4:	mov	r2, fp
   1f1f8:	ldr	r1, [sp, #40]	; 0x28
   1f1fc:	mov	r0, r9
   1f200:	bl	19980 <__assert_fail@plt+0x8488>
   1f204:	subs	sl, r0, #0
   1f208:	bge	1f0f4 <__assert_fail@plt+0xdbfc>
   1f20c:	ldr	fp, [sp, #12]
   1f210:	b	1f218 <__assert_fail@plt+0xdd20>
   1f214:	ldr	fp, [sp, #12]
   1f218:	ldr	r0, [sp, #112]	; 0x70
   1f21c:	bl	13340 <__assert_fail@plt+0x1e48>
   1f220:	add	r0, sp, #128	; 0x80
   1f224:	bl	1882c <__assert_fail@plt+0x7334>
   1f228:	mov	r0, r9
   1f22c:	bl	18860 <__assert_fail@plt+0x7368>
   1f230:	cmp	r0, #0
   1f234:	strne	r0, [sp, #28]
   1f238:	bne	1f80c <__assert_fail@plt+0xe314>
   1f23c:	ldrb	r4, [sp, #344]	; 0x158
   1f240:	ldr	r7, [sp, #296]	; 0x128
   1f244:	ldr	r8, [sp, #280]	; 0x118
   1f248:	ldr	r9, [sp, #300]	; 0x12c
   1f24c:	ldr	ip, [sp, #404]	; 0x194
   1f250:	ldr	r1, [sp, #460]	; 0x1cc
   1f254:	mov	r3, r1
   1f258:	add	r2, r1, #4
   1f25c:	ldr	r0, [sp, #60]	; 0x3c
   1f260:	add	lr, r1, r0, lsl #3
   1f264:	b	1f66c <__assert_fail@plt+0xe174>
   1f268:	ldr	fp, [sp, #12]
   1f26c:	b	1f218 <__assert_fail@plt+0xdd20>
   1f270:	mov	r1, sl
   1f274:	add	r0, sp, #104	; 0x68
   1f278:	bl	18a40 <__assert_fail@plt+0x7548>
   1f27c:	cmp	r0, #0
   1f280:	bne	1f148 <__assert_fail@plt+0xdc50>
   1f284:	ldr	fp, [sp, #12]
   1f288:	ldr	r0, [sp, #112]	; 0x70
   1f28c:	bl	13340 <__assert_fail@plt+0x1e48>
   1f290:	add	r0, sp, #128	; 0x80
   1f294:	bl	1882c <__assert_fail@plt+0x7334>
   1f298:	mov	r0, r9
   1f29c:	bl	18860 <__assert_fail@plt+0x7368>
   1f2a0:	mov	r3, #12
   1f2a4:	str	r3, [sp, #28]
   1f2a8:	b	1f80c <__assert_fail@plt+0xe314>
   1f2ac:	mov	r1, sl
   1f2b0:	add	r0, sp, #104	; 0x68
   1f2b4:	bl	156ac <__assert_fail@plt+0x41b4>
   1f2b8:	cmp	r0, #0
   1f2bc:	bne	1f60c <__assert_fail@plt+0xe114>
   1f2c0:	cmp	r9, #0
   1f2c4:	beq	1f474 <__assert_fail@plt+0xdf7c>
   1f2c8:	ldr	r7, [sp, #100]	; 0x64
   1f2cc:	ldr	r5, [r9]
   1f2d0:	add	r1, r5, #1
   1f2d4:	str	r1, [r9]
   1f2d8:	ldr	r3, [r9, #4]
   1f2dc:	cmp	r1, r3
   1f2e0:	bne	1f30c <__assert_fail@plt+0xde14>
   1f2e4:	add	r1, r1, r1, lsl #1
   1f2e8:	lsl	r1, r1, #4
   1f2ec:	ldr	r0, [r9, #8]
   1f2f0:	bl	23750 <__assert_fail@plt+0x12258>
   1f2f4:	cmp	r0, #0
   1f2f8:	beq	1f894 <__assert_fail@plt+0xe39c>
   1f2fc:	ldr	r3, [r9, #4]
   1f300:	lsl	r3, r3, #1
   1f304:	str	r3, [r9, #4]
   1f308:	str	r0, [r9, #8]
   1f30c:	add	r5, r5, r5, lsl #1
   1f310:	lsl	r8, r5, #3
   1f314:	ldr	r3, [r9, #8]
   1f318:	str	r7, [r3, r5, lsl #3]
   1f31c:	ldr	r3, [r9, #8]
   1f320:	add	r3, r3, r8
   1f324:	str	r6, [r3, #4]
   1f328:	ldr	r5, [r9, #8]
   1f32c:	add	r5, r5, r8
   1f330:	ldr	r0, [sp, #44]	; 0x2c
   1f334:	bl	23720 <__assert_fail@plt+0x12228>
   1f338:	str	r0, [r5, #8]
   1f33c:	ldr	r3, [r9, #8]
   1f340:	add	r3, r3, r8
   1f344:	ldr	r0, [r3, #8]
   1f348:	cmp	r0, #0
   1f34c:	beq	1f894 <__assert_fail@plt+0xe39c>
   1f350:	ldr	r5, [sp, #32]
   1f354:	mov	r2, r5
   1f358:	mov	r1, r4
   1f35c:	bl	11234 <memcpy@plt>
   1f360:	ldr	r3, [r9, #8]
   1f364:	add	r3, r3, r8
   1f368:	ldr	r0, [r3, #8]
   1f36c:	mov	r2, r5
   1f370:	ldr	r1, [sp, #16]
   1f374:	add	r0, r0, r5
   1f378:	bl	11234 <memcpy@plt>
   1f37c:	ldr	r0, [r9, #8]
   1f380:	add	r0, r0, r8
   1f384:	add	r1, sp, #104	; 0x68
   1f388:	add	r0, r0, #12
   1f38c:	bl	16ae8 <__assert_fail@plt+0x55f0>
   1f390:	cmp	r0, #0
   1f394:	beq	1f474 <__assert_fail@plt+0xdf7c>
   1f398:	ldr	fp, [sp, #12]
   1f39c:	b	1f288 <__assert_fail@plt+0xdd90>
   1f3a0:	add	r5, r5, #1
   1f3a4:	cmp	r8, r5
   1f3a8:	beq	1f474 <__assert_fail@plt+0xdf7c>
   1f3ac:	ldr	r6, [r7, #4]!
   1f3b0:	mov	r1, r6
   1f3b4:	ldr	r0, [sp, #20]
   1f3b8:	bl	156ac <__assert_fail@plt+0x41b4>
   1f3bc:	cmp	r0, #0
   1f3c0:	beq	1f3a0 <__assert_fail@plt+0xdea8>
   1f3c4:	cmn	sl, #1
   1f3c8:	bne	1f2ac <__assert_fail@plt+0xddb4>
   1f3cc:	mov	sl, r6
   1f3d0:	b	1f3a0 <__assert_fail@plt+0xdea8>
   1f3d4:	beq	feac9e84 <opterr@@GLIBC_2.4+0xfea93cdc>
   1f3d8:	andeq	pc, r3, r0, lsl #30
   1f3dc:	ldrb	r1, [r1, #6]
   1f3e0:	tst	r1, #16
   1f3e4:	bne	1f500 <__assert_fail@plt+0xe008>
   1f3e8:	cmp	r2, #4
   1f3ec:	bne	1f57c <__assert_fail@plt+0xe084>
   1f3f0:	ldr	r3, [r3, r8]
   1f3f4:	add	r3, r3, #1
   1f3f8:	cmp	fp, r3
   1f3fc:	ble	1f528 <__assert_fail@plt+0xe030>
   1f400:	add	r2, r4, r3, lsl #3
   1f404:	ldr	r6, [r2, #4]
   1f408:	ldr	r2, [r4, r3, lsl #3]
   1f40c:	sub	r6, r6, r2
   1f410:	cmp	r9, #0
   1f414:	bne	1f5b0 <__assert_fail@plt+0xe0b8>
   1f418:	cmp	r6, #0
   1f41c:	beq	1f534 <__assert_fail@plt+0xe03c>
   1f420:	ldr	r3, [r5, #12]
   1f424:	ldr	sl, [r3, sl, lsl #2]
   1f428:	ldr	r3, [sp, #100]	; 0x64
   1f42c:	add	r6, r6, r3
   1f430:	str	r6, [sp, #100]	; 0x64
   1f434:	cmp	r9, #0
   1f438:	beq	1f46c <__assert_fail@plt+0xdf74>
   1f43c:	ldr	r3, [sp, #360]	; 0x168
   1f440:	cmp	r6, r3
   1f444:	bgt	1fb8c <__assert_fail@plt+0xe694>
   1f448:	ldr	r3, [sp, #368]	; 0x170
   1f44c:	ldr	r0, [r3, r6, lsl #2]
   1f450:	cmp	r0, #0
   1f454:	beq	1fb94 <__assert_fail@plt+0xe69c>
   1f458:	mov	r1, sl
   1f45c:	add	r0, r0, #4
   1f460:	bl	156ac <__assert_fail@plt+0x41b4>
   1f464:	cmp	r0, #0
   1f468:	beq	1fb9c <__assert_fail@plt+0xe6a4>
   1f46c:	mov	r3, #0
   1f470:	str	r3, [sp, #108]	; 0x6c
   1f474:	cmp	sl, #0
   1f478:	blt	1f898 <__assert_fail@plt+0xe3a0>
   1f47c:	ldr	r2, [sp, #100]	; 0x64
   1f480:	ldr	r3, [r4, #4]
   1f484:	cmp	r2, r3
   1f488:	bgt	1f624 <__assert_fail@plt+0xe12c>
   1f48c:	lsl	r1, sl, #3
   1f490:	ldr	r3, [sp, #24]
   1f494:	ldr	r3, [r3]
   1f498:	add	r0, r3, r1
   1f49c:	ldrb	ip, [r0, #4]
   1f4a0:	cmp	ip, #8
   1f4a4:	beq	1f0ac <__assert_fail@plt+0xdbb4>
   1f4a8:	cmp	ip, #9
   1f4ac:	bne	1f0c8 <__assert_fail@plt+0xdbd0>
   1f4b0:	ldr	r3, [r3, r1]
   1f4b4:	add	r3, r3, #1
   1f4b8:	cmp	fp, r3
   1f4bc:	ble	1f0c8 <__assert_fail@plt+0xdbd0>
   1f4c0:	add	r1, r4, r3, lsl #3
   1f4c4:	ldr	ip, [r4, r3, lsl #3]
   1f4c8:	cmp	r2, ip
   1f4cc:	bgt	1f16c <__assert_fail@plt+0xdc74>
   1f4d0:	ldrb	r0, [r0, #6]
   1f4d4:	tst	r0, #8
   1f4d8:	beq	1f184 <__assert_fail@plt+0xdc8c>
   1f4dc:	ldr	r0, [sp, #16]
   1f4e0:	ldr	r3, [r0, r3, lsl #3]
   1f4e4:	cmn	r3, #1
   1f4e8:	beq	1f184 <__assert_fail@plt+0xdc8c>
   1f4ec:	ldr	r2, [sp, #32]
   1f4f0:	mov	r1, r0
   1f4f4:	mov	r0, r4
   1f4f8:	bl	11234 <memcpy@plt>
   1f4fc:	b	1f0c8 <__assert_fail@plt+0xdbd0>
   1f500:	ldr	r3, [sp, #100]	; 0x64
   1f504:	add	r2, sp, #268	; 0x10c
   1f508:	mov	r1, sl
   1f50c:	mov	r0, r5
   1f510:	bl	1a78c <__assert_fail@plt+0x9294>
   1f514:	subs	r6, r0, #0
   1f518:	beq	1f57c <__assert_fail@plt+0xe084>
   1f51c:	ldr	r3, [r5, #12]
   1f520:	ldr	sl, [r3, r7, lsl #2]
   1f524:	b	1f428 <__assert_fail@plt+0xdf30>
   1f528:	cmp	r9, #0
   1f52c:	mvnne	sl, #0
   1f530:	bne	1f474 <__assert_fail@plt+0xdf7c>
   1f534:	mov	r1, sl
   1f538:	add	r0, sp, #104	; 0x68
   1f53c:	bl	18a40 <__assert_fail@plt+0x7548>
   1f540:	cmp	r0, #0
   1f544:	beq	1f61c <__assert_fail@plt+0xe124>
   1f548:	ldr	r3, [r5, #20]
   1f54c:	add	r2, r7, r7, lsl #1
   1f550:	add	r3, r3, r2, lsl #2
   1f554:	ldr	r3, [r3, #8]
   1f558:	ldr	sl, [r3]
   1f55c:	ldr	r3, [sp, #368]	; 0x170
   1f560:	ldr	r2, [sp, #100]	; 0x64
   1f564:	ldr	r0, [r3, r2, lsl #2]
   1f568:	mov	r1, sl
   1f56c:	add	r0, r0, #4
   1f570:	bl	156ac <__assert_fail@plt+0x41b4>
   1f574:	cmp	r0, #0
   1f578:	bne	1f474 <__assert_fail@plt+0xdf7c>
   1f57c:	ldr	r1, [r5]
   1f580:	ldr	r2, [sp, #100]	; 0x64
   1f584:	add	r1, r1, r8
   1f588:	add	r0, sp, #268	; 0x10c
   1f58c:	bl	1946c <__assert_fail@plt+0x7f74>
   1f590:	cmp	r0, #0
   1f594:	mvneq	sl, #0
   1f598:	beq	1f898 <__assert_fail@plt+0xe3a0>
   1f59c:	ldr	r3, [r5, #12]
   1f5a0:	ldr	sl, [r3, r7, lsl #2]
   1f5a4:	ldr	r6, [sp, #100]	; 0x64
   1f5a8:	add	r6, r6, #1
   1f5ac:	b	1f430 <__assert_fail@plt+0xdf38>
   1f5b0:	add	r2, r4, r3, lsl #3
   1f5b4:	ldr	r0, [r4, r3, lsl #3]
   1f5b8:	cmn	r0, #1
   1f5bc:	beq	1fb74 <__assert_fail@plt+0xe67c>
   1f5c0:	ldr	r3, [r2, #4]
   1f5c4:	cmn	r3, #1
   1f5c8:	beq	1fb7c <__assert_fail@plt+0xe684>
   1f5cc:	cmp	r6, #0
   1f5d0:	beq	1f534 <__assert_fail@plt+0xe03c>
   1f5d4:	ldr	ip, [sp, #272]	; 0x110
   1f5d8:	ldr	r1, [sp, #100]	; 0x64
   1f5dc:	ldr	r3, [sp, #296]	; 0x128
   1f5e0:	sub	r3, r3, r1
   1f5e4:	cmp	r6, r3
   1f5e8:	bgt	1fb84 <__assert_fail@plt+0xe68c>
   1f5ec:	mov	r2, r6
   1f5f0:	add	r1, ip, r1
   1f5f4:	add	r0, ip, r0
   1f5f8:	bl	11270 <memcmp@plt>
   1f5fc:	cmp	r0, #0
   1f600:	beq	1f51c <__assert_fail@plt+0xe024>
   1f604:	mvn	sl, #0
   1f608:	b	1f898 <__assert_fail@plt+0xe3a0>
   1f60c:	mov	sl, r6
   1f610:	b	1f474 <__assert_fail@plt+0xdf7c>
   1f614:	ldr	fp, [sp, #12]
   1f618:	b	1f288 <__assert_fail@plt+0xdd90>
   1f61c:	ldr	fp, [sp, #12]
   1f620:	b	1f288 <__assert_fail@plt+0xdd90>
   1f624:	ldr	fp, [sp, #12]
   1f628:	ldr	r0, [sp, #112]	; 0x70
   1f62c:	bl	13340 <__assert_fail@plt+0x1e48>
   1f630:	add	r0, sp, #128	; 0x80
   1f634:	bl	1882c <__assert_fail@plt+0x7334>
   1f638:	mov	r0, r9
   1f63c:	bl	18860 <__assert_fail@plt+0x7368>
   1f640:	b	1f230 <__assert_fail@plt+0xdd38>
   1f644:	ldr	r5, [r0, #-4]
   1f648:	add	r5, r5, ip
   1f64c:	str	r5, [r0, #-4]
   1f650:	ldr	r0, [r3, #4]
   1f654:	add	r0, r0, ip
   1f658:	str	r0, [r3, #4]
   1f65c:	add	r3, r3, #8
   1f660:	add	r2, r2, #8
   1f664:	cmp	r3, lr
   1f668:	beq	1f6ac <__assert_fail@plt+0xe1b4>
   1f66c:	mov	r0, r2
   1f670:	ldr	r5, [r2, #-4]
   1f674:	cmn	r5, #1
   1f678:	beq	1f65c <__assert_fail@plt+0xe164>
   1f67c:	cmp	r4, #0
   1f680:	beq	1f644 <__assert_fail@plt+0xe14c>
   1f684:	cmp	r5, r7
   1f688:	ldrne	r5, [r8, r5, lsl #2]
   1f68c:	moveq	r5, r9
   1f690:	str	r5, [r2, #-4]
   1f694:	ldr	r5, [r3, #4]
   1f698:	cmp	r7, r5
   1f69c:	ldrne	r5, [r8, r5, lsl #2]
   1f6a0:	moveq	r5, r9
   1f6a4:	str	r5, [r3, #4]
   1f6a8:	b	1f644 <__assert_fail@plt+0xe14c>
   1f6ac:	ldr	r2, [sp, #64]	; 0x40
   1f6b0:	cmp	r2, #0
   1f6b4:	ble	1f6dc <__assert_fail@plt+0xe1e4>
   1f6b8:	ldr	r2, [sp, #460]	; 0x1cc
   1f6bc:	ldr	r0, [sp, #456]	; 0x1c8
   1f6c0:	add	r0, r2, r0, lsl #3
   1f6c4:	mvn	r2, #0
   1f6c8:	str	r2, [r3]
   1f6cc:	str	r2, [r3, #4]
   1f6d0:	add	r3, r3, #8
   1f6d4:	cmp	r0, r3
   1f6d8:	bne	1f6c8 <__assert_fail@plt+0xe1d0>
   1f6dc:	ldr	r3, [fp, #132]	; 0x84
   1f6e0:	cmp	r3, #0
   1f6e4:	beq	1f80c <__assert_fail@plt+0xe314>
   1f6e8:	ldr	r3, [sp, #60]	; 0x3c
   1f6ec:	sub	r0, r3, #1
   1f6f0:	mov	r3, #0
   1f6f4:	ldr	ip, [sp, #460]	; 0x1cc
   1f6f8:	b	1f724 <__assert_fail@plt+0xe22c>
   1f6fc:	add	r2, r2, #1
   1f700:	ldr	r2, [ip, r2, lsl #3]
   1f704:	str	r2, [r1, #8]
   1f708:	ldr	r2, [fp, #132]	; 0x84
   1f70c:	ldr	r2, [r2, r3, lsl #2]
   1f710:	add	r2, ip, r2, lsl #3
   1f714:	ldr	r2, [r2, #12]
   1f718:	str	r2, [r1, #12]
   1f71c:	add	r3, r3, #1
   1f720:	add	r1, r1, #8
   1f724:	cmp	r0, r3
   1f728:	beq	1f80c <__assert_fail@plt+0xe314>
   1f72c:	ldr	r2, [fp, #132]	; 0x84
   1f730:	ldr	r2, [r2, r3, lsl #2]
   1f734:	cmp	r3, r2
   1f738:	bne	1f6fc <__assert_fail@plt+0xe204>
   1f73c:	b	1f71c <__assert_fail@plt+0xe224>
   1f740:	mov	r3, #12
   1f744:	str	r3, [sp, #28]
   1f748:	b	1f80c <__assert_fail@plt+0xe314>
   1f74c:	mov	r3, #12
   1f750:	str	r3, [sp, #28]
   1f754:	b	1f80c <__assert_fail@plt+0xe314>
   1f758:	mov	r3, #1
   1f75c:	str	r3, [sp, #28]
   1f760:	b	1f80c <__assert_fail@plt+0xe314>
   1f764:	ldr	fp, [sp, #40]	; 0x28
   1f768:	mov	r3, #12
   1f76c:	str	r3, [sp, #28]
   1f770:	b	1f80c <__assert_fail@plt+0xe314>
   1f774:	ldr	fp, [sp, #40]	; 0x28
   1f778:	str	r0, [sp, #28]
   1f77c:	b	1f80c <__assert_fail@plt+0xe314>
   1f780:	ldr	fp, [sp, #40]	; 0x28
   1f784:	b	1f80c <__assert_fail@plt+0xe314>
   1f788:	add	r0, sp, #268	; 0x10c
   1f78c:	bl	18780 <__assert_fail@plt+0x7288>
   1f790:	ldr	r0, [sp, #400]	; 0x190
   1f794:	bl	13340 <__assert_fail@plt+0x1e48>
   1f798:	ldr	r0, [sp, #384]	; 0x180
   1f79c:	bl	13340 <__assert_fail@plt+0x1e48>
   1f7a0:	b	1f820 <__assert_fail@plt+0xe328>
   1f7a4:	mov	r3, #1
   1f7a8:	str	r3, [sp, #28]
   1f7ac:	b	1f828 <__assert_fail@plt+0xe330>
   1f7b0:	mov	r3, #1
   1f7b4:	str	r3, [sp, #28]
   1f7b8:	b	1f828 <__assert_fail@plt+0xe330>
   1f7bc:	mov	r3, #1
   1f7c0:	str	r3, [sp, #28]
   1f7c4:	b	1f828 <__assert_fail@plt+0xe330>
   1f7c8:	ldr	r3, [sp, #36]	; 0x24
   1f7cc:	str	r3, [sp, #272]	; 0x110
   1f7d0:	ldr	r3, [fp, #92]	; 0x5c
   1f7d4:	ldr	r2, [sp, #48]	; 0x30
   1f7d8:	cmp	r3, #1
   1f7dc:	movgt	r2, #0
   1f7e0:	mov	r3, r2
   1f7e4:	b	1e3e8 <__assert_fail@plt+0xcef0>
   1f7e8:	mov	r3, #12
   1f7ec:	str	r3, [sp, #28]
   1f7f0:	b	1f80c <__assert_fail@plt+0xe314>
   1f7f4:	mov	r3, #0
   1f7f8:	str	r3, [sp, #104]	; 0x68
   1f7fc:	b	1ed84 <__assert_fail@plt+0xd88c>
   1f800:	ldr	fp, [sp, #40]	; 0x28
   1f804:	mov	r3, #12
   1f808:	str	r3, [sp, #28]
   1f80c:	ldr	r0, [sp, #368]	; 0x170
   1f810:	bl	13340 <__assert_fail@plt+0x1e48>
   1f814:	ldr	r3, [fp, #76]	; 0x4c
   1f818:	cmp	r3, #0
   1f81c:	bne	1f788 <__assert_fail@plt+0xe290>
   1f820:	add	r0, sp, #268	; 0x10c
   1f824:	bl	185d8 <__assert_fail@plt+0x70e0>
   1f828:	ldr	r0, [sp, #28]
   1f82c:	add	sp, sp, #412	; 0x19c
   1f830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f834:	ldr	fp, [sp, #40]	; 0x28
   1f838:	mov	r3, #12
   1f83c:	str	r3, [sp, #28]
   1f840:	b	1f80c <__assert_fail@plt+0xe314>
   1f844:	mov	r3, #0
   1f848:	ldr	r2, [sp, #460]	; 0x1cc
   1f84c:	str	r3, [r2]
   1f850:	ldr	r3, [sp, #360]	; 0x168
   1f854:	str	r3, [r2, #4]
   1f858:	b	1f23c <__assert_fail@plt+0xdd44>
   1f85c:	ldr	r3, [sp, #24]
   1f860:	ldr	r3, [r3]
   1f864:	str	r3, [sp, #24]
   1f868:	mov	r9, #0
   1f86c:	str	r9, [sp, #116]	; 0x74
   1f870:	mov	r3, #2
   1f874:	str	r3, [sp, #120]	; 0x78
   1f878:	str	r9, [sp, #124]	; 0x7c
   1f87c:	str	r9, [sp, #128]	; 0x80
   1f880:	mov	r3, #16
   1f884:	str	r3, [sp, #132]	; 0x84
   1f888:	add	r3, sp, #140	; 0x8c
   1f88c:	str	r3, [sp, #136]	; 0x88
   1f890:	b	1efac <__assert_fail@plt+0xdab4>
   1f894:	mvn	sl, #1
   1f898:	cmn	sl, #2
   1f89c:	beq	1f614 <__assert_fail@plt+0xe11c>
   1f8a0:	add	r3, sp, #104	; 0x68
   1f8a4:	str	r3, [sp, #4]
   1f8a8:	ldr	r3, [sp, #16]
   1f8ac:	str	r3, [sp]
   1f8b0:	mov	r3, r4
   1f8b4:	mov	r2, fp
   1f8b8:	ldr	r1, [sp, #40]	; 0x28
   1f8bc:	mov	r0, r9
   1f8c0:	bl	19980 <__assert_fail@plt+0x8488>
   1f8c4:	subs	sl, r0, #0
   1f8c8:	bge	1f47c <__assert_fail@plt+0xdf84>
   1f8cc:	ldr	fp, [sp, #12]
   1f8d0:	ldr	r0, [sp, #112]	; 0x70
   1f8d4:	bl	13340 <__assert_fail@plt+0x1e48>
   1f8d8:	add	r0, sp, #128	; 0x80
   1f8dc:	bl	1882c <__assert_fail@plt+0x7334>
   1f8e0:	mov	r0, r9
   1f8e4:	bl	18860 <__assert_fail@plt+0x7368>
   1f8e8:	mov	r3, #1
   1f8ec:	str	r3, [sp, #28]
   1f8f0:	b	1f80c <__assert_fail@plt+0xe314>
   1f8f4:	mov	r3, #12
   1f8f8:	str	r3, [sp, #28]
   1f8fc:	b	1f80c <__assert_fail@plt+0xe314>
   1f900:	ldr	r3, [sp, #104]	; 0x68
   1f904:	cmp	r3, #0
   1f908:	bne	1fa8c <__assert_fail@plt+0xe594>
   1f90c:	ldr	r2, [sp, #20]
   1f910:	cmp	r2, #0
   1f914:	ldrne	r3, [r2]
   1f918:	ldrne	r1, [sp, #32]
   1f91c:	addne	r3, r3, r1
   1f920:	strne	r3, [r2]
   1f924:	cmn	sl, #1
   1f928:	beq	1facc <__assert_fail@plt+0xe5d4>
   1f92c:	cmn	sl, #2
   1f930:	beq	1f764 <__assert_fail@plt+0xe26c>
   1f934:	str	sl, [sp, #360]	; 0x168
   1f938:	ldr	r3, [sp, #60]	; 0x3c
   1f93c:	cmp	r3, #1
   1f940:	movls	fp, #0
   1f944:	movhi	fp, #1
   1f948:	ldr	r3, [sp, #24]
   1f94c:	ldrb	r3, [r3, #28]
   1f950:	eor	r3, r3, #16
   1f954:	ands	r3, fp, r3, lsr #4
   1f958:	beq	1ee18 <__assert_fail@plt+0xd920>
   1f95c:	mov	r2, sl
   1f960:	ldr	r3, [sp, #368]	; 0x170
   1f964:	ldr	r1, [r3, sl, lsl #2]
   1f968:	add	r0, sp, #268	; 0x10c
   1f96c:	bl	198a8 <__assert_fail@plt+0x83b0>
   1f970:	str	r0, [sp, #364]	; 0x16c
   1f974:	ldr	r3, [sp, #40]	; 0x28
   1f978:	ldrb	r3, [r3, #88]	; 0x58
   1f97c:	tst	r3, #1
   1f980:	bne	1f994 <__assert_fail@plt+0xe49c>
   1f984:	ldr	r3, [sp, #40]	; 0x28
   1f988:	ldr	r3, [r3, #76]	; 0x4c
   1f98c:	cmp	r3, #0
   1f990:	beq	1f03c <__assert_fail@plt+0xdb44>
   1f994:	ldr	r9, [sp, #352]	; 0x160
   1f998:	ldr	r7, [sp, #364]	; 0x16c
   1f99c:	cmn	sl, #-1073741822	; 0xc0000002
   1f9a0:	bhi	1f834 <__assert_fail@plt+0xe33c>
   1f9a4:	add	r4, sl, #1
   1f9a8:	lsl	r4, r4, #2
   1f9ac:	mov	r0, r4
   1f9b0:	bl	23720 <__assert_fail@plt+0x12228>
   1f9b4:	subs	r5, r0, #0
   1f9b8:	beq	1fb3c <__assert_fail@plt+0xe644>
   1f9bc:	ldr	r3, [r9, #76]	; 0x4c
   1f9c0:	cmp	r3, #0
   1f9c4:	beq	1ee68 <__assert_fail@plt+0xd970>
   1f9c8:	mov	r0, r4
   1f9cc:	bl	23720 <__assert_fail@plt+0x12228>
   1f9d0:	subs	r6, r0, #0
   1f9d4:	beq	1fb3c <__assert_fail@plt+0xe644>
   1f9d8:	str	fp, [sp, #12]
   1f9dc:	add	fp, sl, #1
   1f9e0:	lsl	r4, fp, #2
   1f9e4:	mov	r2, r4
   1f9e8:	mov	r1, #0
   1f9ec:	mov	r0, r6
   1f9f0:	bl	11414 <memset@plt>
   1f9f4:	str	r5, [sp, #128]	; 0x80
   1f9f8:	str	r6, [sp, #132]	; 0x84
   1f9fc:	str	r7, [sp, #136]	; 0x88
   1fa00:	str	sl, [sp, #140]	; 0x8c
   1fa04:	mov	r3, #0
   1fa08:	str	r3, [sp, #144]	; 0x90
   1fa0c:	str	r3, [sp, #148]	; 0x94
   1fa10:	str	r3, [sp, #152]	; 0x98
   1fa14:	add	r1, sp, #128	; 0x80
   1fa18:	add	r0, sp, #268	; 0x10c
   1fa1c:	bl	1def0 <__assert_fail@plt+0xc9f8>
   1fa20:	mov	r8, r0
   1fa24:	ldr	r0, [sp, #152]	; 0x98
   1fa28:	bl	13340 <__assert_fail@plt+0x1e48>
   1fa2c:	cmp	r8, #0
   1fa30:	bne	1fab4 <__assert_fail@plt+0xe5bc>
   1fa34:	ldr	r3, [r5]
   1fa38:	cmp	r3, #0
   1fa3c:	bne	1ee34 <__assert_fail@plt+0xd93c>
   1fa40:	ldr	r3, [r6]
   1fa44:	cmp	r3, #0
   1fa48:	bne	1ee34 <__assert_fail@plt+0xd93c>
   1fa4c:	sub	r4, r4, #4
   1fa50:	ldr	r3, [sp, #368]	; 0x170
   1fa54:	add	r3, r3, r4
   1fa58:	subs	sl, sl, #1
   1fa5c:	bmi	1fb60 <__assert_fail@plt+0xe668>
   1fa60:	ldr	r1, [r3, #-4]!
   1fa64:	cmp	r1, #0
   1fa68:	beq	1fa58 <__assert_fail@plt+0xe560>
   1fa6c:	ldrb	r2, [r1, #52]	; 0x34
   1fa70:	tst	r2, #16
   1fa74:	beq	1fa58 <__assert_fail@plt+0xe560>
   1fa78:	mov	r2, sl
   1fa7c:	add	r0, sp, #268	; 0x10c
   1fa80:	bl	198a8 <__assert_fail@plt+0x83b0>
   1fa84:	mov	r7, r0
   1fa88:	b	1f9dc <__assert_fail@plt+0xe4e4>
   1fa8c:	ldr	fp, [sp, #40]	; 0x28
   1fa90:	b	1f804 <__assert_fail@plt+0xe30c>
   1fa94:	mov	r2, sl
   1fa98:	ldr	r3, [sp, #368]	; 0x170
   1fa9c:	ldr	r1, [r3, sl, lsl #2]
   1faa0:	add	r0, sp, #268	; 0x10c
   1faa4:	bl	198a8 <__assert_fail@plt+0x83b0>
   1faa8:	str	r0, [sp, #364]	; 0x16c
   1faac:	b	1f984 <__assert_fail@plt+0xe48c>
   1fab0:	mov	r6, #0
   1fab4:	mov	r0, r5
   1fab8:	bl	13340 <__assert_fail@plt+0x1e48>
   1fabc:	mov	r0, r6
   1fac0:	bl	13340 <__assert_fail@plt+0x1e48>
   1fac4:	cmp	r8, #1
   1fac8:	bne	1fb30 <__assert_fail@plt+0xe638>
   1facc:	add	r0, sp, #268	; 0x10c
   1fad0:	bl	18780 <__assert_fail@plt+0x7288>
   1fad4:	ldr	r3, [sp, #404]	; 0x194
   1fad8:	ldr	r2, [sp, #84]	; 0x54
   1fadc:	add	r3, r2, r3
   1fae0:	str	r3, [sp, #404]	; 0x194
   1fae4:	ldr	r2, [sp, #44]	; 0x2c
   1fae8:	cmp	r2, r3
   1faec:	movge	r2, #0
   1faf0:	movlt	r2, #1
   1faf4:	ldr	r1, [sp, #56]	; 0x38
   1faf8:	cmp	r1, r3
   1fafc:	movle	r3, r2
   1fb00:	orrgt	r3, r2, #1
   1fb04:	cmp	r3, #0
   1fb08:	bne	1f02c <__assert_fail@plt+0xdb34>
   1fb0c:	ldr	r3, [sp, #72]	; 0x48
   1fb10:	cmp	r3, #4
   1fb14:	ldrls	pc, [pc, r3, lsl #2]
   1fb18:	b	1e840 <__assert_fail@plt+0xd348>
   1fb1c:	andeq	lr, r1, r4, lsl #13
   1fb20:	andeq	lr, r1, r4, lsl #13
   1fb24:	andeq	lr, r1, ip, lsr #12
   1fb28:	andeq	lr, r1, r4, asr #11
   1fb2c:	andeq	lr, r1, r0, ror r7
   1fb30:	ldr	fp, [sp, #40]	; 0x28
   1fb34:	mov	r3, r8
   1fb38:	b	1fb54 <__assert_fail@plt+0xe65c>
   1fb3c:	ldr	fp, [sp, #40]	; 0x28
   1fb40:	mov	r0, r5
   1fb44:	bl	13340 <__assert_fail@plt+0x1e48>
   1fb48:	mov	r0, #0
   1fb4c:	bl	13340 <__assert_fail@plt+0x1e48>
   1fb50:	mov	r3, #12
   1fb54:	str	r3, [sp, #28]
   1fb58:	b	1f80c <__assert_fail@plt+0xe314>
   1fb5c:	mov	r6, #0
   1fb60:	mov	r0, r5
   1fb64:	bl	13340 <__assert_fail@plt+0x1e48>
   1fb68:	mov	r0, r6
   1fb6c:	bl	13340 <__assert_fail@plt+0x1e48>
   1fb70:	b	1facc <__assert_fail@plt+0xe5d4>
   1fb74:	mvn	sl, #0
   1fb78:	b	1f898 <__assert_fail@plt+0xe3a0>
   1fb7c:	mvn	sl, #0
   1fb80:	b	1f898 <__assert_fail@plt+0xe3a0>
   1fb84:	mvn	sl, #0
   1fb88:	b	1f898 <__assert_fail@plt+0xe3a0>
   1fb8c:	mvn	sl, #0
   1fb90:	b	1f898 <__assert_fail@plt+0xe3a0>
   1fb94:	mvn	sl, #0
   1fb98:	b	1f898 <__assert_fail@plt+0xe3a0>
   1fb9c:	mvn	sl, #0
   1fba0:	b	1f898 <__assert_fail@plt+0xe3a0>
   1fba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fba8:	sub	sp, sp, #156	; 0x9c
   1fbac:	mov	r9, r0
   1fbb0:	mov	r4, r1
   1fbb4:	mov	r8, r2
   1fbb8:	str	r3, [sp, #24]
   1fbbc:	ldr	sl, [sp, #196]	; 0xc4
   1fbc0:	ldr	r3, [r1]
   1fbc4:	str	r3, [sp, #20]
   1fbc8:	ldrb	r2, [r2, #4]
   1fbcc:	sub	r3, r2, #1
   1fbd0:	cmp	r3, #35	; 0x23
   1fbd4:	ldrls	pc, [pc, r3, lsl #2]
   1fbd8:	b	209f8 <__assert_fail@plt+0xf500>
   1fbdc:	andeq	pc, r1, ip, ror #24
   1fbe0:	andeq	r0, r2, r4, asr #28
   1fbe4:	strdeq	r0, [r2], -r8
   1fbe8:	andeq	r0, r2, ip, asr #11
   1fbec:	andeq	r0, r2, r8, lsl #18
   1fbf0:	strdeq	r0, [r2], -r8
   1fbf4:	strdeq	r0, [r2], -r8
   1fbf8:	andeq	pc, r1, r4, lsr sp	; <UNPREDICTABLE>
   1fbfc:	andeq	r0, r2, r0, lsl #13
   1fc00:	andeq	r0, r2, r4, asr #28
   1fc04:	andeq	r0, r2, ip, asr r6
   1fc08:	andeq	r0, r2, r0, lsr #14
   1fc0c:	strdeq	r0, [r2], -r8
   1fc10:	strdeq	r0, [r2], -r8
   1fc14:	strdeq	r0, [r2], -r8
   1fc18:	strdeq	r0, [r2], -r8
   1fc1c:	strdeq	r0, [r2], -r8
   1fc20:	andeq	r0, r2, ip, asr r6
   1fc24:	andeq	r0, r2, ip, asr r6
   1fc28:	andeq	pc, r1, r0, lsl lr	; <UNPREDICTABLE>
   1fc2c:	strdeq	r0, [r2], -r8
   1fc30:	strdeq	r0, [r2], -r8
   1fc34:	andeq	r0, r2, r4, asr #12
   1fc38:	andeq	r0, r2, r8, lsl #13
   1fc3c:	strdeq	r0, [r2], -r8
   1fc40:	strdeq	r0, [r2], -r8
   1fc44:	strdeq	r0, [r2], -r8
   1fc48:	strdeq	r0, [r2], -r8
   1fc4c:	strdeq	r0, [r2], -r8
   1fc50:	strdeq	r0, [r2], -r8
   1fc54:	strdeq	r0, [r2], -r8
   1fc58:	andeq	r0, r2, r8, asr #18
   1fc5c:	andeq	r0, r2, r8, asr #18
   1fc60:	muleq	r2, r8, r9
   1fc64:	muleq	r2, r8, r9
   1fc68:	andeq	r0, r2, r8, ror #19
   1fc6c:	mov	r3, r8
   1fc70:	mov	r2, #0
   1fc74:	mov	r1, r2
   1fc78:	ldr	r0, [sp, #20]
   1fc7c:	bl	162d4 <__assert_fail@plt+0x4ddc>
   1fc80:	subs	fp, r0, #0
   1fc84:	moveq	r3, #12
   1fc88:	streq	r3, [sl]
   1fc8c:	beq	20c7c <__assert_fail@plt+0xf784>
   1fc90:	ldr	r3, [sp, #20]
   1fc94:	ldr	r3, [r3, #92]	; 0x5c
   1fc98:	cmp	r3, #1
   1fc9c:	movgt	r6, #0
   1fca0:	movgt	r5, #16
   1fca4:	ble	206b4 <__assert_fail@plt+0xf1bc>
   1fca8:	ldr	r3, [r9, #40]	; 0x28
   1fcac:	ldr	r2, [r9, #56]	; 0x38
   1fcb0:	cmp	r2, r3
   1fcb4:	ble	206b4 <__assert_fail@plt+0xf1bc>
   1fcb8:	ldr	r2, [r9, #28]
   1fcbc:	cmp	r3, r2
   1fcc0:	beq	206b4 <__assert_fail@plt+0xf1bc>
   1fcc4:	ldr	r2, [r9, #8]
   1fcc8:	ldr	r3, [r2, r3, lsl #2]
   1fccc:	cmn	r3, #1
   1fcd0:	bne	206b4 <__assert_fail@plt+0xf1bc>
   1fcd4:	ldr	r2, [sp, #24]
   1fcd8:	mov	r1, r9
   1fcdc:	mov	r0, r8
   1fce0:	bl	17dd0 <__assert_fail@plt+0x68d8>
   1fce4:	mov	r3, r8
   1fce8:	mov	r2, r6
   1fcec:	mov	r1, r6
   1fcf0:	ldr	r7, [sp, #20]
   1fcf4:	mov	r0, r7
   1fcf8:	bl	162d4 <__assert_fail@plt+0x4ddc>
   1fcfc:	mov	r4, r0
   1fd00:	mov	r3, r5
   1fd04:	mov	r2, r0
   1fd08:	mov	r1, fp
   1fd0c:	mov	r0, r7
   1fd10:	bl	16448 <__assert_fail@plt+0x4f50>
   1fd14:	mov	fp, r0
   1fd18:	cmp	r0, #0
   1fd1c:	cmpne	r4, #0
   1fd20:	bne	1fca8 <__assert_fail@plt+0xe7b0>
   1fd24:	mov	r3, #12
   1fd28:	str	r3, [sl]
   1fd2c:	mov	fp, #0
   1fd30:	b	20c7c <__assert_fail@plt+0xf784>
   1fd34:	ldr	r5, [r1, #24]
   1fd38:	add	r3, r5, #1
   1fd3c:	str	r3, [r1, #24]
   1fd40:	ldr	r6, [sp, #24]
   1fd44:	orr	r2, r6, #8388608	; 0x800000
   1fd48:	mov	r1, r0
   1fd4c:	mov	r0, r8
   1fd50:	bl	17dd0 <__assert_fail@plt+0x68d8>
   1fd54:	ldrb	r3, [r8, #4]
   1fd58:	cmp	r3, #9
   1fd5c:	beq	1fdc4 <__assert_fail@plt+0xe8cc>
   1fd60:	str	sl, [sp, #4]
   1fd64:	ldr	r3, [sp, #192]	; 0xc0
   1fd68:	add	r3, r3, #1
   1fd6c:	str	r3, [sp]
   1fd70:	mov	r3, r6
   1fd74:	mov	r2, r8
   1fd78:	mov	r1, r4
   1fd7c:	mov	r0, r9
   1fd80:	bl	210b0 <__assert_fail@plt+0xfbb8>
   1fd84:	ldr	r3, [sl]
   1fd88:	cmp	r3, #0
   1fd8c:	beq	1fd98 <__assert_fail@plt+0xe8a0>
   1fd90:	mov	fp, #0
   1fd94:	b	20c7c <__assert_fail@plt+0xf784>
   1fd98:	ldrb	r3, [r8, #4]
   1fd9c:	cmp	r3, #9
   1fda0:	beq	1fdc8 <__assert_fail@plt+0xe8d0>
   1fda4:	cmp	r0, #0
   1fda8:	beq	1fdb8 <__assert_fail@plt+0xe8c0>
   1fdac:	mov	r2, #0
   1fdb0:	ldr	r1, [pc, #3880]	; 20ce0 <__assert_fail@plt+0xf7e8>
   1fdb4:	bl	160e4 <__assert_fail@plt+0x4bec>
   1fdb8:	mov	r3, #8
   1fdbc:	str	r3, [sl]
   1fdc0:	b	1fd90 <__assert_fail@plt+0xe898>
   1fdc4:	mov	r0, #0
   1fdc8:	cmp	r5, #8
   1fdcc:	bhi	1fde4 <__assert_fail@plt+0xe8ec>
   1fdd0:	ldr	r1, [sp, #20]
   1fdd4:	ldr	r3, [r1, #84]	; 0x54
   1fdd8:	mov	r2, #1
   1fddc:	orr	r3, r3, r2, lsl r5
   1fde0:	str	r3, [r1, #84]	; 0x54
   1fde4:	mov	r3, #17
   1fde8:	mov	r2, #0
   1fdec:	mov	r1, r0
   1fdf0:	ldr	r0, [sp, #20]
   1fdf4:	bl	16448 <__assert_fail@plt+0x4f50>
   1fdf8:	subs	fp, r0, #0
   1fdfc:	moveq	r3, #12
   1fe00:	streq	r3, [sl]
   1fe04:	beq	20c7c <__assert_fail@plt+0xf784>
   1fe08:	str	r5, [fp, #20]
   1fe0c:	b	206b4 <__assert_fail@plt+0xf1bc>
   1fe10:	mov	r3, #0
   1fe14:	str	r3, [sp, #60]	; 0x3c
   1fe18:	mov	r1, #1
   1fe1c:	mov	r0, #32
   1fe20:	bl	236d0 <__assert_fail@plt+0x121d8>
   1fe24:	mov	r5, r0
   1fe28:	mov	r1, #1
   1fe2c:	mov	r0, #40	; 0x28
   1fe30:	bl	236d0 <__assert_fail@plt+0x121d8>
   1fe34:	mov	r7, r0
   1fe38:	cmp	r0, #0
   1fe3c:	cmpne	r5, #0
   1fe40:	moveq	r3, #1
   1fe44:	movne	r3, #0
   1fe48:	str	r3, [sp, #40]	; 0x28
   1fe4c:	beq	1febc <__assert_fail@plt+0xe9c4>
   1fe50:	ldr	r2, [sp, #24]
   1fe54:	mov	r1, r9
   1fe58:	mov	r0, r8
   1fe5c:	bl	1589c <__assert_fail@plt+0x43a4>
   1fe60:	str	r0, [sp, #28]
   1fe64:	ldrb	r3, [r8, #4]
   1fe68:	cmp	r3, #2
   1fe6c:	streq	r3, [sl]
   1fe70:	beq	20004 <__assert_fail@plt+0xeb0c>
   1fe74:	cmp	r3, #25
   1fe78:	beq	1fed8 <__assert_fail@plt+0xe9e0>
   1fe7c:	ldr	r3, [sp, #40]	; 0x28
   1fe80:	str	r3, [sp, #44]	; 0x2c
   1fe84:	ldrb	r3, [r8, #4]
   1fe88:	cmp	r3, #21
   1fe8c:	moveq	r3, #1
   1fe90:	strbeq	r3, [r8, #4]
   1fe94:	mov	fp, #0
   1fe98:	mov	r3, #1
   1fe9c:	str	fp, [sp, #36]	; 0x24
   1fea0:	ldr	r2, [sp, #24]
   1fea4:	lsr	r2, r2, #16
   1fea8:	and	r2, r2, r3
   1feac:	str	r2, [sp, #52]	; 0x34
   1feb0:	str	sl, [sp, #196]	; 0xc4
   1feb4:	ldr	sl, [sp, #20]
   1feb8:	b	202b4 <__assert_fail@plt+0xedbc>
   1febc:	mov	r0, r5
   1fec0:	bl	13340 <__assert_fail@plt+0x1e48>
   1fec4:	mov	r0, r7
   1fec8:	bl	13340 <__assert_fail@plt+0x1e48>
   1fecc:	mov	r3, #12
   1fed0:	str	r3, [sl]
   1fed4:	b	20014 <__assert_fail@plt+0xeb1c>
   1fed8:	ldrb	r3, [r7, #16]
   1fedc:	orr	r3, r3, #1
   1fee0:	strb	r3, [r7, #16]
   1fee4:	ldr	r3, [sp, #24]
   1fee8:	tst	r3, #256	; 0x100
   1feec:	ldrne	r3, [r5]
   1fef0:	orrne	r3, r3, #1024	; 0x400
   1fef4:	strne	r3, [r5]
   1fef8:	ldr	r3, [r9, #40]	; 0x28
   1fefc:	ldr	r2, [sp, #28]
   1ff00:	add	r3, r3, r2
   1ff04:	str	r3, [r9, #40]	; 0x28
   1ff08:	ldr	r2, [sp, #24]
   1ff0c:	mov	r1, r9
   1ff10:	mov	r0, r8
   1ff14:	bl	1589c <__assert_fail@plt+0x43a4>
   1ff18:	str	r0, [sp, #28]
   1ff1c:	ldrb	r3, [r8, #4]
   1ff20:	cmp	r3, #2
   1ff24:	streq	r3, [sl]
   1ff28:	beq	20004 <__assert_fail@plt+0xeb0c>
   1ff2c:	mov	r3, #1
   1ff30:	str	r3, [sp, #44]	; 0x2c
   1ff34:	b	1fe84 <__assert_fail@plt+0xe98c>
   1ff38:	ldr	sl, [sp, #196]	; 0xc4
   1ff3c:	str	r0, [sl]
   1ff40:	b	20004 <__assert_fail@plt+0xeb0c>
   1ff44:	ldr	sl, [sp, #196]	; 0xc4
   1ff48:	mov	r3, #7
   1ff4c:	str	r3, [sl]
   1ff50:	b	20004 <__assert_fail@plt+0xeb0c>
   1ff54:	ldr	r3, [r9, #40]	; 0x28
   1ff58:	ldr	r2, [sp, #28]
   1ff5c:	add	r3, r3, r2
   1ff60:	str	r3, [r9, #40]	; 0x28
   1ff64:	ldr	r2, [sp, #24]
   1ff68:	mov	r1, r9
   1ff6c:	add	r0, sp, #80	; 0x50
   1ff70:	bl	1589c <__assert_fail@plt+0x43a4>
   1ff74:	mov	r3, r0
   1ff78:	ldrb	r2, [sp, #84]	; 0x54
   1ff7c:	cmp	r2, #2
   1ff80:	beq	20028 <__assert_fail@plt+0xeb30>
   1ff84:	cmp	r2, #21
   1ff88:	beq	20038 <__assert_fail@plt+0xeb40>
   1ff8c:	add	r2, sp, #120	; 0x78
   1ff90:	str	r2, [sp, #76]	; 0x4c
   1ff94:	mov	r2, #3
   1ff98:	str	r2, [sp, #72]	; 0x48
   1ff9c:	mov	r2, #1
   1ffa0:	str	r2, [sp, #8]
   1ffa4:	ldr	r2, [sp, #24]
   1ffa8:	str	r2, [sp, #4]
   1ffac:	str	sl, [sp]
   1ffb0:	add	r2, sp, #80	; 0x50
   1ffb4:	mov	r1, r9
   1ffb8:	add	r0, sp, #72	; 0x48
   1ffbc:	bl	15e5c <__assert_fail@plt+0x4964>
   1ffc0:	cmp	r0, #0
   1ffc4:	bne	20e54 <__assert_fail@plt+0xf95c>
   1ffc8:	ldr	r2, [sp, #24]
   1ffcc:	mov	r1, r9
   1ffd0:	mov	r0, r8
   1ffd4:	bl	1589c <__assert_fail@plt+0x43a4>
   1ffd8:	str	r0, [sp, #28]
   1ffdc:	ldr	r6, [sp, #64]	; 0x40
   1ffe0:	sub	r3, r6, #2
   1ffe4:	bics	r3, r3, #2
   1ffe8:	beq	20270 <__assert_fail@plt+0xed78>
   1ffec:	ldr	r4, [sp, #72]	; 0x48
   1fff0:	cmp	r4, #2
   1fff4:	bne	20054 <__assert_fail@plt+0xeb5c>
   1fff8:	ldr	sl, [sp, #196]	; 0xc4
   1fffc:	mov	r3, #11
   20000:	str	r3, [sl]
   20004:	mov	r0, r5
   20008:	bl	13340 <__assert_fail@plt+0x1e48>
   2000c:	mov	r0, r7
   20010:	bl	17e90 <__assert_fail@plt+0x6998>
   20014:	ldr	r3, [sl]
   20018:	cmp	r3, #0
   2001c:	bne	20e4c <__assert_fail@plt+0xf954>
   20020:	mov	fp, #0
   20024:	b	206b4 <__assert_fail@plt+0xf1bc>
   20028:	ldr	sl, [sp, #196]	; 0xc4
   2002c:	mov	r3, #7
   20030:	str	r3, [sl]
   20034:	b	20004 <__assert_fail@plt+0xeb0c>
   20038:	ldr	r3, [r9, #40]	; 0x28
   2003c:	ldr	r2, [sp, #28]
   20040:	sub	r3, r3, r2
   20044:	str	r3, [r9, #40]	; 0x28
   20048:	mov	r3, #1
   2004c:	strb	r3, [r8, #4]
   20050:	b	20328 <__assert_fail@plt+0xee30>
   20054:	cmp	r4, #4
   20058:	beq	20e60 <__assert_fail@plt+0xf968>
   2005c:	cmp	r6, #3
   20060:	beq	2008c <__assert_fail@plt+0xeb94>
   20064:	cmp	r4, #3
   20068:	beq	20f38 <__assert_fail@plt+0xfa40>
   2006c:	cmp	r6, #0
   20070:	beq	200a8 <__assert_fail@plt+0xebb0>
   20074:	cmp	r6, #3
   20078:	movne	r0, #0
   2007c:	bne	200ac <__assert_fail@plt+0xebb4>
   20080:	ldr	r3, [sp, #68]	; 0x44
   20084:	ldrb	r0, [r3]
   20088:	b	200ac <__assert_fail@plt+0xebb4>
   2008c:	ldr	r0, [sp, #68]	; 0x44
   20090:	bl	113c0 <strlen@plt>
   20094:	cmp	r0, #1
   20098:	bls	20f30 <__assert_fail@plt+0xfa38>
   2009c:	ldr	sl, [sp, #196]	; 0xc4
   200a0:	mov	r3, #3
   200a4:	b	20278 <__assert_fail@plt+0xed80>
   200a8:	ldrb	r0, [sp, #68]	; 0x44
   200ac:	cmp	r4, #0
   200b0:	bne	201a0 <__assert_fail@plt+0xeca8>
   200b4:	ldrb	r3, [sp, #76]	; 0x4c
   200b8:	str	r3, [sp, #32]
   200bc:	cmp	r6, #0
   200c0:	cmpne	r6, #3
   200c4:	ldrne	r6, [sp, #68]	; 0x44
   200c8:	bne	200e0 <__assert_fail@plt+0xebe8>
   200cc:	ldr	r3, [sl, #92]	; 0x5c
   200d0:	cmp	r3, #1
   200d4:	ble	201b8 <__assert_fail@plt+0xecc0>
   200d8:	bl	11420 <btowc@plt>
   200dc:	mov	r6, r0
   200e0:	ldr	r3, [sp, #72]	; 0x48
   200e4:	cmp	r3, #3
   200e8:	cmpne	r3, #0
   200ec:	bne	201d0 <__assert_fail@plt+0xecd8>
   200f0:	ldr	r3, [sl, #92]	; 0x5c
   200f4:	cmp	r3, #1
   200f8:	ble	201c8 <__assert_fail@plt+0xecd0>
   200fc:	ldr	r0, [sp, #32]
   20100:	bl	11420 <btowc@plt>
   20104:	mov	r4, r0
   20108:	cmn	r6, #1
   2010c:	cmnne	r4, #1
   20110:	beq	20e6c <__assert_fail@plt+0xf974>
   20114:	ldr	r3, [sp, #52]	; 0x34
   20118:	cmp	r4, r6
   2011c:	movcs	r3, #0
   20120:	andcc	r3, r3, #1
   20124:	cmp	r3, #0
   20128:	bne	20e78 <__assert_fail@plt+0xf980>
   2012c:	ldr	r3, [sl, #92]	; 0x5c
   20130:	cmp	r3, #1
   20134:	ble	20208 <__assert_fail@plt+0xed10>
   20138:	ldr	r3, [r7, #32]
   2013c:	cmp	r3, fp
   20140:	bne	201e8 <__assert_fail@plt+0xecf0>
   20144:	lsl	fp, fp, #1
   20148:	add	fp, fp, #1
   2014c:	lsl	r3, fp, #2
   20150:	str	r3, [sp, #48]	; 0x30
   20154:	mov	r1, r3
   20158:	ldr	r0, [r7, #4]
   2015c:	bl	23750 <__assert_fail@plt+0x12258>
   20160:	str	r0, [sp, #32]
   20164:	ldr	r1, [sp, #48]	; 0x30
   20168:	ldr	r0, [r7, #8]
   2016c:	bl	23750 <__assert_fail@plt+0x12258>
   20170:	str	r0, [sp, #48]	; 0x30
   20174:	ldr	r3, [sp, #32]
   20178:	cmp	r0, #0
   2017c:	cmpne	r3, #0
   20180:	bne	201d8 <__assert_fail@plt+0xece0>
   20184:	ldr	sl, [sp, #196]	; 0xc4
   20188:	mov	r0, r3
   2018c:	bl	13340 <__assert_fail@plt+0x1e48>
   20190:	ldr	r0, [sp, #48]	; 0x30
   20194:	bl	13340 <__assert_fail@plt+0x1e48>
   20198:	mov	r3, #12
   2019c:	b	20000 <__assert_fail@plt+0xeb08>
   201a0:	cmp	r4, #3
   201a4:	ldreq	r3, [sp, #76]	; 0x4c
   201a8:	ldrbeq	r3, [r3]
   201ac:	movne	r3, #0
   201b0:	str	r3, [sp, #32]
   201b4:	b	200bc <__assert_fail@plt+0xebc4>
   201b8:	uxtb	r6, r0
   201bc:	cmp	r4, #3
   201c0:	cmpne	r4, #0
   201c4:	bne	201d0 <__assert_fail@plt+0xecd8>
   201c8:	ldrb	r4, [sp, #32]
   201cc:	b	20108 <__assert_fail@plt+0xec10>
   201d0:	ldr	r4, [sp, #76]	; 0x4c
   201d4:	b	20108 <__assert_fail@plt+0xec10>
   201d8:	ldr	r3, [sp, #32]
   201dc:	str	r3, [r7, #4]
   201e0:	ldr	r3, [sp, #48]	; 0x30
   201e4:	str	r3, [r7, #8]
   201e8:	ldr	r2, [r7, #32]
   201ec:	ldr	r3, [r7, #4]
   201f0:	str	r6, [r3, r2, lsl #2]
   201f4:	ldr	r2, [r7, #8]
   201f8:	ldr	r3, [r7, #32]
   201fc:	add	r1, r3, #1
   20200:	str	r1, [r7, #32]
   20204:	str	r4, [r2, r3, lsl #2]
   20208:	mov	r1, #0
   2020c:	mov	ip, #1
   20210:	b	20220 <__assert_fail@plt+0xed28>
   20214:	add	r1, r1, #1
   20218:	cmp	r1, #256	; 0x100
   2021c:	beq	20e84 <__assert_fail@plt+0xf98c>
   20220:	cmp	r1, r6
   20224:	movcc	r3, #0
   20228:	movcs	r3, #1
   2022c:	cmp	r1, r4
   20230:	movhi	r3, #0
   20234:	cmp	r3, #0
   20238:	beq	20214 <__assert_fail@plt+0xed1c>
   2023c:	add	r3, r1, #31
   20240:	cmp	r1, #0
   20244:	movge	r3, r1
   20248:	asr	r3, r3, #5
   2024c:	asr	r2, r1, #31
   20250:	lsr	r0, r2, #27
   20254:	add	r2, r1, r0
   20258:	and	r2, r2, #31
   2025c:	sub	r2, r2, r0
   20260:	ldr	r0, [r5, r3, lsl #2]
   20264:	orr	r2, r0, ip, lsl r2
   20268:	str	r2, [r5, r3, lsl #2]
   2026c:	b	20214 <__assert_fail@plt+0xed1c>
   20270:	ldr	sl, [sp, #196]	; 0xc4
   20274:	mov	r3, #11
   20278:	str	r3, [sl]
   2027c:	b	20004 <__assert_fail@plt+0xeb0c>
   20280:	ldrb	r3, [sp, #68]	; 0x44
   20284:	asr	r1, r3, #5
   20288:	and	r3, r3, #31
   2028c:	ldr	r2, [r5, r1, lsl #2]
   20290:	mov	r0, #1
   20294:	orr	r3, r2, r0, lsl r3
   20298:	str	r3, [r5, r1, lsl #2]
   2029c:	ldrb	r3, [r8, #4]
   202a0:	cmp	r3, #2
   202a4:	beq	20454 <__assert_fail@plt+0xef5c>
   202a8:	cmp	r3, #21
   202ac:	beq	20464 <__assert_fail@plt+0xef6c>
   202b0:	ldr	r3, [sp, #40]	; 0x28
   202b4:	add	r2, sp, #88	; 0x58
   202b8:	str	r2, [sp, #68]	; 0x44
   202bc:	mov	r2, #3
   202c0:	str	r2, [sp, #64]	; 0x40
   202c4:	str	r3, [sp, #8]
   202c8:	ldr	r3, [sp, #24]
   202cc:	str	r3, [sp, #4]
   202d0:	str	sl, [sp]
   202d4:	ldr	r3, [sp, #28]
   202d8:	mov	r2, r8
   202dc:	mov	r1, r9
   202e0:	add	r0, sp, #64	; 0x40
   202e4:	bl	15e5c <__assert_fail@plt+0x4964>
   202e8:	cmp	r0, #0
   202ec:	bne	1ff38 <__assert_fail@plt+0xea40>
   202f0:	ldr	r2, [sp, #24]
   202f4:	mov	r1, r9
   202f8:	mov	r0, r8
   202fc:	bl	1589c <__assert_fail@plt+0x43a4>
   20300:	str	r0, [sp, #28]
   20304:	ldr	r3, [sp, #64]	; 0x40
   20308:	sub	r3, r3, #2
   2030c:	bics	r3, r3, #2
   20310:	beq	20328 <__assert_fail@plt+0xee30>
   20314:	ldrb	r3, [r8, #4]
   20318:	cmp	r3, #2
   2031c:	beq	1ff44 <__assert_fail@plt+0xea4c>
   20320:	cmp	r3, #22
   20324:	beq	1ff54 <__assert_fail@plt+0xea5c>
   20328:	ldr	r3, [sp, #64]	; 0x40
   2032c:	cmp	r3, #4
   20330:	ldrls	pc, [pc, r3, lsl #2]
   20334:	b	20454 <__assert_fail@plt+0xef5c>
   20338:	andeq	r0, r2, r0, lsl #5
   2033c:	andeq	r0, r2, ip, asr #6
   20340:	andeq	r0, r2, r0, lsr #7
   20344:	ldrdeq	r0, [r2], -ip
   20348:	andeq	r0, r2, r8, lsl r4
   2034c:	ldr	r3, [r7, #20]
   20350:	ldr	r2, [sp, #36]	; 0x24
   20354:	cmp	r3, r2
   20358:	beq	20378 <__assert_fail@plt+0xee80>
   2035c:	ldr	r2, [r7]
   20360:	ldr	r3, [r7, #20]
   20364:	add	r1, r3, #1
   20368:	str	r1, [r7, #20]
   2036c:	ldr	r1, [sp, #68]	; 0x44
   20370:	str	r1, [r2, r3, lsl #2]
   20374:	b	2029c <__assert_fail@plt+0xeda4>
   20378:	lsl	r3, r2, #1
   2037c:	add	r3, r3, #1
   20380:	str	r3, [sp, #36]	; 0x24
   20384:	lsl	r1, r3, #2
   20388:	ldr	r0, [r7]
   2038c:	bl	23750 <__assert_fail@plt+0x12258>
   20390:	cmp	r0, #0
   20394:	beq	205c4 <__assert_fail@plt+0xf0cc>
   20398:	str	r0, [r7]
   2039c:	b	2035c <__assert_fail@plt+0xee64>
   203a0:	ldr	r4, [sp, #68]	; 0x44
   203a4:	mov	r0, r4
   203a8:	bl	113c0 <strlen@plt>
   203ac:	cmp	r0, #1
   203b0:	bne	20e94 <__assert_fail@plt+0xf99c>
   203b4:	ldrb	r3, [r4]
   203b8:	asr	r1, r3, #5
   203bc:	and	r3, r3, #31
   203c0:	ldr	r2, [r5, r1, lsl #2]
   203c4:	orr	r3, r2, r0, lsl r3
   203c8:	str	r3, [r5, r1, lsl #2]
   203cc:	mov	r3, #0
   203d0:	ldr	r2, [sp, #196]	; 0xc4
   203d4:	str	r3, [r2]
   203d8:	b	2029c <__assert_fail@plt+0xeda4>
   203dc:	ldr	r4, [sp, #68]	; 0x44
   203e0:	mov	r0, r4
   203e4:	bl	113c0 <strlen@plt>
   203e8:	cmp	r0, #1
   203ec:	bne	20ea4 <__assert_fail@plt+0xf9ac>
   203f0:	ldrb	r3, [r4]
   203f4:	asr	r1, r3, #5
   203f8:	and	r3, r3, #31
   203fc:	ldr	r2, [r5, r1, lsl #2]
   20400:	orr	r3, r2, r0, lsl r3
   20404:	str	r3, [r5, r1, lsl #2]
   20408:	mov	r3, #0
   2040c:	ldr	r2, [sp, #196]	; 0xc4
   20410:	str	r3, [r2]
   20414:	b	2029c <__assert_fail@plt+0xeda4>
   20418:	ldr	r3, [sp, #24]
   2041c:	str	r3, [sp, #4]
   20420:	ldr	r3, [sp, #68]	; 0x44
   20424:	str	r3, [sp]
   20428:	add	r3, sp, #60	; 0x3c
   2042c:	mov	r2, r7
   20430:	mov	r1, r5
   20434:	ldr	r0, [r9, #64]	; 0x40
   20438:	bl	19a3c <__assert_fail@plt+0x8544>
   2043c:	ldr	r3, [sp, #196]	; 0xc4
   20440:	str	r0, [r3]
   20444:	cmp	r0, #0
   20448:	beq	2029c <__assert_fail@plt+0xeda4>
   2044c:	mov	sl, r3
   20450:	b	20004 <__assert_fail@plt+0xeb0c>
   20454:	ldr	sl, [sp, #196]	; 0xc4
   20458:	mov	r3, #7
   2045c:	str	r3, [sl]
   20460:	b	20004 <__assert_fail@plt+0xeb0c>
   20464:	ldr	sl, [sp, #196]	; 0xc4
   20468:	ldr	r3, [r9, #40]	; 0x28
   2046c:	ldr	r2, [sp, #28]
   20470:	add	r3, r3, r2
   20474:	str	r3, [r9, #40]	; 0x28
   20478:	ldr	r3, [sp, #44]	; 0x2c
   2047c:	cmp	r3, #0
   20480:	beq	204a0 <__assert_fail@plt+0xefa8>
   20484:	sub	r3, r5, #4
   20488:	add	r1, r5, #28
   2048c:	ldr	r2, [r3, #4]
   20490:	mvn	r2, r2
   20494:	str	r2, [r3, #4]!
   20498:	cmp	r1, r3
   2049c:	bne	2048c <__assert_fail@plt+0xef94>
   204a0:	ldr	r3, [sp, #20]
   204a4:	ldr	ip, [r3, #92]	; 0x5c
   204a8:	cmp	ip, #1
   204ac:	ble	204d8 <__assert_fail@plt+0xefe0>
   204b0:	sub	r0, r5, #4
   204b4:	ldr	r1, [r3, #60]	; 0x3c
   204b8:	sub	r1, r1, #4
   204bc:	add	lr, r5, #28
   204c0:	ldr	r3, [r0, #4]
   204c4:	ldr	r2, [r1, #4]!
   204c8:	and	r3, r3, r2
   204cc:	str	r3, [r0, #4]!
   204d0:	cmp	r0, lr
   204d4:	bne	204c0 <__assert_fail@plt+0xefc8>
   204d8:	ldr	r3, [r7, #20]
   204dc:	cmp	r3, #0
   204e0:	bne	20528 <__assert_fail@plt+0xf030>
   204e4:	ldr	r3, [r7, #24]
   204e8:	cmp	r3, #0
   204ec:	bne	20528 <__assert_fail@plt+0xf030>
   204f0:	ldr	r3, [r7, #28]
   204f4:	cmp	r3, #0
   204f8:	bne	20528 <__assert_fail@plt+0xf030>
   204fc:	ldr	r3, [r7, #32]
   20500:	cmp	r3, #0
   20504:	bne	20528 <__assert_fail@plt+0xf030>
   20508:	cmp	ip, #1
   2050c:	ble	20590 <__assert_fail@plt+0xf098>
   20510:	ldr	r3, [r7, #36]	; 0x24
   20514:	cmp	r3, #0
   20518:	bne	20528 <__assert_fail@plt+0xf030>
   2051c:	ldrb	r3, [r7, #16]
   20520:	tst	r3, #1
   20524:	beq	20590 <__assert_fail@plt+0xf098>
   20528:	ldr	r0, [sp, #20]
   2052c:	ldrb	r3, [r0, #88]	; 0x58
   20530:	orr	r3, r3, #2
   20534:	strb	r3, [r0, #88]	; 0x58
   20538:	mov	r3, #6
   2053c:	strb	r3, [sp, #124]	; 0x7c
   20540:	add	r3, sp, #152	; 0x98
   20544:	str	r7, [r3, #-32]!	; 0xffffffe0
   20548:	mov	r2, #0
   2054c:	mov	r1, r2
   20550:	bl	162d4 <__assert_fail@plt+0x4ddc>
   20554:	subs	fp, r0, #0
   20558:	beq	20ef4 <__assert_fail@plt+0xf9fc>
   2055c:	ldr	r3, [r5]
   20560:	cmp	r3, #0
   20564:	bne	20eb4 <__assert_fail@plt+0xf9bc>
   20568:	mov	r3, r5
   2056c:	add	r2, r5, #28
   20570:	ldr	r1, [r3, #4]!
   20574:	cmp	r1, #0
   20578:	bne	20eb4 <__assert_fail@plt+0xf9bc>
   2057c:	cmp	r3, r2
   20580:	bne	20570 <__assert_fail@plt+0xf078>
   20584:	mov	r0, r5
   20588:	bl	13340 <__assert_fail@plt+0x1e48>
   2058c:	b	206b4 <__assert_fail@plt+0xf1bc>
   20590:	mov	r0, r7
   20594:	bl	17e90 <__assert_fail@plt+0x6998>
   20598:	mov	r3, #3
   2059c:	strb	r3, [sp, #124]	; 0x7c
   205a0:	add	r3, sp, #152	; 0x98
   205a4:	str	r5, [r3, #-32]!	; 0xffffffe0
   205a8:	mov	r2, #0
   205ac:	mov	r1, r2
   205b0:	ldr	r0, [sp, #20]
   205b4:	bl	162d4 <__assert_fail@plt+0x4ddc>
   205b8:	subs	fp, r0, #0
   205bc:	bne	206b4 <__assert_fail@plt+0xf1bc>
   205c0:	b	20ef4 <__assert_fail@plt+0xf9fc>
   205c4:	ldr	sl, [sp, #196]	; 0xc4
   205c8:	b	20ef4 <__assert_fail@plt+0xf9fc>
   205cc:	ldr	r2, [r8]
   205d0:	mov	r3, #1
   205d4:	lsl	r3, r3, r2
   205d8:	ldr	r2, [sp, #20]
   205dc:	ldr	r2, [r2, #84]	; 0x54
   205e0:	tst	r3, r2
   205e4:	moveq	r3, #6
   205e8:	streq	r3, [sl]
   205ec:	moveq	fp, #0
   205f0:	beq	20c7c <__assert_fail@plt+0xf784>
   205f4:	ldr	r0, [sp, #20]
   205f8:	ldr	r2, [r0, #80]	; 0x50
   205fc:	orr	r3, r2, r3
   20600:	str	r3, [r0, #80]	; 0x50
   20604:	mov	r3, r8
   20608:	mov	r2, #0
   2060c:	mov	r1, r2
   20610:	bl	162d4 <__assert_fail@plt+0x4ddc>
   20614:	subs	fp, r0, #0
   20618:	moveq	r3, #12
   2061c:	streq	r3, [sl]
   20620:	beq	20c7c <__assert_fail@plt+0xf784>
   20624:	ldr	r2, [sp, #20]
   20628:	ldr	r3, [r2, #76]	; 0x4c
   2062c:	add	r3, r3, #1
   20630:	str	r3, [r2, #76]	; 0x4c
   20634:	ldrb	r3, [r2, #88]	; 0x58
   20638:	orr	r3, r3, #2
   2063c:	strb	r3, [r2, #88]	; 0x58
   20640:	b	206b4 <__assert_fail@plt+0xf1bc>
   20644:	ldr	r3, [sp, #24]
   20648:	tst	r3, #16777216	; 0x1000000
   2064c:	movne	r3, #13
   20650:	strne	r3, [sl]
   20654:	movne	fp, #0
   20658:	bne	20c7c <__assert_fail@plt+0xf784>
   2065c:	ldr	r3, [sp, #24]
   20660:	tst	r3, #32
   20664:	movne	r3, #13
   20668:	strne	r3, [sl]
   2066c:	movne	fp, #0
   20670:	bne	20c7c <__assert_fail@plt+0xf784>
   20674:	ldr	r3, [sp, #24]
   20678:	tst	r3, #16
   2067c:	bne	206c8 <__assert_fail@plt+0xf1d0>
   20680:	cmp	r2, #9
   20684:	beq	20704 <__assert_fail@plt+0xf20c>
   20688:	mov	r3, #1
   2068c:	strb	r3, [r8, #4]
   20690:	mov	r3, r8
   20694:	mov	r2, #0
   20698:	mov	r1, r2
   2069c:	ldr	r0, [sp, #20]
   206a0:	bl	162d4 <__assert_fail@plt+0x4ddc>
   206a4:	subs	fp, r0, #0
   206a8:	moveq	r3, #12
   206ac:	streq	r3, [sl]
   206b0:	beq	20c7c <__assert_fail@plt+0xf784>
   206b4:	ldr	r2, [sp, #24]
   206b8:	mov	r1, r9
   206bc:	mov	r0, r8
   206c0:	bl	17dd0 <__assert_fail@plt+0x68d8>
   206c4:	b	20d0c <__assert_fail@plt+0xf814>
   206c8:	mov	r5, r3
   206cc:	mov	r2, r3
   206d0:	mov	r1, r9
   206d4:	mov	r0, r8
   206d8:	bl	17dd0 <__assert_fail@plt+0x68d8>
   206dc:	str	sl, [sp, #4]
   206e0:	ldr	r3, [sp, #192]	; 0xc0
   206e4:	str	r3, [sp]
   206e8:	mov	r3, r5
   206ec:	mov	r2, r8
   206f0:	mov	r1, r4
   206f4:	mov	r0, r9
   206f8:	bl	1fba4 <__assert_fail@plt+0xe6ac>
   206fc:	mov	fp, r0
   20700:	b	20c7c <__assert_fail@plt+0xf784>
   20704:	ldr	r3, [sp, #24]
   20708:	tst	r3, #131072	; 0x20000
   2070c:	moveq	r3, #16
   20710:	streq	r3, [sl]
   20714:	moveq	fp, #0
   20718:	bne	20688 <__assert_fail@plt+0xf190>
   2071c:	b	20c7c <__assert_fail@plt+0xf784>
   20720:	ldr	r2, [r8]
   20724:	ldr	r3, [pc, #1464]	; 20ce4 <__assert_fail@plt+0xf7ec>
   20728:	and	r3, r3, r2
   2072c:	cmp	r3, #0
   20730:	beq	20744 <__assert_fail@plt+0xf24c>
   20734:	ldr	r3, [sp, #20]
   20738:	ldrb	r3, [r3, #88]	; 0x58
   2073c:	tst	r3, #16
   20740:	beq	207f8 <__assert_fail@plt+0xf300>
   20744:	ldr	r3, [r8]
   20748:	sub	r2, r3, #256	; 0x100
   2074c:	bics	r2, r2, #256	; 0x100
   20750:	bne	208e0 <__assert_fail@plt+0xf3e8>
   20754:	cmp	r3, #256	; 0x100
   20758:	beq	208b4 <__assert_fail@plt+0xf3bc>
   2075c:	mov	r3, #5
   20760:	str	r3, [r8]
   20764:	mov	r3, r8
   20768:	mov	r2, #0
   2076c:	mov	r1, r2
   20770:	ldr	r0, [sp, #20]
   20774:	bl	162d4 <__assert_fail@plt+0x4ddc>
   20778:	mov	r4, r0
   2077c:	mov	r3, #10
   20780:	str	r3, [r8]
   20784:	mov	r3, r8
   20788:	mov	r2, #0
   2078c:	mov	r1, r2
   20790:	ldr	r6, [sp, #20]
   20794:	mov	r0, r6
   20798:	bl	162d4 <__assert_fail@plt+0x4ddc>
   2079c:	mov	r5, r0
   207a0:	mov	r3, #10
   207a4:	mov	r2, r0
   207a8:	mov	r1, r4
   207ac:	mov	r0, r6
   207b0:	bl	16448 <__assert_fail@plt+0x4f50>
   207b4:	cmp	r5, #0
   207b8:	cmpne	r4, #0
   207bc:	moveq	r4, #1
   207c0:	movne	r4, #0
   207c4:	mov	fp, r0
   207c8:	cmp	r0, #0
   207cc:	orreq	r4, r4, #1
   207d0:	cmp	r4, #0
   207d4:	movne	r3, #12
   207d8:	strne	r3, [sl]
   207dc:	movne	fp, #0
   207e0:	bne	20c7c <__assert_fail@plt+0xf784>
   207e4:	ldr	r2, [sp, #24]
   207e8:	mov	r1, r9
   207ec:	mov	r0, r8
   207f0:	bl	17dd0 <__assert_fail@plt+0x68d8>
   207f4:	b	20c7c <__assert_fail@plt+0xf784>
   207f8:	ldr	r1, [sp, #20]
   207fc:	ldrb	r3, [r1, #88]	; 0x58
   20800:	orr	r3, r3, #16
   20804:	strb	r3, [r1, #88]	; 0x58
   20808:	tst	r3, #8
   2080c:	bne	20f00 <__assert_fail@plt+0xfa08>
   20810:	mov	r3, #0
   20814:	str	r3, [r1, #96]	; 0x60
   20818:	ldr	r3, [pc, #1224]	; 20ce8 <__assert_fail@plt+0xf7f0>
   2081c:	str	r3, [r1, #100]	; 0x64
   20820:	mvn	r3, #2013265921	; 0x78000001
   20824:	str	r3, [r1, #104]	; 0x68
   20828:	mvn	r3, #-134217727	; 0xf8000001
   2082c:	str	r3, [r1, #108]	; 0x6c
   20830:	ldrb	r3, [r1, #88]	; 0x58
   20834:	tst	r3, #4
   20838:	beq	20f24 <__assert_fail@plt+0xfa2c>
   2083c:	add	r3, r1, #112	; 0x70
   20840:	mov	r2, #0
   20844:	str	r2, [r1, #112]	; 0x70
   20848:	str	r2, [r3, #4]
   2084c:	str	r2, [r3, #8]
   20850:	str	r2, [r3, #12]
   20854:	b	20744 <__assert_fail@plt+0xf24c>
   20858:	add	r4, r4, #32
   2085c:	add	r5, r5, #1
   20860:	add	r7, r7, #64	; 0x40
   20864:	add	lr, lr, #4
   20868:	cmp	r5, #7
   2086c:	bgt	20744 <__assert_fail@plt+0xf24c>
   20870:	mov	ip, r7
   20874:	mov	r1, #0
   20878:	ldr	r3, [r0]
   2087c:	ldrh	r3, [r3, ip]
   20880:	lsr	r3, r3, #3
   20884:	add	r2, r4, r1
   20888:	cmp	r2, #95	; 0x5f
   2088c:	orreq	r3, r3, #1
   20890:	tst	r3, #1
   20894:	ldrne	r3, [lr]
   20898:	orrne	r3, r3, r6, lsl r1
   2089c:	strne	r3, [lr]
   208a0:	add	r1, r1, #1
   208a4:	add	ip, ip, #2
   208a8:	cmp	r1, #32
   208ac:	bne	20878 <__assert_fail@plt+0xf380>
   208b0:	b	20858 <__assert_fail@plt+0xf360>
   208b4:	mov	r3, #6
   208b8:	str	r3, [r8]
   208bc:	mov	r3, r8
   208c0:	mov	r2, #0
   208c4:	mov	r1, r2
   208c8:	ldr	r0, [sp, #20]
   208cc:	bl	162d4 <__assert_fail@plt+0x4ddc>
   208d0:	mov	r4, r0
   208d4:	mov	r3, #9
   208d8:	str	r3, [r8]
   208dc:	b	20784 <__assert_fail@plt+0xf28c>
   208e0:	mov	r3, r8
   208e4:	mov	r2, #0
   208e8:	mov	r1, r2
   208ec:	ldr	r0, [sp, #20]
   208f0:	bl	162d4 <__assert_fail@plt+0x4ddc>
   208f4:	subs	fp, r0, #0
   208f8:	moveq	r3, #12
   208fc:	streq	r3, [sl]
   20900:	bne	207e4 <__assert_fail@plt+0xf2ec>
   20904:	b	20c7c <__assert_fail@plt+0xf784>
   20908:	mov	r3, r8
   2090c:	mov	r2, #0
   20910:	mov	r1, r2
   20914:	ldr	r0, [sp, #20]
   20918:	bl	162d4 <__assert_fail@plt+0x4ddc>
   2091c:	subs	fp, r0, #0
   20920:	moveq	r3, #12
   20924:	streq	r3, [sl]
   20928:	beq	20c7c <__assert_fail@plt+0xf784>
   2092c:	ldr	r2, [sp, #20]
   20930:	ldr	r3, [r2, #92]	; 0x5c
   20934:	cmp	r3, #1
   20938:	ldrbgt	r3, [r2, #88]	; 0x58
   2093c:	orrgt	r3, r3, #2
   20940:	strbgt	r3, [r2, #88]	; 0x58
   20944:	b	206b4 <__assert_fail@plt+0xf1bc>
   20948:	str	sl, [sp, #4]
   2094c:	cmp	r2, #33	; 0x21
   20950:	movne	r2, #0
   20954:	moveq	r2, #1
   20958:	str	r2, [sp]
   2095c:	ldr	r3, [pc, #904]	; 20cec <__assert_fail@plt+0xf7f4>
   20960:	ldr	r2, [pc, #904]	; 20cf0 <__assert_fail@plt+0xf7f8>
   20964:	ldr	r1, [r0, #64]	; 0x40
   20968:	ldr	r0, [sp, #20]
   2096c:	bl	1a570 <__assert_fail@plt+0x9078>
   20970:	ldr	r2, [sl]
   20974:	mov	fp, r0
   20978:	adds	r3, r2, #0
   2097c:	movne	r3, #1
   20980:	cmp	r0, #0
   20984:	movne	r3, #0
   20988:	cmp	r3, #0
   2098c:	beq	206b4 <__assert_fail@plt+0xf1bc>
   20990:	mov	fp, #0
   20994:	b	20c7c <__assert_fail@plt+0xf784>
   20998:	str	sl, [sp, #4]
   2099c:	cmp	r2, #35	; 0x23
   209a0:	movne	r2, #0
   209a4:	moveq	r2, #1
   209a8:	str	r2, [sp]
   209ac:	ldr	r3, [pc, #832]	; 20cf4 <__assert_fail@plt+0xf7fc>
   209b0:	ldr	r2, [pc, #832]	; 20cf8 <__assert_fail@plt+0xf800>
   209b4:	ldr	r1, [r0, #64]	; 0x40
   209b8:	ldr	r0, [sp, #20]
   209bc:	bl	1a570 <__assert_fail@plt+0x9078>
   209c0:	ldr	r2, [sl]
   209c4:	mov	fp, r0
   209c8:	adds	r3, r2, #0
   209cc:	movne	r3, #1
   209d0:	cmp	r0, #0
   209d4:	movne	r3, #0
   209d8:	cmp	r3, #0
   209dc:	beq	206b4 <__assert_fail@plt+0xf1bc>
   209e0:	mov	fp, #0
   209e4:	b	20c7c <__assert_fail@plt+0xf784>
   209e8:	mov	r3, #5
   209ec:	str	r3, [sl]
   209f0:	mov	fp, #0
   209f4:	b	20c7c <__assert_fail@plt+0xf784>
   209f8:	ldr	r2, [sp, #24]
   209fc:	mov	r1, r8
   20a00:	mov	r0, r9
   20a04:	bl	17dec <__assert_fail@plt+0x68f4>
   20a08:	mov	r7, r0
   20a0c:	cmn	r0, #1
   20a10:	beq	20a5c <__assert_fail@plt+0xf564>
   20a14:	cmn	r0, #2
   20a18:	beq	20a34 <__assert_fail@plt+0xf53c>
   20a1c:	ldrb	r3, [r8, #4]
   20a20:	cmp	r3, #24
   20a24:	beq	20b38 <__assert_fail@plt+0xf640>
   20a28:	cmp	r3, #1
   20a2c:	moveq	r5, r0
   20a30:	beq	20a78 <__assert_fail@plt+0xf580>
   20a34:	ldr	r3, [sp, #24]
   20a38:	tst	r3, #2097152	; 0x200000
   20a3c:	bne	20a90 <__assert_fail@plt+0xf598>
   20a40:	ldrb	r3, [r8, #4]
   20a44:	cmp	r3, #2
   20a48:	bne	20b28 <__assert_fail@plt+0xf630>
   20a4c:	mov	r3, #9
   20a50:	str	r3, [sl]
   20a54:	mov	r6, #0
   20a58:	b	20c1c <__assert_fail@plt+0xf724>
   20a5c:	ldrb	r3, [r8, #4]
   20a60:	cmp	r3, #1
   20a64:	bne	20ab0 <__assert_fail@plt+0xf5b8>
   20a68:	ldrb	r3, [r8]
   20a6c:	cmp	r3, #44	; 0x2c
   20a70:	moveq	r5, #0
   20a74:	bne	20ab0 <__assert_fail@plt+0xf5b8>
   20a78:	ldrb	r3, [r8]
   20a7c:	cmp	r3, #44	; 0x2c
   20a80:	beq	20ac0 <__assert_fail@plt+0xf5c8>
   20a84:	ldr	r3, [sp, #24]
   20a88:	tst	r3, #2097152	; 0x200000
   20a8c:	beq	20b28 <__assert_fail@plt+0xf630>
   20a90:	str	r4, [r9, #40]	; 0x28
   20a94:	add	r3, sp, #120	; 0x78
   20a98:	ldm	r3, {r0, r1}
   20a9c:	stm	r8, {r0, r1}
   20aa0:	mov	r3, #1
   20aa4:	strb	r3, [r8, #4]
   20aa8:	mov	r6, fp
   20aac:	b	20c1c <__assert_fail@plt+0xf724>
   20ab0:	mov	r3, #10
   20ab4:	str	r3, [sl]
   20ab8:	mov	r6, #0
   20abc:	b	20c1c <__assert_fail@plt+0xf724>
   20ac0:	ldr	r2, [sp, #24]
   20ac4:	mov	r1, r8
   20ac8:	mov	r0, r9
   20acc:	bl	17dec <__assert_fail@plt+0x68f4>
   20ad0:	mov	r7, r0
   20ad4:	cmn	r5, #2
   20ad8:	cmnne	r0, #2
   20adc:	beq	20a34 <__assert_fail@plt+0xf53c>
   20ae0:	cmn	r0, #1
   20ae4:	cmpne	r5, r0
   20ae8:	bgt	20b40 <__assert_fail@plt+0xf648>
   20aec:	ldrb	r3, [r8, #4]
   20af0:	cmp	r3, #24
   20af4:	bne	20b40 <__assert_fail@plt+0xf648>
   20af8:	cmn	r7, #1
   20afc:	beq	20b50 <__assert_fail@plt+0xf658>
   20b00:	ldr	r3, [pc, #500]	; 20cfc <__assert_fail@plt+0xf804>
   20b04:	cmp	r7, r3
   20b08:	movle	r3, #0
   20b0c:	movgt	r3, #1
   20b10:	cmp	r3, #0
   20b14:	movne	r3, #15
   20b18:	strne	r3, [sl]
   20b1c:	movne	r6, #0
   20b20:	beq	20b68 <__assert_fail@plt+0xf670>
   20b24:	b	20c1c <__assert_fail@plt+0xf724>
   20b28:	mov	r3, #10
   20b2c:	str	r3, [sl]
   20b30:	mov	r6, #0
   20b34:	b	20c1c <__assert_fail@plt+0xf724>
   20b38:	mov	r5, r0
   20b3c:	b	20aec <__assert_fail@plt+0xf5f4>
   20b40:	mov	r3, #10
   20b44:	str	r3, [sl]
   20b48:	mov	r6, #0
   20b4c:	b	20c1c <__assert_fail@plt+0xf724>
   20b50:	ldr	r3, [pc, #420]	; 20cfc <__assert_fail@plt+0xf804>
   20b54:	cmp	r5, r3
   20b58:	movle	r3, #0
   20b5c:	movgt	r3, #1
   20b60:	b	20b10 <__assert_fail@plt+0xf618>
   20b64:	mov	r7, #1
   20b68:	ldr	r2, [sp, #24]
   20b6c:	mov	r1, r9
   20b70:	mov	r0, r8
   20b74:	bl	17dd0 <__assert_fail@plt+0x68d8>
   20b78:	cmp	fp, #0
   20b7c:	beq	20ca8 <__assert_fail@plt+0xf7b0>
   20b80:	orrs	r3, r5, r7
   20b84:	bne	20d70 <__assert_fail@plt+0xf878>
   20b88:	mov	r2, #0
   20b8c:	ldr	r1, [pc, #332]	; 20ce0 <__assert_fail@plt+0xf7e8>
   20b90:	mov	r0, fp
   20b94:	bl	160e4 <__assert_fail@plt+0x4bec>
   20b98:	mov	r6, #0
   20b9c:	b	20c1c <__assert_fail@plt+0xf724>
   20ba0:	cmp	r5, #1
   20ba4:	ble	20c88 <__assert_fail@plt+0xf790>
   20ba8:	str	fp, [sp, #28]
   20bac:	mov	r4, fp
   20bb0:	mov	r6, #2
   20bb4:	ldr	r1, [sp, #20]
   20bb8:	mov	r0, r4
   20bbc:	bl	16394 <__assert_fail@plt+0x4e9c>
   20bc0:	mov	r4, r0
   20bc4:	mov	r3, #16
   20bc8:	mov	r2, r0
   20bcc:	ldr	r1, [sp, #28]
   20bd0:	ldr	r0, [sp, #20]
   20bd4:	bl	16448 <__assert_fail@plt+0x4f50>
   20bd8:	str	r0, [sp, #28]
   20bdc:	cmp	r0, #0
   20be0:	cmpne	r4, #0
   20be4:	beq	20c10 <__assert_fail@plt+0xf718>
   20be8:	add	r6, r6, #1
   20bec:	cmp	r5, r6
   20bf0:	bge	20bb4 <__assert_fail@plt+0xf6bc>
   20bf4:	cmp	r5, r7
   20bf8:	beq	20cb0 <__assert_fail@plt+0xf7b8>
   20bfc:	ldr	r1, [sp, #20]
   20c00:	mov	r0, r4
   20c04:	bl	16394 <__assert_fail@plt+0x4e9c>
   20c08:	subs	r4, r0, #0
   20c0c:	bne	20d84 <__assert_fail@plt+0xf88c>
   20c10:	mov	r3, #12
   20c14:	str	r3, [sl]
   20c18:	mov	r6, #0
   20c1c:	ldr	r2, [sl]
   20c20:	adds	r3, r2, #0
   20c24:	movne	r3, #1
   20c28:	cmp	r6, #0
   20c2c:	movne	r3, #0
   20c30:	cmp	r3, #0
   20c34:	bne	20cc0 <__assert_fail@plt+0xf7c8>
   20c38:	ldr	r3, [sp, #24]
   20c3c:	tst	r3, #16777216	; 0x1000000
   20c40:	beq	20d08 <__assert_fail@plt+0xf810>
   20c44:	ldrb	r3, [r8, #4]
   20c48:	mov	fp, r6
   20c4c:	cmp	r3, #23
   20c50:	cmpne	r3, #11
   20c54:	bne	20d0c <__assert_fail@plt+0xf814>
   20c58:	cmp	r6, #0
   20c5c:	beq	20c70 <__assert_fail@plt+0xf778>
   20c60:	mov	r2, #0
   20c64:	ldr	r1, [pc, #116]	; 20ce0 <__assert_fail@plt+0xf7e8>
   20c68:	mov	r0, r6
   20c6c:	bl	160e4 <__assert_fail@plt+0x4bec>
   20c70:	mov	r3, #13
   20c74:	str	r3, [sl]
   20c78:	mov	fp, #0
   20c7c:	mov	r0, fp
   20c80:	add	sp, sp, #156	; 0x9c
   20c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c88:	str	fp, [sp, #28]
   20c8c:	mov	r4, fp
   20c90:	b	20bf4 <__assert_fail@plt+0xf6fc>
   20c94:	ldr	r2, [r4, #20]
   20c98:	ldr	r1, [pc, #96]	; 20d00 <__assert_fail@plt+0xf808>
   20c9c:	mov	r0, r4
   20ca0:	bl	160e4 <__assert_fail@plt+0x4bec>
   20ca4:	b	20d90 <__assert_fail@plt+0xf898>
   20ca8:	mov	r6, fp
   20cac:	b	20c1c <__assert_fail@plt+0xf724>
   20cb0:	ldr	r6, [sp, #28]
   20cb4:	b	20c1c <__assert_fail@plt+0xf724>
   20cb8:	mov	r6, fp
   20cbc:	b	20c1c <__assert_fail@plt+0xf724>
   20cc0:	cmp	fp, #0
   20cc4:	beq	20c7c <__assert_fail@plt+0xf784>
   20cc8:	mov	r2, #0
   20ccc:	ldr	r1, [pc, #12]	; 20ce0 <__assert_fail@plt+0xf7e8>
   20cd0:	mov	r0, fp
   20cd4:	bl	160e4 <__assert_fail@plt+0x4bec>
   20cd8:	mov	fp, #0
   20cdc:	b	20c7c <__assert_fail@plt+0xf784>
   20ce0:	andeq	r7, r1, r0, lsl #30
   20ce4:	andeq	r0, r0, pc, lsl #6
   20ce8:	mvnseq	r0, #0
   20cec:	ldrdeq	r5, [r2], -r0
   20cf0:	andeq	r5, r2, r8, lsl #1
   20cf4:			; <UNDEFINED> instruction: 0x000244b8
   20cf8:	muleq	r2, r8, r0
   20cfc:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   20d00:	andeq	r5, r1, r8, lsr sl
   20d04:	addeq	r0, ip, r0, lsl #16
   20d08:	mov	fp, r6
   20d0c:	ldrb	r3, [r8, #4]
   20d10:	cmp	r3, #23
   20d14:	bhi	20c7c <__assert_fail@plt+0xf784>
   20d18:	cmp	r3, #18
   20d1c:	movne	r5, #0
   20d20:	moveq	r5, #1
   20d24:	ldr	r2, [pc, #-40]	; 20d04 <__assert_fail@plt+0xf80c>
   20d28:	lsr	r2, r2, r3
   20d2c:	tst	r2, #1
   20d30:	beq	20c7c <__assert_fail@plt+0xf784>
   20d34:	ldr	r4, [r9, #40]	; 0x28
   20d38:	ldm	r8, {r0, r1}
   20d3c:	add	r2, sp, #120	; 0x78
   20d40:	stm	r2, {r0, r1}
   20d44:	cmp	r3, #23
   20d48:	beq	209f8 <__assert_fail@plt+0xf500>
   20d4c:	cmp	r3, #19
   20d50:	beq	20b64 <__assert_fail@plt+0xf66c>
   20d54:	ldr	r2, [sp, #24]
   20d58:	mov	r1, r9
   20d5c:	mov	r0, r8
   20d60:	bl	17dd0 <__assert_fail@plt+0x68d8>
   20d64:	cmp	fp, #0
   20d68:	beq	20cb8 <__assert_fail@plt+0xf7c0>
   20d6c:	mvn	r7, #0
   20d70:	cmp	r5, #0
   20d74:	movle	r4, fp
   20d78:	movle	r3, #0
   20d7c:	strle	r3, [sp, #28]
   20d80:	bgt	20ba0 <__assert_fail@plt+0xf6a8>
   20d84:	ldrb	r3, [r4, #24]
   20d88:	cmp	r3, #17
   20d8c:	beq	20c94 <__assert_fail@plt+0xf79c>
   20d90:	cmn	r7, #1
   20d94:	moveq	r3, #11
   20d98:	movne	r3, #10
   20d9c:	mov	r2, #0
   20da0:	mov	r1, r4
   20da4:	ldr	r0, [sp, #20]
   20da8:	bl	16448 <__assert_fail@plt+0x4f50>
   20dac:	subs	r6, r0, #0
   20db0:	beq	20c10 <__assert_fail@plt+0xf718>
   20db4:	add	r5, r5, #2
   20db8:	cmp	r7, r5
   20dbc:	blt	20e1c <__assert_fail@plt+0xf924>
   20dc0:	ldr	r1, [sp, #20]
   20dc4:	mov	r0, r4
   20dc8:	bl	16394 <__assert_fail@plt+0x4e9c>
   20dcc:	mov	r4, r0
   20dd0:	mov	r3, #16
   20dd4:	mov	r2, r0
   20dd8:	mov	r1, r6
   20ddc:	ldr	r6, [sp, #20]
   20de0:	mov	r0, r6
   20de4:	bl	16448 <__assert_fail@plt+0x4f50>
   20de8:	mov	r1, r0
   20dec:	cmp	r0, #0
   20df0:	cmpne	r4, #0
   20df4:	beq	20c10 <__assert_fail@plt+0xf718>
   20df8:	mov	r3, #10
   20dfc:	mov	r2, #0
   20e00:	mov	r0, r6
   20e04:	bl	16448 <__assert_fail@plt+0x4f50>
   20e08:	subs	r6, r0, #0
   20e0c:	beq	20c10 <__assert_fail@plt+0xf718>
   20e10:	add	r5, r5, #1
   20e14:	cmp	r7, r5
   20e18:	bge	20dc0 <__assert_fail@plt+0xf8c8>
   20e1c:	ldr	r3, [sp, #28]
   20e20:	cmp	r3, #0
   20e24:	beq	20c38 <__assert_fail@plt+0xf740>
   20e28:	mov	r3, #16
   20e2c:	mov	r2, r6
   20e30:	ldr	r1, [sp, #28]
   20e34:	ldr	r0, [sp, #20]
   20e38:	bl	16448 <__assert_fail@plt+0x4f50>
   20e3c:	mov	r6, r0
   20e40:	b	20c1c <__assert_fail@plt+0xf724>
   20e44:	mov	fp, #0
   20e48:	b	20c7c <__assert_fail@plt+0xf784>
   20e4c:	mov	fp, #0
   20e50:	b	20c7c <__assert_fail@plt+0xf784>
   20e54:	ldr	sl, [sp, #196]	; 0xc4
   20e58:	str	r0, [sl]
   20e5c:	b	20004 <__assert_fail@plt+0xeb0c>
   20e60:	ldr	sl, [sp, #196]	; 0xc4
   20e64:	mov	r3, #11
   20e68:	b	20000 <__assert_fail@plt+0xeb08>
   20e6c:	ldr	sl, [sp, #196]	; 0xc4
   20e70:	mov	r3, #3
   20e74:	b	20000 <__assert_fail@plt+0xeb08>
   20e78:	ldr	sl, [sp, #196]	; 0xc4
   20e7c:	mov	r3, #11
   20e80:	b	20000 <__assert_fail@plt+0xeb08>
   20e84:	mov	r3, #0
   20e88:	ldr	r2, [sp, #196]	; 0xc4
   20e8c:	str	r3, [r2]
   20e90:	b	2029c <__assert_fail@plt+0xeda4>
   20e94:	ldr	sl, [sp, #196]	; 0xc4
   20e98:	mov	r3, #3
   20e9c:	str	r3, [sl]
   20ea0:	b	20004 <__assert_fail@plt+0xeb0c>
   20ea4:	ldr	sl, [sp, #196]	; 0xc4
   20ea8:	mov	r3, #3
   20eac:	str	r3, [sl]
   20eb0:	b	20004 <__assert_fail@plt+0xeb0c>
   20eb4:	mov	r3, #3
   20eb8:	strb	r3, [sp, #124]	; 0x7c
   20ebc:	add	r3, sp, #152	; 0x98
   20ec0:	str	r5, [r3, #-32]!	; 0xffffffe0
   20ec4:	mov	r2, #0
   20ec8:	mov	r1, r2
   20ecc:	ldr	r0, [sp, #20]
   20ed0:	bl	162d4 <__assert_fail@plt+0x4ddc>
   20ed4:	subs	r1, r0, #0
   20ed8:	beq	20ef4 <__assert_fail@plt+0xf9fc>
   20edc:	mov	r3, #10
   20ee0:	mov	r2, fp
   20ee4:	ldr	r0, [sp, #20]
   20ee8:	bl	16448 <__assert_fail@plt+0x4f50>
   20eec:	subs	fp, r0, #0
   20ef0:	bne	206b4 <__assert_fail@plt+0xf1bc>
   20ef4:	mov	r3, #12
   20ef8:	str	r3, [sl]
   20efc:	b	20004 <__assert_fail@plt+0xeb0c>
   20f00:	mov	r4, #0
   20f04:	mov	r5, r4
   20f08:	bl	113a8 <__ctype_b_loc@plt>
   20f0c:	lsl	r7, r4, #1
   20f10:	add	lr, r5, #24
   20f14:	ldr	r3, [sp, #20]
   20f18:	add	lr, r3, lr, lsl #2
   20f1c:	mov	r6, #1
   20f20:	b	20870 <__assert_fail@plt+0xf378>
   20f24:	mov	r4, #128	; 0x80
   20f28:	mov	r5, #4
   20f2c:	b	20f08 <__assert_fail@plt+0xfa10>
   20f30:	cmp	r4, #3
   20f34:	bne	20080 <__assert_fail@plt+0xeb88>
   20f38:	ldr	r0, [sp, #76]	; 0x4c
   20f3c:	bl	113c0 <strlen@plt>
   20f40:	cmp	r0, #1
   20f44:	bls	2006c <__assert_fail@plt+0xeb74>
   20f48:	ldr	sl, [sp, #196]	; 0xc4
   20f4c:	mov	r3, #3
   20f50:	b	20278 <__assert_fail@plt+0xed80>
   20f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f58:	sub	sp, sp, #20
   20f5c:	mov	fp, r0
   20f60:	mov	r9, r1
   20f64:	mov	r7, r2
   20f68:	mov	sl, r3
   20f6c:	ldr	r8, [sp, #56]	; 0x38
   20f70:	ldr	r6, [sp, #60]	; 0x3c
   20f74:	ldr	ip, [r1]
   20f78:	str	ip, [sp, #12]
   20f7c:	str	r6, [sp, #4]
   20f80:	str	r8, [sp]
   20f84:	bl	1fba4 <__assert_fail@plt+0xe6ac>
   20f88:	ldr	r3, [r6]
   20f8c:	mov	r4, r0
   20f90:	adds	r2, r3, #0
   20f94:	movne	r2, #1
   20f98:	cmp	r0, #0
   20f9c:	movne	r2, #0
   20fa0:	cmp	r2, #0
   20fa4:	beq	20ff8 <__assert_fail@plt+0xfb00>
   20fa8:	mov	r4, #0
   20fac:	b	20fcc <__assert_fail@plt+0xfad4>
   20fb0:	cmp	r4, #0
   20fb4:	beq	20fcc <__assert_fail@plt+0xfad4>
   20fb8:	mov	r2, #0
   20fbc:	ldr	r1, [pc, #232]	; 210ac <__assert_fail@plt+0xfbb4>
   20fc0:	mov	r0, r4
   20fc4:	bl	160e4 <__assert_fail@plt+0x4bec>
   20fc8:	mov	r4, #0
   20fcc:	mov	r0, r4
   20fd0:	add	sp, sp, #20
   20fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fd8:	mov	r3, #16
   20fdc:	mov	r2, r5
   20fe0:	mov	r1, r4
   20fe4:	ldr	r0, [sp, #12]
   20fe8:	bl	16448 <__assert_fail@plt+0x4f50>
   20fec:	cmp	r0, #0
   20ff0:	beq	21074 <__assert_fail@plt+0xfb7c>
   20ff4:	mov	r4, r0
   20ff8:	ldrb	r3, [r7, #4]
   20ffc:	and	r2, r3, #247	; 0xf7
   21000:	cmp	r2, #2
   21004:	beq	20fcc <__assert_fail@plt+0xfad4>
   21008:	subs	r3, r3, #9
   2100c:	movne	r3, #1
   21010:	cmp	r8, #0
   21014:	orreq	r3, r3, #1
   21018:	cmp	r3, #0
   2101c:	beq	20fcc <__assert_fail@plt+0xfad4>
   21020:	str	r6, [sp, #4]
   21024:	str	r8, [sp]
   21028:	mov	r3, sl
   2102c:	mov	r2, r7
   21030:	mov	r1, r9
   21034:	mov	r0, fp
   21038:	bl	1fba4 <__assert_fail@plt+0xe6ac>
   2103c:	ldr	r3, [r6]
   21040:	mov	r5, r0
   21044:	adds	r2, r3, #0
   21048:	movne	r2, #1
   2104c:	cmp	r0, #0
   21050:	movne	r2, #0
   21054:	cmp	r2, #0
   21058:	bne	20fb0 <__assert_fail@plt+0xfab8>
   2105c:	cmp	r4, #0
   21060:	cmpne	r5, #0
   21064:	bne	20fd8 <__assert_fail@plt+0xfae0>
   21068:	cmp	r4, #0
   2106c:	moveq	r4, r5
   21070:	b	20ff8 <__assert_fail@plt+0xfb00>
   21074:	mov	fp, r0
   21078:	ldr	r7, [pc, #44]	; 210ac <__assert_fail@plt+0xfbb4>
   2107c:	mov	r2, #0
   21080:	mov	r1, r7
   21084:	mov	r0, r5
   21088:	bl	160e4 <__assert_fail@plt+0x4bec>
   2108c:	mov	r2, #0
   21090:	mov	r1, r7
   21094:	mov	r0, r4
   21098:	bl	160e4 <__assert_fail@plt+0x4bec>
   2109c:	mov	r3, #12
   210a0:	str	r3, [r6]
   210a4:	mov	r4, fp
   210a8:	b	20fcc <__assert_fail@plt+0xfad4>
   210ac:	andeq	r7, r1, r0, lsl #30
   210b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210b4:	sub	sp, sp, #28
   210b8:	str	r0, [sp, #12]
   210bc:	str	r1, [sp, #16]
   210c0:	mov	r4, r2
   210c4:	mov	r6, r3
   210c8:	str	r3, [sp, #20]
   210cc:	ldr	r9, [sp, #64]	; 0x40
   210d0:	ldr	r8, [sp, #68]	; 0x44
   210d4:	ldr	r5, [r1]
   210d8:	ldr	fp, [r5, #84]	; 0x54
   210dc:	str	r8, [sp, #4]
   210e0:	str	r9, [sp]
   210e4:	bl	20f54 <__assert_fail@plt+0xfa5c>
   210e8:	ldr	r3, [r8]
   210ec:	mov	r7, r0
   210f0:	adds	r2, r3, #0
   210f4:	movne	r2, #1
   210f8:	cmp	r0, #0
   210fc:	movne	r2, #0
   21100:	cmp	r2, #0
   21104:	bne	21200 <__assert_fail@plt+0xfd08>
   21108:	orr	sl, r6, #8388608	; 0x800000
   2110c:	b	21178 <__assert_fail@plt+0xfc80>
   21110:	ldr	r6, [r5, #84]	; 0x54
   21114:	str	fp, [r5, #84]	; 0x54
   21118:	str	r8, [sp, #4]
   2111c:	str	r9, [sp]
   21120:	ldr	r3, [sp, #20]
   21124:	mov	r2, r4
   21128:	ldr	r1, [sp, #16]
   2112c:	ldr	r0, [sp, #12]
   21130:	bl	20f54 <__assert_fail@plt+0xfa5c>
   21134:	ldr	r3, [r8]
   21138:	mov	r2, r0
   2113c:	adds	r1, r3, #0
   21140:	movne	r1, #1
   21144:	cmp	r0, #0
   21148:	movne	r1, #0
   2114c:	cmp	r1, #0
   21150:	bne	211c4 <__assert_fail@plt+0xfccc>
   21154:	ldr	r3, [r5, #84]	; 0x54
   21158:	orr	r6, r3, r6
   2115c:	str	r6, [r5, #84]	; 0x54
   21160:	mov	r3, #10
   21164:	mov	r1, r7
   21168:	mov	r0, r5
   2116c:	bl	16448 <__assert_fail@plt+0x4f50>
   21170:	subs	r7, r0, #0
   21174:	beq	211ec <__assert_fail@plt+0xfcf4>
   21178:	ldrb	r3, [r4, #4]
   2117c:	cmp	r3, #10
   21180:	bne	211f4 <__assert_fail@plt+0xfcfc>
   21184:	mov	r2, sl
   21188:	ldr	r1, [sp, #12]
   2118c:	mov	r0, r4
   21190:	bl	17dd0 <__assert_fail@plt+0x68d8>
   21194:	ldrb	r2, [r4, #4]
   21198:	and	r3, r2, #247	; 0xf7
   2119c:	cmp	r3, #2
   211a0:	beq	211e4 <__assert_fail@plt+0xfcec>
   211a4:	clz	r3, r9
   211a8:	lsr	r3, r3, #5
   211ac:	cmp	r2, #9
   211b0:	orrne	r3, r3, #1
   211b4:	cmp	r3, #0
   211b8:	bne	21110 <__assert_fail@plt+0xfc18>
   211bc:	mov	r2, #0
   211c0:	b	21160 <__assert_fail@plt+0xfc68>
   211c4:	cmp	r7, #0
   211c8:	beq	211f4 <__assert_fail@plt+0xfcfc>
   211cc:	mov	r2, #0
   211d0:	ldr	r1, [pc, #48]	; 21208 <__assert_fail@plt+0xfd10>
   211d4:	mov	r0, r7
   211d8:	bl	160e4 <__assert_fail@plt+0x4bec>
   211dc:	mov	r7, #0
   211e0:	b	211f4 <__assert_fail@plt+0xfcfc>
   211e4:	mov	r2, #0
   211e8:	b	21160 <__assert_fail@plt+0xfc68>
   211ec:	mov	r3, #12
   211f0:	str	r3, [r8]
   211f4:	mov	r0, r7
   211f8:	add	sp, sp, #28
   211fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21200:	mov	r7, #0
   21204:	b	211f4 <__assert_fail@plt+0xfcfc>
   21208:	andeq	r7, r1, r0, lsl #30
   2120c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21210:	sub	sp, sp, #124	; 0x7c
   21214:	mov	sl, r0
   21218:	str	r1, [sp, #12]
   2121c:	mov	r9, r2
   21220:	mov	fp, r3
   21224:	mov	r2, #0
   21228:	str	r2, [sp, #116]	; 0x74
   2122c:	ldrb	r3, [r0, #28]
   21230:	str	fp, [r0, #12]
   21234:	str	r2, [r0, #8]
   21238:	str	r2, [r0, #24]
   2123c:	and	r3, r3, #144	; 0x90
   21240:	strb	r3, [r0, #28]
   21244:	ldr	r6, [r0]
   21248:	ldr	r3, [r0, #4]
   2124c:	cmp	r3, #159	; 0x9f
   21250:	bls	214ac <__assert_fail@plt+0xffb4>
   21254:	mov	r2, #160	; 0xa0
   21258:	str	r2, [sl, #8]
   2125c:	mov	r1, #0
   21260:	mov	r0, r6
   21264:	bl	11414 <memset@plt>
   21268:	mov	r3, #31
   2126c:	str	r3, [r6, #64]	; 0x40
   21270:	ldr	r3, [pc, #3044]	; 21e5c <__assert_fail@plt+0x10964>
   21274:	cmp	r9, r3
   21278:	bhi	21d94 <__assert_fail@plt+0x1089c>
   2127c:	add	r0, r9, #1
   21280:	str	r0, [r6, #4]
   21284:	lsl	r0, r0, #3
   21288:	bl	23720 <__assert_fail@plt+0x12228>
   2128c:	str	r0, [r6]
   21290:	cmp	r9, #0
   21294:	beq	214d0 <__assert_fail@plt+0xffd8>
   21298:	mov	r4, #1
   2129c:	lsl	r4, r4, #1
   212a0:	cmp	r9, r4
   212a4:	bcs	2129c <__assert_fail@plt+0xfda4>
   212a8:	mov	r1, r4
   212ac:	mov	r0, #12
   212b0:	bl	236d0 <__assert_fail@plt+0x121d8>
   212b4:	str	r0, [r6, #32]
   212b8:	sub	r4, r4, #1
   212bc:	str	r4, [r6, #68]	; 0x44
   212c0:	bl	11300 <__ctype_get_mb_cur_max@plt>
   212c4:	str	r0, [r6, #92]	; 0x5c
   212c8:	mov	r0, #14
   212cc:	bl	114a4 <nl_langinfo@plt>
   212d0:	ldrb	r3, [r0]
   212d4:	and	r3, r3, #223	; 0xdf
   212d8:	cmp	r3, #85	; 0x55
   212dc:	bne	2132c <__assert_fail@plt+0xfe34>
   212e0:	ldrb	r3, [r0, #1]
   212e4:	and	r3, r3, #223	; 0xdf
   212e8:	cmp	r3, #84	; 0x54
   212ec:	bne	2132c <__assert_fail@plt+0xfe34>
   212f0:	ldrb	r3, [r0, #2]
   212f4:	and	r3, r3, #223	; 0xdf
   212f8:	cmp	r3, #70	; 0x46
   212fc:	bne	2132c <__assert_fail@plt+0xfe34>
   21300:	ldrb	r3, [r0, #3]
   21304:	cmp	r3, #45	; 0x2d
   21308:	moveq	r3, #4
   2130c:	movne	r3, #3
   21310:	ldr	r1, [pc, #2888]	; 21e60 <__assert_fail@plt+0x10968>
   21314:	add	r0, r0, r3
   21318:	bl	111bc <strcmp@plt>
   2131c:	cmp	r0, #0
   21320:	ldrbeq	r3, [r6, #88]	; 0x58
   21324:	orreq	r3, r3, #4
   21328:	strbeq	r3, [r6, #88]	; 0x58
   2132c:	ldrb	r3, [r6, #88]	; 0x58
   21330:	bic	r3, r3, #8
   21334:	strb	r3, [r6, #88]	; 0x58
   21338:	ldr	r3, [r6, #92]	; 0x5c
   2133c:	cmp	r3, #1
   21340:	ble	21358 <__assert_fail@plt+0xfe60>
   21344:	ldrb	r3, [r6, #88]	; 0x58
   21348:	tst	r3, #4
   2134c:	beq	214d8 <__assert_fail@plt+0xffe0>
   21350:	ldr	r3, [pc, #2828]	; 21e64 <__assert_fail@plt+0x1096c>
   21354:	str	r3, [r6, #60]	; 0x3c
   21358:	ldr	r3, [r6]
   2135c:	cmp	r3, #0
   21360:	beq	21d94 <__assert_fail@plt+0x1089c>
   21364:	ldr	r3, [r6, #32]
   21368:	cmp	r3, #0
   2136c:	beq	21d94 <__assert_fail@plt+0x1089c>
   21370:	mov	r3, #0
   21374:	str	r3, [sp, #116]	; 0x74
   21378:	mov	r3, #1
   2137c:	ldr	r2, [pc, #2788]	; 21e68 <__assert_fail@plt+0x10970>
   21380:	cmp	r2, #0
   21384:	moveq	r3, #0
   21388:	mov	r2, #1
   2138c:	ldr	r1, [pc, #2776]	; 21e6c <__assert_fail@plt+0x10974>
   21390:	cmp	r1, #0
   21394:	moveq	r2, #0
   21398:	orr	r3, r3, r2
   2139c:	tst	r3, #255	; 0xff
   213a0:	bne	2155c <__assert_fail@plt+0x10064>
   213a4:	mov	r7, r9
   213a8:	ldr	r5, [sl, #20]
   213ac:	ands	r8, fp, #4194304	; 0x400000
   213b0:	movne	r4, #1
   213b4:	moveq	r4, #0
   213b8:	mov	r2, #84	; 0x54
   213bc:	mov	r1, #0
   213c0:	add	r0, sp, #32
   213c4:	bl	11414 <memset@plt>
   213c8:	ldr	r3, [sp, #12]
   213cc:	str	r3, [sp, #32]
   213d0:	str	r9, [sp, #80]	; 0x50
   213d4:	str	r9, [sp, #76]	; 0x4c
   213d8:	str	r5, [sp, #96]	; 0x60
   213dc:	strb	r4, [sp, #104]	; 0x68
   213e0:	cmp	r5, #0
   213e4:	orrne	r4, r4, #1
   213e8:	strb	r4, [sp, #107]	; 0x6b
   213ec:	ldr	r3, [r6, #92]	; 0x5c
   213f0:	str	r3, [sp, #112]	; 0x70
   213f4:	ldrb	r3, [r6, #88]	; 0x58
   213f8:	lsr	r2, r3, #2
   213fc:	and	r2, r2, #1
   21400:	strb	r2, [sp, #105]	; 0x69
   21404:	lsr	r3, r3, #3
   21408:	and	r3, r3, #1
   2140c:	strb	r3, [sp, #106]	; 0x6a
   21410:	str	r9, [sp, #88]	; 0x58
   21414:	str	r9, [sp, #84]	; 0x54
   21418:	cmp	r9, #0
   2141c:	ble	21434 <__assert_fail@plt+0xff3c>
   21420:	add	r1, r9, #1
   21424:	add	r0, sp, #32
   21428:	bl	161c0 <__assert_fail@plt+0x4cc8>
   2142c:	cmp	r0, #0
   21430:	bne	214a4 <__assert_fail@plt+0xffac>
   21434:	ldrb	r3, [sp, #107]	; 0x6b
   21438:	cmp	r3, #0
   2143c:	ldrne	r3, [sp, #36]	; 0x24
   21440:	ldreq	r3, [sp, #12]
   21444:	str	r3, [sp, #36]	; 0x24
   21448:	cmp	r8, #0
   2144c:	beq	21594 <__assert_fail@plt+0x1009c>
   21450:	ldr	r3, [r6, #92]	; 0x5c
   21454:	cmp	r3, #1
   21458:	ble	21588 <__assert_fail@plt+0x10090>
   2145c:	add	r0, sp, #32
   21460:	bl	16cf0 <__assert_fail@plt+0x57f8>
   21464:	cmp	r0, #0
   21468:	bne	214a4 <__assert_fail@plt+0xffac>
   2146c:	ldr	r3, [sp, #64]	; 0x40
   21470:	cmp	r7, r3
   21474:	ble	215bc <__assert_fail@plt+0x100c4>
   21478:	ldr	r1, [sp, #68]	; 0x44
   2147c:	ldr	r2, [r6, #92]	; 0x5c
   21480:	ldr	r3, [sp, #60]	; 0x3c
   21484:	add	r3, r3, r2
   21488:	cmp	r1, r3
   2148c:	bgt	215bc <__assert_fail@plt+0x100c4>
   21490:	lsl	r1, r1, #1
   21494:	add	r0, sp, #32
   21498:	bl	161c0 <__assert_fail@plt+0x4cc8>
   2149c:	cmp	r0, #0
   214a0:	beq	2145c <__assert_fail@plt+0xff64>
   214a4:	str	r0, [sp, #116]	; 0x74
   214a8:	b	21dfc <__assert_fail@plt+0x10904>
   214ac:	mov	r1, #160	; 0xa0
   214b0:	mov	r0, r6
   214b4:	bl	23750 <__assert_fail@plt+0x12258>
   214b8:	subs	r6, r0, #0
   214bc:	beq	21d8c <__assert_fail@plt+0x10894>
   214c0:	mov	r3, #160	; 0xa0
   214c4:	str	r3, [sl, #4]
   214c8:	str	r6, [sl]
   214cc:	b	21254 <__assert_fail@plt+0xfd5c>
   214d0:	mov	r4, #1
   214d4:	b	212a8 <__assert_fail@plt+0xfdb0>
   214d8:	mov	r1, #1
   214dc:	mov	r0, #32
   214e0:	bl	236d0 <__assert_fail@plt+0x121d8>
   214e4:	str	r0, [r6, #60]	; 0x3c
   214e8:	cmp	r0, #0
   214ec:	beq	21d94 <__assert_fail@plt+0x1089c>
   214f0:	mov	r7, #0
   214f4:	mov	r8, #1
   214f8:	b	21550 <__assert_fail@plt+0x10058>
   214fc:	add	r5, r5, #1
   21500:	add	r4, r4, #1
   21504:	cmp	r5, #32
   21508:	beq	21544 <__assert_fail@plt+0x1004c>
   2150c:	mov	r0, r4
   21510:	bl	11420 <btowc@plt>
   21514:	cmn	r0, #1
   21518:	ldrne	r2, [r6, #60]	; 0x3c
   2151c:	ldrne	r3, [r2, r7]
   21520:	orrne	r3, r3, r8, lsl r5
   21524:	strne	r3, [r2, r7]
   21528:	bics	r3, r4, #127	; 0x7f
   2152c:	bne	214fc <__assert_fail@plt+0x10004>
   21530:	cmp	r0, r4
   21534:	ldrbne	r3, [r6, #88]	; 0x58
   21538:	orrne	r3, r3, #8
   2153c:	strbne	r3, [r6, #88]	; 0x58
   21540:	b	214fc <__assert_fail@plt+0x10004>
   21544:	add	r7, r7, #4
   21548:	cmp	r7, #32
   2154c:	beq	21358 <__assert_fail@plt+0xfe60>
   21550:	lsl	r4, r7, #3
   21554:	mov	r5, #0
   21558:	b	2150c <__assert_fail@plt+0x10014>
   2155c:	mov	r1, #0
   21560:	add	r0, r6, #136	; 0x88
   21564:	bl	1124c <pthread_mutex_init@plt>
   21568:	cmp	r0, #0
   2156c:	movne	r3, #12
   21570:	strne	r3, [sp, #116]	; 0x74
   21574:	bne	21d9c <__assert_fail@plt+0x108a4>
   21578:	ldr	r3, [sp, #116]	; 0x74
   2157c:	cmp	r3, #0
   21580:	beq	213a4 <__assert_fail@plt+0xfeac>
   21584:	b	21d9c <__assert_fail@plt+0x108a4>
   21588:	add	r0, sp, #32
   2158c:	bl	172b0 <__assert_fail@plt+0x5db8>
   21590:	b	215bc <__assert_fail@plt+0x100c4>
   21594:	ldr	r3, [r6, #92]	; 0x5c
   21598:	cmp	r3, #1
   2159c:	bgt	215b4 <__assert_fail@plt+0x100bc>
   215a0:	cmp	r4, #0
   215a4:	beq	21814 <__assert_fail@plt+0x1031c>
   215a8:	add	r0, sp, #32
   215ac:	bl	155e4 <__assert_fail@plt+0x40ec>
   215b0:	b	215bc <__assert_fail@plt+0x100c4>
   215b4:	add	r0, sp, #32
   215b8:	bl	1678c <__assert_fail@plt+0x5294>
   215bc:	mov	r4, #0
   215c0:	str	r4, [sp, #116]	; 0x74
   215c4:	str	r4, [sl, #24]
   215c8:	ldr	r5, [sl]
   215cc:	str	fp, [r5, #128]	; 0x80
   215d0:	orr	r2, fp, #8388608	; 0x800000
   215d4:	add	r1, sp, #32
   215d8:	add	r0, sp, #20
   215dc:	bl	17dd0 <__assert_fail@plt+0x68d8>
   215e0:	add	r3, sp, #116	; 0x74
   215e4:	str	r3, [sp, #4]
   215e8:	str	r4, [sp]
   215ec:	mov	r3, fp
   215f0:	add	r2, sp, #20
   215f4:	mov	r1, sl
   215f8:	add	r0, sp, #32
   215fc:	bl	210b0 <__assert_fail@plt+0xfbb8>
   21600:	mov	r7, r0
   21604:	ldr	r3, [sp, #116]	; 0x74
   21608:	subs	r2, r3, r4
   2160c:	movne	r2, #1
   21610:	cmp	r0, r4
   21614:	movne	r2, #0
   21618:	cmp	r2, r4
   2161c:	bne	21db8 <__assert_fail@plt+0x108c0>
   21620:	mov	r3, #2
   21624:	mov	r2, #0
   21628:	mov	r1, r2
   2162c:	mov	r0, r5
   21630:	bl	16448 <__assert_fail@plt+0x4f50>
   21634:	mov	r4, r0
   21638:	cmp	r7, #0
   2163c:	beq	21654 <__assert_fail@plt+0x1015c>
   21640:	mov	r3, #16
   21644:	mov	r2, r4
   21648:	mov	r1, r7
   2164c:	mov	r0, r5
   21650:	bl	16448 <__assert_fail@plt+0x4f50>
   21654:	cmp	r0, #0
   21658:	cmpne	r4, #0
   2165c:	moveq	r3, #12
   21660:	streq	r3, [sp, #116]	; 0x74
   21664:	beq	21db8 <__assert_fail@plt+0x108c0>
   21668:	str	r0, [r6, #52]	; 0x34
   2166c:	cmp	r0, #0
   21670:	beq	21dfc <__assert_fail@plt+0x10904>
   21674:	ldr	r4, [sl]
   21678:	ldr	r0, [r4, #4]
   2167c:	lsl	r0, r0, #2
   21680:	bl	23720 <__assert_fail@plt+0x12228>
   21684:	str	r0, [r4, #12]
   21688:	ldr	r0, [r4, #4]
   2168c:	lsl	r0, r0, #2
   21690:	bl	23720 <__assert_fail@plt+0x12228>
   21694:	str	r0, [r4, #16]
   21698:	ldr	r0, [r4, #4]
   2169c:	add	r0, r0, r0, lsl #1
   216a0:	lsl	r0, r0, #2
   216a4:	bl	23720 <__assert_fail@plt+0x12228>
   216a8:	str	r0, [r4, #20]
   216ac:	ldr	r0, [r4, #4]
   216b0:	add	r0, r0, r0, lsl #1
   216b4:	lsl	r0, r0, #2
   216b8:	bl	23720 <__assert_fail@plt+0x12228>
   216bc:	str	r0, [r4, #24]
   216c0:	ldr	r3, [r4, #12]
   216c4:	cmp	r3, #0
   216c8:	beq	21dc4 <__assert_fail@plt+0x108cc>
   216cc:	ldr	r3, [r4, #16]
   216d0:	cmp	r3, #0
   216d4:	beq	21df4 <__assert_fail@plt+0x108fc>
   216d8:	ldr	fp, [r4, #20]
   216dc:	cmp	r0, #0
   216e0:	cmpne	fp, #0
   216e4:	moveq	fp, #1
   216e8:	movne	fp, #0
   216ec:	beq	21dcc <__assert_fail@plt+0x108d4>
   216f0:	ldr	r0, [sl, #24]
   216f4:	lsl	r0, r0, #2
   216f8:	bl	23720 <__assert_fail@plt+0x12228>
   216fc:	str	r0, [r4, #132]	; 0x84
   21700:	cmp	r0, #0
   21704:	beq	21774 <__assert_fail@plt+0x1027c>
   21708:	ldr	r3, [sl, #24]
   2170c:	cmp	r3, #0
   21710:	beq	21730 <__assert_fail@plt+0x10238>
   21714:	mov	r3, #0
   21718:	ldr	r2, [r4, #132]	; 0x84
   2171c:	str	r3, [r2, r3, lsl #2]
   21720:	add	r3, r3, #1
   21724:	ldr	r2, [sl, #24]
   21728:	cmp	r3, r2
   2172c:	bcc	21718 <__assert_fail@plt+0x10220>
   21730:	mov	r2, r4
   21734:	ldr	r1, [pc, #1844]	; 21e70 <__assert_fail@plt+0x10978>
   21738:	ldr	r0, [r4, #52]	; 0x34
   2173c:	bl	16158 <__assert_fail@plt+0x4c60>
   21740:	ldr	r1, [sl, #24]
   21744:	cmp	r1, #0
   21748:	beq	21828 <__assert_fail@plt+0x10330>
   2174c:	ldr	r0, [r4, #132]	; 0x84
   21750:	ldr	r3, [r0]
   21754:	cmp	r3, #0
   21758:	bne	21774 <__assert_fail@plt+0x1027c>
   2175c:	add	r3, r3, #1
   21760:	cmp	r1, r3
   21764:	bls	21824 <__assert_fail@plt+0x1032c>
   21768:	ldr	r2, [r0, r3, lsl #2]
   2176c:	cmp	r2, r3
   21770:	beq	2175c <__assert_fail@plt+0x10264>
   21774:	mov	r2, sl
   21778:	ldr	r1, [pc, #1780]	; 21e74 <__assert_fail@plt+0x1097c>
   2177c:	ldr	r0, [r4, #52]	; 0x34
   21780:	bl	160e4 <__assert_fail@plt+0x4bec>
   21784:	cmp	r0, #0
   21788:	bne	21de0 <__assert_fail@plt+0x108e8>
   2178c:	mov	r2, r4
   21790:	ldr	r1, [pc, #1760]	; 21e78 <__assert_fail@plt+0x10980>
   21794:	ldr	r0, [r4, #52]	; 0x34
   21798:	bl	160e4 <__assert_fail@plt+0x4bec>
   2179c:	cmp	r0, #0
   217a0:	bne	21de0 <__assert_fail@plt+0x108e8>
   217a4:	mov	r2, r4
   217a8:	ldr	r1, [pc, #1740]	; 21e7c <__assert_fail@plt+0x10984>
   217ac:	ldr	r0, [r4, #52]	; 0x34
   217b0:	bl	16158 <__assert_fail@plt+0x4c60>
   217b4:	mov	r2, r4
   217b8:	ldr	r1, [pc, #1728]	; 21e80 <__assert_fail@plt+0x10988>
   217bc:	ldr	r0, [r4, #52]	; 0x34
   217c0:	bl	16158 <__assert_fail@plt+0x4c60>
   217c4:	cmp	r0, #0
   217c8:	bne	21de0 <__assert_fail@plt+0x108e8>
   217cc:	mov	r5, fp
   217d0:	mov	r7, #0
   217d4:	add	r9, r7, r7, lsl #1
   217d8:	lsl	r9, r9, #2
   217dc:	ldr	r3, [r4, #24]
   217e0:	add	r3, r3, r9
   217e4:	ldr	r3, [r3, #4]
   217e8:	cmp	r3, #0
   217ec:	beq	2183c <__assert_fail@plt+0x10344>
   217f0:	add	r7, r7, #1
   217f4:	ldr	r3, [r4, #8]
   217f8:	cmp	r3, r7
   217fc:	bne	217d4 <__assert_fail@plt+0x102dc>
   21800:	cmp	r5, #0
   21804:	beq	2187c <__assert_fail@plt+0x10384>
   21808:	mov	r5, fp
   2180c:	mov	r7, #0
   21810:	b	217d4 <__assert_fail@plt+0x102dc>
   21814:	ldr	r3, [sp, #68]	; 0x44
   21818:	str	r3, [sp, #60]	; 0x3c
   2181c:	str	r3, [sp, #64]	; 0x40
   21820:	b	215bc <__assert_fail@plt+0x100c4>
   21824:	bne	21774 <__assert_fail@plt+0x1027c>
   21828:	ldr	r0, [r4, #132]	; 0x84
   2182c:	bl	13340 <__assert_fail@plt+0x1e48>
   21830:	mov	r3, #0
   21834:	str	r3, [r4, #132]	; 0x84
   21838:	b	21774 <__assert_fail@plt+0x1027c>
   2183c:	mov	r3, #1
   21840:	mov	r2, r7
   21844:	mov	r1, r4
   21848:	add	r0, sp, #20
   2184c:	bl	1912c <__assert_fail@plt+0x7c34>
   21850:	cmp	r0, #0
   21854:	bne	21df8 <__assert_fail@plt+0x10900>
   21858:	ldr	r3, [r4, #24]
   2185c:	add	r9, r3, r9
   21860:	ldr	r3, [r9, #4]
   21864:	cmp	r3, #0
   21868:	bne	217f0 <__assert_fail@plt+0x102f8>
   2186c:	ldr	r0, [sp, #28]
   21870:	bl	13340 <__assert_fail@plt+0x1e48>
   21874:	mov	r5, #1
   21878:	b	217f0 <__assert_fail@plt+0x102f8>
   2187c:	ldrb	r3, [sl, #28]
   21880:	tst	r3, #16
   21884:	beq	219f0 <__assert_fail@plt+0x104f8>
   21888:	ldr	r3, [r4, #76]	; 0x4c
   2188c:	cmp	r3, #0
   21890:	beq	21974 <__assert_fail@plt+0x1047c>
   21894:	ldr	r0, [r4, #8]
   21898:	add	r0, r0, r0, lsl #1
   2189c:	lsl	r0, r0, #2
   218a0:	bl	23720 <__assert_fail@plt+0x12228>
   218a4:	str	r0, [r4, #28]
   218a8:	cmp	r0, #0
   218ac:	beq	21dd4 <__assert_fail@plt+0x108dc>
   218b0:	ldr	r3, [r4, #8]
   218b4:	cmp	r3, #0
   218b8:	beq	21de8 <__assert_fail@plt+0x108f0>
   218bc:	mov	r3, #0
   218c0:	mov	r1, r3
   218c4:	mov	r2, r3
   218c8:	ldr	ip, [r4, #28]
   218cc:	add	r0, ip, r3
   218d0:	str	r2, [ip, r3]
   218d4:	str	r2, [r0, #4]
   218d8:	str	r2, [r0, #8]
   218dc:	add	r1, r1, #1
   218e0:	ldr	r0, [r4, #8]
   218e4:	add	r3, r3, #12
   218e8:	cmp	r1, r0
   218ec:	bcc	218c8 <__assert_fail@plt+0x103d0>
   218f0:	cmp	r0, #0
   218f4:	beq	21974 <__assert_fail@plt+0x1047c>
   218f8:	mov	fp, #0
   218fc:	str	r5, [sp, #12]
   21900:	mov	r5, fp
   21904:	ldr	r3, [r4, #24]
   21908:	add	r3, r3, fp
   2190c:	ldr	r9, [r3, #8]
   21910:	ldr	r3, [r3, #4]
   21914:	cmp	r3, #0
   21918:	ble	2195c <__assert_fail@plt+0x10464>
   2191c:	sub	r9, r9, #4
   21920:	mov	r7, #0
   21924:	ldr	r0, [r9, #4]!
   21928:	add	r0, r0, r0, lsl #1
   2192c:	ldr	r3, [r4, #28]
   21930:	mov	r1, r5
   21934:	add	r0, r3, r0, lsl #2
   21938:	bl	16270 <__assert_fail@plt+0x4d78>
   2193c:	cmp	r0, #0
   21940:	beq	21ddc <__assert_fail@plt+0x108e4>
   21944:	add	r7, r7, #1
   21948:	ldr	r3, [r4, #24]
   2194c:	add	r3, r3, fp
   21950:	ldr	r3, [r3, #4]
   21954:	cmp	r7, r3
   21958:	blt	21924 <__assert_fail@plt+0x1042c>
   2195c:	add	r5, r5, #1
   21960:	add	fp, fp, #12
   21964:	ldr	r3, [r4, #8]
   21968:	cmp	r5, r3
   2196c:	bcc	21904 <__assert_fail@plt+0x1040c>
   21970:	ldr	r5, [sp, #12]
   21974:	mov	r3, #0
   21978:	str	r3, [sp, #116]	; 0x74
   2197c:	ldrb	r3, [r6, #88]	; 0x58
   21980:	clz	r8, r8
   21984:	lsr	r8, r8, #5
   21988:	ands	r8, r8, r3, lsr #2
   2198c:	beq	2199c <__assert_fail@plt+0x104a4>
   21990:	ldr	r3, [sl, #20]
   21994:	cmp	r3, #0
   21998:	beq	21a0c <__assert_fail@plt+0x10514>
   2199c:	ldr	r3, [r6, #52]	; 0x34
   219a0:	ldr	r3, [r3, #12]
   219a4:	ldr	r1, [r3, #28]
   219a8:	str	r1, [r6, #72]	; 0x48
   219ac:	add	r1, r1, r1, lsl #1
   219b0:	ldr	r3, [r6, #24]
   219b4:	add	r1, r3, r1, lsl #2
   219b8:	add	r0, sp, #20
   219bc:	bl	16ae8 <__assert_fail@plt+0x55f0>
   219c0:	mov	r5, r0
   219c4:	str	r0, [sp, #16]
   219c8:	cmp	r0, #0
   219cc:	bne	21ca0 <__assert_fail@plt+0x107a8>
   219d0:	ldr	r3, [r6, #76]	; 0x4c
   219d4:	cmp	r3, #0
   219d8:	ble	21c5c <__assert_fail@plt+0x10764>
   219dc:	ldr	lr, [sp, #24]
   219e0:	cmp	lr, #0
   219e4:	ble	21c5c <__assert_fail@plt+0x10764>
   219e8:	mov	r4, #0
   219ec:	b	21c04 <__assert_fail@plt+0x1070c>
   219f0:	ldr	r3, [sl, #24]
   219f4:	cmp	r3, #0
   219f8:	beq	21888 <__assert_fail@plt+0x10390>
   219fc:	ldrb	r3, [r4, #88]	; 0x58
   21a00:	tst	r3, #1
   21a04:	bne	21894 <__assert_fail@plt+0x1039c>
   21a08:	b	21888 <__assert_fail@plt+0x10390>
   21a0c:	ldr	r3, [r6, #8]
   21a10:	cmp	r3, #0
   21a14:	beq	21b8c <__assert_fail@plt+0x10694>
   21a18:	ldr	ip, [r6]
   21a1c:	mov	lr, ip
   21a20:	mov	r0, r3
   21a24:	mov	r3, r5
   21a28:	mov	r2, #0
   21a2c:	b	21a44 <__assert_fail@plt+0x1054c>
   21a30:	mov	r3, r8
   21a34:	add	r2, r2, #1
   21a38:	add	lr, lr, #8
   21a3c:	cmp	r2, r0
   21a40:	beq	21b04 <__assert_fail@plt+0x1060c>
   21a44:	ldrb	r1, [lr, #4]
   21a48:	sub	r1, r1, #1
   21a4c:	cmp	r1, #11
   21a50:	ldrls	pc, [pc, r1, lsl #2]
   21a54:	b	21b00 <__assert_fail@plt+0x10608>
   21a58:	andeq	r1, r2, r0, asr #21
   21a5c:	andeq	r1, r2, r4, lsr sl
   21a60:	andeq	r1, r2, r8, lsl #21
   21a64:	andeq	r1, r2, r4, lsr sl
   21a68:	andeq	r1, r2, r0, lsr sl
   21a6c:	muleq	r2, ip, r9
   21a70:	andeq	r1, r2, r0, lsl #22
   21a74:	andeq	r1, r2, r4, lsr sl
   21a78:	andeq	r1, r2, r4, lsr sl
   21a7c:	andeq	r1, r2, r4, lsr sl
   21a80:	andeq	r1, r2, r4, lsr sl
   21a84:	ldrdeq	r1, [r2], -r0
   21a88:	ldr	r1, [ip, r2, lsl #3]
   21a8c:	ldr	r4, [r1, #16]
   21a90:	cmp	r4, #0
   21a94:	bne	2199c <__assert_fail@plt+0x104a4>
   21a98:	ldr	r4, [r1, #20]
   21a9c:	cmp	r4, #0
   21aa0:	bne	2199c <__assert_fail@plt+0x104a4>
   21aa4:	ldr	r4, [r1, #24]
   21aa8:	cmp	r4, #0
   21aac:	bne	2199c <__assert_fail@plt+0x104a4>
   21ab0:	ldr	r1, [r1, #28]
   21ab4:	cmp	r1, #0
   21ab8:	beq	21a34 <__assert_fail@plt+0x1053c>
   21abc:	b	2199c <__assert_fail@plt+0x104a4>
   21ac0:	ldrb	r1, [ip, r2, lsl #3]
   21ac4:	lsrs	r1, r1, #7
   21ac8:	movne	r5, r8
   21acc:	b	21a34 <__assert_fail@plt+0x1053c>
   21ad0:	ldr	r1, [ip, r2, lsl #3]
   21ad4:	cmp	r1, #32
   21ad8:	beq	21a34 <__assert_fail@plt+0x1053c>
   21adc:	bls	21af4 <__assert_fail@plt+0x105fc>
   21ae0:	cmp	r1, #64	; 0x40
   21ae4:	beq	21a34 <__assert_fail@plt+0x1053c>
   21ae8:	cmp	r1, #128	; 0x80
   21aec:	beq	21a34 <__assert_fail@plt+0x1053c>
   21af0:	b	2199c <__assert_fail@plt+0x104a4>
   21af4:	cmp	r1, #16
   21af8:	beq	21a34 <__assert_fail@plt+0x1053c>
   21afc:	b	2199c <__assert_fail@plt+0x104a4>
   21b00:	bl	114ec <abort@plt>
   21b04:	orr	r5, r5, r3
   21b08:	tst	r5, #255	; 0xff
   21b0c:	beq	21b48 <__assert_fail@plt+0x10650>
   21b10:	mov	r2, #0
   21b14:	mov	r4, #7
   21b18:	lsl	ip, r2, #3
   21b1c:	ldr	lr, [r6]
   21b20:	add	r1, lr, ip
   21b24:	ldrb	r0, [r1, #4]
   21b28:	cmp	r0, #1
   21b2c:	beq	21b74 <__assert_fail@plt+0x1067c>
   21b30:	cmp	r0, #5
   21b34:	strbeq	r4, [r1, #4]
   21b38:	add	r2, r2, #1
   21b3c:	ldr	r1, [r6, #8]
   21b40:	cmp	r2, r1
   21b44:	bcc	21b18 <__assert_fail@plt+0x10620>
   21b48:	mov	r2, #1
   21b4c:	str	r2, [r6, #92]	; 0x5c
   21b50:	ldrb	r2, [r6, #88]	; 0x58
   21b54:	ldr	r1, [r6, #76]	; 0x4c
   21b58:	cmp	r1, #0
   21b5c:	orrgt	r3, r3, #1
   21b60:	and	r3, r3, #1
   21b64:	and	r2, r2, #249	; 0xf9
   21b68:	orr	r3, r2, r3, lsl #1
   21b6c:	strb	r3, [r6, #88]	; 0x58
   21b70:	b	2199c <__assert_fail@plt+0x104a4>
   21b74:	ldrsb	r0, [lr, ip]
   21b78:	cmp	r0, #0
   21b7c:	ldrblt	r0, [r1, #6]
   21b80:	biclt	r0, r0, #32
   21b84:	strblt	r0, [r1, #6]
   21b88:	b	21b38 <__assert_fail@plt+0x10640>
   21b8c:	mov	r3, r5
   21b90:	b	21b48 <__assert_fail@plt+0x10650>
   21b94:	add	r3, r3, #1
   21b98:	cmp	lr, r3
   21b9c:	beq	21bf4 <__assert_fail@plt+0x106fc>
   21ba0:	ldr	r1, [r2, #4]!
   21ba4:	add	r0, ip, r1, lsl #3
   21ba8:	ldrb	r0, [r0, #4]
   21bac:	cmp	r0, #9
   21bb0:	bne	21b94 <__assert_fail@plt+0x1069c>
   21bb4:	ldr	r0, [ip, r1, lsl #3]
   21bb8:	ldr	r1, [r7]
   21bbc:	cmp	r0, r1
   21bc0:	bne	21b94 <__assert_fail@plt+0x1069c>
   21bc4:	cmp	lr, r3
   21bc8:	beq	21bf4 <__assert_fail@plt+0x106fc>
   21bcc:	ldr	r3, [r6, #20]
   21bd0:	add	r8, r8, r8, lsl #1
   21bd4:	add	r8, r3, r8, lsl #2
   21bd8:	ldr	r3, [r8, #8]
   21bdc:	ldr	r7, [r3]
   21be0:	mov	r1, r7
   21be4:	add	r0, sp, #20
   21be8:	bl	156ac <__assert_fail@plt+0x41b4>
   21bec:	cmp	r0, #0
   21bf0:	beq	21c38 <__assert_fail@plt+0x10740>
   21bf4:	add	r4, r4, #1
   21bf8:	ldr	lr, [sp, #24]
   21bfc:	cmp	lr, r4
   21c00:	ble	21c5c <__assert_fail@plt+0x10764>
   21c04:	ldr	r2, [sp, #28]
   21c08:	ldr	ip, [r6]
   21c0c:	ldr	r8, [r2, r4, lsl #2]
   21c10:	add	r7, ip, r8, lsl #3
   21c14:	ldrb	r3, [r7, #4]
   21c18:	cmp	r3, #4
   21c1c:	bne	21bf4 <__assert_fail@plt+0x106fc>
   21c20:	cmp	lr, #0
   21c24:	subgt	r2, r2, #4
   21c28:	movgt	r3, #0
   21c2c:	bgt	21ba0 <__assert_fail@plt+0x106a8>
   21c30:	mov	r3, #0
   21c34:	b	21bc4 <__assert_fail@plt+0x106cc>
   21c38:	add	r7, r7, r7, lsl #1
   21c3c:	ldr	r1, [r6, #24]
   21c40:	add	r1, r1, r7, lsl #2
   21c44:	add	r0, sp, #20
   21c48:	bl	18f84 <__assert_fail@plt+0x7a8c>
   21c4c:	cmp	r0, #0
   21c50:	bne	21d38 <__assert_fail@plt+0x10840>
   21c54:	mov	r4, #0
   21c58:	b	21bf4 <__assert_fail@plt+0x106fc>
   21c5c:	mov	r3, #0
   21c60:	add	r2, sp, #20
   21c64:	mov	r1, r6
   21c68:	add	r0, sp, #16
   21c6c:	bl	182a0 <__assert_fail@plt+0x6da8>
   21c70:	str	r0, [r6, #36]	; 0x24
   21c74:	cmp	r0, #0
   21c78:	ldreq	r5, [sp, #16]
   21c7c:	beq	21ca0 <__assert_fail@plt+0x107a8>
   21c80:	ldrsb	r3, [r0, #52]	; 0x34
   21c84:	cmp	r3, #0
   21c88:	strge	r0, [r6, #48]	; 0x30
   21c8c:	strge	r0, [r6, #44]	; 0x2c
   21c90:	strge	r0, [r6, #40]	; 0x28
   21c94:	blt	21ccc <__assert_fail@plt+0x107d4>
   21c98:	ldr	r0, [sp, #28]
   21c9c:	bl	13340 <__assert_fail@plt+0x1e48>
   21ca0:	str	r5, [sp, #116]	; 0x74
   21ca4:	mov	r0, sl
   21ca8:	bl	1858c <__assert_fail@plt+0x7094>
   21cac:	add	r0, sp, #32
   21cb0:	bl	185d8 <__assert_fail@plt+0x70e0>
   21cb4:	ldr	r3, [sp, #116]	; 0x74
   21cb8:	cmp	r3, #0
   21cbc:	bne	21d40 <__assert_fail@plt+0x10848>
   21cc0:	ldr	r0, [sp, #116]	; 0x74
   21cc4:	add	sp, sp, #124	; 0x7c
   21cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ccc:	mov	r3, #1
   21cd0:	add	r2, sp, #20
   21cd4:	mov	r1, r6
   21cd8:	add	r0, sp, #16
   21cdc:	bl	182a0 <__assert_fail@plt+0x6da8>
   21ce0:	str	r0, [r6, #40]	; 0x28
   21ce4:	mov	r3, #2
   21ce8:	add	r2, sp, #20
   21cec:	mov	r1, r6
   21cf0:	add	r0, sp, #16
   21cf4:	bl	182a0 <__assert_fail@plt+0x6da8>
   21cf8:	str	r0, [r6, #44]	; 0x2c
   21cfc:	mov	r3, #6
   21d00:	add	r2, sp, #20
   21d04:	mov	r1, r6
   21d08:	add	r0, sp, #16
   21d0c:	bl	182a0 <__assert_fail@plt+0x6da8>
   21d10:	str	r0, [r6, #48]	; 0x30
   21d14:	ldr	r3, [r6, #40]	; 0x28
   21d18:	cmp	r3, #0
   21d1c:	beq	21d30 <__assert_fail@plt+0x10838>
   21d20:	ldr	r3, [r6, #44]	; 0x2c
   21d24:	cmp	r0, #0
   21d28:	cmpne	r3, #0
   21d2c:	bne	21c98 <__assert_fail@plt+0x107a0>
   21d30:	ldr	r5, [sp, #16]
   21d34:	b	21ca0 <__assert_fail@plt+0x107a8>
   21d38:	mov	r5, r0
   21d3c:	b	21ca0 <__assert_fail@plt+0x107a8>
   21d40:	mov	r3, #1
   21d44:	ldr	r2, [pc, #288]	; 21e6c <__assert_fail@plt+0x10974>
   21d48:	cmp	r2, #0
   21d4c:	moveq	r3, #0
   21d50:	mov	r2, #1
   21d54:	ldr	r1, [pc, #268]	; 21e68 <__assert_fail@plt+0x10970>
   21d58:	cmp	r1, #0
   21d5c:	moveq	r2, #0
   21d60:	orr	r3, r3, r2
   21d64:	tst	r3, #255	; 0xff
   21d68:	beq	21d74 <__assert_fail@plt+0x1087c>
   21d6c:	add	r0, r6, #136	; 0x88
   21d70:	bl	111e0 <pthread_mutex_destroy@plt>
   21d74:	mov	r0, r6
   21d78:	bl	18608 <__assert_fail@plt+0x7110>
   21d7c:	mov	r3, #0
   21d80:	str	r3, [sl]
   21d84:	str	r3, [sl, #4]
   21d88:	b	21cc0 <__assert_fail@plt+0x107c8>
   21d8c:	mov	r0, #12
   21d90:	b	21cc4 <__assert_fail@plt+0x107cc>
   21d94:	mov	r3, #12
   21d98:	str	r3, [sp, #116]	; 0x74
   21d9c:	mov	r0, r6
   21da0:	bl	18608 <__assert_fail@plt+0x7110>
   21da4:	mov	r3, #0
   21da8:	str	r3, [sl]
   21dac:	str	r3, [sl, #4]
   21db0:	ldr	r0, [sp, #116]	; 0x74
   21db4:	b	21cc4 <__assert_fail@plt+0x107cc>
   21db8:	mov	r3, #0
   21dbc:	str	r3, [r6, #52]	; 0x34
   21dc0:	b	21dfc <__assert_fail@plt+0x10904>
   21dc4:	mov	r0, #12
   21dc8:	b	21de0 <__assert_fail@plt+0x108e8>
   21dcc:	mov	r0, #12
   21dd0:	b	21de0 <__assert_fail@plt+0x108e8>
   21dd4:	mov	r0, #12
   21dd8:	b	21de0 <__assert_fail@plt+0x108e8>
   21ddc:	mov	r0, #12
   21de0:	str	r0, [sp, #116]	; 0x74
   21de4:	b	21dfc <__assert_fail@plt+0x10904>
   21de8:	mov	r3, #0
   21dec:	str	r3, [sp, #116]	; 0x74
   21df0:	b	2197c <__assert_fail@plt+0x10484>
   21df4:	mov	r0, #12
   21df8:	str	r0, [sp, #116]	; 0x74
   21dfc:	mov	r0, sl
   21e00:	bl	1858c <__assert_fail@plt+0x7094>
   21e04:	add	r0, sp, #32
   21e08:	bl	185d8 <__assert_fail@plt+0x70e0>
   21e0c:	mov	r3, #1
   21e10:	ldr	r2, [pc, #80]	; 21e68 <__assert_fail@plt+0x10970>
   21e14:	cmp	r2, #0
   21e18:	moveq	r3, #0
   21e1c:	mov	r2, #1
   21e20:	ldr	r1, [pc, #68]	; 21e6c <__assert_fail@plt+0x10974>
   21e24:	cmp	r1, #0
   21e28:	moveq	r2, #0
   21e2c:	orr	r3, r3, r2
   21e30:	tst	r3, #255	; 0xff
   21e34:	beq	21e40 <__assert_fail@plt+0x10948>
   21e38:	add	r0, r6, #136	; 0x88
   21e3c:	bl	111e0 <pthread_mutex_destroy@plt>
   21e40:	mov	r0, r6
   21e44:	bl	18608 <__assert_fail@plt+0x7110>
   21e48:	mov	r3, #0
   21e4c:	str	r3, [sl]
   21e50:	str	r3, [sl, #4]
   21e54:	ldr	r0, [sp, #116]	; 0x74
   21e58:	b	21cc4 <__assert_fail@plt+0x107cc>
   21e5c:	beq	feacc908 <opterr@@GLIBC_2.4+0xfea96760>
   21e60:	ldrdeq	r5, [r2], -r4
   21e64:	andeq	r4, r2, ip, lsl #29
	...
   21e70:	muleq	r1, r8, r7
   21e74:	andeq	r6, r1, ip, lsl #11
   21e78:	andeq	r8, r1, r0, lsl #2
   21e7c:	andeq	r5, r1, r4, lsr r8
   21e80:	andeq	r8, r1, r4, asr #17
   21e84:	push	{r4, lr}
   21e88:	mov	ip, r2
   21e8c:	ldr	r3, [pc, #96]	; 21ef4 <__assert_fail@plt+0x109fc>
   21e90:	ldr	r3, [r3]
   21e94:	lsr	lr, r3, #21
   21e98:	ldrb	r2, [r2, #28]
   21e9c:	and	lr, lr, #16
   21ea0:	and	r2, r2, #239	; 0xef
   21ea4:	orr	r2, r2, lr
   21ea8:	orr	r2, r2, #128	; 0x80
   21eac:	strb	r2, [ip, #28]
   21eb0:	mov	r2, r1
   21eb4:	mov	r1, r0
   21eb8:	mov	r0, ip
   21ebc:	bl	2120c <__assert_fail@plt+0xfd14>
   21ec0:	cmp	r0, #0
   21ec4:	beq	21eec <__assert_fail@plt+0x109f4>
   21ec8:	ldr	r3, [pc, #40]	; 21ef8 <__assert_fail@plt+0x10a00>
   21ecc:	add	r1, r3, #32
   21ed0:	add	r3, r3, r0, lsl #2
   21ed4:	ldr	r3, [r3, #416]	; 0x1a0
   21ed8:	mov	r2, #5
   21edc:	add	r1, r1, r3
   21ee0:	mov	r0, #0
   21ee4:	bl	11288 <dcgettext@plt>
   21ee8:	pop	{r4, pc}
   21eec:	mov	r0, #0
   21ef0:	pop	{r4, pc}
   21ef4:	strdeq	r6, [r3], -r0
   21ef8:	andeq	r4, r2, ip, lsl #29
   21efc:	ldr	r3, [pc, #12]	; 21f10 <__assert_fail@plt+0x10a18>
   21f00:	ldr	r2, [r3]
   21f04:	str	r0, [r3]
   21f08:	mov	r0, r2
   21f0c:	bx	lr
   21f10:	strdeq	r6, [r3], -r0
   21f14:	push	{r4, r5, r6, lr}
   21f18:	mov	r4, r0
   21f1c:	ldr	r5, [r0]
   21f20:	ldr	r6, [r0, #16]
   21f24:	mov	r2, #256	; 0x100
   21f28:	mov	r1, #0
   21f2c:	mov	r0, r6
   21f30:	bl	11414 <memset@plt>
   21f34:	mov	r2, r6
   21f38:	ldr	r1, [r5, #36]	; 0x24
   21f3c:	mov	r0, r4
   21f40:	bl	1be48 <__assert_fail@plt+0xa950>
   21f44:	ldr	r1, [r5, #40]	; 0x28
   21f48:	ldr	r3, [r5, #36]	; 0x24
   21f4c:	cmp	r3, r1
   21f50:	beq	21f60 <__assert_fail@plt+0x10a68>
   21f54:	mov	r2, r6
   21f58:	mov	r0, r4
   21f5c:	bl	1be48 <__assert_fail@plt+0xa950>
   21f60:	ldr	r1, [r5, #44]	; 0x2c
   21f64:	ldr	r3, [r5, #36]	; 0x24
   21f68:	cmp	r3, r1
   21f6c:	beq	21f7c <__assert_fail@plt+0x10a84>
   21f70:	mov	r2, r6
   21f74:	mov	r0, r4
   21f78:	bl	1be48 <__assert_fail@plt+0xa950>
   21f7c:	ldr	r1, [r5, #48]	; 0x30
   21f80:	ldr	r3, [r5, #36]	; 0x24
   21f84:	cmp	r3, r1
   21f88:	beq	21f98 <__assert_fail@plt+0x10aa0>
   21f8c:	mov	r2, r6
   21f90:	mov	r0, r4
   21f94:	bl	1be48 <__assert_fail@plt+0xa950>
   21f98:	ldrb	r3, [r4, #28]
   21f9c:	orr	r3, r3, #8
   21fa0:	strb	r3, [r4, #28]
   21fa4:	mov	r0, #0
   21fa8:	pop	{r4, r5, r6, pc}
   21fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fb0:	sub	sp, sp, #44	; 0x2c
   21fb4:	ldr	ip, [sp, #80]	; 0x50
   21fb8:	ldr	r4, [sp, #88]	; 0x58
   21fbc:	ldr	fp, [r0]
   21fc0:	add	r7, r3, ip
   21fc4:	cmp	r3, r2
   21fc8:	movle	lr, #0
   21fcc:	movgt	lr, #1
   21fd0:	orrs	lr, lr, r3, lsr #31
   21fd4:	bne	22334 <__assert_fail@plt+0x10e3c>
   21fd8:	cmp	r7, r2
   21fdc:	bgt	2212c <__assert_fail@plt+0x10c34>
   21fe0:	cmp	ip, #0
   21fe4:	cmpge	r3, r7
   21fe8:	bgt	22134 <__assert_fail@plt+0x10c3c>
   21fec:	cmp	r7, #0
   21ff0:	blt	2213c <__assert_fail@plt+0x10c44>
   21ff4:	cmp	r3, r7
   21ff8:	movgt	lr, #0
   21ffc:	movle	lr, #1
   22000:	and	ip, lr, ip, lsr #31
   22004:	cmp	ip, #0
   22008:	movne	r7, #0
   2200c:	mov	r8, #1
   22010:	ldr	ip, [pc, #812]	; 22344 <__assert_fail@plt+0x10e4c>
   22014:	cmp	ip, #0
   22018:	moveq	r8, #0
   2201c:	mov	ip, #1
   22020:	ldr	lr, [pc, #800]	; 22348 <__assert_fail@plt+0x10e50>
   22024:	cmp	lr, #0
   22028:	moveq	ip, #0
   2202c:	str	r3, [sp, #24]
   22030:	str	r2, [sp, #32]
   22034:	str	r1, [sp, #28]
   22038:	mov	r6, r0
   2203c:	orr	r8, r8, ip
   22040:	ands	r8, r8, #255	; 0xff
   22044:	beq	22050 <__assert_fail@plt+0x10b58>
   22048:	add	r0, fp, #136	; 0x88
   2204c:	bl	1121c <pthread_mutex_lock@plt>
   22050:	ldrb	r3, [r6, #28]
   22054:	lsl	r2, r3, #26
   22058:	and	sl, r3, #64	; 0x40
   2205c:	cmp	sl, #0
   22060:	movne	sl, #2
   22064:	moveq	sl, #0
   22068:	orr	sl, sl, r2, lsr #31
   2206c:	ldr	r2, [sp, #24]
   22070:	cmp	r7, r2
   22074:	ble	2208c <__assert_fail@plt+0x10b94>
   22078:	ldr	r2, [r6, #16]
   2207c:	cmp	r2, #0
   22080:	beq	2208c <__assert_fail@plt+0x10b94>
   22084:	tst	r3, #8
   22088:	beq	22144 <__assert_fail@plt+0x10c4c>
   2208c:	ldrb	r3, [r6, #28]
   22090:	tst	r3, #16
   22094:	bne	22178 <__assert_fail@plt+0x10c80>
   22098:	cmp	r4, #0
   2209c:	beq	22184 <__assert_fail@plt+0x10c8c>
   220a0:	and	r3, r3, #6
   220a4:	cmp	r3, #4
   220a8:	beq	22150 <__assert_fail@plt+0x10c58>
   220ac:	ldr	r5, [r6, #24]
   220b0:	add	r5, r5, #1
   220b4:	str	r5, [sp, #36]	; 0x24
   220b8:	lsl	r0, r5, #3
   220bc:	bl	23720 <__assert_fail@plt+0x12228>
   220c0:	subs	r9, r0, #0
   220c4:	beq	2232c <__assert_fail@plt+0x10e34>
   220c8:	str	sl, [sp, #16]
   220cc:	str	r9, [sp, #12]
   220d0:	str	r5, [sp, #8]
   220d4:	ldr	r3, [sp, #84]	; 0x54
   220d8:	str	r3, [sp, #4]
   220dc:	str	r7, [sp]
   220e0:	ldr	r3, [sp, #24]
   220e4:	ldr	r2, [sp, #32]
   220e8:	ldr	r1, [sp, #28]
   220ec:	mov	r0, r6
   220f0:	bl	1e1c0 <__assert_fail@plt+0xccc8>
   220f4:	cmp	r0, #0
   220f8:	beq	2218c <__assert_fail@plt+0x10c94>
   220fc:	cmp	r0, #1
   22100:	mvneq	r4, #0
   22104:	mvnne	r4, #1
   22108:	mov	r0, r9
   2210c:	bl	13340 <__assert_fail@plt+0x1e48>
   22110:	cmp	r8, #0
   22114:	beq	22120 <__assert_fail@plt+0x10c28>
   22118:	add	r0, fp, #136	; 0x88
   2211c:	bl	11168 <pthread_mutex_unlock@plt>
   22120:	mov	r0, r4
   22124:	add	sp, sp, #44	; 0x2c
   22128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2212c:	mov	r7, r2
   22130:	b	2200c <__assert_fail@plt+0x10b14>
   22134:	mov	r7, r2
   22138:	b	2200c <__assert_fail@plt+0x10b14>
   2213c:	mov	r7, #0
   22140:	b	2200c <__assert_fail@plt+0x10b14>
   22144:	mov	r0, r6
   22148:	bl	21f14 <__assert_fail@plt+0x10a1c>
   2214c:	b	2208c <__assert_fail@plt+0x10b94>
   22150:	ldr	r3, [r4]
   22154:	ldr	r2, [r6, #24]
   22158:	cmp	r3, r2
   2215c:	bhi	220ac <__assert_fail@plt+0x10bb4>
   22160:	cmp	r3, #0
   22164:	movgt	r5, r3
   22168:	movle	r5, #1
   2216c:	cmp	r3, #0
   22170:	movle	r4, #0
   22174:	b	220b4 <__assert_fail@plt+0x10bbc>
   22178:	mov	r5, #1
   2217c:	mov	r4, #0
   22180:	b	220b4 <__assert_fail@plt+0x10bbc>
   22184:	mov	r5, #1
   22188:	b	220b4 <__assert_fail@plt+0x10bbc>
   2218c:	cmp	r4, #0
   22190:	beq	22248 <__assert_fail@plt+0x10d50>
   22194:	ldrb	sl, [r6, #28]
   22198:	lsr	sl, sl, #1
   2219c:	add	r7, r5, #1
   221a0:	ands	sl, sl, #3
   221a4:	beq	2225c <__assert_fail@plt+0x10d64>
   221a8:	cmp	sl, #1
   221ac:	movne	sl, #2
   221b0:	beq	222a0 <__assert_fail@plt+0x10da8>
   221b4:	cmp	r5, #0
   221b8:	ble	22304 <__assert_fail@plt+0x10e0c>
   221bc:	mov	r2, r9
   221c0:	ldr	r3, [sp, #36]	; 0x24
   221c4:	lsl	ip, r3, #2
   221c8:	mov	r3, #0
   221cc:	ldr	r0, [r9, r3, lsl #1]
   221d0:	ldr	r1, [r4, #4]
   221d4:	str	r0, [r1, r3]
   221d8:	ldr	r0, [r2, #4]
   221dc:	ldr	r1, [r4, #8]
   221e0:	str	r0, [r1, r3]
   221e4:	add	r3, r3, #4
   221e8:	add	r2, r2, #8
   221ec:	cmp	ip, r3
   221f0:	bne	221cc <__assert_fail@plt+0x10cd4>
   221f4:	ldr	r3, [r4]
   221f8:	cmp	r3, r5
   221fc:	bls	2222c <__assert_fail@plt+0x10d34>
   22200:	lsl	r3, r5, #2
   22204:	mvn	r2, #0
   22208:	ldr	r1, [r4, #4]
   2220c:	ldr	r0, [r4, #8]
   22210:	str	r2, [r0, r3]
   22214:	str	r2, [r1, r3]
   22218:	add	r5, r5, #1
   2221c:	add	r3, r3, #4
   22220:	ldr	r1, [r4]
   22224:	cmp	r5, r1
   22228:	bcc	22208 <__assert_fail@plt+0x10d10>
   2222c:	ldrb	r3, [r6, #28]
   22230:	and	sl, sl, #3
   22234:	bic	r3, r3, #6
   22238:	orr	sl, r3, sl, lsl #1
   2223c:	strb	sl, [r6, #28]
   22240:	tst	sl, #6
   22244:	beq	2233c <__assert_fail@plt+0x10e44>
   22248:	ldrb	r3, [sp, #92]	; 0x5c
   2224c:	cmp	r3, #0
   22250:	bne	2231c <__assert_fail@plt+0x10e24>
   22254:	ldr	r4, [r9]
   22258:	b	22108 <__assert_fail@plt+0x10c10>
   2225c:	lsl	sl, r7, #2
   22260:	mov	r0, sl
   22264:	bl	23720 <__assert_fail@plt+0x12228>
   22268:	str	r0, [r4, #4]
   2226c:	cmp	r0, #0
   22270:	beq	2230c <__assert_fail@plt+0x10e14>
   22274:	mov	r0, sl
   22278:	bl	23720 <__assert_fail@plt+0x12228>
   2227c:	str	r0, [r4, #8]
   22280:	cmp	r0, #0
   22284:	strne	r7, [r4]
   22288:	movne	sl, #1
   2228c:	bne	221b4 <__assert_fail@plt+0x10cbc>
   22290:	ldr	r0, [r4, #4]
   22294:	bl	13340 <__assert_fail@plt+0x1e48>
   22298:	mov	sl, #0
   2229c:	b	2222c <__assert_fail@plt+0x10d34>
   222a0:	ldr	r3, [r4]
   222a4:	cmp	r3, r7
   222a8:	bcs	221b4 <__assert_fail@plt+0x10cbc>
   222ac:	lsl	r3, r7, #2
   222b0:	str	r3, [sp, #32]
   222b4:	mov	r1, r3
   222b8:	ldr	r0, [r4, #4]
   222bc:	bl	23750 <__assert_fail@plt+0x12258>
   222c0:	subs	r2, r0, #0
   222c4:	str	r2, [sp, #28]
   222c8:	beq	22314 <__assert_fail@plt+0x10e1c>
   222cc:	ldr	r1, [sp, #32]
   222d0:	ldr	r0, [r4, #8]
   222d4:	bl	23750 <__assert_fail@plt+0x12258>
   222d8:	cmp	r0, #0
   222dc:	beq	222f4 <__assert_fail@plt+0x10dfc>
   222e0:	ldr	r3, [sp, #28]
   222e4:	str	r3, [r4, #4]
   222e8:	str	r0, [r4, #8]
   222ec:	str	r7, [r4]
   222f0:	b	221b4 <__assert_fail@plt+0x10cbc>
   222f4:	ldr	r0, [sp, #28]
   222f8:	bl	13340 <__assert_fail@plt+0x1e48>
   222fc:	mov	sl, #0
   22300:	b	2222c <__assert_fail@plt+0x10d34>
   22304:	mov	r5, #0
   22308:	b	221f4 <__assert_fail@plt+0x10cfc>
   2230c:	mov	sl, #0
   22310:	b	2222c <__assert_fail@plt+0x10d34>
   22314:	mov	sl, #0
   22318:	b	2222c <__assert_fail@plt+0x10d34>
   2231c:	ldr	r4, [r9, #4]
   22320:	ldr	r3, [sp, #24]
   22324:	sub	r4, r4, r3
   22328:	b	22108 <__assert_fail@plt+0x10c10>
   2232c:	mvn	r4, #1
   22330:	b	22110 <__assert_fail@plt+0x10c18>
   22334:	mvn	r4, #0
   22338:	b	22120 <__assert_fail@plt+0x10c28>
   2233c:	mvn	r4, #1
   22340:	b	22108 <__assert_fail@plt+0x10c10>
	...
   2234c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22350:	sub	sp, sp, #20
   22354:	mov	r5, r2
   22358:	mov	r7, r3
   2235c:	ldr	r4, [sp, #56]	; 0x38
   22360:	ldr	r6, [sp, #72]	; 0x48
   22364:	lsr	r3, r4, #31
   22368:	orr	r3, r3, r2, lsr #31
   2236c:	orrs	r2, r3, r6, lsr #31
   22370:	bne	22478 <__assert_fail@plt+0x10f80>
   22374:	mov	r8, r0
   22378:	mov	r9, r1
   2237c:	cmp	r4, #0
   22380:	blt	223f8 <__assert_fail@plt+0x10f00>
   22384:	cmp	r3, #0
   22388:	bne	2240c <__assert_fail@plt+0x10f14>
   2238c:	mvn	r3, #-2147483648	; 0x80000000
   22390:	sub	r3, r3, r4
   22394:	cmp	r5, r3
   22398:	movle	r3, #0
   2239c:	movgt	r3, #1
   223a0:	cmp	r3, #0
   223a4:	mvnne	r4, #1
   223a8:	bne	2246c <__assert_fail@plt+0x10f74>
   223ac:	add	fp, r5, r4
   223b0:	cmp	r4, #0
   223b4:	ble	22420 <__assert_fail@plt+0x10f28>
   223b8:	cmp	r5, #0
   223bc:	ble	2242c <__assert_fail@plt+0x10f34>
   223c0:	mov	r0, fp
   223c4:	bl	23720 <__assert_fail@plt+0x12228>
   223c8:	subs	sl, r0, #0
   223cc:	beq	22480 <__assert_fail@plt+0x10f88>
   223d0:	mov	r2, r5
   223d4:	mov	r1, r9
   223d8:	mov	r0, sl
   223dc:	bl	11234 <memcpy@plt>
   223e0:	mov	r2, r4
   223e4:	mov	r1, r7
   223e8:	add	r0, sl, r5
   223ec:	bl	11234 <memcpy@plt>
   223f0:	mov	r7, sl
   223f4:	b	22430 <__assert_fail@plt+0x10f38>
   223f8:	rsb	r3, r4, #-2147483648	; 0x80000000
   223fc:	cmp	r5, r3
   22400:	movge	r3, #0
   22404:	movlt	r3, #1
   22408:	b	223a0 <__assert_fail@plt+0x10ea8>
   2240c:	rsb	r3, r5, #-2147483648	; 0x80000000
   22410:	cmp	r4, r3
   22414:	movge	r3, #0
   22418:	movlt	r3, #1
   2241c:	b	223a0 <__assert_fail@plt+0x10ea8>
   22420:	mov	r7, r9
   22424:	mov	sl, #0
   22428:	b	22430 <__assert_fail@plt+0x10f38>
   2242c:	mov	sl, #0
   22430:	ldrb	r3, [sp, #76]	; 0x4c
   22434:	str	r3, [sp, #12]
   22438:	ldr	r3, [sp, #68]	; 0x44
   2243c:	str	r3, [sp, #8]
   22440:	str	r6, [sp, #4]
   22444:	ldr	r3, [sp, #64]	; 0x40
   22448:	str	r3, [sp]
   2244c:	ldr	r3, [sp, #60]	; 0x3c
   22450:	mov	r2, fp
   22454:	mov	r1, r7
   22458:	mov	r0, r8
   2245c:	bl	21fac <__assert_fail@plt+0x10ab4>
   22460:	mov	r4, r0
   22464:	mov	r0, sl
   22468:	bl	13340 <__assert_fail@plt+0x1e48>
   2246c:	mov	r0, r4
   22470:	add	sp, sp, #20
   22474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22478:	mvn	r4, #1
   2247c:	b	2246c <__assert_fail@plt+0x10f74>
   22480:	mvn	r4, #1
   22484:	b	2246c <__assert_fail@plt+0x10f74>
   22488:	push	{r4, r5, r6, r7, r8, lr}
   2248c:	mov	r4, r0
   22490:	mov	r7, r1
   22494:	mov	r5, r2
   22498:	and	r2, r2, #1
   2249c:	ldr	r3, [pc, #228]	; 22588 <__assert_fail@plt+0x11090>
   224a0:	ldr	r6, [pc, #228]	; 2258c <__assert_fail@plt+0x11094>
   224a4:	cmp	r2, #0
   224a8:	moveq	r6, r3
   224ac:	mov	r3, #0
   224b0:	str	r3, [r0]
   224b4:	str	r3, [r0, #4]
   224b8:	str	r3, [r0, #8]
   224bc:	mov	r0, #256	; 0x100
   224c0:	bl	23720 <__assert_fail@plt+0x12228>
   224c4:	str	r0, [r4, #16]
   224c8:	cmp	r0, #0
   224cc:	beq	22580 <__assert_fail@plt+0x11088>
   224d0:	and	r3, r5, #2
   224d4:	cmp	r3, #0
   224d8:	movne	r3, #4194304	; 0x400000
   224dc:	moveq	r3, #0
   224e0:	orr	r6, r6, r3
   224e4:	tst	r5, #4
   224e8:	bicne	r6, r6, #64	; 0x40
   224ec:	orrne	r6, r6, #256	; 0x100
   224f0:	ldrbne	r3, [r4, #28]
   224f4:	orrne	r3, r3, #128	; 0x80
   224f8:	ldrbeq	r3, [r4, #28]
   224fc:	biceq	r3, r3, #128	; 0x80
   22500:	strb	r3, [r4, #28]
   22504:	lsl	r5, r5, #1
   22508:	ldrb	r3, [r4, #28]
   2250c:	bic	r3, r3, #16
   22510:	and	r5, r5, #16
   22514:	orr	r5, r5, r3
   22518:	strb	r5, [r4, #28]
   2251c:	mov	r3, #0
   22520:	str	r3, [r4, #20]
   22524:	mov	r0, r7
   22528:	bl	113c0 <strlen@plt>
   2252c:	mov	r3, r6
   22530:	mov	r2, r0
   22534:	mov	r1, r7
   22538:	mov	r0, r4
   2253c:	bl	2120c <__assert_fail@plt+0xfd14>
   22540:	mov	r5, r0
   22544:	cmp	r0, #16
   22548:	beq	22564 <__assert_fail@plt+0x1106c>
   2254c:	cmp	r0, #0
   22550:	bne	22568 <__assert_fail@plt+0x11070>
   22554:	mov	r0, r4
   22558:	bl	21f14 <__assert_fail@plt+0x10a1c>
   2255c:	mov	r0, #0
   22560:	pop	{r4, r5, r6, r7, r8, pc}
   22564:	mov	r5, #8
   22568:	ldr	r0, [r4, #16]
   2256c:	bl	13340 <__assert_fail@plt+0x1e48>
   22570:	mov	r3, #0
   22574:	str	r3, [r4, #16]
   22578:	mov	r0, r5
   2257c:	pop	{r4, r5, r6, r7, r8, pc}
   22580:	mov	r0, #12
   22584:	pop	{r4, r5, r6, r7, r8, pc}
   22588:	smlabteq	r1, r6, r2, r0
   2258c:	strdeq	fp, [r3], -ip
   22590:	push	{r4, r5, r6, r7, r8, lr}
   22594:	cmp	r0, #16
   22598:	bhi	22600 <__assert_fail@plt+0x11108>
   2259c:	mov	r6, r2
   225a0:	mov	r4, r3
   225a4:	ldr	r3, [pc, #88]	; 22604 <__assert_fail@plt+0x1110c>
   225a8:	add	r1, r3, #32
   225ac:	add	r3, r3, r0, lsl #2
   225b0:	ldr	r3, [r3, #416]	; 0x1a0
   225b4:	mov	r2, #5
   225b8:	add	r1, r1, r3
   225bc:	mov	r0, #0
   225c0:	bl	11288 <dcgettext@plt>
   225c4:	mov	r7, r0
   225c8:	bl	113c0 <strlen@plt>
   225cc:	add	r5, r0, #1
   225d0:	cmp	r4, #0
   225d4:	beq	225f8 <__assert_fail@plt+0x11100>
   225d8:	cmp	r5, r4
   225dc:	subhi	r2, r4, #1
   225e0:	movhi	r3, #0
   225e4:	strbhi	r3, [r6, r2]
   225e8:	movls	r2, r5
   225ec:	mov	r1, r7
   225f0:	mov	r0, r6
   225f4:	bl	11234 <memcpy@plt>
   225f8:	mov	r0, r5
   225fc:	pop	{r4, r5, r6, r7, r8, pc}
   22600:	bl	114ec <abort@plt>
   22604:	andeq	r4, r2, ip, lsl #29
   22608:	push	{r4, r5, r6, lr}
   2260c:	mov	r4, r0
   22610:	ldr	r5, [r0]
   22614:	cmp	r5, #0
   22618:	beq	22658 <__assert_fail@plt+0x11160>
   2261c:	mov	r3, #1
   22620:	ldr	r2, [pc, #88]	; 22680 <__assert_fail@plt+0x11188>
   22624:	cmp	r2, #0
   22628:	moveq	r3, #0
   2262c:	mov	r2, #1
   22630:	ldr	r1, [pc, #76]	; 22684 <__assert_fail@plt+0x1118c>
   22634:	cmp	r1, #0
   22638:	moveq	r2, #0
   2263c:	orr	r3, r3, r2
   22640:	tst	r3, #255	; 0xff
   22644:	beq	22650 <__assert_fail@plt+0x11158>
   22648:	add	r0, r5, #136	; 0x88
   2264c:	bl	111e0 <pthread_mutex_destroy@plt>
   22650:	mov	r0, r5
   22654:	bl	18608 <__assert_fail@plt+0x7110>
   22658:	mov	r5, #0
   2265c:	str	r5, [r4]
   22660:	str	r5, [r4, #4]
   22664:	ldr	r0, [r4, #16]
   22668:	bl	13340 <__assert_fail@plt+0x1e48>
   2266c:	str	r5, [r4, #16]
   22670:	ldr	r0, [r4, #20]
   22674:	bl	13340 <__assert_fail@plt+0x1e48>
   22678:	str	r5, [r4, #20]
   2267c:	pop	{r4, r5, r6, pc}
	...
   22688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2268c:	sub	sp, sp, #36	; 0x24
   22690:	ldr	r4, [sp, #72]	; 0x48
   22694:	bics	ip, r4, #7
   22698:	movne	r0, #2
   2269c:	beq	226a8 <__assert_fail@plt+0x111b0>
   226a0:	add	sp, sp, #36	; 0x24
   226a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226a8:	mov	r7, r3
   226ac:	mov	r8, r2
   226b0:	str	r1, [sp, #28]
   226b4:	mov	r5, r0
   226b8:	ands	fp, r4, #4
   226bc:	beq	2275c <__assert_fail@plt+0x11264>
   226c0:	ldr	fp, [r3]
   226c4:	ldr	r9, [r3, #4]
   226c8:	ldr	sl, [r5]
   226cc:	mov	r6, #1
   226d0:	ldr	r3, [pc, #148]	; 2276c <__assert_fail@plt+0x11274>
   226d4:	cmp	r3, #0
   226d8:	moveq	r6, #0
   226dc:	mov	r3, #1
   226e0:	ldr	r2, [pc, #136]	; 22770 <__assert_fail@plt+0x11278>
   226e4:	cmp	r2, #0
   226e8:	moveq	r3, #0
   226ec:	orr	r6, r6, r3
   226f0:	ands	r6, r6, #255	; 0xff
   226f4:	beq	22700 <__assert_fail@plt+0x11208>
   226f8:	add	r0, sl, #136	; 0x88
   226fc:	bl	1121c <pthread_mutex_lock@plt>
   22700:	ldrb	r3, [r5, #28]
   22704:	tst	r3, #16
   22708:	str	r4, [sp, #16]
   2270c:	movne	r3, #0
   22710:	strne	r3, [sp, #12]
   22714:	strne	r3, [sp, #8]
   22718:	streq	r7, [sp, #12]
   2271c:	streq	r8, [sp, #8]
   22720:	str	r9, [sp, #4]
   22724:	str	r9, [sp]
   22728:	mov	r3, fp
   2272c:	mov	r2, r9
   22730:	ldr	r1, [sp, #28]
   22734:	mov	r0, r5
   22738:	bl	1e1c0 <__assert_fail@plt+0xccc8>
   2273c:	mov	r4, r0
   22740:	cmp	r6, #0
   22744:	beq	22750 <__assert_fail@plt+0x11258>
   22748:	add	r0, sl, #136	; 0x88
   2274c:	bl	11168 <pthread_mutex_unlock@plt>
   22750:	adds	r0, r4, #0
   22754:	movne	r0, #1
   22758:	b	226a0 <__assert_fail@plt+0x111a8>
   2275c:	ldr	r0, [sp, #28]
   22760:	bl	113c0 <strlen@plt>
   22764:	mov	r9, r0
   22768:	b	226c8 <__assert_fail@plt+0x111d0>
	...
   22774:	push	{lr}		; (str lr, [sp, #-4]!)
   22778:	sub	sp, sp, #20
   2277c:	mov	ip, #1
   22780:	str	ip, [sp, #12]
   22784:	ldr	ip, [sp, #24]
   22788:	str	ip, [sp, #8]
   2278c:	str	r2, [sp, #4]
   22790:	mov	ip, #0
   22794:	str	ip, [sp]
   22798:	bl	21fac <__assert_fail@plt+0x10ab4>
   2279c:	add	sp, sp, #20
   227a0:	pop	{pc}		; (ldr pc, [sp], #4)
   227a4:	push	{lr}		; (str lr, [sp, #-4]!)
   227a8:	sub	sp, sp, #20
   227ac:	mov	ip, #0
   227b0:	str	ip, [sp, #12]
   227b4:	ldr	ip, [sp, #28]
   227b8:	str	ip, [sp, #8]
   227bc:	str	r2, [sp, #4]
   227c0:	ldr	ip, [sp, #24]
   227c4:	str	ip, [sp]
   227c8:	bl	21fac <__assert_fail@plt+0x10ab4>
   227cc:	add	sp, sp, #20
   227d0:	pop	{pc}		; (ldr pc, [sp], #4)
   227d4:	push	{lr}		; (str lr, [sp, #-4]!)
   227d8:	sub	sp, sp, #28
   227dc:	mov	ip, #1
   227e0:	str	ip, [sp, #20]
   227e4:	ldr	ip, [sp, #44]	; 0x2c
   227e8:	str	ip, [sp, #16]
   227ec:	ldr	ip, [sp, #40]	; 0x28
   227f0:	str	ip, [sp, #12]
   227f4:	mov	ip, #0
   227f8:	str	ip, [sp, #8]
   227fc:	ldr	ip, [sp, #36]	; 0x24
   22800:	str	ip, [sp, #4]
   22804:	ldr	ip, [sp, #32]
   22808:	str	ip, [sp]
   2280c:	bl	2234c <__assert_fail@plt+0x10e54>
   22810:	add	sp, sp, #28
   22814:	pop	{pc}		; (ldr pc, [sp], #4)
   22818:	push	{lr}		; (str lr, [sp, #-4]!)
   2281c:	sub	sp, sp, #28
   22820:	mov	ip, #0
   22824:	str	ip, [sp, #20]
   22828:	ldr	ip, [sp, #48]	; 0x30
   2282c:	str	ip, [sp, #16]
   22830:	ldr	ip, [sp, #44]	; 0x2c
   22834:	str	ip, [sp, #12]
   22838:	ldr	ip, [sp, #40]	; 0x28
   2283c:	str	ip, [sp, #8]
   22840:	ldr	ip, [sp, #36]	; 0x24
   22844:	str	ip, [sp, #4]
   22848:	ldr	ip, [sp, #32]
   2284c:	str	ip, [sp]
   22850:	bl	2234c <__assert_fail@plt+0x10e54>
   22854:	add	sp, sp, #28
   22858:	pop	{pc}		; (ldr pc, [sp], #4)
   2285c:	cmp	r2, #0
   22860:	bne	22884 <__assert_fail@plt+0x1138c>
   22864:	ldrb	r3, [r0, #28]
   22868:	bic	r3, r3, #6
   2286c:	strb	r3, [r0, #28]
   22870:	mov	r3, #0
   22874:	str	r3, [r1]
   22878:	str	r3, [r1, #8]
   2287c:	str	r3, [r1, #4]
   22880:	bx	lr
   22884:	ldrb	ip, [r0, #28]
   22888:	bic	ip, ip, #4
   2288c:	orr	ip, ip, #2
   22890:	strb	ip, [r0, #28]
   22894:	str	r2, [r1]
   22898:	str	r3, [r1, #4]
   2289c:	ldr	r3, [sp]
   228a0:	str	r3, [r1, #8]
   228a4:	bx	lr
   228a8:	push	{r4, r5, r6, lr}
   228ac:	mov	r5, r0
   228b0:	mov	r4, r1
   228b4:	mov	r2, r1
   228b8:	mov	r1, #0
   228bc:	bl	11450 <memchr@plt>
   228c0:	cmp	r0, #0
   228c4:	subne	r0, r0, r5
   228c8:	addne	r0, r0, #1
   228cc:	moveq	r0, r4
   228d0:	pop	{r4, r5, r6, pc}
   228d4:	push	{r4, lr}
   228d8:	ldrb	lr, [r0]
   228dc:	ldrb	ip, [r1]
   228e0:	cmp	lr, #45	; 0x2d
   228e4:	beq	2295c <__assert_fail@plt+0x11464>
   228e8:	cmp	ip, #45	; 0x2d
   228ec:	beq	22a70 <__assert_fail@plt+0x11578>
   228f0:	cmp	lr, #48	; 0x30
   228f4:	bne	22904 <__assert_fail@plt+0x1140c>
   228f8:	ldrb	lr, [r0, #1]!
   228fc:	cmp	lr, #48	; 0x30
   22900:	beq	228f8 <__assert_fail@plt+0x11400>
   22904:	cmp	ip, #48	; 0x30
   22908:	bne	22918 <__assert_fail@plt+0x11420>
   2290c:	ldrb	ip, [r1, #1]!
   22910:	cmp	ip, #48	; 0x30
   22914:	beq	2290c <__assert_fail@plt+0x11414>
   22918:	cmp	ip, lr
   2291c:	bne	22ab4 <__assert_fail@plt+0x115bc>
   22920:	sub	r3, ip, #48	; 0x30
   22924:	cmp	r3, #9
   22928:	bhi	22ab0 <__assert_fail@plt+0x115b8>
   2292c:	ldrb	lr, [r0, #1]!
   22930:	ldrb	ip, [r1, #1]!
   22934:	cmp	lr, ip
   22938:	bne	22ab4 <__assert_fail@plt+0x115bc>
   2293c:	sub	r3, lr, #48	; 0x30
   22940:	cmp	r3, #9
   22944:	bls	2292c <__assert_fail@plt+0x11434>
   22948:	mov	r3, lr
   2294c:	mov	lr, ip
   22950:	mov	ip, r3
   22954:	mov	r4, #0
   22958:	b	22adc <__assert_fail@plt+0x115e4>
   2295c:	ldrb	lr, [r0, #1]!
   22960:	cmp	lr, #48	; 0x30
   22964:	beq	2295c <__assert_fail@plt+0x11464>
   22968:	cmp	ip, #45	; 0x2d
   2296c:	beq	229a4 <__assert_fail@plt+0x114ac>
   22970:	sub	r0, lr, #48	; 0x30
   22974:	cmp	r0, #9
   22978:	bls	22b30 <__assert_fail@plt+0x11638>
   2297c:	cmp	ip, #48	; 0x30
   22980:	bne	22990 <__assert_fail@plt+0x11498>
   22984:	ldrb	ip, [r1, #1]!
   22988:	cmp	ip, #48	; 0x30
   2298c:	beq	22984 <__assert_fail@plt+0x1148c>
   22990:	sub	ip, ip, #48	; 0x30
   22994:	cmp	ip, #9
   22998:	movhi	r0, #0
   2299c:	mvnls	r0, #0
   229a0:	pop	{r4, pc}
   229a4:	ldrb	r4, [r1, #1]!
   229a8:	cmp	r4, #48	; 0x30
   229ac:	beq	229a4 <__assert_fail@plt+0x114ac>
   229b0:	cmp	lr, r4
   229b4:	bne	229f4 <__assert_fail@plt+0x114fc>
   229b8:	sub	r3, lr, #48	; 0x30
   229bc:	cmp	r3, #9
   229c0:	bhi	229f4 <__assert_fail@plt+0x114fc>
   229c4:	ldrb	lr, [r0, #1]!
   229c8:	ldrb	r4, [r1, #1]!
   229cc:	cmp	lr, r4
   229d0:	bne	229f4 <__assert_fail@plt+0x114fc>
   229d4:	sub	r3, lr, #48	; 0x30
   229d8:	cmp	r3, #9
   229dc:	bls	229c4 <__assert_fail@plt+0x114cc>
   229e0:	mov	r3, lr
   229e4:	mov	lr, r4
   229e8:	mov	r4, r3
   229ec:	mov	r3, #0
   229f0:	b	22a1c <__assert_fail@plt+0x11524>
   229f4:	sub	r3, lr, #48	; 0x30
   229f8:	cmp	r3, #9
   229fc:	bhi	22a58 <__assert_fail@plt+0x11560>
   22a00:	mov	r2, r0
   22a04:	add	r2, r2, #1
   22a08:	sub	r3, r2, r0
   22a0c:	ldrb	ip, [r2]
   22a10:	sub	ip, ip, #48	; 0x30
   22a14:	cmp	ip, #9
   22a18:	bls	22a04 <__assert_fail@plt+0x1150c>
   22a1c:	sub	r2, r4, #48	; 0x30
   22a20:	cmp	r2, #9
   22a24:	bhi	22b50 <__assert_fail@plt+0x11658>
   22a28:	mov	r2, r1
   22a2c:	add	r2, r2, #1
   22a30:	sub	ip, r2, r1
   22a34:	ldrb	r0, [r2]
   22a38:	sub	r0, r0, #48	; 0x30
   22a3c:	cmp	r0, #9
   22a40:	bls	22a2c <__assert_fail@plt+0x11534>
   22a44:	cmp	r3, ip
   22a48:	beq	22a60 <__assert_fail@plt+0x11568>
   22a4c:	movcc	r0, #1
   22a50:	mvncs	r0, #0
   22a54:	pop	{r4, pc}
   22a58:	mov	r3, #0
   22a5c:	b	22a1c <__assert_fail@plt+0x11524>
   22a60:	cmp	ip, #0
   22a64:	beq	22b38 <__assert_fail@plt+0x11640>
   22a68:	sub	r0, r4, lr
   22a6c:	pop	{r4, pc}
   22a70:	ldrb	r3, [r1, #1]!
   22a74:	cmp	r3, #48	; 0x30
   22a78:	beq	22a70 <__assert_fail@plt+0x11578>
   22a7c:	sub	r3, r3, #48	; 0x30
   22a80:	cmp	r3, #9
   22a84:	bls	22b40 <__assert_fail@plt+0x11648>
   22a88:	cmp	lr, #48	; 0x30
   22a8c:	bne	22a9c <__assert_fail@plt+0x115a4>
   22a90:	ldrb	lr, [r0, #1]!
   22a94:	cmp	lr, #48	; 0x30
   22a98:	beq	22a90 <__assert_fail@plt+0x11598>
   22a9c:	sub	lr, lr, #48	; 0x30
   22aa0:	cmp	lr, #9
   22aa4:	movhi	r0, #0
   22aa8:	movls	r0, #1
   22aac:	pop	{r4, pc}
   22ab0:	mov	lr, ip
   22ab4:	sub	r3, lr, #48	; 0x30
   22ab8:	cmp	r3, #9
   22abc:	bhi	22b18 <__assert_fail@plt+0x11620>
   22ac0:	mov	r3, r0
   22ac4:	add	r3, r3, #1
   22ac8:	sub	r4, r3, r0
   22acc:	ldrb	r2, [r3]
   22ad0:	sub	r2, r2, #48	; 0x30
   22ad4:	cmp	r2, #9
   22ad8:	bls	22ac4 <__assert_fail@plt+0x115cc>
   22adc:	sub	r3, ip, #48	; 0x30
   22ae0:	cmp	r3, #9
   22ae4:	bhi	22b5c <__assert_fail@plt+0x11664>
   22ae8:	mov	r3, r1
   22aec:	add	r3, r3, #1
   22af0:	sub	r0, r3, r1
   22af4:	ldrb	r2, [r3]
   22af8:	sub	r2, r2, #48	; 0x30
   22afc:	cmp	r2, #9
   22b00:	bls	22aec <__assert_fail@plt+0x115f4>
   22b04:	cmp	r0, r4
   22b08:	beq	22b20 <__assert_fail@plt+0x11628>
   22b0c:	mvnhi	r0, #0
   22b10:	movls	r0, #1
   22b14:	pop	{r4, pc}
   22b18:	mov	r4, #0
   22b1c:	b	22adc <__assert_fail@plt+0x115e4>
   22b20:	cmp	r4, #0
   22b24:	beq	22b48 <__assert_fail@plt+0x11650>
   22b28:	sub	r0, lr, ip
   22b2c:	pop	{r4, pc}
   22b30:	mvn	r0, #0
   22b34:	pop	{r4, pc}
   22b38:	mov	r0, #0
   22b3c:	pop	{r4, pc}
   22b40:	mov	r0, #1
   22b44:	pop	{r4, pc}
   22b48:	mov	r0, #0
   22b4c:	pop	{r4, pc}
   22b50:	adds	r0, r3, #0
   22b54:	mvnne	r0, #0
   22b58:	pop	{r4, pc}
   22b5c:	adds	r0, r4, #0
   22b60:	movne	r0, #1
   22b64:	pop	{r4, pc}
   22b68:	push	{r4, r5, r6, lr}
   22b6c:	sub	sp, sp, #32
   22b70:	mov	r4, r0
   22b74:	ldr	r5, [sp, #48]	; 0x30
   22b78:	ldr	r6, [sp, #52]	; 0x34
   22b7c:	cmp	r1, #0
   22b80:	beq	22c38 <__assert_fail@plt+0x11740>
   22b84:	str	r3, [sp, #4]
   22b88:	str	r2, [sp]
   22b8c:	mov	r3, r1
   22b90:	ldr	r2, [pc, #940]	; 22f44 <__assert_fail@plt+0x11a4c>
   22b94:	mov	r1, #1
   22b98:	bl	11444 <__fprintf_chk@plt>
   22b9c:	mov	r2, #5
   22ba0:	ldr	r1, [pc, #928]	; 22f48 <__assert_fail@plt+0x11a50>
   22ba4:	mov	r0, #0
   22ba8:	bl	11288 <dcgettext@plt>
   22bac:	ldr	r3, [pc, #920]	; 22f4c <__assert_fail@plt+0x11a54>
   22bb0:	str	r3, [sp]
   22bb4:	mov	r3, r0
   22bb8:	ldr	r2, [pc, #912]	; 22f50 <__assert_fail@plt+0x11a58>
   22bbc:	mov	r1, #1
   22bc0:	mov	r0, r4
   22bc4:	bl	11444 <__fprintf_chk@plt>
   22bc8:	mov	r1, r4
   22bcc:	mov	r0, #10
   22bd0:	bl	1127c <fputc_unlocked@plt>
   22bd4:	mov	r2, #5
   22bd8:	ldr	r1, [pc, #884]	; 22f54 <__assert_fail@plt+0x11a5c>
   22bdc:	mov	r0, #0
   22be0:	bl	11288 <dcgettext@plt>
   22be4:	ldr	r3, [pc, #876]	; 22f58 <__assert_fail@plt+0x11a60>
   22be8:	mov	r2, r0
   22bec:	mov	r1, #1
   22bf0:	mov	r0, r4
   22bf4:	bl	11444 <__fprintf_chk@plt>
   22bf8:	mov	r1, r4
   22bfc:	mov	r0, #10
   22c00:	bl	1127c <fputc_unlocked@plt>
   22c04:	cmp	r6, #9
   22c08:	ldrls	pc, [pc, r6, lsl #2]
   22c0c:	b	22edc <__assert_fail@plt+0x119e4>
   22c10:	andeq	r2, r2, r4, ror ip
   22c14:	andeq	r2, r2, r0, asr ip
   22c18:	andeq	r2, r2, ip, ror ip
   22c1c:	andeq	r2, r2, ip, lsr #25
   22c20:	andeq	r2, r2, r4, ror #25
   22c24:	andeq	r2, r2, r4, lsr #26
   22c28:	andeq	r2, r2, ip, ror #26
   22c2c:			; <UNDEFINED> instruction: 0x00022dbc
   22c30:	andeq	r2, r2, r4, lsl lr
   22c34:	andeq	r2, r2, r4, ror lr
   22c38:	str	r3, [sp]
   22c3c:	mov	r3, r2
   22c40:	ldr	r2, [pc, #788]	; 22f5c <__assert_fail@plt+0x11a64>
   22c44:	mov	r1, #1
   22c48:	bl	11444 <__fprintf_chk@plt>
   22c4c:	b	22b9c <__assert_fail@plt+0x116a4>
   22c50:	mov	r2, #5
   22c54:	ldr	r1, [pc, #772]	; 22f60 <__assert_fail@plt+0x11a68>
   22c58:	mov	r0, #0
   22c5c:	bl	11288 <dcgettext@plt>
   22c60:	ldr	r3, [r5]
   22c64:	mov	r2, r0
   22c68:	mov	r1, #1
   22c6c:	mov	r0, r4
   22c70:	bl	11444 <__fprintf_chk@plt>
   22c74:	add	sp, sp, #32
   22c78:	pop	{r4, r5, r6, pc}
   22c7c:	mov	r2, #5
   22c80:	ldr	r1, [pc, #732]	; 22f64 <__assert_fail@plt+0x11a6c>
   22c84:	mov	r0, #0
   22c88:	bl	11288 <dcgettext@plt>
   22c8c:	ldr	r3, [r5]
   22c90:	ldr	r2, [r5, #4]
   22c94:	str	r2, [sp]
   22c98:	mov	r2, r0
   22c9c:	mov	r1, #1
   22ca0:	mov	r0, r4
   22ca4:	bl	11444 <__fprintf_chk@plt>
   22ca8:	b	22c74 <__assert_fail@plt+0x1177c>
   22cac:	mov	r2, #5
   22cb0:	ldr	r1, [pc, #688]	; 22f68 <__assert_fail@plt+0x11a70>
   22cb4:	mov	r0, #0
   22cb8:	bl	11288 <dcgettext@plt>
   22cbc:	ldr	r3, [r5]
   22cc0:	ldr	r2, [r5, #8]
   22cc4:	str	r2, [sp, #4]
   22cc8:	ldr	r2, [r5, #4]
   22ccc:	str	r2, [sp]
   22cd0:	mov	r2, r0
   22cd4:	mov	r1, #1
   22cd8:	mov	r0, r4
   22cdc:	bl	11444 <__fprintf_chk@plt>
   22ce0:	b	22c74 <__assert_fail@plt+0x1177c>
   22ce4:	mov	r2, #5
   22ce8:	ldr	r1, [pc, #636]	; 22f6c <__assert_fail@plt+0x11a74>
   22cec:	mov	r0, #0
   22cf0:	bl	11288 <dcgettext@plt>
   22cf4:	ldr	r3, [r5]
   22cf8:	ldr	r2, [r5, #12]
   22cfc:	str	r2, [sp, #8]
   22d00:	ldr	r2, [r5, #8]
   22d04:	str	r2, [sp, #4]
   22d08:	ldr	r2, [r5, #4]
   22d0c:	str	r2, [sp]
   22d10:	mov	r2, r0
   22d14:	mov	r1, #1
   22d18:	mov	r0, r4
   22d1c:	bl	11444 <__fprintf_chk@plt>
   22d20:	b	22c74 <__assert_fail@plt+0x1177c>
   22d24:	mov	r2, #5
   22d28:	ldr	r1, [pc, #576]	; 22f70 <__assert_fail@plt+0x11a78>
   22d2c:	mov	r0, #0
   22d30:	bl	11288 <dcgettext@plt>
   22d34:	ldr	r3, [r5]
   22d38:	ldr	r2, [r5, #16]
   22d3c:	str	r2, [sp, #12]
   22d40:	ldr	r2, [r5, #12]
   22d44:	str	r2, [sp, #8]
   22d48:	ldr	r2, [r5, #8]
   22d4c:	str	r2, [sp, #4]
   22d50:	ldr	r2, [r5, #4]
   22d54:	str	r2, [sp]
   22d58:	mov	r2, r0
   22d5c:	mov	r1, #1
   22d60:	mov	r0, r4
   22d64:	bl	11444 <__fprintf_chk@plt>
   22d68:	b	22c74 <__assert_fail@plt+0x1177c>
   22d6c:	mov	r2, #5
   22d70:	ldr	r1, [pc, #508]	; 22f74 <__assert_fail@plt+0x11a7c>
   22d74:	mov	r0, #0
   22d78:	bl	11288 <dcgettext@plt>
   22d7c:	ldr	r3, [r5]
   22d80:	ldr	r2, [r5, #20]
   22d84:	str	r2, [sp, #16]
   22d88:	ldr	r2, [r5, #16]
   22d8c:	str	r2, [sp, #12]
   22d90:	ldr	r2, [r5, #12]
   22d94:	str	r2, [sp, #8]
   22d98:	ldr	r2, [r5, #8]
   22d9c:	str	r2, [sp, #4]
   22da0:	ldr	r2, [r5, #4]
   22da4:	str	r2, [sp]
   22da8:	mov	r2, r0
   22dac:	mov	r1, #1
   22db0:	mov	r0, r4
   22db4:	bl	11444 <__fprintf_chk@plt>
   22db8:	b	22c74 <__assert_fail@plt+0x1177c>
   22dbc:	mov	r2, #5
   22dc0:	ldr	r1, [pc, #432]	; 22f78 <__assert_fail@plt+0x11a80>
   22dc4:	mov	r0, #0
   22dc8:	bl	11288 <dcgettext@plt>
   22dcc:	ldr	r3, [r5]
   22dd0:	ldr	r2, [r5, #24]
   22dd4:	str	r2, [sp, #20]
   22dd8:	ldr	r2, [r5, #20]
   22ddc:	str	r2, [sp, #16]
   22de0:	ldr	r2, [r5, #16]
   22de4:	str	r2, [sp, #12]
   22de8:	ldr	r2, [r5, #12]
   22dec:	str	r2, [sp, #8]
   22df0:	ldr	r2, [r5, #8]
   22df4:	str	r2, [sp, #4]
   22df8:	ldr	r2, [r5, #4]
   22dfc:	str	r2, [sp]
   22e00:	mov	r2, r0
   22e04:	mov	r1, #1
   22e08:	mov	r0, r4
   22e0c:	bl	11444 <__fprintf_chk@plt>
   22e10:	b	22c74 <__assert_fail@plt+0x1177c>
   22e14:	mov	r2, #5
   22e18:	ldr	r1, [pc, #348]	; 22f7c <__assert_fail@plt+0x11a84>
   22e1c:	mov	r0, #0
   22e20:	bl	11288 <dcgettext@plt>
   22e24:	ldr	r3, [r5]
   22e28:	ldr	r2, [r5, #28]
   22e2c:	str	r2, [sp, #24]
   22e30:	ldr	r2, [r5, #24]
   22e34:	str	r2, [sp, #20]
   22e38:	ldr	r2, [r5, #20]
   22e3c:	str	r2, [sp, #16]
   22e40:	ldr	r2, [r5, #16]
   22e44:	str	r2, [sp, #12]
   22e48:	ldr	r2, [r5, #12]
   22e4c:	str	r2, [sp, #8]
   22e50:	ldr	r2, [r5, #8]
   22e54:	str	r2, [sp, #4]
   22e58:	ldr	r2, [r5, #4]
   22e5c:	str	r2, [sp]
   22e60:	mov	r2, r0
   22e64:	mov	r1, #1
   22e68:	mov	r0, r4
   22e6c:	bl	11444 <__fprintf_chk@plt>
   22e70:	b	22c74 <__assert_fail@plt+0x1177c>
   22e74:	mov	r2, #5
   22e78:	ldr	r1, [pc, #256]	; 22f80 <__assert_fail@plt+0x11a88>
   22e7c:	mov	r0, #0
   22e80:	bl	11288 <dcgettext@plt>
   22e84:	ldr	r3, [r5]
   22e88:	ldr	r2, [r5, #32]
   22e8c:	str	r2, [sp, #28]
   22e90:	ldr	r2, [r5, #28]
   22e94:	str	r2, [sp, #24]
   22e98:	ldr	r2, [r5, #24]
   22e9c:	str	r2, [sp, #20]
   22ea0:	ldr	r2, [r5, #20]
   22ea4:	str	r2, [sp, #16]
   22ea8:	ldr	r2, [r5, #16]
   22eac:	str	r2, [sp, #12]
   22eb0:	ldr	r2, [r5, #12]
   22eb4:	str	r2, [sp, #8]
   22eb8:	ldr	r2, [r5, #8]
   22ebc:	str	r2, [sp, #4]
   22ec0:	ldr	r2, [r5, #4]
   22ec4:	str	r2, [sp]
   22ec8:	mov	r2, r0
   22ecc:	mov	r1, #1
   22ed0:	mov	r0, r4
   22ed4:	bl	11444 <__fprintf_chk@plt>
   22ed8:	b	22c74 <__assert_fail@plt+0x1177c>
   22edc:	mov	r2, #5
   22ee0:	ldr	r1, [pc, #156]	; 22f84 <__assert_fail@plt+0x11a8c>
   22ee4:	mov	r0, #0
   22ee8:	bl	11288 <dcgettext@plt>
   22eec:	ldr	r3, [r5]
   22ef0:	ldr	r2, [r5, #32]
   22ef4:	str	r2, [sp, #28]
   22ef8:	ldr	r2, [r5, #28]
   22efc:	str	r2, [sp, #24]
   22f00:	ldr	r2, [r5, #24]
   22f04:	str	r2, [sp, #20]
   22f08:	ldr	r2, [r5, #20]
   22f0c:	str	r2, [sp, #16]
   22f10:	ldr	r2, [r5, #16]
   22f14:	str	r2, [sp, #12]
   22f18:	ldr	r2, [r5, #12]
   22f1c:	str	r2, [sp, #8]
   22f20:	ldr	r2, [r5, #8]
   22f24:	str	r2, [sp, #4]
   22f28:	ldr	r2, [r5, #4]
   22f2c:	str	r2, [sp]
   22f30:	mov	r2, r0
   22f34:	mov	r1, #1
   22f38:	mov	r0, r4
   22f3c:	bl	11444 <__fprintf_chk@plt>
   22f40:	b	22c74 <__assert_fail@plt+0x1177c>
   22f44:	ldrdeq	r5, [r2], -r8
   22f48:	andeq	r5, r2, ip, ror #1
   22f4c:	andeq	r0, r0, r6, ror #15
   22f50:	andeq	r5, r2, r4, asr #7
   22f54:	strdeq	r5, [r2], -r0
   22f58:	muleq	r2, ip, r1
   22f5c:	andeq	r5, r2, r4, ror #1
   22f60:	andeq	r5, r2, r0, asr #3
   22f64:	ldrdeq	r5, [r2], -r0
   22f68:	andeq	r5, r2, r8, ror #3
   22f6c:	andeq	r5, r2, r4, lsl #4
   22f70:	andeq	r5, r2, r4, lsr #4
   22f74:	andeq	r5, r2, r8, asr #4
   22f78:	andeq	r5, r2, r0, ror r2
   22f7c:	muleq	r2, ip, r2
   22f80:	andeq	r5, r2, ip, asr #5
   22f84:	andeq	r5, r2, r0, lsl #6
   22f88:	push	{r4, r5, lr}
   22f8c:	sub	sp, sp, #12
   22f90:	ldr	r5, [sp, #24]
   22f94:	ldr	ip, [r5]
   22f98:	cmp	ip, #0
   22f9c:	beq	22fcc <__assert_fail@plt+0x11ad4>
   22fa0:	mov	lr, r5
   22fa4:	mov	ip, #0
   22fa8:	add	ip, ip, #1
   22fac:	ldr	r4, [lr, #4]!
   22fb0:	cmp	r4, #0
   22fb4:	bne	22fa8 <__assert_fail@plt+0x11ab0>
   22fb8:	str	ip, [sp, #4]
   22fbc:	str	r5, [sp]
   22fc0:	bl	22b68 <__assert_fail@plt+0x11670>
   22fc4:	add	sp, sp, #12
   22fc8:	pop	{r4, r5, pc}
   22fcc:	mov	ip, #0
   22fd0:	b	22fb8 <__assert_fail@plt+0x11ac0>
   22fd4:	push	{r4, r5, lr}
   22fd8:	sub	sp, sp, #52	; 0x34
   22fdc:	ldr	r4, [sp, #64]	; 0x40
   22fe0:	sub	r4, r4, #4
   22fe4:	add	r5, sp, #4
   22fe8:	mov	ip, #0
   22fec:	ldr	lr, [r4, #4]!
   22ff0:	str	lr, [r5, #4]!
   22ff4:	cmp	lr, #0
   22ff8:	beq	23008 <__assert_fail@plt+0x11b10>
   22ffc:	add	ip, ip, #1
   23000:	cmp	ip, #10
   23004:	bne	22fec <__assert_fail@plt+0x11af4>
   23008:	str	ip, [sp, #4]
   2300c:	add	ip, sp, #8
   23010:	str	ip, [sp]
   23014:	bl	22b68 <__assert_fail@plt+0x11670>
   23018:	add	sp, sp, #52	; 0x34
   2301c:	pop	{r4, r5, pc}
   23020:	push	{r3}		; (str r3, [sp, #-4]!)
   23024:	push	{lr}		; (str lr, [sp, #-4]!)
   23028:	sub	sp, sp, #16
   2302c:	add	r3, sp, #24
   23030:	str	r3, [sp, #12]
   23034:	str	r3, [sp]
   23038:	ldr	r3, [sp, #20]
   2303c:	bl	22fd4 <__assert_fail@plt+0x11adc>
   23040:	add	sp, sp, #16
   23044:	pop	{lr}		; (ldr lr, [sp], #4)
   23048:	add	sp, sp, #4
   2304c:	bx	lr
   23050:	push	{r4, lr}
   23054:	ldr	r3, [pc, #112]	; 230cc <__assert_fail@plt+0x11bd4>
   23058:	ldr	r1, [r3]
   2305c:	mov	r0, #10
   23060:	bl	1127c <fputc_unlocked@plt>
   23064:	mov	r2, #5
   23068:	ldr	r1, [pc, #96]	; 230d0 <__assert_fail@plt+0x11bd8>
   2306c:	mov	r0, #0
   23070:	bl	11288 <dcgettext@plt>
   23074:	ldr	r2, [pc, #88]	; 230d4 <__assert_fail@plt+0x11bdc>
   23078:	mov	r1, r0
   2307c:	mov	r0, #1
   23080:	bl	1142c <__printf_chk@plt>
   23084:	mov	r2, #5
   23088:	ldr	r1, [pc, #72]	; 230d8 <__assert_fail@plt+0x11be0>
   2308c:	mov	r0, #0
   23090:	bl	11288 <dcgettext@plt>
   23094:	ldr	r3, [pc, #64]	; 230dc <__assert_fail@plt+0x11be4>
   23098:	ldr	r2, [pc, #64]	; 230e0 <__assert_fail@plt+0x11be8>
   2309c:	mov	r1, r0
   230a0:	mov	r0, #1
   230a4:	bl	1142c <__printf_chk@plt>
   230a8:	mov	r2, #5
   230ac:	ldr	r1, [pc, #48]	; 230e4 <__assert_fail@plt+0x11bec>
   230b0:	mov	r0, #0
   230b4:	bl	11288 <dcgettext@plt>
   230b8:	ldr	r2, [pc, #40]	; 230e8 <__assert_fail@plt+0x11bf0>
   230bc:	mov	r1, r0
   230c0:	mov	r0, #1
   230c4:	bl	1142c <__printf_chk@plt>
   230c8:	pop	{r4, pc}
   230cc:	andeq	r6, r3, r4, lsr #3
   230d0:	andeq	r5, r2, ip, lsr r3
   230d4:	andeq	r5, r2, r0, asr r3
   230d8:	andeq	r5, r2, r8, ror #6
   230dc:	andeq	r4, r2, r4, asr r9
   230e0:	andeq	r4, r2, ip, ror r9
   230e4:	andeq	r5, r2, ip, ror r3
   230e8:	andeq	r5, r2, r4, lsr #7
   230ec:	push	{r4, lr}
   230f0:	bl	23720 <__assert_fail@plt+0x12228>
   230f4:	cmp	r0, #0
   230f8:	popne	{r4, pc}
   230fc:	bl	23690 <__assert_fail@plt+0x12198>
   23100:	push	{r4, lr}
   23104:	bl	23720 <__assert_fail@plt+0x12228>
   23108:	cmp	r0, #0
   2310c:	popne	{r4, pc}
   23110:	bl	23690 <__assert_fail@plt+0x12198>
   23114:	push	{r4, lr}
   23118:	bl	230ec <__assert_fail@plt+0x11bf4>
   2311c:	pop	{r4, pc}
   23120:	push	{r4, r5, r6, lr}
   23124:	mov	r5, r0
   23128:	mov	r4, r1
   2312c:	bl	23750 <__assert_fail@plt+0x12258>
   23130:	cmp	r0, #0
   23134:	popne	{r4, r5, r6, pc}
   23138:	adds	r4, r4, #0
   2313c:	movne	r4, #1
   23140:	cmp	r5, #0
   23144:	orreq	r4, r4, #1
   23148:	cmp	r4, #0
   2314c:	popeq	{r4, r5, r6, pc}
   23150:	bl	23690 <__assert_fail@plt+0x12198>
   23154:	push	{r4, lr}
   23158:	cmp	r1, #0
   2315c:	orreq	r1, r1, #1
   23160:	bl	23750 <__assert_fail@plt+0x12258>
   23164:	cmp	r0, #0
   23168:	popne	{r4, pc}
   2316c:	bl	23690 <__assert_fail@plt+0x12198>
   23170:	push	{r4, r5, r6, lr}
   23174:	mov	r6, r0
   23178:	mov	r5, r1
   2317c:	mov	r4, r2
   23180:	bl	23b2c <__assert_fail@plt+0x12634>
   23184:	cmp	r0, #0
   23188:	popne	{r4, r5, r6, pc}
   2318c:	cmp	r6, #0
   23190:	beq	231a0 <__assert_fail@plt+0x11ca8>
   23194:	cmp	r5, #0
   23198:	cmpne	r4, #0
   2319c:	popeq	{r4, r5, r6, pc}
   231a0:	bl	23690 <__assert_fail@plt+0x12198>
   231a4:	push	{r4, lr}
   231a8:	bl	23170 <__assert_fail@plt+0x11c78>
   231ac:	pop	{r4, pc}
   231b0:	push	{r4, lr}
   231b4:	mov	ip, r1
   231b8:	mov	r3, r2
   231bc:	cmp	r2, #0
   231c0:	cmpne	r1, #0
   231c4:	moveq	r3, #1
   231c8:	moveq	ip, r3
   231cc:	mov	r2, r3
   231d0:	mov	r1, ip
   231d4:	bl	23b2c <__assert_fail@plt+0x12634>
   231d8:	cmp	r0, #0
   231dc:	popne	{r4, pc}
   231e0:	bl	23690 <__assert_fail@plt+0x12198>
   231e4:	push	{r4, lr}
   231e8:	mov	r2, r1
   231ec:	mov	r1, r0
   231f0:	mov	r0, #0
   231f4:	bl	23170 <__assert_fail@plt+0x11c78>
   231f8:	pop	{r4, pc}
   231fc:	push	{r4, lr}
   23200:	mov	r2, r1
   23204:	mov	r1, r0
   23208:	mov	r0, #0
   2320c:	bl	231b0 <__assert_fail@plt+0x11cb8>
   23210:	pop	{r4, pc}
   23214:	push	{r4, r5, r6, r7, r8, lr}
   23218:	mov	r5, r1
   2321c:	mov	r6, r2
   23220:	ldr	r4, [r1]
   23224:	subs	r7, r0, #0
   23228:	beq	23244 <__assert_fail@plt+0x11d4c>
   2322c:	lsr	r2, r4, #1
   23230:	add	r3, r2, #1
   23234:	mvn	r3, r3
   23238:	cmp	r4, r3
   2323c:	bls	23268 <__assert_fail@plt+0x11d70>
   23240:	bl	23690 <__assert_fail@plt+0x12198>
   23244:	cmp	r4, #0
   23248:	bne	23270 <__assert_fail@plt+0x11d78>
   2324c:	mov	r1, r2
   23250:	mov	r0, #64	; 0x40
   23254:	bl	23c20 <__assert_fail@plt+0x12728>
   23258:	cmp	r0, #0
   2325c:	movne	r4, r0
   23260:	addeq	r4, r0, #1
   23264:	b	23270 <__assert_fail@plt+0x11d78>
   23268:	add	r4, r4, #1
   2326c:	add	r4, r4, r2
   23270:	mov	r2, r6
   23274:	mov	r1, r4
   23278:	mov	r0, r7
   2327c:	bl	23170 <__assert_fail@plt+0x11c78>
   23280:	str	r4, [r5]
   23284:	pop	{r4, r5, r6, r7, r8, pc}
   23288:	push	{r4, lr}
   2328c:	mov	r2, #1
   23290:	bl	23214 <__assert_fail@plt+0x11d1c>
   23294:	pop	{r4, pc}
   23298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2329c:	sub	sp, sp, #12
   232a0:	mov	fp, r0
   232a4:	mov	sl, r1
   232a8:	mov	r9, r2
   232ac:	mov	r7, r3
   232b0:	ldr	r6, [sp, #48]	; 0x30
   232b4:	ldr	r5, [r1]
   232b8:	asrs	r4, r5, #1
   232bc:	bmi	23418 <__assert_fail@plt+0x11f20>
   232c0:	cmp	r5, #0
   232c4:	blt	2342c <__assert_fail@plt+0x11f34>
   232c8:	mvn	r3, #-2147483648	; 0x80000000
   232cc:	sub	r3, r3, r4
   232d0:	cmp	r5, r3
   232d4:	movle	r3, #0
   232d8:	movgt	r3, #1
   232dc:	cmp	r3, #0
   232e0:	addeq	r4, r4, r5
   232e4:	mvnne	r4, #-2147483648	; 0x80000000
   232e8:	mvn	r8, r7
   232ec:	lsr	r8, r8, #31
   232f0:	cmp	r7, r4
   232f4:	movge	r3, #0
   232f8:	andlt	r3, r8, #1
   232fc:	cmp	r3, #0
   23300:	movne	r4, r7
   23304:	cmp	r6, #0
   23308:	blt	23440 <__assert_fail@plt+0x11f48>
   2330c:	cmp	r6, #0
   23310:	beq	234ec <__assert_fail@plt+0x11ff4>
   23314:	cmp	r4, #0
   23318:	blt	2349c <__assert_fail@plt+0x11fa4>
   2331c:	mov	r1, r6
   23320:	mvn	r0, #-2147483648	; 0x80000000
   23324:	bl	23e2c <__assert_fail@plt+0x12934>
   23328:	cmp	r0, r4
   2332c:	movge	r0, #0
   23330:	movlt	r0, #1
   23334:	cmp	r0, #0
   23338:	mvnne	r3, #-2147483648	; 0x80000000
   2333c:	strne	r3, [sp, #4]
   23340:	beq	234d4 <__assert_fail@plt+0x11fdc>
   23344:	mov	r1, r6
   23348:	ldr	r0, [sp, #4]
   2334c:	bl	23e2c <__assert_fail@plt+0x12934>
   23350:	mov	r4, r0
   23354:	mov	r1, r6
   23358:	ldr	r0, [sp, #4]
   2335c:	bl	2404c <__assert_fail@plt+0x12b54>
   23360:	ldr	r3, [sp, #4]
   23364:	sub	r1, r3, r1
   23368:	cmp	fp, #0
   2336c:	moveq	r3, #0
   23370:	streq	r3, [sl]
   23374:	sub	r3, r4, r5
   23378:	cmp	r3, r9
   2337c:	bge	23404 <__assert_fail@plt+0x11f0c>
   23380:	cmp	r9, #0
   23384:	blt	234f8 <__assert_fail@plt+0x12000>
   23388:	cmp	r5, #0
   2338c:	blt	2350c <__assert_fail@plt+0x12014>
   23390:	mvn	r3, #-2147483648	; 0x80000000
   23394:	sub	r3, r3, r9
   23398:	cmp	r5, r3
   2339c:	movle	r3, #0
   233a0:	movgt	r3, #1
   233a4:	cmp	r3, #0
   233a8:	bne	235b4 <__assert_fail@plt+0x120bc>
   233ac:	add	r5, r5, r9
   233b0:	mov	r4, r5
   233b4:	cmp	r7, r5
   233b8:	movge	r7, #0
   233bc:	andlt	r7, r8, #1
   233c0:	cmp	r7, #0
   233c4:	bne	235b4 <__assert_fail@plt+0x120bc>
   233c8:	cmp	r6, #0
   233cc:	blt	23520 <__assert_fail@plt+0x12028>
   233d0:	cmp	r6, #0
   233d4:	beq	23400 <__assert_fail@plt+0x11f08>
   233d8:	cmp	r5, #0
   233dc:	blt	2357c <__assert_fail@plt+0x12084>
   233e0:	mov	r1, r6
   233e4:	mvn	r0, #-2147483648	; 0x80000000
   233e8:	bl	23e2c <__assert_fail@plt+0x12934>
   233ec:	cmp	r5, r0
   233f0:	movle	r0, #0
   233f4:	movgt	r0, #1
   233f8:	cmp	r0, #0
   233fc:	bne	235b4 <__assert_fail@plt+0x120bc>
   23400:	mul	r1, r5, r6
   23404:	mov	r0, fp
   23408:	bl	23120 <__assert_fail@plt+0x11c28>
   2340c:	str	r4, [sl]
   23410:	add	sp, sp, #12
   23414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23418:	rsb	r3, r4, #-2147483648	; 0x80000000
   2341c:	cmp	r5, r3
   23420:	movge	r3, #0
   23424:	movlt	r3, #1
   23428:	b	232dc <__assert_fail@plt+0x11de4>
   2342c:	rsb	r3, r5, #-2147483648	; 0x80000000
   23430:	cmp	r4, r3
   23434:	movge	r3, #0
   23438:	movlt	r3, #1
   2343c:	b	232dc <__assert_fail@plt+0x11de4>
   23440:	cmp	r4, #0
   23444:	blt	2346c <__assert_fail@plt+0x11f74>
   23448:	cmn	r6, #1
   2344c:	beq	23488 <__assert_fail@plt+0x11f90>
   23450:	mov	r1, r6
   23454:	mov	r0, #-2147483648	; 0x80000000
   23458:	bl	23e2c <__assert_fail@plt+0x12934>
   2345c:	cmp	r0, r4
   23460:	movge	r0, #0
   23464:	movlt	r0, #1
   23468:	b	23334 <__assert_fail@plt+0x11e3c>
   2346c:	mov	r1, r6
   23470:	mvn	r0, #-2147483648	; 0x80000000
   23474:	bl	23e2c <__assert_fail@plt+0x12934>
   23478:	cmp	r0, r4
   2347c:	movle	r0, #0
   23480:	movgt	r0, #1
   23484:	b	23334 <__assert_fail@plt+0x11e3c>
   23488:	add	r0, r4, #-2147483648	; 0x80000000
   2348c:	cmp	r0, #0
   23490:	movle	r0, #0
   23494:	movgt	r0, #1
   23498:	b	23334 <__assert_fail@plt+0x11e3c>
   2349c:	cmn	r4, #1
   234a0:	beq	234c0 <__assert_fail@plt+0x11fc8>
   234a4:	mov	r1, r4
   234a8:	mov	r0, #-2147483648	; 0x80000000
   234ac:	bl	23e2c <__assert_fail@plt+0x12934>
   234b0:	cmp	r6, r0
   234b4:	movle	r0, #0
   234b8:	movgt	r0, #1
   234bc:	b	23334 <__assert_fail@plt+0x11e3c>
   234c0:	add	r0, r6, #-2147483648	; 0x80000000
   234c4:	cmp	r0, #0
   234c8:	movle	r0, #0
   234cc:	movgt	r0, #1
   234d0:	b	23334 <__assert_fail@plt+0x11e3c>
   234d4:	mul	r1, r6, r4
   234d8:	cmp	r1, #63	; 0x3f
   234dc:	movle	r3, #64	; 0x40
   234e0:	strle	r3, [sp, #4]
   234e4:	bgt	23368 <__assert_fail@plt+0x11e70>
   234e8:	b	23344 <__assert_fail@plt+0x11e4c>
   234ec:	mov	r3, #64	; 0x40
   234f0:	str	r3, [sp, #4]
   234f4:	b	23344 <__assert_fail@plt+0x11e4c>
   234f8:	rsb	r3, r9, #-2147483648	; 0x80000000
   234fc:	cmp	r5, r3
   23500:	movge	r3, #0
   23504:	movlt	r3, #1
   23508:	b	233a4 <__assert_fail@plt+0x11eac>
   2350c:	rsb	r3, r5, #-2147483648	; 0x80000000
   23510:	cmp	r9, r3
   23514:	movge	r3, #0
   23518:	movlt	r3, #1
   2351c:	b	233a4 <__assert_fail@plt+0x11eac>
   23520:	cmp	r5, #0
   23524:	blt	2354c <__assert_fail@plt+0x12054>
   23528:	cmn	r6, #1
   2352c:	beq	23568 <__assert_fail@plt+0x12070>
   23530:	mov	r1, r6
   23534:	mov	r0, #-2147483648	; 0x80000000
   23538:	bl	23e2c <__assert_fail@plt+0x12934>
   2353c:	cmp	r5, r0
   23540:	movle	r0, #0
   23544:	movgt	r0, #1
   23548:	b	233f8 <__assert_fail@plt+0x11f00>
   2354c:	mov	r1, r6
   23550:	mvn	r0, #-2147483648	; 0x80000000
   23554:	bl	23e2c <__assert_fail@plt+0x12934>
   23558:	cmp	r5, r0
   2355c:	movge	r0, #0
   23560:	movlt	r0, #1
   23564:	b	233f8 <__assert_fail@plt+0x11f00>
   23568:	add	r0, r5, #-2147483648	; 0x80000000
   2356c:	cmp	r0, #0
   23570:	movle	r0, #0
   23574:	movgt	r0, #1
   23578:	b	233f8 <__assert_fail@plt+0x11f00>
   2357c:	cmn	r5, #1
   23580:	beq	235a0 <__assert_fail@plt+0x120a8>
   23584:	mov	r1, r5
   23588:	mov	r0, #-2147483648	; 0x80000000
   2358c:	bl	23e2c <__assert_fail@plt+0x12934>
   23590:	cmp	r6, r0
   23594:	movle	r0, #0
   23598:	movgt	r0, #1
   2359c:	b	233f8 <__assert_fail@plt+0x11f00>
   235a0:	add	r0, r6, #-2147483648	; 0x80000000
   235a4:	cmp	r0, #0
   235a8:	movle	r0, #0
   235ac:	movgt	r0, #1
   235b0:	b	233f8 <__assert_fail@plt+0x11f00>
   235b4:	bl	23690 <__assert_fail@plt+0x12198>
   235b8:	push	{r4, lr}
   235bc:	bl	236d0 <__assert_fail@plt+0x121d8>
   235c0:	cmp	r0, #0
   235c4:	popne	{r4, pc}
   235c8:	bl	23690 <__assert_fail@plt+0x12198>
   235cc:	push	{r4, lr}
   235d0:	mov	r1, #1
   235d4:	bl	235b8 <__assert_fail@plt+0x120c0>
   235d8:	pop	{r4, pc}
   235dc:	push	{r4, lr}
   235e0:	bl	236d0 <__assert_fail@plt+0x121d8>
   235e4:	cmp	r0, #0
   235e8:	popne	{r4, pc}
   235ec:	bl	23690 <__assert_fail@plt+0x12198>
   235f0:	push	{r4, lr}
   235f4:	mov	r1, #1
   235f8:	bl	235dc <__assert_fail@plt+0x120e4>
   235fc:	pop	{r4, pc}
   23600:	push	{r4, r5, r6, lr}
   23604:	mov	r5, r0
   23608:	mov	r4, r1
   2360c:	mov	r0, r1
   23610:	bl	230ec <__assert_fail@plt+0x11bf4>
   23614:	mov	r2, r4
   23618:	mov	r1, r5
   2361c:	bl	11234 <memcpy@plt>
   23620:	pop	{r4, r5, r6, pc}
   23624:	push	{r4, r5, r6, lr}
   23628:	mov	r5, r0
   2362c:	mov	r4, r1
   23630:	mov	r0, r1
   23634:	bl	23100 <__assert_fail@plt+0x11c08>
   23638:	mov	r2, r4
   2363c:	mov	r1, r5
   23640:	bl	11234 <memcpy@plt>
   23644:	pop	{r4, r5, r6, pc}
   23648:	push	{r4, r5, r6, lr}
   2364c:	mov	r5, r0
   23650:	mov	r4, r1
   23654:	add	r0, r1, #1
   23658:	bl	23100 <__assert_fail@plt+0x11c08>
   2365c:	mov	r2, #0
   23660:	strb	r2, [r0, r4]
   23664:	mov	r2, r4
   23668:	mov	r1, r5
   2366c:	bl	11234 <memcpy@plt>
   23670:	pop	{r4, r5, r6, pc}
   23674:	push	{r4, lr}
   23678:	mov	r4, r0
   2367c:	bl	113c0 <strlen@plt>
   23680:	add	r1, r0, #1
   23684:	mov	r0, r4
   23688:	bl	23600 <__assert_fail@plt+0x12108>
   2368c:	pop	{r4, pc}
   23690:	push	{r4, lr}
   23694:	ldr	r3, [pc, #40]	; 236c4 <__assert_fail@plt+0x121cc>
   23698:	ldr	r4, [r3]
   2369c:	mov	r2, #5
   236a0:	ldr	r1, [pc, #32]	; 236c8 <__assert_fail@plt+0x121d0>
   236a4:	mov	r0, #0
   236a8:	bl	11288 <dcgettext@plt>
   236ac:	mov	r3, r0
   236b0:	ldr	r2, [pc, #20]	; 236cc <__assert_fail@plt+0x121d4>
   236b4:	mov	r1, #0
   236b8:	mov	r0, r4
   236bc:	bl	11324 <error@plt>
   236c0:	bl	114ec <abort@plt>
   236c4:	andeq	r6, r3, ip, asr #2
   236c8:	strdeq	r5, [r2], -r4
   236cc:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   236d0:	push	{r4, lr}
   236d4:	mov	r2, r0
   236d8:	mov	r3, r1
   236dc:	cmp	r1, #0
   236e0:	cmpne	r0, #0
   236e4:	moveq	r3, #1
   236e8:	moveq	r2, r3
   236ec:	umull	r0, r1, r2, r3
   236f0:	cmp	r0, #0
   236f4:	cmpge	r1, #0
   236f8:	bne	2370c <__assert_fail@plt+0x12214>
   236fc:	mov	r1, r3
   23700:	mov	r0, r2
   23704:	bl	11174 <calloc@plt>
   23708:	pop	{r4, pc}
   2370c:	bl	113f0 <__errno_location@plt>
   23710:	mov	r3, #12
   23714:	str	r3, [r0]
   23718:	mov	r0, #0
   2371c:	pop	{r4, pc}
   23720:	push	{r4, lr}
   23724:	cmp	r0, #0
   23728:	moveq	r0, #1
   2372c:	cmp	r0, #0
   23730:	blt	2373c <__assert_fail@plt+0x12244>
   23734:	bl	11348 <malloc@plt>
   23738:	pop	{r4, pc}
   2373c:	bl	113f0 <__errno_location@plt>
   23740:	mov	r3, #12
   23744:	str	r3, [r0]
   23748:	mov	r0, #0
   2374c:	pop	{r4, pc}
   23750:	push	{r4, lr}
   23754:	cmp	r0, #0
   23758:	beq	23774 <__assert_fail@plt+0x1227c>
   2375c:	cmp	r1, #0
   23760:	beq	23780 <__assert_fail@plt+0x12288>
   23764:	cmp	r1, #0
   23768:	blt	2378c <__assert_fail@plt+0x12294>
   2376c:	bl	112a0 <realloc@plt>
   23770:	pop	{r4, pc}
   23774:	mov	r0, r1
   23778:	bl	23720 <__assert_fail@plt+0x12228>
   2377c:	pop	{r4, pc}
   23780:	bl	13340 <__assert_fail@plt+0x1e48>
   23784:	mov	r0, #0
   23788:	pop	{r4, pc}
   2378c:	bl	113f0 <__errno_location@plt>
   23790:	mov	r3, #12
   23794:	str	r3, [r0]
   23798:	mov	r0, #0
   2379c:	pop	{r4, pc}
   237a0:	push	{r4, r5, r6, lr}
   237a4:	mov	r5, r0
   237a8:	bl	1130c <__fpending@plt>
   237ac:	mov	r6, r0
   237b0:	ldr	r4, [r5]
   237b4:	and	r4, r4, #32
   237b8:	mov	r0, r5
   237bc:	bl	238e4 <__assert_fail@plt+0x123ec>
   237c0:	cmp	r4, #0
   237c4:	bne	237ec <__assert_fail@plt+0x122f4>
   237c8:	cmp	r0, #0
   237cc:	popeq	{r4, r5, r6, pc}
   237d0:	cmp	r6, #0
   237d4:	bne	23808 <__assert_fail@plt+0x12310>
   237d8:	bl	113f0 <__errno_location@plt>
   237dc:	ldr	r0, [r0]
   237e0:	subs	r0, r0, #9
   237e4:	mvnne	r0, #0
   237e8:	pop	{r4, r5, r6, pc}
   237ec:	cmp	r0, #0
   237f0:	bne	23810 <__assert_fail@plt+0x12318>
   237f4:	bl	113f0 <__errno_location@plt>
   237f8:	mov	r3, #0
   237fc:	str	r3, [r0]
   23800:	mvn	r0, #0
   23804:	pop	{r4, r5, r6, pc}
   23808:	mvn	r0, #0
   2380c:	pop	{r4, r5, r6, pc}
   23810:	mvn	r0, #0
   23814:	pop	{r4, r5, r6, pc}
   23818:	ldr	ip, [r0, #4]
   2381c:	cmp	ip, r1
   23820:	bcs	23868 <__assert_fail@plt+0x12370>
   23824:	push	{r4, r5, r6, r7, r8, lr}
   23828:	mov	r6, r3
   2382c:	mov	r7, r2
   23830:	mov	r5, r1
   23834:	mov	r4, r0
   23838:	cmp	r3, #0
   2383c:	beq	23874 <__assert_fail@plt+0x1237c>
   23840:	mov	r1, r3
   23844:	mvn	r0, #0
   23848:	bl	23c20 <__assert_fail@plt+0x12728>
   2384c:	cmp	r5, r0
   23850:	bls	23874 <__assert_fail@plt+0x1237c>
   23854:	bl	113f0 <__errno_location@plt>
   23858:	mov	r3, #12
   2385c:	str	r3, [r0]
   23860:	mov	r0, #0
   23864:	pop	{r4, r5, r6, r7, r8, pc}
   23868:	str	r1, [r0]
   2386c:	mov	r0, #1
   23870:	bx	lr
   23874:	mul	r1, r6, r5
   23878:	ldr	r0, [r4, #8]
   2387c:	cmp	r0, r7
   23880:	beq	238a4 <__assert_fail@plt+0x123ac>
   23884:	bl	23750 <__assert_fail@plt+0x12258>
   23888:	subs	r7, r0, #0
   2388c:	beq	238dc <__assert_fail@plt+0x123e4>
   23890:	str	r7, [r4, #8]
   23894:	str	r5, [r4, #4]
   23898:	str	r5, [r4]
   2389c:	mov	r0, #1
   238a0:	pop	{r4, r5, r6, r7, r8, pc}
   238a4:	mov	r0, r1
   238a8:	bl	23720 <__assert_fail@plt+0x12228>
   238ac:	subs	r7, r0, #0
   238b0:	beq	238d4 <__assert_fail@plt+0x123dc>
   238b4:	ldr	r1, [r4, #8]
   238b8:	cmp	r1, #0
   238bc:	beq	23890 <__assert_fail@plt+0x12398>
   238c0:	ldr	r2, [r4]
   238c4:	mul	r2, r2, r6
   238c8:	mov	r0, r7
   238cc:	bl	11234 <memcpy@plt>
   238d0:	b	23890 <__assert_fail@plt+0x12398>
   238d4:	mov	r0, #0
   238d8:	pop	{r4, r5, r6, r7, r8, pc}
   238dc:	mov	r0, #0
   238e0:	pop	{r4, r5, r6, r7, r8, pc}
   238e4:	push	{r4, r5, r6, lr}
   238e8:	sub	sp, sp, #8
   238ec:	mov	r4, r0
   238f0:	bl	11438 <fileno@plt>
   238f4:	cmp	r0, #0
   238f8:	blt	23970 <__assert_fail@plt+0x12478>
   238fc:	mov	r0, r4
   23900:	bl	11360 <__freading@plt>
   23904:	cmp	r0, #0
   23908:	beq	2393c <__assert_fail@plt+0x12444>
   2390c:	mov	r0, r4
   23910:	bl	11438 <fileno@plt>
   23914:	mov	r3, #1
   23918:	str	r3, [sp]
   2391c:	mov	r2, #0
   23920:	mov	r3, #0
   23924:	bl	112f4 <lseek64@plt>
   23928:	mvn	r2, #0
   2392c:	mvn	r3, #0
   23930:	cmp	r1, r3
   23934:	cmpeq	r0, r2
   23938:	beq	2397c <__assert_fail@plt+0x12484>
   2393c:	mov	r0, r4
   23940:	bl	2398c <__assert_fail@plt+0x12494>
   23944:	cmp	r0, #0
   23948:	beq	2397c <__assert_fail@plt+0x12484>
   2394c:	bl	113f0 <__errno_location@plt>
   23950:	mov	r5, r0
   23954:	ldr	r6, [r0]
   23958:	mov	r0, r4
   2395c:	bl	1145c <fclose@plt>
   23960:	cmp	r6, #0
   23964:	strne	r6, [r5]
   23968:	mvnne	r0, #0
   2396c:	b	23984 <__assert_fail@plt+0x1248c>
   23970:	mov	r0, r4
   23974:	bl	1145c <fclose@plt>
   23978:	b	23984 <__assert_fail@plt+0x1248c>
   2397c:	mov	r0, r4
   23980:	bl	1145c <fclose@plt>
   23984:	add	sp, sp, #8
   23988:	pop	{r4, r5, r6, pc}
   2398c:	push	{r4, lr}
   23990:	sub	sp, sp, #8
   23994:	subs	r4, r0, #0
   23998:	beq	239ac <__assert_fail@plt+0x124b4>
   2399c:	mov	r0, r4
   239a0:	bl	11360 <__freading@plt>
   239a4:	cmp	r0, #0
   239a8:	bne	239bc <__assert_fail@plt+0x124c4>
   239ac:	mov	r0, r4
   239b0:	bl	111ec <fflush@plt>
   239b4:	add	sp, sp, #8
   239b8:	pop	{r4, pc}
   239bc:	ldr	r3, [r4]
   239c0:	tst	r3, #256	; 0x100
   239c4:	bne	239d4 <__assert_fail@plt+0x124dc>
   239c8:	mov	r0, r4
   239cc:	bl	111ec <fflush@plt>
   239d0:	b	239b4 <__assert_fail@plt+0x124bc>
   239d4:	mov	r3, #1
   239d8:	str	r3, [sp]
   239dc:	mov	r2, #0
   239e0:	mov	r3, #0
   239e4:	mov	r0, r4
   239e8:	bl	239f0 <__assert_fail@plt+0x124f8>
   239ec:	b	239c8 <__assert_fail@plt+0x124d0>
   239f0:	push	{r4, r5, r6, r7, lr}
   239f4:	sub	sp, sp, #12
   239f8:	mov	r4, r0
   239fc:	mov	r6, r2
   23a00:	mov	r7, r3
   23a04:	ldr	r5, [sp, #32]
   23a08:	ldr	r2, [r0, #8]
   23a0c:	ldr	r3, [r0, #4]
   23a10:	cmp	r2, r3
   23a14:	beq	23a34 <__assert_fail@plt+0x1253c>
   23a18:	str	r5, [sp]
   23a1c:	mov	r2, r6
   23a20:	mov	r3, r7
   23a24:	mov	r0, r4
   23a28:	bl	11468 <fseeko64@plt>
   23a2c:	add	sp, sp, #12
   23a30:	pop	{r4, r5, r6, r7, pc}
   23a34:	ldr	r2, [r0, #20]
   23a38:	ldr	r3, [r0, #16]
   23a3c:	cmp	r2, r3
   23a40:	bne	23a18 <__assert_fail@plt+0x12520>
   23a44:	ldr	r3, [r0, #36]	; 0x24
   23a48:	cmp	r3, #0
   23a4c:	bne	23a18 <__assert_fail@plt+0x12520>
   23a50:	bl	11438 <fileno@plt>
   23a54:	str	r5, [sp]
   23a58:	mov	r2, r6
   23a5c:	mov	r3, r7
   23a60:	bl	112f4 <lseek64@plt>
   23a64:	mvn	r2, #0
   23a68:	mvn	r3, #0
   23a6c:	cmp	r1, r3
   23a70:	cmpeq	r0, r2
   23a74:	beq	23a90 <__assert_fail@plt+0x12598>
   23a78:	ldr	r3, [r4]
   23a7c:	bic	r3, r3, #16
   23a80:	str	r3, [r4]
   23a84:	strd	r0, [r4, #80]	; 0x50
   23a88:	mov	r0, #0
   23a8c:	b	23a2c <__assert_fail@plt+0x12534>
   23a90:	mvn	r0, #0
   23a94:	b	23a2c <__assert_fail@plt+0x12534>
   23a98:	push	{lr}		; (str lr, [sp, #-4]!)
   23a9c:	sub	sp, sp, #268	; 0x10c
   23aa0:	ldr	r2, [pc, #68]	; 23aec <__assert_fail@plt+0x125f4>
   23aa4:	add	r1, sp, #4
   23aa8:	bl	23b78 <__assert_fail@plt+0x12680>
   23aac:	cmp	r0, #0
   23ab0:	movne	r0, #0
   23ab4:	bne	23ae4 <__assert_fail@plt+0x125ec>
   23ab8:	ldr	r1, [pc, #48]	; 23af0 <__assert_fail@plt+0x125f8>
   23abc:	add	r0, sp, #4
   23ac0:	bl	111bc <strcmp@plt>
   23ac4:	cmp	r0, #0
   23ac8:	moveq	r0, #0
   23acc:	beq	23ae4 <__assert_fail@plt+0x125ec>
   23ad0:	ldr	r1, [pc, #28]	; 23af4 <__assert_fail@plt+0x125fc>
   23ad4:	add	r0, sp, #4
   23ad8:	bl	111bc <strcmp@plt>
   23adc:	adds	r0, r0, #0
   23ae0:	movne	r0, #1
   23ae4:	add	sp, sp, #268	; 0x10c
   23ae8:	pop	{pc}		; (ldr pc, [sp], #4)
   23aec:	andeq	r0, r0, r1, lsl #2
   23af0:	andeq	r5, r2, r8, lsl #8
   23af4:	andeq	r5, r2, ip, lsl #8
   23af8:	push	{r4, lr}
   23afc:	mov	r0, #14
   23b00:	bl	114a4 <nl_langinfo@plt>
   23b04:	cmp	r0, #0
   23b08:	beq	23b20 <__assert_fail@plt+0x12628>
   23b0c:	ldrb	r2, [r0]
   23b10:	ldr	r3, [pc, #16]	; 23b28 <__assert_fail@plt+0x12630>
   23b14:	cmp	r2, #0
   23b18:	moveq	r0, r3
   23b1c:	pop	{r4, pc}
   23b20:	ldr	r0, [pc]	; 23b28 <__assert_fail@plt+0x12630>
   23b24:	pop	{r4, pc}
   23b28:	andeq	r5, r2, r4, lsl r4
   23b2c:	push	{r4, r5, r6, lr}
   23b30:	mov	r6, r0
   23b34:	mov	r5, r1
   23b38:	subs	r4, r2, #0
   23b3c:	beq	23b68 <__assert_fail@plt+0x12670>
   23b40:	mov	r1, r4
   23b44:	mvn	r0, #0
   23b48:	bl	23c20 <__assert_fail@plt+0x12728>
   23b4c:	cmp	r0, r5
   23b50:	bcs	23b68 <__assert_fail@plt+0x12670>
   23b54:	bl	113f0 <__errno_location@plt>
   23b58:	mov	r3, #12
   23b5c:	str	r3, [r0]
   23b60:	mov	r0, #0
   23b64:	pop	{r4, r5, r6, pc}
   23b68:	mul	r1, r5, r4
   23b6c:	mov	r0, r6
   23b70:	bl	23750 <__assert_fail@plt+0x12258>
   23b74:	pop	{r4, r5, r6, pc}
   23b78:	push	{r4, r5, r6, lr}
   23b7c:	mov	r6, r1
   23b80:	mov	r4, r2
   23b84:	mov	r1, #0
   23b88:	bl	1148c <setlocale@plt>
   23b8c:	subs	r5, r0, #0
   23b90:	beq	23bb4 <__assert_fail@plt+0x126bc>
   23b94:	mov	r0, r5
   23b98:	bl	113c0 <strlen@plt>
   23b9c:	cmp	r4, r0
   23ba0:	bhi	23bcc <__assert_fail@plt+0x126d4>
   23ba4:	cmp	r4, #0
   23ba8:	bne	23be4 <__assert_fail@plt+0x126ec>
   23bac:	mov	r0, #34	; 0x22
   23bb0:	pop	{r4, r5, r6, pc}
   23bb4:	cmp	r4, #0
   23bb8:	beq	23c08 <__assert_fail@plt+0x12710>
   23bbc:	mov	r3, #0
   23bc0:	strb	r3, [r6]
   23bc4:	mov	r0, #22
   23bc8:	pop	{r4, r5, r6, pc}
   23bcc:	add	r2, r0, #1
   23bd0:	mov	r1, r5
   23bd4:	mov	r0, r6
   23bd8:	bl	11234 <memcpy@plt>
   23bdc:	mov	r0, #0
   23be0:	pop	{r4, r5, r6, pc}
   23be4:	sub	r4, r4, #1
   23be8:	mov	r2, r4
   23bec:	mov	r1, r5
   23bf0:	mov	r0, r6
   23bf4:	bl	11234 <memcpy@plt>
   23bf8:	mov	r3, #0
   23bfc:	strb	r3, [r6, r4]
   23c00:	mov	r0, #34	; 0x22
   23c04:	pop	{r4, r5, r6, pc}
   23c08:	mov	r0, #22
   23c0c:	pop	{r4, r5, r6, pc}
   23c10:	push	{r4, lr}
   23c14:	mov	r1, #0
   23c18:	bl	1148c <setlocale@plt>
   23c1c:	pop	{r4, pc}
   23c20:	subs	r2, r1, #1
   23c24:	bxeq	lr
   23c28:	bcc	23e00 <__assert_fail@plt+0x12908>
   23c2c:	cmp	r0, r1
   23c30:	bls	23de4 <__assert_fail@plt+0x128ec>
   23c34:	tst	r1, r2
   23c38:	beq	23df0 <__assert_fail@plt+0x128f8>
   23c3c:	clz	r3, r0
   23c40:	clz	r2, r1
   23c44:	sub	r3, r2, r3
   23c48:	rsbs	r3, r3, #31
   23c4c:	addne	r3, r3, r3, lsl #1
   23c50:	mov	r2, #0
   23c54:	addne	pc, pc, r3, lsl #2
   23c58:	nop			; (mov r0, r0)
   23c5c:	cmp	r0, r1, lsl #31
   23c60:	adc	r2, r2, r2
   23c64:	subcs	r0, r0, r1, lsl #31
   23c68:	cmp	r0, r1, lsl #30
   23c6c:	adc	r2, r2, r2
   23c70:	subcs	r0, r0, r1, lsl #30
   23c74:	cmp	r0, r1, lsl #29
   23c78:	adc	r2, r2, r2
   23c7c:	subcs	r0, r0, r1, lsl #29
   23c80:	cmp	r0, r1, lsl #28
   23c84:	adc	r2, r2, r2
   23c88:	subcs	r0, r0, r1, lsl #28
   23c8c:	cmp	r0, r1, lsl #27
   23c90:	adc	r2, r2, r2
   23c94:	subcs	r0, r0, r1, lsl #27
   23c98:	cmp	r0, r1, lsl #26
   23c9c:	adc	r2, r2, r2
   23ca0:	subcs	r0, r0, r1, lsl #26
   23ca4:	cmp	r0, r1, lsl #25
   23ca8:	adc	r2, r2, r2
   23cac:	subcs	r0, r0, r1, lsl #25
   23cb0:	cmp	r0, r1, lsl #24
   23cb4:	adc	r2, r2, r2
   23cb8:	subcs	r0, r0, r1, lsl #24
   23cbc:	cmp	r0, r1, lsl #23
   23cc0:	adc	r2, r2, r2
   23cc4:	subcs	r0, r0, r1, lsl #23
   23cc8:	cmp	r0, r1, lsl #22
   23ccc:	adc	r2, r2, r2
   23cd0:	subcs	r0, r0, r1, lsl #22
   23cd4:	cmp	r0, r1, lsl #21
   23cd8:	adc	r2, r2, r2
   23cdc:	subcs	r0, r0, r1, lsl #21
   23ce0:	cmp	r0, r1, lsl #20
   23ce4:	adc	r2, r2, r2
   23ce8:	subcs	r0, r0, r1, lsl #20
   23cec:	cmp	r0, r1, lsl #19
   23cf0:	adc	r2, r2, r2
   23cf4:	subcs	r0, r0, r1, lsl #19
   23cf8:	cmp	r0, r1, lsl #18
   23cfc:	adc	r2, r2, r2
   23d00:	subcs	r0, r0, r1, lsl #18
   23d04:	cmp	r0, r1, lsl #17
   23d08:	adc	r2, r2, r2
   23d0c:	subcs	r0, r0, r1, lsl #17
   23d10:	cmp	r0, r1, lsl #16
   23d14:	adc	r2, r2, r2
   23d18:	subcs	r0, r0, r1, lsl #16
   23d1c:	cmp	r0, r1, lsl #15
   23d20:	adc	r2, r2, r2
   23d24:	subcs	r0, r0, r1, lsl #15
   23d28:	cmp	r0, r1, lsl #14
   23d2c:	adc	r2, r2, r2
   23d30:	subcs	r0, r0, r1, lsl #14
   23d34:	cmp	r0, r1, lsl #13
   23d38:	adc	r2, r2, r2
   23d3c:	subcs	r0, r0, r1, lsl #13
   23d40:	cmp	r0, r1, lsl #12
   23d44:	adc	r2, r2, r2
   23d48:	subcs	r0, r0, r1, lsl #12
   23d4c:	cmp	r0, r1, lsl #11
   23d50:	adc	r2, r2, r2
   23d54:	subcs	r0, r0, r1, lsl #11
   23d58:	cmp	r0, r1, lsl #10
   23d5c:	adc	r2, r2, r2
   23d60:	subcs	r0, r0, r1, lsl #10
   23d64:	cmp	r0, r1, lsl #9
   23d68:	adc	r2, r2, r2
   23d6c:	subcs	r0, r0, r1, lsl #9
   23d70:	cmp	r0, r1, lsl #8
   23d74:	adc	r2, r2, r2
   23d78:	subcs	r0, r0, r1, lsl #8
   23d7c:	cmp	r0, r1, lsl #7
   23d80:	adc	r2, r2, r2
   23d84:	subcs	r0, r0, r1, lsl #7
   23d88:	cmp	r0, r1, lsl #6
   23d8c:	adc	r2, r2, r2
   23d90:	subcs	r0, r0, r1, lsl #6
   23d94:	cmp	r0, r1, lsl #5
   23d98:	adc	r2, r2, r2
   23d9c:	subcs	r0, r0, r1, lsl #5
   23da0:	cmp	r0, r1, lsl #4
   23da4:	adc	r2, r2, r2
   23da8:	subcs	r0, r0, r1, lsl #4
   23dac:	cmp	r0, r1, lsl #3
   23db0:	adc	r2, r2, r2
   23db4:	subcs	r0, r0, r1, lsl #3
   23db8:	cmp	r0, r1, lsl #2
   23dbc:	adc	r2, r2, r2
   23dc0:	subcs	r0, r0, r1, lsl #2
   23dc4:	cmp	r0, r1, lsl #1
   23dc8:	adc	r2, r2, r2
   23dcc:	subcs	r0, r0, r1, lsl #1
   23dd0:	cmp	r0, r1
   23dd4:	adc	r2, r2, r2
   23dd8:	subcs	r0, r0, r1
   23ddc:	mov	r0, r2
   23de0:	bx	lr
   23de4:	moveq	r0, #1
   23de8:	movne	r0, #0
   23dec:	bx	lr
   23df0:	clz	r2, r1
   23df4:	rsb	r2, r2, #31
   23df8:	lsr	r0, r0, r2
   23dfc:	bx	lr
   23e00:	cmp	r0, #0
   23e04:	mvnne	r0, #0
   23e08:	b	2406c <__assert_fail@plt+0x12b74>
   23e0c:	cmp	r1, #0
   23e10:	beq	23e00 <__assert_fail@plt+0x12908>
   23e14:	push	{r0, r1, lr}
   23e18:	bl	23c20 <__assert_fail@plt+0x12728>
   23e1c:	pop	{r1, r2, lr}
   23e20:	mul	r3, r2, r0
   23e24:	sub	r1, r1, r3
   23e28:	bx	lr
   23e2c:	cmp	r1, #0
   23e30:	beq	2403c <__assert_fail@plt+0x12b44>
   23e34:	eor	ip, r0, r1
   23e38:	rsbmi	r1, r1, #0
   23e3c:	subs	r2, r1, #1
   23e40:	beq	24008 <__assert_fail@plt+0x12b10>
   23e44:	movs	r3, r0
   23e48:	rsbmi	r3, r0, #0
   23e4c:	cmp	r3, r1
   23e50:	bls	24014 <__assert_fail@plt+0x12b1c>
   23e54:	tst	r1, r2
   23e58:	beq	24024 <__assert_fail@plt+0x12b2c>
   23e5c:	clz	r2, r3
   23e60:	clz	r0, r1
   23e64:	sub	r2, r0, r2
   23e68:	rsbs	r2, r2, #31
   23e6c:	addne	r2, r2, r2, lsl #1
   23e70:	mov	r0, #0
   23e74:	addne	pc, pc, r2, lsl #2
   23e78:	nop			; (mov r0, r0)
   23e7c:	cmp	r3, r1, lsl #31
   23e80:	adc	r0, r0, r0
   23e84:	subcs	r3, r3, r1, lsl #31
   23e88:	cmp	r3, r1, lsl #30
   23e8c:	adc	r0, r0, r0
   23e90:	subcs	r3, r3, r1, lsl #30
   23e94:	cmp	r3, r1, lsl #29
   23e98:	adc	r0, r0, r0
   23e9c:	subcs	r3, r3, r1, lsl #29
   23ea0:	cmp	r3, r1, lsl #28
   23ea4:	adc	r0, r0, r0
   23ea8:	subcs	r3, r3, r1, lsl #28
   23eac:	cmp	r3, r1, lsl #27
   23eb0:	adc	r0, r0, r0
   23eb4:	subcs	r3, r3, r1, lsl #27
   23eb8:	cmp	r3, r1, lsl #26
   23ebc:	adc	r0, r0, r0
   23ec0:	subcs	r3, r3, r1, lsl #26
   23ec4:	cmp	r3, r1, lsl #25
   23ec8:	adc	r0, r0, r0
   23ecc:	subcs	r3, r3, r1, lsl #25
   23ed0:	cmp	r3, r1, lsl #24
   23ed4:	adc	r0, r0, r0
   23ed8:	subcs	r3, r3, r1, lsl #24
   23edc:	cmp	r3, r1, lsl #23
   23ee0:	adc	r0, r0, r0
   23ee4:	subcs	r3, r3, r1, lsl #23
   23ee8:	cmp	r3, r1, lsl #22
   23eec:	adc	r0, r0, r0
   23ef0:	subcs	r3, r3, r1, lsl #22
   23ef4:	cmp	r3, r1, lsl #21
   23ef8:	adc	r0, r0, r0
   23efc:	subcs	r3, r3, r1, lsl #21
   23f00:	cmp	r3, r1, lsl #20
   23f04:	adc	r0, r0, r0
   23f08:	subcs	r3, r3, r1, lsl #20
   23f0c:	cmp	r3, r1, lsl #19
   23f10:	adc	r0, r0, r0
   23f14:	subcs	r3, r3, r1, lsl #19
   23f18:	cmp	r3, r1, lsl #18
   23f1c:	adc	r0, r0, r0
   23f20:	subcs	r3, r3, r1, lsl #18
   23f24:	cmp	r3, r1, lsl #17
   23f28:	adc	r0, r0, r0
   23f2c:	subcs	r3, r3, r1, lsl #17
   23f30:	cmp	r3, r1, lsl #16
   23f34:	adc	r0, r0, r0
   23f38:	subcs	r3, r3, r1, lsl #16
   23f3c:	cmp	r3, r1, lsl #15
   23f40:	adc	r0, r0, r0
   23f44:	subcs	r3, r3, r1, lsl #15
   23f48:	cmp	r3, r1, lsl #14
   23f4c:	adc	r0, r0, r0
   23f50:	subcs	r3, r3, r1, lsl #14
   23f54:	cmp	r3, r1, lsl #13
   23f58:	adc	r0, r0, r0
   23f5c:	subcs	r3, r3, r1, lsl #13
   23f60:	cmp	r3, r1, lsl #12
   23f64:	adc	r0, r0, r0
   23f68:	subcs	r3, r3, r1, lsl #12
   23f6c:	cmp	r3, r1, lsl #11
   23f70:	adc	r0, r0, r0
   23f74:	subcs	r3, r3, r1, lsl #11
   23f78:	cmp	r3, r1, lsl #10
   23f7c:	adc	r0, r0, r0
   23f80:	subcs	r3, r3, r1, lsl #10
   23f84:	cmp	r3, r1, lsl #9
   23f88:	adc	r0, r0, r0
   23f8c:	subcs	r3, r3, r1, lsl #9
   23f90:	cmp	r3, r1, lsl #8
   23f94:	adc	r0, r0, r0
   23f98:	subcs	r3, r3, r1, lsl #8
   23f9c:	cmp	r3, r1, lsl #7
   23fa0:	adc	r0, r0, r0
   23fa4:	subcs	r3, r3, r1, lsl #7
   23fa8:	cmp	r3, r1, lsl #6
   23fac:	adc	r0, r0, r0
   23fb0:	subcs	r3, r3, r1, lsl #6
   23fb4:	cmp	r3, r1, lsl #5
   23fb8:	adc	r0, r0, r0
   23fbc:	subcs	r3, r3, r1, lsl #5
   23fc0:	cmp	r3, r1, lsl #4
   23fc4:	adc	r0, r0, r0
   23fc8:	subcs	r3, r3, r1, lsl #4
   23fcc:	cmp	r3, r1, lsl #3
   23fd0:	adc	r0, r0, r0
   23fd4:	subcs	r3, r3, r1, lsl #3
   23fd8:	cmp	r3, r1, lsl #2
   23fdc:	adc	r0, r0, r0
   23fe0:	subcs	r3, r3, r1, lsl #2
   23fe4:	cmp	r3, r1, lsl #1
   23fe8:	adc	r0, r0, r0
   23fec:	subcs	r3, r3, r1, lsl #1
   23ff0:	cmp	r3, r1
   23ff4:	adc	r0, r0, r0
   23ff8:	subcs	r3, r3, r1
   23ffc:	cmp	ip, #0
   24000:	rsbmi	r0, r0, #0
   24004:	bx	lr
   24008:	teq	ip, r0
   2400c:	rsbmi	r0, r0, #0
   24010:	bx	lr
   24014:	movcc	r0, #0
   24018:	asreq	r0, ip, #31
   2401c:	orreq	r0, r0, #1
   24020:	bx	lr
   24024:	clz	r2, r1
   24028:	rsb	r2, r2, #31
   2402c:	cmp	ip, #0
   24030:	lsr	r0, r3, r2
   24034:	rsbmi	r0, r0, #0
   24038:	bx	lr
   2403c:	cmp	r0, #0
   24040:	mvngt	r0, #-2147483648	; 0x80000000
   24044:	movlt	r0, #-2147483648	; 0x80000000
   24048:	b	2406c <__assert_fail@plt+0x12b74>
   2404c:	cmp	r1, #0
   24050:	beq	2403c <__assert_fail@plt+0x12b44>
   24054:	push	{r0, r1, lr}
   24058:	bl	23e34 <__assert_fail@plt+0x1293c>
   2405c:	pop	{r1, r2, lr}
   24060:	mul	r3, r2, r0
   24064:	sub	r1, r1, r3
   24068:	bx	lr
   2406c:	push	{r1, lr}
   24070:	mov	r0, #8
   24074:	bl	11198 <raise@plt>
   24078:	pop	{r1, pc}
   2407c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24080:	mov	r7, r0
   24084:	ldr	r6, [pc, #72]	; 240d4 <__assert_fail@plt+0x12bdc>
   24088:	ldr	r5, [pc, #72]	; 240d8 <__assert_fail@plt+0x12be0>
   2408c:	add	r6, pc, r6
   24090:	add	r5, pc, r5
   24094:	sub	r6, r6, r5
   24098:	mov	r8, r1
   2409c:	mov	r9, r2
   240a0:	bl	11148 <pthread_mutex_unlock@plt-0x20>
   240a4:	asrs	r6, r6, #2
   240a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   240ac:	mov	r4, #0
   240b0:	add	r4, r4, #1
   240b4:	ldr	r3, [r5], #4
   240b8:	mov	r2, r9
   240bc:	mov	r1, r8
   240c0:	mov	r0, r7
   240c4:	blx	r3
   240c8:	cmp	r6, r4
   240cc:	bne	240b0 <__assert_fail@plt+0x12bb8>
   240d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   240d4:	andeq	r1, r1, r4, ror lr
   240d8:	andeq	r1, r1, ip, ror #28
   240dc:	bx	lr
   240e0:	ldr	r3, [pc, #12]	; 240f4 <__assert_fail@plt+0x12bfc>
   240e4:	mov	r1, #0
   240e8:	add	r3, pc, r3
   240ec:	ldr	r2, [r3]
   240f0:	b	11408 <__cxa_atexit@plt>
   240f4:	andeq	r2, r1, r8, asr r0

Disassembly of section .fini:

000240f8 <.fini>:
   240f8:	push	{r3, lr}
   240fc:	pop	{r3, pc}
