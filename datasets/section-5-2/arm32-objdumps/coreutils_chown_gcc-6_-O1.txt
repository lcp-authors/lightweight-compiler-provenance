
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

0001100c <.init>:
   1100c:	push	{r3, lr}
   11010:	bl	113d4 <__assert_fail@plt+0x48>
   11014:	pop	{r3, pc}

Disassembly of section .plt:

00011018 <fstatfs64@plt-0x14>:
   11018:	push	{lr}		; (str lr, [sp, #-4]!)
   1101c:	ldr	lr, [pc, #4]	; 11028 <fstatfs64@plt-0x4>
   11020:	add	lr, pc, lr
   11024:	ldr	pc, [lr, #8]!
   11028:	ldrdeq	sl, [r1], -r8

0001102c <fstatfs64@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #106496	; 0x1a000
   11034:	ldr	pc, [ip, #4056]!	; 0xfd8

00011038 <calloc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #106496	; 0x1a000
   11040:	ldr	pc, [ip, #4048]!	; 0xfd0

00011044 <endgrent@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #106496	; 0x1a000
   1104c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011050 <fputs_unlocked@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #106496	; 0x1a000
   11058:	ldr	pc, [ip, #4032]!	; 0xfc0

0001105c <raise@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #106496	; 0x1a000
   11064:	ldr	pc, [ip, #4024]!	; 0xfb8

00011068 <getpwnam@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #106496	; 0x1a000
   11070:	ldr	pc, [ip, #4016]!	; 0xfb0

00011074 <strcmp@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #106496	; 0x1a000
   1107c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011080 <getpwuid@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #4000]!	; 0xfa0

0001108c <fflush@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #106496	; 0x1a000
   11094:	ldr	pc, [ip, #3992]!	; 0xf98

00011098 <memmove@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #106496	; 0x1a000
   110a0:	ldr	pc, [ip, #3984]!	; 0xf90

000110a4 <free@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #3976]!	; 0xf88

000110b0 <__openat64_2@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #106496	; 0x1a000
   110b8:	ldr	pc, [ip, #3968]!	; 0xf80

000110bc <_exit@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #3960]!	; 0xf78

000110c8 <memcpy@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #3952]!	; 0xf70

000110d4 <mbsinit@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #3944]!	; 0xf68

000110e0 <memcmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #3936]!	; 0xf60

000110ec <stpcpy@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #3928]!	; 0xf58

000110f8 <fputc_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #3920]!	; 0xf50

00011104 <dcgettext@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #3912]!	; 0xf48

00011110 <realloc@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #3904]!	; 0xf40

0001111c <textdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3896]!	; 0xf38

00011128 <__fxstatat64@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3888]!	; 0xf30

00011134 <iswprint@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3880]!	; 0xf28

00011140 <__fxstat64@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3872]!	; 0xf20

0001114c <fwrite@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3864]!	; 0xf18

00011158 <lseek64@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3856]!	; 0xf10

00011164 <__ctype_get_mb_cur_max@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3848]!	; 0xf08

00011170 <strcpy@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3840]!	; 0xf00

0001117c <__fpending@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3832]!	; 0xef8

00011188 <mbrtowc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3824]!	; 0xef0

00011194 <error@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3816]!	; 0xee8

000111a0 <open64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3808]!	; 0xee0

000111ac <malloc@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3800]!	; 0xed8

000111b8 <__libc_start_main@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3792]!	; 0xed0

000111c4 <__freading@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3784]!	; 0xec8

000111d0 <__gmon_start__@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3776]!	; 0xec0

000111dc <getopt_long@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111e8 <__ctype_b_loc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111f4 <exit@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3752]!	; 0xea8

00011200 <strtoul@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3744]!	; 0xea0

0001120c <strlen@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3736]!	; 0xe98

00011218 <strchr@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3728]!	; 0xe90

00011224 <openat64@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3720]!	; 0xe88

00011230 <fchown@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3712]!	; 0xe80

0001123c <__errno_location@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3704]!	; 0xe78

00011248 <__cxa_atexit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3696]!	; 0xe70

00011254 <memset@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3688]!	; 0xe68

00011260 <__printf_chk@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3680]!	; 0xe60

0001126c <fileno@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3672]!	; 0xe58

00011278 <__fprintf_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3664]!	; 0xe50

00011284 <fclose@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3656]!	; 0xe48

00011290 <fseeko64@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3648]!	; 0xe40

0001129c <fcntl64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3640]!	; 0xe38

000112a8 <setlocale@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3632]!	; 0xe30

000112b4 <endpwent@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3624]!	; 0xe28

000112c0 <strrchr@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3616]!	; 0xe20

000112cc <nl_langinfo@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3608]!	; 0xe18

000112d8 <readdir64@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3600]!	; 0xe10

000112e4 <fdopendir@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3592]!	; 0xe08

000112f0 <dirfd@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3584]!	; 0xe00

000112fc <fchdir@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3576]!	; 0xdf8

00011308 <qsort@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3568]!	; 0xdf0

00011314 <fchownat@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3560]!	; 0xde8

00011320 <bindtextdomain@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3552]!	; 0xde0

0001132c <__xstat64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3544]!	; 0xdd8

00011338 <strncmp@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3536]!	; 0xdd0

00011344 <abort@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011350 <close@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3520]!	; 0xdc0

0001135c <__lxstat64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3512]!	; 0xdb8

00011368 <closedir@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3504]!	; 0xdb0

00011374 <getgrgid@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3496]!	; 0xda8

00011380 <getgrnam@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3488]!	; 0xda0

0001138c <__assert_fail@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3480]!	; 0xd98

Disassembly of section .text:

00011398 <.text>:
   11398:	mov	fp, #0
   1139c:	mov	lr, #0
   113a0:	pop	{r1}		; (ldr r1, [sp], #4)
   113a4:	mov	r2, sp
   113a8:	push	{r2}		; (str r2, [sp, #-4]!)
   113ac:	push	{r0}		; (str r0, [sp, #-4]!)
   113b0:	ldr	ip, [pc, #16]	; 113c8 <__assert_fail@plt+0x3c>
   113b4:	push	{ip}		; (str ip, [sp, #-4]!)
   113b8:	ldr	r0, [pc, #12]	; 113cc <__assert_fail@plt+0x40>
   113bc:	ldr	r3, [pc, #12]	; 113d0 <__assert_fail@plt+0x44>
   113c0:	bl	111b8 <__libc_start_main@plt>
   113c4:	bl	11344 <abort@plt>
   113c8:	andeq	sl, r1, ip, lsl r0
   113cc:	strdeq	r1, [r1], -r8
   113d0:			; <UNDEFINED> instruction: 0x00019fbc
   113d4:	ldr	r3, [pc, #20]	; 113f0 <__assert_fail@plt+0x64>
   113d8:	ldr	r2, [pc, #20]	; 113f4 <__assert_fail@plt+0x68>
   113dc:	add	r3, pc, r3
   113e0:	ldr	r2, [r3, r2]
   113e4:	cmp	r2, #0
   113e8:	bxeq	lr
   113ec:	b	111d0 <__gmon_start__@plt>
   113f0:	andeq	sl, r1, ip, lsl ip
   113f4:	andeq	r0, r0, r0, lsr r1
   113f8:	ldr	r3, [pc, #28]	; 1141c <__assert_fail@plt+0x90>
   113fc:	ldr	r0, [pc, #28]	; 11420 <__assert_fail@plt+0x94>
   11400:	sub	r3, r3, r0
   11404:	cmp	r3, #6
   11408:	bxls	lr
   1140c:	ldr	r3, [pc, #16]	; 11424 <__assert_fail@plt+0x98>
   11410:	cmp	r3, #0
   11414:	bxeq	lr
   11418:	bx	r3
   1141c:	andeq	ip, r2, r7, lsl #3
   11420:	andeq	ip, r2, r4, lsl #3
   11424:	andeq	r0, r0, r0
   11428:	ldr	r1, [pc, #36]	; 11454 <__assert_fail@plt+0xc8>
   1142c:	ldr	r0, [pc, #36]	; 11458 <__assert_fail@plt+0xcc>
   11430:	sub	r1, r1, r0
   11434:	asr	r1, r1, #2
   11438:	add	r1, r1, r1, lsr #31
   1143c:	asrs	r1, r1, #1
   11440:	bxeq	lr
   11444:	ldr	r3, [pc, #16]	; 1145c <__assert_fail@plt+0xd0>
   11448:	cmp	r3, #0
   1144c:	bxeq	lr
   11450:	bx	r3
   11454:	andeq	ip, r2, r4, lsl #3
   11458:	andeq	ip, r2, r4, lsl #3
   1145c:	andeq	r0, r0, r0
   11460:	push	{r4, lr}
   11464:	ldr	r4, [pc, #24]	; 11484 <__assert_fail@plt+0xf8>
   11468:	ldrb	r3, [r4]
   1146c:	cmp	r3, #0
   11470:	popne	{r4, pc}
   11474:	bl	113f8 <__assert_fail@plt+0x6c>
   11478:	mov	r3, #1
   1147c:	strb	r3, [r4]
   11480:	pop	{r4, pc}
   11484:	andeq	ip, r2, r4, lsr #3
   11488:	ldr	r0, [pc, #40]	; 114b8 <__assert_fail@plt+0x12c>
   1148c:	ldr	r3, [r0]
   11490:	cmp	r3, #0
   11494:	bne	1149c <__assert_fail@plt+0x110>
   11498:	b	11428 <__assert_fail@plt+0x9c>
   1149c:	ldr	r3, [pc, #24]	; 114bc <__assert_fail@plt+0x130>
   114a0:	cmp	r3, #0
   114a4:	beq	11498 <__assert_fail@plt+0x10c>
   114a8:	push	{r4, lr}
   114ac:	blx	r3
   114b0:	pop	{r4, lr}
   114b4:	b	11428 <__assert_fail@plt+0x9c>
   114b8:	andeq	fp, r2, r4, lsl pc
   114bc:	andeq	r0, r0, r0
   114c0:	push	{lr}		; (str lr, [sp, #-4]!)
   114c4:	sub	sp, sp, #68	; 0x44
   114c8:	subs	r6, r0, #0
   114cc:	beq	11508 <__assert_fail@plt+0x17c>
   114d0:	ldr	r3, [pc, #940]	; 11884 <__assert_fail@plt+0x4f8>
   114d4:	ldr	r4, [r3]
   114d8:	mov	r2, #5
   114dc:	ldr	r1, [pc, #932]	; 11888 <__assert_fail@plt+0x4fc>
   114e0:	mov	r0, #0
   114e4:	bl	11104 <dcgettext@plt>
   114e8:	ldr	r3, [pc, #924]	; 1188c <__assert_fail@plt+0x500>
   114ec:	ldr	r3, [r3]
   114f0:	mov	r2, r0
   114f4:	mov	r1, #1
   114f8:	mov	r0, r4
   114fc:	bl	11278 <__fprintf_chk@plt>
   11500:	mov	r0, r6
   11504:	bl	111f4 <exit@plt>
   11508:	mov	r2, #5
   1150c:	ldr	r1, [pc, #892]	; 11890 <__assert_fail@plt+0x504>
   11510:	mov	r0, #0
   11514:	bl	11104 <dcgettext@plt>
   11518:	ldr	r5, [pc, #876]	; 1188c <__assert_fail@plt+0x500>
   1151c:	ldr	r3, [r5]
   11520:	mov	r2, r3
   11524:	mov	r1, r0
   11528:	mov	r0, #1
   1152c:	bl	11260 <__printf_chk@plt>
   11530:	mov	r2, #5
   11534:	ldr	r1, [pc, #856]	; 11894 <__assert_fail@plt+0x508>
   11538:	mov	r0, #0
   1153c:	bl	11104 <dcgettext@plt>
   11540:	ldr	r4, [pc, #848]	; 11898 <__assert_fail@plt+0x50c>
   11544:	ldr	r1, [r4]
   11548:	bl	11050 <fputs_unlocked@plt>
   1154c:	mov	r2, #5
   11550:	ldr	r1, [pc, #836]	; 1189c <__assert_fail@plt+0x510>
   11554:	mov	r0, #0
   11558:	bl	11104 <dcgettext@plt>
   1155c:	ldr	r1, [r4]
   11560:	bl	11050 <fputs_unlocked@plt>
   11564:	mov	r2, #5
   11568:	ldr	r1, [pc, #816]	; 118a0 <__assert_fail@plt+0x514>
   1156c:	mov	r0, #0
   11570:	bl	11104 <dcgettext@plt>
   11574:	ldr	r1, [r4]
   11578:	bl	11050 <fputs_unlocked@plt>
   1157c:	mov	r2, #5
   11580:	ldr	r1, [pc, #796]	; 118a4 <__assert_fail@plt+0x518>
   11584:	mov	r0, #0
   11588:	bl	11104 <dcgettext@plt>
   1158c:	ldr	r1, [r4]
   11590:	bl	11050 <fputs_unlocked@plt>
   11594:	mov	r2, #5
   11598:	ldr	r1, [pc, #776]	; 118a8 <__assert_fail@plt+0x51c>
   1159c:	mov	r0, #0
   115a0:	bl	11104 <dcgettext@plt>
   115a4:	ldr	r1, [r4]
   115a8:	bl	11050 <fputs_unlocked@plt>
   115ac:	mov	r2, #5
   115b0:	ldr	r1, [pc, #756]	; 118ac <__assert_fail@plt+0x520>
   115b4:	mov	r0, #0
   115b8:	bl	11104 <dcgettext@plt>
   115bc:	ldr	r1, [r4]
   115c0:	bl	11050 <fputs_unlocked@plt>
   115c4:	mov	r2, #5
   115c8:	ldr	r1, [pc, #736]	; 118b0 <__assert_fail@plt+0x524>
   115cc:	mov	r0, #0
   115d0:	bl	11104 <dcgettext@plt>
   115d4:	ldr	r1, [r4]
   115d8:	bl	11050 <fputs_unlocked@plt>
   115dc:	mov	r2, #5
   115e0:	ldr	r1, [pc, #716]	; 118b4 <__assert_fail@plt+0x528>
   115e4:	mov	r0, #0
   115e8:	bl	11104 <dcgettext@plt>
   115ec:	ldr	r1, [r4]
   115f0:	bl	11050 <fputs_unlocked@plt>
   115f4:	mov	r2, #5
   115f8:	ldr	r1, [pc, #696]	; 118b8 <__assert_fail@plt+0x52c>
   115fc:	mov	r0, #0
   11600:	bl	11104 <dcgettext@plt>
   11604:	ldr	r1, [r4]
   11608:	bl	11050 <fputs_unlocked@plt>
   1160c:	mov	r2, #5
   11610:	ldr	r1, [pc, #676]	; 118bc <__assert_fail@plt+0x530>
   11614:	mov	r0, #0
   11618:	bl	11104 <dcgettext@plt>
   1161c:	ldr	r1, [r4]
   11620:	bl	11050 <fputs_unlocked@plt>
   11624:	mov	r2, #5
   11628:	ldr	r1, [pc, #656]	; 118c0 <__assert_fail@plt+0x534>
   1162c:	mov	r0, #0
   11630:	bl	11104 <dcgettext@plt>
   11634:	ldr	r1, [r4]
   11638:	bl	11050 <fputs_unlocked@plt>
   1163c:	mov	r2, #5
   11640:	ldr	r1, [pc, #636]	; 118c4 <__assert_fail@plt+0x538>
   11644:	mov	r0, #0
   11648:	bl	11104 <dcgettext@plt>
   1164c:	ldr	r1, [r4]
   11650:	bl	11050 <fputs_unlocked@plt>
   11654:	mov	r2, #5
   11658:	ldr	r1, [pc, #616]	; 118c8 <__assert_fail@plt+0x53c>
   1165c:	mov	r0, #0
   11660:	bl	11104 <dcgettext@plt>
   11664:	ldr	r2, [r5]
   11668:	str	r2, [sp]
   1166c:	mov	r3, r2
   11670:	mov	r1, r0
   11674:	mov	r0, #1
   11678:	bl	11260 <__printf_chk@plt>
   1167c:	add	ip, sp, #8
   11680:	ldr	lr, [pc, #580]	; 118cc <__assert_fail@plt+0x540>
   11684:	ldm	lr!, {r0, r1, r2, r3}
   11688:	stmia	ip!, {r0, r1, r2, r3}
   1168c:	ldm	lr!, {r0, r1, r2, r3}
   11690:	stmia	ip!, {r0, r1, r2, r3}
   11694:	ldm	lr!, {r0, r1, r2, r3}
   11698:	stmia	ip!, {r0, r1, r2, r3}
   1169c:	ldm	lr, {r0, r1}
   116a0:	stm	ip, {r0, r1}
   116a4:	ldr	r1, [sp, #8]
   116a8:	cmp	r1, #0
   116ac:	addeq	r4, sp, #8
   116b0:	beq	116d8 <__assert_fail@plt+0x34c>
   116b4:	add	r4, sp, #8
   116b8:	ldr	r5, [pc, #528]	; 118d0 <__assert_fail@plt+0x544>
   116bc:	mov	r0, r5
   116c0:	bl	11074 <strcmp@plt>
   116c4:	cmp	r0, #0
   116c8:	beq	116d8 <__assert_fail@plt+0x34c>
   116cc:	ldr	r1, [r4, #8]!
   116d0:	cmp	r1, #0
   116d4:	bne	116bc <__assert_fail@plt+0x330>
   116d8:	ldr	r4, [r4, #4]
   116dc:	cmp	r4, #0
   116e0:	beq	117f4 <__assert_fail@plt+0x468>
   116e4:	mov	r2, #5
   116e8:	ldr	r1, [pc, #484]	; 118d4 <__assert_fail@plt+0x548>
   116ec:	mov	r0, #0
   116f0:	bl	11104 <dcgettext@plt>
   116f4:	ldr	r3, [pc, #476]	; 118d8 <__assert_fail@plt+0x54c>
   116f8:	ldr	r2, [pc, #476]	; 118dc <__assert_fail@plt+0x550>
   116fc:	mov	r1, r0
   11700:	mov	r0, #1
   11704:	bl	11260 <__printf_chk@plt>
   11708:	mov	r1, #0
   1170c:	mov	r0, #5
   11710:	bl	112a8 <setlocale@plt>
   11714:	cmp	r0, #0
   11718:	beq	11730 <__assert_fail@plt+0x3a4>
   1171c:	mov	r2, #3
   11720:	ldr	r1, [pc, #440]	; 118e0 <__assert_fail@plt+0x554>
   11724:	bl	11338 <strncmp@plt>
   11728:	cmp	r0, #0
   1172c:	bne	11790 <__assert_fail@plt+0x404>
   11730:	mov	r2, #5
   11734:	ldr	r1, [pc, #424]	; 118e4 <__assert_fail@plt+0x558>
   11738:	mov	r0, #0
   1173c:	bl	11104 <dcgettext@plt>
   11740:	ldr	r5, [pc, #392]	; 118d0 <__assert_fail@plt+0x544>
   11744:	mov	r3, r5
   11748:	ldr	r2, [pc, #392]	; 118d8 <__assert_fail@plt+0x54c>
   1174c:	mov	r1, r0
   11750:	mov	r0, #1
   11754:	bl	11260 <__printf_chk@plt>
   11758:	mov	r2, #5
   1175c:	ldr	r1, [pc, #388]	; 118e8 <__assert_fail@plt+0x55c>
   11760:	mov	r0, #0
   11764:	bl	11104 <dcgettext@plt>
   11768:	mov	r1, r0
   1176c:	ldr	r2, [pc, #376]	; 118ec <__assert_fail@plt+0x560>
   11770:	ldr	r3, [pc, #376]	; 118f0 <__assert_fail@plt+0x564>
   11774:	cmp	r4, r5
   11778:	movne	r3, r2
   1177c:	mov	r2, r4
   11780:	mov	r0, #1
   11784:	bl	11260 <__printf_chk@plt>
   11788:	b	11500 <__assert_fail@plt+0x174>
   1178c:	ldr	r4, [pc, #316]	; 118d0 <__assert_fail@plt+0x544>
   11790:	mov	r2, #5
   11794:	ldr	r1, [pc, #344]	; 118f4 <__assert_fail@plt+0x568>
   11798:	mov	r0, #0
   1179c:	bl	11104 <dcgettext@plt>
   117a0:	ldr	r3, [pc, #240]	; 11898 <__assert_fail@plt+0x50c>
   117a4:	ldr	r1, [r3]
   117a8:	bl	11050 <fputs_unlocked@plt>
   117ac:	b	11730 <__assert_fail@plt+0x3a4>
   117b0:	mov	r2, #5
   117b4:	ldr	r1, [pc, #296]	; 118e4 <__assert_fail@plt+0x558>
   117b8:	mov	r0, #0
   117bc:	bl	11104 <dcgettext@plt>
   117c0:	ldr	r4, [pc, #264]	; 118d0 <__assert_fail@plt+0x544>
   117c4:	mov	r3, r4
   117c8:	ldr	r2, [pc, #264]	; 118d8 <__assert_fail@plt+0x54c>
   117cc:	mov	r1, r0
   117d0:	mov	r0, #1
   117d4:	bl	11260 <__printf_chk@plt>
   117d8:	mov	r2, #5
   117dc:	ldr	r1, [pc, #260]	; 118e8 <__assert_fail@plt+0x55c>
   117e0:	mov	r0, #0
   117e4:	bl	11104 <dcgettext@plt>
   117e8:	mov	r1, r0
   117ec:	ldr	r3, [pc, #252]	; 118f0 <__assert_fail@plt+0x564>
   117f0:	b	1177c <__assert_fail@plt+0x3f0>
   117f4:	mov	r2, #5
   117f8:	ldr	r1, [pc, #212]	; 118d4 <__assert_fail@plt+0x548>
   117fc:	mov	r0, #0
   11800:	bl	11104 <dcgettext@plt>
   11804:	ldr	r3, [pc, #204]	; 118d8 <__assert_fail@plt+0x54c>
   11808:	ldr	r2, [pc, #204]	; 118dc <__assert_fail@plt+0x550>
   1180c:	mov	r1, r0
   11810:	mov	r0, #1
   11814:	bl	11260 <__printf_chk@plt>
   11818:	mov	r1, #0
   1181c:	mov	r0, #5
   11820:	bl	112a8 <setlocale@plt>
   11824:	cmp	r0, #0
   11828:	beq	117b0 <__assert_fail@plt+0x424>
   1182c:	mov	r2, #3
   11830:	ldr	r1, [pc, #168]	; 118e0 <__assert_fail@plt+0x554>
   11834:	bl	11338 <strncmp@plt>
   11838:	cmp	r0, #0
   1183c:	bne	1178c <__assert_fail@plt+0x400>
   11840:	mov	r2, #5
   11844:	ldr	r1, [pc, #152]	; 118e4 <__assert_fail@plt+0x558>
   11848:	mov	r0, #0
   1184c:	bl	11104 <dcgettext@plt>
   11850:	ldr	r4, [pc, #120]	; 118d0 <__assert_fail@plt+0x544>
   11854:	mov	r3, r4
   11858:	ldr	r2, [pc, #120]	; 118d8 <__assert_fail@plt+0x54c>
   1185c:	mov	r1, r0
   11860:	mov	r0, #1
   11864:	bl	11260 <__printf_chk@plt>
   11868:	mov	r2, #5
   1186c:	ldr	r1, [pc, #116]	; 118e8 <__assert_fail@plt+0x55c>
   11870:	mov	r0, #0
   11874:	bl	11104 <dcgettext@plt>
   11878:	mov	r1, r0
   1187c:	ldr	r3, [pc, #108]	; 118f0 <__assert_fail@plt+0x564>
   11880:	b	1177c <__assert_fail@plt+0x3f0>
   11884:	muleq	r2, r8, r1
   11888:	andeq	sl, r1, r4, ror #2
   1188c:	andeq	ip, r2, r8, asr #3
   11890:	andeq	sl, r1, ip, lsl #3
   11894:	strdeq	sl, [r1], -r0
   11898:	muleq	r2, ip, r1
   1189c:	andeq	sl, r1, r4, lsl #5
   118a0:	andeq	sl, r1, r0, asr r3
   118a4:	andeq	sl, r1, r8, lsr r4
   118a8:			; <UNDEFINED> instruction: 0x0001a4b0
   118ac:	andeq	sl, r1, r4, lsl #12
   118b0:	andeq	sl, r1, r4, lsl #13
   118b4:	andeq	sl, r1, r0, lsl #14
   118b8:	andeq	sl, r1, r8, asr #14
   118bc:	andeq	sl, r1, ip, lsl r9
   118c0:	andeq	sl, r1, ip, asr #18
   118c4:	andeq	sl, r1, r4, lsl #19
   118c8:	andeq	sl, r1, r4, asr #20
   118cc:	andeq	sl, r1, r4, asr #32
   118d0:	andeq	sl, r1, ip, asr r1
   118d4:	andeq	sl, r1, r0, lsl fp
   118d8:	andeq	sl, r1, r8, lsr #22
   118dc:	andeq	sl, r1, r0, asr fp
   118e0:	andeq	sl, r1, r0, ror #22
   118e4:	andeq	sl, r1, ip, lsr #23
   118e8:	andeq	sl, r1, r8, asr #23
   118ec:	andeq	sl, r1, r8, lsl r9
   118f0:	andeq	sl, r1, ip, asr #25
   118f4:	andeq	sl, r1, r4, ror #22
   118f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118fc:	sub	sp, sp, #172	; 0xac
   11900:	mov	r5, r0
   11904:	mov	r4, r1
   11908:	mvn	r6, #0
   1190c:	str	r6, [sp, #164]	; 0xa4
   11910:	str	r6, [sp, #160]	; 0xa0
   11914:	str	r6, [sp, #156]	; 0x9c
   11918:	str	r6, [sp, #152]	; 0x98
   1191c:	ldr	r0, [r1]
   11920:	bl	160e0 <__assert_fail@plt+0x4d54>
   11924:	ldr	r1, [pc, #1168]	; 11dbc <__assert_fail@plt+0xa30>
   11928:	mov	r0, #6
   1192c:	bl	112a8 <setlocale@plt>
   11930:	ldr	r7, [pc, #1160]	; 11dc0 <__assert_fail@plt+0xa34>
   11934:	ldr	r1, [pc, #1160]	; 11dc4 <__assert_fail@plt+0xa38>
   11938:	mov	r0, r7
   1193c:	bl	11320 <bindtextdomain@plt>
   11940:	mov	r0, r7
   11944:	bl	1111c <textdomain@plt>
   11948:	ldr	r0, [pc, #1144]	; 11dc8 <__assert_fail@plt+0xa3c>
   1194c:	bl	1a020 <__assert_fail@plt+0x8c94>
   11950:	add	r0, sp, #128	; 0x80
   11954:	bl	11eb0 <__assert_fail@plt+0xb24>
   11958:	str	r6, [sp, #20]
   1195c:	mov	r8, #16
   11960:	mov	r9, #0
   11964:	ldr	r7, [pc, #1120]	; 11dcc <__assert_fail@plt+0xa40>
   11968:	ldr	r6, [pc, #1120]	; 11dd0 <__assert_fail@plt+0xa44>
   1196c:	ldr	sl, [pc, #1120]	; 11dd4 <__assert_fail@plt+0xa48>
   11970:	ldr	fp, [pc, #1120]	; 11dd8 <__assert_fail@plt+0xa4c>
   11974:	mov	r3, #0
   11978:	str	r3, [sp]
   1197c:	mov	r3, r7
   11980:	mov	r2, r6
   11984:	mov	r1, r4
   11988:	mov	r0, r5
   1198c:	bl	111dc <getopt_long@plt>
   11990:	cmn	r0, #1
   11994:	beq	11b30 <__assert_fail@plt+0x7a4>
   11998:	cmp	r0, #102	; 0x66
   1199c:	beq	11acc <__assert_fail@plt+0x740>
   119a0:	bgt	119f0 <__assert_fail@plt+0x664>
   119a4:	cmp	r0, #76	; 0x4c
   119a8:	beq	11a48 <__assert_fail@plt+0x6bc>
   119ac:	bgt	119d0 <__assert_fail@plt+0x644>
   119b0:	cmn	r0, #2
   119b4:	beq	11ae4 <__assert_fail@plt+0x758>
   119b8:	cmp	r0, #72	; 0x48
   119bc:	beq	11b28 <__assert_fail@plt+0x79c>
   119c0:	cmn	r0, #3
   119c4:	beq	11aec <__assert_fail@plt+0x760>
   119c8:	mov	r0, #1
   119cc:	bl	114c0 <__assert_fail@plt+0x134>
   119d0:	cmp	r0, #82	; 0x52
   119d4:	beq	11ab4 <__assert_fail@plt+0x728>
   119d8:	cmp	r0, #99	; 0x63
   119dc:	beq	11ac0 <__assert_fail@plt+0x734>
   119e0:	cmp	r0, #80	; 0x50
   119e4:	bne	119c8 <__assert_fail@plt+0x63c>
   119e8:	mov	r8, #16
   119ec:	b	11974 <__assert_fail@plt+0x5e8>
   119f0:	ldr	r3, [pc, #996]	; 11ddc <__assert_fail@plt+0xa50>
   119f4:	cmp	r0, r3
   119f8:	beq	11a6c <__assert_fail@plt+0x6e0>
   119fc:	bgt	11a24 <__assert_fail@plt+0x698>
   11a00:	cmp	r0, #118	; 0x76
   11a04:	beq	11ad8 <__assert_fail@plt+0x74c>
   11a08:	cmp	r0, #256	; 0x100
   11a0c:	beq	11a50 <__assert_fail@plt+0x6c4>
   11a10:	cmp	r0, #104	; 0x68
   11a14:	bne	119c8 <__assert_fail@plt+0x63c>
   11a18:	mov	r3, #0
   11a1c:	str	r3, [sp, #20]
   11a20:	b	11974 <__assert_fail@plt+0x5e8>
   11a24:	ldr	r3, [pc, #948]	; 11de0 <__assert_fail@plt+0xa54>
   11a28:	cmp	r0, r3
   11a2c:	beq	11a64 <__assert_fail@plt+0x6d8>
   11a30:	blt	11a5c <__assert_fail@plt+0x6d0>
   11a34:	cmp	r0, #260	; 0x104
   11a38:	bne	119c8 <__assert_fail@plt+0x63c>
   11a3c:	ldr	r3, [sl]
   11a40:	str	r3, [fp]
   11a44:	b	11974 <__assert_fail@plt+0x5e8>
   11a48:	mov	r8, #2
   11a4c:	b	11974 <__assert_fail@plt+0x5e8>
   11a50:	mov	r3, #1
   11a54:	str	r3, [sp, #20]
   11a58:	b	11974 <__assert_fail@plt+0x5e8>
   11a5c:	mov	r9, #0
   11a60:	b	11974 <__assert_fail@plt+0x5e8>
   11a64:	mov	r9, #1
   11a68:	b	11974 <__assert_fail@plt+0x5e8>
   11a6c:	mov	r3, #0
   11a70:	str	r3, [sp]
   11a74:	add	r2, sp, #152	; 0x98
   11a78:	add	r1, sp, #156	; 0x9c
   11a7c:	ldr	r0, [sl]
   11a80:	bl	17fb4 <__assert_fail@plt+0x6c28>
   11a84:	cmp	r0, #0
   11a88:	beq	11974 <__assert_fail@plt+0x5e8>
   11a8c:	mov	r4, r0
   11a90:	ldr	r3, [pc, #828]	; 11dd4 <__assert_fail@plt+0xa48>
   11a94:	ldr	r0, [r3]
   11a98:	bl	17c30 <__assert_fail@plt+0x68a4>
   11a9c:	str	r0, [sp]
   11aa0:	mov	r3, r4
   11aa4:	ldr	r2, [pc, #824]	; 11de4 <__assert_fail@plt+0xa58>
   11aa8:	mov	r1, #0
   11aac:	mov	r0, #1
   11ab0:	bl	11194 <error@plt>
   11ab4:	mov	r3, #1
   11ab8:	strb	r3, [sp, #132]	; 0x84
   11abc:	b	11974 <__assert_fail@plt+0x5e8>
   11ac0:	mov	r3, #1
   11ac4:	str	r3, [sp, #128]	; 0x80
   11ac8:	b	11974 <__assert_fail@plt+0x5e8>
   11acc:	mov	r3, #1
   11ad0:	strb	r3, [sp, #141]	; 0x8d
   11ad4:	b	11974 <__assert_fail@plt+0x5e8>
   11ad8:	mov	r3, #0
   11adc:	str	r3, [sp, #128]	; 0x80
   11ae0:	b	11974 <__assert_fail@plt+0x5e8>
   11ae4:	mov	r0, #0
   11ae8:	bl	114c0 <__assert_fail@plt+0x134>
   11aec:	mov	r4, #0
   11af0:	str	r4, [sp, #8]
   11af4:	ldr	r3, [pc, #748]	; 11de8 <__assert_fail@plt+0xa5c>
   11af8:	str	r3, [sp, #4]
   11afc:	ldr	r3, [pc, #744]	; 11dec <__assert_fail@plt+0xa60>
   11b00:	str	r3, [sp]
   11b04:	ldr	r3, [pc, #740]	; 11df0 <__assert_fail@plt+0xa64>
   11b08:	ldr	r3, [r3]
   11b0c:	ldr	r2, [pc, #736]	; 11df4 <__assert_fail@plt+0xa68>
   11b10:	ldr	r1, [pc, #736]	; 11df8 <__assert_fail@plt+0xa6c>
   11b14:	ldr	r0, [pc, #736]	; 11dfc <__assert_fail@plt+0xa70>
   11b18:	ldr	r0, [r0]
   11b1c:	bl	18530 <__assert_fail@plt+0x71a4>
   11b20:	mov	r0, r4
   11b24:	bl	111f4 <exit@plt>
   11b28:	mov	r8, #17
   11b2c:	b	11974 <__assert_fail@plt+0x5e8>
   11b30:	ldrb	r3, [sp, #132]	; 0x84
   11b34:	cmp	r3, #0
   11b38:	beq	11b78 <__assert_fail@plt+0x7ec>
   11b3c:	cmp	r8, #16
   11b40:	bne	11b7c <__assert_fail@plt+0x7f0>
   11b44:	ldr	r3, [sp, #20]
   11b48:	cmp	r3, #1
   11b4c:	movne	r3, #0
   11b50:	strne	r3, [sp, #20]
   11b54:	bne	11b7c <__assert_fail@plt+0x7f0>
   11b58:	mov	r2, #5
   11b5c:	ldr	r1, [pc, #668]	; 11e00 <__assert_fail@plt+0xa74>
   11b60:	mov	r0, #0
   11b64:	bl	11104 <dcgettext@plt>
   11b68:	mov	r2, r0
   11b6c:	mov	r1, #0
   11b70:	mov	r0, #1
   11b74:	bl	11194 <error@plt>
   11b78:	mov	r8, #16
   11b7c:	ldr	r3, [sp, #20]
   11b80:	adds	r3, r3, #0
   11b84:	movne	r3, #1
   11b88:	strb	r3, [sp, #140]	; 0x8c
   11b8c:	ldr	r3, [pc, #624]	; 11e04 <__assert_fail@plt+0xa78>
   11b90:	ldr	r0, [r3]
   11b94:	sub	r2, r5, r0
   11b98:	ldr	r3, [pc, #568]	; 11dd8 <__assert_fail@plt+0xa4c>
   11b9c:	ldr	r6, [r3]
   11ba0:	cmp	r6, #0
   11ba4:	beq	11d84 <__assert_fail@plt+0x9f8>
   11ba8:	cmp	r2, #0
   11bac:	ble	11d8c <__assert_fail@plt+0xa00>
   11bb0:	add	r2, sp, #24
   11bb4:	mov	r1, r6
   11bb8:	mov	r0, #3
   11bbc:	bl	1132c <__xstat64@plt>
   11bc0:	cmp	r0, #0
   11bc4:	beq	11c3c <__assert_fail@plt+0x8b0>
   11bc8:	bl	1123c <__errno_location@plt>
   11bcc:	ldr	r4, [r0]
   11bd0:	mov	r2, #5
   11bd4:	ldr	r1, [pc, #556]	; 11e08 <__assert_fail@plt+0xa7c>
   11bd8:	mov	r0, #0
   11bdc:	bl	11104 <dcgettext@plt>
   11be0:	mov	r5, r0
   11be4:	mov	r1, r6
   11be8:	mov	r0, #4
   11bec:	bl	179fc <__assert_fail@plt+0x6670>
   11bf0:	mov	r3, r0
   11bf4:	mov	r2, r5
   11bf8:	mov	r1, r4
   11bfc:	mov	r0, #1
   11c00:	bl	11194 <error@plt>
   11c04:	mov	r2, #5
   11c08:	ldr	r1, [pc, #508]	; 11e0c <__assert_fail@plt+0xa80>
   11c0c:	mov	r0, #0
   11c10:	bl	11104 <dcgettext@plt>
   11c14:	mov	r6, r0
   11c18:	sub	r5, r5, #-1073741823	; 0xc0000001
   11c1c:	ldr	r0, [r4, r5, lsl #2]
   11c20:	bl	17c30 <__assert_fail@plt+0x68a4>
   11c24:	mov	r3, r0
   11c28:	mov	r2, r6
   11c2c:	mov	r1, #0
   11c30:	mov	r0, r1
   11c34:	bl	11194 <error@plt>
   11c38:	b	11db4 <__assert_fail@plt+0xa28>
   11c3c:	ldr	r0, [sp, #48]	; 0x30
   11c40:	str	r0, [sp, #164]	; 0xa4
   11c44:	ldr	r3, [sp, #52]	; 0x34
   11c48:	str	r3, [sp, #160]	; 0xa0
   11c4c:	bl	11f34 <__assert_fail@plt+0xba8>
   11c50:	str	r0, [sp, #144]	; 0x90
   11c54:	ldr	r0, [sp, #52]	; 0x34
   11c58:	bl	11ef8 <__assert_fail@plt+0xb6c>
   11c5c:	str	r0, [sp, #148]	; 0x94
   11c60:	ldrb	r3, [sp, #132]	; 0x84
   11c64:	tst	r9, r3
   11c68:	bne	11d34 <__assert_fail@plt+0x9a8>
   11c6c:	ldr	r3, [pc, #400]	; 11e04 <__assert_fail@plt+0xa78>
   11c70:	ldr	r0, [r3]
   11c74:	add	r3, sp, #128	; 0x80
   11c78:	str	r3, [sp, #8]
   11c7c:	ldr	r3, [sp, #152]	; 0x98
   11c80:	str	r3, [sp, #4]
   11c84:	ldr	r3, [sp, #156]	; 0x9c
   11c88:	str	r3, [sp]
   11c8c:	ldr	r3, [sp, #160]	; 0xa0
   11c90:	ldr	r2, [sp, #164]	; 0xa4
   11c94:	orr	r1, r8, #1024	; 0x400
   11c98:	add	r0, r4, r0, lsl #2
   11c9c:	bl	11f70 <__assert_fail@plt+0xbe4>
   11ca0:	eor	r0, r0, #1
   11ca4:	uxtb	r0, r0
   11ca8:	bl	111f4 <exit@plt>
   11cac:	add	r3, sp, #148	; 0x94
   11cb0:	str	r3, [sp]
   11cb4:	add	r3, sp, #144	; 0x90
   11cb8:	add	r2, sp, #160	; 0xa0
   11cbc:	add	r1, sp, #164	; 0xa4
   11cc0:	ldr	r0, [r4, r0, lsl #2]
   11cc4:	bl	17fb4 <__assert_fail@plt+0x6c28>
   11cc8:	subs	r5, r0, #0
   11ccc:	beq	11cf8 <__assert_fail@plt+0x96c>
   11cd0:	ldr	r3, [pc, #300]	; 11e04 <__assert_fail@plt+0xa78>
   11cd4:	ldr	r3, [r3]
   11cd8:	ldr	r0, [r4, r3, lsl #2]
   11cdc:	bl	17c30 <__assert_fail@plt+0x68a4>
   11ce0:	str	r0, [sp]
   11ce4:	mov	r3, r5
   11ce8:	ldr	r2, [pc, #244]	; 11de4 <__assert_fail@plt+0xa58>
   11cec:	mov	r1, #0
   11cf0:	mov	r0, #1
   11cf4:	bl	11194 <error@plt>
   11cf8:	ldr	r3, [sp, #144]	; 0x90
   11cfc:	cmp	r3, #0
   11d00:	beq	11d18 <__assert_fail@plt+0x98c>
   11d04:	ldr	r2, [pc, #248]	; 11e04 <__assert_fail@plt+0xa78>
   11d08:	ldr	r3, [r2]
   11d0c:	add	r3, r3, #1
   11d10:	str	r3, [r2]
   11d14:	b	11c60 <__assert_fail@plt+0x8d4>
   11d18:	ldr	r3, [sp, #148]	; 0x94
   11d1c:	cmp	r3, #0
   11d20:	beq	11d04 <__assert_fail@plt+0x978>
   11d24:	ldr	r0, [pc, #144]	; 11dbc <__assert_fail@plt+0xa30>
   11d28:	bl	18b84 <__assert_fail@plt+0x77f8>
   11d2c:	str	r0, [sp, #144]	; 0x90
   11d30:	b	11d04 <__assert_fail@plt+0x978>
   11d34:	ldr	r0, [pc, #212]	; 11e10 <__assert_fail@plt+0xa84>
   11d38:	bl	17c44 <__assert_fail@plt+0x68b8>
   11d3c:	str	r0, [sp, #136]	; 0x88
   11d40:	cmp	r0, #0
   11d44:	bne	11c6c <__assert_fail@plt+0x8e0>
   11d48:	bl	1123c <__errno_location@plt>
   11d4c:	ldr	r4, [r0]
   11d50:	mov	r2, #5
   11d54:	ldr	r1, [pc, #172]	; 11e08 <__assert_fail@plt+0xa7c>
   11d58:	mov	r0, #0
   11d5c:	bl	11104 <dcgettext@plt>
   11d60:	mov	r5, r0
   11d64:	ldr	r1, [pc, #168]	; 11e14 <__assert_fail@plt+0xa88>
   11d68:	mov	r0, #4
   11d6c:	bl	179fc <__assert_fail@plt+0x6670>
   11d70:	mov	r3, r0
   11d74:	mov	r2, r5
   11d78:	mov	r1, r4
   11d7c:	mov	r0, #1
   11d80:	bl	11194 <error@plt>
   11d84:	cmp	r2, #1
   11d88:	bgt	11cac <__assert_fail@plt+0x920>
   11d8c:	cmp	r5, r0
   11d90:	bgt	11c04 <__assert_fail@plt+0x878>
   11d94:	mov	r2, #5
   11d98:	ldr	r1, [pc, #120]	; 11e18 <__assert_fail@plt+0xa8c>
   11d9c:	mov	r0, #0
   11da0:	bl	11104 <dcgettext@plt>
   11da4:	mov	r2, r0
   11da8:	mov	r1, #0
   11dac:	mov	r0, r1
   11db0:	bl	11194 <error@plt>
   11db4:	mov	r0, #1
   11db8:	bl	114c0 <__assert_fail@plt+0x134>
   11dbc:	andeq	sl, r1, r8, lsl r9
   11dc0:	andeq	sl, r1, r4, asr fp
   11dc4:	strdeq	sl, [r1], -ip
   11dc8:	andeq	r2, r1, r8, ror #24
   11dcc:	andeq	sl, r1, ip, ror r0
   11dd0:	andeq	sl, r1, ip, lsr ip
   11dd4:	andeq	ip, r2, r0, lsr #3
   11dd8:	andeq	ip, r2, r8, lsr #3
   11ddc:	andeq	r0, r0, r1, lsl #2
   11de0:	andeq	r0, r0, r3, lsl #2
   11de4:	andeq	sl, r1, r4, lsl ip
   11de8:	andeq	sl, r1, ip, lsl ip
   11dec:	andeq	sl, r1, ip, lsr #24
   11df0:	andeq	ip, r2, ip, lsr r1
   11df4:	andeq	sl, r1, r0, asr fp
   11df8:	andeq	sl, r1, ip, asr r1
   11dfc:	muleq	r2, ip, r1
   11e00:	andeq	sl, r1, r8, asr #24
   11e04:	muleq	r2, r0, r1
   11e08:	andeq	sl, r1, r0, lsr #25
   11e0c:	andeq	sl, r1, r4, lsl #25
   11e10:			; <UNDEFINED> instruction: 0x0002c1b0
   11e14:	andeq	sl, r1, r0, asr #25
   11e18:	andeq	sl, r1, r4, ror ip
   11e1c:	push	{r4, r5, r6, lr}
   11e20:	mov	r4, r1
   11e24:	subs	r6, r0, #0
   11e28:	beq	11e8c <__assert_fail@plt+0xb00>
   11e2c:	cmp	r1, #0
   11e30:	beq	11e7c <__assert_fail@plt+0xaf0>
   11e34:	mov	r0, r6
   11e38:	bl	1120c <strlen@plt>
   11e3c:	mov	r5, r0
   11e40:	mov	r0, r4
   11e44:	bl	1120c <strlen@plt>
   11e48:	add	r0, r5, r0
   11e4c:	add	r0, r0, #2
   11e50:	bl	185fc <__assert_fail@plt+0x7270>
   11e54:	mov	r5, r0
   11e58:	mov	r1, r6
   11e5c:	bl	110ec <stpcpy@plt>
   11e60:	ldr	r3, [pc, #68]	; 11eac <__assert_fail@plt+0xb20>
   11e64:	ldrh	r3, [r3]
   11e68:	strh	r3, [r0], #1
   11e6c:	mov	r1, r4
   11e70:	bl	11170 <strcpy@plt>
   11e74:	mov	r0, r5
   11e78:	pop	{r4, r5, r6, pc}
   11e7c:	mov	r0, r6
   11e80:	bl	18b84 <__assert_fail@plt+0x77f8>
   11e84:	mov	r5, r0
   11e88:	b	11e74 <__assert_fail@plt+0xae8>
   11e8c:	cmp	r1, #0
   11e90:	beq	11ea4 <__assert_fail@plt+0xb18>
   11e94:	mov	r0, r1
   11e98:	bl	18b84 <__assert_fail@plt+0x77f8>
   11e9c:	mov	r5, r0
   11ea0:	b	11e74 <__assert_fail@plt+0xae8>
   11ea4:	mov	r5, #0
   11ea8:	b	11e74 <__assert_fail@plt+0xae8>
   11eac:	andeq	sl, r1, r0, asr #27
   11eb0:	mov	r3, #2
   11eb4:	str	r3, [r0]
   11eb8:	mov	r3, #0
   11ebc:	str	r3, [r0, #8]
   11ec0:	mov	r2, #1
   11ec4:	strb	r2, [r0, #12]
   11ec8:	strb	r3, [r0, #4]
   11ecc:	strb	r3, [r0, #13]
   11ed0:	str	r3, [r0, #16]
   11ed4:	str	r3, [r0, #20]
   11ed8:	bx	lr
   11edc:	push	{r4, lr}
   11ee0:	mov	r4, r0
   11ee4:	ldr	r0, [r0, #16]
   11ee8:	bl	12d5c <__assert_fail@plt+0x19d0>
   11eec:	ldr	r0, [r4, #20]
   11ef0:	bl	12d5c <__assert_fail@plt+0x19d0>
   11ef4:	pop	{r4, pc}
   11ef8:	push	{r4, lr}
   11efc:	sub	sp, sp, #24
   11f00:	mov	r4, r0
   11f04:	bl	11374 <getgrgid@plt>
   11f08:	cmp	r0, #0
   11f0c:	beq	11f20 <__assert_fail@plt+0xb94>
   11f10:	ldr	r0, [r0]
   11f14:	bl	18b84 <__assert_fail@plt+0x77f8>
   11f18:	add	sp, sp, #24
   11f1c:	pop	{r4, pc}
   11f20:	mov	r2, sp
   11f24:	mov	r0, r4
   11f28:	mov	r1, #0
   11f2c:	bl	15fe0 <__assert_fail@plt+0x4c54>
   11f30:	b	11f14 <__assert_fail@plt+0xb88>
   11f34:	push	{r4, lr}
   11f38:	sub	sp, sp, #24
   11f3c:	mov	r4, r0
   11f40:	bl	11080 <getpwuid@plt>
   11f44:	cmp	r0, #0
   11f48:	beq	11f5c <__assert_fail@plt+0xbd0>
   11f4c:	ldr	r0, [r0]
   11f50:	bl	18b84 <__assert_fail@plt+0x77f8>
   11f54:	add	sp, sp, #24
   11f58:	pop	{r4, pc}
   11f5c:	mov	r2, sp
   11f60:	mov	r0, r4
   11f64:	mov	r1, #0
   11f68:	bl	15fe0 <__assert_fail@plt+0x4c54>
   11f6c:	b	11f50 <__assert_fail@plt+0xbc4>
   11f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f74:	sub	sp, sp, #260	; 0x104
   11f78:	str	r2, [sp, #24]
   11f7c:	str	r3, [sp, #36]	; 0x24
   11f80:	ldr	r9, [sp, #304]	; 0x130
   11f84:	ldr	r3, [sp, #300]	; 0x12c
   11f88:	ldr	r2, [sp, #296]	; 0x128
   11f8c:	cmn	r2, #1
   11f90:	cmneq	r3, #1
   11f94:	movne	r3, #0
   11f98:	bne	11fbc <__assert_fail@plt+0xc30>
   11f9c:	ldrb	r3, [r9, #12]
   11fa0:	cmp	r3, #0
   11fa4:	movne	r3, #0
   11fa8:	bne	11fbc <__assert_fail@plt+0xc30>
   11fac:	ldr	r3, [r9]
   11fb0:	cmp	r3, #2
   11fb4:	moveq	r3, #8
   11fb8:	movne	r3, #0
   11fbc:	mov	r2, #0
   11fc0:	orr	r1, r3, r1
   11fc4:	bl	18be0 <__assert_fail@plt+0x7854>
   11fc8:	str	r0, [sp, #12]
   11fcc:	mov	fp, #1
   11fd0:	b	128bc <__assert_fail@plt+0x1530>
   11fd4:	bl	1123c <__errno_location@plt>
   11fd8:	mov	r4, r0
   11fdc:	ldr	r5, [r0]
   11fe0:	cmp	r5, #0
   11fe4:	beq	11ff8 <__assert_fail@plt+0xc6c>
   11fe8:	ldrb	fp, [r9, #13]
   11fec:	cmp	fp, #0
   11ff0:	movne	fp, #0
   11ff4:	beq	12014 <__assert_fail@plt+0xc88>
   11ff8:	ldr	r0, [sp, #12]
   11ffc:	bl	14634 <__assert_fail@plt+0x32a8>
   12000:	cmp	r0, #0
   12004:	bne	12a2c <__assert_fail@plt+0x16a0>
   12008:	mov	r0, fp
   1200c:	add	sp, sp, #260	; 0x104
   12010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12014:	mov	r2, #5
   12018:	ldr	r1, [pc, #3012]	; 12be4 <__assert_fail@plt+0x1858>
   1201c:	mov	r0, #0
   12020:	bl	11104 <dcgettext@plt>
   12024:	mov	r2, r0
   12028:	mov	r1, r5
   1202c:	mov	r0, #0
   12030:	bl	11194 <error@plt>
   12034:	b	11ff8 <__assert_fail@plt+0xc6c>
   12038:	ldrb	r7, [r9, #4]
   1203c:	cmp	r7, #0
   12040:	beq	12350 <__assert_fail@plt+0xfc4>
   12044:	ldr	ip, [r9, #8]
   12048:	cmp	ip, #0
   1204c:	beq	128b8 <__assert_fail@plt+0x152c>
   12050:	ldrd	r0, [r5, #160]	; 0xa0
   12054:	ldrd	r2, [ip]
   12058:	cmp	r1, r3
   1205c:	cmpeq	r0, r2
   12060:	bne	128b8 <__assert_fail@plt+0x152c>
   12064:	ldrd	r2, [r5, #64]	; 0x40
   12068:	ldrd	r0, [ip, #8]
   1206c:	cmp	r3, r1
   12070:	cmpeq	r2, r0
   12074:	bne	128b8 <__assert_fail@plt+0x152c>
   12078:	ldr	r1, [pc, #2920]	; 12be8 <__assert_fail@plt+0x185c>
   1207c:	mov	r0, sl
   12080:	bl	11074 <strcmp@plt>
   12084:	cmp	r0, #0
   12088:	bne	12100 <__assert_fail@plt+0xd74>
   1208c:	mov	r2, #5
   12090:	ldr	r1, [pc, #2900]	; 12bec <__assert_fail@plt+0x1860>
   12094:	bl	11104 <dcgettext@plt>
   12098:	mov	r4, r0
   1209c:	mov	r1, sl
   120a0:	mov	r0, #4
   120a4:	bl	179fc <__assert_fail@plt+0x6670>
   120a8:	mov	r3, r0
   120ac:	mov	r2, r4
   120b0:	mov	r1, #0
   120b4:	mov	r0, r1
   120b8:	bl	11194 <error@plt>
   120bc:	mov	r2, #5
   120c0:	ldr	r1, [pc, #2856]	; 12bf0 <__assert_fail@plt+0x1864>
   120c4:	mov	r0, #0
   120c8:	bl	11104 <dcgettext@plt>
   120cc:	mov	r2, r0
   120d0:	mov	r1, #0
   120d4:	mov	r0, r1
   120d8:	bl	11194 <error@plt>
   120dc:	mov	r2, #4
   120e0:	mov	r1, r5
   120e4:	ldr	r4, [sp, #12]
   120e8:	mov	r0, r4
   120ec:	bl	14e08 <__assert_fail@plt+0x3a7c>
   120f0:	mov	r0, r4
   120f4:	bl	14798 <__assert_fail@plt+0x340c>
   120f8:	mov	r7, #0
   120fc:	b	128b8 <__assert_fail@plt+0x152c>
   12100:	mov	r2, #5
   12104:	ldr	r1, [pc, #2792]	; 12bf4 <__assert_fail@plt+0x1868>
   12108:	mov	r0, #0
   1210c:	bl	11104 <dcgettext@plt>
   12110:	mov	r4, r0
   12114:	mov	r2, sl
   12118:	mov	r1, #4
   1211c:	mov	r0, #0
   12120:	bl	17990 <__assert_fail@plt+0x6604>
   12124:	mov	r6, r0
   12128:	ldr	r2, [pc, #2744]	; 12be8 <__assert_fail@plt+0x185c>
   1212c:	mov	r1, #4
   12130:	mov	r0, #1
   12134:	bl	17990 <__assert_fail@plt+0x6604>
   12138:	str	r0, [sp]
   1213c:	mov	r3, r6
   12140:	mov	r2, r4
   12144:	mov	r1, #0
   12148:	mov	r0, r1
   1214c:	bl	11194 <error@plt>
   12150:	b	120bc <__assert_fail@plt+0xd30>
   12154:	ldrb	r3, [r9, #4]
   12158:	cmp	r3, #0
   1215c:	moveq	r7, #1
   12160:	bne	12350 <__assert_fail@plt+0xfc4>
   12164:	b	128b8 <__assert_fail@plt+0x152c>
   12168:	ldr	r3, [r5, #48]	; 0x30
   1216c:	cmp	r3, #0
   12170:	bne	12180 <__assert_fail@plt+0xdf4>
   12174:	ldr	r3, [r5, #16]
   12178:	cmp	r3, #0
   1217c:	beq	121c8 <__assert_fail@plt+0xe3c>
   12180:	ldrb	r3, [r9, #13]
   12184:	cmp	r3, #0
   12188:	bne	121f0 <__assert_fail@plt+0xe64>
   1218c:	ldr	r4, [r5, #32]
   12190:	mov	r2, #5
   12194:	ldr	r1, [pc, #2652]	; 12bf8 <__assert_fail@plt+0x186c>
   12198:	mov	r0, #0
   1219c:	bl	11104 <dcgettext@plt>
   121a0:	mov	r6, r0
   121a4:	mov	r1, sl
   121a8:	mov	r0, #4
   121ac:	bl	179fc <__assert_fail@plt+0x6670>
   121b0:	mov	r3, r0
   121b4:	mov	r2, r6
   121b8:	mov	r1, r4
   121bc:	mov	r0, #0
   121c0:	bl	11194 <error@plt>
   121c4:	b	121f0 <__assert_fail@plt+0xe64>
   121c8:	mov	r7, #1
   121cc:	str	r7, [r5, #16]
   121d0:	mov	r2, r7
   121d4:	mov	r1, r5
   121d8:	ldr	r0, [sp, #12]
   121dc:	bl	14e08 <__assert_fail@plt+0x3a7c>
   121e0:	b	128b8 <__assert_fail@plt+0x152c>
   121e4:	ldrb	r3, [r9, #13]
   121e8:	cmp	r3, #0
   121ec:	beq	122c8 <__assert_fail@plt+0xf3c>
   121f0:	mov	r8, #0
   121f4:	mov	r4, r8
   121f8:	mov	r7, r8
   121fc:	cmp	r8, #0
   12200:	beq	12ab8 <__assert_fail@plt+0x172c>
   12204:	ldrb	r6, [r9, #12]
   12208:	cmp	r6, #0
   1220c:	bne	12610 <__assert_fail@plt+0x1284>
   12210:	ldr	r3, [sp, #12]
   12214:	ldr	r3, [r3, #32]
   12218:	str	r3, [sp, #20]
   1221c:	mov	r3, #256	; 0x100
   12220:	str	r3, [sp]
   12224:	ldr	r3, [sp, #36]	; 0x24
   12228:	ldr	r2, [sp, #24]
   1222c:	ldr	r1, [sp, #16]
   12230:	ldr	r0, [sp, #20]
   12234:	bl	11314 <fchownat@plt>
   12238:	cmp	r0, #0
   1223c:	moveq	r7, #1
   12240:	movne	r7, #0
   12244:	beq	12258 <__assert_fail@plt+0xecc>
   12248:	bl	1123c <__errno_location@plt>
   1224c:	ldr	r3, [r0]
   12250:	cmp	r3, #95	; 0x5f
   12254:	beq	12a60 <__assert_fail@plt+0x16d4>
   12258:	cmp	r7, #0
   1225c:	bne	12af4 <__assert_fail@plt+0x1768>
   12260:	ldrb	r3, [r9, #13]
   12264:	cmp	r3, #0
   12268:	bne	122b4 <__assert_fail@plt+0xf28>
   1226c:	bl	1123c <__errno_location@plt>
   12270:	ldr	r6, [r0]
   12274:	ldr	r3, [sp, #24]
   12278:	cmn	r3, #1
   1227c:	mov	r2, #5
   12280:	ldrne	r1, [pc, #2420]	; 12bfc <__assert_fail@plt+0x1870>
   12284:	ldreq	r1, [pc, #2420]	; 12c00 <__assert_fail@plt+0x1874>
   12288:	mov	r0, #0
   1228c:	bl	11104 <dcgettext@plt>
   12290:	mov	r7, r0
   12294:	mov	r1, sl
   12298:	mov	r0, #4
   1229c:	bl	179fc <__assert_fail@plt+0x6670>
   122a0:	mov	r3, r0
   122a4:	mov	r2, r7
   122a8:	mov	r1, r6
   122ac:	mov	r0, #0
   122b0:	bl	11194 <error@plt>
   122b4:	ldr	r3, [r9]
   122b8:	cmp	r3, #2
   122bc:	bne	12838 <__assert_fail@plt+0x14ac>
   122c0:	mov	r7, #0
   122c4:	b	128ac <__assert_fail@plt+0x1520>
   122c8:	ldr	r4, [r5, #32]
   122cc:	mov	r2, sl
   122d0:	mov	r1, #3
   122d4:	mov	r0, #0
   122d8:	bl	17ac8 <__assert_fail@plt+0x673c>
   122dc:	mov	r3, r0
   122e0:	ldr	r2, [pc, #2332]	; 12c04 <__assert_fail@plt+0x1878>
   122e4:	mov	r1, r4
   122e8:	mov	r0, #0
   122ec:	bl	11194 <error@plt>
   122f0:	b	121f0 <__assert_fail@plt+0xe64>
   122f4:	ldrb	r3, [r9, #13]
   122f8:	cmp	r3, #0
   122fc:	bne	121f0 <__assert_fail@plt+0xe64>
   12300:	ldr	r4, [r5, #32]
   12304:	mov	r2, #5
   12308:	ldr	r1, [pc, #2296]	; 12c08 <__assert_fail@plt+0x187c>
   1230c:	mov	r0, #0
   12310:	bl	11104 <dcgettext@plt>
   12314:	mov	r6, r0
   12318:	mov	r1, sl
   1231c:	mov	r0, #4
   12320:	bl	179fc <__assert_fail@plt+0x6670>
   12324:	mov	r3, r0
   12328:	mov	r2, r6
   1232c:	mov	r1, r4
   12330:	mov	r0, #0
   12334:	bl	11194 <error@plt>
   12338:	b	121f0 <__assert_fail@plt+0xe64>
   1233c:	mov	r1, r5
   12340:	ldr	r0, [sp, #12]
   12344:	bl	18c28 <__assert_fail@plt+0x789c>
   12348:	cmp	r0, #0
   1234c:	bne	12484 <__assert_fail@plt+0x10f8>
   12350:	ldr	r3, [sp, #300]	; 0x12c
   12354:	ldr	r2, [sp, #296]	; 0x128
   12358:	cmn	r3, #1
   1235c:	cmneq	r2, #1
   12360:	moveq	r7, #1
   12364:	movne	r7, #0
   12368:	bne	12378 <__assert_fail@plt+0xfec>
   1236c:	ldr	r3, [r9]
   12370:	cmp	r3, #2
   12374:	beq	124c4 <__assert_fail@plt+0x1138>
   12378:	add	r4, r5, #64	; 0x40
   1237c:	ldrb	r3, [r9, #12]
   12380:	cmp	r3, #0
   12384:	bne	124e8 <__assert_fail@plt+0x115c>
   12388:	ldr	r3, [sp, #296]	; 0x128
   1238c:	cmn	r3, #1
   12390:	beq	12584 <__assert_fail@plt+0x11f8>
   12394:	ldr	r3, [r4, #24]
   12398:	ldr	r2, [sp, #296]	; 0x128
   1239c:	cmp	r2, r3
   123a0:	movne	r7, #1
   123a4:	movne	r8, #0
   123a8:	beq	12584 <__assert_fail@plt+0x11f8>
   123ac:	cmp	r7, #0
   123b0:	beq	121fc <__assert_fail@plt+0xe70>
   123b4:	ldrh	r3, [r5, #56]	; 0x38
   123b8:	sub	ip, r3, #1
   123bc:	uxth	ip, ip
   123c0:	bic	r3, r3, #2
   123c4:	uxth	r3, r3
   123c8:	cmp	r3, #4
   123cc:	cmpne	ip, #1
   123d0:	movls	ip, #1
   123d4:	movhi	ip, #0
   123d8:	bhi	121fc <__assert_fail@plt+0xe70>
   123dc:	ldr	lr, [r9, #8]
   123e0:	cmp	lr, #0
   123e4:	beq	12608 <__assert_fail@plt+0x127c>
   123e8:	ldrd	r0, [r4, #96]	; 0x60
   123ec:	ldrd	r2, [lr]
   123f0:	cmp	r1, r3
   123f4:	cmpeq	r0, r2
   123f8:	movne	r7, ip
   123fc:	bne	121fc <__assert_fail@plt+0xe70>
   12400:	ldrd	r0, [r4]
   12404:	ldrd	r2, [lr, #8]
   12408:	cmp	r1, r3
   1240c:	cmpeq	r0, r2
   12410:	movne	r7, ip
   12414:	bne	121fc <__assert_fail@plt+0xe70>
   12418:	ldr	r1, [pc, #1992]	; 12be8 <__assert_fail@plt+0x185c>
   1241c:	mov	r0, sl
   12420:	bl	11074 <strcmp@plt>
   12424:	cmp	r0, #0
   12428:	bne	125b4 <__assert_fail@plt+0x1228>
   1242c:	mov	r2, #5
   12430:	ldr	r1, [pc, #1972]	; 12bec <__assert_fail@plt+0x1860>
   12434:	bl	11104 <dcgettext@plt>
   12438:	mov	r4, r0
   1243c:	mov	r1, sl
   12440:	mov	r0, #4
   12444:	bl	179fc <__assert_fail@plt+0x6670>
   12448:	mov	r3, r0
   1244c:	mov	r2, r4
   12450:	mov	r1, #0
   12454:	mov	r0, r1
   12458:	bl	11194 <error@plt>
   1245c:	mov	r2, #5
   12460:	ldr	r1, [pc, #1928]	; 12bf0 <__assert_fail@plt+0x1864>
   12464:	mov	r0, #0
   12468:	bl	11104 <dcgettext@plt>
   1246c:	mov	r2, r0
   12470:	mov	r1, #0
   12474:	mov	r0, r1
   12478:	bl	11194 <error@plt>
   1247c:	mov	r7, #0
   12480:	b	128b8 <__assert_fail@plt+0x152c>
   12484:	mov	r2, #5
   12488:	ldr	r1, [pc, #1916]	; 12c0c <__assert_fail@plt+0x1880>
   1248c:	mov	r0, #0
   12490:	bl	11104 <dcgettext@plt>
   12494:	mov	r4, r0
   12498:	mov	r2, sl
   1249c:	mov	r1, #3
   124a0:	mov	r0, #0
   124a4:	bl	17ac8 <__assert_fail@plt+0x673c>
   124a8:	mov	r3, r0
   124ac:	mov	r2, r4
   124b0:	mov	r1, #0
   124b4:	mov	r0, r1
   124b8:	bl	11194 <error@plt>
   124bc:	mov	r7, #0
   124c0:	b	128b8 <__assert_fail@plt+0x152c>
   124c4:	ldr	r3, [r9, #8]
   124c8:	cmp	r3, #0
   124cc:	bne	12378 <__assert_fail@plt+0xfec>
   124d0:	ldrb	r3, [r9, #12]
   124d4:	cmp	r3, #0
   124d8:	addeq	r4, r5, #64	; 0x40
   124dc:	moveq	r8, r7
   124e0:	beq	121fc <__assert_fail@plt+0xe70>
   124e4:	add	r4, r5, #64	; 0x40
   124e8:	ldr	r3, [r5, #80]	; 0x50
   124ec:	and	r3, r3, #61440	; 0xf000
   124f0:	cmp	r3, #40960	; 0xa000
   124f4:	bne	12388 <__assert_fail@plt+0xffc>
   124f8:	ldr	r3, [sp, #12]
   124fc:	ldr	r3, [r3, #32]
   12500:	str	r3, [sp, #20]
   12504:	mov	r3, #0
   12508:	str	r3, [sp]
   1250c:	add	r3, sp, #48	; 0x30
   12510:	ldr	r2, [sp, #16]
   12514:	ldr	r1, [sp, #20]
   12518:	mov	r0, #3
   1251c:	bl	11128 <__fxstatat64@plt>
   12520:	cmp	r0, #0
   12524:	beq	12a58 <__assert_fail@plt+0x16cc>
   12528:	ldrb	r3, [r9, #13]
   1252c:	cmp	r3, #0
   12530:	beq	12544 <__assert_fail@plt+0x11b8>
   12534:	add	r4, sp, #48	; 0x30
   12538:	mov	r7, #0
   1253c:	mov	r8, r7
   12540:	b	123ac <__assert_fail@plt+0x1020>
   12544:	bl	1123c <__errno_location@plt>
   12548:	ldr	r4, [r0]
   1254c:	mov	r2, #5
   12550:	ldr	r1, [pc, #1720]	; 12c10 <__assert_fail@plt+0x1884>
   12554:	mov	r0, #0
   12558:	bl	11104 <dcgettext@plt>
   1255c:	mov	r6, r0
   12560:	mov	r1, sl
   12564:	mov	r0, #4
   12568:	bl	179fc <__assert_fail@plt+0x6670>
   1256c:	mov	r3, r0
   12570:	mov	r2, r6
   12574:	mov	r1, r4
   12578:	mov	r0, #0
   1257c:	bl	11194 <error@plt>
   12580:	b	12534 <__assert_fail@plt+0x11a8>
   12584:	ldr	r3, [sp, #300]	; 0x12c
   12588:	cmn	r3, #1
   1258c:	beq	125a8 <__assert_fail@plt+0x121c>
   12590:	ldr	r8, [r4, #28]
   12594:	cmp	r8, r3
   12598:	movne	r8, #0
   1259c:	moveq	r8, #1
   125a0:	mov	r7, #1
   125a4:	b	123ac <__assert_fail@plt+0x1020>
   125a8:	mov	r7, #1
   125ac:	mov	r8, r7
   125b0:	b	123ac <__assert_fail@plt+0x1020>
   125b4:	mov	r2, #5
   125b8:	ldr	r1, [pc, #1588]	; 12bf4 <__assert_fail@plt+0x1868>
   125bc:	mov	r0, #0
   125c0:	bl	11104 <dcgettext@plt>
   125c4:	mov	r4, r0
   125c8:	mov	r2, sl
   125cc:	mov	r1, #4
   125d0:	mov	r0, #0
   125d4:	bl	17990 <__assert_fail@plt+0x6604>
   125d8:	mov	r5, r0
   125dc:	ldr	r2, [pc, #1540]	; 12be8 <__assert_fail@plt+0x185c>
   125e0:	mov	r1, #4
   125e4:	mov	r0, #1
   125e8:	bl	17990 <__assert_fail@plt+0x6604>
   125ec:	str	r0, [sp]
   125f0:	mov	r3, r5
   125f4:	mov	r2, r4
   125f8:	mov	r1, #0
   125fc:	mov	r0, r1
   12600:	bl	11194 <error@plt>
   12604:	b	1245c <__assert_fail@plt+0x10d0>
   12608:	mov	r7, ip
   1260c:	b	121fc <__assert_fail@plt+0xe70>
   12610:	ldr	r3, [sp, #300]	; 0x12c
   12614:	ldr	r2, [sp, #296]	; 0x128
   12618:	cmn	r3, #1
   1261c:	cmneq	r2, #1
   12620:	moveq	r3, #1
   12624:	movne	r3, #0
   12628:	str	r3, [sp, #20]
   1262c:	bne	12664 <__assert_fail@plt+0x12d8>
   12630:	ldr	r3, [sp, #12]
   12634:	ldr	r3, [r3, #32]
   12638:	str	r3, [sp, #20]
   1263c:	mov	r3, #0
   12640:	str	r3, [sp]
   12644:	ldr	r3, [sp, #36]	; 0x24
   12648:	ldr	r2, [sp, #24]
   1264c:	ldr	r1, [sp, #16]
   12650:	ldr	r0, [sp, #20]
   12654:	bl	11314 <fchownat@plt>
   12658:	clz	r7, r0
   1265c:	lsr	r7, r7, #5
   12660:	b	12258 <__assert_fail@plt+0xecc>
   12664:	ldr	r3, [r4, #16]
   12668:	and	r3, r3, #61440	; 0xf000
   1266c:	cmp	r3, #32768	; 0x8000
   12670:	beq	12688 <__assert_fail@plt+0x12fc>
   12674:	cmp	r3, #16384	; 0x4000
   12678:	moveq	r3, #18688	; 0x4900
   1267c:	streq	r3, [sp, #32]
   12680:	bne	12630 <__assert_fail@plt+0x12a4>
   12684:	b	12690 <__assert_fail@plt+0x1304>
   12688:	mov	r3, #2304	; 0x900
   1268c:	str	r3, [sp, #32]
   12690:	ldr	r3, [sp, #12]
   12694:	ldr	r3, [r3, #32]
   12698:	str	r3, [sp, #40]	; 0x28
   1269c:	ldr	r2, [sp, #32]
   126a0:	ldr	r1, [sp, #16]
   126a4:	mov	r0, r3
   126a8:	bl	110b0 <__openat64_2@plt>
   126ac:	subs	r3, r0, #0
   126b0:	str	r3, [sp, #28]
   126b4:	blt	12738 <__assert_fail@plt+0x13ac>
   126b8:	add	r2, sp, #152	; 0x98
   126bc:	ldr	r1, [sp, #28]
   126c0:	mov	r0, #3
   126c4:	bl	11140 <__fxstat64@plt>
   126c8:	cmp	r0, #0
   126cc:	bne	12828 <__assert_fail@plt+0x149c>
   126d0:	ldrd	r0, [r4, #96]	; 0x60
   126d4:	ldrd	r2, [sp, #248]	; 0xf8
   126d8:	cmp	r1, r3
   126dc:	cmpeq	r0, r2
   126e0:	movne	r3, #4
   126e4:	strne	r3, [sp, #44]	; 0x2c
   126e8:	beq	12790 <__assert_fail@plt+0x1404>
   126ec:	bl	1123c <__errno_location@plt>
   126f0:	str	r0, [sp, #32]
   126f4:	ldr	r2, [r0]
   126f8:	str	r2, [sp, #40]	; 0x28
   126fc:	ldr	r0, [sp, #28]
   12700:	bl	11350 <close@plt>
   12704:	ldr	r3, [sp, #32]
   12708:	ldr	r2, [sp, #40]	; 0x28
   1270c:	str	r2, [r3]
   12710:	ldr	r3, [sp, #44]	; 0x2c
   12714:	sub	r3, r3, #2
   12718:	cmp	r3, #4
   1271c:	ldrls	pc, [pc, r3, lsl #2]
   12720:	b	12834 <__assert_fail@plt+0x14a8>
   12724:	andeq	r2, r1, r8, asr r2
   12728:			; <UNDEFINED> instruction: 0x00012ab0
   1272c:			; <UNDEFINED> instruction: 0x00012ab0
   12730:	andeq	r2, r1, r0, lsr r6
   12734:	andeq	r2, r1, r0, ror #4
   12738:	bl	1123c <__errno_location@plt>
   1273c:	str	r0, [sp, #44]	; 0x2c
   12740:	ldr	r3, [r0]
   12744:	cmp	r3, #13
   12748:	bne	12260 <__assert_fail@plt+0xed4>
   1274c:	ldr	r3, [r4, #16]
   12750:	and	r3, r3, #61440	; 0xf000
   12754:	cmp	r3, #32768	; 0x8000
   12758:	bne	12630 <__assert_fail@plt+0x12a4>
   1275c:	ldr	r3, [sp, #32]
   12760:	orr	r2, r3, #1
   12764:	ldr	r1, [sp, #16]
   12768:	ldr	r0, [sp, #40]	; 0x28
   1276c:	bl	110b0 <__openat64_2@plt>
   12770:	subs	r3, r0, #0
   12774:	str	r3, [sp, #28]
   12778:	bge	126b8 <__assert_fail@plt+0x132c>
   1277c:	ldr	r3, [sp, #44]	; 0x2c
   12780:	ldr	r3, [r3]
   12784:	cmp	r3, #13
   12788:	beq	12630 <__assert_fail@plt+0x12a4>
   1278c:	b	12260 <__assert_fail@plt+0xed4>
   12790:	ldrd	r0, [r4]
   12794:	ldrd	r2, [sp, #152]	; 0x98
   12798:	cmp	r1, r3
   1279c:	cmpeq	r0, r2
   127a0:	movne	r3, #4
   127a4:	strne	r3, [sp, #44]	; 0x2c
   127a8:	bne	126ec <__assert_fail@plt+0x1360>
   127ac:	ldr	r3, [sp, #296]	; 0x128
   127b0:	cmn	r3, #1
   127b4:	beq	127dc <__assert_fail@plt+0x1450>
   127b8:	ldr	r3, [sp, #176]	; 0xb0
   127bc:	ldr	r2, [sp, #296]	; 0x128
   127c0:	cmp	r2, r3
   127c4:	movne	r3, #2
   127c8:	strne	r3, [sp, #44]	; 0x2c
   127cc:	bne	126ec <__assert_fail@plt+0x1360>
   127d0:	ldr	r3, [sp, #300]	; 0x12c
   127d4:	cmn	r3, #1
   127d8:	beq	127f4 <__assert_fail@plt+0x1468>
   127dc:	ldr	r3, [sp, #180]	; 0xb4
   127e0:	ldr	r2, [sp, #300]	; 0x12c
   127e4:	cmp	r2, r3
   127e8:	movne	r3, #2
   127ec:	strne	r3, [sp, #44]	; 0x2c
   127f0:	bne	126ec <__assert_fail@plt+0x1360>
   127f4:	ldr	r2, [sp, #36]	; 0x24
   127f8:	ldr	r1, [sp, #24]
   127fc:	ldr	r0, [sp, #28]
   12800:	bl	11230 <fchown@plt>
   12804:	cmp	r0, #0
   12808:	movne	r3, #6
   1280c:	strne	r3, [sp, #44]	; 0x2c
   12810:	bne	126ec <__assert_fail@plt+0x1360>
   12814:	ldr	r0, [sp, #28]
   12818:	bl	11350 <close@plt>
   1281c:	cmp	r0, #0
   12820:	beq	12258 <__assert_fail@plt+0xecc>
   12824:	b	12260 <__assert_fail@plt+0xed4>
   12828:	mov	r3, #6
   1282c:	str	r3, [sp, #44]	; 0x2c
   12830:	b	126ec <__assert_fail@plt+0x1360>
   12834:	bl	11344 <abort@plt>
   12838:	mov	r6, r8
   1283c:	mov	r7, #0
   12840:	b	12ac8 <__assert_fail@plt+0x173c>
   12844:	cmp	r4, #0
   12848:	beq	12914 <__assert_fail@plt+0x1588>
   1284c:	mov	r2, #5
   12850:	ldr	r1, [pc, #956]	; 12c14 <__assert_fail@plt+0x1888>
   12854:	mov	r0, #0
   12858:	bl	11104 <dcgettext@plt>
   1285c:	mov	r4, r0
   12860:	mov	r1, sl
   12864:	mov	r0, #4
   12868:	bl	179fc <__assert_fail@plt+0x6670>
   1286c:	ldr	r6, [sp, #32]
   12870:	str	r6, [sp]
   12874:	ldr	r8, [sp, #28]
   12878:	mov	r3, r8
   1287c:	mov	r2, r0
   12880:	mov	r1, r4
   12884:	mov	r0, #1
   12888:	bl	11260 <__printf_chk@plt>
   1288c:	mov	r0, r8
   12890:	bl	12d5c <__assert_fail@plt+0x19d0>
   12894:	mov	r0, r6
   12898:	bl	12d5c <__assert_fail@plt+0x19d0>
   1289c:	ldr	r0, [sp, #20]
   128a0:	bl	12d5c <__assert_fail@plt+0x19d0>
   128a4:	ldr	r0, [sp, #16]
   128a8:	bl	12d5c <__assert_fail@plt+0x19d0>
   128ac:	ldrb	r3, [r9, #4]
   128b0:	cmp	r3, #0
   128b4:	beq	12a18 <__assert_fail@plt+0x168c>
   128b8:	and	fp, fp, r7
   128bc:	ldr	r0, [sp, #12]
   128c0:	bl	14798 <__assert_fail@plt+0x340c>
   128c4:	subs	r5, r0, #0
   128c8:	beq	11fd4 <__assert_fail@plt+0xc48>
   128cc:	ldr	sl, [r5, #28]
   128d0:	ldr	r3, [r5, #24]
   128d4:	str	r3, [sp, #16]
   128d8:	ldrh	r3, [r5, #56]	; 0x38
   128dc:	sub	r3, r3, #1
   128e0:	cmp	r3, #9
   128e4:	ldrls	pc, [pc, r3, lsl #2]
   128e8:	b	12350 <__assert_fail@plt+0xfc4>
   128ec:	andeq	r2, r1, r8, lsr r0
   128f0:	andeq	r2, r1, ip, lsr r3
   128f4:	andeq	r2, r1, r0, asr r3
   128f8:	strdeq	r2, [r1], -r4
   128fc:	andeq	r2, r1, r0, asr r3
   12900:	andeq	r2, r1, r4, asr r1
   12904:	andeq	r2, r1, r4, ror #3
   12908:	andeq	r2, r1, r0, asr r3
   1290c:	andeq	r2, r1, r0, asr r3
   12910:	andeq	r2, r1, r8, ror #2
   12914:	cmp	r6, #0
   12918:	mov	r2, #5
   1291c:	ldrne	r1, [pc, #756]	; 12c18 <__assert_fail@plt+0x188c>
   12920:	ldreq	r1, [pc, #756]	; 12c1c <__assert_fail@plt+0x1890>
   12924:	mov	r0, #0
   12928:	bl	11104 <dcgettext@plt>
   1292c:	mov	r4, r0
   12930:	b	12860 <__assert_fail@plt+0x14d4>
   12934:	ldr	r3, [sp, #28]
   12938:	cmp	r3, #0
   1293c:	beq	12980 <__assert_fail@plt+0x15f4>
   12940:	cmp	r4, #0
   12944:	beq	12960 <__assert_fail@plt+0x15d4>
   12948:	mov	r2, #5
   1294c:	ldr	r1, [pc, #716]	; 12c20 <__assert_fail@plt+0x1894>
   12950:	mov	r0, #0
   12954:	bl	11104 <dcgettext@plt>
   12958:	mov	r4, r0
   1295c:	b	12860 <__assert_fail@plt+0x14d4>
   12960:	cmp	r6, #0
   12964:	mov	r2, #5
   12968:	ldrne	r1, [pc, #692]	; 12c24 <__assert_fail@plt+0x1898>
   1296c:	ldreq	r1, [pc, #692]	; 12c28 <__assert_fail@plt+0x189c>
   12970:	mov	r0, #0
   12974:	bl	11104 <dcgettext@plt>
   12978:	mov	r4, r0
   1297c:	b	12860 <__assert_fail@plt+0x14d4>
   12980:	cmp	r4, #0
   12984:	beq	129b8 <__assert_fail@plt+0x162c>
   12988:	mov	r2, #5
   1298c:	ldr	r1, [pc, #664]	; 12c2c <__assert_fail@plt+0x18a0>
   12990:	mov	r0, #0
   12994:	bl	11104 <dcgettext@plt>
   12998:	mov	r4, r0
   1299c:	mov	r0, #0
   129a0:	bl	12d5c <__assert_fail@plt+0x19d0>
   129a4:	ldr	r3, [sp, #28]
   129a8:	ldr	r2, [sp, #32]
   129ac:	str	r2, [sp, #28]
   129b0:	str	r3, [sp, #32]
   129b4:	b	12860 <__assert_fail@plt+0x14d4>
   129b8:	cmp	r6, #0
   129bc:	mov	r2, #5
   129c0:	ldrne	r1, [pc, #616]	; 12c30 <__assert_fail@plt+0x18a4>
   129c4:	ldreq	r1, [pc, #604]	; 12c28 <__assert_fail@plt+0x189c>
   129c8:	mov	r0, #0
   129cc:	bl	11104 <dcgettext@plt>
   129d0:	mov	r4, r0
   129d4:	b	1299c <__assert_fail@plt+0x1610>
   129d8:	cmp	r4, #0
   129dc:	beq	129f8 <__assert_fail@plt+0x166c>
   129e0:	mov	r2, #5
   129e4:	ldr	r1, [pc, #584]	; 12c34 <__assert_fail@plt+0x18a8>
   129e8:	mov	r0, #0
   129ec:	bl	11104 <dcgettext@plt>
   129f0:	mov	r4, r0
   129f4:	b	12860 <__assert_fail@plt+0x14d4>
   129f8:	cmp	r6, #0
   129fc:	mov	r2, #5
   12a00:	ldrne	r1, [pc, #560]	; 12c38 <__assert_fail@plt+0x18ac>
   12a04:	ldreq	r1, [pc, #560]	; 12c3c <__assert_fail@plt+0x18b0>
   12a08:	mov	r0, #0
   12a0c:	bl	11104 <dcgettext@plt>
   12a10:	mov	r4, r0
   12a14:	b	12860 <__assert_fail@plt+0x14d4>
   12a18:	mov	r2, #4
   12a1c:	mov	r1, r5
   12a20:	ldr	r0, [sp, #12]
   12a24:	bl	14e08 <__assert_fail@plt+0x3a7c>
   12a28:	b	128b8 <__assert_fail@plt+0x152c>
   12a2c:	ldr	r4, [r4]
   12a30:	mov	r2, #5
   12a34:	ldr	r1, [pc, #516]	; 12c40 <__assert_fail@plt+0x18b4>
   12a38:	mov	r0, #0
   12a3c:	bl	11104 <dcgettext@plt>
   12a40:	mov	r2, r0
   12a44:	mov	r1, r4
   12a48:	mov	r0, #0
   12a4c:	bl	11194 <error@plt>
   12a50:	mov	fp, #0
   12a54:	b	12008 <__assert_fail@plt+0xc7c>
   12a58:	add	r4, sp, #48	; 0x30
   12a5c:	b	12388 <__assert_fail@plt+0xffc>
   12a60:	mov	r7, r8
   12a64:	ldr	r3, [r9]
   12a68:	cmp	r3, #2
   12a6c:	beq	128ac <__assert_fail@plt+0x1520>
   12a70:	and	r2, r7, r6
   12a74:	tst	r2, #255	; 0xff
   12a78:	beq	12ac8 <__assert_fail@plt+0x173c>
   12a7c:	ldr	r1, [sp, #24]
   12a80:	cmn	r1, #1
   12a84:	beq	12a94 <__assert_fail@plt+0x1708>
   12a88:	ldr	r2, [r4, #24]
   12a8c:	cmp	r1, r2
   12a90:	bne	12ad4 <__assert_fail@plt+0x1748>
   12a94:	ldr	r1, [sp, #36]	; 0x24
   12a98:	cmn	r1, #1
   12a9c:	beq	12ac8 <__assert_fail@plt+0x173c>
   12aa0:	ldr	r2, [r4, #28]
   12aa4:	cmp	r1, r2
   12aa8:	bne	12ad4 <__assert_fail@plt+0x1748>
   12aac:	b	12ac8 <__assert_fail@plt+0x173c>
   12ab0:	ldr	r7, [sp, #20]
   12ab4:	b	12a64 <__assert_fail@plt+0x16d8>
   12ab8:	ldr	r3, [r9]
   12abc:	cmp	r3, #2
   12ac0:	movne	r6, #1
   12ac4:	beq	128ac <__assert_fail@plt+0x1520>
   12ac8:	cmp	r3, #0
   12acc:	bne	128ac <__assert_fail@plt+0x1520>
   12ad0:	mov	r8, #0
   12ad4:	cmp	r7, #0
   12ad8:	beq	12b54 <__assert_fail@plt+0x17c8>
   12adc:	cmp	r6, #0
   12ae0:	beq	12b08 <__assert_fail@plt+0x177c>
   12ae4:	cmp	r8, #0
   12ae8:	moveq	r8, #4
   12aec:	movne	r8, #2
   12af0:	b	12b58 <__assert_fail@plt+0x17cc>
   12af4:	ldr	r3, [r9]
   12af8:	cmp	r3, #2
   12afc:	movne	r6, r7
   12b00:	bne	12a7c <__assert_fail@plt+0x16f0>
   12b04:	b	128ac <__assert_fail@plt+0x1520>
   12b08:	cmp	r4, #0
   12b0c:	movne	r8, #1
   12b10:	bne	12b60 <__assert_fail@plt+0x17d4>
   12b14:	mov	r3, #0
   12b18:	str	r3, [sp, #20]
   12b1c:	str	r3, [sp, #16]
   12b20:	mov	r2, #5
   12b24:	ldr	r1, [pc, #280]	; 12c44 <__assert_fail@plt+0x18b8>
   12b28:	mov	r0, #0
   12b2c:	bl	11104 <dcgettext@plt>
   12b30:	mov	r4, r0
   12b34:	mov	r1, sl
   12b38:	mov	r0, #4
   12b3c:	bl	179fc <__assert_fail@plt+0x6670>
   12b40:	mov	r2, r0
   12b44:	mov	r1, r4
   12b48:	mov	r0, #1
   12b4c:	bl	11260 <__printf_chk@plt>
   12b50:	b	1289c <__assert_fail@plt+0x1510>
   12b54:	mov	r8, #3
   12b58:	cmp	r4, #0
   12b5c:	beq	12bd4 <__assert_fail@plt+0x1848>
   12b60:	ldr	r0, [r4, #24]
   12b64:	bl	11f34 <__assert_fail@plt+0xba8>
   12b68:	str	r0, [sp, #20]
   12b6c:	ldr	r0, [r4, #28]
   12b70:	bl	11ef8 <__assert_fail@plt+0xb6c>
   12b74:	str	r0, [sp, #16]
   12b78:	cmp	r8, #1
   12b7c:	beq	12b20 <__assert_fail@plt+0x1794>
   12b80:	ldr	r4, [r9, #16]
   12b84:	ldr	r6, [r9, #20]
   12b88:	mov	r1, r6
   12b8c:	mov	r0, r4
   12b90:	bl	11e1c <__assert_fail@plt+0xa90>
   12b94:	str	r0, [sp, #32]
   12b98:	ldr	r1, [sp, #16]
   12b9c:	cmp	r6, #0
   12ba0:	moveq	r1, #0
   12ba4:	ldr	r0, [sp, #20]
   12ba8:	cmp	r4, #0
   12bac:	moveq	r0, #0
   12bb0:	bl	11e1c <__assert_fail@plt+0xa90>
   12bb4:	str	r0, [sp, #28]
   12bb8:	cmp	r8, #3
   12bbc:	beq	12934 <__assert_fail@plt+0x15a8>
   12bc0:	cmp	r8, #4
   12bc4:	beq	129d8 <__assert_fail@plt+0x164c>
   12bc8:	cmp	r8, #2
   12bcc:	beq	12844 <__assert_fail@plt+0x14b8>
   12bd0:	bl	11344 <abort@plt>
   12bd4:	mov	r3, #0
   12bd8:	str	r3, [sp, #20]
   12bdc:	str	r3, [sp, #16]
   12be0:	b	12b80 <__assert_fail@plt+0x17f4>
   12be4:	andeq	sl, r1, r4, asr #27
   12be8:	andeq	sl, r1, r0, asr #25
   12bec:	ldrdeq	sl, [r1], -r4
   12bf0:	andeq	sl, r1, r0, asr #28
   12bf4:	andeq	sl, r1, r4, lsl #28
   12bf8:	andeq	sl, r1, r4, ror lr
   12bfc:	andeq	sl, r1, r8, ror pc
   12c00:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12c04:	andeq	sl, r1, r8, lsl ip
   12c08:	andeq	sl, r1, r8, lsl #29
   12c0c:	andeq	sl, r1, r4, lsr #29
   12c10:	andeq	sl, r1, r0, ror #30
   12c14:	andeq	sl, r1, r4, ror #31
   12c18:	andeq	fp, r1, ip
   12c1c:	andeq	fp, r1, r0, lsr r0
   12c20:	andeq	fp, r1, r0, asr r0
   12c24:	andeq	fp, r1, r0, lsl #1
   12c28:	andeq	fp, r1, ip, lsr #1
   12c2c:	ldrdeq	fp, [r1], -r0
   12c30:	strdeq	fp, [r1], -r8
   12c34:	andeq	fp, r1, ip, lsl r1
   12c38:	andeq	fp, r1, ip, lsr r1
   12c3c:	andeq	fp, r1, r8, asr r1
   12c40:	andeq	fp, r1, r4, ror r1
   12c44:	andeq	sl, r1, ip, lsr #31
   12c48:	ldr	r3, [pc, #4]	; 12c54 <__assert_fail@plt+0x18c8>
   12c4c:	str	r0, [r3]
   12c50:	bx	lr
   12c54:	andeq	ip, r2, r0, asr #3
   12c58:	ldr	r3, [pc, #4]	; 12c64 <__assert_fail@plt+0x18d8>
   12c5c:	strb	r0, [r3, #4]
   12c60:	bx	lr
   12c64:	andeq	ip, r2, r0, asr #3
   12c68:	push	{r4, r5, r6, lr}
   12c6c:	sub	sp, sp, #8
   12c70:	ldr	r3, [pc, #200]	; 12d40 <__assert_fail@plt+0x19b4>
   12c74:	ldr	r0, [r3]
   12c78:	bl	19260 <__assert_fail@plt+0x7ed4>
   12c7c:	cmp	r0, #0
   12c80:	beq	12ca4 <__assert_fail@plt+0x1918>
   12c84:	ldr	r3, [pc, #184]	; 12d44 <__assert_fail@plt+0x19b8>
   12c88:	ldrb	r3, [r3, #4]
   12c8c:	cmp	r3, #0
   12c90:	beq	12cc0 <__assert_fail@plt+0x1934>
   12c94:	bl	1123c <__errno_location@plt>
   12c98:	ldr	r3, [r0]
   12c9c:	cmp	r3, #32
   12ca0:	bne	12cc0 <__assert_fail@plt+0x1934>
   12ca4:	ldr	r3, [pc, #156]	; 12d48 <__assert_fail@plt+0x19bc>
   12ca8:	ldr	r0, [r3]
   12cac:	bl	19260 <__assert_fail@plt+0x7ed4>
   12cb0:	cmp	r0, #0
   12cb4:	bne	12d34 <__assert_fail@plt+0x19a8>
   12cb8:	add	sp, sp, #8
   12cbc:	pop	{r4, r5, r6, pc}
   12cc0:	mov	r2, #5
   12cc4:	ldr	r1, [pc, #128]	; 12d4c <__assert_fail@plt+0x19c0>
   12cc8:	mov	r0, #0
   12ccc:	bl	11104 <dcgettext@plt>
   12cd0:	mov	r4, r0
   12cd4:	ldr	r3, [pc, #104]	; 12d44 <__assert_fail@plt+0x19b8>
   12cd8:	ldr	r5, [r3]
   12cdc:	cmp	r5, #0
   12ce0:	beq	12d18 <__assert_fail@plt+0x198c>
   12ce4:	bl	1123c <__errno_location@plt>
   12ce8:	ldr	r6, [r0]
   12cec:	mov	r0, r5
   12cf0:	bl	17aa8 <__assert_fail@plt+0x671c>
   12cf4:	str	r4, [sp]
   12cf8:	mov	r3, r0
   12cfc:	ldr	r2, [pc, #76]	; 12d50 <__assert_fail@plt+0x19c4>
   12d00:	mov	r1, r6
   12d04:	mov	r0, #0
   12d08:	bl	11194 <error@plt>
   12d0c:	ldr	r3, [pc, #64]	; 12d54 <__assert_fail@plt+0x19c8>
   12d10:	ldr	r0, [r3]
   12d14:	bl	110bc <_exit@plt>
   12d18:	bl	1123c <__errno_location@plt>
   12d1c:	mov	r3, r4
   12d20:	ldr	r2, [pc, #48]	; 12d58 <__assert_fail@plt+0x19cc>
   12d24:	ldr	r1, [r0]
   12d28:	mov	r0, #0
   12d2c:	bl	11194 <error@plt>
   12d30:	b	12d0c <__assert_fail@plt+0x1980>
   12d34:	ldr	r3, [pc, #24]	; 12d54 <__assert_fail@plt+0x19c8>
   12d38:	ldr	r0, [r3]
   12d3c:	bl	110bc <_exit@plt>
   12d40:	muleq	r2, ip, r1
   12d44:	andeq	ip, r2, r0, asr #3
   12d48:	muleq	r2, r8, r1
   12d4c:	muleq	r1, r8, r1
   12d50:	andeq	sl, r1, r4, lsl ip
   12d54:	andeq	ip, r2, r0, asr #2
   12d58:	andeq	sl, r1, r8, lsl ip
   12d5c:	push	{r4, r5, lr}
   12d60:	sub	sp, sp, #12
   12d64:	mov	r5, r0
   12d68:	bl	1123c <__errno_location@plt>
   12d6c:	mov	r4, r0
   12d70:	ldr	r3, [r0]
   12d74:	str	r3, [sp]
   12d78:	str	r3, [sp, #4]
   12d7c:	mov	r3, #0
   12d80:	str	r3, [r0]
   12d84:	mov	r0, r5
   12d88:	bl	110a4 <free@plt>
   12d8c:	ldr	r3, [r4]
   12d90:	cmp	r3, #0
   12d94:	moveq	r3, #4
   12d98:	movne	r3, #0
   12d9c:	add	r2, sp, #8
   12da0:	add	r3, r2, r3
   12da4:	ldr	r3, [r3, #-8]
   12da8:	str	r3, [r4]
   12dac:	add	sp, sp, #12
   12db0:	pop	{r4, r5, pc}
   12db4:	push	{r4, r5}
   12db8:	ldrd	r4, [r0, #8]
   12dbc:	ldrd	r2, [r1, #8]
   12dc0:	cmp	r5, r3
   12dc4:	cmpeq	r4, r2
   12dc8:	movne	r0, #0
   12dcc:	beq	12dd8 <__assert_fail@plt+0x1a4c>
   12dd0:	pop	{r4, r5}
   12dd4:	bx	lr
   12dd8:	ldrd	r4, [r0]
   12ddc:	ldrd	r2, [r1]
   12de0:	cmp	r5, r3
   12de4:	cmpeq	r4, r2
   12de8:	moveq	r0, #1
   12dec:	movne	r0, #0
   12df0:	b	12dd0 <__assert_fail@plt+0x1a44>
   12df4:	push	{r4, lr}
   12df8:	mov	r2, r1
   12dfc:	mov	r3, #0
   12e00:	ldrd	r0, [r0, #8]
   12e04:	bl	19e48 <__assert_fail@plt+0x8abc>
   12e08:	mov	r0, r2
   12e0c:	pop	{r4, pc}
   12e10:	push	{r4, lr}
   12e14:	mov	r2, r1
   12e18:	mov	r3, #0
   12e1c:	ldrd	r0, [r0]
   12e20:	bl	19e48 <__assert_fail@plt+0x8abc>
   12e24:	mov	r0, r2
   12e28:	pop	{r4, pc}
   12e2c:	push	{r4, r5}
   12e30:	ldrd	r4, [r0]
   12e34:	ldrd	r2, [r1]
   12e38:	cmp	r5, r3
   12e3c:	cmpeq	r4, r2
   12e40:	moveq	r0, #1
   12e44:	movne	r0, #0
   12e48:	pop	{r4, r5}
   12e4c:	bx	lr
   12e50:	push	{r4, r5}
   12e54:	ldr	r3, [r0]
   12e58:	ldrd	r4, [r3, #160]	; 0xa0
   12e5c:	ldr	r3, [r1]
   12e60:	ldrd	r2, [r3, #160]	; 0xa0
   12e64:	cmp	r5, r3
   12e68:	cmpeq	r4, r2
   12e6c:	movhi	r0, #1
   12e70:	movls	r0, #0
   12e74:	movcc	r3, #1
   12e78:	movcs	r3, #0
   12e7c:	sub	r0, r0, r3
   12e80:	pop	{r4, r5}
   12e84:	bx	lr
   12e88:	push	{r4, r5, r6, lr}
   12e8c:	mov	r4, r0
   12e90:	ldr	r3, [r0, #36]	; 0x24
   12e94:	add	r1, r1, #256	; 0x100
   12e98:	adds	r1, r1, r3
   12e9c:	bcs	12ec0 <__assert_fail@plt+0x1b34>
   12ea0:	str	r1, [r0, #36]	; 0x24
   12ea4:	ldr	r0, [r0, #24]
   12ea8:	bl	19210 <__assert_fail@plt+0x7e84>
   12eac:	cmp	r0, #0
   12eb0:	beq	12ee4 <__assert_fail@plt+0x1b58>
   12eb4:	str	r0, [r4, #24]
   12eb8:	mov	r0, #1
   12ebc:	pop	{r4, r5, r6, pc}
   12ec0:	ldr	r0, [r0, #24]
   12ec4:	bl	12d5c <__assert_fail@plt+0x19d0>
   12ec8:	mov	r5, #0
   12ecc:	str	r5, [r4, #24]
   12ed0:	bl	1123c <__errno_location@plt>
   12ed4:	mov	r3, #36	; 0x24
   12ed8:	str	r3, [r0]
   12edc:	mov	r0, r5
   12ee0:	pop	{r4, r5, r6, pc}
   12ee4:	ldr	r0, [r4, #24]
   12ee8:	bl	12d5c <__assert_fail@plt+0x19d0>
   12eec:	mov	r0, #0
   12ef0:	str	r0, [r4, #24]
   12ef4:	pop	{r4, r5, r6, pc}
   12ef8:	push	{r4, r5, r6, lr}
   12efc:	sub	sp, sp, #8
   12f00:	mov	r4, r1
   12f04:	add	r5, r1, #64	; 0x40
   12f08:	ldr	r3, [r1, #48]	; 0x30
   12f0c:	cmp	r3, #0
   12f10:	bne	12f20 <__assert_fail@plt+0x1b94>
   12f14:	ldr	r3, [r0, #48]	; 0x30
   12f18:	tst	r3, #1
   12f1c:	bne	12f30 <__assert_fail@plt+0x1ba4>
   12f20:	ldr	r3, [r0, #48]	; 0x30
   12f24:	lsl	r3, r3, #30
   12f28:	orrs	r3, r2, r3, lsr #31
   12f2c:	beq	12fa8 <__assert_fail@plt+0x1c1c>
   12f30:	mov	r2, r5
   12f34:	ldr	r1, [r4, #24]
   12f38:	mov	r0, #3
   12f3c:	bl	1132c <__xstat64@plt>
   12f40:	cmp	r0, #0
   12f44:	beq	12fdc <__assert_fail@plt+0x1c50>
   12f48:	bl	1123c <__errno_location@plt>
   12f4c:	mov	r6, r0
   12f50:	ldr	r3, [r0]
   12f54:	cmp	r3, #2
   12f58:	beq	12f80 <__assert_fail@plt+0x1bf4>
   12f5c:	ldr	r3, [r6]
   12f60:	str	r3, [r4, #32]
   12f64:	mov	r2, #104	; 0x68
   12f68:	mov	r1, #0
   12f6c:	mov	r0, r5
   12f70:	bl	11254 <memset@plt>
   12f74:	mov	r0, #10
   12f78:	add	sp, sp, #8
   12f7c:	pop	{r4, r5, r6, pc}
   12f80:	mov	r2, r5
   12f84:	ldr	r1, [r4, #24]
   12f88:	mov	r0, #3
   12f8c:	bl	1135c <__lxstat64@plt>
   12f90:	cmp	r0, #0
   12f94:	bne	12f5c <__assert_fail@plt+0x1bd0>
   12f98:	mov	r3, #0
   12f9c:	str	r3, [r6]
   12fa0:	mov	r0, #13
   12fa4:	b	12f78 <__assert_fail@plt+0x1bec>
   12fa8:	ldr	r1, [r0, #32]
   12fac:	mov	r3, #256	; 0x100
   12fb0:	str	r3, [sp]
   12fb4:	mov	r3, r5
   12fb8:	ldr	r2, [r4, #24]
   12fbc:	mov	r0, #3
   12fc0:	bl	11128 <__fxstatat64@plt>
   12fc4:	cmp	r0, #0
   12fc8:	beq	12fdc <__assert_fail@plt+0x1c50>
   12fcc:	bl	1123c <__errno_location@plt>
   12fd0:	ldr	r3, [r0]
   12fd4:	str	r3, [r4, #32]
   12fd8:	b	12f64 <__assert_fail@plt+0x1bd8>
   12fdc:	ldr	r0, [r4, #80]	; 0x50
   12fe0:	and	r0, r0, #61440	; 0xf000
   12fe4:	cmp	r0, #16384	; 0x4000
   12fe8:	beq	13008 <__assert_fail@plt+0x1c7c>
   12fec:	cmp	r0, #40960	; 0xa000
   12ff0:	moveq	r0, #12
   12ff4:	beq	12f78 <__assert_fail@plt+0x1bec>
   12ff8:	cmp	r0, #32768	; 0x8000
   12ffc:	moveq	r0, #8
   13000:	movne	r0, #3
   13004:	b	12f78 <__assert_fail@plt+0x1bec>
   13008:	ldrb	r3, [r4, #168]	; 0xa8
   1300c:	cmp	r3, #46	; 0x2e
   13010:	movne	r0, #1
   13014:	bne	12f78 <__assert_fail@plt+0x1bec>
   13018:	ldrb	r3, [r4, #169]	; 0xa9
   1301c:	cmp	r3, #0
   13020:	beq	1303c <__assert_fail@plt+0x1cb0>
   13024:	ldr	r3, [r4, #168]	; 0xa8
   13028:	bic	r3, r3, #-16777216	; 0xff000000
   1302c:	bic	r3, r3, #255	; 0xff
   13030:	cmp	r3, #11776	; 0x2e00
   13034:	movne	r0, #1
   13038:	bne	12f78 <__assert_fail@plt+0x1bec>
   1303c:	ldr	r0, [r4, #48]	; 0x30
   13040:	cmp	r0, #0
   13044:	moveq	r0, #1
   13048:	movne	r0, #5
   1304c:	b	12f78 <__assert_fail@plt+0x1bec>
   13050:	push	{r4, r5, r6, r7, r8, lr}
   13054:	mov	r6, r0
   13058:	mov	r4, r1
   1305c:	mov	r5, r2
   13060:	ldr	r7, [r0, #44]	; 0x2c
   13064:	ldr	r3, [r0, #40]	; 0x28
   13068:	cmp	r3, r2
   1306c:	bcs	13098 <__assert_fail@plt+0x1d0c>
   13070:	add	r1, r2, #40	; 0x28
   13074:	str	r1, [r0, #40]	; 0x28
   13078:	cmn	r1, #-1073741823	; 0xc0000001
   1307c:	bhi	13108 <__assert_fail@plt+0x1d7c>
   13080:	lsl	r1, r1, #2
   13084:	ldr	r0, [r0, #8]
   13088:	bl	19210 <__assert_fail@plt+0x7e84>
   1308c:	cmp	r0, #0
   13090:	strne	r0, [r6, #8]
   13094:	beq	13108 <__assert_fail@plt+0x1d7c>
   13098:	ldr	r3, [r6, #8]
   1309c:	cmp	r4, #0
   130a0:	beq	130b4 <__assert_fail@plt+0x1d28>
   130a4:	str	r4, [r3], #4
   130a8:	ldr	r4, [r4, #8]
   130ac:	cmp	r4, #0
   130b0:	bne	130a4 <__assert_fail@plt+0x1d18>
   130b4:	mov	r3, r7
   130b8:	mov	r2, #4
   130bc:	mov	r1, r5
   130c0:	ldr	r0, [r6, #8]
   130c4:	bl	11308 <qsort@plt>
   130c8:	ldr	lr, [r6, #8]
   130cc:	ldr	r0, [lr]
   130d0:	subs	r3, r5, #1
   130d4:	beq	130f8 <__assert_fail@plt+0x1d6c>
   130d8:	mov	r2, lr
   130dc:	ldr	r1, [r2]
   130e0:	ldr	ip, [r2, #4]!
   130e4:	str	ip, [r1, #8]
   130e8:	subs	r3, r3, #1
   130ec:	bne	130dc <__assert_fail@plt+0x1d50>
   130f0:	sub	r5, r5, #-1073741823	; 0xc0000001
   130f4:	add	lr, lr, r5, lsl #2
   130f8:	ldr	r3, [lr]
   130fc:	mov	r2, #0
   13100:	str	r2, [r3, #8]
   13104:	pop	{r4, r5, r6, r7, r8, pc}
   13108:	ldr	r0, [r6, #8]
   1310c:	bl	12d5c <__assert_fail@plt+0x19d0>
   13110:	mov	r3, #0
   13114:	str	r3, [r6, #8]
   13118:	str	r3, [r6, #40]	; 0x28
   1311c:	mov	r0, r4
   13120:	pop	{r4, r5, r6, r7, r8, pc}
   13124:	push	{r4, r5, r6, r7, r8, lr}
   13128:	mov	r6, r0
   1312c:	mov	r7, r1
   13130:	mov	r5, r2
   13134:	add	r0, r2, #176	; 0xb0
   13138:	bic	r0, r0, #7
   1313c:	bl	191e0 <__assert_fail@plt+0x7e54>
   13140:	subs	r4, r0, #0
   13144:	beq	13190 <__assert_fail@plt+0x1e04>
   13148:	mov	r2, r5
   1314c:	mov	r1, r7
   13150:	add	r0, r4, #168	; 0xa8
   13154:	bl	110c8 <memcpy@plt>
   13158:	add	r2, r4, r5
   1315c:	mov	r3, #0
   13160:	strb	r3, [r2, #168]	; 0xa8
   13164:	str	r5, [r4, #52]	; 0x34
   13168:	str	r6, [r4, #44]	; 0x2c
   1316c:	ldr	r2, [r6, #24]
   13170:	str	r2, [r4, #28]
   13174:	str	r3, [r4, #32]
   13178:	str	r3, [r4, #12]
   1317c:	strh	r3, [r4, #58]	; 0x3a
   13180:	mov	r2, #3
   13184:	strh	r2, [r4, #60]	; 0x3c
   13188:	str	r3, [r4, #16]
   1318c:	str	r3, [r4, #20]
   13190:	mov	r0, r4
   13194:	pop	{r4, r5, r6, r7, r8, pc}
   13198:	push	{r4, lr}
   1319c:	sub	sp, sp, #8
   131a0:	mov	r4, r0
   131a4:	ldr	r2, [r0, #48]	; 0x30
   131a8:	ldr	r3, [pc, #92]	; 1320c <__assert_fail@plt+0x1e80>
   131ac:	and	r3, r3, r2
   131b0:	cmp	r3, #0
   131b4:	beq	131e8 <__assert_fail@plt+0x1e5c>
   131b8:	ldr	r3, [pc, #80]	; 13210 <__assert_fail@plt+0x1e84>
   131bc:	str	r3, [sp]
   131c0:	ldr	r3, [pc, #76]	; 13214 <__assert_fail@plt+0x1e88>
   131c4:	ldr	r2, [pc, #76]	; 13218 <__assert_fail@plt+0x1e8c>
   131c8:	mov	r1, #0
   131cc:	mov	r0, #31
   131d0:	bl	15888 <__assert_fail@plt+0x44fc>
   131d4:	str	r0, [r4, #56]	; 0x38
   131d8:	adds	r0, r0, #0
   131dc:	movne	r0, #1
   131e0:	add	sp, sp, #8
   131e4:	pop	{r4, pc}
   131e8:	mov	r0, #32
   131ec:	bl	191e0 <__assert_fail@plt+0x7e54>
   131f0:	str	r0, [r4, #56]	; 0x38
   131f4:	cmp	r0, #0
   131f8:	moveq	r0, #0
   131fc:	beq	131e0 <__assert_fail@plt+0x1e54>
   13200:	bl	192d8 <__assert_fail@plt+0x7f4c>
   13204:	mov	r0, #1
   13208:	b	131e0 <__assert_fail@plt+0x1e54>
   1320c:	andeq	r0, r0, r2, lsl #2
   13210:	andeq	r2, r1, ip, asr sp
   13214:			; <UNDEFINED> instruction: 0x00012db4
   13218:	strdeq	r2, [r1], -r4
   1321c:	push	{r4, lr}
   13220:	mov	ip, r1
   13224:	ldr	r3, [r0, #48]	; 0x30
   13228:	and	lr, r3, #16
   1322c:	ldr	r2, [pc, #48]	; 13264 <__assert_fail@plt+0x1ed8>
   13230:	ldr	r1, [pc, #48]	; 13268 <__assert_fail@plt+0x1edc>
   13234:	cmp	lr, #0
   13238:	moveq	r1, r2
   1323c:	tst	r3, #512	; 0x200
   13240:	bne	13250 <__assert_fail@plt+0x1ec4>
   13244:	mov	r0, ip
   13248:	bl	196c0 <__assert_fail@plt+0x8334>
   1324c:	pop	{r4, pc}
   13250:	mov	r2, r1
   13254:	mov	r1, ip
   13258:	ldr	r0, [r0, #32]
   1325c:	bl	16048 <__assert_fail@plt+0x4cbc>
   13260:	pop	{r4, pc}
   13264:	andeq	r4, r8, r0, lsl #18
   13268:	andeq	ip, r8, r0, lsl #18
   1326c:	push	{r4, r5, r6, lr}
   13270:	subs	r4, r0, #0
   13274:	bne	13290 <__assert_fail@plt+0x1f04>
   13278:	pop	{r4, r5, r6, pc}
   1327c:	mov	r0, r4
   13280:	bl	12d5c <__assert_fail@plt+0x19d0>
   13284:	mov	r4, r5
   13288:	cmp	r5, #0
   1328c:	beq	132a8 <__assert_fail@plt+0x1f1c>
   13290:	ldr	r5, [r4, #8]
   13294:	ldr	r0, [r4, #12]
   13298:	cmp	r0, #0
   1329c:	beq	1327c <__assert_fail@plt+0x1ef0>
   132a0:	bl	11368 <closedir@plt>
   132a4:	b	1327c <__assert_fail@plt+0x1ef0>
   132a8:	pop	{r4, r5, r6, pc}
   132ac:	push	{r4, lr}
   132b0:	ldr	r2, [r0, #48]	; 0x30
   132b4:	ldr	r3, [pc, #40]	; 132e4 <__assert_fail@plt+0x1f58>
   132b8:	and	r3, r3, r2
   132bc:	cmp	r3, #0
   132c0:	beq	132d8 <__assert_fail@plt+0x1f4c>
   132c4:	ldr	r0, [r0, #56]	; 0x38
   132c8:	cmp	r0, #0
   132cc:	popeq	{r4, pc}
   132d0:	bl	15a18 <__assert_fail@plt+0x468c>
   132d4:	pop	{r4, pc}
   132d8:	ldr	r0, [r0, #56]	; 0x38
   132dc:	bl	12d5c <__assert_fail@plt+0x19d0>
   132e0:	pop	{r4, pc}
   132e4:	andeq	r0, r0, r2, lsl #2
   132e8:	push	{r4, lr}
   132ec:	mov	r4, r0
   132f0:	mov	r0, r4
   132f4:	bl	15f4c <__assert_fail@plt+0x4bc0>
   132f8:	cmp	r0, #0
   132fc:	bne	13318 <__assert_fail@plt+0x1f8c>
   13300:	mov	r0, r4
   13304:	bl	15f98 <__assert_fail@plt+0x4c0c>
   13308:	cmp	r0, #0
   1330c:	blt	132f0 <__assert_fail@plt+0x1f64>
   13310:	bl	11350 <close@plt>
   13314:	b	132f0 <__assert_fail@plt+0x1f64>
   13318:	pop	{r4, pc}
   1331c:	push	{r4, r5, r6, r7, lr}
   13320:	sub	sp, sp, #116	; 0x74
   13324:	ldr	r4, [r0, #44]	; 0x2c
   13328:	ldr	r3, [r4, #48]	; 0x30
   1332c:	tst	r3, #512	; 0x200
   13330:	beq	13410 <__assert_fail@plt+0x2084>
   13334:	mov	r7, r1
   13338:	mov	r5, r0
   1333c:	ldr	r6, [r4, #52]	; 0x34
   13340:	cmp	r6, #0
   13344:	beq	1336c <__assert_fail@plt+0x1fe0>
   13348:	ldrd	r2, [r5, #64]	; 0x40
   1334c:	add	r1, sp, #112	; 0x70
   13350:	strd	r2, [r1, #-104]!	; 0xffffff98
   13354:	mov	r0, r6
   13358:	bl	155d0 <__assert_fail@plt+0x4244>
   1335c:	cmp	r0, #0
   13360:	beq	13398 <__assert_fail@plt+0x200c>
   13364:	ldr	r0, [r0, #8]
   13368:	b	13414 <__assert_fail@plt+0x2088>
   1336c:	ldr	r3, [pc, #184]	; 1342c <__assert_fail@plt+0x20a0>
   13370:	str	r3, [sp]
   13374:	ldr	r3, [pc, #180]	; 13430 <__assert_fail@plt+0x20a4>
   13378:	ldr	r2, [pc, #180]	; 13434 <__assert_fail@plt+0x20a8>
   1337c:	mov	r1, #0
   13380:	mov	r0, #13
   13384:	bl	15888 <__assert_fail@plt+0x44fc>
   13388:	mov	r6, r0
   1338c:	str	r0, [r4, #52]	; 0x34
   13390:	cmp	r0, #0
   13394:	bne	13348 <__assert_fail@plt+0x1fbc>
   13398:	cmp	r7, #0
   1339c:	blt	1341c <__assert_fail@plt+0x2090>
   133a0:	add	r1, sp, #24
   133a4:	mov	r0, r7
   133a8:	bl	1102c <fstatfs64@plt>
   133ac:	cmp	r0, #0
   133b0:	bne	13424 <__assert_fail@plt+0x2098>
   133b4:	cmp	r6, #0
   133b8:	beq	133f8 <__assert_fail@plt+0x206c>
   133bc:	mov	r0, #16
   133c0:	bl	191e0 <__assert_fail@plt+0x7e54>
   133c4:	subs	r4, r0, #0
   133c8:	beq	133f8 <__assert_fail@plt+0x206c>
   133cc:	ldrd	r2, [r5, #64]	; 0x40
   133d0:	strd	r2, [r4]
   133d4:	ldr	r3, [sp, #24]
   133d8:	str	r3, [r4, #8]
   133dc:	mov	r1, r4
   133e0:	mov	r0, r6
   133e4:	bl	15dd4 <__assert_fail@plt+0x4a48>
   133e8:	cmp	r0, #0
   133ec:	beq	13404 <__assert_fail@plt+0x2078>
   133f0:	cmp	r4, r0
   133f4:	bne	13400 <__assert_fail@plt+0x2074>
   133f8:	ldr	r0, [sp, #24]
   133fc:	b	13414 <__assert_fail@plt+0x2088>
   13400:	bl	11344 <abort@plt>
   13404:	mov	r0, r4
   13408:	bl	12d5c <__assert_fail@plt+0x19d0>
   1340c:	b	133f8 <__assert_fail@plt+0x206c>
   13410:	mov	r0, #0
   13414:	add	sp, sp, #116	; 0x74
   13418:	pop	{r4, r5, r6, r7, pc}
   1341c:	mov	r0, #0
   13420:	b	13414 <__assert_fail@plt+0x2088>
   13424:	mov	r0, #0
   13428:	b	13414 <__assert_fail@plt+0x2088>
   1342c:	andeq	r2, r1, ip, asr sp
   13430:	andeq	r2, r1, ip, lsr #28
   13434:	andeq	r2, r1, r0, lsl lr
   13438:	push	{r4, r5, r6, lr}
   1343c:	mov	r5, r0
   13440:	mov	r4, r1
   13444:	ldr	r2, [r0, #48]	; 0x30
   13448:	ldr	r3, [pc, #176]	; 13500 <__assert_fail@plt+0x2174>
   1344c:	and	r3, r3, r2
   13450:	cmp	r3, #0
   13454:	beq	134bc <__assert_fail@plt+0x2130>
   13458:	mov	r0, #24
   1345c:	bl	191e0 <__assert_fail@plt+0x7e54>
   13460:	subs	r6, r0, #0
   13464:	beq	134e0 <__assert_fail@plt+0x2154>
   13468:	ldrd	r2, [r4, #64]	; 0x40
   1346c:	strd	r2, [r6]
   13470:	ldrd	r2, [r4, #160]	; 0xa0
   13474:	strd	r2, [r6, #8]
   13478:	str	r4, [r6, #16]
   1347c:	mov	r1, r6
   13480:	ldr	r0, [r5, #56]	; 0x38
   13484:	bl	15dd4 <__assert_fail@plt+0x4a48>
   13488:	mov	r5, r0
   1348c:	cmp	r6, r0
   13490:	beq	134e8 <__assert_fail@plt+0x215c>
   13494:	mov	r0, r6
   13498:	bl	12d5c <__assert_fail@plt+0x19d0>
   1349c:	cmp	r5, #0
   134a0:	beq	134f0 <__assert_fail@plt+0x2164>
   134a4:	ldr	r3, [r5, #16]
   134a8:	str	r3, [r4]
   134ac:	mov	r3, #2
   134b0:	strh	r3, [r4, #56]	; 0x38
   134b4:	mov	r0, #1
   134b8:	pop	{r4, r5, r6, pc}
   134bc:	add	r1, r1, #64	; 0x40
   134c0:	ldr	r0, [r0, #56]	; 0x38
   134c4:	bl	192f4 <__assert_fail@plt+0x7f68>
   134c8:	cmp	r0, #0
   134cc:	beq	134f8 <__assert_fail@plt+0x216c>
   134d0:	str	r4, [r4]
   134d4:	mov	r3, #2
   134d8:	strh	r3, [r4, #56]	; 0x38
   134dc:	pop	{r4, r5, r6, pc}
   134e0:	mov	r0, #0
   134e4:	pop	{r4, r5, r6, pc}
   134e8:	mov	r0, #1
   134ec:	pop	{r4, r5, r6, pc}
   134f0:	mov	r0, #0
   134f4:	pop	{r4, r5, r6, pc}
   134f8:	mov	r0, #1
   134fc:	pop	{r4, r5, r6, pc}
   13500:	andeq	r0, r0, r2, lsl #2
   13504:	push	{r4, r5, r6, lr}
   13508:	mov	r5, r1
   1350c:	ldr	r1, [r0, #32]
   13510:	cmp	r1, r5
   13514:	movne	r3, #0
   13518:	moveq	r3, #1
   1351c:	cmn	r1, #100	; 0x64
   13520:	moveq	r3, #0
   13524:	cmp	r3, #0
   13528:	bne	13568 <__assert_fail@plt+0x21dc>
   1352c:	mov	r4, r0
   13530:	cmp	r2, #0
   13534:	bne	1356c <__assert_fail@plt+0x21e0>
   13538:	ldr	r3, [r0, #48]	; 0x30
   1353c:	lsr	r3, r3, #2
   13540:	eor	r3, r3, #1
   13544:	cmp	r1, #0
   13548:	movlt	r3, #0
   1354c:	andge	r3, r3, #1
   13550:	cmp	r3, #0
   13554:	beq	13560 <__assert_fail@plt+0x21d4>
   13558:	mov	r0, r1
   1355c:	bl	11350 <close@plt>
   13560:	str	r5, [r4, #32]
   13564:	pop	{r4, r5, r6, pc}
   13568:	bl	11344 <abort@plt>
   1356c:	add	r0, r0, #60	; 0x3c
   13570:	bl	15f54 <__assert_fail@plt+0x4bc8>
   13574:	cmp	r0, #0
   13578:	blt	13560 <__assert_fail@plt+0x21d4>
   1357c:	bl	11350 <close@plt>
   13580:	b	13560 <__assert_fail@plt+0x21d4>
   13584:	push	{r4, r5, r6, lr}
   13588:	mov	r4, r0
   1358c:	ldr	r3, [r0, #48]	; 0x30
   13590:	ands	r5, r3, #4
   13594:	movne	r5, #0
   13598:	bne	135b4 <__assert_fail@plt+0x2228>
   1359c:	tst	r3, #512	; 0x200
   135a0:	bne	135c4 <__assert_fail@plt+0x2238>
   135a4:	ldr	r0, [r0, #28]
   135a8:	bl	112fc <fchdir@plt>
   135ac:	adds	r5, r0, #0
   135b0:	movne	r5, #1
   135b4:	add	r0, r4, #60	; 0x3c
   135b8:	bl	132e8 <__assert_fail@plt+0x1f5c>
   135bc:	mov	r0, r5
   135c0:	pop	{r4, r5, r6, pc}
   135c4:	mov	r2, #1
   135c8:	mvn	r1, #99	; 0x63
   135cc:	bl	13504 <__assert_fail@plt+0x2178>
   135d0:	b	135b4 <__assert_fail@plt+0x2228>
   135d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   135d8:	sub	sp, sp, #108	; 0x6c
   135dc:	mov	r4, r0
   135e0:	mov	r6, r1
   135e4:	mov	r5, r2
   135e8:	subs	r9, r3, #0
   135ec:	beq	13788 <__assert_fail@plt+0x23fc>
   135f0:	ldr	r1, [pc, #448]	; 137b8 <__assert_fail@plt+0x242c>
   135f4:	mov	r0, r9
   135f8:	bl	11074 <strcmp@plt>
   135fc:	cmp	r0, #0
   13600:	bne	13788 <__assert_fail@plt+0x23fc>
   13604:	ldr	r3, [r4, #48]	; 0x30
   13608:	tst	r3, #4
   1360c:	bne	13794 <__assert_fail@plt+0x2408>
   13610:	cmp	r5, #0
   13614:	bge	13724 <__assert_fail@plt+0x2398>
   13618:	tst	r3, #512	; 0x200
   1361c:	beq	13634 <__assert_fail@plt+0x22a8>
   13620:	add	r7, r4, #60	; 0x3c
   13624:	mov	r0, r7
   13628:	bl	15f4c <__assert_fail@plt+0x4bc0>
   1362c:	cmp	r0, #0
   13630:	beq	13654 <__assert_fail@plt+0x22c8>
   13634:	mov	r7, #1
   13638:	mov	r1, r9
   1363c:	mov	r0, r4
   13640:	bl	1321c <__assert_fail@plt+0x1e90>
   13644:	subs	r8, r0, #0
   13648:	bge	136a4 <__assert_fail@plt+0x2318>
   1364c:	mvn	r4, #0
   13650:	b	13710 <__assert_fail@plt+0x2384>
   13654:	mov	r0, r7
   13658:	bl	15f98 <__assert_fail@plt+0x4c0c>
   1365c:	subs	r8, r0, #0
   13660:	blt	13634 <__assert_fail@plt+0x22a8>
   13664:	ldr	r3, [r4, #48]	; 0x30
   13668:	tst	r3, #2
   1366c:	bne	13730 <__assert_fail@plt+0x23a4>
   13670:	mov	r5, r8
   13674:	mov	r7, #1
   13678:	ldr	r3, [r4, #48]	; 0x30
   1367c:	tst	r3, #512	; 0x200
   13680:	bne	13754 <__assert_fail@plt+0x23c8>
   13684:	mov	r0, r8
   13688:	bl	112fc <fchdir@plt>
   1368c:	mov	r4, r0
   13690:	b	13708 <__assert_fail@plt+0x237c>
   13694:	cmp	r5, #0
   13698:	movge	r8, r5
   1369c:	movge	r7, #0
   136a0:	blt	1371c <__assert_fail@plt+0x2390>
   136a4:	ldr	r3, [r4, #48]	; 0x30
   136a8:	tst	r3, #2
   136ac:	bne	136cc <__assert_fail@plt+0x2340>
   136b0:	cmp	r9, #0
   136b4:	beq	13678 <__assert_fail@plt+0x22ec>
   136b8:	ldr	r1, [pc, #248]	; 137b8 <__assert_fail@plt+0x242c>
   136bc:	mov	r0, r9
   136c0:	bl	11074 <strcmp@plt>
   136c4:	cmp	r0, #0
   136c8:	bne	13678 <__assert_fail@plt+0x22ec>
   136cc:	mov	r2, sp
   136d0:	mov	r1, r8
   136d4:	mov	r0, #3
   136d8:	bl	11140 <__fxstat64@plt>
   136dc:	cmp	r0, #0
   136e0:	bne	13704 <__assert_fail@plt+0x2378>
   136e4:	ldrd	r0, [r6, #64]	; 0x40
   136e8:	ldrd	r2, [sp]
   136ec:	cmp	r1, r3
   136f0:	cmpeq	r0, r2
   136f4:	beq	1373c <__assert_fail@plt+0x23b0>
   136f8:	bl	1123c <__errno_location@plt>
   136fc:	mov	r3, #2
   13700:	str	r3, [r0]
   13704:	mvn	r4, #0
   13708:	cmp	r5, #0
   1370c:	blt	1376c <__assert_fail@plt+0x23e0>
   13710:	mov	r0, r4
   13714:	add	sp, sp, #108	; 0x6c
   13718:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1371c:	mov	r7, #0
   13720:	b	13638 <__assert_fail@plt+0x22ac>
   13724:	mov	r8, r5
   13728:	mov	r7, #1
   1372c:	b	136a4 <__assert_fail@plt+0x2318>
   13730:	mov	r5, r8
   13734:	mov	r7, #1
   13738:	b	136cc <__assert_fail@plt+0x2340>
   1373c:	ldrd	r0, [r6, #160]	; 0xa0
   13740:	ldrd	r2, [sp, #96]	; 0x60
   13744:	cmp	r1, r3
   13748:	cmpeq	r0, r2
   1374c:	bne	136f8 <__assert_fail@plt+0x236c>
   13750:	b	13678 <__assert_fail@plt+0x22ec>
   13754:	eor	r2, r7, #1
   13758:	mov	r1, r8
   1375c:	mov	r0, r4
   13760:	bl	13504 <__assert_fail@plt+0x2178>
   13764:	mov	r4, #0
   13768:	b	13710 <__assert_fail@plt+0x2384>
   1376c:	bl	1123c <__errno_location@plt>
   13770:	mov	r5, r0
   13774:	ldr	r6, [r0]
   13778:	mov	r0, r8
   1377c:	bl	11350 <close@plt>
   13780:	str	r6, [r5]
   13784:	b	13710 <__assert_fail@plt+0x2384>
   13788:	ldr	r3, [r4, #48]	; 0x30
   1378c:	tst	r3, #4
   13790:	beq	13694 <__assert_fail@plt+0x2308>
   13794:	mvn	r2, r5
   13798:	lsr	r2, r2, #31
   1379c:	ands	r3, r2, r3, lsr #9
   137a0:	moveq	r4, #0
   137a4:	beq	13710 <__assert_fail@plt+0x2384>
   137a8:	mov	r0, r5
   137ac:	bl	11350 <close@plt>
   137b0:	mov	r4, #0
   137b4:	b	13710 <__assert_fail@plt+0x2384>
   137b8:	andeq	fp, r1, r4, lsr #3
   137bc:	push	{r4, r5, lr}
   137c0:	sub	sp, sp, #28
   137c4:	ldr	r2, [r0, #48]	; 0x30
   137c8:	ldr	r3, [pc, #172]	; 1387c <__assert_fail@plt+0x24f0>
   137cc:	and	r3, r3, r2
   137d0:	cmp	r3, #0
   137d4:	bne	1381c <__assert_fail@plt+0x2490>
   137d8:	ldr	ip, [r1, #4]
   137dc:	cmp	ip, #0
   137e0:	beq	13814 <__assert_fail@plt+0x2488>
   137e4:	ldr	r3, [ip, #48]	; 0x30
   137e8:	cmp	r3, #0
   137ec:	blt	13814 <__assert_fail@plt+0x2488>
   137f0:	ldr	lr, [r0, #56]	; 0x38
   137f4:	ldrd	r2, [lr, #16]
   137f8:	orrs	r3, r2, r3
   137fc:	beq	1384c <__assert_fail@plt+0x24c0>
   13800:	ldrd	r4, [lr]
   13804:	ldrd	r2, [r1, #160]	; 0xa0
   13808:	cmp	r5, r3
   1380c:	cmpeq	r4, r2
   13810:	beq	13850 <__assert_fail@plt+0x24c4>
   13814:	add	sp, sp, #28
   13818:	pop	{r4, r5, pc}
   1381c:	ldrd	r2, [r1, #64]	; 0x40
   13820:	strd	r2, [sp]
   13824:	ldrd	r2, [r1, #160]	; 0xa0
   13828:	strd	r2, [sp, #8]
   1382c:	mov	r1, sp
   13830:	ldr	r0, [r0, #56]	; 0x38
   13834:	bl	15e0c <__assert_fail@plt+0x4a80>
   13838:	cmp	r0, #0
   1383c:	beq	13848 <__assert_fail@plt+0x24bc>
   13840:	bl	12d5c <__assert_fail@plt+0x19d0>
   13844:	b	13814 <__assert_fail@plt+0x2488>
   13848:	bl	11344 <abort@plt>
   1384c:	bl	11344 <abort@plt>
   13850:	ldrd	r2, [lr, #8]
   13854:	ldrd	r4, [r1, #64]	; 0x40
   13858:	cmp	r3, r5
   1385c:	cmpeq	r2, r4
   13860:	bne	13814 <__assert_fail@plt+0x2488>
   13864:	ldrd	r2, [ip, #64]	; 0x40
   13868:	strd	r2, [lr, #8]
   1386c:	ldr	r3, [r0, #56]	; 0x38
   13870:	ldrd	r0, [ip, #160]	; 0xa0
   13874:	strd	r0, [r3]
   13878:	b	13814 <__assert_fail@plt+0x2488>
   1387c:	andeq	r0, r0, r2, lsl #2
   13880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13884:	sub	sp, sp, #68	; 0x44
   13888:	mov	r5, r0
   1388c:	str	r1, [sp, #40]	; 0x28
   13890:	ldr	r9, [r0]
   13894:	ldr	r3, [r9, #12]
   13898:	str	r3, [sp, #44]	; 0x2c
   1389c:	cmp	r3, #0
   138a0:	beq	139a0 <__assert_fail@plt+0x2614>
   138a4:	mov	r0, r3
   138a8:	bl	112f0 <dirfd@plt>
   138ac:	str	r0, [sp, #60]	; 0x3c
   138b0:	cmp	r0, #0
   138b4:	blt	1395c <__assert_fail@plt+0x25d0>
   138b8:	ldr	r3, [r5, #44]	; 0x2c
   138bc:	cmp	r3, #0
   138c0:	ldr	r3, [pc, #2472]	; 14270 <__assert_fail@plt+0x2ee4>
   138c4:	mvnne	r3, #0
   138c8:	str	r3, [sp, #24]
   138cc:	mov	r3, #1
   138d0:	str	r3, [sp, #52]	; 0x34
   138d4:	ldr	r3, [r9, #40]	; 0x28
   138d8:	mov	r1, r3
   138dc:	sub	r3, r3, #1
   138e0:	ldr	r2, [r9, #28]
   138e4:	ldrb	r2, [r2, r3]
   138e8:	cmp	r2, #47	; 0x2f
   138ec:	moveq	r1, r3
   138f0:	str	r1, [sp, #32]
   138f4:	ldr	r3, [r5, #48]	; 0x30
   138f8:	tst	r3, #4
   138fc:	ldrne	r3, [r5, #24]
   13900:	addne	r2, r3, r1
   13904:	addne	r2, r2, #1
   13908:	strne	r2, [sp, #28]
   1390c:	movne	r2, #47	; 0x2f
   13910:	strbne	r2, [r3, r1]
   13914:	moveq	r3, #0
   13918:	streq	r3, [sp, #28]
   1391c:	ldr	r3, [sp, #32]
   13920:	add	r3, r3, #1
   13924:	str	r3, [sp, #12]
   13928:	ldr	fp, [r5, #36]	; 0x24
   1392c:	sub	fp, fp, r3
   13930:	ldr	r3, [r9, #48]	; 0x30
   13934:	add	r3, r3, #1
   13938:	str	r3, [sp, #20]
   1393c:	mov	r3, #0
   13940:	str	r3, [sp, #48]	; 0x30
   13944:	str	r3, [sp, #36]	; 0x24
   13948:	str	r3, [sp, #4]
   1394c:	mov	r8, r3
   13950:	str	r3, [sp, #8]
   13954:	mov	sl, r3
   13958:	b	13ed0 <__assert_fail@plt+0x2b44>
   1395c:	ldr	r0, [r9, #12]
   13960:	bl	11368 <closedir@plt>
   13964:	mov	r3, #0
   13968:	str	r3, [r9, #12]
   1396c:	ldr	r3, [sp, #40]	; 0x28
   13970:	cmp	r3, #3
   13974:	movne	r3, #0
   13978:	strne	r3, [sp, #8]
   1397c:	bne	13d40 <__assert_fail@plt+0x29b4>
   13980:	mov	r3, #4
   13984:	strh	r3, [r9, #56]	; 0x38
   13988:	bl	1123c <__errno_location@plt>
   1398c:	ldr	r3, [r0]
   13990:	str	r3, [r9, #32]
   13994:	mov	r3, #0
   13998:	str	r3, [sp, #8]
   1399c:	b	13d40 <__assert_fail@plt+0x29b4>
   139a0:	ldr	r3, [r0, #48]	; 0x30
   139a4:	and	r2, r3, #516	; 0x204
   139a8:	cmp	r2, #512	; 0x200
   139ac:	ldreq	r0, [r0, #32]
   139b0:	mvnne	r0, #99	; 0x63
   139b4:	ldr	r1, [r9, #24]
   139b8:	ands	r2, r3, #16
   139bc:	beq	139dc <__assert_fail@plt+0x2650>
   139c0:	tst	r3, #1
   139c4:	moveq	r2, #32768	; 0x8000
   139c8:	beq	139dc <__assert_fail@plt+0x2650>
   139cc:	ldr	r2, [r9, #48]	; 0x30
   139d0:	cmp	r2, #0
   139d4:	movne	r2, #32768	; 0x8000
   139d8:	moveq	r2, #0
   139dc:	add	r3, sp, #60	; 0x3c
   139e0:	bl	16084 <__assert_fail@plt+0x4cf8>
   139e4:	str	r0, [r9, #12]
   139e8:	cmp	r0, #0
   139ec:	beq	13ae0 <__assert_fail@plt+0x2754>
   139f0:	ldrh	r3, [r9, #56]	; 0x38
   139f4:	cmp	r3, #11
   139f8:	beq	13b14 <__assert_fail@plt+0x2788>
   139fc:	ldr	r3, [r5, #48]	; 0x30
   13a00:	tst	r3, #256	; 0x100
   13a04:	bne	13b2c <__assert_fail@plt+0x27a0>
   13a08:	ldr	r3, [r5, #44]	; 0x2c
   13a0c:	cmp	r3, #0
   13a10:	ldr	r3, [pc, #2136]	; 14270 <__assert_fail@plt+0x2ee4>
   13a14:	mvnne	r3, #0
   13a18:	str	r3, [sp, #24]
   13a1c:	ldr	r3, [sp, #40]	; 0x28
   13a20:	cmp	r3, #2
   13a24:	beq	13c1c <__assert_fail@plt+0x2890>
   13a28:	ldr	r3, [r5, #48]	; 0x30
   13a2c:	and	r3, r3, #56	; 0x38
   13a30:	cmp	r3, #24
   13a34:	beq	13b74 <__assert_fail@plt+0x27e8>
   13a38:	ldr	r3, [sp, #40]	; 0x28
   13a3c:	cmp	r3, #3
   13a40:	movne	r6, #0
   13a44:	moveq	r6, #1
   13a48:	mov	r4, #1
   13a4c:	ldr	r3, [r5, #48]	; 0x30
   13a50:	tst	r3, #512	; 0x200
   13a54:	bne	13c04 <__assert_fail@plt+0x2878>
   13a58:	ldr	r2, [sp, #60]	; 0x3c
   13a5c:	cmp	r2, #0
   13a60:	blt	13a84 <__assert_fail@plt+0x26f8>
   13a64:	mov	r3, #0
   13a68:	mov	r1, r9
   13a6c:	mov	r0, r5
   13a70:	bl	135d4 <__assert_fail@plt+0x2248>
   13a74:	cmp	r0, #0
   13a78:	moveq	r3, #1
   13a7c:	streq	r3, [sp, #52]	; 0x34
   13a80:	beq	138d4 <__assert_fail@plt+0x2548>
   13a84:	tst	r4, r6
   13a88:	beq	13a98 <__assert_fail@plt+0x270c>
   13a8c:	bl	1123c <__errno_location@plt>
   13a90:	ldr	r3, [r0]
   13a94:	str	r3, [r9, #32]
   13a98:	ldrh	r3, [r9, #58]	; 0x3a
   13a9c:	orr	r3, r3, #1
   13aa0:	strh	r3, [r9, #58]	; 0x3a
   13aa4:	ldr	r0, [r9, #12]
   13aa8:	bl	11368 <closedir@plt>
   13aac:	mov	r3, #0
   13ab0:	str	r3, [r9, #12]
   13ab4:	ldr	r3, [r5, #48]	; 0x30
   13ab8:	tst	r3, #512	; 0x200
   13abc:	beq	13ad0 <__assert_fail@plt+0x2744>
   13ac0:	ldr	r0, [sp, #60]	; 0x3c
   13ac4:	cmp	r0, #0
   13ac8:	blt	13ad0 <__assert_fail@plt+0x2744>
   13acc:	bl	11350 <close@plt>
   13ad0:	mov	r3, #0
   13ad4:	str	r3, [r9, #12]
   13ad8:	str	r3, [sp, #52]	; 0x34
   13adc:	b	138d4 <__assert_fail@plt+0x2548>
   13ae0:	ldr	r3, [sp, #40]	; 0x28
   13ae4:	cmp	r3, #3
   13ae8:	movne	r3, #0
   13aec:	strne	r3, [sp, #8]
   13af0:	bne	13d40 <__assert_fail@plt+0x29b4>
   13af4:	mov	r3, #4
   13af8:	strh	r3, [r9, #56]	; 0x38
   13afc:	bl	1123c <__errno_location@plt>
   13b00:	ldr	r3, [r0]
   13b04:	str	r3, [r9, #32]
   13b08:	mov	r3, #0
   13b0c:	str	r3, [sp, #8]
   13b10:	b	13d40 <__assert_fail@plt+0x29b4>
   13b14:	mov	r2, #0
   13b18:	mov	r1, r9
   13b1c:	mov	r0, r5
   13b20:	bl	12ef8 <__assert_fail@plt+0x1b6c>
   13b24:	strh	r0, [r9, #56]	; 0x38
   13b28:	b	13a08 <__assert_fail@plt+0x267c>
   13b2c:	mov	r1, r9
   13b30:	mov	r0, r5
   13b34:	bl	137bc <__assert_fail@plt+0x2430>
   13b38:	mov	r2, #0
   13b3c:	mov	r1, r9
   13b40:	mov	r0, r5
   13b44:	bl	12ef8 <__assert_fail@plt+0x1b6c>
   13b48:	mov	r1, r9
   13b4c:	mov	r0, r5
   13b50:	bl	13438 <__assert_fail@plt+0x20ac>
   13b54:	cmp	r0, #0
   13b58:	bne	13a08 <__assert_fail@plt+0x267c>
   13b5c:	bl	1123c <__errno_location@plt>
   13b60:	mov	r3, #12
   13b64:	str	r3, [r0]
   13b68:	mov	r3, #0
   13b6c:	str	r3, [sp, #8]
   13b70:	b	13d40 <__assert_fail@plt+0x29b4>
   13b74:	ldr	r3, [r9, #84]	; 0x54
   13b78:	cmp	r3, #2
   13b7c:	bne	13a38 <__assert_fail@plt+0x26ac>
   13b80:	ldr	r1, [sp, #60]	; 0x3c
   13b84:	mov	r0, r9
   13b88:	bl	1331c <__assert_fail@plt+0x1f90>
   13b8c:	ldr	r3, [pc, #1760]	; 14274 <__assert_fail@plt+0x2ee8>
   13b90:	cmp	r0, r3
   13b94:	beq	13bec <__assert_fail@plt+0x2860>
   13b98:	bgt	13bd4 <__assert_fail@plt+0x2848>
   13b9c:	ldr	r3, [pc, #1748]	; 14278 <__assert_fail@plt+0x2eec>
   13ba0:	cmp	r0, r3
   13ba4:	beq	13bec <__assert_fail@plt+0x2860>
   13ba8:	cmp	r0, #0
   13bac:	beq	13bec <__assert_fail@plt+0x2860>
   13bb0:	ldr	r3, [sp, #40]	; 0x28
   13bb4:	cmp	r3, #3
   13bb8:	moveq	r6, #1
   13bbc:	movne	r6, #0
   13bc0:	movne	r3, #0
   13bc4:	strne	r3, [sp, #52]	; 0x34
   13bc8:	bne	138d4 <__assert_fail@plt+0x2548>
   13bcc:	mov	r4, #0
   13bd0:	b	13a4c <__assert_fail@plt+0x26c0>
   13bd4:	ldr	r3, [pc, #1696]	; 1427c <__assert_fail@plt+0x2ef0>
   13bd8:	cmp	r0, r3
   13bdc:	beq	13bec <__assert_fail@plt+0x2860>
   13be0:	ldr	r3, [pc, #1688]	; 14280 <__assert_fail@plt+0x2ef4>
   13be4:	cmp	r0, r3
   13be8:	bne	13bb0 <__assert_fail@plt+0x2824>
   13bec:	ldr	r3, [sp, #40]	; 0x28
   13bf0:	cmp	r3, #3
   13bf4:	movne	r6, #0
   13bf8:	moveq	r6, #1
   13bfc:	mov	r4, #1
   13c00:	b	13a4c <__assert_fail@plt+0x26c0>
   13c04:	mov	r2, #3
   13c08:	ldr	r1, [pc, #1652]	; 14284 <__assert_fail@plt+0x2ef8>
   13c0c:	ldr	r0, [sp, #60]	; 0x3c
   13c10:	bl	19468 <__assert_fail@plt+0x80dc>
   13c14:	str	r0, [sp, #60]	; 0x3c
   13c18:	b	13a58 <__assert_fail@plt+0x26cc>
   13c1c:	mov	r3, #0
   13c20:	str	r3, [sp, #52]	; 0x34
   13c24:	b	138d4 <__assert_fail@plt+0x2548>
   13c28:	ldr	r3, [sp, #16]
   13c2c:	ldr	r3, [r3]
   13c30:	cmp	r3, #0
   13c34:	beq	13c60 <__assert_fail@plt+0x28d4>
   13c38:	str	r3, [r9, #32]
   13c3c:	ldr	r3, [sp, #44]	; 0x2c
   13c40:	cmp	r8, #0
   13c44:	cmpeq	r3, #0
   13c48:	movne	r3, #1
   13c4c:	moveq	r3, #0
   13c50:	cmp	r3, #0
   13c54:	movne	r3, #7
   13c58:	moveq	r3, #4
   13c5c:	strh	r3, [r9, #56]	; 0x38
   13c60:	ldr	r0, [r9, #12]
   13c64:	cmp	r0, #0
   13c68:	beq	13c78 <__assert_fail@plt+0x28ec>
   13c6c:	bl	11368 <closedir@plt>
   13c70:	mov	r3, #0
   13c74:	str	r3, [r9, #12]
   13c78:	ldr	r3, [sp, #36]	; 0x24
   13c7c:	cmp	r3, #0
   13c80:	bne	140c0 <__assert_fail@plt+0x2d34>
   13c84:	ldr	r3, [r5, #48]	; 0x30
   13c88:	tst	r3, #4
   13c8c:	beq	13cb8 <__assert_fail@plt+0x292c>
   13c90:	ldr	r3, [r5, #36]	; 0x24
   13c94:	ldr	r2, [sp, #12]
   13c98:	cmp	r8, #0
   13c9c:	cmpne	r3, r2
   13ca0:	ldreq	r3, [sp, #28]
   13ca4:	subeq	r3, r3, #1
   13ca8:	streq	r3, [sp, #28]
   13cac:	mov	r3, #0
   13cb0:	ldr	r2, [sp, #28]
   13cb4:	strb	r3, [r2]
   13cb8:	ldr	r3, [sp, #52]	; 0x34
   13cbc:	ldr	r2, [sp, #44]	; 0x2c
   13cc0:	cmp	r2, #0
   13cc4:	movne	r3, #0
   13cc8:	andeq	r3, r3, #1
   13ccc:	cmp	r3, #0
   13cd0:	beq	13d08 <__assert_fail@plt+0x297c>
   13cd4:	ldr	r3, [sp, #40]	; 0x28
   13cd8:	cmp	r8, #0
   13cdc:	cmpne	r3, #1
   13ce0:	bne	13d08 <__assert_fail@plt+0x297c>
   13ce4:	ldr	r3, [r9, #48]	; 0x30
   13ce8:	cmp	r3, #0
   13cec:	bne	14140 <__assert_fail@plt+0x2db4>
   13cf0:	mov	r0, r5
   13cf4:	bl	13584 <__assert_fail@plt+0x21f8>
   13cf8:	adds	r0, r0, #0
   13cfc:	movne	r0, #1
   13d00:	cmp	r0, #0
   13d04:	bne	14160 <__assert_fail@plt+0x2dd4>
   13d08:	cmp	r8, #0
   13d0c:	beq	14188 <__assert_fail@plt+0x2dfc>
   13d10:	ldr	r3, [sp, #48]	; 0x30
   13d14:	cmp	r3, #0
   13d18:	bne	141c0 <__assert_fail@plt+0x2e34>
   13d1c:	ldr	r3, [r5, #44]	; 0x2c
   13d20:	cmp	r3, #0
   13d24:	cmpne	r8, #1
   13d28:	bls	13d40 <__assert_fail@plt+0x29b4>
   13d2c:	mov	r2, r8
   13d30:	ldr	r1, [sp, #8]
   13d34:	mov	r0, r5
   13d38:	bl	13050 <__assert_fail@plt+0x1cc4>
   13d3c:	str	r0, [sp, #8]
   13d40:	ldr	r0, [sp, #8]
   13d44:	add	sp, sp, #68	; 0x44
   13d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d4c:	ldrb	r3, [r7, #20]
   13d50:	cmp	r3, #0
   13d54:	beq	140b8 <__assert_fail@plt+0x2d2c>
   13d58:	ldrh	r3, [r7, #20]
   13d5c:	cmp	r3, #46	; 0x2e
   13d60:	bne	13f10 <__assert_fail@plt+0x2b84>
   13d64:	ldr	r4, [sp, #4]
   13d68:	b	13ecc <__assert_fail@plt+0x2b40>
   13d6c:	ldr	fp, [r5, #24]
   13d70:	ldr	r3, [sp, #32]
   13d74:	add	r1, r3, #2
   13d78:	add	r1, r1, r6
   13d7c:	mov	r0, r5
   13d80:	bl	12e88 <__assert_fail@plt+0x1afc>
   13d84:	cmp	r0, #0
   13d88:	beq	13dc0 <__assert_fail@plt+0x2a34>
   13d8c:	ldr	r3, [r5, #24]
   13d90:	cmp	fp, r3
   13d94:	beq	13e08 <__assert_fail@plt+0x2a7c>
   13d98:	ldr	r2, [r5, #48]	; 0x30
   13d9c:	tst	r2, #4
   13da0:	ldrne	r2, [sp, #12]
   13da4:	addne	r3, r3, r2
   13da8:	strne	r3, [sp, #28]
   13dac:	ldr	fp, [r5, #36]	; 0x24
   13db0:	ldr	r3, [sp, #12]
   13db4:	sub	fp, fp, r3
   13db8:	str	r0, [sp, #36]	; 0x24
   13dbc:	b	13f40 <__assert_fail@plt+0x2bb4>
   13dc0:	ldr	r7, [sp, #16]
   13dc4:	ldr	r6, [r7]
   13dc8:	mov	r0, r4
   13dcc:	bl	12d5c <__assert_fail@plt+0x19d0>
   13dd0:	ldr	r0, [sp, #8]
   13dd4:	bl	1326c <__assert_fail@plt+0x1ee0>
   13dd8:	ldr	r0, [r9, #12]
   13ddc:	bl	11368 <closedir@plt>
   13de0:	mov	r2, #0
   13de4:	str	r2, [r9, #12]
   13de8:	mov	r3, #7
   13dec:	strh	r3, [r9, #56]	; 0x38
   13df0:	ldr	r3, [r5, #48]	; 0x30
   13df4:	orr	r3, r3, #8192	; 0x2000
   13df8:	str	r3, [r5, #48]	; 0x30
   13dfc:	str	r6, [r7]
   13e00:	str	r2, [sp, #8]
   13e04:	b	13d40 <__assert_fail@plt+0x29b4>
   13e08:	ldr	r0, [sp, #36]	; 0x24
   13e0c:	b	13dac <__assert_fail@plt+0x2a20>
   13e10:	mov	r0, r4
   13e14:	bl	12d5c <__assert_fail@plt+0x19d0>
   13e18:	ldr	r0, [sp, #8]
   13e1c:	bl	1326c <__assert_fail@plt+0x1ee0>
   13e20:	ldr	r0, [r9, #12]
   13e24:	bl	11368 <closedir@plt>
   13e28:	mov	r2, #0
   13e2c:	str	r2, [r9, #12]
   13e30:	mov	r3, #7
   13e34:	strh	r3, [r9, #56]	; 0x38
   13e38:	ldr	r3, [r5, #48]	; 0x30
   13e3c:	orr	r3, r3, #8192	; 0x2000
   13e40:	str	r3, [r5, #48]	; 0x30
   13e44:	mov	r3, #36	; 0x24
   13e48:	ldr	r1, [sp, #16]
   13e4c:	str	r3, [r1]
   13e50:	str	r2, [sp, #8]
   13e54:	b	13d40 <__assert_fail@plt+0x29b4>
   13e58:	ldr	r3, [r4, #28]
   13e5c:	str	r3, [r4, #24]
   13e60:	ldr	r2, [r4, #52]	; 0x34
   13e64:	add	r2, r2, #1
   13e68:	add	r1, r4, #168	; 0xa8
   13e6c:	ldr	r0, [sp, #28]
   13e70:	bl	11098 <memmove@plt>
   13e74:	b	13f7c <__assert_fail@plt+0x2bf0>
   13e78:	mov	r3, sl
   13e7c:	mov	r2, #16384	; 0x4000
   13e80:	str	r2, [r4, #80]	; 0x50
   13e84:	cmp	r3, #0
   13e88:	movne	r2, #1
   13e8c:	moveq	r2, #2
   13e90:	mov	r3, #0
   13e94:	strd	r2, [r4, #112]	; 0x70
   13e98:	str	sl, [r4, #8]
   13e9c:	ldr	r3, [sp, #8]
   13ea0:	cmp	r3, #0
   13ea4:	ldrne	r3, [sp, #4]
   13ea8:	strne	r4, [r3, #8]
   13eac:	streq	r4, [sp, #8]
   13eb0:	ldr	r3, [pc, #976]	; 14288 <__assert_fail@plt+0x2efc>
   13eb4:	cmp	r8, r3
   13eb8:	beq	1406c <__assert_fail@plt+0x2ce0>
   13ebc:	add	r8, r8, #1
   13ec0:	ldr	r3, [sp, #24]
   13ec4:	cmp	r8, r3
   13ec8:	bcs	13c78 <__assert_fail@plt+0x28ec>
   13ecc:	str	r4, [sp, #4]
   13ed0:	ldr	r3, [r9, #12]
   13ed4:	cmp	r3, #0
   13ed8:	beq	13c78 <__assert_fail@plt+0x28ec>
   13edc:	bl	1123c <__errno_location@plt>
   13ee0:	str	r0, [sp, #16]
   13ee4:	str	sl, [r0]
   13ee8:	ldr	r0, [r9, #12]
   13eec:	bl	112d8 <readdir64@plt>
   13ef0:	subs	r7, r0, #0
   13ef4:	beq	13c28 <__assert_fail@plt+0x289c>
   13ef8:	ldr	r3, [r5, #48]	; 0x30
   13efc:	tst	r3, #32
   13f00:	bne	13f10 <__assert_fail@plt+0x2b84>
   13f04:	ldrb	r3, [r7, #19]
   13f08:	cmp	r3, #46	; 0x2e
   13f0c:	beq	13d4c <__assert_fail@plt+0x29c0>
   13f10:	add	r4, r7, #19
   13f14:	mov	r0, r4
   13f18:	bl	1120c <strlen@plt>
   13f1c:	mov	r6, r0
   13f20:	mov	r2, r0
   13f24:	mov	r1, r4
   13f28:	mov	r0, r5
   13f2c:	bl	13124 <__assert_fail@plt+0x1d98>
   13f30:	subs	r4, r0, #0
   13f34:	beq	13dc0 <__assert_fail@plt+0x2a34>
   13f38:	cmp	fp, r6
   13f3c:	bls	13d6c <__assert_fail@plt+0x29e0>
   13f40:	ldr	r3, [sp, #12]
   13f44:	adds	r6, r3, r6
   13f48:	bcs	13e10 <__assert_fail@plt+0x2a84>
   13f4c:	ldr	r3, [sp, #20]
   13f50:	str	r3, [r4, #48]	; 0x30
   13f54:	ldr	r3, [r5]
   13f58:	str	r3, [r4, #4]
   13f5c:	str	r6, [r4, #40]	; 0x28
   13f60:	ldrd	r2, [r7]
   13f64:	strd	r2, [r4, #160]	; 0xa0
   13f68:	ldr	r3, [r5, #48]	; 0x30
   13f6c:	tst	r3, #4
   13f70:	addeq	r3, r4, #168	; 0xa8
   13f74:	streq	r3, [r4, #24]
   13f78:	bne	13e58 <__assert_fail@plt+0x2acc>
   13f7c:	ldr	r3, [r5, #44]	; 0x2c
   13f80:	cmp	r3, #0
   13f84:	beq	13f94 <__assert_fail@plt+0x2c08>
   13f88:	ldr	r3, [r5, #48]	; 0x30
   13f8c:	tst	r3, #1024	; 0x400
   13f90:	beq	14054 <__assert_fail@plt+0x2cc8>
   13f94:	ldr	r3, [r5, #48]	; 0x30
   13f98:	tst	r3, #8
   13f9c:	beq	14224 <__assert_fail@plt+0x2e98>
   13fa0:	ldrb	r2, [r7, #18]
   13fa4:	tst	r2, #251	; 0xfb
   13fa8:	beq	14224 <__assert_fail@plt+0x2e98>
   13fac:	lsr	r3, r3, #4
   13fb0:	and	r3, r3, #1
   13fb4:	cmp	r2, #10
   13fb8:	orrne	r3, r3, #1
   13fbc:	cmp	r3, #0
   13fc0:	beq	14224 <__assert_fail@plt+0x2e98>
   13fc4:	mov	r2, #11
   13fc8:	strh	r2, [r4, #56]	; 0x38
   13fcc:	ldrb	r2, [r7, #18]
   13fd0:	sub	r2, r2, #1
   13fd4:	cmp	r2, #11
   13fd8:	ldrls	pc, [pc, r2, lsl #2]
   13fdc:	b	14044 <__assert_fail@plt+0x2cb8>
   13fe0:	andeq	r4, r1, r4, lsl r0
   13fe4:	andeq	r4, r1, ip, asr #32
   13fe8:	andeq	r4, r1, r4, asr #32
   13fec:	andeq	r3, r1, ip, ror lr
   13ff0:	andeq	r4, r1, r4, asr #32
   13ff4:	andeq	r4, r1, r8, ror #3
   13ff8:	andeq	r4, r1, r4, asr #32
   13ffc:	andeq	r4, r1, ip, lsr #32
   14000:	andeq	r4, r1, r4, asr #32
   14004:	andeq	r4, r1, r0, lsr #32
   14008:	andeq	r4, r1, r4, asr #32
   1400c:	andeq	r4, r1, r8, lsr r0
   14010:	mov	r3, sl
   14014:	mov	r2, #4096	; 0x1000
   14018:	b	13e80 <__assert_fail@plt+0x2af4>
   1401c:	mov	r3, sl
   14020:	mov	r2, #40960	; 0xa000
   14024:	b	13e80 <__assert_fail@plt+0x2af4>
   14028:	mov	r3, sl
   1402c:	mov	r2, #32768	; 0x8000
   14030:	b	13e80 <__assert_fail@plt+0x2af4>
   14034:	mov	r3, sl
   14038:	mov	r2, #49152	; 0xc000
   1403c:	b	13e80 <__assert_fail@plt+0x2af4>
   14040:	mov	r3, sl
   14044:	mov	r2, sl
   14048:	b	13e80 <__assert_fail@plt+0x2af4>
   1404c:	mov	r2, #8192	; 0x2000
   14050:	b	13e80 <__assert_fail@plt+0x2af4>
   14054:	mov	r2, sl
   14058:	mov	r1, r4
   1405c:	mov	r0, r5
   14060:	bl	12ef8 <__assert_fail@plt+0x1b6c>
   14064:	strh	r0, [r4, #56]	; 0x38
   14068:	b	13e98 <__assert_fail@plt+0x2b0c>
   1406c:	ldr	r3, [r5, #44]	; 0x2c
   14070:	cmp	r3, #0
   14074:	bne	13ebc <__assert_fail@plt+0x2b30>
   14078:	ldr	r1, [sp, #60]	; 0x3c
   1407c:	mov	r0, r9
   14080:	bl	1331c <__assert_fail@plt+0x1f90>
   14084:	ldr	r3, [pc, #488]	; 14274 <__assert_fail@plt+0x2ee8>
   14088:	cmp	r0, r3
   1408c:	beq	140b0 <__assert_fail@plt+0x2d24>
   14090:	ldr	r3, [pc, #500]	; 1428c <__assert_fail@plt+0x2f00>
   14094:	cmp	r0, r3
   14098:	beq	140b0 <__assert_fail@plt+0x2d24>
   1409c:	ldr	r3, [pc, #468]	; 14278 <__assert_fail@plt+0x2eec>
   140a0:	cmp	r0, r3
   140a4:	movne	r3, #1
   140a8:	strne	r3, [sp, #48]	; 0x30
   140ac:	bne	13ebc <__assert_fail@plt+0x2b30>
   140b0:	str	sl, [sp, #48]	; 0x30
   140b4:	b	13ebc <__assert_fail@plt+0x2b30>
   140b8:	ldr	r4, [sp, #4]
   140bc:	b	13ecc <__assert_fail@plt+0x2b40>
   140c0:	ldr	r0, [r5, #24]
   140c4:	ldr	r1, [r5, #4]
   140c8:	cmp	r1, #0
   140cc:	beq	140fc <__assert_fail@plt+0x2d70>
   140d0:	ldr	r3, [r1, #24]
   140d4:	add	r2, r1, #168	; 0xa8
   140d8:	cmp	r3, r2
   140dc:	ldrne	r2, [r1, #28]
   140e0:	subne	r3, r3, r2
   140e4:	addne	r3, r0, r3
   140e8:	strne	r3, [r1, #24]
   140ec:	str	r0, [r1, #28]
   140f0:	ldr	r1, [r1, #8]
   140f4:	cmp	r1, #0
   140f8:	bne	140d0 <__assert_fail@plt+0x2d44>
   140fc:	ldr	r3, [sp, #8]
   14100:	ldr	r2, [r3, #48]	; 0x30
   14104:	cmp	r2, #0
   14108:	blt	13c84 <__assert_fail@plt+0x28f8>
   1410c:	ldr	r2, [r3, #24]
   14110:	add	r1, r3, #168	; 0xa8
   14114:	cmp	r2, r1
   14118:	ldrne	r1, [r3, #28]
   1411c:	subne	r2, r2, r1
   14120:	addne	r2, r0, r2
   14124:	strne	r2, [r3, #24]
   14128:	str	r0, [r3, #28]
   1412c:	ldr	r2, [r3, #8]
   14130:	cmp	r2, #0
   14134:	ldreq	r2, [r3, #4]
   14138:	mov	r3, r2
   1413c:	b	14100 <__assert_fail@plt+0x2d74>
   14140:	ldr	r3, [pc, #328]	; 14290 <__assert_fail@plt+0x2f04>
   14144:	mvn	r2, #0
   14148:	ldr	r1, [r9, #4]
   1414c:	mov	r0, r5
   14150:	bl	135d4 <__assert_fail@plt+0x2248>
   14154:	adds	r0, r0, #0
   14158:	movne	r0, #1
   1415c:	b	13d00 <__assert_fail@plt+0x2974>
   14160:	mov	r3, #7
   14164:	strh	r3, [r9, #56]	; 0x38
   14168:	ldr	r3, [r5, #48]	; 0x30
   1416c:	orr	r3, r3, #8192	; 0x2000
   14170:	str	r3, [r5, #48]	; 0x30
   14174:	ldr	r0, [sp, #8]
   14178:	bl	1326c <__assert_fail@plt+0x1ee0>
   1417c:	mov	r3, #0
   14180:	str	r3, [sp, #8]
   14184:	b	13d40 <__assert_fail@plt+0x29b4>
   14188:	ldr	r3, [sp, #40]	; 0x28
   1418c:	cmp	r3, #3
   14190:	beq	141a8 <__assert_fail@plt+0x2e1c>
   14194:	ldr	r0, [sp, #8]
   14198:	bl	1326c <__assert_fail@plt+0x1ee0>
   1419c:	mov	r3, #0
   141a0:	str	r3, [sp, #8]
   141a4:	b	13d40 <__assert_fail@plt+0x29b4>
   141a8:	ldrh	r3, [r9, #56]	; 0x38
   141ac:	cmp	r3, #4
   141b0:	cmpne	r3, #7
   141b4:	movne	r3, #6
   141b8:	strhne	r3, [r9, #56]	; 0x38
   141bc:	b	14194 <__assert_fail@plt+0x2e08>
   141c0:	ldr	r3, [pc, #204]	; 14294 <__assert_fail@plt+0x2f08>
   141c4:	str	r3, [r5, #44]	; 0x2c
   141c8:	mov	r2, r8
   141cc:	ldr	r1, [sp, #8]
   141d0:	mov	r0, r5
   141d4:	bl	13050 <__assert_fail@plt+0x1cc4>
   141d8:	str	r0, [sp, #8]
   141dc:	mov	r3, #0
   141e0:	str	r3, [r5, #44]	; 0x2c
   141e4:	b	13d40 <__assert_fail@plt+0x29b4>
   141e8:	mov	r3, #24576	; 0x6000
   141ec:	str	r3, [r4, #80]	; 0x50
   141f0:	mov	r2, #1
   141f4:	mov	r3, #0
   141f8:	b	13e94 <__assert_fail@plt+0x2b08>
   141fc:	mov	r3, #24576	; 0x6000
   14200:	str	r3, [r4, #80]	; 0x50
   14204:	mov	r2, #2
   14208:	mov	r3, #0
   1420c:	b	13e94 <__assert_fail@plt+0x2b08>
   14210:	mov	r3, #8192	; 0x2000
   14214:	str	r3, [r4, #80]	; 0x50
   14218:	mov	r2, #2
   1421c:	mov	r3, #0
   14220:	b	13e94 <__assert_fail@plt+0x2b08>
   14224:	mov	r3, #11
   14228:	strh	r3, [r4, #56]	; 0x38
   1422c:	ldrb	r3, [r7, #18]
   14230:	sub	r3, r3, #1
   14234:	cmp	r3, #11
   14238:	ldrls	pc, [pc, r3, lsl #2]
   1423c:	b	14040 <__assert_fail@plt+0x2cb4>
   14240:	andeq	r4, r1, r0, lsl r0
   14244:	andeq	r4, r1, r0, lsl r2
   14248:	andeq	r4, r1, r0, asr #32
   1424c:	andeq	r3, r1, r8, ror lr
   14250:	andeq	r4, r1, r0, asr #32
   14254:	strdeq	r4, [r1], -ip
   14258:	andeq	r4, r1, r0, asr #32
   1425c:	andeq	r4, r1, r8, lsr #32
   14260:	andeq	r4, r1, r0, asr #32
   14264:	andeq	r4, r1, ip, lsl r0
   14268:	andeq	r4, r1, r0, asr #32
   1426c:	andeq	r4, r1, r4, lsr r0
   14270:	andeq	r8, r1, r0, lsr #13
   14274:	andeq	r6, r0, r9, ror #18
   14278:			; <UNDEFINED> instruction: 0xff534d42
   1427c:	andeq	r9, r0, r0, lsr #31
   14280:	movtpl	r4, #24911	; 0x614f
   14284:	andeq	r0, r0, r6, lsl #8
   14288:	andeq	r2, r0, r0, lsl r7
   1428c:			; <UNDEFINED> instruction: 0x01021994
   14290:	andeq	fp, r1, r4, lsr #3
   14294:	andeq	r2, r1, r0, asr lr
   14298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1429c:	sub	sp, sp, #20
   142a0:	bic	r3, r1, #4080	; 0xff0
   142a4:	bics	r3, r3, #15
   142a8:	bne	143c8 <__assert_fail@plt+0x303c>
   142ac:	mov	r7, r0
   142b0:	mov	r9, r1
   142b4:	mov	fp, r2
   142b8:	and	r3, r1, #516	; 0x204
   142bc:	cmp	r3, #516	; 0x204
   142c0:	beq	143dc <__assert_fail@plt+0x3050>
   142c4:	tst	r1, #18
   142c8:	beq	143f0 <__assert_fail@plt+0x3064>
   142cc:	mov	r1, #96	; 0x60
   142d0:	mov	r0, #1
   142d4:	bl	19190 <__assert_fail@plt+0x7e04>
   142d8:	subs	r6, r0, #0
   142dc:	beq	1460c <__assert_fail@plt+0x3280>
   142e0:	str	fp, [r6, #44]	; 0x2c
   142e4:	tst	r9, #2
   142e8:	streq	r9, [r6, #48]	; 0x30
   142ec:	bicne	r3, r9, #512	; 0x200
   142f0:	orrne	r3, r3, #4
   142f4:	strne	r3, [r6, #48]	; 0x30
   142f8:	mvn	r3, #99	; 0x63
   142fc:	str	r3, [r6, #32]
   14300:	ldr	r0, [r7]
   14304:	cmp	r0, #0
   14308:	beq	14404 <__assert_fail@plt+0x3078>
   1430c:	mov	r5, r7
   14310:	mov	r4, #0
   14314:	bl	1120c <strlen@plt>
   14318:	cmp	r4, r0
   1431c:	movcc	r4, r0
   14320:	ldr	r0, [r5, #4]!
   14324:	cmp	r0, #0
   14328:	bne	14314 <__assert_fail@plt+0x2f88>
   1432c:	add	r1, r4, #1
   14330:	cmp	r1, #4096	; 0x1000
   14334:	movcc	r1, #4096	; 0x1000
   14338:	mov	r0, r6
   1433c:	bl	12e88 <__assert_fail@plt+0x1afc>
   14340:	subs	sl, r0, #0
   14344:	beq	14600 <__assert_fail@plt+0x3274>
   14348:	ldr	r3, [r7]
   1434c:	cmp	r3, #0
   14350:	beq	14618 <__assert_fail@plt+0x328c>
   14354:	mov	r2, #0
   14358:	ldr	r1, [pc, #716]	; 1462c <__assert_fail@plt+0x32a0>
   1435c:	mov	r0, r6
   14360:	bl	13124 <__assert_fail@plt+0x1d98>
   14364:	subs	r3, r0, #0
   14368:	mov	r2, r3
   1436c:	str	r3, [sp, #8]
   14370:	beq	145f8 <__assert_fail@plt+0x326c>
   14374:	mvn	r3, #0
   14378:	str	r3, [r2, #48]	; 0x30
   1437c:	cmp	fp, #0
   14380:	beq	14390 <__assert_fail@plt+0x3004>
   14384:	ldr	sl, [r6, #48]	; 0x30
   14388:	lsr	sl, sl, #10
   1438c:	and	sl, sl, #1
   14390:	ldr	r4, [r7]
   14394:	cmp	r4, #0
   14398:	beq	145a8 <__assert_fail@plt+0x321c>
   1439c:	mov	r3, #0
   143a0:	mov	r5, r3
   143a4:	str	r3, [sp, #12]
   143a8:	mov	r8, r3
   143ac:	lsr	r9, r9, #11
   143b0:	eor	r9, r9, #1
   143b4:	and	r3, r9, #1
   143b8:	mov	r9, r5
   143bc:	str	r6, [sp, #4]
   143c0:	mov	r6, r3
   143c4:	b	1447c <__assert_fail@plt+0x30f0>
   143c8:	bl	1123c <__errno_location@plt>
   143cc:	mov	r3, #22
   143d0:	str	r3, [r0]
   143d4:	mov	r6, #0
   143d8:	b	1460c <__assert_fail@plt+0x3280>
   143dc:	bl	1123c <__errno_location@plt>
   143e0:	mov	r3, #22
   143e4:	str	r3, [r0]
   143e8:	mov	r6, #0
   143ec:	b	1460c <__assert_fail@plt+0x3280>
   143f0:	bl	1123c <__errno_location@plt>
   143f4:	mov	r3, #22
   143f8:	str	r3, [r0]
   143fc:	mov	r6, #0
   14400:	b	1460c <__assert_fail@plt+0x3280>
   14404:	mov	r4, #0
   14408:	b	1432c <__assert_fail@plt+0x2fa0>
   1440c:	mov	r1, r4
   14410:	ldr	r0, [sp, #4]
   14414:	bl	13124 <__assert_fail@plt+0x1d98>
   14418:	subs	r4, r0, #0
   1441c:	beq	145e4 <__assert_fail@plt+0x3258>
   14420:	str	r9, [r4, #48]	; 0x30
   14424:	ldr	r3, [sp, #8]
   14428:	str	r3, [r4, #4]
   1442c:	add	r3, r4, #168	; 0xa8
   14430:	str	r3, [r4, #24]
   14434:	cmp	r5, #0
   14438:	moveq	r3, #0
   1443c:	andne	r3, sl, #1
   14440:	cmp	r3, #0
   14444:	beq	144e4 <__assert_fail@plt+0x3158>
   14448:	mov	r3, #11
   1444c:	strh	r3, [r4, #56]	; 0x38
   14450:	mov	r2, #2
   14454:	mov	r3, #0
   14458:	strd	r2, [r4, #112]	; 0x70
   1445c:	cmp	fp, #0
   14460:	beq	144fc <__assert_fail@plt+0x3170>
   14464:	str	r5, [r4, #8]
   14468:	mov	r5, r4
   1446c:	add	r8, r8, #1
   14470:	ldr	r4, [r7, #4]!
   14474:	cmp	r4, #0
   14478:	beq	1451c <__assert_fail@plt+0x3190>
   1447c:	mov	r0, r4
   14480:	bl	1120c <strlen@plt>
   14484:	mov	r2, r0
   14488:	cmp	r0, #2
   1448c:	movls	r3, #0
   14490:	andhi	r3, r6, #1
   14494:	cmp	r3, #0
   14498:	beq	1440c <__assert_fail@plt+0x3080>
   1449c:	add	r3, r4, r0
   144a0:	ldrb	r3, [r3, #-1]
   144a4:	cmp	r3, #47	; 0x2f
   144a8:	bne	1440c <__assert_fail@plt+0x3080>
   144ac:	cmp	r0, #1
   144b0:	bls	1440c <__assert_fail@plt+0x3080>
   144b4:	sub	r1, r0, #2
   144b8:	add	r3, r4, r1
   144bc:	ldrb	r1, [r4, r1]
   144c0:	cmp	r1, #47	; 0x2f
   144c4:	bne	1440c <__assert_fail@plt+0x3080>
   144c8:	sub	r2, r2, #1
   144cc:	cmp	r2, #1
   144d0:	beq	1440c <__assert_fail@plt+0x3080>
   144d4:	ldrb	r1, [r3, #-1]!
   144d8:	cmp	r1, #47	; 0x2f
   144dc:	beq	144c8 <__assert_fail@plt+0x313c>
   144e0:	b	1440c <__assert_fail@plt+0x3080>
   144e4:	mov	r2, r9
   144e8:	mov	r1, r4
   144ec:	ldr	r0, [sp, #4]
   144f0:	bl	12ef8 <__assert_fail@plt+0x1b6c>
   144f4:	strh	r0, [r4, #56]	; 0x38
   144f8:	b	1445c <__assert_fail@plt+0x30d0>
   144fc:	str	r9, [r4, #8]
   14500:	cmp	r5, #0
   14504:	ldrne	r3, [sp, #12]
   14508:	strne	r4, [r3, #8]
   1450c:	strne	r4, [sp, #12]
   14510:	streq	r4, [sp, #12]
   14514:	moveq	r5, r4
   14518:	b	1446c <__assert_fail@plt+0x30e0>
   1451c:	ldr	r6, [sp, #4]
   14520:	cmp	fp, #0
   14524:	cmpne	r8, #1
   14528:	bhi	14590 <__assert_fail@plt+0x3204>
   1452c:	mov	r2, #0
   14530:	ldr	r1, [pc, #244]	; 1462c <__assert_fail@plt+0x32a0>
   14534:	mov	r0, r6
   14538:	bl	13124 <__assert_fail@plt+0x1d98>
   1453c:	str	r0, [r6]
   14540:	cmp	r0, #0
   14544:	beq	145e8 <__assert_fail@plt+0x325c>
   14548:	str	r5, [r0, #8]
   1454c:	ldr	r3, [r6]
   14550:	mov	r2, #9
   14554:	strh	r2, [r3, #56]	; 0x38
   14558:	ldr	r3, [r6]
   1455c:	mov	r2, #1
   14560:	str	r2, [r3, #48]	; 0x30
   14564:	mov	r0, r6
   14568:	bl	13198 <__assert_fail@plt+0x1e0c>
   1456c:	cmp	r0, #0
   14570:	beq	145e8 <__assert_fail@plt+0x325c>
   14574:	ldr	r3, [r6, #48]	; 0x30
   14578:	tst	r3, #516	; 0x204
   1457c:	beq	145c0 <__assert_fail@plt+0x3234>
   14580:	mvn	r1, #0
   14584:	add	r0, r6, #60	; 0x3c
   14588:	bl	15f20 <__assert_fail@plt+0x4b94>
   1458c:	b	1460c <__assert_fail@plt+0x3280>
   14590:	mov	r2, r8
   14594:	mov	r1, r5
   14598:	mov	r0, r6
   1459c:	bl	13050 <__assert_fail@plt+0x1cc4>
   145a0:	mov	r5, r0
   145a4:	b	1452c <__assert_fail@plt+0x31a0>
   145a8:	mov	r5, #0
   145ac:	b	1452c <__assert_fail@plt+0x31a0>
   145b0:	mov	r3, #0
   145b4:	str	r3, [sp, #8]
   145b8:	mov	r5, r3
   145bc:	b	1452c <__assert_fail@plt+0x31a0>
   145c0:	ldr	r1, [pc, #104]	; 14630 <__assert_fail@plt+0x32a4>
   145c4:	mov	r0, r6
   145c8:	bl	1321c <__assert_fail@plt+0x1e90>
   145cc:	str	r0, [r6, #28]
   145d0:	cmp	r0, #0
   145d4:	ldrlt	r3, [r6, #48]	; 0x30
   145d8:	orrlt	r3, r3, #4
   145dc:	strlt	r3, [r6, #48]	; 0x30
   145e0:	b	14580 <__assert_fail@plt+0x31f4>
   145e4:	ldr	r6, [sp, #4]
   145e8:	mov	r0, r5
   145ec:	bl	1326c <__assert_fail@plt+0x1ee0>
   145f0:	ldr	r0, [sp, #8]
   145f4:	bl	12d5c <__assert_fail@plt+0x19d0>
   145f8:	ldr	r0, [r6, #24]
   145fc:	bl	12d5c <__assert_fail@plt+0x19d0>
   14600:	mov	r0, r6
   14604:	bl	12d5c <__assert_fail@plt+0x19d0>
   14608:	mov	r6, #0
   1460c:	mov	r0, r6
   14610:	add	sp, sp, #20
   14614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14618:	cmp	fp, #0
   1461c:	beq	145b0 <__assert_fail@plt+0x3224>
   14620:	mov	r3, #0
   14624:	str	r3, [sp, #8]
   14628:	b	14384 <__assert_fail@plt+0x2ff8>
   1462c:	andeq	sl, r1, r8, lsl r9
   14630:	andeq	fp, r1, r8, lsr #3
   14634:	push	{r4, r5, r6, lr}
   14638:	mov	r5, r0
   1463c:	ldr	r0, [r0]
   14640:	cmp	r0, #0
   14644:	beq	1467c <__assert_fail@plt+0x32f0>
   14648:	ldr	r3, [r0, #48]	; 0x30
   1464c:	cmp	r3, #0
   14650:	blt	146e0 <__assert_fail@plt+0x3354>
   14654:	ldr	r4, [r0, #8]
   14658:	cmp	r4, #0
   1465c:	ldreq	r4, [r0, #4]
   14660:	bl	12d5c <__assert_fail@plt+0x19d0>
   14664:	mov	r0, r4
   14668:	ldr	r3, [r4, #48]	; 0x30
   1466c:	cmp	r3, #0
   14670:	bge	14654 <__assert_fail@plt+0x32c8>
   14674:	mov	r0, r4
   14678:	bl	12d5c <__assert_fail@plt+0x19d0>
   1467c:	ldr	r0, [r5, #4]
   14680:	cmp	r0, #0
   14684:	beq	1468c <__assert_fail@plt+0x3300>
   14688:	bl	1326c <__assert_fail@plt+0x1ee0>
   1468c:	ldr	r0, [r5, #8]
   14690:	bl	12d5c <__assert_fail@plt+0x19d0>
   14694:	ldr	r0, [r5, #24]
   14698:	bl	12d5c <__assert_fail@plt+0x19d0>
   1469c:	ldr	r3, [r5, #48]	; 0x30
   146a0:	tst	r3, #512	; 0x200
   146a4:	beq	146e8 <__assert_fail@plt+0x335c>
   146a8:	ldr	r0, [r5, #32]
   146ac:	cmp	r0, #0
   146b0:	blt	146f0 <__assert_fail@plt+0x3364>
   146b4:	bl	11350 <close@plt>
   146b8:	cmp	r0, #0
   146bc:	beq	146f0 <__assert_fail@plt+0x3364>
   146c0:	bl	1123c <__errno_location@plt>
   146c4:	ldr	r4, [r0]
   146c8:	add	r0, r5, #60	; 0x3c
   146cc:	bl	132e8 <__assert_fail@plt+0x1f5c>
   146d0:	ldr	r0, [r5, #52]	; 0x34
   146d4:	cmp	r0, #0
   146d8:	bne	14708 <__assert_fail@plt+0x337c>
   146dc:	b	1470c <__assert_fail@plt+0x3380>
   146e0:	mov	r4, r0
   146e4:	b	14674 <__assert_fail@plt+0x32e8>
   146e8:	tst	r3, #4
   146ec:	beq	1472c <__assert_fail@plt+0x33a0>
   146f0:	add	r0, r5, #60	; 0x3c
   146f4:	bl	132e8 <__assert_fail@plt+0x1f5c>
   146f8:	ldr	r0, [r5, #52]	; 0x34
   146fc:	cmp	r0, #0
   14700:	movne	r4, #0
   14704:	beq	14780 <__assert_fail@plt+0x33f4>
   14708:	bl	15a18 <__assert_fail@plt+0x468c>
   1470c:	mov	r0, r5
   14710:	bl	132ac <__assert_fail@plt+0x1f20>
   14714:	mov	r0, r5
   14718:	bl	12d5c <__assert_fail@plt+0x19d0>
   1471c:	cmp	r4, #0
   14720:	bne	14770 <__assert_fail@plt+0x33e4>
   14724:	mov	r0, r4
   14728:	pop	{r4, r5, r6, pc}
   1472c:	ldr	r0, [r5, #28]
   14730:	bl	112fc <fchdir@plt>
   14734:	subs	r4, r0, #0
   14738:	beq	14744 <__assert_fail@plt+0x33b8>
   1473c:	bl	1123c <__errno_location@plt>
   14740:	ldr	r4, [r0]
   14744:	ldr	r0, [r5, #28]
   14748:	bl	11350 <close@plt>
   1474c:	clz	r3, r4
   14750:	lsr	r3, r3, #5
   14754:	cmp	r0, #0
   14758:	moveq	r3, #0
   1475c:	cmp	r3, #0
   14760:	beq	146c8 <__assert_fail@plt+0x333c>
   14764:	bl	1123c <__errno_location@plt>
   14768:	ldr	r4, [r0]
   1476c:	b	146c8 <__assert_fail@plt+0x333c>
   14770:	bl	1123c <__errno_location@plt>
   14774:	str	r4, [r0]
   14778:	mvn	r4, #0
   1477c:	b	14724 <__assert_fail@plt+0x3398>
   14780:	mov	r0, r5
   14784:	bl	132ac <__assert_fail@plt+0x1f20>
   14788:	mov	r0, r5
   1478c:	bl	12d5c <__assert_fail@plt+0x19d0>
   14790:	mov	r4, #0
   14794:	b	14724 <__assert_fail@plt+0x3398>
   14798:	push	{r4, r5, r6, r7, r8, lr}
   1479c:	ldr	r5, [r0]
   147a0:	cmp	r5, #0
   147a4:	beq	14de8 <__assert_fail@plt+0x3a5c>
   147a8:	ldr	r3, [r0, #48]	; 0x30
   147ac:	tst	r3, #8192	; 0x2000
   147b0:	bne	14df0 <__assert_fail@plt+0x3a64>
   147b4:	mov	r8, r0
   147b8:	ldrh	r3, [r5, #60]	; 0x3c
   147bc:	mov	r2, #3
   147c0:	strh	r2, [r5, #60]	; 0x3c
   147c4:	cmp	r3, #1
   147c8:	beq	14848 <__assert_fail@plt+0x34bc>
   147cc:	cmp	r3, #2
   147d0:	beq	14860 <__assert_fail@plt+0x34d4>
   147d4:	ldrh	r2, [r5, #56]	; 0x38
   147d8:	cmp	r2, #1
   147dc:	bne	14a54 <__assert_fail@plt+0x36c8>
   147e0:	cmp	r3, #4
   147e4:	beq	14808 <__assert_fail@plt+0x347c>
   147e8:	ldr	r1, [r8, #48]	; 0x30
   147ec:	tst	r1, #64	; 0x40
   147f0:	beq	14900 <__assert_fail@plt+0x3574>
   147f4:	ldrd	r6, [r5, #64]	; 0x40
   147f8:	ldrd	r2, [r8, #16]
   147fc:	cmp	r7, r3
   14800:	cmpeq	r6, r2
   14804:	beq	14900 <__assert_fail@plt+0x3574>
   14808:	ldrh	r3, [r5, #58]	; 0x3a
   1480c:	tst	r3, #2
   14810:	bne	148f4 <__assert_fail@plt+0x3568>
   14814:	ldr	r0, [r8, #4]
   14818:	cmp	r0, #0
   1481c:	beq	1482c <__assert_fail@plt+0x34a0>
   14820:	bl	1326c <__assert_fail@plt+0x1ee0>
   14824:	mov	r3, #0
   14828:	str	r3, [r8, #4]
   1482c:	mov	r3, #6
   14830:	strh	r3, [r5, #56]	; 0x38
   14834:	mov	r1, r5
   14838:	mov	r0, r8
   1483c:	bl	137bc <__assert_fail@plt+0x2430>
   14840:	mov	r4, r5
   14844:	b	14b30 <__assert_fail@plt+0x37a4>
   14848:	mov	r2, #0
   1484c:	mov	r1, r5
   14850:	bl	12ef8 <__assert_fail@plt+0x1b6c>
   14854:	strh	r0, [r5, #56]	; 0x38
   14858:	mov	r4, r5
   1485c:	b	14b30 <__assert_fail@plt+0x37a4>
   14860:	ldrh	r2, [r5, #56]	; 0x38
   14864:	sub	r3, r2, #12
   14868:	uxth	r3, r3
   1486c:	cmp	r3, #1
   14870:	bls	14880 <__assert_fail@plt+0x34f4>
   14874:	cmp	r2, #1
   14878:	bne	14a54 <__assert_fail@plt+0x36c8>
   1487c:	b	147e8 <__assert_fail@plt+0x345c>
   14880:	mov	r2, #1
   14884:	mov	r1, r5
   14888:	bl	12ef8 <__assert_fail@plt+0x1b6c>
   1488c:	strh	r0, [r5, #56]	; 0x38
   14890:	cmp	r0, #1
   14894:	movne	r4, r5
   14898:	bne	14c30 <__assert_fail@plt+0x38a4>
   1489c:	ldr	r3, [r8, #48]	; 0x30
   148a0:	tst	r3, #4
   148a4:	movne	r4, r5
   148a8:	bne	14c30 <__assert_fail@plt+0x38a4>
   148ac:	ldr	r1, [pc, #1356]	; 14e00 <__assert_fail@plt+0x3a74>
   148b0:	mov	r0, r8
   148b4:	bl	1321c <__assert_fail@plt+0x1e90>
   148b8:	str	r0, [r5, #36]	; 0x24
   148bc:	cmp	r0, #0
   148c0:	blt	148d8 <__assert_fail@plt+0x354c>
   148c4:	ldrh	r3, [r5, #58]	; 0x3a
   148c8:	orr	r3, r3, #2
   148cc:	strh	r3, [r5, #58]	; 0x3a
   148d0:	mov	r4, r5
   148d4:	b	14c30 <__assert_fail@plt+0x38a4>
   148d8:	bl	1123c <__errno_location@plt>
   148dc:	ldr	r3, [r0]
   148e0:	str	r3, [r5, #32]
   148e4:	mov	r3, #7
   148e8:	strh	r3, [r5, #56]	; 0x38
   148ec:	mov	r4, r5
   148f0:	b	14c30 <__assert_fail@plt+0x38a4>
   148f4:	ldr	r0, [r5, #36]	; 0x24
   148f8:	bl	11350 <close@plt>
   148fc:	b	14814 <__assert_fail@plt+0x3488>
   14900:	ldr	r0, [r8, #4]
   14904:	cmp	r0, #0
   14908:	beq	14954 <__assert_fail@plt+0x35c8>
   1490c:	tst	r1, #4096	; 0x1000
   14910:	bne	14940 <__assert_fail@plt+0x35b4>
   14914:	ldr	r3, [r5, #24]
   14918:	mvn	r2, #0
   1491c:	mov	r1, r5
   14920:	mov	r0, r8
   14924:	bl	135d4 <__assert_fail@plt+0x2248>
   14928:	cmp	r0, #0
   1492c:	bne	149a8 <__assert_fail@plt+0x361c>
   14930:	ldr	r4, [r8, #4]
   14934:	mov	r3, #0
   14938:	str	r3, [r8, #4]
   1493c:	b	14bf0 <__assert_fail@plt+0x3864>
   14940:	bic	r1, r1, #4096	; 0x1000
   14944:	str	r1, [r8, #48]	; 0x30
   14948:	bl	1326c <__assert_fail@plt+0x1ee0>
   1494c:	mov	r3, #0
   14950:	str	r3, [r8, #4]
   14954:	mov	r1, #3
   14958:	mov	r0, r8
   1495c:	bl	13880 <__assert_fail@plt+0x24f4>
   14960:	str	r0, [r8, #4]
   14964:	cmp	r0, #0
   14968:	bne	14930 <__assert_fail@plt+0x35a4>
   1496c:	ldr	r3, [r8, #48]	; 0x30
   14970:	tst	r3, #8192	; 0x2000
   14974:	bne	14df8 <__assert_fail@plt+0x3a6c>
   14978:	ldr	r3, [r5, #32]
   1497c:	cmp	r3, #0
   14980:	beq	14994 <__assert_fail@plt+0x3608>
   14984:	ldrh	r3, [r5, #56]	; 0x38
   14988:	cmp	r3, #4
   1498c:	movne	r3, #7
   14990:	strhne	r3, [r5, #56]	; 0x38
   14994:	mov	r1, r5
   14998:	mov	r0, r8
   1499c:	bl	137bc <__assert_fail@plt+0x2430>
   149a0:	mov	r4, r5
   149a4:	b	14b30 <__assert_fail@plt+0x37a4>
   149a8:	bl	1123c <__errno_location@plt>
   149ac:	ldr	r3, [r0]
   149b0:	str	r3, [r5, #32]
   149b4:	ldrh	r3, [r5, #58]	; 0x3a
   149b8:	orr	r3, r3, #1
   149bc:	strh	r3, [r5, #58]	; 0x3a
   149c0:	ldr	r3, [r8, #4]
   149c4:	cmp	r3, #0
   149c8:	beq	14930 <__assert_fail@plt+0x35a4>
   149cc:	ldr	r2, [r3, #4]
   149d0:	ldr	r2, [r2, #24]
   149d4:	str	r2, [r3, #24]
   149d8:	ldr	r3, [r3, #8]
   149dc:	cmp	r3, #0
   149e0:	bne	149cc <__assert_fail@plt+0x3640>
   149e4:	b	14930 <__assert_fail@plt+0x35a4>
   149e8:	str	r3, [r8]
   149ec:	ldr	r2, [r8, #24]
   149f0:	ldr	r3, [r3, #40]	; 0x28
   149f4:	mov	r1, #0
   149f8:	strb	r1, [r2, r3]
   149fc:	mov	r1, #3
   14a00:	mov	r0, r8
   14a04:	bl	13880 <__assert_fail@plt+0x24f4>
   14a08:	subs	r4, r0, #0
   14a0c:	beq	14a1c <__assert_fail@plt+0x3690>
   14a10:	mov	r0, r5
   14a14:	bl	12d5c <__assert_fail@plt+0x19d0>
   14a18:	b	14bf0 <__assert_fail@plt+0x3864>
   14a1c:	ldr	r3, [r8, #48]	; 0x30
   14a20:	tst	r3, #8192	; 0x2000
   14a24:	beq	14a70 <__assert_fail@plt+0x36e4>
   14a28:	b	14b30 <__assert_fail@plt+0x37a4>
   14a2c:	str	r4, [r8]
   14a30:	mov	r0, r5
   14a34:	bl	12d5c <__assert_fail@plt+0x19d0>
   14a38:	ldr	r3, [r4, #48]	; 0x30
   14a3c:	cmp	r3, #0
   14a40:	beq	14b38 <__assert_fail@plt+0x37ac>
   14a44:	ldrh	r3, [r4, #60]	; 0x3c
   14a48:	mov	r5, r4
   14a4c:	cmp	r3, #4
   14a50:	bne	14be8 <__assert_fail@plt+0x385c>
   14a54:	ldr	r4, [r5, #8]
   14a58:	cmp	r4, #0
   14a5c:	bne	14a2c <__assert_fail@plt+0x36a0>
   14a60:	ldr	r3, [r5, #4]
   14a64:	ldr	r2, [r3, #12]
   14a68:	cmp	r2, #0
   14a6c:	bne	149e8 <__assert_fail@plt+0x365c>
   14a70:	ldr	r4, [r5, #4]
   14a74:	str	r4, [r8]
   14a78:	mov	r0, r5
   14a7c:	bl	12d5c <__assert_fail@plt+0x19d0>
   14a80:	ldr	r3, [r4, #48]	; 0x30
   14a84:	cmn	r3, #1
   14a88:	beq	14d30 <__assert_fail@plt+0x39a4>
   14a8c:	ldrh	r3, [r4, #56]	; 0x38
   14a90:	cmp	r3, #11
   14a94:	beq	14d4c <__assert_fail@plt+0x39c0>
   14a98:	ldr	r2, [r8, #24]
   14a9c:	ldr	r3, [r4, #40]	; 0x28
   14aa0:	mov	r1, #0
   14aa4:	strb	r1, [r2, r3]
   14aa8:	ldr	r3, [r4, #48]	; 0x30
   14aac:	cmp	r3, r1
   14ab0:	beq	14d50 <__assert_fail@plt+0x39c4>
   14ab4:	ldrh	r3, [r4, #58]	; 0x3a
   14ab8:	tst	r3, #2
   14abc:	beq	14da8 <__assert_fail@plt+0x3a1c>
   14ac0:	ldr	r3, [r8, #48]	; 0x30
   14ac4:	tst	r3, #4
   14ac8:	bne	14ae4 <__assert_fail@plt+0x3758>
   14acc:	tst	r3, #512	; 0x200
   14ad0:	beq	14d7c <__assert_fail@plt+0x39f0>
   14ad4:	mov	r2, #1
   14ad8:	ldr	r1, [r4, #36]	; 0x24
   14adc:	mov	r0, r8
   14ae0:	bl	13504 <__assert_fail@plt+0x2178>
   14ae4:	ldr	r0, [r4, #36]	; 0x24
   14ae8:	bl	11350 <close@plt>
   14aec:	ldrh	r3, [r4, #56]	; 0x38
   14af0:	cmp	r3, #2
   14af4:	beq	14b20 <__assert_fail@plt+0x3794>
   14af8:	ldr	r3, [r4, #32]
   14afc:	cmp	r3, #0
   14b00:	movne	r3, #7
   14b04:	strhne	r3, [r4, #56]	; 0x38
   14b08:	bne	14b20 <__assert_fail@plt+0x3794>
   14b0c:	mov	r3, #6
   14b10:	strh	r3, [r4, #56]	; 0x38
   14b14:	mov	r1, r4
   14b18:	mov	r0, r8
   14b1c:	bl	137bc <__assert_fail@plt+0x2430>
   14b20:	ldr	r3, [r8, #48]	; 0x30
   14b24:	and	r3, r3, #8192	; 0x2000
   14b28:	cmp	r3, #0
   14b2c:	movne	r4, #0
   14b30:	mov	r0, r4
   14b34:	pop	{r4, r5, r6, r7, r8, pc}
   14b38:	mov	r0, r8
   14b3c:	bl	13584 <__assert_fail@plt+0x21f8>
   14b40:	cmp	r0, #0
   14b44:	bne	14bc4 <__assert_fail@plt+0x3838>
   14b48:	mov	r0, r8
   14b4c:	bl	132ac <__assert_fail@plt+0x1f20>
   14b50:	ldr	r2, [r4, #52]	; 0x34
   14b54:	str	r2, [r4, #40]	; 0x28
   14b58:	add	r6, r4, #168	; 0xa8
   14b5c:	add	r2, r2, #1
   14b60:	mov	r1, r6
   14b64:	ldr	r0, [r8, #24]
   14b68:	bl	11098 <memmove@plt>
   14b6c:	mov	r1, #47	; 0x2f
   14b70:	mov	r0, r6
   14b74:	bl	112c0 <strrchr@plt>
   14b78:	cmp	r0, #0
   14b7c:	beq	14bac <__assert_fail@plt+0x3820>
   14b80:	cmp	r6, r0
   14b84:	beq	14bd8 <__assert_fail@plt+0x384c>
   14b88:	add	r5, r0, #1
   14b8c:	mov	r0, r5
   14b90:	bl	1120c <strlen@plt>
   14b94:	mov	r7, r0
   14b98:	add	r2, r0, #1
   14b9c:	mov	r1, r5
   14ba0:	mov	r0, r6
   14ba4:	bl	11098 <memmove@plt>
   14ba8:	str	r7, [r4, #52]	; 0x34
   14bac:	ldr	r3, [r8, #24]
   14bb0:	str	r3, [r4, #28]
   14bb4:	str	r3, [r4, #24]
   14bb8:	mov	r0, r8
   14bbc:	bl	13198 <__assert_fail@plt+0x1e0c>
   14bc0:	b	14c30 <__assert_fail@plt+0x38a4>
   14bc4:	ldr	r3, [r8, #48]	; 0x30
   14bc8:	orr	r3, r3, #8192	; 0x2000
   14bcc:	str	r3, [r8, #48]	; 0x30
   14bd0:	mov	r4, #0
   14bd4:	b	14b30 <__assert_fail@plt+0x37a4>
   14bd8:	ldrb	r3, [r4, #169]	; 0xa9
   14bdc:	cmp	r3, #0
   14be0:	bne	14b88 <__assert_fail@plt+0x37fc>
   14be4:	b	14bac <__assert_fail@plt+0x3820>
   14be8:	cmp	r3, #2
   14bec:	beq	14c84 <__assert_fail@plt+0x38f8>
   14bf0:	ldr	r2, [r8, #24]
   14bf4:	ldr	r0, [r4, #4]
   14bf8:	ldr	r1, [r0, #40]	; 0x28
   14bfc:	sub	r3, r1, #1
   14c00:	ldr	r0, [r0, #28]
   14c04:	ldrb	r0, [r0, r3]
   14c08:	cmp	r0, #47	; 0x2f
   14c0c:	movne	r3, r1
   14c10:	add	r0, r2, r3
   14c14:	mov	r1, #47	; 0x2f
   14c18:	strb	r1, [r2, r3]
   14c1c:	ldr	r2, [r4, #52]	; 0x34
   14c20:	add	r2, r2, #1
   14c24:	add	r1, r4, #168	; 0xa8
   14c28:	add	r0, r0, #1
   14c2c:	bl	11098 <memmove@plt>
   14c30:	str	r4, [r8]
   14c34:	ldrh	r3, [r4, #56]	; 0x38
   14c38:	cmp	r3, #11
   14c3c:	beq	14cf8 <__assert_fail@plt+0x396c>
   14c40:	ldrh	r3, [r4, #56]	; 0x38
   14c44:	cmp	r3, #1
   14c48:	bne	14b30 <__assert_fail@plt+0x37a4>
   14c4c:	ldr	r3, [r4, #48]	; 0x30
   14c50:	cmp	r3, #0
   14c54:	ldrdeq	r2, [r4, #64]	; 0x40
   14c58:	strdeq	r2, [r8, #16]
   14c5c:	mov	r1, r4
   14c60:	mov	r0, r8
   14c64:	bl	13438 <__assert_fail@plt+0x20ac>
   14c68:	cmp	r0, #0
   14c6c:	bne	14b30 <__assert_fail@plt+0x37a4>
   14c70:	bl	1123c <__errno_location@plt>
   14c74:	mov	r3, #12
   14c78:	str	r3, [r0]
   14c7c:	mov	r4, #0
   14c80:	b	14b30 <__assert_fail@plt+0x37a4>
   14c84:	mov	r2, #1
   14c88:	mov	r1, r4
   14c8c:	mov	r0, r8
   14c90:	bl	12ef8 <__assert_fail@plt+0x1b6c>
   14c94:	strh	r0, [r4, #56]	; 0x38
   14c98:	cmp	r0, #1
   14c9c:	beq	14cac <__assert_fail@plt+0x3920>
   14ca0:	mov	r3, #3
   14ca4:	strh	r3, [r4, #60]	; 0x3c
   14ca8:	b	14bf0 <__assert_fail@plt+0x3864>
   14cac:	ldr	r3, [r8, #48]	; 0x30
   14cb0:	tst	r3, #4
   14cb4:	bne	14ca0 <__assert_fail@plt+0x3914>
   14cb8:	ldr	r1, [pc, #320]	; 14e00 <__assert_fail@plt+0x3a74>
   14cbc:	mov	r0, r8
   14cc0:	bl	1321c <__assert_fail@plt+0x1e90>
   14cc4:	str	r0, [r4, #36]	; 0x24
   14cc8:	cmp	r0, #0
   14ccc:	bge	14ce8 <__assert_fail@plt+0x395c>
   14cd0:	bl	1123c <__errno_location@plt>
   14cd4:	ldr	r3, [r0]
   14cd8:	str	r3, [r4, #32]
   14cdc:	mov	r3, #7
   14ce0:	strh	r3, [r4, #56]	; 0x38
   14ce4:	b	14ca0 <__assert_fail@plt+0x3914>
   14ce8:	ldrh	r3, [r4, #58]	; 0x3a
   14cec:	orr	r3, r3, #2
   14cf0:	strh	r3, [r4, #58]	; 0x3a
   14cf4:	b	14ca0 <__assert_fail@plt+0x3914>
   14cf8:	ldrd	r2, [r4, #112]	; 0x70
   14cfc:	cmp	r3, #0
   14d00:	cmpeq	r2, #2
   14d04:	beq	14d18 <__assert_fail@plt+0x398c>
   14d08:	cmp	r3, #0
   14d0c:	cmpeq	r2, #1
   14d10:	beq	14b30 <__assert_fail@plt+0x37a4>
   14d14:	bl	11344 <abort@plt>
   14d18:	mov	r2, #0
   14d1c:	mov	r1, r4
   14d20:	mov	r0, r8
   14d24:	bl	12ef8 <__assert_fail@plt+0x1b6c>
   14d28:	strh	r0, [r4, #56]	; 0x38
   14d2c:	b	14c40 <__assert_fail@plt+0x38b4>
   14d30:	mov	r0, r4
   14d34:	bl	12d5c <__assert_fail@plt+0x19d0>
   14d38:	bl	1123c <__errno_location@plt>
   14d3c:	mov	r4, #0
   14d40:	str	r4, [r0]
   14d44:	str	r4, [r8]
   14d48:	b	14b30 <__assert_fail@plt+0x37a4>
   14d4c:	bl	11344 <abort@plt>
   14d50:	mov	r0, r8
   14d54:	bl	13584 <__assert_fail@plt+0x21f8>
   14d58:	cmp	r0, #0
   14d5c:	beq	14aec <__assert_fail@plt+0x3760>
   14d60:	bl	1123c <__errno_location@plt>
   14d64:	ldr	r3, [r0]
   14d68:	str	r3, [r4, #32]
   14d6c:	ldr	r3, [r8, #48]	; 0x30
   14d70:	orr	r3, r3, #8192	; 0x2000
   14d74:	str	r3, [r8, #48]	; 0x30
   14d78:	b	14aec <__assert_fail@plt+0x3760>
   14d7c:	ldr	r0, [r4, #36]	; 0x24
   14d80:	bl	112fc <fchdir@plt>
   14d84:	cmp	r0, #0
   14d88:	beq	14ae4 <__assert_fail@plt+0x3758>
   14d8c:	bl	1123c <__errno_location@plt>
   14d90:	ldr	r3, [r0]
   14d94:	str	r3, [r4, #32]
   14d98:	ldr	r3, [r8, #48]	; 0x30
   14d9c:	orr	r3, r3, #8192	; 0x2000
   14da0:	str	r3, [r8, #48]	; 0x30
   14da4:	b	14ae4 <__assert_fail@plt+0x3758>
   14da8:	tst	r3, #1
   14dac:	bne	14aec <__assert_fail@plt+0x3760>
   14db0:	ldr	r3, [pc, #76]	; 14e04 <__assert_fail@plt+0x3a78>
   14db4:	mvn	r2, #0
   14db8:	ldr	r1, [r4, #4]
   14dbc:	mov	r0, r8
   14dc0:	bl	135d4 <__assert_fail@plt+0x2248>
   14dc4:	cmp	r0, #0
   14dc8:	beq	14aec <__assert_fail@plt+0x3760>
   14dcc:	bl	1123c <__errno_location@plt>
   14dd0:	ldr	r3, [r0]
   14dd4:	str	r3, [r4, #32]
   14dd8:	ldr	r3, [r8, #48]	; 0x30
   14ddc:	orr	r3, r3, #8192	; 0x2000
   14de0:	str	r3, [r8, #48]	; 0x30
   14de4:	b	14aec <__assert_fail@plt+0x3760>
   14de8:	mov	r4, #0
   14dec:	b	14b30 <__assert_fail@plt+0x37a4>
   14df0:	mov	r4, #0
   14df4:	b	14b30 <__assert_fail@plt+0x37a4>
   14df8:	mov	r4, #0
   14dfc:	b	14b30 <__assert_fail@plt+0x37a4>
   14e00:	andeq	fp, r1, r8, lsr #3
   14e04:	andeq	fp, r1, r4, lsr #3
   14e08:	cmp	r2, #4
   14e0c:	bhi	14e1c <__assert_fail@plt+0x3a90>
   14e10:	strh	r2, [r1, #60]	; 0x3c
   14e14:	mov	r0, #0
   14e18:	bx	lr
   14e1c:	push	{r4, lr}
   14e20:	bl	1123c <__errno_location@plt>
   14e24:	mov	r3, #22
   14e28:	str	r3, [r0]
   14e2c:	mov	r0, #1
   14e30:	pop	{r4, pc}
   14e34:	push	{r4, r5, r6, r7, r8, lr}
   14e38:	bics	r3, r1, #4096	; 0x1000
   14e3c:	bne	14ee0 <__assert_fail@plt+0x3b54>
   14e40:	mov	r4, r0
   14e44:	mov	r6, r1
   14e48:	ldr	r5, [r0]
   14e4c:	bl	1123c <__errno_location@plt>
   14e50:	mov	r7, r0
   14e54:	mov	r3, #0
   14e58:	str	r3, [r0]
   14e5c:	ldr	r3, [r4, #48]	; 0x30
   14e60:	tst	r3, #8192	; 0x2000
   14e64:	bne	14f84 <__assert_fail@plt+0x3bf8>
   14e68:	ldrh	r3, [r5, #56]	; 0x38
   14e6c:	cmp	r3, #9
   14e70:	beq	14ef4 <__assert_fail@plt+0x3b68>
   14e74:	cmp	r3, #1
   14e78:	bne	14f8c <__assert_fail@plt+0x3c00>
   14e7c:	ldr	r0, [r4, #4]
   14e80:	cmp	r0, #0
   14e84:	beq	14e8c <__assert_fail@plt+0x3b00>
   14e88:	bl	1326c <__assert_fail@plt+0x1ee0>
   14e8c:	cmp	r6, #4096	; 0x1000
   14e90:	ldreq	r3, [r4, #48]	; 0x30
   14e94:	orreq	r3, r3, #4096	; 0x1000
   14e98:	streq	r3, [r4, #48]	; 0x30
   14e9c:	moveq	r6, #2
   14ea0:	movne	r6, #1
   14ea4:	ldr	r3, [r5, #48]	; 0x30
   14ea8:	cmp	r3, #0
   14eac:	bne	14ecc <__assert_fail@plt+0x3b40>
   14eb0:	ldr	r3, [r5, #24]
   14eb4:	ldrb	r3, [r3]
   14eb8:	cmp	r3, #47	; 0x2f
   14ebc:	beq	14ecc <__assert_fail@plt+0x3b40>
   14ec0:	ldr	r3, [r4, #48]	; 0x30
   14ec4:	tst	r3, #4
   14ec8:	beq	14efc <__assert_fail@plt+0x3b70>
   14ecc:	mov	r1, r6
   14ed0:	mov	r0, r4
   14ed4:	bl	13880 <__assert_fail@plt+0x24f4>
   14ed8:	str	r0, [r4, #4]
   14edc:	pop	{r4, r5, r6, r7, r8, pc}
   14ee0:	bl	1123c <__errno_location@plt>
   14ee4:	mov	r3, #22
   14ee8:	str	r3, [r0]
   14eec:	mov	r0, #0
   14ef0:	pop	{r4, r5, r6, r7, r8, pc}
   14ef4:	ldr	r0, [r5, #8]
   14ef8:	pop	{r4, r5, r6, r7, r8, pc}
   14efc:	ldr	r1, [pc, #144]	; 14f94 <__assert_fail@plt+0x3c08>
   14f00:	mov	r0, r4
   14f04:	bl	1321c <__assert_fail@plt+0x1e90>
   14f08:	subs	r5, r0, #0
   14f0c:	blt	14f44 <__assert_fail@plt+0x3bb8>
   14f10:	mov	r1, r6
   14f14:	mov	r0, r4
   14f18:	bl	13880 <__assert_fail@plt+0x24f4>
   14f1c:	str	r0, [r4, #4]
   14f20:	ldr	r3, [r4, #48]	; 0x30
   14f24:	tst	r3, #512	; 0x200
   14f28:	beq	14f50 <__assert_fail@plt+0x3bc4>
   14f2c:	mov	r2, #1
   14f30:	mov	r1, r5
   14f34:	mov	r0, r4
   14f38:	bl	13504 <__assert_fail@plt+0x2178>
   14f3c:	ldr	r0, [r4, #4]
   14f40:	pop	{r4, r5, r6, r7, r8, pc}
   14f44:	mov	r0, #0
   14f48:	str	r0, [r4, #4]
   14f4c:	pop	{r4, r5, r6, r7, r8, pc}
   14f50:	mov	r0, r5
   14f54:	bl	112fc <fchdir@plt>
   14f58:	cmp	r0, #0
   14f5c:	bne	14f6c <__assert_fail@plt+0x3be0>
   14f60:	mov	r0, r5
   14f64:	bl	11350 <close@plt>
   14f68:	b	14f3c <__assert_fail@plt+0x3bb0>
   14f6c:	ldr	r4, [r7]
   14f70:	mov	r0, r5
   14f74:	bl	11350 <close@plt>
   14f78:	str	r4, [r7]
   14f7c:	mov	r0, #0
   14f80:	pop	{r4, r5, r6, r7, r8, pc}
   14f84:	mov	r0, #0
   14f88:	pop	{r4, r5, r6, r7, r8, pc}
   14f8c:	mov	r0, #0
   14f90:	pop	{r4, r5, r6, r7, r8, pc}
   14f94:	andeq	fp, r1, r8, lsr #3
   14f98:	push	{r4, lr}
   14f9c:	ror	r0, r0, #3
   14fa0:	bl	19be8 <__assert_fail@plt+0x885c>
   14fa4:	mov	r0, r1
   14fa8:	pop	{r4, pc}
   14fac:	cmp	r1, r0
   14fb0:	movne	r0, #0
   14fb4:	moveq	r0, #1
   14fb8:	bx	lr
   14fbc:	ldr	r3, [r0, #20]
   14fc0:	ldr	r2, [pc, #176]	; 15078 <__assert_fail@plt+0x3cec>
   14fc4:	cmp	r3, r2
   14fc8:	beq	15060 <__assert_fail@plt+0x3cd4>
   14fcc:	vldr	s15, [r3, #8]
   14fd0:	vldr	s14, [pc, #144]	; 15068 <__assert_fail@plt+0x3cdc>
   14fd4:	vcmpe.f32	s15, s14
   14fd8:	vmrs	APSR_nzcv, fpscr
   14fdc:	ble	1503c <__assert_fail@plt+0x3cb0>
   14fe0:	vldr	s14, [pc, #132]	; 1506c <__assert_fail@plt+0x3ce0>
   14fe4:	vcmpe.f32	s15, s14
   14fe8:	vmrs	APSR_nzcv, fpscr
   14fec:	bpl	1503c <__assert_fail@plt+0x3cb0>
   14ff0:	vldr	s13, [r3, #12]
   14ff4:	vldr	s14, [pc, #116]	; 15070 <__assert_fail@plt+0x3ce4>
   14ff8:	vcmpe.f32	s13, s14
   14ffc:	vmrs	APSR_nzcv, fpscr
   15000:	ble	1503c <__assert_fail@plt+0x3cb0>
   15004:	vldr	s14, [r3]
   15008:	vcmpe.f32	s14, #0.0
   1500c:	vmrs	APSR_nzcv, fpscr
   15010:	blt	1503c <__assert_fail@plt+0x3cb0>
   15014:	vldr	s13, [pc, #76]	; 15068 <__assert_fail@plt+0x3cdc>
   15018:	vadd.f32	s14, s14, s13
   1501c:	vldr	s13, [r3, #4]
   15020:	vcmpe.f32	s14, s13
   15024:	vmrs	APSR_nzcv, fpscr
   15028:	bpl	1503c <__assert_fail@plt+0x3cb0>
   1502c:	vldr	s12, [pc, #64]	; 15074 <__assert_fail@plt+0x3ce8>
   15030:	vcmpe.f32	s13, s12
   15034:	vmrs	APSR_nzcv, fpscr
   15038:	bls	1504c <__assert_fail@plt+0x3cc0>
   1503c:	ldr	r3, [pc, #52]	; 15078 <__assert_fail@plt+0x3cec>
   15040:	str	r3, [r0, #20]
   15044:	mov	r0, #0
   15048:	bx	lr
   1504c:	vcmpe.f32	s15, s14
   15050:	vmrs	APSR_nzcv, fpscr
   15054:	ble	1503c <__assert_fail@plt+0x3cb0>
   15058:	mov	r0, #1
   1505c:	bx	lr
   15060:	mov	r0, #1
   15064:	bx	lr
   15068:	stclcc	12, cr12, [ip, #820]	; 0x334
   1506c:	svccc	0x00666666
   15070:	svccc	0x008ccccd
   15074:	svccc	0x00800000
   15078:	andeq	fp, r1, ip, lsr #3
   1507c:	push	{r4, lr}
   15080:	mov	r4, r0
   15084:	mov	r0, r1
   15088:	ldr	r3, [r4, #24]
   1508c:	ldr	r1, [r4, #8]
   15090:	blx	r3
   15094:	ldr	r3, [r4, #8]
   15098:	cmp	r0, r3
   1509c:	bcs	150ac <__assert_fail@plt+0x3d20>
   150a0:	ldr	r3, [r4]
   150a4:	add	r0, r3, r0, lsl #3
   150a8:	pop	{r4, pc}
   150ac:	bl	11344 <abort@plt>
   150b0:	push	{r4, r5, r6, r7, r8, lr}
   150b4:	ldrb	r3, [r1, #16]
   150b8:	cmp	r3, #0
   150bc:	bne	150ec <__assert_fail@plt+0x3d60>
   150c0:	vmov	s15, r0
   150c4:	vcvt.f32.u32	s13, s15
   150c8:	vldr	s14, [r1, #8]
   150cc:	vdiv.f32	s15, s13, s14
   150d0:	vldr	s14, [pc, #204]	; 151a4 <__assert_fail@plt+0x3e18>
   150d4:	vcmpe.f32	s15, s14
   150d8:	vmrs	APSR_nzcv, fpscr
   150dc:	movge	r7, #0
   150e0:	bge	15124 <__assert_fail@plt+0x3d98>
   150e4:	vcvt.u32.f32	s15, s15
   150e8:	vmov	r0, s15
   150ec:	cmp	r0, #10
   150f0:	movcc	r0, #10
   150f4:	orr	r7, r0, #1
   150f8:	cmn	r7, #1
   150fc:	ldrne	r8, [pc, #164]	; 151a8 <__assert_fail@plt+0x3e1c>
   15100:	bne	15150 <__assert_fail@plt+0x3dc4>
   15104:	lsr	r3, r7, #30
   15108:	lsl	r2, r7, #2
   1510c:	adds	r3, r3, #0
   15110:	movne	r3, #1
   15114:	cmp	r2, #0
   15118:	movlt	r3, #1
   1511c:	cmp	r3, #0
   15120:	movne	r7, #0
   15124:	mov	r0, r7
   15128:	pop	{r4, r5, r6, r7, r8, pc}
   1512c:	mov	r4, #3
   15130:	mov	r1, r4
   15134:	mov	r0, r7
   15138:	bl	19be8 <__assert_fail@plt+0x885c>
   1513c:	cmp	r1, #0
   15140:	bne	15104 <__assert_fail@plt+0x3d78>
   15144:	add	r7, r7, #2
   15148:	cmn	r7, #1
   1514c:	beq	15104 <__assert_fail@plt+0x3d78>
   15150:	cmp	r7, #9
   15154:	bls	1512c <__assert_fail@plt+0x3da0>
   15158:	umull	r2, r3, r8, r7
   1515c:	lsr	r3, r3, #1
   15160:	add	r3, r3, r3, lsl #1
   15164:	cmp	r7, r3
   15168:	beq	15144 <__assert_fail@plt+0x3db8>
   1516c:	mov	r6, #16
   15170:	mov	r5, #9
   15174:	mov	r4, #3
   15178:	add	r5, r5, r6
   1517c:	add	r4, r4, #2
   15180:	cmp	r5, r7
   15184:	bcs	15130 <__assert_fail@plt+0x3da4>
   15188:	add	r6, r6, #8
   1518c:	mov	r1, r4
   15190:	mov	r0, r7
   15194:	bl	19be8 <__assert_fail@plt+0x885c>
   15198:	cmp	r1, #0
   1519c:	bne	15178 <__assert_fail@plt+0x3dec>
   151a0:	b	15144 <__assert_fail@plt+0x3db8>
   151a4:	svcmi	0x00800000
   151a8:	bge	feabfc5c <optarg@@GLIBC_2.4+0xfea93abc>
   151ac:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151b0:	ldr	r7, [r1]
   151b4:	ldr	r3, [r1, #4]
   151b8:	cmp	r7, r3
   151bc:	bcs	152f0 <__assert_fail@plt+0x3f64>
   151c0:	mov	fp, r2
   151c4:	mov	sl, r1
   151c8:	mov	r6, r0
   151cc:	add	r7, r7, #8
   151d0:	mov	r9, #0
   151d4:	b	1523c <__assert_fail@plt+0x3eb0>
   151d8:	str	r5, [r0]
   151dc:	ldr	r2, [r6, #12]
   151e0:	add	r2, r2, #1
   151e4:	str	r2, [r6, #12]
   151e8:	str	r9, [r4]
   151ec:	ldr	r2, [r6, #36]	; 0x24
   151f0:	str	r2, [r4, #4]
   151f4:	str	r4, [r6, #36]	; 0x24
   151f8:	b	15284 <__assert_fail@plt+0x3ef8>
   151fc:	mov	r0, #8
   15200:	bl	191e0 <__assert_fail@plt+0x7e54>
   15204:	cmp	r0, #0
   15208:	beq	152f8 <__assert_fail@plt+0x3f6c>
   1520c:	str	r4, [r0]
   15210:	ldr	r3, [r5, #4]
   15214:	str	r3, [r0, #4]
   15218:	str	r0, [r5, #4]
   1521c:	str	r9, [r8, #-8]
   15220:	ldr	r3, [sl, #12]
   15224:	sub	r3, r3, #1
   15228:	str	r3, [sl, #12]
   1522c:	add	r7, r7, #8
   15230:	ldr	r3, [sl, #4]
   15234:	cmp	r3, r8
   15238:	bls	152e8 <__assert_fail@plt+0x3f5c>
   1523c:	mov	r8, r7
   15240:	ldr	r3, [r7, #-8]
   15244:	cmp	r3, #0
   15248:	beq	1522c <__assert_fail@plt+0x3ea0>
   1524c:	ldr	r4, [r7, #-4]
   15250:	cmp	r4, #0
   15254:	beq	15290 <__assert_fail@plt+0x3f04>
   15258:	ldr	r5, [r4]
   1525c:	mov	r1, r5
   15260:	mov	r0, r6
   15264:	bl	1507c <__assert_fail@plt+0x3cf0>
   15268:	ldr	r3, [r4, #4]
   1526c:	ldr	r2, [r0]
   15270:	cmp	r2, #0
   15274:	beq	151d8 <__assert_fail@plt+0x3e4c>
   15278:	ldr	r2, [r0, #4]
   1527c:	str	r2, [r4, #4]
   15280:	str	r4, [r0, #4]
   15284:	mov	r4, r3
   15288:	cmp	r3, #0
   1528c:	bne	15258 <__assert_fail@plt+0x3ecc>
   15290:	ldr	r4, [r8, #-8]
   15294:	str	r9, [r8, #-4]
   15298:	cmp	fp, #0
   1529c:	bne	1522c <__assert_fail@plt+0x3ea0>
   152a0:	mov	r1, r4
   152a4:	mov	r0, r6
   152a8:	bl	1507c <__assert_fail@plt+0x3cf0>
   152ac:	mov	r5, r0
   152b0:	ldr	r3, [r0]
   152b4:	cmp	r3, #0
   152b8:	beq	152d4 <__assert_fail@plt+0x3f48>
   152bc:	ldr	r0, [r6, #36]	; 0x24
   152c0:	cmp	r0, #0
   152c4:	beq	151fc <__assert_fail@plt+0x3e70>
   152c8:	ldr	r3, [r0, #4]
   152cc:	str	r3, [r6, #36]	; 0x24
   152d0:	b	1520c <__assert_fail@plt+0x3e80>
   152d4:	str	r4, [r0]
   152d8:	ldr	r3, [r6, #12]
   152dc:	add	r3, r3, #1
   152e0:	str	r3, [r6, #12]
   152e4:	b	1521c <__assert_fail@plt+0x3e90>
   152e8:	mov	r0, #1
   152ec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152f0:	mov	r0, #1
   152f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152f8:	mov	r0, fp
   152fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15300:	push	{r4, r5, r6, r7, r8, lr}
   15304:	mov	r6, r0
   15308:	mov	r5, r1
   1530c:	mov	r8, r2
   15310:	mov	r7, r3
   15314:	bl	1507c <__assert_fail@plt+0x3cf0>
   15318:	str	r0, [r8]
   1531c:	ldr	r3, [r0]
   15320:	cmp	r3, #0
   15324:	beq	153fc <__assert_fail@plt+0x4070>
   15328:	mov	r4, r0
   1532c:	cmp	r5, r3
   15330:	beq	153c4 <__assert_fail@plt+0x4038>
   15334:	ldr	r2, [r6, #28]
   15338:	mov	r1, r3
   1533c:	mov	r0, r5
   15340:	blx	r2
   15344:	cmp	r0, #0
   15348:	bne	153c4 <__assert_fail@plt+0x4038>
   1534c:	ldr	r3, [r4, #4]
   15350:	cmp	r3, #0
   15354:	beq	15404 <__assert_fail@plt+0x4078>
   15358:	ldr	r1, [r3]
   1535c:	cmp	r5, r1
   15360:	beq	15394 <__assert_fail@plt+0x4008>
   15364:	ldr	r3, [r6, #28]
   15368:	mov	r0, r5
   1536c:	blx	r3
   15370:	cmp	r0, #0
   15374:	bne	15394 <__assert_fail@plt+0x4008>
   15378:	ldr	r4, [r4, #4]
   1537c:	ldr	r3, [r4, #4]
   15380:	cmp	r3, #0
   15384:	beq	153fc <__assert_fail@plt+0x4070>
   15388:	ldr	r1, [r3]
   1538c:	cmp	r5, r1
   15390:	bne	15364 <__assert_fail@plt+0x3fd8>
   15394:	ldr	r2, [r4, #4]
   15398:	ldr	r3, [r2]
   1539c:	cmp	r7, #0
   153a0:	beq	153fc <__assert_fail@plt+0x4070>
   153a4:	ldr	r1, [r2, #4]
   153a8:	str	r1, [r4, #4]
   153ac:	mov	r1, #0
   153b0:	str	r1, [r2]
   153b4:	ldr	r1, [r6, #36]	; 0x24
   153b8:	str	r1, [r2, #4]
   153bc:	str	r2, [r6, #36]	; 0x24
   153c0:	b	153fc <__assert_fail@plt+0x4070>
   153c4:	ldr	r3, [r4]
   153c8:	cmp	r7, #0
   153cc:	beq	153fc <__assert_fail@plt+0x4070>
   153d0:	ldr	r2, [r4, #4]
   153d4:	cmp	r2, #0
   153d8:	ldmne	r2, {r0, r1}
   153dc:	stmne	r4, {r0, r1}
   153e0:	movne	r1, #0
   153e4:	strne	r1, [r2]
   153e8:	ldrne	r1, [r6, #36]	; 0x24
   153ec:	strne	r1, [r2, #4]
   153f0:	strne	r2, [r6, #36]	; 0x24
   153f4:	moveq	r2, #0
   153f8:	streq	r2, [r4]
   153fc:	mov	r0, r3
   15400:	pop	{r4, r5, r6, r7, r8, pc}
   15404:	mov	r3, #0
   15408:	b	153fc <__assert_fail@plt+0x4070>
   1540c:	ldr	r0, [r0, #8]
   15410:	bx	lr
   15414:	ldr	r0, [r0, #12]
   15418:	bx	lr
   1541c:	ldr	r0, [r0, #16]
   15420:	bx	lr
   15424:	ldr	r1, [r0]
   15428:	ldr	ip, [r0, #4]
   1542c:	cmp	r1, ip
   15430:	bcs	15488 <__assert_fail@plt+0x40fc>
   15434:	mov	r0, #0
   15438:	b	15454 <__assert_fail@plt+0x40c8>
   1543c:	mov	r2, #1
   15440:	cmp	r0, r2
   15444:	movcc	r0, r2
   15448:	add	r1, r1, #8
   1544c:	cmp	r1, ip
   15450:	bcs	15484 <__assert_fail@plt+0x40f8>
   15454:	ldr	r3, [r1]
   15458:	cmp	r3, #0
   1545c:	beq	15448 <__assert_fail@plt+0x40bc>
   15460:	ldr	r3, [r1, #4]
   15464:	cmp	r3, #0
   15468:	beq	1543c <__assert_fail@plt+0x40b0>
   1546c:	mov	r2, #1
   15470:	add	r2, r2, #1
   15474:	ldr	r3, [r3, #4]
   15478:	cmp	r3, #0
   1547c:	bne	15470 <__assert_fail@plt+0x40e4>
   15480:	b	15440 <__assert_fail@plt+0x40b4>
   15484:	bx	lr
   15488:	mov	r0, #0
   1548c:	bx	lr
   15490:	push	{lr}		; (str lr, [sp, #-4]!)
   15494:	ldr	r1, [r0]
   15498:	ldr	lr, [r0, #4]
   1549c:	cmp	r1, lr
   154a0:	bcs	154f0 <__assert_fail@plt+0x4164>
   154a4:	mov	r2, #0
   154a8:	mov	ip, r2
   154ac:	b	154bc <__assert_fail@plt+0x4130>
   154b0:	add	r1, r1, #8
   154b4:	cmp	r1, lr
   154b8:	bcs	154f8 <__assert_fail@plt+0x416c>
   154bc:	ldr	r3, [r1]
   154c0:	cmp	r3, #0
   154c4:	beq	154b0 <__assert_fail@plt+0x4124>
   154c8:	add	ip, ip, #1
   154cc:	add	r2, r2, #1
   154d0:	ldr	r3, [r1, #4]
   154d4:	cmp	r3, #0
   154d8:	beq	154b0 <__assert_fail@plt+0x4124>
   154dc:	add	r2, r2, #1
   154e0:	ldr	r3, [r3, #4]
   154e4:	cmp	r3, #0
   154e8:	bne	154dc <__assert_fail@plt+0x4150>
   154ec:	b	154b0 <__assert_fail@plt+0x4124>
   154f0:	mov	r2, #0
   154f4:	mov	ip, r2
   154f8:	ldr	r3, [r0, #12]
   154fc:	cmp	r3, ip
   15500:	beq	1550c <__assert_fail@plt+0x4180>
   15504:	mov	r0, #0
   15508:	pop	{pc}		; (ldr pc, [sp], #4)
   1550c:	ldr	r0, [r0, #16]
   15510:	cmp	r0, r2
   15514:	movne	r0, #0
   15518:	moveq	r0, #1
   1551c:	pop	{pc}		; (ldr pc, [sp], #4)
   15520:	push	{r4, r5, r6, r7, r8, lr}
   15524:	sub	sp, sp, #8
   15528:	mov	r6, r0
   1552c:	mov	r4, r1
   15530:	ldr	r5, [r0, #8]
   15534:	ldr	r7, [r0, #12]
   15538:	bl	15424 <__assert_fail@plt+0x4098>
   1553c:	mov	r8, r0
   15540:	ldr	r3, [r6, #16]
   15544:	ldr	r2, [pc, #116]	; 155c0 <__assert_fail@plt+0x4234>
   15548:	mov	r1, #1
   1554c:	mov	r0, r4
   15550:	bl	11278 <__fprintf_chk@plt>
   15554:	mov	r3, r5
   15558:	ldr	r2, [pc, #100]	; 155c4 <__assert_fail@plt+0x4238>
   1555c:	mov	r1, #1
   15560:	mov	r0, r4
   15564:	bl	11278 <__fprintf_chk@plt>
   15568:	vmov	s15, r7
   1556c:	vcvt.f64.u32	d6, s15
   15570:	vldr	d7, [pc, #64]	; 155b8 <__assert_fail@plt+0x422c>
   15574:	vmul.f64	d6, d6, d7
   15578:	vmov	s15, r5
   1557c:	vcvt.f64.u32	d7, s15
   15580:	vdiv.f64	d5, d6, d7
   15584:	vstr	d5, [sp]
   15588:	mov	r3, r7
   1558c:	ldr	r2, [pc, #52]	; 155c8 <__assert_fail@plt+0x423c>
   15590:	mov	r1, #1
   15594:	mov	r0, r4
   15598:	bl	11278 <__fprintf_chk@plt>
   1559c:	mov	r3, r8
   155a0:	ldr	r2, [pc, #36]	; 155cc <__assert_fail@plt+0x4240>
   155a4:	mov	r1, #1
   155a8:	mov	r0, r4
   155ac:	bl	11278 <__fprintf_chk@plt>
   155b0:	add	sp, sp, #8
   155b4:	pop	{r4, r5, r6, r7, r8, pc}
   155b8:	andeq	r0, r0, r0
   155bc:	subsmi	r0, r9, r0
   155c0:	andeq	fp, r1, r0, asr #3
   155c4:	ldrdeq	fp, [r1], -r8
   155c8:	strdeq	fp, [r1], -r0
   155cc:	andeq	fp, r1, r4, lsl r2
   155d0:	push	{r4, r5, r6, lr}
   155d4:	mov	r6, r0
   155d8:	mov	r5, r1
   155dc:	bl	1507c <__assert_fail@plt+0x3cf0>
   155e0:	ldr	r1, [r0]
   155e4:	cmp	r1, #0
   155e8:	beq	1563c <__assert_fail@plt+0x42b0>
   155ec:	mov	r4, r0
   155f0:	cmp	r0, #0
   155f4:	beq	15644 <__assert_fail@plt+0x42b8>
   155f8:	cmp	r5, r1
   155fc:	beq	1562c <__assert_fail@plt+0x42a0>
   15600:	ldr	r3, [r6, #28]
   15604:	mov	r0, r5
   15608:	blx	r3
   1560c:	cmp	r0, #0
   15610:	bne	1562c <__assert_fail@plt+0x42a0>
   15614:	ldr	r4, [r4, #4]
   15618:	cmp	r4, #0
   1561c:	beq	15634 <__assert_fail@plt+0x42a8>
   15620:	ldr	r1, [r4]
   15624:	cmp	r5, r1
   15628:	bne	15600 <__assert_fail@plt+0x4274>
   1562c:	ldr	r0, [r4]
   15630:	pop	{r4, r5, r6, pc}
   15634:	mov	r0, #0
   15638:	pop	{r4, r5, r6, pc}
   1563c:	mov	r0, #0
   15640:	pop	{r4, r5, r6, pc}
   15644:	mov	r0, #0
   15648:	pop	{r4, r5, r6, pc}
   1564c:	ldr	r3, [r0, #16]
   15650:	cmp	r3, #0
   15654:	beq	15698 <__assert_fail@plt+0x430c>
   15658:	ldr	r3, [r0]
   1565c:	ldr	r2, [r0, #4]
   15660:	cmp	r3, r2
   15664:	bcs	15690 <__assert_fail@plt+0x4304>
   15668:	ldr	r0, [r3]
   1566c:	cmp	r0, #0
   15670:	bne	1568c <__assert_fail@plt+0x4300>
   15674:	add	r3, r3, #8
   15678:	cmp	r3, r2
   1567c:	bcs	15690 <__assert_fail@plt+0x4304>
   15680:	ldr	r0, [r3]
   15684:	cmp	r0, #0
   15688:	beq	15674 <__assert_fail@plt+0x42e8>
   1568c:	bx	lr
   15690:	push	{r4, lr}
   15694:	bl	11344 <abort@plt>
   15698:	mov	r0, #0
   1569c:	b	1568c <__assert_fail@plt+0x4300>
   156a0:	push	{r4, r5, r6, lr}
   156a4:	mov	r5, r0
   156a8:	mov	r4, r1
   156ac:	bl	1507c <__assert_fail@plt+0x3cf0>
   156b0:	mov	r2, r0
   156b4:	mov	r3, r0
   156b8:	ldr	r1, [r3]
   156bc:	cmp	r4, r1
   156c0:	beq	156d4 <__assert_fail@plt+0x4348>
   156c4:	ldr	r3, [r3, #4]
   156c8:	cmp	r3, #0
   156cc:	bne	156b8 <__assert_fail@plt+0x432c>
   156d0:	b	156e0 <__assert_fail@plt+0x4354>
   156d4:	ldr	r3, [r3, #4]
   156d8:	cmp	r3, #0
   156dc:	bne	15700 <__assert_fail@plt+0x4374>
   156e0:	ldr	r3, [r5, #4]
   156e4:	add	r2, r2, #8
   156e8:	cmp	r2, r3
   156ec:	bcs	15708 <__assert_fail@plt+0x437c>
   156f0:	ldr	r0, [r2]
   156f4:	cmp	r0, #0
   156f8:	beq	156e4 <__assert_fail@plt+0x4358>
   156fc:	pop	{r4, r5, r6, pc}
   15700:	ldr	r0, [r3]
   15704:	pop	{r4, r5, r6, pc}
   15708:	mov	r0, #0
   1570c:	pop	{r4, r5, r6, pc}
   15710:	push	{r4, r5, lr}
   15714:	ldr	r4, [r0]
   15718:	ldr	r3, [r0, #4]
   1571c:	cmp	r4, r3
   15720:	bcs	1578c <__assert_fail@plt+0x4400>
   15724:	mov	r5, r0
   15728:	mov	r0, #0
   1572c:	b	15740 <__assert_fail@plt+0x43b4>
   15730:	add	r4, r4, #8
   15734:	ldr	r3, [r5, #4]
   15738:	cmp	r3, r4
   1573c:	bls	15788 <__assert_fail@plt+0x43fc>
   15740:	ldr	r3, [r4]
   15744:	cmp	r3, #0
   15748:	beq	15730 <__assert_fail@plt+0x43a4>
   1574c:	cmp	r4, #0
   15750:	beq	15730 <__assert_fail@plt+0x43a4>
   15754:	cmp	r2, r0
   15758:	popls	{r4, r5, pc}
   1575c:	add	ip, r1, r0, lsl #2
   15760:	mov	r3, r4
   15764:	add	r0, r0, #1
   15768:	ldr	lr, [r3]
   1576c:	str	lr, [ip], #4
   15770:	ldr	r3, [r3, #4]
   15774:	cmp	r3, #0
   15778:	beq	15730 <__assert_fail@plt+0x43a4>
   1577c:	cmp	r2, r0
   15780:	bne	15764 <__assert_fail@plt+0x43d8>
   15784:	pop	{r4, r5, pc}
   15788:	pop	{r4, r5, pc}
   1578c:	mov	r0, #0
   15790:	pop	{r4, r5, pc}
   15794:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15798:	ldr	r8, [r0]
   1579c:	ldr	r3, [r0, #4]
   157a0:	cmp	r8, r3
   157a4:	bcs	1580c <__assert_fail@plt+0x4480>
   157a8:	mov	r7, r2
   157ac:	mov	r6, r1
   157b0:	mov	r9, r0
   157b4:	mov	r5, #0
   157b8:	b	157cc <__assert_fail@plt+0x4440>
   157bc:	add	r8, r8, #8
   157c0:	ldr	r3, [r9, #4]
   157c4:	cmp	r3, r8
   157c8:	bls	15810 <__assert_fail@plt+0x4484>
   157cc:	ldr	r3, [r8]
   157d0:	cmp	r3, #0
   157d4:	beq	157bc <__assert_fail@plt+0x4430>
   157d8:	cmp	r8, #0
   157dc:	beq	157bc <__assert_fail@plt+0x4430>
   157e0:	mov	r4, r8
   157e4:	mov	r1, r7
   157e8:	ldr	r0, [r4]
   157ec:	blx	r6
   157f0:	cmp	r0, #0
   157f4:	beq	15810 <__assert_fail@plt+0x4484>
   157f8:	add	r5, r5, #1
   157fc:	ldr	r4, [r4, #4]
   15800:	cmp	r4, #0
   15804:	bne	157e4 <__assert_fail@plt+0x4458>
   15808:	b	157bc <__assert_fail@plt+0x4430>
   1580c:	mov	r5, #0
   15810:	mov	r0, r5
   15814:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15818:	ldrb	r3, [r0]
   1581c:	cmp	r3, #0
   15820:	beq	15858 <__assert_fail@plt+0x44cc>
   15824:	push	{r4, r5, r6, lr}
   15828:	mov	r4, r0
   1582c:	mov	r5, r1
   15830:	mov	r1, #0
   15834:	rsb	r0, r1, r1, lsl #5
   15838:	mov	r1, r5
   1583c:	add	r0, r0, r3
   15840:	bl	19be8 <__assert_fail@plt+0x885c>
   15844:	ldrb	r3, [r4, #1]!
   15848:	cmp	r3, #0
   1584c:	bne	15834 <__assert_fail@plt+0x44a8>
   15850:	mov	r0, r1
   15854:	pop	{r4, r5, r6, pc}
   15858:	mov	r1, #0
   1585c:	mov	r0, r1
   15860:	bx	lr
   15864:	push	{lr}		; (str lr, [sp, #-4]!)
   15868:	mov	ip, r0
   1586c:	ldr	lr, [pc, #16]	; 15884 <__assert_fail@plt+0x44f8>
   15870:	ldm	lr!, {r0, r1, r2, r3}
   15874:	stmia	ip!, {r0, r1, r2, r3}
   15878:	ldr	r3, [lr]
   1587c:	str	r3, [ip]
   15880:	pop	{pc}		; (ldr pc, [sp], #4)
   15884:	andeq	fp, r1, ip, lsr #3
   15888:	push	{r4, r5, r6, r7, r8, lr}
   1588c:	mov	r8, r0
   15890:	mov	r5, r1
   15894:	subs	r7, r2, #0
   15898:	ldr	r2, [pc, #180]	; 15954 <__assert_fail@plt+0x45c8>
   1589c:	cmp	r7, #0
   158a0:	moveq	r7, r2
   158a4:	subs	r6, r3, #0
   158a8:	ldr	r3, [pc, #168]	; 15958 <__assert_fail@plt+0x45cc>
   158ac:	cmp	r6, #0
   158b0:	moveq	r6, r3
   158b4:	mov	r0, #40	; 0x28
   158b8:	bl	191e0 <__assert_fail@plt+0x7e54>
   158bc:	subs	r4, r0, #0
   158c0:	beq	1593c <__assert_fail@plt+0x45b0>
   158c4:	ldr	r3, [pc, #144]	; 1595c <__assert_fail@plt+0x45d0>
   158c8:	cmp	r5, #0
   158cc:	moveq	r5, r3
   158d0:	str	r5, [r4, #20]
   158d4:	mov	r0, r4
   158d8:	bl	14fbc <__assert_fail@plt+0x3c30>
   158dc:	cmp	r0, #0
   158e0:	beq	15944 <__assert_fail@plt+0x45b8>
   158e4:	mov	r1, r5
   158e8:	mov	r0, r8
   158ec:	bl	150b0 <__assert_fail@plt+0x3d24>
   158f0:	str	r0, [r4, #8]
   158f4:	cmp	r0, #0
   158f8:	beq	15944 <__assert_fail@plt+0x45b8>
   158fc:	mov	r1, #8
   15900:	bl	19190 <__assert_fail@plt+0x7e04>
   15904:	str	r0, [r4]
   15908:	cmp	r0, #0
   1590c:	beq	15944 <__assert_fail@plt+0x45b8>
   15910:	ldr	r3, [r4, #8]
   15914:	add	r0, r0, r3, lsl #3
   15918:	str	r0, [r4, #4]
   1591c:	mov	r3, #0
   15920:	str	r3, [r4, #12]
   15924:	str	r3, [r4, #16]
   15928:	str	r7, [r4, #24]
   1592c:	str	r6, [r4, #28]
   15930:	ldr	r2, [sp, #24]
   15934:	str	r2, [r4, #32]
   15938:	str	r3, [r4, #36]	; 0x24
   1593c:	mov	r0, r4
   15940:	pop	{r4, r5, r6, r7, r8, pc}
   15944:	mov	r0, r4
   15948:	bl	12d5c <__assert_fail@plt+0x19d0>
   1594c:	mov	r4, #0
   15950:	b	1593c <__assert_fail@plt+0x45b0>
   15954:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15958:	andeq	r4, r1, ip, lsr #31
   1595c:	andeq	fp, r1, ip, lsr #3
   15960:	push	{r4, r5, r6, r7, r8, lr}
   15964:	mov	r5, r0
   15968:	ldr	r7, [r0]
   1596c:	ldr	r3, [r0, #4]
   15970:	cmp	r7, r3
   15974:	bcs	15a08 <__assert_fail@plt+0x467c>
   15978:	add	r7, r7, #8
   1597c:	mov	r6, #0
   15980:	b	159e8 <__assert_fail@plt+0x465c>
   15984:	str	r6, [r4]
   15988:	ldr	r3, [r4, #4]
   1598c:	ldr	r2, [r5, #36]	; 0x24
   15990:	str	r2, [r4, #4]
   15994:	str	r4, [r5, #36]	; 0x24
   15998:	mov	r4, r3
   1599c:	cmp	r3, #0
   159a0:	beq	159bc <__assert_fail@plt+0x4630>
   159a4:	ldr	r3, [r5, #32]
   159a8:	cmp	r3, #0
   159ac:	beq	15984 <__assert_fail@plt+0x45f8>
   159b0:	ldr	r0, [r4]
   159b4:	blx	r3
   159b8:	b	15984 <__assert_fail@plt+0x45f8>
   159bc:	ldr	r3, [r5, #32]
   159c0:	cmp	r3, #0
   159c4:	beq	159d0 <__assert_fail@plt+0x4644>
   159c8:	ldr	r0, [r8, #-8]
   159cc:	blx	r3
   159d0:	str	r6, [r8, #-8]
   159d4:	str	r6, [r8, #-4]
   159d8:	add	r7, r7, #8
   159dc:	ldr	r3, [r5, #4]
   159e0:	cmp	r3, r8
   159e4:	bls	15a08 <__assert_fail@plt+0x467c>
   159e8:	mov	r8, r7
   159ec:	ldr	r3, [r7, #-8]
   159f0:	cmp	r3, #0
   159f4:	beq	159d8 <__assert_fail@plt+0x464c>
   159f8:	ldr	r4, [r7, #-4]
   159fc:	cmp	r4, #0
   15a00:	bne	159a4 <__assert_fail@plt+0x4618>
   15a04:	b	159bc <__assert_fail@plt+0x4630>
   15a08:	mov	r3, #0
   15a0c:	str	r3, [r5, #12]
   15a10:	str	r3, [r5, #16]
   15a14:	pop	{r4, r5, r6, r7, r8, pc}
   15a18:	push	{r4, r5, r6, lr}
   15a1c:	mov	r5, r0
   15a20:	ldr	r3, [r0, #32]
   15a24:	cmp	r3, #0
   15a28:	beq	15a90 <__assert_fail@plt+0x4704>
   15a2c:	ldr	r3, [r0, #16]
   15a30:	cmp	r3, #0
   15a34:	beq	15a90 <__assert_fail@plt+0x4704>
   15a38:	ldr	r6, [r0]
   15a3c:	ldr	r3, [r0, #4]
   15a40:	cmp	r6, r3
   15a44:	bcc	15a5c <__assert_fail@plt+0x46d0>
   15a48:	b	15ad0 <__assert_fail@plt+0x4744>
   15a4c:	add	r6, r6, #8
   15a50:	ldr	r3, [r5, #4]
   15a54:	cmp	r3, r6
   15a58:	bls	15a90 <__assert_fail@plt+0x4704>
   15a5c:	ldr	r3, [r6]
   15a60:	cmp	r3, #0
   15a64:	beq	15a4c <__assert_fail@plt+0x46c0>
   15a68:	cmp	r6, #0
   15a6c:	beq	15a4c <__assert_fail@plt+0x46c0>
   15a70:	mov	r4, r6
   15a74:	ldr	r3, [r5, #32]
   15a78:	ldr	r0, [r4]
   15a7c:	blx	r3
   15a80:	ldr	r4, [r4, #4]
   15a84:	cmp	r4, #0
   15a88:	bne	15a74 <__assert_fail@plt+0x46e8>
   15a8c:	b	15a4c <__assert_fail@plt+0x46c0>
   15a90:	ldr	r6, [r5]
   15a94:	ldr	r3, [r5, #4]
   15a98:	cmp	r6, r3
   15a9c:	bcs	15ad0 <__assert_fail@plt+0x4744>
   15aa0:	ldr	r0, [r6, #4]
   15aa4:	cmp	r0, #0
   15aa8:	beq	15ac0 <__assert_fail@plt+0x4734>
   15aac:	ldr	r4, [r0, #4]
   15ab0:	bl	12d5c <__assert_fail@plt+0x19d0>
   15ab4:	mov	r0, r4
   15ab8:	cmp	r4, #0
   15abc:	bne	15aac <__assert_fail@plt+0x4720>
   15ac0:	add	r6, r6, #8
   15ac4:	ldr	r3, [r5, #4]
   15ac8:	cmp	r3, r6
   15acc:	bhi	15aa0 <__assert_fail@plt+0x4714>
   15ad0:	ldr	r0, [r5, #36]	; 0x24
   15ad4:	cmp	r0, #0
   15ad8:	beq	15af0 <__assert_fail@plt+0x4764>
   15adc:	ldr	r4, [r0, #4]
   15ae0:	bl	12d5c <__assert_fail@plt+0x19d0>
   15ae4:	mov	r0, r4
   15ae8:	cmp	r4, #0
   15aec:	bne	15adc <__assert_fail@plt+0x4750>
   15af0:	ldr	r0, [r5]
   15af4:	bl	12d5c <__assert_fail@plt+0x19d0>
   15af8:	mov	r0, r5
   15afc:	bl	12d5c <__assert_fail@plt+0x19d0>
   15b00:	pop	{r4, r5, r6, pc}
   15b04:	push	{r4, r5, lr}
   15b08:	sub	sp, sp, #44	; 0x2c
   15b0c:	mov	r4, r0
   15b10:	mov	r0, r1
   15b14:	ldr	r1, [r4, #20]
   15b18:	bl	150b0 <__assert_fail@plt+0x3d24>
   15b1c:	subs	r5, r0, #0
   15b20:	beq	15c18 <__assert_fail@plt+0x488c>
   15b24:	ldr	r3, [r4, #8]
   15b28:	cmp	r5, r3
   15b2c:	beq	15c28 <__assert_fail@plt+0x489c>
   15b30:	mov	r1, #8
   15b34:	mov	r0, r5
   15b38:	bl	19190 <__assert_fail@plt+0x7e04>
   15b3c:	str	r0, [sp]
   15b40:	cmp	r0, #0
   15b44:	beq	15c30 <__assert_fail@plt+0x48a4>
   15b48:	str	r5, [sp, #8]
   15b4c:	add	r0, r0, r5, lsl #3
   15b50:	str	r0, [sp, #4]
   15b54:	mov	r2, #0
   15b58:	str	r2, [sp, #12]
   15b5c:	str	r2, [sp, #16]
   15b60:	ldr	r3, [r4, #20]
   15b64:	str	r3, [sp, #20]
   15b68:	ldr	r3, [r4, #24]
   15b6c:	str	r3, [sp, #24]
   15b70:	ldr	r3, [r4, #28]
   15b74:	str	r3, [sp, #28]
   15b78:	ldr	r3, [r4, #32]
   15b7c:	str	r3, [sp, #32]
   15b80:	ldr	r3, [r4, #36]	; 0x24
   15b84:	str	r3, [sp, #36]	; 0x24
   15b88:	mov	r1, r4
   15b8c:	mov	r0, sp
   15b90:	bl	151ac <__assert_fail@plt+0x3e20>
   15b94:	subs	r5, r0, #0
   15b98:	bne	15be0 <__assert_fail@plt+0x4854>
   15b9c:	ldr	r3, [sp, #36]	; 0x24
   15ba0:	str	r3, [r4, #36]	; 0x24
   15ba4:	mov	r2, #1
   15ba8:	mov	r1, sp
   15bac:	mov	r0, r4
   15bb0:	bl	151ac <__assert_fail@plt+0x3e20>
   15bb4:	cmp	r0, #0
   15bb8:	beq	15c14 <__assert_fail@plt+0x4888>
   15bbc:	mov	r2, #0
   15bc0:	mov	r1, sp
   15bc4:	mov	r0, r4
   15bc8:	bl	151ac <__assert_fail@plt+0x3e20>
   15bcc:	cmp	r0, #0
   15bd0:	beq	15c14 <__assert_fail@plt+0x4888>
   15bd4:	ldr	r0, [sp]
   15bd8:	bl	12d5c <__assert_fail@plt+0x19d0>
   15bdc:	b	15c1c <__assert_fail@plt+0x4890>
   15be0:	ldr	r0, [r4]
   15be4:	bl	12d5c <__assert_fail@plt+0x19d0>
   15be8:	ldr	r3, [sp]
   15bec:	str	r3, [r4]
   15bf0:	ldr	r3, [sp, #4]
   15bf4:	str	r3, [r4, #4]
   15bf8:	ldr	r3, [sp, #8]
   15bfc:	str	r3, [r4, #8]
   15c00:	ldr	r3, [sp, #12]
   15c04:	str	r3, [r4, #12]
   15c08:	ldr	r3, [sp, #36]	; 0x24
   15c0c:	str	r3, [r4, #36]	; 0x24
   15c10:	b	15c1c <__assert_fail@plt+0x4890>
   15c14:	bl	11344 <abort@plt>
   15c18:	mov	r5, #0
   15c1c:	mov	r0, r5
   15c20:	add	sp, sp, #44	; 0x2c
   15c24:	pop	{r4, r5, pc}
   15c28:	mov	r5, #1
   15c2c:	b	15c1c <__assert_fail@plt+0x4890>
   15c30:	mov	r5, #0
   15c34:	b	15c1c <__assert_fail@plt+0x4890>
   15c38:	push	{r4, r5, r6, lr}
   15c3c:	sub	sp, sp, #8
   15c40:	subs	r6, r1, #0
   15c44:	beq	15c80 <__assert_fail@plt+0x48f4>
   15c48:	mov	r4, r0
   15c4c:	mov	r5, r2
   15c50:	mov	r3, #0
   15c54:	add	r2, sp, #4
   15c58:	mov	r1, r6
   15c5c:	bl	15300 <__assert_fail@plt+0x3f74>
   15c60:	cmp	r0, #0
   15c64:	beq	15c84 <__assert_fail@plt+0x48f8>
   15c68:	cmp	r5, #0
   15c6c:	moveq	r0, #0
   15c70:	strne	r0, [r5]
   15c74:	movne	r0, #0
   15c78:	add	sp, sp, #8
   15c7c:	pop	{r4, r5, r6, pc}
   15c80:	bl	11344 <abort@plt>
   15c84:	vldr	s15, [r4, #12]
   15c88:	vcvt.f32.u32	s14, s15
   15c8c:	ldr	r3, [r4, #20]
   15c90:	vldr	s15, [r4, #8]
   15c94:	vcvt.f32.u32	s15, s15
   15c98:	vldr	s13, [r3, #8]
   15c9c:	vmul.f32	s15, s15, s13
   15ca0:	vcmpe.f32	s14, s15
   15ca4:	vmrs	APSR_nzcv, fpscr
   15ca8:	bgt	15cf8 <__assert_fail@plt+0x496c>
   15cac:	ldr	r3, [sp, #4]
   15cb0:	ldr	r2, [r3]
   15cb4:	cmp	r2, #0
   15cb8:	beq	15d9c <__assert_fail@plt+0x4a10>
   15cbc:	ldr	r0, [r4, #36]	; 0x24
   15cc0:	cmp	r0, #0
   15cc4:	beq	15d84 <__assert_fail@plt+0x49f8>
   15cc8:	ldr	r3, [r0, #4]
   15ccc:	str	r3, [r4, #36]	; 0x24
   15cd0:	str	r6, [r0]
   15cd4:	ldr	r3, [sp, #4]
   15cd8:	ldr	r2, [r3, #4]
   15cdc:	str	r2, [r0, #4]
   15ce0:	str	r0, [r3, #4]
   15ce4:	ldr	r3, [r4, #16]
   15ce8:	add	r3, r3, #1
   15cec:	str	r3, [r4, #16]
   15cf0:	mov	r0, #1
   15cf4:	b	15c78 <__assert_fail@plt+0x48ec>
   15cf8:	mov	r0, r4
   15cfc:	bl	14fbc <__assert_fail@plt+0x3c30>
   15d00:	ldr	r3, [r4, #20]
   15d04:	vldr	s13, [r3, #8]
   15d08:	vldr	s15, [r4, #8]
   15d0c:	vcvt.f32.u32	s15, s15
   15d10:	vldr	s14, [r4, #12]
   15d14:	vcvt.f32.u32	s14, s14
   15d18:	vmul.f32	s12, s13, s15
   15d1c:	vcmpe.f32	s14, s12
   15d20:	vmrs	APSR_nzcv, fpscr
   15d24:	ble	15cac <__assert_fail@plt+0x4920>
   15d28:	ldrb	r2, [r3, #16]
   15d2c:	cmp	r2, #0
   15d30:	vldr	s14, [r3, #12]
   15d34:	vmul.f32	s15, s15, s14
   15d38:	vmuleq.f32	s15, s15, s13
   15d3c:	vldr	s14, [pc, #140]	; 15dd0 <__assert_fail@plt+0x4a44>
   15d40:	vcmpe.f32	s15, s14
   15d44:	vmrs	APSR_nzcv, fpscr
   15d48:	bge	15dc0 <__assert_fail@plt+0x4a34>
   15d4c:	vcvt.u32.f32	s15, s15
   15d50:	vmov	r1, s15
   15d54:	mov	r0, r4
   15d58:	bl	15b04 <__assert_fail@plt+0x4778>
   15d5c:	cmp	r0, #0
   15d60:	beq	15dc8 <__assert_fail@plt+0x4a3c>
   15d64:	mov	r3, #0
   15d68:	add	r2, sp, #4
   15d6c:	mov	r1, r6
   15d70:	mov	r0, r4
   15d74:	bl	15300 <__assert_fail@plt+0x3f74>
   15d78:	cmp	r0, #0
   15d7c:	beq	15cac <__assert_fail@plt+0x4920>
   15d80:	bl	11344 <abort@plt>
   15d84:	mov	r0, #8
   15d88:	bl	191e0 <__assert_fail@plt+0x7e54>
   15d8c:	cmp	r0, #0
   15d90:	bne	15cd0 <__assert_fail@plt+0x4944>
   15d94:	mvn	r0, #0
   15d98:	b	15c78 <__assert_fail@plt+0x48ec>
   15d9c:	str	r6, [r3]
   15da0:	ldr	r3, [r4, #16]
   15da4:	add	r3, r3, #1
   15da8:	str	r3, [r4, #16]
   15dac:	ldr	r3, [r4, #12]
   15db0:	add	r3, r3, #1
   15db4:	str	r3, [r4, #12]
   15db8:	mov	r0, #1
   15dbc:	b	15c78 <__assert_fail@plt+0x48ec>
   15dc0:	mvn	r0, #0
   15dc4:	b	15c78 <__assert_fail@plt+0x48ec>
   15dc8:	mvn	r0, #0
   15dcc:	b	15c78 <__assert_fail@plt+0x48ec>
   15dd0:	svcmi	0x00800000
   15dd4:	push	{r4, lr}
   15dd8:	sub	sp, sp, #8
   15ddc:	mov	r4, r1
   15de0:	add	r2, sp, #4
   15de4:	bl	15c38 <__assert_fail@plt+0x48ac>
   15de8:	cmn	r0, #1
   15dec:	beq	15e04 <__assert_fail@plt+0x4a78>
   15df0:	cmp	r0, #0
   15df4:	movne	r0, r4
   15df8:	ldreq	r0, [sp, #4]
   15dfc:	add	sp, sp, #8
   15e00:	pop	{r4, pc}
   15e04:	mov	r0, #0
   15e08:	b	15dfc <__assert_fail@plt+0x4a70>
   15e0c:	push	{r4, r5, r6, lr}
   15e10:	sub	sp, sp, #8
   15e14:	mov	r4, r0
   15e18:	mov	r3, #1
   15e1c:	add	r2, sp, #4
   15e20:	bl	15300 <__assert_fail@plt+0x3f74>
   15e24:	subs	r5, r0, #0
   15e28:	beq	15e48 <__assert_fail@plt+0x4abc>
   15e2c:	ldr	r3, [r4, #16]
   15e30:	sub	r3, r3, #1
   15e34:	str	r3, [r4, #16]
   15e38:	ldr	r3, [sp, #4]
   15e3c:	ldr	r3, [r3]
   15e40:	cmp	r3, #0
   15e44:	beq	15e54 <__assert_fail@plt+0x4ac8>
   15e48:	mov	r0, r5
   15e4c:	add	sp, sp, #8
   15e50:	pop	{r4, r5, r6, pc}
   15e54:	ldr	r3, [r4, #12]
   15e58:	sub	r3, r3, #1
   15e5c:	str	r3, [r4, #12]
   15e60:	vmov	s15, r3
   15e64:	vcvt.f32.u32	s15, s15
   15e68:	ldr	r3, [r4, #20]
   15e6c:	vldr	s14, [r4, #8]
   15e70:	vcvt.f32.u32	s14, s14
   15e74:	vldr	s13, [r3]
   15e78:	vmul.f32	s14, s14, s13
   15e7c:	vcmpe.f32	s15, s14
   15e80:	vmrs	APSR_nzcv, fpscr
   15e84:	bpl	15e48 <__assert_fail@plt+0x4abc>
   15e88:	mov	r0, r4
   15e8c:	bl	14fbc <__assert_fail@plt+0x3c30>
   15e90:	ldr	r3, [r4, #20]
   15e94:	vldr	s15, [r4, #8]
   15e98:	vcvt.f32.u32	s15, s15
   15e9c:	vldr	s14, [r4, #12]
   15ea0:	vcvt.f32.u32	s13, s14
   15ea4:	vldr	s14, [r3]
   15ea8:	vmul.f32	s14, s15, s14
   15eac:	vcmpe.f32	s13, s14
   15eb0:	vmrs	APSR_nzcv, fpscr
   15eb4:	bpl	15e48 <__assert_fail@plt+0x4abc>
   15eb8:	ldrb	r2, [r3, #16]
   15ebc:	cmp	r2, #0
   15ec0:	vldr	s14, [r3, #4]
   15ec4:	vmuleq.f32	s15, s15, s14
   15ec8:	vldreq	s14, [r3, #8]
   15ecc:	vmul.f32	s15, s15, s14
   15ed0:	vcvt.u32.f32	s15, s15
   15ed4:	vmov	r1, s15
   15ed8:	mov	r0, r4
   15edc:	bl	15b04 <__assert_fail@plt+0x4778>
   15ee0:	cmp	r0, #0
   15ee4:	bne	15e48 <__assert_fail@plt+0x4abc>
   15ee8:	ldr	r0, [r4, #36]	; 0x24
   15eec:	cmp	r0, #0
   15ef0:	beq	15f08 <__assert_fail@plt+0x4b7c>
   15ef4:	ldr	r6, [r0, #4]
   15ef8:	bl	12d5c <__assert_fail@plt+0x19d0>
   15efc:	mov	r0, r6
   15f00:	cmp	r6, #0
   15f04:	bne	15ef4 <__assert_fail@plt+0x4b68>
   15f08:	mov	r3, #0
   15f0c:	str	r3, [r4, #36]	; 0x24
   15f10:	b	15e48 <__assert_fail@plt+0x4abc>
   15f14:	push	{r4, lr}
   15f18:	bl	15e0c <__assert_fail@plt+0x4a80>
   15f1c:	pop	{r4, pc}
   15f20:	mov	r3, #1
   15f24:	strb	r3, [r0, #28]
   15f28:	mov	r3, #0
   15f2c:	str	r3, [r0, #20]
   15f30:	str	r3, [r0, #24]
   15f34:	str	r1, [r0]
   15f38:	str	r1, [r0, #4]
   15f3c:	str	r1, [r0, #8]
   15f40:	str	r1, [r0, #12]
   15f44:	str	r1, [r0, #16]
   15f48:	bx	lr
   15f4c:	ldrb	r0, [r0, #28]
   15f50:	bx	lr
   15f54:	mov	r2, r0
   15f58:	ldrb	ip, [r0, #28]
   15f5c:	eor	ip, ip, #1
   15f60:	ldr	r3, [r0, #20]
   15f64:	add	r3, ip, r3
   15f68:	and	r3, r3, #3
   15f6c:	ldr	r0, [r0, r3, lsl #2]
   15f70:	str	r1, [r2, r3, lsl #2]
   15f74:	str	r3, [r2, #20]
   15f78:	ldr	r1, [r2, #24]
   15f7c:	cmp	r3, r1
   15f80:	addeq	r3, ip, r3
   15f84:	andeq	r3, r3, #3
   15f88:	streq	r3, [r2, #24]
   15f8c:	mov	r3, #0
   15f90:	strb	r3, [r2, #28]
   15f94:	bx	lr
   15f98:	ldrb	r3, [r0, #28]
   15f9c:	cmp	r3, #0
   15fa0:	bne	15fd8 <__assert_fail@plt+0x4c4c>
   15fa4:	mov	r2, r0
   15fa8:	ldr	r3, [r0, #20]
   15fac:	ldr	r0, [r0, r3, lsl #2]
   15fb0:	ldr	r1, [r2, #16]
   15fb4:	str	r1, [r2, r3, lsl #2]
   15fb8:	ldr	r1, [r2, #24]
   15fbc:	cmp	r3, r1
   15fc0:	moveq	r3, #1
   15fc4:	strbeq	r3, [r2, #28]
   15fc8:	addne	r3, r3, #3
   15fcc:	andne	r3, r3, #3
   15fd0:	strne	r3, [r2, #20]
   15fd4:	bx	lr
   15fd8:	push	{r4, lr}
   15fdc:	bl	11344 <abort@plt>
   15fe0:	push	{r4, r5, r6, r8, r9, lr}
   15fe4:	mov	r4, r0
   15fe8:	mov	r5, r1
   15fec:	add	r6, r2, #20
   15ff0:	mov	r3, #0
   15ff4:	strb	r3, [r2, #20]
   15ff8:	mov	r8, #10
   15ffc:	mov	r9, #0
   16000:	mov	r2, r8
   16004:	mov	r3, r9
   16008:	mov	r0, r4
   1600c:	mov	r1, r5
   16010:	bl	19e48 <__assert_fail@plt+0x8abc>
   16014:	add	r2, r2, #48	; 0x30
   16018:	strb	r2, [r6, #-1]!
   1601c:	mov	r2, r8
   16020:	mov	r3, r9
   16024:	mov	r0, r4
   16028:	mov	r1, r5
   1602c:	bl	19e48 <__assert_fail@plt+0x8abc>
   16030:	mov	r4, r0
   16034:	mov	r5, r1
   16038:	orrs	r3, r4, r5
   1603c:	bne	16000 <__assert_fail@plt+0x4c74>
   16040:	mov	r0, r6
   16044:	pop	{r4, r5, r6, r8, r9, pc}
   16048:	push	{r2, r3}
   1604c:	push	{lr}		; (str lr, [sp, #-4]!)
   16050:	sub	sp, sp, #12
   16054:	ldr	r2, [sp, #16]
   16058:	tst	r2, #64	; 0x40
   1605c:	addne	r3, sp, #24
   16060:	strne	r3, [sp, #4]
   16064:	ldrne	r3, [sp, #20]
   16068:	moveq	r3, #0
   1606c:	bl	11224 <openat64@plt>
   16070:	bl	17c90 <__assert_fail@plt+0x6904>
   16074:	add	sp, sp, #12
   16078:	pop	{lr}		; (ldr lr, [sp], #4)
   1607c:	add	sp, sp, #8
   16080:	bx	lr
   16084:	push	{r4, r5, r6, r7, r8, lr}
   16088:	mov	r6, r3
   1608c:	orr	r2, r2, #540672	; 0x84000
   16090:	orr	r2, r2, #2304	; 0x900
   16094:	bl	16048 <__assert_fail@plt+0x4cbc>
   16098:	subs	r4, r0, #0
   1609c:	blt	160d8 <__assert_fail@plt+0x4d4c>
   160a0:	mov	r0, r4
   160a4:	bl	112e4 <fdopendir@plt>
   160a8:	subs	r5, r0, #0
   160ac:	beq	160bc <__assert_fail@plt+0x4d30>
   160b0:	str	r4, [r6]
   160b4:	mov	r0, r5
   160b8:	pop	{r4, r5, r6, r7, r8, pc}
   160bc:	bl	1123c <__errno_location@plt>
   160c0:	mov	r6, r0
   160c4:	ldr	r7, [r0]
   160c8:	mov	r0, r4
   160cc:	bl	11350 <close@plt>
   160d0:	str	r7, [r6]
   160d4:	b	160b4 <__assert_fail@plt+0x4d28>
   160d8:	mov	r5, #0
   160dc:	b	160b4 <__assert_fail@plt+0x4d28>
   160e0:	push	{r4, r5, r6, lr}
   160e4:	subs	r4, r0, #0
   160e8:	beq	16160 <__assert_fail@plt+0x4dd4>
   160ec:	mov	r1, #47	; 0x2f
   160f0:	mov	r0, r4
   160f4:	bl	112c0 <strrchr@plt>
   160f8:	cmp	r0, #0
   160fc:	addne	r5, r0, #1
   16100:	moveq	r5, r4
   16104:	sub	r3, r5, r4
   16108:	cmp	r3, #6
   1610c:	ble	1614c <__assert_fail@plt+0x4dc0>
   16110:	mov	r2, #7
   16114:	ldr	r1, [pc, #96]	; 1617c <__assert_fail@plt+0x4df0>
   16118:	sub	r0, r5, #7
   1611c:	bl	11338 <strncmp@plt>
   16120:	cmp	r0, #0
   16124:	bne	1614c <__assert_fail@plt+0x4dc0>
   16128:	mov	r2, #3
   1612c:	ldr	r1, [pc, #76]	; 16180 <__assert_fail@plt+0x4df4>
   16130:	mov	r0, r5
   16134:	bl	11338 <strncmp@plt>
   16138:	cmp	r0, #0
   1613c:	addeq	r4, r5, #3
   16140:	ldreq	r3, [pc, #60]	; 16184 <__assert_fail@plt+0x4df8>
   16144:	streq	r4, [r3]
   16148:	movne	r4, r5
   1614c:	ldr	r3, [pc, #52]	; 16188 <__assert_fail@plt+0x4dfc>
   16150:	str	r4, [r3]
   16154:	ldr	r3, [pc, #48]	; 1618c <__assert_fail@plt+0x4e00>
   16158:	str	r4, [r3]
   1615c:	pop	{r4, r5, r6, pc}
   16160:	ldr	r3, [pc, #40]	; 16190 <__assert_fail@plt+0x4e04>
   16164:	ldr	r3, [r3]
   16168:	mov	r2, #55	; 0x37
   1616c:	mov	r1, #1
   16170:	ldr	r0, [pc, #28]	; 16194 <__assert_fail@plt+0x4e08>
   16174:	bl	1114c <fwrite@plt>
   16178:	bl	11344 <abort@plt>
   1617c:	andeq	fp, r1, r4, ror #4
   16180:	andeq	fp, r1, ip, ror #4
   16184:	andeq	ip, r2, r8, lsl #3
   16188:	andeq	ip, r2, r8, asr #3
   1618c:	andeq	ip, r2, ip, lsl #3
   16190:	muleq	r2, r8, r1
   16194:	andeq	fp, r1, ip, lsr #4
   16198:	push	{r4, r5, r6, lr}
   1619c:	mov	r5, r0
   161a0:	mov	r4, r1
   161a4:	mov	r2, #48	; 0x30
   161a8:	mov	r1, #0
   161ac:	bl	11254 <memset@plt>
   161b0:	cmp	r4, #10
   161b4:	beq	161c4 <__assert_fail@plt+0x4e38>
   161b8:	str	r4, [r5]
   161bc:	mov	r0, r5
   161c0:	pop	{r4, r5, r6, pc}
   161c4:	bl	11344 <abort@plt>
   161c8:	push	{r4, r5, r6, lr}
   161cc:	mov	r4, r0
   161d0:	mov	r5, r1
   161d4:	mov	r2, #5
   161d8:	mov	r1, r0
   161dc:	mov	r0, #0
   161e0:	bl	11104 <dcgettext@plt>
   161e4:	cmp	r4, r0
   161e8:	popne	{r4, r5, r6, pc}
   161ec:	bl	19808 <__assert_fail@plt+0x847c>
   161f0:	ldrb	r3, [r0]
   161f4:	bic	r3, r3, #32
   161f8:	cmp	r3, #85	; 0x55
   161fc:	beq	16278 <__assert_fail@plt+0x4eec>
   16200:	cmp	r3, #71	; 0x47
   16204:	bne	162d4 <__assert_fail@plt+0x4f48>
   16208:	ldrb	r3, [r0, #1]
   1620c:	bic	r3, r3, #32
   16210:	cmp	r3, #66	; 0x42
   16214:	bne	162d4 <__assert_fail@plt+0x4f48>
   16218:	ldrb	r3, [r0, #2]
   1621c:	cmp	r3, #49	; 0x31
   16220:	bne	162d4 <__assert_fail@plt+0x4f48>
   16224:	ldrb	r3, [r0, #3]
   16228:	cmp	r3, #56	; 0x38
   1622c:	bne	162d4 <__assert_fail@plt+0x4f48>
   16230:	ldrb	r3, [r0, #4]
   16234:	cmp	r3, #48	; 0x30
   16238:	bne	162d4 <__assert_fail@plt+0x4f48>
   1623c:	ldrb	r3, [r0, #5]
   16240:	cmp	r3, #51	; 0x33
   16244:	bne	162d4 <__assert_fail@plt+0x4f48>
   16248:	ldrb	r3, [r0, #6]
   1624c:	cmp	r3, #48	; 0x30
   16250:	bne	162d4 <__assert_fail@plt+0x4f48>
   16254:	ldrb	r3, [r0, #7]
   16258:	cmp	r3, #0
   1625c:	bne	162d4 <__assert_fail@plt+0x4f48>
   16260:	ldrb	r2, [r4]
   16264:	ldr	r3, [pc, #124]	; 162e8 <__assert_fail@plt+0x4f5c>
   16268:	ldr	r0, [pc, #124]	; 162ec <__assert_fail@plt+0x4f60>
   1626c:	cmp	r2, #96	; 0x60
   16270:	movne	r0, r3
   16274:	pop	{r4, r5, r6, pc}
   16278:	ldrb	r3, [r0, #1]
   1627c:	bic	r3, r3, #32
   16280:	cmp	r3, #84	; 0x54
   16284:	bne	162d4 <__assert_fail@plt+0x4f48>
   16288:	ldrb	r3, [r0, #2]
   1628c:	bic	r3, r3, #32
   16290:	cmp	r3, #70	; 0x46
   16294:	bne	162d4 <__assert_fail@plt+0x4f48>
   16298:	ldrb	r3, [r0, #3]
   1629c:	cmp	r3, #45	; 0x2d
   162a0:	bne	162d4 <__assert_fail@plt+0x4f48>
   162a4:	ldrb	r3, [r0, #4]
   162a8:	cmp	r3, #56	; 0x38
   162ac:	bne	162d4 <__assert_fail@plt+0x4f48>
   162b0:	ldrb	r3, [r0, #5]
   162b4:	cmp	r3, #0
   162b8:	bne	162d4 <__assert_fail@plt+0x4f48>
   162bc:	ldrb	r2, [r4]
   162c0:	ldr	r3, [pc, #40]	; 162f0 <__assert_fail@plt+0x4f64>
   162c4:	ldr	r0, [pc, #40]	; 162f4 <__assert_fail@plt+0x4f68>
   162c8:	cmp	r2, #96	; 0x60
   162cc:	movne	r0, r3
   162d0:	pop	{r4, r5, r6, pc}
   162d4:	ldr	r3, [pc, #28]	; 162f8 <__assert_fail@plt+0x4f6c>
   162d8:	ldr	r0, [pc, #28]	; 162fc <__assert_fail@plt+0x4f70>
   162dc:	cmp	r5, #9
   162e0:	movne	r0, r3
   162e4:	pop	{r4, r5, r6, pc}
   162e8:	andeq	fp, r1, r8, asr #5
   162ec:	ldrdeq	fp, [r1], -r4
   162f0:	andeq	fp, r1, r4, asr #5
   162f4:	ldrdeq	fp, [r1], -r8
   162f8:	andeq	fp, r1, ip, asr #5
   162fc:	ldrdeq	fp, [r1], -r0
   16300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16304:	sub	sp, sp, #116	; 0x74
   16308:	str	r0, [sp, #36]	; 0x24
   1630c:	mov	sl, r1
   16310:	str	r2, [sp, #52]	; 0x34
   16314:	str	r3, [sp, #28]
   16318:	ldr	r8, [sp, #152]	; 0x98
   1631c:	bl	11164 <__ctype_get_mb_cur_max@plt>
   16320:	str	r0, [sp, #84]	; 0x54
   16324:	ldr	r3, [sp, #156]	; 0x9c
   16328:	lsr	r3, r3, #1
   1632c:	and	r3, r3, #1
   16330:	str	r3, [sp, #32]
   16334:	mov	r3, #1
   16338:	str	r3, [sp, #40]	; 0x28
   1633c:	mov	r3, #0
   16340:	str	r3, [sp, #80]	; 0x50
   16344:	str	r3, [sp, #44]	; 0x2c
   16348:	str	r3, [sp, #48]	; 0x30
   1634c:	str	r3, [sp, #60]	; 0x3c
   16350:	str	r3, [sp, #72]	; 0x48
   16354:	str	r3, [sp, #76]	; 0x4c
   16358:	mov	r7, sl
   1635c:	mov	sl, r8
   16360:	cmp	sl, #10
   16364:	ldrls	pc, [pc, sl, lsl #2]
   16368:	b	16520 <__assert_fail@plt+0x5194>
   1636c:	ldrdeq	r6, [r1], -r0
   16370:	andeq	r6, r1, r0, lsr #7
   16374:	strdeq	r6, [r1], -ip
   16378:	muleq	r1, r8, r3
   1637c:			; <UNDEFINED> instruction: 0x000164b0
   16380:	andeq	r6, r1, r0, ror #7
   16384:	andeq	r7, r1, ip, asr #8
   16388:	andeq	r6, r1, r4, lsr #10
   1638c:	andeq	r6, r1, ip, lsl r4
   16390:	andeq	r6, r1, ip, lsl r4
   16394:	andeq	r6, r1, ip, lsl r4
   16398:	mov	r3, #1
   1639c:	str	r3, [sp, #48]	; 0x30
   163a0:	mov	r3, #1
   163a4:	str	r3, [sp, #32]
   163a8:	str	r3, [sp, #60]	; 0x3c
   163ac:	ldr	r3, [pc, #4068]	; 17398 <__assert_fail@plt+0x600c>
   163b0:	str	r3, [sp, #72]	; 0x48
   163b4:	mov	fp, #0
   163b8:	mov	sl, #2
   163bc:	mov	r6, #0
   163c0:	ldr	r3, [sp, #48]	; 0x30
   163c4:	eor	r3, r3, #1
   163c8:	str	r3, [sp, #68]	; 0x44
   163cc:	b	16cb4 <__assert_fail@plt+0x5928>
   163d0:	mov	r3, #0
   163d4:	str	r3, [sp, #32]
   163d8:	mov	fp, r3
   163dc:	b	163bc <__assert_fail@plt+0x5030>
   163e0:	ldr	r3, [sp, #32]
   163e4:	cmp	r3, #0
   163e8:	bne	1653c <__assert_fail@plt+0x51b0>
   163ec:	cmp	r7, #0
   163f0:	beq	1655c <__assert_fail@plt+0x51d0>
   163f4:	ldr	r3, [sp, #36]	; 0x24
   163f8:	mov	r2, #34	; 0x22
   163fc:	strb	r2, [r3]
   16400:	mov	r3, #1
   16404:	str	r3, [sp, #48]	; 0x30
   16408:	str	r3, [sp, #60]	; 0x3c
   1640c:	ldr	r3, [pc, #3980]	; 173a0 <__assert_fail@plt+0x6014>
   16410:	str	r3, [sp, #72]	; 0x48
   16414:	mov	fp, #1
   16418:	b	163bc <__assert_fail@plt+0x5030>
   1641c:	cmp	sl, #10
   16420:	beq	16444 <__assert_fail@plt+0x50b8>
   16424:	mov	r1, sl
   16428:	ldr	r0, [pc, #3948]	; 1739c <__assert_fail@plt+0x6010>
   1642c:	bl	161c8 <__assert_fail@plt+0x4e3c>
   16430:	str	r0, [sp, #164]	; 0xa4
   16434:	mov	r1, sl
   16438:	ldr	r0, [pc, #3928]	; 17398 <__assert_fail@plt+0x600c>
   1643c:	bl	161c8 <__assert_fail@plt+0x4e3c>
   16440:	str	r0, [sp, #168]	; 0xa8
   16444:	ldr	r3, [sp, #32]
   16448:	cmp	r3, #0
   1644c:	movne	fp, #0
   16450:	bne	16488 <__assert_fail@plt+0x50fc>
   16454:	ldr	r3, [sp, #164]	; 0xa4
   16458:	ldrb	r3, [r3]
   1645c:	cmp	r3, #0
   16460:	beq	164a8 <__assert_fail@plt+0x511c>
   16464:	ldr	r2, [sp, #164]	; 0xa4
   16468:	mov	fp, #0
   1646c:	ldr	r1, [sp, #36]	; 0x24
   16470:	cmp	r7, fp
   16474:	strbhi	r3, [r1, fp]
   16478:	add	fp, fp, #1
   1647c:	ldrb	r3, [r2, #1]!
   16480:	cmp	r3, #0
   16484:	bne	16470 <__assert_fail@plt+0x50e4>
   16488:	ldr	r0, [sp, #168]	; 0xa8
   1648c:	bl	1120c <strlen@plt>
   16490:	str	r0, [sp, #60]	; 0x3c
   16494:	ldr	r3, [sp, #168]	; 0xa8
   16498:	str	r3, [sp, #72]	; 0x48
   1649c:	mov	r3, #1
   164a0:	str	r3, [sp, #48]	; 0x30
   164a4:	b	163bc <__assert_fail@plt+0x5030>
   164a8:	mov	fp, #0
   164ac:	b	16488 <__assert_fail@plt+0x50fc>
   164b0:	ldr	r3, [sp, #32]
   164b4:	cmp	r3, #0
   164b8:	bne	16578 <__assert_fail@plt+0x51ec>
   164bc:	mov	r3, #1
   164c0:	str	r3, [sp, #48]	; 0x30
   164c4:	cmp	r7, #0
   164c8:	beq	16594 <__assert_fail@plt+0x5208>
   164cc:	ldr	r3, [sp, #36]	; 0x24
   164d0:	mov	r2, #39	; 0x27
   164d4:	strb	r2, [r3]
   164d8:	mov	r3, #0
   164dc:	str	r3, [sp, #32]
   164e0:	mov	r3, #1
   164e4:	str	r3, [sp, #60]	; 0x3c
   164e8:	ldr	r3, [pc, #3752]	; 17398 <__assert_fail@plt+0x600c>
   164ec:	str	r3, [sp, #72]	; 0x48
   164f0:	mov	fp, #1
   164f4:	mov	sl, #2
   164f8:	b	163bc <__assert_fail@plt+0x5030>
   164fc:	ldr	r3, [sp, #32]
   16500:	cmp	r3, #0
   16504:	beq	164c4 <__assert_fail@plt+0x5138>
   16508:	mov	r3, #1
   1650c:	str	r3, [sp, #60]	; 0x3c
   16510:	ldr	r3, [pc, #3712]	; 17398 <__assert_fail@plt+0x600c>
   16514:	str	r3, [sp, #72]	; 0x48
   16518:	mov	fp, #0
   1651c:	b	163bc <__assert_fail@plt+0x5030>
   16520:	bl	11344 <abort@plt>
   16524:	mov	r3, #0
   16528:	str	r3, [sp, #32]
   1652c:	mov	r3, #1
   16530:	str	r3, [sp, #48]	; 0x30
   16534:	mov	fp, #0
   16538:	b	163bc <__assert_fail@plt+0x5030>
   1653c:	ldr	r3, [sp, #32]
   16540:	str	r3, [sp, #48]	; 0x30
   16544:	mov	r3, #1
   16548:	str	r3, [sp, #60]	; 0x3c
   1654c:	ldr	r3, [pc, #3660]	; 173a0 <__assert_fail@plt+0x6014>
   16550:	str	r3, [sp, #72]	; 0x48
   16554:	mov	fp, #0
   16558:	b	163bc <__assert_fail@plt+0x5030>
   1655c:	mov	r3, #1
   16560:	str	r3, [sp, #48]	; 0x30
   16564:	str	r3, [sp, #60]	; 0x3c
   16568:	ldr	r3, [pc, #3632]	; 173a0 <__assert_fail@plt+0x6014>
   1656c:	str	r3, [sp, #72]	; 0x48
   16570:	mov	fp, #1
   16574:	b	163bc <__assert_fail@plt+0x5030>
   16578:	mov	r3, #1
   1657c:	str	r3, [sp, #60]	; 0x3c
   16580:	ldr	r3, [pc, #3600]	; 17398 <__assert_fail@plt+0x600c>
   16584:	str	r3, [sp, #72]	; 0x48
   16588:	mov	fp, #0
   1658c:	mov	sl, #2
   16590:	b	163bc <__assert_fail@plt+0x5030>
   16594:	mov	r3, #0
   16598:	str	r3, [sp, #32]
   1659c:	mov	r3, #1
   165a0:	str	r3, [sp, #60]	; 0x3c
   165a4:	ldr	r3, [pc, #3564]	; 17398 <__assert_fail@plt+0x600c>
   165a8:	str	r3, [sp, #72]	; 0x48
   165ac:	mov	fp, #1
   165b0:	mov	sl, #2
   165b4:	b	163bc <__assert_fail@plt+0x5030>
   165b8:	mov	r3, #0
   165bc:	str	r3, [sp, #56]	; 0x38
   165c0:	ldr	r3, [sp, #52]	; 0x34
   165c4:	add	r2, r3, r6
   165c8:	str	r2, [sp, #64]	; 0x40
   165cc:	ldrb	r4, [r3, r6]
   165d0:	cmp	r4, #126	; 0x7e
   165d4:	ldrls	pc, [pc, r4, lsl #2]
   165d8:	b	16e14 <__assert_fail@plt+0x5a88>
   165dc:	strdeq	r6, [r1], -r4
   165e0:	andeq	r6, r1, r4, lsl lr
   165e4:	andeq	r6, r1, r4, lsl lr
   165e8:	andeq	r6, r1, r4, lsl lr
   165ec:	andeq	r6, r1, r4, lsl lr
   165f0:	andeq	r6, r1, r4, lsl lr
   165f4:	andeq	r6, r1, r4, lsl lr
   165f8:	andeq	r6, r1, r0, asr fp
   165fc:	andeq	r6, r1, ip, ror #15
   16600:	andeq	r6, r1, r8, lsl #22
   16604:	andeq	r6, r1, r0, lsl #22
   16608:	andeq	r6, r1, r0, ror sl
   1660c:	andeq	r6, r1, r8, ror #20
   16610:	andeq	r6, r1, r4, ror #15
   16614:	andeq	r6, r1, r4, lsl lr
   16618:	andeq	r6, r1, r4, lsl lr
   1661c:	andeq	r6, r1, r4, lsl lr
   16620:	andeq	r6, r1, r4, lsl lr
   16624:	andeq	r6, r1, r4, lsl lr
   16628:	andeq	r6, r1, r4, lsl lr
   1662c:	andeq	r6, r1, r4, lsl lr
   16630:	andeq	r6, r1, r4, lsl lr
   16634:	andeq	r6, r1, r4, lsl lr
   16638:	andeq	r6, r1, r4, lsl lr
   1663c:	andeq	r6, r1, r4, lsl lr
   16640:	andeq	r6, r1, r4, lsl lr
   16644:	andeq	r6, r1, r4, lsl lr
   16648:	andeq	r6, r1, r4, lsl lr
   1664c:	andeq	r6, r1, r4, lsl lr
   16650:	andeq	r6, r1, r4, lsl lr
   16654:	andeq	r6, r1, r4, lsl lr
   16658:	andeq	r6, r1, r4, lsl lr
   1665c:	andeq	r6, r1, r4, lsr #23
   16660:	andeq	r6, r1, r0, lsr #23
   16664:	andeq	r6, r1, r0, lsr #23
   16668:	andeq	r6, r1, r8, ror fp
   1666c:	andeq	r6, r1, r0, lsr #23
   16670:	andeq	r7, r1, r8, ror #3
   16674:	andeq	r6, r1, r0, lsr #23
   16678:	andeq	r6, r1, r8, ror sp
   1667c:	andeq	r6, r1, r0, lsr #23
   16680:	andeq	r6, r1, r0, lsr #23
   16684:	andeq	r6, r1, r0, lsr #23
   16688:	andeq	r7, r1, r8, ror #3
   1668c:	andeq	r7, r1, r8, ror #3
   16690:	andeq	r7, r1, r8, ror #3
   16694:	andeq	r7, r1, r8, ror #3
   16698:	andeq	r7, r1, r8, ror #3
   1669c:	andeq	r7, r1, r8, ror #3
   166a0:	andeq	r7, r1, r8, ror #3
   166a4:	andeq	r7, r1, r8, ror #3
   166a8:	andeq	r7, r1, r8, ror #3
   166ac:	andeq	r7, r1, r8, ror #3
   166b0:	andeq	r7, r1, r8, ror #3
   166b4:	andeq	r7, r1, r8, ror #3
   166b8:	andeq	r7, r1, r8, ror #3
   166bc:	andeq	r7, r1, r8, ror #3
   166c0:	andeq	r7, r1, r8, ror #3
   166c4:	andeq	r7, r1, r8, ror #3
   166c8:	andeq	r6, r1, r0, lsr #23
   166cc:	andeq	r6, r1, r0, lsr #23
   166d0:	andeq	r6, r1, r0, lsr #23
   166d4:	andeq	r6, r1, r0, lsr #23
   166d8:	strdeq	r6, [r1], -ip
   166dc:	andeq	r6, r1, r4, lsl lr
   166e0:	andeq	r7, r1, r8, ror #3
   166e4:	andeq	r7, r1, r8, ror #3
   166e8:	andeq	r7, r1, r8, ror #3
   166ec:	andeq	r7, r1, r8, ror #3
   166f0:	andeq	r7, r1, r8, ror #3
   166f4:	andeq	r7, r1, r8, ror #3
   166f8:	andeq	r7, r1, r8, ror #3
   166fc:	andeq	r7, r1, r8, ror #3
   16700:	andeq	r7, r1, r8, ror #3
   16704:	andeq	r7, r1, r8, ror #3
   16708:	andeq	r7, r1, r8, ror #3
   1670c:	andeq	r7, r1, r8, ror #3
   16710:	andeq	r7, r1, r8, ror #3
   16714:	andeq	r7, r1, r8, ror #3
   16718:	andeq	r7, r1, r8, ror #3
   1671c:	andeq	r7, r1, r8, ror #3
   16720:	andeq	r7, r1, r8, ror #3
   16724:	andeq	r7, r1, r8, ror #3
   16728:	andeq	r7, r1, r8, ror #3
   1672c:	andeq	r7, r1, r8, ror #3
   16730:	andeq	r7, r1, r8, ror #3
   16734:	andeq	r7, r1, r8, ror #3
   16738:	andeq	r7, r1, r8, ror #3
   1673c:	andeq	r7, r1, r8, ror #3
   16740:	andeq	r7, r1, r8, ror #3
   16744:	andeq	r7, r1, r8, ror #3
   16748:	andeq	r6, r1, r0, lsr #23
   1674c:	andeq	r6, r1, r8, ror sl
   16750:	andeq	r7, r1, r8, ror #3
   16754:	andeq	r6, r1, r0, lsr #23
   16758:	andeq	r7, r1, r8, ror #3
   1675c:	andeq	r6, r1, r0, lsr #23
   16760:	andeq	r7, r1, r8, ror #3
   16764:	andeq	r7, r1, r8, ror #3
   16768:	andeq	r7, r1, r8, ror #3
   1676c:	andeq	r7, r1, r8, ror #3
   16770:	andeq	r7, r1, r8, ror #3
   16774:	andeq	r7, r1, r8, ror #3
   16778:	andeq	r7, r1, r8, ror #3
   1677c:	andeq	r7, r1, r8, ror #3
   16780:	andeq	r7, r1, r8, ror #3
   16784:	andeq	r7, r1, r8, ror #3
   16788:	andeq	r7, r1, r8, ror #3
   1678c:	andeq	r7, r1, r8, ror #3
   16790:	andeq	r7, r1, r8, ror #3
   16794:	andeq	r7, r1, r8, ror #3
   16798:	andeq	r7, r1, r8, ror #3
   1679c:	andeq	r7, r1, r8, ror #3
   167a0:	andeq	r7, r1, r8, ror #3
   167a4:	andeq	r7, r1, r8, ror #3
   167a8:	andeq	r7, r1, r8, ror #3
   167ac:	andeq	r7, r1, r8, ror #3
   167b0:	andeq	r7, r1, r8, ror #3
   167b4:	andeq	r7, r1, r8, ror #3
   167b8:	andeq	r7, r1, r8, ror #3
   167bc:	andeq	r7, r1, r8, ror #3
   167c0:	andeq	r7, r1, r8, ror #3
   167c4:	andeq	r7, r1, r8, ror #3
   167c8:	andeq	r6, r1, r8, asr fp
   167cc:	andeq	r6, r1, r0, lsr #23
   167d0:	andeq	r6, r1, r8, asr fp
   167d4:	andeq	r6, r1, r8, ror fp
   167d8:	mov	r3, #0
   167dc:	str	r3, [sp, #56]	; 0x38
   167e0:	b	165c0 <__assert_fail@plt+0x5234>
   167e4:	mov	r3, #114	; 0x72
   167e8:	b	16b0c <__assert_fail@plt+0x5780>
   167ec:	mov	r3, #98	; 0x62
   167f0:	b	16b24 <__assert_fail@plt+0x5798>
   167f4:	ldr	r3, [sp, #48]	; 0x30
   167f8:	cmp	r3, #0
   167fc:	beq	168e4 <__assert_fail@plt+0x5558>
   16800:	ldr	r3, [sp, #32]
   16804:	cmp	r3, #0
   16808:	bne	1736c <__assert_fail@plt+0x5fe0>
   1680c:	ldr	r3, [sp, #44]	; 0x2c
   16810:	eor	r3, r3, #1
   16814:	cmp	sl, #2
   16818:	movne	r3, #0
   1681c:	andeq	r3, r3, #1
   16820:	cmp	r3, #0
   16824:	moveq	r2, fp
   16828:	beq	1686c <__assert_fail@plt+0x54e0>
   1682c:	cmp	r7, fp
   16830:	ldrhi	r2, [sp, #36]	; 0x24
   16834:	movhi	r1, #39	; 0x27
   16838:	strbhi	r1, [r2, fp]
   1683c:	add	r2, fp, #1
   16840:	cmp	r7, r2
   16844:	ldrhi	r1, [sp, #36]	; 0x24
   16848:	movhi	r0, #36	; 0x24
   1684c:	strbhi	r0, [r1, r2]
   16850:	add	r2, fp, #2
   16854:	cmp	r7, r2
   16858:	ldrhi	r1, [sp, #36]	; 0x24
   1685c:	movhi	r0, #39	; 0x27
   16860:	strbhi	r0, [r1, r2]
   16864:	add	r2, fp, #3
   16868:	str	r3, [sp, #44]	; 0x2c
   1686c:	cmp	r7, r2
   16870:	ldrhi	r3, [sp, #36]	; 0x24
   16874:	movhi	r1, #92	; 0x5c
   16878:	strbhi	r1, [r3, r2]
   1687c:	add	fp, r2, #1
   16880:	cmp	r5, #0
   16884:	beq	171f0 <__assert_fail@plt+0x5e64>
   16888:	add	r3, r6, #1
   1688c:	ldr	r1, [sp, #28]
   16890:	cmp	r1, r3
   16894:	bls	17200 <__assert_fail@plt+0x5e74>
   16898:	ldr	r1, [sp, #52]	; 0x34
   1689c:	ldrb	r3, [r1, r3]
   168a0:	sub	r3, r3, #48	; 0x30
   168a4:	uxtb	r3, r3
   168a8:	cmp	r3, #9
   168ac:	bhi	1720c <__assert_fail@plt+0x5e80>
   168b0:	cmp	r7, fp
   168b4:	movhi	r3, #48	; 0x30
   168b8:	ldrhi	r1, [sp, #36]	; 0x24
   168bc:	strbhi	r3, [r1, fp]
   168c0:	add	r3, r2, #2
   168c4:	cmp	r7, r3
   168c8:	movhi	r1, #48	; 0x30
   168cc:	ldrhi	r0, [sp, #36]	; 0x24
   168d0:	strbhi	r1, [r0, r3]
   168d4:	add	fp, r2, #3
   168d8:	ldr	r8, [sp, #32]
   168dc:	mov	r4, #48	; 0x30
   168e0:	b	16bbc <__assert_fail@plt+0x5830>
   168e4:	ldr	r3, [sp, #156]	; 0x9c
   168e8:	tst	r3, #1
   168ec:	bne	16cb0 <__assert_fail@plt+0x5924>
   168f0:	ldr	r5, [sp, #48]	; 0x30
   168f4:	mov	r8, r5
   168f8:	b	16bbc <__assert_fail@plt+0x5830>
   168fc:	cmp	sl, #2
   16900:	beq	16918 <__assert_fail@plt+0x558c>
   16904:	cmp	sl, #5
   16908:	beq	16930 <__assert_fail@plt+0x55a4>
   1690c:	mov	r8, #0
   16910:	mov	r5, r8
   16914:	b	16bbc <__assert_fail@plt+0x5830>
   16918:	ldr	r3, [sp, #32]
   1691c:	cmp	r3, #0
   16920:	bne	17380 <__assert_fail@plt+0x5ff4>
   16924:	mov	r8, r3
   16928:	mov	r5, r3
   1692c:	b	16bbc <__assert_fail@plt+0x5830>
   16930:	ldr	r3, [sp, #156]	; 0x9c
   16934:	tst	r3, #4
   16938:	beq	17218 <__assert_fail@plt+0x5e8c>
   1693c:	add	r3, r6, #2
   16940:	ldr	r2, [sp, #28]
   16944:	cmp	r2, r3
   16948:	bls	17224 <__assert_fail@plt+0x5e98>
   1694c:	ldr	r2, [sp, #52]	; 0x34
   16950:	add	r2, r2, r6
   16954:	ldrb	r2, [r2, #1]
   16958:	cmp	r2, #63	; 0x3f
   1695c:	movne	r8, #0
   16960:	movne	r5, r8
   16964:	bne	16bbc <__assert_fail@plt+0x5830>
   16968:	ldr	r2, [sp, #52]	; 0x34
   1696c:	ldrb	r2, [r2, r3]
   16970:	sub	r1, r2, #33	; 0x21
   16974:	cmp	r1, #29
   16978:	ldrls	pc, [pc, r1, lsl #2]
   1697c:	b	17230 <__assert_fail@plt+0x5ea4>
   16980:	strdeq	r6, [r1], -r8
   16984:	andeq	r7, r1, r0, lsr r2
   16988:	andeq	r7, r1, r0, lsr r2
   1698c:	andeq	r7, r1, r0, lsr r2
   16990:	andeq	r7, r1, r0, lsr r2
   16994:	andeq	r7, r1, r0, lsr r2
   16998:	strdeq	r6, [r1], -r8
   1699c:	strdeq	r6, [r1], -r8
   169a0:	strdeq	r6, [r1], -r8
   169a4:	andeq	r7, r1, r0, lsr r2
   169a8:	andeq	r7, r1, r0, lsr r2
   169ac:	andeq	r7, r1, r0, lsr r2
   169b0:	strdeq	r6, [r1], -r8
   169b4:	andeq	r7, r1, r0, lsr r2
   169b8:	strdeq	r6, [r1], -r8
   169bc:	andeq	r7, r1, r0, lsr r2
   169c0:	andeq	r7, r1, r0, lsr r2
   169c4:	andeq	r7, r1, r0, lsr r2
   169c8:	andeq	r7, r1, r0, lsr r2
   169cc:	andeq	r7, r1, r0, lsr r2
   169d0:	andeq	r7, r1, r0, lsr r2
   169d4:	andeq	r7, r1, r0, lsr r2
   169d8:	andeq	r7, r1, r0, lsr r2
   169dc:	andeq	r7, r1, r0, lsr r2
   169e0:	andeq	r7, r1, r0, lsr r2
   169e4:	andeq	r7, r1, r0, lsr r2
   169e8:	andeq	r7, r1, r0, lsr r2
   169ec:	strdeq	r6, [r1], -r8
   169f0:	strdeq	r6, [r1], -r8
   169f4:	strdeq	r6, [r1], -r8
   169f8:	ldr	r1, [sp, #32]
   169fc:	cmp	r1, #0
   16a00:	bne	17440 <__assert_fail@plt+0x60b4>
   16a04:	cmp	r7, fp
   16a08:	movhi	r1, #63	; 0x3f
   16a0c:	ldrhi	r0, [sp, #36]	; 0x24
   16a10:	strbhi	r1, [r0, fp]
   16a14:	add	r1, fp, #1
   16a18:	cmp	r7, r1
   16a1c:	ldrhi	r0, [sp, #36]	; 0x24
   16a20:	movhi	ip, #34	; 0x22
   16a24:	strbhi	ip, [r0, r1]
   16a28:	add	r1, fp, #2
   16a2c:	cmp	r7, r1
   16a30:	ldrhi	r0, [sp, #36]	; 0x24
   16a34:	movhi	ip, #34	; 0x22
   16a38:	strbhi	ip, [r0, r1]
   16a3c:	add	r1, fp, #3
   16a40:	cmp	r7, r1
   16a44:	movhi	r0, #63	; 0x3f
   16a48:	ldrhi	ip, [sp, #36]	; 0x24
   16a4c:	strbhi	r0, [ip, r1]
   16a50:	add	fp, fp, #4
   16a54:	ldr	r5, [sp, #32]
   16a58:	mov	r8, r5
   16a5c:	mov	r4, r2
   16a60:	mov	r6, r3
   16a64:	b	16bbc <__assert_fail@plt+0x5830>
   16a68:	mov	r3, #102	; 0x66
   16a6c:	b	16b24 <__assert_fail@plt+0x5798>
   16a70:	mov	r3, #118	; 0x76
   16a74:	b	16b24 <__assert_fail@plt+0x5798>
   16a78:	cmp	sl, #2
   16a7c:	beq	16ae8 <__assert_fail@plt+0x575c>
   16a80:	ldr	r3, [sp, #48]	; 0x30
   16a84:	ldr	r2, [sp, #32]
   16a88:	and	r3, r3, r2
   16a8c:	tst	r9, r3
   16a90:	moveq	r3, r4
   16a94:	beq	16b24 <__assert_fail@plt+0x5798>
   16a98:	mov	r8, #0
   16a9c:	mov	r5, r8
   16aa0:	eor	r5, r5, #1
   16aa4:	ldr	r3, [sp, #44]	; 0x2c
   16aa8:	and	r5, r5, r3
   16aac:	tst	r5, #255	; 0xff
   16ab0:	beq	16c90 <__assert_fail@plt+0x5904>
   16ab4:	cmp	r7, fp
   16ab8:	ldrhi	r3, [sp, #36]	; 0x24
   16abc:	movhi	r2, #39	; 0x27
   16ac0:	strbhi	r2, [r3, fp]
   16ac4:	add	r3, fp, #1
   16ac8:	cmp	r7, r3
   16acc:	ldrhi	r2, [sp, #36]	; 0x24
   16ad0:	movhi	r1, #39	; 0x27
   16ad4:	strbhi	r1, [r2, r3]
   16ad8:	add	fp, fp, #2
   16adc:	mov	r3, #0
   16ae0:	str	r3, [sp, #44]	; 0x2c
   16ae4:	b	16c90 <__assert_fail@plt+0x5904>
   16ae8:	ldr	r3, [sp, #32]
   16aec:	cmp	r3, #0
   16af0:	bne	1738c <__assert_fail@plt+0x6000>
   16af4:	mov	r8, r3
   16af8:	mov	r5, r3
   16afc:	b	16aa0 <__assert_fail@plt+0x5714>
   16b00:	mov	r3, #110	; 0x6e
   16b04:	b	16b0c <__assert_fail@plt+0x5780>
   16b08:	mov	r3, #116	; 0x74
   16b0c:	ldr	r2, [sp, #32]
   16b10:	cmp	sl, #2
   16b14:	movne	r2, #0
   16b18:	andeq	r2, r2, #1
   16b1c:	cmp	r2, #0
   16b20:	bne	16b44 <__assert_fail@plt+0x57b8>
   16b24:	ldr	r2, [sp, #48]	; 0x30
   16b28:	cmp	r2, #0
   16b2c:	moveq	r8, r2
   16b30:	moveq	r5, r2
   16b34:	beq	16bbc <__assert_fail@plt+0x5830>
   16b38:	mov	r4, r3
   16b3c:	mov	r8, #0
   16b40:	b	16c14 <__assert_fail@plt+0x5888>
   16b44:	mov	r8, sl
   16b48:	mov	sl, r7
   16b4c:	b	173b8 <__assert_fail@plt+0x602c>
   16b50:	mov	r3, #97	; 0x61
   16b54:	b	16b24 <__assert_fail@plt+0x5798>
   16b58:	ldr	r3, [sp, #28]
   16b5c:	cmn	r3, #1
   16b60:	beq	16b8c <__assert_fail@plt+0x5800>
   16b64:	ldr	r3, [sp, #28]
   16b68:	subs	r3, r3, #1
   16b6c:	movne	r3, #1
   16b70:	cmp	r3, #0
   16b74:	bne	1723c <__assert_fail@plt+0x5eb0>
   16b78:	cmp	r6, #0
   16b7c:	beq	16ba4 <__assert_fail@plt+0x5818>
   16b80:	mov	r8, #0
   16b84:	mov	r5, r8
   16b88:	b	16bbc <__assert_fail@plt+0x5830>
   16b8c:	ldr	r3, [sp, #52]	; 0x34
   16b90:	ldrb	r3, [r3, #1]
   16b94:	adds	r3, r3, #0
   16b98:	movne	r3, #1
   16b9c:	b	16b70 <__assert_fail@plt+0x57e4>
   16ba0:	mov	r8, #0
   16ba4:	ldr	r5, [sp, #32]
   16ba8:	cmp	sl, #2
   16bac:	movne	r5, #0
   16bb0:	andeq	r5, r5, #1
   16bb4:	cmp	r5, #0
   16bb8:	bne	16d6c <__assert_fail@plt+0x59e0>
   16bbc:	ldr	r3, [sp, #68]	; 0x44
   16bc0:	cmp	sl, #2
   16bc4:	orreq	r3, r3, #1
   16bc8:	eor	r3, r3, #1
   16bcc:	ldr	r2, [sp, #32]
   16bd0:	orr	r3, r2, r3
   16bd4:	tst	r3, #255	; 0xff
   16bd8:	beq	16c08 <__assert_fail@plt+0x587c>
   16bdc:	ldr	r3, [sp, #160]	; 0xa0
   16be0:	cmp	r3, #0
   16be4:	beq	16c08 <__assert_fail@plt+0x587c>
   16be8:	lsr	r2, r4, #5
   16bec:	uxtb	r2, r2
   16bf0:	and	r3, r4, #31
   16bf4:	ldr	r1, [sp, #160]	; 0xa0
   16bf8:	ldr	r2, [r1, r2, lsl #2]
   16bfc:	lsr	r3, r2, r3
   16c00:	tst	r3, #1
   16c04:	bne	16c14 <__assert_fail@plt+0x5888>
   16c08:	ldr	r3, [sp, #56]	; 0x38
   16c0c:	cmp	r3, #0
   16c10:	beq	16aa0 <__assert_fail@plt+0x5714>
   16c14:	ldr	r3, [sp, #32]
   16c18:	cmp	r3, #0
   16c1c:	bne	17428 <__assert_fail@plt+0x609c>
   16c20:	ldr	r3, [sp, #44]	; 0x2c
   16c24:	eor	r3, r3, #1
   16c28:	cmp	sl, #2
   16c2c:	movne	r3, #0
   16c30:	andeq	r3, r3, #1
   16c34:	cmp	r3, #0
   16c38:	beq	16c7c <__assert_fail@plt+0x58f0>
   16c3c:	cmp	r7, fp
   16c40:	ldrhi	r2, [sp, #36]	; 0x24
   16c44:	movhi	r1, #39	; 0x27
   16c48:	strbhi	r1, [r2, fp]
   16c4c:	add	r2, fp, #1
   16c50:	cmp	r7, r2
   16c54:	ldrhi	r1, [sp, #36]	; 0x24
   16c58:	movhi	r0, #36	; 0x24
   16c5c:	strbhi	r0, [r1, r2]
   16c60:	add	r2, fp, #2
   16c64:	cmp	r7, r2
   16c68:	ldrhi	r1, [sp, #36]	; 0x24
   16c6c:	movhi	r0, #39	; 0x27
   16c70:	strbhi	r0, [r1, r2]
   16c74:	add	fp, fp, #3
   16c78:	str	r3, [sp, #44]	; 0x2c
   16c7c:	cmp	r7, fp
   16c80:	ldrhi	r3, [sp, #36]	; 0x24
   16c84:	movhi	r2, #92	; 0x5c
   16c88:	strbhi	r2, [r3, fp]
   16c8c:	add	fp, fp, #1
   16c90:	cmp	fp, r7
   16c94:	ldrcc	r3, [sp, #36]	; 0x24
   16c98:	strbcc	r4, [r3, fp]
   16c9c:	add	fp, fp, #1
   16ca0:	ldr	r3, [sp, #40]	; 0x28
   16ca4:	cmp	r8, #0
   16ca8:	moveq	r3, #0
   16cac:	str	r3, [sp, #40]	; 0x28
   16cb0:	add	r6, r6, #1
   16cb4:	ldr	r3, [sp, #28]
   16cb8:	cmn	r3, #1
   16cbc:	beq	17248 <__assert_fail@plt+0x5ebc>
   16cc0:	ldr	r3, [sp, #28]
   16cc4:	subs	r8, r3, r6
   16cc8:	movne	r8, #1
   16ccc:	cmp	r8, #0
   16cd0:	beq	1725c <__assert_fail@plt+0x5ed0>
   16cd4:	ldr	r5, [sp, #48]	; 0x30
   16cd8:	cmp	sl, #2
   16cdc:	moveq	r5, #0
   16ce0:	andne	r5, r5, #1
   16ce4:	ldr	r3, [sp, #60]	; 0x3c
   16ce8:	adds	r9, r3, #0
   16cec:	movne	r9, #1
   16cf0:	ands	r2, r5, r9
   16cf4:	str	r2, [sp, #56]	; 0x38
   16cf8:	beq	165c0 <__assert_fail@plt+0x5234>
   16cfc:	add	r4, r6, r3
   16d00:	ldr	r2, [sp, #28]
   16d04:	cmp	r3, #1
   16d08:	movls	r3, #0
   16d0c:	movhi	r3, #1
   16d10:	cmn	r2, #1
   16d14:	movne	r3, #0
   16d18:	cmp	r3, #0
   16d1c:	beq	16d2c <__assert_fail@plt+0x59a0>
   16d20:	ldr	r0, [sp, #52]	; 0x34
   16d24:	bl	1120c <strlen@plt>
   16d28:	str	r0, [sp, #28]
   16d2c:	ldr	r3, [sp, #28]
   16d30:	cmp	r3, r4
   16d34:	bcc	165b8 <__assert_fail@plt+0x522c>
   16d38:	ldr	r2, [sp, #60]	; 0x3c
   16d3c:	ldr	r1, [sp, #72]	; 0x48
   16d40:	ldr	r3, [sp, #52]	; 0x34
   16d44:	add	r0, r3, r6
   16d48:	bl	110e0 <memcmp@plt>
   16d4c:	cmp	r0, #0
   16d50:	bne	167d8 <__assert_fail@plt+0x544c>
   16d54:	ldr	r3, [sp, #32]
   16d58:	cmp	r3, #0
   16d5c:	beq	165c0 <__assert_fail@plt+0x5234>
   16d60:	mov	r8, sl
   16d64:	mov	sl, r7
   16d68:	b	173b8 <__assert_fail@plt+0x602c>
   16d6c:	mov	r8, sl
   16d70:	mov	sl, r7
   16d74:	b	173b8 <__assert_fail@plt+0x602c>
   16d78:	cmp	sl, #2
   16d7c:	strne	r8, [sp, #80]	; 0x50
   16d80:	movne	r5, #0
   16d84:	bne	16bbc <__assert_fail@plt+0x5830>
   16d88:	ldr	r3, [sp, #32]
   16d8c:	cmp	r3, #0
   16d90:	bne	173a4 <__assert_fail@plt+0x6018>
   16d94:	ldr	r2, [sp, #76]	; 0x4c
   16d98:	adds	r3, r7, #0
   16d9c:	movne	r3, #1
   16da0:	cmp	r2, #0
   16da4:	movne	r3, #0
   16da8:	cmp	r3, #0
   16dac:	movne	r3, #0
   16db0:	bne	16de0 <__assert_fail@plt+0x5a54>
   16db4:	cmp	r7, fp
   16db8:	ldrhi	r3, [sp, #36]	; 0x24
   16dbc:	movhi	r2, #39	; 0x27
   16dc0:	strbhi	r2, [r3, fp]
   16dc4:	add	r3, fp, #1
   16dc8:	cmp	r7, r3
   16dcc:	ldrhi	r2, [sp, #36]	; 0x24
   16dd0:	movhi	r1, #92	; 0x5c
   16dd4:	strbhi	r1, [r2, r3]
   16dd8:	mov	r3, r7
   16ddc:	ldr	r7, [sp, #76]	; 0x4c
   16de0:	add	r2, fp, #2
   16de4:	cmp	r2, r3
   16de8:	ldrcc	r1, [sp, #36]	; 0x24
   16dec:	movcc	r0, #39	; 0x27
   16df0:	strbcc	r0, [r1, r2]
   16df4:	add	fp, fp, #3
   16df8:	ldr	r2, [sp, #32]
   16dfc:	mov	r5, r2
   16e00:	str	r8, [sp, #80]	; 0x50
   16e04:	str	r2, [sp, #44]	; 0x2c
   16e08:	str	r7, [sp, #76]	; 0x4c
   16e0c:	mov	r7, r3
   16e10:	b	16bbc <__assert_fail@plt+0x5830>
   16e14:	ldr	r5, [sp, #84]	; 0x54
   16e18:	cmp	r5, #1
   16e1c:	beq	16e4c <__assert_fail@plt+0x5ac0>
   16e20:	mov	r3, #0
   16e24:	str	r3, [sp, #104]	; 0x68
   16e28:	str	r3, [sp, #108]	; 0x6c
   16e2c:	ldr	r3, [sp, #28]
   16e30:	cmn	r3, #1
   16e34:	beq	16e80 <__assert_fail@plt+0x5af4>
   16e38:	mov	r3, #0
   16e3c:	str	r4, [sp, #88]	; 0x58
   16e40:	str	fp, [sp, #92]	; 0x5c
   16e44:	mov	fp, r3
   16e48:	b	16fa8 <__assert_fail@plt+0x5c1c>
   16e4c:	bl	111e8 <__ctype_b_loc@plt>
   16e50:	ldr	r2, [r0]
   16e54:	lsl	r3, r4, #1
   16e58:	ldrh	r8, [r2, r3]
   16e5c:	lsr	r8, r8, #14
   16e60:	and	r8, r8, #1
   16e64:	mov	r2, r5
   16e68:	eor	r5, r8, #1
   16e6c:	ldr	r3, [sp, #48]	; 0x30
   16e70:	and	r5, r5, r3
   16e74:	ands	r5, r5, #255	; 0xff
   16e78:	beq	16bbc <__assert_fail@plt+0x5830>
   16e7c:	b	17040 <__assert_fail@plt+0x5cb4>
   16e80:	ldr	r0, [sp, #52]	; 0x34
   16e84:	bl	1120c <strlen@plt>
   16e88:	str	r0, [sp, #28]
   16e8c:	b	16e38 <__assert_fail@plt+0x5aac>
   16e90:	mov	r2, fp
   16e94:	mov	r1, r4
   16e98:	ldr	r4, [sp, #88]	; 0x58
   16e9c:	ldr	fp, [sp, #92]	; 0x5c
   16ea0:	ldr	r0, [sp, #28]
   16ea4:	cmp	r0, r5
   16ea8:	bls	17074 <__assert_fail@plt+0x5ce8>
   16eac:	ldrb	r3, [r1]
   16eb0:	cmp	r3, #0
   16eb4:	beq	1707c <__assert_fail@plt+0x5cf0>
   16eb8:	mov	r3, r1
   16ebc:	add	r2, r2, #1
   16ec0:	add	r1, r6, r2
   16ec4:	cmp	r0, r1
   16ec8:	bls	17084 <__assert_fail@plt+0x5cf8>
   16ecc:	ldrb	r1, [r3, #1]!
   16ed0:	cmp	r1, #0
   16ed4:	bne	16ebc <__assert_fail@plt+0x5b30>
   16ed8:	mov	r8, #0
   16edc:	b	17038 <__assert_fail@plt+0x5cac>
   16ee0:	cmp	r4, r5
   16ee4:	beq	16f84 <__assert_fail@plt+0x5bf8>
   16ee8:	ldrb	r3, [r4, #1]!
   16eec:	sub	r3, r3, #91	; 0x5b
   16ef0:	cmp	r3, #33	; 0x21
   16ef4:	ldrls	pc, [pc, r3, lsl #2]
   16ef8:	b	16ee0 <__assert_fail@plt+0x5b54>
   16efc:			; <UNDEFINED> instruction: 0x000173b0
   16f00:			; <UNDEFINED> instruction: 0x000173b0
   16f04:	andeq	r6, r1, r0, ror #29
   16f08:			; <UNDEFINED> instruction: 0x000173b0
   16f0c:	andeq	r6, r1, r0, ror #29
   16f10:			; <UNDEFINED> instruction: 0x000173b0
   16f14:	andeq	r6, r1, r0, ror #29
   16f18:	andeq	r6, r1, r0, ror #29
   16f1c:	andeq	r6, r1, r0, ror #29
   16f20:	andeq	r6, r1, r0, ror #29
   16f24:	andeq	r6, r1, r0, ror #29
   16f28:	andeq	r6, r1, r0, ror #29
   16f2c:	andeq	r6, r1, r0, ror #29
   16f30:	andeq	r6, r1, r0, ror #29
   16f34:	andeq	r6, r1, r0, ror #29
   16f38:	andeq	r6, r1, r0, ror #29
   16f3c:	andeq	r6, r1, r0, ror #29
   16f40:	andeq	r6, r1, r0, ror #29
   16f44:	andeq	r6, r1, r0, ror #29
   16f48:	andeq	r6, r1, r0, ror #29
   16f4c:	andeq	r6, r1, r0, ror #29
   16f50:	andeq	r6, r1, r0, ror #29
   16f54:	andeq	r6, r1, r0, ror #29
   16f58:	andeq	r6, r1, r0, ror #29
   16f5c:	andeq	r6, r1, r0, ror #29
   16f60:	andeq	r6, r1, r0, ror #29
   16f64:	andeq	r6, r1, r0, ror #29
   16f68:	andeq	r6, r1, r0, ror #29
   16f6c:	andeq	r6, r1, r0, ror #29
   16f70:	andeq	r6, r1, r0, ror #29
   16f74:	andeq	r6, r1, r0, ror #29
   16f78:	andeq	r6, r1, r0, ror #29
   16f7c:	andeq	r6, r1, r0, ror #29
   16f80:			; <UNDEFINED> instruction: 0x000173b0
   16f84:	ldr	r0, [sp, #100]	; 0x64
   16f88:	bl	11134 <iswprint@plt>
   16f8c:	cmp	r0, #0
   16f90:	moveq	r8, #0
   16f94:	add	fp, fp, r9
   16f98:	add	r0, sp, #104	; 0x68
   16f9c:	bl	110d4 <mbsinit@plt>
   16fa0:	cmp	r0, #0
   16fa4:	bne	17018 <__assert_fail@plt+0x5c8c>
   16fa8:	add	r5, r6, fp
   16fac:	ldr	r3, [sp, #52]	; 0x34
   16fb0:	add	r4, r3, r5
   16fb4:	add	r3, sp, #104	; 0x68
   16fb8:	ldr	r2, [sp, #28]
   16fbc:	sub	r2, r2, r5
   16fc0:	mov	r1, r4
   16fc4:	add	r0, sp, #100	; 0x64
   16fc8:	bl	1983c <__assert_fail@plt+0x84b0>
   16fcc:	subs	r9, r0, #0
   16fd0:	beq	1708c <__assert_fail@plt+0x5d00>
   16fd4:	cmn	r9, #1
   16fd8:	beq	17028 <__assert_fail@plt+0x5c9c>
   16fdc:	cmn	r9, #2
   16fe0:	beq	16e90 <__assert_fail@plt+0x5b04>
   16fe4:	ldr	r3, [sp, #32]
   16fe8:	cmp	sl, #2
   16fec:	movne	r3, #0
   16ff0:	andeq	r3, r3, #1
   16ff4:	cmp	r3, #0
   16ff8:	beq	16f84 <__assert_fail@plt+0x5bf8>
   16ffc:	cmp	r9, #1
   17000:	bls	16f84 <__assert_fail@plt+0x5bf8>
   17004:	sub	r3, r9, #1
   17008:	add	r5, r3, r5
   1700c:	ldr	r3, [sp, #52]	; 0x34
   17010:	add	r5, r3, r5
   17014:	b	16ee8 <__assert_fail@plt+0x5b5c>
   17018:	ldr	r4, [sp, #88]	; 0x58
   1701c:	mov	r2, fp
   17020:	ldr	fp, [sp, #92]	; 0x5c
   17024:	b	17038 <__assert_fail@plt+0x5cac>
   17028:	ldr	r4, [sp, #88]	; 0x58
   1702c:	mov	r2, fp
   17030:	ldr	fp, [sp, #92]	; 0x5c
   17034:	mov	r8, #0
   17038:	cmp	r2, #1
   1703c:	bls	16e68 <__assert_fail@plt+0x5adc>
   17040:	add	r1, r6, r2
   17044:	ldr	ip, [sp, #64]	; 0x40
   17048:	mov	r5, #0
   1704c:	eor	r3, r8, #1
   17050:	ldr	r2, [sp, #48]	; 0x30
   17054:	and	r3, r3, r2
   17058:	uxtb	r3, r3
   1705c:	ldr	r9, [sp, #32]
   17060:	ldr	lr, [sp, #44]	; 0x2c
   17064:	ldr	r2, [sp, #56]	; 0x38
   17068:	str	r8, [sp, #56]	; 0x38
   1706c:	ldr	r0, [sp, #36]	; 0x24
   17070:	b	1710c <__assert_fail@plt+0x5d80>
   17074:	mov	r8, #0
   17078:	b	17038 <__assert_fail@plt+0x5cac>
   1707c:	mov	r8, #0
   17080:	b	17038 <__assert_fail@plt+0x5cac>
   17084:	mov	r8, #0
   17088:	b	17038 <__assert_fail@plt+0x5cac>
   1708c:	ldr	r4, [sp, #88]	; 0x58
   17090:	mov	r2, fp
   17094:	ldr	fp, [sp, #92]	; 0x5c
   17098:	b	17038 <__assert_fail@plt+0x5cac>
   1709c:	cmp	r2, #0
   170a0:	beq	170b4 <__assert_fail@plt+0x5d28>
   170a4:	cmp	r7, fp
   170a8:	movhi	r2, #92	; 0x5c
   170ac:	strbhi	r2, [r0, fp]
   170b0:	add	fp, fp, #1
   170b4:	add	r8, r6, #1
   170b8:	cmp	r1, r8
   170bc:	bls	171c4 <__assert_fail@plt+0x5e38>
   170c0:	eor	r2, r5, #1
   170c4:	and	r2, r2, lr
   170c8:	ands	r2, r2, #255	; 0xff
   170cc:	beq	171e0 <__assert_fail@plt+0x5e54>
   170d0:	cmp	r7, fp
   170d4:	movhi	r2, #39	; 0x27
   170d8:	strbhi	r2, [r0, fp]
   170dc:	add	r2, fp, #1
   170e0:	cmp	r7, r2
   170e4:	movhi	lr, #39	; 0x27
   170e8:	strbhi	lr, [r0, r2]
   170ec:	add	fp, fp, #2
   170f0:	mov	r6, r8
   170f4:	mov	r2, r3
   170f8:	mov	lr, r3
   170fc:	cmp	r7, fp
   17100:	strbhi	r4, [r0, fp]
   17104:	add	fp, fp, #1
   17108:	ldrb	r4, [ip, #1]!
   1710c:	cmp	r3, #0
   17110:	beq	1709c <__assert_fail@plt+0x5d10>
   17114:	cmp	r9, #0
   17118:	bne	1741c <__assert_fail@plt+0x6090>
   1711c:	eor	r5, lr, #1
   17120:	cmp	sl, #2
   17124:	movne	r5, #0
   17128:	andeq	r5, r5, #1
   1712c:	cmp	r5, #0
   17130:	beq	17168 <__assert_fail@plt+0x5ddc>
   17134:	cmp	r7, fp
   17138:	movhi	lr, #39	; 0x27
   1713c:	strbhi	lr, [r0, fp]
   17140:	add	lr, fp, #1
   17144:	cmp	r7, lr
   17148:	movhi	r8, #36	; 0x24
   1714c:	strbhi	r8, [r0, lr]
   17150:	add	lr, fp, #2
   17154:	cmp	r7, lr
   17158:	movhi	r8, #39	; 0x27
   1715c:	strbhi	r8, [r0, lr]
   17160:	add	fp, fp, #3
   17164:	mov	lr, r5
   17168:	cmp	r7, fp
   1716c:	movhi	r5, #92	; 0x5c
   17170:	strbhi	r5, [r0, fp]
   17174:	add	r5, fp, #1
   17178:	cmp	r7, r5
   1717c:	lsrhi	r8, r4, #6
   17180:	addhi	r8, r8, #48	; 0x30
   17184:	strbhi	r8, [r0, r5]
   17188:	add	r8, fp, #2
   1718c:	cmp	r7, r8
   17190:	lsrhi	r5, r4, #3
   17194:	andhi	r5, r5, #7
   17198:	addhi	r5, r5, #48	; 0x30
   1719c:	strbhi	r5, [r0, r8]
   171a0:	add	fp, fp, #3
   171a4:	and	r4, r4, #7
   171a8:	add	r4, r4, #48	; 0x30
   171ac:	add	r5, r6, #1
   171b0:	cmp	r1, r5
   171b4:	bls	171d0 <__assert_fail@plt+0x5e44>
   171b8:	mov	r6, r5
   171bc:	mov	r5, r3
   171c0:	b	170fc <__assert_fail@plt+0x5d70>
   171c4:	str	lr, [sp, #44]	; 0x2c
   171c8:	ldr	r8, [sp, #56]	; 0x38
   171cc:	b	16aa0 <__assert_fail@plt+0x5714>
   171d0:	str	lr, [sp, #44]	; 0x2c
   171d4:	ldr	r8, [sp, #56]	; 0x38
   171d8:	mov	r5, r3
   171dc:	b	16aa0 <__assert_fail@plt+0x5714>
   171e0:	mov	r6, r8
   171e4:	b	170fc <__assert_fail@plt+0x5d70>
   171e8:	mov	r5, #0
   171ec:	b	16bbc <__assert_fail@plt+0x5830>
   171f0:	mov	r8, r5
   171f4:	ldr	r5, [sp, #48]	; 0x30
   171f8:	mov	r4, #48	; 0x30
   171fc:	b	16bbc <__assert_fail@plt+0x5830>
   17200:	ldr	r8, [sp, #32]
   17204:	mov	r4, #48	; 0x30
   17208:	b	16bbc <__assert_fail@plt+0x5830>
   1720c:	ldr	r8, [sp, #32]
   17210:	mov	r4, #48	; 0x30
   17214:	b	16bbc <__assert_fail@plt+0x5830>
   17218:	mov	r8, #0
   1721c:	mov	r5, r8
   17220:	b	16bbc <__assert_fail@plt+0x5830>
   17224:	mov	r8, #0
   17228:	mov	r5, r8
   1722c:	b	16bbc <__assert_fail@plt+0x5830>
   17230:	mov	r8, #0
   17234:	mov	r5, r8
   17238:	b	16bbc <__assert_fail@plt+0x5830>
   1723c:	mov	r8, #0
   17240:	mov	r5, r8
   17244:	b	16bbc <__assert_fail@plt+0x5830>
   17248:	ldr	r3, [sp, #52]	; 0x34
   1724c:	ldrb	r8, [r3, r6]
   17250:	adds	r8, r8, #0
   17254:	movne	r8, #1
   17258:	b	16ccc <__assert_fail@plt+0x5940>
   1725c:	cmp	sl, #2
   17260:	movne	r3, #0
   17264:	moveq	r3, #1
   17268:	ldr	r1, [sp, #32]
   1726c:	mov	r2, r1
   17270:	and	r2, r2, r3
   17274:	cmp	fp, #0
   17278:	movne	r2, #0
   1727c:	andeq	r2, r2, #1
   17280:	cmp	r2, #0
   17284:	bne	17434 <__assert_fail@plt+0x60a8>
   17288:	eor	r2, r1, #1
   1728c:	and	r3, r3, r2
   17290:	ldr	r1, [sp, #80]	; 0x50
   17294:	tst	r1, r3
   17298:	beq	17310 <__assert_fail@plt+0x5f84>
   1729c:	ldr	r3, [sp, #40]	; 0x28
   172a0:	cmp	r3, #0
   172a4:	bne	172cc <__assert_fail@plt+0x5f40>
   172a8:	ldr	r1, [sp, #76]	; 0x4c
   172ac:	clz	r3, r7
   172b0:	lsr	r3, r3, #5
   172b4:	cmp	r1, #0
   172b8:	moveq	r3, #0
   172bc:	cmp	r3, #0
   172c0:	beq	17310 <__assert_fail@plt+0x5f84>
   172c4:	ldr	r7, [sp, #76]	; 0x4c
   172c8:	b	16360 <__assert_fail@plt+0x4fd4>
   172cc:	ldr	r3, [sp, #168]	; 0xa8
   172d0:	str	r3, [sp, #16]
   172d4:	ldr	r3, [sp, #164]	; 0xa4
   172d8:	str	r3, [sp, #12]
   172dc:	ldr	r3, [sp, #160]	; 0xa0
   172e0:	str	r3, [sp, #8]
   172e4:	ldr	r3, [sp, #156]	; 0x9c
   172e8:	str	r3, [sp, #4]
   172ec:	mov	r3, #5
   172f0:	str	r3, [sp]
   172f4:	ldr	r3, [sp, #28]
   172f8:	ldr	r2, [sp, #52]	; 0x34
   172fc:	ldr	r1, [sp, #76]	; 0x4c
   17300:	ldr	r0, [sp, #36]	; 0x24
   17304:	bl	16300 <__assert_fail@plt+0x4f74>
   17308:	mov	fp, r0
   1730c:	b	17410 <__assert_fail@plt+0x6084>
   17310:	mov	sl, r7
   17314:	ldr	r3, [sp, #72]	; 0x48
   17318:	cmp	r3, #0
   1731c:	moveq	r2, #0
   17320:	andne	r2, r2, #1
   17324:	cmp	r2, #0
   17328:	beq	17358 <__assert_fail@plt+0x5fcc>
   1732c:	mov	r2, r3
   17330:	ldrb	r3, [r3]
   17334:	cmp	r3, #0
   17338:	beq	17358 <__assert_fail@plt+0x5fcc>
   1733c:	ldr	r1, [sp, #36]	; 0x24
   17340:	cmp	sl, fp
   17344:	strbhi	r3, [r1, fp]
   17348:	add	fp, fp, #1
   1734c:	ldrb	r3, [r2, #1]!
   17350:	cmp	r3, #0
   17354:	bne	17340 <__assert_fail@plt+0x5fb4>
   17358:	cmp	sl, fp
   1735c:	movhi	r3, #0
   17360:	ldrhi	r2, [sp, #36]	; 0x24
   17364:	strbhi	r3, [r2, fp]
   17368:	b	17410 <__assert_fail@plt+0x6084>
   1736c:	mov	r8, sl
   17370:	mov	sl, r7
   17374:	ldr	r3, [sp, #32]
   17378:	str	r3, [sp, #48]	; 0x30
   1737c:	b	173b8 <__assert_fail@plt+0x602c>
   17380:	mov	r8, sl
   17384:	mov	sl, r7
   17388:	b	173b8 <__assert_fail@plt+0x602c>
   1738c:	mov	r8, sl
   17390:	mov	sl, r7
   17394:	b	173b8 <__assert_fail@plt+0x602c>
   17398:	andeq	fp, r1, ip, asr #5
   1739c:	ldrdeq	fp, [r1], -ip
   173a0:	ldrdeq	fp, [r1], -r0
   173a4:	mov	r8, sl
   173a8:	mov	sl, r7
   173ac:	b	173b8 <__assert_fail@plt+0x602c>
   173b0:	mov	r8, sl
   173b4:	mov	sl, r7
   173b8:	ldr	r3, [sp, #48]	; 0x30
   173bc:	cmp	r8, #2
   173c0:	movne	r3, #0
   173c4:	andeq	r3, r3, #1
   173c8:	cmp	r3, #0
   173cc:	movne	r8, #4
   173d0:	ldr	r3, [sp, #168]	; 0xa8
   173d4:	str	r3, [sp, #16]
   173d8:	ldr	r3, [sp, #164]	; 0xa4
   173dc:	str	r3, [sp, #12]
   173e0:	mov	r3, #0
   173e4:	str	r3, [sp, #8]
   173e8:	ldr	r3, [sp, #156]	; 0x9c
   173ec:	bic	r3, r3, #2
   173f0:	str	r3, [sp, #4]
   173f4:	str	r8, [sp]
   173f8:	ldr	r3, [sp, #28]
   173fc:	ldr	r2, [sp, #52]	; 0x34
   17400:	mov	r1, sl
   17404:	ldr	r0, [sp, #36]	; 0x24
   17408:	bl	16300 <__assert_fail@plt+0x4f74>
   1740c:	mov	fp, r0
   17410:	mov	r0, fp
   17414:	add	sp, sp, #116	; 0x74
   17418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1741c:	mov	r8, sl
   17420:	mov	sl, r7
   17424:	b	173b8 <__assert_fail@plt+0x602c>
   17428:	mov	r8, sl
   1742c:	mov	sl, r7
   17430:	b	173b8 <__assert_fail@plt+0x602c>
   17434:	mov	r8, sl
   17438:	mov	sl, r7
   1743c:	b	173b8 <__assert_fail@plt+0x602c>
   17440:	mov	r8, sl
   17444:	mov	sl, r7
   17448:	b	173d0 <__assert_fail@plt+0x6044>
   1744c:	mov	r3, #1
   17450:	str	r3, [sp, #32]
   17454:	str	r3, [sp, #48]	; 0x30
   17458:	str	r3, [sp, #60]	; 0x3c
   1745c:	ldr	r3, [pc, #-196]	; 173a0 <__assert_fail@plt+0x6014>
   17460:	str	r3, [sp, #72]	; 0x48
   17464:	mov	fp, #0
   17468:	mov	sl, #5
   1746c:	b	163bc <__assert_fail@plt+0x5030>
   17470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17474:	sub	sp, sp, #52	; 0x34
   17478:	mov	r5, r0
   1747c:	str	r1, [sp, #24]
   17480:	str	r2, [sp, #28]
   17484:	mov	r4, r3
   17488:	bl	1123c <__errno_location@plt>
   1748c:	str	r0, [sp, #32]
   17490:	ldr	r3, [r0]
   17494:	str	r3, [sp, #36]	; 0x24
   17498:	ldr	r3, [pc, #396]	; 1762c <__assert_fail@plt+0x62a0>
   1749c:	ldr	r6, [r3]
   174a0:	cmn	r5, #-2147483647	; 0x80000001
   174a4:	movne	r3, #0
   174a8:	moveq	r3, #1
   174ac:	orrs	r3, r3, r5, lsr #31
   174b0:	bne	175f0 <__assert_fail@plt+0x6264>
   174b4:	ldr	r3, [pc, #368]	; 1762c <__assert_fail@plt+0x62a0>
   174b8:	ldr	r2, [r3, #4]
   174bc:	cmp	r5, r2
   174c0:	blt	17528 <__assert_fail@plt+0x619c>
   174c4:	str	r2, [sp, #44]	; 0x2c
   174c8:	add	r3, r3, #8
   174cc:	cmp	r6, r3
   174d0:	beq	175f4 <__assert_fail@plt+0x6268>
   174d4:	sub	r2, r5, r2
   174d8:	mov	r3, #8
   174dc:	str	r3, [sp]
   174e0:	mvn	r3, #-2147483648	; 0x80000000
   174e4:	add	r2, r2, #1
   174e8:	add	r1, sp, #44	; 0x2c
   174ec:	mov	r0, r6
   174f0:	bl	187a8 <__assert_fail@plt+0x741c>
   174f4:	mov	r6, r0
   174f8:	ldr	r3, [pc, #300]	; 1762c <__assert_fail@plt+0x62a0>
   174fc:	str	r0, [r3]
   17500:	ldr	r7, [pc, #292]	; 1762c <__assert_fail@plt+0x62a0>
   17504:	ldr	r0, [r7, #4]
   17508:	ldr	r2, [sp, #44]	; 0x2c
   1750c:	sub	r2, r2, r0
   17510:	lsl	r2, r2, #3
   17514:	mov	r1, #0
   17518:	add	r0, r6, r0, lsl #3
   1751c:	bl	11254 <memset@plt>
   17520:	ldr	r3, [sp, #44]	; 0x2c
   17524:	str	r3, [r7, #4]
   17528:	add	fp, r6, r5, lsl #3
   1752c:	ldr	r8, [r6, r5, lsl #3]
   17530:	ldr	r7, [fp, #4]
   17534:	ldr	r9, [r4, #4]
   17538:	orr	r9, r9, #1
   1753c:	add	sl, r4, #8
   17540:	ldr	r3, [r4, #44]	; 0x2c
   17544:	str	r3, [sp, #16]
   17548:	ldr	r3, [r4, #40]	; 0x28
   1754c:	str	r3, [sp, #12]
   17550:	str	sl, [sp, #8]
   17554:	str	r9, [sp, #4]
   17558:	ldr	r3, [r4]
   1755c:	str	r3, [sp]
   17560:	ldr	r3, [sp, #28]
   17564:	ldr	r2, [sp, #24]
   17568:	mov	r1, r8
   1756c:	mov	r0, r7
   17570:	bl	16300 <__assert_fail@plt+0x4f74>
   17574:	cmp	r8, r0
   17578:	bhi	175d8 <__assert_fail@plt+0x624c>
   1757c:	add	r8, r0, #1
   17580:	str	r8, [r6, r5, lsl #3]
   17584:	ldr	r3, [pc, #164]	; 17630 <__assert_fail@plt+0x62a4>
   17588:	cmp	r7, r3
   1758c:	beq	17598 <__assert_fail@plt+0x620c>
   17590:	mov	r0, r7
   17594:	bl	12d5c <__assert_fail@plt+0x19d0>
   17598:	mov	r0, r8
   1759c:	bl	18624 <__assert_fail@plt+0x7298>
   175a0:	mov	r7, r0
   175a4:	str	r0, [fp, #4]
   175a8:	ldr	r3, [r4, #44]	; 0x2c
   175ac:	str	r3, [sp, #16]
   175b0:	ldr	r3, [r4, #40]	; 0x28
   175b4:	str	r3, [sp, #12]
   175b8:	str	sl, [sp, #8]
   175bc:	str	r9, [sp, #4]
   175c0:	ldr	r3, [r4]
   175c4:	str	r3, [sp]
   175c8:	ldr	r3, [sp, #28]
   175cc:	ldr	r2, [sp, #24]
   175d0:	mov	r1, r8
   175d4:	bl	16300 <__assert_fail@plt+0x4f74>
   175d8:	ldr	r3, [sp, #32]
   175dc:	ldr	r2, [sp, #36]	; 0x24
   175e0:	str	r2, [r3]
   175e4:	mov	r0, r7
   175e8:	add	sp, sp, #52	; 0x34
   175ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175f0:	bl	11344 <abort@plt>
   175f4:	sub	r2, r5, r2
   175f8:	mov	r3, #8
   175fc:	str	r3, [sp]
   17600:	mvn	r3, #-2147483648	; 0x80000000
   17604:	add	r2, r2, #1
   17608:	add	r1, sp, #44	; 0x2c
   1760c:	mov	r0, #0
   17610:	bl	187a8 <__assert_fail@plt+0x741c>
   17614:	mov	r6, r0
   17618:	ldr	r3, [pc, #12]	; 1762c <__assert_fail@plt+0x62a0>
   1761c:	str	r0, [r3], #8
   17620:	ldm	r3, {r0, r1}
   17624:	stm	r6, {r0, r1}
   17628:	b	17500 <__assert_fail@plt+0x6174>
   1762c:	andeq	ip, r2, r4, asr #2
   17630:	andeq	ip, r2, ip, asr #3
   17634:	push	{r4, r5, r6, lr}
   17638:	mov	r4, r0
   1763c:	bl	1123c <__errno_location@plt>
   17640:	mov	r5, r0
   17644:	ldr	r6, [r0]
   17648:	cmp	r4, #0
   1764c:	ldr	r3, [pc, #20]	; 17668 <__assert_fail@plt+0x62dc>
   17650:	moveq	r4, r3
   17654:	mov	r1, #48	; 0x30
   17658:	mov	r0, r4
   1765c:	bl	18b10 <__assert_fail@plt+0x7784>
   17660:	str	r6, [r5]
   17664:	pop	{r4, r5, r6, pc}
   17668:	andeq	ip, r2, ip, asr #5
   1766c:	subs	r3, r0, #0
   17670:	ldr	r2, [pc, #8]	; 17680 <__assert_fail@plt+0x62f4>
   17674:	moveq	r3, r2
   17678:	ldr	r0, [r3]
   1767c:	bx	lr
   17680:	andeq	ip, r2, ip, asr #5
   17684:	subs	r3, r0, #0
   17688:	ldr	r2, [pc, #8]	; 17698 <__assert_fail@plt+0x630c>
   1768c:	moveq	r3, r2
   17690:	str	r1, [r3]
   17694:	bx	lr
   17698:	andeq	ip, r2, ip, asr #5
   1769c:	push	{lr}		; (str lr, [sp, #-4]!)
   176a0:	subs	r3, r0, #0
   176a4:	ldr	r0, [pc, #44]	; 176d8 <__assert_fail@plt+0x634c>
   176a8:	moveq	r3, r0
   176ac:	add	r3, r3, #8
   176b0:	lsr	lr, r1, #5
   176b4:	and	r1, r1, #31
   176b8:	ldr	ip, [r3, lr, lsl #2]
   176bc:	lsr	r0, ip, r1
   176c0:	eor	r2, r2, r0
   176c4:	and	r2, r2, #1
   176c8:	eor	r1, ip, r2, lsl r1
   176cc:	str	r1, [r3, lr, lsl #2]
   176d0:	and	r0, r0, #1
   176d4:	pop	{pc}		; (ldr pc, [sp], #4)
   176d8:	andeq	ip, r2, ip, asr #5
   176dc:	subs	r3, r0, #0
   176e0:	ldr	r2, [pc, #12]	; 176f4 <__assert_fail@plt+0x6368>
   176e4:	moveq	r3, r2
   176e8:	ldr	r0, [r3, #4]
   176ec:	str	r1, [r3, #4]
   176f0:	bx	lr
   176f4:	andeq	ip, r2, ip, asr #5
   176f8:	subs	r3, r0, #0
   176fc:	ldr	r0, [pc, #40]	; 1772c <__assert_fail@plt+0x63a0>
   17700:	moveq	r3, r0
   17704:	mov	r0, #10
   17708:	str	r0, [r3]
   1770c:	cmp	r2, #0
   17710:	cmpne	r1, #0
   17714:	beq	17724 <__assert_fail@plt+0x6398>
   17718:	str	r1, [r3, #40]	; 0x28
   1771c:	str	r2, [r3, #44]	; 0x2c
   17720:	bx	lr
   17724:	push	{r4, lr}
   17728:	bl	11344 <abort@plt>
   1772c:	andeq	ip, r2, ip, asr #5
   17730:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17734:	sub	sp, sp, #24
   17738:	mov	r7, r0
   1773c:	mov	r8, r1
   17740:	mov	r9, r2
   17744:	mov	sl, r3
   17748:	ldr	r4, [sp, #56]	; 0x38
   1774c:	cmp	r4, #0
   17750:	ldr	r3, [pc, #84]	; 177ac <__assert_fail@plt+0x6420>
   17754:	moveq	r4, r3
   17758:	bl	1123c <__errno_location@plt>
   1775c:	mov	r5, r0
   17760:	ldr	r6, [r0]
   17764:	ldr	r3, [r4, #44]	; 0x2c
   17768:	str	r3, [sp, #16]
   1776c:	ldr	r3, [r4, #40]	; 0x28
   17770:	str	r3, [sp, #12]
   17774:	add	r3, r4, #8
   17778:	str	r3, [sp, #8]
   1777c:	ldr	r3, [r4, #4]
   17780:	str	r3, [sp, #4]
   17784:	ldr	r3, [r4]
   17788:	str	r3, [sp]
   1778c:	mov	r3, sl
   17790:	mov	r2, r9
   17794:	mov	r1, r8
   17798:	mov	r0, r7
   1779c:	bl	16300 <__assert_fail@plt+0x4f74>
   177a0:	str	r6, [r5]
   177a4:	add	sp, sp, #24
   177a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   177ac:	andeq	ip, r2, ip, asr #5
   177b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177b4:	sub	sp, sp, #44	; 0x2c
   177b8:	str	r0, [sp, #28]
   177bc:	str	r1, [sp, #32]
   177c0:	mov	r6, r2
   177c4:	subs	r4, r3, #0
   177c8:	ldr	r3, [pc, #172]	; 1787c <__assert_fail@plt+0x64f0>
   177cc:	moveq	r4, r3
   177d0:	bl	1123c <__errno_location@plt>
   177d4:	mov	r7, r0
   177d8:	ldr	fp, [r0]
   177dc:	ldr	r5, [r4, #4]
   177e0:	cmp	r6, #0
   177e4:	orreq	r5, r5, #1
   177e8:	add	r9, r4, #8
   177ec:	ldr	r3, [r4, #44]	; 0x2c
   177f0:	str	r3, [sp, #16]
   177f4:	ldr	r3, [r4, #40]	; 0x28
   177f8:	str	r3, [sp, #12]
   177fc:	str	r9, [sp, #8]
   17800:	str	r5, [sp, #4]
   17804:	ldr	r3, [r4]
   17808:	str	r3, [sp]
   1780c:	ldr	r3, [sp, #32]
   17810:	ldr	r2, [sp, #28]
   17814:	mov	r1, #0
   17818:	mov	r0, r1
   1781c:	bl	16300 <__assert_fail@plt+0x4f74>
   17820:	mov	sl, r0
   17824:	add	r8, r0, #1
   17828:	mov	r0, r8
   1782c:	bl	18624 <__assert_fail@plt+0x7298>
   17830:	str	r0, [sp, #36]	; 0x24
   17834:	ldr	r3, [r4, #44]	; 0x2c
   17838:	str	r3, [sp, #16]
   1783c:	ldr	r3, [r4, #40]	; 0x28
   17840:	str	r3, [sp, #12]
   17844:	str	r9, [sp, #8]
   17848:	str	r5, [sp, #4]
   1784c:	ldr	r3, [r4]
   17850:	str	r3, [sp]
   17854:	ldr	r3, [sp, #32]
   17858:	ldr	r2, [sp, #28]
   1785c:	mov	r1, r8
   17860:	bl	16300 <__assert_fail@plt+0x4f74>
   17864:	str	fp, [r7]
   17868:	cmp	r6, #0
   1786c:	strne	sl, [r6]
   17870:	ldr	r0, [sp, #36]	; 0x24
   17874:	add	sp, sp, #44	; 0x2c
   17878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1787c:	andeq	ip, r2, ip, asr #5
   17880:	push	{r4, lr}
   17884:	mov	r3, r2
   17888:	mov	r2, #0
   1788c:	bl	177b0 <__assert_fail@plt+0x6424>
   17890:	pop	{r4, pc}
   17894:	push	{r4, r5, r6, r7, r8, lr}
   17898:	ldr	r3, [pc, #140]	; 1792c <__assert_fail@plt+0x65a0>
   1789c:	ldr	r7, [r3]
   178a0:	ldr	r3, [r3, #4]
   178a4:	cmp	r3, #1
   178a8:	ble	178d4 <__assert_fail@plt+0x6548>
   178ac:	mov	r5, r7
   178b0:	mov	r4, #1
   178b4:	ldr	r6, [pc, #112]	; 1792c <__assert_fail@plt+0x65a0>
   178b8:	ldr	r0, [r5, #12]
   178bc:	bl	12d5c <__assert_fail@plt+0x19d0>
   178c0:	add	r4, r4, #1
   178c4:	add	r5, r5, #8
   178c8:	ldr	r3, [r6, #4]
   178cc:	cmp	r3, r4
   178d0:	bgt	178b8 <__assert_fail@plt+0x652c>
   178d4:	ldr	r0, [r7, #4]
   178d8:	ldr	r3, [pc, #80]	; 17930 <__assert_fail@plt+0x65a4>
   178dc:	cmp	r0, r3
   178e0:	beq	178fc <__assert_fail@plt+0x6570>
   178e4:	bl	12d5c <__assert_fail@plt+0x19d0>
   178e8:	ldr	r3, [pc, #60]	; 1792c <__assert_fail@plt+0x65a0>
   178ec:	mov	r2, #256	; 0x100
   178f0:	str	r2, [r3, #8]
   178f4:	ldr	r2, [pc, #52]	; 17930 <__assert_fail@plt+0x65a4>
   178f8:	str	r2, [r3, #12]
   178fc:	ldr	r3, [pc, #48]	; 17934 <__assert_fail@plt+0x65a8>
   17900:	cmp	r7, r3
   17904:	beq	1791c <__assert_fail@plt+0x6590>
   17908:	mov	r0, r7
   1790c:	bl	12d5c <__assert_fail@plt+0x19d0>
   17910:	ldr	r3, [pc, #20]	; 1792c <__assert_fail@plt+0x65a0>
   17914:	add	r2, r3, #8
   17918:	str	r2, [r3]
   1791c:	mov	r2, #1
   17920:	ldr	r3, [pc, #4]	; 1792c <__assert_fail@plt+0x65a0>
   17924:	str	r2, [r3, #4]
   17928:	pop	{r4, r5, r6, r7, r8, pc}
   1792c:	andeq	ip, r2, r4, asr #2
   17930:	andeq	ip, r2, ip, asr #3
   17934:	andeq	ip, r2, ip, asr #2
   17938:	push	{r4, lr}
   1793c:	ldr	r3, [pc, #8]	; 1794c <__assert_fail@plt+0x65c0>
   17940:	mvn	r2, #0
   17944:	bl	17470 <__assert_fail@plt+0x60e4>
   17948:	pop	{r4, pc}
   1794c:	andeq	ip, r2, ip, asr #5
   17950:	push	{r4, lr}
   17954:	ldr	r3, [pc, #4]	; 17960 <__assert_fail@plt+0x65d4>
   17958:	bl	17470 <__assert_fail@plt+0x60e4>
   1795c:	pop	{r4, pc}
   17960:	andeq	ip, r2, ip, asr #5
   17964:	push	{r4, lr}
   17968:	mov	r1, r0
   1796c:	mov	r0, #0
   17970:	bl	17938 <__assert_fail@plt+0x65ac>
   17974:	pop	{r4, pc}
   17978:	push	{r4, lr}
   1797c:	mov	r2, r1
   17980:	mov	r1, r0
   17984:	mov	r0, #0
   17988:	bl	17950 <__assert_fail@plt+0x65c4>
   1798c:	pop	{r4, pc}
   17990:	push	{r4, r5, lr}
   17994:	sub	sp, sp, #52	; 0x34
   17998:	mov	r4, r0
   1799c:	mov	r5, r2
   179a0:	mov	r0, sp
   179a4:	bl	16198 <__assert_fail@plt+0x4e0c>
   179a8:	mov	r3, sp
   179ac:	mvn	r2, #0
   179b0:	mov	r1, r5
   179b4:	mov	r0, r4
   179b8:	bl	17470 <__assert_fail@plt+0x60e4>
   179bc:	add	sp, sp, #52	; 0x34
   179c0:	pop	{r4, r5, pc}
   179c4:	push	{r4, r5, r6, lr}
   179c8:	sub	sp, sp, #48	; 0x30
   179cc:	mov	r4, r0
   179d0:	mov	r5, r2
   179d4:	mov	r6, r3
   179d8:	mov	r0, sp
   179dc:	bl	16198 <__assert_fail@plt+0x4e0c>
   179e0:	mov	r3, sp
   179e4:	mov	r2, r6
   179e8:	mov	r1, r5
   179ec:	mov	r0, r4
   179f0:	bl	17470 <__assert_fail@plt+0x60e4>
   179f4:	add	sp, sp, #48	; 0x30
   179f8:	pop	{r4, r5, r6, pc}
   179fc:	push	{r4, lr}
   17a00:	mov	r2, r1
   17a04:	mov	r1, r0
   17a08:	mov	r0, #0
   17a0c:	bl	17990 <__assert_fail@plt+0x6604>
   17a10:	pop	{r4, pc}
   17a14:	push	{r4, lr}
   17a18:	mov	r3, r2
   17a1c:	mov	r2, r1
   17a20:	mov	r1, r0
   17a24:	mov	r0, #0
   17a28:	bl	179c4 <__assert_fail@plt+0x6638>
   17a2c:	pop	{r4, pc}
   17a30:	push	{r4, r5, r6, lr}
   17a34:	sub	sp, sp, #48	; 0x30
   17a38:	mov	r4, r0
   17a3c:	mov	r5, r1
   17a40:	mov	r6, r2
   17a44:	mov	ip, sp
   17a48:	ldr	lr, [pc, #64]	; 17a90 <__assert_fail@plt+0x6704>
   17a4c:	ldm	lr!, {r0, r1, r2, r3}
   17a50:	stmia	ip!, {r0, r1, r2, r3}
   17a54:	ldm	lr!, {r0, r1, r2, r3}
   17a58:	stmia	ip!, {r0, r1, r2, r3}
   17a5c:	ldm	lr, {r0, r1, r2, r3}
   17a60:	stm	ip, {r0, r1, r2, r3}
   17a64:	mov	r2, #1
   17a68:	mov	r1, r6
   17a6c:	mov	r0, sp
   17a70:	bl	1769c <__assert_fail@plt+0x6310>
   17a74:	mov	r3, sp
   17a78:	mov	r2, r5
   17a7c:	mov	r1, r4
   17a80:	mov	r0, #0
   17a84:	bl	17470 <__assert_fail@plt+0x60e4>
   17a88:	add	sp, sp, #48	; 0x30
   17a8c:	pop	{r4, r5, r6, pc}
   17a90:	andeq	ip, r2, ip, asr #5
   17a94:	push	{r4, lr}
   17a98:	mov	r2, r1
   17a9c:	mvn	r1, #0
   17aa0:	bl	17a30 <__assert_fail@plt+0x66a4>
   17aa4:	pop	{r4, pc}
   17aa8:	push	{r4, lr}
   17aac:	mov	r1, #58	; 0x3a
   17ab0:	bl	17a94 <__assert_fail@plt+0x6708>
   17ab4:	pop	{r4, pc}
   17ab8:	push	{r4, lr}
   17abc:	mov	r2, #58	; 0x3a
   17ac0:	bl	17a30 <__assert_fail@plt+0x66a4>
   17ac4:	pop	{r4, pc}
   17ac8:	push	{r4, r5, lr}
   17acc:	sub	sp, sp, #100	; 0x64
   17ad0:	mov	r4, r0
   17ad4:	mov	r5, r2
   17ad8:	mov	r0, sp
   17adc:	bl	16198 <__assert_fail@plt+0x4e0c>
   17ae0:	add	lr, sp, #48	; 0x30
   17ae4:	mov	ip, sp
   17ae8:	ldm	ip!, {r0, r1, r2, r3}
   17aec:	stmia	lr!, {r0, r1, r2, r3}
   17af0:	ldm	ip!, {r0, r1, r2, r3}
   17af4:	stmia	lr!, {r0, r1, r2, r3}
   17af8:	ldm	ip, {r0, r1, r2, r3}
   17afc:	stm	lr, {r0, r1, r2, r3}
   17b00:	mov	r2, #1
   17b04:	mov	r1, #58	; 0x3a
   17b08:	add	r0, sp, #48	; 0x30
   17b0c:	bl	1769c <__assert_fail@plt+0x6310>
   17b10:	add	r3, sp, #48	; 0x30
   17b14:	mvn	r2, #0
   17b18:	mov	r1, r5
   17b1c:	mov	r0, r4
   17b20:	bl	17470 <__assert_fail@plt+0x60e4>
   17b24:	add	sp, sp, #100	; 0x64
   17b28:	pop	{r4, r5, pc}
   17b2c:	push	{r4, r5, r6, r7, lr}
   17b30:	sub	sp, sp, #52	; 0x34
   17b34:	mov	r4, r0
   17b38:	mov	r6, r1
   17b3c:	mov	r7, r2
   17b40:	mov	r5, r3
   17b44:	mov	ip, sp
   17b48:	ldr	lr, [pc, #64]	; 17b90 <__assert_fail@plt+0x6804>
   17b4c:	ldm	lr!, {r0, r1, r2, r3}
   17b50:	stmia	ip!, {r0, r1, r2, r3}
   17b54:	ldm	lr!, {r0, r1, r2, r3}
   17b58:	stmia	ip!, {r0, r1, r2, r3}
   17b5c:	ldm	lr, {r0, r1, r2, r3}
   17b60:	stm	ip, {r0, r1, r2, r3}
   17b64:	mov	r2, r7
   17b68:	mov	r1, r6
   17b6c:	mov	r0, sp
   17b70:	bl	176f8 <__assert_fail@plt+0x636c>
   17b74:	mov	r3, sp
   17b78:	ldr	r2, [sp, #72]	; 0x48
   17b7c:	mov	r1, r5
   17b80:	mov	r0, r4
   17b84:	bl	17470 <__assert_fail@plt+0x60e4>
   17b88:	add	sp, sp, #52	; 0x34
   17b8c:	pop	{r4, r5, r6, r7, pc}
   17b90:	andeq	ip, r2, ip, asr #5
   17b94:	push	{lr}		; (str lr, [sp, #-4]!)
   17b98:	sub	sp, sp, #12
   17b9c:	mvn	ip, #0
   17ba0:	str	ip, [sp]
   17ba4:	bl	17b2c <__assert_fail@plt+0x67a0>
   17ba8:	add	sp, sp, #12
   17bac:	pop	{pc}		; (ldr pc, [sp], #4)
   17bb0:	push	{r4, lr}
   17bb4:	mov	r3, r2
   17bb8:	mov	r2, r1
   17bbc:	mov	r1, r0
   17bc0:	mov	r0, #0
   17bc4:	bl	17b94 <__assert_fail@plt+0x6808>
   17bc8:	pop	{r4, pc}
   17bcc:	push	{lr}		; (str lr, [sp, #-4]!)
   17bd0:	sub	sp, sp, #12
   17bd4:	str	r3, [sp]
   17bd8:	mov	r3, r2
   17bdc:	mov	r2, r1
   17be0:	mov	r1, r0
   17be4:	mov	r0, #0
   17be8:	bl	17b2c <__assert_fail@plt+0x67a0>
   17bec:	add	sp, sp, #12
   17bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   17bf4:	push	{r4, lr}
   17bf8:	ldr	r3, [pc, #4]	; 17c04 <__assert_fail@plt+0x6878>
   17bfc:	bl	17470 <__assert_fail@plt+0x60e4>
   17c00:	pop	{r4, pc}
   17c04:	andeq	ip, r2, r4, asr r1
   17c08:	push	{r4, lr}
   17c0c:	mov	r2, r1
   17c10:	mov	r1, r0
   17c14:	mov	r0, #0
   17c18:	bl	17bf4 <__assert_fail@plt+0x6868>
   17c1c:	pop	{r4, pc}
   17c20:	push	{r4, lr}
   17c24:	mvn	r2, #0
   17c28:	bl	17bf4 <__assert_fail@plt+0x6868>
   17c2c:	pop	{r4, pc}
   17c30:	push	{r4, lr}
   17c34:	mov	r1, r0
   17c38:	mov	r0, #0
   17c3c:	bl	17c20 <__assert_fail@plt+0x6894>
   17c40:	pop	{r4, pc}
   17c44:	push	{r4, lr}
   17c48:	sub	sp, sp, #104	; 0x68
   17c4c:	mov	r4, r0
   17c50:	mov	r2, sp
   17c54:	ldr	r1, [pc, #48]	; 17c8c <__assert_fail@plt+0x6900>
   17c58:	mov	r0, #3
   17c5c:	bl	1135c <__lxstat64@plt>
   17c60:	cmp	r0, #0
   17c64:	bne	17c84 <__assert_fail@plt+0x68f8>
   17c68:	ldrd	r2, [sp, #96]	; 0x60
   17c6c:	strd	r2, [r4]
   17c70:	ldrd	r2, [sp]
   17c74:	strd	r2, [r4, #8]
   17c78:	mov	r0, r4
   17c7c:	add	sp, sp, #104	; 0x68
   17c80:	pop	{r4, pc}
   17c84:	mov	r0, #0
   17c88:	b	17c7c <__assert_fail@plt+0x68f0>
   17c8c:	andeq	sl, r1, r0, asr #25
   17c90:	push	{r4, r5, r6, r7, r8, lr}
   17c94:	mov	r4, r0
   17c98:	cmp	r0, #2
   17c9c:	bls	17ca8 <__assert_fail@plt+0x691c>
   17ca0:	mov	r0, r4
   17ca4:	pop	{r4, r5, r6, r7, r8, pc}
   17ca8:	bl	198e0 <__assert_fail@plt+0x8554>
   17cac:	mov	r6, r0
   17cb0:	bl	1123c <__errno_location@plt>
   17cb4:	mov	r5, r0
   17cb8:	ldr	r7, [r0]
   17cbc:	mov	r0, r4
   17cc0:	bl	11350 <close@plt>
   17cc4:	str	r7, [r5]
   17cc8:	mov	r4, r6
   17ccc:	b	17ca0 <__assert_fail@plt+0x6914>
   17cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cd4:	sub	sp, sp, #44	; 0x2c
   17cd8:	mov	r6, r1
   17cdc:	mov	r8, r2
   17ce0:	ldr	r7, [sp, #80]	; 0x50
   17ce4:	ldr	fp, [r2]
   17ce8:	subs	r9, r3, #0
   17cec:	ldrne	sl, [r9]
   17cf0:	mvneq	sl, #0
   17cf4:	cmp	r7, #0
   17cf8:	movne	r3, #0
   17cfc:	strne	r3, [r7]
   17d00:	ldr	r3, [sp, #84]	; 0x54
   17d04:	cmp	r3, #0
   17d08:	movne	r3, #0
   17d0c:	ldrne	r2, [sp, #84]	; 0x54
   17d10:	strne	r3, [r2]
   17d14:	cmp	r1, #0
   17d18:	beq	17e04 <__assert_fail@plt+0x6a78>
   17d1c:	subs	r5, r1, r0
   17d20:	moveq	r4, #0
   17d24:	bne	17e20 <__assert_fail@plt+0x6a94>
   17d28:	ldrb	r3, [r6, #1]
   17d2c:	cmp	r3, #0
   17d30:	bne	17e38 <__assert_fail@plt+0x6aac>
   17d34:	cmp	r4, #0
   17d38:	streq	r4, [sp, #12]
   17d3c:	beq	17f5c <__assert_fail@plt+0x6bd0>
   17d40:	mov	r5, #0
   17d44:	ldrb	r3, [r4]
   17d48:	cmp	r3, #43	; 0x2b
   17d4c:	beq	17e58 <__assert_fail@plt+0x6acc>
   17d50:	mov	r0, r4
   17d54:	bl	11068 <getpwnam@plt>
   17d58:	cmp	r0, #0
   17d5c:	beq	17e58 <__assert_fail@plt+0x6acc>
   17d60:	ldr	fp, [r0, #8]
   17d64:	clz	r3, r5
   17d68:	lsr	r3, r3, #5
   17d6c:	cmp	r6, #0
   17d70:	moveq	r3, #0
   17d74:	cmp	r3, #0
   17d78:	moveq	r3, #0
   17d7c:	streq	r3, [sp, #12]
   17d80:	moveq	r6, r3
   17d84:	bne	17ed4 <__assert_fail@plt+0x6b48>
   17d88:	bl	112b4 <endpwent@plt>
   17d8c:	adds	r3, r5, #0
   17d90:	movne	r3, #1
   17d94:	cmp	r6, #0
   17d98:	movne	r3, #0
   17d9c:	cmp	r3, #0
   17da0:	beq	17dd4 <__assert_fail@plt+0x6a48>
   17da4:	ldrb	r3, [r5]
   17da8:	cmp	r3, #43	; 0x2b
   17dac:	beq	17f14 <__assert_fail@plt+0x6b88>
   17db0:	mov	r0, r5
   17db4:	bl	11380 <getgrnam@plt>
   17db8:	cmp	r0, #0
   17dbc:	ldrne	sl, [r0, #8]
   17dc0:	beq	17f14 <__assert_fail@plt+0x6b88>
   17dc4:	bl	11044 <endgrent@plt>
   17dc8:	mov	r0, r5
   17dcc:	bl	18b84 <__assert_fail@plt+0x77f8>
   17dd0:	str	r0, [sp, #12]
   17dd4:	cmp	r6, #0
   17dd8:	beq	17f5c <__assert_fail@plt+0x6bd0>
   17ddc:	mov	r0, r4
   17de0:	bl	12d5c <__assert_fail@plt+0x19d0>
   17de4:	ldr	r0, [sp, #12]
   17de8:	bl	12d5c <__assert_fail@plt+0x19d0>
   17dec:	mov	r2, #5
   17df0:	mov	r1, r6
   17df4:	mov	r0, #0
   17df8:	bl	11104 <dcgettext@plt>
   17dfc:	add	sp, sp, #44	; 0x2c
   17e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e04:	ldrb	r3, [r0]
   17e08:	cmp	r3, #0
   17e0c:	moveq	r4, #0
   17e10:	beq	17d34 <__assert_fail@plt+0x69a8>
   17e14:	bl	18b84 <__assert_fail@plt+0x77f8>
   17e18:	mov	r4, r0
   17e1c:	b	17d34 <__assert_fail@plt+0x69a8>
   17e20:	add	r1, r5, #1
   17e24:	bl	18b34 <__assert_fail@plt+0x77a8>
   17e28:	mov	r4, r0
   17e2c:	mov	r3, #0
   17e30:	strb	r3, [r0, r5]
   17e34:	b	17d28 <__assert_fail@plt+0x699c>
   17e38:	add	r5, r6, #1
   17e3c:	cmp	r4, #0
   17e40:	bne	17d44 <__assert_fail@plt+0x69b8>
   17e44:	cmp	r5, #0
   17e48:	streq	r4, [sp, #12]
   17e4c:	beq	17f5c <__assert_fail@plt+0x6bd0>
   17e50:	mov	r6, #0
   17e54:	b	17da4 <__assert_fail@plt+0x6a18>
   17e58:	adds	r6, r6, #0
   17e5c:	movne	r6, #1
   17e60:	cmp	r5, #0
   17e64:	movne	r6, #0
   17e68:	cmp	r6, #0
   17e6c:	beq	17e84 <__assert_fail@plt+0x6af8>
   17e70:	bl	112b4 <endpwent@plt>
   17e74:	mov	r3, #0
   17e78:	str	r3, [sp, #12]
   17e7c:	ldr	r6, [pc, #288]	; 17fa4 <__assert_fail@plt+0x6c18>
   17e80:	b	17dd4 <__assert_fail@plt+0x6a48>
   17e84:	ldr	r3, [pc, #284]	; 17fa8 <__assert_fail@plt+0x6c1c>
   17e88:	str	r3, [sp]
   17e8c:	add	r3, sp, #16
   17e90:	mov	r2, #10
   17e94:	mov	r1, #0
   17e98:	mov	r0, r4
   17e9c:	bl	18d1c <__assert_fail@plt+0x7990>
   17ea0:	cmp	r0, #0
   17ea4:	bne	17ecc <__assert_fail@plt+0x6b40>
   17ea8:	ldr	r3, [sp, #16]
   17eac:	cmn	r3, #1
   17eb0:	movne	fp, r3
   17eb4:	ldr	r6, [pc, #240]	; 17fac <__assert_fail@plt+0x6c20>
   17eb8:	cmn	r3, #1
   17ebc:	movne	r6, #0
   17ec0:	mov	r3, #0
   17ec4:	str	r3, [sp, #12]
   17ec8:	b	17d88 <__assert_fail@plt+0x69fc>
   17ecc:	ldr	r6, [pc, #216]	; 17fac <__assert_fail@plt+0x6c20>
   17ed0:	b	17ec0 <__assert_fail@plt+0x6b34>
   17ed4:	ldr	sl, [r0, #12]
   17ed8:	mov	r0, sl
   17edc:	bl	11374 <getgrgid@plt>
   17ee0:	cmp	r0, #0
   17ee4:	beq	17f00 <__assert_fail@plt+0x6b74>
   17ee8:	ldr	r0, [r0]
   17eec:	bl	18b84 <__assert_fail@plt+0x77f8>
   17ef0:	str	r0, [sp, #12]
   17ef4:	bl	11044 <endgrent@plt>
   17ef8:	mov	r6, #0
   17efc:	b	17d88 <__assert_fail@plt+0x69fc>
   17f00:	add	r2, sp, #16
   17f04:	mov	r0, sl
   17f08:	mov	r1, #0
   17f0c:	bl	15fe0 <__assert_fail@plt+0x4c54>
   17f10:	b	17eec <__assert_fail@plt+0x6b60>
   17f14:	ldr	r3, [pc, #140]	; 17fa8 <__assert_fail@plt+0x6c1c>
   17f18:	str	r3, [sp]
   17f1c:	add	r3, sp, #16
   17f20:	mov	r2, #10
   17f24:	mov	r1, #0
   17f28:	mov	r0, r5
   17f2c:	bl	18d1c <__assert_fail@plt+0x7990>
   17f30:	cmp	r0, #0
   17f34:	bne	17f54 <__assert_fail@plt+0x6bc8>
   17f38:	ldr	r3, [sp, #16]
   17f3c:	cmn	r3, #1
   17f40:	movne	sl, r3
   17f44:	ldr	r2, [pc, #100]	; 17fb0 <__assert_fail@plt+0x6c24>
   17f48:	cmn	r3, #1
   17f4c:	moveq	r6, r2
   17f50:	b	17dc4 <__assert_fail@plt+0x6a38>
   17f54:	ldr	r6, [pc, #84]	; 17fb0 <__assert_fail@plt+0x6c24>
   17f58:	b	17dc4 <__assert_fail@plt+0x6a38>
   17f5c:	str	fp, [r8]
   17f60:	cmp	r9, #0
   17f64:	strne	sl, [r9]
   17f68:	cmp	r7, #0
   17f6c:	strne	r4, [r7]
   17f70:	movne	r4, #0
   17f74:	ldr	r3, [sp, #84]	; 0x54
   17f78:	cmp	r3, #0
   17f7c:	ldrne	r2, [sp, #12]
   17f80:	strne	r2, [r3]
   17f84:	movne	r3, #0
   17f88:	strne	r3, [sp, #12]
   17f8c:	mov	r0, r4
   17f90:	bl	12d5c <__assert_fail@plt+0x19d0>
   17f94:	ldr	r0, [sp, #12]
   17f98:	bl	12d5c <__assert_fail@plt+0x19d0>
   17f9c:	mov	r0, #0
   17fa0:	b	17dfc <__assert_fail@plt+0x6a70>
   17fa4:	andeq	fp, r1, r4, ror #6
   17fa8:	andeq	sl, r1, r8, lsl r9
   17fac:	andeq	fp, r1, r4, asr #6
   17fb0:	andeq	fp, r1, r4, asr r3
   17fb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17fb8:	sub	sp, sp, #8
   17fbc:	mov	r5, r0
   17fc0:	mov	r7, r1
   17fc4:	mov	r8, r3
   17fc8:	ldr	r9, [sp, #40]	; 0x28
   17fcc:	subs	sl, r2, #0
   17fd0:	beq	18058 <__assert_fail@plt+0x6ccc>
   17fd4:	mov	r1, #58	; 0x3a
   17fd8:	bl	11218 <strchr@plt>
   17fdc:	mov	r4, r0
   17fe0:	str	r9, [sp, #4]
   17fe4:	str	r8, [sp]
   17fe8:	mov	r3, sl
   17fec:	mov	r2, r7
   17ff0:	mov	r1, r0
   17ff4:	mov	r0, r5
   17ff8:	bl	17cd0 <__assert_fail@plt+0x6944>
   17ffc:	mov	r6, r0
   18000:	clz	r3, r4
   18004:	lsr	r3, r3, #5
   18008:	cmp	r0, #0
   1800c:	moveq	r3, #0
   18010:	cmp	r3, #0
   18014:	beq	1804c <__assert_fail@plt+0x6cc0>
   18018:	mov	r1, #46	; 0x2e
   1801c:	mov	r0, r5
   18020:	bl	11218 <strchr@plt>
   18024:	subs	r1, r0, #0
   18028:	beq	1804c <__assert_fail@plt+0x6cc0>
   1802c:	str	r9, [sp, #4]
   18030:	str	r8, [sp]
   18034:	mov	r3, sl
   18038:	mov	r2, r7
   1803c:	mov	r0, r5
   18040:	bl	17cd0 <__assert_fail@plt+0x6944>
   18044:	cmp	r0, #0
   18048:	moveq	r6, #0
   1804c:	mov	r0, r6
   18050:	add	sp, sp, #8
   18054:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18058:	str	r9, [sp, #4]
   1805c:	str	r3, [sp]
   18060:	mov	r3, #0
   18064:	mov	r2, r1
   18068:	mov	r1, r3
   1806c:	bl	17cd0 <__assert_fail@plt+0x6944>
   18070:	mov	r6, r0
   18074:	b	1804c <__assert_fail@plt+0x6cc0>
   18078:	push	{r4, r5, r6, lr}
   1807c:	sub	sp, sp, #32
   18080:	mov	r4, r0
   18084:	ldr	r5, [sp, #48]	; 0x30
   18088:	ldr	r6, [sp, #52]	; 0x34
   1808c:	cmp	r1, #0
   18090:	beq	18148 <__assert_fail@plt+0x6dbc>
   18094:	str	r3, [sp, #4]
   18098:	str	r2, [sp]
   1809c:	mov	r3, r1
   180a0:	ldr	r2, [pc, #940]	; 18454 <__assert_fail@plt+0x70c8>
   180a4:	mov	r1, #1
   180a8:	bl	11278 <__fprintf_chk@plt>
   180ac:	mov	r2, #5
   180b0:	ldr	r1, [pc, #928]	; 18458 <__assert_fail@plt+0x70cc>
   180b4:	mov	r0, #0
   180b8:	bl	11104 <dcgettext@plt>
   180bc:	ldr	r3, [pc, #920]	; 1845c <__assert_fail@plt+0x70d0>
   180c0:	str	r3, [sp]
   180c4:	mov	r3, r0
   180c8:	ldr	r2, [pc, #912]	; 18460 <__assert_fail@plt+0x70d4>
   180cc:	mov	r1, #1
   180d0:	mov	r0, r4
   180d4:	bl	11278 <__fprintf_chk@plt>
   180d8:	mov	r1, r4
   180dc:	mov	r0, #10
   180e0:	bl	110f8 <fputc_unlocked@plt>
   180e4:	mov	r2, #5
   180e8:	ldr	r1, [pc, #884]	; 18464 <__assert_fail@plt+0x70d8>
   180ec:	mov	r0, #0
   180f0:	bl	11104 <dcgettext@plt>
   180f4:	ldr	r3, [pc, #876]	; 18468 <__assert_fail@plt+0x70dc>
   180f8:	mov	r2, r0
   180fc:	mov	r1, #1
   18100:	mov	r0, r4
   18104:	bl	11278 <__fprintf_chk@plt>
   18108:	mov	r1, r4
   1810c:	mov	r0, #10
   18110:	bl	110f8 <fputc_unlocked@plt>
   18114:	cmp	r6, #9
   18118:	ldrls	pc, [pc, r6, lsl #2]
   1811c:	b	183ec <__assert_fail@plt+0x7060>
   18120:	andeq	r8, r1, r4, lsl #3
   18124:	andeq	r8, r1, r0, ror #2
   18128:	andeq	r8, r1, ip, lsl #3
   1812c:			; <UNDEFINED> instruction: 0x000181bc
   18130:	strdeq	r8, [r1], -r4
   18134:	andeq	r8, r1, r4, lsr r2
   18138:	andeq	r8, r1, ip, ror r2
   1813c:	andeq	r8, r1, ip, asr #5
   18140:	andeq	r8, r1, r4, lsr #6
   18144:	andeq	r8, r1, r4, lsl #7
   18148:	str	r3, [sp]
   1814c:	mov	r3, r2
   18150:	ldr	r2, [pc, #788]	; 1846c <__assert_fail@plt+0x70e0>
   18154:	mov	r1, #1
   18158:	bl	11278 <__fprintf_chk@plt>
   1815c:	b	180ac <__assert_fail@plt+0x6d20>
   18160:	mov	r2, #5
   18164:	ldr	r1, [pc, #772]	; 18470 <__assert_fail@plt+0x70e4>
   18168:	mov	r0, #0
   1816c:	bl	11104 <dcgettext@plt>
   18170:	ldr	r3, [r5]
   18174:	mov	r2, r0
   18178:	mov	r1, #1
   1817c:	mov	r0, r4
   18180:	bl	11278 <__fprintf_chk@plt>
   18184:	add	sp, sp, #32
   18188:	pop	{r4, r5, r6, pc}
   1818c:	mov	r2, #5
   18190:	ldr	r1, [pc, #732]	; 18474 <__assert_fail@plt+0x70e8>
   18194:	mov	r0, #0
   18198:	bl	11104 <dcgettext@plt>
   1819c:	ldr	r3, [r5]
   181a0:	ldr	r2, [r5, #4]
   181a4:	str	r2, [sp]
   181a8:	mov	r2, r0
   181ac:	mov	r1, #1
   181b0:	mov	r0, r4
   181b4:	bl	11278 <__fprintf_chk@plt>
   181b8:	b	18184 <__assert_fail@plt+0x6df8>
   181bc:	mov	r2, #5
   181c0:	ldr	r1, [pc, #688]	; 18478 <__assert_fail@plt+0x70ec>
   181c4:	mov	r0, #0
   181c8:	bl	11104 <dcgettext@plt>
   181cc:	ldr	r3, [r5]
   181d0:	ldr	r2, [r5, #8]
   181d4:	str	r2, [sp, #4]
   181d8:	ldr	r2, [r5, #4]
   181dc:	str	r2, [sp]
   181e0:	mov	r2, r0
   181e4:	mov	r1, #1
   181e8:	mov	r0, r4
   181ec:	bl	11278 <__fprintf_chk@plt>
   181f0:	b	18184 <__assert_fail@plt+0x6df8>
   181f4:	mov	r2, #5
   181f8:	ldr	r1, [pc, #636]	; 1847c <__assert_fail@plt+0x70f0>
   181fc:	mov	r0, #0
   18200:	bl	11104 <dcgettext@plt>
   18204:	ldr	r3, [r5]
   18208:	ldr	r2, [r5, #12]
   1820c:	str	r2, [sp, #8]
   18210:	ldr	r2, [r5, #8]
   18214:	str	r2, [sp, #4]
   18218:	ldr	r2, [r5, #4]
   1821c:	str	r2, [sp]
   18220:	mov	r2, r0
   18224:	mov	r1, #1
   18228:	mov	r0, r4
   1822c:	bl	11278 <__fprintf_chk@plt>
   18230:	b	18184 <__assert_fail@plt+0x6df8>
   18234:	mov	r2, #5
   18238:	ldr	r1, [pc, #576]	; 18480 <__assert_fail@plt+0x70f4>
   1823c:	mov	r0, #0
   18240:	bl	11104 <dcgettext@plt>
   18244:	ldr	r3, [r5]
   18248:	ldr	r2, [r5, #16]
   1824c:	str	r2, [sp, #12]
   18250:	ldr	r2, [r5, #12]
   18254:	str	r2, [sp, #8]
   18258:	ldr	r2, [r5, #8]
   1825c:	str	r2, [sp, #4]
   18260:	ldr	r2, [r5, #4]
   18264:	str	r2, [sp]
   18268:	mov	r2, r0
   1826c:	mov	r1, #1
   18270:	mov	r0, r4
   18274:	bl	11278 <__fprintf_chk@plt>
   18278:	b	18184 <__assert_fail@plt+0x6df8>
   1827c:	mov	r2, #5
   18280:	ldr	r1, [pc, #508]	; 18484 <__assert_fail@plt+0x70f8>
   18284:	mov	r0, #0
   18288:	bl	11104 <dcgettext@plt>
   1828c:	ldr	r3, [r5]
   18290:	ldr	r2, [r5, #20]
   18294:	str	r2, [sp, #16]
   18298:	ldr	r2, [r5, #16]
   1829c:	str	r2, [sp, #12]
   182a0:	ldr	r2, [r5, #12]
   182a4:	str	r2, [sp, #8]
   182a8:	ldr	r2, [r5, #8]
   182ac:	str	r2, [sp, #4]
   182b0:	ldr	r2, [r5, #4]
   182b4:	str	r2, [sp]
   182b8:	mov	r2, r0
   182bc:	mov	r1, #1
   182c0:	mov	r0, r4
   182c4:	bl	11278 <__fprintf_chk@plt>
   182c8:	b	18184 <__assert_fail@plt+0x6df8>
   182cc:	mov	r2, #5
   182d0:	ldr	r1, [pc, #432]	; 18488 <__assert_fail@plt+0x70fc>
   182d4:	mov	r0, #0
   182d8:	bl	11104 <dcgettext@plt>
   182dc:	ldr	r3, [r5]
   182e0:	ldr	r2, [r5, #24]
   182e4:	str	r2, [sp, #20]
   182e8:	ldr	r2, [r5, #20]
   182ec:	str	r2, [sp, #16]
   182f0:	ldr	r2, [r5, #16]
   182f4:	str	r2, [sp, #12]
   182f8:	ldr	r2, [r5, #12]
   182fc:	str	r2, [sp, #8]
   18300:	ldr	r2, [r5, #8]
   18304:	str	r2, [sp, #4]
   18308:	ldr	r2, [r5, #4]
   1830c:	str	r2, [sp]
   18310:	mov	r2, r0
   18314:	mov	r1, #1
   18318:	mov	r0, r4
   1831c:	bl	11278 <__fprintf_chk@plt>
   18320:	b	18184 <__assert_fail@plt+0x6df8>
   18324:	mov	r2, #5
   18328:	ldr	r1, [pc, #348]	; 1848c <__assert_fail@plt+0x7100>
   1832c:	mov	r0, #0
   18330:	bl	11104 <dcgettext@plt>
   18334:	ldr	r3, [r5]
   18338:	ldr	r2, [r5, #28]
   1833c:	str	r2, [sp, #24]
   18340:	ldr	r2, [r5, #24]
   18344:	str	r2, [sp, #20]
   18348:	ldr	r2, [r5, #20]
   1834c:	str	r2, [sp, #16]
   18350:	ldr	r2, [r5, #16]
   18354:	str	r2, [sp, #12]
   18358:	ldr	r2, [r5, #12]
   1835c:	str	r2, [sp, #8]
   18360:	ldr	r2, [r5, #8]
   18364:	str	r2, [sp, #4]
   18368:	ldr	r2, [r5, #4]
   1836c:	str	r2, [sp]
   18370:	mov	r2, r0
   18374:	mov	r1, #1
   18378:	mov	r0, r4
   1837c:	bl	11278 <__fprintf_chk@plt>
   18380:	b	18184 <__assert_fail@plt+0x6df8>
   18384:	mov	r2, #5
   18388:	ldr	r1, [pc, #256]	; 18490 <__assert_fail@plt+0x7104>
   1838c:	mov	r0, #0
   18390:	bl	11104 <dcgettext@plt>
   18394:	ldr	r3, [r5]
   18398:	ldr	r2, [r5, #32]
   1839c:	str	r2, [sp, #28]
   183a0:	ldr	r2, [r5, #28]
   183a4:	str	r2, [sp, #24]
   183a8:	ldr	r2, [r5, #24]
   183ac:	str	r2, [sp, #20]
   183b0:	ldr	r2, [r5, #20]
   183b4:	str	r2, [sp, #16]
   183b8:	ldr	r2, [r5, #16]
   183bc:	str	r2, [sp, #12]
   183c0:	ldr	r2, [r5, #12]
   183c4:	str	r2, [sp, #8]
   183c8:	ldr	r2, [r5, #8]
   183cc:	str	r2, [sp, #4]
   183d0:	ldr	r2, [r5, #4]
   183d4:	str	r2, [sp]
   183d8:	mov	r2, r0
   183dc:	mov	r1, #1
   183e0:	mov	r0, r4
   183e4:	bl	11278 <__fprintf_chk@plt>
   183e8:	b	18184 <__assert_fail@plt+0x6df8>
   183ec:	mov	r2, #5
   183f0:	ldr	r1, [pc, #156]	; 18494 <__assert_fail@plt+0x7108>
   183f4:	mov	r0, #0
   183f8:	bl	11104 <dcgettext@plt>
   183fc:	ldr	r3, [r5]
   18400:	ldr	r2, [r5, #32]
   18404:	str	r2, [sp, #28]
   18408:	ldr	r2, [r5, #28]
   1840c:	str	r2, [sp, #24]
   18410:	ldr	r2, [r5, #24]
   18414:	str	r2, [sp, #20]
   18418:	ldr	r2, [r5, #20]
   1841c:	str	r2, [sp, #16]
   18420:	ldr	r2, [r5, #16]
   18424:	str	r2, [sp, #12]
   18428:	ldr	r2, [r5, #12]
   1842c:	str	r2, [sp, #8]
   18430:	ldr	r2, [r5, #8]
   18434:	str	r2, [sp, #4]
   18438:	ldr	r2, [r5, #4]
   1843c:	str	r2, [sp]
   18440:	mov	r2, r0
   18444:	mov	r1, #1
   18448:	mov	r0, r4
   1844c:	bl	11278 <__fprintf_chk@plt>
   18450:	b	18184 <__assert_fail@plt+0x6df8>
   18454:	andeq	fp, r1, r4, ror r3
   18458:	andeq	fp, r1, r8, lsl #7
   1845c:	andeq	r0, r0, r6, ror #15
   18460:	andeq	fp, r1, r0, ror #12
   18464:	andeq	fp, r1, ip, lsl #7
   18468:	andeq	fp, r1, r8, lsr r4
   1846c:	andeq	fp, r1, r0, lsl #7
   18470:	andeq	fp, r1, ip, asr r4
   18474:	andeq	fp, r1, ip, ror #8
   18478:	andeq	fp, r1, r4, lsl #9
   1847c:	andeq	fp, r1, r0, lsr #9
   18480:	andeq	fp, r1, r0, asr #9
   18484:	andeq	fp, r1, r4, ror #9
   18488:	andeq	fp, r1, ip, lsl #10
   1848c:	andeq	fp, r1, r8, lsr r5
   18490:	andeq	fp, r1, r8, ror #10
   18494:	muleq	r1, ip, r5
   18498:	push	{r4, r5, lr}
   1849c:	sub	sp, sp, #12
   184a0:	ldr	r5, [sp, #24]
   184a4:	ldr	ip, [r5]
   184a8:	cmp	ip, #0
   184ac:	beq	184dc <__assert_fail@plt+0x7150>
   184b0:	mov	lr, r5
   184b4:	mov	ip, #0
   184b8:	add	ip, ip, #1
   184bc:	ldr	r4, [lr, #4]!
   184c0:	cmp	r4, #0
   184c4:	bne	184b8 <__assert_fail@plt+0x712c>
   184c8:	str	ip, [sp, #4]
   184cc:	str	r5, [sp]
   184d0:	bl	18078 <__assert_fail@plt+0x6cec>
   184d4:	add	sp, sp, #12
   184d8:	pop	{r4, r5, pc}
   184dc:	mov	ip, #0
   184e0:	b	184c8 <__assert_fail@plt+0x713c>
   184e4:	push	{r4, r5, lr}
   184e8:	sub	sp, sp, #52	; 0x34
   184ec:	ldr	r4, [sp, #64]	; 0x40
   184f0:	sub	r4, r4, #4
   184f4:	add	r5, sp, #4
   184f8:	mov	ip, #0
   184fc:	ldr	lr, [r4, #4]!
   18500:	str	lr, [r5, #4]!
   18504:	cmp	lr, #0
   18508:	beq	18518 <__assert_fail@plt+0x718c>
   1850c:	add	ip, ip, #1
   18510:	cmp	ip, #10
   18514:	bne	184fc <__assert_fail@plt+0x7170>
   18518:	str	ip, [sp, #4]
   1851c:	add	ip, sp, #8
   18520:	str	ip, [sp]
   18524:	bl	18078 <__assert_fail@plt+0x6cec>
   18528:	add	sp, sp, #52	; 0x34
   1852c:	pop	{r4, r5, pc}
   18530:	push	{r3}		; (str r3, [sp, #-4]!)
   18534:	push	{lr}		; (str lr, [sp, #-4]!)
   18538:	sub	sp, sp, #16
   1853c:	add	r3, sp, #24
   18540:	str	r3, [sp, #12]
   18544:	str	r3, [sp]
   18548:	ldr	r3, [sp, #20]
   1854c:	bl	184e4 <__assert_fail@plt+0x7158>
   18550:	add	sp, sp, #16
   18554:	pop	{lr}		; (ldr lr, [sp], #4)
   18558:	add	sp, sp, #4
   1855c:	bx	lr
   18560:	push	{r4, lr}
   18564:	ldr	r3, [pc, #112]	; 185dc <__assert_fail@plt+0x7250>
   18568:	ldr	r1, [r3]
   1856c:	mov	r0, #10
   18570:	bl	110f8 <fputc_unlocked@plt>
   18574:	mov	r2, #5
   18578:	ldr	r1, [pc, #96]	; 185e0 <__assert_fail@plt+0x7254>
   1857c:	mov	r0, #0
   18580:	bl	11104 <dcgettext@plt>
   18584:	ldr	r2, [pc, #88]	; 185e4 <__assert_fail@plt+0x7258>
   18588:	mov	r1, r0
   1858c:	mov	r0, #1
   18590:	bl	11260 <__printf_chk@plt>
   18594:	mov	r2, #5
   18598:	ldr	r1, [pc, #72]	; 185e8 <__assert_fail@plt+0x725c>
   1859c:	mov	r0, #0
   185a0:	bl	11104 <dcgettext@plt>
   185a4:	ldr	r3, [pc, #64]	; 185ec <__assert_fail@plt+0x7260>
   185a8:	ldr	r2, [pc, #64]	; 185f0 <__assert_fail@plt+0x7264>
   185ac:	mov	r1, r0
   185b0:	mov	r0, #1
   185b4:	bl	11260 <__printf_chk@plt>
   185b8:	mov	r2, #5
   185bc:	ldr	r1, [pc, #48]	; 185f4 <__assert_fail@plt+0x7268>
   185c0:	mov	r0, #0
   185c4:	bl	11104 <dcgettext@plt>
   185c8:	ldr	r2, [pc, #40]	; 185f8 <__assert_fail@plt+0x726c>
   185cc:	mov	r1, r0
   185d0:	mov	r0, #1
   185d4:	bl	11260 <__printf_chk@plt>
   185d8:	pop	{r4, pc}
   185dc:	muleq	r2, ip, r1
   185e0:	ldrdeq	fp, [r1], -r8
   185e4:	andeq	fp, r1, ip, ror #11
   185e8:	andeq	fp, r1, r4, lsl #12
   185ec:	andeq	sl, r1, r8, lsr #22
   185f0:	andeq	sl, r1, r0, asr fp
   185f4:	andeq	fp, r1, r8, lsl r6
   185f8:	andeq	fp, r1, r0, asr #12
   185fc:	push	{r4, lr}
   18600:	bl	191e0 <__assert_fail@plt+0x7e54>
   18604:	cmp	r0, #0
   18608:	popne	{r4, pc}
   1860c:	bl	18ba0 <__assert_fail@plt+0x7814>
   18610:	push	{r4, lr}
   18614:	bl	191e0 <__assert_fail@plt+0x7e54>
   18618:	cmp	r0, #0
   1861c:	popne	{r4, pc}
   18620:	bl	18ba0 <__assert_fail@plt+0x7814>
   18624:	push	{r4, lr}
   18628:	bl	185fc <__assert_fail@plt+0x7270>
   1862c:	pop	{r4, pc}
   18630:	push	{r4, r5, r6, lr}
   18634:	mov	r5, r0
   18638:	mov	r4, r1
   1863c:	bl	19210 <__assert_fail@plt+0x7e84>
   18640:	cmp	r0, #0
   18644:	popne	{r4, r5, r6, pc}
   18648:	adds	r4, r4, #0
   1864c:	movne	r4, #1
   18650:	cmp	r5, #0
   18654:	orreq	r4, r4, #1
   18658:	cmp	r4, #0
   1865c:	popeq	{r4, r5, r6, pc}
   18660:	bl	18ba0 <__assert_fail@plt+0x7814>
   18664:	push	{r4, lr}
   18668:	cmp	r1, #0
   1866c:	orreq	r1, r1, #1
   18670:	bl	19210 <__assert_fail@plt+0x7e84>
   18674:	cmp	r0, #0
   18678:	popne	{r4, pc}
   1867c:	bl	18ba0 <__assert_fail@plt+0x7814>
   18680:	push	{r4, r5, r6, lr}
   18684:	mov	r6, r0
   18688:	mov	r5, r1
   1868c:	mov	r4, r2
   18690:	bl	19894 <__assert_fail@plt+0x8508>
   18694:	cmp	r0, #0
   18698:	popne	{r4, r5, r6, pc}
   1869c:	cmp	r6, #0
   186a0:	beq	186b0 <__assert_fail@plt+0x7324>
   186a4:	cmp	r5, #0
   186a8:	cmpne	r4, #0
   186ac:	popeq	{r4, r5, r6, pc}
   186b0:	bl	18ba0 <__assert_fail@plt+0x7814>
   186b4:	push	{r4, lr}
   186b8:	bl	18680 <__assert_fail@plt+0x72f4>
   186bc:	pop	{r4, pc}
   186c0:	push	{r4, lr}
   186c4:	mov	ip, r1
   186c8:	mov	r3, r2
   186cc:	cmp	r2, #0
   186d0:	cmpne	r1, #0
   186d4:	moveq	r3, #1
   186d8:	moveq	ip, r3
   186dc:	mov	r2, r3
   186e0:	mov	r1, ip
   186e4:	bl	19894 <__assert_fail@plt+0x8508>
   186e8:	cmp	r0, #0
   186ec:	popne	{r4, pc}
   186f0:	bl	18ba0 <__assert_fail@plt+0x7814>
   186f4:	push	{r4, lr}
   186f8:	mov	r2, r1
   186fc:	mov	r1, r0
   18700:	mov	r0, #0
   18704:	bl	18680 <__assert_fail@plt+0x72f4>
   18708:	pop	{r4, pc}
   1870c:	push	{r4, lr}
   18710:	mov	r2, r1
   18714:	mov	r1, r0
   18718:	mov	r0, #0
   1871c:	bl	186c0 <__assert_fail@plt+0x7334>
   18720:	pop	{r4, pc}
   18724:	push	{r4, r5, r6, r7, r8, lr}
   18728:	mov	r5, r1
   1872c:	mov	r6, r2
   18730:	ldr	r4, [r1]
   18734:	subs	r7, r0, #0
   18738:	beq	18754 <__assert_fail@plt+0x73c8>
   1873c:	lsr	r2, r4, #1
   18740:	add	r3, r2, #1
   18744:	mvn	r3, r3
   18748:	cmp	r4, r3
   1874c:	bls	18778 <__assert_fail@plt+0x73ec>
   18750:	bl	18ba0 <__assert_fail@plt+0x7814>
   18754:	cmp	r4, #0
   18758:	bne	18780 <__assert_fail@plt+0x73f4>
   1875c:	mov	r1, r2
   18760:	mov	r0, #64	; 0x40
   18764:	bl	199fc <__assert_fail@plt+0x8670>
   18768:	cmp	r0, #0
   1876c:	movne	r4, r0
   18770:	addeq	r4, r0, #1
   18774:	b	18780 <__assert_fail@plt+0x73f4>
   18778:	add	r4, r4, #1
   1877c:	add	r4, r4, r2
   18780:	mov	r2, r6
   18784:	mov	r1, r4
   18788:	mov	r0, r7
   1878c:	bl	18680 <__assert_fail@plt+0x72f4>
   18790:	str	r4, [r5]
   18794:	pop	{r4, r5, r6, r7, r8, pc}
   18798:	push	{r4, lr}
   1879c:	mov	r2, #1
   187a0:	bl	18724 <__assert_fail@plt+0x7398>
   187a4:	pop	{r4, pc}
   187a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187ac:	sub	sp, sp, #12
   187b0:	mov	fp, r0
   187b4:	mov	sl, r1
   187b8:	mov	r9, r2
   187bc:	mov	r7, r3
   187c0:	ldr	r6, [sp, #48]	; 0x30
   187c4:	ldr	r5, [r1]
   187c8:	asrs	r4, r5, #1
   187cc:	bmi	18928 <__assert_fail@plt+0x759c>
   187d0:	cmp	r5, #0
   187d4:	blt	1893c <__assert_fail@plt+0x75b0>
   187d8:	mvn	r3, #-2147483648	; 0x80000000
   187dc:	sub	r3, r3, r4
   187e0:	cmp	r5, r3
   187e4:	movle	r3, #0
   187e8:	movgt	r3, #1
   187ec:	cmp	r3, #0
   187f0:	addeq	r4, r4, r5
   187f4:	mvnne	r4, #-2147483648	; 0x80000000
   187f8:	mvn	r8, r7
   187fc:	lsr	r8, r8, #31
   18800:	cmp	r7, r4
   18804:	movge	r3, #0
   18808:	andlt	r3, r8, #1
   1880c:	cmp	r3, #0
   18810:	movne	r4, r7
   18814:	cmp	r6, #0
   18818:	blt	18950 <__assert_fail@plt+0x75c4>
   1881c:	cmp	r6, #0
   18820:	beq	189fc <__assert_fail@plt+0x7670>
   18824:	cmp	r4, #0
   18828:	blt	189ac <__assert_fail@plt+0x7620>
   1882c:	mov	r1, r6
   18830:	mvn	r0, #-2147483648	; 0x80000000
   18834:	bl	19c08 <__assert_fail@plt+0x887c>
   18838:	cmp	r0, r4
   1883c:	movge	r0, #0
   18840:	movlt	r0, #1
   18844:	cmp	r0, #0
   18848:	mvnne	r3, #-2147483648	; 0x80000000
   1884c:	strne	r3, [sp, #4]
   18850:	beq	189e4 <__assert_fail@plt+0x7658>
   18854:	mov	r1, r6
   18858:	ldr	r0, [sp, #4]
   1885c:	bl	19c08 <__assert_fail@plt+0x887c>
   18860:	mov	r4, r0
   18864:	mov	r1, r6
   18868:	ldr	r0, [sp, #4]
   1886c:	bl	19e28 <__assert_fail@plt+0x8a9c>
   18870:	ldr	r3, [sp, #4]
   18874:	sub	r1, r3, r1
   18878:	cmp	fp, #0
   1887c:	moveq	r3, #0
   18880:	streq	r3, [sl]
   18884:	sub	r3, r4, r5
   18888:	cmp	r3, r9
   1888c:	bge	18914 <__assert_fail@plt+0x7588>
   18890:	cmp	r9, #0
   18894:	blt	18a08 <__assert_fail@plt+0x767c>
   18898:	cmp	r5, #0
   1889c:	blt	18a1c <__assert_fail@plt+0x7690>
   188a0:	mvn	r3, #-2147483648	; 0x80000000
   188a4:	sub	r3, r3, r9
   188a8:	cmp	r5, r3
   188ac:	movle	r3, #0
   188b0:	movgt	r3, #1
   188b4:	cmp	r3, #0
   188b8:	bne	18ac4 <__assert_fail@plt+0x7738>
   188bc:	add	r5, r5, r9
   188c0:	mov	r4, r5
   188c4:	cmp	r7, r5
   188c8:	movge	r7, #0
   188cc:	andlt	r7, r8, #1
   188d0:	cmp	r7, #0
   188d4:	bne	18ac4 <__assert_fail@plt+0x7738>
   188d8:	cmp	r6, #0
   188dc:	blt	18a30 <__assert_fail@plt+0x76a4>
   188e0:	cmp	r6, #0
   188e4:	beq	18910 <__assert_fail@plt+0x7584>
   188e8:	cmp	r5, #0
   188ec:	blt	18a8c <__assert_fail@plt+0x7700>
   188f0:	mov	r1, r6
   188f4:	mvn	r0, #-2147483648	; 0x80000000
   188f8:	bl	19c08 <__assert_fail@plt+0x887c>
   188fc:	cmp	r5, r0
   18900:	movle	r0, #0
   18904:	movgt	r0, #1
   18908:	cmp	r0, #0
   1890c:	bne	18ac4 <__assert_fail@plt+0x7738>
   18910:	mul	r1, r5, r6
   18914:	mov	r0, fp
   18918:	bl	18630 <__assert_fail@plt+0x72a4>
   1891c:	str	r4, [sl]
   18920:	add	sp, sp, #12
   18924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18928:	rsb	r3, r4, #-2147483648	; 0x80000000
   1892c:	cmp	r5, r3
   18930:	movge	r3, #0
   18934:	movlt	r3, #1
   18938:	b	187ec <__assert_fail@plt+0x7460>
   1893c:	rsb	r3, r5, #-2147483648	; 0x80000000
   18940:	cmp	r4, r3
   18944:	movge	r3, #0
   18948:	movlt	r3, #1
   1894c:	b	187ec <__assert_fail@plt+0x7460>
   18950:	cmp	r4, #0
   18954:	blt	1897c <__assert_fail@plt+0x75f0>
   18958:	cmn	r6, #1
   1895c:	beq	18998 <__assert_fail@plt+0x760c>
   18960:	mov	r1, r6
   18964:	mov	r0, #-2147483648	; 0x80000000
   18968:	bl	19c08 <__assert_fail@plt+0x887c>
   1896c:	cmp	r0, r4
   18970:	movge	r0, #0
   18974:	movlt	r0, #1
   18978:	b	18844 <__assert_fail@plt+0x74b8>
   1897c:	mov	r1, r6
   18980:	mvn	r0, #-2147483648	; 0x80000000
   18984:	bl	19c08 <__assert_fail@plt+0x887c>
   18988:	cmp	r0, r4
   1898c:	movle	r0, #0
   18990:	movgt	r0, #1
   18994:	b	18844 <__assert_fail@plt+0x74b8>
   18998:	add	r0, r4, #-2147483648	; 0x80000000
   1899c:	cmp	r0, #0
   189a0:	movle	r0, #0
   189a4:	movgt	r0, #1
   189a8:	b	18844 <__assert_fail@plt+0x74b8>
   189ac:	cmn	r4, #1
   189b0:	beq	189d0 <__assert_fail@plt+0x7644>
   189b4:	mov	r1, r4
   189b8:	mov	r0, #-2147483648	; 0x80000000
   189bc:	bl	19c08 <__assert_fail@plt+0x887c>
   189c0:	cmp	r6, r0
   189c4:	movle	r0, #0
   189c8:	movgt	r0, #1
   189cc:	b	18844 <__assert_fail@plt+0x74b8>
   189d0:	add	r0, r6, #-2147483648	; 0x80000000
   189d4:	cmp	r0, #0
   189d8:	movle	r0, #0
   189dc:	movgt	r0, #1
   189e0:	b	18844 <__assert_fail@plt+0x74b8>
   189e4:	mul	r1, r6, r4
   189e8:	cmp	r1, #63	; 0x3f
   189ec:	movle	r3, #64	; 0x40
   189f0:	strle	r3, [sp, #4]
   189f4:	bgt	18878 <__assert_fail@plt+0x74ec>
   189f8:	b	18854 <__assert_fail@plt+0x74c8>
   189fc:	mov	r3, #64	; 0x40
   18a00:	str	r3, [sp, #4]
   18a04:	b	18854 <__assert_fail@plt+0x74c8>
   18a08:	rsb	r3, r9, #-2147483648	; 0x80000000
   18a0c:	cmp	r5, r3
   18a10:	movge	r3, #0
   18a14:	movlt	r3, #1
   18a18:	b	188b4 <__assert_fail@plt+0x7528>
   18a1c:	rsb	r3, r5, #-2147483648	; 0x80000000
   18a20:	cmp	r9, r3
   18a24:	movge	r3, #0
   18a28:	movlt	r3, #1
   18a2c:	b	188b4 <__assert_fail@plt+0x7528>
   18a30:	cmp	r5, #0
   18a34:	blt	18a5c <__assert_fail@plt+0x76d0>
   18a38:	cmn	r6, #1
   18a3c:	beq	18a78 <__assert_fail@plt+0x76ec>
   18a40:	mov	r1, r6
   18a44:	mov	r0, #-2147483648	; 0x80000000
   18a48:	bl	19c08 <__assert_fail@plt+0x887c>
   18a4c:	cmp	r5, r0
   18a50:	movle	r0, #0
   18a54:	movgt	r0, #1
   18a58:	b	18908 <__assert_fail@plt+0x757c>
   18a5c:	mov	r1, r6
   18a60:	mvn	r0, #-2147483648	; 0x80000000
   18a64:	bl	19c08 <__assert_fail@plt+0x887c>
   18a68:	cmp	r5, r0
   18a6c:	movge	r0, #0
   18a70:	movlt	r0, #1
   18a74:	b	18908 <__assert_fail@plt+0x757c>
   18a78:	add	r0, r5, #-2147483648	; 0x80000000
   18a7c:	cmp	r0, #0
   18a80:	movle	r0, #0
   18a84:	movgt	r0, #1
   18a88:	b	18908 <__assert_fail@plt+0x757c>
   18a8c:	cmn	r5, #1
   18a90:	beq	18ab0 <__assert_fail@plt+0x7724>
   18a94:	mov	r1, r5
   18a98:	mov	r0, #-2147483648	; 0x80000000
   18a9c:	bl	19c08 <__assert_fail@plt+0x887c>
   18aa0:	cmp	r6, r0
   18aa4:	movle	r0, #0
   18aa8:	movgt	r0, #1
   18aac:	b	18908 <__assert_fail@plt+0x757c>
   18ab0:	add	r0, r6, #-2147483648	; 0x80000000
   18ab4:	cmp	r0, #0
   18ab8:	movle	r0, #0
   18abc:	movgt	r0, #1
   18ac0:	b	18908 <__assert_fail@plt+0x757c>
   18ac4:	bl	18ba0 <__assert_fail@plt+0x7814>
   18ac8:	push	{r4, lr}
   18acc:	bl	19190 <__assert_fail@plt+0x7e04>
   18ad0:	cmp	r0, #0
   18ad4:	popne	{r4, pc}
   18ad8:	bl	18ba0 <__assert_fail@plt+0x7814>
   18adc:	push	{r4, lr}
   18ae0:	mov	r1, #1
   18ae4:	bl	18ac8 <__assert_fail@plt+0x773c>
   18ae8:	pop	{r4, pc}
   18aec:	push	{r4, lr}
   18af0:	bl	19190 <__assert_fail@plt+0x7e04>
   18af4:	cmp	r0, #0
   18af8:	popne	{r4, pc}
   18afc:	bl	18ba0 <__assert_fail@plt+0x7814>
   18b00:	push	{r4, lr}
   18b04:	mov	r1, #1
   18b08:	bl	18aec <__assert_fail@plt+0x7760>
   18b0c:	pop	{r4, pc}
   18b10:	push	{r4, r5, r6, lr}
   18b14:	mov	r5, r0
   18b18:	mov	r4, r1
   18b1c:	mov	r0, r1
   18b20:	bl	185fc <__assert_fail@plt+0x7270>
   18b24:	mov	r2, r4
   18b28:	mov	r1, r5
   18b2c:	bl	110c8 <memcpy@plt>
   18b30:	pop	{r4, r5, r6, pc}
   18b34:	push	{r4, r5, r6, lr}
   18b38:	mov	r5, r0
   18b3c:	mov	r4, r1
   18b40:	mov	r0, r1
   18b44:	bl	18610 <__assert_fail@plt+0x7284>
   18b48:	mov	r2, r4
   18b4c:	mov	r1, r5
   18b50:	bl	110c8 <memcpy@plt>
   18b54:	pop	{r4, r5, r6, pc}
   18b58:	push	{r4, r5, r6, lr}
   18b5c:	mov	r5, r0
   18b60:	mov	r4, r1
   18b64:	add	r0, r1, #1
   18b68:	bl	18610 <__assert_fail@plt+0x7284>
   18b6c:	mov	r2, #0
   18b70:	strb	r2, [r0, r4]
   18b74:	mov	r2, r4
   18b78:	mov	r1, r5
   18b7c:	bl	110c8 <memcpy@plt>
   18b80:	pop	{r4, r5, r6, pc}
   18b84:	push	{r4, lr}
   18b88:	mov	r4, r0
   18b8c:	bl	1120c <strlen@plt>
   18b90:	add	r1, r0, #1
   18b94:	mov	r0, r4
   18b98:	bl	18b10 <__assert_fail@plt+0x7784>
   18b9c:	pop	{r4, pc}
   18ba0:	push	{r4, lr}
   18ba4:	ldr	r3, [pc, #40]	; 18bd4 <__assert_fail@plt+0x7848>
   18ba8:	ldr	r4, [r3]
   18bac:	mov	r2, #5
   18bb0:	ldr	r1, [pc, #32]	; 18bd8 <__assert_fail@plt+0x784c>
   18bb4:	mov	r0, #0
   18bb8:	bl	11104 <dcgettext@plt>
   18bbc:	mov	r3, r0
   18bc0:	ldr	r2, [pc, #20]	; 18bdc <__assert_fail@plt+0x7850>
   18bc4:	mov	r1, #0
   18bc8:	mov	r0, r4
   18bcc:	bl	11194 <error@plt>
   18bd0:	bl	11344 <abort@plt>
   18bd4:	andeq	ip, r2, r0, asr #2
   18bd8:	muleq	r1, r0, r6
   18bdc:	andeq	sl, r1, r8, lsl ip
   18be0:	push	{r4, lr}
   18be4:	orr	r1, r1, #512	; 0x200
   18be8:	bl	14298 <__assert_fail@plt+0x2f0c>
   18bec:	cmp	r0, #0
   18bf0:	popne	{r4, pc}
   18bf4:	bl	1123c <__errno_location@plt>
   18bf8:	ldr	r3, [r0]
   18bfc:	cmp	r3, #22
   18c00:	beq	18c08 <__assert_fail@plt+0x787c>
   18c04:	bl	18ba0 <__assert_fail@plt+0x7814>
   18c08:	ldr	r3, [pc, #12]	; 18c1c <__assert_fail@plt+0x7890>
   18c0c:	mov	r2, #41	; 0x29
   18c10:	ldr	r1, [pc, #8]	; 18c20 <__assert_fail@plt+0x7894>
   18c14:	ldr	r0, [pc, #8]	; 18c24 <__assert_fail@plt+0x7898>
   18c18:	bl	1138c <__assert_fail@plt>
   18c1c:	andeq	fp, r1, r4, lsr #13
   18c20:			; <UNDEFINED> instruction: 0x0001b6b0
   18c24:			; <UNDEFINED> instruction: 0x0001b6bc
   18c28:	ldr	r3, [r0, #48]	; 0x30
   18c2c:	and	r3, r3, #17
   18c30:	cmp	r3, #16
   18c34:	beq	18c58 <__assert_fail@plt+0x78cc>
   18c38:	cmp	r3, #17
   18c3c:	beq	18c48 <__assert_fail@plt+0x78bc>
   18c40:	mov	r0, #0
   18c44:	bx	lr
   18c48:	ldr	r0, [r1, #48]	; 0x30
   18c4c:	adds	r0, r0, #0
   18c50:	movne	r0, #1
   18c54:	bx	lr
   18c58:	mov	r0, #1
   18c5c:	bx	lr
   18c60:	push	{r4, r5, r6, lr}
   18c64:	mov	r5, r0
   18c68:	subs	r4, r1, #0
   18c6c:	blt	18cbc <__assert_fail@plt+0x7930>
   18c70:	cmp	r4, #0
   18c74:	moveq	r0, #0
   18c78:	beq	18c98 <__assert_fail@plt+0x790c>
   18c7c:	mov	r1, r4
   18c80:	mvn	r0, #0
   18c84:	bl	199fc <__assert_fail@plt+0x8670>
   18c88:	ldr	r3, [r5]
   18c8c:	cmp	r0, r3
   18c90:	movcs	r0, #0
   18c94:	movcc	r0, #1
   18c98:	cmp	r0, #0
   18c9c:	mvnne	r3, #0
   18ca0:	strne	r3, [r5]
   18ca4:	movne	r0, #1
   18ca8:	ldreq	r3, [r5]
   18cac:	muleq	r4, r4, r3
   18cb0:	streq	r4, [r5]
   18cb4:	moveq	r0, #0
   18cb8:	pop	{r4, r5, r6, pc}
   18cbc:	mov	r1, r4
   18cc0:	mov	r0, #0
   18cc4:	bl	19c08 <__assert_fail@plt+0x887c>
   18cc8:	ldr	r3, [r5]
   18ccc:	cmp	r0, r3
   18cd0:	movcs	r0, #0
   18cd4:	movcc	r0, #1
   18cd8:	b	18c98 <__assert_fail@plt+0x790c>
   18cdc:	push	{r4, r5, r6, r7, r8, lr}
   18ce0:	subs	r4, r2, #0
   18ce4:	beq	18d14 <__assert_fail@plt+0x7988>
   18ce8:	mov	r7, r1
   18cec:	mov	r6, r0
   18cf0:	mov	r5, #0
   18cf4:	mov	r1, r7
   18cf8:	mov	r0, r6
   18cfc:	bl	18c60 <__assert_fail@plt+0x78d4>
   18d00:	orr	r5, r5, r0
   18d04:	subs	r4, r4, #1
   18d08:	bne	18cf4 <__assert_fail@plt+0x7968>
   18d0c:	mov	r0, r5
   18d10:	pop	{r4, r5, r6, r7, r8, pc}
   18d14:	mov	r5, #0
   18d18:	b	18d0c <__assert_fail@plt+0x7980>
   18d1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18d20:	sub	sp, sp, #12
   18d24:	cmp	r2, #36	; 0x24
   18d28:	bhi	18d68 <__assert_fail@plt+0x79dc>
   18d2c:	mov	r5, r0
   18d30:	mov	r6, r1
   18d34:	mov	r7, r2
   18d38:	mov	r9, r3
   18d3c:	cmp	r1, #0
   18d40:	addeq	r6, sp, #4
   18d44:	bl	1123c <__errno_location@plt>
   18d48:	mov	r8, r0
   18d4c:	mov	r3, #0
   18d50:	str	r3, [r0]
   18d54:	ldrb	r4, [r5]
   18d58:	bl	111e8 <__ctype_b_loc@plt>
   18d5c:	ldr	r1, [r0]
   18d60:	mov	r2, r5
   18d64:	b	18d80 <__assert_fail@plt+0x79f4>
   18d68:	ldr	r3, [pc, #1044]	; 19184 <__assert_fail@plt+0x7df8>
   18d6c:	mov	r2, #85	; 0x55
   18d70:	ldr	r1, [pc, #1040]	; 19188 <__assert_fail@plt+0x7dfc>
   18d74:	ldr	r0, [pc, #1040]	; 1918c <__assert_fail@plt+0x7e00>
   18d78:	bl	1138c <__assert_fail@plt>
   18d7c:	ldrb	r4, [r2, #1]!
   18d80:	lsl	r3, r4, #1
   18d84:	ldrh	r3, [r1, r3]
   18d88:	tst	r3, #8192	; 0x2000
   18d8c:	bne	18d7c <__assert_fail@plt+0x79f0>
   18d90:	cmp	r4, #45	; 0x2d
   18d94:	moveq	r4, #4
   18d98:	bne	18da8 <__assert_fail@plt+0x7a1c>
   18d9c:	mov	r0, r4
   18da0:	add	sp, sp, #12
   18da4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18da8:	mov	r2, r7
   18dac:	mov	r1, r6
   18db0:	mov	r0, r5
   18db4:	bl	11200 <strtoul@plt>
   18db8:	str	r0, [sp]
   18dbc:	ldr	r7, [r6]
   18dc0:	cmp	r5, r7
   18dc4:	beq	18de8 <__assert_fail@plt+0x7a5c>
   18dc8:	ldr	r3, [r8]
   18dcc:	cmp	r3, #0
   18dd0:	beq	18e2c <__assert_fail@plt+0x7aa0>
   18dd4:	cmp	r3, #34	; 0x22
   18dd8:	moveq	r4, #1
   18ddc:	beq	18e30 <__assert_fail@plt+0x7aa4>
   18de0:	mov	r4, #4
   18de4:	b	18d9c <__assert_fail@plt+0x7a10>
   18de8:	ldr	r3, [sp, #40]	; 0x28
   18dec:	cmp	r3, #0
   18df0:	moveq	r4, #4
   18df4:	beq	18d9c <__assert_fail@plt+0x7a10>
   18df8:	ldrb	r1, [r7]
   18dfc:	cmp	r1, #0
   18e00:	moveq	r4, #4
   18e04:	beq	18d9c <__assert_fail@plt+0x7a10>
   18e08:	mov	r0, r3
   18e0c:	bl	11218 <strchr@plt>
   18e10:	cmp	r0, #0
   18e14:	moveq	r4, #4
   18e18:	beq	18d9c <__assert_fail@plt+0x7a10>
   18e1c:	mov	r3, #1
   18e20:	str	r3, [sp]
   18e24:	mov	r4, #0
   18e28:	b	18e40 <__assert_fail@plt+0x7ab4>
   18e2c:	mov	r4, #0
   18e30:	ldr	r3, [sp, #40]	; 0x28
   18e34:	cmp	r3, #0
   18e38:	streq	r0, [r9]
   18e3c:	beq	18d9c <__assert_fail@plt+0x7a10>
   18e40:	ldrb	r5, [r7]
   18e44:	cmp	r5, #0
   18e48:	beq	190c0 <__assert_fail@plt+0x7d34>
   18e4c:	mov	r1, r5
   18e50:	ldr	r0, [sp, #40]	; 0x28
   18e54:	bl	11218 <strchr@plt>
   18e58:	cmp	r0, #0
   18e5c:	beq	18f30 <__assert_fail@plt+0x7ba4>
   18e60:	sub	r3, r5, #69	; 0x45
   18e64:	cmp	r3, #47	; 0x2f
   18e68:	ldrls	pc, [pc, r3, lsl #2]
   18e6c:	b	18f9c <__assert_fail@plt+0x7c10>
   18e70:	andeq	r8, r1, r0, asr #30
   18e74:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e78:	andeq	r8, r1, r0, asr #30
   18e7c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e80:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e84:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e88:	andeq	r8, r1, r0, asr #30
   18e8c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e90:	andeq	r8, r1, r0, asr #30
   18e94:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e98:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18e9c:	andeq	r8, r1, r0, asr #30
   18ea0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ea4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ea8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18eac:	andeq	r8, r1, r0, asr #30
   18eb0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18eb4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18eb8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ebc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ec0:	andeq	r8, r1, r0, asr #30
   18ec4:	andeq	r8, r1, r0, asr #30
   18ec8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ecc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ed0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ed4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ed8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18edc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ee0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ee4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ee8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18eec:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ef0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ef4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ef8:	andeq	r8, r1, r0, asr #30
   18efc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f00:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f04:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f08:	andeq	r8, r1, r0, asr #30
   18f0c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f10:	andeq	r8, r1, r0, asr #30
   18f14:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f18:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f1c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f20:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f24:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f28:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18f2c:	andeq	r8, r1, r0, asr #30
   18f30:	ldr	r3, [sp]
   18f34:	str	r3, [r9]
   18f38:	orr	r4, r4, #2
   18f3c:	b	18d9c <__assert_fail@plt+0x7a10>
   18f40:	mov	r1, #48	; 0x30
   18f44:	ldr	r0, [sp, #40]	; 0x28
   18f48:	bl	11218 <strchr@plt>
   18f4c:	cmp	r0, #0
   18f50:	beq	1908c <__assert_fail@plt+0x7d00>
   18f54:	ldrb	r3, [r7, #1]
   18f58:	cmp	r3, #68	; 0x44
   18f5c:	beq	18f78 <__assert_fail@plt+0x7bec>
   18f60:	cmp	r3, #105	; 0x69
   18f64:	beq	18f84 <__assert_fail@plt+0x7bf8>
   18f68:	cmp	r3, #66	; 0x42
   18f6c:	movne	r7, #1
   18f70:	movne	r1, #1024	; 0x400
   18f74:	bne	18fa4 <__assert_fail@plt+0x7c18>
   18f78:	mov	r7, #2
   18f7c:	mov	r1, #1000	; 0x3e8
   18f80:	b	18fa4 <__assert_fail@plt+0x7c18>
   18f84:	ldrb	r7, [r7, #2]
   18f88:	cmp	r7, #66	; 0x42
   18f8c:	movne	r7, #1
   18f90:	moveq	r7, #3
   18f94:	mov	r1, #1024	; 0x400
   18f98:	b	18fa4 <__assert_fail@plt+0x7c18>
   18f9c:	mov	r7, #1
   18fa0:	mov	r1, #1024	; 0x400
   18fa4:	sub	r5, r5, #66	; 0x42
   18fa8:	cmp	r5, #53	; 0x35
   18fac:	ldrls	pc, [pc, r5, lsl #2]
   18fb0:	b	1916c <__assert_fail@plt+0x7de0>
   18fb4:	andeq	r9, r1, ip, asr #1
   18fb8:	andeq	r9, r1, ip, ror #2
   18fbc:	andeq	r9, r1, ip, ror #2
   18fc0:	ldrdeq	r9, [r1], -ip
   18fc4:	andeq	r9, r1, ip, ror #2
   18fc8:	andeq	r9, r1, ip, ror #1
   18fcc:	andeq	r9, r1, ip, ror #2
   18fd0:	andeq	r9, r1, ip, ror #2
   18fd4:	andeq	r9, r1, ip, ror #2
   18fd8:	strdeq	r9, [r1], -ip
   18fdc:	andeq	r9, r1, ip, ror #2
   18fe0:	andeq	r9, r1, ip, lsl #2
   18fe4:	andeq	r9, r1, ip, ror #2
   18fe8:	andeq	r9, r1, ip, ror #2
   18fec:	andeq	r9, r1, ip, lsl r1
   18ff0:	andeq	r9, r1, ip, ror #2
   18ff4:	andeq	r9, r1, ip, ror #2
   18ff8:	andeq	r9, r1, ip, ror #2
   18ffc:	andeq	r9, r1, ip, lsr #2
   19000:	andeq	r9, r1, ip, ror #2
   19004:	andeq	r9, r1, ip, ror #2
   19008:	andeq	r9, r1, ip, ror #2
   1900c:	andeq	r9, r1, ip, ror #2
   19010:	andeq	r9, r1, ip, asr #2
   19014:	andeq	r9, r1, ip, asr r1
   19018:	andeq	r9, r1, ip, ror #2
   1901c:	andeq	r9, r1, ip, ror #2
   19020:	andeq	r9, r1, ip, ror #2
   19024:	andeq	r9, r1, ip, ror #2
   19028:	andeq	r9, r1, ip, ror #2
   1902c:	andeq	r9, r1, ip, ror #2
   19030:	andeq	r9, r1, ip, ror #2
   19034:	muleq	r1, r8, r0
   19038:	andeq	r9, r1, ip, ror r1
   1903c:	andeq	r9, r1, ip, ror #2
   19040:	andeq	r9, r1, ip, ror #2
   19044:	andeq	r9, r1, ip, ror #2
   19048:	andeq	r9, r1, ip, ror #1
   1904c:	andeq	r9, r1, ip, ror #2
   19050:	andeq	r9, r1, ip, ror #2
   19054:	andeq	r9, r1, ip, ror #2
   19058:	strdeq	r9, [r1], -ip
   1905c:	andeq	r9, r1, ip, ror #2
   19060:	andeq	r9, r1, ip, lsl #2
   19064:	andeq	r9, r1, ip, ror #2
   19068:	andeq	r9, r1, ip, ror #2
   1906c:	andeq	r9, r1, ip, ror #2
   19070:	andeq	r9, r1, ip, ror #2
   19074:	andeq	r9, r1, ip, ror #2
   19078:	andeq	r9, r1, ip, ror #2
   1907c:	andeq	r9, r1, ip, lsr #2
   19080:	andeq	r9, r1, ip, ror #2
   19084:	andeq	r9, r1, ip, ror #2
   19088:	andeq	r9, r1, ip, lsr r1
   1908c:	mov	r7, #1
   19090:	mov	r1, #1024	; 0x400
   19094:	b	18fa4 <__assert_fail@plt+0x7c18>
   19098:	mov	r1, #512	; 0x200
   1909c:	mov	r0, sp
   190a0:	bl	18c60 <__assert_fail@plt+0x78d4>
   190a4:	orr	r4, r4, r0
   190a8:	ldr	r3, [r6]
   190ac:	add	r2, r3, r7
   190b0:	str	r2, [r6]
   190b4:	ldrb	r3, [r3, r7]
   190b8:	cmp	r3, #0
   190bc:	orrne	r4, r4, #2
   190c0:	ldr	r3, [sp]
   190c4:	str	r3, [r9]
   190c8:	b	18d9c <__assert_fail@plt+0x7a10>
   190cc:	mov	r1, #1024	; 0x400
   190d0:	mov	r0, sp
   190d4:	bl	18c60 <__assert_fail@plt+0x78d4>
   190d8:	b	190a4 <__assert_fail@plt+0x7d18>
   190dc:	mov	r2, #6
   190e0:	mov	r0, sp
   190e4:	bl	18cdc <__assert_fail@plt+0x7950>
   190e8:	b	190a4 <__assert_fail@plt+0x7d18>
   190ec:	mov	r2, #3
   190f0:	mov	r0, sp
   190f4:	bl	18cdc <__assert_fail@plt+0x7950>
   190f8:	b	190a4 <__assert_fail@plt+0x7d18>
   190fc:	mov	r2, #1
   19100:	mov	r0, sp
   19104:	bl	18cdc <__assert_fail@plt+0x7950>
   19108:	b	190a4 <__assert_fail@plt+0x7d18>
   1910c:	mov	r2, #2
   19110:	mov	r0, sp
   19114:	bl	18cdc <__assert_fail@plt+0x7950>
   19118:	b	190a4 <__assert_fail@plt+0x7d18>
   1911c:	mov	r2, #5
   19120:	mov	r0, sp
   19124:	bl	18cdc <__assert_fail@plt+0x7950>
   19128:	b	190a4 <__assert_fail@plt+0x7d18>
   1912c:	mov	r2, #4
   19130:	mov	r0, sp
   19134:	bl	18cdc <__assert_fail@plt+0x7950>
   19138:	b	190a4 <__assert_fail@plt+0x7d18>
   1913c:	mov	r1, #2
   19140:	mov	r0, sp
   19144:	bl	18c60 <__assert_fail@plt+0x78d4>
   19148:	b	190a4 <__assert_fail@plt+0x7d18>
   1914c:	mov	r2, #8
   19150:	mov	r0, sp
   19154:	bl	18cdc <__assert_fail@plt+0x7950>
   19158:	b	190a4 <__assert_fail@plt+0x7d18>
   1915c:	mov	r2, #7
   19160:	mov	r0, sp
   19164:	bl	18cdc <__assert_fail@plt+0x7950>
   19168:	b	190a4 <__assert_fail@plt+0x7d18>
   1916c:	ldr	r3, [sp]
   19170:	str	r3, [r9]
   19174:	orr	r4, r4, #2
   19178:	b	18d9c <__assert_fail@plt+0x7a10>
   1917c:	mov	r0, #0
   19180:	b	190a4 <__assert_fail@plt+0x7d18>
   19184:	andeq	fp, r1, ip, asr #13
   19188:	ldrdeq	fp, [r1], -r8
   1918c:	andeq	fp, r1, r8, ror #13
   19190:	push	{r4, lr}
   19194:	mov	r2, r0
   19198:	mov	r3, r1
   1919c:	cmp	r1, #0
   191a0:	cmpne	r0, #0
   191a4:	moveq	r3, #1
   191a8:	moveq	r2, r3
   191ac:	umull	r0, r1, r2, r3
   191b0:	cmp	r0, #0
   191b4:	cmpge	r1, #0
   191b8:	bne	191cc <__assert_fail@plt+0x7e40>
   191bc:	mov	r1, r3
   191c0:	mov	r0, r2
   191c4:	bl	11038 <calloc@plt>
   191c8:	pop	{r4, pc}
   191cc:	bl	1123c <__errno_location@plt>
   191d0:	mov	r3, #12
   191d4:	str	r3, [r0]
   191d8:	mov	r0, #0
   191dc:	pop	{r4, pc}
   191e0:	push	{r4, lr}
   191e4:	cmp	r0, #0
   191e8:	moveq	r0, #1
   191ec:	cmp	r0, #0
   191f0:	blt	191fc <__assert_fail@plt+0x7e70>
   191f4:	bl	111ac <malloc@plt>
   191f8:	pop	{r4, pc}
   191fc:	bl	1123c <__errno_location@plt>
   19200:	mov	r3, #12
   19204:	str	r3, [r0]
   19208:	mov	r0, #0
   1920c:	pop	{r4, pc}
   19210:	push	{r4, lr}
   19214:	cmp	r0, #0
   19218:	beq	19234 <__assert_fail@plt+0x7ea8>
   1921c:	cmp	r1, #0
   19220:	beq	19240 <__assert_fail@plt+0x7eb4>
   19224:	cmp	r1, #0
   19228:	blt	1924c <__assert_fail@plt+0x7ec0>
   1922c:	bl	11110 <realloc@plt>
   19230:	pop	{r4, pc}
   19234:	mov	r0, r1
   19238:	bl	191e0 <__assert_fail@plt+0x7e54>
   1923c:	pop	{r4, pc}
   19240:	bl	12d5c <__assert_fail@plt+0x19d0>
   19244:	mov	r0, #0
   19248:	pop	{r4, pc}
   1924c:	bl	1123c <__errno_location@plt>
   19250:	mov	r3, #12
   19254:	str	r3, [r0]
   19258:	mov	r0, #0
   1925c:	pop	{r4, pc}
   19260:	push	{r4, r5, r6, lr}
   19264:	mov	r5, r0
   19268:	bl	1117c <__fpending@plt>
   1926c:	mov	r6, r0
   19270:	ldr	r4, [r5]
   19274:	and	r4, r4, #32
   19278:	mov	r0, r5
   1927c:	bl	193c0 <__assert_fail@plt+0x8034>
   19280:	cmp	r4, #0
   19284:	bne	192ac <__assert_fail@plt+0x7f20>
   19288:	cmp	r0, #0
   1928c:	popeq	{r4, r5, r6, pc}
   19290:	cmp	r6, #0
   19294:	bne	192c8 <__assert_fail@plt+0x7f3c>
   19298:	bl	1123c <__errno_location@plt>
   1929c:	ldr	r0, [r0]
   192a0:	subs	r0, r0, #9
   192a4:	mvnne	r0, #0
   192a8:	pop	{r4, r5, r6, pc}
   192ac:	cmp	r0, #0
   192b0:	bne	192d0 <__assert_fail@plt+0x7f44>
   192b4:	bl	1123c <__errno_location@plt>
   192b8:	mov	r3, #0
   192bc:	str	r3, [r0]
   192c0:	mvn	r0, #0
   192c4:	pop	{r4, r5, r6, pc}
   192c8:	mvn	r0, #0
   192cc:	pop	{r4, r5, r6, pc}
   192d0:	mvn	r0, #0
   192d4:	pop	{r4, r5, r6, pc}
   192d8:	mov	r2, #0
   192dc:	mov	r3, #0
   192e0:	strd	r2, [r0, #16]
   192e4:	ldr	r3, [pc, #4]	; 192f0 <__assert_fail@plt+0x7f64>
   192e8:	str	r3, [r0, #24]
   192ec:	bx	lr
   192f0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   192f4:	push	{r4, r5, r6, r7, r8, lr}
   192f8:	ldr	r2, [r0, #24]
   192fc:	ldr	r3, [pc, #172]	; 193b0 <__assert_fail@plt+0x8024>
   19300:	cmp	r2, r3
   19304:	bne	1934c <__assert_fail@plt+0x7fc0>
   19308:	ldrd	r6, [r0, #16]
   1930c:	orrs	r3, r6, r7
   19310:	beq	1938c <__assert_fail@plt+0x8000>
   19314:	ldrd	r4, [r1, #96]	; 0x60
   19318:	ldrd	r2, [r0]
   1931c:	cmp	r5, r3
   19320:	cmpeq	r4, r2
   19324:	beq	19360 <__assert_fail@plt+0x7fd4>
   19328:	adds	r2, r6, #1
   1932c:	adc	r3, r7, #0
   19330:	strd	r2, [r0, #16]
   19334:	and	r6, r6, r2
   19338:	and	r7, r7, r3
   1933c:	orrs	ip, r6, r7
   19340:	beq	1937c <__assert_fail@plt+0x7ff0>
   19344:	mov	r0, #0
   19348:	pop	{r4, r5, r6, r7, r8, pc}
   1934c:	ldr	r3, [pc, #96]	; 193b4 <__assert_fail@plt+0x8028>
   19350:	mov	r2, #60	; 0x3c
   19354:	ldr	r1, [pc, #92]	; 193b8 <__assert_fail@plt+0x802c>
   19358:	ldr	r0, [pc, #92]	; 193bc <__assert_fail@plt+0x8030>
   1935c:	bl	1138c <__assert_fail@plt>
   19360:	ldrd	r4, [r1]
   19364:	ldrd	r2, [r0, #8]
   19368:	cmp	r5, r3
   1936c:	cmpeq	r4, r2
   19370:	bne	19328 <__assert_fail@plt+0x7f9c>
   19374:	mov	r0, #1
   19378:	pop	{r4, r5, r6, r7, r8, pc}
   1937c:	orrs	r3, r2, r3
   19380:	bne	19398 <__assert_fail@plt+0x800c>
   19384:	mov	r0, #1
   19388:	pop	{r4, r5, r6, r7, r8, pc}
   1938c:	mov	r2, #1
   19390:	mov	r3, #0
   19394:	strd	r2, [r0, #16]
   19398:	ldrd	r2, [r1]
   1939c:	strd	r2, [r0, #8]
   193a0:	ldrd	r2, [r1, #96]	; 0x60
   193a4:	strd	r2, [r0]
   193a8:	mov	r0, #0
   193ac:	pop	{r4, r5, r6, r7, r8, pc}
   193b0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   193b4:	andeq	fp, r1, r0, lsl r7
   193b8:	andeq	fp, r1, ip, lsl r7
   193bc:	andeq	fp, r1, r0, lsr r7
   193c0:	push	{r4, r5, r6, lr}
   193c4:	sub	sp, sp, #8
   193c8:	mov	r4, r0
   193cc:	bl	1126c <fileno@plt>
   193d0:	cmp	r0, #0
   193d4:	blt	1944c <__assert_fail@plt+0x80c0>
   193d8:	mov	r0, r4
   193dc:	bl	111c4 <__freading@plt>
   193e0:	cmp	r0, #0
   193e4:	beq	19418 <__assert_fail@plt+0x808c>
   193e8:	mov	r0, r4
   193ec:	bl	1126c <fileno@plt>
   193f0:	mov	r3, #1
   193f4:	str	r3, [sp]
   193f8:	mov	r2, #0
   193fc:	mov	r3, #0
   19400:	bl	11158 <lseek64@plt>
   19404:	mvn	r2, #0
   19408:	mvn	r3, #0
   1940c:	cmp	r1, r3
   19410:	cmpeq	r0, r2
   19414:	beq	19458 <__assert_fail@plt+0x80cc>
   19418:	mov	r0, r4
   1941c:	bl	196fc <__assert_fail@plt+0x8370>
   19420:	cmp	r0, #0
   19424:	beq	19458 <__assert_fail@plt+0x80cc>
   19428:	bl	1123c <__errno_location@plt>
   1942c:	mov	r5, r0
   19430:	ldr	r6, [r0]
   19434:	mov	r0, r4
   19438:	bl	11284 <fclose@plt>
   1943c:	cmp	r6, #0
   19440:	strne	r6, [r5]
   19444:	mvnne	r0, #0
   19448:	b	19460 <__assert_fail@plt+0x80d4>
   1944c:	mov	r0, r4
   19450:	bl	11284 <fclose@plt>
   19454:	b	19460 <__assert_fail@plt+0x80d4>
   19458:	mov	r0, r4
   1945c:	bl	11284 <fclose@plt>
   19460:	add	sp, sp, #8
   19464:	pop	{r4, r5, r6, pc}
   19468:	push	{r1, r2, r3}
   1946c:	push	{r4, r5, r6, lr}
   19470:	sub	sp, sp, #12
   19474:	mov	r5, r0
   19478:	ldr	r1, [sp, #28]
   1947c:	add	r3, sp, #32
   19480:	str	r3, [sp, #4]
   19484:	cmp	r1, #0
   19488:	beq	194d0 <__assert_fail@plt+0x8144>
   1948c:	ldr	r3, [pc, #540]	; 196b0 <__assert_fail@plt+0x8324>
   19490:	cmp	r1, r3
   19494:	beq	19500 <__assert_fail@plt+0x8174>
   19498:	cmp	r1, #11
   1949c:	beq	196a0 <__assert_fail@plt+0x8314>
   194a0:	bgt	1962c <__assert_fail@plt+0x82a0>
   194a4:	cmp	r1, #3
   194a8:	beq	196a0 <__assert_fail@plt+0x8314>
   194ac:	ble	195ec <__assert_fail@plt+0x8260>
   194b0:	cmp	r1, #8
   194b4:	beq	1960c <__assert_fail@plt+0x8280>
   194b8:	ble	19604 <__assert_fail@plt+0x8278>
   194bc:	cmp	r1, #9
   194c0:	beq	196a0 <__assert_fail@plt+0x8314>
   194c4:	cmp	r1, #10
   194c8:	bne	19664 <__assert_fail@plt+0x82d8>
   194cc:	b	1960c <__assert_fail@plt+0x8280>
   194d0:	ldr	r3, [sp, #4]
   194d4:	add	r2, r3, #4
   194d8:	str	r2, [sp, #4]
   194dc:	ldr	r2, [r3]
   194e0:	mov	r1, #0
   194e4:	bl	1129c <fcntl64@plt>
   194e8:	mov	r4, r0
   194ec:	mov	r0, r4
   194f0:	add	sp, sp, #12
   194f4:	pop	{r4, r5, r6, lr}
   194f8:	add	sp, sp, #12
   194fc:	bx	lr
   19500:	ldr	r3, [sp, #4]
   19504:	add	r2, r3, #4
   19508:	str	r2, [sp, #4]
   1950c:	ldr	r6, [r3]
   19510:	ldr	r3, [pc, #412]	; 196b4 <__assert_fail@plt+0x8328>
   19514:	ldr	r3, [r3]
   19518:	cmp	r3, #0
   1951c:	blt	1957c <__assert_fail@plt+0x81f0>
   19520:	mov	r2, r6
   19524:	ldr	r1, [pc, #388]	; 196b0 <__assert_fail@plt+0x8324>
   19528:	bl	1129c <fcntl64@plt>
   1952c:	subs	r4, r0, #0
   19530:	blt	19544 <__assert_fail@plt+0x81b8>
   19534:	mov	r2, #1
   19538:	ldr	r3, [pc, #372]	; 196b4 <__assert_fail@plt+0x8328>
   1953c:	str	r2, [r3]
   19540:	b	194ec <__assert_fail@plt+0x8160>
   19544:	bl	1123c <__errno_location@plt>
   19548:	ldr	r3, [r0]
   1954c:	cmp	r3, #22
   19550:	bne	19534 <__assert_fail@plt+0x81a8>
   19554:	mov	r2, r6
   19558:	mov	r1, #0
   1955c:	mov	r0, r5
   19560:	bl	1129c <fcntl64@plt>
   19564:	subs	r4, r0, #0
   19568:	blt	194ec <__assert_fail@plt+0x8160>
   1956c:	mvn	r2, #0
   19570:	ldr	r3, [pc, #316]	; 196b4 <__assert_fail@plt+0x8328>
   19574:	str	r2, [r3]
   19578:	b	195a0 <__assert_fail@plt+0x8214>
   1957c:	mov	r2, r6
   19580:	mov	r1, #0
   19584:	bl	1129c <fcntl64@plt>
   19588:	subs	r4, r0, #0
   1958c:	blt	194ec <__assert_fail@plt+0x8160>
   19590:	ldr	r3, [pc, #284]	; 196b4 <__assert_fail@plt+0x8328>
   19594:	ldr	r3, [r3]
   19598:	cmn	r3, #1
   1959c:	bne	194ec <__assert_fail@plt+0x8160>
   195a0:	mov	r1, #1
   195a4:	mov	r0, r4
   195a8:	bl	1129c <fcntl64@plt>
   195ac:	subs	r2, r0, #0
   195b0:	blt	195cc <__assert_fail@plt+0x8240>
   195b4:	orr	r2, r2, #1
   195b8:	mov	r1, #2
   195bc:	mov	r0, r4
   195c0:	bl	1129c <fcntl64@plt>
   195c4:	cmn	r0, #1
   195c8:	bne	194ec <__assert_fail@plt+0x8160>
   195cc:	bl	1123c <__errno_location@plt>
   195d0:	mov	r5, r0
   195d4:	ldr	r6, [r0]
   195d8:	mov	r0, r4
   195dc:	bl	11350 <close@plt>
   195e0:	str	r6, [r5]
   195e4:	mvn	r4, #0
   195e8:	b	194ec <__assert_fail@plt+0x8160>
   195ec:	cmp	r1, #1
   195f0:	beq	196a0 <__assert_fail@plt+0x8314>
   195f4:	bgt	1960c <__assert_fail@plt+0x8280>
   195f8:	cmp	r1, #0
   195fc:	bne	19664 <__assert_fail@plt+0x82d8>
   19600:	b	1960c <__assert_fail@plt+0x8280>
   19604:	cmp	r1, #4
   19608:	bne	19664 <__assert_fail@plt+0x82d8>
   1960c:	ldr	r3, [sp, #4]
   19610:	add	r2, r3, #4
   19614:	str	r2, [sp, #4]
   19618:	ldr	r2, [r3]
   1961c:	mov	r0, r5
   19620:	bl	1129c <fcntl64@plt>
   19624:	mov	r4, r0
   19628:	b	194ec <__assert_fail@plt+0x8160>
   1962c:	ldr	r3, [pc, #132]	; 196b8 <__assert_fail@plt+0x832c>
   19630:	cmp	r1, r3
   19634:	bgt	19684 <__assert_fail@plt+0x82f8>
   19638:	sub	r3, r3, #1
   1963c:	cmp	r1, r3
   19640:	bge	1960c <__assert_fail@plt+0x8280>
   19644:	sub	r3, r3, #5
   19648:	cmp	r1, r3
   1964c:	beq	196a0 <__assert_fail@plt+0x8314>
   19650:	add	r3, r3, #1
   19654:	cmp	r1, r3
   19658:	beq	1960c <__assert_fail@plt+0x8280>
   1965c:	cmp	r1, #1024	; 0x400
   19660:	beq	1960c <__assert_fail@plt+0x8280>
   19664:	ldr	r3, [sp, #4]
   19668:	add	r2, r3, #4
   1966c:	str	r2, [sp, #4]
   19670:	ldr	r2, [r3]
   19674:	mov	r0, r5
   19678:	bl	1129c <fcntl64@plt>
   1967c:	mov	r4, r0
   19680:	b	194ec <__assert_fail@plt+0x8160>
   19684:	ldr	r3, [pc, #48]	; 196bc <__assert_fail@plt+0x8330>
   19688:	cmp	r1, r3
   1968c:	beq	1960c <__assert_fail@plt+0x8280>
   19690:	blt	196a0 <__assert_fail@plt+0x8314>
   19694:	add	r3, r3, #1
   19698:	cmp	r1, r3
   1969c:	bne	19664 <__assert_fail@plt+0x82d8>
   196a0:	mov	r0, r5
   196a4:	bl	1129c <fcntl64@plt>
   196a8:	mov	r4, r0
   196ac:	b	194ec <__assert_fail@plt+0x8160>
   196b0:	andeq	r0, r0, r6, lsl #8
   196b4:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   196b8:	andeq	r0, r0, r7, lsl #8
   196bc:	andeq	r0, r0, r9, lsl #8
   196c0:	push	{r1, r2, r3}
   196c4:	push	{lr}		; (str lr, [sp, #-4]!)
   196c8:	sub	sp, sp, #8
   196cc:	ldr	r1, [sp, #12]
   196d0:	tst	r1, #64	; 0x40
   196d4:	addne	r3, sp, #20
   196d8:	strne	r3, [sp, #4]
   196dc:	ldrne	r2, [sp, #16]
   196e0:	moveq	r2, #0
   196e4:	bl	111a0 <open64@plt>
   196e8:	bl	17c90 <__assert_fail@plt+0x6904>
   196ec:	add	sp, sp, #8
   196f0:	pop	{lr}		; (ldr lr, [sp], #4)
   196f4:	add	sp, sp, #12
   196f8:	bx	lr
   196fc:	push	{r4, lr}
   19700:	sub	sp, sp, #8
   19704:	subs	r4, r0, #0
   19708:	beq	1971c <__assert_fail@plt+0x8390>
   1970c:	mov	r0, r4
   19710:	bl	111c4 <__freading@plt>
   19714:	cmp	r0, #0
   19718:	bne	1972c <__assert_fail@plt+0x83a0>
   1971c:	mov	r0, r4
   19720:	bl	1108c <fflush@plt>
   19724:	add	sp, sp, #8
   19728:	pop	{r4, pc}
   1972c:	ldr	r3, [r4]
   19730:	tst	r3, #256	; 0x100
   19734:	bne	19744 <__assert_fail@plt+0x83b8>
   19738:	mov	r0, r4
   1973c:	bl	1108c <fflush@plt>
   19740:	b	19724 <__assert_fail@plt+0x8398>
   19744:	mov	r3, #1
   19748:	str	r3, [sp]
   1974c:	mov	r2, #0
   19750:	mov	r3, #0
   19754:	mov	r0, r4
   19758:	bl	19760 <__assert_fail@plt+0x83d4>
   1975c:	b	19738 <__assert_fail@plt+0x83ac>
   19760:	push	{r4, r5, r6, r7, lr}
   19764:	sub	sp, sp, #12
   19768:	mov	r4, r0
   1976c:	mov	r6, r2
   19770:	mov	r7, r3
   19774:	ldr	r5, [sp, #32]
   19778:	ldr	r2, [r0, #8]
   1977c:	ldr	r3, [r0, #4]
   19780:	cmp	r2, r3
   19784:	beq	197a4 <__assert_fail@plt+0x8418>
   19788:	str	r5, [sp]
   1978c:	mov	r2, r6
   19790:	mov	r3, r7
   19794:	mov	r0, r4
   19798:	bl	11290 <fseeko64@plt>
   1979c:	add	sp, sp, #12
   197a0:	pop	{r4, r5, r6, r7, pc}
   197a4:	ldr	r2, [r0, #20]
   197a8:	ldr	r3, [r0, #16]
   197ac:	cmp	r2, r3
   197b0:	bne	19788 <__assert_fail@plt+0x83fc>
   197b4:	ldr	r3, [r0, #36]	; 0x24
   197b8:	cmp	r3, #0
   197bc:	bne	19788 <__assert_fail@plt+0x83fc>
   197c0:	bl	1126c <fileno@plt>
   197c4:	str	r5, [sp]
   197c8:	mov	r2, r6
   197cc:	mov	r3, r7
   197d0:	bl	11158 <lseek64@plt>
   197d4:	mvn	r2, #0
   197d8:	mvn	r3, #0
   197dc:	cmp	r1, r3
   197e0:	cmpeq	r0, r2
   197e4:	beq	19800 <__assert_fail@plt+0x8474>
   197e8:	ldr	r3, [r4]
   197ec:	bic	r3, r3, #16
   197f0:	str	r3, [r4]
   197f4:	strd	r0, [r4, #80]	; 0x50
   197f8:	mov	r0, #0
   197fc:	b	1979c <__assert_fail@plt+0x8410>
   19800:	mvn	r0, #0
   19804:	b	1979c <__assert_fail@plt+0x8410>
   19808:	push	{r4, lr}
   1980c:	mov	r0, #14
   19810:	bl	112cc <nl_langinfo@plt>
   19814:	cmp	r0, #0
   19818:	beq	19830 <__assert_fail@plt+0x84a4>
   1981c:	ldrb	r2, [r0]
   19820:	ldr	r3, [pc, #16]	; 19838 <__assert_fail@plt+0x84ac>
   19824:	cmp	r2, #0
   19828:	moveq	r0, r3
   1982c:	pop	{r4, pc}
   19830:	ldr	r0, [pc]	; 19838 <__assert_fail@plt+0x84ac>
   19834:	pop	{r4, pc}
   19838:	andeq	fp, r1, r8, asr #14
   1983c:	push	{r4, r5, r6, r7, lr}
   19840:	sub	sp, sp, #12
   19844:	mov	r7, r1
   19848:	mov	r5, r2
   1984c:	subs	r6, r0, #0
   19850:	addeq	r6, sp, #4
   19854:	mov	r0, r6
   19858:	bl	11188 <mbrtowc@plt>
   1985c:	mov	r4, r0
   19860:	cmp	r5, #0
   19864:	cmnne	r0, #3
   19868:	bhi	19878 <__assert_fail@plt+0x84ec>
   1986c:	mov	r0, r4
   19870:	add	sp, sp, #12
   19874:	pop	{r4, r5, r6, r7, pc}
   19878:	mov	r0, #0
   1987c:	bl	198f4 <__assert_fail@plt+0x8568>
   19880:	cmp	r0, #0
   19884:	ldrbeq	r3, [r7]
   19888:	streq	r3, [r6]
   1988c:	moveq	r4, #1
   19890:	b	1986c <__assert_fail@plt+0x84e0>
   19894:	push	{r4, r5, r6, lr}
   19898:	mov	r6, r0
   1989c:	mov	r5, r1
   198a0:	subs	r4, r2, #0
   198a4:	beq	198d0 <__assert_fail@plt+0x8544>
   198a8:	mov	r1, r4
   198ac:	mvn	r0, #0
   198b0:	bl	199fc <__assert_fail@plt+0x8670>
   198b4:	cmp	r0, r5
   198b8:	bcs	198d0 <__assert_fail@plt+0x8544>
   198bc:	bl	1123c <__errno_location@plt>
   198c0:	mov	r3, #12
   198c4:	str	r3, [r0]
   198c8:	mov	r0, #0
   198cc:	pop	{r4, r5, r6, pc}
   198d0:	mul	r1, r5, r4
   198d4:	mov	r0, r6
   198d8:	bl	19210 <__assert_fail@plt+0x7e84>
   198dc:	pop	{r4, r5, r6, pc}
   198e0:	push	{r4, lr}
   198e4:	mov	r2, #3
   198e8:	mov	r1, #0
   198ec:	bl	19468 <__assert_fail@plt+0x80dc>
   198f0:	pop	{r4, pc}
   198f4:	push	{lr}		; (str lr, [sp, #-4]!)
   198f8:	sub	sp, sp, #268	; 0x10c
   198fc:	ldr	r2, [pc, #68]	; 19948 <__assert_fail@plt+0x85bc>
   19900:	add	r1, sp, #4
   19904:	bl	19954 <__assert_fail@plt+0x85c8>
   19908:	cmp	r0, #0
   1990c:	movne	r0, #0
   19910:	bne	19940 <__assert_fail@plt+0x85b4>
   19914:	ldr	r1, [pc, #48]	; 1994c <__assert_fail@plt+0x85c0>
   19918:	add	r0, sp, #4
   1991c:	bl	11074 <strcmp@plt>
   19920:	cmp	r0, #0
   19924:	moveq	r0, #0
   19928:	beq	19940 <__assert_fail@plt+0x85b4>
   1992c:	ldr	r1, [pc, #28]	; 19950 <__assert_fail@plt+0x85c4>
   19930:	add	r0, sp, #4
   19934:	bl	11074 <strcmp@plt>
   19938:	adds	r0, r0, #0
   1993c:	movne	r0, #1
   19940:	add	sp, sp, #268	; 0x10c
   19944:	pop	{pc}		; (ldr pc, [sp], #4)
   19948:	andeq	r0, r0, r1, lsl #2
   1994c:	andeq	fp, r1, r0, asr r7
   19950:	andeq	fp, r1, r4, asr r7
   19954:	push	{r4, r5, r6, lr}
   19958:	mov	r6, r1
   1995c:	mov	r4, r2
   19960:	mov	r1, #0
   19964:	bl	112a8 <setlocale@plt>
   19968:	subs	r5, r0, #0
   1996c:	beq	19990 <__assert_fail@plt+0x8604>
   19970:	mov	r0, r5
   19974:	bl	1120c <strlen@plt>
   19978:	cmp	r4, r0
   1997c:	bhi	199a8 <__assert_fail@plt+0x861c>
   19980:	cmp	r4, #0
   19984:	bne	199c0 <__assert_fail@plt+0x8634>
   19988:	mov	r0, #34	; 0x22
   1998c:	pop	{r4, r5, r6, pc}
   19990:	cmp	r4, #0
   19994:	beq	199e4 <__assert_fail@plt+0x8658>
   19998:	mov	r3, #0
   1999c:	strb	r3, [r6]
   199a0:	mov	r0, #22
   199a4:	pop	{r4, r5, r6, pc}
   199a8:	add	r2, r0, #1
   199ac:	mov	r1, r5
   199b0:	mov	r0, r6
   199b4:	bl	110c8 <memcpy@plt>
   199b8:	mov	r0, #0
   199bc:	pop	{r4, r5, r6, pc}
   199c0:	sub	r4, r4, #1
   199c4:	mov	r2, r4
   199c8:	mov	r1, r5
   199cc:	mov	r0, r6
   199d0:	bl	110c8 <memcpy@plt>
   199d4:	mov	r3, #0
   199d8:	strb	r3, [r6, r4]
   199dc:	mov	r0, #34	; 0x22
   199e0:	pop	{r4, r5, r6, pc}
   199e4:	mov	r0, #22
   199e8:	pop	{r4, r5, r6, pc}
   199ec:	push	{r4, lr}
   199f0:	mov	r1, #0
   199f4:	bl	112a8 <setlocale@plt>
   199f8:	pop	{r4, pc}
   199fc:	subs	r2, r1, #1
   19a00:	bxeq	lr
   19a04:	bcc	19bdc <__assert_fail@plt+0x8850>
   19a08:	cmp	r0, r1
   19a0c:	bls	19bc0 <__assert_fail@plt+0x8834>
   19a10:	tst	r1, r2
   19a14:	beq	19bcc <__assert_fail@plt+0x8840>
   19a18:	clz	r3, r0
   19a1c:	clz	r2, r1
   19a20:	sub	r3, r2, r3
   19a24:	rsbs	r3, r3, #31
   19a28:	addne	r3, r3, r3, lsl #1
   19a2c:	mov	r2, #0
   19a30:	addne	pc, pc, r3, lsl #2
   19a34:	nop			; (mov r0, r0)
   19a38:	cmp	r0, r1, lsl #31
   19a3c:	adc	r2, r2, r2
   19a40:	subcs	r0, r0, r1, lsl #31
   19a44:	cmp	r0, r1, lsl #30
   19a48:	adc	r2, r2, r2
   19a4c:	subcs	r0, r0, r1, lsl #30
   19a50:	cmp	r0, r1, lsl #29
   19a54:	adc	r2, r2, r2
   19a58:	subcs	r0, r0, r1, lsl #29
   19a5c:	cmp	r0, r1, lsl #28
   19a60:	adc	r2, r2, r2
   19a64:	subcs	r0, r0, r1, lsl #28
   19a68:	cmp	r0, r1, lsl #27
   19a6c:	adc	r2, r2, r2
   19a70:	subcs	r0, r0, r1, lsl #27
   19a74:	cmp	r0, r1, lsl #26
   19a78:	adc	r2, r2, r2
   19a7c:	subcs	r0, r0, r1, lsl #26
   19a80:	cmp	r0, r1, lsl #25
   19a84:	adc	r2, r2, r2
   19a88:	subcs	r0, r0, r1, lsl #25
   19a8c:	cmp	r0, r1, lsl #24
   19a90:	adc	r2, r2, r2
   19a94:	subcs	r0, r0, r1, lsl #24
   19a98:	cmp	r0, r1, lsl #23
   19a9c:	adc	r2, r2, r2
   19aa0:	subcs	r0, r0, r1, lsl #23
   19aa4:	cmp	r0, r1, lsl #22
   19aa8:	adc	r2, r2, r2
   19aac:	subcs	r0, r0, r1, lsl #22
   19ab0:	cmp	r0, r1, lsl #21
   19ab4:	adc	r2, r2, r2
   19ab8:	subcs	r0, r0, r1, lsl #21
   19abc:	cmp	r0, r1, lsl #20
   19ac0:	adc	r2, r2, r2
   19ac4:	subcs	r0, r0, r1, lsl #20
   19ac8:	cmp	r0, r1, lsl #19
   19acc:	adc	r2, r2, r2
   19ad0:	subcs	r0, r0, r1, lsl #19
   19ad4:	cmp	r0, r1, lsl #18
   19ad8:	adc	r2, r2, r2
   19adc:	subcs	r0, r0, r1, lsl #18
   19ae0:	cmp	r0, r1, lsl #17
   19ae4:	adc	r2, r2, r2
   19ae8:	subcs	r0, r0, r1, lsl #17
   19aec:	cmp	r0, r1, lsl #16
   19af0:	adc	r2, r2, r2
   19af4:	subcs	r0, r0, r1, lsl #16
   19af8:	cmp	r0, r1, lsl #15
   19afc:	adc	r2, r2, r2
   19b00:	subcs	r0, r0, r1, lsl #15
   19b04:	cmp	r0, r1, lsl #14
   19b08:	adc	r2, r2, r2
   19b0c:	subcs	r0, r0, r1, lsl #14
   19b10:	cmp	r0, r1, lsl #13
   19b14:	adc	r2, r2, r2
   19b18:	subcs	r0, r0, r1, lsl #13
   19b1c:	cmp	r0, r1, lsl #12
   19b20:	adc	r2, r2, r2
   19b24:	subcs	r0, r0, r1, lsl #12
   19b28:	cmp	r0, r1, lsl #11
   19b2c:	adc	r2, r2, r2
   19b30:	subcs	r0, r0, r1, lsl #11
   19b34:	cmp	r0, r1, lsl #10
   19b38:	adc	r2, r2, r2
   19b3c:	subcs	r0, r0, r1, lsl #10
   19b40:	cmp	r0, r1, lsl #9
   19b44:	adc	r2, r2, r2
   19b48:	subcs	r0, r0, r1, lsl #9
   19b4c:	cmp	r0, r1, lsl #8
   19b50:	adc	r2, r2, r2
   19b54:	subcs	r0, r0, r1, lsl #8
   19b58:	cmp	r0, r1, lsl #7
   19b5c:	adc	r2, r2, r2
   19b60:	subcs	r0, r0, r1, lsl #7
   19b64:	cmp	r0, r1, lsl #6
   19b68:	adc	r2, r2, r2
   19b6c:	subcs	r0, r0, r1, lsl #6
   19b70:	cmp	r0, r1, lsl #5
   19b74:	adc	r2, r2, r2
   19b78:	subcs	r0, r0, r1, lsl #5
   19b7c:	cmp	r0, r1, lsl #4
   19b80:	adc	r2, r2, r2
   19b84:	subcs	r0, r0, r1, lsl #4
   19b88:	cmp	r0, r1, lsl #3
   19b8c:	adc	r2, r2, r2
   19b90:	subcs	r0, r0, r1, lsl #3
   19b94:	cmp	r0, r1, lsl #2
   19b98:	adc	r2, r2, r2
   19b9c:	subcs	r0, r0, r1, lsl #2
   19ba0:	cmp	r0, r1, lsl #1
   19ba4:	adc	r2, r2, r2
   19ba8:	subcs	r0, r0, r1, lsl #1
   19bac:	cmp	r0, r1
   19bb0:	adc	r2, r2, r2
   19bb4:	subcs	r0, r0, r1
   19bb8:	mov	r0, r2
   19bbc:	bx	lr
   19bc0:	moveq	r0, #1
   19bc4:	movne	r0, #0
   19bc8:	bx	lr
   19bcc:	clz	r2, r1
   19bd0:	rsb	r2, r2, #31
   19bd4:	lsr	r0, r0, r2
   19bd8:	bx	lr
   19bdc:	cmp	r0, #0
   19be0:	mvnne	r0, #0
   19be4:	b	19e84 <__assert_fail@plt+0x8af8>
   19be8:	cmp	r1, #0
   19bec:	beq	19bdc <__assert_fail@plt+0x8850>
   19bf0:	push	{r0, r1, lr}
   19bf4:	bl	199fc <__assert_fail@plt+0x8670>
   19bf8:	pop	{r1, r2, lr}
   19bfc:	mul	r3, r2, r0
   19c00:	sub	r1, r1, r3
   19c04:	bx	lr
   19c08:	cmp	r1, #0
   19c0c:	beq	19e18 <__assert_fail@plt+0x8a8c>
   19c10:	eor	ip, r0, r1
   19c14:	rsbmi	r1, r1, #0
   19c18:	subs	r2, r1, #1
   19c1c:	beq	19de4 <__assert_fail@plt+0x8a58>
   19c20:	movs	r3, r0
   19c24:	rsbmi	r3, r0, #0
   19c28:	cmp	r3, r1
   19c2c:	bls	19df0 <__assert_fail@plt+0x8a64>
   19c30:	tst	r1, r2
   19c34:	beq	19e00 <__assert_fail@plt+0x8a74>
   19c38:	clz	r2, r3
   19c3c:	clz	r0, r1
   19c40:	sub	r2, r0, r2
   19c44:	rsbs	r2, r2, #31
   19c48:	addne	r2, r2, r2, lsl #1
   19c4c:	mov	r0, #0
   19c50:	addne	pc, pc, r2, lsl #2
   19c54:	nop			; (mov r0, r0)
   19c58:	cmp	r3, r1, lsl #31
   19c5c:	adc	r0, r0, r0
   19c60:	subcs	r3, r3, r1, lsl #31
   19c64:	cmp	r3, r1, lsl #30
   19c68:	adc	r0, r0, r0
   19c6c:	subcs	r3, r3, r1, lsl #30
   19c70:	cmp	r3, r1, lsl #29
   19c74:	adc	r0, r0, r0
   19c78:	subcs	r3, r3, r1, lsl #29
   19c7c:	cmp	r3, r1, lsl #28
   19c80:	adc	r0, r0, r0
   19c84:	subcs	r3, r3, r1, lsl #28
   19c88:	cmp	r3, r1, lsl #27
   19c8c:	adc	r0, r0, r0
   19c90:	subcs	r3, r3, r1, lsl #27
   19c94:	cmp	r3, r1, lsl #26
   19c98:	adc	r0, r0, r0
   19c9c:	subcs	r3, r3, r1, lsl #26
   19ca0:	cmp	r3, r1, lsl #25
   19ca4:	adc	r0, r0, r0
   19ca8:	subcs	r3, r3, r1, lsl #25
   19cac:	cmp	r3, r1, lsl #24
   19cb0:	adc	r0, r0, r0
   19cb4:	subcs	r3, r3, r1, lsl #24
   19cb8:	cmp	r3, r1, lsl #23
   19cbc:	adc	r0, r0, r0
   19cc0:	subcs	r3, r3, r1, lsl #23
   19cc4:	cmp	r3, r1, lsl #22
   19cc8:	adc	r0, r0, r0
   19ccc:	subcs	r3, r3, r1, lsl #22
   19cd0:	cmp	r3, r1, lsl #21
   19cd4:	adc	r0, r0, r0
   19cd8:	subcs	r3, r3, r1, lsl #21
   19cdc:	cmp	r3, r1, lsl #20
   19ce0:	adc	r0, r0, r0
   19ce4:	subcs	r3, r3, r1, lsl #20
   19ce8:	cmp	r3, r1, lsl #19
   19cec:	adc	r0, r0, r0
   19cf0:	subcs	r3, r3, r1, lsl #19
   19cf4:	cmp	r3, r1, lsl #18
   19cf8:	adc	r0, r0, r0
   19cfc:	subcs	r3, r3, r1, lsl #18
   19d00:	cmp	r3, r1, lsl #17
   19d04:	adc	r0, r0, r0
   19d08:	subcs	r3, r3, r1, lsl #17
   19d0c:	cmp	r3, r1, lsl #16
   19d10:	adc	r0, r0, r0
   19d14:	subcs	r3, r3, r1, lsl #16
   19d18:	cmp	r3, r1, lsl #15
   19d1c:	adc	r0, r0, r0
   19d20:	subcs	r3, r3, r1, lsl #15
   19d24:	cmp	r3, r1, lsl #14
   19d28:	adc	r0, r0, r0
   19d2c:	subcs	r3, r3, r1, lsl #14
   19d30:	cmp	r3, r1, lsl #13
   19d34:	adc	r0, r0, r0
   19d38:	subcs	r3, r3, r1, lsl #13
   19d3c:	cmp	r3, r1, lsl #12
   19d40:	adc	r0, r0, r0
   19d44:	subcs	r3, r3, r1, lsl #12
   19d48:	cmp	r3, r1, lsl #11
   19d4c:	adc	r0, r0, r0
   19d50:	subcs	r3, r3, r1, lsl #11
   19d54:	cmp	r3, r1, lsl #10
   19d58:	adc	r0, r0, r0
   19d5c:	subcs	r3, r3, r1, lsl #10
   19d60:	cmp	r3, r1, lsl #9
   19d64:	adc	r0, r0, r0
   19d68:	subcs	r3, r3, r1, lsl #9
   19d6c:	cmp	r3, r1, lsl #8
   19d70:	adc	r0, r0, r0
   19d74:	subcs	r3, r3, r1, lsl #8
   19d78:	cmp	r3, r1, lsl #7
   19d7c:	adc	r0, r0, r0
   19d80:	subcs	r3, r3, r1, lsl #7
   19d84:	cmp	r3, r1, lsl #6
   19d88:	adc	r0, r0, r0
   19d8c:	subcs	r3, r3, r1, lsl #6
   19d90:	cmp	r3, r1, lsl #5
   19d94:	adc	r0, r0, r0
   19d98:	subcs	r3, r3, r1, lsl #5
   19d9c:	cmp	r3, r1, lsl #4
   19da0:	adc	r0, r0, r0
   19da4:	subcs	r3, r3, r1, lsl #4
   19da8:	cmp	r3, r1, lsl #3
   19dac:	adc	r0, r0, r0
   19db0:	subcs	r3, r3, r1, lsl #3
   19db4:	cmp	r3, r1, lsl #2
   19db8:	adc	r0, r0, r0
   19dbc:	subcs	r3, r3, r1, lsl #2
   19dc0:	cmp	r3, r1, lsl #1
   19dc4:	adc	r0, r0, r0
   19dc8:	subcs	r3, r3, r1, lsl #1
   19dcc:	cmp	r3, r1
   19dd0:	adc	r0, r0, r0
   19dd4:	subcs	r3, r3, r1
   19dd8:	cmp	ip, #0
   19ddc:	rsbmi	r0, r0, #0
   19de0:	bx	lr
   19de4:	teq	ip, r0
   19de8:	rsbmi	r0, r0, #0
   19dec:	bx	lr
   19df0:	movcc	r0, #0
   19df4:	asreq	r0, ip, #31
   19df8:	orreq	r0, r0, #1
   19dfc:	bx	lr
   19e00:	clz	r2, r1
   19e04:	rsb	r2, r2, #31
   19e08:	cmp	ip, #0
   19e0c:	lsr	r0, r3, r2
   19e10:	rsbmi	r0, r0, #0
   19e14:	bx	lr
   19e18:	cmp	r0, #0
   19e1c:	mvngt	r0, #-2147483648	; 0x80000000
   19e20:	movlt	r0, #-2147483648	; 0x80000000
   19e24:	b	19e84 <__assert_fail@plt+0x8af8>
   19e28:	cmp	r1, #0
   19e2c:	beq	19e18 <__assert_fail@plt+0x8a8c>
   19e30:	push	{r0, r1, lr}
   19e34:	bl	19c10 <__assert_fail@plt+0x8884>
   19e38:	pop	{r1, r2, lr}
   19e3c:	mul	r3, r2, r0
   19e40:	sub	r1, r1, r3
   19e44:	bx	lr
   19e48:	cmp	r3, #0
   19e4c:	cmpeq	r2, #0
   19e50:	bne	19e68 <__assert_fail@plt+0x8adc>
   19e54:	cmp	r1, #0
   19e58:	cmpeq	r0, #0
   19e5c:	mvnne	r1, #0
   19e60:	mvnne	r0, #0
   19e64:	b	19e84 <__assert_fail@plt+0x8af8>
   19e68:	sub	sp, sp, #8
   19e6c:	push	{sp, lr}
   19e70:	bl	19e94 <__assert_fail@plt+0x8b08>
   19e74:	ldr	lr, [sp, #4]
   19e78:	add	sp, sp, #8
   19e7c:	pop	{r2, r3}
   19e80:	bx	lr
   19e84:	push	{r1, lr}
   19e88:	mov	r0, #8
   19e8c:	bl	1105c <raise@plt>
   19e90:	pop	{r1, pc}
   19e94:	cmp	r1, r3
   19e98:	push	{r4, r5, r6, r7, r8, r9, lr}
   19e9c:	cmpeq	r0, r2
   19ea0:	mov	r4, r0
   19ea4:	mov	r5, r1
   19ea8:	ldr	r9, [sp, #28]
   19eac:	movcc	r0, #0
   19eb0:	movcc	r1, #0
   19eb4:	bcc	19fac <__assert_fail@plt+0x8c20>
   19eb8:	cmp	r3, #0
   19ebc:	clzeq	ip, r2
   19ec0:	clzne	ip, r3
   19ec4:	addeq	ip, ip, #32
   19ec8:	cmp	r5, #0
   19ecc:	clzeq	r1, r4
   19ed0:	addeq	r1, r1, #32
   19ed4:	clzne	r1, r5
   19ed8:	sub	ip, ip, r1
   19edc:	sub	lr, ip, #32
   19ee0:	lsl	r7, r3, ip
   19ee4:	rsb	r8, ip, #32
   19ee8:	orr	r7, r7, r2, lsl lr
   19eec:	orr	r7, r7, r2, lsr r8
   19ef0:	lsl	r6, r2, ip
   19ef4:	cmp	r5, r7
   19ef8:	cmpeq	r4, r6
   19efc:	movcc	r0, #0
   19f00:	movcc	r1, #0
   19f04:	bcc	19f20 <__assert_fail@plt+0x8b94>
   19f08:	mov	r3, #1
   19f0c:	subs	r4, r4, r6
   19f10:	lsl	r1, r3, lr
   19f14:	lsl	r0, r3, ip
   19f18:	orr	r1, r1, r3, lsr r8
   19f1c:	sbc	r5, r5, r7
   19f20:	cmp	ip, #0
   19f24:	beq	19fac <__assert_fail@plt+0x8c20>
   19f28:	lsrs	r3, r7, #1
   19f2c:	rrx	r2, r6
   19f30:	mov	r6, ip
   19f34:	b	19f58 <__assert_fail@plt+0x8bcc>
   19f38:	subs	r4, r4, r2
   19f3c:	sbc	r5, r5, r3
   19f40:	adds	r4, r4, r4
   19f44:	adc	r5, r5, r5
   19f48:	adds	r4, r4, #1
   19f4c:	adc	r5, r5, #0
   19f50:	subs	r6, r6, #1
   19f54:	beq	19f74 <__assert_fail@plt+0x8be8>
   19f58:	cmp	r5, r3
   19f5c:	cmpeq	r4, r2
   19f60:	bcs	19f38 <__assert_fail@plt+0x8bac>
   19f64:	adds	r4, r4, r4
   19f68:	adc	r5, r5, r5
   19f6c:	subs	r6, r6, #1
   19f70:	bne	19f58 <__assert_fail@plt+0x8bcc>
   19f74:	lsr	r6, r4, ip
   19f78:	lsr	r7, r5, ip
   19f7c:	orr	r6, r6, r5, lsl r8
   19f80:	adds	r2, r0, r4
   19f84:	orr	r6, r6, r5, lsr lr
   19f88:	adc	r3, r1, r5
   19f8c:	lsl	r1, r7, ip
   19f90:	orr	r1, r1, r6, lsl lr
   19f94:	lsl	r0, r6, ip
   19f98:	orr	r1, r1, r6, lsr r8
   19f9c:	subs	r0, r2, r0
   19fa0:	mov	r4, r6
   19fa4:	mov	r5, r7
   19fa8:	sbc	r1, r3, r1
   19fac:	cmp	r9, #0
   19fb0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19fb4:	strd	r4, [r9]
   19fb8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19fbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19fc0:	mov	r7, r0
   19fc4:	ldr	r6, [pc, #72]	; 1a014 <__assert_fail@plt+0x8c88>
   19fc8:	ldr	r5, [pc, #72]	; 1a018 <__assert_fail@plt+0x8c8c>
   19fcc:	add	r6, pc, r6
   19fd0:	add	r5, pc, r5
   19fd4:	sub	r6, r6, r5
   19fd8:	mov	r8, r1
   19fdc:	mov	r9, r2
   19fe0:	bl	1100c <fstatfs64@plt-0x20>
   19fe4:	asrs	r6, r6, #2
   19fe8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19fec:	mov	r4, #0
   19ff0:	add	r4, r4, #1
   19ff4:	ldr	r3, [r5], #4
   19ff8:	mov	r2, r9
   19ffc:	mov	r1, r8
   1a000:	mov	r0, r7
   1a004:	blx	r3
   1a008:	cmp	r6, r4
   1a00c:	bne	19ff0 <__assert_fail@plt+0x8c64>
   1a010:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a014:	andeq	r1, r1, ip, lsr pc
   1a018:	andeq	r1, r1, r4, lsr pc
   1a01c:	bx	lr
   1a020:	ldr	r3, [pc, #12]	; 1a034 <__assert_fail@plt+0x8ca8>
   1a024:	mov	r1, #0
   1a028:	add	r3, pc, r3
   1a02c:	ldr	r2, [r3]
   1a030:	b	11248 <__cxa_atexit@plt>
   1a034:	andeq	r2, r1, r8, lsl #2

Disassembly of section .fini:

0001a038 <.fini>:
   1a038:	push	{r3, lr}
   1a03c:	pop	{r3, pc}
