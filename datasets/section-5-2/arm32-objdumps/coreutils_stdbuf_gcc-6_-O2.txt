
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010d00 <.init>:
   10d00:	push	{r3, lr}
   10d04:	bl	11710 <__assert_fail@plt+0x75c>
   10d08:	pop	{r3, pc}

Disassembly of section .plt:

00010d0c <calloc@plt-0x14>:
   10d0c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d10:	ldr	lr, [pc, #4]	; 10d1c <calloc@plt-0x4>
   10d14:	add	lr, pc, lr
   10d18:	ldr	pc, [lr, #8]!
   10d1c:	andeq	r6, r1, r4, ror #5

00010d20 <calloc@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #740]!	; 0x2e4

00010d2c <fputs_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #732]!	; 0x2dc

00010d38 <raise@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #724]!	; 0x2d4

00010d44 <strcmp@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d50 <fflush@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #708]!	; 0x2c4

00010d5c <free@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #700]!	; 0x2bc

00010d68 <_exit@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #692]!	; 0x2b4

00010d74 <memcpy@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #684]!	; 0x2ac

00010d80 <execvp@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #676]!	; 0x2a4

00010d8c <__strtoull_internal@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #668]!	; 0x29c

00010d98 <mbsinit@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #660]!	; 0x294

00010da4 <memcmp@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #652]!	; 0x28c

00010db0 <fputc_unlocked@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #644]!	; 0x284

00010dbc <dcgettext@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #636]!	; 0x27c

00010dc8 <realloc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #628]!	; 0x274

00010dd4 <textdomain@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #620]!	; 0x26c

00010de0 <iswprint@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #612]!	; 0x264

00010dec <readlink@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #604]!	; 0x25c

00010df8 <fwrite@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #596]!	; 0x254

00010e04 <lseek64@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #588]!	; 0x24c

00010e10 <__ctype_get_mb_cur_max@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #580]!	; 0x244

00010e1c <__fpending@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #572]!	; 0x23c

00010e28 <mbrtowc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #564]!	; 0x234

00010e34 <error@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #556]!	; 0x22c

00010e40 <__asprintf_chk@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #548]!	; 0x224

00010e4c <getenv@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #540]!	; 0x21c

00010e58 <malloc@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #532]!	; 0x214

00010e64 <__libc_start_main@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #524]!	; 0x20c

00010e70 <__freading@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #516]!	; 0x204

00010e7c <__ctype_toupper_loc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #508]!	; 0x1fc

00010e88 <__gmon_start__@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #500]!	; 0x1f4

00010e94 <mempcpy@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #492]!	; 0x1ec

00010ea0 <getopt_long@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #484]!	; 0x1e4

00010eac <__ctype_b_loc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #476]!	; 0x1dc

00010eb8 <exit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ec4 <strlen@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #460]!	; 0x1cc

00010ed0 <strchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #452]!	; 0x1c4

00010edc <__errno_location@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #444]!	; 0x1bc

00010ee8 <__cxa_atexit@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #436]!	; 0x1b4

00010ef4 <memset@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #428]!	; 0x1ac

00010f00 <__printf_chk@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #420]!	; 0x1a4

00010f0c <fileno@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #412]!	; 0x19c

00010f18 <__fprintf_chk@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #404]!	; 0x194

00010f24 <access@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #396]!	; 0x18c

00010f30 <fclose@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #388]!	; 0x184

00010f3c <fseeko64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #380]!	; 0x17c

00010f48 <strtok@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #372]!	; 0x174

00010f54 <setlocale@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #364]!	; 0x16c

00010f60 <putenv@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #356]!	; 0x164

00010f6c <strrchr@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #348]!	; 0x15c

00010f78 <nl_langinfo@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #340]!	; 0x154

00010f84 <bindtextdomain@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #332]!	; 0x14c

00010f90 <__xstat64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #324]!	; 0x144

00010f9c <strncmp@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #316]!	; 0x13c

00010fa8 <abort@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #308]!	; 0x134

00010fb4 <__assert_fail@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #300]!	; 0x12c

Disassembly of section .text:

00010fc0 <.text>:
   10fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fc4:	mov	r9, r0
   10fc8:	sub	sp, sp, #156	; 0x9c
   10fcc:	ldr	r0, [r1]
   10fd0:	mov	r7, r1
   10fd4:	bl	11e90 <__assert_fail@plt+0xedc>
   10fd8:	ldr	r1, [pc, #1604]	; 11624 <__assert_fail@plt+0x670>
   10fdc:	mov	r0, #6
   10fe0:	bl	10f54 <setlocale@plt>
   10fe4:	ldr	r1, [pc, #1596]	; 11628 <__assert_fail@plt+0x674>
   10fe8:	ldr	r0, [pc, #1596]	; 1162c <__assert_fail@plt+0x678>
   10fec:	bl	10f84 <bindtextdomain@plt>
   10ff0:	ldr	r0, [pc, #1588]	; 1162c <__assert_fail@plt+0x678>
   10ff4:	bl	10dd4 <textdomain@plt>
   10ff8:	ldr	r3, [pc, #1584]	; 11630 <__assert_fail@plt+0x67c>
   10ffc:	mov	r2, #125	; 0x7d
   11000:	ldr	r0, [pc, #1580]	; 11634 <__assert_fail@plt+0x680>
   11004:	str	r2, [r3]
   11008:	bl	15c18 <__assert_fail@plt+0x4c64>
   1100c:	ldr	r6, [pc, #1572]	; 11638 <__assert_fail@plt+0x684>
   11010:	ldr	r5, [pc, #1572]	; 1163c <__assert_fail@plt+0x688>
   11014:	ldr	fp, [pc, #1572]	; 11640 <__assert_fail@plt+0x68c>
   11018:	ldr	sl, [pc, #1572]	; 11644 <__assert_fail@plt+0x690>
   1101c:	ldr	r8, [pc, #1572]	; 11648 <__assert_fail@plt+0x694>
   11020:	mov	r4, #0
   11024:	str	r4, [sp]
   11028:	mov	r3, fp
   1102c:	mov	r2, sl
   11030:	mov	r1, r7
   11034:	mov	r0, r9
   11038:	bl	10ea0 <getopt_long@plt>
   1103c:	cmn	r0, #1
   11040:	beq	111e0 <__assert_fail@plt+0x22c>
   11044:	cmp	r0, #101	; 0x65
   11048:	beq	110b0 <__assert_fail@plt+0xfc>
   1104c:	bgt	11098 <__assert_fail@plt+0xe4>
   11050:	cmn	r0, #3
   11054:	beq	11068 <__assert_fail@plt+0xb4>
   11058:	cmn	r0, #2
   1105c:	bne	110a8 <__assert_fail@plt+0xf4>
   11060:	mov	r0, r4
   11064:	bl	117fc <__assert_fail@plt+0x848>
   11068:	ldr	r1, [pc, #1500]	; 1164c <__assert_fail@plt+0x698>
   1106c:	ldr	r3, [pc, #1500]	; 11650 <__assert_fail@plt+0x69c>
   11070:	ldr	r2, [pc, #1500]	; 11654 <__assert_fail@plt+0x6a0>
   11074:	str	r4, [sp, #4]
   11078:	ldr	r0, [r1]
   1107c:	ldr	r3, [r3]
   11080:	ldr	r1, [pc, #1488]	; 11658 <__assert_fail@plt+0x6a4>
   11084:	str	r2, [sp]
   11088:	ldr	r2, [pc, #1484]	; 1165c <__assert_fail@plt+0x6a8>
   1108c:	bl	1418c <__assert_fail@plt+0x31d8>
   11090:	mov	r0, r4
   11094:	bl	10eb8 <exit@plt>
   11098:	cmp	r0, #105	; 0x69
   1109c:	beq	110b0 <__assert_fail@plt+0xfc>
   110a0:	cmp	r0, #111	; 0x6f
   110a4:	beq	110b0 <__assert_fail@plt+0xfc>
   110a8:	mov	r0, #125	; 0x7d
   110ac:	bl	117fc <__assert_fail@plt+0x848>
   110b0:	ldr	r3, [pc, #1448]	; 11660 <__assert_fail@plt+0x6ac>
   110b4:	add	r3, r3, r0, lsl #2
   110b8:	ldr	r2, [r3, #-348]	; 0xfffffea4
   110bc:	cmp	r2, #2
   110c0:	bhi	115f4 <__assert_fail@plt+0x640>
   110c4:	mov	r3, #12
   110c8:	ldr	r4, [r5]
   110cc:	mla	r3, r3, r2, r6
   110d0:	str	r0, [r3, #4]
   110d4:	ldrb	r3, [r4]
   110d8:	sub	r3, r3, #9
   110dc:	cmp	r3, #23
   110e0:	bhi	11110 <__assert_fail@plt+0x15c>
   110e4:	mov	r1, #1
   110e8:	ands	r3, r8, r1, lsl r3
   110ec:	beq	11110 <__assert_fail@plt+0x15c>
   110f0:	add	r4, r4, #1
   110f4:	str	r4, [r5]
   110f8:	ldrb	r3, [r4]
   110fc:	sub	r3, r3, #9
   11100:	cmp	r3, #23
   11104:	bhi	11110 <__assert_fail@plt+0x15c>
   11108:	ands	r3, r8, r1, lsl r3
   1110c:	bne	110f0 <__assert_fail@plt+0x13c>
   11110:	add	r3, r2, r2, lsl #1
   11114:	cmp	r0, #105	; 0x69
   11118:	add	r3, r6, r3, lsl #2
   1111c:	str	r4, [r3, #8]
   11120:	beq	111b0 <__assert_fail@plt+0x1fc>
   11124:	ldr	r1, [pc, #1336]	; 11664 <__assert_fail@plt+0x6b0>
   11128:	mov	r0, r4
   1112c:	str	r2, [sp, #20]
   11130:	bl	10d44 <strcmp@plt>
   11134:	ldr	r2, [sp, #20]
   11138:	cmp	r0, #0
   1113c:	beq	11020 <__assert_fail@plt+0x6c>
   11140:	mov	r3, r4
   11144:	mov	r4, r2
   11148:	ldr	r2, [pc, #1304]	; 11668 <__assert_fail@plt+0x6b4>
   1114c:	mov	r0, r3
   11150:	str	r2, [sp]
   11154:	add	r3, sp, #48	; 0x30
   11158:	mov	r2, #10
   1115c:	mov	r1, #0
   11160:	bl	148d4 <__assert_fail@plt+0x3920>
   11164:	subs	r8, r0, #0
   11168:	beq	114a4 <__assert_fail@plt+0x4f0>
   1116c:	bl	10edc <__errno_location@plt>
   11170:	cmp	r8, #1
   11174:	ldrne	r4, [r0]
   11178:	beq	114c0 <__assert_fail@plt+0x50c>
   1117c:	mov	r2, #5
   11180:	ldr	r1, [pc, #1252]	; 1166c <__assert_fail@plt+0x6b8>
   11184:	str	r4, [r0]
   11188:	mov	r0, #0
   1118c:	bl	10dbc <dcgettext@plt>
   11190:	mov	r6, r0
   11194:	ldr	r0, [r5]
   11198:	bl	13d50 <__assert_fail@plt+0x2d9c>
   1119c:	mov	r2, r6
   111a0:	mov	r1, r4
   111a4:	mov	r3, r0
   111a8:	mov	r0, #125	; 0x7d
   111ac:	bl	10e34 <error@plt>
   111b0:	ldrb	r3, [r4]
   111b4:	cmp	r3, #76	; 0x4c
   111b8:	bne	11124 <__assert_fail@plt+0x170>
   111bc:	ldr	r1, [pc, #1196]	; 11670 <__assert_fail@plt+0x6bc>
   111c0:	mov	r2, #5
   111c4:	mov	r0, #0
   111c8:	bl	10dbc <dcgettext@plt>
   111cc:	mov	r2, r0
   111d0:	mov	r1, #0
   111d4:	mov	r0, r1
   111d8:	bl	10e34 <error@plt>
   111dc:	b	110a8 <__assert_fail@plt+0xf4>
   111e0:	ldr	r3, [pc, #1164]	; 11674 <__assert_fail@plt+0x6c0>
   111e4:	ldr	r6, [r3]
   111e8:	sub	r9, r9, r6
   111ec:	cmp	r9, r4
   111f0:	add	r8, r7, r6, lsl #2
   111f4:	movle	r2, #5
   111f8:	ldrle	r1, [pc, #1144]	; 11678 <__assert_fail@plt+0x6c4>
   111fc:	ble	111c4 <__assert_fail@plt+0x210>
   11200:	ldr	r5, [pc, #1072]	; 11638 <__assert_fail@plt+0x684>
   11204:	mov	r3, r4
   11208:	ldr	r4, [pc, #1132]	; 1167c <__assert_fail@plt+0x6c8>
   1120c:	mov	sl, r3
   11210:	mov	r9, r5
   11214:	mov	fp, #1
   11218:	ldr	r2, [r9, #8]
   1121c:	cmp	r2, #0
   11220:	beq	11298 <__assert_fail@plt+0x2e4>
   11224:	ldrb	r3, [r2]
   11228:	cmp	r3, #76	; 0x4c
   1122c:	ldr	r3, [r9, #4]
   11230:	add	r2, r3, #128	; 0x80
   11234:	beq	1142c <__assert_fail@plt+0x478>
   11238:	cmp	r2, r4
   1123c:	bhi	11254 <__assert_fail@plt+0x2a0>
   11240:	str	r3, [sp, #20]
   11244:	bl	10e7c <__ctype_toupper_loc@plt>
   11248:	ldr	r3, [sp, #20]
   1124c:	ldr	r2, [r0]
   11250:	ldr	r3, [r2, r3, lsl #2]
   11254:	ldr	r1, [r9]
   11258:	mov	r2, #0
   1125c:	str	r3, [sp]
   11260:	str	r1, [sp, #8]
   11264:	str	r2, [sp, #12]
   11268:	ldr	r3, [pc, #1040]	; 11680 <__assert_fail@plt+0x6cc>
   1126c:	ldr	r2, [pc, #1040]	; 11684 <__assert_fail@plt+0x6d0>
   11270:	mov	r1, fp
   11274:	add	r0, sp, #28
   11278:	bl	10e40 <__asprintf_chk@plt>
   1127c:	cmp	r0, #0
   11280:	blt	11594 <__assert_fail@plt+0x5e0>
   11284:	ldr	r0, [sp, #28]
   11288:	bl	10f60 <putenv@plt>
   1128c:	cmp	r0, #0
   11290:	bne	115d0 <__assert_fail@plt+0x61c>
   11294:	mov	r3, fp
   11298:	add	sl, sl, #1
   1129c:	cmp	sl, #3
   112a0:	add	r9, r9, #12
   112a4:	bne	11218 <__assert_fail@plt+0x264>
   112a8:	cmp	r3, #0
   112ac:	beq	11608 <__assert_fail@plt+0x654>
   112b0:	ldr	r3, [pc, #976]	; 11688 <__assert_fail@plt+0x6d4>
   112b4:	mov	r1, #47	; 0x2f
   112b8:	ldr	r4, [r3]
   112bc:	mov	r0, r4
   112c0:	bl	10ed0 <strchr@plt>
   112c4:	subs	r9, r0, #0
   112c8:	beq	11464 <__assert_fail@plt+0x4b0>
   112cc:	mov	r0, r4
   112d0:	bl	11c70 <__assert_fail@plt+0xcbc>
   112d4:	str	r0, [r5, #36]	; 0x24
   112d8:	ldr	r3, [r5, #36]	; 0x24
   112dc:	cmp	r3, #0
   112e0:	beq	114e0 <__assert_fail@plt+0x52c>
   112e4:	ldr	r0, [pc, #928]	; 1168c <__assert_fail@plt+0x6d8>
   112e8:	bl	10e4c <getenv@plt>
   112ec:	ldr	r3, [pc, #924]	; 11690 <__assert_fail@plt+0x6dc>
   112f0:	ldr	r2, [r5, #36]	; 0x24
   112f4:	str	r3, [sp, #40]	; 0x28
   112f8:	mov	r3, #0
   112fc:	ldr	r9, [pc, #912]	; 11694 <__assert_fail@plt+0x6e0>
   11300:	add	r4, sp, #36	; 0x24
   11304:	str	r2, [sp, #36]	; 0x24
   11308:	str	r3, [sp, #44]	; 0x2c
   1130c:	mov	sl, r0
   11310:	b	11360 <__assert_fail@plt+0x3ac>
   11314:	str	r9, [sp]
   11318:	ldr	r2, [pc, #888]	; 11698 <__assert_fail@plt+0x6e4>
   1131c:	mov	r1, #1
   11320:	add	r0, sp, #32
   11324:	bl	10e40 <__asprintf_chk@plt>
   11328:	cmp	r0, #0
   1132c:	blt	11594 <__assert_fail@plt+0x5e0>
   11330:	add	r2, sp, #48	; 0x30
   11334:	ldr	r1, [sp, #32]
   11338:	mov	r0, #3
   1133c:	bl	10f90 <__xstat64@plt>
   11340:	add	r3, sp, #48	; 0x30
   11344:	cmp	r0, #0
   11348:	beq	11380 <__assert_fail@plt+0x3cc>
   1134c:	ldr	r0, [sp, #32]
   11350:	bl	11e38 <__assert_fail@plt+0xe84>
   11354:	ldr	fp, [r4, #4]!
   11358:	cmp	fp, #0
   1135c:	beq	11564 <__assert_fail@plt+0x5b0>
   11360:	ldr	r3, [r4]
   11364:	ldrb	r2, [r3]
   11368:	cmp	r2, #0
   1136c:	bne	11314 <__assert_fail@plt+0x360>
   11370:	ldr	r0, [pc, #796]	; 11694 <__assert_fail@plt+0x6e0>
   11374:	bl	147b4 <__assert_fail@plt+0x3800>
   11378:	add	r3, sp, #48	; 0x30
   1137c:	str	r0, [sp, #32]
   11380:	cmp	sl, #0
   11384:	ldr	r2, [sp, #32]
   11388:	beq	11488 <__assert_fail@plt+0x4d4>
   1138c:	mov	r0, r3
   11390:	str	r2, [sp, #4]
   11394:	str	sl, [sp]
   11398:	ldr	r3, [pc, #748]	; 1168c <__assert_fail@plt+0x6d8>
   1139c:	ldr	r2, [pc, #760]	; 1169c <__assert_fail@plt+0x6e8>
   113a0:	mov	r1, #1
   113a4:	bl	10e40 <__asprintf_chk@plt>
   113a8:	cmp	r0, #0
   113ac:	blt	11594 <__assert_fail@plt+0x5e0>
   113b0:	ldr	r0, [sp, #32]
   113b4:	bl	11e38 <__assert_fail@plt+0xe84>
   113b8:	ldr	r0, [sp, #48]	; 0x30
   113bc:	bl	10f60 <putenv@plt>
   113c0:	subs	r9, r0, #0
   113c4:	bne	11598 <__assert_fail@plt+0x5e4>
   113c8:	ldr	r0, [r5, #36]	; 0x24
   113cc:	bl	11e38 <__assert_fail@plt+0xe84>
   113d0:	mov	r1, r8
   113d4:	ldr	r0, [r7, r6, lsl #2]
   113d8:	bl	10d80 <execvp@plt>
   113dc:	bl	10edc <__errno_location@plt>
   113e0:	mov	r2, #5
   113e4:	ldr	r1, [pc, #692]	; 116a0 <__assert_fail@plt+0x6ec>
   113e8:	ldr	r4, [r0]
   113ec:	mov	r0, r9
   113f0:	bl	10dbc <dcgettext@plt>
   113f4:	mov	r5, r0
   113f8:	ldr	r0, [r7, r6, lsl #2]
   113fc:	bl	13d50 <__assert_fail@plt+0x2d9c>
   11400:	mov	r1, r4
   11404:	cmp	r4, #2
   11408:	mov	r2, r5
   1140c:	moveq	r4, #127	; 0x7f
   11410:	movne	r4, #126	; 0x7e
   11414:	mov	r3, r0
   11418:	mov	r0, r9
   1141c:	bl	10e34 <error@plt>
   11420:	mov	r0, r4
   11424:	add	sp, sp, #156	; 0x9c
   11428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1142c:	cmp	r2, r4
   11430:	bhi	11448 <__assert_fail@plt+0x494>
   11434:	str	r3, [sp, #20]
   11438:	bl	10e7c <__ctype_toupper_loc@plt>
   1143c:	ldr	r3, [sp, #20]
   11440:	ldr	r2, [r0]
   11444:	ldr	r3, [r2, r3, lsl #2]
   11448:	str	r3, [sp]
   1144c:	ldr	r2, [pc, #592]	; 116a4 <__assert_fail@plt+0x6f0>
   11450:	ldr	r3, [pc, #552]	; 11680 <__assert_fail@plt+0x6cc>
   11454:	mov	r1, fp
   11458:	add	r0, sp, #28
   1145c:	bl	10e40 <__asprintf_chk@plt>
   11460:	b	1127c <__assert_fail@plt+0x2c8>
   11464:	ldr	r0, [pc, #572]	; 116a8 <__assert_fail@plt+0x6f4>
   11468:	bl	14810 <__assert_fail@plt+0x385c>
   1146c:	subs	sl, r0, #0
   11470:	beq	114f0 <__assert_fail@plt+0x53c>
   11474:	bl	11c70 <__assert_fail@plt+0xcbc>
   11478:	str	r0, [r5, #36]	; 0x24
   1147c:	mov	r0, sl
   11480:	bl	11e38 <__assert_fail@plt+0xe84>
   11484:	b	112d8 <__assert_fail@plt+0x324>
   11488:	str	r2, [sp]
   1148c:	mov	r0, r3
   11490:	ldr	r2, [pc, #532]	; 116ac <__assert_fail@plt+0x6f8>
   11494:	ldr	r3, [pc, #496]	; 1168c <__assert_fail@plt+0x6d8>
   11498:	mov	r1, #1
   1149c:	bl	10e40 <__asprintf_chk@plt>
   114a0:	b	113a8 <__assert_fail@plt+0x3f4>
   114a4:	ldrd	sl, [sp, #48]	; 0x30
   114a8:	mov	r3, #0
   114ac:	mvn	r2, #0
   114b0:	cmp	fp, r3
   114b4:	cmpeq	sl, r2
   114b8:	bls	114c8 <__assert_fail@plt+0x514>
   114bc:	bl	10edc <__errno_location@plt>
   114c0:	mov	r4, #75	; 0x4b
   114c4:	b	1117c <__assert_fail@plt+0x1c8>
   114c8:	bl	10edc <__errno_location@plt>
   114cc:	mov	r3, #12
   114d0:	mul	r4, r3, r4
   114d4:	str	r8, [r0]
   114d8:	str	sl, [r6, r4]
   114dc:	b	11014 <__assert_fail@plt+0x60>
   114e0:	ldr	r0, [pc, #456]	; 116b0 <__assert_fail@plt+0x6fc>
   114e4:	bl	147b4 <__assert_fail@plt+0x3800>
   114e8:	str	r0, [r5, #36]	; 0x24
   114ec:	b	112e4 <__assert_fail@plt+0x330>
   114f0:	ldr	r0, [pc, #444]	; 116b4 <__assert_fail@plt+0x700>
   114f4:	bl	10e4c <getenv@plt>
   114f8:	subs	sl, r0, #0
   114fc:	beq	1147c <__assert_fail@plt+0x4c8>
   11500:	bl	147b4 <__assert_fail@plt+0x3800>
   11504:	ldr	r1, [pc, #428]	; 116b8 <__assert_fail@plt+0x704>
   11508:	mov	sl, r0
   1150c:	bl	10f48 <strtok@plt>
   11510:	b	11524 <__assert_fail@plt+0x570>
   11514:	bl	11e38 <__assert_fail@plt+0xe84>
   11518:	ldr	r1, [pc, #408]	; 116b8 <__assert_fail@plt+0x704>
   1151c:	mov	r0, r9
   11520:	bl	10f48 <strtok@plt>
   11524:	cmp	r0, #0
   11528:	beq	1147c <__assert_fail@plt+0x4c8>
   1152c:	mov	r2, r9
   11530:	mov	r1, r4
   11534:	bl	11d54 <__assert_fail@plt+0xda0>
   11538:	mov	r1, #1
   1153c:	mov	fp, r0
   11540:	bl	10f24 <access@plt>
   11544:	cmp	r0, #0
   11548:	mov	r0, fp
   1154c:	bne	11514 <__assert_fail@plt+0x560>
   11550:	bl	11c70 <__assert_fail@plt+0xcbc>
   11554:	str	r0, [r5, #36]	; 0x24
   11558:	mov	r0, fp
   1155c:	bl	11e38 <__assert_fail@plt+0xe84>
   11560:	b	1147c <__assert_fail@plt+0x4c8>
   11564:	mov	r2, #5
   11568:	ldr	r1, [pc, #332]	; 116bc <__assert_fail@plt+0x708>
   1156c:	mov	r0, fp
   11570:	bl	10dbc <dcgettext@plt>
   11574:	mov	r4, r0
   11578:	ldr	r0, [pc, #276]	; 11694 <__assert_fail@plt+0x6e0>
   1157c:	bl	13d50 <__assert_fail@plt+0x2d9c>
   11580:	mov	r2, r4
   11584:	mov	r1, fp
   11588:	mov	r3, r0
   1158c:	mov	r0, #125	; 0x7d
   11590:	bl	10e34 <error@plt>
   11594:	bl	147d0 <__assert_fail@plt+0x381c>
   11598:	bl	10edc <__errno_location@plt>
   1159c:	mov	r2, #5
   115a0:	ldr	r1, [pc, #280]	; 116c0 <__assert_fail@plt+0x70c>
   115a4:	ldr	r4, [r0]
   115a8:	mov	r0, #0
   115ac:	bl	10dbc <dcgettext@plt>
   115b0:	mov	r5, r0
   115b4:	ldr	r0, [sp, #48]	; 0x30
   115b8:	bl	13d50 <__assert_fail@plt+0x2d9c>
   115bc:	mov	r2, r5
   115c0:	mov	r1, r4
   115c4:	mov	r3, r0
   115c8:	mov	r0, #125	; 0x7d
   115cc:	bl	10e34 <error@plt>
   115d0:	bl	10edc <__errno_location@plt>
   115d4:	mov	r2, #5
   115d8:	ldr	r1, [pc, #224]	; 116c0 <__assert_fail@plt+0x70c>
   115dc:	ldr	r4, [r0]
   115e0:	mov	r0, #0
   115e4:	bl	10dbc <dcgettext@plt>
   115e8:	mov	r5, r0
   115ec:	ldr	r0, [sp, #28]
   115f0:	b	115b8 <__assert_fail@plt+0x604>
   115f4:	ldr	r3, [pc, #200]	; 116c4 <__assert_fail@plt+0x710>
   115f8:	mov	r2, #336	; 0x150
   115fc:	ldr	r1, [pc, #196]	; 116c8 <__assert_fail@plt+0x714>
   11600:	ldr	r0, [pc, #196]	; 116cc <__assert_fail@plt+0x718>
   11604:	bl	10fb4 <__assert_fail@plt>
   11608:	mov	r2, #5
   1160c:	ldr	r1, [pc, #188]	; 116d0 <__assert_fail@plt+0x71c>
   11610:	mov	r0, r3
   11614:	str	r3, [sp, #20]
   11618:	bl	10dbc <dcgettext@plt>
   1161c:	mov	r2, r0
   11620:	b	111d0 <__assert_fail@plt+0x21c>
   11624:	andeq	r5, r1, ip, ror pc
   11628:	strdeq	r6, [r1], -r0
   1162c:	andeq	r6, r1, r8, asr #4
   11630:	strdeq	r7, [r2], -ip
   11634:	andeq	r1, r1, ip, lsl #23
   11638:	andeq	r7, r2, r0, ror #2
   1163c:	andeq	r7, r2, r8, asr r1
   11640:	andeq	r5, r1, r8, lsr #25
   11644:	andeq	r6, r1, r8, lsr #7
   11648:	addeq	r0, r0, pc, lsl r0
   1164c:	andeq	r7, r2, r4, asr r1
   11650:	strdeq	r7, [r2], -r8
   11654:	muleq	r1, r8, r3
   11658:	andeq	r5, r1, r8, lsl #26
   1165c:	andeq	r6, r1, r4, asr #4
   11660:	andeq	r5, r1, ip, lsr ip
   11664:	andeq	r6, r1, r8, ror r3
   11668:	andeq	r6, r1, ip, ror r3
   1166c:	andeq	r6, r1, r8, lsl #7
   11670:	andeq	r6, r1, r4, asr r3
   11674:	andeq	r7, r2, r8, asr #2
   11678:			; <UNDEFINED> instruction: 0x000163b0
   1167c:	andeq	r0, r0, pc, ror r1
   11680:	andeq	r6, r1, r0, asr #7
   11684:	ldrdeq	r6, [r1], -r4
   11688:	muleq	r2, r0, r1
   1168c:	andeq	r6, r1, r0, ror r4
   11690:	andeq	r6, r1, ip, ror r4
   11694:	muleq	r1, ip, r4
   11698:	andeq	r6, r1, ip, lsr #9
   1169c:	andeq	r6, r1, r8, asr #9
   116a0:	ldrdeq	r6, [r1], -ip
   116a4:	andeq	r6, r1, ip, asr #7
   116a8:	andeq	r6, r1, r8, lsr r4
   116ac:	ldrdeq	r6, [r1], -r4
   116b0:	andeq	r6, r1, r4, asr r4
   116b4:	andeq	r6, r1, r8, asr #8
   116b8:	andeq	r6, r1, r0, asr r4
   116bc:			; <UNDEFINED> instruction: 0x000164b4
   116c0:	andeq	r6, r1, r0, ror #7
   116c4:	andeq	r5, r1, r0, lsr #25
   116c8:	andeq	r6, r1, r8, lsl #6
   116cc:	andeq	r6, r1, r8, lsl r3
   116d0:	andeq	r6, r1, ip, lsl #8
   116d4:	mov	fp, #0
   116d8:	mov	lr, #0
   116dc:	pop	{r1}		; (ldr r1, [sp], #4)
   116e0:	mov	r2, sp
   116e4:	push	{r2}		; (str r2, [sp, #-4]!)
   116e8:	push	{r0}		; (str r0, [sp, #-4]!)
   116ec:	ldr	ip, [pc, #16]	; 11704 <__assert_fail@plt+0x750>
   116f0:	push	{ip}		; (str ip, [sp, #-4]!)
   116f4:	ldr	r0, [pc, #12]	; 11708 <__assert_fail@plt+0x754>
   116f8:	ldr	r3, [pc, #12]	; 1170c <__assert_fail@plt+0x758>
   116fc:	bl	10e64 <__libc_start_main@plt>
   11700:	bl	10fa8 <abort@plt>
   11704:	andeq	r5, r1, r4, lsl ip
   11708:	andeq	r0, r1, r0, asr #31
   1170c:			; <UNDEFINED> instruction: 0x00015bb4
   11710:	ldr	r3, [pc, #20]	; 1172c <__assert_fail@plt+0x778>
   11714:	ldr	r2, [pc, #20]	; 11730 <__assert_fail@plt+0x77c>
   11718:	add	r3, pc, r3
   1171c:	ldr	r2, [r3, r2]
   11720:	cmp	r2, #0
   11724:	bxeq	lr
   11728:	b	10e88 <__gmon_start__@plt>
   1172c:	andeq	r5, r1, r0, ror #17
   11730:	andeq	r0, r0, ip, ror #1
   11734:	ldr	r3, [pc, #28]	; 11758 <__assert_fail@plt+0x7a4>
   11738:	ldr	r0, [pc, #28]	; 1175c <__assert_fail@plt+0x7a8>
   1173c:	sub	r3, r3, r0
   11740:	cmp	r3, #6
   11744:	bxls	lr
   11748:	ldr	r3, [pc, #16]	; 11760 <__assert_fail@plt+0x7ac>
   1174c:	cmp	r3, #0
   11750:	bxeq	lr
   11754:	bx	r3
   11758:	andeq	r7, r2, r3, asr #2
   1175c:	andeq	r7, r2, r0, asr #2
   11760:	andeq	r0, r0, r0
   11764:	ldr	r1, [pc, #36]	; 11790 <__assert_fail@plt+0x7dc>
   11768:	ldr	r0, [pc, #36]	; 11794 <__assert_fail@plt+0x7e0>
   1176c:	sub	r1, r1, r0
   11770:	asr	r1, r1, #2
   11774:	add	r1, r1, r1, lsr #31
   11778:	asrs	r1, r1, #1
   1177c:	bxeq	lr
   11780:	ldr	r3, [pc, #16]	; 11798 <__assert_fail@plt+0x7e4>
   11784:	cmp	r3, #0
   11788:	bxeq	lr
   1178c:	bx	r3
   11790:	andeq	r7, r2, r0, asr #2
   11794:	andeq	r7, r2, r0, asr #2
   11798:	andeq	r0, r0, r0
   1179c:	push	{r4, lr}
   117a0:	ldr	r4, [pc, #24]	; 117c0 <__assert_fail@plt+0x80c>
   117a4:	ldrb	r3, [r4]
   117a8:	cmp	r3, #0
   117ac:	popne	{r4, pc}
   117b0:	bl	11734 <__assert_fail@plt+0x780>
   117b4:	mov	r3, #1
   117b8:	strb	r3, [r4]
   117bc:	pop	{r4, pc}
   117c0:	andeq	r7, r2, ip, asr r1
   117c4:	ldr	r0, [pc, #40]	; 117f4 <__assert_fail@plt+0x840>
   117c8:	ldr	r3, [r0]
   117cc:	cmp	r3, #0
   117d0:	bne	117d8 <__assert_fail@plt+0x824>
   117d4:	b	11764 <__assert_fail@plt+0x7b0>
   117d8:	ldr	r3, [pc, #24]	; 117f8 <__assert_fail@plt+0x844>
   117dc:	cmp	r3, #0
   117e0:	beq	117d4 <__assert_fail@plt+0x820>
   117e4:	push	{r4, lr}
   117e8:	blx	r3
   117ec:	pop	{r4, lr}
   117f0:	b	11764 <__assert_fail@plt+0x7b0>
   117f4:	andeq	r6, r2, r4, lsl pc
   117f8:	andeq	r0, r0, r0
   117fc:	subs	r5, r0, #0
   11800:	push	{r7, lr}
   11804:	sub	sp, sp, #56	; 0x38
   11808:	beq	11844 <__assert_fail@plt+0x890>
   1180c:	ldr	r3, [pc, #756]	; 11b08 <__assert_fail@plt+0xb54>
   11810:	mov	r2, #5
   11814:	ldr	r1, [pc, #752]	; 11b0c <__assert_fail@plt+0xb58>
   11818:	mov	r0, #0
   1181c:	ldr	r4, [r3]
   11820:	bl	10dbc <dcgettext@plt>
   11824:	ldr	r3, [pc, #740]	; 11b10 <__assert_fail@plt+0xb5c>
   11828:	mov	r1, #1
   1182c:	ldr	r3, [r3]
   11830:	mov	r2, r0
   11834:	mov	r0, r4
   11838:	bl	10f18 <__fprintf_chk@plt>
   1183c:	mov	r0, r5
   11840:	bl	10eb8 <exit@plt>
   11844:	mov	r2, #5
   11848:	ldr	r1, [pc, #708]	; 11b14 <__assert_fail@plt+0xb60>
   1184c:	bl	10dbc <dcgettext@plt>
   11850:	ldr	r3, [pc, #696]	; 11b10 <__assert_fail@plt+0xb5c>
   11854:	ldr	r7, [pc, #700]	; 11b18 <__assert_fail@plt+0xb64>
   11858:	ldr	r4, [pc, #700]	; 11b1c <__assert_fail@plt+0xb68>
   1185c:	ldr	r2, [r3]
   11860:	mov	r1, r0
   11864:	mov	r0, #1
   11868:	bl	10f00 <__printf_chk@plt>
   1186c:	mov	r2, #5
   11870:	ldr	r1, [pc, #680]	; 11b20 <__assert_fail@plt+0xb6c>
   11874:	mov	r0, r5
   11878:	bl	10dbc <dcgettext@plt>
   1187c:	ldr	r1, [r7]
   11880:	bl	10d2c <fputs_unlocked@plt>
   11884:	mov	r2, #5
   11888:	ldr	r1, [pc, #660]	; 11b24 <__assert_fail@plt+0xb70>
   1188c:	mov	r0, r5
   11890:	bl	10dbc <dcgettext@plt>
   11894:	ldr	r1, [r7]
   11898:	bl	10d2c <fputs_unlocked@plt>
   1189c:	mov	r2, #5
   118a0:	ldr	r1, [pc, #640]	; 11b28 <__assert_fail@plt+0xb74>
   118a4:	mov	r0, r5
   118a8:	bl	10dbc <dcgettext@plt>
   118ac:	ldr	r1, [r7]
   118b0:	bl	10d2c <fputs_unlocked@plt>
   118b4:	mov	r2, #5
   118b8:	ldr	r1, [pc, #620]	; 11b2c <__assert_fail@plt+0xb78>
   118bc:	mov	r0, r5
   118c0:	bl	10dbc <dcgettext@plt>
   118c4:	ldr	r1, [r7]
   118c8:	bl	10d2c <fputs_unlocked@plt>
   118cc:	mov	r2, #5
   118d0:	ldr	r1, [pc, #600]	; 11b30 <__assert_fail@plt+0xb7c>
   118d4:	mov	r0, r5
   118d8:	bl	10dbc <dcgettext@plt>
   118dc:	ldr	r1, [r7]
   118e0:	bl	10d2c <fputs_unlocked@plt>
   118e4:	mov	r2, #5
   118e8:	ldr	r1, [pc, #580]	; 11b34 <__assert_fail@plt+0xb80>
   118ec:	mov	r0, r5
   118f0:	bl	10dbc <dcgettext@plt>
   118f4:	ldr	r1, [r7]
   118f8:	bl	10d2c <fputs_unlocked@plt>
   118fc:	mov	r2, #5
   11900:	ldr	r1, [pc, #560]	; 11b38 <__assert_fail@plt+0xb84>
   11904:	mov	r0, r5
   11908:	bl	10dbc <dcgettext@plt>
   1190c:	ldr	r1, [r7]
   11910:	bl	10d2c <fputs_unlocked@plt>
   11914:	mov	r2, #5
   11918:	ldr	r1, [pc, #540]	; 11b3c <__assert_fail@plt+0xb88>
   1191c:	mov	r0, r5
   11920:	bl	10dbc <dcgettext@plt>
   11924:	ldr	r1, [r7]
   11928:	bl	10d2c <fputs_unlocked@plt>
   1192c:	mov	r2, #5
   11930:	ldr	r1, [pc, #520]	; 11b40 <__assert_fail@plt+0xb8c>
   11934:	mov	r0, r5
   11938:	bl	10dbc <dcgettext@plt>
   1193c:	ldr	r1, [r7]
   11940:	bl	10d2c <fputs_unlocked@plt>
   11944:	ldm	r4!, {r0, r1, r2, r3}
   11948:	mov	lr, sp
   1194c:	stmia	lr!, {r0, r1, r2, r3}
   11950:	ldm	r4!, {r0, r1, r2, r3}
   11954:	ldr	ip, [sp]
   11958:	stmia	lr!, {r0, r1, r2, r3}
   1195c:	cmp	ip, #0
   11960:	ldm	r4!, {r0, r1, r2, r3}
   11964:	stmia	lr!, {r0, r1, r2, r3}
   11968:	ldm	r4, {r0, r1}
   1196c:	moveq	r4, sp
   11970:	stm	lr, {r0, r1}
   11974:	beq	119a4 <__assert_fail@plt+0x9f0>
   11978:	ldr	r6, [pc, #452]	; 11b44 <__assert_fail@plt+0xb90>
   1197c:	mov	r4, sp
   11980:	b	11990 <__assert_fail@plt+0x9dc>
   11984:	ldr	ip, [r4, #8]!
   11988:	cmp	ip, #0
   1198c:	beq	119a4 <__assert_fail@plt+0x9f0>
   11990:	mov	r1, ip
   11994:	mov	r0, r6
   11998:	bl	10d44 <strcmp@plt>
   1199c:	cmp	r0, #0
   119a0:	bne	11984 <__assert_fail@plt+0x9d0>
   119a4:	ldr	r4, [r4, #4]
   119a8:	mov	r2, #5
   119ac:	cmp	r4, #0
   119b0:	ldr	r1, [pc, #400]	; 11b48 <__assert_fail@plt+0xb94>
   119b4:	beq	11a5c <__assert_fail@plt+0xaa8>
   119b8:	mov	r0, #0
   119bc:	bl	10dbc <dcgettext@plt>
   119c0:	ldr	r3, [pc, #388]	; 11b4c <__assert_fail@plt+0xb98>
   119c4:	ldr	r2, [pc, #388]	; 11b50 <__assert_fail@plt+0xb9c>
   119c8:	mov	r1, r0
   119cc:	mov	r0, #1
   119d0:	bl	10f00 <__printf_chk@plt>
   119d4:	mov	r1, #0
   119d8:	mov	r0, #5
   119dc:	bl	10f54 <setlocale@plt>
   119e0:	cmp	r0, #0
   119e4:	ldreq	r6, [pc, #344]	; 11b44 <__assert_fail@plt+0xb90>
   119e8:	beq	11a04 <__assert_fail@plt+0xa50>
   119ec:	mov	r2, #3
   119f0:	ldr	r1, [pc, #348]	; 11b54 <__assert_fail@plt+0xba0>
   119f4:	bl	10f9c <strncmp@plt>
   119f8:	ldr	r6, [pc, #324]	; 11b44 <__assert_fail@plt+0xb90>
   119fc:	cmp	r0, #0
   11a00:	bne	11aec <__assert_fail@plt+0xb38>
   11a04:	mov	r2, #5
   11a08:	ldr	r1, [pc, #328]	; 11b58 <__assert_fail@plt+0xba4>
   11a0c:	mov	r0, #0
   11a10:	bl	10dbc <dcgettext@plt>
   11a14:	ldr	r3, [pc, #296]	; 11b44 <__assert_fail@plt+0xb90>
   11a18:	ldr	r2, [pc, #300]	; 11b4c <__assert_fail@plt+0xb98>
   11a1c:	mov	r1, r0
   11a20:	mov	r0, #1
   11a24:	bl	10f00 <__printf_chk@plt>
   11a28:	mov	r2, #5
   11a2c:	ldr	r1, [pc, #296]	; 11b5c <__assert_fail@plt+0xba8>
   11a30:	mov	r0, #0
   11a34:	bl	10dbc <dcgettext@plt>
   11a38:	ldr	r2, [pc, #288]	; 11b60 <__assert_fail@plt+0xbac>
   11a3c:	cmp	r4, r6
   11a40:	ldr	r3, [pc, #284]	; 11b64 <__assert_fail@plt+0xbb0>
   11a44:	movne	r3, r2
   11a48:	mov	r1, r0
   11a4c:	mov	r2, r4
   11a50:	mov	r0, #1
   11a54:	bl	10f00 <__printf_chk@plt>
   11a58:	b	1183c <__assert_fail@plt+0x888>
   11a5c:	mov	r0, r4
   11a60:	bl	10dbc <dcgettext@plt>
   11a64:	ldr	r3, [pc, #224]	; 11b4c <__assert_fail@plt+0xb98>
   11a68:	ldr	r2, [pc, #224]	; 11b50 <__assert_fail@plt+0xb9c>
   11a6c:	mov	r1, r0
   11a70:	mov	r0, #1
   11a74:	bl	10f00 <__printf_chk@plt>
   11a78:	mov	r1, r4
   11a7c:	mov	r0, #5
   11a80:	bl	10f54 <setlocale@plt>
   11a84:	cmp	r0, #0
   11a88:	beq	11aa0 <__assert_fail@plt+0xaec>
   11a8c:	mov	r2, #3
   11a90:	ldr	r1, [pc, #188]	; 11b54 <__assert_fail@plt+0xba0>
   11a94:	bl	10f9c <strncmp@plt>
   11a98:	cmp	r0, #0
   11a9c:	bne	11ae4 <__assert_fail@plt+0xb30>
   11aa0:	mov	r2, #5
   11aa4:	ldr	r1, [pc, #172]	; 11b58 <__assert_fail@plt+0xba4>
   11aa8:	mov	r0, #0
   11aac:	bl	10dbc <dcgettext@plt>
   11ab0:	ldr	r3, [pc, #140]	; 11b44 <__assert_fail@plt+0xb90>
   11ab4:	ldr	r2, [pc, #144]	; 11b4c <__assert_fail@plt+0xb98>
   11ab8:	mov	r4, r3
   11abc:	mov	r1, r0
   11ac0:	mov	r0, #1
   11ac4:	bl	10f00 <__printf_chk@plt>
   11ac8:	ldr	r1, [pc, #140]	; 11b5c <__assert_fail@plt+0xba8>
   11acc:	mov	r2, #5
   11ad0:	mov	r0, #0
   11ad4:	bl	10dbc <dcgettext@plt>
   11ad8:	ldr	r3, [pc, #132]	; 11b64 <__assert_fail@plt+0xbb0>
   11adc:	mov	r1, r0
   11ae0:	b	11a4c <__assert_fail@plt+0xa98>
   11ae4:	ldr	r6, [pc, #88]	; 11b44 <__assert_fail@plt+0xb90>
   11ae8:	mov	r4, r6
   11aec:	mov	r2, #5
   11af0:	ldr	r1, [pc, #112]	; 11b68 <__assert_fail@plt+0xbb4>
   11af4:	mov	r0, #0
   11af8:	bl	10dbc <dcgettext@plt>
   11afc:	ldr	r1, [r7]
   11b00:	bl	10d2c <fputs_unlocked@plt>
   11b04:	b	11a04 <__assert_fail@plt+0xa50>
   11b08:	andeq	r7, r2, r0, asr r1
   11b0c:	andeq	r5, r1, r0, lsl sp
   11b10:	muleq	r2, r0, r1
   11b14:	andeq	r5, r1, r8, lsr sp
   11b18:	andeq	r7, r2, r4, asr r1
   11b1c:	andeq	r5, r1, ip, lsr ip
   11b20:	andeq	r5, r1, r8, asr sp
   11b24:	andeq	r5, r1, r4, lsr #27
   11b28:	strdeq	r5, [r1], -r0
   11b2c:	andeq	r5, r1, r8, lsr #29
   11b30:	ldrdeq	r5, [r1], -r8
   11b34:	andeq	r5, r1, r0, lsl pc
   11b38:	andeq	r5, r1, r0, lsl #31
   11b3c:	andeq	r5, r1, r0, asr #31
   11b40:	strdeq	r6, [r1], -r8
   11b44:	andeq	r5, r1, r8, lsl #26
   11b48:	andeq	r6, r1, r4, lsl #4
   11b4c:	andeq	r6, r1, ip, lsl r2
   11b50:	andeq	r6, r1, r4, asr #4
   11b54:	andeq	r6, r1, r4, asr r2
   11b58:	andeq	r6, r1, r0, lsr #5
   11b5c:			; <UNDEFINED> instruction: 0x000162bc
   11b60:	andeq	r5, r1, ip, ror pc
   11b64:	andeq	r6, r1, r0, lsl #10
   11b68:	andeq	r6, r1, r8, asr r2
   11b6c:	ldr	r3, [pc, #4]	; 11b78 <__assert_fail@plt+0xbc4>
   11b70:	str	r0, [r3]
   11b74:	bx	lr
   11b78:	andeq	r7, r2, r8, lsl #3
   11b7c:	ldr	r3, [pc, #4]	; 11b88 <__assert_fail@plt+0xbd4>
   11b80:	strb	r0, [r3, #4]
   11b84:	bx	lr
   11b88:	andeq	r7, r2, r8, lsl #3
   11b8c:	ldr	r3, [pc, #192]	; 11c54 <__assert_fail@plt+0xca0>
   11b90:	push	{r4, r5, r6, lr}
   11b94:	sub	sp, sp, #8
   11b98:	ldr	r0, [r3]
   11b9c:	bl	15210 <__assert_fail@plt+0x425c>
   11ba0:	cmp	r0, #0
   11ba4:	beq	11bc8 <__assert_fail@plt+0xc14>
   11ba8:	ldr	r4, [pc, #168]	; 11c58 <__assert_fail@plt+0xca4>
   11bac:	ldrb	r3, [r4, #4]
   11bb0:	cmp	r3, #0
   11bb4:	beq	11be4 <__assert_fail@plt+0xc30>
   11bb8:	bl	10edc <__errno_location@plt>
   11bbc:	ldr	r3, [r0]
   11bc0:	cmp	r3, #32
   11bc4:	bne	11be4 <__assert_fail@plt+0xc30>
   11bc8:	ldr	r3, [pc, #140]	; 11c5c <__assert_fail@plt+0xca8>
   11bcc:	ldr	r0, [r3]
   11bd0:	bl	15210 <__assert_fail@plt+0x425c>
   11bd4:	cmp	r0, #0
   11bd8:	bne	11c2c <__assert_fail@plt+0xc78>
   11bdc:	add	sp, sp, #8
   11be0:	pop	{r4, r5, r6, pc}
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #112]	; 11c60 <__assert_fail@plt+0xcac>
   11bec:	mov	r0, #0
   11bf0:	bl	10dbc <dcgettext@plt>
   11bf4:	ldr	r4, [r4]
   11bf8:	cmp	r4, #0
   11bfc:	mov	r5, r0
   11c00:	beq	11c38 <__assert_fail@plt+0xc84>
   11c04:	bl	10edc <__errno_location@plt>
   11c08:	ldr	r6, [r0]
   11c0c:	mov	r0, r4
   11c10:	bl	13bb8 <__assert_fail@plt+0x2c04>
   11c14:	mov	r1, r6
   11c18:	str	r5, [sp]
   11c1c:	ldr	r2, [pc, #64]	; 11c64 <__assert_fail@plt+0xcb0>
   11c20:	mov	r3, r0
   11c24:	mov	r0, #0
   11c28:	bl	10e34 <error@plt>
   11c2c:	ldr	r3, [pc, #52]	; 11c68 <__assert_fail@plt+0xcb4>
   11c30:	ldr	r0, [r3]
   11c34:	bl	10d68 <_exit@plt>
   11c38:	bl	10edc <__errno_location@plt>
   11c3c:	mov	r3, r5
   11c40:	ldr	r2, [pc, #36]	; 11c6c <__assert_fail@plt+0xcb8>
   11c44:	ldr	r1, [r0]
   11c48:	mov	r0, r4
   11c4c:	bl	10e34 <error@plt>
   11c50:	b	11c2c <__assert_fail@plt+0xc78>
   11c54:	andeq	r7, r2, r4, asr r1
   11c58:	andeq	r7, r2, r8, lsl #3
   11c5c:	andeq	r7, r2, r0, asr r1
   11c60:	muleq	r1, ip, r5
   11c64:	andeq	r6, r1, r8, lsr #11
   11c68:	strdeq	r7, [r2], -ip
   11c6c:	andeq	r6, r1, ip, lsr #11
   11c70:	push	{r4, lr}
   11c74:	bl	11cfc <__assert_fail@plt+0xd48>
   11c78:	cmp	r0, #0
   11c7c:	popne	{r4, pc}
   11c80:	bl	147d0 <__assert_fail@plt+0x381c>
   11c84:	push	{r4, r5, r6, lr}
   11c88:	mov	r5, r0
   11c8c:	ldrb	r4, [r0]
   11c90:	bl	14fa0 <__assert_fail@plt+0x3fec>
   11c94:	sub	r4, r4, #47	; 0x2f
   11c98:	clz	r4, r4
   11c9c:	lsr	r4, r4, #5
   11ca0:	sub	r0, r0, r5
   11ca4:	cmp	r0, r4
   11ca8:	bls	11cf4 <__assert_fail@plt+0xd40>
   11cac:	sub	r3, r0, #1
   11cb0:	add	r2, r5, r3
   11cb4:	ldrb	r1, [r5, r3]
   11cb8:	cmp	r1, #47	; 0x2f
   11cbc:	beq	11cd8 <__assert_fail@plt+0xd24>
   11cc0:	b	11cf4 <__assert_fail@plt+0xd40>
   11cc4:	ldrb	r1, [r2, #-1]!
   11cc8:	sub	r0, r3, #1
   11ccc:	cmp	r1, #47	; 0x2f
   11cd0:	bne	11ce8 <__assert_fail@plt+0xd34>
   11cd4:	mov	r3, r0
   11cd8:	cmp	r4, r3
   11cdc:	bne	11cc4 <__assert_fail@plt+0xd10>
   11ce0:	mov	r0, r4
   11ce4:	pop	{r4, r5, r6, pc}
   11ce8:	mov	r4, r3
   11cec:	mov	r0, r4
   11cf0:	pop	{r4, r5, r6, pc}
   11cf4:	mov	r4, r0
   11cf8:	b	11ce0 <__assert_fail@plt+0xd2c>
   11cfc:	push	{r4, r5, r6, lr}
   11d00:	mov	r6, r0
   11d04:	bl	11c84 <__assert_fail@plt+0xcd0>
   11d08:	add	r3, r0, #1
   11d0c:	mov	r4, r0
   11d10:	cmp	r0, #0
   11d14:	movne	r0, r3
   11d18:	addeq	r0, r3, #1
   11d1c:	bl	14ec4 <__assert_fail@plt+0x3f10>
   11d20:	subs	r5, r0, #0
   11d24:	beq	11d4c <__assert_fail@plt+0xd98>
   11d28:	mov	r2, r4
   11d2c:	mov	r1, r6
   11d30:	bl	10d74 <memcpy@plt>
   11d34:	cmp	r4, #0
   11d38:	moveq	r3, #46	; 0x2e
   11d3c:	moveq	r4, #1
   11d40:	strbeq	r3, [r5]
   11d44:	mov	r3, #0
   11d48:	strb	r3, [r5, r4]
   11d4c:	mov	r0, r5
   11d50:	pop	{r4, r5, r6, pc}
   11d54:	push	{r4, lr}
   11d58:	bl	11d68 <__assert_fail@plt+0xdb4>
   11d5c:	cmp	r0, #0
   11d60:	popne	{r4, pc}
   11d64:	bl	147d0 <__assert_fail@plt+0x381c>
   11d68:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d6c:	mov	r6, r1
   11d70:	mov	r8, r2
   11d74:	mov	fp, r0
   11d78:	bl	14fa0 <__assert_fail@plt+0x3fec>
   11d7c:	mov	r4, r0
   11d80:	bl	14ffc <__assert_fail@plt+0x4048>
   11d84:	sub	r4, r4, fp
   11d88:	mov	r5, r0
   11d8c:	mov	r0, r6
   11d90:	bl	10ec4 <strlen@plt>
   11d94:	cmp	r5, #0
   11d98:	add	r4, r4, r5
   11d9c:	mov	r7, r0
   11da0:	beq	11e14 <__assert_fail@plt+0xe60>
   11da4:	add	r3, fp, r4
   11da8:	ldrb	r3, [r3, #-1]
   11dac:	cmp	r3, #47	; 0x2f
   11db0:	beq	11e2c <__assert_fail@plt+0xe78>
   11db4:	ldrb	r3, [r6]
   11db8:	cmp	r3, #47	; 0x2f
   11dbc:	beq	11e2c <__assert_fail@plt+0xe78>
   11dc0:	mov	r5, #1
   11dc4:	mov	sl, #47	; 0x2f
   11dc8:	add	r0, r7, #1
   11dcc:	add	r0, r0, r4
   11dd0:	add	r0, r0, r5
   11dd4:	bl	14ec4 <__assert_fail@plt+0x3f10>
   11dd8:	subs	r9, r0, #0
   11ddc:	beq	11e0c <__assert_fail@plt+0xe58>
   11de0:	mov	r2, r4
   11de4:	mov	r1, fp
   11de8:	bl	10e94 <mempcpy@plt>
   11dec:	cmp	r8, #0
   11df0:	mov	r2, r7
   11df4:	mov	r1, r6
   11df8:	strb	sl, [r0], r5
   11dfc:	strne	r0, [r8]
   11e00:	bl	10e94 <mempcpy@plt>
   11e04:	mov	r3, #0
   11e08:	strb	r3, [r0]
   11e0c:	mov	r0, r9
   11e10:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e14:	ldrb	r3, [r6]
   11e18:	cmp	r3, #47	; 0x2f
   11e1c:	moveq	r5, #1
   11e20:	moveq	sl, #46	; 0x2e
   11e24:	movne	sl, r5
   11e28:	b	11dc8 <__assert_fail@plt+0xe14>
   11e2c:	mov	r5, #0
   11e30:	mov	sl, r5
   11e34:	b	11dc8 <__assert_fail@plt+0xe14>
   11e38:	push	{r4, r5, lr}
   11e3c:	sub	sp, sp, #12
   11e40:	mov	r5, r0
   11e44:	bl	10edc <__errno_location@plt>
   11e48:	mov	r2, #0
   11e4c:	mov	r4, r0
   11e50:	ldr	r3, [r0]
   11e54:	str	r2, [r4]
   11e58:	mov	r0, r5
   11e5c:	str	r3, [sp]
   11e60:	str	r3, [sp, #4]
   11e64:	bl	10d5c <free@plt>
   11e68:	ldr	r3, [r4]
   11e6c:	add	r2, sp, #8
   11e70:	cmp	r3, #0
   11e74:	moveq	r3, #4
   11e78:	movne	r3, #0
   11e7c:	add	r3, r2, r3
   11e80:	ldr	r3, [r3, #-8]
   11e84:	str	r3, [r4]
   11e88:	add	sp, sp, #12
   11e8c:	pop	{r4, r5, pc}
   11e90:	push	{r4, r5, r6, lr}
   11e94:	subs	r4, r0, #0
   11e98:	beq	11f0c <__assert_fail@plt+0xf58>
   11e9c:	mov	r1, #47	; 0x2f
   11ea0:	bl	10f6c <strrchr@plt>
   11ea4:	subs	r5, r0, #0
   11ea8:	beq	11ef8 <__assert_fail@plt+0xf44>
   11eac:	add	r6, r5, #1
   11eb0:	sub	r3, r6, r4
   11eb4:	cmp	r3, #6
   11eb8:	ble	11ef8 <__assert_fail@plt+0xf44>
   11ebc:	mov	r2, #7
   11ec0:	ldr	r1, [pc, #96]	; 11f28 <__assert_fail@plt+0xf74>
   11ec4:	sub	r0, r5, #6
   11ec8:	bl	10f9c <strncmp@plt>
   11ecc:	cmp	r0, #0
   11ed0:	bne	11ef8 <__assert_fail@plt+0xf44>
   11ed4:	mov	r2, #3
   11ed8:	ldr	r1, [pc, #76]	; 11f2c <__assert_fail@plt+0xf78>
   11edc:	mov	r0, r6
   11ee0:	bl	10f9c <strncmp@plt>
   11ee4:	cmp	r0, #0
   11ee8:	movne	r4, r6
   11eec:	ldreq	r3, [pc, #60]	; 11f30 <__assert_fail@plt+0xf7c>
   11ef0:	addeq	r4, r5, #4
   11ef4:	streq	r4, [r3]
   11ef8:	ldr	r2, [pc, #52]	; 11f34 <__assert_fail@plt+0xf80>
   11efc:	ldr	r3, [pc, #52]	; 11f38 <__assert_fail@plt+0xf84>
   11f00:	str	r4, [r2]
   11f04:	str	r4, [r3]
   11f08:	pop	{r4, r5, r6, pc}
   11f0c:	ldr	r3, [pc, #40]	; 11f3c <__assert_fail@plt+0xf88>
   11f10:	mov	r2, #55	; 0x37
   11f14:	mov	r1, #1
   11f18:	ldr	r3, [r3]
   11f1c:	ldr	r0, [pc, #28]	; 11f40 <__assert_fail@plt+0xf8c>
   11f20:	bl	10df8 <fwrite@plt>
   11f24:	bl	10fa8 <abort@plt>
   11f28:	andeq	r6, r1, r8, ror #11
   11f2c:	strdeq	r6, [r1], -r0
   11f30:	andeq	r7, r2, r0, asr #2
   11f34:	muleq	r2, r0, r1
   11f38:	andeq	r7, r2, r4, asr #2
   11f3c:	andeq	r7, r2, r0, asr r1
   11f40:			; <UNDEFINED> instruction: 0x000165b0
   11f44:	push	{r4, r5, r6, lr}
   11f48:	mov	r2, #48	; 0x30
   11f4c:	mov	r4, r1
   11f50:	mov	r1, #0
   11f54:	mov	r5, r0
   11f58:	bl	10ef4 <memset@plt>
   11f5c:	cmp	r4, #10
   11f60:	beq	11f70 <__assert_fail@plt+0xfbc>
   11f64:	str	r4, [r5]
   11f68:	mov	r0, r5
   11f6c:	pop	{r4, r5, r6, pc}
   11f70:	bl	10fa8 <abort@plt>
   11f74:	push	{r4, r5, r6, lr}
   11f78:	mov	r4, r0
   11f7c:	mov	r5, r1
   11f80:	bl	1542c <__assert_fail@plt+0x4478>
   11f84:	ldrb	r3, [r0]
   11f88:	bic	r3, r3, #32
   11f8c:	cmp	r3, #85	; 0x55
   11f90:	bne	11ff0 <__assert_fail@plt+0x103c>
   11f94:	ldrb	r3, [r0, #1]
   11f98:	bic	r3, r3, #32
   11f9c:	cmp	r3, #84	; 0x54
   11fa0:	bne	1202c <__assert_fail@plt+0x1078>
   11fa4:	ldrb	r3, [r0, #2]
   11fa8:	bic	r3, r3, #32
   11fac:	cmp	r3, #70	; 0x46
   11fb0:	bne	1202c <__assert_fail@plt+0x1078>
   11fb4:	ldrb	r3, [r0, #3]
   11fb8:	cmp	r3, #45	; 0x2d
   11fbc:	bne	1202c <__assert_fail@plt+0x1078>
   11fc0:	ldrb	r3, [r0, #4]
   11fc4:	cmp	r3, #56	; 0x38
   11fc8:	bne	1202c <__assert_fail@plt+0x1078>
   11fcc:	ldrb	r3, [r0, #5]
   11fd0:	cmp	r3, #0
   11fd4:	bne	1202c <__assert_fail@plt+0x1078>
   11fd8:	ldrb	r2, [r4]
   11fdc:	ldr	r3, [pc, #152]	; 1207c <__assert_fail@plt+0x10c8>
   11fe0:	ldr	r0, [pc, #152]	; 12080 <__assert_fail@plt+0x10cc>
   11fe4:	cmp	r2, #96	; 0x60
   11fe8:	movne	r0, r3
   11fec:	pop	{r4, r5, r6, pc}
   11ff0:	cmp	r3, #71	; 0x47
   11ff4:	bne	1202c <__assert_fail@plt+0x1078>
   11ff8:	ldrb	r3, [r0, #1]
   11ffc:	bic	r3, r3, #32
   12000:	cmp	r3, #66	; 0x42
   12004:	bne	1202c <__assert_fail@plt+0x1078>
   12008:	ldrb	r3, [r0, #2]
   1200c:	cmp	r3, #49	; 0x31
   12010:	bne	1202c <__assert_fail@plt+0x1078>
   12014:	ldrb	r3, [r0, #3]
   12018:	cmp	r3, #56	; 0x38
   1201c:	bne	1202c <__assert_fail@plt+0x1078>
   12020:	ldrb	r3, [r0, #4]
   12024:	cmp	r3, #48	; 0x30
   12028:	beq	12040 <__assert_fail@plt+0x108c>
   1202c:	ldr	r3, [pc, #80]	; 12084 <__assert_fail@plt+0x10d0>
   12030:	cmp	r5, #9
   12034:	ldr	r0, [pc, #76]	; 12088 <__assert_fail@plt+0x10d4>
   12038:	movne	r0, r3
   1203c:	pop	{r4, r5, r6, pc}
   12040:	ldrb	r3, [r0, #5]
   12044:	cmp	r3, #51	; 0x33
   12048:	bne	1202c <__assert_fail@plt+0x1078>
   1204c:	ldrb	r3, [r0, #6]
   12050:	cmp	r3, #48	; 0x30
   12054:	bne	1202c <__assert_fail@plt+0x1078>
   12058:	ldrb	r3, [r0, #7]
   1205c:	cmp	r3, #0
   12060:	bne	1202c <__assert_fail@plt+0x1078>
   12064:	ldrb	r2, [r4]
   12068:	ldr	r3, [pc, #28]	; 1208c <__assert_fail@plt+0x10d8>
   1206c:	ldr	r0, [pc, #28]	; 12090 <__assert_fail@plt+0x10dc>
   12070:	cmp	r2, #96	; 0x60
   12074:	movne	r0, r3
   12078:	pop	{r4, r5, r6, pc}
   1207c:	andeq	r6, r1, ip, asr #12
   12080:	andeq	r6, r1, r8, asr #12
   12084:	andeq	r6, r1, ip, asr r6
   12088:	andeq	r6, r1, r8, asr r6
   1208c:	andeq	r6, r1, r4, asr r6
   12090:	andeq	r6, r1, r0, asr r6
   12094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12098:	sub	sp, sp, #116	; 0x74
   1209c:	mov	sl, r0
   120a0:	str	r3, [sp, #24]
   120a4:	mov	r3, #1
   120a8:	mov	r8, r1
   120ac:	str	r2, [sp, #56]	; 0x38
   120b0:	str	r3, [sp, #36]	; 0x24
   120b4:	bl	10e10 <__ctype_get_mb_cur_max@plt>
   120b8:	ldr	r3, [sp, #156]	; 0x9c
   120bc:	mov	fp, r8
   120c0:	mov	r2, #0
   120c4:	lsr	r3, r3, #1
   120c8:	and	r3, r3, #1
   120cc:	str	r2, [sp, #68]	; 0x44
   120d0:	str	r3, [sp, #28]
   120d4:	str	r2, [sp, #40]	; 0x28
   120d8:	str	r2, [sp, #44]	; 0x2c
   120dc:	str	r2, [sp, #52]	; 0x34
   120e0:	str	r2, [sp, #64]	; 0x40
   120e4:	str	r2, [sp, #72]	; 0x48
   120e8:	str	sl, [sp, #32]
   120ec:	str	r0, [sp, #76]	; 0x4c
   120f0:	ldr	r3, [sp, #152]	; 0x98
   120f4:	cmp	r3, #10
   120f8:	ldrls	pc, [pc, r3, lsl #2]
   120fc:	b	132bc <__assert_fail@plt+0x2308>
   12100:	andeq	r2, r1, ip, lsr #2
   12104:	andeq	r2, r1, r4, lsl r4
   12108:	andeq	r2, r1, r8, lsr r4
   1210c:	andeq	r2, r1, ip, asr r4
   12110:	andeq	r2, r1, r8, lsl #11
   12114:	andeq	r2, r1, ip, asr r5
   12118:	andeq	r2, r1, r4, lsr r5
   1211c:	andeq	r2, r1, r0, ror r4
   12120:	andeq	r2, r1, r8, lsl #9
   12124:	andeq	r2, r1, r8, lsl #9
   12128:	andeq	r2, r1, r8, lsl #9
   1212c:	mov	r3, #0
   12130:	mov	r7, r3
   12134:	str	r3, [sp, #28]
   12138:	ldr	r3, [sp, #44]	; 0x2c
   1213c:	mov	sl, #0
   12140:	eor	r3, r3, #1
   12144:	str	r3, [sp, #60]	; 0x3c
   12148:	ldr	r3, [sp, #24]
   1214c:	cmn	r3, #1
   12150:	beq	126b4 <__assert_fail@plt+0x1700>
   12154:	ldr	r3, [sp, #24]
   12158:	subs	r5, r3, sl
   1215c:	movne	r5, #1
   12160:	cmp	r5, #0
   12164:	beq	126cc <__assert_fail@plt+0x1718>
   12168:	ldr	r3, [sp, #152]	; 0x98
   1216c:	ldr	r8, [sp, #44]	; 0x2c
   12170:	cmp	r3, #2
   12174:	moveq	r8, #0
   12178:	andne	r8, r8, #1
   1217c:	ldr	r3, [sp, #52]	; 0x34
   12180:	adds	r9, r3, #0
   12184:	movne	r9, #1
   12188:	ands	r6, r9, r8
   1218c:	beq	12b34 <__assert_fail@plt+0x1b80>
   12190:	ldr	r2, [sp, #52]	; 0x34
   12194:	ldr	r1, [sp, #24]
   12198:	cmp	r2, #1
   1219c:	mov	r3, r2
   121a0:	movls	r3, #0
   121a4:	movhi	r3, #1
   121a8:	cmn	r1, #1
   121ac:	movne	r3, #0
   121b0:	cmp	r3, #0
   121b4:	add	r4, sl, r2
   121b8:	beq	121c8 <__assert_fail@plt+0x1214>
   121bc:	ldr	r0, [sp, #56]	; 0x38
   121c0:	bl	10ec4 <strlen@plt>
   121c4:	str	r0, [sp, #24]
   121c8:	ldr	r3, [sp, #24]
   121cc:	cmp	r3, r4
   121d0:	ldr	r3, [sp, #56]	; 0x38
   121d4:	add	r3, r3, sl
   121d8:	str	r3, [sp, #48]	; 0x30
   121dc:	bcc	12b40 <__assert_fail@plt+0x1b8c>
   121e0:	mov	r0, r3
   121e4:	ldr	r2, [sp, #52]	; 0x34
   121e8:	ldr	r1, [sp, #64]	; 0x40
   121ec:	bl	10da4 <memcmp@plt>
   121f0:	cmp	r0, #0
   121f4:	bne	12b40 <__assert_fail@plt+0x1b8c>
   121f8:	ldr	r3, [sp, #28]
   121fc:	cmp	r3, #0
   12200:	bne	133bc <__assert_fail@plt+0x2408>
   12204:	ldr	r3, [sp, #48]	; 0x30
   12208:	ldrb	r4, [r3]
   1220c:	cmp	r4, #126	; 0x7e
   12210:	ldrls	pc, [pc, r4, lsl #2]
   12214:	b	12ad4 <__assert_fail@plt+0x1b20>
   12218:	strdeq	r2, [r1], -r8
   1221c:	ldrdeq	r2, [r1], -r4
   12220:	ldrdeq	r2, [r1], -r4
   12224:	ldrdeq	r2, [r1], -r4
   12228:	ldrdeq	r2, [r1], -r4
   1222c:	ldrdeq	r2, [r1], -r4
   12230:	ldrdeq	r2, [r1], -r4
   12234:	ldrdeq	r2, [r1], -ip
   12238:	andeq	r2, r1, r0, asr #17
   1223c:			; <UNDEFINED> instruction: 0x00012abc
   12240:	andeq	r2, r1, r0, lsr #16
   12244:	andeq	r2, r1, r4, lsl #16
   12248:	muleq	r1, r8, sl
   1224c:	andeq	r2, r1, r4, ror sl
   12250:	ldrdeq	r2, [r1], -r4
   12254:	ldrdeq	r2, [r1], -r4
   12258:	ldrdeq	r2, [r1], -r4
   1225c:	ldrdeq	r2, [r1], -r4
   12260:	ldrdeq	r2, [r1], -r4
   12264:	ldrdeq	r2, [r1], -r4
   12268:	ldrdeq	r2, [r1], -r4
   1226c:	ldrdeq	r2, [r1], -r4
   12270:	ldrdeq	r2, [r1], -r4
   12274:	ldrdeq	r2, [r1], -r4
   12278:	ldrdeq	r2, [r1], -r4
   1227c:	ldrdeq	r2, [r1], -r4
   12280:	ldrdeq	r2, [r1], -r4
   12284:	ldrdeq	r2, [r1], -r4
   12288:	ldrdeq	r2, [r1], -r4
   1228c:	ldrdeq	r2, [r1], -r4
   12290:	ldrdeq	r2, [r1], -r4
   12294:	ldrdeq	r2, [r1], -r4
   12298:			; <UNDEFINED> instruction: 0x00012ab4
   1229c:	andeq	r2, r1, r8, ror #19
   122a0:	andeq	r2, r1, r8, ror #19
   122a4:	strdeq	r2, [r1], -r8
   122a8:	andeq	r2, r1, r8, ror #19
   122ac:	andeq	r2, r1, r0, lsl #21
   122b0:	andeq	r2, r1, r8, ror #19
   122b4:	andeq	r2, r1, r4, asr sl
   122b8:	andeq	r2, r1, r8, ror #19
   122bc:	andeq	r2, r1, r8, ror #19
   122c0:	andeq	r2, r1, r8, ror #19
   122c4:	andeq	r2, r1, r0, lsl #21
   122c8:	andeq	r2, r1, r0, lsl #21
   122cc:	andeq	r2, r1, r0, lsl #21
   122d0:	andeq	r2, r1, r0, lsl #21
   122d4:	andeq	r2, r1, r0, lsl #21
   122d8:	andeq	r2, r1, r0, lsl #21
   122dc:	andeq	r2, r1, r0, lsl #21
   122e0:	andeq	r2, r1, r0, lsl #21
   122e4:	andeq	r2, r1, r0, lsl #21
   122e8:	andeq	r2, r1, r0, lsl #21
   122ec:	andeq	r2, r1, r0, lsl #21
   122f0:	andeq	r2, r1, r0, lsl #21
   122f4:	andeq	r2, r1, r0, lsl #21
   122f8:	andeq	r2, r1, r0, lsl #21
   122fc:	andeq	r2, r1, r0, lsl #21
   12300:	andeq	r2, r1, r0, lsl #21
   12304:	andeq	r2, r1, r8, ror #19
   12308:	andeq	r2, r1, r8, ror #19
   1230c:	andeq	r2, r1, r8, ror #19
   12310:	andeq	r2, r1, r8, ror #19
   12314:	andeq	r2, r1, r4, lsr #20
   12318:	ldrdeq	r2, [r1], -r4
   1231c:	andeq	r2, r1, r0, lsl #21
   12320:	andeq	r2, r1, r0, lsl #21
   12324:	andeq	r2, r1, r0, lsl #21
   12328:	andeq	r2, r1, r0, lsl #21
   1232c:	andeq	r2, r1, r0, lsl #21
   12330:	andeq	r2, r1, r0, lsl #21
   12334:	andeq	r2, r1, r0, lsl #21
   12338:	andeq	r2, r1, r0, lsl #21
   1233c:	andeq	r2, r1, r0, lsl #21
   12340:	andeq	r2, r1, r0, lsl #21
   12344:	andeq	r2, r1, r0, lsl #21
   12348:	andeq	r2, r1, r0, lsl #21
   1234c:	andeq	r2, r1, r0, lsl #21
   12350:	andeq	r2, r1, r0, lsl #21
   12354:	andeq	r2, r1, r0, lsl #21
   12358:	andeq	r2, r1, r0, lsl #21
   1235c:	andeq	r2, r1, r0, lsl #21
   12360:	andeq	r2, r1, r0, lsl #21
   12364:	andeq	r2, r1, r0, lsl #21
   12368:	andeq	r2, r1, r0, lsl #21
   1236c:	andeq	r2, r1, r0, lsl #21
   12370:	andeq	r2, r1, r0, lsl #21
   12374:	andeq	r2, r1, r0, lsl #21
   12378:	andeq	r2, r1, r0, lsl #21
   1237c:	andeq	r2, r1, r0, lsl #21
   12380:	andeq	r2, r1, r0, lsl #21
   12384:	andeq	r2, r1, r8, ror #19
   12388:	andeq	r2, r1, r4, asr #14
   1238c:	andeq	r2, r1, r0, lsl #21
   12390:	andeq	r2, r1, r8, ror #19
   12394:	andeq	r2, r1, r0, lsl #21
   12398:	andeq	r2, r1, r8, ror #19
   1239c:	andeq	r2, r1, r0, lsl #21
   123a0:	andeq	r2, r1, r0, lsl #21
   123a4:	andeq	r2, r1, r0, lsl #21
   123a8:	andeq	r2, r1, r0, lsl #21
   123ac:	andeq	r2, r1, r0, lsl #21
   123b0:	andeq	r2, r1, r0, lsl #21
   123b4:	andeq	r2, r1, r0, lsl #21
   123b8:	andeq	r2, r1, r0, lsl #21
   123bc:	andeq	r2, r1, r0, lsl #21
   123c0:	andeq	r2, r1, r0, lsl #21
   123c4:	andeq	r2, r1, r0, lsl #21
   123c8:	andeq	r2, r1, r0, lsl #21
   123cc:	andeq	r2, r1, r0, lsl #21
   123d0:	andeq	r2, r1, r0, lsl #21
   123d4:	andeq	r2, r1, r0, lsl #21
   123d8:	andeq	r2, r1, r0, lsl #21
   123dc:	andeq	r2, r1, r0, lsl #21
   123e0:	andeq	r2, r1, r0, lsl #21
   123e4:	andeq	r2, r1, r0, lsl #21
   123e8:	andeq	r2, r1, r0, lsl #21
   123ec:	andeq	r2, r1, r0, lsl #21
   123f0:	andeq	r2, r1, r0, lsl #21
   123f4:	andeq	r2, r1, r0, lsl #21
   123f8:	andeq	r2, r1, r0, lsl #21
   123fc:	andeq	r2, r1, r0, lsl #21
   12400:	andeq	r2, r1, r0, lsl #21
   12404:	ldrdeq	r2, [r1], -r8
   12408:	andeq	r2, r1, r8, ror #19
   1240c:	ldrdeq	r2, [r1], -r8
   12410:	strdeq	r2, [r1], -r8
   12414:	mov	r3, #1
   12418:	str	r3, [sp, #28]
   1241c:	str	r3, [sp, #52]	; 0x34
   12420:	ldr	r3, [pc, #4000]	; 133c8 <__assert_fail@plt+0x2414>
   12424:	mov	r7, #0
   12428:	str	r3, [sp, #64]	; 0x40
   1242c:	mov	r3, #2
   12430:	str	r3, [sp, #152]	; 0x98
   12434:	b	12138 <__assert_fail@plt+0x1184>
   12438:	ldr	r3, [sp, #28]
   1243c:	cmp	r3, #0
   12440:	beq	1259c <__assert_fail@plt+0x15e8>
   12444:	mov	r3, #1
   12448:	str	r3, [sp, #52]	; 0x34
   1244c:	ldr	r3, [pc, #3956]	; 133c8 <__assert_fail@plt+0x2414>
   12450:	mov	r7, #0
   12454:	str	r3, [sp, #64]	; 0x40
   12458:	b	12138 <__assert_fail@plt+0x1184>
   1245c:	mov	r3, #1
   12460:	str	r3, [sp, #44]	; 0x2c
   12464:	str	r3, [sp, #52]	; 0x34
   12468:	str	r3, [sp, #28]
   1246c:	b	12420 <__assert_fail@plt+0x146c>
   12470:	mov	r3, #0
   12474:	str	r3, [sp, #28]
   12478:	mov	r3, #1
   1247c:	str	r3, [sp, #44]	; 0x2c
   12480:	mov	r7, #0
   12484:	b	12138 <__assert_fail@plt+0x1184>
   12488:	ldr	r3, [sp, #152]	; 0x98
   1248c:	cmp	r3, #10
   12490:	beq	124d4 <__assert_fail@plt+0x1520>
   12494:	mov	r2, #5
   12498:	ldr	r1, [pc, #3884]	; 133cc <__assert_fail@plt+0x2418>
   1249c:	mov	r0, #0
   124a0:	bl	10dbc <dcgettext@plt>
   124a4:	ldr	r2, [pc, #3872]	; 133cc <__assert_fail@plt+0x2418>
   124a8:	cmp	r0, r2
   124ac:	str	r0, [sp, #164]	; 0xa4
   124b0:	beq	134b8 <__assert_fail@plt+0x2504>
   124b4:	mov	r2, #5
   124b8:	ldr	r1, [pc, #3848]	; 133c8 <__assert_fail@plt+0x2414>
   124bc:	mov	r0, #0
   124c0:	bl	10dbc <dcgettext@plt>
   124c4:	ldr	r2, [pc, #3836]	; 133c8 <__assert_fail@plt+0x2414>
   124c8:	cmp	r0, r2
   124cc:	str	r0, [sp, #168]	; 0xa8
   124d0:	beq	134a8 <__assert_fail@plt+0x24f4>
   124d4:	ldr	r7, [sp, #28]
   124d8:	cmp	r7, #0
   124dc:	movne	r7, #0
   124e0:	bne	12514 <__assert_fail@plt+0x1560>
   124e4:	ldr	r3, [sp, #164]	; 0xa4
   124e8:	ldrb	r3, [r3]
   124ec:	cmp	r3, #0
   124f0:	beq	134c8 <__assert_fail@plt+0x2514>
   124f4:	ldr	r2, [sp, #164]	; 0xa4
   124f8:	ldr	r1, [sp, #32]
   124fc:	cmp	fp, r7
   12500:	strbhi	r3, [r1, r7]
   12504:	ldrb	r3, [r2, #1]!
   12508:	add	r7, r7, #1
   1250c:	cmp	r3, #0
   12510:	bne	124fc <__assert_fail@plt+0x1548>
   12514:	ldr	r0, [sp, #168]	; 0xa8
   12518:	bl	10ec4 <strlen@plt>
   1251c:	ldr	r3, [sp, #168]	; 0xa8
   12520:	str	r3, [sp, #64]	; 0x40
   12524:	mov	r3, #1
   12528:	str	r3, [sp, #44]	; 0x2c
   1252c:	str	r0, [sp, #52]	; 0x34
   12530:	b	12138 <__assert_fail@plt+0x1184>
   12534:	mov	r3, #1
   12538:	str	r3, [sp, #44]	; 0x2c
   1253c:	str	r3, [sp, #52]	; 0x34
   12540:	str	r3, [sp, #28]
   12544:	ldr	r3, [pc, #3716]	; 133d0 <__assert_fail@plt+0x241c>
   12548:	mov	r7, #0
   1254c:	str	r3, [sp, #64]	; 0x40
   12550:	mov	r3, #5
   12554:	str	r3, [sp, #152]	; 0x98
   12558:	b	12138 <__assert_fail@plt+0x1184>
   1255c:	ldr	r3, [sp, #28]
   12560:	cmp	r3, #0
   12564:	beq	13264 <__assert_fail@plt+0x22b0>
   12568:	ldr	r3, [sp, #28]
   1256c:	mov	r7, #0
   12570:	str	r3, [sp, #44]	; 0x2c
   12574:	mov	r3, #1
   12578:	str	r3, [sp, #52]	; 0x34
   1257c:	ldr	r3, [pc, #3660]	; 133d0 <__assert_fail@plt+0x241c>
   12580:	str	r3, [sp, #64]	; 0x40
   12584:	b	12138 <__assert_fail@plt+0x1184>
   12588:	ldr	r3, [sp, #28]
   1258c:	cmp	r3, #0
   12590:	mov	r3, #1
   12594:	streq	r3, [sp, #44]	; 0x2c
   12598:	bne	1241c <__assert_fail@plt+0x1468>
   1259c:	cmp	fp, #0
   125a0:	beq	13294 <__assert_fail@plt+0x22e0>
   125a4:	ldr	r3, [sp, #32]
   125a8:	mov	r2, #39	; 0x27
   125ac:	mov	r7, #1
   125b0:	strb	r2, [r3]
   125b4:	mov	r3, #0
   125b8:	str	r3, [sp, #28]
   125bc:	mov	r3, #1
   125c0:	str	r3, [sp, #52]	; 0x34
   125c4:	ldr	r3, [pc, #3580]	; 133c8 <__assert_fail@plt+0x2414>
   125c8:	str	r3, [sp, #64]	; 0x40
   125cc:	mov	r3, #2
   125d0:	str	r3, [sp, #152]	; 0x98
   125d4:	b	12138 <__assert_fail@plt+0x1184>
   125d8:	ldr	r3, [sp, #24]
   125dc:	cmn	r3, #1
   125e0:	beq	131f8 <__assert_fail@plt+0x2244>
   125e4:	ldr	r3, [sp, #24]
   125e8:	subs	r3, r3, #1
   125ec:	movne	r3, #1
   125f0:	cmp	r3, #0
   125f4:	bne	12600 <__assert_fail@plt+0x164c>
   125f8:	cmp	sl, #0
   125fc:	beq	129ec <__assert_fail@plt+0x1a38>
   12600:	ldr	r3, [sp, #152]	; 0x98
   12604:	mov	r5, #0
   12608:	sub	r2, r3, #2
   1260c:	mov	r8, r5
   12610:	clz	r2, r2
   12614:	lsr	r2, r2, #5
   12618:	ldr	r3, [sp, #60]	; 0x3c
   1261c:	ldr	r1, [sp, #28]
   12620:	orr	r3, r2, r3
   12624:	eor	r3, r3, #1
   12628:	orr	r3, r1, r3
   1262c:	tst	r3, #255	; 0xff
   12630:	bne	12d5c <__assert_fail@plt+0x1da8>
   12634:	cmp	r6, #0
   12638:	bne	12788 <__assert_fail@plt+0x17d4>
   1263c:	ldr	r3, [sp, #40]	; 0x28
   12640:	eor	r8, r8, #1
   12644:	and	r8, r8, r3
   12648:	add	sl, sl, #1
   1264c:	uxtb	r6, r8
   12650:	cmp	r6, #0
   12654:	beq	12688 <__assert_fail@plt+0x16d4>
   12658:	cmp	fp, r7
   1265c:	movhi	r2, #39	; 0x27
   12660:	ldrhi	r3, [sp, #32]
   12664:	strbhi	r2, [r3, r7]
   12668:	add	r3, r7, #1
   1266c:	cmp	fp, r3
   12670:	movhi	r1, #39	; 0x27
   12674:	ldrhi	r2, [sp, #32]
   12678:	add	r7, r7, #2
   1267c:	strbhi	r1, [r2, r3]
   12680:	mov	r3, #0
   12684:	str	r3, [sp, #40]	; 0x28
   12688:	cmp	r7, fp
   1268c:	ldrcc	r3, [sp, #32]
   12690:	strbcc	r4, [r3, r7]
   12694:	ldr	r3, [sp, #36]	; 0x24
   12698:	cmp	r5, #0
   1269c:	moveq	r3, #0
   126a0:	str	r3, [sp, #36]	; 0x24
   126a4:	ldr	r3, [sp, #24]
   126a8:	add	r7, r7, #1
   126ac:	cmn	r3, #1
   126b0:	bne	12154 <__assert_fail@plt+0x11a0>
   126b4:	ldr	r3, [sp, #56]	; 0x38
   126b8:	ldrb	r5, [r3, sl]
   126bc:	adds	r5, r5, #0
   126c0:	movne	r5, #1
   126c4:	cmp	r5, #0
   126c8:	bne	12168 <__assert_fail@plt+0x11b4>
   126cc:	ldr	r3, [sp, #152]	; 0x98
   126d0:	ldr	r1, [sp, #28]
   126d4:	sub	r3, r3, #2
   126d8:	clz	r3, r3
   126dc:	lsr	r3, r3, #5
   126e0:	and	r9, r1, r3
   126e4:	cmp	r7, #0
   126e8:	movne	r2, #0
   126ec:	andeq	r2, r9, #1
   126f0:	cmp	r2, #0
   126f4:	bne	130d0 <__assert_fail@plt+0x211c>
   126f8:	eor	r2, r1, #1
   126fc:	ands	r3, r3, r2
   12700:	beq	1358c <__assert_fail@plt+0x25d8>
   12704:	ldr	r2, [sp, #68]	; 0x44
   12708:	cmp	r2, #0
   1270c:	beq	13578 <__assert_fail@plt+0x25c4>
   12710:	ldr	r3, [sp, #36]	; 0x24
   12714:	cmp	r3, #0
   12718:	bne	13530 <__assert_fail@plt+0x257c>
   1271c:	ldr	r2, [sp, #72]	; 0x48
   12720:	clz	r3, fp
   12724:	cmp	r2, #0
   12728:	lsr	r3, r3, #5
   1272c:	moveq	r3, #0
   12730:	cmp	r3, #0
   12734:	beq	134d0 <__assert_fail@plt+0x251c>
   12738:	str	r3, [sp, #68]	; 0x44
   1273c:	ldr	fp, [sp, #72]	; 0x48
   12740:	b	120f0 <__assert_fail@plt+0x113c>
   12744:	ldr	r3, [sp, #152]	; 0x98
   12748:	cmp	r3, #2
   1274c:	beq	12da0 <__assert_fail@plt+0x1dec>
   12750:	ldr	r3, [sp, #44]	; 0x2c
   12754:	ldr	r2, [sp, #28]
   12758:	and	r2, r3, r2
   1275c:	ands	r2, r9, r2
   12760:	bne	12dac <__assert_fail@plt+0x1df8>
   12764:	mov	r4, #92	; 0x5c
   12768:	mov	r3, r4
   1276c:	ldr	r1, [sp, #44]	; 0x2c
   12770:	cmp	r1, #0
   12774:	moveq	r5, #0
   12778:	moveq	r8, r1
   1277c:	beq	12618 <__assert_fail@plt+0x1664>
   12780:	mov	r4, r3
   12784:	mov	r5, #0
   12788:	ldr	r3, [sp, #28]
   1278c:	cmp	r3, #0
   12790:	bne	12d94 <__assert_fail@plt+0x1de0>
   12794:	ldr	r3, [sp, #40]	; 0x28
   12798:	eor	r9, r3, #1
   1279c:	and	r9, r9, r2
   127a0:	ands	r9, r9, #255	; 0xff
   127a4:	beq	127e8 <__assert_fail@plt+0x1834>
   127a8:	cmp	fp, r7
   127ac:	movhi	r2, #39	; 0x27
   127b0:	ldrhi	r3, [sp, #32]
   127b4:	str	r9, [sp, #40]	; 0x28
   127b8:	strbhi	r2, [r3, r7]
   127bc:	add	r3, r7, #1
   127c0:	cmp	fp, r3
   127c4:	movhi	r1, #36	; 0x24
   127c8:	ldrhi	r2, [sp, #32]
   127cc:	strbhi	r1, [r2, r3]
   127d0:	add	r3, r7, #2
   127d4:	cmp	fp, r3
   127d8:	add	r7, r7, #3
   127dc:	ldrhi	r2, [sp, #32]
   127e0:	movhi	r1, #39	; 0x27
   127e4:	strbhi	r1, [r2, r3]
   127e8:	cmp	fp, r7
   127ec:	movhi	r2, #92	; 0x5c
   127f0:	ldrhi	r3, [sp, #32]
   127f4:	add	sl, sl, #1
   127f8:	strbhi	r2, [r3, r7]
   127fc:	add	r7, r7, #1
   12800:	b	12688 <__assert_fail@plt+0x16d4>
   12804:	ldr	r3, [sp, #152]	; 0x98
   12808:	mov	r4, #11
   1280c:	sub	r2, r3, #2
   12810:	mov	r3, #118	; 0x76
   12814:	clz	r2, r2
   12818:	lsr	r2, r2, #5
   1281c:	b	1276c <__assert_fail@plt+0x17b8>
   12820:	mov	r4, #10
   12824:	mov	r3, #110	; 0x6e
   12828:	ldr	r2, [sp, #152]	; 0x98
   1282c:	ldr	r1, [sp, #28]
   12830:	sub	r2, r2, #2
   12834:	clz	r2, r2
   12838:	lsr	r2, r2, #5
   1283c:	ands	r1, r1, r2
   12840:	beq	1276c <__assert_fail@plt+0x17b8>
   12844:	ldr	sl, [sp, #32]
   12848:	mov	r8, fp
   1284c:	mov	r2, r1
   12850:	mov	r3, #2
   12854:	str	r3, [sp, #152]	; 0x98
   12858:	ldr	r9, [sp, #44]	; 0x2c
   1285c:	ldr	r3, [sp, #152]	; 0x98
   12860:	and	r9, r9, r2
   12864:	tst	r9, #255	; 0xff
   12868:	movne	r3, #4
   1286c:	str	r3, [sp, #152]	; 0x98
   12870:	ldr	r3, [sp, #156]	; 0x9c
   12874:	mov	ip, #0
   12878:	bic	r3, r3, #2
   1287c:	str	r3, [sp, #4]
   12880:	ldr	r3, [sp, #168]	; 0xa8
   12884:	ldr	r2, [sp, #56]	; 0x38
   12888:	str	r3, [sp, #16]
   1288c:	ldr	r3, [sp, #164]	; 0xa4
   12890:	mov	r1, r8
   12894:	str	r3, [sp, #12]
   12898:	ldr	r3, [sp, #152]	; 0x98
   1289c:	mov	r0, sl
   128a0:	str	r3, [sp]
   128a4:	str	ip, [sp, #8]
   128a8:	ldr	r3, [sp, #24]
   128ac:	bl	12094 <__assert_fail@plt+0x10e0>
   128b0:	mov	fp, r0
   128b4:	mov	r0, fp
   128b8:	add	sp, sp, #116	; 0x74
   128bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128c0:	ldr	r3, [sp, #152]	; 0x98
   128c4:	mov	r4, #8
   128c8:	sub	r2, r3, #2
   128cc:	mov	r3, #98	; 0x62
   128d0:	clz	r2, r2
   128d4:	lsr	r2, r2, #5
   128d8:	b	1276c <__assert_fail@plt+0x17b8>
   128dc:	ldr	r3, [sp, #152]	; 0x98
   128e0:	mov	r4, #7
   128e4:	sub	r2, r3, #2
   128e8:	mov	r3, #97	; 0x61
   128ec:	clz	r2, r2
   128f0:	lsr	r2, r2, #5
   128f4:	b	1276c <__assert_fail@plt+0x17b8>
   128f8:	ldr	r3, [sp, #44]	; 0x2c
   128fc:	cmp	r3, #0
   12900:	beq	130e4 <__assert_fail@plt+0x2130>
   12904:	ldr	r3, [sp, #28]
   12908:	cmp	r3, #0
   1290c:	bne	133bc <__assert_fail@plt+0x2408>
   12910:	ldr	r3, [sp, #152]	; 0x98
   12914:	sub	r2, r3, #2
   12918:	ldr	r3, [sp, #40]	; 0x28
   1291c:	clz	r2, r2
   12920:	eor	r3, r3, #1
   12924:	lsr	r2, r2, #5
   12928:	ands	r3, r2, r3
   1292c:	moveq	r1, r7
   12930:	beq	12974 <__assert_fail@plt+0x19c0>
   12934:	cmp	fp, r7
   12938:	movhi	r0, #39	; 0x27
   1293c:	ldrhi	r1, [sp, #32]
   12940:	str	r3, [sp, #40]	; 0x28
   12944:	strbhi	r0, [r1, r7]
   12948:	add	r1, r7, #1
   1294c:	cmp	fp, r1
   12950:	movhi	ip, #36	; 0x24
   12954:	ldrhi	r0, [sp, #32]
   12958:	strbhi	ip, [r0, r1]
   1295c:	add	r1, r7, #2
   12960:	cmp	fp, r1
   12964:	movhi	ip, #39	; 0x27
   12968:	ldrhi	r0, [sp, #32]
   1296c:	strbhi	ip, [r0, r1]
   12970:	add	r1, r7, #3
   12974:	cmp	fp, r1
   12978:	movhi	r0, #92	; 0x5c
   1297c:	ldrhi	r3, [sp, #32]
   12980:	add	r7, r1, #1
   12984:	strbhi	r0, [r3, r1]
   12988:	cmp	r8, #0
   1298c:	beq	132d0 <__assert_fail@plt+0x231c>
   12990:	ldr	r0, [sp, #24]
   12994:	add	r3, sl, #1
   12998:	cmp	r3, r0
   1299c:	bcs	1320c <__assert_fail@plt+0x2258>
   129a0:	ldr	r0, [sp, #56]	; 0x38
   129a4:	ldrb	r3, [r0, r3]
   129a8:	sub	r3, r3, #48	; 0x30
   129ac:	cmp	r3, #9
   129b0:	bhi	1320c <__assert_fail@plt+0x2258>
   129b4:	cmp	fp, r7
   129b8:	movhi	r3, #48	; 0x30
   129bc:	ldrhi	r0, [sp, #32]
   129c0:	ldr	r5, [sp, #28]
   129c4:	mov	r4, #48	; 0x30
   129c8:	strbhi	r3, [r0, r7]
   129cc:	add	r3, r1, #2
   129d0:	cmp	fp, r3
   129d4:	movhi	r0, #48	; 0x30
   129d8:	ldrhi	ip, [sp, #32]
   129dc:	add	r7, r1, #3
   129e0:	strbhi	r0, [ip, r3]
   129e4:	b	12618 <__assert_fail@plt+0x1664>
   129e8:	mov	r5, #0
   129ec:	ldr	r3, [sp, #152]	; 0x98
   129f0:	sub	r2, r3, #2
   129f4:	ldr	r3, [sp, #28]
   129f8:	clz	r2, r2
   129fc:	lsr	r2, r2, #5
   12a00:	ands	r8, r3, r2
   12a04:	beq	12618 <__assert_fail@plt+0x1664>
   12a08:	mov	r3, r8
   12a0c:	mov	r2, r3
   12a10:	mov	r3, #2
   12a14:	ldr	sl, [sp, #32]
   12a18:	mov	r8, fp
   12a1c:	str	r3, [sp, #152]	; 0x98
   12a20:	b	12858 <__assert_fail@plt+0x18a4>
   12a24:	ldr	r3, [sp, #152]	; 0x98
   12a28:	cmp	r3, #2
   12a2c:	beq	13150 <__assert_fail@plt+0x219c>
   12a30:	cmp	r3, #5
   12a34:	beq	13110 <__assert_fail@plt+0x215c>
   12a38:	mov	r5, #0
   12a3c:	sub	r2, r3, #2
   12a40:	mov	r8, r5
   12a44:	clz	r2, r2
   12a48:	mov	r4, #63	; 0x3f
   12a4c:	lsr	r2, r2, #5
   12a50:	b	12618 <__assert_fail@plt+0x1664>
   12a54:	ldr	r3, [sp, #152]	; 0x98
   12a58:	cmp	r3, #2
   12a5c:	beq	13170 <__assert_fail@plt+0x21bc>
   12a60:	mov	r2, #0
   12a64:	str	r5, [sp, #68]	; 0x44
   12a68:	mov	r8, r2
   12a6c:	mov	r4, #39	; 0x27
   12a70:	b	12618 <__assert_fail@plt+0x1664>
   12a74:	mov	r4, #13
   12a78:	mov	r3, #114	; 0x72
   12a7c:	b	12828 <__assert_fail@plt+0x1874>
   12a80:	ldr	r3, [sp, #152]	; 0x98
   12a84:	mov	r8, #0
   12a88:	sub	r2, r3, #2
   12a8c:	clz	r2, r2
   12a90:	lsr	r2, r2, #5
   12a94:	b	12618 <__assert_fail@plt+0x1664>
   12a98:	ldr	r3, [sp, #152]	; 0x98
   12a9c:	mov	r4, #12
   12aa0:	sub	r2, r3, #2
   12aa4:	mov	r3, #102	; 0x66
   12aa8:	clz	r2, r2
   12aac:	lsr	r2, r2, #5
   12ab0:	b	1276c <__assert_fail@plt+0x17b8>
   12ab4:	mov	r5, r6
   12ab8:	b	129ec <__assert_fail@plt+0x1a38>
   12abc:	ldr	r3, [sp, #152]	; 0x98
   12ac0:	sub	r2, r3, #2
   12ac4:	mov	r3, #116	; 0x74
   12ac8:	clz	r2, r2
   12acc:	lsr	r2, r2, #5
   12ad0:	b	1276c <__assert_fail@plt+0x17b8>
   12ad4:	ldr	r8, [sp, #76]	; 0x4c
   12ad8:	cmp	r8, #1
   12adc:	bne	12f8c <__assert_fail@plt+0x1fd8>
   12ae0:	bl	10eac <__ctype_b_loc@plt>
   12ae4:	sxth	r3, r4
   12ae8:	mov	ip, r8
   12aec:	lsl	r3, r3, #1
   12af0:	ldr	r2, [r0]
   12af4:	ldrh	r3, [r2, r3]
   12af8:	and	r3, r3, #16384	; 0x4000
   12afc:	cmp	r3, #0
   12b00:	movne	r5, #1
   12b04:	moveq	r5, #0
   12b08:	moveq	r3, #1
   12b0c:	movne	r3, #0
   12b10:	ldr	r2, [sp, #44]	; 0x2c
   12b14:	and	r3, r3, r2
   12b18:	ands	r8, r3, #255	; 0xff
   12b1c:	bne	12e20 <__assert_fail@plt+0x1e6c>
   12b20:	ldr	r3, [sp, #152]	; 0x98
   12b24:	sub	r2, r3, #2
   12b28:	clz	r2, r2
   12b2c:	lsr	r2, r2, #5
   12b30:	b	12618 <__assert_fail@plt+0x1664>
   12b34:	ldr	r3, [sp, #56]	; 0x38
   12b38:	add	r3, r3, sl
   12b3c:	str	r3, [sp, #48]	; 0x30
   12b40:	ldr	r3, [sp, #48]	; 0x30
   12b44:	mov	r6, #0
   12b48:	ldrb	r4, [r3]
   12b4c:	cmp	r4, #126	; 0x7e
   12b50:	ldrls	pc, [pc, r4, lsl #2]
   12b54:	b	12ad4 <__assert_fail@plt+0x1b20>
   12b58:	strdeq	r2, [r1], -r8
   12b5c:	ldrdeq	r2, [r1], -r4
   12b60:	ldrdeq	r2, [r1], -r4
   12b64:	ldrdeq	r2, [r1], -r4
   12b68:	ldrdeq	r2, [r1], -r4
   12b6c:	ldrdeq	r2, [r1], -r4
   12b70:	ldrdeq	r2, [r1], -r4
   12b74:	ldrdeq	r2, [r1], -ip
   12b78:	andeq	r2, r1, r0, asr #17
   12b7c:	andeq	r2, r1, r4, asr sp
   12b80:	andeq	r2, r1, r0, lsr #16
   12b84:	andeq	r2, r1, r4, lsl #16
   12b88:	muleq	r1, r8, sl
   12b8c:	andeq	r2, r1, r4, ror sl
   12b90:	ldrdeq	r2, [r1], -r4
   12b94:	ldrdeq	r2, [r1], -r4
   12b98:	ldrdeq	r2, [r1], -r4
   12b9c:	ldrdeq	r2, [r1], -r4
   12ba0:	ldrdeq	r2, [r1], -r4
   12ba4:	ldrdeq	r2, [r1], -r4
   12ba8:	ldrdeq	r2, [r1], -r4
   12bac:	ldrdeq	r2, [r1], -r4
   12bb0:	ldrdeq	r2, [r1], -r4
   12bb4:	ldrdeq	r2, [r1], -r4
   12bb8:	ldrdeq	r2, [r1], -r4
   12bbc:	ldrdeq	r2, [r1], -r4
   12bc0:	ldrdeq	r2, [r1], -r4
   12bc4:	ldrdeq	r2, [r1], -r4
   12bc8:	ldrdeq	r2, [r1], -r4
   12bcc:	ldrdeq	r2, [r1], -r4
   12bd0:	ldrdeq	r2, [r1], -r4
   12bd4:	ldrdeq	r2, [r1], -r4
   12bd8:	andeq	r2, r1, ip, ror #19
   12bdc:	andeq	r2, r1, r8, ror #19
   12be0:	andeq	r2, r1, r8, ror #19
   12be4:	strdeq	r2, [r1], -r8
   12be8:	andeq	r2, r1, r8, ror #19
   12bec:	andeq	r2, r1, r0, lsl #21
   12bf0:	andeq	r2, r1, r8, ror #19
   12bf4:	andeq	r2, r1, r4, asr sl
   12bf8:	andeq	r2, r1, r8, ror #19
   12bfc:	andeq	r2, r1, r8, ror #19
   12c00:	andeq	r2, r1, r8, ror #19
   12c04:	andeq	r2, r1, r0, lsl #21
   12c08:	andeq	r2, r1, r0, lsl #21
   12c0c:	andeq	r2, r1, r0, lsl #21
   12c10:	andeq	r2, r1, r0, lsl #21
   12c14:	andeq	r2, r1, r0, lsl #21
   12c18:	andeq	r2, r1, r0, lsl #21
   12c1c:	andeq	r2, r1, r0, lsl #21
   12c20:	andeq	r2, r1, r0, lsl #21
   12c24:	andeq	r2, r1, r0, lsl #21
   12c28:	andeq	r2, r1, r0, lsl #21
   12c2c:	andeq	r2, r1, r0, lsl #21
   12c30:	andeq	r2, r1, r0, lsl #21
   12c34:	andeq	r2, r1, r0, lsl #21
   12c38:	andeq	r2, r1, r0, lsl #21
   12c3c:	andeq	r2, r1, r0, lsl #21
   12c40:	andeq	r2, r1, r0, lsl #21
   12c44:	andeq	r2, r1, r8, ror #19
   12c48:	andeq	r2, r1, r8, ror #19
   12c4c:	andeq	r2, r1, r8, ror #19
   12c50:	andeq	r2, r1, r8, ror #19
   12c54:	andeq	r2, r1, r4, lsr #20
   12c58:	ldrdeq	r2, [r1], -r4
   12c5c:	andeq	r2, r1, r0, lsl #21
   12c60:	andeq	r2, r1, r0, lsl #21
   12c64:	andeq	r2, r1, r0, lsl #21
   12c68:	andeq	r2, r1, r0, lsl #21
   12c6c:	andeq	r2, r1, r0, lsl #21
   12c70:	andeq	r2, r1, r0, lsl #21
   12c74:	andeq	r2, r1, r0, lsl #21
   12c78:	andeq	r2, r1, r0, lsl #21
   12c7c:	andeq	r2, r1, r0, lsl #21
   12c80:	andeq	r2, r1, r0, lsl #21
   12c84:	andeq	r2, r1, r0, lsl #21
   12c88:	andeq	r2, r1, r0, lsl #21
   12c8c:	andeq	r2, r1, r0, lsl #21
   12c90:	andeq	r2, r1, r0, lsl #21
   12c94:	andeq	r2, r1, r0, lsl #21
   12c98:	andeq	r2, r1, r0, lsl #21
   12c9c:	andeq	r2, r1, r0, lsl #21
   12ca0:	andeq	r2, r1, r0, lsl #21
   12ca4:	andeq	r2, r1, r0, lsl #21
   12ca8:	andeq	r2, r1, r0, lsl #21
   12cac:	andeq	r2, r1, r0, lsl #21
   12cb0:	andeq	r2, r1, r0, lsl #21
   12cb4:	andeq	r2, r1, r0, lsl #21
   12cb8:	andeq	r2, r1, r0, lsl #21
   12cbc:	andeq	r2, r1, r0, lsl #21
   12cc0:	andeq	r2, r1, r0, lsl #21
   12cc4:	andeq	r2, r1, r8, ror #19
   12cc8:	andeq	r2, r1, r4, asr #14
   12ccc:	andeq	r2, r1, r0, lsl #21
   12cd0:	andeq	r2, r1, r8, ror #19
   12cd4:	andeq	r2, r1, r0, lsl #21
   12cd8:	andeq	r2, r1, r8, ror #19
   12cdc:	andeq	r2, r1, r0, lsl #21
   12ce0:	andeq	r2, r1, r0, lsl #21
   12ce4:	andeq	r2, r1, r0, lsl #21
   12ce8:	andeq	r2, r1, r0, lsl #21
   12cec:	andeq	r2, r1, r0, lsl #21
   12cf0:	andeq	r2, r1, r0, lsl #21
   12cf4:	andeq	r2, r1, r0, lsl #21
   12cf8:	andeq	r2, r1, r0, lsl #21
   12cfc:	andeq	r2, r1, r0, lsl #21
   12d00:	andeq	r2, r1, r0, lsl #21
   12d04:	andeq	r2, r1, r0, lsl #21
   12d08:	andeq	r2, r1, r0, lsl #21
   12d0c:	andeq	r2, r1, r0, lsl #21
   12d10:	andeq	r2, r1, r0, lsl #21
   12d14:	andeq	r2, r1, r0, lsl #21
   12d18:	andeq	r2, r1, r0, lsl #21
   12d1c:	andeq	r2, r1, r0, lsl #21
   12d20:	andeq	r2, r1, r0, lsl #21
   12d24:	andeq	r2, r1, r0, lsl #21
   12d28:	andeq	r2, r1, r0, lsl #21
   12d2c:	andeq	r2, r1, r0, lsl #21
   12d30:	andeq	r2, r1, r0, lsl #21
   12d34:	andeq	r2, r1, r0, lsl #21
   12d38:	andeq	r2, r1, r0, lsl #21
   12d3c:	andeq	r2, r1, r0, lsl #21
   12d40:	andeq	r2, r1, r0, lsl #21
   12d44:	ldrdeq	r2, [r1], -r8
   12d48:	andeq	r2, r1, r8, ror #19
   12d4c:	ldrdeq	r2, [r1], -r8
   12d50:	strdeq	r2, [r1], -r8
   12d54:	mov	r3, #116	; 0x74
   12d58:	b	12828 <__assert_fail@plt+0x1874>
   12d5c:	ldr	r3, [sp, #160]	; 0xa0
   12d60:	cmp	r3, #0
   12d64:	beq	12634 <__assert_fail@plt+0x1680>
   12d68:	lsr	r3, r4, #5
   12d6c:	ldr	r0, [sp, #160]	; 0xa0
   12d70:	uxtb	r3, r3
   12d74:	and	r1, r4, #31
   12d78:	ldr	r0, [r0, r3, lsl #2]
   12d7c:	lsr	r3, r0, r1
   12d80:	tst	r3, #1
   12d84:	beq	12634 <__assert_fail@plt+0x1680>
   12d88:	ldr	r3, [sp, #28]
   12d8c:	cmp	r3, #0
   12d90:	beq	12794 <__assert_fail@plt+0x17e0>
   12d94:	ldr	sl, [sp, #32]
   12d98:	mov	r8, fp
   12d9c:	b	12858 <__assert_fail@plt+0x18a4>
   12da0:	ldr	r3, [sp, #28]
   12da4:	cmp	r3, #0
   12da8:	bne	132fc <__assert_fail@plt+0x2348>
   12dac:	add	sl, sl, #1
   12db0:	ldr	r6, [sp, #40]	; 0x28
   12db4:	mov	r5, #0
   12db8:	mov	r4, #92	; 0x5c
   12dbc:	b	12650 <__assert_fail@plt+0x169c>
   12dc0:	cmp	r9, r8
   12dc4:	bne	13034 <__assert_fail@plt+0x2080>
   12dc8:	ldr	r0, [sp, #100]	; 0x64
   12dcc:	bl	10de0 <iswprint@plt>
   12dd0:	add	r5, r5, r4
   12dd4:	cmp	r0, #0
   12dd8:	add	r0, sp, #104	; 0x68
   12ddc:	moveq	r6, #0
   12de0:	bl	10d98 <mbsinit@plt>
   12de4:	cmp	r0, #0
   12de8:	beq	12fc8 <__assert_fail@plt+0x2014>
   12dec:	mov	r2, r6
   12df0:	mov	ip, r5
   12df4:	eor	r5, r2, #1
   12df8:	ldr	r4, [sp, #80]	; 0x50
   12dfc:	ldr	r6, [sp, #84]	; 0x54
   12e00:	ldr	r7, [sp, #88]	; 0x58
   12e04:	uxtb	r5, r5
   12e08:	cmp	ip, #1
   12e0c:	bls	1330c <__assert_fail@plt+0x2358>
   12e10:	ldr	r3, [sp, #44]	; 0x2c
   12e14:	and	r8, r3, r5
   12e18:	mov	r5, r2
   12e1c:	uxtb	r8, r8
   12e20:	add	r2, sl, ip
   12e24:	ldr	r0, [sp, #48]	; 0x30
   12e28:	mov	r1, #0
   12e2c:	str	r5, [sp, #48]	; 0x30
   12e30:	ldr	r9, [sp, #28]
   12e34:	ldr	ip, [sp, #40]	; 0x28
   12e38:	ldr	r3, [sp, #32]
   12e3c:	ldr	r5, [sp, #152]	; 0x98
   12e40:	b	12efc <__assert_fail@plt+0x1f48>
   12e44:	cmp	r9, #0
   12e48:	bne	13220 <__assert_fail@plt+0x226c>
   12e4c:	eor	r1, ip, #1
   12e50:	cmp	r5, #2
   12e54:	movne	r1, #0
   12e58:	andeq	r1, r1, #1
   12e5c:	cmp	r1, #0
   12e60:	beq	12e98 <__assert_fail@plt+0x1ee4>
   12e64:	cmp	fp, r7
   12e68:	movhi	ip, #39	; 0x27
   12e6c:	strbhi	ip, [r3, r7]
   12e70:	add	ip, r7, #1
   12e74:	cmp	fp, ip
   12e78:	movhi	lr, #36	; 0x24
   12e7c:	strbhi	lr, [r3, ip]
   12e80:	add	ip, r7, #2
   12e84:	cmp	fp, ip
   12e88:	movhi	lr, #39	; 0x27
   12e8c:	strbhi	lr, [r3, ip]
   12e90:	add	r7, r7, #3
   12e94:	mov	ip, r1
   12e98:	cmp	fp, r7
   12e9c:	movhi	r1, #92	; 0x5c
   12ea0:	strbhi	r1, [r3, r7]
   12ea4:	add	r1, r7, #1
   12ea8:	cmp	fp, r1
   12eac:	lsrhi	lr, r4, #6
   12eb0:	addhi	lr, lr, #48	; 0x30
   12eb4:	strbhi	lr, [r3, r1]
   12eb8:	add	lr, r7, #2
   12ebc:	cmp	fp, lr
   12ec0:	lsrhi	r1, r4, #3
   12ec4:	andhi	r1, r1, #7
   12ec8:	addhi	r1, r1, #48	; 0x30
   12ecc:	add	sl, sl, #1
   12ed0:	strbhi	r1, [r3, lr]
   12ed4:	and	r4, r4, #7
   12ed8:	cmp	r2, sl
   12edc:	add	r4, r4, #48	; 0x30
   12ee0:	add	r7, r7, #3
   12ee4:	bls	13244 <__assert_fail@plt+0x2290>
   12ee8:	mov	r1, r8
   12eec:	cmp	fp, r7
   12ef0:	strbhi	r4, [r3, r7]
   12ef4:	ldrb	r4, [r0, #1]!
   12ef8:	add	r7, r7, #1
   12efc:	cmp	r8, #0
   12f00:	bne	12e44 <__assert_fail@plt+0x1e90>
   12f04:	cmp	r6, #0
   12f08:	bne	12f58 <__assert_fail@plt+0x1fa4>
   12f0c:	eor	r6, r1, #1
   12f10:	and	r6, r6, ip
   12f14:	add	sl, sl, #1
   12f18:	cmp	r2, sl
   12f1c:	uxtb	r6, r6
   12f20:	bls	12f80 <__assert_fail@plt+0x1fcc>
   12f24:	cmp	r6, #0
   12f28:	beq	12eec <__assert_fail@plt+0x1f38>
   12f2c:	cmp	fp, r7
   12f30:	movhi	ip, #39	; 0x27
   12f34:	strbhi	ip, [r3, r7]
   12f38:	add	ip, r7, #1
   12f3c:	cmp	fp, ip
   12f40:	movhi	lr, #39	; 0x27
   12f44:	strbhi	lr, [r3, ip]
   12f48:	add	r7, r7, #2
   12f4c:	mov	r6, r8
   12f50:	mov	ip, r8
   12f54:	b	12eec <__assert_fail@plt+0x1f38>
   12f58:	cmp	fp, r7
   12f5c:	eor	r6, r1, #1
   12f60:	movhi	lr, #92	; 0x5c
   12f64:	and	r6, r6, ip
   12f68:	add	sl, sl, #1
   12f6c:	strbhi	lr, [r3, r7]
   12f70:	cmp	r2, sl
   12f74:	add	r7, r7, #1
   12f78:	uxtb	r6, r6
   12f7c:	bhi	12f24 <__assert_fail@plt+0x1f70>
   12f80:	str	ip, [sp, #40]	; 0x28
   12f84:	ldr	r5, [sp, #48]	; 0x30
   12f88:	b	12650 <__assert_fail@plt+0x169c>
   12f8c:	ldr	r3, [sp, #24]
   12f90:	cmn	r3, #1
   12f94:	mov	r3, #0
   12f98:	str	r3, [sp, #104]	; 0x68
   12f9c:	str	r3, [sp, #108]	; 0x6c
   12fa0:	beq	132c0 <__assert_fail@plt+0x230c>
   12fa4:	mov	r2, r5
   12fa8:	mov	r3, #0
   12fac:	str	r7, [sp, #88]	; 0x58
   12fb0:	ldr	r7, [sp, #152]	; 0x98
   12fb4:	str	r5, [sp, #92]	; 0x5c
   12fb8:	str	r6, [sp, #84]	; 0x54
   12fbc:	mov	r5, r3
   12fc0:	mov	r6, r2
   12fc4:	str	r4, [sp, #80]	; 0x50
   12fc8:	ldr	r3, [sp, #56]	; 0x38
   12fcc:	add	r9, sl, r5
   12fd0:	add	r8, r3, r9
   12fd4:	ldr	r3, [sp, #24]
   12fd8:	mov	r1, r8
   12fdc:	sub	r2, r3, r9
   12fe0:	add	r0, sp, #100	; 0x64
   12fe4:	add	r3, sp, #104	; 0x68
   12fe8:	bl	15460 <__assert_fail@plt+0x44ac>
   12fec:	subs	r4, r0, #0
   12ff0:	beq	13398 <__assert_fail@plt+0x23e4>
   12ff4:	cmn	r4, #1
   12ff8:	beq	13378 <__assert_fail@plt+0x23c4>
   12ffc:	cmn	r4, #2
   13000:	beq	13318 <__assert_fail@plt+0x2364>
   13004:	ldr	r2, [sp, #28]
   13008:	cmp	r7, #2
   1300c:	movne	r2, #0
   13010:	andeq	r2, r2, #1
   13014:	cmp	r2, #0
   13018:	beq	12dc8 <__assert_fail@plt+0x1e14>
   1301c:	cmp	r4, #1
   13020:	beq	12dc8 <__assert_fail@plt+0x1e14>
   13024:	sub	r3, r4, #1
   13028:	add	r9, r3, r9
   1302c:	ldr	r3, [sp, #56]	; 0x38
   13030:	add	r9, r3, r9
   13034:	ldrb	r3, [r8, #1]!
   13038:	sub	r3, r3, #91	; 0x5b
   1303c:	cmp	r3, #33	; 0x21
   13040:	ldrls	pc, [pc, r3, lsl #2]
   13044:	b	12dc0 <__assert_fail@plt+0x1e0c>
   13048:	ldrdeq	r3, [r1], -r0
   1304c:	ldrdeq	r3, [r1], -r0
   13050:	andeq	r2, r1, r0, asr #27
   13054:	ldrdeq	r3, [r1], -r0
   13058:	andeq	r2, r1, r0, asr #27
   1305c:	ldrdeq	r3, [r1], -r0
   13060:	andeq	r2, r1, r0, asr #27
   13064:	andeq	r2, r1, r0, asr #27
   13068:	andeq	r2, r1, r0, asr #27
   1306c:	andeq	r2, r1, r0, asr #27
   13070:	andeq	r2, r1, r0, asr #27
   13074:	andeq	r2, r1, r0, asr #27
   13078:	andeq	r2, r1, r0, asr #27
   1307c:	andeq	r2, r1, r0, asr #27
   13080:	andeq	r2, r1, r0, asr #27
   13084:	andeq	r2, r1, r0, asr #27
   13088:	andeq	r2, r1, r0, asr #27
   1308c:	andeq	r2, r1, r0, asr #27
   13090:	andeq	r2, r1, r0, asr #27
   13094:	andeq	r2, r1, r0, asr #27
   13098:	andeq	r2, r1, r0, asr #27
   1309c:	andeq	r2, r1, r0, asr #27
   130a0:	andeq	r2, r1, r0, asr #27
   130a4:	andeq	r2, r1, r0, asr #27
   130a8:	andeq	r2, r1, r0, asr #27
   130ac:	andeq	r2, r1, r0, asr #27
   130b0:	andeq	r2, r1, r0, asr #27
   130b4:	andeq	r2, r1, r0, asr #27
   130b8:	andeq	r2, r1, r0, asr #27
   130bc:	andeq	r2, r1, r0, asr #27
   130c0:	andeq	r2, r1, r0, asr #27
   130c4:	andeq	r2, r1, r0, asr #27
   130c8:	andeq	r2, r1, r0, asr #27
   130cc:	ldrdeq	r3, [r1], -r0
   130d0:	mov	r3, #2
   130d4:	ldr	sl, [sp, #32]
   130d8:	mov	r8, fp
   130dc:	str	r3, [sp, #152]	; 0x98
   130e0:	b	12858 <__assert_fail@plt+0x18a4>
   130e4:	ldr	r3, [sp, #156]	; 0x9c
   130e8:	tst	r3, #1
   130ec:	bne	13218 <__assert_fail@plt+0x2264>
   130f0:	ldr	r3, [sp, #152]	; 0x98
   130f4:	ldr	r4, [sp, #44]	; 0x2c
   130f8:	sub	r2, r3, #2
   130fc:	mov	r5, #0
   13100:	clz	r2, r2
   13104:	mov	r8, r4
   13108:	lsr	r2, r2, #5
   1310c:	b	12618 <__assert_fail@plt+0x1664>
   13110:	ldr	r3, [sp, #156]	; 0x9c
   13114:	ands	r9, r3, #4
   13118:	beq	13250 <__assert_fail@plt+0x229c>
   1311c:	ldr	r2, [sp, #24]
   13120:	add	r3, sl, #2
   13124:	cmp	r3, r2
   13128:	bcs	1313c <__assert_fail@plt+0x2188>
   1312c:	ldr	r2, [sp, #48]	; 0x30
   13130:	ldrb	r4, [r2, #1]
   13134:	cmp	r4, #63	; 0x3f
   13138:	beq	133d8 <__assert_fail@plt+0x2424>
   1313c:	mov	r2, #0
   13140:	mov	r8, r2
   13144:	mov	r5, r2
   13148:	mov	r4, #63	; 0x3f
   1314c:	b	12618 <__assert_fail@plt+0x1664>
   13150:	ldr	r3, [sp, #28]
   13154:	cmp	r3, #0
   13158:	bne	1347c <__assert_fail@plt+0x24c8>
   1315c:	mov	r2, r5
   13160:	mov	r8, r3
   13164:	mov	r5, #0
   13168:	mov	r4, #63	; 0x3f
   1316c:	b	12618 <__assert_fail@plt+0x1664>
   13170:	ldr	r3, [sp, #28]
   13174:	cmp	r3, #0
   13178:	bne	1347c <__assert_fail@plt+0x24c8>
   1317c:	ldr	r2, [sp, #72]	; 0x48
   13180:	adds	r3, fp, #0
   13184:	movne	r3, #1
   13188:	cmp	r2, #0
   1318c:	movne	r3, #0
   13190:	cmp	r3, #0
   13194:	strne	fp, [sp, #72]	; 0x48
   13198:	movne	fp, #0
   1319c:	bne	131d8 <__assert_fail@plt+0x2224>
   131a0:	cmp	fp, r7
   131a4:	movhi	r2, #39	; 0x27
   131a8:	ldrhi	r3, [sp, #32]
   131ac:	strbhi	r2, [r3, r7]
   131b0:	add	r3, r7, #1
   131b4:	cmp	fp, r3
   131b8:	movhi	r1, #92	; 0x5c
   131bc:	ldrhi	r2, [sp, #32]
   131c0:	strbhi	r1, [r2, r3]
   131c4:	add	r3, r7, #2
   131c8:	cmp	fp, r3
   131cc:	movhi	r1, #39	; 0x27
   131d0:	ldrhi	r2, [sp, #32]
   131d4:	strbhi	r1, [r2, r3]
   131d8:	ldr	r3, [sp, #28]
   131dc:	add	r7, r7, #3
   131e0:	mov	r2, r5
   131e4:	mov	r8, r3
   131e8:	str	r5, [sp, #68]	; 0x44
   131ec:	str	r3, [sp, #40]	; 0x28
   131f0:	mov	r4, #39	; 0x27
   131f4:	b	12618 <__assert_fail@plt+0x1664>
   131f8:	ldr	r3, [sp, #56]	; 0x38
   131fc:	ldrb	r3, [r3, #1]
   13200:	adds	r3, r3, #0
   13204:	movne	r3, #1
   13208:	b	125f0 <__assert_fail@plt+0x163c>
   1320c:	ldr	r5, [sp, #28]
   13210:	mov	r4, #48	; 0x30
   13214:	b	12618 <__assert_fail@plt+0x1664>
   13218:	add	sl, sl, #1
   1321c:	b	12148 <__assert_fail@plt+0x1194>
   13220:	mov	sl, r3
   13224:	ldr	r3, [sp, #28]
   13228:	mov	r8, fp
   1322c:	str	r3, [sp, #44]	; 0x2c
   13230:	ldr	r3, [sp, #152]	; 0x98
   13234:	sub	r2, r3, #2
   13238:	clz	r2, r2
   1323c:	lsr	r2, r2, #5
   13240:	b	12858 <__assert_fail@plt+0x18a4>
   13244:	str	ip, [sp, #40]	; 0x28
   13248:	ldr	r5, [sp, #48]	; 0x30
   1324c:	b	12688 <__assert_fail@plt+0x16d4>
   13250:	mov	r2, r9
   13254:	mov	r8, r9
   13258:	mov	r5, #0
   1325c:	mov	r4, #63	; 0x3f
   13260:	b	12618 <__assert_fail@plt+0x1664>
   13264:	cmp	fp, #0
   13268:	beq	132e0 <__assert_fail@plt+0x232c>
   1326c:	ldr	r1, [sp, #32]
   13270:	mov	r3, #34	; 0x22
   13274:	mov	r2, #1
   13278:	strb	r3, [r1]
   1327c:	ldr	r3, [pc, #332]	; 133d0 <__assert_fail@plt+0x241c>
   13280:	str	r2, [sp, #52]	; 0x34
   13284:	mov	r7, r2
   13288:	str	r2, [sp, #44]	; 0x2c
   1328c:	str	r3, [sp, #64]	; 0x40
   13290:	b	12138 <__assert_fail@plt+0x1184>
   13294:	ldr	r3, [pc, #300]	; 133c8 <__assert_fail@plt+0x2414>
   13298:	str	r3, [sp, #64]	; 0x40
   1329c:	mov	r3, #0
   132a0:	str	r3, [sp, #28]
   132a4:	mov	r3, #1
   132a8:	str	r3, [sp, #52]	; 0x34
   132ac:	mov	r7, r3
   132b0:	mov	r3, #2
   132b4:	str	r3, [sp, #152]	; 0x98
   132b8:	b	12138 <__assert_fail@plt+0x1184>
   132bc:	bl	10fa8 <abort@plt>
   132c0:	ldr	r0, [sp, #56]	; 0x38
   132c4:	bl	10ec4 <strlen@plt>
   132c8:	str	r0, [sp, #24]
   132cc:	b	12fa4 <__assert_fail@plt+0x1ff0>
   132d0:	mov	r5, r8
   132d4:	mov	r4, #48	; 0x30
   132d8:	ldr	r8, [sp, #44]	; 0x2c
   132dc:	b	12618 <__assert_fail@plt+0x1664>
   132e0:	mov	r3, #1
   132e4:	str	r3, [sp, #52]	; 0x34
   132e8:	mov	r7, r3
   132ec:	str	r3, [sp, #44]	; 0x2c
   132f0:	ldr	r3, [pc, #216]	; 133d0 <__assert_fail@plt+0x241c>
   132f4:	str	r3, [sp, #64]	; 0x40
   132f8:	b	12138 <__assert_fail@plt+0x1184>
   132fc:	ldr	sl, [sp, #32]
   13300:	mov	r8, fp
   13304:	mov	r2, r3
   13308:	b	12858 <__assert_fail@plt+0x18a4>
   1330c:	mov	r3, r5
   13310:	mov	r5, r2
   13314:	b	12b10 <__assert_fail@plt+0x1b5c>
   13318:	ldr	r1, [sp, #24]
   1331c:	mov	r2, r5
   13320:	cmp	r1, r9
   13324:	mov	ip, r5
   13328:	ldr	r4, [sp, #80]	; 0x50
   1332c:	ldr	r5, [sp, #92]	; 0x5c
   13330:	ldr	r6, [sp, #84]	; 0x54
   13334:	ldr	r7, [sp, #88]	; 0x58
   13338:	bls	1336c <__assert_fail@plt+0x23b8>
   1333c:	ldrb	r3, [r8]
   13340:	cmp	r3, #0
   13344:	bne	13358 <__assert_fail@plt+0x23a4>
   13348:	b	13370 <__assert_fail@plt+0x23bc>
   1334c:	ldrb	r3, [r8, #1]!
   13350:	cmp	r3, #0
   13354:	beq	13470 <__assert_fail@plt+0x24bc>
   13358:	add	r2, r2, #1
   1335c:	add	r3, sl, r2
   13360:	cmp	r1, r3
   13364:	bhi	1334c <__assert_fail@plt+0x2398>
   13368:	mov	ip, r2
   1336c:	mov	r3, #0
   13370:	mov	r2, r3
   13374:	b	12e08 <__assert_fail@plt+0x1e54>
   13378:	mov	r3, #0
   1337c:	mov	ip, r5
   13380:	ldr	r4, [sp, #80]	; 0x50
   13384:	ldr	r5, [sp, #92]	; 0x5c
   13388:	ldr	r6, [sp, #84]	; 0x54
   1338c:	ldr	r7, [sp, #88]	; 0x58
   13390:	mov	r2, r3
   13394:	b	12e08 <__assert_fail@plt+0x1e54>
   13398:	mov	r3, r6
   1339c:	mov	ip, r5
   133a0:	eor	r5, r3, #1
   133a4:	mov	r2, r6
   133a8:	ldr	r4, [sp, #80]	; 0x50
   133ac:	ldr	r6, [sp, #84]	; 0x54
   133b0:	ldr	r7, [sp, #88]	; 0x58
   133b4:	uxtb	r5, r5
   133b8:	b	12e08 <__assert_fail@plt+0x1e54>
   133bc:	ldr	sl, [sp, #32]
   133c0:	mov	r8, fp
   133c4:	b	1322c <__assert_fail@plt+0x2278>
   133c8:	andeq	r6, r1, ip, asr r6
   133cc:	andeq	r6, r1, r0, ror #12
   133d0:	andeq	r6, r1, r8, asr r6
   133d4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   133d8:	ldr	r2, [sp, #56]	; 0x38
   133dc:	ldrb	r1, [r2, r3]
   133e0:	sub	r2, r1, #33	; 0x21
   133e4:	uxtb	r2, r2
   133e8:	cmp	r2, #29
   133ec:	bhi	1348c <__assert_fail@plt+0x24d8>
   133f0:	ldr	r0, [pc, #-36]	; 133d4 <__assert_fail@plt+0x2420>
   133f4:	mov	ip, #1
   133f8:	ands	r2, r0, ip, lsl r2
   133fc:	beq	1349c <__assert_fail@plt+0x24e8>
   13400:	ldr	r2, [sp, #28]
   13404:	cmp	r2, #0
   13408:	bne	1359c <__assert_fail@plt+0x25e8>
   1340c:	cmp	fp, r7
   13410:	ldr	r8, [sp, #28]
   13414:	ldrhi	r2, [sp, #32]
   13418:	mov	sl, r3
   1341c:	mov	r5, r8
   13420:	strbhi	r4, [r2, r7]
   13424:	add	r2, r7, #1
   13428:	cmp	fp, r2
   1342c:	movhi	r0, #34	; 0x22
   13430:	ldrhi	ip, [sp, #32]
   13434:	mov	r4, r1
   13438:	strbhi	r0, [ip, r2]
   1343c:	add	r2, r7, #2
   13440:	cmp	fp, r2
   13444:	movhi	r0, #34	; 0x22
   13448:	ldrhi	ip, [sp, #32]
   1344c:	strbhi	r0, [ip, r2]
   13450:	add	r2, r7, #3
   13454:	cmp	fp, r2
   13458:	movhi	r0, #63	; 0x3f
   1345c:	ldrhi	ip, [sp, #32]
   13460:	add	r7, r7, #4
   13464:	strbhi	r0, [ip, r2]
   13468:	mov	r2, r8
   1346c:	b	12618 <__assert_fail@plt+0x1664>
   13470:	mov	ip, r2
   13474:	mov	r2, r3
   13478:	b	12e08 <__assert_fail@plt+0x1e54>
   1347c:	ldr	sl, [sp, #32]
   13480:	mov	r8, fp
   13484:	ldr	r2, [sp, #28]
   13488:	b	12858 <__assert_fail@plt+0x18a4>
   1348c:	mov	r2, #0
   13490:	mov	r8, r2
   13494:	mov	r5, r2
   13498:	b	12618 <__assert_fail@plt+0x1664>
   1349c:	mov	r8, r2
   134a0:	mov	r5, #0
   134a4:	b	12618 <__assert_fail@plt+0x1664>
   134a8:	ldr	r1, [sp, #152]	; 0x98
   134ac:	bl	11f74 <__assert_fail@plt+0xfc0>
   134b0:	str	r0, [sp, #168]	; 0xa8
   134b4:	b	124d4 <__assert_fail@plt+0x1520>
   134b8:	ldr	r1, [sp, #152]	; 0x98
   134bc:	bl	11f74 <__assert_fail@plt+0xfc0>
   134c0:	str	r0, [sp, #164]	; 0xa4
   134c4:	b	124b4 <__assert_fail@plt+0x1500>
   134c8:	ldr	r7, [sp, #28]
   134cc:	b	12514 <__assert_fail@plt+0x1560>
   134d0:	ldr	sl, [sp, #32]
   134d4:	ldr	r2, [sp, #68]	; 0x44
   134d8:	mov	r8, fp
   134dc:	mov	fp, r7
   134e0:	ldr	r3, [sp, #64]	; 0x40
   134e4:	cmp	r3, #0
   134e8:	moveq	r2, #0
   134ec:	andne	r2, r2, #1
   134f0:	cmp	r2, #0
   134f4:	beq	13520 <__assert_fail@plt+0x256c>
   134f8:	mov	r2, r3
   134fc:	ldrb	r3, [r3]
   13500:	cmp	r3, #0
   13504:	beq	13520 <__assert_fail@plt+0x256c>
   13508:	cmp	r8, fp
   1350c:	strbhi	r3, [sl, fp]
   13510:	ldrb	r3, [r2, #1]!
   13514:	add	fp, fp, #1
   13518:	cmp	r3, #0
   1351c:	bne	13508 <__assert_fail@plt+0x2554>
   13520:	cmp	r8, fp
   13524:	movhi	r3, #0
   13528:	strbhi	r3, [sl, fp]
   1352c:	b	128b4 <__assert_fail@plt+0x1900>
   13530:	ldr	r3, [sp, #168]	; 0xa8
   13534:	ldr	sl, [sp, #32]
   13538:	str	r3, [sp, #16]
   1353c:	ldr	r3, [sp, #164]	; 0xa4
   13540:	mov	ip, #5
   13544:	str	r3, [sp, #12]
   13548:	ldr	r3, [sp, #160]	; 0xa0
   1354c:	ldr	r2, [sp, #56]	; 0x38
   13550:	str	r3, [sp, #8]
   13554:	ldr	r3, [sp, #156]	; 0x9c
   13558:	ldr	r1, [sp, #72]	; 0x48
   1355c:	str	r3, [sp, #4]
   13560:	mov	r0, sl
   13564:	ldr	r3, [sp, #24]
   13568:	str	ip, [sp]
   1356c:	bl	12094 <__assert_fail@plt+0x10e0>
   13570:	mov	fp, r0
   13574:	b	128b4 <__assert_fail@plt+0x1900>
   13578:	mov	r8, fp
   1357c:	ldr	sl, [sp, #32]
   13580:	mov	fp, r7
   13584:	mov	r2, r3
   13588:	b	134e0 <__assert_fail@plt+0x252c>
   1358c:	mov	r8, fp
   13590:	ldr	sl, [sp, #32]
   13594:	mov	fp, r7
   13598:	b	134e0 <__assert_fail@plt+0x252c>
   1359c:	ldr	sl, [sp, #32]
   135a0:	mov	r8, fp
   135a4:	b	12870 <__assert_fail@plt+0x18bc>
   135a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135ac:	sub	sp, sp, #52	; 0x34
   135b0:	mov	r4, r0
   135b4:	mov	r5, r3
   135b8:	mov	sl, r1
   135bc:	mov	fp, r2
   135c0:	bl	10edc <__errno_location@plt>
   135c4:	ldr	r7, [pc, #412]	; 13768 <__assert_fail@plt+0x27b4>
   135c8:	cmn	r4, #-2147483647	; 0x80000001
   135cc:	ldr	r6, [r7]
   135d0:	mov	r8, r0
   135d4:	movne	r0, #0
   135d8:	moveq	r0, #1
   135dc:	ldr	r3, [r8]
   135e0:	orrs	r0, r0, r4, lsr #31
   135e4:	str	r3, [sp, #24]
   135e8:	bne	13764 <__assert_fail@plt+0x27b0>
   135ec:	ldr	r2, [r7, #4]
   135f0:	cmp	r4, r2
   135f4:	blt	13654 <__assert_fail@plt+0x26a0>
   135f8:	add	r9, r7, #8
   135fc:	cmp	r6, r9
   13600:	str	r2, [sp, #44]	; 0x2c
   13604:	beq	13734 <__assert_fail@plt+0x2780>
   13608:	mov	r3, #8
   1360c:	sub	r2, r4, r2
   13610:	mov	r0, r6
   13614:	str	r3, [sp]
   13618:	add	r2, r2, #1
   1361c:	mvn	r3, #-2147483648	; 0x80000000
   13620:	add	r1, sp, #44	; 0x2c
   13624:	bl	14414 <__assert_fail@plt+0x3460>
   13628:	mov	r6, r0
   1362c:	str	r0, [r7]
   13630:	ldr	r0, [r7, #4]
   13634:	ldr	r2, [sp, #44]	; 0x2c
   13638:	mov	r1, #0
   1363c:	sub	r2, r2, r0
   13640:	add	r0, r6, r0, lsl #3
   13644:	lsl	r2, r2, #3
   13648:	bl	10ef4 <memset@plt>
   1364c:	ldr	r3, [sp, #44]	; 0x2c
   13650:	str	r3, [r7, #4]
   13654:	add	r3, r6, r4, lsl #3
   13658:	ldr	r1, [r5, #4]
   1365c:	ldr	r7, [r3, #4]
   13660:	ldr	r9, [r6, r4, lsl #3]
   13664:	ldr	r2, [r5, #40]	; 0x28
   13668:	ldr	ip, [r5, #44]	; 0x2c
   1366c:	add	r0, r5, #8
   13670:	str	r3, [sp, #28]
   13674:	ldr	r3, [r5]
   13678:	orr	r1, r1, #1
   1367c:	mov	lr, r0
   13680:	str	r1, [sp, #32]
   13684:	str	r0, [sp, #36]	; 0x24
   13688:	str	r1, [sp, #4]
   1368c:	str	r2, [sp, #12]
   13690:	str	r3, [sp]
   13694:	mov	r0, r7
   13698:	mov	r1, r9
   1369c:	str	ip, [sp, #16]
   136a0:	str	lr, [sp, #8]
   136a4:	mov	r3, fp
   136a8:	mov	r2, sl
   136ac:	bl	12094 <__assert_fail@plt+0x10e0>
   136b0:	cmp	r9, r0
   136b4:	bhi	13720 <__assert_fail@plt+0x276c>
   136b8:	ldr	r3, [pc, #172]	; 1376c <__assert_fail@plt+0x27b8>
   136bc:	add	r9, r0, #1
   136c0:	cmp	r7, r3
   136c4:	str	r9, [r6, r4, lsl #3]
   136c8:	beq	136d4 <__assert_fail@plt+0x2720>
   136cc:	mov	r0, r7
   136d0:	bl	11e38 <__assert_fail@plt+0xe84>
   136d4:	mov	r0, r9
   136d8:	bl	142b0 <__assert_fail@plt+0x32fc>
   136dc:	ldr	lr, [sp, #28]
   136e0:	ldr	ip, [r5, #44]	; 0x2c
   136e4:	ldr	r4, [r5, #40]	; 0x28
   136e8:	mov	r3, fp
   136ec:	mov	r2, sl
   136f0:	mov	r1, r9
   136f4:	str	r0, [lr, #4]
   136f8:	ldr	lr, [r5]
   136fc:	ldr	r5, [sp, #36]	; 0x24
   13700:	str	ip, [sp, #16]
   13704:	str	r5, [sp, #8]
   13708:	ldr	r5, [sp, #32]
   1370c:	str	r4, [sp, #12]
   13710:	str	r5, [sp, #4]
   13714:	str	lr, [sp]
   13718:	mov	r7, r0
   1371c:	bl	12094 <__assert_fail@plt+0x10e0>
   13720:	ldr	r3, [sp, #24]
   13724:	mov	r0, r7
   13728:	str	r3, [r8]
   1372c:	add	sp, sp, #52	; 0x34
   13730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13734:	mov	r3, #8
   13738:	sub	r2, r4, r2
   1373c:	str	r3, [sp]
   13740:	add	r1, sp, #44	; 0x2c
   13744:	add	r2, r2, #1
   13748:	mvn	r3, #-2147483648	; 0x80000000
   1374c:	bl	14414 <__assert_fail@plt+0x3460>
   13750:	mov	r6, r0
   13754:	ldm	r9, {r0, r1}
   13758:	str	r6, [r7]
   1375c:	stm	r6, {r0, r1}
   13760:	b	13630 <__assert_fail@plt+0x267c>
   13764:	bl	10fa8 <abort@plt>
   13768:	andeq	r7, r2, r0, lsl #2
   1376c:	muleq	r2, r4, r1
   13770:	push	{r4, r5, r6, lr}
   13774:	mov	r5, r0
   13778:	bl	10edc <__errno_location@plt>
   1377c:	cmp	r5, #0
   13780:	mov	r1, #48	; 0x30
   13784:	mov	r4, r0
   13788:	ldr	r0, [pc, #16]	; 137a0 <__assert_fail@plt+0x27ec>
   1378c:	ldr	r6, [r4]
   13790:	movne	r0, r5
   13794:	bl	14710 <__assert_fail@plt+0x375c>
   13798:	str	r6, [r4]
   1379c:	pop	{r4, r5, r6, pc}
   137a0:	muleq	r2, r4, r2
   137a4:	ldr	r3, [pc, #12]	; 137b8 <__assert_fail@plt+0x2804>
   137a8:	cmp	r0, #0
   137ac:	moveq	r0, r3
   137b0:	ldr	r0, [r0]
   137b4:	bx	lr
   137b8:	muleq	r2, r4, r2
   137bc:	ldr	r3, [pc, #12]	; 137d0 <__assert_fail@plt+0x281c>
   137c0:	cmp	r0, #0
   137c4:	moveq	r0, r3
   137c8:	str	r1, [r0]
   137cc:	bx	lr
   137d0:	muleq	r2, r4, r2
   137d4:	ldr	r3, [pc, #52]	; 13810 <__assert_fail@plt+0x285c>
   137d8:	cmp	r0, #0
   137dc:	moveq	r0, r3
   137e0:	add	r3, r0, #8
   137e4:	push	{lr}		; (str lr, [sp, #-4]!)
   137e8:	lsr	lr, r1, #5
   137ec:	and	r1, r1, #31
   137f0:	ldr	ip, [r3, lr, lsl #2]
   137f4:	lsr	r0, ip, r1
   137f8:	eor	r2, r2, r0
   137fc:	and	r2, r2, #1
   13800:	and	r0, r0, #1
   13804:	eor	r1, ip, r2, lsl r1
   13808:	str	r1, [r3, lr, lsl #2]
   1380c:	pop	{pc}		; (ldr pc, [sp], #4)
   13810:	muleq	r2, r4, r2
   13814:	ldr	r3, [pc, #16]	; 1382c <__assert_fail@plt+0x2878>
   13818:	cmp	r0, #0
   1381c:	movne	r3, r0
   13820:	ldr	r0, [r3, #4]
   13824:	str	r1, [r3, #4]
   13828:	bx	lr
   1382c:	muleq	r2, r4, r2
   13830:	ldr	r3, [pc, #44]	; 13864 <__assert_fail@plt+0x28b0>
   13834:	cmp	r0, #0
   13838:	moveq	r0, r3
   1383c:	mov	ip, #10
   13840:	cmp	r2, #0
   13844:	cmpne	r1, #0
   13848:	str	ip, [r0]
   1384c:	beq	1385c <__assert_fail@plt+0x28a8>
   13850:	str	r1, [r0, #40]	; 0x28
   13854:	str	r2, [r0, #44]	; 0x2c
   13858:	bx	lr
   1385c:	push	{r4, lr}
   13860:	bl	10fa8 <abort@plt>
   13864:	muleq	r2, r4, r2
   13868:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1386c:	sub	sp, sp, #24
   13870:	ldr	ip, [pc, #108]	; 138e4 <__assert_fail@plt+0x2930>
   13874:	ldr	r4, [sp, #56]	; 0x38
   13878:	mov	r9, r2
   1387c:	cmp	r4, #0
   13880:	moveq	r4, ip
   13884:	mov	sl, r3
   13888:	mov	r7, r0
   1388c:	mov	r8, r1
   13890:	bl	10edc <__errno_location@plt>
   13894:	ldr	r3, [r4, #44]	; 0x2c
   13898:	mov	r1, r8
   1389c:	ldr	r6, [r0]
   138a0:	str	r3, [sp, #16]
   138a4:	ldr	r2, [r4, #40]	; 0x28
   138a8:	add	r3, r4, #8
   138ac:	str	r3, [sp, #8]
   138b0:	str	r2, [sp, #12]
   138b4:	ldr	r2, [r4, #4]
   138b8:	mov	r5, r0
   138bc:	str	r2, [sp, #4]
   138c0:	ldr	ip, [r4]
   138c4:	mov	r3, sl
   138c8:	mov	r2, r9
   138cc:	mov	r0, r7
   138d0:	str	ip, [sp]
   138d4:	bl	12094 <__assert_fail@plt+0x10e0>
   138d8:	str	r6, [r5]
   138dc:	add	sp, sp, #24
   138e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138e4:	muleq	r2, r4, r2
   138e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138ec:	cmp	r3, #0
   138f0:	sub	sp, sp, #44	; 0x2c
   138f4:	ldr	r4, [pc, #192]	; 139bc <__assert_fail@plt+0x2a08>
   138f8:	mov	r6, r2
   138fc:	movne	r4, r3
   13900:	mov	r9, r1
   13904:	mov	r8, r0
   13908:	bl	10edc <__errno_location@plt>
   1390c:	ldr	r3, [r4, #44]	; 0x2c
   13910:	ldr	r5, [r4, #4]
   13914:	add	sl, r4, #8
   13918:	cmp	r6, #0
   1391c:	orreq	r5, r5, #1
   13920:	mov	r1, #0
   13924:	ldr	r2, [r0]
   13928:	str	r3, [sp, #16]
   1392c:	ldr	r3, [r4, #40]	; 0x28
   13930:	stmib	sp, {r5, sl}
   13934:	str	r3, [sp, #12]
   13938:	ldr	r3, [r4]
   1393c:	mov	r7, r0
   13940:	str	r2, [sp, #28]
   13944:	str	r3, [sp]
   13948:	mov	r2, r8
   1394c:	mov	r3, r9
   13950:	mov	r0, r1
   13954:	bl	12094 <__assert_fail@plt+0x10e0>
   13958:	add	r1, r0, #1
   1395c:	mov	fp, r0
   13960:	mov	r0, r1
   13964:	str	r1, [sp, #36]	; 0x24
   13968:	bl	142b0 <__assert_fail@plt+0x32fc>
   1396c:	ldr	r3, [r4, #44]	; 0x2c
   13970:	mov	r2, r8
   13974:	str	r3, [sp, #16]
   13978:	ldr	r3, [r4, #40]	; 0x28
   1397c:	str	r5, [sp, #4]
   13980:	str	r3, [sp, #12]
   13984:	str	sl, [sp, #8]
   13988:	ldr	ip, [r4]
   1398c:	ldr	r1, [sp, #36]	; 0x24
   13990:	mov	r3, r9
   13994:	str	ip, [sp]
   13998:	str	r0, [sp, #32]
   1399c:	bl	12094 <__assert_fail@plt+0x10e0>
   139a0:	ldr	r2, [sp, #28]
   139a4:	cmp	r6, #0
   139a8:	str	r2, [r7]
   139ac:	ldr	r0, [sp, #32]
   139b0:	strne	fp, [r6]
   139b4:	add	sp, sp, #44	; 0x2c
   139b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139bc:	muleq	r2, r4, r2
   139c0:	mov	r3, r2
   139c4:	mov	r2, #0
   139c8:	b	138e8 <__assert_fail@plt+0x2934>
   139cc:	push	{r4, r5, r6, r7, r8, lr}
   139d0:	ldr	r6, [pc, #116]	; 13a4c <__assert_fail@plt+0x2a98>
   139d4:	ldr	r3, [r6, #4]
   139d8:	ldr	r7, [r6]
   139dc:	cmp	r3, #1
   139e0:	movgt	r5, r7
   139e4:	movgt	r4, #1
   139e8:	ble	13a08 <__assert_fail@plt+0x2a54>
   139ec:	ldr	r0, [r5, #12]
   139f0:	bl	11e38 <__assert_fail@plt+0xe84>
   139f4:	ldr	r3, [r6, #4]
   139f8:	add	r4, r4, #1
   139fc:	cmp	r3, r4
   13a00:	add	r5, r5, #8
   13a04:	bgt	139ec <__assert_fail@plt+0x2a38>
   13a08:	ldr	r0, [r7, #4]
   13a0c:	ldr	r4, [pc, #60]	; 13a50 <__assert_fail@plt+0x2a9c>
   13a10:	cmp	r0, r4
   13a14:	beq	13a28 <__assert_fail@plt+0x2a74>
   13a18:	bl	11e38 <__assert_fail@plt+0xe84>
   13a1c:	mov	r3, #256	; 0x100
   13a20:	str	r4, [r6, #12]
   13a24:	str	r3, [r6, #8]
   13a28:	ldr	r4, [pc, #36]	; 13a54 <__assert_fail@plt+0x2aa0>
   13a2c:	cmp	r7, r4
   13a30:	beq	13a40 <__assert_fail@plt+0x2a8c>
   13a34:	mov	r0, r7
   13a38:	bl	11e38 <__assert_fail@plt+0xe84>
   13a3c:	str	r4, [r6]
   13a40:	mov	r3, #1
   13a44:	str	r3, [r6, #4]
   13a48:	pop	{r4, r5, r6, r7, r8, pc}
   13a4c:	andeq	r7, r2, r0, lsl #2
   13a50:	muleq	r2, r4, r1
   13a54:	andeq	r7, r2, r8, lsl #2
   13a58:	ldr	r3, [pc, #4]	; 13a64 <__assert_fail@plt+0x2ab0>
   13a5c:	mvn	r2, #0
   13a60:	b	135a8 <__assert_fail@plt+0x25f4>
   13a64:	muleq	r2, r4, r2
   13a68:	ldr	r3, [pc]	; 13a70 <__assert_fail@plt+0x2abc>
   13a6c:	b	135a8 <__assert_fail@plt+0x25f4>
   13a70:	muleq	r2, r4, r2
   13a74:	mov	r1, r0
   13a78:	ldr	r3, [pc, #8]	; 13a88 <__assert_fail@plt+0x2ad4>
   13a7c:	mvn	r2, #0
   13a80:	mov	r0, #0
   13a84:	b	135a8 <__assert_fail@plt+0x25f4>
   13a88:	muleq	r2, r4, r2
   13a8c:	mov	r2, r1
   13a90:	ldr	r3, [pc, #8]	; 13aa0 <__assert_fail@plt+0x2aec>
   13a94:	mov	r1, r0
   13a98:	mov	r0, #0
   13a9c:	b	135a8 <__assert_fail@plt+0x25f4>
   13aa0:	muleq	r2, r4, r2
   13aa4:	push	{r4, r5, lr}
   13aa8:	sub	sp, sp, #52	; 0x34
   13aac:	mov	r5, r2
   13ab0:	mov	r4, r0
   13ab4:	mov	r0, sp
   13ab8:	bl	11f44 <__assert_fail@plt+0xf90>
   13abc:	mov	r3, sp
   13ac0:	mov	r1, r5
   13ac4:	mov	r0, r4
   13ac8:	mvn	r2, #0
   13acc:	bl	135a8 <__assert_fail@plt+0x25f4>
   13ad0:	add	sp, sp, #52	; 0x34
   13ad4:	pop	{r4, r5, pc}
   13ad8:	push	{r4, r5, r6, lr}
   13adc:	sub	sp, sp, #48	; 0x30
   13ae0:	mov	r5, r2
   13ae4:	mov	r6, r3
   13ae8:	mov	r4, r0
   13aec:	mov	r0, sp
   13af0:	bl	11f44 <__assert_fail@plt+0xf90>
   13af4:	mov	r3, sp
   13af8:	mov	r2, r6
   13afc:	mov	r1, r5
   13b00:	mov	r0, r4
   13b04:	bl	135a8 <__assert_fail@plt+0x25f4>
   13b08:	add	sp, sp, #48	; 0x30
   13b0c:	pop	{r4, r5, r6, pc}
   13b10:	mov	r2, r1
   13b14:	mov	r1, r0
   13b18:	mov	r0, #0
   13b1c:	b	13aa4 <__assert_fail@plt+0x2af0>
   13b20:	mov	r3, r2
   13b24:	mov	r2, r1
   13b28:	mov	r1, r0
   13b2c:	mov	r0, #0
   13b30:	b	13ad8 <__assert_fail@plt+0x2b24>
   13b34:	push	{r4, r5, r6, r7, r8, lr}
   13b38:	mov	r7, r0
   13b3c:	ldr	lr, [pc, #100]	; 13ba8 <__assert_fail@plt+0x2bf4>
   13b40:	mov	r8, r1
   13b44:	mov	r4, r2
   13b48:	ldm	lr!, {r0, r1, r2, r3}
   13b4c:	sub	sp, sp, #48	; 0x30
   13b50:	mov	ip, sp
   13b54:	lsr	r5, r4, #5
   13b58:	stmia	ip!, {r0, r1, r2, r3}
   13b5c:	add	r6, sp, #8
   13b60:	ldm	lr!, {r0, r1, r2, r3}
   13b64:	and	r4, r4, #31
   13b68:	stmia	ip!, {r0, r1, r2, r3}
   13b6c:	ldm	lr, {r0, r1, r2, r3}
   13b70:	stm	ip, {r0, r1, r2, r3}
   13b74:	mov	r2, r8
   13b78:	ldr	lr, [r6, r5, lsl #2]
   13b7c:	mov	r1, r7
   13b80:	mov	r3, sp
   13b84:	lsr	ip, lr, r4
   13b88:	eor	ip, ip, #1
   13b8c:	and	ip, ip, #1
   13b90:	mov	r0, #0
   13b94:	eor	r4, lr, ip, lsl r4
   13b98:	str	r4, [r6, r5, lsl #2]
   13b9c:	bl	135a8 <__assert_fail@plt+0x25f4>
   13ba0:	add	sp, sp, #48	; 0x30
   13ba4:	pop	{r4, r5, r6, r7, r8, pc}
   13ba8:	muleq	r2, r4, r2
   13bac:	mov	r2, r1
   13bb0:	mvn	r1, #0
   13bb4:	b	13b34 <__assert_fail@plt+0x2b80>
   13bb8:	mov	r2, #58	; 0x3a
   13bbc:	mvn	r1, #0
   13bc0:	b	13b34 <__assert_fail@plt+0x2b80>
   13bc4:	mov	r2, #58	; 0x3a
   13bc8:	b	13b34 <__assert_fail@plt+0x2b80>
   13bcc:	push	{r4, r5, r6, r7, lr}
   13bd0:	sub	sp, sp, #100	; 0x64
   13bd4:	mov	r6, r0
   13bd8:	mov	r0, sp
   13bdc:	mov	r7, r2
   13be0:	bl	11f44 <__assert_fail@plt+0xf90>
   13be4:	mov	ip, sp
   13be8:	add	lr, sp, #48	; 0x30
   13bec:	ldm	ip!, {r0, r1, r2, r3}
   13bf0:	stmia	lr!, {r0, r1, r2, r3}
   13bf4:	ldm	ip!, {r0, r1, r2, r3}
   13bf8:	ldr	r5, [sp, #60]	; 0x3c
   13bfc:	stmia	lr!, {r0, r1, r2, r3}
   13c00:	mvn	r4, r5
   13c04:	ldm	ip, {r0, r1, r2, r3}
   13c08:	and	ip, r4, #67108864	; 0x4000000
   13c0c:	eor	ip, ip, r5
   13c10:	str	ip, [sp, #60]	; 0x3c
   13c14:	stm	lr, {r0, r1, r2, r3}
   13c18:	mov	r1, r7
   13c1c:	mov	r0, r6
   13c20:	add	r3, sp, #48	; 0x30
   13c24:	mvn	r2, #0
   13c28:	bl	135a8 <__assert_fail@plt+0x25f4>
   13c2c:	add	sp, sp, #100	; 0x64
   13c30:	pop	{r4, r5, r6, r7, pc}
   13c34:	push	{r4, r5, r6, r7, r8, lr}
   13c38:	mov	r5, r1
   13c3c:	ldr	lr, [pc, #100]	; 13ca8 <__assert_fail@plt+0x2cf4>
   13c40:	mov	r4, r2
   13c44:	mov	r7, r0
   13c48:	mov	r8, r3
   13c4c:	ldm	lr!, {r0, r1, r2, r3}
   13c50:	sub	sp, sp, #48	; 0x30
   13c54:	mov	ip, sp
   13c58:	mov	r6, #10
   13c5c:	stmia	ip!, {r0, r1, r2, r3}
   13c60:	cmp	r4, #0
   13c64:	cmpne	r5, #0
   13c68:	ldm	lr!, {r0, r1, r2, r3}
   13c6c:	str	r6, [sp]
   13c70:	stmia	ip!, {r0, r1, r2, r3}
   13c74:	ldm	lr, {r0, r1, r2, r3}
   13c78:	stm	ip, {r0, r1, r2, r3}
   13c7c:	beq	13ca4 <__assert_fail@plt+0x2cf0>
   13c80:	mov	r3, sp
   13c84:	mov	r1, r8
   13c88:	mov	r0, r7
   13c8c:	ldr	r2, [sp, #72]	; 0x48
   13c90:	str	r5, [sp, #40]	; 0x28
   13c94:	str	r4, [sp, #44]	; 0x2c
   13c98:	bl	135a8 <__assert_fail@plt+0x25f4>
   13c9c:	add	sp, sp, #48	; 0x30
   13ca0:	pop	{r4, r5, r6, r7, r8, pc}
   13ca4:	bl	10fa8 <abort@plt>
   13ca8:	muleq	r2, r4, r2
   13cac:	push	{lr}		; (str lr, [sp, #-4]!)
   13cb0:	sub	sp, sp, #12
   13cb4:	mvn	ip, #0
   13cb8:	str	ip, [sp]
   13cbc:	bl	13c34 <__assert_fail@plt+0x2c80>
   13cc0:	add	sp, sp, #12
   13cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   13cc8:	push	{lr}		; (str lr, [sp, #-4]!)
   13ccc:	sub	sp, sp, #12
   13cd0:	mvn	ip, #0
   13cd4:	mov	r3, r2
   13cd8:	str	ip, [sp]
   13cdc:	mov	r2, r1
   13ce0:	mov	r1, r0
   13ce4:	mov	r0, #0
   13ce8:	bl	13c34 <__assert_fail@plt+0x2c80>
   13cec:	add	sp, sp, #12
   13cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cf4:	push	{lr}		; (str lr, [sp, #-4]!)
   13cf8:	sub	sp, sp, #12
   13cfc:	str	r3, [sp]
   13d00:	mov	r3, r2
   13d04:	mov	r2, r1
   13d08:	mov	r1, r0
   13d0c:	mov	r0, #0
   13d10:	bl	13c34 <__assert_fail@plt+0x2c80>
   13d14:	add	sp, sp, #12
   13d18:	pop	{pc}		; (ldr pc, [sp], #4)
   13d1c:	ldr	r3, [pc]	; 13d24 <__assert_fail@plt+0x2d70>
   13d20:	b	135a8 <__assert_fail@plt+0x25f4>
   13d24:	andeq	r7, r2, r0, lsl r1
   13d28:	mov	r2, r1
   13d2c:	ldr	r3, [pc, #8]	; 13d3c <__assert_fail@plt+0x2d88>
   13d30:	mov	r1, r0
   13d34:	mov	r0, #0
   13d38:	b	135a8 <__assert_fail@plt+0x25f4>
   13d3c:	andeq	r7, r2, r0, lsl r1
   13d40:	ldr	r3, [pc, #4]	; 13d4c <__assert_fail@plt+0x2d98>
   13d44:	mvn	r2, #0
   13d48:	b	135a8 <__assert_fail@plt+0x25f4>
   13d4c:	andeq	r7, r2, r0, lsl r1
   13d50:	mov	r1, r0
   13d54:	ldr	r3, [pc, #8]	; 13d64 <__assert_fail@plt+0x2db0>
   13d58:	mvn	r2, #0
   13d5c:	mov	r0, #0
   13d60:	b	135a8 <__assert_fail@plt+0x25f4>
   13d64:	andeq	r7, r2, r0, lsl r1
   13d68:	push	{r4, r5, r6, lr}
   13d6c:	sub	sp, sp, #32
   13d70:	cmp	r1, #0
   13d74:	mov	r4, r0
   13d78:	ldr	r5, [sp, #48]	; 0x30
   13d7c:	ldr	r6, [sp, #52]	; 0x34
   13d80:	beq	14098 <__assert_fail@plt+0x30e4>
   13d84:	stm	sp, {r2, r3}
   13d88:	mov	r3, r1
   13d8c:	ldr	r2, [pc, #808]	; 140bc <__assert_fail@plt+0x3108>
   13d90:	mov	r1, #1
   13d94:	bl	10f18 <__fprintf_chk@plt>
   13d98:	mov	r2, #5
   13d9c:	ldr	r1, [pc, #796]	; 140c0 <__assert_fail@plt+0x310c>
   13da0:	mov	r0, #0
   13da4:	bl	10dbc <dcgettext@plt>
   13da8:	ldr	r3, [pc, #788]	; 140c4 <__assert_fail@plt+0x3110>
   13dac:	ldr	r2, [pc, #788]	; 140c8 <__assert_fail@plt+0x3114>
   13db0:	str	r3, [sp]
   13db4:	mov	r1, #1
   13db8:	mov	r3, r0
   13dbc:	mov	r0, r4
   13dc0:	bl	10f18 <__fprintf_chk@plt>
   13dc4:	mov	r1, r4
   13dc8:	mov	r0, #10
   13dcc:	bl	10db0 <fputc_unlocked@plt>
   13dd0:	mov	r2, #5
   13dd4:	ldr	r1, [pc, #752]	; 140cc <__assert_fail@plt+0x3118>
   13dd8:	mov	r0, #0
   13ddc:	bl	10dbc <dcgettext@plt>
   13de0:	mov	r1, #1
   13de4:	ldr	r3, [pc, #740]	; 140d0 <__assert_fail@plt+0x311c>
   13de8:	mov	r2, r0
   13dec:	mov	r0, r4
   13df0:	bl	10f18 <__fprintf_chk@plt>
   13df4:	mov	r1, r4
   13df8:	mov	r0, #10
   13dfc:	bl	10db0 <fputc_unlocked@plt>
   13e00:	cmp	r6, #9
   13e04:	ldrls	pc, [pc, r6, lsl #2]
   13e08:	b	140b0 <__assert_fail@plt+0x30fc>
   13e0c:	muleq	r1, r0, lr
   13e10:	muleq	r1, r8, lr
   13e14:	andeq	r3, r1, r4, asr #29
   13e18:	strdeq	r3, [r1], -r8
   13e1c:	andeq	r3, r1, r4, lsr pc
   13e20:	andeq	r3, r1, r0, ror pc
   13e24:	andeq	r3, r1, ip, lsr #31
   13e28:	strdeq	r3, [r1], -r0
   13e2c:	andeq	r4, r1, r0, asr #32
   13e30:	andeq	r3, r1, r4, lsr lr
   13e34:	ldr	r1, [pc, #664]	; 140d4 <__assert_fail@plt+0x3120>
   13e38:	mov	r2, #5
   13e3c:	mov	r0, #0
   13e40:	bl	10dbc <dcgettext@plt>
   13e44:	ldr	ip, [r5, #32]
   13e48:	ldr	r1, [r5, #28]
   13e4c:	ldr	r2, [r5, #24]
   13e50:	ldr	r3, [r5]
   13e54:	ldr	r6, [r5, #20]
   13e58:	str	ip, [sp, #28]
   13e5c:	ldr	lr, [r5, #16]
   13e60:	str	r1, [sp, #24]
   13e64:	ldr	ip, [r5, #12]
   13e68:	str	r2, [sp, #20]
   13e6c:	ldr	r1, [r5, #8]
   13e70:	ldr	r2, [r5, #4]
   13e74:	str	r6, [sp, #16]
   13e78:	stmib	sp, {r1, ip, lr}
   13e7c:	mov	r1, #1
   13e80:	str	r2, [sp]
   13e84:	mov	r2, r0
   13e88:	mov	r0, r4
   13e8c:	bl	10f18 <__fprintf_chk@plt>
   13e90:	add	sp, sp, #32
   13e94:	pop	{r4, r5, r6, pc}
   13e98:	mov	r2, #5
   13e9c:	ldr	r1, [pc, #564]	; 140d8 <__assert_fail@plt+0x3124>
   13ea0:	mov	r0, #0
   13ea4:	bl	10dbc <dcgettext@plt>
   13ea8:	ldr	r3, [r5]
   13eac:	mov	r1, #1
   13eb0:	mov	r2, r0
   13eb4:	mov	r0, r4
   13eb8:	add	sp, sp, #32
   13ebc:	pop	{r4, r5, r6, lr}
   13ec0:	b	10f18 <__fprintf_chk@plt>
   13ec4:	mov	r2, #5
   13ec8:	ldr	r1, [pc, #524]	; 140dc <__assert_fail@plt+0x3128>
   13ecc:	mov	r0, #0
   13ed0:	bl	10dbc <dcgettext@plt>
   13ed4:	ldr	r2, [r5, #4]
   13ed8:	ldr	r3, [r5]
   13edc:	mov	r1, #1
   13ee0:	str	r2, [sp, #48]	; 0x30
   13ee4:	mov	r2, r0
   13ee8:	mov	r0, r4
   13eec:	add	sp, sp, #32
   13ef0:	pop	{r4, r5, r6, lr}
   13ef4:	b	10f18 <__fprintf_chk@plt>
   13ef8:	mov	r2, #5
   13efc:	ldr	r1, [pc, #476]	; 140e0 <__assert_fail@plt+0x312c>
   13f00:	mov	r0, #0
   13f04:	bl	10dbc <dcgettext@plt>
   13f08:	ldr	r1, [r5, #8]
   13f0c:	ldr	r2, [r5, #4]
   13f10:	ldr	r3, [r5]
   13f14:	str	r1, [sp, #52]	; 0x34
   13f18:	str	r2, [sp, #48]	; 0x30
   13f1c:	mov	r1, #1
   13f20:	mov	r2, r0
   13f24:	mov	r0, r4
   13f28:	add	sp, sp, #32
   13f2c:	pop	{r4, r5, r6, lr}
   13f30:	b	10f18 <__fprintf_chk@plt>
   13f34:	mov	r2, #5
   13f38:	ldr	r1, [pc, #420]	; 140e4 <__assert_fail@plt+0x3130>
   13f3c:	mov	r0, #0
   13f40:	bl	10dbc <dcgettext@plt>
   13f44:	ldr	r1, [r5, #8]
   13f48:	ldr	ip, [r5, #12]
   13f4c:	ldr	r2, [r5, #4]
   13f50:	ldr	r3, [r5]
   13f54:	stmib	sp, {r1, ip}
   13f58:	str	r2, [sp]
   13f5c:	mov	r1, #1
   13f60:	mov	r2, r0
   13f64:	mov	r0, r4
   13f68:	bl	10f18 <__fprintf_chk@plt>
   13f6c:	b	13e90 <__assert_fail@plt+0x2edc>
   13f70:	mov	r2, #5
   13f74:	ldr	r1, [pc, #364]	; 140e8 <__assert_fail@plt+0x3134>
   13f78:	mov	r0, #0
   13f7c:	bl	10dbc <dcgettext@plt>
   13f80:	add	r1, r5, #8
   13f84:	ldr	r2, [r5, #4]
   13f88:	ldm	r1, {r1, ip, lr}
   13f8c:	ldr	r3, [r5]
   13f90:	str	r2, [sp]
   13f94:	stmib	sp, {r1, ip, lr}
   13f98:	mov	r1, #1
   13f9c:	mov	r2, r0
   13fa0:	mov	r0, r4
   13fa4:	bl	10f18 <__fprintf_chk@plt>
   13fa8:	b	13e90 <__assert_fail@plt+0x2edc>
   13fac:	mov	r2, #5
   13fb0:	ldr	r1, [pc, #308]	; 140ec <__assert_fail@plt+0x3138>
   13fb4:	mov	r0, #0
   13fb8:	bl	10dbc <dcgettext@plt>
   13fbc:	add	r1, r5, #8
   13fc0:	ldr	r2, [r5, #4]
   13fc4:	ldm	r1, {r1, ip, lr}
   13fc8:	ldr	r6, [r5, #20]
   13fcc:	ldr	r3, [r5]
   13fd0:	stmib	sp, {r1, ip, lr}
   13fd4:	mov	r1, #1
   13fd8:	str	r2, [sp]
   13fdc:	str	r6, [sp, #16]
   13fe0:	mov	r2, r0
   13fe4:	mov	r0, r4
   13fe8:	bl	10f18 <__fprintf_chk@plt>
   13fec:	b	13e90 <__assert_fail@plt+0x2edc>
   13ff0:	mov	r2, #5
   13ff4:	ldr	r1, [pc, #244]	; 140f0 <__assert_fail@plt+0x313c>
   13ff8:	mov	r0, #0
   13ffc:	bl	10dbc <dcgettext@plt>
   14000:	ldr	r2, [r5, #24]
   14004:	ldr	r3, [r5]
   14008:	ldr	r6, [r5, #20]
   1400c:	ldr	lr, [r5, #16]
   14010:	ldr	ip, [r5, #12]
   14014:	str	r2, [sp, #20]
   14018:	ldr	r1, [r5, #8]
   1401c:	ldr	r2, [r5, #4]
   14020:	str	r6, [sp, #16]
   14024:	stmib	sp, {r1, ip, lr}
   14028:	mov	r1, #1
   1402c:	str	r2, [sp]
   14030:	mov	r2, r0
   14034:	mov	r0, r4
   14038:	bl	10f18 <__fprintf_chk@plt>
   1403c:	b	13e90 <__assert_fail@plt+0x2edc>
   14040:	mov	r2, #5
   14044:	ldr	r1, [pc, #168]	; 140f4 <__assert_fail@plt+0x3140>
   14048:	mov	r0, #0
   1404c:	bl	10dbc <dcgettext@plt>
   14050:	ldr	r1, [r5, #28]
   14054:	ldr	r2, [r5, #24]
   14058:	ldr	r3, [r5]
   1405c:	ldr	r6, [r5, #20]
   14060:	ldr	lr, [r5, #16]
   14064:	str	r1, [sp, #24]
   14068:	ldr	ip, [r5, #12]
   1406c:	str	r2, [sp, #20]
   14070:	ldr	r1, [r5, #8]
   14074:	ldr	r2, [r5, #4]
   14078:	str	r6, [sp, #16]
   1407c:	stmib	sp, {r1, ip, lr}
   14080:	mov	r1, #1
   14084:	str	r2, [sp]
   14088:	mov	r2, r0
   1408c:	mov	r0, r4
   14090:	bl	10f18 <__fprintf_chk@plt>
   14094:	b	13e90 <__assert_fail@plt+0x2edc>
   14098:	str	r3, [sp]
   1409c:	mov	r1, #1
   140a0:	mov	r3, r2
   140a4:	ldr	r2, [pc, #76]	; 140f8 <__assert_fail@plt+0x3144>
   140a8:	bl	10f18 <__fprintf_chk@plt>
   140ac:	b	13d98 <__assert_fail@plt+0x2de4>
   140b0:	mov	r2, #5
   140b4:	ldr	r1, [pc, #64]	; 140fc <__assert_fail@plt+0x3148>
   140b8:	b	13e3c <__assert_fail@plt+0x2e88>
   140bc:	andeq	r6, r1, r8, asr #13
   140c0:	ldrdeq	r6, [r1], -ip
   140c4:	andeq	r0, r0, r6, ror #15
   140c8:			; <UNDEFINED> instruction: 0x000169b4
   140cc:	andeq	r6, r1, r0, ror #13
   140d0:	andeq	r6, r1, ip, lsl #15
   140d4:			; <UNDEFINED> instruction: 0x000168bc
   140d8:			; <UNDEFINED> instruction: 0x000167b0
   140dc:	andeq	r6, r1, r0, asr #15
   140e0:	ldrdeq	r6, [r1], -r8
   140e4:	strdeq	r6, [r1], -r4
   140e8:	andeq	r6, r1, r4, lsl r8
   140ec:	andeq	r6, r1, r8, lsr r8
   140f0:	andeq	r6, r1, r0, ror #16
   140f4:	andeq	r6, r1, ip, lsl #17
   140f8:	ldrdeq	r6, [r1], -r4
   140fc:	strdeq	r6, [r1], -r0
   14100:	push	{r4, r5, lr}
   14104:	sub	sp, sp, #12
   14108:	ldr	r5, [sp, #24]
   1410c:	ldr	ip, [r5]
   14110:	cmp	ip, #0
   14114:	beq	14130 <__assert_fail@plt+0x317c>
   14118:	mov	lr, r5
   1411c:	mov	ip, #0
   14120:	ldr	r4, [lr, #4]!
   14124:	add	ip, ip, #1
   14128:	cmp	r4, #0
   1412c:	bne	14120 <__assert_fail@plt+0x316c>
   14130:	stm	sp, {r5, ip}
   14134:	bl	13d68 <__assert_fail@plt+0x2db4>
   14138:	add	sp, sp, #12
   1413c:	pop	{r4, r5, pc}
   14140:	push	{r4, r5, lr}
   14144:	sub	sp, sp, #52	; 0x34
   14148:	add	r5, sp, #4
   1414c:	ldr	r4, [sp, #64]	; 0x40
   14150:	mov	ip, #0
   14154:	sub	r4, r4, #4
   14158:	ldr	lr, [r4, #4]!
   1415c:	cmp	lr, #0
   14160:	str	lr, [r5, #4]!
   14164:	beq	14174 <__assert_fail@plt+0x31c0>
   14168:	add	ip, ip, #1
   1416c:	cmp	ip, #10
   14170:	bne	14158 <__assert_fail@plt+0x31a4>
   14174:	add	lr, sp, #8
   14178:	str	ip, [sp, #4]
   1417c:	str	lr, [sp]
   14180:	bl	13d68 <__assert_fail@plt+0x2db4>
   14184:	add	sp, sp, #52	; 0x34
   14188:	pop	{r4, r5, pc}
   1418c:	push	{r3}		; (str r3, [sp, #-4]!)
   14190:	push	{r4, lr}
   14194:	sub	sp, sp, #60	; 0x3c
   14198:	add	lr, sp, #56	; 0x38
   1419c:	add	r3, sp, #72	; 0x48
   141a0:	str	r3, [lr, #-44]!	; 0xffffffd4
   141a4:	add	r4, sp, #68	; 0x44
   141a8:	mov	r3, #0
   141ac:	ldr	ip, [r4, #4]!
   141b0:	cmp	ip, #0
   141b4:	str	ip, [lr, #4]!
   141b8:	beq	141c8 <__assert_fail@plt+0x3214>
   141bc:	add	r3, r3, #1
   141c0:	cmp	r3, #10
   141c4:	bne	141ac <__assert_fail@plt+0x31f8>
   141c8:	add	ip, sp, #16
   141cc:	str	r3, [sp, #4]
   141d0:	str	ip, [sp]
   141d4:	ldr	r3, [sp, #68]	; 0x44
   141d8:	bl	13d68 <__assert_fail@plt+0x2db4>
   141dc:	add	sp, sp, #60	; 0x3c
   141e0:	pop	{r4, lr}
   141e4:	add	sp, sp, #4
   141e8:	bx	lr
   141ec:	ldr	r3, [pc, #116]	; 14268 <__assert_fail@plt+0x32b4>
   141f0:	push	{r4, lr}
   141f4:	mov	r0, #10
   141f8:	ldr	r1, [r3]
   141fc:	bl	10db0 <fputc_unlocked@plt>
   14200:	mov	r2, #5
   14204:	ldr	r1, [pc, #96]	; 1426c <__assert_fail@plt+0x32b8>
   14208:	mov	r0, #0
   1420c:	bl	10dbc <dcgettext@plt>
   14210:	ldr	r2, [pc, #88]	; 14270 <__assert_fail@plt+0x32bc>
   14214:	mov	r1, r0
   14218:	mov	r0, #1
   1421c:	bl	10f00 <__printf_chk@plt>
   14220:	mov	r2, #5
   14224:	ldr	r1, [pc, #72]	; 14274 <__assert_fail@plt+0x32c0>
   14228:	mov	r0, #0
   1422c:	bl	10dbc <dcgettext@plt>
   14230:	ldr	r3, [pc, #64]	; 14278 <__assert_fail@plt+0x32c4>
   14234:	ldr	r2, [pc, #64]	; 1427c <__assert_fail@plt+0x32c8>
   14238:	mov	r1, r0
   1423c:	mov	r0, #1
   14240:	bl	10f00 <__printf_chk@plt>
   14244:	mov	r2, #5
   14248:	ldr	r1, [pc, #48]	; 14280 <__assert_fail@plt+0x32cc>
   1424c:	mov	r0, #0
   14250:	bl	10dbc <dcgettext@plt>
   14254:	ldr	r2, [pc, #40]	; 14284 <__assert_fail@plt+0x32d0>
   14258:	pop	{r4, lr}
   1425c:	mov	r1, r0
   14260:	mov	r0, #1
   14264:	b	10f00 <__printf_chk@plt>
   14268:	andeq	r7, r2, r4, asr r1
   1426c:	andeq	r6, r1, ip, lsr #18
   14270:	andeq	r6, r1, r0, asr #18
   14274:	andeq	r6, r1, r8, asr r9
   14278:	andeq	r6, r1, ip, lsl r2
   1427c:	andeq	r6, r1, r4, asr #4
   14280:	andeq	r6, r1, ip, ror #18
   14284:	muleq	r1, r4, r9
   14288:	push	{r4, lr}
   1428c:	bl	14ec4 <__assert_fail@plt+0x3f10>
   14290:	cmp	r0, #0
   14294:	popne	{r4, pc}
   14298:	bl	147d0 <__assert_fail@plt+0x381c>
   1429c:	push	{r4, lr}
   142a0:	bl	14ec4 <__assert_fail@plt+0x3f10>
   142a4:	cmp	r0, #0
   142a8:	popne	{r4, pc}
   142ac:	bl	147d0 <__assert_fail@plt+0x381c>
   142b0:	push	{r4, lr}
   142b4:	bl	14ec4 <__assert_fail@plt+0x3f10>
   142b8:	cmp	r0, #0
   142bc:	popne	{r4, pc}
   142c0:	bl	147d0 <__assert_fail@plt+0x381c>
   142c4:	push	{r4, r5, r6, lr}
   142c8:	mov	r5, r0
   142cc:	mov	r4, r1
   142d0:	bl	14ef0 <__assert_fail@plt+0x3f3c>
   142d4:	cmp	r0, #0
   142d8:	popne	{r4, r5, r6, pc}
   142dc:	adds	r4, r4, #0
   142e0:	movne	r4, #1
   142e4:	cmp	r5, #0
   142e8:	orreq	r4, r4, #1
   142ec:	cmp	r4, #0
   142f0:	popeq	{r4, r5, r6, pc}
   142f4:	bl	147d0 <__assert_fail@plt+0x381c>
   142f8:	push	{r4, lr}
   142fc:	cmp	r1, #0
   14300:	orreq	r1, r1, #1
   14304:	bl	14ef0 <__assert_fail@plt+0x3f3c>
   14308:	cmp	r0, #0
   1430c:	popne	{r4, pc}
   14310:	bl	147d0 <__assert_fail@plt+0x381c>
   14314:	push	{r4, r5, r6, lr}
   14318:	mov	r6, r0
   1431c:	mov	r5, r1
   14320:	mov	r4, r2
   14324:	bl	154b4 <__assert_fail@plt+0x4500>
   14328:	cmp	r0, #0
   1432c:	popne	{r4, r5, r6, pc}
   14330:	cmp	r6, #0
   14334:	beq	14344 <__assert_fail@plt+0x3390>
   14338:	cmp	r5, #0
   1433c:	cmpne	r4, #0
   14340:	popeq	{r4, r5, r6, pc}
   14344:	bl	147d0 <__assert_fail@plt+0x381c>
   14348:	b	14314 <__assert_fail@plt+0x3360>
   1434c:	cmp	r2, #0
   14350:	cmpne	r1, #0
   14354:	moveq	r2, #1
   14358:	moveq	r1, r2
   1435c:	push	{r4, lr}
   14360:	bl	154b4 <__assert_fail@plt+0x4500>
   14364:	cmp	r0, #0
   14368:	popne	{r4, pc}
   1436c:	bl	147d0 <__assert_fail@plt+0x381c>
   14370:	mov	r2, r1
   14374:	mov	r1, r0
   14378:	mov	r0, #0
   1437c:	b	14314 <__assert_fail@plt+0x3360>
   14380:	mov	r2, r1
   14384:	mov	r1, r0
   14388:	mov	r0, #0
   1438c:	b	1434c <__assert_fail@plt+0x3398>
   14390:	push	{r4, r5, r6, lr}
   14394:	subs	r6, r0, #0
   14398:	sub	sp, sp, #8
   1439c:	mov	r5, r1
   143a0:	ldr	r4, [r1]
   143a4:	beq	143e0 <__assert_fail@plt+0x342c>
   143a8:	lsr	r1, r4, #1
   143ac:	add	r3, r1, #1
   143b0:	mvn	r3, r3
   143b4:	cmp	r4, r3
   143b8:	bhi	143dc <__assert_fail@plt+0x3428>
   143bc:	add	r4, r4, #1
   143c0:	add	r4, r4, r1
   143c4:	mov	r0, r6
   143c8:	mov	r1, r4
   143cc:	bl	14314 <__assert_fail@plt+0x3360>
   143d0:	str	r4, [r5]
   143d4:	add	sp, sp, #8
   143d8:	pop	{r4, r5, r6, pc}
   143dc:	bl	147d0 <__assert_fail@plt+0x381c>
   143e0:	cmp	r4, #0
   143e4:	bne	143c4 <__assert_fail@plt+0x3410>
   143e8:	mov	r1, r2
   143ec:	mov	r0, #64	; 0x40
   143f0:	str	r2, [sp, #4]
   143f4:	bl	155f4 <__assert_fail@plt+0x4640>
   143f8:	ldr	r2, [sp, #4]
   143fc:	cmp	r0, #0
   14400:	movne	r4, r0
   14404:	addeq	r4, r0, #1
   14408:	b	143c4 <__assert_fail@plt+0x3410>
   1440c:	mov	r2, #1
   14410:	b	14390 <__assert_fail@plt+0x33dc>
   14414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14418:	sub	sp, sp, #12
   1441c:	ldr	r6, [r1]
   14420:	mov	sl, r1
   14424:	mov	r9, r0
   14428:	asrs	r4, r6, #1
   1442c:	mov	r5, r2
   14430:	mov	fp, r3
   14434:	ldr	r7, [sp, #48]	; 0x30
   14438:	bmi	145a4 <__assert_fail@plt+0x35f0>
   1443c:	mvn	r3, #-2147483648	; 0x80000000
   14440:	sub	r3, r3, r4
   14444:	cmp	r6, r3
   14448:	movle	r3, #0
   1444c:	movgt	r3, #1
   14450:	mvn	r8, fp
   14454:	cmp	r3, #0
   14458:	addeq	r4, r4, r6
   1445c:	mvnne	r4, #-2147483648	; 0x80000000
   14460:	lsr	r8, r8, #31
   14464:	cmp	fp, r4
   14468:	movge	r3, #0
   1446c:	andlt	r3, r8, #1
   14470:	cmp	r3, #0
   14474:	beq	1455c <__assert_fail@plt+0x35a8>
   14478:	cmp	r7, #0
   1447c:	blt	1462c <__assert_fail@plt+0x3678>
   14480:	bne	14624 <__assert_fail@plt+0x3670>
   14484:	mov	r2, #64	; 0x40
   14488:	mov	r1, r7
   1448c:	mov	r0, r2
   14490:	str	r2, [sp, #4]
   14494:	bl	15800 <__assert_fail@plt+0x484c>
   14498:	ldr	r2, [sp, #4]
   1449c:	mov	r1, r7
   144a0:	mov	r4, r0
   144a4:	mov	r0, r2
   144a8:	bl	15a20 <__assert_fail@plt+0x4a6c>
   144ac:	ldr	r2, [sp, #4]
   144b0:	sub	r1, r2, r1
   144b4:	cmp	r9, #0
   144b8:	sub	r3, r4, r6
   144bc:	streq	r9, [sl]
   144c0:	cmp	r3, r5
   144c4:	bge	14548 <__assert_fail@plt+0x3594>
   144c8:	cmp	r5, #0
   144cc:	blt	145b8 <__assert_fail@plt+0x3604>
   144d0:	cmp	r6, #0
   144d4:	blt	144f4 <__assert_fail@plt+0x3540>
   144d8:	mvn	r3, #-2147483648	; 0x80000000
   144dc:	sub	r3, r3, r5
   144e0:	cmp	r6, r3
   144e4:	movle	r3, #0
   144e8:	movgt	r3, #1
   144ec:	cmp	r3, #0
   144f0:	bne	146b4 <__assert_fail@plt+0x3700>
   144f4:	add	r5, r6, r5
   144f8:	cmp	fp, r5
   144fc:	movge	r8, #0
   14500:	andlt	r8, r8, #1
   14504:	cmp	r8, #0
   14508:	mov	r4, r5
   1450c:	bne	146b4 <__assert_fail@plt+0x3700>
   14510:	cmp	r7, #0
   14514:	blt	145cc <__assert_fail@plt+0x3618>
   14518:	beq	14544 <__assert_fail@plt+0x3590>
   1451c:	cmp	r5, #0
   14520:	blt	14674 <__assert_fail@plt+0x36c0>
   14524:	mov	r1, r7
   14528:	mvn	r0, #-2147483648	; 0x80000000
   1452c:	bl	15800 <__assert_fail@plt+0x484c>
   14530:	cmp	r5, r0
   14534:	movle	r0, #0
   14538:	movgt	r0, #1
   1453c:	cmp	r0, #0
   14540:	bne	146b4 <__assert_fail@plt+0x3700>
   14544:	mul	r1, r5, r7
   14548:	mov	r0, r9
   1454c:	bl	142c4 <__assert_fail@plt+0x3310>
   14550:	str	r4, [sl]
   14554:	add	sp, sp, #12
   14558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1455c:	cmp	r7, #0
   14560:	blt	145f8 <__assert_fail@plt+0x3644>
   14564:	beq	14484 <__assert_fail@plt+0x34d0>
   14568:	cmp	r4, #0
   1456c:	blt	14634 <__assert_fail@plt+0x3680>
   14570:	mov	r1, r7
   14574:	mvn	r0, #-2147483648	; 0x80000000
   14578:	bl	15800 <__assert_fail@plt+0x484c>
   1457c:	cmp	r0, r4
   14580:	movge	r0, #0
   14584:	movlt	r0, #1
   14588:	cmp	r0, #0
   1458c:	mvnne	r2, #-2147483648	; 0x80000000
   14590:	bne	14488 <__assert_fail@plt+0x34d4>
   14594:	mul	r1, r7, r4
   14598:	cmp	r1, #63	; 0x3f
   1459c:	bgt	144b4 <__assert_fail@plt+0x3500>
   145a0:	b	14484 <__assert_fail@plt+0x34d0>
   145a4:	rsb	r3, r4, #-2147483648	; 0x80000000
   145a8:	cmp	r6, r3
   145ac:	movge	r3, #0
   145b0:	movlt	r3, #1
   145b4:	b	14450 <__assert_fail@plt+0x349c>
   145b8:	rsb	r3, r5, #-2147483648	; 0x80000000
   145bc:	cmp	r6, r3
   145c0:	movge	r3, #0
   145c4:	movlt	r3, #1
   145c8:	b	144ec <__assert_fail@plt+0x3538>
   145cc:	cmp	r5, #0
   145d0:	blt	14658 <__assert_fail@plt+0x36a4>
   145d4:	cmn	r7, #1
   145d8:	beq	14544 <__assert_fail@plt+0x3590>
   145dc:	mov	r1, r7
   145e0:	mov	r0, #-2147483648	; 0x80000000
   145e4:	bl	15800 <__assert_fail@plt+0x484c>
   145e8:	cmp	r5, r0
   145ec:	movle	r0, #0
   145f0:	movgt	r0, #1
   145f4:	b	1453c <__assert_fail@plt+0x3588>
   145f8:	cmp	r4, #0
   145fc:	blt	14698 <__assert_fail@plt+0x36e4>
   14600:	cmn	r7, #1
   14604:	beq	14594 <__assert_fail@plt+0x35e0>
   14608:	mov	r1, r7
   1460c:	mov	r0, #-2147483648	; 0x80000000
   14610:	bl	15800 <__assert_fail@plt+0x484c>
   14614:	cmp	r0, r4
   14618:	movge	r0, #0
   1461c:	movlt	r0, #1
   14620:	b	14588 <__assert_fail@plt+0x35d4>
   14624:	mov	r4, fp
   14628:	b	14570 <__assert_fail@plt+0x35bc>
   1462c:	mov	r4, fp
   14630:	b	14600 <__assert_fail@plt+0x364c>
   14634:	cmn	r4, #1
   14638:	beq	14594 <__assert_fail@plt+0x35e0>
   1463c:	mov	r1, r4
   14640:	mov	r0, #-2147483648	; 0x80000000
   14644:	bl	15800 <__assert_fail@plt+0x484c>
   14648:	cmp	r7, r0
   1464c:	movle	r0, #0
   14650:	movgt	r0, #1
   14654:	b	14588 <__assert_fail@plt+0x35d4>
   14658:	mov	r1, r7
   1465c:	mvn	r0, #-2147483648	; 0x80000000
   14660:	bl	15800 <__assert_fail@plt+0x484c>
   14664:	cmp	r5, r0
   14668:	movge	r0, #0
   1466c:	movlt	r0, #1
   14670:	b	1453c <__assert_fail@plt+0x3588>
   14674:	cmn	r5, #1
   14678:	beq	14544 <__assert_fail@plt+0x3590>
   1467c:	mov	r1, r5
   14680:	mov	r0, #-2147483648	; 0x80000000
   14684:	bl	15800 <__assert_fail@plt+0x484c>
   14688:	cmp	r7, r0
   1468c:	movle	r0, #0
   14690:	movgt	r0, #1
   14694:	b	1453c <__assert_fail@plt+0x3588>
   14698:	mov	r1, r7
   1469c:	mvn	r0, #-2147483648	; 0x80000000
   146a0:	bl	15800 <__assert_fail@plt+0x484c>
   146a4:	cmp	r0, r4
   146a8:	movle	r0, #0
   146ac:	movgt	r0, #1
   146b0:	b	14588 <__assert_fail@plt+0x35d4>
   146b4:	bl	147d0 <__assert_fail@plt+0x381c>
   146b8:	push	{r4, lr}
   146bc:	mov	r1, #1
   146c0:	bl	14e7c <__assert_fail@plt+0x3ec8>
   146c4:	cmp	r0, #0
   146c8:	popne	{r4, pc}
   146cc:	bl	147d0 <__assert_fail@plt+0x381c>
   146d0:	push	{r4, lr}
   146d4:	mov	r1, #1
   146d8:	bl	14e7c <__assert_fail@plt+0x3ec8>
   146dc:	cmp	r0, #0
   146e0:	popne	{r4, pc}
   146e4:	bl	147d0 <__assert_fail@plt+0x381c>
   146e8:	push	{r4, lr}
   146ec:	bl	14e7c <__assert_fail@plt+0x3ec8>
   146f0:	cmp	r0, #0
   146f4:	popne	{r4, pc}
   146f8:	bl	147d0 <__assert_fail@plt+0x381c>
   146fc:	push	{r4, lr}
   14700:	bl	14e7c <__assert_fail@plt+0x3ec8>
   14704:	cmp	r0, #0
   14708:	popne	{r4, pc}
   1470c:	bl	147d0 <__assert_fail@plt+0x381c>
   14710:	push	{r4, r5, r6, lr}
   14714:	mov	r6, r0
   14718:	mov	r0, r1
   1471c:	mov	r4, r1
   14720:	bl	14ec4 <__assert_fail@plt+0x3f10>
   14724:	subs	r5, r0, #0
   14728:	beq	14740 <__assert_fail@plt+0x378c>
   1472c:	mov	r2, r4
   14730:	mov	r1, r6
   14734:	bl	10d74 <memcpy@plt>
   14738:	mov	r0, r5
   1473c:	pop	{r4, r5, r6, pc}
   14740:	bl	147d0 <__assert_fail@plt+0x381c>
   14744:	push	{r4, r5, r6, lr}
   14748:	mov	r6, r0
   1474c:	mov	r0, r1
   14750:	mov	r4, r1
   14754:	bl	14ec4 <__assert_fail@plt+0x3f10>
   14758:	subs	r5, r0, #0
   1475c:	beq	14774 <__assert_fail@plt+0x37c0>
   14760:	mov	r2, r4
   14764:	mov	r1, r6
   14768:	bl	10d74 <memcpy@plt>
   1476c:	mov	r0, r5
   14770:	pop	{r4, r5, r6, pc}
   14774:	bl	147d0 <__assert_fail@plt+0x381c>
   14778:	push	{r4, r5, r6, lr}
   1477c:	mov	r6, r0
   14780:	add	r0, r1, #1
   14784:	mov	r4, r1
   14788:	bl	14ec4 <__assert_fail@plt+0x3f10>
   1478c:	subs	r5, r0, #0
   14790:	beq	147b0 <__assert_fail@plt+0x37fc>
   14794:	mov	r3, #0
   14798:	mov	r1, r6
   1479c:	strb	r3, [r5, r4]
   147a0:	mov	r2, r4
   147a4:	bl	10d74 <memcpy@plt>
   147a8:	mov	r0, r5
   147ac:	pop	{r4, r5, r6, pc}
   147b0:	bl	147d0 <__assert_fail@plt+0x381c>
   147b4:	push	{r4, lr}
   147b8:	mov	r4, r0
   147bc:	bl	10ec4 <strlen@plt>
   147c0:	add	r1, r0, #1
   147c4:	mov	r0, r4
   147c8:	pop	{r4, lr}
   147cc:	b	14710 <__assert_fail@plt+0x375c>
   147d0:	ldr	r3, [pc, #44]	; 14804 <__assert_fail@plt+0x3850>
   147d4:	push	{r4, lr}
   147d8:	mov	r2, #5
   147dc:	ldr	r1, [pc, #36]	; 14808 <__assert_fail@plt+0x3854>
   147e0:	mov	r0, #0
   147e4:	ldr	r4, [r3]
   147e8:	bl	10dbc <dcgettext@plt>
   147ec:	ldr	r2, [pc, #24]	; 1480c <__assert_fail@plt+0x3858>
   147f0:	mov	r1, #0
   147f4:	mov	r3, r0
   147f8:	mov	r0, r4
   147fc:	bl	10e34 <error@plt>
   14800:	bl	10fa8 <abort@plt>
   14804:	strdeq	r7, [r2], -ip
   14808:	andeq	r6, r1, r4, ror #19
   1480c:	andeq	r6, r1, ip, lsr #11
   14810:	push	{r4, lr}
   14814:	bl	14f6c <__assert_fail@plt+0x3fb8>
   14818:	subs	r4, r0, #0
   1481c:	beq	14828 <__assert_fail@plt+0x3874>
   14820:	mov	r0, r4
   14824:	pop	{r4, pc}
   14828:	bl	10edc <__errno_location@plt>
   1482c:	ldr	r3, [r0]
   14830:	cmp	r3, #12
   14834:	bne	14820 <__assert_fail@plt+0x386c>
   14838:	bl	147d0 <__assert_fail@plt+0x381c>
   1483c:	push	{r4, r5, r6, r7, r8, lr}
   14840:	subs	r5, r1, #0
   14844:	mov	r4, r0
   14848:	blt	148bc <__assert_fail@plt+0x3908>
   1484c:	moveq	r6, #0
   14850:	moveq	r7, #0
   14854:	bne	1487c <__assert_fail@plt+0x38c8>
   14858:	ldr	r2, [r4]
   1485c:	ldr	r1, [r4, #4]
   14860:	mov	r0, #0
   14864:	mul	ip, r2, r7
   14868:	umull	r2, r3, r2, r5
   1486c:	mla	r5, r5, r1, ip
   14870:	add	r3, r5, r3
   14874:	strd	r2, [r4]
   14878:	pop	{r4, r5, r6, r7, r8, pc}
   1487c:	asr	r7, r5, #31
   14880:	mov	r2, r5
   14884:	mov	r3, r7
   14888:	mvn	r0, #0
   1488c:	mvn	r1, #0
   14890:	bl	15a40 <__assert_fail@plt+0x4a8c>
   14894:	ldrd	r2, [r4]
   14898:	mov	r6, r5
   1489c:	cmp	r1, r3
   148a0:	cmpeq	r0, r2
   148a4:	bcs	14858 <__assert_fail@plt+0x38a4>
   148a8:	mvn	r2, #0
   148ac:	mvn	r3, #0
   148b0:	mov	r0, #1
   148b4:	strd	r2, [r4]
   148b8:	pop	{r4, r5, r6, r7, r8, pc}
   148bc:	ldrd	r2, [r0]
   148c0:	orrs	r3, r2, r3
   148c4:	moveq	r6, r5
   148c8:	asreq	r7, r6, #31
   148cc:	bne	148a8 <__assert_fail@plt+0x38f4>
   148d0:	b	14858 <__assert_fail@plt+0x38a4>
   148d4:	cmp	r2, #36	; 0x24
   148d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148dc:	sub	sp, sp, #20
   148e0:	bhi	14e54 <__assert_fail@plt+0x3ea0>
   148e4:	cmp	r1, #0
   148e8:	mov	r8, r2
   148ec:	mov	r7, r0
   148f0:	mov	r5, r1
   148f4:	mov	r6, r3
   148f8:	addeq	r5, sp, #4
   148fc:	bl	10edc <__errno_location@plt>
   14900:	mov	r3, #0
   14904:	str	r3, [r0]
   14908:	mov	r9, r0
   1490c:	bl	10eac <__ctype_b_loc@plt>
   14910:	ldrb	r3, [r7]
   14914:	mov	r2, r7
   14918:	ldr	r0, [r0]
   1491c:	b	14924 <__assert_fail@plt+0x3970>
   14920:	ldrb	r3, [r2, #1]!
   14924:	lsl	r1, r3, #1
   14928:	ldrh	r4, [r0, r1]
   1492c:	ands	r4, r4, #8192	; 0x2000
   14930:	bne	14920 <__assert_fail@plt+0x396c>
   14934:	cmp	r3, #45	; 0x2d
   14938:	bne	1494c <__assert_fail@plt+0x3998>
   1493c:	mov	r4, #4
   14940:	mov	r0, r4
   14944:	add	sp, sp, #20
   14948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1494c:	mov	r2, r8
   14950:	mov	r3, r4
   14954:	mov	r1, r5
   14958:	mov	r0, r7
   1495c:	bl	10d8c <__strtoull_internal@plt>
   14960:	ldr	r8, [r5]
   14964:	cmp	r7, r8
   14968:	mov	r2, r0
   1496c:	str	r0, [sp, #8]
   14970:	str	r1, [sp, #12]
   14974:	beq	149c0 <__assert_fail@plt+0x3a0c>
   14978:	ldr	r4, [r9]
   1497c:	cmp	r4, #0
   14980:	bne	149b0 <__assert_fail@plt+0x39fc>
   14984:	ldr	r3, [sp, #56]	; 0x38
   14988:	cmp	r3, #0
   1498c:	beq	1499c <__assert_fail@plt+0x39e8>
   14990:	ldrb	r9, [r8]
   14994:	cmp	r9, #0
   14998:	bne	149f8 <__assert_fail@plt+0x3a44>
   1499c:	mov	r0, r4
   149a0:	str	r2, [r6]
   149a4:	str	r1, [r6, #4]
   149a8:	add	sp, sp, #20
   149ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149b0:	cmp	r4, #34	; 0x22
   149b4:	bne	1493c <__assert_fail@plt+0x3988>
   149b8:	mov	r4, #1
   149bc:	b	14984 <__assert_fail@plt+0x39d0>
   149c0:	ldr	r3, [sp, #56]	; 0x38
   149c4:	cmp	r3, #0
   149c8:	beq	1493c <__assert_fail@plt+0x3988>
   149cc:	ldrb	r1, [r8]
   149d0:	cmp	r1, #0
   149d4:	beq	1493c <__assert_fail@plt+0x3988>
   149d8:	mov	r0, r3
   149dc:	bl	10ed0 <strchr@plt>
   149e0:	cmp	r0, #0
   149e4:	beq	1493c <__assert_fail@plt+0x3988>
   149e8:	ldrb	r9, [r8]
   149ec:	mov	r2, #1
   149f0:	mov	r3, #0
   149f4:	strd	r2, [sp, #8]
   149f8:	mov	r1, r9
   149fc:	ldr	r0, [sp, #56]	; 0x38
   14a00:	bl	10ed0 <strchr@plt>
   14a04:	cmp	r0, #0
   14a08:	beq	14e10 <__assert_fail@plt+0x3e5c>
   14a0c:	sub	r3, r9, #69	; 0x45
   14a10:	cmp	r3, #47	; 0x2f
   14a14:	ldrls	pc, [pc, r3, lsl #2]
   14a18:	b	14adc <__assert_fail@plt+0x3b28>
   14a1c:	andeq	r4, r1, ip, asr #23
   14a20:	ldrdeq	r4, [r1], -ip
   14a24:	andeq	r4, r1, ip, asr #23
   14a28:	ldrdeq	r4, [r1], -ip
   14a2c:	ldrdeq	r4, [r1], -ip
   14a30:	ldrdeq	r4, [r1], -ip
   14a34:	andeq	r4, r1, ip, asr #23
   14a38:	ldrdeq	r4, [r1], -ip
   14a3c:	andeq	r4, r1, ip, asr #23
   14a40:	ldrdeq	r4, [r1], -ip
   14a44:	ldrdeq	r4, [r1], -ip
   14a48:	andeq	r4, r1, ip, asr #23
   14a4c:	ldrdeq	r4, [r1], -ip
   14a50:	ldrdeq	r4, [r1], -ip
   14a54:	ldrdeq	r4, [r1], -ip
   14a58:	andeq	r4, r1, ip, asr #23
   14a5c:	ldrdeq	r4, [r1], -ip
   14a60:	ldrdeq	r4, [r1], -ip
   14a64:	ldrdeq	r4, [r1], -ip
   14a68:	ldrdeq	r4, [r1], -ip
   14a6c:	andeq	r4, r1, ip, asr #23
   14a70:	andeq	r4, r1, ip, asr #23
   14a74:	ldrdeq	r4, [r1], -ip
   14a78:	ldrdeq	r4, [r1], -ip
   14a7c:	ldrdeq	r4, [r1], -ip
   14a80:	ldrdeq	r4, [r1], -ip
   14a84:	ldrdeq	r4, [r1], -ip
   14a88:	ldrdeq	r4, [r1], -ip
   14a8c:	ldrdeq	r4, [r1], -ip
   14a90:	ldrdeq	r4, [r1], -ip
   14a94:	ldrdeq	r4, [r1], -ip
   14a98:	ldrdeq	r4, [r1], -ip
   14a9c:	ldrdeq	r4, [r1], -ip
   14aa0:	ldrdeq	r4, [r1], -ip
   14aa4:	andeq	r4, r1, ip, asr #23
   14aa8:	ldrdeq	r4, [r1], -ip
   14aac:	ldrdeq	r4, [r1], -ip
   14ab0:	ldrdeq	r4, [r1], -ip
   14ab4:	andeq	r4, r1, ip, asr #23
   14ab8:	ldrdeq	r4, [r1], -ip
   14abc:	andeq	r4, r1, ip, asr #23
   14ac0:	ldrdeq	r4, [r1], -ip
   14ac4:	ldrdeq	r4, [r1], -ip
   14ac8:	ldrdeq	r4, [r1], -ip
   14acc:	ldrdeq	r4, [r1], -ip
   14ad0:	ldrdeq	r4, [r1], -ip
   14ad4:	ldrdeq	r4, [r1], -ip
   14ad8:	andeq	r4, r1, ip, asr #23
   14adc:	mov	r7, #1
   14ae0:	mov	sl, #1024	; 0x400
   14ae4:	sub	r9, r9, #66	; 0x42
   14ae8:	cmp	r9, #53	; 0x35
   14aec:	ldrls	pc, [pc, r9, lsl #2]
   14af0:	b	14e10 <__assert_fail@plt+0x3e5c>
   14af4:	andeq	r4, r1, ip, asr sp
   14af8:	andeq	r4, r1, r0, lsl lr
   14afc:	andeq	r4, r1, r0, lsl lr
   14b00:	andeq	r4, r1, r4, lsr sp
   14b04:	andeq	r4, r1, r0, lsl lr
   14b08:	andeq	r4, r1, ip, lsl #26
   14b0c:	andeq	r4, r1, r0, lsl lr
   14b10:	andeq	r4, r1, r0, lsl lr
   14b14:	andeq	r4, r1, r0, lsl lr
   14b18:	andeq	r4, r1, ip, ror #25
   14b1c:	andeq	r4, r1, r0, lsl lr
   14b20:			; <UNDEFINED> instruction: 0x00014db8
   14b24:	andeq	r4, r1, r0, lsl lr
   14b28:	andeq	r4, r1, r0, lsl lr
   14b2c:	muleq	r1, r0, sp
   14b30:	andeq	r4, r1, r0, lsl lr
   14b34:	andeq	r4, r1, r0, lsl lr
   14b38:	andeq	r4, r1, r0, lsl lr
   14b3c:	andeq	r4, r1, r8, ror #27
   14b40:	andeq	r4, r1, r0, lsl lr
   14b44:	andeq	r4, r1, r0, lsl lr
   14b48:	andeq	r4, r1, r0, lsl lr
   14b4c:	andeq	r4, r1, r0, lsl lr
   14b50:	andeq	r4, r1, r4, asr #25
   14b54:	muleq	r1, r0, ip
   14b58:	andeq	r4, r1, r0, lsl lr
   14b5c:	andeq	r4, r1, r0, lsl lr
   14b60:	andeq	r4, r1, r0, lsl lr
   14b64:	andeq	r4, r1, r0, lsl lr
   14b68:	andeq	r4, r1, r0, lsl lr
   14b6c:	andeq	r4, r1, r0, lsl lr
   14b70:	andeq	r4, r1, r0, lsl lr
   14b74:	andeq	r4, r1, ip, asr ip
   14b78:	andeq	r4, r1, ip, asr #24
   14b7c:	andeq	r4, r1, r0, lsl lr
   14b80:	andeq	r4, r1, r0, lsl lr
   14b84:	andeq	r4, r1, r0, lsl lr
   14b88:	andeq	r4, r1, ip, lsl #26
   14b8c:	andeq	r4, r1, r0, lsl lr
   14b90:	andeq	r4, r1, r0, lsl lr
   14b94:	andeq	r4, r1, r0, lsl lr
   14b98:	andeq	r4, r1, ip, ror #25
   14b9c:	andeq	r4, r1, r0, lsl lr
   14ba0:			; <UNDEFINED> instruction: 0x00014db8
   14ba4:	andeq	r4, r1, r0, lsl lr
   14ba8:	andeq	r4, r1, r0, lsl lr
   14bac:	andeq	r4, r1, r0, lsl lr
   14bb0:	andeq	r4, r1, r0, lsl lr
   14bb4:	andeq	r4, r1, r0, lsl lr
   14bb8:	andeq	r4, r1, r0, lsl lr
   14bbc:	andeq	r4, r1, r8, ror #27
   14bc0:	andeq	r4, r1, r0, lsl lr
   14bc4:	andeq	r4, r1, r0, lsl lr
   14bc8:	andeq	r4, r1, r8, lsl #24
   14bcc:	mov	r1, #48	; 0x30
   14bd0:	ldr	r0, [sp, #56]	; 0x38
   14bd4:	bl	10ed0 <strchr@plt>
   14bd8:	cmp	r0, #0
   14bdc:	beq	14adc <__assert_fail@plt+0x3b28>
   14be0:	ldrb	r3, [r8, #1]
   14be4:	cmp	r3, #68	; 0x44
   14be8:	beq	14bfc <__assert_fail@plt+0x3c48>
   14bec:	cmp	r3, #105	; 0x69
   14bf0:	beq	14e20 <__assert_fail@plt+0x3e6c>
   14bf4:	cmp	r3, #66	; 0x42
   14bf8:	bne	14adc <__assert_fail@plt+0x3b28>
   14bfc:	mov	r7, #2
   14c00:	mov	sl, #1000	; 0x3e8
   14c04:	b	14ae4 <__assert_fail@plt+0x3b30>
   14c08:	ldrd	r2, [sp, #8]
   14c0c:	cmp	r2, #0
   14c10:	sbcs	r1, r3, #0
   14c14:	blt	14e38 <__assert_fail@plt+0x3e84>
   14c18:	adds	r2, r2, r2
   14c1c:	adc	r3, r3, r3
   14c20:	mov	r1, r3
   14c24:	mov	r9, #0
   14c28:	str	r2, [sp, #8]
   14c2c:	str	r3, [sp, #12]
   14c30:	add	r3, r8, r7
   14c34:	str	r3, [r5]
   14c38:	ldrb	r3, [r8, r7]
   14c3c:	orr	r4, r4, r9
   14c40:	cmp	r3, #0
   14c44:	orrne	r4, r4, #2
   14c48:	b	1499c <__assert_fail@plt+0x39e8>
   14c4c:	ldr	r2, [sp, #8]
   14c50:	ldr	r1, [sp, #12]
   14c54:	mov	r9, #0
   14c58:	b	14c30 <__assert_fail@plt+0x3c7c>
   14c5c:	ldrd	r2, [sp, #8]
   14c60:	ldr	r1, [pc, #512]	; 14e68 <__assert_fail@plt+0x3eb4>
   14c64:	mvn	r0, #0
   14c68:	cmp	r3, r1
   14c6c:	cmpeq	r2, r0
   14c70:	bhi	14e38 <__assert_fail@plt+0x3e84>
   14c74:	lsl	r1, r3, #9
   14c78:	orr	r1, r1, r2, lsr #23
   14c7c:	lsl	r2, r2, #9
   14c80:	str	r1, [sp, #12]
   14c84:	str	r2, [sp, #8]
   14c88:	mov	r9, #0
   14c8c:	b	14c30 <__assert_fail@plt+0x3c7c>
   14c90:	mov	fp, #7
   14c94:	mov	r9, #0
   14c98:	add	r8, sp, #8
   14c9c:	mov	r1, sl
   14ca0:	mov	r0, r8
   14ca4:	bl	1483c <__assert_fail@plt+0x3888>
   14ca8:	subs	fp, fp, #1
   14cac:	orr	r9, r9, r0
   14cb0:	bne	14c9c <__assert_fail@plt+0x3ce8>
   14cb4:	ldr	r8, [r5]
   14cb8:	ldr	r2, [sp, #8]
   14cbc:	ldr	r1, [sp, #12]
   14cc0:	b	14c30 <__assert_fail@plt+0x3c7c>
   14cc4:	mov	fp, #8
   14cc8:	mov	r9, #0
   14ccc:	add	r8, sp, fp
   14cd0:	mov	r1, sl
   14cd4:	mov	r0, r8
   14cd8:	bl	1483c <__assert_fail@plt+0x3888>
   14cdc:	subs	fp, fp, #1
   14ce0:	orr	r9, r9, r0
   14ce4:	bne	14cd0 <__assert_fail@plt+0x3d1c>
   14ce8:	b	14cb4 <__assert_fail@plt+0x3d00>
   14cec:	mov	r1, sl
   14cf0:	add	r0, sp, #8
   14cf4:	bl	1483c <__assert_fail@plt+0x3888>
   14cf8:	ldr	r8, [r5]
   14cfc:	ldr	r2, [sp, #8]
   14d00:	ldr	r1, [sp, #12]
   14d04:	mov	r9, r0
   14d08:	b	14c30 <__assert_fail@plt+0x3c7c>
   14d0c:	mov	fp, #3
   14d10:	mov	r9, #0
   14d14:	add	r8, sp, #8
   14d18:	mov	r1, sl
   14d1c:	mov	r0, r8
   14d20:	bl	1483c <__assert_fail@plt+0x3888>
   14d24:	subs	fp, fp, #1
   14d28:	orr	r9, r9, r0
   14d2c:	bne	14d18 <__assert_fail@plt+0x3d64>
   14d30:	b	14cb4 <__assert_fail@plt+0x3d00>
   14d34:	mov	fp, #6
   14d38:	mov	r9, #0
   14d3c:	add	r8, sp, #8
   14d40:	mov	r1, sl
   14d44:	mov	r0, r8
   14d48:	bl	1483c <__assert_fail@plt+0x3888>
   14d4c:	subs	fp, fp, #1
   14d50:	orr	r9, r9, r0
   14d54:	bne	14d40 <__assert_fail@plt+0x3d8c>
   14d58:	b	14cb4 <__assert_fail@plt+0x3d00>
   14d5c:	ldrd	r0, [sp, #8]
   14d60:	ldr	r3, [pc, #260]	; 14e6c <__assert_fail@plt+0x3eb8>
   14d64:	mvn	r2, #0
   14d68:	cmp	r1, r3
   14d6c:	cmpeq	r0, r2
   14d70:	bhi	14e38 <__assert_fail@plt+0x3e84>
   14d74:	lsl	r1, r1, #10
   14d78:	orr	r1, r1, r0, lsr #22
   14d7c:	lsl	r2, r0, #10
   14d80:	str	r1, [sp, #12]
   14d84:	str	r2, [sp, #8]
   14d88:	mov	r9, #0
   14d8c:	b	14c30 <__assert_fail@plt+0x3c7c>
   14d90:	mov	fp, #5
   14d94:	mov	r9, #0
   14d98:	add	r8, sp, #8
   14d9c:	mov	r1, sl
   14da0:	mov	r0, r8
   14da4:	bl	1483c <__assert_fail@plt+0x3888>
   14da8:	subs	fp, fp, #1
   14dac:	orr	r9, r9, r0
   14db0:	bne	14d9c <__assert_fail@plt+0x3de8>
   14db4:	b	14cb4 <__assert_fail@plt+0x3d00>
   14db8:	mov	r1, sl
   14dbc:	add	r0, sp, #8
   14dc0:	bl	1483c <__assert_fail@plt+0x3888>
   14dc4:	mov	r1, sl
   14dc8:	mov	r9, r0
   14dcc:	add	r0, sp, #8
   14dd0:	bl	1483c <__assert_fail@plt+0x3888>
   14dd4:	ldr	r8, [r5]
   14dd8:	ldr	r2, [sp, #8]
   14ddc:	ldr	r1, [sp, #12]
   14de0:	orr	r9, r9, r0
   14de4:	b	14c30 <__assert_fail@plt+0x3c7c>
   14de8:	mov	fp, #4
   14dec:	mov	r9, #0
   14df0:	add	r8, sp, #8
   14df4:	mov	r1, sl
   14df8:	mov	r0, r8
   14dfc:	bl	1483c <__assert_fail@plt+0x3888>
   14e00:	subs	fp, fp, #1
   14e04:	orr	r9, r9, r0
   14e08:	bne	14df4 <__assert_fail@plt+0x3e40>
   14e0c:	b	14cb4 <__assert_fail@plt+0x3d00>
   14e10:	ldrd	r2, [sp, #8]
   14e14:	orr	r4, r4, #2
   14e18:	strd	r2, [r6]
   14e1c:	b	14940 <__assert_fail@plt+0x398c>
   14e20:	ldrb	r7, [r8, #2]
   14e24:	mov	sl, #1024	; 0x400
   14e28:	cmp	r7, #66	; 0x42
   14e2c:	movne	r7, #1
   14e30:	moveq	r7, #3
   14e34:	b	14ae4 <__assert_fail@plt+0x3b30>
   14e38:	mvn	r1, #0
   14e3c:	mvn	r0, #0
   14e40:	mvn	r2, #0
   14e44:	strd	r0, [sp, #8]
   14e48:	mov	r9, #1
   14e4c:	mov	r1, r2
   14e50:	b	14c30 <__assert_fail@plt+0x3c7c>
   14e54:	ldr	r3, [pc, #20]	; 14e70 <__assert_fail@plt+0x3ebc>
   14e58:	mov	r2, #85	; 0x55
   14e5c:	ldr	r1, [pc, #16]	; 14e74 <__assert_fail@plt+0x3ec0>
   14e60:	ldr	r0, [pc, #16]	; 14e78 <__assert_fail@plt+0x3ec4>
   14e64:	bl	10fb4 <__assert_fail@plt>
   14e68:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   14e6c:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   14e70:	strdeq	r6, [r1], -r8
   14e74:	andeq	r6, r1, r4, lsl #20
   14e78:	andeq	r6, r1, r4, lsl sl
   14e7c:	cmp	r1, #0
   14e80:	cmpne	r0, #0
   14e84:	moveq	r1, #1
   14e88:	moveq	r0, r1
   14e8c:	umull	r2, r3, r0, r1
   14e90:	adds	r3, r3, #0
   14e94:	movne	r3, #1
   14e98:	cmp	r2, #0
   14e9c:	blt	14eac <__assert_fail@plt+0x3ef8>
   14ea0:	cmp	r3, #0
   14ea4:	bne	14eac <__assert_fail@plt+0x3ef8>
   14ea8:	b	10d20 <calloc@plt>
   14eac:	push	{r4, lr}
   14eb0:	bl	10edc <__errno_location@plt>
   14eb4:	mov	r3, #12
   14eb8:	str	r3, [r0]
   14ebc:	mov	r0, #0
   14ec0:	pop	{r4, pc}
   14ec4:	cmp	r0, #0
   14ec8:	moveq	r0, #1
   14ecc:	cmp	r0, #0
   14ed0:	blt	14ed8 <__assert_fail@plt+0x3f24>
   14ed4:	b	10e58 <malloc@plt>
   14ed8:	push	{r4, lr}
   14edc:	bl	10edc <__errno_location@plt>
   14ee0:	mov	r3, #12
   14ee4:	str	r3, [r0]
   14ee8:	mov	r0, #0
   14eec:	pop	{r4, pc}
   14ef0:	cmp	r0, #0
   14ef4:	beq	14f18 <__assert_fail@plt+0x3f64>
   14ef8:	cmp	r1, #0
   14efc:	push	{lr}		; (str lr, [sp, #-4]!)
   14f00:	sub	sp, sp, #12
   14f04:	beq	14f20 <__assert_fail@plt+0x3f6c>
   14f08:	blt	14f38 <__assert_fail@plt+0x3f84>
   14f0c:	add	sp, sp, #12
   14f10:	pop	{lr}		; (ldr lr, [sp], #4)
   14f14:	b	10dc8 <realloc@plt>
   14f18:	mov	r0, r1
   14f1c:	b	14ec4 <__assert_fail@plt+0x3f10>
   14f20:	str	r1, [sp, #4]
   14f24:	bl	11e38 <__assert_fail@plt+0xe84>
   14f28:	ldr	r3, [sp, #4]
   14f2c:	mov	r0, r3
   14f30:	add	sp, sp, #12
   14f34:	pop	{pc}		; (ldr pc, [sp], #4)
   14f38:	bl	10edc <__errno_location@plt>
   14f3c:	mov	r2, #12
   14f40:	mov	r3, #0
   14f44:	str	r2, [r0]
   14f48:	b	14f2c <__assert_fail@plt+0x3f78>
   14f4c:	cmn	r0, #100	; 0x64
   14f50:	bne	14f64 <__assert_fail@plt+0x3fb0>
   14f54:	mov	r0, r1
   14f58:	mov	r1, r2
   14f5c:	mov	r2, r3
   14f60:	b	10dec <readlink@plt>
   14f64:	push	{r4, lr}
   14f68:	bl	10fa8 <abort@plt>
   14f6c:	push	{lr}		; (str lr, [sp, #-4]!)
   14f70:	sub	sp, sp, #12
   14f74:	ldr	r2, [pc, #32]	; 14f9c <__assert_fail@plt+0x3fe8>
   14f78:	mov	r3, #0
   14f7c:	mov	r1, r0
   14f80:	str	r2, [sp, #4]
   14f84:	str	r3, [sp]
   14f88:	mov	r2, r3
   14f8c:	mvn	r0, #99	; 0x63
   14f90:	bl	1504c <__assert_fail@plt+0x4098>
   14f94:	add	sp, sp, #12
   14f98:	pop	{pc}		; (ldr pc, [sp], #4)
   14f9c:	andeq	r4, r1, ip, asr #30
   14fa0:	ldrb	r3, [r0]
   14fa4:	cmp	r3, #47	; 0x2f
   14fa8:	bne	14fb8 <__assert_fail@plt+0x4004>
   14fac:	ldrb	r3, [r0, #1]!
   14fb0:	cmp	r3, #47	; 0x2f
   14fb4:	beq	14fac <__assert_fail@plt+0x3ff8>
   14fb8:	cmp	r3, #0
   14fbc:	bxeq	lr
   14fc0:	mov	r2, #0
   14fc4:	push	{lr}		; (str lr, [sp, #-4]!)
   14fc8:	mov	ip, r2
   14fcc:	mov	r1, r0
   14fd0:	mov	lr, #1
   14fd4:	cmp	r3, #47	; 0x2f
   14fd8:	moveq	r2, lr
   14fdc:	beq	14fec <__assert_fail@plt+0x4038>
   14fe0:	cmp	r2, #0
   14fe4:	movne	r0, r1
   14fe8:	movne	r2, ip
   14fec:	ldrb	r3, [r1, #1]!
   14ff0:	cmp	r3, #0
   14ff4:	bne	14fd4 <__assert_fail@plt+0x4020>
   14ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ffc:	push	{r4, lr}
   15000:	mov	r4, r0
   15004:	bl	10ec4 <strlen@plt>
   15008:	cmp	r0, #1
   1500c:	popls	{r4, pc}
   15010:	sub	r3, r0, #1
   15014:	add	r2, r4, r3
   15018:	ldrb	r1, [r4, r3]
   1501c:	cmp	r1, #47	; 0x2f
   15020:	popne	{r4, pc}
   15024:	cmp	r3, #1
   15028:	beq	1503c <__assert_fail@plt+0x4088>
   1502c:	ldrb	r1, [r2, #-1]!
   15030:	sub	r0, r3, #1
   15034:	cmp	r1, #47	; 0x2f
   15038:	beq	15044 <__assert_fail@plt+0x4090>
   1503c:	mov	r0, r3
   15040:	pop	{r4, pc}
   15044:	mov	r3, r0
   15048:	b	15024 <__assert_fail@plt+0x4070>
   1504c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15050:	sub	sp, sp, #1024	; 0x400
   15054:	sub	sp, sp, #8
   15058:	ldr	ip, [pc, #428]	; 1520c <__assert_fail@plt+0x4258>
   1505c:	ldr	r6, [sp, #1064]	; 0x428
   15060:	mov	r8, r0
   15064:	cmp	r6, #0
   15068:	moveq	r6, ip
   1506c:	subs	r7, r2, #0
   15070:	mov	r9, r1
   15074:	ldr	sl, [sp, #1068]	; 0x42c
   15078:	beq	151c8 <__assert_fail@plt+0x4214>
   1507c:	mvn	r4, #-2147483648	; 0x80000000
   15080:	cmp	r3, r4
   15084:	movcc	r4, r3
   15088:	mov	r5, r7
   1508c:	mov	r1, r9
   15090:	mov	r3, r4
   15094:	mov	r2, r5
   15098:	mov	r0, r8
   1509c:	blx	sl
   150a0:	subs	r1, r0, #0
   150a4:	mov	r0, r5
   150a8:	blt	1511c <__assert_fail@plt+0x4168>
   150ac:	cmp	r1, r4
   150b0:	blt	15158 <__assert_fail@plt+0x41a4>
   150b4:	cmp	r7, r5
   150b8:	beq	150c4 <__assert_fail@plt+0x4110>
   150bc:	ldr	r3, [r6, #8]
   150c0:	blx	r3
   150c4:	lsl	r3, r4, #1
   150c8:	cmn	r4, #-1073741822	; 0xc0000002
   150cc:	add	r4, r3, #1
   150d0:	mov	r0, r4
   150d4:	bgt	151a8 <__assert_fail@plt+0x41f4>
   150d8:	ldr	r3, [r6]
   150dc:	blx	r3
   150e0:	subs	r5, r0, #0
   150e4:	bne	1508c <__assert_fail@plt+0x40d8>
   150e8:	ldr	r3, [r6, #12]
   150ec:	cmp	r3, #0
   150f0:	beq	150fc <__assert_fail@plt+0x4148>
   150f4:	mov	r0, r4
   150f8:	blx	r3
   150fc:	bl	10edc <__errno_location@plt>
   15100:	mov	r5, #0
   15104:	mov	r3, #12
   15108:	str	r3, [r0]
   1510c:	mov	r0, r5
   15110:	add	sp, sp, #1024	; 0x400
   15114:	add	sp, sp, #8
   15118:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1511c:	cmp	r7, r5
   15120:	moveq	r5, #0
   15124:	beq	1510c <__assert_fail@plt+0x4158>
   15128:	bl	10edc <__errno_location@plt>
   1512c:	ldr	r3, [r6, #8]
   15130:	mov	r4, r0
   15134:	ldr	r6, [r0]
   15138:	mov	r0, r5
   1513c:	blx	r3
   15140:	mov	r5, #0
   15144:	mov	r0, r5
   15148:	str	r6, [r4]
   1514c:	add	sp, sp, #1024	; 0x400
   15150:	add	sp, sp, #8
   15154:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15158:	add	r3, sp, #8
   1515c:	cmp	r5, r3
   15160:	mov	r3, #0
   15164:	strb	r3, [r5, r1]
   15168:	add	r1, r1, #1
   1516c:	beq	151d4 <__assert_fail@plt+0x4220>
   15170:	cmp	r7, r5
   15174:	cmpne	r1, r4
   15178:	bge	1510c <__assert_fail@plt+0x4158>
   1517c:	ldr	r3, [r6, #4]
   15180:	cmp	r3, #0
   15184:	beq	1510c <__assert_fail@plt+0x4158>
   15188:	mov	r0, r5
   1518c:	blx	r3
   15190:	cmp	r0, #0
   15194:	movne	r5, r0
   15198:	mov	r0, r5
   1519c:	add	sp, sp, #1024	; 0x400
   151a0:	add	sp, sp, #8
   151a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151a8:	bl	10edc <__errno_location@plt>
   151ac:	mov	r5, #0
   151b0:	mov	r3, #36	; 0x24
   151b4:	str	r3, [r0]
   151b8:	mov	r0, r5
   151bc:	add	sp, sp, #1024	; 0x400
   151c0:	add	sp, sp, #8
   151c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151c8:	mov	r4, #1024	; 0x400
   151cc:	add	r7, sp, #8
   151d0:	b	15088 <__assert_fail@plt+0x40d4>
   151d4:	mov	r0, r1
   151d8:	ldr	r3, [r6]
   151dc:	str	r1, [sp, #4]
   151e0:	blx	r3
   151e4:	ldr	r1, [sp, #4]
   151e8:	cmp	r0, #0
   151ec:	beq	15204 <__assert_fail@plt+0x4250>
   151f0:	mov	r2, r1
   151f4:	mov	r1, r5
   151f8:	bl	10d74 <memcpy@plt>
   151fc:	mov	r5, r0
   15200:	b	1510c <__assert_fail@plt+0x4158>
   15204:	mov	r4, r1
   15208:	b	150e8 <__assert_fail@plt+0x4134>
   1520c:	andeq	r6, r1, r4, asr #20
   15210:	push	{r4, r5, r6, lr}
   15214:	mov	r4, r0
   15218:	bl	10e1c <__fpending@plt>
   1521c:	ldr	r5, [r4]
   15220:	and	r5, r5, #32
   15224:	mov	r6, r0
   15228:	mov	r0, r4
   1522c:	bl	1528c <__assert_fail@plt+0x42d8>
   15230:	cmp	r5, #0
   15234:	mov	r4, r0
   15238:	bne	15258 <__assert_fail@plt+0x42a4>
   1523c:	cmp	r0, #0
   15240:	beq	15250 <__assert_fail@plt+0x429c>
   15244:	cmp	r6, #0
   15248:	beq	15274 <__assert_fail@plt+0x42c0>
   1524c:	mvn	r4, #0
   15250:	mov	r0, r4
   15254:	pop	{r4, r5, r6, pc}
   15258:	cmp	r0, #0
   1525c:	bne	1524c <__assert_fail@plt+0x4298>
   15260:	bl	10edc <__errno_location@plt>
   15264:	str	r4, [r0]
   15268:	mvn	r4, #0
   1526c:	mov	r0, r4
   15270:	pop	{r4, r5, r6, pc}
   15274:	bl	10edc <__errno_location@plt>
   15278:	ldr	r4, [r0]
   1527c:	subs	r4, r4, #9
   15280:	mvnne	r4, #0
   15284:	mov	r0, r4
   15288:	pop	{r4, r5, r6, pc}
   1528c:	push	{r4, r5, lr}
   15290:	sub	sp, sp, #12
   15294:	mov	r4, r0
   15298:	bl	10f0c <fileno@plt>
   1529c:	cmp	r0, #0
   152a0:	mov	r0, r4
   152a4:	blt	15320 <__assert_fail@plt+0x436c>
   152a8:	bl	10e70 <__freading@plt>
   152ac:	cmp	r0, #0
   152b0:	bne	152ec <__assert_fail@plt+0x4338>
   152b4:	mov	r0, r4
   152b8:	bl	1532c <__assert_fail@plt+0x4378>
   152bc:	cmp	r0, #0
   152c0:	beq	1531c <__assert_fail@plt+0x4368>
   152c4:	bl	10edc <__errno_location@plt>
   152c8:	mov	r5, r0
   152cc:	mov	r0, r4
   152d0:	ldr	r4, [r5]
   152d4:	bl	10f30 <fclose@plt>
   152d8:	cmp	r4, #0
   152dc:	mvnne	r0, #0
   152e0:	strne	r4, [r5]
   152e4:	add	sp, sp, #12
   152e8:	pop	{r4, r5, pc}
   152ec:	mov	r0, r4
   152f0:	bl	10f0c <fileno@plt>
   152f4:	mov	r3, #1
   152f8:	str	r3, [sp]
   152fc:	mov	r2, #0
   15300:	mov	r3, #0
   15304:	bl	10e04 <lseek64@plt>
   15308:	mvn	r3, #0
   1530c:	mvn	r2, #0
   15310:	cmp	r1, r3
   15314:	cmpeq	r0, r2
   15318:	bne	152b4 <__assert_fail@plt+0x4300>
   1531c:	mov	r0, r4
   15320:	add	sp, sp, #12
   15324:	pop	{r4, r5, lr}
   15328:	b	10f30 <fclose@plt>
   1532c:	push	{r4, lr}
   15330:	subs	r4, r0, #0
   15334:	sub	sp, sp, #8
   15338:	beq	15354 <__assert_fail@plt+0x43a0>
   1533c:	bl	10e70 <__freading@plt>
   15340:	cmp	r0, #0
   15344:	beq	15354 <__assert_fail@plt+0x43a0>
   15348:	ldr	r3, [r4]
   1534c:	tst	r3, #256	; 0x100
   15350:	bne	15364 <__assert_fail@plt+0x43b0>
   15354:	mov	r0, r4
   15358:	add	sp, sp, #8
   1535c:	pop	{r4, lr}
   15360:	b	10d50 <fflush@plt>
   15364:	mov	r3, #1
   15368:	str	r3, [sp]
   1536c:	mov	r2, #0
   15370:	mov	r3, #0
   15374:	mov	r0, r4
   15378:	bl	1538c <__assert_fail@plt+0x43d8>
   1537c:	mov	r0, r4
   15380:	add	sp, sp, #8
   15384:	pop	{r4, lr}
   15388:	b	10d50 <fflush@plt>
   1538c:	push	{r4, r5, r6, r7, r8, lr}
   15390:	sub	sp, sp, #8
   15394:	ldmib	r0, {ip, lr}
   15398:	mov	r4, r0
   1539c:	ldr	r5, [sp, #32]
   153a0:	cmp	lr, ip
   153a4:	beq	153bc <__assert_fail@plt+0x4408>
   153a8:	str	r5, [sp, #32]
   153ac:	mov	r0, r4
   153b0:	add	sp, sp, #8
   153b4:	pop	{r4, r5, r6, r7, r8, lr}
   153b8:	b	10f3c <fseeko64@plt>
   153bc:	ldr	lr, [r0, #20]
   153c0:	ldr	ip, [r0, #16]
   153c4:	cmp	lr, ip
   153c8:	bne	153a8 <__assert_fail@plt+0x43f4>
   153cc:	ldr	r8, [r0, #36]	; 0x24
   153d0:	cmp	r8, #0
   153d4:	bne	153a8 <__assert_fail@plt+0x43f4>
   153d8:	mov	r6, r2
   153dc:	mov	r7, r3
   153e0:	bl	10f0c <fileno@plt>
   153e4:	mov	r2, r6
   153e8:	mov	r3, r7
   153ec:	str	r5, [sp]
   153f0:	bl	10e04 <lseek64@plt>
   153f4:	mvn	r3, #0
   153f8:	mvn	r2, #0
   153fc:	cmp	r1, r3
   15400:	cmpeq	r0, r2
   15404:	beq	15424 <__assert_fail@plt+0x4470>
   15408:	ldr	r3, [r4]
   1540c:	strd	r0, [r4, #80]	; 0x50
   15410:	mov	r0, r8
   15414:	bic	r3, r3, #16
   15418:	str	r3, [r4]
   1541c:	add	sp, sp, #8
   15420:	pop	{r4, r5, r6, r7, r8, pc}
   15424:	mvn	r0, #0
   15428:	b	1541c <__assert_fail@plt+0x4468>
   1542c:	push	{r4, lr}
   15430:	mov	r0, #14
   15434:	bl	10f78 <nl_langinfo@plt>
   15438:	cmp	r0, #0
   1543c:	beq	15454 <__assert_fail@plt+0x44a0>
   15440:	ldrb	r2, [r0]
   15444:	ldr	r3, [pc, #16]	; 1545c <__assert_fail@plt+0x44a8>
   15448:	cmp	r2, #0
   1544c:	moveq	r0, r3
   15450:	pop	{r4, pc}
   15454:	ldr	r0, [pc]	; 1545c <__assert_fail@plt+0x44a8>
   15458:	pop	{r4, pc}
   1545c:	andeq	r6, r1, ip, lsr sl
   15460:	push	{r4, r5, r6, r7, lr}
   15464:	subs	r6, r0, #0
   15468:	sub	sp, sp, #12
   1546c:	addeq	r6, sp, #4
   15470:	mov	r0, r6
   15474:	mov	r5, r2
   15478:	mov	r7, r1
   1547c:	bl	10e28 <mbrtowc@plt>
   15480:	cmp	r5, #0
   15484:	cmnne	r0, #3
   15488:	mov	r4, r0
   1548c:	bls	154a8 <__assert_fail@plt+0x44f4>
   15490:	mov	r0, #0
   15494:	bl	15500 <__assert_fail@plt+0x454c>
   15498:	cmp	r0, #0
   1549c:	moveq	r4, #1
   154a0:	ldrbeq	r3, [r7]
   154a4:	streq	r3, [r6]
   154a8:	mov	r0, r4
   154ac:	add	sp, sp, #12
   154b0:	pop	{r4, r5, r6, r7, pc}
   154b4:	push	{r4, r5, r6, lr}
   154b8:	subs	r4, r2, #0
   154bc:	mov	r6, r0
   154c0:	mov	r5, r1
   154c4:	beq	154f0 <__assert_fail@plt+0x453c>
   154c8:	mov	r1, r4
   154cc:	mvn	r0, #0
   154d0:	bl	155f4 <__assert_fail@plt+0x4640>
   154d4:	cmp	r0, r5
   154d8:	bcs	154f0 <__assert_fail@plt+0x453c>
   154dc:	bl	10edc <__errno_location@plt>
   154e0:	mov	r3, #12
   154e4:	str	r3, [r0]
   154e8:	mov	r0, #0
   154ec:	pop	{r4, r5, r6, pc}
   154f0:	mul	r1, r5, r4
   154f4:	mov	r0, r6
   154f8:	pop	{r4, r5, r6, lr}
   154fc:	b	14ef0 <__assert_fail@plt+0x3f3c>
   15500:	push	{lr}		; (str lr, [sp, #-4]!)
   15504:	sub	sp, sp, #268	; 0x10c
   15508:	add	r1, sp, #4
   1550c:	ldr	r2, [pc, #60]	; 15550 <__assert_fail@plt+0x459c>
   15510:	bl	1555c <__assert_fail@plt+0x45a8>
   15514:	cmp	r0, #0
   15518:	movne	r0, #0
   1551c:	bne	15548 <__assert_fail@plt+0x4594>
   15520:	ldr	r1, [pc, #44]	; 15554 <__assert_fail@plt+0x45a0>
   15524:	add	r0, sp, #4
   15528:	bl	10d44 <strcmp@plt>
   1552c:	cmp	r0, #0
   15530:	beq	15548 <__assert_fail@plt+0x4594>
   15534:	add	r0, sp, #4
   15538:	ldr	r1, [pc, #24]	; 15558 <__assert_fail@plt+0x45a4>
   1553c:	bl	10d44 <strcmp@plt>
   15540:	adds	r0, r0, #0
   15544:	movne	r0, #1
   15548:	add	sp, sp, #268	; 0x10c
   1554c:	pop	{pc}		; (ldr pc, [sp], #4)
   15550:	andeq	r0, r0, r1, lsl #2
   15554:	andeq	r6, r1, r4, asr sl
   15558:	andeq	r6, r1, r8, asr sl
   1555c:	push	{r4, r5, r6, lr}
   15560:	mov	r5, r1
   15564:	mov	r1, #0
   15568:	mov	r4, r2
   1556c:	bl	10f54 <setlocale@plt>
   15570:	subs	r6, r0, #0
   15574:	beq	155d0 <__assert_fail@plt+0x461c>
   15578:	bl	10ec4 <strlen@plt>
   1557c:	cmp	r4, r0
   15580:	bhi	155b8 <__assert_fail@plt+0x4604>
   15584:	cmp	r4, #0
   15588:	bne	15594 <__assert_fail@plt+0x45e0>
   1558c:	mov	r0, #34	; 0x22
   15590:	pop	{r4, r5, r6, pc}
   15594:	sub	r4, r4, #1
   15598:	mov	r1, r6
   1559c:	mov	r2, r4
   155a0:	mov	r0, r5
   155a4:	bl	10d74 <memcpy@plt>
   155a8:	mov	r3, #0
   155ac:	strb	r3, [r5, r4]
   155b0:	mov	r0, #34	; 0x22
   155b4:	pop	{r4, r5, r6, pc}
   155b8:	add	r2, r0, #1
   155bc:	mov	r1, r6
   155c0:	mov	r0, r5
   155c4:	bl	10d74 <memcpy@plt>
   155c8:	mov	r0, #0
   155cc:	pop	{r4, r5, r6, pc}
   155d0:	cmp	r4, #0
   155d4:	beq	155e4 <__assert_fail@plt+0x4630>
   155d8:	strb	r6, [r5]
   155dc:	mov	r0, #22
   155e0:	pop	{r4, r5, r6, pc}
   155e4:	mov	r0, #22
   155e8:	pop	{r4, r5, r6, pc}
   155ec:	mov	r1, #0
   155f0:	b	10f54 <setlocale@plt>
   155f4:	subs	r2, r1, #1
   155f8:	bxeq	lr
   155fc:	bcc	157d4 <__assert_fail@plt+0x4820>
   15600:	cmp	r0, r1
   15604:	bls	157b8 <__assert_fail@plt+0x4804>
   15608:	tst	r1, r2
   1560c:	beq	157c4 <__assert_fail@plt+0x4810>
   15610:	clz	r3, r0
   15614:	clz	r2, r1
   15618:	sub	r3, r2, r3
   1561c:	rsbs	r3, r3, #31
   15620:	addne	r3, r3, r3, lsl #1
   15624:	mov	r2, #0
   15628:	addne	pc, pc, r3, lsl #2
   1562c:	nop			; (mov r0, r0)
   15630:	cmp	r0, r1, lsl #31
   15634:	adc	r2, r2, r2
   15638:	subcs	r0, r0, r1, lsl #31
   1563c:	cmp	r0, r1, lsl #30
   15640:	adc	r2, r2, r2
   15644:	subcs	r0, r0, r1, lsl #30
   15648:	cmp	r0, r1, lsl #29
   1564c:	adc	r2, r2, r2
   15650:	subcs	r0, r0, r1, lsl #29
   15654:	cmp	r0, r1, lsl #28
   15658:	adc	r2, r2, r2
   1565c:	subcs	r0, r0, r1, lsl #28
   15660:	cmp	r0, r1, lsl #27
   15664:	adc	r2, r2, r2
   15668:	subcs	r0, r0, r1, lsl #27
   1566c:	cmp	r0, r1, lsl #26
   15670:	adc	r2, r2, r2
   15674:	subcs	r0, r0, r1, lsl #26
   15678:	cmp	r0, r1, lsl #25
   1567c:	adc	r2, r2, r2
   15680:	subcs	r0, r0, r1, lsl #25
   15684:	cmp	r0, r1, lsl #24
   15688:	adc	r2, r2, r2
   1568c:	subcs	r0, r0, r1, lsl #24
   15690:	cmp	r0, r1, lsl #23
   15694:	adc	r2, r2, r2
   15698:	subcs	r0, r0, r1, lsl #23
   1569c:	cmp	r0, r1, lsl #22
   156a0:	adc	r2, r2, r2
   156a4:	subcs	r0, r0, r1, lsl #22
   156a8:	cmp	r0, r1, lsl #21
   156ac:	adc	r2, r2, r2
   156b0:	subcs	r0, r0, r1, lsl #21
   156b4:	cmp	r0, r1, lsl #20
   156b8:	adc	r2, r2, r2
   156bc:	subcs	r0, r0, r1, lsl #20
   156c0:	cmp	r0, r1, lsl #19
   156c4:	adc	r2, r2, r2
   156c8:	subcs	r0, r0, r1, lsl #19
   156cc:	cmp	r0, r1, lsl #18
   156d0:	adc	r2, r2, r2
   156d4:	subcs	r0, r0, r1, lsl #18
   156d8:	cmp	r0, r1, lsl #17
   156dc:	adc	r2, r2, r2
   156e0:	subcs	r0, r0, r1, lsl #17
   156e4:	cmp	r0, r1, lsl #16
   156e8:	adc	r2, r2, r2
   156ec:	subcs	r0, r0, r1, lsl #16
   156f0:	cmp	r0, r1, lsl #15
   156f4:	adc	r2, r2, r2
   156f8:	subcs	r0, r0, r1, lsl #15
   156fc:	cmp	r0, r1, lsl #14
   15700:	adc	r2, r2, r2
   15704:	subcs	r0, r0, r1, lsl #14
   15708:	cmp	r0, r1, lsl #13
   1570c:	adc	r2, r2, r2
   15710:	subcs	r0, r0, r1, lsl #13
   15714:	cmp	r0, r1, lsl #12
   15718:	adc	r2, r2, r2
   1571c:	subcs	r0, r0, r1, lsl #12
   15720:	cmp	r0, r1, lsl #11
   15724:	adc	r2, r2, r2
   15728:	subcs	r0, r0, r1, lsl #11
   1572c:	cmp	r0, r1, lsl #10
   15730:	adc	r2, r2, r2
   15734:	subcs	r0, r0, r1, lsl #10
   15738:	cmp	r0, r1, lsl #9
   1573c:	adc	r2, r2, r2
   15740:	subcs	r0, r0, r1, lsl #9
   15744:	cmp	r0, r1, lsl #8
   15748:	adc	r2, r2, r2
   1574c:	subcs	r0, r0, r1, lsl #8
   15750:	cmp	r0, r1, lsl #7
   15754:	adc	r2, r2, r2
   15758:	subcs	r0, r0, r1, lsl #7
   1575c:	cmp	r0, r1, lsl #6
   15760:	adc	r2, r2, r2
   15764:	subcs	r0, r0, r1, lsl #6
   15768:	cmp	r0, r1, lsl #5
   1576c:	adc	r2, r2, r2
   15770:	subcs	r0, r0, r1, lsl #5
   15774:	cmp	r0, r1, lsl #4
   15778:	adc	r2, r2, r2
   1577c:	subcs	r0, r0, r1, lsl #4
   15780:	cmp	r0, r1, lsl #3
   15784:	adc	r2, r2, r2
   15788:	subcs	r0, r0, r1, lsl #3
   1578c:	cmp	r0, r1, lsl #2
   15790:	adc	r2, r2, r2
   15794:	subcs	r0, r0, r1, lsl #2
   15798:	cmp	r0, r1, lsl #1
   1579c:	adc	r2, r2, r2
   157a0:	subcs	r0, r0, r1, lsl #1
   157a4:	cmp	r0, r1
   157a8:	adc	r2, r2, r2
   157ac:	subcs	r0, r0, r1
   157b0:	mov	r0, r2
   157b4:	bx	lr
   157b8:	moveq	r0, #1
   157bc:	movne	r0, #0
   157c0:	bx	lr
   157c4:	clz	r2, r1
   157c8:	rsb	r2, r2, #31
   157cc:	lsr	r0, r0, r2
   157d0:	bx	lr
   157d4:	cmp	r0, #0
   157d8:	mvnne	r0, #0
   157dc:	b	15a7c <__assert_fail@plt+0x4ac8>
   157e0:	cmp	r1, #0
   157e4:	beq	157d4 <__assert_fail@plt+0x4820>
   157e8:	push	{r0, r1, lr}
   157ec:	bl	155f4 <__assert_fail@plt+0x4640>
   157f0:	pop	{r1, r2, lr}
   157f4:	mul	r3, r2, r0
   157f8:	sub	r1, r1, r3
   157fc:	bx	lr
   15800:	cmp	r1, #0
   15804:	beq	15a10 <__assert_fail@plt+0x4a5c>
   15808:	eor	ip, r0, r1
   1580c:	rsbmi	r1, r1, #0
   15810:	subs	r2, r1, #1
   15814:	beq	159dc <__assert_fail@plt+0x4a28>
   15818:	movs	r3, r0
   1581c:	rsbmi	r3, r0, #0
   15820:	cmp	r3, r1
   15824:	bls	159e8 <__assert_fail@plt+0x4a34>
   15828:	tst	r1, r2
   1582c:	beq	159f8 <__assert_fail@plt+0x4a44>
   15830:	clz	r2, r3
   15834:	clz	r0, r1
   15838:	sub	r2, r0, r2
   1583c:	rsbs	r2, r2, #31
   15840:	addne	r2, r2, r2, lsl #1
   15844:	mov	r0, #0
   15848:	addne	pc, pc, r2, lsl #2
   1584c:	nop			; (mov r0, r0)
   15850:	cmp	r3, r1, lsl #31
   15854:	adc	r0, r0, r0
   15858:	subcs	r3, r3, r1, lsl #31
   1585c:	cmp	r3, r1, lsl #30
   15860:	adc	r0, r0, r0
   15864:	subcs	r3, r3, r1, lsl #30
   15868:	cmp	r3, r1, lsl #29
   1586c:	adc	r0, r0, r0
   15870:	subcs	r3, r3, r1, lsl #29
   15874:	cmp	r3, r1, lsl #28
   15878:	adc	r0, r0, r0
   1587c:	subcs	r3, r3, r1, lsl #28
   15880:	cmp	r3, r1, lsl #27
   15884:	adc	r0, r0, r0
   15888:	subcs	r3, r3, r1, lsl #27
   1588c:	cmp	r3, r1, lsl #26
   15890:	adc	r0, r0, r0
   15894:	subcs	r3, r3, r1, lsl #26
   15898:	cmp	r3, r1, lsl #25
   1589c:	adc	r0, r0, r0
   158a0:	subcs	r3, r3, r1, lsl #25
   158a4:	cmp	r3, r1, lsl #24
   158a8:	adc	r0, r0, r0
   158ac:	subcs	r3, r3, r1, lsl #24
   158b0:	cmp	r3, r1, lsl #23
   158b4:	adc	r0, r0, r0
   158b8:	subcs	r3, r3, r1, lsl #23
   158bc:	cmp	r3, r1, lsl #22
   158c0:	adc	r0, r0, r0
   158c4:	subcs	r3, r3, r1, lsl #22
   158c8:	cmp	r3, r1, lsl #21
   158cc:	adc	r0, r0, r0
   158d0:	subcs	r3, r3, r1, lsl #21
   158d4:	cmp	r3, r1, lsl #20
   158d8:	adc	r0, r0, r0
   158dc:	subcs	r3, r3, r1, lsl #20
   158e0:	cmp	r3, r1, lsl #19
   158e4:	adc	r0, r0, r0
   158e8:	subcs	r3, r3, r1, lsl #19
   158ec:	cmp	r3, r1, lsl #18
   158f0:	adc	r0, r0, r0
   158f4:	subcs	r3, r3, r1, lsl #18
   158f8:	cmp	r3, r1, lsl #17
   158fc:	adc	r0, r0, r0
   15900:	subcs	r3, r3, r1, lsl #17
   15904:	cmp	r3, r1, lsl #16
   15908:	adc	r0, r0, r0
   1590c:	subcs	r3, r3, r1, lsl #16
   15910:	cmp	r3, r1, lsl #15
   15914:	adc	r0, r0, r0
   15918:	subcs	r3, r3, r1, lsl #15
   1591c:	cmp	r3, r1, lsl #14
   15920:	adc	r0, r0, r0
   15924:	subcs	r3, r3, r1, lsl #14
   15928:	cmp	r3, r1, lsl #13
   1592c:	adc	r0, r0, r0
   15930:	subcs	r3, r3, r1, lsl #13
   15934:	cmp	r3, r1, lsl #12
   15938:	adc	r0, r0, r0
   1593c:	subcs	r3, r3, r1, lsl #12
   15940:	cmp	r3, r1, lsl #11
   15944:	adc	r0, r0, r0
   15948:	subcs	r3, r3, r1, lsl #11
   1594c:	cmp	r3, r1, lsl #10
   15950:	adc	r0, r0, r0
   15954:	subcs	r3, r3, r1, lsl #10
   15958:	cmp	r3, r1, lsl #9
   1595c:	adc	r0, r0, r0
   15960:	subcs	r3, r3, r1, lsl #9
   15964:	cmp	r3, r1, lsl #8
   15968:	adc	r0, r0, r0
   1596c:	subcs	r3, r3, r1, lsl #8
   15970:	cmp	r3, r1, lsl #7
   15974:	adc	r0, r0, r0
   15978:	subcs	r3, r3, r1, lsl #7
   1597c:	cmp	r3, r1, lsl #6
   15980:	adc	r0, r0, r0
   15984:	subcs	r3, r3, r1, lsl #6
   15988:	cmp	r3, r1, lsl #5
   1598c:	adc	r0, r0, r0
   15990:	subcs	r3, r3, r1, lsl #5
   15994:	cmp	r3, r1, lsl #4
   15998:	adc	r0, r0, r0
   1599c:	subcs	r3, r3, r1, lsl #4
   159a0:	cmp	r3, r1, lsl #3
   159a4:	adc	r0, r0, r0
   159a8:	subcs	r3, r3, r1, lsl #3
   159ac:	cmp	r3, r1, lsl #2
   159b0:	adc	r0, r0, r0
   159b4:	subcs	r3, r3, r1, lsl #2
   159b8:	cmp	r3, r1, lsl #1
   159bc:	adc	r0, r0, r0
   159c0:	subcs	r3, r3, r1, lsl #1
   159c4:	cmp	r3, r1
   159c8:	adc	r0, r0, r0
   159cc:	subcs	r3, r3, r1
   159d0:	cmp	ip, #0
   159d4:	rsbmi	r0, r0, #0
   159d8:	bx	lr
   159dc:	teq	ip, r0
   159e0:	rsbmi	r0, r0, #0
   159e4:	bx	lr
   159e8:	movcc	r0, #0
   159ec:	asreq	r0, ip, #31
   159f0:	orreq	r0, r0, #1
   159f4:	bx	lr
   159f8:	clz	r2, r1
   159fc:	rsb	r2, r2, #31
   15a00:	cmp	ip, #0
   15a04:	lsr	r0, r3, r2
   15a08:	rsbmi	r0, r0, #0
   15a0c:	bx	lr
   15a10:	cmp	r0, #0
   15a14:	mvngt	r0, #-2147483648	; 0x80000000
   15a18:	movlt	r0, #-2147483648	; 0x80000000
   15a1c:	b	15a7c <__assert_fail@plt+0x4ac8>
   15a20:	cmp	r1, #0
   15a24:	beq	15a10 <__assert_fail@plt+0x4a5c>
   15a28:	push	{r0, r1, lr}
   15a2c:	bl	15808 <__assert_fail@plt+0x4854>
   15a30:	pop	{r1, r2, lr}
   15a34:	mul	r3, r2, r0
   15a38:	sub	r1, r1, r3
   15a3c:	bx	lr
   15a40:	cmp	r3, #0
   15a44:	cmpeq	r2, #0
   15a48:	bne	15a60 <__assert_fail@plt+0x4aac>
   15a4c:	cmp	r1, #0
   15a50:	cmpeq	r0, #0
   15a54:	mvnne	r1, #0
   15a58:	mvnne	r0, #0
   15a5c:	b	15a7c <__assert_fail@plt+0x4ac8>
   15a60:	sub	sp, sp, #8
   15a64:	push	{sp, lr}
   15a68:	bl	15a8c <__assert_fail@plt+0x4ad8>
   15a6c:	ldr	lr, [sp, #4]
   15a70:	add	sp, sp, #8
   15a74:	pop	{r2, r3}
   15a78:	bx	lr
   15a7c:	push	{r1, lr}
   15a80:	mov	r0, #8
   15a84:	bl	10d38 <raise@plt>
   15a88:	pop	{r1, pc}
   15a8c:	cmp	r1, r3
   15a90:	push	{r4, r5, r6, r7, r8, r9, lr}
   15a94:	cmpeq	r0, r2
   15a98:	mov	r4, r0
   15a9c:	mov	r5, r1
   15aa0:	ldr	r9, [sp, #28]
   15aa4:	movcc	r0, #0
   15aa8:	movcc	r1, #0
   15aac:	bcc	15ba4 <__assert_fail@plt+0x4bf0>
   15ab0:	cmp	r3, #0
   15ab4:	clzeq	ip, r2
   15ab8:	clzne	ip, r3
   15abc:	addeq	ip, ip, #32
   15ac0:	cmp	r5, #0
   15ac4:	clzeq	r1, r4
   15ac8:	addeq	r1, r1, #32
   15acc:	clzne	r1, r5
   15ad0:	sub	ip, ip, r1
   15ad4:	sub	lr, ip, #32
   15ad8:	lsl	r7, r3, ip
   15adc:	rsb	r8, ip, #32
   15ae0:	orr	r7, r7, r2, lsl lr
   15ae4:	orr	r7, r7, r2, lsr r8
   15ae8:	lsl	r6, r2, ip
   15aec:	cmp	r5, r7
   15af0:	cmpeq	r4, r6
   15af4:	movcc	r0, #0
   15af8:	movcc	r1, #0
   15afc:	bcc	15b18 <__assert_fail@plt+0x4b64>
   15b00:	mov	r3, #1
   15b04:	subs	r4, r4, r6
   15b08:	lsl	r1, r3, lr
   15b0c:	lsl	r0, r3, ip
   15b10:	orr	r1, r1, r3, lsr r8
   15b14:	sbc	r5, r5, r7
   15b18:	cmp	ip, #0
   15b1c:	beq	15ba4 <__assert_fail@plt+0x4bf0>
   15b20:	lsrs	r3, r7, #1
   15b24:	rrx	r2, r6
   15b28:	mov	r6, ip
   15b2c:	b	15b50 <__assert_fail@plt+0x4b9c>
   15b30:	subs	r4, r4, r2
   15b34:	sbc	r5, r5, r3
   15b38:	adds	r4, r4, r4
   15b3c:	adc	r5, r5, r5
   15b40:	adds	r4, r4, #1
   15b44:	adc	r5, r5, #0
   15b48:	subs	r6, r6, #1
   15b4c:	beq	15b6c <__assert_fail@plt+0x4bb8>
   15b50:	cmp	r5, r3
   15b54:	cmpeq	r4, r2
   15b58:	bcs	15b30 <__assert_fail@plt+0x4b7c>
   15b5c:	adds	r4, r4, r4
   15b60:	adc	r5, r5, r5
   15b64:	subs	r6, r6, #1
   15b68:	bne	15b50 <__assert_fail@plt+0x4b9c>
   15b6c:	lsr	r6, r4, ip
   15b70:	lsr	r7, r5, ip
   15b74:	orr	r6, r6, r5, lsl r8
   15b78:	adds	r2, r0, r4
   15b7c:	orr	r6, r6, r5, lsr lr
   15b80:	adc	r3, r1, r5
   15b84:	lsl	r1, r7, ip
   15b88:	orr	r1, r1, r6, lsl lr
   15b8c:	lsl	r0, r6, ip
   15b90:	orr	r1, r1, r6, lsr r8
   15b94:	subs	r0, r2, r0
   15b98:	mov	r4, r6
   15b9c:	mov	r5, r7
   15ba0:	sbc	r1, r3, r1
   15ba4:	cmp	r9, #0
   15ba8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   15bac:	strd	r4, [r9]
   15bb0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15bb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15bb8:	mov	r7, r0
   15bbc:	ldr	r6, [pc, #72]	; 15c0c <__assert_fail@plt+0x4c58>
   15bc0:	ldr	r5, [pc, #72]	; 15c10 <__assert_fail@plt+0x4c5c>
   15bc4:	add	r6, pc, r6
   15bc8:	add	r5, pc, r5
   15bcc:	sub	r6, r6, r5
   15bd0:	mov	r8, r1
   15bd4:	mov	r9, r2
   15bd8:	bl	10d00 <calloc@plt-0x20>
   15bdc:	asrs	r6, r6, #2
   15be0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15be4:	mov	r4, #0
   15be8:	add	r4, r4, #1
   15bec:	ldr	r3, [r5], #4
   15bf0:	mov	r2, r9
   15bf4:	mov	r1, r8
   15bf8:	mov	r0, r7
   15bfc:	blx	r3
   15c00:	cmp	r6, r4
   15c04:	bne	15be8 <__assert_fail@plt+0x4c34>
   15c08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c0c:	andeq	r1, r1, r4, asr #6
   15c10:	andeq	r1, r1, ip, lsr r3
   15c14:	bx	lr
   15c18:	ldr	r3, [pc, #12]	; 15c2c <__assert_fail@plt+0x4c78>
   15c1c:	mov	r1, #0
   15c20:	add	r3, pc, r3
   15c24:	ldr	r2, [r3]
   15c28:	b	10ee8 <__cxa_atexit@plt>
   15c2c:	andeq	r1, r1, ip, asr #9

Disassembly of section .fini:

00015c30 <.fini>:
   15c30:	push	{r3, lr}
   15c34:	pop	{r3, pc}
