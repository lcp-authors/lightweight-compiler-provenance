
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011060 <.init>:
   11060:	push	{r3, lr}
   11064:	bl	113fc <__assert_fail@plt+0x4c>
   11068:	pop	{r3, pc}

Disassembly of section .plt:

0001106c <calloc@plt-0x14>:
   1106c:	push	{lr}		; (str lr, [sp, #-4]!)
   11070:	ldr	lr, [pc, #4]	; 1107c <calloc@plt-0x4>
   11074:	add	lr, pc, lr
   11078:	ldr	pc, [lr, #8]!
   1107c:	andeq	sl, r1, r4, lsl #31

00011080 <calloc@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #3972]!	; 0xf84

0001108c <fputs_unlocked@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #106496	; 0x1a000
   11094:	ldr	pc, [ip, #3964]!	; 0xf7c

00011098 <raise@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #106496	; 0x1a000
   110a0:	ldr	pc, [ip, #3956]!	; 0xf74

000110a4 <strcmp@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #3948]!	; 0xf6c

000110b0 <posix_fadvise64@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #106496	; 0x1a000
   110b8:	ldr	pc, [ip, #3940]!	; 0xf64

000110bc <printf@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #3932]!	; 0xf5c

000110c8 <read@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #3924]!	; 0xf54

000110d4 <fflush@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #3916]!	; 0xf4c

000110e0 <wcwidth@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #3908]!	; 0xf44

000110ec <memmove@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #3900]!	; 0xf3c

000110f8 <free@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #3892]!	; 0xf34

00011104 <ferror@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011110 <_exit@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #3876]!	; 0xf24

0001111c <memcpy@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3868]!	; 0xf1c

00011128 <mbsinit@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3860]!	; 0xf14

00011134 <memcmp@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011140 <fputc_unlocked@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3844]!	; 0xf04

0001114c <sysconf@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3836]!	; 0xefc

00011158 <realloc@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3828]!	; 0xef4

00011164 <textdomain@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3820]!	; 0xeec

00011170 <iswcntrl@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3812]!	; 0xee4

0001117c <rawmemchr@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3804]!	; 0xedc

00011188 <iswprint@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3796]!	; 0xed4

00011194 <__fxstat64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3788]!	; 0xecc

000111a0 <fwrite@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3780]!	; 0xec4

000111ac <lseek64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3772]!	; 0xebc

000111b8 <__ctype_get_mb_cur_max@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3764]!	; 0xeb4

000111c4 <__fpending@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3756]!	; 0xeac

000111d0 <ferror_unlocked@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3748]!	; 0xea4

000111dc <mbrtowc@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111e8 <error@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3732]!	; 0xe94

000111f4 <open64@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3724]!	; 0xe8c

00011200 <getenv@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3716]!	; 0xe84

0001120c <sysinfo@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3708]!	; 0xe7c

00011218 <malloc@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3700]!	; 0xe74

00011224 <__libc_start_main@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011230 <__freading@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3684]!	; 0xe64

0001123c <__gmon_start__@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3676]!	; 0xe5c

00011248 <getopt_long@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3668]!	; 0xe54

00011254 <__ctype_b_loc@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011260 <exit@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3652]!	; 0xe44

0001126c <feof@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3644]!	; 0xe3c

00011278 <iswspace@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3636]!	; 0xe34

00011284 <gettext@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011290 <strlen@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3620]!	; 0xe24

0001129c <strchr@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3612]!	; 0xe1c

000112a8 <fprintf@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3604]!	; 0xe14

000112b4 <getpagesize@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3596]!	; 0xe0c

000112c0 <__errno_location@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3588]!	; 0xe04

000112cc <__cxa_atexit@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112d8 <setvbuf@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112e4 <memset@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3564]!	; 0xdec

000112f0 <btowc@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3556]!	; 0xde4

000112fc <fgetc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3548]!	; 0xddc

00011308 <fileno@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3540]!	; 0xdd4

00011314 <fclose@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3532]!	; 0xdcc

00011320 <fseeko64@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3524]!	; 0xdc4

0001132c <setlocale@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3516]!	; 0xdbc

00011338 <strrchr@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3508]!	; 0xdb4

00011344 <nl_langinfo@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3500]!	; 0xdac

00011350 <fopen64@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3492]!	; 0xda4

0001135c <bindtextdomain@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3484]!	; 0xd9c

00011368 <getdelim@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3476]!	; 0xd94

00011374 <__xstat64@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011380 <strncmp@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3460]!	; 0xd84

0001138c <abort@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3452]!	; 0xd7c

00011398 <close@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3444]!	; 0xd74

000113a4 <putchar_unlocked@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3436]!	; 0xd6c

000113b0 <__assert_fail@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #106496	; 0x1a000
   113b8:	ldr	pc, [ip, #3428]!	; 0xd64

Disassembly of section .text:

000113c0 <_obstack_begin@@Base-0x8204>:
   113c0:	mov	fp, #0
   113c4:	mov	lr, #0
   113c8:	pop	{r1}		; (ldr r1, [sp], #4)
   113cc:	mov	r2, sp
   113d0:	push	{r2}		; (str r2, [sp, #-4]!)
   113d4:	push	{r0}		; (str r0, [sp, #-4]!)
   113d8:	ldr	ip, [pc, #16]	; 113f0 <__assert_fail@plt+0x40>
   113dc:	push	{ip}		; (str ip, [sp, #-4]!)
   113e0:	ldr	r0, [pc, #12]	; 113f4 <__assert_fail@plt+0x44>
   113e4:	ldr	r3, [pc, #12]	; 113f8 <__assert_fail@plt+0x48>
   113e8:	bl	11224 <__libc_start_main@plt>
   113ec:	bl	1138c <abort@plt>
   113f0:	andeq	sl, r1, r4, ror #23
   113f4:	andeq	r3, r1, r8, lsl r3
   113f8:	andeq	sl, r1, r4, lsl #23
   113fc:	ldr	r3, [pc, #20]	; 11418 <__assert_fail@plt+0x68>
   11400:	ldr	r2, [pc, #20]	; 1141c <__assert_fail@plt+0x6c>
   11404:	add	r3, pc, r3
   11408:	ldr	r2, [r3, r2]
   1140c:	cmp	r2, #0
   11410:	bxeq	lr
   11414:	b	1123c <__gmon_start__@plt>
   11418:	strdeq	sl, [r1], -r4
   1141c:	andeq	r0, r0, r0, lsr #2
   11420:	ldr	r3, [pc, #28]	; 11444 <__assert_fail@plt+0x94>
   11424:	ldr	r0, [pc, #28]	; 11448 <__assert_fail@plt+0x98>
   11428:	sub	r3, r3, r0
   1142c:	cmp	r3, #6
   11430:	bxls	lr
   11434:	ldr	r3, [pc, #16]	; 1144c <__assert_fail@plt+0x9c>
   11438:	cmp	r3, #0
   1143c:	bxeq	lr
   11440:	bx	r3
   11444:	andeq	ip, r2, pc, ror r1
   11448:	andeq	ip, r2, ip, ror r1
   1144c:	andeq	r0, r0, r0
   11450:	ldr	r1, [pc, #36]	; 1147c <__assert_fail@plt+0xcc>
   11454:	ldr	r0, [pc, #36]	; 11480 <__assert_fail@plt+0xd0>
   11458:	sub	r1, r1, r0
   1145c:	asr	r1, r1, #2
   11460:	add	r1, r1, r1, lsr #31
   11464:	asrs	r1, r1, #1
   11468:	bxeq	lr
   1146c:	ldr	r3, [pc, #16]	; 11484 <__assert_fail@plt+0xd4>
   11470:	cmp	r3, #0
   11474:	bxeq	lr
   11478:	bx	r3
   1147c:	andeq	ip, r2, ip, ror r1
   11480:	andeq	ip, r2, ip, ror r1
   11484:	andeq	r0, r0, r0
   11488:	push	{r4, lr}
   1148c:	ldr	r4, [pc, #24]	; 114ac <__assert_fail@plt+0xfc>
   11490:	ldrb	r3, [r4]
   11494:	cmp	r3, #0
   11498:	popne	{r4, pc}
   1149c:	bl	11420 <__assert_fail@plt+0x70>
   114a0:	mov	r3, #1
   114a4:	strb	r3, [r4]
   114a8:	pop	{r4, pc}
   114ac:	andeq	ip, r2, r4, lsr #3
   114b0:	ldr	r0, [pc, #40]	; 114e0 <__assert_fail@plt+0x130>
   114b4:	ldr	r3, [r0]
   114b8:	cmp	r3, #0
   114bc:	bne	114c4 <__assert_fail@plt+0x114>
   114c0:	b	11450 <__assert_fail@plt+0xa0>
   114c4:	ldr	r3, [pc, #24]	; 114e4 <__assert_fail@plt+0x134>
   114c8:	cmp	r3, #0
   114cc:	beq	114c0 <__assert_fail@plt+0x110>
   114d0:	push	{r4, lr}
   114d4:	blx	r3
   114d8:	pop	{r4, lr}
   114dc:	b	11450 <__assert_fail@plt+0xa0>
   114e0:	andeq	fp, r2, r4, lsl pc
   114e4:	andeq	r0, r0, r0
   114e8:	push	{fp}		; (str fp, [sp, #-4]!)
   114ec:	add	fp, sp, #0
   114f0:	sub	sp, sp, #12
   114f4:	mov	r3, r0
   114f8:	strb	r3, [fp, #-5]
   114fc:	ldrb	r3, [fp, #-5]
   11500:	mov	r0, r3
   11504:	add	sp, fp, #0
   11508:	pop	{fp}		; (ldr fp, [sp], #4)
   1150c:	bx	lr
   11510:	push	{fp, lr}
   11514:	add	fp, sp, #4
   11518:	ldr	r0, [pc, #32]	; 11540 <__assert_fail@plt+0x190>
   1151c:	bl	11284 <gettext@plt>
   11520:	mov	r2, r0
   11524:	ldr	r3, [pc, #24]	; 11544 <__assert_fail@plt+0x194>
   11528:	ldr	r3, [r3]
   1152c:	mov	r1, r3
   11530:	mov	r0, r2
   11534:	bl	1108c <fputs_unlocked@plt>
   11538:	nop			; (mov r0, r0)
   1153c:	pop	{fp, pc}
   11540:	andeq	sl, r1, ip, lsr #24
   11544:	muleq	r2, ip, r1
   11548:	push	{fp, lr}
   1154c:	add	fp, sp, #4
   11550:	sub	sp, sp, #80	; 0x50
   11554:	str	r0, [fp, #-80]	; 0xffffffb0
   11558:	ldr	r3, [pc, #348]	; 116bc <__assert_fail@plt+0x30c>
   1155c:	sub	ip, fp, #72	; 0x48
   11560:	mov	lr, r3
   11564:	ldm	lr!, {r0, r1, r2, r3}
   11568:	stmia	ip!, {r0, r1, r2, r3}
   1156c:	ldm	lr!, {r0, r1, r2, r3}
   11570:	stmia	ip!, {r0, r1, r2, r3}
   11574:	ldm	lr!, {r0, r1, r2, r3}
   11578:	stmia	ip!, {r0, r1, r2, r3}
   1157c:	ldm	lr, {r0, r1}
   11580:	stm	ip, {r0, r1}
   11584:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11588:	str	r3, [fp, #-8]
   1158c:	sub	r3, fp, #72	; 0x48
   11590:	str	r3, [fp, #-12]
   11594:	b	115a4 <__assert_fail@plt+0x1f4>
   11598:	ldr	r3, [fp, #-12]
   1159c:	add	r3, r3, #8
   115a0:	str	r3, [fp, #-12]
   115a4:	ldr	r3, [fp, #-12]
   115a8:	ldr	r3, [r3]
   115ac:	cmp	r3, #0
   115b0:	beq	115d4 <__assert_fail@plt+0x224>
   115b4:	ldr	r3, [fp, #-12]
   115b8:	ldr	r3, [r3]
   115bc:	mov	r1, r3
   115c0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   115c4:	bl	110a4 <strcmp@plt>
   115c8:	mov	r3, r0
   115cc:	cmp	r3, #0
   115d0:	bne	11598 <__assert_fail@plt+0x1e8>
   115d4:	ldr	r3, [fp, #-12]
   115d8:	ldr	r3, [r3, #4]
   115dc:	cmp	r3, #0
   115e0:	beq	115f0 <__assert_fail@plt+0x240>
   115e4:	ldr	r3, [fp, #-12]
   115e8:	ldr	r3, [r3, #4]
   115ec:	str	r3, [fp, #-8]
   115f0:	ldr	r0, [pc, #200]	; 116c0 <__assert_fail@plt+0x310>
   115f4:	bl	11284 <gettext@plt>
   115f8:	mov	r3, r0
   115fc:	ldr	r2, [pc, #192]	; 116c4 <__assert_fail@plt+0x314>
   11600:	ldr	r1, [pc, #192]	; 116c8 <__assert_fail@plt+0x318>
   11604:	mov	r0, r3
   11608:	bl	110bc <printf@plt>
   1160c:	mov	r1, #0
   11610:	mov	r0, #5
   11614:	bl	1132c <setlocale@plt>
   11618:	str	r0, [fp, #-16]
   1161c:	ldr	r3, [fp, #-16]
   11620:	cmp	r3, #0
   11624:	beq	11664 <__assert_fail@plt+0x2b4>
   11628:	mov	r2, #3
   1162c:	ldr	r1, [pc, #152]	; 116cc <__assert_fail@plt+0x31c>
   11630:	ldr	r0, [fp, #-16]
   11634:	bl	11380 <strncmp@plt>
   11638:	mov	r3, r0
   1163c:	cmp	r3, #0
   11640:	beq	11664 <__assert_fail@plt+0x2b4>
   11644:	ldr	r0, [pc, #132]	; 116d0 <__assert_fail@plt+0x320>
   11648:	bl	11284 <gettext@plt>
   1164c:	mov	r2, r0
   11650:	ldr	r3, [pc, #124]	; 116d4 <__assert_fail@plt+0x324>
   11654:	ldr	r3, [r3]
   11658:	mov	r1, r3
   1165c:	mov	r0, r2
   11660:	bl	1108c <fputs_unlocked@plt>
   11664:	ldr	r0, [pc, #108]	; 116d8 <__assert_fail@plt+0x328>
   11668:	bl	11284 <gettext@plt>
   1166c:	mov	r3, r0
   11670:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11674:	ldr	r1, [pc, #72]	; 116c4 <__assert_fail@plt+0x314>
   11678:	mov	r0, r3
   1167c:	bl	110bc <printf@plt>
   11680:	ldr	r0, [pc, #84]	; 116dc <__assert_fail@plt+0x32c>
   11684:	bl	11284 <gettext@plt>
   11688:	ldr	r2, [fp, #-8]
   1168c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11690:	cmp	r2, r3
   11694:	bne	116a0 <__assert_fail@plt+0x2f0>
   11698:	ldr	r3, [pc, #64]	; 116e0 <__assert_fail@plt+0x330>
   1169c:	b	116a4 <__assert_fail@plt+0x2f4>
   116a0:	ldr	r3, [pc, #60]	; 116e4 <__assert_fail@plt+0x334>
   116a4:	mov	r2, r3
   116a8:	ldr	r1, [fp, #-8]
   116ac:	bl	110bc <printf@plt>
   116b0:	nop			; (mov r0, r0)
   116b4:	sub	sp, fp, #4
   116b8:	pop	{fp, pc}
   116bc:	ldrdeq	sl, [r1], -r8
   116c0:	andeq	sl, r1, r4, ror #24
   116c4:	andeq	sl, r1, ip, ror ip
   116c8:	andeq	sl, r1, r4, lsr #25
   116cc:			; <UNDEFINED> instruction: 0x0001acb4
   116d0:			; <UNDEFINED> instruction: 0x0001acb8
   116d4:	muleq	r2, ip, r1
   116d8:	andeq	sl, r1, r0, lsl #26
   116dc:	andeq	sl, r1, ip, lsl sp
   116e0:	andeq	sl, r1, r0, asr sp
   116e4:	andeq	sl, r1, ip, asr sp
   116e8:	push	{fp}		; (str fp, [sp, #-4]!)
   116ec:	add	fp, sp, #0
   116f0:	sub	sp, sp, #12
   116f4:	str	r0, [fp, #-8]
   116f8:	ldr	r3, [fp, #-8]
   116fc:	ldr	r3, [r3, #16]
   11700:	and	r3, r3, #61440	; 0xf000
   11704:	cmp	r3, #32768	; 0x8000
   11708:	beq	11720 <__assert_fail@plt+0x370>
   1170c:	ldr	r3, [fp, #-8]
   11710:	ldr	r3, [r3, #16]
   11714:	and	r3, r3, #61440	; 0xf000
   11718:	cmp	r3, #40960	; 0xa000
   1171c:	bne	11728 <__assert_fail@plt+0x378>
   11720:	mov	r3, #1
   11724:	b	1172c <__assert_fail@plt+0x37c>
   11728:	mov	r3, #0
   1172c:	and	r3, r3, #1
   11730:	uxtb	r3, r3
   11734:	mov	r0, r3
   11738:	add	sp, fp, #0
   1173c:	pop	{fp}		; (ldr fp, [sp], #4)
   11740:	bx	lr
   11744:	push	{r4, fp, lr}
   11748:	add	fp, sp, #8
   1174c:	sub	sp, sp, #12
   11750:	str	r0, [fp, #-16]
   11754:	ldr	r3, [fp, #-16]
   11758:	cmp	r3, #0
   1175c:	beq	1178c <__assert_fail@plt+0x3dc>
   11760:	ldr	r3, [pc, #248]	; 11860 <__assert_fail@plt+0x4b0>
   11764:	ldr	r4, [r3]
   11768:	ldr	r0, [pc, #244]	; 11864 <__assert_fail@plt+0x4b4>
   1176c:	bl	11284 <gettext@plt>
   11770:	mov	r1, r0
   11774:	ldr	r3, [pc, #236]	; 11868 <__assert_fail@plt+0x4b8>
   11778:	ldr	r3, [r3]
   1177c:	mov	r2, r3
   11780:	mov	r0, r4
   11784:	bl	112a8 <fprintf@plt>
   11788:	b	11858 <__assert_fail@plt+0x4a8>
   1178c:	ldr	r0, [pc, #216]	; 1186c <__assert_fail@plt+0x4bc>
   11790:	bl	11284 <gettext@plt>
   11794:	ldr	r3, [pc, #204]	; 11868 <__assert_fail@plt+0x4b8>
   11798:	ldr	r1, [r3]
   1179c:	ldr	r3, [pc, #196]	; 11868 <__assert_fail@plt+0x4b8>
   117a0:	ldr	r3, [r3]
   117a4:	mov	r2, r3
   117a8:	bl	110bc <printf@plt>
   117ac:	ldr	r0, [pc, #188]	; 11870 <__assert_fail@plt+0x4c0>
   117b0:	bl	11284 <gettext@plt>
   117b4:	mov	r2, r0
   117b8:	ldr	r3, [pc, #180]	; 11874 <__assert_fail@plt+0x4c4>
   117bc:	ldr	r3, [r3]
   117c0:	mov	r1, r3
   117c4:	mov	r0, r2
   117c8:	bl	1108c <fputs_unlocked@plt>
   117cc:	bl	11510 <__assert_fail@plt+0x160>
   117d0:	ldr	r0, [pc, #160]	; 11878 <__assert_fail@plt+0x4c8>
   117d4:	bl	11284 <gettext@plt>
   117d8:	mov	r2, r0
   117dc:	ldr	r3, [pc, #144]	; 11874 <__assert_fail@plt+0x4c4>
   117e0:	ldr	r3, [r3]
   117e4:	mov	r1, r3
   117e8:	mov	r0, r2
   117ec:	bl	1108c <fputs_unlocked@plt>
   117f0:	ldr	r0, [pc, #132]	; 1187c <__assert_fail@plt+0x4cc>
   117f4:	bl	11284 <gettext@plt>
   117f8:	mov	r2, r0
   117fc:	ldr	r3, [pc, #112]	; 11874 <__assert_fail@plt+0x4c4>
   11800:	ldr	r3, [r3]
   11804:	mov	r1, r3
   11808:	mov	r0, r2
   1180c:	bl	1108c <fputs_unlocked@plt>
   11810:	ldr	r0, [pc, #104]	; 11880 <__assert_fail@plt+0x4d0>
   11814:	bl	11284 <gettext@plt>
   11818:	mov	r2, r0
   1181c:	ldr	r3, [pc, #80]	; 11874 <__assert_fail@plt+0x4c4>
   11820:	ldr	r3, [r3]
   11824:	mov	r1, r3
   11828:	mov	r0, r2
   1182c:	bl	1108c <fputs_unlocked@plt>
   11830:	ldr	r0, [pc, #76]	; 11884 <__assert_fail@plt+0x4d4>
   11834:	bl	11284 <gettext@plt>
   11838:	mov	r2, r0
   1183c:	ldr	r3, [pc, #48]	; 11874 <__assert_fail@plt+0x4c4>
   11840:	ldr	r3, [r3]
   11844:	mov	r1, r3
   11848:	mov	r0, r2
   1184c:	bl	1108c <fputs_unlocked@plt>
   11850:	ldr	r0, [pc, #48]	; 11888 <__assert_fail@plt+0x4d8>
   11854:	bl	11548 <__assert_fail@plt+0x198>
   11858:	ldr	r0, [fp, #-16]
   1185c:	bl	11260 <exit@plt>
   11860:	muleq	r2, r0, r1
   11864:	andeq	sl, r1, r4, lsl #30
   11868:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1186c:	andeq	sl, r1, ip, lsr #30
   11870:	andeq	sl, r1, r4, ror pc
   11874:	muleq	r2, ip, r1
   11878:	andeq	fp, r1, r8, lsr r0
   1187c:	andeq	fp, r1, r8, ror #2
   11880:	muleq	r1, r8, r2
   11884:	andeq	fp, r1, r8, asr #5
   11888:	andeq	fp, r1, r0, lsl #6
   1188c:	push	{fp}		; (str fp, [sp, #-4]!)
   11890:	add	fp, sp, #0
   11894:	sub	sp, sp, #12
   11898:	str	r0, [fp, #-8]
   1189c:	ldr	r3, [pc, #104]	; 1190c <__assert_fail@plt+0x55c>
   118a0:	ldrb	r3, [r3]
   118a4:	eor	r3, r3, #1
   118a8:	uxtb	r3, r3
   118ac:	cmp	r3, #0
   118b0:	beq	118f8 <__assert_fail@plt+0x548>
   118b4:	ldr	r3, [fp, #-8]
   118b8:	cmp	r3, #160	; 0xa0
   118bc:	beq	118f0 <__assert_fail@plt+0x540>
   118c0:	ldr	r3, [fp, #-8]
   118c4:	ldr	r2, [pc, #68]	; 11910 <__assert_fail@plt+0x560>
   118c8:	cmp	r3, r2
   118cc:	beq	118f0 <__assert_fail@plt+0x540>
   118d0:	ldr	r3, [fp, #-8]
   118d4:	ldr	r2, [pc, #56]	; 11914 <__assert_fail@plt+0x564>
   118d8:	cmp	r3, r2
   118dc:	beq	118f0 <__assert_fail@plt+0x540>
   118e0:	ldr	r3, [fp, #-8]
   118e4:	ldr	r2, [pc, #44]	; 11918 <__assert_fail@plt+0x568>
   118e8:	cmp	r3, r2
   118ec:	bne	118f8 <__assert_fail@plt+0x548>
   118f0:	mov	r3, #1
   118f4:	b	118fc <__assert_fail@plt+0x54c>
   118f8:	mov	r3, #0
   118fc:	mov	r0, r3
   11900:	add	sp, fp, #0
   11904:	pop	{fp}		; (ldr fp, [sp], #4)
   11908:	bx	lr
   1190c:	andeq	ip, r2, ip, ror #3
   11910:	andeq	r2, r0, r7
   11914:	andeq	r2, r0, pc, lsr #32
   11918:	andeq	r2, r0, r0, rrx
   1191c:	push	{fp, lr}
   11920:	add	fp, sp, #4
   11924:	sub	sp, sp, #8
   11928:	str	r0, [fp, #-8]
   1192c:	ldr	r0, [fp, #-8]
   11930:	bl	112f0 <btowc@plt>
   11934:	mov	r3, r0
   11938:	mov	r0, r3
   1193c:	bl	1188c <__assert_fail@plt+0x4dc>
   11940:	mov	r3, r0
   11944:	mov	r0, r3
   11948:	sub	sp, fp, #4
   1194c:	pop	{fp, pc}
   11950:	push	{r4, fp, lr}
   11954:	add	fp, sp, #8
   11958:	sub	sp, sp, #52	; 0x34
   1195c:	strd	r0, [fp, #-52]	; 0xffffffcc
   11960:	strd	r2, [fp, #-60]	; 0xffffffc4
   11964:	ldr	r3, [pc, #428]	; 11b18 <__assert_fail@plt+0x768>
   11968:	str	r3, [fp, #-16]
   1196c:	ldr	r3, [pc, #424]	; 11b1c <__assert_fail@plt+0x76c>
   11970:	ldrb	r3, [r3]
   11974:	cmp	r3, #0
   11978:	beq	119b0 <__assert_fail@plt+0x600>
   1197c:	ldr	r3, [pc, #412]	; 11b20 <__assert_fail@plt+0x770>
   11980:	ldr	r4, [r3]
   11984:	sub	r3, fp, #40	; 0x28
   11988:	mov	r2, r3
   1198c:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   11990:	bl	145d8 <__assert_fail@plt+0x3228>
   11994:	mov	r3, r0
   11998:	mov	r2, r3
   1199c:	mov	r1, r4
   119a0:	ldr	r0, [fp, #-16]
   119a4:	bl	110bc <printf@plt>
   119a8:	ldr	r3, [pc, #372]	; 11b24 <__assert_fail@plt+0x774>
   119ac:	str	r3, [fp, #-16]
   119b0:	ldr	r3, [pc, #368]	; 11b28 <__assert_fail@plt+0x778>
   119b4:	ldrb	r3, [r3]
   119b8:	cmp	r3, #0
   119bc:	beq	119f4 <__assert_fail@plt+0x644>
   119c0:	ldr	r3, [pc, #344]	; 11b20 <__assert_fail@plt+0x770>
   119c4:	ldr	r4, [r3]
   119c8:	sub	r3, fp, #40	; 0x28
   119cc:	mov	r2, r3
   119d0:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   119d4:	bl	145d8 <__assert_fail@plt+0x3228>
   119d8:	mov	r3, r0
   119dc:	mov	r2, r3
   119e0:	mov	r1, r4
   119e4:	ldr	r0, [fp, #-16]
   119e8:	bl	110bc <printf@plt>
   119ec:	ldr	r3, [pc, #304]	; 11b24 <__assert_fail@plt+0x774>
   119f0:	str	r3, [fp, #-16]
   119f4:	ldr	r3, [pc, #304]	; 11b2c <__assert_fail@plt+0x77c>
   119f8:	ldrb	r3, [r3]
   119fc:	cmp	r3, #0
   11a00:	beq	11a38 <__assert_fail@plt+0x688>
   11a04:	ldr	r3, [pc, #276]	; 11b20 <__assert_fail@plt+0x770>
   11a08:	ldr	r4, [r3]
   11a0c:	sub	r3, fp, #40	; 0x28
   11a10:	mov	r2, r3
   11a14:	ldrd	r0, [fp, #4]
   11a18:	bl	145d8 <__assert_fail@plt+0x3228>
   11a1c:	mov	r3, r0
   11a20:	mov	r2, r3
   11a24:	mov	r1, r4
   11a28:	ldr	r0, [fp, #-16]
   11a2c:	bl	110bc <printf@plt>
   11a30:	ldr	r3, [pc, #236]	; 11b24 <__assert_fail@plt+0x774>
   11a34:	str	r3, [fp, #-16]
   11a38:	ldr	r3, [pc, #240]	; 11b30 <__assert_fail@plt+0x780>
   11a3c:	ldrb	r3, [r3]
   11a40:	cmp	r3, #0
   11a44:	beq	11a7c <__assert_fail@plt+0x6cc>
   11a48:	ldr	r3, [pc, #208]	; 11b20 <__assert_fail@plt+0x770>
   11a4c:	ldr	r4, [r3]
   11a50:	sub	r3, fp, #40	; 0x28
   11a54:	mov	r2, r3
   11a58:	ldrd	r0, [fp, #12]
   11a5c:	bl	145d8 <__assert_fail@plt+0x3228>
   11a60:	mov	r3, r0
   11a64:	mov	r2, r3
   11a68:	mov	r1, r4
   11a6c:	ldr	r0, [fp, #-16]
   11a70:	bl	110bc <printf@plt>
   11a74:	ldr	r3, [pc, #168]	; 11b24 <__assert_fail@plt+0x774>
   11a78:	str	r3, [fp, #-16]
   11a7c:	ldr	r3, [pc, #176]	; 11b34 <__assert_fail@plt+0x784>
   11a80:	ldrb	r3, [r3]
   11a84:	cmp	r3, #0
   11a88:	beq	11ab8 <__assert_fail@plt+0x708>
   11a8c:	ldr	r3, [pc, #140]	; 11b20 <__assert_fail@plt+0x770>
   11a90:	ldr	r4, [r3]
   11a94:	sub	r3, fp, #40	; 0x28
   11a98:	mov	r2, r3
   11a9c:	ldrd	r0, [fp, #20]
   11aa0:	bl	145d8 <__assert_fail@plt+0x3228>
   11aa4:	mov	r3, r0
   11aa8:	mov	r2, r3
   11aac:	mov	r1, r4
   11ab0:	ldr	r0, [fp, #-16]
   11ab4:	bl	110bc <printf@plt>
   11ab8:	ldr	r3, [fp, #28]
   11abc:	cmp	r3, #0
   11ac0:	beq	11b04 <__assert_fail@plt+0x754>
   11ac4:	mov	r1, #10
   11ac8:	ldr	r0, [fp, #28]
   11acc:	bl	1129c <strchr@plt>
   11ad0:	mov	r3, r0
   11ad4:	cmp	r3, #0
   11ad8:	beq	11af4 <__assert_fail@plt+0x744>
   11adc:	ldr	r2, [fp, #28]
   11ae0:	mov	r1, #3
   11ae4:	mov	r0, #0
   11ae8:	bl	16ed8 <__assert_fail@plt+0x5b28>
   11aec:	mov	r3, r0
   11af0:	b	11af8 <__assert_fail@plt+0x748>
   11af4:	ldr	r3, [fp, #28]
   11af8:	mov	r1, r3
   11afc:	ldr	r0, [pc, #52]	; 11b38 <__assert_fail@plt+0x788>
   11b00:	bl	110bc <printf@plt>
   11b04:	mov	r0, #10
   11b08:	bl	113a4 <putchar_unlocked@plt>
   11b0c:	nop			; (mov r0, r0)
   11b10:	sub	sp, fp, #8
   11b14:	pop	{r4, fp, pc}
   11b18:			; <UNDEFINED> instruction: 0x0001b4b1
   11b1c:	ldrdeq	ip, [r2], -r8
   11b20:	andeq	ip, r2, r0, ror #3
   11b24:			; <UNDEFINED> instruction: 0x0001b4b0
   11b28:	ldrdeq	ip, [r2], -r9
   11b2c:	ldrdeq	ip, [r2], -sl
   11b30:	ldrdeq	ip, [r2], -fp
   11b34:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   11b38:	andeq	fp, r1, r4, lsl #6
   11b3c:	push	{r4, fp, lr}
   11b40:	add	fp, sp, #8
   11b44:	sub	sp, sp, #16384	; 0x4000
   11b48:	sub	sp, sp, #68	; 0x44
   11b4c:	sub	ip, fp, #16384	; 0x4000
   11b50:	sub	ip, ip, #12
   11b54:	str	r0, [ip, #-52]	; 0xffffffcc
   11b58:	sub	r0, fp, #16384	; 0x4000
   11b5c:	sub	r0, r0, #12
   11b60:	str	r1, [r0, #-56]	; 0xffffffc8
   11b64:	sub	r1, fp, #16384	; 0x4000
   11b68:	sub	r1, r1, #12
   11b6c:	str	r2, [r1, #-60]	; 0xffffffc4
   11b70:	sub	r2, fp, #16384	; 0x4000
   11b74:	sub	r2, r2, #12
   11b78:	str	r3, [r2, #-64]	; 0xffffffc0
   11b7c:	mov	r3, #0
   11b80:	strb	r3, [fp, #-29]	; 0xffffffe3
   11b84:	sub	r3, fp, #16384	; 0x4000
   11b88:	sub	r3, r3, #12
   11b8c:	ldr	r3, [r3, #-60]	; 0xffffffc4
   11b90:	cmp	r3, #0
   11b94:	beq	11bac <__assert_fail@plt+0x7fc>
   11b98:	sub	r3, fp, #16384	; 0x4000
   11b9c:	sub	r3, r3, #12
   11ba0:	ldr	r3, [r3, #-64]	; 0xffffffc0
   11ba4:	cmp	r3, #0
   11ba8:	bne	11bb4 <__assert_fail@plt+0x804>
   11bac:	mov	r3, #0
   11bb0:	b	11dc0 <__assert_fail@plt+0xa10>
   11bb4:	mov	r2, #0
   11bb8:	mov	r3, #0
   11bbc:	strd	r2, [fp, #-28]	; 0xffffffe4
   11bc0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11bc4:	strd	r2, [fp, #-20]	; 0xffffffec
   11bc8:	b	11d5c <__assert_fail@plt+0x9ac>
   11bcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11bd0:	cmn	r3, #1
   11bd4:	bne	11c18 <__assert_fail@plt+0x868>
   11bd8:	bl	112c0 <__errno_location@plt>
   11bdc:	mov	r3, r0
   11be0:	ldr	r4, [r3]
   11be4:	sub	r3, fp, #16384	; 0x4000
   11be8:	sub	r3, r3, #12
   11bec:	ldr	r2, [r3, #-52]	; 0xffffffcc
   11bf0:	mov	r1, #3
   11bf4:	mov	r0, #0
   11bf8:	bl	16ed8 <__assert_fail@plt+0x5b28>
   11bfc:	mov	r3, r0
   11c00:	ldr	r2, [pc, #452]	; 11dcc <__assert_fail@plt+0xa1c>
   11c04:	mov	r1, r4
   11c08:	mov	r0, #0
   11c0c:	bl	111e8 <error@plt>
   11c10:	mov	r3, #0
   11c14:	b	11dc0 <__assert_fail@plt+0xa10>
   11c18:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11c1c:	mov	r2, r3
   11c20:	mov	r3, #0
   11c24:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   11c28:	adds	r2, r2, r0
   11c2c:	adc	r3, r3, r1
   11c30:	strd	r2, [fp, #-28]	; 0xffffffe4
   11c34:	sub	r3, fp, #16384	; 0x4000
   11c38:	sub	r3, r3, #12
   11c3c:	sub	r3, r3, #44	; 0x2c
   11c40:	str	r3, [fp, #-36]	; 0xffffffdc
   11c44:	sub	r3, fp, #16384	; 0x4000
   11c48:	sub	r3, r3, #12
   11c4c:	sub	r3, r3, #44	; 0x2c
   11c50:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11c54:	add	r3, r3, r2
   11c58:	str	r3, [fp, #-44]	; 0xffffffd4
   11c5c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11c60:	strd	r2, [fp, #-52]	; 0xffffffcc
   11c64:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11c68:	eor	r3, r3, #1
   11c6c:	uxtb	r3, r3
   11c70:	cmp	r3, #0
   11c74:	beq	11cc8 <__assert_fail@plt+0x918>
   11c78:	b	11cb4 <__assert_fail@plt+0x904>
   11c7c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11c80:	add	r2, r3, #1
   11c84:	str	r2, [fp, #-36]	; 0xffffffdc
   11c88:	ldrb	r3, [r3]
   11c8c:	cmp	r3, #10
   11c90:	moveq	r3, #1
   11c94:	movne	r3, #0
   11c98:	uxtb	r3, r3
   11c9c:	mov	r2, r3
   11ca0:	asr	r3, r2, #31
   11ca4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11ca8:	adds	r2, r2, r0
   11cac:	adc	r3, r3, r1
   11cb0:	strd	r2, [fp, #-20]	; 0xffffffec
   11cb4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11cb8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11cbc:	cmp	r2, r3
   11cc0:	bne	11c7c <__assert_fail@plt+0x8cc>
   11cc4:	b	11d14 <__assert_fail@plt+0x964>
   11cc8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11ccc:	mov	r2, #10
   11cd0:	strb	r2, [r3]
   11cd4:	b	11cf4 <__assert_fail@plt+0x944>
   11cd8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11cdc:	add	r3, r3, #1
   11ce0:	str	r3, [fp, #-36]	; 0xffffffdc
   11ce4:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11ce8:	adds	r2, r2, #1
   11cec:	adc	r3, r3, #0
   11cf0:	strd	r2, [fp, #-20]	; 0xffffffec
   11cf4:	mov	r1, #10
   11cf8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11cfc:	bl	1117c <rawmemchr@plt>
   11d00:	str	r0, [fp, #-36]	; 0xffffffdc
   11d04:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11d08:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11d0c:	cmp	r2, r3
   11d10:	bcc	11cd8 <__assert_fail@plt+0x928>
   11d14:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11d18:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   11d1c:	subs	r0, r0, r2
   11d20:	sbc	r1, r1, r3
   11d24:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11d28:	ldr	r2, [pc, #160]	; 11dd0 <__assert_fail@plt+0xa20>
   11d2c:	umull	r2, r3, r2, r3
   11d30:	lsr	r3, r3, #3
   11d34:	mov	r2, r3
   11d38:	mov	r3, #0
   11d3c:	cmp	r1, r3
   11d40:	cmpeq	r0, r2
   11d44:	bhi	11d54 <__assert_fail@plt+0x9a4>
   11d48:	mov	r3, #1
   11d4c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11d50:	b	11d5c <__assert_fail@plt+0x9ac>
   11d54:	mov	r3, #0
   11d58:	strb	r3, [fp, #-29]	; 0xffffffe3
   11d5c:	sub	r3, fp, #16384	; 0x4000
   11d60:	sub	r3, r3, #12
   11d64:	sub	r3, r3, #44	; 0x2c
   11d68:	sub	r2, fp, #16384	; 0x4000
   11d6c:	sub	r2, r2, #12
   11d70:	mov	r0, r2
   11d74:	mov	r2, #16384	; 0x4000
   11d78:	mov	r1, r3
   11d7c:	ldr	r0, [r0, #-56]	; 0xffffffc8
   11d80:	bl	17924 <__assert_fail@plt+0x6574>
   11d84:	str	r0, [fp, #-40]	; 0xffffffd8
   11d88:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11d8c:	cmp	r3, #0
   11d90:	bne	11bcc <__assert_fail@plt+0x81c>
   11d94:	sub	r3, fp, #16384	; 0x4000
   11d98:	sub	r3, r3, #12
   11d9c:	ldr	r1, [r3, #-64]	; 0xffffffc0
   11da0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11da4:	strd	r2, [r1]
   11da8:	sub	r3, fp, #16384	; 0x4000
   11dac:	sub	r3, r3, #12
   11db0:	ldr	r1, [r3, #-60]	; 0xffffffc4
   11db4:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11db8:	strd	r2, [r1]
   11dbc:	mov	r3, #1
   11dc0:	mov	r0, r3
   11dc4:	sub	sp, fp, #8
   11dc8:	pop	{r4, fp, pc}
   11dcc:	andeq	fp, r1, r8, lsl #6
   11dd0:	stmhi	r8, {r0, r3, r7, fp, pc}
   11dd4:	push	{r4, r5, fp, lr}
   11dd8:	add	fp, sp, #12
   11ddc:	sub	sp, sp, #16384	; 0x4000
   11de0:	sub	sp, sp, #200	; 0xc8
   11de4:	sub	r3, fp, #16384	; 0x4000
   11de8:	sub	r3, r3, #12
   11dec:	str	r0, [r3, #-156]	; 0xffffff64
   11df0:	sub	r3, fp, #16384	; 0x4000
   11df4:	sub	r3, r3, #12
   11df8:	str	r1, [r3, #-160]	; 0xffffff60
   11dfc:	sub	r3, fp, #16384	; 0x4000
   11e00:	sub	r3, r3, #12
   11e04:	str	r2, [r3, #-164]	; 0xffffff5c
   11e08:	mov	r3, #1
   11e0c:	strb	r3, [fp, #-13]
   11e10:	sub	r3, fp, #16384	; 0x4000
   11e14:	sub	r3, r3, #12
   11e18:	ldr	r3, [r3, #-160]	; 0xffffff60
   11e1c:	cmp	r3, #0
   11e20:	bne	11e34 <__assert_fail@plt+0xa84>
   11e24:	ldr	r0, [pc, #3448]	; 12ba4 <__assert_fail@plt+0x17f4>
   11e28:	bl	11284 <gettext@plt>
   11e2c:	mov	r3, r0
   11e30:	b	11e40 <__assert_fail@plt+0xa90>
   11e34:	sub	r3, fp, #16384	; 0x4000
   11e38:	sub	r3, r3, #12
   11e3c:	ldr	r3, [r3, #-160]	; 0xffffff60
   11e40:	str	r3, [fp, #-100]	; 0xffffff9c
   11e44:	mov	r2, #0
   11e48:	mov	r3, #0
   11e4c:	strd	r2, [fp, #-44]	; 0xffffffd4
   11e50:	sub	r3, fp, #16384	; 0x4000
   11e54:	sub	r3, r3, #12
   11e58:	sub	r3, r3, #128	; 0x80
   11e5c:	mov	r1, r3
   11e60:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11e64:	strd	r2, [r1]
   11e68:	sub	r3, fp, #16384	; 0x4000
   11e6c:	sub	r3, r3, #12
   11e70:	sub	r3, r3, #128	; 0x80
   11e74:	ldrd	r2, [r3]
   11e78:	strd	r2, [fp, #-36]	; 0xffffffdc
   11e7c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11e80:	strd	r2, [fp, #-28]	; 0xffffffe4
   11e84:	sub	r3, fp, #16384	; 0x4000
   11e88:	sub	r3, r3, #12
   11e8c:	sub	r3, r3, #112	; 0x70
   11e90:	mov	r1, r3
   11e94:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11e98:	strd	r2, [r1, #-8]
   11e9c:	bl	111b8 <__ctype_get_mb_cur_max@plt>
   11ea0:	mov	r3, r0
   11ea4:	cmp	r3, #1
   11ea8:	bls	11ec8 <__assert_fail@plt+0xb18>
   11eac:	ldr	r3, [pc, #3316]	; 12ba8 <__assert_fail@plt+0x17f8>
   11eb0:	ldrb	r3, [r3]
   11eb4:	strb	r3, [fp, #-45]	; 0xffffffd3
   11eb8:	ldr	r3, [pc, #3336]	; 12bc8 <__assert_fail@plt+0x1818>
   11ebc:	ldrb	r3, [r3]
   11ec0:	strb	r3, [fp, #-46]	; 0xffffffd2
   11ec4:	b	11f0c <__assert_fail@plt+0xb5c>
   11ec8:	ldr	r3, [pc, #3288]	; 12ba8 <__assert_fail@plt+0x17f8>
   11ecc:	ldrb	r3, [r3]
   11ed0:	cmp	r3, #0
   11ed4:	bne	11ee8 <__assert_fail@plt+0xb38>
   11ed8:	ldr	r3, [pc, #3304]	; 12bc8 <__assert_fail@plt+0x1818>
   11edc:	ldrb	r3, [r3]
   11ee0:	cmp	r3, #0
   11ee4:	beq	11ef0 <__assert_fail@plt+0xb40>
   11ee8:	mov	r3, #1
   11eec:	b	11ef4 <__assert_fail@plt+0xb44>
   11ef0:	mov	r3, #0
   11ef4:	strb	r3, [fp, #-45]	; 0xffffffd3
   11ef8:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   11efc:	and	r3, r3, #1
   11f00:	strb	r3, [fp, #-45]	; 0xffffffd3
   11f04:	mov	r3, #0
   11f08:	strb	r3, [fp, #-46]	; 0xffffffd2
   11f0c:	ldr	r3, [pc, #3224]	; 12bac <__assert_fail@plt+0x17fc>
   11f10:	ldrb	r3, [r3]
   11f14:	cmp	r3, #0
   11f18:	bne	11f2c <__assert_fail@plt+0xb7c>
   11f1c:	ldr	r3, [pc, #3212]	; 12bb0 <__assert_fail@plt+0x1800>
   11f20:	ldrb	r3, [r3]
   11f24:	cmp	r3, #0
   11f28:	beq	11f34 <__assert_fail@plt+0xb84>
   11f2c:	mov	r3, #1
   11f30:	b	11f38 <__assert_fail@plt+0xb88>
   11f34:	mov	r3, #0
   11f38:	strb	r3, [fp, #-101]	; 0xffffff9b
   11f3c:	ldrb	r3, [fp, #-101]	; 0xffffff9b
   11f40:	and	r3, r3, #1
   11f44:	strb	r3, [fp, #-101]	; 0xffffff9b
   11f48:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   11f4c:	eor	r3, r3, #1
   11f50:	uxtb	r3, r3
   11f54:	cmp	r3, #0
   11f58:	bne	11f84 <__assert_fail@plt+0xbd4>
   11f5c:	ldrb	r3, [fp, #-46]	; 0xffffffd2
   11f60:	cmp	r3, #0
   11f64:	bne	11f84 <__assert_fail@plt+0xbd4>
   11f68:	ldr	r3, [pc, #3140]	; 12bb4 <__assert_fail@plt+0x1804>
   11f6c:	ldrb	r3, [r3]
   11f70:	cmp	r3, #0
   11f74:	bne	11f84 <__assert_fail@plt+0xbd4>
   11f78:	ldrb	r3, [fp, #-101]	; 0xffffff9b
   11f7c:	cmp	r3, #0
   11f80:	beq	11fb4 <__assert_fail@plt+0xc04>
   11f84:	sub	r3, fp, #16384	; 0x4000
   11f88:	sub	r3, r3, #12
   11f8c:	mov	r1, r3
   11f90:	mov	r3, #2
   11f94:	str	r3, [sp, #8]
   11f98:	mov	r2, #0
   11f9c:	mov	r3, #0
   11fa0:	strd	r2, [sp]
   11fa4:	mov	r2, #0
   11fa8:	mov	r3, #0
   11fac:	ldr	r0, [r1, #-156]	; 0xffffff64
   11fb0:	bl	1422c <__assert_fail@plt+0x2e7c>
   11fb4:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   11fb8:	cmp	r3, #0
   11fbc:	beq	12388 <__assert_fail@plt+0xfd8>
   11fc0:	ldrb	r3, [fp, #-46]	; 0xffffffd2
   11fc4:	eor	r3, r3, #1
   11fc8:	uxtb	r3, r3
   11fcc:	cmp	r3, #0
   11fd0:	beq	12388 <__assert_fail@plt+0xfd8>
   11fd4:	ldr	r3, [pc, #3032]	; 12bb4 <__assert_fail@plt+0x1804>
   11fd8:	ldrb	r3, [r3]
   11fdc:	eor	r3, r3, #1
   11fe0:	uxtb	r3, r3
   11fe4:	cmp	r3, #0
   11fe8:	beq	12388 <__assert_fail@plt+0xfd8>
   11fec:	ldrb	r3, [fp, #-101]	; 0xffffff9b
   11ff0:	eor	r3, r3, #1
   11ff4:	uxtb	r3, r3
   11ff8:	cmp	r3, #0
   11ffc:	beq	12388 <__assert_fail@plt+0xfd8>
   12000:	mov	r3, #0
   12004:	strb	r3, [fp, #-47]	; 0xffffffd1
   12008:	sub	r3, fp, #16384	; 0x4000
   1200c:	sub	r3, r3, #12
   12010:	ldr	r3, [r3, #-164]	; 0xffffff5c
   12014:	ldr	r3, [r3]
   12018:	cmp	r3, #0
   1201c:	ble	12058 <__assert_fail@plt+0xca8>
   12020:	sub	r3, fp, #16384	; 0x4000
   12024:	sub	r3, r3, #12
   12028:	ldr	r3, [r3, #-164]	; 0xffffff5c
   1202c:	add	r2, r3, #8
   12030:	sub	r3, fp, #16384	; 0x4000
   12034:	sub	r3, r3, #12
   12038:	mov	r1, r2
   1203c:	ldr	r0, [r3, #-156]	; 0xffffff64
   12040:	bl	1ac10 <_obstack_memory_used@@Base+0x11d4>
   12044:	mov	r2, r0
   12048:	sub	r3, fp, #16384	; 0x4000
   1204c:	sub	r3, r3, #12
   12050:	ldr	r3, [r3, #-164]	; 0xffffff5c
   12054:	str	r2, [r3]
   12058:	sub	r3, fp, #16384	; 0x4000
   1205c:	sub	r3, r3, #12
   12060:	ldr	r3, [r3, #-164]	; 0xffffff5c
   12064:	ldr	r3, [r3]
   12068:	cmp	r3, #0
   1206c:	bne	12284 <__assert_fail@plt+0xed4>
   12070:	sub	r3, fp, #16384	; 0x4000
   12074:	sub	r3, r3, #12
   12078:	ldr	r3, [r3, #-164]	; 0xffffff5c
   1207c:	add	r3, r3, #8
   12080:	mov	r0, r3
   12084:	bl	116e8 <__assert_fail@plt+0x338>
   12088:	mov	r3, r0
   1208c:	cmp	r3, #0
   12090:	beq	12284 <__assert_fail@plt+0xed4>
   12094:	sub	r3, fp, #16384	; 0x4000
   12098:	sub	r3, r3, #12
   1209c:	ldr	r3, [r3, #-164]	; 0xffffff5c
   120a0:	ldrd	r2, [r3, #56]	; 0x38
   120a4:	cmp	r2, #0
   120a8:	sbcs	r3, r3, #0
   120ac:	blt	12284 <__assert_fail@plt+0xed4>
   120b0:	sub	r3, fp, #16384	; 0x4000
   120b4:	sub	r3, r3, #12
   120b8:	ldr	r3, [r3, #-164]	; 0xffffff5c
   120bc:	ldrd	r2, [r3, #56]	; 0x38
   120c0:	mov	r3, r2
   120c4:	str	r3, [fp, #-108]	; 0xffffff94
   120c8:	ldrd	r2, [fp, #4]
   120cc:	cmp	r2, #0
   120d0:	sbcs	r3, r3, #0
   120d4:	bge	12100 <__assert_fail@plt+0xd50>
   120d8:	sub	r3, fp, #16384	; 0x4000
   120dc:	sub	r3, r3, #12
   120e0:	mov	r1, r3
   120e4:	mov	r3, #1
   120e8:	str	r3, [sp]
   120ec:	mov	r2, #0
   120f0:	mov	r3, #0
   120f4:	ldr	r0, [r1, #-156]	; 0xffffff64
   120f8:	bl	111ac <lseek64@plt>
   120fc:	strd	r0, [fp, #4]
   12100:	ldr	r3, [pc, #2736]	; 12bb8 <__assert_fail@plt+0x1808>
   12104:	ldr	r2, [r3]
   12108:	ldr	r3, [fp, #-108]	; 0xffffff94
   1210c:	mov	r1, r2
   12110:	mov	r0, r3
   12114:	bl	1a3f8 <_obstack_memory_used@@Base+0x9bc>
   12118:	mov	r3, r1
   1211c:	cmp	r3, #0
   12120:	beq	12188 <__assert_fail@plt+0xdd8>
   12124:	ldr	r3, [fp, #-108]	; 0xffffff94
   12128:	mov	r0, r3
   1212c:	mov	r1, #0
   12130:	ldrd	r2, [fp, #4]
   12134:	cmp	r0, r2
   12138:	sbcs	r3, r1, r3
   1213c:	blt	12164 <__assert_fail@plt+0xdb4>
   12140:	ldr	r3, [fp, #-108]	; 0xffffff94
   12144:	mov	r0, r3
   12148:	mov	r1, #0
   1214c:	ldrd	r2, [fp, #4]
   12150:	subs	r2, r0, r2
   12154:	sbc	r3, r1, r3
   12158:	mov	r0, r2
   1215c:	mov	r1, r3
   12160:	b	1216c <__assert_fail@plt+0xdbc>
   12164:	mov	r0, #0
   12168:	mov	r1, #0
   1216c:	sub	r3, fp, #16384	; 0x4000
   12170:	sub	r3, r3, #12
   12174:	sub	r3, r3, #128	; 0x80
   12178:	strd	r0, [r3]
   1217c:	mov	r3, #1
   12180:	strb	r3, [fp, #-47]	; 0xffffffd1
   12184:	b	12284 <__assert_fail@plt+0xed4>
   12188:	sub	r3, fp, #16384	; 0x4000
   1218c:	sub	r3, r3, #12
   12190:	ldr	r3, [r3, #-164]	; 0xffffff5c
   12194:	ldr	r3, [r3, #64]	; 0x40
   12198:	cmp	r3, #0
   1219c:	ble	121d4 <__assert_fail@plt+0xe24>
   121a0:	sub	r3, fp, #16384	; 0x4000
   121a4:	sub	r3, r3, #12
   121a8:	ldr	r3, [r3, #-164]	; 0xffffff5c
   121ac:	ldr	r3, [r3, #64]	; 0x40
   121b0:	cmp	r3, #536870912	; 0x20000000
   121b4:	bhi	121d4 <__assert_fail@plt+0xe24>
   121b8:	sub	r3, fp, #16384	; 0x4000
   121bc:	sub	r3, r3, #12
   121c0:	ldr	r3, [r3, #-164]	; 0xffffff5c
   121c4:	ldr	r3, [r3, #64]	; 0x40
   121c8:	add	r3, r3, #1
   121cc:	mov	r2, r3
   121d0:	b	121d8 <__assert_fail@plt+0xe28>
   121d4:	ldr	r2, [pc, #2528]	; 12bbc <__assert_fail@plt+0x180c>
   121d8:	ldr	r3, [fp, #-108]	; 0xffffff94
   121dc:	mov	r1, r2
   121e0:	mov	r0, r3
   121e4:	bl	1a3f8 <_obstack_memory_used@@Base+0x9bc>
   121e8:	mov	r3, r1
   121ec:	mov	r2, r3
   121f0:	ldr	r3, [fp, #-108]	; 0xffffff94
   121f4:	sub	r3, r3, r2
   121f8:	mov	r2, r3
   121fc:	mov	r3, #0
   12200:	strd	r2, [fp, #-116]	; 0xffffff8c
   12204:	ldrd	r2, [fp, #4]
   12208:	cmp	r2, #0
   1220c:	sbcs	r3, r3, #0
   12210:	blt	12284 <__assert_fail@plt+0xed4>
   12214:	ldrd	r0, [fp, #4]
   12218:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   1221c:	cmp	r0, r2
   12220:	sbcs	r3, r1, r3
   12224:	bge	12284 <__assert_fail@plt+0xed4>
   12228:	sub	r3, fp, #16384	; 0x4000
   1222c:	sub	r3, r3, #12
   12230:	mov	r1, r3
   12234:	mov	r3, #1
   12238:	str	r3, [sp]
   1223c:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   12240:	ldr	r0, [r1, #-156]	; 0xffffff64
   12244:	bl	111ac <lseek64@plt>
   12248:	mov	r2, r0
   1224c:	mov	r3, r1
   12250:	cmp	r2, #0
   12254:	sbcs	r3, r3, #0
   12258:	blt	12284 <__assert_fail@plt+0xed4>
   1225c:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   12260:	ldrd	r2, [fp, #4]
   12264:	subs	r2, r0, r2
   12268:	sbc	r3, r1, r3
   1226c:	mov	r0, r2
   12270:	mov	r1, r3
   12274:	sub	r3, fp, #16384	; 0x4000
   12278:	sub	r3, r3, #12
   1227c:	sub	r3, r3, #128	; 0x80
   12280:	strd	r0, [r3]
   12284:	ldrb	r3, [fp, #-47]	; 0xffffffd1
   12288:	eor	r3, r3, #1
   1228c:	uxtb	r3, r3
   12290:	cmp	r3, #0
   12294:	beq	12d28 <__assert_fail@plt+0x1978>
   12298:	sub	r3, fp, #16384	; 0x4000
   1229c:	sub	r3, r3, #12
   122a0:	mov	r1, r3
   122a4:	mov	r3, #2
   122a8:	str	r3, [sp, #8]
   122ac:	mov	r2, #0
   122b0:	mov	r3, #0
   122b4:	strd	r2, [sp]
   122b8:	mov	r2, #0
   122bc:	mov	r3, #0
   122c0:	ldr	r0, [r1, #-156]	; 0xffffff64
   122c4:	bl	1422c <__assert_fail@plt+0x2e7c>
   122c8:	b	1234c <__assert_fail@plt+0xf9c>
   122cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   122d0:	cmn	r3, #1
   122d4:	bne	12318 <__assert_fail@plt+0xf68>
   122d8:	bl	112c0 <__errno_location@plt>
   122dc:	mov	r3, r0
   122e0:	ldr	r4, [r3]
   122e4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   122e8:	mov	r1, #3
   122ec:	mov	r0, #0
   122f0:	bl	16ed8 <__assert_fail@plt+0x5b28>
   122f4:	mov	r3, r0
   122f8:	ldr	r2, [pc, #2240]	; 12bc0 <__assert_fail@plt+0x1810>
   122fc:	mov	r1, r4
   12300:	mov	r0, #0
   12304:	bl	111e8 <error@plt>
   12308:	mov	r3, #0
   1230c:	strb	r3, [fp, #-13]
   12310:	nop			; (mov r0, r0)
   12314:	b	12d28 <__assert_fail@plt+0x1978>
   12318:	ldr	r3, [fp, #-20]	; 0xffffffec
   1231c:	mov	r0, r3
   12320:	mov	r1, #0
   12324:	sub	r3, fp, #16384	; 0x4000
   12328:	sub	r3, r3, #12
   1232c:	sub	r3, r3, #128	; 0x80
   12330:	ldrd	r2, [r3]
   12334:	adds	r0, r0, r2
   12338:	adc	r1, r1, r3
   1233c:	sub	r3, fp, #16384	; 0x4000
   12340:	sub	r3, r3, #12
   12344:	sub	r3, r3, #128	; 0x80
   12348:	strd	r0, [r3]
   1234c:	sub	r3, fp, #16384	; 0x4000
   12350:	sub	r3, r3, #12
   12354:	sub	r3, r3, #112	; 0x70
   12358:	sub	r2, fp, #16384	; 0x4000
   1235c:	sub	r2, r2, #12
   12360:	mov	r0, r2
   12364:	mov	r2, #16384	; 0x4000
   12368:	mov	r1, r3
   1236c:	ldr	r0, [r0, #-156]	; 0xffffff64
   12370:	bl	17924 <__assert_fail@plt+0x6574>
   12374:	str	r0, [fp, #-20]	; 0xffffffec
   12378:	ldr	r3, [fp, #-20]	; 0xffffffec
   1237c:	cmp	r3, #0
   12380:	bne	122cc <__assert_fail@plt+0xf1c>
   12384:	b	12d28 <__assert_fail@plt+0x1978>
   12388:	ldrb	r3, [fp, #-46]	; 0xffffffd2
   1238c:	eor	r3, r3, #1
   12390:	uxtb	r3, r3
   12394:	cmp	r3, #0
   12398:	beq	123f0 <__assert_fail@plt+0x1040>
   1239c:	ldrb	r3, [fp, #-101]	; 0xffffff9b
   123a0:	eor	r3, r3, #1
   123a4:	uxtb	r3, r3
   123a8:	cmp	r3, #0
   123ac:	beq	123f0 <__assert_fail@plt+0x1040>
   123b0:	ldr	r3, [pc, #2060]	; 12bc4 <__assert_fail@plt+0x1814>
   123b4:	ldr	r4, [r3]
   123b8:	sub	r3, fp, #16384	; 0x4000
   123bc:	sub	r3, r3, #12
   123c0:	sub	r3, r3, #128	; 0x80
   123c4:	sub	r2, fp, #16384	; 0x4000
   123c8:	sub	r2, r2, #12
   123cc:	sub	r2, r2, #120	; 0x78
   123d0:	sub	r1, fp, #16384	; 0x4000
   123d4:	sub	r1, r1, #12
   123d8:	ldr	r1, [r1, #-156]	; 0xffffff64
   123dc:	ldr	r0, [fp, #-100]	; 0xffffff9c
   123e0:	blx	r4
   123e4:	mov	r3, r0
   123e8:	strb	r3, [fp, #-13]
   123ec:	b	12d2c <__assert_fail@plt+0x197c>
   123f0:	bl	111b8 <__ctype_get_mb_cur_max@plt>
   123f4:	mov	r3, r0
   123f8:	cmp	r3, #1
   123fc:	bls	129d4 <__assert_fail@plt+0x1624>
   12400:	mov	r3, #0
   12404:	strb	r3, [fp, #-48]	; 0xffffffd0
   12408:	mov	r2, #0
   1240c:	mov	r3, #0
   12410:	strd	r2, [fp, #-60]	; 0xffffffc4
   12414:	sub	r3, fp, #16384	; 0x4000
   12418:	sub	r3, r3, #12
   1241c:	sub	r3, r3, #136	; 0x88
   12420:	mov	r2, #0
   12424:	str	r2, [r3]
   12428:	str	r2, [r3, #4]
   1242c:	mov	r3, #0
   12430:	strb	r3, [fp, #-61]	; 0xffffffc3
   12434:	mov	r3, #0
   12438:	str	r3, [fp, #-68]	; 0xffffffbc
   1243c:	b	12960 <__assert_fail@plt+0x15b0>
   12440:	ldr	r3, [fp, #-20]	; 0xffffffec
   12444:	cmn	r3, #1
   12448:	bne	12488 <__assert_fail@plt+0x10d8>
   1244c:	bl	112c0 <__errno_location@plt>
   12450:	mov	r3, r0
   12454:	ldr	r4, [r3]
   12458:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1245c:	mov	r1, #3
   12460:	mov	r0, #0
   12464:	bl	16ed8 <__assert_fail@plt+0x5b28>
   12468:	mov	r3, r0
   1246c:	ldr	r2, [pc, #1868]	; 12bc0 <__assert_fail@plt+0x1810>
   12470:	mov	r1, r4
   12474:	mov	r0, #0
   12478:	bl	111e8 <error@plt>
   1247c:	mov	r3, #0
   12480:	strb	r3, [fp, #-13]
   12484:	b	1299c <__assert_fail@plt+0x15ec>
   12488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1248c:	mov	r0, r3
   12490:	mov	r1, #0
   12494:	sub	r3, fp, #16384	; 0x4000
   12498:	sub	r3, r3, #12
   1249c:	sub	r3, r3, #128	; 0x80
   124a0:	ldrd	r2, [r3]
   124a4:	adds	r0, r0, r2
   124a8:	adc	r1, r1, r3
   124ac:	sub	r3, fp, #16384	; 0x4000
   124b0:	sub	r3, r3, #12
   124b4:	sub	r3, r3, #128	; 0x80
   124b8:	strd	r0, [r3]
   124bc:	sub	r3, fp, #16384	; 0x4000
   124c0:	sub	r3, r3, #12
   124c4:	sub	r3, r3, #112	; 0x70
   124c8:	str	r3, [fp, #-72]	; 0xffffffb8
   124cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   124d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   124d4:	add	r3, r2, r3
   124d8:	str	r3, [fp, #-20]	; 0xffffffec
   124dc:	mov	r3, #1
   124e0:	strb	r3, [fp, #-77]	; 0xffffffb3
   124e4:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   124e8:	eor	r3, r3, #1
   124ec:	uxtb	r3, r3
   124f0:	cmp	r3, #0
   124f4:	beq	12540 <__assert_fail@plt+0x1190>
   124f8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   124fc:	ldrb	r3, [r3]
   12500:	mov	r0, r3
   12504:	bl	14780 <__assert_fail@plt+0x33d0>
   12508:	mov	r3, r0
   1250c:	cmp	r3, #0
   12510:	beq	12540 <__assert_fail@plt+0x1190>
   12514:	mov	r3, #1
   12518:	str	r3, [fp, #-76]	; 0xffffffb4
   1251c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12520:	ldrb	r3, [r3]
   12524:	mov	r2, r3
   12528:	sub	r3, fp, #16384	; 0x4000
   1252c:	sub	r3, r3, #12
   12530:	str	r2, [r3, #-148]	; 0xffffff6c
   12534:	mov	r3, #0
   12538:	strb	r3, [fp, #-77]	; 0xffffffb3
   1253c:	b	12638 <__assert_fail@plt+0x1288>
   12540:	mov	r3, #1
   12544:	strb	r3, [fp, #-61]	; 0xffffffc3
   12548:	sub	r3, fp, #16384	; 0x4000
   1254c:	sub	r3, r3, #12
   12550:	sub	r2, fp, #16384	; 0x4000
   12554:	sub	r2, r2, #12
   12558:	sub	r3, r3, #144	; 0x90
   1255c:	sub	r2, r2, #136	; 0x88
   12560:	ldm	r2, {r0, r1}
   12564:	stm	r3, {r0, r1}
   12568:	sub	r3, fp, #16384	; 0x4000
   1256c:	sub	r3, r3, #12
   12570:	sub	r3, r3, #136	; 0x88
   12574:	sub	r0, fp, #16384	; 0x4000
   12578:	sub	r0, r0, #12
   1257c:	sub	r0, r0, #148	; 0x94
   12580:	ldr	r2, [fp, #-20]	; 0xffffffec
   12584:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12588:	bl	147e0 <__assert_fail@plt+0x3430>
   1258c:	str	r0, [fp, #-76]	; 0xffffffb4
   12590:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12594:	cmn	r3, #2
   12598:	bne	125c0 <__assert_fail@plt+0x1210>
   1259c:	sub	r3, fp, #16384	; 0x4000
   125a0:	sub	r3, r3, #12
   125a4:	sub	r2, fp, #16384	; 0x4000
   125a8:	sub	r2, r2, #12
   125ac:	sub	r3, r3, #136	; 0x88
   125b0:	sub	r2, r2, #144	; 0x90
   125b4:	ldm	r2, {r0, r1}
   125b8:	stm	r3, {r0, r1}
   125bc:	b	1290c <__assert_fail@plt+0x155c>
   125c0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   125c4:	cmn	r3, #1
   125c8:	bne	125e8 <__assert_fail@plt+0x1238>
   125cc:	ldr	r3, [fp, #-72]	; 0xffffffb8
   125d0:	add	r3, r3, #1
   125d4:	str	r3, [fp, #-72]	; 0xffffffb8
   125d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   125dc:	sub	r3, r3, #1
   125e0:	str	r3, [fp, #-20]	; 0xffffffec
   125e4:	b	12900 <__assert_fail@plt+0x1550>
   125e8:	sub	r3, fp, #16384	; 0x4000
   125ec:	sub	r3, r3, #12
   125f0:	sub	r3, r3, #136	; 0x88
   125f4:	mov	r0, r3
   125f8:	bl	11128 <mbsinit@plt>
   125fc:	mov	r3, r0
   12600:	cmp	r3, #0
   12604:	beq	12610 <__assert_fail@plt+0x1260>
   12608:	mov	r3, #0
   1260c:	strb	r3, [fp, #-61]	; 0xffffffc3
   12610:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12614:	cmp	r3, #0
   12618:	bne	12638 <__assert_fail@plt+0x1288>
   1261c:	sub	r3, fp, #16384	; 0x4000
   12620:	sub	r3, r3, #12
   12624:	mov	r2, r3
   12628:	mov	r3, #0
   1262c:	str	r3, [r2, #-148]	; 0xffffff6c
   12630:	mov	r3, #1
   12634:	str	r3, [fp, #-76]	; 0xffffffb4
   12638:	sub	r3, fp, #16384	; 0x4000
   1263c:	sub	r3, r3, #12
   12640:	ldr	r3, [r3, #-148]	; 0xffffff6c
   12644:	sub	r3, r3, #9
   12648:	cmp	r3, #23
   1264c:	ldrls	pc, [pc, r3, lsl #2]
   12650:	b	12768 <__assert_fail@plt+0x13b8>
   12654:	andeq	r2, r1, r8, lsl #14
   12658:			; <UNDEFINED> instruction: 0x000126b4
   1265c:	andeq	r2, r1, r4, asr #14
   12660:	ldrdeq	r2, [r1], -ip
   12664:	ldrdeq	r2, [r1], -ip
   12668:	andeq	r2, r1, r8, ror #14
   1266c:	andeq	r2, r1, r8, ror #14
   12670:	andeq	r2, r1, r8, ror #14
   12674:	andeq	r2, r1, r8, ror #14
   12678:	andeq	r2, r1, r8, ror #14
   1267c:	andeq	r2, r1, r8, ror #14
   12680:	andeq	r2, r1, r8, ror #14
   12684:	andeq	r2, r1, r8, ror #14
   12688:	andeq	r2, r1, r8, ror #14
   1268c:	andeq	r2, r1, r8, ror #14
   12690:	andeq	r2, r1, r8, ror #14
   12694:	andeq	r2, r1, r8, ror #14
   12698:	andeq	r2, r1, r8, ror #14
   1269c:	andeq	r2, r1, r8, ror #14
   126a0:	andeq	r2, r1, r8, ror #14
   126a4:	andeq	r2, r1, r8, ror #14
   126a8:	andeq	r2, r1, r8, ror #14
   126ac:	andeq	r2, r1, r8, ror #14
   126b0:	andeq	r2, r1, ip, lsr #14
   126b4:	sub	r3, fp, #16384	; 0x4000
   126b8:	sub	r3, r3, #12
   126bc:	sub	r3, r3, #112	; 0x70
   126c0:	ldrd	r2, [r3, #-8]
   126c4:	adds	r0, r2, #1
   126c8:	adc	r1, r3, #0
   126cc:	sub	r3, fp, #16384	; 0x4000
   126d0:	sub	r3, r3, #12
   126d4:	sub	r3, r3, #112	; 0x70
   126d8:	strd	r0, [r3, #-8]
   126dc:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   126e0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   126e4:	cmp	r1, r3
   126e8:	cmpeq	r0, r2
   126ec:	bls	126f8 <__assert_fail@plt+0x1348>
   126f0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   126f4:	strd	r2, [fp, #-44]	; 0xffffffd4
   126f8:	mov	r2, #0
   126fc:	mov	r3, #0
   12700:	strd	r2, [fp, #-60]	; 0xffffffc4
   12704:	b	12744 <__assert_fail@plt+0x1394>
   12708:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   1270c:	mvn	r0, #7
   12710:	mvn	r1, #0
   12714:	and	r2, r2, r0
   12718:	and	r3, r3, r1
   1271c:	adds	r2, r2, #8
   12720:	adc	r3, r3, #0
   12724:	strd	r2, [fp, #-60]	; 0xffffffc4
   12728:	b	12744 <__assert_fail@plt+0x1394>
   1272c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   12730:	adds	r2, r2, #1
   12734:	adc	r3, r3, #0
   12738:	strd	r2, [fp, #-60]	; 0xffffffc4
   1273c:	b	12744 <__assert_fail@plt+0x1394>
   12740:	nop			; (mov r0, r0)
   12744:	ldrb	r2, [fp, #-48]	; 0xffffffd0
   12748:	mov	r3, #0
   1274c:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   12750:	adds	r2, r2, r0
   12754:	adc	r3, r3, r1
   12758:	strd	r2, [fp, #-28]	; 0xffffffe4
   1275c:	mov	r3, #0
   12760:	strb	r3, [fp, #-48]	; 0xffffffd0
   12764:	b	128d0 <__assert_fail@plt+0x1520>
   12768:	ldrb	r3, [fp, #-77]	; 0xffffffb3
   1276c:	cmp	r3, #0
   12770:	beq	12830 <__assert_fail@plt+0x1480>
   12774:	sub	r3, fp, #16384	; 0x4000
   12778:	sub	r3, r3, #12
   1277c:	ldr	r3, [r3, #-148]	; 0xffffff6c
   12780:	mov	r0, r3
   12784:	bl	11188 <iswprint@plt>
   12788:	mov	r3, r0
   1278c:	cmp	r3, #0
   12790:	beq	12830 <__assert_fail@plt+0x1480>
   12794:	ldr	r3, [pc, #1044]	; 12bb0 <__assert_fail@plt+0x1800>
   12798:	ldrb	r3, [r3]
   1279c:	cmp	r3, #0
   127a0:	beq	127e4 <__assert_fail@plt+0x1434>
   127a4:	sub	r3, fp, #16384	; 0x4000
   127a8:	sub	r3, r3, #12
   127ac:	ldr	r3, [r3, #-148]	; 0xffffff6c
   127b0:	mov	r0, r3
   127b4:	bl	110e0 <wcwidth@plt>
   127b8:	str	r0, [fp, #-120]	; 0xffffff88
   127bc:	ldr	r3, [fp, #-120]	; 0xffffff88
   127c0:	cmp	r3, #0
   127c4:	ble	127e4 <__assert_fail@plt+0x1434>
   127c8:	ldr	r3, [fp, #-120]	; 0xffffff88
   127cc:	mov	r2, r3
   127d0:	asr	r3, r2, #31
   127d4:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   127d8:	adds	r2, r2, r0
   127dc:	adc	r3, r3, r1
   127e0:	strd	r2, [fp, #-60]	; 0xffffffc4
   127e4:	sub	r3, fp, #16384	; 0x4000
   127e8:	sub	r3, r3, #12
   127ec:	ldr	r3, [r3, #-148]	; 0xffffff6c
   127f0:	mov	r0, r3
   127f4:	bl	11278 <iswspace@plt>
   127f8:	mov	r3, r0
   127fc:	cmp	r3, #0
   12800:	bne	12744 <__assert_fail@plt+0x1394>
   12804:	sub	r3, fp, #16384	; 0x4000
   12808:	sub	r3, r3, #12
   1280c:	ldr	r3, [r3, #-148]	; 0xffffff6c
   12810:	mov	r0, r3
   12814:	bl	1188c <__assert_fail@plt+0x4dc>
   12818:	mov	r3, r0
   1281c:	cmp	r3, #0
   12820:	bne	12744 <__assert_fail@plt+0x1394>
   12824:	mov	r3, #1
   12828:	strb	r3, [fp, #-48]	; 0xffffffd0
   1282c:	b	128cc <__assert_fail@plt+0x151c>
   12830:	ldrb	r3, [fp, #-77]	; 0xffffffb3
   12834:	eor	r3, r3, #1
   12838:	uxtb	r3, r3
   1283c:	cmp	r3, #0
   12840:	beq	128cc <__assert_fail@plt+0x151c>
   12844:	bl	11254 <__ctype_b_loc@plt>
   12848:	mov	r3, r0
   1284c:	ldr	r4, [r3]
   12850:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12854:	ldrb	r3, [r3]
   12858:	mov	r0, r3
   1285c:	bl	114e8 <__assert_fail@plt+0x138>
   12860:	mov	r3, r0
   12864:	lsl	r3, r3, #1
   12868:	add	r3, r4, r3
   1286c:	ldrh	r3, [r3]
   12870:	and	r3, r3, #16384	; 0x4000
   12874:	cmp	r3, #0
   12878:	beq	128cc <__assert_fail@plt+0x151c>
   1287c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   12880:	adds	r2, r2, #1
   12884:	adc	r3, r3, #0
   12888:	strd	r2, [fp, #-60]	; 0xffffffc4
   1288c:	bl	11254 <__ctype_b_loc@plt>
   12890:	mov	r3, r0
   12894:	ldr	r4, [r3]
   12898:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1289c:	ldrb	r3, [r3]
   128a0:	mov	r0, r3
   128a4:	bl	114e8 <__assert_fail@plt+0x138>
   128a8:	mov	r3, r0
   128ac:	lsl	r3, r3, #1
   128b0:	add	r3, r4, r3
   128b4:	ldrh	r3, [r3]
   128b8:	and	r3, r3, #8192	; 0x2000
   128bc:	cmp	r3, #0
   128c0:	bne	12740 <__assert_fail@plt+0x1390>
   128c4:	mov	r3, #1
   128c8:	strb	r3, [fp, #-48]	; 0xffffffd0
   128cc:	nop			; (mov r0, r0)
   128d0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   128d4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   128d8:	add	r3, r2, r3
   128dc:	str	r3, [fp, #-72]	; 0xffffffb8
   128e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   128e4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   128e8:	sub	r3, r2, r3
   128ec:	str	r3, [fp, #-20]	; 0xffffffec
   128f0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   128f4:	adds	r2, r2, #1
   128f8:	adc	r3, r3, #0
   128fc:	strd	r2, [fp, #-36]	; 0xffffffdc
   12900:	ldr	r3, [fp, #-20]	; 0xffffffec
   12904:	cmp	r3, #0
   12908:	bne	124dc <__assert_fail@plt+0x112c>
   1290c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12910:	cmp	r3, #0
   12914:	beq	12958 <__assert_fail@plt+0x15a8>
   12918:	ldr	r3, [fp, #-20]	; 0xffffffec
   1291c:	cmp	r3, #16384	; 0x4000
   12920:	bne	1293c <__assert_fail@plt+0x158c>
   12924:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12928:	add	r3, r3, #1
   1292c:	str	r3, [fp, #-72]	; 0xffffffb8
   12930:	ldr	r3, [fp, #-20]	; 0xffffffec
   12934:	sub	r3, r3, #1
   12938:	str	r3, [fp, #-20]	; 0xffffffec
   1293c:	sub	r3, fp, #16384	; 0x4000
   12940:	sub	r3, r3, #12
   12944:	sub	r3, r3, #112	; 0x70
   12948:	ldr	r2, [fp, #-20]	; 0xffffffec
   1294c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12950:	mov	r0, r3
   12954:	bl	110ec <memmove@plt>
   12958:	ldr	r3, [fp, #-20]	; 0xffffffec
   1295c:	str	r3, [fp, #-68]	; 0xffffffbc
   12960:	sub	r3, fp, #16384	; 0x4000
   12964:	sub	r3, r3, #12
   12968:	sub	r3, r3, #112	; 0x70
   1296c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12970:	add	r1, r3, r2
   12974:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12978:	rsb	r2, r3, #16384	; 0x4000
   1297c:	sub	r3, fp, #16384	; 0x4000
   12980:	sub	r3, r3, #12
   12984:	ldr	r0, [r3, #-156]	; 0xffffff64
   12988:	bl	17924 <__assert_fail@plt+0x6574>
   1298c:	str	r0, [fp, #-20]	; 0xffffffec
   12990:	ldr	r3, [fp, #-20]	; 0xffffffec
   12994:	cmp	r3, #0
   12998:	bne	12440 <__assert_fail@plt+0x1090>
   1299c:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   129a0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   129a4:	cmp	r1, r3
   129a8:	cmpeq	r0, r2
   129ac:	bls	129b8 <__assert_fail@plt+0x1608>
   129b0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   129b4:	strd	r2, [fp, #-44]	; 0xffffffd4
   129b8:	ldrb	r2, [fp, #-48]	; 0xffffffd0
   129bc:	mov	r3, #0
   129c0:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   129c4:	adds	r2, r2, r0
   129c8:	adc	r3, r3, r1
   129cc:	strd	r2, [fp, #-28]	; 0xffffffe4
   129d0:	b	12d2c <__assert_fail@plt+0x197c>
   129d4:	mov	r3, #0
   129d8:	strb	r3, [fp, #-78]	; 0xffffffb2
   129dc:	mov	r2, #0
   129e0:	mov	r3, #0
   129e4:	strd	r2, [fp, #-92]	; 0xffffffa4
   129e8:	b	12cb8 <__assert_fail@plt+0x1908>
   129ec:	sub	r3, fp, #16384	; 0x4000
   129f0:	sub	r3, r3, #12
   129f4:	sub	r3, r3, #112	; 0x70
   129f8:	str	r3, [fp, #-96]	; 0xffffffa0
   129fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a00:	cmn	r3, #1
   12a04:	bne	12a44 <__assert_fail@plt+0x1694>
   12a08:	bl	112c0 <__errno_location@plt>
   12a0c:	mov	r3, r0
   12a10:	ldr	r4, [r3]
   12a14:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12a18:	mov	r1, #3
   12a1c:	mov	r0, #0
   12a20:	bl	16ed8 <__assert_fail@plt+0x5b28>
   12a24:	mov	r3, r0
   12a28:	ldr	r2, [pc, #400]	; 12bc0 <__assert_fail@plt+0x1810>
   12a2c:	mov	r1, r4
   12a30:	mov	r0, #0
   12a34:	bl	111e8 <error@plt>
   12a38:	mov	r3, #0
   12a3c:	strb	r3, [fp, #-13]
   12a40:	b	12cf0 <__assert_fail@plt+0x1940>
   12a44:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a48:	mov	r0, r3
   12a4c:	mov	r1, #0
   12a50:	sub	r3, fp, #16384	; 0x4000
   12a54:	sub	r3, r3, #12
   12a58:	sub	r3, r3, #128	; 0x80
   12a5c:	ldrd	r2, [r3]
   12a60:	adds	r0, r0, r2
   12a64:	adc	r1, r1, r3
   12a68:	sub	r3, fp, #16384	; 0x4000
   12a6c:	sub	r3, r3, #12
   12a70:	sub	r3, r3, #128	; 0x80
   12a74:	strd	r0, [r3]
   12a78:	ldr	r3, [fp, #-96]	; 0xffffffa0
   12a7c:	add	r2, r3, #1
   12a80:	str	r2, [fp, #-96]	; 0xffffffa0
   12a84:	ldrb	r3, [r3]
   12a88:	sub	r3, r3, #9
   12a8c:	cmp	r3, #23
   12a90:	ldrls	pc, [pc, r3, lsl #2]
   12a94:	b	12be0 <__assert_fail@plt+0x1830>
   12a98:	andeq	r2, r1, ip, asr #22
   12a9c:	strdeq	r2, [r1], -r8
   12aa0:	andeq	r2, r1, r0, lsl #23
   12aa4:	andeq	r2, r1, r0, lsr #22
   12aa8:	andeq	r2, r1, r0, lsr #22
   12aac:	andeq	r2, r1, r0, ror #23
   12ab0:	andeq	r2, r1, r0, ror #23
   12ab4:	andeq	r2, r1, r0, ror #23
   12ab8:	andeq	r2, r1, r0, ror #23
   12abc:	andeq	r2, r1, r0, ror #23
   12ac0:	andeq	r2, r1, r0, ror #23
   12ac4:	andeq	r2, r1, r0, ror #23
   12ac8:	andeq	r2, r1, r0, ror #23
   12acc:	andeq	r2, r1, r0, ror #23
   12ad0:	andeq	r2, r1, r0, ror #23
   12ad4:	andeq	r2, r1, r0, ror #23
   12ad8:	andeq	r2, r1, r0, ror #23
   12adc:	andeq	r2, r1, r0, ror #23
   12ae0:	andeq	r2, r1, r0, ror #23
   12ae4:	andeq	r2, r1, r0, ror #23
   12ae8:	andeq	r2, r1, r0, ror #23
   12aec:	andeq	r2, r1, r0, ror #23
   12af0:	andeq	r2, r1, r0, ror #23
   12af4:	andeq	r2, r1, r0, ror fp
   12af8:	sub	r3, fp, #16384	; 0x4000
   12afc:	sub	r3, r3, #12
   12b00:	sub	r3, r3, #112	; 0x70
   12b04:	ldrd	r2, [r3, #-8]
   12b08:	adds	r0, r2, #1
   12b0c:	adc	r1, r3, #0
   12b10:	sub	r3, fp, #16384	; 0x4000
   12b14:	sub	r3, r3, #12
   12b18:	sub	r3, r3, #112	; 0x70
   12b1c:	strd	r0, [r3, #-8]
   12b20:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   12b24:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12b28:	cmp	r1, r3
   12b2c:	cmpeq	r0, r2
   12b30:	bls	12b3c <__assert_fail@plt+0x178c>
   12b34:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   12b38:	strd	r2, [fp, #-44]	; 0xffffffd4
   12b3c:	mov	r2, #0
   12b40:	mov	r3, #0
   12b44:	strd	r2, [fp, #-92]	; 0xffffffa4
   12b48:	b	12b80 <__assert_fail@plt+0x17d0>
   12b4c:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   12b50:	mvn	r0, #7
   12b54:	mvn	r1, #0
   12b58:	and	r2, r2, r0
   12b5c:	and	r3, r3, r1
   12b60:	adds	r2, r2, #8
   12b64:	adc	r3, r3, #0
   12b68:	strd	r2, [fp, #-92]	; 0xffffffa4
   12b6c:	b	12b80 <__assert_fail@plt+0x17d0>
   12b70:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   12b74:	adds	r2, r2, #1
   12b78:	adc	r3, r3, #0
   12b7c:	strd	r2, [fp, #-92]	; 0xffffffa4
   12b80:	ldrb	r2, [fp, #-78]	; 0xffffffb2
   12b84:	mov	r3, #0
   12b88:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   12b8c:	adds	r2, r2, r0
   12b90:	adc	r3, r3, r1
   12b94:	strd	r2, [fp, #-28]	; 0xffffffe4
   12b98:	mov	r3, #0
   12b9c:	strb	r3, [fp, #-78]	; 0xffffffb2
   12ba0:	b	12ca0 <__assert_fail@plt+0x18f0>
   12ba4:	andeq	fp, r1, ip, lsl #6
   12ba8:	ldrdeq	ip, [r2], -fp
   12bac:	ldrdeq	ip, [r2], -r9
   12bb0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12bb4:	ldrdeq	ip, [r2], -r8
   12bb8:	andeq	ip, r2, r8, ror #3
   12bbc:	andeq	r0, r0, r1, lsl #4
   12bc0:	andeq	fp, r1, r8, lsl #6
   12bc4:	andeq	ip, r2, ip, lsr #2
   12bc8:	ldrdeq	ip, [r2], -sl
   12bcc:			; <UNDEFINED> instruction: 0x0002c1b0
   12bd0:			; <UNDEFINED> instruction: 0x0002c1b8
   12bd4:	andeq	ip, r2, r0, asr #3
   12bd8:	andeq	ip, r2, r8, asr #3
   12bdc:	ldrdeq	ip, [r2], -r0
   12be0:	bl	11254 <__ctype_b_loc@plt>
   12be4:	mov	r3, r0
   12be8:	ldr	r4, [r3]
   12bec:	ldr	r3, [fp, #-96]	; 0xffffffa0
   12bf0:	sub	r3, r3, #1
   12bf4:	ldrb	r3, [r3]
   12bf8:	mov	r0, r3
   12bfc:	bl	114e8 <__assert_fail@plt+0x138>
   12c00:	mov	r3, r0
   12c04:	lsl	r3, r3, #1
   12c08:	add	r3, r4, r3
   12c0c:	ldrh	r3, [r3]
   12c10:	and	r3, r3, #16384	; 0x4000
   12c14:	cmp	r3, #0
   12c18:	beq	12c9c <__assert_fail@plt+0x18ec>
   12c1c:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   12c20:	adds	r2, r2, #1
   12c24:	adc	r3, r3, #0
   12c28:	strd	r2, [fp, #-92]	; 0xffffffa4
   12c2c:	bl	11254 <__ctype_b_loc@plt>
   12c30:	mov	r3, r0
   12c34:	ldr	r4, [r3]
   12c38:	ldr	r3, [fp, #-96]	; 0xffffffa0
   12c3c:	sub	r3, r3, #1
   12c40:	ldrb	r3, [r3]
   12c44:	mov	r0, r3
   12c48:	bl	114e8 <__assert_fail@plt+0x138>
   12c4c:	mov	r3, r0
   12c50:	lsl	r3, r3, #1
   12c54:	add	r3, r4, r3
   12c58:	ldrh	r3, [r3]
   12c5c:	and	r3, r3, #8192	; 0x2000
   12c60:	cmp	r3, #0
   12c64:	bne	12b80 <__assert_fail@plt+0x17d0>
   12c68:	ldr	r3, [fp, #-96]	; 0xffffffa0
   12c6c:	sub	r3, r3, #1
   12c70:	ldrb	r3, [r3]
   12c74:	mov	r0, r3
   12c78:	bl	114e8 <__assert_fail@plt+0x138>
   12c7c:	mov	r3, r0
   12c80:	mov	r0, r3
   12c84:	bl	1191c <__assert_fail@plt+0x56c>
   12c88:	mov	r3, r0
   12c8c:	cmp	r3, #0
   12c90:	bne	12b80 <__assert_fail@plt+0x17d0>
   12c94:	mov	r3, #1
   12c98:	strb	r3, [fp, #-78]	; 0xffffffb2
   12c9c:	nop			; (mov r0, r0)
   12ca0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ca4:	sub	r3, r3, #1
   12ca8:	str	r3, [fp, #-20]	; 0xffffffec
   12cac:	ldr	r3, [fp, #-20]	; 0xffffffec
   12cb0:	cmp	r3, #0
   12cb4:	bne	12a78 <__assert_fail@plt+0x16c8>
   12cb8:	sub	r3, fp, #16384	; 0x4000
   12cbc:	sub	r3, r3, #12
   12cc0:	sub	r3, r3, #112	; 0x70
   12cc4:	sub	r2, fp, #16384	; 0x4000
   12cc8:	sub	r2, r2, #12
   12ccc:	mov	r0, r2
   12cd0:	mov	r2, #16384	; 0x4000
   12cd4:	mov	r1, r3
   12cd8:	ldr	r0, [r0, #-156]	; 0xffffff64
   12cdc:	bl	17924 <__assert_fail@plt+0x6574>
   12ce0:	str	r0, [fp, #-20]	; 0xffffffec
   12ce4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ce8:	cmp	r3, #0
   12cec:	bne	129ec <__assert_fail@plt+0x163c>
   12cf0:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   12cf4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12cf8:	cmp	r1, r3
   12cfc:	cmpeq	r0, r2
   12d00:	bls	12d0c <__assert_fail@plt+0x195c>
   12d04:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   12d08:	strd	r2, [fp, #-44]	; 0xffffffd4
   12d0c:	ldrb	r2, [fp, #-78]	; 0xffffffb2
   12d10:	mov	r3, #0
   12d14:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   12d18:	adds	r2, r2, r0
   12d1c:	adc	r3, r3, r1
   12d20:	strd	r2, [fp, #-28]	; 0xffffffe4
   12d24:	b	12d2c <__assert_fail@plt+0x197c>
   12d28:	nop			; (mov r0, r0)
   12d2c:	ldrb	r3, [fp, #-46]	; 0xffffffd2
   12d30:	ldr	r2, [pc, #-368]	; 12bc8 <__assert_fail@plt+0x1818>
   12d34:	ldrb	r2, [r2]
   12d38:	cmp	r3, r2
   12d3c:	bge	12d54 <__assert_fail@plt+0x19a4>
   12d40:	sub	r3, fp, #16384	; 0x4000
   12d44:	sub	r3, r3, #12
   12d48:	sub	r3, r3, #128	; 0x80
   12d4c:	ldrd	r2, [r3]
   12d50:	strd	r2, [fp, #-36]	; 0xffffffdc
   12d54:	sub	r3, fp, #16384	; 0x4000
   12d58:	sub	r3, r3, #12
   12d5c:	sub	r3, r3, #112	; 0x70
   12d60:	ldrd	r4, [r3, #-8]
   12d64:	sub	r3, fp, #16384	; 0x4000
   12d68:	sub	r3, r3, #12
   12d6c:	sub	r3, r3, #128	; 0x80
   12d70:	ldrd	r2, [r3]
   12d74:	sub	r1, fp, #16384	; 0x4000
   12d78:	sub	r1, r1, #12
   12d7c:	ldr	r1, [r1, #-160]	; 0xffffff60
   12d80:	str	r1, [sp, #24]
   12d84:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   12d88:	strd	r0, [sp, #16]
   12d8c:	strd	r2, [sp, #8]
   12d90:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12d94:	strd	r2, [sp]
   12d98:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12d9c:	mov	r0, r4
   12da0:	mov	r1, r5
   12da4:	bl	11950 <__assert_fail@plt+0x5a0>
   12da8:	ldr	r3, [pc, #-484]	; 12bcc <__assert_fail@plt+0x181c>
   12dac:	ldrd	r0, [r3]
   12db0:	sub	r3, fp, #16384	; 0x4000
   12db4:	sub	r3, r3, #12
   12db8:	sub	r3, r3, #112	; 0x70
   12dbc:	ldrd	r2, [r3, #-8]
   12dc0:	adds	r2, r2, r0
   12dc4:	adc	r3, r3, r1
   12dc8:	ldr	r1, [pc, #-516]	; 12bcc <__assert_fail@plt+0x181c>
   12dcc:	strd	r2, [r1]
   12dd0:	ldr	r3, [pc, #-520]	; 12bd0 <__assert_fail@plt+0x1820>
   12dd4:	ldrd	r0, [r3]
   12dd8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12ddc:	adds	r2, r2, r0
   12de0:	adc	r3, r3, r1
   12de4:	ldr	r1, [pc, #-540]	; 12bd0 <__assert_fail@plt+0x1820>
   12de8:	strd	r2, [r1]
   12dec:	ldr	r3, [pc, #-544]	; 12bd4 <__assert_fail@plt+0x1824>
   12df0:	ldrd	r0, [r3]
   12df4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12df8:	adds	r2, r2, r0
   12dfc:	adc	r3, r3, r1
   12e00:	ldr	r1, [pc, #-564]	; 12bd4 <__assert_fail@plt+0x1824>
   12e04:	strd	r2, [r1]
   12e08:	ldr	r3, [pc, #-568]	; 12bd8 <__assert_fail@plt+0x1828>
   12e0c:	ldrd	r0, [r3]
   12e10:	sub	r3, fp, #16384	; 0x4000
   12e14:	sub	r3, r3, #12
   12e18:	sub	r3, r3, #128	; 0x80
   12e1c:	ldrd	r2, [r3]
   12e20:	adds	r2, r2, r0
   12e24:	adc	r3, r3, r1
   12e28:	ldr	r1, [pc, #-600]	; 12bd8 <__assert_fail@plt+0x1828>
   12e2c:	strd	r2, [r1]
   12e30:	ldr	r3, [pc, #-604]	; 12bdc <__assert_fail@plt+0x182c>
   12e34:	ldrd	r2, [r3]
   12e38:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   12e3c:	cmp	r1, r3
   12e40:	cmpeq	r0, r2
   12e44:	bls	12e54 <__assert_fail@plt+0x1aa4>
   12e48:	ldr	r1, [pc, #-628]	; 12bdc <__assert_fail@plt+0x182c>
   12e4c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12e50:	strd	r2, [r1]
   12e54:	ldrb	r3, [fp, #-13]
   12e58:	mov	r0, r3
   12e5c:	sub	sp, fp, #12
   12e60:	pop	{r4, r5, fp, pc}
   12e64:	push	{r4, fp, lr}
   12e68:	add	fp, sp, #8
   12e6c:	sub	sp, sp, #28
   12e70:	str	r0, [fp, #-24]	; 0xffffffe8
   12e74:	str	r1, [fp, #-28]	; 0xffffffe4
   12e78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e7c:	cmp	r3, #0
   12e80:	beq	12e9c <__assert_fail@plt+0x1aec>
   12e84:	ldr	r1, [pc, #288]	; 12fac <__assert_fail@plt+0x1bfc>
   12e88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12e8c:	bl	110a4 <strcmp@plt>
   12e90:	mov	r3, r0
   12e94:	cmp	r3, #0
   12e98:	bne	12ed8 <__assert_fail@plt+0x1b28>
   12e9c:	ldr	r3, [pc, #268]	; 12fb0 <__assert_fail@plt+0x1c00>
   12ea0:	mov	r2, #1
   12ea4:	strb	r2, [r3]
   12ea8:	mov	r1, #0
   12eac:	mov	r0, #0
   12eb0:	bl	18d24 <__assert_fail@plt+0x7974>
   12eb4:	mvn	r2, #0
   12eb8:	mvn	r3, #0
   12ebc:	strd	r2, [sp]
   12ec0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12ec4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12ec8:	mov	r0, #0
   12ecc:	bl	11dd4 <__assert_fail@plt+0xa24>
   12ed0:	mov	r3, r0
   12ed4:	b	12fa0 <__assert_fail@plt+0x1bf0>
   12ed8:	mov	r1, #0
   12edc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12ee0:	bl	111f4 <open64@plt>
   12ee4:	str	r0, [fp, #-16]
   12ee8:	ldr	r3, [fp, #-16]
   12eec:	cmn	r3, #1
   12ef0:	bne	12f2c <__assert_fail@plt+0x1b7c>
   12ef4:	bl	112c0 <__errno_location@plt>
   12ef8:	mov	r3, r0
   12efc:	ldr	r4, [r3]
   12f00:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12f04:	mov	r1, #3
   12f08:	mov	r0, #0
   12f0c:	bl	16ed8 <__assert_fail@plt+0x5b28>
   12f10:	mov	r3, r0
   12f14:	ldr	r2, [pc, #152]	; 12fb4 <__assert_fail@plt+0x1c04>
   12f18:	mov	r1, r4
   12f1c:	mov	r0, #0
   12f20:	bl	111e8 <error@plt>
   12f24:	mov	r3, #0
   12f28:	b	12fa0 <__assert_fail@plt+0x1bf0>
   12f2c:	mov	r2, #0
   12f30:	mov	r3, #0
   12f34:	strd	r2, [sp]
   12f38:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12f3c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12f40:	ldr	r0, [fp, #-16]
   12f44:	bl	11dd4 <__assert_fail@plt+0xa24>
   12f48:	mov	r3, r0
   12f4c:	strb	r3, [fp, #-17]	; 0xffffffef
   12f50:	ldr	r0, [fp, #-16]
   12f54:	bl	11398 <close@plt>
   12f58:	mov	r3, r0
   12f5c:	cmp	r3, #0
   12f60:	beq	12f9c <__assert_fail@plt+0x1bec>
   12f64:	bl	112c0 <__errno_location@plt>
   12f68:	mov	r3, r0
   12f6c:	ldr	r4, [r3]
   12f70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12f74:	mov	r1, #3
   12f78:	mov	r0, #0
   12f7c:	bl	16ed8 <__assert_fail@plt+0x5b28>
   12f80:	mov	r3, r0
   12f84:	ldr	r2, [pc, #40]	; 12fb4 <__assert_fail@plt+0x1c04>
   12f88:	mov	r1, r4
   12f8c:	mov	r0, #0
   12f90:	bl	111e8 <error@plt>
   12f94:	mov	r3, #0
   12f98:	b	12fa0 <__assert_fail@plt+0x1bf0>
   12f9c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12fa0:	mov	r0, r3
   12fa4:	sub	sp, fp, #8
   12fa8:	pop	{r4, fp, pc}
   12fac:	andeq	fp, r1, ip, lsl r3
   12fb0:	andeq	ip, r2, r4, ror #3
   12fb4:	andeq	fp, r1, r8, lsl #6
   12fb8:	push	{r4, fp, lr}
   12fbc:	add	fp, sp, #8
   12fc0:	sub	sp, sp, #20
   12fc4:	str	r0, [fp, #-24]	; 0xffffffe8
   12fc8:	str	r1, [fp, #-28]	; 0xffffffe4
   12fcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12fd0:	cmp	r3, #0
   12fd4:	beq	12fe0 <__assert_fail@plt+0x1c30>
   12fd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12fdc:	b	12fe4 <__assert_fail@plt+0x1c34>
   12fe0:	mov	r3, #1
   12fe4:	mov	r1, #112	; 0x70
   12fe8:	mov	r0, r3
   12fec:	bl	18390 <__assert_fail@plt+0x6fe0>
   12ff0:	mov	r3, r0
   12ff4:	str	r3, [fp, #-20]	; 0xffffffec
   12ff8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ffc:	cmp	r3, #0
   13000:	beq	13054 <__assert_fail@plt+0x1ca4>
   13004:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13008:	cmp	r3, #1
   1300c:	bne	13064 <__assert_fail@plt+0x1cb4>
   13010:	ldr	r3, [pc, #364]	; 13184 <__assert_fail@plt+0x1dd4>
   13014:	ldrb	r3, [r3]
   13018:	mov	r2, r3
   1301c:	ldr	r3, [pc, #356]	; 13188 <__assert_fail@plt+0x1dd8>
   13020:	ldrb	r3, [r3]
   13024:	add	r3, r2, r3
   13028:	ldr	r2, [pc, #348]	; 1318c <__assert_fail@plt+0x1ddc>
   1302c:	ldrb	r2, [r2]
   13030:	add	r3, r3, r2
   13034:	ldr	r2, [pc, #340]	; 13190 <__assert_fail@plt+0x1de0>
   13038:	ldrb	r2, [r2]
   1303c:	add	r3, r3, r2
   13040:	ldr	r2, [pc, #332]	; 13194 <__assert_fail@plt+0x1de4>
   13044:	ldrb	r2, [r2]
   13048:	add	r3, r3, r2
   1304c:	cmp	r3, #1
   13050:	bne	13064 <__assert_fail@plt+0x1cb4>
   13054:	ldr	r3, [fp, #-20]	; 0xffffffec
   13058:	mov	r2, #1
   1305c:	str	r2, [r3]
   13060:	b	13174 <__assert_fail@plt+0x1dc4>
   13064:	mov	r3, #0
   13068:	str	r3, [fp, #-16]
   1306c:	b	13164 <__assert_fail@plt+0x1db4>
   13070:	ldr	r2, [fp, #-16]
   13074:	mov	r3, r2
   13078:	lsl	r3, r3, #3
   1307c:	sub	r3, r3, r2
   13080:	lsl	r3, r3, #4
   13084:	mov	r2, r3
   13088:	ldr	r3, [fp, #-20]	; 0xffffffec
   1308c:	add	r4, r3, r2
   13090:	ldr	r3, [fp, #-16]
   13094:	lsl	r3, r3, #2
   13098:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1309c:	add	r3, r2, r3
   130a0:	ldr	r3, [r3]
   130a4:	cmp	r3, #0
   130a8:	beq	130d8 <__assert_fail@plt+0x1d28>
   130ac:	ldr	r3, [fp, #-16]
   130b0:	lsl	r3, r3, #2
   130b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   130b8:	add	r3, r2, r3
   130bc:	ldr	r3, [r3]
   130c0:	ldr	r1, [pc, #208]	; 13198 <__assert_fail@plt+0x1de8>
   130c4:	mov	r0, r3
   130c8:	bl	110a4 <strcmp@plt>
   130cc:	mov	r3, r0
   130d0:	cmp	r3, #0
   130d4:	bne	13110 <__assert_fail@plt+0x1d60>
   130d8:	ldr	r2, [fp, #-16]
   130dc:	mov	r3, r2
   130e0:	lsl	r3, r3, #3
   130e4:	sub	r3, r3, r2
   130e8:	lsl	r3, r3, #4
   130ec:	mov	r2, r3
   130f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   130f4:	add	r3, r3, r2
   130f8:	add	r3, r3, #8
   130fc:	mov	r1, r3
   13100:	mov	r0, #0
   13104:	bl	1ac10 <_obstack_memory_used@@Base+0x11d4>
   13108:	mov	r3, r0
   1310c:	b	13154 <__assert_fail@plt+0x1da4>
   13110:	ldr	r3, [fp, #-16]
   13114:	lsl	r3, r3, #2
   13118:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1311c:	add	r3, r2, r3
   13120:	ldr	r0, [r3]
   13124:	ldr	r2, [fp, #-16]
   13128:	mov	r3, r2
   1312c:	lsl	r3, r3, #3
   13130:	sub	r3, r3, r2
   13134:	lsl	r3, r3, #4
   13138:	mov	r2, r3
   1313c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13140:	add	r3, r3, r2
   13144:	add	r3, r3, #8
   13148:	mov	r1, r3
   1314c:	bl	1ac00 <_obstack_memory_used@@Base+0x11c4>
   13150:	mov	r3, r0
   13154:	str	r3, [r4]
   13158:	ldr	r3, [fp, #-16]
   1315c:	add	r3, r3, #1
   13160:	str	r3, [fp, #-16]
   13164:	ldr	r2, [fp, #-16]
   13168:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1316c:	cmp	r2, r3
   13170:	bcc	13070 <__assert_fail@plt+0x1cc0>
   13174:	ldr	r3, [fp, #-20]	; 0xffffffec
   13178:	mov	r0, r3
   1317c:	sub	sp, fp, #8
   13180:	pop	{r4, fp, pc}
   13184:	ldrdeq	ip, [r2], -r8
   13188:	ldrdeq	ip, [r2], -r9
   1318c:	ldrdeq	ip, [r2], -sl
   13190:	ldrdeq	ip, [r2], -fp
   13194:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   13198:	andeq	fp, r1, ip, lsl r3
   1319c:	push	{fp, lr}
   131a0:	add	fp, sp, #4
   131a4:	sub	sp, sp, #32
   131a8:	str	r0, [fp, #-32]	; 0xffffffe0
   131ac:	str	r1, [fp, #-36]	; 0xffffffdc
   131b0:	mov	r3, #1
   131b4:	str	r3, [fp, #-8]
   131b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   131bc:	cmp	r3, #0
   131c0:	beq	13308 <__assert_fail@plt+0x1f58>
   131c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   131c8:	ldr	r3, [r3]
   131cc:	cmp	r3, #0
   131d0:	bgt	13308 <__assert_fail@plt+0x1f58>
   131d4:	mov	r3, #1
   131d8:	str	r3, [fp, #-12]
   131dc:	mov	r2, #0
   131e0:	mov	r3, #0
   131e4:	strd	r2, [fp, #-20]	; 0xffffffec
   131e8:	mov	r3, #0
   131ec:	str	r3, [fp, #-24]	; 0xffffffe8
   131f0:	b	132a4 <__assert_fail@plt+0x1ef4>
   131f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   131f8:	mov	r3, r2
   131fc:	lsl	r3, r3, #3
   13200:	sub	r3, r3, r2
   13204:	lsl	r3, r3, #4
   13208:	mov	r2, r3
   1320c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13210:	add	r3, r3, r2
   13214:	ldr	r3, [r3]
   13218:	cmp	r3, #0
   1321c:	bne	13298 <__assert_fail@plt+0x1ee8>
   13220:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13224:	mov	r3, r2
   13228:	lsl	r3, r3, #3
   1322c:	sub	r3, r3, r2
   13230:	lsl	r3, r3, #4
   13234:	mov	r2, r3
   13238:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1323c:	add	r3, r3, r2
   13240:	ldr	r3, [r3, #24]
   13244:	and	r3, r3, #61440	; 0xf000
   13248:	cmp	r3, #32768	; 0x8000
   1324c:	bne	13290 <__assert_fail@plt+0x1ee0>
   13250:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13254:	mov	r3, r2
   13258:	lsl	r3, r3, #3
   1325c:	sub	r3, r3, r2
   13260:	lsl	r3, r3, #4
   13264:	mov	r2, r3
   13268:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1326c:	add	r3, r3, r2
   13270:	ldrd	r2, [r3, #56]	; 0x38
   13274:	mov	r0, r2
   13278:	mov	r1, r3
   1327c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13280:	adds	r2, r2, r0
   13284:	adc	r3, r3, r1
   13288:	strd	r2, [fp, #-20]	; 0xffffffec
   1328c:	b	13298 <__assert_fail@plt+0x1ee8>
   13290:	mov	r3, #7
   13294:	str	r3, [fp, #-12]
   13298:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1329c:	add	r3, r3, #1
   132a0:	str	r3, [fp, #-24]	; 0xffffffe8
   132a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   132a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   132ac:	cmp	r2, r3
   132b0:	bcc	131f4 <__assert_fail@plt+0x1e44>
   132b4:	b	132e0 <__assert_fail@plt+0x1f30>
   132b8:	ldr	r3, [fp, #-8]
   132bc:	add	r3, r3, #1
   132c0:	str	r3, [fp, #-8]
   132c4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   132c8:	mov	r2, #10
   132cc:	mov	r3, #0
   132d0:	bl	1aa10 <_obstack_memory_used@@Base+0xfd4>
   132d4:	mov	r2, r0
   132d8:	mov	r3, r1
   132dc:	strd	r2, [fp, #-20]	; 0xffffffec
   132e0:	ldrd	r2, [fp, #-20]	; 0xffffffec
   132e4:	cmp	r3, #0
   132e8:	cmpeq	r2, #9
   132ec:	bhi	132b8 <__assert_fail@plt+0x1f08>
   132f0:	ldr	r2, [fp, #-8]
   132f4:	ldr	r3, [fp, #-12]
   132f8:	cmp	r2, r3
   132fc:	bge	13308 <__assert_fail@plt+0x1f58>
   13300:	ldr	r3, [fp, #-12]
   13304:	str	r3, [fp, #-8]
   13308:	ldr	r3, [fp, #-8]
   1330c:	mov	r0, r3
   13310:	sub	sp, fp, #4
   13314:	pop	{fp, pc}
   13318:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1331c:	vpush	{d8}
   13320:	add	fp, sp, #36	; 0x24
   13324:	sub	sp, sp, #360	; 0x168
   13328:	str	r0, [fp, #-344]	; 0xfffffea8
   1332c:	str	r1, [fp, #-348]	; 0xfffffea4
   13330:	mov	r3, #0
   13334:	str	r3, [fp, #-52]	; 0xffffffcc
   13338:	ldr	r3, [fp, #-348]	; 0xfffffea4
   1333c:	ldr	r3, [r3]
   13340:	mov	r0, r3
   13344:	bl	14a18 <__assert_fail@plt+0x3668>
   13348:	ldr	r1, [pc, #2184]	; 13bd8 <__assert_fail@plt+0x2828>
   1334c:	mov	r0, #6
   13350:	bl	1132c <setlocale@plt>
   13354:	ldr	r1, [pc, #2176]	; 13bdc <__assert_fail@plt+0x282c>
   13358:	ldr	r0, [pc, #2176]	; 13be0 <__assert_fail@plt+0x2830>
   1335c:	bl	1135c <bindtextdomain@plt>
   13360:	ldr	r0, [pc, #2168]	; 13be0 <__assert_fail@plt+0x2830>
   13364:	bl	11164 <textdomain@plt>
   13368:	ldr	r0, [pc, #2164]	; 13be4 <__assert_fail@plt+0x2834>
   1336c:	bl	1abe8 <_obstack_memory_used@@Base+0x11ac>
   13370:	bl	112b4 <getpagesize@plt>
   13374:	mov	r3, r0
   13378:	mov	r2, r3
   1337c:	ldr	r3, [pc, #2148]	; 13be8 <__assert_fail@plt+0x2838>
   13380:	str	r2, [r3]
   13384:	ldr	r3, [pc, #2144]	; 13bec <__assert_fail@plt+0x283c>
   13388:	ldr	r0, [r3]
   1338c:	mov	r3, #0
   13390:	mov	r2, #1
   13394:	mov	r1, #0
   13398:	bl	112d8 <setvbuf@plt>
   1339c:	ldr	r0, [pc, #2124]	; 13bf0 <__assert_fail@plt+0x2840>
   133a0:	bl	11200 <getenv@plt>
   133a4:	mov	r3, r0
   133a8:	cmp	r3, #0
   133ac:	movne	r3, #1
   133b0:	moveq	r3, #0
   133b4:	uxtb	r2, r3
   133b8:	ldr	r3, [pc, #2100]	; 13bf4 <__assert_fail@plt+0x2844>
   133bc:	strb	r2, [r3]
   133c0:	ldr	r3, [pc, #2096]	; 13bf8 <__assert_fail@plt+0x2848>
   133c4:	mov	r2, #0
   133c8:	strb	r2, [r3]
   133cc:	ldr	r3, [pc, #2084]	; 13bf8 <__assert_fail@plt+0x2848>
   133d0:	ldrb	r2, [r3]
   133d4:	ldr	r3, [pc, #2080]	; 13bfc <__assert_fail@plt+0x284c>
   133d8:	strb	r2, [r3]
   133dc:	ldr	r3, [pc, #2072]	; 13bfc <__assert_fail@plt+0x284c>
   133e0:	ldrb	r2, [r3]
   133e4:	ldr	r3, [pc, #2068]	; 13c00 <__assert_fail@plt+0x2850>
   133e8:	strb	r2, [r3]
   133ec:	ldr	r3, [pc, #2060]	; 13c00 <__assert_fail@plt+0x2850>
   133f0:	ldrb	r2, [r3]
   133f4:	ldr	r3, [pc, #2056]	; 13c04 <__assert_fail@plt+0x2854>
   133f8:	strb	r2, [r3]
   133fc:	ldr	r3, [pc, #2052]	; 13c08 <__assert_fail@plt+0x2858>
   13400:	mov	r2, #0
   13404:	strb	r2, [r3]
   13408:	ldr	r1, [pc, #2180]	; 13c94 <__assert_fail@plt+0x28e4>
   1340c:	mov	r2, #0
   13410:	mov	r3, #0
   13414:	strd	r2, [r1]
   13418:	ldr	r3, [pc, #2164]	; 13c94 <__assert_fail@plt+0x28e4>
   1341c:	ldrd	r2, [r3]
   13420:	ldr	r1, [pc, #2152]	; 13c90 <__assert_fail@plt+0x28e0>
   13424:	strd	r2, [r1]
   13428:	ldr	r3, [pc, #2144]	; 13c90 <__assert_fail@plt+0x28e0>
   1342c:	ldrd	r2, [r3]
   13430:	ldr	r1, [pc, #2132]	; 13c8c <__assert_fail@plt+0x28dc>
   13434:	strd	r2, [r1]
   13438:	ldr	r3, [pc, #2124]	; 13c8c <__assert_fail@plt+0x28dc>
   1343c:	ldrd	r2, [r3]
   13440:	ldr	r1, [pc, #2112]	; 13c88 <__assert_fail@plt+0x28d8>
   13444:	strd	r2, [r1]
   13448:	ldr	r3, [pc, #2104]	; 13c88 <__assert_fail@plt+0x28d8>
   1344c:	ldrd	r2, [r3]
   13450:	ldr	r1, [pc, #2092]	; 13c84 <__assert_fail@plt+0x28d4>
   13454:	strd	r2, [r1]
   13458:	b	13594 <__assert_fail@plt+0x21e4>
   1345c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13460:	cmp	r3, #108	; 0x6c
   13464:	beq	134f4 <__assert_fail@plt+0x2144>
   13468:	cmp	r3, #108	; 0x6c
   1346c:	bgt	134a0 <__assert_fail@plt+0x20f0>
   13470:	cmn	r3, #2
   13474:	beq	13544 <__assert_fail@plt+0x2194>
   13478:	cmn	r3, #2
   1347c:	bgt	1348c <__assert_fail@plt+0x20dc>
   13480:	cmn	r3, #3
   13484:	beq	1354c <__assert_fail@plt+0x219c>
   13488:	b	1358c <__assert_fail@plt+0x21dc>
   1348c:	cmp	r3, #76	; 0x4c
   13490:	beq	13514 <__assert_fail@plt+0x2164>
   13494:	cmp	r3, #99	; 0x63
   13498:	beq	134d4 <__assert_fail@plt+0x2124>
   1349c:	b	1358c <__assert_fail@plt+0x21dc>
   134a0:	cmp	r3, #119	; 0x77
   134a4:	beq	13504 <__assert_fail@plt+0x2154>
   134a8:	cmp	r3, #119	; 0x77
   134ac:	bgt	134bc <__assert_fail@plt+0x210c>
   134b0:	cmp	r3, #109	; 0x6d
   134b4:	beq	134e4 <__assert_fail@plt+0x2134>
   134b8:	b	1358c <__assert_fail@plt+0x21dc>
   134bc:	cmp	r3, #256	; 0x100
   134c0:	beq	13524 <__assert_fail@plt+0x2174>
   134c4:	ldr	r2, [pc, #1856]	; 13c0c <__assert_fail@plt+0x285c>
   134c8:	cmp	r3, r2
   134cc:	beq	13534 <__assert_fail@plt+0x2184>
   134d0:	b	1358c <__assert_fail@plt+0x21dc>
   134d4:	ldr	r3, [pc, #1820]	; 13bf8 <__assert_fail@plt+0x2848>
   134d8:	mov	r2, #1
   134dc:	strb	r2, [r3]
   134e0:	b	13594 <__assert_fail@plt+0x21e4>
   134e4:	ldr	r3, [pc, #1808]	; 13bfc <__assert_fail@plt+0x284c>
   134e8:	mov	r2, #1
   134ec:	strb	r2, [r3]
   134f0:	b	13594 <__assert_fail@plt+0x21e4>
   134f4:	ldr	r3, [pc, #1800]	; 13c04 <__assert_fail@plt+0x2854>
   134f8:	mov	r2, #1
   134fc:	strb	r2, [r3]
   13500:	b	13594 <__assert_fail@plt+0x21e4>
   13504:	ldr	r3, [pc, #1780]	; 13c00 <__assert_fail@plt+0x2850>
   13508:	mov	r2, #1
   1350c:	strb	r2, [r3]
   13510:	b	13594 <__assert_fail@plt+0x21e4>
   13514:	ldr	r3, [pc, #1772]	; 13c08 <__assert_fail@plt+0x2858>
   13518:	mov	r2, #1
   1351c:	strb	r2, [r3]
   13520:	b	13594 <__assert_fail@plt+0x21e4>
   13524:	ldr	r3, [pc, #1764]	; 13c10 <__assert_fail@plt+0x2860>
   13528:	mov	r2, #1
   1352c:	strb	r2, [r3]
   13530:	b	13594 <__assert_fail@plt+0x21e4>
   13534:	ldr	r3, [pc, #1752]	; 13c14 <__assert_fail@plt+0x2864>
   13538:	ldr	r3, [r3]
   1353c:	str	r3, [fp, #-52]	; 0xffffffcc
   13540:	b	13594 <__assert_fail@plt+0x21e4>
   13544:	mov	r0, #0
   13548:	bl	11744 <__assert_fail@plt+0x394>
   1354c:	ldr	r3, [pc, #1688]	; 13bec <__assert_fail@plt+0x283c>
   13550:	ldr	r0, [r3]
   13554:	ldr	r3, [pc, #1724]	; 13c18 <__assert_fail@plt+0x2868>
   13558:	ldr	r2, [r3]
   1355c:	mov	r3, #0
   13560:	str	r3, [sp, #8]
   13564:	ldr	r3, [pc, #1712]	; 13c1c <__assert_fail@plt+0x286c>
   13568:	str	r3, [sp, #4]
   1356c:	ldr	r3, [pc, #1708]	; 13c20 <__assert_fail@plt+0x2870>
   13570:	str	r3, [sp]
   13574:	mov	r3, r2
   13578:	ldr	r2, [pc, #1700]	; 13c24 <__assert_fail@plt+0x2874>
   1357c:	ldr	r1, [pc, #1700]	; 13c28 <__assert_fail@plt+0x2878>
   13580:	bl	18068 <__assert_fail@plt+0x6cb8>
   13584:	mov	r0, #0
   13588:	bl	11260 <exit@plt>
   1358c:	mov	r0, #1
   13590:	bl	11744 <__assert_fail@plt+0x394>
   13594:	mov	r3, #0
   13598:	str	r3, [sp]
   1359c:	ldr	r3, [pc, #1672]	; 13c2c <__assert_fail@plt+0x287c>
   135a0:	ldr	r2, [pc, #1672]	; 13c30 <__assert_fail@plt+0x2880>
   135a4:	ldr	r1, [fp, #-348]	; 0xfffffea4
   135a8:	ldr	r0, [fp, #-344]	; 0xfffffea8
   135ac:	bl	11248 <getopt_long@plt>
   135b0:	str	r0, [fp, #-76]	; 0xffffffb4
   135b4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   135b8:	cmn	r3, #1
   135bc:	bne	1345c <__assert_fail@plt+0x20ac>
   135c0:	ldr	r3, [pc, #1596]	; 13c04 <__assert_fail@plt+0x2854>
   135c4:	ldrb	r3, [r3]
   135c8:	eor	r3, r3, #1
   135cc:	uxtb	r3, r3
   135d0:	cmp	r3, #0
   135d4:	beq	13664 <__assert_fail@plt+0x22b4>
   135d8:	ldr	r3, [pc, #1568]	; 13c00 <__assert_fail@plt+0x2850>
   135dc:	ldrb	r3, [r3]
   135e0:	eor	r3, r3, #1
   135e4:	uxtb	r3, r3
   135e8:	cmp	r3, #0
   135ec:	beq	13664 <__assert_fail@plt+0x22b4>
   135f0:	ldr	r3, [pc, #1540]	; 13bfc <__assert_fail@plt+0x284c>
   135f4:	ldrb	r3, [r3]
   135f8:	eor	r3, r3, #1
   135fc:	uxtb	r3, r3
   13600:	cmp	r3, #0
   13604:	beq	13664 <__assert_fail@plt+0x22b4>
   13608:	ldr	r3, [pc, #1512]	; 13bf8 <__assert_fail@plt+0x2848>
   1360c:	ldrb	r3, [r3]
   13610:	eor	r3, r3, #1
   13614:	uxtb	r3, r3
   13618:	cmp	r3, #0
   1361c:	beq	13664 <__assert_fail@plt+0x22b4>
   13620:	ldr	r3, [pc, #1504]	; 13c08 <__assert_fail@plt+0x2858>
   13624:	ldrb	r3, [r3]
   13628:	eor	r3, r3, #1
   1362c:	uxtb	r3, r3
   13630:	cmp	r3, #0
   13634:	beq	13664 <__assert_fail@plt+0x22b4>
   13638:	ldr	r3, [pc, #1464]	; 13bf8 <__assert_fail@plt+0x2848>
   1363c:	mov	r2, #1
   13640:	strb	r2, [r3]
   13644:	ldr	r3, [pc, #1452]	; 13bf8 <__assert_fail@plt+0x2848>
   13648:	ldrb	r2, [r3]
   1364c:	ldr	r3, [pc, #1452]	; 13c00 <__assert_fail@plt+0x2850>
   13650:	strb	r2, [r3]
   13654:	ldr	r3, [pc, #1444]	; 13c00 <__assert_fail@plt+0x2850>
   13658:	ldrb	r2, [r3]
   1365c:	ldr	r3, [pc, #1440]	; 13c04 <__assert_fail@plt+0x2854>
   13660:	strb	r2, [r3]
   13664:	mov	r3, #0
   13668:	strb	r3, [fp, #-53]	; 0xffffffcb
   1366c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13670:	cmp	r3, #0
   13674:	beq	138c4 <__assert_fail@plt+0x2514>
   13678:	ldr	r3, [pc, #1460]	; 13c34 <__assert_fail@plt+0x2884>
   1367c:	ldr	r2, [r3]
   13680:	ldr	r3, [fp, #-344]	; 0xfffffea8
   13684:	cmp	r2, r3
   13688:	bge	136fc <__assert_fail@plt+0x234c>
   1368c:	ldr	r0, [pc, #1444]	; 13c38 <__assert_fail@plt+0x2888>
   13690:	bl	11284 <gettext@plt>
   13694:	mov	r4, r0
   13698:	ldr	r3, [pc, #1428]	; 13c34 <__assert_fail@plt+0x2884>
   1369c:	ldr	r3, [r3]
   136a0:	lsl	r3, r3, #2
   136a4:	ldr	r2, [fp, #-348]	; 0xfffffea4
   136a8:	add	r3, r2, r3
   136ac:	ldr	r3, [r3]
   136b0:	mov	r1, r3
   136b4:	mov	r0, #4
   136b8:	bl	16d50 <__assert_fail@plt+0x59a0>
   136bc:	mov	r3, r0
   136c0:	mov	r2, r4
   136c4:	mov	r1, #0
   136c8:	mov	r0, #0
   136cc:	bl	111e8 <error@plt>
   136d0:	ldr	r3, [pc, #1380]	; 13c3c <__assert_fail@plt+0x288c>
   136d4:	ldr	r4, [r3]
   136d8:	ldr	r0, [pc, #1376]	; 13c40 <__assert_fail@plt+0x2890>
   136dc:	bl	11284 <gettext@plt>
   136e0:	mov	r3, r0
   136e4:	mov	r2, r3
   136e8:	ldr	r1, [pc, #1364]	; 13c44 <__assert_fail@plt+0x2894>
   136ec:	mov	r0, r4
   136f0:	bl	112a8 <fprintf@plt>
   136f4:	mov	r0, #1
   136f8:	bl	11744 <__assert_fail@plt+0x394>
   136fc:	ldr	r1, [pc, #1436]	; 13ca0 <__assert_fail@plt+0x28f0>
   13700:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13704:	bl	110a4 <strcmp@plt>
   13708:	mov	r3, r0
   1370c:	cmp	r3, #0
   13710:	bne	13724 <__assert_fail@plt+0x2374>
   13714:	ldr	r3, [pc, #1324]	; 13c48 <__assert_fail@plt+0x2898>
   13718:	ldr	r3, [r3]
   1371c:	str	r3, [fp, #-64]	; 0xffffffc0
   13720:	b	13778 <__assert_fail@plt+0x23c8>
   13724:	ldr	r1, [pc, #1312]	; 13c4c <__assert_fail@plt+0x289c>
   13728:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1372c:	bl	11350 <fopen64@plt>
   13730:	str	r0, [fp, #-64]	; 0xffffffc0
   13734:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13738:	cmp	r3, #0
   1373c:	bne	13778 <__assert_fail@plt+0x23c8>
   13740:	bl	112c0 <__errno_location@plt>
   13744:	mov	r3, r0
   13748:	ldr	r4, [r3]
   1374c:	ldr	r0, [pc, #1276]	; 13c50 <__assert_fail@plt+0x28a0>
   13750:	bl	11284 <gettext@plt>
   13754:	mov	r5, r0
   13758:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1375c:	mov	r0, #4
   13760:	bl	16d50 <__assert_fail@plt+0x59a0>
   13764:	mov	r3, r0
   13768:	mov	r2, r5
   1376c:	mov	r1, r4
   13770:	mov	r0, #1
   13774:	bl	111e8 <error@plt>
   13778:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1377c:	bl	11308 <fileno@plt>
   13780:	mov	r2, r0
   13784:	sub	r3, fp, #340	; 0x154
   13788:	mov	r1, r3
   1378c:	mov	r0, r2
   13790:	bl	1ac10 <_obstack_memory_used@@Base+0x11d4>
   13794:	mov	r3, r0
   13798:	cmp	r3, #0
   1379c:	bne	138a4 <__assert_fail@plt+0x24f4>
   137a0:	ldr	r3, [fp, #-324]	; 0xfffffebc
   137a4:	and	r3, r3, #61440	; 0xf000
   137a8:	cmp	r3, #32768	; 0x8000
   137ac:	bne	138a4 <__assert_fail@plt+0x24f4>
   137b0:	sub	r3, fp, #340	; 0x154
   137b4:	ldrd	r2, [r3, #48]	; 0x30
   137b8:	mov	r0, r2
   137bc:	mov	r1, r3
   137c0:	bl	1a9b0 <_obstack_memory_used@@Base+0xf74>
   137c4:	vmov	d8, r0, r1
   137c8:	bl	14948 <__assert_fail@plt+0x3598>
   137cc:	vmov.f64	d5, d0
   137d0:	vldr	d6, [pc, #1008]	; 13bc8 <__assert_fail@plt+0x2818>
   137d4:	vdiv.f64	d7, d5, d6
   137d8:	vldr	d6, [pc, #1008]	; 13bd0 <__assert_fail@plt+0x2820>
   137dc:	vcmpe.f64	d7, d6
   137e0:	vmrs	APSR_nzcv, fpscr
   137e4:	ble	137f0 <__assert_fail@plt+0x2440>
   137e8:	vldr	d7, [pc, #992]	; 13bd0 <__assert_fail@plt+0x2820>
   137ec:	b	13800 <__assert_fail@plt+0x2450>
   137f0:	bl	14948 <__assert_fail@plt+0x3598>
   137f4:	vmov.f64	d5, d0
   137f8:	vldr	d6, [pc, #968]	; 13bc8 <__assert_fail@plt+0x2818>
   137fc:	vdiv.f64	d7, d5, d6
   13800:	vcmpe.f64	d8, d7
   13804:	vmrs	APSR_nzcv, fpscr
   13808:	bhi	138a4 <__assert_fail@plt+0x24f4>
   1380c:	mov	r3, #1
   13810:	strb	r3, [fp, #-53]	; 0xffffffcb
   13814:	sub	r3, fp, #232	; 0xe8
   13818:	mov	r0, r3
   1381c:	bl	17174 <__assert_fail@plt+0x5dc4>
   13820:	sub	r3, fp, #232	; 0xe8
   13824:	mov	r1, r3
   13828:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1382c:	bl	17594 <__assert_fail@plt+0x61e4>
   13830:	mov	r3, r0
   13834:	eor	r3, r3, #1
   13838:	uxtb	r3, r3
   1383c:	cmp	r3, #0
   13840:	bne	13858 <__assert_fail@plt+0x24a8>
   13844:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13848:	bl	142c8 <__assert_fail@plt+0x2f18>
   1384c:	mov	r3, r0
   13850:	cmp	r3, #0
   13854:	beq	13884 <__assert_fail@plt+0x24d4>
   13858:	ldr	r0, [pc, #1012]	; 13c54 <__assert_fail@plt+0x28a4>
   1385c:	bl	11284 <gettext@plt>
   13860:	mov	r4, r0
   13864:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13868:	mov	r0, #4
   1386c:	bl	16d50 <__assert_fail@plt+0x59a0>
   13870:	mov	r3, r0
   13874:	mov	r2, r4
   13878:	mov	r1, #0
   1387c:	mov	r0, #1
   13880:	bl	111e8 <error@plt>
   13884:	ldr	r3, [fp, #-228]	; 0xffffff1c
   13888:	str	r3, [fp, #-48]	; 0xffffffd0
   1388c:	ldr	r3, [fp, #-232]	; 0xffffff18
   13890:	str	r3, [fp, #-44]	; 0xffffffd4
   13894:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13898:	bl	13e00 <__assert_fail@plt+0x2a50>
   1389c:	str	r0, [fp, #-60]	; 0xffffffc4
   138a0:	b	13934 <__assert_fail@plt+0x2584>
   138a4:	mov	r3, #0
   138a8:	str	r3, [fp, #-48]	; 0xffffffd0
   138ac:	mov	r3, #0
   138b0:	str	r3, [fp, #-44]	; 0xffffffd4
   138b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   138b8:	bl	13e68 <__assert_fail@plt+0x2ab8>
   138bc:	str	r0, [fp, #-60]	; 0xffffffc4
   138c0:	b	13934 <__assert_fail@plt+0x2584>
   138c4:	ldr	r3, [pc, #872]	; 13c34 <__assert_fail@plt+0x2884>
   138c8:	ldr	r2, [r3]
   138cc:	ldr	r3, [fp, #-344]	; 0xfffffea8
   138d0:	cmp	r2, r3
   138d4:	bge	138f0 <__assert_fail@plt+0x2540>
   138d8:	ldr	r3, [pc, #852]	; 13c34 <__assert_fail@plt+0x2884>
   138dc:	ldr	r3, [r3]
   138e0:	lsl	r3, r3, #2
   138e4:	ldr	r2, [fp, #-348]	; 0xfffffea4
   138e8:	add	r3, r2, r3
   138ec:	b	138f4 <__assert_fail@plt+0x2544>
   138f0:	ldr	r3, [pc, #864]	; 13c58 <__assert_fail@plt+0x28a8>
   138f4:	str	r3, [fp, #-48]	; 0xffffffd0
   138f8:	ldr	r3, [pc, #820]	; 13c34 <__assert_fail@plt+0x2884>
   138fc:	ldr	r2, [r3]
   13900:	ldr	r3, [fp, #-344]	; 0xfffffea8
   13904:	cmp	r2, r3
   13908:	bge	13920 <__assert_fail@plt+0x2570>
   1390c:	ldr	r3, [pc, #800]	; 13c34 <__assert_fail@plt+0x2884>
   13910:	ldr	r3, [r3]
   13914:	ldr	r2, [fp, #-344]	; 0xfffffea8
   13918:	sub	r3, r2, r3
   1391c:	b	13924 <__assert_fail@plt+0x2574>
   13920:	mov	r3, #1
   13924:	str	r3, [fp, #-44]	; 0xffffffd4
   13928:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1392c:	bl	13e00 <__assert_fail@plt+0x2a50>
   13930:	str	r0, [fp, #-60]	; 0xffffffc4
   13934:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13938:	cmp	r3, #0
   1393c:	bne	13944 <__assert_fail@plt+0x2594>
   13940:	bl	18cd0 <__assert_fail@plt+0x7920>
   13944:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13948:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1394c:	bl	12fb8 <__assert_fail@plt+0x1c08>
   13950:	str	r0, [fp, #-80]	; 0xffffffb0
   13954:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13958:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1395c:	bl	1319c <__assert_fail@plt+0x1dec>
   13960:	mov	r2, r0
   13964:	ldr	r3, [pc, #752]	; 13c5c <__assert_fail@plt+0x28ac>
   13968:	str	r2, [r3]
   1396c:	mov	r3, #1
   13970:	strb	r3, [fp, #-37]	; 0xffffffdb
   13974:	mov	r3, #0
   13978:	str	r3, [fp, #-68]	; 0xffffffbc
   1397c:	mov	r3, #0
   13980:	strb	r3, [fp, #-69]	; 0xffffffbb
   13984:	sub	r3, fp, #236	; 0xec
   13988:	mov	r1, r3
   1398c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13990:	bl	13ee8 <__assert_fail@plt+0x2b38>
   13994:	str	r0, [fp, #-84]	; 0xffffffac
   13998:	ldr	r3, [fp, #-84]	; 0xffffffac
   1399c:	cmp	r3, #0
   139a0:	bne	13a24 <__assert_fail@plt+0x2674>
   139a4:	ldr	r3, [fp, #-236]	; 0xffffff14
   139a8:	cmp	r3, #3
   139ac:	beq	13a0c <__assert_fail@plt+0x265c>
   139b0:	cmp	r3, #4
   139b4:	beq	139c4 <__assert_fail@plt+0x2614>
   139b8:	cmp	r3, #2
   139bc:	beq	13ca4 <__assert_fail@plt+0x28f4>
   139c0:	b	13a10 <__assert_fail@plt+0x2660>
   139c4:	bl	112c0 <__errno_location@plt>
   139c8:	mov	r3, r0
   139cc:	ldr	r4, [r3]
   139d0:	ldr	r0, [pc, #648]	; 13c60 <__assert_fail@plt+0x28b0>
   139d4:	bl	11284 <gettext@plt>
   139d8:	mov	r5, r0
   139dc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   139e0:	mov	r1, #3
   139e4:	mov	r0, #0
   139e8:	bl	16ed8 <__assert_fail@plt+0x5b28>
   139ec:	mov	r3, r0
   139f0:	mov	r2, r5
   139f4:	mov	r1, r4
   139f8:	mov	r0, #0
   139fc:	bl	111e8 <error@plt>
   13a00:	mov	r3, #0
   13a04:	strb	r3, [fp, #-37]	; 0xffffffdb
   13a08:	b	13ca8 <__assert_fail@plt+0x28f8>
   13a0c:	bl	18cd0 <__assert_fail@plt+0x7920>
   13a10:	ldr	r3, [pc, #588]	; 13c64 <__assert_fail@plt+0x28b4>
   13a14:	ldr	r2, [pc, #588]	; 13c68 <__assert_fail@plt+0x28b8>
   13a18:	ldr	r1, [pc, #588]	; 13c6c <__assert_fail@plt+0x28bc>
   13a1c:	ldr	r0, [pc, #588]	; 13c70 <__assert_fail@plt+0x28c0>
   13a20:	bl	113b0 <__assert_fail@plt>
   13a24:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13a28:	cmp	r3, #0
   13a2c:	beq	13a94 <__assert_fail@plt+0x26e4>
   13a30:	ldr	r1, [pc, #616]	; 13ca0 <__assert_fail@plt+0x28f0>
   13a34:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13a38:	bl	110a4 <strcmp@plt>
   13a3c:	mov	r3, r0
   13a40:	cmp	r3, #0
   13a44:	bne	13a94 <__assert_fail@plt+0x26e4>
   13a48:	ldr	r1, [pc, #592]	; 13ca0 <__assert_fail@plt+0x28f0>
   13a4c:	ldr	r0, [fp, #-84]	; 0xffffffac
   13a50:	bl	110a4 <strcmp@plt>
   13a54:	mov	r3, r0
   13a58:	cmp	r3, #0
   13a5c:	bne	13a94 <__assert_fail@plt+0x26e4>
   13a60:	ldr	r0, [pc, #524]	; 13c74 <__assert_fail@plt+0x28c4>
   13a64:	bl	11284 <gettext@plt>
   13a68:	mov	r4, r0
   13a6c:	ldr	r1, [fp, #-84]	; 0xffffffac
   13a70:	mov	r0, #4
   13a74:	bl	16d50 <__assert_fail@plt+0x59a0>
   13a78:	mov	r3, r0
   13a7c:	mov	r2, r4
   13a80:	mov	r1, #0
   13a84:	mov	r0, #0
   13a88:	bl	111e8 <error@plt>
   13a8c:	mov	r3, #1
   13a90:	strb	r3, [fp, #-69]	; 0xffffffbb
   13a94:	ldr	r3, [fp, #-84]	; 0xffffffac
   13a98:	ldrb	r3, [r3]
   13a9c:	cmp	r3, #0
   13aa0:	bne	13b24 <__assert_fail@plt+0x2774>
   13aa4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13aa8:	cmp	r3, #0
   13aac:	bne	13ad0 <__assert_fail@plt+0x2720>
   13ab0:	ldr	r0, [pc, #448]	; 13c78 <__assert_fail@plt+0x28c8>
   13ab4:	bl	11284 <gettext@plt>
   13ab8:	mov	r3, r0
   13abc:	ldr	r2, [pc, #440]	; 13c7c <__assert_fail@plt+0x28cc>
   13ac0:	mov	r1, #0
   13ac4:	mov	r0, #0
   13ac8:	bl	111e8 <error@plt>
   13acc:	b	13b1c <__assert_fail@plt+0x276c>
   13ad0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13ad4:	bl	13ff8 <__assert_fail@plt+0x2c48>
   13ad8:	str	r0, [fp, #-88]	; 0xffffffa8
   13adc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13ae0:	mov	r1, #3
   13ae4:	mov	r0, #0
   13ae8:	bl	16ed8 <__assert_fail@plt+0x5b28>
   13aec:	mov	r4, r0
   13af0:	ldr	r0, [pc, #384]	; 13c78 <__assert_fail@plt+0x28c8>
   13af4:	bl	11284 <gettext@plt>
   13af8:	mov	r3, r0
   13afc:	str	r3, [sp, #4]
   13b00:	ldr	r3, [fp, #-88]	; 0xffffffa8
   13b04:	str	r3, [sp]
   13b08:	mov	r3, r4
   13b0c:	ldr	r2, [pc, #364]	; 13c80 <__assert_fail@plt+0x28d0>
   13b10:	mov	r1, #0
   13b14:	mov	r0, #0
   13b18:	bl	111e8 <error@plt>
   13b1c:	mov	r3, #1
   13b20:	strb	r3, [fp, #-69]	; 0xffffffbb
   13b24:	ldrb	r3, [fp, #-69]	; 0xffffffbb
   13b28:	cmp	r3, #0
   13b2c:	beq	13b3c <__assert_fail@plt+0x278c>
   13b30:	mov	r3, #0
   13b34:	strb	r3, [fp, #-37]	; 0xffffffdb
   13b38:	b	13b9c <__assert_fail@plt+0x27ec>
   13b3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13b40:	cmp	r3, #0
   13b44:	beq	13b64 <__assert_fail@plt+0x27b4>
   13b48:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13b4c:	mov	r3, r2
   13b50:	lsl	r3, r3, #3
   13b54:	sub	r3, r3, r2
   13b58:	lsl	r3, r3, #4
   13b5c:	mov	r2, r3
   13b60:	b	13b68 <__assert_fail@plt+0x27b8>
   13b64:	mov	r2, #0
   13b68:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13b6c:	add	r3, r3, r2
   13b70:	mov	r1, r3
   13b74:	ldr	r0, [fp, #-84]	; 0xffffffac
   13b78:	bl	12e64 <__assert_fail@plt+0x1ab4>
   13b7c:	mov	r3, r0
   13b80:	mov	r2, r3
   13b84:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13b88:	and	r3, r3, r2
   13b8c:	cmp	r3, #0
   13b90:	movne	r3, #1
   13b94:	moveq	r3, #0
   13b98:	strb	r3, [fp, #-37]	; 0xffffffdb
   13b9c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13ba0:	cmp	r3, #0
   13ba4:	bne	13bb4 <__assert_fail@plt+0x2804>
   13ba8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13bac:	mov	r2, #1
   13bb0:	str	r2, [r3]
   13bb4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13bb8:	add	r3, r3, #1
   13bbc:	str	r3, [fp, #-68]	; 0xffffffbc
   13bc0:	b	1397c <__assert_fail@plt+0x25cc>
   13bc4:	nop			; (mov r0, r0)
   13bc8:	andeq	r0, r0, r0
   13bcc:	andmi	r0, r0, r0
   13bd0:	andeq	r0, r0, r0
   13bd4:	cmnmi	r4, r0
   13bd8:	andeq	sl, r1, ip, asr sp
   13bdc:	andeq	fp, r1, r0, lsr #6
   13be0:	andeq	sl, r1, r4, ror sp
   13be4:	strdeq	r4, [r1], -r8
   13be8:	andeq	ip, r2, r8, ror #3
   13bec:	muleq	r2, ip, r1
   13bf0:	andeq	fp, r1, r8, lsr r3
   13bf4:	andeq	ip, r2, ip, ror #3
   13bf8:	ldrdeq	ip, [r2], -fp
   13bfc:	ldrdeq	ip, [r2], -sl
   13c00:	ldrdeq	ip, [r2], -r9
   13c04:	ldrdeq	ip, [r2], -r8
   13c08:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   13c0c:	andeq	r0, r0, r1, lsl #2
   13c10:	andeq	ip, r2, r8, lsr #3
   13c14:	andeq	ip, r2, r0, lsr #3
   13c18:	andeq	ip, r2, r0, lsr r1
   13c1c:	andeq	fp, r1, r8, asr #6
   13c20:	andeq	fp, r1, r8, asr r3
   13c24:	andeq	sl, r1, r4, lsr #25
   13c28:	andeq	fp, r1, r0, lsl #6
   13c2c:	andeq	sl, r1, r4, ror #28
   13c30:	andeq	fp, r1, r4, ror #6
   13c34:	andeq	ip, r2, r8, lsl #3
   13c38:	andeq	fp, r1, ip, ror #6
   13c3c:	muleq	r2, r0, r1
   13c40:	andeq	fp, r1, r0, lsl #7
   13c44:			; <UNDEFINED> instruction: 0x0001b3b4
   13c48:	muleq	r2, r8, r1
   13c4c:			; <UNDEFINED> instruction: 0x0001b3b8
   13c50:			; <UNDEFINED> instruction: 0x0001b3bc
   13c54:	ldrdeq	fp, [r1], -r8
   13c58:	strdeq	ip, [r2], -r0
   13c5c:	andeq	ip, r2, r0, ror #3
   13c60:	strdeq	fp, [r1], -r8
   13c64:			; <UNDEFINED> instruction: 0x0001b4b8
   13c68:	andeq	r0, r0, sl, lsr #7
   13c6c:	andeq	fp, r1, r8, lsl #8
   13c70:	andeq	fp, r1, r4, lsl r4
   13c74:	andeq	fp, r1, ip, lsr r4
   13c78:	andeq	fp, r1, ip, ror r4
   13c7c:	andeq	fp, r1, r8, lsl #6
   13c80:	muleq	r1, ip, r4
   13c84:			; <UNDEFINED> instruction: 0x0002c1b0
   13c88:			; <UNDEFINED> instruction: 0x0002c1b8
   13c8c:	andeq	ip, r2, r0, asr #3
   13c90:	andeq	ip, r2, r8, asr #3
   13c94:	ldrdeq	ip, [r2], -r0
   13c98:	andeq	fp, r1, r8, lsr #9
   13c9c:	andeq	ip, r2, r4, ror #3
   13ca0:	andeq	fp, r1, ip, lsl r3
   13ca4:	nop			; (mov r0, r0)
   13ca8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13cac:	cmp	r3, #0
   13cb0:	beq	13d00 <__assert_fail@plt+0x2950>
   13cb4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13cb8:	cmp	r3, #0
   13cbc:	bne	13d00 <__assert_fail@plt+0x2950>
   13cc0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13cc4:	bl	13ff8 <__assert_fail@plt+0x2c48>
   13cc8:	mov	r3, r0
   13ccc:	cmp	r3, #0
   13cd0:	bne	13d00 <__assert_fail@plt+0x2950>
   13cd4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13cd8:	mov	r0, #0
   13cdc:	bl	12e64 <__assert_fail@plt+0x1ab4>
   13ce0:	mov	r3, r0
   13ce4:	mov	r2, r3
   13ce8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13cec:	and	r3, r3, r2
   13cf0:	cmp	r3, #0
   13cf4:	movne	r3, #1
   13cf8:	moveq	r3, #0
   13cfc:	strb	r3, [fp, #-37]	; 0xffffffdb
   13d00:	ldrb	r3, [fp, #-53]	; 0xffffffcb
   13d04:	cmp	r3, #0
   13d08:	beq	13d18 <__assert_fail@plt+0x2968>
   13d0c:	sub	r3, fp, #232	; 0xe8
   13d10:	mov	r0, r3
   13d14:	bl	1721c <__assert_fail@plt+0x5e6c>
   13d18:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13d1c:	bl	13ff8 <__assert_fail@plt+0x2c48>
   13d20:	mov	r3, r0
   13d24:	cmp	r3, #1
   13d28:	bls	13d94 <__assert_fail@plt+0x29e4>
   13d2c:	ldr	r3, [pc, #-176]	; 13c84 <__assert_fail@plt+0x28d4>
   13d30:	ldrd	r2, [r3]
   13d34:	sub	r1, fp, #356	; 0x164
   13d38:	strd	r2, [r1]
   13d3c:	ldr	r3, [pc, #-188]	; 13c88 <__assert_fail@plt+0x28d8>
   13d40:	ldrd	r4, [r3]
   13d44:	sub	r3, fp, #364	; 0x16c
   13d48:	strd	r4, [r3]
   13d4c:	ldr	r3, [pc, #-200]	; 13c8c <__assert_fail@plt+0x28dc>
   13d50:	ldrd	r4, [r3]
   13d54:	ldr	r3, [pc, #-204]	; 13c90 <__assert_fail@plt+0x28e0>
   13d58:	ldrd	r6, [r3]
   13d5c:	ldr	r3, [pc, #-208]	; 13c94 <__assert_fail@plt+0x28e4>
   13d60:	ldrd	r8, [r3]
   13d64:	ldr	r0, [pc, #-212]	; 13c98 <__assert_fail@plt+0x28e8>
   13d68:	bl	11284 <gettext@plt>
   13d6c:	mov	r3, r0
   13d70:	str	r3, [sp, #24]
   13d74:	strd	r8, [sp, #16]
   13d78:	strd	r6, [sp, #8]
   13d7c:	strd	r4, [sp]
   13d80:	sub	r3, fp, #364	; 0x16c
   13d84:	ldrd	r2, [r3]
   13d88:	sub	r1, fp, #356	; 0x164
   13d8c:	ldrd	r0, [r1]
   13d90:	bl	11950 <__assert_fail@plt+0x5a0>
   13d94:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13d98:	bl	14050 <__assert_fail@plt+0x2ca0>
   13d9c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13da0:	bl	14468 <__assert_fail@plt+0x30b8>
   13da4:	ldr	r3, [pc, #-272]	; 13c9c <__assert_fail@plt+0x28ec>
   13da8:	ldrb	r3, [r3]
   13dac:	cmp	r3, #0
   13db0:	beq	13de4 <__assert_fail@plt+0x2a34>
   13db4:	mov	r0, #0
   13db8:	bl	11398 <close@plt>
   13dbc:	mov	r3, r0
   13dc0:	cmp	r3, #0
   13dc4:	beq	13de4 <__assert_fail@plt+0x2a34>
   13dc8:	bl	112c0 <__errno_location@plt>
   13dcc:	mov	r3, r0
   13dd0:	ldr	r3, [r3]
   13dd4:	ldr	r2, [pc, #-316]	; 13ca0 <__assert_fail@plt+0x28f0>
   13dd8:	mov	r1, r3
   13ddc:	mov	r0, #1
   13de0:	bl	111e8 <error@plt>
   13de4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13de8:	eor	r3, r3, #1
   13dec:	uxtb	r3, r3
   13df0:	mov	r0, r3
   13df4:	sub	sp, fp, #36	; 0x24
   13df8:	vpop	{d8}
   13dfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e00:	push	{fp, lr}
   13e04:	add	fp, sp, #4
   13e08:	sub	sp, sp, #16
   13e0c:	str	r0, [fp, #-16]
   13e10:	mov	r0, #24
   13e14:	bl	18e24 <__assert_fail@plt+0x7a74>
   13e18:	mov	r3, r0
   13e1c:	str	r3, [fp, #-8]
   13e20:	ldr	r3, [fp, #-8]
   13e24:	cmp	r3, #0
   13e28:	bne	13e34 <__assert_fail@plt+0x2a84>
   13e2c:	mov	r3, #0
   13e30:	b	13e5c <__assert_fail@plt+0x2aac>
   13e34:	ldr	r3, [fp, #-8]
   13e38:	mov	r2, #0
   13e3c:	str	r2, [r3]
   13e40:	ldr	r3, [fp, #-8]
   13e44:	ldr	r2, [fp, #-16]
   13e48:	str	r2, [r3, #16]
   13e4c:	ldr	r3, [fp, #-8]
   13e50:	ldr	r2, [fp, #-16]
   13e54:	str	r2, [r3, #20]
   13e58:	ldr	r3, [fp, #-8]
   13e5c:	mov	r0, r3
   13e60:	sub	sp, fp, #4
   13e64:	pop	{fp, pc}
   13e68:	push	{fp, lr}
   13e6c:	add	fp, sp, #4
   13e70:	sub	sp, sp, #16
   13e74:	str	r0, [fp, #-16]
   13e78:	mov	r0, #24
   13e7c:	bl	18e24 <__assert_fail@plt+0x7a74>
   13e80:	mov	r3, r0
   13e84:	str	r3, [fp, #-8]
   13e88:	ldr	r3, [fp, #-8]
   13e8c:	cmp	r3, #0
   13e90:	bne	13e9c <__assert_fail@plt+0x2aec>
   13e94:	mov	r3, #0
   13e98:	b	13edc <__assert_fail@plt+0x2b2c>
   13e9c:	ldr	r3, [fp, #-8]
   13ea0:	ldr	r2, [fp, #-16]
   13ea4:	str	r2, [r3]
   13ea8:	ldr	r3, [fp, #-8]
   13eac:	mov	r2, #0
   13eb0:	str	r2, [r3, #8]
   13eb4:	ldr	r3, [fp, #-8]
   13eb8:	mov	r2, #0
   13ebc:	str	r2, [r3, #12]
   13ec0:	ldr	r3, [fp, #-8]
   13ec4:	mov	r2, #0
   13ec8:	str	r2, [r3, #4]
   13ecc:	ldr	r3, [fp, #-8]
   13ed0:	mov	r2, #0
   13ed4:	str	r2, [r3, #16]
   13ed8:	ldr	r3, [fp, #-8]
   13edc:	mov	r0, r3
   13ee0:	sub	sp, fp, #4
   13ee4:	pop	{fp, pc}
   13ee8:	push	{fp, lr}
   13eec:	add	fp, sp, #4
   13ef0:	sub	sp, sp, #16
   13ef4:	str	r0, [fp, #-16]
   13ef8:	str	r1, [fp, #-20]	; 0xffffffec
   13efc:	ldr	r3, [fp, #-16]
   13f00:	ldr	r3, [r3]
   13f04:	cmp	r3, #0
   13f08:	beq	13fa0 <__assert_fail@plt+0x2bf0>
   13f0c:	ldr	r3, [fp, #-16]
   13f10:	add	r0, r3, #8
   13f14:	ldr	r3, [fp, #-16]
   13f18:	add	r1, r3, #12
   13f1c:	ldr	r3, [fp, #-16]
   13f20:	ldr	r3, [r3]
   13f24:	mov	r2, #0
   13f28:	bl	11368 <getdelim@plt>
   13f2c:	str	r0, [fp, #-8]
   13f30:	ldr	r3, [fp, #-8]
   13f34:	cmp	r3, #0
   13f38:	bge	13f74 <__assert_fail@plt+0x2bc4>
   13f3c:	ldr	r3, [fp, #-16]
   13f40:	ldr	r3, [r3]
   13f44:	mov	r0, r3
   13f48:	bl	1126c <feof@plt>
   13f4c:	mov	r3, r0
   13f50:	cmp	r3, #0
   13f54:	beq	13f60 <__assert_fail@plt+0x2bb0>
   13f58:	mov	r2, #2
   13f5c:	b	13f64 <__assert_fail@plt+0x2bb4>
   13f60:	mov	r2, #4
   13f64:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f68:	str	r2, [r3]
   13f6c:	mov	r3, #0
   13f70:	b	13fec <__assert_fail@plt+0x2c3c>
   13f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f78:	mov	r2, #1
   13f7c:	str	r2, [r3]
   13f80:	ldr	r3, [fp, #-16]
   13f84:	ldr	r3, [r3, #4]
   13f88:	add	r2, r3, #1
   13f8c:	ldr	r3, [fp, #-16]
   13f90:	str	r2, [r3, #4]
   13f94:	ldr	r3, [fp, #-16]
   13f98:	ldr	r3, [r3, #8]
   13f9c:	b	13fec <__assert_fail@plt+0x2c3c>
   13fa0:	ldr	r3, [fp, #-16]
   13fa4:	ldr	r3, [r3, #20]
   13fa8:	ldr	r3, [r3]
   13fac:	cmp	r3, #0
   13fb0:	bne	13fc8 <__assert_fail@plt+0x2c18>
   13fb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fb8:	mov	r2, #2
   13fbc:	str	r2, [r3]
   13fc0:	mov	r3, #0
   13fc4:	b	13fec <__assert_fail@plt+0x2c3c>
   13fc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fcc:	mov	r2, #1
   13fd0:	str	r2, [r3]
   13fd4:	ldr	r3, [fp, #-16]
   13fd8:	ldr	r3, [r3, #20]
   13fdc:	add	r1, r3, #4
   13fe0:	ldr	r2, [fp, #-16]
   13fe4:	str	r1, [r2, #20]
   13fe8:	ldr	r3, [r3]
   13fec:	mov	r0, r3
   13ff0:	sub	sp, fp, #4
   13ff4:	pop	{fp, pc}
   13ff8:	push	{fp}		; (str fp, [sp, #-4]!)
   13ffc:	add	fp, sp, #0
   14000:	sub	sp, sp, #12
   14004:	str	r0, [fp, #-8]
   14008:	ldr	r3, [fp, #-8]
   1400c:	ldr	r3, [r3]
   14010:	cmp	r3, #0
   14014:	beq	14024 <__assert_fail@plt+0x2c74>
   14018:	ldr	r3, [fp, #-8]
   1401c:	ldr	r3, [r3, #4]
   14020:	b	14040 <__assert_fail@plt+0x2c90>
   14024:	ldr	r3, [fp, #-8]
   14028:	ldr	r3, [r3, #20]
   1402c:	mov	r2, r3
   14030:	ldr	r3, [fp, #-8]
   14034:	ldr	r3, [r3, #16]
   14038:	sub	r3, r2, r3
   1403c:	asr	r3, r3, #2
   14040:	mov	r0, r3
   14044:	add	sp, fp, #0
   14048:	pop	{fp}		; (ldr fp, [sp], #4)
   1404c:	bx	lr
   14050:	push	{fp, lr}
   14054:	add	fp, sp, #4
   14058:	sub	sp, sp, #8
   1405c:	str	r0, [fp, #-8]
   14060:	ldr	r3, [fp, #-8]
   14064:	ldr	r3, [r3]
   14068:	cmp	r3, #0
   1406c:	beq	14080 <__assert_fail@plt+0x2cd0>
   14070:	ldr	r3, [fp, #-8]
   14074:	ldr	r3, [r3, #8]
   14078:	mov	r0, r3
   1407c:	bl	14468 <__assert_fail@plt+0x30b8>
   14080:	ldr	r0, [fp, #-8]
   14084:	bl	14468 <__assert_fail@plt+0x30b8>
   14088:	nop			; (mov r0, r0)
   1408c:	sub	sp, fp, #4
   14090:	pop	{fp, pc}
   14094:	push	{fp}		; (str fp, [sp, #-4]!)
   14098:	add	fp, sp, #0
   1409c:	sub	sp, sp, #12
   140a0:	str	r0, [fp, #-8]
   140a4:	ldr	r2, [pc, #20]	; 140c0 <__assert_fail@plt+0x2d10>
   140a8:	ldr	r3, [fp, #-8]
   140ac:	str	r3, [r2]
   140b0:	nop			; (mov r0, r0)
   140b4:	add	sp, fp, #0
   140b8:	pop	{fp}		; (ldr fp, [sp], #4)
   140bc:	bx	lr
   140c0:	strdeq	ip, [r2], -r4
   140c4:	push	{fp}		; (str fp, [sp, #-4]!)
   140c8:	add	fp, sp, #0
   140cc:	sub	sp, sp, #12
   140d0:	mov	r3, r0
   140d4:	strb	r3, [fp, #-5]
   140d8:	ldr	r2, [pc, #20]	; 140f4 <__assert_fail@plt+0x2d44>
   140dc:	ldrb	r3, [fp, #-5]
   140e0:	strb	r3, [r2]
   140e4:	nop			; (mov r0, r0)
   140e8:	add	sp, fp, #0
   140ec:	pop	{fp}		; (ldr fp, [sp], #4)
   140f0:	bx	lr
   140f4:	strdeq	ip, [r2], -r8
   140f8:	push	{r4, fp, lr}
   140fc:	add	fp, sp, #8
   14100:	sub	sp, sp, #20
   14104:	ldr	r3, [pc, #256]	; 1420c <__assert_fail@plt+0x2e5c>
   14108:	ldr	r3, [r3]
   1410c:	mov	r0, r3
   14110:	bl	1908c <__assert_fail@plt+0x7cdc>
   14114:	mov	r3, r0
   14118:	cmp	r3, #0
   1411c:	beq	141d4 <__assert_fail@plt+0x2e24>
   14120:	ldr	r3, [pc, #232]	; 14210 <__assert_fail@plt+0x2e60>
   14124:	ldrb	r3, [r3]
   14128:	eor	r3, r3, #1
   1412c:	uxtb	r3, r3
   14130:	cmp	r3, #0
   14134:	bne	1414c <__assert_fail@plt+0x2d9c>
   14138:	bl	112c0 <__errno_location@plt>
   1413c:	mov	r3, r0
   14140:	ldr	r3, [r3]
   14144:	cmp	r3, #32
   14148:	beq	141d4 <__assert_fail@plt+0x2e24>
   1414c:	ldr	r0, [pc, #192]	; 14214 <__assert_fail@plt+0x2e64>
   14150:	bl	11284 <gettext@plt>
   14154:	str	r0, [fp, #-16]
   14158:	ldr	r3, [pc, #184]	; 14218 <__assert_fail@plt+0x2e68>
   1415c:	ldr	r3, [r3]
   14160:	cmp	r3, #0
   14164:	beq	141a8 <__assert_fail@plt+0x2df8>
   14168:	bl	112c0 <__errno_location@plt>
   1416c:	mov	r3, r0
   14170:	ldr	r4, [r3]
   14174:	ldr	r3, [pc, #156]	; 14218 <__assert_fail@plt+0x2e68>
   14178:	ldr	r3, [r3]
   1417c:	mov	r0, r3
   14180:	bl	16e78 <__assert_fail@plt+0x5ac8>
   14184:	mov	r2, r0
   14188:	ldr	r3, [fp, #-16]
   1418c:	str	r3, [sp]
   14190:	mov	r3, r2
   14194:	ldr	r2, [pc, #128]	; 1421c <__assert_fail@plt+0x2e6c>
   14198:	mov	r1, r4
   1419c:	mov	r0, #0
   141a0:	bl	111e8 <error@plt>
   141a4:	b	141c4 <__assert_fail@plt+0x2e14>
   141a8:	bl	112c0 <__errno_location@plt>
   141ac:	mov	r3, r0
   141b0:	ldr	r1, [r3]
   141b4:	ldr	r3, [fp, #-16]
   141b8:	ldr	r2, [pc, #96]	; 14220 <__assert_fail@plt+0x2e70>
   141bc:	mov	r0, #0
   141c0:	bl	111e8 <error@plt>
   141c4:	ldr	r3, [pc, #88]	; 14224 <__assert_fail@plt+0x2e74>
   141c8:	ldr	r3, [r3]
   141cc:	mov	r0, r3
   141d0:	bl	11110 <_exit@plt>
   141d4:	ldr	r3, [pc, #76]	; 14228 <__assert_fail@plt+0x2e78>
   141d8:	ldr	r3, [r3]
   141dc:	mov	r0, r3
   141e0:	bl	1908c <__assert_fail@plt+0x7cdc>
   141e4:	mov	r3, r0
   141e8:	cmp	r3, #0
   141ec:	beq	14200 <__assert_fail@plt+0x2e50>
   141f0:	ldr	r3, [pc, #44]	; 14224 <__assert_fail@plt+0x2e74>
   141f4:	ldr	r3, [r3]
   141f8:	mov	r0, r3
   141fc:	bl	11110 <_exit@plt>
   14200:	nop			; (mov r0, r0)
   14204:	sub	sp, fp, #8
   14208:	pop	{r4, fp, pc}
   1420c:	muleq	r2, ip, r1
   14210:	strdeq	ip, [r2], -r8
   14214:	ldrdeq	fp, [r1], -r0
   14218:	strdeq	ip, [r2], -r4
   1421c:	ldrdeq	fp, [r1], -ip
   14220:	andeq	fp, r1, r4, ror #9
   14224:	andeq	ip, r2, r4, lsr r1
   14228:	muleq	r2, r0, r1
   1422c:	push	{fp, lr}
   14230:	add	fp, sp, #4
   14234:	sub	sp, sp, #40	; 0x28
   14238:	str	r0, [fp, #-16]
   1423c:	strd	r2, [fp, #-28]	; 0xffffffe4
   14240:	ldr	r3, [fp, #12]
   14244:	str	r3, [sp, #8]
   14248:	ldrd	r2, [fp, #4]
   1424c:	strd	r2, [sp]
   14250:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   14254:	ldr	r0, [fp, #-16]
   14258:	bl	110b0 <posix_fadvise64@plt>
   1425c:	str	r0, [fp, #-8]
   14260:	nop			; (mov r0, r0)
   14264:	sub	sp, fp, #4
   14268:	pop	{fp, pc}
   1426c:	push	{fp, lr}
   14270:	add	fp, sp, #4
   14274:	sub	sp, sp, #24
   14278:	str	r0, [fp, #-8]
   1427c:	str	r1, [fp, #-12]
   14280:	ldr	r3, [fp, #-8]
   14284:	cmp	r3, #0
   14288:	beq	142bc <__assert_fail@plt+0x2f0c>
   1428c:	ldr	r0, [fp, #-8]
   14290:	bl	11308 <fileno@plt>
   14294:	mov	r1, r0
   14298:	ldr	r3, [fp, #-12]
   1429c:	str	r3, [sp, #8]
   142a0:	mov	r2, #0
   142a4:	mov	r3, #0
   142a8:	strd	r2, [sp]
   142ac:	mov	r2, #0
   142b0:	mov	r3, #0
   142b4:	mov	r0, r1
   142b8:	bl	1422c <__assert_fail@plt+0x2e7c>
   142bc:	nop			; (mov r0, r0)
   142c0:	sub	sp, fp, #4
   142c4:	pop	{fp, pc}
   142c8:	push	{fp, lr}
   142cc:	add	fp, sp, #4
   142d0:	sub	sp, sp, #32
   142d4:	str	r0, [fp, #-24]	; 0xffffffe8
   142d8:	mov	r3, #0
   142dc:	str	r3, [fp, #-8]
   142e0:	mov	r3, #0
   142e4:	str	r3, [fp, #-12]
   142e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   142ec:	bl	11308 <fileno@plt>
   142f0:	str	r0, [fp, #-16]
   142f4:	ldr	r3, [fp, #-16]
   142f8:	cmp	r3, #0
   142fc:	bge	14310 <__assert_fail@plt+0x2f60>
   14300:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14304:	bl	11314 <fclose@plt>
   14308:	mov	r3, r0
   1430c:	b	143b4 <__assert_fail@plt+0x3004>
   14310:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14314:	bl	11230 <__freading@plt>
   14318:	mov	r3, r0
   1431c:	cmp	r3, #0
   14320:	beq	1435c <__assert_fail@plt+0x2fac>
   14324:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14328:	bl	11308 <fileno@plt>
   1432c:	mov	r1, r0
   14330:	mov	r3, #1
   14334:	str	r3, [sp]
   14338:	mov	r2, #0
   1433c:	mov	r3, #0
   14340:	mov	r0, r1
   14344:	bl	111ac <lseek64@plt>
   14348:	mvn	r2, #0
   1434c:	mvn	r3, #0
   14350:	cmp	r1, r3
   14354:	cmpeq	r0, r2
   14358:	beq	14380 <__assert_fail@plt+0x2fd0>
   1435c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14360:	bl	14408 <__assert_fail@plt+0x3058>
   14364:	mov	r3, r0
   14368:	cmp	r3, #0
   1436c:	beq	14380 <__assert_fail@plt+0x2fd0>
   14370:	bl	112c0 <__errno_location@plt>
   14374:	mov	r3, r0
   14378:	ldr	r3, [r3]
   1437c:	str	r3, [fp, #-8]
   14380:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14384:	bl	11314 <fclose@plt>
   14388:	str	r0, [fp, #-12]
   1438c:	ldr	r3, [fp, #-8]
   14390:	cmp	r3, #0
   14394:	beq	143b0 <__assert_fail@plt+0x3000>
   14398:	bl	112c0 <__errno_location@plt>
   1439c:	mov	r2, r0
   143a0:	ldr	r3, [fp, #-8]
   143a4:	str	r3, [r2]
   143a8:	mvn	r3, #0
   143ac:	str	r3, [fp, #-12]
   143b0:	ldr	r3, [fp, #-12]
   143b4:	mov	r0, r3
   143b8:	sub	sp, fp, #4
   143bc:	pop	{fp, pc}
   143c0:	push	{fp, lr}
   143c4:	add	fp, sp, #4
   143c8:	sub	sp, sp, #16
   143cc:	str	r0, [fp, #-8]
   143d0:	ldr	r3, [fp, #-8]
   143d4:	ldr	r3, [r3]
   143d8:	and	r3, r3, #256	; 0x100
   143dc:	cmp	r3, #0
   143e0:	beq	143fc <__assert_fail@plt+0x304c>
   143e4:	mov	r3, #1
   143e8:	str	r3, [sp]
   143ec:	mov	r2, #0
   143f0:	mov	r3, #0
   143f4:	ldr	r0, [fp, #-8]
   143f8:	bl	144f4 <__assert_fail@plt+0x3144>
   143fc:	nop			; (mov r0, r0)
   14400:	sub	sp, fp, #4
   14404:	pop	{fp, pc}
   14408:	push	{fp, lr}
   1440c:	add	fp, sp, #4
   14410:	sub	sp, sp, #8
   14414:	str	r0, [fp, #-8]
   14418:	ldr	r3, [fp, #-8]
   1441c:	cmp	r3, #0
   14420:	beq	14438 <__assert_fail@plt+0x3088>
   14424:	ldr	r0, [fp, #-8]
   14428:	bl	11230 <__freading@plt>
   1442c:	mov	r3, r0
   14430:	cmp	r3, #0
   14434:	bne	14448 <__assert_fail@plt+0x3098>
   14438:	ldr	r0, [fp, #-8]
   1443c:	bl	110d4 <fflush@plt>
   14440:	mov	r3, r0
   14444:	b	1445c <__assert_fail@plt+0x30ac>
   14448:	ldr	r0, [fp, #-8]
   1444c:	bl	143c0 <__assert_fail@plt+0x3010>
   14450:	ldr	r0, [fp, #-8]
   14454:	bl	110d4 <fflush@plt>
   14458:	mov	r3, r0
   1445c:	mov	r0, r3
   14460:	sub	sp, fp, #4
   14464:	pop	{fp, pc}
   14468:	push	{r4, fp, lr}
   1446c:	add	fp, sp, #8
   14470:	sub	sp, sp, #20
   14474:	str	r0, [fp, #-24]	; 0xffffffe8
   14478:	bl	112c0 <__errno_location@plt>
   1447c:	mov	r3, r0
   14480:	ldr	r3, [r3]
   14484:	str	r3, [fp, #-20]	; 0xffffffec
   14488:	bl	112c0 <__errno_location@plt>
   1448c:	mov	r3, r0
   14490:	ldr	r3, [r3]
   14494:	str	r3, [fp, #-16]
   14498:	bl	112c0 <__errno_location@plt>
   1449c:	mov	r2, r0
   144a0:	mov	r3, #0
   144a4:	str	r3, [r2]
   144a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   144ac:	bl	110f8 <free@plt>
   144b0:	bl	112c0 <__errno_location@plt>
   144b4:	mov	r4, r0
   144b8:	bl	112c0 <__errno_location@plt>
   144bc:	mov	r3, r0
   144c0:	ldr	r3, [r3]
   144c4:	cmp	r3, #0
   144c8:	moveq	r3, #1
   144cc:	movne	r3, #0
   144d0:	uxtb	r3, r3
   144d4:	lsl	r3, r3, #2
   144d8:	sub	r2, fp, #12
   144dc:	add	r3, r2, r3
   144e0:	ldr	r3, [r3, #-8]
   144e4:	str	r3, [r4]
   144e8:	nop			; (mov r0, r0)
   144ec:	sub	sp, fp, #8
   144f0:	pop	{r4, fp, pc}
   144f4:	push	{fp, lr}
   144f8:	add	fp, sp, #4
   144fc:	sub	sp, sp, #32
   14500:	str	r0, [fp, #-16]
   14504:	strd	r2, [fp, #-28]	; 0xffffffe4
   14508:	ldr	r3, [fp, #-16]
   1450c:	ldr	r2, [r3, #8]
   14510:	ldr	r3, [fp, #-16]
   14514:	ldr	r3, [r3, #4]
   14518:	cmp	r2, r3
   1451c:	bne	145b4 <__assert_fail@plt+0x3204>
   14520:	ldr	r3, [fp, #-16]
   14524:	ldr	r2, [r3, #20]
   14528:	ldr	r3, [fp, #-16]
   1452c:	ldr	r3, [r3, #16]
   14530:	cmp	r2, r3
   14534:	bne	145b4 <__assert_fail@plt+0x3204>
   14538:	ldr	r3, [fp, #-16]
   1453c:	ldr	r3, [r3, #36]	; 0x24
   14540:	cmp	r3, #0
   14544:	bne	145b4 <__assert_fail@plt+0x3204>
   14548:	ldr	r0, [fp, #-16]
   1454c:	bl	11308 <fileno@plt>
   14550:	mov	r1, r0
   14554:	ldr	r3, [fp, #4]
   14558:	str	r3, [sp]
   1455c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   14560:	mov	r0, r1
   14564:	bl	111ac <lseek64@plt>
   14568:	strd	r0, [fp, #-12]
   1456c:	ldrd	r2, [fp, #-12]
   14570:	mvn	r0, #0
   14574:	mvn	r1, #0
   14578:	cmp	r3, r1
   1457c:	cmpeq	r2, r0
   14580:	bne	1458c <__assert_fail@plt+0x31dc>
   14584:	mvn	r3, #0
   14588:	b	145cc <__assert_fail@plt+0x321c>
   1458c:	ldr	r3, [fp, #-16]
   14590:	ldr	r3, [r3]
   14594:	bic	r2, r3, #16
   14598:	ldr	r3, [fp, #-16]
   1459c:	str	r2, [r3]
   145a0:	ldr	r1, [fp, #-16]
   145a4:	ldrd	r2, [fp, #-12]
   145a8:	strd	r2, [r1, #80]	; 0x50
   145ac:	mov	r3, #0
   145b0:	b	145cc <__assert_fail@plt+0x321c>
   145b4:	ldr	r3, [fp, #4]
   145b8:	str	r3, [sp]
   145bc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   145c0:	ldr	r0, [fp, #-16]
   145c4:	bl	11320 <fseeko64@plt>
   145c8:	mov	r3, r0
   145cc:	mov	r0, r3
   145d0:	sub	sp, fp, #4
   145d4:	pop	{fp, pc}
   145d8:	push	{fp, lr}
   145dc:	add	fp, sp, #4
   145e0:	sub	sp, sp, #24
   145e4:	strd	r0, [fp, #-20]	; 0xffffffec
   145e8:	str	r2, [fp, #-24]	; 0xffffffe8
   145ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145f0:	add	r3, r3, #20
   145f4:	str	r3, [fp, #-8]
   145f8:	ldr	r3, [fp, #-8]
   145fc:	mov	r2, #0
   14600:	strb	r2, [r3]
   14604:	ldr	r3, [fp, #-8]
   14608:	sub	r3, r3, #1
   1460c:	str	r3, [fp, #-8]
   14610:	ldrd	r0, [fp, #-20]	; 0xffffffec
   14614:	mov	r2, #10
   14618:	mov	r3, #0
   1461c:	bl	1aa10 <_obstack_memory_used@@Base+0xfd4>
   14620:	uxtb	r3, r2
   14624:	add	r3, r3, #48	; 0x30
   14628:	uxtb	r2, r3
   1462c:	ldr	r3, [fp, #-8]
   14630:	strb	r2, [r3]
   14634:	ldrd	r0, [fp, #-20]	; 0xffffffec
   14638:	mov	r2, #10
   1463c:	mov	r3, #0
   14640:	bl	1aa10 <_obstack_memory_used@@Base+0xfd4>
   14644:	mov	r2, r0
   14648:	mov	r3, r1
   1464c:	strd	r2, [fp, #-20]	; 0xffffffec
   14650:	ldrd	r2, [fp, #-20]	; 0xffffffec
   14654:	orrs	r3, r2, r3
   14658:	bne	14604 <__assert_fail@plt+0x3254>
   1465c:	ldr	r3, [fp, #-8]
   14660:	mov	r0, r3
   14664:	sub	sp, fp, #4
   14668:	pop	{fp, pc}
   1466c:	push	{fp, lr}
   14670:	add	fp, sp, #4
   14674:	sub	sp, sp, #16
   14678:	str	r0, [fp, #-16]
   1467c:	ldr	r0, [fp, #-16]
   14680:	bl	110e0 <wcwidth@plt>
   14684:	str	r0, [fp, #-8]
   14688:	ldr	r3, [fp, #-8]
   1468c:	cmp	r3, #0
   14690:	bge	146b4 <__assert_fail@plt+0x3304>
   14694:	ldr	r0, [fp, #-16]
   14698:	bl	11170 <iswcntrl@plt>
   1469c:	mov	r3, r0
   146a0:	cmp	r3, #0
   146a4:	moveq	r3, #1
   146a8:	movne	r3, #0
   146ac:	uxtb	r3, r3
   146b0:	b	146b8 <__assert_fail@plt+0x3308>
   146b4:	ldr	r3, [fp, #-8]
   146b8:	mov	r0, r3
   146bc:	sub	sp, fp, #4
   146c0:	pop	{fp, pc}
   146c4:	push	{fp, lr}
   146c8:	add	fp, sp, #4
   146cc:	sub	sp, sp, #8
   146d0:	str	r0, [fp, #-8]
   146d4:	str	r1, [fp, #-12]
   146d8:	ldr	r3, [fp, #-12]
   146dc:	ldr	r2, [r3]
   146e0:	ldr	r3, [fp, #-12]
   146e4:	add	r3, r3, #16
   146e8:	cmp	r2, r3
   146ec:	bne	14724 <__assert_fail@plt+0x3374>
   146f0:	ldr	r3, [fp, #-8]
   146f4:	add	r0, r3, #16
   146f8:	ldr	r3, [fp, #-12]
   146fc:	add	r1, r3, #16
   14700:	ldr	r3, [fp, #-12]
   14704:	ldr	r3, [r3, #4]
   14708:	mov	r2, r3
   1470c:	bl	1111c <memcpy@plt>
   14710:	ldr	r3, [fp, #-8]
   14714:	add	r2, r3, #16
   14718:	ldr	r3, [fp, #-8]
   1471c:	str	r2, [r3]
   14720:	b	14734 <__assert_fail@plt+0x3384>
   14724:	ldr	r3, [fp, #-12]
   14728:	ldr	r2, [r3]
   1472c:	ldr	r3, [fp, #-8]
   14730:	str	r2, [r3]
   14734:	ldr	r3, [fp, #-12]
   14738:	ldr	r2, [r3, #4]
   1473c:	ldr	r3, [fp, #-8]
   14740:	str	r2, [r3, #4]
   14744:	ldr	r3, [fp, #-12]
   14748:	ldrb	r2, [r3, #8]
   1474c:	ldr	r3, [fp, #-8]
   14750:	strb	r2, [r3, #8]
   14754:	ldr	r3, [fp, #-8]
   14758:	ldrb	r3, [r3, #8]
   1475c:	cmp	r3, #0
   14760:	beq	14774 <__assert_fail@plt+0x33c4>
   14764:	ldr	r3, [fp, #-12]
   14768:	ldr	r2, [r3, #12]
   1476c:	ldr	r3, [fp, #-8]
   14770:	str	r2, [r3, #12]
   14774:	nop			; (mov r0, r0)
   14778:	sub	sp, fp, #4
   1477c:	pop	{fp, pc}
   14780:	push	{fp}		; (str fp, [sp, #-4]!)
   14784:	add	fp, sp, #0
   14788:	sub	sp, sp, #12
   1478c:	mov	r3, r0
   14790:	strb	r3, [fp, #-5]
   14794:	ldrb	r3, [fp, #-5]
   14798:	lsr	r3, r3, #5
   1479c:	uxtb	r3, r3
   147a0:	mov	r2, r3
   147a4:	ldr	r3, [pc, #48]	; 147dc <__assert_fail@plt+0x342c>
   147a8:	ldr	r2, [r3, r2, lsl #2]
   147ac:	ldrb	r3, [fp, #-5]
   147b0:	and	r3, r3, #31
   147b4:	lsr	r3, r2, r3
   147b8:	and	r3, r3, #1
   147bc:	cmp	r3, #0
   147c0:	movne	r3, #1
   147c4:	moveq	r3, #0
   147c8:	uxtb	r3, r3
   147cc:	mov	r0, r3
   147d0:	add	sp, fp, #0
   147d4:	pop	{fp}		; (ldr fp, [sp], #4)
   147d8:	bx	lr
   147dc:	andeq	fp, r1, r8, ror #9
   147e0:	push	{fp, lr}
   147e4:	add	fp, sp, #4
   147e8:	sub	sp, sp, #32
   147ec:	str	r0, [fp, #-24]	; 0xffffffe8
   147f0:	str	r1, [fp, #-28]	; 0xffffffe4
   147f4:	str	r2, [fp, #-32]	; 0xffffffe0
   147f8:	str	r3, [fp, #-36]	; 0xffffffdc
   147fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14800:	cmp	r3, #0
   14804:	bne	14810 <__assert_fail@plt+0x3460>
   14808:	sub	r3, fp, #16
   1480c:	str	r3, [fp, #-24]	; 0xffffffe8
   14810:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14814:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14818:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1481c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14820:	bl	111dc <mbrtowc@plt>
   14824:	str	r0, [fp, #-8]
   14828:	ldr	r3, [fp, #-8]
   1482c:	cmn	r3, #3
   14830:	bls	1487c <__assert_fail@plt+0x34cc>
   14834:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14838:	cmp	r3, #0
   1483c:	beq	1487c <__assert_fail@plt+0x34cc>
   14840:	mov	r0, #0
   14844:	bl	19164 <__assert_fail@plt+0x7db4>
   14848:	mov	r3, r0
   1484c:	eor	r3, r3, #1
   14850:	uxtb	r3, r3
   14854:	cmp	r3, #0
   14858:	beq	1487c <__assert_fail@plt+0x34cc>
   1485c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14860:	ldrb	r3, [r3]
   14864:	strb	r3, [fp, #-9]
   14868:	ldrb	r2, [fp, #-9]
   1486c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14870:	str	r2, [r3]
   14874:	mov	r3, #1
   14878:	b	14880 <__assert_fail@plt+0x34d0>
   1487c:	ldr	r3, [fp, #-8]
   14880:	mov	r0, r3
   14884:	sub	sp, fp, #4
   14888:	pop	{fp, pc}
   1488c:	andeq	r0, r0, r0
   14890:	push	{fp, lr}
   14894:	add	fp, sp, #4
   14898:	sub	sp, sp, #80	; 0x50
   1489c:	mov	r0, #85	; 0x55
   148a0:	bl	1114c <sysconf@plt>
   148a4:	vmov	s15, r0
   148a8:	vcvt.f64.s32	d7, s15
   148ac:	vstr	d7, [fp, #-12]
   148b0:	mov	r0, #30
   148b4:	bl	1114c <sysconf@plt>
   148b8:	vmov	s15, r0
   148bc:	vcvt.f64.s32	d7, s15
   148c0:	vstr	d7, [fp, #-20]	; 0xffffffec
   148c4:	vldr	d7, [fp, #-12]
   148c8:	vcmpe.f64	d7, #0.0
   148cc:	vmrs	APSR_nzcv, fpscr
   148d0:	blt	148f4 <__assert_fail@plt+0x3544>
   148d4:	vldr	d7, [fp, #-20]	; 0xffffffec
   148d8:	vcmpe.f64	d7, #0.0
   148dc:	vmrs	APSR_nzcv, fpscr
   148e0:	blt	148f4 <__assert_fail@plt+0x3544>
   148e4:	vldr	d6, [fp, #-12]
   148e8:	vldr	d7, [fp, #-20]	; 0xffffffec
   148ec:	vmul.f64	d7, d6, d7
   148f0:	b	14930 <__assert_fail@plt+0x3580>
   148f4:	sub	r3, fp, #84	; 0x54
   148f8:	mov	r0, r3
   148fc:	bl	1120c <sysinfo@plt>
   14900:	mov	r3, r0
   14904:	cmp	r3, #0
   14908:	bne	1492c <__assert_fail@plt+0x357c>
   1490c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14910:	vmov	s15, r3
   14914:	vcvt.f64.u32	d6, s15
   14918:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1491c:	vmov	s15, r3
   14920:	vcvt.f64.u32	d7, s15
   14924:	vmul.f64	d7, d6, d7
   14928:	b	14930 <__assert_fail@plt+0x3580>
   1492c:	vldr	d7, [pc, #12]	; 14940 <__assert_fail@plt+0x3590>
   14930:	vmov.f64	d0, d7
   14934:	sub	sp, fp, #4
   14938:	pop	{fp, pc}
   1493c:	nop			; (mov r0, r0)
   14940:	andeq	r0, r0, r0
   14944:	orrsmi	r0, r0, r0
   14948:	push	{fp, lr}
   1494c:	add	fp, sp, #4
   14950:	sub	sp, sp, #80	; 0x50
   14954:	mov	r0, #86	; 0x56
   14958:	bl	1114c <sysconf@plt>
   1495c:	vmov	s15, r0
   14960:	vcvt.f64.s32	d7, s15
   14964:	vstr	d7, [fp, #-12]
   14968:	mov	r0, #30
   1496c:	bl	1114c <sysconf@plt>
   14970:	vmov	s15, r0
   14974:	vcvt.f64.s32	d7, s15
   14978:	vstr	d7, [fp, #-20]	; 0xffffffec
   1497c:	vldr	d7, [fp, #-12]
   14980:	vcmpe.f64	d7, #0.0
   14984:	vmrs	APSR_nzcv, fpscr
   14988:	blt	149ac <__assert_fail@plt+0x35fc>
   1498c:	vldr	d7, [fp, #-20]	; 0xffffffec
   14990:	vcmpe.f64	d7, #0.0
   14994:	vmrs	APSR_nzcv, fpscr
   14998:	blt	149ac <__assert_fail@plt+0x35fc>
   1499c:	vldr	d6, [fp, #-12]
   149a0:	vldr	d7, [fp, #-20]	; 0xffffffec
   149a4:	vmul.f64	d7, d6, d7
   149a8:	b	14a04 <__assert_fail@plt+0x3654>
   149ac:	sub	r3, fp, #84	; 0x54
   149b0:	mov	r0, r3
   149b4:	bl	1120c <sysinfo@plt>
   149b8:	mov	r3, r0
   149bc:	cmp	r3, #0
   149c0:	bne	149f4 <__assert_fail@plt+0x3644>
   149c4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   149c8:	vmov	s15, r3
   149cc:	vcvt.f64.u32	d6, s15
   149d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   149d4:	vmov	s15, r3
   149d8:	vcvt.f64.u32	d7, s15
   149dc:	vadd.f64	d6, d6, d7
   149e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   149e4:	vmov	s15, r3
   149e8:	vcvt.f64.u32	d7, s15
   149ec:	vmul.f64	d7, d6, d7
   149f0:	b	14a04 <__assert_fail@plt+0x3654>
   149f4:	bl	14890 <__assert_fail@plt+0x34e0>
   149f8:	vmov.f64	d5, d0
   149fc:	vldr	d6, [pc, #12]	; 14a10 <__assert_fail@plt+0x3660>
   14a00:	vdiv.f64	d7, d5, d6
   14a04:	vmov.f64	d0, d7
   14a08:	sub	sp, fp, #4
   14a0c:	pop	{fp, pc}
   14a10:	andeq	r0, r0, r0
   14a14:	andsmi	r0, r0, r0
   14a18:	push	{fp, lr}
   14a1c:	add	fp, sp, #4
   14a20:	sub	sp, sp, #16
   14a24:	str	r0, [fp, #-16]
   14a28:	ldr	r3, [fp, #-16]
   14a2c:	cmp	r3, #0
   14a30:	bne	14a50 <__assert_fail@plt+0x36a0>
   14a34:	ldr	r3, [pc, #220]	; 14b18 <__assert_fail@plt+0x3768>
   14a38:	ldr	r3, [r3]
   14a3c:	mov	r2, #55	; 0x37
   14a40:	mov	r1, #1
   14a44:	ldr	r0, [pc, #208]	; 14b1c <__assert_fail@plt+0x376c>
   14a48:	bl	111a0 <fwrite@plt>
   14a4c:	bl	1138c <abort@plt>
   14a50:	mov	r1, #47	; 0x2f
   14a54:	ldr	r0, [fp, #-16]
   14a58:	bl	11338 <strrchr@plt>
   14a5c:	str	r0, [fp, #-8]
   14a60:	ldr	r3, [fp, #-8]
   14a64:	cmp	r3, #0
   14a68:	beq	14a78 <__assert_fail@plt+0x36c8>
   14a6c:	ldr	r3, [fp, #-8]
   14a70:	add	r3, r3, #1
   14a74:	b	14a7c <__assert_fail@plt+0x36cc>
   14a78:	ldr	r3, [fp, #-16]
   14a7c:	str	r3, [fp, #-12]
   14a80:	ldr	r2, [fp, #-12]
   14a84:	ldr	r3, [fp, #-16]
   14a88:	sub	r3, r2, r3
   14a8c:	cmp	r3, #6
   14a90:	ble	14af4 <__assert_fail@plt+0x3744>
   14a94:	ldr	r3, [fp, #-12]
   14a98:	sub	r3, r3, #7
   14a9c:	mov	r2, #7
   14aa0:	ldr	r1, [pc, #120]	; 14b20 <__assert_fail@plt+0x3770>
   14aa4:	mov	r0, r3
   14aa8:	bl	11380 <strncmp@plt>
   14aac:	mov	r3, r0
   14ab0:	cmp	r3, #0
   14ab4:	bne	14af4 <__assert_fail@plt+0x3744>
   14ab8:	ldr	r3, [fp, #-12]
   14abc:	str	r3, [fp, #-16]
   14ac0:	mov	r2, #3
   14ac4:	ldr	r1, [pc, #88]	; 14b24 <__assert_fail@plt+0x3774>
   14ac8:	ldr	r0, [fp, #-12]
   14acc:	bl	11380 <strncmp@plt>
   14ad0:	mov	r3, r0
   14ad4:	cmp	r3, #0
   14ad8:	bne	14af4 <__assert_fail@plt+0x3744>
   14adc:	ldr	r3, [fp, #-12]
   14ae0:	add	r3, r3, #3
   14ae4:	str	r3, [fp, #-16]
   14ae8:	ldr	r2, [pc, #56]	; 14b28 <__assert_fail@plt+0x3778>
   14aec:	ldr	r3, [fp, #-16]
   14af0:	str	r3, [r2]
   14af4:	ldr	r2, [pc, #48]	; 14b2c <__assert_fail@plt+0x377c>
   14af8:	ldr	r3, [fp, #-16]
   14afc:	str	r3, [r2]
   14b00:	ldr	r2, [pc, #40]	; 14b30 <__assert_fail@plt+0x3780>
   14b04:	ldr	r3, [fp, #-16]
   14b08:	str	r3, [r2]
   14b0c:	nop			; (mov r0, r0)
   14b10:	sub	sp, fp, #4
   14b14:	pop	{fp, pc}
   14b18:	muleq	r2, r0, r1
   14b1c:	andeq	fp, r1, r8, lsl #10
   14b20:	andeq	fp, r1, r0, asr #10
   14b24:	andeq	fp, r1, r8, asr #10
   14b28:	andeq	ip, r2, r0, lsl #3
   14b2c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   14b30:	andeq	ip, r2, r4, lsl #3
   14b34:	push	{fp, lr}
   14b38:	add	fp, sp, #4
   14b3c:	sub	sp, sp, #16
   14b40:	str	r0, [fp, #-16]
   14b44:	bl	112c0 <__errno_location@plt>
   14b48:	mov	r3, r0
   14b4c:	ldr	r3, [r3]
   14b50:	str	r3, [fp, #-8]
   14b54:	ldr	r3, [fp, #-16]
   14b58:	cmp	r3, #0
   14b5c:	beq	14b68 <__assert_fail@plt+0x37b8>
   14b60:	ldr	r3, [fp, #-16]
   14b64:	b	14b6c <__assert_fail@plt+0x37bc>
   14b68:	ldr	r3, [pc, #48]	; 14ba0 <__assert_fail@plt+0x37f0>
   14b6c:	mov	r1, #48	; 0x30
   14b70:	mov	r0, r3
   14b74:	bl	18bac <__assert_fail@plt+0x77fc>
   14b78:	mov	r3, r0
   14b7c:	str	r3, [fp, #-12]
   14b80:	bl	112c0 <__errno_location@plt>
   14b84:	mov	r2, r0
   14b88:	ldr	r3, [fp, #-8]
   14b8c:	str	r3, [r2]
   14b90:	ldr	r3, [fp, #-12]
   14b94:	mov	r0, r3
   14b98:	sub	sp, fp, #4
   14b9c:	pop	{fp, pc}
   14ba0:	andeq	ip, r2, r0, lsl #4
   14ba4:	push	{fp}		; (str fp, [sp, #-4]!)
   14ba8:	add	fp, sp, #0
   14bac:	sub	sp, sp, #12
   14bb0:	str	r0, [fp, #-8]
   14bb4:	ldr	r3, [fp, #-8]
   14bb8:	cmp	r3, #0
   14bbc:	beq	14bc8 <__assert_fail@plt+0x3818>
   14bc0:	ldr	r3, [fp, #-8]
   14bc4:	b	14bcc <__assert_fail@plt+0x381c>
   14bc8:	ldr	r3, [pc, #16]	; 14be0 <__assert_fail@plt+0x3830>
   14bcc:	ldr	r3, [r3]
   14bd0:	mov	r0, r3
   14bd4:	add	sp, fp, #0
   14bd8:	pop	{fp}		; (ldr fp, [sp], #4)
   14bdc:	bx	lr
   14be0:	andeq	ip, r2, r0, lsl #4
   14be4:	push	{fp}		; (str fp, [sp, #-4]!)
   14be8:	add	fp, sp, #0
   14bec:	sub	sp, sp, #12
   14bf0:	str	r0, [fp, #-8]
   14bf4:	str	r1, [fp, #-12]
   14bf8:	ldr	r3, [fp, #-8]
   14bfc:	cmp	r3, #0
   14c00:	beq	14c0c <__assert_fail@plt+0x385c>
   14c04:	ldr	r3, [fp, #-8]
   14c08:	b	14c10 <__assert_fail@plt+0x3860>
   14c0c:	ldr	r3, [pc, #20]	; 14c28 <__assert_fail@plt+0x3878>
   14c10:	ldr	r2, [fp, #-12]
   14c14:	str	r2, [r3]
   14c18:	nop			; (mov r0, r0)
   14c1c:	add	sp, fp, #0
   14c20:	pop	{fp}		; (ldr fp, [sp], #4)
   14c24:	bx	lr
   14c28:	andeq	ip, r2, r0, lsl #4
   14c2c:	push	{fp}		; (str fp, [sp, #-4]!)
   14c30:	add	fp, sp, #0
   14c34:	sub	sp, sp, #36	; 0x24
   14c38:	str	r0, [fp, #-24]	; 0xffffffe8
   14c3c:	mov	r3, r1
   14c40:	str	r2, [fp, #-32]	; 0xffffffe0
   14c44:	strb	r3, [fp, #-25]	; 0xffffffe7
   14c48:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14c4c:	strb	r3, [fp, #-5]
   14c50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c54:	cmp	r3, #0
   14c58:	beq	14c64 <__assert_fail@plt+0x38b4>
   14c5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c60:	b	14c68 <__assert_fail@plt+0x38b8>
   14c64:	ldr	r3, [pc, #124]	; 14ce8 <__assert_fail@plt+0x3938>
   14c68:	add	r2, r3, #8
   14c6c:	ldrb	r3, [fp, #-5]
   14c70:	lsr	r3, r3, #5
   14c74:	uxtb	r3, r3
   14c78:	lsl	r3, r3, #2
   14c7c:	add	r3, r2, r3
   14c80:	str	r3, [fp, #-12]
   14c84:	ldrb	r3, [fp, #-5]
   14c88:	and	r3, r3, #31
   14c8c:	str	r3, [fp, #-16]
   14c90:	ldr	r3, [fp, #-12]
   14c94:	ldr	r2, [r3]
   14c98:	ldr	r3, [fp, #-16]
   14c9c:	lsr	r3, r2, r3
   14ca0:	and	r3, r3, #1
   14ca4:	str	r3, [fp, #-20]	; 0xffffffec
   14ca8:	ldr	r3, [fp, #-12]
   14cac:	ldr	r3, [r3]
   14cb0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14cb4:	and	r1, r2, #1
   14cb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14cbc:	eor	r1, r1, r2
   14cc0:	ldr	r2, [fp, #-16]
   14cc4:	lsl	r2, r1, r2
   14cc8:	eor	r2, r2, r3
   14ccc:	ldr	r3, [fp, #-12]
   14cd0:	str	r2, [r3]
   14cd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cd8:	mov	r0, r3
   14cdc:	add	sp, fp, #0
   14ce0:	pop	{fp}		; (ldr fp, [sp], #4)
   14ce4:	bx	lr
   14ce8:	andeq	ip, r2, r0, lsl #4
   14cec:	push	{fp}		; (str fp, [sp, #-4]!)
   14cf0:	add	fp, sp, #0
   14cf4:	sub	sp, sp, #20
   14cf8:	str	r0, [fp, #-16]
   14cfc:	str	r1, [fp, #-20]	; 0xffffffec
   14d00:	ldr	r3, [fp, #-16]
   14d04:	cmp	r3, #0
   14d08:	bne	14d14 <__assert_fail@plt+0x3964>
   14d0c:	ldr	r3, [pc, #44]	; 14d40 <__assert_fail@plt+0x3990>
   14d10:	str	r3, [fp, #-16]
   14d14:	ldr	r3, [fp, #-16]
   14d18:	ldr	r3, [r3, #4]
   14d1c:	str	r3, [fp, #-8]
   14d20:	ldr	r3, [fp, #-16]
   14d24:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d28:	str	r2, [r3, #4]
   14d2c:	ldr	r3, [fp, #-8]
   14d30:	mov	r0, r3
   14d34:	add	sp, fp, #0
   14d38:	pop	{fp}		; (ldr fp, [sp], #4)
   14d3c:	bx	lr
   14d40:	andeq	ip, r2, r0, lsl #4
   14d44:	push	{fp, lr}
   14d48:	add	fp, sp, #4
   14d4c:	sub	sp, sp, #16
   14d50:	str	r0, [fp, #-8]
   14d54:	str	r1, [fp, #-12]
   14d58:	str	r2, [fp, #-16]
   14d5c:	ldr	r3, [fp, #-8]
   14d60:	cmp	r3, #0
   14d64:	bne	14d70 <__assert_fail@plt+0x39c0>
   14d68:	ldr	r3, [pc, #76]	; 14dbc <__assert_fail@plt+0x3a0c>
   14d6c:	str	r3, [fp, #-8]
   14d70:	ldr	r3, [fp, #-8]
   14d74:	mov	r2, #10
   14d78:	str	r2, [r3]
   14d7c:	ldr	r3, [fp, #-12]
   14d80:	cmp	r3, #0
   14d84:	beq	14d94 <__assert_fail@plt+0x39e4>
   14d88:	ldr	r3, [fp, #-16]
   14d8c:	cmp	r3, #0
   14d90:	bne	14d98 <__assert_fail@plt+0x39e8>
   14d94:	bl	1138c <abort@plt>
   14d98:	ldr	r3, [fp, #-8]
   14d9c:	ldr	r2, [fp, #-12]
   14da0:	str	r2, [r3, #40]	; 0x28
   14da4:	ldr	r3, [fp, #-8]
   14da8:	ldr	r2, [fp, #-16]
   14dac:	str	r2, [r3, #44]	; 0x2c
   14db0:	nop			; (mov r0, r0)
   14db4:	sub	sp, fp, #4
   14db8:	pop	{fp, pc}
   14dbc:	andeq	ip, r2, r0, lsl #4
   14dc0:	push	{fp, lr}
   14dc4:	add	fp, sp, #4
   14dc8:	sub	sp, sp, #56	; 0x38
   14dcc:	str	r0, [fp, #-56]	; 0xffffffc8
   14dd0:	str	r1, [fp, #-60]	; 0xffffffc4
   14dd4:	sub	r3, fp, #52	; 0x34
   14dd8:	mov	r2, #48	; 0x30
   14ddc:	mov	r1, #0
   14de0:	mov	r0, r3
   14de4:	bl	112e4 <memset@plt>
   14de8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14dec:	cmp	r3, #10
   14df0:	bne	14df8 <__assert_fail@plt+0x3a48>
   14df4:	bl	1138c <abort@plt>
   14df8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14dfc:	str	r3, [fp, #-52]	; 0xffffffcc
   14e00:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14e04:	mov	lr, r3
   14e08:	sub	ip, fp, #52	; 0x34
   14e0c:	ldm	ip!, {r0, r1, r2, r3}
   14e10:	stmia	lr!, {r0, r1, r2, r3}
   14e14:	ldm	ip!, {r0, r1, r2, r3}
   14e18:	stmia	lr!, {r0, r1, r2, r3}
   14e1c:	ldm	ip, {r0, r1, r2, r3}
   14e20:	stm	lr, {r0, r1, r2, r3}
   14e24:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14e28:	sub	sp, fp, #4
   14e2c:	pop	{fp, pc}
   14e30:	push	{fp, lr}
   14e34:	add	fp, sp, #4
   14e38:	sub	sp, sp, #16
   14e3c:	str	r0, [fp, #-16]
   14e40:	str	r1, [fp, #-20]	; 0xffffffec
   14e44:	ldr	r0, [fp, #-16]
   14e48:	bl	11284 <gettext@plt>
   14e4c:	str	r0, [fp, #-8]
   14e50:	ldr	r2, [fp, #-8]
   14e54:	ldr	r3, [fp, #-16]
   14e58:	cmp	r2, r3
   14e5c:	beq	14e68 <__assert_fail@plt+0x3ab8>
   14e60:	ldr	r3, [fp, #-8]
   14e64:	b	14ef8 <__assert_fail@plt+0x3b48>
   14e68:	bl	1933c <__assert_fail@plt+0x7f8c>
   14e6c:	str	r0, [fp, #-12]
   14e70:	ldr	r1, [pc, #140]	; 14f04 <__assert_fail@plt+0x3b54>
   14e74:	ldr	r0, [fp, #-12]
   14e78:	bl	18ff4 <__assert_fail@plt+0x7c44>
   14e7c:	mov	r3, r0
   14e80:	cmp	r3, #0
   14e84:	bne	14ea8 <__assert_fail@plt+0x3af8>
   14e88:	ldr	r3, [fp, #-16]
   14e8c:	ldrb	r3, [r3]
   14e90:	cmp	r3, #96	; 0x60
   14e94:	bne	14ea0 <__assert_fail@plt+0x3af0>
   14e98:	ldr	r3, [pc, #104]	; 14f08 <__assert_fail@plt+0x3b58>
   14e9c:	b	14ef8 <__assert_fail@plt+0x3b48>
   14ea0:	ldr	r3, [pc, #100]	; 14f0c <__assert_fail@plt+0x3b5c>
   14ea4:	b	14ef8 <__assert_fail@plt+0x3b48>
   14ea8:	ldr	r1, [pc, #96]	; 14f10 <__assert_fail@plt+0x3b60>
   14eac:	ldr	r0, [fp, #-12]
   14eb0:	bl	18ff4 <__assert_fail@plt+0x7c44>
   14eb4:	mov	r3, r0
   14eb8:	cmp	r3, #0
   14ebc:	bne	14ee0 <__assert_fail@plt+0x3b30>
   14ec0:	ldr	r3, [fp, #-16]
   14ec4:	ldrb	r3, [r3]
   14ec8:	cmp	r3, #96	; 0x60
   14ecc:	bne	14ed8 <__assert_fail@plt+0x3b28>
   14ed0:	ldr	r3, [pc, #60]	; 14f14 <__assert_fail@plt+0x3b64>
   14ed4:	b	14ef8 <__assert_fail@plt+0x3b48>
   14ed8:	ldr	r3, [pc, #56]	; 14f18 <__assert_fail@plt+0x3b68>
   14edc:	b	14ef8 <__assert_fail@plt+0x3b48>
   14ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ee4:	cmp	r3, #9
   14ee8:	bne	14ef4 <__assert_fail@plt+0x3b44>
   14eec:	ldr	r3, [pc, #40]	; 14f1c <__assert_fail@plt+0x3b6c>
   14ef0:	b	14ef8 <__assert_fail@plt+0x3b48>
   14ef4:	ldr	r3, [pc, #36]	; 14f20 <__assert_fail@plt+0x3b70>
   14ef8:	mov	r0, r3
   14efc:	sub	sp, fp, #4
   14f00:	pop	{fp, pc}
   14f04:	andeq	fp, r1, r8, lsl #12
   14f08:	andeq	fp, r1, r0, lsl r6
   14f0c:	andeq	fp, r1, r4, lsl r6
   14f10:	andeq	fp, r1, r8, lsl r6
   14f14:	andeq	fp, r1, r0, lsr #12
   14f18:	andeq	fp, r1, r4, lsr #12
   14f1c:	andeq	fp, r1, r8, lsr #12
   14f20:	andeq	fp, r1, ip, lsr #12
   14f24:	push	{r4, fp, lr}
   14f28:	add	fp, sp, #8
   14f2c:	sub	sp, sp, #116	; 0x74
   14f30:	str	r0, [fp, #-88]	; 0xffffffa8
   14f34:	str	r1, [fp, #-92]	; 0xffffffa4
   14f38:	str	r2, [fp, #-96]	; 0xffffffa0
   14f3c:	str	r3, [fp, #-100]	; 0xffffff9c
   14f40:	mov	r3, #0
   14f44:	str	r3, [fp, #-20]	; 0xffffffec
   14f48:	mov	r3, #0
   14f4c:	str	r3, [fp, #-24]	; 0xffffffe8
   14f50:	mov	r3, #0
   14f54:	str	r3, [fp, #-28]	; 0xffffffe4
   14f58:	mov	r3, #0
   14f5c:	str	r3, [fp, #-32]	; 0xffffffe0
   14f60:	mov	r3, #0
   14f64:	strb	r3, [fp, #-33]	; 0xffffffdf
   14f68:	bl	111b8 <__ctype_get_mb_cur_max@plt>
   14f6c:	mov	r3, r0
   14f70:	cmp	r3, #1
   14f74:	moveq	r3, #1
   14f78:	movne	r3, #0
   14f7c:	strb	r3, [fp, #-57]	; 0xffffffc7
   14f80:	ldr	r3, [fp, #8]
   14f84:	and	r3, r3, #2
   14f88:	cmp	r3, #0
   14f8c:	movne	r3, #1
   14f90:	moveq	r3, #0
   14f94:	strb	r3, [fp, #-34]	; 0xffffffde
   14f98:	mov	r3, #0
   14f9c:	strb	r3, [fp, #-35]	; 0xffffffdd
   14fa0:	mov	r3, #0
   14fa4:	strb	r3, [fp, #-36]	; 0xffffffdc
   14fa8:	mov	r3, #1
   14fac:	strb	r3, [fp, #-37]	; 0xffffffdb
   14fb0:	ldr	r3, [fp, #4]
   14fb4:	cmp	r3, #10
   14fb8:	ldrls	pc, [pc, r3, lsl #2]
   14fbc:	b	151c4 <__assert_fail@plt+0x3e14>
   14fc0:			; <UNDEFINED> instruction: 0x000151b8
   14fc4:	andeq	r5, r1, r4, lsr r1
   14fc8:	andeq	r5, r1, r8, asr r1
   14fcc:	andeq	r5, r1, ip, lsr #2
   14fd0:	andeq	r5, r1, ip, lsr r1
   14fd4:	strdeq	r4, [r1], -ip
   14fd8:	andeq	r4, r1, ip, ror #31
   14fdc:	andeq	r5, r1, ip, asr r0
   14fe0:	andeq	r5, r1, r0, ror r0
   14fe4:	andeq	r5, r1, r0, ror r0
   14fe8:	andeq	r5, r1, r0, ror r0
   14fec:	mov	r3, #5
   14ff0:	str	r3, [fp, #4]
   14ff4:	mov	r3, #1
   14ff8:	strb	r3, [fp, #-34]	; 0xffffffde
   14ffc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15000:	eor	r3, r3, #1
   15004:	uxtb	r3, r3
   15008:	cmp	r3, #0
   1500c:	beq	15040 <__assert_fail@plt+0x3c90>
   15010:	ldr	r2, [fp, #-20]	; 0xffffffec
   15014:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15018:	cmp	r2, r3
   1501c:	bcs	15034 <__assert_fail@plt+0x3c84>
   15020:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15024:	ldr	r3, [fp, #-20]	; 0xffffffec
   15028:	add	r3, r2, r3
   1502c:	mov	r2, #34	; 0x22
   15030:	strb	r2, [r3]
   15034:	ldr	r3, [fp, #-20]	; 0xffffffec
   15038:	add	r3, r3, #1
   1503c:	str	r3, [fp, #-20]	; 0xffffffec
   15040:	mov	r3, #1
   15044:	strb	r3, [fp, #-33]	; 0xffffffdf
   15048:	ldr	r3, [pc, #3872]	; 15f70 <__assert_fail@plt+0x4bc0>
   1504c:	str	r3, [fp, #-28]	; 0xffffffe4
   15050:	mov	r3, #1
   15054:	str	r3, [fp, #-32]	; 0xffffffe0
   15058:	b	151c8 <__assert_fail@plt+0x3e18>
   1505c:	mov	r3, #1
   15060:	strb	r3, [fp, #-33]	; 0xffffffdf
   15064:	mov	r3, #0
   15068:	strb	r3, [fp, #-34]	; 0xffffffde
   1506c:	b	151c8 <__assert_fail@plt+0x3e18>
   15070:	ldr	r3, [fp, #4]
   15074:	cmp	r3, #10
   15078:	beq	1509c <__assert_fail@plt+0x3cec>
   1507c:	ldr	r1, [fp, #4]
   15080:	ldr	r0, [pc, #3820]	; 15f74 <__assert_fail@plt+0x4bc4>
   15084:	bl	14e30 <__assert_fail@plt+0x3a80>
   15088:	str	r0, [fp, #16]
   1508c:	ldr	r1, [fp, #4]
   15090:	ldr	r0, [pc, #3808]	; 15f78 <__assert_fail@plt+0x4bc8>
   15094:	bl	14e30 <__assert_fail@plt+0x3a80>
   15098:	str	r0, [fp, #20]
   1509c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   150a0:	eor	r3, r3, #1
   150a4:	uxtb	r3, r3
   150a8:	cmp	r3, #0
   150ac:	beq	1510c <__assert_fail@plt+0x3d5c>
   150b0:	ldr	r3, [fp, #16]
   150b4:	str	r3, [fp, #-28]	; 0xffffffe4
   150b8:	b	150fc <__assert_fail@plt+0x3d4c>
   150bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   150c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   150c4:	cmp	r2, r3
   150c8:	bcs	150e4 <__assert_fail@plt+0x3d34>
   150cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   150d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   150d4:	add	r3, r2, r3
   150d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   150dc:	ldrb	r2, [r2]
   150e0:	strb	r2, [r3]
   150e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   150e8:	add	r3, r3, #1
   150ec:	str	r3, [fp, #-20]	; 0xffffffec
   150f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   150f4:	add	r3, r3, #1
   150f8:	str	r3, [fp, #-28]	; 0xffffffe4
   150fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15100:	ldrb	r3, [r3]
   15104:	cmp	r3, #0
   15108:	bne	150bc <__assert_fail@plt+0x3d0c>
   1510c:	mov	r3, #1
   15110:	strb	r3, [fp, #-33]	; 0xffffffdf
   15114:	ldr	r3, [fp, #20]
   15118:	str	r3, [fp, #-28]	; 0xffffffe4
   1511c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15120:	bl	11290 <strlen@plt>
   15124:	str	r0, [fp, #-32]	; 0xffffffe0
   15128:	b	151c8 <__assert_fail@plt+0x3e18>
   1512c:	mov	r3, #1
   15130:	strb	r3, [fp, #-33]	; 0xffffffdf
   15134:	mov	r3, #1
   15138:	strb	r3, [fp, #-34]	; 0xffffffde
   1513c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15140:	eor	r3, r3, #1
   15144:	uxtb	r3, r3
   15148:	cmp	r3, #0
   1514c:	beq	15158 <__assert_fail@plt+0x3da8>
   15150:	mov	r3, #1
   15154:	strb	r3, [fp, #-33]	; 0xffffffdf
   15158:	mov	r3, #2
   1515c:	str	r3, [fp, #4]
   15160:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15164:	eor	r3, r3, #1
   15168:	uxtb	r3, r3
   1516c:	cmp	r3, #0
   15170:	beq	151a4 <__assert_fail@plt+0x3df4>
   15174:	ldr	r2, [fp, #-20]	; 0xffffffec
   15178:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1517c:	cmp	r2, r3
   15180:	bcs	15198 <__assert_fail@plt+0x3de8>
   15184:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15188:	ldr	r3, [fp, #-20]	; 0xffffffec
   1518c:	add	r3, r2, r3
   15190:	mov	r2, #39	; 0x27
   15194:	strb	r2, [r3]
   15198:	ldr	r3, [fp, #-20]	; 0xffffffec
   1519c:	add	r3, r3, #1
   151a0:	str	r3, [fp, #-20]	; 0xffffffec
   151a4:	ldr	r3, [pc, #3532]	; 15f78 <__assert_fail@plt+0x4bc8>
   151a8:	str	r3, [fp, #-28]	; 0xffffffe4
   151ac:	mov	r3, #1
   151b0:	str	r3, [fp, #-32]	; 0xffffffe0
   151b4:	b	151c8 <__assert_fail@plt+0x3e18>
   151b8:	mov	r3, #0
   151bc:	strb	r3, [fp, #-34]	; 0xffffffde
   151c0:	b	151c8 <__assert_fail@plt+0x3e18>
   151c4:	bl	1138c <abort@plt>
   151c8:	mov	r3, #0
   151cc:	str	r3, [fp, #-16]
   151d0:	b	16360 <__assert_fail@plt+0x4fb0>
   151d4:	mov	r3, #0
   151d8:	strb	r3, [fp, #-40]	; 0xffffffd8
   151dc:	mov	r3, #0
   151e0:	strb	r3, [fp, #-41]	; 0xffffffd7
   151e4:	mov	r3, #0
   151e8:	strb	r3, [fp, #-42]	; 0xffffffd6
   151ec:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   151f0:	cmp	r3, #0
   151f4:	beq	15290 <__assert_fail@plt+0x3ee0>
   151f8:	ldr	r3, [fp, #4]
   151fc:	cmp	r3, #2
   15200:	beq	15290 <__assert_fail@plt+0x3ee0>
   15204:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15208:	cmp	r3, #0
   1520c:	beq	15290 <__assert_fail@plt+0x3ee0>
   15210:	ldr	r2, [fp, #-16]
   15214:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15218:	add	r4, r2, r3
   1521c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15220:	cmn	r3, #1
   15224:	bne	15248 <__assert_fail@plt+0x3e98>
   15228:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1522c:	cmp	r3, #1
   15230:	bls	15248 <__assert_fail@plt+0x3e98>
   15234:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15238:	bl	11290 <strlen@plt>
   1523c:	str	r0, [fp, #-100]	; 0xffffff9c
   15240:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15244:	b	1524c <__assert_fail@plt+0x3e9c>
   15248:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1524c:	cmp	r4, r3
   15250:	bhi	15290 <__assert_fail@plt+0x3ee0>
   15254:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15258:	ldr	r3, [fp, #-16]
   1525c:	add	r3, r2, r3
   15260:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15264:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15268:	mov	r0, r3
   1526c:	bl	11134 <memcmp@plt>
   15270:	mov	r3, r0
   15274:	cmp	r3, #0
   15278:	bne	15290 <__assert_fail@plt+0x3ee0>
   1527c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15280:	cmp	r3, #0
   15284:	bne	1651c <__assert_fail@plt+0x516c>
   15288:	mov	r3, #1
   1528c:	strb	r3, [fp, #-40]	; 0xffffffd8
   15290:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15294:	ldr	r3, [fp, #-16]
   15298:	add	r3, r2, r3
   1529c:	ldrb	r3, [r3]
   152a0:	strb	r3, [fp, #-38]	; 0xffffffda
   152a4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   152a8:	cmp	r3, #126	; 0x7e
   152ac:	ldrls	pc, [pc, r3, lsl #2]
   152b0:	b	15adc <__assert_fail@plt+0x472c>
   152b4:			; <UNDEFINED> instruction: 0x000154b0
   152b8:	ldrdeq	r5, [r1], -ip
   152bc:	ldrdeq	r5, [r1], -ip
   152c0:	ldrdeq	r5, [r1], -ip
   152c4:	ldrdeq	r5, [r1], -ip
   152c8:	ldrdeq	r5, [r1], -ip
   152cc:	ldrdeq	r5, [r1], -ip
   152d0:	andeq	r5, r1, r0, lsr #17
   152d4:	andeq	r5, r1, ip, lsr #17
   152d8:	ldrdeq	r5, [r1], -ip
   152dc:	andeq	r5, r1, r4, asr #17
   152e0:	andeq	r5, r1, r8, ror #17
   152e4:			; <UNDEFINED> instruction: 0x000158b8
   152e8:	ldrdeq	r5, [r1], -r0
   152ec:	ldrdeq	r5, [r1], -ip
   152f0:	ldrdeq	r5, [r1], -ip
   152f4:	ldrdeq	r5, [r1], -ip
   152f8:	ldrdeq	r5, [r1], -ip
   152fc:	ldrdeq	r5, [r1], -ip
   15300:	ldrdeq	r5, [r1], -ip
   15304:	ldrdeq	r5, [r1], -ip
   15308:	ldrdeq	r5, [r1], -ip
   1530c:	ldrdeq	r5, [r1], -ip
   15310:	ldrdeq	r5, [r1], -ip
   15314:	ldrdeq	r5, [r1], -ip
   15318:	ldrdeq	r5, [r1], -ip
   1531c:	ldrdeq	r5, [r1], -ip
   15320:	ldrdeq	r5, [r1], -ip
   15324:	ldrdeq	r5, [r1], -ip
   15328:	ldrdeq	r5, [r1], -ip
   1532c:	ldrdeq	r5, [r1], -ip
   15330:	ldrdeq	r5, [r1], -ip
   15334:	andeq	r5, r1, r0, asr #19
   15338:	andeq	r5, r1, r8, asr #19
   1533c:	andeq	r5, r1, r8, asr #19
   15340:			; <UNDEFINED> instruction: 0x000159b4
   15344:	andeq	r5, r1, r8, asr #19
   15348:	ldrdeq	r5, [r1], -r0
   1534c:	andeq	r5, r1, r8, asr #19
   15350:	andeq	r5, r1, r4, ror #19
   15354:	andeq	r5, r1, r8, asr #19
   15358:	andeq	r5, r1, r8, asr #19
   1535c:	andeq	r5, r1, r8, asr #19
   15360:	ldrdeq	r5, [r1], -r0
   15364:	ldrdeq	r5, [r1], -r0
   15368:	ldrdeq	r5, [r1], -r0
   1536c:	ldrdeq	r5, [r1], -r0
   15370:	ldrdeq	r5, [r1], -r0
   15374:	ldrdeq	r5, [r1], -r0
   15378:	ldrdeq	r5, [r1], -r0
   1537c:	ldrdeq	r5, [r1], -r0
   15380:	ldrdeq	r5, [r1], -r0
   15384:	ldrdeq	r5, [r1], -r0
   15388:	ldrdeq	r5, [r1], -r0
   1538c:	ldrdeq	r5, [r1], -r0
   15390:	ldrdeq	r5, [r1], -r0
   15394:	ldrdeq	r5, [r1], -r0
   15398:	ldrdeq	r5, [r1], -r0
   1539c:	ldrdeq	r5, [r1], -r0
   153a0:	andeq	r5, r1, r8, asr #19
   153a4:	andeq	r5, r1, r8, asr #19
   153a8:	andeq	r5, r1, r8, asr #19
   153ac:	andeq	r5, r1, r8, asr #19
   153b0:	muleq	r1, r0, r6
   153b4:	ldrdeq	r5, [r1], -ip
   153b8:	ldrdeq	r5, [r1], -r0
   153bc:	ldrdeq	r5, [r1], -r0
   153c0:	ldrdeq	r5, [r1], -r0
   153c4:	ldrdeq	r5, [r1], -r0
   153c8:	ldrdeq	r5, [r1], -r0
   153cc:	ldrdeq	r5, [r1], -r0
   153d0:	ldrdeq	r5, [r1], -r0
   153d4:	ldrdeq	r5, [r1], -r0
   153d8:	ldrdeq	r5, [r1], -r0
   153dc:	ldrdeq	r5, [r1], -r0
   153e0:	ldrdeq	r5, [r1], -r0
   153e4:	ldrdeq	r5, [r1], -r0
   153e8:	ldrdeq	r5, [r1], -r0
   153ec:	ldrdeq	r5, [r1], -r0
   153f0:	ldrdeq	r5, [r1], -r0
   153f4:	ldrdeq	r5, [r1], -r0
   153f8:	ldrdeq	r5, [r1], -r0
   153fc:	ldrdeq	r5, [r1], -r0
   15400:	ldrdeq	r5, [r1], -r0
   15404:	ldrdeq	r5, [r1], -r0
   15408:	ldrdeq	r5, [r1], -r0
   1540c:	ldrdeq	r5, [r1], -r0
   15410:	ldrdeq	r5, [r1], -r0
   15414:	ldrdeq	r5, [r1], -r0
   15418:	ldrdeq	r5, [r1], -r0
   1541c:	ldrdeq	r5, [r1], -r0
   15420:	andeq	r5, r1, r8, asr #19
   15424:	strdeq	r5, [r1], -r4
   15428:	ldrdeq	r5, [r1], -r0
   1542c:	andeq	r5, r1, r8, asr #19
   15430:	ldrdeq	r5, [r1], -r0
   15434:	andeq	r5, r1, r8, asr #19
   15438:	ldrdeq	r5, [r1], -r0
   1543c:	ldrdeq	r5, [r1], -r0
   15440:	ldrdeq	r5, [r1], -r0
   15444:	ldrdeq	r5, [r1], -r0
   15448:	ldrdeq	r5, [r1], -r0
   1544c:	ldrdeq	r5, [r1], -r0
   15450:	ldrdeq	r5, [r1], -r0
   15454:	ldrdeq	r5, [r1], -r0
   15458:	ldrdeq	r5, [r1], -r0
   1545c:	ldrdeq	r5, [r1], -r0
   15460:	ldrdeq	r5, [r1], -r0
   15464:	ldrdeq	r5, [r1], -r0
   15468:	ldrdeq	r5, [r1], -r0
   1546c:	ldrdeq	r5, [r1], -r0
   15470:	ldrdeq	r5, [r1], -r0
   15474:	ldrdeq	r5, [r1], -r0
   15478:	ldrdeq	r5, [r1], -r0
   1547c:	ldrdeq	r5, [r1], -r0
   15480:	ldrdeq	r5, [r1], -r0
   15484:	ldrdeq	r5, [r1], -r0
   15488:	ldrdeq	r5, [r1], -r0
   1548c:	ldrdeq	r5, [r1], -r0
   15490:	ldrdeq	r5, [r1], -r0
   15494:	ldrdeq	r5, [r1], -r0
   15498:	ldrdeq	r5, [r1], -r0
   1549c:	ldrdeq	r5, [r1], -r0
   154a0:	andeq	r5, r1, ip, ror #18
   154a4:	andeq	r5, r1, r8, asr #19
   154a8:	andeq	r5, r1, ip, ror #18
   154ac:			; <UNDEFINED> instruction: 0x000159b4
   154b0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   154b4:	cmp	r3, #0
   154b8:	beq	1567c <__assert_fail@plt+0x42cc>
   154bc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   154c0:	cmp	r3, #0
   154c4:	bne	16524 <__assert_fail@plt+0x5174>
   154c8:	mov	r3, #1
   154cc:	strb	r3, [fp, #-41]	; 0xffffffd7
   154d0:	ldr	r3, [fp, #4]
   154d4:	cmp	r3, #2
   154d8:	bne	15588 <__assert_fail@plt+0x41d8>
   154dc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   154e0:	eor	r3, r3, #1
   154e4:	uxtb	r3, r3
   154e8:	cmp	r3, #0
   154ec:	beq	15588 <__assert_fail@plt+0x41d8>
   154f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   154f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154f8:	cmp	r2, r3
   154fc:	bcs	15514 <__assert_fail@plt+0x4164>
   15500:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15504:	ldr	r3, [fp, #-20]	; 0xffffffec
   15508:	add	r3, r2, r3
   1550c:	mov	r2, #39	; 0x27
   15510:	strb	r2, [r3]
   15514:	ldr	r3, [fp, #-20]	; 0xffffffec
   15518:	add	r3, r3, #1
   1551c:	str	r3, [fp, #-20]	; 0xffffffec
   15520:	ldr	r2, [fp, #-20]	; 0xffffffec
   15524:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15528:	cmp	r2, r3
   1552c:	bcs	15544 <__assert_fail@plt+0x4194>
   15530:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15534:	ldr	r3, [fp, #-20]	; 0xffffffec
   15538:	add	r3, r2, r3
   1553c:	mov	r2, #36	; 0x24
   15540:	strb	r2, [r3]
   15544:	ldr	r3, [fp, #-20]	; 0xffffffec
   15548:	add	r3, r3, #1
   1554c:	str	r3, [fp, #-20]	; 0xffffffec
   15550:	ldr	r2, [fp, #-20]	; 0xffffffec
   15554:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15558:	cmp	r2, r3
   1555c:	bcs	15574 <__assert_fail@plt+0x41c4>
   15560:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15564:	ldr	r3, [fp, #-20]	; 0xffffffec
   15568:	add	r3, r2, r3
   1556c:	mov	r2, #39	; 0x27
   15570:	strb	r2, [r3]
   15574:	ldr	r3, [fp, #-20]	; 0xffffffec
   15578:	add	r3, r3, #1
   1557c:	str	r3, [fp, #-20]	; 0xffffffec
   15580:	mov	r3, #1
   15584:	strb	r3, [fp, #-35]	; 0xffffffdd
   15588:	ldr	r2, [fp, #-20]	; 0xffffffec
   1558c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15590:	cmp	r2, r3
   15594:	bcs	155ac <__assert_fail@plt+0x41fc>
   15598:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1559c:	ldr	r3, [fp, #-20]	; 0xffffffec
   155a0:	add	r3, r2, r3
   155a4:	mov	r2, #92	; 0x5c
   155a8:	strb	r2, [r3]
   155ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   155b0:	add	r3, r3, #1
   155b4:	str	r3, [fp, #-20]	; 0xffffffec
   155b8:	ldr	r3, [fp, #4]
   155bc:	cmp	r3, #2
   155c0:	beq	15670 <__assert_fail@plt+0x42c0>
   155c4:	ldr	r3, [fp, #-16]
   155c8:	add	r2, r3, #1
   155cc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   155d0:	cmp	r2, r3
   155d4:	bcs	15670 <__assert_fail@plt+0x42c0>
   155d8:	ldr	r3, [fp, #-16]
   155dc:	add	r3, r3, #1
   155e0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   155e4:	add	r3, r2, r3
   155e8:	ldrb	r3, [r3]
   155ec:	cmp	r3, #47	; 0x2f
   155f0:	bls	15670 <__assert_fail@plt+0x42c0>
   155f4:	ldr	r3, [fp, #-16]
   155f8:	add	r3, r3, #1
   155fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15600:	add	r3, r2, r3
   15604:	ldrb	r3, [r3]
   15608:	cmp	r3, #57	; 0x39
   1560c:	bhi	15670 <__assert_fail@plt+0x42c0>
   15610:	ldr	r2, [fp, #-20]	; 0xffffffec
   15614:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15618:	cmp	r2, r3
   1561c:	bcs	15634 <__assert_fail@plt+0x4284>
   15620:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15624:	ldr	r3, [fp, #-20]	; 0xffffffec
   15628:	add	r3, r2, r3
   1562c:	mov	r2, #48	; 0x30
   15630:	strb	r2, [r3]
   15634:	ldr	r3, [fp, #-20]	; 0xffffffec
   15638:	add	r3, r3, #1
   1563c:	str	r3, [fp, #-20]	; 0xffffffec
   15640:	ldr	r2, [fp, #-20]	; 0xffffffec
   15644:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15648:	cmp	r2, r3
   1564c:	bcs	15664 <__assert_fail@plt+0x42b4>
   15650:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15654:	ldr	r3, [fp, #-20]	; 0xffffffec
   15658:	add	r3, r2, r3
   1565c:	mov	r2, #48	; 0x30
   15660:	strb	r2, [r3]
   15664:	ldr	r3, [fp, #-20]	; 0xffffffec
   15668:	add	r3, r3, #1
   1566c:	str	r3, [fp, #-20]	; 0xffffffec
   15670:	mov	r3, #48	; 0x30
   15674:	strb	r3, [fp, #-38]	; 0xffffffda
   15678:	b	160b8 <__assert_fail@plt+0x4d08>
   1567c:	ldr	r3, [fp, #8]
   15680:	and	r3, r3, #1
   15684:	cmp	r3, #0
   15688:	beq	160b8 <__assert_fail@plt+0x4d08>
   1568c:	b	16354 <__assert_fail@plt+0x4fa4>
   15690:	ldr	r3, [fp, #4]
   15694:	cmp	r3, #2
   15698:	beq	156a8 <__assert_fail@plt+0x42f8>
   1569c:	cmp	r3, #5
   156a0:	beq	156b8 <__assert_fail@plt+0x4308>
   156a4:	b	1589c <__assert_fail@plt+0x44ec>
   156a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   156ac:	cmp	r3, #0
   156b0:	beq	15890 <__assert_fail@plt+0x44e0>
   156b4:	b	16560 <__assert_fail@plt+0x51b0>
   156b8:	ldr	r3, [fp, #8]
   156bc:	and	r3, r3, #4
   156c0:	cmp	r3, #0
   156c4:	beq	15898 <__assert_fail@plt+0x44e8>
   156c8:	ldr	r3, [fp, #-16]
   156cc:	add	r2, r3, #2
   156d0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   156d4:	cmp	r2, r3
   156d8:	bcs	15898 <__assert_fail@plt+0x44e8>
   156dc:	ldr	r3, [fp, #-16]
   156e0:	add	r3, r3, #1
   156e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   156e8:	add	r3, r2, r3
   156ec:	ldrb	r3, [r3]
   156f0:	cmp	r3, #63	; 0x3f
   156f4:	bne	15898 <__assert_fail@plt+0x44e8>
   156f8:	ldr	r3, [fp, #-16]
   156fc:	add	r3, r3, #2
   15700:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15704:	add	r3, r2, r3
   15708:	ldrb	r3, [r3]
   1570c:	sub	r3, r3, #33	; 0x21
   15710:	cmp	r3, #29
   15714:	ldrls	pc, [pc, r3, lsl #2]
   15718:	b	15888 <__assert_fail@plt+0x44d8>
   1571c:	muleq	r1, r4, r7
   15720:	andeq	r5, r1, r8, lsl #17
   15724:	andeq	r5, r1, r8, lsl #17
   15728:	andeq	r5, r1, r8, lsl #17
   1572c:	andeq	r5, r1, r8, lsl #17
   15730:	andeq	r5, r1, r8, lsl #17
   15734:	muleq	r1, r4, r7
   15738:	muleq	r1, r4, r7
   1573c:	muleq	r1, r4, r7
   15740:	andeq	r5, r1, r8, lsl #17
   15744:	andeq	r5, r1, r8, lsl #17
   15748:	andeq	r5, r1, r8, lsl #17
   1574c:	muleq	r1, r4, r7
   15750:	andeq	r5, r1, r8, lsl #17
   15754:	muleq	r1, r4, r7
   15758:	andeq	r5, r1, r8, lsl #17
   1575c:	andeq	r5, r1, r8, lsl #17
   15760:	andeq	r5, r1, r8, lsl #17
   15764:	andeq	r5, r1, r8, lsl #17
   15768:	andeq	r5, r1, r8, lsl #17
   1576c:	andeq	r5, r1, r8, lsl #17
   15770:	andeq	r5, r1, r8, lsl #17
   15774:	andeq	r5, r1, r8, lsl #17
   15778:	andeq	r5, r1, r8, lsl #17
   1577c:	andeq	r5, r1, r8, lsl #17
   15780:	andeq	r5, r1, r8, lsl #17
   15784:	andeq	r5, r1, r8, lsl #17
   15788:	muleq	r1, r4, r7
   1578c:	muleq	r1, r4, r7
   15790:	muleq	r1, r4, r7
   15794:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15798:	cmp	r3, #0
   1579c:	bne	1652c <__assert_fail@plt+0x517c>
   157a0:	ldr	r3, [fp, #-16]
   157a4:	add	r3, r3, #2
   157a8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   157ac:	add	r3, r2, r3
   157b0:	ldrb	r3, [r3]
   157b4:	strb	r3, [fp, #-38]	; 0xffffffda
   157b8:	ldr	r3, [fp, #-16]
   157bc:	add	r3, r3, #2
   157c0:	str	r3, [fp, #-16]
   157c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   157c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   157cc:	cmp	r2, r3
   157d0:	bcs	157e8 <__assert_fail@plt+0x4438>
   157d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   157d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   157dc:	add	r3, r2, r3
   157e0:	mov	r2, #63	; 0x3f
   157e4:	strb	r2, [r3]
   157e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   157ec:	add	r3, r3, #1
   157f0:	str	r3, [fp, #-20]	; 0xffffffec
   157f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   157f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   157fc:	cmp	r2, r3
   15800:	bcs	15818 <__assert_fail@plt+0x4468>
   15804:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1580c:	add	r3, r2, r3
   15810:	mov	r2, #34	; 0x22
   15814:	strb	r2, [r3]
   15818:	ldr	r3, [fp, #-20]	; 0xffffffec
   1581c:	add	r3, r3, #1
   15820:	str	r3, [fp, #-20]	; 0xffffffec
   15824:	ldr	r2, [fp, #-20]	; 0xffffffec
   15828:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1582c:	cmp	r2, r3
   15830:	bcs	15848 <__assert_fail@plt+0x4498>
   15834:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15838:	ldr	r3, [fp, #-20]	; 0xffffffec
   1583c:	add	r3, r2, r3
   15840:	mov	r2, #34	; 0x22
   15844:	strb	r2, [r3]
   15848:	ldr	r3, [fp, #-20]	; 0xffffffec
   1584c:	add	r3, r3, #1
   15850:	str	r3, [fp, #-20]	; 0xffffffec
   15854:	ldr	r2, [fp, #-20]	; 0xffffffec
   15858:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1585c:	cmp	r2, r3
   15860:	bcs	15878 <__assert_fail@plt+0x44c8>
   15864:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1586c:	add	r3, r2, r3
   15870:	mov	r2, #63	; 0x3f
   15874:	strb	r2, [r3]
   15878:	ldr	r3, [fp, #-20]	; 0xffffffec
   1587c:	add	r3, r3, #1
   15880:	str	r3, [fp, #-20]	; 0xffffffec
   15884:	b	1588c <__assert_fail@plt+0x44dc>
   15888:	nop			; (mov r0, r0)
   1588c:	b	15898 <__assert_fail@plt+0x44e8>
   15890:	nop			; (mov r0, r0)
   15894:	b	160e4 <__assert_fail@plt+0x4d34>
   15898:	nop			; (mov r0, r0)
   1589c:	b	160e4 <__assert_fail@plt+0x4d34>
   158a0:	mov	r3, #97	; 0x61
   158a4:	strb	r3, [fp, #-39]	; 0xffffffd9
   158a8:	b	15954 <__assert_fail@plt+0x45a4>
   158ac:	mov	r3, #98	; 0x62
   158b0:	strb	r3, [fp, #-39]	; 0xffffffd9
   158b4:	b	15954 <__assert_fail@plt+0x45a4>
   158b8:	mov	r3, #102	; 0x66
   158bc:	strb	r3, [fp, #-39]	; 0xffffffd9
   158c0:	b	15954 <__assert_fail@plt+0x45a4>
   158c4:	mov	r3, #110	; 0x6e
   158c8:	strb	r3, [fp, #-39]	; 0xffffffd9
   158cc:	b	1593c <__assert_fail@plt+0x458c>
   158d0:	mov	r3, #114	; 0x72
   158d4:	strb	r3, [fp, #-39]	; 0xffffffd9
   158d8:	b	1593c <__assert_fail@plt+0x458c>
   158dc:	mov	r3, #116	; 0x74
   158e0:	strb	r3, [fp, #-39]	; 0xffffffd9
   158e4:	b	1593c <__assert_fail@plt+0x458c>
   158e8:	mov	r3, #118	; 0x76
   158ec:	strb	r3, [fp, #-39]	; 0xffffffd9
   158f0:	b	15954 <__assert_fail@plt+0x45a4>
   158f4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   158f8:	strb	r3, [fp, #-39]	; 0xffffffd9
   158fc:	ldr	r3, [fp, #4]
   15900:	cmp	r3, #2
   15904:	bne	15918 <__assert_fail@plt+0x4568>
   15908:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1590c:	cmp	r3, #0
   15910:	beq	1626c <__assert_fail@plt+0x4ebc>
   15914:	b	16560 <__assert_fail@plt+0x51b0>
   15918:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1591c:	cmp	r3, #0
   15920:	beq	1593c <__assert_fail@plt+0x458c>
   15924:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15928:	cmp	r3, #0
   1592c:	beq	1593c <__assert_fail@plt+0x458c>
   15930:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15934:	cmp	r3, #0
   15938:	bne	16274 <__assert_fail@plt+0x4ec4>
   1593c:	ldr	r3, [fp, #4]
   15940:	cmp	r3, #2
   15944:	bne	15954 <__assert_fail@plt+0x45a4>
   15948:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1594c:	cmp	r3, #0
   15950:	bne	16534 <__assert_fail@plt+0x5184>
   15954:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15958:	cmp	r3, #0
   1595c:	beq	160c0 <__assert_fail@plt+0x4d10>
   15960:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   15964:	strb	r3, [fp, #-38]	; 0xffffffda
   15968:	b	1616c <__assert_fail@plt+0x4dbc>
   1596c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15970:	cmn	r3, #1
   15974:	bne	15998 <__assert_fail@plt+0x45e8>
   15978:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1597c:	add	r3, r3, #1
   15980:	ldrb	r3, [r3]
   15984:	cmp	r3, #0
   15988:	movne	r3, #1
   1598c:	moveq	r3, #0
   15990:	uxtb	r3, r3
   15994:	b	159ac <__assert_fail@plt+0x45fc>
   15998:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1599c:	cmp	r3, #1
   159a0:	movne	r3, #1
   159a4:	moveq	r3, #0
   159a8:	uxtb	r3, r3
   159ac:	cmp	r3, #0
   159b0:	bne	160c8 <__assert_fail@plt+0x4d18>
   159b4:	ldr	r3, [fp, #-16]
   159b8:	cmp	r3, #0
   159bc:	bne	160d0 <__assert_fail@plt+0x4d20>
   159c0:	mov	r3, #1
   159c4:	strb	r3, [fp, #-42]	; 0xffffffd6
   159c8:	ldr	r3, [fp, #4]
   159cc:	cmp	r3, #2
   159d0:	bne	160d8 <__assert_fail@plt+0x4d28>
   159d4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   159d8:	cmp	r3, #0
   159dc:	beq	160d8 <__assert_fail@plt+0x4d28>
   159e0:	b	16560 <__assert_fail@plt+0x51b0>
   159e4:	mov	r3, #1
   159e8:	strb	r3, [fp, #-36]	; 0xffffffdc
   159ec:	mov	r3, #1
   159f0:	strb	r3, [fp, #-42]	; 0xffffffd6
   159f4:	ldr	r3, [fp, #4]
   159f8:	cmp	r3, #2
   159fc:	bne	160e0 <__assert_fail@plt+0x4d30>
   15a00:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15a04:	cmp	r3, #0
   15a08:	bne	1653c <__assert_fail@plt+0x518c>
   15a0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15a10:	cmp	r3, #0
   15a14:	beq	15a34 <__assert_fail@plt+0x4684>
   15a18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a1c:	cmp	r3, #0
   15a20:	bne	15a34 <__assert_fail@plt+0x4684>
   15a24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15a28:	str	r3, [fp, #-24]	; 0xffffffe8
   15a2c:	mov	r3, #0
   15a30:	str	r3, [fp, #-92]	; 0xffffffa4
   15a34:	ldr	r2, [fp, #-20]	; 0xffffffec
   15a38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15a3c:	cmp	r2, r3
   15a40:	bcs	15a58 <__assert_fail@plt+0x46a8>
   15a44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15a48:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a4c:	add	r3, r2, r3
   15a50:	mov	r2, #39	; 0x27
   15a54:	strb	r2, [r3]
   15a58:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a5c:	add	r3, r3, #1
   15a60:	str	r3, [fp, #-20]	; 0xffffffec
   15a64:	ldr	r2, [fp, #-20]	; 0xffffffec
   15a68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15a6c:	cmp	r2, r3
   15a70:	bcs	15a88 <__assert_fail@plt+0x46d8>
   15a74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15a78:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a7c:	add	r3, r2, r3
   15a80:	mov	r2, #92	; 0x5c
   15a84:	strb	r2, [r3]
   15a88:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a8c:	add	r3, r3, #1
   15a90:	str	r3, [fp, #-20]	; 0xffffffec
   15a94:	ldr	r2, [fp, #-20]	; 0xffffffec
   15a98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15a9c:	cmp	r2, r3
   15aa0:	bcs	15ab8 <__assert_fail@plt+0x4708>
   15aa4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15aac:	add	r3, r2, r3
   15ab0:	mov	r2, #39	; 0x27
   15ab4:	strb	r2, [r3]
   15ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15abc:	add	r3, r3, #1
   15ac0:	str	r3, [fp, #-20]	; 0xffffffec
   15ac4:	mov	r3, #0
   15ac8:	strb	r3, [fp, #-35]	; 0xffffffdd
   15acc:	b	160e0 <__assert_fail@plt+0x4d30>
   15ad0:	mov	r3, #1
   15ad4:	strb	r3, [fp, #-42]	; 0xffffffd6
   15ad8:	b	160e4 <__assert_fail@plt+0x4d34>
   15adc:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   15ae0:	cmp	r3, #0
   15ae4:	beq	15b24 <__assert_fail@plt+0x4774>
   15ae8:	mov	r3, #1
   15aec:	str	r3, [fp, #-48]	; 0xffffffd0
   15af0:	bl	11254 <__ctype_b_loc@plt>
   15af4:	mov	r3, r0
   15af8:	ldr	r2, [r3]
   15afc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15b00:	lsl	r3, r3, #1
   15b04:	add	r3, r2, r3
   15b08:	ldrh	r3, [r3]
   15b0c:	and	r3, r3, #16384	; 0x4000
   15b10:	cmp	r3, #0
   15b14:	movne	r3, #1
   15b18:	moveq	r3, #0
   15b1c:	strb	r3, [fp, #-49]	; 0xffffffcf
   15b20:	b	15d70 <__assert_fail@plt+0x49c0>
   15b24:	sub	r3, fp, #76	; 0x4c
   15b28:	mov	r2, #8
   15b2c:	mov	r1, #0
   15b30:	mov	r0, r3
   15b34:	bl	112e4 <memset@plt>
   15b38:	mov	r3, #0
   15b3c:	str	r3, [fp, #-48]	; 0xffffffd0
   15b40:	mov	r3, #1
   15b44:	strb	r3, [fp, #-49]	; 0xffffffcf
   15b48:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15b4c:	cmn	r3, #1
   15b50:	bne	15b60 <__assert_fail@plt+0x47b0>
   15b54:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15b58:	bl	11290 <strlen@plt>
   15b5c:	str	r0, [fp, #-100]	; 0xffffff9c
   15b60:	ldr	r2, [fp, #-16]
   15b64:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15b68:	add	r3, r2, r3
   15b6c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15b70:	add	r1, r2, r3
   15b74:	ldr	r2, [fp, #-16]
   15b78:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15b7c:	add	r3, r2, r3
   15b80:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15b84:	sub	r2, r2, r3
   15b88:	sub	r3, fp, #76	; 0x4c
   15b8c:	sub	r0, fp, #80	; 0x50
   15b90:	bl	147e0 <__assert_fail@plt+0x3430>
   15b94:	str	r0, [fp, #-64]	; 0xffffffc0
   15b98:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15b9c:	cmp	r3, #0
   15ba0:	beq	15d64 <__assert_fail@plt+0x49b4>
   15ba4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15ba8:	cmn	r3, #1
   15bac:	bne	15bbc <__assert_fail@plt+0x480c>
   15bb0:	mov	r3, #0
   15bb4:	strb	r3, [fp, #-49]	; 0xffffffcf
   15bb8:	b	15d70 <__assert_fail@plt+0x49c0>
   15bbc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15bc0:	cmn	r3, #2
   15bc4:	bne	15c1c <__assert_fail@plt+0x486c>
   15bc8:	mov	r3, #0
   15bcc:	strb	r3, [fp, #-49]	; 0xffffffcf
   15bd0:	b	15be0 <__assert_fail@plt+0x4830>
   15bd4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15bd8:	add	r3, r3, #1
   15bdc:	str	r3, [fp, #-48]	; 0xffffffd0
   15be0:	ldr	r2, [fp, #-16]
   15be4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15be8:	add	r2, r2, r3
   15bec:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15bf0:	cmp	r2, r3
   15bf4:	bcs	15d6c <__assert_fail@plt+0x49bc>
   15bf8:	ldr	r2, [fp, #-16]
   15bfc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15c00:	add	r3, r2, r3
   15c04:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15c08:	add	r3, r2, r3
   15c0c:	ldrb	r3, [r3]
   15c10:	cmp	r3, #0
   15c14:	bne	15bd4 <__assert_fail@plt+0x4824>
   15c18:	b	15d6c <__assert_fail@plt+0x49bc>
   15c1c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15c20:	cmp	r3, #0
   15c24:	beq	15d18 <__assert_fail@plt+0x4968>
   15c28:	ldr	r3, [fp, #4]
   15c2c:	cmp	r3, #2
   15c30:	bne	15d18 <__assert_fail@plt+0x4968>
   15c34:	mov	r3, #1
   15c38:	str	r3, [fp, #-56]	; 0xffffffc8
   15c3c:	b	15d08 <__assert_fail@plt+0x4958>
   15c40:	ldr	r2, [fp, #-16]
   15c44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15c48:	add	r2, r2, r3
   15c4c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15c50:	add	r3, r2, r3
   15c54:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15c58:	add	r3, r2, r3
   15c5c:	ldrb	r3, [r3]
   15c60:	sub	r3, r3, #91	; 0x5b
   15c64:	cmp	r3, #33	; 0x21
   15c68:	ldrls	pc, [pc, r3, lsl #2]
   15c6c:	b	15cf8 <__assert_fail@plt+0x4948>
   15c70:	andeq	r6, r1, r4, asr #10
   15c74:	andeq	r6, r1, r4, asr #10
   15c78:	strdeq	r5, [r1], -r8
   15c7c:	andeq	r6, r1, r4, asr #10
   15c80:	strdeq	r5, [r1], -r8
   15c84:	andeq	r6, r1, r4, asr #10
   15c88:	strdeq	r5, [r1], -r8
   15c8c:	strdeq	r5, [r1], -r8
   15c90:	strdeq	r5, [r1], -r8
   15c94:	strdeq	r5, [r1], -r8
   15c98:	strdeq	r5, [r1], -r8
   15c9c:	strdeq	r5, [r1], -r8
   15ca0:	strdeq	r5, [r1], -r8
   15ca4:	strdeq	r5, [r1], -r8
   15ca8:	strdeq	r5, [r1], -r8
   15cac:	strdeq	r5, [r1], -r8
   15cb0:	strdeq	r5, [r1], -r8
   15cb4:	strdeq	r5, [r1], -r8
   15cb8:	strdeq	r5, [r1], -r8
   15cbc:	strdeq	r5, [r1], -r8
   15cc0:	strdeq	r5, [r1], -r8
   15cc4:	strdeq	r5, [r1], -r8
   15cc8:	strdeq	r5, [r1], -r8
   15ccc:	strdeq	r5, [r1], -r8
   15cd0:	strdeq	r5, [r1], -r8
   15cd4:	strdeq	r5, [r1], -r8
   15cd8:	strdeq	r5, [r1], -r8
   15cdc:	strdeq	r5, [r1], -r8
   15ce0:	strdeq	r5, [r1], -r8
   15ce4:	strdeq	r5, [r1], -r8
   15ce8:	strdeq	r5, [r1], -r8
   15cec:	strdeq	r5, [r1], -r8
   15cf0:	strdeq	r5, [r1], -r8
   15cf4:	andeq	r6, r1, r4, asr #10
   15cf8:	nop			; (mov r0, r0)
   15cfc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15d00:	add	r3, r3, #1
   15d04:	str	r3, [fp, #-56]	; 0xffffffc8
   15d08:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15d0c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15d10:	cmp	r2, r3
   15d14:	bcc	15c40 <__assert_fail@plt+0x4890>
   15d18:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15d1c:	mov	r0, r3
   15d20:	bl	11188 <iswprint@plt>
   15d24:	mov	r3, r0
   15d28:	cmp	r3, #0
   15d2c:	bne	15d38 <__assert_fail@plt+0x4988>
   15d30:	mov	r3, #0
   15d34:	strb	r3, [fp, #-49]	; 0xffffffcf
   15d38:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15d3c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15d40:	add	r3, r2, r3
   15d44:	str	r3, [fp, #-48]	; 0xffffffd0
   15d48:	sub	r3, fp, #76	; 0x4c
   15d4c:	mov	r0, r3
   15d50:	bl	11128 <mbsinit@plt>
   15d54:	mov	r3, r0
   15d58:	cmp	r3, #0
   15d5c:	beq	15b60 <__assert_fail@plt+0x47b0>
   15d60:	b	15d70 <__assert_fail@plt+0x49c0>
   15d64:	nop			; (mov r0, r0)
   15d68:	b	15d70 <__assert_fail@plt+0x49c0>
   15d6c:	nop			; (mov r0, r0)
   15d70:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15d74:	strb	r3, [fp, #-42]	; 0xffffffd6
   15d78:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15d7c:	cmp	r3, #1
   15d80:	bhi	15da4 <__assert_fail@plt+0x49f4>
   15d84:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15d88:	cmp	r3, #0
   15d8c:	beq	160e4 <__assert_fail@plt+0x4d34>
   15d90:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15d94:	eor	r3, r3, #1
   15d98:	uxtb	r3, r3
   15d9c:	cmp	r3, #0
   15da0:	beq	160e4 <__assert_fail@plt+0x4d34>
   15da4:	ldr	r2, [fp, #-16]
   15da8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15dac:	add	r3, r2, r3
   15db0:	str	r3, [fp, #-68]	; 0xffffffbc
   15db4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15db8:	cmp	r3, #0
   15dbc:	beq	15f7c <__assert_fail@plt+0x4bcc>
   15dc0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15dc4:	eor	r3, r3, #1
   15dc8:	uxtb	r3, r3
   15dcc:	cmp	r3, #0
   15dd0:	beq	15f7c <__assert_fail@plt+0x4bcc>
   15dd4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15dd8:	cmp	r3, #0
   15ddc:	bne	1654c <__assert_fail@plt+0x519c>
   15de0:	mov	r3, #1
   15de4:	strb	r3, [fp, #-41]	; 0xffffffd7
   15de8:	ldr	r3, [fp, #4]
   15dec:	cmp	r3, #2
   15df0:	bne	15ea0 <__assert_fail@plt+0x4af0>
   15df4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15df8:	eor	r3, r3, #1
   15dfc:	uxtb	r3, r3
   15e00:	cmp	r3, #0
   15e04:	beq	15ea0 <__assert_fail@plt+0x4af0>
   15e08:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e10:	cmp	r2, r3
   15e14:	bcs	15e2c <__assert_fail@plt+0x4a7c>
   15e18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e20:	add	r3, r2, r3
   15e24:	mov	r2, #39	; 0x27
   15e28:	strb	r2, [r3]
   15e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e30:	add	r3, r3, #1
   15e34:	str	r3, [fp, #-20]	; 0xffffffec
   15e38:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e40:	cmp	r2, r3
   15e44:	bcs	15e5c <__assert_fail@plt+0x4aac>
   15e48:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e50:	add	r3, r2, r3
   15e54:	mov	r2, #36	; 0x24
   15e58:	strb	r2, [r3]
   15e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e60:	add	r3, r3, #1
   15e64:	str	r3, [fp, #-20]	; 0xffffffec
   15e68:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e6c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e70:	cmp	r2, r3
   15e74:	bcs	15e8c <__assert_fail@plt+0x4adc>
   15e78:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e80:	add	r3, r2, r3
   15e84:	mov	r2, #39	; 0x27
   15e88:	strb	r2, [r3]
   15e8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e90:	add	r3, r3, #1
   15e94:	str	r3, [fp, #-20]	; 0xffffffec
   15e98:	mov	r3, #1
   15e9c:	strb	r3, [fp, #-35]	; 0xffffffdd
   15ea0:	ldr	r2, [fp, #-20]	; 0xffffffec
   15ea4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15ea8:	cmp	r2, r3
   15eac:	bcs	15ec4 <__assert_fail@plt+0x4b14>
   15eb0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15eb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15eb8:	add	r3, r2, r3
   15ebc:	mov	r2, #92	; 0x5c
   15ec0:	strb	r2, [r3]
   15ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ec8:	add	r3, r3, #1
   15ecc:	str	r3, [fp, #-20]	; 0xffffffec
   15ed0:	ldr	r2, [fp, #-20]	; 0xffffffec
   15ed4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15ed8:	cmp	r2, r3
   15edc:	bcs	15f04 <__assert_fail@plt+0x4b54>
   15ee0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15ee4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ee8:	add	r3, r2, r3
   15eec:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15ef0:	lsr	r2, r2, #6
   15ef4:	uxtb	r2, r2
   15ef8:	add	r2, r2, #48	; 0x30
   15efc:	uxtb	r2, r2
   15f00:	strb	r2, [r3]
   15f04:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f08:	add	r3, r3, #1
   15f0c:	str	r3, [fp, #-20]	; 0xffffffec
   15f10:	ldr	r2, [fp, #-20]	; 0xffffffec
   15f14:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15f18:	cmp	r2, r3
   15f1c:	bcs	15f4c <__assert_fail@plt+0x4b9c>
   15f20:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15f24:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f28:	add	r3, r2, r3
   15f2c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15f30:	lsr	r2, r2, #3
   15f34:	uxtb	r2, r2
   15f38:	and	r2, r2, #7
   15f3c:	uxtb	r2, r2
   15f40:	add	r2, r2, #48	; 0x30
   15f44:	uxtb	r2, r2
   15f48:	strb	r2, [r3]
   15f4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f50:	add	r3, r3, #1
   15f54:	str	r3, [fp, #-20]	; 0xffffffec
   15f58:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15f5c:	and	r3, r3, #7
   15f60:	uxtb	r3, r3
   15f64:	add	r3, r3, #48	; 0x30
   15f68:	strb	r3, [fp, #-38]	; 0xffffffda
   15f6c:	b	15fc0 <__assert_fail@plt+0x4c10>
   15f70:	andeq	fp, r1, r8, lsr #12
   15f74:	andeq	fp, r1, r0, lsr r6
   15f78:	andeq	fp, r1, ip, lsr #12
   15f7c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   15f80:	cmp	r3, #0
   15f84:	beq	15fc0 <__assert_fail@plt+0x4c10>
   15f88:	ldr	r2, [fp, #-20]	; 0xffffffec
   15f8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15f90:	cmp	r2, r3
   15f94:	bcs	15fac <__assert_fail@plt+0x4bfc>
   15f98:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15f9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fa0:	add	r3, r2, r3
   15fa4:	mov	r2, #92	; 0x5c
   15fa8:	strb	r2, [r3]
   15fac:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fb0:	add	r3, r3, #1
   15fb4:	str	r3, [fp, #-20]	; 0xffffffec
   15fb8:	mov	r3, #0
   15fbc:	strb	r3, [fp, #-40]	; 0xffffffd8
   15fc0:	ldr	r3, [fp, #-16]
   15fc4:	add	r2, r3, #1
   15fc8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15fcc:	cmp	r2, r3
   15fd0:	bcs	160b0 <__assert_fail@plt+0x4d00>
   15fd4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15fd8:	cmp	r3, #0
   15fdc:	beq	1605c <__assert_fail@plt+0x4cac>
   15fe0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   15fe4:	eor	r3, r3, #1
   15fe8:	uxtb	r3, r3
   15fec:	cmp	r3, #0
   15ff0:	beq	1605c <__assert_fail@plt+0x4cac>
   15ff4:	ldr	r2, [fp, #-20]	; 0xffffffec
   15ff8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15ffc:	cmp	r2, r3
   16000:	bcs	16018 <__assert_fail@plt+0x4c68>
   16004:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16008:	ldr	r3, [fp, #-20]	; 0xffffffec
   1600c:	add	r3, r2, r3
   16010:	mov	r2, #39	; 0x27
   16014:	strb	r2, [r3]
   16018:	ldr	r3, [fp, #-20]	; 0xffffffec
   1601c:	add	r3, r3, #1
   16020:	str	r3, [fp, #-20]	; 0xffffffec
   16024:	ldr	r2, [fp, #-20]	; 0xffffffec
   16028:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1602c:	cmp	r2, r3
   16030:	bcs	16048 <__assert_fail@plt+0x4c98>
   16034:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16038:	ldr	r3, [fp, #-20]	; 0xffffffec
   1603c:	add	r3, r2, r3
   16040:	mov	r2, #39	; 0x27
   16044:	strb	r2, [r3]
   16048:	ldr	r3, [fp, #-20]	; 0xffffffec
   1604c:	add	r3, r3, #1
   16050:	str	r3, [fp, #-20]	; 0xffffffec
   16054:	mov	r3, #0
   16058:	strb	r3, [fp, #-35]	; 0xffffffdd
   1605c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16060:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16064:	cmp	r2, r3
   16068:	bcs	16080 <__assert_fail@plt+0x4cd0>
   1606c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16070:	ldr	r3, [fp, #-20]	; 0xffffffec
   16074:	add	r3, r2, r3
   16078:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1607c:	strb	r2, [r3]
   16080:	ldr	r3, [fp, #-20]	; 0xffffffec
   16084:	add	r3, r3, #1
   16088:	str	r3, [fp, #-20]	; 0xffffffec
   1608c:	ldr	r3, [fp, #-16]
   16090:	add	r3, r3, #1
   16094:	str	r3, [fp, #-16]
   16098:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1609c:	ldr	r3, [fp, #-16]
   160a0:	add	r3, r2, r3
   160a4:	ldrb	r3, [r3]
   160a8:	strb	r3, [fp, #-38]	; 0xffffffda
   160ac:	b	15db4 <__assert_fail@plt+0x4a04>
   160b0:	nop			; (mov r0, r0)
   160b4:	b	16280 <__assert_fail@plt+0x4ed0>
   160b8:	nop			; (mov r0, r0)
   160bc:	b	160e4 <__assert_fail@plt+0x4d34>
   160c0:	nop			; (mov r0, r0)
   160c4:	b	160e4 <__assert_fail@plt+0x4d34>
   160c8:	nop			; (mov r0, r0)
   160cc:	b	160e4 <__assert_fail@plt+0x4d34>
   160d0:	nop			; (mov r0, r0)
   160d4:	b	160e4 <__assert_fail@plt+0x4d34>
   160d8:	nop			; (mov r0, r0)
   160dc:	b	160e4 <__assert_fail@plt+0x4d34>
   160e0:	nop			; (mov r0, r0)
   160e4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   160e8:	eor	r3, r3, #1
   160ec:	uxtb	r3, r3
   160f0:	cmp	r3, #0
   160f4:	bne	16104 <__assert_fail@plt+0x4d54>
   160f8:	ldr	r3, [fp, #4]
   160fc:	cmp	r3, #2
   16100:	bne	16118 <__assert_fail@plt+0x4d68>
   16104:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16108:	eor	r3, r3, #1
   1610c:	uxtb	r3, r3
   16110:	cmp	r3, #0
   16114:	bne	16158 <__assert_fail@plt+0x4da8>
   16118:	ldr	r3, [fp, #12]
   1611c:	cmp	r3, #0
   16120:	beq	16158 <__assert_fail@plt+0x4da8>
   16124:	ldrb	r3, [fp, #-38]	; 0xffffffda
   16128:	lsr	r3, r3, #5
   1612c:	uxtb	r3, r3
   16130:	lsl	r3, r3, #2
   16134:	ldr	r2, [fp, #12]
   16138:	add	r3, r2, r3
   1613c:	ldr	r2, [r3]
   16140:	ldrb	r3, [fp, #-38]	; 0xffffffda
   16144:	and	r3, r3, #31
   16148:	lsr	r3, r2, r3
   1614c:	and	r3, r3, #1
   16150:	cmp	r3, #0
   16154:	bne	1616c <__assert_fail@plt+0x4dbc>
   16158:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1615c:	eor	r3, r3, #1
   16160:	uxtb	r3, r3
   16164:	cmp	r3, #0
   16168:	bne	1627c <__assert_fail@plt+0x4ecc>
   1616c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16170:	cmp	r3, #0
   16174:	bne	16554 <__assert_fail@plt+0x51a4>
   16178:	mov	r3, #1
   1617c:	strb	r3, [fp, #-41]	; 0xffffffd7
   16180:	ldr	r3, [fp, #4]
   16184:	cmp	r3, #2
   16188:	bne	16238 <__assert_fail@plt+0x4e88>
   1618c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   16190:	eor	r3, r3, #1
   16194:	uxtb	r3, r3
   16198:	cmp	r3, #0
   1619c:	beq	16238 <__assert_fail@plt+0x4e88>
   161a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   161a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   161a8:	cmp	r2, r3
   161ac:	bcs	161c4 <__assert_fail@plt+0x4e14>
   161b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   161b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   161b8:	add	r3, r2, r3
   161bc:	mov	r2, #39	; 0x27
   161c0:	strb	r2, [r3]
   161c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   161c8:	add	r3, r3, #1
   161cc:	str	r3, [fp, #-20]	; 0xffffffec
   161d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   161d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   161d8:	cmp	r2, r3
   161dc:	bcs	161f4 <__assert_fail@plt+0x4e44>
   161e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   161e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   161e8:	add	r3, r2, r3
   161ec:	mov	r2, #36	; 0x24
   161f0:	strb	r2, [r3]
   161f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   161f8:	add	r3, r3, #1
   161fc:	str	r3, [fp, #-20]	; 0xffffffec
   16200:	ldr	r2, [fp, #-20]	; 0xffffffec
   16204:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16208:	cmp	r2, r3
   1620c:	bcs	16224 <__assert_fail@plt+0x4e74>
   16210:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16214:	ldr	r3, [fp, #-20]	; 0xffffffec
   16218:	add	r3, r2, r3
   1621c:	mov	r2, #39	; 0x27
   16220:	strb	r2, [r3]
   16224:	ldr	r3, [fp, #-20]	; 0xffffffec
   16228:	add	r3, r3, #1
   1622c:	str	r3, [fp, #-20]	; 0xffffffec
   16230:	mov	r3, #1
   16234:	strb	r3, [fp, #-35]	; 0xffffffdd
   16238:	ldr	r2, [fp, #-20]	; 0xffffffec
   1623c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16240:	cmp	r2, r3
   16244:	bcs	1625c <__assert_fail@plt+0x4eac>
   16248:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1624c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16250:	add	r3, r2, r3
   16254:	mov	r2, #92	; 0x5c
   16258:	strb	r2, [r3]
   1625c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16260:	add	r3, r3, #1
   16264:	str	r3, [fp, #-20]	; 0xffffffec
   16268:	b	16280 <__assert_fail@plt+0x4ed0>
   1626c:	nop			; (mov r0, r0)
   16270:	b	16280 <__assert_fail@plt+0x4ed0>
   16274:	nop			; (mov r0, r0)
   16278:	b	16280 <__assert_fail@plt+0x4ed0>
   1627c:	nop			; (mov r0, r0)
   16280:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   16284:	cmp	r3, #0
   16288:	beq	16308 <__assert_fail@plt+0x4f58>
   1628c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   16290:	eor	r3, r3, #1
   16294:	uxtb	r3, r3
   16298:	cmp	r3, #0
   1629c:	beq	16308 <__assert_fail@plt+0x4f58>
   162a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   162a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   162a8:	cmp	r2, r3
   162ac:	bcs	162c4 <__assert_fail@plt+0x4f14>
   162b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   162b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   162b8:	add	r3, r2, r3
   162bc:	mov	r2, #39	; 0x27
   162c0:	strb	r2, [r3]
   162c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   162c8:	add	r3, r3, #1
   162cc:	str	r3, [fp, #-20]	; 0xffffffec
   162d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   162d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   162d8:	cmp	r2, r3
   162dc:	bcs	162f4 <__assert_fail@plt+0x4f44>
   162e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   162e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   162e8:	add	r3, r2, r3
   162ec:	mov	r2, #39	; 0x27
   162f0:	strb	r2, [r3]
   162f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   162f8:	add	r3, r3, #1
   162fc:	str	r3, [fp, #-20]	; 0xffffffec
   16300:	mov	r3, #0
   16304:	strb	r3, [fp, #-35]	; 0xffffffdd
   16308:	ldr	r2, [fp, #-20]	; 0xffffffec
   1630c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16310:	cmp	r2, r3
   16314:	bcs	1632c <__assert_fail@plt+0x4f7c>
   16318:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1631c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16320:	add	r3, r2, r3
   16324:	ldrb	r2, [fp, #-38]	; 0xffffffda
   16328:	strb	r2, [r3]
   1632c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16330:	add	r3, r3, #1
   16334:	str	r3, [fp, #-20]	; 0xffffffec
   16338:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1633c:	eor	r3, r3, #1
   16340:	uxtb	r3, r3
   16344:	cmp	r3, #0
   16348:	beq	16354 <__assert_fail@plt+0x4fa4>
   1634c:	mov	r3, #0
   16350:	strb	r3, [fp, #-37]	; 0xffffffdb
   16354:	ldr	r3, [fp, #-16]
   16358:	add	r3, r3, #1
   1635c:	str	r3, [fp, #-16]
   16360:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16364:	cmn	r3, #1
   16368:	bne	16390 <__assert_fail@plt+0x4fe0>
   1636c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16370:	ldr	r3, [fp, #-16]
   16374:	add	r3, r2, r3
   16378:	ldrb	r3, [r3]
   1637c:	cmp	r3, #0
   16380:	movne	r3, #1
   16384:	moveq	r3, #0
   16388:	uxtb	r3, r3
   1638c:	b	163a8 <__assert_fail@plt+0x4ff8>
   16390:	ldr	r2, [fp, #-16]
   16394:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16398:	cmp	r2, r3
   1639c:	movne	r3, #1
   163a0:	moveq	r3, #0
   163a4:	uxtb	r3, r3
   163a8:	cmp	r3, #0
   163ac:	bne	151d4 <__assert_fail@plt+0x3e24>
   163b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   163b4:	cmp	r3, #0
   163b8:	bne	163d4 <__assert_fail@plt+0x5024>
   163bc:	ldr	r3, [fp, #4]
   163c0:	cmp	r3, #2
   163c4:	bne	163d4 <__assert_fail@plt+0x5024>
   163c8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   163cc:	cmp	r3, #0
   163d0:	bne	1655c <__assert_fail@plt+0x51ac>
   163d4:	ldr	r3, [fp, #4]
   163d8:	cmp	r3, #2
   163dc:	bne	1647c <__assert_fail@plt+0x50cc>
   163e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   163e4:	eor	r3, r3, #1
   163e8:	uxtb	r3, r3
   163ec:	cmp	r3, #0
   163f0:	beq	1647c <__assert_fail@plt+0x50cc>
   163f4:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   163f8:	cmp	r3, #0
   163fc:	beq	1647c <__assert_fail@plt+0x50cc>
   16400:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   16404:	cmp	r3, #0
   16408:	beq	16450 <__assert_fail@plt+0x50a0>
   1640c:	ldr	r3, [fp, #20]
   16410:	str	r3, [sp, #16]
   16414:	ldr	r3, [fp, #16]
   16418:	str	r3, [sp, #12]
   1641c:	ldr	r3, [fp, #12]
   16420:	str	r3, [sp, #8]
   16424:	ldr	r3, [fp, #8]
   16428:	str	r3, [sp, #4]
   1642c:	mov	r3, #5
   16430:	str	r3, [sp]
   16434:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16438:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1643c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16440:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16444:	bl	14f24 <__assert_fail@plt+0x3b74>
   16448:	mov	r3, r0
   1644c:	b	165c4 <__assert_fail@plt+0x5214>
   16450:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16454:	cmp	r3, #0
   16458:	bne	1647c <__assert_fail@plt+0x50cc>
   1645c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16460:	cmp	r3, #0
   16464:	beq	1647c <__assert_fail@plt+0x50cc>
   16468:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1646c:	str	r3, [fp, #-92]	; 0xffffffa4
   16470:	mov	r3, #0
   16474:	str	r3, [fp, #-20]	; 0xffffffec
   16478:	b	14fb0 <__assert_fail@plt+0x3c00>
   1647c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16480:	cmp	r3, #0
   16484:	beq	164f0 <__assert_fail@plt+0x5140>
   16488:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1648c:	eor	r3, r3, #1
   16490:	uxtb	r3, r3
   16494:	cmp	r3, #0
   16498:	beq	164f0 <__assert_fail@plt+0x5140>
   1649c:	b	164e0 <__assert_fail@plt+0x5130>
   164a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   164a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   164a8:	cmp	r2, r3
   164ac:	bcs	164c8 <__assert_fail@plt+0x5118>
   164b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   164b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   164b8:	add	r3, r2, r3
   164bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   164c0:	ldrb	r2, [r2]
   164c4:	strb	r2, [r3]
   164c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   164cc:	add	r3, r3, #1
   164d0:	str	r3, [fp, #-20]	; 0xffffffec
   164d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   164d8:	add	r3, r3, #1
   164dc:	str	r3, [fp, #-28]	; 0xffffffe4
   164e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   164e4:	ldrb	r3, [r3]
   164e8:	cmp	r3, #0
   164ec:	bne	164a0 <__assert_fail@plt+0x50f0>
   164f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   164f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   164f8:	cmp	r2, r3
   164fc:	bcs	16514 <__assert_fail@plt+0x5164>
   16500:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16504:	ldr	r3, [fp, #-20]	; 0xffffffec
   16508:	add	r3, r2, r3
   1650c:	mov	r2, #0
   16510:	strb	r2, [r3]
   16514:	ldr	r3, [fp, #-20]	; 0xffffffec
   16518:	b	165c4 <__assert_fail@plt+0x5214>
   1651c:	nop			; (mov r0, r0)
   16520:	b	16560 <__assert_fail@plt+0x51b0>
   16524:	nop			; (mov r0, r0)
   16528:	b	16560 <__assert_fail@plt+0x51b0>
   1652c:	nop			; (mov r0, r0)
   16530:	b	16560 <__assert_fail@plt+0x51b0>
   16534:	nop			; (mov r0, r0)
   16538:	b	16560 <__assert_fail@plt+0x51b0>
   1653c:	nop			; (mov r0, r0)
   16540:	b	16560 <__assert_fail@plt+0x51b0>
   16544:	nop			; (mov r0, r0)
   16548:	b	16560 <__assert_fail@plt+0x51b0>
   1654c:	nop			; (mov r0, r0)
   16550:	b	16560 <__assert_fail@plt+0x51b0>
   16554:	nop			; (mov r0, r0)
   16558:	b	16560 <__assert_fail@plt+0x51b0>
   1655c:	nop			; (mov r0, r0)
   16560:	ldr	r3, [fp, #4]
   16564:	cmp	r3, #2
   16568:	bne	16580 <__assert_fail@plt+0x51d0>
   1656c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   16570:	cmp	r3, #0
   16574:	beq	16580 <__assert_fail@plt+0x51d0>
   16578:	mov	r3, #4
   1657c:	str	r3, [fp, #4]
   16580:	ldr	r3, [fp, #8]
   16584:	bic	r3, r3, #2
   16588:	ldr	r2, [fp, #20]
   1658c:	str	r2, [sp, #16]
   16590:	ldr	r2, [fp, #16]
   16594:	str	r2, [sp, #12]
   16598:	mov	r2, #0
   1659c:	str	r2, [sp, #8]
   165a0:	str	r3, [sp, #4]
   165a4:	ldr	r3, [fp, #4]
   165a8:	str	r3, [sp]
   165ac:	ldr	r3, [fp, #-100]	; 0xffffff9c
   165b0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   165b4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   165b8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   165bc:	bl	14f24 <__assert_fail@plt+0x3b74>
   165c0:	mov	r3, r0
   165c4:	mov	r0, r3
   165c8:	sub	sp, fp, #8
   165cc:	pop	{r4, fp, pc}
   165d0:	push	{fp, lr}
   165d4:	add	fp, sp, #4
   165d8:	sub	sp, sp, #56	; 0x38
   165dc:	str	r0, [fp, #-24]	; 0xffffffe8
   165e0:	str	r1, [fp, #-28]	; 0xffffffe4
   165e4:	str	r2, [fp, #-32]	; 0xffffffe0
   165e8:	str	r3, [fp, #-36]	; 0xffffffdc
   165ec:	ldr	r3, [fp, #4]
   165f0:	cmp	r3, #0
   165f4:	beq	16600 <__assert_fail@plt+0x5250>
   165f8:	ldr	r3, [fp, #4]
   165fc:	b	16604 <__assert_fail@plt+0x5254>
   16600:	ldr	r3, [pc, #132]	; 1668c <__assert_fail@plt+0x52dc>
   16604:	str	r3, [fp, #-8]
   16608:	bl	112c0 <__errno_location@plt>
   1660c:	mov	r3, r0
   16610:	ldr	r3, [r3]
   16614:	str	r3, [fp, #-12]
   16618:	ldr	r3, [fp, #-8]
   1661c:	ldr	r3, [r3]
   16620:	ldr	r2, [fp, #-8]
   16624:	ldr	r2, [r2, #4]
   16628:	ldr	r1, [fp, #-8]
   1662c:	add	r1, r1, #8
   16630:	ldr	r0, [fp, #-8]
   16634:	ldr	r0, [r0, #40]	; 0x28
   16638:	ldr	ip, [fp, #-8]
   1663c:	ldr	ip, [ip, #44]	; 0x2c
   16640:	str	ip, [sp, #16]
   16644:	str	r0, [sp, #12]
   16648:	str	r1, [sp, #8]
   1664c:	str	r2, [sp, #4]
   16650:	str	r3, [sp]
   16654:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16658:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1665c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16660:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16664:	bl	14f24 <__assert_fail@plt+0x3b74>
   16668:	str	r0, [fp, #-16]
   1666c:	bl	112c0 <__errno_location@plt>
   16670:	mov	r2, r0
   16674:	ldr	r3, [fp, #-12]
   16678:	str	r3, [r2]
   1667c:	ldr	r3, [fp, #-16]
   16680:	mov	r0, r3
   16684:	sub	sp, fp, #4
   16688:	pop	{fp, pc}
   1668c:	andeq	ip, r2, r0, lsl #4
   16690:	push	{fp, lr}
   16694:	add	fp, sp, #4
   16698:	sub	sp, sp, #16
   1669c:	str	r0, [fp, #-8]
   166a0:	str	r1, [fp, #-12]
   166a4:	str	r2, [fp, #-16]
   166a8:	ldr	r3, [fp, #-16]
   166ac:	mov	r2, #0
   166b0:	ldr	r1, [fp, #-12]
   166b4:	ldr	r0, [fp, #-8]
   166b8:	bl	166cc <__assert_fail@plt+0x531c>
   166bc:	mov	r3, r0
   166c0:	mov	r0, r3
   166c4:	sub	sp, fp, #4
   166c8:	pop	{fp, pc}
   166cc:	push	{fp, lr}
   166d0:	add	fp, sp, #4
   166d4:	sub	sp, sp, #64	; 0x40
   166d8:	str	r0, [fp, #-32]	; 0xffffffe0
   166dc:	str	r1, [fp, #-36]	; 0xffffffdc
   166e0:	str	r2, [fp, #-40]	; 0xffffffd8
   166e4:	str	r3, [fp, #-44]	; 0xffffffd4
   166e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   166ec:	cmp	r3, #0
   166f0:	beq	166fc <__assert_fail@plt+0x534c>
   166f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   166f8:	b	16700 <__assert_fail@plt+0x5350>
   166fc:	ldr	r3, [pc, #292]	; 16828 <__assert_fail@plt+0x5478>
   16700:	str	r3, [fp, #-8]
   16704:	bl	112c0 <__errno_location@plt>
   16708:	mov	r3, r0
   1670c:	ldr	r3, [r3]
   16710:	str	r3, [fp, #-12]
   16714:	ldr	r3, [fp, #-8]
   16718:	ldr	r3, [r3, #4]
   1671c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16720:	cmp	r2, #0
   16724:	moveq	r2, #1
   16728:	movne	r2, #0
   1672c:	uxtb	r2, r2
   16730:	orr	r3, r3, r2
   16734:	str	r3, [fp, #-16]
   16738:	ldr	r3, [fp, #-8]
   1673c:	ldr	r3, [r3]
   16740:	ldr	r2, [fp, #-8]
   16744:	add	r2, r2, #8
   16748:	ldr	r1, [fp, #-8]
   1674c:	ldr	r1, [r1, #40]	; 0x28
   16750:	ldr	r0, [fp, #-8]
   16754:	ldr	r0, [r0, #44]	; 0x2c
   16758:	str	r0, [sp, #16]
   1675c:	str	r1, [sp, #12]
   16760:	str	r2, [sp, #8]
   16764:	ldr	r2, [fp, #-16]
   16768:	str	r2, [sp, #4]
   1676c:	str	r3, [sp]
   16770:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16774:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16778:	mov	r1, #0
   1677c:	mov	r0, #0
   16780:	bl	14f24 <__assert_fail@plt+0x3b74>
   16784:	mov	r3, r0
   16788:	add	r3, r3, #1
   1678c:	str	r3, [fp, #-20]	; 0xffffffec
   16790:	ldr	r0, [fp, #-20]	; 0xffffffec
   16794:	bl	1821c <__assert_fail@plt+0x6e6c>
   16798:	mov	r3, r0
   1679c:	str	r3, [fp, #-24]	; 0xffffffe8
   167a0:	ldr	r3, [fp, #-8]
   167a4:	ldr	r3, [r3]
   167a8:	ldr	r2, [fp, #-8]
   167ac:	add	r2, r2, #8
   167b0:	ldr	r1, [fp, #-8]
   167b4:	ldr	r1, [r1, #40]	; 0x28
   167b8:	ldr	r0, [fp, #-8]
   167bc:	ldr	r0, [r0, #44]	; 0x2c
   167c0:	str	r0, [sp, #16]
   167c4:	str	r1, [sp, #12]
   167c8:	str	r2, [sp, #8]
   167cc:	ldr	r2, [fp, #-16]
   167d0:	str	r2, [sp, #4]
   167d4:	str	r3, [sp]
   167d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   167dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   167e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   167e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   167e8:	bl	14f24 <__assert_fail@plt+0x3b74>
   167ec:	bl	112c0 <__errno_location@plt>
   167f0:	mov	r2, r0
   167f4:	ldr	r3, [fp, #-12]
   167f8:	str	r3, [r2]
   167fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16800:	cmp	r3, #0
   16804:	beq	16818 <__assert_fail@plt+0x5468>
   16808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1680c:	sub	r2, r3, #1
   16810:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16814:	str	r2, [r3]
   16818:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1681c:	mov	r0, r3
   16820:	sub	sp, fp, #4
   16824:	pop	{fp, pc}
   16828:	andeq	ip, r2, r0, lsl #4
   1682c:	push	{fp, lr}
   16830:	add	fp, sp, #4
   16834:	sub	sp, sp, #8
   16838:	ldr	r3, [pc, #196]	; 16904 <__assert_fail@plt+0x5554>
   1683c:	ldr	r3, [r3]
   16840:	str	r3, [fp, #-12]
   16844:	mov	r3, #1
   16848:	str	r3, [fp, #-8]
   1684c:	b	16878 <__assert_fail@plt+0x54c8>
   16850:	ldr	r3, [fp, #-8]
   16854:	lsl	r3, r3, #3
   16858:	ldr	r2, [fp, #-12]
   1685c:	add	r3, r2, r3
   16860:	ldr	r3, [r3, #4]
   16864:	mov	r0, r3
   16868:	bl	14468 <__assert_fail@plt+0x30b8>
   1686c:	ldr	r3, [fp, #-8]
   16870:	add	r3, r3, #1
   16874:	str	r3, [fp, #-8]
   16878:	ldr	r3, [pc, #136]	; 16908 <__assert_fail@plt+0x5558>
   1687c:	ldr	r3, [r3]
   16880:	ldr	r2, [fp, #-8]
   16884:	cmp	r2, r3
   16888:	blt	16850 <__assert_fail@plt+0x54a0>
   1688c:	ldr	r3, [fp, #-12]
   16890:	ldr	r3, [r3, #4]
   16894:	ldr	r2, [pc, #112]	; 1690c <__assert_fail@plt+0x555c>
   16898:	cmp	r3, r2
   1689c:	beq	168c8 <__assert_fail@plt+0x5518>
   168a0:	ldr	r3, [fp, #-12]
   168a4:	ldr	r3, [r3, #4]
   168a8:	mov	r0, r3
   168ac:	bl	14468 <__assert_fail@plt+0x30b8>
   168b0:	ldr	r3, [pc, #88]	; 16910 <__assert_fail@plt+0x5560>
   168b4:	mov	r2, #256	; 0x100
   168b8:	str	r2, [r3]
   168bc:	ldr	r3, [pc, #76]	; 16910 <__assert_fail@plt+0x5560>
   168c0:	ldr	r2, [pc, #68]	; 1690c <__assert_fail@plt+0x555c>
   168c4:	str	r2, [r3, #4]
   168c8:	ldr	r3, [fp, #-12]
   168cc:	ldr	r2, [pc, #60]	; 16910 <__assert_fail@plt+0x5560>
   168d0:	cmp	r3, r2
   168d4:	beq	168ec <__assert_fail@plt+0x553c>
   168d8:	ldr	r0, [fp, #-12]
   168dc:	bl	14468 <__assert_fail@plt+0x30b8>
   168e0:	ldr	r3, [pc, #28]	; 16904 <__assert_fail@plt+0x5554>
   168e4:	ldr	r2, [pc, #36]	; 16910 <__assert_fail@plt+0x5560>
   168e8:	str	r2, [r3]
   168ec:	ldr	r3, [pc, #20]	; 16908 <__assert_fail@plt+0x5558>
   168f0:	mov	r2, #1
   168f4:	str	r2, [r3]
   168f8:	nop			; (mov r0, r0)
   168fc:	sub	sp, fp, #4
   16900:	pop	{fp, pc}
   16904:	andeq	ip, r2, r4, asr #2
   16908:	andeq	ip, r2, r8, lsr r1
   1690c:	andeq	ip, r2, r0, lsr r2
   16910:	andeq	ip, r2, ip, lsr r1
   16914:	push	{r4, fp, lr}
   16918:	add	fp, sp, #8
   1691c:	sub	sp, sp, #84	; 0x54
   16920:	str	r0, [fp, #-56]	; 0xffffffc8
   16924:	str	r1, [fp, #-60]	; 0xffffffc4
   16928:	str	r2, [fp, #-64]	; 0xffffffc0
   1692c:	str	r3, [fp, #-68]	; 0xffffffbc
   16930:	bl	112c0 <__errno_location@plt>
   16934:	mov	r3, r0
   16938:	ldr	r3, [r3]
   1693c:	str	r3, [fp, #-24]	; 0xffffffe8
   16940:	ldr	r3, [pc, #640]	; 16bc8 <__assert_fail@plt+0x5818>
   16944:	ldr	r3, [r3]
   16948:	str	r3, [fp, #-16]
   1694c:	mvn	r3, #-2147483648	; 0x80000000
   16950:	str	r3, [fp, #-28]	; 0xffffffe4
   16954:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16958:	cmp	r3, #0
   1695c:	blt	16970 <__assert_fail@plt+0x55c0>
   16960:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16964:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16968:	cmp	r2, r3
   1696c:	blt	16974 <__assert_fail@plt+0x55c4>
   16970:	bl	1138c <abort@plt>
   16974:	ldr	r3, [pc, #592]	; 16bcc <__assert_fail@plt+0x581c>
   16978:	ldr	r2, [r3]
   1697c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16980:	cmp	r2, r3
   16984:	bgt	16a58 <__assert_fail@plt+0x56a8>
   16988:	ldr	r3, [fp, #-16]
   1698c:	ldr	r2, [pc, #572]	; 16bd0 <__assert_fail@plt+0x5820>
   16990:	cmp	r3, r2
   16994:	moveq	r3, #1
   16998:	movne	r3, #0
   1699c:	strb	r3, [fp, #-29]	; 0xffffffe3
   169a0:	ldr	r3, [pc, #548]	; 16bcc <__assert_fail@plt+0x581c>
   169a4:	ldr	r3, [r3]
   169a8:	str	r3, [fp, #-48]	; 0xffffffd0
   169ac:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   169b0:	cmp	r3, #0
   169b4:	beq	169c0 <__assert_fail@plt+0x5610>
   169b8:	mov	r0, #0
   169bc:	b	169c4 <__assert_fail@plt+0x5614>
   169c0:	ldr	r0, [fp, #-16]
   169c4:	ldr	r3, [pc, #512]	; 16bcc <__assert_fail@plt+0x581c>
   169c8:	ldr	r3, [r3]
   169cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   169d0:	sub	r3, r2, r3
   169d4:	add	r2, r3, #1
   169d8:	sub	r1, fp, #48	; 0x30
   169dc:	mov	r3, #8
   169e0:	str	r3, [sp]
   169e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   169e8:	bl	1853c <__assert_fail@plt+0x718c>
   169ec:	str	r0, [fp, #-16]
   169f0:	ldr	r2, [pc, #464]	; 16bc8 <__assert_fail@plt+0x5818>
   169f4:	ldr	r3, [fp, #-16]
   169f8:	str	r3, [r2]
   169fc:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   16a00:	cmp	r3, #0
   16a04:	beq	16a18 <__assert_fail@plt+0x5668>
   16a08:	ldr	r3, [fp, #-16]
   16a0c:	ldr	r2, [pc, #444]	; 16bd0 <__assert_fail@plt+0x5820>
   16a10:	ldm	r2, {r0, r1}
   16a14:	stm	r3, {r0, r1}
   16a18:	ldr	r3, [pc, #428]	; 16bcc <__assert_fail@plt+0x581c>
   16a1c:	ldr	r3, [r3]
   16a20:	lsl	r3, r3, #3
   16a24:	ldr	r2, [fp, #-16]
   16a28:	add	r0, r2, r3
   16a2c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16a30:	ldr	r3, [pc, #404]	; 16bcc <__assert_fail@plt+0x581c>
   16a34:	ldr	r3, [r3]
   16a38:	sub	r3, r2, r3
   16a3c:	lsl	r3, r3, #3
   16a40:	mov	r2, r3
   16a44:	mov	r1, #0
   16a48:	bl	112e4 <memset@plt>
   16a4c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16a50:	ldr	r2, [pc, #372]	; 16bcc <__assert_fail@plt+0x581c>
   16a54:	str	r3, [r2]
   16a58:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16a5c:	lsl	r3, r3, #3
   16a60:	ldr	r2, [fp, #-16]
   16a64:	add	r3, r2, r3
   16a68:	ldr	r3, [r3]
   16a6c:	str	r3, [fp, #-36]	; 0xffffffdc
   16a70:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16a74:	lsl	r3, r3, #3
   16a78:	ldr	r2, [fp, #-16]
   16a7c:	add	r3, r2, r3
   16a80:	ldr	r3, [r3, #4]
   16a84:	str	r3, [fp, #-20]	; 0xffffffec
   16a88:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16a8c:	ldr	r3, [r3, #4]
   16a90:	orr	r3, r3, #1
   16a94:	str	r3, [fp, #-40]	; 0xffffffd8
   16a98:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16a9c:	ldr	r3, [r3]
   16aa0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16aa4:	add	r2, r2, #8
   16aa8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16aac:	ldr	r1, [r1, #40]	; 0x28
   16ab0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16ab4:	ldr	r0, [r0, #44]	; 0x2c
   16ab8:	str	r0, [sp, #16]
   16abc:	str	r1, [sp, #12]
   16ac0:	str	r2, [sp, #8]
   16ac4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16ac8:	str	r2, [sp, #4]
   16acc:	str	r3, [sp]
   16ad0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16ad4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16ad8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16adc:	ldr	r0, [fp, #-20]	; 0xffffffec
   16ae0:	bl	14f24 <__assert_fail@plt+0x3b74>
   16ae4:	str	r0, [fp, #-44]	; 0xffffffd4
   16ae8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16aec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16af0:	cmp	r2, r3
   16af4:	bhi	16ba8 <__assert_fail@plt+0x57f8>
   16af8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16afc:	lsl	r3, r3, #3
   16b00:	ldr	r2, [fp, #-16]
   16b04:	add	r3, r2, r3
   16b08:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16b0c:	add	r2, r2, #1
   16b10:	str	r2, [fp, #-36]	; 0xffffffdc
   16b14:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16b18:	str	r2, [r3]
   16b1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b20:	ldr	r2, [pc, #172]	; 16bd4 <__assert_fail@plt+0x5824>
   16b24:	cmp	r3, r2
   16b28:	beq	16b34 <__assert_fail@plt+0x5784>
   16b2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16b30:	bl	14468 <__assert_fail@plt+0x30b8>
   16b34:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16b38:	lsl	r3, r3, #3
   16b3c:	ldr	r2, [fp, #-16]
   16b40:	add	r4, r2, r3
   16b44:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16b48:	bl	1821c <__assert_fail@plt+0x6e6c>
   16b4c:	mov	r3, r0
   16b50:	str	r3, [fp, #-20]	; 0xffffffec
   16b54:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b58:	str	r3, [r4, #4]
   16b5c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16b60:	ldr	r3, [r3]
   16b64:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16b68:	add	r2, r2, #8
   16b6c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16b70:	ldr	r1, [r1, #40]	; 0x28
   16b74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16b78:	ldr	r0, [r0, #44]	; 0x2c
   16b7c:	str	r0, [sp, #16]
   16b80:	str	r1, [sp, #12]
   16b84:	str	r2, [sp, #8]
   16b88:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16b8c:	str	r2, [sp, #4]
   16b90:	str	r3, [sp]
   16b94:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16b98:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16b9c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16ba0:	ldr	r0, [fp, #-20]	; 0xffffffec
   16ba4:	bl	14f24 <__assert_fail@plt+0x3b74>
   16ba8:	bl	112c0 <__errno_location@plt>
   16bac:	mov	r2, r0
   16bb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16bb4:	str	r3, [r2]
   16bb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16bbc:	mov	r0, r3
   16bc0:	sub	sp, fp, #8
   16bc4:	pop	{r4, fp, pc}
   16bc8:	andeq	ip, r2, r4, asr #2
   16bcc:	andeq	ip, r2, r8, lsr r1
   16bd0:	andeq	ip, r2, ip, lsr r1
   16bd4:	andeq	ip, r2, r0, lsr r2
   16bd8:	push	{fp, lr}
   16bdc:	add	fp, sp, #4
   16be0:	sub	sp, sp, #8
   16be4:	str	r0, [fp, #-8]
   16be8:	str	r1, [fp, #-12]
   16bec:	ldr	r3, [pc, #28]	; 16c10 <__assert_fail@plt+0x5860>
   16bf0:	mvn	r2, #0
   16bf4:	ldr	r1, [fp, #-12]
   16bf8:	ldr	r0, [fp, #-8]
   16bfc:	bl	16914 <__assert_fail@plt+0x5564>
   16c00:	mov	r3, r0
   16c04:	mov	r0, r3
   16c08:	sub	sp, fp, #4
   16c0c:	pop	{fp, pc}
   16c10:	andeq	ip, r2, r0, lsl #4
   16c14:	push	{fp, lr}
   16c18:	add	fp, sp, #4
   16c1c:	sub	sp, sp, #16
   16c20:	str	r0, [fp, #-8]
   16c24:	str	r1, [fp, #-12]
   16c28:	str	r2, [fp, #-16]
   16c2c:	ldr	r3, [pc, #28]	; 16c50 <__assert_fail@plt+0x58a0>
   16c30:	ldr	r2, [fp, #-16]
   16c34:	ldr	r1, [fp, #-12]
   16c38:	ldr	r0, [fp, #-8]
   16c3c:	bl	16914 <__assert_fail@plt+0x5564>
   16c40:	mov	r3, r0
   16c44:	mov	r0, r3
   16c48:	sub	sp, fp, #4
   16c4c:	pop	{fp, pc}
   16c50:	andeq	ip, r2, r0, lsl #4
   16c54:	push	{fp, lr}
   16c58:	add	fp, sp, #4
   16c5c:	sub	sp, sp, #8
   16c60:	str	r0, [fp, #-8]
   16c64:	ldr	r1, [fp, #-8]
   16c68:	mov	r0, #0
   16c6c:	bl	16bd8 <__assert_fail@plt+0x5828>
   16c70:	mov	r3, r0
   16c74:	mov	r0, r3
   16c78:	sub	sp, fp, #4
   16c7c:	pop	{fp, pc}
   16c80:	push	{fp, lr}
   16c84:	add	fp, sp, #4
   16c88:	sub	sp, sp, #8
   16c8c:	str	r0, [fp, #-8]
   16c90:	str	r1, [fp, #-12]
   16c94:	ldr	r2, [fp, #-12]
   16c98:	ldr	r1, [fp, #-8]
   16c9c:	mov	r0, #0
   16ca0:	bl	16c14 <__assert_fail@plt+0x5864>
   16ca4:	mov	r3, r0
   16ca8:	mov	r0, r3
   16cac:	sub	sp, fp, #4
   16cb0:	pop	{fp, pc}
   16cb4:	push	{fp, lr}
   16cb8:	add	fp, sp, #4
   16cbc:	sub	sp, sp, #64	; 0x40
   16cc0:	str	r0, [fp, #-56]	; 0xffffffc8
   16cc4:	str	r1, [fp, #-60]	; 0xffffffc4
   16cc8:	str	r2, [fp, #-64]	; 0xffffffc0
   16ccc:	sub	r3, fp, #52	; 0x34
   16cd0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16cd4:	mov	r0, r3
   16cd8:	bl	14dc0 <__assert_fail@plt+0x3a10>
   16cdc:	sub	r3, fp, #52	; 0x34
   16ce0:	mvn	r2, #0
   16ce4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16ce8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16cec:	bl	16914 <__assert_fail@plt+0x5564>
   16cf0:	mov	r3, r0
   16cf4:	mov	r0, r3
   16cf8:	sub	sp, fp, #4
   16cfc:	pop	{fp, pc}
   16d00:	push	{fp, lr}
   16d04:	add	fp, sp, #4
   16d08:	sub	sp, sp, #64	; 0x40
   16d0c:	str	r0, [fp, #-56]	; 0xffffffc8
   16d10:	str	r1, [fp, #-60]	; 0xffffffc4
   16d14:	str	r2, [fp, #-64]	; 0xffffffc0
   16d18:	str	r3, [fp, #-68]	; 0xffffffbc
   16d1c:	sub	r3, fp, #52	; 0x34
   16d20:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16d24:	mov	r0, r3
   16d28:	bl	14dc0 <__assert_fail@plt+0x3a10>
   16d2c:	sub	r3, fp, #52	; 0x34
   16d30:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16d34:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16d38:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16d3c:	bl	16914 <__assert_fail@plt+0x5564>
   16d40:	mov	r3, r0
   16d44:	mov	r0, r3
   16d48:	sub	sp, fp, #4
   16d4c:	pop	{fp, pc}
   16d50:	push	{fp, lr}
   16d54:	add	fp, sp, #4
   16d58:	sub	sp, sp, #8
   16d5c:	str	r0, [fp, #-8]
   16d60:	str	r1, [fp, #-12]
   16d64:	ldr	r2, [fp, #-12]
   16d68:	ldr	r1, [fp, #-8]
   16d6c:	mov	r0, #0
   16d70:	bl	16cb4 <__assert_fail@plt+0x5904>
   16d74:	mov	r3, r0
   16d78:	mov	r0, r3
   16d7c:	sub	sp, fp, #4
   16d80:	pop	{fp, pc}
   16d84:	push	{fp, lr}
   16d88:	add	fp, sp, #4
   16d8c:	sub	sp, sp, #16
   16d90:	str	r0, [fp, #-8]
   16d94:	str	r1, [fp, #-12]
   16d98:	str	r2, [fp, #-16]
   16d9c:	ldr	r3, [fp, #-16]
   16da0:	ldr	r2, [fp, #-12]
   16da4:	ldr	r1, [fp, #-8]
   16da8:	mov	r0, #0
   16dac:	bl	16d00 <__assert_fail@plt+0x5950>
   16db0:	mov	r3, r0
   16db4:	mov	r0, r3
   16db8:	sub	sp, fp, #4
   16dbc:	pop	{fp, pc}
   16dc0:	push	{fp, lr}
   16dc4:	add	fp, sp, #4
   16dc8:	sub	sp, sp, #64	; 0x40
   16dcc:	str	r0, [fp, #-56]	; 0xffffffc8
   16dd0:	str	r1, [fp, #-60]	; 0xffffffc4
   16dd4:	mov	r3, r2
   16dd8:	strb	r3, [fp, #-61]	; 0xffffffc3
   16ddc:	ldr	r3, [pc, #84]	; 16e38 <__assert_fail@plt+0x5a88>
   16de0:	sub	ip, fp, #52	; 0x34
   16de4:	mov	lr, r3
   16de8:	ldm	lr!, {r0, r1, r2, r3}
   16dec:	stmia	ip!, {r0, r1, r2, r3}
   16df0:	ldm	lr!, {r0, r1, r2, r3}
   16df4:	stmia	ip!, {r0, r1, r2, r3}
   16df8:	ldm	lr, {r0, r1, r2, r3}
   16dfc:	stm	ip, {r0, r1, r2, r3}
   16e00:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   16e04:	sub	r3, fp, #52	; 0x34
   16e08:	mov	r2, #1
   16e0c:	mov	r0, r3
   16e10:	bl	14c2c <__assert_fail@plt+0x387c>
   16e14:	sub	r3, fp, #52	; 0x34
   16e18:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16e1c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16e20:	mov	r0, #0
   16e24:	bl	16914 <__assert_fail@plt+0x5564>
   16e28:	mov	r3, r0
   16e2c:	mov	r0, r3
   16e30:	sub	sp, fp, #4
   16e34:	pop	{fp, pc}
   16e38:	andeq	ip, r2, r0, lsl #4
   16e3c:	push	{fp, lr}
   16e40:	add	fp, sp, #4
   16e44:	sub	sp, sp, #8
   16e48:	str	r0, [fp, #-8]
   16e4c:	mov	r3, r1
   16e50:	strb	r3, [fp, #-9]
   16e54:	ldrb	r3, [fp, #-9]
   16e58:	mov	r2, r3
   16e5c:	mvn	r1, #0
   16e60:	ldr	r0, [fp, #-8]
   16e64:	bl	16dc0 <__assert_fail@plt+0x5a10>
   16e68:	mov	r3, r0
   16e6c:	mov	r0, r3
   16e70:	sub	sp, fp, #4
   16e74:	pop	{fp, pc}
   16e78:	push	{fp, lr}
   16e7c:	add	fp, sp, #4
   16e80:	sub	sp, sp, #8
   16e84:	str	r0, [fp, #-8]
   16e88:	mov	r1, #58	; 0x3a
   16e8c:	ldr	r0, [fp, #-8]
   16e90:	bl	16e3c <__assert_fail@plt+0x5a8c>
   16e94:	mov	r3, r0
   16e98:	mov	r0, r3
   16e9c:	sub	sp, fp, #4
   16ea0:	pop	{fp, pc}
   16ea4:	push	{fp, lr}
   16ea8:	add	fp, sp, #4
   16eac:	sub	sp, sp, #8
   16eb0:	str	r0, [fp, #-8]
   16eb4:	str	r1, [fp, #-12]
   16eb8:	mov	r2, #58	; 0x3a
   16ebc:	ldr	r1, [fp, #-12]
   16ec0:	ldr	r0, [fp, #-8]
   16ec4:	bl	16dc0 <__assert_fail@plt+0x5a10>
   16ec8:	mov	r3, r0
   16ecc:	mov	r0, r3
   16ed0:	sub	sp, fp, #4
   16ed4:	pop	{fp, pc}
   16ed8:	push	{fp, lr}
   16edc:	add	fp, sp, #4
   16ee0:	sub	sp, sp, #112	; 0x70
   16ee4:	str	r0, [fp, #-56]	; 0xffffffc8
   16ee8:	str	r1, [fp, #-60]	; 0xffffffc4
   16eec:	str	r2, [fp, #-64]	; 0xffffffc0
   16ef0:	sub	r3, fp, #116	; 0x74
   16ef4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16ef8:	mov	r0, r3
   16efc:	bl	14dc0 <__assert_fail@plt+0x3a10>
   16f00:	sub	ip, fp, #52	; 0x34
   16f04:	sub	lr, fp, #116	; 0x74
   16f08:	ldm	lr!, {r0, r1, r2, r3}
   16f0c:	stmia	ip!, {r0, r1, r2, r3}
   16f10:	ldm	lr!, {r0, r1, r2, r3}
   16f14:	stmia	ip!, {r0, r1, r2, r3}
   16f18:	ldm	lr, {r0, r1, r2, r3}
   16f1c:	stm	ip, {r0, r1, r2, r3}
   16f20:	sub	r3, fp, #52	; 0x34
   16f24:	mov	r2, #1
   16f28:	mov	r1, #58	; 0x3a
   16f2c:	mov	r0, r3
   16f30:	bl	14c2c <__assert_fail@plt+0x387c>
   16f34:	sub	r3, fp, #52	; 0x34
   16f38:	mvn	r2, #0
   16f3c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16f40:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16f44:	bl	16914 <__assert_fail@plt+0x5564>
   16f48:	mov	r3, r0
   16f4c:	mov	r0, r3
   16f50:	sub	sp, fp, #4
   16f54:	pop	{fp, pc}
   16f58:	push	{fp, lr}
   16f5c:	add	fp, sp, #4
   16f60:	sub	sp, sp, #24
   16f64:	str	r0, [fp, #-8]
   16f68:	str	r1, [fp, #-12]
   16f6c:	str	r2, [fp, #-16]
   16f70:	str	r3, [fp, #-20]	; 0xffffffec
   16f74:	mvn	r3, #0
   16f78:	str	r3, [sp]
   16f7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f80:	ldr	r2, [fp, #-16]
   16f84:	ldr	r1, [fp, #-12]
   16f88:	ldr	r0, [fp, #-8]
   16f8c:	bl	16fa0 <__assert_fail@plt+0x5bf0>
   16f90:	mov	r3, r0
   16f94:	mov	r0, r3
   16f98:	sub	sp, fp, #4
   16f9c:	pop	{fp, pc}
   16fa0:	push	{fp, lr}
   16fa4:	add	fp, sp, #4
   16fa8:	sub	sp, sp, #64	; 0x40
   16fac:	str	r0, [fp, #-56]	; 0xffffffc8
   16fb0:	str	r1, [fp, #-60]	; 0xffffffc4
   16fb4:	str	r2, [fp, #-64]	; 0xffffffc0
   16fb8:	str	r3, [fp, #-68]	; 0xffffffbc
   16fbc:	ldr	r3, [pc, #84]	; 17018 <__assert_fail@plt+0x5c68>
   16fc0:	sub	ip, fp, #52	; 0x34
   16fc4:	mov	lr, r3
   16fc8:	ldm	lr!, {r0, r1, r2, r3}
   16fcc:	stmia	ip!, {r0, r1, r2, r3}
   16fd0:	ldm	lr!, {r0, r1, r2, r3}
   16fd4:	stmia	ip!, {r0, r1, r2, r3}
   16fd8:	ldm	lr, {r0, r1, r2, r3}
   16fdc:	stm	ip, {r0, r1, r2, r3}
   16fe0:	sub	r3, fp, #52	; 0x34
   16fe4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16fe8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16fec:	mov	r0, r3
   16ff0:	bl	14d44 <__assert_fail@plt+0x3994>
   16ff4:	sub	r3, fp, #52	; 0x34
   16ff8:	ldr	r2, [fp, #4]
   16ffc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17000:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17004:	bl	16914 <__assert_fail@plt+0x5564>
   17008:	mov	r3, r0
   1700c:	mov	r0, r3
   17010:	sub	sp, fp, #4
   17014:	pop	{fp, pc}
   17018:	andeq	ip, r2, r0, lsl #4
   1701c:	push	{fp, lr}
   17020:	add	fp, sp, #4
   17024:	sub	sp, sp, #16
   17028:	str	r0, [fp, #-8]
   1702c:	str	r1, [fp, #-12]
   17030:	str	r2, [fp, #-16]
   17034:	ldr	r3, [fp, #-16]
   17038:	ldr	r2, [fp, #-12]
   1703c:	ldr	r1, [fp, #-8]
   17040:	mov	r0, #0
   17044:	bl	16f58 <__assert_fail@plt+0x5ba8>
   17048:	mov	r3, r0
   1704c:	mov	r0, r3
   17050:	sub	sp, fp, #4
   17054:	pop	{fp, pc}
   17058:	push	{fp, lr}
   1705c:	add	fp, sp, #4
   17060:	sub	sp, sp, #24
   17064:	str	r0, [fp, #-8]
   17068:	str	r1, [fp, #-12]
   1706c:	str	r2, [fp, #-16]
   17070:	str	r3, [fp, #-20]	; 0xffffffec
   17074:	ldr	r3, [fp, #-20]	; 0xffffffec
   17078:	str	r3, [sp]
   1707c:	ldr	r3, [fp, #-16]
   17080:	ldr	r2, [fp, #-12]
   17084:	ldr	r1, [fp, #-8]
   17088:	mov	r0, #0
   1708c:	bl	16fa0 <__assert_fail@plt+0x5bf0>
   17090:	mov	r3, r0
   17094:	mov	r0, r3
   17098:	sub	sp, fp, #4
   1709c:	pop	{fp, pc}
   170a0:	push	{fp, lr}
   170a4:	add	fp, sp, #4
   170a8:	sub	sp, sp, #16
   170ac:	str	r0, [fp, #-8]
   170b0:	str	r1, [fp, #-12]
   170b4:	str	r2, [fp, #-16]
   170b8:	ldr	r3, [pc, #28]	; 170dc <__assert_fail@plt+0x5d2c>
   170bc:	ldr	r2, [fp, #-16]
   170c0:	ldr	r1, [fp, #-12]
   170c4:	ldr	r0, [fp, #-8]
   170c8:	bl	16914 <__assert_fail@plt+0x5564>
   170cc:	mov	r3, r0
   170d0:	mov	r0, r3
   170d4:	sub	sp, fp, #4
   170d8:	pop	{fp, pc}
   170dc:	andeq	ip, r2, r8, asr #2
   170e0:	push	{fp, lr}
   170e4:	add	fp, sp, #4
   170e8:	sub	sp, sp, #8
   170ec:	str	r0, [fp, #-8]
   170f0:	str	r1, [fp, #-12]
   170f4:	ldr	r2, [fp, #-12]
   170f8:	ldr	r1, [fp, #-8]
   170fc:	mov	r0, #0
   17100:	bl	170a0 <__assert_fail@plt+0x5cf0>
   17104:	mov	r3, r0
   17108:	mov	r0, r3
   1710c:	sub	sp, fp, #4
   17110:	pop	{fp, pc}
   17114:	push	{fp, lr}
   17118:	add	fp, sp, #4
   1711c:	sub	sp, sp, #8
   17120:	str	r0, [fp, #-8]
   17124:	str	r1, [fp, #-12]
   17128:	mvn	r2, #0
   1712c:	ldr	r1, [fp, #-12]
   17130:	ldr	r0, [fp, #-8]
   17134:	bl	170a0 <__assert_fail@plt+0x5cf0>
   17138:	mov	r3, r0
   1713c:	mov	r0, r3
   17140:	sub	sp, fp, #4
   17144:	pop	{fp, pc}
   17148:	push	{fp, lr}
   1714c:	add	fp, sp, #4
   17150:	sub	sp, sp, #8
   17154:	str	r0, [fp, #-8]
   17158:	ldr	r1, [fp, #-8]
   1715c:	mov	r0, #0
   17160:	bl	17114 <__assert_fail@plt+0x5d64>
   17164:	mov	r3, r0
   17168:	mov	r0, r3
   1716c:	sub	sp, fp, #4
   17170:	pop	{fp, pc}
   17174:	push	{fp, lr}
   17178:	add	fp, sp, #4
   1717c:	sub	sp, sp, #16
   17180:	str	r0, [fp, #-8]
   17184:	ldr	r3, [fp, #-8]
   17188:	mov	r2, #0
   1718c:	str	r2, [r3]
   17190:	ldr	r3, [fp, #-8]
   17194:	mov	r2, #0
   17198:	str	r2, [r3, #4]
   1719c:	ldr	r3, [fp, #-8]
   171a0:	mov	r2, #0
   171a4:	str	r2, [r3, #8]
   171a8:	ldr	r3, [fp, #-8]
   171ac:	add	r0, r3, #12
   171b0:	ldr	r3, [pc, #92]	; 17214 <__assert_fail@plt+0x5e64>
   171b4:	str	r3, [sp]
   171b8:	ldr	r3, [pc, #88]	; 17218 <__assert_fail@plt+0x5e68>
   171bc:	mov	r2, #0
   171c0:	mov	r1, #0
   171c4:	bl	195c4 <_obstack_begin@@Base>
   171c8:	ldr	r3, [fp, #-8]
   171cc:	add	r0, r3, #56	; 0x38
   171d0:	ldr	r3, [pc, #60]	; 17214 <__assert_fail@plt+0x5e64>
   171d4:	str	r3, [sp]
   171d8:	ldr	r3, [pc, #56]	; 17218 <__assert_fail@plt+0x5e68>
   171dc:	mov	r2, #0
   171e0:	mov	r1, #0
   171e4:	bl	195c4 <_obstack_begin@@Base>
   171e8:	ldr	r3, [fp, #-8]
   171ec:	add	r0, r3, #100	; 0x64
   171f0:	ldr	r3, [pc, #28]	; 17214 <__assert_fail@plt+0x5e64>
   171f4:	str	r3, [sp]
   171f8:	ldr	r3, [pc, #24]	; 17218 <__assert_fail@plt+0x5e68>
   171fc:	mov	r2, #0
   17200:	mov	r1, #0
   17204:	bl	195c4 <_obstack_begin@@Base>
   17208:	nop			; (mov r0, r0)
   1720c:	sub	sp, fp, #4
   17210:	pop	{fp, pc}
   17214:	andeq	r4, r1, r8, ror #8
   17218:	andeq	r8, r1, r4, lsr #28
   1721c:	push	{fp, lr}
   17220:	add	fp, sp, #4
   17224:	sub	sp, sp, #32
   17228:	str	r0, [fp, #-32]	; 0xffffffe0
   1722c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17230:	add	r3, r3, #12
   17234:	str	r3, [fp, #-8]
   17238:	mov	r3, #0
   1723c:	str	r3, [fp, #-12]
   17240:	ldr	r3, [fp, #-8]
   17244:	ldr	r2, [r3, #4]
   17248:	ldr	r3, [fp, #-12]
   1724c:	cmp	r2, r3
   17250:	bcs	17288 <__assert_fail@plt+0x5ed8>
   17254:	ldr	r3, [fp, #-8]
   17258:	ldr	r2, [r3, #16]
   1725c:	ldr	r3, [fp, #-12]
   17260:	cmp	r2, r3
   17264:	bls	17288 <__assert_fail@plt+0x5ed8>
   17268:	ldr	r3, [fp, #-8]
   1726c:	ldr	r2, [fp, #-12]
   17270:	str	r2, [r3, #8]
   17274:	ldr	r3, [fp, #-8]
   17278:	ldr	r2, [r3, #8]
   1727c:	ldr	r3, [fp, #-8]
   17280:	str	r2, [r3, #12]
   17284:	b	17294 <__assert_fail@plt+0x5ee4>
   17288:	ldr	r1, [fp, #-12]
   1728c:	ldr	r0, [fp, #-8]
   17290:	bl	19954 <_obstack_free@@Base>
   17294:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17298:	add	r3, r3, #56	; 0x38
   1729c:	str	r3, [fp, #-16]
   172a0:	mov	r3, #0
   172a4:	str	r3, [fp, #-20]	; 0xffffffec
   172a8:	ldr	r3, [fp, #-16]
   172ac:	ldr	r2, [r3, #4]
   172b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   172b4:	cmp	r2, r3
   172b8:	bcs	172f0 <__assert_fail@plt+0x5f40>
   172bc:	ldr	r3, [fp, #-16]
   172c0:	ldr	r2, [r3, #16]
   172c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   172c8:	cmp	r2, r3
   172cc:	bls	172f0 <__assert_fail@plt+0x5f40>
   172d0:	ldr	r3, [fp, #-16]
   172d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   172d8:	str	r2, [r3, #8]
   172dc:	ldr	r3, [fp, #-16]
   172e0:	ldr	r2, [r3, #8]
   172e4:	ldr	r3, [fp, #-16]
   172e8:	str	r2, [r3, #12]
   172ec:	b	172fc <__assert_fail@plt+0x5f4c>
   172f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   172f4:	ldr	r0, [fp, #-16]
   172f8:	bl	19954 <_obstack_free@@Base>
   172fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17300:	add	r3, r3, #100	; 0x64
   17304:	str	r3, [fp, #-24]	; 0xffffffe8
   17308:	mov	r3, #0
   1730c:	str	r3, [fp, #-28]	; 0xffffffe4
   17310:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17314:	ldr	r2, [r3, #4]
   17318:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1731c:	cmp	r2, r3
   17320:	bcs	17358 <__assert_fail@plt+0x5fa8>
   17324:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17328:	ldr	r2, [r3, #16]
   1732c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17330:	cmp	r2, r3
   17334:	bls	17358 <__assert_fail@plt+0x5fa8>
   17338:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1733c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17340:	str	r2, [r3, #8]
   17344:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17348:	ldr	r2, [r3, #8]
   1734c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17350:	str	r2, [r3, #12]
   17354:	b	17364 <__assert_fail@plt+0x5fb4>
   17358:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1735c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17360:	bl	19954 <_obstack_free@@Base>
   17364:	nop			; (mov r0, r0)
   17368:	sub	sp, fp, #4
   1736c:	pop	{fp, pc}
   17370:	push	{fp, lr}
   17374:	add	fp, sp, #4
   17378:	sub	sp, sp, #56	; 0x38
   1737c:	str	r0, [fp, #-56]	; 0xffffffc8
   17380:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17384:	add	r3, r3, #12
   17388:	str	r3, [fp, #-8]
   1738c:	ldr	r3, [fp, #-8]
   17390:	ldr	r3, [r3, #12]
   17394:	mov	r2, r3
   17398:	ldr	r3, [fp, #-8]
   1739c:	ldr	r3, [r3, #8]
   173a0:	sub	r3, r2, r3
   173a4:	sub	r3, r3, #1
   173a8:	str	r3, [fp, #-52]	; 0xffffffcc
   173ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   173b0:	add	r3, r3, #12
   173b4:	str	r3, [fp, #-12]
   173b8:	ldr	r3, [fp, #-12]
   173bc:	ldr	r3, [r3, #8]
   173c0:	str	r3, [fp, #-16]
   173c4:	ldr	r3, [fp, #-12]
   173c8:	ldr	r2, [r3, #12]
   173cc:	ldr	r3, [fp, #-16]
   173d0:	cmp	r2, r3
   173d4:	bne	173e8 <__assert_fail@plt+0x6038>
   173d8:	ldr	r2, [fp, #-12]
   173dc:	ldrb	r3, [r2, #40]	; 0x28
   173e0:	orr	r3, r3, #2
   173e4:	strb	r3, [r2, #40]	; 0x28
   173e8:	ldr	r3, [fp, #-12]
   173ec:	ldr	r3, [r3, #12]
   173f0:	mov	r2, r3
   173f4:	ldr	r3, [fp, #-12]
   173f8:	ldr	r3, [r3, #24]
   173fc:	add	r2, r2, r3
   17400:	ldr	r3, [fp, #-12]
   17404:	ldr	r3, [r3, #24]
   17408:	mvn	r3, r3
   1740c:	and	r3, r3, r2
   17410:	mov	r2, r3
   17414:	ldr	r3, [fp, #-12]
   17418:	str	r2, [r3, #12]
   1741c:	ldr	r3, [fp, #-12]
   17420:	ldr	r3, [r3, #12]
   17424:	mov	r2, r3
   17428:	ldr	r3, [fp, #-12]
   1742c:	ldr	r3, [r3, #4]
   17430:	sub	r3, r2, r3
   17434:	mov	r2, r3
   17438:	ldr	r3, [fp, #-12]
   1743c:	ldr	r3, [r3, #16]
   17440:	mov	r1, r3
   17444:	ldr	r3, [fp, #-12]
   17448:	ldr	r3, [r3, #4]
   1744c:	sub	r3, r1, r3
   17450:	cmp	r2, r3
   17454:	bls	17468 <__assert_fail@plt+0x60b8>
   17458:	ldr	r3, [fp, #-12]
   1745c:	ldr	r2, [r3, #16]
   17460:	ldr	r3, [fp, #-12]
   17464:	str	r2, [r3, #12]
   17468:	ldr	r3, [fp, #-12]
   1746c:	ldr	r2, [r3, #12]
   17470:	ldr	r3, [fp, #-12]
   17474:	str	r2, [r3, #8]
   17478:	ldr	r3, [fp, #-16]
   1747c:	str	r3, [fp, #-20]	; 0xffffffec
   17480:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17484:	add	r3, r3, #56	; 0x38
   17488:	str	r3, [fp, #-24]	; 0xffffffe8
   1748c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17490:	str	r3, [fp, #-28]	; 0xffffffe4
   17494:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17498:	ldr	r3, [r3, #16]
   1749c:	mov	r2, r3
   174a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   174a4:	ldr	r3, [r3, #12]
   174a8:	sub	r3, r2, r3
   174ac:	cmp	r3, #3
   174b0:	bhi	174c0 <__assert_fail@plt+0x6110>
   174b4:	mov	r1, #4
   174b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   174bc:	bl	19698 <_obstack_newchunk@@Base>
   174c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174c4:	str	r3, [fp, #-32]	; 0xffffffe0
   174c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174cc:	ldr	r3, [r3, #12]
   174d0:	str	r3, [fp, #-36]	; 0xffffffdc
   174d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   174d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   174dc:	str	r2, [r3]
   174e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174e4:	ldr	r3, [r3, #12]
   174e8:	add	r2, r3, #4
   174ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174f0:	str	r2, [r3, #12]
   174f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   174f8:	add	r3, r3, #100	; 0x64
   174fc:	str	r3, [fp, #-40]	; 0xffffffd8
   17500:	mov	r3, #4
   17504:	str	r3, [fp, #-44]	; 0xffffffd4
   17508:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1750c:	str	r3, [fp, #-48]	; 0xffffffd0
   17510:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17514:	ldr	r3, [r3, #16]
   17518:	mov	r2, r3
   1751c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17520:	ldr	r3, [r3, #12]
   17524:	sub	r3, r2, r3
   17528:	mov	r2, r3
   1752c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17530:	cmp	r2, r3
   17534:	bcs	17544 <__assert_fail@plt+0x6194>
   17538:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1753c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17540:	bl	19698 <_obstack_newchunk@@Base>
   17544:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17548:	ldr	r3, [r3, #12]
   1754c:	sub	r1, fp, #52	; 0x34
   17550:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17554:	mov	r0, r3
   17558:	bl	1111c <memcpy@plt>
   1755c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17560:	ldr	r2, [r3, #12]
   17564:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17568:	add	r2, r2, r3
   1756c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17570:	str	r2, [r3, #12]
   17574:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17578:	ldr	r3, [r3]
   1757c:	add	r2, r3, #1
   17580:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17584:	str	r2, [r3]
   17588:	nop			; (mov r0, r0)
   1758c:	sub	sp, fp, #4
   17590:	pop	{fp, pc}
   17594:	push	{fp, lr}
   17598:	add	fp, sp, #4
   1759c:	sub	sp, sp, #72	; 0x48
   175a0:	str	r0, [fp, #-72]	; 0xffffffb8
   175a4:	str	r1, [fp, #-76]	; 0xffffffb4
   175a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   175ac:	bl	112fc <fgetc@plt>
   175b0:	str	r0, [fp, #-8]
   175b4:	ldr	r3, [fp, #-8]
   175b8:	cmn	r3, #1
   175bc:	bne	1765c <__assert_fail@plt+0x62ac>
   175c0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   175c4:	add	r3, r3, #12
   175c8:	str	r3, [fp, #-20]	; 0xffffffec
   175cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   175d0:	ldr	r3, [r3, #12]
   175d4:	mov	r2, r3
   175d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   175dc:	ldr	r3, [r3, #8]
   175e0:	sub	r3, r2, r3
   175e4:	str	r3, [fp, #-24]	; 0xffffffe8
   175e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175ec:	cmp	r3, #0
   175f0:	beq	176d4 <__assert_fail@plt+0x6324>
   175f4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   175f8:	add	r3, r3, #12
   175fc:	str	r3, [fp, #-28]	; 0xffffffe4
   17600:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17604:	str	r3, [fp, #-32]	; 0xffffffe0
   17608:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1760c:	ldr	r3, [r3, #16]
   17610:	mov	r2, r3
   17614:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17618:	ldr	r3, [r3, #12]
   1761c:	sub	r3, r2, r3
   17620:	cmp	r3, #0
   17624:	bne	17634 <__assert_fail@plt+0x6284>
   17628:	mov	r1, #1
   1762c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17630:	bl	19698 <_obstack_newchunk@@Base>
   17634:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17638:	ldr	r3, [r3, #12]
   1763c:	add	r1, r3, #1
   17640:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17644:	str	r1, [r2, #12]
   17648:	mov	r2, #0
   1764c:	strb	r2, [r3]
   17650:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17654:	bl	17370 <__assert_fail@plt+0x5fc0>
   17658:	b	176d4 <__assert_fail@plt+0x6324>
   1765c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17660:	add	r3, r3, #12
   17664:	str	r3, [fp, #-12]
   17668:	ldr	r3, [fp, #-12]
   1766c:	str	r3, [fp, #-16]
   17670:	ldr	r3, [fp, #-16]
   17674:	ldr	r3, [r3, #16]
   17678:	mov	r2, r3
   1767c:	ldr	r3, [fp, #-16]
   17680:	ldr	r3, [r3, #12]
   17684:	sub	r3, r2, r3
   17688:	cmp	r3, #0
   1768c:	bne	1769c <__assert_fail@plt+0x62ec>
   17690:	mov	r1, #1
   17694:	ldr	r0, [fp, #-12]
   17698:	bl	19698 <_obstack_newchunk@@Base>
   1769c:	ldr	r3, [fp, #-12]
   176a0:	ldr	r3, [r3, #12]
   176a4:	add	r1, r3, #1
   176a8:	ldr	r2, [fp, #-12]
   176ac:	str	r1, [r2, #12]
   176b0:	ldr	r2, [fp, #-8]
   176b4:	uxtb	r2, r2
   176b8:	strb	r2, [r3]
   176bc:	ldr	r3, [fp, #-8]
   176c0:	cmp	r3, #0
   176c4:	bne	175a8 <__assert_fail@plt+0x61f8>
   176c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   176cc:	bl	17370 <__assert_fail@plt+0x5fc0>
   176d0:	b	175a8 <__assert_fail@plt+0x61f8>
   176d4:	nop			; (mov r0, r0)
   176d8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   176dc:	add	r3, r3, #56	; 0x38
   176e0:	str	r3, [fp, #-36]	; 0xffffffdc
   176e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   176e8:	str	r3, [fp, #-40]	; 0xffffffd8
   176ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   176f0:	ldr	r3, [r3, #16]
   176f4:	mov	r2, r3
   176f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   176fc:	ldr	r3, [r3, #12]
   17700:	sub	r3, r2, r3
   17704:	cmp	r3, #3
   17708:	bhi	17718 <__assert_fail@plt+0x6368>
   1770c:	mov	r1, #4
   17710:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17714:	bl	19698 <_obstack_newchunk@@Base>
   17718:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1771c:	str	r3, [fp, #-44]	; 0xffffffd4
   17720:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17724:	ldr	r3, [r3, #12]
   17728:	str	r3, [fp, #-48]	; 0xffffffd0
   1772c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17730:	mov	r2, #0
   17734:	str	r2, [r3]
   17738:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1773c:	ldr	r3, [r3, #12]
   17740:	add	r2, r3, #4
   17744:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17748:	str	r2, [r3, #12]
   1774c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17750:	add	r3, r3, #56	; 0x38
   17754:	str	r3, [fp, #-52]	; 0xffffffcc
   17758:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1775c:	ldr	r3, [r3, #8]
   17760:	str	r3, [fp, #-56]	; 0xffffffc8
   17764:	ldr	r3, [fp, #-52]	; 0xffffffcc
   17768:	ldr	r2, [r3, #12]
   1776c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17770:	cmp	r2, r3
   17774:	bne	17788 <__assert_fail@plt+0x63d8>
   17778:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1777c:	ldrb	r3, [r2, #40]	; 0x28
   17780:	orr	r3, r3, #2
   17784:	strb	r3, [r2, #40]	; 0x28
   17788:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1778c:	ldr	r3, [r3, #12]
   17790:	mov	r2, r3
   17794:	ldr	r3, [fp, #-52]	; 0xffffffcc
   17798:	ldr	r3, [r3, #24]
   1779c:	add	r2, r2, r3
   177a0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   177a4:	ldr	r3, [r3, #24]
   177a8:	mvn	r3, r3
   177ac:	and	r3, r3, r2
   177b0:	mov	r2, r3
   177b4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   177b8:	str	r2, [r3, #12]
   177bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   177c0:	ldr	r3, [r3, #12]
   177c4:	mov	r2, r3
   177c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   177cc:	ldr	r3, [r3, #4]
   177d0:	sub	r3, r2, r3
   177d4:	mov	r2, r3
   177d8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   177dc:	ldr	r3, [r3, #16]
   177e0:	mov	r1, r3
   177e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   177e8:	ldr	r3, [r3, #4]
   177ec:	sub	r3, r1, r3
   177f0:	cmp	r2, r3
   177f4:	bls	17808 <__assert_fail@plt+0x6458>
   177f8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   177fc:	ldr	r2, [r3, #16]
   17800:	ldr	r3, [fp, #-52]	; 0xffffffcc
   17804:	str	r2, [r3, #12]
   17808:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1780c:	ldr	r2, [r3, #12]
   17810:	ldr	r3, [fp, #-52]	; 0xffffffcc
   17814:	str	r2, [r3, #8]
   17818:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1781c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17820:	str	r2, [r3, #4]
   17824:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17828:	add	r3, r3, #100	; 0x64
   1782c:	str	r3, [fp, #-60]	; 0xffffffc4
   17830:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17834:	ldr	r3, [r3, #8]
   17838:	str	r3, [fp, #-64]	; 0xffffffc0
   1783c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17840:	ldr	r2, [r3, #12]
   17844:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17848:	cmp	r2, r3
   1784c:	bne	17860 <__assert_fail@plt+0x64b0>
   17850:	ldr	r2, [fp, #-60]	; 0xffffffc4
   17854:	ldrb	r3, [r2, #40]	; 0x28
   17858:	orr	r3, r3, #2
   1785c:	strb	r3, [r2, #40]	; 0x28
   17860:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17864:	ldr	r3, [r3, #12]
   17868:	mov	r2, r3
   1786c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17870:	ldr	r3, [r3, #24]
   17874:	add	r2, r2, r3
   17878:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1787c:	ldr	r3, [r3, #24]
   17880:	mvn	r3, r3
   17884:	and	r3, r3, r2
   17888:	mov	r2, r3
   1788c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17890:	str	r2, [r3, #12]
   17894:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17898:	ldr	r3, [r3, #12]
   1789c:	mov	r2, r3
   178a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   178a4:	ldr	r3, [r3, #4]
   178a8:	sub	r3, r2, r3
   178ac:	mov	r2, r3
   178b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   178b4:	ldr	r3, [r3, #16]
   178b8:	mov	r1, r3
   178bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   178c0:	ldr	r3, [r3, #4]
   178c4:	sub	r3, r1, r3
   178c8:	cmp	r2, r3
   178cc:	bls	178e0 <__assert_fail@plt+0x6530>
   178d0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   178d4:	ldr	r2, [r3, #16]
   178d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   178dc:	str	r2, [r3, #12]
   178e0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   178e4:	ldr	r2, [r3, #12]
   178e8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   178ec:	str	r2, [r3, #8]
   178f0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   178f4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   178f8:	str	r2, [r3, #8]
   178fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17900:	bl	11104 <ferror@plt>
   17904:	mov	r3, r0
   17908:	cmp	r3, #0
   1790c:	moveq	r3, #1
   17910:	movne	r3, #0
   17914:	uxtb	r3, r3
   17918:	mov	r0, r3
   1791c:	sub	sp, fp, #4
   17920:	pop	{fp, pc}
   17924:	push	{fp, lr}
   17928:	add	fp, sp, #4
   1792c:	sub	sp, sp, #24
   17930:	str	r0, [fp, #-16]
   17934:	str	r1, [fp, #-20]	; 0xffffffec
   17938:	str	r2, [fp, #-24]	; 0xffffffe8
   1793c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17940:	ldr	r1, [fp, #-20]	; 0xffffffec
   17944:	ldr	r0, [fp, #-16]
   17948:	bl	110c8 <read@plt>
   1794c:	str	r0, [fp, #-8]
   17950:	ldr	r3, [fp, #-8]
   17954:	cmp	r3, #0
   17958:	blt	17964 <__assert_fail@plt+0x65b4>
   1795c:	ldr	r3, [fp, #-8]
   17960:	b	179b8 <__assert_fail@plt+0x6608>
   17964:	bl	112c0 <__errno_location@plt>
   17968:	mov	r3, r0
   1796c:	ldr	r3, [r3]
   17970:	cmp	r3, #4
   17974:	beq	179b0 <__assert_fail@plt+0x6600>
   17978:	bl	112c0 <__errno_location@plt>
   1797c:	mov	r3, r0
   17980:	ldr	r3, [r3]
   17984:	cmp	r3, #22
   17988:	bne	179a8 <__assert_fail@plt+0x65f8>
   1798c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17990:	ldr	r2, [pc, #44]	; 179c4 <__assert_fail@plt+0x6614>
   17994:	cmp	r3, r2
   17998:	bls	179a8 <__assert_fail@plt+0x65f8>
   1799c:	ldr	r3, [pc, #32]	; 179c4 <__assert_fail@plt+0x6614>
   179a0:	str	r3, [fp, #-24]	; 0xffffffe8
   179a4:	b	179b4 <__assert_fail@plt+0x6604>
   179a8:	ldr	r3, [fp, #-8]
   179ac:	b	179b8 <__assert_fail@plt+0x6608>
   179b0:	nop			; (mov r0, r0)
   179b4:	b	1793c <__assert_fail@plt+0x658c>
   179b8:	mov	r0, r3
   179bc:	sub	sp, fp, #4
   179c0:	pop	{fp, pc}
   179c4:	svcvc	0x00f00000	; IMB
   179c8:	push	{r4, r5, r6, r7, fp, lr}
   179cc:	add	fp, sp, #20
   179d0:	sub	sp, sp, #48	; 0x30
   179d4:	str	r0, [fp, #-24]	; 0xffffffe8
   179d8:	str	r1, [fp, #-28]	; 0xffffffe4
   179dc:	str	r2, [fp, #-32]	; 0xffffffe0
   179e0:	str	r3, [fp, #-36]	; 0xffffffdc
   179e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   179e8:	cmp	r3, #0
   179ec:	beq	17a10 <__assert_fail@plt+0x6660>
   179f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   179f4:	str	r3, [sp]
   179f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   179fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17a00:	ldr	r1, [pc, #1260]	; 17ef4 <__assert_fail@plt+0x6b44>
   17a04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a08:	bl	112a8 <fprintf@plt>
   17a0c:	b	17a24 <__assert_fail@plt+0x6674>
   17a10:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17a14:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17a18:	ldr	r1, [pc, #1240]	; 17ef8 <__assert_fail@plt+0x6b48>
   17a1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a20:	bl	112a8 <fprintf@plt>
   17a24:	ldr	r0, [pc, #1232]	; 17efc <__assert_fail@plt+0x6b4c>
   17a28:	bl	11284 <gettext@plt>
   17a2c:	mov	r2, r0
   17a30:	ldr	r3, [pc, #1224]	; 17f00 <__assert_fail@plt+0x6b50>
   17a34:	ldr	r1, [pc, #1224]	; 17f04 <__assert_fail@plt+0x6b54>
   17a38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a3c:	bl	112a8 <fprintf@plt>
   17a40:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17a44:	mov	r0, #10
   17a48:	bl	11140 <fputc_unlocked@plt>
   17a4c:	ldr	r0, [pc, #1204]	; 17f08 <__assert_fail@plt+0x6b58>
   17a50:	bl	11284 <gettext@plt>
   17a54:	mov	r3, r0
   17a58:	ldr	r2, [pc, #1196]	; 17f0c <__assert_fail@plt+0x6b5c>
   17a5c:	mov	r1, r3
   17a60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a64:	bl	112a8 <fprintf@plt>
   17a68:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17a6c:	mov	r0, #10
   17a70:	bl	11140 <fputc_unlocked@plt>
   17a74:	ldr	r3, [fp, #8]
   17a78:	cmp	r3, #9
   17a7c:	ldrls	pc, [pc, r3, lsl #2]
   17a80:	b	17e3c <__assert_fail@plt+0x6a8c>
   17a84:	andeq	r7, r1, r4, ror #29
   17a88:	andeq	r7, r1, ip, lsr #21
   17a8c:	ldrdeq	r7, [r1], -r0
   17a90:	strdeq	r7, [r1], -ip
   17a94:	andeq	r7, r1, ip, lsr fp
   17a98:	muleq	r1, r4, fp
   17a9c:	strdeq	r7, [r1], -ip
   17aa0:	andeq	r7, r1, r4, ror ip
   17aa4:	strdeq	r7, [r1], -ip
   17aa8:	muleq	r1, r4, sp
   17aac:	ldr	r0, [pc, #1116]	; 17f10 <__assert_fail@plt+0x6b60>
   17ab0:	bl	11284 <gettext@plt>
   17ab4:	mov	r1, r0
   17ab8:	ldr	r3, [fp, #4]
   17abc:	ldr	r3, [r3]
   17ac0:	mov	r2, r3
   17ac4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ac8:	bl	112a8 <fprintf@plt>
   17acc:	b	17ee8 <__assert_fail@plt+0x6b38>
   17ad0:	ldr	r0, [pc, #1084]	; 17f14 <__assert_fail@plt+0x6b64>
   17ad4:	bl	11284 <gettext@plt>
   17ad8:	mov	r1, r0
   17adc:	ldr	r3, [fp, #4]
   17ae0:	ldr	r2, [r3]
   17ae4:	ldr	r3, [fp, #4]
   17ae8:	add	r3, r3, #4
   17aec:	ldr	r3, [r3]
   17af0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17af4:	bl	112a8 <fprintf@plt>
   17af8:	b	17ee8 <__assert_fail@plt+0x6b38>
   17afc:	ldr	r0, [pc, #1044]	; 17f18 <__assert_fail@plt+0x6b68>
   17b00:	bl	11284 <gettext@plt>
   17b04:	ldr	r3, [fp, #4]
   17b08:	ldr	r2, [r3]
   17b0c:	ldr	r3, [fp, #4]
   17b10:	add	r3, r3, #4
   17b14:	ldr	r1, [r3]
   17b18:	ldr	r3, [fp, #4]
   17b1c:	add	r3, r3, #8
   17b20:	ldr	r3, [r3]
   17b24:	str	r3, [sp]
   17b28:	mov	r3, r1
   17b2c:	mov	r1, r0
   17b30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b34:	bl	112a8 <fprintf@plt>
   17b38:	b	17ee8 <__assert_fail@plt+0x6b38>
   17b3c:	ldr	r0, [pc, #984]	; 17f1c <__assert_fail@plt+0x6b6c>
   17b40:	bl	11284 <gettext@plt>
   17b44:	mov	ip, r0
   17b48:	ldr	r3, [fp, #4]
   17b4c:	ldr	r1, [r3]
   17b50:	ldr	r3, [fp, #4]
   17b54:	add	r3, r3, #4
   17b58:	ldr	r0, [r3]
   17b5c:	ldr	r3, [fp, #4]
   17b60:	add	r3, r3, #8
   17b64:	ldr	r3, [r3]
   17b68:	ldr	r2, [fp, #4]
   17b6c:	add	r2, r2, #12
   17b70:	ldr	r2, [r2]
   17b74:	str	r2, [sp, #4]
   17b78:	str	r3, [sp]
   17b7c:	mov	r3, r0
   17b80:	mov	r2, r1
   17b84:	mov	r1, ip
   17b88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b8c:	bl	112a8 <fprintf@plt>
   17b90:	b	17ee8 <__assert_fail@plt+0x6b38>
   17b94:	ldr	r0, [pc, #900]	; 17f20 <__assert_fail@plt+0x6b70>
   17b98:	bl	11284 <gettext@plt>
   17b9c:	mov	lr, r0
   17ba0:	ldr	r3, [fp, #4]
   17ba4:	ldr	r0, [r3]
   17ba8:	ldr	r3, [fp, #4]
   17bac:	add	r3, r3, #4
   17bb0:	ldr	ip, [r3]
   17bb4:	ldr	r3, [fp, #4]
   17bb8:	add	r3, r3, #8
   17bbc:	ldr	r3, [r3]
   17bc0:	ldr	r2, [fp, #4]
   17bc4:	add	r2, r2, #12
   17bc8:	ldr	r2, [r2]
   17bcc:	ldr	r1, [fp, #4]
   17bd0:	add	r1, r1, #16
   17bd4:	ldr	r1, [r1]
   17bd8:	str	r1, [sp, #8]
   17bdc:	str	r2, [sp, #4]
   17be0:	str	r3, [sp]
   17be4:	mov	r3, ip
   17be8:	mov	r2, r0
   17bec:	mov	r1, lr
   17bf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17bf4:	bl	112a8 <fprintf@plt>
   17bf8:	b	17ee8 <__assert_fail@plt+0x6b38>
   17bfc:	ldr	r0, [pc, #800]	; 17f24 <__assert_fail@plt+0x6b74>
   17c00:	bl	11284 <gettext@plt>
   17c04:	mov	r4, r0
   17c08:	ldr	r3, [fp, #4]
   17c0c:	ldr	ip, [r3]
   17c10:	ldr	r3, [fp, #4]
   17c14:	add	r3, r3, #4
   17c18:	ldr	lr, [r3]
   17c1c:	ldr	r3, [fp, #4]
   17c20:	add	r3, r3, #8
   17c24:	ldr	r3, [r3]
   17c28:	ldr	r2, [fp, #4]
   17c2c:	add	r2, r2, #12
   17c30:	ldr	r2, [r2]
   17c34:	ldr	r1, [fp, #4]
   17c38:	add	r1, r1, #16
   17c3c:	ldr	r1, [r1]
   17c40:	ldr	r0, [fp, #4]
   17c44:	add	r0, r0, #20
   17c48:	ldr	r0, [r0]
   17c4c:	str	r0, [sp, #12]
   17c50:	str	r1, [sp, #8]
   17c54:	str	r2, [sp, #4]
   17c58:	str	r3, [sp]
   17c5c:	mov	r3, lr
   17c60:	mov	r2, ip
   17c64:	mov	r1, r4
   17c68:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17c6c:	bl	112a8 <fprintf@plt>
   17c70:	b	17ee8 <__assert_fail@plt+0x6b38>
   17c74:	ldr	r0, [pc, #684]	; 17f28 <__assert_fail@plt+0x6b78>
   17c78:	bl	11284 <gettext@plt>
   17c7c:	mov	r5, r0
   17c80:	ldr	r3, [fp, #4]
   17c84:	ldr	lr, [r3]
   17c88:	ldr	r3, [fp, #4]
   17c8c:	add	r3, r3, #4
   17c90:	ldr	r4, [r3]
   17c94:	ldr	r3, [fp, #4]
   17c98:	add	r3, r3, #8
   17c9c:	ldr	r3, [r3]
   17ca0:	ldr	r2, [fp, #4]
   17ca4:	add	r2, r2, #12
   17ca8:	ldr	r2, [r2]
   17cac:	ldr	r1, [fp, #4]
   17cb0:	add	r1, r1, #16
   17cb4:	ldr	r1, [r1]
   17cb8:	ldr	r0, [fp, #4]
   17cbc:	add	r0, r0, #20
   17cc0:	ldr	r0, [r0]
   17cc4:	ldr	ip, [fp, #4]
   17cc8:	add	ip, ip, #24
   17ccc:	ldr	ip, [ip]
   17cd0:	str	ip, [sp, #16]
   17cd4:	str	r0, [sp, #12]
   17cd8:	str	r1, [sp, #8]
   17cdc:	str	r2, [sp, #4]
   17ce0:	str	r3, [sp]
   17ce4:	mov	r3, r4
   17ce8:	mov	r2, lr
   17cec:	mov	r1, r5
   17cf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17cf4:	bl	112a8 <fprintf@plt>
   17cf8:	b	17ee8 <__assert_fail@plt+0x6b38>
   17cfc:	ldr	r0, [pc, #552]	; 17f2c <__assert_fail@plt+0x6b7c>
   17d00:	bl	11284 <gettext@plt>
   17d04:	mov	r6, r0
   17d08:	ldr	r3, [fp, #4]
   17d0c:	ldr	r4, [r3]
   17d10:	ldr	r3, [fp, #4]
   17d14:	add	r3, r3, #4
   17d18:	ldr	r5, [r3]
   17d1c:	ldr	r3, [fp, #4]
   17d20:	add	r3, r3, #8
   17d24:	ldr	r3, [r3]
   17d28:	ldr	r2, [fp, #4]
   17d2c:	add	r2, r2, #12
   17d30:	ldr	r2, [r2]
   17d34:	ldr	r1, [fp, #4]
   17d38:	add	r1, r1, #16
   17d3c:	ldr	r1, [r1]
   17d40:	ldr	r0, [fp, #4]
   17d44:	add	r0, r0, #20
   17d48:	ldr	r0, [r0]
   17d4c:	ldr	ip, [fp, #4]
   17d50:	add	ip, ip, #24
   17d54:	ldr	ip, [ip]
   17d58:	ldr	lr, [fp, #4]
   17d5c:	add	lr, lr, #28
   17d60:	ldr	lr, [lr]
   17d64:	str	lr, [sp, #20]
   17d68:	str	ip, [sp, #16]
   17d6c:	str	r0, [sp, #12]
   17d70:	str	r1, [sp, #8]
   17d74:	str	r2, [sp, #4]
   17d78:	str	r3, [sp]
   17d7c:	mov	r3, r5
   17d80:	mov	r2, r4
   17d84:	mov	r1, r6
   17d88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17d8c:	bl	112a8 <fprintf@plt>
   17d90:	b	17ee8 <__assert_fail@plt+0x6b38>
   17d94:	ldr	r0, [pc, #404]	; 17f30 <__assert_fail@plt+0x6b80>
   17d98:	bl	11284 <gettext@plt>
   17d9c:	mov	r7, r0
   17da0:	ldr	r3, [fp, #4]
   17da4:	ldr	r5, [r3]
   17da8:	ldr	r3, [fp, #4]
   17dac:	add	r3, r3, #4
   17db0:	ldr	r6, [r3]
   17db4:	ldr	r3, [fp, #4]
   17db8:	add	r3, r3, #8
   17dbc:	ldr	r3, [r3]
   17dc0:	ldr	r2, [fp, #4]
   17dc4:	add	r2, r2, #12
   17dc8:	ldr	r2, [r2]
   17dcc:	ldr	r1, [fp, #4]
   17dd0:	add	r1, r1, #16
   17dd4:	ldr	r1, [r1]
   17dd8:	ldr	r0, [fp, #4]
   17ddc:	add	r0, r0, #20
   17de0:	ldr	r0, [r0]
   17de4:	ldr	ip, [fp, #4]
   17de8:	add	ip, ip, #24
   17dec:	ldr	ip, [ip]
   17df0:	ldr	lr, [fp, #4]
   17df4:	add	lr, lr, #28
   17df8:	ldr	lr, [lr]
   17dfc:	ldr	r4, [fp, #4]
   17e00:	add	r4, r4, #32
   17e04:	ldr	r4, [r4]
   17e08:	str	r4, [sp, #24]
   17e0c:	str	lr, [sp, #20]
   17e10:	str	ip, [sp, #16]
   17e14:	str	r0, [sp, #12]
   17e18:	str	r1, [sp, #8]
   17e1c:	str	r2, [sp, #4]
   17e20:	str	r3, [sp]
   17e24:	mov	r3, r6
   17e28:	mov	r2, r5
   17e2c:	mov	r1, r7
   17e30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17e34:	bl	112a8 <fprintf@plt>
   17e38:	b	17ee8 <__assert_fail@plt+0x6b38>
   17e3c:	ldr	r0, [pc, #240]	; 17f34 <__assert_fail@plt+0x6b84>
   17e40:	bl	11284 <gettext@plt>
   17e44:	mov	r7, r0
   17e48:	ldr	r3, [fp, #4]
   17e4c:	ldr	r5, [r3]
   17e50:	ldr	r3, [fp, #4]
   17e54:	add	r3, r3, #4
   17e58:	ldr	r6, [r3]
   17e5c:	ldr	r3, [fp, #4]
   17e60:	add	r3, r3, #8
   17e64:	ldr	r3, [r3]
   17e68:	ldr	r2, [fp, #4]
   17e6c:	add	r2, r2, #12
   17e70:	ldr	r2, [r2]
   17e74:	ldr	r1, [fp, #4]
   17e78:	add	r1, r1, #16
   17e7c:	ldr	r1, [r1]
   17e80:	ldr	r0, [fp, #4]
   17e84:	add	r0, r0, #20
   17e88:	ldr	r0, [r0]
   17e8c:	ldr	ip, [fp, #4]
   17e90:	add	ip, ip, #24
   17e94:	ldr	ip, [ip]
   17e98:	ldr	lr, [fp, #4]
   17e9c:	add	lr, lr, #28
   17ea0:	ldr	lr, [lr]
   17ea4:	ldr	r4, [fp, #4]
   17ea8:	add	r4, r4, #32
   17eac:	ldr	r4, [r4]
   17eb0:	str	r4, [sp, #24]
   17eb4:	str	lr, [sp, #20]
   17eb8:	str	ip, [sp, #16]
   17ebc:	str	r0, [sp, #12]
   17ec0:	str	r1, [sp, #8]
   17ec4:	str	r2, [sp, #4]
   17ec8:	str	r3, [sp]
   17ecc:	mov	r3, r6
   17ed0:	mov	r2, r5
   17ed4:	mov	r1, r7
   17ed8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17edc:	bl	112a8 <fprintf@plt>
   17ee0:	b	17ee8 <__assert_fail@plt+0x6b38>
   17ee4:	nop			; (mov r0, r0)
   17ee8:	nop			; (mov r0, r0)
   17eec:	sub	sp, fp, #20
   17ef0:	pop	{r4, r5, r6, r7, fp, pc}
   17ef4:	andeq	fp, r1, r4, lsr r6
   17ef8:	andeq	fp, r1, r0, asr #12
   17efc:	andeq	fp, r1, r8, asr #12
   17f00:	andeq	r0, r0, r6, ror #15
   17f04:	andeq	fp, r1, r8, asr r9
   17f08:	andeq	fp, r1, ip, asr #12
   17f0c:	strdeq	fp, [r1], -r8
   17f10:	andeq	fp, r1, ip, lsl r7
   17f14:	andeq	fp, r1, ip, lsr #14
   17f18:	andeq	fp, r1, r4, asr #14
   17f1c:	andeq	fp, r1, r0, ror #14
   17f20:	andeq	fp, r1, r0, lsl #15
   17f24:	andeq	fp, r1, r4, lsr #15
   17f28:	andeq	fp, r1, ip, asr #15
   17f2c:	strdeq	fp, [r1], -r8
   17f30:	andeq	fp, r1, r8, lsr #16
   17f34:	andeq	fp, r1, ip, asr r8
   17f38:	push	{fp, lr}
   17f3c:	add	fp, sp, #4
   17f40:	sub	sp, sp, #32
   17f44:	str	r0, [fp, #-16]
   17f48:	str	r1, [fp, #-20]	; 0xffffffec
   17f4c:	str	r2, [fp, #-24]	; 0xffffffe8
   17f50:	str	r3, [fp, #-28]	; 0xffffffe4
   17f54:	mov	r3, #0
   17f58:	str	r3, [fp, #-8]
   17f5c:	b	17f6c <__assert_fail@plt+0x6bbc>
   17f60:	ldr	r3, [fp, #-8]
   17f64:	add	r3, r3, #1
   17f68:	str	r3, [fp, #-8]
   17f6c:	ldr	r3, [fp, #-8]
   17f70:	lsl	r3, r3, #2
   17f74:	ldr	r2, [fp, #4]
   17f78:	add	r3, r2, r3
   17f7c:	ldr	r3, [r3]
   17f80:	cmp	r3, #0
   17f84:	bne	17f60 <__assert_fail@plt+0x6bb0>
   17f88:	ldr	r3, [fp, #-8]
   17f8c:	str	r3, [sp, #4]
   17f90:	ldr	r3, [fp, #4]
   17f94:	str	r3, [sp]
   17f98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17f9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17fa0:	ldr	r1, [fp, #-20]	; 0xffffffec
   17fa4:	ldr	r0, [fp, #-16]
   17fa8:	bl	179c8 <__assert_fail@plt+0x6618>
   17fac:	nop			; (mov r0, r0)
   17fb0:	sub	sp, fp, #4
   17fb4:	pop	{fp, pc}
   17fb8:	push	{fp, lr}
   17fbc:	add	fp, sp, #4
   17fc0:	sub	sp, sp, #72	; 0x48
   17fc4:	str	r0, [fp, #-56]	; 0xffffffc8
   17fc8:	str	r1, [fp, #-60]	; 0xffffffc4
   17fcc:	str	r2, [fp, #-64]	; 0xffffffc0
   17fd0:	str	r3, [fp, #-68]	; 0xffffffbc
   17fd4:	mov	r3, #0
   17fd8:	str	r3, [fp, #-8]
   17fdc:	b	17fec <__assert_fail@plt+0x6c3c>
   17fe0:	ldr	r3, [fp, #-8]
   17fe4:	add	r3, r3, #1
   17fe8:	str	r3, [fp, #-8]
   17fec:	ldr	r3, [fp, #-8]
   17ff0:	cmp	r3, #9
   17ff4:	bhi	18038 <__assert_fail@plt+0x6c88>
   17ff8:	ldr	r3, [fp, #4]
   17ffc:	add	r2, r3, #4
   18000:	str	r2, [fp, #4]
   18004:	ldr	r2, [r3]
   18008:	ldr	r3, [fp, #-8]
   1800c:	lsl	r3, r3, #2
   18010:	sub	r1, fp, #4
   18014:	add	r3, r1, r3
   18018:	str	r2, [r3, #-44]	; 0xffffffd4
   1801c:	ldr	r3, [fp, #-8]
   18020:	lsl	r3, r3, #2
   18024:	sub	r2, fp, #4
   18028:	add	r3, r2, r3
   1802c:	ldr	r3, [r3, #-44]	; 0xffffffd4
   18030:	cmp	r3, #0
   18034:	bne	17fe0 <__assert_fail@plt+0x6c30>
   18038:	ldr	r3, [fp, #-8]
   1803c:	str	r3, [sp, #4]
   18040:	sub	r3, fp, #48	; 0x30
   18044:	str	r3, [sp]
   18048:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1804c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18050:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18054:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18058:	bl	179c8 <__assert_fail@plt+0x6618>
   1805c:	nop			; (mov r0, r0)
   18060:	sub	sp, fp, #4
   18064:	pop	{fp, pc}
   18068:	push	{r3}		; (str r3, [sp, #-4]!)
   1806c:	push	{fp, lr}
   18070:	add	fp, sp, #4
   18074:	sub	sp, sp, #36	; 0x24
   18078:	str	r0, [fp, #-20]	; 0xffffffec
   1807c:	str	r1, [fp, #-24]	; 0xffffffe8
   18080:	str	r2, [fp, #-28]	; 0xffffffe4
   18084:	add	r3, fp, #8
   18088:	str	r3, [fp, #-12]
   1808c:	ldr	r3, [fp, #-12]
   18090:	str	r3, [sp]
   18094:	ldr	r3, [fp, #4]
   18098:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1809c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   180a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   180a4:	bl	17fb8 <__assert_fail@plt+0x6c08>
   180a8:	nop			; (mov r0, r0)
   180ac:	sub	sp, fp, #4
   180b0:	pop	{fp, lr}
   180b4:	add	sp, sp, #4
   180b8:	bx	lr
   180bc:	push	{fp, lr}
   180c0:	add	fp, sp, #4
   180c4:	ldr	r3, [pc, #96]	; 1812c <__assert_fail@plt+0x6d7c>
   180c8:	ldr	r3, [r3]
   180cc:	mov	r1, r3
   180d0:	mov	r0, #10
   180d4:	bl	11140 <fputc_unlocked@plt>
   180d8:	ldr	r0, [pc, #80]	; 18130 <__assert_fail@plt+0x6d80>
   180dc:	bl	11284 <gettext@plt>
   180e0:	mov	r3, r0
   180e4:	ldr	r1, [pc, #72]	; 18134 <__assert_fail@plt+0x6d84>
   180e8:	mov	r0, r3
   180ec:	bl	110bc <printf@plt>
   180f0:	ldr	r0, [pc, #64]	; 18138 <__assert_fail@plt+0x6d88>
   180f4:	bl	11284 <gettext@plt>
   180f8:	mov	r3, r0
   180fc:	ldr	r2, [pc, #56]	; 1813c <__assert_fail@plt+0x6d8c>
   18100:	ldr	r1, [pc, #56]	; 18140 <__assert_fail@plt+0x6d90>
   18104:	mov	r0, r3
   18108:	bl	110bc <printf@plt>
   1810c:	ldr	r0, [pc, #48]	; 18144 <__assert_fail@plt+0x6d94>
   18110:	bl	11284 <gettext@plt>
   18114:	mov	r3, r0
   18118:	ldr	r1, [pc, #40]	; 18148 <__assert_fail@plt+0x6d98>
   1811c:	mov	r0, r3
   18120:	bl	110bc <printf@plt>
   18124:	nop			; (mov r0, r0)
   18128:	pop	{fp, pc}
   1812c:	muleq	r2, ip, r1
   18130:	muleq	r1, r8, r8
   18134:	andeq	fp, r1, ip, lsr #17
   18138:	andeq	fp, r1, r4, asr #17
   1813c:	ldrdeq	fp, [r1], -r8
   18140:	andeq	fp, r1, r0, lsl #18
   18144:	andeq	fp, r1, r0, lsl r9
   18148:	andeq	fp, r1, r8, lsr r9
   1814c:	push	{fp, lr}
   18150:	add	fp, sp, #4
   18154:	sub	sp, sp, #16
   18158:	str	r0, [fp, #-8]
   1815c:	str	r1, [fp, #-12]
   18160:	str	r2, [fp, #-16]
   18164:	ldr	r2, [fp, #-16]
   18168:	ldr	r1, [fp, #-12]
   1816c:	ldr	r0, [fp, #-8]
   18170:	bl	182dc <__assert_fail@plt+0x6f2c>
   18174:	mov	r3, r0
   18178:	mov	r0, r3
   1817c:	sub	sp, fp, #4
   18180:	pop	{fp, pc}
   18184:	push	{fp, lr}
   18188:	add	fp, sp, #4
   1818c:	sub	sp, sp, #8
   18190:	str	r0, [fp, #-8]
   18194:	ldr	r3, [fp, #-8]
   18198:	cmp	r3, #0
   1819c:	bne	181a4 <__assert_fail@plt+0x6df4>
   181a0:	bl	18cd0 <__assert_fail@plt+0x7920>
   181a4:	ldr	r3, [fp, #-8]
   181a8:	mov	r0, r3
   181ac:	sub	sp, fp, #4
   181b0:	pop	{fp, pc}
   181b4:	push	{fp, lr}
   181b8:	add	fp, sp, #4
   181bc:	sub	sp, sp, #8
   181c0:	str	r0, [fp, #-8]
   181c4:	ldr	r0, [fp, #-8]
   181c8:	bl	18e24 <__assert_fail@plt+0x7a74>
   181cc:	mov	r3, r0
   181d0:	mov	r0, r3
   181d4:	bl	18184 <__assert_fail@plt+0x6dd4>
   181d8:	mov	r3, r0
   181dc:	mov	r0, r3
   181e0:	sub	sp, fp, #4
   181e4:	pop	{fp, pc}
   181e8:	push	{fp, lr}
   181ec:	add	fp, sp, #4
   181f0:	sub	sp, sp, #8
   181f4:	str	r0, [fp, #-8]
   181f8:	ldr	r0, [fp, #-8]
   181fc:	bl	19224 <__assert_fail@plt+0x7e74>
   18200:	mov	r3, r0
   18204:	mov	r0, r3
   18208:	bl	18184 <__assert_fail@plt+0x6dd4>
   1820c:	mov	r3, r0
   18210:	mov	r0, r3
   18214:	sub	sp, fp, #4
   18218:	pop	{fp, pc}
   1821c:	push	{fp, lr}
   18220:	add	fp, sp, #4
   18224:	sub	sp, sp, #8
   18228:	str	r0, [fp, #-8]
   1822c:	ldr	r0, [fp, #-8]
   18230:	bl	181b4 <__assert_fail@plt+0x6e04>
   18234:	mov	r3, r0
   18238:	mov	r0, r3
   1823c:	sub	sp, fp, #4
   18240:	pop	{fp, pc}
   18244:	push	{fp, lr}
   18248:	add	fp, sp, #4
   1824c:	sub	sp, sp, #16
   18250:	str	r0, [fp, #-16]
   18254:	str	r1, [fp, #-20]	; 0xffffffec
   18258:	ldr	r1, [fp, #-20]	; 0xffffffec
   1825c:	ldr	r0, [fp, #-16]
   18260:	bl	18ecc <__assert_fail@plt+0x7b1c>
   18264:	str	r0, [fp, #-8]
   18268:	ldr	r3, [fp, #-8]
   1826c:	cmp	r3, #0
   18270:	bne	18290 <__assert_fail@plt+0x6ee0>
   18274:	ldr	r3, [fp, #-16]
   18278:	cmp	r3, #0
   1827c:	beq	1828c <__assert_fail@plt+0x6edc>
   18280:	ldr	r3, [fp, #-20]	; 0xffffffec
   18284:	cmp	r3, #0
   18288:	beq	18290 <__assert_fail@plt+0x6ee0>
   1828c:	bl	18cd0 <__assert_fail@plt+0x7920>
   18290:	ldr	r3, [fp, #-8]
   18294:	mov	r0, r3
   18298:	sub	sp, fp, #4
   1829c:	pop	{fp, pc}
   182a0:	push	{fp, lr}
   182a4:	add	fp, sp, #4
   182a8:	sub	sp, sp, #8
   182ac:	str	r0, [fp, #-8]
   182b0:	str	r1, [fp, #-12]
   182b4:	ldr	r1, [fp, #-12]
   182b8:	ldr	r0, [fp, #-8]
   182bc:	bl	19250 <__assert_fail@plt+0x7ea0>
   182c0:	mov	r3, r0
   182c4:	mov	r0, r3
   182c8:	bl	18184 <__assert_fail@plt+0x6dd4>
   182cc:	mov	r3, r0
   182d0:	mov	r0, r3
   182d4:	sub	sp, fp, #4
   182d8:	pop	{fp, pc}
   182dc:	push	{fp, lr}
   182e0:	add	fp, sp, #4
   182e4:	sub	sp, sp, #24
   182e8:	str	r0, [fp, #-16]
   182ec:	str	r1, [fp, #-20]	; 0xffffffec
   182f0:	str	r2, [fp, #-24]	; 0xffffffe8
   182f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   182f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   182fc:	ldr	r0, [fp, #-16]
   18300:	bl	19b00 <_obstack_memory_used@@Base+0xc4>
   18304:	str	r0, [fp, #-8]
   18308:	ldr	r3, [fp, #-8]
   1830c:	cmp	r3, #0
   18310:	bne	1833c <__assert_fail@plt+0x6f8c>
   18314:	ldr	r3, [fp, #-16]
   18318:	cmp	r3, #0
   1831c:	beq	18338 <__assert_fail@plt+0x6f88>
   18320:	ldr	r3, [fp, #-20]	; 0xffffffec
   18324:	cmp	r3, #0
   18328:	beq	1833c <__assert_fail@plt+0x6f8c>
   1832c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18330:	cmp	r3, #0
   18334:	beq	1833c <__assert_fail@plt+0x6f8c>
   18338:	bl	18cd0 <__assert_fail@plt+0x7920>
   1833c:	ldr	r3, [fp, #-8]
   18340:	mov	r0, r3
   18344:	sub	sp, fp, #4
   18348:	pop	{fp, pc}
   1834c:	push	{fp, lr}
   18350:	add	fp, sp, #4
   18354:	sub	sp, sp, #16
   18358:	str	r0, [fp, #-8]
   1835c:	str	r1, [fp, #-12]
   18360:	str	r2, [fp, #-16]
   18364:	ldr	r2, [fp, #-16]
   18368:	ldr	r1, [fp, #-12]
   1836c:	ldr	r0, [fp, #-8]
   18370:	bl	192d8 <__assert_fail@plt+0x7f28>
   18374:	mov	r3, r0
   18378:	mov	r0, r3
   1837c:	bl	18184 <__assert_fail@plt+0x6dd4>
   18380:	mov	r3, r0
   18384:	mov	r0, r3
   18388:	sub	sp, fp, #4
   1838c:	pop	{fp, pc}
   18390:	push	{fp, lr}
   18394:	add	fp, sp, #4
   18398:	sub	sp, sp, #8
   1839c:	str	r0, [fp, #-8]
   183a0:	str	r1, [fp, #-12]
   183a4:	ldr	r2, [fp, #-12]
   183a8:	ldr	r1, [fp, #-8]
   183ac:	mov	r0, #0
   183b0:	bl	182dc <__assert_fail@plt+0x6f2c>
   183b4:	mov	r3, r0
   183b8:	mov	r0, r3
   183bc:	sub	sp, fp, #4
   183c0:	pop	{fp, pc}
   183c4:	push	{fp, lr}
   183c8:	add	fp, sp, #4
   183cc:	sub	sp, sp, #8
   183d0:	str	r0, [fp, #-8]
   183d4:	str	r1, [fp, #-12]
   183d8:	ldr	r2, [fp, #-12]
   183dc:	ldr	r1, [fp, #-8]
   183e0:	mov	r0, #0
   183e4:	bl	1834c <__assert_fail@plt+0x6f9c>
   183e8:	mov	r3, r0
   183ec:	mov	r0, r3
   183f0:	sub	sp, fp, #4
   183f4:	pop	{fp, pc}
   183f8:	push	{fp, lr}
   183fc:	add	fp, sp, #4
   18400:	sub	sp, sp, #8
   18404:	str	r0, [fp, #-8]
   18408:	str	r1, [fp, #-12]
   1840c:	mov	r2, #1
   18410:	ldr	r1, [fp, #-12]
   18414:	ldr	r0, [fp, #-8]
   18418:	bl	1842c <__assert_fail@plt+0x707c>
   1841c:	mov	r3, r0
   18420:	mov	r0, r3
   18424:	sub	sp, fp, #4
   18428:	pop	{fp, pc}
   1842c:	push	{fp, lr}
   18430:	add	fp, sp, #4
   18434:	sub	sp, sp, #24
   18438:	str	r0, [fp, #-16]
   1843c:	str	r1, [fp, #-20]	; 0xffffffec
   18440:	str	r2, [fp, #-24]	; 0xffffffe8
   18444:	ldr	r3, [fp, #-20]	; 0xffffffec
   18448:	ldr	r3, [r3]
   1844c:	str	r3, [fp, #-8]
   18450:	ldr	r3, [fp, #-16]
   18454:	cmp	r3, #0
   18458:	bne	184a4 <__assert_fail@plt+0x70f4>
   1845c:	ldr	r3, [fp, #-8]
   18460:	cmp	r3, #0
   18464:	bne	18508 <__assert_fail@plt+0x7158>
   18468:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1846c:	mov	r0, #64	; 0x40
   18470:	bl	1a20c <_obstack_memory_used@@Base+0x7d0>
   18474:	mov	r3, r0
   18478:	str	r3, [fp, #-8]
   1847c:	ldr	r3, [fp, #-8]
   18480:	cmp	r3, #0
   18484:	moveq	r3, #1
   18488:	movne	r3, #0
   1848c:	uxtb	r3, r3
   18490:	mov	r2, r3
   18494:	ldr	r3, [fp, #-8]
   18498:	add	r3, r2, r3
   1849c:	str	r3, [fp, #-8]
   184a0:	b	18508 <__assert_fail@plt+0x7158>
   184a4:	ldr	r3, [fp, #-8]
   184a8:	lsr	r3, r3, #1
   184ac:	add	r3, r3, #1
   184b0:	mvn	r2, r3
   184b4:	ldr	r3, [fp, #-8]
   184b8:	cmp	r2, r3
   184bc:	bcs	184e0 <__assert_fail@plt+0x7130>
   184c0:	ldr	r3, [fp, #-8]
   184c4:	lsr	r2, r3, #1
   184c8:	ldr	r3, [fp, #-8]
   184cc:	add	r3, r2, r3
   184d0:	add	r3, r3, #1
   184d4:	str	r3, [fp, #-8]
   184d8:	mov	r3, #1
   184dc:	b	184fc <__assert_fail@plt+0x714c>
   184e0:	ldr	r3, [fp, #-8]
   184e4:	lsr	r2, r3, #1
   184e8:	ldr	r3, [fp, #-8]
   184ec:	add	r3, r2, r3
   184f0:	add	r3, r3, #1
   184f4:	str	r3, [fp, #-8]
   184f8:	mov	r3, #0
   184fc:	cmp	r3, #0
   18500:	beq	18508 <__assert_fail@plt+0x7158>
   18504:	bl	18cd0 <__assert_fail@plt+0x7920>
   18508:	ldr	r3, [fp, #-8]
   1850c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18510:	mov	r1, r3
   18514:	ldr	r0, [fp, #-16]
   18518:	bl	182dc <__assert_fail@plt+0x6f2c>
   1851c:	str	r0, [fp, #-16]
   18520:	ldr	r2, [fp, #-8]
   18524:	ldr	r3, [fp, #-20]	; 0xffffffec
   18528:	str	r2, [r3]
   1852c:	ldr	r3, [fp, #-16]
   18530:	mov	r0, r3
   18534:	sub	sp, fp, #4
   18538:	pop	{fp, pc}
   1853c:	push	{fp, lr}
   18540:	add	fp, sp, #4
   18544:	sub	sp, sp, #32
   18548:	str	r0, [fp, #-24]	; 0xffffffe8
   1854c:	str	r1, [fp, #-28]	; 0xffffffe4
   18550:	str	r2, [fp, #-32]	; 0xffffffe0
   18554:	str	r3, [fp, #-36]	; 0xffffffdc
   18558:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1855c:	ldr	r3, [r3]
   18560:	str	r3, [fp, #-8]
   18564:	ldr	r3, [fp, #-8]
   18568:	asr	r3, r3, #1
   1856c:	cmp	r3, #0
   18570:	bge	18598 <__assert_fail@plt+0x71e8>
   18574:	ldr	r3, [fp, #-8]
   18578:	asr	r3, r3, #1
   1857c:	rsb	r2, r3, #-2147483648	; 0x80000000
   18580:	ldr	r3, [fp, #-8]
   18584:	cmp	r2, r3
   18588:	movgt	r3, #1
   1858c:	movle	r3, #0
   18590:	uxtb	r3, r3
   18594:	b	185ec <__assert_fail@plt+0x723c>
   18598:	ldr	r3, [fp, #-8]
   1859c:	cmp	r3, #0
   185a0:	bge	185c8 <__assert_fail@plt+0x7218>
   185a4:	ldr	r3, [fp, #-8]
   185a8:	asr	r2, r3, #1
   185ac:	ldr	r3, [fp, #-8]
   185b0:	rsb	r3, r3, #-2147483648	; 0x80000000
   185b4:	cmp	r2, r3
   185b8:	movlt	r3, #1
   185bc:	movge	r3, #0
   185c0:	uxtb	r3, r3
   185c4:	b	185ec <__assert_fail@plt+0x723c>
   185c8:	ldr	r3, [fp, #-8]
   185cc:	asr	r2, r3, #1
   185d0:	mvn	r3, #-2147483648	; 0x80000000
   185d4:	sub	r3, r3, r2
   185d8:	ldr	r2, [fp, #-8]
   185dc:	cmp	r3, r2
   185e0:	movlt	r3, #1
   185e4:	movge	r3, #0
   185e8:	uxtb	r3, r3
   185ec:	cmp	r3, #0
   185f0:	beq	18614 <__assert_fail@plt+0x7264>
   185f4:	ldr	r3, [fp, #-8]
   185f8:	asr	r3, r3, #1
   185fc:	mov	r2, r3
   18600:	ldr	r3, [fp, #-8]
   18604:	add	r3, r2, r3
   18608:	str	r3, [fp, #-16]
   1860c:	mov	r3, #1
   18610:	b	18630 <__assert_fail@plt+0x7280>
   18614:	ldr	r3, [fp, #-8]
   18618:	asr	r3, r3, #1
   1861c:	mov	r2, r3
   18620:	ldr	r3, [fp, #-8]
   18624:	add	r3, r2, r3
   18628:	str	r3, [fp, #-16]
   1862c:	mov	r3, #0
   18630:	cmp	r3, #0
   18634:	beq	18640 <__assert_fail@plt+0x7290>
   18638:	mvn	r3, #-2147483648	; 0x80000000
   1863c:	str	r3, [fp, #-16]
   18640:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18644:	cmp	r3, #0
   18648:	blt	18664 <__assert_fail@plt+0x72b4>
   1864c:	ldr	r3, [fp, #-16]
   18650:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18654:	cmp	r2, r3
   18658:	bge	18664 <__assert_fail@plt+0x72b4>
   1865c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18660:	str	r3, [fp, #-16]
   18664:	ldr	r3, [fp, #4]
   18668:	cmp	r3, #0
   1866c:	bge	186fc <__assert_fail@plt+0x734c>
   18670:	ldr	r3, [fp, #-16]
   18674:	cmp	r3, #0
   18678:	bge	186a8 <__assert_fail@plt+0x72f8>
   1867c:	ldr	r1, [fp, #4]
   18680:	mvn	r0, #-2147483648	; 0x80000000
   18684:	bl	1a418 <_obstack_memory_used@@Base+0x9dc>
   18688:	mov	r3, r0
   1868c:	mov	r2, r3
   18690:	ldr	r3, [fp, #-16]
   18694:	cmp	r2, r3
   18698:	movgt	r3, #1
   1869c:	movle	r3, #0
   186a0:	uxtb	r3, r3
   186a4:	b	1879c <__assert_fail@plt+0x73ec>
   186a8:	ldr	r3, [fp, #4]
   186ac:	cmn	r3, #1
   186b0:	bne	186d0 <__assert_fail@plt+0x7320>
   186b4:	ldr	r3, [fp, #-16]
   186b8:	add	r3, r3, #-2147483648	; 0x80000000
   186bc:	cmp	r3, #0
   186c0:	movgt	r3, #1
   186c4:	movle	r3, #0
   186c8:	uxtb	r3, r3
   186cc:	b	1879c <__assert_fail@plt+0x73ec>
   186d0:	ldr	r1, [fp, #4]
   186d4:	mov	r0, #-2147483648	; 0x80000000
   186d8:	bl	1a418 <_obstack_memory_used@@Base+0x9dc>
   186dc:	mov	r3, r0
   186e0:	mov	r2, r3
   186e4:	ldr	r3, [fp, #-16]
   186e8:	cmp	r2, r3
   186ec:	movlt	r3, #1
   186f0:	movge	r3, #0
   186f4:	uxtb	r3, r3
   186f8:	b	1879c <__assert_fail@plt+0x73ec>
   186fc:	ldr	r3, [fp, #4]
   18700:	cmp	r3, #0
   18704:	beq	18798 <__assert_fail@plt+0x73e8>
   18708:	ldr	r3, [fp, #-16]
   1870c:	cmp	r3, #0
   18710:	bge	1876c <__assert_fail@plt+0x73bc>
   18714:	ldr	r3, [fp, #-16]
   18718:	cmn	r3, #1
   1871c:	bne	1873c <__assert_fail@plt+0x738c>
   18720:	ldr	r3, [fp, #4]
   18724:	add	r3, r3, #-2147483648	; 0x80000000
   18728:	cmp	r3, #0
   1872c:	movgt	r3, #1
   18730:	movle	r3, #0
   18734:	uxtb	r3, r3
   18738:	b	1879c <__assert_fail@plt+0x73ec>
   1873c:	ldr	r3, [fp, #-16]
   18740:	mov	r1, r3
   18744:	mov	r0, #-2147483648	; 0x80000000
   18748:	bl	1a418 <_obstack_memory_used@@Base+0x9dc>
   1874c:	mov	r3, r0
   18750:	mov	r2, r3
   18754:	ldr	r3, [fp, #4]
   18758:	cmp	r2, r3
   1875c:	movlt	r3, #1
   18760:	movge	r3, #0
   18764:	uxtb	r3, r3
   18768:	b	1879c <__assert_fail@plt+0x73ec>
   1876c:	ldr	r1, [fp, #4]
   18770:	mvn	r0, #-2147483648	; 0x80000000
   18774:	bl	1a418 <_obstack_memory_used@@Base+0x9dc>
   18778:	mov	r3, r0
   1877c:	mov	r2, r3
   18780:	ldr	r3, [fp, #-16]
   18784:	cmp	r2, r3
   18788:	movlt	r3, #1
   1878c:	movge	r3, #0
   18790:	uxtb	r3, r3
   18794:	b	1879c <__assert_fail@plt+0x73ec>
   18798:	mov	r3, #0
   1879c:	cmp	r3, #0
   187a0:	beq	187c0 <__assert_fail@plt+0x7410>
   187a4:	ldr	r3, [fp, #-16]
   187a8:	mov	r2, r3
   187ac:	ldr	r3, [fp, #4]
   187b0:	mul	r3, r3, r2
   187b4:	str	r3, [fp, #-20]	; 0xffffffec
   187b8:	mov	r3, #1
   187bc:	b	187d8 <__assert_fail@plt+0x7428>
   187c0:	ldr	r3, [fp, #-16]
   187c4:	mov	r2, r3
   187c8:	ldr	r3, [fp, #4]
   187cc:	mul	r3, r3, r2
   187d0:	str	r3, [fp, #-20]	; 0xffffffec
   187d4:	mov	r3, #0
   187d8:	cmp	r3, #0
   187dc:	beq	187e8 <__assert_fail@plt+0x7438>
   187e0:	mvn	r3, #-2147483648	; 0x80000000
   187e4:	b	18800 <__assert_fail@plt+0x7450>
   187e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   187ec:	cmp	r3, #63	; 0x3f
   187f0:	bgt	187fc <__assert_fail@plt+0x744c>
   187f4:	mov	r3, #64	; 0x40
   187f8:	b	18800 <__assert_fail@plt+0x7450>
   187fc:	mov	r3, #0
   18800:	str	r3, [fp, #-12]
   18804:	ldr	r3, [fp, #-12]
   18808:	cmp	r3, #0
   1880c:	beq	18848 <__assert_fail@plt+0x7498>
   18810:	ldr	r1, [fp, #4]
   18814:	ldr	r0, [fp, #-12]
   18818:	bl	1a418 <_obstack_memory_used@@Base+0x9dc>
   1881c:	mov	r3, r0
   18820:	str	r3, [fp, #-16]
   18824:	ldr	r3, [fp, #-12]
   18828:	ldr	r1, [fp, #4]
   1882c:	mov	r0, r3
   18830:	bl	1a638 <_obstack_memory_used@@Base+0xbfc>
   18834:	mov	r3, r1
   18838:	mov	r2, r3
   1883c:	ldr	r3, [fp, #-12]
   18840:	sub	r3, r3, r2
   18844:	str	r3, [fp, #-20]	; 0xffffffec
   18848:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1884c:	cmp	r3, #0
   18850:	bne	18860 <__assert_fail@plt+0x74b0>
   18854:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18858:	mov	r2, #0
   1885c:	str	r2, [r3]
   18860:	ldr	r2, [fp, #-16]
   18864:	ldr	r3, [fp, #-8]
   18868:	sub	r2, r2, r3
   1886c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18870:	cmp	r2, r3
   18874:	bge	18aac <__assert_fail@plt+0x76fc>
   18878:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1887c:	cmp	r3, #0
   18880:	bge	188a4 <__assert_fail@plt+0x74f4>
   18884:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18888:	rsb	r2, r3, #-2147483648	; 0x80000000
   1888c:	ldr	r3, [fp, #-8]
   18890:	cmp	r2, r3
   18894:	movgt	r3, #1
   18898:	movle	r3, #0
   1889c:	uxtb	r3, r3
   188a0:	b	188f0 <__assert_fail@plt+0x7540>
   188a4:	ldr	r3, [fp, #-8]
   188a8:	cmp	r3, #0
   188ac:	bge	188d0 <__assert_fail@plt+0x7520>
   188b0:	ldr	r3, [fp, #-8]
   188b4:	rsb	r2, r3, #-2147483648	; 0x80000000
   188b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   188bc:	cmp	r2, r3
   188c0:	movgt	r3, #1
   188c4:	movle	r3, #0
   188c8:	uxtb	r3, r3
   188cc:	b	188f0 <__assert_fail@plt+0x7540>
   188d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   188d4:	mvn	r3, #-2147483648	; 0x80000000
   188d8:	sub	r3, r3, r2
   188dc:	ldr	r2, [fp, #-8]
   188e0:	cmp	r3, r2
   188e4:	movlt	r3, #1
   188e8:	movge	r3, #0
   188ec:	uxtb	r3, r3
   188f0:	cmp	r3, #0
   188f4:	beq	1890c <__assert_fail@plt+0x755c>
   188f8:	ldr	r2, [fp, #-8]
   188fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18900:	add	r3, r2, r3
   18904:	str	r3, [fp, #-16]
   18908:	b	18aa8 <__assert_fail@plt+0x76f8>
   1890c:	ldr	r2, [fp, #-8]
   18910:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18914:	add	r3, r2, r3
   18918:	str	r3, [fp, #-16]
   1891c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18920:	cmp	r3, #0
   18924:	blt	18938 <__assert_fail@plt+0x7588>
   18928:	ldr	r3, [fp, #-16]
   1892c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18930:	cmp	r2, r3
   18934:	blt	18aa8 <__assert_fail@plt+0x76f8>
   18938:	ldr	r3, [fp, #4]
   1893c:	cmp	r3, #0
   18940:	bge	189d0 <__assert_fail@plt+0x7620>
   18944:	ldr	r3, [fp, #-16]
   18948:	cmp	r3, #0
   1894c:	bge	1897c <__assert_fail@plt+0x75cc>
   18950:	ldr	r1, [fp, #4]
   18954:	mvn	r0, #-2147483648	; 0x80000000
   18958:	bl	1a418 <_obstack_memory_used@@Base+0x9dc>
   1895c:	mov	r3, r0
   18960:	mov	r2, r3
   18964:	ldr	r3, [fp, #-16]
   18968:	cmp	r2, r3
   1896c:	movgt	r3, #1
   18970:	movle	r3, #0
   18974:	uxtb	r3, r3
   18978:	b	18a70 <__assert_fail@plt+0x76c0>
   1897c:	ldr	r3, [fp, #4]
   18980:	cmn	r3, #1
   18984:	bne	189a4 <__assert_fail@plt+0x75f4>
   18988:	ldr	r3, [fp, #-16]
   1898c:	add	r3, r3, #-2147483648	; 0x80000000
   18990:	cmp	r3, #0
   18994:	movgt	r3, #1
   18998:	movle	r3, #0
   1899c:	uxtb	r3, r3
   189a0:	b	18a70 <__assert_fail@plt+0x76c0>
   189a4:	ldr	r1, [fp, #4]
   189a8:	mov	r0, #-2147483648	; 0x80000000
   189ac:	bl	1a418 <_obstack_memory_used@@Base+0x9dc>
   189b0:	mov	r3, r0
   189b4:	mov	r2, r3
   189b8:	ldr	r3, [fp, #-16]
   189bc:	cmp	r2, r3
   189c0:	movlt	r3, #1
   189c4:	movge	r3, #0
   189c8:	uxtb	r3, r3
   189cc:	b	18a70 <__assert_fail@plt+0x76c0>
   189d0:	ldr	r3, [fp, #4]
   189d4:	cmp	r3, #0
   189d8:	beq	18a6c <__assert_fail@plt+0x76bc>
   189dc:	ldr	r3, [fp, #-16]
   189e0:	cmp	r3, #0
   189e4:	bge	18a40 <__assert_fail@plt+0x7690>
   189e8:	ldr	r3, [fp, #-16]
   189ec:	cmn	r3, #1
   189f0:	bne	18a10 <__assert_fail@plt+0x7660>
   189f4:	ldr	r3, [fp, #4]
   189f8:	add	r3, r3, #-2147483648	; 0x80000000
   189fc:	cmp	r3, #0
   18a00:	movgt	r3, #1
   18a04:	movle	r3, #0
   18a08:	uxtb	r3, r3
   18a0c:	b	18a70 <__assert_fail@plt+0x76c0>
   18a10:	ldr	r3, [fp, #-16]
   18a14:	mov	r1, r3
   18a18:	mov	r0, #-2147483648	; 0x80000000
   18a1c:	bl	1a418 <_obstack_memory_used@@Base+0x9dc>
   18a20:	mov	r3, r0
   18a24:	mov	r2, r3
   18a28:	ldr	r3, [fp, #4]
   18a2c:	cmp	r2, r3
   18a30:	movlt	r3, #1
   18a34:	movge	r3, #0
   18a38:	uxtb	r3, r3
   18a3c:	b	18a70 <__assert_fail@plt+0x76c0>
   18a40:	ldr	r1, [fp, #4]
   18a44:	mvn	r0, #-2147483648	; 0x80000000
   18a48:	bl	1a418 <_obstack_memory_used@@Base+0x9dc>
   18a4c:	mov	r3, r0
   18a50:	mov	r2, r3
   18a54:	ldr	r3, [fp, #-16]
   18a58:	cmp	r2, r3
   18a5c:	movlt	r3, #1
   18a60:	movge	r3, #0
   18a64:	uxtb	r3, r3
   18a68:	b	18a70 <__assert_fail@plt+0x76c0>
   18a6c:	mov	r3, #0
   18a70:	cmp	r3, #0
   18a74:	beq	18a90 <__assert_fail@plt+0x76e0>
   18a78:	ldr	r3, [fp, #-16]
   18a7c:	mov	r2, r3
   18a80:	ldr	r3, [fp, #4]
   18a84:	mul	r3, r3, r2
   18a88:	str	r3, [fp, #-20]	; 0xffffffec
   18a8c:	b	18aa8 <__assert_fail@plt+0x76f8>
   18a90:	ldr	r3, [fp, #-16]
   18a94:	mov	r2, r3
   18a98:	ldr	r3, [fp, #4]
   18a9c:	mul	r3, r3, r2
   18aa0:	str	r3, [fp, #-20]	; 0xffffffec
   18aa4:	b	18aac <__assert_fail@plt+0x76fc>
   18aa8:	bl	18cd0 <__assert_fail@plt+0x7920>
   18aac:	ldr	r3, [fp, #-20]	; 0xffffffec
   18ab0:	mov	r1, r3
   18ab4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18ab8:	bl	18244 <__assert_fail@plt+0x6e94>
   18abc:	str	r0, [fp, #-24]	; 0xffffffe8
   18ac0:	ldr	r2, [fp, #-16]
   18ac4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18ac8:	str	r2, [r3]
   18acc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ad0:	mov	r0, r3
   18ad4:	sub	sp, fp, #4
   18ad8:	pop	{fp, pc}
   18adc:	push	{fp, lr}
   18ae0:	add	fp, sp, #4
   18ae4:	sub	sp, sp, #8
   18ae8:	str	r0, [fp, #-8]
   18aec:	mov	r1, #1
   18af0:	ldr	r0, [fp, #-8]
   18af4:	bl	18b34 <__assert_fail@plt+0x7784>
   18af8:	mov	r3, r0
   18afc:	mov	r0, r3
   18b00:	sub	sp, fp, #4
   18b04:	pop	{fp, pc}
   18b08:	push	{fp, lr}
   18b0c:	add	fp, sp, #4
   18b10:	sub	sp, sp, #8
   18b14:	str	r0, [fp, #-8]
   18b18:	mov	r1, #1
   18b1c:	ldr	r0, [fp, #-8]
   18b20:	bl	18b70 <__assert_fail@plt+0x77c0>
   18b24:	mov	r3, r0
   18b28:	mov	r0, r3
   18b2c:	sub	sp, fp, #4
   18b30:	pop	{fp, pc}
   18b34:	push	{fp, lr}
   18b38:	add	fp, sp, #4
   18b3c:	sub	sp, sp, #8
   18b40:	str	r0, [fp, #-8]
   18b44:	str	r1, [fp, #-12]
   18b48:	ldr	r1, [fp, #-12]
   18b4c:	ldr	r0, [fp, #-8]
   18b50:	bl	18d60 <__assert_fail@plt+0x79b0>
   18b54:	mov	r3, r0
   18b58:	mov	r0, r3
   18b5c:	bl	18184 <__assert_fail@plt+0x6dd4>
   18b60:	mov	r3, r0
   18b64:	mov	r0, r3
   18b68:	sub	sp, fp, #4
   18b6c:	pop	{fp, pc}
   18b70:	push	{fp, lr}
   18b74:	add	fp, sp, #4
   18b78:	sub	sp, sp, #8
   18b7c:	str	r0, [fp, #-8]
   18b80:	str	r1, [fp, #-12]
   18b84:	ldr	r1, [fp, #-12]
   18b88:	ldr	r0, [fp, #-8]
   18b8c:	bl	192a0 <__assert_fail@plt+0x7ef0>
   18b90:	mov	r3, r0
   18b94:	mov	r0, r3
   18b98:	bl	18184 <__assert_fail@plt+0x6dd4>
   18b9c:	mov	r3, r0
   18ba0:	mov	r0, r3
   18ba4:	sub	sp, fp, #4
   18ba8:	pop	{fp, pc}
   18bac:	push	{fp, lr}
   18bb0:	add	fp, sp, #4
   18bb4:	sub	sp, sp, #8
   18bb8:	str	r0, [fp, #-8]
   18bbc:	str	r1, [fp, #-12]
   18bc0:	ldr	r0, [fp, #-12]
   18bc4:	bl	181b4 <__assert_fail@plt+0x6e04>
   18bc8:	mov	r3, r0
   18bcc:	ldr	r2, [fp, #-12]
   18bd0:	ldr	r1, [fp, #-8]
   18bd4:	mov	r0, r3
   18bd8:	bl	1111c <memcpy@plt>
   18bdc:	mov	r3, r0
   18be0:	mov	r0, r3
   18be4:	sub	sp, fp, #4
   18be8:	pop	{fp, pc}
   18bec:	push	{fp, lr}
   18bf0:	add	fp, sp, #4
   18bf4:	sub	sp, sp, #8
   18bf8:	str	r0, [fp, #-8]
   18bfc:	str	r1, [fp, #-12]
   18c00:	ldr	r0, [fp, #-12]
   18c04:	bl	181e8 <__assert_fail@plt+0x6e38>
   18c08:	mov	r3, r0
   18c0c:	mov	r0, r3
   18c10:	ldr	r3, [fp, #-12]
   18c14:	mov	r2, r3
   18c18:	ldr	r1, [fp, #-8]
   18c1c:	bl	1111c <memcpy@plt>
   18c20:	mov	r3, r0
   18c24:	mov	r0, r3
   18c28:	sub	sp, fp, #4
   18c2c:	pop	{fp, pc}
   18c30:	push	{fp, lr}
   18c34:	add	fp, sp, #4
   18c38:	sub	sp, sp, #16
   18c3c:	str	r0, [fp, #-16]
   18c40:	str	r1, [fp, #-20]	; 0xffffffec
   18c44:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c48:	add	r3, r3, #1
   18c4c:	mov	r0, r3
   18c50:	bl	181e8 <__assert_fail@plt+0x6e38>
   18c54:	mov	r3, r0
   18c58:	str	r3, [fp, #-8]
   18c5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c60:	ldr	r2, [fp, #-8]
   18c64:	add	r3, r2, r3
   18c68:	mov	r2, #0
   18c6c:	strb	r2, [r3]
   18c70:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c74:	mov	r2, r3
   18c78:	ldr	r1, [fp, #-16]
   18c7c:	ldr	r0, [fp, #-8]
   18c80:	bl	1111c <memcpy@plt>
   18c84:	mov	r3, r0
   18c88:	mov	r0, r3
   18c8c:	sub	sp, fp, #4
   18c90:	pop	{fp, pc}
   18c94:	push	{fp, lr}
   18c98:	add	fp, sp, #4
   18c9c:	sub	sp, sp, #8
   18ca0:	str	r0, [fp, #-8]
   18ca4:	ldr	r0, [fp, #-8]
   18ca8:	bl	11290 <strlen@plt>
   18cac:	mov	r3, r0
   18cb0:	add	r3, r3, #1
   18cb4:	mov	r1, r3
   18cb8:	ldr	r0, [fp, #-8]
   18cbc:	bl	18bac <__assert_fail@plt+0x77fc>
   18cc0:	mov	r3, r0
   18cc4:	mov	r0, r3
   18cc8:	sub	sp, fp, #4
   18ccc:	pop	{fp, pc}
   18cd0:	push	{r4, r5, fp, lr}
   18cd4:	add	fp, sp, #12
   18cd8:	ldr	r3, [pc, #32]	; 18d00 <__assert_fail@plt+0x7950>
   18cdc:	ldr	r4, [r3]
   18ce0:	ldr	r0, [pc, #28]	; 18d04 <__assert_fail@plt+0x7954>
   18ce4:	bl	11284 <gettext@plt>
   18ce8:	mov	r3, r0
   18cec:	ldr	r2, [pc, #20]	; 18d08 <__assert_fail@plt+0x7958>
   18cf0:	mov	r1, #0
   18cf4:	mov	r0, r4
   18cf8:	bl	111e8 <error@plt>
   18cfc:	bl	1138c <abort@plt>
   18d00:	andeq	ip, r2, r4, lsr r1
   18d04:	andeq	fp, r1, r8, lsl #19
   18d08:	muleq	r1, ip, r9
   18d0c:	push	{fp}		; (str fp, [sp, #-4]!)
   18d10:	add	fp, sp, #0
   18d14:	nop			; (mov r0, r0)
   18d18:	add	sp, fp, #0
   18d1c:	pop	{fp}		; (ldr fp, [sp], #4)
   18d20:	bx	lr
   18d24:	push	{fp, lr}
   18d28:	add	fp, sp, #4
   18d2c:	sub	sp, sp, #8
   18d30:	str	r0, [fp, #-8]
   18d34:	str	r1, [fp, #-12]
   18d38:	ldr	r1, [fp, #-12]
   18d3c:	ldr	r0, [fp, #-8]
   18d40:	bl	18fc4 <__assert_fail@plt+0x7c14>
   18d44:	mov	r3, r0
   18d48:	cmp	r3, #0
   18d4c:	bge	18d54 <__assert_fail@plt+0x79a4>
   18d50:	bl	18d0c <__assert_fail@plt+0x795c>
   18d54:	nop			; (mov r0, r0)
   18d58:	sub	sp, fp, #4
   18d5c:	pop	{fp, pc}
   18d60:	push	{r4, r5, fp, lr}
   18d64:	add	fp, sp, #12
   18d68:	sub	sp, sp, #16
   18d6c:	str	r0, [fp, #-24]	; 0xffffffe8
   18d70:	str	r1, [fp, #-28]	; 0xffffffe4
   18d74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d78:	cmp	r3, #0
   18d7c:	beq	18d8c <__assert_fail@plt+0x79dc>
   18d80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18d84:	cmp	r3, #0
   18d88:	bne	18d9c <__assert_fail@plt+0x79ec>
   18d8c:	mov	r3, #1
   18d90:	str	r3, [fp, #-28]	; 0xffffffe4
   18d94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18d98:	str	r3, [fp, #-24]	; 0xffffffe8
   18d9c:	mov	r1, #0
   18da0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18da4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18da8:	umull	r2, r3, r2, r3
   18dac:	mov	r4, r3
   18db0:	mov	r5, #0
   18db4:	cmp	r4, #0
   18db8:	beq	18dc0 <__assert_fail@plt+0x7a10>
   18dbc:	mov	r1, #1
   18dc0:	cmp	r2, #0
   18dc4:	bge	18dcc <__assert_fail@plt+0x7a1c>
   18dc8:	mov	r1, #1
   18dcc:	mov	r3, r2
   18dd0:	str	r3, [fp, #-20]	; 0xffffffec
   18dd4:	mov	r3, r1
   18dd8:	and	r3, r3, #1
   18ddc:	uxtb	r3, r3
   18de0:	cmp	r3, #0
   18de4:	beq	18e00 <__assert_fail@plt+0x7a50>
   18de8:	bl	112c0 <__errno_location@plt>
   18dec:	mov	r2, r0
   18df0:	mov	r3, #12
   18df4:	str	r3, [r2]
   18df8:	mov	r3, #0
   18dfc:	b	18e18 <__assert_fail@plt+0x7a68>
   18e00:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18e04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18e08:	bl	11080 <calloc@plt>
   18e0c:	mov	r3, r0
   18e10:	str	r3, [fp, #-16]
   18e14:	ldr	r3, [fp, #-16]
   18e18:	mov	r0, r3
   18e1c:	sub	sp, fp, #12
   18e20:	pop	{r4, r5, fp, pc}
   18e24:	push	{r4, r5, fp, lr}
   18e28:	add	fp, sp, #12
   18e2c:	sub	sp, sp, #16
   18e30:	str	r0, [fp, #-24]	; 0xffffffe8
   18e34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e38:	cmp	r3, #0
   18e3c:	bne	18e48 <__assert_fail@plt+0x7a98>
   18e40:	mov	r3, #1
   18e44:	str	r3, [fp, #-24]	; 0xffffffe8
   18e48:	mov	r1, #0
   18e4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e50:	mov	r2, r3
   18e54:	mov	r3, #0
   18e58:	mov	r4, r3
   18e5c:	mov	r5, #0
   18e60:	cmp	r4, #0
   18e64:	beq	18e6c <__assert_fail@plt+0x7abc>
   18e68:	mov	r1, #1
   18e6c:	cmp	r2, #0
   18e70:	bge	18e78 <__assert_fail@plt+0x7ac8>
   18e74:	mov	r1, #1
   18e78:	mov	r3, r2
   18e7c:	str	r3, [fp, #-20]	; 0xffffffec
   18e80:	mov	r3, r1
   18e84:	and	r3, r3, #1
   18e88:	uxtb	r3, r3
   18e8c:	cmp	r3, #0
   18e90:	beq	18eac <__assert_fail@plt+0x7afc>
   18e94:	bl	112c0 <__errno_location@plt>
   18e98:	mov	r2, r0
   18e9c:	mov	r3, #12
   18ea0:	str	r3, [r2]
   18ea4:	mov	r3, #0
   18ea8:	b	18ec0 <__assert_fail@plt+0x7b10>
   18eac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18eb0:	bl	11218 <malloc@plt>
   18eb4:	mov	r3, r0
   18eb8:	str	r3, [fp, #-16]
   18ebc:	ldr	r3, [fp, #-16]
   18ec0:	mov	r0, r3
   18ec4:	sub	sp, fp, #12
   18ec8:	pop	{r4, r5, fp, pc}
   18ecc:	push	{r4, r5, fp, lr}
   18ed0:	add	fp, sp, #12
   18ed4:	sub	sp, sp, #16
   18ed8:	str	r0, [fp, #-24]	; 0xffffffe8
   18edc:	str	r1, [fp, #-28]	; 0xffffffe4
   18ee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ee4:	cmp	r3, #0
   18ee8:	bne	18efc <__assert_fail@plt+0x7b4c>
   18eec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18ef0:	bl	18e24 <__assert_fail@plt+0x7a74>
   18ef4:	mov	r3, r0
   18ef8:	b	18f90 <__assert_fail@plt+0x7be0>
   18efc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18f00:	cmp	r3, #0
   18f04:	bne	18f18 <__assert_fail@plt+0x7b68>
   18f08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18f0c:	bl	14468 <__assert_fail@plt+0x30b8>
   18f10:	mov	r3, #0
   18f14:	b	18f90 <__assert_fail@plt+0x7be0>
   18f18:	mov	r1, #0
   18f1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18f20:	mov	r2, r3
   18f24:	mov	r3, #0
   18f28:	mov	r4, r3
   18f2c:	mov	r5, #0
   18f30:	cmp	r4, #0
   18f34:	beq	18f3c <__assert_fail@plt+0x7b8c>
   18f38:	mov	r1, #1
   18f3c:	cmp	r2, #0
   18f40:	bge	18f48 <__assert_fail@plt+0x7b98>
   18f44:	mov	r1, #1
   18f48:	mov	r3, r2
   18f4c:	str	r3, [fp, #-20]	; 0xffffffec
   18f50:	mov	r3, r1
   18f54:	and	r3, r3, #1
   18f58:	uxtb	r3, r3
   18f5c:	cmp	r3, #0
   18f60:	beq	18f7c <__assert_fail@plt+0x7bcc>
   18f64:	bl	112c0 <__errno_location@plt>
   18f68:	mov	r2, r0
   18f6c:	mov	r3, #12
   18f70:	str	r3, [r2]
   18f74:	mov	r3, #0
   18f78:	b	18f90 <__assert_fail@plt+0x7be0>
   18f7c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18f80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18f84:	bl	11158 <realloc@plt>
   18f88:	str	r0, [fp, #-16]
   18f8c:	ldr	r3, [fp, #-16]
   18f90:	mov	r0, r3
   18f94:	sub	sp, fp, #12
   18f98:	pop	{r4, r5, fp, pc}
   18f9c:	push	{fp}		; (str fp, [sp, #-4]!)
   18fa0:	add	fp, sp, #0
   18fa4:	sub	sp, sp, #12
   18fa8:	str	r0, [fp, #-8]
   18fac:	str	r1, [fp, #-12]
   18fb0:	mov	r3, #0
   18fb4:	mov	r0, r3
   18fb8:	add	sp, fp, #0
   18fbc:	pop	{fp}		; (ldr fp, [sp], #4)
   18fc0:	bx	lr
   18fc4:	push	{fp, lr}
   18fc8:	add	fp, sp, #4
   18fcc:	sub	sp, sp, #8
   18fd0:	str	r0, [fp, #-8]
   18fd4:	str	r1, [fp, #-12]
   18fd8:	ldr	r1, [fp, #-12]
   18fdc:	ldr	r0, [fp, #-8]
   18fe0:	bl	18f9c <__assert_fail@plt+0x7bec>
   18fe4:	mov	r3, r0
   18fe8:	mov	r0, r3
   18fec:	sub	sp, fp, #4
   18ff0:	pop	{fp, pc}
   18ff4:	push	{r4, r5, fp, lr}
   18ff8:	add	fp, sp, #12
   18ffc:	sub	sp, sp, #16
   19000:	str	r0, [fp, #-24]	; 0xffffffe8
   19004:	str	r1, [fp, #-28]	; 0xffffffe4
   19008:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1900c:	ldr	r4, [fp, #-28]	; 0xffffffe4
   19010:	cmp	r5, r4
   19014:	bne	19020 <__assert_fail@plt+0x7c70>
   19018:	mov	r3, #0
   1901c:	b	19080 <__assert_fail@plt+0x7cd0>
   19020:	ldrb	r3, [r5]
   19024:	mov	r0, r3
   19028:	bl	1a18c <_obstack_memory_used@@Base+0x750>
   1902c:	mov	r3, r0
   19030:	strb	r3, [fp, #-13]
   19034:	ldrb	r3, [r4]
   19038:	mov	r0, r3
   1903c:	bl	1a18c <_obstack_memory_used@@Base+0x750>
   19040:	mov	r3, r0
   19044:	strb	r3, [fp, #-14]
   19048:	ldrb	r3, [fp, #-13]
   1904c:	cmp	r3, #0
   19050:	beq	19070 <__assert_fail@plt+0x7cc0>
   19054:	add	r5, r5, #1
   19058:	add	r4, r4, #1
   1905c:	ldrb	r2, [fp, #-13]
   19060:	ldrb	r3, [fp, #-14]
   19064:	cmp	r2, r3
   19068:	beq	19020 <__assert_fail@plt+0x7c70>
   1906c:	b	19074 <__assert_fail@plt+0x7cc4>
   19070:	nop			; (mov r0, r0)
   19074:	ldrb	r2, [fp, #-13]
   19078:	ldrb	r3, [fp, #-14]
   1907c:	sub	r3, r2, r3
   19080:	mov	r0, r3
   19084:	sub	sp, fp, #12
   19088:	pop	{r4, r5, fp, pc}
   1908c:	push	{fp, lr}
   19090:	add	fp, sp, #4
   19094:	sub	sp, sp, #16
   19098:	str	r0, [fp, #-16]
   1909c:	ldr	r0, [fp, #-16]
   190a0:	bl	111c4 <__fpending@plt>
   190a4:	mov	r3, r0
   190a8:	cmp	r3, #0
   190ac:	movne	r3, #1
   190b0:	moveq	r3, #0
   190b4:	strb	r3, [fp, #-5]
   190b8:	ldr	r0, [fp, #-16]
   190bc:	bl	111d0 <ferror_unlocked@plt>
   190c0:	mov	r3, r0
   190c4:	cmp	r3, #0
   190c8:	movne	r3, #1
   190cc:	moveq	r3, #0
   190d0:	strb	r3, [fp, #-6]
   190d4:	ldr	r0, [fp, #-16]
   190d8:	bl	142c8 <__assert_fail@plt+0x2f18>
   190dc:	mov	r3, r0
   190e0:	cmp	r3, #0
   190e4:	movne	r3, #1
   190e8:	moveq	r3, #0
   190ec:	strb	r3, [fp, #-7]
   190f0:	ldrb	r3, [fp, #-6]
   190f4:	cmp	r3, #0
   190f8:	bne	19128 <__assert_fail@plt+0x7d78>
   190fc:	ldrb	r3, [fp, #-7]
   19100:	cmp	r3, #0
   19104:	beq	19154 <__assert_fail@plt+0x7da4>
   19108:	ldrb	r3, [fp, #-5]
   1910c:	cmp	r3, #0
   19110:	bne	19128 <__assert_fail@plt+0x7d78>
   19114:	bl	112c0 <__errno_location@plt>
   19118:	mov	r3, r0
   1911c:	ldr	r3, [r3]
   19120:	cmp	r3, #9
   19124:	beq	19154 <__assert_fail@plt+0x7da4>
   19128:	ldrb	r3, [fp, #-7]
   1912c:	eor	r3, r3, #1
   19130:	uxtb	r3, r3
   19134:	cmp	r3, #0
   19138:	beq	1914c <__assert_fail@plt+0x7d9c>
   1913c:	bl	112c0 <__errno_location@plt>
   19140:	mov	r2, r0
   19144:	mov	r3, #0
   19148:	str	r3, [r2]
   1914c:	mvn	r3, #0
   19150:	b	19158 <__assert_fail@plt+0x7da8>
   19154:	mov	r3, #0
   19158:	mov	r0, r3
   1915c:	sub	sp, fp, #4
   19160:	pop	{fp, pc}
   19164:	push	{fp, lr}
   19168:	add	fp, sp, #4
   1916c:	sub	sp, sp, #272	; 0x110
   19170:	str	r0, [fp, #-272]	; 0xfffffef0
   19174:	sub	r3, fp, #264	; 0x108
   19178:	ldr	r2, [pc, #116]	; 191f4 <__assert_fail@plt+0x7e44>
   1917c:	mov	r1, r3
   19180:	ldr	r0, [fp, #-272]	; 0xfffffef0
   19184:	bl	19cb8 <_obstack_memory_used@@Base+0x27c>
   19188:	mov	r3, r0
   1918c:	cmp	r3, #0
   19190:	beq	1919c <__assert_fail@plt+0x7dec>
   19194:	mov	r3, #0
   19198:	b	191e8 <__assert_fail@plt+0x7e38>
   1919c:	sub	r3, fp, #264	; 0x108
   191a0:	ldr	r1, [pc, #80]	; 191f8 <__assert_fail@plt+0x7e48>
   191a4:	mov	r0, r3
   191a8:	bl	110a4 <strcmp@plt>
   191ac:	mov	r3, r0
   191b0:	cmp	r3, #0
   191b4:	beq	191dc <__assert_fail@plt+0x7e2c>
   191b8:	sub	r3, fp, #264	; 0x108
   191bc:	ldr	r1, [pc, #56]	; 191fc <__assert_fail@plt+0x7e4c>
   191c0:	mov	r0, r3
   191c4:	bl	110a4 <strcmp@plt>
   191c8:	mov	r3, r0
   191cc:	cmp	r3, #0
   191d0:	beq	191dc <__assert_fail@plt+0x7e2c>
   191d4:	mov	r3, #1
   191d8:	b	191e0 <__assert_fail@plt+0x7e30>
   191dc:	mov	r3, #0
   191e0:	and	r3, r3, #1
   191e4:	uxtb	r3, r3
   191e8:	mov	r0, r3
   191ec:	sub	sp, fp, #4
   191f0:	pop	{fp, pc}
   191f4:	andeq	r0, r0, r1, lsl #2
   191f8:	andeq	fp, r1, r0, lsr #19
   191fc:	andeq	fp, r1, r4, lsr #19
   19200:	push	{fp, lr}
   19204:	add	fp, sp, #4
   19208:	bl	112c0 <__errno_location@plt>
   1920c:	mov	r2, r0
   19210:	mov	r3, #12
   19214:	str	r3, [r2]
   19218:	mov	r3, #0
   1921c:	mov	r0, r3
   19220:	pop	{fp, pc}
   19224:	push	{fp, lr}
   19228:	add	fp, sp, #4
   1922c:	sub	sp, sp, #8
   19230:	str	r0, [fp, #-8]
   19234:	ldr	r3, [fp, #-8]
   19238:	mov	r0, r3
   1923c:	bl	18e24 <__assert_fail@plt+0x7a74>
   19240:	mov	r3, r0
   19244:	mov	r0, r3
   19248:	sub	sp, fp, #4
   1924c:	pop	{fp, pc}
   19250:	push	{fp, lr}
   19254:	add	fp, sp, #4
   19258:	sub	sp, sp, #8
   1925c:	str	r0, [fp, #-8]
   19260:	str	r1, [fp, #-12]
   19264:	ldr	r3, [fp, #-12]
   19268:	cmp	r3, #0
   1926c:	moveq	r3, #1
   19270:	movne	r3, #0
   19274:	uxtb	r3, r3
   19278:	mov	r2, r3
   1927c:	ldr	r3, [fp, #-12]
   19280:	orr	r3, r2, r3
   19284:	mov	r1, r3
   19288:	ldr	r0, [fp, #-8]
   1928c:	bl	18ecc <__assert_fail@plt+0x7b1c>
   19290:	mov	r3, r0
   19294:	mov	r0, r3
   19298:	sub	sp, fp, #4
   1929c:	pop	{fp, pc}
   192a0:	push	{fp, lr}
   192a4:	add	fp, sp, #4
   192a8:	sub	sp, sp, #8
   192ac:	str	r0, [fp, #-8]
   192b0:	str	r1, [fp, #-12]
   192b4:	ldr	r3, [fp, #-8]
   192b8:	ldr	r2, [fp, #-12]
   192bc:	mov	r1, r2
   192c0:	mov	r0, r3
   192c4:	bl	18d60 <__assert_fail@plt+0x79b0>
   192c8:	mov	r3, r0
   192cc:	mov	r0, r3
   192d0:	sub	sp, fp, #4
   192d4:	pop	{fp, pc}
   192d8:	push	{fp, lr}
   192dc:	add	fp, sp, #4
   192e0:	sub	sp, sp, #16
   192e4:	str	r0, [fp, #-8]
   192e8:	str	r1, [fp, #-12]
   192ec:	str	r2, [fp, #-16]
   192f0:	ldr	r3, [fp, #-12]
   192f4:	cmp	r3, #0
   192f8:	beq	19308 <__assert_fail@plt+0x7f58>
   192fc:	ldr	r3, [fp, #-16]
   19300:	cmp	r3, #0
   19304:	bne	19318 <__assert_fail@plt+0x7f68>
   19308:	mov	r3, #1
   1930c:	str	r3, [fp, #-16]
   19310:	ldr	r3, [fp, #-16]
   19314:	str	r3, [fp, #-12]
   19318:	ldr	r3, [fp, #-12]
   1931c:	ldr	r2, [fp, #-16]
   19320:	mov	r1, r3
   19324:	ldr	r0, [fp, #-8]
   19328:	bl	19b00 <_obstack_memory_used@@Base+0xc4>
   1932c:	mov	r3, r0
   19330:	mov	r0, r3
   19334:	sub	sp, fp, #4
   19338:	pop	{fp, pc}
   1933c:	push	{fp, lr}
   19340:	add	fp, sp, #4
   19344:	sub	sp, sp, #8
   19348:	mov	r0, #14
   1934c:	bl	11344 <nl_langinfo@plt>
   19350:	str	r0, [fp, #-8]
   19354:	ldr	r3, [fp, #-8]
   19358:	cmp	r3, #0
   1935c:	bne	19368 <__assert_fail@plt+0x7fb8>
   19360:	ldr	r3, [pc, #40]	; 19390 <__assert_fail@plt+0x7fe0>
   19364:	str	r3, [fp, #-8]
   19368:	ldr	r3, [fp, #-8]
   1936c:	ldrb	r3, [r3]
   19370:	cmp	r3, #0
   19374:	bne	19380 <__assert_fail@plt+0x7fd0>
   19378:	ldr	r3, [pc, #20]	; 19394 <__assert_fail@plt+0x7fe4>
   1937c:	str	r3, [fp, #-8]
   19380:	ldr	r3, [fp, #-8]
   19384:	mov	r0, r3
   19388:	sub	sp, fp, #4
   1938c:	pop	{fp, pc}
   19390:	andeq	fp, r1, ip, lsr #19
   19394:			; <UNDEFINED> instruction: 0x0001b9b0
   19398:	push	{fp, lr}
   1939c:	add	fp, sp, #4
   193a0:	sub	sp, sp, #8
   193a4:	str	r0, [fp, #-8]
   193a8:	str	r1, [fp, #-12]
   193ac:	ldr	r3, [fp, #-8]
   193b0:	ldrb	r3, [r3, #40]	; 0x28
   193b4:	and	r3, r3, #1
   193b8:	uxtb	r3, r3
   193bc:	cmp	r3, #0
   193c0:	beq	193e8 <__assert_fail@plt+0x8038>
   193c4:	ldr	r3, [fp, #-8]
   193c8:	ldr	r3, [r3, #28]
   193cc:	ldr	r2, [fp, #-8]
   193d0:	ldr	r2, [r2, #36]	; 0x24
   193d4:	ldr	r1, [fp, #-12]
   193d8:	mov	r0, r2
   193dc:	blx	r3
   193e0:	mov	r3, r0
   193e4:	b	193fc <__assert_fail@plt+0x804c>
   193e8:	ldr	r3, [fp, #-8]
   193ec:	ldr	r3, [r3, #28]
   193f0:	ldr	r0, [fp, #-12]
   193f4:	blx	r3
   193f8:	mov	r3, r0
   193fc:	mov	r0, r3
   19400:	sub	sp, fp, #4
   19404:	pop	{fp, pc}
   19408:	push	{fp, lr}
   1940c:	add	fp, sp, #4
   19410:	sub	sp, sp, #8
   19414:	str	r0, [fp, #-8]
   19418:	str	r1, [fp, #-12]
   1941c:	ldr	r3, [fp, #-8]
   19420:	ldrb	r3, [r3, #40]	; 0x28
   19424:	and	r3, r3, #1
   19428:	uxtb	r3, r3
   1942c:	cmp	r3, #0
   19430:	beq	19454 <__assert_fail@plt+0x80a4>
   19434:	ldr	r3, [fp, #-8]
   19438:	ldr	r3, [r3, #32]
   1943c:	ldr	r2, [fp, #-8]
   19440:	ldr	r2, [r2, #36]	; 0x24
   19444:	ldr	r1, [fp, #-12]
   19448:	mov	r0, r2
   1944c:	blx	r3
   19450:	b	19464 <__assert_fail@plt+0x80b4>
   19454:	ldr	r3, [fp, #-8]
   19458:	ldr	r3, [r3, #32]
   1945c:	ldr	r0, [fp, #-12]
   19460:	blx	r3
   19464:	nop			; (mov r0, r0)
   19468:	sub	sp, fp, #4
   1946c:	pop	{fp, pc}
   19470:	push	{fp, lr}
   19474:	add	fp, sp, #4
   19478:	sub	sp, sp, #24
   1947c:	str	r0, [fp, #-16]
   19480:	str	r1, [fp, #-20]	; 0xffffffec
   19484:	str	r2, [fp, #-24]	; 0xffffffe8
   19488:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1948c:	cmp	r3, #0
   19490:	bne	1949c <__assert_fail@plt+0x80ec>
   19494:	mov	r3, #8
   19498:	str	r3, [fp, #-24]	; 0xffffffe8
   1949c:	ldr	r3, [fp, #-20]	; 0xffffffec
   194a0:	cmp	r3, #0
   194a4:	bne	194bc <__assert_fail@plt+0x810c>
   194a8:	mov	r3, #24
   194ac:	str	r3, [fp, #-8]
   194b0:	ldr	r3, [fp, #-8]
   194b4:	rsb	r3, r3, #4096	; 0x1000
   194b8:	str	r3, [fp, #-20]	; 0xffffffec
   194bc:	ldr	r3, [fp, #-16]
   194c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   194c4:	str	r2, [r3]
   194c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   194cc:	sub	r2, r3, #1
   194d0:	ldr	r3, [fp, #-16]
   194d4:	str	r2, [r3, #24]
   194d8:	ldr	r3, [fp, #-16]
   194dc:	ldr	r3, [r3]
   194e0:	mov	r1, r3
   194e4:	ldr	r0, [fp, #-16]
   194e8:	bl	19398 <__assert_fail@plt+0x7fe8>
   194ec:	mov	r2, r0
   194f0:	ldr	r3, [fp, #-16]
   194f4:	str	r2, [r3, #4]
   194f8:	ldr	r3, [fp, #-16]
   194fc:	ldr	r3, [r3, #4]
   19500:	str	r3, [fp, #-12]
   19504:	ldr	r3, [fp, #-12]
   19508:	cmp	r3, #0
   1950c:	bne	1951c <__assert_fail@plt+0x816c>
   19510:	ldr	r3, [pc, #168]	; 195c0 <__assert_fail@plt+0x8210>
   19514:	ldr	r3, [r3]
   19518:	blx	r3
   1951c:	ldr	r3, [fp, #-12]
   19520:	add	r3, r3, #8
   19524:	mov	r2, r3
   19528:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1952c:	add	r3, r2, r3
   19530:	sub	r2, r3, #1
   19534:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19538:	rsb	r3, r3, #0
   1953c:	and	r3, r3, r2
   19540:	mov	r2, r3
   19544:	ldr	r3, [fp, #-16]
   19548:	str	r2, [r3, #8]
   1954c:	ldr	r3, [fp, #-16]
   19550:	ldr	r2, [r3, #8]
   19554:	ldr	r3, [fp, #-16]
   19558:	str	r2, [r3, #12]
   1955c:	ldr	r3, [fp, #-16]
   19560:	ldr	r3, [r3]
   19564:	ldr	r2, [fp, #-12]
   19568:	add	r2, r2, r3
   1956c:	ldr	r3, [fp, #-12]
   19570:	str	r2, [r3]
   19574:	ldr	r3, [fp, #-12]
   19578:	ldr	r2, [r3]
   1957c:	ldr	r3, [fp, #-16]
   19580:	str	r2, [r3, #16]
   19584:	ldr	r3, [fp, #-12]
   19588:	mov	r2, #0
   1958c:	str	r2, [r3, #4]
   19590:	ldr	r2, [fp, #-16]
   19594:	ldrb	r3, [r2, #40]	; 0x28
   19598:	bic	r3, r3, #2
   1959c:	strb	r3, [r2, #40]	; 0x28
   195a0:	ldr	r2, [fp, #-16]
   195a4:	ldrb	r3, [r2, #40]	; 0x28
   195a8:	bic	r3, r3, #4
   195ac:	strb	r3, [r2, #40]	; 0x28
   195b0:	mov	r3, #1
   195b4:	mov	r0, r3
   195b8:	sub	sp, fp, #4
   195bc:	pop	{fp, pc}
   195c0:	andeq	ip, r2, r8, ror r1

000195c4 <_obstack_begin@@Base>:
   195c4:	push	{fp, lr}
   195c8:	add	fp, sp, #4
   195cc:	sub	sp, sp, #16
   195d0:	str	r0, [fp, #-8]
   195d4:	str	r1, [fp, #-12]
   195d8:	str	r2, [fp, #-16]
   195dc:	str	r3, [fp, #-20]	; 0xffffffec
   195e0:	ldr	r3, [fp, #-8]
   195e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   195e8:	str	r2, [r3, #28]
   195ec:	ldr	r3, [fp, #-8]
   195f0:	ldr	r2, [fp, #4]
   195f4:	str	r2, [r3, #32]
   195f8:	ldr	r2, [fp, #-8]
   195fc:	ldrb	r3, [r2, #40]	; 0x28
   19600:	bic	r3, r3, #1
   19604:	strb	r3, [r2, #40]	; 0x28
   19608:	ldr	r2, [fp, #-16]
   1960c:	ldr	r1, [fp, #-12]
   19610:	ldr	r0, [fp, #-8]
   19614:	bl	19470 <__assert_fail@plt+0x80c0>
   19618:	mov	r3, r0
   1961c:	mov	r0, r3
   19620:	sub	sp, fp, #4
   19624:	pop	{fp, pc}

00019628 <_obstack_begin_1@@Base>:
   19628:	push	{fp, lr}
   1962c:	add	fp, sp, #4
   19630:	sub	sp, sp, #16
   19634:	str	r0, [fp, #-8]
   19638:	str	r1, [fp, #-12]
   1963c:	str	r2, [fp, #-16]
   19640:	str	r3, [fp, #-20]	; 0xffffffec
   19644:	ldr	r3, [fp, #-8]
   19648:	ldr	r2, [fp, #-20]	; 0xffffffec
   1964c:	str	r2, [r3, #28]
   19650:	ldr	r3, [fp, #-8]
   19654:	ldr	r2, [fp, #4]
   19658:	str	r2, [r3, #32]
   1965c:	ldr	r3, [fp, #-8]
   19660:	ldr	r2, [fp, #8]
   19664:	str	r2, [r3, #36]	; 0x24
   19668:	ldr	r2, [fp, #-8]
   1966c:	ldrb	r3, [r2, #40]	; 0x28
   19670:	orr	r3, r3, #1
   19674:	strb	r3, [r2, #40]	; 0x28
   19678:	ldr	r2, [fp, #-16]
   1967c:	ldr	r1, [fp, #-12]
   19680:	ldr	r0, [fp, #-8]
   19684:	bl	19470 <__assert_fail@plt+0x80c0>
   19688:	mov	r3, r0
   1968c:	mov	r0, r3
   19690:	sub	sp, fp, #4
   19694:	pop	{fp, pc}

00019698 <_obstack_newchunk@@Base>:
   19698:	push	{fp, lr}
   1969c:	add	fp, sp, #4
   196a0:	sub	sp, sp, #40	; 0x28
   196a4:	str	r0, [fp, #-40]	; 0xffffffd8
   196a8:	str	r1, [fp, #-44]	; 0xffffffd4
   196ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   196b0:	ldr	r3, [r3, #4]
   196b4:	str	r3, [fp, #-16]
   196b8:	mov	r3, #0
   196bc:	str	r3, [fp, #-8]
   196c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   196c4:	ldr	r3, [r3, #12]
   196c8:	mov	r2, r3
   196cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   196d0:	ldr	r3, [r3, #8]
   196d4:	sub	r3, r2, r3
   196d8:	str	r3, [fp, #-20]	; 0xffffffec
   196dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   196e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   196e4:	add	r3, r2, r3
   196e8:	str	r3, [fp, #-24]	; 0xffffffe8
   196ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   196f0:	ldr	r2, [r3, #24]
   196f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   196f8:	add	r3, r2, r3
   196fc:	str	r3, [fp, #-28]	; 0xffffffe4
   19700:	ldr	r3, [fp, #-20]	; 0xffffffec
   19704:	lsr	r2, r3, #3
   19708:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1970c:	add	r3, r2, r3
   19710:	add	r3, r3, #100	; 0x64
   19714:	str	r3, [fp, #-12]
   19718:	ldr	r2, [fp, #-12]
   1971c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19720:	cmp	r2, r3
   19724:	bcs	19730 <_obstack_newchunk@@Base+0x98>
   19728:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1972c:	str	r3, [fp, #-12]
   19730:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19734:	ldr	r2, [r3]
   19738:	ldr	r3, [fp, #-12]
   1973c:	cmp	r2, r3
   19740:	bls	19750 <_obstack_newchunk@@Base+0xb8>
   19744:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19748:	ldr	r3, [r3]
   1974c:	str	r3, [fp, #-12]
   19750:	ldr	r2, [fp, #-20]	; 0xffffffec
   19754:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19758:	cmp	r2, r3
   1975c:	bhi	19780 <_obstack_newchunk@@Base+0xe8>
   19760:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19764:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19768:	cmp	r2, r3
   1976c:	bhi	19780 <_obstack_newchunk@@Base+0xe8>
   19770:	ldr	r1, [fp, #-12]
   19774:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19778:	bl	19398 <__assert_fail@plt+0x7fe8>
   1977c:	str	r0, [fp, #-8]
   19780:	ldr	r3, [fp, #-8]
   19784:	cmp	r3, #0
   19788:	bne	19798 <_obstack_newchunk@@Base+0x100>
   1978c:	ldr	r3, [pc, #304]	; 198c4 <_obstack_newchunk@@Base+0x22c>
   19790:	ldr	r3, [r3]
   19794:	blx	r3
   19798:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1979c:	ldr	r2, [fp, #-8]
   197a0:	str	r2, [r3, #4]
   197a4:	ldr	r3, [fp, #-8]
   197a8:	ldr	r2, [fp, #-16]
   197ac:	str	r2, [r3, #4]
   197b0:	ldr	r2, [fp, #-8]
   197b4:	ldr	r3, [fp, #-12]
   197b8:	add	r2, r2, r3
   197bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   197c0:	str	r2, [r3, #16]
   197c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   197c8:	ldr	r2, [r3, #16]
   197cc:	ldr	r3, [fp, #-8]
   197d0:	str	r2, [r3]
   197d4:	ldr	r3, [fp, #-8]
   197d8:	add	r3, r3, #8
   197dc:	mov	r2, r3
   197e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   197e4:	ldr	r3, [r3, #24]
   197e8:	add	r2, r2, r3
   197ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   197f0:	ldr	r3, [r3, #24]
   197f4:	mvn	r3, r3
   197f8:	and	r3, r3, r2
   197fc:	str	r3, [fp, #-32]	; 0xffffffe0
   19800:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19804:	ldr	r3, [r3, #8]
   19808:	ldr	r2, [fp, #-20]	; 0xffffffec
   1980c:	mov	r1, r3
   19810:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19814:	bl	1111c <memcpy@plt>
   19818:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1981c:	ldrb	r3, [r3, #40]	; 0x28
   19820:	and	r3, r3, #2
   19824:	uxtb	r3, r3
   19828:	cmp	r3, #0
   1982c:	bne	19884 <_obstack_newchunk@@Base+0x1ec>
   19830:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19834:	ldr	r3, [r3, #8]
   19838:	ldr	r2, [fp, #-16]
   1983c:	add	r2, r2, #8
   19840:	mov	r1, r2
   19844:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19848:	ldr	r2, [r2, #24]
   1984c:	add	r1, r1, r2
   19850:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19854:	ldr	r2, [r2, #24]
   19858:	mvn	r2, r2
   1985c:	and	r2, r2, r1
   19860:	cmp	r3, r2
   19864:	bne	19884 <_obstack_newchunk@@Base+0x1ec>
   19868:	ldr	r3, [fp, #-16]
   1986c:	ldr	r2, [r3, #4]
   19870:	ldr	r3, [fp, #-8]
   19874:	str	r2, [r3, #4]
   19878:	ldr	r1, [fp, #-16]
   1987c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19880:	bl	19408 <__assert_fail@plt+0x8058>
   19884:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19888:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1988c:	str	r2, [r3, #8]
   19890:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19894:	ldr	r2, [r3, #8]
   19898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1989c:	add	r2, r2, r3
   198a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   198a4:	str	r2, [r3, #12]
   198a8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   198ac:	ldrb	r3, [r2, #40]	; 0x28
   198b0:	bic	r3, r3, #2
   198b4:	strb	r3, [r2, #40]	; 0x28
   198b8:	nop			; (mov r0, r0)
   198bc:	sub	sp, fp, #4
   198c0:	pop	{fp, pc}
   198c4:	andeq	ip, r2, r8, ror r1

000198c8 <_obstack_allocated_p@@Base>:
   198c8:	push	{fp}		; (str fp, [sp, #-4]!)
   198cc:	add	fp, sp, #0
   198d0:	sub	sp, sp, #20
   198d4:	str	r0, [fp, #-16]
   198d8:	str	r1, [fp, #-20]	; 0xffffffec
   198dc:	ldr	r3, [fp, #-16]
   198e0:	ldr	r3, [r3, #4]
   198e4:	str	r3, [fp, #-8]
   198e8:	b	19900 <_obstack_allocated_p@@Base+0x38>
   198ec:	ldr	r3, [fp, #-8]
   198f0:	ldr	r3, [r3, #4]
   198f4:	str	r3, [fp, #-12]
   198f8:	ldr	r3, [fp, #-12]
   198fc:	str	r3, [fp, #-8]
   19900:	ldr	r3, [fp, #-8]
   19904:	cmp	r3, #0
   19908:	beq	19930 <_obstack_allocated_p@@Base+0x68>
   1990c:	ldr	r2, [fp, #-8]
   19910:	ldr	r3, [fp, #-20]	; 0xffffffec
   19914:	cmp	r2, r3
   19918:	bcs	198ec <_obstack_allocated_p@@Base+0x24>
   1991c:	ldr	r3, [fp, #-8]
   19920:	ldr	r2, [r3]
   19924:	ldr	r3, [fp, #-20]	; 0xffffffec
   19928:	cmp	r2, r3
   1992c:	bcc	198ec <_obstack_allocated_p@@Base+0x24>
   19930:	ldr	r3, [fp, #-8]
   19934:	cmp	r3, #0
   19938:	movne	r3, #1
   1993c:	moveq	r3, #0
   19940:	uxtb	r3, r3
   19944:	mov	r0, r3
   19948:	add	sp, fp, #0
   1994c:	pop	{fp}		; (ldr fp, [sp], #4)
   19950:	bx	lr

00019954 <_obstack_free@@Base>:
   19954:	push	{fp, lr}
   19958:	add	fp, sp, #4
   1995c:	sub	sp, sp, #16
   19960:	str	r0, [fp, #-16]
   19964:	str	r1, [fp, #-20]	; 0xffffffec
   19968:	ldr	r3, [fp, #-16]
   1996c:	ldr	r3, [r3, #4]
   19970:	str	r3, [fp, #-8]
   19974:	b	199a8 <_obstack_free@@Base+0x54>
   19978:	ldr	r3, [fp, #-8]
   1997c:	ldr	r3, [r3, #4]
   19980:	str	r3, [fp, #-12]
   19984:	ldr	r1, [fp, #-8]
   19988:	ldr	r0, [fp, #-16]
   1998c:	bl	19408 <__assert_fail@plt+0x8058>
   19990:	ldr	r3, [fp, #-12]
   19994:	str	r3, [fp, #-8]
   19998:	ldr	r2, [fp, #-16]
   1999c:	ldrb	r3, [r2, #40]	; 0x28
   199a0:	orr	r3, r3, #2
   199a4:	strb	r3, [r2, #40]	; 0x28
   199a8:	ldr	r3, [fp, #-8]
   199ac:	cmp	r3, #0
   199b0:	beq	199d8 <_obstack_free@@Base+0x84>
   199b4:	ldr	r2, [fp, #-8]
   199b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   199bc:	cmp	r2, r3
   199c0:	bcs	19978 <_obstack_free@@Base+0x24>
   199c4:	ldr	r3, [fp, #-8]
   199c8:	ldr	r2, [r3]
   199cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   199d0:	cmp	r2, r3
   199d4:	bcc	19978 <_obstack_free@@Base+0x24>
   199d8:	ldr	r3, [fp, #-8]
   199dc:	cmp	r3, #0
   199e0:	beq	19a20 <_obstack_free@@Base+0xcc>
   199e4:	ldr	r3, [fp, #-16]
   199e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   199ec:	str	r2, [r3, #12]
   199f0:	ldr	r3, [fp, #-16]
   199f4:	ldr	r2, [r3, #12]
   199f8:	ldr	r3, [fp, #-16]
   199fc:	str	r2, [r3, #8]
   19a00:	ldr	r3, [fp, #-8]
   19a04:	ldr	r2, [r3]
   19a08:	ldr	r3, [fp, #-16]
   19a0c:	str	r2, [r3, #16]
   19a10:	ldr	r3, [fp, #-16]
   19a14:	ldr	r2, [fp, #-8]
   19a18:	str	r2, [r3, #4]
   19a1c:	b	19a30 <_obstack_free@@Base+0xdc>
   19a20:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a24:	cmp	r3, #0
   19a28:	beq	19a30 <_obstack_free@@Base+0xdc>
   19a2c:	bl	1138c <abort@plt>
   19a30:	nop			; (mov r0, r0)
   19a34:	sub	sp, fp, #4
   19a38:	pop	{fp, pc}

00019a3c <_obstack_memory_used@@Base>:
   19a3c:	push	{fp}		; (str fp, [sp, #-4]!)
   19a40:	add	fp, sp, #0
   19a44:	sub	sp, sp, #20
   19a48:	str	r0, [fp, #-16]
   19a4c:	mov	r3, #0
   19a50:	str	r3, [fp, #-12]
   19a54:	ldr	r3, [fp, #-16]
   19a58:	ldr	r3, [r3, #4]
   19a5c:	str	r3, [fp, #-8]
   19a60:	b	19a94 <_obstack_memory_used@@Base+0x58>
   19a64:	ldr	r3, [fp, #-8]
   19a68:	ldr	r3, [r3]
   19a6c:	mov	r2, r3
   19a70:	ldr	r3, [fp, #-8]
   19a74:	sub	r3, r2, r3
   19a78:	mov	r2, r3
   19a7c:	ldr	r3, [fp, #-12]
   19a80:	add	r3, r3, r2
   19a84:	str	r3, [fp, #-12]
   19a88:	ldr	r3, [fp, #-8]
   19a8c:	ldr	r3, [r3, #4]
   19a90:	str	r3, [fp, #-8]
   19a94:	ldr	r3, [fp, #-8]
   19a98:	cmp	r3, #0
   19a9c:	bne	19a64 <_obstack_memory_used@@Base+0x28>
   19aa0:	ldr	r3, [fp, #-12]
   19aa4:	mov	r0, r3
   19aa8:	add	sp, fp, #0
   19aac:	pop	{fp}		; (ldr fp, [sp], #4)
   19ab0:	bx	lr
   19ab4:	push	{r4, r5, fp, lr}
   19ab8:	add	fp, sp, #12
   19abc:	ldr	r3, [pc, #44]	; 19af0 <_obstack_memory_used@@Base+0xb4>
   19ac0:	ldr	r4, [r3]
   19ac4:	ldr	r0, [pc, #40]	; 19af4 <_obstack_memory_used@@Base+0xb8>
   19ac8:	bl	11284 <gettext@plt>
   19acc:	mov	r3, r0
   19ad0:	mov	r2, r3
   19ad4:	ldr	r1, [pc, #28]	; 19af8 <_obstack_memory_used@@Base+0xbc>
   19ad8:	mov	r0, r4
   19adc:	bl	112a8 <fprintf@plt>
   19ae0:	ldr	r3, [pc, #20]	; 19afc <_obstack_memory_used@@Base+0xc0>
   19ae4:	ldr	r3, [r3]
   19ae8:	mov	r0, r3
   19aec:	bl	11260 <exit@plt>
   19af0:	muleq	r2, r0, r1
   19af4:			; <UNDEFINED> instruction: 0x0001b9b8
   19af8:	andeq	fp, r1, ip, asr #19
   19afc:	andeq	ip, r2, r4, lsr r1
   19b00:	push	{fp, lr}
   19b04:	add	fp, sp, #4
   19b08:	sub	sp, sp, #24
   19b0c:	str	r0, [fp, #-16]
   19b10:	str	r1, [fp, #-20]	; 0xffffffec
   19b14:	str	r2, [fp, #-24]	; 0xffffffe8
   19b18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19b1c:	cmp	r3, #0
   19b20:	beq	19b5c <_obstack_memory_used@@Base+0x120>
   19b24:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19b28:	mvn	r0, #0
   19b2c:	bl	1a20c <_obstack_memory_used@@Base+0x7d0>
   19b30:	mov	r3, r0
   19b34:	mov	r2, r3
   19b38:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b3c:	cmp	r2, r3
   19b40:	bcs	19b5c <_obstack_memory_used@@Base+0x120>
   19b44:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b48:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19b4c:	mul	r3, r2, r3
   19b50:	str	r3, [fp, #-8]
   19b54:	mov	r3, #1
   19b58:	b	19b70 <_obstack_memory_used@@Base+0x134>
   19b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b60:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19b64:	mul	r3, r2, r3
   19b68:	str	r3, [fp, #-8]
   19b6c:	mov	r3, #0
   19b70:	cmp	r3, #0
   19b74:	beq	19b90 <_obstack_memory_used@@Base+0x154>
   19b78:	bl	112c0 <__errno_location@plt>
   19b7c:	mov	r2, r0
   19b80:	mov	r3, #12
   19b84:	str	r3, [r2]
   19b88:	mov	r3, #0
   19b8c:	b	19ba4 <_obstack_memory_used@@Base+0x168>
   19b90:	ldr	r3, [fp, #-8]
   19b94:	mov	r1, r3
   19b98:	ldr	r0, [fp, #-16]
   19b9c:	bl	18ecc <__assert_fail@plt+0x7b1c>
   19ba0:	mov	r3, r0
   19ba4:	mov	r0, r3
   19ba8:	sub	sp, fp, #4
   19bac:	pop	{fp, pc}
   19bb0:	push	{fp, lr}
   19bb4:	add	fp, sp, #4
   19bb8:	sub	sp, sp, #16
   19bbc:	str	r0, [fp, #-16]
   19bc0:	mov	r1, #0
   19bc4:	ldr	r0, [fp, #-16]
   19bc8:	bl	1132c <setlocale@plt>
   19bcc:	str	r0, [fp, #-8]
   19bd0:	ldr	r3, [fp, #-8]
   19bd4:	mov	r0, r3
   19bd8:	sub	sp, fp, #4
   19bdc:	pop	{fp, pc}
   19be0:	push	{fp, lr}
   19be4:	add	fp, sp, #4
   19be8:	sub	sp, sp, #24
   19bec:	str	r0, [fp, #-16]
   19bf0:	str	r1, [fp, #-20]	; 0xffffffec
   19bf4:	str	r2, [fp, #-24]	; 0xffffffe8
   19bf8:	ldr	r0, [fp, #-16]
   19bfc:	bl	19bb0 <_obstack_memory_used@@Base+0x174>
   19c00:	str	r0, [fp, #-8]
   19c04:	ldr	r3, [fp, #-8]
   19c08:	cmp	r3, #0
   19c0c:	bne	19c30 <_obstack_memory_used@@Base+0x1f4>
   19c10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19c14:	cmp	r3, #0
   19c18:	beq	19c28 <_obstack_memory_used@@Base+0x1ec>
   19c1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c20:	mov	r2, #0
   19c24:	strb	r2, [r3]
   19c28:	mov	r3, #22
   19c2c:	b	19cac <_obstack_memory_used@@Base+0x270>
   19c30:	ldr	r0, [fp, #-8]
   19c34:	bl	11290 <strlen@plt>
   19c38:	str	r0, [fp, #-12]
   19c3c:	ldr	r2, [fp, #-12]
   19c40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19c44:	cmp	r2, r3
   19c48:	bcs	19c6c <_obstack_memory_used@@Base+0x230>
   19c4c:	ldr	r3, [fp, #-12]
   19c50:	add	r3, r3, #1
   19c54:	mov	r2, r3
   19c58:	ldr	r1, [fp, #-8]
   19c5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   19c60:	bl	1111c <memcpy@plt>
   19c64:	mov	r3, #0
   19c68:	b	19cac <_obstack_memory_used@@Base+0x270>
   19c6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19c70:	cmp	r3, #0
   19c74:	beq	19ca8 <_obstack_memory_used@@Base+0x26c>
   19c78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19c7c:	sub	r3, r3, #1
   19c80:	mov	r2, r3
   19c84:	ldr	r1, [fp, #-8]
   19c88:	ldr	r0, [fp, #-20]	; 0xffffffec
   19c8c:	bl	1111c <memcpy@plt>
   19c90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19c94:	sub	r3, r3, #1
   19c98:	ldr	r2, [fp, #-20]	; 0xffffffec
   19c9c:	add	r3, r2, r3
   19ca0:	mov	r2, #0
   19ca4:	strb	r2, [r3]
   19ca8:	mov	r3, #34	; 0x22
   19cac:	mov	r0, r3
   19cb0:	sub	sp, fp, #4
   19cb4:	pop	{fp, pc}
   19cb8:	push	{fp, lr}
   19cbc:	add	fp, sp, #4
   19cc0:	sub	sp, sp, #16
   19cc4:	str	r0, [fp, #-8]
   19cc8:	str	r1, [fp, #-12]
   19ccc:	str	r2, [fp, #-16]
   19cd0:	ldr	r2, [fp, #-16]
   19cd4:	ldr	r1, [fp, #-12]
   19cd8:	ldr	r0, [fp, #-8]
   19cdc:	bl	19be0 <_obstack_memory_used@@Base+0x1a4>
   19ce0:	mov	r3, r0
   19ce4:	mov	r0, r3
   19ce8:	sub	sp, fp, #4
   19cec:	pop	{fp, pc}
   19cf0:	push	{fp, lr}
   19cf4:	add	fp, sp, #4
   19cf8:	sub	sp, sp, #8
   19cfc:	str	r0, [fp, #-8]
   19d00:	ldr	r0, [fp, #-8]
   19d04:	bl	19bb0 <_obstack_memory_used@@Base+0x174>
   19d08:	mov	r3, r0
   19d0c:	mov	r0, r3
   19d10:	sub	sp, fp, #4
   19d14:	pop	{fp, pc}
   19d18:	push	{fp}		; (str fp, [sp, #-4]!)
   19d1c:	add	fp, sp, #0
   19d20:	sub	sp, sp, #12
   19d24:	str	r0, [fp, #-8]
   19d28:	ldr	r3, [fp, #-8]
   19d2c:	cmp	r3, #90	; 0x5a
   19d30:	bgt	19d4c <_obstack_memory_used@@Base+0x310>
   19d34:	cmp	r3, #65	; 0x41
   19d38:	bge	19d58 <_obstack_memory_used@@Base+0x31c>
   19d3c:	sub	r3, r3, #48	; 0x30
   19d40:	cmp	r3, #9
   19d44:	bhi	19d60 <_obstack_memory_used@@Base+0x324>
   19d48:	b	19d58 <_obstack_memory_used@@Base+0x31c>
   19d4c:	sub	r3, r3, #97	; 0x61
   19d50:	cmp	r3, #25
   19d54:	bhi	19d60 <_obstack_memory_used@@Base+0x324>
   19d58:	mov	r3, #1
   19d5c:	b	19d64 <_obstack_memory_used@@Base+0x328>
   19d60:	mov	r3, #0
   19d64:	mov	r0, r3
   19d68:	add	sp, fp, #0
   19d6c:	pop	{fp}		; (ldr fp, [sp], #4)
   19d70:	bx	lr
   19d74:	push	{fp}		; (str fp, [sp, #-4]!)
   19d78:	add	fp, sp, #0
   19d7c:	sub	sp, sp, #12
   19d80:	str	r0, [fp, #-8]
   19d84:	ldr	r3, [fp, #-8]
   19d88:	cmp	r3, #65	; 0x41
   19d8c:	blt	19dac <_obstack_memory_used@@Base+0x370>
   19d90:	cmp	r3, #90	; 0x5a
   19d94:	ble	19da4 <_obstack_memory_used@@Base+0x368>
   19d98:	sub	r3, r3, #97	; 0x61
   19d9c:	cmp	r3, #25
   19da0:	bhi	19dac <_obstack_memory_used@@Base+0x370>
   19da4:	mov	r3, #1
   19da8:	b	19db0 <_obstack_memory_used@@Base+0x374>
   19dac:	mov	r3, #0
   19db0:	mov	r0, r3
   19db4:	add	sp, fp, #0
   19db8:	pop	{fp}		; (ldr fp, [sp], #4)
   19dbc:	bx	lr
   19dc0:	push	{fp}		; (str fp, [sp, #-4]!)
   19dc4:	add	fp, sp, #0
   19dc8:	sub	sp, sp, #12
   19dcc:	str	r0, [fp, #-8]
   19dd0:	ldr	r3, [fp, #-8]
   19dd4:	add	r3, r3, #0
   19dd8:	cmp	r3, #127	; 0x7f
   19ddc:	bhi	19de8 <_obstack_memory_used@@Base+0x3ac>
   19de0:	mov	r3, #1
   19de4:	b	19dec <_obstack_memory_used@@Base+0x3b0>
   19de8:	mov	r3, #0
   19dec:	mov	r0, r3
   19df0:	add	sp, fp, #0
   19df4:	pop	{fp}		; (ldr fp, [sp], #4)
   19df8:	bx	lr
   19dfc:	push	{fp}		; (str fp, [sp, #-4]!)
   19e00:	add	fp, sp, #0
   19e04:	sub	sp, sp, #12
   19e08:	str	r0, [fp, #-8]
   19e0c:	ldr	r3, [fp, #-8]
   19e10:	cmp	r3, #32
   19e14:	beq	19e24 <_obstack_memory_used@@Base+0x3e8>
   19e18:	ldr	r3, [fp, #-8]
   19e1c:	cmp	r3, #9
   19e20:	bne	19e2c <_obstack_memory_used@@Base+0x3f0>
   19e24:	mov	r3, #1
   19e28:	b	19e30 <_obstack_memory_used@@Base+0x3f4>
   19e2c:	mov	r3, #0
   19e30:	and	r3, r3, #1
   19e34:	uxtb	r3, r3
   19e38:	mov	r0, r3
   19e3c:	add	sp, fp, #0
   19e40:	pop	{fp}		; (ldr fp, [sp], #4)
   19e44:	bx	lr
   19e48:	push	{fp}		; (str fp, [sp, #-4]!)
   19e4c:	add	fp, sp, #0
   19e50:	sub	sp, sp, #12
   19e54:	str	r0, [fp, #-8]
   19e58:	ldr	r3, [fp, #-8]
   19e5c:	cmp	r3, #0
   19e60:	blt	19e7c <_obstack_memory_used@@Base+0x440>
   19e64:	cmp	r3, #31
   19e68:	ble	19e74 <_obstack_memory_used@@Base+0x438>
   19e6c:	cmp	r3, #127	; 0x7f
   19e70:	bne	19e7c <_obstack_memory_used@@Base+0x440>
   19e74:	mov	r3, #1
   19e78:	b	19e80 <_obstack_memory_used@@Base+0x444>
   19e7c:	mov	r3, #0
   19e80:	mov	r0, r3
   19e84:	add	sp, fp, #0
   19e88:	pop	{fp}		; (ldr fp, [sp], #4)
   19e8c:	bx	lr
   19e90:	push	{fp}		; (str fp, [sp, #-4]!)
   19e94:	add	fp, sp, #0
   19e98:	sub	sp, sp, #12
   19e9c:	str	r0, [fp, #-8]
   19ea0:	ldr	r3, [fp, #-8]
   19ea4:	sub	r3, r3, #48	; 0x30
   19ea8:	cmp	r3, #9
   19eac:	bhi	19eb8 <_obstack_memory_used@@Base+0x47c>
   19eb0:	mov	r3, #1
   19eb4:	b	19ebc <_obstack_memory_used@@Base+0x480>
   19eb8:	mov	r3, #0
   19ebc:	mov	r0, r3
   19ec0:	add	sp, fp, #0
   19ec4:	pop	{fp}		; (ldr fp, [sp], #4)
   19ec8:	bx	lr
   19ecc:	push	{fp}		; (str fp, [sp, #-4]!)
   19ed0:	add	fp, sp, #0
   19ed4:	sub	sp, sp, #12
   19ed8:	str	r0, [fp, #-8]
   19edc:	ldr	r3, [fp, #-8]
   19ee0:	sub	r3, r3, #33	; 0x21
   19ee4:	cmp	r3, #93	; 0x5d
   19ee8:	bhi	19ef4 <_obstack_memory_used@@Base+0x4b8>
   19eec:	mov	r3, #1
   19ef0:	b	19ef8 <_obstack_memory_used@@Base+0x4bc>
   19ef4:	mov	r3, #0
   19ef8:	mov	r0, r3
   19efc:	add	sp, fp, #0
   19f00:	pop	{fp}		; (ldr fp, [sp], #4)
   19f04:	bx	lr
   19f08:	push	{fp}		; (str fp, [sp, #-4]!)
   19f0c:	add	fp, sp, #0
   19f10:	sub	sp, sp, #12
   19f14:	str	r0, [fp, #-8]
   19f18:	ldr	r3, [fp, #-8]
   19f1c:	sub	r3, r3, #97	; 0x61
   19f20:	cmp	r3, #25
   19f24:	bhi	19f30 <_obstack_memory_used@@Base+0x4f4>
   19f28:	mov	r3, #1
   19f2c:	b	19f34 <_obstack_memory_used@@Base+0x4f8>
   19f30:	mov	r3, #0
   19f34:	mov	r0, r3
   19f38:	add	sp, fp, #0
   19f3c:	pop	{fp}		; (ldr fp, [sp], #4)
   19f40:	bx	lr
   19f44:	push	{fp}		; (str fp, [sp, #-4]!)
   19f48:	add	fp, sp, #0
   19f4c:	sub	sp, sp, #12
   19f50:	str	r0, [fp, #-8]
   19f54:	ldr	r3, [fp, #-8]
   19f58:	sub	r3, r3, #32
   19f5c:	cmp	r3, #94	; 0x5e
   19f60:	bhi	19f6c <_obstack_memory_used@@Base+0x530>
   19f64:	mov	r3, #1
   19f68:	b	19f70 <_obstack_memory_used@@Base+0x534>
   19f6c:	mov	r3, #0
   19f70:	mov	r0, r3
   19f74:	add	sp, fp, #0
   19f78:	pop	{fp}		; (ldr fp, [sp], #4)
   19f7c:	bx	lr
   19f80:	push	{fp}		; (str fp, [sp, #-4]!)
   19f84:	add	fp, sp, #0
   19f88:	sub	sp, sp, #12
   19f8c:	str	r0, [fp, #-8]
   19f90:	ldr	r3, [fp, #-8]
   19f94:	cmp	r3, #64	; 0x40
   19f98:	bgt	19fb4 <_obstack_memory_used@@Base+0x578>
   19f9c:	cmp	r3, #58	; 0x3a
   19fa0:	bge	19fd0 <_obstack_memory_used@@Base+0x594>
   19fa4:	sub	r3, r3, #33	; 0x21
   19fa8:	cmp	r3, #14
   19fac:	bhi	19fd8 <_obstack_memory_used@@Base+0x59c>
   19fb0:	b	19fd0 <_obstack_memory_used@@Base+0x594>
   19fb4:	cmp	r3, #91	; 0x5b
   19fb8:	blt	19fd8 <_obstack_memory_used@@Base+0x59c>
   19fbc:	cmp	r3, #96	; 0x60
   19fc0:	ble	19fd0 <_obstack_memory_used@@Base+0x594>
   19fc4:	sub	r3, r3, #123	; 0x7b
   19fc8:	cmp	r3, #3
   19fcc:	bhi	19fd8 <_obstack_memory_used@@Base+0x59c>
   19fd0:	mov	r3, #1
   19fd4:	b	19fdc <_obstack_memory_used@@Base+0x5a0>
   19fd8:	mov	r3, #0
   19fdc:	mov	r0, r3
   19fe0:	add	sp, fp, #0
   19fe4:	pop	{fp}		; (ldr fp, [sp], #4)
   19fe8:	bx	lr
   19fec:	push	{fp}		; (str fp, [sp, #-4]!)
   19ff0:	add	fp, sp, #0
   19ff4:	sub	sp, sp, #12
   19ff8:	str	r0, [fp, #-8]
   19ffc:	ldr	r3, [fp, #-8]
   1a000:	cmp	r3, #9
   1a004:	blt	1a020 <_obstack_memory_used@@Base+0x5e4>
   1a008:	cmp	r3, #13
   1a00c:	ble	1a018 <_obstack_memory_used@@Base+0x5dc>
   1a010:	cmp	r3, #32
   1a014:	bne	1a020 <_obstack_memory_used@@Base+0x5e4>
   1a018:	mov	r3, #1
   1a01c:	b	1a024 <_obstack_memory_used@@Base+0x5e8>
   1a020:	mov	r3, #0
   1a024:	mov	r0, r3
   1a028:	add	sp, fp, #0
   1a02c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a030:	bx	lr
   1a034:	push	{fp}		; (str fp, [sp, #-4]!)
   1a038:	add	fp, sp, #0
   1a03c:	sub	sp, sp, #12
   1a040:	str	r0, [fp, #-8]
   1a044:	ldr	r3, [fp, #-8]
   1a048:	sub	r3, r3, #65	; 0x41
   1a04c:	cmp	r3, #25
   1a050:	bhi	1a05c <_obstack_memory_used@@Base+0x620>
   1a054:	mov	r3, #1
   1a058:	b	1a060 <_obstack_memory_used@@Base+0x624>
   1a05c:	mov	r3, #0
   1a060:	mov	r0, r3
   1a064:	add	sp, fp, #0
   1a068:	pop	{fp}		; (ldr fp, [sp], #4)
   1a06c:	bx	lr
   1a070:	push	{fp}		; (str fp, [sp, #-4]!)
   1a074:	add	fp, sp, #0
   1a078:	sub	sp, sp, #12
   1a07c:	str	r0, [fp, #-8]
   1a080:	ldr	r3, [fp, #-8]
   1a084:	sub	r3, r3, #48	; 0x30
   1a088:	cmp	r3, #54	; 0x36
   1a08c:	addls	pc, pc, r3, lsl #2
   1a090:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a094:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a098:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a09c:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0a0:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0a4:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0a8:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0ac:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0b0:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0b4:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0b8:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0bc:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a0c0:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a0c4:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a0c8:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a0cc:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a0d0:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a0d4:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a0d8:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0dc:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0e0:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0e4:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0e8:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0ec:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a0f0:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a0f4:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a0f8:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a0fc:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a100:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a104:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a108:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a10c:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a110:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a114:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a118:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a11c:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a120:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a124:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a128:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a12c:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a130:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a134:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a138:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a13c:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a140:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a144:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a148:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a14c:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a150:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a154:	b	1a178 <_obstack_memory_used@@Base+0x73c>
   1a158:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a15c:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a160:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a164:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a168:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a16c:	b	1a170 <_obstack_memory_used@@Base+0x734>
   1a170:	mov	r3, #1
   1a174:	b	1a17c <_obstack_memory_used@@Base+0x740>
   1a178:	mov	r3, #0
   1a17c:	mov	r0, r3
   1a180:	add	sp, fp, #0
   1a184:	pop	{fp}		; (ldr fp, [sp], #4)
   1a188:	bx	lr
   1a18c:	push	{fp}		; (str fp, [sp, #-4]!)
   1a190:	add	fp, sp, #0
   1a194:	sub	sp, sp, #12
   1a198:	str	r0, [fp, #-8]
   1a19c:	ldr	r3, [fp, #-8]
   1a1a0:	sub	r3, r3, #65	; 0x41
   1a1a4:	cmp	r3, #25
   1a1a8:	bhi	1a1b8 <_obstack_memory_used@@Base+0x77c>
   1a1ac:	ldr	r3, [fp, #-8]
   1a1b0:	add	r3, r3, #32
   1a1b4:	b	1a1bc <_obstack_memory_used@@Base+0x780>
   1a1b8:	ldr	r3, [fp, #-8]
   1a1bc:	mov	r0, r3
   1a1c0:	add	sp, fp, #0
   1a1c4:	pop	{fp}		; (ldr fp, [sp], #4)
   1a1c8:	bx	lr
   1a1cc:	push	{fp}		; (str fp, [sp, #-4]!)
   1a1d0:	add	fp, sp, #0
   1a1d4:	sub	sp, sp, #12
   1a1d8:	str	r0, [fp, #-8]
   1a1dc:	ldr	r3, [fp, #-8]
   1a1e0:	sub	r3, r3, #97	; 0x61
   1a1e4:	cmp	r3, #25
   1a1e8:	bhi	1a1f8 <_obstack_memory_used@@Base+0x7bc>
   1a1ec:	ldr	r3, [fp, #-8]
   1a1f0:	sub	r3, r3, #32
   1a1f4:	b	1a1fc <_obstack_memory_used@@Base+0x7c0>
   1a1f8:	ldr	r3, [fp, #-8]
   1a1fc:	mov	r0, r3
   1a200:	add	sp, fp, #0
   1a204:	pop	{fp}		; (ldr fp, [sp], #4)
   1a208:	bx	lr
   1a20c:	subs	r2, r1, #1
   1a210:	bxeq	lr
   1a214:	bcc	1a3ec <_obstack_memory_used@@Base+0x9b0>
   1a218:	cmp	r0, r1
   1a21c:	bls	1a3d0 <_obstack_memory_used@@Base+0x994>
   1a220:	tst	r1, r2
   1a224:	beq	1a3dc <_obstack_memory_used@@Base+0x9a0>
   1a228:	clz	r3, r0
   1a22c:	clz	r2, r1
   1a230:	sub	r3, r2, r3
   1a234:	rsbs	r3, r3, #31
   1a238:	addne	r3, r3, r3, lsl #1
   1a23c:	mov	r2, #0
   1a240:	addne	pc, pc, r3, lsl #2
   1a244:	nop			; (mov r0, r0)
   1a248:	cmp	r0, r1, lsl #31
   1a24c:	adc	r2, r2, r2
   1a250:	subcs	r0, r0, r1, lsl #31
   1a254:	cmp	r0, r1, lsl #30
   1a258:	adc	r2, r2, r2
   1a25c:	subcs	r0, r0, r1, lsl #30
   1a260:	cmp	r0, r1, lsl #29
   1a264:	adc	r2, r2, r2
   1a268:	subcs	r0, r0, r1, lsl #29
   1a26c:	cmp	r0, r1, lsl #28
   1a270:	adc	r2, r2, r2
   1a274:	subcs	r0, r0, r1, lsl #28
   1a278:	cmp	r0, r1, lsl #27
   1a27c:	adc	r2, r2, r2
   1a280:	subcs	r0, r0, r1, lsl #27
   1a284:	cmp	r0, r1, lsl #26
   1a288:	adc	r2, r2, r2
   1a28c:	subcs	r0, r0, r1, lsl #26
   1a290:	cmp	r0, r1, lsl #25
   1a294:	adc	r2, r2, r2
   1a298:	subcs	r0, r0, r1, lsl #25
   1a29c:	cmp	r0, r1, lsl #24
   1a2a0:	adc	r2, r2, r2
   1a2a4:	subcs	r0, r0, r1, lsl #24
   1a2a8:	cmp	r0, r1, lsl #23
   1a2ac:	adc	r2, r2, r2
   1a2b0:	subcs	r0, r0, r1, lsl #23
   1a2b4:	cmp	r0, r1, lsl #22
   1a2b8:	adc	r2, r2, r2
   1a2bc:	subcs	r0, r0, r1, lsl #22
   1a2c0:	cmp	r0, r1, lsl #21
   1a2c4:	adc	r2, r2, r2
   1a2c8:	subcs	r0, r0, r1, lsl #21
   1a2cc:	cmp	r0, r1, lsl #20
   1a2d0:	adc	r2, r2, r2
   1a2d4:	subcs	r0, r0, r1, lsl #20
   1a2d8:	cmp	r0, r1, lsl #19
   1a2dc:	adc	r2, r2, r2
   1a2e0:	subcs	r0, r0, r1, lsl #19
   1a2e4:	cmp	r0, r1, lsl #18
   1a2e8:	adc	r2, r2, r2
   1a2ec:	subcs	r0, r0, r1, lsl #18
   1a2f0:	cmp	r0, r1, lsl #17
   1a2f4:	adc	r2, r2, r2
   1a2f8:	subcs	r0, r0, r1, lsl #17
   1a2fc:	cmp	r0, r1, lsl #16
   1a300:	adc	r2, r2, r2
   1a304:	subcs	r0, r0, r1, lsl #16
   1a308:	cmp	r0, r1, lsl #15
   1a30c:	adc	r2, r2, r2
   1a310:	subcs	r0, r0, r1, lsl #15
   1a314:	cmp	r0, r1, lsl #14
   1a318:	adc	r2, r2, r2
   1a31c:	subcs	r0, r0, r1, lsl #14
   1a320:	cmp	r0, r1, lsl #13
   1a324:	adc	r2, r2, r2
   1a328:	subcs	r0, r0, r1, lsl #13
   1a32c:	cmp	r0, r1, lsl #12
   1a330:	adc	r2, r2, r2
   1a334:	subcs	r0, r0, r1, lsl #12
   1a338:	cmp	r0, r1, lsl #11
   1a33c:	adc	r2, r2, r2
   1a340:	subcs	r0, r0, r1, lsl #11
   1a344:	cmp	r0, r1, lsl #10
   1a348:	adc	r2, r2, r2
   1a34c:	subcs	r0, r0, r1, lsl #10
   1a350:	cmp	r0, r1, lsl #9
   1a354:	adc	r2, r2, r2
   1a358:	subcs	r0, r0, r1, lsl #9
   1a35c:	cmp	r0, r1, lsl #8
   1a360:	adc	r2, r2, r2
   1a364:	subcs	r0, r0, r1, lsl #8
   1a368:	cmp	r0, r1, lsl #7
   1a36c:	adc	r2, r2, r2
   1a370:	subcs	r0, r0, r1, lsl #7
   1a374:	cmp	r0, r1, lsl #6
   1a378:	adc	r2, r2, r2
   1a37c:	subcs	r0, r0, r1, lsl #6
   1a380:	cmp	r0, r1, lsl #5
   1a384:	adc	r2, r2, r2
   1a388:	subcs	r0, r0, r1, lsl #5
   1a38c:	cmp	r0, r1, lsl #4
   1a390:	adc	r2, r2, r2
   1a394:	subcs	r0, r0, r1, lsl #4
   1a398:	cmp	r0, r1, lsl #3
   1a39c:	adc	r2, r2, r2
   1a3a0:	subcs	r0, r0, r1, lsl #3
   1a3a4:	cmp	r0, r1, lsl #2
   1a3a8:	adc	r2, r2, r2
   1a3ac:	subcs	r0, r0, r1, lsl #2
   1a3b0:	cmp	r0, r1, lsl #1
   1a3b4:	adc	r2, r2, r2
   1a3b8:	subcs	r0, r0, r1, lsl #1
   1a3bc:	cmp	r0, r1
   1a3c0:	adc	r2, r2, r2
   1a3c4:	subcs	r0, r0, r1
   1a3c8:	mov	r0, r2
   1a3cc:	bx	lr
   1a3d0:	moveq	r0, #1
   1a3d4:	movne	r0, #0
   1a3d8:	bx	lr
   1a3dc:	clz	r2, r1
   1a3e0:	rsb	r2, r2, #31
   1a3e4:	lsr	r0, r0, r2
   1a3e8:	bx	lr
   1a3ec:	cmp	r0, #0
   1a3f0:	mvnne	r0, #0
   1a3f4:	b	1aa4c <_obstack_memory_used@@Base+0x1010>
   1a3f8:	cmp	r1, #0
   1a3fc:	beq	1a3ec <_obstack_memory_used@@Base+0x9b0>
   1a400:	push	{r0, r1, lr}
   1a404:	bl	1a20c <_obstack_memory_used@@Base+0x7d0>
   1a408:	pop	{r1, r2, lr}
   1a40c:	mul	r3, r2, r0
   1a410:	sub	r1, r1, r3
   1a414:	bx	lr
   1a418:	cmp	r1, #0
   1a41c:	beq	1a628 <_obstack_memory_used@@Base+0xbec>
   1a420:	eor	ip, r0, r1
   1a424:	rsbmi	r1, r1, #0
   1a428:	subs	r2, r1, #1
   1a42c:	beq	1a5f4 <_obstack_memory_used@@Base+0xbb8>
   1a430:	movs	r3, r0
   1a434:	rsbmi	r3, r0, #0
   1a438:	cmp	r3, r1
   1a43c:	bls	1a600 <_obstack_memory_used@@Base+0xbc4>
   1a440:	tst	r1, r2
   1a444:	beq	1a610 <_obstack_memory_used@@Base+0xbd4>
   1a448:	clz	r2, r3
   1a44c:	clz	r0, r1
   1a450:	sub	r2, r0, r2
   1a454:	rsbs	r2, r2, #31
   1a458:	addne	r2, r2, r2, lsl #1
   1a45c:	mov	r0, #0
   1a460:	addne	pc, pc, r2, lsl #2
   1a464:	nop			; (mov r0, r0)
   1a468:	cmp	r3, r1, lsl #31
   1a46c:	adc	r0, r0, r0
   1a470:	subcs	r3, r3, r1, lsl #31
   1a474:	cmp	r3, r1, lsl #30
   1a478:	adc	r0, r0, r0
   1a47c:	subcs	r3, r3, r1, lsl #30
   1a480:	cmp	r3, r1, lsl #29
   1a484:	adc	r0, r0, r0
   1a488:	subcs	r3, r3, r1, lsl #29
   1a48c:	cmp	r3, r1, lsl #28
   1a490:	adc	r0, r0, r0
   1a494:	subcs	r3, r3, r1, lsl #28
   1a498:	cmp	r3, r1, lsl #27
   1a49c:	adc	r0, r0, r0
   1a4a0:	subcs	r3, r3, r1, lsl #27
   1a4a4:	cmp	r3, r1, lsl #26
   1a4a8:	adc	r0, r0, r0
   1a4ac:	subcs	r3, r3, r1, lsl #26
   1a4b0:	cmp	r3, r1, lsl #25
   1a4b4:	adc	r0, r0, r0
   1a4b8:	subcs	r3, r3, r1, lsl #25
   1a4bc:	cmp	r3, r1, lsl #24
   1a4c0:	adc	r0, r0, r0
   1a4c4:	subcs	r3, r3, r1, lsl #24
   1a4c8:	cmp	r3, r1, lsl #23
   1a4cc:	adc	r0, r0, r0
   1a4d0:	subcs	r3, r3, r1, lsl #23
   1a4d4:	cmp	r3, r1, lsl #22
   1a4d8:	adc	r0, r0, r0
   1a4dc:	subcs	r3, r3, r1, lsl #22
   1a4e0:	cmp	r3, r1, lsl #21
   1a4e4:	adc	r0, r0, r0
   1a4e8:	subcs	r3, r3, r1, lsl #21
   1a4ec:	cmp	r3, r1, lsl #20
   1a4f0:	adc	r0, r0, r0
   1a4f4:	subcs	r3, r3, r1, lsl #20
   1a4f8:	cmp	r3, r1, lsl #19
   1a4fc:	adc	r0, r0, r0
   1a500:	subcs	r3, r3, r1, lsl #19
   1a504:	cmp	r3, r1, lsl #18
   1a508:	adc	r0, r0, r0
   1a50c:	subcs	r3, r3, r1, lsl #18
   1a510:	cmp	r3, r1, lsl #17
   1a514:	adc	r0, r0, r0
   1a518:	subcs	r3, r3, r1, lsl #17
   1a51c:	cmp	r3, r1, lsl #16
   1a520:	adc	r0, r0, r0
   1a524:	subcs	r3, r3, r1, lsl #16
   1a528:	cmp	r3, r1, lsl #15
   1a52c:	adc	r0, r0, r0
   1a530:	subcs	r3, r3, r1, lsl #15
   1a534:	cmp	r3, r1, lsl #14
   1a538:	adc	r0, r0, r0
   1a53c:	subcs	r3, r3, r1, lsl #14
   1a540:	cmp	r3, r1, lsl #13
   1a544:	adc	r0, r0, r0
   1a548:	subcs	r3, r3, r1, lsl #13
   1a54c:	cmp	r3, r1, lsl #12
   1a550:	adc	r0, r0, r0
   1a554:	subcs	r3, r3, r1, lsl #12
   1a558:	cmp	r3, r1, lsl #11
   1a55c:	adc	r0, r0, r0
   1a560:	subcs	r3, r3, r1, lsl #11
   1a564:	cmp	r3, r1, lsl #10
   1a568:	adc	r0, r0, r0
   1a56c:	subcs	r3, r3, r1, lsl #10
   1a570:	cmp	r3, r1, lsl #9
   1a574:	adc	r0, r0, r0
   1a578:	subcs	r3, r3, r1, lsl #9
   1a57c:	cmp	r3, r1, lsl #8
   1a580:	adc	r0, r0, r0
   1a584:	subcs	r3, r3, r1, lsl #8
   1a588:	cmp	r3, r1, lsl #7
   1a58c:	adc	r0, r0, r0
   1a590:	subcs	r3, r3, r1, lsl #7
   1a594:	cmp	r3, r1, lsl #6
   1a598:	adc	r0, r0, r0
   1a59c:	subcs	r3, r3, r1, lsl #6
   1a5a0:	cmp	r3, r1, lsl #5
   1a5a4:	adc	r0, r0, r0
   1a5a8:	subcs	r3, r3, r1, lsl #5
   1a5ac:	cmp	r3, r1, lsl #4
   1a5b0:	adc	r0, r0, r0
   1a5b4:	subcs	r3, r3, r1, lsl #4
   1a5b8:	cmp	r3, r1, lsl #3
   1a5bc:	adc	r0, r0, r0
   1a5c0:	subcs	r3, r3, r1, lsl #3
   1a5c4:	cmp	r3, r1, lsl #2
   1a5c8:	adc	r0, r0, r0
   1a5cc:	subcs	r3, r3, r1, lsl #2
   1a5d0:	cmp	r3, r1, lsl #1
   1a5d4:	adc	r0, r0, r0
   1a5d8:	subcs	r3, r3, r1, lsl #1
   1a5dc:	cmp	r3, r1
   1a5e0:	adc	r0, r0, r0
   1a5e4:	subcs	r3, r3, r1
   1a5e8:	cmp	ip, #0
   1a5ec:	rsbmi	r0, r0, #0
   1a5f0:	bx	lr
   1a5f4:	teq	ip, r0
   1a5f8:	rsbmi	r0, r0, #0
   1a5fc:	bx	lr
   1a600:	movcc	r0, #0
   1a604:	asreq	r0, ip, #31
   1a608:	orreq	r0, r0, #1
   1a60c:	bx	lr
   1a610:	clz	r2, r1
   1a614:	rsb	r2, r2, #31
   1a618:	cmp	ip, #0
   1a61c:	lsr	r0, r3, r2
   1a620:	rsbmi	r0, r0, #0
   1a624:	bx	lr
   1a628:	cmp	r0, #0
   1a62c:	mvngt	r0, #-2147483648	; 0x80000000
   1a630:	movlt	r0, #-2147483648	; 0x80000000
   1a634:	b	1aa4c <_obstack_memory_used@@Base+0x1010>
   1a638:	cmp	r1, #0
   1a63c:	beq	1a628 <_obstack_memory_used@@Base+0xbec>
   1a640:	push	{r0, r1, lr}
   1a644:	bl	1a420 <_obstack_memory_used@@Base+0x9e4>
   1a648:	pop	{r1, r2, lr}
   1a64c:	mul	r3, r2, r0
   1a650:	sub	r1, r1, r3
   1a654:	bx	lr
   1a658:	eor	r1, r1, #-2147483648	; 0x80000000
   1a65c:	b	1a664 <_obstack_memory_used@@Base+0xc28>
   1a660:	eor	r3, r3, #-2147483648	; 0x80000000
   1a664:	push	{r4, r5, lr}
   1a668:	lsl	r4, r1, #1
   1a66c:	lsl	r5, r3, #1
   1a670:	teq	r4, r5
   1a674:	teqeq	r0, r2
   1a678:	orrsne	ip, r4, r0
   1a67c:	orrsne	ip, r5, r2
   1a680:	mvnsne	ip, r4, asr #21
   1a684:	mvnsne	ip, r5, asr #21
   1a688:	beq	1a874 <_obstack_memory_used@@Base+0xe38>
   1a68c:	lsr	r4, r4, #21
   1a690:	rsbs	r5, r4, r5, lsr #21
   1a694:	rsblt	r5, r5, #0
   1a698:	ble	1a6b8 <_obstack_memory_used@@Base+0xc7c>
   1a69c:	add	r4, r4, r5
   1a6a0:	eor	r2, r0, r2
   1a6a4:	eor	r3, r1, r3
   1a6a8:	eor	r0, r2, r0
   1a6ac:	eor	r1, r3, r1
   1a6b0:	eor	r2, r0, r2
   1a6b4:	eor	r3, r1, r3
   1a6b8:	cmp	r5, #54	; 0x36
   1a6bc:	pophi	{r4, r5, pc}
   1a6c0:	tst	r1, #-2147483648	; 0x80000000
   1a6c4:	lsl	r1, r1, #12
   1a6c8:	mov	ip, #1048576	; 0x100000
   1a6cc:	orr	r1, ip, r1, lsr #12
   1a6d0:	beq	1a6dc <_obstack_memory_used@@Base+0xca0>
   1a6d4:	rsbs	r0, r0, #0
   1a6d8:	rsc	r1, r1, #0
   1a6dc:	tst	r3, #-2147483648	; 0x80000000
   1a6e0:	lsl	r3, r3, #12
   1a6e4:	orr	r3, ip, r3, lsr #12
   1a6e8:	beq	1a6f4 <_obstack_memory_used@@Base+0xcb8>
   1a6ec:	rsbs	r2, r2, #0
   1a6f0:	rsc	r3, r3, #0
   1a6f4:	teq	r4, r5
   1a6f8:	beq	1a85c <_obstack_memory_used@@Base+0xe20>
   1a6fc:	sub	r4, r4, #1
   1a700:	rsbs	lr, r5, #32
   1a704:	blt	1a720 <_obstack_memory_used@@Base+0xce4>
   1a708:	lsl	ip, r2, lr
   1a70c:	adds	r0, r0, r2, lsr r5
   1a710:	adc	r1, r1, #0
   1a714:	adds	r0, r0, r3, lsl lr
   1a718:	adcs	r1, r1, r3, asr r5
   1a71c:	b	1a73c <_obstack_memory_used@@Base+0xd00>
   1a720:	sub	r5, r5, #32
   1a724:	add	lr, lr, #32
   1a728:	cmp	r2, #1
   1a72c:	lsl	ip, r3, lr
   1a730:	orrcs	ip, ip, #2
   1a734:	adds	r0, r0, r3, asr r5
   1a738:	adcs	r1, r1, r3, asr #31
   1a73c:	and	r5, r1, #-2147483648	; 0x80000000
   1a740:	bpl	1a750 <_obstack_memory_used@@Base+0xd14>
   1a744:	rsbs	ip, ip, #0
   1a748:	rscs	r0, r0, #0
   1a74c:	rsc	r1, r1, #0
   1a750:	cmp	r1, #1048576	; 0x100000
   1a754:	bcc	1a794 <_obstack_memory_used@@Base+0xd58>
   1a758:	cmp	r1, #2097152	; 0x200000
   1a75c:	bcc	1a77c <_obstack_memory_used@@Base+0xd40>
   1a760:	lsrs	r1, r1, #1
   1a764:	rrxs	r0, r0
   1a768:	rrx	ip, ip
   1a76c:	add	r4, r4, #1
   1a770:	lsl	r2, r4, #21
   1a774:	cmn	r2, #4194304	; 0x400000
   1a778:	bcs	1a8d4 <_obstack_memory_used@@Base+0xe98>
   1a77c:	cmp	ip, #-2147483648	; 0x80000000
   1a780:	lsrseq	ip, r0, #1
   1a784:	adcs	r0, r0, #0
   1a788:	adc	r1, r1, r4, lsl #20
   1a78c:	orr	r1, r1, r5
   1a790:	pop	{r4, r5, pc}
   1a794:	lsls	ip, ip, #1
   1a798:	adcs	r0, r0, r0
   1a79c:	adc	r1, r1, r1
   1a7a0:	tst	r1, #1048576	; 0x100000
   1a7a4:	sub	r4, r4, #1
   1a7a8:	bne	1a77c <_obstack_memory_used@@Base+0xd40>
   1a7ac:	teq	r1, #0
   1a7b0:	moveq	r1, r0
   1a7b4:	moveq	r0, #0
   1a7b8:	clz	r3, r1
   1a7bc:	addeq	r3, r3, #32
   1a7c0:	sub	r3, r3, #11
   1a7c4:	subs	r2, r3, #32
   1a7c8:	bge	1a7ec <_obstack_memory_used@@Base+0xdb0>
   1a7cc:	adds	r2, r2, #12
   1a7d0:	ble	1a7e8 <_obstack_memory_used@@Base+0xdac>
   1a7d4:	add	ip, r2, #20
   1a7d8:	rsb	r2, r2, #12
   1a7dc:	lsl	r0, r1, ip
   1a7e0:	lsr	r1, r1, r2
   1a7e4:	b	1a7fc <_obstack_memory_used@@Base+0xdc0>
   1a7e8:	add	r2, r2, #20
   1a7ec:	rsble	ip, r2, #32
   1a7f0:	lsl	r1, r1, r2
   1a7f4:	orrle	r1, r1, r0, lsr ip
   1a7f8:	lslle	r0, r0, r2
   1a7fc:	subs	r4, r4, r3
   1a800:	addge	r1, r1, r4, lsl #20
   1a804:	orrge	r1, r1, r5
   1a808:	popge	{r4, r5, pc}
   1a80c:	mvn	r4, r4
   1a810:	subs	r4, r4, #31
   1a814:	bge	1a850 <_obstack_memory_used@@Base+0xe14>
   1a818:	adds	r4, r4, #12
   1a81c:	bgt	1a838 <_obstack_memory_used@@Base+0xdfc>
   1a820:	add	r4, r4, #20
   1a824:	rsb	r2, r4, #32
   1a828:	lsr	r0, r0, r4
   1a82c:	orr	r0, r0, r1, lsl r2
   1a830:	orr	r1, r5, r1, lsr r4
   1a834:	pop	{r4, r5, pc}
   1a838:	rsb	r4, r4, #12
   1a83c:	rsb	r2, r4, #32
   1a840:	lsr	r0, r0, r2
   1a844:	orr	r0, r0, r1, lsl r4
   1a848:	mov	r1, r5
   1a84c:	pop	{r4, r5, pc}
   1a850:	lsr	r0, r1, r4
   1a854:	mov	r1, r5
   1a858:	pop	{r4, r5, pc}
   1a85c:	teq	r4, #0
   1a860:	eor	r3, r3, #1048576	; 0x100000
   1a864:	eoreq	r1, r1, #1048576	; 0x100000
   1a868:	addeq	r4, r4, #1
   1a86c:	subne	r5, r5, #1
   1a870:	b	1a6fc <_obstack_memory_used@@Base+0xcc0>
   1a874:	mvns	ip, r4, asr #21
   1a878:	mvnsne	ip, r5, asr #21
   1a87c:	beq	1a8e4 <_obstack_memory_used@@Base+0xea8>
   1a880:	teq	r4, r5
   1a884:	teqeq	r0, r2
   1a888:	beq	1a89c <_obstack_memory_used@@Base+0xe60>
   1a88c:	orrs	ip, r4, r0
   1a890:	moveq	r1, r3
   1a894:	moveq	r0, r2
   1a898:	pop	{r4, r5, pc}
   1a89c:	teq	r1, r3
   1a8a0:	movne	r1, #0
   1a8a4:	movne	r0, #0
   1a8a8:	popne	{r4, r5, pc}
   1a8ac:	lsrs	ip, r4, #21
   1a8b0:	bne	1a8c4 <_obstack_memory_used@@Base+0xe88>
   1a8b4:	lsls	r0, r0, #1
   1a8b8:	adcs	r1, r1, r1
   1a8bc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1a8c0:	pop	{r4, r5, pc}
   1a8c4:	adds	r4, r4, #4194304	; 0x400000
   1a8c8:	addcc	r1, r1, #1048576	; 0x100000
   1a8cc:	popcc	{r4, r5, pc}
   1a8d0:	and	r5, r1, #-2147483648	; 0x80000000
   1a8d4:	orr	r1, r5, #2130706432	; 0x7f000000
   1a8d8:	orr	r1, r1, #15728640	; 0xf00000
   1a8dc:	mov	r0, #0
   1a8e0:	pop	{r4, r5, pc}
   1a8e4:	mvns	ip, r4, asr #21
   1a8e8:	movne	r1, r3
   1a8ec:	movne	r0, r2
   1a8f0:	mvnseq	ip, r5, asr #21
   1a8f4:	movne	r3, r1
   1a8f8:	movne	r2, r0
   1a8fc:	orrs	r4, r0, r1, lsl #12
   1a900:	orrseq	r5, r2, r3, lsl #12
   1a904:	teqeq	r1, r3
   1a908:	orrne	r1, r1, #524288	; 0x80000
   1a90c:	pop	{r4, r5, pc}
   1a910:	teq	r0, #0
   1a914:	moveq	r1, #0
   1a918:	bxeq	lr
   1a91c:	push	{r4, r5, lr}
   1a920:	mov	r4, #1024	; 0x400
   1a924:	add	r4, r4, #50	; 0x32
   1a928:	mov	r5, #0
   1a92c:	mov	r1, #0
   1a930:	b	1a7ac <_obstack_memory_used@@Base+0xd70>
   1a934:	teq	r0, #0
   1a938:	moveq	r1, #0
   1a93c:	bxeq	lr
   1a940:	push	{r4, r5, lr}
   1a944:	mov	r4, #1024	; 0x400
   1a948:	add	r4, r4, #50	; 0x32
   1a94c:	ands	r5, r0, #-2147483648	; 0x80000000
   1a950:	rsbmi	r0, r0, #0
   1a954:	mov	r1, #0
   1a958:	b	1a7ac <_obstack_memory_used@@Base+0xd70>
   1a95c:	lsls	r2, r0, #1
   1a960:	asr	r1, r2, #3
   1a964:	rrx	r1, r1
   1a968:	lsl	r0, r2, #28
   1a96c:	andsne	r3, r2, #-16777216	; 0xff000000
   1a970:	teqne	r3, #-16777216	; 0xff000000
   1a974:	eorne	r1, r1, #939524096	; 0x38000000
   1a978:	bxne	lr
   1a97c:	teq	r2, #0
   1a980:	teqne	r3, #-16777216	; 0xff000000
   1a984:	bxeq	lr
   1a988:	push	{r4, r5, lr}
   1a98c:	mov	r4, #896	; 0x380
   1a990:	and	r5, r1, #-2147483648	; 0x80000000
   1a994:	bic	r1, r1, #-2147483648	; 0x80000000
   1a998:	b	1a7ac <_obstack_memory_used@@Base+0xd70>
   1a99c:	orrs	r2, r0, r1
   1a9a0:	bxeq	lr
   1a9a4:	push	{r4, r5, lr}
   1a9a8:	mov	r5, #0
   1a9ac:	b	1a9cc <_obstack_memory_used@@Base+0xf90>
   1a9b0:	orrs	r2, r0, r1
   1a9b4:	bxeq	lr
   1a9b8:	push	{r4, r5, lr}
   1a9bc:	ands	r5, r1, #-2147483648	; 0x80000000
   1a9c0:	bpl	1a9cc <_obstack_memory_used@@Base+0xf90>
   1a9c4:	rsbs	r0, r0, #0
   1a9c8:	rsc	r1, r1, #0
   1a9cc:	mov	r4, #1024	; 0x400
   1a9d0:	add	r4, r4, #50	; 0x32
   1a9d4:	lsrs	ip, r1, #22
   1a9d8:	beq	1a750 <_obstack_memory_used@@Base+0xd14>
   1a9dc:	mov	r2, #3
   1a9e0:	lsrs	ip, ip, #3
   1a9e4:	addne	r2, r2, #3
   1a9e8:	lsrs	ip, ip, #3
   1a9ec:	addne	r2, r2, #3
   1a9f0:	add	r2, r2, ip, lsr #3
   1a9f4:	rsb	r3, r2, #32
   1a9f8:	lsl	ip, r0, r3
   1a9fc:	lsr	r0, r0, r2
   1aa00:	orr	r0, r0, r1, lsl r3
   1aa04:	lsr	r1, r1, r2
   1aa08:	add	r4, r4, r2
   1aa0c:	b	1a750 <_obstack_memory_used@@Base+0xd14>
   1aa10:	cmp	r3, #0
   1aa14:	cmpeq	r2, #0
   1aa18:	bne	1aa30 <_obstack_memory_used@@Base+0xff4>
   1aa1c:	cmp	r1, #0
   1aa20:	cmpeq	r0, #0
   1aa24:	mvnne	r1, #0
   1aa28:	mvnne	r0, #0
   1aa2c:	b	1aa4c <_obstack_memory_used@@Base+0x1010>
   1aa30:	sub	sp, sp, #8
   1aa34:	push	{sp, lr}
   1aa38:	bl	1aa5c <_obstack_memory_used@@Base+0x1020>
   1aa3c:	ldr	lr, [sp, #4]
   1aa40:	add	sp, sp, #8
   1aa44:	pop	{r2, r3}
   1aa48:	bx	lr
   1aa4c:	push	{r1, lr}
   1aa50:	mov	r0, #8
   1aa54:	bl	11098 <raise@plt>
   1aa58:	pop	{r1, pc}
   1aa5c:	cmp	r1, r3
   1aa60:	push	{r4, r5, r6, r7, r8, r9, lr}
   1aa64:	cmpeq	r0, r2
   1aa68:	mov	r4, r0
   1aa6c:	mov	r5, r1
   1aa70:	ldr	r9, [sp, #28]
   1aa74:	movcc	r0, #0
   1aa78:	movcc	r1, #0
   1aa7c:	bcc	1ab74 <_obstack_memory_used@@Base+0x1138>
   1aa80:	cmp	r3, #0
   1aa84:	clzeq	ip, r2
   1aa88:	clzne	ip, r3
   1aa8c:	addeq	ip, ip, #32
   1aa90:	cmp	r5, #0
   1aa94:	clzeq	r1, r4
   1aa98:	addeq	r1, r1, #32
   1aa9c:	clzne	r1, r5
   1aaa0:	sub	ip, ip, r1
   1aaa4:	sub	lr, ip, #32
   1aaa8:	lsl	r7, r3, ip
   1aaac:	rsb	r8, ip, #32
   1aab0:	orr	r7, r7, r2, lsl lr
   1aab4:	orr	r7, r7, r2, lsr r8
   1aab8:	lsl	r6, r2, ip
   1aabc:	cmp	r5, r7
   1aac0:	cmpeq	r4, r6
   1aac4:	movcc	r0, #0
   1aac8:	movcc	r1, #0
   1aacc:	bcc	1aae8 <_obstack_memory_used@@Base+0x10ac>
   1aad0:	mov	r3, #1
   1aad4:	subs	r4, r4, r6
   1aad8:	lsl	r1, r3, lr
   1aadc:	lsl	r0, r3, ip
   1aae0:	orr	r1, r1, r3, lsr r8
   1aae4:	sbc	r5, r5, r7
   1aae8:	cmp	ip, #0
   1aaec:	beq	1ab74 <_obstack_memory_used@@Base+0x1138>
   1aaf0:	lsrs	r3, r7, #1
   1aaf4:	rrx	r2, r6
   1aaf8:	mov	r6, ip
   1aafc:	b	1ab20 <_obstack_memory_used@@Base+0x10e4>
   1ab00:	subs	r4, r4, r2
   1ab04:	sbc	r5, r5, r3
   1ab08:	adds	r4, r4, r4
   1ab0c:	adc	r5, r5, r5
   1ab10:	adds	r4, r4, #1
   1ab14:	adc	r5, r5, #0
   1ab18:	subs	r6, r6, #1
   1ab1c:	beq	1ab3c <_obstack_memory_used@@Base+0x1100>
   1ab20:	cmp	r5, r3
   1ab24:	cmpeq	r4, r2
   1ab28:	bcs	1ab00 <_obstack_memory_used@@Base+0x10c4>
   1ab2c:	adds	r4, r4, r4
   1ab30:	adc	r5, r5, r5
   1ab34:	subs	r6, r6, #1
   1ab38:	bne	1ab20 <_obstack_memory_used@@Base+0x10e4>
   1ab3c:	lsr	r6, r4, ip
   1ab40:	lsr	r7, r5, ip
   1ab44:	orr	r6, r6, r5, lsl r8
   1ab48:	adds	r2, r0, r4
   1ab4c:	orr	r6, r6, r5, lsr lr
   1ab50:	adc	r3, r1, r5
   1ab54:	lsl	r1, r7, ip
   1ab58:	orr	r1, r1, r6, lsl lr
   1ab5c:	lsl	r0, r6, ip
   1ab60:	orr	r1, r1, r6, lsr r8
   1ab64:	subs	r0, r2, r0
   1ab68:	mov	r4, r6
   1ab6c:	mov	r5, r7
   1ab70:	sbc	r1, r3, r1
   1ab74:	cmp	r9, #0
   1ab78:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1ab7c:	strd	r4, [r9]
   1ab80:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ab84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ab88:	mov	r7, r0
   1ab8c:	ldr	r6, [pc, #72]	; 1abdc <_obstack_memory_used@@Base+0x11a0>
   1ab90:	ldr	r5, [pc, #72]	; 1abe0 <_obstack_memory_used@@Base+0x11a4>
   1ab94:	add	r6, pc, r6
   1ab98:	add	r5, pc, r5
   1ab9c:	sub	r6, r6, r5
   1aba0:	mov	r8, r1
   1aba4:	mov	r9, r2
   1aba8:	bl	11060 <calloc@plt-0x20>
   1abac:	asrs	r6, r6, #2
   1abb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1abb4:	mov	r4, #0
   1abb8:	add	r4, r4, #1
   1abbc:	ldr	r3, [r5], #4
   1abc0:	mov	r2, r9
   1abc4:	mov	r1, r8
   1abc8:	mov	r0, r7
   1abcc:	blx	r3
   1abd0:	cmp	r6, r4
   1abd4:	bne	1abb8 <_obstack_memory_used@@Base+0x117c>
   1abd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1abdc:	andeq	r1, r1, r4, ror r3
   1abe0:	andeq	r1, r1, ip, ror #6
   1abe4:	bx	lr
   1abe8:	ldr	r3, [pc, #12]	; 1abfc <_obstack_memory_used@@Base+0x11c0>
   1abec:	mov	r1, #0
   1abf0:	add	r3, pc, r3
   1abf4:	ldr	r2, [r3]
   1abf8:	b	112cc <__cxa_atexit@plt>
   1abfc:	andeq	r1, r1, r0, lsr r5
   1ac00:	mov	r2, r1
   1ac04:	mov	r1, r0
   1ac08:	mov	r0, #3
   1ac0c:	b	11374 <__xstat64@plt>
   1ac10:	mov	r2, r1
   1ac14:	mov	r1, r0
   1ac18:	mov	r0, #3
   1ac1c:	b	11194 <__fxstat64@plt>

Disassembly of section .fini:

0001ac20 <.fini>:
   1ac20:	push	{r3, lr}
   1ac24:	pop	{r3, pc}
