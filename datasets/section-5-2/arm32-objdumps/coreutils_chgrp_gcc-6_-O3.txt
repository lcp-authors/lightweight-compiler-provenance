
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00010fc8 <.init>:
   10fc8:	push	{r3, lr}
   10fcc:	bl	1181c <__assert_fail@plt+0x4ec>
   10fd0:	pop	{r3, pc}

Disassembly of section .plt:

00010fd4 <fstatfs64@plt-0x14>:
   10fd4:	push	{lr}		; (str lr, [sp, #-4]!)
   10fd8:	ldr	lr, [pc, #4]	; 10fe4 <fstatfs64@plt-0x4>
   10fdc:	add	lr, pc, lr
   10fe0:	ldr	pc, [lr, #8]!
   10fe4:	andeq	pc, r1, ip, lsl r0	; <UNPREDICTABLE>

00010fe8 <fstatfs64@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #126976	; 0x1f000
   10ff0:	ldr	pc, [ip, #28]!

00010ff4 <calloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #126976	; 0x1f000
   10ffc:	ldr	pc, [ip, #20]!

00011000 <endgrent@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #126976	; 0x1f000
   11008:	ldr	pc, [ip, #12]!

0001100c <fputs_unlocked@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #126976	; 0x1f000
   11014:	ldr	pc, [ip, #4]!

00011018 <raise@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #122880	; 0x1e000
   11020:	ldr	pc, [ip, #4092]!	; 0xffc

00011024 <strcmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #122880	; 0x1e000
   1102c:	ldr	pc, [ip, #4084]!	; 0xff4

00011030 <getpwuid@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #122880	; 0x1e000
   11038:	ldr	pc, [ip, #4076]!	; 0xfec

0001103c <fflush@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #122880	; 0x1e000
   11044:	ldr	pc, [ip, #4068]!	; 0xfe4

00011048 <memmove@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #122880	; 0x1e000
   11050:	ldr	pc, [ip, #4060]!	; 0xfdc

00011054 <free@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #122880	; 0x1e000
   1105c:	ldr	pc, [ip, #4052]!	; 0xfd4

00011060 <__openat64_2@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #122880	; 0x1e000
   11068:	ldr	pc, [ip, #4044]!	; 0xfcc

0001106c <_exit@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #122880	; 0x1e000
   11074:	ldr	pc, [ip, #4036]!	; 0xfc4

00011078 <memcpy@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #122880	; 0x1e000
   11080:	ldr	pc, [ip, #4028]!	; 0xfbc

00011084 <__strtoull_internal@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #122880	; 0x1e000
   1108c:	ldr	pc, [ip, #4020]!	; 0xfb4

00011090 <mbsinit@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #122880	; 0x1e000
   11098:	ldr	pc, [ip, #4012]!	; 0xfac

0001109c <memcmp@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #122880	; 0x1e000
   110a4:	ldr	pc, [ip, #4004]!	; 0xfa4

000110a8 <stpcpy@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #122880	; 0x1e000
   110b0:	ldr	pc, [ip, #3996]!	; 0xf9c

000110b4 <fputc_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #122880	; 0x1e000
   110bc:	ldr	pc, [ip, #3988]!	; 0xf94

000110c0 <dcgettext@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #122880	; 0x1e000
   110c8:	ldr	pc, [ip, #3980]!	; 0xf8c

000110cc <realloc@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #122880	; 0x1e000
   110d4:	ldr	pc, [ip, #3972]!	; 0xf84

000110d8 <textdomain@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #122880	; 0x1e000
   110e0:	ldr	pc, [ip, #3964]!	; 0xf7c

000110e4 <__fxstatat64@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #122880	; 0x1e000
   110ec:	ldr	pc, [ip, #3956]!	; 0xf74

000110f0 <iswprint@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #122880	; 0x1e000
   110f8:	ldr	pc, [ip, #3948]!	; 0xf6c

000110fc <__fxstat64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #122880	; 0x1e000
   11104:	ldr	pc, [ip, #3940]!	; 0xf64

00011108 <fwrite@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #122880	; 0x1e000
   11110:	ldr	pc, [ip, #3932]!	; 0xf5c

00011114 <lseek64@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #122880	; 0x1e000
   1111c:	ldr	pc, [ip, #3924]!	; 0xf54

00011120 <__ctype_get_mb_cur_max@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #122880	; 0x1e000
   11128:	ldr	pc, [ip, #3916]!	; 0xf4c

0001112c <strcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #122880	; 0x1e000
   11134:	ldr	pc, [ip, #3908]!	; 0xf44

00011138 <__fpending@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #122880	; 0x1e000
   11140:	ldr	pc, [ip, #3900]!	; 0xf3c

00011144 <mbrtowc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #122880	; 0x1e000
   1114c:	ldr	pc, [ip, #3892]!	; 0xf34

00011150 <error@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #122880	; 0x1e000
   11158:	ldr	pc, [ip, #3884]!	; 0xf2c

0001115c <open64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #122880	; 0x1e000
   11164:	ldr	pc, [ip, #3876]!	; 0xf24

00011168 <malloc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #122880	; 0x1e000
   11170:	ldr	pc, [ip, #3868]!	; 0xf1c

00011174 <__libc_start_main@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #122880	; 0x1e000
   1117c:	ldr	pc, [ip, #3860]!	; 0xf14

00011180 <__freading@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #122880	; 0x1e000
   11188:	ldr	pc, [ip, #3852]!	; 0xf0c

0001118c <__gmon_start__@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #122880	; 0x1e000
   11194:	ldr	pc, [ip, #3844]!	; 0xf04

00011198 <getopt_long@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #122880	; 0x1e000
   111a0:	ldr	pc, [ip, #3836]!	; 0xefc

000111a4 <__ctype_b_loc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #122880	; 0x1e000
   111ac:	ldr	pc, [ip, #3828]!	; 0xef4

000111b0 <exit@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #122880	; 0x1e000
   111b8:	ldr	pc, [ip, #3820]!	; 0xeec

000111bc <strlen@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #122880	; 0x1e000
   111c4:	ldr	pc, [ip, #3812]!	; 0xee4

000111c8 <strchr@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #122880	; 0x1e000
   111d0:	ldr	pc, [ip, #3804]!	; 0xedc

000111d4 <openat64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #122880	; 0x1e000
   111dc:	ldr	pc, [ip, #3796]!	; 0xed4

000111e0 <fchown@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #122880	; 0x1e000
   111e8:	ldr	pc, [ip, #3788]!	; 0xecc

000111ec <__errno_location@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #122880	; 0x1e000
   111f4:	ldr	pc, [ip, #3780]!	; 0xec4

000111f8 <__cxa_atexit@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #122880	; 0x1e000
   11200:	ldr	pc, [ip, #3772]!	; 0xebc

00011204 <memset@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #122880	; 0x1e000
   1120c:	ldr	pc, [ip, #3764]!	; 0xeb4

00011210 <__printf_chk@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #122880	; 0x1e000
   11218:	ldr	pc, [ip, #3756]!	; 0xeac

0001121c <fileno@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #122880	; 0x1e000
   11224:	ldr	pc, [ip, #3748]!	; 0xea4

00011228 <__fprintf_chk@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #122880	; 0x1e000
   11230:	ldr	pc, [ip, #3740]!	; 0xe9c

00011234 <fclose@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #122880	; 0x1e000
   1123c:	ldr	pc, [ip, #3732]!	; 0xe94

00011240 <fseeko64@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #122880	; 0x1e000
   11248:	ldr	pc, [ip, #3724]!	; 0xe8c

0001124c <fcntl64@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #122880	; 0x1e000
   11254:	ldr	pc, [ip, #3716]!	; 0xe84

00011258 <setlocale@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #122880	; 0x1e000
   11260:	ldr	pc, [ip, #3708]!	; 0xe7c

00011264 <strrchr@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #122880	; 0x1e000
   1126c:	ldr	pc, [ip, #3700]!	; 0xe74

00011270 <nl_langinfo@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #122880	; 0x1e000
   11278:	ldr	pc, [ip, #3692]!	; 0xe6c

0001127c <readdir64@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #122880	; 0x1e000
   11284:	ldr	pc, [ip, #3684]!	; 0xe64

00011288 <fdopendir@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #122880	; 0x1e000
   11290:	ldr	pc, [ip, #3676]!	; 0xe5c

00011294 <dirfd@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #122880	; 0x1e000
   1129c:	ldr	pc, [ip, #3668]!	; 0xe54

000112a0 <fchdir@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #122880	; 0x1e000
   112a8:	ldr	pc, [ip, #3660]!	; 0xe4c

000112ac <qsort@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #122880	; 0x1e000
   112b4:	ldr	pc, [ip, #3652]!	; 0xe44

000112b8 <fchownat@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #122880	; 0x1e000
   112c0:	ldr	pc, [ip, #3644]!	; 0xe3c

000112c4 <bindtextdomain@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #122880	; 0x1e000
   112cc:	ldr	pc, [ip, #3636]!	; 0xe34

000112d0 <__xstat64@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #122880	; 0x1e000
   112d8:	ldr	pc, [ip, #3628]!	; 0xe2c

000112dc <strncmp@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #122880	; 0x1e000
   112e4:	ldr	pc, [ip, #3620]!	; 0xe24

000112e8 <abort@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #122880	; 0x1e000
   112f0:	ldr	pc, [ip, #3612]!	; 0xe1c

000112f4 <close@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #122880	; 0x1e000
   112fc:	ldr	pc, [ip, #3604]!	; 0xe14

00011300 <__lxstat64@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #122880	; 0x1e000
   11308:	ldr	pc, [ip, #3596]!	; 0xe0c

0001130c <closedir@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #122880	; 0x1e000
   11314:	ldr	pc, [ip, #3588]!	; 0xe04

00011318 <getgrgid@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #122880	; 0x1e000
   11320:	ldr	pc, [ip, #3580]!	; 0xdfc

00011324 <getgrnam@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #122880	; 0x1e000
   1132c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011330 <__assert_fail@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #122880	; 0x1e000
   11338:	ldr	pc, [ip, #3564]!	; 0xdec

Disassembly of section .text:

00011340 <.text>:
   11340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11344:	mov	r6, r0
   11348:	sub	sp, sp, #156	; 0x9c
   1134c:	ldr	r0, [r1]
   11350:	mov	r5, r1
   11354:	bl	16e60 <__assert_fail@plt+0x5b30>
   11358:	ldr	r1, [pc, #1060]	; 11784 <__assert_fail@plt+0x454>
   1135c:	mov	r0, #6
   11360:	bl	11258 <setlocale@plt>
   11364:	ldr	r1, [pc, #1052]	; 11788 <__assert_fail@plt+0x458>
   11368:	ldr	r0, [pc, #1052]	; 1178c <__assert_fail@plt+0x45c>
   1136c:	bl	112c4 <bindtextdomain@plt>
   11370:	ldr	r0, [pc, #1044]	; 1178c <__assert_fail@plt+0x45c>
   11374:	bl	110d8 <textdomain@plt>
   11378:	ldr	r8, [pc, #1040]	; 11790 <__assert_fail@plt+0x460>
   1137c:	ldr	r0, [pc, #1040]	; 11794 <__assert_fail@plt+0x464>
   11380:	ldr	r7, [pc, #1040]	; 11798 <__assert_fail@plt+0x468>
   11384:	bl	1dc2c <__assert_fail@plt+0xc8fc>
   11388:	mvn	fp, #0
   1138c:	add	r0, sp, #24
   11390:	mov	sl, #16
   11394:	mov	r9, #1
   11398:	bl	11cc0 <__assert_fail@plt+0x990>
   1139c:	mov	r3, #0
   113a0:	str	r3, [sp, #20]
   113a4:	mov	r4, #0
   113a8:	str	r4, [sp]
   113ac:	mov	r3, r8
   113b0:	mov	r2, r7
   113b4:	mov	r1, r5
   113b8:	mov	r0, r6
   113bc:	bl	11198 <getopt_long@plt>
   113c0:	cmn	r0, #1
   113c4:	beq	114fc <__assert_fail@plt+0x1cc>
   113c8:	cmp	r0, #99	; 0x63
   113cc:	beq	114f4 <__assert_fail@plt+0x1c4>
   113d0:	ble	11400 <__assert_fail@plt+0xd0>
   113d4:	cmp	r0, #256	; 0x100
   113d8:	beq	114ec <__assert_fail@plt+0x1bc>
   113dc:	bgt	1142c <__assert_fail@plt+0xfc>
   113e0:	cmp	r0, #104	; 0x68
   113e4:	beq	114e4 <__assert_fail@plt+0x1b4>
   113e8:	cmp	r0, #118	; 0x76
   113ec:	beq	11474 <__assert_fail@plt+0x144>
   113f0:	cmp	r0, #102	; 0x66
   113f4:	bne	11424 <__assert_fail@plt+0xf4>
   113f8:	strb	r9, [sp, #37]	; 0x25
   113fc:	b	113a4 <__assert_fail@plt+0x74>
   11400:	cmp	r0, #72	; 0x48
   11404:	beq	114dc <__assert_fail@plt+0x1ac>
   11408:	ble	1145c <__assert_fail@plt+0x12c>
   1140c:	cmp	r0, #80	; 0x50
   11410:	beq	114d4 <__assert_fail@plt+0x1a4>
   11414:	cmp	r0, #82	; 0x52
   11418:	beq	114bc <__assert_fail@plt+0x18c>
   1141c:	cmp	r0, #76	; 0x4c
   11420:	beq	114c4 <__assert_fail@plt+0x194>
   11424:	mov	r0, #1
   11428:	bl	11908 <__assert_fail@plt+0x5d8>
   1142c:	ldr	r3, [pc, #872]	; 1179c <__assert_fail@plt+0x46c>
   11430:	cmp	r0, r3
   11434:	beq	114cc <__assert_fail@plt+0x19c>
   11438:	blt	114b4 <__assert_fail@plt+0x184>
   1143c:	add	r3, r3, #1
   11440:	cmp	r0, r3
   11444:	bne	11424 <__assert_fail@plt+0xf4>
   11448:	ldr	r3, [pc, #848]	; 117a0 <__assert_fail@plt+0x470>
   1144c:	ldr	r2, [pc, #848]	; 117a4 <__assert_fail@plt+0x474>
   11450:	ldr	r3, [r3]
   11454:	str	r3, [r2]
   11458:	b	113a4 <__assert_fail@plt+0x74>
   1145c:	cmn	r0, #3
   11460:	beq	1147c <__assert_fail@plt+0x14c>
   11464:	cmn	r0, #2
   11468:	bne	11424 <__assert_fail@plt+0xf4>
   1146c:	mov	r0, r4
   11470:	bl	11908 <__assert_fail@plt+0x5d8>
   11474:	str	r4, [sp, #24]
   11478:	b	113a4 <__assert_fail@plt+0x74>
   1147c:	ldr	r3, [pc, #804]	; 117a8 <__assert_fail@plt+0x478>
   11480:	ldr	r0, [pc, #804]	; 117ac <__assert_fail@plt+0x47c>
   11484:	ldr	r1, [pc, #804]	; 117b0 <__assert_fail@plt+0x480>
   11488:	ldr	r2, [pc, #804]	; 117b4 <__assert_fail@plt+0x484>
   1148c:	str	r4, [sp, #8]
   11490:	ldr	r0, [r0]
   11494:	ldr	r3, [r3]
   11498:	str	r1, [sp, #4]
   1149c:	str	r2, [sp]
   114a0:	ldr	r1, [pc, #784]	; 117b8 <__assert_fail@plt+0x488>
   114a4:	ldr	r2, [pc, #784]	; 117bc <__assert_fail@plt+0x48c>
   114a8:	bl	1b78c <__assert_fail@plt+0xa45c>
   114ac:	mov	r0, r4
   114b0:	bl	111b0 <exit@plt>
   114b4:	str	r4, [sp, #20]
   114b8:	b	113a4 <__assert_fail@plt+0x74>
   114bc:	strb	r9, [sp, #28]
   114c0:	b	113a4 <__assert_fail@plt+0x74>
   114c4:	mov	sl, #2
   114c8:	b	113a4 <__assert_fail@plt+0x74>
   114cc:	str	r9, [sp, #20]
   114d0:	b	113a4 <__assert_fail@plt+0x74>
   114d4:	mov	sl, #16
   114d8:	b	113a4 <__assert_fail@plt+0x74>
   114dc:	mov	sl, #17
   114e0:	b	113a4 <__assert_fail@plt+0x74>
   114e4:	mov	fp, r4
   114e8:	b	113a4 <__assert_fail@plt+0x74>
   114ec:	mov	fp, r9
   114f0:	b	113a4 <__assert_fail@plt+0x74>
   114f4:	str	r9, [sp, #24]
   114f8:	b	113a4 <__assert_fail@plt+0x74>
   114fc:	ldrb	r3, [sp, #28]
   11500:	cmp	r3, r4
   11504:	beq	1156c <__assert_fail@plt+0x23c>
   11508:	cmp	sl, #16
   1150c:	beq	115a8 <__assert_fail@plt+0x278>
   11510:	ldr	r3, [pc, #652]	; 117a4 <__assert_fail@plt+0x474>
   11514:	ldr	r4, [pc, #676]	; 117c0 <__assert_fail@plt+0x490>
   11518:	adds	fp, fp, #0
   1151c:	ldr	r7, [r3]
   11520:	ldr	r3, [r4]
   11524:	movne	fp, #1
   11528:	cmp	r7, #0
   1152c:	strb	fp, [sp, #36]	; 0x24
   11530:	sub	r2, r6, r3
   11534:	beq	1167c <__assert_fail@plt+0x34c>
   11538:	cmp	r2, #0
   1153c:	bgt	115d4 <__assert_fail@plt+0x2a4>
   11540:	cmp	r6, r3
   11544:	mov	r2, #5
   11548:	bgt	11574 <__assert_fail@plt+0x244>
   1154c:	ldr	r1, [pc, #624]	; 117c4 <__assert_fail@plt+0x494>
   11550:	mov	r0, #0
   11554:	bl	110c0 <dcgettext@plt>
   11558:	mov	r1, #0
   1155c:	mov	r2, r0
   11560:	mov	r0, r1
   11564:	bl	11150 <error@plt>
   11568:	b	11424 <__assert_fail@plt+0xf4>
   1156c:	mov	sl, #16
   11570:	b	11510 <__assert_fail@plt+0x1e0>
   11574:	ldr	r1, [pc, #588]	; 117c8 <__assert_fail@plt+0x498>
   11578:	mov	r0, #0
   1157c:	bl	110c0 <dcgettext@plt>
   11580:	sub	r6, r6, #-1073741823	; 0xc0000001
   11584:	mov	r4, r0
   11588:	ldr	r0, [r5, r6, lsl #2]
   1158c:	bl	1ad2c <__assert_fail@plt+0x99fc>
   11590:	mov	r1, #0
   11594:	mov	r2, r4
   11598:	mov	r3, r0
   1159c:	mov	r0, r1
   115a0:	bl	11150 <error@plt>
   115a4:	b	11424 <__assert_fail@plt+0xf4>
   115a8:	cmp	fp, #1
   115ac:	movne	fp, r4
   115b0:	bne	11510 <__assert_fail@plt+0x1e0>
   115b4:	mov	r2, #5
   115b8:	ldr	r1, [pc, #524]	; 117cc <__assert_fail@plt+0x49c>
   115bc:	mov	r0, r4
   115c0:	bl	110c0 <dcgettext@plt>
   115c4:	mov	r1, r4
   115c8:	mov	r2, r0
   115cc:	mov	r0, fp
   115d0:	bl	11150 <error@plt>
   115d4:	add	r2, sp, #48	; 0x30
   115d8:	mov	r1, r7
   115dc:	mov	r0, #3
   115e0:	bl	112d0 <__xstat64@plt>
   115e4:	cmp	r0, #0
   115e8:	beq	11628 <__assert_fail@plt+0x2f8>
   115ec:	bl	111ec <__errno_location@plt>
   115f0:	ldr	r1, [pc, #472]	; 117d0 <__assert_fail@plt+0x4a0>
   115f4:	mov	r2, #5
   115f8:	ldr	r4, [r0]
   115fc:	mov	r0, #0
   11600:	bl	110c0 <dcgettext@plt>
   11604:	mov	r1, r7
   11608:	mov	r5, r0
   1160c:	mov	r0, #4
   11610:	bl	193bc <__assert_fail@plt+0x808c>
   11614:	mov	r2, r5
   11618:	mov	r1, r4
   1161c:	mov	r3, r0
   11620:	mov	r0, #1
   11624:	bl	11150 <error@plt>
   11628:	ldr	r6, [sp, #76]	; 0x4c
   1162c:	mov	r0, r6
   11630:	bl	11d08 <__assert_fail@plt+0x9d8>
   11634:	str	r0, [sp, #44]	; 0x2c
   11638:	ldrb	r3, [sp, #28]
   1163c:	ldr	r2, [sp, #20]
   11640:	tst	r2, r3
   11644:	bne	116cc <__assert_fail@plt+0x39c>
   11648:	ldr	r0, [r4]
   1164c:	mvn	r2, #0
   11650:	add	r3, sp, #24
   11654:	str	r3, [sp, #8]
   11658:	add	r0, r5, r0, lsl #2
   1165c:	mov	r3, r6
   11660:	orr	r1, sl, #1024	; 0x400
   11664:	str	r2, [sp, #4]
   11668:	str	r2, [sp]
   1166c:	bl	11d88 <__assert_fail@plt+0xa58>
   11670:	eor	r0, r0, #1
   11674:	uxtb	r0, r0
   11678:	bl	111b0 <exit@plt>
   1167c:	cmp	r2, #1
   11680:	ble	11540 <__assert_fail@plt+0x210>
   11684:	ldr	r6, [r5, r3, lsl #2]
   11688:	add	r3, r3, #1
   1168c:	str	r3, [r4]
   11690:	ldrb	r3, [r6]
   11694:	cmp	r3, #0
   11698:	bne	11708 <__assert_fail@plt+0x3d8>
   1169c:	str	r7, [sp, #44]	; 0x2c
   116a0:	ldrb	r3, [r6]
   116a4:	cmp	r3, #0
   116a8:	mvneq	r6, #0
   116ac:	beq	11638 <__assert_fail@plt+0x308>
   116b0:	mov	r0, r6
   116b4:	bl	11324 <getgrnam@plt>
   116b8:	subs	r1, r0, #0
   116bc:	beq	11718 <__assert_fail@plt+0x3e8>
   116c0:	ldr	r6, [r1, #8]
   116c4:	bl	11000 <endgrent@plt>
   116c8:	b	11638 <__assert_fail@plt+0x308>
   116cc:	ldr	r0, [pc, #256]	; 117d4 <__assert_fail@plt+0x4a4>
   116d0:	bl	1aeac <__assert_fail@plt+0x9b7c>
   116d4:	cmp	r0, #0
   116d8:	mov	r7, r0
   116dc:	str	r0, [sp, #32]
   116e0:	bne	11648 <__assert_fail@plt+0x318>
   116e4:	bl	111ec <__errno_location@plt>
   116e8:	ldr	r1, [pc, #224]	; 117d0 <__assert_fail@plt+0x4a0>
   116ec:	mov	r2, #5
   116f0:	ldr	r4, [r0]
   116f4:	mov	r0, r7
   116f8:	bl	110c0 <dcgettext@plt>
   116fc:	ldr	r1, [pc, #212]	; 117d8 <__assert_fail@plt+0x4a8>
   11700:	mov	r5, r0
   11704:	b	1160c <__assert_fail@plt+0x2dc>
   11708:	mov	r0, r6
   1170c:	bl	1bf84 <__assert_fail@plt+0xac54>
   11710:	mov	r7, r0
   11714:	b	1169c <__assert_fail@plt+0x36c>
   11718:	ldr	r3, [pc, #100]	; 11784 <__assert_fail@plt+0x454>
   1171c:	mov	r2, #10
   11720:	str	r3, [sp]
   11724:	mov	r0, r6
   11728:	add	r3, sp, #48	; 0x30
   1172c:	bl	1c080 <__assert_fail@plt+0xad50>
   11730:	cmp	r0, #0
   11734:	bne	11754 <__assert_fail@plt+0x424>
   11738:	ldrd	r2, [sp, #48]	; 0x30
   1173c:	mov	r1, #0
   11740:	mvn	r0, #0
   11744:	cmp	r3, r1
   11748:	cmpeq	r2, r0
   1174c:	movls	r6, r2
   11750:	bls	116c4 <__assert_fail@plt+0x394>
   11754:	mov	r2, #5
   11758:	ldr	r1, [pc, #124]	; 117dc <__assert_fail@plt+0x4ac>
   1175c:	mov	r0, #0
   11760:	bl	110c0 <dcgettext@plt>
   11764:	mov	r4, r0
   11768:	mov	r0, r6
   1176c:	bl	1ad2c <__assert_fail@plt+0x99fc>
   11770:	mov	r2, r4
   11774:	mov	r1, #0
   11778:	mov	r3, r0
   1177c:	mov	r0, #1
   11780:	bl	11150 <error@plt>
   11784:	andeq	lr, r1, ip, ror r3
   11788:	andeq	lr, r1, ip, asr r5
   1178c:			; <UNDEFINED> instruction: 0x0001e4b4
   11790:	andeq	sp, r1, r8, lsl #25
   11794:	strdeq	r2, [r1], -r8
   11798:	muleq	r1, r4, r5
   1179c:	andeq	r0, r0, r2, lsl #2
   117a0:	muleq	r3, r8, r1
   117a4:	andeq	r0, r3, r0, lsr #3
   117a8:	andeq	r0, r3, r4, lsr r1
   117ac:	muleq	r3, r4, r1
   117b0:	andeq	lr, r1, r4, ror r5
   117b4:	andeq	lr, r1, r4, lsl #11
   117b8:	andeq	sp, r1, r8, asr sp
   117bc:			; <UNDEFINED> instruction: 0x0001e4b0
   117c0:	andeq	r0, r3, r8, lsl #3
   117c4:	andeq	lr, r1, ip, asr #11
   117c8:	ldrdeq	lr, [r1], -ip
   117cc:	andeq	lr, r1, r0, lsr #11
   117d0:	strdeq	lr, [r1], -r8
   117d4:	andeq	r0, r3, r8, lsr #3
   117d8:	andeq	lr, r1, ip, lsr #12
   117dc:	andeq	lr, r1, r8, lsl r6
   117e0:	mov	fp, #0
   117e4:	mov	lr, #0
   117e8:	pop	{r1}		; (ldr r1, [sp], #4)
   117ec:	mov	r2, sp
   117f0:	push	{r2}		; (str r2, [sp, #-4]!)
   117f4:	push	{r0}		; (str r0, [sp, #-4]!)
   117f8:	ldr	ip, [pc, #16]	; 11810 <__assert_fail@plt+0x4e0>
   117fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11800:	ldr	r0, [pc, #12]	; 11814 <__assert_fail@plt+0x4e4>
   11804:	ldr	r3, [pc, #12]	; 11818 <__assert_fail@plt+0x4e8>
   11808:	bl	11174 <__libc_start_main@plt>
   1180c:	bl	112e8 <abort@plt>
   11810:	andeq	sp, r1, r8, lsr #24
   11814:	andeq	r1, r1, r0, asr #6
   11818:	andeq	sp, r1, r8, asr #23
   1181c:	ldr	r3, [pc, #20]	; 11838 <__assert_fail@plt+0x508>
   11820:	ldr	r2, [pc, #20]	; 1183c <__assert_fail@plt+0x50c>
   11824:	add	r3, pc, r3
   11828:	ldr	r2, [r3, r2]
   1182c:	cmp	r2, #0
   11830:	bxeq	lr
   11834:	b	1118c <__gmon_start__@plt>
   11838:	ldrdeq	lr, [r1], -r4
   1183c:	andeq	r0, r0, r8, lsr #2
   11840:	ldr	r3, [pc, #28]	; 11864 <__assert_fail@plt+0x534>
   11844:	ldr	r0, [pc, #28]	; 11868 <__assert_fail@plt+0x538>
   11848:	sub	r3, r3, r0
   1184c:	cmp	r3, #6
   11850:	bxls	lr
   11854:	ldr	r3, [pc, #16]	; 1186c <__assert_fail@plt+0x53c>
   11858:	cmp	r3, #0
   1185c:	bxeq	lr
   11860:	bx	r3
   11864:	andeq	r0, r3, pc, ror r1
   11868:	andeq	r0, r3, ip, ror r1
   1186c:	andeq	r0, r0, r0
   11870:	ldr	r1, [pc, #36]	; 1189c <__assert_fail@plt+0x56c>
   11874:	ldr	r0, [pc, #36]	; 118a0 <__assert_fail@plt+0x570>
   11878:	sub	r1, r1, r0
   1187c:	asr	r1, r1, #2
   11880:	add	r1, r1, r1, lsr #31
   11884:	asrs	r1, r1, #1
   11888:	bxeq	lr
   1188c:	ldr	r3, [pc, #16]	; 118a4 <__assert_fail@plt+0x574>
   11890:	cmp	r3, #0
   11894:	bxeq	lr
   11898:	bx	r3
   1189c:	andeq	r0, r3, ip, ror r1
   118a0:	andeq	r0, r3, ip, ror r1
   118a4:	andeq	r0, r0, r0
   118a8:	push	{r4, lr}
   118ac:	ldr	r4, [pc, #24]	; 118cc <__assert_fail@plt+0x59c>
   118b0:	ldrb	r3, [r4]
   118b4:	cmp	r3, #0
   118b8:	popne	{r4, pc}
   118bc:	bl	11840 <__assert_fail@plt+0x510>
   118c0:	mov	r3, #1
   118c4:	strb	r3, [r4]
   118c8:	pop	{r4, pc}
   118cc:	muleq	r3, ip, r1
   118d0:	ldr	r0, [pc, #40]	; 11900 <__assert_fail@plt+0x5d0>
   118d4:	ldr	r3, [r0]
   118d8:	cmp	r3, #0
   118dc:	bne	118e4 <__assert_fail@plt+0x5b4>
   118e0:	b	11870 <__assert_fail@plt+0x540>
   118e4:	ldr	r3, [pc, #24]	; 11904 <__assert_fail@plt+0x5d4>
   118e8:	cmp	r3, #0
   118ec:	beq	118e0 <__assert_fail@plt+0x5b0>
   118f0:	push	{r4, lr}
   118f4:	blx	r3
   118f8:	pop	{r4, lr}
   118fc:	b	11870 <__assert_fail@plt+0x540>
   11900:	andeq	pc, r2, r4, lsl pc	; <UNPREDICTABLE>
   11904:	andeq	r0, r0, r0
   11908:	subs	r5, r0, #0
   1190c:	push	{r7, lr}
   11910:	sub	sp, sp, #56	; 0x38
   11914:	beq	11950 <__assert_fail@plt+0x620>
   11918:	ldr	r3, [pc, #820]	; 11c54 <__assert_fail@plt+0x924>
   1191c:	mov	r2, #5
   11920:	ldr	r1, [pc, #816]	; 11c58 <__assert_fail@plt+0x928>
   11924:	mov	r0, #0
   11928:	ldr	r4, [r3]
   1192c:	bl	110c0 <dcgettext@plt>
   11930:	ldr	r3, [pc, #804]	; 11c5c <__assert_fail@plt+0x92c>
   11934:	mov	r1, #1
   11938:	ldr	r3, [r3]
   1193c:	mov	r2, r0
   11940:	mov	r0, r4
   11944:	bl	11228 <__fprintf_chk@plt>
   11948:	mov	r0, r5
   1194c:	bl	111b0 <exit@plt>
   11950:	mov	r2, #5
   11954:	ldr	r1, [pc, #772]	; 11c60 <__assert_fail@plt+0x930>
   11958:	bl	110c0 <dcgettext@plt>
   1195c:	ldr	r4, [pc, #760]	; 11c5c <__assert_fail@plt+0x92c>
   11960:	ldr	r7, [pc, #764]	; 11c64 <__assert_fail@plt+0x934>
   11964:	ldr	r3, [r4]
   11968:	mov	r2, r3
   1196c:	mov	r1, r0
   11970:	mov	r0, #1
   11974:	bl	11210 <__printf_chk@plt>
   11978:	mov	r2, #5
   1197c:	ldr	r1, [pc, #740]	; 11c68 <__assert_fail@plt+0x938>
   11980:	mov	r0, r5
   11984:	bl	110c0 <dcgettext@plt>
   11988:	ldr	r1, [r7]
   1198c:	bl	1100c <fputs_unlocked@plt>
   11990:	mov	r2, #5
   11994:	ldr	r1, [pc, #720]	; 11c6c <__assert_fail@plt+0x93c>
   11998:	mov	r0, r5
   1199c:	bl	110c0 <dcgettext@plt>
   119a0:	ldr	r1, [r7]
   119a4:	bl	1100c <fputs_unlocked@plt>
   119a8:	mov	r2, #5
   119ac:	ldr	r1, [pc, #700]	; 11c70 <__assert_fail@plt+0x940>
   119b0:	mov	r0, r5
   119b4:	bl	110c0 <dcgettext@plt>
   119b8:	ldr	r1, [r7]
   119bc:	bl	1100c <fputs_unlocked@plt>
   119c0:	mov	r2, #5
   119c4:	ldr	r1, [pc, #680]	; 11c74 <__assert_fail@plt+0x944>
   119c8:	mov	r0, r5
   119cc:	bl	110c0 <dcgettext@plt>
   119d0:	ldr	r1, [r7]
   119d4:	bl	1100c <fputs_unlocked@plt>
   119d8:	mov	r2, #5
   119dc:	ldr	r1, [pc, #660]	; 11c78 <__assert_fail@plt+0x948>
   119e0:	mov	r0, r5
   119e4:	bl	110c0 <dcgettext@plt>
   119e8:	ldr	r1, [r7]
   119ec:	bl	1100c <fputs_unlocked@plt>
   119f0:	mov	r2, #5
   119f4:	ldr	r1, [pc, #640]	; 11c7c <__assert_fail@plt+0x94c>
   119f8:	mov	r0, r5
   119fc:	bl	110c0 <dcgettext@plt>
   11a00:	ldr	r1, [r7]
   11a04:	bl	1100c <fputs_unlocked@plt>
   11a08:	mov	r2, #5
   11a0c:	ldr	r1, [pc, #620]	; 11c80 <__assert_fail@plt+0x950>
   11a10:	mov	r0, r5
   11a14:	bl	110c0 <dcgettext@plt>
   11a18:	ldr	r1, [r7]
   11a1c:	bl	1100c <fputs_unlocked@plt>
   11a20:	mov	r2, #5
   11a24:	ldr	r1, [pc, #600]	; 11c84 <__assert_fail@plt+0x954>
   11a28:	mov	r0, r5
   11a2c:	bl	110c0 <dcgettext@plt>
   11a30:	ldr	r1, [r7]
   11a34:	bl	1100c <fputs_unlocked@plt>
   11a38:	mov	r2, #5
   11a3c:	ldr	r1, [pc, #580]	; 11c88 <__assert_fail@plt+0x958>
   11a40:	mov	r0, r5
   11a44:	bl	110c0 <dcgettext@plt>
   11a48:	ldr	r1, [r7]
   11a4c:	bl	1100c <fputs_unlocked@plt>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #560]	; 11c8c <__assert_fail@plt+0x95c>
   11a58:	mov	r0, r5
   11a5c:	bl	110c0 <dcgettext@plt>
   11a60:	ldr	r1, [r7]
   11a64:	bl	1100c <fputs_unlocked@plt>
   11a68:	mov	r2, #5
   11a6c:	ldr	r1, [pc, #540]	; 11c90 <__assert_fail@plt+0x960>
   11a70:	mov	r0, r5
   11a74:	bl	110c0 <dcgettext@plt>
   11a78:	ldr	r3, [r4]
   11a7c:	ldr	r4, [pc, #528]	; 11c94 <__assert_fail@plt+0x964>
   11a80:	mov	r2, r3
   11a84:	mov	r1, r0
   11a88:	mov	r0, #1
   11a8c:	bl	11210 <__printf_chk@plt>
   11a90:	ldm	r4!, {r0, r1, r2, r3}
   11a94:	mov	lr, sp
   11a98:	stmia	lr!, {r0, r1, r2, r3}
   11a9c:	ldm	r4!, {r0, r1, r2, r3}
   11aa0:	ldr	ip, [sp]
   11aa4:	stmia	lr!, {r0, r1, r2, r3}
   11aa8:	cmp	ip, #0
   11aac:	ldm	r4!, {r0, r1, r2, r3}
   11ab0:	stmia	lr!, {r0, r1, r2, r3}
   11ab4:	ldm	r4, {r0, r1}
   11ab8:	moveq	r4, sp
   11abc:	stm	lr, {r0, r1}
   11ac0:	beq	11af0 <__assert_fail@plt+0x7c0>
   11ac4:	ldr	r6, [pc, #460]	; 11c98 <__assert_fail@plt+0x968>
   11ac8:	mov	r4, sp
   11acc:	b	11adc <__assert_fail@plt+0x7ac>
   11ad0:	ldr	ip, [r4, #8]!
   11ad4:	cmp	ip, #0
   11ad8:	beq	11af0 <__assert_fail@plt+0x7c0>
   11adc:	mov	r1, ip
   11ae0:	mov	r0, r6
   11ae4:	bl	11024 <strcmp@plt>
   11ae8:	cmp	r0, #0
   11aec:	bne	11ad0 <__assert_fail@plt+0x7a0>
   11af0:	ldr	r4, [r4, #4]
   11af4:	mov	r2, #5
   11af8:	cmp	r4, #0
   11afc:	ldr	r1, [pc, #408]	; 11c9c <__assert_fail@plt+0x96c>
   11b00:	beq	11ba8 <__assert_fail@plt+0x878>
   11b04:	mov	r0, #0
   11b08:	bl	110c0 <dcgettext@plt>
   11b0c:	ldr	r3, [pc, #396]	; 11ca0 <__assert_fail@plt+0x970>
   11b10:	ldr	r2, [pc, #396]	; 11ca4 <__assert_fail@plt+0x974>
   11b14:	mov	r1, r0
   11b18:	mov	r0, #1
   11b1c:	bl	11210 <__printf_chk@plt>
   11b20:	mov	r1, #0
   11b24:	mov	r0, #5
   11b28:	bl	11258 <setlocale@plt>
   11b2c:	cmp	r0, #0
   11b30:	ldreq	r6, [pc, #352]	; 11c98 <__assert_fail@plt+0x968>
   11b34:	beq	11b50 <__assert_fail@plt+0x820>
   11b38:	mov	r2, #3
   11b3c:	ldr	r1, [pc, #356]	; 11ca8 <__assert_fail@plt+0x978>
   11b40:	bl	112dc <strncmp@plt>
   11b44:	ldr	r6, [pc, #332]	; 11c98 <__assert_fail@plt+0x968>
   11b48:	cmp	r0, #0
   11b4c:	bne	11c38 <__assert_fail@plt+0x908>
   11b50:	mov	r2, #5
   11b54:	ldr	r1, [pc, #336]	; 11cac <__assert_fail@plt+0x97c>
   11b58:	mov	r0, #0
   11b5c:	bl	110c0 <dcgettext@plt>
   11b60:	ldr	r3, [pc, #304]	; 11c98 <__assert_fail@plt+0x968>
   11b64:	ldr	r2, [pc, #308]	; 11ca0 <__assert_fail@plt+0x970>
   11b68:	mov	r1, r0
   11b6c:	mov	r0, #1
   11b70:	bl	11210 <__printf_chk@plt>
   11b74:	mov	r2, #5
   11b78:	ldr	r1, [pc, #304]	; 11cb0 <__assert_fail@plt+0x980>
   11b7c:	mov	r0, #0
   11b80:	bl	110c0 <dcgettext@plt>
   11b84:	ldr	r2, [pc, #296]	; 11cb4 <__assert_fail@plt+0x984>
   11b88:	cmp	r4, r6
   11b8c:	ldr	r3, [pc, #292]	; 11cb8 <__assert_fail@plt+0x988>
   11b90:	movne	r3, r2
   11b94:	mov	r1, r0
   11b98:	mov	r2, r4
   11b9c:	mov	r0, #1
   11ba0:	bl	11210 <__printf_chk@plt>
   11ba4:	b	11948 <__assert_fail@plt+0x618>
   11ba8:	mov	r0, r4
   11bac:	bl	110c0 <dcgettext@plt>
   11bb0:	ldr	r3, [pc, #232]	; 11ca0 <__assert_fail@plt+0x970>
   11bb4:	ldr	r2, [pc, #232]	; 11ca4 <__assert_fail@plt+0x974>
   11bb8:	mov	r1, r0
   11bbc:	mov	r0, #1
   11bc0:	bl	11210 <__printf_chk@plt>
   11bc4:	mov	r1, r4
   11bc8:	mov	r0, #5
   11bcc:	bl	11258 <setlocale@plt>
   11bd0:	cmp	r0, #0
   11bd4:	beq	11bec <__assert_fail@plt+0x8bc>
   11bd8:	mov	r2, #3
   11bdc:	ldr	r1, [pc, #196]	; 11ca8 <__assert_fail@plt+0x978>
   11be0:	bl	112dc <strncmp@plt>
   11be4:	cmp	r0, #0
   11be8:	bne	11c30 <__assert_fail@plt+0x900>
   11bec:	mov	r2, #5
   11bf0:	ldr	r1, [pc, #180]	; 11cac <__assert_fail@plt+0x97c>
   11bf4:	mov	r0, #0
   11bf8:	bl	110c0 <dcgettext@plt>
   11bfc:	ldr	r3, [pc, #148]	; 11c98 <__assert_fail@plt+0x968>
   11c00:	ldr	r2, [pc, #152]	; 11ca0 <__assert_fail@plt+0x970>
   11c04:	mov	r4, r3
   11c08:	mov	r1, r0
   11c0c:	mov	r0, #1
   11c10:	bl	11210 <__printf_chk@plt>
   11c14:	ldr	r1, [pc, #148]	; 11cb0 <__assert_fail@plt+0x980>
   11c18:	mov	r2, #5
   11c1c:	mov	r0, #0
   11c20:	bl	110c0 <dcgettext@plt>
   11c24:	ldr	r3, [pc, #140]	; 11cb8 <__assert_fail@plt+0x988>
   11c28:	mov	r1, r0
   11c2c:	b	11b98 <__assert_fail@plt+0x868>
   11c30:	ldr	r6, [pc, #96]	; 11c98 <__assert_fail@plt+0x968>
   11c34:	mov	r4, r6
   11c38:	mov	r2, #5
   11c3c:	ldr	r1, [pc, #120]	; 11cbc <__assert_fail@plt+0x98c>
   11c40:	mov	r0, #0
   11c44:	bl	110c0 <dcgettext@plt>
   11c48:	ldr	r1, [r7]
   11c4c:	bl	1100c <fputs_unlocked@plt>
   11c50:	b	11b50 <__assert_fail@plt+0x820>
   11c54:	muleq	r3, r0, r1
   11c58:	andeq	sp, r1, r0, ror #26
   11c5c:	andeq	r0, r3, r0, asr #3
   11c60:	andeq	sp, r1, r8, lsl #27
   11c64:	muleq	r3, r4, r1
   11c68:	andeq	sp, r1, r0, ror #27
   11c6c:	andeq	sp, r1, ip, asr #28
   11c70:	andeq	sp, r1, r8, lsl pc
   11c74:	andeq	lr, r1, r0
   11c78:	andeq	lr, r1, r8, ror r0
   11c7c:	strdeq	lr, [r1], -r8
   11c80:	andeq	lr, r1, r4, ror #2
   11c84:	andeq	lr, r1, ip, lsr #3
   11c88:	andeq	lr, r1, r0, lsl #7
   11c8c:			; <UNDEFINED> instruction: 0x0001e3b0
   11c90:	andeq	lr, r1, r8, ror #7
   11c94:	andeq	sp, r1, r0, asr ip
   11c98:	andeq	sp, r1, r8, asr sp
   11c9c:	andeq	lr, r1, r0, ror r4
   11ca0:	andeq	lr, r1, r8, lsl #9
   11ca4:			; <UNDEFINED> instruction: 0x0001e4b0
   11ca8:	andeq	lr, r1, r0, asr #9
   11cac:	andeq	lr, r1, ip, lsl #10
   11cb0:	andeq	lr, r1, r8, lsr #10
   11cb4:	andeq	lr, r1, ip, ror r3
   11cb8:	andeq	lr, r1, r8, lsr r6
   11cbc:	andeq	lr, r1, r4, asr #9
   11cc0:	mov	r3, #0
   11cc4:	mov	r1, #2
   11cc8:	mov	r2, #1
   11ccc:	str	r1, [r0]
   11cd0:	strb	r2, [r0, #12]
   11cd4:	str	r3, [r0, #8]
   11cd8:	strb	r3, [r0, #4]
   11cdc:	strb	r3, [r0, #13]
   11ce0:	str	r3, [r0, #16]
   11ce4:	str	r3, [r0, #20]
   11ce8:	bx	lr
   11cec:	push	{r4, lr}
   11cf0:	mov	r4, r0
   11cf4:	ldr	r0, [r0, #16]
   11cf8:	bl	12cdc <__assert_fail@plt+0x19ac>
   11cfc:	ldr	r0, [r4, #20]
   11d00:	pop	{r4, lr}
   11d04:	b	12cdc <__assert_fail@plt+0x19ac>
   11d08:	push	{r4, lr}
   11d0c:	sub	sp, sp, #24
   11d10:	mov	r4, r0
   11d14:	bl	11318 <getgrgid@plt>
   11d18:	subs	r1, r0, #0
   11d1c:	beq	11d30 <__assert_fail@plt+0xa00>
   11d20:	ldr	r0, [r1]
   11d24:	bl	1bf84 <__assert_fail@plt+0xac54>
   11d28:	add	sp, sp, #24
   11d2c:	pop	{r4, pc}
   11d30:	mov	r2, sp
   11d34:	mov	r0, r4
   11d38:	bl	16d6c <__assert_fail@plt+0x5a3c>
   11d3c:	bl	1bf84 <__assert_fail@plt+0xac54>
   11d40:	add	sp, sp, #24
   11d44:	pop	{r4, pc}
   11d48:	push	{r4, lr}
   11d4c:	sub	sp, sp, #24
   11d50:	mov	r4, r0
   11d54:	bl	11030 <getpwuid@plt>
   11d58:	subs	r1, r0, #0
   11d5c:	beq	11d70 <__assert_fail@plt+0xa40>
   11d60:	ldr	r0, [r1]
   11d64:	bl	1bf84 <__assert_fail@plt+0xac54>
   11d68:	add	sp, sp, #24
   11d6c:	pop	{r4, pc}
   11d70:	mov	r2, sp
   11d74:	mov	r0, r4
   11d78:	bl	16d6c <__assert_fail@plt+0x5a3c>
   11d7c:	bl	1bf84 <__assert_fail@plt+0xac54>
   11d80:	add	sp, sp, #24
   11d84:	pop	{r4, pc}
   11d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d8c:	sub	sp, sp, #252	; 0xfc
   11d90:	ldr	ip, [sp, #292]	; 0x124
   11d94:	ldr	lr, [sp, #288]	; 0x120
   11d98:	str	r2, [sp, #20]
   11d9c:	cmn	lr, #1
   11da0:	cmneq	ip, #1
   11da4:	movne	ip, #1
   11da8:	moveq	ip, #0
   11dac:	str	r3, [sp, #32]
   11db0:	ldr	fp, [sp, #296]	; 0x128
   11db4:	movne	ip, #0
   11db8:	bne	11dc8 <__assert_fail@plt+0xa98>
   11dbc:	ldrb	r3, [fp, #12]
   11dc0:	cmp	r3, #0
   11dc4:	beq	122d0 <__assert_fail@plt+0xfa0>
   11dc8:	mov	r2, #0
   11dcc:	orr	r1, ip, r1
   11dd0:	bl	1bffc <__assert_fail@plt+0xaccc>
   11dd4:	ldr	r3, [sp, #292]	; 0x124
   11dd8:	ldr	r2, [sp, #288]	; 0x120
   11ddc:	cmn	r3, #1
   11de0:	cmneq	r2, #1
   11de4:	moveq	r3, #1
   11de8:	movne	r3, #0
   11dec:	str	r3, [sp, #16]
   11df0:	mov	r3, #1
   11df4:	str	r3, [sp, #8]
   11df8:	mov	sl, r0
   11dfc:	mov	r0, sl
   11e00:	bl	1489c <__assert_fail@plt+0x356c>
   11e04:	subs	r6, r0, #0
   11e08:	beq	11eac <__assert_fail@plt+0xb7c>
   11e0c:	ldrh	r9, [r6, #56]	; 0x38
   11e10:	ldr	r3, [r6, #28]
   11e14:	sub	r7, r9, #1
   11e18:	str	r3, [sp, #12]
   11e1c:	cmp	r7, #9
   11e20:	ldrls	pc, [pc, r7, lsl #2]
   11e24:	b	11fc4 <__assert_fail@plt+0xc94>
   11e28:	andeq	r2, r1, r4, lsl #4
   11e2c:			; <UNDEFINED> instruction: 0x00011fb0
   11e30:	andeq	r1, r1, r4, asr #31
   11e34:	andeq	r1, r1, r8, ror #30
   11e38:	andeq	r1, r1, r4, asr #31
   11e3c:	andeq	r1, r1, r8, asr pc
   11e40:	andeq	r1, r1, r0, lsr #30
   11e44:	andeq	r1, r1, r4, asr #31
   11e48:	andeq	r1, r1, r4, asr #31
   11e4c:	andeq	r1, r1, r0, asr lr
   11e50:	ldr	r3, [r6, #48]	; 0x30
   11e54:	cmp	r3, #0
   11e58:	bne	11e68 <__assert_fail@plt+0xb38>
   11e5c:	ldr	r3, [r6, #16]
   11e60:	cmp	r3, #0
   11e64:	beq	12658 <__assert_fail@plt+0x1328>
   11e68:	ldrb	r4, [fp, #13]
   11e6c:	cmp	r4, #0
   11e70:	beq	1264c <__assert_fail@plt+0x131c>
   11e74:	ldr	r7, [fp]
   11e78:	cmp	r7, #2
   11e7c:	bne	12b4c <__assert_fail@plt+0x181c>
   11e80:	mov	r7, #0
   11e84:	ldrb	r3, [fp, #4]
   11e88:	cmp	r3, #0
   11e8c:	beq	121e4 <__assert_fail@plt+0xeb4>
   11e90:	ldr	r3, [sp, #8]
   11e94:	mov	r0, sl
   11e98:	and	r3, r3, r7
   11e9c:	str	r3, [sp, #8]
   11ea0:	bl	1489c <__assert_fail@plt+0x356c>
   11ea4:	subs	r6, r0, #0
   11ea8:	bne	11e0c <__assert_fail@plt+0xadc>
   11eac:	bl	111ec <__errno_location@plt>
   11eb0:	mov	r5, r6
   11eb4:	ldr	r6, [r0]
   11eb8:	mov	r4, r0
   11ebc:	cmp	r6, #0
   11ec0:	beq	11ed8 <__assert_fail@plt+0xba8>
   11ec4:	ldrb	r3, [fp, #13]
   11ec8:	cmp	r3, #0
   11ecc:	str	r3, [sp, #8]
   11ed0:	strne	r5, [sp, #8]
   11ed4:	beq	12670 <__assert_fail@plt+0x1340>
   11ed8:	mov	r0, sl
   11edc:	bl	146d4 <__assert_fail@plt+0x33a4>
   11ee0:	cmp	r0, #0
   11ee4:	beq	11f14 <__assert_fail@plt+0xbe4>
   11ee8:	mov	r2, #5
   11eec:	ldr	r1, [pc, #3192]	; 12b6c <__assert_fail@plt+0x183c>
   11ef0:	mov	r0, #0
   11ef4:	ldr	r4, [r4]
   11ef8:	bl	110c0 <dcgettext@plt>
   11efc:	mov	r1, r4
   11f00:	mov	r2, r0
   11f04:	mov	r0, #0
   11f08:	bl	11150 <error@plt>
   11f0c:	mov	r3, #0
   11f10:	str	r3, [sp, #8]
   11f14:	ldr	r0, [sp, #8]
   11f18:	add	sp, sp, #252	; 0xfc
   11f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f20:	ldrb	r4, [fp, #13]
   11f24:	cmp	r4, #0
   11f28:	bne	11e74 <__assert_fail@plt+0xb44>
   11f2c:	mov	r2, r3
   11f30:	mov	r1, #3
   11f34:	mov	r0, r4
   11f38:	ldr	r5, [r6, #32]
   11f3c:	bl	19e38 <__assert_fail@plt+0x8b08>
   11f40:	mov	r1, r5
   11f44:	ldr	r2, [pc, #3108]	; 12b70 <__assert_fail@plt+0x1840>
   11f48:	mov	r3, r0
   11f4c:	mov	r0, r4
   11f50:	bl	11150 <error@plt>
   11f54:	b	11e74 <__assert_fail@plt+0xb44>
   11f58:	ldrb	r3, [fp, #4]
   11f5c:	cmp	r3, #0
   11f60:	bne	11fc4 <__assert_fail@plt+0xc94>
   11f64:	b	11dfc <__assert_fail@plt+0xacc>
   11f68:	ldrb	r4, [fp, #13]
   11f6c:	cmp	r4, #0
   11f70:	bne	11e74 <__assert_fail@plt+0xb44>
   11f74:	ldr	r1, [pc, #3064]	; 12b74 <__assert_fail@plt+0x1844>
   11f78:	mov	r2, #5
   11f7c:	mov	r0, r4
   11f80:	ldr	r5, [r6, #32]
   11f84:	bl	110c0 <dcgettext@plt>
   11f88:	ldr	r1, [sp, #12]
   11f8c:	mov	r7, r0
   11f90:	mov	r0, #4
   11f94:	bl	193bc <__assert_fail@plt+0x808c>
   11f98:	mov	r2, r7
   11f9c:	mov	r1, r5
   11fa0:	mov	r3, r0
   11fa4:	mov	r0, r4
   11fa8:	bl	11150 <error@plt>
   11fac:	b	11e74 <__assert_fail@plt+0xb44>
   11fb0:	mov	r1, r6
   11fb4:	mov	r0, sl
   11fb8:	bl	1c044 <__assert_fail@plt+0xad14>
   11fbc:	cmp	r0, #0
   11fc0:	bne	126c4 <__assert_fail@plt+0x1394>
   11fc4:	ldr	r3, [sp, #16]
   11fc8:	ldr	r8, [r6, #24]
   11fcc:	cmp	r3, #0
   11fd0:	beq	11fe0 <__assert_fail@plt+0xcb0>
   11fd4:	ldr	r3, [fp]
   11fd8:	cmp	r3, #2
   11fdc:	beq	125f4 <__assert_fail@plt+0x12c4>
   11fe0:	ldrb	r4, [fp, #12]
   11fe4:	add	r5, r6, #64	; 0x40
   11fe8:	cmp	r4, #0
   11fec:	beq	12000 <__assert_fail@plt+0xcd0>
   11ff0:	ldr	r3, [r6, #80]	; 0x50
   11ff4:	and	r3, r3, #61440	; 0xf000
   11ff8:	cmp	r3, #40960	; 0xa000
   11ffc:	beq	12730 <__assert_fail@plt+0x1400>
   12000:	ldr	r3, [sp, #288]	; 0x120
   12004:	cmn	r3, #1
   12008:	beq	122e4 <__assert_fail@plt+0xfb4>
   1200c:	mov	r2, r3
   12010:	ldr	r3, [r5, #24]
   12014:	cmp	r2, r3
   12018:	beq	122e4 <__assert_fail@plt+0xfb4>
   1201c:	uxth	r7, r7
   12020:	bic	r9, r9, #2
   12024:	cmp	r9, #4
   12028:	cmpne	r7, #1
   1202c:	movls	r7, #1
   12030:	movhi	r7, #0
   12034:	bls	12b34 <__assert_fail@plt+0x1804>
   12038:	mov	r4, #1
   1203c:	mov	r7, r4
   12040:	ldr	r3, [fp]
   12044:	cmp	r3, #2
   12048:	beq	11e84 <__assert_fail@plt+0xb54>
   1204c:	cmp	r3, #0
   12050:	bne	11e84 <__assert_fail@plt+0xb54>
   12054:	cmp	r7, #0
   12058:	moveq	r8, #3
   1205c:	beq	12070 <__assert_fail@plt+0xd40>
   12060:	cmp	r4, #0
   12064:	bne	126b8 <__assert_fail@plt+0x1388>
   12068:	mov	r7, #1
   1206c:	mov	r8, r7
   12070:	ldr	r4, [r5, #24]
   12074:	mov	r0, r4
   12078:	bl	11030 <getpwuid@plt>
   1207c:	subs	r1, r0, #0
   12080:	beq	12718 <__assert_fail@plt+0x13e8>
   12084:	ldr	r0, [r1]
   12088:	bl	1bf84 <__assert_fail@plt+0xac54>
   1208c:	ldr	r4, [r5, #28]
   12090:	mov	r9, r0
   12094:	mov	r0, r4
   12098:	bl	11318 <getgrgid@plt>
   1209c:	subs	r1, r0, #0
   120a0:	beq	12708 <__assert_fail@plt+0x13d8>
   120a4:	ldr	r0, [r1]
   120a8:	bl	1bf84 <__assert_fail@plt+0xac54>
   120ac:	cmp	r8, #1
   120b0:	mov	r4, r0
   120b4:	beq	12508 <__assert_fail@plt+0x11d8>
   120b8:	ldr	r3, [fp, #16]
   120bc:	ldr	r5, [fp, #20]
   120c0:	cmp	r3, #0
   120c4:	beq	1258c <__assert_fail@plt+0x125c>
   120c8:	cmp	r5, #0
   120cc:	mov	r0, r3
   120d0:	beq	1262c <__assert_fail@plt+0x12fc>
   120d4:	str	r3, [sp, #28]
   120d8:	bl	111bc <strlen@plt>
   120dc:	str	r0, [sp, #24]
   120e0:	mov	r0, r5
   120e4:	bl	111bc <strlen@plt>
   120e8:	ldr	r2, [sp, #24]
   120ec:	add	r0, r2, r0
   120f0:	add	r0, r0, #2
   120f4:	bl	1b974 <__assert_fail@plt+0xa644>
   120f8:	ldr	r3, [sp, #28]
   120fc:	mov	r1, r3
   12100:	str	r0, [sp, #24]
   12104:	bl	110a8 <stpcpy@plt>
   12108:	mov	r3, #58	; 0x3a
   1210c:	mov	r1, r5
   12110:	strb	r3, [r0], #1
   12114:	bl	1112c <strcpy@plt>
   12118:	cmp	r9, #0
   1211c:	ldr	r3, [sp, #28]
   12120:	beq	125a8 <__assert_fail@plt+0x1278>
   12124:	cmp	r4, #0
   12128:	beq	1263c <__assert_fail@plt+0x130c>
   1212c:	mov	r0, r9
   12130:	bl	111bc <strlen@plt>
   12134:	mov	r5, r0
   12138:	mov	r0, r4
   1213c:	bl	111bc <strlen@plt>
   12140:	add	r0, r5, r0
   12144:	add	r0, r0, #2
   12148:	bl	1b974 <__assert_fail@plt+0xa644>
   1214c:	mov	r1, r9
   12150:	str	r0, [sp, #28]
   12154:	bl	110a8 <stpcpy@plt>
   12158:	mov	r3, #58	; 0x3a
   1215c:	mov	r1, r4
   12160:	strb	r3, [r0], #1
   12164:	bl	1112c <strcpy@plt>
   12168:	cmp	r8, #3
   1216c:	beq	12614 <__assert_fail@plt+0x12e4>
   12170:	cmp	r8, #4
   12174:	bne	125dc <__assert_fail@plt+0x12ac>
   12178:	mov	r2, #5
   1217c:	ldr	r1, [pc, #2548]	; 12b78 <__assert_fail@plt+0x1848>
   12180:	mov	r0, #0
   12184:	bl	110c0 <dcgettext@plt>
   12188:	mov	r5, r0
   1218c:	ldr	r1, [sp, #12]
   12190:	mov	r0, #4
   12194:	bl	193bc <__assert_fail@plt+0x808c>
   12198:	ldr	r8, [sp, #24]
   1219c:	mov	r1, r5
   121a0:	ldr	r5, [sp, #28]
   121a4:	str	r8, [sp]
   121a8:	mov	r3, r5
   121ac:	mov	r2, r0
   121b0:	mov	r0, #1
   121b4:	bl	11210 <__printf_chk@plt>
   121b8:	mov	r0, r5
   121bc:	bl	12cdc <__assert_fail@plt+0x19ac>
   121c0:	mov	r0, r8
   121c4:	bl	12cdc <__assert_fail@plt+0x19ac>
   121c8:	mov	r0, r9
   121cc:	bl	12cdc <__assert_fail@plt+0x19ac>
   121d0:	mov	r0, r4
   121d4:	bl	12cdc <__assert_fail@plt+0x19ac>
   121d8:	ldrb	r3, [fp, #4]
   121dc:	cmp	r3, #0
   121e0:	bne	11e90 <__assert_fail@plt+0xb60>
   121e4:	ldr	r3, [sp, #8]
   121e8:	mov	r1, r6
   121ec:	and	r3, r3, r7
   121f0:	mov	r2, #4
   121f4:	mov	r0, sl
   121f8:	str	r3, [sp, #8]
   121fc:	bl	151f4 <__assert_fail@plt+0x3ec4>
   12200:	b	11dfc <__assert_fail@plt+0xacc>
   12204:	ldrb	r3, [fp, #4]
   12208:	cmp	r3, #0
   1220c:	beq	11fc4 <__assert_fail@plt+0xc94>
   12210:	ldr	ip, [fp, #8]
   12214:	cmp	ip, #0
   12218:	beq	11dfc <__assert_fail@plt+0xacc>
   1221c:	ldrd	r0, [r6, #160]	; 0xa0
   12220:	ldrd	r2, [ip]
   12224:	cmp	r1, r3
   12228:	cmpeq	r0, r2
   1222c:	bne	11dfc <__assert_fail@plt+0xacc>
   12230:	ldrd	r2, [r6, #64]	; 0x40
   12234:	ldrd	r0, [ip, #8]
   12238:	cmp	r3, r1
   1223c:	cmpeq	r2, r0
   12240:	bne	11dfc <__assert_fail@plt+0xacc>
   12244:	ldr	r7, [sp, #12]
   12248:	ldr	r1, [pc, #2348]	; 12b7c <__assert_fail@plt+0x184c>
   1224c:	mov	r0, r7
   12250:	bl	11024 <strcmp@plt>
   12254:	mov	r2, #5
   12258:	subs	r4, r0, #0
   1225c:	bne	12994 <__assert_fail@plt+0x1664>
   12260:	ldr	r1, [pc, #2328]	; 12b80 <__assert_fail@plt+0x1850>
   12264:	bl	110c0 <dcgettext@plt>
   12268:	mov	r1, r7
   1226c:	mov	r5, r0
   12270:	mov	r0, #4
   12274:	bl	193bc <__assert_fail@plt+0x808c>
   12278:	mov	r2, r5
   1227c:	mov	r1, r4
   12280:	mov	r3, r0
   12284:	mov	r0, r4
   12288:	bl	11150 <error@plt>
   1228c:	mov	r2, #5
   12290:	ldr	r1, [pc, #2284]	; 12b84 <__assert_fail@plt+0x1854>
   12294:	mov	r0, #0
   12298:	bl	110c0 <dcgettext@plt>
   1229c:	mov	r1, #0
   122a0:	mov	r2, r0
   122a4:	mov	r0, r1
   122a8:	bl	11150 <error@plt>
   122ac:	mov	r1, r6
   122b0:	mov	r2, #4
   122b4:	mov	r0, sl
   122b8:	bl	151f4 <__assert_fail@plt+0x3ec4>
   122bc:	mov	r0, sl
   122c0:	bl	1489c <__assert_fail@plt+0x356c>
   122c4:	mov	r3, #0
   122c8:	str	r3, [sp, #8]
   122cc:	b	11dfc <__assert_fail@plt+0xacc>
   122d0:	ldr	r3, [fp]
   122d4:	cmp	r3, #2
   122d8:	moveq	ip, #8
   122dc:	movne	ip, #0
   122e0:	b	11dc8 <__assert_fail@plt+0xa98>
   122e4:	ldr	r3, [sp, #292]	; 0x124
   122e8:	cmn	r3, #1
   122ec:	beq	12764 <__assert_fail@plt+0x1434>
   122f0:	ldr	ip, [r5, #28]
   122f4:	uxth	r7, r7
   122f8:	bic	r9, r9, #2
   122fc:	cmp	r9, #4
   12300:	cmpne	r7, #1
   12304:	sub	ip, ip, r3
   12308:	clz	ip, ip
   1230c:	lsr	ip, ip, #5
   12310:	bls	123d0 <__assert_fail@plt+0x10a0>
   12314:	cmp	ip, #0
   12318:	beq	12038 <__assert_fail@plt+0xd08>
   1231c:	ldrb	r4, [fp, #12]
   12320:	cmp	r4, #0
   12324:	bne	12498 <__assert_fail@plt+0x1168>
   12328:	mov	r3, #256	; 0x100
   1232c:	str	r3, [sp]
   12330:	ldr	r0, [sl, #32]
   12334:	mov	r1, r8
   12338:	ldr	r3, [sp, #32]
   1233c:	ldr	r2, [sp, #20]
   12340:	bl	112b8 <fchownat@plt>
   12344:	cmp	r0, #0
   12348:	moveq	r7, #1
   1234c:	movne	r7, #0
   12350:	beq	12364 <__assert_fail@plt+0x1034>
   12354:	bl	111ec <__errno_location@plt>
   12358:	ldr	r3, [r0]
   1235c:	cmp	r3, #95	; 0x5f
   12360:	beq	12728 <__assert_fail@plt+0x13f8>
   12364:	cmp	r7, #0
   12368:	bne	124d4 <__assert_fail@plt+0x11a4>
   1236c:	ldrb	r4, [fp, #13]
   12370:	cmp	r4, #0
   12374:	movne	r7, #0
   12378:	bne	12040 <__assert_fail@plt+0xd10>
   1237c:	bl	111ec <__errno_location@plt>
   12380:	ldr	r3, [sp, #20]
   12384:	mov	r2, #5
   12388:	cmn	r3, #1
   1238c:	ldrne	r1, [pc, #2036]	; 12b88 <__assert_fail@plt+0x1858>
   12390:	ldreq	r1, [pc, #2036]	; 12b8c <__assert_fail@plt+0x185c>
   12394:	ldr	r7, [r0]
   12398:	mov	r0, r4
   1239c:	bl	110c0 <dcgettext@plt>
   123a0:	ldr	r1, [sp, #12]
   123a4:	mov	r8, r0
   123a8:	mov	r0, #4
   123ac:	bl	193bc <__assert_fail@plt+0x808c>
   123b0:	mov	r1, r7
   123b4:	mov	r2, r8
   123b8:	mov	r7, r4
   123bc:	mov	r4, #1
   123c0:	mov	r3, r0
   123c4:	mov	r0, #0
   123c8:	bl	11150 <error@plt>
   123cc:	b	12040 <__assert_fail@plt+0xd10>
   123d0:	ldr	lr, [fp, #8]
   123d4:	cmp	lr, #0
   123d8:	beq	12314 <__assert_fail@plt+0xfe4>
   123dc:	ldrd	r0, [r5, #96]	; 0x60
   123e0:	ldrd	r2, [lr]
   123e4:	cmp	r1, r3
   123e8:	cmpeq	r0, r2
   123ec:	bne	12314 <__assert_fail@plt+0xfe4>
   123f0:	ldrd	r0, [r5]
   123f4:	ldrd	r2, [lr, #8]
   123f8:	cmp	r1, r3
   123fc:	cmpeq	r0, r2
   12400:	bne	12314 <__assert_fail@plt+0xfe4>
   12404:	ldr	r6, [sp, #12]
   12408:	ldr	r1, [pc, #1900]	; 12b7c <__assert_fail@plt+0x184c>
   1240c:	mov	r0, r6
   12410:	bl	11024 <strcmp@plt>
   12414:	mov	r2, #5
   12418:	subs	r4, r0, #0
   1241c:	beq	1287c <__assert_fail@plt+0x154c>
   12420:	ldr	r1, [pc, #1896]	; 12b90 <__assert_fail@plt+0x1860>
   12424:	mov	r0, #0
   12428:	bl	110c0 <dcgettext@plt>
   1242c:	ldr	r2, [sp, #12]
   12430:	mov	r1, #4
   12434:	mov	r4, r0
   12438:	mov	r0, #0
   1243c:	bl	18fdc <__assert_fail@plt+0x7cac>
   12440:	ldr	r2, [pc, #1844]	; 12b7c <__assert_fail@plt+0x184c>
   12444:	mov	r1, #4
   12448:	mov	r5, r0
   1244c:	mov	r0, #1
   12450:	bl	18fdc <__assert_fail@plt+0x7cac>
   12454:	mov	r1, #0
   12458:	mov	r3, r5
   1245c:	mov	r2, r4
   12460:	str	r0, [sp]
   12464:	mov	r0, r1
   12468:	bl	11150 <error@plt>
   1246c:	mov	r2, #5
   12470:	ldr	r1, [pc, #1804]	; 12b84 <__assert_fail@plt+0x1854>
   12474:	mov	r0, #0
   12478:	bl	110c0 <dcgettext@plt>
   1247c:	mov	r1, #0
   12480:	mov	r2, r0
   12484:	mov	r0, r1
   12488:	bl	11150 <error@plt>
   1248c:	mov	r3, #0
   12490:	str	r3, [sp, #8]
   12494:	b	11dfc <__assert_fail@plt+0xacc>
   12498:	ldr	r3, [sp, #16]
   1249c:	ldr	r7, [sl, #32]
   124a0:	cmp	r3, #0
   124a4:	beq	1253c <__assert_fail@plt+0x120c>
   124a8:	mov	r3, #0
   124ac:	mov	r0, r7
   124b0:	str	r3, [sp]
   124b4:	mov	r1, r8
   124b8:	ldr	r3, [sp, #32]
   124bc:	ldr	r2, [sp, #20]
   124c0:	bl	112b8 <fchownat@plt>
   124c4:	clz	r7, r0
   124c8:	lsr	r7, r7, #5
   124cc:	cmp	r7, #0
   124d0:	beq	1236c <__assert_fail@plt+0x103c>
   124d4:	ldr	r3, [fp]
   124d8:	cmp	r3, #2
   124dc:	beq	12584 <__assert_fail@plt+0x1254>
   124e0:	ldr	r2, [sp, #20]
   124e4:	cmn	r2, #1
   124e8:	beq	12564 <__assert_fail@plt+0x1234>
   124ec:	mov	r1, r2
   124f0:	ldr	r2, [r5, #24]
   124f4:	cmp	r1, r2
   124f8:	beq	12564 <__assert_fail@plt+0x1234>
   124fc:	mov	r7, #1
   12500:	mov	r8, #2
   12504:	b	12070 <__assert_fail@plt+0xd40>
   12508:	mov	r2, #5
   1250c:	ldr	r1, [pc, #1664]	; 12b94 <__assert_fail@plt+0x1864>
   12510:	mov	r0, #0
   12514:	bl	110c0 <dcgettext@plt>
   12518:	ldr	r1, [sp, #12]
   1251c:	mov	r5, r0
   12520:	mov	r0, #4
   12524:	bl	193bc <__assert_fail@plt+0x808c>
   12528:	mov	r1, r5
   1252c:	mov	r2, r0
   12530:	mov	r0, r8
   12534:	bl	11210 <__printf_chk@plt>
   12538:	b	121c8 <__assert_fail@plt+0xe98>
   1253c:	ldr	r3, [r5, #16]
   12540:	and	r3, r3, #61440	; 0xf000
   12544:	cmp	r3, #32768	; 0x8000
   12548:	beq	127c8 <__assert_fail@plt+0x1498>
   1254c:	cmp	r3, #16384	; 0x4000
   12550:	bne	124a8 <__assert_fail@plt+0x1178>
   12554:	ldr	r3, [pc, #1596]	; 12b98 <__assert_fail@plt+0x1868>
   12558:	mov	r2, #18688	; 0x4900
   1255c:	str	r3, [sp, #24]
   12560:	b	127d4 <__assert_fail@plt+0x14a4>
   12564:	ldr	r1, [sp, #32]
   12568:	cmn	r1, #1
   1256c:	beq	1257c <__assert_fail@plt+0x124c>
   12570:	ldr	r2, [r5, #28]
   12574:	cmp	r1, r2
   12578:	bne	124fc <__assert_fail@plt+0x11cc>
   1257c:	cmp	r3, #0
   12580:	beq	126b8 <__assert_fail@plt+0x1388>
   12584:	mov	r7, #1
   12588:	b	11e84 <__assert_fail@plt+0xb54>
   1258c:	cmp	r5, #0
   12590:	str	r3, [sp, #28]
   12594:	beq	12a7c <__assert_fail@plt+0x174c>
   12598:	mov	r0, r5
   1259c:	bl	1bf84 <__assert_fail@plt+0xac54>
   125a0:	ldr	r3, [sp, #28]
   125a4:	str	r0, [sp, #24]
   125a8:	cmp	r4, #0
   125ac:	beq	12970 <__assert_fail@plt+0x1640>
   125b0:	mov	r0, r4
   125b4:	str	r3, [sp, #36]	; 0x24
   125b8:	bl	1bf84 <__assert_fail@plt+0xac54>
   125bc:	cmp	r8, #3
   125c0:	ldr	r3, [sp, #36]	; 0x24
   125c4:	str	r0, [sp, #28]
   125c8:	beq	12900 <__assert_fail@plt+0x15d0>
   125cc:	cmp	r8, #4
   125d0:	beq	127a0 <__assert_fail@plt+0x1470>
   125d4:	cmp	r3, #0
   125d8:	beq	12698 <__assert_fail@plt+0x1368>
   125dc:	mov	r2, #5
   125e0:	ldr	r1, [pc, #1460]	; 12b9c <__assert_fail@plt+0x186c>
   125e4:	mov	r0, #0
   125e8:	bl	110c0 <dcgettext@plt>
   125ec:	mov	r5, r0
   125f0:	b	1218c <__assert_fail@plt+0xe5c>
   125f4:	ldr	r3, [fp, #8]
   125f8:	cmp	r3, #0
   125fc:	bne	11fe0 <__assert_fail@plt+0xcb0>
   12600:	ldrb	r4, [fp, #12]
   12604:	add	r5, r6, #64	; 0x40
   12608:	cmp	r4, #0
   1260c:	bne	11ff0 <__assert_fail@plt+0xcc0>
   12610:	b	12320 <__assert_fail@plt+0xff0>
   12614:	mov	r2, #5
   12618:	ldr	r1, [pc, #1408]	; 12ba0 <__assert_fail@plt+0x1870>
   1261c:	mov	r0, #0
   12620:	bl	110c0 <dcgettext@plt>
   12624:	mov	r5, r0
   12628:	b	1218c <__assert_fail@plt+0xe5c>
   1262c:	bl	1bf84 <__assert_fail@plt+0xac54>
   12630:	cmp	r9, #0
   12634:	str	r0, [sp, #24]
   12638:	beq	128ac <__assert_fail@plt+0x157c>
   1263c:	mov	r0, r9
   12640:	bl	1bf84 <__assert_fail@plt+0xac54>
   12644:	str	r0, [sp, #28]
   12648:	b	12168 <__assert_fail@plt+0xe38>
   1264c:	mov	r2, #5
   12650:	ldr	r1, [pc, #1356]	; 12ba4 <__assert_fail@plt+0x1874>
   12654:	b	11f7c <__assert_fail@plt+0xc4c>
   12658:	mov	r2, #1
   1265c:	str	r2, [r6, #16]
   12660:	mov	r1, r6
   12664:	mov	r0, sl
   12668:	bl	151f4 <__assert_fail@plt+0x3ec4>
   1266c:	b	11dfc <__assert_fail@plt+0xacc>
   12670:	mov	r2, #5
   12674:	ldr	r1, [pc, #1324]	; 12ba8 <__assert_fail@plt+0x1878>
   12678:	mov	r0, r3
   1267c:	mov	r5, r3
   12680:	bl	110c0 <dcgettext@plt>
   12684:	mov	r1, r6
   12688:	mov	r2, r0
   1268c:	mov	r0, r5
   12690:	bl	11150 <error@plt>
   12694:	b	11ed8 <__assert_fail@plt+0xba8>
   12698:	cmp	r5, #0
   1269c:	beq	12a18 <__assert_fail@plt+0x16e8>
   126a0:	mov	r0, r3
   126a4:	mov	r2, #5
   126a8:	ldr	r1, [pc, #1276]	; 12bac <__assert_fail@plt+0x187c>
   126ac:	bl	110c0 <dcgettext@plt>
   126b0:	mov	r5, r0
   126b4:	b	1218c <__assert_fail@plt+0xe5c>
   126b8:	mov	r7, #1
   126bc:	mov	r8, #4
   126c0:	b	12070 <__assert_fail@plt+0xd40>
   126c4:	mov	r2, #5
   126c8:	ldr	r1, [pc, #1248]	; 12bb0 <__assert_fail@plt+0x1880>
   126cc:	mov	r0, #0
   126d0:	bl	110c0 <dcgettext@plt>
   126d4:	ldr	r2, [sp, #12]
   126d8:	mov	r1, #3
   126dc:	mov	r4, r0
   126e0:	mov	r0, #0
   126e4:	bl	19e38 <__assert_fail@plt+0x8b08>
   126e8:	mov	r1, #0
   126ec:	mov	r2, r4
   126f0:	mov	r3, r0
   126f4:	mov	r0, r1
   126f8:	bl	11150 <error@plt>
   126fc:	mov	r3, #0
   12700:	str	r3, [sp, #8]
   12704:	b	11dfc <__assert_fail@plt+0xacc>
   12708:	mov	r0, r4
   1270c:	add	r2, sp, #144	; 0x90
   12710:	bl	16d6c <__assert_fail@plt+0x5a3c>
   12714:	b	120a8 <__assert_fail@plt+0xd78>
   12718:	mov	r0, r4
   1271c:	add	r2, sp, #144	; 0x90
   12720:	bl	16d6c <__assert_fail@plt+0x5a3c>
   12724:	b	12088 <__assert_fail@plt+0xd58>
   12728:	mov	r7, #1
   1272c:	b	12040 <__assert_fail@plt+0xd10>
   12730:	mov	r2, #0
   12734:	str	r2, [sp]
   12738:	ldr	r1, [sl, #32]
   1273c:	add	r3, sp, #40	; 0x28
   12740:	mov	r2, r8
   12744:	mov	r0, #3
   12748:	bl	110e4 <__fxstatat64@plt>
   1274c:	cmp	r0, #0
   12750:	bne	12834 <__assert_fail@plt+0x1504>
   12754:	ldrh	r9, [r6, #56]	; 0x38
   12758:	add	r5, sp, #40	; 0x28
   1275c:	sub	r7, r9, #1
   12760:	b	12000 <__assert_fail@plt+0xcd0>
   12764:	uxth	ip, r7
   12768:	bic	r9, r9, #2
   1276c:	cmp	r9, #4
   12770:	cmpne	ip, #1
   12774:	movls	ip, #1
   12778:	movhi	ip, #0
   1277c:	bhi	1231c <__assert_fail@plt+0xfec>
   12780:	ldr	lr, [fp, #8]
   12784:	cmp	lr, #0
   12788:	bne	123dc <__assert_fail@plt+0x10ac>
   1278c:	b	1231c <__assert_fail@plt+0xfec>
   12790:	cmp	r8, #4
   12794:	strne	r4, [sp, #28]
   12798:	bne	125d4 <__assert_fail@plt+0x12a4>
   1279c:	str	r4, [sp, #28]
   127a0:	cmp	r3, #0
   127a4:	bne	12178 <__assert_fail@plt+0xe48>
   127a8:	cmp	r5, #0
   127ac:	beq	12a00 <__assert_fail@plt+0x16d0>
   127b0:	mov	r0, r3
   127b4:	mov	r2, #5
   127b8:	ldr	r1, [pc, #1012]	; 12bb4 <__assert_fail@plt+0x1884>
   127bc:	bl	110c0 <dcgettext@plt>
   127c0:	mov	r5, r0
   127c4:	b	1218c <__assert_fail@plt+0xe5c>
   127c8:	ldr	r3, [pc, #1000]	; 12bb8 <__assert_fail@plt+0x1888>
   127cc:	mov	r2, #2304	; 0x900
   127d0:	str	r3, [sp, #24]
   127d4:	mov	r1, r8
   127d8:	mov	r0, r7
   127dc:	bl	11060 <__openat64_2@plt>
   127e0:	subs	r9, r0, #0
   127e4:	blt	12850 <__assert_fail@plt+0x1520>
   127e8:	add	r2, sp, #144	; 0x90
   127ec:	mov	r1, r9
   127f0:	mov	r0, #3
   127f4:	bl	110fc <__fxstat64@plt>
   127f8:	cmp	r0, #0
   127fc:	bne	128e4 <__assert_fail@plt+0x15b4>
   12800:	ldrd	r0, [r5, #96]	; 0x60
   12804:	ldrd	r2, [sp, #240]	; 0xf0
   12808:	cmp	r1, r3
   1280c:	cmpeq	r0, r2
   12810:	beq	12a30 <__assert_fail@plt+0x1700>
   12814:	bl	111ec <__errno_location@plt>
   12818:	mov	r8, r0
   1281c:	mov	r0, r9
   12820:	ldr	r9, [r8]
   12824:	bl	112f4 <close@plt>
   12828:	ldr	r7, [sp, #16]
   1282c:	str	r9, [r8]
   12830:	b	12040 <__assert_fail@plt+0xd10>
   12834:	ldrb	r4, [fp, #13]
   12838:	cmp	r4, #0
   1283c:	beq	12930 <__assert_fail@plt+0x1600>
   12840:	add	r5, sp, #40	; 0x28
   12844:	mov	r4, #1
   12848:	mov	r7, #0
   1284c:	b	12040 <__assert_fail@plt+0xd10>
   12850:	bl	111ec <__errno_location@plt>
   12854:	ldr	r3, [r0]
   12858:	str	r0, [sp, #28]
   1285c:	cmp	r3, #13
   12860:	bne	1236c <__assert_fail@plt+0x103c>
   12864:	ldr	r3, [r5, #16]
   12868:	and	r3, r3, #61440	; 0xf000
   1286c:	cmp	r3, #32768	; 0x8000
   12870:	beq	12aa0 <__assert_fail@plt+0x1770>
   12874:	ldr	r7, [sl, #32]
   12878:	b	124a8 <__assert_fail@plt+0x1178>
   1287c:	ldr	r1, [pc, #764]	; 12b80 <__assert_fail@plt+0x1850>
   12880:	bl	110c0 <dcgettext@plt>
   12884:	mov	r1, r6
   12888:	mov	r5, r0
   1288c:	mov	r0, #4
   12890:	bl	193bc <__assert_fail@plt+0x808c>
   12894:	mov	r2, r5
   12898:	mov	r1, r4
   1289c:	mov	r3, r0
   128a0:	mov	r0, r4
   128a4:	bl	11150 <error@plt>
   128a8:	b	1246c <__assert_fail@plt+0x113c>
   128ac:	cmp	r8, #3
   128b0:	bne	12b20 <__assert_fail@plt+0x17f0>
   128b4:	ldr	r1, [pc, #768]	; 12bbc <__assert_fail@plt+0x188c>
   128b8:	mov	r2, #5
   128bc:	ldr	r3, [sp, #24]
   128c0:	mov	r0, #0
   128c4:	str	r3, [sp, #28]
   128c8:	bl	110c0 <dcgettext@plt>
   128cc:	mov	r5, r0
   128d0:	mov	r0, #0
   128d4:	bl	12cdc <__assert_fail@plt+0x19ac>
   128d8:	mov	r3, #0
   128dc:	str	r3, [sp, #24]
   128e0:	b	1218c <__assert_fail@plt+0xe5c>
   128e4:	bl	111ec <__errno_location@plt>
   128e8:	mov	r4, r0
   128ec:	mov	r0, r9
   128f0:	ldr	r7, [r4]
   128f4:	bl	112f4 <close@plt>
   128f8:	str	r7, [r4]
   128fc:	b	1236c <__assert_fail@plt+0x103c>
   12900:	cmp	r3, #0
   12904:	bne	12614 <__assert_fail@plt+0x12e4>
   12908:	cmp	r5, #0
   1290c:	moveq	r0, r5
   12910:	movne	r0, r3
   12914:	movne	r2, #5
   12918:	ldrne	r1, [pc, #672]	; 12bc0 <__assert_fail@plt+0x1890>
   1291c:	moveq	r2, #5
   12920:	ldreq	r1, [pc, #668]	; 12bc4 <__assert_fail@plt+0x1894>
   12924:	bl	110c0 <dcgettext@plt>
   12928:	mov	r5, r0
   1292c:	b	1218c <__assert_fail@plt+0xe5c>
   12930:	bl	111ec <__errno_location@plt>
   12934:	mov	r2, #5
   12938:	ldr	r1, [pc, #648]	; 12bc8 <__assert_fail@plt+0x1898>
   1293c:	ldr	r5, [r0]
   12940:	mov	r0, r4
   12944:	bl	110c0 <dcgettext@plt>
   12948:	ldr	r1, [sp, #12]
   1294c:	mov	r7, r0
   12950:	mov	r0, #4
   12954:	bl	193bc <__assert_fail@plt+0x808c>
   12958:	mov	r2, r7
   1295c:	mov	r1, r5
   12960:	mov	r3, r0
   12964:	mov	r0, r4
   12968:	bl	11150 <error@plt>
   1296c:	b	12840 <__assert_fail@plt+0x1510>
   12970:	cmp	r8, #3
   12974:	bne	12790 <__assert_fail@plt+0x1460>
   12978:	cmp	r3, #0
   1297c:	bne	128b4 <__assert_fail@plt+0x1584>
   12980:	cmp	r5, #0
   12984:	beq	12b14 <__assert_fail@plt+0x17e4>
   12988:	mov	r2, #5
   1298c:	ldr	r1, [pc, #568]	; 12bcc <__assert_fail@plt+0x189c>
   12990:	b	128bc <__assert_fail@plt+0x158c>
   12994:	ldr	r1, [pc, #500]	; 12b90 <__assert_fail@plt+0x1860>
   12998:	mov	r0, #0
   1299c:	bl	110c0 <dcgettext@plt>
   129a0:	ldr	r2, [sp, #12]
   129a4:	mov	r1, #4
   129a8:	mov	r4, r0
   129ac:	mov	r0, #0
   129b0:	bl	18fdc <__assert_fail@plt+0x7cac>
   129b4:	ldr	r2, [pc, #448]	; 12b7c <__assert_fail@plt+0x184c>
   129b8:	mov	r1, #4
   129bc:	mov	r5, r0
   129c0:	mov	r0, #1
   129c4:	bl	18fdc <__assert_fail@plt+0x7cac>
   129c8:	mov	r1, #0
   129cc:	mov	r3, r5
   129d0:	mov	r2, r4
   129d4:	str	r0, [sp]
   129d8:	mov	r0, r1
   129dc:	bl	11150 <error@plt>
   129e0:	b	1228c <__assert_fail@plt+0xf5c>
   129e4:	cmp	r8, #4
   129e8:	movne	r3, r5
   129ec:	strne	r3, [sp, #28]
   129f0:	strne	r3, [sp, #24]
   129f4:	bne	12a18 <__assert_fail@plt+0x16e8>
   129f8:	str	r5, [sp, #28]
   129fc:	str	r5, [sp, #24]
   12a00:	mov	r2, #5
   12a04:	ldr	r1, [pc, #452]	; 12bd0 <__assert_fail@plt+0x18a0>
   12a08:	mov	r0, #0
   12a0c:	bl	110c0 <dcgettext@plt>
   12a10:	mov	r5, r0
   12a14:	b	1218c <__assert_fail@plt+0xe5c>
   12a18:	mov	r2, #5
   12a1c:	ldr	r1, [pc, #432]	; 12bd4 <__assert_fail@plt+0x18a4>
   12a20:	mov	r0, #0
   12a24:	bl	110c0 <dcgettext@plt>
   12a28:	mov	r5, r0
   12a2c:	b	1218c <__assert_fail@plt+0xe5c>
   12a30:	ldrd	r0, [r5]
   12a34:	ldrd	r2, [sp, #144]	; 0x90
   12a38:	cmp	r1, r3
   12a3c:	cmpeq	r0, r2
   12a40:	bne	12814 <__assert_fail@plt+0x14e4>
   12a44:	ldr	r3, [sp, #288]	; 0x120
   12a48:	cmn	r3, #1
   12a4c:	beq	12ad8 <__assert_fail@plt+0x17a8>
   12a50:	mov	r2, r3
   12a54:	ldr	r3, [sp, #168]	; 0xa8
   12a58:	cmp	r2, r3
   12a5c:	beq	12acc <__assert_fail@plt+0x179c>
   12a60:	bl	111ec <__errno_location@plt>
   12a64:	mov	r4, r0
   12a68:	mov	r0, r9
   12a6c:	ldr	r7, [r4]
   12a70:	bl	112f4 <close@plt>
   12a74:	str	r7, [r4]
   12a78:	b	124d4 <__assert_fail@plt+0x11a4>
   12a7c:	cmp	r8, #3
   12a80:	streq	r5, [sp, #28]
   12a84:	bne	129e4 <__assert_fail@plt+0x16b4>
   12a88:	mov	r2, #5
   12a8c:	ldr	r1, [pc, #304]	; 12bc4 <__assert_fail@plt+0x1894>
   12a90:	mov	r0, #0
   12a94:	bl	110c0 <dcgettext@plt>
   12a98:	mov	r5, r0
   12a9c:	b	128d0 <__assert_fail@plt+0x15a0>
   12aa0:	ldr	r2, [sp, #24]
   12aa4:	mov	r0, r7
   12aa8:	mov	r1, r8
   12aac:	bl	11060 <__openat64_2@plt>
   12ab0:	subs	r9, r0, #0
   12ab4:	bge	127e8 <__assert_fail@plt+0x14b8>
   12ab8:	ldr	r3, [sp, #28]
   12abc:	ldr	r3, [r3]
   12ac0:	cmp	r3, #13
   12ac4:	bne	1236c <__assert_fail@plt+0x103c>
   12ac8:	b	12874 <__assert_fail@plt+0x1544>
   12acc:	ldr	r3, [sp, #292]	; 0x124
   12ad0:	cmn	r3, #1
   12ad4:	beq	12ae8 <__assert_fail@plt+0x17b8>
   12ad8:	ldr	r3, [sp, #172]	; 0xac
   12adc:	ldr	r2, [sp, #292]	; 0x124
   12ae0:	cmp	r2, r3
   12ae4:	bne	12a60 <__assert_fail@plt+0x1730>
   12ae8:	ldr	r2, [sp, #32]
   12aec:	ldr	r1, [sp, #20]
   12af0:	mov	r0, r9
   12af4:	bl	111e0 <fchown@plt>
   12af8:	cmp	r0, #0
   12afc:	bne	128e4 <__assert_fail@plt+0x15b4>
   12b00:	mov	r0, r9
   12b04:	bl	112f4 <close@plt>
   12b08:	cmp	r0, #0
   12b0c:	bne	1236c <__assert_fail@plt+0x103c>
   12b10:	b	124d4 <__assert_fail@plt+0x11a4>
   12b14:	ldr	r3, [sp, #24]
   12b18:	str	r3, [sp, #28]
   12b1c:	b	12a88 <__assert_fail@plt+0x1758>
   12b20:	cmp	r8, #4
   12b24:	strne	r9, [sp, #28]
   12b28:	bne	125dc <__assert_fail@plt+0x12ac>
   12b2c:	str	r9, [sp, #28]
   12b30:	b	12178 <__assert_fail@plt+0xe48>
   12b34:	ldr	lr, [fp, #8]
   12b38:	cmp	lr, #0
   12b3c:	moveq	r4, r7
   12b40:	beq	12040 <__assert_fail@plt+0xd10>
   12b44:	mov	ip, #0
   12b48:	b	123dc <__assert_fail@plt+0x10ac>
   12b4c:	cmp	r7, #0
   12b50:	bne	11e80 <__assert_fail@plt+0xb50>
   12b54:	mov	r9, r7
   12b58:	mov	r4, r7
   12b5c:	ldr	r3, [fp, #16]
   12b60:	ldr	r5, [fp, #20]
   12b64:	mov	r8, #3
   12b68:	b	120c0 <__assert_fail@plt+0xd90>
   12b6c:	ldrdeq	lr, [r1], -r4
   12b70:	andeq	lr, r1, r8, lsl #22
   12b74:	andeq	lr, r1, r8, ror #15
   12b78:	andeq	lr, r1, ip, ror sl
   12b7c:	andeq	lr, r1, ip, lsr #12
   12b80:	andeq	lr, r1, r4, lsr r7
   12b84:	andeq	lr, r1, r0, lsr #15
   12b88:	ldrdeq	lr, [r1], -r8
   12b8c:	strdeq	lr, [r1], -r4
   12b90:	andeq	lr, r1, r4, ror #14
   12b94:	andeq	lr, r1, ip, lsl #18
   12b98:	andeq	r4, r0, r1, lsl #18
   12b9c:	andeq	lr, r1, r4, asr #18
   12ba0:			; <UNDEFINED> instruction: 0x0001e9b0
   12ba4:	ldrdeq	lr, [r1], -r4
   12ba8:	andeq	lr, r1, r4, lsr #14
   12bac:	andeq	lr, r1, ip, ror #18
   12bb0:	andeq	lr, r1, r4, lsl #16
   12bb4:	muleq	r1, ip, sl
   12bb8:	andeq	r0, r0, r1, lsl #18
   12bbc:	andeq	lr, r1, r0, lsr sl
   12bc0:	andeq	lr, r1, r0, ror #19
   12bc4:	andeq	lr, r1, ip, lsl #20
   12bc8:	andeq	lr, r1, r0, asr #17
   12bcc:	andeq	lr, r1, r8, asr sl
   12bd0:			; <UNDEFINED> instruction: 0x0001eab8
   12bd4:	muleq	r1, r0, r9
   12bd8:	ldr	r3, [pc, #4]	; 12be4 <__assert_fail@plt+0x18b4>
   12bdc:	str	r0, [r3]
   12be0:	bx	lr
   12be4:			; <UNDEFINED> instruction: 0x000301b8
   12be8:	ldr	r3, [pc, #4]	; 12bf4 <__assert_fail@plt+0x18c4>
   12bec:	strb	r0, [r3, #4]
   12bf0:	bx	lr
   12bf4:			; <UNDEFINED> instruction: 0x000301b8
   12bf8:	ldr	r3, [pc, #192]	; 12cc0 <__assert_fail@plt+0x1990>
   12bfc:	push	{r4, r5, r6, lr}
   12c00:	sub	sp, sp, #8
   12c04:	ldr	r0, [r3]
   12c08:	bl	1cf1c <__assert_fail@plt+0xbbec>
   12c0c:	cmp	r0, #0
   12c10:	beq	12c34 <__assert_fail@plt+0x1904>
   12c14:	ldr	r4, [pc, #168]	; 12cc4 <__assert_fail@plt+0x1994>
   12c18:	ldrb	r3, [r4, #4]
   12c1c:	cmp	r3, #0
   12c20:	beq	12c50 <__assert_fail@plt+0x1920>
   12c24:	bl	111ec <__errno_location@plt>
   12c28:	ldr	r3, [r0]
   12c2c:	cmp	r3, #32
   12c30:	bne	12c50 <__assert_fail@plt+0x1920>
   12c34:	ldr	r3, [pc, #140]	; 12cc8 <__assert_fail@plt+0x1998>
   12c38:	ldr	r0, [r3]
   12c3c:	bl	1cf1c <__assert_fail@plt+0xbbec>
   12c40:	cmp	r0, #0
   12c44:	bne	12c98 <__assert_fail@plt+0x1968>
   12c48:	add	sp, sp, #8
   12c4c:	pop	{r4, r5, r6, pc}
   12c50:	mov	r2, #5
   12c54:	ldr	r1, [pc, #112]	; 12ccc <__assert_fail@plt+0x199c>
   12c58:	mov	r0, #0
   12c5c:	bl	110c0 <dcgettext@plt>
   12c60:	ldr	r4, [r4]
   12c64:	cmp	r4, #0
   12c68:	mov	r5, r0
   12c6c:	beq	12ca4 <__assert_fail@plt+0x1974>
   12c70:	bl	111ec <__errno_location@plt>
   12c74:	ldr	r6, [r0]
   12c78:	mov	r0, r4
   12c7c:	bl	19acc <__assert_fail@plt+0x879c>
   12c80:	mov	r1, r6
   12c84:	str	r5, [sp]
   12c88:	ldr	r2, [pc, #64]	; 12cd0 <__assert_fail@plt+0x19a0>
   12c8c:	mov	r3, r0
   12c90:	mov	r0, #0
   12c94:	bl	11150 <error@plt>
   12c98:	ldr	r3, [pc, #52]	; 12cd4 <__assert_fail@plt+0x19a4>
   12c9c:	ldr	r0, [r3]
   12ca0:	bl	1106c <_exit@plt>
   12ca4:	bl	111ec <__errno_location@plt>
   12ca8:	mov	r3, r5
   12cac:	ldr	r2, [pc, #36]	; 12cd8 <__assert_fail@plt+0x19a8>
   12cb0:	ldr	r1, [r0]
   12cb4:	mov	r0, r4
   12cb8:	bl	11150 <error@plt>
   12cbc:	b	12c98 <__assert_fail@plt+0x1968>
   12cc0:	muleq	r3, r4, r1
   12cc4:			; <UNDEFINED> instruction: 0x000301b8
   12cc8:	muleq	r3, r0, r1
   12ccc:	strdeq	lr, [r1], -r8
   12cd0:	andeq	lr, r1, r4, lsl #22
   12cd4:	andeq	r0, r3, r8, lsr r1
   12cd8:	andeq	lr, r1, r8, lsl #22
   12cdc:	push	{r4, r5, lr}
   12ce0:	sub	sp, sp, #12
   12ce4:	mov	r5, r0
   12ce8:	bl	111ec <__errno_location@plt>
   12cec:	mov	r2, #0
   12cf0:	mov	r4, r0
   12cf4:	ldr	r3, [r0]
   12cf8:	str	r2, [r4]
   12cfc:	mov	r0, r5
   12d00:	str	r3, [sp]
   12d04:	str	r3, [sp, #4]
   12d08:	bl	11054 <free@plt>
   12d0c:	ldr	r3, [r4]
   12d10:	add	r2, sp, #8
   12d14:	cmp	r3, #0
   12d18:	moveq	r3, #4
   12d1c:	movne	r3, #0
   12d20:	add	r3, r2, r3
   12d24:	ldr	r3, [r3, #-8]
   12d28:	str	r3, [r4]
   12d2c:	add	sp, sp, #12
   12d30:	pop	{r4, r5, pc}
   12d34:	ldrd	r2, [r1, #8]
   12d38:	push	{r4, r5}
   12d3c:	ldrd	r4, [r0, #8]
   12d40:	cmp	r5, r3
   12d44:	cmpeq	r4, r2
   12d48:	movne	r0, #0
   12d4c:	beq	12d58 <__assert_fail@plt+0x1a28>
   12d50:	pop	{r4, r5}
   12d54:	bx	lr
   12d58:	ldrd	r4, [r0]
   12d5c:	ldrd	r2, [r1]
   12d60:	cmp	r5, r3
   12d64:	cmpeq	r4, r2
   12d68:	moveq	r0, #1
   12d6c:	movne	r0, #0
   12d70:	pop	{r4, r5}
   12d74:	bx	lr
   12d78:	push	{r4, lr}
   12d7c:	mov	r2, r1
   12d80:	mov	r3, #0
   12d84:	ldrd	r0, [r0, #8]
   12d88:	bl	1da54 <__assert_fail@plt+0xc724>
   12d8c:	mov	r0, r2
   12d90:	pop	{r4, pc}
   12d94:	push	{r4, lr}
   12d98:	mov	r2, r1
   12d9c:	mov	r3, #0
   12da0:	ldrd	r0, [r0]
   12da4:	bl	1da54 <__assert_fail@plt+0xc724>
   12da8:	mov	r0, r2
   12dac:	pop	{r4, pc}
   12db0:	push	{r4, r5}
   12db4:	ldrd	r2, [r1]
   12db8:	ldrd	r4, [r0]
   12dbc:	cmp	r5, r3
   12dc0:	cmpeq	r4, r2
   12dc4:	moveq	r0, #1
   12dc8:	movne	r0, #0
   12dcc:	pop	{r4, r5}
   12dd0:	bx	lr
   12dd4:	ldr	r2, [r0]
   12dd8:	ldr	r3, [r1]
   12ddc:	ldrd	r0, [r2, #160]	; 0xa0
   12de0:	ldrd	r2, [r3, #160]	; 0xa0
   12de4:	cmp	r1, r3
   12de8:	cmpeq	r0, r2
   12dec:	movhi	r0, #1
   12df0:	movls	r0, #0
   12df4:	movcc	r3, #1
   12df8:	movcs	r3, #0
   12dfc:	sub	r0, r0, r3
   12e00:	bx	lr
   12e04:	push	{r4, r5, r6, r7, lr}
   12e08:	sub	sp, sp, #100	; 0x64
   12e0c:	ldr	r4, [r0, #44]	; 0x2c
   12e10:	ldr	r3, [r4, #48]	; 0x30
   12e14:	tst	r3, #512	; 0x200
   12e18:	beq	12e8c <__assert_fail@plt+0x1b5c>
   12e1c:	ldr	r6, [r4, #52]	; 0x34
   12e20:	mov	r7, r1
   12e24:	cmp	r6, #0
   12e28:	mov	r5, r0
   12e2c:	beq	12e58 <__assert_fail@plt+0x1b28>
   12e30:	ldrd	r2, [r5, #64]	; 0x40
   12e34:	add	r1, sp, #96	; 0x60
   12e38:	mov	r0, r6
   12e3c:	strd	r2, [r1, #-88]!	; 0xffffffa8
   12e40:	bl	158c0 <__assert_fail@plt+0x4590>
   12e44:	cmp	r0, #0
   12e48:	beq	12e84 <__assert_fail@plt+0x1b54>
   12e4c:	ldr	r0, [r0, #8]
   12e50:	add	sp, sp, #100	; 0x64
   12e54:	pop	{r4, r5, r6, r7, pc}
   12e58:	ldr	r3, [pc, #168]	; 12f08 <__assert_fail@plt+0x1bd8>
   12e5c:	mov	r1, r6
   12e60:	str	r3, [sp]
   12e64:	ldr	r2, [pc, #160]	; 12f0c <__assert_fail@plt+0x1bdc>
   12e68:	ldr	r3, [pc, #160]	; 12f10 <__assert_fail@plt+0x1be0>
   12e6c:	mov	r0, #13
   12e70:	bl	15ba0 <__assert_fail@plt+0x4870>
   12e74:	cmp	r0, #0
   12e78:	mov	r6, r0
   12e7c:	str	r0, [r4, #52]	; 0x34
   12e80:	bne	12e30 <__assert_fail@plt+0x1b00>
   12e84:	cmp	r7, #0
   12e88:	bge	12e98 <__assert_fail@plt+0x1b68>
   12e8c:	mov	r0, #0
   12e90:	add	sp, sp, #100	; 0x64
   12e94:	pop	{r4, r5, r6, r7, pc}
   12e98:	mov	r0, r7
   12e9c:	add	r1, sp, #8
   12ea0:	bl	10fe8 <fstatfs64@plt>
   12ea4:	cmp	r0, #0
   12ea8:	bne	12e8c <__assert_fail@plt+0x1b5c>
   12eac:	cmp	r6, #0
   12eb0:	beq	12efc <__assert_fail@plt+0x1bcc>
   12eb4:	mov	r0, #16
   12eb8:	bl	1ce94 <__assert_fail@plt+0xbb64>
   12ebc:	subs	r4, r0, #0
   12ec0:	beq	12efc <__assert_fail@plt+0x1bcc>
   12ec4:	ldrd	r2, [r5, #64]	; 0x40
   12ec8:	ldr	r1, [sp, #8]
   12ecc:	mov	r0, r6
   12ed0:	str	r1, [r4, #8]
   12ed4:	strd	r2, [r4]
   12ed8:	mov	r1, r4
   12edc:	bl	16508 <__assert_fail@plt+0x51d8>
   12ee0:	cmp	r0, #0
   12ee4:	beq	12ef4 <__assert_fail@plt+0x1bc4>
   12ee8:	cmp	r4, r0
   12eec:	beq	12efc <__assert_fail@plt+0x1bcc>
   12ef0:	bl	112e8 <abort@plt>
   12ef4:	mov	r0, r4
   12ef8:	bl	12cdc <__assert_fail@plt+0x19ac>
   12efc:	ldr	r0, [sp, #8]
   12f00:	add	sp, sp, #100	; 0x64
   12f04:	pop	{r4, r5, r6, r7, pc}
   12f08:	ldrdeq	r2, [r1], -ip
   12f0c:	muleq	r1, r4, sp
   12f10:			; <UNDEFINED> instruction: 0x00012db0
   12f14:	push	{r4, r5, r6, lr}
   12f18:	mov	r4, r2
   12f1c:	ldr	r2, [r2, #48]	; 0x30
   12f20:	sub	sp, sp, #8
   12f24:	cmp	r2, #0
   12f28:	add	r5, r4, #64	; 0x40
   12f2c:	bne	12f84 <__assert_fail@plt+0x1c54>
   12f30:	tst	r1, #1
   12f34:	beq	12f84 <__assert_fail@plt+0x1c54>
   12f38:	mov	r2, r5
   12f3c:	ldr	r1, [r4, #24]
   12f40:	mov	r0, #3
   12f44:	bl	112d0 <__xstat64@plt>
   12f48:	cmp	r0, #0
   12f4c:	beq	12fc0 <__assert_fail@plt+0x1c90>
   12f50:	bl	111ec <__errno_location@plt>
   12f54:	ldr	r3, [r0]
   12f58:	mov	r6, r0
   12f5c:	cmp	r3, #2
   12f60:	beq	13038 <__assert_fail@plt+0x1d08>
   12f64:	str	r3, [r4, #32]
   12f68:	mov	r0, r5
   12f6c:	mov	r2, #104	; 0x68
   12f70:	mov	r1, #0
   12f74:	bl	11204 <memset@plt>
   12f78:	mov	r0, #10
   12f7c:	add	sp, sp, #8
   12f80:	pop	{r4, r5, r6, pc}
   12f84:	lsl	r1, r1, #30
   12f88:	orrs	r3, r3, r1, lsr #31
   12f8c:	bne	12f38 <__assert_fail@plt+0x1c08>
   12f90:	mov	r3, #256	; 0x100
   12f94:	ldr	r2, [r4, #24]
   12f98:	mov	r1, r0
   12f9c:	str	r3, [sp]
   12fa0:	mov	r0, #3
   12fa4:	mov	r3, r5
   12fa8:	bl	110e4 <__fxstatat64@plt>
   12fac:	cmp	r0, #0
   12fb0:	beq	12fc0 <__assert_fail@plt+0x1c90>
   12fb4:	bl	111ec <__errno_location@plt>
   12fb8:	ldr	r3, [r0]
   12fbc:	b	12f64 <__assert_fail@plt+0x1c34>
   12fc0:	ldr	r0, [r4, #80]	; 0x50
   12fc4:	and	r0, r0, #61440	; 0xf000
   12fc8:	cmp	r0, #16384	; 0x4000
   12fcc:	beq	12ff0 <__assert_fail@plt+0x1cc0>
   12fd0:	cmp	r0, #40960	; 0xa000
   12fd4:	moveq	r0, #12
   12fd8:	beq	12f7c <__assert_fail@plt+0x1c4c>
   12fdc:	cmp	r0, #32768	; 0x8000
   12fe0:	movne	r0, #3
   12fe4:	moveq	r0, #8
   12fe8:	add	sp, sp, #8
   12fec:	pop	{r4, r5, r6, pc}
   12ff0:	ldrb	r3, [r4, #168]	; 0xa8
   12ff4:	cmp	r3, #46	; 0x2e
   12ff8:	beq	13004 <__assert_fail@plt+0x1cd4>
   12ffc:	mov	r0, #1
   13000:	b	12f7c <__assert_fail@plt+0x1c4c>
   13004:	ldrb	r3, [r4, #169]	; 0xa9
   13008:	cmp	r3, #0
   1300c:	beq	13024 <__assert_fail@plt+0x1cf4>
   13010:	ldr	r3, [r4, #168]	; 0xa8
   13014:	bic	r3, r3, #-16777216	; 0xff000000
   13018:	bic	r3, r3, #255	; 0xff
   1301c:	cmp	r3, #11776	; 0x2e00
   13020:	bne	12ffc <__assert_fail@plt+0x1ccc>
   13024:	ldr	r0, [r4, #48]	; 0x30
   13028:	cmp	r0, #0
   1302c:	movne	r0, #5
   13030:	moveq	r0, #1
   13034:	b	12f7c <__assert_fail@plt+0x1c4c>
   13038:	mov	r2, r5
   1303c:	ldr	r1, [r4, #24]
   13040:	mov	r0, #3
   13044:	bl	11300 <__lxstat64@plt>
   13048:	cmp	r0, #0
   1304c:	streq	r0, [r6]
   13050:	moveq	r0, #13
   13054:	beq	12f7c <__assert_fail@plt+0x1c4c>
   13058:	ldr	r3, [r6]
   1305c:	b	12f64 <__assert_fail@plt+0x1c34>
   13060:	ldr	r3, [pc, #172]	; 13114 <__assert_fail@plt+0x1de4>
   13064:	push	{r4, r5, lr}
   13068:	and	r3, r3, r0
   1306c:	cmp	r3, #0
   13070:	sub	sp, sp, #28
   13074:	bne	130bc <__assert_fail@plt+0x1d8c>
   13078:	ldr	r3, [r2, #4]
   1307c:	cmp	r3, #0
   13080:	beq	130b4 <__assert_fail@plt+0x1d84>
   13084:	ldr	r0, [r3, #48]	; 0x30
   13088:	cmp	r0, #0
   1308c:	blt	130b4 <__assert_fail@plt+0x1d84>
   13090:	ldr	ip, [r1]
   13094:	ldrd	r0, [ip, #16]
   13098:	orrs	r1, r0, r1
   1309c:	beq	13110 <__assert_fail@plt+0x1de0>
   130a0:	ldrd	r4, [ip]
   130a4:	ldrd	r0, [r2, #160]	; 0xa0
   130a8:	cmp	r5, r1
   130ac:	cmpeq	r4, r0
   130b0:	beq	130ec <__assert_fail@plt+0x1dbc>
   130b4:	add	sp, sp, #28
   130b8:	pop	{r4, r5, pc}
   130bc:	ldrd	r4, [r2, #64]	; 0x40
   130c0:	ldrd	r2, [r2, #160]	; 0xa0
   130c4:	ldr	r0, [r1]
   130c8:	mov	r1, sp
   130cc:	strd	r4, [sp]
   130d0:	strd	r2, [sp, #8]
   130d4:	bl	167cc <__assert_fail@plt+0x549c>
   130d8:	cmp	r0, #0
   130dc:	beq	13110 <__assert_fail@plt+0x1de0>
   130e0:	bl	12cdc <__assert_fail@plt+0x19ac>
   130e4:	add	sp, sp, #28
   130e8:	pop	{r4, r5, pc}
   130ec:	ldrd	r0, [ip, #8]
   130f0:	ldrd	r4, [r2, #64]	; 0x40
   130f4:	cmp	r1, r5
   130f8:	cmpeq	r0, r4
   130fc:	ldrdeq	r0, [r3, #64]	; 0x40
   13100:	ldrdeq	r2, [r3, #160]	; 0xa0
   13104:	strdeq	r0, [ip, #8]
   13108:	strdeq	r2, [ip]
   1310c:	b	130b4 <__assert_fail@plt+0x1d84>
   13110:	bl	112e8 <abort@plt>
   13114:	andeq	r0, r0, r2, lsl #2
   13118:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1311c:	subs	sl, r3, #0
   13120:	sub	sp, sp, #104	; 0x68
   13124:	mov	r5, r0
   13128:	mov	r6, r1
   1312c:	mov	r4, r2
   13130:	ldr	r9, [r0, #48]	; 0x30
   13134:	beq	131b0 <__assert_fail@plt+0x1e80>
   13138:	ldr	r1, [pc, #612]	; 133a4 <__assert_fail@plt+0x2074>
   1313c:	mov	r0, sl
   13140:	bl	11024 <strcmp@plt>
   13144:	cmp	r0, #0
   13148:	bne	131b0 <__assert_fail@plt+0x1e80>
   1314c:	tst	r9, #4
   13150:	bne	131b8 <__assert_fail@plt+0x1e88>
   13154:	cmp	r4, #0
   13158:	bge	13390 <__assert_fail@plt+0x2060>
   1315c:	tst	r9, #512	; 0x200
   13160:	beq	132a4 <__assert_fail@plt+0x1f74>
   13164:	add	r7, r5, #60	; 0x3c
   13168:	mov	r0, r7
   1316c:	bl	16cd8 <__assert_fail@plt+0x59a8>
   13170:	cmp	r0, #0
   13174:	beq	13320 <__assert_fail@plt+0x1ff0>
   13178:	ldr	r2, [pc, #552]	; 133a8 <__assert_fail@plt+0x2078>
   1317c:	tst	r9, #16
   13180:	ldr	r1, [pc, #548]	; 133ac <__assert_fail@plt+0x207c>
   13184:	mov	r8, #1
   13188:	movne	r1, r2
   1318c:	mov	r2, r1
   13190:	ldr	r0, [r5, #32]
   13194:	mov	r1, sl
   13198:	bl	16dd4 <__assert_fail@plt+0x5aa4>
   1319c:	mov	r7, r0
   131a0:	cmp	r7, #0
   131a4:	blt	13364 <__assert_fail@plt+0x2034>
   131a8:	ldr	r9, [r5, #48]	; 0x30
   131ac:	b	131ec <__assert_fail@plt+0x1ebc>
   131b0:	ands	r8, r9, #4
   131b4:	beq	131e0 <__assert_fail@plt+0x1eb0>
   131b8:	mvn	r3, r4
   131bc:	lsr	r3, r3, #31
   131c0:	ands	r9, r3, r9, lsr #9
   131c4:	beq	131d4 <__assert_fail@plt+0x1ea4>
   131c8:	mov	r0, r4
   131cc:	bl	112f4 <close@plt>
   131d0:	mov	r9, #0
   131d4:	mov	r0, r9
   131d8:	add	sp, sp, #104	; 0x68
   131dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   131e0:	cmp	r4, #0
   131e4:	movge	r7, r4
   131e8:	blt	13370 <__assert_fail@plt+0x2040>
   131ec:	tst	r9, #2
   131f0:	bne	13210 <__assert_fail@plt+0x1ee0>
   131f4:	cmp	sl, #0
   131f8:	beq	13268 <__assert_fail@plt+0x1f38>
   131fc:	mov	r0, sl
   13200:	ldr	r1, [pc, #412]	; 133a4 <__assert_fail@plt+0x2074>
   13204:	bl	11024 <strcmp@plt>
   13208:	cmp	r0, #0
   1320c:	bne	13268 <__assert_fail@plt+0x1f38>
   13210:	mov	r2, sp
   13214:	mov	r1, r7
   13218:	mov	r0, #3
   1321c:	bl	110fc <__fxstat64@plt>
   13220:	cmp	r0, #0
   13224:	beq	13280 <__assert_fail@plt+0x1f50>
   13228:	mvn	r9, #0
   1322c:	cmp	r4, #0
   13230:	bge	131d4 <__assert_fail@plt+0x1ea4>
   13234:	bl	111ec <__errno_location@plt>
   13238:	mov	r4, r0
   1323c:	mov	r0, r7
   13240:	ldr	r5, [r4]
   13244:	bl	112f4 <close@plt>
   13248:	str	r5, [r4]
   1324c:	b	131d4 <__assert_fail@plt+0x1ea4>
   13250:	ldrd	r0, [r6, #160]	; 0xa0
   13254:	ldrd	r2, [sp, #96]	; 0x60
   13258:	cmp	r1, r3
   1325c:	cmpeq	r0, r2
   13260:	bne	13294 <__assert_fail@plt+0x1f64>
   13264:	ldr	r9, [r5, #48]	; 0x30
   13268:	tst	r9, #512	; 0x200
   1326c:	bne	132c8 <__assert_fail@plt+0x1f98>
   13270:	mov	r0, r7
   13274:	bl	112a0 <fchdir@plt>
   13278:	mov	r9, r0
   1327c:	b	1322c <__assert_fail@plt+0x1efc>
   13280:	ldrd	r0, [r6, #64]	; 0x40
   13284:	ldrd	r2, [sp]
   13288:	cmp	r1, r3
   1328c:	cmpeq	r0, r2
   13290:	beq	13250 <__assert_fail@plt+0x1f20>
   13294:	bl	111ec <__errno_location@plt>
   13298:	mov	r3, #2
   1329c:	str	r3, [r0]
   132a0:	b	13228 <__assert_fail@plt+0x1ef8>
   132a4:	ldr	r2, [pc, #252]	; 133a8 <__assert_fail@plt+0x2078>
   132a8:	tst	r9, #16
   132ac:	ldr	r1, [pc, #248]	; 133ac <__assert_fail@plt+0x207c>
   132b0:	mov	r8, #1
   132b4:	movne	r1, r2
   132b8:	mov	r0, sl
   132bc:	bl	1d2fc <__assert_fail@plt+0xbfcc>
   132c0:	mov	r7, r0
   132c4:	b	131a0 <__assert_fail@plt+0x1e70>
   132c8:	ldr	r1, [r5, #32]
   132cc:	cmn	r1, #100	; 0x64
   132d0:	sub	r3, r7, r1
   132d4:	clz	r3, r3
   132d8:	lsr	r3, r3, #5
   132dc:	moveq	r3, #0
   132e0:	cmp	r3, #0
   132e4:	bne	1336c <__assert_fail@plt+0x203c>
   132e8:	cmp	r8, #0
   132ec:	beq	13350 <__assert_fail@plt+0x2020>
   132f0:	lsr	r3, r9, #2
   132f4:	eor	r3, r3, #1
   132f8:	cmp	r1, #0
   132fc:	movlt	r3, #0
   13300:	andge	r3, r3, #1
   13304:	cmp	r3, #0
   13308:	beq	13314 <__assert_fail@plt+0x1fe4>
   1330c:	mov	r0, r1
   13310:	bl	112f4 <close@plt>
   13314:	str	r7, [r5, #32]
   13318:	mov	r9, #0
   1331c:	b	131d4 <__assert_fail@plt+0x1ea4>
   13320:	mov	r0, r7
   13324:	bl	16d24 <__assert_fail@plt+0x59f4>
   13328:	ldr	r9, [r5, #48]	; 0x30
   1332c:	subs	r7, r0, #0
   13330:	movlt	r8, #1
   13334:	andlt	r3, r9, #512	; 0x200
   13338:	blt	13374 <__assert_fail@plt+0x2044>
   1333c:	tst	r9, #2
   13340:	mov	r4, r7
   13344:	mov	r8, #1
   13348:	beq	13268 <__assert_fail@plt+0x1f38>
   1334c:	b	13210 <__assert_fail@plt+0x1ee0>
   13350:	add	r0, r5, #60	; 0x3c
   13354:	bl	16ce0 <__assert_fail@plt+0x59b0>
   13358:	cmp	r0, #0
   1335c:	bge	13310 <__assert_fail@plt+0x1fe0>
   13360:	b	13314 <__assert_fail@plt+0x1fe4>
   13364:	mvn	r9, #0
   13368:	b	131d4 <__assert_fail@plt+0x1ea4>
   1336c:	bl	112e8 <abort@plt>
   13370:	and	r3, r9, #512	; 0x200
   13374:	ldr	r2, [pc, #48]	; 133ac <__assert_fail@plt+0x207c>
   13378:	tst	r9, #16
   1337c:	ldr	r1, [pc, #36]	; 133a8 <__assert_fail@plt+0x2078>
   13380:	moveq	r1, r2
   13384:	cmp	r3, #0
   13388:	bne	1318c <__assert_fail@plt+0x1e5c>
   1338c:	b	132b8 <__assert_fail@plt+0x1f88>
   13390:	tst	r9, #2
   13394:	mov	r7, r4
   13398:	mov	r8, #1
   1339c:	beq	131fc <__assert_fail@plt+0x1ecc>
   133a0:	b	13210 <__assert_fail@plt+0x1ee0>
   133a4:	andeq	lr, r1, ip, lsr fp
   133a8:	andeq	ip, r8, r0, lsl #18
   133ac:	andeq	r4, r8, r0, lsl #18
   133b0:	ldr	r3, [r0]
   133b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133b8:	sub	sp, sp, #68	; 0x44
   133bc:	mov	r6, r0
   133c0:	str	r3, [sp, #8]
   133c4:	ldr	r3, [r3, #12]
   133c8:	str	r1, [sp, #40]	; 0x28
   133cc:	cmp	r3, #0
   133d0:	str	r3, [sp, #44]	; 0x2c
   133d4:	beq	139bc <__assert_fail@plt+0x268c>
   133d8:	mov	r0, r3
   133dc:	bl	11294 <dirfd@plt>
   133e0:	cmp	r0, #0
   133e4:	str	r0, [sp, #60]	; 0x3c
   133e8:	blt	13df8 <__assert_fail@plt+0x2ac8>
   133ec:	ldr	r3, [r6, #44]	; 0x2c
   133f0:	cmp	r3, #0
   133f4:	beq	1407c <__assert_fail@plt+0x2d4c>
   133f8:	mvn	r3, #0
   133fc:	str	r3, [sp, #24]
   13400:	ldr	r0, [r6, #48]	; 0x30
   13404:	ldr	r2, [sp, #8]
   13408:	mov	r3, #1
   1340c:	str	r3, [sp, #52]	; 0x34
   13410:	ldr	r3, [r2, #40]	; 0x28
   13414:	ldr	r1, [r2, #28]
   13418:	sub	r2, r3, #1
   1341c:	ldrb	r1, [r1, r2]
   13420:	cmp	r1, #47	; 0x2f
   13424:	moveq	r3, r2
   13428:	ands	r0, r0, #4
   1342c:	movne	r0, #47	; 0x2f
   13430:	ldrne	r2, [r6, #24]
   13434:	streq	r0, [sp, #32]
   13438:	addne	r1, r2, r3
   1343c:	strbne	r0, [r2, r3]
   13440:	addne	r2, r1, #1
   13444:	strne	r2, [sp, #32]
   13448:	ldr	r2, [sp, #8]
   1344c:	add	r3, r3, #1
   13450:	ldr	r1, [r6, #36]	; 0x24
   13454:	ldr	r2, [r2, #48]	; 0x30
   13458:	mov	r0, r3
   1345c:	str	r3, [sp, #12]
   13460:	sub	r1, r1, r0
   13464:	mov	r3, #0
   13468:	add	r2, r2, #1
   1346c:	mov	r7, r3
   13470:	str	r3, [sp, #48]	; 0x30
   13474:	str	r1, [sp, #20]
   13478:	str	r2, [sp, #28]
   1347c:	str	r3, [sp, #36]	; 0x24
   13480:	str	r3, [sp]
   13484:	mov	sl, r3
   13488:	str	r3, [sp, #16]
   1348c:	b	13510 <__assert_fail@plt+0x21e0>
   13490:	tst	r3, #251	; 0xfb
   13494:	beq	13624 <__assert_fail@plt+0x22f4>
   13498:	lsr	r2, r1, #4
   1349c:	cmp	r3, #10
   134a0:	orrne	r2, r2, #1
   134a4:	tst	r2, #1
   134a8:	beq	13ae8 <__assert_fail@plt+0x27b8>
   134ac:	sub	r3, r3, #1
   134b0:	mov	r2, #11
   134b4:	cmp	r3, #11
   134b8:	strh	r2, [r4, #56]	; 0x38
   134bc:	bhi	14098 <__assert_fail@plt+0x2d68>
   134c0:	ldr	r2, [pc, #3040]	; 140a8 <__assert_fail@plt+0x2d78>
   134c4:	ldr	r1, [r2, r3, lsl #2]
   134c8:	mov	r2, #1
   134cc:	mov	r3, #0
   134d0:	str	r1, [r4, #80]	; 0x50
   134d4:	strd	r2, [r4, #112]	; 0x70
   134d8:	ldr	r3, [sp, #16]
   134dc:	str	r7, [r4, #8]
   134e0:	cmp	r3, #0
   134e4:	streq	r4, [sp, #16]
   134e8:	ldrne	r3, [sp]
   134ec:	strne	r4, [r3, #8]
   134f0:	ldr	r3, [pc, #2996]	; 140ac <__assert_fail@plt+0x2d7c>
   134f4:	cmp	sl, r3
   134f8:	beq	13774 <__assert_fail@plt+0x2444>
   134fc:	ldr	r3, [sp, #24]
   13500:	add	sl, sl, #1
   13504:	cmp	r3, sl
   13508:	bls	1388c <__assert_fail@plt+0x255c>
   1350c:	str	r4, [sp]
   13510:	ldr	r3, [sp, #8]
   13514:	ldr	r4, [r3, #12]
   13518:	cmp	r4, #0
   1351c:	beq	1388c <__assert_fail@plt+0x255c>
   13520:	bl	111ec <__errno_location@plt>
   13524:	mov	fp, r0
   13528:	mov	r0, r4
   1352c:	str	r7, [fp]
   13530:	bl	1127c <readdir64@plt>
   13534:	subs	r8, r0, #0
   13538:	beq	13c88 <__assert_fail@plt+0x2958>
   1353c:	ldr	r3, [r6, #48]	; 0x30
   13540:	tst	r3, #32
   13544:	bne	13554 <__assert_fail@plt+0x2224>
   13548:	ldrb	r3, [r8, #19]
   1354c:	cmp	r3, #46	; 0x2e
   13550:	beq	137d8 <__assert_fail@plt+0x24a8>
   13554:	add	r1, r8, #19
   13558:	mov	r0, r1
   1355c:	str	r1, [sp, #4]
   13560:	bl	111bc <strlen@plt>
   13564:	mov	r5, r0
   13568:	add	r0, r0, #176	; 0xb0
   1356c:	bic	r0, r0, #7
   13570:	bl	1ce94 <__assert_fail@plt+0xbb64>
   13574:	subs	r4, r0, #0
   13578:	beq	13880 <__assert_fail@plt+0x2550>
   1357c:	add	r9, r4, #168	; 0xa8
   13580:	ldr	r1, [sp, #4]
   13584:	mov	r2, r5
   13588:	mov	r0, r9
   1358c:	bl	11078 <memcpy@plt>
   13590:	ldr	r3, [sp, #20]
   13594:	add	r1, r4, r5
   13598:	ldr	r2, [r6, #24]
   1359c:	mov	r0, #196608	; 0x30000
   135a0:	cmp	r3, r5
   135a4:	strb	r7, [r1, #168]	; 0xa8
   135a8:	str	r5, [r4, #52]	; 0x34
   135ac:	str	r6, [r4, #44]	; 0x2c
   135b0:	str	r7, [r4, #32]
   135b4:	str	r7, [r4, #12]
   135b8:	str	r7, [r4, #16]
   135bc:	str	r7, [r4, #20]
   135c0:	str	r2, [r4, #28]
   135c4:	str	r0, [r4, #58]	; 0x3a
   135c8:	bls	1365c <__assert_fail@plt+0x232c>
   135cc:	ldr	r3, [sp, #12]
   135d0:	adds	r5, r3, r5
   135d4:	bcs	136dc <__assert_fail@plt+0x23ac>
   135d8:	ldrd	r2, [r8]
   135dc:	ldr	r1, [r6, #48]	; 0x30
   135e0:	ldr	r0, [sp, #28]
   135e4:	strd	r2, [r4, #160]	; 0xa0
   135e8:	ldr	r3, [r6]
   135ec:	tst	r1, #4
   135f0:	str	r0, [r4, #48]	; 0x30
   135f4:	str	r5, [r4, #40]	; 0x28
   135f8:	str	r3, [r4, #4]
   135fc:	streq	r9, [r4, #24]
   13600:	bne	13750 <__assert_fail@plt+0x2420>
   13604:	ldr	r3, [r6, #44]	; 0x2c
   13608:	cmp	r3, #0
   1360c:	beq	13618 <__assert_fail@plt+0x22e8>
   13610:	tst	r1, #1024	; 0x400
   13614:	beq	137c0 <__assert_fail@plt+0x2490>
   13618:	tst	r1, #8
   1361c:	ldrb	r3, [r8, #18]
   13620:	bne	13490 <__assert_fail@plt+0x2160>
   13624:	sub	r3, r3, #1
   13628:	cmp	r3, #11
   1362c:	mov	r2, #11
   13630:	strh	r2, [r4, #56]	; 0x38
   13634:	strhi	r7, [r4, #80]	; 0x50
   13638:	movhi	r2, #2
   1363c:	movhi	r3, #0
   13640:	bhi	134d4 <__assert_fail@plt+0x21a4>
   13644:	ldr	r2, [pc, #2652]	; 140a8 <__assert_fail@plt+0x2d78>
   13648:	ldr	r1, [r2, r3, lsl #2]
   1364c:	mov	r2, #2
   13650:	mov	r3, #0
   13654:	str	r1, [r4, #80]	; 0x50
   13658:	b	134d4 <__assert_fail@plt+0x21a4>
   1365c:	ldr	r0, [r6, #36]	; 0x24
   13660:	ldr	r3, [sp, #12]
   13664:	add	r1, r0, #256	; 0x100
   13668:	add	r1, r1, #1
   1366c:	add	r1, r1, r3
   13670:	add	r1, r1, r5
   13674:	cmp	r0, r1
   13678:	bhi	137f8 <__assert_fail@plt+0x24c8>
   1367c:	mov	r0, r2
   13680:	str	r1, [r6, #36]	; 0x24
   13684:	str	r2, [sp, #4]
   13688:	bl	1cec0 <__assert_fail@plt+0xbb90>
   1368c:	ldr	r2, [sp, #4]
   13690:	cmp	r0, #0
   13694:	beq	13e74 <__assert_fail@plt+0x2b44>
   13698:	cmp	r2, r0
   1369c:	str	r0, [r6, #24]
   136a0:	beq	136c0 <__assert_fail@plt+0x2390>
   136a4:	ldr	r2, [r6, #48]	; 0x30
   136a8:	tst	r2, #4
   136ac:	ldrne	r3, [sp, #12]
   136b0:	addne	r3, r0, r3
   136b4:	strne	r3, [sp, #32]
   136b8:	mov	r3, #1
   136bc:	str	r3, [sp, #36]	; 0x24
   136c0:	ldr	r2, [r6, #36]	; 0x24
   136c4:	ldr	r3, [sp, #12]
   136c8:	sub	r3, r2, r3
   136cc:	str	r3, [sp, #20]
   136d0:	ldr	r3, [sp, #12]
   136d4:	adds	r5, r3, r5
   136d8:	bcc	135d8 <__assert_fail@plt+0x22a8>
   136dc:	ldr	r8, [sp, #16]
   136e0:	mov	r0, r4
   136e4:	bl	12cdc <__assert_fail@plt+0x19ac>
   136e8:	cmp	r8, #0
   136ec:	beq	13714 <__assert_fail@plt+0x23e4>
   136f0:	ldr	r3, [r8, #12]
   136f4:	ldr	r4, [r8, #8]
   136f8:	subs	r0, r3, #0
   136fc:	beq	13704 <__assert_fail@plt+0x23d4>
   13700:	bl	1130c <closedir@plt>
   13704:	mov	r0, r8
   13708:	bl	12cdc <__assert_fail@plt+0x19ac>
   1370c:	subs	r8, r4, #0
   13710:	bne	136f0 <__assert_fail@plt+0x23c0>
   13714:	ldr	r4, [sp, #8]
   13718:	mov	r8, #0
   1371c:	ldr	r0, [r4, #12]
   13720:	bl	1130c <closedir@plt>
   13724:	ldr	r3, [r6, #48]	; 0x30
   13728:	mov	r1, #7
   1372c:	orr	r3, r3, #8192	; 0x2000
   13730:	mov	r2, #36	; 0x24
   13734:	str	r8, [r4, #12]
   13738:	strh	r1, [r4, #56]	; 0x38
   1373c:	str	r3, [r6, #48]	; 0x30
   13740:	str	r2, [fp]
   13744:	mov	r0, r8
   13748:	add	sp, sp, #68	; 0x44
   1374c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13750:	ldr	r0, [r4, #28]
   13754:	ldr	r2, [r4, #52]	; 0x34
   13758:	mov	r1, r9
   1375c:	str	r0, [r4, #24]
   13760:	add	r2, r2, #1
   13764:	ldr	r0, [sp, #32]
   13768:	bl	11048 <memmove@plt>
   1376c:	ldr	r1, [r6, #48]	; 0x30
   13770:	b	13604 <__assert_fail@plt+0x22d4>
   13774:	ldr	r3, [r6, #44]	; 0x2c
   13778:	cmp	r3, #0
   1377c:	bne	134fc <__assert_fail@plt+0x21cc>
   13780:	ldr	r1, [sp, #60]	; 0x3c
   13784:	ldr	r0, [sp, #8]
   13788:	bl	12e04 <__assert_fail@plt+0x1ad4>
   1378c:	ldr	r3, [pc, #2332]	; 140b0 <__assert_fail@plt+0x2d80>
   13790:	cmp	r0, r3
   13794:	beq	137b8 <__assert_fail@plt+0x2488>
   13798:	ldr	r3, [pc, #2324]	; 140b4 <__assert_fail@plt+0x2d84>
   1379c:	cmp	r0, r3
   137a0:	beq	137b8 <__assert_fail@plt+0x2488>
   137a4:	ldr	r3, [pc, #2316]	; 140b8 <__assert_fail@plt+0x2d88>
   137a8:	cmp	r0, r3
   137ac:	movne	r3, #1
   137b0:	strne	r3, [sp, #48]	; 0x30
   137b4:	bne	134fc <__assert_fail@plt+0x21cc>
   137b8:	str	r7, [sp, #48]	; 0x30
   137bc:	b	134fc <__assert_fail@plt+0x21cc>
   137c0:	mov	r3, r7
   137c4:	mov	r2, r4
   137c8:	ldr	r0, [r6, #32]
   137cc:	bl	12f14 <__assert_fail@plt+0x1be4>
   137d0:	strh	r0, [r4, #56]	; 0x38
   137d4:	b	134d8 <__assert_fail@plt+0x21a8>
   137d8:	ldrb	r3, [r8, #20]
   137dc:	cmp	r3, #0
   137e0:	beq	137f0 <__assert_fail@plt+0x24c0>
   137e4:	ldrh	r3, [r8, #20]
   137e8:	cmp	r3, #46	; 0x2e
   137ec:	bne	13554 <__assert_fail@plt+0x2224>
   137f0:	ldr	r4, [sp]
   137f4:	b	1350c <__assert_fail@plt+0x21dc>
   137f8:	mov	r0, r2
   137fc:	ldr	r8, [sp, #16]
   13800:	bl	12cdc <__assert_fail@plt+0x19ac>
   13804:	mov	r3, #36	; 0x24
   13808:	mov	r5, r3
   1380c:	str	r7, [r6, #24]
   13810:	str	r3, [fp]
   13814:	mov	r0, r4
   13818:	bl	12cdc <__assert_fail@plt+0x19ac>
   1381c:	cmp	r8, #0
   13820:	beq	13848 <__assert_fail@plt+0x2518>
   13824:	ldr	r3, [r8, #12]
   13828:	ldr	r4, [r8, #8]
   1382c:	subs	r0, r3, #0
   13830:	beq	13838 <__assert_fail@plt+0x2508>
   13834:	bl	1130c <closedir@plt>
   13838:	mov	r0, r8
   1383c:	bl	12cdc <__assert_fail@plt+0x19ac>
   13840:	subs	r8, r4, #0
   13844:	bne	13824 <__assert_fail@plt+0x24f4>
   13848:	ldr	r4, [sp, #8]
   1384c:	mov	r8, #0
   13850:	ldr	r0, [r4, #12]
   13854:	bl	1130c <closedir@plt>
   13858:	ldr	r3, [r6, #48]	; 0x30
   1385c:	mov	r2, #7
   13860:	orr	r3, r3, #8192	; 0x2000
   13864:	str	r8, [r4, #12]
   13868:	strh	r2, [r4, #56]	; 0x38
   1386c:	mov	r0, r8
   13870:	str	r3, [r6, #48]	; 0x30
   13874:	str	r5, [fp]
   13878:	add	sp, sp, #68	; 0x44
   1387c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13880:	ldr	r8, [sp, #16]
   13884:	ldr	r5, [fp]
   13888:	b	13814 <__assert_fail@plt+0x24e4>
   1388c:	ldr	r8, [sp, #16]
   13890:	ldr	r3, [sp, #36]	; 0x24
   13894:	cmp	r3, #0
   13898:	bne	13ce0 <__assert_fail@plt+0x29b0>
   1389c:	ldr	r3, [r6, #48]	; 0x30
   138a0:	tst	r3, #4
   138a4:	beq	138d0 <__assert_fail@plt+0x25a0>
   138a8:	ldr	r3, [r6, #36]	; 0x24
   138ac:	ldr	r2, [sp, #12]
   138b0:	cmp	sl, #0
   138b4:	cmpne	r3, r2
   138b8:	ldreq	r3, [sp, #32]
   138bc:	subeq	r3, r3, #1
   138c0:	streq	r3, [sp, #32]
   138c4:	ldr	r2, [sp, #32]
   138c8:	mov	r3, #0
   138cc:	strb	r3, [r2]
   138d0:	ldr	r3, [sp, #52]	; 0x34
   138d4:	ldr	r2, [sp, #44]	; 0x2c
   138d8:	cmp	r2, #0
   138dc:	movne	r3, #0
   138e0:	andeq	r3, r3, #1
   138e4:	cmp	r3, #0
   138e8:	beq	13978 <__assert_fail@plt+0x2648>
   138ec:	ldr	r3, [sp, #40]	; 0x28
   138f0:	cmp	sl, #0
   138f4:	cmpne	r3, #1
   138f8:	beq	13b84 <__assert_fail@plt+0x2854>
   138fc:	ldr	r3, [sp, #48]	; 0x30
   13900:	cmp	r3, #0
   13904:	bne	13d64 <__assert_fail@plt+0x2a34>
   13908:	ldr	r4, [r6, #44]	; 0x2c
   1390c:	cmp	r4, #0
   13910:	cmpne	sl, #1
   13914:	bls	13744 <__assert_fail@plt+0x2414>
   13918:	ldr	r3, [r6, #40]	; 0x28
   1391c:	cmp	sl, r3
   13920:	bls	13b18 <__assert_fail@plt+0x27e8>
   13924:	add	r1, sl, #40	; 0x28
   13928:	cmn	r1, #-1073741823	; 0xc0000001
   1392c:	str	r1, [r6, #40]	; 0x28
   13930:	bhi	13e5c <__assert_fail@plt+0x2b2c>
   13934:	lsl	r1, r1, #2
   13938:	ldr	r0, [r6, #8]
   1393c:	bl	1cec0 <__assert_fail@plt+0xbb90>
   13940:	cmp	r0, #0
   13944:	beq	13e5c <__assert_fail@plt+0x2b2c>
   13948:	str	r0, [r6, #8]
   1394c:	b	13b1c <__assert_fail@plt+0x27ec>
   13950:	ldr	r1, [sp, #8]
   13954:	ldr	r3, [pc, #1888]	; 140bc <__assert_fail@plt+0x2d8c>
   13958:	mvn	r2, #0
   1395c:	ldr	r1, [r1, #4]
   13960:	mov	r0, r6
   13964:	bl	13118 <__assert_fail@plt+0x1de8>
   13968:	adds	r5, r0, #0
   1396c:	movne	r5, #1
   13970:	cmp	r5, #0
   13974:	bne	13f20 <__assert_fail@plt+0x2bf0>
   13978:	cmp	sl, #0
   1397c:	bne	138fc <__assert_fail@plt+0x25cc>
   13980:	ldr	r3, [sp, #40]	; 0x28
   13984:	cmp	r3, #3
   13988:	beq	13ee8 <__assert_fail@plt+0x2bb8>
   1398c:	cmp	r8, #0
   13990:	beq	13e18 <__assert_fail@plt+0x2ae8>
   13994:	ldr	r3, [r8, #12]
   13998:	ldr	r4, [r8, #8]
   1399c:	subs	r0, r3, #0
   139a0:	beq	139a8 <__assert_fail@plt+0x2678>
   139a4:	bl	1130c <closedir@plt>
   139a8:	mov	r0, r8
   139ac:	bl	12cdc <__assert_fail@plt+0x19ac>
   139b0:	subs	r8, r4, #0
   139b4:	bne	13994 <__assert_fail@plt+0x2664>
   139b8:	b	13e18 <__assert_fail@plt+0x2ae8>
   139bc:	ldr	r3, [r0, #48]	; 0x30
   139c0:	ldr	ip, [sp, #8]
   139c4:	and	r2, r3, #516	; 0x204
   139c8:	cmp	r2, #512	; 0x200
   139cc:	mvnne	r0, #99	; 0x63
   139d0:	ldreq	r0, [r0, #32]
   139d4:	ands	r2, r3, #16
   139d8:	ldr	r1, [ip, #24]
   139dc:	bne	13af8 <__assert_fail@plt+0x27c8>
   139e0:	add	r3, sp, #60	; 0x3c
   139e4:	bl	16e0c <__assert_fail@plt+0x5adc>
   139e8:	ldr	r3, [sp, #8]
   139ec:	cmp	r0, #0
   139f0:	mov	r8, r0
   139f4:	str	r0, [r3, #12]
   139f8:	beq	13f68 <__assert_fail@plt+0x2c38>
   139fc:	ldrh	r3, [r3, #56]	; 0x38
   13a00:	cmp	r3, #11
   13a04:	beq	13f90 <__assert_fail@plt+0x2c60>
   13a08:	ldr	r0, [r6, #48]	; 0x30
   13a0c:	tst	r0, #256	; 0x100
   13a10:	bne	13bec <__assert_fail@plt+0x28bc>
   13a14:	ldr	r2, [r6, #44]	; 0x2c
   13a18:	ldr	r3, [pc, #1696]	; 140c0 <__assert_fail@plt+0x2d90>
   13a1c:	cmp	r2, #0
   13a20:	mvnne	r3, #0
   13a24:	str	r3, [sp, #24]
   13a28:	ldr	r3, [sp, #40]	; 0x28
   13a2c:	cmp	r3, #2
   13a30:	beq	13e94 <__assert_fail@plt+0x2b64>
   13a34:	ldr	r3, [r6, #48]	; 0x30
   13a38:	and	r3, r3, #56	; 0x38
   13a3c:	cmp	r3, #24
   13a40:	beq	13fb0 <__assert_fail@plt+0x2c80>
   13a44:	ldr	r3, [sp, #40]	; 0x28
   13a48:	mov	r4, #1
   13a4c:	sub	r5, r3, #3
   13a50:	clz	r5, r5
   13a54:	lsr	r5, r5, #5
   13a58:	ldr	r3, [r6, #48]	; 0x30
   13a5c:	tst	r3, #512	; 0x200
   13a60:	bne	13f04 <__assert_fail@plt+0x2bd4>
   13a64:	ldr	r2, [sp, #60]	; 0x3c
   13a68:	cmp	r2, #0
   13a6c:	blt	13a88 <__assert_fail@plt+0x2758>
   13a70:	mov	r3, #0
   13a74:	ldr	r1, [sp, #8]
   13a78:	mov	r0, r6
   13a7c:	bl	13118 <__assert_fail@plt+0x1de8>
   13a80:	cmp	r0, #0
   13a84:	beq	13400 <__assert_fail@plt+0x20d0>
   13a88:	tst	r4, r5
   13a8c:	bne	14008 <__assert_fail@plt+0x2cd8>
   13a90:	ldr	r4, [sp, #8]
   13a94:	ldrh	r3, [r4, #58]	; 0x3a
   13a98:	ldr	r0, [r4, #12]
   13a9c:	orr	r3, r3, #1
   13aa0:	strh	r3, [r4, #58]	; 0x3a
   13aa4:	bl	1130c <closedir@plt>
   13aa8:	ldr	r0, [r6, #48]	; 0x30
   13aac:	mov	r3, #0
   13ab0:	tst	r0, #512	; 0x200
   13ab4:	str	r3, [r4, #12]
   13ab8:	beq	13ad4 <__assert_fail@plt+0x27a4>
   13abc:	ldr	r3, [sp, #60]	; 0x3c
   13ac0:	cmp	r3, #0
   13ac4:	blt	13ad4 <__assert_fail@plt+0x27a4>
   13ac8:	mov	r0, r3
   13acc:	bl	112f4 <close@plt>
   13ad0:	ldr	r0, [r6, #48]	; 0x30
   13ad4:	ldr	r2, [sp, #8]
   13ad8:	mov	r3, #0
   13adc:	str	r3, [sp, #52]	; 0x34
   13ae0:	str	r3, [r2, #12]
   13ae4:	b	13410 <__assert_fail@plt+0x20e0>
   13ae8:	mov	r3, #11
   13aec:	strh	r3, [r4, #56]	; 0x38
   13af0:	mov	r3, #9
   13af4:	b	13644 <__assert_fail@plt+0x2314>
   13af8:	tst	r3, #1
   13afc:	moveq	r2, #32768	; 0x8000
   13b00:	beq	139e0 <__assert_fail@plt+0x26b0>
   13b04:	ldr	r2, [ip, #48]	; 0x30
   13b08:	cmp	r2, #0
   13b0c:	movne	r2, #32768	; 0x8000
   13b10:	moveq	r2, #0
   13b14:	b	139e0 <__assert_fail@plt+0x26b0>
   13b18:	ldr	r0, [r6, #8]
   13b1c:	cmp	r8, #0
   13b20:	movne	r2, r0
   13b24:	beq	13b38 <__assert_fail@plt+0x2808>
   13b28:	str	r8, [r2], #4
   13b2c:	ldr	r8, [r8, #8]
   13b30:	cmp	r8, #0
   13b34:	bne	13b28 <__assert_fail@plt+0x27f8>
   13b38:	mov	r3, r4
   13b3c:	mov	r2, #4
   13b40:	mov	r1, sl
   13b44:	bl	112ac <qsort@plt>
   13b48:	ldr	ip, [r6, #8]
   13b4c:	sub	r3, sl, #1
   13b50:	mov	r2, ip
   13b54:	ldr	r8, [ip]
   13b58:	ldr	r1, [r2]
   13b5c:	ldr	r0, [r2, #4]!
   13b60:	subs	r3, r3, #1
   13b64:	str	r0, [r1, #8]
   13b68:	bne	13b58 <__assert_fail@plt+0x2828>
   13b6c:	add	sl, ip, sl, lsl #2
   13b70:	mov	r0, r8
   13b74:	ldr	r2, [sl, #-4]
   13b78:	str	r3, [r2, #8]
   13b7c:	add	sp, sp, #68	; 0x44
   13b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b84:	ldr	r3, [sp, #8]
   13b88:	ldr	r3, [r3, #48]	; 0x30
   13b8c:	cmp	r3, #0
   13b90:	bne	13950 <__assert_fail@plt+0x2620>
   13b94:	ldr	r2, [r6, #48]	; 0x30
   13b98:	tst	r2, #4
   13b9c:	movne	r5, r3
   13ba0:	addne	r4, r6, #60	; 0x3c
   13ba4:	bne	13bd4 <__assert_fail@plt+0x28a4>
   13ba8:	tst	r2, #512	; 0x200
   13bac:	bne	14020 <__assert_fail@plt+0x2cf0>
   13bb0:	ldr	r0, [r6, #28]
   13bb4:	bl	112a0 <fchdir@plt>
   13bb8:	add	r4, r6, #60	; 0x3c
   13bbc:	adds	r5, r0, #0
   13bc0:	movne	r5, #1
   13bc4:	b	13bd4 <__assert_fail@plt+0x28a4>
   13bc8:	bl	16d24 <__assert_fail@plt+0x59f4>
   13bcc:	cmp	r0, #0
   13bd0:	bge	13e54 <__assert_fail@plt+0x2b24>
   13bd4:	mov	r0, r4
   13bd8:	bl	16cd8 <__assert_fail@plt+0x59a8>
   13bdc:	cmp	r0, #0
   13be0:	mov	r0, r4
   13be4:	beq	13bc8 <__assert_fail@plt+0x2898>
   13be8:	b	13970 <__assert_fail@plt+0x2640>
   13bec:	ldr	r5, [sp, #8]
   13bf0:	add	r1, r6, #56	; 0x38
   13bf4:	mov	r2, r5
   13bf8:	bl	13060 <__assert_fail@plt+0x1d30>
   13bfc:	mov	r3, #0
   13c00:	mov	r2, r5
   13c04:	ldr	r1, [r6, #48]	; 0x30
   13c08:	ldr	r0, [r6, #32]
   13c0c:	bl	12f14 <__assert_fail@plt+0x1be4>
   13c10:	ldr	r2, [r6, #48]	; 0x30
   13c14:	ldr	r3, [pc, #1192]	; 140c4 <__assert_fail@plt+0x2d94>
   13c18:	mov	r7, r5
   13c1c:	and	r3, r3, r2
   13c20:	cmp	r3, #0
   13c24:	beq	13ea8 <__assert_fail@plt+0x2b78>
   13c28:	mov	r0, #24
   13c2c:	bl	1ce94 <__assert_fail@plt+0xbb64>
   13c30:	subs	r4, r0, #0
   13c34:	beq	1404c <__assert_fail@plt+0x2d1c>
   13c38:	ldrd	r0, [r5, #160]	; 0xa0
   13c3c:	ldrd	r2, [r5, #64]	; 0x40
   13c40:	str	r5, [r4, #16]
   13c44:	strd	r0, [r4, #8]
   13c48:	strd	r2, [r4]
   13c4c:	mov	r1, r4
   13c50:	ldr	r0, [r6, #56]	; 0x38
   13c54:	bl	16508 <__assert_fail@plt+0x51d8>
   13c58:	cmp	r4, r0
   13c5c:	mov	r5, r0
   13c60:	beq	13a14 <__assert_fail@plt+0x26e4>
   13c64:	mov	r0, r4
   13c68:	bl	12cdc <__assert_fail@plt+0x19ac>
   13c6c:	cmp	r5, #0
   13c70:	beq	1404c <__assert_fail@plt+0x2d1c>
   13c74:	ldr	r2, [r5, #16]
   13c78:	mov	r3, #2
   13c7c:	str	r2, [r7]
   13c80:	strh	r3, [r7, #56]	; 0x38
   13c84:	b	13a14 <__assert_fail@plt+0x26e4>
   13c88:	ldr	r3, [fp]
   13c8c:	ldr	r8, [sp, #16]
   13c90:	cmp	r3, #0
   13c94:	beq	13cb8 <__assert_fail@plt+0x2988>
   13c98:	ldr	r2, [sp, #44]	; 0x2c
   13c9c:	ldr	r1, [sp, #8]
   13ca0:	cmp	sl, #0
   13ca4:	cmpeq	r2, #0
   13ca8:	moveq	r2, #4
   13cac:	movne	r2, #7
   13cb0:	str	r3, [r1, #32]
   13cb4:	strh	r2, [r1, #56]	; 0x38
   13cb8:	ldr	r4, [sp, #8]
   13cbc:	ldr	r0, [r4, #12]
   13cc0:	cmp	r0, #0
   13cc4:	beq	13890 <__assert_fail@plt+0x2560>
   13cc8:	bl	1130c <closedir@plt>
   13ccc:	mov	r3, #0
   13cd0:	str	r3, [r4, #12]
   13cd4:	ldr	r3, [sp, #36]	; 0x24
   13cd8:	cmp	r3, #0
   13cdc:	beq	1389c <__assert_fail@plt+0x256c>
   13ce0:	ldr	r1, [r6, #4]
   13ce4:	ldr	r0, [r6, #24]
   13ce8:	cmp	r1, #0
   13cec:	beq	13d1c <__assert_fail@plt+0x29ec>
   13cf0:	ldr	r3, [r1, #24]
   13cf4:	add	r2, r1, #168	; 0xa8
   13cf8:	cmp	r3, r2
   13cfc:	ldrne	r2, [r1, #28]
   13d00:	str	r0, [r1, #28]
   13d04:	subne	r3, r3, r2
   13d08:	addne	r3, r0, r3
   13d0c:	strne	r3, [r1, #24]
   13d10:	ldr	r1, [r1, #8]
   13d14:	cmp	r1, #0
   13d18:	bne	13cf0 <__assert_fail@plt+0x29c0>
   13d1c:	mov	r3, r8
   13d20:	b	13d50 <__assert_fail@plt+0x2a20>
   13d24:	ldr	r2, [r3, #24]
   13d28:	cmp	r2, r1
   13d2c:	ldrne	r1, [r3, #28]
   13d30:	str	r0, [r3, #28]
   13d34:	subne	r2, r2, r1
   13d38:	addne	r2, r0, r2
   13d3c:	strne	r2, [r3, #24]
   13d40:	ldr	r2, [r3, #8]
   13d44:	cmp	r2, #0
   13d48:	ldreq	r2, [r3, #4]
   13d4c:	mov	r3, r2
   13d50:	ldr	r2, [r3, #48]	; 0x30
   13d54:	add	r1, r3, #168	; 0xa8
   13d58:	cmp	r2, #0
   13d5c:	bge	13d24 <__assert_fail@plt+0x29f4>
   13d60:	b	1389c <__assert_fail@plt+0x256c>
   13d64:	ldr	r2, [r6, #40]	; 0x28
   13d68:	ldr	r3, [pc, #856]	; 140c8 <__assert_fail@plt+0x2d98>
   13d6c:	cmp	sl, r2
   13d70:	str	r3, [r6, #44]	; 0x2c
   13d74:	bhi	13e28 <__assert_fail@plt+0x2af8>
   13d78:	ldr	r0, [r6, #8]
   13d7c:	cmp	r8, #0
   13d80:	movne	r3, r0
   13d84:	beq	13d98 <__assert_fail@plt+0x2a68>
   13d88:	str	r8, [r3], #4
   13d8c:	ldr	r8, [r8, #8]
   13d90:	cmp	r8, #0
   13d94:	bne	13d88 <__assert_fail@plt+0x2a58>
   13d98:	ldr	r3, [pc, #808]	; 140c8 <__assert_fail@plt+0x2d98>
   13d9c:	mov	r2, #4
   13da0:	mov	r1, sl
   13da4:	bl	112ac <qsort@plt>
   13da8:	ldr	ip, [r6, #8]
   13dac:	subs	r3, sl, #1
   13db0:	ldr	r8, [ip]
   13db4:	moveq	r3, r8
   13db8:	beq	13ddc <__assert_fail@plt+0x2aac>
   13dbc:	mov	r2, ip
   13dc0:	ldr	r1, [r2]
   13dc4:	ldr	r0, [r2, #4]!
   13dc8:	subs	r3, r3, #1
   13dcc:	str	r0, [r1, #8]
   13dd0:	bne	13dc0 <__assert_fail@plt+0x2a90>
   13dd4:	add	ip, ip, sl, lsl #2
   13dd8:	ldr	r3, [ip, #-4]
   13ddc:	mov	r2, #0
   13de0:	str	r2, [r3, #8]
   13de4:	mov	r3, #0
   13de8:	mov	r0, r8
   13dec:	str	r3, [r6, #44]	; 0x2c
   13df0:	add	sp, sp, #68	; 0x44
   13df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df8:	ldr	r4, [sp, #8]
   13dfc:	mov	r8, #0
   13e00:	ldr	r0, [r4, #12]
   13e04:	bl	1130c <closedir@plt>
   13e08:	ldr	r3, [sp, #40]	; 0x28
   13e0c:	str	r8, [r4, #12]
   13e10:	cmp	r3, #3
   13e14:	beq	13f74 <__assert_fail@plt+0x2c44>
   13e18:	mov	r8, #0
   13e1c:	mov	r0, r8
   13e20:	add	sp, sp, #68	; 0x44
   13e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e28:	add	r1, sl, #40	; 0x28
   13e2c:	cmn	r1, #-1073741823	; 0xc0000001
   13e30:	str	r1, [r6, #40]	; 0x28
   13e34:	bhi	13ed0 <__assert_fail@plt+0x2ba0>
   13e38:	lsl	r1, r1, #2
   13e3c:	ldr	r0, [r6, #8]
   13e40:	bl	1cec0 <__assert_fail@plt+0xbb90>
   13e44:	cmp	r0, #0
   13e48:	beq	13ed0 <__assert_fail@plt+0x2ba0>
   13e4c:	str	r0, [r6, #8]
   13e50:	b	13d7c <__assert_fail@plt+0x2a4c>
   13e54:	bl	112f4 <close@plt>
   13e58:	b	13bd4 <__assert_fail@plt+0x28a4>
   13e5c:	ldr	r0, [r6, #8]
   13e60:	bl	12cdc <__assert_fail@plt+0x19ac>
   13e64:	mov	r3, #0
   13e68:	str	r3, [r6, #8]
   13e6c:	str	r3, [r6, #40]	; 0x28
   13e70:	b	13744 <__assert_fail@plt+0x2414>
   13e74:	str	r0, [sp]
   13e78:	ldr	r0, [r6, #24]
   13e7c:	ldr	r8, [sp, #16]
   13e80:	bl	12cdc <__assert_fail@plt+0x19ac>
   13e84:	ldr	r1, [sp]
   13e88:	ldr	r5, [fp]
   13e8c:	str	r1, [r6, #24]
   13e90:	b	13814 <__assert_fail@plt+0x24e4>
   13e94:	mov	r3, #0
   13e98:	str	r3, [sp, #52]	; 0x34
   13e9c:	ldr	r0, [r6, #48]	; 0x30
   13ea0:	ldr	r2, [sp, #8]
   13ea4:	b	13410 <__assert_fail@plt+0x20e0>
   13ea8:	ldr	r4, [sp, #8]
   13eac:	ldr	r0, [r6, #56]	; 0x38
   13eb0:	add	r1, r4, #64	; 0x40
   13eb4:	bl	1cfbc <__assert_fail@plt+0xbc8c>
   13eb8:	cmp	r0, #0
   13ebc:	movne	r2, r4
   13ec0:	movne	r3, #2
   13ec4:	strne	r4, [r2]
   13ec8:	strhne	r3, [r4, #56]	; 0x38
   13ecc:	b	13a14 <__assert_fail@plt+0x26e4>
   13ed0:	ldr	r0, [r6, #8]
   13ed4:	bl	12cdc <__assert_fail@plt+0x19ac>
   13ed8:	mov	r3, #0
   13edc:	str	r3, [r6, #8]
   13ee0:	str	r3, [r6, #40]	; 0x28
   13ee4:	b	13de4 <__assert_fail@plt+0x2ab4>
   13ee8:	ldr	r2, [sp, #8]
   13eec:	ldrh	r3, [r2, #56]	; 0x38
   13ef0:	cmp	r3, #7
   13ef4:	cmpne	r3, #4
   13ef8:	movne	r3, #6
   13efc:	strhne	r3, [r2, #56]	; 0x38
   13f00:	b	1398c <__assert_fail@plt+0x265c>
   13f04:	mov	r2, #3
   13f08:	ldr	r1, [pc, #444]	; 140cc <__assert_fail@plt+0x2d9c>
   13f0c:	ldr	r0, [sp, #60]	; 0x3c
   13f10:	bl	1d128 <__assert_fail@plt+0xbdf8>
   13f14:	mov	r2, r0
   13f18:	str	r0, [sp, #60]	; 0x3c
   13f1c:	b	13a68 <__assert_fail@plt+0x2738>
   13f20:	ldr	r3, [r6, #48]	; 0x30
   13f24:	ldr	r1, [sp, #8]
   13f28:	orr	r3, r3, #8192	; 0x2000
   13f2c:	mov	r2, #7
   13f30:	cmp	r8, #0
   13f34:	strh	r2, [r1, #56]	; 0x38
   13f38:	str	r3, [r6, #48]	; 0x30
   13f3c:	beq	13e18 <__assert_fail@plt+0x2ae8>
   13f40:	ldr	r3, [r8, #12]
   13f44:	ldr	r4, [r8, #8]
   13f48:	subs	r0, r3, #0
   13f4c:	beq	13f54 <__assert_fail@plt+0x2c24>
   13f50:	bl	1130c <closedir@plt>
   13f54:	mov	r0, r8
   13f58:	bl	12cdc <__assert_fail@plt+0x19ac>
   13f5c:	subs	r8, r4, #0
   13f60:	bne	13f40 <__assert_fail@plt+0x2c10>
   13f64:	b	13e18 <__assert_fail@plt+0x2ae8>
   13f68:	ldr	r3, [sp, #40]	; 0x28
   13f6c:	cmp	r3, #3
   13f70:	bne	13e18 <__assert_fail@plt+0x2ae8>
   13f74:	ldr	r4, [sp, #8]
   13f78:	mov	r3, #4
   13f7c:	strh	r3, [r4, #56]	; 0x38
   13f80:	bl	111ec <__errno_location@plt>
   13f84:	ldr	r3, [r0]
   13f88:	str	r3, [r4, #32]
   13f8c:	b	13744 <__assert_fail@plt+0x2414>
   13f90:	ldr	r4, [sp, #8]
   13f94:	mov	r3, #0
   13f98:	mov	r2, r4
   13f9c:	ldr	r1, [r6, #48]	; 0x30
   13fa0:	ldr	r0, [r6, #32]
   13fa4:	bl	12f14 <__assert_fail@plt+0x1be4>
   13fa8:	strh	r0, [r4, #56]	; 0x38
   13fac:	b	13a14 <__assert_fail@plt+0x26e4>
   13fb0:	ldr	r3, [sp, #8]
   13fb4:	ldr	r3, [r3, #84]	; 0x54
   13fb8:	cmp	r3, #2
   13fbc:	bne	13a44 <__assert_fail@plt+0x2714>
   13fc0:	ldr	r1, [sp, #60]	; 0x3c
   13fc4:	ldr	r0, [sp, #8]
   13fc8:	bl	12e04 <__assert_fail@plt+0x1ad4>
   13fcc:	ldr	r3, [pc, #220]	; 140b0 <__assert_fail@plt+0x2d80>
   13fd0:	cmp	r0, r3
   13fd4:	beq	13a44 <__assert_fail@plt+0x2714>
   13fd8:	bgt	14060 <__assert_fail@plt+0x2d30>
   13fdc:	ldr	r3, [pc, #212]	; 140b8 <__assert_fail@plt+0x2d88>
   13fe0:	cmp	r0, r3
   13fe4:	beq	13a44 <__assert_fail@plt+0x2714>
   13fe8:	cmp	r0, #0
   13fec:	beq	13a44 <__assert_fail@plt+0x2714>
   13ff0:	ldr	r3, [sp, #40]	; 0x28
   13ff4:	cmp	r3, #3
   13ff8:	bne	13e94 <__assert_fail@plt+0x2b64>
   13ffc:	mov	r5, #1
   14000:	mov	r4, #0
   14004:	b	13a58 <__assert_fail@plt+0x2728>
   14008:	bl	111ec <__errno_location@plt>
   1400c:	ldr	r2, [sp, #8]
   14010:	mov	r4, r2
   14014:	ldr	r3, [r0]
   14018:	str	r3, [r2, #32]
   1401c:	b	13a94 <__assert_fail@plt+0x2764>
   14020:	add	r4, r6, #60	; 0x3c
   14024:	mov	r0, r4
   14028:	ldr	r1, [r6, #32]
   1402c:	bl	16ce0 <__assert_fail@plt+0x59b0>
   14030:	cmp	r0, #0
   14034:	blt	1403c <__assert_fail@plt+0x2d0c>
   14038:	bl	112f4 <close@plt>
   1403c:	mvn	r3, #99	; 0x63
   14040:	str	r3, [r6, #32]
   14044:	mov	r5, #0
   14048:	b	13bd4 <__assert_fail@plt+0x28a4>
   1404c:	bl	111ec <__errno_location@plt>
   14050:	mov	r3, #12
   14054:	mov	r8, #0
   14058:	str	r3, [r0]
   1405c:	b	13744 <__assert_fail@plt+0x2414>
   14060:	ldr	r3, [pc, #104]	; 140d0 <__assert_fail@plt+0x2da0>
   14064:	cmp	r0, r3
   14068:	beq	13a44 <__assert_fail@plt+0x2714>
   1406c:	ldr	r3, [pc, #96]	; 140d4 <__assert_fail@plt+0x2da4>
   14070:	cmp	r0, r3
   14074:	bne	13ff0 <__assert_fail@plt+0x2cc0>
   14078:	b	13a44 <__assert_fail@plt+0x2714>
   1407c:	ldr	r3, [pc, #60]	; 140c0 <__assert_fail@plt+0x2d90>
   14080:	ldr	r0, [r6, #48]	; 0x30
   14084:	str	r3, [sp, #24]
   14088:	mov	r3, #1
   1408c:	str	r3, [sp, #52]	; 0x34
   14090:	ldr	r2, [sp, #8]
   14094:	b	13410 <__assert_fail@plt+0x20e0>
   14098:	str	r7, [r4, #80]	; 0x50
   1409c:	mov	r2, #1
   140a0:	mov	r3, #0
   140a4:	b	134d4 <__assert_fail@plt+0x21a4>
   140a8:	andeq	lr, r1, ip, lsl #22
   140ac:	andeq	r2, r0, r0, lsl r7
   140b0:	andeq	r6, r0, r9, ror #18
   140b4:			; <UNDEFINED> instruction: 0x01021994
   140b8:			; <UNDEFINED> instruction: 0xff534d42
   140bc:	andeq	lr, r1, ip, lsr fp
   140c0:	andeq	r8, r1, r0, lsr #13
   140c4:	andeq	r0, r0, r2, lsl #2
   140c8:	ldrdeq	r2, [r1], -r4
   140cc:	andeq	r0, r0, r6, lsl #8
   140d0:	andeq	r9, r0, r0, lsr #31
   140d4:	movtpl	r4, #24911	; 0x614f
   140d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140dc:	bic	r8, r1, #4080	; 0xff0
   140e0:	sub	sp, sp, #36	; 0x24
   140e4:	bic	r8, r8, #15
   140e8:	cmp	r8, #0
   140ec:	str	r2, [sp, #12]
   140f0:	bne	14598 <__assert_fail@plt+0x3268>
   140f4:	and	r3, r1, #516	; 0x204
   140f8:	cmp	r3, #516	; 0x204
   140fc:	mov	r5, r1
   14100:	beq	144fc <__assert_fail@plt+0x31cc>
   14104:	ands	r8, r1, #18
   14108:	beq	144fc <__assert_fail@plt+0x31cc>
   1410c:	mov	r9, r0
   14110:	mov	r1, #96	; 0x60
   14114:	mov	r0, #1
   14118:	bl	1ce4c <__assert_fail@plt+0xbb1c>
   1411c:	subs	r8, r0, #0
   14120:	beq	14454 <__assert_fail@plt+0x3124>
   14124:	ldr	r3, [sp, #12]
   14128:	tst	r5, #2
   1412c:	str	r3, [r8, #44]	; 0x2c
   14130:	bicne	r3, r5, #512	; 0x200
   14134:	orrne	r3, r3, #4
   14138:	strne	r3, [r8, #48]	; 0x30
   1413c:	ldr	r3, [r9]
   14140:	streq	r5, [r8, #48]	; 0x30
   14144:	mvn	r2, #99	; 0x63
   14148:	cmp	r3, #0
   1414c:	str	r2, [r8, #32]
   14150:	beq	145fc <__assert_fail@plt+0x32cc>
   14154:	mov	r6, r9
   14158:	mov	r4, #0
   1415c:	mov	r0, r3
   14160:	bl	111bc <strlen@plt>
   14164:	ldr	r3, [r6, #4]!
   14168:	cmp	r4, r0
   1416c:	movcc	r4, r0
   14170:	cmp	r3, #0
   14174:	bne	1415c <__assert_fail@plt+0x2e2c>
   14178:	add	r4, r4, #1
   1417c:	cmp	r4, #4096	; 0x1000
   14180:	movcc	r4, #4096	; 0x1000
   14184:	ldr	r3, [r8, #36]	; 0x24
   14188:	add	r1, r3, #256	; 0x100
   1418c:	add	r1, r1, r4
   14190:	cmp	r3, r1
   14194:	bhi	144c8 <__assert_fail@plt+0x3198>
   14198:	str	r1, [r8, #36]	; 0x24
   1419c:	ldr	r0, [r8, #24]
   141a0:	bl	1cec0 <__assert_fail@plt+0xbb90>
   141a4:	subs	r4, r0, #0
   141a8:	beq	14698 <__assert_fail@plt+0x3368>
   141ac:	ldr	fp, [r9]
   141b0:	str	r4, [r8, #24]
   141b4:	cmp	fp, #0
   141b8:	beq	1457c <__assert_fail@plt+0x324c>
   141bc:	mov	r0, #176	; 0xb0
   141c0:	bl	1ce94 <__assert_fail@plt+0xbb64>
   141c4:	subs	r3, r0, #0
   141c8:	mov	r0, r3
   141cc:	str	r3, [sp, #16]
   141d0:	beq	144bc <__assert_fail@plt+0x318c>
   141d4:	ldr	r2, [r8, #24]
   141d8:	ldr	r3, [sp, #12]
   141dc:	mov	r1, #196608	; 0x30000
   141e0:	cmp	r3, #0
   141e4:	str	r2, [r0, #28]
   141e8:	mov	r3, #0
   141ec:	mvn	r2, #0
   141f0:	str	r8, [r0, #44]	; 0x2c
   141f4:	strb	r3, [r0, #168]	; 0xa8
   141f8:	str	r3, [r0, #52]	; 0x34
   141fc:	str	r3, [r0, #32]
   14200:	str	r3, [r0, #12]
   14204:	str	r3, [r0, #16]
   14208:	str	r3, [r0, #20]
   1420c:	str	r1, [r0, #58]	; 0x3a
   14210:	str	r2, [r0, #48]	; 0x30
   14214:	ldr	fp, [r9]
   14218:	beq	145f0 <__assert_fail@plt+0x32c0>
   1421c:	ldr	r3, [r8, #48]	; 0x30
   14220:	lsr	r3, r3, #10
   14224:	and	r3, r3, #1
   14228:	str	r3, [sp, #24]
   1422c:	cmp	fp, #0
   14230:	beq	146b0 <__assert_fail@plt+0x3380>
   14234:	lsr	r5, r5, #11
   14238:	mov	r3, #0
   1423c:	eor	r5, r5, #1
   14240:	mov	r6, r3
   14244:	str	r3, [sp, #28]
   14248:	and	r3, r5, #1
   1424c:	str	r3, [sp, #20]
   14250:	mov	sl, r6
   14254:	mov	r7, r6
   14258:	b	14298 <__assert_fail@plt+0x2f68>
   1425c:	mov	r3, #11
   14260:	strh	r3, [r4, #56]	; 0x38
   14264:	mov	r2, #2
   14268:	mov	r3, #0
   1426c:	strd	r2, [r4, #112]	; 0x70
   14270:	ldr	r3, [sp, #12]
   14274:	cmp	r3, #0
   14278:	beq	14378 <__assert_fail@plt+0x3048>
   1427c:	ldr	fp, [r9, #4]!
   14280:	str	r7, [r4, #8]
   14284:	cmp	fp, #0
   14288:	mov	r7, r4
   1428c:	add	r4, sl, #1
   14290:	beq	143a4 <__assert_fail@plt+0x3074>
   14294:	mov	sl, r4
   14298:	mov	r0, fp
   1429c:	bl	111bc <strlen@plt>
   142a0:	ldr	r3, [sp, #20]
   142a4:	cmp	r0, #2
   142a8:	movls	r3, #0
   142ac:	andhi	r3, r3, #1
   142b0:	cmp	r3, #0
   142b4:	mov	r5, r0
   142b8:	beq	142d0 <__assert_fail@plt+0x2fa0>
   142bc:	sub	r2, r0, #1
   142c0:	add	r3, fp, r2
   142c4:	ldrb	r2, [fp, r2]
   142c8:	cmp	r2, #47	; 0x2f
   142cc:	beq	14460 <__assert_fail@plt+0x3130>
   142d0:	add	r0, r5, #176	; 0xb0
   142d4:	bic	r0, r0, #7
   142d8:	bl	1ce94 <__assert_fail@plt+0xbb64>
   142dc:	subs	r4, r0, #0
   142e0:	beq	14488 <__assert_fail@plt+0x3158>
   142e4:	add	r3, r4, #168	; 0xa8
   142e8:	mov	r1, fp
   142ec:	mov	r0, r3
   142f0:	mov	r2, r5
   142f4:	bl	11078 <memcpy@plt>
   142f8:	add	r1, r4, r5
   142fc:	ldr	r2, [r8, #24]
   14300:	strb	r6, [r1, #168]	; 0xa8
   14304:	str	r5, [r4, #52]	; 0x34
   14308:	str	r8, [r4, #44]	; 0x2c
   1430c:	str	r6, [r4, #32]
   14310:	str	r6, [r4, #12]
   14314:	str	r6, [r4, #16]
   14318:	str	r6, [r4, #20]
   1431c:	str	r6, [r4, #48]	; 0x30
   14320:	str	r2, [r4, #28]
   14324:	mov	r3, r0
   14328:	ldr	r0, [sp, #24]
   1432c:	str	r3, [r4, #24]
   14330:	mov	r3, #196608	; 0x30000
   14334:	cmp	r7, #0
   14338:	moveq	r0, #0
   1433c:	andne	r0, r0, #1
   14340:	str	r3, [r4, #58]	; 0x3a
   14344:	ldr	r3, [sp, #16]
   14348:	cmp	r0, #0
   1434c:	str	r3, [r4, #4]
   14350:	bne	1425c <__assert_fail@plt+0x2f2c>
   14354:	mov	r3, r6
   14358:	mov	r2, r4
   1435c:	ldr	r1, [r8, #48]	; 0x30
   14360:	ldr	r0, [r8, #32]
   14364:	bl	12f14 <__assert_fail@plt+0x1be4>
   14368:	ldr	r3, [sp, #12]
   1436c:	cmp	r3, #0
   14370:	strh	r0, [r4, #56]	; 0x38
   14374:	bne	1427c <__assert_fail@plt+0x2f4c>
   14378:	cmp	r7, #0
   1437c:	str	r3, [r4, #8]
   14380:	ldrne	r3, [sp, #28]
   14384:	ldr	fp, [r9, #4]!
   14388:	strne	r4, [sp, #28]
   1438c:	strne	r4, [r3, #8]
   14390:	streq	r4, [sp, #28]
   14394:	moveq	r7, r4
   14398:	cmp	fp, #0
   1439c:	add	r4, sl, #1
   143a0:	bne	14294 <__assert_fail@plt+0x2f64>
   143a4:	ldr	r3, [sp, #12]
   143a8:	cmp	r3, #0
   143ac:	cmpne	r4, #1
   143b0:	bhi	145b4 <__assert_fail@plt+0x3284>
   143b4:	mov	r0, #176	; 0xb0
   143b8:	bl	1ce94 <__assert_fail@plt+0xbb64>
   143bc:	cmp	r0, #0
   143c0:	beq	146a8 <__assert_fail@plt+0x3378>
   143c4:	ldr	r2, [r8, #48]	; 0x30
   143c8:	ldr	r3, [pc, #744]	; 146b8 <__assert_fail@plt+0x3388>
   143cc:	ldr	lr, [r8, #24]
   143d0:	and	r3, r3, r2
   143d4:	mov	r1, #0
   143d8:	cmp	r3, #0
   143dc:	mov	ip, #3
   143e0:	mov	r2, #9
   143e4:	mov	r3, #1
   143e8:	str	r8, [r0, #44]	; 0x2c
   143ec:	str	r0, [r8]
   143f0:	str	r7, [r0, #8]
   143f4:	str	lr, [r0, #28]
   143f8:	strb	r1, [r0, #168]	; 0xa8
   143fc:	str	r1, [r0, #52]	; 0x34
   14400:	str	r1, [r0, #32]
   14404:	str	r1, [r0, #12]
   14408:	strh	r1, [r0, #58]	; 0x3a
   1440c:	str	r1, [r0, #16]
   14410:	str	r1, [r0, #20]
   14414:	strh	ip, [r0, #60]	; 0x3c
   14418:	strh	r2, [r0, #56]	; 0x38
   1441c:	str	r3, [r0, #48]	; 0x30
   14420:	bne	14514 <__assert_fail@plt+0x31e4>
   14424:	mov	r0, #32
   14428:	bl	1ce94 <__assert_fail@plt+0xbb64>
   1442c:	cmp	r0, #0
   14430:	str	r0, [r8, #56]	; 0x38
   14434:	beq	14488 <__assert_fail@plt+0x3158>
   14438:	bl	1cf98 <__assert_fail@plt+0xbc68>
   1443c:	ldr	r3, [r8, #48]	; 0x30
   14440:	tst	r3, #516	; 0x204
   14444:	beq	14544 <__assert_fail@plt+0x3214>
   14448:	mvn	r1, #0
   1444c:	add	r0, r8, #60	; 0x3c
   14450:	bl	16cac <__assert_fail@plt+0x597c>
   14454:	mov	r0, r8
   14458:	add	sp, sp, #36	; 0x24
   1445c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14460:	ldrb	r2, [r3, #-1]!
   14464:	cmp	r2, #47	; 0x2f
   14468:	bne	142d0 <__assert_fail@plt+0x2fa0>
   1446c:	sub	r5, r5, #1
   14470:	cmp	r5, #1
   14474:	bne	14460 <__assert_fail@plt+0x3130>
   14478:	mov	r0, #176	; 0xb0
   1447c:	bl	1ce94 <__assert_fail@plt+0xbb64>
   14480:	subs	r4, r0, #0
   14484:	bne	142e4 <__assert_fail@plt+0x2fb4>
   14488:	cmp	r7, #0
   1448c:	beq	144b4 <__assert_fail@plt+0x3184>
   14490:	ldr	r3, [r7, #12]
   14494:	ldr	r4, [r7, #8]
   14498:	subs	r0, r3, #0
   1449c:	beq	144a4 <__assert_fail@plt+0x3174>
   144a0:	bl	1130c <closedir@plt>
   144a4:	mov	r0, r7
   144a8:	bl	12cdc <__assert_fail@plt+0x19ac>
   144ac:	subs	r7, r4, #0
   144b0:	bne	14490 <__assert_fail@plt+0x3160>
   144b4:	ldr	r0, [sp, #16]
   144b8:	bl	12cdc <__assert_fail@plt+0x19ac>
   144bc:	ldr	r0, [r8, #24]
   144c0:	bl	12cdc <__assert_fail@plt+0x19ac>
   144c4:	b	144e4 <__assert_fail@plt+0x31b4>
   144c8:	ldr	r0, [r8, #24]
   144cc:	bl	12cdc <__assert_fail@plt+0x19ac>
   144d0:	mov	r3, #0
   144d4:	str	r3, [r8, #24]
   144d8:	bl	111ec <__errno_location@plt>
   144dc:	mov	r3, #36	; 0x24
   144e0:	str	r3, [r0]
   144e4:	mov	r0, r8
   144e8:	bl	12cdc <__assert_fail@plt+0x19ac>
   144ec:	mov	r8, #0
   144f0:	mov	r0, r8
   144f4:	add	sp, sp, #36	; 0x24
   144f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144fc:	bl	111ec <__errno_location@plt>
   14500:	mov	r3, #22
   14504:	str	r3, [r0]
   14508:	mov	r0, r8
   1450c:	add	sp, sp, #36	; 0x24
   14510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14514:	ldr	r3, [pc, #416]	; 146bc <__assert_fail@plt+0x338c>
   14518:	ldr	r2, [pc, #416]	; 146c0 <__assert_fail@plt+0x3390>
   1451c:	str	r3, [sp]
   14520:	mov	r0, #31
   14524:	ldr	r3, [pc, #408]	; 146c4 <__assert_fail@plt+0x3394>
   14528:	bl	15ba0 <__assert_fail@plt+0x4870>
   1452c:	cmp	r0, #0
   14530:	str	r0, [r8, #56]	; 0x38
   14534:	beq	14488 <__assert_fail@plt+0x3158>
   14538:	ldr	r3, [r8, #48]	; 0x30
   1453c:	tst	r3, #516	; 0x204
   14540:	bne	14448 <__assert_fail@plt+0x3118>
   14544:	ldr	r2, [pc, #380]	; 146c8 <__assert_fail@plt+0x3398>
   14548:	tst	r3, #16
   1454c:	ldr	r1, [pc, #376]	; 146cc <__assert_fail@plt+0x339c>
   14550:	moveq	r1, r2
   14554:	tst	r3, #512	; 0x200
   14558:	bne	1466c <__assert_fail@plt+0x333c>
   1455c:	ldr	r0, [pc, #364]	; 146d0 <__assert_fail@plt+0x33a0>
   14560:	bl	1d2fc <__assert_fail@plt+0xbfcc>
   14564:	cmp	r0, #0
   14568:	str	r0, [r8, #28]
   1456c:	ldrlt	r3, [r8, #48]	; 0x30
   14570:	orrlt	r3, r3, #4
   14574:	strlt	r3, [r8, #48]	; 0x30
   14578:	b	14448 <__assert_fail@plt+0x3118>
   1457c:	ldr	r3, [sp, #12]
   14580:	cmp	r3, #0
   14584:	strne	fp, [sp, #16]
   14588:	bne	1421c <__assert_fail@plt+0x2eec>
   1458c:	str	r3, [sp, #16]
   14590:	mov	r7, r3
   14594:	b	143b4 <__assert_fail@plt+0x3084>
   14598:	bl	111ec <__errno_location@plt>
   1459c:	mov	r8, #0
   145a0:	mov	r3, #22
   145a4:	str	r3, [r0]
   145a8:	mov	r0, r8
   145ac:	add	sp, sp, #36	; 0x24
   145b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145b4:	ldr	r2, [r8, #40]	; 0x28
   145b8:	ldr	r5, [r8, #44]	; 0x2c
   145bc:	cmp	r4, r2
   145c0:	bls	14604 <__assert_fail@plt+0x32d4>
   145c4:	add	r1, sl, #41	; 0x29
   145c8:	cmn	r1, #-1073741823	; 0xc0000001
   145cc:	str	r1, [r8, #40]	; 0x28
   145d0:	bhi	14680 <__assert_fail@plt+0x3350>
   145d4:	lsl	r1, r1, #2
   145d8:	ldr	r0, [r8, #8]
   145dc:	bl	1cec0 <__assert_fail@plt+0xbb90>
   145e0:	cmp	r0, #0
   145e4:	beq	14680 <__assert_fail@plt+0x3350>
   145e8:	str	r0, [r8, #8]
   145ec:	b	14608 <__assert_fail@plt+0x32d8>
   145f0:	mov	r3, #1
   145f4:	str	r3, [sp, #24]
   145f8:	b	1422c <__assert_fail@plt+0x2efc>
   145fc:	mov	r4, #4096	; 0x1000
   14600:	b	14184 <__assert_fail@plt+0x2e54>
   14604:	ldr	r0, [r8, #8]
   14608:	mov	r2, r0
   1460c:	str	r7, [r2], #4
   14610:	ldr	r7, [r7, #8]
   14614:	cmp	r7, #0
   14618:	bne	1460c <__assert_fail@plt+0x32dc>
   1461c:	mov	r3, r5
   14620:	mov	r1, r4
   14624:	mov	r2, #4
   14628:	bl	112ac <qsort@plt>
   1462c:	ldr	ip, [r8, #8]
   14630:	cmp	sl, #0
   14634:	ldr	r7, [ip]
   14638:	moveq	r3, r7
   1463c:	beq	14660 <__assert_fail@plt+0x3330>
   14640:	mov	r2, sl
   14644:	mov	r3, ip
   14648:	ldr	r1, [r3]
   1464c:	ldr	r0, [r3, #4]!
   14650:	subs	r2, r2, #1
   14654:	str	r0, [r1, #8]
   14658:	bne	14648 <__assert_fail@plt+0x3318>
   1465c:	ldr	r3, [ip, sl, lsl #2]
   14660:	mov	r2, #0
   14664:	str	r2, [r3, #8]
   14668:	b	143b4 <__assert_fail@plt+0x3084>
   1466c:	mov	r2, r1
   14670:	ldr	r0, [r8, #32]
   14674:	ldr	r1, [pc, #84]	; 146d0 <__assert_fail@plt+0x33a0>
   14678:	bl	16dd4 <__assert_fail@plt+0x5aa4>
   1467c:	b	14564 <__assert_fail@plt+0x3234>
   14680:	ldr	r0, [r8, #8]
   14684:	bl	12cdc <__assert_fail@plt+0x19ac>
   14688:	mov	r3, #0
   1468c:	str	r3, [r8, #8]
   14690:	str	r3, [r8, #40]	; 0x28
   14694:	b	143b4 <__assert_fail@plt+0x3084>
   14698:	ldr	r0, [r8, #24]
   1469c:	bl	12cdc <__assert_fail@plt+0x19ac>
   146a0:	str	r4, [r8, #24]
   146a4:	b	144e4 <__assert_fail@plt+0x31b4>
   146a8:	str	r0, [r8]
   146ac:	b	14488 <__assert_fail@plt+0x3158>
   146b0:	mov	r7, fp
   146b4:	b	143b4 <__assert_fail@plt+0x3084>
   146b8:	andeq	r0, r0, r2, lsl #2
   146bc:	ldrdeq	r2, [r1], -ip
   146c0:	andeq	r2, r1, r8, ror sp
   146c4:	andeq	r2, r1, r4, lsr sp
   146c8:	andeq	r4, r8, r0, lsl #18
   146cc:	andeq	ip, r8, r0, lsl #18
   146d0:	andeq	lr, r1, r0, asr #22
   146d4:	ldr	r3, [r0]
   146d8:	push	{r4, r5, r6, lr}
   146dc:	cmp	r3, #0
   146e0:	mov	r6, r0
   146e4:	beq	14720 <__assert_fail@plt+0x33f0>
   146e8:	ldr	r2, [r3, #48]	; 0x30
   146ec:	cmp	r2, #0
   146f0:	blt	14860 <__assert_fail@plt+0x3530>
   146f4:	ldr	r4, [r3, #8]
   146f8:	mov	r0, r3
   146fc:	cmp	r4, #0
   14700:	ldreq	r4, [r3, #4]
   14704:	bl	12cdc <__assert_fail@plt+0x19ac>
   14708:	mov	r3, r4
   1470c:	ldr	r2, [r4, #48]	; 0x30
   14710:	cmp	r2, #0
   14714:	bge	146f4 <__assert_fail@plt+0x33c4>
   14718:	mov	r0, r4
   1471c:	bl	12cdc <__assert_fail@plt+0x19ac>
   14720:	ldr	r4, [r6, #4]
   14724:	cmp	r4, #0
   14728:	beq	14750 <__assert_fail@plt+0x3420>
   1472c:	ldr	r3, [r4, #12]
   14730:	ldr	r5, [r4, #8]
   14734:	subs	r0, r3, #0
   14738:	beq	14740 <__assert_fail@plt+0x3410>
   1473c:	bl	1130c <closedir@plt>
   14740:	mov	r0, r4
   14744:	bl	12cdc <__assert_fail@plt+0x19ac>
   14748:	subs	r4, r5, #0
   1474c:	bne	1472c <__assert_fail@plt+0x33fc>
   14750:	ldr	r0, [r6, #8]
   14754:	bl	12cdc <__assert_fail@plt+0x19ac>
   14758:	ldr	r0, [r6, #24]
   1475c:	bl	12cdc <__assert_fail@plt+0x19ac>
   14760:	ldr	r3, [r6, #48]	; 0x30
   14764:	tst	r3, #512	; 0x200
   14768:	beq	14804 <__assert_fail@plt+0x34d4>
   1476c:	ldr	r0, [r6, #32]
   14770:	cmp	r0, #0
   14774:	blt	14784 <__assert_fail@plt+0x3454>
   14778:	bl	112f4 <close@plt>
   1477c:	cmp	r0, #0
   14780:	bne	14854 <__assert_fail@plt+0x3524>
   14784:	mov	r5, #0
   14788:	add	r4, r6, #60	; 0x3c
   1478c:	b	1479c <__assert_fail@plt+0x346c>
   14790:	bl	16d24 <__assert_fail@plt+0x59f4>
   14794:	cmp	r0, #0
   14798:	bge	147fc <__assert_fail@plt+0x34cc>
   1479c:	mov	r0, r4
   147a0:	bl	16cd8 <__assert_fail@plt+0x59a8>
   147a4:	cmp	r0, #0
   147a8:	mov	r0, r4
   147ac:	beq	14790 <__assert_fail@plt+0x3460>
   147b0:	ldr	r0, [r6, #52]	; 0x34
   147b4:	cmp	r0, #0
   147b8:	beq	147c0 <__assert_fail@plt+0x3490>
   147bc:	bl	15e90 <__assert_fail@plt+0x4b60>
   147c0:	ldr	r2, [r6, #48]	; 0x30
   147c4:	ldr	r3, [pc, #204]	; 14898 <__assert_fail@plt+0x3568>
   147c8:	ldr	r0, [r6, #56]	; 0x38
   147cc:	and	r3, r3, r2
   147d0:	cmp	r3, #0
   147d4:	beq	1484c <__assert_fail@plt+0x351c>
   147d8:	cmp	r0, #0
   147dc:	beq	147e4 <__assert_fail@plt+0x34b4>
   147e0:	bl	15e90 <__assert_fail@plt+0x4b60>
   147e4:	mov	r0, r6
   147e8:	bl	12cdc <__assert_fail@plt+0x19ac>
   147ec:	cmp	r5, #0
   147f0:	bne	14888 <__assert_fail@plt+0x3558>
   147f4:	mov	r0, r5
   147f8:	pop	{r4, r5, r6, pc}
   147fc:	bl	112f4 <close@plt>
   14800:	b	1479c <__assert_fail@plt+0x346c>
   14804:	tst	r3, #4
   14808:	bne	14784 <__assert_fail@plt+0x3454>
   1480c:	ldr	r0, [r6, #28]
   14810:	bl	112a0 <fchdir@plt>
   14814:	cmp	r0, #0
   14818:	beq	14868 <__assert_fail@plt+0x3538>
   1481c:	bl	111ec <__errno_location@plt>
   14820:	mov	r4, r0
   14824:	ldr	r0, [r6, #28]
   14828:	ldr	r5, [r4]
   1482c:	bl	112f4 <close@plt>
   14830:	adds	r0, r0, #0
   14834:	movne	r0, #1
   14838:	cmp	r5, #0
   1483c:	movne	r0, #0
   14840:	cmp	r0, #0
   14844:	beq	14788 <__assert_fail@plt+0x3458>
   14848:	b	14880 <__assert_fail@plt+0x3550>
   1484c:	bl	12cdc <__assert_fail@plt+0x19ac>
   14850:	b	147e4 <__assert_fail@plt+0x34b4>
   14854:	bl	111ec <__errno_location@plt>
   14858:	ldr	r5, [r0]
   1485c:	b	14788 <__assert_fail@plt+0x3458>
   14860:	mov	r4, r3
   14864:	b	14718 <__assert_fail@plt+0x33e8>
   14868:	ldr	r0, [r6, #28]
   1486c:	bl	112f4 <close@plt>
   14870:	cmp	r0, #0
   14874:	beq	14784 <__assert_fail@plt+0x3454>
   14878:	bl	111ec <__errno_location@plt>
   1487c:	mov	r4, r0
   14880:	ldr	r5, [r4]
   14884:	b	14788 <__assert_fail@plt+0x3458>
   14888:	bl	111ec <__errno_location@plt>
   1488c:	str	r5, [r0]
   14890:	mvn	r5, #0
   14894:	b	147f4 <__assert_fail@plt+0x34c4>
   14898:	andeq	r0, r0, r2, lsl #2
   1489c:	push	{r4, r5, r6, r7, r8, r9, lr}
   148a0:	sub	sp, sp, #12
   148a4:	ldr	r4, [r0]
   148a8:	cmp	r4, #0
   148ac:	beq	149e0 <__assert_fail@plt+0x36b0>
   148b0:	ldr	r1, [r0, #48]	; 0x30
   148b4:	ands	r5, r1, #8192	; 0x2000
   148b8:	bne	149e0 <__assert_fail@plt+0x36b0>
   148bc:	ldrh	r3, [r4, #60]	; 0x3c
   148c0:	mov	r2, #3
   148c4:	mov	r7, r0
   148c8:	cmp	r3, #1
   148cc:	strh	r2, [r4, #60]	; 0x3c
   148d0:	beq	14d58 <__assert_fail@plt+0x3a28>
   148d4:	cmp	r3, #2
   148d8:	beq	149f0 <__assert_fail@plt+0x36c0>
   148dc:	ldrh	r2, [r4, #56]	; 0x38
   148e0:	cmp	r2, #1
   148e4:	bne	1491c <__assert_fail@plt+0x35ec>
   148e8:	cmp	r3, #4
   148ec:	bne	14a08 <__assert_fail@plt+0x36d8>
   148f0:	b	14a24 <__assert_fail@plt+0x36f4>
   148f4:	str	r6, [r7]
   148f8:	mov	r0, r4
   148fc:	bl	12cdc <__assert_fail@plt+0x19ac>
   14900:	ldr	r3, [r6, #48]	; 0x30
   14904:	cmp	r3, #0
   14908:	beq	14a90 <__assert_fail@plt+0x3760>
   1490c:	ldrh	r3, [r6, #60]	; 0x3c
   14910:	mov	r4, r6
   14914:	cmp	r3, #4
   14918:	bne	14c44 <__assert_fail@plt+0x3914>
   1491c:	ldr	r6, [r4, #8]
   14920:	cmp	r6, #0
   14924:	bne	148f4 <__assert_fail@plt+0x35c4>
   14928:	ldr	r6, [r4, #4]
   1492c:	ldr	r3, [r6, #12]
   14930:	cmp	r3, #0
   14934:	bne	14fe8 <__assert_fail@plt+0x3cb8>
   14938:	str	r6, [r7]
   1493c:	mov	r0, r4
   14940:	bl	12cdc <__assert_fail@plt+0x19ac>
   14944:	ldr	r3, [r6, #48]	; 0x30
   14948:	cmn	r3, #1
   1494c:	beq	14ed8 <__assert_fail@plt+0x3ba8>
   14950:	ldrh	r3, [r6, #56]	; 0x38
   14954:	cmp	r3, #11
   14958:	beq	14cb8 <__assert_fail@plt+0x3988>
   1495c:	ldr	r3, [r6, #40]	; 0x28
   14960:	ldr	r2, [r7, #24]
   14964:	mov	r1, #0
   14968:	strb	r1, [r2, r3]
   1496c:	ldr	r3, [r6, #48]	; 0x30
   14970:	cmp	r3, r1
   14974:	beq	14dd4 <__assert_fail@plt+0x3aa4>
   14978:	ldrh	r3, [r6, #58]	; 0x3a
   1497c:	tst	r3, #2
   14980:	beq	14d94 <__assert_fail@plt+0x3a64>
   14984:	ldr	r3, [r7, #48]	; 0x30
   14988:	tst	r3, #4
   1498c:	beq	14e48 <__assert_fail@plt+0x3b18>
   14990:	ldr	r0, [r6, #36]	; 0x24
   14994:	bl	112f4 <close@plt>
   14998:	ldr	r3, [r7, #48]	; 0x30
   1499c:	ldrh	r2, [r6, #56]	; 0x38
   149a0:	cmp	r2, #2
   149a4:	beq	149d8 <__assert_fail@plt+0x36a8>
   149a8:	ldr	r2, [r6, #32]
   149ac:	cmp	r2, #0
   149b0:	movne	r2, #7
   149b4:	strhne	r2, [r6, #56]	; 0x38
   149b8:	bne	149d8 <__assert_fail@plt+0x36a8>
   149bc:	mov	r2, #6
   149c0:	mov	r0, r3
   149c4:	strh	r2, [r6, #56]	; 0x38
   149c8:	add	r1, r7, #56	; 0x38
   149cc:	mov	r2, r6
   149d0:	bl	13060 <__assert_fail@plt+0x1d30>
   149d4:	ldr	r3, [r7, #48]	; 0x30
   149d8:	tst	r3, #8192	; 0x2000
   149dc:	beq	14a84 <__assert_fail@plt+0x3754>
   149e0:	mov	r6, #0
   149e4:	mov	r0, r6
   149e8:	add	sp, sp, #12
   149ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   149f0:	ldrh	r3, [r4, #56]	; 0x38
   149f4:	sub	r2, r3, #12
   149f8:	cmp	r2, #1
   149fc:	bls	14e90 <__assert_fail@plt+0x3b60>
   14a00:	cmp	r3, #1
   14a04:	bne	1491c <__assert_fail@plt+0x35ec>
   14a08:	tst	r1, #64	; 0x40
   14a0c:	beq	14cc4 <__assert_fail@plt+0x3994>
   14a10:	ldrd	r8, [r4, #64]	; 0x40
   14a14:	ldrd	r2, [r7, #16]
   14a18:	cmp	r9, r3
   14a1c:	cmpeq	r8, r2
   14a20:	beq	14cc4 <__assert_fail@plt+0x3994>
   14a24:	ldrh	r3, [r4, #58]	; 0x3a
   14a28:	tst	r3, #2
   14a2c:	bne	14fdc <__assert_fail@plt+0x3cac>
   14a30:	ldr	r5, [r7, #4]
   14a34:	cmp	r5, #0
   14a38:	beq	14a68 <__assert_fail@plt+0x3738>
   14a3c:	ldr	r0, [r5, #12]
   14a40:	ldr	r6, [r5, #8]
   14a44:	cmp	r0, #0
   14a48:	beq	14a50 <__assert_fail@plt+0x3720>
   14a4c:	bl	1130c <closedir@plt>
   14a50:	mov	r0, r5
   14a54:	bl	12cdc <__assert_fail@plt+0x19ac>
   14a58:	cmp	r6, #0
   14a5c:	mov	r5, r6
   14a60:	bne	14a3c <__assert_fail@plt+0x370c>
   14a64:	str	r6, [r7, #4]
   14a68:	mov	r3, #6
   14a6c:	strh	r3, [r4, #56]	; 0x38
   14a70:	mov	r2, r4
   14a74:	add	r1, r7, #56	; 0x38
   14a78:	ldr	r0, [r7, #48]	; 0x30
   14a7c:	mov	r6, r4
   14a80:	bl	13060 <__assert_fail@plt+0x1d30>
   14a84:	mov	r0, r6
   14a88:	add	sp, sp, #12
   14a8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14a90:	ldr	r3, [r7, #48]	; 0x30
   14a94:	ands	r8, r3, #4
   14a98:	addne	r4, r7, #60	; 0x3c
   14a9c:	bne	14ad0 <__assert_fail@plt+0x37a0>
   14aa0:	tst	r3, #512	; 0x200
   14aa4:	bne	14ef8 <__assert_fail@plt+0x3bc8>
   14aa8:	ldr	r0, [r7, #28]
   14aac:	bl	112a0 <fchdir@plt>
   14ab0:	add	r4, r7, #60	; 0x3c
   14ab4:	adds	r5, r0, #0
   14ab8:	movne	r5, #1
   14abc:	b	14ad0 <__assert_fail@plt+0x37a0>
   14ac0:	mov	r0, r4
   14ac4:	bl	16d24 <__assert_fail@plt+0x59f4>
   14ac8:	cmp	r0, #0
   14acc:	bge	14cbc <__assert_fail@plt+0x398c>
   14ad0:	mov	r0, r4
   14ad4:	bl	16cd8 <__assert_fail@plt+0x59a8>
   14ad8:	cmp	r0, #0
   14adc:	beq	14ac0 <__assert_fail@plt+0x3790>
   14ae0:	cmp	r5, #0
   14ae4:	bne	14fb8 <__assert_fail@plt+0x3c88>
   14ae8:	ldr	r2, [r7, #48]	; 0x30
   14aec:	ldr	r3, [pc, #1760]	; 151d4 <__assert_fail@plt+0x3ea4>
   14af0:	ldr	r0, [r7, #56]	; 0x38
   14af4:	and	r3, r3, r2
   14af8:	cmp	r3, #0
   14afc:	beq	14fb0 <__assert_fail@plt+0x3c80>
   14b00:	cmp	r0, #0
   14b04:	beq	14b0c <__assert_fail@plt+0x37dc>
   14b08:	bl	15e90 <__assert_fail@plt+0x4b60>
   14b0c:	ldr	r2, [r6, #52]	; 0x34
   14b10:	add	r5, r6, #168	; 0xa8
   14b14:	str	r2, [r6, #40]	; 0x28
   14b18:	mov	r1, r5
   14b1c:	add	r2, r2, #1
   14b20:	ldr	r0, [r7, #24]
   14b24:	bl	11048 <memmove@plt>
   14b28:	mov	r0, r5
   14b2c:	mov	r1, #47	; 0x2f
   14b30:	bl	11264 <strrchr@plt>
   14b34:	cmp	r0, #0
   14b38:	beq	14b68 <__assert_fail@plt+0x3838>
   14b3c:	cmp	r5, r0
   14b40:	beq	14fcc <__assert_fail@plt+0x3c9c>
   14b44:	add	r4, r0, #1
   14b48:	mov	r0, r4
   14b4c:	bl	111bc <strlen@plt>
   14b50:	mov	r1, r4
   14b54:	mov	r8, r0
   14b58:	add	r2, r8, #1
   14b5c:	mov	r0, r5
   14b60:	bl	11048 <memmove@plt>
   14b64:	str	r8, [r6, #52]	; 0x34
   14b68:	ldr	r1, [r7, #48]	; 0x30
   14b6c:	ldr	r3, [pc, #1632]	; 151d4 <__assert_fail@plt+0x3ea4>
   14b70:	ldr	r2, [r7, #24]
   14b74:	and	r3, r3, r1
   14b78:	cmp	r3, #0
   14b7c:	str	r2, [r6, #28]
   14b80:	str	r2, [r6, #24]
   14b84:	beq	14d74 <__assert_fail@plt+0x3a44>
   14b88:	ldr	r2, [pc, #1608]	; 151d8 <__assert_fail@plt+0x3ea8>
   14b8c:	ldr	r3, [pc, #1608]	; 151dc <__assert_fail@plt+0x3eac>
   14b90:	str	r2, [sp]
   14b94:	mov	r1, #0
   14b98:	ldr	r2, [pc, #1600]	; 151e0 <__assert_fail@plt+0x3eb0>
   14b9c:	mov	r0, #31
   14ba0:	bl	15ba0 <__assert_fail@plt+0x4870>
   14ba4:	ldrh	r3, [r6, #56]	; 0x38
   14ba8:	str	r0, [r7, #56]	; 0x38
   14bac:	cmp	r3, #11
   14bb0:	str	r6, [r7]
   14bb4:	beq	14c9c <__assert_fail@plt+0x396c>
   14bb8:	cmp	r3, #1
   14bbc:	bne	14a84 <__assert_fail@plt+0x3754>
   14bc0:	ldr	r3, [r6, #48]	; 0x30
   14bc4:	cmp	r3, #0
   14bc8:	ldrdeq	r2, [r6, #64]	; 0x40
   14bcc:	strdeq	r2, [r7, #16]
   14bd0:	ldr	r2, [r7, #48]	; 0x30
   14bd4:	ldr	r3, [pc, #1528]	; 151d4 <__assert_fail@plt+0x3ea4>
   14bd8:	and	r3, r3, r2
   14bdc:	cmp	r3, #0
   14be0:	beq	14d38 <__assert_fail@plt+0x3a08>
   14be4:	mov	r0, #24
   14be8:	bl	1ce94 <__assert_fail@plt+0xbb64>
   14bec:	subs	r8, r0, #0
   14bf0:	beq	14ec4 <__assert_fail@plt+0x3b94>
   14bf4:	ldrd	r4, [r6, #64]	; 0x40
   14bf8:	ldrd	r2, [r6, #160]	; 0xa0
   14bfc:	ldr	r0, [r7, #56]	; 0x38
   14c00:	strd	r4, [r8]
   14c04:	strd	r2, [r8, #8]
   14c08:	str	r6, [r8, #16]
   14c0c:	mov	r1, r8
   14c10:	bl	16508 <__assert_fail@plt+0x51d8>
   14c14:	cmp	r8, r0
   14c18:	mov	r4, r0
   14c1c:	beq	14a84 <__assert_fail@plt+0x3754>
   14c20:	mov	r0, r8
   14c24:	bl	12cdc <__assert_fail@plt+0x19ac>
   14c28:	cmp	r4, #0
   14c2c:	beq	14ec4 <__assert_fail@plt+0x3b94>
   14c30:	ldr	r2, [r4, #16]
   14c34:	mov	r3, #2
   14c38:	str	r2, [r6]
   14c3c:	strh	r3, [r6, #56]	; 0x38
   14c40:	b	14a84 <__assert_fail@plt+0x3754>
   14c44:	cmp	r3, #2
   14c48:	beq	1501c <__assert_fail@plt+0x3cec>
   14c4c:	ldr	r3, [r6, #4]
   14c50:	mov	ip, #47	; 0x2f
   14c54:	ldr	r2, [r7, #24]
   14c58:	ldr	r0, [r3, #40]	; 0x28
   14c5c:	ldr	lr, [r3, #28]
   14c60:	sub	r3, r0, #1
   14c64:	add	r1, r6, #168	; 0xa8
   14c68:	ldrb	lr, [lr, r3]
   14c6c:	cmp	lr, ip
   14c70:	movne	r3, r0
   14c74:	add	r0, r2, r3
   14c78:	strb	ip, [r2, r3]
   14c7c:	ldr	r2, [r6, #52]	; 0x34
   14c80:	add	r0, r0, #1
   14c84:	add	r2, r2, #1
   14c88:	bl	11048 <memmove@plt>
   14c8c:	ldrh	r3, [r6, #56]	; 0x38
   14c90:	str	r6, [r7]
   14c94:	cmp	r3, #11
   14c98:	bne	14bb8 <__assert_fail@plt+0x3888>
   14c9c:	ldrd	r2, [r6, #112]	; 0x70
   14ca0:	cmp	r3, #0
   14ca4:	cmpeq	r2, #2
   14ca8:	beq	15048 <__assert_fail@plt+0x3d18>
   14cac:	cmp	r3, #0
   14cb0:	cmpeq	r2, #1
   14cb4:	beq	14a84 <__assert_fail@plt+0x3754>
   14cb8:	bl	112e8 <abort@plt>
   14cbc:	bl	112f4 <close@plt>
   14cc0:	b	14ad0 <__assert_fail@plt+0x37a0>
   14cc4:	ldr	r5, [r7, #4]
   14cc8:	cmp	r5, #0
   14ccc:	beq	14f58 <__assert_fail@plt+0x3c28>
   14cd0:	tst	r1, #4096	; 0x1000
   14cd4:	bne	14f24 <__assert_fail@plt+0x3bf4>
   14cd8:	ldr	r3, [r4, #24]
   14cdc:	mvn	r2, #0
   14ce0:	mov	r1, r4
   14ce4:	mov	r0, r7
   14ce8:	bl	13118 <__assert_fail@plt+0x1de8>
   14cec:	cmp	r0, #0
   14cf0:	beq	14e38 <__assert_fail@plt+0x3b08>
   14cf4:	bl	111ec <__errno_location@plt>
   14cf8:	ldrh	r3, [r4, #58]	; 0x3a
   14cfc:	ldr	r6, [r7, #4]
   14d00:	orr	r3, r3, #1
   14d04:	cmp	r6, #0
   14d08:	ldr	r2, [r0]
   14d0c:	strh	r3, [r4, #58]	; 0x3a
   14d10:	str	r2, [r4, #32]
   14d14:	beq	14e3c <__assert_fail@plt+0x3b0c>
   14d18:	mov	r3, r6
   14d1c:	ldr	r2, [r3, #4]
   14d20:	ldr	r2, [r2, #24]
   14d24:	str	r2, [r3, #24]
   14d28:	ldr	r3, [r3, #8]
   14d2c:	cmp	r3, #0
   14d30:	bne	14d1c <__assert_fail@plt+0x39ec>
   14d34:	b	14e3c <__assert_fail@plt+0x3b0c>
   14d38:	ldr	r0, [r7, #56]	; 0x38
   14d3c:	add	r1, r6, #64	; 0x40
   14d40:	bl	1cfbc <__assert_fail@plt+0xbc8c>
   14d44:	cmp	r0, #0
   14d48:	movne	r3, #2
   14d4c:	strne	r6, [r6]
   14d50:	strhne	r3, [r6, #56]	; 0x38
   14d54:	b	14a84 <__assert_fail@plt+0x3754>
   14d58:	mov	r3, r5
   14d5c:	ldr	r0, [r0, #32]
   14d60:	mov	r2, r4
   14d64:	bl	12f14 <__assert_fail@plt+0x1be4>
   14d68:	mov	r6, r4
   14d6c:	strh	r0, [r4, #56]	; 0x38
   14d70:	b	14a84 <__assert_fail@plt+0x3754>
   14d74:	mov	r0, #32
   14d78:	bl	1ce94 <__assert_fail@plt+0xbb64>
   14d7c:	cmp	r0, #0
   14d80:	str	r0, [r7, #56]	; 0x38
   14d84:	beq	14c8c <__assert_fail@plt+0x395c>
   14d88:	bl	1cf98 <__assert_fail@plt+0xbc68>
   14d8c:	ldrh	r3, [r6, #56]	; 0x38
   14d90:	b	14bac <__assert_fail@plt+0x387c>
   14d94:	tst	r3, #1
   14d98:	bne	14998 <__assert_fail@plt+0x3668>
   14d9c:	ldr	r3, [pc, #1088]	; 151e4 <__assert_fail@plt+0x3eb4>
   14da0:	mvn	r2, #0
   14da4:	ldr	r1, [r6, #4]
   14da8:	mov	r0, r7
   14dac:	bl	13118 <__assert_fail@plt+0x1de8>
   14db0:	cmp	r0, #0
   14db4:	beq	14998 <__assert_fail@plt+0x3668>
   14db8:	bl	111ec <__errno_location@plt>
   14dbc:	ldr	r3, [r7, #48]	; 0x30
   14dc0:	orr	r3, r3, #8192	; 0x2000
   14dc4:	ldr	r2, [r0]
   14dc8:	str	r2, [r6, #32]
   14dcc:	str	r3, [r7, #48]	; 0x30
   14dd0:	b	1499c <__assert_fail@plt+0x366c>
   14dd4:	ldr	r3, [r7, #48]	; 0x30
   14dd8:	ands	r8, r3, #4
   14ddc:	addne	r4, r7, #60	; 0x3c
   14de0:	bne	14e14 <__assert_fail@plt+0x3ae4>
   14de4:	tst	r3, #512	; 0x200
   14de8:	bne	15094 <__assert_fail@plt+0x3d64>
   14dec:	ldr	r0, [r7, #28]
   14df0:	bl	112a0 <fchdir@plt>
   14df4:	add	r4, r7, #60	; 0x3c
   14df8:	adds	r5, r0, #0
   14dfc:	movne	r5, #1
   14e00:	b	14e14 <__assert_fail@plt+0x3ae4>
   14e04:	mov	r0, r4
   14e08:	bl	16d24 <__assert_fail@plt+0x59f4>
   14e0c:	cmp	r0, #0
   14e10:	bge	14e30 <__assert_fail@plt+0x3b00>
   14e14:	mov	r0, r4
   14e18:	bl	16cd8 <__assert_fail@plt+0x59a8>
   14e1c:	cmp	r0, #0
   14e20:	beq	14e04 <__assert_fail@plt+0x3ad4>
   14e24:	cmp	r5, #0
   14e28:	bne	14db8 <__assert_fail@plt+0x3a88>
   14e2c:	b	14998 <__assert_fail@plt+0x3668>
   14e30:	bl	112f4 <close@plt>
   14e34:	b	14e14 <__assert_fail@plt+0x3ae4>
   14e38:	ldr	r6, [r7, #4]
   14e3c:	mov	r3, #0
   14e40:	str	r3, [r7, #4]
   14e44:	b	14c4c <__assert_fail@plt+0x391c>
   14e48:	tst	r3, #512	; 0x200
   14e4c:	beq	15068 <__assert_fail@plt+0x3d38>
   14e50:	ldr	r1, [r7, #32]
   14e54:	ldr	r4, [r6, #36]	; 0x24
   14e58:	cmn	r1, #100	; 0x64
   14e5c:	sub	r3, r4, r1
   14e60:	clz	r3, r3
   14e64:	lsr	r3, r3, #5
   14e68:	moveq	r3, #0
   14e6c:	cmp	r3, #0
   14e70:	bne	14cb8 <__assert_fail@plt+0x3988>
   14e74:	add	r0, r7, #60	; 0x3c
   14e78:	bl	16ce0 <__assert_fail@plt+0x59b0>
   14e7c:	cmp	r0, #0
   14e80:	blt	14e88 <__assert_fail@plt+0x3b58>
   14e84:	bl	112f4 <close@plt>
   14e88:	str	r4, [r7, #32]
   14e8c:	b	14990 <__assert_fail@plt+0x3660>
   14e90:	mov	r3, #1
   14e94:	mov	r2, r4
   14e98:	ldr	r0, [r0, #32]
   14e9c:	bl	12f14 <__assert_fail@plt+0x1be4>
   14ea0:	cmp	r0, #1
   14ea4:	strh	r0, [r4, #56]	; 0x38
   14ea8:	mov	r3, r0
   14eac:	beq	150d4 <__assert_fail@plt+0x3da4>
   14eb0:	cmp	r0, #11
   14eb4:	mov	r6, r4
   14eb8:	str	r4, [r7]
   14ebc:	bne	14a84 <__assert_fail@plt+0x3754>
   14ec0:	b	14c9c <__assert_fail@plt+0x396c>
   14ec4:	bl	111ec <__errno_location@plt>
   14ec8:	mov	r3, #12
   14ecc:	mov	r6, #0
   14ed0:	str	r3, [r0]
   14ed4:	b	14a84 <__assert_fail@plt+0x3754>
   14ed8:	mov	r0, r6
   14edc:	bl	12cdc <__assert_fail@plt+0x19ac>
   14ee0:	bl	111ec <__errno_location@plt>
   14ee4:	mov	r3, #0
   14ee8:	mov	r6, r3
   14eec:	str	r3, [r0]
   14ef0:	str	r3, [r7]
   14ef4:	b	14a84 <__assert_fail@plt+0x3754>
   14ef8:	add	r4, r7, #60	; 0x3c
   14efc:	mov	r0, r4
   14f00:	ldr	r1, [r7, #32]
   14f04:	bl	16ce0 <__assert_fail@plt+0x59b0>
   14f08:	cmp	r0, #0
   14f0c:	blt	14f14 <__assert_fail@plt+0x3be4>
   14f10:	bl	112f4 <close@plt>
   14f14:	mvn	r3, #99	; 0x63
   14f18:	mov	r5, r8
   14f1c:	str	r3, [r7, #32]
   14f20:	b	14ad0 <__assert_fail@plt+0x37a0>
   14f24:	bic	ip, r1, #4096	; 0x1000
   14f28:	str	ip, [r7, #48]	; 0x30
   14f2c:	ldr	r0, [r5, #12]
   14f30:	ldr	r6, [r5, #8]
   14f34:	cmp	r0, #0
   14f38:	beq	14f40 <__assert_fail@plt+0x3c10>
   14f3c:	bl	1130c <closedir@plt>
   14f40:	mov	r0, r5
   14f44:	bl	12cdc <__assert_fail@plt+0x19ac>
   14f48:	cmp	r6, #0
   14f4c:	mov	r5, r6
   14f50:	bne	14f2c <__assert_fail@plt+0x3bfc>
   14f54:	str	r6, [r7, #4]
   14f58:	mov	r1, #3
   14f5c:	mov	r0, r7
   14f60:	bl	133b0 <__assert_fail@plt+0x2080>
   14f64:	cmp	r0, #0
   14f68:	mov	r6, r0
   14f6c:	str	r0, [r7, #4]
   14f70:	bne	14e3c <__assert_fail@plt+0x3b0c>
   14f74:	ldr	r0, [r7, #48]	; 0x30
   14f78:	tst	r0, #8192	; 0x2000
   14f7c:	bne	149e0 <__assert_fail@plt+0x36b0>
   14f80:	ldr	r3, [r4, #32]
   14f84:	cmp	r3, #0
   14f88:	beq	14f9c <__assert_fail@plt+0x3c6c>
   14f8c:	ldrh	r3, [r4, #56]	; 0x38
   14f90:	cmp	r3, #4
   14f94:	movne	r3, #7
   14f98:	strhne	r3, [r4, #56]	; 0x38
   14f9c:	add	r1, r7, #56	; 0x38
   14fa0:	mov	r2, r4
   14fa4:	bl	13060 <__assert_fail@plt+0x1d30>
   14fa8:	mov	r6, r4
   14fac:	b	14a84 <__assert_fail@plt+0x3754>
   14fb0:	bl	12cdc <__assert_fail@plt+0x19ac>
   14fb4:	b	14b0c <__assert_fail@plt+0x37dc>
   14fb8:	ldr	r3, [r7, #48]	; 0x30
   14fbc:	mov	r6, #0
   14fc0:	orr	r3, r3, #8192	; 0x2000
   14fc4:	str	r3, [r7, #48]	; 0x30
   14fc8:	b	14a84 <__assert_fail@plt+0x3754>
   14fcc:	ldrb	r3, [r6, #169]	; 0xa9
   14fd0:	cmp	r3, #0
   14fd4:	bne	14b44 <__assert_fail@plt+0x3814>
   14fd8:	b	14b68 <__assert_fail@plt+0x3838>
   14fdc:	ldr	r0, [r4, #36]	; 0x24
   14fe0:	bl	112f4 <close@plt>
   14fe4:	b	14a30 <__assert_fail@plt+0x3700>
   14fe8:	ldr	r3, [r6, #40]	; 0x28
   14fec:	ldr	r2, [r7, #24]
   14ff0:	mov	r0, #0
   14ff4:	str	r6, [r7]
   14ff8:	mov	r1, #3
   14ffc:	strb	r0, [r2, r3]
   15000:	mov	r0, r7
   15004:	bl	133b0 <__assert_fail@plt+0x2080>
   15008:	subs	r6, r0, #0
   1500c:	beq	150c0 <__assert_fail@plt+0x3d90>
   15010:	mov	r0, r4
   15014:	bl	12cdc <__assert_fail@plt+0x19ac>
   15018:	b	14c4c <__assert_fail@plt+0x391c>
   1501c:	mov	r3, #1
   15020:	mov	r2, r6
   15024:	ldr	r1, [r7, #48]	; 0x30
   15028:	ldr	r0, [r7, #32]
   1502c:	bl	12f14 <__assert_fail@plt+0x1be4>
   15030:	cmp	r0, #1
   15034:	strh	r0, [r6, #56]	; 0x38
   15038:	beq	150ec <__assert_fail@plt+0x3dbc>
   1503c:	mov	r3, #3
   15040:	strh	r3, [r6, #60]	; 0x3c
   15044:	b	14c4c <__assert_fail@plt+0x391c>
   15048:	mov	r3, #0
   1504c:	mov	r2, r6
   15050:	ldr	r1, [r7, #48]	; 0x30
   15054:	ldr	r0, [r7, #32]
   15058:	bl	12f14 <__assert_fail@plt+0x1be4>
   1505c:	mov	r3, r0
   15060:	strh	r0, [r6, #56]	; 0x38
   15064:	b	14bb8 <__assert_fail@plt+0x3888>
   15068:	ldr	r0, [r6, #36]	; 0x24
   1506c:	bl	112a0 <fchdir@plt>
   15070:	cmp	r0, #0
   15074:	beq	14990 <__assert_fail@plt+0x3660>
   15078:	bl	111ec <__errno_location@plt>
   1507c:	ldr	r3, [r7, #48]	; 0x30
   15080:	orr	r3, r3, #8192	; 0x2000
   15084:	ldr	r2, [r0]
   15088:	str	r2, [r6, #32]
   1508c:	str	r3, [r7, #48]	; 0x30
   15090:	b	14990 <__assert_fail@plt+0x3660>
   15094:	add	r4, r7, #60	; 0x3c
   15098:	mov	r0, r4
   1509c:	ldr	r1, [r7, #32]
   150a0:	bl	16ce0 <__assert_fail@plt+0x59b0>
   150a4:	cmp	r0, #0
   150a8:	blt	150b0 <__assert_fail@plt+0x3d80>
   150ac:	bl	112f4 <close@plt>
   150b0:	mvn	r3, #99	; 0x63
   150b4:	mov	r5, r8
   150b8:	str	r3, [r7, #32]
   150bc:	b	14e14 <__assert_fail@plt+0x3ae4>
   150c0:	ldr	r3, [r7, #48]	; 0x30
   150c4:	tst	r3, #8192	; 0x2000
   150c8:	bne	149e0 <__assert_fail@plt+0x36b0>
   150cc:	ldr	r6, [r4, #4]
   150d0:	b	14938 <__assert_fail@plt+0x3608>
   150d4:	ldr	r1, [r7, #48]	; 0x30
   150d8:	tst	r1, #4
   150dc:	beq	15138 <__assert_fail@plt+0x3e08>
   150e0:	str	r4, [r7]
   150e4:	mov	r6, r4
   150e8:	b	14bb8 <__assert_fail@plt+0x3888>
   150ec:	ldr	r3, [r7, #48]	; 0x30
   150f0:	tst	r3, #4
   150f4:	bne	1503c <__assert_fail@plt+0x3d0c>
   150f8:	ldr	r1, [pc, #232]	; 151e8 <__assert_fail@plt+0x3eb8>
   150fc:	tst	r3, #16
   15100:	ldr	r2, [pc, #228]	; 151ec <__assert_fail@plt+0x3ebc>
   15104:	movne	r2, r1
   15108:	tst	r3, #512	; 0x200
   1510c:	bne	15198 <__assert_fail@plt+0x3e68>
   15110:	mov	r1, r2
   15114:	ldr	r0, [pc, #212]	; 151f0 <__assert_fail@plt+0x3ec0>
   15118:	bl	1d2fc <__assert_fail@plt+0xbfcc>
   1511c:	cmp	r0, #0
   15120:	str	r0, [r6, #36]	; 0x24
   15124:	blt	15180 <__assert_fail@plt+0x3e50>
   15128:	ldrh	r3, [r6, #58]	; 0x3a
   1512c:	orr	r3, r3, #2
   15130:	strh	r3, [r6, #58]	; 0x3a
   15134:	b	1503c <__assert_fail@plt+0x3d0c>
   15138:	ldr	r3, [pc, #168]	; 151e8 <__assert_fail@plt+0x3eb8>
   1513c:	tst	r1, #16
   15140:	ldr	r2, [pc, #164]	; 151ec <__assert_fail@plt+0x3ebc>
   15144:	movne	r2, r3
   15148:	tst	r1, #512	; 0x200
   1514c:	bne	151c4 <__assert_fail@plt+0x3e94>
   15150:	mov	r1, r2
   15154:	ldr	r0, [pc, #148]	; 151f0 <__assert_fail@plt+0x3ec0>
   15158:	bl	1d2fc <__assert_fail@plt+0xbfcc>
   1515c:	cmp	r0, #0
   15160:	str	r0, [r4, #36]	; 0x24
   15164:	blt	151a8 <__assert_fail@plt+0x3e78>
   15168:	ldrh	r2, [r4, #58]	; 0x3a
   1516c:	ldrh	r3, [r4, #56]	; 0x38
   15170:	mov	r6, r4
   15174:	orr	r2, r2, #2
   15178:	strh	r2, [r4, #58]	; 0x3a
   1517c:	b	14bac <__assert_fail@plt+0x387c>
   15180:	bl	111ec <__errno_location@plt>
   15184:	mov	r2, #7
   15188:	ldr	r3, [r0]
   1518c:	strh	r2, [r6, #56]	; 0x38
   15190:	str	r3, [r6, #32]
   15194:	b	1503c <__assert_fail@plt+0x3d0c>
   15198:	ldr	r1, [pc, #80]	; 151f0 <__assert_fail@plt+0x3ec0>
   1519c:	ldr	r0, [r7, #32]
   151a0:	bl	16dd4 <__assert_fail@plt+0x5aa4>
   151a4:	b	1511c <__assert_fail@plt+0x3dec>
   151a8:	bl	111ec <__errno_location@plt>
   151ac:	mov	r2, #7
   151b0:	mov	r3, r2
   151b4:	ldr	r1, [r0]
   151b8:	strh	r2, [r4, #56]	; 0x38
   151bc:	str	r1, [r4, #32]
   151c0:	b	150e0 <__assert_fail@plt+0x3db0>
   151c4:	ldr	r1, [pc, #36]	; 151f0 <__assert_fail@plt+0x3ec0>
   151c8:	ldr	r0, [r7, #32]
   151cc:	bl	16dd4 <__assert_fail@plt+0x5aa4>
   151d0:	b	1515c <__assert_fail@plt+0x3e2c>
   151d4:	andeq	r0, r0, r2, lsl #2
   151d8:	ldrdeq	r2, [r1], -ip
   151dc:	andeq	r2, r1, r4, lsr sp
   151e0:	andeq	r2, r1, r8, ror sp
   151e4:	andeq	lr, r1, ip, lsr fp
   151e8:	andeq	ip, r8, r0, lsl #18
   151ec:	andeq	r4, r8, r0, lsl #18
   151f0:	andeq	lr, r1, r0, asr #22
   151f4:	cmp	r2, #4
   151f8:	bhi	1520c <__assert_fail@plt+0x3edc>
   151fc:	mov	r3, #0
   15200:	strh	r2, [r1, #60]	; 0x3c
   15204:	mov	r0, r3
   15208:	bx	lr
   1520c:	push	{r4, lr}
   15210:	bl	111ec <__errno_location@plt>
   15214:	mov	r2, #22
   15218:	mov	r3, #1
   1521c:	str	r2, [r0]
   15220:	mov	r0, r3
   15224:	pop	{r4, pc}
   15228:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1522c:	bics	r4, r1, #4096	; 0x1000
   15230:	bne	153a4 <__assert_fail@plt+0x4074>
   15234:	mov	r6, r0
   15238:	mov	r7, r1
   1523c:	bl	111ec <__errno_location@plt>
   15240:	ldr	r8, [r6]
   15244:	str	r4, [r0]
   15248:	ldr	r3, [r6, #48]	; 0x30
   1524c:	mov	r9, r0
   15250:	ands	r3, r3, #8192	; 0x2000
   15254:	bne	153bc <__assert_fail@plt+0x408c>
   15258:	ldrh	r2, [r8, #56]	; 0x38
   1525c:	cmp	r2, #9
   15260:	ldreq	r3, [r8, #8]
   15264:	beq	152e8 <__assert_fail@plt+0x3fb8>
   15268:	cmp	r2, #1
   1526c:	bne	152e8 <__assert_fail@plt+0x3fb8>
   15270:	ldr	r4, [r6, #4]
   15274:	cmp	r4, #0
   15278:	beq	152a0 <__assert_fail@plt+0x3f70>
   1527c:	ldr	r0, [r4, #12]
   15280:	ldr	r5, [r4, #8]
   15284:	cmp	r0, #0
   15288:	beq	15290 <__assert_fail@plt+0x3f60>
   1528c:	bl	1130c <closedir@plt>
   15290:	mov	r0, r4
   15294:	bl	12cdc <__assert_fail@plt+0x19ac>
   15298:	subs	r4, r5, #0
   1529c:	bne	1527c <__assert_fail@plt+0x3f4c>
   152a0:	cmp	r7, #4096	; 0x1000
   152a4:	movne	r4, #1
   152a8:	beq	152f0 <__assert_fail@plt+0x3fc0>
   152ac:	ldr	r3, [r8, #48]	; 0x30
   152b0:	cmp	r3, #0
   152b4:	bne	152d4 <__assert_fail@plt+0x3fa4>
   152b8:	ldr	r3, [r8, #24]
   152bc:	ldrb	r3, [r3]
   152c0:	cmp	r3, #47	; 0x2f
   152c4:	beq	152d4 <__assert_fail@plt+0x3fa4>
   152c8:	ldr	r3, [r6, #48]	; 0x30
   152cc:	tst	r3, #4
   152d0:	beq	15310 <__assert_fail@plt+0x3fe0>
   152d4:	mov	r1, r4
   152d8:	mov	r0, r6
   152dc:	bl	133b0 <__assert_fail@plt+0x2080>
   152e0:	mov	r3, r0
   152e4:	str	r0, [r6, #4]
   152e8:	mov	r0, r3
   152ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152f0:	ldr	r3, [r6, #48]	; 0x30
   152f4:	mov	r4, #2
   152f8:	orr	r3, r3, #4096	; 0x1000
   152fc:	str	r3, [r6, #48]	; 0x30
   15300:	ldr	r3, [r8, #48]	; 0x30
   15304:	cmp	r3, #0
   15308:	beq	152b8 <__assert_fail@plt+0x3f88>
   1530c:	b	152d4 <__assert_fail@plt+0x3fa4>
   15310:	ldr	r2, [pc, #252]	; 15414 <__assert_fail@plt+0x40e4>
   15314:	tst	r3, #16
   15318:	ldr	r1, [pc, #248]	; 15418 <__assert_fail@plt+0x40e8>
   1531c:	moveq	r1, r2
   15320:	tst	r3, #512	; 0x200
   15324:	bne	153e0 <__assert_fail@plt+0x40b0>
   15328:	ldr	r0, [pc, #236]	; 1541c <__assert_fail@plt+0x40ec>
   1532c:	bl	1d2fc <__assert_fail@plt+0xbfcc>
   15330:	mov	r5, r0
   15334:	cmp	r5, #0
   15338:	movlt	r3, #0
   1533c:	strlt	r3, [r6, #4]
   15340:	blt	152e8 <__assert_fail@plt+0x3fb8>
   15344:	mov	r1, r4
   15348:	mov	r0, r6
   1534c:	bl	133b0 <__assert_fail@plt+0x2080>
   15350:	ldr	r3, [r6, #48]	; 0x30
   15354:	ands	r4, r3, #512	; 0x200
   15358:	str	r0, [r6, #4]
   1535c:	beq	153c4 <__assert_fail@plt+0x4094>
   15360:	ldr	r1, [r6, #32]
   15364:	cmn	r1, #100	; 0x64
   15368:	sub	r3, r5, r1
   1536c:	clz	r3, r3
   15370:	lsr	r3, r3, #5
   15374:	moveq	r3, #0
   15378:	cmp	r3, #0
   1537c:	bne	15410 <__assert_fail@plt+0x40e0>
   15380:	add	r0, r6, #60	; 0x3c
   15384:	bl	16ce0 <__assert_fail@plt+0x59b0>
   15388:	cmp	r0, #0
   1538c:	blt	15394 <__assert_fail@plt+0x4064>
   15390:	bl	112f4 <close@plt>
   15394:	str	r5, [r6, #32]
   15398:	ldr	r3, [r6, #4]
   1539c:	mov	r0, r3
   153a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153a4:	bl	111ec <__errno_location@plt>
   153a8:	mov	r2, #22
   153ac:	mov	r3, #0
   153b0:	str	r2, [r0]
   153b4:	mov	r0, r3
   153b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153bc:	mov	r3, r4
   153c0:	b	152e8 <__assert_fail@plt+0x3fb8>
   153c4:	mov	r0, r5
   153c8:	bl	112a0 <fchdir@plt>
   153cc:	cmp	r0, #0
   153d0:	bne	153f8 <__assert_fail@plt+0x40c8>
   153d4:	mov	r0, r5
   153d8:	bl	112f4 <close@plt>
   153dc:	b	15398 <__assert_fail@plt+0x4068>
   153e0:	mov	r2, r1
   153e4:	ldr	r0, [r6, #32]
   153e8:	ldr	r1, [pc, #44]	; 1541c <__assert_fail@plt+0x40ec>
   153ec:	bl	16dd4 <__assert_fail@plt+0x5aa4>
   153f0:	mov	r5, r0
   153f4:	b	15334 <__assert_fail@plt+0x4004>
   153f8:	ldr	r6, [r9]
   153fc:	mov	r0, r5
   15400:	bl	112f4 <close@plt>
   15404:	str	r6, [r9]
   15408:	mov	r3, r4
   1540c:	b	152e8 <__assert_fail@plt+0x3fb8>
   15410:	bl	112e8 <abort@plt>
   15414:	andeq	r4, r8, r0, lsl #18
   15418:	andeq	ip, r8, r0, lsl #18
   1541c:	andeq	lr, r1, r0, asr #22
   15420:	push	{r4, lr}
   15424:	ror	r0, r0, #3
   15428:	bl	1d7f4 <__assert_fail@plt+0xc4c4>
   1542c:	mov	r0, r1
   15430:	pop	{r4, pc}
   15434:	sub	r0, r1, r0
   15438:	clz	r0, r0
   1543c:	lsr	r0, r0, #5
   15440:	bx	lr
   15444:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15448:	mov	r5, r1
   1544c:	mov	r6, r0
   15450:	ldr	r4, [r0, #24]
   15454:	ldr	r1, [r0, #8]
   15458:	mov	r0, r5
   1545c:	mov	r8, r3
   15460:	mov	sl, r2
   15464:	blx	r4
   15468:	ldr	r3, [r6, #8]
   1546c:	cmp	r0, r3
   15470:	bcs	15560 <__assert_fail@plt+0x4230>
   15474:	ldr	r9, [r6]
   15478:	mov	r7, r0
   1547c:	add	r4, r9, r0, lsl #3
   15480:	str	r4, [sl]
   15484:	ldr	r3, [r9, r0, lsl #3]
   15488:	cmp	r3, #0
   1548c:	beq	15520 <__assert_fail@plt+0x41f0>
   15490:	cmp	r5, r3
   15494:	beq	154b4 <__assert_fail@plt+0x4184>
   15498:	mov	r1, r3
   1549c:	mov	r0, r5
   154a0:	ldr	r3, [r6, #28]
   154a4:	blx	r3
   154a8:	cmp	r0, #0
   154ac:	beq	15514 <__assert_fail@plt+0x41e4>
   154b0:	ldr	r3, [r9, r7, lsl #3]
   154b4:	cmp	r8, #0
   154b8:	beq	154e4 <__assert_fail@plt+0x41b4>
   154bc:	ldr	r2, [r4, #4]
   154c0:	cmp	r2, #0
   154c4:	movne	ip, #0
   154c8:	ldmne	r2, {r0, r1}
   154cc:	streq	r2, [r9, r7, lsl #3]
   154d0:	stmne	r4, {r0, r1}
   154d4:	strne	ip, [r2]
   154d8:	ldrne	r1, [r6, #36]	; 0x24
   154dc:	strne	r1, [r2, #4]
   154e0:	strne	r2, [r6, #36]	; 0x24
   154e4:	mov	r0, r3
   154e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154ec:	ldr	r3, [r2]
   154f0:	cmp	r5, r3
   154f4:	beq	15534 <__assert_fail@plt+0x4204>
   154f8:	mov	r1, r3
   154fc:	mov	r0, r5
   15500:	ldr	r3, [r6, #28]
   15504:	blx	r3
   15508:	cmp	r0, #0
   1550c:	bne	1552c <__assert_fail@plt+0x41fc>
   15510:	ldr	r4, [r4, #4]
   15514:	ldr	r2, [r4, #4]
   15518:	cmp	r2, #0
   1551c:	bne	154ec <__assert_fail@plt+0x41bc>
   15520:	mov	r3, #0
   15524:	mov	r0, r3
   15528:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1552c:	ldr	r2, [r4, #4]
   15530:	ldr	r3, [r2]
   15534:	cmp	r8, #0
   15538:	beq	154e4 <__assert_fail@plt+0x41b4>
   1553c:	ldr	r0, [r2, #4]
   15540:	mov	r1, #0
   15544:	str	r0, [r4, #4]
   15548:	str	r1, [r2]
   1554c:	ldr	r1, [r6, #36]	; 0x24
   15550:	mov	r0, r3
   15554:	str	r1, [r2, #4]
   15558:	str	r2, [r6, #36]	; 0x24
   1555c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15560:	bl	112e8 <abort@plt>
   15564:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15568:	ldr	r6, [r1]
   1556c:	ldr	r3, [r1, #4]
   15570:	cmp	r6, r3
   15574:	bcs	15644 <__assert_fail@plt+0x4314>
   15578:	mov	r9, r2
   1557c:	mov	r5, r0
   15580:	mov	r8, r1
   15584:	add	r6, r6, #8
   15588:	mov	sl, #0
   1558c:	ldr	fp, [r6, #-8]
   15590:	mov	r7, r6
   15594:	cmp	fp, #0
   15598:	beq	15638 <__assert_fail@plt+0x4308>
   1559c:	ldr	r4, [r6, #-4]
   155a0:	cmp	r4, #0
   155a4:	beq	15628 <__assert_fail@plt+0x42f8>
   155a8:	ldr	r1, [r5, #8]
   155ac:	b	155c8 <__assert_fail@plt+0x4298>
   155b0:	ldr	r3, [ip, #4]
   155b4:	cmp	r2, #0
   155b8:	str	r3, [r4, #4]
   155bc:	str	r4, [ip, #4]
   155c0:	beq	15624 <__assert_fail@plt+0x42f4>
   155c4:	mov	r4, r2
   155c8:	ldr	fp, [r4]
   155cc:	ldr	r3, [r5, #24]
   155d0:	mov	r0, fp
   155d4:	blx	r3
   155d8:	ldr	r1, [r5, #8]
   155dc:	cmp	r0, r1
   155e0:	bcs	156e4 <__assert_fail@plt+0x43b4>
   155e4:	ldr	r3, [r5]
   155e8:	ldr	r2, [r4, #4]
   155ec:	add	ip, r3, r0, lsl #3
   155f0:	ldr	lr, [r3, r0, lsl #3]
   155f4:	cmp	lr, #0
   155f8:	bne	155b0 <__assert_fail@plt+0x4280>
   155fc:	ldr	ip, [r5, #12]
   15600:	str	fp, [r3, r0, lsl #3]
   15604:	add	r3, ip, #1
   15608:	str	r3, [r5, #12]
   1560c:	str	lr, [r4]
   15610:	ldr	r3, [r5, #36]	; 0x24
   15614:	cmp	r2, #0
   15618:	str	r3, [r4, #4]
   1561c:	str	r4, [r5, #36]	; 0x24
   15620:	bne	155c4 <__assert_fail@plt+0x4294>
   15624:	ldr	fp, [r6, #-8]
   15628:	cmp	r9, #0
   1562c:	str	sl, [r6, #-4]
   15630:	beq	1564c <__assert_fail@plt+0x431c>
   15634:	ldr	r3, [r8, #4]
   15638:	cmp	r3, r7
   1563c:	add	r6, r6, #8
   15640:	bhi	1558c <__assert_fail@plt+0x425c>
   15644:	mov	r0, #1
   15648:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1564c:	ldr	r3, [r5, #24]
   15650:	ldr	r1, [r5, #8]
   15654:	mov	r0, fp
   15658:	blx	r3
   1565c:	ldr	r3, [r5, #8]
   15660:	cmp	r0, r3
   15664:	bcs	156e4 <__assert_fail@plt+0x43b4>
   15668:	ldr	r3, [r5]
   1566c:	add	r4, r3, r0, lsl #3
   15670:	ldr	r2, [r3, r0, lsl #3]
   15674:	cmp	r2, #0
   15678:	beq	156b8 <__assert_fail@plt+0x4388>
   1567c:	ldr	r0, [r5, #36]	; 0x24
   15680:	cmp	r0, #0
   15684:	beq	156cc <__assert_fail@plt+0x439c>
   15688:	ldr	r3, [r0, #4]
   1568c:	str	r3, [r5, #36]	; 0x24
   15690:	ldr	r3, [r4, #4]
   15694:	str	fp, [r0]
   15698:	str	r3, [r0, #4]
   1569c:	str	r0, [r4, #4]
   156a0:	ldr	r2, [r8, #12]
   156a4:	str	sl, [r6, #-8]
   156a8:	sub	r2, r2, #1
   156ac:	ldr	r3, [r8, #4]
   156b0:	str	r2, [r8, #12]
   156b4:	b	15638 <__assert_fail@plt+0x4308>
   156b8:	ldr	r2, [r5, #12]
   156bc:	str	fp, [r3, r0, lsl #3]
   156c0:	add	r3, r2, #1
   156c4:	str	r3, [r5, #12]
   156c8:	b	156a0 <__assert_fail@plt+0x4370>
   156cc:	mov	r0, #8
   156d0:	bl	1ce94 <__assert_fail@plt+0xbb64>
   156d4:	cmp	r0, #0
   156d8:	bne	15690 <__assert_fail@plt+0x4360>
   156dc:	mov	r0, r9
   156e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156e4:	bl	112e8 <abort@plt>
   156e8:	ldr	r0, [r0, #8]
   156ec:	bx	lr
   156f0:	ldr	r0, [r0, #12]
   156f4:	bx	lr
   156f8:	ldr	r0, [r0, #16]
   156fc:	bx	lr
   15700:	ldm	r0, {r1, ip}
   15704:	mov	r0, #0
   15708:	cmp	r1, ip
   1570c:	bcs	15754 <__assert_fail@plt+0x4424>
   15710:	ldr	r3, [r1]
   15714:	cmp	r3, #0
   15718:	beq	15744 <__assert_fail@plt+0x4414>
   1571c:	ldr	r3, [r1, #4]
   15720:	mov	r2, #1
   15724:	cmp	r3, #0
   15728:	beq	1573c <__assert_fail@plt+0x440c>
   1572c:	ldr	r3, [r3, #4]
   15730:	add	r2, r2, #1
   15734:	cmp	r3, #0
   15738:	bne	1572c <__assert_fail@plt+0x43fc>
   1573c:	cmp	r0, r2
   15740:	movcc	r0, r2
   15744:	add	r1, r1, #8
   15748:	cmp	r1, ip
   1574c:	bcc	15710 <__assert_fail@plt+0x43e0>
   15750:	bx	lr
   15754:	bx	lr
   15758:	push	{lr}		; (str lr, [sp, #-4]!)
   1575c:	mov	r2, #0
   15760:	ldm	r0, {r1, lr}
   15764:	mov	ip, r2
   15768:	cmp	r1, lr
   1576c:	bcs	157ac <__assert_fail@plt+0x447c>
   15770:	ldr	r3, [r1]
   15774:	cmp	r3, #0
   15778:	beq	157a0 <__assert_fail@plt+0x4470>
   1577c:	ldr	r3, [r1, #4]
   15780:	add	ip, ip, #1
   15784:	cmp	r3, #0
   15788:	add	r2, r2, #1
   1578c:	beq	157a0 <__assert_fail@plt+0x4470>
   15790:	ldr	r3, [r3, #4]
   15794:	add	r2, r2, #1
   15798:	cmp	r3, #0
   1579c:	bne	15790 <__assert_fail@plt+0x4460>
   157a0:	add	r1, r1, #8
   157a4:	cmp	r1, lr
   157a8:	bcc	15770 <__assert_fail@plt+0x4440>
   157ac:	ldr	r3, [r0, #12]
   157b0:	cmp	r3, ip
   157b4:	ldreq	r0, [r0, #16]
   157b8:	subeq	r0, r0, r2
   157bc:	clzeq	r0, r0
   157c0:	lsreq	r0, r0, #5
   157c4:	movne	r0, #0
   157c8:	pop	{pc}		; (ldr pc, [sp], #4)
   157cc:	push	{r4, r5, r6, r7, lr}
   157d0:	mov	r5, r1
   157d4:	ldm	r0, {ip, lr}
   157d8:	sub	sp, sp, #12
   157dc:	ldr	r3, [r0, #16]
   157e0:	cmp	ip, lr
   157e4:	mov	r4, #0
   157e8:	ldr	r6, [r0, #8]
   157ec:	ldr	r7, [r0, #12]
   157f0:	bcs	15834 <__assert_fail@plt+0x4504>
   157f4:	ldr	r2, [ip]
   157f8:	cmp	r2, #0
   157fc:	beq	15828 <__assert_fail@plt+0x44f8>
   15800:	ldr	r2, [ip, #4]
   15804:	mov	r1, #1
   15808:	cmp	r2, #0
   1580c:	beq	15820 <__assert_fail@plt+0x44f0>
   15810:	ldr	r2, [r2, #4]
   15814:	add	r1, r1, #1
   15818:	cmp	r2, #0
   1581c:	bne	15810 <__assert_fail@plt+0x44e0>
   15820:	cmp	r4, r1
   15824:	movcc	r4, r1
   15828:	add	ip, ip, #8
   1582c:	cmp	ip, lr
   15830:	bcc	157f4 <__assert_fail@plt+0x44c4>
   15834:	ldr	r2, [pc, #116]	; 158b0 <__assert_fail@plt+0x4580>
   15838:	mov	r1, #1
   1583c:	mov	r0, r5
   15840:	bl	11228 <__fprintf_chk@plt>
   15844:	mov	r3, r6
   15848:	ldr	r2, [pc, #100]	; 158b4 <__assert_fail@plt+0x4584>
   1584c:	mov	r1, #1
   15850:	mov	r0, r5
   15854:	bl	11228 <__fprintf_chk@plt>
   15858:	vmov	s15, r7
   1585c:	vldr	d5, [pc, #68]	; 158a8 <__assert_fail@plt+0x4578>
   15860:	mov	r3, r7
   15864:	ldr	r2, [pc, #76]	; 158b8 <__assert_fail@plt+0x4588>
   15868:	vcvt.f64.u32	d6, s15
   1586c:	vmov	s15, r6
   15870:	mov	r1, #1
   15874:	mov	r0, r5
   15878:	vcvt.f64.u32	d7, s15
   1587c:	vmul.f64	d6, d6, d5
   15880:	vdiv.f64	d5, d6, d7
   15884:	vstr	d5, [sp]
   15888:	bl	11228 <__fprintf_chk@plt>
   1588c:	mov	r3, r4
   15890:	mov	r0, r5
   15894:	ldr	r2, [pc, #32]	; 158bc <__assert_fail@plt+0x458c>
   15898:	mov	r1, #1
   1589c:	add	sp, sp, #12
   158a0:	pop	{r4, r5, r6, r7, lr}
   158a4:	b	11228 <__fprintf_chk@plt>
   158a8:	andeq	r0, r0, r0
   158ac:	subsmi	r0, r9, r0
   158b0:	andeq	lr, r1, r8, asr fp
   158b4:	andeq	lr, r1, r0, ror fp
   158b8:	andeq	lr, r1, r8, lsl #23
   158bc:	andeq	lr, r1, ip, lsr #23
   158c0:	push	{r4, r5, r6, lr}
   158c4:	mov	r5, r1
   158c8:	ldr	r3, [r0, #24]
   158cc:	mov	r6, r0
   158d0:	ldr	r1, [r0, #8]
   158d4:	mov	r0, r5
   158d8:	blx	r3
   158dc:	ldr	r3, [r6, #8]
   158e0:	cmp	r0, r3
   158e4:	bcs	15944 <__assert_fail@plt+0x4614>
   158e8:	ldr	r3, [r6]
   158ec:	add	r4, r3, r0, lsl #3
   158f0:	ldr	r1, [r3, r0, lsl #3]
   158f4:	cmp	r1, #0
   158f8:	bne	15904 <__assert_fail@plt+0x45d4>
   158fc:	b	1592c <__assert_fail@plt+0x45fc>
   15900:	ldr	r1, [r4]
   15904:	cmp	r5, r1
   15908:	beq	15934 <__assert_fail@plt+0x4604>
   1590c:	ldr	r3, [r6, #28]
   15910:	mov	r0, r5
   15914:	blx	r3
   15918:	cmp	r0, #0
   1591c:	bne	1593c <__assert_fail@plt+0x460c>
   15920:	ldr	r4, [r4, #4]
   15924:	cmp	r4, #0
   15928:	bne	15900 <__assert_fail@plt+0x45d0>
   1592c:	mov	r0, #0
   15930:	pop	{r4, r5, r6, pc}
   15934:	mov	r0, r5
   15938:	pop	{r4, r5, r6, pc}
   1593c:	ldr	r0, [r4]
   15940:	pop	{r4, r5, r6, pc}
   15944:	bl	112e8 <abort@plt>
   15948:	ldr	r3, [r0, #16]
   1594c:	cmp	r3, #0
   15950:	beq	15984 <__assert_fail@plt+0x4654>
   15954:	ldr	r3, [r0]
   15958:	ldr	r2, [r0, #4]
   1595c:	cmp	r3, r2
   15960:	bcc	15974 <__assert_fail@plt+0x4644>
   15964:	b	1598c <__assert_fail@plt+0x465c>
   15968:	add	r3, r3, #8
   1596c:	cmp	r3, r2
   15970:	bcs	1598c <__assert_fail@plt+0x465c>
   15974:	ldr	r0, [r3]
   15978:	cmp	r0, #0
   1597c:	beq	15968 <__assert_fail@plt+0x4638>
   15980:	bx	lr
   15984:	mov	r0, r3
   15988:	bx	lr
   1598c:	push	{r4, lr}
   15990:	bl	112e8 <abort@plt>
   15994:	push	{r4, r5, r6, lr}
   15998:	mov	r4, r1
   1599c:	ldr	r3, [r0, #24]
   159a0:	mov	r5, r0
   159a4:	ldr	r1, [r0, #8]
   159a8:	mov	r0, r4
   159ac:	blx	r3
   159b0:	ldr	r3, [r5, #8]
   159b4:	cmp	r0, r3
   159b8:	bcs	15a1c <__assert_fail@plt+0x46ec>
   159bc:	ldr	r3, [r5]
   159c0:	add	r0, r3, r0, lsl #3
   159c4:	mov	r3, r0
   159c8:	b	159d4 <__assert_fail@plt+0x46a4>
   159cc:	cmp	r3, #0
   159d0:	beq	159e8 <__assert_fail@plt+0x46b8>
   159d4:	ldm	r3, {r2, r3}
   159d8:	cmp	r4, r2
   159dc:	bne	159cc <__assert_fail@plt+0x469c>
   159e0:	cmp	r3, #0
   159e4:	bne	15a14 <__assert_fail@plt+0x46e4>
   159e8:	ldr	r2, [r5, #4]
   159ec:	mov	r3, r0
   159f0:	b	15a00 <__assert_fail@plt+0x46d0>
   159f4:	ldr	r0, [r3]
   159f8:	cmp	r0, #0
   159fc:	popne	{r4, r5, r6, pc}
   15a00:	add	r3, r3, #8
   15a04:	cmp	r3, r2
   15a08:	bcc	159f4 <__assert_fail@plt+0x46c4>
   15a0c:	mov	r0, #0
   15a10:	pop	{r4, r5, r6, pc}
   15a14:	ldr	r0, [r3]
   15a18:	pop	{r4, r5, r6, pc}
   15a1c:	bl	112e8 <abort@plt>
   15a20:	push	{r4, r5, r6, lr}
   15a24:	mov	r5, r0
   15a28:	ldr	r4, [r0]
   15a2c:	ldr	r0, [r0, #4]
   15a30:	cmp	r4, r0
   15a34:	bcs	15ab0 <__assert_fail@plt+0x4780>
   15a38:	add	r4, r4, #8
   15a3c:	mov	ip, #0
   15a40:	ldr	r3, [r4, #-8]
   15a44:	mov	r6, r4
   15a48:	cmp	r3, #0
   15a4c:	beq	15a98 <__assert_fail@plt+0x4768>
   15a50:	cmp	r2, ip
   15a54:	bls	15aa4 <__assert_fail@plt+0x4774>
   15a58:	str	r3, [r1, ip, lsl #2]
   15a5c:	ldr	r3, [r4, #-4]
   15a60:	add	r0, ip, #1
   15a64:	cmp	r3, #0
   15a68:	add	ip, r1, ip, lsl #2
   15a6c:	beq	15a90 <__assert_fail@plt+0x4760>
   15a70:	cmp	r2, r0
   15a74:	beq	15aac <__assert_fail@plt+0x477c>
   15a78:	ldr	lr, [r3]
   15a7c:	add	r0, r0, #1
   15a80:	str	lr, [ip, #4]!
   15a84:	ldr	r3, [r3, #4]
   15a88:	cmp	r3, #0
   15a8c:	bne	15a70 <__assert_fail@plt+0x4740>
   15a90:	mov	ip, r0
   15a94:	ldr	r0, [r5, #4]
   15a98:	cmp	r0, r6
   15a9c:	add	r4, r4, #8
   15aa0:	bhi	15a40 <__assert_fail@plt+0x4710>
   15aa4:	mov	r0, ip
   15aa8:	pop	{r4, r5, r6, pc}
   15aac:	pop	{r4, r5, r6, pc}
   15ab0:	mov	r0, #0
   15ab4:	pop	{r4, r5, r6, pc}
   15ab8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15abc:	ldr	r3, [r0, #4]
   15ac0:	ldr	r8, [r0]
   15ac4:	cmp	r8, r3
   15ac8:	bcs	15b2c <__assert_fail@plt+0x47fc>
   15acc:	mov	r7, r2
   15ad0:	mov	r6, r1
   15ad4:	mov	r9, r0
   15ad8:	mov	r5, #0
   15adc:	ldr	r0, [r8]
   15ae0:	cmp	r0, #0
   15ae4:	beq	15b18 <__assert_fail@plt+0x47e8>
   15ae8:	mov	r4, r8
   15aec:	b	15af4 <__assert_fail@plt+0x47c4>
   15af0:	ldr	r0, [r4]
   15af4:	mov	r1, r7
   15af8:	blx	r6
   15afc:	cmp	r0, #0
   15b00:	beq	15b24 <__assert_fail@plt+0x47f4>
   15b04:	ldr	r4, [r4, #4]
   15b08:	add	r5, r5, #1
   15b0c:	cmp	r4, #0
   15b10:	bne	15af0 <__assert_fail@plt+0x47c0>
   15b14:	ldr	r3, [r9, #4]
   15b18:	add	r8, r8, #8
   15b1c:	cmp	r3, r8
   15b20:	bhi	15adc <__assert_fail@plt+0x47ac>
   15b24:	mov	r0, r5
   15b28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b2c:	mov	r5, #0
   15b30:	b	15b24 <__assert_fail@plt+0x47f4>
   15b34:	push	{r4, r5, r6, lr}
   15b38:	mov	r4, r0
   15b3c:	ldrb	r0, [r0]
   15b40:	cmp	r0, #0
   15b44:	beq	15b74 <__assert_fail@plt+0x4844>
   15b48:	mov	r5, r1
   15b4c:	mov	r1, #0
   15b50:	rsb	r1, r1, r1, lsl #5
   15b54:	add	r0, r1, r0
   15b58:	mov	r1, r5
   15b5c:	bl	1d7f4 <__assert_fail@plt+0xc4c4>
   15b60:	ldrb	r0, [r4, #1]!
   15b64:	cmp	r0, #0
   15b68:	bne	15b50 <__assert_fail@plt+0x4820>
   15b6c:	mov	r0, r1
   15b70:	pop	{r4, r5, r6, pc}
   15b74:	mov	r1, r0
   15b78:	b	15b6c <__assert_fail@plt+0x483c>
   15b7c:	push	{lr}		; (str lr, [sp, #-4]!)
   15b80:	mov	ip, r0
   15b84:	ldr	lr, [pc, #16]	; 15b9c <__assert_fail@plt+0x486c>
   15b88:	ldm	lr!, {r0, r1, r2, r3}
   15b8c:	ldr	lr, [lr]
   15b90:	stmia	ip!, {r0, r1, r2, r3}
   15b94:	str	lr, [ip]
   15b98:	pop	{pc}		; (ldr pc, [sp], #4)
   15b9c:	andeq	lr, r1, r4, asr #22
   15ba0:	cmp	r2, #0
   15ba4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ba8:	mov	r4, r0
   15bac:	ldr	sl, [pc, #548]	; 15dd8 <__assert_fail@plt+0x4aa8>
   15bb0:	mov	r0, #40	; 0x28
   15bb4:	movne	sl, r2
   15bb8:	cmp	r3, #0
   15bbc:	ldr	fp, [pc, #536]	; 15ddc <__assert_fail@plt+0x4aac>
   15bc0:	mov	r5, r1
   15bc4:	movne	fp, r3
   15bc8:	bl	1ce94 <__assert_fail@plt+0xbb64>
   15bcc:	subs	r8, r0, #0
   15bd0:	beq	15c68 <__assert_fail@plt+0x4938>
   15bd4:	cmp	r5, #0
   15bd8:	ldr	r3, [pc, #512]	; 15de0 <__assert_fail@plt+0x4ab0>
   15bdc:	beq	15c70 <__assert_fail@plt+0x4940>
   15be0:	cmp	r5, r3
   15be4:	str	r5, [r8, #20]
   15be8:	beq	15c74 <__assert_fail@plt+0x4944>
   15bec:	vldr	s15, [r5, #8]
   15bf0:	vldr	s14, [pc, #456]	; 15dc0 <__assert_fail@plt+0x4a90>
   15bf4:	vcmpe.f32	s15, s14
   15bf8:	vmrs	APSR_nzcv, fpscr
   15bfc:	ble	15c58 <__assert_fail@plt+0x4928>
   15c00:	vldr	s13, [pc, #444]	; 15dc4 <__assert_fail@plt+0x4a94>
   15c04:	vcmpe.f32	s15, s13
   15c08:	vmrs	APSR_nzcv, fpscr
   15c0c:	bpl	15c58 <__assert_fail@plt+0x4928>
   15c10:	vldr	s13, [pc, #432]	; 15dc8 <__assert_fail@plt+0x4a98>
   15c14:	vldr	s12, [r5, #12]
   15c18:	vcmpe.f32	s12, s13
   15c1c:	vmrs	APSR_nzcv, fpscr
   15c20:	ble	15c58 <__assert_fail@plt+0x4928>
   15c24:	vldr	s13, [r5]
   15c28:	vcmpe.f32	s13, #0.0
   15c2c:	vmrs	APSR_nzcv, fpscr
   15c30:	blt	15c58 <__assert_fail@plt+0x4928>
   15c34:	vadd.f32	s14, s13, s14
   15c38:	vldr	s13, [r5, #4]
   15c3c:	vcmpe.f32	s14, s13
   15c40:	vmrs	APSR_nzcv, fpscr
   15c44:	bpl	15c58 <__assert_fail@plt+0x4928>
   15c48:	vldr	s12, [pc, #380]	; 15dcc <__assert_fail@plt+0x4a9c>
   15c4c:	vcmpe.f32	s13, s12
   15c50:	vmrs	APSR_nzcv, fpscr
   15c54:	bls	15da4 <__assert_fail@plt+0x4a74>
   15c58:	str	r3, [r8, #20]
   15c5c:	mov	r0, r8
   15c60:	bl	12cdc <__assert_fail@plt+0x19ac>
   15c64:	mov	r8, #0
   15c68:	mov	r0, r8
   15c6c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c70:	str	r3, [r8, #20]
   15c74:	vldr	s15, [pc, #340]	; 15dd0 <__assert_fail@plt+0x4aa0>
   15c78:	vmov	s14, r4
   15c7c:	vldr	s13, [pc, #336]	; 15dd4 <__assert_fail@plt+0x4aa4>
   15c80:	vcvt.f32.u32	s12, s14
   15c84:	vdiv.f32	s14, s12, s15
   15c88:	vcmpe.f32	s14, s13
   15c8c:	vmrs	APSR_nzcv, fpscr
   15c90:	bge	15d90 <__assert_fail@plt+0x4a60>
   15c94:	vcvt.u32.f32	s15, s14
   15c98:	vmov	r4, s15
   15c9c:	cmp	r4, #10
   15ca0:	movcc	r4, #10
   15ca4:	orr	r7, r4, #1
   15ca8:	cmn	r7, #1
   15cac:	ldrne	r9, [pc, #304]	; 15de4 <__assert_fail@plt+0x4ab4>
   15cb0:	beq	15d28 <__assert_fail@plt+0x49f8>
   15cb4:	cmp	r7, #9
   15cb8:	bls	15d9c <__assert_fail@plt+0x4a6c>
   15cbc:	umull	r2, r3, r9, r7
   15cc0:	lsr	r3, r3, #1
   15cc4:	add	r3, r3, r3, lsl #1
   15cc8:	cmp	r7, r3
   15ccc:	beq	15d1c <__assert_fail@plt+0x49ec>
   15cd0:	mov	r6, #16
   15cd4:	mov	r5, #9
   15cd8:	mov	r4, #3
   15cdc:	b	15cf0 <__assert_fail@plt+0x49c0>
   15ce0:	bl	1d7f4 <__assert_fail@plt+0xc4c4>
   15ce4:	add	r6, r6, #8
   15ce8:	cmp	r1, #0
   15cec:	beq	15d1c <__assert_fail@plt+0x49ec>
   15cf0:	add	r5, r5, r6
   15cf4:	add	r4, r4, #2
   15cf8:	cmp	r5, r7
   15cfc:	mov	r0, r7
   15d00:	mov	r1, r4
   15d04:	bcc	15ce0 <__assert_fail@plt+0x49b0>
   15d08:	mov	r1, r4
   15d0c:	mov	r0, r7
   15d10:	bl	1d7f4 <__assert_fail@plt+0xc4c4>
   15d14:	cmp	r1, #0
   15d18:	bne	15d28 <__assert_fail@plt+0x49f8>
   15d1c:	add	r7, r7, #2
   15d20:	cmn	r7, #1
   15d24:	bne	15cb4 <__assert_fail@plt+0x4984>
   15d28:	lsrs	r3, r7, #30
   15d2c:	movne	r4, #1
   15d30:	moveq	r4, #0
   15d34:	tst	r7, #536870912	; 0x20000000
   15d38:	bne	15d90 <__assert_fail@plt+0x4a60>
   15d3c:	cmp	r4, #0
   15d40:	bne	15d90 <__assert_fail@plt+0x4a60>
   15d44:	str	r7, [r8, #8]
   15d48:	mov	r0, r7
   15d4c:	mov	r1, #8
   15d50:	bl	1ce4c <__assert_fail@plt+0xbb1c>
   15d54:	cmp	r0, #0
   15d58:	str	r0, [r8]
   15d5c:	beq	15c5c <__assert_fail@plt+0x492c>
   15d60:	ldr	r3, [r8, #8]
   15d64:	str	r4, [r8, #12]
   15d68:	str	r4, [r8, #16]
   15d6c:	add	r0, r0, r3, lsl #3
   15d70:	ldr	r3, [sp, #40]	; 0x28
   15d74:	str	r0, [r8, #4]
   15d78:	str	sl, [r8, #24]
   15d7c:	str	fp, [r8, #28]
   15d80:	str	r3, [r8, #32]
   15d84:	str	r4, [r8, #36]	; 0x24
   15d88:	mov	r0, r8
   15d8c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d90:	mov	r3, #0
   15d94:	str	r3, [r8, #8]
   15d98:	b	15c5c <__assert_fail@plt+0x492c>
   15d9c:	mov	r4, #3
   15da0:	b	15d08 <__assert_fail@plt+0x49d8>
   15da4:	vcmpe.f32	s15, s14
   15da8:	vmrs	APSR_nzcv, fpscr
   15dac:	ble	15c58 <__assert_fail@plt+0x4928>
   15db0:	ldrb	r3, [r5, #16]
   15db4:	cmp	r3, #0
   15db8:	bne	15c9c <__assert_fail@plt+0x496c>
   15dbc:	b	15c78 <__assert_fail@plt+0x4948>
   15dc0:	stclcc	12, cr12, [ip, #820]	; 0x334
   15dc4:	svccc	0x00666666
   15dc8:	svccc	0x008ccccd
   15dcc:	svccc	0x00800000
   15dd0:	svccc	0x004ccccd
   15dd4:	svcmi	0x00800000
   15dd8:	andeq	r5, r1, r0, lsr #8
   15ddc:	andeq	r5, r1, r4, lsr r4
   15de0:	andeq	lr, r1, r4, asr #22
   15de4:	bge	feac0898 <optarg@@GLIBC_2.4+0xfea90700>
   15de8:	push	{r4, r5, r6, r7, r8, lr}
   15dec:	mov	r5, r0
   15df0:	ldr	r7, [r0]
   15df4:	ldr	r3, [r0, #4]
   15df8:	cmp	r7, r3
   15dfc:	addcc	r7, r7, #8
   15e00:	movcc	r6, #0
   15e04:	bcs	15e80 <__assert_fail@plt+0x4b50>
   15e08:	ldr	r2, [r7, #-8]
   15e0c:	mov	r8, r7
   15e10:	cmp	r2, #0
   15e14:	beq	15e74 <__assert_fail@plt+0x4b44>
   15e18:	ldr	r4, [r7, #-4]
   15e1c:	ldr	r2, [r5, #32]
   15e20:	cmp	r4, #0
   15e24:	beq	15e58 <__assert_fail@plt+0x4b28>
   15e28:	cmp	r2, #0
   15e2c:	beq	15e3c <__assert_fail@plt+0x4b0c>
   15e30:	ldr	r0, [r4]
   15e34:	blx	r2
   15e38:	ldr	r2, [r5, #32]
   15e3c:	ldr	r3, [r4, #4]
   15e40:	ldr	r1, [r5, #36]	; 0x24
   15e44:	str	r6, [r4]
   15e48:	str	r1, [r4, #4]
   15e4c:	str	r4, [r5, #36]	; 0x24
   15e50:	subs	r4, r3, #0
   15e54:	bne	15e28 <__assert_fail@plt+0x4af8>
   15e58:	cmp	r2, #0
   15e5c:	beq	15e68 <__assert_fail@plt+0x4b38>
   15e60:	ldr	r0, [r7, #-8]
   15e64:	blx	r2
   15e68:	str	r6, [r7, #-8]
   15e6c:	str	r6, [r7, #-4]
   15e70:	ldr	r3, [r5, #4]
   15e74:	cmp	r3, r8
   15e78:	add	r7, r7, #8
   15e7c:	bhi	15e08 <__assert_fail@plt+0x4ad8>
   15e80:	mov	r3, #0
   15e84:	str	r3, [r5, #12]
   15e88:	str	r3, [r5, #16]
   15e8c:	pop	{r4, r5, r6, r7, r8, pc}
   15e90:	ldr	r3, [r0, #32]
   15e94:	push	{r4, r5, r6, lr}
   15e98:	cmp	r3, #0
   15e9c:	mov	r5, r0
   15ea0:	beq	15f00 <__assert_fail@plt+0x4bd0>
   15ea4:	ldr	r3, [r0, #16]
   15ea8:	cmp	r3, #0
   15eac:	beq	15f00 <__assert_fail@plt+0x4bd0>
   15eb0:	ldr	r6, [r0]
   15eb4:	ldr	r3, [r0, #4]
   15eb8:	cmp	r6, r3
   15ebc:	bcs	15f3c <__assert_fail@plt+0x4c0c>
   15ec0:	ldr	r0, [r6]
   15ec4:	cmp	r0, #0
   15ec8:	beq	15ef0 <__assert_fail@plt+0x4bc0>
   15ecc:	mov	r4, r6
   15ed0:	b	15ed8 <__assert_fail@plt+0x4ba8>
   15ed4:	ldr	r0, [r4]
   15ed8:	ldr	r3, [r5, #32]
   15edc:	blx	r3
   15ee0:	ldr	r4, [r4, #4]
   15ee4:	cmp	r4, #0
   15ee8:	bne	15ed4 <__assert_fail@plt+0x4ba4>
   15eec:	ldr	r3, [r5, #4]
   15ef0:	add	r6, r6, #8
   15ef4:	cmp	r3, r6
   15ef8:	bhi	15ec0 <__assert_fail@plt+0x4b90>
   15efc:	b	15f04 <__assert_fail@plt+0x4bd4>
   15f00:	ldr	r3, [r5, #4]
   15f04:	ldr	r6, [r5]
   15f08:	cmp	r6, r3
   15f0c:	bcs	15f3c <__assert_fail@plt+0x4c0c>
   15f10:	ldr	r0, [r6, #4]
   15f14:	cmp	r0, #0
   15f18:	beq	15f30 <__assert_fail@plt+0x4c00>
   15f1c:	ldr	r4, [r0, #4]
   15f20:	bl	12cdc <__assert_fail@plt+0x19ac>
   15f24:	subs	r0, r4, #0
   15f28:	bne	15f1c <__assert_fail@plt+0x4bec>
   15f2c:	ldr	r3, [r5, #4]
   15f30:	add	r6, r6, #8
   15f34:	cmp	r3, r6
   15f38:	bhi	15f10 <__assert_fail@plt+0x4be0>
   15f3c:	ldr	r0, [r5, #36]	; 0x24
   15f40:	cmp	r0, #0
   15f44:	beq	15f58 <__assert_fail@plt+0x4c28>
   15f48:	ldr	r4, [r0, #4]
   15f4c:	bl	12cdc <__assert_fail@plt+0x19ac>
   15f50:	subs	r0, r4, #0
   15f54:	bne	15f48 <__assert_fail@plt+0x4c18>
   15f58:	ldr	r0, [r5]
   15f5c:	bl	12cdc <__assert_fail@plt+0x19ac>
   15f60:	mov	r0, r5
   15f64:	pop	{r4, r5, r6, lr}
   15f68:	b	12cdc <__assert_fail@plt+0x19ac>
   15f6c:	ldr	r3, [r0, #20]
   15f70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f74:	mov	r8, r0
   15f78:	ldrb	r2, [r3, #16]
   15f7c:	sub	sp, sp, #40	; 0x28
   15f80:	cmp	r2, #0
   15f84:	bne	15fb0 <__assert_fail@plt+0x4c80>
   15f88:	vmov	s15, r1
   15f8c:	vldr	s13, [r3, #8]
   15f90:	vldr	s14, [pc, #648]	; 16220 <__assert_fail@plt+0x4ef0>
   15f94:	vcvt.f32.u32	s12, s15
   15f98:	vdiv.f32	s15, s12, s13
   15f9c:	vcmpe.f32	s15, s14
   15fa0:	vmrs	APSR_nzcv, fpscr
   15fa4:	bge	161d8 <__assert_fail@plt+0x4ea8>
   15fa8:	vcvt.u32.f32	s15, s15
   15fac:	vmov	r1, s15
   15fb0:	cmp	r1, #10
   15fb4:	movcc	r1, #10
   15fb8:	orr	r7, r1, #1
   15fbc:	cmn	r7, #1
   15fc0:	ldrne	r9, [pc, #604]	; 16224 <__assert_fail@plt+0x4ef4>
   15fc4:	beq	1603c <__assert_fail@plt+0x4d0c>
   15fc8:	cmp	r7, #9
   15fcc:	bls	161e8 <__assert_fail@plt+0x4eb8>
   15fd0:	umull	r2, r3, r9, r7
   15fd4:	lsr	r3, r3, #1
   15fd8:	add	r3, r3, r3, lsl #1
   15fdc:	cmp	r7, r3
   15fe0:	beq	16030 <__assert_fail@plt+0x4d00>
   15fe4:	mov	r6, #16
   15fe8:	mov	r5, #9
   15fec:	mov	r4, #3
   15ff0:	b	1600c <__assert_fail@plt+0x4cdc>
   15ff4:	mov	r1, r4
   15ff8:	mov	r0, r7
   15ffc:	bl	1d7f4 <__assert_fail@plt+0xc4c4>
   16000:	add	r6, r6, #8
   16004:	cmp	r1, #0
   16008:	beq	16030 <__assert_fail@plt+0x4d00>
   1600c:	add	r5, r5, r6
   16010:	cmp	r5, r7
   16014:	add	r4, r4, #2
   16018:	bcc	15ff4 <__assert_fail@plt+0x4cc4>
   1601c:	mov	r1, r4
   16020:	mov	r0, r7
   16024:	bl	1d7f4 <__assert_fail@plt+0xc4c4>
   16028:	cmp	r1, #0
   1602c:	bne	1603c <__assert_fail@plt+0x4d0c>
   16030:	add	r7, r7, #2
   16034:	cmn	r7, #1
   16038:	bne	15fc8 <__assert_fail@plt+0x4c98>
   1603c:	lsrs	r3, r7, #30
   16040:	movne	r4, #1
   16044:	moveq	r4, #0
   16048:	tst	r7, #536870912	; 0x20000000
   1604c:	bne	161d8 <__assert_fail@plt+0x4ea8>
   16050:	cmp	r4, #0
   16054:	bne	161d8 <__assert_fail@plt+0x4ea8>
   16058:	ldr	r3, [r8, #8]
   1605c:	cmp	r3, r7
   16060:	beq	161c8 <__assert_fail@plt+0x4e98>
   16064:	mov	r1, #8
   16068:	mov	r0, r7
   1606c:	bl	1ce4c <__assert_fail@plt+0xbb1c>
   16070:	cmp	r0, #0
   16074:	str	r0, [sp]
   16078:	beq	161d8 <__assert_fail@plt+0x4ea8>
   1607c:	ldr	r1, [r8, #24]
   16080:	ldr	r5, [r8, #20]
   16084:	ldr	lr, [r8, #28]
   16088:	ldr	ip, [r8, #32]
   1608c:	add	r0, r0, r7, lsl #3
   16090:	ldr	r3, [r8, #36]	; 0x24
   16094:	str	r0, [sp, #4]
   16098:	str	r1, [sp, #24]
   1609c:	mov	r2, r4
   160a0:	mov	r0, sp
   160a4:	mov	r1, r8
   160a8:	str	r7, [sp, #8]
   160ac:	str	r4, [sp, #12]
   160b0:	str	r4, [sp, #16]
   160b4:	str	r5, [sp, #20]
   160b8:	str	lr, [sp, #28]
   160bc:	str	ip, [sp, #32]
   160c0:	str	r3, [sp, #36]	; 0x24
   160c4:	bl	15564 <__assert_fail@plt+0x4234>
   160c8:	subs	r9, r0, #0
   160cc:	bne	161f0 <__assert_fail@plt+0x4ec0>
   160d0:	ldr	r5, [sp]
   160d4:	ldr	r2, [sp, #4]
   160d8:	ldr	r3, [sp, #36]	; 0x24
   160dc:	cmp	r5, r2
   160e0:	str	r3, [r8, #36]	; 0x24
   160e4:	addcc	r5, r5, #8
   160e8:	movcc	r7, r9
   160ec:	bcs	1619c <__assert_fail@plt+0x4e6c>
   160f0:	ldr	r3, [r5, #-8]
   160f4:	mov	r6, r5
   160f8:	cmp	r3, #0
   160fc:	beq	16190 <__assert_fail@plt+0x4e60>
   16100:	ldr	r4, [r5, #-4]
   16104:	cmp	r4, #0
   16108:	beq	1618c <__assert_fail@plt+0x4e5c>
   1610c:	ldr	r1, [r8, #8]
   16110:	b	1612c <__assert_fail@plt+0x4dfc>
   16114:	ldr	r3, [ip, #4]
   16118:	cmp	r2, #0
   1611c:	str	r3, [r4, #4]
   16120:	str	r4, [ip, #4]
   16124:	beq	16188 <__assert_fail@plt+0x4e58>
   16128:	mov	r4, r2
   1612c:	ldr	sl, [r4]
   16130:	ldr	r3, [r8, #24]
   16134:	mov	r0, sl
   16138:	blx	r3
   1613c:	ldr	r1, [r8, #8]
   16140:	cmp	r0, r1
   16144:	bcs	1621c <__assert_fail@plt+0x4eec>
   16148:	ldr	r3, [r8]
   1614c:	ldr	r2, [r4, #4]
   16150:	add	ip, r3, r0, lsl #3
   16154:	ldr	lr, [r3, r0, lsl #3]
   16158:	cmp	lr, #0
   1615c:	bne	16114 <__assert_fail@plt+0x4de4>
   16160:	ldr	ip, [r8, #12]
   16164:	str	sl, [r3, r0, lsl #3]
   16168:	add	r3, ip, #1
   1616c:	str	r3, [r8, #12]
   16170:	str	lr, [r4]
   16174:	ldr	r3, [r8, #36]	; 0x24
   16178:	cmp	r2, #0
   1617c:	str	r3, [r4, #4]
   16180:	str	r4, [r8, #36]	; 0x24
   16184:	bne	16128 <__assert_fail@plt+0x4df8>
   16188:	ldr	r2, [sp, #4]
   1618c:	str	r7, [r5, #-4]
   16190:	cmp	r6, r2
   16194:	add	r5, r5, #8
   16198:	bcc	160f0 <__assert_fail@plt+0x4dc0>
   1619c:	mov	r1, sp
   161a0:	mov	r0, r8
   161a4:	mov	r2, #0
   161a8:	bl	15564 <__assert_fail@plt+0x4234>
   161ac:	cmp	r0, #0
   161b0:	beq	1621c <__assert_fail@plt+0x4eec>
   161b4:	ldr	r0, [sp]
   161b8:	bl	12cdc <__assert_fail@plt+0x19ac>
   161bc:	mov	r0, r9
   161c0:	add	sp, sp, #40	; 0x28
   161c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   161c8:	mov	r9, #1
   161cc:	mov	r0, r9
   161d0:	add	sp, sp, #40	; 0x28
   161d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   161d8:	mov	r9, #0
   161dc:	mov	r0, r9
   161e0:	add	sp, sp, #40	; 0x28
   161e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   161e8:	mov	r4, #3
   161ec:	b	1601c <__assert_fail@plt+0x4cec>
   161f0:	ldr	r0, [r8]
   161f4:	bl	12cdc <__assert_fail@plt+0x19ac>
   161f8:	ldmib	sp, {r0, r1, r2}
   161fc:	ldr	ip, [sp]
   16200:	ldr	r3, [sp, #36]	; 0x24
   16204:	stmib	r8, {r0, r1, r2}
   16208:	mov	r0, r9
   1620c:	str	ip, [r8]
   16210:	str	r3, [r8, #36]	; 0x24
   16214:	add	sp, sp, #40	; 0x28
   16218:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1621c:	bl	112e8 <abort@plt>
   16220:	svcmi	0x00800000
   16224:	bge	feac0cd8 <optarg@@GLIBC_2.4+0xfea90b40>
   16228:	push	{r4, r5, r6, r7, r8, r9, lr}
   1622c:	subs	r5, r1, #0
   16230:	sub	sp, sp, #12
   16234:	beq	16450 <__assert_fail@plt+0x5120>
   16238:	ldr	r3, [r0, #24]
   1623c:	mov	r6, r0
   16240:	ldr	r1, [r0, #8]
   16244:	mov	r0, r5
   16248:	mov	r7, r2
   1624c:	blx	r3
   16250:	ldr	r3, [r6, #8]
   16254:	cmp	r0, r3
   16258:	mov	r8, r0
   1625c:	bcs	16450 <__assert_fail@plt+0x5120>
   16260:	ldr	r9, [r6]
   16264:	add	r4, r9, r0, lsl #3
   16268:	ldr	r1, [r9, r0, lsl #3]
   1626c:	str	r4, [sp, #4]
   16270:	cmp	r1, #0
   16274:	beq	16454 <__assert_fail@plt+0x5124>
   16278:	cmp	r5, r1
   1627c:	beq	162d4 <__assert_fail@plt+0x4fa4>
   16280:	ldr	r3, [r6, #28]
   16284:	mov	r0, r5
   16288:	blx	r3
   1628c:	cmp	r0, #0
   16290:	bne	162e8 <__assert_fail@plt+0x4fb8>
   16294:	ldr	r3, [r4, #4]
   16298:	cmp	r3, #0
   1629c:	bne	162c8 <__assert_fail@plt+0x4f98>
   162a0:	b	162f4 <__assert_fail@plt+0x4fc4>
   162a4:	ldr	r3, [r6, #28]
   162a8:	mov	r0, r5
   162ac:	blx	r3
   162b0:	cmp	r0, #0
   162b4:	bne	16368 <__assert_fail@plt+0x5038>
   162b8:	ldr	r4, [r4, #4]
   162bc:	ldr	r3, [r4, #4]
   162c0:	cmp	r3, #0
   162c4:	beq	162f4 <__assert_fail@plt+0x4fc4>
   162c8:	ldr	r1, [r3]
   162cc:	cmp	r5, r1
   162d0:	bne	162a4 <__assert_fail@plt+0x4f74>
   162d4:	mov	r0, #0
   162d8:	cmp	r7, #0
   162dc:	strne	r1, [r7]
   162e0:	add	sp, sp, #12
   162e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   162e8:	ldr	r1, [r9, r8, lsl #3]
   162ec:	cmp	r1, #0
   162f0:	bne	162d4 <__assert_fail@plt+0x4fa4>
   162f4:	vldr	s15, [r6, #8]
   162f8:	ldr	r3, [r6, #20]
   162fc:	vldr	s14, [r6, #12]
   16300:	vcvt.f32.u32	s15, s15
   16304:	vldr	s13, [r3, #8]
   16308:	vcvt.f32.u32	s14, s14
   1630c:	vmul.f32	s12, s13, s15
   16310:	vcmpe.f32	s14, s12
   16314:	vmrs	APSR_nzcv, fpscr
   16318:	bgt	16374 <__assert_fail@plt+0x5044>
   1631c:	ldr	r4, [sp, #4]
   16320:	ldr	r3, [r4]
   16324:	cmp	r3, #0
   16328:	beq	164b8 <__assert_fail@plt+0x5188>
   1632c:	ldr	r3, [r6, #36]	; 0x24
   16330:	cmp	r3, #0
   16334:	beq	164a0 <__assert_fail@plt+0x5170>
   16338:	ldr	r2, [r3, #4]
   1633c:	str	r2, [r6, #36]	; 0x24
   16340:	ldr	r2, [r6, #16]
   16344:	ldr	r1, [r4, #4]
   16348:	add	r2, r2, #1
   1634c:	str	r5, [r3]
   16350:	str	r1, [r3, #4]
   16354:	mov	r0, #1
   16358:	str	r3, [r4, #4]
   1635c:	str	r2, [r6, #16]
   16360:	add	sp, sp, #12
   16364:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16368:	ldr	r3, [r4, #4]
   1636c:	ldr	r1, [r3]
   16370:	b	162ec <__assert_fail@plt+0x4fbc>
   16374:	ldr	r2, [pc, #392]	; 16504 <__assert_fail@plt+0x51d4>
   16378:	cmp	r3, r2
   1637c:	beq	16400 <__assert_fail@plt+0x50d0>
   16380:	vldr	s12, [pc, #352]	; 164e8 <__assert_fail@plt+0x51b8>
   16384:	vcmpe.f32	s13, s12
   16388:	vmrs	APSR_nzcv, fpscr
   1638c:	ble	163e8 <__assert_fail@plt+0x50b8>
   16390:	vldr	s11, [pc, #340]	; 164ec <__assert_fail@plt+0x51bc>
   16394:	vcmpe.f32	s13, s11
   16398:	vmrs	APSR_nzcv, fpscr
   1639c:	bpl	163e8 <__assert_fail@plt+0x50b8>
   163a0:	vldr	s11, [r3, #12]
   163a4:	vldr	s10, [pc, #324]	; 164f0 <__assert_fail@plt+0x51c0>
   163a8:	vcmpe.f32	s11, s10
   163ac:	vmrs	APSR_nzcv, fpscr
   163b0:	ble	163e8 <__assert_fail@plt+0x50b8>
   163b4:	vldr	s10, [r3]
   163b8:	vcmpe.f32	s10, #0.0
   163bc:	vmrs	APSR_nzcv, fpscr
   163c0:	blt	163e8 <__assert_fail@plt+0x50b8>
   163c4:	vadd.f32	s12, s10, s12
   163c8:	vldr	s10, [r3, #4]
   163cc:	vcmpe.f32	s12, s10
   163d0:	vmrs	APSR_nzcv, fpscr
   163d4:	bpl	163e8 <__assert_fail@plt+0x50b8>
   163d8:	vldr	s9, [pc, #276]	; 164f4 <__assert_fail@plt+0x51c4>
   163dc:	vcmpe.f32	s10, s9
   163e0:	vmrs	APSR_nzcv, fpscr
   163e4:	bls	164c8 <__assert_fail@plt+0x5198>
   163e8:	vldr	s13, [pc, #264]	; 164f8 <__assert_fail@plt+0x51c8>
   163ec:	str	r2, [r6, #20]
   163f0:	vmul.f32	s12, s15, s13
   163f4:	vcmpe.f32	s12, s14
   163f8:	vmrs	APSR_nzcv, fpscr
   163fc:	bpl	1631c <__assert_fail@plt+0x4fec>
   16400:	vldr	s11, [pc, #244]	; 164fc <__assert_fail@plt+0x51cc>
   16404:	vmul.f32	s15, s15, s11
   16408:	vmul.f32	s15, s15, s13
   1640c:	vldr	s14, [pc, #236]	; 16500 <__assert_fail@plt+0x51d0>
   16410:	vcmpe.f32	s15, s14
   16414:	vmrs	APSR_nzcv, fpscr
   16418:	bge	164c0 <__assert_fail@plt+0x5190>
   1641c:	vcvt.u32.f32	s15, s15
   16420:	mov	r0, r6
   16424:	vmov	r1, s15
   16428:	bl	15f6c <__assert_fail@plt+0x4c3c>
   1642c:	cmp	r0, #0
   16430:	beq	164c0 <__assert_fail@plt+0x5190>
   16434:	mov	r3, #0
   16438:	add	r2, sp, #4
   1643c:	mov	r1, r5
   16440:	mov	r0, r6
   16444:	bl	15444 <__assert_fail@plt+0x4114>
   16448:	cmp	r0, #0
   1644c:	beq	1631c <__assert_fail@plt+0x4fec>
   16450:	bl	112e8 <abort@plt>
   16454:	vmov	s15, r3
   16458:	ldr	r2, [r6, #12]
   1645c:	ldr	r3, [r6, #20]
   16460:	vcvt.f32.u32	s15, s15
   16464:	vldr	s13, [r3, #8]
   16468:	vmov	s14, r2
   1646c:	vcvt.f32.u32	s14, s14
   16470:	vmul.f32	s12, s13, s15
   16474:	vcmpe.f32	s14, s12
   16478:	vmrs	APSR_nzcv, fpscr
   1647c:	bgt	16374 <__assert_fail@plt+0x5044>
   16480:	ldr	r3, [r6, #16]
   16484:	add	r2, r2, #1
   16488:	add	r3, r3, #1
   1648c:	str	r5, [r4]
   16490:	mov	r0, #1
   16494:	str	r2, [r6, #12]
   16498:	str	r3, [r6, #16]
   1649c:	b	162e0 <__assert_fail@plt+0x4fb0>
   164a0:	mov	r0, #8
   164a4:	bl	1ce94 <__assert_fail@plt+0xbb64>
   164a8:	subs	r3, r0, #0
   164ac:	beq	164c0 <__assert_fail@plt+0x5190>
   164b0:	ldr	r4, [sp, #4]
   164b4:	b	16340 <__assert_fail@plt+0x5010>
   164b8:	ldr	r2, [r6, #12]
   164bc:	b	16480 <__assert_fail@plt+0x5150>
   164c0:	mvn	r0, #0
   164c4:	b	162e0 <__assert_fail@plt+0x4fb0>
   164c8:	vcmpe.f32	s12, s13
   164cc:	vmrs	APSR_nzcv, fpscr
   164d0:	bpl	163e8 <__assert_fail@plt+0x50b8>
   164d4:	ldrb	r3, [r3, #16]
   164d8:	cmp	r3, #0
   164dc:	vmulne.f32	s15, s11, s15
   164e0:	bne	1640c <__assert_fail@plt+0x50dc>
   164e4:	b	16404 <__assert_fail@plt+0x50d4>
   164e8:	stclcc	12, cr12, [ip, #820]	; 0x334
   164ec:	svccc	0x00666666
   164f0:	svccc	0x008ccccd
   164f4:	svccc	0x00800000
   164f8:	svccc	0x004ccccd
   164fc:	svccc	0x00b4fdf4
   16500:	svcmi	0x00800000
   16504:	andeq	lr, r1, r4, asr #22
   16508:	push	{r4, r5, r6, r7, r8, lr}
   1650c:	subs	r5, r1, #0
   16510:	sub	sp, sp, #8
   16514:	beq	16718 <__assert_fail@plt+0x53e8>
   16518:	ldr	r3, [r0, #24]
   1651c:	mov	r6, r0
   16520:	ldr	r1, [r0, #8]
   16524:	mov	r0, r5
   16528:	blx	r3
   1652c:	ldr	r3, [r6, #8]
   16530:	cmp	r0, r3
   16534:	mov	r7, r0
   16538:	bcs	16718 <__assert_fail@plt+0x53e8>
   1653c:	ldr	r8, [r6]
   16540:	add	r4, r8, r0, lsl #3
   16544:	ldr	r1, [r8, r0, lsl #3]
   16548:	str	r4, [sp, #4]
   1654c:	cmp	r1, #0
   16550:	beq	1671c <__assert_fail@plt+0x53ec>
   16554:	cmp	r5, r1
   16558:	beq	1657c <__assert_fail@plt+0x524c>
   1655c:	ldr	r3, [r6, #28]
   16560:	mov	r0, r5
   16564:	blx	r3
   16568:	cmp	r0, #0
   1656c:	beq	165ac <__assert_fail@plt+0x527c>
   16570:	ldr	r1, [r8, r7, lsl #3]
   16574:	cmp	r1, #0
   16578:	beq	165b8 <__assert_fail@plt+0x5288>
   1657c:	mov	r0, r1
   16580:	add	sp, sp, #8
   16584:	pop	{r4, r5, r6, r7, r8, pc}
   16588:	ldr	r1, [r3]
   1658c:	cmp	r5, r1
   16590:	beq	1657c <__assert_fail@plt+0x524c>
   16594:	ldr	r3, [r6, #28]
   16598:	mov	r0, r5
   1659c:	blx	r3
   165a0:	cmp	r0, #0
   165a4:	bne	16630 <__assert_fail@plt+0x5300>
   165a8:	ldr	r4, [r4, #4]
   165ac:	ldr	r3, [r4, #4]
   165b0:	cmp	r3, #0
   165b4:	bne	16588 <__assert_fail@plt+0x5258>
   165b8:	vldr	s15, [r6, #8]
   165bc:	ldr	r3, [r6, #20]
   165c0:	vldr	s14, [r6, #12]
   165c4:	vcvt.f32.u32	s15, s15
   165c8:	vldr	s13, [r3, #8]
   165cc:	vcvt.f32.u32	s14, s14
   165d0:	vmul.f32	s12, s13, s15
   165d4:	vcmpe.f32	s14, s12
   165d8:	vmrs	APSR_nzcv, fpscr
   165dc:	bgt	1663c <__assert_fail@plt+0x530c>
   165e0:	ldr	r4, [sp, #4]
   165e4:	ldr	r3, [r4]
   165e8:	cmp	r3, #0
   165ec:	beq	1677c <__assert_fail@plt+0x544c>
   165f0:	ldr	r0, [r6, #36]	; 0x24
   165f4:	cmp	r0, #0
   165f8:	beq	16764 <__assert_fail@plt+0x5434>
   165fc:	ldr	r3, [r0, #4]
   16600:	str	r3, [r6, #36]	; 0x24
   16604:	ldr	r3, [r6, #16]
   16608:	ldr	r2, [r4, #4]
   1660c:	add	r3, r3, #1
   16610:	str	r5, [r0]
   16614:	str	r2, [r0, #4]
   16618:	str	r0, [r4, #4]
   1661c:	str	r3, [r6, #16]
   16620:	mov	r1, r5
   16624:	mov	r0, r1
   16628:	add	sp, sp, #8
   1662c:	pop	{r4, r5, r6, r7, r8, pc}
   16630:	ldr	r3, [r4, #4]
   16634:	ldr	r1, [r3]
   16638:	b	16574 <__assert_fail@plt+0x5244>
   1663c:	ldr	r2, [pc, #388]	; 167c8 <__assert_fail@plt+0x5498>
   16640:	cmp	r3, r2
   16644:	beq	166c8 <__assert_fail@plt+0x5398>
   16648:	vldr	s12, [pc, #348]	; 167ac <__assert_fail@plt+0x547c>
   1664c:	vcmpe.f32	s13, s12
   16650:	vmrs	APSR_nzcv, fpscr
   16654:	ble	166b0 <__assert_fail@plt+0x5380>
   16658:	vldr	s11, [pc, #336]	; 167b0 <__assert_fail@plt+0x5480>
   1665c:	vcmpe.f32	s13, s11
   16660:	vmrs	APSR_nzcv, fpscr
   16664:	bpl	166b0 <__assert_fail@plt+0x5380>
   16668:	vldr	s11, [r3, #12]
   1666c:	vldr	s10, [pc, #320]	; 167b4 <__assert_fail@plt+0x5484>
   16670:	vcmpe.f32	s11, s10
   16674:	vmrs	APSR_nzcv, fpscr
   16678:	ble	166b0 <__assert_fail@plt+0x5380>
   1667c:	vldr	s10, [r3]
   16680:	vcmpe.f32	s10, #0.0
   16684:	vmrs	APSR_nzcv, fpscr
   16688:	blt	166b0 <__assert_fail@plt+0x5380>
   1668c:	vadd.f32	s12, s10, s12
   16690:	vldr	s10, [r3, #4]
   16694:	vcmpe.f32	s12, s10
   16698:	vmrs	APSR_nzcv, fpscr
   1669c:	bpl	166b0 <__assert_fail@plt+0x5380>
   166a0:	vldr	s9, [pc, #272]	; 167b8 <__assert_fail@plt+0x5488>
   166a4:	vcmpe.f32	s10, s9
   166a8:	vmrs	APSR_nzcv, fpscr
   166ac:	bls	1678c <__assert_fail@plt+0x545c>
   166b0:	vldr	s13, [pc, #260]	; 167bc <__assert_fail@plt+0x548c>
   166b4:	str	r2, [r6, #20]
   166b8:	vmul.f32	s12, s15, s13
   166bc:	vcmpe.f32	s12, s14
   166c0:	vmrs	APSR_nzcv, fpscr
   166c4:	bpl	165e0 <__assert_fail@plt+0x52b0>
   166c8:	vldr	s11, [pc, #240]	; 167c0 <__assert_fail@plt+0x5490>
   166cc:	vmul.f32	s15, s15, s11
   166d0:	vmul.f32	s15, s15, s13
   166d4:	vldr	s14, [pc, #232]	; 167c4 <__assert_fail@plt+0x5494>
   166d8:	vcmpe.f32	s15, s14
   166dc:	vmrs	APSR_nzcv, fpscr
   166e0:	bge	16784 <__assert_fail@plt+0x5454>
   166e4:	vcvt.u32.f32	s15, s15
   166e8:	mov	r0, r6
   166ec:	vmov	r1, s15
   166f0:	bl	15f6c <__assert_fail@plt+0x4c3c>
   166f4:	cmp	r0, #0
   166f8:	beq	16784 <__assert_fail@plt+0x5454>
   166fc:	mov	r3, #0
   16700:	add	r2, sp, #4
   16704:	mov	r1, r5
   16708:	mov	r0, r6
   1670c:	bl	15444 <__assert_fail@plt+0x4114>
   16710:	cmp	r0, #0
   16714:	beq	165e0 <__assert_fail@plt+0x52b0>
   16718:	bl	112e8 <abort@plt>
   1671c:	vmov	s15, r3
   16720:	ldr	r2, [r6, #12]
   16724:	ldr	r3, [r6, #20]
   16728:	vcvt.f32.u32	s15, s15
   1672c:	vldr	s13, [r3, #8]
   16730:	vmov	s14, r2
   16734:	vcvt.f32.u32	s14, s14
   16738:	vmul.f32	s12, s15, s13
   1673c:	vcmpe.f32	s12, s14
   16740:	vmrs	APSR_nzcv, fpscr
   16744:	bmi	1663c <__assert_fail@plt+0x530c>
   16748:	ldr	r3, [r6, #16]
   1674c:	add	r2, r2, #1
   16750:	add	r3, r3, #1
   16754:	str	r5, [r4]
   16758:	str	r2, [r6, #12]
   1675c:	str	r3, [r6, #16]
   16760:	b	16620 <__assert_fail@plt+0x52f0>
   16764:	mov	r0, #8
   16768:	bl	1ce94 <__assert_fail@plt+0xbb64>
   1676c:	cmp	r0, #0
   16770:	beq	16784 <__assert_fail@plt+0x5454>
   16774:	ldr	r4, [sp, #4]
   16778:	b	16604 <__assert_fail@plt+0x52d4>
   1677c:	ldr	r2, [r6, #12]
   16780:	b	16748 <__assert_fail@plt+0x5418>
   16784:	mov	r1, #0
   16788:	b	1657c <__assert_fail@plt+0x524c>
   1678c:	vcmpe.f32	s12, s13
   16790:	vmrs	APSR_nzcv, fpscr
   16794:	bpl	166b0 <__assert_fail@plt+0x5380>
   16798:	ldrb	r3, [r3, #16]
   1679c:	cmp	r3, #0
   167a0:	vmulne.f32	s15, s11, s15
   167a4:	bne	166d4 <__assert_fail@plt+0x53a4>
   167a8:	b	166cc <__assert_fail@plt+0x539c>
   167ac:	stclcc	12, cr12, [ip, #820]	; 0x334
   167b0:	svccc	0x00666666
   167b4:	svccc	0x008ccccd
   167b8:	svccc	0x00800000
   167bc:	svccc	0x004ccccd
   167c0:	svccc	0x00b4fdf4
   167c4:	svcmi	0x00800000
   167c8:	andeq	lr, r1, r4, asr #22
   167cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   167d0:	mov	r7, r1
   167d4:	ldr	r3, [r0, #24]
   167d8:	mov	r6, r0
   167dc:	ldr	r1, [r0, #8]
   167e0:	mov	r0, r7
   167e4:	blx	r3
   167e8:	ldr	r3, [r6, #8]
   167ec:	cmp	r0, r3
   167f0:	bcs	16a1c <__assert_fail@plt+0x56ec>
   167f4:	ldr	r9, [r6]
   167f8:	mov	r8, r0
   167fc:	add	r5, r9, r0, lsl #3
   16800:	ldr	r4, [r9, r0, lsl #3]
   16804:	cmp	r4, #0
   16808:	beq	168b4 <__assert_fail@plt+0x5584>
   1680c:	cmp	r7, r4
   16810:	beq	16830 <__assert_fail@plt+0x5500>
   16814:	mov	r1, r4
   16818:	ldr	r3, [r6, #28]
   1681c:	mov	r0, r7
   16820:	blx	r3
   16824:	cmp	r0, #0
   16828:	beq	168a8 <__assert_fail@plt+0x5578>
   1682c:	ldr	r4, [r9, r8, lsl #3]
   16830:	ldr	r3, [r5, #4]
   16834:	cmp	r3, #0
   16838:	movne	r2, #0
   1683c:	ldmne	r3, {r0, r1}
   16840:	streq	r3, [r9, r8, lsl #3]
   16844:	stmne	r5, {r0, r1}
   16848:	strne	r2, [r3]
   1684c:	ldrne	r2, [r6, #36]	; 0x24
   16850:	strne	r2, [r3, #4]
   16854:	strne	r3, [r6, #36]	; 0x24
   16858:	cmp	r4, #0
   1685c:	beq	168b4 <__assert_fail@plt+0x5584>
   16860:	ldr	r2, [r9, r8, lsl #3]
   16864:	ldr	r3, [r6, #16]
   16868:	cmp	r2, #0
   1686c:	sub	r3, r3, #1
   16870:	str	r3, [r6, #16]
   16874:	beq	168e8 <__assert_fail@plt+0x55b8>
   16878:	mov	r0, r4
   1687c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16880:	ldr	r4, [r3]
   16884:	cmp	r7, r4
   16888:	beq	168c8 <__assert_fail@plt+0x5598>
   1688c:	mov	r1, r4
   16890:	ldr	r3, [r6, #28]
   16894:	mov	r0, r7
   16898:	blx	r3
   1689c:	cmp	r0, #0
   168a0:	bne	168c0 <__assert_fail@plt+0x5590>
   168a4:	ldr	r5, [r5, #4]
   168a8:	ldr	r3, [r5, #4]
   168ac:	cmp	r3, #0
   168b0:	bne	16880 <__assert_fail@plt+0x5550>
   168b4:	mov	r4, #0
   168b8:	mov	r0, r4
   168bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   168c0:	ldr	r3, [r5, #4]
   168c4:	ldr	r4, [r3]
   168c8:	ldr	r1, [r3, #4]
   168cc:	mov	r2, #0
   168d0:	str	r1, [r5, #4]
   168d4:	str	r2, [r3]
   168d8:	ldr	r2, [r6, #36]	; 0x24
   168dc:	str	r2, [r3, #4]
   168e0:	str	r3, [r6, #36]	; 0x24
   168e4:	b	16858 <__assert_fail@plt+0x5528>
   168e8:	vldr	s15, [r6, #8]
   168ec:	ldr	r3, [r6, #12]
   168f0:	ldr	r2, [r6, #20]
   168f4:	sub	r3, r3, #1
   168f8:	vcvt.f32.u32	s14, s15
   168fc:	vldr	s13, [r2]
   16900:	vmov	s15, r3
   16904:	str	r3, [r6, #12]
   16908:	vcvt.f32.u32	s15, s15
   1690c:	vmul.f32	s12, s13, s14
   16910:	vcmpe.f32	s15, s12
   16914:	vmrs	APSR_nzcv, fpscr
   16918:	bpl	16878 <__assert_fail@plt+0x5548>
   1691c:	ldr	r3, [pc, #276]	; 16a38 <__assert_fail@plt+0x5708>
   16920:	cmp	r2, r3
   16924:	beq	16a04 <__assert_fail@plt+0x56d4>
   16928:	vldr	s12, [r2, #8]
   1692c:	vldr	s11, [pc, #236]	; 16a20 <__assert_fail@plt+0x56f0>
   16930:	vcmpe.f32	s12, s11
   16934:	vmrs	APSR_nzcv, fpscr
   16938:	ble	169ec <__assert_fail@plt+0x56bc>
   1693c:	vldr	s10, [pc, #224]	; 16a24 <__assert_fail@plt+0x56f4>
   16940:	vcmpe.f32	s12, s10
   16944:	vmrs	APSR_nzcv, fpscr
   16948:	bpl	169ec <__assert_fail@plt+0x56bc>
   1694c:	vldr	s10, [pc, #212]	; 16a28 <__assert_fail@plt+0x56f8>
   16950:	vldr	s9, [r2, #12]
   16954:	vcmpe.f32	s9, s10
   16958:	vmrs	APSR_nzcv, fpscr
   1695c:	ble	169ec <__assert_fail@plt+0x56bc>
   16960:	vcmpe.f32	s13, #0.0
   16964:	vmrs	APSR_nzcv, fpscr
   16968:	blt	169ec <__assert_fail@plt+0x56bc>
   1696c:	vadd.f32	s13, s13, s11
   16970:	vldr	s11, [r2, #4]
   16974:	vcmpe.f32	s13, s11
   16978:	vmrs	APSR_nzcv, fpscr
   1697c:	bpl	169ec <__assert_fail@plt+0x56bc>
   16980:	vldr	s10, [pc, #164]	; 16a2c <__assert_fail@plt+0x56fc>
   16984:	vcmpe.f32	s11, s10
   16988:	vmrs	APSR_nzcv, fpscr
   1698c:	bhi	169ec <__assert_fail@plt+0x56bc>
   16990:	vcmpe.f32	s12, s13
   16994:	vmrs	APSR_nzcv, fpscr
   16998:	ble	169ec <__assert_fail@plt+0x56bc>
   1699c:	ldrb	r3, [r2, #16]
   169a0:	cmp	r3, #0
   169a4:	beq	16a0c <__assert_fail@plt+0x56dc>
   169a8:	vmul.f32	s15, s14, s11
   169ac:	vcvt.u32.f32	s15, s15
   169b0:	vmov	r1, s15
   169b4:	mov	r0, r6
   169b8:	bl	15f6c <__assert_fail@plt+0x4c3c>
   169bc:	cmp	r0, #0
   169c0:	bne	16878 <__assert_fail@plt+0x5548>
   169c4:	ldr	r0, [r6, #36]	; 0x24
   169c8:	cmp	r0, #0
   169cc:	beq	169e0 <__assert_fail@plt+0x56b0>
   169d0:	ldr	r5, [r0, #4]
   169d4:	bl	12cdc <__assert_fail@plt+0x19ac>
   169d8:	subs	r0, r5, #0
   169dc:	bne	169d0 <__assert_fail@plt+0x56a0>
   169e0:	mov	r3, #0
   169e4:	str	r3, [r6, #36]	; 0x24
   169e8:	b	16878 <__assert_fail@plt+0x5548>
   169ec:	vldr	s13, [pc, #60]	; 16a30 <__assert_fail@plt+0x5700>
   169f0:	str	r3, [r6, #20]
   169f4:	vmul.f32	s13, s14, s13
   169f8:	vcmpe.f32	s15, s13
   169fc:	vmrs	APSR_nzcv, fpscr
   16a00:	bpl	16878 <__assert_fail@plt+0x5548>
   16a04:	vldr	s12, [pc, #40]	; 16a34 <__assert_fail@plt+0x5704>
   16a08:	vldr	s11, [pc, #28]	; 16a2c <__assert_fail@plt+0x56fc>
   16a0c:	vmul.f32	s15, s14, s11
   16a10:	vmul.f32	s15, s15, s12
   16a14:	vcvt.u32.f32	s15, s15
   16a18:	b	169b0 <__assert_fail@plt+0x5680>
   16a1c:	bl	112e8 <abort@plt>
   16a20:	stclcc	12, cr12, [ip, #820]	; 0x334
   16a24:	svccc	0x00666666
   16a28:	svccc	0x008ccccd
   16a2c:	svccc	0x00800000
   16a30:	andeq	r0, r0, r0
   16a34:	svccc	0x004ccccd
   16a38:	andeq	lr, r1, r4, asr #22
   16a3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a40:	mov	r7, r1
   16a44:	ldr	r3, [r0, #24]
   16a48:	mov	r6, r0
   16a4c:	ldr	r1, [r0, #8]
   16a50:	mov	r0, r7
   16a54:	blx	r3
   16a58:	ldr	r3, [r6, #8]
   16a5c:	cmp	r0, r3
   16a60:	bcs	16c8c <__assert_fail@plt+0x595c>
   16a64:	ldr	r9, [r6]
   16a68:	mov	r8, r0
   16a6c:	add	r5, r9, r0, lsl #3
   16a70:	ldr	r4, [r9, r0, lsl #3]
   16a74:	cmp	r4, #0
   16a78:	beq	16b24 <__assert_fail@plt+0x57f4>
   16a7c:	cmp	r7, r4
   16a80:	beq	16aa0 <__assert_fail@plt+0x5770>
   16a84:	mov	r1, r4
   16a88:	ldr	r3, [r6, #28]
   16a8c:	mov	r0, r7
   16a90:	blx	r3
   16a94:	cmp	r0, #0
   16a98:	beq	16b18 <__assert_fail@plt+0x57e8>
   16a9c:	ldr	r4, [r9, r8, lsl #3]
   16aa0:	ldr	r3, [r5, #4]
   16aa4:	cmp	r3, #0
   16aa8:	movne	r2, #0
   16aac:	ldmne	r3, {r0, r1}
   16ab0:	streq	r3, [r9, r8, lsl #3]
   16ab4:	stmne	r5, {r0, r1}
   16ab8:	strne	r2, [r3]
   16abc:	ldrne	r2, [r6, #36]	; 0x24
   16ac0:	strne	r2, [r3, #4]
   16ac4:	strne	r3, [r6, #36]	; 0x24
   16ac8:	cmp	r4, #0
   16acc:	beq	16b24 <__assert_fail@plt+0x57f4>
   16ad0:	ldr	r2, [r9, r8, lsl #3]
   16ad4:	ldr	r3, [r6, #16]
   16ad8:	cmp	r2, #0
   16adc:	sub	r3, r3, #1
   16ae0:	str	r3, [r6, #16]
   16ae4:	beq	16b58 <__assert_fail@plt+0x5828>
   16ae8:	mov	r0, r4
   16aec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16af0:	ldr	r4, [r3]
   16af4:	cmp	r7, r4
   16af8:	beq	16b38 <__assert_fail@plt+0x5808>
   16afc:	mov	r1, r4
   16b00:	ldr	r3, [r6, #28]
   16b04:	mov	r0, r7
   16b08:	blx	r3
   16b0c:	cmp	r0, #0
   16b10:	bne	16b30 <__assert_fail@plt+0x5800>
   16b14:	ldr	r5, [r5, #4]
   16b18:	ldr	r3, [r5, #4]
   16b1c:	cmp	r3, #0
   16b20:	bne	16af0 <__assert_fail@plt+0x57c0>
   16b24:	mov	r4, #0
   16b28:	mov	r0, r4
   16b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b30:	ldr	r3, [r5, #4]
   16b34:	ldr	r4, [r3]
   16b38:	ldr	r1, [r3, #4]
   16b3c:	mov	r2, #0
   16b40:	str	r1, [r5, #4]
   16b44:	str	r2, [r3]
   16b48:	ldr	r2, [r6, #36]	; 0x24
   16b4c:	str	r2, [r3, #4]
   16b50:	str	r3, [r6, #36]	; 0x24
   16b54:	b	16ac8 <__assert_fail@plt+0x5798>
   16b58:	vldr	s15, [r6, #8]
   16b5c:	ldr	r3, [r6, #12]
   16b60:	ldr	r2, [r6, #20]
   16b64:	sub	r3, r3, #1
   16b68:	vcvt.f32.u32	s14, s15
   16b6c:	vldr	s13, [r2]
   16b70:	vmov	s15, r3
   16b74:	str	r3, [r6, #12]
   16b78:	vcvt.f32.u32	s15, s15
   16b7c:	vmul.f32	s12, s13, s14
   16b80:	vcmpe.f32	s15, s12
   16b84:	vmrs	APSR_nzcv, fpscr
   16b88:	bpl	16ae8 <__assert_fail@plt+0x57b8>
   16b8c:	ldr	r3, [pc, #276]	; 16ca8 <__assert_fail@plt+0x5978>
   16b90:	cmp	r2, r3
   16b94:	beq	16c74 <__assert_fail@plt+0x5944>
   16b98:	vldr	s12, [r2, #8]
   16b9c:	vldr	s11, [pc, #236]	; 16c90 <__assert_fail@plt+0x5960>
   16ba0:	vcmpe.f32	s12, s11
   16ba4:	vmrs	APSR_nzcv, fpscr
   16ba8:	ble	16c5c <__assert_fail@plt+0x592c>
   16bac:	vldr	s10, [pc, #224]	; 16c94 <__assert_fail@plt+0x5964>
   16bb0:	vcmpe.f32	s12, s10
   16bb4:	vmrs	APSR_nzcv, fpscr
   16bb8:	bpl	16c5c <__assert_fail@plt+0x592c>
   16bbc:	vldr	s10, [pc, #212]	; 16c98 <__assert_fail@plt+0x5968>
   16bc0:	vldr	s9, [r2, #12]
   16bc4:	vcmpe.f32	s9, s10
   16bc8:	vmrs	APSR_nzcv, fpscr
   16bcc:	ble	16c5c <__assert_fail@plt+0x592c>
   16bd0:	vcmpe.f32	s13, #0.0
   16bd4:	vmrs	APSR_nzcv, fpscr
   16bd8:	blt	16c5c <__assert_fail@plt+0x592c>
   16bdc:	vadd.f32	s13, s13, s11
   16be0:	vldr	s11, [r2, #4]
   16be4:	vcmpe.f32	s13, s11
   16be8:	vmrs	APSR_nzcv, fpscr
   16bec:	bpl	16c5c <__assert_fail@plt+0x592c>
   16bf0:	vldr	s10, [pc, #164]	; 16c9c <__assert_fail@plt+0x596c>
   16bf4:	vcmpe.f32	s11, s10
   16bf8:	vmrs	APSR_nzcv, fpscr
   16bfc:	bhi	16c5c <__assert_fail@plt+0x592c>
   16c00:	vcmpe.f32	s12, s13
   16c04:	vmrs	APSR_nzcv, fpscr
   16c08:	ble	16c5c <__assert_fail@plt+0x592c>
   16c0c:	ldrb	r3, [r2, #16]
   16c10:	cmp	r3, #0
   16c14:	beq	16c7c <__assert_fail@plt+0x594c>
   16c18:	vmul.f32	s15, s14, s11
   16c1c:	vcvt.u32.f32	s15, s15
   16c20:	vmov	r1, s15
   16c24:	mov	r0, r6
   16c28:	bl	15f6c <__assert_fail@plt+0x4c3c>
   16c2c:	cmp	r0, #0
   16c30:	bne	16ae8 <__assert_fail@plt+0x57b8>
   16c34:	ldr	r0, [r6, #36]	; 0x24
   16c38:	cmp	r0, #0
   16c3c:	beq	16c50 <__assert_fail@plt+0x5920>
   16c40:	ldr	r5, [r0, #4]
   16c44:	bl	12cdc <__assert_fail@plt+0x19ac>
   16c48:	subs	r0, r5, #0
   16c4c:	bne	16c40 <__assert_fail@plt+0x5910>
   16c50:	mov	r3, #0
   16c54:	str	r3, [r6, #36]	; 0x24
   16c58:	b	16ae8 <__assert_fail@plt+0x57b8>
   16c5c:	vldr	s13, [pc, #60]	; 16ca0 <__assert_fail@plt+0x5970>
   16c60:	str	r3, [r6, #20]
   16c64:	vmul.f32	s13, s14, s13
   16c68:	vcmpe.f32	s15, s13
   16c6c:	vmrs	APSR_nzcv, fpscr
   16c70:	bpl	16ae8 <__assert_fail@plt+0x57b8>
   16c74:	vldr	s12, [pc, #40]	; 16ca4 <__assert_fail@plt+0x5974>
   16c78:	vldr	s11, [pc, #28]	; 16c9c <__assert_fail@plt+0x596c>
   16c7c:	vmul.f32	s15, s14, s11
   16c80:	vmul.f32	s15, s15, s12
   16c84:	vcvt.u32.f32	s15, s15
   16c88:	b	16c20 <__assert_fail@plt+0x58f0>
   16c8c:	bl	112e8 <abort@plt>
   16c90:	stclcc	12, cr12, [ip, #820]	; 0x334
   16c94:	svccc	0x00666666
   16c98:	svccc	0x008ccccd
   16c9c:	svccc	0x00800000
   16ca0:	andeq	r0, r0, r0
   16ca4:	svccc	0x004ccccd
   16ca8:	andeq	lr, r1, r4, asr #22
   16cac:	mov	r3, #0
   16cb0:	mov	r2, #1
   16cb4:	str	r1, [r0]
   16cb8:	str	r1, [r0, #4]
   16cbc:	str	r1, [r0, #8]
   16cc0:	str	r1, [r0, #12]
   16cc4:	str	r1, [r0, #16]
   16cc8:	strb	r2, [r0, #28]
   16ccc:	str	r3, [r0, #20]
   16cd0:	str	r3, [r0, #24]
   16cd4:	bx	lr
   16cd8:	ldrb	r0, [r0, #28]
   16cdc:	bx	lr
   16ce0:	ldrb	ip, [r0, #28]
   16ce4:	ldr	r3, [r0, #20]
   16ce8:	mov	r2, r0
   16cec:	eor	ip, ip, #1
   16cf0:	add	r3, ip, r3
   16cf4:	and	r3, r3, #3
   16cf8:	ldr	r0, [r0, r3, lsl #2]
   16cfc:	str	r1, [r2, r3, lsl #2]
   16d00:	ldr	r1, [r2, #24]
   16d04:	str	r3, [r2, #20]
   16d08:	cmp	r3, r1
   16d0c:	addeq	r3, ip, r3
   16d10:	andeq	r3, r3, #3
   16d14:	streq	r3, [r2, #24]
   16d18:	mov	r3, #0
   16d1c:	strb	r3, [r2, #28]
   16d20:	bx	lr
   16d24:	ldrb	r3, [r0, #28]
   16d28:	cmp	r3, #0
   16d2c:	bne	16d64 <__assert_fail@plt+0x5a34>
   16d30:	ldr	r3, [r0, #20]
   16d34:	ldr	r1, [r0, #16]
   16d38:	ldr	r2, [r0, r3, lsl #2]
   16d3c:	str	r1, [r0, r3, lsl #2]
   16d40:	ldr	r1, [r0, #24]
   16d44:	cmp	r3, r1
   16d48:	addne	r3, r3, #3
   16d4c:	moveq	r3, #1
   16d50:	andne	r3, r3, #3
   16d54:	strbeq	r3, [r0, #28]
   16d58:	strne	r3, [r0, #20]
   16d5c:	mov	r0, r2
   16d60:	bx	lr
   16d64:	push	{r4, lr}
   16d68:	bl	112e8 <abort@plt>
   16d6c:	push	{r4, r5, r6, r8, r9, lr}
   16d70:	mov	r4, r0
   16d74:	mov	r5, r1
   16d78:	add	r6, r2, #20
   16d7c:	mov	r8, #10
   16d80:	mov	r9, #0
   16d84:	mov	r3, #0
   16d88:	strb	r3, [r2, #20]
   16d8c:	mov	r0, r4
   16d90:	mov	r1, r5
   16d94:	mov	r2, r8
   16d98:	mov	r3, r9
   16d9c:	bl	1da54 <__assert_fail@plt+0xc724>
   16da0:	mov	r0, r4
   16da4:	mov	r1, r5
   16da8:	mov	r3, r9
   16dac:	add	r2, r2, #48	; 0x30
   16db0:	strb	r2, [r6, #-1]!
   16db4:	mov	r2, r8
   16db8:	bl	1da54 <__assert_fail@plt+0xc724>
   16dbc:	mov	r4, r0
   16dc0:	mov	r5, r1
   16dc4:	orrs	r3, r4, r5
   16dc8:	bne	16d8c <__assert_fail@plt+0x5a5c>
   16dcc:	mov	r0, r6
   16dd0:	pop	{r4, r5, r6, r8, r9, pc}
   16dd4:	push	{r2, r3}
   16dd8:	push	{lr}		; (str lr, [sp, #-4]!)
   16ddc:	sub	sp, sp, #12
   16de0:	ldr	r2, [sp, #16]
   16de4:	ands	r3, r2, #64	; 0x40
   16de8:	addne	r3, sp, #20
   16dec:	strne	r3, [sp, #4]
   16df0:	ldrne	r3, [sp, #20]
   16df4:	bl	111d4 <openat64@plt>
   16df8:	bl	1aefc <__assert_fail@plt+0x9bcc>
   16dfc:	add	sp, sp, #12
   16e00:	pop	{lr}		; (ldr lr, [sp], #4)
   16e04:	add	sp, sp, #8
   16e08:	bx	lr
   16e0c:	orr	r2, r2, #540672	; 0x84000
   16e10:	push	{r4, r5, r6, lr}
   16e14:	orr	r2, r2, #2304	; 0x900
   16e18:	mov	r6, r3
   16e1c:	bl	16dd4 <__assert_fail@plt+0x5aa4>
   16e20:	subs	r5, r0, #0
   16e24:	blt	16e58 <__assert_fail@plt+0x5b28>
   16e28:	bl	11288 <fdopendir@plt>
   16e2c:	subs	r4, r0, #0
   16e30:	beq	16e40 <__assert_fail@plt+0x5b10>
   16e34:	str	r5, [r6]
   16e38:	mov	r0, r4
   16e3c:	pop	{r4, r5, r6, pc}
   16e40:	bl	111ec <__errno_location@plt>
   16e44:	mov	r6, r0
   16e48:	mov	r0, r5
   16e4c:	ldr	r5, [r6]
   16e50:	bl	112f4 <close@plt>
   16e54:	b	16e34 <__assert_fail@plt+0x5b04>
   16e58:	mov	r4, #0
   16e5c:	b	16e38 <__assert_fail@plt+0x5b08>
   16e60:	push	{r4, r5, r6, lr}
   16e64:	subs	r4, r0, #0
   16e68:	beq	16edc <__assert_fail@plt+0x5bac>
   16e6c:	mov	r1, #47	; 0x2f
   16e70:	bl	11264 <strrchr@plt>
   16e74:	subs	r5, r0, #0
   16e78:	beq	16ec8 <__assert_fail@plt+0x5b98>
   16e7c:	add	r6, r5, #1
   16e80:	sub	r3, r6, r4
   16e84:	cmp	r3, #6
   16e88:	ble	16ec8 <__assert_fail@plt+0x5b98>
   16e8c:	mov	r2, #7
   16e90:	ldr	r1, [pc, #96]	; 16ef8 <__assert_fail@plt+0x5bc8>
   16e94:	sub	r0, r5, #6
   16e98:	bl	112dc <strncmp@plt>
   16e9c:	cmp	r0, #0
   16ea0:	bne	16ec8 <__assert_fail@plt+0x5b98>
   16ea4:	mov	r2, #3
   16ea8:	ldr	r1, [pc, #76]	; 16efc <__assert_fail@plt+0x5bcc>
   16eac:	mov	r0, r6
   16eb0:	bl	112dc <strncmp@plt>
   16eb4:	cmp	r0, #0
   16eb8:	movne	r4, r6
   16ebc:	ldreq	r3, [pc, #60]	; 16f00 <__assert_fail@plt+0x5bd0>
   16ec0:	addeq	r4, r5, #4
   16ec4:	streq	r4, [r3]
   16ec8:	ldr	r2, [pc, #52]	; 16f04 <__assert_fail@plt+0x5bd4>
   16ecc:	ldr	r3, [pc, #52]	; 16f08 <__assert_fail@plt+0x5bd8>
   16ed0:	str	r4, [r2]
   16ed4:	str	r4, [r3]
   16ed8:	pop	{r4, r5, r6, pc}
   16edc:	ldr	r3, [pc, #40]	; 16f0c <__assert_fail@plt+0x5bdc>
   16ee0:	mov	r2, #55	; 0x37
   16ee4:	mov	r1, #1
   16ee8:	ldr	r3, [r3]
   16eec:	ldr	r0, [pc, #28]	; 16f10 <__assert_fail@plt+0x5be0>
   16ef0:	bl	11108 <fwrite@plt>
   16ef4:	bl	112e8 <abort@plt>
   16ef8:	strdeq	lr, [r1], -ip
   16efc:	andeq	lr, r1, r4, lsl #24
   16f00:	andeq	r0, r3, r0, lsl #3
   16f04:	andeq	r0, r3, r0, asr #3
   16f08:	andeq	r0, r3, r4, lsl #3
   16f0c:	muleq	r3, r0, r1
   16f10:	andeq	lr, r1, r4, asr #23
   16f14:	push	{r4, r5, r6, lr}
   16f18:	mov	r4, r0
   16f1c:	mov	r5, r1
   16f20:	bl	1d434 <__assert_fail@plt+0xc104>
   16f24:	ldrb	r3, [r0]
   16f28:	bic	r3, r3, #32
   16f2c:	cmp	r3, #85	; 0x55
   16f30:	bne	16f90 <__assert_fail@plt+0x5c60>
   16f34:	ldrb	r3, [r0, #1]
   16f38:	bic	r3, r3, #32
   16f3c:	cmp	r3, #84	; 0x54
   16f40:	bne	16fcc <__assert_fail@plt+0x5c9c>
   16f44:	ldrb	r3, [r0, #2]
   16f48:	bic	r3, r3, #32
   16f4c:	cmp	r3, #70	; 0x46
   16f50:	bne	16fcc <__assert_fail@plt+0x5c9c>
   16f54:	ldrb	r3, [r0, #3]
   16f58:	cmp	r3, #45	; 0x2d
   16f5c:	bne	16fcc <__assert_fail@plt+0x5c9c>
   16f60:	ldrb	r3, [r0, #4]
   16f64:	cmp	r3, #56	; 0x38
   16f68:	bne	16fcc <__assert_fail@plt+0x5c9c>
   16f6c:	ldrb	r3, [r0, #5]
   16f70:	cmp	r3, #0
   16f74:	bne	16fcc <__assert_fail@plt+0x5c9c>
   16f78:	ldrb	r2, [r4]
   16f7c:	ldr	r3, [pc, #152]	; 1701c <__assert_fail@plt+0x5cec>
   16f80:	ldr	r0, [pc, #152]	; 17020 <__assert_fail@plt+0x5cf0>
   16f84:	cmp	r2, #96	; 0x60
   16f88:	movne	r0, r3
   16f8c:	pop	{r4, r5, r6, pc}
   16f90:	cmp	r3, #71	; 0x47
   16f94:	bne	16fcc <__assert_fail@plt+0x5c9c>
   16f98:	ldrb	r3, [r0, #1]
   16f9c:	bic	r3, r3, #32
   16fa0:	cmp	r3, #66	; 0x42
   16fa4:	bne	16fcc <__assert_fail@plt+0x5c9c>
   16fa8:	ldrb	r3, [r0, #2]
   16fac:	cmp	r3, #49	; 0x31
   16fb0:	bne	16fcc <__assert_fail@plt+0x5c9c>
   16fb4:	ldrb	r3, [r0, #3]
   16fb8:	cmp	r3, #56	; 0x38
   16fbc:	bne	16fcc <__assert_fail@plt+0x5c9c>
   16fc0:	ldrb	r3, [r0, #4]
   16fc4:	cmp	r3, #48	; 0x30
   16fc8:	beq	16fe0 <__assert_fail@plt+0x5cb0>
   16fcc:	ldr	r3, [pc, #80]	; 17024 <__assert_fail@plt+0x5cf4>
   16fd0:	cmp	r5, #9
   16fd4:	ldr	r0, [pc, #76]	; 17028 <__assert_fail@plt+0x5cf8>
   16fd8:	movne	r0, r3
   16fdc:	pop	{r4, r5, r6, pc}
   16fe0:	ldrb	r3, [r0, #5]
   16fe4:	cmp	r3, #51	; 0x33
   16fe8:	bne	16fcc <__assert_fail@plt+0x5c9c>
   16fec:	ldrb	r3, [r0, #6]
   16ff0:	cmp	r3, #48	; 0x30
   16ff4:	bne	16fcc <__assert_fail@plt+0x5c9c>
   16ff8:	ldrb	r3, [r0, #7]
   16ffc:	cmp	r3, #0
   17000:	bne	16fcc <__assert_fail@plt+0x5c9c>
   17004:	ldrb	r2, [r4]
   17008:	ldr	r3, [pc, #28]	; 1702c <__assert_fail@plt+0x5cfc>
   1700c:	ldr	r0, [pc, #28]	; 17030 <__assert_fail@plt+0x5d00>
   17010:	cmp	r2, #96	; 0x60
   17014:	movne	r0, r3
   17018:	pop	{r4, r5, r6, pc}
   1701c:	andeq	lr, r1, r0, ror #24
   17020:	andeq	lr, r1, ip, asr ip
   17024:	andeq	lr, r1, r0, ror ip
   17028:	andeq	lr, r1, ip, ror #24
   1702c:	andeq	lr, r1, r8, ror #24
   17030:	andeq	lr, r1, r4, ror #24
   17034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17038:	sub	sp, sp, #140	; 0x8c
   1703c:	mov	r9, r1
   17040:	str	r3, [sp, #24]
   17044:	mov	r3, #1
   17048:	mov	sl, r0
   1704c:	str	r2, [sp, #44]	; 0x2c
   17050:	str	r3, [sp, #28]
   17054:	bl	11120 <__ctype_get_mb_cur_max@plt>
   17058:	ldr	r3, [sp, #180]	; 0xb4
   1705c:	mov	fp, r9
   17060:	mov	r9, sl
   17064:	lsr	r3, r3, #1
   17068:	and	r3, r3, #1
   1706c:	str	r3, [sp, #40]	; 0x28
   17070:	ldr	r3, [sp, #180]	; 0xb4
   17074:	mov	r2, #0
   17078:	and	r3, r3, #4
   1707c:	str	r3, [sp, #100]	; 0x64
   17080:	ldr	r3, [sp, #180]	; 0xb4
   17084:	str	r2, [sp, #76]	; 0x4c
   17088:	and	r3, r3, #1
   1708c:	str	r3, [sp, #96]	; 0x60
   17090:	str	r2, [sp, #36]	; 0x24
   17094:	str	r2, [sp, #56]	; 0x38
   17098:	str	r2, [sp, #68]	; 0x44
   1709c:	str	r2, [sp, #72]	; 0x48
   170a0:	str	r2, [sp, #84]	; 0x54
   170a4:	str	r0, [sp, #80]	; 0x50
   170a8:	ldr	r3, [sp, #176]	; 0xb0
   170ac:	cmp	r3, #10
   170b0:	ldrls	pc, [pc, r3, lsl #2]
   170b4:	b	1828c <__assert_fail@plt+0x6f5c>
   170b8:	andeq	r7, r1, r4, ror #1
   170bc:	andeq	r7, r1, r4, lsl #8
   170c0:	andeq	r7, r1, ip, asr r5
   170c4:	andeq	r7, r1, r8, lsr r4
   170c8:			; <UNDEFINED> instruction: 0x000175b0
   170cc:	muleq	r1, r0, r5
   170d0:	andeq	r7, r1, r8, asr r4
   170d4:	andeq	r7, r1, ip, ror r4
   170d8:	andeq	r7, r1, r4, lsr #9
   170dc:	andeq	r7, r1, r4, lsr #9
   170e0:	andeq	r7, r1, r4, lsr #9
   170e4:	mov	r3, #0
   170e8:	ldr	r1, [sp, #56]	; 0x38
   170ec:	ldr	r2, [sp, #176]	; 0xb0
   170f0:	ldr	lr, [sp, #176]	; 0xb0
   170f4:	mov	r8, r3
   170f8:	mov	ip, r3
   170fc:	str	r3, [sp, #40]	; 0x28
   17100:	mov	r3, r1
   17104:	cmp	r2, #2
   17108:	moveq	r3, #0
   1710c:	andne	r3, r3, #1
   17110:	mov	r0, r3
   17114:	str	r3, [sp, #92]	; 0x5c
   17118:	ldr	r3, [sp, #68]	; 0x44
   1711c:	sub	lr, lr, #2
   17120:	adds	r2, r3, #0
   17124:	movne	r2, #1
   17128:	and	r3, r1, ip
   1712c:	and	r3, r2, r3
   17130:	clz	lr, lr
   17134:	str	r3, [sp, #88]	; 0x58
   17138:	lsr	lr, lr, #5
   1713c:	mov	r3, ip
   17140:	and	r3, r3, lr
   17144:	mov	sl, #0
   17148:	and	r0, r2, r0
   1714c:	str	r3, [sp, #64]	; 0x40
   17150:	eor	r3, r1, #1
   17154:	str	lr, [sp, #52]	; 0x34
   17158:	str	r0, [sp, #48]	; 0x30
   1715c:	str	r3, [sp, #60]	; 0x3c
   17160:	ldr	r3, [sp, #24]
   17164:	cmn	r3, #1
   17168:	beq	17698 <__assert_fail@plt+0x6368>
   1716c:	subs	r7, r3, sl
   17170:	movne	r7, #1
   17174:	cmp	r7, #0
   17178:	beq	176b0 <__assert_fail@plt+0x6380>
   1717c:	ldr	r3, [sp, #48]	; 0x30
   17180:	cmp	r3, #0
   17184:	beq	17a1c <__assert_fail@plt+0x66ec>
   17188:	ldr	r2, [sp, #68]	; 0x44
   1718c:	ldr	r1, [sp, #24]
   17190:	cmp	r2, #1
   17194:	mov	r3, r2
   17198:	movls	r3, #0
   1719c:	movhi	r3, #1
   171a0:	cmn	r1, #1
   171a4:	movne	r3, #0
   171a8:	cmp	r3, #0
   171ac:	add	r4, sl, r2
   171b0:	beq	171c0 <__assert_fail@plt+0x5e90>
   171b4:	ldr	r0, [sp, #44]	; 0x2c
   171b8:	bl	111bc <strlen@plt>
   171bc:	str	r0, [sp, #24]
   171c0:	ldr	r3, [sp, #24]
   171c4:	cmp	r3, r4
   171c8:	ldr	r3, [sp, #44]	; 0x2c
   171cc:	add	r5, r3, sl
   171d0:	bcc	17a24 <__assert_fail@plt+0x66f4>
   171d4:	mov	r0, r5
   171d8:	ldr	r2, [sp, #68]	; 0x44
   171dc:	ldr	r1, [sp, #72]	; 0x48
   171e0:	bl	1109c <memcmp@plt>
   171e4:	cmp	r0, #0
   171e8:	bne	17a24 <__assert_fail@plt+0x66f4>
   171ec:	ldr	r3, [sp, #40]	; 0x28
   171f0:	cmp	r3, #0
   171f4:	bne	183e0 <__assert_fail@plt+0x70b0>
   171f8:	ldrb	r4, [r5]
   171fc:	cmp	r4, #126	; 0x7e
   17200:	ldrls	pc, [pc, r4, lsl #2]
   17204:	b	1831c <__assert_fail@plt+0x6fec>
   17208:	ldrdeq	r7, [r1], -ip
   1720c:	andeq	r8, r1, ip, lsl r3
   17210:	andeq	r8, r1, ip, lsl r3
   17214:	andeq	r8, r1, ip, lsl r3
   17218:	andeq	r8, r1, ip, lsl r3
   1721c:	andeq	r8, r1, ip, lsl r3
   17220:	andeq	r8, r1, ip, lsl r3
   17224:	andeq	r7, r1, r8, asr #17
   17228:			; <UNDEFINED> instruction: 0x000178b4
   1722c:	muleq	r1, r0, r8
   17230:	andeq	r7, r1, r0, ror r8
   17234:	andeq	r7, r1, r0, lsr #17
   17238:	ldrdeq	r7, [r1], -r8
   1723c:	andeq	r7, r1, ip, lsl #20
   17240:	andeq	r8, r1, ip, lsl r3
   17244:	andeq	r8, r1, ip, lsl r3
   17248:	andeq	r8, r1, ip, lsl r3
   1724c:	andeq	r8, r1, ip, lsl r3
   17250:	andeq	r8, r1, ip, lsl r3
   17254:	andeq	r8, r1, ip, lsl r3
   17258:	andeq	r8, r1, ip, lsl r3
   1725c:	andeq	r8, r1, ip, lsl r3
   17260:	andeq	r8, r1, ip, lsl r3
   17264:	andeq	r8, r1, ip, lsl r3
   17268:	andeq	r8, r1, ip, lsl r3
   1726c:	andeq	r8, r1, ip, lsl r3
   17270:	andeq	r8, r1, ip, lsl r3
   17274:	andeq	r8, r1, ip, lsl r3
   17278:	andeq	r8, r1, ip, lsl r3
   1727c:	andeq	r8, r1, ip, lsl r3
   17280:	andeq	r8, r1, ip, lsl r3
   17284:	andeq	r8, r1, ip, lsl r3
   17288:	strdeq	r7, [r1], -ip
   1728c:	ldrdeq	r7, [r1], -ip
   17290:	ldrdeq	r7, [r1], -ip
   17294:			; <UNDEFINED> instruction: 0x000179bc
   17298:	ldrdeq	r7, [r1], -ip
   1729c:	andeq	r7, r1, r8, asr #15
   172a0:	ldrdeq	r7, [r1], -ip
   172a4:	andeq	r7, r1, r4, lsr #15
   172a8:	ldrdeq	r7, [r1], -ip
   172ac:	ldrdeq	r7, [r1], -ip
   172b0:	ldrdeq	r7, [r1], -ip
   172b4:	andeq	r7, r1, r8, asr #15
   172b8:	andeq	r7, r1, r8, asr #15
   172bc:	andeq	r7, r1, r8, asr #15
   172c0:	andeq	r7, r1, r8, asr #15
   172c4:	andeq	r7, r1, r8, asr #15
   172c8:	andeq	r7, r1, r8, asr #15
   172cc:	andeq	r7, r1, r8, asr #15
   172d0:	andeq	r7, r1, r8, asr #15
   172d4:	andeq	r7, r1, r8, asr #15
   172d8:	andeq	r7, r1, r8, asr #15
   172dc:	andeq	r7, r1, r8, asr #15
   172e0:	andeq	r7, r1, r8, asr #15
   172e4:	andeq	r7, r1, r8, asr #15
   172e8:	andeq	r7, r1, r8, asr #15
   172ec:	andeq	r7, r1, r8, asr #15
   172f0:	andeq	r7, r1, r8, asr #15
   172f4:	ldrdeq	r7, [r1], -ip
   172f8:	ldrdeq	r7, [r1], -ip
   172fc:	ldrdeq	r7, [r1], -ip
   17300:	ldrdeq	r7, [r1], -ip
   17304:	andeq	r7, r1, r4, asr r7
   17308:	andeq	r8, r1, ip, lsl r3
   1730c:	andeq	r7, r1, r8, asr #15
   17310:	andeq	r7, r1, r8, asr #15
   17314:	andeq	r7, r1, r8, asr #15
   17318:	andeq	r7, r1, r8, asr #15
   1731c:	andeq	r7, r1, r8, asr #15
   17320:	andeq	r7, r1, r8, asr #15
   17324:	andeq	r7, r1, r8, asr #15
   17328:	andeq	r7, r1, r8, asr #15
   1732c:	andeq	r7, r1, r8, asr #15
   17330:	andeq	r7, r1, r8, asr #15
   17334:	andeq	r7, r1, r8, asr #15
   17338:	andeq	r7, r1, r8, asr #15
   1733c:	andeq	r7, r1, r8, asr #15
   17340:	andeq	r7, r1, r8, asr #15
   17344:	andeq	r7, r1, r8, asr #15
   17348:	andeq	r7, r1, r8, asr #15
   1734c:	andeq	r7, r1, r8, asr #15
   17350:	andeq	r7, r1, r8, asr #15
   17354:	andeq	r7, r1, r8, asr #15
   17358:	andeq	r7, r1, r8, asr #15
   1735c:	andeq	r7, r1, r8, asr #15
   17360:	andeq	r7, r1, r8, asr #15
   17364:	andeq	r7, r1, r8, asr #15
   17368:	andeq	r7, r1, r8, asr #15
   1736c:	andeq	r7, r1, r8, asr #15
   17370:	andeq	r7, r1, r8, asr #15
   17374:	ldrdeq	r7, [r1], -ip
   17378:	andeq	r7, r1, r0, lsr #14
   1737c:	andeq	r7, r1, r8, asr #15
   17380:	ldrdeq	r7, [r1], -ip
   17384:	andeq	r7, r1, r8, asr #15
   17388:	ldrdeq	r7, [r1], -ip
   1738c:	andeq	r7, r1, r8, asr #15
   17390:	andeq	r7, r1, r8, asr #15
   17394:	andeq	r7, r1, r8, asr #15
   17398:	andeq	r7, r1, r8, asr #15
   1739c:	andeq	r7, r1, r8, asr #15
   173a0:	andeq	r7, r1, r8, asr #15
   173a4:	andeq	r7, r1, r8, asr #15
   173a8:	andeq	r7, r1, r8, asr #15
   173ac:	andeq	r7, r1, r8, asr #15
   173b0:	andeq	r7, r1, r8, asr #15
   173b4:	andeq	r7, r1, r8, asr #15
   173b8:	andeq	r7, r1, r8, asr #15
   173bc:	andeq	r7, r1, r8, asr #15
   173c0:	andeq	r7, r1, r8, asr #15
   173c4:	andeq	r7, r1, r8, asr #15
   173c8:	andeq	r7, r1, r8, asr #15
   173cc:	andeq	r7, r1, r8, asr #15
   173d0:	andeq	r7, r1, r8, asr #15
   173d4:	andeq	r7, r1, r8, asr #15
   173d8:	andeq	r7, r1, r8, asr #15
   173dc:	andeq	r7, r1, r8, asr #15
   173e0:	andeq	r7, r1, r8, asr #15
   173e4:	andeq	r7, r1, r8, asr #15
   173e8:	andeq	r7, r1, r8, asr #15
   173ec:	andeq	r7, r1, r8, asr #15
   173f0:	andeq	r7, r1, r8, asr #15
   173f4:	ldrdeq	r7, [r1], -r8
   173f8:	ldrdeq	r7, [r1], -ip
   173fc:	ldrdeq	r7, [r1], -r8
   17400:			; <UNDEFINED> instruction: 0x000179bc
   17404:	mov	r3, #1
   17408:	str	r3, [sp, #40]	; 0x28
   1740c:	str	r3, [sp, #68]	; 0x44
   17410:	mov	r8, #0
   17414:	ldr	r3, [pc, #4056]	; 183f4 <__assert_fail@plt+0x70c4>
   17418:	str	r3, [sp, #72]	; 0x48
   1741c:	mov	r3, #2
   17420:	str	r3, [sp, #176]	; 0xb0
   17424:	ldr	r1, [sp, #56]	; 0x38
   17428:	mov	r2, r3
   1742c:	ldr	ip, [sp, #40]	; 0x28
   17430:	mov	lr, r3
   17434:	b	17100 <__assert_fail@plt+0x5dd0>
   17438:	mov	r3, #1
   1743c:	str	r3, [sp, #56]	; 0x38
   17440:	str	r3, [sp, #68]	; 0x44
   17444:	str	r3, [sp, #40]	; 0x28
   17448:	ldr	r3, [pc, #4004]	; 183f4 <__assert_fail@plt+0x70c4>
   1744c:	mov	r8, #0
   17450:	str	r3, [sp, #72]	; 0x48
   17454:	b	1741c <__assert_fail@plt+0x60ec>
   17458:	mov	r3, #1
   1745c:	str	r3, [sp, #56]	; 0x38
   17460:	str	r3, [sp, #68]	; 0x44
   17464:	str	r3, [sp, #40]	; 0x28
   17468:	ldr	r3, [pc, #3976]	; 183f8 <__assert_fail@plt+0x70c8>
   1746c:	mov	r8, #0
   17470:	str	r3, [sp, #72]	; 0x48
   17474:	mov	r3, #5
   17478:	b	17420 <__assert_fail@plt+0x60f0>
   1747c:	mov	r3, #0
   17480:	str	r3, [sp, #40]	; 0x28
   17484:	mov	r3, #1
   17488:	str	r3, [sp, #56]	; 0x38
   1748c:	mov	r8, #0
   17490:	mov	r1, r3
   17494:	ldr	r2, [sp, #176]	; 0xb0
   17498:	ldr	ip, [sp, #40]	; 0x28
   1749c:	ldr	lr, [sp, #176]	; 0xb0
   174a0:	b	17100 <__assert_fail@plt+0x5dd0>
   174a4:	ldr	r3, [sp, #176]	; 0xb0
   174a8:	cmp	r3, #10
   174ac:	beq	174f0 <__assert_fail@plt+0x61c0>
   174b0:	mov	r2, #5
   174b4:	ldr	r1, [pc, #3904]	; 183fc <__assert_fail@plt+0x70cc>
   174b8:	mov	r0, #0
   174bc:	bl	110c0 <dcgettext@plt>
   174c0:	ldr	r2, [pc, #3892]	; 183fc <__assert_fail@plt+0x70cc>
   174c4:	cmp	r0, r2
   174c8:	str	r0, [sp, #188]	; 0xbc
   174cc:	beq	18588 <__assert_fail@plt+0x7258>
   174d0:	mov	r2, #5
   174d4:	ldr	r1, [pc, #3864]	; 183f4 <__assert_fail@plt+0x70c4>
   174d8:	mov	r0, #0
   174dc:	bl	110c0 <dcgettext@plt>
   174e0:	ldr	r2, [pc, #3852]	; 183f4 <__assert_fail@plt+0x70c4>
   174e4:	cmp	r0, r2
   174e8:	str	r0, [sp, #192]	; 0xc0
   174ec:	beq	18578 <__assert_fail@plt+0x7248>
   174f0:	ldr	r8, [sp, #40]	; 0x28
   174f4:	cmp	r8, #0
   174f8:	movne	r8, #0
   174fc:	bne	1752c <__assert_fail@plt+0x61fc>
   17500:	ldr	r3, [sp, #188]	; 0xbc
   17504:	ldrb	r3, [r3]
   17508:	cmp	r3, #0
   1750c:	beq	1752c <__assert_fail@plt+0x61fc>
   17510:	ldr	r2, [sp, #188]	; 0xbc
   17514:	cmp	fp, r8
   17518:	strbhi	r3, [r9, r8]
   1751c:	ldrb	r3, [r2, #1]!
   17520:	add	r8, r8, #1
   17524:	cmp	r3, #0
   17528:	bne	17514 <__assert_fail@plt+0x61e4>
   1752c:	ldr	r0, [sp, #192]	; 0xc0
   17530:	bl	111bc <strlen@plt>
   17534:	ldr	r3, [sp, #192]	; 0xc0
   17538:	ldr	r2, [sp, #176]	; 0xb0
   1753c:	str	r3, [sp, #72]	; 0x48
   17540:	mov	r3, #1
   17544:	str	r3, [sp, #56]	; 0x38
   17548:	mov	r1, r3
   1754c:	ldr	ip, [sp, #40]	; 0x28
   17550:	ldr	lr, [sp, #176]	; 0xb0
   17554:	str	r0, [sp, #68]	; 0x44
   17558:	b	17100 <__assert_fail@plt+0x5dd0>
   1755c:	ldr	r3, [sp, #40]	; 0x28
   17560:	cmp	r3, #0
   17564:	beq	1820c <__assert_fail@plt+0x6edc>
   17568:	mov	r3, #1
   1756c:	str	r3, [sp, #68]	; 0x44
   17570:	ldr	r3, [pc, #3708]	; 183f4 <__assert_fail@plt+0x70c4>
   17574:	str	r3, [sp, #72]	; 0x48
   17578:	mov	r8, #0
   1757c:	ldr	r1, [sp, #56]	; 0x38
   17580:	ldr	r2, [sp, #176]	; 0xb0
   17584:	ldr	ip, [sp, #40]	; 0x28
   17588:	ldr	lr, [sp, #176]	; 0xb0
   1758c:	b	17100 <__assert_fail@plt+0x5dd0>
   17590:	ldr	r3, [sp, #40]	; 0x28
   17594:	cmp	r3, #0
   17598:	beq	18290 <__assert_fail@plt+0x6f60>
   1759c:	str	r3, [sp, #56]	; 0x38
   175a0:	mov	r3, #1
   175a4:	str	r3, [sp, #68]	; 0x44
   175a8:	ldr	r3, [pc, #3656]	; 183f8 <__assert_fail@plt+0x70c8>
   175ac:	b	17574 <__assert_fail@plt+0x6244>
   175b0:	ldr	r3, [sp, #40]	; 0x28
   175b4:	cmp	r3, #0
   175b8:	mov	r3, #1
   175bc:	streq	r3, [sp, #56]	; 0x38
   175c0:	beq	1820c <__assert_fail@plt+0x6edc>
   175c4:	str	r3, [sp, #68]	; 0x44
   175c8:	ldr	r3, [pc, #3620]	; 183f4 <__assert_fail@plt+0x70c4>
   175cc:	mov	r8, #0
   175d0:	str	r3, [sp, #72]	; 0x48
   175d4:	b	1741c <__assert_fail@plt+0x60ec>
   175d8:	ldr	r3, [sp, #24]
   175dc:	ldr	r6, [sp, #48]	; 0x30
   175e0:	cmn	r3, #1
   175e4:	beq	17c40 <__assert_fail@plt+0x6910>
   175e8:	subs	r3, r3, #1
   175ec:	movne	r3, #1
   175f0:	cmp	r3, #0
   175f4:	beq	179c0 <__assert_fail@plt+0x6690>
   175f8:	ldr	r1, [sp, #52]	; 0x34
   175fc:	mov	r7, r3
   17600:	mov	r3, #0
   17604:	str	r3, [sp, #32]
   17608:	ldr	r3, [sp, #60]	; 0x3c
   1760c:	orr	r2, r1, r3
   17610:	ldr	r3, [sp, #40]	; 0x28
   17614:	eor	r2, r2, #1
   17618:	orr	r2, r3, r2
   1761c:	tst	r2, #255	; 0xff
   17620:	bne	17f44 <__assert_fail@plt+0x6c14>
   17624:	cmp	r6, #0
   17628:	bne	17804 <__assert_fail@plt+0x64d4>
   1762c:	ldr	r3, [sp, #36]	; 0x24
   17630:	add	sl, sl, #1
   17634:	and	r3, r3, r7
   17638:	uxtb	r6, r3
   1763c:	cmp	r6, #0
   17640:	beq	1766c <__assert_fail@plt+0x633c>
   17644:	cmp	fp, r8
   17648:	movhi	r3, #39	; 0x27
   1764c:	strbhi	r3, [r9, r8]
   17650:	add	r3, r8, #1
   17654:	cmp	fp, r3
   17658:	movhi	r2, #39	; 0x27
   1765c:	add	r8, r8, #2
   17660:	strbhi	r2, [r9, r3]
   17664:	mov	r3, #0
   17668:	str	r3, [sp, #36]	; 0x24
   1766c:	ldr	r2, [sp, #32]
   17670:	cmp	r8, fp
   17674:	ldr	r3, [sp, #28]
   17678:	strbcc	r4, [r9, r8]
   1767c:	cmp	r2, #0
   17680:	moveq	r3, #0
   17684:	str	r3, [sp, #28]
   17688:	ldr	r3, [sp, #24]
   1768c:	add	r8, r8, #1
   17690:	cmn	r3, #1
   17694:	bne	1716c <__assert_fail@plt+0x5e3c>
   17698:	ldr	r3, [sp, #44]	; 0x2c
   1769c:	ldrb	r3, [r3, sl]
   176a0:	adds	r7, r3, #0
   176a4:	movne	r7, #1
   176a8:	cmp	r7, #0
   176ac:	bne	1717c <__assert_fail@plt+0x5e4c>
   176b0:	ldr	r3, [sp, #64]	; 0x40
   176b4:	cmp	r8, #0
   176b8:	movne	r3, #0
   176bc:	andeq	r3, r3, #1
   176c0:	cmp	r3, #0
   176c4:	str	r3, [sp, #64]	; 0x40
   176c8:	bne	1816c <__assert_fail@plt+0x6e3c>
   176cc:	ldr	r3, [sp, #40]	; 0x28
   176d0:	ldr	r2, [sp, #52]	; 0x34
   176d4:	eor	r3, r3, #1
   176d8:	ands	r2, r2, r3
   176dc:	beq	18598 <__assert_fail@plt+0x7268>
   176e0:	ldr	r3, [sp, #76]	; 0x4c
   176e4:	cmp	r3, #0
   176e8:	beq	18568 <__assert_fail@plt+0x7238>
   176ec:	ldr	r3, [sp, #28]
   176f0:	cmp	r3, #0
   176f4:	bne	18524 <__assert_fail@plt+0x71f4>
   176f8:	ldr	r2, [sp, #84]	; 0x54
   176fc:	clz	r3, fp
   17700:	cmp	r2, #0
   17704:	lsr	r3, r3, #5
   17708:	moveq	r3, #0
   1770c:	cmp	r3, #0
   17710:	beq	184c4 <__assert_fail@plt+0x7194>
   17714:	mov	fp, r2
   17718:	str	r3, [sp, #76]	; 0x4c
   1771c:	b	170a8 <__assert_fail@plt+0x5d78>
   17720:	ldr	r3, [sp, #176]	; 0xb0
   17724:	ldr	r6, [sp, #48]	; 0x30
   17728:	cmp	r3, #2
   1772c:	beq	17c64 <__assert_fail@plt+0x6934>
   17730:	ldr	r3, [sp, #88]	; 0x58
   17734:	cmp	r3, #0
   17738:	beq	181e8 <__assert_fail@plt+0x6eb8>
   1773c:	mov	r3, #0
   17740:	add	sl, sl, #1
   17744:	ldr	r6, [sp, #36]	; 0x24
   17748:	str	r3, [sp, #32]
   1774c:	mov	r4, #92	; 0x5c
   17750:	b	1763c <__assert_fail@plt+0x630c>
   17754:	ldr	r3, [sp, #176]	; 0xb0
   17758:	ldr	r6, [sp, #48]	; 0x30
   1775c:	cmp	r3, #2
   17760:	beq	17c94 <__assert_fail@plt+0x6964>
   17764:	cmp	r3, #5
   17768:	bne	181f8 <__assert_fail@plt+0x6ec8>
   1776c:	ldr	r3, [sp, #100]	; 0x64
   17770:	cmp	r3, #0
   17774:	beq	1825c <__assert_fail@plt+0x6f2c>
   17778:	ldr	r2, [sp, #24]
   1777c:	add	r3, sl, #2
   17780:	cmp	r2, r3
   17784:	bls	17794 <__assert_fail@plt+0x6464>
   17788:	ldrb	r4, [r5, #1]
   1778c:	cmp	r4, #63	; 0x3f
   17790:	beq	18404 <__assert_fail@plt+0x70d4>
   17794:	mov	r1, #0
   17798:	str	r1, [sp, #32]
   1779c:	mov	r4, #63	; 0x3f
   177a0:	b	17608 <__assert_fail@plt+0x62d8>
   177a4:	ldr	r3, [sp, #176]	; 0xb0
   177a8:	ldr	r6, [sp, #48]	; 0x30
   177ac:	cmp	r3, #2
   177b0:	beq	17cc0 <__assert_fail@plt+0x6990>
   177b4:	str	r7, [sp, #32]
   177b8:	str	r7, [sp, #76]	; 0x4c
   177bc:	mov	r1, #0
   177c0:	mov	r4, #39	; 0x27
   177c4:	b	17608 <__assert_fail@plt+0x62d8>
   177c8:	ldr	r6, [sp, #48]	; 0x30
   177cc:	ldr	r1, [sp, #52]	; 0x34
   177d0:	str	r7, [sp, #32]
   177d4:	b	17608 <__assert_fail@plt+0x62d8>
   177d8:	ldr	r6, [sp, #48]	; 0x30
   177dc:	ldr	r1, [sp, #52]	; 0x34
   177e0:	mov	r4, #12
   177e4:	mov	r3, #102	; 0x66
   177e8:	ldr	r2, [sp, #56]	; 0x38
   177ec:	cmp	r2, #0
   177f0:	streq	r2, [sp, #32]
   177f4:	beq	17608 <__assert_fail@plt+0x62d8>
   177f8:	mov	r4, r3
   177fc:	mov	r3, #0
   17800:	str	r3, [sp, #32]
   17804:	ldr	r3, [sp, #40]	; 0x28
   17808:	cmp	r3, #0
   1780c:	bne	17f7c <__assert_fail@plt+0x6c4c>
   17810:	ldr	r3, [sp, #36]	; 0x24
   17814:	eor	r3, r3, #1
   17818:	and	r3, r3, r1
   1781c:	ands	r3, r3, #255	; 0xff
   17820:	beq	17858 <__assert_fail@plt+0x6528>
   17824:	cmp	fp, r8
   17828:	movhi	r2, #39	; 0x27
   1782c:	strbhi	r2, [r9, r8]
   17830:	add	r2, r8, #1
   17834:	cmp	fp, r2
   17838:	movhi	r1, #36	; 0x24
   1783c:	strbhi	r1, [r9, r2]
   17840:	add	r2, r8, #2
   17844:	cmp	fp, r2
   17848:	add	r8, r8, #3
   1784c:	movhi	r1, #39	; 0x27
   17850:	strbhi	r1, [r9, r2]
   17854:	str	r3, [sp, #36]	; 0x24
   17858:	cmp	fp, r8
   1785c:	movhi	r3, #92	; 0x5c
   17860:	strbhi	r3, [r9, r8]
   17864:	add	sl, sl, #1
   17868:	add	r8, r8, #1
   1786c:	b	1766c <__assert_fail@plt+0x633c>
   17870:	ldr	r6, [sp, #48]	; 0x30
   17874:	mov	r4, #10
   17878:	mov	r3, #110	; 0x6e
   1787c:	ldr	r2, [sp, #64]	; 0x40
   17880:	cmp	r2, #0
   17884:	bne	18304 <__assert_fail@plt+0x6fd4>
   17888:	ldr	r1, [sp, #52]	; 0x34
   1788c:	b	177e8 <__assert_fail@plt+0x64b8>
   17890:	ldr	r6, [sp, #48]	; 0x30
   17894:	ldr	r1, [sp, #52]	; 0x34
   17898:	mov	r3, #116	; 0x74
   1789c:	b	177e8 <__assert_fail@plt+0x64b8>
   178a0:	ldr	r6, [sp, #48]	; 0x30
   178a4:	ldr	r1, [sp, #52]	; 0x34
   178a8:	mov	r4, #11
   178ac:	mov	r3, #118	; 0x76
   178b0:	b	177e8 <__assert_fail@plt+0x64b8>
   178b4:	ldr	r6, [sp, #48]	; 0x30
   178b8:	ldr	r1, [sp, #52]	; 0x34
   178bc:	mov	r4, #8
   178c0:	mov	r3, #98	; 0x62
   178c4:	b	177e8 <__assert_fail@plt+0x64b8>
   178c8:	ldr	r6, [sp, #48]	; 0x30
   178cc:	ldr	r1, [sp, #52]	; 0x34
   178d0:	mov	r4, #7
   178d4:	mov	r3, #97	; 0x61
   178d8:	b	177e8 <__assert_fail@plt+0x64b8>
   178dc:	ldr	r3, [sp, #56]	; 0x38
   178e0:	ldr	r6, [sp, #48]	; 0x30
   178e4:	cmp	r3, #0
   178e8:	beq	17dac <__assert_fail@plt+0x6a7c>
   178ec:	ldr	r3, [sp, #40]	; 0x28
   178f0:	cmp	r3, #0
   178f4:	bne	183e0 <__assert_fail@plt+0x70b0>
   178f8:	ldr	r3, [sp, #36]	; 0x24
   178fc:	ldr	r2, [sp, #52]	; 0x34
   17900:	eor	r3, r3, #1
   17904:	ands	r3, r2, r3
   17908:	moveq	r2, r8
   1790c:	beq	17944 <__assert_fail@plt+0x6614>
   17910:	cmp	fp, r8
   17914:	movhi	r2, #39	; 0x27
   17918:	strbhi	r2, [r9, r8]
   1791c:	add	r2, r8, #1
   17920:	cmp	fp, r2
   17924:	movhi	r1, #36	; 0x24
   17928:	strbhi	r1, [r9, r2]
   1792c:	add	r2, r8, #2
   17930:	cmp	fp, r2
   17934:	movhi	r1, #39	; 0x27
   17938:	strbhi	r1, [r9, r2]
   1793c:	add	r2, r8, #3
   17940:	str	r3, [sp, #36]	; 0x24
   17944:	cmp	fp, r2
   17948:	movhi	r3, #92	; 0x5c
   1794c:	strbhi	r3, [r9, r2]
   17950:	ldr	r3, [sp, #92]	; 0x5c
   17954:	add	r8, r2, #1
   17958:	cmp	r3, #0
   1795c:	beq	182e0 <__assert_fail@plt+0x6fb0>
   17960:	ldr	r1, [sp, #24]
   17964:	add	r3, sl, #1
   17968:	cmp	r1, r3
   1796c:	bls	179a4 <__assert_fail@plt+0x6674>
   17970:	ldr	r1, [sp, #44]	; 0x2c
   17974:	ldrb	r3, [r1, r3]
   17978:	sub	r3, r3, #48	; 0x30
   1797c:	cmp	r3, #9
   17980:	bhi	179a4 <__assert_fail@plt+0x6674>
   17984:	cmp	fp, r8
   17988:	movhi	r3, #48	; 0x30
   1798c:	strbhi	r3, [r9, r8]
   17990:	add	r3, r2, #2
   17994:	cmp	fp, r3
   17998:	add	r8, r2, #3
   1799c:	movhi	r1, #48	; 0x30
   179a0:	strbhi	r1, [r9, r3]
   179a4:	ldr	r3, [sp, #40]	; 0x28
   179a8:	ldr	r1, [sp, #52]	; 0x34
   179ac:	mov	r7, r3
   179b0:	str	r3, [sp, #32]
   179b4:	mov	r4, #48	; 0x30
   179b8:	b	17608 <__assert_fail@plt+0x62d8>
   179bc:	ldr	r6, [sp, #48]	; 0x30
   179c0:	cmp	sl, #0
   179c4:	streq	r7, [sp, #32]
   179c8:	beq	179e8 <__assert_fail@plt+0x66b8>
   179cc:	mov	r3, #0
   179d0:	ldr	r1, [sp, #52]	; 0x34
   179d4:	str	r3, [sp, #32]
   179d8:	b	17608 <__assert_fail@plt+0x62d8>
   179dc:	ldr	r6, [sp, #48]	; 0x30
   179e0:	mov	r3, #0
   179e4:	str	r3, [sp, #32]
   179e8:	ldr	r3, [sp, #64]	; 0x40
   179ec:	cmp	r3, #0
   179f0:	bne	1816c <__assert_fail@plt+0x6e3c>
   179f4:	ldr	r1, [sp, #52]	; 0x34
   179f8:	b	17608 <__assert_fail@plt+0x62d8>
   179fc:	ldr	r3, [sp, #48]	; 0x30
   17a00:	mov	r6, r3
   17a04:	str	r3, [sp, #32]
   17a08:	b	179e8 <__assert_fail@plt+0x66b8>
   17a0c:	ldr	r6, [sp, #48]	; 0x30
   17a10:	mov	r4, #13
   17a14:	mov	r3, #114	; 0x72
   17a18:	b	1787c <__assert_fail@plt+0x654c>
   17a1c:	ldr	r3, [sp, #44]	; 0x2c
   17a20:	add	r5, r3, sl
   17a24:	ldrb	r4, [r5]
   17a28:	cmp	r4, #126	; 0x7e
   17a2c:	ldrls	pc, [pc, r4, lsl #2]
   17a30:	b	17dcc <__assert_fail@plt+0x6a9c>
   17a34:	muleq	r1, ip, sp
   17a38:	andeq	r7, r1, ip, asr #27
   17a3c:	andeq	r7, r1, ip, asr #27
   17a40:	andeq	r7, r1, ip, asr #27
   17a44:	andeq	r7, r1, ip, asr #27
   17a48:	andeq	r7, r1, ip, asr #27
   17a4c:	andeq	r7, r1, ip, asr #27
   17a50:	muleq	r1, r4, sp
   17a54:	andeq	r7, r1, ip, lsl #27
   17a58:	andeq	r7, r1, r0, lsl #27
   17a5c:	andeq	r7, r1, r8, ror sp
   17a60:	andeq	r7, r1, r0, ror sp
   17a64:	andeq	r7, r1, r8, ror #26
   17a68:	andeq	r7, r1, r0, ror #26
   17a6c:	andeq	r7, r1, ip, asr #27
   17a70:	andeq	r7, r1, ip, asr #27
   17a74:	andeq	r7, r1, ip, asr #27
   17a78:	andeq	r7, r1, ip, asr #27
   17a7c:	andeq	r7, r1, ip, asr #27
   17a80:	andeq	r7, r1, ip, asr #27
   17a84:	andeq	r7, r1, ip, asr #27
   17a88:	andeq	r7, r1, ip, asr #27
   17a8c:	andeq	r7, r1, ip, asr #27
   17a90:	andeq	r7, r1, ip, asr #27
   17a94:	andeq	r7, r1, ip, asr #27
   17a98:	andeq	r7, r1, ip, asr #27
   17a9c:	andeq	r7, r1, ip, asr #27
   17aa0:	andeq	r7, r1, ip, asr #27
   17aa4:	andeq	r7, r1, ip, asr #27
   17aa8:	andeq	r7, r1, ip, asr #27
   17aac:	andeq	r7, r1, ip, asr #27
   17ab0:	andeq	r7, r1, ip, asr #27
   17ab4:	andeq	r7, r1, r4, asr sp
   17ab8:	andeq	r7, r1, ip, asr #26
   17abc:	andeq	r7, r1, ip, asr #26
   17ac0:	andeq	r7, r1, r4, asr #26
   17ac4:	andeq	r7, r1, ip, asr #26
   17ac8:	andeq	r7, r1, ip, lsr sp
   17acc:	andeq	r7, r1, ip, asr #26
   17ad0:			; <UNDEFINED> instruction: 0x00017cb0
   17ad4:	andeq	r7, r1, ip, asr #26
   17ad8:	andeq	r7, r1, ip, asr #26
   17adc:	andeq	r7, r1, ip, asr #26
   17ae0:	andeq	r7, r1, ip, lsr sp
   17ae4:	andeq	r7, r1, ip, lsr sp
   17ae8:	andeq	r7, r1, ip, lsr sp
   17aec:	andeq	r7, r1, ip, lsr sp
   17af0:	andeq	r7, r1, ip, lsr sp
   17af4:	andeq	r7, r1, ip, lsr sp
   17af8:	andeq	r7, r1, ip, lsr sp
   17afc:	andeq	r7, r1, ip, lsr sp
   17b00:	andeq	r7, r1, ip, lsr sp
   17b04:	andeq	r7, r1, ip, lsr sp
   17b08:	andeq	r7, r1, ip, lsr sp
   17b0c:	andeq	r7, r1, ip, lsr sp
   17b10:	andeq	r7, r1, ip, lsr sp
   17b14:	andeq	r7, r1, ip, lsr sp
   17b18:	andeq	r7, r1, ip, lsr sp
   17b1c:	andeq	r7, r1, ip, lsr sp
   17b20:	andeq	r7, r1, ip, asr #26
   17b24:	andeq	r7, r1, ip, asr #26
   17b28:	andeq	r7, r1, ip, asr #26
   17b2c:	andeq	r7, r1, ip, asr #26
   17b30:	andeq	r7, r1, r4, lsl #25
   17b34:	andeq	r7, r1, ip, asr #27
   17b38:	andeq	r7, r1, ip, lsr sp
   17b3c:	andeq	r7, r1, ip, lsr sp
   17b40:	andeq	r7, r1, ip, lsr sp
   17b44:	andeq	r7, r1, ip, lsr sp
   17b48:	andeq	r7, r1, ip, lsr sp
   17b4c:	andeq	r7, r1, ip, lsr sp
   17b50:	andeq	r7, r1, ip, lsr sp
   17b54:	andeq	r7, r1, ip, lsr sp
   17b58:	andeq	r7, r1, ip, lsr sp
   17b5c:	andeq	r7, r1, ip, lsr sp
   17b60:	andeq	r7, r1, ip, lsr sp
   17b64:	andeq	r7, r1, ip, lsr sp
   17b68:	andeq	r7, r1, ip, lsr sp
   17b6c:	andeq	r7, r1, ip, lsr sp
   17b70:	andeq	r7, r1, ip, lsr sp
   17b74:	andeq	r7, r1, ip, lsr sp
   17b78:	andeq	r7, r1, ip, lsr sp
   17b7c:	andeq	r7, r1, ip, lsr sp
   17b80:	andeq	r7, r1, ip, lsr sp
   17b84:	andeq	r7, r1, ip, lsr sp
   17b88:	andeq	r7, r1, ip, lsr sp
   17b8c:	andeq	r7, r1, ip, lsr sp
   17b90:	andeq	r7, r1, ip, lsr sp
   17b94:	andeq	r7, r1, ip, lsr sp
   17b98:	andeq	r7, r1, ip, lsr sp
   17b9c:	andeq	r7, r1, ip, lsr sp
   17ba0:	andeq	r7, r1, ip, asr #26
   17ba4:	andeq	r7, r1, r4, asr ip
   17ba8:	andeq	r7, r1, ip, lsr sp
   17bac:	andeq	r7, r1, ip, asr #26
   17bb0:	andeq	r7, r1, ip, lsr sp
   17bb4:	andeq	r7, r1, ip, asr #26
   17bb8:	andeq	r7, r1, ip, lsr sp
   17bbc:	andeq	r7, r1, ip, lsr sp
   17bc0:	andeq	r7, r1, ip, lsr sp
   17bc4:	andeq	r7, r1, ip, lsr sp
   17bc8:	andeq	r7, r1, ip, lsr sp
   17bcc:	andeq	r7, r1, ip, lsr sp
   17bd0:	andeq	r7, r1, ip, lsr sp
   17bd4:	andeq	r7, r1, ip, lsr sp
   17bd8:	andeq	r7, r1, ip, lsr sp
   17bdc:	andeq	r7, r1, ip, lsr sp
   17be0:	andeq	r7, r1, ip, lsr sp
   17be4:	andeq	r7, r1, ip, lsr sp
   17be8:	andeq	r7, r1, ip, lsr sp
   17bec:	andeq	r7, r1, ip, lsr sp
   17bf0:	andeq	r7, r1, ip, lsr sp
   17bf4:	andeq	r7, r1, ip, lsr sp
   17bf8:	andeq	r7, r1, ip, lsr sp
   17bfc:	andeq	r7, r1, ip, lsr sp
   17c00:	andeq	r7, r1, ip, lsr sp
   17c04:	andeq	r7, r1, ip, lsr sp
   17c08:	andeq	r7, r1, ip, lsr sp
   17c0c:	andeq	r7, r1, ip, lsr sp
   17c10:	andeq	r7, r1, ip, lsr sp
   17c14:	andeq	r7, r1, ip, lsr sp
   17c18:	andeq	r7, r1, ip, lsr sp
   17c1c:	andeq	r7, r1, ip, lsr sp
   17c20:	andeq	r7, r1, r0, lsr ip
   17c24:	andeq	r7, r1, ip, asr #26
   17c28:	andeq	r7, r1, r0, lsr ip
   17c2c:	andeq	r7, r1, r4, asr #26
   17c30:	ldr	r3, [sp, #24]
   17c34:	mov	r6, #0
   17c38:	cmn	r3, #1
   17c3c:	bne	175e8 <__assert_fail@plt+0x62b8>
   17c40:	ldr	r3, [sp, #44]	; 0x2c
   17c44:	ldrb	r3, [r3, #1]
   17c48:	adds	r3, r3, #0
   17c4c:	movne	r3, #1
   17c50:	b	175f0 <__assert_fail@plt+0x62c0>
   17c54:	ldr	r3, [sp, #176]	; 0xb0
   17c58:	mov	r6, #0
   17c5c:	cmp	r3, #2
   17c60:	bne	17730 <__assert_fail@plt+0x6400>
   17c64:	ldr	r3, [sp, #64]	; 0x40
   17c68:	cmp	r3, #0
   17c6c:	bne	184a4 <__assert_fail@plt+0x7174>
   17c70:	add	sl, sl, #1
   17c74:	ldr	r6, [sp, #36]	; 0x24
   17c78:	str	r3, [sp, #32]
   17c7c:	mov	r4, #92	; 0x5c
   17c80:	b	1763c <__assert_fail@plt+0x630c>
   17c84:	ldr	r3, [sp, #176]	; 0xb0
   17c88:	mov	r6, #0
   17c8c:	cmp	r3, #2
   17c90:	bne	17764 <__assert_fail@plt+0x6434>
   17c94:	ldr	r3, [sp, #40]	; 0x28
   17c98:	cmp	r3, #0
   17c9c:	bne	17f80 <__assert_fail@plt+0x6c50>
   17ca0:	mov	r1, r7
   17ca4:	str	r3, [sp, #32]
   17ca8:	mov	r4, #63	; 0x3f
   17cac:	b	17608 <__assert_fail@plt+0x62d8>
   17cb0:	ldr	r3, [sp, #176]	; 0xb0
   17cb4:	mov	r6, #0
   17cb8:	cmp	r3, #2
   17cbc:	bne	177b4 <__assert_fail@plt+0x6484>
   17cc0:	ldr	r3, [sp, #64]	; 0x40
   17cc4:	cmp	r3, #0
   17cc8:	bne	184a4 <__assert_fail@plt+0x7174>
   17ccc:	ldr	r2, [sp, #84]	; 0x54
   17cd0:	adds	r3, fp, #0
   17cd4:	movne	r3, #1
   17cd8:	cmp	r2, #0
   17cdc:	movne	r3, #0
   17ce0:	cmp	r3, #0
   17ce4:	strne	fp, [sp, #84]	; 0x54
   17ce8:	movne	fp, #0
   17cec:	bne	17d1c <__assert_fail@plt+0x69ec>
   17cf0:	cmp	fp, r8
   17cf4:	movhi	r3, #39	; 0x27
   17cf8:	strbhi	r3, [r9, r8]
   17cfc:	add	r3, r8, #1
   17d00:	cmp	fp, r3
   17d04:	movhi	r2, #92	; 0x5c
   17d08:	strbhi	r2, [r9, r3]
   17d0c:	add	r3, r8, #2
   17d10:	cmp	fp, r3
   17d14:	movhi	r2, #39	; 0x27
   17d18:	strbhi	r2, [r9, r3]
   17d1c:	ldr	r3, [sp, #64]	; 0x40
   17d20:	add	r8, r8, #3
   17d24:	mov	r1, r7
   17d28:	str	r7, [sp, #32]
   17d2c:	str	r7, [sp, #76]	; 0x4c
   17d30:	str	r3, [sp, #36]	; 0x24
   17d34:	mov	r4, #39	; 0x27
   17d38:	b	17608 <__assert_fail@plt+0x62d8>
   17d3c:	mov	r6, #0
   17d40:	b	177cc <__assert_fail@plt+0x649c>
   17d44:	mov	r6, #0
   17d48:	b	179c0 <__assert_fail@plt+0x6690>
   17d4c:	mov	r6, #0
   17d50:	b	179e0 <__assert_fail@plt+0x66b0>
   17d54:	str	r7, [sp, #32]
   17d58:	mov	r6, #0
   17d5c:	b	179e8 <__assert_fail@plt+0x66b8>
   17d60:	mov	r6, #0
   17d64:	b	17a10 <__assert_fail@plt+0x66e0>
   17d68:	mov	r6, #0
   17d6c:	b	177dc <__assert_fail@plt+0x64ac>
   17d70:	mov	r6, #0
   17d74:	b	178a4 <__assert_fail@plt+0x6574>
   17d78:	mov	r6, #0
   17d7c:	b	17874 <__assert_fail@plt+0x6544>
   17d80:	mov	r6, #0
   17d84:	mov	r3, #116	; 0x74
   17d88:	b	1787c <__assert_fail@plt+0x654c>
   17d8c:	mov	r6, #0
   17d90:	b	178b8 <__assert_fail@plt+0x6588>
   17d94:	mov	r6, #0
   17d98:	b	178cc <__assert_fail@plt+0x659c>
   17d9c:	ldr	r3, [sp, #56]	; 0x38
   17da0:	mov	r6, #0
   17da4:	cmp	r3, #0
   17da8:	bne	178ec <__assert_fail@plt+0x65bc>
   17dac:	ldr	r3, [sp, #96]	; 0x60
   17db0:	cmp	r3, #0
   17db4:	addne	sl, sl, #1
   17db8:	bne	17160 <__assert_fail@plt+0x5e30>
   17dbc:	ldr	r1, [sp, #52]	; 0x34
   17dc0:	str	r3, [sp, #32]
   17dc4:	mov	r4, r3
   17dc8:	b	17608 <__assert_fail@plt+0x62d8>
   17dcc:	mov	r6, #0
   17dd0:	ldr	r3, [sp, #80]	; 0x50
   17dd4:	cmp	r3, #1
   17dd8:	bne	17fc8 <__assert_fail@plt+0x6c98>
   17ddc:	bl	111a4 <__ctype_b_loc@plt>
   17de0:	ldr	r2, [sp, #80]	; 0x50
   17de4:	sxth	r3, r4
   17de8:	mov	r1, r2
   17dec:	lsl	r3, r3, #1
   17df0:	ldr	r2, [r0]
   17df4:	ldrh	r3, [r2, r3]
   17df8:	and	r3, r3, #16384	; 0x4000
   17dfc:	cmp	r3, #0
   17e00:	movne	r3, #1
   17e04:	moveq	r3, #0
   17e08:	str	r3, [sp, #32]
   17e0c:	moveq	r3, #1
   17e10:	movne	r3, #0
   17e14:	ldr	r2, [sp, #56]	; 0x38
   17e18:	and	r3, r3, r2
   17e1c:	ands	r3, r3, #255	; 0xff
   17e20:	beq	179f4 <__assert_fail@plt+0x66c4>
   17e24:	add	r1, sl, r1
   17e28:	mov	r0, #0
   17e2c:	ldr	r7, [sp, #40]	; 0x28
   17e30:	ldr	r2, [sp, #36]	; 0x24
   17e34:	ldr	lr, [sp, #52]	; 0x34
   17e38:	b	17ee8 <__assert_fail@plt+0x6bb8>
   17e3c:	cmp	r7, #0
   17e40:	bne	1823c <__assert_fail@plt+0x6f0c>
   17e44:	eor	r0, r2, #1
   17e48:	ands	r0, lr, r0
   17e4c:	beq	17e84 <__assert_fail@plt+0x6b54>
   17e50:	cmp	fp, r8
   17e54:	movhi	r2, #39	; 0x27
   17e58:	strbhi	r2, [r9, r8]
   17e5c:	add	r2, r8, #1
   17e60:	cmp	fp, r2
   17e64:	movhi	ip, #36	; 0x24
   17e68:	strbhi	ip, [r9, r2]
   17e6c:	add	r2, r8, #2
   17e70:	cmp	fp, r2
   17e74:	movhi	ip, #39	; 0x27
   17e78:	strbhi	ip, [r9, r2]
   17e7c:	add	r8, r8, #3
   17e80:	mov	r2, r0
   17e84:	cmp	fp, r8
   17e88:	movhi	r0, #92	; 0x5c
   17e8c:	strbhi	r0, [r9, r8]
   17e90:	add	r0, r8, #1
   17e94:	cmp	fp, r0
   17e98:	lsrhi	ip, r4, #6
   17e9c:	addhi	ip, ip, #48	; 0x30
   17ea0:	strbhi	ip, [r9, r0]
   17ea4:	add	ip, r8, #2
   17ea8:	cmp	fp, ip
   17eac:	lsrhi	r0, r4, #3
   17eb0:	andhi	r0, r0, #7
   17eb4:	addhi	r0, r0, #48	; 0x30
   17eb8:	add	sl, sl, #1
   17ebc:	strbhi	r0, [r9, ip]
   17ec0:	and	r4, r4, #7
   17ec4:	cmp	sl, r1
   17ec8:	add	r4, r4, #48	; 0x30
   17ecc:	add	r8, r8, #3
   17ed0:	bcs	18254 <__assert_fail@plt+0x6f24>
   17ed4:	mov	r0, r3
   17ed8:	cmp	fp, r8
   17edc:	strbhi	r4, [r9, r8]
   17ee0:	ldrb	r4, [r5, #1]!
   17ee4:	add	r8, r8, #1
   17ee8:	cmp	r3, #0
   17eec:	bne	17e3c <__assert_fail@plt+0x6b0c>
   17ef0:	cmp	r6, #0
   17ef4:	bne	17f98 <__assert_fail@plt+0x6c68>
   17ef8:	eor	r6, r0, #1
   17efc:	and	r6, r6, r2
   17f00:	add	sl, sl, #1
   17f04:	cmp	r1, sl
   17f08:	uxtb	r6, r6
   17f0c:	bls	17fc0 <__assert_fail@plt+0x6c90>
   17f10:	cmp	r6, #0
   17f14:	beq	17ed8 <__assert_fail@plt+0x6ba8>
   17f18:	cmp	fp, r8
   17f1c:	movhi	r2, #39	; 0x27
   17f20:	strbhi	r2, [r9, r8]
   17f24:	add	r2, r8, #1
   17f28:	cmp	fp, r2
   17f2c:	movhi	ip, #39	; 0x27
   17f30:	strbhi	ip, [r9, r2]
   17f34:	add	r8, r8, #2
   17f38:	mov	r6, r3
   17f3c:	mov	r2, r3
   17f40:	b	17ed8 <__assert_fail@plt+0x6ba8>
   17f44:	ldr	r3, [sp, #184]	; 0xb8
   17f48:	cmp	r3, #0
   17f4c:	beq	17624 <__assert_fail@plt+0x62f4>
   17f50:	lsr	r2, r4, #5
   17f54:	mov	r0, r3
   17f58:	uxtb	r2, r2
   17f5c:	and	r3, r4, #31
   17f60:	ldr	r2, [r0, r2, lsl #2]
   17f64:	lsr	r3, r2, r3
   17f68:	tst	r3, #1
   17f6c:	beq	17624 <__assert_fail@plt+0x62f4>
   17f70:	ldr	r3, [sp, #40]	; 0x28
   17f74:	cmp	r3, #0
   17f78:	beq	17810 <__assert_fail@plt+0x64e0>
   17f7c:	mov	r3, r1
   17f80:	str	r3, [sp, #64]	; 0x40
   17f84:	mov	sl, r9
   17f88:	ldr	r3, [sp, #56]	; 0x38
   17f8c:	mov	r9, fp
   17f90:	ldr	r2, [sp, #64]	; 0x40
   17f94:	b	18184 <__assert_fail@plt+0x6e54>
   17f98:	cmp	fp, r8
   17f9c:	eor	r6, r0, #1
   17fa0:	movhi	ip, #92	; 0x5c
   17fa4:	and	r6, r6, r2
   17fa8:	add	sl, sl, #1
   17fac:	strbhi	ip, [r9, r8]
   17fb0:	cmp	r1, sl
   17fb4:	add	r8, r8, #1
   17fb8:	uxtb	r6, r6
   17fbc:	bhi	17f10 <__assert_fail@plt+0x6be0>
   17fc0:	str	r2, [sp, #36]	; 0x24
   17fc4:	b	1763c <__assert_fail@plt+0x630c>
   17fc8:	ldr	r3, [sp, #24]
   17fcc:	cmn	r3, #1
   17fd0:	mov	r3, #0
   17fd4:	str	r3, [sp, #128]	; 0x80
   17fd8:	str	r3, [sp, #132]	; 0x84
   17fdc:	beq	182d0 <__assert_fail@plt+0x6fa0>
   17fe0:	mov	r2, r7
   17fe4:	mov	r3, #0
   17fe8:	str	r7, [sp, #104]	; 0x68
   17fec:	str	r5, [sp, #116]	; 0x74
   17ff0:	mov	r7, r3
   17ff4:	mov	r5, r2
   17ff8:	str	r4, [sp, #32]
   17ffc:	str	r6, [sp, #108]	; 0x6c
   18000:	str	r8, [sp, #112]	; 0x70
   18004:	ldr	r3, [sp, #44]	; 0x2c
   18008:	add	r6, sl, r7
   1800c:	add	r4, r3, r6
   18010:	ldr	r3, [sp, #24]
   18014:	mov	r1, r4
   18018:	sub	r2, r3, r6
   1801c:	add	r0, sp, #124	; 0x7c
   18020:	add	r3, sp, #128	; 0x80
   18024:	bl	1d468 <__assert_fail@plt+0xc138>
   18028:	subs	r8, r0, #0
   1802c:	beq	183b4 <__assert_fail@plt+0x7084>
   18030:	cmn	r8, #1
   18034:	beq	1838c <__assert_fail@plt+0x705c>
   18038:	cmn	r8, #2
   1803c:	beq	18324 <__assert_fail@plt+0x6ff4>
   18040:	ldr	r3, [sp, #64]	; 0x40
   18044:	cmp	r3, #0
   18048:	beq	18108 <__assert_fail@plt+0x6dd8>
   1804c:	cmp	r8, #1
   18050:	beq	18108 <__assert_fail@plt+0x6dd8>
   18054:	sub	r3, r8, #1
   18058:	add	r6, r3, r6
   1805c:	ldr	r3, [sp, #44]	; 0x2c
   18060:	add	r6, r3, r6
   18064:	ldrb	r3, [r4, #1]!
   18068:	sub	r3, r3, #91	; 0x5b
   1806c:	cmp	r3, #33	; 0x21
   18070:	ldrls	pc, [pc, r3, lsl #2]
   18074:	b	18100 <__assert_fail@plt+0x6dd0>
   18078:	andeq	r8, r1, ip, ror #2
   1807c:	andeq	r8, r1, ip, ror #2
   18080:	andeq	r8, r1, r0, lsl #2
   18084:	andeq	r8, r1, ip, ror #2
   18088:	andeq	r8, r1, r0, lsl #2
   1808c:	andeq	r8, r1, ip, ror #2
   18090:	andeq	r8, r1, r0, lsl #2
   18094:	andeq	r8, r1, r0, lsl #2
   18098:	andeq	r8, r1, r0, lsl #2
   1809c:	andeq	r8, r1, r0, lsl #2
   180a0:	andeq	r8, r1, r0, lsl #2
   180a4:	andeq	r8, r1, r0, lsl #2
   180a8:	andeq	r8, r1, r0, lsl #2
   180ac:	andeq	r8, r1, r0, lsl #2
   180b0:	andeq	r8, r1, r0, lsl #2
   180b4:	andeq	r8, r1, r0, lsl #2
   180b8:	andeq	r8, r1, r0, lsl #2
   180bc:	andeq	r8, r1, r0, lsl #2
   180c0:	andeq	r8, r1, r0, lsl #2
   180c4:	andeq	r8, r1, r0, lsl #2
   180c8:	andeq	r8, r1, r0, lsl #2
   180cc:	andeq	r8, r1, r0, lsl #2
   180d0:	andeq	r8, r1, r0, lsl #2
   180d4:	andeq	r8, r1, r0, lsl #2
   180d8:	andeq	r8, r1, r0, lsl #2
   180dc:	andeq	r8, r1, r0, lsl #2
   180e0:	andeq	r8, r1, r0, lsl #2
   180e4:	andeq	r8, r1, r0, lsl #2
   180e8:	andeq	r8, r1, r0, lsl #2
   180ec:	andeq	r8, r1, r0, lsl #2
   180f0:	andeq	r8, r1, r0, lsl #2
   180f4:	andeq	r8, r1, r0, lsl #2
   180f8:	andeq	r8, r1, r0, lsl #2
   180fc:	andeq	r8, r1, ip, ror #2
   18100:	cmp	r6, r4
   18104:	bne	18064 <__assert_fail@plt+0x6d34>
   18108:	ldr	r0, [sp, #124]	; 0x7c
   1810c:	bl	110f0 <iswprint@plt>
   18110:	add	r7, r7, r8
   18114:	cmp	r0, #0
   18118:	add	r0, sp, #128	; 0x80
   1811c:	moveq	r5, #0
   18120:	bl	11090 <mbsinit@plt>
   18124:	cmp	r0, #0
   18128:	beq	18004 <__assert_fail@plt+0x6cd4>
   1812c:	ldr	r4, [sp, #32]
   18130:	str	r5, [sp, #32]
   18134:	ldr	r3, [sp, #32]
   18138:	mov	r1, r7
   1813c:	eor	r3, r3, #1
   18140:	ldr	r7, [sp, #104]	; 0x68
   18144:	ldr	r6, [sp, #108]	; 0x6c
   18148:	ldr	r8, [sp, #112]	; 0x70
   1814c:	ldr	r5, [sp, #116]	; 0x74
   18150:	uxtb	r3, r3
   18154:	cmp	r1, #1
   18158:	bls	17e14 <__assert_fail@plt+0x6ae4>
   1815c:	ldr	r2, [sp, #56]	; 0x38
   18160:	and	r3, r3, r2
   18164:	uxtb	r3, r3
   18168:	b	17e24 <__assert_fail@plt+0x6af4>
   1816c:	mov	r3, #2
   18170:	str	r3, [sp, #176]	; 0xb0
   18174:	ldr	r2, [sp, #64]	; 0x40
   18178:	ldr	r3, [sp, #56]	; 0x38
   1817c:	mov	sl, r9
   18180:	mov	r9, fp
   18184:	and	r3, r3, r2
   18188:	tst	r3, #255	; 0xff
   1818c:	ldr	r3, [sp, #176]	; 0xb0
   18190:	movne	r3, #4
   18194:	str	r3, [sp, #176]	; 0xb0
   18198:	ldr	r3, [sp, #180]	; 0xb4
   1819c:	mov	ip, #0
   181a0:	bic	r3, r3, #2
   181a4:	str	r3, [sp, #4]
   181a8:	ldr	r3, [sp, #192]	; 0xc0
   181ac:	ldr	r2, [sp, #44]	; 0x2c
   181b0:	str	r3, [sp, #16]
   181b4:	ldr	r3, [sp, #188]	; 0xbc
   181b8:	mov	r1, r9
   181bc:	str	r3, [sp, #12]
   181c0:	ldr	r3, [sp, #176]	; 0xb0
   181c4:	mov	r0, sl
   181c8:	str	r3, [sp]
   181cc:	str	ip, [sp, #8]
   181d0:	ldr	r3, [sp, #24]
   181d4:	bl	17034 <__assert_fail@plt+0x5d04>
   181d8:	mov	fp, r0
   181dc:	mov	r0, fp
   181e0:	add	sp, sp, #140	; 0x8c
   181e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181e8:	mov	r4, #92	; 0x5c
   181ec:	mov	r1, #0
   181f0:	mov	r3, r4
   181f4:	b	177e8 <__assert_fail@plt+0x64b8>
   181f8:	mov	r3, #0
   181fc:	ldr	r1, [sp, #52]	; 0x34
   18200:	str	r3, [sp, #32]
   18204:	mov	r4, #63	; 0x3f
   18208:	b	17608 <__assert_fail@plt+0x62d8>
   1820c:	cmp	fp, #0
   18210:	beq	1826c <__assert_fail@plt+0x6f3c>
   18214:	mov	r3, #39	; 0x27
   18218:	strb	r3, [r9]
   1821c:	mov	r3, #0
   18220:	str	r3, [sp, #40]	; 0x28
   18224:	mov	r3, #1
   18228:	str	r3, [sp, #68]	; 0x44
   1822c:	ldr	r3, [pc, #448]	; 183f4 <__assert_fail@plt+0x70c4>
   18230:	mov	r8, #1
   18234:	str	r3, [sp, #72]	; 0x48
   18238:	b	1741c <__assert_fail@plt+0x60ec>
   1823c:	ldr	r3, [sp, #40]	; 0x28
   18240:	mov	sl, r9
   18244:	str	r3, [sp, #56]	; 0x38
   18248:	mov	r9, fp
   1824c:	ldr	r2, [sp, #64]	; 0x40
   18250:	b	18184 <__assert_fail@plt+0x6e54>
   18254:	str	r2, [sp, #36]	; 0x24
   18258:	b	1766c <__assert_fail@plt+0x633c>
   1825c:	mov	r1, #0
   18260:	str	r3, [sp, #32]
   18264:	mov	r4, #63	; 0x3f
   18268:	b	17608 <__assert_fail@plt+0x62d8>
   1826c:	ldr	r3, [pc, #384]	; 183f4 <__assert_fail@plt+0x70c4>
   18270:	str	r3, [sp, #72]	; 0x48
   18274:	mov	r3, #0
   18278:	str	r3, [sp, #40]	; 0x28
   1827c:	mov	r3, #1
   18280:	str	r3, [sp, #68]	; 0x44
   18284:	mov	r8, r3
   18288:	b	1741c <__assert_fail@plt+0x60ec>
   1828c:	bl	112e8 <abort@plt>
   18290:	cmp	fp, #0
   18294:	beq	182f4 <__assert_fail@plt+0x6fc4>
   18298:	mov	r2, #1
   1829c:	mov	r3, #34	; 0x22
   182a0:	strb	r3, [r9]
   182a4:	mov	r8, r2
   182a8:	mov	r3, r2
   182ac:	str	r2, [sp, #68]	; 0x44
   182b0:	str	r3, [sp, #56]	; 0x38
   182b4:	ldr	r3, [pc, #316]	; 183f8 <__assert_fail@plt+0x70c8>
   182b8:	ldr	r1, [sp, #56]	; 0x38
   182bc:	str	r3, [sp, #72]	; 0x48
   182c0:	ldr	r2, [sp, #176]	; 0xb0
   182c4:	ldr	ip, [sp, #40]	; 0x28
   182c8:	ldr	lr, [sp, #176]	; 0xb0
   182cc:	b	17100 <__assert_fail@plt+0x5dd0>
   182d0:	ldr	r0, [sp, #44]	; 0x2c
   182d4:	bl	111bc <strlen@plt>
   182d8:	str	r0, [sp, #24]
   182dc:	b	17fe0 <__assert_fail@plt+0x6cb0>
   182e0:	mov	r7, #0
   182e4:	ldr	r1, [sp, #52]	; 0x34
   182e8:	str	r3, [sp, #32]
   182ec:	mov	r4, #48	; 0x30
   182f0:	b	17608 <__assert_fail@plt+0x62d8>
   182f4:	mov	r3, #1
   182f8:	str	r3, [sp, #68]	; 0x44
   182fc:	mov	r8, r3
   18300:	b	182b0 <__assert_fail@plt+0x6f80>
   18304:	mov	r3, #2
   18308:	mov	sl, r9
   1830c:	str	r3, [sp, #176]	; 0xb0
   18310:	mov	r9, fp
   18314:	ldr	r3, [sp, #56]	; 0x38
   18318:	b	18184 <__assert_fail@plt+0x6e54>
   1831c:	ldr	r6, [sp, #48]	; 0x30
   18320:	b	17dd0 <__assert_fail@plt+0x6aa0>
   18324:	ldr	r0, [sp, #24]
   18328:	mov	ip, r6
   1832c:	cmp	r0, ip
   18330:	mov	r1, r7
   18334:	mov	r2, r4
   18338:	ldr	r7, [sp, #104]	; 0x68
   1833c:	ldr	r4, [sp, #32]
   18340:	ldr	r6, [sp, #108]	; 0x6c
   18344:	ldr	r8, [sp, #112]	; 0x70
   18348:	ldr	r5, [sp, #116]	; 0x74
   1834c:	bls	1837c <__assert_fail@plt+0x704c>
   18350:	ldrb	r3, [r2]
   18354:	cmp	r3, #0
   18358:	bne	1836c <__assert_fail@plt+0x703c>
   1835c:	b	1848c <__assert_fail@plt+0x715c>
   18360:	ldrb	r3, [r2, #1]!
   18364:	cmp	r3, #0
   18368:	beq	1848c <__assert_fail@plt+0x715c>
   1836c:	add	r1, r1, #1
   18370:	add	r3, sl, r1
   18374:	cmp	r0, r3
   18378:	bhi	18360 <__assert_fail@plt+0x7030>
   1837c:	mov	r2, #0
   18380:	mov	r3, r7
   18384:	str	r2, [sp, #32]
   18388:	b	18154 <__assert_fail@plt+0x6e24>
   1838c:	mov	r1, r7
   18390:	ldr	r7, [sp, #104]	; 0x68
   18394:	mov	r2, #0
   18398:	ldr	r4, [sp, #32]
   1839c:	ldr	r6, [sp, #108]	; 0x6c
   183a0:	ldr	r8, [sp, #112]	; 0x70
   183a4:	ldr	r5, [sp, #116]	; 0x74
   183a8:	mov	r3, r7
   183ac:	str	r2, [sp, #32]
   183b0:	b	18154 <__assert_fail@plt+0x6e24>
   183b4:	mov	r3, r5
   183b8:	eor	r3, r3, #1
   183bc:	ldr	r4, [sp, #32]
   183c0:	mov	r1, r7
   183c4:	str	r5, [sp, #32]
   183c8:	ldr	r7, [sp, #104]	; 0x68
   183cc:	ldr	r6, [sp, #108]	; 0x6c
   183d0:	ldr	r8, [sp, #112]	; 0x70
   183d4:	ldr	r5, [sp, #116]	; 0x74
   183d8:	uxtb	r3, r3
   183dc:	b	18154 <__assert_fail@plt+0x6e24>
   183e0:	mov	sl, r9
   183e4:	str	r3, [sp, #56]	; 0x38
   183e8:	mov	r9, fp
   183ec:	ldr	r2, [sp, #64]	; 0x40
   183f0:	b	18184 <__assert_fail@plt+0x6e54>
   183f4:	andeq	lr, r1, r0, ror ip
   183f8:	andeq	lr, r1, ip, ror #24
   183fc:	andeq	lr, r1, r4, ror ip
   18400:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   18404:	ldr	r2, [sp, #44]	; 0x2c
   18408:	ldrb	r1, [r2, r3]
   1840c:	sub	r2, r1, #33	; 0x21
   18410:	uxtb	r2, r2
   18414:	cmp	r2, #29
   18418:	bhi	18498 <__assert_fail@plt+0x7168>
   1841c:	ldr	r0, [pc, #-36]	; 18400 <__assert_fail@plt+0x70d0>
   18420:	mov	ip, #1
   18424:	ands	r2, r0, ip, lsl r2
   18428:	beq	184b8 <__assert_fail@plt+0x7188>
   1842c:	ldr	r2, [sp, #40]	; 0x28
   18430:	cmp	r2, #0
   18434:	bne	185ac <__assert_fail@plt+0x727c>
   18438:	add	r2, r8, #1
   1843c:	cmp	fp, r8
   18440:	strbhi	r4, [r9, r8]
   18444:	cmp	fp, r2
   18448:	movhi	r0, #34	; 0x22
   1844c:	strbhi	r0, [r9, r2]
   18450:	add	r2, r8, #2
   18454:	cmp	fp, r2
   18458:	movhi	r0, #34	; 0x22
   1845c:	strbhi	r0, [r9, r2]
   18460:	add	r2, r8, #3
   18464:	cmp	fp, r2
   18468:	mov	sl, r3
   1846c:	ldr	r3, [sp, #40]	; 0x28
   18470:	movhi	r0, #63	; 0x3f
   18474:	mov	r4, r1
   18478:	strbhi	r0, [r9, r2]
   1847c:	add	r8, r8, #4
   18480:	mov	r1, r3
   18484:	str	r3, [sp, #32]
   18488:	b	17608 <__assert_fail@plt+0x62d8>
   1848c:	str	r3, [sp, #32]
   18490:	mov	r3, r7
   18494:	b	18154 <__assert_fail@plt+0x6e24>
   18498:	mov	r1, #0
   1849c:	str	r1, [sp, #32]
   184a0:	b	17608 <__assert_fail@plt+0x62d8>
   184a4:	mov	sl, r9
   184a8:	ldr	r3, [sp, #56]	; 0x38
   184ac:	mov	r9, fp
   184b0:	ldr	r2, [sp, #64]	; 0x40
   184b4:	b	18184 <__assert_fail@plt+0x6e54>
   184b8:	str	r2, [sp, #32]
   184bc:	mov	r1, #0
   184c0:	b	17608 <__assert_fail@plt+0x62d8>
   184c4:	ldr	r2, [sp, #76]	; 0x4c
   184c8:	mov	sl, r9
   184cc:	mov	r9, fp
   184d0:	mov	fp, r8
   184d4:	ldr	r1, [sp, #72]	; 0x48
   184d8:	cmp	r1, #0
   184dc:	moveq	r3, #0
   184e0:	andne	r3, r2, #1
   184e4:	cmp	r3, #0
   184e8:	beq	18514 <__assert_fail@plt+0x71e4>
   184ec:	ldrb	r3, [r1]
   184f0:	cmp	r3, #0
   184f4:	beq	18514 <__assert_fail@plt+0x71e4>
   184f8:	mov	r2, r1
   184fc:	cmp	r9, fp
   18500:	strbhi	r3, [sl, fp]
   18504:	ldrb	r3, [r2, #1]!
   18508:	add	fp, fp, #1
   1850c:	cmp	r3, #0
   18510:	bne	184fc <__assert_fail@plt+0x71cc>
   18514:	cmp	r9, fp
   18518:	movhi	r3, #0
   1851c:	strbhi	r3, [sl, fp]
   18520:	b	181dc <__assert_fail@plt+0x6eac>
   18524:	ldr	r3, [sp, #192]	; 0xc0
   18528:	mov	ip, #5
   1852c:	str	r3, [sp, #16]
   18530:	ldr	r3, [sp, #188]	; 0xbc
   18534:	ldr	r2, [sp, #44]	; 0x2c
   18538:	str	r3, [sp, #12]
   1853c:	ldr	r3, [sp, #184]	; 0xb8
   18540:	ldr	r1, [sp, #84]	; 0x54
   18544:	str	r3, [sp, #8]
   18548:	ldr	r3, [sp, #180]	; 0xb4
   1854c:	mov	r0, r9
   18550:	str	r3, [sp, #4]
   18554:	str	ip, [sp]
   18558:	ldr	r3, [sp, #24]
   1855c:	bl	17034 <__assert_fail@plt+0x5d04>
   18560:	mov	fp, r0
   18564:	b	181dc <__assert_fail@plt+0x6eac>
   18568:	mov	sl, r9
   1856c:	mov	r9, fp
   18570:	mov	fp, r8
   18574:	b	184d4 <__assert_fail@plt+0x71a4>
   18578:	ldr	r1, [sp, #176]	; 0xb0
   1857c:	bl	16f14 <__assert_fail@plt+0x5be4>
   18580:	str	r0, [sp, #192]	; 0xc0
   18584:	b	174f0 <__assert_fail@plt+0x61c0>
   18588:	ldr	r1, [sp, #176]	; 0xb0
   1858c:	bl	16f14 <__assert_fail@plt+0x5be4>
   18590:	str	r0, [sp, #188]	; 0xbc
   18594:	b	174d0 <__assert_fail@plt+0x61a0>
   18598:	mov	sl, r9
   1859c:	mov	r2, r3
   185a0:	mov	r9, fp
   185a4:	mov	fp, r8
   185a8:	b	184d4 <__assert_fail@plt+0x71a4>
   185ac:	mov	sl, r9
   185b0:	mov	r9, fp
   185b4:	b	18198 <__assert_fail@plt+0x6e68>
   185b8:	push	{r4, r5, r6, lr}
   185bc:	mov	r5, r0
   185c0:	bl	111ec <__errno_location@plt>
   185c4:	cmp	r5, #0
   185c8:	mov	r1, #48	; 0x30
   185cc:	mov	r4, r0
   185d0:	ldr	r0, [pc, #16]	; 185e8 <__assert_fail@plt+0x72b8>
   185d4:	ldr	r6, [r4]
   185d8:	movne	r0, r5
   185dc:	bl	1bee0 <__assert_fail@plt+0xabb0>
   185e0:	str	r6, [r4]
   185e4:	pop	{r4, r5, r6, pc}
   185e8:	andeq	r0, r3, r4, asr #3
   185ec:	ldr	r3, [pc, #12]	; 18600 <__assert_fail@plt+0x72d0>
   185f0:	cmp	r0, #0
   185f4:	moveq	r0, r3
   185f8:	ldr	r0, [r0]
   185fc:	bx	lr
   18600:	andeq	r0, r3, r4, asr #3
   18604:	ldr	r3, [pc, #12]	; 18618 <__assert_fail@plt+0x72e8>
   18608:	cmp	r0, #0
   1860c:	moveq	r0, r3
   18610:	str	r1, [r0]
   18614:	bx	lr
   18618:	andeq	r0, r3, r4, asr #3
   1861c:	ldr	r3, [pc, #52]	; 18658 <__assert_fail@plt+0x7328>
   18620:	cmp	r0, #0
   18624:	moveq	r0, r3
   18628:	add	r3, r0, #8
   1862c:	push	{lr}		; (str lr, [sp, #-4]!)
   18630:	lsr	lr, r1, #5
   18634:	and	r1, r1, #31
   18638:	ldr	ip, [r3, lr, lsl #2]
   1863c:	lsr	r0, ip, r1
   18640:	eor	r2, r2, r0
   18644:	and	r2, r2, #1
   18648:	and	r0, r0, #1
   1864c:	eor	r1, ip, r2, lsl r1
   18650:	str	r1, [r3, lr, lsl #2]
   18654:	pop	{pc}		; (ldr pc, [sp], #4)
   18658:	andeq	r0, r3, r4, asr #3
   1865c:	ldr	r3, [pc, #16]	; 18674 <__assert_fail@plt+0x7344>
   18660:	cmp	r0, #0
   18664:	movne	r3, r0
   18668:	ldr	r0, [r3, #4]
   1866c:	str	r1, [r3, #4]
   18670:	bx	lr
   18674:	andeq	r0, r3, r4, asr #3
   18678:	ldr	r3, [pc, #44]	; 186ac <__assert_fail@plt+0x737c>
   1867c:	cmp	r0, #0
   18680:	moveq	r0, r3
   18684:	mov	ip, #10
   18688:	cmp	r2, #0
   1868c:	cmpne	r1, #0
   18690:	str	ip, [r0]
   18694:	beq	186a4 <__assert_fail@plt+0x7374>
   18698:	str	r1, [r0, #40]	; 0x28
   1869c:	str	r2, [r0, #44]	; 0x2c
   186a0:	bx	lr
   186a4:	push	{r4, lr}
   186a8:	bl	112e8 <abort@plt>
   186ac:	andeq	r0, r3, r4, asr #3
   186b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   186b4:	sub	sp, sp, #24
   186b8:	ldr	ip, [pc, #108]	; 1872c <__assert_fail@plt+0x73fc>
   186bc:	ldr	r4, [sp, #56]	; 0x38
   186c0:	mov	r9, r2
   186c4:	cmp	r4, #0
   186c8:	moveq	r4, ip
   186cc:	mov	sl, r3
   186d0:	mov	r7, r0
   186d4:	mov	r8, r1
   186d8:	bl	111ec <__errno_location@plt>
   186dc:	ldr	r3, [r4, #44]	; 0x2c
   186e0:	mov	r1, r8
   186e4:	ldr	r6, [r0]
   186e8:	str	r3, [sp, #16]
   186ec:	ldr	r2, [r4, #40]	; 0x28
   186f0:	add	r3, r4, #8
   186f4:	str	r3, [sp, #8]
   186f8:	str	r2, [sp, #12]
   186fc:	ldr	r2, [r4, #4]
   18700:	mov	r5, r0
   18704:	str	r2, [sp, #4]
   18708:	ldr	ip, [r4]
   1870c:	mov	r3, sl
   18710:	mov	r2, r9
   18714:	mov	r0, r7
   18718:	str	ip, [sp]
   1871c:	bl	17034 <__assert_fail@plt+0x5d04>
   18720:	str	r6, [r5]
   18724:	add	sp, sp, #24
   18728:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1872c:	andeq	r0, r3, r4, asr #3
   18730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18734:	cmp	r2, #0
   18738:	sub	sp, sp, #36	; 0x24
   1873c:	ldr	r4, [pc, #164]	; 187e8 <__assert_fail@plt+0x74b8>
   18740:	mov	r8, r1
   18744:	movne	r4, r2
   18748:	mov	r7, r0
   1874c:	bl	111ec <__errno_location@plt>
   18750:	ldr	r3, [r4, #44]	; 0x2c
   18754:	ldr	r5, [r4, #4]
   18758:	add	r9, r4, #8
   1875c:	orr	r5, r5, #1
   18760:	mov	r1, #0
   18764:	mov	r2, r7
   18768:	ldr	fp, [r0]
   1876c:	str	r3, [sp, #16]
   18770:	ldr	r3, [r4, #40]	; 0x28
   18774:	stmib	sp, {r5, r9}
   18778:	str	r3, [sp, #12]
   1877c:	ldr	r3, [r4]
   18780:	mov	r6, r0
   18784:	str	r3, [sp]
   18788:	mov	r0, r1
   1878c:	mov	r3, r8
   18790:	bl	17034 <__assert_fail@plt+0x5d04>
   18794:	add	r1, r0, #1
   18798:	mov	r0, r1
   1879c:	str	r1, [sp, #28]
   187a0:	bl	1b99c <__assert_fail@plt+0xa66c>
   187a4:	ldr	r3, [r4, #44]	; 0x2c
   187a8:	ldr	r1, [sp, #28]
   187ac:	str	r3, [sp, #16]
   187b0:	ldr	r3, [r4, #40]	; 0x28
   187b4:	str	r5, [sp, #4]
   187b8:	str	r3, [sp, #12]
   187bc:	str	r9, [sp, #8]
   187c0:	ldr	ip, [r4]
   187c4:	mov	r3, r8
   187c8:	mov	r2, r7
   187cc:	str	ip, [sp]
   187d0:	mov	sl, r0
   187d4:	bl	17034 <__assert_fail@plt+0x5d04>
   187d8:	mov	r0, sl
   187dc:	str	fp, [r6]
   187e0:	add	sp, sp, #36	; 0x24
   187e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187e8:	andeq	r0, r3, r4, asr #3
   187ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187f0:	cmp	r3, #0
   187f4:	sub	sp, sp, #44	; 0x2c
   187f8:	ldr	r4, [pc, #192]	; 188c0 <__assert_fail@plt+0x7590>
   187fc:	mov	r6, r2
   18800:	movne	r4, r3
   18804:	mov	r9, r1
   18808:	mov	r8, r0
   1880c:	bl	111ec <__errno_location@plt>
   18810:	ldr	r3, [r4, #44]	; 0x2c
   18814:	ldr	r5, [r4, #4]
   18818:	add	sl, r4, #8
   1881c:	cmp	r6, #0
   18820:	orreq	r5, r5, #1
   18824:	mov	r1, #0
   18828:	ldr	r2, [r0]
   1882c:	str	r3, [sp, #16]
   18830:	ldr	r3, [r4, #40]	; 0x28
   18834:	stmib	sp, {r5, sl}
   18838:	str	r3, [sp, #12]
   1883c:	ldr	r3, [r4]
   18840:	mov	r7, r0
   18844:	str	r2, [sp, #28]
   18848:	str	r3, [sp]
   1884c:	mov	r2, r8
   18850:	mov	r3, r9
   18854:	mov	r0, r1
   18858:	bl	17034 <__assert_fail@plt+0x5d04>
   1885c:	add	r1, r0, #1
   18860:	mov	fp, r0
   18864:	mov	r0, r1
   18868:	str	r1, [sp, #36]	; 0x24
   1886c:	bl	1b99c <__assert_fail@plt+0xa66c>
   18870:	ldr	r3, [r4, #44]	; 0x2c
   18874:	mov	r2, r8
   18878:	str	r3, [sp, #16]
   1887c:	ldr	r3, [r4, #40]	; 0x28
   18880:	str	r5, [sp, #4]
   18884:	str	r3, [sp, #12]
   18888:	str	sl, [sp, #8]
   1888c:	ldr	ip, [r4]
   18890:	ldr	r1, [sp, #36]	; 0x24
   18894:	mov	r3, r9
   18898:	str	ip, [sp]
   1889c:	str	r0, [sp, #32]
   188a0:	bl	17034 <__assert_fail@plt+0x5d04>
   188a4:	ldr	r2, [sp, #28]
   188a8:	cmp	r6, #0
   188ac:	str	r2, [r7]
   188b0:	ldr	r0, [sp, #32]
   188b4:	strne	fp, [r6]
   188b8:	add	sp, sp, #44	; 0x2c
   188bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188c0:	andeq	r0, r3, r4, asr #3
   188c4:	push	{r4, r5, r6, r7, r8, lr}
   188c8:	ldr	r6, [pc, #116]	; 18944 <__assert_fail@plt+0x7614>
   188cc:	ldr	r3, [r6, #4]
   188d0:	ldr	r7, [r6]
   188d4:	cmp	r3, #1
   188d8:	movgt	r5, r7
   188dc:	movgt	r4, #1
   188e0:	ble	18900 <__assert_fail@plt+0x75d0>
   188e4:	ldr	r0, [r5, #12]
   188e8:	bl	12cdc <__assert_fail@plt+0x19ac>
   188ec:	ldr	r3, [r6, #4]
   188f0:	add	r4, r4, #1
   188f4:	cmp	r3, r4
   188f8:	add	r5, r5, #8
   188fc:	bgt	188e4 <__assert_fail@plt+0x75b4>
   18900:	ldr	r0, [r7, #4]
   18904:	ldr	r4, [pc, #60]	; 18948 <__assert_fail@plt+0x7618>
   18908:	cmp	r0, r4
   1890c:	beq	18920 <__assert_fail@plt+0x75f0>
   18910:	bl	12cdc <__assert_fail@plt+0x19ac>
   18914:	mov	r3, #256	; 0x100
   18918:	str	r4, [r6, #12]
   1891c:	str	r3, [r6, #8]
   18920:	ldr	r4, [pc, #36]	; 1894c <__assert_fail@plt+0x761c>
   18924:	cmp	r7, r4
   18928:	beq	18938 <__assert_fail@plt+0x7608>
   1892c:	mov	r0, r7
   18930:	bl	12cdc <__assert_fail@plt+0x19ac>
   18934:	str	r4, [r6]
   18938:	mov	r3, #1
   1893c:	str	r3, [r6, #4]
   18940:	pop	{r4, r5, r6, r7, r8, pc}
   18944:	andeq	r0, r3, ip, lsr r1
   18948:	strdeq	r0, [r3], -r4
   1894c:	andeq	r0, r3, r4, asr #2
   18950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18954:	sub	sp, sp, #44	; 0x2c
   18958:	mov	r5, r0
   1895c:	mov	sl, r1
   18960:	bl	111ec <__errno_location@plt>
   18964:	ldr	r4, [pc, #400]	; 18afc <__assert_fail@plt+0x77cc>
   18968:	cmn	r5, #-2147483647	; 0x80000001
   1896c:	ldr	r6, [r4]
   18970:	mov	r8, r0
   18974:	movne	r0, #0
   18978:	moveq	r0, #1
   1897c:	ldr	r3, [r8]
   18980:	orrs	r0, r0, r5, lsr #31
   18984:	str	r3, [sp, #24]
   18988:	bne	18af8 <__assert_fail@plt+0x77c8>
   1898c:	ldr	r2, [r4, #4]
   18990:	cmp	r5, r2
   18994:	blt	189f4 <__assert_fail@plt+0x76c4>
   18998:	add	r7, r4, #8
   1899c:	cmp	r6, r7
   189a0:	str	r2, [sp, #36]	; 0x24
   189a4:	beq	18ac8 <__assert_fail@plt+0x7798>
   189a8:	mov	r3, #8
   189ac:	sub	r2, r5, r2
   189b0:	mov	r0, r6
   189b4:	str	r3, [sp]
   189b8:	add	r2, r2, #1
   189bc:	mvn	r3, #-2147483648	; 0x80000000
   189c0:	add	r1, sp, #36	; 0x24
   189c4:	bl	1bbb8 <__assert_fail@plt+0xa888>
   189c8:	mov	r6, r0
   189cc:	str	r0, [r4]
   189d0:	ldr	r0, [r4, #4]
   189d4:	ldr	r2, [sp, #36]	; 0x24
   189d8:	mov	r1, #0
   189dc:	sub	r2, r2, r0
   189e0:	add	r0, r6, r0, lsl #3
   189e4:	lsl	r2, r2, #3
   189e8:	bl	11204 <memset@plt>
   189ec:	ldr	r3, [sp, #36]	; 0x24
   189f0:	str	r3, [r4, #4]
   189f4:	ldr	r4, [pc, #260]	; 18b00 <__assert_fail@plt+0x77d0>
   189f8:	add	fp, r6, r5, lsl #3
   189fc:	ldr	r9, [r6, r5, lsl #3]
   18a00:	ldr	r0, [r4, #4]
   18a04:	ldr	r3, [r4]
   18a08:	ldr	r7, [fp, #4]
   18a0c:	ldr	r1, [r4, #44]	; 0x2c
   18a10:	ldr	r2, [r4, #40]	; 0x28
   18a14:	orr	r0, r0, #1
   18a18:	str	r3, [sp]
   18a1c:	add	r3, r4, #8
   18a20:	str	r0, [sp, #28]
   18a24:	str	r0, [sp, #4]
   18a28:	str	r1, [sp, #16]
   18a2c:	str	r2, [sp, #12]
   18a30:	str	r3, [sp, #8]
   18a34:	mov	r0, r7
   18a38:	mov	r1, r9
   18a3c:	mvn	r3, #0
   18a40:	mov	r2, sl
   18a44:	bl	17034 <__assert_fail@plt+0x5d04>
   18a48:	cmp	r9, r0
   18a4c:	bhi	18ab4 <__assert_fail@plt+0x7784>
   18a50:	add	r3, r4, #48	; 0x30
   18a54:	add	r9, r0, #1
   18a58:	cmp	r7, r3
   18a5c:	str	r9, [r6, r5, lsl #3]
   18a60:	beq	18a6c <__assert_fail@plt+0x773c>
   18a64:	mov	r0, r7
   18a68:	bl	12cdc <__assert_fail@plt+0x19ac>
   18a6c:	mov	r0, r9
   18a70:	bl	1b99c <__assert_fail@plt+0xa66c>
   18a74:	ldr	ip, [r4, #44]	; 0x2c
   18a78:	ldr	r3, [r4]
   18a7c:	ldr	lr, [r4, #40]	; 0x28
   18a80:	ldr	r4, [pc, #124]	; 18b04 <__assert_fail@plt+0x77d4>
   18a84:	mov	r2, sl
   18a88:	mov	r1, r9
   18a8c:	str	r0, [fp, #4]
   18a90:	str	r4, [sp, #8]
   18a94:	ldr	r4, [sp, #28]
   18a98:	str	r3, [sp]
   18a9c:	str	r4, [sp, #4]
   18aa0:	str	ip, [sp, #16]
   18aa4:	str	lr, [sp, #12]
   18aa8:	mvn	r3, #0
   18aac:	mov	r7, r0
   18ab0:	bl	17034 <__assert_fail@plt+0x5d04>
   18ab4:	ldr	r3, [sp, #24]
   18ab8:	mov	r0, r7
   18abc:	str	r3, [r8]
   18ac0:	add	sp, sp, #44	; 0x2c
   18ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ac8:	mov	r3, #8
   18acc:	sub	r2, r5, r2
   18ad0:	str	r3, [sp]
   18ad4:	add	r1, sp, #36	; 0x24
   18ad8:	add	r2, r2, #1
   18adc:	mvn	r3, #-2147483648	; 0x80000000
   18ae0:	bl	1bbb8 <__assert_fail@plt+0xa888>
   18ae4:	mov	r6, r0
   18ae8:	ldm	r7, {r0, r1}
   18aec:	str	r6, [r4]
   18af0:	stm	r6, {r0, r1}
   18af4:	b	189d0 <__assert_fail@plt+0x76a0>
   18af8:	bl	112e8 <abort@plt>
   18afc:	andeq	r0, r3, ip, lsr r1
   18b00:	andeq	r0, r3, r4, asr #3
   18b04:	andeq	r0, r3, ip, asr #3
   18b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b0c:	sub	sp, sp, #52	; 0x34
   18b10:	mov	r5, r0
   18b14:	mov	sl, r1
   18b18:	mov	fp, r2
   18b1c:	bl	111ec <__errno_location@plt>
   18b20:	ldr	r4, [pc, #408]	; 18cc0 <__assert_fail@plt+0x7990>
   18b24:	cmn	r5, #-2147483647	; 0x80000001
   18b28:	ldr	r6, [r4]
   18b2c:	mov	r8, r0
   18b30:	movne	r0, #0
   18b34:	moveq	r0, #1
   18b38:	ldr	r3, [r8]
   18b3c:	orrs	r0, r0, r5, lsr #31
   18b40:	str	r3, [sp, #28]
   18b44:	bne	18cbc <__assert_fail@plt+0x798c>
   18b48:	ldr	r2, [r4, #4]
   18b4c:	cmp	r5, r2
   18b50:	blt	18bb0 <__assert_fail@plt+0x7880>
   18b54:	add	r7, r4, #8
   18b58:	cmp	r6, r7
   18b5c:	str	r2, [sp, #44]	; 0x2c
   18b60:	beq	18c8c <__assert_fail@plt+0x795c>
   18b64:	mov	r3, #8
   18b68:	sub	r2, r5, r2
   18b6c:	mov	r0, r6
   18b70:	str	r3, [sp]
   18b74:	add	r2, r2, #1
   18b78:	mvn	r3, #-2147483648	; 0x80000000
   18b7c:	add	r1, sp, #44	; 0x2c
   18b80:	bl	1bbb8 <__assert_fail@plt+0xa888>
   18b84:	mov	r6, r0
   18b88:	str	r0, [r4]
   18b8c:	ldr	r0, [r4, #4]
   18b90:	ldr	r2, [sp, #44]	; 0x2c
   18b94:	mov	r1, #0
   18b98:	sub	r2, r2, r0
   18b9c:	add	r0, r6, r0, lsl #3
   18ba0:	lsl	r2, r2, #3
   18ba4:	bl	11204 <memset@plt>
   18ba8:	ldr	r3, [sp, #44]	; 0x2c
   18bac:	str	r3, [r4, #4]
   18bb0:	ldr	r4, [pc, #268]	; 18cc4 <__assert_fail@plt+0x7994>
   18bb4:	add	r3, r6, r5, lsl #3
   18bb8:	str	r3, [sp, #32]
   18bbc:	ldr	r7, [r3, #4]
   18bc0:	ldr	r0, [r4, #4]
   18bc4:	ldr	r3, [r4]
   18bc8:	ldr	r9, [r6, r5, lsl #3]
   18bcc:	ldr	r1, [r4, #44]	; 0x2c
   18bd0:	ldr	r2, [r4, #40]	; 0x28
   18bd4:	orr	r0, r0, #1
   18bd8:	str	r3, [sp]
   18bdc:	add	r3, r4, #8
   18be0:	str	r0, [sp, #36]	; 0x24
   18be4:	str	r0, [sp, #4]
   18be8:	str	r1, [sp, #16]
   18bec:	str	r2, [sp, #12]
   18bf0:	str	r3, [sp, #8]
   18bf4:	mov	r0, r7
   18bf8:	mov	r1, r9
   18bfc:	mov	r3, fp
   18c00:	mov	r2, sl
   18c04:	bl	17034 <__assert_fail@plt+0x5d04>
   18c08:	cmp	r9, r0
   18c0c:	bhi	18c78 <__assert_fail@plt+0x7948>
   18c10:	add	r3, r4, #48	; 0x30
   18c14:	add	r9, r0, #1
   18c18:	cmp	r7, r3
   18c1c:	str	r9, [r6, r5, lsl #3]
   18c20:	beq	18c2c <__assert_fail@plt+0x78fc>
   18c24:	mov	r0, r7
   18c28:	bl	12cdc <__assert_fail@plt+0x19ac>
   18c2c:	mov	r0, r9
   18c30:	bl	1b99c <__assert_fail@plt+0xa66c>
   18c34:	ldr	ip, [sp, #32]
   18c38:	ldr	lr, [r4, #44]	; 0x2c
   18c3c:	ldr	r5, [r4, #40]	; 0x28
   18c40:	mov	r3, fp
   18c44:	mov	r2, sl
   18c48:	mov	r1, r9
   18c4c:	str	r0, [ip, #4]
   18c50:	ldr	ip, [r4]
   18c54:	ldr	r4, [pc, #108]	; 18cc8 <__assert_fail@plt+0x7998>
   18c58:	str	lr, [sp, #16]
   18c5c:	str	r4, [sp, #8]
   18c60:	ldr	r4, [sp, #36]	; 0x24
   18c64:	str	r5, [sp, #12]
   18c68:	str	r4, [sp, #4]
   18c6c:	str	ip, [sp]
   18c70:	mov	r7, r0
   18c74:	bl	17034 <__assert_fail@plt+0x5d04>
   18c78:	ldr	r3, [sp, #28]
   18c7c:	mov	r0, r7
   18c80:	str	r3, [r8]
   18c84:	add	sp, sp, #52	; 0x34
   18c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c8c:	mov	r3, #8
   18c90:	sub	r2, r5, r2
   18c94:	str	r3, [sp]
   18c98:	add	r1, sp, #44	; 0x2c
   18c9c:	add	r2, r2, #1
   18ca0:	mvn	r3, #-2147483648	; 0x80000000
   18ca4:	bl	1bbb8 <__assert_fail@plt+0xa888>
   18ca8:	mov	r6, r0
   18cac:	ldm	r7, {r0, r1}
   18cb0:	str	r6, [r4]
   18cb4:	stm	r6, {r0, r1}
   18cb8:	b	18b8c <__assert_fail@plt+0x785c>
   18cbc:	bl	112e8 <abort@plt>
   18cc0:	andeq	r0, r3, ip, lsr r1
   18cc4:	andeq	r0, r3, r4, asr #3
   18cc8:	andeq	r0, r3, ip, asr #3
   18ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cd0:	sub	sp, sp, #44	; 0x2c
   18cd4:	mov	sl, r0
   18cd8:	bl	111ec <__errno_location@plt>
   18cdc:	ldr	r4, [pc, #352]	; 18e44 <__assert_fail@plt+0x7b14>
   18ce0:	ldr	r2, [r4, #4]
   18ce4:	ldr	r5, [r4]
   18ce8:	cmp	r2, #0
   18cec:	ldr	r3, [r0]
   18cf0:	mov	r8, r0
   18cf4:	str	r3, [sp, #28]
   18cf8:	bgt	18d54 <__assert_fail@plt+0x7a24>
   18cfc:	add	r6, r4, #8
   18d00:	cmp	r5, r6
   18d04:	str	r2, [sp, #36]	; 0x24
   18d08:	beq	18e14 <__assert_fail@plt+0x7ae4>
   18d0c:	mov	r3, #8
   18d10:	mov	r0, r5
   18d14:	str	r3, [sp]
   18d18:	rsb	r2, r2, #1
   18d1c:	mvn	r3, #-2147483648	; 0x80000000
   18d20:	add	r1, sp, #36	; 0x24
   18d24:	bl	1bbb8 <__assert_fail@plt+0xa888>
   18d28:	mov	r5, r0
   18d2c:	str	r0, [r4]
   18d30:	ldr	r0, [r4, #4]
   18d34:	ldr	r2, [sp, #36]	; 0x24
   18d38:	mov	r1, #0
   18d3c:	sub	r2, r2, r0
   18d40:	add	r0, r5, r0, lsl #3
   18d44:	lsl	r2, r2, #3
   18d48:	bl	11204 <memset@plt>
   18d4c:	ldr	r3, [sp, #36]	; 0x24
   18d50:	str	r3, [r4, #4]
   18d54:	ldr	r4, [pc, #236]	; 18e48 <__assert_fail@plt+0x7b18>
   18d58:	ldr	r9, [r5]
   18d5c:	ldr	r6, [r5, #4]
   18d60:	ldr	r7, [r4, #4]
   18d64:	ldr	r1, [r4, #44]	; 0x2c
   18d68:	ldr	r2, [r4, #40]	; 0x28
   18d6c:	ldr	r3, [r4]
   18d70:	orr	r7, r7, #1
   18d74:	add	fp, r4, #8
   18d78:	str	r1, [sp, #16]
   18d7c:	str	r2, [sp, #12]
   18d80:	str	r3, [sp]
   18d84:	str	r7, [sp, #4]
   18d88:	str	fp, [sp, #8]
   18d8c:	mov	r1, r9
   18d90:	mov	r0, r6
   18d94:	mvn	r3, #0
   18d98:	mov	r2, sl
   18d9c:	bl	17034 <__assert_fail@plt+0x5d04>
   18da0:	cmp	r9, r0
   18da4:	bhi	18e00 <__assert_fail@plt+0x7ad0>
   18da8:	add	r3, r4, #48	; 0x30
   18dac:	add	r9, r0, #1
   18db0:	cmp	r6, r3
   18db4:	str	r9, [r5]
   18db8:	beq	18dc4 <__assert_fail@plt+0x7a94>
   18dbc:	mov	r0, r6
   18dc0:	bl	12cdc <__assert_fail@plt+0x19ac>
   18dc4:	mov	r0, r9
   18dc8:	bl	1b99c <__assert_fail@plt+0xa66c>
   18dcc:	ldr	ip, [r4, #44]	; 0x2c
   18dd0:	ldr	r3, [r4]
   18dd4:	ldr	lr, [r4, #40]	; 0x28
   18dd8:	mov	r2, sl
   18ddc:	mov	r1, r9
   18de0:	str	r0, [r5, #4]
   18de4:	str	r3, [sp]
   18de8:	stmib	sp, {r7, fp}
   18dec:	str	ip, [sp, #16]
   18df0:	str	lr, [sp, #12]
   18df4:	mvn	r3, #0
   18df8:	mov	r6, r0
   18dfc:	bl	17034 <__assert_fail@plt+0x5d04>
   18e00:	ldr	r3, [sp, #28]
   18e04:	mov	r0, r6
   18e08:	str	r3, [r8]
   18e0c:	add	sp, sp, #44	; 0x2c
   18e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e14:	mov	r3, #8
   18e18:	str	r3, [sp]
   18e1c:	add	r1, sp, #36	; 0x24
   18e20:	rsb	r2, r2, #1
   18e24:	mvn	r3, #-2147483648	; 0x80000000
   18e28:	mov	r0, #0
   18e2c:	bl	1bbb8 <__assert_fail@plt+0xa888>
   18e30:	mov	r5, r0
   18e34:	ldm	r6, {r0, r1}
   18e38:	str	r5, [r4]
   18e3c:	stm	r5, {r0, r1}
   18e40:	b	18d30 <__assert_fail@plt+0x7a00>
   18e44:	andeq	r0, r3, ip, lsr r1
   18e48:	andeq	r0, r3, r4, asr #3
   18e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e50:	sub	sp, sp, #44	; 0x2c
   18e54:	mov	r9, r0
   18e58:	mov	sl, r1
   18e5c:	bl	111ec <__errno_location@plt>
   18e60:	ldr	r4, [pc, #364]	; 18fd4 <__assert_fail@plt+0x7ca4>
   18e64:	ldr	r2, [r4, #4]
   18e68:	ldr	r5, [r4]
   18e6c:	cmp	r2, #0
   18e70:	ldr	r3, [r0]
   18e74:	mov	r7, r0
   18e78:	str	r3, [sp, #24]
   18e7c:	bgt	18ed8 <__assert_fail@plt+0x7ba8>
   18e80:	add	r6, r4, #8
   18e84:	cmp	r5, r6
   18e88:	str	r2, [sp, #36]	; 0x24
   18e8c:	beq	18fa4 <__assert_fail@plt+0x7c74>
   18e90:	mov	r3, #8
   18e94:	mov	r0, r5
   18e98:	str	r3, [sp]
   18e9c:	rsb	r2, r2, #1
   18ea0:	mvn	r3, #-2147483648	; 0x80000000
   18ea4:	add	r1, sp, #36	; 0x24
   18ea8:	bl	1bbb8 <__assert_fail@plt+0xa888>
   18eac:	mov	r5, r0
   18eb0:	str	r0, [r4]
   18eb4:	ldr	r0, [r4, #4]
   18eb8:	ldr	r2, [sp, #36]	; 0x24
   18ebc:	mov	r1, #0
   18ec0:	sub	r2, r2, r0
   18ec4:	add	r0, r5, r0, lsl #3
   18ec8:	lsl	r2, r2, #3
   18ecc:	bl	11204 <memset@plt>
   18ed0:	ldr	r3, [sp, #36]	; 0x24
   18ed4:	str	r3, [r4, #4]
   18ed8:	ldr	r4, [pc, #248]	; 18fd8 <__assert_fail@plt+0x7ca8>
   18edc:	ldr	r8, [r5]
   18ee0:	ldr	r6, [r5, #4]
   18ee4:	ldr	r0, [r4, #4]
   18ee8:	ldr	r1, [r4, #44]	; 0x2c
   18eec:	ldr	r2, [r4, #40]	; 0x28
   18ef0:	ldr	r3, [r4]
   18ef4:	orr	r0, r0, #1
   18ef8:	add	fp, r4, #8
   18efc:	str	r0, [sp, #28]
   18f00:	str	r0, [sp, #4]
   18f04:	str	r1, [sp, #16]
   18f08:	str	r2, [sp, #12]
   18f0c:	str	r3, [sp]
   18f10:	str	fp, [sp, #8]
   18f14:	mov	r1, r8
   18f18:	mov	r0, r6
   18f1c:	mov	r3, sl
   18f20:	mov	r2, r9
   18f24:	bl	17034 <__assert_fail@plt+0x5d04>
   18f28:	cmp	r8, r0
   18f2c:	bhi	18f90 <__assert_fail@plt+0x7c60>
   18f30:	add	r3, r4, #48	; 0x30
   18f34:	add	r8, r0, #1
   18f38:	cmp	r6, r3
   18f3c:	str	r8, [r5]
   18f40:	beq	18f4c <__assert_fail@plt+0x7c1c>
   18f44:	mov	r0, r6
   18f48:	bl	12cdc <__assert_fail@plt+0x19ac>
   18f4c:	mov	r0, r8
   18f50:	bl	1b99c <__assert_fail@plt+0xa66c>
   18f54:	ldr	lr, [r4, #44]	; 0x2c
   18f58:	ldr	ip, [r4]
   18f5c:	mov	r3, sl
   18f60:	mov	r2, r9
   18f64:	mov	r1, r8
   18f68:	str	r0, [r5, #4]
   18f6c:	ldr	r5, [r4, #40]	; 0x28
   18f70:	ldr	r4, [sp, #28]
   18f74:	str	fp, [sp, #8]
   18f78:	str	r4, [sp, #4]
   18f7c:	str	lr, [sp, #16]
   18f80:	str	r5, [sp, #12]
   18f84:	str	ip, [sp]
   18f88:	mov	r6, r0
   18f8c:	bl	17034 <__assert_fail@plt+0x5d04>
   18f90:	ldr	r3, [sp, #24]
   18f94:	mov	r0, r6
   18f98:	str	r3, [r7]
   18f9c:	add	sp, sp, #44	; 0x2c
   18fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fa4:	mov	r3, #8
   18fa8:	str	r3, [sp]
   18fac:	add	r1, sp, #36	; 0x24
   18fb0:	rsb	r2, r2, #1
   18fb4:	mvn	r3, #-2147483648	; 0x80000000
   18fb8:	mov	r0, #0
   18fbc:	bl	1bbb8 <__assert_fail@plt+0xa888>
   18fc0:	mov	r5, r0
   18fc4:	ldm	r6, {r0, r1}
   18fc8:	str	r5, [r4]
   18fcc:	stm	r5, {r0, r1}
   18fd0:	b	18eb4 <__assert_fail@plt+0x7b84>
   18fd4:	andeq	r0, r3, ip, lsr r1
   18fd8:	andeq	r0, r3, r4, asr #3
   18fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fe0:	sub	sp, sp, #132	; 0x84
   18fe4:	mov	r5, r1
   18fe8:	mov	r4, r0
   18fec:	mov	r9, r2
   18ff0:	add	r0, sp, #80	; 0x50
   18ff4:	mov	r2, #48	; 0x30
   18ff8:	mov	r1, #0
   18ffc:	bl	11204 <memset@plt>
   19000:	cmp	r5, #10
   19004:	beq	191bc <__assert_fail@plt+0x7e8c>
   19008:	add	lr, sp, #80	; 0x50
   1900c:	str	r5, [sp, #80]	; 0x50
   19010:	ldm	lr!, {r0, r1, r2, r3}
   19014:	add	ip, sp, #32
   19018:	ldr	r6, [pc, #416]	; 191c0 <__assert_fail@plt+0x7e90>
   1901c:	stmia	ip!, {r0, r1, r2, r3}
   19020:	ldm	lr!, {r0, r1, r2, r3}
   19024:	stmia	ip!, {r0, r1, r2, r3}
   19028:	ldm	lr, {r0, r1, r2, r3}
   1902c:	stm	ip, {r0, r1, r2, r3}
   19030:	bl	111ec <__errno_location@plt>
   19034:	cmn	r4, #-2147483647	; 0x80000001
   19038:	ldr	r5, [r6]
   1903c:	mov	r7, r0
   19040:	movne	r0, #0
   19044:	moveq	r0, #1
   19048:	ldr	r3, [r7]
   1904c:	orrs	r0, r0, r4, lsr #31
   19050:	str	r3, [sp, #24]
   19054:	bne	191bc <__assert_fail@plt+0x7e8c>
   19058:	ldr	r2, [r6, #4]
   1905c:	cmp	r4, r2
   19060:	blt	190c0 <__assert_fail@plt+0x7d90>
   19064:	add	r8, r6, #8
   19068:	cmp	r5, r8
   1906c:	str	r2, [sp, #80]	; 0x50
   19070:	beq	1918c <__assert_fail@plt+0x7e5c>
   19074:	mov	r3, #8
   19078:	sub	r2, r4, r2
   1907c:	mov	r0, r5
   19080:	str	r3, [sp]
   19084:	add	r2, r2, #1
   19088:	add	r1, sp, #80	; 0x50
   1908c:	mvn	r3, #-2147483648	; 0x80000000
   19090:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19094:	mov	r5, r0
   19098:	str	r0, [r6]
   1909c:	ldr	r0, [r6, #4]
   190a0:	ldr	r2, [sp, #80]	; 0x50
   190a4:	mov	r1, #0
   190a8:	sub	r2, r2, r0
   190ac:	add	r0, r5, r0, lsl #3
   190b0:	lsl	r2, r2, #3
   190b4:	bl	11204 <memset@plt>
   190b8:	ldr	r3, [sp, #80]	; 0x50
   190bc:	str	r3, [r6, #4]
   190c0:	add	fp, r5, r4, lsl #3
   190c4:	ldr	r1, [sp, #36]	; 0x24
   190c8:	ldr	r8, [r5, r4, lsl #3]
   190cc:	ldr	r6, [fp, #4]
   190d0:	ldr	r2, [sp, #72]	; 0x48
   190d4:	ldr	r3, [sp, #32]
   190d8:	ldr	ip, [sp, #76]	; 0x4c
   190dc:	orr	r1, r1, #1
   190e0:	add	sl, sp, #40	; 0x28
   190e4:	str	r1, [sp, #28]
   190e8:	str	r1, [sp, #4]
   190ec:	str	r2, [sp, #12]
   190f0:	str	r3, [sp]
   190f4:	mov	r0, r6
   190f8:	mov	r1, r8
   190fc:	str	ip, [sp, #16]
   19100:	str	sl, [sp, #8]
   19104:	mvn	r3, #0
   19108:	mov	r2, r9
   1910c:	bl	17034 <__assert_fail@plt+0x5d04>
   19110:	cmp	r8, r0
   19114:	bhi	19178 <__assert_fail@plt+0x7e48>
   19118:	ldr	r3, [pc, #164]	; 191c4 <__assert_fail@plt+0x7e94>
   1911c:	add	r8, r0, #1
   19120:	cmp	r6, r3
   19124:	str	r8, [r5, r4, lsl #3]
   19128:	beq	19134 <__assert_fail@plt+0x7e04>
   1912c:	mov	r0, r6
   19130:	bl	12cdc <__assert_fail@plt+0x19ac>
   19134:	mov	r0, r8
   19138:	bl	1b99c <__assert_fail@plt+0xa66c>
   1913c:	ldr	lr, [sp, #76]	; 0x4c
   19140:	ldr	r3, [sp, #32]
   19144:	ldr	ip, [sp, #72]	; 0x48
   19148:	ldr	r4, [sp, #28]
   1914c:	mov	r2, r9
   19150:	mov	r1, r8
   19154:	str	r0, [fp, #4]
   19158:	str	r3, [sp]
   1915c:	str	sl, [sp, #8]
   19160:	str	r4, [sp, #4]
   19164:	str	lr, [sp, #16]
   19168:	str	ip, [sp, #12]
   1916c:	mvn	r3, #0
   19170:	mov	r6, r0
   19174:	bl	17034 <__assert_fail@plt+0x5d04>
   19178:	ldr	r3, [sp, #24]
   1917c:	mov	r0, r6
   19180:	str	r3, [r7]
   19184:	add	sp, sp, #132	; 0x84
   19188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1918c:	mov	r3, #8
   19190:	sub	r2, r4, r2
   19194:	add	r1, sp, #80	; 0x50
   19198:	str	r3, [sp]
   1919c:	add	r2, r2, #1
   191a0:	mvn	r3, #-2147483648	; 0x80000000
   191a4:	bl	1bbb8 <__assert_fail@plt+0xa888>
   191a8:	mov	r5, r0
   191ac:	ldm	r8, {r0, r1}
   191b0:	str	r5, [r6]
   191b4:	stm	r5, {r0, r1}
   191b8:	b	1909c <__assert_fail@plt+0x7d6c>
   191bc:	bl	112e8 <abort@plt>
   191c0:	andeq	r0, r3, ip, lsr r1
   191c4:	strdeq	r0, [r3], -r4
   191c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191cc:	sub	sp, sp, #132	; 0x84
   191d0:	mov	r5, r1
   191d4:	mov	r4, r0
   191d8:	mov	r9, r2
   191dc:	add	r0, sp, #80	; 0x50
   191e0:	mov	r2, #48	; 0x30
   191e4:	mov	r1, #0
   191e8:	mov	sl, r3
   191ec:	bl	11204 <memset@plt>
   191f0:	cmp	r5, #10
   191f4:	beq	193b0 <__assert_fail@plt+0x8080>
   191f8:	add	lr, sp, #80	; 0x50
   191fc:	str	r5, [sp, #80]	; 0x50
   19200:	ldm	lr!, {r0, r1, r2, r3}
   19204:	add	ip, sp, #32
   19208:	ldr	r6, [pc, #420]	; 193b4 <__assert_fail@plt+0x8084>
   1920c:	stmia	ip!, {r0, r1, r2, r3}
   19210:	ldm	lr!, {r0, r1, r2, r3}
   19214:	stmia	ip!, {r0, r1, r2, r3}
   19218:	ldm	lr, {r0, r1, r2, r3}
   1921c:	stm	ip, {r0, r1, r2, r3}
   19220:	bl	111ec <__errno_location@plt>
   19224:	cmn	r4, #-2147483647	; 0x80000001
   19228:	ldr	r5, [r6]
   1922c:	mov	r7, r0
   19230:	movne	r0, #0
   19234:	moveq	r0, #1
   19238:	ldr	r3, [r7]
   1923c:	orrs	r0, r0, r4, lsr #31
   19240:	str	r3, [sp, #24]
   19244:	bne	193b0 <__assert_fail@plt+0x8080>
   19248:	ldr	r2, [r6, #4]
   1924c:	cmp	r4, r2
   19250:	blt	192b0 <__assert_fail@plt+0x7f80>
   19254:	add	r8, r6, #8
   19258:	cmp	r5, r8
   1925c:	str	r2, [sp, #80]	; 0x50
   19260:	beq	19380 <__assert_fail@plt+0x8050>
   19264:	mov	r3, #8
   19268:	sub	r2, r4, r2
   1926c:	mov	r0, r5
   19270:	str	r3, [sp]
   19274:	add	r2, r2, #1
   19278:	add	r1, sp, #80	; 0x50
   1927c:	mvn	r3, #-2147483648	; 0x80000000
   19280:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19284:	mov	r5, r0
   19288:	str	r0, [r6]
   1928c:	ldr	r0, [r6, #4]
   19290:	ldr	r2, [sp, #80]	; 0x50
   19294:	mov	r1, #0
   19298:	sub	r2, r2, r0
   1929c:	add	r0, r5, r0, lsl #3
   192a0:	lsl	r2, r2, #3
   192a4:	bl	11204 <memset@plt>
   192a8:	ldr	r3, [sp, #80]	; 0x50
   192ac:	str	r3, [r6, #4]
   192b0:	add	fp, r5, r4, lsl #3
   192b4:	ldr	r3, [sp, #32]
   192b8:	ldr	r1, [sp, #36]	; 0x24
   192bc:	ldr	r8, [r5, r4, lsl #3]
   192c0:	ldr	r6, [fp, #4]
   192c4:	ldr	r2, [sp, #72]	; 0x48
   192c8:	ldr	ip, [sp, #76]	; 0x4c
   192cc:	orr	r1, r1, #1
   192d0:	str	r3, [sp]
   192d4:	add	r3, sp, #40	; 0x28
   192d8:	str	r1, [sp, #28]
   192dc:	str	r1, [sp, #4]
   192e0:	str	r2, [sp, #12]
   192e4:	str	r3, [sp, #8]
   192e8:	mov	r0, r6
   192ec:	mov	r1, r8
   192f0:	str	ip, [sp, #16]
   192f4:	mov	r3, sl
   192f8:	mov	r2, r9
   192fc:	bl	17034 <__assert_fail@plt+0x5d04>
   19300:	cmp	r8, r0
   19304:	bhi	1936c <__assert_fail@plt+0x803c>
   19308:	ldr	r3, [pc, #168]	; 193b8 <__assert_fail@plt+0x8088>
   1930c:	add	r8, r0, #1
   19310:	cmp	r6, r3
   19314:	str	r8, [r5, r4, lsl #3]
   19318:	beq	19324 <__assert_fail@plt+0x7ff4>
   1931c:	mov	r0, r6
   19320:	bl	12cdc <__assert_fail@plt+0x19ac>
   19324:	mov	r0, r8
   19328:	bl	1b99c <__assert_fail@plt+0xa66c>
   1932c:	add	lr, sp, #40	; 0x28
   19330:	ldr	ip, [sp, #76]	; 0x4c
   19334:	ldr	r4, [sp, #72]	; 0x48
   19338:	ldr	r5, [sp, #28]
   1933c:	mov	r3, sl
   19340:	mov	r2, r9
   19344:	mov	r1, r8
   19348:	str	r0, [fp, #4]
   1934c:	str	lr, [sp, #8]
   19350:	ldr	lr, [sp, #32]
   19354:	str	r5, [sp, #4]
   19358:	str	ip, [sp, #16]
   1935c:	str	r4, [sp, #12]
   19360:	str	lr, [sp]
   19364:	mov	r6, r0
   19368:	bl	17034 <__assert_fail@plt+0x5d04>
   1936c:	ldr	r3, [sp, #24]
   19370:	mov	r0, r6
   19374:	str	r3, [r7]
   19378:	add	sp, sp, #132	; 0x84
   1937c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19380:	mov	r3, #8
   19384:	sub	r2, r4, r2
   19388:	add	r1, sp, #80	; 0x50
   1938c:	str	r3, [sp]
   19390:	add	r2, r2, #1
   19394:	mvn	r3, #-2147483648	; 0x80000000
   19398:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1939c:	mov	r5, r0
   193a0:	ldm	r8, {r0, r1}
   193a4:	str	r5, [r6]
   193a8:	stm	r5, {r0, r1}
   193ac:	b	1928c <__assert_fail@plt+0x7f5c>
   193b0:	bl	112e8 <abort@plt>
   193b4:	andeq	r0, r3, ip, lsr r1
   193b8:	strdeq	r0, [r3], -r4
   193bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193c0:	sub	sp, sp, #124	; 0x7c
   193c4:	mov	r4, r0
   193c8:	mov	r9, r1
   193cc:	add	r0, sp, #72	; 0x48
   193d0:	mov	r2, #48	; 0x30
   193d4:	mov	r1, #0
   193d8:	bl	11204 <memset@plt>
   193dc:	cmp	r4, #10
   193e0:	beq	1956c <__assert_fail@plt+0x823c>
   193e4:	add	lr, sp, #72	; 0x48
   193e8:	str	r4, [sp, #72]	; 0x48
   193ec:	ldm	lr!, {r0, r1, r2, r3}
   193f0:	add	ip, sp, #24
   193f4:	ldr	r5, [pc, #372]	; 19570 <__assert_fail@plt+0x8240>
   193f8:	stmia	ip!, {r0, r1, r2, r3}
   193fc:	ldm	lr!, {r0, r1, r2, r3}
   19400:	stmia	ip!, {r0, r1, r2, r3}
   19404:	ldm	lr, {r0, r1, r2, r3}
   19408:	stm	ip, {r0, r1, r2, r3}
   1940c:	bl	111ec <__errno_location@plt>
   19410:	ldr	r2, [r5, #4]
   19414:	ldr	r4, [r5]
   19418:	cmp	r2, #0
   1941c:	mov	r7, r0
   19420:	ldr	fp, [r0]
   19424:	bgt	19480 <__assert_fail@plt+0x8150>
   19428:	add	r6, r5, #8
   1942c:	cmp	r4, r6
   19430:	str	r2, [sp, #72]	; 0x48
   19434:	beq	1953c <__assert_fail@plt+0x820c>
   19438:	mov	r3, #8
   1943c:	mov	r0, r4
   19440:	str	r3, [sp]
   19444:	rsb	r2, r2, #1
   19448:	add	r1, sp, #72	; 0x48
   1944c:	mvn	r3, #-2147483648	; 0x80000000
   19450:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19454:	mov	r4, r0
   19458:	str	r0, [r5]
   1945c:	ldr	r0, [r5, #4]
   19460:	ldr	r2, [sp, #72]	; 0x48
   19464:	mov	r1, #0
   19468:	sub	r2, r2, r0
   1946c:	add	r0, r4, r0, lsl #3
   19470:	lsl	r2, r2, #3
   19474:	bl	11204 <memset@plt>
   19478:	ldr	r3, [sp, #72]	; 0x48
   1947c:	str	r3, [r5, #4]
   19480:	ldr	r6, [sp, #28]
   19484:	ldr	r8, [r4]
   19488:	ldr	r5, [r4, #4]
   1948c:	ldr	r2, [sp, #64]	; 0x40
   19490:	ldr	r3, [sp, #24]
   19494:	ldr	ip, [sp, #68]	; 0x44
   19498:	orr	r6, r6, #1
   1949c:	add	sl, sp, #32
   194a0:	str	r2, [sp, #12]
   194a4:	str	r3, [sp]
   194a8:	str	r6, [sp, #4]
   194ac:	mov	r1, r8
   194b0:	mov	r0, r5
   194b4:	str	ip, [sp, #16]
   194b8:	str	sl, [sp, #8]
   194bc:	mvn	r3, #0
   194c0:	mov	r2, r9
   194c4:	bl	17034 <__assert_fail@plt+0x5d04>
   194c8:	cmp	r8, r0
   194cc:	bhi	1952c <__assert_fail@plt+0x81fc>
   194d0:	ldr	r3, [pc, #156]	; 19574 <__assert_fail@plt+0x8244>
   194d4:	add	r8, r0, #1
   194d8:	cmp	r5, r3
   194dc:	str	r8, [r4]
   194e0:	beq	194ec <__assert_fail@plt+0x81bc>
   194e4:	mov	r0, r5
   194e8:	bl	12cdc <__assert_fail@plt+0x19ac>
   194ec:	mov	r0, r8
   194f0:	bl	1b99c <__assert_fail@plt+0xa66c>
   194f4:	ldr	lr, [sp, #68]	; 0x44
   194f8:	ldr	r3, [sp, #24]
   194fc:	ldr	ip, [sp, #64]	; 0x40
   19500:	mov	r2, r9
   19504:	mov	r1, r8
   19508:	str	r0, [r4, #4]
   1950c:	str	r3, [sp]
   19510:	str	sl, [sp, #8]
   19514:	str	r6, [sp, #4]
   19518:	str	lr, [sp, #16]
   1951c:	str	ip, [sp, #12]
   19520:	mvn	r3, #0
   19524:	mov	r5, r0
   19528:	bl	17034 <__assert_fail@plt+0x5d04>
   1952c:	mov	r0, r5
   19530:	str	fp, [r7]
   19534:	add	sp, sp, #124	; 0x7c
   19538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1953c:	mov	r3, #8
   19540:	add	r1, sp, #72	; 0x48
   19544:	str	r3, [sp]
   19548:	rsb	r2, r2, #1
   1954c:	mvn	r3, #-2147483648	; 0x80000000
   19550:	mov	r0, #0
   19554:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19558:	mov	r4, r0
   1955c:	ldm	r6, {r0, r1}
   19560:	str	r4, [r5]
   19564:	stm	r4, {r0, r1}
   19568:	b	1945c <__assert_fail@plt+0x812c>
   1956c:	bl	112e8 <abort@plt>
   19570:	andeq	r0, r3, ip, lsr r1
   19574:	strdeq	r0, [r3], -r4
   19578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1957c:	sub	sp, sp, #132	; 0x84
   19580:	mov	r4, r0
   19584:	mov	r9, r1
   19588:	mov	sl, r2
   1958c:	add	r0, sp, #80	; 0x50
   19590:	mov	r2, #48	; 0x30
   19594:	mov	r1, #0
   19598:	bl	11204 <memset@plt>
   1959c:	cmp	r4, #10
   195a0:	beq	19734 <__assert_fail@plt+0x8404>
   195a4:	add	lr, sp, #80	; 0x50
   195a8:	str	r4, [sp, #80]	; 0x50
   195ac:	ldm	lr!, {r0, r1, r2, r3}
   195b0:	add	ip, sp, #32
   195b4:	ldr	r5, [pc, #380]	; 19738 <__assert_fail@plt+0x8408>
   195b8:	stmia	ip!, {r0, r1, r2, r3}
   195bc:	ldm	lr!, {r0, r1, r2, r3}
   195c0:	stmia	ip!, {r0, r1, r2, r3}
   195c4:	ldm	lr, {r0, r1, r2, r3}
   195c8:	stm	ip, {r0, r1, r2, r3}
   195cc:	bl	111ec <__errno_location@plt>
   195d0:	ldr	r2, [r5, #4]
   195d4:	ldr	r4, [r5]
   195d8:	cmp	r2, #0
   195dc:	ldr	r3, [r0]
   195e0:	mov	r7, r0
   195e4:	str	r3, [sp, #28]
   195e8:	bgt	19644 <__assert_fail@plt+0x8314>
   195ec:	add	r6, r5, #8
   195f0:	cmp	r4, r6
   195f4:	str	r2, [sp, #80]	; 0x50
   195f8:	beq	19704 <__assert_fail@plt+0x83d4>
   195fc:	mov	r3, #8
   19600:	mov	r0, r4
   19604:	str	r3, [sp]
   19608:	rsb	r2, r2, #1
   1960c:	add	r1, sp, #80	; 0x50
   19610:	mvn	r3, #-2147483648	; 0x80000000
   19614:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19618:	mov	r4, r0
   1961c:	str	r0, [r5]
   19620:	ldr	r0, [r5, #4]
   19624:	ldr	r2, [sp, #80]	; 0x50
   19628:	mov	r1, #0
   1962c:	sub	r2, r2, r0
   19630:	add	r0, r4, r0, lsl #3
   19634:	lsl	r2, r2, #3
   19638:	bl	11204 <memset@plt>
   1963c:	ldr	r3, [sp, #80]	; 0x50
   19640:	str	r3, [r5, #4]
   19644:	ldr	r6, [sp, #36]	; 0x24
   19648:	ldr	r8, [r4]
   1964c:	ldr	r5, [r4, #4]
   19650:	ldr	r2, [sp, #72]	; 0x48
   19654:	ldr	r3, [sp, #32]
   19658:	ldr	ip, [sp, #76]	; 0x4c
   1965c:	orr	r6, r6, #1
   19660:	add	fp, sp, #40	; 0x28
   19664:	str	r2, [sp, #12]
   19668:	str	r3, [sp]
   1966c:	str	r6, [sp, #4]
   19670:	mov	r1, r8
   19674:	mov	r0, r5
   19678:	str	ip, [sp, #16]
   1967c:	str	fp, [sp, #8]
   19680:	mov	r3, sl
   19684:	mov	r2, r9
   19688:	bl	17034 <__assert_fail@plt+0x5d04>
   1968c:	cmp	r8, r0
   19690:	bhi	196f0 <__assert_fail@plt+0x83c0>
   19694:	ldr	r3, [pc, #160]	; 1973c <__assert_fail@plt+0x840c>
   19698:	add	r8, r0, #1
   1969c:	cmp	r5, r3
   196a0:	str	r8, [r4]
   196a4:	beq	196b0 <__assert_fail@plt+0x8380>
   196a8:	mov	r0, r5
   196ac:	bl	12cdc <__assert_fail@plt+0x19ac>
   196b0:	mov	r0, r8
   196b4:	bl	1b99c <__assert_fail@plt+0xa66c>
   196b8:	ldr	ip, [sp, #76]	; 0x4c
   196bc:	ldr	lr, [sp, #32]
   196c0:	mov	r3, sl
   196c4:	mov	r2, r9
   196c8:	mov	r1, r8
   196cc:	str	r0, [r4, #4]
   196d0:	ldr	r4, [sp, #72]	; 0x48
   196d4:	str	fp, [sp, #8]
   196d8:	str	r6, [sp, #4]
   196dc:	str	ip, [sp, #16]
   196e0:	str	r4, [sp, #12]
   196e4:	str	lr, [sp]
   196e8:	mov	r5, r0
   196ec:	bl	17034 <__assert_fail@plt+0x5d04>
   196f0:	ldr	r3, [sp, #28]
   196f4:	mov	r0, r5
   196f8:	str	r3, [r7]
   196fc:	add	sp, sp, #132	; 0x84
   19700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19704:	mov	r3, #8
   19708:	add	r1, sp, #80	; 0x50
   1970c:	str	r3, [sp]
   19710:	rsb	r2, r2, #1
   19714:	mvn	r3, #-2147483648	; 0x80000000
   19718:	mov	r0, #0
   1971c:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19720:	mov	r4, r0
   19724:	ldm	r6, {r0, r1}
   19728:	str	r4, [r5]
   1972c:	stm	r4, {r0, r1}
   19730:	b	19620 <__assert_fail@plt+0x82f0>
   19734:	bl	112e8 <abort@plt>
   19738:	andeq	r0, r3, ip, lsr r1
   1973c:	strdeq	r0, [r3], -r4
   19740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19744:	mov	r4, r2
   19748:	ldr	lr, [pc, #432]	; 19900 <__assert_fail@plt+0x85d0>
   1974c:	mov	sl, r0
   19750:	mov	fp, r1
   19754:	ldm	lr!, {r0, r1, r2, r3}
   19758:	sub	sp, sp, #92	; 0x5c
   1975c:	add	ip, sp, #40	; 0x28
   19760:	lsr	r7, r4, #5
   19764:	stmia	ip!, {r0, r1, r2, r3}
   19768:	add	r6, sp, #48	; 0x30
   1976c:	ldm	lr!, {r0, r1, r2, r3}
   19770:	and	r4, r4, #31
   19774:	ldr	r5, [pc, #392]	; 19904 <__assert_fail@plt+0x85d4>
   19778:	stmia	ip!, {r0, r1, r2, r3}
   1977c:	ldm	lr, {r0, r1, r2, r3}
   19780:	stm	ip, {r0, r1, r2, r3}
   19784:	ldr	r2, [r6, r7, lsl #2]
   19788:	lsr	r3, r2, r4
   1978c:	eor	r3, r3, #1
   19790:	and	r3, r3, #1
   19794:	eor	r4, r2, r3, lsl r4
   19798:	str	r4, [r6, r7, lsl #2]
   1979c:	bl	111ec <__errno_location@plt>
   197a0:	ldr	r2, [r5, #4]
   197a4:	ldr	r4, [r5]
   197a8:	cmp	r2, #0
   197ac:	ldr	r3, [r0]
   197b0:	mov	r8, r0
   197b4:	str	r3, [sp, #28]
   197b8:	bgt	19814 <__assert_fail@plt+0x84e4>
   197bc:	add	r7, r5, #8
   197c0:	cmp	r4, r7
   197c4:	str	r2, [sp, #36]	; 0x24
   197c8:	beq	198d0 <__assert_fail@plt+0x85a0>
   197cc:	mov	r3, #8
   197d0:	mov	r0, r4
   197d4:	str	r3, [sp]
   197d8:	rsb	r2, r2, #1
   197dc:	mvn	r3, #-2147483648	; 0x80000000
   197e0:	add	r1, sp, #36	; 0x24
   197e4:	bl	1bbb8 <__assert_fail@plt+0xa888>
   197e8:	mov	r4, r0
   197ec:	str	r0, [r5]
   197f0:	ldr	r0, [r5, #4]
   197f4:	ldr	r2, [sp, #36]	; 0x24
   197f8:	mov	r1, #0
   197fc:	sub	r2, r2, r0
   19800:	add	r0, r4, r0, lsl #3
   19804:	lsl	r2, r2, #3
   19808:	bl	11204 <memset@plt>
   1980c:	ldr	r3, [sp, #36]	; 0x24
   19810:	str	r3, [r5, #4]
   19814:	ldr	r7, [sp, #44]	; 0x2c
   19818:	ldr	r9, [r4]
   1981c:	ldr	r5, [r4, #4]
   19820:	ldr	r2, [sp, #80]	; 0x50
   19824:	ldr	r3, [sp, #40]	; 0x28
   19828:	ldr	ip, [sp, #84]	; 0x54
   1982c:	orr	r7, r7, #1
   19830:	str	r2, [sp, #12]
   19834:	str	r3, [sp]
   19838:	str	r7, [sp, #4]
   1983c:	str	r6, [sp, #8]
   19840:	mov	r1, r9
   19844:	mov	r0, r5
   19848:	str	ip, [sp, #16]
   1984c:	mov	r3, fp
   19850:	mov	r2, sl
   19854:	bl	17034 <__assert_fail@plt+0x5d04>
   19858:	cmp	r9, r0
   1985c:	bhi	198bc <__assert_fail@plt+0x858c>
   19860:	ldr	r3, [pc, #160]	; 19908 <__assert_fail@plt+0x85d8>
   19864:	add	r9, r0, #1
   19868:	cmp	r5, r3
   1986c:	str	r9, [r4]
   19870:	beq	1987c <__assert_fail@plt+0x854c>
   19874:	mov	r0, r5
   19878:	bl	12cdc <__assert_fail@plt+0x19ac>
   1987c:	mov	r0, r9
   19880:	bl	1b99c <__assert_fail@plt+0xa66c>
   19884:	ldr	ip, [sp, #84]	; 0x54
   19888:	ldr	lr, [sp, #40]	; 0x28
   1988c:	mov	r3, fp
   19890:	mov	r2, sl
   19894:	mov	r1, r9
   19898:	str	r0, [r4, #4]
   1989c:	ldr	r4, [sp, #80]	; 0x50
   198a0:	str	r6, [sp, #8]
   198a4:	str	r7, [sp, #4]
   198a8:	str	ip, [sp, #16]
   198ac:	str	r4, [sp, #12]
   198b0:	str	lr, [sp]
   198b4:	mov	r5, r0
   198b8:	bl	17034 <__assert_fail@plt+0x5d04>
   198bc:	ldr	r3, [sp, #28]
   198c0:	mov	r0, r5
   198c4:	str	r3, [r8]
   198c8:	add	sp, sp, #92	; 0x5c
   198cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198d0:	mov	r3, #8
   198d4:	str	r3, [sp]
   198d8:	add	r1, sp, #36	; 0x24
   198dc:	rsb	r2, r2, #1
   198e0:	mvn	r3, #-2147483648	; 0x80000000
   198e4:	mov	r0, #0
   198e8:	bl	1bbb8 <__assert_fail@plt+0xa888>
   198ec:	mov	r4, r0
   198f0:	ldm	r7, {r0, r1}
   198f4:	str	r4, [r5]
   198f8:	stm	r4, {r0, r1}
   198fc:	b	197f0 <__assert_fail@plt+0x84c0>
   19900:	andeq	r0, r3, r4, asr #3
   19904:	andeq	r0, r3, ip, lsr r1
   19908:	strdeq	r0, [r3], -r4
   1990c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19910:	mov	r4, r1
   19914:	ldr	lr, [pc, #420]	; 19ac0 <__assert_fail@plt+0x8790>
   19918:	mov	r6, r0
   1991c:	sub	sp, sp, #84	; 0x54
   19920:	ldm	lr!, {r0, r1, r2, r3}
   19924:	add	ip, sp, #32
   19928:	lsr	r8, r4, #5
   1992c:	add	r5, sp, #40	; 0x28
   19930:	stmia	ip!, {r0, r1, r2, r3}
   19934:	and	r4, r4, #31
   19938:	ldm	lr!, {r0, r1, r2, r3}
   1993c:	ldr	r7, [pc, #384]	; 19ac4 <__assert_fail@plt+0x8794>
   19940:	stmia	ip!, {r0, r1, r2, r3}
   19944:	ldm	lr, {r0, r1, r2, r3}
   19948:	stm	ip, {r0, r1, r2, r3}
   1994c:	ldr	r2, [r5, r8, lsl #2]
   19950:	lsr	r3, r2, r4
   19954:	eor	r3, r3, #1
   19958:	and	r3, r3, #1
   1995c:	eor	r4, r2, r3, lsl r4
   19960:	str	r4, [r5, r8, lsl #2]
   19964:	bl	111ec <__errno_location@plt>
   19968:	ldr	r2, [r7, #4]
   1996c:	ldr	r4, [r7]
   19970:	cmp	r2, #0
   19974:	mov	r9, r0
   19978:	ldr	sl, [r0]
   1997c:	bgt	199d8 <__assert_fail@plt+0x86a8>
   19980:	add	r8, r7, #8
   19984:	cmp	r4, r8
   19988:	str	r2, [sp, #28]
   1998c:	beq	19a90 <__assert_fail@plt+0x8760>
   19990:	mov	r3, #8
   19994:	mov	r0, r4
   19998:	str	r3, [sp]
   1999c:	rsb	r2, r2, #1
   199a0:	mvn	r3, #-2147483648	; 0x80000000
   199a4:	add	r1, sp, #28
   199a8:	bl	1bbb8 <__assert_fail@plt+0xa888>
   199ac:	mov	r4, r0
   199b0:	str	r0, [r7]
   199b4:	ldr	r0, [r7, #4]
   199b8:	ldr	r2, [sp, #28]
   199bc:	mov	r1, #0
   199c0:	sub	r2, r2, r0
   199c4:	add	r0, r4, r0, lsl #3
   199c8:	lsl	r2, r2, #3
   199cc:	bl	11204 <memset@plt>
   199d0:	ldr	r3, [sp, #28]
   199d4:	str	r3, [r7, #4]
   199d8:	ldr	r8, [sp, #36]	; 0x24
   199dc:	ldr	fp, [r4]
   199e0:	ldr	r7, [r4, #4]
   199e4:	ldr	r2, [sp, #72]	; 0x48
   199e8:	ldr	r3, [sp, #32]
   199ec:	ldr	ip, [sp, #76]	; 0x4c
   199f0:	orr	r8, r8, #1
   199f4:	str	r2, [sp, #12]
   199f8:	str	r3, [sp]
   199fc:	str	r8, [sp, #4]
   19a00:	str	r5, [sp, #8]
   19a04:	mov	r1, fp
   19a08:	mov	r0, r7
   19a0c:	str	ip, [sp, #16]
   19a10:	mvn	r3, #0
   19a14:	mov	r2, r6
   19a18:	bl	17034 <__assert_fail@plt+0x5d04>
   19a1c:	cmp	fp, r0
   19a20:	bhi	19a80 <__assert_fail@plt+0x8750>
   19a24:	ldr	r3, [pc, #156]	; 19ac8 <__assert_fail@plt+0x8798>
   19a28:	add	fp, r0, #1
   19a2c:	cmp	r7, r3
   19a30:	str	fp, [r4]
   19a34:	beq	19a40 <__assert_fail@plt+0x8710>
   19a38:	mov	r0, r7
   19a3c:	bl	12cdc <__assert_fail@plt+0x19ac>
   19a40:	mov	r0, fp
   19a44:	bl	1b99c <__assert_fail@plt+0xa66c>
   19a48:	ldr	lr, [sp, #76]	; 0x4c
   19a4c:	ldr	r3, [sp, #32]
   19a50:	ldr	ip, [sp, #72]	; 0x48
   19a54:	mov	r2, r6
   19a58:	mov	r1, fp
   19a5c:	str	r0, [r4, #4]
   19a60:	str	r3, [sp]
   19a64:	str	r5, [sp, #8]
   19a68:	str	r8, [sp, #4]
   19a6c:	str	lr, [sp, #16]
   19a70:	str	ip, [sp, #12]
   19a74:	mvn	r3, #0
   19a78:	mov	r7, r0
   19a7c:	bl	17034 <__assert_fail@plt+0x5d04>
   19a80:	mov	r0, r7
   19a84:	str	sl, [r9]
   19a88:	add	sp, sp, #84	; 0x54
   19a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a90:	mov	r3, #8
   19a94:	str	r3, [sp]
   19a98:	add	r1, sp, #28
   19a9c:	rsb	r2, r2, #1
   19aa0:	mvn	r3, #-2147483648	; 0x80000000
   19aa4:	mov	r0, #0
   19aa8:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19aac:	mov	r4, r0
   19ab0:	ldm	r8, {r0, r1}
   19ab4:	str	r4, [r7]
   19ab8:	stm	r4, {r0, r1}
   19abc:	b	199b4 <__assert_fail@plt+0x8684>
   19ac0:	andeq	r0, r3, r4, asr #3
   19ac4:	andeq	r0, r3, ip, lsr r1
   19ac8:	strdeq	r0, [r3], -r4
   19acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ad0:	mov	r6, r0
   19ad4:	ldr	lr, [pc, #404]	; 19c70 <__assert_fail@plt+0x8940>
   19ad8:	sub	sp, sp, #84	; 0x54
   19adc:	add	ip, sp, #32
   19ae0:	ldm	lr!, {r0, r1, r2, r3}
   19ae4:	ldr	r5, [pc, #392]	; 19c74 <__assert_fail@plt+0x8944>
   19ae8:	stmia	ip!, {r0, r1, r2, r3}
   19aec:	ldm	lr!, {r0, r1, r2, r3}
   19af0:	ldr	r4, [sp, #44]	; 0x2c
   19af4:	stmia	ip!, {r0, r1, r2, r3}
   19af8:	ldm	lr, {r0, r1, r2, r3}
   19afc:	mvn	lr, r4
   19b00:	and	lr, lr, #67108864	; 0x4000000
   19b04:	eor	lr, lr, r4
   19b08:	stm	ip, {r0, r1, r2, r3}
   19b0c:	str	lr, [sp, #44]	; 0x2c
   19b10:	bl	111ec <__errno_location@plt>
   19b14:	ldr	r2, [r5, #4]
   19b18:	ldr	r4, [r5]
   19b1c:	cmp	r2, #0
   19b20:	mov	r8, r0
   19b24:	ldr	sl, [r0]
   19b28:	bgt	19b84 <__assert_fail@plt+0x8854>
   19b2c:	add	r7, r5, #8
   19b30:	cmp	r4, r7
   19b34:	str	r2, [sp, #28]
   19b38:	beq	19c40 <__assert_fail@plt+0x8910>
   19b3c:	mov	r3, #8
   19b40:	mov	r0, r4
   19b44:	str	r3, [sp]
   19b48:	rsb	r2, r2, #1
   19b4c:	mvn	r3, #-2147483648	; 0x80000000
   19b50:	add	r1, sp, #28
   19b54:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19b58:	mov	r4, r0
   19b5c:	str	r0, [r5]
   19b60:	ldr	r0, [r5, #4]
   19b64:	ldr	r2, [sp, #28]
   19b68:	mov	r1, #0
   19b6c:	sub	r2, r2, r0
   19b70:	add	r0, r4, r0, lsl #3
   19b74:	lsl	r2, r2, #3
   19b78:	bl	11204 <memset@plt>
   19b7c:	ldr	r3, [sp, #28]
   19b80:	str	r3, [r5, #4]
   19b84:	ldr	r7, [sp, #36]	; 0x24
   19b88:	ldr	r9, [r4]
   19b8c:	ldr	r5, [r4, #4]
   19b90:	ldr	r2, [sp, #72]	; 0x48
   19b94:	ldr	r3, [sp, #32]
   19b98:	ldr	ip, [sp, #76]	; 0x4c
   19b9c:	orr	r7, r7, #1
   19ba0:	add	fp, sp, #40	; 0x28
   19ba4:	str	r2, [sp, #12]
   19ba8:	str	r3, [sp]
   19bac:	str	r7, [sp, #4]
   19bb0:	mov	r1, r9
   19bb4:	mov	r0, r5
   19bb8:	str	ip, [sp, #16]
   19bbc:	str	fp, [sp, #8]
   19bc0:	mvn	r3, #0
   19bc4:	mov	r2, r6
   19bc8:	bl	17034 <__assert_fail@plt+0x5d04>
   19bcc:	cmp	r9, r0
   19bd0:	bhi	19c30 <__assert_fail@plt+0x8900>
   19bd4:	ldr	r3, [pc, #156]	; 19c78 <__assert_fail@plt+0x8948>
   19bd8:	add	r9, r0, #1
   19bdc:	cmp	r5, r3
   19be0:	str	r9, [r4]
   19be4:	beq	19bf0 <__assert_fail@plt+0x88c0>
   19be8:	mov	r0, r5
   19bec:	bl	12cdc <__assert_fail@plt+0x19ac>
   19bf0:	mov	r0, r9
   19bf4:	bl	1b99c <__assert_fail@plt+0xa66c>
   19bf8:	ldr	lr, [sp, #76]	; 0x4c
   19bfc:	ldr	r3, [sp, #32]
   19c00:	ldr	ip, [sp, #72]	; 0x48
   19c04:	mov	r2, r6
   19c08:	mov	r1, r9
   19c0c:	str	r0, [r4, #4]
   19c10:	str	r3, [sp]
   19c14:	str	fp, [sp, #8]
   19c18:	str	r7, [sp, #4]
   19c1c:	str	lr, [sp, #16]
   19c20:	str	ip, [sp, #12]
   19c24:	mvn	r3, #0
   19c28:	mov	r5, r0
   19c2c:	bl	17034 <__assert_fail@plt+0x5d04>
   19c30:	mov	r0, r5
   19c34:	str	sl, [r8]
   19c38:	add	sp, sp, #84	; 0x54
   19c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c40:	mov	r3, #8
   19c44:	str	r3, [sp]
   19c48:	add	r1, sp, #28
   19c4c:	rsb	r2, r2, #1
   19c50:	mvn	r3, #-2147483648	; 0x80000000
   19c54:	mov	r0, #0
   19c58:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19c5c:	mov	r4, r0
   19c60:	ldm	r7, {r0, r1}
   19c64:	str	r4, [r5]
   19c68:	stm	r4, {r0, r1}
   19c6c:	b	19b60 <__assert_fail@plt+0x8830>
   19c70:	andeq	r0, r3, r4, asr #3
   19c74:	andeq	r0, r3, ip, lsr r1
   19c78:	strdeq	r0, [r3], -r4
   19c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c80:	mov	r9, r0
   19c84:	ldr	lr, [pc, #416]	; 19e2c <__assert_fail@plt+0x8afc>
   19c88:	mov	sl, r1
   19c8c:	sub	sp, sp, #92	; 0x5c
   19c90:	ldm	lr!, {r0, r1, r2, r3}
   19c94:	add	ip, sp, #40	; 0x28
   19c98:	ldr	r5, [pc, #400]	; 19e30 <__assert_fail@plt+0x8b00>
   19c9c:	stmia	ip!, {r0, r1, r2, r3}
   19ca0:	ldm	lr!, {r0, r1, r2, r3}
   19ca4:	ldr	r4, [sp, #52]	; 0x34
   19ca8:	stmia	ip!, {r0, r1, r2, r3}
   19cac:	ldm	lr, {r0, r1, r2, r3}
   19cb0:	mvn	lr, r4
   19cb4:	and	lr, lr, #67108864	; 0x4000000
   19cb8:	eor	lr, lr, r4
   19cbc:	stm	ip, {r0, r1, r2, r3}
   19cc0:	str	lr, [sp, #52]	; 0x34
   19cc4:	bl	111ec <__errno_location@plt>
   19cc8:	ldr	r2, [r5, #4]
   19ccc:	ldr	r4, [r5]
   19cd0:	cmp	r2, #0
   19cd4:	ldr	r3, [r0]
   19cd8:	mov	r7, r0
   19cdc:	str	r3, [sp, #28]
   19ce0:	bgt	19d3c <__assert_fail@plt+0x8a0c>
   19ce4:	add	r6, r5, #8
   19ce8:	cmp	r4, r6
   19cec:	str	r2, [sp, #36]	; 0x24
   19cf0:	beq	19dfc <__assert_fail@plt+0x8acc>
   19cf4:	mov	r3, #8
   19cf8:	mov	r0, r4
   19cfc:	str	r3, [sp]
   19d00:	rsb	r2, r2, #1
   19d04:	mvn	r3, #-2147483648	; 0x80000000
   19d08:	add	r1, sp, #36	; 0x24
   19d0c:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19d10:	mov	r4, r0
   19d14:	str	r0, [r5]
   19d18:	ldr	r0, [r5, #4]
   19d1c:	ldr	r2, [sp, #36]	; 0x24
   19d20:	mov	r1, #0
   19d24:	sub	r2, r2, r0
   19d28:	add	r0, r4, r0, lsl #3
   19d2c:	lsl	r2, r2, #3
   19d30:	bl	11204 <memset@plt>
   19d34:	ldr	r3, [sp, #36]	; 0x24
   19d38:	str	r3, [r5, #4]
   19d3c:	ldr	r6, [sp, #44]	; 0x2c
   19d40:	ldr	r8, [r4]
   19d44:	ldr	r5, [r4, #4]
   19d48:	ldr	r2, [sp, #80]	; 0x50
   19d4c:	ldr	r3, [sp, #40]	; 0x28
   19d50:	ldr	ip, [sp, #84]	; 0x54
   19d54:	orr	r6, r6, #1
   19d58:	add	fp, sp, #48	; 0x30
   19d5c:	str	r2, [sp, #12]
   19d60:	str	r3, [sp]
   19d64:	str	r6, [sp, #4]
   19d68:	mov	r1, r8
   19d6c:	mov	r0, r5
   19d70:	str	ip, [sp, #16]
   19d74:	str	fp, [sp, #8]
   19d78:	mov	r3, sl
   19d7c:	mov	r2, r9
   19d80:	bl	17034 <__assert_fail@plt+0x5d04>
   19d84:	cmp	r8, r0
   19d88:	bhi	19de8 <__assert_fail@plt+0x8ab8>
   19d8c:	ldr	r3, [pc, #160]	; 19e34 <__assert_fail@plt+0x8b04>
   19d90:	add	r8, r0, #1
   19d94:	cmp	r5, r3
   19d98:	str	r8, [r4]
   19d9c:	beq	19da8 <__assert_fail@plt+0x8a78>
   19da0:	mov	r0, r5
   19da4:	bl	12cdc <__assert_fail@plt+0x19ac>
   19da8:	mov	r0, r8
   19dac:	bl	1b99c <__assert_fail@plt+0xa66c>
   19db0:	ldr	ip, [sp, #84]	; 0x54
   19db4:	ldr	lr, [sp, #40]	; 0x28
   19db8:	mov	r3, sl
   19dbc:	mov	r2, r9
   19dc0:	mov	r1, r8
   19dc4:	str	r0, [r4, #4]
   19dc8:	ldr	r4, [sp, #80]	; 0x50
   19dcc:	str	fp, [sp, #8]
   19dd0:	str	r6, [sp, #4]
   19dd4:	str	ip, [sp, #16]
   19dd8:	str	r4, [sp, #12]
   19ddc:	str	lr, [sp]
   19de0:	mov	r5, r0
   19de4:	bl	17034 <__assert_fail@plt+0x5d04>
   19de8:	ldr	r3, [sp, #28]
   19dec:	mov	r0, r5
   19df0:	str	r3, [r7]
   19df4:	add	sp, sp, #92	; 0x5c
   19df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dfc:	mov	r3, #8
   19e00:	str	r3, [sp]
   19e04:	add	r1, sp, #36	; 0x24
   19e08:	rsb	r2, r2, #1
   19e0c:	mvn	r3, #-2147483648	; 0x80000000
   19e10:	mov	r0, #0
   19e14:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19e18:	mov	r4, r0
   19e1c:	ldm	r6, {r0, r1}
   19e20:	str	r4, [r5]
   19e24:	stm	r4, {r0, r1}
   19e28:	b	19d18 <__assert_fail@plt+0x89e8>
   19e2c:	andeq	r0, r3, r4, asr #3
   19e30:	andeq	r0, r3, ip, lsr r1
   19e34:	strdeq	r0, [r3], -r4
   19e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e3c:	sub	sp, sp, #180	; 0xb4
   19e40:	mov	r6, r1
   19e44:	mov	r4, r0
   19e48:	mov	r9, r2
   19e4c:	add	r0, sp, #80	; 0x50
   19e50:	mov	r2, #48	; 0x30
   19e54:	mov	r1, #0
   19e58:	bl	11204 <memset@plt>
   19e5c:	cmp	r6, #10
   19e60:	beq	1a040 <__assert_fail@plt+0x8d10>
   19e64:	add	r5, sp, #80	; 0x50
   19e68:	str	r6, [sp, #80]	; 0x50
   19e6c:	ldm	r5!, {r0, r1, r2, r3}
   19e70:	add	ip, sp, #128	; 0x80
   19e74:	mov	r7, ip
   19e78:	add	lr, sp, #32
   19e7c:	stmia	ip!, {r0, r1, r2, r3}
   19e80:	mov	r8, #67108864	; 0x4000000
   19e84:	ldm	r5!, {r0, r1, r2, r3}
   19e88:	ldr	r6, [pc, #436]	; 1a044 <__assert_fail@plt+0x8d14>
   19e8c:	stmia	ip!, {r0, r1, r2, r3}
   19e90:	ldm	r5, {r0, r1, r2, r3}
   19e94:	stm	ip, {r0, r1, r2, r3}
   19e98:	ldm	r7!, {r0, r1, r2, r3}
   19e9c:	stmia	lr!, {r0, r1, r2, r3}
   19ea0:	ldm	r7!, {r0, r1, r2, r3}
   19ea4:	str	r8, [sp, #44]	; 0x2c
   19ea8:	stmia	lr!, {r0, r1, r2, r3}
   19eac:	ldm	ip, {r0, r1, r2, r3}
   19eb0:	stm	lr, {r0, r1, r2, r3}
   19eb4:	bl	111ec <__errno_location@plt>
   19eb8:	cmn	r4, #-2147483647	; 0x80000001
   19ebc:	ldr	r5, [r6]
   19ec0:	mov	r7, r0
   19ec4:	movne	r0, #0
   19ec8:	moveq	r0, #1
   19ecc:	ldr	r3, [r7]
   19ed0:	orrs	r0, r0, r4, lsr #31
   19ed4:	str	r3, [sp, #24]
   19ed8:	bne	1a040 <__assert_fail@plt+0x8d10>
   19edc:	ldr	r2, [r6, #4]
   19ee0:	cmp	r4, r2
   19ee4:	blt	19f44 <__assert_fail@plt+0x8c14>
   19ee8:	add	r8, r6, #8
   19eec:	cmp	r5, r8
   19ef0:	str	r2, [sp, #80]	; 0x50
   19ef4:	beq	1a010 <__assert_fail@plt+0x8ce0>
   19ef8:	mov	r3, #8
   19efc:	sub	r2, r4, r2
   19f00:	mov	r0, r5
   19f04:	str	r3, [sp]
   19f08:	add	r2, r2, #1
   19f0c:	add	r1, sp, #80	; 0x50
   19f10:	mvn	r3, #-2147483648	; 0x80000000
   19f14:	bl	1bbb8 <__assert_fail@plt+0xa888>
   19f18:	mov	r5, r0
   19f1c:	str	r0, [r6]
   19f20:	ldr	r0, [r6, #4]
   19f24:	ldr	r2, [sp, #80]	; 0x50
   19f28:	mov	r1, #0
   19f2c:	sub	r2, r2, r0
   19f30:	add	r0, r5, r0, lsl #3
   19f34:	lsl	r2, r2, #3
   19f38:	bl	11204 <memset@plt>
   19f3c:	ldr	r3, [sp, #80]	; 0x50
   19f40:	str	r3, [r6, #4]
   19f44:	add	fp, r5, r4, lsl #3
   19f48:	ldr	r1, [sp, #36]	; 0x24
   19f4c:	ldr	r8, [r5, r4, lsl #3]
   19f50:	ldr	r6, [fp, #4]
   19f54:	ldr	r2, [sp, #72]	; 0x48
   19f58:	ldr	r3, [sp, #32]
   19f5c:	ldr	ip, [sp, #76]	; 0x4c
   19f60:	orr	r1, r1, #1
   19f64:	add	sl, sp, #40	; 0x28
   19f68:	str	r1, [sp, #28]
   19f6c:	str	r1, [sp, #4]
   19f70:	str	r2, [sp, #12]
   19f74:	str	r3, [sp]
   19f78:	mov	r0, r6
   19f7c:	mov	r1, r8
   19f80:	str	ip, [sp, #16]
   19f84:	str	sl, [sp, #8]
   19f88:	mvn	r3, #0
   19f8c:	mov	r2, r9
   19f90:	bl	17034 <__assert_fail@plt+0x5d04>
   19f94:	cmp	r8, r0
   19f98:	bhi	19ffc <__assert_fail@plt+0x8ccc>
   19f9c:	ldr	r3, [pc, #164]	; 1a048 <__assert_fail@plt+0x8d18>
   19fa0:	add	r8, r0, #1
   19fa4:	cmp	r6, r3
   19fa8:	str	r8, [r5, r4, lsl #3]
   19fac:	beq	19fb8 <__assert_fail@plt+0x8c88>
   19fb0:	mov	r0, r6
   19fb4:	bl	12cdc <__assert_fail@plt+0x19ac>
   19fb8:	mov	r0, r8
   19fbc:	bl	1b99c <__assert_fail@plt+0xa66c>
   19fc0:	ldr	lr, [sp, #76]	; 0x4c
   19fc4:	ldr	r3, [sp, #32]
   19fc8:	ldr	ip, [sp, #72]	; 0x48
   19fcc:	ldr	r4, [sp, #28]
   19fd0:	mov	r2, r9
   19fd4:	mov	r1, r8
   19fd8:	str	r0, [fp, #4]
   19fdc:	str	r3, [sp]
   19fe0:	str	sl, [sp, #8]
   19fe4:	str	r4, [sp, #4]
   19fe8:	str	lr, [sp, #16]
   19fec:	str	ip, [sp, #12]
   19ff0:	mvn	r3, #0
   19ff4:	mov	r6, r0
   19ff8:	bl	17034 <__assert_fail@plt+0x5d04>
   19ffc:	ldr	r3, [sp, #24]
   1a000:	mov	r0, r6
   1a004:	str	r3, [r7]
   1a008:	add	sp, sp, #180	; 0xb4
   1a00c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a010:	mov	r3, #8
   1a014:	sub	r2, r4, r2
   1a018:	add	r1, sp, #80	; 0x50
   1a01c:	str	r3, [sp]
   1a020:	add	r2, r2, #1
   1a024:	mvn	r3, #-2147483648	; 0x80000000
   1a028:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1a02c:	mov	r5, r0
   1a030:	ldm	r8, {r0, r1}
   1a034:	str	r5, [r6]
   1a038:	stm	r5, {r0, r1}
   1a03c:	b	19f20 <__assert_fail@plt+0x8bf0>
   1a040:	bl	112e8 <abort@plt>
   1a044:	andeq	r0, r3, ip, lsr r1
   1a048:	strdeq	r0, [r3], -r4
   1a04c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a050:	mov	r7, r1
   1a054:	ldr	lr, [pc, #492]	; 1a248 <__assert_fail@plt+0x8f18>
   1a058:	mov	r8, r2
   1a05c:	mov	r4, r0
   1a060:	mov	fp, r3
   1a064:	ldm	lr!, {r0, r1, r2, r3}
   1a068:	sub	sp, sp, #100	; 0x64
   1a06c:	add	ip, sp, #48	; 0x30
   1a070:	mov	sl, #10
   1a074:	stmia	ip!, {r0, r1, r2, r3}
   1a078:	cmp	r8, #0
   1a07c:	cmpne	r7, #0
   1a080:	ldm	lr!, {r0, r1, r2, r3}
   1a084:	str	sl, [sp, #48]	; 0x30
   1a088:	stmia	ip!, {r0, r1, r2, r3}
   1a08c:	ldm	lr, {r0, r1, r2, r3}
   1a090:	stm	ip, {r0, r1, r2, r3}
   1a094:	beq	1a244 <__assert_fail@plt+0x8f14>
   1a098:	str	r7, [sp, #88]	; 0x58
   1a09c:	str	r8, [sp, #92]	; 0x5c
   1a0a0:	bl	111ec <__errno_location@plt>
   1a0a4:	ldr	r6, [pc, #416]	; 1a24c <__assert_fail@plt+0x8f1c>
   1a0a8:	cmn	r4, #-2147483647	; 0x80000001
   1a0ac:	ldr	r5, [r6]
   1a0b0:	mov	r9, r0
   1a0b4:	movne	r0, #0
   1a0b8:	moveq	r0, #1
   1a0bc:	ldr	r3, [r9]
   1a0c0:	orrs	r0, r0, r4, lsr #31
   1a0c4:	str	r3, [sp, #28]
   1a0c8:	bne	1a244 <__assert_fail@plt+0x8f14>
   1a0cc:	ldr	r2, [r6, #4]
   1a0d0:	cmp	r4, r2
   1a0d4:	movlt	r3, sl
   1a0d8:	blt	1a144 <__assert_fail@plt+0x8e14>
   1a0dc:	add	r7, r6, #8
   1a0e0:	cmp	r5, r7
   1a0e4:	str	r2, [sp, #44]	; 0x2c
   1a0e8:	beq	1a214 <__assert_fail@plt+0x8ee4>
   1a0ec:	mov	r3, #8
   1a0f0:	sub	r2, r4, r2
   1a0f4:	mov	r0, r5
   1a0f8:	str	r3, [sp]
   1a0fc:	add	r2, r2, #1
   1a100:	mvn	r3, #-2147483648	; 0x80000000
   1a104:	add	r1, sp, #44	; 0x2c
   1a108:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1a10c:	mov	r5, r0
   1a110:	str	r0, [r6]
   1a114:	ldr	r0, [r6, #4]
   1a118:	ldr	r2, [sp, #44]	; 0x2c
   1a11c:	mov	r1, #0
   1a120:	sub	r2, r2, r0
   1a124:	add	r0, r5, r0, lsl #3
   1a128:	lsl	r2, r2, #3
   1a12c:	bl	11204 <memset@plt>
   1a130:	ldr	r3, [sp, #48]	; 0x30
   1a134:	ldr	r7, [sp, #88]	; 0x58
   1a138:	ldr	r8, [sp, #92]	; 0x5c
   1a13c:	ldr	r2, [sp, #44]	; 0x2c
   1a140:	str	r2, [r6, #4]
   1a144:	add	r2, r5, r4, lsl #3
   1a148:	mov	r1, r2
   1a14c:	str	r2, [sp, #32]
   1a150:	ldr	r2, [sp, #52]	; 0x34
   1a154:	ldr	r6, [r1, #4]
   1a158:	ldr	sl, [r5, r4, lsl #3]
   1a15c:	orr	r2, r2, #1
   1a160:	str	r3, [sp]
   1a164:	add	r3, sp, #56	; 0x38
   1a168:	str	r2, [sp, #36]	; 0x24
   1a16c:	str	r2, [sp, #4]
   1a170:	str	r3, [sp, #8]
   1a174:	mov	r0, r6
   1a178:	str	r8, [sp, #16]
   1a17c:	str	r7, [sp, #12]
   1a180:	mov	r1, sl
   1a184:	mvn	r3, #0
   1a188:	mov	r2, fp
   1a18c:	bl	17034 <__assert_fail@plt+0x5d04>
   1a190:	cmp	sl, r0
   1a194:	bhi	1a200 <__assert_fail@plt+0x8ed0>
   1a198:	ldr	r3, [pc, #176]	; 1a250 <__assert_fail@plt+0x8f20>
   1a19c:	add	r7, r0, #1
   1a1a0:	cmp	r6, r3
   1a1a4:	str	r7, [r5, r4, lsl #3]
   1a1a8:	beq	1a1b4 <__assert_fail@plt+0x8e84>
   1a1ac:	mov	r0, r6
   1a1b0:	bl	12cdc <__assert_fail@plt+0x19ac>
   1a1b4:	mov	r0, r7
   1a1b8:	bl	1b99c <__assert_fail@plt+0xa66c>
   1a1bc:	ldr	r3, [sp, #32]
   1a1c0:	ldr	lr, [sp, #92]	; 0x5c
   1a1c4:	ldr	ip, [sp, #88]	; 0x58
   1a1c8:	ldr	r4, [sp, #36]	; 0x24
   1a1cc:	mov	r2, fp
   1a1d0:	mov	r1, r7
   1a1d4:	str	r0, [r3, #4]
   1a1d8:	add	r3, sp, #56	; 0x38
   1a1dc:	str	r3, [sp, #8]
   1a1e0:	ldr	r3, [sp, #48]	; 0x30
   1a1e4:	str	r4, [sp, #4]
   1a1e8:	str	r3, [sp]
   1a1ec:	str	lr, [sp, #16]
   1a1f0:	str	ip, [sp, #12]
   1a1f4:	mvn	r3, #0
   1a1f8:	mov	r6, r0
   1a1fc:	bl	17034 <__assert_fail@plt+0x5d04>
   1a200:	ldr	r3, [sp, #28]
   1a204:	mov	r0, r6
   1a208:	str	r3, [r9]
   1a20c:	add	sp, sp, #100	; 0x64
   1a210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a214:	mov	r3, #8
   1a218:	sub	r2, r4, r2
   1a21c:	str	r3, [sp]
   1a220:	add	r1, sp, #44	; 0x2c
   1a224:	add	r2, r2, #1
   1a228:	mvn	r3, #-2147483648	; 0x80000000
   1a22c:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1a230:	mov	r5, r0
   1a234:	ldm	r7, {r0, r1}
   1a238:	str	r5, [r6]
   1a23c:	stm	r5, {r0, r1}
   1a240:	b	1a114 <__assert_fail@plt+0x8de4>
   1a244:	bl	112e8 <abort@plt>
   1a248:	andeq	r0, r3, r4, asr #3
   1a24c:	andeq	r0, r3, ip, lsr r1
   1a250:	strdeq	r0, [r3], -r4
   1a254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a258:	mov	r7, r1
   1a25c:	ldr	lr, [pc, #492]	; 1a450 <__assert_fail@plt+0x9120>
   1a260:	mov	r8, r2
   1a264:	mov	r4, r0
   1a268:	mov	fp, r3
   1a26c:	ldm	lr!, {r0, r1, r2, r3}
   1a270:	sub	sp, sp, #100	; 0x64
   1a274:	add	ip, sp, #48	; 0x30
   1a278:	mov	sl, #10
   1a27c:	stmia	ip!, {r0, r1, r2, r3}
   1a280:	cmp	r8, #0
   1a284:	cmpne	r7, #0
   1a288:	ldm	lr!, {r0, r1, r2, r3}
   1a28c:	str	sl, [sp, #48]	; 0x30
   1a290:	stmia	ip!, {r0, r1, r2, r3}
   1a294:	ldm	lr, {r0, r1, r2, r3}
   1a298:	stm	ip, {r0, r1, r2, r3}
   1a29c:	beq	1a44c <__assert_fail@plt+0x911c>
   1a2a0:	str	r7, [sp, #88]	; 0x58
   1a2a4:	str	r8, [sp, #92]	; 0x5c
   1a2a8:	bl	111ec <__errno_location@plt>
   1a2ac:	ldr	r6, [pc, #416]	; 1a454 <__assert_fail@plt+0x9124>
   1a2b0:	cmn	r4, #-2147483647	; 0x80000001
   1a2b4:	ldr	r5, [r6]
   1a2b8:	mov	r9, r0
   1a2bc:	movne	r0, #0
   1a2c0:	moveq	r0, #1
   1a2c4:	ldr	r3, [r9]
   1a2c8:	orrs	r0, r0, r4, lsr #31
   1a2cc:	str	r3, [sp, #28]
   1a2d0:	bne	1a44c <__assert_fail@plt+0x911c>
   1a2d4:	ldr	r2, [r6, #4]
   1a2d8:	cmp	r4, r2
   1a2dc:	movlt	r3, sl
   1a2e0:	blt	1a34c <__assert_fail@plt+0x901c>
   1a2e4:	add	r7, r6, #8
   1a2e8:	cmp	r5, r7
   1a2ec:	str	r2, [sp, #44]	; 0x2c
   1a2f0:	beq	1a41c <__assert_fail@plt+0x90ec>
   1a2f4:	mov	r3, #8
   1a2f8:	sub	r2, r4, r2
   1a2fc:	mov	r0, r5
   1a300:	str	r3, [sp]
   1a304:	add	r2, r2, #1
   1a308:	mvn	r3, #-2147483648	; 0x80000000
   1a30c:	add	r1, sp, #44	; 0x2c
   1a310:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1a314:	mov	r5, r0
   1a318:	str	r0, [r6]
   1a31c:	ldr	r0, [r6, #4]
   1a320:	ldr	r2, [sp, #44]	; 0x2c
   1a324:	mov	r1, #0
   1a328:	sub	r2, r2, r0
   1a32c:	add	r0, r5, r0, lsl #3
   1a330:	lsl	r2, r2, #3
   1a334:	bl	11204 <memset@plt>
   1a338:	ldr	r3, [sp, #48]	; 0x30
   1a33c:	ldr	r7, [sp, #88]	; 0x58
   1a340:	ldr	r8, [sp, #92]	; 0x5c
   1a344:	ldr	r2, [sp, #44]	; 0x2c
   1a348:	str	r2, [r6, #4]
   1a34c:	add	r2, r5, r4, lsl #3
   1a350:	mov	r1, r2
   1a354:	str	r2, [sp, #32]
   1a358:	ldr	r2, [sp, #52]	; 0x34
   1a35c:	ldr	r6, [r1, #4]
   1a360:	ldr	sl, [r5, r4, lsl #3]
   1a364:	orr	r2, r2, #1
   1a368:	str	r3, [sp]
   1a36c:	add	r3, sp, #56	; 0x38
   1a370:	str	r2, [sp, #36]	; 0x24
   1a374:	str	r2, [sp, #4]
   1a378:	str	r3, [sp, #8]
   1a37c:	mov	r0, r6
   1a380:	str	r8, [sp, #16]
   1a384:	str	r7, [sp, #12]
   1a388:	mov	r1, sl
   1a38c:	ldr	r3, [sp, #136]	; 0x88
   1a390:	mov	r2, fp
   1a394:	bl	17034 <__assert_fail@plt+0x5d04>
   1a398:	cmp	sl, r0
   1a39c:	bhi	1a408 <__assert_fail@plt+0x90d8>
   1a3a0:	ldr	r3, [pc, #176]	; 1a458 <__assert_fail@plt+0x9128>
   1a3a4:	add	r7, r0, #1
   1a3a8:	cmp	r6, r3
   1a3ac:	str	r7, [r5, r4, lsl #3]
   1a3b0:	beq	1a3bc <__assert_fail@plt+0x908c>
   1a3b4:	mov	r0, r6
   1a3b8:	bl	12cdc <__assert_fail@plt+0x19ac>
   1a3bc:	mov	r0, r7
   1a3c0:	bl	1b99c <__assert_fail@plt+0xa66c>
   1a3c4:	ldr	r3, [sp, #32]
   1a3c8:	ldr	lr, [sp, #92]	; 0x5c
   1a3cc:	ldr	ip, [sp, #88]	; 0x58
   1a3d0:	ldr	r4, [sp, #36]	; 0x24
   1a3d4:	mov	r2, fp
   1a3d8:	mov	r1, r7
   1a3dc:	str	r0, [r3, #4]
   1a3e0:	add	r3, sp, #56	; 0x38
   1a3e4:	str	r3, [sp, #8]
   1a3e8:	ldr	r3, [sp, #48]	; 0x30
   1a3ec:	str	r4, [sp, #4]
   1a3f0:	str	r3, [sp]
   1a3f4:	str	lr, [sp, #16]
   1a3f8:	str	ip, [sp, #12]
   1a3fc:	ldr	r3, [sp, #136]	; 0x88
   1a400:	mov	r6, r0
   1a404:	bl	17034 <__assert_fail@plt+0x5d04>
   1a408:	ldr	r3, [sp, #28]
   1a40c:	mov	r0, r6
   1a410:	str	r3, [r9]
   1a414:	add	sp, sp, #100	; 0x64
   1a418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a41c:	mov	r3, #8
   1a420:	sub	r2, r4, r2
   1a424:	str	r3, [sp]
   1a428:	add	r1, sp, #44	; 0x2c
   1a42c:	add	r2, r2, #1
   1a430:	mvn	r3, #-2147483648	; 0x80000000
   1a434:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1a438:	mov	r5, r0
   1a43c:	ldm	r7, {r0, r1}
   1a440:	str	r5, [r6]
   1a444:	stm	r5, {r0, r1}
   1a448:	b	1a31c <__assert_fail@plt+0x8fec>
   1a44c:	bl	112e8 <abort@plt>
   1a450:	andeq	r0, r3, r4, asr #3
   1a454:	andeq	r0, r3, ip, lsr r1
   1a458:	strdeq	r0, [r3], -r4
   1a45c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a460:	mov	r5, r0
   1a464:	ldr	lr, [pc, #452]	; 1a630 <__assert_fail@plt+0x9300>
   1a468:	mov	r6, r1
   1a46c:	mov	sl, r2
   1a470:	ldm	lr!, {r0, r1, r2, r3}
   1a474:	sub	sp, sp, #92	; 0x5c
   1a478:	add	ip, sp, #40	; 0x28
   1a47c:	cmp	r6, #0
   1a480:	cmpne	r5, #0
   1a484:	stmia	ip!, {r0, r1, r2, r3}
   1a488:	mov	r9, #10
   1a48c:	ldm	lr!, {r0, r1, r2, r3}
   1a490:	moveq	fp, #1
   1a494:	movne	fp, #0
   1a498:	str	r9, [sp, #40]	; 0x28
   1a49c:	stmia	ip!, {r0, r1, r2, r3}
   1a4a0:	ldm	lr, {r0, r1, r2, r3}
   1a4a4:	stm	ip, {r0, r1, r2, r3}
   1a4a8:	beq	1a62c <__assert_fail@plt+0x92fc>
   1a4ac:	str	r5, [sp, #80]	; 0x50
   1a4b0:	str	r6, [sp, #84]	; 0x54
   1a4b4:	bl	111ec <__errno_location@plt>
   1a4b8:	ldr	r7, [pc, #372]	; 1a634 <__assert_fail@plt+0x9304>
   1a4bc:	ldr	r2, [r7, #4]
   1a4c0:	ldr	r4, [r7]
   1a4c4:	cmp	r2, #0
   1a4c8:	ldr	r3, [r0]
   1a4cc:	mov	r8, r0
   1a4d0:	str	r3, [sp, #24]
   1a4d4:	movgt	r3, r9
   1a4d8:	bgt	1a540 <__assert_fail@plt+0x9210>
   1a4dc:	add	r5, r7, #8
   1a4e0:	cmp	r4, r5
   1a4e4:	str	r2, [sp, #36]	; 0x24
   1a4e8:	beq	1a5fc <__assert_fail@plt+0x92cc>
   1a4ec:	mov	r3, #8
   1a4f0:	mov	r0, r4
   1a4f4:	str	r3, [sp]
   1a4f8:	rsb	r2, r2, #1
   1a4fc:	mvn	r3, #-2147483648	; 0x80000000
   1a500:	add	r1, sp, #36	; 0x24
   1a504:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1a508:	mov	r4, r0
   1a50c:	str	r0, [r7]
   1a510:	ldr	r0, [r7, #4]
   1a514:	ldr	r2, [sp, #36]	; 0x24
   1a518:	mov	r1, #0
   1a51c:	sub	r2, r2, r0
   1a520:	add	r0, r4, r0, lsl #3
   1a524:	lsl	r2, r2, #3
   1a528:	bl	11204 <memset@plt>
   1a52c:	ldr	r3, [sp, #40]	; 0x28
   1a530:	ldr	r5, [sp, #80]	; 0x50
   1a534:	ldr	r6, [sp, #84]	; 0x54
   1a538:	ldr	r2, [sp, #36]	; 0x24
   1a53c:	str	r2, [r7, #4]
   1a540:	ldr	r2, [sp, #44]	; 0x2c
   1a544:	ldr	r9, [r4]
   1a548:	ldr	r7, [r4, #4]
   1a54c:	orr	r2, r2, #1
   1a550:	add	fp, sp, #48	; 0x30
   1a554:	str	r2, [sp, #28]
   1a558:	str	r2, [sp, #4]
   1a55c:	str	r3, [sp]
   1a560:	str	r6, [sp, #16]
   1a564:	str	r5, [sp, #12]
   1a568:	mov	r1, r9
   1a56c:	mov	r0, r7
   1a570:	str	fp, [sp, #8]
   1a574:	mvn	r3, #0
   1a578:	mov	r2, sl
   1a57c:	bl	17034 <__assert_fail@plt+0x5d04>
   1a580:	cmp	r9, r0
   1a584:	bhi	1a5e8 <__assert_fail@plt+0x92b8>
   1a588:	ldr	r3, [pc, #168]	; 1a638 <__assert_fail@plt+0x9308>
   1a58c:	add	r5, r0, #1
   1a590:	cmp	r7, r3
   1a594:	str	r5, [r4]
   1a598:	beq	1a5a4 <__assert_fail@plt+0x9274>
   1a59c:	mov	r0, r7
   1a5a0:	bl	12cdc <__assert_fail@plt+0x19ac>
   1a5a4:	mov	r0, r5
   1a5a8:	bl	1b99c <__assert_fail@plt+0xa66c>
   1a5ac:	ldr	lr, [sp, #84]	; 0x54
   1a5b0:	ldr	r3, [sp, #40]	; 0x28
   1a5b4:	ldr	ip, [sp, #80]	; 0x50
   1a5b8:	mov	r2, sl
   1a5bc:	mov	r1, r5
   1a5c0:	str	r0, [r4, #4]
   1a5c4:	ldr	r4, [sp, #28]
   1a5c8:	str	r3, [sp]
   1a5cc:	str	fp, [sp, #8]
   1a5d0:	str	r4, [sp, #4]
   1a5d4:	str	lr, [sp, #16]
   1a5d8:	str	ip, [sp, #12]
   1a5dc:	mvn	r3, #0
   1a5e0:	mov	r7, r0
   1a5e4:	bl	17034 <__assert_fail@plt+0x5d04>
   1a5e8:	ldr	r3, [sp, #24]
   1a5ec:	mov	r0, r7
   1a5f0:	str	r3, [r8]
   1a5f4:	add	sp, sp, #92	; 0x5c
   1a5f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5fc:	mov	r3, #8
   1a600:	str	r3, [sp]
   1a604:	add	r1, sp, #36	; 0x24
   1a608:	rsb	r2, r2, #1
   1a60c:	mov	r0, fp
   1a610:	mvn	r3, #-2147483648	; 0x80000000
   1a614:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1a618:	mov	r4, r0
   1a61c:	ldm	r5, {r0, r1}
   1a620:	str	r4, [r7]
   1a624:	stm	r4, {r0, r1}
   1a628:	b	1a510 <__assert_fail@plt+0x91e0>
   1a62c:	bl	112e8 <abort@plt>
   1a630:	andeq	r0, r3, r4, asr #3
   1a634:	andeq	r0, r3, ip, lsr r1
   1a638:	strdeq	r0, [r3], -r4
   1a63c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a640:	mov	r5, r0
   1a644:	ldr	lr, [pc, #464]	; 1a81c <__assert_fail@plt+0x94ec>
   1a648:	mov	r6, r1
   1a64c:	mov	sl, r2
   1a650:	mov	fp, r3
   1a654:	ldm	lr!, {r0, r1, r2, r3}
   1a658:	sub	sp, sp, #92	; 0x5c
   1a65c:	add	ip, sp, #40	; 0x28
   1a660:	cmp	r6, #0
   1a664:	cmpne	r5, #0
   1a668:	stmia	ip!, {r0, r1, r2, r3}
   1a66c:	moveq	r4, #1
   1a670:	ldm	lr!, {r0, r1, r2, r3}
   1a674:	movne	r4, #0
   1a678:	mov	r9, #10
   1a67c:	str	r4, [sp, #28]
   1a680:	stmia	ip!, {r0, r1, r2, r3}
   1a684:	ldm	lr, {r0, r1, r2, r3}
   1a688:	str	r9, [sp, #40]	; 0x28
   1a68c:	stm	ip, {r0, r1, r2, r3}
   1a690:	beq	1a818 <__assert_fail@plt+0x94e8>
   1a694:	str	r5, [sp, #80]	; 0x50
   1a698:	str	r6, [sp, #84]	; 0x54
   1a69c:	bl	111ec <__errno_location@plt>
   1a6a0:	ldr	r7, [pc, #376]	; 1a820 <__assert_fail@plt+0x94f0>
   1a6a4:	ldr	r2, [r7, #4]
   1a6a8:	ldr	r4, [r7]
   1a6ac:	cmp	r2, #0
   1a6b0:	ldr	r3, [r0]
   1a6b4:	mov	r8, r0
   1a6b8:	str	r3, [sp, #24]
   1a6bc:	movgt	r3, r9
   1a6c0:	bgt	1a728 <__assert_fail@plt+0x93f8>
   1a6c4:	add	r5, r7, #8
   1a6c8:	cmp	r4, r5
   1a6cc:	str	r2, [sp, #36]	; 0x24
   1a6d0:	beq	1a7e8 <__assert_fail@plt+0x94b8>
   1a6d4:	mov	r3, #8
   1a6d8:	mov	r0, r4
   1a6dc:	str	r3, [sp]
   1a6e0:	rsb	r2, r2, #1
   1a6e4:	mvn	r3, #-2147483648	; 0x80000000
   1a6e8:	add	r1, sp, #36	; 0x24
   1a6ec:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1a6f0:	mov	r4, r0
   1a6f4:	str	r0, [r7]
   1a6f8:	ldr	r0, [r7, #4]
   1a6fc:	ldr	r2, [sp, #36]	; 0x24
   1a700:	mov	r1, #0
   1a704:	sub	r2, r2, r0
   1a708:	add	r0, r4, r0, lsl #3
   1a70c:	lsl	r2, r2, #3
   1a710:	bl	11204 <memset@plt>
   1a714:	ldr	r3, [sp, #40]	; 0x28
   1a718:	ldr	r5, [sp, #80]	; 0x50
   1a71c:	ldr	r6, [sp, #84]	; 0x54
   1a720:	ldr	r2, [sp, #36]	; 0x24
   1a724:	str	r2, [r7, #4]
   1a728:	ldr	r2, [sp, #44]	; 0x2c
   1a72c:	ldr	r9, [r4]
   1a730:	ldr	r7, [r4, #4]
   1a734:	orr	r2, r2, #1
   1a738:	str	r3, [sp]
   1a73c:	add	r3, sp, #48	; 0x30
   1a740:	str	r2, [sp, #28]
   1a744:	str	r2, [sp, #4]
   1a748:	str	r3, [sp, #8]
   1a74c:	str	r6, [sp, #16]
   1a750:	str	r5, [sp, #12]
   1a754:	mov	r1, r9
   1a758:	mov	r0, r7
   1a75c:	mov	r3, fp
   1a760:	mov	r2, sl
   1a764:	bl	17034 <__assert_fail@plt+0x5d04>
   1a768:	cmp	r9, r0
   1a76c:	bhi	1a7d4 <__assert_fail@plt+0x94a4>
   1a770:	ldr	r3, [pc, #172]	; 1a824 <__assert_fail@plt+0x94f4>
   1a774:	add	r5, r0, #1
   1a778:	cmp	r7, r3
   1a77c:	str	r5, [r4]
   1a780:	beq	1a78c <__assert_fail@plt+0x945c>
   1a784:	mov	r0, r7
   1a788:	bl	12cdc <__assert_fail@plt+0x19ac>
   1a78c:	mov	r0, r5
   1a790:	bl	1b99c <__assert_fail@plt+0xa66c>
   1a794:	add	lr, sp, #48	; 0x30
   1a798:	ldr	ip, [sp, #84]	; 0x54
   1a79c:	mov	r1, r5
   1a7a0:	ldr	r5, [sp, #28]
   1a7a4:	mov	r3, fp
   1a7a8:	mov	r2, sl
   1a7ac:	str	r0, [r4, #4]
   1a7b0:	ldr	r4, [sp, #80]	; 0x50
   1a7b4:	str	lr, [sp, #8]
   1a7b8:	ldr	lr, [sp, #40]	; 0x28
   1a7bc:	str	r5, [sp, #4]
   1a7c0:	str	ip, [sp, #16]
   1a7c4:	str	r4, [sp, #12]
   1a7c8:	str	lr, [sp]
   1a7cc:	mov	r7, r0
   1a7d0:	bl	17034 <__assert_fail@plt+0x5d04>
   1a7d4:	ldr	r3, [sp, #24]
   1a7d8:	mov	r0, r7
   1a7dc:	str	r3, [r8]
   1a7e0:	add	sp, sp, #92	; 0x5c
   1a7e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7e8:	mov	r3, #8
   1a7ec:	str	r3, [sp]
   1a7f0:	add	r1, sp, #36	; 0x24
   1a7f4:	rsb	r2, r2, #1
   1a7f8:	ldr	r0, [sp, #28]
   1a7fc:	mvn	r3, #-2147483648	; 0x80000000
   1a800:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1a804:	mov	r4, r0
   1a808:	ldm	r5, {r0, r1}
   1a80c:	str	r4, [r7]
   1a810:	stm	r4, {r0, r1}
   1a814:	b	1a6f8 <__assert_fail@plt+0x93c8>
   1a818:	bl	112e8 <abort@plt>
   1a81c:	andeq	r0, r3, r4, asr #3
   1a820:	andeq	r0, r3, ip, lsr r1
   1a824:	strdeq	r0, [r3], -r4
   1a828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a82c:	sub	sp, sp, #52	; 0x34
   1a830:	mov	r5, r0
   1a834:	mov	sl, r1
   1a838:	mov	fp, r2
   1a83c:	bl	111ec <__errno_location@plt>
   1a840:	ldr	r4, [pc, #404]	; 1a9dc <__assert_fail@plt+0x96ac>
   1a844:	cmn	r5, #-2147483647	; 0x80000001
   1a848:	ldr	r6, [r4]
   1a84c:	mov	r8, r0
   1a850:	movne	r0, #0
   1a854:	moveq	r0, #1
   1a858:	ldr	r3, [r8]
   1a85c:	orrs	r0, r0, r5, lsr #31
   1a860:	str	r3, [sp, #28]
   1a864:	bne	1a9d8 <__assert_fail@plt+0x96a8>
   1a868:	ldr	r2, [r4, #4]
   1a86c:	cmp	r5, r2
   1a870:	blt	1a8d0 <__assert_fail@plt+0x95a0>
   1a874:	add	r7, r4, #8
   1a878:	cmp	r6, r7
   1a87c:	str	r2, [sp, #44]	; 0x2c
   1a880:	beq	1a9a8 <__assert_fail@plt+0x9678>
   1a884:	mov	r3, #8
   1a888:	sub	r2, r5, r2
   1a88c:	mov	r0, r6
   1a890:	str	r3, [sp]
   1a894:	add	r2, r2, #1
   1a898:	mvn	r3, #-2147483648	; 0x80000000
   1a89c:	add	r1, sp, #44	; 0x2c
   1a8a0:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1a8a4:	mov	r6, r0
   1a8a8:	str	r0, [r4]
   1a8ac:	ldr	r0, [r4, #4]
   1a8b0:	ldr	r2, [sp, #44]	; 0x2c
   1a8b4:	mov	r1, #0
   1a8b8:	sub	r2, r2, r0
   1a8bc:	add	r0, r6, r0, lsl #3
   1a8c0:	lsl	r2, r2, #3
   1a8c4:	bl	11204 <memset@plt>
   1a8c8:	ldr	r3, [sp, #44]	; 0x2c
   1a8cc:	str	r3, [r4, #4]
   1a8d0:	ldr	r2, [r4, #56]	; 0x38
   1a8d4:	add	r3, r6, r5, lsl #3
   1a8d8:	ldr	r1, [r4, #20]
   1a8dc:	ldr	r7, [r3, #4]
   1a8e0:	ldr	r9, [r6, r5, lsl #3]
   1a8e4:	ldr	ip, [r4, #60]	; 0x3c
   1a8e8:	str	r3, [sp, #32]
   1a8ec:	ldr	r3, [r4, #16]
   1a8f0:	str	r2, [sp, #12]
   1a8f4:	ldr	r2, [pc, #228]	; 1a9e0 <__assert_fail@plt+0x96b0>
   1a8f8:	orr	r1, r1, #1
   1a8fc:	str	r1, [sp, #36]	; 0x24
   1a900:	str	r1, [sp, #4]
   1a904:	str	r2, [sp, #8]
   1a908:	str	r3, [sp]
   1a90c:	mov	r0, r7
   1a910:	mov	r1, r9
   1a914:	str	ip, [sp, #16]
   1a918:	mov	r3, fp
   1a91c:	mov	r2, sl
   1a920:	bl	17034 <__assert_fail@plt+0x5d04>
   1a924:	cmp	r9, r0
   1a928:	bhi	1a994 <__assert_fail@plt+0x9664>
   1a92c:	ldr	r3, [pc, #176]	; 1a9e4 <__assert_fail@plt+0x96b4>
   1a930:	add	r9, r0, #1
   1a934:	cmp	r7, r3
   1a938:	str	r9, [r6, r5, lsl #3]
   1a93c:	beq	1a948 <__assert_fail@plt+0x9618>
   1a940:	mov	r0, r7
   1a944:	bl	12cdc <__assert_fail@plt+0x19ac>
   1a948:	mov	r0, r9
   1a94c:	bl	1b99c <__assert_fail@plt+0xa66c>
   1a950:	ldr	ip, [sp, #32]
   1a954:	ldr	lr, [r4, #60]	; 0x3c
   1a958:	ldr	r5, [r4, #56]	; 0x38
   1a95c:	mov	r3, fp
   1a960:	mov	r2, sl
   1a964:	mov	r1, r9
   1a968:	str	r0, [ip, #4]
   1a96c:	ldr	ip, [r4, #16]
   1a970:	ldr	r4, [pc, #104]	; 1a9e0 <__assert_fail@plt+0x96b0>
   1a974:	str	lr, [sp, #16]
   1a978:	str	r4, [sp, #8]
   1a97c:	ldr	r4, [sp, #36]	; 0x24
   1a980:	str	r5, [sp, #12]
   1a984:	str	r4, [sp, #4]
   1a988:	str	ip, [sp]
   1a98c:	mov	r7, r0
   1a990:	bl	17034 <__assert_fail@plt+0x5d04>
   1a994:	ldr	r3, [sp, #28]
   1a998:	mov	r0, r7
   1a99c:	str	r3, [r8]
   1a9a0:	add	sp, sp, #52	; 0x34
   1a9a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9a8:	mov	r3, #8
   1a9ac:	sub	r2, r5, r2
   1a9b0:	str	r3, [sp]
   1a9b4:	add	r1, sp, #44	; 0x2c
   1a9b8:	add	r2, r2, #1
   1a9bc:	mvn	r3, #-2147483648	; 0x80000000
   1a9c0:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1a9c4:	mov	r6, r0
   1a9c8:	ldm	r7, {r0, r1}
   1a9cc:	str	r6, [r4]
   1a9d0:	stm	r6, {r0, r1}
   1a9d4:	b	1a8ac <__assert_fail@plt+0x957c>
   1a9d8:	bl	112e8 <abort@plt>
   1a9dc:	andeq	r0, r3, ip, lsr r1
   1a9e0:	andeq	r0, r3, r4, asr r1
   1a9e4:	strdeq	r0, [r3], -r4
   1a9e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9ec:	sub	sp, sp, #44	; 0x2c
   1a9f0:	mov	r9, r0
   1a9f4:	mov	sl, r1
   1a9f8:	bl	111ec <__errno_location@plt>
   1a9fc:	ldr	r4, [pc, #360]	; 1ab6c <__assert_fail@plt+0x983c>
   1aa00:	ldr	r2, [r4, #4]
   1aa04:	ldr	r5, [r4]
   1aa08:	cmp	r2, #0
   1aa0c:	ldr	r3, [r0]
   1aa10:	mov	r7, r0
   1aa14:	str	r3, [sp, #24]
   1aa18:	bgt	1aa74 <__assert_fail@plt+0x9744>
   1aa1c:	add	r6, r4, #8
   1aa20:	cmp	r5, r6
   1aa24:	str	r2, [sp, #36]	; 0x24
   1aa28:	beq	1ab3c <__assert_fail@plt+0x980c>
   1aa2c:	mov	r3, #8
   1aa30:	mov	r0, r5
   1aa34:	str	r3, [sp]
   1aa38:	rsb	r2, r2, #1
   1aa3c:	mvn	r3, #-2147483648	; 0x80000000
   1aa40:	add	r1, sp, #36	; 0x24
   1aa44:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1aa48:	mov	r5, r0
   1aa4c:	str	r0, [r4]
   1aa50:	ldr	r0, [r4, #4]
   1aa54:	ldr	r2, [sp, #36]	; 0x24
   1aa58:	mov	r1, #0
   1aa5c:	sub	r2, r2, r0
   1aa60:	add	r0, r5, r0, lsl #3
   1aa64:	lsl	r2, r2, #3
   1aa68:	bl	11204 <memset@plt>
   1aa6c:	ldr	r3, [sp, #36]	; 0x24
   1aa70:	str	r3, [r4, #4]
   1aa74:	ldr	r1, [r4, #20]
   1aa78:	ldr	r8, [r5]
   1aa7c:	ldr	r6, [r5, #4]
   1aa80:	ldr	r2, [r4, #56]	; 0x38
   1aa84:	ldr	r3, [r4, #16]
   1aa88:	ldr	ip, [r4, #60]	; 0x3c
   1aa8c:	ldr	fp, [pc, #220]	; 1ab70 <__assert_fail@plt+0x9840>
   1aa90:	orr	r1, r1, #1
   1aa94:	str	r1, [sp, #28]
   1aa98:	str	r1, [sp, #4]
   1aa9c:	str	r2, [sp, #12]
   1aaa0:	str	r3, [sp]
   1aaa4:	mov	r1, r8
   1aaa8:	mov	r0, r6
   1aaac:	str	ip, [sp, #16]
   1aab0:	str	fp, [sp, #8]
   1aab4:	mov	r3, sl
   1aab8:	mov	r2, r9
   1aabc:	bl	17034 <__assert_fail@plt+0x5d04>
   1aac0:	cmp	r8, r0
   1aac4:	bhi	1ab28 <__assert_fail@plt+0x97f8>
   1aac8:	ldr	r3, [pc, #164]	; 1ab74 <__assert_fail@plt+0x9844>
   1aacc:	add	r8, r0, #1
   1aad0:	cmp	r6, r3
   1aad4:	str	r8, [r5]
   1aad8:	beq	1aae4 <__assert_fail@plt+0x97b4>
   1aadc:	mov	r0, r6
   1aae0:	bl	12cdc <__assert_fail@plt+0x19ac>
   1aae4:	mov	r0, r8
   1aae8:	bl	1b99c <__assert_fail@plt+0xa66c>
   1aaec:	ldr	lr, [r4, #60]	; 0x3c
   1aaf0:	ldr	ip, [r4, #16]
   1aaf4:	mov	r3, sl
   1aaf8:	mov	r2, r9
   1aafc:	mov	r1, r8
   1ab00:	str	r0, [r5, #4]
   1ab04:	ldr	r5, [r4, #56]	; 0x38
   1ab08:	ldr	r4, [sp, #28]
   1ab0c:	str	fp, [sp, #8]
   1ab10:	str	r4, [sp, #4]
   1ab14:	str	lr, [sp, #16]
   1ab18:	str	r5, [sp, #12]
   1ab1c:	str	ip, [sp]
   1ab20:	mov	r6, r0
   1ab24:	bl	17034 <__assert_fail@plt+0x5d04>
   1ab28:	ldr	r3, [sp, #24]
   1ab2c:	mov	r0, r6
   1ab30:	str	r3, [r7]
   1ab34:	add	sp, sp, #44	; 0x2c
   1ab38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab3c:	mov	r3, #8
   1ab40:	str	r3, [sp]
   1ab44:	add	r1, sp, #36	; 0x24
   1ab48:	rsb	r2, r2, #1
   1ab4c:	mvn	r3, #-2147483648	; 0x80000000
   1ab50:	mov	r0, #0
   1ab54:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1ab58:	mov	r5, r0
   1ab5c:	ldm	r6, {r0, r1}
   1ab60:	str	r5, [r4]
   1ab64:	stm	r5, {r0, r1}
   1ab68:	b	1aa50 <__assert_fail@plt+0x9720>
   1ab6c:	andeq	r0, r3, ip, lsr r1
   1ab70:	andeq	r0, r3, r4, asr r1
   1ab74:	strdeq	r0, [r3], -r4
   1ab78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab7c:	sub	sp, sp, #44	; 0x2c
   1ab80:	mov	r5, r0
   1ab84:	mov	sl, r1
   1ab88:	bl	111ec <__errno_location@plt>
   1ab8c:	ldr	r4, [pc, #396]	; 1ad20 <__assert_fail@plt+0x99f0>
   1ab90:	cmn	r5, #-2147483647	; 0x80000001
   1ab94:	ldr	r6, [r4]
   1ab98:	mov	r8, r0
   1ab9c:	movne	r0, #0
   1aba0:	moveq	r0, #1
   1aba4:	ldr	r3, [r8]
   1aba8:	orrs	r0, r0, r5, lsr #31
   1abac:	str	r3, [sp, #24]
   1abb0:	bne	1ad1c <__assert_fail@plt+0x99ec>
   1abb4:	ldr	r2, [r4, #4]
   1abb8:	cmp	r5, r2
   1abbc:	blt	1ac1c <__assert_fail@plt+0x98ec>
   1abc0:	add	r7, r4, #8
   1abc4:	cmp	r6, r7
   1abc8:	str	r2, [sp, #36]	; 0x24
   1abcc:	beq	1acec <__assert_fail@plt+0x99bc>
   1abd0:	mov	r3, #8
   1abd4:	sub	r2, r5, r2
   1abd8:	mov	r0, r6
   1abdc:	str	r3, [sp]
   1abe0:	add	r2, r2, #1
   1abe4:	mvn	r3, #-2147483648	; 0x80000000
   1abe8:	add	r1, sp, #36	; 0x24
   1abec:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1abf0:	mov	r6, r0
   1abf4:	str	r0, [r4]
   1abf8:	ldr	r0, [r4, #4]
   1abfc:	ldr	r2, [sp, #36]	; 0x24
   1ac00:	mov	r1, #0
   1ac04:	sub	r2, r2, r0
   1ac08:	add	r0, r6, r0, lsl #3
   1ac0c:	lsl	r2, r2, #3
   1ac10:	bl	11204 <memset@plt>
   1ac14:	ldr	r3, [sp, #36]	; 0x24
   1ac18:	str	r3, [r4, #4]
   1ac1c:	ldr	r2, [r4, #56]	; 0x38
   1ac20:	add	fp, r6, r5, lsl #3
   1ac24:	ldr	r1, [r4, #20]
   1ac28:	ldr	r9, [r6, r5, lsl #3]
   1ac2c:	ldr	r7, [fp, #4]
   1ac30:	ldr	r3, [r4, #16]
   1ac34:	ldr	ip, [r4, #60]	; 0x3c
   1ac38:	str	r2, [sp, #12]
   1ac3c:	ldr	r2, [pc, #224]	; 1ad24 <__assert_fail@plt+0x99f4>
   1ac40:	orr	r1, r1, #1
   1ac44:	str	r1, [sp, #28]
   1ac48:	str	r1, [sp, #4]
   1ac4c:	str	r2, [sp, #8]
   1ac50:	str	r3, [sp]
   1ac54:	mov	r0, r7
   1ac58:	mov	r1, r9
   1ac5c:	str	ip, [sp, #16]
   1ac60:	mvn	r3, #0
   1ac64:	mov	r2, sl
   1ac68:	bl	17034 <__assert_fail@plt+0x5d04>
   1ac6c:	cmp	r9, r0
   1ac70:	bhi	1acd8 <__assert_fail@plt+0x99a8>
   1ac74:	ldr	r3, [pc, #172]	; 1ad28 <__assert_fail@plt+0x99f8>
   1ac78:	add	r9, r0, #1
   1ac7c:	cmp	r7, r3
   1ac80:	str	r9, [r6, r5, lsl #3]
   1ac84:	beq	1ac90 <__assert_fail@plt+0x9960>
   1ac88:	mov	r0, r7
   1ac8c:	bl	12cdc <__assert_fail@plt+0x19ac>
   1ac90:	mov	r0, r9
   1ac94:	bl	1b99c <__assert_fail@plt+0xa66c>
   1ac98:	ldr	ip, [r4, #60]	; 0x3c
   1ac9c:	ldr	r3, [r4, #16]
   1aca0:	ldr	lr, [r4, #56]	; 0x38
   1aca4:	ldr	r4, [pc, #120]	; 1ad24 <__assert_fail@plt+0x99f4>
   1aca8:	mov	r2, sl
   1acac:	mov	r1, r9
   1acb0:	str	r0, [fp, #4]
   1acb4:	str	r4, [sp, #8]
   1acb8:	ldr	r4, [sp, #28]
   1acbc:	str	r3, [sp]
   1acc0:	str	r4, [sp, #4]
   1acc4:	str	ip, [sp, #16]
   1acc8:	str	lr, [sp, #12]
   1accc:	mvn	r3, #0
   1acd0:	mov	r7, r0
   1acd4:	bl	17034 <__assert_fail@plt+0x5d04>
   1acd8:	ldr	r3, [sp, #24]
   1acdc:	mov	r0, r7
   1ace0:	str	r3, [r8]
   1ace4:	add	sp, sp, #44	; 0x2c
   1ace8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acec:	mov	r3, #8
   1acf0:	sub	r2, r5, r2
   1acf4:	str	r3, [sp]
   1acf8:	add	r1, sp, #36	; 0x24
   1acfc:	add	r2, r2, #1
   1ad00:	mvn	r3, #-2147483648	; 0x80000000
   1ad04:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1ad08:	mov	r6, r0
   1ad0c:	ldm	r7, {r0, r1}
   1ad10:	str	r6, [r4]
   1ad14:	stm	r6, {r0, r1}
   1ad18:	b	1abf8 <__assert_fail@plt+0x98c8>
   1ad1c:	bl	112e8 <abort@plt>
   1ad20:	andeq	r0, r3, ip, lsr r1
   1ad24:	andeq	r0, r3, r4, asr r1
   1ad28:	strdeq	r0, [r3], -r4
   1ad2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad30:	sub	sp, sp, #44	; 0x2c
   1ad34:	mov	sl, r0
   1ad38:	bl	111ec <__errno_location@plt>
   1ad3c:	ldr	r4, [pc, #348]	; 1aea0 <__assert_fail@plt+0x9b70>
   1ad40:	ldr	r2, [r4, #4]
   1ad44:	ldr	r5, [r4]
   1ad48:	cmp	r2, #0
   1ad4c:	ldr	r3, [r0]
   1ad50:	mov	r8, r0
   1ad54:	str	r3, [sp, #28]
   1ad58:	bgt	1adb4 <__assert_fail@plt+0x9a84>
   1ad5c:	add	r6, r4, #8
   1ad60:	cmp	r5, r6
   1ad64:	str	r2, [sp, #36]	; 0x24
   1ad68:	beq	1ae70 <__assert_fail@plt+0x9b40>
   1ad6c:	mov	r3, #8
   1ad70:	mov	r0, r5
   1ad74:	str	r3, [sp]
   1ad78:	rsb	r2, r2, #1
   1ad7c:	mvn	r3, #-2147483648	; 0x80000000
   1ad80:	add	r1, sp, #36	; 0x24
   1ad84:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1ad88:	mov	r5, r0
   1ad8c:	str	r0, [r4]
   1ad90:	ldr	r0, [r4, #4]
   1ad94:	ldr	r2, [sp, #36]	; 0x24
   1ad98:	mov	r1, #0
   1ad9c:	sub	r2, r2, r0
   1ada0:	add	r0, r5, r0, lsl #3
   1ada4:	lsl	r2, r2, #3
   1ada8:	bl	11204 <memset@plt>
   1adac:	ldr	r3, [sp, #36]	; 0x24
   1adb0:	str	r3, [r4, #4]
   1adb4:	ldr	r7, [r4, #20]
   1adb8:	ldr	r9, [r5]
   1adbc:	ldr	r6, [r5, #4]
   1adc0:	ldr	r2, [r4, #56]	; 0x38
   1adc4:	ldr	r3, [r4, #16]
   1adc8:	ldr	ip, [r4, #60]	; 0x3c
   1adcc:	ldr	fp, [pc, #208]	; 1aea4 <__assert_fail@plt+0x9b74>
   1add0:	orr	r7, r7, #1
   1add4:	str	r2, [sp, #12]
   1add8:	str	r3, [sp]
   1addc:	str	r7, [sp, #4]
   1ade0:	mov	r1, r9
   1ade4:	mov	r0, r6
   1ade8:	str	ip, [sp, #16]
   1adec:	str	fp, [sp, #8]
   1adf0:	mvn	r3, #0
   1adf4:	mov	r2, sl
   1adf8:	bl	17034 <__assert_fail@plt+0x5d04>
   1adfc:	cmp	r9, r0
   1ae00:	bhi	1ae5c <__assert_fail@plt+0x9b2c>
   1ae04:	ldr	r3, [pc, #156]	; 1aea8 <__assert_fail@plt+0x9b78>
   1ae08:	add	r9, r0, #1
   1ae0c:	cmp	r6, r3
   1ae10:	str	r9, [r5]
   1ae14:	beq	1ae20 <__assert_fail@plt+0x9af0>
   1ae18:	mov	r0, r6
   1ae1c:	bl	12cdc <__assert_fail@plt+0x19ac>
   1ae20:	mov	r0, r9
   1ae24:	bl	1b99c <__assert_fail@plt+0xa66c>
   1ae28:	ldr	ip, [r4, #60]	; 0x3c
   1ae2c:	ldr	r3, [r4, #16]
   1ae30:	ldr	lr, [r4, #56]	; 0x38
   1ae34:	mov	r2, sl
   1ae38:	mov	r1, r9
   1ae3c:	str	r0, [r5, #4]
   1ae40:	str	r3, [sp]
   1ae44:	stmib	sp, {r7, fp}
   1ae48:	str	ip, [sp, #16]
   1ae4c:	str	lr, [sp, #12]
   1ae50:	mvn	r3, #0
   1ae54:	mov	r6, r0
   1ae58:	bl	17034 <__assert_fail@plt+0x5d04>
   1ae5c:	ldr	r3, [sp, #28]
   1ae60:	mov	r0, r6
   1ae64:	str	r3, [r8]
   1ae68:	add	sp, sp, #44	; 0x2c
   1ae6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae70:	mov	r3, #8
   1ae74:	str	r3, [sp]
   1ae78:	add	r1, sp, #36	; 0x24
   1ae7c:	rsb	r2, r2, #1
   1ae80:	mvn	r3, #-2147483648	; 0x80000000
   1ae84:	mov	r0, #0
   1ae88:	bl	1bbb8 <__assert_fail@plt+0xa888>
   1ae8c:	mov	r5, r0
   1ae90:	ldm	r6, {r0, r1}
   1ae94:	str	r5, [r4]
   1ae98:	stm	r5, {r0, r1}
   1ae9c:	b	1ad90 <__assert_fail@plt+0x9a60>
   1aea0:	andeq	r0, r3, ip, lsr r1
   1aea4:	andeq	r0, r3, r4, asr r1
   1aea8:	strdeq	r0, [r3], -r4
   1aeac:	push	{r4, r6, r7, lr}
   1aeb0:	sub	sp, sp, #104	; 0x68
   1aeb4:	mov	r4, r0
   1aeb8:	mov	r2, sp
   1aebc:	ldr	r1, [pc, #52]	; 1aef8 <__assert_fail@plt+0x9bc8>
   1aec0:	mov	r0, #3
   1aec4:	bl	11300 <__lxstat64@plt>
   1aec8:	cmp	r0, #0
   1aecc:	bne	1aeec <__assert_fail@plt+0x9bbc>
   1aed0:	ldrd	r6, [sp, #96]	; 0x60
   1aed4:	ldrd	r2, [sp]
   1aed8:	mov	r0, r4
   1aedc:	strd	r6, [r4]
   1aee0:	strd	r2, [r4, #8]
   1aee4:	add	sp, sp, #104	; 0x68
   1aee8:	pop	{r4, r6, r7, pc}
   1aeec:	mov	r0, #0
   1aef0:	add	sp, sp, #104	; 0x68
   1aef4:	pop	{r4, r6, r7, pc}
   1aef8:	andeq	lr, r1, ip, lsr #12
   1aefc:	cmp	r0, #2
   1af00:	push	{r4, r5, r6, r7, r8, lr}
   1af04:	mov	r4, r0
   1af08:	bhi	1af30 <__assert_fail@plt+0x9c00>
   1af0c:	bl	1d508 <__assert_fail@plt+0xc1d8>
   1af10:	mov	r7, r0
   1af14:	bl	111ec <__errno_location@plt>
   1af18:	mov	r5, r0
   1af1c:	mov	r0, r4
   1af20:	ldr	r6, [r5]
   1af24:	mov	r4, r7
   1af28:	bl	112f4 <close@plt>
   1af2c:	str	r6, [r5]
   1af30:	mov	r0, r4
   1af34:	pop	{r4, r5, r6, r7, r8, pc}
   1af38:	push	{r4, r5, r6, lr}
   1af3c:	sub	sp, sp, #32
   1af40:	cmp	r1, #0
   1af44:	mov	r4, r0
   1af48:	ldr	r5, [sp, #48]	; 0x30
   1af4c:	ldr	r6, [sp, #52]	; 0x34
   1af50:	beq	1b268 <__assert_fail@plt+0x9f38>
   1af54:	stm	sp, {r2, r3}
   1af58:	mov	r3, r1
   1af5c:	ldr	r2, [pc, #808]	; 1b28c <__assert_fail@plt+0x9f5c>
   1af60:	mov	r1, #1
   1af64:	bl	11228 <__fprintf_chk@plt>
   1af68:	mov	r2, #5
   1af6c:	ldr	r1, [pc, #796]	; 1b290 <__assert_fail@plt+0x9f60>
   1af70:	mov	r0, #0
   1af74:	bl	110c0 <dcgettext@plt>
   1af78:	ldr	r3, [pc, #788]	; 1b294 <__assert_fail@plt+0x9f64>
   1af7c:	ldr	r2, [pc, #788]	; 1b298 <__assert_fail@plt+0x9f68>
   1af80:	str	r3, [sp]
   1af84:	mov	r1, #1
   1af88:	mov	r3, r0
   1af8c:	mov	r0, r4
   1af90:	bl	11228 <__fprintf_chk@plt>
   1af94:	mov	r1, r4
   1af98:	mov	r0, #10
   1af9c:	bl	110b4 <fputc_unlocked@plt>
   1afa0:	mov	r2, #5
   1afa4:	ldr	r1, [pc, #752]	; 1b29c <__assert_fail@plt+0x9f6c>
   1afa8:	mov	r0, #0
   1afac:	bl	110c0 <dcgettext@plt>
   1afb0:	mov	r1, #1
   1afb4:	ldr	r3, [pc, #740]	; 1b2a0 <__assert_fail@plt+0x9f70>
   1afb8:	mov	r2, r0
   1afbc:	mov	r0, r4
   1afc0:	bl	11228 <__fprintf_chk@plt>
   1afc4:	mov	r1, r4
   1afc8:	mov	r0, #10
   1afcc:	bl	110b4 <fputc_unlocked@plt>
   1afd0:	cmp	r6, #9
   1afd4:	ldrls	pc, [pc, r6, lsl #2]
   1afd8:	b	1b280 <__assert_fail@plt+0x9f50>
   1afdc:	andeq	fp, r1, r0, rrx
   1afe0:	andeq	fp, r1, r8, rrx
   1afe4:	muleq	r1, r4, r0
   1afe8:	andeq	fp, r1, r8, asr #1
   1afec:	andeq	fp, r1, r4, lsl #2
   1aff0:	andeq	fp, r1, r0, asr #2
   1aff4:	andeq	fp, r1, ip, ror r1
   1aff8:	andeq	fp, r1, r0, asr #3
   1affc:	andeq	fp, r1, r0, lsl r2
   1b000:	andeq	fp, r1, r4
   1b004:	ldr	r1, [pc, #664]	; 1b2a4 <__assert_fail@plt+0x9f74>
   1b008:	mov	r2, #5
   1b00c:	mov	r0, #0
   1b010:	bl	110c0 <dcgettext@plt>
   1b014:	ldr	ip, [r5, #32]
   1b018:	ldr	r1, [r5, #28]
   1b01c:	ldr	r2, [r5, #24]
   1b020:	ldr	r3, [r5]
   1b024:	ldr	r6, [r5, #20]
   1b028:	str	ip, [sp, #28]
   1b02c:	ldr	lr, [r5, #16]
   1b030:	str	r1, [sp, #24]
   1b034:	ldr	ip, [r5, #12]
   1b038:	str	r2, [sp, #20]
   1b03c:	ldr	r1, [r5, #8]
   1b040:	ldr	r2, [r5, #4]
   1b044:	str	r6, [sp, #16]
   1b048:	stmib	sp, {r1, ip, lr}
   1b04c:	mov	r1, #1
   1b050:	str	r2, [sp]
   1b054:	mov	r2, r0
   1b058:	mov	r0, r4
   1b05c:	bl	11228 <__fprintf_chk@plt>
   1b060:	add	sp, sp, #32
   1b064:	pop	{r4, r5, r6, pc}
   1b068:	mov	r2, #5
   1b06c:	ldr	r1, [pc, #564]	; 1b2a8 <__assert_fail@plt+0x9f78>
   1b070:	mov	r0, #0
   1b074:	bl	110c0 <dcgettext@plt>
   1b078:	ldr	r3, [r5]
   1b07c:	mov	r1, #1
   1b080:	mov	r2, r0
   1b084:	mov	r0, r4
   1b088:	add	sp, sp, #32
   1b08c:	pop	{r4, r5, r6, lr}
   1b090:	b	11228 <__fprintf_chk@plt>
   1b094:	mov	r2, #5
   1b098:	ldr	r1, [pc, #524]	; 1b2ac <__assert_fail@plt+0x9f7c>
   1b09c:	mov	r0, #0
   1b0a0:	bl	110c0 <dcgettext@plt>
   1b0a4:	ldr	r2, [r5, #4]
   1b0a8:	ldr	r3, [r5]
   1b0ac:	mov	r1, #1
   1b0b0:	str	r2, [sp, #48]	; 0x30
   1b0b4:	mov	r2, r0
   1b0b8:	mov	r0, r4
   1b0bc:	add	sp, sp, #32
   1b0c0:	pop	{r4, r5, r6, lr}
   1b0c4:	b	11228 <__fprintf_chk@plt>
   1b0c8:	mov	r2, #5
   1b0cc:	ldr	r1, [pc, #476]	; 1b2b0 <__assert_fail@plt+0x9f80>
   1b0d0:	mov	r0, #0
   1b0d4:	bl	110c0 <dcgettext@plt>
   1b0d8:	ldr	r1, [r5, #8]
   1b0dc:	ldr	r2, [r5, #4]
   1b0e0:	ldr	r3, [r5]
   1b0e4:	str	r1, [sp, #52]	; 0x34
   1b0e8:	str	r2, [sp, #48]	; 0x30
   1b0ec:	mov	r1, #1
   1b0f0:	mov	r2, r0
   1b0f4:	mov	r0, r4
   1b0f8:	add	sp, sp, #32
   1b0fc:	pop	{r4, r5, r6, lr}
   1b100:	b	11228 <__fprintf_chk@plt>
   1b104:	mov	r2, #5
   1b108:	ldr	r1, [pc, #420]	; 1b2b4 <__assert_fail@plt+0x9f84>
   1b10c:	mov	r0, #0
   1b110:	bl	110c0 <dcgettext@plt>
   1b114:	ldr	r1, [r5, #8]
   1b118:	ldr	ip, [r5, #12]
   1b11c:	ldr	r2, [r5, #4]
   1b120:	ldr	r3, [r5]
   1b124:	stmib	sp, {r1, ip}
   1b128:	str	r2, [sp]
   1b12c:	mov	r1, #1
   1b130:	mov	r2, r0
   1b134:	mov	r0, r4
   1b138:	bl	11228 <__fprintf_chk@plt>
   1b13c:	b	1b060 <__assert_fail@plt+0x9d30>
   1b140:	mov	r2, #5
   1b144:	ldr	r1, [pc, #364]	; 1b2b8 <__assert_fail@plt+0x9f88>
   1b148:	mov	r0, #0
   1b14c:	bl	110c0 <dcgettext@plt>
   1b150:	add	r1, r5, #8
   1b154:	ldr	r2, [r5, #4]
   1b158:	ldm	r1, {r1, ip, lr}
   1b15c:	ldr	r3, [r5]
   1b160:	str	r2, [sp]
   1b164:	stmib	sp, {r1, ip, lr}
   1b168:	mov	r1, #1
   1b16c:	mov	r2, r0
   1b170:	mov	r0, r4
   1b174:	bl	11228 <__fprintf_chk@plt>
   1b178:	b	1b060 <__assert_fail@plt+0x9d30>
   1b17c:	mov	r2, #5
   1b180:	ldr	r1, [pc, #308]	; 1b2bc <__assert_fail@plt+0x9f8c>
   1b184:	mov	r0, #0
   1b188:	bl	110c0 <dcgettext@plt>
   1b18c:	add	r1, r5, #8
   1b190:	ldr	r2, [r5, #4]
   1b194:	ldm	r1, {r1, ip, lr}
   1b198:	ldr	r6, [r5, #20]
   1b19c:	ldr	r3, [r5]
   1b1a0:	stmib	sp, {r1, ip, lr}
   1b1a4:	mov	r1, #1
   1b1a8:	str	r2, [sp]
   1b1ac:	str	r6, [sp, #16]
   1b1b0:	mov	r2, r0
   1b1b4:	mov	r0, r4
   1b1b8:	bl	11228 <__fprintf_chk@plt>
   1b1bc:	b	1b060 <__assert_fail@plt+0x9d30>
   1b1c0:	mov	r2, #5
   1b1c4:	ldr	r1, [pc, #244]	; 1b2c0 <__assert_fail@plt+0x9f90>
   1b1c8:	mov	r0, #0
   1b1cc:	bl	110c0 <dcgettext@plt>
   1b1d0:	ldr	r2, [r5, #24]
   1b1d4:	ldr	r3, [r5]
   1b1d8:	ldr	r6, [r5, #20]
   1b1dc:	ldr	lr, [r5, #16]
   1b1e0:	ldr	ip, [r5, #12]
   1b1e4:	str	r2, [sp, #20]
   1b1e8:	ldr	r1, [r5, #8]
   1b1ec:	ldr	r2, [r5, #4]
   1b1f0:	str	r6, [sp, #16]
   1b1f4:	stmib	sp, {r1, ip, lr}
   1b1f8:	mov	r1, #1
   1b1fc:	str	r2, [sp]
   1b200:	mov	r2, r0
   1b204:	mov	r0, r4
   1b208:	bl	11228 <__fprintf_chk@plt>
   1b20c:	b	1b060 <__assert_fail@plt+0x9d30>
   1b210:	mov	r2, #5
   1b214:	ldr	r1, [pc, #168]	; 1b2c4 <__assert_fail@plt+0x9f94>
   1b218:	mov	r0, #0
   1b21c:	bl	110c0 <dcgettext@plt>
   1b220:	ldr	r1, [r5, #28]
   1b224:	ldr	r2, [r5, #24]
   1b228:	ldr	r3, [r5]
   1b22c:	ldr	r6, [r5, #20]
   1b230:	ldr	lr, [r5, #16]
   1b234:	str	r1, [sp, #24]
   1b238:	ldr	ip, [r5, #12]
   1b23c:	str	r2, [sp, #20]
   1b240:	ldr	r1, [r5, #8]
   1b244:	ldr	r2, [r5, #4]
   1b248:	str	r6, [sp, #16]
   1b24c:	stmib	sp, {r1, ip, lr}
   1b250:	mov	r1, #1
   1b254:	str	r2, [sp]
   1b258:	mov	r2, r0
   1b25c:	mov	r0, r4
   1b260:	bl	11228 <__fprintf_chk@plt>
   1b264:	b	1b060 <__assert_fail@plt+0x9d30>
   1b268:	str	r3, [sp]
   1b26c:	mov	r1, #1
   1b270:	mov	r3, r2
   1b274:	ldr	r2, [pc, #76]	; 1b2c8 <__assert_fail@plt+0x9f98>
   1b278:	bl	11228 <__fprintf_chk@plt>
   1b27c:	b	1af68 <__assert_fail@plt+0x9c38>
   1b280:	mov	r2, #5
   1b284:	ldr	r1, [pc, #64]	; 1b2cc <__assert_fail@plt+0x9f9c>
   1b288:	b	1b00c <__assert_fail@plt+0x9cdc>
   1b28c:	ldrdeq	lr, [r1], -ip
   1b290:	strdeq	lr, [r1], -r0
   1b294:	andeq	r0, r0, r6, ror #15
   1b298:	andeq	lr, r1, r8, asr #31
   1b29c:	strdeq	lr, [r1], -r4
   1b2a0:	andeq	lr, r1, r0, lsr #27
   1b2a4:	ldrdeq	lr, [r1], -r0
   1b2a8:	andeq	lr, r1, r4, asr #27
   1b2ac:	ldrdeq	lr, [r1], -r4
   1b2b0:	andeq	lr, r1, ip, ror #27
   1b2b4:	andeq	lr, r1, r8, lsl #28
   1b2b8:	andeq	lr, r1, r8, lsr #28
   1b2bc:	andeq	lr, r1, ip, asr #28
   1b2c0:	andeq	lr, r1, r4, ror lr
   1b2c4:	andeq	lr, r1, r0, lsr #29
   1b2c8:	andeq	lr, r1, r8, ror #25
   1b2cc:	andeq	lr, r1, r4, lsl #30
   1b2d0:	push	{r4, r5, lr}
   1b2d4:	sub	sp, sp, #12
   1b2d8:	ldr	r5, [sp, #24]
   1b2dc:	ldr	ip, [r5]
   1b2e0:	cmp	ip, #0
   1b2e4:	beq	1b300 <__assert_fail@plt+0x9fd0>
   1b2e8:	mov	lr, r5
   1b2ec:	mov	ip, #0
   1b2f0:	ldr	r4, [lr, #4]!
   1b2f4:	add	ip, ip, #1
   1b2f8:	cmp	r4, #0
   1b2fc:	bne	1b2f0 <__assert_fail@plt+0x9fc0>
   1b300:	stm	sp, {r5, ip}
   1b304:	bl	1af38 <__assert_fail@plt+0x9c08>
   1b308:	add	sp, sp, #12
   1b30c:	pop	{r4, r5, pc}
   1b310:	push	{r4, r5, lr}
   1b314:	sub	sp, sp, #76	; 0x4c
   1b318:	mov	r5, r0
   1b31c:	ldr	ip, [sp, #88]	; 0x58
   1b320:	ldr	r0, [ip]
   1b324:	cmp	r0, #0
   1b328:	str	r0, [sp, #32]
   1b32c:	beq	1b700 <__assert_fail@plt+0xa3d0>
   1b330:	ldr	r0, [ip, #4]
   1b334:	cmp	r0, #0
   1b338:	str	r0, [sp, #36]	; 0x24
   1b33c:	beq	1b708 <__assert_fail@plt+0xa3d8>
   1b340:	ldr	r0, [ip, #8]
   1b344:	cmp	r0, #0
   1b348:	str	r0, [sp, #40]	; 0x28
   1b34c:	beq	1b710 <__assert_fail@plt+0xa3e0>
   1b350:	ldr	r0, [ip, #12]
   1b354:	cmp	r0, #0
   1b358:	str	r0, [sp, #44]	; 0x2c
   1b35c:	beq	1b718 <__assert_fail@plt+0xa3e8>
   1b360:	ldr	r0, [ip, #16]
   1b364:	cmp	r0, #0
   1b368:	str	r0, [sp, #48]	; 0x30
   1b36c:	beq	1b720 <__assert_fail@plt+0xa3f0>
   1b370:	ldr	r0, [ip, #20]
   1b374:	cmp	r0, #0
   1b378:	str	r0, [sp, #52]	; 0x34
   1b37c:	beq	1b728 <__assert_fail@plt+0xa3f8>
   1b380:	ldr	r0, [ip, #24]
   1b384:	cmp	r0, #0
   1b388:	str	r0, [sp, #56]	; 0x38
   1b38c:	beq	1b730 <__assert_fail@plt+0xa400>
   1b390:	ldr	r0, [ip, #28]
   1b394:	cmp	r0, #0
   1b398:	str	r0, [sp, #60]	; 0x3c
   1b39c:	beq	1b738 <__assert_fail@plt+0xa408>
   1b3a0:	ldr	r0, [ip, #32]
   1b3a4:	cmp	r0, #0
   1b3a8:	str	r0, [sp, #64]	; 0x40
   1b3ac:	beq	1b740 <__assert_fail@plt+0xa410>
   1b3b0:	ldr	r0, [ip, #36]	; 0x24
   1b3b4:	cmp	r0, #0
   1b3b8:	movne	r4, #10
   1b3bc:	moveq	r4, #9
   1b3c0:	cmp	r1, #0
   1b3c4:	beq	1b6d8 <__assert_fail@plt+0xa3a8>
   1b3c8:	stm	sp, {r2, r3}
   1b3cc:	mov	r0, r5
   1b3d0:	mov	r3, r1
   1b3d4:	ldr	r2, [pc, #876]	; 1b748 <__assert_fail@plt+0xa418>
   1b3d8:	mov	r1, #1
   1b3dc:	bl	11228 <__fprintf_chk@plt>
   1b3e0:	mov	r2, #5
   1b3e4:	ldr	r1, [pc, #864]	; 1b74c <__assert_fail@plt+0xa41c>
   1b3e8:	mov	r0, #0
   1b3ec:	bl	110c0 <dcgettext@plt>
   1b3f0:	ldr	r3, [pc, #856]	; 1b750 <__assert_fail@plt+0xa420>
   1b3f4:	ldr	r2, [pc, #856]	; 1b754 <__assert_fail@plt+0xa424>
   1b3f8:	str	r3, [sp]
   1b3fc:	mov	r1, #1
   1b400:	mov	r3, r0
   1b404:	mov	r0, r5
   1b408:	bl	11228 <__fprintf_chk@plt>
   1b40c:	mov	r1, r5
   1b410:	mov	r0, #10
   1b414:	bl	110b4 <fputc_unlocked@plt>
   1b418:	mov	r2, #5
   1b41c:	ldr	r1, [pc, #820]	; 1b758 <__assert_fail@plt+0xa428>
   1b420:	mov	r0, #0
   1b424:	bl	110c0 <dcgettext@plt>
   1b428:	mov	r1, #1
   1b42c:	ldr	r3, [pc, #808]	; 1b75c <__assert_fail@plt+0xa42c>
   1b430:	mov	r2, r0
   1b434:	mov	r0, r5
   1b438:	bl	11228 <__fprintf_chk@plt>
   1b43c:	mov	r1, r5
   1b440:	mov	r0, #10
   1b444:	bl	110b4 <fputc_unlocked@plt>
   1b448:	cmp	r4, #9
   1b44c:	ldrls	pc, [pc, r4, lsl #2]
   1b450:	b	1b6f4 <__assert_fail@plt+0xa3c4>
   1b454:	ldrdeq	fp, [r1], -r8
   1b458:	andeq	fp, r1, r0, ror #9
   1b45c:	andeq	fp, r1, ip, lsl #10
   1b460:	andeq	fp, r1, r0, asr #10
   1b464:	andeq	fp, r1, r8, ror r5
   1b468:			; <UNDEFINED> instruction: 0x0001b5b4
   1b46c:	strdeq	fp, [r1], -r0
   1b470:	andeq	fp, r1, r4, lsr r6
   1b474:	andeq	fp, r1, r0, lsl #13
   1b478:	andeq	fp, r1, ip, ror r4
   1b47c:	ldr	r1, [pc, #732]	; 1b760 <__assert_fail@plt+0xa430>
   1b480:	mov	r2, #5
   1b484:	mov	r0, #0
   1b488:	bl	110c0 <dcgettext@plt>
   1b48c:	ldr	ip, [sp, #64]	; 0x40
   1b490:	ldr	r1, [sp, #60]	; 0x3c
   1b494:	ldr	r2, [sp, #56]	; 0x38
   1b498:	ldr	lr, [sp, #48]	; 0x30
   1b49c:	str	ip, [sp, #28]
   1b4a0:	str	r1, [sp, #24]
   1b4a4:	ldr	ip, [sp, #44]	; 0x2c
   1b4a8:	ldr	r1, [sp, #40]	; 0x28
   1b4ac:	ldr	r4, [sp, #52]	; 0x34
   1b4b0:	str	r2, [sp, #20]
   1b4b4:	ldr	r2, [sp, #36]	; 0x24
   1b4b8:	stmib	sp, {r1, ip, lr}
   1b4bc:	mov	r1, #1
   1b4c0:	str	r2, [sp]
   1b4c4:	ldr	r3, [sp, #32]
   1b4c8:	str	r4, [sp, #16]
   1b4cc:	mov	r2, r0
   1b4d0:	mov	r0, r5
   1b4d4:	bl	11228 <__fprintf_chk@plt>
   1b4d8:	add	sp, sp, #76	; 0x4c
   1b4dc:	pop	{r4, r5, pc}
   1b4e0:	mov	r2, #5
   1b4e4:	ldr	r1, [pc, #632]	; 1b764 <__assert_fail@plt+0xa434>
   1b4e8:	mov	r0, #0
   1b4ec:	bl	110c0 <dcgettext@plt>
   1b4f0:	ldr	r3, [sp, #32]
   1b4f4:	mov	r1, #1
   1b4f8:	mov	r2, r0
   1b4fc:	mov	r0, r5
   1b500:	add	sp, sp, #76	; 0x4c
   1b504:	pop	{r4, r5, lr}
   1b508:	b	11228 <__fprintf_chk@plt>
   1b50c:	mov	r2, #5
   1b510:	ldr	r1, [pc, #592]	; 1b768 <__assert_fail@plt+0xa438>
   1b514:	mov	r0, #0
   1b518:	bl	110c0 <dcgettext@plt>
   1b51c:	ldr	r2, [sp, #36]	; 0x24
   1b520:	ldr	r3, [sp, #32]
   1b524:	str	r2, [sp, #88]	; 0x58
   1b528:	mov	r1, #1
   1b52c:	mov	r2, r0
   1b530:	mov	r0, r5
   1b534:	add	sp, sp, #76	; 0x4c
   1b538:	pop	{r4, r5, lr}
   1b53c:	b	11228 <__fprintf_chk@plt>
   1b540:	mov	r2, #5
   1b544:	ldr	r1, [pc, #544]	; 1b76c <__assert_fail@plt+0xa43c>
   1b548:	mov	r0, #0
   1b54c:	bl	110c0 <dcgettext@plt>
   1b550:	ldr	r1, [sp, #40]	; 0x28
   1b554:	ldr	r2, [sp, #36]	; 0x24
   1b558:	str	r1, [sp, #4]
   1b55c:	str	r2, [sp]
   1b560:	ldr	r3, [sp, #32]
   1b564:	mov	r1, #1
   1b568:	mov	r2, r0
   1b56c:	mov	r0, r5
   1b570:	bl	11228 <__fprintf_chk@plt>
   1b574:	b	1b4d8 <__assert_fail@plt+0xa1a8>
   1b578:	mov	r2, #5
   1b57c:	ldr	r1, [pc, #492]	; 1b770 <__assert_fail@plt+0xa440>
   1b580:	mov	r0, #0
   1b584:	bl	110c0 <dcgettext@plt>
   1b588:	ldr	r1, [sp, #40]	; 0x28
   1b58c:	ldr	ip, [sp, #44]	; 0x2c
   1b590:	ldr	r2, [sp, #36]	; 0x24
   1b594:	ldr	r3, [sp, #32]
   1b598:	stmib	sp, {r1, ip}
   1b59c:	str	r2, [sp]
   1b5a0:	mov	r1, #1
   1b5a4:	mov	r2, r0
   1b5a8:	mov	r0, r5
   1b5ac:	bl	11228 <__fprintf_chk@plt>
   1b5b0:	b	1b4d8 <__assert_fail@plt+0xa1a8>
   1b5b4:	mov	r2, #5
   1b5b8:	ldr	r1, [pc, #436]	; 1b774 <__assert_fail@plt+0xa444>
   1b5bc:	mov	r0, #0
   1b5c0:	bl	110c0 <dcgettext@plt>
   1b5c4:	add	r1, sp, #40	; 0x28
   1b5c8:	ldr	r2, [sp, #36]	; 0x24
   1b5cc:	ldm	r1, {r1, ip, lr}
   1b5d0:	ldr	r3, [sp, #32]
   1b5d4:	str	r2, [sp]
   1b5d8:	stmib	sp, {r1, ip, lr}
   1b5dc:	mov	r1, #1
   1b5e0:	mov	r2, r0
   1b5e4:	mov	r0, r5
   1b5e8:	bl	11228 <__fprintf_chk@plt>
   1b5ec:	b	1b4d8 <__assert_fail@plt+0xa1a8>
   1b5f0:	mov	r2, #5
   1b5f4:	ldr	r1, [pc, #380]	; 1b778 <__assert_fail@plt+0xa448>
   1b5f8:	mov	r0, #0
   1b5fc:	bl	110c0 <dcgettext@plt>
   1b600:	add	r1, sp, #40	; 0x28
   1b604:	ldr	r2, [sp, #36]	; 0x24
   1b608:	ldm	r1, {r1, ip, lr}
   1b60c:	ldr	r4, [sp, #52]	; 0x34
   1b610:	str	r2, [sp]
   1b614:	stmib	sp, {r1, ip, lr}
   1b618:	mov	r1, #1
   1b61c:	ldr	r3, [sp, #32]
   1b620:	str	r4, [sp, #16]
   1b624:	mov	r2, r0
   1b628:	mov	r0, r5
   1b62c:	bl	11228 <__fprintf_chk@plt>
   1b630:	b	1b4d8 <__assert_fail@plt+0xa1a8>
   1b634:	mov	r2, #5
   1b638:	ldr	r1, [pc, #316]	; 1b77c <__assert_fail@plt+0xa44c>
   1b63c:	mov	r0, #0
   1b640:	bl	110c0 <dcgettext@plt>
   1b644:	add	r1, sp, #40	; 0x28
   1b648:	ldr	r2, [sp, #56]	; 0x38
   1b64c:	ldm	r1, {r1, ip, lr}
   1b650:	ldr	r4, [sp, #52]	; 0x34
   1b654:	str	r2, [sp, #20]
   1b658:	ldr	r2, [sp, #36]	; 0x24
   1b65c:	stmib	sp, {r1, ip, lr}
   1b660:	mov	r1, #1
   1b664:	str	r2, [sp]
   1b668:	ldr	r3, [sp, #32]
   1b66c:	str	r4, [sp, #16]
   1b670:	mov	r2, r0
   1b674:	mov	r0, r5
   1b678:	bl	11228 <__fprintf_chk@plt>
   1b67c:	b	1b4d8 <__assert_fail@plt+0xa1a8>
   1b680:	mov	r2, #5
   1b684:	ldr	r1, [pc, #244]	; 1b780 <__assert_fail@plt+0xa450>
   1b688:	mov	r0, #0
   1b68c:	bl	110c0 <dcgettext@plt>
   1b690:	ldr	r1, [sp, #60]	; 0x3c
   1b694:	ldr	r2, [sp, #56]	; 0x38
   1b698:	ldr	lr, [sp, #48]	; 0x30
   1b69c:	ldr	ip, [sp, #44]	; 0x2c
   1b6a0:	str	r1, [sp, #24]
   1b6a4:	ldr	r1, [sp, #40]	; 0x28
   1b6a8:	ldr	r4, [sp, #52]	; 0x34
   1b6ac:	str	r2, [sp, #20]
   1b6b0:	ldr	r2, [sp, #36]	; 0x24
   1b6b4:	stmib	sp, {r1, ip, lr}
   1b6b8:	mov	r1, #1
   1b6bc:	str	r2, [sp]
   1b6c0:	ldr	r3, [sp, #32]
   1b6c4:	str	r4, [sp, #16]
   1b6c8:	mov	r2, r0
   1b6cc:	mov	r0, r5
   1b6d0:	bl	11228 <__fprintf_chk@plt>
   1b6d4:	b	1b4d8 <__assert_fail@plt+0xa1a8>
   1b6d8:	str	r3, [sp]
   1b6dc:	mov	r1, #1
   1b6e0:	mov	r3, r2
   1b6e4:	mov	r0, r5
   1b6e8:	ldr	r2, [pc, #148]	; 1b784 <__assert_fail@plt+0xa454>
   1b6ec:	bl	11228 <__fprintf_chk@plt>
   1b6f0:	b	1b3e0 <__assert_fail@plt+0xa0b0>
   1b6f4:	mov	r2, #5
   1b6f8:	ldr	r1, [pc, #136]	; 1b788 <__assert_fail@plt+0xa458>
   1b6fc:	b	1b484 <__assert_fail@plt+0xa154>
   1b700:	mov	r4, r0
   1b704:	b	1b3c0 <__assert_fail@plt+0xa090>
   1b708:	mov	r4, #1
   1b70c:	b	1b3c0 <__assert_fail@plt+0xa090>
   1b710:	mov	r4, #2
   1b714:	b	1b3c0 <__assert_fail@plt+0xa090>
   1b718:	mov	r4, #3
   1b71c:	b	1b3c0 <__assert_fail@plt+0xa090>
   1b720:	mov	r4, #4
   1b724:	b	1b3c0 <__assert_fail@plt+0xa090>
   1b728:	mov	r4, #5
   1b72c:	b	1b3c0 <__assert_fail@plt+0xa090>
   1b730:	mov	r4, #6
   1b734:	b	1b3c0 <__assert_fail@plt+0xa090>
   1b738:	mov	r4, #7
   1b73c:	b	1b3c0 <__assert_fail@plt+0xa090>
   1b740:	mov	r4, #8
   1b744:	b	1b3c0 <__assert_fail@plt+0xa090>
   1b748:	ldrdeq	lr, [r1], -ip
   1b74c:	strdeq	lr, [r1], -r0
   1b750:	andeq	r0, r0, r6, ror #15
   1b754:	andeq	lr, r1, r8, asr #31
   1b758:	strdeq	lr, [r1], -r4
   1b75c:	andeq	lr, r1, r0, lsr #27
   1b760:	ldrdeq	lr, [r1], -r0
   1b764:	andeq	lr, r1, r4, asr #27
   1b768:	ldrdeq	lr, [r1], -r4
   1b76c:	andeq	lr, r1, ip, ror #27
   1b770:	andeq	lr, r1, r8, lsl #28
   1b774:	andeq	lr, r1, r8, lsr #28
   1b778:	andeq	lr, r1, ip, asr #28
   1b77c:	andeq	lr, r1, r4, ror lr
   1b780:	andeq	lr, r1, r0, lsr #29
   1b784:	andeq	lr, r1, r8, ror #25
   1b788:	andeq	lr, r1, r4, lsl #30
   1b78c:	push	{r3}		; (str r3, [sp, #-4]!)
   1b790:	push	{lr}		; (str lr, [sp, #-4]!)
   1b794:	sub	sp, sp, #56	; 0x38
   1b798:	add	r3, sp, #64	; 0x40
   1b79c:	ldr	ip, [sp, #64]	; 0x40
   1b7a0:	str	r3, [sp, #12]
   1b7a4:	cmp	ip, #0
   1b7a8:	str	ip, [sp, #16]
   1b7ac:	beq	1b844 <__assert_fail@plt+0xa514>
   1b7b0:	ldr	ip, [sp, #68]	; 0x44
   1b7b4:	cmp	ip, #0
   1b7b8:	str	ip, [sp, #20]
   1b7bc:	beq	1b864 <__assert_fail@plt+0xa534>
   1b7c0:	ldr	ip, [sp, #72]	; 0x48
   1b7c4:	cmp	ip, #0
   1b7c8:	str	ip, [sp, #24]
   1b7cc:	beq	1b86c <__assert_fail@plt+0xa53c>
   1b7d0:	ldr	ip, [sp, #76]	; 0x4c
   1b7d4:	cmp	ip, #0
   1b7d8:	str	ip, [sp, #28]
   1b7dc:	beq	1b874 <__assert_fail@plt+0xa544>
   1b7e0:	ldr	ip, [sp, #80]	; 0x50
   1b7e4:	cmp	ip, #0
   1b7e8:	str	ip, [sp, #32]
   1b7ec:	beq	1b87c <__assert_fail@plt+0xa54c>
   1b7f0:	ldr	ip, [sp, #84]	; 0x54
   1b7f4:	cmp	ip, #0
   1b7f8:	str	ip, [sp, #36]	; 0x24
   1b7fc:	beq	1b884 <__assert_fail@plt+0xa554>
   1b800:	ldr	ip, [sp, #88]	; 0x58
   1b804:	cmp	ip, #0
   1b808:	str	ip, [sp, #40]	; 0x28
   1b80c:	beq	1b88c <__assert_fail@plt+0xa55c>
   1b810:	ldr	ip, [sp, #92]	; 0x5c
   1b814:	cmp	ip, #0
   1b818:	str	ip, [sp, #44]	; 0x2c
   1b81c:	beq	1b894 <__assert_fail@plt+0xa564>
   1b820:	ldr	ip, [sp, #96]	; 0x60
   1b824:	cmp	ip, #0
   1b828:	str	ip, [sp, #48]	; 0x30
   1b82c:	beq	1b89c <__assert_fail@plt+0xa56c>
   1b830:	ldr	ip, [sp, #100]	; 0x64
   1b834:	cmp	ip, #0
   1b838:	str	ip, [sp, #52]	; 0x34
   1b83c:	movne	ip, #10
   1b840:	moveq	ip, #9
   1b844:	add	r3, sp, #16
   1b848:	stm	sp, {r3, ip}
   1b84c:	ldr	r3, [sp, #60]	; 0x3c
   1b850:	bl	1af38 <__assert_fail@plt+0x9c08>
   1b854:	add	sp, sp, #56	; 0x38
   1b858:	pop	{lr}		; (ldr lr, [sp], #4)
   1b85c:	add	sp, sp, #4
   1b860:	bx	lr
   1b864:	mov	ip, #1
   1b868:	b	1b844 <__assert_fail@plt+0xa514>
   1b86c:	mov	ip, #2
   1b870:	b	1b844 <__assert_fail@plt+0xa514>
   1b874:	mov	ip, #3
   1b878:	b	1b844 <__assert_fail@plt+0xa514>
   1b87c:	mov	ip, #4
   1b880:	b	1b844 <__assert_fail@plt+0xa514>
   1b884:	mov	ip, #5
   1b888:	b	1b844 <__assert_fail@plt+0xa514>
   1b88c:	mov	ip, #6
   1b890:	b	1b844 <__assert_fail@plt+0xa514>
   1b894:	mov	ip, #7
   1b898:	b	1b844 <__assert_fail@plt+0xa514>
   1b89c:	mov	ip, #8
   1b8a0:	b	1b844 <__assert_fail@plt+0xa514>
   1b8a4:	ldr	r3, [pc, #116]	; 1b920 <__assert_fail@plt+0xa5f0>
   1b8a8:	push	{r4, lr}
   1b8ac:	mov	r0, #10
   1b8b0:	ldr	r1, [r3]
   1b8b4:	bl	110b4 <fputc_unlocked@plt>
   1b8b8:	mov	r2, #5
   1b8bc:	ldr	r1, [pc, #96]	; 1b924 <__assert_fail@plt+0xa5f4>
   1b8c0:	mov	r0, #0
   1b8c4:	bl	110c0 <dcgettext@plt>
   1b8c8:	ldr	r2, [pc, #88]	; 1b928 <__assert_fail@plt+0xa5f8>
   1b8cc:	mov	r1, r0
   1b8d0:	mov	r0, #1
   1b8d4:	bl	11210 <__printf_chk@plt>
   1b8d8:	mov	r2, #5
   1b8dc:	ldr	r1, [pc, #72]	; 1b92c <__assert_fail@plt+0xa5fc>
   1b8e0:	mov	r0, #0
   1b8e4:	bl	110c0 <dcgettext@plt>
   1b8e8:	ldr	r3, [pc, #64]	; 1b930 <__assert_fail@plt+0xa600>
   1b8ec:	ldr	r2, [pc, #64]	; 1b934 <__assert_fail@plt+0xa604>
   1b8f0:	mov	r1, r0
   1b8f4:	mov	r0, #1
   1b8f8:	bl	11210 <__printf_chk@plt>
   1b8fc:	mov	r2, #5
   1b900:	ldr	r1, [pc, #48]	; 1b938 <__assert_fail@plt+0xa608>
   1b904:	mov	r0, #0
   1b908:	bl	110c0 <dcgettext@plt>
   1b90c:	ldr	r2, [pc, #40]	; 1b93c <__assert_fail@plt+0xa60c>
   1b910:	pop	{r4, lr}
   1b914:	mov	r1, r0
   1b918:	mov	r0, #1
   1b91c:	b	11210 <__printf_chk@plt>
   1b920:	muleq	r3, r4, r1
   1b924:	andeq	lr, r1, r0, asr #30
   1b928:	andeq	lr, r1, r4, asr pc
   1b92c:	andeq	lr, r1, ip, ror #30
   1b930:	andeq	lr, r1, r8, lsl #9
   1b934:			; <UNDEFINED> instruction: 0x0001e4b0
   1b938:	andeq	lr, r1, r0, lsl #31
   1b93c:	andeq	lr, r1, r8, lsr #31
   1b940:	push	{r4, r5, r6, lr}
   1b944:	mov	r6, r0
   1b948:	mov	r5, r1
   1b94c:	mov	r4, r2
   1b950:	bl	1d4bc <__assert_fail@plt+0xc18c>
   1b954:	cmp	r0, #0
   1b958:	popne	{r4, r5, r6, pc}
   1b95c:	cmp	r6, #0
   1b960:	beq	1b970 <__assert_fail@plt+0xa640>
   1b964:	cmp	r5, #0
   1b968:	cmpne	r4, #0
   1b96c:	popeq	{r4, r5, r6, pc}
   1b970:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1b974:	push	{r4, lr}
   1b978:	bl	1ce94 <__assert_fail@plt+0xbb64>
   1b97c:	cmp	r0, #0
   1b980:	popne	{r4, pc}
   1b984:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1b988:	push	{r4, lr}
   1b98c:	bl	1ce94 <__assert_fail@plt+0xbb64>
   1b990:	cmp	r0, #0
   1b994:	popne	{r4, pc}
   1b998:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1b99c:	push	{r4, lr}
   1b9a0:	bl	1ce94 <__assert_fail@plt+0xbb64>
   1b9a4:	cmp	r0, #0
   1b9a8:	popne	{r4, pc}
   1b9ac:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1b9b0:	push	{r4, r5, r6, lr}
   1b9b4:	mov	r5, r0
   1b9b8:	mov	r4, r1
   1b9bc:	bl	1cec0 <__assert_fail@plt+0xbb90>
   1b9c0:	cmp	r0, #0
   1b9c4:	popne	{r4, r5, r6, pc}
   1b9c8:	adds	r4, r4, #0
   1b9cc:	movne	r4, #1
   1b9d0:	cmp	r5, #0
   1b9d4:	orreq	r4, r4, #1
   1b9d8:	cmp	r4, #0
   1b9dc:	popeq	{r4, r5, r6, pc}
   1b9e0:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1b9e4:	push	{r4, lr}
   1b9e8:	cmp	r1, #0
   1b9ec:	orreq	r1, r1, #1
   1b9f0:	bl	1cec0 <__assert_fail@plt+0xbb90>
   1b9f4:	cmp	r0, #0
   1b9f8:	popne	{r4, pc}
   1b9fc:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1ba00:	push	{r4, r5, r6, lr}
   1ba04:	mov	r6, r0
   1ba08:	mov	r5, r1
   1ba0c:	mov	r4, r2
   1ba10:	bl	1d4bc <__assert_fail@plt+0xc18c>
   1ba14:	cmp	r0, #0
   1ba18:	popne	{r4, r5, r6, pc}
   1ba1c:	cmp	r6, #0
   1ba20:	beq	1ba30 <__assert_fail@plt+0xa700>
   1ba24:	cmp	r5, #0
   1ba28:	cmpne	r4, #0
   1ba2c:	popeq	{r4, r5, r6, pc}
   1ba30:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1ba34:	cmp	r2, #0
   1ba38:	cmpne	r1, #0
   1ba3c:	moveq	r2, #1
   1ba40:	moveq	r1, r2
   1ba44:	push	{r4, lr}
   1ba48:	bl	1d4bc <__assert_fail@plt+0xc18c>
   1ba4c:	cmp	r0, #0
   1ba50:	popne	{r4, pc}
   1ba54:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1ba58:	push	{r4, lr}
   1ba5c:	mov	r2, r1
   1ba60:	mov	r1, r0
   1ba64:	mov	r0, #0
   1ba68:	bl	1d4bc <__assert_fail@plt+0xc18c>
   1ba6c:	cmp	r0, #0
   1ba70:	popne	{r4, pc}
   1ba74:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1ba78:	cmp	r1, #0
   1ba7c:	cmpne	r0, #0
   1ba80:	moveq	r2, #1
   1ba84:	movne	r2, r1
   1ba88:	moveq	r1, r2
   1ba8c:	movne	r1, r0
   1ba90:	push	{r4, lr}
   1ba94:	mov	r0, #0
   1ba98:	bl	1d4bc <__assert_fail@plt+0xc18c>
   1ba9c:	cmp	r0, #0
   1baa0:	popne	{r4, pc}
   1baa4:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1baa8:	cmp	r0, #0
   1baac:	push	{r4, r5, r6, lr}
   1bab0:	mov	r5, r1
   1bab4:	ldr	r4, [r1]
   1bab8:	beq	1baf4 <__assert_fail@plt+0xa7c4>
   1babc:	lsr	r2, r4, #1
   1bac0:	add	r3, r2, #1
   1bac4:	mvn	r3, r3
   1bac8:	cmp	r4, r3
   1bacc:	bhi	1bb10 <__assert_fail@plt+0xa7e0>
   1bad0:	add	r4, r4, #1
   1bad4:	add	r4, r4, r2
   1bad8:	mov	r1, r4
   1badc:	mov	r2, #1
   1bae0:	bl	1d4bc <__assert_fail@plt+0xc18c>
   1bae4:	cmp	r0, #0
   1bae8:	beq	1bb14 <__assert_fail@plt+0xa7e4>
   1baec:	str	r4, [r5]
   1baf0:	pop	{r4, r5, r6, pc}
   1baf4:	cmp	r4, #0
   1baf8:	moveq	r4, #64	; 0x40
   1bafc:	mov	r1, r4
   1bb00:	mov	r2, #1
   1bb04:	bl	1d4bc <__assert_fail@plt+0xc18c>
   1bb08:	cmp	r0, #0
   1bb0c:	bne	1baec <__assert_fail@plt+0xa7bc>
   1bb10:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1bb14:	cmp	r4, #0
   1bb18:	bne	1bb10 <__assert_fail@plt+0xa7e0>
   1bb1c:	str	r4, [r5]
   1bb20:	pop	{r4, r5, r6, pc}
   1bb24:	cmp	r0, #0
   1bb28:	push	{r4, r5, r6, lr}
   1bb2c:	mov	r5, r1
   1bb30:	ldr	r4, [r1]
   1bb34:	mov	r6, r2
   1bb38:	beq	1bb7c <__assert_fail@plt+0xa84c>
   1bb3c:	lsr	r1, r4, #1
   1bb40:	add	r3, r1, #1
   1bb44:	mvn	r3, r3
   1bb48:	cmp	r4, r3
   1bb4c:	bhi	1bbb4 <__assert_fail@plt+0xa884>
   1bb50:	add	r4, r4, #1
   1bb54:	add	r4, r4, r1
   1bb58:	mov	r1, r4
   1bb5c:	bl	1d4bc <__assert_fail@plt+0xc18c>
   1bb60:	cmp	r0, #0
   1bb64:	bne	1bb74 <__assert_fail@plt+0xa844>
   1bb68:	cmp	r4, #0
   1bb6c:	cmpne	r6, #0
   1bb70:	bne	1bbb4 <__assert_fail@plt+0xa884>
   1bb74:	str	r4, [r5]
   1bb78:	pop	{r4, r5, r6, pc}
   1bb7c:	cmp	r4, #0
   1bb80:	bne	1bb9c <__assert_fail@plt+0xa86c>
   1bb84:	mov	r1, r2
   1bb88:	mov	r0, #64	; 0x40
   1bb8c:	bl	1d608 <__assert_fail@plt+0xc2d8>
   1bb90:	cmp	r0, #0
   1bb94:	movne	r4, r0
   1bb98:	addeq	r4, r0, #1
   1bb9c:	mov	r2, r6
   1bba0:	mov	r1, r4
   1bba4:	mov	r0, #0
   1bba8:	bl	1d4bc <__assert_fail@plt+0xc18c>
   1bbac:	cmp	r0, #0
   1bbb0:	bne	1bb74 <__assert_fail@plt+0xa844>
   1bbb4:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1bbb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbbc:	sub	sp, sp, #12
   1bbc0:	ldr	r6, [r1]
   1bbc4:	mov	r8, r1
   1bbc8:	mov	r9, r0
   1bbcc:	asrs	r4, r6, #1
   1bbd0:	mov	sl, r2
   1bbd4:	mov	fp, r3
   1bbd8:	ldr	r7, [sp, #48]	; 0x30
   1bbdc:	bmi	1bd58 <__assert_fail@plt+0xaa28>
   1bbe0:	mvn	r1, #-2147483648	; 0x80000000
   1bbe4:	sub	r1, r1, r4
   1bbe8:	cmp	r6, r1
   1bbec:	movle	r1, #0
   1bbf0:	movgt	r1, #1
   1bbf4:	mvn	r3, fp
   1bbf8:	cmp	r1, #0
   1bbfc:	addeq	r4, r4, r6
   1bc00:	mvnne	r4, #-2147483648	; 0x80000000
   1bc04:	lsr	r3, r3, #31
   1bc08:	cmp	fp, r4
   1bc0c:	movge	r2, #0
   1bc10:	andlt	r2, r3, #1
   1bc14:	cmp	r2, #0
   1bc18:	beq	1bd08 <__assert_fail@plt+0xa9d8>
   1bc1c:	cmp	r7, #0
   1bc20:	blt	1bdf0 <__assert_fail@plt+0xaac0>
   1bc24:	bne	1bde8 <__assert_fail@plt+0xaab8>
   1bc28:	mov	r5, #64	; 0x40
   1bc2c:	mov	r1, r7
   1bc30:	mov	r0, r5
   1bc34:	str	r3, [sp, #4]
   1bc38:	bl	1d814 <__assert_fail@plt+0xc4e4>
   1bc3c:	mov	r1, r7
   1bc40:	mov	r4, r0
   1bc44:	mov	r0, r5
   1bc48:	bl	1da34 <__assert_fail@plt+0xc704>
   1bc4c:	ldr	r3, [sp, #4]
   1bc50:	sub	r5, r5, r1
   1bc54:	cmp	r9, #0
   1bc58:	sub	r2, r4, r6
   1bc5c:	streq	r9, [r8]
   1bc60:	cmp	r2, sl
   1bc64:	bge	1bce8 <__assert_fail@plt+0xa9b8>
   1bc68:	cmp	sl, #0
   1bc6c:	blt	1bd88 <__assert_fail@plt+0xaa58>
   1bc70:	cmp	r6, #0
   1bc74:	blt	1bc94 <__assert_fail@plt+0xa964>
   1bc78:	mvn	r2, #-2147483648	; 0x80000000
   1bc7c:	sub	r2, r2, sl
   1bc80:	cmp	r6, r2
   1bc84:	movle	r2, #0
   1bc88:	movgt	r2, #1
   1bc8c:	cmp	r2, #0
   1bc90:	bne	1bd84 <__assert_fail@plt+0xaa54>
   1bc94:	add	r6, r6, sl
   1bc98:	cmp	fp, r6
   1bc9c:	movge	r3, #0
   1bca0:	andlt	r3, r3, #1
   1bca4:	cmp	r3, #0
   1bca8:	mov	r4, r6
   1bcac:	bne	1bd84 <__assert_fail@plt+0xaa54>
   1bcb0:	cmp	r7, #0
   1bcb4:	blt	1bd9c <__assert_fail@plt+0xaa6c>
   1bcb8:	beq	1bce4 <__assert_fail@plt+0xa9b4>
   1bcbc:	cmp	r6, #0
   1bcc0:	blt	1be40 <__assert_fail@plt+0xab10>
   1bcc4:	mov	r1, r7
   1bcc8:	mvn	r0, #-2147483648	; 0x80000000
   1bccc:	bl	1d814 <__assert_fail@plt+0xc4e4>
   1bcd0:	cmp	r6, r0
   1bcd4:	movle	r0, #0
   1bcd8:	movgt	r0, #1
   1bcdc:	cmp	r0, #0
   1bce0:	bne	1bd84 <__assert_fail@plt+0xaa54>
   1bce4:	mul	r5, r6, r7
   1bce8:	mov	r1, r5
   1bcec:	mov	r0, r9
   1bcf0:	bl	1cec0 <__assert_fail@plt+0xbb90>
   1bcf4:	cmp	r0, #0
   1bcf8:	beq	1bd6c <__assert_fail@plt+0xaa3c>
   1bcfc:	str	r4, [r8]
   1bd00:	add	sp, sp, #12
   1bd04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd08:	cmp	r7, #0
   1bd0c:	blt	1bdc8 <__assert_fail@plt+0xaa98>
   1bd10:	beq	1bc28 <__assert_fail@plt+0xa8f8>
   1bd14:	cmp	r4, #0
   1bd18:	blt	1bdf8 <__assert_fail@plt+0xaac8>
   1bd1c:	mov	r1, r7
   1bd20:	mvn	r0, #-2147483648	; 0x80000000
   1bd24:	str	r3, [sp, #4]
   1bd28:	bl	1d814 <__assert_fail@plt+0xc4e4>
   1bd2c:	ldr	r3, [sp, #4]
   1bd30:	cmp	r0, r4
   1bd34:	movge	r0, #0
   1bd38:	movlt	r0, #1
   1bd3c:	cmp	r0, #0
   1bd40:	mvnne	r5, #-2147483648	; 0x80000000
   1bd44:	bne	1bc2c <__assert_fail@plt+0xa8fc>
   1bd48:	mul	r5, r7, r4
   1bd4c:	cmp	r5, #63	; 0x3f
   1bd50:	bgt	1bc54 <__assert_fail@plt+0xa924>
   1bd54:	b	1bc28 <__assert_fail@plt+0xa8f8>
   1bd58:	rsb	r1, r4, #-2147483648	; 0x80000000
   1bd5c:	cmp	r6, r1
   1bd60:	movge	r1, #0
   1bd64:	movlt	r1, #1
   1bd68:	b	1bbf4 <__assert_fail@plt+0xa8c4>
   1bd6c:	adds	r5, r5, #0
   1bd70:	movne	r5, #1
   1bd74:	cmp	r9, #0
   1bd78:	orreq	r5, r5, #1
   1bd7c:	cmp	r5, #0
   1bd80:	beq	1bcfc <__assert_fail@plt+0xa9cc>
   1bd84:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1bd88:	rsb	r2, sl, #-2147483648	; 0x80000000
   1bd8c:	cmp	r6, r2
   1bd90:	movge	r2, #0
   1bd94:	movlt	r2, #1
   1bd98:	b	1bc8c <__assert_fail@plt+0xa95c>
   1bd9c:	cmp	r6, #0
   1bda0:	blt	1be24 <__assert_fail@plt+0xaaf4>
   1bda4:	cmn	r7, #1
   1bda8:	beq	1bce4 <__assert_fail@plt+0xa9b4>
   1bdac:	mov	r1, r7
   1bdb0:	mov	r0, #-2147483648	; 0x80000000
   1bdb4:	bl	1d814 <__assert_fail@plt+0xc4e4>
   1bdb8:	cmp	r6, r0
   1bdbc:	movle	r0, #0
   1bdc0:	movgt	r0, #1
   1bdc4:	b	1bcdc <__assert_fail@plt+0xa9ac>
   1bdc8:	cmp	r4, #0
   1bdcc:	blt	1be64 <__assert_fail@plt+0xab34>
   1bdd0:	cmn	r7, #1
   1bdd4:	beq	1bd48 <__assert_fail@plt+0xaa18>
   1bdd8:	str	r3, [sp, #4]
   1bddc:	mov	r1, r7
   1bde0:	mov	r0, #-2147483648	; 0x80000000
   1bde4:	b	1bd28 <__assert_fail@plt+0xa9f8>
   1bde8:	mov	r4, fp
   1bdec:	b	1bd1c <__assert_fail@plt+0xa9ec>
   1bdf0:	mov	r4, fp
   1bdf4:	b	1bdd0 <__assert_fail@plt+0xaaa0>
   1bdf8:	cmn	r4, #1
   1bdfc:	beq	1bd48 <__assert_fail@plt+0xaa18>
   1be00:	mov	r1, r4
   1be04:	mov	r0, #-2147483648	; 0x80000000
   1be08:	str	r3, [sp, #4]
   1be0c:	bl	1d814 <__assert_fail@plt+0xc4e4>
   1be10:	ldr	r3, [sp, #4]
   1be14:	cmp	r7, r0
   1be18:	movle	r0, #0
   1be1c:	movgt	r0, #1
   1be20:	b	1bd3c <__assert_fail@plt+0xaa0c>
   1be24:	mov	r1, r7
   1be28:	mvn	r0, #-2147483648	; 0x80000000
   1be2c:	bl	1d814 <__assert_fail@plt+0xc4e4>
   1be30:	cmp	r6, r0
   1be34:	movge	r0, #0
   1be38:	movlt	r0, #1
   1be3c:	b	1bcdc <__assert_fail@plt+0xa9ac>
   1be40:	cmn	r6, #1
   1be44:	beq	1bce4 <__assert_fail@plt+0xa9b4>
   1be48:	mov	r1, r6
   1be4c:	mov	r0, #-2147483648	; 0x80000000
   1be50:	bl	1d814 <__assert_fail@plt+0xc4e4>
   1be54:	cmp	r7, r0
   1be58:	movle	r0, #0
   1be5c:	movgt	r0, #1
   1be60:	b	1bcdc <__assert_fail@plt+0xa9ac>
   1be64:	mov	r1, r7
   1be68:	mvn	r0, #-2147483648	; 0x80000000
   1be6c:	str	r3, [sp, #4]
   1be70:	bl	1d814 <__assert_fail@plt+0xc4e4>
   1be74:	ldr	r3, [sp, #4]
   1be78:	cmp	r0, r4
   1be7c:	movle	r0, #0
   1be80:	movgt	r0, #1
   1be84:	b	1bd3c <__assert_fail@plt+0xaa0c>
   1be88:	push	{r4, lr}
   1be8c:	mov	r1, #1
   1be90:	bl	1ce4c <__assert_fail@plt+0xbb1c>
   1be94:	cmp	r0, #0
   1be98:	popne	{r4, pc}
   1be9c:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1bea0:	push	{r4, lr}
   1bea4:	mov	r1, #1
   1bea8:	bl	1ce4c <__assert_fail@plt+0xbb1c>
   1beac:	cmp	r0, #0
   1beb0:	popne	{r4, pc}
   1beb4:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1beb8:	push	{r4, lr}
   1bebc:	bl	1ce4c <__assert_fail@plt+0xbb1c>
   1bec0:	cmp	r0, #0
   1bec4:	popne	{r4, pc}
   1bec8:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1becc:	push	{r4, lr}
   1bed0:	bl	1ce4c <__assert_fail@plt+0xbb1c>
   1bed4:	cmp	r0, #0
   1bed8:	popne	{r4, pc}
   1bedc:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1bee0:	push	{r4, r5, r6, lr}
   1bee4:	mov	r6, r0
   1bee8:	mov	r0, r1
   1beec:	mov	r4, r1
   1bef0:	bl	1ce94 <__assert_fail@plt+0xbb64>
   1bef4:	subs	r5, r0, #0
   1bef8:	beq	1bf10 <__assert_fail@plt+0xabe0>
   1befc:	mov	r2, r4
   1bf00:	mov	r1, r6
   1bf04:	bl	11078 <memcpy@plt>
   1bf08:	mov	r0, r5
   1bf0c:	pop	{r4, r5, r6, pc}
   1bf10:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1bf14:	push	{r4, r5, r6, lr}
   1bf18:	mov	r6, r0
   1bf1c:	mov	r0, r1
   1bf20:	mov	r4, r1
   1bf24:	bl	1ce94 <__assert_fail@plt+0xbb64>
   1bf28:	subs	r5, r0, #0
   1bf2c:	beq	1bf44 <__assert_fail@plt+0xac14>
   1bf30:	mov	r2, r4
   1bf34:	mov	r1, r6
   1bf38:	bl	11078 <memcpy@plt>
   1bf3c:	mov	r0, r5
   1bf40:	pop	{r4, r5, r6, pc}
   1bf44:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1bf48:	push	{r4, r5, r6, lr}
   1bf4c:	mov	r6, r0
   1bf50:	add	r0, r1, #1
   1bf54:	mov	r4, r1
   1bf58:	bl	1ce94 <__assert_fail@plt+0xbb64>
   1bf5c:	subs	r5, r0, #0
   1bf60:	beq	1bf80 <__assert_fail@plt+0xac50>
   1bf64:	mov	r3, #0
   1bf68:	mov	r1, r6
   1bf6c:	strb	r3, [r5, r4]
   1bf70:	mov	r2, r4
   1bf74:	bl	11078 <memcpy@plt>
   1bf78:	mov	r0, r5
   1bf7c:	pop	{r4, r5, r6, pc}
   1bf80:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1bf84:	push	{r4, r5, r6, lr}
   1bf88:	mov	r6, r0
   1bf8c:	bl	111bc <strlen@plt>
   1bf90:	add	r4, r0, #1
   1bf94:	mov	r0, r4
   1bf98:	bl	1ce94 <__assert_fail@plt+0xbb64>
   1bf9c:	subs	r5, r0, #0
   1bfa0:	beq	1bfb8 <__assert_fail@plt+0xac88>
   1bfa4:	mov	r2, r4
   1bfa8:	mov	r1, r6
   1bfac:	bl	11078 <memcpy@plt>
   1bfb0:	mov	r0, r5
   1bfb4:	pop	{r4, r5, r6, pc}
   1bfb8:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1bfbc:	ldr	r3, [pc, #44]	; 1bff0 <__assert_fail@plt+0xacc0>
   1bfc0:	push	{r4, lr}
   1bfc4:	mov	r2, #5
   1bfc8:	ldr	r1, [pc, #36]	; 1bff4 <__assert_fail@plt+0xacc4>
   1bfcc:	mov	r0, #0
   1bfd0:	ldr	r4, [r3]
   1bfd4:	bl	110c0 <dcgettext@plt>
   1bfd8:	ldr	r2, [pc, #24]	; 1bff8 <__assert_fail@plt+0xacc8>
   1bfdc:	mov	r1, #0
   1bfe0:	mov	r3, r0
   1bfe4:	mov	r0, r4
   1bfe8:	bl	11150 <error@plt>
   1bfec:	bl	112e8 <abort@plt>
   1bff0:	andeq	r0, r3, r8, lsr r1
   1bff4:	strdeq	lr, [r1], -r8
   1bff8:	andeq	lr, r1, r8, lsl #22
   1bffc:	push	{r4, lr}
   1c000:	orr	r1, r1, #512	; 0x200
   1c004:	bl	140d8 <__assert_fail@plt+0x2da8>
   1c008:	cmp	r0, #0
   1c00c:	popne	{r4, pc}
   1c010:	bl	111ec <__errno_location@plt>
   1c014:	ldr	r3, [r0]
   1c018:	cmp	r3, #22
   1c01c:	beq	1c024 <__assert_fail@plt+0xacf4>
   1c020:	bl	1bfbc <__assert_fail@plt+0xac8c>
   1c024:	ldr	r3, [pc, #12]	; 1c038 <__assert_fail@plt+0xad08>
   1c028:	mov	r2, #41	; 0x29
   1c02c:	ldr	r1, [pc, #8]	; 1c03c <__assert_fail@plt+0xad0c>
   1c030:	ldr	r0, [pc, #8]	; 1c040 <__assert_fail@plt+0xad10>
   1c034:	bl	11330 <__assert_fail@plt>
   1c038:	andeq	pc, r1, ip
   1c03c:	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
   1c040:	andeq	pc, r1, r4, lsr #32
   1c044:	ldr	r3, [r0, #48]	; 0x30
   1c048:	and	r3, r3, #17
   1c04c:	cmp	r3, #16
   1c050:	beq	1c074 <__assert_fail@plt+0xad44>
   1c054:	cmp	r3, #17
   1c058:	beq	1c064 <__assert_fail@plt+0xad34>
   1c05c:	mov	r0, #0
   1c060:	bx	lr
   1c064:	ldr	r0, [r1, #48]	; 0x30
   1c068:	adds	r0, r0, #0
   1c06c:	movne	r0, #1
   1c070:	bx	lr
   1c074:	mov	r0, #1
   1c078:	bx	lr
   1c07c:	andeq	r0, r0, r0
   1c080:	cmp	r2, #36	; 0x24
   1c084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c088:	sub	sp, sp, #52	; 0x34
   1c08c:	bhi	1ce1c <__assert_fail@plt+0xbaec>
   1c090:	cmp	r1, #0
   1c094:	mov	r6, r2
   1c098:	mov	sl, r0
   1c09c:	mov	r5, r1
   1c0a0:	mov	r8, r3
   1c0a4:	addeq	r5, sp, #44	; 0x2c
   1c0a8:	bl	111ec <__errno_location@plt>
   1c0ac:	mov	r3, #0
   1c0b0:	str	r3, [r0]
   1c0b4:	mov	fp, r0
   1c0b8:	bl	111a4 <__ctype_b_loc@plt>
   1c0bc:	ldrb	r3, [sl]
   1c0c0:	mov	r2, sl
   1c0c4:	ldr	r0, [r0]
   1c0c8:	b	1c0d0 <__assert_fail@plt+0xada0>
   1c0cc:	ldrb	r3, [r2, #1]!
   1c0d0:	lsl	r1, r3, #1
   1c0d4:	ldrh	r4, [r0, r1]
   1c0d8:	ands	r4, r4, #8192	; 0x2000
   1c0dc:	bne	1c0cc <__assert_fail@plt+0xad9c>
   1c0e0:	cmp	r3, #45	; 0x2d
   1c0e4:	bne	1c0f8 <__assert_fail@plt+0xadc8>
   1c0e8:	mov	r4, #4
   1c0ec:	mov	r0, r4
   1c0f0:	add	sp, sp, #52	; 0x34
   1c0f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0f8:	mov	r2, r6
   1c0fc:	mov	r3, r4
   1c100:	mov	r1, r5
   1c104:	mov	r0, sl
   1c108:	bl	11084 <__strtoull_internal@plt>
   1c10c:	ldr	r9, [r5]
   1c110:	cmp	sl, r9
   1c114:	mov	r6, r0
   1c118:	mov	r7, r1
   1c11c:	beq	1c164 <__assert_fail@plt+0xae34>
   1c120:	ldr	r4, [fp]
   1c124:	cmp	r4, #0
   1c128:	bne	1c154 <__assert_fail@plt+0xae24>
   1c12c:	ldr	r3, [sp, #88]	; 0x58
   1c130:	cmp	r3, #0
   1c134:	beq	1c144 <__assert_fail@plt+0xae14>
   1c138:	ldrb	sl, [r9]
   1c13c:	cmp	sl, #0
   1c140:	bne	1c198 <__assert_fail@plt+0xae68>
   1c144:	mov	r0, r4
   1c148:	strd	r6, [r8]
   1c14c:	add	sp, sp, #52	; 0x34
   1c150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c154:	cmp	r4, #34	; 0x22
   1c158:	bne	1c0e8 <__assert_fail@plt+0xadb8>
   1c15c:	mov	r4, #1
   1c160:	b	1c12c <__assert_fail@plt+0xadfc>
   1c164:	ldr	r3, [sp, #88]	; 0x58
   1c168:	cmp	r3, #0
   1c16c:	beq	1c0e8 <__assert_fail@plt+0xadb8>
   1c170:	ldrb	sl, [r9]
   1c174:	cmp	sl, #0
   1c178:	beq	1c0e8 <__assert_fail@plt+0xadb8>
   1c17c:	mov	r1, sl
   1c180:	mov	r0, r3
   1c184:	bl	111c8 <strchr@plt>
   1c188:	cmp	r0, #0
   1c18c:	movne	r6, #1
   1c190:	movne	r7, #0
   1c194:	beq	1c0e8 <__assert_fail@plt+0xadb8>
   1c198:	mov	r1, sl
   1c19c:	ldr	r0, [sp, #88]	; 0x58
   1c1a0:	bl	111c8 <strchr@plt>
   1c1a4:	cmp	r0, #0
   1c1a8:	beq	1cd08 <__assert_fail@plt+0xb9d8>
   1c1ac:	sub	r3, sl, #69	; 0x45
   1c1b0:	cmp	r3, #47	; 0x2f
   1c1b4:	ldrls	pc, [pc, r3, lsl #2]
   1c1b8:	b	1c2ac <__assert_fail@plt+0xaf7c>
   1c1bc:	andeq	ip, r1, ip, ror r2
   1c1c0:	andeq	ip, r1, ip, lsr #5
   1c1c4:	andeq	ip, r1, ip, ror r2
   1c1c8:	andeq	ip, r1, ip, lsr #5
   1c1cc:	andeq	ip, r1, ip, lsr #5
   1c1d0:	andeq	ip, r1, ip, lsr #5
   1c1d4:	andeq	ip, r1, ip, ror r2
   1c1d8:	andeq	ip, r1, ip, lsr #5
   1c1dc:	andeq	ip, r1, ip, ror r2
   1c1e0:	andeq	ip, r1, ip, lsr #5
   1c1e4:	andeq	ip, r1, ip, lsr #5
   1c1e8:	andeq	ip, r1, ip, ror r2
   1c1ec:	andeq	ip, r1, ip, lsr #5
   1c1f0:	andeq	ip, r1, ip, lsr #5
   1c1f4:	andeq	ip, r1, ip, lsr #5
   1c1f8:	andeq	ip, r1, ip, ror r2
   1c1fc:	andeq	ip, r1, ip, lsr #5
   1c200:	andeq	ip, r1, ip, lsr #5
   1c204:	andeq	ip, r1, ip, lsr #5
   1c208:	andeq	ip, r1, ip, lsr #5
   1c20c:	andeq	ip, r1, ip, ror r2
   1c210:	andeq	ip, r1, ip, ror r2
   1c214:	andeq	ip, r1, ip, lsr #5
   1c218:	andeq	ip, r1, ip, lsr #5
   1c21c:	andeq	ip, r1, ip, lsr #5
   1c220:	andeq	ip, r1, ip, lsr #5
   1c224:	andeq	ip, r1, ip, lsr #5
   1c228:	andeq	ip, r1, ip, lsr #5
   1c22c:	andeq	ip, r1, ip, lsr #5
   1c230:	andeq	ip, r1, ip, lsr #5
   1c234:	andeq	ip, r1, ip, lsr #5
   1c238:	andeq	ip, r1, ip, lsr #5
   1c23c:	andeq	ip, r1, ip, lsr #5
   1c240:	andeq	ip, r1, ip, lsr #5
   1c244:	andeq	ip, r1, ip, ror r2
   1c248:	andeq	ip, r1, ip, lsr #5
   1c24c:	andeq	ip, r1, ip, lsr #5
   1c250:	andeq	ip, r1, ip, lsr #5
   1c254:	andeq	ip, r1, ip, ror r2
   1c258:	andeq	ip, r1, ip, lsr #5
   1c25c:	andeq	ip, r1, ip, ror r2
   1c260:	andeq	ip, r1, ip, lsr #5
   1c264:	andeq	ip, r1, ip, lsr #5
   1c268:	andeq	ip, r1, ip, lsr #5
   1c26c:	andeq	ip, r1, ip, lsr #5
   1c270:	andeq	ip, r1, ip, lsr #5
   1c274:	andeq	ip, r1, ip, lsr #5
   1c278:	andeq	ip, r1, ip, ror r2
   1c27c:	mov	r1, #48	; 0x30
   1c280:	ldr	r0, [sp, #88]	; 0x58
   1c284:	bl	111c8 <strchr@plt>
   1c288:	cmp	r0, #0
   1c28c:	beq	1cd9c <__assert_fail@plt+0xba6c>
   1c290:	ldrb	r3, [r9, #1]
   1c294:	cmp	r3, #68	; 0x44
   1c298:	beq	1cd7c <__assert_fail@plt+0xba4c>
   1c29c:	cmp	r3, #105	; 0x69
   1c2a0:	beq	1cd4c <__assert_fail@plt+0xba1c>
   1c2a4:	cmp	r3, #66	; 0x42
   1c2a8:	beq	1cd7c <__assert_fail@plt+0xba4c>
   1c2ac:	ldr	r3, [pc, #2948]	; 1ce38 <__assert_fail@plt+0xbb08>
   1c2b0:	mvn	r2, #0
   1c2b4:	mov	r1, #1024	; 0x400
   1c2b8:	mov	lr, #0
   1c2bc:	strd	r2, [sp]
   1c2c0:	mov	r3, #1
   1c2c4:	str	r3, [sp, #12]
   1c2c8:	sub	sl, sl, #66	; 0x42
   1c2cc:	cmp	sl, #53	; 0x35
   1c2d0:	ldrls	pc, [pc, sl, lsl #2]
   1c2d4:	b	1cd08 <__assert_fail@plt+0xb9d8>
   1c2d8:	ldrdeq	ip, [r1], -r8
   1c2dc:	andeq	ip, r1, r8, lsl #26
   1c2e0:	andeq	ip, r1, r8, lsl #26
   1c2e4:	andeq	ip, r1, r4, asr fp
   1c2e8:	andeq	ip, r1, r8, lsl #26
   1c2ec:	muleq	r1, r0, sl
   1c2f0:	andeq	ip, r1, r8, lsl #26
   1c2f4:	andeq	ip, r1, r8, lsl #26
   1c2f8:	andeq	ip, r1, r8, lsl #26
   1c2fc:	andeq	ip, r1, r4, lsl sp
   1c300:	andeq	ip, r1, r8, lsl #26
   1c304:			; <UNDEFINED> instruction: 0x0001c3b0
   1c308:	andeq	ip, r1, r8, lsl #26
   1c30c:	andeq	ip, r1, r8, lsl #26
   1c310:	andeq	ip, r1, ip, lsr r4
   1c314:	andeq	ip, r1, r8, lsl #26
   1c318:	andeq	ip, r1, r8, lsl #26
   1c31c:	andeq	ip, r1, r8, lsl #26
   1c320:			; <UNDEFINED> instruction: 0x0001c7bc
   1c324:	andeq	ip, r1, r8, lsl #26
   1c328:	andeq	ip, r1, r8, lsl #26
   1c32c:	andeq	ip, r1, r8, lsl #26
   1c330:	andeq	ip, r1, r8, lsl #26
   1c334:	muleq	r1, r4, r5
   1c338:	strdeq	ip, [r1], -r0
   1c33c:	andeq	ip, r1, r8, lsl #26
   1c340:	andeq	ip, r1, r8, lsl #26
   1c344:	andeq	ip, r1, r8, lsl #26
   1c348:	andeq	ip, r1, r8, lsl #26
   1c34c:	andeq	ip, r1, r8, lsl #26
   1c350:	andeq	ip, r1, r8, lsl #26
   1c354:	andeq	ip, r1, r8, lsl #26
   1c358:	andeq	ip, r1, r0, asr #17
   1c35c:			; <UNDEFINED> instruction: 0x0001c8b8
   1c360:	andeq	ip, r1, r8, lsl #26
   1c364:	andeq	ip, r1, r8, lsl #26
   1c368:	andeq	ip, r1, r8, lsl #26
   1c36c:	muleq	r1, r0, sl
   1c370:	andeq	ip, r1, r8, lsl #26
   1c374:	andeq	ip, r1, r8, lsl #26
   1c378:	andeq	ip, r1, r8, lsl #26
   1c37c:	andeq	ip, r1, r4, lsl sp
   1c380:	andeq	ip, r1, r8, lsl #26
   1c384:			; <UNDEFINED> instruction: 0x0001c3b0
   1c388:	andeq	ip, r1, r8, lsl #26
   1c38c:	andeq	ip, r1, r8, lsl #26
   1c390:	andeq	ip, r1, r8, lsl #26
   1c394:	andeq	ip, r1, r8, lsl #26
   1c398:	andeq	ip, r1, r8, lsl #26
   1c39c:	andeq	ip, r1, r8, lsl #26
   1c3a0:			; <UNDEFINED> instruction: 0x0001c7bc
   1c3a4:	andeq	ip, r1, r8, lsl #26
   1c3a8:	andeq	ip, r1, r8, lsl #26
   1c3ac:	muleq	r1, ip, r8
   1c3b0:	mul	r0, r6, lr
   1c3b4:	ldrd	sl, [sp]
   1c3b8:	umull	r2, r3, r6, r1
   1c3bc:	mla	r0, r1, r7, r0
   1c3c0:	cmp	r7, fp
   1c3c4:	cmpeq	r6, sl
   1c3c8:	add	r3, r0, r3
   1c3cc:	mvnhi	r3, #0
   1c3d0:	mvnhi	r2, #0
   1c3d4:	mul	r6, r1, r3
   1c3d8:	umull	r0, r1, r1, r2
   1c3dc:	mla	lr, lr, r2, r6
   1c3e0:	ldrd	r6, [sp]
   1c3e4:	movhi	ip, #1
   1c3e8:	movls	ip, #0
   1c3ec:	cmp	r7, r3
   1c3f0:	cmpeq	r6, r2
   1c3f4:	mvncc	r0, #0
   1c3f8:	add	r1, lr, r1
   1c3fc:	mov	sl, r6
   1c400:	movcc	r1, r0
   1c404:	mov	fp, r7
   1c408:	cmp	fp, r3
   1c40c:	cmpeq	sl, r2
   1c410:	mov	r6, r0
   1c414:	mov	r7, r1
   1c418:	orrcc	ip, ip, #1
   1c41c:	ldr	r2, [sp, #12]
   1c420:	orr	r4, r4, ip
   1c424:	add	r3, r9, r2
   1c428:	str	r3, [r5]
   1c42c:	ldrb	r3, [r9, r2]
   1c430:	cmp	r3, #0
   1c434:	orrne	r4, r4, #2
   1c438:	b	1c144 <__assert_fail@plt+0xae14>
   1c43c:	ldrd	sl, [sp]
   1c440:	umull	r2, r3, r6, r1
   1c444:	mul	r0, r6, lr
   1c448:	cmp	r7, fp
   1c44c:	cmpeq	r6, sl
   1c450:	mvnhi	r2, #0
   1c454:	mla	r0, r1, r7, r0
   1c458:	umull	sl, fp, r2, r1
   1c45c:	add	r3, r0, r3
   1c460:	mul	r0, lr, r2
   1c464:	mvnhi	r3, #0
   1c468:	strd	sl, [sp, #16]
   1c46c:	ldrd	sl, [sp]
   1c470:	mla	r0, r1, r3, r0
   1c474:	ldr	ip, [sp, #20]
   1c478:	cmp	r3, fp
   1c47c:	add	r0, r0, ip
   1c480:	cmpeq	r2, sl
   1c484:	str	r0, [sp, #20]
   1c488:	bls	1c4a0 <__assert_fail@plt+0xb170>
   1c48c:	mvn	sl, #0
   1c490:	mvn	fp, #0
   1c494:	strd	sl, [sp, #16]
   1c498:	ldr	r0, [sp, #20]
   1c49c:	ldrd	sl, [sp]
   1c4a0:	cmp	r7, fp
   1c4a4:	cmpeq	r6, sl
   1c4a8:	mul	r0, r1, r0
   1c4ac:	ldrd	r6, [sp, #16]
   1c4b0:	mla	ip, lr, r6, r0
   1c4b4:	mov	r0, r6
   1c4b8:	movhi	r0, #1
   1c4bc:	movls	r0, #0
   1c4c0:	cmp	r3, fp
   1c4c4:	cmpeq	r2, sl
   1c4c8:	ldrd	r2, [sp, #16]
   1c4cc:	umull	r6, r7, r1, r6
   1c4d0:	orrhi	r0, r0, #1
   1c4d4:	cmp	fp, r3
   1c4d8:	cmpeq	sl, r2
   1c4dc:	add	r7, ip, r7
   1c4e0:	bcc	1cdec <__assert_fail@plt+0xbabc>
   1c4e4:	mov	sl, r6
   1c4e8:	mov	fp, r7
   1c4ec:	strd	r6, [sp, #24]
   1c4f0:	mul	r3, r1, fp
   1c4f4:	umull	r6, r7, r1, sl
   1c4f8:	mla	ip, lr, sl, r3
   1c4fc:	ldrd	sl, [sp]
   1c500:	ldrd	r2, [sp, #16]
   1c504:	add	r7, ip, r7
   1c508:	cmp	fp, r3
   1c50c:	cmpeq	sl, r2
   1c510:	mov	r3, fp
   1c514:	mov	r2, sl
   1c518:	ldrd	sl, [sp, #24]
   1c51c:	orrcc	r0, r0, #1
   1c520:	str	r0, [sp, #16]
   1c524:	cmp	r3, fp
   1c528:	cmpeq	r2, sl
   1c52c:	bcs	1ca84 <__assert_fail@plt+0xb754>
   1c530:	mvn	r2, #0
   1c534:	mvn	r3, #0
   1c538:	mul	ip, lr, r2
   1c53c:	ldrd	sl, [sp]
   1c540:	mla	ip, r1, r3, ip
   1c544:	umull	r6, r7, r2, r1
   1c548:	ldrd	r0, [sp, #24]
   1c54c:	add	r7, ip, r7
   1c550:	cmp	fp, r1
   1c554:	ldr	r1, [sp, #16]
   1c558:	cmpeq	sl, r0
   1c55c:	orrcc	r1, r1, #1
   1c560:	cmp	r3, fp
   1c564:	cmpeq	r2, sl
   1c568:	mvnhi	r0, #0
   1c56c:	movls	ip, r7
   1c570:	movhi	ip, r0
   1c574:	movls	r0, r6
   1c578:	cmp	r3, fp
   1c57c:	cmpeq	r2, sl
   1c580:	mov	r7, ip
   1c584:	mov	r6, r0
   1c588:	movls	ip, r1
   1c58c:	orrhi	ip, r1, #1
   1c590:	b	1c41c <__assert_fail@plt+0xb0ec>
   1c594:	ldrd	sl, [sp]
   1c598:	umull	r2, r3, r6, r1
   1c59c:	mul	r0, r6, lr
   1c5a0:	cmp	r7, fp
   1c5a4:	cmpeq	r6, sl
   1c5a8:	mvnhi	r2, #0
   1c5ac:	mla	r0, r1, r7, r0
   1c5b0:	umull	sl, fp, r2, r1
   1c5b4:	add	r3, r0, r3
   1c5b8:	mul	r0, lr, r2
   1c5bc:	mvnhi	r3, #0
   1c5c0:	strd	sl, [sp, #16]
   1c5c4:	ldrd	sl, [sp]
   1c5c8:	mla	r0, r1, r3, r0
   1c5cc:	ldr	ip, [sp, #20]
   1c5d0:	cmp	r3, fp
   1c5d4:	add	r0, r0, ip
   1c5d8:	cmpeq	r2, sl
   1c5dc:	str	r0, [sp, #20]
   1c5e0:	mvnhi	sl, #0
   1c5e4:	mvnhi	fp, #0
   1c5e8:	strdhi	sl, [sp, #16]
   1c5ec:	ldrdhi	sl, [sp]
   1c5f0:	ldr	r0, [sp, #16]
   1c5f4:	cmp	r3, fp
   1c5f8:	ldr	r3, [sp, #20]
   1c5fc:	mul	r0, lr, r0
   1c600:	cmpeq	r2, sl
   1c604:	mla	r0, r1, r3, r0
   1c608:	ldr	r3, [sp, #16]
   1c60c:	umull	r2, r3, r3, r1
   1c610:	strd	r2, [sp, #24]
   1c614:	movhi	r3, #1
   1c618:	movls	r3, #0
   1c61c:	cmp	r7, fp
   1c620:	cmpeq	r6, sl
   1c624:	ldrd	r6, [sp, #16]
   1c628:	ldr	r2, [sp, #28]
   1c62c:	movls	ip, r3
   1c630:	orrhi	ip, r3, #1
   1c634:	cmp	r7, fp
   1c638:	add	r2, r0, r2
   1c63c:	cmpeq	r6, sl
   1c640:	str	r2, [sp, #28]
   1c644:	mvnhi	r2, #0
   1c648:	mvnhi	r3, #0
   1c64c:	strdhi	r2, [sp, #24]
   1c650:	ldrd	r6, [sp, #24]
   1c654:	mul	r2, r1, r7
   1c658:	umull	sl, fp, r1, r6
   1c65c:	mla	r3, lr, r6, r2
   1c660:	ldrd	r6, [sp]
   1c664:	str	r3, [sp, #32]
   1c668:	ldrd	r2, [sp, #16]
   1c66c:	cmp	r3, r7
   1c670:	cmpeq	r2, r6
   1c674:	ldrd	r2, [sp, #24]
   1c678:	orrhi	ip, ip, #1
   1c67c:	cmp	r3, r7
   1c680:	ldr	r3, [sp, #32]
   1c684:	cmpeq	r2, r6
   1c688:	add	r2, r3, fp
   1c68c:	mov	fp, r2
   1c690:	bhi	1cdd4 <__assert_fail@plt+0xbaa4>
   1c694:	strd	sl, [sp, #16]
   1c698:	mul	r2, r1, fp
   1c69c:	umull	r6, r7, r1, sl
   1c6a0:	mla	r3, lr, sl, r2
   1c6a4:	ldrd	sl, [sp]
   1c6a8:	str	r3, [sp, #32]
   1c6ac:	ldrd	r2, [sp, #24]
   1c6b0:	cmp	r3, fp
   1c6b4:	cmpeq	r2, sl
   1c6b8:	ldrd	r2, [sp, #16]
   1c6bc:	orrhi	ip, ip, #1
   1c6c0:	cmp	fp, r3
   1c6c4:	ldr	r3, [sp, #32]
   1c6c8:	cmpeq	sl, r2
   1c6cc:	add	r2, r3, r7
   1c6d0:	mov	r7, r2
   1c6d4:	mvncc	r7, #0
   1c6d8:	mvncc	r6, #0
   1c6dc:	mul	r2, r1, r7
   1c6e0:	mov	sl, r6
   1c6e4:	strd	r6, [sp, #24]
   1c6e8:	mla	r0, lr, sl, r2
   1c6ec:	ldrd	r2, [sp, #16]
   1c6f0:	ldrd	sl, [sp]
   1c6f4:	umull	r6, r7, r1, r6
   1c6f8:	cmp	fp, r3
   1c6fc:	cmpeq	sl, r2
   1c700:	mov	r3, fp
   1c704:	mov	r2, sl
   1c708:	ldrd	sl, [sp, #24]
   1c70c:	orrcc	ip, ip, #1
   1c710:	add	r7, r0, r7
   1c714:	cmp	r3, fp
   1c718:	cmpeq	r2, sl
   1c71c:	mvncc	r6, #0
   1c720:	mvncc	r7, #0
   1c724:	umull	sl, fp, r1, r6
   1c728:	mul	r3, r1, r7
   1c72c:	strd	sl, [sp, #16]
   1c730:	mla	r0, lr, r6, r3
   1c734:	ldrd	sl, [sp, #24]
   1c738:	ldrd	r2, [sp]
   1c73c:	cmp	r3, fp
   1c740:	cmpeq	r2, sl
   1c744:	orrcc	ip, ip, #1
   1c748:	cmp	r3, r7
   1c74c:	ldr	r3, [sp, #20]
   1c750:	cmpeq	r2, r6
   1c754:	add	r3, r0, r3
   1c758:	str	r3, [sp, #20]
   1c75c:	mvncc	r2, #0
   1c760:	mvncc	r3, #0
   1c764:	ldrdcs	r2, [sp, #16]
   1c768:	ldrd	sl, [sp]
   1c76c:	mul	r0, r1, r3
   1c770:	cmp	fp, r7
   1c774:	str	r0, [sp, #16]
   1c778:	cmpeq	sl, r6
   1c77c:	ldr	r6, [sp, #16]
   1c780:	umull	r0, r1, r1, r2
   1c784:	mla	lr, lr, r2, r6
   1c788:	orrcc	ip, ip, #1
   1c78c:	cmp	r3, fp
   1c790:	cmpeq	r2, sl
   1c794:	add	r1, lr, r1
   1c798:	bls	1c7a4 <__assert_fail@plt+0xb474>
   1c79c:	mvn	r0, #0
   1c7a0:	mov	r1, r0
   1c7a4:	cmp	r3, fp
   1c7a8:	cmpeq	r2, sl
   1c7ac:	mov	r6, r0
   1c7b0:	mov	r7, r1
   1c7b4:	orrhi	ip, ip, #1
   1c7b8:	b	1c41c <__assert_fail@plt+0xb0ec>
   1c7bc:	ldrd	sl, [sp]
   1c7c0:	umull	r2, r3, r6, r1
   1c7c4:	mul	r0, r6, lr
   1c7c8:	cmp	r7, fp
   1c7cc:	cmpeq	r6, sl
   1c7d0:	mvnhi	r2, #0
   1c7d4:	mla	r0, r1, r7, r0
   1c7d8:	umull	sl, fp, r1, r2
   1c7dc:	add	r3, r0, r3
   1c7e0:	mvnhi	r3, #0
   1c7e4:	strd	sl, [sp, #16]
   1c7e8:	mul	r0, r1, r3
   1c7ec:	ldrd	sl, [sp]
   1c7f0:	mla	r0, lr, r2, r0
   1c7f4:	ldr	ip, [sp, #20]
   1c7f8:	cmp	fp, r3
   1c7fc:	add	r0, r0, ip
   1c800:	cmpeq	sl, r2
   1c804:	str	r0, [sp, #20]
   1c808:	mvncc	sl, #0
   1c80c:	mvncc	fp, #0
   1c810:	strdcc	sl, [sp, #16]
   1c814:	ldrdcc	sl, [sp]
   1c818:	ldr	r0, [sp, #16]
   1c81c:	cmp	fp, r3
   1c820:	cmpeq	sl, r2
   1c824:	mul	r0, lr, r0
   1c828:	ldr	r2, [sp, #20]
   1c82c:	ldr	r3, [sp, #16]
   1c830:	movcc	ip, #1
   1c834:	movcs	ip, #0
   1c838:	cmp	r7, fp
   1c83c:	cmpeq	r6, sl
   1c840:	ldrd	r6, [sp, #16]
   1c844:	mla	r0, r1, r2, r0
   1c848:	umull	r2, r3, r3, r1
   1c84c:	orrhi	ip, ip, #1
   1c850:	cmp	r7, fp
   1c854:	cmpeq	r6, sl
   1c858:	add	r3, r0, r3
   1c85c:	mvnhi	r3, #0
   1c860:	mvnhi	r2, #0
   1c864:	mul	r0, r1, r3
   1c868:	cmp	r7, fp
   1c86c:	str	r0, [sp, #24]
   1c870:	cmpeq	r6, sl
   1c874:	ldr	r6, [sp, #24]
   1c878:	umull	r0, r1, r1, r2
   1c87c:	mla	lr, lr, r2, r6
   1c880:	orrhi	ip, ip, #1
   1c884:	cmp	fp, r3
   1c888:	cmpeq	sl, r2
   1c88c:	mvncc	r0, #0
   1c890:	add	r1, lr, r1
   1c894:	movcc	r1, r0
   1c898:	b	1c408 <__assert_fail@plt+0xb0d8>
   1c89c:	cmp	r6, #0
   1c8a0:	sbcs	r3, r7, #0
   1c8a4:	blt	1cd3c <__assert_fail@plt+0xba0c>
   1c8a8:	adds	r6, r6, r6
   1c8ac:	adc	r7, r7, r7
   1c8b0:	mov	ip, #0
   1c8b4:	b	1c41c <__assert_fail@plt+0xb0ec>
   1c8b8:	mov	ip, #0
   1c8bc:	b	1c41c <__assert_fail@plt+0xb0ec>
   1c8c0:	ldr	r3, [pc, #1396]	; 1ce3c <__assert_fail@plt+0xbb0c>
   1c8c4:	mvn	r2, #0
   1c8c8:	cmp	r7, r3
   1c8cc:	cmpeq	r6, r2
   1c8d0:	bhi	1cd3c <__assert_fail@plt+0xba0c>
   1c8d4:	lsl	r3, r7, #9
   1c8d8:	orr	r3, r3, r6, lsr #23
   1c8dc:	lsl	r2, r6, #9
   1c8e0:	mov	r6, r2
   1c8e4:	mov	r7, r3
   1c8e8:	mov	ip, #0
   1c8ec:	b	1c41c <__assert_fail@plt+0xb0ec>
   1c8f0:	ldrd	sl, [sp]
   1c8f4:	umull	r2, r3, r6, r1
   1c8f8:	mul	r0, r6, lr
   1c8fc:	cmp	r7, fp
   1c900:	cmpeq	r6, sl
   1c904:	mvnhi	r2, #0
   1c908:	mla	r0, r1, r7, r0
   1c90c:	umull	sl, fp, r2, r1
   1c910:	add	r3, r0, r3
   1c914:	mul	r0, lr, r2
   1c918:	mvnhi	r3, #0
   1c91c:	strd	sl, [sp, #16]
   1c920:	ldrd	sl, [sp]
   1c924:	mla	r0, r1, r3, r0
   1c928:	ldr	ip, [sp, #20]
   1c92c:	cmp	r3, fp
   1c930:	add	r0, r0, ip
   1c934:	cmpeq	r2, sl
   1c938:	str	r0, [sp, #20]
   1c93c:	mvnhi	sl, #0
   1c940:	mvnhi	fp, #0
   1c944:	strdhi	sl, [sp, #16]
   1c948:	ldrdhi	sl, [sp]
   1c94c:	ldr	r0, [sp, #16]
   1c950:	cmp	r3, fp
   1c954:	ldr	r3, [sp, #20]
   1c958:	mul	r0, lr, r0
   1c95c:	cmpeq	r2, sl
   1c960:	mla	r0, r1, r3, r0
   1c964:	ldr	r3, [sp, #16]
   1c968:	umull	r2, r3, r3, r1
   1c96c:	strd	r2, [sp, #24]
   1c970:	movhi	r3, #1
   1c974:	movls	r3, #0
   1c978:	cmp	r7, fp
   1c97c:	cmpeq	r6, sl
   1c980:	ldrd	r6, [sp, #16]
   1c984:	ldr	r2, [sp, #28]
   1c988:	movls	ip, r3
   1c98c:	orrhi	ip, r3, #1
   1c990:	cmp	r7, fp
   1c994:	add	r2, r0, r2
   1c998:	cmpeq	r6, sl
   1c99c:	str	r2, [sp, #28]
   1c9a0:	mvnhi	r2, #0
   1c9a4:	mvnhi	r3, #0
   1c9a8:	strdhi	r2, [sp, #24]
   1c9ac:	ldrd	r6, [sp, #24]
   1c9b0:	mul	r2, lr, r6
   1c9b4:	umull	sl, fp, r6, r1
   1c9b8:	mla	r3, r1, r7, r2
   1c9bc:	ldrd	r6, [sp]
   1c9c0:	str	r3, [sp, #32]
   1c9c4:	ldrd	r2, [sp, #16]
   1c9c8:	cmp	r3, r7
   1c9cc:	cmpeq	r2, r6
   1c9d0:	ldrd	r2, [sp, #24]
   1c9d4:	orrhi	ip, ip, #1
   1c9d8:	cmp	r3, r7
   1c9dc:	ldr	r3, [sp, #32]
   1c9e0:	cmpeq	r2, r6
   1c9e4:	add	r2, r3, fp
   1c9e8:	mov	fp, r2
   1c9ec:	bhi	1ce04 <__assert_fail@plt+0xbad4>
   1c9f0:	strd	sl, [sp, #16]
   1c9f4:	mul	r2, lr, sl
   1c9f8:	umull	r6, r7, sl, r1
   1c9fc:	mla	r3, r1, fp, r2
   1ca00:	ldrd	sl, [sp]
   1ca04:	str	r3, [sp, #32]
   1ca08:	ldrd	r2, [sp, #24]
   1ca0c:	cmp	r3, fp
   1ca10:	cmpeq	r2, sl
   1ca14:	ldrd	r2, [sp, #16]
   1ca18:	orrhi	ip, ip, #1
   1ca1c:	cmp	r3, fp
   1ca20:	ldr	r3, [sp, #32]
   1ca24:	cmpeq	r2, sl
   1ca28:	add	r2, r3, r7
   1ca2c:	mov	r7, r2
   1ca30:	mvnhi	r7, #0
   1ca34:	mvnhi	r6, #0
   1ca38:	mul	r2, r1, r7
   1ca3c:	mov	sl, r6
   1ca40:	strd	r6, [sp, #24]
   1ca44:	mla	r0, lr, sl, r2
   1ca48:	ldrd	sl, [sp]
   1ca4c:	ldrd	r2, [sp, #16]
   1ca50:	umull	r6, r7, r1, r6
   1ca54:	cmp	r3, fp
   1ca58:	cmpeq	r2, sl
   1ca5c:	mov	r3, ip
   1ca60:	orrhi	r3, r3, #1
   1ca64:	mov	r2, sl
   1ca68:	str	r3, [sp, #16]
   1ca6c:	mov	r3, fp
   1ca70:	ldrd	sl, [sp, #24]
   1ca74:	add	r7, r0, r7
   1ca78:	cmp	r3, fp
   1ca7c:	cmpeq	r2, sl
   1ca80:	bcc	1c530 <__assert_fail@plt+0xb200>
   1ca84:	mov	r2, r6
   1ca88:	mov	r3, r7
   1ca8c:	b	1c538 <__assert_fail@plt+0xb208>
   1ca90:	ldrd	sl, [sp]
   1ca94:	umull	r2, r3, r6, r1
   1ca98:	mul	r0, r6, lr
   1ca9c:	cmp	r7, fp
   1caa0:	cmpeq	r6, sl
   1caa4:	mvnhi	r2, #0
   1caa8:	mla	r0, r1, r7, r0
   1caac:	umull	sl, fp, r2, r1
   1cab0:	add	r3, r0, r3
   1cab4:	mul	r0, lr, r2
   1cab8:	mvnhi	r3, #0
   1cabc:	strd	sl, [sp, #16]
   1cac0:	ldrd	sl, [sp]
   1cac4:	mla	r0, r1, r3, r0
   1cac8:	ldr	ip, [sp, #20]
   1cacc:	cmp	r3, fp
   1cad0:	add	r0, r0, ip
   1cad4:	cmpeq	r2, sl
   1cad8:	str	r0, [sp, #20]
   1cadc:	mvnhi	sl, #0
   1cae0:	mvnhi	fp, #0
   1cae4:	strdhi	sl, [sp, #16]
   1cae8:	ldrdhi	sl, [sp]
   1caec:	ldr	r0, [sp, #16]
   1caf0:	cmp	r3, fp
   1caf4:	ldr	ip, [sp, #20]
   1caf8:	mul	r0, lr, r0
   1cafc:	ldr	r3, [sp, #16]
   1cb00:	cmpeq	r2, sl
   1cb04:	mla	r0, r1, ip, r0
   1cb08:	umull	r2, r3, r3, r1
   1cb0c:	movhi	r1, #1
   1cb10:	movls	r1, #0
   1cb14:	cmp	r7, fp
   1cb18:	cmpeq	r6, sl
   1cb1c:	ldrd	r6, [sp, #16]
   1cb20:	movls	ip, r1
   1cb24:	orrhi	ip, r1, #1
   1cb28:	cmp	r7, fp
   1cb2c:	cmpeq	r6, sl
   1cb30:	mvnhi	r2, #0
   1cb34:	add	r3, r0, r3
   1cb38:	movhi	r3, r2
   1cb3c:	cmp	r7, fp
   1cb40:	cmpeq	r6, sl
   1cb44:	mov	r7, r3
   1cb48:	mov	r6, r2
   1cb4c:	orrhi	ip, ip, #1
   1cb50:	b	1c41c <__assert_fail@plt+0xb0ec>
   1cb54:	ldrd	sl, [sp]
   1cb58:	umull	r2, r3, r6, r1
   1cb5c:	mul	r0, r6, lr
   1cb60:	cmp	r7, fp
   1cb64:	cmpeq	r6, sl
   1cb68:	mvnhi	r2, #0
   1cb6c:	mla	r0, r1, r7, r0
   1cb70:	umull	sl, fp, r1, r2
   1cb74:	add	r3, r0, r3
   1cb78:	mvnhi	r3, #0
   1cb7c:	strd	sl, [sp, #16]
   1cb80:	mul	r0, r1, r3
   1cb84:	ldrd	sl, [sp]
   1cb88:	mla	r0, lr, r2, r0
   1cb8c:	ldr	ip, [sp, #20]
   1cb90:	cmp	fp, r3
   1cb94:	add	r0, r0, ip
   1cb98:	cmpeq	sl, r2
   1cb9c:	str	r0, [sp, #20]
   1cba0:	mvncc	sl, #0
   1cba4:	mvncc	fp, #0
   1cba8:	strdcc	sl, [sp, #16]
   1cbac:	ldrdcc	sl, [sp]
   1cbb0:	ldr	r0, [sp, #16]
   1cbb4:	cmp	fp, r3
   1cbb8:	ldr	r3, [sp, #20]
   1cbbc:	mul	r0, lr, r0
   1cbc0:	cmpeq	sl, r2
   1cbc4:	mla	r0, r1, r3, r0
   1cbc8:	ldr	r3, [sp, #16]
   1cbcc:	umull	r2, r3, r3, r1
   1cbd0:	strd	r2, [sp, #24]
   1cbd4:	movcc	r3, #1
   1cbd8:	movcs	r3, #0
   1cbdc:	cmp	r7, fp
   1cbe0:	cmpeq	r6, sl
   1cbe4:	movls	ip, r3
   1cbe8:	orrhi	ip, r3, #1
   1cbec:	ldrd	r2, [sp, #16]
   1cbf0:	cmp	r3, fp
   1cbf4:	ldr	r3, [sp, #28]
   1cbf8:	cmpeq	r2, sl
   1cbfc:	add	r3, r0, r3
   1cc00:	str	r3, [sp, #28]
   1cc04:	bhi	1cdbc <__assert_fail@plt+0xba8c>
   1cc08:	ldrd	r2, [sp, #24]
   1cc0c:	mov	sl, r2
   1cc10:	mov	fp, r3
   1cc14:	mul	r2, lr, sl
   1cc18:	umull	r6, r7, sl, r1
   1cc1c:	mla	r0, r1, fp, r2
   1cc20:	ldrd	r2, [sp]
   1cc24:	add	r7, r0, r7
   1cc28:	mov	sl, r2
   1cc2c:	mov	fp, r3
   1cc30:	strd	r2, [sp, #32]
   1cc34:	ldrd	r2, [sp, #16]
   1cc38:	cmp	r3, fp
   1cc3c:	cmpeq	r2, sl
   1cc40:	ldrd	r2, [sp, #32]
   1cc44:	ldrd	sl, [sp, #24]
   1cc48:	orrhi	ip, ip, #1
   1cc4c:	cmp	fp, r3
   1cc50:	cmpeq	sl, r2
   1cc54:	mvnhi	r6, #0
   1cc58:	mvnhi	r7, #0
   1cc5c:	umull	sl, fp, r6, r1
   1cc60:	mul	r3, lr, r6
   1cc64:	strd	sl, [sp, #16]
   1cc68:	mla	r0, r1, r7, r3
   1cc6c:	ldrd	sl, [sp, #24]
   1cc70:	ldrd	r2, [sp]
   1cc74:	cmp	fp, r3
   1cc78:	cmpeq	sl, r2
   1cc7c:	orrhi	ip, ip, #1
   1cc80:	cmp	r7, r3
   1cc84:	ldr	r3, [sp, #20]
   1cc88:	cmpeq	r6, r2
   1cc8c:	add	r3, r0, r3
   1cc90:	str	r3, [sp, #20]
   1cc94:	mvnhi	r2, #0
   1cc98:	mvnhi	r3, #0
   1cc9c:	ldrdls	r2, [sp, #16]
   1cca0:	ldrd	sl, [sp]
   1cca4:	mul	r0, r1, r3
   1cca8:	cmp	r7, fp
   1ccac:	str	r0, [sp, #16]
   1ccb0:	cmpeq	r6, sl
   1ccb4:	ldr	r6, [sp, #16]
   1ccb8:	umull	r0, r1, r1, r2
   1ccbc:	mla	lr, lr, r2, r6
   1ccc0:	orrhi	ip, ip, #1
   1ccc4:	cmp	r3, fp
   1ccc8:	cmpeq	r2, sl
   1cccc:	add	r1, lr, r1
   1ccd0:	bls	1c7a4 <__assert_fail@plt+0xb474>
   1ccd4:	b	1c79c <__assert_fail@plt+0xb46c>
   1ccd8:	ldr	r3, [pc, #344]	; 1ce38 <__assert_fail@plt+0xbb08>
   1ccdc:	mvn	r2, #0
   1cce0:	cmp	r7, r3
   1cce4:	cmpeq	r6, r2
   1cce8:	bhi	1cd3c <__assert_fail@plt+0xba0c>
   1ccec:	lsl	r3, r7, #10
   1ccf0:	orr	r3, r3, r6, lsr #22
   1ccf4:	lsl	r2, r6, #10
   1ccf8:	mov	r6, r2
   1ccfc:	mov	r7, r3
   1cd00:	mov	ip, #0
   1cd04:	b	1c41c <__assert_fail@plt+0xb0ec>
   1cd08:	strd	r6, [r8]
   1cd0c:	orr	r4, r4, #2
   1cd10:	b	1c0ec <__assert_fail@plt+0xadbc>
   1cd14:	ldrd	r2, [sp]
   1cd18:	cmp	r7, r3
   1cd1c:	cmpeq	r6, r2
   1cd20:	bhi	1cd3c <__assert_fail@plt+0xba0c>
   1cd24:	mul	r3, r6, lr
   1cd28:	mov	ip, #0
   1cd2c:	mla	r3, r1, r7, r3
   1cd30:	umull	r6, r7, r6, r1
   1cd34:	add	r7, r3, r7
   1cd38:	b	1c41c <__assert_fail@plt+0xb0ec>
   1cd3c:	mvn	r6, #0
   1cd40:	mvn	r7, #0
   1cd44:	mov	ip, #1
   1cd48:	b	1c41c <__assert_fail@plt+0xb0ec>
   1cd4c:	ldrb	r3, [r9, #2]
   1cd50:	mvn	r2, #0
   1cd54:	mov	r1, #1024	; 0x400
   1cd58:	cmp	r3, #66	; 0x42
   1cd5c:	ldr	r3, [pc, #212]	; 1ce38 <__assert_fail@plt+0xbb08>
   1cd60:	mov	lr, #0
   1cd64:	strd	r2, [sp]
   1cd68:	moveq	r3, #3
   1cd6c:	streq	r3, [sp, #12]
   1cd70:	movne	r3, #1
   1cd74:	strne	r3, [sp, #12]
   1cd78:	b	1c2c8 <__assert_fail@plt+0xaf98>
   1cd7c:	add	r3, pc, #172	; 0xac
   1cd80:	ldrd	r2, [r3]
   1cd84:	mov	r1, #1000	; 0x3e8
   1cd88:	mov	lr, #0
   1cd8c:	strd	r2, [sp]
   1cd90:	mov	r3, #2
   1cd94:	str	r3, [sp, #12]
   1cd98:	b	1c2c8 <__assert_fail@plt+0xaf98>
   1cd9c:	ldr	r3, [pc, #148]	; 1ce38 <__assert_fail@plt+0xbb08>
   1cda0:	mvn	r2, #0
   1cda4:	mov	lr, r0
   1cda8:	strd	r2, [sp]
   1cdac:	mov	r3, #1
   1cdb0:	mov	r1, #1024	; 0x400
   1cdb4:	str	r3, [sp, #12]
   1cdb8:	b	1c2c8 <__assert_fail@plt+0xaf98>
   1cdbc:	mvn	r2, #0
   1cdc0:	mvn	r3, #0
   1cdc4:	mov	sl, r2
   1cdc8:	strd	r2, [sp, #24]
   1cdcc:	mov	fp, r3
   1cdd0:	b	1cc14 <__assert_fail@plt+0xb8e4>
   1cdd4:	mvn	r2, #0
   1cdd8:	mvn	r3, #0
   1cddc:	mov	sl, r2
   1cde0:	strd	r2, [sp, #16]
   1cde4:	mov	fp, r3
   1cde8:	b	1c698 <__assert_fail@plt+0xb368>
   1cdec:	mvn	r2, #0
   1cdf0:	mvn	r3, #0
   1cdf4:	mov	sl, r2
   1cdf8:	strd	r2, [sp, #24]
   1cdfc:	mov	fp, r3
   1ce00:	b	1c4f0 <__assert_fail@plt+0xb1c0>
   1ce04:	mvn	r2, #0
   1ce08:	mvn	r3, #0
   1ce0c:	mov	sl, r2
   1ce10:	strd	r2, [sp, #16]
   1ce14:	mov	fp, r3
   1ce18:	b	1c9f4 <__assert_fail@plt+0xb6c4>
   1ce1c:	ldr	r3, [pc, #28]	; 1ce40 <__assert_fail@plt+0xbb10>
   1ce20:	mov	r2, #85	; 0x55
   1ce24:	ldr	r1, [pc, #24]	; 1ce44 <__assert_fail@plt+0xbb14>
   1ce28:	ldr	r0, [pc, #24]	; 1ce48 <__assert_fail@plt+0xbb18>
   1ce2c:	bl	11330 <__assert_fail@plt>
   1ce30:	blmi	ff1c6df4 <optarg@@GLIBC_2.4+0xff196c5c>
   1ce34:	subeq	r8, r1, r7, lsr r9
   1ce38:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1ce3c:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1ce40:	andeq	pc, r1, r4, lsr r0	; <UNPREDICTABLE>
   1ce44:	andeq	pc, r1, r0, asr #32
   1ce48:	andeq	pc, r1, r0, asr r0	; <UNPREDICTABLE>
   1ce4c:	cmp	r1, #0
   1ce50:	cmpne	r0, #0
   1ce54:	moveq	r1, #1
   1ce58:	moveq	r0, r1
   1ce5c:	umull	r2, r3, r0, r1
   1ce60:	adds	r3, r3, #0
   1ce64:	movne	r3, #1
   1ce68:	cmp	r2, #0
   1ce6c:	blt	1ce7c <__assert_fail@plt+0xbb4c>
   1ce70:	cmp	r3, #0
   1ce74:	bne	1ce7c <__assert_fail@plt+0xbb4c>
   1ce78:	b	10ff4 <calloc@plt>
   1ce7c:	push	{r4, lr}
   1ce80:	bl	111ec <__errno_location@plt>
   1ce84:	mov	r3, #12
   1ce88:	str	r3, [r0]
   1ce8c:	mov	r0, #0
   1ce90:	pop	{r4, pc}
   1ce94:	cmp	r0, #0
   1ce98:	moveq	r0, #1
   1ce9c:	cmp	r0, #0
   1cea0:	blt	1cea8 <__assert_fail@plt+0xbb78>
   1cea4:	b	11168 <malloc@plt>
   1cea8:	push	{r4, lr}
   1ceac:	bl	111ec <__errno_location@plt>
   1ceb0:	mov	r3, #12
   1ceb4:	str	r3, [r0]
   1ceb8:	mov	r0, #0
   1cebc:	pop	{r4, pc}
   1cec0:	cmp	r0, #0
   1cec4:	beq	1cee8 <__assert_fail@plt+0xbbb8>
   1cec8:	cmp	r1, #0
   1cecc:	push	{lr}		; (str lr, [sp, #-4]!)
   1ced0:	sub	sp, sp, #12
   1ced4:	beq	1cef0 <__assert_fail@plt+0xbbc0>
   1ced8:	blt	1cf08 <__assert_fail@plt+0xbbd8>
   1cedc:	add	sp, sp, #12
   1cee0:	pop	{lr}		; (ldr lr, [sp], #4)
   1cee4:	b	110cc <realloc@plt>
   1cee8:	mov	r0, r1
   1ceec:	b	1ce94 <__assert_fail@plt+0xbb64>
   1cef0:	str	r1, [sp, #4]
   1cef4:	bl	12cdc <__assert_fail@plt+0x19ac>
   1cef8:	ldr	r3, [sp, #4]
   1cefc:	mov	r0, r3
   1cf00:	add	sp, sp, #12
   1cf04:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf08:	bl	111ec <__errno_location@plt>
   1cf0c:	mov	r2, #12
   1cf10:	mov	r3, #0
   1cf14:	str	r2, [r0]
   1cf18:	b	1cefc <__assert_fail@plt+0xbbcc>
   1cf1c:	push	{r4, r5, r6, lr}
   1cf20:	mov	r4, r0
   1cf24:	bl	11138 <__fpending@plt>
   1cf28:	ldr	r5, [r4]
   1cf2c:	and	r5, r5, #32
   1cf30:	mov	r6, r0
   1cf34:	mov	r0, r4
   1cf38:	bl	1d088 <__assert_fail@plt+0xbd58>
   1cf3c:	cmp	r5, #0
   1cf40:	mov	r4, r0
   1cf44:	bne	1cf64 <__assert_fail@plt+0xbc34>
   1cf48:	cmp	r0, #0
   1cf4c:	beq	1cf5c <__assert_fail@plt+0xbc2c>
   1cf50:	cmp	r6, #0
   1cf54:	beq	1cf80 <__assert_fail@plt+0xbc50>
   1cf58:	mvn	r4, #0
   1cf5c:	mov	r0, r4
   1cf60:	pop	{r4, r5, r6, pc}
   1cf64:	cmp	r0, #0
   1cf68:	bne	1cf58 <__assert_fail@plt+0xbc28>
   1cf6c:	bl	111ec <__errno_location@plt>
   1cf70:	str	r4, [r0]
   1cf74:	mvn	r4, #0
   1cf78:	mov	r0, r4
   1cf7c:	pop	{r4, r5, r6, pc}
   1cf80:	bl	111ec <__errno_location@plt>
   1cf84:	ldr	r4, [r0]
   1cf88:	subs	r4, r4, #9
   1cf8c:	mvnne	r4, #0
   1cf90:	mov	r0, r4
   1cf94:	pop	{r4, r5, r6, pc}
   1cf98:	push	{r4, r5}
   1cf9c:	mov	r4, #0
   1cfa0:	mov	r5, #0
   1cfa4:	ldr	r3, [pc, #12]	; 1cfb8 <__assert_fail@plt+0xbc88>
   1cfa8:	strd	r4, [r0, #16]
   1cfac:	str	r3, [r0, #24]
   1cfb0:	pop	{r4, r5}
   1cfb4:	bx	lr
   1cfb8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1cfbc:	ldr	r3, [pc, #180]	; 1d078 <__assert_fail@plt+0xbd48>
   1cfc0:	ldr	r2, [r0, #24]
   1cfc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cfc8:	cmp	r2, r3
   1cfcc:	bne	1d064 <__assert_fail@plt+0xbd34>
   1cfd0:	ldrd	r6, [r0, #16]
   1cfd4:	orrs	r3, r6, r7
   1cfd8:	bne	1d004 <__assert_fail@plt+0xbcd4>
   1cfdc:	mov	r2, #1
   1cfe0:	mov	r3, #0
   1cfe4:	ldrd	r8, [r1, #96]	; 0x60
   1cfe8:	strd	r2, [r0, #16]
   1cfec:	ldrd	r2, [r1]
   1cff0:	mov	r1, #0
   1cff4:	strd	r8, [r0]
   1cff8:	strd	r2, [r0, #8]
   1cffc:	mov	r0, r1
   1d000:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d004:	ldrd	r8, [r1, #96]	; 0x60
   1d008:	ldrd	r2, [r0]
   1d00c:	cmp	r9, r3
   1d010:	cmpeq	r8, r2
   1d014:	beq	1d04c <__assert_fail@plt+0xbd1c>
   1d018:	adds	r2, r6, #1
   1d01c:	adc	r3, r7, #0
   1d020:	and	r6, r6, r2
   1d024:	and	r7, r7, r3
   1d028:	orrs	ip, r6, r7
   1d02c:	strd	r2, [r0, #16]
   1d030:	movne	r1, #0
   1d034:	bne	1cffc <__assert_fail@plt+0xbccc>
   1d038:	orrs	r3, r2, r3
   1d03c:	bne	1cfec <__assert_fail@plt+0xbcbc>
   1d040:	mov	r1, #1
   1d044:	mov	r0, r1
   1d048:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d04c:	ldrd	r4, [r1]
   1d050:	ldrd	r2, [r0, #8]
   1d054:	cmp	r5, r3
   1d058:	cmpeq	r4, r2
   1d05c:	bne	1d018 <__assert_fail@plt+0xbce8>
   1d060:	b	1d040 <__assert_fail@plt+0xbd10>
   1d064:	ldr	r3, [pc, #16]	; 1d07c <__assert_fail@plt+0xbd4c>
   1d068:	mov	r2, #60	; 0x3c
   1d06c:	ldr	r1, [pc, #12]	; 1d080 <__assert_fail@plt+0xbd50>
   1d070:	ldr	r0, [pc, #12]	; 1d084 <__assert_fail@plt+0xbd54>
   1d074:	bl	11330 <__assert_fail@plt>
   1d078:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1d07c:	andeq	pc, r1, r8, ror r0	; <UNPREDICTABLE>
   1d080:	andeq	pc, r1, r4, lsl #1
   1d084:	muleq	r1, r8, r0
   1d088:	push	{r4, r5, lr}
   1d08c:	sub	sp, sp, #12
   1d090:	mov	r4, r0
   1d094:	bl	1121c <fileno@plt>
   1d098:	cmp	r0, #0
   1d09c:	mov	r0, r4
   1d0a0:	blt	1d11c <__assert_fail@plt+0xbdec>
   1d0a4:	bl	11180 <__freading@plt>
   1d0a8:	cmp	r0, #0
   1d0ac:	bne	1d0e8 <__assert_fail@plt+0xbdb8>
   1d0b0:	mov	r0, r4
   1d0b4:	bl	1d334 <__assert_fail@plt+0xc004>
   1d0b8:	cmp	r0, #0
   1d0bc:	beq	1d118 <__assert_fail@plt+0xbde8>
   1d0c0:	bl	111ec <__errno_location@plt>
   1d0c4:	mov	r5, r0
   1d0c8:	mov	r0, r4
   1d0cc:	ldr	r4, [r5]
   1d0d0:	bl	11234 <fclose@plt>
   1d0d4:	cmp	r4, #0
   1d0d8:	mvnne	r0, #0
   1d0dc:	strne	r4, [r5]
   1d0e0:	add	sp, sp, #12
   1d0e4:	pop	{r4, r5, pc}
   1d0e8:	mov	r0, r4
   1d0ec:	bl	1121c <fileno@plt>
   1d0f0:	mov	r3, #1
   1d0f4:	str	r3, [sp]
   1d0f8:	mov	r2, #0
   1d0fc:	mov	r3, #0
   1d100:	bl	11114 <lseek64@plt>
   1d104:	mvn	r3, #0
   1d108:	mvn	r2, #0
   1d10c:	cmp	r1, r3
   1d110:	cmpeq	r0, r2
   1d114:	bne	1d0b0 <__assert_fail@plt+0xbd80>
   1d118:	mov	r0, r4
   1d11c:	add	sp, sp, #12
   1d120:	pop	{r4, r5, lr}
   1d124:	b	11234 <fclose@plt>
   1d128:	push	{r1, r2, r3}
   1d12c:	push	{r4, r5, r6, r7, lr}
   1d130:	sub	sp, sp, #8
   1d134:	add	r3, sp, #32
   1d138:	ldr	r1, [sp, #28]
   1d13c:	str	r3, [sp, #4]
   1d140:	cmp	r1, #0
   1d144:	beq	1d1dc <__assert_fail@plt+0xbeac>
   1d148:	ldr	r2, [pc, #412]	; 1d2ec <__assert_fail@plt+0xbfbc>
   1d14c:	mov	r5, r0
   1d150:	cmp	r1, r2
   1d154:	bne	1d1a0 <__assert_fail@plt+0xbe70>
   1d158:	ldr	r6, [pc, #400]	; 1d2f0 <__assert_fail@plt+0xbfc0>
   1d15c:	ldr	r7, [r3]
   1d160:	add	r2, sp, #36	; 0x24
   1d164:	ldr	r3, [r6]
   1d168:	str	r2, [sp, #4]
   1d16c:	cmp	r3, #0
   1d170:	mov	r2, r7
   1d174:	blt	1d2a0 <__assert_fail@plt+0xbf70>
   1d178:	bl	1124c <fcntl64@plt>
   1d17c:	subs	r4, r0, #0
   1d180:	blt	1d224 <__assert_fail@plt+0xbef4>
   1d184:	mov	r3, #1
   1d188:	str	r3, [r6]
   1d18c:	mov	r0, r4
   1d190:	add	sp, sp, #8
   1d194:	pop	{r4, r5, r6, r7, lr}
   1d198:	add	sp, sp, #12
   1d19c:	bx	lr
   1d1a0:	cmp	r1, #11
   1d1a4:	beq	1d1cc <__assert_fail@plt+0xbe9c>
   1d1a8:	bgt	1d1ec <__assert_fail@plt+0xbebc>
   1d1ac:	cmp	r1, #3
   1d1b0:	beq	1d1cc <__assert_fail@plt+0xbe9c>
   1d1b4:	ble	1d2e0 <__assert_fail@plt+0xbfb0>
   1d1b8:	cmp	r1, #8
   1d1bc:	beq	1d20c <__assert_fail@plt+0xbedc>
   1d1c0:	ble	1d20c <__assert_fail@plt+0xbedc>
   1d1c4:	cmp	r1, #9
   1d1c8:	bne	1d20c <__assert_fail@plt+0xbedc>
   1d1cc:	mov	r0, r5
   1d1d0:	bl	1124c <fcntl64@plt>
   1d1d4:	mov	r4, r0
   1d1d8:	b	1d18c <__assert_fail@plt+0xbe5c>
   1d1dc:	ldr	r2, [sp, #32]
   1d1e0:	bl	1124c <fcntl64@plt>
   1d1e4:	mov	r4, r0
   1d1e8:	b	1d18c <__assert_fail@plt+0xbe5c>
   1d1ec:	ldr	r3, [pc, #256]	; 1d2f4 <__assert_fail@plt+0xbfc4>
   1d1f0:	cmp	r1, r3
   1d1f4:	bgt	1d2c0 <__assert_fail@plt+0xbf90>
   1d1f8:	cmp	r1, r2
   1d1fc:	bge	1d20c <__assert_fail@plt+0xbedc>
   1d200:	sub	r3, r3, #6
   1d204:	cmp	r1, r3
   1d208:	beq	1d1cc <__assert_fail@plt+0xbe9c>
   1d20c:	ldr	r3, [sp, #4]
   1d210:	mov	r0, r5
   1d214:	ldr	r2, [r3]
   1d218:	bl	1124c <fcntl64@plt>
   1d21c:	mov	r4, r0
   1d220:	b	1d18c <__assert_fail@plt+0xbe5c>
   1d224:	bl	111ec <__errno_location@plt>
   1d228:	ldr	r3, [r0]
   1d22c:	cmp	r3, #22
   1d230:	bne	1d184 <__assert_fail@plt+0xbe54>
   1d234:	mov	r2, r7
   1d238:	mov	r0, r5
   1d23c:	mov	r1, #0
   1d240:	bl	1124c <fcntl64@plt>
   1d244:	subs	r4, r0, #0
   1d248:	blt	1d18c <__assert_fail@plt+0xbe5c>
   1d24c:	mvn	r3, #0
   1d250:	str	r3, [r6]
   1d254:	mov	r1, #1
   1d258:	mov	r0, r4
   1d25c:	bl	1124c <fcntl64@plt>
   1d260:	subs	r2, r0, #0
   1d264:	blt	1d280 <__assert_fail@plt+0xbf50>
   1d268:	orr	r2, r2, #1
   1d26c:	mov	r1, #2
   1d270:	mov	r0, r4
   1d274:	bl	1124c <fcntl64@plt>
   1d278:	cmn	r0, #1
   1d27c:	bne	1d18c <__assert_fail@plt+0xbe5c>
   1d280:	bl	111ec <__errno_location@plt>
   1d284:	mov	r5, r0
   1d288:	mov	r0, r4
   1d28c:	ldr	r6, [r5]
   1d290:	mvn	r4, #0
   1d294:	bl	112f4 <close@plt>
   1d298:	str	r6, [r5]
   1d29c:	b	1d18c <__assert_fail@plt+0xbe5c>
   1d2a0:	mov	r1, #0
   1d2a4:	bl	1124c <fcntl64@plt>
   1d2a8:	subs	r4, r0, #0
   1d2ac:	blt	1d18c <__assert_fail@plt+0xbe5c>
   1d2b0:	ldr	r3, [r6]
   1d2b4:	cmn	r3, #1
   1d2b8:	beq	1d254 <__assert_fail@plt+0xbf24>
   1d2bc:	b	1d18c <__assert_fail@plt+0xbe5c>
   1d2c0:	ldr	r3, [pc, #48]	; 1d2f8 <__assert_fail@plt+0xbfc8>
   1d2c4:	cmp	r1, r3
   1d2c8:	beq	1d20c <__assert_fail@plt+0xbedc>
   1d2cc:	blt	1d1cc <__assert_fail@plt+0xbe9c>
   1d2d0:	add	r3, r3, #1
   1d2d4:	cmp	r1, r3
   1d2d8:	bne	1d20c <__assert_fail@plt+0xbedc>
   1d2dc:	b	1d1cc <__assert_fail@plt+0xbe9c>
   1d2e0:	cmp	r1, #1
   1d2e4:	bne	1d20c <__assert_fail@plt+0xbedc>
   1d2e8:	b	1d1cc <__assert_fail@plt+0xbe9c>
   1d2ec:	andeq	r0, r0, r6, lsl #8
   1d2f0:	strdeq	r0, [r3], -r4
   1d2f4:	andeq	r0, r0, r7, lsl #8
   1d2f8:	andeq	r0, r0, r9, lsl #8
   1d2fc:	push	{r1, r2, r3}
   1d300:	push	{lr}		; (str lr, [sp, #-4]!)
   1d304:	sub	sp, sp, #8
   1d308:	ldr	r1, [sp, #12]
   1d30c:	ands	r2, r1, #64	; 0x40
   1d310:	addne	r3, sp, #16
   1d314:	ldrne	r2, [sp, #16]
   1d318:	strne	r3, [sp, #4]
   1d31c:	bl	1115c <open64@plt>
   1d320:	bl	1aefc <__assert_fail@plt+0x9bcc>
   1d324:	add	sp, sp, #8
   1d328:	pop	{lr}		; (ldr lr, [sp], #4)
   1d32c:	add	sp, sp, #12
   1d330:	bx	lr
   1d334:	push	{r4, lr}
   1d338:	subs	r4, r0, #0
   1d33c:	sub	sp, sp, #8
   1d340:	beq	1d35c <__assert_fail@plt+0xc02c>
   1d344:	bl	11180 <__freading@plt>
   1d348:	cmp	r0, #0
   1d34c:	beq	1d35c <__assert_fail@plt+0xc02c>
   1d350:	ldr	r3, [r4]
   1d354:	tst	r3, #256	; 0x100
   1d358:	bne	1d36c <__assert_fail@plt+0xc03c>
   1d35c:	mov	r0, r4
   1d360:	add	sp, sp, #8
   1d364:	pop	{r4, lr}
   1d368:	b	1103c <fflush@plt>
   1d36c:	mov	r3, #1
   1d370:	str	r3, [sp]
   1d374:	mov	r2, #0
   1d378:	mov	r3, #0
   1d37c:	mov	r0, r4
   1d380:	bl	1d394 <__assert_fail@plt+0xc064>
   1d384:	mov	r0, r4
   1d388:	add	sp, sp, #8
   1d38c:	pop	{r4, lr}
   1d390:	b	1103c <fflush@plt>
   1d394:	push	{r4, r5, r6, r7, r8, lr}
   1d398:	sub	sp, sp, #8
   1d39c:	ldmib	r0, {ip, lr}
   1d3a0:	mov	r4, r0
   1d3a4:	ldr	r5, [sp, #32]
   1d3a8:	cmp	lr, ip
   1d3ac:	beq	1d3c4 <__assert_fail@plt+0xc094>
   1d3b0:	str	r5, [sp, #32]
   1d3b4:	mov	r0, r4
   1d3b8:	add	sp, sp, #8
   1d3bc:	pop	{r4, r5, r6, r7, r8, lr}
   1d3c0:	b	11240 <fseeko64@plt>
   1d3c4:	ldr	lr, [r0, #20]
   1d3c8:	ldr	ip, [r0, #16]
   1d3cc:	cmp	lr, ip
   1d3d0:	bne	1d3b0 <__assert_fail@plt+0xc080>
   1d3d4:	ldr	r8, [r0, #36]	; 0x24
   1d3d8:	cmp	r8, #0
   1d3dc:	bne	1d3b0 <__assert_fail@plt+0xc080>
   1d3e0:	mov	r6, r2
   1d3e4:	mov	r7, r3
   1d3e8:	bl	1121c <fileno@plt>
   1d3ec:	mov	r2, r6
   1d3f0:	mov	r3, r7
   1d3f4:	str	r5, [sp]
   1d3f8:	bl	11114 <lseek64@plt>
   1d3fc:	mvn	r3, #0
   1d400:	mvn	r2, #0
   1d404:	cmp	r1, r3
   1d408:	cmpeq	r0, r2
   1d40c:	beq	1d42c <__assert_fail@plt+0xc0fc>
   1d410:	ldr	r3, [r4]
   1d414:	strd	r0, [r4, #80]	; 0x50
   1d418:	mov	r0, r8
   1d41c:	bic	r3, r3, #16
   1d420:	str	r3, [r4]
   1d424:	add	sp, sp, #8
   1d428:	pop	{r4, r5, r6, r7, r8, pc}
   1d42c:	mvn	r0, #0
   1d430:	b	1d424 <__assert_fail@plt+0xc0f4>
   1d434:	push	{r4, lr}
   1d438:	mov	r0, #14
   1d43c:	bl	11270 <nl_langinfo@plt>
   1d440:	cmp	r0, #0
   1d444:	beq	1d45c <__assert_fail@plt+0xc12c>
   1d448:	ldrb	r2, [r0]
   1d44c:	ldr	r3, [pc, #16]	; 1d464 <__assert_fail@plt+0xc134>
   1d450:	cmp	r2, #0
   1d454:	moveq	r0, r3
   1d458:	pop	{r4, pc}
   1d45c:	ldr	r0, [pc]	; 1d464 <__assert_fail@plt+0xc134>
   1d460:	pop	{r4, pc}
   1d464:	strheq	pc, [r1], -r0	; <UNPREDICTABLE>
   1d468:	push	{r4, r5, r6, r7, lr}
   1d46c:	subs	r6, r0, #0
   1d470:	sub	sp, sp, #12
   1d474:	addeq	r6, sp, #4
   1d478:	mov	r0, r6
   1d47c:	mov	r5, r2
   1d480:	mov	r7, r1
   1d484:	bl	11144 <mbrtowc@plt>
   1d488:	cmp	r5, #0
   1d48c:	cmnne	r0, #3
   1d490:	mov	r4, r0
   1d494:	bls	1d4b0 <__assert_fail@plt+0xc180>
   1d498:	mov	r0, #0
   1d49c:	bl	1d514 <__assert_fail@plt+0xc1e4>
   1d4a0:	cmp	r0, #0
   1d4a4:	moveq	r4, #1
   1d4a8:	ldrbeq	r3, [r7]
   1d4ac:	streq	r3, [r6]
   1d4b0:	mov	r0, r4
   1d4b4:	add	sp, sp, #12
   1d4b8:	pop	{r4, r5, r6, r7, pc}
   1d4bc:	push	{r4, r5, r6, lr}
   1d4c0:	subs	r4, r2, #0
   1d4c4:	mov	r6, r0
   1d4c8:	mov	r5, r1
   1d4cc:	beq	1d4f8 <__assert_fail@plt+0xc1c8>
   1d4d0:	mov	r1, r4
   1d4d4:	mvn	r0, #0
   1d4d8:	bl	1d608 <__assert_fail@plt+0xc2d8>
   1d4dc:	cmp	r0, r5
   1d4e0:	bcs	1d4f8 <__assert_fail@plt+0xc1c8>
   1d4e4:	bl	111ec <__errno_location@plt>
   1d4e8:	mov	r3, #12
   1d4ec:	str	r3, [r0]
   1d4f0:	mov	r0, #0
   1d4f4:	pop	{r4, r5, r6, pc}
   1d4f8:	mul	r1, r5, r4
   1d4fc:	mov	r0, r6
   1d500:	pop	{r4, r5, r6, lr}
   1d504:	b	1cec0 <__assert_fail@plt+0xbb90>
   1d508:	mov	r2, #3
   1d50c:	mov	r1, #0
   1d510:	b	1d128 <__assert_fail@plt+0xbdf8>
   1d514:	push	{lr}		; (str lr, [sp, #-4]!)
   1d518:	sub	sp, sp, #268	; 0x10c
   1d51c:	add	r1, sp, #4
   1d520:	ldr	r2, [pc, #60]	; 1d564 <__assert_fail@plt+0xc234>
   1d524:	bl	1d570 <__assert_fail@plt+0xc240>
   1d528:	cmp	r0, #0
   1d52c:	movne	r0, #0
   1d530:	bne	1d55c <__assert_fail@plt+0xc22c>
   1d534:	ldr	r1, [pc, #44]	; 1d568 <__assert_fail@plt+0xc238>
   1d538:	add	r0, sp, #4
   1d53c:	bl	11024 <strcmp@plt>
   1d540:	cmp	r0, #0
   1d544:	beq	1d55c <__assert_fail@plt+0xc22c>
   1d548:	add	r0, sp, #4
   1d54c:	ldr	r1, [pc, #24]	; 1d56c <__assert_fail@plt+0xc23c>
   1d550:	bl	11024 <strcmp@plt>
   1d554:	adds	r0, r0, #0
   1d558:	movne	r0, #1
   1d55c:	add	sp, sp, #268	; 0x10c
   1d560:	pop	{pc}		; (ldr pc, [sp], #4)
   1d564:	andeq	r0, r0, r1, lsl #2
   1d568:	strheq	pc, [r1], -r8	; <UNPREDICTABLE>
   1d56c:	strheq	pc, [r1], -ip	; <UNPREDICTABLE>
   1d570:	push	{r4, r5, r6, lr}
   1d574:	mov	r5, r1
   1d578:	mov	r1, #0
   1d57c:	mov	r4, r2
   1d580:	bl	11258 <setlocale@plt>
   1d584:	subs	r6, r0, #0
   1d588:	beq	1d5e4 <__assert_fail@plt+0xc2b4>
   1d58c:	bl	111bc <strlen@plt>
   1d590:	cmp	r4, r0
   1d594:	bhi	1d5cc <__assert_fail@plt+0xc29c>
   1d598:	cmp	r4, #0
   1d59c:	bne	1d5a8 <__assert_fail@plt+0xc278>
   1d5a0:	mov	r0, #34	; 0x22
   1d5a4:	pop	{r4, r5, r6, pc}
   1d5a8:	sub	r4, r4, #1
   1d5ac:	mov	r1, r6
   1d5b0:	mov	r2, r4
   1d5b4:	mov	r0, r5
   1d5b8:	bl	11078 <memcpy@plt>
   1d5bc:	mov	r3, #0
   1d5c0:	strb	r3, [r5, r4]
   1d5c4:	mov	r0, #34	; 0x22
   1d5c8:	pop	{r4, r5, r6, pc}
   1d5cc:	add	r2, r0, #1
   1d5d0:	mov	r1, r6
   1d5d4:	mov	r0, r5
   1d5d8:	bl	11078 <memcpy@plt>
   1d5dc:	mov	r0, #0
   1d5e0:	pop	{r4, r5, r6, pc}
   1d5e4:	cmp	r4, #0
   1d5e8:	beq	1d5f8 <__assert_fail@plt+0xc2c8>
   1d5ec:	strb	r6, [r5]
   1d5f0:	mov	r0, #22
   1d5f4:	pop	{r4, r5, r6, pc}
   1d5f8:	mov	r0, #22
   1d5fc:	pop	{r4, r5, r6, pc}
   1d600:	mov	r1, #0
   1d604:	b	11258 <setlocale@plt>
   1d608:	subs	r2, r1, #1
   1d60c:	bxeq	lr
   1d610:	bcc	1d7e8 <__assert_fail@plt+0xc4b8>
   1d614:	cmp	r0, r1
   1d618:	bls	1d7cc <__assert_fail@plt+0xc49c>
   1d61c:	tst	r1, r2
   1d620:	beq	1d7d8 <__assert_fail@plt+0xc4a8>
   1d624:	clz	r3, r0
   1d628:	clz	r2, r1
   1d62c:	sub	r3, r2, r3
   1d630:	rsbs	r3, r3, #31
   1d634:	addne	r3, r3, r3, lsl #1
   1d638:	mov	r2, #0
   1d63c:	addne	pc, pc, r3, lsl #2
   1d640:	nop			; (mov r0, r0)
   1d644:	cmp	r0, r1, lsl #31
   1d648:	adc	r2, r2, r2
   1d64c:	subcs	r0, r0, r1, lsl #31
   1d650:	cmp	r0, r1, lsl #30
   1d654:	adc	r2, r2, r2
   1d658:	subcs	r0, r0, r1, lsl #30
   1d65c:	cmp	r0, r1, lsl #29
   1d660:	adc	r2, r2, r2
   1d664:	subcs	r0, r0, r1, lsl #29
   1d668:	cmp	r0, r1, lsl #28
   1d66c:	adc	r2, r2, r2
   1d670:	subcs	r0, r0, r1, lsl #28
   1d674:	cmp	r0, r1, lsl #27
   1d678:	adc	r2, r2, r2
   1d67c:	subcs	r0, r0, r1, lsl #27
   1d680:	cmp	r0, r1, lsl #26
   1d684:	adc	r2, r2, r2
   1d688:	subcs	r0, r0, r1, lsl #26
   1d68c:	cmp	r0, r1, lsl #25
   1d690:	adc	r2, r2, r2
   1d694:	subcs	r0, r0, r1, lsl #25
   1d698:	cmp	r0, r1, lsl #24
   1d69c:	adc	r2, r2, r2
   1d6a0:	subcs	r0, r0, r1, lsl #24
   1d6a4:	cmp	r0, r1, lsl #23
   1d6a8:	adc	r2, r2, r2
   1d6ac:	subcs	r0, r0, r1, lsl #23
   1d6b0:	cmp	r0, r1, lsl #22
   1d6b4:	adc	r2, r2, r2
   1d6b8:	subcs	r0, r0, r1, lsl #22
   1d6bc:	cmp	r0, r1, lsl #21
   1d6c0:	adc	r2, r2, r2
   1d6c4:	subcs	r0, r0, r1, lsl #21
   1d6c8:	cmp	r0, r1, lsl #20
   1d6cc:	adc	r2, r2, r2
   1d6d0:	subcs	r0, r0, r1, lsl #20
   1d6d4:	cmp	r0, r1, lsl #19
   1d6d8:	adc	r2, r2, r2
   1d6dc:	subcs	r0, r0, r1, lsl #19
   1d6e0:	cmp	r0, r1, lsl #18
   1d6e4:	adc	r2, r2, r2
   1d6e8:	subcs	r0, r0, r1, lsl #18
   1d6ec:	cmp	r0, r1, lsl #17
   1d6f0:	adc	r2, r2, r2
   1d6f4:	subcs	r0, r0, r1, lsl #17
   1d6f8:	cmp	r0, r1, lsl #16
   1d6fc:	adc	r2, r2, r2
   1d700:	subcs	r0, r0, r1, lsl #16
   1d704:	cmp	r0, r1, lsl #15
   1d708:	adc	r2, r2, r2
   1d70c:	subcs	r0, r0, r1, lsl #15
   1d710:	cmp	r0, r1, lsl #14
   1d714:	adc	r2, r2, r2
   1d718:	subcs	r0, r0, r1, lsl #14
   1d71c:	cmp	r0, r1, lsl #13
   1d720:	adc	r2, r2, r2
   1d724:	subcs	r0, r0, r1, lsl #13
   1d728:	cmp	r0, r1, lsl #12
   1d72c:	adc	r2, r2, r2
   1d730:	subcs	r0, r0, r1, lsl #12
   1d734:	cmp	r0, r1, lsl #11
   1d738:	adc	r2, r2, r2
   1d73c:	subcs	r0, r0, r1, lsl #11
   1d740:	cmp	r0, r1, lsl #10
   1d744:	adc	r2, r2, r2
   1d748:	subcs	r0, r0, r1, lsl #10
   1d74c:	cmp	r0, r1, lsl #9
   1d750:	adc	r2, r2, r2
   1d754:	subcs	r0, r0, r1, lsl #9
   1d758:	cmp	r0, r1, lsl #8
   1d75c:	adc	r2, r2, r2
   1d760:	subcs	r0, r0, r1, lsl #8
   1d764:	cmp	r0, r1, lsl #7
   1d768:	adc	r2, r2, r2
   1d76c:	subcs	r0, r0, r1, lsl #7
   1d770:	cmp	r0, r1, lsl #6
   1d774:	adc	r2, r2, r2
   1d778:	subcs	r0, r0, r1, lsl #6
   1d77c:	cmp	r0, r1, lsl #5
   1d780:	adc	r2, r2, r2
   1d784:	subcs	r0, r0, r1, lsl #5
   1d788:	cmp	r0, r1, lsl #4
   1d78c:	adc	r2, r2, r2
   1d790:	subcs	r0, r0, r1, lsl #4
   1d794:	cmp	r0, r1, lsl #3
   1d798:	adc	r2, r2, r2
   1d79c:	subcs	r0, r0, r1, lsl #3
   1d7a0:	cmp	r0, r1, lsl #2
   1d7a4:	adc	r2, r2, r2
   1d7a8:	subcs	r0, r0, r1, lsl #2
   1d7ac:	cmp	r0, r1, lsl #1
   1d7b0:	adc	r2, r2, r2
   1d7b4:	subcs	r0, r0, r1, lsl #1
   1d7b8:	cmp	r0, r1
   1d7bc:	adc	r2, r2, r2
   1d7c0:	subcs	r0, r0, r1
   1d7c4:	mov	r0, r2
   1d7c8:	bx	lr
   1d7cc:	moveq	r0, #1
   1d7d0:	movne	r0, #0
   1d7d4:	bx	lr
   1d7d8:	clz	r2, r1
   1d7dc:	rsb	r2, r2, #31
   1d7e0:	lsr	r0, r0, r2
   1d7e4:	bx	lr
   1d7e8:	cmp	r0, #0
   1d7ec:	mvnne	r0, #0
   1d7f0:	b	1da90 <__assert_fail@plt+0xc760>
   1d7f4:	cmp	r1, #0
   1d7f8:	beq	1d7e8 <__assert_fail@plt+0xc4b8>
   1d7fc:	push	{r0, r1, lr}
   1d800:	bl	1d608 <__assert_fail@plt+0xc2d8>
   1d804:	pop	{r1, r2, lr}
   1d808:	mul	r3, r2, r0
   1d80c:	sub	r1, r1, r3
   1d810:	bx	lr
   1d814:	cmp	r1, #0
   1d818:	beq	1da24 <__assert_fail@plt+0xc6f4>
   1d81c:	eor	ip, r0, r1
   1d820:	rsbmi	r1, r1, #0
   1d824:	subs	r2, r1, #1
   1d828:	beq	1d9f0 <__assert_fail@plt+0xc6c0>
   1d82c:	movs	r3, r0
   1d830:	rsbmi	r3, r0, #0
   1d834:	cmp	r3, r1
   1d838:	bls	1d9fc <__assert_fail@plt+0xc6cc>
   1d83c:	tst	r1, r2
   1d840:	beq	1da0c <__assert_fail@plt+0xc6dc>
   1d844:	clz	r2, r3
   1d848:	clz	r0, r1
   1d84c:	sub	r2, r0, r2
   1d850:	rsbs	r2, r2, #31
   1d854:	addne	r2, r2, r2, lsl #1
   1d858:	mov	r0, #0
   1d85c:	addne	pc, pc, r2, lsl #2
   1d860:	nop			; (mov r0, r0)
   1d864:	cmp	r3, r1, lsl #31
   1d868:	adc	r0, r0, r0
   1d86c:	subcs	r3, r3, r1, lsl #31
   1d870:	cmp	r3, r1, lsl #30
   1d874:	adc	r0, r0, r0
   1d878:	subcs	r3, r3, r1, lsl #30
   1d87c:	cmp	r3, r1, lsl #29
   1d880:	adc	r0, r0, r0
   1d884:	subcs	r3, r3, r1, lsl #29
   1d888:	cmp	r3, r1, lsl #28
   1d88c:	adc	r0, r0, r0
   1d890:	subcs	r3, r3, r1, lsl #28
   1d894:	cmp	r3, r1, lsl #27
   1d898:	adc	r0, r0, r0
   1d89c:	subcs	r3, r3, r1, lsl #27
   1d8a0:	cmp	r3, r1, lsl #26
   1d8a4:	adc	r0, r0, r0
   1d8a8:	subcs	r3, r3, r1, lsl #26
   1d8ac:	cmp	r3, r1, lsl #25
   1d8b0:	adc	r0, r0, r0
   1d8b4:	subcs	r3, r3, r1, lsl #25
   1d8b8:	cmp	r3, r1, lsl #24
   1d8bc:	adc	r0, r0, r0
   1d8c0:	subcs	r3, r3, r1, lsl #24
   1d8c4:	cmp	r3, r1, lsl #23
   1d8c8:	adc	r0, r0, r0
   1d8cc:	subcs	r3, r3, r1, lsl #23
   1d8d0:	cmp	r3, r1, lsl #22
   1d8d4:	adc	r0, r0, r0
   1d8d8:	subcs	r3, r3, r1, lsl #22
   1d8dc:	cmp	r3, r1, lsl #21
   1d8e0:	adc	r0, r0, r0
   1d8e4:	subcs	r3, r3, r1, lsl #21
   1d8e8:	cmp	r3, r1, lsl #20
   1d8ec:	adc	r0, r0, r0
   1d8f0:	subcs	r3, r3, r1, lsl #20
   1d8f4:	cmp	r3, r1, lsl #19
   1d8f8:	adc	r0, r0, r0
   1d8fc:	subcs	r3, r3, r1, lsl #19
   1d900:	cmp	r3, r1, lsl #18
   1d904:	adc	r0, r0, r0
   1d908:	subcs	r3, r3, r1, lsl #18
   1d90c:	cmp	r3, r1, lsl #17
   1d910:	adc	r0, r0, r0
   1d914:	subcs	r3, r3, r1, lsl #17
   1d918:	cmp	r3, r1, lsl #16
   1d91c:	adc	r0, r0, r0
   1d920:	subcs	r3, r3, r1, lsl #16
   1d924:	cmp	r3, r1, lsl #15
   1d928:	adc	r0, r0, r0
   1d92c:	subcs	r3, r3, r1, lsl #15
   1d930:	cmp	r3, r1, lsl #14
   1d934:	adc	r0, r0, r0
   1d938:	subcs	r3, r3, r1, lsl #14
   1d93c:	cmp	r3, r1, lsl #13
   1d940:	adc	r0, r0, r0
   1d944:	subcs	r3, r3, r1, lsl #13
   1d948:	cmp	r3, r1, lsl #12
   1d94c:	adc	r0, r0, r0
   1d950:	subcs	r3, r3, r1, lsl #12
   1d954:	cmp	r3, r1, lsl #11
   1d958:	adc	r0, r0, r0
   1d95c:	subcs	r3, r3, r1, lsl #11
   1d960:	cmp	r3, r1, lsl #10
   1d964:	adc	r0, r0, r0
   1d968:	subcs	r3, r3, r1, lsl #10
   1d96c:	cmp	r3, r1, lsl #9
   1d970:	adc	r0, r0, r0
   1d974:	subcs	r3, r3, r1, lsl #9
   1d978:	cmp	r3, r1, lsl #8
   1d97c:	adc	r0, r0, r0
   1d980:	subcs	r3, r3, r1, lsl #8
   1d984:	cmp	r3, r1, lsl #7
   1d988:	adc	r0, r0, r0
   1d98c:	subcs	r3, r3, r1, lsl #7
   1d990:	cmp	r3, r1, lsl #6
   1d994:	adc	r0, r0, r0
   1d998:	subcs	r3, r3, r1, lsl #6
   1d99c:	cmp	r3, r1, lsl #5
   1d9a0:	adc	r0, r0, r0
   1d9a4:	subcs	r3, r3, r1, lsl #5
   1d9a8:	cmp	r3, r1, lsl #4
   1d9ac:	adc	r0, r0, r0
   1d9b0:	subcs	r3, r3, r1, lsl #4
   1d9b4:	cmp	r3, r1, lsl #3
   1d9b8:	adc	r0, r0, r0
   1d9bc:	subcs	r3, r3, r1, lsl #3
   1d9c0:	cmp	r3, r1, lsl #2
   1d9c4:	adc	r0, r0, r0
   1d9c8:	subcs	r3, r3, r1, lsl #2
   1d9cc:	cmp	r3, r1, lsl #1
   1d9d0:	adc	r0, r0, r0
   1d9d4:	subcs	r3, r3, r1, lsl #1
   1d9d8:	cmp	r3, r1
   1d9dc:	adc	r0, r0, r0
   1d9e0:	subcs	r3, r3, r1
   1d9e4:	cmp	ip, #0
   1d9e8:	rsbmi	r0, r0, #0
   1d9ec:	bx	lr
   1d9f0:	teq	ip, r0
   1d9f4:	rsbmi	r0, r0, #0
   1d9f8:	bx	lr
   1d9fc:	movcc	r0, #0
   1da00:	asreq	r0, ip, #31
   1da04:	orreq	r0, r0, #1
   1da08:	bx	lr
   1da0c:	clz	r2, r1
   1da10:	rsb	r2, r2, #31
   1da14:	cmp	ip, #0
   1da18:	lsr	r0, r3, r2
   1da1c:	rsbmi	r0, r0, #0
   1da20:	bx	lr
   1da24:	cmp	r0, #0
   1da28:	mvngt	r0, #-2147483648	; 0x80000000
   1da2c:	movlt	r0, #-2147483648	; 0x80000000
   1da30:	b	1da90 <__assert_fail@plt+0xc760>
   1da34:	cmp	r1, #0
   1da38:	beq	1da24 <__assert_fail@plt+0xc6f4>
   1da3c:	push	{r0, r1, lr}
   1da40:	bl	1d81c <__assert_fail@plt+0xc4ec>
   1da44:	pop	{r1, r2, lr}
   1da48:	mul	r3, r2, r0
   1da4c:	sub	r1, r1, r3
   1da50:	bx	lr
   1da54:	cmp	r3, #0
   1da58:	cmpeq	r2, #0
   1da5c:	bne	1da74 <__assert_fail@plt+0xc744>
   1da60:	cmp	r1, #0
   1da64:	cmpeq	r0, #0
   1da68:	mvnne	r1, #0
   1da6c:	mvnne	r0, #0
   1da70:	b	1da90 <__assert_fail@plt+0xc760>
   1da74:	sub	sp, sp, #8
   1da78:	push	{sp, lr}
   1da7c:	bl	1daa0 <__assert_fail@plt+0xc770>
   1da80:	ldr	lr, [sp, #4]
   1da84:	add	sp, sp, #8
   1da88:	pop	{r2, r3}
   1da8c:	bx	lr
   1da90:	push	{r1, lr}
   1da94:	mov	r0, #8
   1da98:	bl	11018 <raise@plt>
   1da9c:	pop	{r1, pc}
   1daa0:	cmp	r1, r3
   1daa4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1daa8:	cmpeq	r0, r2
   1daac:	mov	r4, r0
   1dab0:	mov	r5, r1
   1dab4:	ldr	r9, [sp, #28]
   1dab8:	movcc	r0, #0
   1dabc:	movcc	r1, #0
   1dac0:	bcc	1dbb8 <__assert_fail@plt+0xc888>
   1dac4:	cmp	r3, #0
   1dac8:	clzeq	ip, r2
   1dacc:	clzne	ip, r3
   1dad0:	addeq	ip, ip, #32
   1dad4:	cmp	r5, #0
   1dad8:	clzeq	r1, r4
   1dadc:	addeq	r1, r1, #32
   1dae0:	clzne	r1, r5
   1dae4:	sub	ip, ip, r1
   1dae8:	sub	lr, ip, #32
   1daec:	lsl	r7, r3, ip
   1daf0:	rsb	r8, ip, #32
   1daf4:	orr	r7, r7, r2, lsl lr
   1daf8:	orr	r7, r7, r2, lsr r8
   1dafc:	lsl	r6, r2, ip
   1db00:	cmp	r5, r7
   1db04:	cmpeq	r4, r6
   1db08:	movcc	r0, #0
   1db0c:	movcc	r1, #0
   1db10:	bcc	1db2c <__assert_fail@plt+0xc7fc>
   1db14:	mov	r3, #1
   1db18:	subs	r4, r4, r6
   1db1c:	lsl	r1, r3, lr
   1db20:	lsl	r0, r3, ip
   1db24:	orr	r1, r1, r3, lsr r8
   1db28:	sbc	r5, r5, r7
   1db2c:	cmp	ip, #0
   1db30:	beq	1dbb8 <__assert_fail@plt+0xc888>
   1db34:	lsrs	r3, r7, #1
   1db38:	rrx	r2, r6
   1db3c:	mov	r6, ip
   1db40:	b	1db64 <__assert_fail@plt+0xc834>
   1db44:	subs	r4, r4, r2
   1db48:	sbc	r5, r5, r3
   1db4c:	adds	r4, r4, r4
   1db50:	adc	r5, r5, r5
   1db54:	adds	r4, r4, #1
   1db58:	adc	r5, r5, #0
   1db5c:	subs	r6, r6, #1
   1db60:	beq	1db80 <__assert_fail@plt+0xc850>
   1db64:	cmp	r5, r3
   1db68:	cmpeq	r4, r2
   1db6c:	bcs	1db44 <__assert_fail@plt+0xc814>
   1db70:	adds	r4, r4, r4
   1db74:	adc	r5, r5, r5
   1db78:	subs	r6, r6, #1
   1db7c:	bne	1db64 <__assert_fail@plt+0xc834>
   1db80:	lsr	r6, r4, ip
   1db84:	lsr	r7, r5, ip
   1db88:	orr	r6, r6, r5, lsl r8
   1db8c:	adds	r2, r0, r4
   1db90:	orr	r6, r6, r5, lsr lr
   1db94:	adc	r3, r1, r5
   1db98:	lsl	r1, r7, ip
   1db9c:	orr	r1, r1, r6, lsl lr
   1dba0:	lsl	r0, r6, ip
   1dba4:	orr	r1, r1, r6, lsr r8
   1dba8:	subs	r0, r2, r0
   1dbac:	mov	r4, r6
   1dbb0:	mov	r5, r7
   1dbb4:	sbc	r1, r3, r1
   1dbb8:	cmp	r9, #0
   1dbbc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1dbc0:	strd	r4, [r9]
   1dbc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dbc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dbcc:	mov	r7, r0
   1dbd0:	ldr	r6, [pc, #72]	; 1dc20 <__assert_fail@plt+0xc8f0>
   1dbd4:	ldr	r5, [pc, #72]	; 1dc24 <__assert_fail@plt+0xc8f4>
   1dbd8:	add	r6, pc, r6
   1dbdc:	add	r5, pc, r5
   1dbe0:	sub	r6, r6, r5
   1dbe4:	mov	r8, r1
   1dbe8:	mov	r9, r2
   1dbec:	bl	10fc8 <fstatfs64@plt-0x20>
   1dbf0:	asrs	r6, r6, #2
   1dbf4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dbf8:	mov	r4, #0
   1dbfc:	add	r4, r4, #1
   1dc00:	ldr	r3, [r5], #4
   1dc04:	mov	r2, r9
   1dc08:	mov	r1, r8
   1dc0c:	mov	r0, r7
   1dc10:	blx	r3
   1dc14:	cmp	r6, r4
   1dc18:	bne	1dbfc <__assert_fail@plt+0xc8cc>
   1dc1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dc20:	andeq	r2, r1, r0, lsr r3
   1dc24:	andeq	r2, r1, r8, lsr #6
   1dc28:	bx	lr
   1dc2c:	ldr	r3, [pc, #12]	; 1dc40 <__assert_fail@plt+0xc910>
   1dc30:	mov	r1, #0
   1dc34:	add	r3, pc, r3
   1dc38:	ldr	r2, [r3]
   1dc3c:	b	111f8 <__cxa_atexit@plt>
   1dc40:	strdeq	r2, [r1], -r4

Disassembly of section .fini:

0001dc44 <.fini>:
   1dc44:	push	{r3, lr}
   1dc48:	pop	{r3, pc}
