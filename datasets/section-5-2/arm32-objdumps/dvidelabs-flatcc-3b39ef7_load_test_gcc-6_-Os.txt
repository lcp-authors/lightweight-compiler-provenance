
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00011f8c <.init>:
   11f8c:	push	{r3, lr}
   11f90:	bl	1255c <_start@@Base+0x3c>
   11f94:	pop	{r3, pc}

Disassembly of section .plt:

00011f98 <raise@plt-0x14>:
   11f98:	push	{lr}		; (str lr, [sp, #-4]!)
   11f9c:	ldr	lr, [pc, #4]	; 11fa8 <raise@plt-0x4>
   11fa0:	add	lr, pc, lr
   11fa4:	ldr	pc, [lr, #8]!
   11fa8:	andeq	r6, r1, r8, asr r0

00011fac <raise@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #90112	; 0x16000
   11fb4:	ldr	pc, [ip, #88]!	; 0x58

00011fb8 <strcmp@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #90112	; 0x16000
   11fc0:	ldr	pc, [ip, #80]!	; 0x50

00011fc4 <printf@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #90112	; 0x16000
   11fcc:	ldr	pc, [ip, #72]!	; 0x48

00011fd0 <fopen@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #90112	; 0x16000
   11fd8:	ldr	pc, [ip, #64]!	; 0x40

00011fdc <free@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #90112	; 0x16000
   11fe4:	ldr	pc, [ip, #56]!	; 0x38

00011fe8 <memcpy@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #90112	; 0x16000
   11ff0:	ldr	pc, [ip, #48]!	; 0x30

00011ff4 <memcmp@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #90112	; 0x16000
   11ffc:	ldr	pc, [ip, #40]!	; 0x28

00012000 <realloc@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #90112	; 0x16000
   12008:	ldr	pc, [ip, #32]!

0001200c <fwrite@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #90112	; 0x16000
   12014:	ldr	pc, [ip, #24]!

00012018 <gettimeofday@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #90112	; 0x16000
   12020:	ldr	pc, [ip, #16]!

00012024 <puts@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #90112	; 0x16000
   1202c:	ldr	pc, [ip, #8]!

00012030 <malloc@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #90112	; 0x16000
   12038:	ldr	pc, [ip, #0]!

0001203c <__libc_start_main@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #86016	; 0x15000
   12044:	ldr	pc, [ip, #4088]!	; 0xff8

00012048 <__gmon_start__@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #86016	; 0x15000
   12050:	ldr	pc, [ip, #4080]!	; 0xff0

00012054 <strlen@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #86016	; 0x15000
   1205c:	ldr	pc, [ip, #4072]!	; 0xfe8

00012060 <posix_memalign@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #86016	; 0x15000
   12068:	ldr	pc, [ip, #4064]!	; 0xfe0

0001206c <memset@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #86016	; 0x15000
   12074:	ldr	pc, [ip, #4056]!	; 0xfd8

00012078 <memchr@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #86016	; 0x15000
   12080:	ldr	pc, [ip, #4048]!	; 0xfd0

00012084 <fclose@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #86016	; 0x15000
   1208c:	ldr	pc, [ip, #4040]!	; 0xfc8

00012090 <abort@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #86016	; 0x15000
   12098:	ldr	pc, [ip, #4032]!	; 0xfc0

0001209c <__assert_fail@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #86016	; 0x15000
   120a4:	ldr	pc, [ip, #4024]!	; 0xfb8

Disassembly of section .text:

000120a8 <main@@Base>:
   120a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120ac:	vpush	{d8-d10}
   120b0:	sub	sp, sp, #252	; 0xfc
   120b4:	add	r0, sp, #16
   120b8:	bl	131f8 <flatcc_builder_init@@Base>
   120bc:	add	r0, sp, #16
   120c0:	bl	12784 <_start@@Base+0x264>
   120c4:	add	r1, sp, #8
   120c8:	add	r0, sp, #16
   120cc:	bl	15704 <flatcc_builder_finalize_buffer@@Base>
   120d0:	ldr	r1, [pc, #960]	; 12498 <main@@Base+0x3f0>
   120d4:	mov	r6, r0
   120d8:	ldr	r0, [pc, #956]	; 1249c <main@@Base+0x3f4>
   120dc:	bl	11fd0 <fopen@plt>
   120e0:	subs	r4, r0, #0
   120e4:	beq	1246c <main@@Base+0x3c4>
   120e8:	mov	r3, r4
   120ec:	ldr	r2, [sp, #8]
   120f0:	mov	r1, #1
   120f4:	mov	r0, r6
   120f8:	bl	1200c <fwrite@plt>
   120fc:	ldr	r5, [sp, #8]
   12100:	mov	r7, r0
   12104:	mov	r0, r4
   12108:	bl	12084 <fclose@plt>
   1210c:	cmp	r7, r5
   12110:	movne	r8, #1
   12114:	bne	12418 <main@@Base+0x370>
   12118:	ldr	r1, [sp, #8]
   1211c:	ldr	r0, [pc, #892]	; 124a0 <main@@Base+0x3f8>
   12120:	bl	11fc4 <printf@plt>
   12124:	ldr	r0, [pc, #888]	; 124a4 <main@@Base+0x3fc>
   12128:	bl	12024 <puts@plt>
   1212c:	bl	12648 <_start@@Base+0x128>
   12130:	ldr	r7, [pc, #880]	; 124a8 <main@@Base+0x400>
   12134:	mov	sl, #10
   12138:	vmov.f64	d8, d0
   1213c:	add	r0, sp, #16
   12140:	bl	12784 <_start@@Base+0x264>
   12144:	ldr	r2, [sp, #8]
   12148:	mov	r1, r6
   1214c:	add	r0, sp, #16
   12150:	bl	156b8 <flatcc_builder_copy_buffer@@Base>
   12154:	ldr	r4, [r6, #4]
   12158:	str	r7, [sp, #12]
   1215c:	cmp	r7, #0
   12160:	cmpne	r4, r7
   12164:	moveq	r4, #1
   12168:	ldreq	r4, [r6]
   1216c:	movne	r4, #0
   12170:	addeq	r4, r6, r4
   12174:	mov	r0, r4
   12178:	bl	126bc <_start@@Base+0x19c>
   1217c:	ldr	r1, [pc, #808]	; 124ac <main@@Base+0x404>
   12180:	bl	11fb8 <strcmp@plt>
   12184:	cmp	r0, #0
   12188:	beq	121a0 <main@@Base+0xf8>
   1218c:	ldr	r3, [pc, #796]	; 124b0 <main@@Base+0x408>
   12190:	mov	r2, #139	; 0x8b
   12194:	ldr	r1, [pc, #792]	; 124b4 <main@@Base+0x40c>
   12198:	ldr	r0, [pc, #792]	; 124b8 <main@@Base+0x410>
   1219c:	b	121b8 <main@@Base+0x110>
   121a0:	cmp	r4, #0
   121a4:	bne	121bc <main@@Base+0x114>
   121a8:	ldr	r3, [pc, #780]	; 124bc <main@@Base+0x414>
   121ac:	ldr	r2, [pc, #780]	; 124c0 <main@@Base+0x418>
   121b0:	ldr	r1, [pc, #780]	; 124c4 <main@@Base+0x41c>
   121b4:	ldr	r0, [pc, #780]	; 124c8 <main@@Base+0x420>
   121b8:	bl	1209c <__assert_fail@plt>
   121bc:	ldr	r3, [r4]
   121c0:	sub	r3, r4, r3
   121c4:	ldrh	r2, [r3]
   121c8:	cmp	r2, #27
   121cc:	bls	121fc <main@@Base+0x154>
   121d0:	ldrh	r3, [r3, #26]
   121d4:	cmp	r3, #0
   121d8:	beq	121fc <main@@Base+0x154>
   121dc:	add	r5, r4, r3
   121e0:	ldr	r3, [r4, r3]
   121e4:	add	r3, r3, #4
   121e8:	adds	r5, r5, r3
   121ec:	beq	121fc <main@@Base+0x154>
   121f0:	ldr	r3, [r5, #-4]
   121f4:	cmp	r3, #1000	; 0x3e8
   121f8:	beq	12208 <main@@Base+0x160>
   121fc:	ldr	r3, [pc, #684]	; 124b0 <main@@Base+0x408>
   12200:	mov	r2, #143	; 0x8f
   12204:	b	12194 <main@@Base+0xec>
   12208:	add	r3, r5, #4000	; 0xfa0
   1220c:	str	r3, [sp]
   12210:	mov	r4, r5
   12214:	add	r5, r5, #4
   12218:	ldr	fp, [r4]
   1221c:	add	r8, r4, fp
   12220:	mov	r0, r8
   12224:	bl	126bc <_start@@Base+0x19c>
   12228:	cmp	r8, #0
   1222c:	mov	r9, r0
   12230:	ldreq	r3, [pc, #660]	; 124cc <main@@Base+0x424>
   12234:	ldreq	r2, [pc, #660]	; 124d0 <main@@Base+0x428>
   12238:	beq	121b0 <main@@Base+0x108>
   1223c:	ldr	r3, [r4, fp]
   12240:	sub	r3, r8, r3
   12244:	ldrh	r2, [r3]
   12248:	cmp	r2, #15
   1224c:	movls	r4, #0
   12250:	bls	1226c <main@@Base+0x1c4>
   12254:	ldrh	r4, [r3, #14]
   12258:	cmp	r4, #0
   1225c:	addne	r3, r8, r4
   12260:	ldrne	r4, [r8, r4]
   12264:	addne	r4, r4, #4
   12268:	addne	r4, r3, r4
   1226c:	cmp	r9, #0
   12270:	beq	12280 <main@@Base+0x1d8>
   12274:	ldr	r3, [r9, #-4]
   12278:	cmp	r3, #700	; 0x2bc
   1227c:	beq	12294 <main@@Base+0x1ec>
   12280:	ldr	r3, [pc, #588]	; 124d4 <main@@Base+0x42c>
   12284:	mov	r2, #74	; 0x4a
   12288:	ldr	r1, [pc, #548]	; 124b4 <main@@Base+0x40c>
   1228c:	ldr	r0, [pc, #580]	; 124d8 <main@@Base+0x430>
   12290:	b	121b8 <main@@Base+0x110>
   12294:	cmp	r4, #0
   12298:	beq	122ac <main@@Base+0x204>
   1229c:	ldr	r3, [r4, #-4]
   122a0:	ldr	r2, [pc, #564]	; 124dc <main@@Base+0x434>
   122a4:	cmp	r3, r2
   122a8:	beq	122b8 <main@@Base+0x210>
   122ac:	ldr	r3, [pc, #544]	; 124d4 <main@@Base+0x42c>
   122b0:	mov	r2, #78	; 0x4e
   122b4:	b	12288 <main@@Base+0x1e0>
   122b8:	mov	r8, #0
   122bc:	mov	r3, #7
   122c0:	mla	fp, r3, r8, r9
   122c4:	mov	r2, #7
   122c8:	ldr	r1, [pc, #528]	; 124e0 <main@@Base+0x438>
   122cc:	mov	r0, fp
   122d0:	str	r3, [sp, #4]
   122d4:	bl	11ff4 <memcmp@plt>
   122d8:	ldr	r3, [sp, #4]
   122dc:	cmp	r0, #0
   122e0:	beq	1230c <main@@Base+0x264>
   122e4:	mov	r2, r9
   122e8:	mov	r1, r8
   122ec:	ldr	r0, [pc, #496]	; 124e4 <main@@Base+0x43c>
   122f0:	bl	11fc4 <printf@plt>
   122f4:	sub	r1, fp, r6
   122f8:	ldr	r0, [pc, #488]	; 124e8 <main@@Base+0x440>
   122fc:	bl	11fc4 <printf@plt>
   12300:	ldr	r3, [pc, #460]	; 124d4 <main@@Base+0x42c>
   12304:	mov	r2, #85	; 0x55
   12308:	b	12288 <main@@Base+0x1e0>
   1230c:	add	r8, r8, #1
   12310:	cmp	r8, #100	; 0x64
   12314:	bne	122c0 <main@@Base+0x218>
   12318:	add	r9, r4, #99328	; 0x18400
   1231c:	add	r9, r9, #672	; 0x2a0
   12320:	mov	fp, #1000	; 0x3e8
   12324:	mov	r2, fp
   12328:	ldr	r1, [pc, #444]	; 124ec <main@@Base+0x444>
   1232c:	mov	r0, r4
   12330:	bl	11ff4 <memcmp@plt>
   12334:	subs	r8, r0, #0
   12338:	ldrne	r3, [pc, #404]	; 124d4 <main@@Base+0x42c>
   1233c:	movne	r2, #91	; 0x5b
   12340:	bne	12288 <main@@Base+0x1e0>
   12344:	add	r4, r4, #1000	; 0x3e8
   12348:	cmp	r9, r4
   1234c:	bne	12324 <main@@Base+0x27c>
   12350:	ldr	r3, [sp]
   12354:	cmp	r5, r3
   12358:	bne	12210 <main@@Base+0x168>
   1235c:	subs	sl, sl, #1
   12360:	bne	1213c <main@@Base+0x94>
   12364:	bl	12648 <_start@@Base+0x128>
   12368:	ldr	r1, [pc, #384]	; 124f0 <main@@Base+0x448>
   1236c:	ldr	r0, [pc, #384]	; 124f4 <main@@Base+0x44c>
   12370:	ldr	r4, [sp, #8]
   12374:	vldr	d10, [pc, #252]	; 12478 <main@@Base+0x3d0>
   12378:	vldr	d9, [pc, #256]	; 12480 <main@@Base+0x3d8>
   1237c:	vsub.f64	d8, d0, d8
   12380:	bl	11fc4 <printf@plt>
   12384:	ldr	r0, [pc, #364]	; 124f8 <main@@Base+0x450>
   12388:	vmov	r2, r3, d8
   1238c:	bl	11fc4 <printf@plt>
   12390:	mov	r1, #10
   12394:	ldr	r0, [pc, #352]	; 124fc <main@@Base+0x454>
   12398:	bl	11fc4 <printf@plt>
   1239c:	mov	r1, r4
   123a0:	ldr	r0, [pc, #344]	; 12500 <main@@Base+0x458>
   123a4:	bl	11fc4 <printf@plt>
   123a8:	vmov	s15, r4
   123ac:	ldr	r0, [pc, #336]	; 12504 <main@@Base+0x45c>
   123b0:	vcvt.f64.u32	d7, s15
   123b4:	vmul.f64	d7, d7, d10
   123b8:	vdiv.f64	d6, d7, d9
   123bc:	vdiv.f64	d7, d6, d8
   123c0:	vmov	r2, r3, d7
   123c4:	bl	11fc4 <printf@plt>
   123c8:	vdiv.f64	d7, d10, d8
   123cc:	ldr	r0, [pc, #308]	; 12508 <main@@Base+0x460>
   123d0:	vmov	r2, r3, d7
   123d4:	bl	11fc4 <printf@plt>
   123d8:	vldr	d6, [pc, #168]	; 12488 <main@@Base+0x3e0>
   123dc:	vldr	d5, [pc, #172]	; 12490 <main@@Base+0x3e8>
   123e0:	vmul.f64	d8, d8, d6
   123e4:	vdiv.f64	d7, d8, d10
   123e8:	vcmpe.f64	d7, d5
   123ec:	vmrs	APSR_nzcv, fpscr
   123f0:	vmovmi	r2, r3, d7
   123f4:	ldrmi	r0, [pc, #272]	; 1250c <main@@Base+0x464>
   123f8:	bmi	12414 <main@@Base+0x36c>
   123fc:	vcmpe.f64	d7, d9
   12400:	vmrs	APSR_nzcv, fpscr
   12404:	bpl	12448 <main@@Base+0x3a0>
   12408:	vdiv.f64	d6, d7, d5
   1240c:	ldr	r0, [pc, #252]	; 12510 <main@@Base+0x468>
   12410:	vmov	r2, r3, d6
   12414:	bl	11fc4 <printf@plt>
   12418:	add	r0, sp, #16
   1241c:	bl	13384 <flatcc_builder_clear@@Base>
   12420:	mov	r0, r6
   12424:	bl	11fdc <free@plt>
   12428:	cmp	r8, #0
   1242c:	beq	12438 <main@@Base+0x390>
   12430:	ldr	r0, [pc, #220]	; 12514 <main@@Base+0x46c>
   12434:	bl	12024 <puts@plt>
   12438:	mov	r0, r8
   1243c:	add	sp, sp, #252	; 0xfc
   12440:	vpop	{d8-d10}
   12444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12448:	vcmpe.f64	d7, d6
   1244c:	vmrs	APSR_nzcv, fpscr
   12450:	vdivmi.f64	d6, d7, d9
   12454:	ldrmi	r0, [pc, #188]	; 12518 <main@@Base+0x470>
   12458:	ldrpl	r0, [pc, #188]	; 1251c <main@@Base+0x474>
   1245c:	vdivpl.f64	d5, d7, d6
   12460:	vmovmi	r2, r3, d6
   12464:	vmovpl	r2, r3, d5
   12468:	b	12414 <main@@Base+0x36c>
   1246c:	mvn	r8, #0
   12470:	b	12418 <main@@Base+0x370>
   12474:	nop			; (mov r0, r0)
   12478:	andeq	r0, r0, r0
   1247c:	eormi	r0, r4, r0
   12480:	andeq	r0, r0, r0
   12484:	smlawbmi	lr, r0, r4, r8
   12488:	andeq	r0, r0, r0
   1248c:	bicmi	ip, sp, r5, ror #26
   12490:	andeq	r0, r0, r0
   12494:	addmi	r4, pc, r0
   12498:			; <UNDEFINED> instruction: 0x000162b3
   1249c:			; <UNDEFINED> instruction: 0x000162b6
   124a0:	andeq	r6, r1, ip, asr #5
   124a4:	ldrdeq	r6, [r1], -lr
   124a8:	movtpl	r4, #61261	; 0xef4d
   124ac:	andeq	r6, r1, lr, asr #4
   124b0:	andeq	r6, r1, r3, asr #32
   124b4:	andeq	r6, r1, r3, ror #4
   124b8:	andeq	r6, r1, pc, ror #5
   124bc:	andeq	r6, r1, r8, asr #32
   124c0:	andeq	r0, r0, r7, asr #5
   124c4:	andeq	r6, r1, r1, lsr #1
   124c8:	andeq	r6, r1, r0, lsl #2
   124cc:	andeq	r6, r1, r1, ror r0
   124d0:	andeq	r0, r0, r2, asr #5
   124d4:	muleq	r1, r2, r0
   124d8:	andeq	r6, r1, sp, lsr #23
   124dc:	andeq	r8, r1, r0, lsr #13
   124e0:	andeq	r6, r1, fp, asr r2
   124e4:	strdeq	r6, [r1], -r8
   124e8:	andeq	r6, r1, r8, lsl r3
   124ec:	andeq	r8, r2, r8, ror r0
   124f0:	andeq	r6, r1, r5, lsr #6
   124f4:	andeq	r6, r1, lr, asr #6
   124f8:	andeq	r6, r1, sp, asr r3
   124fc:	andeq	r6, r1, r5, ror r3
   12500:	andeq	r6, r1, r5, lsl #7
   12504:	muleq	r1, r8, r3
   12508:			; <UNDEFINED> instruction: 0x000163b0
   1250c:	ldrdeq	r6, [r1], -r1
   12510:	andeq	r6, r1, r9, ror #7
   12514:	andeq	r6, r1, r0, lsr r4
   12518:	andeq	r6, r1, r1, lsl #8
   1251c:	andeq	r6, r1, r9, lsl r4

00012520 <_start@@Base>:
   12520:	mov	fp, #0
   12524:	mov	lr, #0
   12528:	pop	{r1}		; (ldr r1, [sp], #4)
   1252c:	mov	r2, sp
   12530:	push	{r2}		; (str r2, [sp, #-4]!)
   12534:	push	{r0}		; (str r0, [sp, #-4]!)
   12538:	ldr	ip, [pc, #16]	; 12550 <_start@@Base+0x30>
   1253c:	push	{ip}		; (str ip, [sp, #-4]!)
   12540:	ldr	r0, [pc, #12]	; 12554 <_start@@Base+0x34>
   12544:	ldr	r3, [pc, #12]	; 12558 <_start@@Base+0x38>
   12548:	bl	1203c <__libc_start_main@plt>
   1254c:	bl	12090 <abort@plt>
   12550:	ldrdeq	r5, [r1], -r4
   12554:	andeq	r2, r1, r8, lsr #1
   12558:	andeq	r5, r1, r4, ror pc
   1255c:	ldr	r3, [pc, #20]	; 12578 <_start@@Base+0x58>
   12560:	ldr	r2, [pc, #20]	; 1257c <_start@@Base+0x5c>
   12564:	add	r3, pc, r3
   12568:	ldr	r2, [r3, r2]
   1256c:	cmp	r2, #0
   12570:	bxeq	lr
   12574:	b	12048 <__gmon_start__@plt>
   12578:	muleq	r1, r4, sl
   1257c:	andeq	r0, r0, r0, rrx
   12580:	ldr	r3, [pc, #28]	; 125a4 <_start@@Base+0x84>
   12584:	ldr	r0, [pc, #28]	; 125a8 <_start@@Base+0x88>
   12588:	sub	r3, r3, r0
   1258c:	cmp	r3, #6
   12590:	bxls	lr
   12594:	ldr	r3, [pc, #16]	; 125ac <_start@@Base+0x8c>
   12598:	cmp	r3, #0
   1259c:	bxeq	lr
   125a0:	bx	r3
   125a4:	andeq	r8, r2, pc, rrx
   125a8:	andeq	r8, r2, ip, rrx
   125ac:	andeq	r0, r0, r0
   125b0:	ldr	r1, [pc, #36]	; 125dc <_start@@Base+0xbc>
   125b4:	ldr	r0, [pc, #36]	; 125e0 <_start@@Base+0xc0>
   125b8:	sub	r1, r1, r0
   125bc:	asr	r1, r1, #2
   125c0:	add	r1, r1, r1, lsr #31
   125c4:	asrs	r1, r1, #1
   125c8:	bxeq	lr
   125cc:	ldr	r3, [pc, #16]	; 125e4 <_start@@Base+0xc4>
   125d0:	cmp	r3, #0
   125d4:	bxeq	lr
   125d8:	bx	r3
   125dc:	andeq	r8, r2, ip, rrx
   125e0:	andeq	r8, r2, ip, rrx
   125e4:	andeq	r0, r0, r0
   125e8:	push	{r4, lr}
   125ec:	ldr	r4, [pc, #24]	; 1260c <_start@@Base+0xec>
   125f0:	ldrb	r3, [r4]
   125f4:	cmp	r3, #0
   125f8:	popne	{r4, pc}
   125fc:	bl	12580 <_start@@Base+0x60>
   12600:	mov	r3, #1
   12604:	strb	r3, [r4]
   12608:	pop	{r4, pc}
   1260c:	andeq	r8, r2, ip, rrx
   12610:	ldr	r0, [pc, #40]	; 12640 <_start@@Base+0x120>
   12614:	ldr	r3, [r0]
   12618:	cmp	r3, #0
   1261c:	bne	12624 <_start@@Base+0x104>
   12620:	b	125b0 <_start@@Base+0x90>
   12624:	ldr	r3, [pc, #24]	; 12644 <_start@@Base+0x124>
   12628:	cmp	r3, #0
   1262c:	beq	12620 <_start@@Base+0x100>
   12630:	push	{r4, lr}
   12634:	blx	r3
   12638:	pop	{r4, lr}
   1263c:	b	125b0 <_start@@Base+0x90>
   12640:	andeq	r7, r2, r4, lsl pc
   12644:	andeq	r0, r0, r0
   12648:	push	{r0, r1, r4, lr}
   1264c:	mov	r1, #0
   12650:	mov	r0, sp
   12654:	bl	12018 <gettimeofday@plt>
   12658:	ldr	r3, [pc, #88]	; 126b8 <_start@@Base+0x198>
   1265c:	vldr	d5, [pc, #76]	; 126b0 <_start@@Base+0x190>
   12660:	ldr	r2, [r3]
   12664:	cmp	r2, #0
   12668:	moveq	r4, sp
   1266c:	ldr	r2, [sp, #4]
   12670:	ldmeq	r4, {r0, r1}
   12674:	stmeq	r3, {r0, r1}
   12678:	ldr	r1, [r3, #4]
   1267c:	sub	r2, r2, r1
   12680:	vmov	s15, r2
   12684:	ldr	r2, [r3]
   12688:	ldr	r3, [sp]
   1268c:	vcvt.f64.s32	d7, s15
   12690:	sub	r3, r3, r2
   12694:	vmov	s0, r3
   12698:	vcvt.f64.s32	d0, s0
   1269c:	vdiv.f64	d6, d7, d5
   126a0:	vadd.f64	d0, d6, d0
   126a4:	add	sp, sp, #8
   126a8:	pop	{r4, pc}
   126ac:	nop			; (mov r0, r0)
   126b0:	andeq	r0, r0, r0
   126b4:	smlawbmi	lr, r0, r4, r8
   126b8:	andeq	r8, r2, r0, ror r0
   126bc:	cmp	r0, #0
   126c0:	push	{r4, lr}
   126c4:	bne	126dc <_start@@Base+0x1bc>
   126c8:	ldr	r3, [pc, #84]	; 12724 <_start@@Base+0x204>
   126cc:	ldr	r2, [pc, #84]	; 12728 <_start@@Base+0x208>
   126d0:	ldr	r1, [pc, #84]	; 1272c <_start@@Base+0x20c>
   126d4:	ldr	r0, [pc, #84]	; 12730 <_start@@Base+0x210>
   126d8:	bl	1209c <__assert_fail@plt>
   126dc:	ldr	r3, [r0]
   126e0:	sub	r3, r0, r3
   126e4:	ldrh	r2, [r3]
   126e8:	cmp	r2, #11
   126ec:	bls	126fc <_start@@Base+0x1dc>
   126f0:	ldrh	r2, [r3, #10]
   126f4:	cmp	r2, #0
   126f8:	bne	12710 <_start@@Base+0x1f0>
   126fc:	ldr	r3, [pc, #32]	; 12724 <_start@@Base+0x204>
   12700:	ldr	r2, [pc, #32]	; 12728 <_start@@Base+0x208>
   12704:	ldr	r1, [pc, #32]	; 1272c <_start@@Base+0x20c>
   12708:	ldr	r0, [pc, #36]	; 12734 <_start@@Base+0x214>
   1270c:	b	126d8 <_start@@Base+0x1b8>
   12710:	add	r3, r0, r2
   12714:	ldr	r0, [r0, r2]
   12718:	add	r0, r0, #4
   1271c:	add	r0, r3, r0
   12720:	pop	{r4, pc}
   12724:	andeq	r5, r1, r4, ror #31
   12728:			; <UNDEFINED> instruction: 0x000002bb
   1272c:	andeq	r6, r1, r1, lsr #1
   12730:	andeq	r6, r1, r0, lsl #2
   12734:	andeq	r6, r1, r6, lsr #2
   12738:	push	{r4, lr}
   1273c:	mov	r2, #1
   12740:	ldr	r1, [pc, #44]	; 12774 <_start@@Base+0x254>
   12744:	mov	r4, r0
   12748:	bl	146bc <flatcc_builder_check_required@@Base>
   1274c:	cmp	r0, #0
   12750:	bne	12768 <_start@@Base+0x248>
   12754:	ldr	r3, [pc, #28]	; 12778 <_start@@Base+0x258>
   12758:	mov	r2, #235	; 0xeb
   1275c:	ldr	r1, [pc, #24]	; 1277c <_start@@Base+0x25c>
   12760:	ldr	r0, [pc, #24]	; 12780 <_start@@Base+0x260>
   12764:	bl	1209c <__assert_fail@plt>
   12768:	mov	r0, r4
   1276c:	pop	{r4, lr}
   12770:	b	1473c <flatcc_builder_end_table@@Base>
   12774:	andeq	r6, r1, r0
   12778:	andeq	r6, r1, r4
   1277c:	andeq	r6, r1, r7, asr #2
   12780:	andeq	r6, r1, r7, lsr #3
   12784:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12788:	mov	r4, r0
   1278c:	bl	13378 <flatcc_builder_reset@@Base>
   12790:	mov	r3, #0
   12794:	mov	r2, r3
   12798:	ldr	r1, [pc, #392]	; 12928 <_start@@Base+0x408>
   1279c:	mov	r0, r4
   127a0:	bl	138fc <flatcc_builder_start_buffer@@Base>
   127a4:	cmp	r0, #0
   127a8:	bne	127b8 <_start@@Base+0x298>
   127ac:	mov	r1, #36	; 0x24
   127b0:	mov	r0, r4
   127b4:	bl	14100 <flatcc_builder_start_table@@Base>
   127b8:	ldr	r1, [pc, #364]	; 1292c <_start@@Base+0x40c>
   127bc:	mov	r0, r4
   127c0:	bl	14fc8 <flatcc_builder_create_string_str@@Base>
   127c4:	subs	r5, r0, #0
   127c8:	beq	127e0 <_start@@Base+0x2c0>
   127cc:	mov	r1, #3
   127d0:	mov	r0, r4
   127d4:	bl	15274 <flatcc_builder_table_add_offset@@Base>
   127d8:	cmp	r0, #0
   127dc:	strne	r5, [r0]
   127e0:	mov	r0, r4
   127e4:	bl	1403c <flatcc_builder_start_offset_vector@@Base>
   127e8:	ldr	r9, [pc, #320]	; 12930 <_start@@Base+0x410>
   127ec:	ldr	r7, [pc, #320]	; 12934 <_start@@Base+0x414>
   127f0:	mov	r5, #1000	; 0x3e8
   127f4:	mov	r8, #7
   127f8:	mov	r1, #36	; 0x24
   127fc:	mov	r0, r4
   12800:	bl	14100 <flatcc_builder_start_table@@Base>
   12804:	mov	r0, r4
   12808:	bl	14084 <flatcc_builder_start_string@@Base>
   1280c:	mov	r6, #100	; 0x64
   12810:	mov	r2, r8
   12814:	mov	r1, r9
   12818:	mov	r0, r4
   1281c:	bl	13db4 <flatcc_builder_append_string@@Base>
   12820:	subs	r6, r6, #1
   12824:	bne	12810 <_start@@Base+0x2f0>
   12828:	mov	r0, r4
   1282c:	bl	15028 <flatcc_builder_end_string@@Base>
   12830:	subs	r6, r0, #0
   12834:	beq	1284c <_start@@Base+0x32c>
   12838:	mov	r1, #3
   1283c:	mov	r0, r4
   12840:	bl	15274 <flatcc_builder_table_add_offset@@Base>
   12844:	cmp	r0, #0
   12848:	strne	r6, [r0]
   1284c:	mov	r2, #1
   12850:	mvn	r3, #0
   12854:	mov	r1, r2
   12858:	mov	r0, r4
   1285c:	bl	13fe4 <flatcc_builder_start_vector@@Base>
   12860:	mov	r6, #100	; 0x64
   12864:	mov	sl, #1000	; 0x3e8
   12868:	mov	r2, sl
   1286c:	mov	r1, r7
   12870:	mov	r0, r4
   12874:	bl	13bbc <flatcc_builder_append_vector@@Base>
   12878:	subs	r6, r6, #1
   1287c:	bne	12868 <_start@@Base+0x348>
   12880:	mov	r0, r4
   12884:	bl	1495c <flatcc_builder_end_vector@@Base>
   12888:	subs	r6, r0, #0
   1288c:	beq	128a4 <_start@@Base+0x384>
   12890:	mov	r1, #5
   12894:	mov	r0, r4
   12898:	bl	15274 <flatcc_builder_table_add_offset@@Base>
   1289c:	cmp	r0, #0
   128a0:	strne	r6, [r0]
   128a4:	mov	r0, r4
   128a8:	bl	12738 <_start@@Base+0x218>
   128ac:	subs	r1, r0, #0
   128b0:	bne	128c8 <_start@@Base+0x3a8>
   128b4:	ldr	r3, [pc, #124]	; 12938 <_start@@Base+0x418>
   128b8:	ldr	r1, [pc, #124]	; 1293c <_start@@Base+0x41c>
   128bc:	ldr	r0, [pc, #124]	; 12940 <_start@@Base+0x420>
   128c0:	mov	r2, #42	; 0x2a
   128c4:	bl	1209c <__assert_fail@plt>
   128c8:	mov	r0, r4
   128cc:	bl	13c70 <flatcc_builder_offset_vector_push@@Base>
   128d0:	subs	r5, r5, #1
   128d4:	bne	127f8 <_start@@Base+0x2d8>
   128d8:	mov	r0, r4
   128dc:	bl	14a00 <flatcc_builder_end_offset_vector@@Base>
   128e0:	subs	r5, r0, #0
   128e4:	ldreq	r3, [pc, #88]	; 12944 <_start@@Base+0x424>
   128e8:	moveq	r2, #56	; 0x38
   128ec:	ldreq	r1, [pc, #72]	; 1293c <_start@@Base+0x41c>
   128f0:	ldreq	r0, [pc, #80]	; 12948 <_start@@Base+0x428>
   128f4:	beq	128c4 <_start@@Base+0x3a4>
   128f8:	mov	r1, #11
   128fc:	mov	r0, r4
   12900:	bl	15274 <flatcc_builder_table_add_offset@@Base>
   12904:	cmp	r0, #0
   12908:	strne	r5, [r0]
   1290c:	mov	r0, r4
   12910:	bl	12738 <_start@@Base+0x218>
   12914:	mov	r1, r0
   12918:	mov	r0, r4
   1291c:	bl	1399c <flatcc_builder_end_buffer@@Base>
   12920:	mov	r0, #0
   12924:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12928:	andeq	r6, r1, r9, asr #4
   1292c:	andeq	r6, r1, lr, asr #4
   12930:	andeq	r6, r1, fp, asr r2
   12934:	andeq	r8, r2, r8, ror r0
   12938:	andeq	r6, r1, pc, lsl r0
   1293c:	andeq	r6, r1, r3, ror #4
   12940:	andeq	r6, r1, lr, lsr #5
   12944:	andeq	r6, r1, pc, lsr #32
   12948:			; <UNDEFINED> instruction: 0x000162b0
   1294c:	ldr	ip, [r0, #28]
   12950:	ldr	r3, [r0, #64]	; 0x40
   12954:	ldr	r2, [r0, #60]	; 0x3c
   12958:	sub	r3, r3, ip
   1295c:	cmp	r3, r1
   12960:	strls	r3, [r0, #24]
   12964:	strhi	r1, [r0, #24]
   12968:	ldr	r3, [r0, #32]
   1296c:	add	r2, r2, ip
   12970:	str	r2, [r0, #16]
   12974:	str	r1, [r3, #4]
   12978:	bx	lr
   1297c:	push	{r0, r1, r4, r5, r6, lr}
   12980:	mov	r6, r2
   12984:	ldr	r2, [r0, #28]
   12988:	mov	r3, #1
   1298c:	str	r3, [sp]
   12990:	add	r2, r1, r2
   12994:	ldr	r5, [r0, #48]	; 0x30
   12998:	add	r1, r0, #60	; 0x3c
   1299c:	mov	r4, r0
   129a0:	ldr	r0, [r0, #40]	; 0x28
   129a4:	blx	r5
   129a8:	subs	r5, r0, #0
   129ac:	mvnne	r5, #0
   129b0:	bne	129c0 <_start@@Base+0x4a0>
   129b4:	mov	r1, r6
   129b8:	mov	r0, r4
   129bc:	bl	1294c <_start@@Base+0x42c>
   129c0:	mov	r0, r5
   129c4:	add	sp, sp, #8
   129c8:	pop	{r4, r5, r6, pc}
   129cc:	push	{r4, r5, r6, lr}
   129d0:	mov	r4, r0
   129d4:	ldr	r5, [r0, #20]
   129d8:	ldr	r3, [r0, #24]
   129dc:	add	r1, r5, r1
   129e0:	cmp	r1, r3
   129e4:	str	r1, [r0, #20]
   129e8:	bcs	129f8 <_start@@Base+0x4d8>
   129ec:	ldr	r0, [r4, #16]
   129f0:	add	r0, r0, r5
   129f4:	pop	{r4, r5, r6, pc}
   129f8:	mvn	r2, #3
   129fc:	add	r1, r1, #1
   12a00:	bl	1297c <_start@@Base+0x45c>
   12a04:	cmp	r0, #0
   12a08:	beq	129ec <_start@@Base+0x4cc>
   12a0c:	mov	r0, #0
   12a10:	pop	{r4, r5, r6, pc}
   12a14:	push	{r4, lr}
   12a18:	mov	r4, r0
   12a1c:	ldr	r2, [r0, #20]
   12a20:	mov	r1, #0
   12a24:	ldr	r0, [r0, #16]
   12a28:	bl	1206c <memset@plt>
   12a2c:	ldr	r3, [r4, #32]
   12a30:	mov	r0, r4
   12a34:	ldr	r2, [r3, #8]
   12a38:	ldr	r1, [r3, #4]
   12a3c:	str	r2, [r4, #20]
   12a40:	ldr	r2, [r3]
   12a44:	str	r2, [r4, #28]
   12a48:	bl	1294c <_start@@Base+0x42c>
   12a4c:	ldrh	r3, [r4, #130]	; 0x82
   12a50:	ldrh	r2, [r4, #128]	; 0x80
   12a54:	cmp	r2, r3
   12a58:	strhcc	r3, [r4, #128]	; 0x80
   12a5c:	ldr	r3, [r4, #32]
   12a60:	sub	r3, r3, #36	; 0x24
   12a64:	ldrh	r2, [r3, #48]	; 0x30
   12a68:	str	r3, [r4, #32]
   12a6c:	ldr	r3, [r4, #156]	; 0x9c
   12a70:	strh	r2, [r4, #130]	; 0x82
   12a74:	sub	r3, r3, #1
   12a78:	str	r3, [r4, #156]	; 0x9c
   12a7c:	pop	{r4, pc}
   12a80:	ldr	r3, [r0, #20]
   12a84:	mov	r2, r1
   12a88:	sub	r3, r3, r1
   12a8c:	str	r3, [r0, #20]
   12a90:	ldr	r0, [r0, #16]
   12a94:	mov	r1, #0
   12a98:	add	r0, r0, r3
   12a9c:	b	1206c <memset@plt>
   12aa0:	push	{r4, r5, r6, lr}
   12aa4:	mov	r6, r1
   12aa8:	mov	r1, r2
   12aac:	mov	r4, r2
   12ab0:	bl	129cc <_start@@Base+0x4ac>
   12ab4:	subs	r5, r0, #0
   12ab8:	beq	12ac8 <_start@@Base+0x5a8>
   12abc:	mov	r2, r4
   12ac0:	mov	r1, r6
   12ac4:	bl	11fe8 <memcpy@plt>
   12ac8:	mov	r0, r5
   12acc:	pop	{r4, r5, r6, pc}
   12ad0:	push	{r0, r1, r4, lr}
   12ad4:	add	r3, sp, #8
   12ad8:	cmp	r0, #4
   12adc:	mov	r4, #0
   12ae0:	mov	r2, r1
   12ae4:	str	r4, [r3, #-4]!
   12ae8:	movcs	r1, r0
   12aec:	movcc	r1, #4
   12af0:	mov	r0, r3
   12af4:	bl	12060 <posix_memalign@plt>
   12af8:	cmp	r0, r4
   12afc:	beq	12b14 <_start@@Base+0x5f4>
   12b00:	ldr	r0, [sp, #4]
   12b04:	cmp	r0, r4
   12b08:	beq	12b14 <_start@@Base+0x5f4>
   12b0c:	bl	11fdc <free@plt>
   12b10:	str	r4, [sp, #4]
   12b14:	ldr	r0, [sp, #4]
   12b18:	add	sp, sp, #8
   12b1c:	pop	{r4, pc}

00012b20 <flatcc_builder_default_alloc@@Base>:
   12b20:	push	{r4, r5, r6, r7, r8, lr}
   12b24:	subs	r6, r2, #0
   12b28:	mov	r5, r1
   12b2c:	bne	12b50 <flatcc_builder_default_alloc@@Base+0x30>
   12b30:	ldr	r0, [r1]
   12b34:	cmp	r0, #0
   12b38:	popeq	{r4, r5, r6, r7, r8, pc}
   12b3c:	bl	11fdc <free@plt>
   12b40:	str	r6, [r5]
   12b44:	str	r6, [r5, #4]
   12b48:	mov	r0, #0
   12b4c:	pop	{r4, r5, r6, r7, r8, pc}
   12b50:	ldr	r2, [sp, #24]
   12b54:	mov	r7, r3
   12b58:	sub	r2, r2, #1
   12b5c:	cmp	r2, #6
   12b60:	ldrls	pc, [pc, r2, lsl #2]
   12b64:	b	12bf8 <flatcc_builder_default_alloc@@Base+0xd8>
   12b68:	andeq	r2, r1, r0, lsl #24
   12b6c:	strdeq	r2, [r1], -r8
   12b70:	strdeq	r2, [r1], -r8
   12b74:	andeq	r2, r1, r8, ror #23
   12b78:	andeq	r2, r1, r4, lsl #23
   12b7c:	strdeq	r2, [r1], -r8
   12b80:	strdeq	r2, [r1], -r0
   12b84:	mov	r4, r6
   12b88:	cmp	r6, r4
   12b8c:	bhi	12c08 <flatcc_builder_default_alloc@@Base+0xe8>
   12b90:	ldr	r2, [r5, #4]
   12b94:	cmp	r6, r2
   12b98:	bhi	12ba4 <flatcc_builder_default_alloc@@Base+0x84>
   12b9c:	cmp	r4, r2, lsr #1
   12ba0:	bls	12b48 <flatcc_builder_default_alloc@@Base+0x28>
   12ba4:	mov	r1, r4
   12ba8:	ldr	r0, [r5]
   12bac:	bl	12000 <realloc@plt>
   12bb0:	subs	r6, r0, #0
   12bb4:	beq	12c10 <flatcc_builder_default_alloc@@Base+0xf0>
   12bb8:	cmp	r7, #0
   12bbc:	beq	12bdc <flatcc_builder_default_alloc@@Base+0xbc>
   12bc0:	ldr	r0, [r5, #4]
   12bc4:	cmp	r4, r0
   12bc8:	bls	12bdc <flatcc_builder_default_alloc@@Base+0xbc>
   12bcc:	sub	r2, r4, r0
   12bd0:	mov	r1, #0
   12bd4:	add	r0, r6, r0
   12bd8:	bl	1206c <memset@plt>
   12bdc:	str	r6, [r5]
   12be0:	str	r4, [r5, #4]
   12be4:	b	12b48 <flatcc_builder_default_alloc@@Base+0x28>
   12be8:	mov	r4, #288	; 0x120
   12bec:	b	12b88 <flatcc_builder_default_alloc@@Base+0x68>
   12bf0:	mov	r4, #64	; 0x40
   12bf4:	b	12b88 <flatcc_builder_default_alloc@@Base+0x68>
   12bf8:	mov	r4, #32
   12bfc:	b	12b88 <flatcc_builder_default_alloc@@Base+0x68>
   12c00:	mov	r4, #256	; 0x100
   12c04:	b	12b88 <flatcc_builder_default_alloc@@Base+0x68>
   12c08:	lsl	r4, r4, #1
   12c0c:	b	12b88 <flatcc_builder_default_alloc@@Base+0x68>
   12c10:	mvn	r0, #0
   12c14:	pop	{r4, r5, r6, r7, r8, pc}
   12c18:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12c1c:	add	r6, r0, #52	; 0x34
   12c20:	mov	r4, r1
   12c24:	add	r1, r6, r1, lsl #3
   12c28:	mov	r5, r2
   12c2c:	add	r2, r2, r3
   12c30:	ldr	r3, [r1, #4]
   12c34:	cmp	r2, r3
   12c38:	bls	12c6c <flatcc_builder_default_alloc@@Base+0x14c>
   12c3c:	str	r4, [sp]
   12c40:	ldr	r3, [sp, #32]
   12c44:	ldr	r7, [r0, #48]	; 0x30
   12c48:	ldr	r0, [r0, #40]	; 0x28
   12c4c:	blx	r7
   12c50:	cmp	r0, #0
   12c54:	beq	12c6c <flatcc_builder_default_alloc@@Base+0x14c>
   12c58:	ldr	r3, [pc, #28]	; 12c7c <flatcc_builder_default_alloc@@Base+0x15c>
   12c5c:	mov	r2, #308	; 0x134
   12c60:	ldr	r1, [pc, #24]	; 12c80 <flatcc_builder_default_alloc@@Base+0x160>
   12c64:	ldr	r0, [pc, #24]	; 12c84 <flatcc_builder_default_alloc@@Base+0x164>
   12c68:	bl	1209c <__assert_fail@plt>
   12c6c:	ldr	r0, [r6, r4, lsl #3]
   12c70:	add	r0, r0, r5
   12c74:	add	sp, sp, #12
   12c78:	pop	{r4, r5, r6, r7, pc}
   12c7c:	andeq	r6, r1, r1, asr #8
   12c80:	andeq	r6, r1, r0, asr #22
   12c84:	andeq	r6, r1, sp, lsr #23
   12c88:	ldr	r2, [r0, #156]	; 0x9c
   12c8c:	ldr	r3, [r0, #160]	; 0xa0
   12c90:	push	{r0, r1, r4, r5, r6, lr}
   12c94:	mov	r5, r1
   12c98:	add	r1, r2, #1
   12c9c:	cmp	r1, r3
   12ca0:	mov	r4, r0
   12ca4:	str	r1, [r0, #156]	; 0x9c
   12ca8:	ble	12d58 <flatcc_builder_default_alloc@@Base+0x238>
   12cac:	ldr	r3, [r0, #176]	; 0xb0
   12cb0:	cmp	r3, #0
   12cb4:	cmpgt	r1, r3
   12cb8:	movgt	r3, #1
   12cbc:	movle	r3, #0
   12cc0:	ble	12cd0 <flatcc_builder_default_alloc@@Base+0x1b0>
   12cc4:	mvn	r0, #0
   12cc8:	add	sp, sp, #8
   12ccc:	pop	{r4, r5, r6, pc}
   12cd0:	mov	r6, #36	; 0x24
   12cd4:	str	r3, [sp]
   12cd8:	mul	r2, r6, r2
   12cdc:	mov	r3, r6
   12ce0:	mov	r1, #4
   12ce4:	bl	12c18 <flatcc_builder_default_alloc@@Base+0xf8>
   12ce8:	cmp	r0, #0
   12cec:	str	r0, [r4, #32]
   12cf0:	beq	12cc4 <flatcc_builder_default_alloc@@Base+0x1a4>
   12cf4:	mov	r1, r6
   12cf8:	ldr	r0, [r4, #88]	; 0x58
   12cfc:	bl	15d58 <flatcc_emitter_copy_buffer@@Base+0xac>
   12d00:	ldr	r3, [r4, #176]	; 0xb0
   12d04:	cmp	r3, #0
   12d08:	cmpgt	r0, r3
   12d0c:	str	r0, [r4, #160]	; 0xa0
   12d10:	strgt	r3, [r4, #160]	; 0xa0
   12d14:	ldrh	r1, [r4, #130]	; 0x82
   12d18:	ldr	r2, [r4, #32]
   12d1c:	ldr	r3, [r4, #20]
   12d20:	mvn	r0, #3
   12d24:	strh	r1, [r2, #12]
   12d28:	ldr	r1, [r4, #28]
   12d2c:	str	r3, [r2, #8]
   12d30:	add	r3, r3, r1
   12d34:	add	r3, r3, #7
   12d38:	strh	r5, [r4, #130]	; 0x82
   12d3c:	bic	r3, r3, #7
   12d40:	str	r0, [r2, #4]
   12d44:	mov	r0, #0
   12d48:	str	r1, [r2]
   12d4c:	str	r3, [r4, #28]
   12d50:	str	r0, [r4, #20]
   12d54:	b	12cc8 <flatcc_builder_default_alloc@@Base+0x1a8>
   12d58:	ldr	r3, [r0, #32]
   12d5c:	add	r3, r3, #36	; 0x24
   12d60:	str	r3, [r0, #32]
   12d64:	b	12d14 <flatcc_builder_default_alloc@@Base+0x1f4>
   12d68:	ldr	r3, [r0, #32]
   12d6c:	push	{r0, r1, r2, r4, r5, lr}
   12d70:	add	r1, r1, #2
   12d74:	ldr	r2, [r3, #16]
   12d78:	lsl	r5, r1, #1
   12d7c:	ldrh	r1, [r3, #28]
   12d80:	mov	r3, #1
   12d84:	str	r3, [sp]
   12d88:	mov	r3, r5
   12d8c:	add	r2, r2, r1, lsl #1
   12d90:	mov	r1, #0
   12d94:	mov	r4, r0
   12d98:	bl	12c18 <flatcc_builder_default_alloc@@Base+0xf8>
   12d9c:	cmp	r0, #0
   12da0:	streq	r0, [r4, #4]
   12da4:	mvneq	r0, #0
   12da8:	beq	12de4 <flatcc_builder_default_alloc@@Base+0x2c4>
   12dac:	ldr	r2, [r4, #32]
   12db0:	add	r0, r0, #4
   12db4:	mov	r3, #0
   12db8:	str	r0, [r4, #4]
   12dbc:	str	r3, [sp]
   12dc0:	mov	r1, #3
   12dc4:	sub	r3, r5, #3
   12dc8:	ldr	r2, [r2, #20]
   12dcc:	mov	r0, r4
   12dd0:	bl	12c18 <flatcc_builder_default_alloc@@Base+0xf8>
   12dd4:	cmp	r0, #0
   12dd8:	str	r0, [r4]
   12ddc:	movne	r0, #0
   12de0:	mvneq	r0, #0
   12de4:	add	sp, sp, #12
   12de8:	pop	{r4, r5, pc}
   12dec:	push	{r0, r1, r2, r4, r5, lr}
   12df0:	ldr	r3, [r1]
   12df4:	ldr	r4, [r0, #140]	; 0x8c
   12df8:	add	r2, r3, r4
   12dfc:	cmp	r4, r2
   12e00:	str	r2, [r0, #140]	; 0x8c
   12e04:	ble	12e1c <flatcc_builder_default_alloc@@Base+0x2fc>
   12e08:	ldr	r3, [pc, #68]	; 12e54 <flatcc_builder_default_alloc@@Base+0x334>
   12e0c:	ldr	r2, [pc, #68]	; 12e58 <flatcc_builder_default_alloc@@Base+0x338>
   12e10:	ldr	r1, [pc, #68]	; 12e5c <flatcc_builder_default_alloc@@Base+0x33c>
   12e14:	ldr	r0, [pc, #68]	; 12e60 <flatcc_builder_default_alloc@@Base+0x340>
   12e18:	bl	1209c <__assert_fail@plt>
   12e1c:	str	r3, [sp]
   12e20:	add	r1, r1, #8
   12e24:	ldr	r5, [r0, #44]	; 0x2c
   12e28:	ldr	r2, [r1, #-4]
   12e2c:	mov	r3, r4
   12e30:	ldr	r0, [r0, #36]	; 0x24
   12e34:	blx	r5
   12e38:	cmp	r0, #0
   12e3c:	ldrne	r3, [pc, #16]	; 12e54 <flatcc_builder_default_alloc@@Base+0x334>
   12e40:	ldrne	r2, [pc, #28]	; 12e64 <flatcc_builder_default_alloc@@Base+0x344>
   12e44:	bne	12e10 <flatcc_builder_default_alloc@@Base+0x2f0>
   12e48:	add	r0, r4, #1
   12e4c:	add	sp, sp, #12
   12e50:	pop	{r4, r5, pc}
   12e54:	andeq	r6, r1, r0, asr r4
   12e58:	andeq	r0, r0, r1, lsr #5
   12e5c:	andeq	r6, r1, r0, asr #22
   12e60:	andeq	r6, r1, sp, lsr #23
   12e64:	andeq	r0, r0, r5, lsr #5
   12e68:	cmp	r2, #0
   12e6c:	bne	12e7c <flatcc_builder_default_alloc@@Base+0x35c>
   12e70:	ldrh	r2, [r0, #132]	; 0x84
   12e74:	cmp	r2, #0
   12e78:	moveq	r2, #1
   12e7c:	ldrh	ip, [r1]
   12e80:	cmp	ip, #3
   12e84:	movls	ip, #4
   12e88:	strhls	ip, [r1]
   12e8c:	ldrh	ip, [r1]
   12e90:	cmp	ip, r2
   12e94:	strhcc	r2, [r1]
   12e98:	cmp	r3, #0
   12e9c:	bne	12f00 <flatcc_builder_default_alloc@@Base+0x3e0>
   12ea0:	ldr	r3, [r0, #140]	; 0x8c
   12ea4:	sub	r2, r2, #1
   12ea8:	ands	r2, r2, r3
   12eac:	beq	12f00 <flatcc_builder_default_alloc@@Base+0x3e0>
   12eb0:	push	{r4, lr}
   12eb4:	sub	sp, sp, #72	; 0x48
   12eb8:	ldr	r4, [pc, #72]	; 12f08 <flatcc_builder_default_alloc@@Base+0x3e8>
   12ebc:	mov	r3, #1
   12ec0:	mov	r1, sp
   12ec4:	str	r2, [sp]
   12ec8:	str	r4, [sp, #8]
   12ecc:	str	r2, [sp, #12]
   12ed0:	str	r3, [sp, #4]
   12ed4:	bl	12dec <flatcc_builder_default_alloc@@Base+0x2cc>
   12ed8:	cmp	r0, #0
   12edc:	bne	12ef4 <flatcc_builder_default_alloc@@Base+0x3d4>
   12ee0:	add	r3, r4, #512	; 0x200
   12ee4:	ldr	r2, [pc, #32]	; 12f0c <flatcc_builder_default_alloc@@Base+0x3ec>
   12ee8:	ldr	r1, [pc, #32]	; 12f10 <flatcc_builder_default_alloc@@Base+0x3f0>
   12eec:	ldr	r0, [pc, #32]	; 12f14 <flatcc_builder_default_alloc@@Base+0x3f4>
   12ef0:	bl	1209c <__assert_fail@plt>
   12ef4:	mov	r0, #0
   12ef8:	add	sp, sp, #72	; 0x48
   12efc:	pop	{r4, pc}
   12f00:	mov	r0, #0
   12f04:	bx	lr
   12f08:	andeq	r6, r1, sl, asr r4
   12f0c:			; <UNDEFINED> instruction: 0x000002be
   12f10:	andeq	r6, r1, r0, asr #22
   12f14:	andeq	r6, r1, sp, lsr #23
   12f18:	ldr	r2, [r0, #136]	; 0x88
   12f1c:	ldr	r3, [r1]
   12f20:	push	{r0, r1, r4, r5, r6, lr}
   12f24:	sub	r4, r2, r3
   12f28:	cmp	r2, r4
   12f2c:	bgt	12f44 <flatcc_builder_default_alloc@@Base+0x424>
   12f30:	ldr	r3, [pc, #76]	; 12f84 <flatcc_builder_default_alloc@@Base+0x464>
   12f34:	ldr	r2, [pc, #76]	; 12f88 <flatcc_builder_default_alloc@@Base+0x468>
   12f38:	ldr	r1, [pc, #76]	; 12f8c <flatcc_builder_default_alloc@@Base+0x46c>
   12f3c:	ldr	r0, [pc, #76]	; 12f90 <flatcc_builder_default_alloc@@Base+0x470>
   12f40:	bl	1209c <__assert_fail@plt>
   12f44:	str	r3, [sp]
   12f48:	mov	r5, r0
   12f4c:	ldr	r6, [r0, #44]	; 0x2c
   12f50:	ldr	r2, [r1, #4]
   12f54:	mov	r3, r4
   12f58:	add	r1, r1, #8
   12f5c:	ldr	r0, [r0, #36]	; 0x24
   12f60:	blx	r6
   12f64:	cmp	r0, #0
   12f68:	ldrne	r3, [pc, #20]	; 12f84 <flatcc_builder_default_alloc@@Base+0x464>
   12f6c:	ldrne	r2, [pc, #32]	; 12f94 <flatcc_builder_default_alloc@@Base+0x474>
   12f70:	bne	12f38 <flatcc_builder_default_alloc@@Base+0x418>
   12f74:	mov	r0, r4
   12f78:	str	r4, [r5, #136]	; 0x88
   12f7c:	add	sp, sp, #8
   12f80:	pop	{r4, r5, r6, pc}
   12f84:	andeq	r6, r1, r9, ror #12
   12f88:	andeq	r0, r0, r7, lsl #5
   12f8c:	andeq	r6, r1, r0, asr #22
   12f90:	andeq	r6, r1, sp, lsr #23
   12f94:	andeq	r0, r0, fp, lsl #5
   12f98:	ldr	r3, [r0, #20]
   12f9c:	adds	r1, r3, r1
   12fa0:	movcs	r3, #1
   12fa4:	movcc	r3, #0
   12fa8:	cmp	r1, r2
   12fac:	movls	r2, r3
   12fb0:	orrhi	r2, r3, #1
   12fb4:	cmp	r2, #0
   12fb8:	beq	12fd4 <flatcc_builder_default_alloc@@Base+0x4b4>
   12fbc:	push	{r4, lr}
   12fc0:	mov	r2, #892	; 0x37c
   12fc4:	ldr	r3, [pc, #20]	; 12fe0 <flatcc_builder_default_alloc@@Base+0x4c0>
   12fc8:	ldr	r1, [pc, #20]	; 12fe4 <flatcc_builder_default_alloc@@Base+0x4c4>
   12fcc:	ldr	r0, [pc, #20]	; 12fe8 <flatcc_builder_default_alloc@@Base+0x4c8>
   12fd0:	bl	1209c <__assert_fail@plt>
   12fd4:	str	r1, [r0, #20]
   12fd8:	mov	r0, r2
   12fdc:	bx	lr
   12fe0:	andeq	r6, r1, r4, ror r6
   12fe4:	andeq	r6, r1, r0, asr #22
   12fe8:	andeq	r6, r1, r6, lsl #23
   12fec:	ldrh	ip, [r0, #128]	; 0x80
   12ff0:	push	{r4, r5, r6, r7, lr}
   12ff4:	sub	sp, sp, #84	; 0x54
   12ff8:	cmp	ip, #3
   12ffc:	movls	ip, #4
   13000:	strhls	ip, [r0, #128]	; 0x80
   13004:	mov	ip, #4
   13008:	add	r5, sp, ip
   1300c:	str	ip, [sp, #8]
   13010:	ldr	r4, [r0, #136]	; 0x88
   13014:	str	ip, [sp, #20]
   13018:	mov	ip, #1
   1301c:	str	ip, [sp, #12]
   13020:	lsls	ip, r2, #2
   13024:	strne	ip, [sp, #28]
   13028:	and	lr, r4, #3
   1302c:	str	r5, [sp, #16]
   13030:	addne	r5, ip, #4
   13034:	movne	ip, #2
   13038:	strne	r5, [sp, #8]
   1303c:	strne	r1, [sp, #24]
   13040:	strne	ip, [sp, #12]
   13044:	cmp	lr, #0
   13048:	str	r2, [sp, #4]
   1304c:	beq	1307c <flatcc_builder_default_alloc@@Base+0x55c>
   13050:	ldr	ip, [sp, #8]
   13054:	add	r5, sp, #80	; 0x50
   13058:	add	ip, ip, lr
   1305c:	str	ip, [sp, #8]
   13060:	ldr	ip, [sp, #12]
   13064:	ldr	r6, [pc, #204]	; 13138 <flatcc_builder_default_alloc@@Base+0x618>
   13068:	add	ip, ip, #1
   1306c:	str	ip, [sp, #12]
   13070:	add	r5, r5, ip, lsl #3
   13074:	str	r6, [r5, #-72]	; 0xffffffb8
   13078:	str	lr, [r5, #-68]	; 0xffffffbc
   1307c:	ldr	r5, [sp, #8]
   13080:	sub	r6, r1, #4
   13084:	sub	r5, r4, r5
   13088:	mov	lr, r3
   1308c:	add	r2, r3, r2
   13090:	mvn	r7, #3
   13094:	cmp	r2, lr
   13098:	bne	130ac <flatcc_builder_default_alloc@@Base+0x58c>
   1309c:	add	r1, sp, #8
   130a0:	bl	12f18 <flatcc_builder_default_alloc@@Base+0x3f8>
   130a4:	add	sp, sp, #84	; 0x54
   130a8:	pop	{r4, r5, r6, r7, pc}
   130ac:	ldr	r4, [r6, #4]!
   130b0:	cmp	r4, #0
   130b4:	beq	130f4 <flatcc_builder_default_alloc@@Base+0x5d4>
   130b8:	sub	ip, r7, r6
   130bc:	add	ip, r1, ip
   130c0:	add	ip, ip, r4
   130c4:	sub	ip, ip, r5
   130c8:	cmp	r3, #0
   130cc:	str	ip, [r6]
   130d0:	beq	13130 <flatcc_builder_default_alloc@@Base+0x610>
   130d4:	ldrb	ip, [lr]
   130d8:	cmp	ip, #0
   130dc:	bne	13130 <flatcc_builder_default_alloc@@Base+0x610>
   130e0:	ldr	r3, [pc, #84]	; 1313c <flatcc_builder_default_alloc@@Base+0x61c>
   130e4:	ldr	r2, [pc, #84]	; 13140 <flatcc_builder_default_alloc@@Base+0x620>
   130e8:	ldr	r1, [pc, #84]	; 13144 <flatcc_builder_default_alloc@@Base+0x624>
   130ec:	ldr	r0, [pc, #84]	; 13148 <flatcc_builder_default_alloc@@Base+0x628>
   130f0:	bl	1209c <__assert_fail@plt>
   130f4:	cmp	r3, #0
   130f8:	beq	1311c <flatcc_builder_default_alloc@@Base+0x5fc>
   130fc:	ldrb	ip, [lr]
   13100:	cmp	ip, #0
   13104:	beq	13130 <flatcc_builder_default_alloc@@Base+0x610>
   13108:	ldr	r3, [pc, #44]	; 1313c <flatcc_builder_default_alloc@@Base+0x61c>
   1310c:	ldr	r2, [pc, #56]	; 1314c <flatcc_builder_default_alloc@@Base+0x62c>
   13110:	ldr	r1, [pc, #44]	; 13144 <flatcc_builder_default_alloc@@Base+0x624>
   13114:	ldr	r0, [pc, #52]	; 13150 <flatcc_builder_default_alloc@@Base+0x630>
   13118:	b	130f0 <flatcc_builder_default_alloc@@Base+0x5d0>
   1311c:	ldr	r3, [pc, #24]	; 1313c <flatcc_builder_default_alloc@@Base+0x61c>
   13120:	ldr	r2, [pc, #44]	; 13154 <flatcc_builder_default_alloc@@Base+0x634>
   13124:	ldr	r1, [pc, #24]	; 13144 <flatcc_builder_default_alloc@@Base+0x624>
   13128:	ldr	r0, [pc, #40]	; 13158 <flatcc_builder_default_alloc@@Base+0x638>
   1312c:	b	130f0 <flatcc_builder_default_alloc@@Base+0x5d0>
   13130:	add	lr, lr, #1
   13134:	b	13094 <flatcc_builder_default_alloc@@Base+0x574>
   13138:	andeq	r6, r1, sl, asr r4
   1313c:	andeq	r6, r1, r5, lsl #13
   13140:			; <UNDEFINED> instruction: 0x000005b1
   13144:	andeq	r6, r1, r0, asr #22
   13148:	andeq	r6, r1, r1, lsr #23
   1314c:			; <UNDEFINED> instruction: 0x000005b5
   13150:	andeq	r6, r1, pc, lsr #23
   13154:			; <UNDEFINED> instruction: 0x000005b7
   13158:	andeq	r6, r1, sp, lsr #23

0001315c <flatcc_builder_flush_vtable_cache@@Base>:
   1315c:	ldr	r3, [r0, #116]	; 0x74
   13160:	cmp	r3, #0
   13164:	bxeq	lr
   13168:	push	{r4, lr}
   1316c:	mov	r1, #0
   13170:	mov	r4, r0
   13174:	ldr	r2, [r0, #96]	; 0x60
   13178:	ldr	r0, [r0, #92]	; 0x5c
   1317c:	bl	1206c <memset@plt>
   13180:	mov	r3, #16
   13184:	str	r3, [r4, #124]	; 0x7c
   13188:	mov	r3, #0
   1318c:	str	r3, [r4, #120]	; 0x78
   13190:	pop	{r4, pc}

00013194 <flatcc_builder_custom_init@@Base>:
   13194:	push	{r4, r5, r6, r7, r8, lr}
   13198:	mov	r6, r1
   1319c:	mov	r7, r2
   131a0:	mov	r1, #0
   131a4:	mov	r2, #232	; 0xe8
   131a8:	mov	r4, r0
   131ac:	mov	r5, r3
   131b0:	bl	1206c <memset@plt>
   131b4:	cmp	r6, #0
   131b8:	moveq	r3, #1
   131bc:	addeq	r7, r4, #188	; 0xbc
   131c0:	ldreq	r6, [pc, #40]	; 131f0 <flatcc_builder_custom_init@@Base+0x5c>
   131c4:	str	r7, [r4, #36]	; 0x24
   131c8:	str	r6, [r4, #44]	; 0x2c
   131cc:	mov	r0, #0
   131d0:	streq	r3, [r4, #184]	; 0xb8
   131d4:	ldr	r3, [pc, #24]	; 131f4 <flatcc_builder_custom_init@@Base+0x60>
   131d8:	cmp	r5, #0
   131dc:	moveq	r5, r3
   131e0:	ldr	r3, [sp, #24]
   131e4:	str	r5, [r4, #48]	; 0x30
   131e8:	str	r3, [r4, #40]	; 0x28
   131ec:	pop	{r4, r5, r6, r7, r8, pc}
   131f0:	andeq	r5, r1, r4, ror r9
   131f4:	andeq	r2, r1, r0, lsr #22

000131f8 <flatcc_builder_init@@Base>:
   131f8:	push	{r4, lr}
   131fc:	mov	r2, #232	; 0xe8
   13200:	mov	r4, r0
   13204:	mov	r1, #0
   13208:	bl	1206c <memset@plt>
   1320c:	mov	r3, #1
   13210:	str	r3, [r4, #184]	; 0xb8
   13214:	ldr	r3, [pc, #24]	; 13234 <flatcc_builder_init@@Base+0x3c>
   13218:	mov	r0, #0
   1321c:	str	r3, [r4, #48]	; 0x30
   13220:	add	r3, r4, #188	; 0xbc
   13224:	str	r3, [r4, #36]	; 0x24
   13228:	ldr	r3, [pc, #8]	; 13238 <flatcc_builder_init@@Base+0x40>
   1322c:	str	r3, [r4, #44]	; 0x2c
   13230:	pop	{r4, pc}
   13234:	andeq	r2, r1, r0, lsr #22
   13238:	andeq	r5, r1, r4, ror r9

0001323c <flatcc_builder_custom_reset@@Base>:
   1323c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13240:	mov	r6, #0
   13244:	mov	r4, r0
   13248:	mov	r7, r1
   1324c:	mov	r8, r2
   13250:	mov	r5, r0
   13254:	mov	r9, #1
   13258:	mov	sl, r6
   1325c:	ldr	r3, [r5, #52]	; 0x34
   13260:	add	r1, r5, #52	; 0x34
   13264:	cmp	r3, #0
   13268:	beq	13348 <flatcc_builder_custom_reset@@Base+0x10c>
   1326c:	cmp	r6, #5
   13270:	cmpne	r8, #0
   13274:	bne	13320 <flatcc_builder_custom_reset@@Base+0xe4>
   13278:	ldr	r2, [r5, #56]	; 0x38
   1327c:	mov	r1, sl
   13280:	ldr	r0, [r5, #52]	; 0x34
   13284:	bl	1206c <memset@plt>
   13288:	add	r6, r6, #1
   1328c:	cmp	r6, #8
   13290:	add	r5, r5, #8
   13294:	bne	1325c <flatcc_builder_custom_reset@@Base+0x20>
   13298:	ldr	r2, [r4, #124]	; 0x7c
   1329c:	mov	r3, #0
   132a0:	cmp	r2, r3
   132a4:	movne	r2, #16
   132a8:	strne	r2, [r4, #124]	; 0x7c
   132ac:	ldr	r2, [r4, #60]	; 0x3c
   132b0:	ldr	r0, [r4, #184]	; 0xb8
   132b4:	str	r2, [r4, #16]
   132b8:	ldr	r2, [r4, #76]	; 0x4c
   132bc:	cmp	r7, #0
   132c0:	str	r2, [r4]
   132c4:	ldr	r2, [r4, #52]	; 0x34
   132c8:	strne	r3, [r4, #172]	; 0xac
   132cc:	strne	r3, [r4, #176]	; 0xb0
   132d0:	strne	r3, [r4, #180]	; 0xb4
   132d4:	cmp	r0, #0
   132d8:	str	r3, [r4, #120]	; 0x78
   132dc:	strh	r3, [r4, #128]	; 0x80
   132e0:	str	r3, [r4, #136]	; 0x88
   132e4:	str	r3, [r4, #140]	; 0x8c
   132e8:	str	r3, [r4, #156]	; 0x9c
   132ec:	str	r3, [r4, #160]	; 0xa0
   132f0:	str	r3, [r4, #20]
   132f4:	str	r3, [r4, #24]
   132f8:	str	r3, [r4, #148]	; 0x94
   132fc:	str	r3, [r4, #152]	; 0x98
   13300:	str	r2, [r4, #4]
   13304:	str	r3, [r4, #32]
   13308:	beq	13318 <flatcc_builder_custom_reset@@Base+0xdc>
   1330c:	add	r0, r4, #188	; 0xbc
   13310:	bl	1586c <flatcc_emitter_reset@@Base>
   13314:	mov	r0, #0
   13318:	add	sp, sp, #12
   1331c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13320:	str	r6, [sp]
   13324:	ldr	fp, [r4, #48]	; 0x30
   13328:	mov	r3, r9
   1332c:	mov	r2, #1
   13330:	ldr	r0, [r4, #40]	; 0x28
   13334:	blx	fp
   13338:	cmp	r0, #0
   1333c:	beq	13278 <flatcc_builder_custom_reset@@Base+0x3c>
   13340:	mvn	r0, #0
   13344:	b	13318 <flatcc_builder_custom_reset@@Base+0xdc>
   13348:	ldr	r3, [r5, #56]	; 0x38
   1334c:	cmp	r3, #0
   13350:	beq	13288 <flatcc_builder_custom_reset@@Base+0x4c>
   13354:	ldr	r3, [pc, #12]	; 13368 <flatcc_builder_custom_reset@@Base+0x12c>
   13358:	ldr	r2, [pc, #12]	; 1336c <flatcc_builder_custom_reset@@Base+0x130>
   1335c:	ldr	r1, [pc, #12]	; 13370 <flatcc_builder_custom_reset@@Base+0x134>
   13360:	ldr	r0, [pc, #12]	; 13374 <flatcc_builder_custom_reset@@Base+0x138>
   13364:	bl	1209c <__assert_fail@plt>
   13368:	andeq	r6, r1, r2, lsr #13
   1336c:			; <UNDEFINED> instruction: 0x000001b2
   13370:	andeq	r6, r1, r0, asr #22
   13374:			; <UNDEFINED> instruction: 0x00016bbd

00013378 <flatcc_builder_reset@@Base>:
   13378:	mov	r2, #0
   1337c:	mov	r1, r2
   13380:	b	1323c <flatcc_builder_custom_reset@@Base>

00013384 <flatcc_builder_clear@@Base>:
   13384:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13388:	mov	r5, #0
   1338c:	mov	r4, r0
   13390:	add	r6, r0, #52	; 0x34
   13394:	mov	r8, r5
   13398:	str	r5, [sp]
   1339c:	mov	r1, r6
   133a0:	ldr	r7, [r4, #48]	; 0x30
   133a4:	mov	r3, r8
   133a8:	mov	r2, #0
   133ac:	ldr	r0, [r4, #40]	; 0x28
   133b0:	add	r5, r5, #1
   133b4:	blx	r7
   133b8:	cmp	r5, #8
   133bc:	add	r6, r6, #8
   133c0:	bne	13398 <flatcc_builder_clear@@Base+0x14>
   133c4:	ldr	r3, [r4, #184]	; 0xb8
   133c8:	cmp	r3, #0
   133cc:	beq	133d8 <flatcc_builder_clear@@Base+0x54>
   133d0:	add	r0, r4, #188	; 0xbc
   133d4:	bl	1591c <flatcc_emitter_clear@@Base>
   133d8:	mov	r2, #232	; 0xe8
   133dc:	mov	r1, #0
   133e0:	mov	r0, r4
   133e4:	add	sp, sp, #8
   133e8:	pop	{r4, r5, r6, r7, r8, lr}
   133ec:	b	1206c <memset@plt>

000133f0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   133f0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   133f4:	add	r4, r1, #3
   133f8:	bic	r4, r4, #3
   133fc:	add	r4, r4, #4
   13400:	mov	r7, #0
   13404:	str	r7, [sp]
   13408:	mov	r3, r4
   1340c:	ldr	r2, [r0, #228]	; 0xe4
   13410:	mov	r1, #7
   13414:	mov	r6, r0
   13418:	bl	12c18 <flatcc_builder_default_alloc@@Base+0xf8>
   1341c:	subs	r5, r0, #0
   13420:	moveq	r0, r5
   13424:	beq	13454 <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   13428:	mov	r2, r4
   1342c:	mov	r1, r7
   13430:	bl	1206c <memset@plt>
   13434:	ldr	r3, [r6, #224]	; 0xe0
   13438:	add	r0, r5, #4
   1343c:	str	r3, [r5]
   13440:	ldr	r1, [r6, #228]	; 0xe4
   13444:	add	r3, r1, #4
   13448:	add	r4, r4, r1
   1344c:	str	r3, [r6, #224]	; 0xe0
   13450:	str	r4, [r6, #228]	; 0xe4
   13454:	add	sp, sp, #12
   13458:	pop	{r4, r5, r6, r7, pc}

0001345c <flatcc_builder_enter_user_frame@@Base>:
   1345c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13460:	add	r4, r1, #3
   13464:	bic	r4, r4, #3
   13468:	add	r4, r4, #4
   1346c:	mov	r7, #0
   13470:	str	r7, [sp]
   13474:	mov	r3, r4
   13478:	ldr	r2, [r0, #228]	; 0xe4
   1347c:	mov	r1, #7
   13480:	mov	r6, r0
   13484:	bl	12c18 <flatcc_builder_default_alloc@@Base+0xf8>
   13488:	subs	r5, r0, #0
   1348c:	moveq	r0, r5
   13490:	beq	134bc <flatcc_builder_enter_user_frame@@Base+0x60>
   13494:	mov	r2, r4
   13498:	mov	r1, r7
   1349c:	bl	1206c <memset@plt>
   134a0:	ldr	r3, [r6, #224]	; 0xe0
   134a4:	str	r3, [r5]
   134a8:	ldr	r1, [r6, #228]	; 0xe4
   134ac:	add	r0, r1, #4
   134b0:	add	r4, r4, r1
   134b4:	str	r0, [r6, #224]	; 0xe0
   134b8:	str	r4, [r6, #228]	; 0xe4
   134bc:	add	sp, sp, #12
   134c0:	pop	{r4, r5, r6, r7, pc}

000134c4 <flatcc_builder_exit_user_frame@@Base>:
   134c4:	ldr	r3, [r0, #224]	; 0xe0
   134c8:	cmp	r3, #0
   134cc:	bne	134e8 <flatcc_builder_exit_user_frame@@Base+0x24>
   134d0:	push	{r4, lr}
   134d4:	ldr	r3, [pc, #44]	; 13508 <flatcc_builder_exit_user_frame@@Base+0x44>
   134d8:	ldr	r2, [pc, #44]	; 1350c <flatcc_builder_exit_user_frame@@Base+0x48>
   134dc:	ldr	r1, [pc, #44]	; 13510 <flatcc_builder_exit_user_frame@@Base+0x4c>
   134e0:	ldr	r0, [pc, #44]	; 13514 <flatcc_builder_exit_user_frame@@Base+0x50>
   134e4:	bl	1209c <__assert_fail@plt>
   134e8:	ldr	r1, [r0, #108]	; 0x6c
   134ec:	mov	r2, r0
   134f0:	add	r1, r1, r3
   134f4:	sub	r3, r3, #4
   134f8:	str	r3, [r0, #228]	; 0xe4
   134fc:	ldr	r0, [r1, #-4]
   13500:	str	r0, [r2, #224]	; 0xe0
   13504:	bx	lr
   13508:			; <UNDEFINED> instruction: 0x000166be
   1350c:	andeq	r0, r0, lr, lsl r2
   13510:	andeq	r6, r1, r0, asr #22
   13514:	andeq	r6, r1, pc, asr #23

00013518 <flatcc_builder_exit_user_frame_at@@Base>:
   13518:	ldr	r2, [r0, #224]	; 0xe0
   1351c:	cmp	r2, r1
   13520:	bcs	1353c <flatcc_builder_exit_user_frame_at@@Base+0x24>
   13524:	push	{r4, lr}
   13528:	ldr	r3, [pc, #20]	; 13544 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   1352c:	ldr	r2, [pc, #20]	; 13548 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   13530:	ldr	r1, [pc, #20]	; 1354c <flatcc_builder_exit_user_frame_at@@Base+0x34>
   13534:	ldr	r0, [pc, #20]	; 13550 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   13538:	bl	1209c <__assert_fail@plt>
   1353c:	str	r1, [r0, #224]	; 0xe0
   13540:	b	134c4 <flatcc_builder_exit_user_frame@@Base>
   13544:	ldrdeq	r6, [r1], -sp
   13548:	andeq	r0, r0, r7, lsr #4
   1354c:	andeq	r6, r1, r0, asr #22
   13550:	andeq	r6, r1, r8, ror #23

00013554 <flatcc_builder_get_current_user_frame@@Base>:
   13554:	ldr	r0, [r0, #224]	; 0xe0
   13558:	bx	lr

0001355c <flatcc_builder_get_user_frame_ptr@@Base>:
   1355c:	ldr	r0, [r0, #108]	; 0x6c
   13560:	add	r0, r0, r1
   13564:	bx	lr

00013568 <flatcc_builder_embed_buffer@@Base>:
   13568:	push	{r4, r5, r6, lr}
   1356c:	mov	r4, r3
   13570:	ldr	r3, [r0, #152]	; 0x98
   13574:	sub	sp, sp, #80	; 0x50
   13578:	adds	r3, r3, #0
   1357c:	movne	r3, #1
   13580:	mov	r6, r2
   13584:	mov	r2, r1
   13588:	add	r1, sp, #96	; 0x60
   1358c:	mov	r5, r0
   13590:	bl	12e68 <flatcc_builder_default_alloc@@Base+0x348>
   13594:	cmp	r0, #0
   13598:	movne	r0, #0
   1359c:	bne	13670 <flatcc_builder_embed_buffer@@Base+0x108>
   135a0:	ldr	r3, [sp, #100]	; 0x64
   135a4:	str	r0, [sp, #8]
   135a8:	tst	r3, #2
   135ac:	ldr	r3, [r5, #136]	; 0x88
   135b0:	movne	r2, #4
   135b4:	moveq	r2, #0
   135b8:	sub	r3, r3, r4
   135bc:	sub	r3, r3, r2
   135c0:	ldrh	r2, [sp, #96]	; 0x60
   135c4:	str	r0, [sp, #12]
   135c8:	sub	r2, r2, #1
   135cc:	and	r3, r3, r2
   135d0:	add	r2, r4, r3
   135d4:	str	r2, [sp, #4]
   135d8:	ldr	r2, [r5, #152]	; 0x98
   135dc:	cmp	r2, #0
   135e0:	beq	13600 <flatcc_builder_embed_buffer@@Base+0x98>
   135e4:	mov	r2, #4
   135e8:	add	r1, sp, r2
   135ec:	str	r2, [sp, #8]
   135f0:	str	r2, [sp, #20]
   135f4:	mov	r2, #1
   135f8:	str	r1, [sp, #16]
   135fc:	str	r2, [sp, #12]
   13600:	cmp	r4, #0
   13604:	beq	13630 <flatcc_builder_embed_buffer@@Base+0xc8>
   13608:	ldr	r2, [sp, #8]
   1360c:	add	r1, sp, #80	; 0x50
   13610:	add	r2, r2, r4
   13614:	str	r2, [sp, #8]
   13618:	ldr	r2, [sp, #12]
   1361c:	add	r2, r2, #1
   13620:	str	r2, [sp, #12]
   13624:	add	r1, r1, r2, lsl #3
   13628:	str	r6, [r1, #-72]	; 0xffffffb8
   1362c:	str	r4, [r1, #-68]	; 0xffffffbc
   13630:	cmp	r3, #0
   13634:	beq	13664 <flatcc_builder_embed_buffer@@Base+0xfc>
   13638:	ldr	r2, [sp, #8]
   1363c:	add	r1, sp, #80	; 0x50
   13640:	add	r2, r2, r3
   13644:	str	r2, [sp, #8]
   13648:	ldr	r2, [sp, #12]
   1364c:	ldr	r0, [pc, #36]	; 13678 <flatcc_builder_embed_buffer@@Base+0x110>
   13650:	add	r2, r2, #1
   13654:	str	r2, [sp, #12]
   13658:	add	r1, r1, r2, lsl #3
   1365c:	str	r0, [r1, #-72]	; 0xffffffb8
   13660:	str	r3, [r1, #-68]	; 0xffffffbc
   13664:	add	r1, sp, #8
   13668:	mov	r0, r5
   1366c:	bl	12f18 <flatcc_builder_default_alloc@@Base+0x3f8>
   13670:	add	sp, sp, #80	; 0x50
   13674:	pop	{r4, r5, r6, pc}
   13678:	andeq	r6, r1, sl, asr r4

0001367c <flatcc_builder_create_buffer@@Base>:
   1367c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13680:	sub	sp, sp, #92	; 0x5c
   13684:	mov	r7, #0
   13688:	ldr	r8, [sp, #124]	; 0x7c
   1368c:	mov	r9, r1
   13690:	and	r6, r8, #1
   13694:	mov	r5, r3
   13698:	add	r1, sp, #120	; 0x78
   1369c:	mov	r3, r6
   136a0:	mov	r4, r0
   136a4:	str	r7, [sp, #12]
   136a8:	bl	12e68 <flatcc_builder_default_alloc@@Base+0x348>
   136ac:	cmp	r0, r7
   136b0:	bne	13824 <flatcc_builder_create_buffer@@Base+0x1a8>
   136b4:	ldrh	r3, [r4, #128]	; 0x80
   136b8:	ldrh	r1, [sp, #120]	; 0x78
   136bc:	ldr	r2, [r4, #136]	; 0x88
   136c0:	and	r8, r8, #2
   136c4:	cmp	r3, r1
   136c8:	strhcc	r1, [r4, #128]	; 0x80
   136cc:	cmp	r9, #0
   136d0:	sub	r1, r1, #1
   136d4:	ldrne	r3, [r9]
   136d8:	strne	r3, [sp, #12]
   136dc:	ldr	r0, [sp, #12]
   136e0:	sub	r3, r2, #4
   136e4:	cmp	r0, #0
   136e8:	movne	r0, #4
   136ec:	moveq	r0, #0
   136f0:	cmp	r8, #0
   136f4:	moveq	ip, #0
   136f8:	movne	ip, #4
   136fc:	sub	r3, r3, r0
   13700:	sub	r3, r3, ip
   13704:	and	r3, r3, r1
   13708:	moveq	lr, r6
   1370c:	mov	r1, #0
   13710:	orrne	lr, r6, #1
   13714:	cmp	lr, r1
   13718:	str	r1, [sp, #16]
   1371c:	str	r1, [sp, #20]
   13720:	beq	13740 <flatcc_builder_create_buffer@@Base+0xc4>
   13724:	mov	r1, #4
   13728:	str	r1, [sp, #16]
   1372c:	add	ip, sp, #8
   13730:	str	r1, [sp, #28]
   13734:	mov	r1, #1
   13738:	str	ip, [sp, #24]
   1373c:	str	r1, [sp, #20]
   13740:	ldr	r7, [sp, #20]
   13744:	add	r8, sp, #88	; 0x58
   13748:	add	r1, r7, #1
   1374c:	ldr	ip, [sp, #16]
   13750:	add	r8, r8, r1, lsl #3
   13754:	add	r9, sp, #4
   13758:	add	ip, ip, #4
   1375c:	str	r9, [r8, #-72]	; 0xffffffb8
   13760:	cmp	r0, #0
   13764:	mov	r9, #4
   13768:	str	ip, [sp, #16]
   1376c:	str	r9, [r8, #-68]	; 0xffffffbc
   13770:	str	r1, [sp, #20]
   13774:	beq	137a0 <flatcc_builder_create_buffer@@Base+0x124>
   13778:	add	ip, r0, ip
   1377c:	add	r1, r7, #2
   13780:	str	ip, [sp, #16]
   13784:	add	ip, sp, #88	; 0x58
   13788:	add	r1, ip, r1, lsl #3
   1378c:	add	r7, r7, #2
   13790:	add	ip, sp, #12
   13794:	str	ip, [r1, #-72]	; 0xffffffb8
   13798:	str	r0, [r1, #-68]	; 0xffffffbc
   1379c:	str	r7, [sp, #20]
   137a0:	cmp	r3, #0
   137a4:	beq	137d4 <flatcc_builder_create_buffer@@Base+0x158>
   137a8:	ldr	r1, [sp, #16]
   137ac:	add	r0, sp, #88	; 0x58
   137b0:	add	r1, r1, r3
   137b4:	str	r1, [sp, #16]
   137b8:	ldr	r1, [sp, #20]
   137bc:	ldr	ip, [pc, #108]	; 13830 <flatcc_builder_create_buffer@@Base+0x1b4>
   137c0:	add	r1, r1, #1
   137c4:	str	r1, [sp, #20]
   137c8:	add	r0, r0, r1, lsl #3
   137cc:	str	ip, [r0, #-72]	; 0xffffffb8
   137d0:	str	r3, [r0, #-68]	; 0xffffffbc
   137d4:	cmp	r6, #0
   137d8:	ldr	r3, [sp, #16]
   137dc:	add	r1, sp, #16
   137e0:	sub	r3, r2, r3
   137e4:	ldrne	r2, [r4, #144]	; 0x90
   137e8:	ldreq	r2, [r4, #140]	; 0x8c
   137ec:	add	r3, r3, lr, lsl #2
   137f0:	sub	r2, r2, r3
   137f4:	mov	r0, r4
   137f8:	sub	r3, r5, r3
   137fc:	str	r2, [sp, #8]
   13800:	str	r3, [sp, #4]
   13804:	bl	12f18 <flatcc_builder_default_alloc@@Base+0x3f8>
   13808:	cmp	r0, #0
   1380c:	bne	13828 <flatcc_builder_create_buffer@@Base+0x1ac>
   13810:	ldr	r3, [pc, #28]	; 13834 <flatcc_builder_create_buffer@@Base+0x1b8>
   13814:	mov	r2, #772	; 0x304
   13818:	ldr	r1, [pc, #24]	; 13838 <flatcc_builder_create_buffer@@Base+0x1bc>
   1381c:	ldr	r0, [pc, #24]	; 1383c <flatcc_builder_create_buffer@@Base+0x1c0>
   13820:	bl	1209c <__assert_fail@plt>
   13824:	mov	r0, r7
   13828:	add	sp, sp, #92	; 0x5c
   1382c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13830:	andeq	r6, r1, sl, asr r4
   13834:	strdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   13838:	andeq	r6, r1, r0, asr #22
   1383c:	andeq	r6, r1, sp, lsr #23

00013840 <flatcc_builder_create_struct@@Base>:
   13840:	cmp	r3, #0
   13844:	push	{lr}		; (str lr, [sp, #-4]!)
   13848:	sub	sp, sp, #76	; 0x4c
   1384c:	bne	13864 <flatcc_builder_create_struct@@Base+0x24>
   13850:	ldr	r3, [pc, #144]	; 138e8 <flatcc_builder_create_struct@@Base+0xa8>
   13854:	ldr	r2, [pc, #144]	; 138ec <flatcc_builder_create_struct@@Base+0xac>
   13858:	ldr	r1, [pc, #144]	; 138f0 <flatcc_builder_create_struct@@Base+0xb0>
   1385c:	ldr	r0, [pc, #144]	; 138f4 <flatcc_builder_create_struct@@Base+0xb4>
   13860:	bl	1209c <__assert_fail@plt>
   13864:	ldrh	ip, [r0, #128]	; 0x80
   13868:	cmp	ip, r3
   1386c:	ldr	ip, [r0, #136]	; 0x88
   13870:	strhcc	r3, [r0, #128]	; 0x80
   13874:	sub	ip, ip, r2
   13878:	sub	r3, r3, #1
   1387c:	and	r3, r3, ip
   13880:	mov	ip, #0
   13884:	cmp	r2, ip
   13888:	strne	r2, [sp, #12]
   1388c:	str	ip, [sp]
   13890:	strne	r2, [sp]
   13894:	movne	r2, #1
   13898:	str	ip, [sp, #4]
   1389c:	strne	r1, [sp, #8]
   138a0:	strne	r2, [sp, #4]
   138a4:	cmp	r3, #0
   138a8:	beq	138d8 <flatcc_builder_create_struct@@Base+0x98>
   138ac:	ldr	r2, [sp]
   138b0:	add	r1, sp, #72	; 0x48
   138b4:	add	r2, r2, r3
   138b8:	str	r2, [sp]
   138bc:	ldr	r2, [sp, #4]
   138c0:	ldr	ip, [pc, #48]	; 138f8 <flatcc_builder_create_struct@@Base+0xb8>
   138c4:	add	r2, r2, #1
   138c8:	str	r2, [sp, #4]
   138cc:	add	r1, r1, r2, lsl #3
   138d0:	str	ip, [r1, #-72]	; 0xffffffb8
   138d4:	str	r3, [r1, #-68]	; 0xffffffbc
   138d8:	mov	r1, sp
   138dc:	bl	12f18 <flatcc_builder_default_alloc@@Base+0x3f8>
   138e0:	add	sp, sp, #76	; 0x4c
   138e4:	pop	{pc}		; (ldr pc, [sp], #4)
   138e8:	andeq	r6, r1, ip, lsl r7
   138ec:	andeq	r0, r0, pc, lsl #6
   138f0:	andeq	r6, r1, r0, asr #22
   138f4:	andeq	r6, r1, r7, lsl #24
   138f8:	andeq	r6, r1, sl, asr r4

000138fc <flatcc_builder_start_buffer@@Base>:
   138fc:	push	{r4, r5, r6, r7, r8, lr}
   13900:	mov	r5, r1
   13904:	ldrh	r1, [r0, #128]	; 0x80
   13908:	mov	r4, r0
   1390c:	mov	r7, r2
   13910:	mov	r6, r3
   13914:	bl	12c88 <flatcc_builder_default_alloc@@Base+0x168>
   13918:	cmp	r0, #0
   1391c:	bne	13990 <flatcc_builder_start_buffer@@Base+0x94>
   13920:	ldrh	r3, [r4, #132]	; 0x84
   13924:	ldr	ip, [r4, #32]
   13928:	mov	r1, #1
   1392c:	strh	r1, [r4, #128]	; 0x80
   13930:	strh	r3, [ip, #34]	; 0x22
   13934:	ldrh	r3, [r4, #164]	; 0xa4
   13938:	strh	r7, [r4, #132]	; 0x84
   1393c:	cmp	r5, #0
   13940:	strh	r3, [ip, #32]
   13944:	ldr	r3, [r4, #144]	; 0x90
   13948:	strh	r6, [r4, #164]	; 0xa4
   1394c:	str	r3, [ip, #20]
   13950:	ldr	r3, [r4, #152]	; 0x98
   13954:	str	r3, [ip, #28]
   13958:	ldr	r3, [r4, #136]	; 0x88
   1395c:	str	r3, [r4, #144]	; 0x90
   13960:	ldr	r3, [r4, #148]	; 0x94
   13964:	str	r3, [r4, #152]	; 0x98
   13968:	add	r2, r3, r1
   1396c:	ldr	r3, [r4, #168]	; 0xa8
   13970:	str	r2, [r4, #148]	; 0x94
   13974:	str	r3, [ip, #16]
   13978:	ldr	r3, [pc, #24]	; 13998 <flatcc_builder_start_buffer@@Base+0x9c>
   1397c:	moveq	r5, r3
   13980:	ldr	r3, [r5]
   13984:	str	r3, [r4, #168]	; 0xa8
   13988:	strh	r1, [ip, #14]
   1398c:	pop	{r4, r5, r6, r7, r8, pc}
   13990:	mvn	r0, #0
   13994:	pop	{r4, r5, r6, r7, r8, pc}
   13998:	andeq	r6, r1, sl, asr r4

0001399c <flatcc_builder_end_buffer@@Base>:
   1399c:	push	{r0, r1, r2, r4, r5, lr}
   139a0:	mov	r4, r0
   139a4:	ldrh	r0, [r0, #164]	; 0xa4
   139a8:	ldr	r2, [r4, #152]	; 0x98
   139ac:	and	r0, r0, #2
   139b0:	cmp	r2, #0
   139b4:	orrne	r0, r0, #1
   139b8:	ldr	r2, [r4, #32]
   139bc:	ldrh	r2, [r2, #14]
   139c0:	cmp	r2, #1
   139c4:	beq	139dc <flatcc_builder_end_buffer@@Base+0x40>
   139c8:	ldr	r3, [pc, #120]	; 13a48 <flatcc_builder_end_buffer@@Base+0xac>
   139cc:	ldr	r2, [pc, #120]	; 13a4c <flatcc_builder_end_buffer@@Base+0xb0>
   139d0:	ldr	r1, [pc, #120]	; 13a50 <flatcc_builder_end_buffer@@Base+0xb4>
   139d4:	ldr	r0, [pc, #120]	; 13a54 <flatcc_builder_end_buffer@@Base+0xb8>
   139d8:	bl	1209c <__assert_fail@plt>
   139dc:	ldrh	r2, [r4, #132]	; 0x84
   139e0:	mov	r3, r1
   139e4:	ldrh	r1, [r4, #128]	; 0x80
   139e8:	str	r0, [sp, #4]
   139ec:	mov	r0, r4
   139f0:	cmp	r1, r2
   139f4:	strhcc	r2, [r4, #128]	; 0x80
   139f8:	ldrh	r1, [r4, #128]	; 0x80
   139fc:	str	r1, [sp]
   13a00:	add	r1, r4, #168	; 0xa8
   13a04:	bl	1367c <flatcc_builder_create_buffer@@Base>
   13a08:	subs	r5, r0, #0
   13a0c:	beq	13a3c <flatcc_builder_end_buffer@@Base+0xa0>
   13a10:	ldr	r3, [r4, #32]
   13a14:	mov	r0, r4
   13a18:	ldr	r2, [r3, #20]
   13a1c:	str	r2, [r4, #144]	; 0x90
   13a20:	ldr	r2, [r3, #28]
   13a24:	str	r2, [r4, #152]	; 0x98
   13a28:	ldr	r2, [r3, #16]
   13a2c:	str	r2, [r4, #168]	; 0xa8
   13a30:	ldrh	r3, [r3, #32]
   13a34:	strh	r3, [r4, #164]	; 0xa4
   13a38:	bl	12a14 <_start@@Base+0x4f4>
   13a3c:	mov	r0, r5
   13a40:	add	sp, sp, #12
   13a44:	pop	{r4, r5, pc}
   13a48:	andeq	r6, r1, r9, lsr r7
   13a4c:	andeq	r0, r0, r6, asr #6
   13a50:	andeq	r6, r1, r0, asr #22
   13a54:	andeq	r6, r1, r2, lsl ip

00013a58 <flatcc_builder_start_struct@@Base>:
   13a58:	push	{r4, r5, r6, lr}
   13a5c:	mov	r5, r1
   13a60:	mov	r1, r2
   13a64:	mov	r4, r0
   13a68:	bl	12c88 <flatcc_builder_default_alloc@@Base+0x168>
   13a6c:	cmp	r0, #0
   13a70:	bne	13a9c <flatcc_builder_start_struct@@Base+0x44>
   13a74:	ldr	r3, [r4, #32]
   13a78:	mov	r2, #2
   13a7c:	mov	r0, r4
   13a80:	mvn	r1, #3
   13a84:	strh	r2, [r3, #14]
   13a88:	bl	1294c <_start@@Base+0x42c>
   13a8c:	mov	r1, r5
   13a90:	mov	r0, r4
   13a94:	pop	{r4, r5, r6, lr}
   13a98:	b	129cc <_start@@Base+0x4ac>
   13a9c:	mov	r0, #0
   13aa0:	pop	{r4, r5, r6, pc}

00013aa4 <flatcc_builder_struct_edit@@Base>:
   13aa4:	ldr	r0, [r0, #16]
   13aa8:	bx	lr

00013aac <flatcc_builder_end_struct@@Base>:
   13aac:	ldr	r3, [r0, #32]
   13ab0:	push	{r4, r5, r6, lr}
   13ab4:	ldrh	r3, [r3, #14]
   13ab8:	cmp	r3, #2
   13abc:	beq	13ad4 <flatcc_builder_end_struct@@Base+0x28>
   13ac0:	ldr	r3, [pc, #56]	; 13b00 <flatcc_builder_end_struct@@Base+0x54>
   13ac4:	mov	r2, #872	; 0x368
   13ac8:	ldr	r1, [pc, #52]	; 13b04 <flatcc_builder_end_struct@@Base+0x58>
   13acc:	ldr	r0, [pc, #52]	; 13b08 <flatcc_builder_end_struct@@Base+0x5c>
   13ad0:	bl	1209c <__assert_fail@plt>
   13ad4:	ldrh	r3, [r0, #130]	; 0x82
   13ad8:	ldr	r2, [r0, #20]
   13adc:	ldr	r1, [r0, #16]
   13ae0:	mov	r4, r0
   13ae4:	bl	13840 <flatcc_builder_create_struct@@Base>
   13ae8:	subs	r5, r0, #0
   13aec:	beq	13af8 <flatcc_builder_end_struct@@Base+0x4c>
   13af0:	mov	r0, r4
   13af4:	bl	12a14 <_start@@Base+0x4f4>
   13af8:	mov	r0, r5
   13afc:	pop	{r4, r5, r6, pc}
   13b00:	andeq	r6, r1, r3, asr r7
   13b04:	andeq	r6, r1, r0, asr #22
   13b08:	andeq	r6, r1, lr, lsr ip

00013b0c <flatcc_builder_extend_vector@@Base>:
   13b0c:	push	{r4, r5, r6, lr}
   13b10:	mov	r4, r0
   13b14:	ldr	r0, [r0, #32]
   13b18:	mov	r5, r1
   13b1c:	ldr	r2, [r0, #24]
   13b20:	bl	12f98 <flatcc_builder_default_alloc@@Base+0x478>
   13b24:	cmp	r0, #0
   13b28:	bne	13b44 <flatcc_builder_extend_vector@@Base+0x38>
   13b2c:	ldr	r3, [r4, #32]
   13b30:	mov	r0, r4
   13b34:	ldr	r1, [r3, #16]
   13b38:	mul	r1, r1, r5
   13b3c:	pop	{r4, r5, r6, lr}
   13b40:	b	129cc <_start@@Base+0x4ac>
   13b44:	mov	r0, #0
   13b48:	pop	{r4, r5, r6, pc}

00013b4c <flatcc_builder_vector_push@@Base>:
   13b4c:	ldr	r3, [r0, #32]
   13b50:	push	{r4, lr}
   13b54:	ldrh	r2, [r3, #14]
   13b58:	cmp	r2, #4
   13b5c:	beq	13b74 <flatcc_builder_vector_push@@Base+0x28>
   13b60:	ldr	r3, [pc, #64]	; 13ba8 <flatcc_builder_vector_push@@Base+0x5c>
   13b64:	ldr	r2, [pc, #64]	; 13bac <flatcc_builder_vector_push@@Base+0x60>
   13b68:	ldr	r1, [pc, #64]	; 13bb0 <flatcc_builder_vector_push@@Base+0x64>
   13b6c:	ldr	r0, [pc, #64]	; 13bb4 <flatcc_builder_vector_push@@Base+0x68>
   13b70:	bl	1209c <__assert_fail@plt>
   13b74:	ldr	r2, [r3, #20]
   13b78:	ldr	ip, [r3, #24]
   13b7c:	cmp	r2, ip
   13b80:	ldrhi	r3, [pc, #32]	; 13ba8 <flatcc_builder_vector_push@@Base+0x5c>
   13b84:	movhi	r2, #908	; 0x38c
   13b88:	ldrhi	r1, [pc, #32]	; 13bb0 <flatcc_builder_vector_push@@Base+0x64>
   13b8c:	ldrhi	r0, [pc, #36]	; 13bb8 <flatcc_builder_vector_push@@Base+0x6c>
   13b90:	bhi	13b70 <flatcc_builder_vector_push@@Base+0x24>
   13b94:	add	r2, r2, #1
   13b98:	str	r2, [r3, #20]
   13b9c:	ldr	r2, [r3, #16]
   13ba0:	pop	{r4, lr}
   13ba4:	b	12aa0 <_start@@Base+0x580>
   13ba8:	andeq	r6, r1, sp, ror #14
   13bac:	andeq	r0, r0, fp, lsl #7
   13bb0:	andeq	r6, r1, r0, asr #22
   13bb4:	andeq	r6, r1, sl, ror #24
   13bb8:	muleq	r1, r6, ip

00013bbc <flatcc_builder_append_vector@@Base>:
   13bbc:	push	{r4, r5, r6, lr}
   13bc0:	mov	r4, r0
   13bc4:	ldr	r0, [r0, #32]
   13bc8:	ldrh	r3, [r0, #14]
   13bcc:	cmp	r3, #4
   13bd0:	beq	13be8 <flatcc_builder_append_vector@@Base+0x2c>
   13bd4:	ldr	r3, [pc, #76]	; 13c28 <flatcc_builder_append_vector@@Base+0x6c>
   13bd8:	ldr	r2, [pc, #76]	; 13c2c <flatcc_builder_append_vector@@Base+0x70>
   13bdc:	ldr	r1, [pc, #76]	; 13c30 <flatcc_builder_append_vector@@Base+0x74>
   13be0:	ldr	r0, [pc, #76]	; 13c34 <flatcc_builder_append_vector@@Base+0x78>
   13be4:	bl	1209c <__assert_fail@plt>
   13be8:	mov	r5, r2
   13bec:	mov	r6, r1
   13bf0:	ldr	r2, [r0, #24]
   13bf4:	mov	r1, r5
   13bf8:	bl	12f98 <flatcc_builder_default_alloc@@Base+0x478>
   13bfc:	cmp	r0, #0
   13c00:	bne	13c20 <flatcc_builder_append_vector@@Base+0x64>
   13c04:	ldr	r3, [r4, #32]
   13c08:	mov	r1, r6
   13c0c:	mov	r0, r4
   13c10:	ldr	r2, [r3, #16]
   13c14:	mul	r2, r2, r5
   13c18:	pop	{r4, r5, r6, lr}
   13c1c:	b	12aa0 <_start@@Base+0x580>
   13c20:	mov	r0, #0
   13c24:	pop	{r4, r5, r6, pc}
   13c28:	andeq	r6, r1, r8, lsl #15
   13c2c:	muleq	r0, r3, r3
   13c30:	andeq	r6, r1, r0, asr #22
   13c34:	andeq	r6, r1, sl, ror #24

00013c38 <flatcc_builder_extend_offset_vector@@Base>:
   13c38:	push	{r4, r5, r6, lr}
   13c3c:	mvn	r2, #-1073741824	; 0xc0000000
   13c40:	mov	r4, r0
   13c44:	ldr	r0, [r0, #32]
   13c48:	mov	r5, r1
   13c4c:	bl	12f98 <flatcc_builder_default_alloc@@Base+0x478>
   13c50:	cmp	r0, #0
   13c54:	bne	13c68 <flatcc_builder_extend_offset_vector@@Base+0x30>
   13c58:	lsl	r1, r5, #2
   13c5c:	mov	r0, r4
   13c60:	pop	{r4, r5, r6, lr}
   13c64:	b	129cc <_start@@Base+0x4ac>
   13c68:	mov	r0, #0
   13c6c:	pop	{r4, r5, r6, pc}

00013c70 <flatcc_builder_offset_vector_push@@Base>:
   13c70:	ldr	r2, [r0, #32]
   13c74:	push	{r4, lr}
   13c78:	ldrh	r3, [r2, #14]
   13c7c:	cmp	r3, #5
   13c80:	beq	13c98 <flatcc_builder_offset_vector_push@@Base+0x28>
   13c84:	ldr	r3, [pc, #64]	; 13ccc <flatcc_builder_offset_vector_push@@Base+0x5c>
   13c88:	ldr	r2, [pc, #64]	; 13cd0 <flatcc_builder_offset_vector_push@@Base+0x60>
   13c8c:	ldr	r1, [pc, #64]	; 13cd4 <flatcc_builder_offset_vector_push@@Base+0x64>
   13c90:	ldr	r0, [pc, #64]	; 13cd8 <flatcc_builder_offset_vector_push@@Base+0x68>
   13c94:	bl	1209c <__assert_fail@plt>
   13c98:	ldr	r3, [r2, #20]
   13c9c:	cmn	r3, #-1073741823	; 0xc0000001
   13ca0:	beq	13cc4 <flatcc_builder_offset_vector_push@@Base+0x54>
   13ca4:	add	r3, r3, #1
   13ca8:	mov	r4, r1
   13cac:	str	r3, [r2, #20]
   13cb0:	mov	r1, #4
   13cb4:	bl	129cc <_start@@Base+0x4ac>
   13cb8:	cmp	r0, #0
   13cbc:	strne	r4, [r0]
   13cc0:	pop	{r4, pc}
   13cc4:	mov	r0, #0
   13cc8:	pop	{r4, pc}
   13ccc:	andeq	r6, r1, r5, lsr #15
   13cd0:	andeq	r0, r0, r6, lsr #7
   13cd4:	andeq	r6, r1, r0, asr #22
   13cd8:	ldrdeq	r6, [r1], -r3

00013cdc <flatcc_builder_append_offset_vector@@Base>:
   13cdc:	push	{r4, r5, r6, lr}
   13ce0:	mov	r4, r0
   13ce4:	ldr	r0, [r0, #32]
   13ce8:	ldrh	r3, [r0, #14]
   13cec:	cmp	r3, #5
   13cf0:	beq	13d08 <flatcc_builder_append_offset_vector@@Base+0x2c>
   13cf4:	ldr	r3, [pc, #68]	; 13d40 <flatcc_builder_append_offset_vector@@Base+0x64>
   13cf8:	mov	r2, #948	; 0x3b4
   13cfc:	ldr	r1, [pc, #64]	; 13d44 <flatcc_builder_append_offset_vector@@Base+0x68>
   13d00:	ldr	r0, [pc, #64]	; 13d48 <flatcc_builder_append_offset_vector@@Base+0x6c>
   13d04:	bl	1209c <__assert_fail@plt>
   13d08:	mov	r5, r2
   13d0c:	mov	r6, r1
   13d10:	mvn	r2, #-1073741824	; 0xc0000000
   13d14:	mov	r1, r5
   13d18:	bl	12f98 <flatcc_builder_default_alloc@@Base+0x478>
   13d1c:	cmp	r0, #0
   13d20:	bne	13d38 <flatcc_builder_append_offset_vector@@Base+0x5c>
   13d24:	lsl	r2, r5, #2
   13d28:	mov	r1, r6
   13d2c:	mov	r0, r4
   13d30:	pop	{r4, r5, r6, lr}
   13d34:	b	12aa0 <_start@@Base+0x580>
   13d38:	mov	r0, #0
   13d3c:	pop	{r4, r5, r6, pc}
   13d40:	andeq	r6, r1, r7, asr #15
   13d44:	andeq	r6, r1, r0, asr #22
   13d48:	ldrdeq	r6, [r1], -r3

00013d4c <flatcc_builder_extend_string@@Base>:
   13d4c:	push	{r4, r5, r6, lr}
   13d50:	mov	r4, r0
   13d54:	ldr	r0, [r0, #32]
   13d58:	ldrh	r3, [r0, #14]
   13d5c:	cmp	r3, #6
   13d60:	beq	13d78 <flatcc_builder_extend_string@@Base+0x2c>
   13d64:	ldr	r3, [pc, #56]	; 13da4 <flatcc_builder_extend_string@@Base+0x58>
   13d68:	ldr	r2, [pc, #56]	; 13da8 <flatcc_builder_extend_string@@Base+0x5c>
   13d6c:	ldr	r1, [pc, #56]	; 13dac <flatcc_builder_extend_string@@Base+0x60>
   13d70:	ldr	r0, [pc, #56]	; 13db0 <flatcc_builder_extend_string@@Base+0x64>
   13d74:	bl	1209c <__assert_fail@plt>
   13d78:	mvn	r2, #0
   13d7c:	mov	r5, r1
   13d80:	bl	12f98 <flatcc_builder_default_alloc@@Base+0x478>
   13d84:	cmp	r0, #0
   13d88:	bne	13d9c <flatcc_builder_extend_string@@Base+0x50>
   13d8c:	mov	r1, r5
   13d90:	mov	r0, r4
   13d94:	pop	{r4, r5, r6, lr}
   13d98:	b	129cc <_start@@Base+0x4ac>
   13d9c:	mov	r0, #0
   13da0:	pop	{r4, r5, r6, pc}
   13da4:	andeq	r6, r1, fp, ror #15
   13da8:			; <UNDEFINED> instruction: 0x000003bd
   13dac:	andeq	r6, r1, r0, asr #22
   13db0:	andeq	r6, r1, r6, lsl #26

00013db4 <flatcc_builder_append_string@@Base>:
   13db4:	push	{r4, r5, r6, lr}
   13db8:	mov	r4, r0
   13dbc:	ldr	r0, [r0, #32]
   13dc0:	ldrh	r3, [r0, #14]
   13dc4:	cmp	r3, #6
   13dc8:	beq	13de0 <flatcc_builder_append_string@@Base+0x2c>
   13dcc:	ldr	r3, [pc, #68]	; 13e18 <flatcc_builder_append_string@@Base+0x64>
   13dd0:	ldr	r2, [pc, #68]	; 13e1c <flatcc_builder_append_string@@Base+0x68>
   13dd4:	ldr	r1, [pc, #68]	; 13e20 <flatcc_builder_append_string@@Base+0x6c>
   13dd8:	ldr	r0, [pc, #68]	; 13e24 <flatcc_builder_append_string@@Base+0x70>
   13ddc:	bl	1209c <__assert_fail@plt>
   13de0:	mov	r5, r2
   13de4:	mov	r6, r1
   13de8:	mvn	r2, #0
   13dec:	mov	r1, r5
   13df0:	bl	12f98 <flatcc_builder_default_alloc@@Base+0x478>
   13df4:	cmp	r0, #0
   13df8:	bne	13e10 <flatcc_builder_append_string@@Base+0x5c>
   13dfc:	mov	r2, r5
   13e00:	mov	r1, r6
   13e04:	mov	r0, r4
   13e08:	pop	{r4, r5, r6, lr}
   13e0c:	b	12aa0 <_start@@Base+0x580>
   13e10:	mov	r0, #0
   13e14:	pop	{r4, r5, r6, pc}
   13e18:	andeq	r6, r1, r8, lsl #16
   13e1c:	andeq	r0, r0, r6, asr #7
   13e20:	andeq	r6, r1, r0, asr #22
   13e24:	andeq	r6, r1, r6, lsl #26

00013e28 <flatcc_builder_append_string_str@@Base>:
   13e28:	push	{r4, r5, r6, lr}
   13e2c:	mov	r5, r0
   13e30:	mov	r0, r1
   13e34:	mov	r4, r1
   13e38:	bl	12054 <strlen@plt>
   13e3c:	mov	r1, r4
   13e40:	mov	r2, r0
   13e44:	mov	r0, r5
   13e48:	pop	{r4, r5, r6, lr}
   13e4c:	b	13db4 <flatcc_builder_append_string@@Base>

00013e50 <flatcc_builder_append_string_strn@@Base>:
   13e50:	push	{r4, r5, r6, lr}
   13e54:	mov	r4, r1
   13e58:	mov	r6, r0
   13e5c:	mov	r1, #0
   13e60:	mov	r0, r4
   13e64:	mov	r5, r2
   13e68:	bl	12078 <memchr@plt>
   13e6c:	mov	r1, r4
   13e70:	cmp	r0, #0
   13e74:	subne	r5, r0, r4
   13e78:	mov	r2, r5
   13e7c:	mov	r0, r6
   13e80:	pop	{r4, r5, r6, lr}
   13e84:	b	13db4 <flatcc_builder_append_string@@Base>

00013e88 <flatcc_builder_truncate_vector@@Base>:
   13e88:	ldr	r3, [r0, #32]
   13e8c:	push	{r4, lr}
   13e90:	ldrh	r2, [r3, #14]
   13e94:	cmp	r2, #4
   13e98:	beq	13eb0 <flatcc_builder_truncate_vector@@Base+0x28>
   13e9c:	ldr	r3, [pc, #68]	; 13ee8 <flatcc_builder_truncate_vector@@Base+0x60>
   13ea0:	ldr	r2, [pc, #68]	; 13eec <flatcc_builder_truncate_vector@@Base+0x64>
   13ea4:	ldr	r1, [pc, #68]	; 13ef0 <flatcc_builder_truncate_vector@@Base+0x68>
   13ea8:	ldr	r0, [pc, #68]	; 13ef4 <flatcc_builder_truncate_vector@@Base+0x6c>
   13eac:	bl	1209c <__assert_fail@plt>
   13eb0:	ldr	r2, [r3, #20]
   13eb4:	cmp	r2, r1
   13eb8:	ldrcc	r3, [pc, #40]	; 13ee8 <flatcc_builder_truncate_vector@@Base+0x60>
   13ebc:	ldrcc	r2, [pc, #52]	; 13ef8 <flatcc_builder_truncate_vector@@Base+0x70>
   13ec0:	ldrcc	r1, [pc, #40]	; 13ef0 <flatcc_builder_truncate_vector@@Base+0x68>
   13ec4:	ldrcc	r0, [pc, #48]	; 13efc <flatcc_builder_truncate_vector@@Base+0x74>
   13ec8:	bcc	13eac <flatcc_builder_truncate_vector@@Base+0x24>
   13ecc:	sub	r2, r2, r1
   13ed0:	str	r2, [r3, #20]
   13ed4:	ldr	r3, [r3, #16]
   13ed8:	mul	r1, r3, r1
   13edc:	bl	12a80 <_start@@Base+0x560>
   13ee0:	mov	r0, #0
   13ee4:	pop	{r4, pc}
   13ee8:	andeq	r6, r1, r5, lsr #16
   13eec:	ldrdeq	r0, [r0], -r9
   13ef0:	andeq	r6, r1, r0, asr #22
   13ef4:	andeq	r6, r1, sl, ror #24
   13ef8:	ldrdeq	r0, [r0], -sl
   13efc:	andeq	r6, r1, r2, lsr sp

00013f00 <flatcc_builder_truncate_offset_vector@@Base>:
   13f00:	ldr	r3, [r0, #32]
   13f04:	push	{r4, lr}
   13f08:	ldrh	r2, [r3, #14]
   13f0c:	cmp	r2, #5
   13f10:	beq	13f28 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   13f14:	ldr	r3, [pc, #68]	; 13f60 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   13f18:	ldr	r2, [pc, #68]	; 13f64 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   13f1c:	ldr	r1, [pc, #68]	; 13f68 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   13f20:	ldr	r0, [pc, #68]	; 13f6c <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   13f24:	bl	1209c <__assert_fail@plt>
   13f28:	ldr	r2, [r3, #20]
   13f2c:	cmp	r2, r1
   13f30:	ldrcc	r3, [pc, #40]	; 13f60 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   13f34:	ldrcc	r2, [pc, #52]	; 13f70 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   13f38:	ldrcc	r1, [pc, #40]	; 13f68 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   13f3c:	ldrcc	r0, [pc, #48]	; 13f74 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   13f40:	bcc	13f24 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   13f44:	sub	r2, r2, r1
   13f48:	str	r2, [r3, #20]
   13f4c:	ldr	r3, [r3, #16]
   13f50:	mul	r1, r3, r1
   13f54:	bl	12a80 <_start@@Base+0x560>
   13f58:	mov	r0, #0
   13f5c:	pop	{r4, pc}
   13f60:	andeq	r6, r1, r4, asr #16
   13f64:	andeq	r0, r0, r2, ror #7
   13f68:	andeq	r6, r1, r0, asr #22
   13f6c:	ldrdeq	r6, [r1], -r3
   13f70:	andeq	r0, r0, r3, ror #7
   13f74:	andeq	r6, r1, r6, asr sp

00013f78 <flatcc_builder_truncate_string@@Base>:
   13f78:	ldr	r2, [r0, #32]
   13f7c:	push	{r4, lr}
   13f80:	ldrh	r3, [r2, #14]
   13f84:	cmp	r3, #6
   13f88:	beq	13fa0 <flatcc_builder_truncate_string@@Base+0x28>
   13f8c:	ldr	r3, [pc, #60]	; 13fd0 <flatcc_builder_truncate_string@@Base+0x58>
   13f90:	ldr	r2, [pc, #60]	; 13fd4 <flatcc_builder_truncate_string@@Base+0x5c>
   13f94:	ldr	r1, [pc, #60]	; 13fd8 <flatcc_builder_truncate_string@@Base+0x60>
   13f98:	ldr	r0, [pc, #60]	; 13fdc <flatcc_builder_truncate_string@@Base+0x64>
   13f9c:	bl	1209c <__assert_fail@plt>
   13fa0:	ldr	r3, [r2, #20]
   13fa4:	cmp	r3, r1
   13fa8:	ldrcc	r3, [pc, #32]	; 13fd0 <flatcc_builder_truncate_string@@Base+0x58>
   13fac:	movcc	r2, #1004	; 0x3ec
   13fb0:	ldrcc	r1, [pc, #32]	; 13fd8 <flatcc_builder_truncate_string@@Base+0x60>
   13fb4:	ldrcc	r0, [pc, #36]	; 13fe0 <flatcc_builder_truncate_string@@Base+0x68>
   13fb8:	bcc	13f9c <flatcc_builder_truncate_string@@Base+0x24>
   13fbc:	sub	r3, r3, r1
   13fc0:	str	r3, [r2, #20]
   13fc4:	bl	12a80 <_start@@Base+0x560>
   13fc8:	mov	r0, #0
   13fcc:	pop	{r4, pc}
   13fd0:	andeq	r6, r1, sl, ror #16
   13fd4:	andeq	r0, r0, fp, ror #7
   13fd8:	andeq	r6, r1, r0, asr #22
   13fdc:	andeq	r6, r1, r6, lsl #26
   13fe0:	muleq	r1, r1, sp

00013fe4 <flatcc_builder_start_vector@@Base>:
   13fe4:	cmp	r2, #4
   13fe8:	push	{r4, r5, r6, r7, r8, lr}
   13fec:	mov	r7, r1
   13ff0:	movcs	r1, r2
   13ff4:	movcc	r1, #4
   13ff8:	mov	r5, r0
   13ffc:	mov	r6, r3
   14000:	bl	12c88 <flatcc_builder_default_alloc@@Base+0x168>
   14004:	subs	r4, r0, #0
   14008:	mvnne	r4, #0
   1400c:	bne	14034 <flatcc_builder_start_vector@@Base+0x50>
   14010:	ldr	r2, [r5, #32]
   14014:	mov	r3, #4
   14018:	mvn	r1, #3
   1401c:	str	r7, [r2, #16]
   14020:	str	r4, [r2, #20]
   14024:	str	r6, [r2, #24]
   14028:	strh	r3, [r2, #14]
   1402c:	mov	r0, r5
   14030:	bl	1294c <_start@@Base+0x42c>
   14034:	mov	r0, r4
   14038:	pop	{r4, r5, r6, r7, r8, pc}

0001403c <flatcc_builder_start_offset_vector@@Base>:
   1403c:	push	{r4, r5, r6, lr}
   14040:	mov	r1, #4
   14044:	mov	r5, r0
   14048:	bl	12c88 <flatcc_builder_default_alloc@@Base+0x168>
   1404c:	subs	r4, r0, #0
   14050:	mvnne	r4, #0
   14054:	bne	1407c <flatcc_builder_start_offset_vector@@Base+0x40>
   14058:	ldr	r3, [r5, #32]
   1405c:	mov	r2, #4
   14060:	mvn	r1, #3
   14064:	str	r2, [r3, #16]
   14068:	mov	r2, #5
   1406c:	str	r4, [r3, #20]
   14070:	strh	r2, [r3, #14]
   14074:	mov	r0, r5
   14078:	bl	1294c <_start@@Base+0x42c>
   1407c:	mov	r0, r4
   14080:	pop	{r4, r5, r6, pc}

00014084 <flatcc_builder_start_string@@Base>:
   14084:	push	{r4, r5, r6, lr}
   14088:	mov	r1, #1
   1408c:	mov	r5, r0
   14090:	bl	12c88 <flatcc_builder_default_alloc@@Base+0x168>
   14094:	subs	r4, r0, #0
   14098:	mvnne	r4, #0
   1409c:	bne	140c4 <flatcc_builder_start_string@@Base+0x40>
   140a0:	ldr	r3, [r5, #32]
   140a4:	mov	r2, #1
   140a8:	mvn	r1, #3
   140ac:	str	r2, [r3, #16]
   140b0:	mov	r2, #6
   140b4:	str	r4, [r3, #20]
   140b8:	strh	r2, [r3, #14]
   140bc:	mov	r0, r5
   140c0:	bl	1294c <_start@@Base+0x42c>
   140c4:	mov	r0, r4
   140c8:	pop	{r4, r5, r6, pc}

000140cc <flatcc_builder_reserve_table@@Base>:
   140cc:	cmp	r1, #0
   140d0:	bge	140ec <flatcc_builder_reserve_table@@Base+0x20>
   140d4:	push	{r4, lr}
   140d8:	ldr	r3, [pc, #16]	; 140f0 <flatcc_builder_reserve_table@@Base+0x24>
   140dc:	ldr	r2, [pc, #16]	; 140f4 <flatcc_builder_reserve_table@@Base+0x28>
   140e0:	ldr	r1, [pc, #16]	; 140f8 <flatcc_builder_reserve_table@@Base+0x2c>
   140e4:	ldr	r0, [pc, #16]	; 140fc <flatcc_builder_reserve_table@@Base+0x30>
   140e8:	bl	1209c <__assert_fail@plt>
   140ec:	b	12d68 <flatcc_builder_default_alloc@@Base+0x248>
   140f0:	andeq	r6, r1, r9, lsl #17
   140f4:	andeq	r0, r0, r9, lsr #8
   140f8:	andeq	r6, r1, r0, asr #22
   140fc:	andeq	r6, r1, r9, asr #27

00014100 <flatcc_builder_start_table@@Base>:
   14100:	push	{r4, r5, r6, lr}
   14104:	mov	r5, r1
   14108:	mov	r1, #4
   1410c:	mov	r4, r0
   14110:	bl	12c88 <flatcc_builder_default_alloc@@Base+0x168>
   14114:	cmp	r0, #0
   14118:	beq	14128 <flatcc_builder_start_table@@Base+0x28>
   1411c:	mvn	r5, #0
   14120:	mov	r0, r5
   14124:	pop	{r4, r5, r6, pc}
   14128:	ldr	r1, [r4, #52]	; 0x34
   1412c:	ldr	r2, [r4, #4]
   14130:	ldr	r3, [r4, #32]
   14134:	sub	r2, r2, r1
   14138:	str	r2, [r3, #16]
   1413c:	ldr	r1, [r4, #76]	; 0x4c
   14140:	ldr	r2, [r4]
   14144:	sub	r2, r2, r1
   14148:	str	r2, [r3, #20]
   1414c:	ldr	r2, [r4, #12]
   14150:	mov	r1, r5
   14154:	str	r2, [r3, #24]
   14158:	ldrh	r2, [r4, #8]
   1415c:	strh	r2, [r3, #28]
   14160:	ldr	r2, [pc, #44]	; 14194 <flatcc_builder_start_table@@Base+0x94>
   14164:	strh	r0, [r4, #8]
   14168:	str	r2, [r4, #12]
   1416c:	mov	r2, #3
   14170:	strh	r2, [r3, #14]
   14174:	mov	r0, r4
   14178:	bl	12d68 <flatcc_builder_default_alloc@@Base+0x248>
   1417c:	subs	r5, r0, #0
   14180:	bne	1411c <flatcc_builder_start_table@@Base+0x1c>
   14184:	ldr	r1, [pc, #12]	; 14198 <flatcc_builder_start_table@@Base+0x98>
   14188:	mov	r0, r4
   1418c:	bl	1294c <_start@@Base+0x42c>
   14190:	b	14120 <flatcc_builder_start_table@@Base+0x20>
   14194:	svccs	0x00693b52
   14198:	strdeq	pc, [r0], -ip

0001419c <flatcc_builder_create_vtable@@Base>:
   1419c:	push	{lr}		; (str lr, [sp, #-4]!)
   141a0:	sub	sp, sp, #76	; 0x4c
   141a4:	cmp	r2, #0
   141a8:	mov	r3, #0
   141ac:	str	r3, [sp]
   141b0:	str	r3, [sp, #4]
   141b4:	movne	r3, #1
   141b8:	strne	r3, [sp, #4]
   141bc:	ldr	r3, [r0, #152]	; 0x98
   141c0:	strne	r1, [sp, #8]
   141c4:	strne	r2, [sp]
   141c8:	strne	r2, [sp, #12]
   141cc:	cmp	r3, #0
   141d0:	mov	r1, sp
   141d4:	bne	141f0 <flatcc_builder_create_vtable@@Base+0x54>
   141d8:	ldr	r3, [r0, #180]	; 0xb4
   141dc:	cmp	r3, #0
   141e0:	bne	141f0 <flatcc_builder_create_vtable@@Base+0x54>
   141e4:	bl	12dec <flatcc_builder_default_alloc@@Base+0x2cc>
   141e8:	add	sp, sp, #76	; 0x4c
   141ec:	pop	{pc}		; (ldr pc, [sp], #4)
   141f0:	bl	12f18 <flatcc_builder_default_alloc@@Base+0x3f8>
   141f4:	cmp	r0, #0
   141f8:	addne	r0, r0, #1
   141fc:	b	141e8 <flatcc_builder_create_vtable@@Base+0x4c>

00014200 <flatcc_builder_create_cached_vtable@@Base>:
   14200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14204:	mov	r4, r0
   14208:	ldr	r5, [r0, #116]	; 0x74
   1420c:	sub	sp, sp, #20
   14210:	cmp	r5, #0
   14214:	mov	fp, r1
   14218:	mov	r7, r2
   1421c:	mov	r6, r3
   14220:	bne	142c8 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14224:	ldr	r3, [r0, #124]	; 0x7c
   14228:	add	r9, r0, #92	; 0x5c
   1422c:	cmp	r3, #0
   14230:	beq	14248 <flatcc_builder_create_cached_vtable@@Base+0x48>
   14234:	ldr	r3, [pc, #556]	; 14468 <flatcc_builder_create_cached_vtable@@Base+0x268>
   14238:	ldr	r2, [pc, #556]	; 1446c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   1423c:	ldr	r1, [pc, #556]	; 14470 <flatcc_builder_create_cached_vtable@@Base+0x270>
   14240:	ldr	r0, [pc, #556]	; 14474 <flatcc_builder_create_cached_vtable@@Base+0x274>
   14244:	bl	1209c <__assert_fail@plt>
   14248:	str	r5, [sp]
   1424c:	mov	r3, #16
   14250:	mov	r2, r5
   14254:	mov	r1, #6
   14258:	bl	12c18 <flatcc_builder_default_alloc@@Base+0xf8>
   1425c:	cmp	r0, #0
   14260:	beq	1429c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14264:	mov	r3, #16
   14268:	str	r3, [r4, #124]	; 0x7c
   1426c:	mov	r3, #5
   14270:	str	r3, [sp]
   14274:	mov	r1, r9
   14278:	mov	r3, #1
   1427c:	ldr	r8, [r4, #48]	; 0x30
   14280:	mov	r2, #256	; 0x100
   14284:	ldr	r0, [r4, #40]	; 0x28
   14288:	blx	r8
   1428c:	cmp	r0, #0
   14290:	moveq	r3, #256	; 0x100
   14294:	ldreq	r1, [r4, #96]	; 0x60
   14298:	beq	142a8 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   1429c:	mov	r0, #0
   142a0:	b	14418 <flatcc_builder_create_cached_vtable@@Base+0x218>
   142a4:	mov	r3, r2
   142a8:	lsl	r2, r3, #1
   142ac:	cmp	r2, r1
   142b0:	bls	142a4 <flatcc_builder_create_cached_vtable@@Base+0xa4>
   142b4:	lsr	r3, r3, #2
   142b8:	mov	r2, #1
   142bc:	cmp	r3, r2, lsl r5
   142c0:	bhi	14388 <flatcc_builder_create_cached_vtable@@Base+0x188>
   142c4:	str	r5, [r4, #116]	; 0x74
   142c8:	ldr	r3, [r4, #116]	; 0x74
   142cc:	ldr	r8, [r4, #92]	; 0x5c
   142d0:	rsb	r3, r3, #32
   142d4:	lsr	r6, r6, r3
   142d8:	adds	r3, r8, r6, lsl #2
   142dc:	str	r3, [sp, #8]
   142e0:	ldrne	r9, [r8, r6, lsl #2]
   142e4:	movne	sl, #0
   142e8:	beq	1429c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   142ec:	cmp	r9, #0
   142f0:	bne	14390 <flatcc_builder_create_cached_vtable@@Base+0x190>
   142f4:	str	r9, [sp]
   142f8:	mov	r3, #16
   142fc:	ldr	r2, [r4, #124]	; 0x7c
   14300:	mov	r1, #6
   14304:	mov	r0, r4
   14308:	bl	12c18 <flatcc_builder_default_alloc@@Base+0xf8>
   1430c:	subs	r5, r0, #0
   14310:	beq	1429c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14314:	ldr	r3, [r4, #124]	; 0x7c
   14318:	mov	r1, fp
   1431c:	add	r2, r3, #16
   14320:	str	r2, [r4, #124]	; 0x7c
   14324:	ldr	r2, [r4, #152]	; 0x98
   14328:	mov	r0, r4
   1432c:	str	r2, [r5, #4]
   14330:	ldr	r2, [r8, r6, lsl #2]
   14334:	str	r2, [r5, #12]
   14338:	str	r3, [r8, r6, lsl #2]
   1433c:	mov	r2, r7
   14340:	bl	1419c <flatcc_builder_create_vtable@@Base>
   14344:	cmp	r0, #0
   14348:	str	r0, [r5]
   1434c:	beq	1429c <flatcc_builder_create_cached_vtable@@Base+0x9c>
   14350:	cmp	sl, #0
   14354:	ldrne	r3, [sl, #8]
   14358:	strne	r3, [r5, #8]
   1435c:	bne	14414 <flatcc_builder_create_cached_vtable@@Base+0x214>
   14360:	ldr	r2, [r4, #172]	; 0xac
   14364:	cmp	r2, #0
   14368:	beq	14420 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1436c:	ldr	r3, [r4, #120]	; 0x78
   14370:	add	r3, r7, r3
   14374:	cmp	r2, r3
   14378:	bcs	14420 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1437c:	mov	r0, r4
   14380:	bl	1315c <flatcc_builder_flush_vtable_cache@@Base>
   14384:	b	14414 <flatcc_builder_create_cached_vtable@@Base+0x214>
   14388:	add	r5, r5, #1
   1438c:	b	142bc <flatcc_builder_create_cached_vtable@@Base+0xbc>
   14390:	ldr	r5, [r4, #100]	; 0x64
   14394:	ldr	r0, [r4, #68]	; 0x44
   14398:	add	r5, r5, r9
   1439c:	ldr	r2, [r5, #8]
   143a0:	add	r1, r0, r2
   143a4:	ldrh	r2, [r0, r2]
   143a8:	cmp	r2, r7
   143ac:	bne	143cc <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   143b0:	mov	r2, r7
   143b4:	mov	r0, fp
   143b8:	str	r3, [sp, #12]
   143bc:	bl	11ff4 <memcmp@plt>
   143c0:	ldr	r3, [sp, #12]
   143c4:	cmp	r0, #0
   143c8:	beq	143e0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   143cc:	add	r3, r5, #12
   143d0:	ldr	r9, [r5, #12]
   143d4:	mov	r5, sl
   143d8:	mov	sl, r5
   143dc:	b	142ec <flatcc_builder_create_cached_vtable@@Base+0xec>
   143e0:	ldr	r1, [r5, #4]
   143e4:	ldr	r2, [r4, #152]	; 0x98
   143e8:	cmp	r1, r2
   143ec:	addne	r3, r5, #12
   143f0:	ldrne	r9, [r5, #12]
   143f4:	bne	143d8 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   143f8:	ldr	r2, [sp, #8]
   143fc:	cmp	r3, r2
   14400:	ldrne	r2, [r5, #12]
   14404:	strne	r2, [r3]
   14408:	ldrne	r3, [r8, r6, lsl #2]
   1440c:	strne	r3, [r5, #12]
   14410:	strne	r9, [r8, r6, lsl #2]
   14414:	ldr	r0, [r5]
   14418:	add	sp, sp, #20
   1441c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14420:	mov	r3, #0
   14424:	str	r3, [sp]
   14428:	ldr	r2, [r4, #120]	; 0x78
   1442c:	mov	r3, r7
   14430:	mov	r1, #2
   14434:	mov	r0, r4
   14438:	bl	12c18 <flatcc_builder_default_alloc@@Base+0xf8>
   1443c:	cmp	r0, #0
   14440:	mvneq	r0, #0
   14444:	beq	14418 <flatcc_builder_create_cached_vtable@@Base+0x218>
   14448:	ldr	r3, [r4, #120]	; 0x78
   1444c:	mov	r2, r7
   14450:	str	r3, [r5, #8]
   14454:	add	r3, r7, r3
   14458:	str	r3, [r4, #120]	; 0x78
   1445c:	mov	r1, fp
   14460:	bl	11fe8 <memcpy@plt>
   14464:	b	14414 <flatcc_builder_create_cached_vtable@@Base+0x214>
   14468:	andeq	r6, r1, r6, lsr #17
   1446c:	andeq	r0, r0, r6, asr r1
   14470:	andeq	r6, r1, r0, asr #22
   14474:			; <UNDEFINED> instruction: 0x00016db3

00014478 <flatcc_builder_create_table@@Base>:
   14478:	push	{r4, r5, r6, r7, lr}
   1447c:	sub	sp, sp, #84	; 0x54
   14480:	ldr	r4, [sp, #108]	; 0x6c
   14484:	ldr	lr, [sp, #112]	; 0x70
   14488:	cmp	r4, #0
   1448c:	bge	144a4 <flatcc_builder_create_table@@Base+0x2c>
   14490:	ldr	r3, [pc, #268]	; 145a4 <flatcc_builder_create_table@@Base+0x12c>
   14494:	ldr	r2, [pc, #268]	; 145a8 <flatcc_builder_create_table@@Base+0x130>
   14498:	ldr	r1, [pc, #268]	; 145ac <flatcc_builder_create_table@@Base+0x134>
   1449c:	ldr	r0, [pc, #268]	; 145b0 <flatcc_builder_create_table@@Base+0x138>
   144a0:	bl	1209c <__assert_fail@plt>
   144a4:	tst	lr, #1
   144a8:	ldreq	r3, [pc, #244]	; 145a4 <flatcc_builder_create_table@@Base+0x12c>
   144ac:	ldreq	r2, [pc, #256]	; 145b4 <flatcc_builder_create_table@@Base+0x13c>
   144b0:	ldreq	r1, [pc, #244]	; 145ac <flatcc_builder_create_table@@Base+0x134>
   144b4:	ldreq	r0, [pc, #252]	; 145b8 <flatcc_builder_create_table@@Base+0x140>
   144b8:	beq	144a0 <flatcc_builder_create_table@@Base+0x28>
   144bc:	ldrh	ip, [r0, #128]	; 0x80
   144c0:	cmp	r3, #4
   144c4:	movcc	r3, #4
   144c8:	ldr	r6, [r0, #136]	; 0x88
   144cc:	cmp	ip, r3
   144d0:	mvn	r5, #3
   144d4:	sub	ip, r6, r2
   144d8:	strhcc	r3, [r0, #128]	; 0x80
   144dc:	sub	r3, r3, #1
   144e0:	and	r3, r3, ip
   144e4:	sub	ip, r5, r2
   144e8:	add	ip, ip, r6
   144ec:	sub	ip, ip, r3
   144f0:	sub	lr, lr, #1
   144f4:	sub	lr, ip, lr
   144f8:	str	lr, [sp, #4]
   144fc:	ldr	lr, [sp, #104]	; 0x68
   14500:	sub	ip, r5, ip
   14504:	add	r4, lr, r4, lsl #1
   14508:	cmp	r4, lr
   1450c:	bne	1458c <flatcc_builder_create_table@@Base+0x114>
   14510:	mov	ip, #4
   14514:	cmp	r2, #0
   14518:	str	ip, [sp, #8]
   1451c:	add	lr, sp, ip
   14520:	str	ip, [sp, #20]
   14524:	mov	ip, #1
   14528:	str	ip, [sp, #12]
   1452c:	strne	r2, [sp, #28]
   14530:	addne	ip, r2, #4
   14534:	movne	r2, #2
   14538:	strne	ip, [sp, #8]
   1453c:	strne	r1, [sp, #24]
   14540:	strne	r2, [sp, #12]
   14544:	cmp	r3, #0
   14548:	str	lr, [sp, #16]
   1454c:	beq	1457c <flatcc_builder_create_table@@Base+0x104>
   14550:	ldr	r2, [sp, #8]
   14554:	add	r1, sp, #80	; 0x50
   14558:	add	r2, r2, r3
   1455c:	str	r2, [sp, #8]
   14560:	ldr	r2, [sp, #12]
   14564:	ldr	ip, [pc, #80]	; 145bc <flatcc_builder_create_table@@Base+0x144>
   14568:	add	r2, r2, #1
   1456c:	str	r2, [sp, #12]
   14570:	add	r1, r1, r2, lsl #3
   14574:	str	ip, [r1, #-72]	; 0xffffffb8
   14578:	str	r3, [r1, #-68]	; 0xffffffbc
   1457c:	add	r1, sp, #8
   14580:	bl	12f18 <flatcc_builder_default_alloc@@Base+0x3f8>
   14584:	add	sp, sp, #84	; 0x54
   14588:	pop	{r4, r5, r6, r7, pc}
   1458c:	ldrh	r5, [lr], #2
   14590:	sub	r7, ip, r5
   14594:	ldr	r6, [r1, r5]
   14598:	add	r6, r6, r7
   1459c:	str	r6, [r1, r5]
   145a0:	b	14508 <flatcc_builder_create_table@@Base+0x90>
   145a4:	andeq	r6, r1, pc, lsr #17
   145a8:	ldrdeq	r0, [r0], -r5
   145ac:	andeq	r6, r1, r0, asr #22
   145b0:	andeq	r6, r1, r2, asr #27
   145b4:	ldrdeq	r0, [r0], -fp
   145b8:	ldrdeq	r6, [r1], -r4
   145bc:	andeq	r6, r1, sl, asr r4

000145c0 <flatcc_builder_check_required_field@@Base>:
   145c0:	ldr	r3, [r0, #32]
   145c4:	ldrh	r3, [r3, #14]
   145c8:	cmp	r3, #3
   145cc:	beq	145e8 <flatcc_builder_check_required_field@@Base+0x28>
   145d0:	push	{r4, lr}
   145d4:	ldr	r3, [pc, #52]	; 14610 <flatcc_builder_check_required_field@@Base+0x50>
   145d8:	ldr	r2, [pc, #52]	; 14614 <flatcc_builder_check_required_field@@Base+0x54>
   145dc:	ldr	r1, [pc, #52]	; 14618 <flatcc_builder_check_required_field@@Base+0x58>
   145e0:	ldr	r0, [pc, #52]	; 1461c <flatcc_builder_check_required_field@@Base+0x5c>
   145e4:	bl	1209c <__assert_fail@plt>
   145e8:	ldrh	r3, [r0, #8]
   145ec:	cmp	r3, r1
   145f0:	movls	r0, #0
   145f4:	bls	1460c <flatcc_builder_check_required_field@@Base+0x4c>
   145f8:	ldr	r3, [r0, #4]
   145fc:	lsl	r1, r1, #1
   14600:	ldrh	r0, [r3, r1]
   14604:	adds	r0, r0, #0
   14608:	movne	r0, #1
   1460c:	bx	lr
   14610:	andeq	r6, r1, fp, asr #17
   14614:	strdeq	r0, [r0], -r8
   14618:	andeq	r6, r1, r0, asr #22
   1461c:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>

00014620 <flatcc_builder_check_union_field@@Base>:
   14620:	ldr	r3, [r0, #32]
   14624:	ldrh	r3, [r3, #14]
   14628:	cmp	r3, #3
   1462c:	beq	14648 <flatcc_builder_check_union_field@@Base+0x28>
   14630:	push	{r4, lr}
   14634:	ldr	r3, [pc, #112]	; 146ac <flatcc_builder_check_union_field@@Base+0x8c>
   14638:	ldr	r2, [pc, #112]	; 146b0 <flatcc_builder_check_union_field@@Base+0x90>
   1463c:	ldr	r1, [pc, #112]	; 146b4 <flatcc_builder_check_union_field@@Base+0x94>
   14640:	ldr	r0, [pc, #112]	; 146b8 <flatcc_builder_check_union_field@@Base+0x98>
   14644:	bl	1209c <__assert_fail@plt>
   14648:	cmp	r1, #0
   1464c:	beq	146a4 <flatcc_builder_check_union_field@@Base+0x84>
   14650:	ldrh	r3, [r0, #8]
   14654:	cmp	r3, r1
   14658:	bls	146a4 <flatcc_builder_check_union_field@@Base+0x84>
   1465c:	sub	r1, r1, #-2147483647	; 0x80000001
   14660:	ldr	r3, [r0, #4]
   14664:	lsl	r1, r1, #1
   14668:	ldrh	r2, [r3, r1]!
   1466c:	cmp	r2, #0
   14670:	ldrheq	r0, [r3, #2]
   14674:	beq	14698 <flatcc_builder_check_union_field@@Base+0x78>
   14678:	ldr	r1, [r0, #16]
   1467c:	ldrh	r0, [r3, #2]
   14680:	ldrb	r2, [r1, r2]
   14684:	cmp	r2, #0
   14688:	beq	14698 <flatcc_builder_check_union_field@@Base+0x78>
   1468c:	adds	r0, r0, #0
   14690:	movne	r0, #1
   14694:	bx	lr
   14698:	clz	r0, r0
   1469c:	lsr	r0, r0, #5
   146a0:	b	14694 <flatcc_builder_check_union_field@@Base+0x74>
   146a4:	mov	r0, #0
   146a8:	b	14694 <flatcc_builder_check_union_field@@Base+0x74>
   146ac:	andeq	r6, r1, pc, ror #17
   146b0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   146b4:	andeq	r6, r1, r0, asr #22
   146b8:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>

000146bc <flatcc_builder_check_required@@Base>:
   146bc:	ldr	r3, [r0, #32]
   146c0:	push	{r4, lr}
   146c4:	ldrh	r3, [r3, #14]
   146c8:	cmp	r3, #3
   146cc:	beq	146e4 <flatcc_builder_check_required@@Base+0x28>
   146d0:	ldr	r3, [pc, #84]	; 1472c <flatcc_builder_check_required@@Base+0x70>
   146d4:	ldr	r2, [pc, #84]	; 14730 <flatcc_builder_check_required@@Base+0x74>
   146d8:	ldr	r1, [pc, #84]	; 14734 <flatcc_builder_check_required@@Base+0x78>
   146dc:	ldr	r0, [pc, #84]	; 14738 <flatcc_builder_check_required@@Base+0x7c>
   146e0:	bl	1209c <__assert_fail@plt>
   146e4:	ldrh	r3, [r0, #8]
   146e8:	cmp	r3, r2
   146ec:	subge	r1, r1, #2
   146f0:	movge	ip, #0
   146f4:	bge	1471c <flatcc_builder_check_required@@Base+0x60>
   146f8:	mov	r0, #0
   146fc:	pop	{r4, pc}
   14700:	ldrh	r3, [r1, #2]!
   14704:	ldr	lr, [r0, #4]
   14708:	lsl	r3, r3, #1
   1470c:	ldrh	r3, [lr, r3]
   14710:	cmp	r3, #0
   14714:	beq	146f8 <flatcc_builder_check_required@@Base+0x3c>
   14718:	add	ip, ip, #1
   1471c:	cmp	ip, r2
   14720:	blt	14700 <flatcc_builder_check_required@@Base+0x44>
   14724:	mov	r0, #1
   14728:	pop	{r4, pc}
   1472c:	andeq	r6, r1, r0, lsl r9
   14730:	andeq	r0, r0, r1, lsl r5
   14734:	andeq	r6, r1, r0, asr #22
   14738:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>

0001473c <flatcc_builder_end_table@@Base>:
   1473c:	ldr	r3, [r0, #32]
   14740:	push	{r4, r5, r6, r7, lr}
   14744:	sub	sp, sp, #20
   14748:	ldrh	r3, [r3, #14]
   1474c:	cmp	r3, #3
   14750:	beq	14768 <flatcc_builder_end_table@@Base+0x2c>
   14754:	ldr	r3, [pc, #260]	; 14860 <flatcc_builder_end_table@@Base+0x124>
   14758:	ldr	r2, [pc, #260]	; 14864 <flatcc_builder_end_table@@Base+0x128>
   1475c:	ldr	r1, [pc, #260]	; 14868 <flatcc_builder_end_table@@Base+0x12c>
   14760:	ldr	r0, [pc, #260]	; 1486c <flatcc_builder_end_table@@Base+0x130>
   14764:	bl	1209c <__assert_fail@plt>
   14768:	ldrh	r5, [r0, #8]
   1476c:	ldr	r3, [r0, #20]
   14770:	ldr	r1, [r0, #4]
   14774:	add	r5, r5, #2
   14778:	add	r3, r3, #4
   1477c:	lsl	r5, r5, #1
   14780:	uxth	r2, r3
   14784:	uxth	r5, r5
   14788:	ldr	r3, [r0, #12]
   1478c:	strh	r2, [r1, #-2]
   14790:	strh	r5, [r1, #-4]
   14794:	sub	r6, r1, #4
   14798:	ldr	r1, [pc, #208]	; 14870 <flatcc_builder_end_table@@Base+0x134>
   1479c:	eor	r3, r3, r5
   147a0:	mov	r4, r0
   147a4:	mul	r3, r1, r3
   147a8:	eor	r3, r3, r2
   147ac:	mov	r2, r5
   147b0:	mul	r3, r1, r3
   147b4:	mov	r1, r6
   147b8:	str	r3, [r0, #12]
   147bc:	bl	14200 <flatcc_builder_create_cached_vtable@@Base>
   147c0:	subs	r7, r0, #0
   147c4:	beq	14854 <flatcc_builder_end_table@@Base+0x118>
   147c8:	mov	r2, r5
   147cc:	mov	r1, #0
   147d0:	mov	r0, r6
   147d4:	bl	1206c <memset@plt>
   147d8:	ldr	r3, [r4, #32]
   147dc:	ldr	r1, [r4, #76]	; 0x4c
   147e0:	mov	r0, r4
   147e4:	ldr	r3, [r3, #20]
   147e8:	add	r1, r1, r3
   147ec:	ldrh	r3, [r4, #130]	; 0x82
   147f0:	str	r7, [sp, #8]
   147f4:	ldr	r2, [r4]
   147f8:	sub	r2, r2, r1
   147fc:	asr	r2, r2, #1
   14800:	stm	sp, {r1, r2}
   14804:	ldr	r2, [r4, #20]
   14808:	ldr	r1, [r4, #16]
   1480c:	bl	14478 <flatcc_builder_create_table@@Base>
   14810:	subs	r7, r0, #0
   14814:	beq	14854 <flatcc_builder_end_table@@Base+0x118>
   14818:	ldr	r3, [r4, #32]
   1481c:	mov	r0, r4
   14820:	ldr	r2, [r3, #24]
   14824:	str	r2, [r4, #12]
   14828:	ldrh	r2, [r3, #28]
   1482c:	strh	r2, [r4, #8]
   14830:	ldr	r2, [r4, #52]	; 0x34
   14834:	ldr	r1, [r3, #16]
   14838:	add	r2, r2, r1
   1483c:	str	r2, [r4, #4]
   14840:	ldr	r2, [r4, #76]	; 0x4c
   14844:	ldr	r3, [r3, #20]
   14848:	add	r3, r2, r3
   1484c:	str	r3, [r4]
   14850:	bl	12a14 <_start@@Base+0x4f4>
   14854:	mov	r0, r7
   14858:	add	sp, sp, #20
   1485c:	pop	{r4, r5, r6, r7, pc}
   14860:	andeq	r6, r1, lr, lsr #18
   14864:	andeq	r0, r0, r5, lsr #10
   14868:	andeq	r6, r1, r0, asr #22
   1486c:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   14870:			; <UNDEFINED> instruction: 0x9e3779b1

00014874 <flatcc_builder_create_vector@@Base>:
   14874:	push	{lr}		; (str lr, [sp, #-4]!)
   14878:	sub	sp, sp, #84	; 0x54
   1487c:	ldr	lr, [sp, #92]	; 0x5c
   14880:	ldrh	ip, [sp, #88]	; 0x58
   14884:	cmp	r2, lr
   14888:	bls	148a0 <flatcc_builder_create_vector@@Base+0x2c>
   1488c:	ldr	r3, [pc, #180]	; 14948 <flatcc_builder_create_vector@@Base+0xd4>
   14890:	ldr	r2, [pc, #180]	; 1494c <flatcc_builder_create_vector@@Base+0xd8>
   14894:	ldr	r1, [pc, #180]	; 14950 <flatcc_builder_create_vector@@Base+0xdc>
   14898:	ldr	r0, [pc, #180]	; 14954 <flatcc_builder_create_vector@@Base+0xe0>
   1489c:	bl	1209c <__assert_fail@plt>
   148a0:	ldrh	lr, [r0, #128]	; 0x80
   148a4:	mul	r3, r3, r2
   148a8:	cmp	ip, #4
   148ac:	movcc	ip, #4
   148b0:	str	r2, [sp, #4]
   148b4:	ldr	r2, [r0, #136]	; 0x88
   148b8:	cmp	lr, ip
   148bc:	sub	r2, r2, r3
   148c0:	strhcc	ip, [r0, #128]	; 0x80
   148c4:	sub	ip, ip, #1
   148c8:	and	ip, ip, r2
   148cc:	mov	r2, #4
   148d0:	cmp	r3, #0
   148d4:	str	r2, [sp, #8]
   148d8:	add	lr, sp, r2
   148dc:	str	r2, [sp, #20]
   148e0:	mov	r2, #1
   148e4:	str	r2, [sp, #12]
   148e8:	strne	r3, [sp, #28]
   148ec:	addne	r2, r3, #4
   148f0:	movne	r3, #2
   148f4:	strne	r2, [sp, #8]
   148f8:	strne	r1, [sp, #24]
   148fc:	strne	r3, [sp, #12]
   14900:	cmp	ip, #0
   14904:	str	lr, [sp, #16]
   14908:	beq	14938 <flatcc_builder_create_vector@@Base+0xc4>
   1490c:	ldr	r3, [sp, #8]
   14910:	add	r2, sp, #80	; 0x50
   14914:	add	r3, r3, ip
   14918:	str	r3, [sp, #8]
   1491c:	ldr	r3, [sp, #12]
   14920:	ldr	r1, [pc, #48]	; 14958 <flatcc_builder_create_vector@@Base+0xe4>
   14924:	add	r3, r3, #1
   14928:	str	r3, [sp, #12]
   1492c:	add	r2, r2, r3, lsl #3
   14930:	str	r1, [r2, #-72]	; 0xffffffb8
   14934:	str	ip, [r2, #-68]	; 0xffffffbc
   14938:	add	r1, sp, #8
   1493c:	bl	12f18 <flatcc_builder_default_alloc@@Base+0x3f8>
   14940:	add	sp, sp, #84	; 0x54
   14944:	pop	{pc}		; (ldr pc, [sp], #4)
   14948:	andeq	r6, r1, r7, asr #18
   1494c:	andeq	r0, r0, r5, asr r5
   14950:	andeq	r6, r1, r0, asr #22
   14954:	andeq	r6, r1, sl, lsl #28
   14958:	andeq	r6, r1, sl, asr r4

0001495c <flatcc_builder_end_vector@@Base>:
   1495c:	push	{r0, r1, r2, r4, r5, lr}
   14960:	ldr	r2, [r0, #32]
   14964:	ldrh	r3, [r2, #14]
   14968:	cmp	r3, #4
   1496c:	beq	14984 <flatcc_builder_end_vector@@Base+0x28>
   14970:	ldr	r3, [pc, #76]	; 149c4 <flatcc_builder_end_vector@@Base+0x68>
   14974:	ldr	r2, [pc, #76]	; 149c8 <flatcc_builder_end_vector@@Base+0x6c>
   14978:	ldr	r1, [pc, #76]	; 149cc <flatcc_builder_end_vector@@Base+0x70>
   1497c:	ldr	r0, [pc, #76]	; 149d0 <flatcc_builder_end_vector@@Base+0x74>
   14980:	bl	1209c <__assert_fail@plt>
   14984:	ldr	r3, [r2, #24]
   14988:	mov	r4, r0
   1498c:	str	r3, [sp, #4]
   14990:	ldrh	r3, [r0, #130]	; 0x82
   14994:	str	r3, [sp]
   14998:	ldr	r3, [r2, #16]
   1499c:	ldr	r1, [r0, #16]
   149a0:	ldr	r2, [r2, #20]
   149a4:	bl	14874 <flatcc_builder_create_vector@@Base>
   149a8:	subs	r5, r0, #0
   149ac:	beq	149b8 <flatcc_builder_end_vector@@Base+0x5c>
   149b0:	mov	r0, r4
   149b4:	bl	12a14 <_start@@Base+0x4f4>
   149b8:	mov	r0, r5
   149bc:	add	sp, sp, #12
   149c0:	pop	{r4, r5, pc}
   149c4:	andeq	r6, r1, r4, ror #18
   149c8:	andeq	r0, r0, r8, ror r5
   149cc:	andeq	r6, r1, r0, asr #22
   149d0:	andeq	r6, r1, sl, ror #24

000149d4 <flatcc_builder_vector_count@@Base>:
   149d4:	ldr	r3, [r0, #32]
   149d8:	ldr	r0, [r3, #20]
   149dc:	bx	lr

000149e0 <flatcc_builder_vector_edit@@Base>:
   149e0:	ldr	r0, [r0, #16]
   149e4:	bx	lr

000149e8 <flatcc_builder_create_offset_vector_direct@@Base>:
   149e8:	cmn	r2, #-1073741823	; 0xc0000001
   149ec:	bhi	149f8 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   149f0:	mov	r3, #0
   149f4:	b	12fec <flatcc_builder_default_alloc@@Base+0x4cc>
   149f8:	mov	r0, #0
   149fc:	bx	lr

00014a00 <flatcc_builder_end_offset_vector@@Base>:
   14a00:	ldr	r3, [r0, #32]
   14a04:	push	{r4, r5, r6, lr}
   14a08:	ldrh	r2, [r3, #14]
   14a0c:	cmp	r2, #5
   14a10:	beq	14a28 <flatcc_builder_end_offset_vector@@Base+0x28>
   14a14:	ldr	r3, [pc, #52]	; 14a50 <flatcc_builder_end_offset_vector@@Base+0x50>
   14a18:	ldr	r2, [pc, #52]	; 14a54 <flatcc_builder_end_offset_vector@@Base+0x54>
   14a1c:	ldr	r1, [pc, #52]	; 14a58 <flatcc_builder_end_offset_vector@@Base+0x58>
   14a20:	ldr	r0, [pc, #52]	; 14a5c <flatcc_builder_end_offset_vector@@Base+0x5c>
   14a24:	bl	1209c <__assert_fail@plt>
   14a28:	ldr	r2, [r3, #20]
   14a2c:	ldr	r1, [r0, #16]
   14a30:	mov	r4, r0
   14a34:	bl	149e8 <flatcc_builder_create_offset_vector_direct@@Base>
   14a38:	subs	r5, r0, #0
   14a3c:	beq	14a48 <flatcc_builder_end_offset_vector@@Base+0x48>
   14a40:	mov	r0, r4
   14a44:	bl	12a14 <_start@@Base+0x4f4>
   14a48:	mov	r0, r5
   14a4c:	pop	{r4, r5, r6, pc}
   14a50:	andeq	r6, r1, lr, ror r9
   14a54:	andeq	r0, r0, r8, asr #11
   14a58:	andeq	r6, r1, r0, asr #22
   14a5c:	ldrdeq	r6, [r1], -r3

00014a60 <flatcc_builder_create_offset_vector@@Base>:
   14a60:	push	{r4, r5, r6, lr}
   14a64:	mov	r4, r0
   14a68:	mov	r6, r1
   14a6c:	mov	r5, r2
   14a70:	bl	1403c <flatcc_builder_start_offset_vector@@Base>
   14a74:	cmp	r0, #0
   14a78:	bne	14aa8 <flatcc_builder_create_offset_vector@@Base+0x48>
   14a7c:	mov	r1, r5
   14a80:	mov	r0, r4
   14a84:	bl	13c38 <flatcc_builder_extend_offset_vector@@Base>
   14a88:	cmp	r0, #0
   14a8c:	beq	14aa8 <flatcc_builder_create_offset_vector@@Base+0x48>
   14a90:	lsl	r2, r5, #2
   14a94:	mov	r1, r6
   14a98:	bl	11fe8 <memcpy@plt>
   14a9c:	mov	r0, r4
   14aa0:	pop	{r4, r5, r6, lr}
   14aa4:	b	14a00 <flatcc_builder_end_offset_vector@@Base>
   14aa8:	mov	r0, #0
   14aac:	pop	{r4, r5, r6, pc}

00014ab0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   14ab0:	ldr	r2, [r0, #32]
   14ab4:	mov	r3, r1
   14ab8:	push	{r4, r5, r6, lr}
   14abc:	ldrh	r1, [r2, #14]
   14ac0:	cmp	r1, #5
   14ac4:	beq	14adc <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   14ac8:	ldr	r3, [pc, #64]	; 14b10 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   14acc:	ldr	r2, [pc, #64]	; 14b14 <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   14ad0:	ldr	r1, [pc, #64]	; 14b18 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   14ad4:	ldr	r0, [pc, #64]	; 14b1c <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   14ad8:	bl	1209c <__assert_fail@plt>
   14adc:	ldr	r2, [r2, #20]
   14ae0:	cmn	r2, #-1073741823	; 0xc0000001
   14ae4:	movhi	r5, #0
   14ae8:	bhi	14b08 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14aec:	ldr	r1, [r0, #16]
   14af0:	mov	r4, r0
   14af4:	bl	12fec <flatcc_builder_default_alloc@@Base+0x4cc>
   14af8:	subs	r5, r0, #0
   14afc:	beq	14b08 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14b00:	mov	r0, r4
   14b04:	bl	12a14 <_start@@Base+0x4f4>
   14b08:	mov	r0, r5
   14b0c:	pop	{r4, r5, r6, pc}
   14b10:	muleq	r1, pc, r9	; <UNPREDICTABLE>
   14b14:	ldrdeq	r0, [r0], -r5
   14b18:	andeq	r6, r1, r0, asr #22
   14b1c:	ldrdeq	r6, [r1], -r3

00014b20 <flatcc_builder_offset_vector_edit@@Base>:
   14b20:	ldr	r0, [r0, #16]
   14b24:	bx	lr

00014b28 <flatcc_builder_offset_vector_count@@Base>:
   14b28:	ldr	r3, [r0, #32]
   14b2c:	ldr	r0, [r3, #20]
   14b30:	bx	lr

00014b34 <flatcc_builder_create_union_vector_direct@@Base>:
   14b34:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14b38:	mov	r4, r0
   14b3c:	ldr	r5, [sp, #32]
   14b40:	cmn	r5, #-1073741823	; 0xc0000001
   14b44:	bls	14b60 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   14b48:	mov	r3, #0
   14b4c:	str	r3, [r4]
   14b50:	str	r3, [r4, #4]
   14b54:	mov	r0, r4
   14b58:	add	sp, sp, #8
   14b5c:	pop	{r4, r5, r6, r7, r8, pc}
   14b60:	mov	r7, r1
   14b64:	mov	r8, r2
   14b68:	mov	r1, r3
   14b6c:	mov	r0, r7
   14b70:	mov	r3, r2
   14b74:	mov	r2, r5
   14b78:	bl	12fec <flatcc_builder_default_alloc@@Base+0x4cc>
   14b7c:	subs	r6, r0, #0
   14b80:	beq	14b48 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   14b84:	mvn	r3, #0
   14b88:	str	r3, [sp, #4]
   14b8c:	mov	r3, #1
   14b90:	str	r3, [sp]
   14b94:	mov	r2, r5
   14b98:	mov	r1, r8
   14b9c:	mov	r0, r7
   14ba0:	bl	14874 <flatcc_builder_create_vector@@Base>
   14ba4:	stm	r4, {r0, r6}
   14ba8:	b	14b54 <flatcc_builder_create_union_vector_direct@@Base+0x20>

00014bac <flatcc_builder_create_union_vector@@Base>:
   14bac:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14bb0:	mov	r7, r0
   14bb4:	mov	r0, r1
   14bb8:	mov	r5, r1
   14bbc:	mov	r6, r2
   14bc0:	mov	r8, r3
   14bc4:	bl	1403c <flatcc_builder_start_offset_vector@@Base>
   14bc8:	subs	r4, r0, #0
   14bcc:	beq	14be8 <flatcc_builder_create_union_vector@@Base+0x3c>
   14bd0:	mov	r3, #0
   14bd4:	str	r3, [r7]
   14bd8:	str	r3, [r7, #4]
   14bdc:	mov	r0, r7
   14be0:	add	sp, sp, #16
   14be4:	pop	{r4, r5, r6, r7, r8, pc}
   14be8:	mov	r1, r8
   14bec:	mov	r0, r5
   14bf0:	bl	13c38 <flatcc_builder_extend_offset_vector@@Base>
   14bf4:	cmp	r0, #0
   14bf8:	beq	14bd0 <flatcc_builder_create_union_vector@@Base+0x24>
   14bfc:	mov	r1, r8
   14c00:	mov	r0, r5
   14c04:	bl	129cc <_start@@Base+0x4ac>
   14c08:	subs	r2, r0, #0
   14c0c:	movne	ip, r6
   14c10:	ldrne	r3, [r5, #16]
   14c14:	movne	r1, r4
   14c18:	beq	14bd0 <flatcc_builder_create_union_vector@@Base+0x24>
   14c1c:	cmp	r1, r8
   14c20:	add	ip, ip, #8
   14c24:	bne	14c54 <flatcc_builder_create_union_vector@@Base+0xa8>
   14c28:	str	r1, [sp]
   14c2c:	add	r0, sp, #8
   14c30:	mov	r1, r5
   14c34:	bl	14b34 <flatcc_builder_create_union_vector_direct@@Base>
   14c38:	ldr	r6, [sp, #8]
   14c3c:	ldr	r4, [sp, #12]
   14c40:	mov	r0, r5
   14c44:	bl	12a14 <_start@@Base+0x4f4>
   14c48:	str	r6, [r7]
   14c4c:	str	r4, [r7, #4]
   14c50:	b	14bdc <flatcc_builder_create_union_vector@@Base+0x30>
   14c54:	ldrb	r0, [ip, #-8]
   14c58:	strb	r0, [r2, r1]
   14c5c:	ldr	r0, [ip, #-4]
   14c60:	str	r0, [r3, r1, lsl #2]
   14c64:	add	r1, r1, #1
   14c68:	b	14c1c <flatcc_builder_create_union_vector@@Base+0x70>

00014c6c <flatcc_builder_start_union_vector@@Base>:
   14c6c:	push	{r4, r5, r6, lr}
   14c70:	mov	r1, #4
   14c74:	mov	r5, r0
   14c78:	bl	12c88 <flatcc_builder_default_alloc@@Base+0x168>
   14c7c:	subs	r4, r0, #0
   14c80:	mvnne	r4, #0
   14c84:	bne	14cac <flatcc_builder_start_union_vector@@Base+0x40>
   14c88:	ldr	r3, [r5, #32]
   14c8c:	mov	r2, #8
   14c90:	mvn	r1, #3
   14c94:	str	r2, [r3, #16]
   14c98:	mov	r2, #7
   14c9c:	str	r4, [r3, #20]
   14ca0:	strh	r2, [r3, #14]
   14ca4:	mov	r0, r5
   14ca8:	bl	1294c <_start@@Base+0x42c>
   14cac:	mov	r0, r4
   14cb0:	pop	{r4, r5, r6, pc}

00014cb4 <flatcc_builder_end_union_vector@@Base>:
   14cb4:	ldr	r3, [r1, #32]
   14cb8:	push	{r4, r5, r6, r7, lr}
   14cbc:	sub	sp, sp, #20
   14cc0:	ldrh	r2, [r3, #14]
   14cc4:	cmp	r2, #7
   14cc8:	beq	14ce0 <flatcc_builder_end_union_vector@@Base+0x2c>
   14ccc:	ldr	r3, [pc, #156]	; 14d70 <flatcc_builder_end_union_vector@@Base+0xbc>
   14cd0:	ldr	r2, [pc, #156]	; 14d74 <flatcc_builder_end_union_vector@@Base+0xc0>
   14cd4:	ldr	r1, [pc, #156]	; 14d78 <flatcc_builder_end_union_vector@@Base+0xc4>
   14cd8:	ldr	r0, [pc, #156]	; 14d7c <flatcc_builder_end_union_vector@@Base+0xc8>
   14cdc:	bl	1209c <__assert_fail@plt>
   14ce0:	ldr	r7, [r3, #20]
   14ce4:	mov	r5, r1
   14ce8:	mov	r4, r0
   14cec:	lsl	r6, r7, #2
   14cf0:	add	r1, r6, r7
   14cf4:	mov	r0, r5
   14cf8:	bl	129cc <_start@@Base+0x4ac>
   14cfc:	subs	r3, r0, #0
   14d00:	streq	r3, [r4]
   14d04:	streq	r3, [r4, #4]
   14d08:	addne	r2, r3, r6
   14d0c:	ldrne	r0, [r5, #16]
   14d10:	movne	r1, #0
   14d14:	bne	14d38 <flatcc_builder_end_union_vector@@Base+0x84>
   14d18:	mov	r0, r4
   14d1c:	add	sp, sp, #20
   14d20:	pop	{r4, r5, r6, r7, pc}
   14d24:	ldrb	ip, [r0, #-8]
   14d28:	strb	ip, [r2, r1]
   14d2c:	ldr	ip, [r0, #-4]
   14d30:	str	ip, [r3, r1, lsl #2]
   14d34:	add	r1, r1, #1
   14d38:	cmp	r1, r7
   14d3c:	add	r0, r0, #8
   14d40:	bne	14d24 <flatcc_builder_end_union_vector@@Base+0x70>
   14d44:	str	r1, [sp]
   14d48:	add	r0, sp, #8
   14d4c:	mov	r1, r5
   14d50:	bl	14b34 <flatcc_builder_create_union_vector_direct@@Base>
   14d54:	ldr	r7, [sp, #8]
   14d58:	ldr	r6, [sp, #12]
   14d5c:	mov	r0, r5
   14d60:	bl	12a14 <_start@@Base+0x4f4>
   14d64:	str	r7, [r4]
   14d68:	str	r6, [r4, #4]
   14d6c:	b	14d18 <flatcc_builder_end_union_vector@@Base+0x64>
   14d70:	andeq	r6, r1, fp, asr #19
   14d74:	andeq	r0, r0, r1, asr r6
   14d78:	andeq	r6, r1, r0, asr #22
   14d7c:	andeq	r6, r1, sp, lsl lr

00014d80 <flatcc_builder_union_vector_edit@@Base>:
   14d80:	ldr	r0, [r0, #16]
   14d84:	bx	lr

00014d88 <flatcc_builder_union_vector_count@@Base>:
   14d88:	ldr	r3, [r0, #32]
   14d8c:	ldr	r0, [r3, #20]
   14d90:	bx	lr

00014d94 <flatcc_builder_extend_union_vector@@Base>:
   14d94:	push	{r4, r5, r6, lr}
   14d98:	mvn	r2, #-536870912	; 0xe0000000
   14d9c:	mov	r4, r0
   14da0:	ldr	r0, [r0, #32]
   14da4:	mov	r5, r1
   14da8:	bl	12f98 <flatcc_builder_default_alloc@@Base+0x478>
   14dac:	cmp	r0, #0
   14db0:	bne	14dc4 <flatcc_builder_extend_union_vector@@Base+0x30>
   14db4:	lsl	r1, r5, #3
   14db8:	mov	r0, r4
   14dbc:	pop	{r4, r5, r6, lr}
   14dc0:	b	129cc <_start@@Base+0x4ac>
   14dc4:	mov	r0, #0
   14dc8:	pop	{r4, r5, r6, pc}

00014dcc <flatcc_builder_truncate_union_vector@@Base>:
   14dcc:	ldr	r3, [r0, #32]
   14dd0:	push	{r4, lr}
   14dd4:	ldrh	r2, [r3, #14]
   14dd8:	cmp	r2, #7
   14ddc:	beq	14df4 <flatcc_builder_truncate_union_vector@@Base+0x28>
   14de0:	ldr	r3, [pc, #68]	; 14e2c <flatcc_builder_truncate_union_vector@@Base+0x60>
   14de4:	ldr	r2, [pc, #68]	; 14e30 <flatcc_builder_truncate_union_vector@@Base+0x64>
   14de8:	ldr	r1, [pc, #68]	; 14e34 <flatcc_builder_truncate_union_vector@@Base+0x68>
   14dec:	ldr	r0, [pc, #68]	; 14e38 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   14df0:	bl	1209c <__assert_fail@plt>
   14df4:	ldr	r2, [r3, #20]
   14df8:	cmp	r2, r1
   14dfc:	ldrcc	r3, [pc, #40]	; 14e2c <flatcc_builder_truncate_union_vector@@Base+0x60>
   14e00:	ldrcc	r2, [pc, #52]	; 14e3c <flatcc_builder_truncate_union_vector@@Base+0x70>
   14e04:	ldrcc	r1, [pc, #40]	; 14e34 <flatcc_builder_truncate_union_vector@@Base+0x68>
   14e08:	ldrcc	r0, [pc, #48]	; 14e40 <flatcc_builder_truncate_union_vector@@Base+0x74>
   14e0c:	bcc	14df0 <flatcc_builder_truncate_union_vector@@Base+0x24>
   14e10:	sub	r2, r2, r1
   14e14:	str	r2, [r3, #20]
   14e18:	ldr	r3, [r3, #16]
   14e1c:	mul	r1, r3, r1
   14e20:	bl	12a80 <_start@@Base+0x560>
   14e24:	mov	r0, #0
   14e28:	pop	{r4, pc}
   14e2c:	andeq	r6, r1, fp, ror #19
   14e30:	andeq	r0, r0, r1, lsl #13
   14e34:	andeq	r6, r1, r0, asr #22
   14e38:	andeq	r6, r1, sp, lsl lr
   14e3c:	andeq	r0, r0, r2, lsl #13
   14e40:	andeq	r6, r1, r6, asr sp

00014e44 <flatcc_builder_union_vector_push@@Base>:
   14e44:	push	{r0, r1, r4, lr}
   14e48:	stm	sp, {r1, r2}
   14e4c:	ldr	r2, [r0, #32]
   14e50:	ldrh	r3, [r2, #14]
   14e54:	cmp	r3, #7
   14e58:	beq	14e70 <flatcc_builder_union_vector_push@@Base+0x2c>
   14e5c:	ldr	r3, [pc, #72]	; 14eac <flatcc_builder_union_vector_push@@Base+0x68>
   14e60:	ldr	r2, [pc, #72]	; 14eb0 <flatcc_builder_union_vector_push@@Base+0x6c>
   14e64:	ldr	r1, [pc, #72]	; 14eb4 <flatcc_builder_union_vector_push@@Base+0x70>
   14e68:	ldr	r0, [pc, #72]	; 14eb8 <flatcc_builder_union_vector_push@@Base+0x74>
   14e6c:	bl	1209c <__assert_fail@plt>
   14e70:	ldr	r3, [r2, #20]
   14e74:	cmn	r3, #-536870911	; 0xe0000001
   14e78:	moveq	r3, #0
   14e7c:	beq	14ea0 <flatcc_builder_union_vector_push@@Base+0x5c>
   14e80:	add	r3, r3, #1
   14e84:	mov	r1, #8
   14e88:	str	r3, [r2, #20]
   14e8c:	bl	129cc <_start@@Base+0x4ac>
   14e90:	subs	r3, r0, #0
   14e94:	movne	r4, sp
   14e98:	ldmne	r4, {r0, r1}
   14e9c:	stmne	r3, {r0, r1}
   14ea0:	mov	r0, r3
   14ea4:	add	sp, sp, #8
   14ea8:	pop	{r4, pc}
   14eac:	andeq	r6, r1, r0, lsl sl
   14eb0:	andeq	r0, r0, sp, lsl #13
   14eb4:	andeq	r6, r1, r0, asr #22
   14eb8:	andeq	r6, r1, sp, lsl lr

00014ebc <flatcc_builder_append_union_vector@@Base>:
   14ebc:	push	{r4, r5, r6, lr}
   14ec0:	mov	r4, r0
   14ec4:	ldr	r0, [r0, #32]
   14ec8:	ldrh	r3, [r0, #14]
   14ecc:	cmp	r3, #7
   14ed0:	beq	14ee8 <flatcc_builder_append_union_vector@@Base+0x2c>
   14ed4:	ldr	r3, [pc, #68]	; 14f20 <flatcc_builder_append_union_vector@@Base+0x64>
   14ed8:	ldr	r2, [pc, #68]	; 14f24 <flatcc_builder_append_union_vector@@Base+0x68>
   14edc:	ldr	r1, [pc, #68]	; 14f28 <flatcc_builder_append_union_vector@@Base+0x6c>
   14ee0:	ldr	r0, [pc, #68]	; 14f2c <flatcc_builder_append_union_vector@@Base+0x70>
   14ee4:	bl	1209c <__assert_fail@plt>
   14ee8:	mov	r5, r2
   14eec:	mov	r6, r1
   14ef0:	mvn	r2, #-536870912	; 0xe0000000
   14ef4:	mov	r1, r5
   14ef8:	bl	12f98 <flatcc_builder_default_alloc@@Base+0x478>
   14efc:	cmp	r0, #0
   14f00:	bne	14f18 <flatcc_builder_append_union_vector@@Base+0x5c>
   14f04:	lsl	r2, r5, #3
   14f08:	mov	r1, r6
   14f0c:	mov	r0, r4
   14f10:	pop	{r4, r5, r6, lr}
   14f14:	b	12aa0 <_start@@Base+0x580>
   14f18:	mov	r0, #0
   14f1c:	pop	{r4, r5, r6, pc}
   14f20:	andeq	r6, r1, r1, lsr sl
   14f24:	muleq	r0, ip, r6
   14f28:	andeq	r6, r1, r0, asr #22
   14f2c:	andeq	r6, r1, sp, lsl lr

00014f30 <flatcc_builder_create_string@@Base>:
   14f30:	push	{lr}		; (str lr, [sp, #-4]!)
   14f34:	sub	sp, sp, #84	; 0x54
   14f38:	ldr	r3, [r0, #136]	; 0x88
   14f3c:	mov	ip, #4
   14f40:	cmp	r2, #0
   14f44:	str	ip, [sp, #8]
   14f48:	add	lr, sp, ip
   14f4c:	str	ip, [sp, #20]
   14f50:	sub	r3, r3, r2
   14f54:	mov	ip, #1
   14f58:	str	ip, [sp, #12]
   14f5c:	strne	r2, [sp, #28]
   14f60:	addne	ip, r2, #4
   14f64:	str	r2, [sp, #4]
   14f68:	sub	r3, r3, #1
   14f6c:	movne	r2, #2
   14f70:	strne	ip, [sp, #8]
   14f74:	strne	r2, [sp, #12]
   14f78:	and	r3, r3, #3
   14f7c:	ldr	r2, [sp, #8]
   14f80:	add	r3, r3, #1
   14f84:	add	r2, r2, r3
   14f88:	str	r2, [sp, #8]
   14f8c:	ldr	r2, [sp, #12]
   14f90:	strne	r1, [sp, #24]
   14f94:	add	r2, r2, #1
   14f98:	add	r1, sp, #80	; 0x50
   14f9c:	add	r1, r1, r2, lsl #3
   14fa0:	ldr	ip, [pc, #28]	; 14fc4 <flatcc_builder_create_string@@Base+0x94>
   14fa4:	str	lr, [sp, #16]
   14fa8:	str	r3, [r1, #-68]	; 0xffffffbc
   14fac:	str	ip, [r1, #-72]	; 0xffffffb8
   14fb0:	add	r1, sp, #8
   14fb4:	str	r2, [sp, #12]
   14fb8:	bl	12f18 <flatcc_builder_default_alloc@@Base+0x3f8>
   14fbc:	add	sp, sp, #84	; 0x54
   14fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fc4:	andeq	r6, r1, sl, asr r4

00014fc8 <flatcc_builder_create_string_str@@Base>:
   14fc8:	push	{r4, r5, r6, lr}
   14fcc:	mov	r5, r0
   14fd0:	mov	r0, r1
   14fd4:	mov	r4, r1
   14fd8:	bl	12054 <strlen@plt>
   14fdc:	mov	r1, r4
   14fe0:	mov	r2, r0
   14fe4:	mov	r0, r5
   14fe8:	pop	{r4, r5, r6, lr}
   14fec:	b	14f30 <flatcc_builder_create_string@@Base>

00014ff0 <flatcc_builder_create_string_strn@@Base>:
   14ff0:	push	{r4, r5, r6, lr}
   14ff4:	mov	r4, r1
   14ff8:	mov	r6, r0
   14ffc:	mov	r1, #0
   15000:	mov	r0, r4
   15004:	mov	r5, r2
   15008:	bl	12078 <memchr@plt>
   1500c:	mov	r1, r4
   15010:	cmp	r0, #0
   15014:	subne	r5, r0, r4
   15018:	mov	r2, r5
   1501c:	mov	r0, r6
   15020:	pop	{r4, r5, r6, lr}
   15024:	b	14f30 <flatcc_builder_create_string@@Base>

00015028 <flatcc_builder_end_string@@Base>:
   15028:	ldr	r3, [r0, #32]
   1502c:	push	{r4, r5, r6, lr}
   15030:	ldrh	r2, [r3, #14]
   15034:	cmp	r2, #6
   15038:	beq	15050 <flatcc_builder_end_string@@Base+0x28>
   1503c:	ldr	r3, [pc, #80]	; 15094 <flatcc_builder_end_string@@Base+0x6c>
   15040:	ldr	r2, [pc, #80]	; 15098 <flatcc_builder_end_string@@Base+0x70>
   15044:	ldr	r1, [pc, #80]	; 1509c <flatcc_builder_end_string@@Base+0x74>
   15048:	ldr	r0, [pc, #80]	; 150a0 <flatcc_builder_end_string@@Base+0x78>
   1504c:	bl	1209c <__assert_fail@plt>
   15050:	ldr	r2, [r3, #20]
   15054:	ldr	r3, [r0, #20]
   15058:	mov	r4, r0
   1505c:	cmp	r2, r3
   15060:	ldrne	r3, [pc, #44]	; 15094 <flatcc_builder_end_string@@Base+0x6c>
   15064:	ldrne	r2, [pc, #56]	; 150a4 <flatcc_builder_end_string@@Base+0x7c>
   15068:	ldrne	r1, [pc, #44]	; 1509c <flatcc_builder_end_string@@Base+0x74>
   1506c:	ldrne	r0, [pc, #52]	; 150a8 <flatcc_builder_end_string@@Base+0x80>
   15070:	bne	1504c <flatcc_builder_end_string@@Base+0x24>
   15074:	ldr	r1, [r0, #16]
   15078:	bl	14f30 <flatcc_builder_create_string@@Base>
   1507c:	subs	r5, r0, #0
   15080:	beq	1508c <flatcc_builder_end_string@@Base+0x64>
   15084:	mov	r0, r4
   15088:	bl	12a14 <_start@@Base+0x4f4>
   1508c:	mov	r0, r5
   15090:	pop	{r4, r5, r6, pc}
   15094:	andeq	r6, r1, r4, asr sl
   15098:	andeq	r0, r0, r4, asr #13
   1509c:	andeq	r6, r1, r0, asr #22
   150a0:	andeq	r6, r1, r6, lsl #26
   150a4:	andeq	r0, r0, r5, asr #13
   150a8:	andeq	r6, r1, pc, asr #28

000150ac <flatcc_builder_string_edit@@Base>:
   150ac:	ldr	r0, [r0, #16]
   150b0:	bx	lr

000150b4 <flatcc_builder_string_len@@Base>:
   150b4:	ldr	r3, [r0, #32]
   150b8:	ldr	r0, [r3, #20]
   150bc:	bx	lr

000150c0 <flatcc_builder_table_add@@Base>:
   150c0:	push	{r4, r5, r6, r7, r8, lr}
   150c4:	mov	r4, r0
   150c8:	ldr	r0, [r0, #32]
   150cc:	ldrh	r0, [r0, #14]
   150d0:	cmp	r0, #3
   150d4:	beq	150ec <flatcc_builder_table_add@@Base+0x2c>
   150d8:	ldr	r3, [pc, #232]	; 151c8 <flatcc_builder_table_add@@Base+0x108>
   150dc:	ldr	r2, [pc, #232]	; 151cc <flatcc_builder_table_add@@Base+0x10c>
   150e0:	ldr	r1, [pc, #232]	; 151d0 <flatcc_builder_table_add@@Base+0x110>
   150e4:	ldr	r0, [pc, #232]	; 151d4 <flatcc_builder_table_add@@Base+0x114>
   150e8:	bl	1209c <__assert_fail@plt>
   150ec:	ldr	r0, [pc, #228]	; 151d8 <flatcc_builder_table_add@@Base+0x118>
   150f0:	cmp	r1, r0
   150f4:	ldrhi	r3, [pc, #204]	; 151c8 <flatcc_builder_table_add@@Base+0x108>
   150f8:	ldrhi	r2, [pc, #220]	; 151dc <flatcc_builder_table_add@@Base+0x11c>
   150fc:	ldrhi	r1, [pc, #204]	; 151d0 <flatcc_builder_table_add@@Base+0x110>
   15100:	ldrhi	r0, [pc, #216]	; 151e0 <flatcc_builder_table_add@@Base+0x120>
   15104:	bhi	150e8 <flatcc_builder_table_add@@Base+0x28>
   15108:	ldrh	r0, [r4, #130]	; 0x82
   1510c:	lsl	r7, r1, #1
   15110:	cmp	r0, r3
   15114:	ldr	r0, [r4, #4]
   15118:	strhcc	r3, [r4, #130]	; 0x82
   1511c:	ldrh	r5, [r0, r7]
   15120:	cmp	r5, #0
   15124:	ldrne	r3, [pc, #156]	; 151c8 <flatcc_builder_table_add@@Base+0x108>
   15128:	ldrne	r2, [pc, #180]	; 151e4 <flatcc_builder_table_add@@Base+0x124>
   1512c:	ldrne	r1, [pc, #156]	; 151d0 <flatcc_builder_table_add@@Base+0x110>
   15130:	ldrne	r0, [pc, #176]	; 151e8 <flatcc_builder_table_add@@Base+0x128>
   15134:	bne	150e8 <flatcc_builder_table_add@@Base+0x28>
   15138:	ldr	ip, [r4, #12]
   1513c:	ldr	lr, [pc, #168]	; 151ec <flatcc_builder_table_add@@Base+0x12c>
   15140:	eor	ip, ip, r1
   15144:	ldr	r6, [r4, #20]
   15148:	mul	ip, lr, ip
   1514c:	sub	r0, r3, #1
   15150:	eor	ip, ip, r2
   15154:	rsb	r3, r3, #0
   15158:	add	r0, r0, r6
   1515c:	and	r6, r0, r3
   15160:	mul	ip, lr, ip
   15164:	ldr	r3, [r4, #24]
   15168:	uxth	r8, r1
   1516c:	add	r1, r2, r6
   15170:	cmp	r1, r3
   15174:	str	ip, [r4, #12]
   15178:	str	r1, [r4, #20]
   1517c:	bcs	151a8 <flatcc_builder_table_add@@Base+0xe8>
   15180:	ldr	r3, [r4, #4]
   15184:	add	r2, r6, #4
   15188:	ldr	r0, [r4, #16]
   1518c:	strh	r2, [r3, r7]
   15190:	ldrh	r3, [r4, #8]
   15194:	add	r0, r0, r6
   15198:	cmp	r3, r8
   1519c:	addls	r1, r8, #1
   151a0:	strhls	r1, [r4, #8]
   151a4:	pop	{r4, r5, r6, r7, r8, pc}
   151a8:	ldr	r2, [pc, #64]	; 151f0 <flatcc_builder_table_add@@Base+0x130>
   151ac:	add	r1, r1, #1
   151b0:	mov	r0, r4
   151b4:	bl	1297c <_start@@Base+0x45c>
   151b8:	cmp	r0, #0
   151bc:	beq	15180 <flatcc_builder_table_add@@Base+0xc0>
   151c0:	mov	r0, r5
   151c4:	pop	{r4, r5, r6, r7, r8, pc}
   151c8:	andeq	r6, r1, lr, ror #20
   151cc:	andeq	r0, r0, sp, ror #13
   151d0:	andeq	r6, r1, r0, asr #22
   151d4:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   151d8:	strdeq	r7, [r0], -ip
   151dc:	andeq	r0, r0, lr, ror #13
   151e0:	andeq	r6, r1, r3, ror lr
   151e4:	strdeq	r0, [r0], -r8
   151e8:	andeq	r6, r1, sp, lsr #23
   151ec:			; <UNDEFINED> instruction: 0x9e3779b1
   151f0:	strdeq	pc, [r0], -ip

000151f4 <flatcc_builder_table_edit@@Base>:
   151f4:	ldr	r3, [r0, #32]
   151f8:	ldrh	r3, [r3, #14]
   151fc:	cmp	r3, #3
   15200:	beq	1521c <flatcc_builder_table_edit@@Base+0x28>
   15204:	push	{r4, lr}
   15208:	ldr	r3, [pc, #32]	; 15230 <flatcc_builder_table_edit@@Base+0x3c>
   1520c:	ldr	r2, [pc, #32]	; 15234 <flatcc_builder_table_edit@@Base+0x40>
   15210:	ldr	r1, [pc, #32]	; 15238 <flatcc_builder_table_edit@@Base+0x44>
   15214:	ldr	r0, [pc, #32]	; 1523c <flatcc_builder_table_edit@@Base+0x48>
   15218:	bl	1209c <__assert_fail@plt>
   1521c:	ldr	r3, [r0, #20]
   15220:	ldr	r0, [r0, #16]
   15224:	sub	r1, r3, r1
   15228:	add	r0, r0, r1
   1522c:	bx	lr
   15230:	andeq	r6, r1, r7, lsl #21
   15234:	andeq	r0, r0, r2, lsl #14
   15238:	andeq	r6, r1, r0, asr #22
   1523c:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>

00015240 <flatcc_builder_table_add_copy@@Base>:
   15240:	push	{r4, r5, r6, lr}
   15244:	mov	r4, r3
   15248:	mov	r6, r2
   1524c:	ldrh	r3, [sp, #16]
   15250:	mov	r2, r4
   15254:	bl	150c0 <flatcc_builder_table_add@@Base>
   15258:	subs	r5, r0, #0
   1525c:	beq	1526c <flatcc_builder_table_add_copy@@Base+0x2c>
   15260:	mov	r2, r4
   15264:	mov	r1, r6
   15268:	bl	11fe8 <memcpy@plt>
   1526c:	mov	r0, r5
   15270:	pop	{r4, r5, r6, pc}

00015274 <flatcc_builder_table_add_offset@@Base>:
   15274:	ldr	r3, [r0, #32]
   15278:	push	{r4, r5, r6, r7, r8, lr}
   1527c:	ldrh	r3, [r3, #14]
   15280:	cmp	r3, #3
   15284:	beq	1529c <flatcc_builder_table_add_offset@@Base+0x28>
   15288:	ldr	r3, [pc, #228]	; 15374 <flatcc_builder_table_add_offset@@Base+0x100>
   1528c:	ldr	r2, [pc, #228]	; 15378 <flatcc_builder_table_add_offset@@Base+0x104>
   15290:	ldr	r1, [pc, #228]	; 1537c <flatcc_builder_table_add_offset@@Base+0x108>
   15294:	ldr	r0, [pc, #228]	; 15380 <flatcc_builder_table_add_offset@@Base+0x10c>
   15298:	bl	1209c <__assert_fail@plt>
   1529c:	ldr	r3, [pc, #224]	; 15384 <flatcc_builder_table_add_offset@@Base+0x110>
   152a0:	cmp	r1, r3
   152a4:	ldrhi	r3, [pc, #200]	; 15374 <flatcc_builder_table_add_offset@@Base+0x100>
   152a8:	ldrhi	r2, [pc, #216]	; 15388 <flatcc_builder_table_add_offset@@Base+0x114>
   152ac:	ldrhi	r1, [pc, #200]	; 1537c <flatcc_builder_table_add_offset@@Base+0x108>
   152b0:	ldrhi	r0, [pc, #212]	; 1538c <flatcc_builder_table_add_offset@@Base+0x118>
   152b4:	bhi	15298 <flatcc_builder_table_add_offset@@Base+0x24>
   152b8:	ldr	r3, [r0, #4]
   152bc:	lsl	r7, r1, #1
   152c0:	mov	r4, r0
   152c4:	ldrh	r6, [r3, r7]
   152c8:	cmp	r6, #0
   152cc:	ldrne	r3, [pc, #160]	; 15374 <flatcc_builder_table_add_offset@@Base+0x100>
   152d0:	ldrne	r2, [pc, #184]	; 15390 <flatcc_builder_table_add_offset@@Base+0x11c>
   152d4:	ldrne	r1, [pc, #160]	; 1537c <flatcc_builder_table_add_offset@@Base+0x108>
   152d8:	ldrne	r0, [pc, #180]	; 15394 <flatcc_builder_table_add_offset@@Base+0x120>
   152dc:	bne	15298 <flatcc_builder_table_add_offset@@Base+0x24>
   152e0:	ldr	r3, [r0, #12]
   152e4:	ldr	r2, [pc, #172]	; 15398 <flatcc_builder_table_add_offset@@Base+0x124>
   152e8:	eor	r3, r3, r1
   152ec:	ldr	r8, [r0, #20]
   152f0:	mul	r3, r2, r3
   152f4:	add	r8, r8, #3
   152f8:	eor	r3, r3, #4
   152fc:	bic	r8, r8, #3
   15300:	mul	r3, r2, r3
   15304:	uxth	r5, r1
   15308:	str	r3, [r0, #12]
   1530c:	ldr	r3, [r0, #24]
   15310:	add	r1, r8, #4
   15314:	cmp	r1, r3
   15318:	str	r1, [r0, #20]
   1531c:	bhi	1535c <flatcc_builder_table_add_offset@@Base+0xe8>
   15320:	ldr	r3, [r4, #4]
   15324:	uxth	r2, r8
   15328:	add	r1, r2, #4
   1532c:	strh	r1, [r3, r7]
   15330:	ldrh	r3, [r4, #8]
   15334:	ldr	r0, [r4, #16]
   15338:	cmp	r3, r5
   1533c:	ldr	r3, [r4]
   15340:	addls	r1, r5, #1
   15344:	strhls	r1, [r4, #8]
   15348:	add	r1, r3, #2
   1534c:	str	r1, [r4]
   15350:	add	r0, r0, r8
   15354:	strh	r2, [r3]
   15358:	pop	{r4, r5, r6, r7, r8, pc}
   1535c:	ldr	r2, [pc, #56]	; 1539c <flatcc_builder_table_add_offset@@Base+0x128>
   15360:	bl	1297c <_start@@Base+0x45c>
   15364:	cmp	r0, #0
   15368:	beq	15320 <flatcc_builder_table_add_offset@@Base+0xac>
   1536c:	mov	r0, r6
   15370:	pop	{r4, r5, r6, r7, r8, pc}
   15374:	andeq	r6, r1, r1, lsr #21
   15378:	andeq	r0, r0, r3, lsl r7
   1537c:	andeq	r6, r1, r0, asr #22
   15380:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   15384:	strdeq	r7, [r0], -ip
   15388:	andeq	r0, r0, r4, lsl r7
   1538c:	andeq	r6, r1, r3, ror lr
   15390:	andeq	r0, r0, fp, lsl r7
   15394:	andeq	r6, r1, sp, lsr #23
   15398:			; <UNDEFINED> instruction: 0x9e3779b1
   1539c:	strdeq	pc, [r0], -ip

000153a0 <flatcc_builder_table_add_union@@Base>:
   153a0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   153a4:	add	ip, sp, #8
   153a8:	stmdb	ip, {r2, r3}
   153ac:	ldr	r3, [r0, #32]
   153b0:	ldrb	r5, [sp]
   153b4:	ldr	r4, [sp, #4]
   153b8:	ldrh	r3, [r3, #14]
   153bc:	cmp	r3, #3
   153c0:	beq	153d8 <flatcc_builder_table_add_union@@Base+0x38>
   153c4:	ldr	r3, [pc, #156]	; 15468 <flatcc_builder_table_add_union@@Base+0xc8>
   153c8:	ldr	r2, [pc, #156]	; 1546c <flatcc_builder_table_add_union@@Base+0xcc>
   153cc:	ldr	r1, [pc, #156]	; 15470 <flatcc_builder_table_add_union@@Base+0xd0>
   153d0:	ldr	r0, [pc, #156]	; 15474 <flatcc_builder_table_add_union@@Base+0xd4>
   153d4:	bl	1209c <__assert_fail@plt>
   153d8:	cmp	r5, #0
   153dc:	mov	r6, r0
   153e0:	mov	r7, r1
   153e4:	bne	15404 <flatcc_builder_table_add_union@@Base+0x64>
   153e8:	cmp	r4, #0
   153ec:	beq	1542c <flatcc_builder_table_add_union@@Base+0x8c>
   153f0:	ldr	r3, [pc, #112]	; 15468 <flatcc_builder_table_add_union@@Base+0xc8>
   153f4:	ldr	r2, [pc, #124]	; 15478 <flatcc_builder_table_add_union@@Base+0xd8>
   153f8:	ldr	r1, [pc, #112]	; 15470 <flatcc_builder_table_add_union@@Base+0xd0>
   153fc:	ldr	r0, [pc, #120]	; 1547c <flatcc_builder_table_add_union@@Base+0xdc>
   15400:	b	153d4 <flatcc_builder_table_add_union@@Base+0x34>
   15404:	cmp	r4, #0
   15408:	beq	1542c <flatcc_builder_table_add_union@@Base+0x8c>
   1540c:	bl	15274 <flatcc_builder_table_add_offset@@Base>
   15410:	cmp	r0, #0
   15414:	strne	r4, [r0]
   15418:	ldreq	r3, [pc, #72]	; 15468 <flatcc_builder_table_add_union@@Base+0xc8>
   1541c:	ldreq	r2, [pc, #92]	; 15480 <flatcc_builder_table_add_union@@Base+0xe0>
   15420:	ldreq	r1, [pc, #72]	; 15470 <flatcc_builder_table_add_union@@Base+0xd0>
   15424:	ldreq	r0, [pc, #88]	; 15484 <flatcc_builder_table_add_union@@Base+0xe4>
   15428:	beq	153d4 <flatcc_builder_table_add_union@@Base+0x34>
   1542c:	mov	r3, #1
   15430:	mov	r2, r3
   15434:	sub	r1, r7, #1
   15438:	mov	r0, r6
   1543c:	bl	150c0 <flatcc_builder_table_add@@Base>
   15440:	cmp	r0, #0
   15444:	ldreq	r3, [pc, #28]	; 15468 <flatcc_builder_table_add_union@@Base+0xc8>
   15448:	ldreq	r2, [pc, #56]	; 15488 <flatcc_builder_table_add_union@@Base+0xe8>
   1544c:	ldreq	r1, [pc, #28]	; 15470 <flatcc_builder_table_add_union@@Base+0xd0>
   15450:	ldreq	r0, [pc, #52]	; 1548c <flatcc_builder_table_add_union@@Base+0xec>
   15454:	beq	153d4 <flatcc_builder_table_add_union@@Base+0x34>
   15458:	strb	r5, [r0]
   1545c:	mov	r0, #0
   15460:	add	sp, sp, #12
   15464:	pop	{r4, r5, r6, r7, pc}
   15468:	andeq	r6, r1, r1, asr #21
   1546c:	andeq	r0, r0, lr, ror #11
   15470:	andeq	r6, r1, r0, asr #22
   15474:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   15478:	andeq	r0, r0, pc, ror #11
   1547c:			; <UNDEFINED> instruction: 0x00016eb7
   15480:	strdeq	r0, [r0], -r2
   15484:	ldrdeq	r6, [r1], -r9
   15488:	strdeq	r0, [r0], -r6
   1548c:	andeq	r6, r1, r3, ror #29

00015490 <flatcc_builder_table_add_union_vector@@Base>:
   15490:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15494:	mov	r7, r1
   15498:	add	r1, sp, #8
   1549c:	stmdb	r1, {r2, r3}
   154a0:	ldr	r3, [r0, #32]
   154a4:	ldm	sp, {r4, r5}
   154a8:	ldrh	r3, [r3, #14]
   154ac:	cmp	r3, #3
   154b0:	beq	154c8 <flatcc_builder_table_add_union_vector@@Base+0x38>
   154b4:	ldr	r3, [pc, #176]	; 1556c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   154b8:	ldr	r1, [pc, #176]	; 15570 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   154bc:	ldr	r0, [pc, #176]	; 15574 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   154c0:	mov	r2, #1536	; 0x600
   154c4:	bl	1209c <__assert_fail@plt>
   154c8:	clz	r3, r5
   154cc:	clz	r2, r4
   154d0:	lsr	r3, r3, #5
   154d4:	lsr	r2, r2, #5
   154d8:	cmp	r2, r3
   154dc:	beq	15508 <flatcc_builder_table_add_union_vector@@Base+0x78>
   154e0:	adds	r4, r4, #0
   154e4:	movne	r4, #1
   154e8:	cmp	r4, r3
   154ec:	mvnne	r0, #0
   154f0:	bne	15564 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   154f4:	ldr	r3, [pc, #112]	; 1556c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   154f8:	ldr	r2, [pc, #120]	; 15578 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   154fc:	ldr	r1, [pc, #108]	; 15570 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15500:	ldr	r0, [pc, #116]	; 1557c <flatcc_builder_table_add_union_vector@@Base+0xec>
   15504:	b	154c4 <flatcc_builder_table_add_union_vector@@Base+0x34>
   15508:	cmp	r4, #0
   1550c:	moveq	r0, r4
   15510:	beq	15564 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   15514:	sub	r1, r7, #1
   15518:	mov	r6, r0
   1551c:	bl	15274 <flatcc_builder_table_add_offset@@Base>
   15520:	cmp	r0, #0
   15524:	bne	1553c <flatcc_builder_table_add_union_vector@@Base+0xac>
   15528:	ldr	r3, [pc, #60]	; 1556c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1552c:	ldr	r2, [pc, #76]	; 15580 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   15530:	ldr	r1, [pc, #56]	; 15570 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15534:	ldr	r0, [pc, #72]	; 15584 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   15538:	b	154c4 <flatcc_builder_table_add_union_vector@@Base+0x34>
   1553c:	str	r4, [r0]
   15540:	mov	r1, r7
   15544:	mov	r0, r6
   15548:	bl	15274 <flatcc_builder_table_add_offset@@Base>
   1554c:	cmp	r0, #0
   15550:	strne	r5, [r0]
   15554:	movne	r0, #0
   15558:	ldreq	r3, [pc, #12]	; 1556c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1555c:	ldreq	r2, [pc, #36]	; 15588 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   15560:	beq	15530 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   15564:	add	sp, sp, #12
   15568:	pop	{r4, r5, r6, r7, pc}
   1556c:	andeq	r6, r1, r0, ror #21
   15570:	andeq	r6, r1, r0, asr #22
   15574:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   15578:	andeq	r0, r0, r1, lsl #12
   1557c:	andeq	r6, r1, pc, ror #29
   15580:	andeq	r0, r0, r4, lsl #12
   15584:	ldrdeq	r6, [r1], -r9
   15588:	andeq	r0, r0, r8, lsl #12

0001558c <flatcc_builder_push_buffer_alignment@@Base>:
   1558c:	mov	r3, r0
   15590:	mov	r2, #4
   15594:	ldrh	r0, [r0, #128]	; 0x80
   15598:	strh	r2, [r3, #128]	; 0x80
   1559c:	bx	lr

000155a0 <flatcc_builder_pop_buffer_alignment@@Base>:
   155a0:	ldrh	r3, [r0, #128]	; 0x80
   155a4:	cmp	r3, r1
   155a8:	strhcc	r1, [r0, #128]	; 0x80
   155ac:	bx	lr

000155b0 <flatcc_builder_get_buffer_alignment@@Base>:
   155b0:	ldrh	r0, [r0, #128]	; 0x80
   155b4:	bx	lr

000155b8 <flatcc_builder_set_vtable_clustering@@Base>:
   155b8:	clz	r1, r1
   155bc:	lsr	r1, r1, #5
   155c0:	str	r1, [r0, #180]	; 0xb4
   155c4:	bx	lr

000155c8 <flatcc_builder_set_block_align@@Base>:
   155c8:	strh	r1, [r0, #132]	; 0x84
   155cc:	bx	lr

000155d0 <flatcc_builder_get_level@@Base>:
   155d0:	ldr	r0, [r0, #156]	; 0x9c
   155d4:	bx	lr

000155d8 <flatcc_builder_set_max_level@@Base>:
   155d8:	ldr	r3, [r0, #160]	; 0xa0
   155dc:	str	r1, [r0, #176]	; 0xb0
   155e0:	cmp	r1, r3
   155e4:	strgt	r1, [r0, #160]	; 0xa0
   155e8:	bx	lr

000155ec <flatcc_builder_get_buffer_size@@Base>:
   155ec:	ldr	r2, [r0, #140]	; 0x8c
   155f0:	ldr	r0, [r0, #136]	; 0x88
   155f4:	sub	r0, r2, r0
   155f8:	bx	lr

000155fc <flatcc_builder_get_buffer_start@@Base>:
   155fc:	ldr	r0, [r0, #136]	; 0x88
   15600:	bx	lr

00015604 <flatcc_builder_get_buffer_end@@Base>:
   15604:	ldr	r0, [r0, #140]	; 0x8c
   15608:	bx	lr

0001560c <flatcc_builder_set_vtable_cache_limit@@Base>:
   1560c:	str	r1, [r0, #172]	; 0xac
   15610:	bx	lr

00015614 <flatcc_builder_set_identifier@@Base>:
   15614:	ldr	r3, [pc, #16]	; 1562c <flatcc_builder_set_identifier@@Base+0x18>
   15618:	cmp	r1, #0
   1561c:	moveq	r1, r3
   15620:	ldr	r3, [r1]
   15624:	str	r3, [r0, #168]	; 0xa8
   15628:	bx	lr
   1562c:	andeq	r6, r1, sl, asr r4

00015630 <flatcc_builder_get_type@@Base>:
   15630:	ldr	r0, [r0, #32]
   15634:	cmp	r0, #0
   15638:	ldrhne	r0, [r0, #14]
   1563c:	bx	lr

00015640 <flatcc_builder_get_type_at@@Base>:
   15640:	cmp	r1, #0
   15644:	ble	1566c <flatcc_builder_get_type_at@@Base+0x2c>
   15648:	ldr	r3, [r0, #156]	; 0x9c
   1564c:	cmp	r1, r3
   15650:	bgt	1566c <flatcc_builder_get_type_at@@Base+0x2c>
   15654:	sub	r1, r1, r3
   15658:	mov	r2, #36	; 0x24
   1565c:	ldr	r3, [r0, #32]
   15660:	mla	r1, r2, r1, r3
   15664:	ldrh	r0, [r1, #14]
   15668:	bx	lr
   1566c:	mov	r0, #0
   15670:	bx	lr

00015674 <flatcc_builder_get_direct_buffer@@Base>:
   15674:	ldr	r3, [r0, #184]	; 0xb8
   15678:	cmp	r3, #0
   1567c:	beq	156a4 <flatcc_builder_get_direct_buffer@@Base+0x30>
   15680:	ldr	r2, [r0, #188]	; 0xbc
   15684:	ldr	r3, [r0, #192]	; 0xc0
   15688:	cmp	r2, r3
   1568c:	bne	156a4 <flatcc_builder_get_direct_buffer@@Base+0x30>
   15690:	cmp	r1, #0
   15694:	ldrne	r3, [r0, #212]	; 0xd4
   15698:	ldr	r0, [r0, #196]	; 0xc4
   1569c:	strne	r3, [r1]
   156a0:	bx	lr
   156a4:	mov	r0, #0
   156a8:	cmp	r1, #0
   156ac:	strne	r0, [r1]
   156b0:	moveq	r0, r1
   156b4:	bx	lr

000156b8 <flatcc_builder_copy_buffer@@Base>:
   156b8:	ldr	r3, [r0, #184]	; 0xb8
   156bc:	cmp	r3, #0
   156c0:	beq	156ec <flatcc_builder_copy_buffer@@Base+0x34>
   156c4:	push	{r4, lr}
   156c8:	add	r0, r0, #188	; 0xbc
   156cc:	bl	15cac <flatcc_emitter_copy_buffer@@Base>
   156d0:	cmp	r0, #0
   156d4:	popne	{r4, pc}
   156d8:	ldr	r3, [pc, #20]	; 156f4 <flatcc_builder_copy_buffer@@Base+0x3c>
   156dc:	ldr	r2, [pc, #20]	; 156f8 <flatcc_builder_copy_buffer@@Base+0x40>
   156e0:	ldr	r1, [pc, #20]	; 156fc <flatcc_builder_copy_buffer@@Base+0x44>
   156e4:	ldr	r0, [pc, #20]	; 15700 <flatcc_builder_copy_buffer@@Base+0x48>
   156e8:	bl	1209c <__assert_fail@plt>
   156ec:	mov	r0, r3
   156f0:	bx	lr
   156f4:	andeq	r6, r1, r6, lsl #22
   156f8:	andeq	r0, r0, r6, lsl #15
   156fc:	andeq	r6, r1, r0, asr #22
   15700:	andeq	r6, r1, r7, asr #6

00015704 <flatcc_builder_finalize_buffer@@Base>:
   15704:	push	{r4, r5, r6, lr}
   15708:	cmp	r1, #0
   1570c:	ldr	r4, [r0, #140]	; 0x8c
   15710:	ldr	r2, [r0, #136]	; 0x88
   15714:	mov	r5, r0
   15718:	sub	r4, r4, r2
   1571c:	strne	r4, [r1]
   15720:	mov	r0, r4
   15724:	bl	12030 <malloc@plt>
   15728:	subs	r6, r0, #0
   1572c:	bne	15744 <flatcc_builder_finalize_buffer@@Base+0x40>
   15730:	ldr	r3, [pc, #52]	; 1576c <flatcc_builder_finalize_buffer@@Base+0x68>
   15734:	ldr	r2, [pc, #52]	; 15770 <flatcc_builder_finalize_buffer@@Base+0x6c>
   15738:	ldr	r1, [pc, #52]	; 15774 <flatcc_builder_finalize_buffer@@Base+0x70>
   1573c:	ldr	r0, [pc, #52]	; 15778 <flatcc_builder_finalize_buffer@@Base+0x74>
   15740:	bl	1209c <__assert_fail@plt>
   15744:	mov	r2, r4
   15748:	mov	r1, r6
   1574c:	mov	r0, r5
   15750:	bl	156b8 <flatcc_builder_copy_buffer@@Base>
   15754:	cmp	r0, #0
   15758:	ldreq	r3, [pc, #12]	; 1576c <flatcc_builder_finalize_buffer@@Base+0x68>
   1575c:	ldreq	r2, [pc, #24]	; 1577c <flatcc_builder_finalize_buffer@@Base+0x78>
   15760:	beq	15738 <flatcc_builder_finalize_buffer@@Base+0x34>
   15764:	mov	r0, r6
   15768:	pop	{r4, r5, r6, pc}
   1576c:	andeq	r6, r1, r1, lsr #22
   15770:	muleq	r0, r8, r7
   15774:	andeq	r6, r1, r0, asr #22
   15778:	andeq	r6, r1, sp, lsr #23
   1577c:	muleq	r0, ip, r7

00015780 <flatcc_builder_finalize_aligned_buffer@@Base>:
   15780:	push	{r4, r5, r6, r7, r8, lr}
   15784:	mov	r6, r0
   15788:	ldr	r4, [r0, #140]	; 0x8c
   1578c:	ldr	r2, [r0, #136]	; 0x88
   15790:	ldrh	r0, [r0, #128]	; 0x80
   15794:	subs	r7, r1, #0
   15798:	sub	r2, r4, r2
   1579c:	sub	r4, r0, #1
   157a0:	strne	r2, [r7]
   157a4:	add	r4, r4, r2
   157a8:	rsb	r2, r0, #0
   157ac:	and	r4, r4, r2
   157b0:	mov	r1, r4
   157b4:	bl	12ad0 <_start@@Base+0x5b0>
   157b8:	subs	r5, r0, #0
   157bc:	beq	157e4 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   157c0:	mov	r2, r4
   157c4:	mov	r1, r5
   157c8:	mov	r0, r6
   157cc:	bl	156b8 <flatcc_builder_copy_buffer@@Base>
   157d0:	subs	r4, r0, #0
   157d4:	bne	157e4 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   157d8:	mov	r0, r5
   157dc:	bl	11fdc <free@plt>
   157e0:	mov	r5, r4
   157e4:	cmp	r7, #0
   157e8:	clz	r3, r5
   157ec:	lsr	r3, r3, #5
   157f0:	moveq	r3, #0
   157f4:	cmp	r3, #0
   157f8:	movne	r3, #0
   157fc:	strne	r3, [r7]
   15800:	mov	r0, r5
   15804:	pop	{r4, r5, r6, r7, r8, pc}

00015808 <flatcc_builder_aligned_alloc@@Base>:
   15808:	b	12ad0 <_start@@Base+0x5b0>

0001580c <flatcc_builder_aligned_free@@Base>:
   1580c:	b	11fdc <free@plt>

00015810 <flatcc_builder_get_emit_context@@Base>:
   15810:	ldr	r0, [r0, #36]	; 0x24
   15814:	bx	lr

00015818 <flatcc_emitter_recycle_page@@Base>:
   15818:	ldr	r3, [r0]
   1581c:	cmp	r3, r1
   15820:	beq	15864 <flatcc_emitter_recycle_page@@Base+0x4c>
   15824:	ldr	r2, [r0, #4]
   15828:	cmp	r1, r2
   1582c:	beq	15864 <flatcc_emitter_recycle_page@@Base+0x4c>
   15830:	ldr	r2, [r1, #2944]	; 0xb80
   15834:	ldr	r0, [r1, #2948]	; 0xb84
   15838:	str	r0, [r2, #2948]	; 0xb84
   1583c:	ldr	r0, [r1, #2948]	; 0xb84
   15840:	str	r2, [r0, #2944]	; 0xb80
   15844:	ldr	r2, [r3, #2948]	; 0xb84
   15848:	str	r3, [r1, #2944]	; 0xb80
   1584c:	str	r2, [r1, #2948]	; 0xb84
   15850:	str	r1, [r2, #2944]	; 0xb80
   15854:	ldr	r3, [r1, #2944]	; 0xb80
   15858:	mov	r0, #0
   1585c:	str	r1, [r3, #2948]	; 0xb84
   15860:	bx	lr
   15864:	mvn	r0, #0
   15868:	bx	lr

0001586c <flatcc_emitter_reset@@Base>:
   1586c:	ldr	r3, [r0]
   15870:	cmp	r3, #0
   15874:	bxeq	lr
   15878:	add	r2, r3, #1472	; 0x5c0
   1587c:	push	{r4, lr}
   15880:	mov	r4, r0
   15884:	str	r2, [r0, #8]
   15888:	str	r2, [r0, #16]
   1588c:	mov	r2, #1472	; 0x5c0
   15890:	str	r2, [r0, #12]
   15894:	str	r2, [r0, #20]
   15898:	sub	r2, r2, #2944	; 0xb80
   1589c:	str	r3, [r0, #4]
   158a0:	str	r2, [r3, #2952]	; 0xb88
   158a4:	ldr	r3, [r0, #32]
   158a8:	cmp	r3, #0
   158ac:	ldr	r3, [r0, #24]
   158b0:	streq	r3, [r0, #32]
   158b4:	ldr	r2, [r0, #32]
   158b8:	lsr	r3, r3, #2
   158bc:	add	r2, r2, r2, lsl #1
   158c0:	add	r3, r3, r2, lsr #2
   158c4:	str	r3, [r0, #32]
   158c8:	mov	r3, #0
   158cc:	str	r3, [r0, #24]
   158d0:	ldr	r2, [r4, #32]
   158d4:	ldr	r3, [r4, #28]
   158d8:	cmp	r3, r2, lsl #1
   158dc:	popls	{r4, pc}
   158e0:	ldr	r3, [r4, #4]
   158e4:	ldr	r2, [r4]
   158e8:	ldr	r0, [r3, #2944]	; 0xb80
   158ec:	cmp	r0, r2
   158f0:	bne	158f8 <flatcc_emitter_reset@@Base+0x8c>
   158f4:	pop	{r4, pc}
   158f8:	ldr	r2, [r0, #2944]	; 0xb80
   158fc:	str	r2, [r3, #2944]	; 0xb80
   15900:	ldr	r2, [r0, #2944]	; 0xb80
   15904:	str	r3, [r2, #2948]	; 0xb84
   15908:	bl	11fdc <free@plt>
   1590c:	ldr	r3, [r4, #28]
   15910:	sub	r3, r3, #2944	; 0xb80
   15914:	str	r3, [r4, #28]
   15918:	b	158d0 <flatcc_emitter_reset@@Base+0x64>

0001591c <flatcc_emitter_clear@@Base>:
   1591c:	ldr	r3, [r0]
   15920:	cmp	r3, #0
   15924:	bxeq	lr
   15928:	ldr	r2, [r3, #2948]	; 0xb84
   1592c:	push	{r4, r5, r6, lr}
   15930:	mov	r4, r0
   15934:	mov	r1, #0
   15938:	str	r1, [r2, #2944]	; 0xb80
   1593c:	ldr	r5, [r3, #2944]	; 0xb80
   15940:	cmp	r5, #0
   15944:	bne	15964 <flatcc_emitter_clear@@Base+0x48>
   15948:	mov	r0, r3
   1594c:	bl	11fdc <free@plt>
   15950:	mov	r1, r5
   15954:	mov	r0, r4
   15958:	mov	r2, #36	; 0x24
   1595c:	pop	{r4, r5, r6, lr}
   15960:	b	1206c <memset@plt>
   15964:	ldr	r0, [r5, #2948]	; 0xb84
   15968:	bl	11fdc <free@plt>
   1596c:	mov	r3, r5
   15970:	b	1593c <flatcc_emitter_clear@@Base+0x20>

00015974 <flatcc_emitter@@Base>:
   15974:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15978:	mov	r4, r0
   1597c:	ldr	r0, [sp, #48]	; 0x30
   15980:	ldr	ip, [r4, #24]
   15984:	cmp	r3, #0
   15988:	add	ip, ip, r0
   1598c:	str	ip, [r4, #24]
   15990:	bge	15b40 <flatcc_emitter@@Base+0x1cc>
   15994:	ldr	ip, [r4, #12]
   15998:	cmp	r0, ip
   1599c:	bhi	159e4 <flatcc_emitter@@Base+0x70>
   159a0:	ldr	r3, [r4, #8]
   159a4:	sub	r3, r3, r0
   159a8:	sub	r0, ip, r0
   159ac:	str	r3, [r4, #8]
   159b0:	str	r0, [r4, #12]
   159b4:	mov	r4, r1
   159b8:	mov	r5, r2
   159bc:	cmp	r5, #0
   159c0:	add	r4, r4, #8
   159c4:	beq	159fc <flatcc_emitter@@Base+0x88>
   159c8:	ldmdb	r4, {r1, r2}
   159cc:	mov	r0, r3
   159d0:	bl	11fe8 <memcpy@plt>
   159d4:	ldr	r2, [r4, #-4]
   159d8:	sub	r5, r5, #1
   159dc:	add	r3, r0, r2
   159e0:	b	159bc <flatcc_emitter@@Base+0x48>
   159e4:	ldr	sl, [pc, #696]	; 15ca4 <flatcc_emitter@@Base+0x330>
   159e8:	add	r5, r1, r2, lsl #3
   159ec:	sub	r6, r2, #1
   159f0:	mov	r9, #2944	; 0xb80
   159f4:	cmn	r6, #1
   159f8:	bne	15a04 <flatcc_emitter@@Base+0x90>
   159fc:	mov	r0, #0
   15a00:	b	15aa8 <flatcc_emitter@@Base+0x134>
   15a04:	ldr	r7, [r5, #-4]
   15a08:	ldr	fp, [r5, #-8]
   15a0c:	mov	r8, #1472	; 0x5c0
   15a10:	add	fp, fp, r7
   15a14:	cmp	r7, #0
   15a18:	subeq	r5, r5, #8
   15a1c:	subeq	r6, r6, #1
   15a20:	beq	159f4 <flatcc_emitter@@Base+0x80>
   15a24:	ldr	r3, [r4, #12]
   15a28:	cmp	r3, r7
   15a2c:	bcs	15b10 <flatcc_emitter@@Base+0x19c>
   15a30:	cmp	r3, #0
   15a34:	movne	r2, r3
   15a38:	bne	15b14 <flatcc_emitter@@Base+0x1a0>
   15a3c:	ldr	r3, [r4]
   15a40:	cmp	r3, #0
   15a44:	beq	15a8c <flatcc_emitter@@Base+0x118>
   15a48:	ldr	r2, [r3, #2948]	; 0xb84
   15a4c:	ldr	r1, [r4, #4]
   15a50:	cmp	r2, r1
   15a54:	beq	15a8c <flatcc_emitter@@Base+0x118>
   15a58:	ldr	r3, [r3, #2952]	; 0xb88
   15a5c:	sub	r3, r3, #2944	; 0xb80
   15a60:	str	r3, [r2, #2952]	; 0xb88
   15a64:	str	r2, [r4]
   15a68:	ldr	r3, [r4]
   15a6c:	str	r9, [r4, #12]
   15a70:	add	r2, r3, #2944	; 0xb80
   15a74:	str	r2, [r4, #8]
   15a78:	ldr	r2, [r3, #2944]	; 0xb80
   15a7c:	ldr	r2, [r2, #2952]	; 0xb88
   15a80:	sub	r2, r2, #2944	; 0xb80
   15a84:	str	r2, [r3, #2952]	; 0xb88
   15a88:	b	15a14 <flatcc_emitter@@Base+0xa0>
   15a8c:	mov	r0, sl
   15a90:	str	r3, [sp, #4]
   15a94:	bl	12030 <malloc@plt>
   15a98:	ldr	r3, [sp, #4]
   15a9c:	cmp	r0, #0
   15aa0:	bne	15ab0 <flatcc_emitter@@Base+0x13c>
   15aa4:	mvn	r0, #0
   15aa8:	add	sp, sp, #12
   15aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ab0:	ldr	r2, [r4, #28]
   15ab4:	cmp	r3, #0
   15ab8:	add	r2, r2, #2944	; 0xb80
   15abc:	str	r2, [r4, #28]
   15ac0:	beq	15ae0 <flatcc_emitter@@Base+0x16c>
   15ac4:	ldr	r2, [r4, #4]
   15ac8:	str	r3, [r0, #2944]	; 0xb80
   15acc:	str	r2, [r0, #2948]	; 0xb84
   15ad0:	str	r0, [r3, #2948]	; 0xb84
   15ad4:	str	r0, [r2, #2944]	; 0xb80
   15ad8:	str	r0, [r4]
   15adc:	b	15a68 <flatcc_emitter@@Base+0xf4>
   15ae0:	add	r3, r0, #1472	; 0x5c0
   15ae4:	str	r3, [r4, #8]
   15ae8:	str	r3, [r4, #16]
   15aec:	ldr	r3, [pc, #436]	; 15ca8 <flatcc_emitter@@Base+0x334>
   15af0:	str	r0, [r4]
   15af4:	str	r0, [r4, #4]
   15af8:	str	r0, [r0, #2944]	; 0xb80
   15afc:	str	r0, [r0, #2948]	; 0xb84
   15b00:	str	r8, [r4, #12]
   15b04:	str	r8, [r4, #20]
   15b08:	str	r3, [r0, #2952]	; 0xb88
   15b0c:	b	15a14 <flatcc_emitter@@Base+0xa0>
   15b10:	mov	r2, r7
   15b14:	ldr	r0, [r4, #8]
   15b18:	rsb	r1, r2, #0
   15b1c:	add	r0, r0, r1
   15b20:	sub	r3, r3, r2
   15b24:	add	fp, fp, r1
   15b28:	str	r0, [r4, #8]
   15b2c:	str	r3, [r4, #12]
   15b30:	mov	r1, fp
   15b34:	sub	r7, r7, r2
   15b38:	bl	11fe8 <memcpy@plt>
   15b3c:	b	15a14 <flatcc_emitter@@Base+0xa0>
   15b40:	ldr	ip, [r4, #20]
   15b44:	cmp	r0, ip
   15b48:	bls	15b84 <flatcc_emitter@@Base+0x210>
   15b4c:	ldr	sl, [pc, #336]	; 15ca4 <flatcc_emitter@@Base+0x330>
   15b50:	mov	r6, r2
   15b54:	add	r5, r1, #8
   15b58:	mov	r9, #2944	; 0xb80
   15b5c:	cmp	r6, #0
   15b60:	beq	159fc <flatcc_emitter@@Base+0x88>
   15b64:	ldr	r7, [r5, #-4]
   15b68:	ldr	fp, [r5, #-8]
   15b6c:	mov	r8, #1472	; 0x5c0
   15b70:	cmp	r7, #0
   15b74:	bne	15b9c <flatcc_emitter@@Base+0x228>
   15b78:	sub	r6, r6, #1
   15b7c:	add	r5, r5, #8
   15b80:	b	15b5c <flatcc_emitter@@Base+0x1e8>
   15b84:	ldr	r3, [r4, #16]
   15b88:	add	lr, r3, r0
   15b8c:	sub	r0, ip, r0
   15b90:	str	lr, [r4, #16]
   15b94:	str	r0, [r4, #20]
   15b98:	b	159b4 <flatcc_emitter@@Base+0x40>
   15b9c:	ldr	r3, [r4, #20]
   15ba0:	cmp	r3, r7
   15ba4:	bcs	15c64 <flatcc_emitter@@Base+0x2f0>
   15ba8:	cmp	r3, #0
   15bac:	bne	15c68 <flatcc_emitter@@Base+0x2f4>
   15bb0:	ldr	r3, [r4, #4]
   15bb4:	cmp	r3, #0
   15bb8:	beq	15bd0 <flatcc_emitter@@Base+0x25c>
   15bbc:	ldr	r2, [r3, #2944]	; 0xb80
   15bc0:	ldr	r1, [r4]
   15bc4:	cmp	r2, r1
   15bc8:	strne	r2, [r4, #4]
   15bcc:	bne	15c14 <flatcc_emitter@@Base+0x2a0>
   15bd0:	mov	r0, sl
   15bd4:	str	r3, [sp, #4]
   15bd8:	bl	12030 <malloc@plt>
   15bdc:	cmp	r0, #0
   15be0:	beq	15aa4 <flatcc_emitter@@Base+0x130>
   15be4:	ldr	r2, [r4, #28]
   15be8:	ldr	r3, [sp, #4]
   15bec:	add	r2, r2, #2944	; 0xb80
   15bf0:	cmp	r3, #0
   15bf4:	str	r2, [r4, #28]
   15bf8:	beq	15c34 <flatcc_emitter@@Base+0x2c0>
   15bfc:	ldr	r2, [r4]
   15c00:	str	r3, [r0, #2948]	; 0xb84
   15c04:	str	r2, [r0, #2944]	; 0xb80
   15c08:	str	r0, [r2, #2948]	; 0xb84
   15c0c:	str	r0, [r3, #2944]	; 0xb80
   15c10:	str	r0, [r4, #4]
   15c14:	ldr	r3, [r4, #4]
   15c18:	str	r9, [r4, #20]
   15c1c:	str	r3, [r4, #16]
   15c20:	ldr	r2, [r3, #2948]	; 0xb84
   15c24:	ldr	r2, [r2, #2952]	; 0xb88
   15c28:	add	r2, r2, #2944	; 0xb80
   15c2c:	str	r2, [r3, #2952]	; 0xb88
   15c30:	b	15b70 <flatcc_emitter@@Base+0x1fc>
   15c34:	add	r3, r0, #1472	; 0x5c0
   15c38:	str	r3, [r4, #8]
   15c3c:	str	r3, [r4, #16]
   15c40:	ldr	r3, [pc, #96]	; 15ca8 <flatcc_emitter@@Base+0x334>
   15c44:	str	r0, [r4]
   15c48:	str	r0, [r4, #4]
   15c4c:	str	r0, [r0, #2944]	; 0xb80
   15c50:	str	r0, [r0, #2948]	; 0xb84
   15c54:	str	r8, [r4, #12]
   15c58:	str	r8, [r4, #20]
   15c5c:	str	r3, [r0, #2952]	; 0xb88
   15c60:	b	15b70 <flatcc_emitter@@Base+0x1fc>
   15c64:	mov	r3, r7
   15c68:	mov	r2, r3
   15c6c:	mov	r1, fp
   15c70:	ldr	r0, [r4, #16]
   15c74:	str	r3, [sp, #4]
   15c78:	bl	11fe8 <memcpy@plt>
   15c7c:	ldr	r3, [sp, #4]
   15c80:	ldr	r2, [r4, #16]
   15c84:	sub	r7, r7, r3
   15c88:	add	r2, r2, r3
   15c8c:	str	r2, [r4, #16]
   15c90:	ldr	r2, [r4, #20]
   15c94:	add	fp, fp, r3
   15c98:	sub	r3, r2, r3
   15c9c:	str	r3, [r4, #20]
   15ca0:	b	15b70 <flatcc_emitter@@Base+0x1fc>
   15ca4:	andeq	r0, r0, ip, lsl #23
   15ca8:			; <UNDEFINED> instruction: 0xfffffa40

00015cac <flatcc_emitter_copy_buffer@@Base>:
   15cac:	push	{r4, r5, r6, lr}
   15cb0:	mov	r4, r0
   15cb4:	ldr	r0, [r0, #24]
   15cb8:	cmp	r0, r2
   15cbc:	movhi	r3, #0
   15cc0:	bhi	15d34 <flatcc_emitter_copy_buffer@@Base+0x88>
   15cc4:	ldr	r2, [r4]
   15cc8:	cmp	r2, #0
   15ccc:	moveq	r3, r2
   15cd0:	beq	15d34 <flatcc_emitter_copy_buffer@@Base+0x88>
   15cd4:	mov	r3, r1
   15cd8:	ldr	r1, [r4, #4]
   15cdc:	cmp	r2, r1
   15ce0:	moveq	r2, r0
   15ce4:	ldr	r1, [r4, #8]
   15ce8:	beq	15d28 <flatcc_emitter_copy_buffer@@Base+0x7c>
   15cec:	ldr	r5, [r4, #12]
   15cf0:	mov	r0, r3
   15cf4:	rsb	r5, r5, #2944	; 0xb80
   15cf8:	mov	r2, r5
   15cfc:	bl	11fe8 <memcpy@plt>
   15d00:	ldr	r2, [r4]
   15d04:	mov	r6, #2944	; 0xb80
   15d08:	add	r3, r0, r5
   15d0c:	ldr	r5, [r2, #2944]	; 0xb80
   15d10:	ldr	r2, [r4, #4]
   15d14:	cmp	r5, r2
   15d18:	bne	15d3c <flatcc_emitter_copy_buffer@@Base+0x90>
   15d1c:	ldr	r2, [r4, #20]
   15d20:	mov	r1, r5
   15d24:	rsb	r2, r2, #2944	; 0xb80
   15d28:	mov	r0, r3
   15d2c:	bl	11fe8 <memcpy@plt>
   15d30:	mov	r3, r0
   15d34:	mov	r0, r3
   15d38:	pop	{r4, r5, r6, pc}
   15d3c:	mov	r1, r5
   15d40:	mov	r0, r3
   15d44:	mov	r2, r6
   15d48:	bl	11fe8 <memcpy@plt>
   15d4c:	ldr	r5, [r5, #2944]	; 0xb80
   15d50:	add	r3, r0, #2944	; 0xb80
   15d54:	b	15d10 <flatcc_emitter_copy_buffer@@Base+0x64>
   15d58:	subs	r2, r1, #1
   15d5c:	bxeq	lr
   15d60:	bcc	15f38 <flatcc_emitter_copy_buffer@@Base+0x28c>
   15d64:	cmp	r0, r1
   15d68:	bls	15f1c <flatcc_emitter_copy_buffer@@Base+0x270>
   15d6c:	tst	r1, r2
   15d70:	beq	15f28 <flatcc_emitter_copy_buffer@@Base+0x27c>
   15d74:	clz	r3, r0
   15d78:	clz	r2, r1
   15d7c:	sub	r3, r2, r3
   15d80:	rsbs	r3, r3, #31
   15d84:	addne	r3, r3, r3, lsl #1
   15d88:	mov	r2, #0
   15d8c:	addne	pc, pc, r3, lsl #2
   15d90:	nop			; (mov r0, r0)
   15d94:	cmp	r0, r1, lsl #31
   15d98:	adc	r2, r2, r2
   15d9c:	subcs	r0, r0, r1, lsl #31
   15da0:	cmp	r0, r1, lsl #30
   15da4:	adc	r2, r2, r2
   15da8:	subcs	r0, r0, r1, lsl #30
   15dac:	cmp	r0, r1, lsl #29
   15db0:	adc	r2, r2, r2
   15db4:	subcs	r0, r0, r1, lsl #29
   15db8:	cmp	r0, r1, lsl #28
   15dbc:	adc	r2, r2, r2
   15dc0:	subcs	r0, r0, r1, lsl #28
   15dc4:	cmp	r0, r1, lsl #27
   15dc8:	adc	r2, r2, r2
   15dcc:	subcs	r0, r0, r1, lsl #27
   15dd0:	cmp	r0, r1, lsl #26
   15dd4:	adc	r2, r2, r2
   15dd8:	subcs	r0, r0, r1, lsl #26
   15ddc:	cmp	r0, r1, lsl #25
   15de0:	adc	r2, r2, r2
   15de4:	subcs	r0, r0, r1, lsl #25
   15de8:	cmp	r0, r1, lsl #24
   15dec:	adc	r2, r2, r2
   15df0:	subcs	r0, r0, r1, lsl #24
   15df4:	cmp	r0, r1, lsl #23
   15df8:	adc	r2, r2, r2
   15dfc:	subcs	r0, r0, r1, lsl #23
   15e00:	cmp	r0, r1, lsl #22
   15e04:	adc	r2, r2, r2
   15e08:	subcs	r0, r0, r1, lsl #22
   15e0c:	cmp	r0, r1, lsl #21
   15e10:	adc	r2, r2, r2
   15e14:	subcs	r0, r0, r1, lsl #21
   15e18:	cmp	r0, r1, lsl #20
   15e1c:	adc	r2, r2, r2
   15e20:	subcs	r0, r0, r1, lsl #20
   15e24:	cmp	r0, r1, lsl #19
   15e28:	adc	r2, r2, r2
   15e2c:	subcs	r0, r0, r1, lsl #19
   15e30:	cmp	r0, r1, lsl #18
   15e34:	adc	r2, r2, r2
   15e38:	subcs	r0, r0, r1, lsl #18
   15e3c:	cmp	r0, r1, lsl #17
   15e40:	adc	r2, r2, r2
   15e44:	subcs	r0, r0, r1, lsl #17
   15e48:	cmp	r0, r1, lsl #16
   15e4c:	adc	r2, r2, r2
   15e50:	subcs	r0, r0, r1, lsl #16
   15e54:	cmp	r0, r1, lsl #15
   15e58:	adc	r2, r2, r2
   15e5c:	subcs	r0, r0, r1, lsl #15
   15e60:	cmp	r0, r1, lsl #14
   15e64:	adc	r2, r2, r2
   15e68:	subcs	r0, r0, r1, lsl #14
   15e6c:	cmp	r0, r1, lsl #13
   15e70:	adc	r2, r2, r2
   15e74:	subcs	r0, r0, r1, lsl #13
   15e78:	cmp	r0, r1, lsl #12
   15e7c:	adc	r2, r2, r2
   15e80:	subcs	r0, r0, r1, lsl #12
   15e84:	cmp	r0, r1, lsl #11
   15e88:	adc	r2, r2, r2
   15e8c:	subcs	r0, r0, r1, lsl #11
   15e90:	cmp	r0, r1, lsl #10
   15e94:	adc	r2, r2, r2
   15e98:	subcs	r0, r0, r1, lsl #10
   15e9c:	cmp	r0, r1, lsl #9
   15ea0:	adc	r2, r2, r2
   15ea4:	subcs	r0, r0, r1, lsl #9
   15ea8:	cmp	r0, r1, lsl #8
   15eac:	adc	r2, r2, r2
   15eb0:	subcs	r0, r0, r1, lsl #8
   15eb4:	cmp	r0, r1, lsl #7
   15eb8:	adc	r2, r2, r2
   15ebc:	subcs	r0, r0, r1, lsl #7
   15ec0:	cmp	r0, r1, lsl #6
   15ec4:	adc	r2, r2, r2
   15ec8:	subcs	r0, r0, r1, lsl #6
   15ecc:	cmp	r0, r1, lsl #5
   15ed0:	adc	r2, r2, r2
   15ed4:	subcs	r0, r0, r1, lsl #5
   15ed8:	cmp	r0, r1, lsl #4
   15edc:	adc	r2, r2, r2
   15ee0:	subcs	r0, r0, r1, lsl #4
   15ee4:	cmp	r0, r1, lsl #3
   15ee8:	adc	r2, r2, r2
   15eec:	subcs	r0, r0, r1, lsl #3
   15ef0:	cmp	r0, r1, lsl #2
   15ef4:	adc	r2, r2, r2
   15ef8:	subcs	r0, r0, r1, lsl #2
   15efc:	cmp	r0, r1, lsl #1
   15f00:	adc	r2, r2, r2
   15f04:	subcs	r0, r0, r1, lsl #1
   15f08:	cmp	r0, r1
   15f0c:	adc	r2, r2, r2
   15f10:	subcs	r0, r0, r1
   15f14:	mov	r0, r2
   15f18:	bx	lr
   15f1c:	moveq	r0, #1
   15f20:	movne	r0, #0
   15f24:	bx	lr
   15f28:	clz	r2, r1
   15f2c:	rsb	r2, r2, #31
   15f30:	lsr	r0, r0, r2
   15f34:	bx	lr
   15f38:	cmp	r0, #0
   15f3c:	mvnne	r0, #0
   15f40:	b	15f64 <flatcc_emitter_copy_buffer@@Base+0x2b8>
   15f44:	cmp	r1, #0
   15f48:	beq	15f38 <flatcc_emitter_copy_buffer@@Base+0x28c>
   15f4c:	push	{r0, r1, lr}
   15f50:	bl	15d58 <flatcc_emitter_copy_buffer@@Base+0xac>
   15f54:	pop	{r1, r2, lr}
   15f58:	mul	r3, r2, r0
   15f5c:	sub	r1, r1, r3
   15f60:	bx	lr
   15f64:	push	{r1, lr}
   15f68:	mov	r0, #8
   15f6c:	bl	11fac <raise@plt>
   15f70:	pop	{r1, pc}

00015f74 <__libc_csu_init@@Base>:
   15f74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f78:	mov	r7, r0
   15f7c:	ldr	r6, [pc, #72]	; 15fcc <__libc_csu_init@@Base+0x58>
   15f80:	ldr	r5, [pc, #72]	; 15fd0 <__libc_csu_init@@Base+0x5c>
   15f84:	add	r6, pc, r6
   15f88:	add	r5, pc, r5
   15f8c:	sub	r6, r6, r5
   15f90:	mov	r8, r1
   15f94:	mov	r9, r2
   15f98:	bl	11f8c <raise@plt-0x20>
   15f9c:	asrs	r6, r6, #2
   15fa0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15fa4:	mov	r4, #0
   15fa8:	add	r4, r4, #1
   15fac:	ldr	r3, [r5], #4
   15fb0:	mov	r2, r9
   15fb4:	mov	r1, r8
   15fb8:	mov	r0, r7
   15fbc:	blx	r3
   15fc0:	cmp	r6, r4
   15fc4:	bne	15fa8 <__libc_csu_init@@Base+0x34>
   15fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15fcc:	andeq	r1, r1, r4, lsl #31
   15fd0:	andeq	r1, r1, ip, ror pc

00015fd4 <__libc_csu_fini@@Base>:
   15fd4:	bx	lr

Disassembly of section .fini:

00015fd8 <.fini>:
   15fd8:	push	{r3, lr}
   15fdc:	pop	{r3, pc}
