
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00011608 <.init>:
   11608:	push	{r3, lr}
   1160c:	bl	11a78 <__assert_fail@plt+0x48>
   11610:	pop	{r3, pc}

Disassembly of section .plt:

00011614 <calloc@plt-0x14>:
   11614:	push	{lr}		; (str lr, [sp, #-4]!)
   11618:	ldr	lr, [pc, #4]	; 11624 <calloc@plt-0x4>
   1161c:	add	lr, pc, lr
   11620:	ldr	pc, [lr, #8]!
   11624:	ldrdeq	r3, [r2], -ip

00011628 <calloc@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #143360	; 0x23000
   11630:	ldr	pc, [ip, #2524]!	; 0x9dc

00011634 <fputs_unlocked@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #143360	; 0x23000
   1163c:	ldr	pc, [ip, #2516]!	; 0x9d4

00011640 <raise@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #143360	; 0x23000
   11648:	ldr	pc, [ip, #2508]!	; 0x9cc

0001164c <__gmpz_scan1@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #143360	; 0x23000
   11654:	ldr	pc, [ip, #2500]!	; 0x9c4

00011658 <iconv_close@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #143360	; 0x23000
   11660:	ldr	pc, [ip, #2492]!	; 0x9bc

00011664 <iconv@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #143360	; 0x23000
   1166c:	ldr	pc, [ip, #2484]!	; 0x9b4

00011670 <strcmp@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #143360	; 0x23000
   11678:	ldr	pc, [ip, #2476]!	; 0x9ac

0001167c <fflush@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #143360	; 0x23000
   11684:	ldr	pc, [ip, #2468]!	; 0x9a4

00011688 <__gmpz_sub_ui@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #143360	; 0x23000
   11690:	ldr	pc, [ip, #2460]!	; 0x99c

00011694 <__gmpz_clears@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #143360	; 0x23000
   1169c:	ldr	pc, [ip, #2452]!	; 0x994

000116a0 <wcwidth@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #143360	; 0x23000
   116a8:	ldr	pc, [ip, #2444]!	; 0x98c

000116ac <memmove@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #143360	; 0x23000
   116b4:	ldr	pc, [ip, #2436]!	; 0x984

000116b8 <__gmpz_set_ui@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #143360	; 0x23000
   116c0:	ldr	pc, [ip, #2428]!	; 0x97c

000116c4 <free@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #143360	; 0x23000
   116cc:	ldr	pc, [ip, #2420]!	; 0x974

000116d0 <_exit@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #143360	; 0x23000
   116d8:	ldr	pc, [ip, #2412]!	; 0x96c

000116dc <memcpy@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #143360	; 0x23000
   116e4:	ldr	pc, [ip, #2404]!	; 0x964

000116e8 <__gmpz_sub@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #143360	; 0x23000
   116f0:	ldr	pc, [ip, #2396]!	; 0x95c

000116f4 <mbsinit@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #143360	; 0x23000
   116fc:	ldr	pc, [ip, #2388]!	; 0x954

00011700 <memcmp@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #143360	; 0x23000
   11708:	ldr	pc, [ip, #2380]!	; 0x94c

0001170c <dcgettext@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #143360	; 0x23000
   11714:	ldr	pc, [ip, #2372]!	; 0x944

00011718 <__gmpz_powm@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #143360	; 0x23000
   11720:	ldr	pc, [ip, #2364]!	; 0x93c

00011724 <strdup@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #143360	; 0x23000
   1172c:	ldr	pc, [ip, #2356]!	; 0x934

00011730 <__gmpz_divexact@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #143360	; 0x23000
   11738:	ldr	pc, [ip, #2348]!	; 0x92c

0001173c <__gmpz_inits@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #143360	; 0x23000
   11744:	ldr	pc, [ip, #2340]!	; 0x924

00011748 <__gmpz_set@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #143360	; 0x23000
   11750:	ldr	pc, [ip, #2332]!	; 0x91c

00011754 <realloc@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #143360	; 0x23000
   1175c:	ldr	pc, [ip, #2324]!	; 0x914

00011760 <__gmpz_mul@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #143360	; 0x23000
   11768:	ldr	pc, [ip, #2316]!	; 0x90c

0001176c <__gmpz_tdiv_q_ui@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #143360	; 0x23000
   11774:	ldr	pc, [ip, #2308]!	; 0x904

00011778 <textdomain@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #143360	; 0x23000
   11780:	ldr	pc, [ip, #2300]!	; 0x8fc

00011784 <iswcntrl@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #143360	; 0x23000
   1178c:	ldr	pc, [ip, #2292]!	; 0x8f4

00011790 <__gmpz_out_str@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #143360	; 0x23000
   11798:	ldr	pc, [ip, #2284]!	; 0x8ec

0001179c <fflush_unlocked@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #143360	; 0x23000
   117a4:	ldr	pc, [ip, #2276]!	; 0x8e4

000117a8 <iswprint@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #143360	; 0x23000
   117b0:	ldr	pc, [ip, #2268]!	; 0x8dc

000117b4 <fwrite@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #143360	; 0x23000
   117bc:	ldr	pc, [ip, #2260]!	; 0x8d4

000117c0 <lseek64@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #143360	; 0x23000
   117c8:	ldr	pc, [ip, #2252]!	; 0x8cc

000117cc <__gmpz_fdiv_q_2exp@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #143360	; 0x23000
   117d4:	ldr	pc, [ip, #2244]!	; 0x8c4

000117d8 <__ctype_get_mb_cur_max@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #143360	; 0x23000
   117e0:	ldr	pc, [ip, #2236]!	; 0x8bc

000117e4 <__fpending@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #143360	; 0x23000
   117ec:	ldr	pc, [ip, #2228]!	; 0x8b4

000117f0 <mbrtowc@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #143360	; 0x23000
   117f8:	ldr	pc, [ip, #2220]!	; 0x8ac

000117fc <error@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #143360	; 0x23000
   11804:	ldr	pc, [ip, #2212]!	; 0x8a4

00011808 <malloc@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #143360	; 0x23000
   11810:	ldr	pc, [ip, #2204]!	; 0x89c

00011814 <iconv_open@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #143360	; 0x23000
   1181c:	ldr	pc, [ip, #2196]!	; 0x894

00011820 <__libc_start_main@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #143360	; 0x23000
   11828:	ldr	pc, [ip, #2188]!	; 0x88c

0001182c <__freading@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #143360	; 0x23000
   11834:	ldr	pc, [ip, #2180]!	; 0x884

00011838 <__gmpz_init_set_si@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #143360	; 0x23000
   11840:	ldr	pc, [ip, #2172]!	; 0x87c

00011844 <__gmpz_add_ui@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #143360	; 0x23000
   1184c:	ldr	pc, [ip, #2164]!	; 0x874

00011850 <__gmon_start__@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #143360	; 0x23000
   11858:	ldr	pc, [ip, #2156]!	; 0x86c

0001185c <getopt_long@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #143360	; 0x23000
   11864:	ldr	pc, [ip, #2148]!	; 0x864

00011868 <__ctype_b_loc@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #143360	; 0x23000
   11870:	ldr	pc, [ip, #2140]!	; 0x85c

00011874 <exit@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #143360	; 0x23000
   1187c:	ldr	pc, [ip, #2132]!	; 0x854

00011880 <iswspace@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #143360	; 0x23000
   11888:	ldr	pc, [ip, #2124]!	; 0x84c

0001188c <strlen@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #143360	; 0x23000
   11894:	ldr	pc, [ip, #2116]!	; 0x844

00011898 <strchr@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #143360	; 0x23000
   118a0:	ldr	pc, [ip, #2108]!	; 0x83c

000118a4 <__gmpz_divisible_ui_p@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #143360	; 0x23000
   118ac:	ldr	pc, [ip, #2100]!	; 0x834

000118b0 <__gmpz_clear@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #143360	; 0x23000
   118b8:	ldr	pc, [ip, #2092]!	; 0x82c

000118bc <__errno_location@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #143360	; 0x23000
   118c4:	ldr	pc, [ip, #2084]!	; 0x824

000118c8 <iswalnum@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #143360	; 0x23000
   118d0:	ldr	pc, [ip, #2076]!	; 0x81c

000118d4 <__sprintf_chk@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #143360	; 0x23000
   118dc:	ldr	pc, [ip, #2068]!	; 0x814

000118e0 <__cxa_atexit@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #143360	; 0x23000
   118e8:	ldr	pc, [ip, #2060]!	; 0x80c

000118ec <memset@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #143360	; 0x23000
   118f4:	ldr	pc, [ip, #2052]!	; 0x804

000118f8 <__gmpz_tdiv_q_2exp@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #143360	; 0x23000
   11900:	ldr	pc, [ip, #2044]!	; 0x7fc

00011904 <__printf_chk@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #143360	; 0x23000
   1190c:	ldr	pc, [ip, #2036]!	; 0x7f4

00011910 <write@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #143360	; 0x23000
   11918:	ldr	pc, [ip, #2028]!	; 0x7ec

0001191c <fileno@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #143360	; 0x23000
   11924:	ldr	pc, [ip, #2020]!	; 0x7e4

00011928 <__fprintf_chk@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #143360	; 0x23000
   11930:	ldr	pc, [ip, #2012]!	; 0x7dc

00011934 <memchr@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #143360	; 0x23000
   1193c:	ldr	pc, [ip, #2004]!	; 0x7d4

00011940 <fclose@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #143360	; 0x23000
   11948:	ldr	pc, [ip, #1996]!	; 0x7cc

0001194c <strnlen@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #143360	; 0x23000
   11954:	ldr	pc, [ip, #1988]!	; 0x7c4

00011958 <fseeko64@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #143360	; 0x23000
   11960:	ldr	pc, [ip, #1980]!	; 0x7bc

00011964 <__gmpz_mod@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #143360	; 0x23000
   1196c:	ldr	pc, [ip, #1972]!	; 0x7b4

00011970 <__gmpz_init_set_ui@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #143360	; 0x23000
   11978:	ldr	pc, [ip, #1964]!	; 0x7ac

0001197c <__gmpz_cmp@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #143360	; 0x23000
   11984:	ldr	pc, [ip, #1956]!	; 0x7a4

00011988 <__uflow@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #143360	; 0x23000
   11990:	ldr	pc, [ip, #1948]!	; 0x79c

00011994 <__overflow@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #143360	; 0x23000
   1199c:	ldr	pc, [ip, #1940]!	; 0x794

000119a0 <setlocale@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #143360	; 0x23000
   119a8:	ldr	pc, [ip, #1932]!	; 0x78c

000119ac <strrchr@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #143360	; 0x23000
   119b4:	ldr	pc, [ip, #1924]!	; 0x784

000119b8 <nl_langinfo@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #143360	; 0x23000
   119c0:	ldr	pc, [ip, #1916]!	; 0x77c

000119c4 <__gmpz_gcd@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #143360	; 0x23000
   119cc:	ldr	pc, [ip, #1908]!	; 0x774

000119d0 <__gmpz_init_set_str@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #143360	; 0x23000
   119d8:	ldr	pc, [ip, #1900]!	; 0x76c

000119dc <bindtextdomain@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #143360	; 0x23000
   119e4:	ldr	pc, [ip, #1892]!	; 0x764

000119e8 <__gmpz_cmp_ui@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #143360	; 0x23000
   119f0:	ldr	pc, [ip, #1884]!	; 0x75c

000119f4 <__gmpz_init@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #143360	; 0x23000
   119fc:	ldr	pc, [ip, #1876]!	; 0x754

00011a00 <__gmpz_powm_ui@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #143360	; 0x23000
   11a08:	ldr	pc, [ip, #1868]!	; 0x74c

00011a0c <isatty@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #143360	; 0x23000
   11a14:	ldr	pc, [ip, #1860]!	; 0x744

00011a18 <strncmp@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #143360	; 0x23000
   11a20:	ldr	pc, [ip, #1852]!	; 0x73c

00011a24 <abort@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #143360	; 0x23000
   11a2c:	ldr	pc, [ip, #1844]!	; 0x734

00011a30 <__assert_fail@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #143360	; 0x23000
   11a38:	ldr	pc, [ip, #1836]!	; 0x72c

Disassembly of section .text:

00011a3c <.text>:
   11a3c:	mov	fp, #0
   11a40:	mov	lr, #0
   11a44:	pop	{r1}		; (ldr r1, [sp], #4)
   11a48:	mov	r2, sp
   11a4c:	push	{r2}		; (str r2, [sp, #-4]!)
   11a50:	push	{r0}		; (str r0, [sp, #-4]!)
   11a54:	ldr	ip, [pc, #16]	; 11a6c <__assert_fail@plt+0x3c>
   11a58:	push	{ip}		; (str ip, [sp, #-4]!)
   11a5c:	ldr	r0, [pc, #12]	; 11a70 <__assert_fail@plt+0x40>
   11a60:	ldr	r3, [pc, #12]	; 11a74 <__assert_fail@plt+0x44>
   11a64:	bl	11820 <__libc_start_main@plt>
   11a68:	bl	11a24 <abort@plt>
   11a6c:	andeq	r0, r2, r8, ror #13
   11a70:	andeq	r1, r1, r4, ror sp
   11a74:	andeq	r0, r2, r8, lsl #13
   11a78:	ldr	r3, [pc, #20]	; 11a94 <__assert_fail@plt+0x64>
   11a7c:	ldr	r2, [pc, #20]	; 11a98 <__assert_fail@plt+0x68>
   11a80:	add	r3, pc, r3
   11a84:	ldr	r2, [r3, r2]
   11a88:	cmp	r2, #0
   11a8c:	bxeq	lr
   11a90:	b	11850 <__gmon_start__@plt>
   11a94:	andeq	r3, r2, r8, ror r5
   11a98:	andeq	r0, r0, r8, ror #2
   11a9c:	ldr	r0, [pc, #24]	; 11abc <__assert_fail@plt+0x8c>
   11aa0:	ldr	r3, [pc, #24]	; 11ac0 <__assert_fail@plt+0x90>
   11aa4:	cmp	r3, r0
   11aa8:	bxeq	lr
   11aac:	ldr	r3, [pc, #16]	; 11ac4 <__assert_fail@plt+0x94>
   11ab0:	cmp	r3, #0
   11ab4:	bxeq	lr
   11ab8:	bx	r3
   11abc:	andeq	r5, r3, r8, asr #3
   11ac0:	andeq	r5, r3, r8, asr #3
   11ac4:	andeq	r0, r0, r0
   11ac8:	ldr	r0, [pc, #36]	; 11af4 <__assert_fail@plt+0xc4>
   11acc:	ldr	r1, [pc, #36]	; 11af8 <__assert_fail@plt+0xc8>
   11ad0:	sub	r1, r1, r0
   11ad4:	asr	r1, r1, #2
   11ad8:	add	r1, r1, r1, lsr #31
   11adc:	asrs	r1, r1, #1
   11ae0:	bxeq	lr
   11ae4:	ldr	r3, [pc, #16]	; 11afc <__assert_fail@plt+0xcc>
   11ae8:	cmp	r3, #0
   11aec:	bxeq	lr
   11af0:	bx	r3
   11af4:	andeq	r5, r3, r8, asr #3
   11af8:	andeq	r5, r3, r8, asr #3
   11afc:	andeq	r0, r0, r0
   11b00:	push	{r4, lr}
   11b04:	ldr	r4, [pc, #24]	; 11b24 <__assert_fail@plt+0xf4>
   11b08:	ldrb	r3, [r4]
   11b0c:	cmp	r3, #0
   11b10:	popne	{r4, pc}
   11b14:	bl	11a9c <__assert_fail@plt+0x6c>
   11b18:	mov	r3, #1
   11b1c:	strb	r3, [r4]
   11b20:	pop	{r4, pc}
   11b24:	andeq	r5, r3, r8, ror #3
   11b28:	b	11ac8 <__assert_fail@plt+0x98>
   11b2c:	push	{fp, lr}
   11b30:	mov	fp, sp
   11b34:	sub	sp, sp, #56	; 0x38
   11b38:	mov	r4, r0
   11b3c:	cmp	r0, #0
   11b40:	bne	11d30 <__assert_fail@plt+0x300>
   11b44:	movw	r1, #1851	; 0x73b
   11b48:	mov	r0, #0
   11b4c:	mov	r2, #5
   11b50:	movt	r1, #2
   11b54:	bl	1170c <dcgettext@plt>
   11b58:	mov	r1, r0
   11b5c:	movw	r0, #20992	; 0x5200
   11b60:	movt	r0, #3
   11b64:	ldr	r2, [r0]
   11b68:	mov	r0, #1
   11b6c:	mov	r3, r2
   11b70:	bl	11904 <__printf_chk@plt>
   11b74:	movw	r1, #1891	; 0x763
   11b78:	mov	r0, #0
   11b7c:	mov	r2, #5
   11b80:	movt	r1, #2
   11b84:	bl	1170c <dcgettext@plt>
   11b88:	movw	r7, #20964	; 0x51e4
   11b8c:	movt	r7, #3
   11b90:	ldr	r1, [r7]
   11b94:	bl	11634 <fputs_unlocked@plt>
   11b98:	movw	r1, #2026	; 0x7ea
   11b9c:	mov	r0, #0
   11ba0:	mov	r2, #5
   11ba4:	movt	r1, #2
   11ba8:	bl	1170c <dcgettext@plt>
   11bac:	ldr	r1, [r7]
   11bb0:	bl	11634 <fputs_unlocked@plt>
   11bb4:	movw	r1, #2071	; 0x817
   11bb8:	mov	r0, #0
   11bbc:	mov	r2, #5
   11bc0:	movt	r1, #2
   11bc4:	bl	1170c <dcgettext@plt>
   11bc8:	ldr	r1, [r7]
   11bcc:	bl	11634 <fputs_unlocked@plt>
   11bd0:	movw	r0, #3520	; 0xdc0
   11bd4:	mov	r2, #48	; 0x30
   11bd8:	mov	r6, sp
   11bdc:	movw	r5, #2125	; 0x84d
   11be0:	movt	r0, #2
   11be4:	movt	r5, #2
   11be8:	add	r1, r0, #32
   11bec:	add	r3, r0, #16
   11bf0:	vld1.64	{d18-d19}, [r0], r2
   11bf4:	vld1.64	{d16-d17}, [r1]
   11bf8:	vld1.64	{d20-d21}, [r3]
   11bfc:	add	r1, r6, #32
   11c00:	vldr	d22, [r0]
   11c04:	add	r0, r6, #16
   11c08:	vst1.64	{d16-d17}, [r1]
   11c0c:	movw	r1, #2245	; 0x8c5
   11c10:	vst1.64	{d20-d21}, [r0]
   11c14:	mov	r0, r6
   11c18:	vst1.64	{d18-d19}, [r0], r2
   11c1c:	movt	r1, #2
   11c20:	vstr	d22, [r0]
   11c24:	mov	r0, r5
   11c28:	bl	11670 <strcmp@plt>
   11c2c:	cmp	r0, #0
   11c30:	ldrne	r1, [r6, #8]!
   11c34:	cmpne	r1, #0
   11c38:	bne	11c24 <__assert_fail@plt+0x1f4>
   11c3c:	ldr	r6, [r6, #4]
   11c40:	movw	r1, #2340	; 0x924
   11c44:	mov	r0, #0
   11c48:	mov	r2, #5
   11c4c:	movt	r1, #2
   11c50:	bl	1170c <dcgettext@plt>
   11c54:	movw	r2, #2156	; 0x86c
   11c58:	movw	r3, #2363	; 0x93b
   11c5c:	mov	r1, r0
   11c60:	mov	r0, #1
   11c64:	movt	r2, #2
   11c68:	movt	r3, #2
   11c6c:	bl	11904 <__printf_chk@plt>
   11c70:	cmp	r6, #0
   11c74:	mov	r0, #5
   11c78:	mov	r1, #0
   11c7c:	moveq	r6, r5
   11c80:	bl	119a0 <setlocale@plt>
   11c84:	cmp	r0, #0
   11c88:	beq	11cc0 <__assert_fail@plt+0x290>
   11c8c:	movw	r1, #2403	; 0x963
   11c90:	mov	r2, #3
   11c94:	movt	r1, #2
   11c98:	bl	11a18 <strncmp@plt>
   11c9c:	cmp	r0, #0
   11ca0:	beq	11cc0 <__assert_fail@plt+0x290>
   11ca4:	movw	r1, #2407	; 0x967
   11ca8:	mov	r0, #0
   11cac:	mov	r2, #5
   11cb0:	movt	r1, #2
   11cb4:	bl	1170c <dcgettext@plt>
   11cb8:	ldr	r1, [r7]
   11cbc:	bl	11634 <fputs_unlocked@plt>
   11cc0:	movw	r1, #2478	; 0x9ae
   11cc4:	mov	r0, #0
   11cc8:	mov	r2, #5
   11ccc:	movt	r1, #2
   11cd0:	bl	1170c <dcgettext@plt>
   11cd4:	movw	r2, #2363	; 0x93b
   11cd8:	mov	r1, r0
   11cdc:	mov	r0, #1
   11ce0:	mov	r3, r5
   11ce4:	movt	r2, #2
   11ce8:	bl	11904 <__printf_chk@plt>
   11cec:	movw	r1, #2505	; 0x9c9
   11cf0:	mov	r0, #0
   11cf4:	mov	r2, #5
   11cf8:	movt	r1, #2
   11cfc:	bl	1170c <dcgettext@plt>
   11d00:	movw	r3, #2025	; 0x7e9
   11d04:	mov	r1, r0
   11d08:	movw	r0, #2273	; 0x8e1
   11d0c:	cmp	r6, r5
   11d10:	mov	r2, r6
   11d14:	movt	r0, #2
   11d18:	movt	r3, #2
   11d1c:	moveq	r3, r0
   11d20:	mov	r0, #1
   11d24:	bl	11904 <__printf_chk@plt>
   11d28:	mov	r0, r4
   11d2c:	bl	11874 <exit@plt>
   11d30:	movw	r0, #20952	; 0x51d8
   11d34:	movw	r1, #1812	; 0x714
   11d38:	mov	r2, #5
   11d3c:	movt	r0, #3
   11d40:	movt	r1, #2
   11d44:	ldr	r5, [r0]
   11d48:	mov	r0, #0
   11d4c:	bl	1170c <dcgettext@plt>
   11d50:	mov	r2, r0
   11d54:	movw	r0, #20992	; 0x5200
   11d58:	mov	r1, #1
   11d5c:	movt	r0, #3
   11d60:	ldr	r3, [r0]
   11d64:	mov	r0, r5
   11d68:	bl	11928 <__fprintf_chk@plt>
   11d6c:	mov	r0, r4
   11d70:	bl	11874 <exit@plt>
   11d74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d78:	add	fp, sp, #28
   11d7c:	sub	sp, sp, #28
   11d80:	mov	r5, r0
   11d84:	ldr	r0, [r1]
   11d88:	mov	r4, r1
   11d8c:	bl	1af24 <__assert_fail@plt+0x94f4>
   11d90:	movw	r1, #2025	; 0x7e9
   11d94:	mov	r0, #6
   11d98:	movt	r1, #2
   11d9c:	bl	119a0 <setlocale@plt>
   11da0:	movw	r6, #2160	; 0x870
   11da4:	movw	r1, #2132	; 0x854
   11da8:	movt	r6, #2
   11dac:	movt	r1, #2
   11db0:	mov	r0, r6
   11db4:	bl	119dc <bindtextdomain@plt>
   11db8:	mov	r0, r6
   11dbc:	bl	11778 <textdomain@plt>
   11dc0:	movw	r8, #20972	; 0x51ec
   11dc4:	movt	r8, #3
   11dc8:	ldr	r0, [r8, #4]
   11dcc:	cmp	r0, #0
   11dd0:	bne	11de4 <__assert_fail@plt+0x3b4>
   11dd4:	mov	r0, #1024	; 0x400
   11dd8:	bl	1e18c <__assert_fail@plt+0xc75c>
   11ddc:	str	r0, [r8, #4]
   11de0:	str	r0, [r8, #8]
   11de4:	movw	r0, #44352	; 0xad40
   11de8:	movt	r0, #1
   11dec:	bl	206ec <__assert_fail@plt+0xecbc>
   11df0:	movw	r0, #8124	; 0x1fbc
   11df4:	movt	r0, #1
   11df8:	bl	206ec <__assert_fail@plt+0xecbc>
   11dfc:	movw	r6, #2025	; 0x7e9
   11e00:	movw	r7, #3456	; 0xd80
   11e04:	mov	r9, #0
   11e08:	mov	sl, #1
   11e0c:	movt	r6, #2
   11e10:	movt	r7, #2
   11e14:	b	11e1c <__assert_fail@plt+0x3ec>
   11e18:	strb	sl, [r8]
   11e1c:	mov	r0, r5
   11e20:	mov	r1, r4
   11e24:	mov	r2, r6
   11e28:	mov	r3, r7
   11e2c:	str	r9, [sp]
   11e30:	bl	1185c <getopt_long@plt>
   11e34:	cmp	r0, #255	; 0xff
   11e38:	ble	11e48 <__assert_fail@plt+0x418>
   11e3c:	cmp	r0, #256	; 0x100
   11e40:	beq	11e18 <__assert_fail@plt+0x3e8>
   11e44:	b	11fb4 <__assert_fail@plt+0x584>
   11e48:	cmn	r0, #1
   11e4c:	bne	11f1c <__assert_fail@plt+0x4ec>
   11e50:	movw	r0, #20944	; 0x51d0
   11e54:	movt	r0, #3
   11e58:	ldr	r0, [r0]
   11e5c:	cmp	r0, r5
   11e60:	bge	11e90 <__assert_fail@plt+0x460>
   11e64:	sub	r5, r5, r0
   11e68:	add	r4, r4, r0, lsl #2
   11e6c:	mov	r7, #1
   11e70:	ldr	r0, [r4], #4
   11e74:	bl	12028 <__assert_fail@plt+0x5f8>
   11e78:	and	r7, r7, r0
   11e7c:	subs	r5, r5, #1
   11e80:	bne	11e70 <__assert_fail@plt+0x440>
   11e84:	eor	r0, r7, #1
   11e88:	sub	sp, fp, #28
   11e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e90:	add	r4, sp, #20
   11e94:	mov	r0, r4
   11e98:	bl	1d4b0 <__assert_fail@plt+0xba80>
   11e9c:	movw	r8, #20960	; 0x51e0
   11ea0:	movw	r1, #2588	; 0xa1c
   11ea4:	mov	r2, #3
   11ea8:	mov	r3, r4
   11eac:	movt	r8, #3
   11eb0:	movt	r1, #2
   11eb4:	ldr	r0, [r8]
   11eb8:	bl	1d4c0 <__assert_fail@plt+0xba90>
   11ebc:	mov	r1, r0
   11ec0:	ldr	r0, [sp, #24]
   11ec4:	mov	r7, #1
   11ec8:	cmn	r1, #1
   11ecc:	beq	11f0c <__assert_fail@plt+0x4dc>
   11ed0:	movw	r4, #2588	; 0xa1c
   11ed4:	add	r5, sp, #20
   11ed8:	movt	r4, #2
   11edc:	bl	12028 <__assert_fail@plt+0x5f8>
   11ee0:	mov	r6, r0
   11ee4:	ldr	r0, [r8]
   11ee8:	mov	r1, r4
   11eec:	mov	r2, #3
   11ef0:	mov	r3, r5
   11ef4:	bl	1d4c0 <__assert_fail@plt+0xba90>
   11ef8:	mov	r1, r0
   11efc:	ldr	r0, [sp, #24]
   11f00:	and	r7, r7, r6
   11f04:	cmn	r1, #1
   11f08:	bne	11edc <__assert_fail@plt+0x4ac>
   11f0c:	bl	1ae2c <__assert_fail@plt+0x93fc>
   11f10:	eor	r0, r7, #1
   11f14:	sub	sp, fp, #28
   11f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f1c:	cmn	r0, #3
   11f20:	bne	11fa4 <__assert_fail@plt+0x574>
   11f24:	movw	r0, #20860	; 0x517c
   11f28:	movw	r1, #2199	; 0x897
   11f2c:	movt	r0, #3
   11f30:	movt	r1, #2
   11f34:	ldr	r4, [r0]
   11f38:	movw	r0, #20964	; 0x51e4
   11f3c:	movt	r0, #3
   11f40:	ldr	r5, [r0]
   11f44:	movw	r0, #2181	; 0x885
   11f48:	movt	r0, #2
   11f4c:	bl	1b358 <__assert_fail@plt+0x9928>
   11f50:	movw	r1, #2231	; 0x8b7
   11f54:	mov	r6, r0
   11f58:	movw	r0, #2218	; 0x8aa
   11f5c:	movt	r0, #2
   11f60:	movt	r1, #2
   11f64:	bl	1b358 <__assert_fail@plt+0x9928>
   11f68:	movw	r2, #2170	; 0x87a
   11f6c:	mov	r1, #0
   11f70:	mov	r3, r4
   11f74:	movt	r2, #2
   11f78:	stm	sp, {r2, r6}
   11f7c:	movw	r2, #2156	; 0x86c
   11f80:	str	r1, [sp, #12]
   11f84:	movw	r1, #2125	; 0x84d
   11f88:	str	r0, [sp, #8]
   11f8c:	mov	r0, r5
   11f90:	movt	r1, #2
   11f94:	movt	r2, #2
   11f98:	bl	1df58 <__assert_fail@plt+0xc528>
   11f9c:	mov	r0, #0
   11fa0:	bl	11874 <exit@plt>
   11fa4:	cmn	r0, #2
   11fa8:	bne	11fb4 <__assert_fail@plt+0x584>
   11fac:	mov	r0, #0
   11fb0:	bl	11b2c <__assert_fail@plt+0xfc>
   11fb4:	mov	r0, #1
   11fb8:	bl	11b2c <__assert_fail@plt+0xfc>
   11fbc:	push	{r4, r5, fp, lr}
   11fc0:	add	fp, sp, #8
   11fc4:	movw	r5, #20972	; 0x51ec
   11fc8:	movt	r5, #3
   11fcc:	ldr	r1, [r5, #4]
   11fd0:	ldr	r0, [r5, #8]
   11fd4:	sub	r4, r0, r1
   11fd8:	mov	r0, #1
   11fdc:	mov	r2, r4
   11fe0:	bl	1ae54 <__assert_fail@plt+0x9424>
   11fe4:	cmp	r0, r4
   11fe8:	ldreq	r0, [r5, #4]
   11fec:	streq	r0, [r5, #8]
   11ff0:	popeq	{r4, r5, fp, pc}
   11ff4:	bl	118bc <__errno_location@plt>
   11ff8:	ldr	r4, [r0]
   11ffc:	movw	r1, #2556	; 0x9fc
   12000:	mov	r0, #0
   12004:	mov	r2, #5
   12008:	movt	r1, #2
   1200c:	bl	1170c <dcgettext@plt>
   12010:	movw	r2, #15873	; 0x3e01
   12014:	mov	r3, r0
   12018:	mov	r0, #1
   1201c:	mov	r1, r4
   12020:	movt	r2, #2
   12024:	bl	117fc <error@plt>
   12028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1202c:	add	fp, sp, #28
   12030:	sub	sp, sp, #292	; 0x124
   12034:	mov	r4, r0
   12038:	sub	r1, r0, #1
   1203c:	ldrb	r0, [r1, #1]!
   12040:	cmp	r0, #32
   12044:	beq	1203c <__assert_fail@plt+0x60c>
   12048:	sub	r0, r0, #43	; 0x2b
   1204c:	mov	r6, r1
   12050:	clz	r0, r0
   12054:	lsr	r0, r0, #5
   12058:	ldrb	r3, [r6, r0]!
   1205c:	cmp	r3, #0
   12060:	beq	12314 <__assert_fail@plt+0x8e4>
   12064:	add	r1, r1, r0
   12068:	mvn	r7, #47	; 0x2f
   1206c:	mov	r0, r3
   12070:	add	r2, r1, #1
   12074:	uxtab	r0, r7, r0
   12078:	cmp	r0, #9
   1207c:	bhi	12314 <__assert_fail@plt+0x8e4>
   12080:	ldrb	r0, [r2], #1
   12084:	cmp	r0, #0
   12088:	bne	12074 <__assert_fail@plt+0x644>
   1208c:	str	r6, [sp, #4]
   12090:	add	r1, r1, #1
   12094:	mov	r9, #10
   12098:	mov	r6, #0
   1209c:	mov	r5, #0
   120a0:	mov	sl, #0
   120a4:	mov	r4, #0
   120a8:	movw	r0, #39321	; 0x9999
   120ac:	movt	r0, #39321	; 0x9999
   120b0:	subs	r2, r0, sl
   120b4:	movw	r0, #39321	; 0x9999
   120b8:	movt	r0, #6553	; 0x1999
   120bc:	sbcs	r2, r0, r4
   120c0:	bcc	12358 <__assert_fail@plt+0x928>
   120c4:	lsl	r2, r5, #1
   120c8:	umull	r8, ip, r6, r9
   120cc:	add	lr, r5, r5, lsl #2
   120d0:	orr	r2, r2, r6, lsr #31
   120d4:	subs	r6, r8, r6, lsl #1
   120d8:	add	r0, ip, lr, lsl #1
   120dc:	lsr	r6, r5, #29
   120e0:	sbcs	r2, r0, r2
   120e4:	add	r7, r6, r5, lsr #31
   120e8:	mvn	r6, #47	; 0x2f
   120ec:	mov	r2, #0
   120f0:	uxtab	r3, r6, r3
   120f4:	movwcc	r2, #1
   120f8:	adds	r6, r8, r3
   120fc:	adcs	r5, r0, #0
   12100:	adc	r0, r7, r2
   12104:	umull	r2, r3, sl, r9
   12108:	add	r7, r4, r4, lsl #2
   1210c:	adds	sl, r2, r0
   12110:	add	r3, r3, r7, lsl #1
   12114:	mov	r0, #0
   12118:	adcs	r4, r3, #0
   1211c:	adcs	r0, r0, #0
   12120:	bne	12358 <__assert_fail@plt+0x928>
   12124:	ldrb	r3, [r1], #1
   12128:	cmp	r3, #0
   1212c:	bne	120a8 <__assert_fail@plt+0x678>
   12130:	cmp	r4, #0
   12134:	blt	12358 <__assert_fail@plt+0x928>
   12138:	movw	r8, #20972	; 0x51ec
   1213c:	movt	r8, #3
   12140:	ldrb	r0, [r8]
   12144:	cmp	r0, #1
   12148:	bne	12168 <__assert_fail@plt+0x738>
   1214c:	movw	r0, #20952	; 0x51d8
   12150:	movw	r2, #2592	; 0xa20
   12154:	mov	r1, #1
   12158:	movt	r0, #3
   1215c:	movt	r2, #2
   12160:	ldr	r0, [r0]
   12164:	bl	11928 <__fprintf_chk@plt>
   12168:	mov	r0, sl
   1216c:	mov	r1, r4
   12170:	mov	r2, r6
   12174:	mov	r3, r5
   12178:	bl	12784 <__assert_fail@plt+0xd54>
   1217c:	ldr	r0, [r8, #8]
   12180:	add	r7, sp, #8
   12184:	mov	r2, r6
   12188:	mov	r3, r5
   1218c:	add	r1, r0, #1
   12190:	str	r1, [r8, #8]
   12194:	mov	r1, #58	; 0x3a
   12198:	strb	r1, [r0]
   1219c:	mov	r0, sl
   121a0:	mov	r1, r4
   121a4:	str	r7, [sp]
   121a8:	bl	12964 <__assert_fail@plt+0xf34>
   121ac:	ldrb	r0, [sp, #258]	; 0x102
   121b0:	cmp	r0, #0
   121b4:	beq	12254 <__assert_fail@plt+0x824>
   121b8:	mov	r2, #0
   121bc:	mov	r3, #32
   121c0:	sub	r4, fp, #56	; 0x38
   121c4:	add	r9, r7, r2
   121c8:	ldrb	r1, [r9, #224]!	; 0xe0
   121cc:	cmp	r1, #0
   121d0:	beq	12244 <__assert_fail@plt+0x814>
   121d4:	add	r0, r7, r2, lsl #3
   121d8:	mov	r7, #0
   121dc:	str	r2, [sp, #4]
   121e0:	add	sl, r0, #16
   121e4:	ldr	r0, [r8, #8]
   121e8:	add	r1, r0, #1
   121ec:	mov	r2, r4
   121f0:	str	r1, [r8, #8]
   121f4:	strb	r3, [r0]
   121f8:	ldrd	r0, [sl]
   121fc:	bl	1aec8 <__assert_fail@plt+0x9498>
   12200:	ldr	r6, [r8, #8]
   12204:	mov	r1, r0
   12208:	sub	r0, r4, r0
   1220c:	add	r5, r0, #20
   12210:	mov	r2, r5
   12214:	mov	r0, r6
   12218:	bl	116dc <memcpy@plt>
   1221c:	ldrb	r1, [r9]
   12220:	add	r7, r7, #1
   12224:	add	r0, r6, r5
   12228:	mov	r3, #32
   1222c:	str	r0, [r8, #8]
   12230:	cmp	r7, r1
   12234:	bcc	121e8 <__assert_fail@plt+0x7b8>
   12238:	ldrb	r0, [sp, #258]	; 0x102
   1223c:	ldr	r2, [sp, #4]
   12240:	add	r7, sp, #8
   12244:	add	r2, r2, #1
   12248:	uxtb	r1, r0
   1224c:	cmp	r2, r1
   12250:	bcc	121c4 <__assert_fail@plt+0x794>
   12254:	ldr	r0, [sp, #16]
   12258:	ldr	r1, [sp, #20]
   1225c:	orrs	r0, r0, r1
   12260:	beq	1228c <__assert_fail@plt+0x85c>
   12264:	ldr	r1, [r8, #8]
   12268:	add	r0, r7, #8
   1226c:	add	r2, r1, #1
   12270:	str	r2, [r8, #8]
   12274:	mov	r2, #32
   12278:	strb	r2, [r1]
   1227c:	ldrd	r0, [r0]
   12280:	ldr	r2, [sp, #8]
   12284:	ldr	r3, [sp, #12]
   12288:	bl	12784 <__assert_fail@plt+0xd54>
   1228c:	ldr	r0, [r8, #8]
   12290:	movw	r6, #20856	; 0x5178
   12294:	mov	r1, #10
   12298:	movt	r6, #3
   1229c:	add	r4, r0, #1
   122a0:	str	r4, [r8, #8]
   122a4:	strb	r1, [r0]
   122a8:	ldr	r0, [r6]
   122ac:	ldr	r5, [r8, #4]
   122b0:	cmn	r0, #1
   122b4:	bne	122e4 <__assert_fail@plt+0x8b4>
   122b8:	mov	r0, #0
   122bc:	bl	11a0c <isatty@plt>
   122c0:	mov	r1, r0
   122c4:	mov	r0, #1
   122c8:	cmp	r1, #0
   122cc:	bne	122e0 <__assert_fail@plt+0x8b0>
   122d0:	mov	r0, #1
   122d4:	bl	11a0c <isatty@plt>
   122d8:	cmp	r0, #0
   122dc:	movwne	r0, #1
   122e0:	str	r0, [r6]
   122e4:	cmp	r0, #0
   122e8:	beq	124fc <__assert_fail@plt+0xacc>
   122ec:	ldr	r1, [r8, #4]
   122f0:	ldr	r0, [r8, #8]
   122f4:	sub	r4, r0, r1
   122f8:	mov	r0, #1
   122fc:	mov	r2, r4
   12300:	bl	1ae54 <__assert_fail@plt+0x9424>
   12304:	cmp	r0, r4
   12308:	bne	12588 <__assert_fail@plt+0xb58>
   1230c:	ldr	r0, [r8, #4]
   12310:	b	1255c <__assert_fail@plt+0xb2c>
   12314:	movw	r1, #2629	; 0xa45
   12318:	mov	r0, #0
   1231c:	mov	r2, #5
   12320:	mov	r5, #0
   12324:	movt	r1, #2
   12328:	bl	1170c <dcgettext@plt>
   1232c:	mov	r6, r0
   12330:	mov	r0, r4
   12334:	bl	1d498 <__assert_fail@plt+0xba68>
   12338:	mov	r3, r0
   1233c:	mov	r0, #0
   12340:	mov	r1, #0
   12344:	mov	r2, r6
   12348:	bl	117fc <error@plt>
   1234c:	mov	r0, r5
   12350:	sub	sp, fp, #28
   12354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12358:	movw	r0, #20972	; 0x51ec
   1235c:	movt	r0, #3
   12360:	ldrb	r0, [r0]
   12364:	cmp	r0, #1
   12368:	bne	12388 <__assert_fail@plt+0x958>
   1236c:	movw	r0, #20952	; 0x51d8
   12370:	movw	r2, #2664	; 0xa68
   12374:	mov	r1, #1
   12378:	movt	r0, #3
   1237c:	movt	r2, #2
   12380:	ldr	r0, [r0]
   12384:	bl	11928 <__fprintf_chk@plt>
   12388:	ldr	r1, [sp, #4]
   1238c:	add	r4, sp, #8
   12390:	mov	r2, #10
   12394:	mov	r0, r4
   12398:	bl	119d0 <__gmpz_init_set_str@plt>
   1239c:	movw	r5, #20964	; 0x51e4
   123a0:	mov	r1, #10
   123a4:	mov	r2, r4
   123a8:	movt	r5, #3
   123ac:	ldr	r0, [r5]
   123b0:	bl	11790 <__gmpz_out_str@plt>
   123b4:	ldr	r0, [r5]
   123b8:	ldr	r1, [r0, #20]
   123bc:	ldr	r2, [r0, #24]
   123c0:	cmp	r1, r2
   123c4:	bcs	12570 <__assert_fail@plt+0xb40>
   123c8:	add	r2, r1, #1
   123cc:	str	r2, [r0, #20]
   123d0:	mov	r0, #58	; 0x3a
   123d4:	strb	r0, [r1]
   123d8:	add	r0, sp, #8
   123dc:	sub	r1, fp, #56	; 0x38
   123e0:	bl	125bc <__assert_fail@plt+0xb8c>
   123e4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   123e8:	cmp	r1, #0
   123ec:	beq	124a8 <__assert_fail@plt+0xa78>
   123f0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   123f4:	mov	r4, #0
   123f8:	mov	r6, #32
   123fc:	ldr	r2, [r0, r4, lsl #2]
   12400:	cmp	r2, #0
   12404:	beq	1246c <__assert_fail@plt+0xa3c>
   12408:	mov	r7, #0
   1240c:	b	1241c <__assert_fail@plt+0x9ec>
   12410:	mov	r1, #32
   12414:	bl	11994 <__overflow@plt>
   12418:	b	1243c <__assert_fail@plt+0xa0c>
   1241c:	ldr	r0, [r5]
   12420:	ldr	r1, [r0, #20]
   12424:	ldr	r2, [r0, #24]
   12428:	cmp	r1, r2
   1242c:	bcs	12410 <__assert_fail@plt+0x9e0>
   12430:	add	r2, r1, #1
   12434:	str	r2, [r0, #20]
   12438:	strb	r6, [r1]
   1243c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12440:	add	r0, r4, r4, lsl #1
   12444:	add	r2, r1, r0, lsl #2
   12448:	ldr	r0, [r5]
   1244c:	mov	r1, #10
   12450:	bl	11790 <__gmpz_out_str@plt>
   12454:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12458:	add	r7, r7, #1
   1245c:	ldr	r1, [r0, r4, lsl #2]
   12460:	cmp	r7, r1
   12464:	bcc	1241c <__assert_fail@plt+0x9ec>
   12468:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1246c:	add	r4, r4, #1
   12470:	cmp	r4, r1
   12474:	bcc	123fc <__assert_fail@plt+0x9cc>
   12478:	cmp	r1, #0
   1247c:	beq	124a8 <__assert_fail@plt+0xa78>
   12480:	mov	r4, #0
   12484:	mov	r6, #0
   12488:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1248c:	add	r0, r0, r4
   12490:	bl	118b0 <__gmpz_clear@plt>
   12494:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12498:	add	r6, r6, #1
   1249c:	add	r4, r4, #12
   124a0:	cmp	r6, r0
   124a4:	bcc	12488 <__assert_fail@plt+0xa58>
   124a8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   124ac:	bl	1ae2c <__assert_fail@plt+0x93fc>
   124b0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   124b4:	bl	1ae2c <__assert_fail@plt+0x93fc>
   124b8:	add	r0, sp, #8
   124bc:	bl	118b0 <__gmpz_clear@plt>
   124c0:	ldr	r0, [r5]
   124c4:	ldr	r1, [r0, #20]
   124c8:	ldr	r2, [r0, #24]
   124cc:	cmp	r1, r2
   124d0:	bcs	1257c <__assert_fail@plt+0xb4c>
   124d4:	add	r2, r1, #1
   124d8:	str	r2, [r0, #20]
   124dc:	mov	r0, #10
   124e0:	strb	r0, [r1]
   124e4:	ldr	r0, [r5]
   124e8:	bl	1179c <fflush_unlocked@plt>
   124ec:	mov	r5, #1
   124f0:	mov	r0, r5
   124f4:	sub	sp, fp, #28
   124f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124fc:	sub	r0, r4, r5
   12500:	cmp	r0, #512	; 0x200
   12504:	bcc	12560 <__assert_fail@plt+0xb30>
   12508:	ldmib	r8, {r1, r6}
   1250c:	movw	r0, #513	; 0x201
   12510:	add	r4, r1, r0
   12514:	ldrb	r0, [r4, #-2]
   12518:	sub	r4, r4, #1
   1251c:	cmp	r0, #10
   12520:	bne	12514 <__assert_fail@plt+0xae4>
   12524:	sub	r5, r4, r1
   12528:	mov	r0, #1
   1252c:	str	r4, [r8, #8]
   12530:	mov	r2, r5
   12534:	bl	1ae54 <__assert_fail@plt+0x9424>
   12538:	cmp	r0, r5
   1253c:	bne	12588 <__assert_fail@plt+0xb58>
   12540:	sub	r5, r6, r4
   12544:	ldr	r6, [r8, #4]
   12548:	mov	r1, r4
   1254c:	mov	r2, r5
   12550:	mov	r0, r6
   12554:	bl	116dc <memcpy@plt>
   12558:	add	r0, r6, r5
   1255c:	str	r0, [r8, #8]
   12560:	mov	r5, #1
   12564:	mov	r0, r5
   12568:	sub	sp, fp, #28
   1256c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12570:	mov	r1, #58	; 0x3a
   12574:	bl	11994 <__overflow@plt>
   12578:	b	123d8 <__assert_fail@plt+0x9a8>
   1257c:	mov	r1, #10
   12580:	bl	11994 <__overflow@plt>
   12584:	b	124e4 <__assert_fail@plt+0xab4>
   12588:	bl	118bc <__errno_location@plt>
   1258c:	ldr	r4, [r0]
   12590:	movw	r1, #2556	; 0x9fc
   12594:	mov	r0, #0
   12598:	mov	r2, #5
   1259c:	movt	r1, #2
   125a0:	bl	1170c <dcgettext@plt>
   125a4:	movw	r2, #15873	; 0x3e01
   125a8:	mov	r3, r0
   125ac:	mov	r0, #1
   125b0:	mov	r1, r4
   125b4:	movt	r2, #2
   125b8:	bl	117fc <error@plt>
   125bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125c0:	add	fp, sp, #28
   125c4:	sub	sp, sp, #28
   125c8:	mov	r5, r0
   125cc:	mov	r0, #0
   125d0:	str	r0, [r1]
   125d4:	str	r0, [r1, #4]
   125d8:	str	r0, [r1, #8]
   125dc:	ldr	r0, [r5, #4]
   125e0:	cmp	r0, #0
   125e4:	beq	1277c <__assert_fail@plt+0xd4c>
   125e8:	movw	r8, #20972	; 0x51ec
   125ec:	mov	r9, r1
   125f0:	movt	r8, #3
   125f4:	ldrb	r0, [r8]
   125f8:	cmp	r0, #1
   125fc:	bne	1261c <__assert_fail@plt+0xbec>
   12600:	movw	r0, #20952	; 0x51d8
   12604:	movw	r2, #3367	; 0xd27
   12608:	mov	r1, #1
   1260c:	movt	r0, #3
   12610:	movt	r2, #2
   12614:	ldr	r0, [r0]
   12618:	bl	11928 <__fprintf_chk@plt>
   1261c:	add	r0, sp, #4
   12620:	bl	119f4 <__gmpz_init@plt>
   12624:	mov	r0, r5
   12628:	mov	r1, #0
   1262c:	bl	1164c <__gmpz_scan1@plt>
   12630:	mov	r6, r0
   12634:	mov	r0, r5
   12638:	mov	r1, r5
   1263c:	mov	r2, r6
   12640:	bl	117cc <__gmpz_fdiv_q_2exp@plt>
   12644:	cmp	r6, #0
   12648:	beq	12678 <__assert_fail@plt+0xc48>
   1264c:	add	r7, sp, #16
   12650:	mov	r0, r7
   12654:	mov	r1, #2
   12658:	bl	11970 <__gmpz_init_set_ui@plt>
   1265c:	mov	r0, r9
   12660:	mov	r1, r7
   12664:	bl	1a738 <__assert_fail@plt+0x8d08>
   12668:	mov	r0, r7
   1266c:	bl	118b0 <__gmpz_clear@plt>
   12670:	subs	r6, r6, #1
   12674:	bne	12650 <__assert_fail@plt+0xc20>
   12678:	movw	sl, #14376	; 0x3828
   1267c:	mov	r6, #3
   12680:	mov	r4, #1
   12684:	add	r7, sp, #16
   12688:	movt	sl, #2
   1268c:	mov	r0, r5
   12690:	mov	r1, r6
   12694:	bl	118a4 <__gmpz_divisible_ui_p@plt>
   12698:	cmp	r0, #0
   1269c:	beq	126dc <__assert_fail@plt+0xcac>
   126a0:	mov	r0, r5
   126a4:	mov	r1, r5
   126a8:	mov	r2, r6
   126ac:	bl	1176c <__gmpz_tdiv_q_ui@plt>
   126b0:	mov	r0, r7
   126b4:	mov	r1, r6
   126b8:	bl	11970 <__gmpz_init_set_ui@plt>
   126bc:	mov	r0, r9
   126c0:	mov	r1, r7
   126c4:	bl	1a738 <__assert_fail@plt+0x8d08>
   126c8:	mov	r0, r7
   126cc:	bl	118b0 <__gmpz_clear@plt>
   126d0:	cmp	r4, #668	; 0x29c
   126d4:	bls	1268c <__assert_fail@plt+0xc5c>
   126d8:	b	12704 <__assert_fail@plt+0xcd4>
   126dc:	ldrb	r0, [sl, r4]
   126e0:	add	r6, r6, r0
   126e4:	mov	r0, r5
   126e8:	mul	r1, r6, r6
   126ec:	bl	119e8 <__gmpz_cmp_ui@plt>
   126f0:	cmp	r0, #0
   126f4:	blt	12704 <__assert_fail@plt+0xcd4>
   126f8:	add	r4, r4, #1
   126fc:	cmp	r4, #668	; 0x29c
   12700:	bls	1268c <__assert_fail@plt+0xc5c>
   12704:	add	r0, sp, #4
   12708:	bl	118b0 <__gmpz_clear@plt>
   1270c:	mov	r0, r5
   12710:	mov	r1, #1
   12714:	bl	119e8 <__gmpz_cmp_ui@plt>
   12718:	cmp	r0, #0
   1271c:	beq	1277c <__assert_fail@plt+0xd4c>
   12720:	ldrb	r0, [r8]
   12724:	cmp	r0, #1
   12728:	bne	12748 <__assert_fail@plt+0xd18>
   1272c:	movw	r0, #20952	; 0x51d8
   12730:	movw	r2, #3347	; 0xd13
   12734:	mov	r1, #1
   12738:	movt	r0, #3
   1273c:	movt	r2, #2
   12740:	ldr	r0, [r0]
   12744:	bl	11928 <__fprintf_chk@plt>
   12748:	mov	r0, r5
   1274c:	bl	1a4ac <__assert_fail@plt+0x8a7c>
   12750:	cmp	r0, #0
   12754:	beq	1276c <__assert_fail@plt+0xd3c>
   12758:	mov	r0, r9
   1275c:	mov	r1, r5
   12760:	bl	1a738 <__assert_fail@plt+0x8d08>
   12764:	sub	sp, fp, #28
   12768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1276c:	mov	r0, r5
   12770:	mov	r1, #1
   12774:	mov	r2, r9
   12778:	bl	1a894 <__assert_fail@plt+0x8e64>
   1277c:	sub	sp, fp, #28
   12780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12788:	add	fp, sp, #28
   1278c:	sub	sp, sp, #36	; 0x24
   12790:	mov	r5, r0
   12794:	mov	r8, r3
   12798:	orrs	r0, r0, r1
   1279c:	beq	1291c <__assert_fail@plt+0xeec>
   127a0:	movw	r7, #51712	; 0xca00
   127a4:	str	r2, [sp, #8]
   127a8:	mov	r0, r5
   127ac:	mov	r3, #0
   127b0:	mov	r4, r1
   127b4:	mov	r9, #0
   127b8:	movt	r7, #15258	; 0x3b9a
   127bc:	mov	r2, r7
   127c0:	bl	20514 <__assert_fail@plt+0xeae4>
   127c4:	umull	r2, r3, r0, r7
   127c8:	str	r1, [sp]
   127cc:	mov	lr, #0
   127d0:	mov	r6, #0
   127d4:	str	r0, [sp, #4]
   127d8:	mla	r3, r1, r7, r3
   127dc:	subs	sl, r5, r2
   127e0:	mov	r1, #0
   127e4:	sbc	ip, r4, r3
   127e8:	mvn	r4, #63	; 0x3f
   127ec:	mov	r3, #0
   127f0:	lsrs	r2, lr, #1
   127f4:	lsl	r3, r3, #1
   127f8:	rrx	r1, r1
   127fc:	lsrs	r6, r6, #1
   12800:	orr	lr, r2, r7, lsl #31
   12804:	orr	r3, r3, r9, lsr #31
   12808:	lsl	r9, r9, #1
   1280c:	rrx	r7, r7
   12810:	subs	r2, r7, sl
   12814:	sbcs	r2, r6, ip
   12818:	bcc	12844 <__assert_fail@plt+0xe14>
   1281c:	mov	r0, r8
   12820:	eor	r2, sl, r7
   12824:	eor	r8, ip, r6
   12828:	orrs	r2, r2, r8
   1282c:	bne	12888 <__assert_fail@plt+0xe58>
   12830:	ldr	r2, [sp, #8]
   12834:	mov	r8, r0
   12838:	subs	r2, r2, r1
   1283c:	sbcs	r2, r0, lr
   12840:	bcc	1287c <__assert_fail@plt+0xe4c>
   12844:	ldr	r0, [sp, #8]
   12848:	subs	r2, sl, r7
   1284c:	orr	r9, r9, #1
   12850:	sbc	r5, ip, r6
   12854:	subs	sl, r2, #1
   12858:	sbc	ip, r5, #0
   1285c:	subs	r0, r0, r1
   12860:	str	r0, [sp, #8]
   12864:	sbcs	r8, r8, lr
   12868:	mov	r0, #0
   1286c:	movwcc	r0, #1
   12870:	cmp	r0, #0
   12874:	moveq	sl, r2
   12878:	moveq	ip, r5
   1287c:	adds	r4, r4, #1
   12880:	bne	127f0 <__assert_fail@plt+0xdc0>
   12884:	b	12894 <__assert_fail@plt+0xe64>
   12888:	mov	r8, r0
   1288c:	adds	r4, r4, #1
   12890:	bne	127f0 <__assert_fail@plt+0xdc0>
   12894:	ldr	r0, [sp, #4]
   12898:	ldr	r1, [sp]
   1289c:	mov	r2, r9
   128a0:	bl	12784 <__assert_fail@plt+0xd54>
   128a4:	ldr	r0, [sp, #8]
   128a8:	add	r7, sp, #15
   128ac:	mov	r1, r8
   128b0:	mov	r2, r7
   128b4:	bl	1aec8 <__assert_fail@plt+0x9498>
   128b8:	movw	r8, #20972	; 0x51ec
   128bc:	mov	r5, r0
   128c0:	sub	r0, r7, r0
   128c4:	movt	r8, #3
   128c8:	add	r4, r0, #20
   128cc:	ldr	r6, [r8, #8]
   128d0:	cmp	r4, #8
   128d4:	bhi	128fc <__assert_fail@plt+0xecc>
   128d8:	mvn	r0, #10
   128dc:	mov	r1, #48	; 0x30
   128e0:	sub	r0, r0, r7
   128e4:	add	r7, r0, r5
   128e8:	mov	r0, r6
   128ec:	mov	r2, r7
   128f0:	bl	118ec <memset@plt>
   128f4:	add	r6, r6, r7
   128f8:	str	r6, [r8, #8]
   128fc:	mov	r0, r6
   12900:	mov	r1, r5
   12904:	mov	r2, r4
   12908:	bl	116dc <memcpy@plt>
   1290c:	add	r0, r6, r4
   12910:	str	r0, [r8, #8]
   12914:	sub	sp, fp, #28
   12918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1291c:	add	r6, sp, #15
   12920:	mov	r0, r2
   12924:	mov	r1, r8
   12928:	mov	r2, r6
   1292c:	bl	1aec8 <__assert_fail@plt+0x9498>
   12930:	mov	r1, r0
   12934:	sub	r0, r6, r0
   12938:	movw	r6, #20972	; 0x51ec
   1293c:	movt	r6, #3
   12940:	add	r4, r0, #20
   12944:	ldr	r5, [r6, #8]
   12948:	mov	r2, r4
   1294c:	mov	r0, r5
   12950:	bl	116dc <memcpy@plt>
   12954:	add	r0, r5, r4
   12958:	str	r0, [r6, #8]
   1295c:	sub	sp, fp, #28
   12960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12968:	add	fp, sp, #28
   1296c:	sub	sp, sp, #180	; 0xb4
   12970:	ldr	r7, [fp, #8]
   12974:	mov	r8, r2
   12978:	mov	r2, #0
   1297c:	mov	r4, r7
   12980:	str	r2, [r7, #12]
   12984:	strb	r2, [r7, #250]	; 0xfa
   12988:	str	r2, [r4, #8]!
   1298c:	orrs	r2, r0, r1
   12990:	bne	129a0 <__assert_fail@plt+0xf70>
   12994:	subs	r2, r8, #2
   12998:	sbcs	r2, r3, #0
   1299c:	bcc	12f74 <__assert_fail@plt+0x1544>
   129a0:	tst	r8, #1
   129a4:	str	r7, [fp, #-92]	; 0xffffffa4
   129a8:	str	r4, [fp, #-96]	; 0xffffffa0
   129ac:	bne	12a50 <__assert_fail@plt+0x1020>
   129b0:	orrs	r2, r8, r3
   129b4:	beq	12f7c <__assert_fail@plt+0x154c>
   129b8:	mov	r6, #0
   129bc:	mov	r4, r8
   129c0:	mov	r2, r3
   129c4:	lsrs	r2, r2, #1
   129c8:	sub	r6, r6, #1
   129cc:	rrx	r7, r4
   129d0:	tst	r4, #2
   129d4:	mov	r4, r7
   129d8:	beq	129c4 <__assert_fail@plt+0xf94>
   129dc:	rsb	r9, r6, #0
   129e0:	add	r4, r6, #32
   129e4:	mvn	r5, #31
   129e8:	add	lr, r6, #64	; 0x40
   129ec:	lsr	r2, r0, r9
   129f0:	lsr	r7, r1, r9
   129f4:	orr	ip, r2, r1, lsl r4
   129f8:	sub	r2, r5, r6
   129fc:	lsr	r5, r3, r9
   12a00:	cmp	r2, #0
   12a04:	lsr	r6, r0, r2
   12a08:	lsrge	ip, r1, r2
   12a0c:	movwge	r7, #0
   12a10:	movwge	r5, #0
   12a14:	orr	r1, r6, r1, lsl lr
   12a18:	cmp	r4, #0
   12a1c:	lslge	r1, r0, r4
   12a20:	cmp	r2, #0
   12a24:	lsl	r0, r0, lr
   12a28:	orr	r1, r1, r5
   12a2c:	str	r1, [fp, #-88]	; 0xffffffa8
   12a30:	lsr	r1, r8, r9
   12a34:	orr	r6, r1, r3, lsl r4
   12a38:	mov	r1, r7
   12a3c:	lsrge	r6, r3, r2
   12a40:	cmp	r4, #0
   12a44:	movwge	r0, #0
   12a48:	orr	r8, r0, r6
   12a4c:	b	12fdc <__assert_fail@plt+0x15ac>
   12a50:	str	r3, [fp, #-88]	; 0xffffffa8
   12a54:	mov	ip, r0
   12a58:	orrs	r0, ip, r1
   12a5c:	beq	13004 <__assert_fail@plt+0x15d4>
   12a60:	add	r0, r7, #8
   12a64:	mov	r5, #0
   12a68:	mov	r6, #3
   12a6c:	mov	r4, #0
   12a70:	str	r0, [fp, #-84]	; 0xffffffac
   12a74:	add	r0, r7, #223	; 0xdf
   12a78:	str	r0, [fp, #-100]	; 0xffffff9c
   12a7c:	add	r0, r7, #225	; 0xe1
   12a80:	str	r0, [sp, #104]	; 0x68
   12a84:	add	r0, r7, #24
   12a88:	str	r0, [sp, #100]	; 0x64
   12a8c:	add	r0, r7, #226	; 0xe2
   12a90:	str	r0, [sp, #96]	; 0x60
   12a94:	add	r0, r7, #32
   12a98:	mov	r7, ip
   12a9c:	str	r0, [sp, #92]	; 0x5c
   12aa0:	movw	r0, #3576	; 0xdf8
   12aa4:	mov	r9, r1
   12aa8:	str	r7, [fp, #-76]	; 0xffffffb4
   12aac:	str	r4, [fp, #-72]	; 0xffffffb8
   12ab0:	movt	r0, #2
   12ab4:	ldr	sl, [r0, r4, lsl #4]!
   12ab8:	ldr	ip, [r0, #4]
   12abc:	add	r1, r0, #8
   12ac0:	str	r1, [fp, #-80]	; 0xffffffb0
   12ac4:	b	12ad0 <__assert_fail@plt+0x10a0>
   12ac8:	mov	r8, r0
   12acc:	str	r1, [fp, #-76]	; 0xffffffb4
   12ad0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ad4:	umull	r0, r1, r8, sl
   12ad8:	mov	lr, r6
   12adc:	mla	r1, r8, ip, r1
   12ae0:	mov	r3, lr
   12ae4:	mla	r2, r2, sl, r1
   12ae8:	umull	r1, r4, r0, r5
   12aec:	umlal	r1, r4, r2, r6
   12af0:	umull	r6, r7, r0, r6
   12af4:	adds	r1, r1, r7
   12af8:	umull	r6, r7, r2, lr
   12afc:	adc	r4, r4, #0
   12b00:	subs	r1, r1, r6
   12b04:	sbcs	r1, r4, r7
   12b08:	umull	r6, r7, r2, r5
   12b0c:	mov	r1, #0
   12b10:	movwcc	r1, #1
   12b14:	cmp	r1, #0
   12b18:	addne	r7, r7, #1
   12b1c:	adds	r1, r6, r4
   12b20:	adc	r4, r7, #0
   12b24:	ldr	r7, [fp, #-76]	; 0xffffffb4
   12b28:	subs	r6, r7, r1
   12b2c:	sbcs	r6, r9, r4
   12b30:	bcc	12f10 <__assert_fail@plt+0x14e0>
   12b34:	subs	r6, r7, r1
   12b38:	umull	r1, r7, r6, sl
   12b3c:	sbc	r4, r9, r4
   12b40:	mla	r6, r6, ip, r7
   12b44:	ldr	r7, [fp, #-80]	; 0xffffffb0
   12b48:	mla	r4, r4, sl, r6
   12b4c:	ldrd	r6, [r7]
   12b50:	subs	r6, r6, r1
   12b54:	sbcs	r6, r7, r4
   12b58:	ldr	r7, [fp, #-76]	; 0xffffffb4
   12b5c:	bcc	12f10 <__assert_fail@plt+0x14e0>
   12b60:	str	r2, [fp, #-88]	; 0xffffffa8
   12b64:	mov	r9, r4
   12b68:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12b6c:	ldrb	lr, [r8, #250]	; 0xfa
   12b70:	sub	r2, lr, #1
   12b74:	cmp	lr, #0
   12b78:	beq	12ee4 <__assert_fail@plt+0x14b4>
   12b7c:	str	r2, [sp, #84]	; 0x54
   12b80:	mov	r2, #8
   12b84:	str	lr, [sp, #88]	; 0x58
   12b88:	add	r6, r2, lr, lsl #3
   12b8c:	add	lr, lr, #223	; 0xdf
   12b90:	ldr	r4, [fp, #-92]	; 0xffffffa4
   12b94:	ldr	r7, [r4, r6]!
   12b98:	ldr	r4, [r4, #4]
   12b9c:	subs	r8, r3, r7
   12ba0:	sbcs	r2, r5, r4
   12ba4:	bcs	12dd4 <__assert_fail@plt+0x13a4>
   12ba8:	sub	r2, lr, #224	; 0xe0
   12bac:	sub	r7, lr, #1
   12bb0:	sub	r6, r6, #8
   12bb4:	cmp	r2, #0
   12bb8:	mov	lr, r7
   12bbc:	bgt	12b90 <__assert_fail@plt+0x1160>
   12bc0:	ldr	r4, [sp, #84]	; 0x54
   12bc4:	sub	r7, r7, #224	; 0xe0
   12bc8:	mov	r6, r3
   12bcc:	ldr	lr, [sp, #88]	; 0x58
   12bd0:	cmp	r4, r7
   12bd4:	ble	12e10 <__assert_fail@plt+0x13e0>
   12bd8:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12bdc:	mvn	r2, r7
   12be0:	str	r7, [fp, #-76]	; 0xffffffb4
   12be4:	add	r2, r2, lr
   12be8:	cmp	r2, #1
   12bec:	bls	12eac <__assert_fail@plt+0x147c>
   12bf0:	str	r2, [sp, #72]	; 0x48
   12bf4:	sub	r2, lr, #2
   12bf8:	sub	r4, r2, r7
   12bfc:	mov	r2, #8
   12c00:	umull	r6, r2, r4, r2
   12c04:	str	r4, [sp, #80]	; 0x50
   12c08:	add	r4, r8, lr, lsl #3
   12c0c:	cmp	r2, #0
   12c10:	add	r7, r4, #16
   12c14:	movwne	r2, #1
   12c18:	cmp	r6, r7
   12c1c:	str	r7, [sp, #68]	; 0x44
   12c20:	bhi	12dc8 <__assert_fail@plt+0x1398>
   12c24:	cmp	r2, #0
   12c28:	bne	12dc8 <__assert_fail@plt+0x1398>
   12c2c:	mov	lr, r6
   12c30:	ldr	r6, [sp, #88]	; 0x58
   12c34:	add	r4, r8, r6
   12c38:	add	r7, r4, #224	; 0xe0
   12c3c:	ldr	r4, [sp, #80]	; 0x50
   12c40:	str	r7, [sp, #76]	; 0x4c
   12c44:	cmp	r4, r7
   12c48:	bhi	12ea0 <__assert_fail@plt+0x1470>
   12c4c:	ldr	r7, [fp, #-84]	; 0xffffffac
   12c50:	add	r7, r7, r6, lsl #3
   12c54:	cmp	lr, r7
   12c58:	bhi	12dc4 <__assert_fail@plt+0x1394>
   12c5c:	cmp	r2, #0
   12c60:	bne	12dc4 <__assert_fail@plt+0x1394>
   12c64:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12c68:	ldr	lr, [sp, #88]	; 0x58
   12c6c:	add	r2, r2, lr
   12c70:	cmp	r4, r2
   12c74:	bhi	12e1c <__assert_fail@plt+0x13ec>
   12c78:	ldr	r6, [sp, #96]	; 0x60
   12c7c:	ldr	r8, [fp, #-76]	; 0xffffffb4
   12c80:	add	r4, r6, r8
   12c84:	str	r4, [sp, #80]	; 0x50
   12c88:	ldr	r6, [sp, #104]	; 0x68
   12c8c:	add	r4, r6, lr
   12c90:	add	r6, r6, r8
   12c94:	str	r6, [sp, #56]	; 0x38
   12c98:	cmp	r6, r4
   12c9c:	mov	r6, #0
   12ca0:	str	r4, [sp, #64]	; 0x40
   12ca4:	movwcc	r6, #1
   12ca8:	str	r6, [sp, #36]	; 0x24
   12cac:	ldr	r6, [sp, #80]	; 0x50
   12cb0:	ldr	lr, [sp, #76]	; 0x4c
   12cb4:	cmp	r6, lr
   12cb8:	mov	r6, #0
   12cbc:	movwcc	r6, #1
   12cc0:	str	r6, [sp, #32]
   12cc4:	ldr	lr, [sp, #100]	; 0x64
   12cc8:	add	r6, lr, r8, lsl #3
   12ccc:	mov	r8, #0
   12cd0:	cmp	r4, r6
   12cd4:	str	r6, [sp, #60]	; 0x3c
   12cd8:	movwhi	r8, #1
   12cdc:	str	r8, [sp, #44]	; 0x2c
   12ce0:	ldr	r4, [sp, #80]	; 0x50
   12ce4:	ldr	r8, [sp, #68]	; 0x44
   12ce8:	cmp	r4, r8
   12cec:	mov	r4, #0
   12cf0:	movwcc	r4, #1
   12cf4:	str	r4, [sp, #40]	; 0x28
   12cf8:	ldr	r4, [sp, #88]	; 0x58
   12cfc:	add	r4, lr, r4, lsl #3
   12d00:	str	r4, [sp, #52]	; 0x34
   12d04:	ldr	r6, [sp, #56]	; 0x38
   12d08:	cmp	r6, r4
   12d0c:	mov	r4, #0
   12d10:	movwcc	r4, #1
   12d14:	str	r4, [sp, #56]	; 0x38
   12d18:	ldr	r6, [sp, #92]	; 0x5c
   12d1c:	ldr	r4, [fp, #-76]	; 0xffffffb4
   12d20:	add	lr, r6, r4, lsl #3
   12d24:	ldr	r4, [sp, #76]	; 0x4c
   12d28:	cmp	r4, lr
   12d2c:	mov	r4, #0
   12d30:	movwhi	r4, #1
   12d34:	str	r4, [sp, #48]	; 0x30
   12d38:	ldr	r4, [sp, #60]	; 0x3c
   12d3c:	ldr	r6, [sp, #52]	; 0x34
   12d40:	cmp	r4, r6
   12d44:	mov	r4, #0
   12d48:	movwcc	r4, #1
   12d4c:	cmp	lr, r8
   12d50:	mov	r8, #0
   12d54:	str	r4, [sp, #76]	; 0x4c
   12d58:	movwcc	r8, #1
   12d5c:	ldr	r4, [sp, #80]	; 0x50
   12d60:	cmp	r4, r6
   12d64:	ldr	r6, [sp, #64]	; 0x40
   12d68:	mov	r4, #0
   12d6c:	movwcc	r4, #1
   12d70:	cmp	r6, lr
   12d74:	mov	r6, #0
   12d78:	movwhi	r6, #1
   12d7c:	tst	r6, r4
   12d80:	bne	12dc4 <__assert_fail@plt+0x1394>
   12d84:	ldr	r6, [sp, #76]	; 0x4c
   12d88:	mvn	lr, #15
   12d8c:	ands	r4, r8, r6
   12d90:	bne	12dc4 <__assert_fail@plt+0x1394>
   12d94:	ldr	r4, [sp, #56]	; 0x38
   12d98:	ldr	r6, [sp, #48]	; 0x30
   12d9c:	sub	r8, fp, #32
   12da0:	ands	r4, r6, r4
   12da4:	bne	12dc4 <__assert_fail@plt+0x1394>
   12da8:	ldr	r4, [sp, #44]	; 0x2c
   12dac:	ldr	r6, [sp, #40]	; 0x28
   12db0:	ands	r4, r6, r4
   12db4:	ldreq	r4, [sp, #36]	; 0x24
   12db8:	ldreq	r6, [sp, #32]
   12dbc:	andseq	r4, r6, r4
   12dc0:	beq	12e28 <__assert_fail@plt+0x13f8>
   12dc4:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12dc8:	ldr	lr, [sp, #88]	; 0x58
   12dcc:	ldr	r4, [sp, #84]	; 0x54
   12dd0:	b	12eac <__assert_fail@plt+0x147c>
   12dd4:	eor	r2, r7, r3
   12dd8:	eor	r4, r4, r5
   12ddc:	mov	r6, r3
   12de0:	orrs	r2, r2, r4
   12de4:	ldr	r4, [sp, #84]	; 0x54
   12de8:	bne	12e00 <__assert_fail@plt+0x13d0>
   12dec:	ldr	r4, [fp, #-92]	; 0xffffffa4
   12df0:	ldrb	r2, [r4, lr]
   12df4:	add	r2, r2, #1
   12df8:	strb	r2, [r4, lr]
   12dfc:	b	12ac8 <__assert_fail@plt+0x1098>
   12e00:	sub	r7, lr, #224	; 0xe0
   12e04:	ldr	lr, [sp, #88]	; 0x58
   12e08:	cmp	r4, r7
   12e0c:	bgt	12bd8 <__assert_fail@plt+0x11a8>
   12e10:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12e14:	mov	r2, r7
   12e18:	b	12ee8 <__assert_fail@plt+0x14b8>
   12e1c:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12e20:	ldr	r4, [sp, #84]	; 0x54
   12e24:	b	12eac <__assert_fail@plt+0x147c>
   12e28:	ldr	r6, [sp, #72]	; 0x48
   12e2c:	ldr	r4, [sp, #84]	; 0x54
   12e30:	bic	r6, r6, #1
   12e34:	sub	r4, r4, r6
   12e38:	str	r4, [sp, #84]	; 0x54
   12e3c:	str	r6, [sp, #80]	; 0x50
   12e40:	sub	r4, r7, #8
   12e44:	subs	r6, r6, #2
   12e48:	vld1.64	{d16-d17}, [r4]
   12e4c:	vst1.64	{d16-d17}, [r7], lr
   12e50:	ldrh	r4, [r2, #-1]
   12e54:	strh	r4, [fp, #-32]	; 0xffffffe0
   12e58:	vld1.16	{d16[0]}, [r8 :16]
   12e5c:	vmovl.u8	q8, d16
   12e60:	vmovl.u16	q8, d16
   12e64:	vmov.32	r4, d16[1]
   12e68:	strb	r4, [r2, #1]
   12e6c:	vmov.32	r4, d16[0]
   12e70:	strb	r4, [r2]
   12e74:	sub	r2, r2, #2
   12e78:	bne	12e40 <__assert_fail@plt+0x1410>
   12e7c:	ldr	r2, [sp, #72]	; 0x48
   12e80:	ldr	r7, [sp, #80]	; 0x50
   12e84:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12e88:	ldr	lr, [sp, #88]	; 0x58
   12e8c:	ldr	r4, [sp, #84]	; 0x54
   12e90:	cmp	r2, r7
   12e94:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12e98:	bne	12eac <__assert_fail@plt+0x147c>
   12e9c:	b	12ee4 <__assert_fail@plt+0x14b4>
   12ea0:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12ea4:	ldr	r4, [sp, #84]	; 0x54
   12ea8:	mov	lr, r6
   12eac:	lsl	r2, r4, #3
   12eb0:	add	r8, r8, r2
   12eb4:	sub	r2, r2, #8
   12eb8:	ldrd	r6, [r8, #16]
   12ebc:	strd	r6, [r8, #24]
   12ec0:	ldr	r8, [fp, #-92]	; 0xffffffa4
   12ec4:	add	r7, r8, r4
   12ec8:	sub	r4, r4, #1
   12ecc:	ldrb	r6, [r7, #224]	; 0xe0
   12ed0:	strb	r6, [r7, #225]	; 0xe1
   12ed4:	ldr	r6, [fp, #-76]	; 0xffffffb4
   12ed8:	cmp	r4, r6
   12edc:	bgt	12eb0 <__assert_fail@plt+0x1480>
   12ee0:	mov	r2, r6
   12ee4:	mov	r6, r3
   12ee8:	add	r2, r2, #1
   12eec:	mov	r3, #1
   12ef0:	add	r4, r8, r2, lsl #3
   12ef4:	add	r2, r8, r2
   12ef8:	str	r6, [r4, #16]
   12efc:	str	r5, [r4, #20]
   12f00:	strb	r3, [r2, #224]	; 0xe0
   12f04:	add	r2, lr, #1
   12f08:	strb	r2, [r8, #250]	; 0xfa
   12f0c:	b	12ac8 <__assert_fail@plt+0x1098>
   12f10:	ldr	r4, [fp, #-72]	; 0xffffffb8
   12f14:	movw	r0, #14376	; 0x3828
   12f18:	mov	r6, r3
   12f1c:	mov	r1, r9
   12f20:	movt	r0, #2
   12f24:	add	r4, r4, #1
   12f28:	ldrb	r0, [r0, r4]
   12f2c:	adds	r6, r3, r0
   12f30:	lsr	r0, r4, #2
   12f34:	adc	r5, r5, #0
   12f38:	cmp	r0, #166	; 0xa6
   12f3c:	bhi	12f48 <__assert_fail@plt+0x1518>
   12f40:	orrs	r2, r7, r1
   12f44:	bne	12aa0 <__assert_fail@plt+0x1070>
   12f48:	ldr	r7, [fp, #-92]	; 0xffffffa4
   12f4c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12f50:	cmp	r0, #166	; 0xa6
   12f54:	bls	13020 <__assert_fail@plt+0x15f0>
   12f58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f5c:	ldr	r4, [fp, #-96]	; 0xffffffa0
   12f60:	orrs	r6, r0, r1
   12f64:	bne	152f4 <__assert_fail@plt+0x38c4>
   12f68:	subs	r0, r8, #2
   12f6c:	sbcs	r0, r3, #0
   12f70:	bcs	152f4 <__assert_fail@plt+0x38c4>
   12f74:	sub	sp, fp, #28
   12f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f7c:	mov	ip, #0
   12f80:	tst	r0, #1
   12f84:	mov	r3, #0
   12f88:	bne	12fb0 <__assert_fail@plt+0x1580>
   12f8c:	mov	r3, #0
   12f90:	mov	r7, r0
   12f94:	mov	r6, r1
   12f98:	lsrs	r6, r6, #1
   12f9c:	add	r3, r3, #1
   12fa0:	rrx	r5, r7
   12fa4:	tst	r7, #2
   12fa8:	mov	r7, r5
   12fac:	beq	12f98 <__assert_fail@plt+0x1568>
   12fb0:	lsr	r0, r0, r3
   12fb4:	rsb	r7, r3, #32
   12fb8:	add	r9, r3, #64	; 0x40
   12fbc:	orr	r8, r0, r1, lsl r7
   12fc0:	sub	r0, r3, #32
   12fc4:	cmp	r0, #0
   12fc8:	lsrge	r8, r1, r0
   12fcc:	lsr	r0, r1, r3
   12fd0:	mov	r1, #0
   12fd4:	movwge	r0, #0
   12fd8:	str	r0, [fp, #-88]	; 0xffffffa8
   12fdc:	ldr	r7, [fp, #-92]	; 0xffffffa4
   12fe0:	mov	r0, #2
   12fe4:	mov	r3, #0
   12fe8:	str	r0, [r7, #16]
   12fec:	mov	r0, #1
   12ff0:	str	r3, [r7, #20]
   12ff4:	strb	r9, [r7, #224]	; 0xe0
   12ff8:	strb	r0, [r7, #250]	; 0xfa
   12ffc:	orrs	r0, ip, r1
   13000:	bne	12a60 <__assert_fail@plt+0x1030>
   13004:	mov	r0, #0
   13008:	mov	r6, #3
   1300c:	mov	r1, #0
   13010:	mov	r5, #0
   13014:	mov	r4, #0
   13018:	str	r0, [fp, #-76]	; 0xffffffb4
   1301c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   13020:	add	r0, r7, #8
   13024:	str	r1, [fp, #-100]	; 0xffffff9c
   13028:	str	r0, [sp, #100]	; 0x64
   1302c:	add	r0, r7, #223	; 0xdf
   13030:	str	r0, [sp, #96]	; 0x60
   13034:	add	r0, r7, #225	; 0xe1
   13038:	str	r0, [sp, #92]	; 0x5c
   1303c:	add	r0, r7, #24
   13040:	str	r0, [sp, #104]	; 0x68
   13044:	add	r0, r7, #226	; 0xe2
   13048:	str	r0, [sp, #88]	; 0x58
   1304c:	add	r0, r7, #32
   13050:	str	r0, [sp, #84]	; 0x54
   13054:	b	15138 <__assert_fail@plt+0x3708>
   13058:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1305c:	movw	r5, #14376	; 0x3828
   13060:	movt	r5, #2
   13064:	add	r5, r5, r1
   13068:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1306c:	ldrb	r5, [r5, #1]
   13070:	adds	r1, r1, r5
   13074:	str	r1, [sp, #76]	; 0x4c
   13078:	ldr	r1, [fp, #-84]	; 0xffffffac
   1307c:	adc	r1, r1, #0
   13080:	str	r1, [fp, #-88]	; 0xffffffa8
   13084:	b	13a18 <__assert_fail@plt+0x1fe8>
   13088:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1308c:	movw	r5, #14376	; 0x3828
   13090:	movt	r5, #2
   13094:	add	r5, r5, r1
   13098:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1309c:	ldrb	r4, [r5, #1]
   130a0:	ldrb	r3, [r5, #2]
   130a4:	adds	r4, r1, r4
   130a8:	ldr	r1, [fp, #-84]	; 0xffffffac
   130ac:	adc	r5, r1, #0
   130b0:	adds	r1, r4, r3
   130b4:	str	r1, [sp, #76]	; 0x4c
   130b8:	adc	r1, r5, #0
   130bc:	str	r1, [fp, #-88]	; 0xffffffa8
   130c0:	b	13df4 <__assert_fail@plt+0x23c4>
   130c4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   130c8:	movw	r5, #14376	; 0x3828
   130cc:	movt	r5, #2
   130d0:	add	r5, r5, r1
   130d4:	ldrb	r4, [r5, #1]
   130d8:	ldrb	r3, [r5, #2]
   130dc:	ldrb	r1, [r5, #3]
   130e0:	ldr	r5, [fp, #-80]	; 0xffffffb0
   130e4:	adds	r4, r5, r4
   130e8:	ldr	r5, [fp, #-84]	; 0xffffffac
   130ec:	adc	r5, r5, #0
   130f0:	adds	r4, r4, r3
   130f4:	adc	r5, r5, #0
   130f8:	adds	r1, r4, r1
   130fc:	str	r1, [sp, #76]	; 0x4c
   13100:	adc	r1, r5, #0
   13104:	str	r1, [fp, #-88]	; 0xffffffa8
   13108:	b	141d0 <__assert_fail@plt+0x27a0>
   1310c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13110:	movw	r5, #14376	; 0x3828
   13114:	movt	r5, #2
   13118:	add	r5, r5, r1
   1311c:	ldrb	r4, [r5, #1]
   13120:	ldrb	r3, [r5, #2]
   13124:	ldrb	r1, [r5, #3]
   13128:	ldrb	r8, [r5, #4]
   1312c:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13130:	adds	r4, r5, r4
   13134:	ldr	r5, [fp, #-84]	; 0xffffffac
   13138:	adc	r5, r5, #0
   1313c:	adds	r4, r4, r3
   13140:	adc	r5, r5, #0
   13144:	adds	r4, r4, r1
   13148:	adc	r5, r5, #0
   1314c:	adds	r1, r4, r8
   13150:	str	r1, [sp, #76]	; 0x4c
   13154:	adc	r1, r5, #0
   13158:	str	r1, [fp, #-88]	; 0xffffffa8
   1315c:	b	145ac <__assert_fail@plt+0x2b7c>
   13160:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13164:	movw	r5, #14376	; 0x3828
   13168:	movt	r5, #2
   1316c:	add	r5, r5, r1
   13170:	ldrb	r1, [r5, #4]
   13174:	ldrb	r4, [r5, #1]
   13178:	ldrb	r3, [r5, #2]
   1317c:	ldrb	r8, [r5, #3]
   13180:	ldrb	r5, [r5, #5]
   13184:	str	r1, [fp, #-88]	; 0xffffffa8
   13188:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1318c:	adds	r4, r1, r4
   13190:	ldr	r1, [fp, #-84]	; 0xffffffac
   13194:	adc	sl, r1, #0
   13198:	adds	r4, r4, r3
   1319c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   131a0:	adc	r1, sl, #0
   131a4:	adds	r4, r4, r8
   131a8:	adc	r1, r1, #0
   131ac:	adds	r4, r4, r3
   131b0:	adc	r1, r1, #0
   131b4:	adds	r3, r4, r5
   131b8:	adc	r1, r1, #0
   131bc:	str	r3, [sp, #76]	; 0x4c
   131c0:	str	r1, [fp, #-88]	; 0xffffffa8
   131c4:	b	14988 <__assert_fail@plt+0x2f58>
   131c8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   131cc:	movw	r5, #14376	; 0x3828
   131d0:	movt	r5, #2
   131d4:	add	r5, r5, r1
   131d8:	ldrb	r1, [r5, #4]
   131dc:	ldrb	r4, [r5, #1]
   131e0:	ldrb	r3, [r5, #2]
   131e4:	ldrb	r8, [r5, #3]
   131e8:	str	r1, [fp, #-88]	; 0xffffffa8
   131ec:	ldr	r1, [fp, #-80]	; 0xffffffb0
   131f0:	adds	r4, r1, r4
   131f4:	ldr	r1, [fp, #-84]	; 0xffffffac
   131f8:	adc	sl, r1, #0
   131fc:	adds	r4, r4, r3
   13200:	adc	r1, sl, #0
   13204:	adds	r4, r4, r8
   13208:	adc	r3, r1, #0
   1320c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13210:	adds	r1, r4, r1
   13214:	ldrb	r4, [r5, #5]
   13218:	ldrb	r5, [r5, #6]
   1321c:	adc	r3, r3, #0
   13220:	adds	r4, r1, r4
   13224:	adc	r1, r3, #0
   13228:	adds	r3, r4, r5
   1322c:	adc	r1, r1, #0
   13230:	str	r3, [sp, #76]	; 0x4c
   13234:	str	r1, [fp, #-88]	; 0xffffffa8
   13238:	b	14d64 <__assert_fail@plt+0x3334>
   1323c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13240:	movw	r6, #14376	; 0x3828
   13244:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13248:	movt	r6, #2
   1324c:	add	r1, r6, r1
   13250:	ldrb	r6, [r1, #1]
   13254:	ldrb	r5, [r1, #2]
   13258:	ldrb	r8, [r1, #3]
   1325c:	ldrb	r3, [r1, #4]
   13260:	adds	r6, r4, r6
   13264:	ldr	r4, [fp, #-84]	; 0xffffffac
   13268:	adc	r4, r4, #0
   1326c:	adds	r5, r6, r5
   13270:	adc	r4, r4, #0
   13274:	adds	r5, r5, r8
   13278:	adc	r4, r4, #0
   1327c:	adds	r6, r5, r3
   13280:	adc	r5, r4, #0
   13284:	ldrb	r4, [r1, #5]
   13288:	adds	r6, r6, r4
   1328c:	ldrb	r4, [r1, #6]
   13290:	ldrb	r1, [r1, #7]
   13294:	adc	r5, r5, #0
   13298:	adds	r6, r6, r4
   1329c:	adc	r5, r5, #0
   132a0:	adds	r9, r6, r1
   132a4:	adc	r1, r5, #0
   132a8:	str	r1, [sp, #80]	; 0x50
   132ac:	str	r2, [fp, #-88]	; 0xffffffa8
   132b0:	mov	r8, r0
   132b4:	ldr	r0, [fp, #-92]	; 0xffffffa4
   132b8:	ldrb	r6, [r0, #250]	; 0xfa
   132bc:	sub	r3, r6, #1
   132c0:	cmp	r6, #0
   132c4:	beq	135f0 <__assert_fail@plt+0x1bc0>
   132c8:	mov	r0, #8
   132cc:	str	r6, [sp, #76]	; 0x4c
   132d0:	add	r2, r0, r6, lsl #3
   132d4:	add	r0, r6, #223	; 0xdf
   132d8:	ldr	r1, [fp, #-92]	; 0xffffffa4
   132dc:	ldr	r4, [r1, r2]!
   132e0:	subs	r6, r9, r4
   132e4:	ldr	r1, [r1, #4]
   132e8:	ldr	r6, [sp, #80]	; 0x50
   132ec:	sbcs	r6, r6, r1
   132f0:	bcs	13338 <__assert_fail@plt+0x1908>
   132f4:	sub	r4, r0, #1
   132f8:	sub	r0, r0, #224	; 0xe0
   132fc:	sub	r2, r2, #8
   13300:	cmp	r0, #0
   13304:	mov	r0, r4
   13308:	bgt	132d8 <__assert_fail@plt+0x18a8>
   1330c:	sub	r1, r4, #224	; 0xe0
   13310:	ldr	r6, [sp, #76]	; 0x4c
   13314:	cmp	r3, r1
   13318:	ble	13370 <__assert_fail@plt+0x1940>
   1331c:	mvn	r0, r1
   13320:	str	r9, [sp, #72]	; 0x48
   13324:	add	r4, r0, r6
   13328:	cmp	r4, #1
   1332c:	bhi	13378 <__assert_fail@plt+0x1948>
   13330:	mov	r5, r1
   13334:	b	135b0 <__assert_fail@plt+0x1b80>
   13338:	eor	r2, r4, r9
   1333c:	ldr	r4, [sp, #80]	; 0x50
   13340:	eor	r1, r1, r4
   13344:	orrs	r1, r2, r1
   13348:	bne	13360 <__assert_fail@plt+0x1930>
   1334c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   13350:	ldrb	r1, [r2, r0]
   13354:	add	r1, r1, #1
   13358:	strb	r1, [r2, r0]
   1335c:	b	1361c <__assert_fail@plt+0x1bec>
   13360:	sub	r1, r0, #224	; 0xe0
   13364:	ldr	r6, [sp, #76]	; 0x4c
   13368:	cmp	r3, r1
   1336c:	bgt	1331c <__assert_fail@plt+0x18ec>
   13370:	mov	r3, r1
   13374:	b	135f0 <__assert_fail@plt+0x1bc0>
   13378:	sub	r0, r6, #2
   1337c:	str	r1, [sp, #68]	; 0x44
   13380:	sub	r2, r0, r1
   13384:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13388:	mov	r0, #8
   1338c:	umull	r5, r0, r2, r0
   13390:	cmp	r0, #0
   13394:	str	r5, [sp, #56]	; 0x38
   13398:	movwne	r0, #1
   1339c:	add	r1, r1, r6, lsl #3
   133a0:	add	r1, r1, #16
   133a4:	cmp	r5, r1
   133a8:	bhi	135ac <__assert_fail@plt+0x1b7c>
   133ac:	cmp	r0, #0
   133b0:	str	r1, [sp, #64]	; 0x40
   133b4:	bne	135ac <__assert_fail@plt+0x1b7c>
   133b8:	ldr	r1, [fp, #-92]	; 0xffffffa4
   133bc:	add	r1, r1, r6
   133c0:	add	r1, r1, #224	; 0xe0
   133c4:	cmp	r2, r1
   133c8:	str	r1, [sp, #60]	; 0x3c
   133cc:	bhi	135ac <__assert_fail@plt+0x1b7c>
   133d0:	ldr	r1, [sp, #100]	; 0x64
   133d4:	add	r9, r1, r6, lsl #3
   133d8:	ldr	r1, [sp, #56]	; 0x38
   133dc:	cmp	r1, r9
   133e0:	bhi	135ac <__assert_fail@plt+0x1b7c>
   133e4:	cmp	r0, #0
   133e8:	bne	135ac <__assert_fail@plt+0x1b7c>
   133ec:	ldr	r0, [sp, #96]	; 0x60
   133f0:	add	r0, r0, r6
   133f4:	cmp	r2, r0
   133f8:	bhi	135ac <__assert_fail@plt+0x1b7c>
   133fc:	str	r4, [sp, #56]	; 0x38
   13400:	ldr	r1, [sp, #88]	; 0x58
   13404:	ldr	r4, [sp, #68]	; 0x44
   13408:	add	r5, r1, r4
   1340c:	ldr	r1, [sp, #92]	; 0x5c
   13410:	add	r2, r1, r6
   13414:	add	r1, r1, r4
   13418:	mov	r4, r5
   1341c:	str	r2, [sp, #52]	; 0x34
   13420:	str	r1, [sp, #40]	; 0x28
   13424:	cmp	r1, r2
   13428:	mov	r1, #0
   1342c:	movwcc	r1, #1
   13430:	str	r1, [sp, #24]
   13434:	str	r5, [sp, #48]	; 0x30
   13438:	ldr	r1, [sp, #60]	; 0x3c
   1343c:	cmp	r5, r1
   13440:	mov	r1, #0
   13444:	movwcc	r1, #1
   13448:	str	r1, [sp, #20]
   1344c:	ldr	r5, [sp, #104]	; 0x68
   13450:	ldr	r1, [sp, #68]	; 0x44
   13454:	add	r1, r5, r1, lsl #3
   13458:	cmp	r2, r1
   1345c:	mov	r2, #0
   13460:	str	r1, [sp, #44]	; 0x2c
   13464:	movwhi	r2, #1
   13468:	str	r2, [sp, #32]
   1346c:	mov	r2, #0
   13470:	ldr	r1, [sp, #64]	; 0x40
   13474:	cmp	r4, r1
   13478:	add	r1, r5, r6, lsl #3
   1347c:	movwcc	r2, #1
   13480:	str	r2, [sp, #28]
   13484:	ldr	r2, [sp, #40]	; 0x28
   13488:	cmp	r2, r1
   1348c:	mov	r2, #0
   13490:	movwcc	r2, #1
   13494:	str	r2, [sp, #40]	; 0x28
   13498:	ldr	r2, [sp, #84]	; 0x54
   1349c:	ldr	r4, [sp, #68]	; 0x44
   134a0:	add	r2, r2, r4, lsl #3
   134a4:	ldr	r4, [sp, #60]	; 0x3c
   134a8:	cmp	r4, r2
   134ac:	mov	r4, #0
   134b0:	movwhi	r4, #1
   134b4:	str	r4, [sp, #36]	; 0x24
   134b8:	ldr	r4, [sp, #44]	; 0x2c
   134bc:	cmp	r4, r1
   134c0:	mov	r4, #0
   134c4:	movwcc	r4, #1
   134c8:	str	r4, [sp, #60]	; 0x3c
   134cc:	ldr	r4, [sp, #64]	; 0x40
   134d0:	ldr	r5, [sp, #48]	; 0x30
   134d4:	ldr	r6, [sp, #52]	; 0x34
   134d8:	cmp	r2, r4
   134dc:	mov	r4, #0
   134e0:	movwcc	r4, #1
   134e4:	cmp	r5, r1
   134e8:	mov	r1, #0
   134ec:	movwcc	r1, #1
   134f0:	cmp	r6, r2
   134f4:	mov	r2, #0
   134f8:	movwhi	r2, #1
   134fc:	tst	r2, r1
   13500:	ldreq	r1, [sp, #60]	; 0x3c
   13504:	andseq	r1, r4, r1
   13508:	bne	135a8 <__assert_fail@plt+0x1b78>
   1350c:	ldr	r1, [sp, #40]	; 0x28
   13510:	ldr	r2, [sp, #36]	; 0x24
   13514:	ldr	r6, [sp, #76]	; 0x4c
   13518:	ands	r1, r2, r1
   1351c:	ldr	r2, [sp, #56]	; 0x38
   13520:	bne	135ac <__assert_fail@plt+0x1b7c>
   13524:	ldr	r1, [sp, #32]
   13528:	ldr	r4, [sp, #28]
   1352c:	ldr	r5, [sp, #68]	; 0x44
   13530:	ands	r1, r4, r1
   13534:	ldreq	r1, [sp, #24]
   13538:	ldreq	r4, [sp, #20]
   1353c:	andseq	r1, r4, r1
   13540:	bne	135b0 <__assert_fail@plt+0x1b80>
   13544:	bic	r2, r2, #1
   13548:	sub	r4, fp, #64	; 0x40
   1354c:	sub	r3, r3, r2
   13550:	str	r2, [sp, #64]	; 0x40
   13554:	sub	r1, r9, #8
   13558:	subs	r2, r2, #2
   1355c:	vld1.64	{d16-d17}, [r1]
   13560:	mvn	r1, #15
   13564:	vst1.64	{d16-d17}, [r9], r1
   13568:	ldrh	r1, [r0, #-1]
   1356c:	strh	r1, [fp, #-64]	; 0xffffffc0
   13570:	vld1.16	{d16[0]}, [r4 :16]
   13574:	vmovl.u8	q8, d16
   13578:	vmovl.u16	q8, d16
   1357c:	vmov.32	r1, d16[1]
   13580:	strb	r1, [r0, #1]
   13584:	vmov.32	r1, d16[0]
   13588:	strb	r1, [r0]
   1358c:	sub	r0, r0, #2
   13590:	bne	13554 <__assert_fail@plt+0x1b24>
   13594:	ldr	r0, [sp, #56]	; 0x38
   13598:	ldr	r1, [sp, #64]	; 0x40
   1359c:	cmp	r0, r1
   135a0:	bne	135b0 <__assert_fail@plt+0x1b80>
   135a4:	b	135e8 <__assert_fail@plt+0x1bb8>
   135a8:	ldr	r6, [sp, #76]	; 0x4c
   135ac:	ldr	r5, [sp, #68]	; 0x44
   135b0:	ldr	r4, [fp, #-92]	; 0xffffffa4
   135b4:	lsl	r0, r3, #3
   135b8:	add	r1, r4, r0
   135bc:	sub	r0, r0, #8
   135c0:	ldr	r2, [r1, #16]
   135c4:	ldr	r9, [r1, #20]
   135c8:	str	r2, [r1, #24]
   135cc:	str	r9, [r1, #28]
   135d0:	add	r1, r4, r3
   135d4:	sub	r3, r3, #1
   135d8:	ldrb	r2, [r1, #224]	; 0xe0
   135dc:	cmp	r3, r5
   135e0:	strb	r2, [r1, #225]	; 0xe1
   135e4:	bgt	135b8 <__assert_fail@plt+0x1b88>
   135e8:	ldr	r9, [sp, #72]	; 0x48
   135ec:	mov	r3, r5
   135f0:	ldr	r2, [fp, #-92]	; 0xffffffa4
   135f4:	add	r0, r3, #1
   135f8:	ldr	r3, [sp, #80]	; 0x50
   135fc:	add	r1, r2, r0, lsl #3
   13600:	add	r0, r2, r0
   13604:	str	r9, [r1, #16]
   13608:	str	r3, [r1, #20]
   1360c:	mov	r1, #1
   13610:	strb	r1, [r0, #224]	; 0xe0
   13614:	add	r0, r6, #1
   13618:	strb	r0, [r2, #250]	; 0xfa
   1361c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   13620:	umull	r0, r1, r8, lr
   13624:	mla	r1, r8, ip, r1
   13628:	mla	r2, r3, lr, r1
   1362c:	subs	r1, sl, r0
   13630:	sbcs	r1, r7, r2
   13634:	bcc	15294 <__assert_fail@plt+0x3864>
   13638:	b	132ac <__assert_fail@plt+0x187c>
   1363c:	cmp	r5, #0
   13640:	str	r4, [sp, #68]	; 0x44
   13644:	bne	1396c <__assert_fail@plt+0x1f3c>
   13648:	ldr	r1, [sp, #96]	; 0x60
   1364c:	ldr	r4, [sp, #80]	; 0x50
   13650:	add	lr, r1, r4
   13654:	ldr	r1, [sp, #72]	; 0x48
   13658:	cmp	r1, lr
   1365c:	bhi	1396c <__assert_fail@plt+0x1f3c>
   13660:	ldr	r1, [sp, #88]	; 0x58
   13664:	ldr	r5, [fp, #-88]	; 0xffffffa8
   13668:	add	r1, r1, r5
   1366c:	str	r1, [sp, #64]	; 0x40
   13670:	ldr	r1, [sp, #92]	; 0x5c
   13674:	add	r8, r1, r4
   13678:	add	r1, r1, r5
   1367c:	str	r8, [sp, #72]	; 0x48
   13680:	str	r1, [sp, #48]	; 0x30
   13684:	cmp	r1, r8
   13688:	mov	r1, #0
   1368c:	movwcc	r1, #1
   13690:	str	r1, [sp, #24]
   13694:	ldr	r4, [sp, #64]	; 0x40
   13698:	ldr	r1, [sp, #68]	; 0x44
   1369c:	cmp	r4, r1
   136a0:	mov	r1, #0
   136a4:	movwcc	r1, #1
   136a8:	str	r1, [sp, #20]
   136ac:	ldr	r1, [sp, #104]	; 0x68
   136b0:	add	r1, r1, r5, lsl #3
   136b4:	str	r1, [sp, #60]	; 0x3c
   136b8:	ldr	r1, [sp, #72]	; 0x48
   136bc:	ldr	r8, [sp, #60]	; 0x3c
   136c0:	cmp	r1, r8
   136c4:	mov	r1, #0
   136c8:	movwhi	r1, #1
   136cc:	str	r1, [sp, #32]
   136d0:	mov	r1, #0
   136d4:	ldr	r8, [sp, #56]	; 0x38
   136d8:	cmp	r4, r8
   136dc:	movwcc	r1, #1
   136e0:	str	r1, [sp, #28]
   136e4:	ldr	r1, [sp, #80]	; 0x50
   136e8:	ldr	r4, [sp, #104]	; 0x68
   136ec:	add	r4, r4, r1, lsl #3
   136f0:	str	r4, [sp, #44]	; 0x2c
   136f4:	ldr	r1, [sp, #48]	; 0x30
   136f8:	cmp	r1, r4
   136fc:	mov	r1, #0
   13700:	movwcc	r1, #1
   13704:	str	r1, [sp, #40]	; 0x28
   13708:	ldr	r1, [sp, #84]	; 0x54
   1370c:	add	r5, r1, r5, lsl #3
   13710:	str	r5, [sp, #48]	; 0x30
   13714:	ldr	r1, [sp, #68]	; 0x44
   13718:	cmp	r1, r5
   1371c:	mov	r1, #0
   13720:	movwhi	r1, #1
   13724:	str	r1, [sp, #36]	; 0x24
   13728:	ldr	r1, [sp, #60]	; 0x3c
   1372c:	cmp	r1, r4
   13730:	mov	r1, #0
   13734:	mov	r4, #0
   13738:	movwcc	r1, #1
   1373c:	cmp	r5, r8
   13740:	mov	r8, #0
   13744:	str	r1, [sp, #68]	; 0x44
   13748:	movwcc	r4, #1
   1374c:	ldr	r1, [sp, #64]	; 0x40
   13750:	ldr	r5, [sp, #44]	; 0x2c
   13754:	cmp	r1, r5
   13758:	ldr	r1, [sp, #72]	; 0x48
   1375c:	ldr	r5, [sp, #48]	; 0x30
   13760:	movwcc	r8, #1
   13764:	cmp	r1, r5
   13768:	mov	r5, #0
   1376c:	movwhi	r5, #1
   13770:	tst	r5, r8
   13774:	bne	1382c <__assert_fail@plt+0x1dfc>
   13778:	ldr	r1, [sp, #68]	; 0x44
   1377c:	ands	r5, r4, r1
   13780:	bne	1382c <__assert_fail@plt+0x1dfc>
   13784:	ldr	r1, [sp, #40]	; 0x28
   13788:	ldr	r4, [sp, #36]	; 0x24
   1378c:	mvn	r8, #15
   13790:	ands	r5, r4, r1
   13794:	sub	r1, fp, #36	; 0x24
   13798:	bne	1382c <__assert_fail@plt+0x1dfc>
   1379c:	ldr	r4, [sp, #32]
   137a0:	ldr	r5, [sp, #28]
   137a4:	ands	r5, r5, r4
   137a8:	bne	1382c <__assert_fail@plt+0x1dfc>
   137ac:	ldr	r4, [sp, #24]
   137b0:	ldr	r5, [sp, #20]
   137b4:	ands	r5, r5, r4
   137b8:	bne	1382c <__assert_fail@plt+0x1dfc>
   137bc:	ldr	r4, [sp, #52]	; 0x34
   137c0:	bic	r5, r4, #1
   137c4:	ldr	r4, [sp, #76]	; 0x4c
   137c8:	sub	r4, r4, r5
   137cc:	str	r4, [sp, #76]	; 0x4c
   137d0:	str	r5, [sp, #72]	; 0x48
   137d4:	sub	r4, sl, #8
   137d8:	subs	r5, r5, #2
   137dc:	vld1.64	{d16-d17}, [r4]
   137e0:	vst1.64	{d16-d17}, [sl], r8
   137e4:	ldrh	r4, [lr, #-1]
   137e8:	strh	r4, [fp, #-36]	; 0xffffffdc
   137ec:	vld1.16	{d16[0]}, [r1 :16]
   137f0:	vmovl.u8	q8, d16
   137f4:	vmovl.u16	q8, d16
   137f8:	vmov.32	r4, d16[1]
   137fc:	strb	r4, [lr, #1]
   13800:	vmov.32	r4, d16[0]
   13804:	strb	r4, [lr]
   13808:	sub	lr, lr, #2
   1380c:	bne	137d4 <__assert_fail@plt+0x1da4>
   13810:	ldr	r1, [sp, #52]	; 0x34
   13814:	ldr	r5, [sp, #72]	; 0x48
   13818:	ldr	r8, [sp, #76]	; 0x4c
   1381c:	cmp	r1, r5
   13820:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13824:	bne	1396c <__assert_fail@plt+0x1f3c>
   13828:	b	139b0 <__assert_fail@plt+0x1f80>
   1382c:	ldr	r8, [sp, #76]	; 0x4c
   13830:	b	1396c <__assert_fail@plt+0x1f3c>
   13834:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13838:	ldrb	sl, [r1, #250]	; 0xfa
   1383c:	sub	r1, sl, #1
   13840:	cmp	sl, #0
   13844:	beq	139b4 <__assert_fail@plt+0x1f84>
   13848:	str	r1, [sp, #76]	; 0x4c
   1384c:	mov	r1, #8
   13850:	add	lr, sl, #223	; 0xdf
   13854:	str	sl, [sp, #80]	; 0x50
   13858:	add	r4, r1, sl, lsl #3
   1385c:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13860:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13864:	ldr	sl, [r5, r4]!
   13868:	ldr	r8, [r5, #4]
   1386c:	subs	r5, r1, sl
   13870:	ldr	r1, [fp, #-84]	; 0xffffffac
   13874:	sbcs	r5, r1, r8
   13878:	bcs	138ac <__assert_fail@plt+0x1e7c>
   1387c:	sub	r5, lr, #224	; 0xe0
   13880:	sub	r8, lr, #1
   13884:	sub	r4, r4, #8
   13888:	cmp	r5, #0
   1388c:	mov	lr, r8
   13890:	bgt	1385c <__assert_fail@plt+0x1e2c>
   13894:	sub	r1, r8, #224	; 0xe0
   13898:	ldr	r8, [sp, #76]	; 0x4c
   1389c:	ldr	sl, [sp, #80]	; 0x50
   138a0:	cmp	r8, r1
   138a4:	bgt	138ec <__assert_fail@plt+0x1ebc>
   138a8:	b	139b4 <__assert_fail@plt+0x1f84>
   138ac:	ldr	r1, [fp, #-80]	; 0xffffffb0
   138b0:	eor	r4, sl, r1
   138b4:	ldr	r1, [fp, #-84]	; 0xffffffac
   138b8:	eor	r5, r8, r1
   138bc:	orrs	r4, r4, r5
   138c0:	bne	138d8 <__assert_fail@plt+0x1ea8>
   138c4:	ldr	r4, [fp, #-92]	; 0xffffffa4
   138c8:	ldrb	r1, [r4, lr]
   138cc:	add	r1, r1, #1
   138d0:	strb	r1, [r4, lr]
   138d4:	b	139e4 <__assert_fail@plt+0x1fb4>
   138d8:	sub	r1, lr, #224	; 0xe0
   138dc:	ldr	r8, [sp, #76]	; 0x4c
   138e0:	ldr	sl, [sp, #80]	; 0x50
   138e4:	cmp	r8, r1
   138e8:	ble	139b4 <__assert_fail@plt+0x1f84>
   138ec:	mvn	r5, r1
   138f0:	mov	r4, sl
   138f4:	str	r1, [fp, #-88]	; 0xffffffa8
   138f8:	add	sl, r5, sl
   138fc:	cmp	sl, #1
   13900:	bls	1396c <__assert_fail@plt+0x1f3c>
   13904:	sub	r5, r4, #2
   13908:	sub	r5, r5, r1
   1390c:	mov	r1, #8
   13910:	str	r5, [sp, #72]	; 0x48
   13914:	umull	lr, r5, r5, r1
   13918:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1391c:	cmp	r5, #0
   13920:	movwne	r5, #1
   13924:	add	r4, r1, r4, lsl #3
   13928:	add	r1, r4, #16
   1392c:	cmp	lr, r1
   13930:	bhi	1396c <__assert_fail@plt+0x1f3c>
   13934:	cmp	r5, #0
   13938:	str	r1, [sp, #56]	; 0x38
   1393c:	bne	1396c <__assert_fail@plt+0x1f3c>
   13940:	str	sl, [sp, #52]	; 0x34
   13944:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13948:	ldr	sl, [sp, #80]	; 0x50
   1394c:	add	r4, r1, sl
   13950:	ldr	r1, [sp, #72]	; 0x48
   13954:	add	r4, r4, #224	; 0xe0
   13958:	cmp	r1, r4
   1395c:	ldrls	r1, [sp, #100]	; 0x64
   13960:	addls	sl, r1, sl, lsl #3
   13964:	cmpls	lr, sl
   13968:	bls	1363c <__assert_fail@plt+0x1c0c>
   1396c:	ldr	lr, [fp, #-92]	; 0xffffffa4
   13970:	lsl	r5, r8, #3
   13974:	add	r4, lr, r5
   13978:	mov	sl, r8
   1397c:	sub	r5, r5, #8
   13980:	ldr	r8, [r4, #16]
   13984:	ldr	r1, [r4, #20]
   13988:	str	r8, [r4, #24]
   1398c:	str	r1, [r4, #28]
   13990:	mov	r8, sl
   13994:	add	sl, lr, sl
   13998:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1399c:	ldrb	r4, [sl, #224]	; 0xe0
   139a0:	sub	r8, r8, #1
   139a4:	cmp	r8, r1
   139a8:	strb	r4, [sl, #225]	; 0xe1
   139ac:	bgt	13974 <__assert_fail@plt+0x1f44>
   139b0:	ldr	sl, [sp, #80]	; 0x50
   139b4:	ldr	r8, [fp, #-92]	; 0xffffffa4
   139b8:	add	lr, r1, #1
   139bc:	ldr	r5, [fp, #-80]	; 0xffffffb0
   139c0:	ldr	r1, [fp, #-84]	; 0xffffffac
   139c4:	add	r4, r8, lr, lsl #3
   139c8:	str	r5, [r4, #16]
   139cc:	str	r1, [r4, #20]
   139d0:	add	r5, r8, lr
   139d4:	mov	r1, #1
   139d8:	strb	r1, [r5, #224]	; 0xe0
   139dc:	add	r5, sl, #1
   139e0:	strb	r5, [r8, #250]	; 0xfa
   139e4:	umull	r1, r5, r2, r0
   139e8:	mov	r8, r2
   139ec:	mla	r5, r2, ip, r5
   139f0:	mov	r2, r1
   139f4:	mla	r4, r6, r0, r5
   139f8:	subs	r5, r3, r1
   139fc:	sbcs	r5, r7, r4
   13a00:	mov	r5, r6
   13a04:	mov	r6, r4
   13a08:	bcc	15178 <__assert_fail@plt+0x3748>
   13a0c:	b	13834 <__assert_fail@plt+0x1e04>
   13a10:	ldr	r3, [sp, #68]	; 0x44
   13a14:	b	13b10 <__assert_fail@plt+0x20e0>
   13a18:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13a1c:	ldrb	sl, [r1, #250]	; 0xfa
   13a20:	sub	r1, sl, #1
   13a24:	cmp	sl, #0
   13a28:	beq	13d90 <__assert_fail@plt+0x2360>
   13a2c:	str	r1, [sp, #68]	; 0x44
   13a30:	str	sl, [sp, #72]	; 0x48
   13a34:	mov	r1, #8
   13a38:	add	r8, sl, #223	; 0xdf
   13a3c:	ldr	r3, [sp, #76]	; 0x4c
   13a40:	add	r5, r1, sl, lsl #3
   13a44:	ldr	r4, [fp, #-92]	; 0xffffffa4
   13a48:	ldr	r1, [r4, r5]!
   13a4c:	ldr	sl, [r4, #4]
   13a50:	subs	r4, r3, r1
   13a54:	ldr	r4, [fp, #-88]	; 0xffffffa8
   13a58:	sbcs	r4, r4, sl
   13a5c:	bcs	13b58 <__assert_fail@plt+0x2128>
   13a60:	sub	r4, r8, #224	; 0xe0
   13a64:	sub	r1, r8, #1
   13a68:	sub	r5, r5, #8
   13a6c:	cmp	r4, #0
   13a70:	mov	r8, r1
   13a74:	bgt	13a44 <__assert_fail@plt+0x2014>
   13a78:	mov	r4, r3
   13a7c:	sub	r1, r1, #224	; 0xe0
   13a80:	ldr	r3, [sp, #68]	; 0x44
   13a84:	ldr	sl, [sp, #72]	; 0x48
   13a88:	cmp	r3, r1
   13a8c:	ble	13b98 <__assert_fail@plt+0x2168>
   13a90:	mvn	r5, r1
   13a94:	str	r1, [sp, #80]	; 0x50
   13a98:	add	r4, r5, sl
   13a9c:	cmp	r4, #1
   13aa0:	bls	13b10 <__assert_fail@plt+0x20e0>
   13aa4:	sub	r5, sl, #2
   13aa8:	str	r4, [sp, #60]	; 0x3c
   13aac:	sub	sl, r5, r1
   13ab0:	mov	r1, #8
   13ab4:	ldr	r5, [sp, #72]	; 0x48
   13ab8:	umull	r8, r4, sl, r1
   13abc:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13ac0:	cmp	r4, #0
   13ac4:	str	r8, [sp, #64]	; 0x40
   13ac8:	movwne	r4, #1
   13acc:	add	r5, r1, r5, lsl #3
   13ad0:	add	r1, r5, #16
   13ad4:	cmp	r8, r1
   13ad8:	bhi	13b10 <__assert_fail@plt+0x20e0>
   13adc:	cmp	r4, #0
   13ae0:	str	r1, [sp, #48]	; 0x30
   13ae4:	bne	13b10 <__assert_fail@plt+0x20e0>
   13ae8:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13aec:	ldr	r8, [sp, #72]	; 0x48
   13af0:	add	r5, r1, r8
   13af4:	add	r5, r5, #224	; 0xe0
   13af8:	cmp	sl, r5
   13afc:	ldrls	r1, [sp, #100]	; 0x64
   13b00:	addls	r8, r1, r8, lsl #3
   13b04:	ldrls	r1, [sp, #64]	; 0x40
   13b08:	cmpls	r1, r8
   13b0c:	bls	13ba0 <__assert_fail@plt+0x2170>
   13b10:	ldr	sl, [fp, #-92]	; 0xffffffa4
   13b14:	lsl	r4, r3, #3
   13b18:	add	r5, sl, r4
   13b1c:	sub	r4, r4, #8
   13b20:	ldr	r8, [r5, #16]
   13b24:	ldr	r1, [r5, #20]
   13b28:	str	r8, [r5, #24]
   13b2c:	str	r1, [r5, #28]
   13b30:	add	r1, sl, r3
   13b34:	sub	r3, r3, #1
   13b38:	ldrb	r5, [r1, #224]	; 0xe0
   13b3c:	strb	r5, [r1, #225]	; 0xe1
   13b40:	ldr	r1, [sp, #80]	; 0x50
   13b44:	cmp	r3, r1
   13b48:	bgt	13b18 <__assert_fail@plt+0x20e8>
   13b4c:	ldr	r3, [sp, #76]	; 0x4c
   13b50:	ldr	sl, [sp, #72]	; 0x48
   13b54:	b	13d94 <__assert_fail@plt+0x2364>
   13b58:	eor	r5, r1, r3
   13b5c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13b60:	eor	r4, sl, r1
   13b64:	orrs	r5, r5, r4
   13b68:	bne	13b80 <__assert_fail@plt+0x2150>
   13b6c:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13b70:	ldrb	r1, [r5, r8]
   13b74:	add	r1, r1, #1
   13b78:	strb	r1, [r5, r8]
   13b7c:	b	13dc0 <__assert_fail@plt+0x2390>
   13b80:	mov	r4, r3
   13b84:	sub	r1, r8, #224	; 0xe0
   13b88:	ldr	r3, [sp, #68]	; 0x44
   13b8c:	ldr	sl, [sp, #72]	; 0x48
   13b90:	cmp	r3, r1
   13b94:	bgt	13a90 <__assert_fail@plt+0x2060>
   13b98:	mov	r3, r4
   13b9c:	b	13d94 <__assert_fail@plt+0x2364>
   13ba0:	cmp	r4, #0
   13ba4:	str	r5, [sp, #64]	; 0x40
   13ba8:	bne	13b10 <__assert_fail@plt+0x20e0>
   13bac:	ldr	r1, [sp, #96]	; 0x60
   13bb0:	ldr	r5, [sp, #72]	; 0x48
   13bb4:	add	r4, r1, r5
   13bb8:	cmp	sl, r4
   13bbc:	bhi	13b10 <__assert_fail@plt+0x20e0>
   13bc0:	mov	r3, r5
   13bc4:	ldr	r1, [sp, #88]	; 0x58
   13bc8:	ldr	r5, [sp, #80]	; 0x50
   13bcc:	add	sl, r1, r5
   13bd0:	ldr	r1, [sp, #92]	; 0x5c
   13bd4:	add	r3, r1, r3
   13bd8:	add	r1, r1, r5
   13bdc:	str	r3, [sp, #56]	; 0x38
   13be0:	cmp	r1, r3
   13be4:	str	r1, [sp, #40]	; 0x28
   13be8:	mov	r1, #0
   13bec:	mov	r3, sl
   13bf0:	movwcc	r1, #1
   13bf4:	str	r1, [sp, #16]
   13bf8:	str	sl, [sp, #44]	; 0x2c
   13bfc:	ldr	r1, [sp, #64]	; 0x40
   13c00:	cmp	sl, r1
   13c04:	mov	r1, #0
   13c08:	movwcc	r1, #1
   13c0c:	str	r1, [sp, #12]
   13c10:	ldr	r1, [sp, #104]	; 0x68
   13c14:	add	r1, r1, r5, lsl #3
   13c18:	str	r1, [sp, #52]	; 0x34
   13c1c:	ldr	r1, [sp, #56]	; 0x38
   13c20:	ldr	sl, [sp, #52]	; 0x34
   13c24:	cmp	r1, sl
   13c28:	mov	r1, #0
   13c2c:	movwhi	r1, #1
   13c30:	str	r1, [sp, #24]
   13c34:	mov	r1, #0
   13c38:	ldr	sl, [sp, #48]	; 0x30
   13c3c:	cmp	r3, sl
   13c40:	movwcc	r1, #1
   13c44:	str	r1, [sp, #20]
   13c48:	ldr	r1, [sp, #72]	; 0x48
   13c4c:	ldr	r3, [sp, #104]	; 0x68
   13c50:	add	r3, r3, r1, lsl #3
   13c54:	str	r3, [sp, #36]	; 0x24
   13c58:	ldr	r1, [sp, #40]	; 0x28
   13c5c:	cmp	r1, r3
   13c60:	mov	r1, #0
   13c64:	movwcc	r1, #1
   13c68:	str	r1, [sp, #32]
   13c6c:	ldr	r1, [sp, #84]	; 0x54
   13c70:	add	r5, r1, r5, lsl #3
   13c74:	str	r5, [sp, #40]	; 0x28
   13c78:	ldr	r1, [sp, #64]	; 0x40
   13c7c:	cmp	r1, r5
   13c80:	mov	r1, #0
   13c84:	movwhi	r1, #1
   13c88:	str	r1, [sp, #28]
   13c8c:	ldr	r1, [sp, #52]	; 0x34
   13c90:	cmp	r1, r3
   13c94:	mov	r1, #0
   13c98:	movwcc	r1, #1
   13c9c:	cmp	r5, sl
   13ca0:	mov	sl, #0
   13ca4:	str	r1, [sp, #64]	; 0x40
   13ca8:	mov	r1, #0
   13cac:	ldr	r3, [sp, #44]	; 0x2c
   13cb0:	ldr	r5, [sp, #36]	; 0x24
   13cb4:	movwcc	r1, #1
   13cb8:	cmp	r3, r5
   13cbc:	ldr	r3, [sp, #56]	; 0x38
   13cc0:	ldr	r5, [sp, #40]	; 0x28
   13cc4:	movwcc	sl, #1
   13cc8:	cmp	r3, r5
   13ccc:	mov	r5, #0
   13cd0:	movwhi	r5, #1
   13cd4:	tst	r5, sl
   13cd8:	bne	13a10 <__assert_fail@plt+0x1fe0>
   13cdc:	ldr	r3, [sp, #64]	; 0x40
   13ce0:	ands	r5, r1, r3
   13ce4:	bne	13a10 <__assert_fail@plt+0x1fe0>
   13ce8:	ldr	r1, [sp, #32]
   13cec:	ldr	r3, [sp, #28]
   13cf0:	ands	r5, r3, r1
   13cf4:	sub	r1, fp, #40	; 0x28
   13cf8:	bne	13a10 <__assert_fail@plt+0x1fe0>
   13cfc:	ldr	r3, [sp, #24]
   13d00:	ldr	r5, [sp, #20]
   13d04:	ands	r5, r5, r3
   13d08:	bne	13a10 <__assert_fail@plt+0x1fe0>
   13d0c:	ldr	r5, [sp, #16]
   13d10:	ldr	r3, [sp, #12]
   13d14:	ands	r5, r3, r5
   13d18:	bne	13a10 <__assert_fail@plt+0x1fe0>
   13d1c:	ldr	r5, [sp, #60]	; 0x3c
   13d20:	mvn	r3, #15
   13d24:	bic	sl, r5, #1
   13d28:	ldr	r5, [sp, #68]	; 0x44
   13d2c:	sub	r5, r5, sl
   13d30:	str	r5, [sp, #68]	; 0x44
   13d34:	str	sl, [sp, #64]	; 0x40
   13d38:	sub	r5, r8, #8
   13d3c:	subs	sl, sl, #2
   13d40:	vld1.64	{d16-d17}, [r5]
   13d44:	vst1.64	{d16-d17}, [r8], r3
   13d48:	ldrh	r5, [r4, #-1]
   13d4c:	strh	r5, [fp, #-40]	; 0xffffffd8
   13d50:	vld1.16	{d16[0]}, [r1 :16]
   13d54:	vmovl.u8	q8, d16
   13d58:	vmovl.u16	q8, d16
   13d5c:	vmov.32	r5, d16[1]
   13d60:	strb	r5, [r4, #1]
   13d64:	vmov.32	r5, d16[0]
   13d68:	strb	r5, [r4]
   13d6c:	sub	r4, r4, #2
   13d70:	bne	13d38 <__assert_fail@plt+0x2308>
   13d74:	ldr	r1, [sp, #60]	; 0x3c
   13d78:	ldr	r3, [sp, #64]	; 0x40
   13d7c:	ldr	sl, [sp, #72]	; 0x48
   13d80:	cmp	r1, r3
   13d84:	ldr	r3, [sp, #68]	; 0x44
   13d88:	ldr	r1, [sp, #80]	; 0x50
   13d8c:	bne	13b10 <__assert_fail@plt+0x20e0>
   13d90:	ldr	r3, [sp, #76]	; 0x4c
   13d94:	add	r8, r1, #1
   13d98:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13d9c:	ldr	r5, [fp, #-88]	; 0xffffffa8
   13da0:	add	r4, r1, r8, lsl #3
   13da4:	str	r3, [r4, #16]
   13da8:	str	r5, [r4, #20]
   13dac:	add	r5, r1, r8
   13db0:	mov	r4, #1
   13db4:	strb	r4, [r5, #224]	; 0xe0
   13db8:	add	r5, sl, #1
   13dbc:	strb	r5, [r1, #250]	; 0xfa
   13dc0:	umull	r1, r5, r7, r0
   13dc4:	mov	r8, r7
   13dc8:	mov	r3, r6
   13dcc:	mla	r5, r7, lr, r5
   13dd0:	mov	r7, r1
   13dd4:	mla	r4, r6, r0, r5
   13dd8:	subs	r5, r2, r1
   13ddc:	sbcs	r5, ip, r4
   13de0:	mov	r6, r4
   13de4:	bcc	151a4 <__assert_fail@plt+0x3774>
   13de8:	b	13a18 <__assert_fail@plt+0x1fe8>
   13dec:	ldr	r3, [sp, #68]	; 0x44
   13df0:	b	13eec <__assert_fail@plt+0x24bc>
   13df4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13df8:	ldrb	sl, [r1, #250]	; 0xfa
   13dfc:	sub	r1, sl, #1
   13e00:	cmp	sl, #0
   13e04:	beq	1416c <__assert_fail@plt+0x273c>
   13e08:	str	r1, [sp, #68]	; 0x44
   13e0c:	str	sl, [sp, #72]	; 0x48
   13e10:	mov	r1, #8
   13e14:	add	r8, sl, #223	; 0xdf
   13e18:	ldr	r3, [sp, #76]	; 0x4c
   13e1c:	add	r5, r1, sl, lsl #3
   13e20:	ldr	r4, [fp, #-92]	; 0xffffffa4
   13e24:	ldr	r1, [r4, r5]!
   13e28:	ldr	sl, [r4, #4]
   13e2c:	subs	r4, r3, r1
   13e30:	ldr	r4, [fp, #-88]	; 0xffffffa8
   13e34:	sbcs	r4, r4, sl
   13e38:	bcs	13f34 <__assert_fail@plt+0x2504>
   13e3c:	sub	r4, r8, #224	; 0xe0
   13e40:	sub	r1, r8, #1
   13e44:	sub	r5, r5, #8
   13e48:	cmp	r4, #0
   13e4c:	mov	r8, r1
   13e50:	bgt	13e20 <__assert_fail@plt+0x23f0>
   13e54:	mov	r4, r3
   13e58:	sub	r1, r1, #224	; 0xe0
   13e5c:	ldr	r3, [sp, #68]	; 0x44
   13e60:	ldr	sl, [sp, #72]	; 0x48
   13e64:	cmp	r3, r1
   13e68:	ble	13f74 <__assert_fail@plt+0x2544>
   13e6c:	mvn	r5, r1
   13e70:	str	r1, [sp, #80]	; 0x50
   13e74:	add	r4, r5, sl
   13e78:	cmp	r4, #1
   13e7c:	bls	13eec <__assert_fail@plt+0x24bc>
   13e80:	sub	r5, sl, #2
   13e84:	str	r4, [sp, #60]	; 0x3c
   13e88:	sub	sl, r5, r1
   13e8c:	mov	r1, #8
   13e90:	ldr	r5, [sp, #72]	; 0x48
   13e94:	umull	r8, r4, sl, r1
   13e98:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13e9c:	cmp	r4, #0
   13ea0:	str	r8, [sp, #64]	; 0x40
   13ea4:	movwne	r4, #1
   13ea8:	add	r5, r1, r5, lsl #3
   13eac:	add	r1, r5, #16
   13eb0:	cmp	r8, r1
   13eb4:	bhi	13eec <__assert_fail@plt+0x24bc>
   13eb8:	cmp	r4, #0
   13ebc:	str	r1, [sp, #48]	; 0x30
   13ec0:	bne	13eec <__assert_fail@plt+0x24bc>
   13ec4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13ec8:	ldr	r8, [sp, #72]	; 0x48
   13ecc:	add	r5, r1, r8
   13ed0:	add	r5, r5, #224	; 0xe0
   13ed4:	cmp	sl, r5
   13ed8:	ldrls	r1, [sp, #100]	; 0x64
   13edc:	addls	r8, r1, r8, lsl #3
   13ee0:	ldrls	r1, [sp, #64]	; 0x40
   13ee4:	cmpls	r1, r8
   13ee8:	bls	13f7c <__assert_fail@plt+0x254c>
   13eec:	ldr	sl, [fp, #-92]	; 0xffffffa4
   13ef0:	lsl	r4, r3, #3
   13ef4:	add	r5, sl, r4
   13ef8:	sub	r4, r4, #8
   13efc:	ldr	r8, [r5, #16]
   13f00:	ldr	r1, [r5, #20]
   13f04:	str	r8, [r5, #24]
   13f08:	str	r1, [r5, #28]
   13f0c:	add	r1, sl, r3
   13f10:	sub	r3, r3, #1
   13f14:	ldrb	r5, [r1, #224]	; 0xe0
   13f18:	strb	r5, [r1, #225]	; 0xe1
   13f1c:	ldr	r1, [sp, #80]	; 0x50
   13f20:	cmp	r3, r1
   13f24:	bgt	13ef4 <__assert_fail@plt+0x24c4>
   13f28:	ldr	r3, [sp, #76]	; 0x4c
   13f2c:	ldr	sl, [sp, #72]	; 0x48
   13f30:	b	14170 <__assert_fail@plt+0x2740>
   13f34:	eor	r5, r1, r3
   13f38:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13f3c:	eor	r4, sl, r1
   13f40:	orrs	r5, r5, r4
   13f44:	bne	13f5c <__assert_fail@plt+0x252c>
   13f48:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13f4c:	ldrb	r1, [r5, r8]
   13f50:	add	r1, r1, #1
   13f54:	strb	r1, [r5, r8]
   13f58:	b	1419c <__assert_fail@plt+0x276c>
   13f5c:	mov	r4, r3
   13f60:	sub	r1, r8, #224	; 0xe0
   13f64:	ldr	r3, [sp, #68]	; 0x44
   13f68:	ldr	sl, [sp, #72]	; 0x48
   13f6c:	cmp	r3, r1
   13f70:	bgt	13e6c <__assert_fail@plt+0x243c>
   13f74:	mov	r3, r4
   13f78:	b	14170 <__assert_fail@plt+0x2740>
   13f7c:	cmp	r4, #0
   13f80:	str	r5, [sp, #64]	; 0x40
   13f84:	bne	13eec <__assert_fail@plt+0x24bc>
   13f88:	ldr	r1, [sp, #96]	; 0x60
   13f8c:	ldr	r5, [sp, #72]	; 0x48
   13f90:	add	r4, r1, r5
   13f94:	cmp	sl, r4
   13f98:	bhi	13eec <__assert_fail@plt+0x24bc>
   13f9c:	mov	r3, r5
   13fa0:	ldr	r1, [sp, #88]	; 0x58
   13fa4:	ldr	r5, [sp, #80]	; 0x50
   13fa8:	add	sl, r1, r5
   13fac:	ldr	r1, [sp, #92]	; 0x5c
   13fb0:	add	r3, r1, r3
   13fb4:	add	r1, r1, r5
   13fb8:	str	r3, [sp, #56]	; 0x38
   13fbc:	cmp	r1, r3
   13fc0:	str	r1, [sp, #40]	; 0x28
   13fc4:	mov	r1, #0
   13fc8:	mov	r3, sl
   13fcc:	movwcc	r1, #1
   13fd0:	str	r1, [sp, #16]
   13fd4:	str	sl, [sp, #44]	; 0x2c
   13fd8:	ldr	r1, [sp, #64]	; 0x40
   13fdc:	cmp	sl, r1
   13fe0:	mov	r1, #0
   13fe4:	movwcc	r1, #1
   13fe8:	str	r1, [sp, #12]
   13fec:	ldr	r1, [sp, #104]	; 0x68
   13ff0:	add	r1, r1, r5, lsl #3
   13ff4:	str	r1, [sp, #52]	; 0x34
   13ff8:	ldr	r1, [sp, #56]	; 0x38
   13ffc:	ldr	sl, [sp, #52]	; 0x34
   14000:	cmp	r1, sl
   14004:	mov	r1, #0
   14008:	movwhi	r1, #1
   1400c:	str	r1, [sp, #24]
   14010:	mov	r1, #0
   14014:	ldr	sl, [sp, #48]	; 0x30
   14018:	cmp	r3, sl
   1401c:	movwcc	r1, #1
   14020:	str	r1, [sp, #20]
   14024:	ldr	r1, [sp, #72]	; 0x48
   14028:	ldr	r3, [sp, #104]	; 0x68
   1402c:	add	r3, r3, r1, lsl #3
   14030:	str	r3, [sp, #36]	; 0x24
   14034:	ldr	r1, [sp, #40]	; 0x28
   14038:	cmp	r1, r3
   1403c:	mov	r1, #0
   14040:	movwcc	r1, #1
   14044:	str	r1, [sp, #32]
   14048:	ldr	r1, [sp, #84]	; 0x54
   1404c:	add	r5, r1, r5, lsl #3
   14050:	str	r5, [sp, #40]	; 0x28
   14054:	ldr	r1, [sp, #64]	; 0x40
   14058:	cmp	r1, r5
   1405c:	mov	r1, #0
   14060:	movwhi	r1, #1
   14064:	str	r1, [sp, #28]
   14068:	ldr	r1, [sp, #52]	; 0x34
   1406c:	cmp	r1, r3
   14070:	mov	r1, #0
   14074:	movwcc	r1, #1
   14078:	cmp	r5, sl
   1407c:	mov	sl, #0
   14080:	str	r1, [sp, #64]	; 0x40
   14084:	mov	r1, #0
   14088:	ldr	r3, [sp, #44]	; 0x2c
   1408c:	ldr	r5, [sp, #36]	; 0x24
   14090:	movwcc	r1, #1
   14094:	cmp	r3, r5
   14098:	ldr	r3, [sp, #56]	; 0x38
   1409c:	ldr	r5, [sp, #40]	; 0x28
   140a0:	movwcc	sl, #1
   140a4:	cmp	r3, r5
   140a8:	mov	r5, #0
   140ac:	movwhi	r5, #1
   140b0:	tst	r5, sl
   140b4:	bne	13dec <__assert_fail@plt+0x23bc>
   140b8:	ldr	r3, [sp, #64]	; 0x40
   140bc:	ands	r5, r1, r3
   140c0:	bne	13dec <__assert_fail@plt+0x23bc>
   140c4:	ldr	r1, [sp, #32]
   140c8:	ldr	r3, [sp, #28]
   140cc:	ands	r5, r3, r1
   140d0:	sub	r1, fp, #44	; 0x2c
   140d4:	bne	13dec <__assert_fail@plt+0x23bc>
   140d8:	ldr	r3, [sp, #24]
   140dc:	ldr	r5, [sp, #20]
   140e0:	ands	r5, r5, r3
   140e4:	bne	13dec <__assert_fail@plt+0x23bc>
   140e8:	ldr	r5, [sp, #16]
   140ec:	ldr	r3, [sp, #12]
   140f0:	ands	r5, r3, r5
   140f4:	bne	13dec <__assert_fail@plt+0x23bc>
   140f8:	ldr	r5, [sp, #60]	; 0x3c
   140fc:	mvn	r3, #15
   14100:	bic	sl, r5, #1
   14104:	ldr	r5, [sp, #68]	; 0x44
   14108:	sub	r5, r5, sl
   1410c:	str	r5, [sp, #68]	; 0x44
   14110:	str	sl, [sp, #64]	; 0x40
   14114:	sub	r5, r8, #8
   14118:	subs	sl, sl, #2
   1411c:	vld1.64	{d16-d17}, [r5]
   14120:	vst1.64	{d16-d17}, [r8], r3
   14124:	ldrh	r5, [r4, #-1]
   14128:	strh	r5, [fp, #-44]	; 0xffffffd4
   1412c:	vld1.16	{d16[0]}, [r1 :16]
   14130:	vmovl.u8	q8, d16
   14134:	vmovl.u16	q8, d16
   14138:	vmov.32	r5, d16[1]
   1413c:	strb	r5, [r4, #1]
   14140:	vmov.32	r5, d16[0]
   14144:	strb	r5, [r4]
   14148:	sub	r4, r4, #2
   1414c:	bne	14114 <__assert_fail@plt+0x26e4>
   14150:	ldr	r1, [sp, #60]	; 0x3c
   14154:	ldr	r3, [sp, #64]	; 0x40
   14158:	ldr	sl, [sp, #72]	; 0x48
   1415c:	cmp	r1, r3
   14160:	ldr	r3, [sp, #68]	; 0x44
   14164:	ldr	r1, [sp, #80]	; 0x50
   14168:	bne	13eec <__assert_fail@plt+0x24bc>
   1416c:	ldr	r3, [sp, #76]	; 0x4c
   14170:	add	r8, r1, #1
   14174:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14178:	ldr	r5, [fp, #-88]	; 0xffffffa8
   1417c:	add	r4, r1, r8, lsl #3
   14180:	str	r3, [r4, #16]
   14184:	str	r5, [r4, #20]
   14188:	add	r5, r1, r8
   1418c:	mov	r4, #1
   14190:	strb	r4, [r5, #224]	; 0xe0
   14194:	add	r5, sl, #1
   14198:	strb	r5, [r1, #250]	; 0xfa
   1419c:	umull	r1, r5, r7, r0
   141a0:	mov	r8, r7
   141a4:	mov	r3, r6
   141a8:	mla	r5, r7, lr, r5
   141ac:	mov	r7, r1
   141b0:	mla	r4, r6, r0, r5
   141b4:	subs	r5, r2, r1
   141b8:	sbcs	r5, ip, r4
   141bc:	mov	r6, r4
   141c0:	bcc	151cc <__assert_fail@plt+0x379c>
   141c4:	b	13df4 <__assert_fail@plt+0x23c4>
   141c8:	ldr	r3, [sp, #68]	; 0x44
   141cc:	b	142c8 <__assert_fail@plt+0x2898>
   141d0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   141d4:	ldrb	sl, [r1, #250]	; 0xfa
   141d8:	sub	r1, sl, #1
   141dc:	cmp	sl, #0
   141e0:	beq	14548 <__assert_fail@plt+0x2b18>
   141e4:	str	r1, [sp, #68]	; 0x44
   141e8:	str	sl, [sp, #72]	; 0x48
   141ec:	mov	r1, #8
   141f0:	add	r8, sl, #223	; 0xdf
   141f4:	ldr	r3, [sp, #76]	; 0x4c
   141f8:	add	r5, r1, sl, lsl #3
   141fc:	ldr	r4, [fp, #-92]	; 0xffffffa4
   14200:	ldr	r1, [r4, r5]!
   14204:	ldr	sl, [r4, #4]
   14208:	subs	r4, r3, r1
   1420c:	ldr	r4, [fp, #-88]	; 0xffffffa8
   14210:	sbcs	r4, r4, sl
   14214:	bcs	14310 <__assert_fail@plt+0x28e0>
   14218:	sub	r4, r8, #224	; 0xe0
   1421c:	sub	r1, r8, #1
   14220:	sub	r5, r5, #8
   14224:	cmp	r4, #0
   14228:	mov	r8, r1
   1422c:	bgt	141fc <__assert_fail@plt+0x27cc>
   14230:	mov	r4, r3
   14234:	sub	r1, r1, #224	; 0xe0
   14238:	ldr	r3, [sp, #68]	; 0x44
   1423c:	ldr	sl, [sp, #72]	; 0x48
   14240:	cmp	r3, r1
   14244:	ble	14350 <__assert_fail@plt+0x2920>
   14248:	mvn	r5, r1
   1424c:	str	r1, [sp, #80]	; 0x50
   14250:	add	r4, r5, sl
   14254:	cmp	r4, #1
   14258:	bls	142c8 <__assert_fail@plt+0x2898>
   1425c:	sub	r5, sl, #2
   14260:	str	r4, [sp, #60]	; 0x3c
   14264:	sub	sl, r5, r1
   14268:	mov	r1, #8
   1426c:	ldr	r5, [sp, #72]	; 0x48
   14270:	umull	r8, r4, sl, r1
   14274:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14278:	cmp	r4, #0
   1427c:	str	r8, [sp, #64]	; 0x40
   14280:	movwne	r4, #1
   14284:	add	r5, r1, r5, lsl #3
   14288:	add	r1, r5, #16
   1428c:	cmp	r8, r1
   14290:	bhi	142c8 <__assert_fail@plt+0x2898>
   14294:	cmp	r4, #0
   14298:	str	r1, [sp, #48]	; 0x30
   1429c:	bne	142c8 <__assert_fail@plt+0x2898>
   142a0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   142a4:	ldr	r8, [sp, #72]	; 0x48
   142a8:	add	r5, r1, r8
   142ac:	add	r5, r5, #224	; 0xe0
   142b0:	cmp	sl, r5
   142b4:	ldrls	r1, [sp, #100]	; 0x64
   142b8:	addls	r8, r1, r8, lsl #3
   142bc:	ldrls	r1, [sp, #64]	; 0x40
   142c0:	cmpls	r1, r8
   142c4:	bls	14358 <__assert_fail@plt+0x2928>
   142c8:	ldr	sl, [fp, #-92]	; 0xffffffa4
   142cc:	lsl	r4, r3, #3
   142d0:	add	r5, sl, r4
   142d4:	sub	r4, r4, #8
   142d8:	ldr	r8, [r5, #16]
   142dc:	ldr	r1, [r5, #20]
   142e0:	str	r8, [r5, #24]
   142e4:	str	r1, [r5, #28]
   142e8:	add	r1, sl, r3
   142ec:	sub	r3, r3, #1
   142f0:	ldrb	r5, [r1, #224]	; 0xe0
   142f4:	strb	r5, [r1, #225]	; 0xe1
   142f8:	ldr	r1, [sp, #80]	; 0x50
   142fc:	cmp	r3, r1
   14300:	bgt	142d0 <__assert_fail@plt+0x28a0>
   14304:	ldr	r3, [sp, #76]	; 0x4c
   14308:	ldr	sl, [sp, #72]	; 0x48
   1430c:	b	1454c <__assert_fail@plt+0x2b1c>
   14310:	eor	r5, r1, r3
   14314:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14318:	eor	r4, sl, r1
   1431c:	orrs	r5, r5, r4
   14320:	bne	14338 <__assert_fail@plt+0x2908>
   14324:	ldr	r5, [fp, #-92]	; 0xffffffa4
   14328:	ldrb	r1, [r5, r8]
   1432c:	add	r1, r1, #1
   14330:	strb	r1, [r5, r8]
   14334:	b	14578 <__assert_fail@plt+0x2b48>
   14338:	mov	r4, r3
   1433c:	sub	r1, r8, #224	; 0xe0
   14340:	ldr	r3, [sp, #68]	; 0x44
   14344:	ldr	sl, [sp, #72]	; 0x48
   14348:	cmp	r3, r1
   1434c:	bgt	14248 <__assert_fail@plt+0x2818>
   14350:	mov	r3, r4
   14354:	b	1454c <__assert_fail@plt+0x2b1c>
   14358:	cmp	r4, #0
   1435c:	str	r5, [sp, #64]	; 0x40
   14360:	bne	142c8 <__assert_fail@plt+0x2898>
   14364:	ldr	r1, [sp, #96]	; 0x60
   14368:	ldr	r5, [sp, #72]	; 0x48
   1436c:	add	r4, r1, r5
   14370:	cmp	sl, r4
   14374:	bhi	142c8 <__assert_fail@plt+0x2898>
   14378:	mov	r3, r5
   1437c:	ldr	r1, [sp, #88]	; 0x58
   14380:	ldr	r5, [sp, #80]	; 0x50
   14384:	add	sl, r1, r5
   14388:	ldr	r1, [sp, #92]	; 0x5c
   1438c:	add	r3, r1, r3
   14390:	add	r1, r1, r5
   14394:	str	r3, [sp, #56]	; 0x38
   14398:	cmp	r1, r3
   1439c:	str	r1, [sp, #40]	; 0x28
   143a0:	mov	r1, #0
   143a4:	mov	r3, sl
   143a8:	movwcc	r1, #1
   143ac:	str	r1, [sp, #16]
   143b0:	str	sl, [sp, #44]	; 0x2c
   143b4:	ldr	r1, [sp, #64]	; 0x40
   143b8:	cmp	sl, r1
   143bc:	mov	r1, #0
   143c0:	movwcc	r1, #1
   143c4:	str	r1, [sp, #12]
   143c8:	ldr	r1, [sp, #104]	; 0x68
   143cc:	add	r1, r1, r5, lsl #3
   143d0:	str	r1, [sp, #52]	; 0x34
   143d4:	ldr	r1, [sp, #56]	; 0x38
   143d8:	ldr	sl, [sp, #52]	; 0x34
   143dc:	cmp	r1, sl
   143e0:	mov	r1, #0
   143e4:	movwhi	r1, #1
   143e8:	str	r1, [sp, #24]
   143ec:	mov	r1, #0
   143f0:	ldr	sl, [sp, #48]	; 0x30
   143f4:	cmp	r3, sl
   143f8:	movwcc	r1, #1
   143fc:	str	r1, [sp, #20]
   14400:	ldr	r1, [sp, #72]	; 0x48
   14404:	ldr	r3, [sp, #104]	; 0x68
   14408:	add	r3, r3, r1, lsl #3
   1440c:	str	r3, [sp, #36]	; 0x24
   14410:	ldr	r1, [sp, #40]	; 0x28
   14414:	cmp	r1, r3
   14418:	mov	r1, #0
   1441c:	movwcc	r1, #1
   14420:	str	r1, [sp, #32]
   14424:	ldr	r1, [sp, #84]	; 0x54
   14428:	add	r5, r1, r5, lsl #3
   1442c:	str	r5, [sp, #40]	; 0x28
   14430:	ldr	r1, [sp, #64]	; 0x40
   14434:	cmp	r1, r5
   14438:	mov	r1, #0
   1443c:	movwhi	r1, #1
   14440:	str	r1, [sp, #28]
   14444:	ldr	r1, [sp, #52]	; 0x34
   14448:	cmp	r1, r3
   1444c:	mov	r1, #0
   14450:	movwcc	r1, #1
   14454:	cmp	r5, sl
   14458:	mov	sl, #0
   1445c:	str	r1, [sp, #64]	; 0x40
   14460:	mov	r1, #0
   14464:	ldr	r3, [sp, #44]	; 0x2c
   14468:	ldr	r5, [sp, #36]	; 0x24
   1446c:	movwcc	r1, #1
   14470:	cmp	r3, r5
   14474:	ldr	r3, [sp, #56]	; 0x38
   14478:	ldr	r5, [sp, #40]	; 0x28
   1447c:	movwcc	sl, #1
   14480:	cmp	r3, r5
   14484:	mov	r5, #0
   14488:	movwhi	r5, #1
   1448c:	tst	r5, sl
   14490:	bne	141c8 <__assert_fail@plt+0x2798>
   14494:	ldr	r3, [sp, #64]	; 0x40
   14498:	ands	r5, r1, r3
   1449c:	bne	141c8 <__assert_fail@plt+0x2798>
   144a0:	ldr	r1, [sp, #32]
   144a4:	ldr	r3, [sp, #28]
   144a8:	ands	r5, r3, r1
   144ac:	sub	r1, fp, #48	; 0x30
   144b0:	bne	141c8 <__assert_fail@plt+0x2798>
   144b4:	ldr	r3, [sp, #24]
   144b8:	ldr	r5, [sp, #20]
   144bc:	ands	r5, r5, r3
   144c0:	bne	141c8 <__assert_fail@plt+0x2798>
   144c4:	ldr	r5, [sp, #16]
   144c8:	ldr	r3, [sp, #12]
   144cc:	ands	r5, r3, r5
   144d0:	bne	141c8 <__assert_fail@plt+0x2798>
   144d4:	ldr	r5, [sp, #60]	; 0x3c
   144d8:	mvn	r3, #15
   144dc:	bic	sl, r5, #1
   144e0:	ldr	r5, [sp, #68]	; 0x44
   144e4:	sub	r5, r5, sl
   144e8:	str	r5, [sp, #68]	; 0x44
   144ec:	str	sl, [sp, #64]	; 0x40
   144f0:	sub	r5, r8, #8
   144f4:	subs	sl, sl, #2
   144f8:	vld1.64	{d16-d17}, [r5]
   144fc:	vst1.64	{d16-d17}, [r8], r3
   14500:	ldrh	r5, [r4, #-1]
   14504:	strh	r5, [fp, #-48]	; 0xffffffd0
   14508:	vld1.16	{d16[0]}, [r1 :16]
   1450c:	vmovl.u8	q8, d16
   14510:	vmovl.u16	q8, d16
   14514:	vmov.32	r5, d16[1]
   14518:	strb	r5, [r4, #1]
   1451c:	vmov.32	r5, d16[0]
   14520:	strb	r5, [r4]
   14524:	sub	r4, r4, #2
   14528:	bne	144f0 <__assert_fail@plt+0x2ac0>
   1452c:	ldr	r1, [sp, #60]	; 0x3c
   14530:	ldr	r3, [sp, #64]	; 0x40
   14534:	ldr	sl, [sp, #72]	; 0x48
   14538:	cmp	r1, r3
   1453c:	ldr	r3, [sp, #68]	; 0x44
   14540:	ldr	r1, [sp, #80]	; 0x50
   14544:	bne	142c8 <__assert_fail@plt+0x2898>
   14548:	ldr	r3, [sp, #76]	; 0x4c
   1454c:	add	r8, r1, #1
   14550:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14554:	ldr	r5, [fp, #-88]	; 0xffffffa8
   14558:	add	r4, r1, r8, lsl #3
   1455c:	str	r3, [r4, #16]
   14560:	str	r5, [r4, #20]
   14564:	add	r5, r1, r8
   14568:	mov	r4, #1
   1456c:	strb	r4, [r5, #224]	; 0xe0
   14570:	add	r5, sl, #1
   14574:	strb	r5, [r1, #250]	; 0xfa
   14578:	umull	r1, r5, r7, r0
   1457c:	mov	r8, r7
   14580:	mov	r3, r6
   14584:	mla	r5, r7, lr, r5
   14588:	mov	r7, r1
   1458c:	mla	r4, r6, r0, r5
   14590:	subs	r5, r2, r1
   14594:	sbcs	r5, ip, r4
   14598:	mov	r6, r4
   1459c:	bcc	151f4 <__assert_fail@plt+0x37c4>
   145a0:	b	141d0 <__assert_fail@plt+0x27a0>
   145a4:	ldr	r3, [sp, #68]	; 0x44
   145a8:	b	146a4 <__assert_fail@plt+0x2c74>
   145ac:	ldr	r1, [fp, #-92]	; 0xffffffa4
   145b0:	ldrb	sl, [r1, #250]	; 0xfa
   145b4:	sub	r1, sl, #1
   145b8:	cmp	sl, #0
   145bc:	beq	14924 <__assert_fail@plt+0x2ef4>
   145c0:	str	r1, [sp, #68]	; 0x44
   145c4:	str	sl, [sp, #72]	; 0x48
   145c8:	mov	r1, #8
   145cc:	add	r8, sl, #223	; 0xdf
   145d0:	ldr	r3, [sp, #76]	; 0x4c
   145d4:	add	r5, r1, sl, lsl #3
   145d8:	ldr	r4, [fp, #-92]	; 0xffffffa4
   145dc:	ldr	r1, [r4, r5]!
   145e0:	ldr	sl, [r4, #4]
   145e4:	subs	r4, r3, r1
   145e8:	ldr	r4, [fp, #-88]	; 0xffffffa8
   145ec:	sbcs	r4, r4, sl
   145f0:	bcs	146ec <__assert_fail@plt+0x2cbc>
   145f4:	sub	r4, r8, #224	; 0xe0
   145f8:	sub	r1, r8, #1
   145fc:	sub	r5, r5, #8
   14600:	cmp	r4, #0
   14604:	mov	r8, r1
   14608:	bgt	145d8 <__assert_fail@plt+0x2ba8>
   1460c:	mov	r4, r3
   14610:	sub	r1, r1, #224	; 0xe0
   14614:	ldr	r3, [sp, #68]	; 0x44
   14618:	ldr	sl, [sp, #72]	; 0x48
   1461c:	cmp	r3, r1
   14620:	ble	1472c <__assert_fail@plt+0x2cfc>
   14624:	mvn	r5, r1
   14628:	str	r1, [sp, #80]	; 0x50
   1462c:	add	r4, r5, sl
   14630:	cmp	r4, #1
   14634:	bls	146a4 <__assert_fail@plt+0x2c74>
   14638:	sub	r5, sl, #2
   1463c:	str	r4, [sp, #60]	; 0x3c
   14640:	sub	sl, r5, r1
   14644:	mov	r1, #8
   14648:	ldr	r5, [sp, #72]	; 0x48
   1464c:	umull	r8, r4, sl, r1
   14650:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14654:	cmp	r4, #0
   14658:	str	r8, [sp, #64]	; 0x40
   1465c:	movwne	r4, #1
   14660:	add	r5, r1, r5, lsl #3
   14664:	add	r1, r5, #16
   14668:	cmp	r8, r1
   1466c:	bhi	146a4 <__assert_fail@plt+0x2c74>
   14670:	cmp	r4, #0
   14674:	str	r1, [sp, #48]	; 0x30
   14678:	bne	146a4 <__assert_fail@plt+0x2c74>
   1467c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14680:	ldr	r8, [sp, #72]	; 0x48
   14684:	add	r5, r1, r8
   14688:	add	r5, r5, #224	; 0xe0
   1468c:	cmp	sl, r5
   14690:	ldrls	r1, [sp, #100]	; 0x64
   14694:	addls	r8, r1, r8, lsl #3
   14698:	ldrls	r1, [sp, #64]	; 0x40
   1469c:	cmpls	r1, r8
   146a0:	bls	14734 <__assert_fail@plt+0x2d04>
   146a4:	ldr	sl, [fp, #-92]	; 0xffffffa4
   146a8:	lsl	r4, r3, #3
   146ac:	add	r5, sl, r4
   146b0:	sub	r4, r4, #8
   146b4:	ldr	r8, [r5, #16]
   146b8:	ldr	r1, [r5, #20]
   146bc:	str	r8, [r5, #24]
   146c0:	str	r1, [r5, #28]
   146c4:	add	r1, sl, r3
   146c8:	sub	r3, r3, #1
   146cc:	ldrb	r5, [r1, #224]	; 0xe0
   146d0:	strb	r5, [r1, #225]	; 0xe1
   146d4:	ldr	r1, [sp, #80]	; 0x50
   146d8:	cmp	r3, r1
   146dc:	bgt	146ac <__assert_fail@plt+0x2c7c>
   146e0:	ldr	r3, [sp, #76]	; 0x4c
   146e4:	ldr	sl, [sp, #72]	; 0x48
   146e8:	b	14928 <__assert_fail@plt+0x2ef8>
   146ec:	eor	r5, r1, r3
   146f0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   146f4:	eor	r4, sl, r1
   146f8:	orrs	r5, r5, r4
   146fc:	bne	14714 <__assert_fail@plt+0x2ce4>
   14700:	ldr	r5, [fp, #-92]	; 0xffffffa4
   14704:	ldrb	r1, [r5, r8]
   14708:	add	r1, r1, #1
   1470c:	strb	r1, [r5, r8]
   14710:	b	14954 <__assert_fail@plt+0x2f24>
   14714:	mov	r4, r3
   14718:	sub	r1, r8, #224	; 0xe0
   1471c:	ldr	r3, [sp, #68]	; 0x44
   14720:	ldr	sl, [sp, #72]	; 0x48
   14724:	cmp	r3, r1
   14728:	bgt	14624 <__assert_fail@plt+0x2bf4>
   1472c:	mov	r3, r4
   14730:	b	14928 <__assert_fail@plt+0x2ef8>
   14734:	cmp	r4, #0
   14738:	str	r5, [sp, #64]	; 0x40
   1473c:	bne	146a4 <__assert_fail@plt+0x2c74>
   14740:	ldr	r1, [sp, #96]	; 0x60
   14744:	ldr	r5, [sp, #72]	; 0x48
   14748:	add	r4, r1, r5
   1474c:	cmp	sl, r4
   14750:	bhi	146a4 <__assert_fail@plt+0x2c74>
   14754:	mov	r3, r5
   14758:	ldr	r1, [sp, #88]	; 0x58
   1475c:	ldr	r5, [sp, #80]	; 0x50
   14760:	add	sl, r1, r5
   14764:	ldr	r1, [sp, #92]	; 0x5c
   14768:	add	r3, r1, r3
   1476c:	add	r1, r1, r5
   14770:	str	r3, [sp, #56]	; 0x38
   14774:	cmp	r1, r3
   14778:	str	r1, [sp, #40]	; 0x28
   1477c:	mov	r1, #0
   14780:	mov	r3, sl
   14784:	movwcc	r1, #1
   14788:	str	r1, [sp, #16]
   1478c:	str	sl, [sp, #44]	; 0x2c
   14790:	ldr	r1, [sp, #64]	; 0x40
   14794:	cmp	sl, r1
   14798:	mov	r1, #0
   1479c:	movwcc	r1, #1
   147a0:	str	r1, [sp, #12]
   147a4:	ldr	r1, [sp, #104]	; 0x68
   147a8:	add	r1, r1, r5, lsl #3
   147ac:	str	r1, [sp, #52]	; 0x34
   147b0:	ldr	r1, [sp, #56]	; 0x38
   147b4:	ldr	sl, [sp, #52]	; 0x34
   147b8:	cmp	r1, sl
   147bc:	mov	r1, #0
   147c0:	movwhi	r1, #1
   147c4:	str	r1, [sp, #24]
   147c8:	mov	r1, #0
   147cc:	ldr	sl, [sp, #48]	; 0x30
   147d0:	cmp	r3, sl
   147d4:	movwcc	r1, #1
   147d8:	str	r1, [sp, #20]
   147dc:	ldr	r1, [sp, #72]	; 0x48
   147e0:	ldr	r3, [sp, #104]	; 0x68
   147e4:	add	r3, r3, r1, lsl #3
   147e8:	str	r3, [sp, #36]	; 0x24
   147ec:	ldr	r1, [sp, #40]	; 0x28
   147f0:	cmp	r1, r3
   147f4:	mov	r1, #0
   147f8:	movwcc	r1, #1
   147fc:	str	r1, [sp, #32]
   14800:	ldr	r1, [sp, #84]	; 0x54
   14804:	add	r5, r1, r5, lsl #3
   14808:	str	r5, [sp, #40]	; 0x28
   1480c:	ldr	r1, [sp, #64]	; 0x40
   14810:	cmp	r1, r5
   14814:	mov	r1, #0
   14818:	movwhi	r1, #1
   1481c:	str	r1, [sp, #28]
   14820:	ldr	r1, [sp, #52]	; 0x34
   14824:	cmp	r1, r3
   14828:	mov	r1, #0
   1482c:	movwcc	r1, #1
   14830:	cmp	r5, sl
   14834:	mov	sl, #0
   14838:	str	r1, [sp, #64]	; 0x40
   1483c:	mov	r1, #0
   14840:	ldr	r3, [sp, #44]	; 0x2c
   14844:	ldr	r5, [sp, #36]	; 0x24
   14848:	movwcc	r1, #1
   1484c:	cmp	r3, r5
   14850:	ldr	r3, [sp, #56]	; 0x38
   14854:	ldr	r5, [sp, #40]	; 0x28
   14858:	movwcc	sl, #1
   1485c:	cmp	r3, r5
   14860:	mov	r5, #0
   14864:	movwhi	r5, #1
   14868:	tst	r5, sl
   1486c:	bne	145a4 <__assert_fail@plt+0x2b74>
   14870:	ldr	r3, [sp, #64]	; 0x40
   14874:	ands	r5, r1, r3
   14878:	bne	145a4 <__assert_fail@plt+0x2b74>
   1487c:	ldr	r1, [sp, #32]
   14880:	ldr	r3, [sp, #28]
   14884:	ands	r5, r3, r1
   14888:	sub	r1, fp, #52	; 0x34
   1488c:	bne	145a4 <__assert_fail@plt+0x2b74>
   14890:	ldr	r3, [sp, #24]
   14894:	ldr	r5, [sp, #20]
   14898:	ands	r5, r5, r3
   1489c:	bne	145a4 <__assert_fail@plt+0x2b74>
   148a0:	ldr	r5, [sp, #16]
   148a4:	ldr	r3, [sp, #12]
   148a8:	ands	r5, r3, r5
   148ac:	bne	145a4 <__assert_fail@plt+0x2b74>
   148b0:	ldr	r5, [sp, #60]	; 0x3c
   148b4:	mvn	r3, #15
   148b8:	bic	sl, r5, #1
   148bc:	ldr	r5, [sp, #68]	; 0x44
   148c0:	sub	r5, r5, sl
   148c4:	str	r5, [sp, #68]	; 0x44
   148c8:	str	sl, [sp, #64]	; 0x40
   148cc:	sub	r5, r8, #8
   148d0:	subs	sl, sl, #2
   148d4:	vld1.64	{d16-d17}, [r5]
   148d8:	vst1.64	{d16-d17}, [r8], r3
   148dc:	ldrh	r5, [r4, #-1]
   148e0:	strh	r5, [fp, #-52]	; 0xffffffcc
   148e4:	vld1.16	{d16[0]}, [r1 :16]
   148e8:	vmovl.u8	q8, d16
   148ec:	vmovl.u16	q8, d16
   148f0:	vmov.32	r5, d16[1]
   148f4:	strb	r5, [r4, #1]
   148f8:	vmov.32	r5, d16[0]
   148fc:	strb	r5, [r4]
   14900:	sub	r4, r4, #2
   14904:	bne	148cc <__assert_fail@plt+0x2e9c>
   14908:	ldr	r1, [sp, #60]	; 0x3c
   1490c:	ldr	r3, [sp, #64]	; 0x40
   14910:	ldr	sl, [sp, #72]	; 0x48
   14914:	cmp	r1, r3
   14918:	ldr	r3, [sp, #68]	; 0x44
   1491c:	ldr	r1, [sp, #80]	; 0x50
   14920:	bne	146a4 <__assert_fail@plt+0x2c74>
   14924:	ldr	r3, [sp, #76]	; 0x4c
   14928:	add	r8, r1, #1
   1492c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14930:	ldr	r5, [fp, #-88]	; 0xffffffa8
   14934:	add	r4, r1, r8, lsl #3
   14938:	str	r3, [r4, #16]
   1493c:	str	r5, [r4, #20]
   14940:	add	r5, r1, r8
   14944:	mov	r4, #1
   14948:	strb	r4, [r5, #224]	; 0xe0
   1494c:	add	r5, sl, #1
   14950:	strb	r5, [r1, #250]	; 0xfa
   14954:	umull	r1, r5, r7, lr
   14958:	mov	r8, r7
   1495c:	mov	r3, r6
   14960:	mla	r5, r7, r0, r5
   14964:	mov	r7, r1
   14968:	mla	r4, r6, lr, r5
   1496c:	subs	r5, ip, r1
   14970:	sbcs	r5, r2, r4
   14974:	mov	r6, r4
   14978:	bcc	1521c <__assert_fail@plt+0x37ec>
   1497c:	b	145ac <__assert_fail@plt+0x2b7c>
   14980:	ldr	r3, [sp, #68]	; 0x44
   14984:	b	14a80 <__assert_fail@plt+0x3050>
   14988:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1498c:	ldrb	sl, [r1, #250]	; 0xfa
   14990:	sub	r1, sl, #1
   14994:	cmp	sl, #0
   14998:	beq	14d00 <__assert_fail@plt+0x32d0>
   1499c:	str	r1, [sp, #68]	; 0x44
   149a0:	str	sl, [sp, #72]	; 0x48
   149a4:	mov	r1, #8
   149a8:	add	r8, sl, #223	; 0xdf
   149ac:	ldr	r3, [sp, #76]	; 0x4c
   149b0:	add	r5, r1, sl, lsl #3
   149b4:	ldr	r4, [fp, #-92]	; 0xffffffa4
   149b8:	ldr	r1, [r4, r5]!
   149bc:	ldr	sl, [r4, #4]
   149c0:	subs	r4, r3, r1
   149c4:	ldr	r4, [fp, #-88]	; 0xffffffa8
   149c8:	sbcs	r4, r4, sl
   149cc:	bcs	14ac8 <__assert_fail@plt+0x3098>
   149d0:	sub	r4, r8, #224	; 0xe0
   149d4:	sub	r1, r8, #1
   149d8:	sub	r5, r5, #8
   149dc:	cmp	r4, #0
   149e0:	mov	r8, r1
   149e4:	bgt	149b4 <__assert_fail@plt+0x2f84>
   149e8:	mov	r4, r3
   149ec:	sub	r1, r1, #224	; 0xe0
   149f0:	ldr	r3, [sp, #68]	; 0x44
   149f4:	ldr	sl, [sp, #72]	; 0x48
   149f8:	cmp	r3, r1
   149fc:	ble	14b08 <__assert_fail@plt+0x30d8>
   14a00:	mvn	r5, r1
   14a04:	str	r1, [sp, #80]	; 0x50
   14a08:	add	r4, r5, sl
   14a0c:	cmp	r4, #1
   14a10:	bls	14a80 <__assert_fail@plt+0x3050>
   14a14:	sub	r5, sl, #2
   14a18:	str	r4, [sp, #60]	; 0x3c
   14a1c:	sub	sl, r5, r1
   14a20:	mov	r1, #8
   14a24:	ldr	r5, [sp, #72]	; 0x48
   14a28:	umull	r8, r4, sl, r1
   14a2c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14a30:	cmp	r4, #0
   14a34:	str	r8, [sp, #64]	; 0x40
   14a38:	movwne	r4, #1
   14a3c:	add	r5, r1, r5, lsl #3
   14a40:	add	r1, r5, #16
   14a44:	cmp	r8, r1
   14a48:	bhi	14a80 <__assert_fail@plt+0x3050>
   14a4c:	cmp	r4, #0
   14a50:	str	r1, [sp, #48]	; 0x30
   14a54:	bne	14a80 <__assert_fail@plt+0x3050>
   14a58:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14a5c:	ldr	r8, [sp, #72]	; 0x48
   14a60:	add	r5, r1, r8
   14a64:	add	r5, r5, #224	; 0xe0
   14a68:	cmp	sl, r5
   14a6c:	ldrls	r1, [sp, #100]	; 0x64
   14a70:	addls	r8, r1, r8, lsl #3
   14a74:	ldrls	r1, [sp, #64]	; 0x40
   14a78:	cmpls	r1, r8
   14a7c:	bls	14b10 <__assert_fail@plt+0x30e0>
   14a80:	ldr	sl, [fp, #-92]	; 0xffffffa4
   14a84:	lsl	r4, r3, #3
   14a88:	add	r5, sl, r4
   14a8c:	sub	r4, r4, #8
   14a90:	ldr	r8, [r5, #16]
   14a94:	ldr	r1, [r5, #20]
   14a98:	str	r8, [r5, #24]
   14a9c:	str	r1, [r5, #28]
   14aa0:	add	r1, sl, r3
   14aa4:	sub	r3, r3, #1
   14aa8:	ldrb	r5, [r1, #224]	; 0xe0
   14aac:	strb	r5, [r1, #225]	; 0xe1
   14ab0:	ldr	r1, [sp, #80]	; 0x50
   14ab4:	cmp	r3, r1
   14ab8:	bgt	14a88 <__assert_fail@plt+0x3058>
   14abc:	ldr	r3, [sp, #76]	; 0x4c
   14ac0:	ldr	sl, [sp, #72]	; 0x48
   14ac4:	b	14d04 <__assert_fail@plt+0x32d4>
   14ac8:	eor	r5, r1, r3
   14acc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14ad0:	eor	r4, sl, r1
   14ad4:	orrs	r5, r5, r4
   14ad8:	bne	14af0 <__assert_fail@plt+0x30c0>
   14adc:	ldr	r5, [fp, #-92]	; 0xffffffa4
   14ae0:	ldrb	r1, [r5, r8]
   14ae4:	add	r1, r1, #1
   14ae8:	strb	r1, [r5, r8]
   14aec:	b	14d30 <__assert_fail@plt+0x3300>
   14af0:	mov	r4, r3
   14af4:	sub	r1, r8, #224	; 0xe0
   14af8:	ldr	r3, [sp, #68]	; 0x44
   14afc:	ldr	sl, [sp, #72]	; 0x48
   14b00:	cmp	r3, r1
   14b04:	bgt	14a00 <__assert_fail@plt+0x2fd0>
   14b08:	mov	r3, r4
   14b0c:	b	14d04 <__assert_fail@plt+0x32d4>
   14b10:	cmp	r4, #0
   14b14:	str	r5, [sp, #64]	; 0x40
   14b18:	bne	14a80 <__assert_fail@plt+0x3050>
   14b1c:	ldr	r1, [sp, #96]	; 0x60
   14b20:	ldr	r5, [sp, #72]	; 0x48
   14b24:	add	r4, r1, r5
   14b28:	cmp	sl, r4
   14b2c:	bhi	14a80 <__assert_fail@plt+0x3050>
   14b30:	mov	r3, r5
   14b34:	ldr	r1, [sp, #88]	; 0x58
   14b38:	ldr	r5, [sp, #80]	; 0x50
   14b3c:	add	sl, r1, r5
   14b40:	ldr	r1, [sp, #92]	; 0x5c
   14b44:	add	r3, r1, r3
   14b48:	add	r1, r1, r5
   14b4c:	str	r3, [sp, #56]	; 0x38
   14b50:	cmp	r1, r3
   14b54:	str	r1, [sp, #40]	; 0x28
   14b58:	mov	r1, #0
   14b5c:	mov	r3, sl
   14b60:	movwcc	r1, #1
   14b64:	str	r1, [sp, #16]
   14b68:	str	sl, [sp, #44]	; 0x2c
   14b6c:	ldr	r1, [sp, #64]	; 0x40
   14b70:	cmp	sl, r1
   14b74:	mov	r1, #0
   14b78:	movwcc	r1, #1
   14b7c:	str	r1, [sp, #12]
   14b80:	ldr	r1, [sp, #104]	; 0x68
   14b84:	add	r1, r1, r5, lsl #3
   14b88:	str	r1, [sp, #52]	; 0x34
   14b8c:	ldr	r1, [sp, #56]	; 0x38
   14b90:	ldr	sl, [sp, #52]	; 0x34
   14b94:	cmp	r1, sl
   14b98:	mov	r1, #0
   14b9c:	movwhi	r1, #1
   14ba0:	str	r1, [sp, #24]
   14ba4:	mov	r1, #0
   14ba8:	ldr	sl, [sp, #48]	; 0x30
   14bac:	cmp	r3, sl
   14bb0:	movwcc	r1, #1
   14bb4:	str	r1, [sp, #20]
   14bb8:	ldr	r1, [sp, #72]	; 0x48
   14bbc:	ldr	r3, [sp, #104]	; 0x68
   14bc0:	add	r3, r3, r1, lsl #3
   14bc4:	str	r3, [sp, #36]	; 0x24
   14bc8:	ldr	r1, [sp, #40]	; 0x28
   14bcc:	cmp	r1, r3
   14bd0:	mov	r1, #0
   14bd4:	movwcc	r1, #1
   14bd8:	str	r1, [sp, #32]
   14bdc:	ldr	r1, [sp, #84]	; 0x54
   14be0:	add	r5, r1, r5, lsl #3
   14be4:	str	r5, [sp, #40]	; 0x28
   14be8:	ldr	r1, [sp, #64]	; 0x40
   14bec:	cmp	r1, r5
   14bf0:	mov	r1, #0
   14bf4:	movwhi	r1, #1
   14bf8:	str	r1, [sp, #28]
   14bfc:	ldr	r1, [sp, #52]	; 0x34
   14c00:	cmp	r1, r3
   14c04:	mov	r1, #0
   14c08:	movwcc	r1, #1
   14c0c:	cmp	r5, sl
   14c10:	mov	sl, #0
   14c14:	str	r1, [sp, #64]	; 0x40
   14c18:	mov	r1, #0
   14c1c:	ldr	r3, [sp, #44]	; 0x2c
   14c20:	ldr	r5, [sp, #36]	; 0x24
   14c24:	movwcc	r1, #1
   14c28:	cmp	r3, r5
   14c2c:	ldr	r3, [sp, #56]	; 0x38
   14c30:	ldr	r5, [sp, #40]	; 0x28
   14c34:	movwcc	sl, #1
   14c38:	cmp	r3, r5
   14c3c:	mov	r5, #0
   14c40:	movwhi	r5, #1
   14c44:	tst	r5, sl
   14c48:	bne	14980 <__assert_fail@plt+0x2f50>
   14c4c:	ldr	r3, [sp, #64]	; 0x40
   14c50:	ands	r5, r1, r3
   14c54:	bne	14980 <__assert_fail@plt+0x2f50>
   14c58:	ldr	r1, [sp, #32]
   14c5c:	ldr	r3, [sp, #28]
   14c60:	ands	r5, r3, r1
   14c64:	sub	r1, fp, #56	; 0x38
   14c68:	bne	14980 <__assert_fail@plt+0x2f50>
   14c6c:	ldr	r3, [sp, #24]
   14c70:	ldr	r5, [sp, #20]
   14c74:	ands	r5, r5, r3
   14c78:	bne	14980 <__assert_fail@plt+0x2f50>
   14c7c:	ldr	r5, [sp, #16]
   14c80:	ldr	r3, [sp, #12]
   14c84:	ands	r5, r3, r5
   14c88:	bne	14980 <__assert_fail@plt+0x2f50>
   14c8c:	ldr	r5, [sp, #60]	; 0x3c
   14c90:	mvn	r3, #15
   14c94:	bic	sl, r5, #1
   14c98:	ldr	r5, [sp, #68]	; 0x44
   14c9c:	sub	r5, r5, sl
   14ca0:	str	r5, [sp, #68]	; 0x44
   14ca4:	str	sl, [sp, #64]	; 0x40
   14ca8:	sub	r5, r8, #8
   14cac:	subs	sl, sl, #2
   14cb0:	vld1.64	{d16-d17}, [r5]
   14cb4:	vst1.64	{d16-d17}, [r8], r3
   14cb8:	ldrh	r5, [r4, #-1]
   14cbc:	strh	r5, [fp, #-56]	; 0xffffffc8
   14cc0:	vld1.16	{d16[0]}, [r1 :16]
   14cc4:	vmovl.u8	q8, d16
   14cc8:	vmovl.u16	q8, d16
   14ccc:	vmov.32	r5, d16[1]
   14cd0:	strb	r5, [r4, #1]
   14cd4:	vmov.32	r5, d16[0]
   14cd8:	strb	r5, [r4]
   14cdc:	sub	r4, r4, #2
   14ce0:	bne	14ca8 <__assert_fail@plt+0x3278>
   14ce4:	ldr	r1, [sp, #60]	; 0x3c
   14ce8:	ldr	r3, [sp, #64]	; 0x40
   14cec:	ldr	sl, [sp, #72]	; 0x48
   14cf0:	cmp	r1, r3
   14cf4:	ldr	r3, [sp, #68]	; 0x44
   14cf8:	ldr	r1, [sp, #80]	; 0x50
   14cfc:	bne	14a80 <__assert_fail@plt+0x3050>
   14d00:	ldr	r3, [sp, #76]	; 0x4c
   14d04:	add	r8, r1, #1
   14d08:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14d0c:	ldr	r5, [fp, #-88]	; 0xffffffa8
   14d10:	add	r4, r1, r8, lsl #3
   14d14:	str	r3, [r4, #16]
   14d18:	str	r5, [r4, #20]
   14d1c:	add	r5, r1, r8
   14d20:	mov	r4, #1
   14d24:	strb	r4, [r5, #224]	; 0xe0
   14d28:	add	r5, sl, #1
   14d2c:	strb	r5, [r1, #250]	; 0xfa
   14d30:	umull	r1, r5, r0, ip
   14d34:	mov	r8, r0
   14d38:	mov	r3, r2
   14d3c:	mla	r5, r0, lr, r5
   14d40:	mov	r0, r1
   14d44:	mla	r4, r2, ip, r5
   14d48:	subs	r5, r7, r1
   14d4c:	sbcs	r5, r6, r4
   14d50:	mov	r2, r4
   14d54:	bcc	15244 <__assert_fail@plt+0x3814>
   14d58:	b	14988 <__assert_fail@plt+0x2f58>
   14d5c:	ldr	r3, [sp, #68]	; 0x44
   14d60:	b	14e5c <__assert_fail@plt+0x342c>
   14d64:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14d68:	ldrb	sl, [r1, #250]	; 0xfa
   14d6c:	sub	r1, sl, #1
   14d70:	cmp	sl, #0
   14d74:	beq	150dc <__assert_fail@plt+0x36ac>
   14d78:	str	r1, [sp, #68]	; 0x44
   14d7c:	str	sl, [sp, #72]	; 0x48
   14d80:	mov	r1, #8
   14d84:	add	r8, sl, #223	; 0xdf
   14d88:	ldr	r3, [sp, #76]	; 0x4c
   14d8c:	add	r5, r1, sl, lsl #3
   14d90:	ldr	r4, [fp, #-92]	; 0xffffffa4
   14d94:	ldr	r1, [r4, r5]!
   14d98:	ldr	sl, [r4, #4]
   14d9c:	subs	r4, r3, r1
   14da0:	ldr	r4, [fp, #-88]	; 0xffffffa8
   14da4:	sbcs	r4, r4, sl
   14da8:	bcs	14ea4 <__assert_fail@plt+0x3474>
   14dac:	sub	r4, r8, #224	; 0xe0
   14db0:	sub	r1, r8, #1
   14db4:	sub	r5, r5, #8
   14db8:	cmp	r4, #0
   14dbc:	mov	r8, r1
   14dc0:	bgt	14d90 <__assert_fail@plt+0x3360>
   14dc4:	mov	r4, r3
   14dc8:	sub	r1, r1, #224	; 0xe0
   14dcc:	ldr	r3, [sp, #68]	; 0x44
   14dd0:	ldr	sl, [sp, #72]	; 0x48
   14dd4:	cmp	r3, r1
   14dd8:	ble	14ee4 <__assert_fail@plt+0x34b4>
   14ddc:	mvn	r5, r1
   14de0:	str	r1, [sp, #80]	; 0x50
   14de4:	add	r4, r5, sl
   14de8:	cmp	r4, #1
   14dec:	bls	14e5c <__assert_fail@plt+0x342c>
   14df0:	sub	r5, sl, #2
   14df4:	str	r4, [sp, #60]	; 0x3c
   14df8:	sub	sl, r5, r1
   14dfc:	mov	r1, #8
   14e00:	ldr	r5, [sp, #72]	; 0x48
   14e04:	umull	r8, r4, sl, r1
   14e08:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14e0c:	cmp	r4, #0
   14e10:	str	r8, [sp, #64]	; 0x40
   14e14:	movwne	r4, #1
   14e18:	add	r5, r1, r5, lsl #3
   14e1c:	add	r1, r5, #16
   14e20:	cmp	r8, r1
   14e24:	bhi	14e5c <__assert_fail@plt+0x342c>
   14e28:	cmp	r4, #0
   14e2c:	str	r1, [sp, #48]	; 0x30
   14e30:	bne	14e5c <__assert_fail@plt+0x342c>
   14e34:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14e38:	ldr	r8, [sp, #72]	; 0x48
   14e3c:	add	r5, r1, r8
   14e40:	add	r5, r5, #224	; 0xe0
   14e44:	cmp	sl, r5
   14e48:	ldrls	r1, [sp, #100]	; 0x64
   14e4c:	addls	r8, r1, r8, lsl #3
   14e50:	ldrls	r1, [sp, #64]	; 0x40
   14e54:	cmpls	r1, r8
   14e58:	bls	14eec <__assert_fail@plt+0x34bc>
   14e5c:	ldr	sl, [fp, #-92]	; 0xffffffa4
   14e60:	lsl	r4, r3, #3
   14e64:	add	r5, sl, r4
   14e68:	sub	r4, r4, #8
   14e6c:	ldr	r8, [r5, #16]
   14e70:	ldr	r1, [r5, #20]
   14e74:	str	r8, [r5, #24]
   14e78:	str	r1, [r5, #28]
   14e7c:	add	r1, sl, r3
   14e80:	sub	r3, r3, #1
   14e84:	ldrb	r5, [r1, #224]	; 0xe0
   14e88:	strb	r5, [r1, #225]	; 0xe1
   14e8c:	ldr	r1, [sp, #80]	; 0x50
   14e90:	cmp	r3, r1
   14e94:	bgt	14e64 <__assert_fail@plt+0x3434>
   14e98:	ldr	r3, [sp, #76]	; 0x4c
   14e9c:	ldr	sl, [sp, #72]	; 0x48
   14ea0:	b	150e0 <__assert_fail@plt+0x36b0>
   14ea4:	eor	r5, r1, r3
   14ea8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14eac:	eor	r4, sl, r1
   14eb0:	orrs	r5, r5, r4
   14eb4:	bne	14ecc <__assert_fail@plt+0x349c>
   14eb8:	ldr	r5, [fp, #-92]	; 0xffffffa4
   14ebc:	ldrb	r1, [r5, r8]
   14ec0:	add	r1, r1, #1
   14ec4:	strb	r1, [r5, r8]
   14ec8:	b	1510c <__assert_fail@plt+0x36dc>
   14ecc:	mov	r4, r3
   14ed0:	sub	r1, r8, #224	; 0xe0
   14ed4:	ldr	r3, [sp, #68]	; 0x44
   14ed8:	ldr	sl, [sp, #72]	; 0x48
   14edc:	cmp	r3, r1
   14ee0:	bgt	14ddc <__assert_fail@plt+0x33ac>
   14ee4:	mov	r3, r4
   14ee8:	b	150e0 <__assert_fail@plt+0x36b0>
   14eec:	cmp	r4, #0
   14ef0:	str	r5, [sp, #64]	; 0x40
   14ef4:	bne	14e5c <__assert_fail@plt+0x342c>
   14ef8:	ldr	r1, [sp, #96]	; 0x60
   14efc:	ldr	r5, [sp, #72]	; 0x48
   14f00:	add	r4, r1, r5
   14f04:	cmp	sl, r4
   14f08:	bhi	14e5c <__assert_fail@plt+0x342c>
   14f0c:	mov	r3, r5
   14f10:	ldr	r1, [sp, #88]	; 0x58
   14f14:	ldr	r5, [sp, #80]	; 0x50
   14f18:	add	sl, r1, r5
   14f1c:	ldr	r1, [sp, #92]	; 0x5c
   14f20:	add	r3, r1, r3
   14f24:	add	r1, r1, r5
   14f28:	str	r3, [sp, #56]	; 0x38
   14f2c:	cmp	r1, r3
   14f30:	str	r1, [sp, #40]	; 0x28
   14f34:	mov	r1, #0
   14f38:	mov	r3, sl
   14f3c:	movwcc	r1, #1
   14f40:	str	r1, [sp, #16]
   14f44:	str	sl, [sp, #44]	; 0x2c
   14f48:	ldr	r1, [sp, #64]	; 0x40
   14f4c:	cmp	sl, r1
   14f50:	mov	r1, #0
   14f54:	movwcc	r1, #1
   14f58:	str	r1, [sp, #12]
   14f5c:	ldr	r1, [sp, #104]	; 0x68
   14f60:	add	r1, r1, r5, lsl #3
   14f64:	str	r1, [sp, #52]	; 0x34
   14f68:	ldr	r1, [sp, #56]	; 0x38
   14f6c:	ldr	sl, [sp, #52]	; 0x34
   14f70:	cmp	r1, sl
   14f74:	mov	r1, #0
   14f78:	movwhi	r1, #1
   14f7c:	str	r1, [sp, #24]
   14f80:	mov	r1, #0
   14f84:	ldr	sl, [sp, #48]	; 0x30
   14f88:	cmp	r3, sl
   14f8c:	movwcc	r1, #1
   14f90:	str	r1, [sp, #20]
   14f94:	ldr	r1, [sp, #72]	; 0x48
   14f98:	ldr	r3, [sp, #104]	; 0x68
   14f9c:	add	r3, r3, r1, lsl #3
   14fa0:	str	r3, [sp, #36]	; 0x24
   14fa4:	ldr	r1, [sp, #40]	; 0x28
   14fa8:	cmp	r1, r3
   14fac:	mov	r1, #0
   14fb0:	movwcc	r1, #1
   14fb4:	str	r1, [sp, #32]
   14fb8:	ldr	r1, [sp, #84]	; 0x54
   14fbc:	add	r5, r1, r5, lsl #3
   14fc0:	str	r5, [sp, #40]	; 0x28
   14fc4:	ldr	r1, [sp, #64]	; 0x40
   14fc8:	cmp	r1, r5
   14fcc:	mov	r1, #0
   14fd0:	movwhi	r1, #1
   14fd4:	str	r1, [sp, #28]
   14fd8:	ldr	r1, [sp, #52]	; 0x34
   14fdc:	cmp	r1, r3
   14fe0:	mov	r1, #0
   14fe4:	movwcc	r1, #1
   14fe8:	cmp	r5, sl
   14fec:	mov	sl, #0
   14ff0:	str	r1, [sp, #64]	; 0x40
   14ff4:	mov	r1, #0
   14ff8:	ldr	r3, [sp, #44]	; 0x2c
   14ffc:	ldr	r5, [sp, #36]	; 0x24
   15000:	movwcc	r1, #1
   15004:	cmp	r3, r5
   15008:	ldr	r3, [sp, #56]	; 0x38
   1500c:	ldr	r5, [sp, #40]	; 0x28
   15010:	movwcc	sl, #1
   15014:	cmp	r3, r5
   15018:	mov	r5, #0
   1501c:	movwhi	r5, #1
   15020:	tst	r5, sl
   15024:	bne	14d5c <__assert_fail@plt+0x332c>
   15028:	ldr	r3, [sp, #64]	; 0x40
   1502c:	ands	r5, r1, r3
   15030:	bne	14d5c <__assert_fail@plt+0x332c>
   15034:	ldr	r1, [sp, #32]
   15038:	ldr	r3, [sp, #28]
   1503c:	ands	r5, r3, r1
   15040:	sub	r1, fp, #60	; 0x3c
   15044:	bne	14d5c <__assert_fail@plt+0x332c>
   15048:	ldr	r3, [sp, #24]
   1504c:	ldr	r5, [sp, #20]
   15050:	ands	r5, r5, r3
   15054:	bne	14d5c <__assert_fail@plt+0x332c>
   15058:	ldr	r5, [sp, #16]
   1505c:	ldr	r3, [sp, #12]
   15060:	ands	r5, r3, r5
   15064:	bne	14d5c <__assert_fail@plt+0x332c>
   15068:	ldr	r5, [sp, #60]	; 0x3c
   1506c:	mvn	r3, #15
   15070:	bic	sl, r5, #1
   15074:	ldr	r5, [sp, #68]	; 0x44
   15078:	sub	r5, r5, sl
   1507c:	str	r5, [sp, #68]	; 0x44
   15080:	str	sl, [sp, #64]	; 0x40
   15084:	sub	r5, r8, #8
   15088:	subs	sl, sl, #2
   1508c:	vld1.64	{d16-d17}, [r5]
   15090:	vst1.64	{d16-d17}, [r8], r3
   15094:	ldrh	r5, [r4, #-1]
   15098:	strh	r5, [fp, #-60]	; 0xffffffc4
   1509c:	vld1.16	{d16[0]}, [r1 :16]
   150a0:	vmovl.u8	q8, d16
   150a4:	vmovl.u16	q8, d16
   150a8:	vmov.32	r5, d16[1]
   150ac:	strb	r5, [r4, #1]
   150b0:	vmov.32	r5, d16[0]
   150b4:	strb	r5, [r4]
   150b8:	sub	r4, r4, #2
   150bc:	bne	15084 <__assert_fail@plt+0x3654>
   150c0:	ldr	r1, [sp, #60]	; 0x3c
   150c4:	ldr	r3, [sp, #64]	; 0x40
   150c8:	ldr	sl, [sp, #72]	; 0x48
   150cc:	cmp	r1, r3
   150d0:	ldr	r3, [sp, #68]	; 0x44
   150d4:	ldr	r1, [sp, #80]	; 0x50
   150d8:	bne	14e5c <__assert_fail@plt+0x342c>
   150dc:	ldr	r3, [sp, #76]	; 0x4c
   150e0:	add	r8, r1, #1
   150e4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   150e8:	ldr	r5, [fp, #-88]	; 0xffffffa8
   150ec:	add	r4, r1, r8, lsl #3
   150f0:	str	r3, [r4, #16]
   150f4:	str	r5, [r4, #20]
   150f8:	add	r5, r1, r8
   150fc:	mov	r4, #1
   15100:	strb	r4, [r5, #224]	; 0xe0
   15104:	add	r5, sl, #1
   15108:	strb	r5, [r1, #250]	; 0xfa
   1510c:	umull	r1, r5, r0, ip
   15110:	mov	r8, r0
   15114:	mov	r3, r2
   15118:	mla	r5, r0, r7, r5
   1511c:	mov	r0, r1
   15120:	mla	r4, r2, ip, r5
   15124:	subs	r5, r6, r1
   15128:	sbcs	r5, lr, r4
   1512c:	mov	r2, r4
   15130:	bcc	1526c <__assert_fail@plt+0x383c>
   15134:	b	14d64 <__assert_fail@plt+0x3334>
   15138:	movw	r9, #3576	; 0xdf8
   1513c:	str	r5, [fp, #-84]	; 0xffffffac
   15140:	str	r6, [fp, #-80]	; 0xffffffb0
   15144:	mov	r5, r3
   15148:	str	r4, [fp, #-72]	; 0xffffffb8
   1514c:	movt	r9, #2
   15150:	ldr	r0, [r9, r4, lsl #4]!
   15154:	umull	r2, r1, r0, r8
   15158:	ldr	ip, [r9, #4]
   1515c:	ldr	r7, [r9, #12]
   15160:	mla	r6, r0, r3, r1
   15164:	ldr	r3, [r9, #8]
   15168:	mla	r6, ip, r8, r6
   1516c:	subs	r4, r3, r2
   15170:	sbcs	r4, r7, r6
   15174:	bcs	13834 <__assert_fail@plt+0x1e04>
   15178:	ldr	r0, [r9, #16]
   1517c:	ldr	lr, [r9, #20]
   15180:	ldr	r2, [r9, #24]
   15184:	ldr	ip, [r9, #28]
   15188:	mov	r3, r5
   1518c:	umull	r7, r6, r0, r8
   15190:	mla	r6, r0, r5, r6
   15194:	subs	r4, r2, r7
   15198:	mla	r6, lr, r8, r6
   1519c:	sbcs	r4, ip, r6
   151a0:	bcs	13058 <__assert_fail@plt+0x1628>
   151a4:	ldr	r0, [r9, #32]
   151a8:	ldr	lr, [r9, #36]	; 0x24
   151ac:	ldr	r2, [r9, #40]	; 0x28
   151b0:	ldr	ip, [r9, #44]	; 0x2c
   151b4:	umull	r7, r6, r0, r8
   151b8:	mla	r6, r0, r3, r6
   151bc:	subs	r4, r2, r7
   151c0:	mla	r6, lr, r8, r6
   151c4:	sbcs	r4, ip, r6
   151c8:	bcs	13088 <__assert_fail@plt+0x1658>
   151cc:	ldr	r0, [r9, #48]	; 0x30
   151d0:	ldr	lr, [r9, #52]	; 0x34
   151d4:	ldr	r2, [r9, #56]	; 0x38
   151d8:	ldr	ip, [r9, #60]	; 0x3c
   151dc:	umull	r7, r6, r0, r8
   151e0:	mla	r6, r0, r3, r6
   151e4:	subs	r4, r2, r7
   151e8:	mla	r6, lr, r8, r6
   151ec:	sbcs	r4, ip, r6
   151f0:	bcs	130c4 <__assert_fail@plt+0x1694>
   151f4:	ldr	lr, [r9, #64]	; 0x40
   151f8:	ldr	r0, [r9, #68]	; 0x44
   151fc:	ldr	ip, [r9, #72]	; 0x48
   15200:	ldr	r2, [r9, #76]	; 0x4c
   15204:	umull	r7, r6, lr, r8
   15208:	mla	r6, lr, r3, r6
   1520c:	subs	r4, ip, r7
   15210:	mla	r6, r0, r8, r6
   15214:	sbcs	r4, r2, r6
   15218:	bcs	1310c <__assert_fail@plt+0x16dc>
   1521c:	ldr	ip, [r9, #80]	; 0x50
   15220:	ldr	lr, [r9, #84]	; 0x54
   15224:	ldr	r7, [r9, #88]	; 0x58
   15228:	ldr	r6, [r9, #92]	; 0x5c
   1522c:	umull	r0, r2, ip, r8
   15230:	mla	r2, ip, r3, r2
   15234:	subs	r4, r7, r0
   15238:	mla	r2, lr, r8, r2
   1523c:	sbcs	r4, r6, r2
   15240:	bcs	13160 <__assert_fail@plt+0x1730>
   15244:	ldr	ip, [r9, #96]	; 0x60
   15248:	ldr	r7, [r9, #100]	; 0x64
   1524c:	ldr	r6, [r9, #104]	; 0x68
   15250:	ldr	lr, [r9, #108]	; 0x6c
   15254:	umull	r0, r2, ip, r8
   15258:	mla	r2, ip, r3, r2
   1525c:	subs	r4, r6, r0
   15260:	mla	r2, r7, r8, r2
   15264:	sbcs	r4, lr, r2
   15268:	bcs	131c8 <__assert_fail@plt+0x1798>
   1526c:	ldr	lr, [r9, #112]	; 0x70
   15270:	ldr	ip, [r9, #116]	; 0x74
   15274:	ldr	sl, [r9, #120]	; 0x78
   15278:	ldr	r7, [r9, #124]	; 0x7c
   1527c:	umull	r0, r1, lr, r8
   15280:	mla	r1, lr, r3, r1
   15284:	mla	r2, ip, r8, r1
   15288:	subs	r1, sl, r0
   1528c:	sbcs	r1, r7, r2
   15290:	bcs	1323c <__assert_fail@plt+0x180c>
   15294:	ldr	r4, [fp, #-72]	; 0xffffffb8
   15298:	movw	r0, #15051	; 0x3acb
   1529c:	ldr	r6, [fp, #-80]	; 0xffffffb0
   152a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   152a4:	movt	r0, #2
   152a8:	ldrb	r0, [r0, r4]
   152ac:	add	r4, r4, #8
   152b0:	adds	r6, r6, r0
   152b4:	lsr	r0, r4, #2
   152b8:	adc	r5, r5, #0
   152bc:	cmp	r0, #166	; 0xa6
   152c0:	bhi	152dc <__assert_fail@plt+0x38ac>
   152c4:	umull	r0, r1, r6, r6
   152c8:	mla	r1, r6, r5, r1
   152cc:	subs	r0, r8, r0
   152d0:	mla	r1, r6, r5, r1
   152d4:	sbcs	r0, r3, r1
   152d8:	bcs	15138 <__assert_fail@plt+0x3708>
   152dc:	ldr	r7, [fp, #-92]	; 0xffffffa4
   152e0:	ldr	r1, [fp, #-100]	; 0xffffff9c
   152e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   152e8:	ldr	r4, [fp, #-96]	; 0xffffffa0
   152ec:	orrs	r6, r0, r1
   152f0:	beq	12f68 <__assert_fail@plt+0x1538>
   152f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   152f8:	mov	r2, r8
   152fc:	mov	r9, r1
   15300:	mov	sl, r3
   15304:	bl	156b0 <__assert_fail@plt+0x3c80>
   15308:	cmp	r0, #0
   1530c:	beq	15354 <__assert_fail@plt+0x3924>
   15310:	cmp	r6, #0
   15314:	beq	15380 <__assert_fail@plt+0x3950>
   15318:	ldrd	r0, [r4]
   1531c:	orrs	r0, r0, r1
   15320:	stmeq	r7, {r8, sl}
   15324:	ldreq	r0, [fp, #-76]	; 0xffffffb4
   15328:	stmeq	r4, {r0, r9}
   1532c:	subeq	sp, fp, #28
   15330:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15334:	movw	r0, #3015	; 0xbc7
   15338:	movw	r1, #2704	; 0xa90
   1533c:	movw	r3, #3039	; 0xbdf
   15340:	movw	r2, #558	; 0x22e
   15344:	movt	r0, #2
   15348:	movt	r1, #2
   1534c:	movt	r3, #2
   15350:	bl	11a30 <__assert_fail@plt>
   15354:	cmp	r6, #0
   15358:	beq	153e4 <__assert_fail@plt+0x39b4>
   1535c:	mov	r0, #1
   15360:	mov	r1, r9
   15364:	mov	r2, r8
   15368:	mov	r3, sl
   1536c:	stm	sp, {r0, r7}
   15370:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15374:	bl	175a8 <__assert_fail@plt+0x5b78>
   15378:	sub	sp, fp, #28
   1537c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15380:	ldrb	r0, [r7, #250]	; 0xfa
   15384:	mov	r5, sl
   15388:	sub	r1, r0, #1
   1538c:	cmp	r0, #0
   15390:	beq	15684 <__assert_fail@plt+0x3c54>
   15394:	mov	r2, #8
   15398:	add	r7, r0, #223	; 0xdf
   1539c:	add	r3, r2, r0, lsl #3
   153a0:	ldr	r6, [fp, #-92]	; 0xffffffa4
   153a4:	ldr	r2, [r6, r3]!
   153a8:	ldr	r6, [r6, #4]
   153ac:	subs	r4, r8, r2
   153b0:	sbcs	r4, r5, r6
   153b4:	bcs	15400 <__assert_fail@plt+0x39d0>
   153b8:	sub	r2, r7, #1
   153bc:	sub	r7, r7, #224	; 0xe0
   153c0:	sub	r3, r3, #8
   153c4:	cmp	r7, #0
   153c8:	mov	r7, r2
   153cc:	bgt	153a0 <__assert_fail@plt+0x3970>
   153d0:	sub	r2, r2, #224	; 0xe0
   153d4:	ldr	r7, [fp, #-92]	; 0xffffffa4
   153d8:	cmp	r1, r2
   153dc:	bgt	15438 <__assert_fail@plt+0x3a08>
   153e0:	b	15680 <__assert_fail@plt+0x3c50>
   153e4:	mov	r0, r8
   153e8:	mov	r1, sl
   153ec:	mov	r2, #1
   153f0:	mov	r3, r7
   153f4:	sub	sp, fp, #28
   153f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153fc:	b	1649c <__assert_fail@plt+0x4a6c>
   15400:	eor	r2, r2, r8
   15404:	eor	r3, r6, r5
   15408:	orrs	r2, r2, r3
   1540c:	bne	15428 <__assert_fail@plt+0x39f8>
   15410:	ldr	r1, [fp, #-92]	; 0xffffffa4
   15414:	ldrb	r0, [r1, r7]
   15418:	add	r0, r0, #1
   1541c:	strb	r0, [r1, r7]
   15420:	sub	sp, fp, #28
   15424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15428:	sub	r2, r7, #224	; 0xe0
   1542c:	ldr	r7, [fp, #-92]	; 0xffffffa4
   15430:	cmp	r1, r2
   15434:	ble	15680 <__assert_fail@plt+0x3c50>
   15438:	mvn	r3, r2
   1543c:	add	r3, r3, r0
   15440:	cmp	r3, #1
   15444:	bls	15640 <__assert_fail@plt+0x3c10>
   15448:	str	r3, [fp, #-72]	; 0xffffffb8
   1544c:	sub	r3, r0, #2
   15450:	add	lr, r7, r0, lsl #3
   15454:	mov	r7, #8
   15458:	sub	r3, r3, r2
   1545c:	add	r5, lr, #16
   15460:	umull	r9, r6, r3, r7
   15464:	cmp	r6, #0
   15468:	movwne	r6, #1
   1546c:	cmp	r9, r5
   15470:	bhi	1563c <__assert_fail@plt+0x3c0c>
   15474:	cmp	r6, #0
   15478:	bne	1563c <__assert_fail@plt+0x3c0c>
   1547c:	ldr	r4, [fp, #-92]	; 0xffffffa4
   15480:	add	r4, r4, r0
   15484:	add	r7, r4, #224	; 0xe0
   15488:	cmp	r3, r7
   1548c:	bhi	1563c <__assert_fail@plt+0x3c0c>
   15490:	add	r7, lr, #8
   15494:	cmp	r9, r7
   15498:	bhi	1563c <__assert_fail@plt+0x3c0c>
   1549c:	cmp	r6, #0
   154a0:	bne	1563c <__assert_fail@plt+0x3c0c>
   154a4:	add	r6, r4, #223	; 0xdf
   154a8:	cmp	r3, r6
   154ac:	bhi	1563c <__assert_fail@plt+0x3c0c>
   154b0:	ldr	r9, [fp, #-92]	; 0xffffffa4
   154b4:	add	r4, lr, #24
   154b8:	mov	lr, #0
   154bc:	add	r3, r9, r2, lsl #3
   154c0:	add	ip, r3, #32
   154c4:	add	r3, r3, #24
   154c8:	str	ip, [fp, #-84]	; 0xffffffac
   154cc:	str	r4, [fp, #-80]	; 0xffffffb0
   154d0:	str	r3, [fp, #-88]	; 0xffffffa8
   154d4:	cmp	r3, r4
   154d8:	mov	r3, #0
   154dc:	movwcc	r3, #1
   154e0:	cmp	ip, r5
   154e4:	add	ip, r9, #224	; 0xe0
   154e8:	str	r3, [fp, #-96]	; 0xffffffa0
   154ec:	mov	r3, #0
   154f0:	movwcc	r3, #1
   154f4:	str	r3, [fp, #-100]	; 0xffffff9c
   154f8:	add	r3, ip, r2
   154fc:	add	r4, r3, #2
   15500:	add	r9, r3, #1
   15504:	add	r3, ip, r0
   15508:	add	ip, r3, #1
   1550c:	str	r4, [fp, #-76]	; 0xffffffb4
   15510:	mov	r4, #0
   15514:	cmp	r9, ip
   15518:	movwcc	lr, #1
   1551c:	str	lr, [sp, #100]	; 0x64
   15520:	ldr	lr, [fp, #-76]	; 0xffffffb4
   15524:	cmp	lr, r3
   15528:	movwcc	r4, #1
   1552c:	str	r4, [sp, #96]	; 0x60
   15530:	ldr	r4, [fp, #-88]	; 0xffffffa8
   15534:	cmp	ip, r4
   15538:	mov	r4, #0
   1553c:	movwhi	r4, #1
   15540:	cmp	lr, r5
   15544:	mov	r5, #0
   15548:	mov	lr, #0
   1554c:	movwcc	r5, #1
   15550:	str	r4, [fp, #-88]	; 0xffffffa8
   15554:	str	r5, [sp, #104]	; 0x68
   15558:	ldr	r4, [fp, #-84]	; 0xffffffac
   1555c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15560:	cmp	r3, r4
   15564:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15568:	movwhi	lr, #1
   1556c:	cmp	r9, r3
   15570:	mov	r9, #0
   15574:	movwcc	r9, #1
   15578:	cmp	r5, r3
   1557c:	mov	r3, #0
   15580:	movwcc	r3, #1
   15584:	cmp	ip, r4
   15588:	mov	r4, #0
   1558c:	movwhi	r4, #1
   15590:	tst	r4, r3
   15594:	bne	1563c <__assert_fail@plt+0x3c0c>
   15598:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1559c:	ldr	r4, [fp, #-100]	; 0xffffff9c
   155a0:	ands	r3, r4, r3
   155a4:	bne	1563c <__assert_fail@plt+0x3c0c>
   155a8:	ands	r3, lr, r9
   155ac:	bne	1563c <__assert_fail@plt+0x3c0c>
   155b0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   155b4:	ldr	r5, [sp, #104]	; 0x68
   155b8:	ands	r3, r5, r3
   155bc:	bne	1563c <__assert_fail@plt+0x3c0c>
   155c0:	ldr	r3, [sp, #100]	; 0x64
   155c4:	ldr	r5, [sp, #96]	; 0x60
   155c8:	ands	r3, r5, r3
   155cc:	bne	1563c <__assert_fail@plt+0x3c0c>
   155d0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   155d4:	mvn	lr, #15
   155d8:	sub	r9, fp, #68	; 0x44
   155dc:	bic	ip, r3, #1
   155e0:	sub	r1, r1, ip
   155e4:	mov	r3, ip
   155e8:	sub	r4, r7, #8
   155ec:	subs	r3, r3, #2
   155f0:	vld1.64	{d16-d17}, [r4]
   155f4:	vst1.64	{d16-d17}, [r7], lr
   155f8:	ldrh	r4, [r6, #-1]
   155fc:	strh	r4, [fp, #-68]	; 0xffffffbc
   15600:	vld1.16	{d16[0]}, [r9 :16]
   15604:	vmovl.u8	q8, d16
   15608:	vmovl.u16	q8, d16
   1560c:	vmov.32	r4, d16[1]
   15610:	strb	r4, [r6, #1]
   15614:	vmov.32	r4, d16[0]
   15618:	strb	r4, [r6]
   1561c:	sub	r6, r6, #2
   15620:	bne	155e8 <__assert_fail@plt+0x3bb8>
   15624:	ldr	r3, [fp, #-72]	; 0xffffffb8
   15628:	ldr	r7, [fp, #-92]	; 0xffffffa4
   1562c:	mov	r5, sl
   15630:	cmp	r3, ip
   15634:	bne	15640 <__assert_fail@plt+0x3c10>
   15638:	b	15680 <__assert_fail@plt+0x3c50>
   1563c:	mov	r5, sl
   15640:	lsl	r3, r1, #3
   15644:	ldr	r7, [fp, #-92]	; 0xffffffa4
   15648:	add	r7, r7, r3
   1564c:	sub	r3, r3, #8
   15650:	ldr	r4, [r7, #16]
   15654:	ldr	r9, [r7, #20]
   15658:	str	r4, [r7, #24]
   1565c:	str	r9, [r7, #28]
   15660:	ldr	r7, [fp, #-92]	; 0xffffffa4
   15664:	add	r7, r7, r1
   15668:	sub	r1, r1, #1
   1566c:	ldrb	r6, [r7, #224]	; 0xe0
   15670:	cmp	r1, r2
   15674:	strb	r6, [r7, #225]	; 0xe1
   15678:	ldr	r7, [fp, #-92]	; 0xffffffa4
   1567c:	bgt	15644 <__assert_fail@plt+0x3c14>
   15680:	mov	r1, r2
   15684:	add	r1, r1, #1
   15688:	add	r0, r0, #1
   1568c:	add	r2, r7, r1, lsl #3
   15690:	add	r1, r7, r1
   15694:	str	r8, [r2, #16]
   15698:	str	r5, [r2, #20]
   1569c:	mov	r2, #1
   156a0:	strb	r2, [r1, #224]	; 0xe0
   156a4:	strb	r0, [r7, #250]	; 0xfa
   156a8:	sub	sp, fp, #28
   156ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156b4:	add	fp, sp, #28
   156b8:	sub	sp, sp, #532	; 0x214
   156bc:	mov	sl, r2
   156c0:	orrs	r2, r0, r1
   156c4:	str	r3, [sp, #196]	; 0xc4
   156c8:	beq	157cc <__assert_fail@plt+0x3d9c>
   156cc:	ldr	r7, [sp, #196]	; 0xc4
   156d0:	subs	ip, r0, #1
   156d4:	str	r1, [sp, #172]	; 0xac
   156d8:	str	r0, [sp, #192]	; 0xc0
   156dc:	sbc	r3, r1, #0
   156e0:	orr	r2, sl, r7
   156e4:	cmp	r2, #0
   156e8:	movne	r3, r1
   156ec:	movne	ip, r0
   156f0:	str	r3, [sp, #112]	; 0x70
   156f4:	subs	r3, sl, #1
   156f8:	str	ip, [sp, #108]	; 0x6c
   156fc:	sbc	r7, r7, #0
   15700:	str	r3, [sp, #116]	; 0x74
   15704:	mov	r2, r7
   15708:	str	r7, [sp, #120]	; 0x78
   1570c:	orrs	r2, r3, r7
   15710:	beq	157e0 <__assert_fail@plt+0x3db0>
   15714:	mov	r7, #0
   15718:	tst	r3, #1
   1571c:	bne	15744 <__assert_fail@plt+0x3d14>
   15720:	ldr	r1, [sp, #120]	; 0x78
   15724:	mov	r7, #0
   15728:	mov	r0, r3
   1572c:	lsrs	r1, r1, #1
   15730:	add	r7, r7, #1
   15734:	rrx	r2, r0
   15738:	tst	r0, #2
   1573c:	mov	r0, r2
   15740:	beq	1572c <__assert_fail@plt+0x3cfc>
   15744:	ldr	r5, [sp, #112]	; 0x70
   15748:	sub	r1, r7, #32
   1574c:	rsb	r2, r7, #32
   15750:	ldr	r4, [sp, #120]	; 0x78
   15754:	str	r7, [sp, #64]	; 0x40
   15758:	cmp	r1, #0
   1575c:	lsr	r0, r5, r7
   15760:	movwge	r0, #0
   15764:	cmp	r1, #0
   15768:	str	r0, [fp, #-44]	; 0xffffffd4
   1576c:	lsr	r0, ip, r7
   15770:	orr	r0, r0, r5, lsl r2
   15774:	lsrge	r0, r5, r1
   15778:	str	r0, [fp, #-48]	; 0xffffffd0
   1577c:	lsr	r0, r3, r7
   15780:	rsb	r3, r7, #64	; 0x40
   15784:	orr	r0, r0, r4, lsl r2
   15788:	lsl	r6, ip, r3
   1578c:	lsrge	r0, r4, r1
   15790:	cmp	r2, #0
   15794:	movwge	r6, #0
   15798:	cmp	r2, #0
   1579c:	orr	r0, r6, r0
   157a0:	str	r0, [fp, #-56]	; 0xffffffc8
   157a4:	rsb	r0, r3, #32
   157a8:	lsr	r0, ip, r0
   157ac:	orr	r0, r0, r5, lsl r3
   157b0:	lslge	r0, ip, r2
   157b4:	lsr	r2, r4, r7
   157b8:	cmp	r1, #0
   157bc:	movwge	r2, #0
   157c0:	orr	r0, r0, r2
   157c4:	str	r0, [fp, #-52]	; 0xffffffcc
   157c8:	b	15854 <__assert_fail@plt+0x3e24>
   157cc:	ldr	r1, [sp, #196]	; 0xc4
   157d0:	mov	r0, sl
   157d4:	bl	188fc <__assert_fail@plt+0x6ecc>
   157d8:	sub	sp, fp, #28
   157dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157e0:	mov	r1, #0
   157e4:	tst	ip, #1
   157e8:	mov	r0, #0
   157ec:	bne	15814 <__assert_fail@plt+0x3de4>
   157f0:	ldr	r3, [sp, #112]	; 0x70
   157f4:	mov	r0, #0
   157f8:	mov	r2, ip
   157fc:	lsrs	r3, r3, #1
   15800:	add	r0, r0, #1
   15804:	rrx	r7, r2
   15808:	tst	r2, #2
   1580c:	mov	r2, r7
   15810:	beq	157fc <__assert_fail@plt+0x3dcc>
   15814:	ldr	r7, [sp, #112]	; 0x70
   15818:	sub	r2, r0, #32
   1581c:	str	r1, [fp, #-44]	; 0xffffffd4
   15820:	str	r1, [fp, #-48]	; 0xffffffd0
   15824:	rsb	r3, r0, #32
   15828:	cmp	r2, #0
   1582c:	lsr	r1, r7, r0
   15830:	movwge	r1, #0
   15834:	cmp	r2, #0
   15838:	str	r1, [fp, #-52]	; 0xffffffcc
   1583c:	lsr	r1, ip, r0
   15840:	add	r0, r0, #64	; 0x40
   15844:	orr	r1, r1, r7, lsl r3
   15848:	str	r0, [sp, #64]	; 0x40
   1584c:	lsrge	r1, r7, r2
   15850:	str	r1, [fp, #-56]	; 0xffffffc8
   15854:	movw	r1, #15726	; 0x3d6e
   15858:	ubfx	r0, sl, #1, #7
   1585c:	ldr	r4, [sp, #196]	; 0xc4
   15860:	movt	r1, #2
   15864:	ldrb	r1, [r1, r0]
   15868:	umull	r0, r2, r1, sl
   1586c:	rsbs	r0, r0, #2
   15870:	mla	r2, r1, r4, r2
   15874:	umull	r3, r7, r0, r1
   15878:	rsc	r2, r2, #0
   1587c:	umull	r0, r6, r3, sl
   15880:	mla	r1, r2, r1, r7
   15884:	mla	r2, r3, r4, r6
   15888:	rsbs	r5, r0, #2
   1588c:	mla	r2, r1, sl, r2
   15890:	umull	r8, lr, r3, r5
   15894:	rsc	r2, r2, #0
   15898:	umull	ip, r0, r8, sl
   1589c:	mla	r2, r3, r2, lr
   158a0:	mla	r0, r8, r4, r0
   158a4:	ldr	r4, [sp, #172]	; 0xac
   158a8:	mov	r3, #127	; 0x7f
   158ac:	mla	r9, r1, r5, r2
   158b0:	ldr	r5, [sp, #192]	; 0xc0
   158b4:	rsbs	r1, ip, #2
   158b8:	mov	ip, #0
   158bc:	mla	r0, r9, sl, r0
   158c0:	str	r1, [sp, #176]	; 0xb0
   158c4:	mov	r1, #0
   158c8:	rsc	r0, r0, #0
   158cc:	str	r0, [sp, #164]	; 0xa4
   158d0:	rsbs	r0, r5, #1
   158d4:	rscs	r0, r4, #0
   158d8:	movwcc	ip, #1
   158dc:	cmp	ip, #0
   158e0:	movwne	r3, #63	; 0x3f
   158e4:	subs	r0, r5, #2
   158e8:	sbcs	r0, r4, #0
   158ec:	mov	r0, #0
   158f0:	movwcc	r0, #1
   158f4:	str	r0, [sp, #184]	; 0xb8
   158f8:	mov	r0, #0
   158fc:	str	r0, [sp, #180]	; 0xb4
   15900:	mov	r0, #0
   15904:	str	r0, [sp, #188]	; 0xbc
   15908:	mov	r4, r3
   1590c:	ldr	r3, [sp, #188]	; 0xbc
   15910:	ldr	lr, [sp, #184]	; 0xb8
   15914:	mov	r5, r1
   15918:	ldr	r7, [sp, #192]	; 0xc0
   1591c:	ldr	r6, [sp, #172]	; 0xac
   15920:	lsl	r0, r3, #1
   15924:	orr	r1, r0, lr, lsr #31
   15928:	ldr	r0, [sp, #180]	; 0xb4
   1592c:	lsl	lr, lr, #1
   15930:	lsl	r0, r0, #1
   15934:	orr	r2, r0, ip, lsr #31
   15938:	lsl	r0, ip, #1
   1593c:	orr	ip, r0, r3, lsr #31
   15940:	subs	r0, r7, ip
   15944:	sbcs	r0, r6, r2
   15948:	bcc	15984 <__assert_fail@plt+0x3f54>
   1594c:	subs	r0, lr, sl
   15950:	str	r2, [sp, #180]	; 0xb4
   15954:	str	lr, [sp, #184]	; 0xb8
   15958:	ldr	r0, [sp, #196]	; 0xc4
   1595c:	sbcs	r0, r1, r0
   15960:	bcc	159ec <__assert_fail@plt+0x3fbc>
   15964:	ldr	r7, [sp, #192]	; 0xc0
   15968:	ldr	r6, [sp, #172]	; 0xac
   1596c:	ldr	r2, [sp, #180]	; 0xb4
   15970:	ldr	lr, [sp, #184]	; 0xb8
   15974:	eor	r0, ip, r7
   15978:	eor	r3, r2, r6
   1597c:	orrs	r0, r0, r3
   15980:	bne	159d4 <__assert_fail@plt+0x3fa4>
   15984:	subs	r0, ip, r7
   15988:	sbc	r3, r2, r6
   1598c:	ldr	r6, [sp, #196]	; 0xc4
   15990:	subs	ip, r0, #1
   15994:	sbc	r2, r3, #0
   15998:	subs	lr, lr, sl
   1599c:	str	lr, [sp, #184]	; 0xb8
   159a0:	sbcs	r1, r1, r6
   159a4:	str	r1, [sp, #188]	; 0xbc
   159a8:	mov	r1, #0
   159ac:	movwcc	r1, #1
   159b0:	cmp	r1, #0
   159b4:	moveq	ip, r0
   159b8:	moveq	r2, r3
   159bc:	str	r2, [sp, #180]	; 0xb4
   159c0:	subs	r3, r4, #1
   159c4:	sbc	r1, r5, #0
   159c8:	orrs	r0, r4, r5
   159cc:	bne	15908 <__assert_fail@plt+0x3ed8>
   159d0:	b	15a00 <__assert_fail@plt+0x3fd0>
   159d4:	str	r1, [sp, #188]	; 0xbc
   159d8:	subs	r3, r4, #1
   159dc:	sbc	r1, r5, #0
   159e0:	orrs	r0, r4, r5
   159e4:	bne	15908 <__assert_fail@plt+0x3ed8>
   159e8:	b	15a00 <__assert_fail@plt+0x3fd0>
   159ec:	str	r1, [sp, #188]	; 0xbc
   159f0:	subs	r3, r4, #1
   159f4:	sbc	r1, r5, #0
   159f8:	orrs	r0, r4, r5
   159fc:	bne	15908 <__assert_fail@plt+0x3ed8>
   15a00:	ldr	r2, [sp, #188]	; 0xbc
   15a04:	ldr	r1, [sp, #184]	; 0xb8
   15a08:	ldr	r7, [sp, #176]	; 0xb0
   15a0c:	mov	r4, #0
   15a10:	str	ip, [sp, #128]	; 0x80
   15a14:	lsl	r0, r2, #1
   15a18:	lsl	r3, r1, #1
   15a1c:	orr	r6, r0, r1, lsr #31
   15a20:	ldr	r0, [sp, #180]	; 0xb4
   15a24:	str	r3, [fp, #-72]	; 0xffffffb8
   15a28:	str	r6, [fp, #-68]	; 0xffffffbc
   15a2c:	lsl	r0, r0, #1
   15a30:	orr	r5, r0, ip, lsr #31
   15a34:	rsbs	r0, r1, r1, lsl #1
   15a38:	sbcs	r0, r6, r2
   15a3c:	str	r5, [fp, #-60]	; 0xffffffc4
   15a40:	mov	r0, #0
   15a44:	movwcc	r0, #1
   15a48:	orr	r1, r0, ip, lsl #1
   15a4c:	umull	r2, r0, r8, r7
   15a50:	str	r2, [sp, #168]	; 0xa8
   15a54:	ldr	r2, [sp, #164]	; 0xa4
   15a58:	str	r1, [fp, #-64]	; 0xffffffc0
   15a5c:	mla	r0, r8, r2, r0
   15a60:	mla	r0, r9, r7, r0
   15a64:	ldr	r7, [sp, #192]	; 0xc0
   15a68:	ldr	r9, [sp, #172]	; 0xac
   15a6c:	str	r0, [sp, #164]	; 0xa4
   15a70:	sub	r0, fp, #72	; 0x48
   15a74:	add	r0, r0, #8
   15a78:	str	r0, [sp, #60]	; 0x3c
   15a7c:	subs	r0, r7, r1
   15a80:	sbcs	r0, r9, r5
   15a84:	bcc	15aa8 <__assert_fail@plt+0x4078>
   15a88:	subs	r0, r3, sl
   15a8c:	ldr	r0, [sp, #196]	; 0xc4
   15a90:	sbcs	r0, r6, r0
   15a94:	bcc	15ae0 <__assert_fail@plt+0x40b0>
   15a98:	eor	r0, r1, r7
   15a9c:	eor	r2, r5, r9
   15aa0:	orrs	r0, r0, r2
   15aa4:	bne	15ae0 <__assert_fail@plt+0x40b0>
   15aa8:	subs	r0, r3, sl
   15aac:	str	r0, [fp, #-72]	; 0xffffffb8
   15ab0:	ldr	r0, [sp, #196]	; 0xc4
   15ab4:	sbcs	r0, r6, r0
   15ab8:	movwcc	r4, #1
   15abc:	str	r0, [fp, #-68]	; 0xffffffbc
   15ac0:	cmp	r4, #0
   15ac4:	mvnne	r4, #0
   15ac8:	subs	r0, r4, r7
   15acc:	sbc	r2, r4, r9
   15ad0:	adds	r0, r0, r1
   15ad4:	adc	r1, r2, r5
   15ad8:	ldr	r2, [sp, #60]	; 0x3c
   15adc:	strd	r0, [r2]
   15ae0:	ldr	r4, [sp, #128]	; 0x80
   15ae4:	ldr	r8, [sp, #180]	; 0xb4
   15ae8:	ldr	r0, [sp, #196]	; 0xc4
   15aec:	str	sl, [sp]
   15af0:	sub	r1, fp, #72	; 0x48
   15af4:	sub	r2, fp, #56	; 0x38
   15af8:	str	r4, [sp, #32]
   15afc:	str	r8, [sp, #36]	; 0x24
   15b00:	stmib	sp, {r0, r7, r9}
   15b04:	ldr	r0, [sp, #168]	; 0xa8
   15b08:	ldr	r5, [sp, #184]	; 0xb8
   15b0c:	ldr	r6, [sp, #188]	; 0xbc
   15b10:	str	r0, [sp, #16]
   15b14:	ldr	r0, [sp, #164]	; 0xa4
   15b18:	str	r5, [sp, #24]
   15b1c:	str	r6, [sp, #28]
   15b20:	str	r0, [sp, #20]
   15b24:	add	r0, sp, #232	; 0xe8
   15b28:	bl	197b4 <__assert_fail@plt+0x7d84>
   15b2c:	eor	r2, r1, r6
   15b30:	eor	r3, r0, r5
   15b34:	orrs	r2, r3, r2
   15b38:	ldr	r3, [sp, #236]	; 0xec
   15b3c:	ldr	r2, [sp, #232]	; 0xe8
   15b40:	eoreq	r6, r3, r8
   15b44:	eoreq	r7, r2, r4
   15b48:	orrseq	r7, r7, r6
   15b4c:	beq	15c74 <__assert_fail@plt+0x4244>
   15b50:	ldr	r7, [sp, #192]	; 0xc0
   15b54:	ldr	r6, [sp, #184]	; 0xb8
   15b58:	subs	ip, r7, r4
   15b5c:	ldr	r4, [sp, #196]	; 0xc4
   15b60:	mov	r7, #0
   15b64:	sbc	lr, r9, r8
   15b68:	subs	r5, ip, #1
   15b6c:	str	ip, [sp, #176]	; 0xb0
   15b70:	sbc	r8, lr, #0
   15b74:	subs	r9, sl, r6
   15b78:	ldr	r6, [sp, #188]	; 0xbc
   15b7c:	str	lr, [sp, #156]	; 0x9c
   15b80:	sbcs	r6, r4, r6
   15b84:	ldr	r4, [sp, #108]	; 0x6c
   15b88:	movwcc	r7, #1
   15b8c:	str	r6, [sp, #88]	; 0x58
   15b90:	eor	r6, r1, r6
   15b94:	cmp	r7, #0
   15b98:	eor	r7, r0, r9
   15b9c:	moveq	r5, ip
   15ba0:	moveq	r8, lr
   15ba4:	orrs	r7, r7, r6
   15ba8:	eoreq	r7, r2, r5
   15bac:	eoreq	r6, r3, r8
   15bb0:	orrseq	r7, r7, r6
   15bb4:	beq	15cac <__assert_fail@plt+0x427c>
   15bb8:	ldr	r7, [sp, #64]	; 0x40
   15bbc:	ldr	ip, [sp, #192]	; 0xc0
   15bc0:	cmp	r7, #2
   15bc4:	bcc	16484 <__assert_fail@plt+0x4a54>
   15bc8:	mov	r4, #1
   15bcc:	ldr	r7, [sp, #196]	; 0xc4
   15bd0:	add	lr, sp, #16
   15bd4:	str	sl, [sp, #32]
   15bd8:	str	r7, [sp, #36]	; 0x24
   15bdc:	ldr	r7, [sp, #168]	; 0xa8
   15be0:	str	r7, [sp, #40]	; 0x28
   15be4:	ldr	r7, [sp, #164]	; 0xa4
   15be8:	str	r7, [sp, #44]	; 0x2c
   15bec:	stm	sp, {r0, r1, r2, r3}
   15bf0:	stm	lr, {r0, r1, ip}
   15bf4:	ldr	r0, [sp, #172]	; 0xac
   15bf8:	str	r0, [sp, #28]
   15bfc:	add	r0, sp, #232	; 0xe8
   15c00:	bl	19a50 <__assert_fail@plt+0x8020>
   15c04:	ldr	r2, [sp, #88]	; 0x58
   15c08:	eor	r3, r0, r9
   15c0c:	eor	r2, r1, r2
   15c10:	orrs	r2, r3, r2
   15c14:	ldr	r3, [sp, #236]	; 0xec
   15c18:	ldr	r2, [sp, #232]	; 0xe8
   15c1c:	eoreq	r6, r3, r8
   15c20:	eoreq	r7, r2, r5
   15c24:	orrseq	r7, r7, r6
   15c28:	beq	15ca8 <__assert_fail@plt+0x4278>
   15c2c:	ldr	r7, [sp, #184]	; 0xb8
   15c30:	ldr	r6, [sp, #188]	; 0xbc
   15c34:	ldr	ip, [sp, #192]	; 0xc0
   15c38:	eor	r7, r0, r7
   15c3c:	eor	r6, r1, r6
   15c40:	orrs	r7, r7, r6
   15c44:	bne	15c60 <__assert_fail@plt+0x4230>
   15c48:	ldr	r7, [sp, #128]	; 0x80
   15c4c:	ldr	r6, [sp, #180]	; 0xb4
   15c50:	eor	r7, r2, r7
   15c54:	eor	r6, r3, r6
   15c58:	orrs	r7, r7, r6
   15c5c:	beq	16484 <__assert_fail@plt+0x4a54>
   15c60:	ldr	r7, [sp, #64]	; 0x40
   15c64:	add	r4, r4, #1
   15c68:	cmp	r4, r7
   15c6c:	bcc	15bcc <__assert_fail@plt+0x419c>
   15c70:	b	16484 <__assert_fail@plt+0x4a54>
   15c74:	ldr	r0, [sp, #192]	; 0xc0
   15c78:	ldr	r5, [sp, #184]	; 0xb8
   15c7c:	ldr	r1, [sp, #188]	; 0xbc
   15c80:	subs	r0, r0, r4
   15c84:	ldr	r4, [sp, #108]	; 0x6c
   15c88:	str	r0, [sp, #176]	; 0xb0
   15c8c:	sbc	r0, r9, r8
   15c90:	subs	r9, sl, r5
   15c94:	str	r0, [sp, #156]	; 0x9c
   15c98:	ldr	r0, [sp, #196]	; 0xc4
   15c9c:	sbc	r0, r0, r1
   15ca0:	str	r0, [sp, #88]	; 0x58
   15ca4:	b	15cb0 <__assert_fail@plt+0x4280>
   15ca8:	ldr	r4, [sp, #108]	; 0x6c
   15cac:	ldr	r5, [sp, #184]	; 0xb8
   15cb0:	ldr	r8, [sp, #112]	; 0x70
   15cb4:	ldr	r7, [sp, #120]	; 0x78
   15cb8:	ldr	r2, [sp, #116]	; 0x74
   15cbc:	add	r0, sp, #232	; 0xe8
   15cc0:	str	r0, [sp]
   15cc4:	mov	r0, r4
   15cc8:	mov	r1, r8
   15ccc:	mov	r3, r7
   15cd0:	bl	12964 <__assert_fail@plt+0xf34>
   15cd4:	ldr	r3, [sp, #176]	; 0xb0
   15cd8:	ldr	r6, [sp, #156]	; 0x9c
   15cdc:	str	sl, [sp, #160]	; 0xa0
   15ce0:	str	r9, [sp, #52]	; 0x34
   15ce4:	subs	r1, r3, #1
   15ce8:	sbc	r2, r6, #0
   15cec:	subs	r0, sl, r5
   15cf0:	ldr	r5, [sp, #188]	; 0xbc
   15cf4:	ldr	r0, [sp, #196]	; 0xc4
   15cf8:	sbcs	r0, r0, r5
   15cfc:	mov	r0, #0
   15d00:	movwcc	r0, #1
   15d04:	cmp	r0, #0
   15d08:	moveq	r2, r6
   15d0c:	moveq	r1, r3
   15d10:	lsrs	r0, r8, #1
   15d14:	str	r0, [sp, #104]	; 0x68
   15d18:	rrx	r0, r4
   15d1c:	str	r1, [sp, #72]	; 0x48
   15d20:	ldr	r1, [sp, #116]	; 0x74
   15d24:	str	r2, [sp, #68]	; 0x44
   15d28:	str	r0, [sp, #100]	; 0x64
   15d2c:	lsrs	r0, r7, #1
   15d30:	orr	r0, r0, r4, lsl #31
   15d34:	str	r0, [sp, #92]	; 0x5c
   15d38:	add	r0, sp, #200	; 0xc8
   15d3c:	add	r0, r0, #8
   15d40:	rrx	r1, r1
   15d44:	str	r0, [sp, #156]	; 0x9c
   15d48:	add	r0, sp, #216	; 0xd8
   15d4c:	str	r1, [sp, #96]	; 0x60
   15d50:	add	r1, sp, #232	; 0xe8
   15d54:	add	r0, r0, #8
   15d58:	str	r0, [sp, #152]	; 0x98
   15d5c:	add	r0, r1, #16
   15d60:	str	r0, [sp, #48]	; 0x30
   15d64:	add	r0, r1, #8
   15d68:	str	r0, [sp, #56]	; 0x38
   15d6c:	mov	r0, #2
   15d70:	str	r0, [sp, #80]	; 0x50
   15d74:	mov	r0, #0
   15d78:	str	r0, [sp, #76]	; 0x4c
   15d7c:	mov	r0, #0
   15d80:	str	r0, [sp, #84]	; 0x54
   15d84:	ldr	r0, [sp, #56]	; 0x38
   15d88:	mov	r8, #1
   15d8c:	ldrd	r0, [r0]
   15d90:	orrs	r0, r0, r1
   15d94:	beq	1616c <__assert_fail@plt+0x473c>
   15d98:	ldr	r0, [sp, #232]	; 0xe8
   15d9c:	movw	r1, #15726	; 0x3d6e
   15da0:	ldr	ip, [sp, #236]	; 0xec
   15da4:	movt	r1, #2
   15da8:	ubfx	r2, r0, #1, #7
   15dac:	ldr	r4, [sp, #116]	; 0x74
   15db0:	str	sl, [sp]
   15db4:	ldrb	r2, [r1, r2]
   15db8:	umull	r3, r7, r0, r2
   15dbc:	rsbs	r3, r3, #2
   15dc0:	mla	r7, ip, r2, r7
   15dc4:	umull	r3, r6, r3, r2
   15dc8:	rsc	r7, r7, #0
   15dcc:	mla	r1, r7, r2, r6
   15dd0:	umull	r7, r6, r3, r0
   15dd4:	mla	r6, r3, ip, r6
   15dd8:	rsbs	r7, r7, #2
   15ddc:	str	r1, [sp, #132]	; 0x84
   15de0:	mla	r6, r1, r0, r6
   15de4:	rsc	r1, r6, #0
   15de8:	str	r1, [sp, #176]	; 0xb0
   15dec:	umull	r5, r1, r3, r7
   15df0:	str	r1, [sp, #144]	; 0x90
   15df4:	umull	r6, r1, r5, r0
   15df8:	rsbs	r9, r6, #2
   15dfc:	str	r1, [sp, #140]	; 0x8c
   15e00:	umull	r1, r2, r5, r9
   15e04:	str	r2, [sp, #148]	; 0x94
   15e08:	umull	lr, r2, r1, r4
   15e0c:	str	r2, [sp, #136]	; 0x88
   15e10:	ldr	r2, [sp, #120]	; 0x78
   15e14:	str	lr, [sp, #216]	; 0xd8
   15e18:	ldr	r6, [sp, #136]	; 0x88
   15e1c:	mla	lr, r1, r2, r6
   15e20:	ldr	r1, [sp, #140]	; 0x8c
   15e24:	ldr	r2, [sp, #176]	; 0xb0
   15e28:	ldr	r6, [sp, #184]	; 0xb8
   15e2c:	mla	ip, r5, ip, r1
   15e30:	ldr	r1, [sp, #144]	; 0x90
   15e34:	str	r6, [sp, #24]
   15e38:	mla	r3, r3, r2, r1
   15e3c:	ldr	r1, [sp, #132]	; 0x84
   15e40:	mla	r2, r1, r7, r3
   15e44:	ldr	r1, [sp, #148]	; 0x94
   15e48:	mla	r0, r2, r0, ip
   15e4c:	rsc	r0, r0, #0
   15e50:	mla	r0, r5, r0, r1
   15e54:	ldr	r1, [sp, #152]	; 0x98
   15e58:	mla	r0, r2, r9, r0
   15e5c:	add	r2, sp, #216	; 0xd8
   15e60:	mla	r0, r0, r4, lr
   15e64:	ldr	r4, [sp, #188]	; 0xbc
   15e68:	str	r0, [sp, #220]	; 0xdc
   15e6c:	mov	r0, #0
   15e70:	str	r0, [r1]
   15e74:	str	r0, [r1, #4]
   15e78:	ldr	r0, [sp, #128]	; 0x80
   15e7c:	sub	r1, fp, #72	; 0x48
   15e80:	str	r4, [sp, #28]
   15e84:	mov	r5, r0
   15e88:	str	r0, [sp, #32]
   15e8c:	ldr	r0, [sp, #180]	; 0xb4
   15e90:	mov	r9, r0
   15e94:	str	r0, [sp, #36]	; 0x24
   15e98:	ldr	r0, [sp, #196]	; 0xc4
   15e9c:	str	r0, [sp, #4]
   15ea0:	ldr	r0, [sp, #192]	; 0xc0
   15ea4:	str	r0, [sp, #8]
   15ea8:	ldr	r0, [sp, #172]	; 0xac
   15eac:	str	r0, [sp, #12]
   15eb0:	ldr	r0, [sp, #168]	; 0xa8
   15eb4:	str	r0, [sp, #16]
   15eb8:	ldr	r0, [sp, #164]	; 0xa4
   15ebc:	str	r0, [sp, #20]
   15ec0:	ldr	r0, [sp, #156]	; 0x9c
   15ec4:	bl	197b4 <__assert_fail@plt+0x7d84>
   15ec8:	str	r1, [sp, #204]	; 0xcc
   15ecc:	str	r0, [sp, #200]	; 0xc8
   15ed0:	eor	r1, r1, r4
   15ed4:	eor	r0, r0, r6
   15ed8:	mov	r7, r6
   15edc:	orrs	r0, r0, r1
   15ee0:	bne	15efc <__assert_fail@plt+0x44cc>
   15ee4:	ldr	r0, [sp, #156]	; 0x9c
   15ee8:	ldrd	r0, [r0]
   15eec:	eor	r1, r1, r9
   15ef0:	eor	r0, r0, r5
   15ef4:	orrs	r8, r0, r1
   15ef8:	movwne	r8, #1
   15efc:	cmp	r8, #0
   15f00:	beq	16180 <__assert_fail@plt+0x4750>
   15f04:	ldrb	r0, [sp, #482]	; 0x1e2
   15f08:	ldr	lr, [sp, #192]	; 0xc0
   15f0c:	cmp	r0, #0
   15f10:	beq	16194 <__assert_fail@plt+0x4764>
   15f14:	ldr	sl, [sp, #48]	; 0x30
   15f18:	mov	r3, #1
   15f1c:	ldrd	r0, [sl]
   15f20:	str	r3, [sp, #176]	; 0xb0
   15f24:	eor	r2, r0, #2
   15f28:	orrs	r2, r2, r1
   15f2c:	bne	15f68 <__assert_fail@plt+0x4538>
   15f30:	ldr	r0, [sp, #96]	; 0x60
   15f34:	ldr	r1, [sp, #100]	; 0x64
   15f38:	ldr	r2, [sp, #152]	; 0x98
   15f3c:	mov	r6, r5
   15f40:	mov	r5, r9
   15f44:	mov	r4, r7
   15f48:	str	r0, [sp, #216]	; 0xd8
   15f4c:	ldr	r0, [sp, #92]	; 0x5c
   15f50:	str	r0, [sp, #220]	; 0xdc
   15f54:	ldr	r0, [sp, #104]	; 0x68
   15f58:	str	r1, [r2]
   15f5c:	str	r0, [r2, #4]
   15f60:	ldr	r8, [sp, #188]	; 0xbc
   15f64:	b	160bc <__assert_fail@plt+0x468c>
   15f68:	movw	r3, #15726	; 0x3d6e
   15f6c:	ubfx	r2, r0, #1, #7
   15f70:	ldr	r8, [sp, #116]	; 0x74
   15f74:	ldr	r9, [sp, #120]	; 0x78
   15f78:	movt	r3, #2
   15f7c:	ldrb	r2, [r3, r2]
   15f80:	umull	r3, r7, r0, r2
   15f84:	rsbs	r3, r3, #2
   15f88:	mla	r7, r1, r2, r7
   15f8c:	umull	r6, r3, r3, r2
   15f90:	rsc	r7, r7, #0
   15f94:	mla	ip, r7, r2, r3
   15f98:	umull	r2, r3, r6, r0
   15f9c:	mla	r3, r6, r1, r3
   15fa0:	rsbs	r2, r2, #2
   15fa4:	mla	r3, ip, r0, r3
   15fa8:	rsc	r3, r3, #0
   15fac:	str	r3, [sp, #144]	; 0x90
   15fb0:	umull	r3, r7, r6, r2
   15fb4:	str	r7, [sp, #136]	; 0x88
   15fb8:	umull	r4, r7, r3, r0
   15fbc:	rsbs	r4, r4, #2
   15fc0:	str	r7, [sp, #132]	; 0x84
   15fc4:	umull	r5, r7, r3, r4
   15fc8:	str	r7, [sp, #140]	; 0x8c
   15fcc:	umull	r7, lr, r5, r8
   15fd0:	str	r5, [sp, #124]	; 0x7c
   15fd4:	mla	lr, r5, r9, lr
   15fd8:	ldr	r5, [sp, #132]	; 0x84
   15fdc:	str	r7, [sp, #148]	; 0x94
   15fe0:	ldr	r7, [sp, #144]	; 0x90
   15fe4:	mla	r9, r3, r1, r5
   15fe8:	ldr	r5, [sp, #136]	; 0x88
   15fec:	mla	r6, r6, r7, r5
   15ff0:	mla	r2, ip, r2, r6
   15ff4:	ldr	r6, [sp, #140]	; 0x8c
   15ff8:	mla	r7, r2, r0, r9
   15ffc:	ldr	r9, [sp, #112]	; 0x70
   16000:	rsc	r7, r7, #0
   16004:	mla	r3, r3, r7, r6
   16008:	mla	ip, r2, r4, r3
   1600c:	mla	r6, ip, r8, lr
   16010:	ldr	lr, [sp, #108]	; 0x6c
   16014:	subs	r2, lr, r0
   16018:	sbcs	r2, r9, r1
   1601c:	bcs	16040 <__assert_fail@plt+0x4610>
   16020:	ldr	r0, [sp, #148]	; 0x94
   16024:	ldr	r1, [sp, #152]	; 0x98
   16028:	str	r6, [sp, #220]	; 0xdc
   1602c:	str	r0, [sp, #216]	; 0xd8
   16030:	mov	r0, #0
   16034:	str	r0, [r1]
   16038:	str	r0, [r1, #4]
   1603c:	b	160ac <__assert_fail@plt+0x467c>
   16040:	ldr	r5, [sp, #148]	; 0x94
   16044:	umull	r2, r3, r5, r1
   16048:	umull	r4, r7, r5, r0
   1604c:	umlal	r2, r3, r6, r0
   16050:	adds	r2, r2, r7
   16054:	umull	r0, r7, r6, r0
   16058:	adc	r3, r3, #0
   1605c:	subs	r0, r2, r0
   16060:	umull	r1, r2, r6, r1
   16064:	sbcs	r0, r3, r7
   16068:	ldr	r7, [sp, #124]	; 0x7c
   1606c:	mov	r0, #0
   16070:	movwcc	r0, #1
   16074:	cmp	r0, #0
   16078:	addne	r2, r2, #1
   1607c:	subs	r0, lr, r3
   16080:	sbc	r3, r9, #0
   16084:	subs	r0, r0, r1
   16088:	umull	r4, r1, r0, r7
   1608c:	mla	r0, r0, ip, r1
   16090:	sbc	r1, r3, r2
   16094:	mla	r1, r1, r7, r0
   16098:	ldr	r0, [sp, #152]	; 0x98
   1609c:	str	r4, [r0]
   160a0:	str	r1, [r0, #4]
   160a4:	str	r6, [sp, #220]	; 0xdc
   160a8:	str	r5, [sp, #216]	; 0xd8
   160ac:	add	lr, sp, #184	; 0xb8
   160b0:	ldr	r6, [sp, #128]	; 0x80
   160b4:	ldr	r5, [sp, #180]	; 0xb4
   160b8:	ldm	lr, {r4, r8, lr}
   160bc:	ldr	r0, [sp, #160]	; 0xa0
   160c0:	str	r6, [sp, #32]
   160c4:	str	r5, [sp, #36]	; 0x24
   160c8:	add	r1, sp, #20
   160cc:	add	r2, sp, #216	; 0xd8
   160d0:	str	r0, [sp]
   160d4:	ldr	r0, [sp, #196]	; 0xc4
   160d8:	stmib	sp, {r0, lr}
   160dc:	ldr	r0, [sp, #172]	; 0xac
   160e0:	str	r0, [sp, #12]
   160e4:	ldr	r0, [sp, #168]	; 0xa8
   160e8:	str	r0, [sp, #16]
   160ec:	ldr	r0, [sp, #164]	; 0xa4
   160f0:	stm	r1, {r0, r4, r8}
   160f4:	sub	r1, fp, #72	; 0x48
   160f8:	ldr	r7, [sp, #156]	; 0x9c
   160fc:	mov	r0, r7
   16100:	bl	197b4 <__assert_fail@plt+0x7d84>
   16104:	str	r1, [sp, #204]	; 0xcc
   16108:	str	r0, [sp, #200]	; 0xc8
   1610c:	eor	r1, r1, r8
   16110:	eor	r0, r0, r4
   16114:	ldrd	r2, [r7]
   16118:	eor	r3, r3, r5
   1611c:	eor	r2, r2, r6
   16120:	orr	r1, r1, r3
   16124:	orr	r0, r0, r2
   16128:	orrs	r0, r0, r1
   1612c:	mov	r8, r0
   16130:	movwne	r8, #1
   16134:	cmp	r0, #0
   16138:	beq	16190 <__assert_fail@plt+0x4760>
   1613c:	ldr	r2, [sp, #176]	; 0xb0
   16140:	ldrb	r1, [sp, #482]	; 0x1e2
   16144:	ldr	lr, [sp, #192]	; 0xc0
   16148:	mov	r9, r5
   1614c:	mov	r7, r4
   16150:	mov	r5, r6
   16154:	add	sl, sl, #8
   16158:	add	r0, r2, #1
   1615c:	cmp	r2, r1
   16160:	mov	r3, r0
   16164:	bcc	15f1c <__assert_fail@plt+0x44ec>
   16168:	b	16194 <__assert_fail@plt+0x4764>
   1616c:	ldr	r5, [sp, #128]	; 0x80
   16170:	ldr	r7, [sp, #184]	; 0xb8
   16174:	ldr	r9, [sp, #180]	; 0xb4
   16178:	cmp	r8, #0
   1617c:	bne	15f04 <__assert_fail@plt+0x44d4>
   16180:	ldr	lr, [sp, #192]	; 0xc0
   16184:	cmp	r8, #0
   16188:	beq	1619c <__assert_fail@plt+0x476c>
   1618c:	b	16490 <__assert_fail@plt+0x4a60>
   16190:	ldr	lr, [sp, #192]	; 0xc0
   16194:	cmp	r8, #0
   16198:	bne	16490 <__assert_fail@plt+0x4a60>
   1619c:	ldr	r1, [sp, #84]	; 0x54
   161a0:	movw	r0, #14376	; 0x3828
   161a4:	ldr	r7, [sp, #80]	; 0x50
   161a8:	ldr	r6, [sp, #76]	; 0x4c
   161ac:	ldr	r8, [sp, #172]	; 0xac
   161b0:	ldr	sl, [sp, #160]	; 0xa0
   161b4:	ldr	r9, [sp, #52]	; 0x34
   161b8:	mov	r4, #127	; 0x7f
   161bc:	mov	r2, #0
   161c0:	movt	r0, #2
   161c4:	ldrb	r0, [r0, r1]
   161c8:	adds	r7, r7, r0
   161cc:	adc	r6, r6, #0
   161d0:	subs	r0, r7, lr
   161d4:	mov	r1, r7
   161d8:	str	r7, [sp, #80]	; 0x50
   161dc:	sbcs	r0, r6, r8
   161e0:	mov	r5, r6
   161e4:	str	r6, [sp, #76]	; 0x4c
   161e8:	mov	r0, #0
   161ec:	movwcc	r0, #1
   161f0:	cmp	r0, #0
   161f4:	mov	r3, r0
   161f8:	movwne	r4, #63	; 0x3f
   161fc:	movwne	r5, #0
   16200:	movwne	r1, #0
   16204:	movne	r3, r6
   16208:	movne	r0, r7
   1620c:	lsl	r3, r3, #1
   16210:	mov	ip, r2
   16214:	lsl	r2, r5, #1
   16218:	lsr	r5, r5, #31
   1621c:	mov	r7, r4
   16220:	orr	r3, r3, r0, lsr #31
   16224:	orr	r0, r5, r0, lsl #1
   16228:	orr	r2, r2, r1, lsr #31
   1622c:	lsl	r1, r1, #1
   16230:	subs	r5, lr, r0
   16234:	sbcs	r5, r8, r3
   16238:	bcc	1625c <__assert_fail@plt+0x482c>
   1623c:	ldr	r4, [sp, #196]	; 0xc4
   16240:	subs	r5, r1, sl
   16244:	sbcs	r5, r2, r4
   16248:	bcc	162b8 <__assert_fail@plt+0x4888>
   1624c:	eor	r5, r0, lr
   16250:	eor	r4, r3, r8
   16254:	orrs	r5, r5, r4
   16258:	bne	162a0 <__assert_fail@plt+0x4870>
   1625c:	ldr	r5, [sp, #196]	; 0xc4
   16260:	subs	r4, r0, lr
   16264:	sbc	r6, r3, r8
   16268:	subs	r0, r4, #1
   1626c:	sbc	r3, r6, #0
   16270:	subs	r1, r1, sl
   16274:	sbcs	r5, r2, r5
   16278:	mov	r2, #0
   1627c:	movwcc	r2, #1
   16280:	cmp	r2, #0
   16284:	moveq	r0, r4
   16288:	moveq	r3, r6
   1628c:	subs	r4, r7, #1
   16290:	sbc	r2, ip, #0
   16294:	orrs	r7, r7, ip
   16298:	bne	1620c <__assert_fail@plt+0x47dc>
   1629c:	b	162cc <__assert_fail@plt+0x489c>
   162a0:	mov	r5, r2
   162a4:	subs	r4, r7, #1
   162a8:	sbc	r2, ip, #0
   162ac:	orrs	r7, r7, ip
   162b0:	bne	1620c <__assert_fail@plt+0x47dc>
   162b4:	b	162cc <__assert_fail@plt+0x489c>
   162b8:	mov	r5, r2
   162bc:	subs	r4, r7, #1
   162c0:	sbc	r2, ip, #0
   162c4:	orrs	r7, r7, ip
   162c8:	bne	1620c <__assert_fail@plt+0x47dc>
   162cc:	ldr	r2, [sp, #60]	; 0x3c
   162d0:	stm	r2, {r0, r3}
   162d4:	str	r1, [fp, #-72]	; 0xffffffb8
   162d8:	str	r5, [fp, #-68]	; 0xffffffbc
   162dc:	str	sl, [sp]
   162e0:	sub	r1, fp, #72	; 0x48
   162e4:	sub	r2, fp, #56	; 0x38
   162e8:	ldr	r0, [sp, #128]	; 0x80
   162ec:	str	r0, [sp, #32]
   162f0:	ldr	r0, [sp, #180]	; 0xb4
   162f4:	str	r0, [sp, #36]	; 0x24
   162f8:	ldr	r0, [sp, #196]	; 0xc4
   162fc:	stmib	sp, {r0, lr}
   16300:	str	r8, [sp, #12]
   16304:	ldr	r0, [sp, #168]	; 0xa8
   16308:	ldr	r4, [sp, #184]	; 0xb8
   1630c:	ldr	r5, [sp, #188]	; 0xbc
   16310:	str	r0, [sp, #16]
   16314:	ldr	r0, [sp, #164]	; 0xa4
   16318:	str	r4, [sp, #24]
   1631c:	str	r5, [sp, #28]
   16320:	str	r0, [sp, #20]
   16324:	sub	r0, fp, #40	; 0x28
   16328:	bl	197b4 <__assert_fail@plt+0x7d84>
   1632c:	eor	r2, r1, r5
   16330:	eor	r3, r0, r4
   16334:	ldr	r5, [sp, #64]	; 0x40
   16338:	orrs	r2, r3, r2
   1633c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16340:	ldreq	r6, [sp, #180]	; 0xb4
   16344:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16348:	ldreq	r7, [sp, #128]	; 0x80
   1634c:	eoreq	r7, r2, r7
   16350:	eoreq	r6, r3, r6
   16354:	orrseq	r7, r7, r6
   16358:	beq	16440 <__assert_fail@plt+0x4a10>
   1635c:	ldr	r6, [sp, #88]	; 0x58
   16360:	eor	r7, r0, r9
   16364:	eor	r6, r1, r6
   16368:	orrs	r7, r7, r6
   1636c:	ldreq	r7, [sp, #72]	; 0x48
   16370:	ldreq	r6, [sp, #68]	; 0x44
   16374:	eoreq	r7, r2, r7
   16378:	eoreq	r6, r3, r6
   1637c:	orrseq	r7, r7, r6
   16380:	beq	16440 <__assert_fail@plt+0x4a10>
   16384:	cmp	r5, #2
   16388:	bcc	16484 <__assert_fail@plt+0x4a54>
   1638c:	mov	r4, #1
   16390:	ldr	r7, [sp, #196]	; 0xc4
   16394:	str	sl, [sp, #32]
   16398:	str	r7, [sp, #36]	; 0x24
   1639c:	ldr	r7, [sp, #168]	; 0xa8
   163a0:	str	r7, [sp, #40]	; 0x28
   163a4:	ldr	r7, [sp, #164]	; 0xa4
   163a8:	str	r7, [sp, #44]	; 0x2c
   163ac:	stm	sp, {r0, r1, r2, r3}
   163b0:	str	r0, [sp, #16]
   163b4:	str	r1, [sp, #20]
   163b8:	str	r8, [sp, #28]
   163bc:	ldr	r0, [sp, #192]	; 0xc0
   163c0:	str	r0, [sp, #24]
   163c4:	sub	r0, fp, #40	; 0x28
   163c8:	bl	19a50 <__assert_fail@plt+0x8020>
   163cc:	ldr	r2, [sp, #88]	; 0x58
   163d0:	eor	r3, r0, r9
   163d4:	eor	r2, r1, r2
   163d8:	orrs	r2, r3, r2
   163dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   163e0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   163e4:	bne	16400 <__assert_fail@plt+0x49d0>
   163e8:	ldr	r7, [sp, #72]	; 0x48
   163ec:	ldr	r6, [sp, #68]	; 0x44
   163f0:	eor	r7, r2, r7
   163f4:	eor	r6, r3, r6
   163f8:	orrs	r7, r7, r6
   163fc:	beq	16440 <__assert_fail@plt+0x4a10>
   16400:	ldr	r7, [sp, #184]	; 0xb8
   16404:	ldr	r6, [sp, #188]	; 0xbc
   16408:	eor	r7, r0, r7
   1640c:	eor	r6, r1, r6
   16410:	orrs	r7, r7, r6
   16414:	bne	16430 <__assert_fail@plt+0x4a00>
   16418:	ldr	r7, [sp, #128]	; 0x80
   1641c:	ldr	r6, [sp, #180]	; 0xb4
   16420:	eor	r7, r2, r7
   16424:	eor	r6, r3, r6
   16428:	orrs	r7, r7, r6
   1642c:	beq	16484 <__assert_fail@plt+0x4a54>
   16430:	add	r4, r4, #1
   16434:	cmp	r4, r5
   16438:	bcc	16390 <__assert_fail@plt+0x4960>
   1643c:	b	16484 <__assert_fail@plt+0x4a54>
   16440:	ldr	r0, [sp, #84]	; 0x54
   16444:	mov	r1, r0
   16448:	add	r1, r0, #1
   1644c:	cmp	r1, #668	; 0x29c
   16450:	mov	r0, r1
   16454:	str	r1, [sp, #84]	; 0x54
   16458:	bcc	15d84 <__assert_fail@plt+0x4354>
   1645c:	movw	r1, #2717	; 0xa9d
   16460:	mov	r0, #0
   16464:	mov	r2, #5
   16468:	movt	r1, #2
   1646c:	bl	1170c <dcgettext@plt>
   16470:	mov	r2, r0
   16474:	mov	r0, #0
   16478:	mov	r1, #0
   1647c:	bl	117fc <error@plt>
   16480:	bl	11a24 <abort@plt>
   16484:	mov	r0, #0
   16488:	sub	sp, fp, #28
   1648c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16490:	mov	r0, #1
   16494:	sub	sp, fp, #28
   16498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1649c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164a0:	add	fp, sp, #28
   164a4:	sub	sp, sp, #132	; 0x84
   164a8:	mov	sl, r0
   164ac:	subs	r0, r0, #2
   164b0:	str	r2, [sp, #48]	; 0x30
   164b4:	sbcs	r0, r1, #0
   164b8:	bcc	17268 <__assert_fail@plt+0x5838>
   164bc:	add	r0, r3, #8
   164c0:	mov	r4, r1
   164c4:	str	r3, [sp, #40]	; 0x28
   164c8:	str	r0, [sp, #32]
   164cc:	add	r0, r3, #223	; 0xdf
   164d0:	str	r0, [sp, #28]
   164d4:	add	r0, r3, #225	; 0xe1
   164d8:	str	r0, [sp, #24]
   164dc:	add	r0, r3, #24
   164e0:	str	r0, [sp, #20]
   164e4:	add	r0, r3, #226	; 0xe2
   164e8:	str	r0, [sp, #16]
   164ec:	add	r0, r3, #32
   164f0:	str	r0, [sp, #12]
   164f4:	mov	r3, #0
   164f8:	mvn	r0, #63	; 0x3f
   164fc:	mov	r9, sl
   16500:	mov	r1, sl
   16504:	mov	r8, r4
   16508:	mov	r2, r4
   1650c:	mov	sl, #0
   16510:	mov	r7, #1
   16514:	mov	r6, #0
   16518:	mov	ip, #0
   1651c:	mov	lr, #0
   16520:	str	r3, [fp, #-56]	; 0xffffffc8
   16524:	lsrs	r5, lr, #1
   16528:	rrx	ip, ip
   1652c:	lsrs	r2, r2, #1
   16530:	orr	lr, r5, r1, lsl #31
   16534:	rrx	r1, r1
   16538:	subs	r4, r1, r7
   1653c:	sbcs	r4, r2, r6
   16540:	bcc	16564 <__assert_fail@plt+0x4b34>
   16544:	eor	r4, r7, r1
   16548:	eor	r3, r6, r2
   1654c:	orrs	r3, r4, r3
   16550:	bne	16598 <__assert_fail@plt+0x4b68>
   16554:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16558:	subs	r3, r3, ip
   1655c:	sbcs	r3, sl, lr
   16560:	bcc	16598 <__assert_fail@plt+0x4b68>
   16564:	ldr	r5, [fp, #-56]	; 0xffffffc8
   16568:	subs	r3, r7, r1
   1656c:	sbc	r4, r6, r2
   16570:	subs	r7, r3, #1
   16574:	sbc	r6, r4, #0
   16578:	subs	r5, r5, ip
   1657c:	str	r5, [fp, #-56]	; 0xffffffc8
   16580:	sbcs	sl, sl, lr
   16584:	mov	r5, #0
   16588:	movwcc	r5, #1
   1658c:	cmp	r5, #0
   16590:	moveq	r7, r3
   16594:	moveq	r6, r4
   16598:	adds	r0, r0, #1
   1659c:	bne	16524 <__assert_fail@plt+0x4af4>
   165a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   165a4:	mov	r4, r8
   165a8:	subs	r0, r9, r2
   165ac:	sbc	r1, r8, sl
   165b0:	subs	r0, r2, r0
   165b4:	mov	r2, #0
   165b8:	sbcs	r1, sl, r1
   165bc:	movwcc	r2, #1
   165c0:	adds	r5, r0, r9
   165c4:	adc	r8, r1, r8
   165c8:	cmp	r2, #0
   165cc:	moveq	r8, r1
   165d0:	ldr	r1, [sp, #48]	; 0x30
   165d4:	moveq	r5, r0
   165d8:	eor	r0, r9, #1
   165dc:	orrs	r0, r0, r4
   165e0:	beq	17288 <__assert_fail@plt+0x5858>
   165e4:	add	r0, r1, #1
   165e8:	mov	r6, r9
   165ec:	mov	r2, r5
   165f0:	mov	r3, r8
   165f4:	str	r5, [sp, #80]	; 0x50
   165f8:	str	r8, [sp, #76]	; 0x4c
   165fc:	str	r1, [sp, #48]	; 0x30
   16600:	str	r0, [sp, #36]	; 0x24
   16604:	mov	r0, #1
   16608:	str	r0, [fp, #-52]	; 0xffffffcc
   1660c:	mov	r0, r8
   16610:	mov	r0, #1
   16614:	str	r0, [sp, #52]	; 0x34
   16618:	subs	r0, r1, r6
   1661c:	str	r5, [fp, #-60]	; 0xffffffc4
   16620:	str	r2, [fp, #-76]	; 0xffffffb4
   16624:	str	r3, [fp, #-72]	; 0xffffffb8
   16628:	rscs	r0, r4, #0
   1662c:	bcs	17588 <__assert_fail@plt+0x5b58>
   16630:	lsrs	r0, r4, #1
   16634:	movw	r1, #15726	; 0x3d6e
   16638:	str	r4, [fp, #-40]	; 0xffffffd8
   1663c:	str	r6, [sp, #72]	; 0x48
   16640:	str	r0, [sp, #60]	; 0x3c
   16644:	rrx	r0, r6
   16648:	movt	r1, #2
   1664c:	ldr	ip, [fp, #-40]	; 0xffffffd8
   16650:	str	r0, [sp, #56]	; 0x38
   16654:	and	r0, r0, #127	; 0x7f
   16658:	ldrb	r0, [r1, r0]
   1665c:	umull	r1, r2, r6, r0
   16660:	rsbs	r1, r1, #2
   16664:	mla	r2, r4, r0, r2
   16668:	umull	r1, r3, r1, r0
   1666c:	rsc	lr, r2, #0
   16670:	umull	r7, r9, r1, r6
   16674:	mla	r0, lr, r0, r3
   16678:	rsbs	r7, r7, #2
   1667c:	umull	r5, r2, r1, r7
   16680:	str	r2, [fp, #-48]	; 0xffffffd0
   16684:	umull	r4, r2, r5, r6
   16688:	str	r4, [fp, #-44]	; 0xffffffd4
   1668c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   16690:	mla	ip, r5, ip, r2
   16694:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16698:	mla	r3, r1, r4, r9
   1669c:	mov	r9, r8
   166a0:	mla	r3, r0, r6, r3
   166a4:	rsc	r3, r3, #0
   166a8:	mla	r1, r1, r3, r2
   166ac:	ldr	r2, [fp, #-44]	; 0xffffffd4
   166b0:	mla	r0, r0, r7, r1
   166b4:	mla	r1, r0, r6, ip
   166b8:	rsbs	r2, r2, #2
   166bc:	umull	r7, r3, r5, r2
   166c0:	rsc	r1, r1, #0
   166c4:	mla	r1, r5, r1, r3
   166c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   166cc:	mov	r8, r7
   166d0:	str	r7, [fp, #-48]	; 0xffffffd0
   166d4:	mla	r0, r0, r2, r1
   166d8:	str	r0, [fp, #-44]	; 0xffffffd4
   166dc:	and	r0, r6, #1
   166e0:	str	r0, [sp, #64]	; 0x40
   166e4:	ldr	r0, [sp, #48]	; 0x30
   166e8:	subs	r0, r6, r0
   166ec:	str	r0, [fp, #-64]	; 0xffffffc0
   166f0:	sbc	r0, r4, #0
   166f4:	str	r0, [fp, #-68]	; 0xffffffbc
   166f8:	ldr	r0, [sp, #52]	; 0x34
   166fc:	b	16734 <__assert_fail@plt+0x4d04>
   16700:	ldr	r0, [sp, #52]	; 0x34
   16704:	ldr	r8, [fp, #-48]	; 0xffffffd0
   16708:	str	r9, [fp, #-76]	; 0xffffffb4
   1670c:	mov	r3, r9
   16710:	str	r4, [fp, #-72]	; 0xffffffb8
   16714:	mov	r9, r4
   16718:	mov	r4, r6
   1671c:	str	r0, [fp, #-52]	; 0xffffffcc
   16720:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16724:	str	r0, [sp, #80]	; 0x50
   16728:	ldr	r0, [sp, #68]	; 0x44
   1672c:	str	r0, [sp, #76]	; 0x4c
   16730:	ldr	r0, [sp, #44]	; 0x2c
   16734:	ldr	lr, [fp, #-52]	; 0xffffffcc
   16738:	str	r0, [sp, #52]	; 0x34
   1673c:	umull	r0, r1, r9, r3
   16740:	umull	r3, r7, r3, r3
   16744:	str	lr, [fp, #-52]	; 0xffffffcc
   16748:	mov	ip, r4
   1674c:	lsl	r2, r1, #1
   16750:	adds	r7, r7, r0, lsl #1
   16754:	umull	r6, r5, r3, r8
   16758:	orr	r2, r2, r0, lsr #31
   1675c:	adc	lr, r2, #0
   16760:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16764:	mla	r3, r3, r2, r5
   16768:	umull	r5, r4, r6, r4
   1676c:	mla	r3, r7, r8, r3
   16770:	ldr	r8, [sp, #72]	; 0x48
   16774:	umlal	r5, r4, r3, r8
   16778:	umull	r6, r2, r6, r8
   1677c:	adds	r2, r5, r2
   16780:	adc	r6, r4, #0
   16784:	umull	r5, r4, r3, r8
   16788:	subs	r2, r2, r5
   1678c:	umull	r3, r5, r3, ip
   16790:	sbcs	r2, r6, r4
   16794:	ldr	r4, [fp, #-48]	; 0xffffffd0
   16798:	mov	r2, #0
   1679c:	movwcc	r2, #1
   167a0:	cmp	r2, #0
   167a4:	addne	r5, r5, #1
   167a8:	adds	r2, r3, r6
   167ac:	adc	r3, r5, #0
   167b0:	subs	r0, r7, r0
   167b4:	sbcs	r0, lr, r1
   167b8:	umull	r1, r7, r9, r9
   167bc:	mov	r0, #0
   167c0:	movwcc	r0, #1
   167c4:	cmp	r0, #0
   167c8:	addne	r7, r7, #1
   167cc:	adds	r0, r1, lr
   167d0:	ldr	lr, [fp, #-52]	; 0xffffffcc
   167d4:	adc	r1, r7, #0
   167d8:	subs	r0, r0, r2
   167dc:	mov	r2, #0
   167e0:	sbcs	r1, r1, r3
   167e4:	movwcc	r2, #1
   167e8:	adds	r3, r0, r8
   167ec:	adc	r7, r1, ip
   167f0:	cmp	r2, #0
   167f4:	mov	r2, #0
   167f8:	moveq	r3, r0
   167fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16800:	moveq	r7, r1
   16804:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16808:	subs	r0, r3, r0
   1680c:	sbcs	r1, r7, r1
   16810:	movwcc	r2, #1
   16814:	adds	r3, r0, r8
   16818:	adc	r9, r1, ip
   1681c:	cmp	r2, #0
   16820:	mov	r2, #0
   16824:	moveq	r3, r0
   16828:	ldr	r0, [sp, #80]	; 0x50
   1682c:	moveq	r9, r1
   16830:	ldr	r1, [sp, #76]	; 0x4c
   16834:	str	r3, [fp, #-60]	; 0xffffffc4
   16838:	subs	r0, r0, r3
   1683c:	sbcs	r1, r1, r9
   16840:	movwcc	r2, #1
   16844:	adds	r3, r0, r8
   16848:	adc	r7, r1, ip
   1684c:	cmp	r2, #0
   16850:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16854:	moveq	r7, r1
   16858:	moveq	r3, r0
   1685c:	umull	r0, r1, r7, r2
   16860:	umull	r2, r6, r3, r2
   16864:	umlal	r0, r1, r3, sl
   16868:	umull	r3, r5, r3, sl
   1686c:	adds	r0, r0, r6
   16870:	umull	r7, r6, r7, sl
   16874:	adc	r1, r1, #0
   16878:	subs	r3, r0, r3
   1687c:	sbcs	r3, r1, r5
   16880:	ldr	r5, [fp, #-44]	; 0xffffffd4
   16884:	mov	r3, #0
   16888:	movwcc	r3, #1
   1688c:	cmp	r3, #0
   16890:	addne	r6, r6, #1
   16894:	adds	r1, r7, r1
   16898:	adc	r3, r6, #0
   1689c:	umull	r7, r6, r2, r4
   168a0:	mla	r2, r2, r5, r6
   168a4:	mla	r0, r0, r4, r2
   168a8:	umull	r2, r6, r7, ip
   168ac:	umull	r7, r5, r7, r8
   168b0:	umlal	r2, r6, r0, r8
   168b4:	adds	r2, r2, r5
   168b8:	adc	r7, r6, #0
   168bc:	umull	r6, r5, r0, ip
   168c0:	umull	r0, r4, r0, r8
   168c4:	subs	r0, r2, r0
   168c8:	sbcs	r0, r7, r4
   168cc:	mov	r4, ip
   168d0:	mov	r0, #0
   168d4:	movwcc	r0, #1
   168d8:	cmp	r0, #0
   168dc:	addne	r5, r5, #1
   168e0:	adds	r0, r6, r7
   168e4:	adc	r2, r5, #0
   168e8:	subs	r0, r1, r0
   168ec:	sbcs	r1, r3, r2
   168f0:	mov	r2, #0
   168f4:	movwcc	r2, #1
   168f8:	adds	r6, r0, r8
   168fc:	adc	sl, r1, ip
   16900:	cmp	r2, #0
   16904:	moveq	r6, r0
   16908:	and	r0, lr, #31
   1690c:	moveq	sl, r1
   16910:	cmp	r0, #1
   16914:	str	r6, [fp, #-56]	; 0xffffffc8
   16918:	bne	169ec <__assert_fail@plt+0x4fbc>
   1691c:	ldr	r0, [sp, #64]	; 0x40
   16920:	mov	r5, r6
   16924:	mov	ip, sl
   16928:	mov	r3, r8
   1692c:	mov	r1, r4
   16930:	str	r9, [sp, #68]	; 0x44
   16934:	cmp	r0, #0
   16938:	moveq	r5, r8
   1693c:	moveq	ip, r4
   16940:	moveq	r3, r6
   16944:	moveq	r1, sl
   16948:	orr	r0, r5, ip
   1694c:	cmp	r0, #0
   16950:	beq	169b8 <__assert_fail@plt+0x4f88>
   16954:	lsrs	r2, r1, #1
   16958:	mov	r8, lr
   1695c:	rrx	r7, r3
   16960:	b	16984 <__assert_fail@plt+0x4f54>
   16964:	eor	r0, r4, lr, asr #31
   16968:	eor	r1, lr, lr, asr #31
   1696c:	subs	r5, r0, lr, asr #31
   16970:	and	r0, r4, lr, asr #31
   16974:	sbc	ip, r1, lr, asr #31
   16978:	and	r1, lr, lr, asr #31
   1697c:	adds	r7, r0, r7
   16980:	adc	r2, r1, r2
   16984:	mov	r1, ip
   16988:	mov	r3, r5
   1698c:	lsrs	ip, ip, #1
   16990:	rrx	r5, r5
   16994:	tst	r3, #1
   16998:	beq	16984 <__assert_fail@plt+0x4f54>
   1699c:	subs	r4, r5, r7
   169a0:	sbc	lr, ip, r2
   169a4:	orrs	r0, r4, lr
   169a8:	bne	16964 <__assert_fail@plt+0x4f34>
   169ac:	ldr	r4, [fp, #-40]	; 0xffffffd8
   169b0:	orr	r3, r3, #1
   169b4:	mov	lr, r8
   169b8:	eor	r0, r3, #1
   169bc:	ldr	r9, [sp, #68]	; 0x44
   169c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   169c4:	ldr	r8, [fp, #-48]	; 0xffffffd0
   169c8:	orrs	r0, r0, r1
   169cc:	mov	r1, r3
   169d0:	mov	r2, r9
   169d4:	bne	16b40 <__assert_fail@plt+0x5110>
   169d8:	subs	lr, lr, #1
   169dc:	str	r1, [fp, #-76]	; 0xffffffb4
   169e0:	str	r2, [fp, #-72]	; 0xffffffb8
   169e4:	bne	1673c <__assert_fail@plt+0x4d0c>
   169e8:	b	16a0c <__assert_fail@plt+0x4fdc>
   169ec:	ldr	r1, [fp, #-76]	; 0xffffffb4
   169f0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   169f4:	ldr	r8, [fp, #-48]	; 0xffffffd0
   169f8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   169fc:	subs	lr, lr, #1
   16a00:	str	r1, [fp, #-76]	; 0xffffffb4
   16a04:	str	r2, [fp, #-72]	; 0xffffffb8
   16a08:	bne	1673c <__assert_fail@plt+0x4d0c>
   16a0c:	ldr	r5, [sp, #52]	; 0x34
   16a10:	str	r3, [fp, #-76]	; 0xffffffb4
   16a14:	str	r9, [fp, #-72]	; 0xffffffb8
   16a18:	str	r3, [sp, #80]	; 0x50
   16a1c:	str	r9, [sp, #76]	; 0x4c
   16a20:	lsl	r0, r5, #1
   16a24:	cmp	r5, #0
   16a28:	str	r5, [fp, #-52]	; 0xffffffcc
   16a2c:	beq	16734 <__assert_fail@plt+0x4d04>
   16a30:	ldr	r8, [sp, #72]	; 0x48
   16a34:	str	r9, [sp, #68]	; 0x44
   16a38:	mov	r4, r9
   16a3c:	mov	r9, r3
   16a40:	str	r0, [sp, #44]	; 0x2c
   16a44:	mov	r0, r3
   16a48:	umull	r0, ip, r4, r9
   16a4c:	umull	r7, r6, r9, r9
   16a50:	ldr	r1, [fp, #-48]	; 0xffffffd0
   16a54:	mov	r9, r4
   16a58:	lsl	r3, ip, #1
   16a5c:	adds	r6, r6, r0, lsl #1
   16a60:	orr	r3, r3, r0, lsr #31
   16a64:	adc	lr, r3, #0
   16a68:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16a6c:	umull	r4, r2, r7, r1
   16a70:	mla	r2, r7, r3, r2
   16a74:	mla	r2, r6, r1, r2
   16a78:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16a7c:	umull	r7, r3, r4, r1
   16a80:	umull	r4, r1, r4, r8
   16a84:	umlal	r7, r3, r2, r8
   16a88:	adds	r1, r7, r1
   16a8c:	umull	r4, r7, r2, r8
   16a90:	adc	r3, r3, #0
   16a94:	subs	r1, r1, r4
   16a98:	ldr	r4, [fp, #-40]	; 0xffffffd8
   16a9c:	sbcs	r1, r3, r7
   16aa0:	mov	r1, #0
   16aa4:	movwcc	r1, #1
   16aa8:	umull	r2, r4, r2, r4
   16aac:	cmp	r1, #0
   16ab0:	addne	r4, r4, #1
   16ab4:	adds	r1, r2, r3
   16ab8:	umull	r3, r7, r9, r9
   16abc:	adc	r2, r4, #0
   16ac0:	subs	r0, r6, r0
   16ac4:	ldr	r6, [fp, #-40]	; 0xffffffd8
   16ac8:	sbcs	r0, lr, ip
   16acc:	mov	r0, #0
   16ad0:	movwcc	r0, #1
   16ad4:	cmp	r0, #0
   16ad8:	addne	r7, r7, #1
   16adc:	adds	r0, r3, lr
   16ae0:	adc	r3, r7, #0
   16ae4:	subs	r0, r0, r1
   16ae8:	sbcs	r1, r3, r2
   16aec:	mov	r2, #0
   16af0:	movwcc	r2, #1
   16af4:	adds	r3, r0, r8
   16af8:	adc	r7, r1, r6
   16afc:	cmp	r2, #0
   16b00:	mov	r2, #0
   16b04:	moveq	r3, r0
   16b08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16b0c:	moveq	r7, r1
   16b10:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16b14:	subs	r0, r3, r0
   16b18:	sbcs	r1, r7, r1
   16b1c:	movwcc	r2, #1
   16b20:	adds	r9, r0, r8
   16b24:	adc	r4, r1, r6
   16b28:	cmp	r2, #0
   16b2c:	moveq	r4, r1
   16b30:	moveq	r9, r0
   16b34:	subs	r5, r5, #1
   16b38:	bne	16a48 <__assert_fail@plt+0x5018>
   16b3c:	b	16700 <__assert_fail@plt+0x4cd0>
   16b40:	ldr	r0, [sp, #64]	; 0x40
   16b44:	str	sl, [sp, #44]	; 0x2c
   16b48:	cmp	r0, #0
   16b4c:	bne	16ce4 <__assert_fail@plt+0x52b4>
   16b50:	ldr	sl, [sp, #72]	; 0x48
   16b54:	ldr	lr, [fp, #-72]	; 0xffffffb8
   16b58:	ldr	ip, [fp, #-76]	; 0xffffffb4
   16b5c:	ldr	r9, [fp, #-44]	; 0xffffffd4
   16b60:	umull	r0, r1, lr, ip
   16b64:	umull	r3, r7, ip, ip
   16b68:	lsl	r2, r1, #1
   16b6c:	adds	r7, r7, r0, lsl #1
   16b70:	umull	r6, r5, r3, r8
   16b74:	orr	r2, r2, r0, lsr #31
   16b78:	mla	r3, r3, r9, r5
   16b7c:	adc	ip, r2, #0
   16b80:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16b84:	mla	r3, r7, r8, r3
   16b88:	umull	r5, r4, r6, r2
   16b8c:	umull	r6, r2, r6, sl
   16b90:	umlal	r5, r4, r3, sl
   16b94:	adds	r2, r5, r2
   16b98:	adc	r6, r4, #0
   16b9c:	umull	r5, r4, r3, sl
   16ba0:	subs	r2, r2, r5
   16ba4:	sbcs	r2, r6, r4
   16ba8:	ldr	r4, [fp, #-40]	; 0xffffffd8
   16bac:	mov	r2, #0
   16bb0:	movwcc	r2, #1
   16bb4:	cmp	r2, #0
   16bb8:	umull	r3, r5, r3, r4
   16bbc:	addne	r5, r5, #1
   16bc0:	adds	r2, r3, r6
   16bc4:	adc	r3, r5, #0
   16bc8:	subs	r0, r7, r0
   16bcc:	sbcs	r0, ip, r1
   16bd0:	umull	r1, r7, lr, lr
   16bd4:	mov	r0, #0
   16bd8:	movwcc	r0, #1
   16bdc:	cmp	r0, #0
   16be0:	addne	r7, r7, #1
   16be4:	adds	r0, r1, ip
   16be8:	adc	r1, r7, #0
   16bec:	subs	r0, r0, r2
   16bf0:	mov	r2, #0
   16bf4:	sbcs	r1, r1, r3
   16bf8:	movwcc	r2, #1
   16bfc:	adds	r3, r0, sl
   16c00:	adc	r7, r1, r4
   16c04:	cmp	r2, #0
   16c08:	mov	r2, #0
   16c0c:	moveq	r3, r0
   16c10:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16c14:	moveq	r7, r1
   16c18:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16c1c:	subs	r0, r3, r0
   16c20:	sbcs	r1, r7, r1
   16c24:	movwcc	r2, #1
   16c28:	adds	ip, r0, sl
   16c2c:	adc	lr, r1, r4
   16c30:	cmp	r2, #0
   16c34:	mov	r2, #0
   16c38:	moveq	ip, r0
   16c3c:	ldr	r0, [sp, #80]	; 0x50
   16c40:	moveq	lr, r1
   16c44:	ldr	r1, [sp, #76]	; 0x4c
   16c48:	subs	r0, r0, ip
   16c4c:	sbcs	r1, r1, lr
   16c50:	movwcc	r2, #1
   16c54:	adds	r6, r0, sl
   16c58:	adc	r7, r1, r4
   16c5c:	cmp	r2, #0
   16c60:	moveq	r7, r1
   16c64:	moveq	r6, r0
   16c68:	orrs	r0, sl, r4
   16c6c:	beq	16cd4 <__assert_fail@plt+0x52a4>
   16c70:	lsrs	r2, r7, #1
   16c74:	mov	r3, r4
   16c78:	mov	r4, sl
   16c7c:	rrx	r5, r6
   16c80:	b	16ca4 <__assert_fail@plt+0x5274>
   16c84:	eor	r1, r0, r6, asr #31
   16c88:	eor	r3, r6, r6, asr #31
   16c8c:	and	r0, r0, r6, asr #31
   16c90:	subs	r4, r1, r6, asr #31
   16c94:	and	r1, r6, r6, asr #31
   16c98:	sbc	r3, r3, r6, asr #31
   16c9c:	adds	r5, r0, r5
   16ca0:	adc	r2, r1, r2
   16ca4:	mov	r7, r3
   16ca8:	mov	r1, r4
   16cac:	lsrs	r3, r3, #1
   16cb0:	rrx	r4, r4
   16cb4:	tst	r1, #1
   16cb8:	beq	16ca4 <__assert_fail@plt+0x5274>
   16cbc:	subs	r0, r4, r5
   16cc0:	sbc	r6, r3, r2
   16cc4:	orrs	r3, r0, r6
   16cc8:	bne	16c84 <__assert_fail@plt+0x5254>
   16ccc:	ldr	r4, [fp, #-40]	; 0xffffffd8
   16cd0:	orr	r6, r1, #1
   16cd4:	eor	r0, r6, #1
   16cd8:	orrs	r0, r0, r7
   16cdc:	beq	16b60 <__assert_fail@plt+0x5130>
   16ce0:	b	16e70 <__assert_fail@plt+0x5440>
   16ce4:	ldr	sl, [sp, #72]	; 0x48
   16ce8:	ldr	lr, [fp, #-72]	; 0xffffffb8
   16cec:	ldr	ip, [fp, #-76]	; 0xffffffb4
   16cf0:	umull	r0, r1, lr, ip
   16cf4:	umull	r3, r7, ip, ip
   16cf8:	mov	r9, r4
   16cfc:	lsl	r2, r1, #1
   16d00:	adds	r7, r7, r0, lsl #1
   16d04:	umull	r6, r5, r3, r8
   16d08:	orr	r2, r2, r0, lsr #31
   16d0c:	adc	ip, r2, #0
   16d10:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16d14:	mla	r3, r3, r2, r5
   16d18:	umull	r5, r4, r6, r4
   16d1c:	umull	r6, r2, r6, sl
   16d20:	mla	r3, r7, r8, r3
   16d24:	umlal	r5, r4, r3, sl
   16d28:	adds	r2, r5, r2
   16d2c:	adc	r6, r4, #0
   16d30:	umull	r5, r4, r3, sl
   16d34:	subs	r2, r2, r5
   16d38:	umull	r3, r5, r3, r9
   16d3c:	sbcs	r2, r6, r4
   16d40:	mov	r2, #0
   16d44:	movwcc	r2, #1
   16d48:	cmp	r2, #0
   16d4c:	addne	r5, r5, #1
   16d50:	adds	r2, r3, r6
   16d54:	mov	r6, sl
   16d58:	adc	r3, r5, #0
   16d5c:	subs	r0, r7, r0
   16d60:	sbcs	r0, ip, r1
   16d64:	umull	r1, r7, lr, lr
   16d68:	mov	r0, #0
   16d6c:	movwcc	r0, #1
   16d70:	cmp	r0, #0
   16d74:	addne	r7, r7, #1
   16d78:	adds	r0, r1, ip
   16d7c:	adc	r1, r7, #0
   16d80:	subs	r0, r0, r2
   16d84:	mov	r2, #0
   16d88:	sbcs	r1, r1, r3
   16d8c:	movwcc	r2, #1
   16d90:	adds	r3, r0, sl
   16d94:	adc	r7, r1, r9
   16d98:	cmp	r2, #0
   16d9c:	mov	r2, #0
   16da0:	moveq	r3, r0
   16da4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16da8:	moveq	r7, r1
   16dac:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16db0:	subs	r0, r3, r0
   16db4:	sbcs	r1, r7, r1
   16db8:	mov	r7, r9
   16dbc:	movwcc	r2, #1
   16dc0:	adds	ip, r0, sl
   16dc4:	adc	lr, r1, r9
   16dc8:	cmp	r2, #0
   16dcc:	mov	r2, #0
   16dd0:	moveq	ip, r0
   16dd4:	ldr	r0, [sp, #80]	; 0x50
   16dd8:	moveq	lr, r1
   16ddc:	ldr	r1, [sp, #76]	; 0x4c
   16de0:	subs	r0, r0, ip
   16de4:	sbcs	r1, r1, lr
   16de8:	movwcc	r2, #1
   16dec:	adds	r4, r0, sl
   16df0:	adc	r5, r1, r9
   16df4:	cmp	r2, #0
   16df8:	moveq	r5, r1
   16dfc:	moveq	r4, r0
   16e00:	orrs	r0, r4, r5
   16e04:	beq	16e60 <__assert_fail@plt+0x5430>
   16e08:	ldr	r3, [sp, #56]	; 0x38
   16e0c:	ldr	r1, [sp, #60]	; 0x3c
   16e10:	b	16e34 <__assert_fail@plt+0x5404>
   16e14:	eor	r2, r0, r6, asr #31
   16e18:	eor	r7, r6, r6, asr #31
   16e1c:	and	r0, r0, r6, asr #31
   16e20:	subs	r4, r2, r6, asr #31
   16e24:	and	r2, r6, r6, asr #31
   16e28:	sbc	r5, r7, r6, asr #31
   16e2c:	adds	r3, r0, r3
   16e30:	adc	r1, r2, r1
   16e34:	mov	r7, r5
   16e38:	mov	r2, r4
   16e3c:	lsrs	r5, r5, #1
   16e40:	rrx	r4, r4
   16e44:	tst	r2, #1
   16e48:	beq	16e34 <__assert_fail@plt+0x5404>
   16e4c:	subs	r0, r4, r3
   16e50:	sbc	r6, r5, r1
   16e54:	orrs	r5, r0, r6
   16e58:	bne	16e14 <__assert_fail@plt+0x53e4>
   16e5c:	orr	r6, r2, #1
   16e60:	ldr	r4, [fp, #-40]	; 0xffffffd8
   16e64:	eor	r0, r6, #1
   16e68:	orrs	r0, r0, r7
   16e6c:	beq	16cf0 <__assert_fail@plt+0x52c0>
   16e70:	eor	r0, sl, r6
   16e74:	eor	r1, r4, r7
   16e78:	orrs	r0, r0, r1
   16e7c:	beq	17254 <__assert_fail@plt+0x5824>
   16e80:	mov	r0, sl
   16e84:	mov	r1, r4
   16e88:	mov	r2, r6
   16e8c:	mov	r3, r7
   16e90:	str	ip, [fp, #-76]	; 0xffffffb4
   16e94:	str	lr, [fp, #-72]	; 0xffffffb8
   16e98:	bl	20514 <__assert_fail@plt+0xeae4>
   16e9c:	mov	r4, r0
   16ea0:	str	r1, [fp, #-40]	; 0xffffffd8
   16ea4:	mov	r0, r6
   16ea8:	mov	r1, r7
   16eac:	bl	188fc <__assert_fail@plt+0x6ecc>
   16eb0:	cmp	r0, #0
   16eb4:	str	r4, [sp, #72]	; 0x48
   16eb8:	beq	1711c <__assert_fail@plt+0x56ec>
   16ebc:	ldr	ip, [sp, #40]	; 0x28
   16ec0:	ldrb	lr, [ip, #250]	; 0xfa
   16ec4:	sub	r1, lr, #1
   16ec8:	cmp	lr, #0
   16ecc:	beq	17138 <__assert_fail@plt+0x5708>
   16ed0:	mov	r0, #8
   16ed4:	mov	r8, r6
   16ed8:	add	r2, r0, lr, lsl #3
   16edc:	add	r0, lr, #223	; 0xdf
   16ee0:	mov	r6, ip
   16ee4:	ldr	r3, [r6, r2]!
   16ee8:	ldr	r6, [r6, #4]
   16eec:	subs	r5, r8, r3
   16ef0:	sbcs	r5, r7, r6
   16ef4:	bcs	17140 <__assert_fail@plt+0x5710>
   16ef8:	sub	r3, r0, #1
   16efc:	sub	r0, r0, #224	; 0xe0
   16f00:	sub	r2, r2, #8
   16f04:	cmp	r0, #0
   16f08:	mov	r0, r3
   16f0c:	bgt	16ee0 <__assert_fail@plt+0x54b0>
   16f10:	sub	r2, r3, #224	; 0xe0
   16f14:	ldr	sl, [sp, #44]	; 0x2c
   16f18:	cmp	r1, r2
   16f1c:	ble	17170 <__assert_fail@plt+0x5740>
   16f20:	mvn	r0, r2
   16f24:	add	r6, r0, lr
   16f28:	cmp	r6, #1
   16f2c:	bls	17180 <__assert_fail@plt+0x5750>
   16f30:	sub	r0, lr, #2
   16f34:	mov	r3, ip
   16f38:	sub	ip, r0, r2
   16f3c:	mov	r0, #8
   16f40:	add	r3, r3, lr, lsl #3
   16f44:	umull	r5, r0, ip, r0
   16f48:	add	sl, r3, #16
   16f4c:	cmp	r0, #0
   16f50:	movwne	r0, #1
   16f54:	cmp	r5, sl
   16f58:	bhi	1717c <__assert_fail@plt+0x574c>
   16f5c:	cmp	r0, #0
   16f60:	bne	1717c <__assert_fail@plt+0x574c>
   16f64:	ldr	r3, [sp, #40]	; 0x28
   16f68:	add	r3, r3, lr
   16f6c:	add	r4, r3, #224	; 0xe0
   16f70:	cmp	ip, r4
   16f74:	bhi	1717c <__assert_fail@plt+0x574c>
   16f78:	ldr	r3, [sp, #32]
   16f7c:	add	r3, r3, lr, lsl #3
   16f80:	cmp	r5, r3
   16f84:	bhi	1717c <__assert_fail@plt+0x574c>
   16f88:	cmp	r0, #0
   16f8c:	bne	1717c <__assert_fail@plt+0x574c>
   16f90:	ldr	r0, [sp, #28]
   16f94:	add	r0, r0, lr
   16f98:	cmp	ip, r0
   16f9c:	bhi	1717c <__assert_fail@plt+0x574c>
   16fa0:	str	r6, [sp, #4]
   16fa4:	ldr	r6, [sp, #16]
   16fa8:	mov	r5, #0
   16fac:	str	r4, [fp, #-64]	; 0xffffffc0
   16fb0:	add	r9, r6, r2
   16fb4:	ldr	r6, [sp, #24]
   16fb8:	add	ip, r6, lr
   16fbc:	add	r6, r6, r2
   16fc0:	cmp	r6, ip
   16fc4:	str	ip, [fp, #-44]	; 0xffffffd4
   16fc8:	movwcc	r5, #1
   16fcc:	cmp	r9, r4
   16fd0:	str	r5, [sp, #56]	; 0x38
   16fd4:	mov	r5, #0
   16fd8:	movwcc	r5, #1
   16fdc:	str	r5, [sp, #8]
   16fe0:	ldr	r5, [sp, #20]
   16fe4:	add	r4, r5, r2, lsl #3
   16fe8:	add	r5, r5, lr, lsl #3
   16fec:	cmp	ip, r4
   16ff0:	mov	ip, #0
   16ff4:	str	r4, [fp, #-48]	; 0xffffffd0
   16ff8:	mov	r4, #0
   16ffc:	movwhi	ip, #1
   17000:	cmp	r9, sl
   17004:	movwcc	r4, #1
   17008:	cmp	r6, r5
   1700c:	mov	r6, #0
   17010:	str	ip, [sp, #64]	; 0x40
   17014:	mov	ip, #0
   17018:	movwcc	r6, #1
   1701c:	str	r4, [sp, #60]	; 0x3c
   17020:	ldr	r4, [fp, #-64]	; 0xffffffc0
   17024:	str	r6, [fp, #-68]	; 0xffffffbc
   17028:	ldr	r6, [sp, #12]
   1702c:	add	r6, r6, r2, lsl #3
   17030:	cmp	r4, r6
   17034:	mov	r4, #0
   17038:	movwhi	r4, #1
   1703c:	str	r4, [fp, #-64]	; 0xffffffc0
   17040:	ldr	r4, [fp, #-48]	; 0xffffffd0
   17044:	cmp	r4, r5
   17048:	mov	r4, sl
   1704c:	mov	sl, #0
   17050:	movwcc	sl, #1
   17054:	cmp	r6, r4
   17058:	ldr	r4, [fp, #-44]	; 0xffffffd4
   1705c:	movwcc	ip, #1
   17060:	cmp	r9, r5
   17064:	mov	r5, #0
   17068:	movwcc	r5, #1
   1706c:	cmp	r4, r6
   17070:	mov	r6, #0
   17074:	movwhi	r6, #1
   17078:	tst	r6, r5
   1707c:	bne	1717c <__assert_fail@plt+0x574c>
   17080:	ands	r6, ip, sl
   17084:	bne	1717c <__assert_fail@plt+0x574c>
   17088:	ldr	r6, [fp, #-68]	; 0xffffffbc
   1708c:	ldr	r5, [fp, #-64]	; 0xffffffc0
   17090:	ldr	ip, [sp, #40]	; 0x28
   17094:	ands	r6, r5, r6
   17098:	bne	17180 <__assert_fail@plt+0x5750>
   1709c:	ldr	r4, [sp, #64]	; 0x40
   170a0:	ldr	r5, [sp, #60]	; 0x3c
   170a4:	ands	r6, r5, r4
   170a8:	ldreq	r4, [sp, #56]	; 0x38
   170ac:	ldreq	r5, [sp, #8]
   170b0:	andseq	r6, r5, r4
   170b4:	bne	17180 <__assert_fail@plt+0x5750>
   170b8:	ldr	r9, [sp, #4]
   170bc:	mvn	r6, #15
   170c0:	sub	ip, fp, #32
   170c4:	bic	sl, r9, #1
   170c8:	sub	r1, r1, sl
   170cc:	mov	r5, sl
   170d0:	sub	r4, r3, #8
   170d4:	subs	r5, r5, #2
   170d8:	vld1.64	{d16-d17}, [r4]
   170dc:	vst1.64	{d16-d17}, [r3], r6
   170e0:	ldrh	r4, [r0, #-1]
   170e4:	strh	r4, [fp, #-32]	; 0xffffffe0
   170e8:	vld1.16	{d16[0]}, [ip :16]
   170ec:	vmovl.u8	q8, d16
   170f0:	vmovl.u16	q8, d16
   170f4:	vmov.32	r4, d16[1]
   170f8:	strb	r4, [r0, #1]
   170fc:	vmov.32	r4, d16[0]
   17100:	strb	r4, [r0]
   17104:	sub	r0, r0, #2
   17108:	bne	170d0 <__assert_fail@plt+0x56a0>
   1710c:	ldr	ip, [sp, #40]	; 0x28
   17110:	cmp	r9, sl
   17114:	bne	17180 <__assert_fail@plt+0x5750>
   17118:	b	171ac <__assert_fail@plt+0x577c>
   1711c:	ldr	r2, [sp, #36]	; 0x24
   17120:	ldr	r3, [sp, #40]	; 0x28
   17124:	mov	r0, r6
   17128:	mov	r1, r7
   1712c:	bl	1649c <__assert_fail@plt+0x4a6c>
   17130:	ldr	sl, [sp, #44]	; 0x2c
   17134:	b	171d8 <__assert_fail@plt+0x57a8>
   17138:	ldr	sl, [sp, #44]	; 0x2c
   1713c:	b	171b8 <__assert_fail@plt+0x5788>
   17140:	eor	r2, r3, r8
   17144:	eor	r3, r6, r7
   17148:	orrs	r2, r2, r3
   1714c:	bne	17160 <__assert_fail@plt+0x5730>
   17150:	ldrb	r1, [ip, r0]
   17154:	add	r1, r1, #1
   17158:	strb	r1, [ip, r0]
   1715c:	b	17130 <__assert_fail@plt+0x5700>
   17160:	sub	r2, r0, #224	; 0xe0
   17164:	ldr	sl, [sp, #44]	; 0x2c
   17168:	cmp	r1, r2
   1716c:	bgt	16f20 <__assert_fail@plt+0x54f0>
   17170:	mov	r6, r8
   17174:	mov	r1, r2
   17178:	b	171b8 <__assert_fail@plt+0x5788>
   1717c:	ldr	ip, [sp, #40]	; 0x28
   17180:	lsl	r0, r1, #3
   17184:	add	r3, ip, r0
   17188:	sub	r0, r0, #8
   1718c:	ldrd	r4, [r3, #16]
   17190:	strd	r4, [r3, #24]
   17194:	add	r3, ip, r1
   17198:	sub	r1, r1, #1
   1719c:	ldrb	r6, [r3, #224]	; 0xe0
   171a0:	cmp	r1, r2
   171a4:	strb	r6, [r3, #225]	; 0xe1
   171a8:	bgt	17184 <__assert_fail@plt+0x5754>
   171ac:	ldr	sl, [sp, #44]	; 0x2c
   171b0:	mov	r1, r2
   171b4:	mov	r6, r8
   171b8:	add	r0, r1, #1
   171bc:	add	r1, ip, r0, lsl #3
   171c0:	add	r0, ip, r0
   171c4:	strd	r6, [r1, #16]
   171c8:	mov	r1, #1
   171cc:	strb	r1, [r0, #224]	; 0xe0
   171d0:	add	r0, lr, #1
   171d4:	strb	r0, [ip, #250]	; 0xfa
   171d8:	ldr	r6, [sp, #72]	; 0x48
   171dc:	ldr	r4, [fp, #-40]	; 0xffffffd8
   171e0:	mov	r0, r6
   171e4:	mov	r1, r4
   171e8:	bl	188fc <__assert_fail@plt+0x6ecc>
   171ec:	cmp	r0, #0
   171f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   171f4:	bne	17290 <__assert_fail@plt+0x5860>
   171f8:	ldr	r1, [sp, #68]	; 0x44
   171fc:	mov	r2, r6
   17200:	mov	r3, r4
   17204:	bl	20514 <__assert_fail@plt+0xeae4>
   17208:	ldr	r0, [sp, #80]	; 0x50
   1720c:	ldr	r1, [sp, #76]	; 0x4c
   17210:	mov	r5, r2
   17214:	mov	r8, r3
   17218:	mov	r2, r6
   1721c:	mov	r3, r4
   17220:	bl	20514 <__assert_fail@plt+0xeae4>
   17224:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17228:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1722c:	str	r2, [sp, #80]	; 0x50
   17230:	str	r3, [sp, #76]	; 0x4c
   17234:	mov	r2, r6
   17238:	mov	r3, r4
   1723c:	bl	20514 <__assert_fail@plt+0xeae4>
   17240:	ldr	r1, [sp, #48]	; 0x30
   17244:	eor	r0, r6, #1
   17248:	orrs	r0, r0, r4
   1724c:	bne	16618 <__assert_fail@plt+0x4be8>
   17250:	b	17288 <__assert_fail@plt+0x5858>
   17254:	rsbs	r0, sl, #1
   17258:	rscs	r0, r4, #0
   1725c:	ldr	r0, [sp, #36]	; 0x24
   17260:	str	r0, [sp, #48]	; 0x30
   17264:	bcc	164f4 <__assert_fail@plt+0x4ac4>
   17268:	movw	r0, #2767	; 0xacf
   1726c:	movw	r1, #2704	; 0xa90
   17270:	movw	r3, #3104	; 0xc20
   17274:	movw	r2, #1466	; 0x5ba
   17278:	movt	r0, #2
   1727c:	movt	r1, #2
   17280:	movt	r3, #2
   17284:	bl	11a30 <__assert_fail@plt>
   17288:	sub	sp, fp, #28
   1728c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17290:	ldr	ip, [sp, #40]	; 0x28
   17294:	ldrb	r8, [ip, #250]	; 0xfa
   17298:	sub	r1, r8, #1
   1729c:	cmp	r8, #0
   172a0:	beq	174dc <__assert_fail@plt+0x5aac>
   172a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   172a8:	mov	r2, #8
   172ac:	add	r7, r8, #223	; 0xdf
   172b0:	mov	sl, r6
   172b4:	add	r3, r2, r8, lsl #3
   172b8:	mov	r6, ip
   172bc:	ldr	r2, [r6, r3]!
   172c0:	ldr	r6, [r6, #4]
   172c4:	subs	r5, sl, r2
   172c8:	sbcs	r5, r0, r6
   172cc:	bcs	174e8 <__assert_fail@plt+0x5ab8>
   172d0:	sub	r2, r7, #1
   172d4:	sub	r7, r7, #224	; 0xe0
   172d8:	sub	r3, r3, #8
   172dc:	cmp	r7, #0
   172e0:	mov	r7, r2
   172e4:	bgt	172b8 <__assert_fail@plt+0x5888>
   172e8:	sub	r2, r2, #224	; 0xe0
   172ec:	cmp	r1, r2
   172f0:	ble	17558 <__assert_fail@plt+0x5b28>
   172f4:	mvn	r3, r2
   172f8:	add	r4, r3, r8
   172fc:	cmp	r4, #1
   17300:	bls	1752c <__assert_fail@plt+0x5afc>
   17304:	sub	r3, r8, #2
   17308:	add	ip, ip, r8, lsl #3
   1730c:	sub	r5, r3, r2
   17310:	mov	r3, #8
   17314:	add	lr, ip, #16
   17318:	umull	r9, r6, r5, r3
   1731c:	cmp	r6, #0
   17320:	movwne	r6, #1
   17324:	cmp	r9, lr
   17328:	bhi	1751c <__assert_fail@plt+0x5aec>
   1732c:	cmp	r6, #0
   17330:	bne	1751c <__assert_fail@plt+0x5aec>
   17334:	ldr	r7, [sp, #40]	; 0x28
   17338:	add	r3, r7, r8
   1733c:	add	r7, r3, #224	; 0xe0
   17340:	cmp	r5, r7
   17344:	bhi	1751c <__assert_fail@plt+0x5aec>
   17348:	add	r7, ip, #8
   1734c:	cmp	r9, r7
   17350:	bhi	1751c <__assert_fail@plt+0x5aec>
   17354:	cmp	r6, #0
   17358:	bne	1751c <__assert_fail@plt+0x5aec>
   1735c:	add	r6, r3, #223	; 0xdf
   17360:	cmp	r5, r6
   17364:	bhi	1751c <__assert_fail@plt+0x5aec>
   17368:	str	r4, [fp, #-68]	; 0xffffffbc
   1736c:	ldr	r4, [sp, #40]	; 0x28
   17370:	add	ip, ip, #24
   17374:	add	r3, r4, r2, lsl #3
   17378:	add	r0, r3, #24
   1737c:	add	r5, r3, #32
   17380:	mov	r3, #0
   17384:	cmp	r0, ip
   17388:	str	r5, [fp, #-44]	; 0xffffffd4
   1738c:	str	r0, [fp, #-48]	; 0xffffffd0
   17390:	mov	r0, #0
   17394:	movwcc	r3, #1
   17398:	cmp	r5, lr
   1739c:	add	r5, r4, #224	; 0xe0
   173a0:	str	r3, [fp, #-52]	; 0xffffffcc
   173a4:	mov	r3, #0
   173a8:	add	r4, r5, r2
   173ac:	add	r5, r5, r8
   173b0:	movwcc	r3, #1
   173b4:	add	r9, r5, #1
   173b8:	str	r3, [fp, #-56]	; 0xffffffc8
   173bc:	add	r3, r4, #2
   173c0:	add	r4, r4, #1
   173c4:	cmp	r4, r9
   173c8:	movwcc	r0, #1
   173cc:	cmp	r3, r5
   173d0:	str	r0, [fp, #-60]	; 0xffffffc4
   173d4:	mov	r0, #0
   173d8:	movwcc	r0, #1
   173dc:	str	r0, [fp, #-64]	; 0xffffffc0
   173e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   173e4:	cmp	r9, r0
   173e8:	mov	r0, #0
   173ec:	movwhi	r0, #1
   173f0:	cmp	r3, lr
   173f4:	mov	lr, #0
   173f8:	str	r0, [fp, #-48]	; 0xffffffd0
   173fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17400:	movwcc	lr, #1
   17404:	cmp	r5, r0
   17408:	mov	r5, #0
   1740c:	movwhi	r5, #1
   17410:	cmp	r4, ip
   17414:	mov	r4, #0
   17418:	movwcc	r4, #1
   1741c:	cmp	r3, ip
   17420:	mov	r3, #0
   17424:	movwcc	r3, #1
   17428:	cmp	r9, r0
   1742c:	mov	r0, #0
   17430:	movwhi	r0, #1
   17434:	tst	r0, r3
   17438:	bne	17524 <__assert_fail@plt+0x5af4>
   1743c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   17440:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17444:	ldr	ip, [sp, #40]	; 0x28
   17448:	ands	r3, r0, r3
   1744c:	bne	17528 <__assert_fail@plt+0x5af8>
   17450:	ands	r3, r5, r4
   17454:	bne	17528 <__assert_fail@plt+0x5af8>
   17458:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1745c:	ands	r3, lr, r0
   17460:	bne	17528 <__assert_fail@plt+0x5af8>
   17464:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17468:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1746c:	ands	r3, r3, r0
   17470:	bne	17528 <__assert_fail@plt+0x5af8>
   17474:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17478:	mvn	lr, #15
   1747c:	sub	r3, fp, #36	; 0x24
   17480:	bic	ip, r0, #1
   17484:	sub	r1, r1, ip
   17488:	mov	r5, ip
   1748c:	sub	r4, r7, #8
   17490:	subs	r5, r5, #2
   17494:	vld1.64	{d16-d17}, [r4]
   17498:	vst1.64	{d16-d17}, [r7], lr
   1749c:	ldrh	r4, [r6, #-1]
   174a0:	strh	r4, [fp, #-36]	; 0xffffffdc
   174a4:	vld1.16	{d16[0]}, [r3 :16]
   174a8:	vmovl.u8	q8, d16
   174ac:	vmovl.u16	q8, d16
   174b0:	vmov.32	r4, d16[1]
   174b4:	strb	r4, [r6, #1]
   174b8:	vmov.32	r4, d16[0]
   174bc:	strb	r4, [r6]
   174c0:	sub	r6, r6, #2
   174c4:	bne	1748c <__assert_fail@plt+0x5a5c>
   174c8:	cmp	r0, ip
   174cc:	ldr	ip, [sp, #40]	; 0x28
   174d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   174d4:	bne	1752c <__assert_fail@plt+0x5afc>
   174d8:	b	17558 <__assert_fail@plt+0x5b28>
   174dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   174e0:	mov	sl, r6
   174e4:	b	1755c <__assert_fail@plt+0x5b2c>
   174e8:	eor	r2, r2, sl
   174ec:	eor	r3, r6, r0
   174f0:	orrs	r2, r2, r3
   174f4:	bne	1750c <__assert_fail@plt+0x5adc>
   174f8:	ldrb	r0, [ip, r7]
   174fc:	add	r0, r0, #1
   17500:	strb	r0, [ip, r7]
   17504:	sub	sp, fp, #28
   17508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1750c:	sub	r2, r7, #224	; 0xe0
   17510:	cmp	r1, r2
   17514:	bgt	172f4 <__assert_fail@plt+0x58c4>
   17518:	b	17558 <__assert_fail@plt+0x5b28>
   1751c:	ldr	ip, [sp, #40]	; 0x28
   17520:	b	1752c <__assert_fail@plt+0x5afc>
   17524:	ldr	ip, [sp, #40]	; 0x28
   17528:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1752c:	lsl	r3, r1, #3
   17530:	add	r7, ip, r3
   17534:	sub	r3, r3, #8
   17538:	ldrd	r4, [r7, #16]
   1753c:	strd	r4, [r7, #24]
   17540:	add	r7, ip, r1
   17544:	sub	r1, r1, #1
   17548:	ldrb	r6, [r7, #224]	; 0xe0
   1754c:	cmp	r1, r2
   17550:	strb	r6, [r7, #225]	; 0xe1
   17554:	bgt	17530 <__assert_fail@plt+0x5b00>
   17558:	mov	r1, r2
   1755c:	add	r1, r1, #1
   17560:	add	r2, ip, r1, lsl #3
   17564:	add	r1, ip, r1
   17568:	str	sl, [r2, #16]
   1756c:	str	r0, [r2, #20]
   17570:	mov	r2, #1
   17574:	add	r0, r8, #1
   17578:	strb	r2, [r1, #224]	; 0xe0
   1757c:	strb	r0, [ip, #250]	; 0xfa
   17580:	sub	sp, fp, #28
   17584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17588:	movw	r0, #3178	; 0xc6a
   1758c:	movw	r1, #2704	; 0xa90
   17590:	movw	r3, #3104	; 0xc20
   17594:	mov	r2, #1472	; 0x5c0
   17598:	movt	r0, #2
   1759c:	movt	r1, #2
   175a0:	movt	r3, #2
   175a4:	bl	11a30 <__assert_fail@plt>
   175a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175ac:	add	fp, sp, #28
   175b0:	sub	sp, sp, #260	; 0x104
   175b4:	mov	lr, r3
   175b8:	subs	r3, r0, #2
   175bc:	mov	r8, #0
   175c0:	str	r0, [fp, #-84]	; 0xffffffac
   175c4:	mov	r4, #0
   175c8:	mov	r9, r2
   175cc:	mov	sl, r1
   175d0:	mov	r2, #0
   175d4:	mov	r6, #0
   175d8:	sbcs	r3, r1, #0
   175dc:	movwcc	r8, #1
   175e0:	rsbs	r0, r0, #1
   175e4:	mov	r3, #127	; 0x7f
   175e8:	rscs	r0, r1, #0
   175ec:	movwcc	r4, #1
   175f0:	mov	r0, #0
   175f4:	cmp	r4, #0
   175f8:	str	r0, [fp, #-116]	; 0xffffff8c
   175fc:	movwne	r3, #63	; 0x3f
   17600:	ldr	r7, [fp, #-116]	; 0xffffff8c
   17604:	ldr	r5, [fp, #-84]	; 0xffffffac
   17608:	mov	r0, r3
   1760c:	lsl	r3, r6, #1
   17610:	mov	ip, r2
   17614:	orr	r6, r3, r4, lsr #31
   17618:	lsl	r3, r4, #1
   1761c:	orr	r4, r3, r7, lsr #31
   17620:	lsl	r2, r7, #1
   17624:	subs	r3, r5, r4
   17628:	orr	r2, r2, r8, lsr #31
   1762c:	lsl	r8, r8, #1
   17630:	sbcs	r3, sl, r6
   17634:	bcc	17658 <__assert_fail@plt+0x5c28>
   17638:	subs	r3, r8, r9
   1763c:	sbcs	r3, r2, lr
   17640:	bcc	1769c <__assert_fail@plt+0x5c6c>
   17644:	ldr	r5, [fp, #-84]	; 0xffffffac
   17648:	eor	r7, r6, sl
   1764c:	eor	r3, r4, r5
   17650:	orrs	r3, r3, r7
   17654:	bne	176b4 <__assert_fail@plt+0x5c84>
   17658:	subs	r3, r4, r5
   1765c:	sbc	r7, r6, sl
   17660:	subs	r4, r3, #1
   17664:	sbc	r6, r7, #0
   17668:	subs	r8, r8, r9
   1766c:	sbcs	r2, r2, lr
   17670:	str	r2, [fp, #-116]	; 0xffffff8c
   17674:	mov	r2, #0
   17678:	movwcc	r2, #1
   1767c:	cmp	r2, #0
   17680:	moveq	r4, r3
   17684:	moveq	r6, r7
   17688:	subs	r3, r0, #1
   1768c:	sbc	r2, ip, #0
   17690:	orrs	r0, r0, ip
   17694:	bne	17600 <__assert_fail@plt+0x5bd0>
   17698:	b	176c8 <__assert_fail@plt+0x5c98>
   1769c:	str	r2, [fp, #-116]	; 0xffffff8c
   176a0:	subs	r3, r0, #1
   176a4:	sbc	r2, ip, #0
   176a8:	orrs	r0, r0, ip
   176ac:	bne	17600 <__assert_fail@plt+0x5bd0>
   176b0:	b	176c8 <__assert_fail@plt+0x5c98>
   176b4:	str	r2, [fp, #-116]	; 0xffffff8c
   176b8:	subs	r3, r0, #1
   176bc:	sbc	r2, ip, #0
   176c0:	orrs	r0, r0, ip
   176c4:	bne	17600 <__assert_fail@plt+0x5bd0>
   176c8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   176cc:	lsl	r0, r6, #1
   176d0:	rsbs	r5, r8, r8, lsl #1
   176d4:	orr	r3, r0, r4, lsr #31
   176d8:	ldr	r5, [fp, #-84]	; 0xffffffac
   176dc:	str	r3, [fp, #-36]	; 0xffffffdc
   176e0:	lsl	r0, r2, #1
   176e4:	orr	r7, r0, r8, lsr #31
   176e8:	mov	r0, #0
   176ec:	sbcs	r2, r7, r2
   176f0:	mov	r2, #0
   176f4:	movwcc	r2, #1
   176f8:	orr	ip, r2, r4, lsl #1
   176fc:	lsl	r2, r8, #1
   17700:	subs	r1, r5, ip
   17704:	str	ip, [fp, #-40]	; 0xffffffd8
   17708:	sbcs	r1, sl, r3
   1770c:	bcc	17740 <__assert_fail@plt+0x5d10>
   17710:	subs	r1, r2, r9
   17714:	str	r2, [fp, #-120]	; 0xffffff88
   17718:	str	r7, [fp, #-132]	; 0xffffff7c
   1771c:	sbcs	r1, r7, lr
   17720:	bcc	1777c <__assert_fail@plt+0x5d4c>
   17724:	ldr	r5, [fp, #-84]	; 0xffffffac
   17728:	eor	r2, r3, sl
   1772c:	ldr	r7, [fp, #-132]	; 0xffffff7c
   17730:	eor	r1, ip, r5
   17734:	orrs	r1, r1, r2
   17738:	ldr	r2, [fp, #-120]	; 0xffffff88
   1773c:	bne	1777c <__assert_fail@plt+0x5d4c>
   17740:	subs	r2, r2, r9
   17744:	sbcs	r7, r7, lr
   17748:	str	r2, [fp, #-120]	; 0xffffff88
   1774c:	mov	r2, lr
   17750:	movwcc	r0, #1
   17754:	str	r7, [fp, #-132]	; 0xffffff7c
   17758:	cmp	r0, #0
   1775c:	mvnne	r0, #0
   17760:	subs	r1, r0, r5
   17764:	sbc	r0, r0, sl
   17768:	adds	ip, r1, ip
   1776c:	adc	r3, r0, r3
   17770:	str	ip, [fp, #-40]	; 0xffffffd8
   17774:	str	r3, [fp, #-36]	; 0xffffffdc
   17778:	b	17780 <__assert_fail@plt+0x5d50>
   1777c:	mov	r2, lr
   17780:	eor	r0, r9, #1
   17784:	str	ip, [fp, #-56]	; 0xffffffc8
   17788:	str	ip, [fp, #-108]	; 0xffffff94
   1778c:	str	ip, [fp, #-48]	; 0xffffffd0
   17790:	str	r3, [fp, #-52]	; 0xffffffcc
   17794:	str	r3, [fp, #-104]	; 0xffffff98
   17798:	str	r3, [fp, #-44]	; 0xffffffd4
   1779c:	orrs	r0, r0, r2
   177a0:	ldreq	r0, [fp, #-84]	; 0xffffffac
   177a4:	orrseq	r0, r0, sl
   177a8:	beq	18594 <__assert_fail@plt+0x6b64>
   177ac:	ldr	r0, [fp, #12]
   177b0:	str	r4, [fp, #-140]	; 0xffffff74
   177b4:	mov	r4, r9
   177b8:	ldr	r9, [fp, #-132]	; 0xffffff7c
   177bc:	str	r8, [fp, #-136]	; 0xffffff78
   177c0:	mov	r8, lr
   177c4:	str	r6, [sp, #144]	; 0x90
   177c8:	mov	r1, r0
   177cc:	add	r0, r0, #8
   177d0:	str	r9, [sp, #124]	; 0x7c
   177d4:	str	r9, [fp, #-88]	; 0xffffffa8
   177d8:	str	r0, [sp, #96]	; 0x60
   177dc:	add	r0, r1, #223	; 0xdf
   177e0:	str	r0, [sp, #92]	; 0x5c
   177e4:	add	r0, r1, #225	; 0xe1
   177e8:	str	r0, [sp, #88]	; 0x58
   177ec:	add	r0, r1, #24
   177f0:	str	r0, [sp, #84]	; 0x54
   177f4:	add	r0, r1, #226	; 0xe2
   177f8:	str	r0, [sp, #80]	; 0x50
   177fc:	add	r0, r1, #32
   17800:	ldr	r1, [fp, #-108]	; 0xffffff94
   17804:	str	r0, [sp, #76]	; 0x4c
   17808:	ldr	r0, [fp, #8]
   1780c:	str	r1, [sp, #136]	; 0x88
   17810:	str	r1, [fp, #-124]	; 0xffffff84
   17814:	add	r0, r0, #1
   17818:	str	r0, [sp, #100]	; 0x64
   1781c:	ldr	r0, [fp, #-104]	; 0xffffff98
   17820:	str	r0, [sp, #132]	; 0x84
   17824:	str	r0, [fp, #-128]	; 0xffffff80
   17828:	ldr	r0, [fp, #-120]	; 0xffffff88
   1782c:	str	r0, [sp, #128]	; 0x80
   17830:	str	r0, [fp, #-112]	; 0xffffff90
   17834:	mov	r0, #1
   17838:	str	r0, [fp, #-92]	; 0xffffffa4
   1783c:	mov	r0, #1
   17840:	str	r0, [sp, #108]	; 0x6c
   17844:	b	17914 <__assert_fail@plt+0x5ee4>
   17848:	ldr	r0, [fp, #-120]	; 0xffffff88
   1784c:	mov	r2, r4
   17850:	str	r0, [sp]
   17854:	ldr	r0, [fp, #-132]	; 0xffffff7c
   17858:	stmib	sp, {r0, r7, sl}
   1785c:	sub	r0, fp, #40	; 0x28
   17860:	str	r9, [sp, #16]
   17864:	str	r8, [sp, #20]
   17868:	ldr	r3, [fp, #-128]	; 0xffffff80
   1786c:	bl	1a27c <__assert_fail@plt+0x884c>
   17870:	str	r0, [fp, #-120]	; 0xffffff88
   17874:	ldr	r0, [sp, #128]	; 0x80
   17878:	mov	r6, r1
   1787c:	str	r0, [sp]
   17880:	ldr	r0, [sp, #124]	; 0x7c
   17884:	stmib	sp, {r0, r7, sl}
   17888:	sub	r0, fp, #48	; 0x30
   1788c:	str	r9, [sp, #16]
   17890:	str	r8, [sp, #20]
   17894:	ldr	r2, [sp, #136]	; 0x88
   17898:	ldr	r3, [sp, #132]	; 0x84
   1789c:	bl	1a27c <__assert_fail@plt+0x884c>
   178a0:	str	r0, [sp, #128]	; 0x80
   178a4:	ldr	r0, [fp, #-112]	; 0xffffff90
   178a8:	str	r1, [sp, #124]	; 0x7c
   178ac:	stm	sp, {r0, r5, r7, sl}
   178b0:	sub	r0, fp, #56	; 0x38
   178b4:	str	r9, [sp, #16]
   178b8:	str	r8, [sp, #20]
   178bc:	ldr	r2, [fp, #-108]	; 0xffffff94
   178c0:	ldr	r3, [fp, #-104]	; 0xffffff98
   178c4:	bl	1a27c <__assert_fail@plt+0x884c>
   178c8:	str	r0, [fp, #-112]	; 0xffffff90
   178cc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   178d0:	mov	r4, r9
   178d4:	str	r1, [fp, #-88]	; 0xffffffa8
   178d8:	str	r7, [fp, #-84]	; 0xffffffac
   178dc:	mov	r9, r6
   178e0:	str	r0, [fp, #-108]	; 0xffffff94
   178e4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   178e8:	str	r0, [fp, #-104]	; 0xffffff98
   178ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   178f0:	str	r0, [sp, #136]	; 0x88
   178f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   178f8:	str	r0, [sp, #132]	; 0x84
   178fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17900:	str	r0, [fp, #-124]	; 0xffffff84
   17904:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17908:	str	r0, [fp, #-128]	; 0xffffff80
   1790c:	ldr	r0, [sp, #112]	; 0x70
   17910:	str	r0, [sp, #108]	; 0x6c
   17914:	movw	r1, #15726	; 0x3d6e
   17918:	ubfx	r0, r4, #1, #7
   1791c:	str	r4, [sp, #140]	; 0x8c
   17920:	str	r8, [sp, #120]	; 0x78
   17924:	str	sl, [sp, #116]	; 0x74
   17928:	movt	r1, #2
   1792c:	ldrb	r0, [r1, r0]
   17930:	umull	r1, r2, r4, r0
   17934:	rsbs	r1, r1, #2
   17938:	mla	r2, r8, r0, r2
   1793c:	umull	r1, r3, r1, r0
   17940:	rsc	r2, r2, #0
   17944:	umull	r7, r5, r1, r4
   17948:	str	r2, [fp, #-96]	; 0xffffffa0
   1794c:	rsbs	r7, r7, #2
   17950:	umull	r2, lr, r1, r7
   17954:	umull	r6, ip, r2, r4
   17958:	str	r6, [fp, #-100]	; 0xffffff9c
   1795c:	ldr	r6, [fp, #-96]	; 0xffffffa0
   17960:	mla	ip, r2, r8, ip
   17964:	mla	r0, r6, r0, r3
   17968:	mla	r3, r1, r8, r5
   1796c:	ldr	r6, [fp, #-124]	; 0xffffff84
   17970:	mla	r3, r0, r4, r3
   17974:	rsc	r3, r3, #0
   17978:	mla	r1, r1, r3, lr
   1797c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17980:	mla	r0, r0, r7, r1
   17984:	mla	r1, r0, r4, ip
   17988:	ldr	r4, [fp, #-120]	; 0xffffff88
   1798c:	ldr	ip, [fp, #-128]	; 0xffffff80
   17990:	rsbs	r3, r3, #2
   17994:	umull	r5, r7, r2, r3
   17998:	rsc	r1, r1, #0
   1799c:	mla	r1, r2, r1, r7
   179a0:	str	r5, [fp, #-96]	; 0xffffffa0
   179a4:	ldr	r2, [fp, #-108]	; 0xffffff94
   179a8:	ldr	r5, [fp, #-112]	; 0xffffff90
   179ac:	mla	r0, r0, r3, r1
   179b0:	ldr	r3, [fp, #-104]	; 0xffffff98
   179b4:	str	r0, [fp, #-100]	; 0xffffff9c
   179b8:	b	179f8 <__assert_fail@plt+0x5fc8>
   179bc:	ldr	r0, [fp, #-124]	; 0xffffff84
   179c0:	ldr	r1, [sp, #112]	; 0x70
   179c4:	mov	r6, r2
   179c8:	str	r9, [sp, #124]	; 0x7c
   179cc:	mov	r4, r5
   179d0:	str	r0, [sp, #136]	; 0x88
   179d4:	ldr	r0, [fp, #-128]	; 0xffffff80
   179d8:	str	r1, [fp, #-92]	; 0xffffffa4
   179dc:	ldr	r1, [fp, #-120]	; 0xffffff88
   179e0:	str	r0, [sp, #132]	; 0x84
   179e4:	mov	r0, ip
   179e8:	mov	ip, r3
   179ec:	str	r1, [sp, #128]	; 0x80
   179f0:	str	r0, [fp, #-88]	; 0xffffffa8
   179f4:	mov	r9, r0
   179f8:	ldr	r1, [sp, #108]	; 0x6c
   179fc:	str	r1, [sp, #112]	; 0x70
   17a00:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17a04:	ldr	r1, [sp, #140]	; 0x8c
   17a08:	str	r2, [fp, #-108]	; 0xffffff94
   17a0c:	str	r3, [fp, #-104]	; 0xffffff98
   17a10:	str	r5, [fp, #-112]	; 0xffffff90
   17a14:	str	r8, [sp, #36]	; 0x24
   17a18:	mov	r2, r6
   17a1c:	mov	r3, ip
   17a20:	str	r0, [sp, #40]	; 0x28
   17a24:	ldr	r0, [fp, #-100]	; 0xffffff9c
   17a28:	str	r1, [sp, #32]
   17a2c:	str	r0, [sp, #44]	; 0x2c
   17a30:	stm	sp, {r4, r9}
   17a34:	str	r4, [sp, #16]
   17a38:	mov	r4, r8
   17a3c:	sub	r0, fp, #72	; 0x48
   17a40:	str	r9, [sp, #20]
   17a44:	str	r6, [sp, #8]
   17a48:	str	ip, [sp, #12]
   17a4c:	str	sl, [sp, #28]
   17a50:	mov	r9, r1
   17a54:	ldr	r8, [fp, #-84]	; 0xffffffac
   17a58:	str	r8, [sp, #24]
   17a5c:	bl	19a50 <__assert_fail@plt+0x8020>
   17a60:	ldr	r7, [fp, #8]
   17a64:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17a68:	ldr	r3, [fp, #-68]	; 0xffffffbc
   17a6c:	mov	lr, r4
   17a70:	adds	r6, r0, r7
   17a74:	adcs	r7, r1, #0
   17a78:	adcs	r5, r2, #0
   17a7c:	ldr	r2, [fp, #-140]	; 0xffffff74
   17a80:	adc	r4, r3, #0
   17a84:	ldr	r3, [fp, #-136]	; 0xffffff78
   17a88:	subs	r0, r8, r5
   17a8c:	sbcs	r0, sl, r4
   17a90:	bcc	17ac0 <__assert_fail@plt+0x6090>
   17a94:	subs	r0, r6, r9
   17a98:	mov	ip, r9
   17a9c:	sbcs	r0, r7, lr
   17aa0:	bcc	17aec <__assert_fail@plt+0x60bc>
   17aa4:	ldr	r8, [fp, #-84]	; 0xffffffac
   17aa8:	mov	r9, lr
   17aac:	eor	r1, r4, sl
   17ab0:	mov	r9, ip
   17ab4:	eor	r0, r5, r8
   17ab8:	orrs	r0, r0, r1
   17abc:	bne	17aec <__assert_fail@plt+0x60bc>
   17ac0:	subs	r6, r6, r9
   17ac4:	mov	r0, #0
   17ac8:	mov	ip, r9
   17acc:	sbcs	r7, r7, lr
   17ad0:	movwcc	r0, #1
   17ad4:	cmp	r0, #0
   17ad8:	mvnne	r0, #0
   17adc:	subs	r1, r0, r8
   17ae0:	sbc	r0, r0, sl
   17ae4:	adds	r5, r1, r5
   17ae8:	adc	r4, r0, r4
   17aec:	ldr	r0, [sp, #136]	; 0x88
   17af0:	mov	r1, r7
   17af4:	str	r5, [fp, #-124]	; 0xffffff84
   17af8:	str	r4, [fp, #-128]	; 0xffffff80
   17afc:	str	r6, [fp, #-120]	; 0xffffff88
   17b00:	str	r1, [fp, #-132]	; 0xffffff7c
   17b04:	subs	r7, r0, r5
   17b08:	ldr	r0, [sp, #132]	; 0x84
   17b0c:	sbc	r5, r0, r4
   17b10:	ldr	r4, [sp, #128]	; 0x80
   17b14:	subs	sl, r7, #1
   17b18:	sbc	r0, r5, #0
   17b1c:	subs	lr, r4, r6
   17b20:	ldr	r4, [sp, #124]	; 0x7c
   17b24:	mov	r6, #0
   17b28:	sbcs	r1, r4, r1
   17b2c:	movwcc	r6, #1
   17b30:	cmp	r6, #0
   17b34:	moveq	r0, r5
   17b38:	moveq	sl, r7
   17b3c:	cmn	r0, #1
   17b40:	ble	17b5c <__assert_fail@plt+0x612c>
   17b44:	ldr	r8, [sp, #120]	; 0x78
   17b48:	ldr	r9, [fp, #-88]	; 0xffffffa8
   17b4c:	ldr	r4, [sp, #116]	; 0x74
   17b50:	ldr	r6, [fp, #-84]	; 0xffffffac
   17b54:	mov	r5, ip
   17b58:	b	17b88 <__assert_fail@plt+0x6158>
   17b5c:	ldr	r6, [fp, #-84]	; 0xffffffac
   17b60:	ldr	r4, [sp, #116]	; 0x74
   17b64:	ldr	r8, [sp, #120]	; 0x78
   17b68:	ldr	r9, [fp, #-88]	; 0xffffffa8
   17b6c:	mov	r5, ip
   17b70:	adds	r7, sl, r6
   17b74:	adc	r0, r0, r4
   17b78:	adds	lr, lr, ip
   17b7c:	adcs	r1, r1, r8
   17b80:	adcs	sl, r7, #0
   17b84:	adc	r0, r0, #0
   17b88:	ldr	r7, [fp, #-96]	; 0xffffffa0
   17b8c:	str	r5, [sp, #32]
   17b90:	str	r8, [sp, #36]	; 0x24
   17b94:	str	r3, [sp]
   17b98:	str	r7, [sp, #40]	; 0x28
   17b9c:	ldr	r7, [fp, #-100]	; 0xffffff9c
   17ba0:	str	r7, [sp, #44]	; 0x2c
   17ba4:	ldr	r7, [fp, #-116]	; 0xffffff8c
   17ba8:	stmib	sp, {r7, sl}
   17bac:	str	r0, [sp, #12]
   17bb0:	sub	r0, fp, #72	; 0x48
   17bb4:	str	lr, [sp, #16]
   17bb8:	str	r1, [sp, #20]
   17bbc:	str	r6, [sp, #24]
   17bc0:	str	r4, [sp, #28]
   17bc4:	ldr	r3, [sp, #144]	; 0x90
   17bc8:	bl	19a50 <__assert_fail@plt+0x8020>
   17bcc:	ldr	r2, [fp, #-92]	; 0xffffffa4
   17bd0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   17bd4:	mov	sl, r4
   17bd8:	str	r0, [fp, #-136]	; 0xffffff78
   17bdc:	str	r1, [fp, #-116]	; 0xffffff8c
   17be0:	and	r7, r2, #31
   17be4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17be8:	str	r3, [sp, #144]	; 0x90
   17bec:	cmp	r7, #1
   17bf0:	str	r2, [fp, #-140]	; 0xffffff74
   17bf4:	bne	17c4c <__assert_fail@plt+0x621c>
   17bf8:	stm	sp, {r0, r1, r6, sl}
   17bfc:	sub	r0, fp, #64	; 0x40
   17c00:	str	r5, [sp, #16]
   17c04:	str	r8, [sp, #20]
   17c08:	bl	1a020 <__assert_fail@plt+0x85f0>
   17c0c:	ldr	r9, [fp, #-132]	; 0xffffff7c
   17c10:	ldr	r4, [fp, #-120]	; 0xffffff88
   17c14:	ldr	r6, [fp, #-124]	; 0xffffff84
   17c18:	ldr	ip, [fp, #-128]	; 0xffffff80
   17c1c:	eor	r0, r0, #1
   17c20:	orrs	r0, r0, r1
   17c24:	bne	17d88 <__assert_fail@plt+0x6358>
   17c28:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17c2c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17c30:	mov	r2, r6
   17c34:	mov	r3, ip
   17c38:	orrs	r0, r0, r1
   17c3c:	mov	r1, r9
   17c40:	mov	r0, r4
   17c44:	beq	17c68 <__assert_fail@plt+0x6238>
   17c48:	b	17d88 <__assert_fail@plt+0x6358>
   17c4c:	sub	r3, fp, #112	; 0x70
   17c50:	mov	r1, r9
   17c54:	ldm	r3, {r0, r2, r3}
   17c58:	ldr	r9, [fp, #-132]	; 0xffffff7c
   17c5c:	ldr	r4, [fp, #-120]	; 0xffffff88
   17c60:	ldr	r6, [fp, #-124]	; 0xffffff84
   17c64:	ldr	ip, [fp, #-128]	; 0xffffff80
   17c68:	ldr	r7, [fp, #-92]	; 0xffffffa4
   17c6c:	mov	r5, r0
   17c70:	str	r1, [fp, #-88]	; 0xffffffa8
   17c74:	subs	r7, r7, #1
   17c78:	str	r7, [fp, #-92]	; 0xffffffa4
   17c7c:	bne	17a00 <__assert_fail@plt+0x5fd0>
   17c80:	ldr	r7, [sp, #112]	; 0x70
   17c84:	mov	r2, r6
   17c88:	mov	r3, ip
   17c8c:	mov	r5, r4
   17c90:	str	r6, [sp, #136]	; 0x88
   17c94:	str	ip, [sp, #132]	; 0x84
   17c98:	str	r9, [fp, #-88]	; 0xffffffa8
   17c9c:	str	r4, [sp, #128]	; 0x80
   17ca0:	str	r9, [sp, #124]	; 0x7c
   17ca4:	lsl	r1, r7, #1
   17ca8:	cmp	r7, #0
   17cac:	mov	r0, r7
   17cb0:	str	r7, [fp, #-92]	; 0xffffffa4
   17cb4:	beq	179fc <__assert_fail@plt+0x5fcc>
   17cb8:	mov	r3, ip
   17cbc:	mov	r2, r6
   17cc0:	mov	r5, r4
   17cc4:	mov	ip, r9
   17cc8:	str	r1, [sp, #108]	; 0x6c
   17ccc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17cd0:	ldr	r4, [sp, #140]	; 0x8c
   17cd4:	str	r8, [sp, #36]	; 0x24
   17cd8:	str	r0, [sp, #40]	; 0x28
   17cdc:	ldr	r0, [fp, #-100]	; 0xffffff9c
   17ce0:	str	r4, [sp, #32]
   17ce4:	str	r0, [sp, #44]	; 0x2c
   17ce8:	add	r0, sp, #8
   17cec:	stm	sp, {r5, ip}
   17cf0:	stm	r0, {r2, r3, r5, ip}
   17cf4:	sub	r0, fp, #72	; 0x48
   17cf8:	str	sl, [sp, #28]
   17cfc:	ldr	r6, [fp, #-84]	; 0xffffffac
   17d00:	str	r6, [sp, #24]
   17d04:	bl	19a50 <__assert_fail@plt+0x8020>
   17d08:	ldr	r5, [fp, #8]
   17d0c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17d10:	ldr	r3, [fp, #-68]	; 0xffffffbc
   17d14:	adds	r5, r0, r5
   17d18:	adcs	ip, r1, #0
   17d1c:	adcs	r2, r2, #0
   17d20:	adc	r3, r3, #0
   17d24:	subs	r0, r6, r2
   17d28:	sbcs	r0, sl, r3
   17d2c:	bcc	17d54 <__assert_fail@plt+0x6324>
   17d30:	subs	r0, r5, r4
   17d34:	sbcs	r0, ip, r8
   17d38:	bcc	17d7c <__assert_fail@plt+0x634c>
   17d3c:	ldr	r6, [fp, #-84]	; 0xffffffac
   17d40:	ldr	r4, [sp, #140]	; 0x8c
   17d44:	eor	r1, r3, sl
   17d48:	eor	r0, r2, r6
   17d4c:	orrs	r0, r0, r1
   17d50:	bne	17d7c <__assert_fail@plt+0x634c>
   17d54:	subs	r5, r5, r4
   17d58:	mov	r0, #0
   17d5c:	sbcs	ip, ip, r8
   17d60:	movwcc	r0, #1
   17d64:	cmp	r0, #0
   17d68:	mvnne	r0, #0
   17d6c:	subs	r1, r0, r6
   17d70:	sbc	r0, r0, sl
   17d74:	adds	r2, r1, r2
   17d78:	adc	r3, r0, r3
   17d7c:	subs	r7, r7, #1
   17d80:	bne	17ccc <__assert_fail@plt+0x629c>
   17d84:	b	179bc <__assert_fail@plt+0x5f8c>
   17d88:	ldr	r0, [sp, #136]	; 0x88
   17d8c:	ldr	r2, [fp, #-108]	; 0xffffff94
   17d90:	ldr	r3, [fp, #-104]	; 0xffffff98
   17d94:	ldr	r9, [sp, #140]	; 0x8c
   17d98:	str	r6, [fp, #-40]	; 0xffffffd8
   17d9c:	str	ip, [fp, #-36]	; 0xffffffdc
   17da0:	str	r0, [fp, #-48]	; 0xffffffd0
   17da4:	ldr	r0, [sp, #132]	; 0x84
   17da8:	str	r2, [fp, #-56]	; 0xffffffc8
   17dac:	str	r3, [fp, #-52]	; 0xffffffcc
   17db0:	str	r0, [fp, #-44]	; 0xffffffd4
   17db4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17db8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17dbc:	str	r9, [sp, #32]
   17dc0:	str	r8, [sp, #36]	; 0x24
   17dc4:	str	r0, [sp, #40]	; 0x28
   17dc8:	ldr	r0, [fp, #-100]	; 0xffffff9c
   17dcc:	str	r0, [sp, #44]	; 0x2c
   17dd0:	ldr	r0, [fp, #-112]	; 0xffffff90
   17dd4:	str	r0, [sp]
   17dd8:	stmib	sp, {r1, r2, r3}
   17ddc:	str	r0, [sp, #16]
   17de0:	sub	r0, fp, #72	; 0x48
   17de4:	str	r1, [sp, #20]
   17de8:	str	sl, [sp, #28]
   17dec:	ldr	r6, [fp, #-84]	; 0xffffffac
   17df0:	str	r6, [sp, #24]
   17df4:	bl	19a50 <__assert_fail@plt+0x8020>
   17df8:	ldr	r7, [fp, #8]
   17dfc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17e00:	ldr	r3, [fp, #-68]	; 0xffffffbc
   17e04:	adds	lr, r0, r7
   17e08:	adcs	r5, r1, #0
   17e0c:	adcs	ip, r2, #0
   17e10:	adc	r4, r3, #0
   17e14:	subs	r0, r6, ip
   17e18:	sbcs	r0, sl, r4
   17e1c:	bcc	17e3c <__assert_fail@plt+0x640c>
   17e20:	subs	r0, lr, r9
   17e24:	sbcs	r0, r5, r8
   17e28:	bcc	17e64 <__assert_fail@plt+0x6434>
   17e2c:	eor	r0, ip, r6
   17e30:	eor	r1, r4, sl
   17e34:	orrs	r0, r0, r1
   17e38:	bne	17e64 <__assert_fail@plt+0x6434>
   17e3c:	subs	lr, lr, r9
   17e40:	mov	r0, #0
   17e44:	sbcs	r5, r5, r8
   17e48:	movwcc	r0, #1
   17e4c:	cmp	r0, #0
   17e50:	mvnne	r0, #0
   17e54:	subs	r1, r0, r6
   17e58:	sbc	r0, r0, sl
   17e5c:	adds	ip, r1, ip
   17e60:	adc	r4, r0, r4
   17e64:	ldr	r0, [sp, #136]	; 0x88
   17e68:	ldr	r1, [sp, #124]	; 0x7c
   17e6c:	str	r5, [fp, #-88]	; 0xffffffa8
   17e70:	str	r4, [fp, #-104]	; 0xffffff98
   17e74:	str	ip, [fp, #-108]	; 0xffffff94
   17e78:	str	lr, [fp, #-112]	; 0xffffff90
   17e7c:	subs	r7, r0, ip
   17e80:	ldr	r0, [sp, #132]	; 0x84
   17e84:	sbc	r6, r0, r4
   17e88:	ldr	r0, [sp, #128]	; 0x80
   17e8c:	subs	r2, r7, #1
   17e90:	sbc	r3, r6, #0
   17e94:	subs	r0, r0, lr
   17e98:	sbcs	r1, r1, r5
   17e9c:	mov	r5, #0
   17ea0:	movwcc	r5, #1
   17ea4:	cmp	r5, #0
   17ea8:	moveq	r3, r6
   17eac:	moveq	r2, r7
   17eb0:	cmn	r3, #1
   17eb4:	ble	17ec4 <__assert_fail@plt+0x6494>
   17eb8:	ldr	r8, [sp, #120]	; 0x78
   17ebc:	ldr	r7, [fp, #-84]	; 0xffffffac
   17ec0:	b	17ee4 <__assert_fail@plt+0x64b4>
   17ec4:	ldr	r7, [fp, #-84]	; 0xffffffac
   17ec8:	ldr	r8, [sp, #120]	; 0x78
   17ecc:	adds	r2, r2, r7
   17ed0:	adc	r3, r3, sl
   17ed4:	adds	r0, r0, r9
   17ed8:	adcs	r1, r1, r8
   17edc:	adcs	r2, r2, #0
   17ee0:	adc	r3, r3, #0
   17ee4:	stm	sp, {r0, r1, r7, sl}
   17ee8:	sub	r0, fp, #64	; 0x40
   17eec:	str	r9, [sp, #16]
   17ef0:	str	r8, [sp, #20]
   17ef4:	bl	1a020 <__assert_fail@plt+0x85f0>
   17ef8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17efc:	ldr	r5, [fp, #-60]	; 0xffffffc4
   17f00:	ldr	r3, [fp, #-104]	; 0xffffff98
   17f04:	ldr	r2, [fp, #-108]	; 0xffffff94
   17f08:	mov	r4, r0
   17f0c:	eor	r0, r0, #1
   17f10:	mov	r6, r1
   17f14:	orrs	r0, r0, r1
   17f18:	orrseq	r0, r7, r5
   17f1c:	beq	17db4 <__assert_fail@plt+0x6384>
   17f20:	orrs	r0, r7, r5
   17f24:	str	r2, [fp, #-56]	; 0xffffffc8
   17f28:	str	r3, [fp, #-52]	; 0xffffffcc
   17f2c:	str	r6, [sp, #116]	; 0x74
   17f30:	bne	1843c <__assert_fail@plt+0x6a0c>
   17f34:	movw	r1, #15726	; 0x3d6e
   17f38:	ubfx	r0, r4, #1, #7
   17f3c:	str	r4, [fp, #-96]	; 0xffffffa0
   17f40:	movt	r1, #2
   17f44:	ldrb	r0, [r1, r0]
   17f48:	umull	r1, r2, r4, r0
   17f4c:	rsbs	r1, r1, #2
   17f50:	mla	r2, r6, r0, r2
   17f54:	umull	r1, r3, r1, r0
   17f58:	rsc	r2, r2, #0
   17f5c:	mla	r2, r2, r0, r3
   17f60:	umull	r0, r3, r1, r4
   17f64:	mla	r3, r1, r6, r3
   17f68:	rsbs	r7, r0, #2
   17f6c:	ldr	r6, [sp, #116]	; 0x74
   17f70:	mla	r3, r2, r4, r3
   17f74:	rsc	r0, r3, #0
   17f78:	str	r0, [fp, #-100]	; 0xffffff9c
   17f7c:	umull	r5, r0, r1, r7
   17f80:	str	r0, [sp, #104]	; 0x68
   17f84:	umull	r0, r8, r5, r4
   17f88:	mov	r4, r9
   17f8c:	rsbs	r0, r0, #2
   17f90:	mla	r8, r5, r6, r8
   17f94:	ldr	r6, [fp, #-100]	; 0xffffff9c
   17f98:	umull	lr, r3, r5, r0
   17f9c:	str	r3, [sp, #108]	; 0x6c
   17fa0:	ldr	r3, [sp, #120]	; 0x78
   17fa4:	umull	r9, ip, lr, r9
   17fa8:	mla	ip, lr, r3, ip
   17fac:	ldr	r3, [sp, #104]	; 0x68
   17fb0:	mla	r1, r1, r6, r3
   17fb4:	ldr	r3, [sp, #108]	; 0x6c
   17fb8:	ldr	r6, [fp, #-84]	; 0xffffffac
   17fbc:	mla	r1, r2, r7, r1
   17fc0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17fc4:	mla	r2, r1, r2, r8
   17fc8:	rsc	r2, r2, #0
   17fcc:	mla	r2, r5, r2, r3
   17fd0:	mla	r5, r1, r0, r2
   17fd4:	ldr	r1, [sp, #116]	; 0x74
   17fd8:	mov	r0, #0
   17fdc:	mla	r8, r5, r4, ip
   17fe0:	ldr	r4, [fp, #-96]	; 0xffffffa0
   17fe4:	str	r0, [fp, #-100]	; 0xffffff9c
   17fe8:	subs	r0, r6, r4
   17fec:	sbcs	r0, sl, r1
   17ff0:	mov	r0, #0
   17ff4:	str	r0, [sp, #140]	; 0x8c
   17ff8:	bcc	18058 <__assert_fail@plt+0x6628>
   17ffc:	umull	r0, r2, r9, r1
   18000:	mov	r3, r9
   18004:	umlal	r0, r2, r8, r4
   18008:	umull	r3, r7, r9, r4
   1800c:	adds	r0, r0, r7
   18010:	umull	r3, r7, r8, r4
   18014:	adc	r2, r2, #0
   18018:	subs	r0, r0, r3
   1801c:	sbcs	r0, r2, r7
   18020:	umull	r3, r7, r8, r1
   18024:	mov	r0, #0
   18028:	movwcc	r0, #1
   1802c:	cmp	r0, #0
   18030:	addne	r7, r7, #1
   18034:	subs	r0, r6, r2
   18038:	sbc	r2, sl, #0
   1803c:	subs	r0, r0, r3
   18040:	umull	r6, r3, r0, lr
   18044:	sbc	r2, r2, r7
   18048:	mla	r0, r0, r5, r3
   1804c:	str	r6, [fp, #-100]	; 0xffffff9c
   18050:	mla	r0, r2, lr, r0
   18054:	str	r0, [sp, #140]	; 0x8c
   18058:	mov	r0, r4
   1805c:	mov	r5, r1
   18060:	bl	188fc <__assert_fail@plt+0x6ecc>
   18064:	cmp	r0, #0
   18068:	beq	182e4 <__assert_fail@plt+0x68b4>
   1806c:	ldr	r7, [fp, #12]
   18070:	ldrb	lr, [r7, #250]	; 0xfa
   18074:	sub	r1, lr, #1
   18078:	cmp	lr, #0
   1807c:	beq	18314 <__assert_fail@plt+0x68e4>
   18080:	ldr	r0, [sp, #116]	; 0x74
   18084:	mov	r2, #8
   18088:	mov	sl, r8
   1808c:	add	r6, lr, #223	; 0xdf
   18090:	add	r3, r2, lr, lsl #3
   18094:	mov	ip, r0
   18098:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1809c:	mov	r5, r7
   180a0:	ldr	r2, [r5, r3]!
   180a4:	ldr	r5, [r5, #4]
   180a8:	subs	r4, r0, r2
   180ac:	sbcs	r4, ip, r5
   180b0:	bcs	1832c <__assert_fail@plt+0x68fc>
   180b4:	sub	r2, r6, #1
   180b8:	sub	r6, r6, #224	; 0xe0
   180bc:	sub	r3, r3, #8
   180c0:	cmp	r6, #0
   180c4:	mov	r6, r2
   180c8:	bgt	1809c <__assert_fail@plt+0x666c>
   180cc:	sub	r2, r2, #224	; 0xe0
   180d0:	ldr	r4, [fp, #-124]	; 0xffffff84
   180d4:	ldr	r5, [fp, #-88]	; 0xffffffa8
   180d8:	cmp	r1, r2
   180dc:	ble	18364 <__assert_fail@plt+0x6934>
   180e0:	mvn	r3, r2
   180e4:	add	r3, r3, lr
   180e8:	cmp	r3, #1
   180ec:	bls	18384 <__assert_fail@plt+0x6954>
   180f0:	str	r3, [sp, #120]	; 0x78
   180f4:	sub	r3, lr, #2
   180f8:	mov	r6, #8
   180fc:	sub	r3, r3, r2
   18100:	umull	r4, r5, r3, r6
   18104:	add	r6, r7, lr, lsl #3
   18108:	cmp	r5, #0
   1810c:	add	r6, r6, #16
   18110:	movwne	r5, #1
   18114:	cmp	r4, r6
   18118:	bhi	18384 <__assert_fail@plt+0x6954>
   1811c:	cmp	r5, #0
   18120:	bne	18384 <__assert_fail@plt+0x6954>
   18124:	str	r6, [sp, #108]	; 0x6c
   18128:	add	r6, r7, lr
   1812c:	add	ip, r6, #224	; 0xe0
   18130:	cmp	r3, ip
   18134:	ldrls	r6, [sp, #96]	; 0x60
   18138:	addls	r6, r6, lr, lsl #3
   1813c:	cmpls	r4, r6
   18140:	bhi	18378 <__assert_fail@plt+0x6948>
   18144:	cmp	r5, #0
   18148:	bne	18378 <__assert_fail@plt+0x6948>
   1814c:	ldr	r4, [sp, #92]	; 0x5c
   18150:	add	r5, r4, lr
   18154:	cmp	r3, r5
   18158:	bhi	18378 <__assert_fail@plt+0x6948>
   1815c:	ldr	r3, [sp, #80]	; 0x50
   18160:	ldr	r7, [sp, #84]	; 0x54
   18164:	mov	r4, #0
   18168:	str	r9, [fp, #-84]	; 0xffffffac
   1816c:	add	r8, r3, r2
   18170:	ldr	r3, [sp, #88]	; 0x58
   18174:	add	r9, r7, r2, lsl #3
   18178:	add	r7, r7, lr, lsl #3
   1817c:	add	r0, r3, lr
   18180:	add	r3, r3, r2
   18184:	cmp	r3, r0
   18188:	str	r0, [sp, #104]	; 0x68
   1818c:	movwcc	r4, #1
   18190:	cmp	r8, ip
   18194:	str	r4, [sp, #56]	; 0x38
   18198:	mov	r4, #0
   1819c:	movwcc	r4, #1
   181a0:	cmp	r0, r9
   181a4:	mov	r0, #0
   181a8:	str	r4, [sp, #52]	; 0x34
   181ac:	mov	r4, #0
   181b0:	movwhi	r4, #1
   181b4:	str	r4, [sp, #64]	; 0x40
   181b8:	ldr	r4, [sp, #108]	; 0x6c
   181bc:	cmp	r8, r4
   181c0:	movwcc	r0, #1
   181c4:	cmp	r3, r7
   181c8:	ldr	r3, [sp, #76]	; 0x4c
   181cc:	str	r0, [sp, #60]	; 0x3c
   181d0:	mov	r0, #0
   181d4:	movwcc	r0, #1
   181d8:	str	r0, [sp, #72]	; 0x48
   181dc:	add	r0, r3, r2, lsl #3
   181e0:	mov	r3, #0
   181e4:	cmp	ip, r0
   181e8:	mov	ip, #0
   181ec:	movwhi	r3, #1
   181f0:	cmp	r9, r7
   181f4:	mov	r9, #0
   181f8:	str	r3, [sp, #68]	; 0x44
   181fc:	ldr	r3, [sp, #104]	; 0x68
   18200:	movwcc	r9, #1
   18204:	cmp	r0, r4
   18208:	mov	r4, #0
   1820c:	movwcc	ip, #1
   18210:	cmp	r8, r7
   18214:	movwcc	r4, #1
   18218:	cmp	r3, r0
   1821c:	mov	r3, #0
   18220:	movwhi	r3, #1
   18224:	tst	r3, r4
   18228:	bne	18370 <__assert_fail@plt+0x6940>
   1822c:	ands	r3, ip, r9
   18230:	ldr	r7, [fp, #12]
   18234:	ldr	r9, [fp, #-84]	; 0xffffffac
   18238:	bne	18378 <__assert_fail@plt+0x6948>
   1823c:	ldr	r0, [sp, #72]	; 0x48
   18240:	ldr	r3, [sp, #68]	; 0x44
   18244:	ands	r3, r3, r0
   18248:	ldr	r0, [sp, #116]	; 0x74
   1824c:	mov	ip, r0
   18250:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18254:	bne	18384 <__assert_fail@plt+0x6954>
   18258:	ldr	r3, [sp, #64]	; 0x40
   1825c:	ldr	r4, [sp, #60]	; 0x3c
   18260:	ands	r3, r4, r3
   18264:	ldreq	r3, [sp, #56]	; 0x38
   18268:	ldreq	r4, [sp, #52]	; 0x34
   1826c:	andseq	r3, r4, r3
   18270:	bne	18384 <__assert_fail@plt+0x6954>
   18274:	ldr	r0, [sp, #120]	; 0x78
   18278:	mvn	r8, #15
   1827c:	bic	ip, r0, #1
   18280:	sub	r0, fp, #76	; 0x4c
   18284:	sub	r1, r1, ip
   18288:	mov	r3, ip
   1828c:	sub	r4, r6, #8
   18290:	subs	r3, r3, #2
   18294:	vld1.64	{d16-d17}, [r4]
   18298:	vst1.64	{d16-d17}, [r6], r8
   1829c:	ldrh	r4, [r5, #-1]
   182a0:	strh	r4, [fp, #-76]	; 0xffffffb4
   182a4:	vld1.16	{d16[0]}, [r0 :16]
   182a8:	vmovl.u8	q8, d16
   182ac:	vmovl.u16	q8, d16
   182b0:	vmov.32	r4, d16[1]
   182b4:	strb	r4, [r5, #1]
   182b8:	vmov.32	r4, d16[0]
   182bc:	strb	r4, [r5]
   182c0:	sub	r5, r5, #2
   182c4:	bne	1828c <__assert_fail@plt+0x685c>
   182c8:	ldr	r0, [sp, #120]	; 0x78
   182cc:	cmp	r0, ip
   182d0:	ldr	r0, [sp, #116]	; 0x74
   182d4:	mov	ip, r0
   182d8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   182dc:	bne	18384 <__assert_fail@plt+0x6954>
   182e0:	b	183b0 <__assert_fail@plt+0x6980>
   182e4:	ldr	r2, [sp, #100]	; 0x64
   182e8:	ldr	r3, [fp, #12]
   182ec:	mov	r0, r4
   182f0:	mov	r1, r5
   182f4:	bl	1649c <__assert_fail@plt+0x4a6c>
   182f8:	ldr	r4, [fp, #-124]	; 0xffffff84
   182fc:	ldr	r5, [fp, #-88]	; 0xffffffa8
   18300:	ldr	r7, [fp, #-100]	; 0xffffff9c
   18304:	ldr	sl, [sp, #140]	; 0x8c
   18308:	orrs	r0, r7, sl
   1830c:	bne	183f4 <__assert_fail@plt+0x69c4>
   18310:	b	185c4 <__assert_fail@plt+0x6b94>
   18314:	ldr	r0, [sp, #116]	; 0x74
   18318:	ldr	r4, [fp, #-124]	; 0xffffff84
   1831c:	ldr	r5, [fp, #-88]	; 0xffffffa8
   18320:	mov	ip, r0
   18324:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18328:	b	183c0 <__assert_fail@plt+0x6990>
   1832c:	eor	r2, r2, r0
   18330:	eor	r3, r5, ip
   18334:	orrs	r2, r2, r3
   18338:	bne	18350 <__assert_fail@plt+0x6920>
   1833c:	ldrb	r0, [r7, r6]
   18340:	mov	r8, sl
   18344:	add	r0, r0, #1
   18348:	strb	r0, [r7, r6]
   1834c:	b	182f8 <__assert_fail@plt+0x68c8>
   18350:	sub	r2, r6, #224	; 0xe0
   18354:	ldr	r4, [fp, #-124]	; 0xffffff84
   18358:	ldr	r5, [fp, #-88]	; 0xffffffa8
   1835c:	cmp	r1, r2
   18360:	bgt	180e0 <__assert_fail@plt+0x66b0>
   18364:	mov	r8, sl
   18368:	mov	r1, r2
   1836c:	b	183c0 <__assert_fail@plt+0x6990>
   18370:	ldr	r7, [fp, #12]
   18374:	ldr	r9, [fp, #-84]	; 0xffffffac
   18378:	ldr	r0, [sp, #116]	; 0x74
   1837c:	mov	ip, r0
   18380:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18384:	lsl	r3, r1, #3
   18388:	add	r6, r7, r3
   1838c:	sub	r3, r3, #8
   18390:	ldrd	r4, [r6, #16]
   18394:	strd	r4, [r6, #24]
   18398:	add	r6, r7, r1
   1839c:	sub	r1, r1, #1
   183a0:	ldrb	r5, [r6, #224]	; 0xe0
   183a4:	cmp	r1, r2
   183a8:	strb	r5, [r6, #225]	; 0xe1
   183ac:	bgt	18388 <__assert_fail@plt+0x6958>
   183b0:	ldr	r4, [fp, #-124]	; 0xffffff84
   183b4:	ldr	r5, [fp, #-88]	; 0xffffffa8
   183b8:	mov	r1, r2
   183bc:	mov	r8, sl
   183c0:	add	r1, r1, #1
   183c4:	add	r2, r7, r1, lsl #3
   183c8:	add	r1, r7, r1
   183cc:	str	r0, [r2, #16]
   183d0:	str	ip, [r2, #20]
   183d4:	mov	r2, #1
   183d8:	add	r0, lr, #1
   183dc:	strb	r2, [r1, #224]	; 0xe0
   183e0:	strb	r0, [r7, #250]	; 0xfa
   183e4:	ldr	r7, [fp, #-100]	; 0xffffff9c
   183e8:	ldr	sl, [sp, #140]	; 0x8c
   183ec:	orrs	r0, r7, sl
   183f0:	beq	185c4 <__assert_fail@plt+0x6b94>
   183f4:	mov	r0, r7
   183f8:	mov	r1, sl
   183fc:	mov	r2, r9
   18400:	mov	r3, r8
   18404:	bl	156b0 <__assert_fail@plt+0x3c80>
   18408:	cmp	r0, #0
   1840c:	beq	17848 <__assert_fail@plt+0x5e18>
   18410:	ldr	r3, [fp, #12]
   18414:	mov	r0, r3
   18418:	ldr	r1, [r0, #8]!
   1841c:	ldr	r2, [r0, #4]
   18420:	orrs	r1, r1, r2
   18424:	streq	r9, [r3]
   18428:	streq	r8, [r3, #4]
   1842c:	stmeq	r0, {r7, sl}
   18430:	subeq	sp, fp, #28
   18434:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18438:	b	18550 <__assert_fail@plt+0x6b20>
   1843c:	ldr	r2, [fp, #-84]	; 0xffffffac
   18440:	eor	r0, r9, r4
   18444:	eor	r1, r8, r6
   18448:	orrs	r0, r0, r1
   1844c:	eoreq	r1, sl, r5
   18450:	eoreq	r0, r2, r7
   18454:	orrseq	r0, r0, r1
   18458:	beq	18570 <__assert_fail@plt+0x6b40>
   1845c:	movw	r1, #15726	; 0x3d6e
   18460:	ubfx	r0, r4, #1, #7
   18464:	mov	sl, r4
   18468:	movt	r1, #2
   1846c:	ldrb	r0, [r1, r0]
   18470:	umull	r1, r2, r4, r0
   18474:	rsbs	r1, r1, #2
   18478:	mla	r2, r6, r0, r2
   1847c:	umull	r1, r3, r1, r0
   18480:	rsc	r2, r2, #0
   18484:	mla	r0, r2, r0, r3
   18488:	umull	r2, r3, r1, r4
   1848c:	mla	r3, r1, r6, r3
   18490:	rsbs	ip, r2, #2
   18494:	str	r0, [fp, #-88]	; 0xffffffa8
   18498:	ldr	r2, [sp, #120]	; 0x78
   1849c:	mla	r3, r0, r4, r3
   184a0:	rsc	r0, r3, #0
   184a4:	str	r0, [fp, #-92]	; 0xffffffa4
   184a8:	umull	r6, r0, r1, ip
   184ac:	str	r0, [fp, #-100]	; 0xffffff9c
   184b0:	umull	r3, r0, r6, r4
   184b4:	rsbs	r8, r3, #2
   184b8:	str	r0, [fp, #-104]	; 0xffffff98
   184bc:	ldr	r3, [sp, #116]	; 0x74
   184c0:	umull	r4, r0, r6, r8
   184c4:	str	r0, [fp, #-96]	; 0xffffffa0
   184c8:	umull	lr, r0, r4, r9
   184cc:	str	lr, [fp, #-84]	; 0xffffffac
   184d0:	mla	lr, r4, r2, r0
   184d4:	ldr	r0, [fp, #-104]	; 0xffffff98
   184d8:	ldr	r4, [fp, #-100]	; 0xffffff9c
   184dc:	mla	r2, r6, r3, r0
   184e0:	ldr	r0, [fp, #-92]	; 0xffffffa4
   184e4:	mla	r1, r1, r0, r4
   184e8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   184ec:	mla	r1, r0, ip, r1
   184f0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   184f4:	mla	r2, r1, sl, r2
   184f8:	rsc	r2, r2, #0
   184fc:	mla	r2, r6, r2, r0
   18500:	mov	r0, r7
   18504:	mov	r6, r3
   18508:	mla	r1, r1, r8, r2
   1850c:	mov	r2, sl
   18510:	mla	r8, r1, r9, lr
   18514:	mov	r1, r5
   18518:	bl	156b0 <__assert_fail@plt+0x3c80>
   1851c:	cmp	r0, #0
   18520:	beq	1859c <__assert_fail@plt+0x6b6c>
   18524:	ldr	r3, [fp, #12]
   18528:	mov	r0, r3
   1852c:	ldr	r1, [r0, #8]!
   18530:	ldr	r2, [r0, #4]
   18534:	orrs	r1, r1, r2
   18538:	bne	18550 <__assert_fail@plt+0x6b20>
   1853c:	str	sl, [r3]
   18540:	str	r6, [r3, #4]
   18544:	str	r7, [r0]
   18548:	str	r5, [r0, #4]
   1854c:	b	185c0 <__assert_fail@plt+0x6b90>
   18550:	movw	r0, #3015	; 0xbc7
   18554:	movw	r1, #2704	; 0xa90
   18558:	movw	r3, #3039	; 0xbdf
   1855c:	movw	r2, #558	; 0x22e
   18560:	movt	r0, #2
   18564:	movt	r1, #2
   18568:	movt	r3, #2
   1856c:	bl	11a30 <__assert_fail@plt>
   18570:	ldr	r0, [sp, #100]	; 0x64
   18574:	mov	r1, sl
   18578:	mov	r3, r8
   1857c:	str	r0, [sp]
   18580:	ldr	r0, [fp, #12]
   18584:	str	r0, [sp, #4]
   18588:	mov	r0, r2
   1858c:	mov	r2, r9
   18590:	bl	175a8 <__assert_fail@plt+0x5b78>
   18594:	sub	sp, fp, #28
   18598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1859c:	ldr	r0, [sp, #100]	; 0x64
   185a0:	mov	r1, r5
   185a4:	mov	r2, sl
   185a8:	mov	r3, r6
   185ac:	str	r0, [sp]
   185b0:	ldr	r0, [fp, #12]
   185b4:	str	r0, [sp, #4]
   185b8:	mov	r0, r7
   185bc:	bl	175a8 <__assert_fail@plt+0x5b78>
   185c0:	ldr	r9, [fp, #-84]	; 0xffffffac
   185c4:	mov	r0, r9
   185c8:	mov	r1, r8
   185cc:	bl	188fc <__assert_fail@plt+0x6ecc>
   185d0:	cmp	r0, #0
   185d4:	beq	1883c <__assert_fail@plt+0x6e0c>
   185d8:	ldr	ip, [fp, #12]
   185dc:	ldrb	r0, [ip, #250]	; 0xfa
   185e0:	sub	r1, r0, #1
   185e4:	cmp	r0, #0
   185e8:	beq	188d0 <__assert_fail@plt+0x6ea0>
   185ec:	mov	r2, #8
   185f0:	mov	sl, r9
   185f4:	mov	r9, r8
   185f8:	add	r7, r0, #223	; 0xdf
   185fc:	add	r3, r2, r0, lsl #3
   18600:	mov	r6, ip
   18604:	ldr	r2, [r6, r3]!
   18608:	ldr	r6, [r6, #4]
   1860c:	subs	r5, sl, r2
   18610:	sbcs	r5, r9, r6
   18614:	bcs	18858 <__assert_fail@plt+0x6e28>
   18618:	sub	r2, r7, #1
   1861c:	sub	r7, r7, #224	; 0xe0
   18620:	sub	r3, r3, #8
   18624:	cmp	r7, #0
   18628:	mov	r7, r2
   1862c:	bgt	18600 <__assert_fail@plt+0x6bd0>
   18630:	sub	r2, r2, #224	; 0xe0
   18634:	mov	r8, r9
   18638:	cmp	r1, r2
   1863c:	ble	1888c <__assert_fail@plt+0x6e5c>
   18640:	mvn	r3, r2
   18644:	add	r5, r3, r0
   18648:	cmp	r5, #1
   1864c:	bls	18898 <__assert_fail@plt+0x6e68>
   18650:	sub	r3, r0, #2
   18654:	add	ip, ip, r0, lsl #3
   18658:	sub	r4, r3, r2
   1865c:	mov	r3, #8
   18660:	add	lr, ip, #16
   18664:	umull	r8, r6, r4, r3
   18668:	cmp	r6, #0
   1866c:	movwne	r6, #1
   18670:	cmp	r8, lr
   18674:	bhi	18894 <__assert_fail@plt+0x6e64>
   18678:	cmp	r6, #0
   1867c:	bne	18894 <__assert_fail@plt+0x6e64>
   18680:	ldr	r3, [fp, #12]
   18684:	add	r3, r3, r0
   18688:	add	r7, r3, #224	; 0xe0
   1868c:	cmp	r4, r7
   18690:	bhi	18894 <__assert_fail@plt+0x6e64>
   18694:	add	r7, ip, #8
   18698:	cmp	r8, r7
   1869c:	bhi	18894 <__assert_fail@plt+0x6e64>
   186a0:	cmp	r6, #0
   186a4:	bne	18894 <__assert_fail@plt+0x6e64>
   186a8:	add	r6, r3, #223	; 0xdf
   186ac:	cmp	r4, r6
   186b0:	bhi	18894 <__assert_fail@plt+0x6e64>
   186b4:	ldr	r3, [fp, #12]
   186b8:	str	r5, [fp, #-120]	; 0xffffff88
   186bc:	add	r5, ip, #24
   186c0:	str	r5, [fp, #-84]	; 0xffffffac
   186c4:	mov	r8, r3
   186c8:	add	r3, r3, r2, lsl #3
   186cc:	add	r4, r3, #32
   186d0:	add	r3, r3, #24
   186d4:	cmp	r3, r5
   186d8:	mov	r5, #0
   186dc:	str	r4, [fp, #-88]	; 0xffffffa8
   186e0:	str	r3, [fp, #-92]	; 0xffffffa4
   186e4:	mov	r3, #0
   186e8:	movwcc	r5, #1
   186ec:	cmp	r4, lr
   186f0:	add	r4, r8, #224	; 0xe0
   186f4:	str	r5, [fp, #-100]	; 0xffffff9c
   186f8:	mov	r5, #0
   186fc:	movwcc	r5, #1
   18700:	str	r5, [fp, #-104]	; 0xffffff98
   18704:	add	r5, r4, r2
   18708:	add	r4, r4, r0
   1870c:	add	r8, r5, #2
   18710:	add	ip, r4, #1
   18714:	add	r5, r5, #1
   18718:	cmp	r5, ip
   1871c:	str	ip, [fp, #-96]	; 0xffffffa0
   18720:	movwcc	r3, #1
   18724:	cmp	r8, r4
   18728:	str	r3, [fp, #-112]	; 0xffffff90
   1872c:	mov	r3, #0
   18730:	movwcc	r3, #1
   18734:	str	r3, [fp, #-116]	; 0xffffff8c
   18738:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1873c:	cmp	ip, r3
   18740:	mov	r3, #0
   18744:	ldr	ip, [fp, #-88]	; 0xffffffa8
   18748:	movwhi	r3, #1
   1874c:	cmp	r8, lr
   18750:	mov	lr, #0
   18754:	str	r3, [fp, #-92]	; 0xffffffa4
   18758:	mov	r3, #0
   1875c:	movwcc	r3, #1
   18760:	str	r3, [fp, #-108]	; 0xffffff94
   18764:	ldr	r3, [fp, #-84]	; 0xffffffac
   18768:	cmp	r4, ip
   1876c:	mov	r4, #0
   18770:	movwhi	lr, #1
   18774:	cmp	r5, r3
   18778:	mov	r5, #0
   1877c:	movwcc	r4, #1
   18780:	cmp	r8, r3
   18784:	ldr	r3, [fp, #-96]	; 0xffffffa0
   18788:	movwcc	r5, #1
   1878c:	cmp	r3, ip
   18790:	mov	r3, #0
   18794:	movwhi	r3, #1
   18798:	tst	r3, r5
   1879c:	bne	18894 <__assert_fail@plt+0x6e64>
   187a0:	ldr	r5, [fp, #-100]	; 0xffffff9c
   187a4:	ldr	r3, [fp, #-104]	; 0xffffff98
   187a8:	ands	r5, r3, r5
   187ac:	bne	18894 <__assert_fail@plt+0x6e64>
   187b0:	ands	r3, lr, r4
   187b4:	bne	18894 <__assert_fail@plt+0x6e64>
   187b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   187bc:	ldr	r5, [fp, #-108]	; 0xffffff94
   187c0:	ands	r3, r5, r3
   187c4:	bne	18894 <__assert_fail@plt+0x6e64>
   187c8:	ldr	r3, [fp, #-112]	; 0xffffff90
   187cc:	ldr	r5, [fp, #-116]	; 0xffffff8c
   187d0:	ands	r3, r5, r3
   187d4:	bne	18894 <__assert_fail@plt+0x6e64>
   187d8:	ldr	r8, [fp, #-120]	; 0xffffff88
   187dc:	mvn	lr, #15
   187e0:	sub	r4, fp, #80	; 0x50
   187e4:	bic	ip, r8, #1
   187e8:	sub	r1, r1, ip
   187ec:	mov	r3, ip
   187f0:	sub	r5, r7, #8
   187f4:	subs	r3, r3, #2
   187f8:	vld1.64	{d16-d17}, [r5]
   187fc:	vst1.64	{d16-d17}, [r7], lr
   18800:	ldrh	r5, [r6, #-1]
   18804:	strh	r5, [fp, #-80]	; 0xffffffb0
   18808:	vld1.16	{d16[0]}, [r4 :16]
   1880c:	vmovl.u8	q8, d16
   18810:	vmovl.u16	q8, d16
   18814:	vmov.32	r5, d16[1]
   18818:	strb	r5, [r6, #1]
   1881c:	vmov.32	r5, d16[0]
   18820:	strb	r5, [r6]
   18824:	sub	r6, r6, #2
   18828:	bne	187f0 <__assert_fail@plt+0x6dc0>
   1882c:	cmp	r8, ip
   18830:	ldr	ip, [fp, #12]
   18834:	bne	18898 <__assert_fail@plt+0x6e68>
   18838:	b	188c4 <__assert_fail@plt+0x6e94>
   1883c:	ldr	r2, [fp, #8]
   18840:	ldr	r3, [fp, #12]
   18844:	mov	r0, r9
   18848:	mov	r1, r8
   1884c:	bl	1649c <__assert_fail@plt+0x4a6c>
   18850:	sub	sp, fp, #28
   18854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18858:	eor	r2, r2, sl
   1885c:	eor	r3, r6, r9
   18860:	orrs	r2, r2, r3
   18864:	bne	1887c <__assert_fail@plt+0x6e4c>
   18868:	ldrb	r0, [ip, r7]
   1886c:	add	r0, r0, #1
   18870:	strb	r0, [ip, r7]
   18874:	sub	sp, fp, #28
   18878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1887c:	mov	r8, r9
   18880:	sub	r2, r7, #224	; 0xe0
   18884:	cmp	r1, r2
   18888:	bgt	18640 <__assert_fail@plt+0x6c10>
   1888c:	mov	r1, r2
   18890:	b	188cc <__assert_fail@plt+0x6e9c>
   18894:	ldr	ip, [fp, #12]
   18898:	lsl	r3, r1, #3
   1889c:	add	r7, ip, r3
   188a0:	sub	r3, r3, #8
   188a4:	ldrd	r4, [r7, #16]
   188a8:	strd	r4, [r7, #24]
   188ac:	add	r7, ip, r1
   188b0:	sub	r1, r1, #1
   188b4:	ldrb	r6, [r7, #224]	; 0xe0
   188b8:	cmp	r1, r2
   188bc:	strb	r6, [r7, #225]	; 0xe1
   188c0:	bgt	1889c <__assert_fail@plt+0x6e6c>
   188c4:	mov	r1, r2
   188c8:	mov	r8, r9
   188cc:	mov	r9, sl
   188d0:	add	r1, r1, #1
   188d4:	add	r0, r0, #1
   188d8:	add	r2, ip, r1, lsl #3
   188dc:	add	r1, ip, r1
   188e0:	str	r9, [r2, #16]
   188e4:	str	r8, [r2, #20]
   188e8:	mov	r2, #1
   188ec:	strb	r2, [r1, #224]	; 0xe0
   188f0:	strb	r0, [ip, #250]	; 0xfa
   188f4:	sub	sp, fp, #28
   188f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18900:	add	fp, sp, #28
   18904:	sub	sp, sp, #380	; 0x17c
   18908:	mov	sl, r1
   1890c:	str	r0, [sp, #116]	; 0x74
   18910:	subs	r0, r0, #2
   18914:	mov	r1, #0
   18918:	sbcs	r0, sl, #0
   1891c:	bcc	1893c <__assert_fail@plt+0x6f0c>
   18920:	ldr	r2, [sp, #116]	; 0x74
   18924:	movw	r0, #60793	; 0xed79
   18928:	mov	r1, #1
   1892c:	movt	r0, #381	; 0x17d
   18930:	subs	r0, r2, r0
   18934:	sbcs	r0, sl, #0
   18938:	bcs	18948 <__assert_fail@plt+0x6f18>
   1893c:	mov	r0, r1
   18940:	sub	sp, fp, #28
   18944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18948:	ldr	r0, [sp, #116]	; 0x74
   1894c:	mov	r3, #0
   18950:	subs	r0, r0, #1
   18954:	sbc	r1, sl, #0
   18958:	tst	r0, #1
   1895c:	mov	r2, r0
   18960:	str	r0, [sp, #48]	; 0x30
   18964:	str	r1, [sp, #44]	; 0x2c
   18968:	bne	18990 <__assert_fail@plt+0x6f60>
   1896c:	ldr	r0, [sp, #48]	; 0x30
   18970:	ldr	r1, [sp, #44]	; 0x2c
   18974:	mov	r3, #0
   18978:	lsrs	r1, r1, #1
   1897c:	add	r3, r3, #1
   18980:	rrx	r2, r0
   18984:	tst	r0, #2
   18988:	mov	r0, r2
   1898c:	beq	18978 <__assert_fail@plt+0x6f48>
   18990:	ldr	r4, [sp, #116]	; 0x74
   18994:	str	r1, [sp, #12]
   18998:	movw	r1, #15726	; 0x3d6e
   1899c:	str	r3, [sp, #28]
   189a0:	str	r2, [sp, #8]
   189a4:	movt	r1, #2
   189a8:	ubfx	r0, r4, #1, #7
   189ac:	ldrb	r1, [r1, r0]
   189b0:	umull	r0, r2, r1, r4
   189b4:	rsbs	r0, r0, #2
   189b8:	mla	r2, r1, sl, r2
   189bc:	umull	r3, r7, r0, r1
   189c0:	rsc	lr, r2, #0
   189c4:	umull	r0, r6, r3, r4
   189c8:	mla	r1, lr, r1, r7
   189cc:	mla	r7, r3, sl, r6
   189d0:	rsbs	r5, r0, #2
   189d4:	mla	r7, r1, r4, r7
   189d8:	umull	r0, r8, r3, r5
   189dc:	rsc	r7, r7, #0
   189e0:	umull	ip, r2, r0, r4
   189e4:	mla	r3, r3, r7, r8
   189e8:	mla	r2, r0, sl, r2
   189ec:	mla	r1, r1, r5, r3
   189f0:	mla	r3, r1, r4, r2
   189f4:	rsbs	r2, ip, #2
   189f8:	rsc	r3, r3, #0
   189fc:	subs	r7, r4, #2
   18a00:	sbcs	r7, sl, #0
   18a04:	bcc	19774 <__assert_fail@plt+0x7d44>
   18a08:	umull	r6, r7, r0, r2
   18a0c:	mov	ip, #0
   18a10:	mov	lr, #0
   18a14:	mov	r4, #0
   18a18:	mla	r0, r0, r3, r7
   18a1c:	ldr	r3, [sp, #116]	; 0x74
   18a20:	mov	r7, sl
   18a24:	str	r6, [sp, #92]	; 0x5c
   18a28:	mla	r9, r1, r2, r0
   18a2c:	mov	r0, #0
   18a30:	mov	r2, #1
   18a34:	mvn	r1, #63	; 0x3f
   18a38:	str	r0, [sp, #68]	; 0x44
   18a3c:	mov	r0, #0
   18a40:	str	r0, [sp, #64]	; 0x40
   18a44:	lsrs	r6, lr, #1
   18a48:	rrx	ip, ip
   18a4c:	lsrs	r7, r7, #1
   18a50:	orr	lr, r6, r3, lsl #31
   18a54:	rrx	r3, r3
   18a58:	subs	r5, r3, r2
   18a5c:	sbcs	r5, r7, r4
   18a60:	bcc	18a88 <__assert_fail@plt+0x7058>
   18a64:	eor	r5, r2, r3
   18a68:	eor	r0, r4, r7
   18a6c:	orrs	r0, r5, r0
   18a70:	bne	18ac4 <__assert_fail@plt+0x7094>
   18a74:	ldr	r0, [sp, #68]	; 0x44
   18a78:	subs	r0, r0, ip
   18a7c:	ldr	r0, [sp, #64]	; 0x40
   18a80:	sbcs	r0, r0, lr
   18a84:	bcc	18ac4 <__assert_fail@plt+0x7094>
   18a88:	ldr	r6, [sp, #68]	; 0x44
   18a8c:	subs	r0, r2, r3
   18a90:	sbc	r5, r4, r7
   18a94:	subs	r2, r0, #1
   18a98:	sbc	r4, r5, #0
   18a9c:	subs	r6, r6, ip
   18aa0:	str	r6, [sp, #68]	; 0x44
   18aa4:	ldr	r6, [sp, #64]	; 0x40
   18aa8:	sbcs	r6, r6, lr
   18aac:	str	r6, [sp, #64]	; 0x40
   18ab0:	mov	r6, #0
   18ab4:	movwcc	r6, #1
   18ab8:	cmp	r6, #0
   18abc:	moveq	r2, r0
   18ac0:	moveq	r4, r5
   18ac4:	adds	r1, r1, #1
   18ac8:	bne	18a44 <__assert_fail@plt+0x7014>
   18acc:	ldr	r1, [sp, #68]	; 0x44
   18ad0:	ldr	r6, [sp, #116]	; 0x74
   18ad4:	ldr	r2, [sp, #64]	; 0x40
   18ad8:	mov	r0, #0
   18adc:	str	r9, [sp, #88]	; 0x58
   18ae0:	subs	r3, r6, r1
   18ae4:	sbc	r7, sl, r2
   18ae8:	subs	r1, r1, r3
   18aec:	str	r3, [sp, #36]	; 0x24
   18af0:	sbcs	r2, r2, r7
   18af4:	str	r7, [sp, #32]
   18af8:	movwcc	r0, #1
   18afc:	adds	r3, r1, r6
   18b00:	adc	r7, r2, sl
   18b04:	cmp	r0, #0
   18b08:	ldr	r0, [sp, #12]
   18b0c:	moveq	r3, r1
   18b10:	ldr	r1, [sp, #8]
   18b14:	moveq	r7, r2
   18b18:	str	r3, [sp, #52]	; 0x34
   18b1c:	str	r3, [sp, #100]	; 0x64
   18b20:	str	r7, [sp, #56]	; 0x38
   18b24:	str	r7, [sp, #104]	; 0x68
   18b28:	orrs	r0, r1, r0
   18b2c:	str	r0, [sp, #4]
   18b30:	beq	18d1c <__assert_fail@plt+0x72ec>
   18b34:	ldr	r0, [sp, #56]	; 0x38
   18b38:	ldr	r7, [sp, #52]	; 0x34
   18b3c:	ldr	lr, [sp, #8]
   18b40:	ldr	r1, [sp, #12]
   18b44:	mov	r4, r0
   18b48:	str	r7, [sp, #100]	; 0x64
   18b4c:	str	r0, [sp, #104]	; 0x68
   18b50:	umull	r8, r9, r4, r7
   18b54:	umull	r7, r0, r7, r7
   18b58:	ldr	r3, [sp, #88]	; 0x58
   18b5c:	ldr	r5, [sp, #116]	; 0x74
   18b60:	str	lr, [sp, #112]	; 0x70
   18b64:	lsl	r2, r9, #1
   18b68:	adds	r0, r0, r8, lsl #1
   18b6c:	orr	r2, r2, r8, lsr #31
   18b70:	adc	r2, r2, #0
   18b74:	str	r2, [sp, #108]	; 0x6c
   18b78:	ldr	r2, [sp, #92]	; 0x5c
   18b7c:	umull	ip, lr, r7, r2
   18b80:	mla	r7, r7, r3, lr
   18b84:	mov	lr, r1
   18b88:	umull	r1, r3, ip, sl
   18b8c:	mla	r7, r0, r2, r7
   18b90:	umull	r2, r6, ip, r5
   18b94:	umlal	r1, r3, r7, r5
   18b98:	adds	r1, r1, r6
   18b9c:	adc	r2, r3, #0
   18ba0:	umull	r3, r6, r7, r5
   18ba4:	subs	r1, r1, r3
   18ba8:	umull	r3, r7, r7, sl
   18bac:	sbcs	r1, r2, r6
   18bb0:	ldr	r6, [sp, #108]	; 0x6c
   18bb4:	mov	r1, #0
   18bb8:	movwcc	r1, #1
   18bbc:	cmp	r1, #0
   18bc0:	addne	r7, r7, #1
   18bc4:	adds	r1, r3, r2
   18bc8:	adc	r2, r7, #0
   18bcc:	subs	r0, r0, r8
   18bd0:	umull	r3, r7, r4, r4
   18bd4:	sbcs	r0, r6, r9
   18bd8:	mov	r0, #0
   18bdc:	movwcc	r0, #1
   18be0:	cmp	r0, #0
   18be4:	addne	r7, r7, #1
   18be8:	adds	r0, r3, r6
   18bec:	adc	r3, r7, #0
   18bf0:	subs	r0, r0, r1
   18bf4:	sbcs	r1, r3, r2
   18bf8:	mov	r2, #0
   18bfc:	movwcc	r2, #1
   18c00:	adds	r7, r0, r5
   18c04:	adc	r4, r1, sl
   18c08:	cmp	r2, #0
   18c0c:	moveq	r7, r0
   18c10:	ldr	r0, [sp, #112]	; 0x70
   18c14:	moveq	r4, r1
   18c18:	mov	r1, lr
   18c1c:	lsrs	r1, lr, #1
   18c20:	rrx	lr, r0
   18c24:	tst	r0, #2
   18c28:	beq	18d14 <__assert_fail@plt+0x72e4>
   18c2c:	ldr	r6, [sp, #100]	; 0x64
   18c30:	ldr	r5, [sp, #92]	; 0x5c
   18c34:	str	r1, [sp, #108]	; 0x6c
   18c38:	ldr	r1, [sp, #88]	; 0x58
   18c3c:	ldr	ip, [sp, #104]	; 0x68
   18c40:	str	r4, [sp, #112]	; 0x70
   18c44:	umull	r0, r8, r7, r6
   18c48:	umull	r2, r3, r0, r5
   18c4c:	mla	r0, r0, r1, r3
   18c50:	umull	r3, r6, r4, r6
   18c54:	umlal	r3, r6, r7, ip
   18c58:	adds	r3, r3, r8
   18c5c:	ldr	r8, [sp, #116]	; 0x74
   18c60:	mla	r0, r3, r5, r0
   18c64:	umull	r1, r4, r0, sl
   18c68:	str	r1, [sp, #100]	; 0x64
   18c6c:	umull	r9, r1, r0, r8
   18c70:	str	r1, [sp, #96]	; 0x60
   18c74:	umull	r1, r5, r2, sl
   18c78:	umlal	r1, r5, r0, r8
   18c7c:	adc	r0, r6, #0
   18c80:	umull	r2, r6, r2, r8
   18c84:	adds	r1, r1, r6
   18c88:	adc	r2, r5, #0
   18c8c:	subs	r1, r1, r9
   18c90:	umull	r6, r5, r7, ip
   18c94:	ldr	r1, [sp, #96]	; 0x60
   18c98:	sbcs	r1, r2, r1
   18c9c:	mov	r1, #0
   18ca0:	movwcc	r1, #1
   18ca4:	cmp	r1, #0
   18ca8:	ldr	r1, [sp, #100]	; 0x64
   18cac:	addne	r4, r4, #1
   18cb0:	adds	r1, r1, r2
   18cb4:	adc	r2, r4, #0
   18cb8:	subs	r3, r3, r6
   18cbc:	ldr	r4, [sp, #112]	; 0x70
   18cc0:	sbcs	r3, r0, r5
   18cc4:	mov	r3, #0
   18cc8:	movwcc	r3, #1
   18ccc:	umull	r6, r5, r4, ip
   18cd0:	cmp	r3, #0
   18cd4:	ldr	r4, [sp, #112]	; 0x70
   18cd8:	addne	r5, r5, #1
   18cdc:	adds	r0, r6, r0
   18ce0:	adc	r3, r5, #0
   18ce4:	subs	r0, r0, r1
   18ce8:	sbcs	r1, r3, r2
   18cec:	mov	r2, #0
   18cf0:	movwcc	r2, #1
   18cf4:	adds	r6, r0, r8
   18cf8:	adc	r3, r1, sl
   18cfc:	cmp	r2, #0
   18d00:	moveq	r3, r1
   18d04:	ldr	r1, [sp, #108]	; 0x6c
   18d08:	moveq	r6, r0
   18d0c:	str	r3, [sp, #104]	; 0x68
   18d10:	str	r6, [sp, #100]	; 0x64
   18d14:	orrs	r0, lr, r1
   18d18:	bne	18b50 <__assert_fail@plt+0x7120>
   18d1c:	ldr	r0, [sp, #68]	; 0x44
   18d20:	ldr	r2, [sp, #100]	; 0x64
   18d24:	ldr	r1, [sp, #64]	; 0x40
   18d28:	ldr	r7, [sp, #104]	; 0x68
   18d2c:	eor	r0, r2, r0
   18d30:	eor	r1, r7, r1
   18d34:	orrs	r0, r0, r1
   18d38:	ldrne	r0, [sp, #36]	; 0x24
   18d3c:	ldrne	r1, [sp, #32]
   18d40:	eorne	r0, r2, r0
   18d44:	eorne	r1, r7, r1
   18d48:	orrsne	r0, r0, r1
   18d4c:	bne	18d58 <__assert_fail@plt+0x7328>
   18d50:	ldr	r9, [sp, #88]	; 0x58
   18d54:	b	18e84 <__assert_fail@plt+0x7454>
   18d58:	ldr	r6, [sp, #28]
   18d5c:	ldr	r9, [sp, #88]	; 0x58
   18d60:	mov	r1, #0
   18d64:	cmp	r6, #2
   18d68:	bcc	1893c <__assert_fail@plt+0x6f0c>
   18d6c:	mov	lr, #2
   18d70:	umull	r0, r1, r7, r2
   18d74:	str	r7, [sp, #104]	; 0x68
   18d78:	umull	r7, r5, r2, r2
   18d7c:	lsl	r3, r1, #1
   18d80:	adds	r8, r5, r0, lsl #1
   18d84:	str	r1, [sp, #112]	; 0x70
   18d88:	ldr	r5, [sp, #116]	; 0x74
   18d8c:	orr	r3, r3, r0, lsr #31
   18d90:	adc	r1, r3, #0
   18d94:	str	r1, [sp, #108]	; 0x6c
   18d98:	ldr	r1, [sp, #92]	; 0x5c
   18d9c:	umull	r4, r3, r7, r1
   18da0:	mla	r3, r7, r9, r3
   18da4:	mla	r3, r8, r1, r3
   18da8:	umull	r7, r1, r4, sl
   18dac:	umull	r4, ip, r4, r5
   18db0:	umlal	r7, r1, r3, r5
   18db4:	umull	r4, r2, r3, r5
   18db8:	adds	r7, r7, ip
   18dbc:	adc	r1, r1, #0
   18dc0:	subs	r7, r7, r4
   18dc4:	ldr	r4, [sp, #108]	; 0x6c
   18dc8:	sbcs	r2, r1, r2
   18dcc:	umull	r3, r7, r3, sl
   18dd0:	mov	r2, #0
   18dd4:	movwcc	r2, #1
   18dd8:	cmp	r2, #0
   18ddc:	addne	r7, r7, #1
   18de0:	adds	r1, r3, r1
   18de4:	ldr	r3, [sp, #104]	; 0x68
   18de8:	adc	r2, r7, #0
   18dec:	subs	r0, r8, r0
   18df0:	ldr	r0, [sp, #112]	; 0x70
   18df4:	umull	r3, r7, r3, r3
   18df8:	sbcs	r0, r4, r0
   18dfc:	mov	r0, #0
   18e00:	movwcc	r0, #1
   18e04:	cmp	r0, #0
   18e08:	addne	r7, r7, #1
   18e0c:	adds	r0, r3, r4
   18e10:	adc	r3, r7, #0
   18e14:	subs	r0, r0, r1
   18e18:	sbcs	r1, r3, r2
   18e1c:	mov	r2, #0
   18e20:	movwcc	r2, #1
   18e24:	adds	r3, r0, r5
   18e28:	adc	r7, r1, sl
   18e2c:	cmp	r2, #0
   18e30:	moveq	r7, r1
   18e34:	ldr	r1, [sp, #32]
   18e38:	moveq	r3, r0
   18e3c:	ldr	r0, [sp, #36]	; 0x24
   18e40:	eor	r1, r7, r1
   18e44:	eor	r0, r3, r0
   18e48:	orrs	r0, r0, r1
   18e4c:	beq	18e84 <__assert_fail@plt+0x7454>
   18e50:	mov	r1, #0
   18e54:	cmp	lr, r6
   18e58:	bcs	1893c <__assert_fail@plt+0x6f0c>
   18e5c:	ldr	r0, [sp, #68]	; 0x44
   18e60:	ldr	r1, [sp, #64]	; 0x40
   18e64:	mov	r2, r3
   18e68:	add	lr, lr, #1
   18e6c:	eor	r0, r3, r0
   18e70:	eor	r1, r7, r1
   18e74:	orrs	r0, r0, r1
   18e78:	mov	r1, #0
   18e7c:	bne	18d70 <__assert_fail@plt+0x7340>
   18e80:	b	1893c <__assert_fail@plt+0x6f0c>
   18e84:	mov	r4, #0
   18e88:	ldr	r2, [sp, #48]	; 0x30
   18e8c:	ldr	r3, [sp, #44]	; 0x2c
   18e90:	add	r0, sp, #120	; 0x78
   18e94:	mov	r1, #0
   18e98:	str	r0, [sp]
   18e9c:	mov	r0, #0
   18ea0:	str	r0, [sp, #20]
   18ea4:	mov	r0, #0
   18ea8:	bl	12964 <__assert_fail@plt+0xf34>
   18eac:	mov	r0, #2
   18eb0:	str	sl, [sp, #84]	; 0x54
   18eb4:	str	r4, [sp, #80]	; 0x50
   18eb8:	str	r0, [sp, #16]
   18ebc:	ldrb	r0, [sp, #370]	; 0x172
   18ec0:	str	r0, [sp, #40]	; 0x28
   18ec4:	mov	r0, #0
   18ec8:	str	r0, [sp, #24]
   18ecc:	ldr	r0, [sp, #40]	; 0x28
   18ed0:	mov	r1, #1
   18ed4:	cmp	r0, #0
   18ed8:	beq	1893c <__assert_fail@plt+0x6f0c>
   18edc:	mov	r2, #0
   18ee0:	add	r0, sp, #120	; 0x78
   18ee4:	str	r2, [sp, #60]	; 0x3c
   18ee8:	add	r0, r0, r2, lsl #3
   18eec:	ldr	r4, [r0, #16]
   18ef0:	ldr	r8, [r0, #20]
   18ef4:	ldr	r6, [sp, #48]	; 0x30
   18ef8:	ldr	r7, [sp, #44]	; 0x2c
   18efc:	mov	r0, r6
   18f00:	mov	r1, r7
   18f04:	mov	r2, r4
   18f08:	mov	r3, r8
   18f0c:	bl	20514 <__assert_fail@plt+0xeae4>
   18f10:	ldr	ip, [sp, #56]	; 0x38
   18f14:	ands	r2, r0, #1
   18f18:	mov	r5, r0
   18f1c:	ldr	r0, [sp, #64]	; 0x40
   18f20:	mov	r2, ip
   18f24:	moveq	r2, r0
   18f28:	ldr	r0, [sp, #68]	; 0x44
   18f2c:	str	r2, [sp, #76]	; 0x4c
   18f30:	ldr	r2, [sp, #52]	; 0x34
   18f34:	mov	r3, r2
   18f38:	moveq	r3, r0
   18f3c:	str	r3, [sp, #72]	; 0x48
   18f40:	subs	r3, r6, r4
   18f44:	sbcs	r3, r7, r8
   18f48:	bcc	1919c <__assert_fail@plt+0x776c>
   18f4c:	mov	r4, r2
   18f50:	ldr	r0, [sp, #92]	; 0x5c
   18f54:	str	r5, [sp, #104]	; 0x68
   18f58:	umull	r5, r6, r4, r4
   18f5c:	str	r1, [sp, #108]	; 0x6c
   18f60:	ldr	r1, [sp, #116]	; 0x74
   18f64:	str	ip, [sp, #112]	; 0x70
   18f68:	umull	r2, r7, r5, r0
   18f6c:	mla	r5, r5, r9, r7
   18f70:	umull	r4, r7, ip, r4
   18f74:	adds	r6, r6, r4, lsl #1
   18f78:	str	r7, [sp, #96]	; 0x60
   18f7c:	mla	r5, r6, r0, r5
   18f80:	umull	r0, r9, r5, sl
   18f84:	str	r0, [sp, #100]	; 0x64
   18f88:	ldr	r0, [sp, #80]	; 0x50
   18f8c:	mla	r3, r5, r0, r9
   18f90:	umull	r9, ip, r5, r1
   18f94:	lsl	r1, r7, #1
   18f98:	ldr	r7, [sp, #116]	; 0x74
   18f9c:	orr	r1, r1, r4, lsr #31
   18fa0:	mla	r5, r5, r0, ip
   18fa4:	adc	ip, r1, #0
   18fa8:	umull	r1, lr, r2, sl
   18fac:	mla	lr, r2, r0, lr
   18fb0:	adds	r1, r9, r1
   18fb4:	umull	sl, r8, r2, r7
   18fb8:	adc	lr, r5, lr
   18fbc:	mla	r2, r2, r0, r8
   18fc0:	ldr	r0, [sp, #100]	; 0x64
   18fc4:	ldr	sl, [sp, #84]	; 0x54
   18fc8:	adds	r1, r1, r2
   18fcc:	adc	r2, lr, #0
   18fd0:	subs	r1, r1, r9
   18fd4:	sbcs	r1, r2, r5
   18fd8:	mov	r1, #0
   18fdc:	mov	r8, sl
   18fe0:	movwcc	r1, #1
   18fe4:	cmp	r1, #0
   18fe8:	ldr	r1, [sp, #108]	; 0x6c
   18fec:	addne	r3, r3, #1
   18ff0:	adds	r5, r0, r2
   18ff4:	ldr	r0, [sp, #96]	; 0x60
   18ff8:	adc	r2, r3, #0
   18ffc:	subs	r3, r6, r4
   19000:	sbcs	r3, ip, r0
   19004:	ldr	r0, [sp, #112]	; 0x70
   19008:	mov	r3, #0
   1900c:	movwcc	r3, #1
   19010:	cmp	r3, #0
   19014:	umull	r7, r6, r0, r0
   19018:	addne	r6, r6, #1
   1901c:	adds	r3, r7, ip
   19020:	adc	r7, r6, #0
   19024:	subs	r0, r3, r5
   19028:	mov	r3, #0
   1902c:	sbcs	r2, r7, r2
   19030:	ldr	r7, [sp, #116]	; 0x74
   19034:	movwcc	r3, #1
   19038:	adds	r4, r0, r7
   1903c:	adc	ip, r2, sl
   19040:	cmp	r3, #0
   19044:	moveq	r4, r0
   19048:	ldr	r0, [sp, #104]	; 0x68
   1904c:	moveq	ip, r2
   19050:	lsrs	r1, r1, #1
   19054:	rrx	r9, r0
   19058:	tst	r0, #2
   1905c:	bne	19078 <__assert_fail@plt+0x7648>
   19060:	mov	sl, r8
   19064:	orrs	r0, r9, r1
   19068:	mov	r5, r9
   1906c:	ldr	r9, [sp, #88]	; 0x58
   19070:	bne	18f50 <__assert_fail@plt+0x7520>
   19074:	b	1919c <__assert_fail@plt+0x776c>
   19078:	ldr	r7, [sp, #72]	; 0x48
   1907c:	ldr	r6, [sp, #92]	; 0x5c
   19080:	ldr	r5, [sp, #88]	; 0x58
   19084:	str	ip, [sp, #112]	; 0x70
   19088:	str	r1, [sp, #108]	; 0x6c
   1908c:	ldr	sl, [sp, #80]	; 0x50
   19090:	umull	r0, lr, r4, r7
   19094:	umull	r2, r3, r0, r6
   19098:	mla	r0, r0, r5, r3
   1909c:	umull	r3, r7, ip, r7
   190a0:	ldr	ip, [sp, #76]	; 0x4c
   190a4:	umlal	r3, r7, r4, ip
   190a8:	adds	r3, r3, lr
   190ac:	mla	r0, r3, r6, r0
   190b0:	str	r3, [sp, #104]	; 0x68
   190b4:	umull	r1, r6, r0, r8
   190b8:	str	r1, [sp, #100]	; 0x64
   190bc:	ldr	r1, [sp, #116]	; 0x74
   190c0:	mla	r6, r0, sl, r6
   190c4:	umull	r3, r1, r0, r1
   190c8:	mla	r0, r0, sl, r1
   190cc:	adc	r1, r7, #0
   190d0:	str	r1, [sp, #96]	; 0x60
   190d4:	umull	r7, r1, r2, r8
   190d8:	mla	r1, r2, sl, r1
   190dc:	adds	r7, r3, r7
   190e0:	adc	lr, r0, r1
   190e4:	ldr	r1, [sp, #116]	; 0x74
   190e8:	umull	r5, r1, r2, r1
   190ec:	mla	r1, r2, sl, r1
   190f0:	ldr	r5, [sp, #96]	; 0x60
   190f4:	ldr	sl, [sp, #84]	; 0x54
   190f8:	adds	r1, r7, r1
   190fc:	ldr	r7, [sp, #104]	; 0x68
   19100:	adc	r2, lr, #0
   19104:	subs	r1, r1, r3
   19108:	sbcs	r0, r2, r0
   1910c:	ldr	r1, [sp, #108]	; 0x6c
   19110:	mov	r0, #0
   19114:	movwcc	r0, #1
   19118:	cmp	r0, #0
   1911c:	ldr	r0, [sp, #100]	; 0x64
   19120:	addne	r6, r6, #1
   19124:	adds	r0, r0, r2
   19128:	umull	r2, r3, r4, ip
   1912c:	adc	r6, r6, #0
   19130:	subs	r2, r7, r2
   19134:	sbcs	r2, r5, r3
   19138:	ldr	r3, [sp, #112]	; 0x70
   1913c:	mov	r2, #0
   19140:	movwcc	r2, #1
   19144:	cmp	r2, #0
   19148:	umull	r3, r7, r3, ip
   1914c:	ldr	ip, [sp, #112]	; 0x70
   19150:	addne	r7, r7, #1
   19154:	adds	r2, r3, r5
   19158:	adc	r3, r7, #0
   1915c:	ldr	r7, [sp, #116]	; 0x74
   19160:	subs	r0, r2, r0
   19164:	mov	r2, #0
   19168:	sbcs	r3, r3, r6
   1916c:	movwcc	r2, #1
   19170:	adds	r6, r0, r7
   19174:	adc	r7, r3, sl
   19178:	cmp	r2, #0
   1917c:	moveq	r7, r3
   19180:	moveq	r6, r0
   19184:	str	r7, [sp, #76]	; 0x4c
   19188:	str	r6, [sp, #72]	; 0x48
   1918c:	orrs	r0, r9, r1
   19190:	mov	r5, r9
   19194:	ldr	r9, [sp, #88]	; 0x58
   19198:	bne	18f50 <__assert_fail@plt+0x7520>
   1919c:	ldr	r0, [sp, #68]	; 0x44
   191a0:	ldr	r1, [sp, #72]	; 0x48
   191a4:	ldr	r2, [sp, #76]	; 0x4c
   191a8:	eor	r0, r1, r0
   191ac:	ldr	r1, [sp, #64]	; 0x40
   191b0:	eor	r1, r2, r1
   191b4:	ldr	r2, [sp, #60]	; 0x3c
   191b8:	orrs	r0, r0, r1
   191bc:	beq	191d0 <__assert_fail@plt+0x77a0>
   191c0:	ldr	r1, [sp, #40]	; 0x28
   191c4:	add	r2, r2, #1
   191c8:	cmp	r2, r1
   191cc:	bcc	18ee0 <__assert_fail@plt+0x74b0>
   191d0:	cmp	r0, #0
   191d4:	mov	r1, #1
   191d8:	bne	1893c <__assert_fail@plt+0x6f0c>
   191dc:	ldr	r1, [sp, #24]
   191e0:	movw	r0, #14376	; 0x3828
   191e4:	ldr	r4, [sp, #16]
   191e8:	ldr	r5, [sp, #20]
   191ec:	ldr	r2, [sp, #68]	; 0x44
   191f0:	ldr	r3, [sp, #64]	; 0x40
   191f4:	movt	r0, #2
   191f8:	ldrb	r0, [r0, r1]
   191fc:	adds	r4, r4, r0
   19200:	adc	r5, r5, #0
   19204:	str	r4, [sp, #16]
   19208:	umull	r7, r6, r5, r2
   1920c:	umull	r0, r2, r4, r2
   19210:	str	r5, [sp, #20]
   19214:	umlal	r7, r6, r4, r3
   19218:	adds	r1, r7, r2
   1921c:	adc	r7, r6, #0
   19220:	umull	r6, r2, r4, r3
   19224:	subs	r6, r1, r6
   19228:	sbcs	r2, r7, r2
   1922c:	mov	r6, #0
   19230:	movwcc	r6, #1
   19234:	umull	r2, r3, r5, r3
   19238:	cmp	r6, #0
   1923c:	addne	r3, r3, #1
   19240:	adds	r7, r2, r7
   19244:	adc	ip, r3, #0
   19248:	orrs	r2, r7, ip
   1924c:	bne	19660 <__assert_fail@plt+0x7c30>
   19250:	ldr	r2, [sp, #116]	; 0x74
   19254:	mov	r3, sl
   19258:	bl	20514 <__assert_fail@plt+0xeae4>
   1925c:	ldr	r5, [sp, #92]	; 0x5c
   19260:	ldr	r0, [sp, #4]
   19264:	str	r2, [sp, #52]	; 0x34
   19268:	str	r2, [sp, #72]	; 0x48
   1926c:	str	r3, [sp, #56]	; 0x38
   19270:	str	r3, [sp, #76]	; 0x4c
   19274:	cmp	r0, #0
   19278:	beq	194b4 <__assert_fail@plt+0x7a84>
   1927c:	ldr	r0, [sp, #56]	; 0x38
   19280:	ldr	r9, [sp, #52]	; 0x34
   19284:	ldr	r2, [sp, #8]
   19288:	ldr	r1, [sp, #12]
   1928c:	mov	r7, r0
   19290:	str	r9, [sp, #72]	; 0x48
   19294:	str	r0, [sp, #76]	; 0x4c
   19298:	str	r1, [sp, #112]	; 0x70
   1929c:	ldr	r1, [sp, #88]	; 0x58
   192a0:	umull	r6, r4, r9, r9
   192a4:	str	r2, [sp, #108]	; 0x6c
   192a8:	str	r7, [sp, #104]	; 0x68
   192ac:	ldr	lr, [sp, #80]	; 0x50
   192b0:	umull	r2, r0, r6, r5
   192b4:	mla	r0, r6, r1, r0
   192b8:	umull	r6, r7, r7, r9
   192bc:	adds	r4, r4, r6, lsl #1
   192c0:	str	r7, [sp, #96]	; 0x60
   192c4:	mla	r0, r4, r5, r0
   192c8:	lsl	r5, r7, #1
   192cc:	ldr	r7, [sp, #116]	; 0x74
   192d0:	umull	r1, r3, r0, sl
   192d4:	orr	r5, r5, r6, lsr #31
   192d8:	str	r1, [sp, #100]	; 0x64
   192dc:	ldr	r1, [sp, #116]	; 0x74
   192e0:	mla	r3, r0, lr, r3
   192e4:	umull	r1, ip, r0, r1
   192e8:	mla	r0, r0, lr, ip
   192ec:	adc	ip, r5, #0
   192f0:	umull	r5, r8, r2, sl
   192f4:	umull	r9, sl, r2, r7
   192f8:	mla	r8, r2, lr, r8
   192fc:	adds	r5, r1, r5
   19300:	mla	r2, r2, lr, sl
   19304:	ldr	sl, [sp, #84]	; 0x54
   19308:	adc	r8, r0, r8
   1930c:	adds	r2, r5, r2
   19310:	adc	r5, r8, #0
   19314:	subs	r1, r2, r1
   19318:	sbcs	r0, r5, r0
   1931c:	mov	r0, #0
   19320:	movwcc	r0, #1
   19324:	cmp	r0, #0
   19328:	ldr	r0, [sp, #100]	; 0x64
   1932c:	addne	r3, r3, #1
   19330:	adds	r0, r0, r5
   19334:	adc	r1, r3, #0
   19338:	subs	r2, r4, r6
   1933c:	ldr	r3, [sp, #104]	; 0x68
   19340:	ldr	r2, [sp, #96]	; 0x60
   19344:	umull	r3, r4, r3, r3
   19348:	sbcs	r2, ip, r2
   1934c:	mov	r2, #0
   19350:	movwcc	r2, #1
   19354:	cmp	r2, #0
   19358:	addne	r4, r4, #1
   1935c:	adds	r2, r3, ip
   19360:	adc	r3, r4, #0
   19364:	subs	r0, r2, r0
   19368:	mov	r2, #0
   1936c:	sbcs	r1, r3, r1
   19370:	ldr	r3, [sp, #116]	; 0x74
   19374:	movwcc	r2, #1
   19378:	adds	r9, r0, r3
   1937c:	adc	r7, r1, sl
   19380:	cmp	r2, #0
   19384:	moveq	r7, r1
   19388:	ldr	r1, [sp, #112]	; 0x70
   1938c:	moveq	r9, r0
   19390:	ldr	r0, [sp, #108]	; 0x6c
   19394:	lsrs	r1, r1, #1
   19398:	rrx	r2, r0
   1939c:	tst	r0, #2
   193a0:	beq	194a8 <__assert_fail@plt+0x7a78>
   193a4:	ldr	r6, [sp, #72]	; 0x48
   193a8:	ldr	r4, [sp, #92]	; 0x5c
   193ac:	ldr	r5, [sp, #88]	; 0x58
   193b0:	ldr	ip, [sp, #76]	; 0x4c
   193b4:	str	r1, [sp, #112]	; 0x70
   193b8:	str	r2, [sp, #108]	; 0x6c
   193bc:	umull	r0, r1, r9, r6
   193c0:	umull	r2, r3, r0, r4
   193c4:	mla	r0, r0, r5, r3
   193c8:	umull	r3, r6, r7, r6
   193cc:	umlal	r3, r6, r9, ip
   193d0:	adds	r1, r3, r1
   193d4:	mla	r0, r1, r4, r0
   193d8:	str	r1, [sp, #104]	; 0x68
   193dc:	adc	r8, r6, #0
   193e0:	umull	r1, r5, r0, sl
   193e4:	str	r1, [sp, #100]	; 0x64
   193e8:	ldr	r1, [sp, #116]	; 0x74
   193ec:	mla	r5, r0, lr, r5
   193f0:	umull	r3, r1, r0, r1
   193f4:	mla	r0, r0, lr, r1
   193f8:	umull	r6, r1, r2, sl
   193fc:	mla	r1, r2, lr, r1
   19400:	adds	r6, r3, r6
   19404:	adc	sl, r0, r1
   19408:	ldr	r1, [sp, #116]	; 0x74
   1940c:	umull	r4, r1, r2, r1
   19410:	mla	r1, r2, lr, r1
   19414:	adds	r1, r6, r1
   19418:	ldr	r6, [sp, #104]	; 0x68
   1941c:	adc	r2, sl, #0
   19420:	subs	r1, r1, r3
   19424:	ldr	sl, [sp, #84]	; 0x54
   19428:	sbcs	r0, r2, r0
   1942c:	mov	r0, #0
   19430:	movwcc	r0, #1
   19434:	cmp	r0, #0
   19438:	ldr	r0, [sp, #100]	; 0x64
   1943c:	addne	r5, r5, #1
   19440:	adds	r0, r0, r2
   19444:	umull	r2, r3, r9, ip
   19448:	adc	r1, r5, #0
   1944c:	subs	r2, r6, r2
   19450:	sbcs	r2, r8, r3
   19454:	umull	r3, r6, r7, ip
   19458:	mov	r2, #0
   1945c:	movwcc	r2, #1
   19460:	cmp	r2, #0
   19464:	addne	r6, r6, #1
   19468:	adds	r2, r3, r8
   1946c:	adc	r3, r6, #0
   19470:	subs	r0, r2, r0
   19474:	mov	r2, #0
   19478:	sbcs	r1, r3, r1
   1947c:	ldr	r3, [sp, #116]	; 0x74
   19480:	movwcc	r2, #1
   19484:	adds	r6, r0, r3
   19488:	adc	r3, r1, sl
   1948c:	cmp	r2, #0
   19490:	ldr	r2, [sp, #108]	; 0x6c
   19494:	moveq	r3, r1
   19498:	ldr	r1, [sp, #112]	; 0x70
   1949c:	moveq	r6, r0
   194a0:	str	r3, [sp, #76]	; 0x4c
   194a4:	str	r6, [sp, #72]	; 0x48
   194a8:	ldr	r5, [sp, #92]	; 0x5c
   194ac:	orrs	r0, r2, r1
   194b0:	bne	19298 <__assert_fail@plt+0x7868>
   194b4:	ldr	r0, [sp, #68]	; 0x44
   194b8:	ldr	r4, [sp, #72]	; 0x48
   194bc:	ldr	r1, [sp, #64]	; 0x40
   194c0:	ldr	r5, [sp, #76]	; 0x4c
   194c4:	eor	r0, r4, r0
   194c8:	eor	r1, r5, r1
   194cc:	orrs	r0, r0, r1
   194d0:	ldrne	r0, [sp, #36]	; 0x24
   194d4:	ldrne	r1, [sp, #32]
   194d8:	eorne	r0, r4, r0
   194dc:	eorne	r1, r5, r1
   194e0:	orrsne	r0, r0, r1
   194e4:	bne	19510 <__assert_fail@plt+0x7ae0>
   194e8:	ldr	r0, [sp, #24]
   194ec:	ldr	sl, [sp, #84]	; 0x54
   194f0:	ldr	r9, [sp, #88]	; 0x58
   194f4:	mov	r1, r0
   194f8:	add	r1, r0, #1
   194fc:	cmp	r1, #668	; 0x29c
   19500:	mov	r0, r1
   19504:	str	r1, [sp, #24]
   19508:	bcc	18ecc <__assert_fail@plt+0x749c>
   1950c:	b	1974c <__assert_fail@plt+0x7d1c>
   19510:	ldr	r0, [sp, #28]
   19514:	mov	r1, #0
   19518:	cmp	r0, #2
   1951c:	bcc	1893c <__assert_fail@plt+0x6f0c>
   19520:	mov	r9, #2
   19524:	ldr	r2, [sp, #92]	; 0x5c
   19528:	ldr	r6, [sp, #88]	; 0x58
   1952c:	umull	r0, r1, r4, r4
   19530:	ldr	lr, [sp, #84]	; 0x54
   19534:	ldr	sl, [sp, #80]	; 0x50
   19538:	str	r5, [sp, #76]	; 0x4c
   1953c:	umull	r3, r7, r0, r2
   19540:	mla	r0, r0, r6, r7
   19544:	umull	r7, ip, r5, r4
   19548:	adds	r8, r1, r7, lsl #1
   1954c:	str	ip, [sp, #108]	; 0x6c
   19550:	mla	r0, r8, r2, r0
   19554:	ldr	r2, [sp, #116]	; 0x74
   19558:	umull	r1, r4, r0, lr
   1955c:	str	r1, [sp, #112]	; 0x70
   19560:	ldr	r1, [sp, #116]	; 0x74
   19564:	mla	r4, r0, sl, r4
   19568:	umull	r5, r6, r0, r1
   1956c:	mla	r0, r0, sl, r6
   19570:	lsl	r6, ip, #1
   19574:	umull	r2, ip, r3, r2
   19578:	orr	r6, r6, r7, lsr #31
   1957c:	mla	r2, r3, sl, ip
   19580:	adc	r1, r6, #0
   19584:	str	r1, [sp, #104]	; 0x68
   19588:	umull	r1, r6, r3, lr
   1958c:	mla	r6, r3, sl, r6
   19590:	adds	r1, r5, r1
   19594:	ldr	r3, [sp, #76]	; 0x4c
   19598:	adc	r6, r0, r6
   1959c:	adds	r1, r1, r2
   195a0:	adc	r2, r6, #0
   195a4:	subs	r1, r1, r5
   195a8:	ldr	r6, [sp, #104]	; 0x68
   195ac:	sbcs	r0, r2, r0
   195b0:	mov	r0, #0
   195b4:	movwcc	r0, #1
   195b8:	cmp	r0, #0
   195bc:	ldr	r0, [sp, #112]	; 0x70
   195c0:	addne	r4, r4, #1
   195c4:	adds	r0, r0, r2
   195c8:	adc	r1, r4, #0
   195cc:	subs	r2, r8, r7
   195d0:	umull	r3, r7, r3, r3
   195d4:	ldr	r2, [sp, #108]	; 0x6c
   195d8:	sbcs	r2, r6, r2
   195dc:	mov	r2, #0
   195e0:	movwcc	r2, #1
   195e4:	cmp	r2, #0
   195e8:	addne	r7, r7, #1
   195ec:	adds	r2, r3, r6
   195f0:	adc	r3, r7, #0
   195f4:	subs	r0, r2, r0
   195f8:	mov	r2, #0
   195fc:	sbcs	r1, r3, r1
   19600:	ldr	r3, [sp, #116]	; 0x74
   19604:	movwcc	r2, #1
   19608:	adds	r4, r0, r3
   1960c:	adc	r5, r1, lr
   19610:	cmp	r2, #0
   19614:	moveq	r5, r1
   19618:	ldr	r1, [sp, #32]
   1961c:	moveq	r4, r0
   19620:	ldr	r0, [sp, #36]	; 0x24
   19624:	eor	r1, r5, r1
   19628:	eor	r0, r4, r0
   1962c:	orrs	r0, r0, r1
   19630:	beq	194e8 <__assert_fail@plt+0x7ab8>
   19634:	ldr	r0, [sp, #28]
   19638:	cmp	r9, r0
   1963c:	bcs	1973c <__assert_fail@plt+0x7d0c>
   19640:	ldr	r0, [sp, #68]	; 0x44
   19644:	ldr	r1, [sp, #64]	; 0x40
   19648:	add	r9, r9, #1
   1964c:	eor	r0, r4, r0
   19650:	eor	r1, r5, r1
   19654:	orrs	r0, r0, r1
   19658:	bne	19524 <__assert_fail@plt+0x7af4>
   1965c:	b	1972c <__assert_fail@plt+0x7cfc>
   19660:	mov	r6, r0
   19664:	ldr	r0, [sp, #116]	; 0x74
   19668:	subs	r2, r7, r0
   1966c:	sbcs	r2, ip, sl
   19670:	bcs	19794 <__assert_fail@plt+0x7d64>
   19674:	ldr	r0, [sp, #116]	; 0x74
   19678:	mov	r3, r1
   1967c:	mvn	r1, #63	; 0x3f
   19680:	mov	r9, #0
   19684:	mov	r4, sl
   19688:	mov	r2, r6
   1968c:	mov	lr, #0
   19690:	lsrs	r6, r9, #1
   19694:	str	r3, [sp, #56]	; 0x38
   19698:	rrx	lr, lr
   1969c:	lsrs	r4, r4, #1
   196a0:	orr	r9, r6, r0, lsl #31
   196a4:	rrx	r0, r0
   196a8:	subs	r6, r0, r7
   196ac:	sbcs	r6, r4, ip
   196b0:	bcc	196d4 <__assert_fail@plt+0x7ca4>
   196b4:	eor	r6, r7, r0
   196b8:	eor	r5, ip, r4
   196bc:	orrs	r6, r6, r5
   196c0:	bne	19718 <__assert_fail@plt+0x7ce8>
   196c4:	ldr	r3, [sp, #56]	; 0x38
   196c8:	subs	r6, r2, lr
   196cc:	sbcs	r6, r3, r9
   196d0:	bcc	19718 <__assert_fail@plt+0x7ce8>
   196d4:	ldr	r3, [sp, #56]	; 0x38
   196d8:	subs	r6, r7, r0
   196dc:	sbc	r5, ip, r4
   196e0:	subs	r7, r6, #1
   196e4:	sbc	ip, r5, #0
   196e8:	subs	r2, r2, lr
   196ec:	sbcs	r3, r3, r9
   196f0:	str	r3, [sp, #56]	; 0x38
   196f4:	mov	r3, r0
   196f8:	mov	r0, r4
   196fc:	mov	r4, #0
   19700:	movwcc	r4, #1
   19704:	cmp	r4, #0
   19708:	mov	r4, r0
   1970c:	mov	r0, r3
   19710:	moveq	r7, r6
   19714:	moveq	ip, r5
   19718:	ldr	r5, [sp, #92]	; 0x5c
   1971c:	ldr	r3, [sp, #56]	; 0x38
   19720:	adds	r1, r1, #1
   19724:	bne	19690 <__assert_fail@plt+0x7c60>
   19728:	b	19260 <__assert_fail@plt+0x7830>
   1972c:	mov	r1, #0
   19730:	mov	r0, r1
   19734:	sub	sp, fp, #28
   19738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1973c:	mov	r1, #0
   19740:	mov	r0, r1
   19744:	sub	sp, fp, #28
   19748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1974c:	movw	r1, #2717	; 0xa9d
   19750:	mov	r0, #0
   19754:	mov	r2, #5
   19758:	movt	r1, #2
   1975c:	bl	1170c <dcgettext@plt>
   19760:	mov	r2, r0
   19764:	mov	r0, #0
   19768:	mov	r1, #0
   1976c:	bl	117fc <error@plt>
   19770:	bl	11a24 <abort@plt>
   19774:	movw	r0, #2767	; 0xacf
   19778:	movw	r1, #2704	; 0xa90
   1977c:	movw	r3, #2777	; 0xad9
   19780:	movw	r2, #1214	; 0x4be
   19784:	movt	r0, #2
   19788:	movt	r1, #2
   1978c:	movt	r3, #2
   19790:	bl	11a30 <__assert_fail@plt>
   19794:	movw	r0, #2802	; 0xaf2
   19798:	movw	r1, #2704	; 0xa90
   1979c:	movw	r3, #2777	; 0xad9
   197a0:	movw	r2, #1262	; 0x4ee
   197a4:	movt	r0, #2
   197a8:	movt	r1, #2
   197ac:	movt	r3, #2
   197b0:	bl	11a30 <__assert_fail@plt>
   197b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197b8:	add	fp, sp, #28
   197bc:	sub	sp, sp, #84	; 0x54
   197c0:	str	r0, [fp, #-52]	; 0xffffffcc
   197c4:	ldr	r0, [fp, #44]	; 0x2c
   197c8:	mvn	sl, #63	; 0x3f
   197cc:	ldm	r1, {r6, r8, ip, lr}
   197d0:	str	r2, [sp, #52]	; 0x34
   197d4:	ldr	r4, [r2]
   197d8:	ldr	r1, [r2, #4]
   197dc:	str	r0, [fp, #-36]	; 0xffffffdc
   197e0:	ldr	r0, [fp, #40]	; 0x28
   197e4:	str	r0, [fp, #-40]	; 0xffffffd8
   197e8:	ldr	r0, [fp, #36]	; 0x24
   197ec:	str	r0, [fp, #-44]	; 0xffffffd4
   197f0:	ldr	r0, [fp, #32]
   197f4:	str	r0, [fp, #-48]	; 0xffffffd0
   197f8:	tst	r4, #1
   197fc:	str	r1, [fp, #-32]	; 0xffffffe0
   19800:	bne	1982c <__assert_fail@plt+0x7dfc>
   19804:	ldr	r2, [fp, #20]
   19808:	mov	r5, ip
   1980c:	ldr	r9, [fp, #-52]	; 0xffffffcc
   19810:	ldr	r0, [fp, #28]
   19814:	ldr	r1, [fp, #24]
   19818:	ldr	r3, [fp, #16]
   1981c:	ldr	r7, [fp, #8]
   19820:	mov	ip, r2
   19824:	ldr	r2, [fp, #12]
   19828:	b	198c4 <__assert_fail@plt+0x7e94>
   1982c:	ldr	r0, [fp, #12]
   19830:	ldr	r7, [fp, #8]
   19834:	mov	r5, ip
   19838:	str	r0, [sp, #36]	; 0x24
   1983c:	ldr	r0, [fp, #24]
   19840:	str	r7, [sp, #32]
   19844:	str	r0, [sp, #40]	; 0x28
   19848:	ldr	r0, [fp, #28]
   1984c:	str	r0, [sp, #44]	; 0x2c
   19850:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19854:	str	r0, [sp]
   19858:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1985c:	stmib	sp, {r0, ip, lr}
   19860:	ldr	r0, [fp, #16]
   19864:	str	r6, [sp, #16]
   19868:	str	r8, [sp, #20]
   1986c:	str	r8, [sp, #56]	; 0x38
   19870:	mov	r8, lr
   19874:	ldr	r9, [fp, #-52]	; 0xffffffcc
   19878:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1987c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19880:	str	r0, [sp, #24]
   19884:	ldr	r0, [fp, #20]
   19888:	str	r0, [sp, #28]
   1988c:	mov	r0, r9
   19890:	bl	19a50 <__assert_fail@plt+0x8020>
   19894:	add	ip, fp, #12
   19898:	mov	lr, r8
   1989c:	ldr	r8, [sp, #56]	; 0x38
   198a0:	ldm	ip, {r2, r3, ip}
   198a4:	str	r0, [fp, #-48]	; 0xffffffd0
   198a8:	str	r1, [fp, #-44]	; 0xffffffd4
   198ac:	ldr	r1, [r9]
   198b0:	ldr	r0, [r9, #4]
   198b4:	str	r1, [fp, #-40]	; 0xffffffd8
   198b8:	str	r0, [fp, #-36]	; 0xffffffdc
   198bc:	ldr	r1, [fp, #24]
   198c0:	ldr	r0, [fp, #28]
   198c4:	str	r2, [sp, #36]	; 0x24
   198c8:	str	r0, [sp, #44]	; 0x2c
   198cc:	str	r7, [sp, #32]
   198d0:	str	r1, [sp, #40]	; 0x28
   198d4:	stm	sp, {r6, r8}
   198d8:	str	r3, [sp, #24]
   198dc:	mov	r0, r9
   198e0:	mov	r2, r5
   198e4:	mov	r3, lr
   198e8:	str	r5, [sp, #8]
   198ec:	str	lr, [sp, #12]
   198f0:	str	r6, [sp, #16]
   198f4:	str	r8, [sp, #20]
   198f8:	str	ip, [sp, #28]
   198fc:	bl	19a50 <__assert_fail@plt+0x8020>
   19900:	mov	r8, r1
   19904:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19908:	ldm	r9, {ip, lr}
   1990c:	mov	r6, r0
   19910:	lsrs	r1, r1, #1
   19914:	rrx	r4, r4
   19918:	adds	sl, sl, #1
   1991c:	bne	197f8 <__assert_fail@plt+0x7dc8>
   19920:	ldr	r0, [sp, #52]	; 0x34
   19924:	ldr	r4, [r0, #8]
   19928:	ldr	r9, [r0, #12]
   1992c:	orrs	r0, r4, r9
   19930:	beq	19a30 <__assert_fail@plt+0x8000>
   19934:	ldr	sl, [fp, #-52]	; 0xffffffcc
   19938:	ldr	r0, [fp, #28]
   1993c:	ldr	r1, [fp, #24]
   19940:	ldr	r2, [fp, #20]
   19944:	ldr	r3, [fp, #16]
   19948:	ldr	r5, [fp, #12]
   1994c:	ldr	r7, [fp, #8]
   19950:	tst	r4, #1
   19954:	beq	199dc <__assert_fail@plt+0x7fac>
   19958:	str	r0, [sp, #44]	; 0x2c
   1995c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19960:	str	r7, [sp, #32]
   19964:	str	r5, [sp, #36]	; 0x24
   19968:	str	r1, [sp, #40]	; 0x28
   1996c:	mov	r5, lr
   19970:	mov	r7, ip
   19974:	str	r0, [sp]
   19978:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1997c:	stmib	sp, {r0, ip, lr}
   19980:	str	r3, [sp, #24]
   19984:	str	r2, [sp, #28]
   19988:	mov	r0, sl
   1998c:	str	r6, [sp, #16]
   19990:	str	r8, [sp, #20]
   19994:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19998:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1999c:	bl	19a50 <__assert_fail@plt+0x8020>
   199a0:	str	r1, [fp, #-44]	; 0xffffffd4
   199a4:	str	r0, [fp, #-48]	; 0xffffffd0
   199a8:	mov	r2, sl
   199ac:	mov	ip, r7
   199b0:	mov	lr, r5
   199b4:	ldr	r7, [fp, #8]
   199b8:	ldr	r5, [fp, #12]
   199bc:	ldr	r3, [fp, #16]
   199c0:	ldr	r1, [fp, #24]
   199c4:	ldm	sl, {r0, sl}
   199c8:	str	sl, [fp, #-36]	; 0xffffffdc
   199cc:	mov	sl, r2
   199d0:	str	r0, [fp, #-40]	; 0xffffffd8
   199d4:	ldr	r2, [fp, #20]
   199d8:	ldr	r0, [fp, #28]
   199dc:	str	r0, [sp, #44]	; 0x2c
   199e0:	str	r7, [sp, #32]
   199e4:	str	r5, [sp, #36]	; 0x24
   199e8:	str	r1, [sp, #40]	; 0x28
   199ec:	stm	sp, {r6, r8, ip, lr}
   199f0:	str	r3, [sp, #24]
   199f4:	str	r2, [sp, #28]
   199f8:	mov	r0, sl
   199fc:	mov	r2, ip
   19a00:	mov	r3, lr
   19a04:	str	r6, [sp, #16]
   19a08:	str	r8, [sp, #20]
   19a0c:	bl	19a50 <__assert_fail@plt+0x8020>
   19a10:	ldm	sl, {ip, lr}
   19a14:	lsrs	r9, r9, #1
   19a18:	mov	r6, r0
   19a1c:	mov	r8, r1
   19a20:	rrx	r4, r4
   19a24:	orrs	r0, r4, r9
   19a28:	bne	19938 <__assert_fail@plt+0x7f08>
   19a2c:	b	19a34 <__assert_fail@plt+0x8004>
   19a30:	ldr	sl, [fp, #-52]	; 0xffffffcc
   19a34:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19a38:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19a3c:	strd	r0, [sl]
   19a40:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19a44:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19a48:	sub	sp, fp, #28
   19a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a54:	add	fp, sp, #28
   19a58:	sub	sp, sp, #84	; 0x54
   19a5c:	ldr	r1, [fp, #48]	; 0x30
   19a60:	ldr	r6, [fp, #52]	; 0x34
   19a64:	str	r3, [fp, #-32]	; 0xffffffe0
   19a68:	rsbs	r7, r1, #0
   19a6c:	rsc	r4, r6, #0
   19a70:	cmn	r3, #1
   19a74:	ble	19fc0 <__assert_fail@plt+0x8590>
   19a78:	ldr	r1, [fp, #16]
   19a7c:	ldr	r6, [fp, #20]
   19a80:	mvn	r3, #0
   19a84:	subs	r1, r3, r1
   19a88:	sbcs	r1, r3, r6
   19a8c:	bge	19fe0 <__assert_fail@plt+0x85b0>
   19a90:	ldr	r9, [fp, #32]
   19a94:	str	r0, [fp, #-36]	; 0xffffffdc
   19a98:	ldr	r0, [fp, #36]	; 0x24
   19a9c:	str	r2, [fp, #-40]	; 0xffffffd8
   19aa0:	subs	r1, r3, r9
   19aa4:	sbcs	r0, r3, r0
   19aa8:	bge	1a000 <__assert_fail@plt+0x85d0>
   19aac:	ldr	r3, [fp, #24]
   19ab0:	ldr	r5, [fp, #8]
   19ab4:	ldr	sl, [fp, #28]
   19ab8:	ldr	lr, [fp, #12]
   19abc:	ldr	r6, [fp, #44]	; 0x2c
   19ac0:	str	r4, [fp, #-44]	; 0xffffffd4
   19ac4:	ldr	r8, [fp, #40]	; 0x28
   19ac8:	str	r7, [fp, #-48]	; 0xffffffd0
   19acc:	umull	r2, r0, r3, r5
   19ad0:	umull	ip, r1, r2, r7
   19ad4:	str	r2, [sp, #32]
   19ad8:	mla	r1, r2, r4, r1
   19adc:	umull	r2, r4, sl, r5
   19ae0:	umlal	r2, r4, r3, lr
   19ae4:	mov	r3, lr
   19ae8:	adds	r0, r2, r0
   19aec:	mla	r7, r0, r7, r1
   19af0:	str	r0, [sp, #28]
   19af4:	umull	r0, r1, r7, r6
   19af8:	umull	r5, sl, r7, r9
   19afc:	ldr	r9, [fp, #20]
   19b00:	str	r1, [sp, #24]
   19b04:	str	r0, [sp, #36]	; 0x24
   19b08:	umull	r1, r0, r7, r8
   19b0c:	str	r1, [sp, #16]
   19b10:	str	r0, [sp, #20]
   19b14:	umull	r1, r0, ip, r6
   19b18:	umlal	r1, r0, r7, r8
   19b1c:	str	r0, [sp, #12]
   19b20:	ldr	r0, [fp, #36]	; 0x24
   19b24:	str	r1, [sp, #8]
   19b28:	ldr	r1, [fp, #32]
   19b2c:	umull	r0, r6, r7, r0
   19b30:	str	r0, [sp, #4]
   19b34:	ldr	r0, [fp, #36]	; 0x24
   19b38:	umull	r0, lr, ip, r0
   19b3c:	umlal	r0, lr, r7, r1
   19b40:	adc	r1, r4, #0
   19b44:	ldr	r7, [fp, #8]
   19b48:	str	r1, [sp, #40]	; 0x28
   19b4c:	ldr	r1, [fp, #32]
   19b50:	umull	r2, r1, ip, r1
   19b54:	adds	r0, r0, r1
   19b58:	ldr	r1, [fp, #16]
   19b5c:	str	r2, [sp, #48]	; 0x30
   19b60:	adc	r8, lr, #0
   19b64:	str	r0, [sp, #44]	; 0x2c
   19b68:	subs	r0, r0, r5
   19b6c:	ldr	lr, [fp, #-40]	; 0xffffffd8
   19b70:	sbcs	r0, r8, sl
   19b74:	mov	r0, #0
   19b78:	movwcc	r0, #1
   19b7c:	mov	r2, r1
   19b80:	cmp	r0, #0
   19b84:	umull	r4, r0, r9, r7
   19b88:	umlal	r4, r0, r1, r3
   19b8c:	umull	r1, r5, r1, r7
   19b90:	addne	r6, r6, #1
   19b94:	mov	r7, #0
   19b98:	adds	sl, r4, r5
   19b9c:	str	r1, [sp]
   19ba0:	adc	r1, r0, #0
   19ba4:	umull	r5, r0, r2, r3
   19ba8:	subs	r5, sl, r5
   19bac:	sbcs	r0, r1, r0
   19bb0:	movwcc	r7, #1
   19bb4:	umull	r5, r0, r9, r3
   19bb8:	cmp	r7, #0
   19bbc:	addne	r0, r0, #1
   19bc0:	adds	r3, r5, r1
   19bc4:	ldr	r1, [fp, #16]
   19bc8:	umull	r7, r5, r9, lr
   19bcc:	adc	r2, r0, #0
   19bd0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19bd4:	umlal	r7, r5, r1, r0
   19bd8:	umull	r1, r9, r1, lr
   19bdc:	adds	r7, r7, r9
   19be0:	str	r1, [sp, #56]	; 0x38
   19be4:	adc	r0, r5, #0
   19be8:	adds	r3, r3, r1
   19bec:	str	r7, [sp, #52]	; 0x34
   19bf0:	ldr	r5, [sp, #24]
   19bf4:	str	r0, [fp, #-52]	; 0xffffffcc
   19bf8:	adc	r0, r2, r7
   19bfc:	ldr	r2, [sp, #4]
   19c00:	adds	r1, r3, r8
   19c04:	ldr	r3, [sp, #12]
   19c08:	adc	r0, r0, #0
   19c0c:	adds	r8, r1, r2
   19c10:	ldr	r2, [fp, #40]	; 0x28
   19c14:	adc	r1, r0, r6
   19c18:	adds	r9, r8, #1
   19c1c:	ldr	r6, [fp, #8]
   19c20:	adc	r0, r1, #0
   19c24:	umull	r2, r7, ip, r2
   19c28:	ldr	ip, [sp, #28]
   19c2c:	ldr	r2, [sp, #8]
   19c30:	adds	r2, r2, r7
   19c34:	adc	r7, r3, #0
   19c38:	ldr	r3, [sp, #16]
   19c3c:	subs	r2, r2, r3
   19c40:	ldr	r3, [fp, #16]
   19c44:	ldr	r2, [sp, #20]
   19c48:	sbcs	r2, r7, r2
   19c4c:	mov	r2, #0
   19c50:	movwcc	r2, #1
   19c54:	cmp	r2, #0
   19c58:	ldr	r2, [sp, #32]
   19c5c:	addne	r5, r5, #1
   19c60:	orrs	r2, r2, ip
   19c64:	mov	r2, #1
   19c68:	umlal	r2, r4, r3, r6
   19c6c:	ldr	r3, [sp]
   19c70:	moveq	r4, sl
   19c74:	moveq	r2, r3
   19c78:	ldr	r3, [sp, #36]	; 0x24
   19c7c:	adds	r7, r7, r2
   19c80:	adc	r6, r4, #0
   19c84:	adds	r7, r7, r3
   19c88:	ldr	r3, [fp, #12]
   19c8c:	adc	r6, r6, r5
   19c90:	subs	r2, r7, r2
   19c94:	ldr	r5, [sp, #40]	; 0x28
   19c98:	sbcs	r2, r6, r4
   19c9c:	ldr	r4, [fp, #28]
   19ca0:	mov	r2, #0
   19ca4:	movwcc	r2, #1
   19ca8:	cmp	r2, #0
   19cac:	moveq	r0, r1
   19cb0:	ldr	r1, [fp, #24]
   19cb4:	moveq	r9, r8
   19cb8:	umull	r1, r2, r1, r3
   19cbc:	subs	r1, ip, r1
   19cc0:	sbcs	r1, r5, r2
   19cc4:	umull	r2, r3, r4, r3
   19cc8:	mov	r1, #0
   19ccc:	movwcc	r1, #1
   19cd0:	cmp	r1, #0
   19cd4:	addne	r3, r3, #1
   19cd8:	adds	r1, r2, r5
   19cdc:	mov	r5, r4
   19ce0:	adc	r2, r3, #0
   19ce4:	adds	r1, r1, r7
   19ce8:	ldr	r3, [fp, #24]
   19cec:	adcs	r2, r2, r6
   19cf0:	umull	r7, r6, r4, lr
   19cf4:	adcs	r9, r9, #0
   19cf8:	adc	ip, r0, #0
   19cfc:	ldr	r0, [sp, #48]	; 0x30
   19d00:	adds	sl, r1, r0
   19d04:	ldr	r0, [sp, #44]	; 0x2c
   19d08:	adcs	r2, r2, r0
   19d0c:	umull	r4, r0, r3, lr
   19d10:	mrs	r8, CPSR
   19d14:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19d18:	umlal	r7, r6, r3, r1
   19d1c:	adds	r0, r7, r0
   19d20:	adc	r7, r6, #0
   19d24:	umull	r6, r3, r3, r1
   19d28:	subs	r6, r0, r6
   19d2c:	sbcs	r3, r7, r3
   19d30:	umull	r6, r5, r5, r1
   19d34:	mov	r3, #0
   19d38:	movwcc	r3, #1
   19d3c:	cmp	r3, #0
   19d40:	addne	r5, r5, #1
   19d44:	adds	r3, r6, r7
   19d48:	adc	r5, r5, #0
   19d4c:	adds	r7, sl, r4
   19d50:	adcs	r6, r2, r0
   19d54:	str	r7, [sp, #36]	; 0x24
   19d58:	adcs	r0, r3, #0
   19d5c:	str	r6, [sp, #32]
   19d60:	str	r0, [fp, #-40]	; 0xffffffd8
   19d64:	adc	r0, r5, #0
   19d68:	str	r0, [sp, #48]	; 0x30
   19d6c:	msr	CPSR_f, r8
   19d70:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19d74:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19d78:	adcs	r5, r9, #0
   19d7c:	adc	r8, ip, #0
   19d80:	str	r5, [sp, #16]
   19d84:	umull	lr, r0, r7, r2
   19d88:	mla	r0, r7, r1, r0
   19d8c:	ldr	r1, [fp, #36]	; 0x24
   19d90:	mla	r0, r6, r2, r0
   19d94:	ldr	r2, [fp, #32]
   19d98:	ldr	r6, [fp, #40]	; 0x28
   19d9c:	umull	r1, r3, lr, r1
   19da0:	umlal	r1, r3, r0, r2
   19da4:	ldr	r2, [fp, #32]
   19da8:	umull	r2, r4, lr, r2
   19dac:	str	r2, [fp, #-44]	; 0xffffffd4
   19db0:	adds	r2, r1, r4
   19db4:	ldr	r1, [fp, #32]
   19db8:	adc	r9, r3, #0
   19dbc:	str	r2, [fp, #-48]	; 0xffffffd0
   19dc0:	umull	r1, r3, r0, r1
   19dc4:	subs	r1, r2, r1
   19dc8:	sbcs	r1, r9, r3
   19dcc:	mov	r3, #0
   19dd0:	ldr	r1, [fp, #44]	; 0x2c
   19dd4:	movwcc	r3, #1
   19dd8:	cmp	r3, #0
   19ddc:	umull	r4, sl, lr, r1
   19de0:	umull	r2, r7, r0, r1
   19de4:	ldr	r1, [fp, #36]	; 0x24
   19de8:	str	r7, [sp, #40]	; 0x28
   19dec:	str	r2, [sp, #44]	; 0x2c
   19df0:	umull	r7, r2, r0, r6
   19df4:	umlal	r4, sl, r0, r6
   19df8:	mov	r6, r8
   19dfc:	str	r2, [sp, #28]
   19e00:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19e04:	str	r7, [sp, #24]
   19e08:	umull	r0, ip, r0, r1
   19e0c:	str	r0, [sp, #20]
   19e10:	ldr	r0, [sp, #56]	; 0x38
   19e14:	addne	ip, ip, #1
   19e18:	subs	r3, r5, r0
   19e1c:	ldr	r5, [sp, #52]	; 0x34
   19e20:	ldr	r0, [fp, #16]
   19e24:	sbcs	r3, r8, r5
   19e28:	umull	r8, r1, r0, r2
   19e2c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   19e30:	mov	r3, #0
   19e34:	movwcc	r3, #1
   19e38:	subs	r7, r5, r8
   19e3c:	ldr	r5, [fp, #20]
   19e40:	sbcs	r1, r0, r1
   19e44:	mov	r1, #0
   19e48:	movwcc	r1, #1
   19e4c:	umull	r8, r7, r5, r2
   19e50:	ldr	r2, [sp, #20]
   19e54:	ldr	r5, [sp, #36]	; 0x24
   19e58:	cmp	r1, #0
   19e5c:	addne	r7, r7, #1
   19e60:	adds	r8, r8, r0
   19e64:	adc	r7, r7, #0
   19e68:	adds	r1, r8, #1
   19e6c:	adc	r0, r7, #0
   19e70:	cmp	r3, #0
   19e74:	mov	r3, r6
   19e78:	moveq	r1, r8
   19e7c:	moveq	r0, r7
   19e80:	adds	r1, r1, r9
   19e84:	adc	r0, r0, #0
   19e88:	adds	r8, r1, r2
   19e8c:	adc	r1, r0, ip
   19e90:	ldr	ip, [sp, #16]
   19e94:	adds	r0, r8, #1
   19e98:	adc	r9, r1, #0
   19e9c:	adds	r2, ip, #1
   19ea0:	adc	r7, r6, #0
   19ea4:	ldr	r6, [sp, #32]
   19ea8:	orrs	r5, r5, r6
   19eac:	moveq	r7, r3
   19eb0:	ldr	r3, [fp, #40]	; 0x28
   19eb4:	moveq	r2, ip
   19eb8:	ldr	ip, [sp, #24]
   19ebc:	umull	r5, r6, lr, r3
   19ec0:	ldr	lr, [fp, #36]	; 0x24
   19ec4:	adds	r6, r4, r6
   19ec8:	adc	r5, sl, #0
   19ecc:	ldr	sl, [fp, #32]
   19ed0:	adds	r4, r5, r2
   19ed4:	adc	r3, r7, #0
   19ed8:	subs	r6, r6, ip
   19edc:	ldr	r6, [sp, #28]
   19ee0:	sbcs	r6, r5, r6
   19ee4:	ldr	r5, [sp, #40]	; 0x28
   19ee8:	mov	r6, #0
   19eec:	movwcc	r6, #1
   19ef0:	cmp	r6, #0
   19ef4:	ldr	r6, [sp, #44]	; 0x2c
   19ef8:	addne	r5, r5, #1
   19efc:	adds	r6, r4, r6
   19f00:	ldr	r4, [fp, #44]	; 0x2c
   19f04:	adc	r3, r3, r5
   19f08:	subs	r2, r6, r2
   19f0c:	sbcs	r2, r3, r7
   19f10:	mov	r2, #0
   19f14:	movwcc	r2, #1
   19f18:	cmp	r2, #0
   19f1c:	ldr	r2, [sp, #48]	; 0x30
   19f20:	moveq	r9, r1
   19f24:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19f28:	moveq	r0, r8
   19f2c:	adds	r1, r1, r6
   19f30:	adcs	r3, r2, r3
   19f34:	ldr	r2, [fp, #-44]	; 0xffffffd4
   19f38:	adcs	r0, r0, #0
   19f3c:	adc	r7, r9, #0
   19f40:	adds	r2, r1, r2
   19f44:	ldr	r1, [fp, #-48]	; 0xffffffd0
   19f48:	adcs	r1, r3, r1
   19f4c:	adcs	r0, r0, #0
   19f50:	adc	r3, r7, #0
   19f54:	subs	r7, sl, r0
   19f58:	sbcs	r7, lr, r3
   19f5c:	bcc	19f80 <__assert_fail@plt+0x8550>
   19f60:	ldr	r7, [fp, #40]	; 0x28
   19f64:	subs	r7, r2, r7
   19f68:	sbcs	r7, r1, r4
   19f6c:	bcc	19fac <__assert_fail@plt+0x857c>
   19f70:	eor	r7, r0, sl
   19f74:	eor	r6, r3, lr
   19f78:	orrs	r7, r7, r6
   19f7c:	bne	19fac <__assert_fail@plt+0x857c>
   19f80:	ldr	r7, [fp, #40]	; 0x28
   19f84:	subs	r2, r2, r7
   19f88:	sbcs	r1, r1, r4
   19f8c:	mov	r4, #0
   19f90:	movwcc	r4, #1
   19f94:	cmp	r4, #0
   19f98:	mvnne	r4, #0
   19f9c:	subs	r7, r4, sl
   19fa0:	sbc	r6, r4, lr
   19fa4:	adds	r0, r7, r0
   19fa8:	adc	r3, r6, r3
   19fac:	ldr	r7, [fp, #-36]	; 0xffffffdc
   19fb0:	stm	r7, {r0, r3}
   19fb4:	mov	r0, r2
   19fb8:	sub	sp, fp, #28
   19fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fc0:	movw	r0, #2813	; 0xafd
   19fc4:	movw	r1, #2704	; 0xa90
   19fc8:	movw	r3, #2844	; 0xb1c
   19fcc:	movw	r2, #993	; 0x3e1
   19fd0:	movt	r0, #2
   19fd4:	movt	r1, #2
   19fd8:	movt	r3, #2
   19fdc:	bl	11a30 <__assert_fail@plt>
   19fe0:	movw	r0, #2953	; 0xb89
   19fe4:	movw	r1, #2704	; 0xa90
   19fe8:	movw	r3, #2844	; 0xb1c
   19fec:	movw	r2, #994	; 0x3e2
   19ff0:	movt	r0, #2
   19ff4:	movt	r1, #2
   19ff8:	movt	r3, #2
   19ffc:	bl	11a30 <__assert_fail@plt>
   1a000:	movw	r0, #2984	; 0xba8
   1a004:	movw	r1, #2704	; 0xa90
   1a008:	movw	r3, #2844	; 0xb1c
   1a00c:	movw	r2, #995	; 0x3e3
   1a010:	movt	r0, #2
   1a014:	movt	r1, #2
   1a018:	movt	r3, #2
   1a01c:	bl	11a30 <__assert_fail@plt>
   1a020:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a024:	add	fp, sp, #24
   1a028:	mov	ip, r0
   1a02c:	ldr	r0, [fp, #24]
   1a030:	tst	r0, #1
   1a034:	beq	1a25c <__assert_fail@plt+0x882c>
   1a038:	mov	r5, r3
   1a03c:	ldr	r3, [fp, #12]
   1a040:	ldr	lr, [fp, #8]
   1a044:	ldr	r1, [fp, #28]
   1a048:	ldr	r7, [fp, #20]
   1a04c:	ldr	r9, [fp, #16]
   1a050:	orr	r4, lr, r2
   1a054:	orr	r6, r3, r5
   1a058:	orrs	r4, r4, r6
   1a05c:	streq	r9, [ip]
   1a060:	streq	r7, [ip, #4]
   1a064:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a068:	tst	lr, #1
   1a06c:	bne	1a098 <__assert_fail@plt+0x8668>
   1a070:	lsrs	r5, r5, #1
   1a074:	rrx	r8, r2
   1a078:	lsrs	r3, r3, #1
   1a07c:	rrx	r6, lr
   1a080:	orr	r3, r3, r2, lsl #31
   1a084:	tst	lr, #2
   1a088:	mov	r2, r8
   1a08c:	mov	lr, r6
   1a090:	beq	1a070 <__assert_fail@plt+0x8640>
   1a094:	b	1a1a8 <__assert_fail@plt+0x8778>
   1a098:	mov	r6, lr
   1a09c:	mov	r8, r2
   1a0a0:	b	1a1a8 <__assert_fail@plt+0x8778>
   1a0a4:	subs	r2, r9, r8
   1a0a8:	sbcs	r2, r7, r5
   1a0ac:	bcc	1a0cc <__assert_fail@plt+0x869c>
   1a0b0:	subs	r2, r0, r6
   1a0b4:	sbcs	r2, r1, r3
   1a0b8:	bcs	1a120 <__assert_fail@plt+0x86f0>
   1a0bc:	eor	r2, r8, r9
   1a0c0:	eor	r4, r5, r7
   1a0c4:	orrs	r2, r2, r4
   1a0c8:	bne	1a120 <__assert_fail@plt+0x86f0>
   1a0cc:	subs	lr, r8, r9
   1a0d0:	sbc	r8, r5, r7
   1a0d4:	subs	r4, lr, #1
   1a0d8:	sbc	r5, r8, #0
   1a0dc:	subs	r2, r6, r0
   1a0e0:	mov	r6, #0
   1a0e4:	sbcs	r3, r3, r1
   1a0e8:	movwcc	r6, #1
   1a0ec:	cmp	r6, #0
   1a0f0:	moveq	r4, lr
   1a0f4:	moveq	r5, r8
   1a0f8:	lsrs	r5, r5, #1
   1a0fc:	rrx	r8, r4
   1a100:	lsrs	r3, r3, #1
   1a104:	rrx	r6, r2
   1a108:	orr	r3, r3, r4, lsl #31
   1a10c:	tst	r2, #2
   1a110:	mov	r4, r8
   1a114:	mov	r2, r6
   1a118:	beq	1a0f8 <__assert_fail@plt+0x86c8>
   1a11c:	b	1a1a8 <__assert_fail@plt+0x8778>
   1a120:	subs	r2, r6, r0
   1a124:	sbcs	r2, r3, r1
   1a128:	mov	r2, #0
   1a12c:	movwcc	r2, #1
   1a130:	subs	r4, r8, r9
   1a134:	sbcs	r4, r5, r7
   1a138:	bcc	1a158 <__assert_fail@plt+0x8728>
   1a13c:	eor	lr, r8, r9
   1a140:	eor	r4, r5, r7
   1a144:	orr	r4, lr, r4
   1a148:	clz	r4, r4
   1a14c:	lsr	r4, r4, #5
   1a150:	ands	r2, r2, r4
   1a154:	beq	1a248 <__assert_fail@plt+0x8818>
   1a158:	subs	lr, r9, r8
   1a15c:	sbc	r9, r7, r5
   1a160:	subs	r2, lr, #1
   1a164:	sbc	r7, r9, #0
   1a168:	subs	r4, r0, r6
   1a16c:	mov	r0, #0
   1a170:	sbcs	r1, r1, r3
   1a174:	movwcc	r0, #1
   1a178:	cmp	r0, #0
   1a17c:	moveq	r2, lr
   1a180:	moveq	r7, r9
   1a184:	lsrs	r7, r7, #1
   1a188:	rrx	r9, r2
   1a18c:	lsrs	r1, r1, #1
   1a190:	rrx	r0, r4
   1a194:	orr	r1, r1, r2, lsl #31
   1a198:	tst	r4, #2
   1a19c:	mov	r2, r9
   1a1a0:	mov	r4, r0
   1a1a4:	beq	1a184 <__assert_fail@plt+0x8754>
   1a1a8:	orr	r2, r8, r9
   1a1ac:	orr	r4, r5, r7
   1a1b0:	orrs	r2, r2, r4
   1a1b4:	bne	1a0a4 <__assert_fail@plt+0x8674>
   1a1b8:	mov	r2, #0
   1a1bc:	mov	r5, r0
   1a1c0:	str	r2, [ip]
   1a1c4:	str	r2, [ip, #4]
   1a1c8:	ands	r2, r6, #1
   1a1cc:	mov	r2, r1
   1a1d0:	moveq	r5, r6
   1a1d4:	movne	r1, r3
   1a1d8:	movne	r0, r6
   1a1dc:	moveq	r2, r3
   1a1e0:	orr	r7, r5, r2
   1a1e4:	cmp	r7, #0
   1a1e8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a1ec:	lsrs	r3, r1, #1
   1a1f0:	rrx	r0, r0
   1a1f4:	b	1a22c <__assert_fail@plt+0x87fc>
   1a1f8:	subs	r6, r5, r0
   1a1fc:	sbc	r4, r2, r3
   1a200:	orrs	r2, r6, r4
   1a204:	orreq	r0, r7, #1
   1a208:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a20c:	eor	r1, r6, r4, asr #31
   1a210:	eor	r2, r4, r4, asr #31
   1a214:	and	r7, r4, r4, asr #31
   1a218:	subs	r5, r1, r4, asr #31
   1a21c:	and	r1, r6, r4, asr #31
   1a220:	sbc	r2, r2, r4, asr #31
   1a224:	adds	r0, r1, r0
   1a228:	adc	r3, r7, r3
   1a22c:	mov	r1, r2
   1a230:	mov	r7, r5
   1a234:	lsrs	r2, r2, #1
   1a238:	rrx	r5, r5
   1a23c:	tst	r7, #1
   1a240:	beq	1a22c <__assert_fail@plt+0x87fc>
   1a244:	b	1a1f8 <__assert_fail@plt+0x87c8>
   1a248:	mov	r0, r6
   1a24c:	mov	r1, r3
   1a250:	str	r8, [ip]
   1a254:	str	r5, [ip, #4]
   1a258:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a25c:	movw	r0, #3184	; 0xc70
   1a260:	movw	r1, #2704	; 0xa90
   1a264:	movw	r3, #3191	; 0xc77
   1a268:	mov	r2, #476	; 0x1dc
   1a26c:	movt	r0, #2
   1a270:	movt	r1, #2
   1a274:	movt	r3, #2
   1a278:	bl	11a30 <__assert_fail@plt>
   1a27c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a280:	add	fp, sp, #28
   1a284:	push	{r0}		; (str r0, [sp, #-4]!)
   1a288:	ldr	ip, [fp, #20]
   1a28c:	ldr	r0, [fp, #16]
   1a290:	orrs	r1, r0, ip
   1a294:	beq	1a48c <__assert_fail@plt+0x8a5c>
   1a298:	ldr	r1, [fp, #12]
   1a29c:	ldr	r8, [fp, #8]
   1a2a0:	mov	r9, r2
   1a2a4:	mov	sl, r3
   1a2a8:	orrs	r2, r2, r3
   1a2ac:	beq	1a470 <__assert_fail@plt+0x8a40>
   1a2b0:	mov	r3, #0
   1a2b4:	mov	r4, r0
   1a2b8:	mov	r6, ip
   1a2bc:	cmp	r3, ip, lsr #24
   1a2c0:	bne	1a2e8 <__assert_fail@plt+0x88b8>
   1a2c4:	mov	r3, #0
   1a2c8:	mov	r4, r0
   1a2cc:	mov	r6, ip
   1a2d0:	lsl	r2, r6, #8
   1a2d4:	add	r3, r3, #8
   1a2d8:	orr	r6, r2, r4, lsr #24
   1a2dc:	lsl	r4, r4, #8
   1a2e0:	cmp	r6, #16777216	; 0x1000000
   1a2e4:	bcc	1a2d0 <__assert_fail@plt+0x88a0>
   1a2e8:	mvn	r2, #0
   1a2ec:	cmp	r6, #0
   1a2f0:	blt	1a314 <__assert_fail@plt+0x88e4>
   1a2f4:	lsl	r5, r6, #1
   1a2f8:	add	r3, r3, #1
   1a2fc:	orr	r6, r5, r4, lsr #31
   1a300:	lsl	r5, r4, #1
   1a304:	subs	r4, r2, r4, lsl #1
   1a308:	sbcs	r4, r2, r6
   1a30c:	mov	r4, r5
   1a310:	blt	1a2f4 <__assert_fail@plt+0x88c4>
   1a314:	mov	r6, #0
   1a318:	mov	r4, r9
   1a31c:	mov	r7, sl
   1a320:	cmp	r6, sl, lsr #24
   1a324:	bne	1a34c <__assert_fail@plt+0x891c>
   1a328:	mov	r6, #0
   1a32c:	mov	r4, r9
   1a330:	mov	r7, sl
   1a334:	lsl	r5, r7, #8
   1a338:	add	r6, r6, #8
   1a33c:	orr	r7, r5, r4, lsr #24
   1a340:	lsl	r4, r4, #8
   1a344:	cmp	r7, #16777216	; 0x1000000
   1a348:	bcc	1a334 <__assert_fail@plt+0x8904>
   1a34c:	subs	r5, r2, r4
   1a350:	sbcs	r5, r2, r7
   1a354:	bge	1a378 <__assert_fail@plt+0x8948>
   1a358:	lsl	r5, r7, #1
   1a35c:	add	r6, r6, #1
   1a360:	orr	r7, r5, r4, lsr #31
   1a364:	lsl	r5, r4, #1
   1a368:	subs	r4, r2, r4, lsl #1
   1a36c:	sbcs	r4, r2, r7
   1a370:	mov	r4, r5
   1a374:	blt	1a358 <__assert_fail@plt+0x8928>
   1a378:	sub	lr, r3, r6
   1a37c:	cmp	lr, #1
   1a380:	blt	1a478 <__assert_fail@plt+0x8a48>
   1a384:	ldr	r7, [fp, #28]
   1a388:	rsb	r6, lr, #32
   1a38c:	sub	r3, lr, #32
   1a390:	rsb	r5, lr, #64	; 0x40
   1a394:	mov	r4, r0
   1a398:	lsr	r2, r0, r6
   1a39c:	cmp	r3, #0
   1a3a0:	orr	r2, r2, ip, lsl lr
   1a3a4:	lslge	r2, r0, r3
   1a3a8:	cmp	r6, #0
   1a3ac:	lsr	ip, r7, r5
   1a3b0:	movwge	ip, #0
   1a3b4:	cmp	r6, #0
   1a3b8:	orr	r2, ip, r2
   1a3bc:	ldr	ip, [fp, #24]
   1a3c0:	lsr	r0, ip, r5
   1a3c4:	rsb	r5, r5, #32
   1a3c8:	orr	r0, r0, r7, lsl r5
   1a3cc:	lsl	r5, r4, lr
   1a3d0:	lsrge	r0, r7, r6
   1a3d4:	cmp	r3, #0
   1a3d8:	movwge	r5, #0
   1a3dc:	orr	r5, r0, r5
   1a3e0:	lsr	r0, ip, r6
   1a3e4:	orr	r6, r0, r7, lsl lr
   1a3e8:	lsl	r7, ip, lr
   1a3ec:	lslge	r6, ip, r3
   1a3f0:	cmp	r3, #0
   1a3f4:	movwge	r7, #0
   1a3f8:	subs	r0, r5, r9
   1a3fc:	mov	r4, r5
   1a400:	sbcs	r0, r2, sl
   1a404:	bcc	1a424 <__assert_fail@plt+0x89f4>
   1a408:	subs	r0, r8, r7
   1a40c:	sbcs	r0, r1, r6
   1a410:	bcc	1a450 <__assert_fail@plt+0x8a20>
   1a414:	eor	r0, r9, r4
   1a418:	eor	r5, sl, r2
   1a41c:	orrs	r0, r0, r5
   1a420:	bne	1a450 <__assert_fail@plt+0x8a20>
   1a424:	subs	r0, r9, r4
   1a428:	mov	r3, #0
   1a42c:	sbc	r5, sl, r2
   1a430:	subs	r9, r0, #1
   1a434:	sbc	sl, r5, #0
   1a438:	subs	r8, r8, r7
   1a43c:	sbcs	r1, r1, r6
   1a440:	movwcc	r3, #1
   1a444:	cmp	r3, #0
   1a448:	moveq	r9, r0
   1a44c:	moveq	sl, r5
   1a450:	lsrs	r2, r2, #1
   1a454:	rrx	r5, r4
   1a458:	lsrs	r0, r6, #1
   1a45c:	rrx	r7, r7
   1a460:	orr	r6, r0, r4, lsl #31
   1a464:	subs	lr, lr, #1
   1a468:	bne	1a3f8 <__assert_fail@plt+0x89c8>
   1a46c:	b	1a478 <__assert_fail@plt+0x8a48>
   1a470:	mov	r9, #0
   1a474:	mov	sl, #0
   1a478:	ldr	r0, [sp]
   1a47c:	stm	r0, {r9, sl}
   1a480:	mov	r0, r8
   1a484:	sub	sp, fp, #28
   1a488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a48c:	movw	r0, #3267	; 0xcc3
   1a490:	movw	r1, #2704	; 0xa90
   1a494:	movw	r3, #3275	; 0xccb
   1a498:	movw	r2, #411	; 0x19b
   1a49c:	movt	r0, #2
   1a4a0:	movt	r1, #2
   1a4a4:	movt	r3, #2
   1a4a8:	bl	11a30 <__assert_fail@plt>
   1a4ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4b0:	add	fp, sp, #28
   1a4b4:	sub	sp, sp, #76	; 0x4c
   1a4b8:	mov	r1, #1
   1a4bc:	mov	r5, r0
   1a4c0:	mov	r7, #1
   1a4c4:	bl	119e8 <__gmpz_cmp_ui@plt>
   1a4c8:	cmp	r0, #1
   1a4cc:	blt	1a690 <__assert_fail@plt+0x8c60>
   1a4d0:	movw	r1, #60793	; 0xed79
   1a4d4:	mov	r0, r5
   1a4d8:	movt	r1, #381	; 0x17d
   1a4dc:	bl	119e8 <__gmpz_cmp_ui@plt>
   1a4e0:	cmp	r0, #0
   1a4e4:	blt	1a694 <__assert_fail@plt+0x8c64>
   1a4e8:	sub	r6, fp, #40	; 0x28
   1a4ec:	add	sl, sp, #52	; 0x34
   1a4f0:	add	r7, sp, #40	; 0x28
   1a4f4:	add	r8, sp, #28
   1a4f8:	mov	r9, #0
   1a4fc:	mov	r0, r6
   1a500:	mov	r1, sl
   1a504:	mov	r2, r7
   1a508:	mov	r3, r8
   1a50c:	str	r9, [sp]
   1a510:	bl	1173c <__gmpz_inits@plt>
   1a514:	mov	r0, r7
   1a518:	mov	r1, r5
   1a51c:	mov	r2, #1
   1a520:	bl	11688 <__gmpz_sub_ui@plt>
   1a524:	mov	r0, r7
   1a528:	mov	r1, #0
   1a52c:	bl	1164c <__gmpz_scan1@plt>
   1a530:	mov	r4, r0
   1a534:	mov	r0, r6
   1a538:	mov	r1, r7
   1a53c:	mov	r2, r4
   1a540:	bl	118f8 <__gmpz_tdiv_q_2exp@plt>
   1a544:	mov	r0, sl
   1a548:	mov	r1, #2
   1a54c:	bl	116b8 <__gmpz_set_ui@plt>
   1a550:	mov	r0, r5
   1a554:	mov	r1, r7
   1a558:	mov	r2, sl
   1a55c:	mov	r3, r8
   1a560:	str	r6, [sp]
   1a564:	str	r4, [sp, #12]
   1a568:	str	r4, [sp, #4]
   1a56c:	bl	1ac54 <__assert_fail@plt+0x9224>
   1a570:	cmp	r0, #0
   1a574:	mov	r7, #0
   1a578:	beq	1a714 <__assert_fail@plt+0x8ce4>
   1a57c:	add	r6, sp, #28
   1a580:	add	r4, sp, #40	; 0x28
   1a584:	mov	r0, r6
   1a588:	mov	r1, r4
   1a58c:	bl	11748 <__gmpz_set@plt>
   1a590:	add	r1, sp, #16
   1a594:	mov	r0, r6
   1a598:	bl	125bc <__assert_fail@plt+0xb8c>
   1a59c:	mov	r8, #0
   1a5a0:	add	r7, sp, #52	; 0x34
   1a5a4:	ldr	r0, [sp, #24]
   1a5a8:	cmp	r0, #0
   1a5ac:	beq	1a6a0 <__assert_fail@plt+0x8c70>
   1a5b0:	mov	sl, #1
   1a5b4:	mov	r9, #0
   1a5b8:	ldr	r0, [sp, #16]
   1a5bc:	mov	r1, r4
   1a5c0:	add	r2, r0, r9
   1a5c4:	mov	r0, r6
   1a5c8:	bl	11730 <__gmpz_divexact@plt>
   1a5cc:	mov	r0, r6
   1a5d0:	mov	r1, r7
   1a5d4:	mov	r2, r6
   1a5d8:	mov	r3, r5
   1a5dc:	bl	11718 <__gmpz_powm@plt>
   1a5e0:	mov	r0, r6
   1a5e4:	mov	r1, #1
   1a5e8:	bl	119e8 <__gmpz_cmp_ui@plt>
   1a5ec:	ldr	r1, [sp, #24]
   1a5f0:	cmp	r0, #0
   1a5f4:	beq	1a60c <__assert_fail@plt+0x8bdc>
   1a5f8:	add	r2, sl, #1
   1a5fc:	cmp	sl, r1
   1a600:	add	r9, r9, #12
   1a604:	mov	sl, r2
   1a608:	bcc	1a5b8 <__assert_fail@plt+0x8b88>
   1a60c:	cmp	r0, #0
   1a610:	bne	1a6ac <__assert_fail@plt+0x8c7c>
   1a614:	movw	r0, #14376	; 0x3828
   1a618:	mov	r1, r7
   1a61c:	movt	r0, #2
   1a620:	ldrb	r2, [r0, r8]
   1a624:	mov	r0, r7
   1a628:	bl	11844 <__gmpz_add_ui@plt>
   1a62c:	sub	r0, fp, #40	; 0x28
   1a630:	mov	r1, r4
   1a634:	mov	r2, r7
   1a638:	mov	r3, r6
   1a63c:	str	r0, [sp]
   1a640:	ldr	r0, [sp, #12]
   1a644:	str	r0, [sp, #4]
   1a648:	mov	r0, r5
   1a64c:	bl	1ac54 <__assert_fail@plt+0x9224>
   1a650:	cmp	r0, #0
   1a654:	beq	1a6c0 <__assert_fail@plt+0x8c90>
   1a658:	add	r8, r8, #1
   1a65c:	lsr	r0, r8, #2
   1a660:	cmp	r0, #166	; 0xa6
   1a664:	bls	1a5a4 <__assert_fail@plt+0x8b74>
   1a668:	movw	r1, #2717	; 0xa9d
   1a66c:	mov	r0, #0
   1a670:	mov	r2, #5
   1a674:	movt	r1, #2
   1a678:	bl	1170c <dcgettext@plt>
   1a67c:	mov	r2, r0
   1a680:	mov	r0, #0
   1a684:	mov	r1, #0
   1a688:	bl	117fc <error@plt>
   1a68c:	bl	11a24 <abort@plt>
   1a690:	mov	r7, #0
   1a694:	mov	r0, r7
   1a698:	sub	sp, fp, #28
   1a69c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6a0:	mov	r9, #0
   1a6a4:	mov	r7, #1
   1a6a8:	b	1a6fc <__assert_fail@plt+0x8ccc>
   1a6ac:	mov	r7, #1
   1a6b0:	cmp	r1, #0
   1a6b4:	mov	r9, #0
   1a6b8:	bne	1a6d4 <__assert_fail@plt+0x8ca4>
   1a6bc:	b	1a6fc <__assert_fail@plt+0x8ccc>
   1a6c0:	ldr	r1, [sp, #24]
   1a6c4:	mov	r7, #0
   1a6c8:	cmp	r1, #0
   1a6cc:	mov	r9, #0
   1a6d0:	beq	1a6fc <__assert_fail@plt+0x8ccc>
   1a6d4:	mov	r4, #0
   1a6d8:	mov	r5, #0
   1a6dc:	ldr	r0, [sp, #16]
   1a6e0:	add	r0, r0, r4
   1a6e4:	bl	118b0 <__gmpz_clear@plt>
   1a6e8:	ldr	r0, [sp, #24]
   1a6ec:	add	r5, r5, #1
   1a6f0:	add	r4, r4, #12
   1a6f4:	cmp	r5, r0
   1a6f8:	bcc	1a6dc <__assert_fail@plt+0x8cac>
   1a6fc:	ldr	r0, [sp, #16]
   1a700:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1a704:	ldr	r0, [sp, #20]
   1a708:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1a70c:	cmp	r7, #0
   1a710:	movwne	r7, #1
   1a714:	sub	r0, fp, #40	; 0x28
   1a718:	add	r1, sp, #52	; 0x34
   1a71c:	add	r2, sp, #40	; 0x28
   1a720:	add	r3, sp, #28
   1a724:	str	r9, [sp]
   1a728:	bl	11694 <__gmpz_clears@plt>
   1a72c:	mov	r0, r7
   1a730:	sub	sp, fp, #28
   1a734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a73c:	add	fp, sp, #28
   1a740:	sub	sp, sp, #20
   1a744:	mov	r5, r0
   1a748:	ldr	r0, [r0]
   1a74c:	mov	sl, r1
   1a750:	ldr	r4, [r5, #8]
   1a754:	ldr	r6, [r5, #4]
   1a758:	sub	r8, r4, #1
   1a75c:	cmp	r8, #0
   1a760:	mov	r9, r8
   1a764:	blt	1a7b8 <__assert_fail@plt+0x8d88>
   1a768:	add	r1, r8, r8, lsl #1
   1a76c:	str	r6, [sp, #16]
   1a770:	mov	r7, r4
   1a774:	str	r0, [sp, #12]
   1a778:	add	r6, r0, r1, lsl #2
   1a77c:	mov	r0, r6
   1a780:	mov	r1, sl
   1a784:	bl	1197c <__gmpz_cmp@plt>
   1a788:	cmp	r0, #1
   1a78c:	blt	1a7a4 <__assert_fail@plt+0x8d74>
   1a790:	sub	r7, r7, #1
   1a794:	sub	r6, r6, #12
   1a798:	cmp	r7, #0
   1a79c:	bgt	1a77c <__assert_fail@plt+0x8d4c>
   1a7a0:	b	1a7ac <__assert_fail@plt+0x8d7c>
   1a7a4:	cmp	r0, #0
   1a7a8:	beq	1a878 <__assert_fail@plt+0x8e48>
   1a7ac:	ldr	r6, [sp, #16]
   1a7b0:	ldr	r0, [sp, #12]
   1a7b4:	sub	r9, r7, #1
   1a7b8:	str	r5, [sp, #12]
   1a7bc:	add	r5, r4, r4, lsl #1
   1a7c0:	mov	r1, #12
   1a7c4:	add	r1, r1, r5, lsl #2
   1a7c8:	bl	1e1d4 <__assert_fail@plt+0xc7a4>
   1a7cc:	mov	r7, r0
   1a7d0:	add	r0, r4, #1
   1a7d4:	str	r0, [sp, #8]
   1a7d8:	lsl	r1, r0, #2
   1a7dc:	mov	r0, r6
   1a7e0:	bl	1e1d4 <__assert_fail@plt+0xc7a4>
   1a7e4:	add	r6, r7, r5, lsl #2
   1a7e8:	str	r0, [sp, #16]
   1a7ec:	str	r7, [sp, #4]
   1a7f0:	mov	r0, r6
   1a7f4:	bl	119f4 <__gmpz_init@plt>
   1a7f8:	cmp	r8, r9
   1a7fc:	ble	1a838 <__assert_fail@plt+0x8e08>
   1a800:	ldr	r0, [sp, #16]
   1a804:	add	r4, r0, r4, lsl #2
   1a808:	mov	r5, r4
   1a80c:	sub	r7, r6, #12
   1a810:	mov	r0, r6
   1a814:	mov	r1, r7
   1a818:	bl	11748 <__gmpz_set@plt>
   1a81c:	ldr	r0, [r5, #-4]!
   1a820:	sub	r8, r8, #1
   1a824:	mov	r6, r7
   1a828:	cmp	r8, r9
   1a82c:	str	r0, [r4]
   1a830:	mov	r4, r5
   1a834:	bgt	1a80c <__assert_fail@plt+0x8ddc>
   1a838:	ldr	r5, [sp, #4]
   1a83c:	add	r4, r9, #1
   1a840:	mov	r1, sl
   1a844:	add	r0, r4, r4, lsl #1
   1a848:	add	r0, r5, r0, lsl #2
   1a84c:	bl	11748 <__gmpz_set@plt>
   1a850:	ldr	r1, [sp, #16]
   1a854:	mov	r0, #1
   1a858:	str	r0, [r1, r4, lsl #2]
   1a85c:	ldr	r0, [sp, #12]
   1a860:	str	r5, [r0]
   1a864:	str	r1, [r0, #4]
   1a868:	ldr	r1, [sp, #8]
   1a86c:	str	r1, [r0, #8]
   1a870:	sub	sp, fp, #28
   1a874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a878:	ldr	r0, [sp, #16]
   1a87c:	add	r0, r0, r7, lsl #2
   1a880:	ldr	r1, [r0, #-4]
   1a884:	add	r1, r1, #1
   1a888:	str	r1, [r0, #-4]
   1a88c:	sub	sp, fp, #28
   1a890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a898:	add	fp, sp, #28
   1a89c:	sub	sp, sp, #108	; 0x6c
   1a8a0:	mov	r8, r0
   1a8a4:	movw	r0, #20972	; 0x51ec
   1a8a8:	mov	r9, r1
   1a8ac:	str	r2, [sp, #20]
   1a8b0:	movt	r0, #3
   1a8b4:	ldrb	r0, [r0]
   1a8b8:	cmp	r0, #1
   1a8bc:	bne	1a8e0 <__assert_fail@plt+0x8eb0>
   1a8c0:	movw	r0, #20952	; 0x51d8
   1a8c4:	movw	r2, #3385	; 0xd39
   1a8c8:	mov	r1, #1
   1a8cc:	mov	r3, r9
   1a8d0:	movt	r0, #3
   1a8d4:	movt	r2, #2
   1a8d8:	ldr	r0, [r0]
   1a8dc:	bl	11928 <__fprintf_chk@plt>
   1a8e0:	add	r0, sp, #48	; 0x30
   1a8e4:	add	r1, sp, #36	; 0x24
   1a8e8:	mov	r2, #0
   1a8ec:	mov	r6, #0
   1a8f0:	bl	1173c <__gmpz_inits@plt>
   1a8f4:	sub	r0, fp, #64	; 0x40
   1a8f8:	mov	r1, #2
   1a8fc:	bl	11838 <__gmpz_init_set_si@plt>
   1a900:	sub	r0, fp, #40	; 0x28
   1a904:	mov	r1, #2
   1a908:	bl	11838 <__gmpz_init_set_si@plt>
   1a90c:	sub	r0, fp, #52	; 0x34
   1a910:	mov	r1, #2
   1a914:	bl	11838 <__gmpz_init_set_si@plt>
   1a918:	add	r0, sp, #60	; 0x3c
   1a91c:	mov	r1, #1
   1a920:	mov	r4, #1
   1a924:	bl	11970 <__gmpz_init_set_ui@plt>
   1a928:	mov	r0, r8
   1a92c:	mov	r1, #1
   1a930:	bl	119e8 <__gmpz_cmp_ui@plt>
   1a934:	cmp	r0, #0
   1a938:	beq	1ac20 <__assert_fail@plt+0x91f0>
   1a93c:	add	r0, r9, #1
   1a940:	add	r7, sp, #48	; 0x30
   1a944:	sub	r5, fp, #40	; 0x28
   1a948:	str	r0, [sp, #16]
   1a94c:	mov	r0, #1
   1a950:	str	r0, [sp, #24]
   1a954:	mov	r0, #0
   1a958:	str	r0, [sp, #28]
   1a95c:	b	1a990 <__assert_fail@plt+0x8f60>
   1a960:	ldr	r0, [sp, #32]
   1a964:	mov	r1, r5
   1a968:	orr	sl, r0, r6, lsr #31
   1a96c:	lsl	r0, r6, #1
   1a970:	str	r0, [sp, #32]
   1a974:	sub	r0, fp, #64	; 0x40
   1a978:	bl	11748 <__gmpz_set@plt>
   1a97c:	ldr	r0, [sp, #32]
   1a980:	mov	r4, r6
   1a984:	ldr	r6, [sp, #28]
   1a988:	str	sl, [sp, #28]
   1a98c:	str	r0, [sp, #24]
   1a990:	mov	r0, r7
   1a994:	mov	r1, r5
   1a998:	mov	r2, r5
   1a99c:	str	r6, [sp, #32]
   1a9a0:	bl	11760 <__gmpz_mul@plt>
   1a9a4:	mov	r0, r5
   1a9a8:	mov	r1, r7
   1a9ac:	mov	r2, r8
   1a9b0:	bl	11964 <__gmpz_mod@plt>
   1a9b4:	mov	r0, r5
   1a9b8:	mov	r1, r5
   1a9bc:	mov	r2, r9
   1a9c0:	bl	11844 <__gmpz_add_ui@plt>
   1a9c4:	mov	r0, r7
   1a9c8:	sub	r1, fp, #52	; 0x34
   1a9cc:	mov	r2, r5
   1a9d0:	bl	116e8 <__gmpz_sub@plt>
   1a9d4:	add	r6, sp, #36	; 0x24
   1a9d8:	mov	sl, r5
   1a9dc:	add	r5, sp, #60	; 0x3c
   1a9e0:	mov	r2, r7
   1a9e4:	mov	r0, r6
   1a9e8:	mov	r1, r5
   1a9ec:	bl	11760 <__gmpz_mul@plt>
   1a9f0:	mov	r0, r5
   1a9f4:	mov	r1, r6
   1a9f8:	mov	r2, r8
   1a9fc:	mov	r5, sl
   1aa00:	bl	11964 <__gmpz_mod@plt>
   1aa04:	and	r0, r4, #31
   1aa08:	teq	r0, #1
   1aa0c:	bne	1aa44 <__assert_fail@plt+0x9014>
   1aa10:	mov	r0, r7
   1aa14:	add	r1, sp, #60	; 0x3c
   1aa18:	mov	r2, r8
   1aa1c:	bl	119c4 <__gmpz_gcd@plt>
   1aa20:	mov	r0, r7
   1aa24:	mov	r1, #1
   1aa28:	bl	119e8 <__gmpz_cmp_ui@plt>
   1aa2c:	cmp	r0, #0
   1aa30:	sub	r6, fp, #64	; 0x40
   1aa34:	bne	1aad4 <__assert_fail@plt+0x90a4>
   1aa38:	mov	r0, r6
   1aa3c:	mov	r1, r5
   1aa40:	bl	11748 <__gmpz_set@plt>
   1aa44:	ldr	r6, [sp, #32]
   1aa48:	subs	r4, r4, #1
   1aa4c:	sbc	r6, r6, #0
   1aa50:	orrs	r0, r4, r6
   1aa54:	bne	1a990 <__assert_fail@plt+0x8f60>
   1aa58:	sub	r0, fp, #52	; 0x34
   1aa5c:	mov	r1, r5
   1aa60:	bl	11748 <__gmpz_set@plt>
   1aa64:	ldr	r0, [sp, #28]
   1aa68:	ldr	r6, [sp, #24]
   1aa6c:	lsl	r1, r0, #1
   1aa70:	str	r0, [sp, #28]
   1aa74:	orrs	r0, r6, r0
   1aa78:	str	r1, [sp, #32]
   1aa7c:	beq	1a960 <__assert_fail@plt+0x8f30>
   1aa80:	mov	r4, #0
   1aa84:	mov	sl, #0
   1aa88:	mov	r0, r7
   1aa8c:	mov	r1, r5
   1aa90:	mov	r2, r5
   1aa94:	bl	11760 <__gmpz_mul@plt>
   1aa98:	mov	r0, r5
   1aa9c:	mov	r1, r7
   1aaa0:	mov	r2, r8
   1aaa4:	bl	11964 <__gmpz_mod@plt>
   1aaa8:	mov	r0, r5
   1aaac:	mov	r1, r5
   1aab0:	mov	r2, r9
   1aab4:	bl	11844 <__gmpz_add_ui@plt>
   1aab8:	adds	r4, r4, #1
   1aabc:	adc	sl, sl, #0
   1aac0:	subs	r0, r4, r6
   1aac4:	ldr	r0, [sp, #28]
   1aac8:	sbcs	r0, sl, r0
   1aacc:	bcc	1aa88 <__assert_fail@plt+0x9058>
   1aad0:	b	1a960 <__assert_fail@plt+0x8f30>
   1aad4:	mov	r0, r7
   1aad8:	mov	r1, r6
   1aadc:	mov	r2, r6
   1aae0:	bl	11760 <__gmpz_mul@plt>
   1aae4:	mov	r0, r6
   1aae8:	mov	r1, r7
   1aaec:	mov	r2, r8
   1aaf0:	bl	11964 <__gmpz_mod@plt>
   1aaf4:	mov	r0, r6
   1aaf8:	mov	r1, r6
   1aafc:	mov	r2, r9
   1ab00:	bl	11844 <__gmpz_add_ui@plt>
   1ab04:	mov	r0, r7
   1ab08:	sub	r1, fp, #52	; 0x34
   1ab0c:	mov	r2, r6
   1ab10:	bl	116e8 <__gmpz_sub@plt>
   1ab14:	mov	r0, r7
   1ab18:	mov	r1, r7
   1ab1c:	mov	r2, r8
   1ab20:	bl	119c4 <__gmpz_gcd@plt>
   1ab24:	mov	r0, r7
   1ab28:	mov	r1, #1
   1ab2c:	bl	119e8 <__gmpz_cmp_ui@plt>
   1ab30:	cmp	r0, #0
   1ab34:	beq	1aad4 <__assert_fail@plt+0x90a4>
   1ab38:	mov	r0, r8
   1ab3c:	mov	r1, r8
   1ab40:	mov	r2, r7
   1ab44:	bl	11730 <__gmpz_divexact@plt>
   1ab48:	mov	r0, r7
   1ab4c:	bl	1a4ac <__assert_fail@plt+0x8a7c>
   1ab50:	cmp	r0, #0
   1ab54:	beq	1ab78 <__assert_fail@plt+0x9148>
   1ab58:	ldr	r0, [sp, #20]
   1ab5c:	mov	r1, r7
   1ab60:	bl	1a738 <__assert_fail@plt+0x8d08>
   1ab64:	mov	r0, r8
   1ab68:	bl	1a4ac <__assert_fail@plt+0x8a7c>
   1ab6c:	cmp	r0, #0
   1ab70:	beq	1abc8 <__assert_fail@plt+0x9198>
   1ab74:	b	1ac14 <__assert_fail@plt+0x91e4>
   1ab78:	movw	r0, #20972	; 0x51ec
   1ab7c:	movt	r0, #3
   1ab80:	ldrb	r0, [r0]
   1ab84:	cmp	r0, #1
   1ab88:	bne	1aba8 <__assert_fail@plt+0x9178>
   1ab8c:	movw	r0, #20952	; 0x51d8
   1ab90:	movw	r2, #3406	; 0xd4e
   1ab94:	mov	r1, #1
   1ab98:	movt	r0, #3
   1ab9c:	movt	r2, #2
   1aba0:	ldr	r0, [r0]
   1aba4:	bl	11928 <__fprintf_chk@plt>
   1aba8:	ldr	r1, [sp, #16]
   1abac:	ldr	r2, [sp, #20]
   1abb0:	mov	r0, r7
   1abb4:	bl	1a894 <__assert_fail@plt+0x8e64>
   1abb8:	mov	r0, r8
   1abbc:	bl	1a4ac <__assert_fail@plt+0x8a7c>
   1abc0:	cmp	r0, #0
   1abc4:	bne	1ac14 <__assert_fail@plt+0x91e4>
   1abc8:	mov	r0, r5
   1abcc:	mov	r1, r5
   1abd0:	mov	r2, r8
   1abd4:	bl	11964 <__gmpz_mod@plt>
   1abd8:	sub	r0, fp, #52	; 0x34
   1abdc:	mov	r2, r8
   1abe0:	mov	r1, r0
   1abe4:	bl	11964 <__gmpz_mod@plt>
   1abe8:	mov	r0, r6
   1abec:	mov	r1, r6
   1abf0:	mov	r2, r8
   1abf4:	bl	11964 <__gmpz_mod@plt>
   1abf8:	mov	r0, r8
   1abfc:	mov	r1, #1
   1ac00:	bl	119e8 <__gmpz_cmp_ui@plt>
   1ac04:	ldr	r6, [sp, #32]
   1ac08:	cmp	r0, #0
   1ac0c:	bne	1a990 <__assert_fail@plt+0x8f60>
   1ac10:	b	1ac20 <__assert_fail@plt+0x91f0>
   1ac14:	ldr	r0, [sp, #20]
   1ac18:	mov	r1, r8
   1ac1c:	bl	1a738 <__assert_fail@plt+0x8d08>
   1ac20:	sub	r1, fp, #40	; 0x28
   1ac24:	mov	r0, #0
   1ac28:	add	r2, sp, #48	; 0x30
   1ac2c:	sub	r3, fp, #52	; 0x34
   1ac30:	str	r1, [sp]
   1ac34:	sub	r1, fp, #64	; 0x40
   1ac38:	str	r0, [sp, #8]
   1ac3c:	add	r0, sp, #60	; 0x3c
   1ac40:	str	r1, [sp, #4]
   1ac44:	add	r1, sp, #36	; 0x24
   1ac48:	bl	11694 <__gmpz_clears@plt>
   1ac4c:	sub	sp, fp, #28
   1ac50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ac58:	add	fp, sp, #24
   1ac5c:	mov	r4, r3
   1ac60:	mov	r3, r2
   1ac64:	ldr	r2, [fp, #8]
   1ac68:	mov	r7, r0
   1ac6c:	mov	r6, r1
   1ac70:	mov	r1, r3
   1ac74:	mov	r0, r4
   1ac78:	mov	r3, r7
   1ac7c:	bl	11718 <__gmpz_powm@plt>
   1ac80:	mov	r0, r4
   1ac84:	mov	r1, #1
   1ac88:	mov	r8, #1
   1ac8c:	bl	119e8 <__gmpz_cmp_ui@plt>
   1ac90:	cmp	r0, #0
   1ac94:	beq	1ad0c <__assert_fail@plt+0x92dc>
   1ac98:	mov	r0, r4
   1ac9c:	mov	r1, r6
   1aca0:	bl	1197c <__gmpz_cmp@plt>
   1aca4:	cmp	r0, #0
   1aca8:	beq	1ad0c <__assert_fail@plt+0x92dc>
   1acac:	ldr	r9, [fp, #12]
   1acb0:	mov	r8, #0
   1acb4:	cmp	r9, #2
   1acb8:	bcc	1ad0c <__assert_fail@plt+0x92dc>
   1acbc:	mov	r5, #2
   1acc0:	mov	r0, r4
   1acc4:	mov	r1, r4
   1acc8:	mov	r2, #2
   1accc:	mov	r3, r7
   1acd0:	bl	11a00 <__gmpz_powm_ui@plt>
   1acd4:	mov	r0, r4
   1acd8:	mov	r1, r6
   1acdc:	bl	1197c <__gmpz_cmp@plt>
   1ace0:	cmp	r0, #0
   1ace4:	beq	1ad14 <__assert_fail@plt+0x92e4>
   1ace8:	mov	r0, r4
   1acec:	mov	r1, #1
   1acf0:	bl	119e8 <__gmpz_cmp_ui@plt>
   1acf4:	cmp	r0, #0
   1acf8:	beq	1ad0c <__assert_fail@plt+0x92dc>
   1acfc:	add	r0, r5, #1
   1ad00:	cmp	r5, r9
   1ad04:	mov	r5, r0
   1ad08:	bcc	1acc0 <__assert_fail@plt+0x9290>
   1ad0c:	mov	r0, r8
   1ad10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ad14:	mov	r8, #1
   1ad18:	mov	r0, r8
   1ad1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ad20:	movw	r1, #20984	; 0x51f8
   1ad24:	movt	r1, #3
   1ad28:	str	r0, [r1, #4]
   1ad2c:	bx	lr
   1ad30:	movw	r1, #20984	; 0x51f8
   1ad34:	movt	r1, #3
   1ad38:	strb	r0, [r1]
   1ad3c:	bx	lr
   1ad40:	push	{r4, r5, r6, sl, fp, lr}
   1ad44:	add	fp, sp, #16
   1ad48:	sub	sp, sp, #8
   1ad4c:	movw	r0, #20964	; 0x51e4
   1ad50:	movt	r0, #3
   1ad54:	ldr	r0, [r0]
   1ad58:	bl	1e908 <__assert_fail@plt+0xced8>
   1ad5c:	cmp	r0, #0
   1ad60:	beq	1ad88 <__assert_fail@plt+0x9358>
   1ad64:	movw	r5, #20984	; 0x51f8
   1ad68:	movt	r5, #3
   1ad6c:	ldrb	r0, [r5]
   1ad70:	cmp	r0, #0
   1ad74:	beq	1adb4 <__assert_fail@plt+0x9384>
   1ad78:	bl	118bc <__errno_location@plt>
   1ad7c:	ldr	r0, [r0]
   1ad80:	cmp	r0, #32
   1ad84:	bne	1adb4 <__assert_fail@plt+0x9384>
   1ad88:	movw	r0, #20952	; 0x51d8
   1ad8c:	movt	r0, #3
   1ad90:	ldr	r0, [r0]
   1ad94:	bl	1e908 <__assert_fail@plt+0xced8>
   1ad98:	cmp	r0, #0
   1ad9c:	subeq	sp, fp, #16
   1ada0:	popeq	{r4, r5, r6, sl, fp, pc}
   1ada4:	movw	r0, #20864	; 0x5180
   1ada8:	movt	r0, #3
   1adac:	ldr	r0, [r0]
   1adb0:	bl	116d0 <_exit@plt>
   1adb4:	movw	r1, #2556	; 0x9fc
   1adb8:	mov	r0, #0
   1adbc:	mov	r2, #5
   1adc0:	movt	r1, #2
   1adc4:	bl	1170c <dcgettext@plt>
   1adc8:	ldr	r6, [r5, #4]
   1adcc:	mov	r4, r0
   1add0:	bl	118bc <__errno_location@plt>
   1add4:	ldr	r5, [r0]
   1add8:	cmp	r6, #0
   1addc:	bne	1adf8 <__assert_fail@plt+0x93c8>
   1ade0:	movw	r2, #15873	; 0x3e01
   1ade4:	mov	r0, #0
   1ade8:	mov	r1, r5
   1adec:	mov	r3, r4
   1adf0:	movt	r2, #2
   1adf4:	b	1ae18 <__assert_fail@plt+0x93e8>
   1adf8:	mov	r0, r6
   1adfc:	bl	1d110 <__assert_fail@plt+0xb6e0>
   1ae00:	movw	r2, #15869	; 0x3dfd
   1ae04:	mov	r3, r0
   1ae08:	str	r4, [sp]
   1ae0c:	mov	r0, #0
   1ae10:	mov	r1, r5
   1ae14:	movt	r2, #2
   1ae18:	bl	117fc <error@plt>
   1ae1c:	movw	r0, #20864	; 0x5180
   1ae20:	movt	r0, #3
   1ae24:	ldr	r0, [r0]
   1ae28:	bl	116d0 <_exit@plt>
   1ae2c:	push	{r4, r5, r6, sl, fp, lr}
   1ae30:	add	fp, sp, #16
   1ae34:	mov	r4, r0
   1ae38:	bl	118bc <__errno_location@plt>
   1ae3c:	ldr	r6, [r0]
   1ae40:	mov	r5, r0
   1ae44:	mov	r0, r4
   1ae48:	bl	116c4 <free@plt>
   1ae4c:	str	r6, [r5]
   1ae50:	pop	{r4, r5, r6, sl, fp, pc}
   1ae54:	push	{r4, r5, r6, r7, fp, lr}
   1ae58:	add	fp, sp, #16
   1ae5c:	cmp	r2, #0
   1ae60:	moveq	r4, #0
   1ae64:	moveq	r0, r4
   1ae68:	popeq	{r4, r5, r6, r7, fp, pc}
   1ae6c:	mov	r5, r2
   1ae70:	mov	r6, r1
   1ae74:	mov	r7, r0
   1ae78:	mov	r4, #0
   1ae7c:	mov	r0, r7
   1ae80:	mov	r1, r6
   1ae84:	mov	r2, r5
   1ae88:	bl	1d798 <__assert_fail@plt+0xbd68>
   1ae8c:	cmn	r0, #1
   1ae90:	beq	1aeac <__assert_fail@plt+0x947c>
   1ae94:	cmp	r0, #0
   1ae98:	beq	1aeb4 <__assert_fail@plt+0x9484>
   1ae9c:	subs	r5, r5, r0
   1aea0:	add	r6, r6, r0
   1aea4:	add	r4, r0, r4
   1aea8:	bne	1ae7c <__assert_fail@plt+0x944c>
   1aeac:	mov	r0, r4
   1aeb0:	pop	{r4, r5, r6, r7, fp, pc}
   1aeb4:	bl	118bc <__errno_location@plt>
   1aeb8:	mov	r1, #28
   1aebc:	str	r1, [r0]
   1aec0:	mov	r0, r4
   1aec4:	pop	{r4, r5, r6, r7, fp, pc}
   1aec8:	push	{r4, r5, r6, sl, fp, lr}
   1aecc:	add	fp, sp, #16
   1aed0:	mov	r5, r0
   1aed4:	mov	r0, #0
   1aed8:	mov	r4, r1
   1aedc:	add	r6, r2, #19
   1aee0:	strb	r0, [r2, #20]
   1aee4:	mov	r0, r5
   1aee8:	mov	r1, r4
   1aeec:	mov	r2, #10
   1aef0:	mov	r3, #0
   1aef4:	bl	20514 <__assert_fail@plt+0xeae4>
   1aef8:	add	r2, r0, r0, lsl #2
   1aefc:	sub	r2, r5, r2, lsl #1
   1af00:	orr	r2, r2, #48	; 0x30
   1af04:	strb	r2, [r6], #-1
   1af08:	rsbs	r2, r5, #9
   1af0c:	mov	r5, r0
   1af10:	rscs	r2, r4, #0
   1af14:	mov	r4, r1
   1af18:	bcc	1aee4 <__assert_fail@plt+0x94b4>
   1af1c:	add	r0, r6, #1
   1af20:	pop	{r4, r5, r6, sl, fp, pc}
   1af24:	push	{r4, r5, fp, lr}
   1af28:	add	fp, sp, #8
   1af2c:	cmp	r0, #0
   1af30:	beq	1afc4 <__assert_fail@plt+0x9594>
   1af34:	mov	r1, #47	; 0x2f
   1af38:	mov	r4, r0
   1af3c:	bl	119ac <strrchr@plt>
   1af40:	cmp	r0, #0
   1af44:	mov	r5, r4
   1af48:	addne	r5, r0, #1
   1af4c:	sub	r0, r5, r4
   1af50:	cmp	r0, #7
   1af54:	blt	1afa8 <__assert_fail@plt+0x9578>
   1af58:	movw	r1, #15932	; 0x3e3c
   1af5c:	sub	r0, r5, #7
   1af60:	mov	r2, #7
   1af64:	movt	r1, #2
   1af68:	bl	11a18 <strncmp@plt>
   1af6c:	cmp	r0, #0
   1af70:	bne	1afa8 <__assert_fail@plt+0x9578>
   1af74:	movw	r1, #15940	; 0x3e44
   1af78:	mov	r0, r5
   1af7c:	mov	r2, #3
   1af80:	movt	r1, #2
   1af84:	bl	11a18 <strncmp@plt>
   1af88:	cmp	r0, #0
   1af8c:	beq	1af98 <__assert_fail@plt+0x9568>
   1af90:	mov	r4, r5
   1af94:	b	1afa8 <__assert_fail@plt+0x9578>
   1af98:	movw	r0, #20936	; 0x51c8
   1af9c:	add	r4, r5, #3
   1afa0:	movt	r0, #3
   1afa4:	str	r4, [r0]
   1afa8:	movw	r0, #20940	; 0x51cc
   1afac:	movt	r0, #3
   1afb0:	str	r4, [r0]
   1afb4:	movw	r0, #20992	; 0x5200
   1afb8:	movt	r0, #3
   1afbc:	str	r4, [r0]
   1afc0:	pop	{r4, r5, fp, pc}
   1afc4:	movw	r0, #20952	; 0x51d8
   1afc8:	mov	r1, #55	; 0x37
   1afcc:	mov	r2, #1
   1afd0:	movt	r0, #3
   1afd4:	ldr	r3, [r0]
   1afd8:	movw	r0, #15876	; 0x3e04
   1afdc:	movt	r0, #2
   1afe0:	bl	117b4 <fwrite@plt>
   1afe4:	bl	11a24 <abort@plt>
   1afe8:	push	{r4, r5, r6, sl, fp, lr}
   1afec:	add	fp, sp, #16
   1aff0:	sub	sp, sp, #8
   1aff4:	mov	r4, r0
   1aff8:	mov	r0, #0
   1affc:	mov	r2, #5
   1b000:	mov	r1, r4
   1b004:	bl	1170c <dcgettext@plt>
   1b008:	cmp	r0, r4
   1b00c:	beq	1b034 <__assert_fail@plt+0x9604>
   1b010:	mov	r1, r4
   1b014:	mov	r5, r0
   1b018:	bl	1b090 <__assert_fail@plt+0x9660>
   1b01c:	cmp	r0, #0
   1b020:	beq	1b044 <__assert_fail@plt+0x9614>
   1b024:	mov	r6, r5
   1b028:	mov	r0, r6
   1b02c:	sub	sp, fp, #16
   1b030:	pop	{r4, r5, r6, sl, fp, pc}
   1b034:	mov	r6, r4
   1b038:	mov	r0, r6
   1b03c:	sub	sp, fp, #16
   1b040:	pop	{r4, r5, r6, sl, fp, pc}
   1b044:	mov	r0, r5
   1b048:	bl	1188c <strlen@plt>
   1b04c:	mov	r6, r0
   1b050:	mov	r0, r4
   1b054:	bl	1188c <strlen@plt>
   1b058:	add	r0, r6, r0
   1b05c:	add	r0, r0, #4
   1b060:	bl	1e18c <__assert_fail@plt+0xc75c>
   1b064:	movw	r3, #15944	; 0x3e48
   1b068:	mov	r1, #1
   1b06c:	mvn	r2, #0
   1b070:	mov	r6, r0
   1b074:	str	r5, [sp]
   1b078:	str	r4, [sp, #4]
   1b07c:	movt	r3, #2
   1b080:	bl	118d4 <__sprintf_chk@plt>
   1b084:	mov	r0, r6
   1b088:	sub	sp, fp, #16
   1b08c:	pop	{r4, r5, r6, sl, fp, pc}
   1b090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b094:	add	fp, sp, #28
   1b098:	sub	sp, sp, #124	; 0x7c
   1b09c:	mov	r4, r0
   1b0a0:	mov	r0, r1
   1b0a4:	mov	r1, #2
   1b0a8:	bl	1d7fc <__assert_fail@plt+0xbdcc>
   1b0ac:	mov	sl, r0
   1b0b0:	ldrb	r0, [r4]
   1b0b4:	cmp	r0, #0
   1b0b8:	beq	1b330 <__assert_fail@plt+0x9900>
   1b0bc:	add	r5, sp, #12
   1b0c0:	add	r6, sp, #68	; 0x44
   1b0c4:	mov	r9, #0
   1b0c8:	add	r8, r6, #4
   1b0cc:	add	r0, r5, #4
   1b0d0:	str	r0, [sp, #4]
   1b0d4:	str	r8, [sp]
   1b0d8:	mov	r0, r4
   1b0dc:	mov	r1, sl
   1b0e0:	bl	1ee40 <__assert_fail@plt+0xd410>
   1b0e4:	cmp	r0, #0
   1b0e8:	beq	1b330 <__assert_fail@plt+0x9900>
   1b0ec:	mov	r7, r0
   1b0f0:	bl	117d8 <__ctype_get_mb_cur_max@plt>
   1b0f4:	cmp	r0, #2
   1b0f8:	bcc	1b210 <__assert_fail@plt+0x97e0>
   1b0fc:	mov	r0, #1
   1b100:	cmp	r4, r7
   1b104:	strb	r9, [sp, #68]	; 0x44
   1b108:	str	r4, [sp, #84]	; 0x54
   1b10c:	str	r9, [r8]
   1b110:	str	r9, [r8, #4]
   1b114:	strb	r9, [sp, #80]	; 0x50
   1b118:	str	r0, [sp, #8]
   1b11c:	bcs	1b174 <__assert_fail@plt+0x9744>
   1b120:	mov	r0, r6
   1b124:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1b128:	ldrb	r1, [sp, #92]	; 0x5c
   1b12c:	ldr	r0, [sp, #96]	; 0x60
   1b130:	cmp	r1, #0
   1b134:	beq	1b140 <__assert_fail@plt+0x9710>
   1b138:	cmp	r0, #0
   1b13c:	beq	1b354 <__assert_fail@plt+0x9924>
   1b140:	strb	r9, [sp, #80]	; 0x50
   1b144:	ldr	r2, [sp, #84]	; 0x54
   1b148:	ldr	r3, [sp, #88]	; 0x58
   1b14c:	add	r2, r2, r3
   1b150:	cmp	r2, r7
   1b154:	str	r2, [sp, #84]	; 0x54
   1b158:	bcc	1b120 <__assert_fail@plt+0x96f0>
   1b15c:	cmp	r1, #0
   1b160:	beq	1b174 <__assert_fail@plt+0x9744>
   1b164:	bl	118c8 <iswalnum@plt>
   1b168:	clz	r0, r0
   1b16c:	lsr	r0, r0, #5
   1b170:	str	r0, [sp, #8]
   1b174:	ldr	r0, [sp, #4]
   1b178:	strb	r9, [sp, #68]	; 0x44
   1b17c:	str	r7, [sp, #84]	; 0x54
   1b180:	strb	r9, [sp, #12]
   1b184:	str	sl, [sp, #28]
   1b188:	str	r9, [r8]
   1b18c:	str	r9, [r8, #4]
   1b190:	strb	r9, [sp, #80]	; 0x50
   1b194:	str	r9, [r0]
   1b198:	str	r9, [r0, #4]
   1b19c:	strb	r9, [sp, #24]
   1b1a0:	b	1b1cc <__assert_fail@plt+0x979c>
   1b1a4:	strb	r9, [sp, #80]	; 0x50
   1b1a8:	strb	r9, [sp, #24]
   1b1ac:	ldr	r0, [sp, #84]	; 0x54
   1b1b0:	ldr	r1, [sp, #88]	; 0x58
   1b1b4:	add	r0, r0, r1
   1b1b8:	ldr	r1, [sp, #32]
   1b1bc:	str	r0, [sp, #84]	; 0x54
   1b1c0:	ldr	r0, [sp, #28]
   1b1c4:	add	r0, r0, r1
   1b1c8:	str	r0, [sp, #28]
   1b1cc:	mov	r0, r5
   1b1d0:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1b1d4:	ldrb	r0, [sp, #36]	; 0x24
   1b1d8:	cmp	r0, #0
   1b1dc:	beq	1b1ec <__assert_fail@plt+0x97bc>
   1b1e0:	ldr	r0, [sp, #40]	; 0x28
   1b1e4:	cmp	r0, #0
   1b1e8:	beq	1b2a0 <__assert_fail@plt+0x9870>
   1b1ec:	mov	r0, r6
   1b1f0:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1b1f4:	ldrb	r0, [sp, #92]	; 0x5c
   1b1f8:	cmp	r0, #0
   1b1fc:	beq	1b1a4 <__assert_fail@plt+0x9774>
   1b200:	ldr	r0, [sp, #96]	; 0x60
   1b204:	cmp	r0, #0
   1b208:	bne	1b1a4 <__assert_fail@plt+0x9774>
   1b20c:	b	1b354 <__assert_fail@plt+0x9924>
   1b210:	cmp	r4, r7
   1b214:	mov	r8, #1
   1b218:	mov	r4, #1
   1b21c:	bcs	1b23c <__assert_fail@plt+0x980c>
   1b220:	bl	11868 <__ctype_b_loc@plt>
   1b224:	ldrb	r1, [r7, #-1]
   1b228:	ldr	r0, [r0]
   1b22c:	ldrb	r0, [r0, r1, lsl #1]
   1b230:	mov	r1, #1
   1b234:	and	r0, r0, #8
   1b238:	eor	r4, r1, r0, lsr #3
   1b23c:	mov	r0, sl
   1b240:	mov	r5, sl
   1b244:	bl	1188c <strlen@plt>
   1b248:	ldrb	sl, [r7, r0]
   1b24c:	cmp	sl, #0
   1b250:	beq	1b26c <__assert_fail@plt+0x983c>
   1b254:	bl	11868 <__ctype_b_loc@plt>
   1b258:	ldr	r0, [r0]
   1b25c:	mov	r1, #1
   1b260:	ldrb	r0, [r0, sl, lsl #1]
   1b264:	and	r0, r0, #8
   1b268:	eor	r8, r1, r0, lsr #3
   1b26c:	tst	r4, r8
   1b270:	bne	1b348 <__assert_fail@plt+0x9918>
   1b274:	ldrb	r0, [r7], #1
   1b278:	ldr	r8, [sp]
   1b27c:	mov	sl, r5
   1b280:	add	r5, sp, #12
   1b284:	cmp	r0, #0
   1b288:	mov	r4, r7
   1b28c:	beq	1b330 <__assert_fail@plt+0x9900>
   1b290:	ldrb	r0, [r4]
   1b294:	cmp	r0, #0
   1b298:	bne	1b0d8 <__assert_fail@plt+0x96a8>
   1b29c:	b	1b330 <__assert_fail@plt+0x9900>
   1b2a0:	mov	r0, r6
   1b2a4:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1b2a8:	ldrb	r0, [sp, #92]	; 0x5c
   1b2ac:	mov	r4, #1
   1b2b0:	mov	r1, #1
   1b2b4:	cmp	r0, #0
   1b2b8:	beq	1b2d8 <__assert_fail@plt+0x98a8>
   1b2bc:	ldr	r0, [sp, #96]	; 0x60
   1b2c0:	mov	r1, #1
   1b2c4:	cmp	r0, #0
   1b2c8:	beq	1b2d8 <__assert_fail@plt+0x98a8>
   1b2cc:	bl	118c8 <iswalnum@plt>
   1b2d0:	clz	r0, r0
   1b2d4:	lsr	r1, r0, #5
   1b2d8:	ldr	r0, [sp, #8]
   1b2dc:	tst	r0, r1
   1b2e0:	bne	1b334 <__assert_fail@plt+0x9904>
   1b2e4:	mov	r4, #0
   1b2e8:	mov	r0, r6
   1b2ec:	strb	r4, [sp, #68]	; 0x44
   1b2f0:	str	r7, [sp, #84]	; 0x54
   1b2f4:	str	r4, [r8]
   1b2f8:	str	r4, [r8, #4]
   1b2fc:	strb	r4, [sp, #80]	; 0x50
   1b300:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1b304:	ldrb	r0, [sp, #92]	; 0x5c
   1b308:	cmp	r0, #0
   1b30c:	beq	1b31c <__assert_fail@plt+0x98ec>
   1b310:	ldr	r0, [sp, #96]	; 0x60
   1b314:	cmp	r0, #0
   1b318:	beq	1b334 <__assert_fail@plt+0x9904>
   1b31c:	ldr	r0, [sp, #88]	; 0x58
   1b320:	add	r4, r7, r0
   1b324:	ldrb	r0, [r4]
   1b328:	cmp	r0, #0
   1b32c:	bne	1b0d8 <__assert_fail@plt+0x96a8>
   1b330:	mov	r4, #0
   1b334:	mov	r0, sl
   1b338:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1b33c:	mov	r0, r4
   1b340:	sub	sp, fp, #28
   1b344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b348:	mov	r4, #1
   1b34c:	mov	sl, r5
   1b350:	b	1b334 <__assert_fail@plt+0x9904>
   1b354:	bl	11a24 <abort@plt>
   1b358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b35c:	add	fp, sp, #28
   1b360:	sub	sp, sp, #12
   1b364:	mov	r8, r0
   1b368:	mov	r5, r1
   1b36c:	mov	r0, #0
   1b370:	mov	r2, #5
   1b374:	mov	sl, #0
   1b378:	mov	r1, r8
   1b37c:	bl	1170c <dcgettext@plt>
   1b380:	mov	r6, r0
   1b384:	bl	1eb34 <__assert_fail@plt+0xd104>
   1b388:	movw	r1, #15952	; 0x3e50
   1b38c:	mov	r4, r0
   1b390:	movt	r1, #2
   1b394:	bl	1e8b4 <__assert_fail@plt+0xce84>
   1b398:	cmp	r0, #0
   1b39c:	beq	1b450 <__assert_fail@plt+0x9a20>
   1b3a0:	movw	sl, #15952	; 0x3e50
   1b3a4:	mov	r0, r5
   1b3a8:	mov	r2, r4
   1b3ac:	str	r6, [sp, #8]
   1b3b0:	movt	sl, #2
   1b3b4:	mov	r1, sl
   1b3b8:	bl	1e7a8 <__assert_fail@plt+0xcd78>
   1b3bc:	mov	r7, r0
   1b3c0:	mov	r0, r4
   1b3c4:	bl	1188c <strlen@plt>
   1b3c8:	mov	r6, r0
   1b3cc:	add	r0, r0, #11
   1b3d0:	bl	1e18c <__assert_fail@plt+0xc75c>
   1b3d4:	mov	r1, r4
   1b3d8:	mov	r2, r6
   1b3dc:	mov	r9, r0
   1b3e0:	bl	116dc <memcpy@plt>
   1b3e4:	movw	r1, #15960	; 0x3e58
   1b3e8:	add	r0, r9, r6
   1b3ec:	mov	r4, #0
   1b3f0:	mov	r2, r9
   1b3f4:	movt	r1, #2
   1b3f8:	strb	r4, [r0, #10]
   1b3fc:	vldr	d16, [r1]
   1b400:	movw	r1, #21577	; 0x5449
   1b404:	strh	r1, [r0, #8]
   1b408:	mov	r1, sl
   1b40c:	vst1.8	{d16}, [r0]
   1b410:	mov	r0, r5
   1b414:	bl	1e7a8 <__assert_fail@plt+0xcd78>
   1b418:	mov	sl, r0
   1b41c:	mov	r0, r9
   1b420:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1b424:	cmp	sl, #0
   1b428:	beq	1b448 <__assert_fail@plt+0x9a18>
   1b42c:	mov	r0, sl
   1b430:	mov	r1, #63	; 0x3f
   1b434:	bl	11898 <strchr@plt>
   1b438:	cmp	r0, #0
   1b43c:	beq	1b460 <__assert_fail@plt+0x9a30>
   1b440:	mov	r0, sl
   1b444:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1b448:	mov	sl, #0
   1b44c:	b	1b464 <__assert_fail@plt+0x9a34>
   1b450:	mov	r4, r5
   1b454:	mov	r7, r5
   1b458:	mov	r9, #0
   1b45c:	b	1b46c <__assert_fail@plt+0x9a3c>
   1b460:	mov	r4, sl
   1b464:	ldr	r6, [sp, #8]
   1b468:	mov	r9, r7
   1b46c:	cmp	r4, #0
   1b470:	mov	r5, r4
   1b474:	mov	r0, r6
   1b478:	mov	r1, r8
   1b47c:	moveq	r5, r8
   1b480:	cmp	r7, #0
   1b484:	movne	r5, r7
   1b488:	bl	11670 <strcmp@plt>
   1b48c:	cmp	r0, #0
   1b490:	beq	1b50c <__assert_fail@plt+0x9adc>
   1b494:	mov	r0, r6
   1b498:	mov	r1, r8
   1b49c:	bl	1b090 <__assert_fail@plt+0x9660>
   1b4a0:	cmp	r0, #0
   1b4a4:	bne	1b4e0 <__assert_fail@plt+0x9ab0>
   1b4a8:	cmp	r7, #0
   1b4ac:	beq	1b4c4 <__assert_fail@plt+0x9a94>
   1b4b0:	mov	r0, r6
   1b4b4:	mov	r1, r7
   1b4b8:	bl	1b090 <__assert_fail@plt+0x9660>
   1b4bc:	cmp	r0, #0
   1b4c0:	bne	1b4e0 <__assert_fail@plt+0x9ab0>
   1b4c4:	cmp	r4, #0
   1b4c8:	beq	1b534 <__assert_fail@plt+0x9b04>
   1b4cc:	mov	r0, r6
   1b4d0:	mov	r1, r4
   1b4d4:	bl	1b090 <__assert_fail@plt+0x9660>
   1b4d8:	cmp	r0, #0
   1b4dc:	beq	1b534 <__assert_fail@plt+0x9b04>
   1b4e0:	cmp	r9, #0
   1b4e4:	beq	1b4f0 <__assert_fail@plt+0x9ac0>
   1b4e8:	mov	r0, r9
   1b4ec:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1b4f0:	cmp	sl, #0
   1b4f4:	beq	1b500 <__assert_fail@plt+0x9ad0>
   1b4f8:	mov	r0, sl
   1b4fc:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1b500:	mov	r0, r6
   1b504:	sub	sp, fp, #28
   1b508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b50c:	cmp	r9, #0
   1b510:	cmpne	r9, r5
   1b514:	bne	1b5a4 <__assert_fail@plt+0x9b74>
   1b518:	cmp	sl, #0
   1b51c:	cmpne	sl, r5
   1b520:	bne	1b5b8 <__assert_fail@plt+0x9b88>
   1b524:	mov	r6, r5
   1b528:	mov	r0, r6
   1b52c:	sub	sp, fp, #28
   1b530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b534:	mov	r0, r6
   1b538:	bl	1188c <strlen@plt>
   1b53c:	mov	r4, r0
   1b540:	mov	r0, r5
   1b544:	bl	1188c <strlen@plt>
   1b548:	add	r0, r4, r0
   1b54c:	add	r0, r0, #4
   1b550:	bl	1e18c <__assert_fail@plt+0xc75c>
   1b554:	movw	r3, #15944	; 0x3e48
   1b558:	mov	r1, #1
   1b55c:	mvn	r2, #0
   1b560:	mov	r4, r0
   1b564:	str	r6, [sp]
   1b568:	str	r5, [sp, #4]
   1b56c:	movt	r3, #2
   1b570:	bl	118d4 <__sprintf_chk@plt>
   1b574:	cmp	r9, #0
   1b578:	beq	1b584 <__assert_fail@plt+0x9b54>
   1b57c:	mov	r0, r9
   1b580:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1b584:	cmp	sl, #0
   1b588:	beq	1b5d0 <__assert_fail@plt+0x9ba0>
   1b58c:	mov	r0, sl
   1b590:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1b594:	mov	r6, r4
   1b598:	mov	r0, r6
   1b59c:	sub	sp, fp, #28
   1b5a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5a4:	mov	r0, r9
   1b5a8:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1b5ac:	cmp	sl, #0
   1b5b0:	cmpne	sl, r5
   1b5b4:	beq	1b524 <__assert_fail@plt+0x9af4>
   1b5b8:	mov	r0, sl
   1b5bc:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1b5c0:	mov	r6, r5
   1b5c4:	mov	r0, r6
   1b5c8:	sub	sp, fp, #28
   1b5cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5d0:	mov	r6, r4
   1b5d4:	mov	r0, r6
   1b5d8:	sub	sp, fp, #28
   1b5dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5e0:	push	{r4, r5, r6, sl, fp, lr}
   1b5e4:	add	fp, sp, #16
   1b5e8:	mov	r4, r0
   1b5ec:	movw	r0, #21000	; 0x5208
   1b5f0:	movt	r0, #3
   1b5f4:	cmp	r4, #0
   1b5f8:	moveq	r4, r0
   1b5fc:	bl	118bc <__errno_location@plt>
   1b600:	ldr	r6, [r0]
   1b604:	mov	r5, r0
   1b608:	mov	r0, r4
   1b60c:	mov	r1, #48	; 0x30
   1b610:	bl	1e5ec <__assert_fail@plt+0xcbbc>
   1b614:	str	r6, [r5]
   1b618:	pop	{r4, r5, r6, sl, fp, pc}
   1b61c:	movw	r1, #21000	; 0x5208
   1b620:	cmp	r0, #0
   1b624:	movt	r1, #3
   1b628:	movne	r1, r0
   1b62c:	ldr	r0, [r1]
   1b630:	bx	lr
   1b634:	movw	r2, #21000	; 0x5208
   1b638:	cmp	r0, #0
   1b63c:	movt	r2, #3
   1b640:	movne	r2, r0
   1b644:	str	r1, [r2]
   1b648:	bx	lr
   1b64c:	movw	r3, #21000	; 0x5208
   1b650:	cmp	r0, #0
   1b654:	movt	r3, #3
   1b658:	movne	r3, r0
   1b65c:	ubfx	r0, r1, #5, #3
   1b660:	and	r1, r1, #31
   1b664:	add	r0, r3, r0, lsl #2
   1b668:	ldr	r3, [r0, #8]
   1b66c:	eor	r2, r2, r3, lsr r1
   1b670:	and	r2, r2, #1
   1b674:	eor	r2, r3, r2, lsl r1
   1b678:	str	r2, [r0, #8]
   1b67c:	mov	r0, #1
   1b680:	and	r0, r0, r3, lsr r1
   1b684:	bx	lr
   1b688:	movw	r2, #21000	; 0x5208
   1b68c:	cmp	r0, #0
   1b690:	movt	r2, #3
   1b694:	movne	r2, r0
   1b698:	ldr	r0, [r2, #4]
   1b69c:	str	r1, [r2, #4]
   1b6a0:	bx	lr
   1b6a4:	movw	r3, #21000	; 0x5208
   1b6a8:	cmp	r0, #0
   1b6ac:	movt	r3, #3
   1b6b0:	movne	r3, r0
   1b6b4:	cmp	r1, #0
   1b6b8:	mov	r0, #10
   1b6bc:	cmpne	r2, #0
   1b6c0:	str	r0, [r3]
   1b6c4:	bne	1b6d4 <__assert_fail@plt+0x9ca4>
   1b6c8:	push	{fp, lr}
   1b6cc:	mov	fp, sp
   1b6d0:	bl	11a24 <abort@plt>
   1b6d4:	str	r1, [r3, #40]	; 0x28
   1b6d8:	str	r2, [r3, #44]	; 0x2c
   1b6dc:	bx	lr
   1b6e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6e4:	add	fp, sp, #28
   1b6e8:	sub	sp, sp, #20
   1b6ec:	mov	r7, r0
   1b6f0:	ldr	r0, [fp, #8]
   1b6f4:	movw	r5, #21000	; 0x5208
   1b6f8:	mov	r8, r3
   1b6fc:	mov	r9, r2
   1b700:	mov	sl, r1
   1b704:	movt	r5, #3
   1b708:	cmp	r0, #0
   1b70c:	movne	r5, r0
   1b710:	bl	118bc <__errno_location@plt>
   1b714:	mov	r4, r0
   1b718:	ldm	r5, {r0, r1}
   1b71c:	ldr	r2, [r5, #40]	; 0x28
   1b720:	ldr	r3, [r5, #44]	; 0x2c
   1b724:	add	r5, r5, #8
   1b728:	ldr	r6, [r4]
   1b72c:	stm	sp, {r0, r1, r5}
   1b730:	str	r2, [sp, #12]
   1b734:	str	r3, [sp, #16]
   1b738:	mov	r0, r7
   1b73c:	mov	r1, sl
   1b740:	mov	r2, r9
   1b744:	mov	r3, r8
   1b748:	bl	1b758 <__assert_fail@plt+0x9d28>
   1b74c:	str	r6, [r4]
   1b750:	sub	sp, fp, #28
   1b754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b75c:	add	fp, sp, #28
   1b760:	sub	sp, sp, #156	; 0x9c
   1b764:	str	r0, [sp, #76]	; 0x4c
   1b768:	ldr	r0, [fp, #12]
   1b76c:	mov	r6, r1
   1b770:	str	r3, [sp, #84]	; 0x54
   1b774:	str	r2, [fp, #-84]	; 0xffffffac
   1b778:	and	r1, r0, #4
   1b77c:	str	r1, [sp, #24]
   1b780:	and	r1, r0, #1
   1b784:	str	r1, [sp, #28]
   1b788:	ubfx	r8, r0, #1, #1
   1b78c:	bl	117d8 <__ctype_get_mb_cur_max@plt>
   1b790:	str	r0, [sp, #32]
   1b794:	ldr	r0, [fp, #24]
   1b798:	ldr	r7, [fp, #8]
   1b79c:	mov	r1, #0
   1b7a0:	mov	r2, #0
   1b7a4:	mov	r4, #1
   1b7a8:	str	r1, [sp, #52]	; 0x34
   1b7ac:	str	r0, [sp, #72]	; 0x48
   1b7b0:	ldr	r0, [fp, #20]
   1b7b4:	str	r0, [sp, #68]	; 0x44
   1b7b8:	mov	r0, #0
   1b7bc:	str	r0, [sp, #48]	; 0x30
   1b7c0:	mov	r0, #0
   1b7c4:	str	r0, [sp, #92]	; 0x5c
   1b7c8:	mov	r0, #0
   1b7cc:	str	r0, [fp, #-76]	; 0xffffffb4
   1b7d0:	mov	r0, #0
   1b7d4:	cmp	r7, #10
   1b7d8:	bhi	1cac0 <__assert_fail@plt+0xb090>
   1b7dc:	add	r1, pc, #28
   1b7e0:	mov	sl, r6
   1b7e4:	ldr	r6, [sp, #76]	; 0x4c
   1b7e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b7ec:	ldr	lr, [sp, #84]	; 0x54
   1b7f0:	mov	r9, #0
   1b7f4:	mov	r3, #1
   1b7f8:	mov	r5, #0
   1b7fc:	ldr	pc, [r1, r7, lsl #2]
   1b800:	ldrdeq	fp, [r1], -r0
   1b804:	andeq	fp, r1, ip, lsl #18
   1b808:	andeq	fp, r1, r0, ror #17
   1b80c:	andeq	fp, r1, r8, asr #17
   1b810:	andeq	fp, r1, r0, lsl #18
   1b814:	andeq	fp, r1, r4, lsr r9
   1b818:	strdeq	fp, [r1], -r0
   1b81c:	andeq	fp, r1, r0, asr #22
   1b820:	andeq	fp, r1, ip, lsr #16
   1b824:	andeq	fp, r1, ip, lsr #16
   1b828:	ldrdeq	fp, [r1], -r4
   1b82c:	mov	r9, r4
   1b830:	movw	r4, #16054	; 0x3eb6
   1b834:	mov	r5, r8
   1b838:	mov	r8, r2
   1b83c:	mov	r0, #0
   1b840:	mov	r2, #5
   1b844:	movt	r4, #2
   1b848:	mov	r1, r4
   1b84c:	bl	1170c <dcgettext@plt>
   1b850:	cmp	r0, r4
   1b854:	str	r0, [sp, #68]	; 0x44
   1b858:	bne	1b9e8 <__assert_fail@plt+0x9fb8>
   1b85c:	bl	1eb34 <__assert_fail@plt+0xd104>
   1b860:	ldrb	r1, [r0]
   1b864:	and	r1, r1, #223	; 0xdf
   1b868:	cmp	r1, #71	; 0x47
   1b86c:	beq	1b9b4 <__assert_fail@plt+0x9f84>
   1b870:	cmp	r1, #85	; 0x55
   1b874:	bne	1b9cc <__assert_fail@plt+0x9f9c>
   1b878:	ldrb	r1, [r0, #1]
   1b87c:	and	r1, r1, #223	; 0xdf
   1b880:	cmp	r1, #84	; 0x54
   1b884:	bne	1b9cc <__assert_fail@plt+0x9f9c>
   1b888:	ldrb	r1, [r0, #2]
   1b88c:	and	r1, r1, #223	; 0xdf
   1b890:	cmp	r1, #70	; 0x46
   1b894:	bne	1b9cc <__assert_fail@plt+0x9f9c>
   1b898:	ldrb	r1, [r0, #3]
   1b89c:	cmp	r1, #45	; 0x2d
   1b8a0:	ldrbeq	r1, [r0, #4]
   1b8a4:	cmpeq	r1, #56	; 0x38
   1b8a8:	bne	1b9cc <__assert_fail@plt+0x9f9c>
   1b8ac:	ldrb	r0, [r0, #5]
   1b8b0:	cmp	r0, #0
   1b8b4:	movw	r0, #16056	; 0x3eb8
   1b8b8:	movt	r0, #2
   1b8bc:	str	r0, [sp, #68]	; 0x44
   1b8c0:	bne	1b9cc <__assert_fail@plt+0x9f9c>
   1b8c4:	b	1b9e8 <__assert_fail@plt+0x9fb8>
   1b8c8:	mov	r0, #1
   1b8cc:	b	1b90c <__assert_fail@plt+0x9edc>
   1b8d0:	mov	r7, #0
   1b8d4:	mov	r9, #0
   1b8d8:	mov	r3, r0
   1b8dc:	b	1b9ac <__assert_fail@plt+0x9f7c>
   1b8e0:	tst	r8, #1
   1b8e4:	bne	1b90c <__assert_fail@plt+0x9edc>
   1b8e8:	mov	r3, r0
   1b8ec:	b	1b964 <__assert_fail@plt+0x9f34>
   1b8f0:	mov	r0, #1
   1b8f4:	mov	r9, #0
   1b8f8:	mov	r7, #5
   1b8fc:	b	1b948 <__assert_fail@plt+0x9f18>
   1b900:	mov	r3, #1
   1b904:	tst	r8, #1
   1b908:	beq	1b964 <__assert_fail@plt+0x9f34>
   1b90c:	mov	r1, #1
   1b910:	mov	r9, #0
   1b914:	mov	r7, #2
   1b918:	mov	r3, r0
   1b91c:	mov	r5, #1
   1b920:	str	r1, [fp, #-76]	; 0xffffffb4
   1b924:	movw	r1, #17068	; 0x42ac
   1b928:	movt	r1, #2
   1b92c:	str	r1, [sp, #92]	; 0x5c
   1b930:	b	1bb40 <__assert_fail@plt+0xa110>
   1b934:	mov	r7, #5
   1b938:	tst	r8, #1
   1b93c:	beq	1b984 <__assert_fail@plt+0x9f54>
   1b940:	mov	r0, #1
   1b944:	mov	r9, #0
   1b948:	str	r0, [fp, #-76]	; 0xffffffb4
   1b94c:	movw	r0, #16052	; 0x3eb4
   1b950:	mov	r3, #1
   1b954:	mov	r5, #1
   1b958:	movt	r0, #2
   1b95c:	str	r0, [sp, #92]	; 0x5c
   1b960:	b	1bb40 <__assert_fail@plt+0xa110>
   1b964:	cmp	sl, #0
   1b968:	mov	r9, #1
   1b96c:	mov	r7, #2
   1b970:	movne	r0, #39	; 0x27
   1b974:	strbne	r0, [r6]
   1b978:	movw	r0, #17068	; 0x42ac
   1b97c:	movt	r0, #2
   1b980:	b	1b9a0 <__assert_fail@plt+0x9f70>
   1b984:	cmp	sl, #0
   1b988:	mov	r9, #1
   1b98c:	mov	r3, #1
   1b990:	movne	r0, #34	; 0x22
   1b994:	strbne	r0, [r6]
   1b998:	movw	r0, #16052	; 0x3eb4
   1b99c:	movt	r0, #2
   1b9a0:	str	r0, [sp, #92]	; 0x5c
   1b9a4:	mov	r0, #1
   1b9a8:	str	r0, [fp, #-76]	; 0xffffffb4
   1b9ac:	mov	r5, #0
   1b9b0:	b	1bb40 <__assert_fail@plt+0xa110>
   1b9b4:	ldrb	r1, [r0, #1]
   1b9b8:	and	r1, r1, #223	; 0xdf
   1b9bc:	cmp	r1, #66	; 0x42
   1b9c0:	ldrbeq	r1, [r0, #2]
   1b9c4:	cmpeq	r1, #49	; 0x31
   1b9c8:	beq	1c8e8 <__assert_fail@plt+0xaeb8>
   1b9cc:	movw	r0, #17068	; 0x42ac
   1b9d0:	movw	r1, #16052	; 0x3eb4
   1b9d4:	cmp	r7, #9
   1b9d8:	movt	r0, #2
   1b9dc:	movt	r1, #2
   1b9e0:	moveq	r0, r1
   1b9e4:	str	r0, [sp, #68]	; 0x44
   1b9e8:	movw	r4, #17068	; 0x42ac
   1b9ec:	mov	r0, #0
   1b9f0:	mov	r2, #5
   1b9f4:	movt	r4, #2
   1b9f8:	mov	r1, r4
   1b9fc:	bl	1170c <dcgettext@plt>
   1ba00:	cmp	r0, r4
   1ba04:	str	r0, [sp, #72]	; 0x48
   1ba08:	beq	1ba18 <__assert_fail@plt+0x9fe8>
   1ba0c:	mov	r4, r9
   1ba10:	mov	r2, r8
   1ba14:	b	1bad0 <__assert_fail@plt+0xa0a0>
   1ba18:	bl	1eb34 <__assert_fail@plt+0xd104>
   1ba1c:	ldrb	r1, [r0]
   1ba20:	mov	r4, r9
   1ba24:	and	r1, r1, #223	; 0xdf
   1ba28:	cmp	r1, #71	; 0x47
   1ba2c:	beq	1ba88 <__assert_fail@plt+0xa058>
   1ba30:	cmp	r1, #85	; 0x55
   1ba34:	mov	r2, r8
   1ba38:	bne	1bab0 <__assert_fail@plt+0xa080>
   1ba3c:	ldrb	r1, [r0, #1]
   1ba40:	and	r1, r1, #223	; 0xdf
   1ba44:	cmp	r1, #84	; 0x54
   1ba48:	bne	1bab0 <__assert_fail@plt+0xa080>
   1ba4c:	ldrb	r1, [r0, #2]
   1ba50:	and	r1, r1, #223	; 0xdf
   1ba54:	cmp	r1, #70	; 0x46
   1ba58:	ldrbeq	r1, [r0, #3]
   1ba5c:	cmpeq	r1, #45	; 0x2d
   1ba60:	bne	1bab0 <__assert_fail@plt+0xa080>
   1ba64:	ldrb	r1, [r0, #4]
   1ba68:	cmp	r1, #56	; 0x38
   1ba6c:	ldrbeq	r0, [r0, #5]
   1ba70:	cmpeq	r0, #0
   1ba74:	bne	1bab0 <__assert_fail@plt+0xa080>
   1ba78:	movw	r0, #16060	; 0x3ebc
   1ba7c:	movt	r0, #2
   1ba80:	str	r0, [sp, #72]	; 0x48
   1ba84:	b	1bad0 <__assert_fail@plt+0xa0a0>
   1ba88:	ldrb	r1, [r0, #1]
   1ba8c:	mov	r2, r8
   1ba90:	and	r1, r1, #223	; 0xdf
   1ba94:	cmp	r1, #66	; 0x42
   1ba98:	bne	1bab0 <__assert_fail@plt+0xa080>
   1ba9c:	ldrb	r1, [r0, #2]
   1baa0:	cmp	r1, #49	; 0x31
   1baa4:	ldrbeq	r1, [r0, #3]
   1baa8:	cmpeq	r1, #56	; 0x38
   1baac:	beq	1c92c <__assert_fail@plt+0xaefc>
   1bab0:	movw	r0, #17068	; 0x42ac
   1bab4:	cmp	r7, #9
   1bab8:	movt	r0, #2
   1babc:	mov	r1, r0
   1bac0:	movw	r0, #16052	; 0x3eb4
   1bac4:	movt	r0, #2
   1bac8:	moveq	r1, r0
   1bacc:	str	r1, [sp, #72]	; 0x48
   1bad0:	mov	r8, r5
   1bad4:	mov	r9, #0
   1bad8:	tst	r8, #1
   1badc:	mov	r5, r8
   1bae0:	str	r2, [fp, #-48]	; 0xffffffd0
   1bae4:	bne	1bb1c <__assert_fail@plt+0xa0ec>
   1bae8:	ldr	r0, [sp, #68]	; 0x44
   1baec:	ldrb	r0, [r0]
   1baf0:	cmp	r0, #0
   1baf4:	beq	1bb1c <__assert_fail@plt+0xa0ec>
   1baf8:	ldr	r1, [sp, #68]	; 0x44
   1bafc:	mov	r9, #0
   1bb00:	add	r1, r1, #1
   1bb04:	cmp	r9, sl
   1bb08:	strbcc	r0, [r6, r9]
   1bb0c:	ldrb	r0, [r1, r9]
   1bb10:	add	r9, r9, #1
   1bb14:	cmp	r0, #0
   1bb18:	bne	1bb04 <__assert_fail@plt+0xa0d4>
   1bb1c:	ldr	r8, [sp, #72]	; 0x48
   1bb20:	mov	r0, r8
   1bb24:	bl	1188c <strlen@plt>
   1bb28:	ldr	ip, [fp, #-84]	; 0xffffffac
   1bb2c:	ldr	lr, [sp, #84]	; 0x54
   1bb30:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1bb34:	str	r0, [fp, #-76]	; 0xffffffb4
   1bb38:	str	r8, [sp, #92]	; 0x5c
   1bb3c:	mov	r3, #1
   1bb40:	ldr	r0, [fp, #16]
   1bb44:	str	r7, [fp, #-64]	; 0xffffffc0
   1bb48:	str	r5, [fp, #-72]	; 0xffffffb8
   1bb4c:	str	r3, [sp, #80]	; 0x50
   1bb50:	cmp	r0, #0
   1bb54:	movwne	r0, #1
   1bb58:	and	r0, r0, r5
   1bb5c:	str	r0, [fp, #-88]	; 0xffffffa8
   1bb60:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1bb64:	cmp	r0, #0
   1bb68:	movwne	r0, #1
   1bb6c:	subs	r7, r7, #2
   1bb70:	and	r1, r0, r5
   1bb74:	str	r7, [fp, #-80]	; 0xffffffb0
   1bb78:	and	r1, r3, r1
   1bb7c:	str	r1, [sp, #40]	; 0x28
   1bb80:	clz	r1, r7
   1bb84:	lsr	r1, r1, #5
   1bb88:	and	r1, r1, r5
   1bb8c:	eor	r5, r5, #1
   1bb90:	str	r1, [sp, #36]	; 0x24
   1bb94:	mov	r1, r7
   1bb98:	str	r5, [sp, #88]	; 0x58
   1bb9c:	mov	r7, #0
   1bba0:	movwne	r1, #1
   1bba4:	orr	r5, r1, r5
   1bba8:	and	r1, r1, r3
   1bbac:	and	r0, r0, r1
   1bbb0:	str	r5, [sp, #60]	; 0x3c
   1bbb4:	str	r1, [fp, #-68]	; 0xffffffbc
   1bbb8:	str	r0, [fp, #-60]	; 0xffffffc4
   1bbbc:	eor	r0, r3, #1
   1bbc0:	str	r0, [sp, #44]	; 0x2c
   1bbc4:	cmn	lr, #1
   1bbc8:	beq	1bbd8 <__assert_fail@plt+0xa1a8>
   1bbcc:	cmp	r7, lr
   1bbd0:	bne	1bbe4 <__assert_fail@plt+0xa1b4>
   1bbd4:	b	1c85c <__assert_fail@plt+0xae2c>
   1bbd8:	ldrb	r0, [ip, r7]
   1bbdc:	cmp	r0, #0
   1bbe0:	beq	1c864 <__assert_fail@plt+0xae34>
   1bbe4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1bbe8:	mov	r8, #0
   1bbec:	str	r4, [fp, #-52]	; 0xffffffcc
   1bbf0:	str	r2, [fp, #-48]	; 0xffffffd0
   1bbf4:	cmp	r0, #0
   1bbf8:	beq	1bc2c <__assert_fail@plt+0xa1fc>
   1bbfc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1bc00:	add	r4, r7, r0
   1bc04:	cmp	r0, #2
   1bc08:	bcc	1bc24 <__assert_fail@plt+0xa1f4>
   1bc0c:	cmn	lr, #1
   1bc10:	bne	1bc24 <__assert_fail@plt+0xa1f4>
   1bc14:	mov	r0, ip
   1bc18:	bl	1188c <strlen@plt>
   1bc1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1bc20:	mov	lr, r0
   1bc24:	cmp	r4, lr
   1bc28:	bls	1bc44 <__assert_fail@plt+0xa214>
   1bc2c:	mov	r0, #0
   1bc30:	str	r0, [fp, #-56]	; 0xffffffc8
   1bc34:	ldrb	r5, [ip, r7]
   1bc38:	cmp	r5, #126	; 0x7e
   1bc3c:	bls	1bc94 <__assert_fail@plt+0xa264>
   1bc40:	b	1c09c <__assert_fail@plt+0xa66c>
   1bc44:	ldr	r1, [sp, #92]	; 0x5c
   1bc48:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1bc4c:	add	r0, ip, r7
   1bc50:	mov	r4, lr
   1bc54:	bl	11700 <memcmp@plt>
   1bc58:	ldr	r2, [sp, #88]	; 0x58
   1bc5c:	cmp	r0, #0
   1bc60:	mov	r1, r0
   1bc64:	movwne	r1, #1
   1bc68:	orr	r1, r1, r2
   1bc6c:	tst	r1, #1
   1bc70:	beq	1c970 <__assert_fail@plt+0xaf40>
   1bc74:	ldr	ip, [fp, #-84]	; 0xffffffac
   1bc78:	clz	r0, r0
   1bc7c:	mov	lr, r4
   1bc80:	lsr	r0, r0, #5
   1bc84:	str	r0, [fp, #-56]	; 0xffffffc8
   1bc88:	ldrb	r5, [ip, r7]
   1bc8c:	cmp	r5, #126	; 0x7e
   1bc90:	bhi	1c09c <__assert_fail@plt+0xa66c>
   1bc94:	add	r3, pc, #16
   1bc98:	mov	r4, #1
   1bc9c:	mov	r2, #110	; 0x6e
   1bca0:	mov	r0, #97	; 0x61
   1bca4:	mov	r1, #0
   1bca8:	ldr	pc, [r3, r5, lsl #2]
   1bcac:	andeq	fp, r1, ip, ror pc
   1bcb0:	muleq	r1, ip, r0
   1bcb4:	muleq	r1, ip, r0
   1bcb8:	muleq	r1, ip, r0
   1bcbc:	muleq	r1, ip, r0
   1bcc0:	muleq	r1, ip, r0
   1bcc4:	muleq	r1, ip, r0
   1bcc8:	andeq	ip, r1, r8, ror r1
   1bccc:	andeq	fp, r1, ip, asr pc
   1bcd0:	andeq	fp, r1, r4, asr #30
   1bcd4:	andeq	fp, r1, r8, ror #30
   1bcd8:	strdeq	fp, [r1], -r8
   1bcdc:	andeq	fp, r1, ip, lsr pc
   1bce0:	andeq	fp, r1, r4, ror #30
   1bce4:	muleq	r1, ip, r0
   1bce8:	muleq	r1, ip, r0
   1bcec:	muleq	r1, ip, r0
   1bcf0:	muleq	r1, ip, r0
   1bcf4:	muleq	r1, ip, r0
   1bcf8:	muleq	r1, ip, r0
   1bcfc:	muleq	r1, ip, r0
   1bd00:	muleq	r1, ip, r0
   1bd04:	muleq	r1, ip, r0
   1bd08:	muleq	r1, ip, r0
   1bd0c:	muleq	r1, ip, r0
   1bd10:	muleq	r1, ip, r0
   1bd14:	muleq	r1, ip, r0
   1bd18:	muleq	r1, ip, r0
   1bd1c:	muleq	r1, ip, r0
   1bd20:	muleq	r1, ip, r0
   1bd24:	muleq	r1, ip, r0
   1bd28:	muleq	r1, ip, r0
   1bd2c:	strdeq	ip, [r1], -r4
   1bd30:	strdeq	ip, [r1], -r8
   1bd34:	strdeq	ip, [r1], -r8
   1bd38:	andeq	fp, r1, r8, asr #29
   1bd3c:	strdeq	ip, [r1], -r8
   1bd40:	andeq	fp, r1, r8, lsr #29
   1bd44:	strdeq	ip, [r1], -r8
   1bd48:	andeq	ip, r1, r0
   1bd4c:	strdeq	ip, [r1], -r8
   1bd50:	strdeq	ip, [r1], -r8
   1bd54:	strdeq	ip, [r1], -r8
   1bd58:	andeq	fp, r1, r8, lsr #29
   1bd5c:	andeq	fp, r1, r8, lsr #29
   1bd60:	andeq	fp, r1, r8, lsr #29
   1bd64:	andeq	fp, r1, r8, lsr #29
   1bd68:	andeq	fp, r1, r8, lsr #29
   1bd6c:	andeq	fp, r1, r8, lsr #29
   1bd70:	andeq	fp, r1, r8, lsr #29
   1bd74:	andeq	fp, r1, r8, lsr #29
   1bd78:	andeq	fp, r1, r8, lsr #29
   1bd7c:	andeq	fp, r1, r8, lsr #29
   1bd80:	andeq	fp, r1, r8, lsr #29
   1bd84:	andeq	fp, r1, r8, lsr #29
   1bd88:	andeq	fp, r1, r8, lsr #29
   1bd8c:	andeq	fp, r1, r8, lsr #29
   1bd90:	andeq	fp, r1, r8, lsr #29
   1bd94:	andeq	fp, r1, r8, lsr #29
   1bd98:	strdeq	ip, [r1], -r8
   1bd9c:	strdeq	ip, [r1], -r8
   1bda0:	strdeq	ip, [r1], -r8
   1bda4:	strdeq	ip, [r1], -r8
   1bda8:			; <UNDEFINED> instruction: 0x0001bfbc
   1bdac:	muleq	r1, ip, r0
   1bdb0:	andeq	fp, r1, r8, lsr #29
   1bdb4:	andeq	fp, r1, r8, lsr #29
   1bdb8:	andeq	fp, r1, r8, lsr #29
   1bdbc:	andeq	fp, r1, r8, lsr #29
   1bdc0:	andeq	fp, r1, r8, lsr #29
   1bdc4:	andeq	fp, r1, r8, lsr #29
   1bdc8:	andeq	fp, r1, r8, lsr #29
   1bdcc:	andeq	fp, r1, r8, lsr #29
   1bdd0:	andeq	fp, r1, r8, lsr #29
   1bdd4:	andeq	fp, r1, r8, lsr #29
   1bdd8:	andeq	fp, r1, r8, lsr #29
   1bddc:	andeq	fp, r1, r8, lsr #29
   1bde0:	andeq	fp, r1, r8, lsr #29
   1bde4:	andeq	fp, r1, r8, lsr #29
   1bde8:	andeq	fp, r1, r8, lsr #29
   1bdec:	andeq	fp, r1, r8, lsr #29
   1bdf0:	andeq	fp, r1, r8, lsr #29
   1bdf4:	andeq	fp, r1, r8, lsr #29
   1bdf8:	andeq	fp, r1, r8, lsr #29
   1bdfc:	andeq	fp, r1, r8, lsr #29
   1be00:	andeq	fp, r1, r8, lsr #29
   1be04:	andeq	fp, r1, r8, lsr #29
   1be08:	andeq	fp, r1, r8, lsr #29
   1be0c:	andeq	fp, r1, r8, lsr #29
   1be10:	andeq	fp, r1, r8, lsr #29
   1be14:	andeq	fp, r1, r8, lsr #29
   1be18:	strdeq	ip, [r1], -r8
   1be1c:	andeq	fp, r1, r8, lsl #30
   1be20:	andeq	fp, r1, r8, lsr #29
   1be24:	strdeq	ip, [r1], -r8
   1be28:	andeq	fp, r1, r8, lsr #29
   1be2c:	strdeq	ip, [r1], -r8
   1be30:	andeq	fp, r1, r8, lsr #29
   1be34:	andeq	fp, r1, r8, lsr #29
   1be38:	andeq	fp, r1, r8, lsr #29
   1be3c:	andeq	fp, r1, r8, lsr #29
   1be40:	andeq	fp, r1, r8, lsr #29
   1be44:	andeq	fp, r1, r8, lsr #29
   1be48:	andeq	fp, r1, r8, lsr #29
   1be4c:	andeq	fp, r1, r8, lsr #29
   1be50:	andeq	fp, r1, r8, lsr #29
   1be54:	andeq	fp, r1, r8, lsr #29
   1be58:	andeq	fp, r1, r8, lsr #29
   1be5c:	andeq	fp, r1, r8, lsr #29
   1be60:	andeq	fp, r1, r8, lsr #29
   1be64:	andeq	fp, r1, r8, lsr #29
   1be68:	andeq	fp, r1, r8, lsr #29
   1be6c:	andeq	fp, r1, r8, lsr #29
   1be70:	andeq	fp, r1, r8, lsr #29
   1be74:	andeq	fp, r1, r8, lsr #29
   1be78:	andeq	fp, r1, r8, lsr #29
   1be7c:	andeq	fp, r1, r8, lsr #29
   1be80:	andeq	fp, r1, r8, lsr #29
   1be84:	andeq	fp, r1, r8, lsr #29
   1be88:	andeq	fp, r1, r8, lsr #29
   1be8c:	andeq	fp, r1, r8, lsr #29
   1be90:	andeq	fp, r1, r8, lsr #29
   1be94:	andeq	fp, r1, r8, lsr #29
   1be98:	andeq	fp, r1, r8, ror #29
   1be9c:	strdeq	ip, [r1], -r8
   1bea0:	andeq	fp, r1, r8, ror #29
   1bea4:	andeq	fp, r1, r8, asr #29
   1bea8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1beac:	cmp	r0, #0
   1beb0:	beq	1c18c <__assert_fail@plt+0xa75c>
   1beb4:	ldr	r0, [fp, #16]
   1beb8:	cmp	r0, #0
   1bebc:	mov	r0, r5
   1bec0:	bne	1c19c <__assert_fail@plt+0xa76c>
   1bec4:	b	1c1bc <__assert_fail@plt+0xa78c>
   1bec8:	mov	r4, #0
   1becc:	cmp	r7, #0
   1bed0:	beq	1c0f4 <__assert_fail@plt+0xa6c4>
   1bed4:	mov	r8, #0
   1bed8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1bedc:	cmp	r0, #0
   1bee0:	bne	1beb4 <__assert_fail@plt+0xa484>
   1bee4:	b	1c18c <__assert_fail@plt+0xa75c>
   1bee8:	mov	r4, #0
   1beec:	cmn	lr, #1
   1bef0:	beq	1c0cc <__assert_fail@plt+0xa69c>
   1bef4:	cmp	r7, #0
   1bef8:	bne	1bed4 <__assert_fail@plt+0xa4a4>
   1befc:	cmp	lr, #1
   1bf00:	beq	1c0f4 <__assert_fail@plt+0xa6c4>
   1bf04:	b	1bed4 <__assert_fail@plt+0xa4a4>
   1bf08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bf0c:	cmp	r0, #2
   1bf10:	bne	1c124 <__assert_fail@plt+0xa6f4>
   1bf14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1bf18:	tst	r0, #1
   1bf1c:	bne	1c984 <__assert_fail@plt+0xaf54>
   1bf20:	mov	r8, #0
   1bf24:	mov	r0, #92	; 0x5c
   1bf28:	mov	r4, #0
   1bf2c:	cmp	r8, #0
   1bf30:	beq	1c144 <__assert_fail@plt+0xa714>
   1bf34:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1bf38:	b	1c238 <__assert_fail@plt+0xa808>
   1bf3c:	mov	r0, #102	; 0x66
   1bf40:	b	1c178 <__assert_fail@plt+0xa748>
   1bf44:	mov	r2, #116	; 0x74
   1bf48:	ldr	r0, [sp, #60]	; 0x3c
   1bf4c:	tst	r0, #1
   1bf50:	mov	r0, r2
   1bf54:	bne	1c178 <__assert_fail@plt+0xa748>
   1bf58:	b	1c984 <__assert_fail@plt+0xaf54>
   1bf5c:	mov	r0, #98	; 0x62
   1bf60:	b	1c178 <__assert_fail@plt+0xa748>
   1bf64:	mov	r2, #114	; 0x72
   1bf68:	ldr	r0, [sp, #60]	; 0x3c
   1bf6c:	tst	r0, #1
   1bf70:	mov	r0, r2
   1bf74:	bne	1c178 <__assert_fail@plt+0xa748>
   1bf78:	b	1c984 <__assert_fail@plt+0xaf54>
   1bf7c:	ldr	r0, [sp, #80]	; 0x50
   1bf80:	tst	r0, #1
   1bf84:	beq	1c260 <__assert_fail@plt+0xa830>
   1bf88:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1bf8c:	tst	r0, #1
   1bf90:	bne	1caac <__assert_fail@plt+0xb07c>
   1bf94:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bf98:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1bf9c:	cmp	r0, #2
   1bfa0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1bfa4:	movwne	r0, #1
   1bfa8:	orr	r0, r0, r2
   1bfac:	tst	r0, #1
   1bfb0:	beq	1c558 <__assert_fail@plt+0xab28>
   1bfb4:	mov	r0, r9
   1bfb8:	b	1c58c <__assert_fail@plt+0xab5c>
   1bfbc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bfc0:	mov	r8, #0
   1bfc4:	mov	r5, #63	; 0x3f
   1bfc8:	cmp	r0, #5
   1bfcc:	beq	1c414 <__assert_fail@plt+0xa9e4>
   1bfd0:	cmp	r0, #2
   1bfd4:	bne	1c4c4 <__assert_fail@plt+0xaa94>
   1bfd8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1bfdc:	tst	r0, #1
   1bfe0:	bne	1c984 <__assert_fail@plt+0xaf54>
   1bfe4:	mov	r4, #0
   1bfe8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1bfec:	cmp	r0, #0
   1bff0:	bne	1beb4 <__assert_fail@plt+0xa484>
   1bff4:	b	1c18c <__assert_fail@plt+0xa75c>
   1bff8:	mov	r0, #118	; 0x76
   1bffc:	b	1c178 <__assert_fail@plt+0xa748>
   1c000:	mov	r0, #1
   1c004:	mov	r5, #39	; 0x27
   1c008:	str	r0, [sp, #52]	; 0x34
   1c00c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c010:	cmp	r0, #2
   1c014:	bne	1c088 <__assert_fail@plt+0xa658>
   1c018:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c01c:	tst	r0, #1
   1c020:	bne	1c984 <__assert_fail@plt+0xaf54>
   1c024:	ldr	r2, [sp, #48]	; 0x30
   1c028:	clz	r1, sl
   1c02c:	mov	r8, #0
   1c030:	lsr	r1, r1, #5
   1c034:	cmp	r2, #0
   1c038:	mov	r0, r2
   1c03c:	movwne	r0, #1
   1c040:	orrs	r0, r0, r1
   1c044:	moveq	r2, sl
   1c048:	moveq	sl, r0
   1c04c:	cmp	r9, sl
   1c050:	str	r2, [sp, #48]	; 0x30
   1c054:	movcc	r0, #39	; 0x27
   1c058:	strbcc	r0, [r6, r9]
   1c05c:	add	r0, r9, #1
   1c060:	cmp	r0, sl
   1c064:	movcc	r1, #92	; 0x5c
   1c068:	strbcc	r1, [r6, r0]
   1c06c:	add	r0, r9, #2
   1c070:	add	r9, r9, #3
   1c074:	cmp	r0, sl
   1c078:	movcc	r1, #39	; 0x27
   1c07c:	strbcc	r1, [r6, r0]
   1c080:	mov	r0, #0
   1c084:	str	r0, [fp, #-48]	; 0xffffffd0
   1c088:	mov	r4, #1
   1c08c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c090:	cmp	r0, #0
   1c094:	bne	1beb4 <__assert_fail@plt+0xa484>
   1c098:	b	1c18c <__assert_fail@plt+0xa75c>
   1c09c:	ldr	r0, [sp, #32]
   1c0a0:	cmp	r0, #1
   1c0a4:	bne	1c290 <__assert_fail@plt+0xa860>
   1c0a8:	str	lr, [sp, #84]	; 0x54
   1c0ac:	bl	11868 <__ctype_b_loc@plt>
   1c0b0:	ldr	r0, [r0]
   1c0b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c0b8:	mov	r1, #1
   1c0bc:	add	r0, r0, r5, lsl #1
   1c0c0:	ldrb	r0, [r0, #1]
   1c0c4:	ubfx	r4, r0, #6, #1
   1c0c8:	b	1c688 <__assert_fail@plt+0xac58>
   1c0cc:	cmp	r7, #0
   1c0d0:	ldrbeq	r0, [ip, #1]
   1c0d4:	cmpeq	r0, #0
   1c0d8:	beq	1c0f4 <__assert_fail@plt+0xa6c4>
   1c0dc:	mvn	lr, #0
   1c0e0:	mov	r8, #0
   1c0e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c0e8:	cmp	r0, #0
   1c0ec:	bne	1beb4 <__assert_fail@plt+0xa484>
   1c0f0:	b	1c18c <__assert_fail@plt+0xa75c>
   1c0f4:	mov	r1, #1
   1c0f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c0fc:	cmp	r0, #2
   1c100:	bne	1c110 <__assert_fail@plt+0xa6e0>
   1c104:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c108:	tst	r0, #1
   1c10c:	bne	1c984 <__assert_fail@plt+0xaf54>
   1c110:	mov	r4, r1
   1c114:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c118:	cmp	r0, #0
   1c11c:	bne	1beb4 <__assert_fail@plt+0xa484>
   1c120:	b	1c18c <__assert_fail@plt+0xa75c>
   1c124:	ldr	r1, [sp, #40]	; 0x28
   1c128:	mov	r8, #0
   1c12c:	mov	r0, #92	; 0x5c
   1c130:	cmp	r1, #0
   1c134:	beq	1c178 <__assert_fail@plt+0xa748>
   1c138:	mov	r4, #0
   1c13c:	cmp	r8, #0
   1c140:	bne	1bf34 <__assert_fail@plt+0xa504>
   1c144:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c148:	tst	r2, #1
   1c14c:	beq	1c238 <__assert_fail@plt+0xa808>
   1c150:	cmp	r9, sl
   1c154:	movcc	r1, #39	; 0x27
   1c158:	strbcc	r1, [r6, r9]
   1c15c:	add	r1, r9, #1
   1c160:	add	r9, r9, #2
   1c164:	cmp	r1, sl
   1c168:	movcc	r2, #39	; 0x27
   1c16c:	strbcc	r2, [r6, r1]
   1c170:	mov	r2, #0
   1c174:	b	1c238 <__assert_fail@plt+0xa808>
   1c178:	ldr	r1, [sp, #80]	; 0x50
   1c17c:	mov	r4, #0
   1c180:	mov	r8, #0
   1c184:	tst	r1, #1
   1c188:	bne	1c1c8 <__assert_fail@plt+0xa798>
   1c18c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1c190:	cmp	r0, #0
   1c194:	mov	r0, r5
   1c198:	beq	1c1bc <__assert_fail@plt+0xa78c>
   1c19c:	ldr	r1, [fp, #16]
   1c1a0:	ubfx	r0, r5, #5, #3
   1c1a4:	mov	r2, #1
   1c1a8:	ldr	r0, [r1, r0, lsl #2]
   1c1ac:	and	r1, r5, #31
   1c1b0:	tst	r0, r2, lsl r1
   1c1b4:	mov	r0, r5
   1c1b8:	bne	1c1c8 <__assert_fail@plt+0xa798>
   1c1bc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1c1c0:	cmp	r1, #0
   1c1c4:	beq	1c620 <__assert_fail@plt+0xabf0>
   1c1c8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1c1cc:	tst	r1, #1
   1c1d0:	bne	1c964 <__assert_fail@plt+0xaf34>
   1c1d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1c1d8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c1dc:	cmp	r1, #2
   1c1e0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1c1e4:	movwne	r1, #1
   1c1e8:	orr	r1, r1, r2
   1c1ec:	tst	r1, #1
   1c1f0:	bne	1c228 <__assert_fail@plt+0xa7f8>
   1c1f4:	cmp	r9, sl
   1c1f8:	movcc	r1, #39	; 0x27
   1c1fc:	strbcc	r1, [r6, r9]
   1c200:	add	r1, r9, #1
   1c204:	cmp	r1, sl
   1c208:	movcc	r2, #36	; 0x24
   1c20c:	strbcc	r2, [r6, r1]
   1c210:	add	r1, r9, #2
   1c214:	add	r9, r9, #3
   1c218:	cmp	r1, sl
   1c21c:	movcc	r2, #39	; 0x27
   1c220:	strbcc	r2, [r6, r1]
   1c224:	mov	r2, #1
   1c228:	cmp	r9, sl
   1c22c:	movcc	r1, #92	; 0x5c
   1c230:	strbcc	r1, [r6, r9]
   1c234:	add	r9, r9, #1
   1c238:	cmp	r9, sl
   1c23c:	add	r7, r7, #1
   1c240:	strbcc	r0, [r6, r9]
   1c244:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1c248:	add	r9, r9, #1
   1c24c:	and	r0, r0, r4
   1c250:	mov	r4, r0
   1c254:	cmn	lr, #1
   1c258:	bne	1bbcc <__assert_fail@plt+0xa19c>
   1c25c:	b	1bbd8 <__assert_fail@plt+0xa1a8>
   1c260:	ldr	r0, [sp, #28]
   1c264:	mov	r4, #0
   1c268:	mov	r8, #0
   1c26c:	mov	r5, #0
   1c270:	cmp	r0, #0
   1c274:	beq	1c18c <__assert_fail@plt+0xa75c>
   1c278:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1c27c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c280:	add	r7, r7, #1
   1c284:	cmn	lr, #1
   1c288:	bne	1bbcc <__assert_fail@plt+0xa19c>
   1c28c:	b	1bbd8 <__assert_fail@plt+0xa1a8>
   1c290:	mov	r0, #0
   1c294:	cmn	lr, #1
   1c298:	str	r0, [fp, #-36]	; 0xffffffdc
   1c29c:	str	r0, [fp, #-40]	; 0xffffffd8
   1c2a0:	bne	1c2b4 <__assert_fail@plt+0xa884>
   1c2a4:	mov	r0, ip
   1c2a8:	bl	1188c <strlen@plt>
   1c2ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c2b0:	mov	lr, r0
   1c2b4:	ldr	r0, [sp, #36]	; 0x24
   1c2b8:	str	sl, [sp, #56]	; 0x38
   1c2bc:	str	lr, [sp, #84]	; 0x54
   1c2c0:	cmp	r0, #0
   1c2c4:	beq	1c4dc <__assert_fail@plt+0xaaac>
   1c2c8:	add	r0, ip, r7
   1c2cc:	mov	r4, #1
   1c2d0:	mov	r6, #0
   1c2d4:	sub	sl, fp, #40	; 0x28
   1c2d8:	str	r0, [sp, #20]
   1c2dc:	str	r6, [sp, #64]	; 0x40
   1c2e0:	add	r6, r6, r7
   1c2e4:	sub	r0, fp, #44	; 0x2c
   1c2e8:	mov	r3, sl
   1c2ec:	add	r1, ip, r6
   1c2f0:	sub	r2, lr, r6
   1c2f4:	bl	1ede0 <__assert_fail@plt+0xd3b0>
   1c2f8:	cmn	r0, #2
   1c2fc:	beq	1c638 <__assert_fail@plt+0xac08>
   1c300:	ldr	sl, [sp, #56]	; 0x38
   1c304:	cmn	r0, #1
   1c308:	beq	1c62c <__assert_fail@plt+0xabfc>
   1c30c:	cmp	r0, #0
   1c310:	beq	1c630 <__assert_fail@plt+0xac00>
   1c314:	cmp	r0, #2
   1c318:	bcc	1c3d8 <__assert_fail@plt+0xa9a8>
   1c31c:	ldr	r1, [sp, #64]	; 0x40
   1c320:	ldr	r2, [sp, #20]
   1c324:	add	r1, r2, r1
   1c328:	mov	r2, #1
   1c32c:	ldrb	r3, [r1, r2]
   1c330:	sub	r3, r3, #91	; 0x5b
   1c334:	cmp	r3, #33	; 0x21
   1c338:	bhi	1c3cc <__assert_fail@plt+0xa99c>
   1c33c:	add	r6, pc, #0
   1c340:	ldr	pc, [r6, r3, lsl #2]
   1c344:	muleq	r1, r0, r9
   1c348:	muleq	r1, r0, r9
   1c34c:	andeq	ip, r1, ip, asr #7
   1c350:	muleq	r1, r0, r9
   1c354:	andeq	ip, r1, ip, asr #7
   1c358:	muleq	r1, r0, r9
   1c35c:	andeq	ip, r1, ip, asr #7
   1c360:	andeq	ip, r1, ip, asr #7
   1c364:	andeq	ip, r1, ip, asr #7
   1c368:	andeq	ip, r1, ip, asr #7
   1c36c:	andeq	ip, r1, ip, asr #7
   1c370:	andeq	ip, r1, ip, asr #7
   1c374:	andeq	ip, r1, ip, asr #7
   1c378:	andeq	ip, r1, ip, asr #7
   1c37c:	andeq	ip, r1, ip, asr #7
   1c380:	andeq	ip, r1, ip, asr #7
   1c384:	andeq	ip, r1, ip, asr #7
   1c388:	andeq	ip, r1, ip, asr #7
   1c38c:	andeq	ip, r1, ip, asr #7
   1c390:	andeq	ip, r1, ip, asr #7
   1c394:	andeq	ip, r1, ip, asr #7
   1c398:	andeq	ip, r1, ip, asr #7
   1c39c:	andeq	ip, r1, ip, asr #7
   1c3a0:	andeq	ip, r1, ip, asr #7
   1c3a4:	andeq	ip, r1, ip, asr #7
   1c3a8:	andeq	ip, r1, ip, asr #7
   1c3ac:	andeq	ip, r1, ip, asr #7
   1c3b0:	andeq	ip, r1, ip, asr #7
   1c3b4:	andeq	ip, r1, ip, asr #7
   1c3b8:	andeq	ip, r1, ip, asr #7
   1c3bc:	andeq	ip, r1, ip, asr #7
   1c3c0:	andeq	ip, r1, ip, asr #7
   1c3c4:	andeq	ip, r1, ip, asr #7
   1c3c8:	muleq	r1, r0, r9
   1c3cc:	add	r2, r2, #1
   1c3d0:	cmp	r2, r0
   1c3d4:	bcc	1c32c <__assert_fail@plt+0xa8fc>
   1c3d8:	ldr	r6, [sp, #64]	; 0x40
   1c3dc:	add	r6, r0, r6
   1c3e0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c3e4:	bl	117a8 <iswprint@plt>
   1c3e8:	cmp	r0, #0
   1c3ec:	sub	sl, fp, #40	; 0x28
   1c3f0:	movwne	r0, #1
   1c3f4:	and	r4, r4, r0
   1c3f8:	mov	r0, sl
   1c3fc:	bl	116f4 <mbsinit@plt>
   1c400:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c404:	ldr	lr, [sp, #84]	; 0x54
   1c408:	cmp	r0, #0
   1c40c:	beq	1c2dc <__assert_fail@plt+0xa8ac>
   1c410:	b	1c67c <__assert_fail@plt+0xac4c>
   1c414:	ldr	r0, [sp, #24]
   1c418:	cmp	r0, #0
   1c41c:	beq	1c4c4 <__assert_fail@plt+0xaa94>
   1c420:	add	r0, r7, #2
   1c424:	cmp	r0, lr
   1c428:	bcs	1c4c4 <__assert_fail@plt+0xaa94>
   1c42c:	add	r1, ip, r7
   1c430:	ldrb	r1, [r1, #1]
   1c434:	cmp	r1, #63	; 0x3f
   1c438:	bne	1c4c4 <__assert_fail@plt+0xaa94>
   1c43c:	ldrb	r5, [ip, r0]
   1c440:	sub	r1, r5, #33	; 0x21
   1c444:	cmp	r1, #29
   1c448:	bhi	1c4c4 <__assert_fail@plt+0xaa94>
   1c44c:	movw	r3, #20929	; 0x51c1
   1c450:	mov	r2, #1
   1c454:	movt	r3, #14336	; 0x3800
   1c458:	tst	r3, r2, lsl r1
   1c45c:	beq	1c4c4 <__assert_fail@plt+0xaa94>
   1c460:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1c464:	tst	r1, #1
   1c468:	bne	1cab4 <__assert_fail@plt+0xb084>
   1c46c:	cmp	r9, sl
   1c470:	mov	r7, r0
   1c474:	mov	r4, #0
   1c478:	movcc	r1, #63	; 0x3f
   1c47c:	strbcc	r1, [r6, r9]
   1c480:	add	r1, r9, #1
   1c484:	cmp	r1, sl
   1c488:	movcc	r2, #34	; 0x22
   1c48c:	strbcc	r2, [r6, r1]
   1c490:	add	r1, r9, #2
   1c494:	cmp	r1, sl
   1c498:	movcc	r2, #34	; 0x22
   1c49c:	strbcc	r2, [r6, r1]
   1c4a0:	add	r1, r9, #3
   1c4a4:	add	r9, r9, #4
   1c4a8:	cmp	r1, sl
   1c4ac:	movcc	r2, #63	; 0x3f
   1c4b0:	strbcc	r2, [r6, r1]
   1c4b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c4b8:	cmp	r0, #0
   1c4bc:	bne	1beb4 <__assert_fail@plt+0xa484>
   1c4c0:	b	1c18c <__assert_fail@plt+0xa75c>
   1c4c4:	mov	r5, #63	; 0x3f
   1c4c8:	mov	r4, #0
   1c4cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c4d0:	cmp	r0, #0
   1c4d4:	bne	1beb4 <__assert_fail@plt+0xa484>
   1c4d8:	b	1c18c <__assert_fail@plt+0xa75c>
   1c4dc:	mov	r4, #1
   1c4e0:	mov	r6, #0
   1c4e4:	sub	sl, fp, #40	; 0x28
   1c4e8:	str	r6, [sp, #64]	; 0x40
   1c4ec:	add	r6, r6, r7
   1c4f0:	sub	r0, fp, #44	; 0x2c
   1c4f4:	mov	r3, sl
   1c4f8:	add	r1, ip, r6
   1c4fc:	sub	r2, lr, r6
   1c500:	bl	1ede0 <__assert_fail@plt+0xd3b0>
   1c504:	cmn	r0, #2
   1c508:	beq	1c638 <__assert_fail@plt+0xac08>
   1c50c:	cmn	r0, #1
   1c510:	beq	1c62c <__assert_fail@plt+0xabfc>
   1c514:	ldr	r6, [sp, #64]	; 0x40
   1c518:	cmp	r0, #0
   1c51c:	beq	1c678 <__assert_fail@plt+0xac48>
   1c520:	add	r6, r0, r6
   1c524:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c528:	bl	117a8 <iswprint@plt>
   1c52c:	cmp	r0, #0
   1c530:	sub	sl, fp, #40	; 0x28
   1c534:	movwne	r0, #1
   1c538:	and	r4, r4, r0
   1c53c:	mov	r0, sl
   1c540:	bl	116f4 <mbsinit@plt>
   1c544:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c548:	ldr	lr, [sp, #84]	; 0x54
   1c54c:	cmp	r0, #0
   1c550:	beq	1c4e8 <__assert_fail@plt+0xaab8>
   1c554:	b	1c67c <__assert_fail@plt+0xac4c>
   1c558:	cmp	r9, sl
   1c55c:	mov	r2, #1
   1c560:	movcc	r0, #39	; 0x27
   1c564:	strbcc	r0, [r6, r9]
   1c568:	add	r0, r9, #1
   1c56c:	cmp	r0, sl
   1c570:	movcc	r1, #36	; 0x24
   1c574:	strbcc	r1, [r6, r0]
   1c578:	add	r0, r9, #2
   1c57c:	cmp	r0, sl
   1c580:	movcc	r1, #39	; 0x27
   1c584:	strbcc	r1, [r6, r0]
   1c588:	add	r0, r9, #3
   1c58c:	cmp	r0, sl
   1c590:	add	r9, r0, #1
   1c594:	str	r2, [fp, #-48]	; 0xffffffd0
   1c598:	movcc	r1, #92	; 0x5c
   1c59c:	strbcc	r1, [r6, r0]
   1c5a0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1c5a4:	cmp	r1, #2
   1c5a8:	beq	1c608 <__assert_fail@plt+0xabd8>
   1c5ac:	add	r1, r7, #1
   1c5b0:	mov	r4, #0
   1c5b4:	mov	r8, #1
   1c5b8:	mov	r5, #48	; 0x30
   1c5bc:	cmp	r1, lr
   1c5c0:	bcs	1bea8 <__assert_fail@plt+0xa478>
   1c5c4:	ldrb	r1, [ip, r1]
   1c5c8:	sub	r1, r1, #48	; 0x30
   1c5cc:	uxtb	r1, r1
   1c5d0:	cmp	r1, #9
   1c5d4:	bhi	1bea8 <__assert_fail@plt+0xa478>
   1c5d8:	cmp	r9, sl
   1c5dc:	movcc	r1, #48	; 0x30
   1c5e0:	strbcc	r1, [r6, r9]
   1c5e4:	add	r1, r0, #2
   1c5e8:	add	r9, r0, #3
   1c5ec:	cmp	r1, sl
   1c5f0:	movcc	r2, #48	; 0x30
   1c5f4:	strbcc	r2, [r6, r1]
   1c5f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c5fc:	cmp	r0, #0
   1c600:	bne	1beb4 <__assert_fail@plt+0xa484>
   1c604:	b	1c18c <__assert_fail@plt+0xa75c>
   1c608:	mov	r0, #48	; 0x30
   1c60c:	mov	r8, #1
   1c610:	mov	r4, #0
   1c614:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1c618:	cmp	r1, #0
   1c61c:	bne	1c1c8 <__assert_fail@plt+0xa798>
   1c620:	cmp	r8, #0
   1c624:	beq	1c144 <__assert_fail@plt+0xa714>
   1c628:	b	1bf34 <__assert_fail@plt+0xa504>
   1c62c:	mov	r4, #0
   1c630:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c634:	b	1c670 <__assert_fail@plt+0xac40>
   1c638:	ldr	r1, [sp, #84]	; 0x54
   1c63c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c640:	mov	r4, #0
   1c644:	cmp	r6, r1
   1c648:	bcs	1c670 <__assert_fail@plt+0xac40>
   1c64c:	ldrb	r0, [ip, r6]
   1c650:	cmp	r0, #0
   1c654:	beq	1c670 <__assert_fail@plt+0xac40>
   1c658:	ldr	r0, [sp, #64]	; 0x40
   1c65c:	add	r0, r0, #1
   1c660:	add	r6, r0, r7
   1c664:	str	r0, [sp, #64]	; 0x40
   1c668:	cmp	r6, r1
   1c66c:	bcc	1c64c <__assert_fail@plt+0xac1c>
   1c670:	ldr	r6, [sp, #64]	; 0x40
   1c674:	b	1c67c <__assert_fail@plt+0xac4c>
   1c678:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c67c:	mov	r1, r6
   1c680:	ldr	r6, [sp, #76]	; 0x4c
   1c684:	ldr	sl, [sp, #56]	; 0x38
   1c688:	ldr	r0, [sp, #44]	; 0x2c
   1c68c:	cmp	r1, #1
   1c690:	orr	r2, r4, r0
   1c694:	mov	r0, r1
   1c698:	bhi	1c6b8 <__assert_fail@plt+0xac88>
   1c69c:	tst	r2, #1
   1c6a0:	beq	1c6b8 <__assert_fail@plt+0xac88>
   1c6a4:	ldr	lr, [sp, #84]	; 0x54
   1c6a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c6ac:	cmp	r0, #0
   1c6b0:	bne	1beb4 <__assert_fail@plt+0xa484>
   1c6b4:	b	1c18c <__assert_fail@plt+0xa75c>
   1c6b8:	str	r2, [sp, #64]	; 0x40
   1c6bc:	add	r0, r0, r7
   1c6c0:	add	r1, r7, #1
   1c6c4:	ldr	lr, [sp, #84]	; 0x54
   1c6c8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1c6cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c6d0:	mov	r3, #0
   1c6d4:	str	r0, [sp, #56]	; 0x38
   1c6d8:	ldr	r0, [sp, #64]	; 0x40
   1c6dc:	tst	r0, #1
   1c6e0:	bne	1c7c8 <__assert_fail@plt+0xad98>
   1c6e4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c6e8:	tst	r0, #1
   1c6ec:	bne	1c968 <__assert_fail@plt+0xaf38>
   1c6f0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1c6f4:	cmp	r7, #2
   1c6f8:	movwne	r3, #1
   1c6fc:	orr	r3, r3, r2
   1c700:	tst	r3, #1
   1c704:	bne	1c73c <__assert_fail@plt+0xad0c>
   1c708:	cmp	r9, sl
   1c70c:	add	r3, r9, #1
   1c710:	movcc	r2, #39	; 0x27
   1c714:	strbcc	r2, [r6, r9]
   1c718:	cmp	r3, sl
   1c71c:	movcc	r2, #36	; 0x24
   1c720:	strbcc	r2, [r6, r3]
   1c724:	add	r3, r9, #2
   1c728:	add	r9, r9, #3
   1c72c:	cmp	r3, sl
   1c730:	movcc	r2, #39	; 0x27
   1c734:	strbcc	r2, [r6, r3]
   1c738:	mov	r2, #1
   1c73c:	cmp	r9, sl
   1c740:	mov	r0, r2
   1c744:	movcc	r3, #92	; 0x5c
   1c748:	strbcc	r3, [r6, r9]
   1c74c:	add	r3, r9, #1
   1c750:	cmp	r3, sl
   1c754:	andcc	r7, r5, #192	; 0xc0
   1c758:	movcc	r2, #48	; 0x30
   1c75c:	orrcc	r7, r2, r7, lsr #6
   1c760:	strbcc	r7, [r6, r3]
   1c764:	add	r3, r9, #2
   1c768:	add	r9, r9, #3
   1c76c:	cmp	r3, sl
   1c770:	lsrcc	r7, r5, #3
   1c774:	movcc	r2, #6
   1c778:	bficc	r7, r2, #3, #29
   1c77c:	mov	r2, #6
   1c780:	strbcc	r7, [r6, r3]
   1c784:	bfi	r5, r2, #3, #29
   1c788:	mov	r3, #1
   1c78c:	mov	r2, r0
   1c790:	ldr	r0, [sp, #56]	; 0x38
   1c794:	and	r8, r3, #1
   1c798:	cmp	r0, r1
   1c79c:	bhi	1c7fc <__assert_fail@plt+0xadcc>
   1c7a0:	b	1c83c <__assert_fail@plt+0xae0c>
   1c7a4:	cmp	r9, sl
   1c7a8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1c7ac:	strbcc	r5, [r6, r9]
   1c7b0:	add	r9, r9, #1
   1c7b4:	ldrb	r5, [ip, r1]
   1c7b8:	add	r1, r1, #1
   1c7bc:	ldr	r0, [sp, #64]	; 0x40
   1c7c0:	tst	r0, #1
   1c7c4:	beq	1c6e4 <__assert_fail@plt+0xacb4>
   1c7c8:	ldr	r7, [fp, #-56]	; 0xffffffc8
   1c7cc:	tst	r7, #1
   1c7d0:	beq	1c7e4 <__assert_fail@plt+0xadb4>
   1c7d4:	cmp	r9, sl
   1c7d8:	movcc	r7, #92	; 0x5c
   1c7dc:	strbcc	r7, [r6, r9]
   1c7e0:	add	r9, r9, #1
   1c7e4:	mov	r7, #0
   1c7e8:	str	r7, [fp, #-56]	; 0xffffffc8
   1c7ec:	ldr	r0, [sp, #56]	; 0x38
   1c7f0:	and	r8, r3, #1
   1c7f4:	cmp	r0, r1
   1c7f8:	bls	1c83c <__assert_fail@plt+0xae0c>
   1c7fc:	cmp	r8, #0
   1c800:	mvn	r7, r2
   1c804:	movwne	r8, #1
   1c808:	orr	r7, r7, r8
   1c80c:	tst	r7, #1
   1c810:	bne	1c7a4 <__assert_fail@plt+0xad74>
   1c814:	cmp	r9, sl
   1c818:	movcc	r7, #39	; 0x27
   1c81c:	strbcc	r7, [r6, r9]
   1c820:	add	r7, r9, #1
   1c824:	add	r9, r9, #2
   1c828:	cmp	r7, sl
   1c82c:	movcc	r2, #39	; 0x27
   1c830:	strbcc	r2, [r6, r7]
   1c834:	mov	r2, #0
   1c838:	b	1c7a4 <__assert_fail@plt+0xad74>
   1c83c:	cmp	r8, #0
   1c840:	sub	r7, r1, #1
   1c844:	mov	r0, r5
   1c848:	str	r2, [fp, #-48]	; 0xffffffd0
   1c84c:	movwne	r8, #1
   1c850:	cmp	r8, #0
   1c854:	beq	1c144 <__assert_fail@plt+0xa714>
   1c858:	b	1bf34 <__assert_fail@plt+0xa504>
   1c85c:	mov	lr, r7
   1c860:	b	1c868 <__assert_fail@plt+0xae38>
   1c864:	mvn	lr, #0
   1c868:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1c86c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1c870:	eor	r0, r7, #2
   1c874:	orr	r0, r0, r9
   1c878:	clz	r0, r0
   1c87c:	lsr	r0, r0, #5
   1c880:	tst	r1, r0
   1c884:	bne	1c984 <__assert_fail@plt+0xaf54>
   1c888:	mov	r0, r1
   1c88c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1c890:	cmp	r7, #2
   1c894:	movwne	r1, #1
   1c898:	orr	r0, r0, r1
   1c89c:	tst	r0, #1
   1c8a0:	ldreq	r0, [sp, #52]	; 0x34
   1c8a4:	streq	lr, [sp, #84]	; 0x54
   1c8a8:	eoreq	r0, r0, #1
   1c8ac:	tsteq	r0, #1
   1c8b0:	bne	1ca48 <__assert_fail@plt+0xb018>
   1c8b4:	tst	r4, #1
   1c8b8:	bne	1ca04 <__assert_fail@plt+0xafd4>
   1c8bc:	ldr	r6, [sp, #48]	; 0x30
   1c8c0:	mov	r8, #0
   1c8c4:	cmp	r6, #0
   1c8c8:	beq	1ca40 <__assert_fail@plt+0xb010>
   1c8cc:	ldr	r0, [sp, #80]	; 0x50
   1c8d0:	mov	r1, #0
   1c8d4:	cmp	sl, #0
   1c8d8:	mov	r4, #0
   1c8dc:	str	r1, [fp, #-72]	; 0xffffffb8
   1c8e0:	beq	1b7d4 <__assert_fail@plt+0x9da4>
   1c8e4:	b	1ca48 <__assert_fail@plt+0xb018>
   1c8e8:	ldrb	r1, [r0, #3]
   1c8ec:	cmp	r1, #56	; 0x38
   1c8f0:	ldrbeq	r1, [r0, #4]
   1c8f4:	cmpeq	r1, #48	; 0x30
   1c8f8:	bne	1b9cc <__assert_fail@plt+0x9f9c>
   1c8fc:	ldrb	r1, [r0, #5]
   1c900:	cmp	r1, #51	; 0x33
   1c904:	ldrbeq	r1, [r0, #6]
   1c908:	cmpeq	r1, #48	; 0x30
   1c90c:	bne	1b9cc <__assert_fail@plt+0x9f9c>
   1c910:	ldrb	r0, [r0, #7]
   1c914:	cmp	r0, #0
   1c918:	movw	r0, #16064	; 0x3ec0
   1c91c:	movt	r0, #2
   1c920:	str	r0, [sp, #68]	; 0x44
   1c924:	bne	1b9cc <__assert_fail@plt+0x9f9c>
   1c928:	b	1b9e8 <__assert_fail@plt+0x9fb8>
   1c92c:	ldrb	r1, [r0, #4]
   1c930:	cmp	r1, #48	; 0x30
   1c934:	ldrbeq	r1, [r0, #5]
   1c938:	cmpeq	r1, #51	; 0x33
   1c93c:	bne	1bab0 <__assert_fail@plt+0xa080>
   1c940:	ldrb	r1, [r0, #6]
   1c944:	cmp	r1, #48	; 0x30
   1c948:	ldrbeq	r0, [r0, #7]
   1c94c:	cmpeq	r0, #0
   1c950:	bne	1bab0 <__assert_fail@plt+0xa080>
   1c954:	movw	r0, #16068	; 0x3ec4
   1c958:	movt	r0, #2
   1c95c:	str	r0, [sp, #72]	; 0x48
   1c960:	b	1bad0 <__assert_fail@plt+0xa0a0>
   1c964:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1c968:	ldr	r2, [sp, #80]	; 0x50
   1c96c:	b	1c9a4 <__assert_fail@plt+0xaf74>
   1c970:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c974:	mov	r2, #1
   1c978:	mov	lr, r4
   1c97c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1c980:	b	1c9a4 <__assert_fail@plt+0xaf74>
   1c984:	ldr	r2, [sp, #80]	; 0x50
   1c988:	mov	r7, #2
   1c98c:	b	1c9a4 <__assert_fail@plt+0xaf74>
   1c990:	ldr	r6, [sp, #76]	; 0x4c
   1c994:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c998:	ldr	lr, [sp, #84]	; 0x54
   1c99c:	ldr	r2, [sp, #80]	; 0x50
   1c9a0:	mov	r7, #2
   1c9a4:	mov	r0, #0
   1c9a8:	ldr	r1, [fp, #12]
   1c9ac:	tst	r2, #1
   1c9b0:	mov	r2, r7
   1c9b4:	mov	r3, lr
   1c9b8:	str	r0, [sp, #8]
   1c9bc:	ldr	r0, [sp, #68]	; 0x44
   1c9c0:	movwne	r2, #4
   1c9c4:	cmp	r7, #2
   1c9c8:	movne	r2, r7
   1c9cc:	str	r2, [sp]
   1c9d0:	mov	r2, ip
   1c9d4:	bic	r1, r1, #2
   1c9d8:	str	r0, [sp, #12]
   1c9dc:	ldr	r0, [sp, #72]	; 0x48
   1c9e0:	str	r1, [sp, #4]
   1c9e4:	mov	r1, sl
   1c9e8:	str	r0, [sp, #16]
   1c9ec:	mov	r0, r6
   1c9f0:	bl	1b758 <__assert_fail@plt+0x9d28>
   1c9f4:	mov	r9, r0
   1c9f8:	mov	r0, r9
   1c9fc:	sub	sp, fp, #28
   1ca00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca04:	mov	r0, #5
   1ca08:	ldr	r1, [sp, #48]	; 0x30
   1ca0c:	ldr	r2, [fp, #-84]	; 0xffffffac
   1ca10:	ldr	r3, [sp, #84]	; 0x54
   1ca14:	str	r0, [sp]
   1ca18:	ldr	r0, [fp, #12]
   1ca1c:	str	r0, [sp, #4]
   1ca20:	ldr	r0, [fp, #16]
   1ca24:	str	r0, [sp, #8]
   1ca28:	ldr	r0, [sp, #68]	; 0x44
   1ca2c:	str	r0, [sp, #12]
   1ca30:	ldr	r0, [sp, #72]	; 0x48
   1ca34:	str	r0, [sp, #16]
   1ca38:	ldr	r0, [sp, #76]	; 0x4c
   1ca3c:	b	1c9f0 <__assert_fail@plt+0xafc0>
   1ca40:	mov	r0, #0
   1ca44:	str	r0, [fp, #-72]	; 0xffffffb8
   1ca48:	ldr	r1, [sp, #92]	; 0x5c
   1ca4c:	cmp	r1, #0
   1ca50:	beq	1ca90 <__assert_fail@plt+0xb060>
   1ca54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1ca58:	ldr	r2, [sp, #76]	; 0x4c
   1ca5c:	tst	r0, #1
   1ca60:	bne	1ca94 <__assert_fail@plt+0xb064>
   1ca64:	ldrb	r0, [r1]
   1ca68:	cmp	r0, #0
   1ca6c:	beq	1ca94 <__assert_fail@plt+0xb064>
   1ca70:	add	r1, r1, #1
   1ca74:	cmp	r9, sl
   1ca78:	strbcc	r0, [r2, r9]
   1ca7c:	add	r9, r9, #1
   1ca80:	ldrb	r0, [r1], #1
   1ca84:	cmp	r0, #0
   1ca88:	bne	1ca74 <__assert_fail@plt+0xb044>
   1ca8c:	b	1ca94 <__assert_fail@plt+0xb064>
   1ca90:	ldr	r2, [sp, #76]	; 0x4c
   1ca94:	cmp	r9, sl
   1ca98:	movcc	r0, #0
   1ca9c:	strbcc	r0, [r2, r9]
   1caa0:	mov	r0, r9
   1caa4:	sub	sp, fp, #28
   1caa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1caac:	mov	r2, #1
   1cab0:	b	1c97c <__assert_fail@plt+0xaf4c>
   1cab4:	ldr	r2, [sp, #80]	; 0x50
   1cab8:	mov	r7, #5
   1cabc:	b	1c9a4 <__assert_fail@plt+0xaf74>
   1cac0:	bl	11a24 <abort@plt>
   1cac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cac8:	add	fp, sp, #28
   1cacc:	sub	sp, sp, #28
   1cad0:	movw	r5, #21000	; 0x5208
   1cad4:	cmp	r2, #0
   1cad8:	mov	r4, r1
   1cadc:	mov	r7, r0
   1cae0:	str	r0, [sp, #20]
   1cae4:	movt	r5, #3
   1cae8:	movne	r5, r2
   1caec:	bl	118bc <__errno_location@plt>
   1caf0:	mov	sl, r0
   1caf4:	ldm	r5, {r0, r1}
   1caf8:	ldr	r2, [r5, #40]	; 0x28
   1cafc:	ldr	r3, [r5, #44]	; 0x2c
   1cb00:	add	r9, r5, #8
   1cb04:	ldr	r6, [sl]
   1cb08:	orr	r8, r1, #1
   1cb0c:	mov	r1, #0
   1cb10:	str	r6, [sp, #24]
   1cb14:	stm	sp, {r0, r8, r9}
   1cb18:	str	r2, [sp, #12]
   1cb1c:	str	r3, [sp, #16]
   1cb20:	mov	r0, #0
   1cb24:	mov	r2, r7
   1cb28:	mov	r3, r4
   1cb2c:	mov	r6, r4
   1cb30:	bl	1b758 <__assert_fail@plt+0x9d28>
   1cb34:	add	r7, r0, #1
   1cb38:	mov	r0, r7
   1cb3c:	bl	1e1bc <__assert_fail@plt+0xc78c>
   1cb40:	mov	r4, r0
   1cb44:	ldr	r0, [r5]
   1cb48:	ldr	r2, [r5, #44]	; 0x2c
   1cb4c:	ldr	r1, [r5, #40]	; 0x28
   1cb50:	mov	r3, r6
   1cb54:	stm	sp, {r0, r8, r9}
   1cb58:	str	r2, [sp, #16]
   1cb5c:	str	r1, [sp, #12]
   1cb60:	mov	r0, r4
   1cb64:	mov	r1, r7
   1cb68:	ldr	r2, [sp, #20]
   1cb6c:	bl	1b758 <__assert_fail@plt+0x9d28>
   1cb70:	ldr	r0, [sp, #24]
   1cb74:	str	r0, [sl]
   1cb78:	mov	r0, r4
   1cb7c:	sub	sp, fp, #28
   1cb80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb88:	add	fp, sp, #28
   1cb8c:	sub	sp, sp, #36	; 0x24
   1cb90:	movw	r8, #21000	; 0x5208
   1cb94:	cmp	r3, #0
   1cb98:	mov	r4, r2
   1cb9c:	str	r2, [sp, #24]
   1cba0:	mov	r5, r1
   1cba4:	mov	r6, r0
   1cba8:	str	r0, [sp, #20]
   1cbac:	movt	r8, #3
   1cbb0:	movne	r8, r3
   1cbb4:	bl	118bc <__errno_location@plt>
   1cbb8:	str	r0, [sp, #28]
   1cbbc:	cmp	r4, #0
   1cbc0:	add	sl, r8, #8
   1cbc4:	ldm	r8, {r3, r9}
   1cbc8:	ldr	r7, [r0]
   1cbcc:	ldr	r1, [r8, #40]	; 0x28
   1cbd0:	ldr	r2, [r8, #44]	; 0x2c
   1cbd4:	mov	r0, #0
   1cbd8:	orreq	r9, r9, #1
   1cbdc:	str	r7, [sp, #32]
   1cbe0:	mov	r7, r5
   1cbe4:	stm	sp, {r3, r9, sl}
   1cbe8:	str	r1, [sp, #12]
   1cbec:	str	r2, [sp, #16]
   1cbf0:	mov	r1, #0
   1cbf4:	mov	r2, r6
   1cbf8:	mov	r3, r5
   1cbfc:	bl	1b758 <__assert_fail@plt+0x9d28>
   1cc00:	add	r4, r0, #1
   1cc04:	mov	r5, r0
   1cc08:	mov	r0, r4
   1cc0c:	bl	1e1bc <__assert_fail@plt+0xc78c>
   1cc10:	mov	r6, r0
   1cc14:	ldr	r0, [r8]
   1cc18:	ldr	r2, [r8, #44]	; 0x2c
   1cc1c:	ldr	r1, [r8, #40]	; 0x28
   1cc20:	mov	r3, r7
   1cc24:	stm	sp, {r0, r9, sl}
   1cc28:	str	r2, [sp, #16]
   1cc2c:	str	r1, [sp, #12]
   1cc30:	mov	r0, r6
   1cc34:	mov	r1, r4
   1cc38:	ldr	r2, [sp, #20]
   1cc3c:	bl	1b758 <__assert_fail@plt+0x9d28>
   1cc40:	ldr	r0, [sp, #24]
   1cc44:	ldr	r1, [sp, #32]
   1cc48:	ldr	r2, [sp, #28]
   1cc4c:	cmp	r0, #0
   1cc50:	str	r1, [r2]
   1cc54:	strne	r5, [r0]
   1cc58:	mov	r0, r6
   1cc5c:	sub	sp, fp, #28
   1cc60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc64:	push	{r4, r5, r6, r7, fp, lr}
   1cc68:	add	fp, sp, #16
   1cc6c:	movw	r4, #20920	; 0x51b8
   1cc70:	movt	r4, #3
   1cc74:	ldrd	r6, [r4]
   1cc78:	cmp	r7, #2
   1cc7c:	blt	1cca8 <__assert_fail@plt+0xb278>
   1cc80:	add	r5, r6, #12
   1cc84:	mov	r7, #0
   1cc88:	ldr	r0, [r5, r7, lsl #3]
   1cc8c:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1cc90:	ldr	r1, [r4, #4]
   1cc94:	add	r2, r7, #2
   1cc98:	add	r0, r7, #1
   1cc9c:	mov	r7, r0
   1cca0:	cmp	r2, r1
   1cca4:	blt	1cc88 <__assert_fail@plt+0xb258>
   1cca8:	ldr	r0, [r6, #4]
   1ccac:	movw	r5, #21048	; 0x5238
   1ccb0:	movt	r5, #3
   1ccb4:	cmp	r0, r5
   1ccb8:	beq	1cccc <__assert_fail@plt+0xb29c>
   1ccbc:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1ccc0:	mov	r0, #256	; 0x100
   1ccc4:	str	r0, [r4, #8]
   1ccc8:	str	r5, [r4, #12]
   1cccc:	add	r5, r4, #8
   1ccd0:	cmp	r6, r5
   1ccd4:	beq	1cce4 <__assert_fail@plt+0xb2b4>
   1ccd8:	mov	r0, r6
   1ccdc:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1cce0:	str	r5, [r4]
   1cce4:	mov	r0, #1
   1cce8:	str	r0, [r4, #4]
   1ccec:	pop	{r4, r5, r6, r7, fp, pc}
   1ccf0:	movw	r3, #21000	; 0x5208
   1ccf4:	mvn	r2, #0
   1ccf8:	movt	r3, #3
   1ccfc:	b	1cd00 <__assert_fail@plt+0xb2d0>
   1cd00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd04:	add	fp, sp, #28
   1cd08:	sub	sp, sp, #44	; 0x2c
   1cd0c:	mov	r7, r3
   1cd10:	str	r2, [sp, #36]	; 0x24
   1cd14:	str	r1, [sp, #32]
   1cd18:	mov	r5, r0
   1cd1c:	bl	118bc <__errno_location@plt>
   1cd20:	cmp	r5, #0
   1cd24:	blt	1ce88 <__assert_fail@plt+0xb458>
   1cd28:	cmn	r5, #-2147483647	; 0x80000001
   1cd2c:	beq	1ce88 <__assert_fail@plt+0xb458>
   1cd30:	movw	r8, #20920	; 0x51b8
   1cd34:	mov	r4, r0
   1cd38:	movt	r8, #3
   1cd3c:	ldr	r6, [r8]
   1cd40:	ldr	r1, [r8, #4]
   1cd44:	ldr	r0, [r0]
   1cd48:	str	r4, [sp, #28]
   1cd4c:	cmp	r1, r5
   1cd50:	str	r0, [sp, #24]
   1cd54:	ble	1cd60 <__assert_fail@plt+0xb330>
   1cd58:	mov	sl, r6
   1cd5c:	b	1cdc4 <__assert_fail@plt+0xb394>
   1cd60:	mov	r0, #8
   1cd64:	add	r9, r8, #8
   1cd68:	add	r2, r5, #1
   1cd6c:	str	r1, [fp, #-32]	; 0xffffffe0
   1cd70:	mvn	r3, #-2147483648	; 0x80000000
   1cd74:	str	r0, [sp]
   1cd78:	subs	r0, r6, r9
   1cd7c:	sub	r2, r2, r1
   1cd80:	sub	r1, fp, #32
   1cd84:	movne	r0, r6
   1cd88:	bl	1e3bc <__assert_fail@plt+0xc98c>
   1cd8c:	str	r0, [r8]
   1cd90:	cmp	r6, r9
   1cd94:	mov	sl, r0
   1cd98:	ldrdeq	r0, [r8, #8]
   1cd9c:	stmeq	sl, {r0, r1}
   1cda0:	ldr	r1, [r8, #4]
   1cda4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1cda8:	add	r0, sl, r1, lsl #3
   1cdac:	sub	r1, r2, r1
   1cdb0:	lsl	r2, r1, #3
   1cdb4:	mov	r1, #0
   1cdb8:	bl	118ec <memset@plt>
   1cdbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cdc0:	str	r0, [r8, #4]
   1cdc4:	mov	r9, sl
   1cdc8:	ldr	r6, [r9, r5, lsl #3]!
   1cdcc:	ldr	r4, [r9, #4]!
   1cdd0:	ldm	r7, {r0, r1}
   1cdd4:	ldr	r2, [r7, #40]	; 0x28
   1cdd8:	ldr	r3, [r7, #44]	; 0x2c
   1cddc:	orr	r8, r1, #1
   1cde0:	add	r1, r7, #8
   1cde4:	stm	sp, {r0, r8}
   1cde8:	add	r0, sp, #8
   1cdec:	str	r1, [sp, #20]
   1cdf0:	stm	r0, {r1, r2, r3}
   1cdf4:	mov	r0, r4
   1cdf8:	mov	r1, r6
   1cdfc:	ldr	r2, [sp, #32]
   1ce00:	ldr	r3, [sp, #36]	; 0x24
   1ce04:	bl	1b758 <__assert_fail@plt+0x9d28>
   1ce08:	cmp	r6, r0
   1ce0c:	bhi	1ce70 <__assert_fail@plt+0xb440>
   1ce10:	add	r6, r0, #1
   1ce14:	movw	r0, #21048	; 0x5238
   1ce18:	movt	r0, #3
   1ce1c:	str	r6, [sl, r5, lsl #3]
   1ce20:	cmp	r4, r0
   1ce24:	beq	1ce30 <__assert_fail@plt+0xb400>
   1ce28:	mov	r0, r4
   1ce2c:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1ce30:	mov	r0, r6
   1ce34:	bl	1e1bc <__assert_fail@plt+0xc78c>
   1ce38:	str	r0, [r9]
   1ce3c:	mov	r4, r0
   1ce40:	add	r3, sp, #8
   1ce44:	ldr	r0, [r7]
   1ce48:	ldr	r1, [r7, #40]	; 0x28
   1ce4c:	ldr	r2, [r7, #44]	; 0x2c
   1ce50:	stm	sp, {r0, r8}
   1ce54:	ldr	r0, [sp, #20]
   1ce58:	stm	r3, {r0, r1, r2}
   1ce5c:	mov	r0, r4
   1ce60:	mov	r1, r6
   1ce64:	ldr	r2, [sp, #32]
   1ce68:	ldr	r3, [sp, #36]	; 0x24
   1ce6c:	bl	1b758 <__assert_fail@plt+0x9d28>
   1ce70:	ldr	r1, [sp, #24]
   1ce74:	ldr	r0, [sp, #28]
   1ce78:	str	r1, [r0]
   1ce7c:	mov	r0, r4
   1ce80:	sub	sp, fp, #28
   1ce84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce88:	bl	11a24 <abort@plt>
   1ce8c:	movw	r3, #21000	; 0x5208
   1ce90:	movt	r3, #3
   1ce94:	b	1cd00 <__assert_fail@plt+0xb2d0>
   1ce98:	movw	r3, #21000	; 0x5208
   1ce9c:	mov	r1, r0
   1cea0:	mov	r0, #0
   1cea4:	mvn	r2, #0
   1cea8:	movt	r3, #3
   1ceac:	b	1cd00 <__assert_fail@plt+0xb2d0>
   1ceb0:	movw	r3, #21000	; 0x5208
   1ceb4:	mov	r2, r1
   1ceb8:	mov	r1, r0
   1cebc:	mov	r0, #0
   1cec0:	movt	r3, #3
   1cec4:	b	1cd00 <__assert_fail@plt+0xb2d0>
   1cec8:	push	{fp, lr}
   1cecc:	mov	fp, sp
   1ced0:	sub	sp, sp, #48	; 0x30
   1ced4:	vmov.i32	q8, #0	; 0x00000000
   1ced8:	mov	ip, #32
   1cedc:	mov	r3, sp
   1cee0:	mov	lr, r2
   1cee4:	cmp	r1, #10
   1cee8:	add	r2, r3, #16
   1ceec:	vst1.64	{d16-d17}, [r3], ip
   1cef0:	vst1.64	{d16-d17}, [r3]
   1cef4:	vst1.64	{d16-d17}, [r2]
   1cef8:	beq	1cf18 <__assert_fail@plt+0xb4e8>
   1cefc:	str	r1, [sp]
   1cf00:	mov	r3, sp
   1cf04:	mov	r1, lr
   1cf08:	mvn	r2, #0
   1cf0c:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1cf10:	mov	sp, fp
   1cf14:	pop	{fp, pc}
   1cf18:	bl	11a24 <abort@plt>
   1cf1c:	push	{r4, sl, fp, lr}
   1cf20:	add	fp, sp, #8
   1cf24:	sub	sp, sp, #48	; 0x30
   1cf28:	mov	ip, r3
   1cf2c:	mov	r3, sp
   1cf30:	vmov.i32	q8, #0	; 0x00000000
   1cf34:	mov	lr, #32
   1cf38:	cmp	r1, #10
   1cf3c:	add	r4, r3, #16
   1cf40:	vst1.64	{d16-d17}, [r3], lr
   1cf44:	vst1.64	{d16-d17}, [r3]
   1cf48:	vst1.64	{d16-d17}, [r4]
   1cf4c:	beq	1cf6c <__assert_fail@plt+0xb53c>
   1cf50:	str	r1, [sp]
   1cf54:	mov	r1, r2
   1cf58:	mov	r3, sp
   1cf5c:	mov	r2, ip
   1cf60:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1cf64:	sub	sp, fp, #8
   1cf68:	pop	{r4, sl, fp, pc}
   1cf6c:	bl	11a24 <abort@plt>
   1cf70:	push	{fp, lr}
   1cf74:	mov	fp, sp
   1cf78:	sub	sp, sp, #48	; 0x30
   1cf7c:	mov	r3, sp
   1cf80:	vmov.i32	q8, #0	; 0x00000000
   1cf84:	mov	ip, #32
   1cf88:	cmp	r0, #10
   1cf8c:	add	r2, r3, #16
   1cf90:	vst1.64	{d16-d17}, [r3], ip
   1cf94:	vst1.64	{d16-d17}, [r3]
   1cf98:	vst1.64	{d16-d17}, [r2]
   1cf9c:	beq	1cfbc <__assert_fail@plt+0xb58c>
   1cfa0:	str	r0, [sp]
   1cfa4:	mov	r3, sp
   1cfa8:	mov	r0, #0
   1cfac:	mvn	r2, #0
   1cfb0:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1cfb4:	mov	sp, fp
   1cfb8:	pop	{fp, pc}
   1cfbc:	bl	11a24 <abort@plt>
   1cfc0:	push	{fp, lr}
   1cfc4:	mov	fp, sp
   1cfc8:	sub	sp, sp, #48	; 0x30
   1cfcc:	mov	r3, sp
   1cfd0:	vmov.i32	q8, #0	; 0x00000000
   1cfd4:	mov	ip, #32
   1cfd8:	cmp	r0, #10
   1cfdc:	add	lr, r3, #16
   1cfe0:	vst1.64	{d16-d17}, [r3], ip
   1cfe4:	vst1.64	{d16-d17}, [r3]
   1cfe8:	vst1.64	{d16-d17}, [lr]
   1cfec:	beq	1d008 <__assert_fail@plt+0xb5d8>
   1cff0:	str	r0, [sp]
   1cff4:	mov	r3, sp
   1cff8:	mov	r0, #0
   1cffc:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1d000:	mov	sp, fp
   1d004:	pop	{fp, pc}
   1d008:	bl	11a24 <abort@plt>
   1d00c:	push	{r4, sl, fp, lr}
   1d010:	add	fp, sp, #8
   1d014:	sub	sp, sp, #48	; 0x30
   1d018:	mov	lr, r0
   1d01c:	movw	r0, #21000	; 0x5208
   1d020:	mov	r3, #32
   1d024:	mov	ip, r1
   1d028:	mov	r4, #1
   1d02c:	movt	r0, #3
   1d030:	add	r1, r0, #16
   1d034:	vld1.64	{d16-d17}, [r0], r3
   1d038:	mov	r3, sp
   1d03c:	vld1.64	{d18-d19}, [r1]
   1d040:	add	r1, r3, #16
   1d044:	vld1.64	{d20-d21}, [r0]
   1d048:	add	r0, r3, #32
   1d04c:	vst1.64	{d18-d19}, [r1]
   1d050:	mov	r1, r3
   1d054:	vst1.64	{d20-d21}, [r0]
   1d058:	mov	r0, #28
   1d05c:	and	r0, r0, r2, lsr #3
   1d060:	and	r2, r2, #31
   1d064:	vst1.64	{d16-d17}, [r1], r0
   1d068:	ldr	r0, [r1, #8]
   1d06c:	bic	r4, r4, r0, lsr r2
   1d070:	eor	r0, r0, r4, lsl r2
   1d074:	mov	r2, ip
   1d078:	str	r0, [r1, #8]
   1d07c:	mov	r0, #0
   1d080:	mov	r1, lr
   1d084:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1d088:	sub	sp, fp, #8
   1d08c:	pop	{r4, sl, fp, pc}
   1d090:	push	{fp, lr}
   1d094:	mov	fp, sp
   1d098:	sub	sp, sp, #48	; 0x30
   1d09c:	mov	ip, r0
   1d0a0:	movw	r0, #21000	; 0x5208
   1d0a4:	mov	r3, #32
   1d0a8:	movt	r0, #3
   1d0ac:	add	r2, r0, #16
   1d0b0:	vld1.64	{d16-d17}, [r0], r3
   1d0b4:	mov	r3, sp
   1d0b8:	vld1.64	{d18-d19}, [r2]
   1d0bc:	add	r2, r3, #16
   1d0c0:	vld1.64	{d20-d21}, [r0]
   1d0c4:	add	r0, r3, #32
   1d0c8:	vst1.64	{d18-d19}, [r2]
   1d0cc:	mov	r2, r3
   1d0d0:	vst1.64	{d20-d21}, [r0]
   1d0d4:	mov	r0, #28
   1d0d8:	and	r0, r0, r1, lsr #3
   1d0dc:	and	r1, r1, #31
   1d0e0:	vst1.64	{d16-d17}, [r2], r0
   1d0e4:	mov	r0, #1
   1d0e8:	ldr	lr, [r2, #8]
   1d0ec:	bic	r0, r0, lr, lsr r1
   1d0f0:	eor	r0, lr, r0, lsl r1
   1d0f4:	mov	r1, ip
   1d0f8:	str	r0, [r2, #8]
   1d0fc:	mov	r0, #0
   1d100:	mvn	r2, #0
   1d104:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1d108:	mov	sp, fp
   1d10c:	pop	{fp, pc}
   1d110:	push	{fp, lr}
   1d114:	mov	fp, sp
   1d118:	sub	sp, sp, #48	; 0x30
   1d11c:	movw	r2, #21000	; 0x5208
   1d120:	mov	r3, #32
   1d124:	mov	r1, r0
   1d128:	movt	r2, #3
   1d12c:	add	r0, r2, #16
   1d130:	vld1.64	{d16-d17}, [r2], r3
   1d134:	mov	r3, sp
   1d138:	vld1.64	{d18-d19}, [r0]
   1d13c:	add	r0, r3, #16
   1d140:	vld1.64	{d20-d21}, [r2]
   1d144:	mov	r2, r3
   1d148:	vst1.64	{d18-d19}, [r0]
   1d14c:	add	r0, r3, #32
   1d150:	vst1.64	{d20-d21}, [r0]
   1d154:	mov	r0, #12
   1d158:	vst1.64	{d16-d17}, [r2], r0
   1d15c:	ldr	r0, [r2]
   1d160:	orr	r0, r0, #67108864	; 0x4000000
   1d164:	str	r0, [r2]
   1d168:	mov	r0, #0
   1d16c:	mvn	r2, #0
   1d170:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1d174:	mov	sp, fp
   1d178:	pop	{fp, pc}
   1d17c:	push	{fp, lr}
   1d180:	mov	fp, sp
   1d184:	sub	sp, sp, #48	; 0x30
   1d188:	mov	ip, r1
   1d18c:	mov	r1, r0
   1d190:	movw	r0, #21000	; 0x5208
   1d194:	mov	r3, #32
   1d198:	movt	r0, #3
   1d19c:	add	r2, r0, #16
   1d1a0:	vld1.64	{d16-d17}, [r0], r3
   1d1a4:	mov	r3, sp
   1d1a8:	vld1.64	{d18-d19}, [r2]
   1d1ac:	add	r2, r3, #16
   1d1b0:	vld1.64	{d20-d21}, [r0]
   1d1b4:	add	r0, r3, #32
   1d1b8:	vst1.64	{d18-d19}, [r2]
   1d1bc:	mov	r2, r3
   1d1c0:	vst1.64	{d20-d21}, [r0]
   1d1c4:	mov	r0, #12
   1d1c8:	vst1.64	{d16-d17}, [r2], r0
   1d1cc:	ldr	r0, [r2]
   1d1d0:	orr	r0, r0, #67108864	; 0x4000000
   1d1d4:	str	r0, [r2]
   1d1d8:	mov	r0, #0
   1d1dc:	mov	r2, ip
   1d1e0:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1d1e4:	mov	sp, fp
   1d1e8:	pop	{fp, pc}
   1d1ec:	push	{r4, sl, fp, lr}
   1d1f0:	add	fp, sp, #8
   1d1f4:	sub	sp, sp, #96	; 0x60
   1d1f8:	mov	ip, r2
   1d1fc:	mov	r2, sp
   1d200:	vmov.i32	q8, #0	; 0x00000000
   1d204:	mov	r4, #28
   1d208:	cmp	r1, #10
   1d20c:	mov	r3, r2
   1d210:	add	lr, r2, #16
   1d214:	vst1.64	{d16-d17}, [r3], r4
   1d218:	vst1.64	{d16-d17}, [lr]
   1d21c:	vst1.32	{d16-d17}, [r3]
   1d220:	beq	1d270 <__assert_fail@plt+0xb840>
   1d224:	vld1.64	{d16-d17}, [r2], r4
   1d228:	vld1.64	{d18-d19}, [lr]
   1d22c:	add	r3, sp, #48	; 0x30
   1d230:	add	r4, r3, #4
   1d234:	vld1.32	{d20-d21}, [r2]
   1d238:	add	r2, r3, #20
   1d23c:	vst1.32	{d16-d17}, [r4]
   1d240:	vst1.32	{d18-d19}, [r2]
   1d244:	add	r2, r3, #32
   1d248:	vst1.32	{d20-d21}, [r2]
   1d24c:	str	r1, [sp, #48]	; 0x30
   1d250:	mvn	r2, #0
   1d254:	ldr	r1, [sp, #60]	; 0x3c
   1d258:	orr	r1, r1, #67108864	; 0x4000000
   1d25c:	str	r1, [sp, #60]	; 0x3c
   1d260:	mov	r1, ip
   1d264:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1d268:	sub	sp, fp, #8
   1d26c:	pop	{r4, sl, fp, pc}
   1d270:	bl	11a24 <abort@plt>
   1d274:	push	{r4, r5, fp, lr}
   1d278:	add	fp, sp, #8
   1d27c:	sub	sp, sp, #48	; 0x30
   1d280:	mov	ip, r3
   1d284:	movw	r3, #21000	; 0x5208
   1d288:	mov	lr, #32
   1d28c:	cmp	r1, #0
   1d290:	mov	r5, sp
   1d294:	movt	r3, #3
   1d298:	cmpne	r2, #0
   1d29c:	add	r4, r3, #16
   1d2a0:	vld1.64	{d16-d17}, [r3], lr
   1d2a4:	vld1.64	{d18-d19}, [r4]
   1d2a8:	add	r4, r5, #16
   1d2ac:	vld1.64	{d20-d21}, [r3]
   1d2b0:	vst1.64	{d16-d17}, [r5], lr
   1d2b4:	mov	r3, #10
   1d2b8:	vst1.64	{d18-d19}, [r4]
   1d2bc:	vst1.64	{d20-d21}, [r5]
   1d2c0:	str	r3, [sp]
   1d2c4:	bne	1d2cc <__assert_fail@plt+0xb89c>
   1d2c8:	bl	11a24 <abort@plt>
   1d2cc:	str	r2, [sp, #44]	; 0x2c
   1d2d0:	str	r1, [sp, #40]	; 0x28
   1d2d4:	mov	r3, sp
   1d2d8:	mov	r1, ip
   1d2dc:	mvn	r2, #0
   1d2e0:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1d2e4:	sub	sp, fp, #8
   1d2e8:	pop	{r4, r5, fp, pc}
   1d2ec:	push	{r4, r5, fp, lr}
   1d2f0:	add	fp, sp, #8
   1d2f4:	sub	sp, sp, #48	; 0x30
   1d2f8:	mov	lr, r3
   1d2fc:	movw	r3, #21000	; 0x5208
   1d300:	mov	ip, #32
   1d304:	cmp	r1, #0
   1d308:	mov	r5, sp
   1d30c:	movt	r3, #3
   1d310:	cmpne	r2, #0
   1d314:	add	r4, r3, #16
   1d318:	vld1.64	{d16-d17}, [r3], ip
   1d31c:	vld1.64	{d18-d19}, [r4]
   1d320:	add	r4, r5, #16
   1d324:	vld1.64	{d20-d21}, [r3]
   1d328:	vst1.64	{d16-d17}, [r5], ip
   1d32c:	mov	r3, #10
   1d330:	vst1.64	{d18-d19}, [r4]
   1d334:	vst1.64	{d20-d21}, [r5]
   1d338:	str	r3, [sp]
   1d33c:	bne	1d344 <__assert_fail@plt+0xb914>
   1d340:	bl	11a24 <abort@plt>
   1d344:	ldr	ip, [fp, #8]
   1d348:	str	r2, [sp, #44]	; 0x2c
   1d34c:	str	r1, [sp, #40]	; 0x28
   1d350:	mov	r3, sp
   1d354:	mov	r1, lr
   1d358:	mov	r2, ip
   1d35c:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1d360:	sub	sp, fp, #8
   1d364:	pop	{r4, r5, fp, pc}
   1d368:	push	{r4, sl, fp, lr}
   1d36c:	add	fp, sp, #8
   1d370:	sub	sp, sp, #48	; 0x30
   1d374:	mov	ip, r2
   1d378:	movw	r2, #21000	; 0x5208
   1d37c:	mov	lr, #32
   1d380:	cmp	r0, #0
   1d384:	mov	r4, sp
   1d388:	movt	r2, #3
   1d38c:	cmpne	r1, #0
   1d390:	add	r3, r2, #16
   1d394:	vld1.64	{d16-d17}, [r2], lr
   1d398:	vld1.64	{d18-d19}, [r3]
   1d39c:	add	r3, r4, #16
   1d3a0:	vld1.64	{d20-d21}, [r2]
   1d3a4:	vst1.64	{d16-d17}, [r4], lr
   1d3a8:	mov	r2, #10
   1d3ac:	vst1.64	{d18-d19}, [r3]
   1d3b0:	vst1.64	{d20-d21}, [r4]
   1d3b4:	str	r2, [sp]
   1d3b8:	bne	1d3c0 <__assert_fail@plt+0xb990>
   1d3bc:	bl	11a24 <abort@plt>
   1d3c0:	str	r1, [sp, #44]	; 0x2c
   1d3c4:	str	r0, [sp, #40]	; 0x28
   1d3c8:	mov	r3, sp
   1d3cc:	mov	r0, #0
   1d3d0:	mov	r1, ip
   1d3d4:	mvn	r2, #0
   1d3d8:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1d3dc:	sub	sp, fp, #8
   1d3e0:	pop	{r4, sl, fp, pc}
   1d3e4:	push	{r4, r5, fp, lr}
   1d3e8:	add	fp, sp, #8
   1d3ec:	sub	sp, sp, #48	; 0x30
   1d3f0:	mov	lr, r2
   1d3f4:	movw	r2, #21000	; 0x5208
   1d3f8:	mov	ip, r3
   1d3fc:	mov	r3, #32
   1d400:	cmp	r0, #0
   1d404:	mov	r5, sp
   1d408:	movt	r2, #3
   1d40c:	cmpne	r1, #0
   1d410:	add	r4, r2, #16
   1d414:	vld1.64	{d16-d17}, [r2], r3
   1d418:	vld1.64	{d18-d19}, [r4]
   1d41c:	add	r4, r5, #16
   1d420:	vld1.64	{d20-d21}, [r2]
   1d424:	vst1.64	{d16-d17}, [r5], r3
   1d428:	mov	r2, #10
   1d42c:	vst1.64	{d18-d19}, [r4]
   1d430:	vst1.64	{d20-d21}, [r5]
   1d434:	str	r2, [sp]
   1d438:	bne	1d440 <__assert_fail@plt+0xba10>
   1d43c:	bl	11a24 <abort@plt>
   1d440:	str	r1, [sp, #44]	; 0x2c
   1d444:	str	r0, [sp, #40]	; 0x28
   1d448:	mov	r3, sp
   1d44c:	mov	r0, #0
   1d450:	mov	r1, lr
   1d454:	mov	r2, ip
   1d458:	bl	1cd00 <__assert_fail@plt+0xb2d0>
   1d45c:	sub	sp, fp, #8
   1d460:	pop	{r4, r5, fp, pc}
   1d464:	movw	r3, #20872	; 0x5188
   1d468:	movt	r3, #3
   1d46c:	b	1cd00 <__assert_fail@plt+0xb2d0>
   1d470:	movw	r3, #20872	; 0x5188
   1d474:	mov	r2, r1
   1d478:	mov	r1, r0
   1d47c:	mov	r0, #0
   1d480:	movt	r3, #3
   1d484:	b	1cd00 <__assert_fail@plt+0xb2d0>
   1d488:	movw	r3, #20872	; 0x5188
   1d48c:	mvn	r2, #0
   1d490:	movt	r3, #3
   1d494:	b	1cd00 <__assert_fail@plt+0xb2d0>
   1d498:	movw	r3, #20872	; 0x5188
   1d49c:	mov	r1, r0
   1d4a0:	mov	r0, #0
   1d4a4:	mvn	r2, #0
   1d4a8:	movt	r3, #3
   1d4ac:	b	1cd00 <__assert_fail@plt+0xb2d0>
   1d4b0:	mov	r1, #0
   1d4b4:	str	r1, [r0]
   1d4b8:	str	r1, [r0, #4]
   1d4bc:	bx	lr
   1d4c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4c4:	add	fp, sp, #28
   1d4c8:	sub	sp, sp, #52	; 0x34
   1d4cc:	add	sl, sp, #16
   1d4d0:	mov	r5, r0
   1d4d4:	vmov.i32	q8, #0	; 0x00000000
   1d4d8:	mov	r8, r3
   1d4dc:	cmp	r2, #0
   1d4e0:	mov	r0, sl
   1d4e4:	vst1.64	{d16-d17}, [r0]!
   1d4e8:	vst1.64	{d16-d17}, [r0]
   1d4ec:	beq	1d514 <__assert_fail@plt+0xbae4>
   1d4f0:	mov	r0, #1
   1d4f4:	ldrb	r3, [r1], #1
   1d4f8:	subs	r2, r2, #1
   1d4fc:	ubfx	r7, r3, #5, #3
   1d500:	and	r3, r3, #31
   1d504:	ldr	r6, [sl, r7, lsl #2]
   1d508:	orr	r3, r6, r0, lsl r3
   1d50c:	str	r3, [sl, r7, lsl #2]
   1d510:	bne	1d4f4 <__assert_fail@plt+0xbac4>
   1d514:	ldmib	r5, {r0, r1}
   1d518:	cmp	r0, r1
   1d51c:	bcs	1d580 <__assert_fail@plt+0xbb50>
   1d520:	add	r1, r0, #1
   1d524:	str	r1, [r5, #4]
   1d528:	ldrb	r6, [r0]
   1d52c:	mov	r4, #1
   1d530:	lsr	r0, r6, #5
   1d534:	and	r1, r6, #31
   1d538:	ldr	r0, [sl, r0, lsl #2]
   1d53c:	tst	r0, r4, lsl r1
   1d540:	beq	1d594 <__assert_fail@plt+0xbb64>
   1d544:	ldmib	r5, {r0, r1}
   1d548:	cmp	r0, r1
   1d54c:	bcs	1d568 <__assert_fail@plt+0xbb38>
   1d550:	add	r1, r0, #1
   1d554:	str	r1, [r5, #4]
   1d558:	ldrb	r6, [r0]
   1d55c:	cmn	r6, #1
   1d560:	bgt	1d530 <__assert_fail@plt+0xbb00>
   1d564:	b	1d594 <__assert_fail@plt+0xbb64>
   1d568:	mov	r0, r5
   1d56c:	bl	11988 <__uflow@plt>
   1d570:	mov	r6, r0
   1d574:	cmn	r6, #1
   1d578:	bgt	1d530 <__assert_fail@plt+0xbb00>
   1d57c:	b	1d594 <__assert_fail@plt+0xbb64>
   1d580:	mov	r0, r5
   1d584:	bl	11988 <__uflow@plt>
   1d588:	mov	r6, r0
   1d58c:	cmp	r0, #0
   1d590:	bge	1d52c <__assert_fail@plt+0xbafc>
   1d594:	ldm	r8, {r0, r7}
   1d598:	cmp	r6, #0
   1d59c:	str	r0, [sp, #12]
   1d5a0:	blt	1d658 <__assert_fail@plt+0xbc28>
   1d5a4:	str	r8, [sp, #8]
   1d5a8:	mov	r9, #0
   1d5ac:	mov	r8, #1
   1d5b0:	mov	r4, #0
   1d5b4:	cmp	r4, r0
   1d5b8:	bne	1d5f0 <__assert_fail@plt+0xbbc0>
   1d5bc:	b	1d5d4 <__assert_fail@plt+0xbba4>
   1d5c0:	ldr	r0, [sp, #12]
   1d5c4:	add	r4, r4, #1
   1d5c8:	lsr	r9, r6, #31
   1d5cc:	cmp	r4, r0
   1d5d0:	bne	1d5f0 <__assert_fail@plt+0xbbc0>
   1d5d4:	mov	r0, r7
   1d5d8:	add	r1, sp, #12
   1d5dc:	mov	r2, #1
   1d5e0:	mvn	r3, #0
   1d5e4:	str	r8, [sp]
   1d5e8:	bl	1e3bc <__assert_fail@plt+0xc98c>
   1d5ec:	mov	r7, r0
   1d5f0:	tst	r9, #1
   1d5f4:	lsreq	r0, r6, #5
   1d5f8:	andeq	r1, r6, #31
   1d5fc:	ldreq	r0, [sl, r0, lsl #2]
   1d600:	tsteq	r0, r8, lsl r1
   1d604:	bne	1d638 <__assert_fail@plt+0xbc08>
   1d608:	strb	r6, [r7, r4]
   1d60c:	ldmib	r5, {r0, r1}
   1d610:	cmp	r0, r1
   1d614:	bcs	1d628 <__assert_fail@plt+0xbbf8>
   1d618:	add	r1, r0, #1
   1d61c:	str	r1, [r5, #4]
   1d620:	ldrb	r6, [r0]
   1d624:	b	1d5c0 <__assert_fail@plt+0xbb90>
   1d628:	mov	r0, r5
   1d62c:	bl	11988 <__uflow@plt>
   1d630:	mov	r6, r0
   1d634:	b	1d5c0 <__assert_fail@plt+0xbb90>
   1d638:	mov	r0, #0
   1d63c:	ldr	r1, [sp, #8]
   1d640:	strb	r0, [r7, r4]
   1d644:	ldr	r0, [sp, #12]
   1d648:	stm	r1, {r0, r7}
   1d64c:	mov	r0, r4
   1d650:	sub	sp, fp, #28
   1d654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d658:	mvn	r4, #0
   1d65c:	mov	r0, r4
   1d660:	sub	sp, fp, #28
   1d664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d66c:	add	fp, sp, #28
   1d670:	sub	sp, sp, #28
   1d674:	add	r4, r1, #1
   1d678:	cmp	r1, #0
   1d67c:	mov	r7, r0
   1d680:	mov	r1, #4
   1d684:	str	r3, [sp, #12]
   1d688:	str	r2, [sp, #8]
   1d68c:	movweq	r4, #64	; 0x40
   1d690:	mov	r0, r4
   1d694:	str	r4, [sp, #16]
   1d698:	bl	1e25c <__assert_fail@plt+0xc82c>
   1d69c:	mov	r6, r0
   1d6a0:	mov	r0, r4
   1d6a4:	mov	r1, #4
   1d6a8:	bl	1e25c <__assert_fail@plt+0xc82c>
   1d6ac:	mov	r4, #0
   1d6b0:	mov	r5, r0
   1d6b4:	str	r4, [sp, #20]
   1d6b8:	str	r4, [sp, #24]
   1d6bc:	b	1d6ec <__assert_fail@plt+0xbcbc>
   1d6c0:	add	r8, sl, #1
   1d6c4:	mov	r1, #1
   1d6c8:	mov	r0, r8
   1d6cc:	bl	1e25c <__assert_fail@plt+0xc82c>
   1d6d0:	str	sl, [r5, r4, lsl #2]
   1d6d4:	mov	r2, r8
   1d6d8:	mov	r9, r0
   1d6dc:	ldr	r1, [sp, #24]
   1d6e0:	bl	116dc <memcpy@plt>
   1d6e4:	str	r9, [r6, r4, lsl #2]
   1d6e8:	add	r4, r4, #1
   1d6ec:	ldr	r1, [sp, #8]
   1d6f0:	ldr	r2, [sp, #12]
   1d6f4:	mov	r0, r7
   1d6f8:	add	r3, sp, #20
   1d6fc:	bl	1d4c0 <__assert_fail@plt+0xba90>
   1d700:	mov	sl, r0
   1d704:	ldr	r0, [sp, #16]
   1d708:	cmp	r4, r0
   1d70c:	blt	1d744 <__assert_fail@plt+0xbd14>
   1d710:	mov	r0, #4
   1d714:	add	r1, sp, #16
   1d718:	mov	r2, #1
   1d71c:	mvn	r3, #0
   1d720:	str	r0, [sp]
   1d724:	mov	r0, r6
   1d728:	bl	1e3bc <__assert_fail@plt+0xc98c>
   1d72c:	ldr	r1, [sp, #16]
   1d730:	mov	r6, r0
   1d734:	mov	r0, r5
   1d738:	mov	r2, #4
   1d73c:	bl	1e150 <__assert_fail@plt+0xc720>
   1d740:	mov	r5, r0
   1d744:	cmn	sl, #1
   1d748:	bne	1d6c0 <__assert_fail@plt+0xbc90>
   1d74c:	mov	r0, #0
   1d750:	str	r0, [r6, r4, lsl #2]
   1d754:	str	r0, [r5, r4, lsl #2]
   1d758:	ldr	r0, [sp, #24]
   1d75c:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1d760:	ldr	r0, [fp, #8]
   1d764:	str	r6, [r0]
   1d768:	ldr	r0, [fp, #12]
   1d76c:	cmp	r0, #0
   1d770:	beq	1d784 <__assert_fail@plt+0xbd54>
   1d774:	str	r5, [r0]
   1d778:	mov	r0, r4
   1d77c:	sub	sp, fp, #28
   1d780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d784:	mov	r0, r5
   1d788:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1d78c:	mov	r0, r4
   1d790:	sub	sp, fp, #28
   1d794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d798:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d79c:	add	fp, sp, #24
   1d7a0:	movw	r8, #0
   1d7a4:	mov	r6, r2
   1d7a8:	mov	r4, r1
   1d7ac:	mov	r5, r0
   1d7b0:	movt	r8, #32752	; 0x7ff0
   1d7b4:	mov	r0, r5
   1d7b8:	mov	r1, r4
   1d7bc:	mov	r2, r6
   1d7c0:	bl	11910 <write@plt>
   1d7c4:	mov	r7, r0
   1d7c8:	cmn	r0, #1
   1d7cc:	bgt	1d7f4 <__assert_fail@plt+0xbdc4>
   1d7d0:	bl	118bc <__errno_location@plt>
   1d7d4:	ldr	r0, [r0]
   1d7d8:	cmp	r0, #4
   1d7dc:	beq	1d7b4 <__assert_fail@plt+0xbd84>
   1d7e0:	cmp	r6, r8
   1d7e4:	bls	1d7f4 <__assert_fail@plt+0xbdc4>
   1d7e8:	cmp	r0, #22
   1d7ec:	mov	r6, r8
   1d7f0:	beq	1d7b4 <__assert_fail@plt+0xbd84>
   1d7f4:	mov	r0, r7
   1d7f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d7fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d800:	add	fp, sp, #24
   1d804:	sub	sp, sp, #64	; 0x40
   1d808:	mov	r5, r1
   1d80c:	bl	11724 <strdup@plt>
   1d810:	cmp	r0, #0
   1d814:	beq	1dac8 <__assert_fail@plt+0xc098>
   1d818:	mov	r4, r0
   1d81c:	bl	117d8 <__ctype_get_mb_cur_max@plt>
   1d820:	cmp	r0, #2
   1d824:	bcc	1da18 <__assert_fail@plt+0xbfe8>
   1d828:	cmp	r5, #0
   1d82c:	beq	1d8d0 <__assert_fail@plt+0xbea0>
   1d830:	mov	r0, r4
   1d834:	str	r4, [sp, #24]
   1d838:	bl	1188c <strlen@plt>
   1d83c:	mov	r7, #0
   1d840:	add	r1, r4, r0
   1d844:	cmp	r0, #1
   1d848:	mov	r6, r4
   1d84c:	str	r7, [sp, #16]
   1d850:	str	r7, [sp, #12]
   1d854:	strb	r7, [sp, #8]
   1d858:	strb	r7, [sp, #20]
   1d85c:	str	r1, [sp, #4]
   1d860:	blt	1d8b0 <__assert_fail@plt+0xbe80>
   1d864:	add	r6, sp, #4
   1d868:	mov	r0, r6
   1d86c:	bl	1eb6c <__assert_fail@plt+0xd13c>
   1d870:	ldrb	r0, [sp, #32]
   1d874:	cmp	r0, #0
   1d878:	beq	1d8ac <__assert_fail@plt+0xbe7c>
   1d87c:	ldr	r0, [sp, #36]	; 0x24
   1d880:	bl	11880 <iswspace@plt>
   1d884:	cmp	r0, #0
   1d888:	beq	1d8ac <__assert_fail@plt+0xbe7c>
   1d88c:	strb	r7, [sp, #20]
   1d890:	ldr	r1, [sp, #24]
   1d894:	ldr	r2, [sp, #28]
   1d898:	ldr	r0, [sp, #4]
   1d89c:	add	r1, r1, r2
   1d8a0:	cmp	r1, r0
   1d8a4:	str	r1, [sp, #24]
   1d8a8:	bcc	1d868 <__assert_fail@plt+0xbe38>
   1d8ac:	ldr	r6, [sp, #24]
   1d8b0:	mov	r0, r6
   1d8b4:	bl	1188c <strlen@plt>
   1d8b8:	add	r2, r0, #1
   1d8bc:	mov	r0, r4
   1d8c0:	mov	r1, r6
   1d8c4:	bl	116ac <memmove@plt>
   1d8c8:	cmp	r5, #1
   1d8cc:	beq	1dabc <__assert_fail@plt+0xc08c>
   1d8d0:	add	r0, sp, #4
   1d8d4:	str	r4, [sp, #24]
   1d8d8:	add	r5, r0, #8
   1d8dc:	mov	r0, r4
   1d8e0:	bl	1188c <strlen@plt>
   1d8e4:	mov	r6, #0
   1d8e8:	cmp	r0, #1
   1d8ec:	add	r1, r4, r0
   1d8f0:	strb	r6, [sp, #8]
   1d8f4:	str	r1, [sp, #4]
   1d8f8:	str	r6, [r5]
   1d8fc:	str	r6, [r5, #4]
   1d900:	strb	r6, [sp, #20]
   1d904:	blt	1dabc <__assert_fail@plt+0xc08c>
   1d908:	add	r5, sp, #4
   1d90c:	mov	r7, #0
   1d910:	b	1d934 <__assert_fail@plt+0xbf04>
   1d914:	ldrb	r0, [sp, #32]
   1d918:	cmp	r0, #0
   1d91c:	beq	1d9e0 <__assert_fail@plt+0xbfb0>
   1d920:	ldr	r0, [sp, #36]	; 0x24
   1d924:	bl	11880 <iswspace@plt>
   1d928:	cmp	r0, #0
   1d92c:	movne	r7, #1
   1d930:	b	1d9e0 <__assert_fail@plt+0xbfb0>
   1d934:	mov	r0, r5
   1d938:	bl	1eb6c <__assert_fail@plt+0xd13c>
   1d93c:	cmp	r7, #1
   1d940:	beq	1d974 <__assert_fail@plt+0xbf44>
   1d944:	cmp	r7, #0
   1d948:	bne	1d9bc <__assert_fail@plt+0xbf8c>
   1d94c:	ldrb	r0, [sp, #32]
   1d950:	mov	r7, #1
   1d954:	cmp	r0, #0
   1d958:	beq	1d9e0 <__assert_fail@plt+0xbfb0>
   1d95c:	ldr	r0, [sp, #36]	; 0x24
   1d960:	bl	11880 <iswspace@plt>
   1d964:	cmp	r0, #0
   1d968:	beq	1d914 <__assert_fail@plt+0xbee4>
   1d96c:	mov	r7, #0
   1d970:	b	1d9e0 <__assert_fail@plt+0xbfb0>
   1d974:	ldrb	r0, [sp, #32]
   1d978:	mov	r7, #1
   1d97c:	cmp	r0, #0
   1d980:	beq	1d9e0 <__assert_fail@plt+0xbfb0>
   1d984:	ldr	r0, [sp, #36]	; 0x24
   1d988:	bl	11880 <iswspace@plt>
   1d98c:	cmp	r0, #0
   1d990:	beq	1d9e0 <__assert_fail@plt+0xbfb0>
   1d994:	ldrb	r0, [sp, #32]
   1d998:	cmp	r0, #0
   1d99c:	beq	1d9dc <__assert_fail@plt+0xbfac>
   1d9a0:	ldr	r0, [sp, #36]	; 0x24
   1d9a4:	bl	11880 <iswspace@plt>
   1d9a8:	cmp	r0, #0
   1d9ac:	beq	1d9dc <__assert_fail@plt+0xbfac>
   1d9b0:	ldr	r8, [sp, #24]
   1d9b4:	mov	r7, #2
   1d9b8:	b	1d9e0 <__assert_fail@plt+0xbfb0>
   1d9bc:	ldrb	r0, [sp, #32]
   1d9c0:	cmp	r0, #0
   1d9c4:	beq	1d9dc <__assert_fail@plt+0xbfac>
   1d9c8:	ldr	r0, [sp, #36]	; 0x24
   1d9cc:	bl	11880 <iswspace@plt>
   1d9d0:	mov	r7, #2
   1d9d4:	cmp	r0, #0
   1d9d8:	bne	1d9e0 <__assert_fail@plt+0xbfb0>
   1d9dc:	mov	r7, #1
   1d9e0:	strb	r6, [sp, #20]
   1d9e4:	ldr	r1, [sp, #24]
   1d9e8:	ldr	r2, [sp, #28]
   1d9ec:	ldr	r0, [sp, #4]
   1d9f0:	add	r1, r1, r2
   1d9f4:	cmp	r1, r0
   1d9f8:	str	r1, [sp, #24]
   1d9fc:	bcc	1d934 <__assert_fail@plt+0xbf04>
   1da00:	cmp	r7, #2
   1da04:	moveq	r0, #0
   1da08:	strbeq	r0, [r8]
   1da0c:	mov	r0, r4
   1da10:	sub	sp, fp, #24
   1da14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1da18:	cmp	r5, #0
   1da1c:	beq	1da78 <__assert_fail@plt+0xc048>
   1da20:	ldrb	r7, [r4]
   1da24:	mov	r6, r4
   1da28:	cmp	r7, #0
   1da2c:	beq	1da58 <__assert_fail@plt+0xc028>
   1da30:	bl	11868 <__ctype_b_loc@plt>
   1da34:	ldr	r0, [r0]
   1da38:	mov	r6, r4
   1da3c:	uxtb	r1, r7
   1da40:	add	r1, r0, r1, lsl #1
   1da44:	ldrb	r1, [r1, #1]
   1da48:	tst	r1, #32
   1da4c:	ldrbne	r7, [r6, #1]!
   1da50:	cmpne	r7, #0
   1da54:	bne	1da3c <__assert_fail@plt+0xc00c>
   1da58:	mov	r0, r6
   1da5c:	bl	1188c <strlen@plt>
   1da60:	add	r2, r0, #1
   1da64:	mov	r0, r4
   1da68:	mov	r1, r6
   1da6c:	bl	116ac <memmove@plt>
   1da70:	cmp	r5, #1
   1da74:	beq	1dabc <__assert_fail@plt+0xc08c>
   1da78:	mov	r0, r4
   1da7c:	bl	1188c <strlen@plt>
   1da80:	add	r0, r4, r0
   1da84:	sub	r5, r0, #1
   1da88:	cmp	r5, r4
   1da8c:	bcc	1dabc <__assert_fail@plt+0xc08c>
   1da90:	bl	11868 <__ctype_b_loc@plt>
   1da94:	mov	r1, #0
   1da98:	ldrb	r2, [r5]
   1da9c:	ldr	r3, [r0]
   1daa0:	add	r2, r3, r2, lsl #1
   1daa4:	ldrb	r2, [r2, #1]
   1daa8:	tst	r2, #32
   1daac:	beq	1dabc <__assert_fail@plt+0xc08c>
   1dab0:	strb	r1, [r5], #-1
   1dab4:	cmp	r5, r4
   1dab8:	bcs	1da98 <__assert_fail@plt+0xc068>
   1dabc:	mov	r0, r4
   1dac0:	sub	sp, fp, #24
   1dac4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dac8:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1dacc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1dad0:	add	fp, sp, #24
   1dad4:	sub	sp, sp, #32
   1dad8:	ldr	r6, [fp, #12]
   1dadc:	ldr	r7, [fp, #8]
   1dae0:	mov	r4, r2
   1dae4:	mov	r8, r0
   1dae8:	cmp	r1, #0
   1daec:	beq	1db14 <__assert_fail@plt+0xc0e4>
   1daf0:	movw	r2, #16156	; 0x3f1c
   1daf4:	mov	r5, r1
   1daf8:	str	r3, [sp, #4]
   1dafc:	str	r4, [sp]
   1db00:	mov	r0, r8
   1db04:	mov	r1, #1
   1db08:	movt	r2, #2
   1db0c:	mov	r3, r5
   1db10:	b	1db2c <__assert_fail@plt+0xc0fc>
   1db14:	movw	r2, #16168	; 0x3f28
   1db18:	str	r3, [sp]
   1db1c:	mov	r0, r8
   1db20:	mov	r1, #1
   1db24:	mov	r3, r4
   1db28:	movt	r2, #2
   1db2c:	bl	11928 <__fprintf_chk@plt>
   1db30:	movw	r1, #16175	; 0x3f2f
   1db34:	mov	r0, #0
   1db38:	mov	r2, #5
   1db3c:	movt	r1, #2
   1db40:	bl	1170c <dcgettext@plt>
   1db44:	movw	r2, #16893	; 0x41fd
   1db48:	mov	r3, r0
   1db4c:	movw	r0, #2022	; 0x7e6
   1db50:	mov	r1, #1
   1db54:	str	r0, [sp]
   1db58:	movt	r2, #2
   1db5c:	mov	r0, r8
   1db60:	bl	11928 <__fprintf_chk@plt>
   1db64:	movw	r4, #2024	; 0x7e8
   1db68:	mov	r1, r8
   1db6c:	movt	r4, #2
   1db70:	mov	r0, r4
   1db74:	bl	11634 <fputs_unlocked@plt>
   1db78:	movw	r1, #16179	; 0x3f33
   1db7c:	mov	r0, #0
   1db80:	mov	r2, #5
   1db84:	movt	r1, #2
   1db88:	bl	1170c <dcgettext@plt>
   1db8c:	movw	r3, #16350	; 0x3fde
   1db90:	mov	r2, r0
   1db94:	mov	r0, r8
   1db98:	mov	r1, #1
   1db9c:	movt	r3, #2
   1dba0:	bl	11928 <__fprintf_chk@plt>
   1dba4:	mov	r0, r4
   1dba8:	mov	r1, r8
   1dbac:	bl	11634 <fputs_unlocked@plt>
   1dbb0:	cmp	r6, #9
   1dbb4:	bhi	1dbf0 <__assert_fail@plt+0xc1c0>
   1dbb8:	add	r0, pc, #0
   1dbbc:	ldr	pc, [r0, r6, lsl #2]
   1dbc0:	andeq	sp, r1, r8, ror #23
   1dbc4:	strdeq	sp, [r1], -ip
   1dbc8:	andeq	sp, r1, ip, lsr #24
   1dbcc:	andeq	sp, r1, r4, asr ip
   1dbd0:	andeq	sp, r1, ip, ror ip
   1dbd4:	andeq	sp, r1, r4, lsr #25
   1dbd8:	andeq	sp, r1, ip, asr #25
   1dbdc:	andeq	sp, r1, r4, lsl #26
   1dbe0:	andeq	sp, r1, ip, lsr #27
   1dbe4:	andeq	sp, r1, r4, asr sp
   1dbe8:	sub	sp, fp, #24
   1dbec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dbf0:	movw	r1, #16703	; 0x413f
   1dbf4:	movt	r1, #2
   1dbf8:	b	1dd5c <__assert_fail@plt+0xc32c>
   1dbfc:	movw	r1, #16384	; 0x4000
   1dc00:	mov	r0, #0
   1dc04:	mov	r2, #5
   1dc08:	movt	r1, #2
   1dc0c:	bl	1170c <dcgettext@plt>
   1dc10:	ldr	r3, [r7]
   1dc14:	mov	r2, r0
   1dc18:	mov	r0, r8
   1dc1c:	mov	r1, #1
   1dc20:	sub	sp, fp, #24
   1dc24:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1dc28:	b	11928 <__fprintf_chk@plt>
   1dc2c:	movw	r1, #16400	; 0x4010
   1dc30:	mov	r0, #0
   1dc34:	mov	r2, #5
   1dc38:	movt	r1, #2
   1dc3c:	bl	1170c <dcgettext@plt>
   1dc40:	mov	r2, r0
   1dc44:	ldr	r3, [r7]
   1dc48:	ldr	r0, [r7, #4]
   1dc4c:	str	r0, [sp]
   1dc50:	b	1dd40 <__assert_fail@plt+0xc310>
   1dc54:	movw	r1, #16423	; 0x4027
   1dc58:	mov	r0, #0
   1dc5c:	mov	r2, #5
   1dc60:	movt	r1, #2
   1dc64:	bl	1170c <dcgettext@plt>
   1dc68:	ldr	r3, [r7]
   1dc6c:	mov	r2, r0
   1dc70:	ldmib	r7, {r0, r1}
   1dc74:	stm	sp, {r0, r1}
   1dc78:	b	1dd40 <__assert_fail@plt+0xc310>
   1dc7c:	movw	r1, #16451	; 0x4043
   1dc80:	mov	r0, #0
   1dc84:	mov	r2, #5
   1dc88:	movt	r1, #2
   1dc8c:	bl	1170c <dcgettext@plt>
   1dc90:	ldr	r3, [r7]
   1dc94:	mov	r2, r0
   1dc98:	ldmib	r7, {r0, r1, r7}
   1dc9c:	stm	sp, {r0, r1, r7}
   1dca0:	b	1dd40 <__assert_fail@plt+0xc310>
   1dca4:	movw	r1, #16483	; 0x4063
   1dca8:	mov	r0, #0
   1dcac:	mov	r2, #5
   1dcb0:	movt	r1, #2
   1dcb4:	bl	1170c <dcgettext@plt>
   1dcb8:	ldr	r3, [r7]
   1dcbc:	mov	r2, r0
   1dcc0:	ldmib	r7, {r0, r1, r6, r7}
   1dcc4:	stm	sp, {r0, r1, r6, r7}
   1dcc8:	b	1dd40 <__assert_fail@plt+0xc310>
   1dccc:	movw	r1, #16519	; 0x4087
   1dcd0:	mov	r0, #0
   1dcd4:	mov	r2, #5
   1dcd8:	movt	r1, #2
   1dcdc:	bl	1170c <dcgettext@plt>
   1dce0:	ldr	r3, [r7]
   1dce4:	mov	r2, r0
   1dce8:	ldmib	r7, {r0, r1, r6}
   1dcec:	ldr	r5, [r7, #16]
   1dcf0:	ldr	r7, [r7, #20]
   1dcf4:	stm	sp, {r0, r1, r6}
   1dcf8:	str	r5, [sp, #12]
   1dcfc:	str	r7, [sp, #16]
   1dd00:	b	1dd40 <__assert_fail@plt+0xc310>
   1dd04:	movw	r1, #16559	; 0x40af
   1dd08:	mov	r0, #0
   1dd0c:	mov	r2, #5
   1dd10:	movt	r1, #2
   1dd14:	bl	1170c <dcgettext@plt>
   1dd18:	ldr	r3, [r7]
   1dd1c:	mov	r2, r0
   1dd20:	ldmib	r7, {r0, r1, r6}
   1dd24:	ldr	r5, [r7, #16]
   1dd28:	ldr	r4, [r7, #20]
   1dd2c:	ldr	r7, [r7, #24]
   1dd30:	stm	sp, {r0, r1, r6}
   1dd34:	str	r5, [sp, #12]
   1dd38:	str	r4, [sp, #16]
   1dd3c:	str	r7, [sp, #20]
   1dd40:	mov	r0, r8
   1dd44:	mov	r1, #1
   1dd48:	bl	11928 <__fprintf_chk@plt>
   1dd4c:	sub	sp, fp, #24
   1dd50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dd54:	movw	r1, #16651	; 0x410b
   1dd58:	movt	r1, #2
   1dd5c:	mov	r0, #0
   1dd60:	mov	r2, #5
   1dd64:	bl	1170c <dcgettext@plt>
   1dd68:	mov	ip, r0
   1dd6c:	ldr	r3, [r7]
   1dd70:	ldr	r0, [r7, #4]
   1dd74:	ldr	r1, [r7, #8]
   1dd78:	ldr	r6, [r7, #12]
   1dd7c:	ldr	r5, [r7, #16]
   1dd80:	ldr	r4, [r7, #20]
   1dd84:	ldr	r2, [r7, #24]
   1dd88:	ldr	lr, [r7, #28]
   1dd8c:	ldr	r7, [r7, #32]
   1dd90:	stm	sp, {r0, r1, r6}
   1dd94:	str	r5, [sp, #12]
   1dd98:	str	r4, [sp, #16]
   1dd9c:	str	r2, [sp, #20]
   1dda0:	str	lr, [sp, #24]
   1dda4:	str	r7, [sp, #28]
   1dda8:	b	1ddf0 <__assert_fail@plt+0xc3c0>
   1ddac:	movw	r1, #16603	; 0x40db
   1ddb0:	mov	r0, #0
   1ddb4:	mov	r2, #5
   1ddb8:	movt	r1, #2
   1ddbc:	bl	1170c <dcgettext@plt>
   1ddc0:	mov	ip, r0
   1ddc4:	ldr	r3, [r7]
   1ddc8:	ldmib	r7, {r0, r1, r6}
   1ddcc:	ldr	r5, [r7, #16]
   1ddd0:	ldr	r4, [r7, #20]
   1ddd4:	ldr	r2, [r7, #24]
   1ddd8:	ldr	r7, [r7, #28]
   1dddc:	stm	sp, {r0, r1, r6}
   1dde0:	str	r5, [sp, #12]
   1dde4:	str	r4, [sp, #16]
   1dde8:	str	r2, [sp, #20]
   1ddec:	str	r7, [sp, #24]
   1ddf0:	mov	r0, r8
   1ddf4:	mov	r1, #1
   1ddf8:	mov	r2, ip
   1ddfc:	bl	11928 <__fprintf_chk@plt>
   1de00:	sub	sp, fp, #24
   1de04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1de08:	push	{r4, sl, fp, lr}
   1de0c:	add	fp, sp, #8
   1de10:	sub	sp, sp, #8
   1de14:	ldr	ip, [fp, #8]
   1de18:	mov	lr, #0
   1de1c:	ldr	r4, [ip, lr, lsl #2]
   1de20:	add	lr, lr, #1
   1de24:	cmp	r4, #0
   1de28:	bne	1de1c <__assert_fail@plt+0xc3ec>
   1de2c:	sub	r4, lr, #1
   1de30:	str	ip, [sp]
   1de34:	str	r4, [sp, #4]
   1de38:	bl	1dacc <__assert_fail@plt+0xc09c>
   1de3c:	sub	sp, fp, #8
   1de40:	pop	{r4, sl, fp, pc}
   1de44:	push	{fp, lr}
   1de48:	mov	fp, sp
   1de4c:	sub	sp, sp, #48	; 0x30
   1de50:	ldr	ip, [fp, #8]
   1de54:	ldr	lr, [ip]
   1de58:	cmp	lr, #0
   1de5c:	str	lr, [sp, #8]
   1de60:	beq	1defc <__assert_fail@plt+0xc4cc>
   1de64:	ldr	lr, [ip, #4]
   1de68:	cmp	lr, #0
   1de6c:	str	lr, [sp, #12]
   1de70:	beq	1df04 <__assert_fail@plt+0xc4d4>
   1de74:	ldr	lr, [ip, #8]
   1de78:	cmp	lr, #0
   1de7c:	str	lr, [sp, #16]
   1de80:	beq	1df0c <__assert_fail@plt+0xc4dc>
   1de84:	ldr	lr, [ip, #12]
   1de88:	cmp	lr, #0
   1de8c:	str	lr, [sp, #20]
   1de90:	beq	1df14 <__assert_fail@plt+0xc4e4>
   1de94:	ldr	lr, [ip, #16]
   1de98:	cmp	lr, #0
   1de9c:	str	lr, [sp, #24]
   1dea0:	beq	1df1c <__assert_fail@plt+0xc4ec>
   1dea4:	ldr	lr, [ip, #20]
   1dea8:	cmp	lr, #0
   1deac:	str	lr, [sp, #28]
   1deb0:	beq	1df24 <__assert_fail@plt+0xc4f4>
   1deb4:	ldr	lr, [ip, #24]
   1deb8:	cmp	lr, #0
   1debc:	str	lr, [sp, #32]
   1dec0:	beq	1df2c <__assert_fail@plt+0xc4fc>
   1dec4:	ldr	lr, [ip, #28]
   1dec8:	cmp	lr, #0
   1decc:	str	lr, [sp, #36]	; 0x24
   1ded0:	beq	1df34 <__assert_fail@plt+0xc504>
   1ded4:	ldr	lr, [ip, #32]
   1ded8:	cmp	lr, #0
   1dedc:	str	lr, [sp, #40]	; 0x28
   1dee0:	beq	1df3c <__assert_fail@plt+0xc50c>
   1dee4:	ldr	lr, [ip, #36]	; 0x24
   1dee8:	mov	ip, #10
   1deec:	cmp	lr, #0
   1def0:	str	lr, [sp, #44]	; 0x2c
   1def4:	movweq	ip, #9
   1def8:	b	1df40 <__assert_fail@plt+0xc510>
   1defc:	mov	ip, #0
   1df00:	b	1df40 <__assert_fail@plt+0xc510>
   1df04:	mov	ip, #1
   1df08:	b	1df40 <__assert_fail@plt+0xc510>
   1df0c:	mov	ip, #2
   1df10:	b	1df40 <__assert_fail@plt+0xc510>
   1df14:	mov	ip, #3
   1df18:	b	1df40 <__assert_fail@plt+0xc510>
   1df1c:	mov	ip, #4
   1df20:	b	1df40 <__assert_fail@plt+0xc510>
   1df24:	mov	ip, #5
   1df28:	b	1df40 <__assert_fail@plt+0xc510>
   1df2c:	mov	ip, #6
   1df30:	b	1df40 <__assert_fail@plt+0xc510>
   1df34:	mov	ip, #7
   1df38:	b	1df40 <__assert_fail@plt+0xc510>
   1df3c:	mov	ip, #8
   1df40:	add	lr, sp, #8
   1df44:	str	ip, [sp, #4]
   1df48:	str	lr, [sp]
   1df4c:	bl	1dacc <__assert_fail@plt+0xc09c>
   1df50:	mov	sp, fp
   1df54:	pop	{fp, pc}
   1df58:	push	{fp, lr}
   1df5c:	mov	fp, sp
   1df60:	sub	sp, sp, #56	; 0x38
   1df64:	add	ip, fp, #8
   1df68:	str	ip, [sp, #12]
   1df6c:	ldr	lr, [fp, #8]
   1df70:	cmp	lr, #0
   1df74:	str	lr, [sp, #16]
   1df78:	beq	1e014 <__assert_fail@plt+0xc5e4>
   1df7c:	ldr	lr, [ip, #4]
   1df80:	cmp	lr, #0
   1df84:	str	lr, [sp, #20]
   1df88:	beq	1e01c <__assert_fail@plt+0xc5ec>
   1df8c:	ldr	lr, [ip, #8]
   1df90:	cmp	lr, #0
   1df94:	str	lr, [sp, #24]
   1df98:	beq	1e024 <__assert_fail@plt+0xc5f4>
   1df9c:	ldr	lr, [ip, #12]
   1dfa0:	cmp	lr, #0
   1dfa4:	str	lr, [sp, #28]
   1dfa8:	beq	1e02c <__assert_fail@plt+0xc5fc>
   1dfac:	ldr	lr, [ip, #16]
   1dfb0:	cmp	lr, #0
   1dfb4:	str	lr, [sp, #32]
   1dfb8:	beq	1e034 <__assert_fail@plt+0xc604>
   1dfbc:	ldr	lr, [ip, #20]
   1dfc0:	cmp	lr, #0
   1dfc4:	str	lr, [sp, #36]	; 0x24
   1dfc8:	beq	1e03c <__assert_fail@plt+0xc60c>
   1dfcc:	ldr	lr, [ip, #24]
   1dfd0:	cmp	lr, #0
   1dfd4:	str	lr, [sp, #40]	; 0x28
   1dfd8:	beq	1e044 <__assert_fail@plt+0xc614>
   1dfdc:	ldr	lr, [ip, #28]
   1dfe0:	cmp	lr, #0
   1dfe4:	str	lr, [sp, #44]	; 0x2c
   1dfe8:	beq	1e04c <__assert_fail@plt+0xc61c>
   1dfec:	ldr	lr, [ip, #32]
   1dff0:	cmp	lr, #0
   1dff4:	str	lr, [sp, #48]	; 0x30
   1dff8:	beq	1e054 <__assert_fail@plt+0xc624>
   1dffc:	ldr	lr, [ip, #36]	; 0x24
   1e000:	mov	ip, #10
   1e004:	cmp	lr, #0
   1e008:	str	lr, [sp, #52]	; 0x34
   1e00c:	movweq	ip, #9
   1e010:	b	1e058 <__assert_fail@plt+0xc628>
   1e014:	mov	ip, #0
   1e018:	b	1e058 <__assert_fail@plt+0xc628>
   1e01c:	mov	ip, #1
   1e020:	b	1e058 <__assert_fail@plt+0xc628>
   1e024:	mov	ip, #2
   1e028:	b	1e058 <__assert_fail@plt+0xc628>
   1e02c:	mov	ip, #3
   1e030:	b	1e058 <__assert_fail@plt+0xc628>
   1e034:	mov	ip, #4
   1e038:	b	1e058 <__assert_fail@plt+0xc628>
   1e03c:	mov	ip, #5
   1e040:	b	1e058 <__assert_fail@plt+0xc628>
   1e044:	mov	ip, #6
   1e048:	b	1e058 <__assert_fail@plt+0xc628>
   1e04c:	mov	ip, #7
   1e050:	b	1e058 <__assert_fail@plt+0xc628>
   1e054:	mov	ip, #8
   1e058:	add	lr, sp, #16
   1e05c:	str	ip, [sp, #4]
   1e060:	str	lr, [sp]
   1e064:	bl	1dacc <__assert_fail@plt+0xc09c>
   1e068:	mov	sp, fp
   1e06c:	pop	{fp, pc}
   1e070:	push	{fp, lr}
   1e074:	mov	fp, sp
   1e078:	movw	r0, #20964	; 0x51e4
   1e07c:	movt	r0, #3
   1e080:	ldr	r1, [r0]
   1e084:	movw	r0, #2024	; 0x7e8
   1e088:	movt	r0, #2
   1e08c:	bl	11634 <fputs_unlocked@plt>
   1e090:	movw	r1, #16763	; 0x417b
   1e094:	mov	r0, #0
   1e098:	mov	r2, #5
   1e09c:	movt	r1, #2
   1e0a0:	bl	1170c <dcgettext@plt>
   1e0a4:	movw	r2, #16783	; 0x418f
   1e0a8:	mov	r1, r0
   1e0ac:	mov	r0, #1
   1e0b0:	movt	r2, #2
   1e0b4:	bl	11904 <__printf_chk@plt>
   1e0b8:	movw	r1, #16805	; 0x41a5
   1e0bc:	mov	r0, #0
   1e0c0:	mov	r2, #5
   1e0c4:	movt	r1, #2
   1e0c8:	bl	1170c <dcgettext@plt>
   1e0cc:	movw	r2, #2156	; 0x86c
   1e0d0:	movw	r3, #2363	; 0x93b
   1e0d4:	mov	r1, r0
   1e0d8:	mov	r0, #1
   1e0dc:	movt	r2, #2
   1e0e0:	movt	r3, #2
   1e0e4:	bl	11904 <__printf_chk@plt>
   1e0e8:	movw	r1, #16825	; 0x41b9
   1e0ec:	mov	r0, #0
   1e0f0:	mov	r2, #5
   1e0f4:	movt	r1, #2
   1e0f8:	bl	1170c <dcgettext@plt>
   1e0fc:	movw	r2, #16864	; 0x41e0
   1e100:	mov	r1, r0
   1e104:	mov	r0, #1
   1e108:	movt	r2, #2
   1e10c:	pop	{fp, lr}
   1e110:	b	11904 <__printf_chk@plt>
   1e114:	push	{r4, r5, r6, sl, fp, lr}
   1e118:	add	fp, sp, #16
   1e11c:	mov	r4, r2
   1e120:	mov	r5, r1
   1e124:	mov	r6, r0
   1e128:	bl	1fbd0 <__assert_fail@plt+0xe1a0>
   1e12c:	cmp	r0, #0
   1e130:	popne	{r4, r5, r6, sl, fp, pc}
   1e134:	cmp	r6, #0
   1e138:	beq	1e14c <__assert_fail@plt+0xc71c>
   1e13c:	cmp	r5, #0
   1e140:	cmpne	r4, #0
   1e144:	bne	1e14c <__assert_fail@plt+0xc71c>
   1e148:	pop	{r4, r5, r6, sl, fp, pc}
   1e14c:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e150:	push	{r4, r5, r6, sl, fp, lr}
   1e154:	add	fp, sp, #16
   1e158:	mov	r4, r2
   1e15c:	mov	r5, r1
   1e160:	mov	r6, r0
   1e164:	bl	1fbd0 <__assert_fail@plt+0xe1a0>
   1e168:	cmp	r0, #0
   1e16c:	popne	{r4, r5, r6, sl, fp, pc}
   1e170:	cmp	r6, #0
   1e174:	beq	1e188 <__assert_fail@plt+0xc758>
   1e178:	cmp	r5, #0
   1e17c:	cmpne	r4, #0
   1e180:	bne	1e188 <__assert_fail@plt+0xc758>
   1e184:	pop	{r4, r5, r6, sl, fp, pc}
   1e188:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e18c:	push	{fp, lr}
   1e190:	mov	fp, sp
   1e194:	bl	1e830 <__assert_fail@plt+0xce00>
   1e198:	cmp	r0, #0
   1e19c:	popne	{fp, pc}
   1e1a0:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e1a4:	push	{fp, lr}
   1e1a8:	mov	fp, sp
   1e1ac:	bl	1e830 <__assert_fail@plt+0xce00>
   1e1b0:	cmp	r0, #0
   1e1b4:	popne	{fp, pc}
   1e1b8:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e1bc:	push	{fp, lr}
   1e1c0:	mov	fp, sp
   1e1c4:	bl	1e830 <__assert_fail@plt+0xce00>
   1e1c8:	cmp	r0, #0
   1e1cc:	popne	{fp, pc}
   1e1d0:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e1d4:	push	{r4, r5, fp, lr}
   1e1d8:	add	fp, sp, #8
   1e1dc:	mov	r4, r1
   1e1e0:	mov	r5, r0
   1e1e4:	bl	1e860 <__assert_fail@plt+0xce30>
   1e1e8:	cmp	r0, #0
   1e1ec:	popne	{r4, r5, fp, pc}
   1e1f0:	cmp	r5, #0
   1e1f4:	beq	1e204 <__assert_fail@plt+0xc7d4>
   1e1f8:	cmp	r4, #0
   1e1fc:	bne	1e204 <__assert_fail@plt+0xc7d4>
   1e200:	pop	{r4, r5, fp, pc}
   1e204:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e208:	push	{fp, lr}
   1e20c:	mov	fp, sp
   1e210:	cmp	r1, #0
   1e214:	orreq	r1, r1, #1
   1e218:	bl	1e860 <__assert_fail@plt+0xce30>
   1e21c:	cmp	r0, #0
   1e220:	popne	{fp, pc}
   1e224:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e228:	push	{fp, lr}
   1e22c:	mov	fp, sp
   1e230:	clz	r3, r2
   1e234:	lsr	ip, r3, #5
   1e238:	clz	r3, r1
   1e23c:	lsr	r3, r3, #5
   1e240:	orrs	r3, r3, ip
   1e244:	movwne	r1, #1
   1e248:	movwne	r2, #1
   1e24c:	bl	1fbd0 <__assert_fail@plt+0xe1a0>
   1e250:	cmp	r0, #0
   1e254:	popne	{fp, pc}
   1e258:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e25c:	push	{fp, lr}
   1e260:	mov	fp, sp
   1e264:	mov	r2, r1
   1e268:	mov	r1, r0
   1e26c:	mov	r0, #0
   1e270:	bl	1fbd0 <__assert_fail@plt+0xe1a0>
   1e274:	cmp	r0, #0
   1e278:	popne	{fp, pc}
   1e27c:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e280:	push	{fp, lr}
   1e284:	mov	fp, sp
   1e288:	mov	r2, r1
   1e28c:	mov	r1, r0
   1e290:	clz	r0, r2
   1e294:	clz	r3, r1
   1e298:	lsr	r0, r0, #5
   1e29c:	lsr	r3, r3, #5
   1e2a0:	orrs	r0, r3, r0
   1e2a4:	movwne	r1, #1
   1e2a8:	movwne	r2, #1
   1e2ac:	mov	r0, #0
   1e2b0:	bl	1fbd0 <__assert_fail@plt+0xe1a0>
   1e2b4:	cmp	r0, #0
   1e2b8:	popne	{fp, pc}
   1e2bc:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e2c0:	push	{r4, r5, r6, sl, fp, lr}
   1e2c4:	add	fp, sp, #16
   1e2c8:	ldr	r5, [r1]
   1e2cc:	mov	r4, r1
   1e2d0:	mov	r6, r0
   1e2d4:	cmp	r0, #0
   1e2d8:	beq	1e2f0 <__assert_fail@plt+0xc8c0>
   1e2dc:	mov	r0, #1
   1e2e0:	add	r0, r0, r5, lsr #1
   1e2e4:	adds	r5, r5, r0
   1e2e8:	bcc	1e2f8 <__assert_fail@plt+0xc8c8>
   1e2ec:	b	1e334 <__assert_fail@plt+0xc904>
   1e2f0:	cmp	r5, #0
   1e2f4:	movweq	r5, #64	; 0x40
   1e2f8:	mov	r0, r6
   1e2fc:	mov	r1, r5
   1e300:	mov	r2, #1
   1e304:	bl	1fbd0 <__assert_fail@plt+0xe1a0>
   1e308:	cmp	r5, #0
   1e30c:	mov	r1, r5
   1e310:	movwne	r1, #1
   1e314:	cmp	r0, #0
   1e318:	bne	1e32c <__assert_fail@plt+0xc8fc>
   1e31c:	clz	r2, r6
   1e320:	lsr	r2, r2, #5
   1e324:	orrs	r1, r2, r1
   1e328:	bne	1e334 <__assert_fail@plt+0xc904>
   1e32c:	str	r5, [r4]
   1e330:	pop	{r4, r5, r6, sl, fp, pc}
   1e334:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e338:	push	{r4, r5, r6, r7, fp, lr}
   1e33c:	add	fp, sp, #16
   1e340:	ldr	r5, [r1]
   1e344:	mov	r6, r2
   1e348:	mov	r4, r1
   1e34c:	mov	r7, r0
   1e350:	cmp	r0, #0
   1e354:	beq	1e36c <__assert_fail@plt+0xc93c>
   1e358:	mov	r0, #1
   1e35c:	add	r0, r0, r5, lsr #1
   1e360:	adds	r5, r5, r0
   1e364:	bcc	1e384 <__assert_fail@plt+0xc954>
   1e368:	b	1e3b8 <__assert_fail@plt+0xc988>
   1e36c:	cmp	r5, #0
   1e370:	bne	1e384 <__assert_fail@plt+0xc954>
   1e374:	mov	r0, #64	; 0x40
   1e378:	cmp	r6, #64	; 0x40
   1e37c:	udiv	r5, r0, r6
   1e380:	addhi	r5, r5, #1
   1e384:	mov	r0, r7
   1e388:	mov	r1, r5
   1e38c:	mov	r2, r6
   1e390:	bl	1fbd0 <__assert_fail@plt+0xe1a0>
   1e394:	cmp	r0, #0
   1e398:	bne	1e3b0 <__assert_fail@plt+0xc980>
   1e39c:	cmp	r7, #0
   1e3a0:	beq	1e3b8 <__assert_fail@plt+0xc988>
   1e3a4:	cmp	r6, #0
   1e3a8:	cmpne	r5, #0
   1e3ac:	bne	1e3b8 <__assert_fail@plt+0xc988>
   1e3b0:	str	r5, [r4]
   1e3b4:	pop	{r4, r5, r6, r7, fp, pc}
   1e3b8:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e3bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e3c0:	add	fp, sp, #24
   1e3c4:	mov	r8, r1
   1e3c8:	ldr	r1, [r1]
   1e3cc:	mov	r5, r0
   1e3d0:	add	r0, r1, r1, asr #1
   1e3d4:	cmp	r0, r1
   1e3d8:	mvnvs	r0, #-2147483648	; 0x80000000
   1e3dc:	cmp	r0, r3
   1e3e0:	mov	r7, r0
   1e3e4:	movgt	r7, r3
   1e3e8:	cmn	r3, #1
   1e3ec:	movle	r7, r0
   1e3f0:	ldr	r0, [fp, #8]
   1e3f4:	cmn	r0, #1
   1e3f8:	ble	1e420 <__assert_fail@plt+0xc9f0>
   1e3fc:	cmp	r0, #0
   1e400:	beq	1e474 <__assert_fail@plt+0xca44>
   1e404:	cmn	r7, #1
   1e408:	ble	1e448 <__assert_fail@plt+0xca18>
   1e40c:	mvn	r4, #-2147483648	; 0x80000000
   1e410:	udiv	r6, r4, r0
   1e414:	cmp	r6, r7
   1e418:	bge	1e474 <__assert_fail@plt+0xca44>
   1e41c:	b	1e484 <__assert_fail@plt+0xca54>
   1e420:	cmn	r7, #1
   1e424:	ble	1e464 <__assert_fail@plt+0xca34>
   1e428:	cmn	r0, #1
   1e42c:	beq	1e474 <__assert_fail@plt+0xca44>
   1e430:	mov	r6, #-2147483648	; 0x80000000
   1e434:	mvn	r4, #-2147483648	; 0x80000000
   1e438:	sdiv	r6, r6, r0
   1e43c:	cmp	r6, r7
   1e440:	bge	1e474 <__assert_fail@plt+0xca44>
   1e444:	b	1e484 <__assert_fail@plt+0xca54>
   1e448:	beq	1e474 <__assert_fail@plt+0xca44>
   1e44c:	mov	r6, #-2147483648	; 0x80000000
   1e450:	mvn	r4, #-2147483648	; 0x80000000
   1e454:	sdiv	r6, r6, r7
   1e458:	cmp	r6, r0
   1e45c:	bge	1e474 <__assert_fail@plt+0xca44>
   1e460:	b	1e484 <__assert_fail@plt+0xca54>
   1e464:	mvn	r4, #-2147483648	; 0x80000000
   1e468:	sdiv	r6, r4, r0
   1e46c:	cmp	r7, r6
   1e470:	blt	1e484 <__assert_fail@plt+0xca54>
   1e474:	mul	r6, r7, r0
   1e478:	mov	r4, #64	; 0x40
   1e47c:	cmp	r6, #63	; 0x3f
   1e480:	bgt	1e48c <__assert_fail@plt+0xca5c>
   1e484:	sdiv	r7, r4, r0
   1e488:	mul	r6, r7, r0
   1e48c:	cmp	r5, #0
   1e490:	moveq	r4, #0
   1e494:	streq	r4, [r8]
   1e498:	sub	r4, r7, r1
   1e49c:	cmp	r4, r2
   1e4a0:	bge	1e54c <__assert_fail@plt+0xcb1c>
   1e4a4:	add	r7, r1, r2
   1e4a8:	mov	r6, #0
   1e4ac:	mov	r2, #0
   1e4b0:	cmp	r7, r3
   1e4b4:	movwgt	r6, #1
   1e4b8:	cmn	r3, #1
   1e4bc:	movwgt	r2, #1
   1e4c0:	cmp	r7, r1
   1e4c4:	bvs	1e580 <__assert_fail@plt+0xcb50>
   1e4c8:	ands	r1, r2, r6
   1e4cc:	bne	1e580 <__assert_fail@plt+0xcb50>
   1e4d0:	cmn	r0, #1
   1e4d4:	ble	1e4fc <__assert_fail@plt+0xcacc>
   1e4d8:	cmp	r0, #0
   1e4dc:	beq	1e548 <__assert_fail@plt+0xcb18>
   1e4e0:	cmn	r7, #1
   1e4e4:	ble	1e520 <__assert_fail@plt+0xcaf0>
   1e4e8:	mvn	r1, #-2147483648	; 0x80000000
   1e4ec:	udiv	r1, r1, r0
   1e4f0:	cmp	r1, r7
   1e4f4:	bge	1e548 <__assert_fail@plt+0xcb18>
   1e4f8:	b	1e580 <__assert_fail@plt+0xcb50>
   1e4fc:	cmn	r7, #1
   1e500:	ble	1e538 <__assert_fail@plt+0xcb08>
   1e504:	cmn	r0, #1
   1e508:	beq	1e548 <__assert_fail@plt+0xcb18>
   1e50c:	mov	r1, #-2147483648	; 0x80000000
   1e510:	sdiv	r1, r1, r0
   1e514:	cmp	r1, r7
   1e518:	bge	1e548 <__assert_fail@plt+0xcb18>
   1e51c:	b	1e580 <__assert_fail@plt+0xcb50>
   1e520:	beq	1e548 <__assert_fail@plt+0xcb18>
   1e524:	mov	r1, #-2147483648	; 0x80000000
   1e528:	sdiv	r1, r1, r7
   1e52c:	cmp	r1, r0
   1e530:	bge	1e548 <__assert_fail@plt+0xcb18>
   1e534:	b	1e580 <__assert_fail@plt+0xcb50>
   1e538:	mvn	r1, #-2147483648	; 0x80000000
   1e53c:	sdiv	r1, r1, r0
   1e540:	cmp	r7, r1
   1e544:	blt	1e580 <__assert_fail@plt+0xcb50>
   1e548:	mul	r6, r7, r0
   1e54c:	mov	r0, r5
   1e550:	mov	r1, r6
   1e554:	bl	1e860 <__assert_fail@plt+0xce30>
   1e558:	cmp	r6, #0
   1e55c:	movwne	r6, #1
   1e560:	cmp	r0, #0
   1e564:	bne	1e578 <__assert_fail@plt+0xcb48>
   1e568:	clz	r1, r5
   1e56c:	lsr	r1, r1, #5
   1e570:	orrs	r1, r1, r6
   1e574:	bne	1e580 <__assert_fail@plt+0xcb50>
   1e578:	str	r7, [r8]
   1e57c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e580:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e584:	push	{fp, lr}
   1e588:	mov	fp, sp
   1e58c:	mov	r1, #1
   1e590:	bl	1e7dc <__assert_fail@plt+0xcdac>
   1e594:	cmp	r0, #0
   1e598:	popne	{fp, pc}
   1e59c:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e5a0:	push	{fp, lr}
   1e5a4:	mov	fp, sp
   1e5a8:	bl	1e7dc <__assert_fail@plt+0xcdac>
   1e5ac:	cmp	r0, #0
   1e5b0:	popne	{fp, pc}
   1e5b4:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e5b8:	push	{fp, lr}
   1e5bc:	mov	fp, sp
   1e5c0:	mov	r1, #1
   1e5c4:	bl	1e7dc <__assert_fail@plt+0xcdac>
   1e5c8:	cmp	r0, #0
   1e5cc:	popne	{fp, pc}
   1e5d0:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e5d4:	push	{fp, lr}
   1e5d8:	mov	fp, sp
   1e5dc:	bl	1e7dc <__assert_fail@plt+0xcdac>
   1e5e0:	cmp	r0, #0
   1e5e4:	popne	{fp, pc}
   1e5e8:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e5ec:	push	{r4, r5, r6, sl, fp, lr}
   1e5f0:	add	fp, sp, #16
   1e5f4:	mov	r5, r0
   1e5f8:	mov	r0, r1
   1e5fc:	mov	r4, r1
   1e600:	bl	1e830 <__assert_fail@plt+0xce00>
   1e604:	cmp	r0, #0
   1e608:	beq	1e624 <__assert_fail@plt+0xcbf4>
   1e60c:	mov	r1, r5
   1e610:	mov	r2, r4
   1e614:	mov	r6, r0
   1e618:	bl	116dc <memcpy@plt>
   1e61c:	mov	r0, r6
   1e620:	pop	{r4, r5, r6, sl, fp, pc}
   1e624:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e628:	push	{r4, r5, r6, sl, fp, lr}
   1e62c:	add	fp, sp, #16
   1e630:	mov	r5, r0
   1e634:	mov	r0, r1
   1e638:	mov	r4, r1
   1e63c:	bl	1e830 <__assert_fail@plt+0xce00>
   1e640:	cmp	r0, #0
   1e644:	beq	1e660 <__assert_fail@plt+0xcc30>
   1e648:	mov	r1, r5
   1e64c:	mov	r2, r4
   1e650:	mov	r6, r0
   1e654:	bl	116dc <memcpy@plt>
   1e658:	mov	r0, r6
   1e65c:	pop	{r4, r5, r6, sl, fp, pc}
   1e660:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e664:	push	{r4, r5, r6, sl, fp, lr}
   1e668:	add	fp, sp, #16
   1e66c:	mov	r5, r0
   1e670:	add	r0, r1, #1
   1e674:	mov	r4, r1
   1e678:	bl	1e830 <__assert_fail@plt+0xce00>
   1e67c:	cmp	r0, #0
   1e680:	beq	1e6a8 <__assert_fail@plt+0xcc78>
   1e684:	mov	r6, r0
   1e688:	mov	r0, #0
   1e68c:	mov	r1, r5
   1e690:	mov	r2, r4
   1e694:	strb	r0, [r6, r4]
   1e698:	mov	r0, r6
   1e69c:	bl	116dc <memcpy@plt>
   1e6a0:	mov	r0, r6
   1e6a4:	pop	{r4, r5, r6, sl, fp, pc}
   1e6a8:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e6ac:	push	{r4, r5, r6, sl, fp, lr}
   1e6b0:	add	fp, sp, #16
   1e6b4:	mov	r4, r0
   1e6b8:	bl	1188c <strlen@plt>
   1e6bc:	add	r5, r0, #1
   1e6c0:	mov	r0, r5
   1e6c4:	bl	1e830 <__assert_fail@plt+0xce00>
   1e6c8:	cmp	r0, #0
   1e6cc:	beq	1e6e8 <__assert_fail@plt+0xccb8>
   1e6d0:	mov	r1, r4
   1e6d4:	mov	r2, r5
   1e6d8:	mov	r6, r0
   1e6dc:	bl	116dc <memcpy@plt>
   1e6e0:	mov	r0, r6
   1e6e4:	pop	{r4, r5, r6, sl, fp, pc}
   1e6e8:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e6ec:	push	{fp, lr}
   1e6f0:	mov	fp, sp
   1e6f4:	movw	r0, #20864	; 0x5180
   1e6f8:	movw	r1, #16940	; 0x422c
   1e6fc:	mov	r2, #5
   1e700:	movt	r0, #3
   1e704:	movt	r1, #2
   1e708:	ldr	r4, [r0]
   1e70c:	mov	r0, #0
   1e710:	bl	1170c <dcgettext@plt>
   1e714:	movw	r2, #15873	; 0x3e01
   1e718:	mov	r3, r0
   1e71c:	mov	r0, r4
   1e720:	mov	r1, #0
   1e724:	movt	r2, #2
   1e728:	bl	117fc <error@plt>
   1e72c:	bl	11a24 <abort@plt>
   1e730:	push	{r4, sl, fp, lr}
   1e734:	add	fp, sp, #8
   1e738:	sub	sp, sp, #8
   1e73c:	ldr	r4, [fp, #8]
   1e740:	str	r4, [sp]
   1e744:	bl	1fc0c <__assert_fail@plt+0xe1dc>
   1e748:	mov	r4, r0
   1e74c:	cmn	r0, #1
   1e750:	bgt	1e764 <__assert_fail@plt+0xcd34>
   1e754:	bl	118bc <__errno_location@plt>
   1e758:	ldr	r0, [r0]
   1e75c:	cmp	r0, #12
   1e760:	beq	1e770 <__assert_fail@plt+0xcd40>
   1e764:	mov	r0, r4
   1e768:	sub	sp, fp, #8
   1e76c:	pop	{r4, sl, fp, pc}
   1e770:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e774:	push	{r4, sl, fp, lr}
   1e778:	add	fp, sp, #8
   1e77c:	bl	1febc <__assert_fail@plt+0xe48c>
   1e780:	mov	r4, r0
   1e784:	cmp	r0, #0
   1e788:	bne	1e79c <__assert_fail@plt+0xcd6c>
   1e78c:	bl	118bc <__errno_location@plt>
   1e790:	ldr	r0, [r0]
   1e794:	cmp	r0, #12
   1e798:	beq	1e7a4 <__assert_fail@plt+0xcd74>
   1e79c:	mov	r0, r4
   1e7a0:	pop	{r4, sl, fp, pc}
   1e7a4:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e7a8:	push	{r4, sl, fp, lr}
   1e7ac:	add	fp, sp, #8
   1e7b0:	bl	20100 <__assert_fail@plt+0xe6d0>
   1e7b4:	mov	r4, r0
   1e7b8:	cmp	r0, #0
   1e7bc:	bne	1e7d0 <__assert_fail@plt+0xcda0>
   1e7c0:	bl	118bc <__errno_location@plt>
   1e7c4:	ldr	r0, [r0]
   1e7c8:	cmp	r0, #12
   1e7cc:	beq	1e7d8 <__assert_fail@plt+0xcda8>
   1e7d0:	mov	r0, r4
   1e7d4:	pop	{r4, sl, fp, pc}
   1e7d8:	bl	1e6ec <__assert_fail@plt+0xccbc>
   1e7dc:	clz	r2, r1
   1e7e0:	clz	r3, r0
   1e7e4:	lsr	r2, r2, #5
   1e7e8:	lsr	r3, r3, #5
   1e7ec:	orrs	r2, r3, r2
   1e7f0:	movwne	r1, #1
   1e7f4:	movwne	r0, #1
   1e7f8:	cmp	r1, #0
   1e7fc:	beq	1e82c <__assert_fail@plt+0xcdfc>
   1e800:	mvn	r2, #-2147483648	; 0x80000000
   1e804:	udiv	r2, r2, r1
   1e808:	cmp	r2, r0
   1e80c:	bcs	1e82c <__assert_fail@plt+0xcdfc>
   1e810:	push	{fp, lr}
   1e814:	mov	fp, sp
   1e818:	bl	118bc <__errno_location@plt>
   1e81c:	mov	r1, #12
   1e820:	str	r1, [r0]
   1e824:	mov	r0, #0
   1e828:	pop	{fp, pc}
   1e82c:	b	11628 <calloc@plt>
   1e830:	cmp	r0, #0
   1e834:	movweq	r0, #1
   1e838:	cmn	r0, #1
   1e83c:	ble	1e844 <__assert_fail@plt+0xce14>
   1e840:	b	11808 <malloc@plt>
   1e844:	push	{fp, lr}
   1e848:	mov	fp, sp
   1e84c:	bl	118bc <__errno_location@plt>
   1e850:	mov	r1, #12
   1e854:	str	r1, [r0]
   1e858:	mov	r0, #0
   1e85c:	pop	{fp, pc}
   1e860:	push	{fp, lr}
   1e864:	mov	fp, sp
   1e868:	cmp	r0, #0
   1e86c:	beq	1e888 <__assert_fail@plt+0xce58>
   1e870:	cmp	r1, #0
   1e874:	beq	1e894 <__assert_fail@plt+0xce64>
   1e878:	cmn	r1, #1
   1e87c:	ble	1e8a0 <__assert_fail@plt+0xce70>
   1e880:	pop	{fp, lr}
   1e884:	b	11754 <realloc@plt>
   1e888:	mov	r0, r1
   1e88c:	pop	{fp, lr}
   1e890:	b	1e830 <__assert_fail@plt+0xce00>
   1e894:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1e898:	mov	r0, #0
   1e89c:	pop	{fp, pc}
   1e8a0:	bl	118bc <__errno_location@plt>
   1e8a4:	mov	r1, #12
   1e8a8:	str	r1, [r0]
   1e8ac:	mov	r0, #0
   1e8b0:	pop	{fp, pc}
   1e8b4:	cmp	r0, r1
   1e8b8:	moveq	r0, #0
   1e8bc:	bxeq	lr
   1e8c0:	ldrb	r3, [r1]
   1e8c4:	ldrb	ip, [r0]
   1e8c8:	sub	r2, r3, #65	; 0x41
   1e8cc:	cmp	r2, #26
   1e8d0:	sub	r2, ip, #65	; 0x41
   1e8d4:	addcc	r3, r3, #32
   1e8d8:	cmp	r2, #26
   1e8dc:	addcc	ip, ip, #32
   1e8e0:	uxtb	r3, r3
   1e8e4:	uxtb	r2, ip
   1e8e8:	cmp	r2, #0
   1e8ec:	beq	1e900 <__assert_fail@plt+0xced0>
   1e8f0:	add	r1, r1, #1
   1e8f4:	add	r0, r0, #1
   1e8f8:	cmp	r2, r3
   1e8fc:	beq	1e8c0 <__assert_fail@plt+0xce90>
   1e900:	sub	r0, r2, r3
   1e904:	bx	lr
   1e908:	push	{r4, r5, r6, sl, fp, lr}
   1e90c:	add	fp, sp, #16
   1e910:	mov	r4, r0
   1e914:	bl	117e4 <__fpending@plt>
   1e918:	ldr	r6, [r4]
   1e91c:	mov	r5, r0
   1e920:	mov	r0, r4
   1e924:	bl	1e98c <__assert_fail@plt+0xcf5c>
   1e928:	tst	r6, #32
   1e92c:	bne	1e964 <__assert_fail@plt+0xcf34>
   1e930:	cmp	r0, #0
   1e934:	mov	r4, r0
   1e938:	mvnne	r4, #0
   1e93c:	cmp	r5, #0
   1e940:	bne	1e970 <__assert_fail@plt+0xcf40>
   1e944:	cmp	r0, #0
   1e948:	beq	1e970 <__assert_fail@plt+0xcf40>
   1e94c:	bl	118bc <__errno_location@plt>
   1e950:	ldr	r0, [r0]
   1e954:	subs	r4, r0, #9
   1e958:	mvnne	r4, #0
   1e95c:	mov	r0, r4
   1e960:	pop	{r4, r5, r6, sl, fp, pc}
   1e964:	mvn	r4, #0
   1e968:	cmp	r0, #0
   1e96c:	beq	1e978 <__assert_fail@plt+0xcf48>
   1e970:	mov	r0, r4
   1e974:	pop	{r4, r5, r6, sl, fp, pc}
   1e978:	bl	118bc <__errno_location@plt>
   1e97c:	mov	r1, #0
   1e980:	str	r1, [r0]
   1e984:	mov	r0, r4
   1e988:	pop	{r4, r5, r6, sl, fp, pc}
   1e98c:	push	{r4, r5, r6, sl, fp, lr}
   1e990:	add	fp, sp, #16
   1e994:	sub	sp, sp, #8
   1e998:	mov	r4, r0
   1e99c:	bl	1191c <fileno@plt>
   1e9a0:	cmn	r0, #1
   1e9a4:	ble	1ea18 <__assert_fail@plt+0xcfe8>
   1e9a8:	mov	r0, r4
   1e9ac:	bl	1182c <__freading@plt>
   1e9b0:	cmp	r0, #0
   1e9b4:	beq	1e9e0 <__assert_fail@plt+0xcfb0>
   1e9b8:	mov	r0, r4
   1e9bc:	bl	1191c <fileno@plt>
   1e9c0:	mov	r1, #1
   1e9c4:	mov	r2, #0
   1e9c8:	mov	r3, #0
   1e9cc:	str	r1, [sp]
   1e9d0:	bl	117c0 <lseek64@plt>
   1e9d4:	and	r0, r0, r1
   1e9d8:	cmn	r0, #1
   1e9dc:	beq	1ea18 <__assert_fail@plt+0xcfe8>
   1e9e0:	mov	r0, r4
   1e9e4:	bl	1ea28 <__assert_fail@plt+0xcff8>
   1e9e8:	cmp	r0, #0
   1e9ec:	beq	1ea18 <__assert_fail@plt+0xcfe8>
   1e9f0:	bl	118bc <__errno_location@plt>
   1e9f4:	ldr	r6, [r0]
   1e9f8:	mov	r5, r0
   1e9fc:	mov	r0, r4
   1ea00:	bl	11940 <fclose@plt>
   1ea04:	cmp	r6, #0
   1ea08:	strne	r6, [r5]
   1ea0c:	mvnne	r0, #0
   1ea10:	sub	sp, fp, #16
   1ea14:	pop	{r4, r5, r6, sl, fp, pc}
   1ea18:	mov	r0, r4
   1ea1c:	sub	sp, fp, #16
   1ea20:	pop	{r4, r5, r6, sl, fp, lr}
   1ea24:	b	11940 <fclose@plt>
   1ea28:	push	{r4, sl, fp, lr}
   1ea2c:	add	fp, sp, #8
   1ea30:	sub	sp, sp, #8
   1ea34:	mov	r4, r0
   1ea38:	cmp	r0, #0
   1ea3c:	beq	1ea58 <__assert_fail@plt+0xd028>
   1ea40:	mov	r0, r4
   1ea44:	bl	1182c <__freading@plt>
   1ea48:	cmp	r0, #0
   1ea4c:	ldrbne	r0, [r4, #1]
   1ea50:	tstne	r0, #1
   1ea54:	bne	1ea68 <__assert_fail@plt+0xd038>
   1ea58:	mov	r0, r4
   1ea5c:	sub	sp, fp, #8
   1ea60:	pop	{r4, sl, fp, lr}
   1ea64:	b	1167c <fflush@plt>
   1ea68:	mov	r0, #1
   1ea6c:	mov	r2, #0
   1ea70:	mov	r3, #0
   1ea74:	str	r0, [sp]
   1ea78:	mov	r0, r4
   1ea7c:	bl	1ea90 <__assert_fail@plt+0xd060>
   1ea80:	mov	r0, r4
   1ea84:	sub	sp, fp, #8
   1ea88:	pop	{r4, sl, fp, lr}
   1ea8c:	b	1167c <fflush@plt>
   1ea90:	push	{r4, r5, r6, r7, fp, lr}
   1ea94:	add	fp, sp, #16
   1ea98:	sub	sp, sp, #8
   1ea9c:	mov	r4, r0
   1eaa0:	ldr	r0, [r0, #4]
   1eaa4:	mov	r5, r3
   1eaa8:	mov	r6, r2
   1eaac:	ldr	r1, [r4, #8]
   1eab0:	cmp	r1, r0
   1eab4:	bne	1ead0 <__assert_fail@plt+0xd0a0>
   1eab8:	ldrd	r0, [r4, #16]
   1eabc:	cmp	r1, r0
   1eac0:	bne	1ead0 <__assert_fail@plt+0xd0a0>
   1eac4:	ldr	r0, [r4, #36]	; 0x24
   1eac8:	cmp	r0, #0
   1eacc:	beq	1eae8 <__assert_fail@plt+0xd0b8>
   1ead0:	mov	r0, r4
   1ead4:	mov	r2, r6
   1ead8:	mov	r3, r5
   1eadc:	sub	sp, fp, #16
   1eae0:	pop	{r4, r5, r6, r7, fp, lr}
   1eae4:	b	11958 <fseeko64@plt>
   1eae8:	ldr	r7, [fp, #8]
   1eaec:	mov	r0, r4
   1eaf0:	bl	1191c <fileno@plt>
   1eaf4:	mov	r2, r6
   1eaf8:	mov	r3, r5
   1eafc:	str	r7, [sp]
   1eb00:	bl	117c0 <lseek64@plt>
   1eb04:	and	r2, r0, r1
   1eb08:	cmn	r2, #1
   1eb0c:	mvneq	r0, #0
   1eb10:	subeq	sp, fp, #16
   1eb14:	popeq	{r4, r5, r6, r7, fp, pc}
   1eb18:	strd	r0, [r4, #80]	; 0x50
   1eb1c:	ldr	r0, [r4]
   1eb20:	bic	r0, r0, #16
   1eb24:	str	r0, [r4]
   1eb28:	mov	r0, #0
   1eb2c:	sub	sp, fp, #16
   1eb30:	pop	{r4, r5, r6, r7, fp, pc}
   1eb34:	push	{fp, lr}
   1eb38:	mov	fp, sp
   1eb3c:	mov	r0, #14
   1eb40:	bl	119b8 <nl_langinfo@plt>
   1eb44:	movw	r1, #2025	; 0x7e9
   1eb48:	cmp	r0, #0
   1eb4c:	movt	r1, #2
   1eb50:	movne	r1, r0
   1eb54:	movw	r0, #16957	; 0x423d
   1eb58:	ldrb	r2, [r1]
   1eb5c:	movt	r0, #2
   1eb60:	cmp	r2, #0
   1eb64:	movne	r0, r1
   1eb68:	pop	{fp, pc}
   1eb6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1eb70:	add	fp, sp, #24
   1eb74:	mov	r4, r0
   1eb78:	ldrb	r0, [r0, #16]
   1eb7c:	cmp	r0, #0
   1eb80:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   1eb84:	ldrb	r0, [r4, #4]
   1eb88:	cmp	r0, #0
   1eb8c:	beq	1ebf0 <__assert_fail@plt+0xd1c0>
   1eb90:	mov	r5, r4
   1eb94:	ldr	r6, [r5, #20]!
   1eb98:	sub	r8, r5, #12
   1eb9c:	ldr	r0, [r4]
   1eba0:	add	r7, r4, #32
   1eba4:	mov	r1, r6
   1eba8:	mov	r3, r8
   1ebac:	sub	r2, r0, r6
   1ebb0:	mov	r0, r7
   1ebb4:	bl	1ede0 <__assert_fail@plt+0xd3b0>
   1ebb8:	cmn	r0, #2
   1ebbc:	str	r0, [r4, #24]
   1ebc0:	beq	1ec80 <__assert_fail@plt+0xd250>
   1ebc4:	cmp	r0, #0
   1ebc8:	beq	1ec34 <__assert_fail@plt+0xd204>
   1ebcc:	cmn	r0, #1
   1ebd0:	bne	1ec58 <__assert_fail@plt+0xd228>
   1ebd4:	mov	r0, #0
   1ebd8:	strb	r0, [r4, #28]
   1ebdc:	mov	r0, #1
   1ebe0:	str	r0, [r4, #24]
   1ebe4:	mov	r0, #1
   1ebe8:	strb	r0, [r4, #16]
   1ebec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ebf0:	ldr	r6, [r4, #20]
   1ebf4:	movw	r2, #17160	; 0x4308
   1ebf8:	movt	r2, #2
   1ebfc:	ldrb	r0, [r6]
   1ec00:	ubfx	r1, r0, #5, #3
   1ec04:	ldr	r1, [r2, r1, lsl #2]
   1ec08:	and	r2, r0, #31
   1ec0c:	mov	r0, #1
   1ec10:	tst	r1, r0, lsl r2
   1ec14:	beq	1eca4 <__assert_fail@plt+0xd274>
   1ec18:	str	r0, [r4, #24]
   1ec1c:	ldrb	r1, [r6]
   1ec20:	strb	r0, [r4, #28]
   1ec24:	str	r1, [r4, #32]
   1ec28:	mov	r0, #1
   1ec2c:	strb	r0, [r4, #16]
   1ec30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ec34:	mov	r0, #1
   1ec38:	str	r0, [r4, #24]
   1ec3c:	ldr	r0, [r4, #20]
   1ec40:	ldrb	r0, [r0]
   1ec44:	cmp	r0, #0
   1ec48:	bne	1ecc8 <__assert_fail@plt+0xd298>
   1ec4c:	ldr	r0, [r7]
   1ec50:	cmp	r0, #0
   1ec54:	bne	1ece8 <__assert_fail@plt+0xd2b8>
   1ec58:	mov	r0, #1
   1ec5c:	strb	r0, [r4, #28]
   1ec60:	mov	r0, r8
   1ec64:	bl	116f4 <mbsinit@plt>
   1ec68:	cmp	r0, #0
   1ec6c:	movne	r0, #0
   1ec70:	strbne	r0, [r4, #4]
   1ec74:	mov	r0, #1
   1ec78:	strb	r0, [r4, #16]
   1ec7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ec80:	mov	r1, #0
   1ec84:	ldr	r0, [r5]
   1ec88:	strb	r1, [r4, #28]
   1ec8c:	ldr	r1, [r4]
   1ec90:	sub	r0, r1, r0
   1ec94:	str	r0, [r4, #24]
   1ec98:	mov	r0, #1
   1ec9c:	strb	r0, [r4, #16]
   1eca0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1eca4:	add	r8, r4, #8
   1eca8:	mov	r0, r8
   1ecac:	bl	116f4 <mbsinit@plt>
   1ecb0:	cmp	r0, #0
   1ecb4:	beq	1ed08 <__assert_fail@plt+0xd2d8>
   1ecb8:	mov	r0, #1
   1ecbc:	add	r5, r4, #20
   1ecc0:	strb	r0, [r4, #4]
   1ecc4:	b	1eb9c <__assert_fail@plt+0xd16c>
   1ecc8:	movw	r0, #17047	; 0x4297
   1eccc:	movw	r1, #16986	; 0x425a
   1ecd0:	movw	r3, #17001	; 0x4269
   1ecd4:	mov	r2, #162	; 0xa2
   1ecd8:	movt	r0, #2
   1ecdc:	movt	r1, #2
   1ece0:	movt	r3, #2
   1ece4:	bl	11a30 <__assert_fail@plt>
   1ece8:	movw	r0, #17070	; 0x42ae
   1ecec:	movw	r1, #16986	; 0x425a
   1ecf0:	movw	r3, #17001	; 0x4269
   1ecf4:	mov	r2, #163	; 0xa3
   1ecf8:	movt	r0, #2
   1ecfc:	movt	r1, #2
   1ed00:	movt	r3, #2
   1ed04:	bl	11a30 <__assert_fail@plt>
   1ed08:	movw	r0, #16963	; 0x4243
   1ed0c:	movw	r1, #16986	; 0x425a
   1ed10:	movw	r3, #17001	; 0x4269
   1ed14:	mov	r2, #135	; 0x87
   1ed18:	movt	r0, #2
   1ed1c:	movt	r1, #2
   1ed20:	movt	r3, #2
   1ed24:	bl	11a30 <__assert_fail@plt>
   1ed28:	ldr	r3, [r0, #20]
   1ed2c:	ldr	r2, [r0]
   1ed30:	add	r3, r3, r1
   1ed34:	add	r1, r2, r1
   1ed38:	str	r3, [r0, #20]
   1ed3c:	str	r1, [r0]
   1ed40:	bx	lr
   1ed44:	push	{r4, r5, r6, sl, fp, lr}
   1ed48:	add	fp, sp, #16
   1ed4c:	mov	r4, r0
   1ed50:	ldr	r0, [r1]
   1ed54:	mov	r5, r1
   1ed58:	str	r0, [r4]
   1ed5c:	add	r0, r4, #8
   1ed60:	ldrb	r1, [r1, #4]
   1ed64:	cmp	r1, #0
   1ed68:	strb	r1, [r4, #4]
   1ed6c:	beq	1ed80 <__assert_fail@plt+0xd350>
   1ed70:	ldr	r1, [r5, #8]
   1ed74:	ldr	r2, [r5, #12]
   1ed78:	stm	r0, {r1, r2}
   1ed7c:	b	1ed8c <__assert_fail@plt+0xd35c>
   1ed80:	mov	r1, #0
   1ed84:	str	r1, [r0]
   1ed88:	str	r1, [r0, #4]
   1ed8c:	ldrb	r0, [r5, #16]
   1ed90:	strb	r0, [r4, #16]
   1ed94:	add	r0, r5, #36	; 0x24
   1ed98:	ldr	r1, [r5, #20]
   1ed9c:	cmp	r1, r0
   1eda0:	beq	1edac <__assert_fail@plt+0xd37c>
   1eda4:	mov	r6, r1
   1eda8:	b	1edbc <__assert_fail@plt+0xd38c>
   1edac:	ldr	r2, [r5, #24]
   1edb0:	add	r6, r4, #36	; 0x24
   1edb4:	mov	r0, r6
   1edb8:	bl	116dc <memcpy@plt>
   1edbc:	str	r6, [r4, #20]
   1edc0:	ldr	r0, [r5, #24]
   1edc4:	str	r0, [r4, #24]
   1edc8:	ldrb	r0, [r5, #28]
   1edcc:	strb	r0, [r4, #28]
   1edd0:	cmp	r0, #0
   1edd4:	ldrne	r0, [r5, #32]
   1edd8:	strne	r0, [r4, #32]
   1eddc:	pop	{r4, r5, r6, sl, fp, pc}
   1ede0:	push	{r4, r5, r6, r7, fp, lr}
   1ede4:	add	fp, sp, #16
   1ede8:	sub	sp, sp, #8
   1edec:	add	r5, sp, #4
   1edf0:	cmp	r0, #0
   1edf4:	mov	r7, r2
   1edf8:	mov	r4, r1
   1edfc:	movne	r5, r0
   1ee00:	mov	r0, r5
   1ee04:	bl	117f0 <mbrtowc@plt>
   1ee08:	mov	r6, r0
   1ee0c:	cmp	r7, #0
   1ee10:	beq	1ee34 <__assert_fail@plt+0xd404>
   1ee14:	cmn	r6, #2
   1ee18:	bcc	1ee34 <__assert_fail@plt+0xd404>
   1ee1c:	mov	r0, #0
   1ee20:	bl	20210 <__assert_fail@plt+0xe7e0>
   1ee24:	cmp	r0, #0
   1ee28:	ldrbeq	r0, [r4]
   1ee2c:	moveq	r6, #1
   1ee30:	streq	r0, [r5]
   1ee34:	mov	r0, r6
   1ee38:	sub	sp, fp, #16
   1ee3c:	pop	{r4, r5, r6, r7, fp, pc}
   1ee40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee44:	add	fp, sp, #28
   1ee48:	sub	sp, sp, #308	; 0x134
   1ee4c:	mov	r5, r1
   1ee50:	mov	r6, r0
   1ee54:	bl	117d8 <__ctype_get_mb_cur_max@plt>
   1ee58:	cmp	r0, #2
   1ee5c:	bcc	1eea8 <__assert_fail@plt+0xd478>
   1ee60:	mov	r4, #0
   1ee64:	sub	r0, fp, #88	; 0x58
   1ee68:	str	r4, [fp, #-80]	; 0xffffffb0
   1ee6c:	str	r4, [fp, #-84]	; 0xffffffac
   1ee70:	strb	r4, [fp, #-88]	; 0xffffffa8
   1ee74:	str	r5, [fp, #-72]	; 0xffffffb8
   1ee78:	strb	r4, [fp, #-76]	; 0xffffffb4
   1ee7c:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1ee80:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1ee84:	cmp	r0, #0
   1ee88:	beq	1efc8 <__assert_fail@plt+0xd598>
   1ee8c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1ee90:	cmp	r0, #0
   1ee94:	bne	1efc8 <__assert_fail@plt+0xd598>
   1ee98:	mov	r4, r6
   1ee9c:	mov	r0, r4
   1eea0:	sub	sp, fp, #28
   1eea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eea8:	ldrb	r7, [r5]
   1eeac:	cmp	r7, #0
   1eeb0:	beq	1f334 <__assert_fail@plt+0xd904>
   1eeb4:	ldrb	r9, [r6]
   1eeb8:	cmp	r9, #0
   1eebc:	beq	1f344 <__assert_fail@plt+0xd914>
   1eec0:	mov	r3, #1
   1eec4:	mov	ip, #0
   1eec8:	mov	lr, r5
   1eecc:	mov	r8, #0
   1eed0:	mov	sl, #0
   1eed4:	str	r7, [sp, #16]
   1eed8:	add	r0, sl, sl, lsl #2
   1eedc:	cmp	r8, r0
   1eee0:	bcc	1ef70 <__assert_fail@plt+0xd540>
   1eee4:	tst	r3, #1
   1eee8:	beq	1ef70 <__assert_fail@plt+0xd540>
   1eeec:	cmp	sl, #10
   1eef0:	bcc	1ef70 <__assert_fail@plt+0xd540>
   1eef4:	cmp	lr, #0
   1eef8:	str	r3, [sp, #20]
   1eefc:	beq	1ef30 <__assert_fail@plt+0xd500>
   1ef00:	sub	r1, r8, ip
   1ef04:	mov	r0, lr
   1ef08:	mov	r7, lr
   1ef0c:	bl	1194c <strnlen@plt>
   1ef10:	mov	lr, r7
   1ef14:	mov	ip, r8
   1ef18:	ldrb	r0, [lr, r0]!
   1ef1c:	cmp	r0, #0
   1ef20:	beq	1ef30 <__assert_fail@plt+0xd500>
   1ef24:	ldr	r3, [sp, #20]
   1ef28:	mov	ip, r8
   1ef2c:	b	1ef6c <__assert_fail@plt+0xd53c>
   1ef30:	mov	r0, r5
   1ef34:	mov	r4, ip
   1ef38:	bl	1188c <strlen@plt>
   1ef3c:	mov	r2, r0
   1ef40:	mov	r0, r6
   1ef44:	mov	r1, r5
   1ef48:	sub	r3, fp, #88	; 0x58
   1ef4c:	bl	1f7f4 <__assert_fail@plt+0xddc4>
   1ef50:	cmp	r0, #0
   1ef54:	bne	1f394 <__assert_fail@plt+0xd964>
   1ef58:	ldr	r3, [sp, #20]
   1ef5c:	ldrb	r9, [r6]
   1ef60:	mov	lr, #0
   1ef64:	mov	ip, r4
   1ef68:	and	r3, r3, r0
   1ef6c:	ldr	r7, [sp, #16]
   1ef70:	uxtb	r0, r9
   1ef74:	cmp	r0, r7
   1ef78:	bne	1efac <__assert_fail@plt+0xd57c>
   1ef7c:	mov	r0, #1
   1ef80:	ldrb	r1, [r5, r0]
   1ef84:	cmp	r1, #0
   1ef88:	beq	1f354 <__assert_fail@plt+0xd924>
   1ef8c:	ldrb	r2, [r6, r0]
   1ef90:	cmp	r2, #0
   1ef94:	beq	1f364 <__assert_fail@plt+0xd934>
   1ef98:	add	r0, r0, #1
   1ef9c:	cmp	r2, r1
   1efa0:	beq	1ef80 <__assert_fail@plt+0xd550>
   1efa4:	add	r8, r8, r0
   1efa8:	b	1efb0 <__assert_fail@plt+0xd580>
   1efac:	add	r8, r8, #1
   1efb0:	ldrb	r9, [r6, #1]!
   1efb4:	add	sl, sl, #1
   1efb8:	mov	r4, #0
   1efbc:	cmp	r9, #0
   1efc0:	bne	1eed8 <__assert_fail@plt+0xd4a8>
   1efc4:	b	1f338 <__assert_fail@plt+0xd908>
   1efc8:	add	r0, sp, #136	; 0x88
   1efcc:	str	r4, [fp, #-136]	; 0xffffff78
   1efd0:	str	r4, [fp, #-140]	; 0xffffff74
   1efd4:	strb	r4, [fp, #-144]	; 0xffffff70
   1efd8:	str	r5, [fp, #-128]	; 0xffffff80
   1efdc:	str	r4, [sp, #144]	; 0x90
   1efe0:	str	r4, [sp, #140]	; 0x8c
   1efe4:	str	r6, [sp, #152]	; 0x98
   1efe8:	strb	r4, [sp, #136]	; 0x88
   1efec:	str	r5, [sp, #16]
   1eff0:	strb	r4, [fp, #-132]	; 0xffffff7c
   1eff4:	strb	r4, [sp, #148]	; 0x94
   1eff8:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1effc:	ldrb	r0, [sp, #160]	; 0xa0
   1f000:	cmp	r0, #0
   1f004:	beq	1f014 <__assert_fail@plt+0xd5e4>
   1f008:	ldr	r0, [sp, #164]	; 0xa4
   1f00c:	cmp	r0, #0
   1f010:	beq	1f338 <__assert_fail@plt+0xd908>
   1f014:	add	r0, sp, #24
   1f018:	mov	r8, #1
   1f01c:	mov	sl, #0
   1f020:	sub	r5, fp, #144	; 0x90
   1f024:	mov	r1, #0
   1f028:	mov	r7, #0
   1f02c:	mov	r9, #0
   1f030:	add	r0, r0, #4
   1f034:	str	r0, [sp, #12]
   1f038:	add	r0, sp, #136	; 0x88
   1f03c:	add	r0, r0, #16
   1f040:	str	r0, [sp, #8]
   1f044:	add	r0, r9, r9, lsl #2
   1f048:	mov	r4, r7
   1f04c:	cmp	r7, r0
   1f050:	bcc	1f0f8 <__assert_fail@plt+0xd6c8>
   1f054:	tst	r8, #1
   1f058:	beq	1f0f8 <__assert_fail@plt+0xd6c8>
   1f05c:	cmp	r9, #10
   1f060:	bcc	1f0f8 <__assert_fail@plt+0xd6c8>
   1f064:	subs	r0, r4, r1
   1f068:	beq	1f0ac <__assert_fail@plt+0xd67c>
   1f06c:	sub	r7, r1, r4
   1f070:	mov	r0, r5
   1f074:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f078:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1f07c:	cmp	r0, #0
   1f080:	beq	1f090 <__assert_fail@plt+0xd660>
   1f084:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1f088:	cmp	r0, #0
   1f08c:	beq	1f0ac <__assert_fail@plt+0xd67c>
   1f090:	strb	sl, [fp, #-132]	; 0xffffff7c
   1f094:	adds	r7, r7, #1
   1f098:	ldr	r0, [fp, #-128]	; 0xffffff80
   1f09c:	ldr	r1, [fp, #-124]	; 0xffffff84
   1f0a0:	add	r0, r0, r1
   1f0a4:	str	r0, [fp, #-128]	; 0xffffff80
   1f0a8:	bne	1f070 <__assert_fail@plt+0xd640>
   1f0ac:	mov	r0, r5
   1f0b0:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f0b4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1f0b8:	cmp	r0, #0
   1f0bc:	beq	1f0f4 <__assert_fail@plt+0xd6c4>
   1f0c0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1f0c4:	mov	r1, r4
   1f0c8:	cmp	r0, #0
   1f0cc:	bne	1f0f8 <__assert_fail@plt+0xd6c8>
   1f0d0:	ldr	r1, [sp, #16]
   1f0d4:	mov	r0, r6
   1f0d8:	add	r2, sp, #80	; 0x50
   1f0dc:	bl	1f3b8 <__assert_fail@plt+0xd988>
   1f0e0:	mov	r8, #0
   1f0e4:	cmp	r0, #0
   1f0e8:	mov	r1, r4
   1f0ec:	beq	1f0f8 <__assert_fail@plt+0xd6c8>
   1f0f0:	b	1f3a4 <__assert_fail@plt+0xd974>
   1f0f4:	mov	r1, r4
   1f0f8:	ldrb	r0, [sp, #160]	; 0xa0
   1f0fc:	add	r7, r4, #1
   1f100:	str	r1, [sp, #20]
   1f104:	cmp	r0, #0
   1f108:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   1f10c:	cmpne	r0, #0
   1f110:	bne	1f13c <__assert_fail@plt+0xd70c>
   1f114:	ldr	r2, [sp, #156]	; 0x9c
   1f118:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1f11c:	cmp	r2, r0
   1f120:	bne	1f2f0 <__assert_fail@plt+0xd8c0>
   1f124:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1f128:	ldr	r0, [sp, #152]	; 0x98
   1f12c:	bl	11700 <memcmp@plt>
   1f130:	cmp	r0, #0
   1f134:	bne	1f2f0 <__assert_fail@plt+0xd8c0>
   1f138:	b	1f14c <__assert_fail@plt+0xd71c>
   1f13c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f140:	ldr	r1, [sp, #164]	; 0xa4
   1f144:	cmp	r1, r0
   1f148:	bne	1f2f0 <__assert_fail@plt+0xd8c0>
   1f14c:	add	r2, sp, #136	; 0x88
   1f150:	mov	r1, #48	; 0x30
   1f154:	add	r3, sp, #80	; 0x50
   1f158:	str	r9, [sp]
   1f15c:	str	r8, [sp, #4]
   1f160:	mov	r0, r2
   1f164:	add	r2, r2, #32
   1f168:	vld1.64	{d16-d17}, [r0], r1
   1f16c:	ldr	r1, [sp, #8]
   1f170:	vld1.64	{d20-d21}, [r2]
   1f174:	vld1.64	{d18-d19}, [r1]
   1f178:	add	r1, r3, #16
   1f17c:	vldr	d22, [r0]
   1f180:	add	r0, r3, #32
   1f184:	vst1.64	{d20-d21}, [r0]
   1f188:	mov	r0, r3
   1f18c:	vst1.64	{d18-d19}, [r1]
   1f190:	mov	r1, #12
   1f194:	vst1.64	{d16-d17}, [r0], r1
   1f198:	strb	sl, [r0]
   1f19c:	ldr	r0, [sp, #16]
   1f1a0:	vstr	d22, [sp, #128]	; 0x80
   1f1a4:	ldr	r1, [sp, #100]	; 0x64
   1f1a8:	str	r0, [sp, #40]	; 0x28
   1f1ac:	ldr	r0, [sp, #96]	; 0x60
   1f1b0:	strb	sl, [sp, #24]
   1f1b4:	add	r0, r0, r1
   1f1b8:	str	r0, [sp, #96]	; 0x60
   1f1bc:	ldr	r0, [sp, #12]
   1f1c0:	str	sl, [r0]
   1f1c4:	str	sl, [r0, #4]
   1f1c8:	add	r0, sp, #24
   1f1cc:	strb	sl, [sp, #36]	; 0x24
   1f1d0:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f1d4:	ldrb	r0, [sp, #48]	; 0x30
   1f1d8:	cmp	r0, #0
   1f1dc:	beq	1f1ec <__assert_fail@plt+0xd7bc>
   1f1e0:	ldr	r0, [sp, #52]	; 0x34
   1f1e4:	cmp	r0, #0
   1f1e8:	beq	1f3b4 <__assert_fail@plt+0xd984>
   1f1ec:	strb	sl, [sp, #36]	; 0x24
   1f1f0:	ldr	r0, [sp, #40]	; 0x28
   1f1f4:	ldr	r1, [sp, #44]	; 0x2c
   1f1f8:	add	r0, r0, r1
   1f1fc:	str	r0, [sp, #40]	; 0x28
   1f200:	add	r0, sp, #24
   1f204:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f208:	ldrb	r0, [sp, #48]	; 0x30
   1f20c:	cmp	r0, #0
   1f210:	beq	1f220 <__assert_fail@plt+0xd7f0>
   1f214:	ldr	r0, [sp, #52]	; 0x34
   1f218:	cmp	r0, #0
   1f21c:	beq	1f374 <__assert_fail@plt+0xd944>
   1f220:	add	r7, r4, #2
   1f224:	add	r0, sp, #80	; 0x50
   1f228:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f22c:	ldr	r0, [sp, #108]	; 0x6c
   1f230:	ldrb	r1, [sp, #104]	; 0x68
   1f234:	cmp	r0, #0
   1f238:	bne	1f244 <__assert_fail@plt+0xd814>
   1f23c:	cmp	r1, #0
   1f240:	bne	1f384 <__assert_fail@plt+0xd954>
   1f244:	cmp	r1, #0
   1f248:	ldrbne	r1, [sp, #48]	; 0x30
   1f24c:	cmpne	r1, #0
   1f250:	bne	1f28c <__assert_fail@plt+0xd85c>
   1f254:	ldr	r4, [sp, #100]	; 0x64
   1f258:	ldr	r0, [sp, #44]	; 0x2c
   1f25c:	cmp	r4, r0
   1f260:	bne	1f2e8 <__assert_fail@plt+0xd8b8>
   1f264:	ldr	r8, [sp, #40]	; 0x28
   1f268:	ldr	r9, [sp, #96]	; 0x60
   1f26c:	mov	r2, r4
   1f270:	mov	r0, r9
   1f274:	mov	r1, r8
   1f278:	bl	11700 <memcmp@plt>
   1f27c:	cmp	r0, #0
   1f280:	mov	r0, r4
   1f284:	beq	1f2a8 <__assert_fail@plt+0xd878>
   1f288:	b	1f2e8 <__assert_fail@plt+0xd8b8>
   1f28c:	ldr	r1, [sp, #52]	; 0x34
   1f290:	cmp	r0, r1
   1f294:	bne	1f2e8 <__assert_fail@plt+0xd8b8>
   1f298:	ldr	r8, [sp, #40]	; 0x28
   1f29c:	ldr	r4, [sp, #44]	; 0x2c
   1f2a0:	ldr	r9, [sp, #96]	; 0x60
   1f2a4:	ldr	r0, [sp, #100]	; 0x64
   1f2a8:	add	r0, r9, r0
   1f2ac:	strb	sl, [sp, #92]	; 0x5c
   1f2b0:	strb	sl, [sp, #36]	; 0x24
   1f2b4:	str	r0, [sp, #96]	; 0x60
   1f2b8:	add	r0, r8, r4
   1f2bc:	str	r0, [sp, #40]	; 0x28
   1f2c0:	add	r0, sp, #24
   1f2c4:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f2c8:	ldrb	r0, [sp, #48]	; 0x30
   1f2cc:	add	r7, r7, #1
   1f2d0:	cmp	r0, #0
   1f2d4:	beq	1f224 <__assert_fail@plt+0xd7f4>
   1f2d8:	ldr	r0, [sp, #52]	; 0x34
   1f2dc:	cmp	r0, #0
   1f2e0:	bne	1f224 <__assert_fail@plt+0xd7f4>
   1f2e4:	b	1f374 <__assert_fail@plt+0xd944>
   1f2e8:	ldr	r8, [sp, #4]
   1f2ec:	ldr	r9, [sp]
   1f2f0:	mov	r4, #0
   1f2f4:	add	r9, r9, #1
   1f2f8:	strb	r4, [sp, #148]	; 0x94
   1f2fc:	ldr	r0, [sp, #152]	; 0x98
   1f300:	ldr	r1, [sp, #156]	; 0x9c
   1f304:	add	r0, r0, r1
   1f308:	str	r0, [sp, #152]	; 0x98
   1f30c:	add	r0, sp, #136	; 0x88
   1f310:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f314:	ldrb	r0, [sp, #160]	; 0xa0
   1f318:	ldr	r1, [sp, #20]
   1f31c:	cmp	r0, #0
   1f320:	beq	1f044 <__assert_fail@plt+0xd614>
   1f324:	ldr	r0, [sp, #164]	; 0xa4
   1f328:	cmp	r0, #0
   1f32c:	bne	1f044 <__assert_fail@plt+0xd614>
   1f330:	b	1f338 <__assert_fail@plt+0xd908>
   1f334:	mov	r4, r6
   1f338:	mov	r0, r4
   1f33c:	sub	sp, fp, #28
   1f340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f344:	mov	r4, #0
   1f348:	mov	r0, r4
   1f34c:	sub	sp, fp, #28
   1f350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f354:	mov	r4, r6
   1f358:	mov	r0, r4
   1f35c:	sub	sp, fp, #28
   1f360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f364:	mov	r4, #0
   1f368:	mov	r0, r4
   1f36c:	sub	sp, fp, #28
   1f370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f374:	ldr	r4, [sp, #152]	; 0x98
   1f378:	mov	r0, r4
   1f37c:	sub	sp, fp, #28
   1f380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f384:	mov	r4, #0
   1f388:	mov	r0, r4
   1f38c:	sub	sp, fp, #28
   1f390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f394:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1f398:	mov	r0, r4
   1f39c:	sub	sp, fp, #28
   1f3a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3a4:	ldr	r4, [sp, #80]	; 0x50
   1f3a8:	mov	r0, r4
   1f3ac:	sub	sp, fp, #28
   1f3b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3b4:	bl	11a24 <abort@plt>
   1f3b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3bc:	add	fp, sp, #28
   1f3c0:	sub	sp, sp, #132	; 0x84
   1f3c4:	mov	r7, r0
   1f3c8:	mov	r0, r1
   1f3cc:	mov	r6, r2
   1f3d0:	mov	r4, r1
   1f3d4:	bl	203bc <__assert_fail@plt+0xe98c>
   1f3d8:	mov	sl, r0
   1f3dc:	movw	r0, #47662	; 0xba2e
   1f3e0:	mov	r5, #0
   1f3e4:	movt	r0, #744	; 0x2e8
   1f3e8:	cmp	sl, r0
   1f3ec:	bhi	1f420 <__assert_fail@plt+0xd9f0>
   1f3f0:	mov	r0, #44	; 0x2c
   1f3f4:	mul	r0, sl, r0
   1f3f8:	cmp	r0, #4016	; 0xfb0
   1f3fc:	bhi	1f42c <__assert_fail@plt+0xd9fc>
   1f400:	add	r0, r0, #22
   1f404:	bic	r0, r0, #7
   1f408:	sub	r0, sp, r0
   1f40c:	add	r1, r0, #15
   1f410:	bic	r9, r1, #15
   1f414:	mov	sp, r0
   1f418:	cmp	r9, #0
   1f41c:	bne	1f43c <__assert_fail@plt+0xda0c>
   1f420:	mov	r0, r5
   1f424:	sub	sp, fp, #28
   1f428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f42c:	bl	20274 <__assert_fail@plt+0xe844>
   1f430:	mov	r9, r0
   1f434:	cmp	r9, #0
   1f438:	beq	1f420 <__assert_fail@plt+0xd9f0>
   1f43c:	str	r6, [fp, #-152]	; 0xffffff68
   1f440:	mov	r6, #0
   1f444:	str	r7, [fp, #-156]	; 0xffffff64
   1f448:	str	r6, [fp, #-80]	; 0xffffffb0
   1f44c:	str	r6, [fp, #-84]	; 0xffffffac
   1f450:	strb	r6, [fp, #-88]	; 0xffffffa8
   1f454:	str	r4, [fp, #-72]	; 0xffffffb8
   1f458:	sub	r4, fp, #88	; 0x58
   1f45c:	strb	r6, [fp, #-76]	; 0xffffffb4
   1f460:	mov	r0, r4
   1f464:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f468:	add	r0, sl, sl, lsl #2
   1f46c:	add	r8, r9, r0, lsl #3
   1f470:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1f474:	cmp	r0, #0
   1f478:	beq	1f488 <__assert_fail@plt+0xda58>
   1f47c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f480:	cmp	r0, #0
   1f484:	beq	1f508 <__assert_fail@plt+0xdad8>
   1f488:	add	r7, r9, #16
   1f48c:	add	r5, r4, #32
   1f490:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f494:	cmp	r0, r5
   1f498:	bne	1f4b0 <__assert_fail@plt+0xda80>
   1f49c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f4a0:	mov	r0, r7
   1f4a4:	mov	r1, r5
   1f4a8:	bl	116dc <memcpy@plt>
   1f4ac:	mov	r0, r7
   1f4b0:	str	r0, [r7, #-16]
   1f4b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1f4b8:	str	r0, [r7, #-12]
   1f4bc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1f4c0:	strb	r0, [r7, #-8]
   1f4c4:	cmp	r0, #0
   1f4c8:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   1f4cc:	strne	r0, [r7, #-4]
   1f4d0:	strb	r6, [fp, #-76]	; 0xffffffb4
   1f4d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f4d8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1f4dc:	add	r0, r0, r1
   1f4e0:	str	r0, [fp, #-72]	; 0xffffffb8
   1f4e4:	mov	r0, r4
   1f4e8:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f4ec:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   1f4f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f4f4:	add	r7, r7, #40	; 0x28
   1f4f8:	cmp	r1, #0
   1f4fc:	beq	1f490 <__assert_fail@plt+0xda60>
   1f500:	cmp	r0, #0
   1f504:	bne	1f490 <__assert_fail@plt+0xda60>
   1f508:	mov	r0, #1
   1f50c:	cmp	sl, #3
   1f510:	str	sl, [fp, #-148]	; 0xffffff6c
   1f514:	str	r0, [r8, #4]
   1f518:	bcc	1f614 <__assert_fail@plt+0xdbe4>
   1f51c:	mov	sl, #2
   1f520:	mov	r7, #0
   1f524:	add	r0, sl, sl, lsl #2
   1f528:	add	r0, r9, r0, lsl #3
   1f52c:	ldrb	r1, [r0, #-32]	; 0xffffffe0
   1f530:	sub	r6, r0, #40	; 0x28
   1f534:	sub	r4, r0, #36	; 0x24
   1f538:	cmp	r1, #0
   1f53c:	beq	1f5a8 <__assert_fail@plt+0xdb78>
   1f540:	sub	r5, r0, #28
   1f544:	b	1f550 <__assert_fail@plt+0xdb20>
   1f548:	ldr	r0, [r8, r7, lsl #2]
   1f54c:	sub	r7, r7, r0
   1f550:	add	r0, r7, r7, lsl #2
   1f554:	add	r1, r9, r0, lsl #3
   1f558:	ldrb	r2, [r1, #8]
   1f55c:	cmp	r2, #0
   1f560:	beq	1f578 <__assert_fail@plt+0xdb48>
   1f564:	ldr	r0, [r1, #12]
   1f568:	ldr	r1, [r5]
   1f56c:	cmp	r1, r0
   1f570:	bne	1f59c <__assert_fail@plt+0xdb6c>
   1f574:	b	1f5f8 <__assert_fail@plt+0xdbc8>
   1f578:	ldr	r1, [r1, #4]
   1f57c:	ldr	r2, [r4]
   1f580:	cmp	r2, r1
   1f584:	bne	1f59c <__assert_fail@plt+0xdb6c>
   1f588:	ldr	r1, [r9, r0, lsl #3]
   1f58c:	ldr	r0, [r6]
   1f590:	bl	11700 <memcmp@plt>
   1f594:	cmp	r0, #0
   1f598:	beq	1f5f8 <__assert_fail@plt+0xdbc8>
   1f59c:	cmp	r7, #0
   1f5a0:	bne	1f548 <__assert_fail@plt+0xdb18>
   1f5a4:	b	1f5ec <__assert_fail@plt+0xdbbc>
   1f5a8:	ldr	r4, [r4]
   1f5ac:	b	1f5b8 <__assert_fail@plt+0xdb88>
   1f5b0:	ldr	r0, [r8, r7, lsl #2]
   1f5b4:	sub	r7, r7, r0
   1f5b8:	add	r0, r7, r7, lsl #2
   1f5bc:	add	r1, r9, r0, lsl #3
   1f5c0:	ldr	r1, [r1, #4]
   1f5c4:	cmp	r4, r1
   1f5c8:	bne	1f5e4 <__assert_fail@plt+0xdbb4>
   1f5cc:	ldr	r1, [r9, r0, lsl #3]
   1f5d0:	ldr	r0, [r6]
   1f5d4:	mov	r2, r4
   1f5d8:	bl	11700 <memcmp@plt>
   1f5dc:	cmp	r0, #0
   1f5e0:	beq	1f5f8 <__assert_fail@plt+0xdbc8>
   1f5e4:	cmp	r7, #0
   1f5e8:	bne	1f5b0 <__assert_fail@plt+0xdb80>
   1f5ec:	mov	r7, #0
   1f5f0:	mov	r0, sl
   1f5f4:	b	1f600 <__assert_fail@plt+0xdbd0>
   1f5f8:	add	r7, r7, #1
   1f5fc:	sub	r0, sl, r7
   1f600:	str	r0, [r8, sl, lsl #2]
   1f604:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1f608:	add	sl, sl, #1
   1f60c:	cmp	sl, r0
   1f610:	bne	1f524 <__assert_fail@plt+0xdaf4>
   1f614:	ldr	r0, [fp, #-152]	; 0xffffff68
   1f618:	mov	r6, #0
   1f61c:	str	r6, [r0]
   1f620:	ldr	r0, [fp, #-156]	; 0xffffff64
   1f624:	str	r6, [fp, #-80]	; 0xffffffb0
   1f628:	str	r6, [fp, #-84]	; 0xffffffac
   1f62c:	strb	r6, [fp, #-88]	; 0xffffffa8
   1f630:	str	r6, [fp, #-136]	; 0xffffff78
   1f634:	str	r6, [fp, #-140]	; 0xffffff74
   1f638:	str	r0, [fp, #-72]	; 0xffffffb8
   1f63c:	str	r0, [fp, #-128]	; 0xffffff80
   1f640:	sub	r0, fp, #144	; 0x90
   1f644:	strb	r6, [fp, #-144]	; 0xffffff70
   1f648:	strb	r6, [fp, #-76]	; 0xffffffb4
   1f64c:	strb	r6, [fp, #-132]	; 0xffffff7c
   1f650:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f654:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1f658:	ldrb	r1, [fp, #-120]	; 0xffffff88
   1f65c:	cmp	r0, #0
   1f660:	bne	1f66c <__assert_fail@plt+0xdc3c>
   1f664:	cmp	r1, #0
   1f668:	bne	1f7d8 <__assert_fail@plt+0xdda8>
   1f66c:	clz	r1, r1
   1f670:	sub	r4, fp, #88	; 0x58
   1f674:	mov	sl, #0
   1f678:	lsr	r1, r1, #5
   1f67c:	add	r2, sl, sl, lsl #2
   1f680:	tst	r1, #1
   1f684:	add	r3, r9, r2, lsl #3
   1f688:	bne	1f6b0 <__assert_fail@plt+0xdc80>
   1f68c:	ldrb	r1, [r3, #8]
   1f690:	cmp	r1, #0
   1f694:	beq	1f6b0 <__assert_fail@plt+0xdc80>
   1f698:	ldr	r1, [r3, #12]
   1f69c:	cmp	r1, r0
   1f6a0:	bne	1f6dc <__assert_fail@plt+0xdcac>
   1f6a4:	ldr	r7, [fp, #-128]	; 0xffffff80
   1f6a8:	ldr	r5, [fp, #-124]	; 0xffffff84
   1f6ac:	b	1f734 <__assert_fail@plt+0xdd04>
   1f6b0:	ldr	r5, [r3, #4]
   1f6b4:	ldr	r0, [fp, #-124]	; 0xffffff84
   1f6b8:	cmp	r5, r0
   1f6bc:	bne	1f6dc <__assert_fail@plt+0xdcac>
   1f6c0:	ldr	r7, [fp, #-128]	; 0xffffff80
   1f6c4:	ldr	r0, [r9, r2, lsl #3]
   1f6c8:	mov	r2, r5
   1f6cc:	mov	r1, r7
   1f6d0:	bl	11700 <memcmp@plt>
   1f6d4:	cmp	r0, #0
   1f6d8:	beq	1f734 <__assert_fail@plt+0xdd04>
   1f6dc:	cmp	sl, #0
   1f6e0:	beq	1f754 <__assert_fail@plt+0xdd24>
   1f6e4:	ldr	r5, [r8, sl, lsl #2]
   1f6e8:	sub	sl, sl, r5
   1f6ec:	cmp	r5, #0
   1f6f0:	beq	1f7a0 <__assert_fail@plt+0xdd70>
   1f6f4:	mov	r0, r4
   1f6f8:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f6fc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1f700:	cmp	r0, #0
   1f704:	beq	1f714 <__assert_fail@plt+0xdce4>
   1f708:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f70c:	cmp	r0, #0
   1f710:	beq	1f7f0 <__assert_fail@plt+0xddc0>
   1f714:	strb	r6, [fp, #-76]	; 0xffffffb4
   1f718:	subs	r5, r5, #1
   1f71c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f720:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1f724:	add	r0, r0, r1
   1f728:	str	r0, [fp, #-72]	; 0xffffffb8
   1f72c:	bne	1f6f4 <__assert_fail@plt+0xdcc4>
   1f730:	b	1f7a0 <__assert_fail@plt+0xdd70>
   1f734:	add	r0, r7, r5
   1f738:	strb	r6, [fp, #-132]	; 0xffffff7c
   1f73c:	add	sl, sl, #1
   1f740:	str	r0, [fp, #-128]	; 0xffffff80
   1f744:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1f748:	cmp	sl, r0
   1f74c:	bne	1f7a0 <__assert_fail@plt+0xdd70>
   1f750:	b	1f7cc <__assert_fail@plt+0xdd9c>
   1f754:	mov	r0, r4
   1f758:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f75c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1f760:	cmp	r0, #0
   1f764:	beq	1f774 <__assert_fail@plt+0xdd44>
   1f768:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f76c:	cmp	r0, #0
   1f770:	beq	1f7f0 <__assert_fail@plt+0xddc0>
   1f774:	mov	sl, #0
   1f778:	strb	sl, [fp, #-76]	; 0xffffffb4
   1f77c:	strb	sl, [fp, #-132]	; 0xffffff7c
   1f780:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f784:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1f788:	add	r0, r0, r1
   1f78c:	ldr	r1, [fp, #-124]	; 0xffffff84
   1f790:	str	r0, [fp, #-72]	; 0xffffffb8
   1f794:	ldr	r0, [fp, #-128]	; 0xffffff80
   1f798:	add	r0, r0, r1
   1f79c:	str	r0, [fp, #-128]	; 0xffffff80
   1f7a0:	sub	r0, fp, #144	; 0x90
   1f7a4:	bl	1f97c <__assert_fail@plt+0xdf4c>
   1f7a8:	ldrb	r2, [fp, #-120]	; 0xffffff88
   1f7ac:	clz	r0, r2
   1f7b0:	lsr	r1, r0, #5
   1f7b4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1f7b8:	cmp	r0, #0
   1f7bc:	bne	1f67c <__assert_fail@plt+0xdc4c>
   1f7c0:	cmp	r2, #0
   1f7c4:	beq	1f67c <__assert_fail@plt+0xdc4c>
   1f7c8:	b	1f7d8 <__assert_fail@plt+0xdda8>
   1f7cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f7d0:	ldr	r1, [fp, #-152]	; 0xffffff68
   1f7d4:	str	r0, [r1]
   1f7d8:	mov	r0, r9
   1f7dc:	bl	202e4 <__assert_fail@plt+0xe8b4>
   1f7e0:	mov	r5, #1
   1f7e4:	mov	r0, r5
   1f7e8:	sub	sp, fp, #28
   1f7ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7f0:	bl	11a24 <abort@plt>
   1f7f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f7f8:	add	fp, sp, #24
   1f7fc:	mov	r4, #0
   1f800:	cmn	r2, #-536870911	; 0xe0000001
   1f804:	bhi	1f958 <__assert_fail@plt+0xdf28>
   1f808:	mov	r7, r0
   1f80c:	lsl	r0, r2, #2
   1f810:	mov	r8, r3
   1f814:	mov	r5, r2
   1f818:	mov	r6, r1
   1f81c:	cmp	r0, #4016	; 0xfb0
   1f820:	bhi	1f94c <__assert_fail@plt+0xdf1c>
   1f824:	add	r0, r0, #22
   1f828:	bic	r0, r0, #7
   1f82c:	sub	r1, sp, r0
   1f830:	add	r0, r1, #15
   1f834:	bic	r0, r0, #15
   1f838:	mov	sp, r1
   1f83c:	cmp	r0, #0
   1f840:	beq	1f958 <__assert_fail@plt+0xdf28>
   1f844:	mov	r1, #1
   1f848:	cmp	r5, #3
   1f84c:	str	r1, [r0, #4]
   1f850:	bcc	1f8c4 <__assert_fail@plt+0xde94>
   1f854:	mov	r1, #2
   1f858:	mov	r2, #0
   1f85c:	add	r3, r6, r1
   1f860:	ldrb	r4, [r6, r2]
   1f864:	ldrb	r3, [r3, #-1]
   1f868:	cmp	r3, r4
   1f86c:	bne	1f888 <__assert_fail@plt+0xde58>
   1f870:	b	1f8ac <__assert_fail@plt+0xde7c>
   1f874:	ldr	r4, [r0, r2, lsl #2]
   1f878:	sub	r2, r2, r4
   1f87c:	ldrb	r4, [r6, r2]
   1f880:	cmp	r3, r4
   1f884:	beq	1f8ac <__assert_fail@plt+0xde7c>
   1f888:	cmp	r2, #0
   1f88c:	bne	1f874 <__assert_fail@plt+0xde44>
   1f890:	mov	r2, #0
   1f894:	mov	r3, r1
   1f898:	str	r3, [r0, r1, lsl #2]
   1f89c:	add	r1, r1, #1
   1f8a0:	cmp	r1, r5
   1f8a4:	bne	1f85c <__assert_fail@plt+0xde2c>
   1f8a8:	b	1f8c4 <__assert_fail@plt+0xde94>
   1f8ac:	add	r2, r2, #1
   1f8b0:	sub	r3, r1, r2
   1f8b4:	str	r3, [r0, r1, lsl #2]
   1f8b8:	add	r1, r1, #1
   1f8bc:	cmp	r1, r5
   1f8c0:	bne	1f85c <__assert_fail@plt+0xde2c>
   1f8c4:	mov	r1, #0
   1f8c8:	str	r1, [r8]
   1f8cc:	ldrb	r3, [r7]
   1f8d0:	cmp	r3, #0
   1f8d4:	beq	1f968 <__assert_fail@plt+0xdf38>
   1f8d8:	mov	r2, r7
   1f8dc:	ldrb	r4, [r6, r1]
   1f8e0:	uxtb	r3, r3
   1f8e4:	cmp	r4, r3
   1f8e8:	bne	1f90c <__assert_fail@plt+0xdedc>
   1f8ec:	add	r1, r1, #1
   1f8f0:	cmp	r1, r5
   1f8f4:	beq	1f964 <__assert_fail@plt+0xdf34>
   1f8f8:	add	r7, r7, #1
   1f8fc:	ldrb	r3, [r7]
   1f900:	cmp	r3, #0
   1f904:	bne	1f8dc <__assert_fail@plt+0xdeac>
   1f908:	b	1f968 <__assert_fail@plt+0xdf38>
   1f90c:	cmp	r1, #0
   1f910:	beq	1f930 <__assert_fail@plt+0xdf00>
   1f914:	ldr	r3, [r0, r1, lsl #2]
   1f918:	sub	r1, r1, r3
   1f91c:	add	r2, r2, r3
   1f920:	ldrb	r3, [r7]
   1f924:	cmp	r3, #0
   1f928:	bne	1f8dc <__assert_fail@plt+0xdeac>
   1f92c:	b	1f968 <__assert_fail@plt+0xdf38>
   1f930:	add	r7, r7, #1
   1f934:	add	r2, r2, #1
   1f938:	mov	r1, #0
   1f93c:	ldrb	r3, [r7]
   1f940:	cmp	r3, #0
   1f944:	bne	1f8dc <__assert_fail@plt+0xdeac>
   1f948:	b	1f968 <__assert_fail@plt+0xdf38>
   1f94c:	bl	20274 <__assert_fail@plt+0xe844>
   1f950:	cmp	r0, #0
   1f954:	bne	1f844 <__assert_fail@plt+0xde14>
   1f958:	mov	r0, r4
   1f95c:	sub	sp, fp, #24
   1f960:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f964:	str	r2, [r8]
   1f968:	bl	202e4 <__assert_fail@plt+0xe8b4>
   1f96c:	mov	r4, #1
   1f970:	mov	r0, r4
   1f974:	sub	sp, fp, #24
   1f978:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f97c:	push	{r4, r5, r6, r7, fp, lr}
   1f980:	add	fp, sp, #16
   1f984:	mov	r4, r0
   1f988:	ldrb	r0, [r0, #12]
   1f98c:	cmp	r0, #0
   1f990:	popne	{r4, r5, r6, r7, fp, pc}
   1f994:	ldrb	r0, [r4]
   1f998:	ldr	r6, [r4, #16]
   1f99c:	cmp	r0, #0
   1f9a0:	beq	1fa08 <__assert_fail@plt+0xdfd8>
   1f9a4:	add	r5, r4, #4
   1f9a8:	bl	117d8 <__ctype_get_mb_cur_max@plt>
   1f9ac:	mov	r1, r0
   1f9b0:	mov	r0, r6
   1f9b4:	bl	201e0 <__assert_fail@plt+0xe7b0>
   1f9b8:	add	r7, r4, #28
   1f9bc:	mov	r2, r0
   1f9c0:	mov	r1, r6
   1f9c4:	mov	r3, r5
   1f9c8:	mov	r0, r7
   1f9cc:	bl	1ede0 <__assert_fail@plt+0xd3b0>
   1f9d0:	cmn	r0, #2
   1f9d4:	str	r0, [r4, #20]
   1f9d8:	beq	1fa94 <__assert_fail@plt+0xe064>
   1f9dc:	cmp	r0, #0
   1f9e0:	beq	1fa48 <__assert_fail@plt+0xe018>
   1f9e4:	cmn	r0, #1
   1f9e8:	bne	1fa6c <__assert_fail@plt+0xe03c>
   1f9ec:	mov	r0, #0
   1f9f0:	strb	r0, [r4, #24]
   1f9f4:	mov	r0, #1
   1f9f8:	str	r0, [r4, #20]
   1f9fc:	mov	r0, #1
   1fa00:	strb	r0, [r4, #12]
   1fa04:	pop	{r4, r5, r6, r7, fp, pc}
   1fa08:	ldrb	r0, [r6]
   1fa0c:	movw	r2, #17160	; 0x4308
   1fa10:	movt	r2, #2
   1fa14:	ubfx	r1, r0, #5, #3
   1fa18:	ldr	r1, [r2, r1, lsl #2]
   1fa1c:	and	r2, r0, #31
   1fa20:	mov	r0, #1
   1fa24:	tst	r1, r0, lsl r2
   1fa28:	beq	1fab4 <__assert_fail@plt+0xe084>
   1fa2c:	str	r0, [r4, #20]
   1fa30:	ldrb	r1, [r6]
   1fa34:	strb	r0, [r4, #24]
   1fa38:	str	r1, [r4, #28]
   1fa3c:	mov	r0, #1
   1fa40:	strb	r0, [r4, #12]
   1fa44:	pop	{r4, r5, r6, r7, fp, pc}
   1fa48:	mov	r0, #1
   1fa4c:	str	r0, [r4, #20]
   1fa50:	ldr	r0, [r4, #16]
   1fa54:	ldrb	r0, [r0]
   1fa58:	cmp	r0, #0
   1fa5c:	bne	1fad4 <__assert_fail@plt+0xe0a4>
   1fa60:	ldr	r0, [r7]
   1fa64:	cmp	r0, #0
   1fa68:	bne	1faf4 <__assert_fail@plt+0xe0c4>
   1fa6c:	mov	r0, #1
   1fa70:	strb	r0, [r4, #24]
   1fa74:	mov	r0, r5
   1fa78:	bl	116f4 <mbsinit@plt>
   1fa7c:	cmp	r0, #0
   1fa80:	movne	r0, #0
   1fa84:	strbne	r0, [r4]
   1fa88:	mov	r0, #1
   1fa8c:	strb	r0, [r4, #12]
   1fa90:	pop	{r4, r5, r6, r7, fp, pc}
   1fa94:	ldr	r0, [r4, #16]
   1fa98:	bl	1188c <strlen@plt>
   1fa9c:	str	r0, [r4, #20]
   1faa0:	mov	r0, #0
   1faa4:	strb	r0, [r4, #24]
   1faa8:	mov	r0, #1
   1faac:	strb	r0, [r4, #12]
   1fab0:	pop	{r4, r5, r6, r7, fp, pc}
   1fab4:	add	r5, r4, #4
   1fab8:	mov	r0, r5
   1fabc:	bl	116f4 <mbsinit@plt>
   1fac0:	cmp	r0, #0
   1fac4:	beq	1fb14 <__assert_fail@plt+0xe0e4>
   1fac8:	mov	r0, #1
   1facc:	strb	r0, [r4]
   1fad0:	b	1f9a8 <__assert_fail@plt+0xdf78>
   1fad4:	movw	r0, #17047	; 0x4297
   1fad8:	movw	r1, #17088	; 0x42c0
   1fadc:	movw	r3, #17104	; 0x42d0
   1fae0:	mov	r2, #171	; 0xab
   1fae4:	movt	r0, #2
   1fae8:	movt	r1, #2
   1faec:	movt	r3, #2
   1faf0:	bl	11a30 <__assert_fail@plt>
   1faf4:	movw	r0, #17070	; 0x42ae
   1faf8:	movw	r1, #17088	; 0x42c0
   1fafc:	movw	r3, #17104	; 0x42d0
   1fb00:	mov	r2, #172	; 0xac
   1fb04:	movt	r0, #2
   1fb08:	movt	r1, #2
   1fb0c:	movt	r3, #2
   1fb10:	bl	11a30 <__assert_fail@plt>
   1fb14:	movw	r0, #16963	; 0x4243
   1fb18:	movw	r1, #17088	; 0x42c0
   1fb1c:	movw	r3, #17104	; 0x42d0
   1fb20:	mov	r2, #143	; 0x8f
   1fb24:	movt	r0, #2
   1fb28:	movt	r1, #2
   1fb2c:	movt	r3, #2
   1fb30:	bl	11a30 <__assert_fail@plt>
   1fb34:	ldr	r2, [r0, #16]
   1fb38:	add	r1, r2, r1
   1fb3c:	str	r1, [r0, #16]
   1fb40:	bx	lr
   1fb44:	push	{r4, r5, r6, sl, fp, lr}
   1fb48:	add	fp, sp, #16
   1fb4c:	mov	r5, r1
   1fb50:	ldrb	r1, [r1]
   1fb54:	mov	r4, r0
   1fb58:	strb	r1, [r0], #4
   1fb5c:	cmp	r1, #0
   1fb60:	beq	1fb70 <__assert_fail@plt+0xe140>
   1fb64:	ldmib	r5, {r1, r2}
   1fb68:	stm	r0, {r1, r2}
   1fb6c:	b	1fb7c <__assert_fail@plt+0xe14c>
   1fb70:	mov	r1, #0
   1fb74:	str	r1, [r0]
   1fb78:	str	r1, [r0, #4]
   1fb7c:	ldrb	r0, [r5, #12]
   1fb80:	strb	r0, [r4, #12]
   1fb84:	add	r0, r5, #32
   1fb88:	ldr	r1, [r5, #16]
   1fb8c:	cmp	r1, r0
   1fb90:	beq	1fb9c <__assert_fail@plt+0xe16c>
   1fb94:	mov	r6, r1
   1fb98:	b	1fbac <__assert_fail@plt+0xe17c>
   1fb9c:	ldr	r2, [r5, #20]
   1fba0:	add	r6, r4, #32
   1fba4:	mov	r0, r6
   1fba8:	bl	116dc <memcpy@plt>
   1fbac:	str	r6, [r4, #16]
   1fbb0:	ldr	r0, [r5, #20]
   1fbb4:	str	r0, [r4, #20]
   1fbb8:	ldrb	r0, [r5, #24]
   1fbbc:	strb	r0, [r4, #24]
   1fbc0:	cmp	r0, #0
   1fbc4:	ldrne	r0, [r5, #28]
   1fbc8:	strne	r0, [r4, #28]
   1fbcc:	pop	{r4, r5, r6, sl, fp, pc}
   1fbd0:	cmp	r2, #0
   1fbd4:	beq	1fc04 <__assert_fail@plt+0xe1d4>
   1fbd8:	mvn	r3, #0
   1fbdc:	udiv	r3, r3, r2
   1fbe0:	cmp	r3, r1
   1fbe4:	bcs	1fc04 <__assert_fail@plt+0xe1d4>
   1fbe8:	push	{fp, lr}
   1fbec:	mov	fp, sp
   1fbf0:	bl	118bc <__errno_location@plt>
   1fbf4:	mov	r1, #12
   1fbf8:	str	r1, [r0]
   1fbfc:	mov	r0, #0
   1fc00:	pop	{fp, pc}
   1fc04:	mul	r1, r2, r1
   1fc08:	b	1e860 <__assert_fail@plt+0xce30>
   1fc0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc10:	add	fp, sp, #28
   1fc14:	sub	sp, sp, #44	; 0x2c
   1fc18:	sub	sp, sp, #4096	; 0x1000
   1fc1c:	str	r3, [sp, #16]
   1fc20:	mov	r4, r1
   1fc24:	mov	r6, r0
   1fc28:	mov	r5, #0
   1fc2c:	str	r2, [sp, #20]
   1fc30:	mov	r0, r2
   1fc34:	mov	r1, #0
   1fc38:	mov	r2, #0
   1fc3c:	mov	r3, #0
   1fc40:	str	r5, [sp]
   1fc44:	bl	11664 <iconv@plt>
   1fc48:	cmp	r4, #0
   1fc4c:	str	r6, [sp, #8]
   1fc50:	str	r6, [sp, #36]	; 0x24
   1fc54:	str	r4, [sp, #32]
   1fc58:	str	r4, [sp, #12]
   1fc5c:	beq	1fccc <__assert_fail@plt+0xe29c>
   1fc60:	mov	r5, #0
   1fc64:	add	r4, sp, #40	; 0x28
   1fc68:	mov	r8, #4096	; 0x1000
   1fc6c:	add	sl, sp, #24
   1fc70:	add	r9, sp, #36	; 0x24
   1fc74:	add	r7, sp, #32
   1fc78:	add	r6, sp, #28
   1fc7c:	ldr	r0, [sp, #20]
   1fc80:	mov	r1, r9
   1fc84:	mov	r2, r7
   1fc88:	mov	r3, r6
   1fc8c:	str	r4, [sp, #28]
   1fc90:	str	r8, [sp, #24]
   1fc94:	str	sl, [sp]
   1fc98:	bl	11664 <iconv@plt>
   1fc9c:	cmn	r0, #1
   1fca0:	bne	1fcb4 <__assert_fail@plt+0xe284>
   1fca4:	bl	118bc <__errno_location@plt>
   1fca8:	ldr	r0, [r0]
   1fcac:	cmp	r0, #7
   1fcb0:	bne	1fdec <__assert_fail@plt+0xe3bc>
   1fcb4:	ldr	r1, [sp, #28]
   1fcb8:	sub	r0, r5, r4
   1fcbc:	add	r5, r0, r1
   1fcc0:	ldr	r0, [sp, #32]
   1fcc4:	cmp	r0, #0
   1fcc8:	bne	1fc7c <__assert_fail@plt+0xe24c>
   1fccc:	mov	r0, #4096	; 0x1000
   1fcd0:	add	r6, sp, #40	; 0x28
   1fcd4:	add	r3, sp, #28
   1fcd8:	mov	r1, #0
   1fcdc:	mov	r2, #0
   1fce0:	mov	r4, #0
   1fce4:	str	r0, [sp, #24]
   1fce8:	add	r0, sp, #24
   1fcec:	str	r6, [sp, #28]
   1fcf0:	str	r0, [sp]
   1fcf4:	ldr	r0, [sp, #20]
   1fcf8:	bl	11664 <iconv@plt>
   1fcfc:	cmn	r0, #1
   1fd00:	beq	1fdd8 <__assert_fail@plt+0xe3a8>
   1fd04:	ldr	r1, [sp, #28]
   1fd08:	sub	r0, r5, r6
   1fd0c:	add	r5, r0, r1
   1fd10:	mvn	r9, #0
   1fd14:	cmp	r4, #0
   1fd18:	bne	1feac <__assert_fail@plt+0xe47c>
   1fd1c:	ldr	r1, [fp, #8]
   1fd20:	cmp	r5, #0
   1fd24:	beq	1fe08 <__assert_fail@plt+0xe3d8>
   1fd28:	ldr	r0, [sp, #16]
   1fd2c:	ldr	r4, [r0]
   1fd30:	cmp	r4, #0
   1fd34:	beq	1fd44 <__assert_fail@plt+0xe314>
   1fd38:	ldr	r0, [r1]
   1fd3c:	cmp	r0, r5
   1fd40:	bcs	1fd58 <__assert_fail@plt+0xe328>
   1fd44:	mov	r0, r5
   1fd48:	bl	1e830 <__assert_fail@plt+0xce00>
   1fd4c:	mov	r4, r0
   1fd50:	cmp	r0, #0
   1fd54:	beq	1fe1c <__assert_fail@plt+0xe3ec>
   1fd58:	mov	r0, #0
   1fd5c:	mov	r1, #0
   1fd60:	mov	r2, #0
   1fd64:	mov	r3, #0
   1fd68:	str	r0, [sp]
   1fd6c:	ldr	r0, [sp, #20]
   1fd70:	bl	11664 <iconv@plt>
   1fd74:	ldr	r0, [sp, #8]
   1fd78:	mov	sl, r4
   1fd7c:	str	r4, [sp, #32]
   1fd80:	str	r5, [sp, #28]
   1fd84:	str	r0, [sp, #40]	; 0x28
   1fd88:	ldr	r0, [sp, #12]
   1fd8c:	cmp	r0, #0
   1fd90:	str	r0, [sp, #36]	; 0x24
   1fd94:	beq	1fe44 <__assert_fail@plt+0xe414>
   1fd98:	add	r8, sp, #28
   1fd9c:	add	r7, sp, #40	; 0x28
   1fda0:	add	r6, sp, #36	; 0x24
   1fda4:	add	r4, sp, #32
   1fda8:	ldr	r0, [sp, #20]
   1fdac:	mov	r1, r7
   1fdb0:	mov	r2, r6
   1fdb4:	mov	r3, r4
   1fdb8:	str	r8, [sp]
   1fdbc:	bl	11664 <iconv@plt>
   1fdc0:	cmn	r0, #1
   1fdc4:	beq	1fe34 <__assert_fail@plt+0xe404>
   1fdc8:	ldr	r0, [sp, #36]	; 0x24
   1fdcc:	cmp	r0, #0
   1fdd0:	bne	1fda8 <__assert_fail@plt+0xe378>
   1fdd4:	b	1fe44 <__assert_fail@plt+0xe414>
   1fdd8:	mov	r4, #1
   1fddc:	mvn	r9, #0
   1fde0:	cmp	r4, #0
   1fde4:	bne	1feac <__assert_fail@plt+0xe47c>
   1fde8:	b	1fd1c <__assert_fail@plt+0xe2ec>
   1fdec:	cmp	r0, #22
   1fdf0:	beq	1fccc <__assert_fail@plt+0xe29c>
   1fdf4:	mov	r4, #1
   1fdf8:	mvn	r9, #0
   1fdfc:	cmp	r4, #0
   1fe00:	bne	1feac <__assert_fail@plt+0xe47c>
   1fe04:	b	1fd1c <__assert_fail@plt+0xe2ec>
   1fe08:	mov	r9, #0
   1fe0c:	str	r9, [r1]
   1fe10:	mov	r0, r9
   1fe14:	sub	sp, fp, #28
   1fe18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe1c:	bl	118bc <__errno_location@plt>
   1fe20:	mov	r1, #12
   1fe24:	str	r1, [r0]
   1fe28:	mov	r0, r9
   1fe2c:	sub	sp, fp, #28
   1fe30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe34:	bl	118bc <__errno_location@plt>
   1fe38:	ldr	r0, [r0]
   1fe3c:	cmp	r0, #22
   1fe40:	bne	1fe94 <__assert_fail@plt+0xe464>
   1fe44:	add	r0, sp, #28
   1fe48:	add	r3, sp, #32
   1fe4c:	mov	r1, #0
   1fe50:	mov	r2, #0
   1fe54:	str	r0, [sp]
   1fe58:	ldr	r0, [sp, #20]
   1fe5c:	bl	11664 <iconv@plt>
   1fe60:	cmn	r0, #1
   1fe64:	beq	1fe94 <__assert_fail@plt+0xe464>
   1fe68:	ldr	r0, [sp, #28]
   1fe6c:	cmp	r0, #0
   1fe70:	bne	1feb8 <__assert_fail@plt+0xe488>
   1fe74:	ldr	r0, [sp, #16]
   1fe78:	mov	r9, #0
   1fe7c:	str	sl, [r0]
   1fe80:	ldr	r0, [fp, #8]
   1fe84:	str	r5, [r0]
   1fe88:	mov	r0, r9
   1fe8c:	sub	sp, fp, #28
   1fe90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe94:	ldr	r0, [sp, #16]
   1fe98:	ldr	r0, [r0]
   1fe9c:	cmp	sl, r0
   1fea0:	beq	1feac <__assert_fail@plt+0xe47c>
   1fea4:	mov	r0, sl
   1fea8:	bl	1ae2c <__assert_fail@plt+0x93fc>
   1feac:	mov	r0, r9
   1feb0:	sub	sp, fp, #28
   1feb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1feb8:	bl	11a24 <abort@plt>
   1febc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fec0:	add	fp, sp, #28
   1fec4:	sub	sp, sp, #20
   1fec8:	mov	r8, r1
   1fecc:	str	r0, [sp, #16]
   1fed0:	bl	1188c <strlen@plt>
   1fed4:	mov	r5, r0
   1fed8:	cmp	r0, #4096	; 0x1000
   1fedc:	str	r0, [sp, #12]
   1fee0:	lslcc	r5, r0, #4
   1fee4:	add	r4, r5, #1
   1fee8:	mov	r0, r4
   1feec:	bl	1e830 <__assert_fail@plt+0xce00>
   1fef0:	cmp	r0, #0
   1fef4:	beq	1ffac <__assert_fail@plt+0xe57c>
   1fef8:	mov	r6, r0
   1fefc:	mov	r0, #0
   1ff00:	mov	r1, #0
   1ff04:	mov	r2, #0
   1ff08:	mov	r3, #0
   1ff0c:	str	r0, [sp]
   1ff10:	mov	r0, r8
   1ff14:	bl	11664 <iconv@plt>
   1ff18:	stmib	sp, {r5, r6}
   1ff1c:	add	r5, sp, #4
   1ff20:	add	r1, sp, #16
   1ff24:	add	r2, sp, #12
   1ff28:	add	r3, sp, #8
   1ff2c:	mov	r0, r8
   1ff30:	str	r5, [sp]
   1ff34:	bl	11664 <iconv@plt>
   1ff38:	cmn	r0, #1
   1ff3c:	beq	1ffc4 <__assert_fail@plt+0xe594>
   1ff40:	mov	r7, r6
   1ff44:	add	r3, sp, #8
   1ff48:	mov	r0, r8
   1ff4c:	mov	r1, #0
   1ff50:	mov	r2, #0
   1ff54:	str	r5, [sp]
   1ff58:	bl	11664 <iconv@plt>
   1ff5c:	cmn	r0, #1
   1ff60:	beq	20044 <__assert_fail@plt+0xe614>
   1ff64:	mov	r5, r7
   1ff68:	ldr	r0, [sp, #8]
   1ff6c:	add	r1, r0, #1
   1ff70:	str	r1, [sp, #8]
   1ff74:	mov	r1, #0
   1ff78:	strb	r1, [r0]
   1ff7c:	ldr	r0, [sp, #8]
   1ff80:	sub	r1, r0, r5
   1ff84:	cmp	r1, r4
   1ff88:	movcs	r0, r5
   1ff8c:	subcs	sp, fp, #28
   1ff90:	popcs	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff94:	mov	r0, r5
   1ff98:	bl	1e860 <__assert_fail@plt+0xce30>
   1ff9c:	cmp	r0, #0
   1ffa0:	moveq	r0, r5
   1ffa4:	sub	sp, fp, #28
   1ffa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffac:	bl	118bc <__errno_location@plt>
   1ffb0:	mov	r1, #12
   1ffb4:	str	r1, [r0]
   1ffb8:	mov	r0, #0
   1ffbc:	sub	sp, fp, #28
   1ffc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffc4:	bl	118bc <__errno_location@plt>
   1ffc8:	mov	r9, r0
   1ffcc:	ldr	r0, [r9]
   1ffd0:	cmp	r0, #7
   1ffd4:	bne	200f4 <__assert_fail@plt+0xe6c4>
   1ffd8:	cmp	r4, r4, lsl #1
   1ffdc:	bcs	200c8 <__assert_fail@plt+0xe698>
   1ffe0:	ldr	sl, [sp, #8]
   1ffe4:	lsl	r4, r4, #1
   1ffe8:	mov	r0, r6
   1ffec:	mov	r1, r4
   1fff0:	bl	1e860 <__assert_fail@plt+0xce30>
   1fff4:	cmp	r0, #0
   1fff8:	beq	200c8 <__assert_fail@plt+0xe698>
   1fffc:	mov	r7, r0
   20000:	sub	r0, sl, r6
   20004:	add	r5, sp, #4
   20008:	add	r2, sp, #12
   2000c:	add	r3, sp, #8
   20010:	add	r1, r7, r0
   20014:	mvn	r0, r0
   20018:	str	r5, [sp]
   2001c:	add	r0, r4, r0
   20020:	str	r1, [sp, #8]
   20024:	add	r1, sp, #16
   20028:	str	r0, [sp, #4]
   2002c:	mov	r0, r8
   20030:	bl	11664 <iconv@plt>
   20034:	cmn	r0, #1
   20038:	mov	r6, r7
   2003c:	beq	1ffcc <__assert_fail@plt+0xe59c>
   20040:	b	1ff44 <__assert_fail@plt+0xe514>
   20044:	bl	118bc <__errno_location@plt>
   20048:	mov	r6, r0
   2004c:	add	r9, sp, #8
   20050:	ldr	r0, [r6]
   20054:	cmp	r0, #7
   20058:	bne	200dc <__assert_fail@plt+0xe6ac>
   2005c:	cmp	r4, r4, lsl #1
   20060:	bcs	200d4 <__assert_fail@plt+0xe6a4>
   20064:	ldr	sl, [sp, #8]
   20068:	lsl	r4, r4, #1
   2006c:	mov	r0, r7
   20070:	mov	r1, r4
   20074:	bl	1e860 <__assert_fail@plt+0xce30>
   20078:	cmp	r0, #0
   2007c:	beq	200d4 <__assert_fail@plt+0xe6a4>
   20080:	mov	r5, r0
   20084:	sub	r0, sl, r7
   20088:	mov	r2, #0
   2008c:	mov	r3, r9
   20090:	add	r1, r5, r0
   20094:	mvn	r0, r0
   20098:	add	r0, r4, r0
   2009c:	str	r1, [sp, #8]
   200a0:	mov	r1, #0
   200a4:	str	r0, [sp, #4]
   200a8:	add	r0, sp, #4
   200ac:	str	r0, [sp]
   200b0:	mov	r0, r8
   200b4:	bl	11664 <iconv@plt>
   200b8:	cmn	r0, #1
   200bc:	mov	r7, r5
   200c0:	beq	20050 <__assert_fail@plt+0xe620>
   200c4:	b	1ff68 <__assert_fail@plt+0xe538>
   200c8:	mov	r0, #12
   200cc:	str	r0, [r9]
   200d0:	b	200e0 <__assert_fail@plt+0xe6b0>
   200d4:	mov	r0, #12
   200d8:	str	r0, [r6]
   200dc:	mov	r6, r7
   200e0:	mov	r0, r6
   200e4:	bl	1ae2c <__assert_fail@plt+0x93fc>
   200e8:	mov	r0, #0
   200ec:	sub	sp, fp, #28
   200f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200f4:	cmp	r0, #22
   200f8:	beq	1ff40 <__assert_fail@plt+0xe510>
   200fc:	b	200e0 <__assert_fail@plt+0xe6b0>
   20100:	push	{r4, r5, r6, r7, fp, lr}
   20104:	add	fp, sp, #16
   20108:	mov	r5, r0
   2010c:	ldrb	r0, [r0]
   20110:	cmp	r0, #0
   20114:	beq	2018c <__assert_fail@plt+0xe75c>
   20118:	mov	r4, r1
   2011c:	mov	r0, r1
   20120:	mov	r1, r2
   20124:	mov	r6, r2
   20128:	bl	1e8b4 <__assert_fail@plt+0xce84>
   2012c:	cmp	r0, #0
   20130:	beq	2018c <__assert_fail@plt+0xe75c>
   20134:	mov	r0, r6
   20138:	mov	r1, r4
   2013c:	bl	11814 <iconv_open@plt>
   20140:	mov	r4, #0
   20144:	cmn	r0, #1
   20148:	beq	201a0 <__assert_fail@plt+0xe770>
   2014c:	mov	r6, r0
   20150:	mov	r0, r5
   20154:	mov	r1, r6
   20158:	bl	1febc <__assert_fail@plt+0xe48c>
   2015c:	cmp	r0, #0
   20160:	beq	201c0 <__assert_fail@plt+0xe790>
   20164:	mov	r5, r0
   20168:	mov	r0, r6
   2016c:	bl	11658 <iconv_close@plt>
   20170:	cmn	r0, #1
   20174:	movgt	r0, r5
   20178:	popgt	{r4, r5, r6, r7, fp, pc}
   2017c:	mov	r0, r5
   20180:	bl	1ae2c <__assert_fail@plt+0x93fc>
   20184:	mov	r0, r4
   20188:	pop	{r4, r5, r6, r7, fp, pc}
   2018c:	mov	r0, r5
   20190:	bl	11724 <strdup@plt>
   20194:	mov	r4, r0
   20198:	cmp	r0, #0
   2019c:	beq	201a8 <__assert_fail@plt+0xe778>
   201a0:	mov	r0, r4
   201a4:	pop	{r4, r5, r6, r7, fp, pc}
   201a8:	bl	118bc <__errno_location@plt>
   201ac:	mov	r1, #12
   201b0:	mov	r4, #0
   201b4:	str	r1, [r0]
   201b8:	mov	r0, r4
   201bc:	pop	{r4, r5, r6, r7, fp, pc}
   201c0:	bl	118bc <__errno_location@plt>
   201c4:	ldr	r7, [r0]
   201c8:	mov	r5, r0
   201cc:	mov	r0, r6
   201d0:	bl	11658 <iconv_close@plt>
   201d4:	mov	r0, r4
   201d8:	str	r7, [r5]
   201dc:	pop	{r4, r5, r6, r7, fp, pc}
   201e0:	push	{r4, r5, fp, lr}
   201e4:	add	fp, sp, #8
   201e8:	mov	r4, r1
   201ec:	mov	r1, #0
   201f0:	mov	r5, r0
   201f4:	mov	r2, r4
   201f8:	bl	11934 <memchr@plt>
   201fc:	rsb	r1, r5, #1
   20200:	cmp	r0, #0
   20204:	addne	r4, r1, r0
   20208:	mov	r0, r4
   2020c:	pop	{r4, r5, fp, pc}
   20210:	push	{r4, sl, fp, lr}
   20214:	add	fp, sp, #8
   20218:	sub	sp, sp, #264	; 0x108
   2021c:	add	r1, sp, #7
   20220:	movw	r2, #257	; 0x101
   20224:	bl	20470 <__assert_fail@plt+0xea40>
   20228:	mov	r4, #0
   2022c:	cmp	r0, #0
   20230:	bne	20268 <__assert_fail@plt+0xe838>
   20234:	movw	r1, #17152	; 0x4300
   20238:	add	r0, sp, #7
   2023c:	movt	r1, #2
   20240:	bl	11670 <strcmp@plt>
   20244:	cmp	r0, #0
   20248:	beq	20268 <__assert_fail@plt+0xe838>
   2024c:	movw	r1, #17154	; 0x4302
   20250:	add	r0, sp, #7
   20254:	movt	r1, #2
   20258:	bl	11670 <strcmp@plt>
   2025c:	mov	r4, r0
   20260:	cmp	r0, #0
   20264:	movwne	r4, #1
   20268:	mov	r0, r4
   2026c:	sub	sp, fp, #8
   20270:	pop	{r4, sl, fp, pc}
   20274:	push	{r4, sl, fp, lr}
   20278:	add	fp, sp, #8
   2027c:	mov	r4, #0
   20280:	adds	r0, r0, #16
   20284:	adc	r1, r4, #0
   20288:	rsb	r2, r1, #0
   2028c:	eors	r2, r2, r1
   20290:	movwne	r2, #1
   20294:	cmp	r0, #0
   20298:	blt	202b8 <__assert_fail@plt+0xe888>
   2029c:	cmp	r2, #0
   202a0:	asreq	r2, r0, #31
   202a4:	eoreq	r3, r0, r0
   202a8:	andeq	r2, r2, #1
   202ac:	eoreq	r1, r1, r2
   202b0:	orrseq	r1, r3, r1
   202b4:	beq	202c0 <__assert_fail@plt+0xe890>
   202b8:	mov	r0, r4
   202bc:	pop	{r4, sl, fp, pc}
   202c0:	bl	11808 <malloc@plt>
   202c4:	cmp	r0, #0
   202c8:	addne	r4, r0, #8
   202cc:	movne	r1, #8
   202d0:	bfine	r4, r1, #0, #4
   202d4:	subne	r0, r4, r0
   202d8:	strbne	r0, [r4, #-1]
   202dc:	mov	r0, r4
   202e0:	pop	{r4, sl, fp, pc}
   202e4:	tst	r0, #7
   202e8:	bne	20300 <__assert_fail@plt+0xe8d0>
   202ec:	tst	r0, #8
   202f0:	bxeq	lr
   202f4:	ldrb	r1, [r0, #-1]
   202f8:	sub	r0, r0, r1
   202fc:	b	1ae2c <__assert_fail@plt+0x93fc>
   20300:	push	{fp, lr}
   20304:	mov	fp, sp
   20308:	bl	11a24 <abort@plt>
   2030c:	push	{r4, sl, fp, lr}
   20310:	add	fp, sp, #8
   20314:	mov	r4, r0
   20318:	bl	116a0 <wcwidth@plt>
   2031c:	cmn	r0, #1
   20320:	popgt	{r4, sl, fp, pc}
   20324:	mov	r0, r4
   20328:	bl	11784 <iswcntrl@plt>
   2032c:	clz	r0, r0
   20330:	lsr	r0, r0, #5
   20334:	pop	{r4, sl, fp, pc}
   20338:	push	{r4, r5, r6, sl, fp, lr}
   2033c:	add	fp, sp, #16
   20340:	mov	r4, r0
   20344:	mov	r0, r1
   20348:	mov	r5, r1
   2034c:	ldr	r1, [r0], #16
   20350:	cmp	r1, r0
   20354:	beq	20360 <__assert_fail@plt+0xe930>
   20358:	mov	r6, r1
   2035c:	b	20370 <__assert_fail@plt+0xe940>
   20360:	ldr	r2, [r5, #4]
   20364:	add	r6, r4, #16
   20368:	mov	r0, r6
   2036c:	bl	116dc <memcpy@plt>
   20370:	str	r6, [r4]
   20374:	ldr	r0, [r5, #4]
   20378:	str	r0, [r4, #4]
   2037c:	ldrb	r0, [r5, #8]
   20380:	strb	r0, [r4, #8]
   20384:	cmp	r0, #0
   20388:	ldrne	r0, [r5, #12]
   2038c:	strne	r0, [r4, #12]
   20390:	pop	{r4, r5, r6, sl, fp, pc}
   20394:	movw	r2, #17160	; 0x4308
   20398:	ubfx	r1, r0, #5, #3
   2039c:	and	r0, r0, #31
   203a0:	movt	r2, #2
   203a4:	ldr	r1, [r2, r1, lsl #2]
   203a8:	mov	r2, #1
   203ac:	and	r0, r1, r2, lsl r0
   203b0:	cmp	r0, #0
   203b4:	movwne	r0, #1
   203b8:	bx	lr
   203bc:	push	{r4, r5, r6, sl, fp, lr}
   203c0:	add	fp, sp, #16
   203c4:	sub	sp, sp, #56	; 0x38
   203c8:	mov	r5, r0
   203cc:	bl	117d8 <__ctype_get_mb_cur_max@plt>
   203d0:	cmp	r0, #2
   203d4:	bcc	20460 <__assert_fail@plt+0xea30>
   203d8:	mov	r4, #0
   203dc:	mov	r0, sp
   203e0:	str	r4, [sp, #8]
   203e4:	str	r4, [sp, #4]
   203e8:	strb	r4, [sp]
   203ec:	str	r5, [sp, #16]
   203f0:	strb	r4, [sp, #12]
   203f4:	bl	1f97c <__assert_fail@plt+0xdf4c>
   203f8:	ldrb	r0, [sp, #24]
   203fc:	cmp	r0, #0
   20400:	beq	20410 <__assert_fail@plt+0xe9e0>
   20404:	ldr	r0, [sp, #28]
   20408:	cmp	r0, #0
   2040c:	beq	20454 <__assert_fail@plt+0xea24>
   20410:	mov	r6, #0
   20414:	mov	r5, sp
   20418:	mov	r4, #0
   2041c:	strb	r6, [sp, #12]
   20420:	ldr	r0, [sp, #16]
   20424:	ldr	r1, [sp, #20]
   20428:	add	r0, r0, r1
   2042c:	str	r0, [sp, #16]
   20430:	mov	r0, r5
   20434:	bl	1f97c <__assert_fail@plt+0xdf4c>
   20438:	ldrb	r1, [sp, #24]
   2043c:	ldr	r0, [sp, #28]
   20440:	add	r4, r4, #1
   20444:	cmp	r1, #0
   20448:	beq	2041c <__assert_fail@plt+0xe9ec>
   2044c:	cmp	r0, #0
   20450:	bne	2041c <__assert_fail@plt+0xe9ec>
   20454:	mov	r0, r4
   20458:	sub	sp, fp, #16
   2045c:	pop	{r4, r5, r6, sl, fp, pc}
   20460:	mov	r0, r5
   20464:	sub	sp, fp, #16
   20468:	pop	{r4, r5, r6, sl, fp, lr}
   2046c:	b	1188c <strlen@plt>
   20470:	push	{r4, r5, r6, r7, fp, lr}
   20474:	add	fp, sp, #16
   20478:	mov	r4, r1
   2047c:	mov	r1, #0
   20480:	mov	r6, r2
   20484:	bl	119a0 <setlocale@plt>
   20488:	cmp	r0, #0
   2048c:	beq	204bc <__assert_fail@plt+0xea8c>
   20490:	mov	r7, r0
   20494:	bl	1188c <strlen@plt>
   20498:	cmp	r0, r6
   2049c:	bcs	204dc <__assert_fail@plt+0xeaac>
   204a0:	add	r2, r0, #1
   204a4:	mov	r0, r4
   204a8:	mov	r1, r7
   204ac:	bl	116dc <memcpy@plt>
   204b0:	mov	r5, #0
   204b4:	mov	r0, r5
   204b8:	pop	{r4, r5, r6, r7, fp, pc}
   204bc:	cmp	r6, #0
   204c0:	mov	r5, #22
   204c4:	movne	r0, #0
   204c8:	strbne	r0, [r4]
   204cc:	movne	r0, r5
   204d0:	popne	{r4, r5, r6, r7, fp, pc}
   204d4:	mov	r0, r5
   204d8:	pop	{r4, r5, r6, r7, fp, pc}
   204dc:	mov	r5, #34	; 0x22
   204e0:	cmp	r6, #0
   204e4:	beq	20504 <__assert_fail@plt+0xead4>
   204e8:	sub	r6, r6, #1
   204ec:	mov	r0, r4
   204f0:	mov	r1, r7
   204f4:	mov	r2, r6
   204f8:	bl	116dc <memcpy@plt>
   204fc:	mov	r0, #0
   20500:	strb	r0, [r4, r6]
   20504:	mov	r0, r5
   20508:	pop	{r4, r5, r6, r7, fp, pc}
   2050c:	mov	r1, #0
   20510:	b	119a0 <setlocale@plt>
   20514:	cmp	r3, #0
   20518:	cmpeq	r2, #0
   2051c:	bne	20534 <__assert_fail@plt+0xeb04>
   20520:	cmp	r1, #0
   20524:	cmpeq	r0, #0
   20528:	mvnne	r1, #0
   2052c:	mvnne	r0, #0
   20530:	b	20550 <__assert_fail@plt+0xeb20>
   20534:	sub	sp, sp, #8
   20538:	push	{sp, lr}
   2053c:	bl	20560 <__assert_fail@plt+0xeb30>
   20540:	ldr	lr, [sp, #4]
   20544:	add	sp, sp, #8
   20548:	pop	{r2, r3}
   2054c:	bx	lr
   20550:	push	{r1, lr}
   20554:	mov	r0, #8
   20558:	bl	11640 <raise@plt>
   2055c:	pop	{r1, pc}
   20560:	cmp	r1, r3
   20564:	cmpeq	r0, r2
   20568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2056c:	mov	r4, r0
   20570:	movcc	r0, #0
   20574:	mov	r5, r1
   20578:	ldr	lr, [sp, #36]	; 0x24
   2057c:	movcc	r1, r0
   20580:	bcc	2067c <__assert_fail@plt+0xec4c>
   20584:	cmp	r3, #0
   20588:	clzeq	ip, r2
   2058c:	clzne	ip, r3
   20590:	addeq	ip, ip, #32
   20594:	cmp	r5, #0
   20598:	clzeq	r1, r4
   2059c:	addeq	r1, r1, #32
   205a0:	clzne	r1, r5
   205a4:	sub	ip, ip, r1
   205a8:	sub	sl, ip, #32
   205ac:	lsl	r9, r3, ip
   205b0:	rsb	fp, ip, #32
   205b4:	orr	r9, r9, r2, lsl sl
   205b8:	orr	r9, r9, r2, lsr fp
   205bc:	lsl	r8, r2, ip
   205c0:	cmp	r5, r9
   205c4:	cmpeq	r4, r8
   205c8:	movcc	r0, #0
   205cc:	movcc	r1, r0
   205d0:	bcc	205ec <__assert_fail@plt+0xebbc>
   205d4:	mov	r0, #1
   205d8:	subs	r4, r4, r8
   205dc:	lsl	r1, r0, sl
   205e0:	orr	r1, r1, r0, lsr fp
   205e4:	lsl	r0, r0, ip
   205e8:	sbc	r5, r5, r9
   205ec:	cmp	ip, #0
   205f0:	beq	2067c <__assert_fail@plt+0xec4c>
   205f4:	lsr	r6, r8, #1
   205f8:	orr	r6, r6, r9, lsl #31
   205fc:	lsr	r7, r9, #1
   20600:	mov	r2, ip
   20604:	b	20628 <__assert_fail@plt+0xebf8>
   20608:	subs	r3, r4, r6
   2060c:	sbc	r8, r5, r7
   20610:	adds	r3, r3, r3
   20614:	adc	r8, r8, r8
   20618:	adds	r4, r3, #1
   2061c:	adc	r5, r8, #0
   20620:	subs	r2, r2, #1
   20624:	beq	20644 <__assert_fail@plt+0xec14>
   20628:	cmp	r5, r7
   2062c:	cmpeq	r4, r6
   20630:	bcs	20608 <__assert_fail@plt+0xebd8>
   20634:	adds	r4, r4, r4
   20638:	adc	r5, r5, r5
   2063c:	subs	r2, r2, #1
   20640:	bne	20628 <__assert_fail@plt+0xebf8>
   20644:	lsr	r3, r4, ip
   20648:	orr	r3, r3, r5, lsl fp
   2064c:	lsr	r2, r5, ip
   20650:	orr	r3, r3, r5, lsr sl
   20654:	adds	r0, r0, r4
   20658:	mov	r4, r3
   2065c:	lsl	r3, r2, ip
   20660:	orr	r3, r3, r4, lsl sl
   20664:	lsl	ip, r4, ip
   20668:	orr	r3, r3, r4, lsr fp
   2066c:	adc	r1, r1, r5
   20670:	subs	r0, r0, ip
   20674:	mov	r5, r2
   20678:	sbc	r1, r1, r3
   2067c:	cmp	lr, #0
   20680:	strdne	r4, [lr]
   20684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20688:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2068c:	mov	r7, r0
   20690:	ldr	r6, [pc, #72]	; 206e0 <__assert_fail@plt+0xecb0>
   20694:	ldr	r5, [pc, #72]	; 206e4 <__assert_fail@plt+0xecb4>
   20698:	add	r6, pc, r6
   2069c:	add	r5, pc, r5
   206a0:	sub	r6, r6, r5
   206a4:	mov	r8, r1
   206a8:	mov	r9, r2
   206ac:	bl	11608 <calloc@plt-0x20>
   206b0:	asrs	r6, r6, #2
   206b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   206b8:	mov	r4, #0
   206bc:	add	r4, r4, #1
   206c0:	ldr	r3, [r5], #4
   206c4:	mov	r2, r9
   206c8:	mov	r1, r8
   206cc:	mov	r0, r7
   206d0:	blx	r3
   206d4:	cmp	r6, r4
   206d8:	bne	206bc <__assert_fail@plt+0xec8c>
   206dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   206e0:	andeq	r4, r1, r4, ror #16
   206e4:	andeq	r4, r1, ip, asr r8
   206e8:	bx	lr
   206ec:	ldr	r3, [pc, #12]	; 20700 <__assert_fail@plt+0xecd0>
   206f0:	mov	r1, #0
   206f4:	add	r3, pc, r3
   206f8:	ldr	r2, [r3]
   206fc:	b	118e0 <__cxa_atexit@plt>
   20700:	andeq	r4, r1, r8, ror sl

Disassembly of section .fini:

00020704 <.fini>:
   20704:	push	{r3, lr}
   20708:	pop	{r3, pc}
