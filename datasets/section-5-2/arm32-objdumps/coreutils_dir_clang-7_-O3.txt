
../repos/coreutils/src/dir:     file format elf32-littlearm


Disassembly of section .init:

00011b68 <.init>:
   11b68:	push	{r3, lr}
   11b6c:	bl	120dc <__assert_fail@plt+0x50>
   11b70:	pop	{r3, pc}

Disassembly of section .plt:

00011b74 <calloc@plt-0x14>:
   11b74:	push	{lr}		; (str lr, [sp, #-4]!)
   11b78:	ldr	lr, [pc, #4]	; 11b84 <calloc@plt-0x4>
   11b7c:	add	lr, pc, lr
   11b80:	ldr	pc, [lr, #8]!
   11b84:	andeq	lr, r2, ip, ror r4

00011b88 <calloc@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #188416	; 0x2e000
   11b90:	ldr	pc, [ip, #1148]!	; 0x47c

00011b94 <fputs_unlocked@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #188416	; 0x2e000
   11b9c:	ldr	pc, [ip, #1140]!	; 0x474

00011ba0 <cap_to_text@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #188416	; 0x2e000
   11ba8:	ldr	pc, [ip, #1132]!	; 0x46c

00011bac <raise@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #188416	; 0x2e000
   11bb4:	ldr	pc, [ip, #1124]!	; 0x464

00011bb8 <gmtime_r@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #188416	; 0x2e000
   11bc0:	ldr	pc, [ip, #1116]!	; 0x45c

00011bc4 <getpwnam@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #188416	; 0x2e000
   11bcc:	ldr	pc, [ip, #1108]!	; 0x454

00011bd0 <strcmp@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #188416	; 0x2e000
   11bd8:	ldr	pc, [ip, #1100]!	; 0x44c

00011bdc <getpwuid@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #188416	; 0x2e000
   11be4:	ldr	pc, [ip, #1092]!	; 0x444

00011be8 <mktime@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #188416	; 0x2e000
   11bf0:	ldr	pc, [ip, #1084]!	; 0x43c

00011bf4 <fflush@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #188416	; 0x2e000
   11bfc:	ldr	pc, [ip, #1076]!	; 0x434

00011c00 <wcwidth@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #188416	; 0x2e000
   11c08:	ldr	pc, [ip, #1068]!	; 0x42c

00011c0c <sigprocmask@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #188416	; 0x2e000
   11c14:	ldr	pc, [ip, #1060]!	; 0x424

00011c18 <_setjmp@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #188416	; 0x2e000
   11c20:	ldr	pc, [ip, #1052]!	; 0x41c

00011c24 <memmove@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #188416	; 0x2e000
   11c2c:	ldr	pc, [ip, #1044]!	; 0x414

00011c30 <free@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #188416	; 0x2e000
   11c38:	ldr	pc, [ip, #1036]!	; 0x40c

00011c3c <faccessat@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #188416	; 0x2e000
   11c44:	ldr	pc, [ip, #1028]!	; 0x404

00011c48 <clock_gettime@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #188416	; 0x2e000
   11c50:	ldr	pc, [ip, #1020]!	; 0x3fc

00011c54 <_exit@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #188416	; 0x2e000
   11c5c:	ldr	pc, [ip, #1012]!	; 0x3f4

00011c60 <memcpy@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #188416	; 0x2e000
   11c68:	ldr	pc, [ip, #1004]!	; 0x3ec

00011c6c <__strtoull_internal@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #188416	; 0x2e000
   11c74:	ldr	pc, [ip, #996]!	; 0x3e4

00011c78 <mbsinit@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #188416	; 0x2e000
   11c80:	ldr	pc, [ip, #988]!	; 0x3dc

00011c84 <signal@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #188416	; 0x2e000
   11c8c:	ldr	pc, [ip, #980]!	; 0x3d4

00011c90 <fwrite_unlocked@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #188416	; 0x2e000
   11c98:	ldr	pc, [ip, #972]!	; 0x3cc

00011c9c <memcmp@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #188416	; 0x2e000
   11ca4:	ldr	pc, [ip, #964]!	; 0x3c4

00011ca8 <stpcpy@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #188416	; 0x2e000
   11cb0:	ldr	pc, [ip, #956]!	; 0x3bc

00011cb4 <dcgettext@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #188416	; 0x2e000
   11cbc:	ldr	pc, [ip, #948]!	; 0x3b4

00011cc0 <realloc@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #188416	; 0x2e000
   11cc8:	ldr	pc, [ip, #940]!	; 0x3ac

00011ccc <sigismember@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #188416	; 0x2e000
   11cd4:	ldr	pc, [ip, #932]!	; 0x3a4

00011cd8 <fgetfilecon@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #188416	; 0x2e000
   11ce0:	ldr	pc, [ip, #924]!	; 0x39c

00011ce4 <localtime_r@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #188416	; 0x2e000
   11cec:	ldr	pc, [ip, #916]!	; 0x394

00011cf0 <textdomain@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #188416	; 0x2e000
   11cf8:	ldr	pc, [ip, #908]!	; 0x38c

00011cfc <iswcntrl@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #188416	; 0x2e000
   11d04:	ldr	pc, [ip, #900]!	; 0x384

00011d08 <rawmemchr@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #188416	; 0x2e000
   11d10:	ldr	pc, [ip, #892]!	; 0x37c

00011d14 <fflush_unlocked@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #188416	; 0x2e000
   11d1c:	ldr	pc, [ip, #884]!	; 0x374

00011d20 <iswprint@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #188416	; 0x2e000
   11d28:	ldr	pc, [ip, #876]!	; 0x36c

00011d2c <tzset@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #188416	; 0x2e000
   11d34:	ldr	pc, [ip, #868]!	; 0x364

00011d38 <readlink@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #188416	; 0x2e000
   11d40:	ldr	pc, [ip, #860]!	; 0x35c

00011d44 <sigaction@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #188416	; 0x2e000
   11d4c:	ldr	pc, [ip, #852]!	; 0x354

00011d50 <fwrite@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #188416	; 0x2e000
   11d58:	ldr	pc, [ip, #844]!	; 0x34c

00011d5c <ioctl@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #188416	; 0x2e000
   11d64:	ldr	pc, [ip, #836]!	; 0x344

00011d68 <lseek64@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #188416	; 0x2e000
   11d70:	ldr	pc, [ip, #828]!	; 0x33c

00011d74 <__ctype_get_mb_cur_max@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #188416	; 0x2e000
   11d7c:	ldr	pc, [ip, #820]!	; 0x334

00011d80 <strcpy@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #188416	; 0x2e000
   11d88:	ldr	pc, [ip, #812]!	; 0x32c

00011d8c <__fpending@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #188416	; 0x2e000
   11d94:	ldr	pc, [ip, #804]!	; 0x324

00011d98 <mbrtowc@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #188416	; 0x2e000
   11da0:	ldr	pc, [ip, #796]!	; 0x31c

00011da4 <wcstombs@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #188416	; 0x2e000
   11dac:	ldr	pc, [ip, #788]!	; 0x314

00011db0 <error@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #188416	; 0x2e000
   11db8:	ldr	pc, [ip, #780]!	; 0x30c

00011dbc <gethostname@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #188416	; 0x2e000
   11dc4:	ldr	pc, [ip, #772]!	; 0x304

00011dc8 <opendir@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #188416	; 0x2e000
   11dd0:	ldr	pc, [ip, #764]!	; 0x2fc

00011dd4 <fnmatch@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #188416	; 0x2e000
   11ddc:	ldr	pc, [ip, #756]!	; 0x2f4

00011de0 <strcoll@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #188416	; 0x2e000
   11de8:	ldr	pc, [ip, #748]!	; 0x2ec

00011dec <getenv@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #188416	; 0x2e000
   11df4:	ldr	pc, [ip, #740]!	; 0x2e4

00011df8 <lgetfilecon@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #188416	; 0x2e000
   11e00:	ldr	pc, [ip, #732]!	; 0x2dc

00011e04 <malloc@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #188416	; 0x2e000
   11e0c:	ldr	pc, [ip, #724]!	; 0x2d4

00011e10 <sigaddset@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #188416	; 0x2e000
   11e18:	ldr	pc, [ip, #716]!	; 0x2cc

00011e1c <__libc_start_main@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #188416	; 0x2e000
   11e24:	ldr	pc, [ip, #708]!	; 0x2c4

00011e28 <strftime@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #188416	; 0x2e000
   11e30:	ldr	pc, [ip, #700]!	; 0x2bc

00011e34 <__freading@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #188416	; 0x2e000
   11e3c:	ldr	pc, [ip, #692]!	; 0x2b4

00011e40 <__ctype_tolower_loc@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #188416	; 0x2e000
   11e48:	ldr	pc, [ip, #684]!	; 0x2ac

00011e4c <__ctype_toupper_loc@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #188416	; 0x2e000
   11e54:	ldr	pc, [ip, #676]!	; 0x2a4

00011e58 <__gmon_start__@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #188416	; 0x2e000
   11e60:	ldr	pc, [ip, #668]!	; 0x29c

00011e64 <getopt_long@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #188416	; 0x2e000
   11e6c:	ldr	pc, [ip, #660]!	; 0x294

00011e70 <__ctype_b_loc@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #188416	; 0x2e000
   11e78:	ldr	pc, [ip, #652]!	; 0x28c

00011e7c <getcwd@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #188416	; 0x2e000
   11e84:	ldr	pc, [ip, #644]!	; 0x284

00011e88 <exit@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #188416	; 0x2e000
   11e90:	ldr	pc, [ip, #636]!	; 0x27c

00011e94 <getfilecon@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #188416	; 0x2e000
   11e9c:	ldr	pc, [ip, #628]!	; 0x274

00011ea0 <tcgetpgrp@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #188416	; 0x2e000
   11ea8:	ldr	pc, [ip, #620]!	; 0x26c

00011eac <strlen@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #188416	; 0x2e000
   11eb4:	ldr	pc, [ip, #612]!	; 0x264

00011eb8 <strchr@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #188416	; 0x2e000
   11ec0:	ldr	pc, [ip, #604]!	; 0x25c

00011ec4 <setenv@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #188416	; 0x2e000
   11ecc:	ldr	pc, [ip, #596]!	; 0x254

00011ed0 <__errno_location@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #188416	; 0x2e000
   11ed8:	ldr	pc, [ip, #588]!	; 0x24c

00011edc <__sprintf_chk@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #188416	; 0x2e000
   11ee4:	ldr	pc, [ip, #580]!	; 0x244

00011ee8 <__cxa_atexit@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #188416	; 0x2e000
   11ef0:	ldr	pc, [ip, #572]!	; 0x23c

00011ef4 <memset@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #188416	; 0x2e000
   11efc:	ldr	pc, [ip, #564]!	; 0x234

00011f00 <__printf_chk@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #188416	; 0x2e000
   11f08:	ldr	pc, [ip, #556]!	; 0x22c

00011f0c <stpncpy@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #188416	; 0x2e000
   11f14:	ldr	pc, [ip, #548]!	; 0x224

00011f18 <fileno@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #188416	; 0x2e000
   11f20:	ldr	pc, [ip, #540]!	; 0x21c

00011f24 <__fprintf_chk@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #188416	; 0x2e000
   11f2c:	ldr	pc, [ip, #532]!	; 0x214

00011f30 <fclose@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #188416	; 0x2e000
   11f38:	ldr	pc, [ip, #524]!	; 0x20c

00011f3c <fseeko64@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #188416	; 0x2e000
   11f44:	ldr	pc, [ip, #516]!	; 0x204

00011f48 <statx@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #188416	; 0x2e000
   11f50:	ldr	pc, [ip, #508]!	; 0x1fc

00011f54 <__overflow@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #188416	; 0x2e000
   11f5c:	ldr	pc, [ip, #500]!	; 0x1f4

00011f60 <setlocale@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #188416	; 0x2e000
   11f68:	ldr	pc, [ip, #492]!	; 0x1ec

00011f6c <sigemptyset@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #188416	; 0x2e000
   11f74:	ldr	pc, [ip, #484]!	; 0x1e4

00011f78 <wcswidth@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #188416	; 0x2e000
   11f80:	ldr	pc, [ip, #476]!	; 0x1dc

00011f84 <strrchr@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #188416	; 0x2e000
   11f8c:	ldr	pc, [ip, #468]!	; 0x1d4

00011f90 <cap_get_file@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #188416	; 0x2e000
   11f98:	ldr	pc, [ip, #460]!	; 0x1cc

00011f9c <nl_langinfo@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #188416	; 0x2e000
   11fa4:	ldr	pc, [ip, #452]!	; 0x1c4

00011fa8 <localeconv@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #188416	; 0x2e000
   11fb0:	ldr	pc, [ip, #444]!	; 0x1bc

00011fb4 <mbstowcs@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #188416	; 0x2e000
   11fbc:	ldr	pc, [ip, #436]!	; 0x1b4

00011fc0 <readdir64@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #188416	; 0x2e000
   11fc8:	ldr	pc, [ip, #428]!	; 0x1ac

00011fcc <timegm@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #188416	; 0x2e000
   11fd4:	ldr	pc, [ip, #420]!	; 0x1a4

00011fd8 <cap_free@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #188416	; 0x2e000
   11fe0:	ldr	pc, [ip, #412]!	; 0x19c

00011fe4 <dirfd@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #188416	; 0x2e000
   11fec:	ldr	pc, [ip, #404]!	; 0x194

00011ff0 <freecon@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #188416	; 0x2e000
   11ff8:	ldr	pc, [ip, #396]!	; 0x18c

00011ffc <bindtextdomain@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #188416	; 0x2e000
   12004:	ldr	pc, [ip, #388]!	; 0x184

00012008 <__xstat64@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #188416	; 0x2e000
   12010:	ldr	pc, [ip, #380]!	; 0x17c

00012014 <isatty@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #188416	; 0x2e000
   1201c:	ldr	pc, [ip, #372]!	; 0x174

00012020 <unsetenv@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #188416	; 0x2e000
   12028:	ldr	pc, [ip, #364]!	; 0x16c

0001202c <strncmp@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #188416	; 0x2e000
   12034:	ldr	pc, [ip, #356]!	; 0x164

00012038 <abort@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #188416	; 0x2e000
   12040:	ldr	pc, [ip, #348]!	; 0x15c

00012044 <closedir@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #188416	; 0x2e000
   1204c:	ldr	pc, [ip, #340]!	; 0x154

00012050 <getgrgid@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #188416	; 0x2e000
   12058:	ldr	pc, [ip, #332]!	; 0x14c

0001205c <getgrnam@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #188416	; 0x2e000
   12064:	ldr	pc, [ip, #324]!	; 0x144

00012068 <__snprintf_chk@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #188416	; 0x2e000
   12070:	ldr	pc, [ip, #316]!	; 0x13c

00012074 <strspn@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #188416	; 0x2e000
   1207c:	ldr	pc, [ip, #308]!	; 0x134

00012080 <__mempcpy_chk@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #188416	; 0x2e000
   12088:	ldr	pc, [ip, #300]!	; 0x12c

0001208c <__assert_fail@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #188416	; 0x2e000
   12094:	ldr	pc, [ip, #292]!	; 0x124

Disassembly of section .text:

000120a0 <_obstack_begin@@Base-0x13f54>:
   120a0:	mov	fp, #0
   120a4:	mov	lr, #0
   120a8:	pop	{r1}		; (ldr r1, [sp], #4)
   120ac:	mov	r2, sp
   120b0:	push	{r2}		; (str r2, [sp, #-4]!)
   120b4:	push	{r0}		; (str r0, [sp, #-4]!)
   120b8:	ldr	ip, [pc, #16]	; 120d0 <__assert_fail@plt+0x44>
   120bc:	push	{ip}		; (str ip, [sp, #-4]!)
   120c0:	ldr	r0, [pc, #12]	; 120d4 <__assert_fail@plt+0x48>
   120c4:	ldr	r3, [pc, #12]	; 120d8 <__assert_fail@plt+0x4c>
   120c8:	bl	11e1c <__libc_start_main@plt>
   120cc:	bl	12038 <abort@plt>
   120d0:	andeq	fp, r2, r8, ror #13
   120d4:	muleq	r1, r0, r1
   120d8:	andeq	fp, r2, r8, lsl #13
   120dc:	ldr	r3, [pc, #20]	; 120f8 <__assert_fail@plt+0x6c>
   120e0:	ldr	r2, [pc, #20]	; 120fc <__assert_fail@plt+0x70>
   120e4:	add	r3, pc, r3
   120e8:	ldr	r2, [r3, r2]
   120ec:	cmp	r2, #0
   120f0:	bxeq	lr
   120f4:	b	11e58 <__gmon_start__@plt>
   120f8:	andeq	sp, r2, r4, lsl pc
   120fc:			; <UNDEFINED> instruction: 0x000001bc
   12100:	ldr	r0, [pc, #24]	; 12120 <__assert_fail@plt+0x94>
   12104:	ldr	r3, [pc, #24]	; 12124 <__assert_fail@plt+0x98>
   12108:	cmp	r3, r0
   1210c:	bxeq	lr
   12110:	ldr	r3, [pc, #16]	; 12128 <__assert_fail@plt+0x9c>
   12114:	cmp	r3, #0
   12118:	bxeq	lr
   1211c:	bx	r3
   12120:	strdeq	r0, [r4], -r8
   12124:	strdeq	r0, [r4], -r8
   12128:	andeq	r0, r0, r0
   1212c:	ldr	r0, [pc, #36]	; 12158 <__assert_fail@plt+0xcc>
   12130:	ldr	r1, [pc, #36]	; 1215c <__assert_fail@plt+0xd0>
   12134:	sub	r1, r1, r0
   12138:	asr	r1, r1, #2
   1213c:	add	r1, r1, r1, lsr #31
   12140:	asrs	r1, r1, #1
   12144:	bxeq	lr
   12148:	ldr	r3, [pc, #16]	; 12160 <__assert_fail@plt+0xd4>
   1214c:	cmp	r3, #0
   12150:	bxeq	lr
   12154:	bx	r3
   12158:	strdeq	r0, [r4], -r8
   1215c:	strdeq	r0, [r4], -r8
   12160:	andeq	r0, r0, r0
   12164:	push	{r4, lr}
   12168:	ldr	r4, [pc, #24]	; 12188 <__assert_fail@plt+0xfc>
   1216c:	ldrb	r3, [r4]
   12170:	cmp	r3, #0
   12174:	popne	{r4, pc}
   12178:	bl	12100 <__assert_fail@plt+0x74>
   1217c:	mov	r3, #1
   12180:	strb	r3, [r4]
   12184:	pop	{r4, pc}
   12188:	andeq	r0, r4, r4, lsl r3
   1218c:	b	1212c <__assert_fail@plt+0xa0>
   12190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12194:	add	fp, sp, #28
   12198:	sub	sp, sp, #612	; 0x264
   1219c:	sub	sp, sp, #1024	; 0x400
   121a0:	mov	r9, r0
   121a4:	ldr	r0, [r1]
   121a8:	mov	r4, r1
   121ac:	bl	263fc <_obstack_memory_used@@Base+0x78>
   121b0:	movw	r1, #56125	; 0xdb3d
   121b4:	mov	r0, #6
   121b8:	movt	r1, #2
   121bc:	bl	11f60 <setlocale@plt>
   121c0:	movw	r6, #54687	; 0xd59f
   121c4:	movw	r1, #46868	; 0xb714
   121c8:	movt	r6, #2
   121cc:	movt	r1, #2
   121d0:	mov	r0, r6
   121d4:	bl	11ffc <bindtextdomain@plt>
   121d8:	mov	r0, r6
   121dc:	bl	11cf0 <textdomain@plt>
   121e0:	movw	r0, #684	; 0x2ac
   121e4:	mov	r1, #2
   121e8:	movt	r0, #4
   121ec:	str	r1, [r0]
   121f0:	movw	r0, #2160	; 0x870
   121f4:	movt	r0, #2
   121f8:	bl	2b6ec <_obstack_memory_used@@Base+0x5368>
   121fc:	movw	r1, #4688	; 0x1250
   12200:	mov	r2, #0
   12204:	mov	r0, #1
   12208:	mvn	sl, #0
   1220c:	movw	r7, #54495	; 0xd4df
   12210:	movw	r6, #56880	; 0xde30
   12214:	str	r4, [sp, #72]	; 0x48
   12218:	str	r9, [sp, #56]	; 0x38
   1221c:	movt	r1, #4
   12220:	movt	r7, #2
   12224:	movt	r6, #2
   12228:	strb	r0, [r1]
   1222c:	str	r2, [r1, #28]
   12230:	mov	r0, #0
   12234:	str	r2, [r1, #32]
   12238:	movw	r1, #4816	; 0x12d0
   1223c:	str	r0, [sp, #44]	; 0x2c
   12240:	movt	r1, #4
   12244:	mov	r0, #-2147483648	; 0x80000000
   12248:	str	r0, [r1, #68]	; 0x44
   1224c:	mvn	r0, #0
   12250:	str	sl, [r1, #72]	; 0x48
   12254:	mvn	r1, #0
   12258:	str	r0, [sp, #52]	; 0x34
   1225c:	mvn	r0, #0
   12260:	str	r1, [sp, #64]	; 0x40
   12264:	mvn	r1, #0
   12268:	str	r0, [sp, #48]	; 0x30
   1226c:	mvn	r0, #0
   12270:	str	r1, [sp, #76]	; 0x4c
   12274:	mov	r1, #0
   12278:	str	r0, [sp, #68]	; 0x44
   1227c:	mvn	r0, #0
   12280:	str	r1, [sp, #60]	; 0x3c
   12284:	b	122a4 <__assert_fail@plt+0x218>
   12288:	str	r0, [sp, #76]	; 0x4c
   1228c:	mov	r0, r8
   12290:	b	122a4 <__assert_fail@plt+0x218>
   12294:	ldr	r0, [sp, #76]	; 0x4c
   12298:	cmp	r0, #0
   1229c:	movwne	r0, #1
   122a0:	b	12288 <__assert_fail@plt+0x1fc>
   122a4:	mov	r8, r0
   122a8:	sub	r0, fp, #44	; 0x2c
   122ac:	mov	r1, r4
   122b0:	mov	r2, r7
   122b4:	mov	r3, r6
   122b8:	str	sl, [fp, #-44]	; 0xffffffd4
   122bc:	str	r0, [sp]
   122c0:	mov	r0, r9
   122c4:	bl	11e64 <getopt_long@plt>
   122c8:	add	r1, r0, #3
   122cc:	cmp	r1, #276	; 0x114
   122d0:	bhi	15770 <__assert_fail@plt+0x36e4>
   122d4:	add	r2, pc, #4
   122d8:	mov	r0, #7
   122dc:	ldr	pc, [r2, r1, lsl #2]
   122e0:	andeq	r5, r1, r8, ror r7
   122e4:	strdeq	r5, [r1], -r4
   122e8:	andeq	r3, r1, ip, lsr r0
   122ec:	andeq	r5, r1, r0, ror r7
   122f0:	andeq	r5, r1, r0, ror r7
   122f4:	andeq	r5, r1, r0, ror r7
   122f8:	andeq	r5, r1, r0, ror r7
   122fc:	andeq	r5, r1, r0, ror r7
   12300:	andeq	r5, r1, r0, ror r7
   12304:	andeq	r5, r1, r0, ror r7
   12308:	andeq	r5, r1, r0, ror r7
   1230c:	andeq	r5, r1, r0, ror r7
   12310:	andeq	r5, r1, r0, ror r7
   12314:	andeq	r5, r1, r0, ror r7
   12318:	andeq	r5, r1, r0, ror r7
   1231c:	andeq	r5, r1, r0, ror r7
   12320:	andeq	r5, r1, r0, ror r7
   12324:	andeq	r5, r1, r0, ror r7
   12328:	andeq	r5, r1, r0, ror r7
   1232c:	andeq	r5, r1, r0, ror r7
   12330:	andeq	r5, r1, r0, ror r7
   12334:	andeq	r5, r1, r0, ror r7
   12338:	andeq	r5, r1, r0, ror r7
   1233c:	andeq	r5, r1, r0, ror r7
   12340:	andeq	r5, r1, r0, ror r7
   12344:	andeq	r5, r1, r0, ror r7
   12348:	andeq	r5, r1, r0, ror r7
   1234c:	andeq	r5, r1, r0, ror r7
   12350:	andeq	r5, r1, r0, ror r7
   12354:	andeq	r5, r1, r0, ror r7
   12358:	andeq	r5, r1, r0, ror r7
   1235c:	andeq	r5, r1, r0, ror r7
   12360:	andeq	r5, r1, r0, ror r7
   12364:	andeq	r5, r1, r0, ror r7
   12368:	andeq	r5, r1, r0, ror r7
   1236c:	andeq	r5, r1, r0, ror r7
   12370:	andeq	r5, r1, r0, ror r7
   12374:	andeq	r5, r1, r0, ror r7
   12378:	andeq	r5, r1, r0, ror r7
   1237c:	andeq	r5, r1, r0, ror r7
   12380:	andeq	r5, r1, r0, ror r7
   12384:	andeq	r5, r1, r0, ror r7
   12388:	andeq	r5, r1, r0, ror r7
   1238c:	andeq	r5, r1, r0, ror r7
   12390:	andeq	r5, r1, r0, ror r7
   12394:	andeq	r5, r1, r0, ror r7
   12398:	andeq	r5, r1, r0, ror r7
   1239c:	andeq	r5, r1, r0, ror r7
   123a0:	andeq	r5, r1, r0, ror r7
   123a4:	andeq	r5, r1, r0, ror r7
   123a8:	andeq	r5, r1, r0, ror r7
   123ac:	andeq	r5, r1, r0, ror r7
   123b0:	muleq	r1, r4, r2
   123b4:	andeq	r5, r1, r0, ror r7
   123b8:	andeq	r5, r1, r0, ror r7
   123bc:	andeq	r5, r1, r0, ror r7
   123c0:	andeq	r5, r1, r0, ror r7
   123c4:	andeq	r5, r1, r0, ror r7
   123c8:	andeq	r5, r1, r0, ror r7
   123cc:	andeq	r5, r1, r0, ror r7
   123d0:	andeq	r5, r1, r0, ror r7
   123d4:	andeq	r5, r1, r0, ror r7
   123d8:	andeq	r5, r1, r0, ror r7
   123dc:	andeq	r5, r1, r0, ror r7
   123e0:	andeq	r5, r1, r0, ror r7
   123e4:	andeq	r5, r1, r0, ror r7
   123e8:	andeq	r5, r1, r0, ror r7
   123ec:	andeq	r5, r1, r0, ror r7
   123f0:	andeq	r2, r1, r4, lsr r7
   123f4:	andeq	r2, r1, r4, ror #21
   123f8:	strdeq	r2, [r1], -ip
   123fc:	andeq	r2, r1, r0, lsl #24
   12400:	andeq	r5, r1, r0, ror r7
   12404:	andeq	r2, r1, ip, lsl #20
   12408:	andeq	r2, r1, r0, ror #23
   1240c:	andeq	r2, r1, ip, lsr #22
   12410:	andeq	r2, r1, r4, lsr fp
   12414:	andeq	r5, r1, r0, ror r7
   12418:	andeq	r5, r1, r0, ror r7
   1241c:			; <UNDEFINED> instruction: 0x000129b8
   12420:	andeq	r5, r1, r0, ror r7
   12424:	ldrdeq	r2, [r1], -r8
   12428:	andeq	r5, r1, r0, ror r7
   1242c:	andeq	r5, r1, r0, ror r7
   12430:	andeq	r2, r1, r4, lsl #20
   12434:	andeq	r2, r1, ip, asr #25
   12438:	andeq	r2, r1, ip, asr r9
   1243c:	andeq	r2, r1, ip, lsl sp
   12440:	strdeq	r2, [r1], -r4
   12444:	andeq	r5, r1, r0, ror r7
   12448:	andeq	r5, r1, r0, ror r7
   1244c:	andeq	r2, r1, r4, asr #16
   12450:	andeq	r5, r1, r0, ror r7
   12454:	andeq	r2, r1, ip, lsl #17
   12458:	andeq	r5, r1, r0, ror r7
   1245c:	andeq	r5, r1, r0, ror r7
   12460:	andeq	r5, r1, r0, ror r7
   12464:	andeq	r5, r1, r0, ror r7
   12468:	andeq	r5, r1, r0, ror r7
   1246c:	andeq	r5, r1, r0, ror r7
   12470:	andeq	r2, r1, ip, asr #21
   12474:	andeq	r2, r1, r4, lsr #5
   12478:	andeq	r2, r1, r4, ror #16
   1247c:	andeq	r2, r1, ip, ror #16
   12480:	andeq	r5, r1, r0, ror r7
   12484:	andeq	r2, r1, r0, asr #19
   12488:	strdeq	r2, [r1], -ip
   1248c:	andeq	r2, r1, r0, asr #15
   12490:	andeq	r2, r1, r8, lsl ip
   12494:	andeq	r5, r1, r0, ror r7
   12498:	andeq	r2, r1, r0, ror #27
   1249c:	ldrdeq	r2, [r1], -ip
   124a0:	andeq	r2, r1, r0, ror fp
   124a4:	andeq	r2, r1, r8, ror fp
   124a8:	andeq	r2, r1, r0, asr #18
   124ac:	andeq	r2, r1, r4, lsl #17
   124b0:	andeq	r2, r1, r4, asr r9
   124b4:	andeq	r2, r1, r0, lsr #15
   124b8:	andeq	r2, r1, r4, asr r7
   124bc:	andeq	r2, r1, ip, asr #28
   124c0:	andeq	r2, r1, r8, lsr #29
   124c4:	andeq	r2, r1, r0, asr #29
   124c8:	andeq	r2, r1, r4, lsl #27
   124cc:	strdeq	r2, [r1], -r8
   124d0:	andeq	r5, r1, r0, ror r7
   124d4:	andeq	r5, r1, r0, ror r7
   124d8:	andeq	r5, r1, r0, ror r7
   124dc:	andeq	r5, r1, r0, ror r7
   124e0:	andeq	r5, r1, r0, ror r7
   124e4:	andeq	r5, r1, r0, ror r7
   124e8:	andeq	r5, r1, r0, ror r7
   124ec:	andeq	r5, r1, r0, ror r7
   124f0:	andeq	r5, r1, r0, ror r7
   124f4:	andeq	r5, r1, r0, ror r7
   124f8:	andeq	r5, r1, r0, ror r7
   124fc:	andeq	r5, r1, r0, ror r7
   12500:	andeq	r5, r1, r0, ror r7
   12504:	andeq	r5, r1, r0, ror r7
   12508:	andeq	r5, r1, r0, ror r7
   1250c:	andeq	r5, r1, r0, ror r7
   12510:	andeq	r5, r1, r0, ror r7
   12514:	andeq	r5, r1, r0, ror r7
   12518:	andeq	r5, r1, r0, ror r7
   1251c:	andeq	r5, r1, r0, ror r7
   12520:	andeq	r5, r1, r0, ror r7
   12524:	andeq	r5, r1, r0, ror r7
   12528:	andeq	r5, r1, r0, ror r7
   1252c:	andeq	r5, r1, r0, ror r7
   12530:	andeq	r5, r1, r0, ror r7
   12534:	andeq	r5, r1, r0, ror r7
   12538:	andeq	r5, r1, r0, ror r7
   1253c:	andeq	r5, r1, r0, ror r7
   12540:	andeq	r5, r1, r0, ror r7
   12544:	andeq	r5, r1, r0, ror r7
   12548:	andeq	r5, r1, r0, ror r7
   1254c:	andeq	r5, r1, r0, ror r7
   12550:	andeq	r5, r1, r0, ror r7
   12554:	andeq	r5, r1, r0, ror r7
   12558:	andeq	r5, r1, r0, ror r7
   1255c:	andeq	r5, r1, r0, ror r7
   12560:	andeq	r5, r1, r0, ror r7
   12564:	andeq	r5, r1, r0, ror r7
   12568:	andeq	r5, r1, r0, ror r7
   1256c:	andeq	r5, r1, r0, ror r7
   12570:	andeq	r5, r1, r0, ror r7
   12574:	andeq	r5, r1, r0, ror r7
   12578:	andeq	r5, r1, r0, ror r7
   1257c:	andeq	r5, r1, r0, ror r7
   12580:	andeq	r5, r1, r0, ror r7
   12584:	andeq	r5, r1, r0, ror r7
   12588:	andeq	r5, r1, r0, ror r7
   1258c:	andeq	r5, r1, r0, ror r7
   12590:	andeq	r5, r1, r0, ror r7
   12594:	andeq	r5, r1, r0, ror r7
   12598:	andeq	r5, r1, r0, ror r7
   1259c:	andeq	r5, r1, r0, ror r7
   125a0:	andeq	r5, r1, r0, ror r7
   125a4:	andeq	r5, r1, r0, ror r7
   125a8:	andeq	r5, r1, r0, ror r7
   125ac:	andeq	r5, r1, r0, ror r7
   125b0:	andeq	r5, r1, r0, ror r7
   125b4:	andeq	r5, r1, r0, ror r7
   125b8:	andeq	r5, r1, r0, ror r7
   125bc:	andeq	r5, r1, r0, ror r7
   125c0:	andeq	r5, r1, r0, ror r7
   125c4:	andeq	r5, r1, r0, ror r7
   125c8:	andeq	r5, r1, r0, ror r7
   125cc:	andeq	r5, r1, r0, ror r7
   125d0:	andeq	r5, r1, r0, ror r7
   125d4:	andeq	r5, r1, r0, ror r7
   125d8:	andeq	r5, r1, r0, ror r7
   125dc:	andeq	r5, r1, r0, ror r7
   125e0:	andeq	r5, r1, r0, ror r7
   125e4:	andeq	r5, r1, r0, ror r7
   125e8:	andeq	r5, r1, r0, ror r7
   125ec:	andeq	r5, r1, r0, ror r7
   125f0:	andeq	r5, r1, r0, ror r7
   125f4:	andeq	r5, r1, r0, ror r7
   125f8:	andeq	r5, r1, r0, ror r7
   125fc:	andeq	r5, r1, r0, ror r7
   12600:	andeq	r5, r1, r0, ror r7
   12604:	andeq	r5, r1, r0, ror r7
   12608:	andeq	r5, r1, r0, ror r7
   1260c:	andeq	r5, r1, r0, ror r7
   12610:	andeq	r5, r1, r0, ror r7
   12614:	andeq	r5, r1, r0, ror r7
   12618:	andeq	r5, r1, r0, ror r7
   1261c:	andeq	r5, r1, r0, ror r7
   12620:	andeq	r5, r1, r0, ror r7
   12624:	andeq	r5, r1, r0, ror r7
   12628:	andeq	r5, r1, r0, ror r7
   1262c:	andeq	r5, r1, r0, ror r7
   12630:	andeq	r5, r1, r0, ror r7
   12634:	andeq	r5, r1, r0, ror r7
   12638:	andeq	r5, r1, r0, ror r7
   1263c:	andeq	r5, r1, r0, ror r7
   12640:	andeq	r5, r1, r0, ror r7
   12644:	andeq	r5, r1, r0, ror r7
   12648:	andeq	r5, r1, r0, ror r7
   1264c:	andeq	r5, r1, r0, ror r7
   12650:	andeq	r5, r1, r0, ror r7
   12654:	andeq	r5, r1, r0, ror r7
   12658:	andeq	r5, r1, r0, ror r7
   1265c:	andeq	r5, r1, r0, ror r7
   12660:	andeq	r5, r1, r0, ror r7
   12664:	andeq	r5, r1, r0, ror r7
   12668:	andeq	r5, r1, r0, ror r7
   1266c:	andeq	r5, r1, r0, ror r7
   12670:	andeq	r5, r1, r0, ror r7
   12674:	andeq	r5, r1, r0, ror r7
   12678:	andeq	r5, r1, r0, ror r7
   1267c:	andeq	r5, r1, r0, ror r7
   12680:	andeq	r5, r1, r0, ror r7
   12684:	andeq	r5, r1, r0, ror r7
   12688:	andeq	r5, r1, r0, ror r7
   1268c:	andeq	r5, r1, r0, ror r7
   12690:	andeq	r5, r1, r0, ror r7
   12694:	andeq	r5, r1, r0, ror r7
   12698:	andeq	r5, r1, r0, ror r7
   1269c:	andeq	r5, r1, r0, ror r7
   126a0:	andeq	r5, r1, r0, ror r7
   126a4:	andeq	r5, r1, r0, ror r7
   126a8:	andeq	r5, r1, r0, ror r7
   126ac:	andeq	r5, r1, r0, ror r7
   126b0:	andeq	r5, r1, r0, ror r7
   126b4:	andeq	r5, r1, r0, ror r7
   126b8:	andeq	r5, r1, r0, ror r7
   126bc:	andeq	r5, r1, r0, ror r7
   126c0:	andeq	r5, r1, r0, ror r7
   126c4:	andeq	r5, r1, r0, ror r7
   126c8:	andeq	r5, r1, r0, ror r7
   126cc:	andeq	r5, r1, r0, ror r7
   126d0:	andeq	r5, r1, r0, ror r7
   126d4:	andeq	r5, r1, r0, ror r7
   126d8:	andeq	r5, r1, r0, ror r7
   126dc:	andeq	r5, r1, r0, ror r7
   126e0:	andeq	r5, r1, r0, ror r7
   126e4:	andeq	r5, r1, r0, ror r7
   126e8:	andeq	r5, r1, r0, ror r7
   126ec:	andeq	r2, r1, ip, asr #16
   126f0:	andeq	r2, r1, r4, ror #18
   126f4:	andeq	r2, r1, r0, lsr ip
   126f8:	strdeq	r2, [r1], -r4
   126fc:			; <UNDEFINED> instruction: 0x000127b8
   12700:	andeq	r2, r1, ip, lsl #23
   12704:	ldrdeq	r2, [r1], -r0
   12708:	andeq	r2, r1, ip, lsr r7
   1270c:	andeq	r2, r1, r0, lsl r8
   12710:	andeq	r2, r1, r4, lsr #17
   12714:	andeq	r2, r1, r0, ror #30
   12718:	andeq	r2, r1, ip, lsl #30
   1271c:	andeq	r2, r1, r4, ror #29
   12720:	andeq	r2, r1, ip, ror #14
   12724:	strdeq	r2, [r1], -r0
   12728:	andeq	r2, r1, r4, asr lr
   1272c:	andeq	r2, r1, r8, lsl #15
   12730:	andeq	r2, r1, r4, ror #25
   12734:	mov	r0, #1
   12738:	b	12ad0 <__assert_fail@plt+0xa44>
   1273c:	movw	r1, #4688	; 0x1250
   12740:	mov	r0, #1
   12744:	movt	r1, #4
   12748:	strb	r0, [r1, #2]
   1274c:	mov	r0, r8
   12750:	b	122a4 <__assert_fail@plt+0x218>
   12754:	movw	r1, #4688	; 0x1250
   12758:	mov	r0, #1
   1275c:	movt	r1, #4
   12760:	strb	r0, [r1, #8]
   12764:	mov	r0, r8
   12768:	b	122a4 <__assert_fail@plt+0x218>
   1276c:	movw	r2, #4816	; 0x12d0
   12770:	mov	r1, #0
   12774:	mov	r0, #1
   12778:	movt	r2, #4
   1277c:	strd	r0, [r2, #88]	; 0x58
   12780:	mov	r2, #144	; 0x90
   12784:	b	127d8 <__assert_fail@plt+0x74c>
   12788:	movw	r0, #784	; 0x310
   1278c:	movt	r0, #4
   12790:	ldr	r0, [r0]
   12794:	str	r0, [sp, #60]	; 0x3c
   12798:	mov	r0, r8
   1279c:	b	122a4 <__assert_fail@plt+0x218>
   127a0:	movw	r1, #4688	; 0x1250
   127a4:	mov	r0, #1
   127a8:	movt	r1, #4
   127ac:	strb	r0, [r1, #18]
   127b0:	mov	r0, r8
   127b4:	b	122a4 <__assert_fail@plt+0x218>
   127b8:	mov	r0, #2
   127bc:	b	12fb0 <__assert_fail@plt+0xf24>
   127c0:	movw	r2, #4816	; 0x12d0
   127c4:	mov	r1, #0
   127c8:	mov	r0, #1
   127cc:	movt	r2, #4
   127d0:	strd	r0, [r2, #88]	; 0x58
   127d4:	mov	r2, #176	; 0xb0
   127d8:	movw	r3, #4688	; 0x1250
   127dc:	movt	r3, #4
   127e0:	str	r2, [r3, #100]	; 0x64
   127e4:	str	r2, [r3, #104]	; 0x68
   127e8:	movw	r2, #648	; 0x288
   127ec:	movt	r2, #4
   127f0:	strd	r0, [r2, #8]
   127f4:	mov	r0, r8
   127f8:	b	122a4 <__assert_fail@plt+0x218>
   127fc:	movw	r1, #4688	; 0x1250
   12800:	mov	r0, #1
   12804:	movt	r1, #4
   12808:	strb	r0, [r1, #14]
   1280c:	b	12edc <__assert_fail@plt+0xe50>
   12810:	mov	r0, #8
   12814:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   12818:	movw	r1, #784	; 0x310
   1281c:	movw	r2, #4688	; 0x1250
   12820:	movt	r1, #4
   12824:	movt	r2, #4
   12828:	mov	r3, r2
   1282c:	ldr	r1, [r1]
   12830:	ldr	r2, [r2, #108]	; 0x6c
   12834:	stm	r0, {r1, r2}
   12838:	str	r0, [r3, #108]	; 0x6c
   1283c:	mov	r0, r8
   12840:	b	122a4 <__assert_fail@plt+0x218>
   12844:	mov	r0, #1
   12848:	b	12ec4 <__assert_fail@plt+0xe38>
   1284c:	movw	r1, #4688	; 0x1250
   12850:	mov	r0, #1
   12854:	movt	r1, #4
   12858:	strb	r0, [r1, #19]
   1285c:	mov	r0, r8
   12860:	b	122a4 <__assert_fail@plt+0x218>
   12864:	mov	r0, #1
   12868:	b	12eac <__assert_fail@plt+0xe20>
   1286c:	movw	r1, #4688	; 0x1250
   12870:	mov	r0, #1
   12874:	movt	r1, #4
   12878:	strb	r0, [r1, #5]
   1287c:	mov	r0, r8
   12880:	b	122a4 <__assert_fail@plt+0x218>
   12884:	mov	r0, #1
   12888:	b	12fb0 <__assert_fail@plt+0xf24>
   1288c:	movw	r1, #4688	; 0x1250
   12890:	mov	r0, #1
   12894:	movt	r1, #4
   12898:	strb	r0, [r1, #7]
   1289c:	mov	r0, r8
   128a0:	b	122a4 <__assert_fail@plt+0x218>
   128a4:	movw	r0, #784	; 0x310
   128a8:	movt	r0, #4
   128ac:	ldr	r1, [r0]
   128b0:	cmp	r1, #0
   128b4:	beq	12ffc <__assert_fail@plt+0xf70>
   128b8:	movw	r0, #680	; 0x2a8
   128bc:	movw	r4, #57600	; 0xe100
   128c0:	mov	r2, #4
   128c4:	mov	r5, #1
   128c8:	movt	r0, #4
   128cc:	str	r2, [sp]
   128d0:	movw	r2, #57636	; 0xe124
   128d4:	movt	r4, #2
   128d8:	ldr	r0, [r0]
   128dc:	movt	r2, #2
   128e0:	mov	r3, r4
   128e4:	stmib	sp, {r0, r5}
   128e8:	movw	r0, #54637	; 0xd56d
   128ec:	movt	r0, #2
   128f0:	bl	1fa80 <__assert_fail@plt+0xd9f4>
   128f4:	ldr	r0, [r4, r0, lsl #2]
   128f8:	ldr	r4, [sp, #72]	; 0x48
   128fc:	cmp	r0, #1
   12900:	beq	13010 <__assert_fail@plt+0xf84>
   12904:	cmp	r0, #2
   12908:	bne	1300c <__assert_fail@plt+0xf80>
   1290c:	movw	r4, #648	; 0x288
   12910:	movt	r4, #4
   12914:	ldrsb	r0, [r4]
   12918:	cmn	r0, #1
   1291c:	bgt	1292c <__assert_fail@plt+0x8a0>
   12920:	mov	r0, #1
   12924:	bl	12014 <isatty@plt>
   12928:	strb	r0, [r4]
   1292c:	ldr	r4, [sp, #72]	; 0x48
   12930:	uxtb	r5, r0
   12934:	cmp	r5, #0
   12938:	movwne	r5, #1
   1293c:	b	13010 <__assert_fail@plt+0xf84>
   12940:	movw	r1, #4688	; 0x1250
   12944:	mov	r0, #1
   12948:	movt	r1, #4
   1294c:	strb	r0, [r1, #17]
   12950:	b	12edc <__assert_fail@plt+0xe50>
   12954:	mov	r0, #1
   12958:	b	12ee8 <__assert_fail@plt+0xe5c>
   1295c:	mov	r0, #3
   12960:	b	12ec4 <__assert_fail@plt+0xe38>
   12964:	movw	r4, #784	; 0x310
   12968:	movw	r5, #4688	; 0x1250
   1296c:	movw	r6, #4816	; 0x12d0
   12970:	movt	r4, #4
   12974:	movt	r5, #4
   12978:	movt	r6, #4
   1297c:	ldr	r0, [r4]
   12980:	add	r1, r5, #100	; 0x64
   12984:	add	r2, r6, #88	; 0x58
   12988:	bl	23100 <__assert_fail@plt+0x11074>
   1298c:	cmp	r0, #0
   12990:	bne	15844 <__assert_fail@plt+0x37b8>
   12994:	ldrd	r0, [r6, #88]	; 0x58
   12998:	movw	r2, #648	; 0x288
   1299c:	ldr	r4, [sp, #72]	; 0x48
   129a0:	mvn	sl, #0
   129a4:	movt	r2, #4
   129a8:	strd	r0, [r2, #8]
   129ac:	ldr	r0, [r5, #100]	; 0x64
   129b0:	str	r0, [r5, #104]	; 0x68
   129b4:	b	12dc8 <__assert_fail@plt+0xd3c>
   129b8:	mov	r0, #4
   129bc:	b	12ef8 <__assert_fail@plt+0xe6c>
   129c0:	movw	r1, #4688	; 0x1250
   129c4:	mov	r0, #0
   129c8:	movt	r1, #4
   129cc:	mov	r2, r1
   129d0:	strb	r0, [r1, #1]
   129d4:	mov	r1, #2
   129d8:	str	r1, [r2, #92]	; 0x5c
   129dc:	strb	r0, [r2, #12]
   129e0:	strb	r0, [r2, #8]
   129e4:	ldr	r0, [sp, #76]	; 0x4c
   129e8:	cmp	r0, #0
   129ec:	mvneq	r0, #0
   129f0:	str	r0, [sp, #76]	; 0x4c
   129f4:	mov	r0, #6
   129f8:	b	12ec4 <__assert_fail@plt+0xe38>
   129fc:	mov	r0, #2
   12a00:	b	12288 <__assert_fail@plt+0x1fc>
   12a04:	mov	r0, #5
   12a08:	b	122a4 <__assert_fail@plt+0x218>
   12a0c:	movw	r0, #784	; 0x310
   12a10:	movw	sl, #4688	; 0x1250
   12a14:	movt	r0, #4
   12a18:	movt	sl, #4
   12a1c:	ldr	r1, [r0]
   12a20:	cmp	r1, #0
   12a24:	beq	12ab0 <__assert_fail@plt+0xa24>
   12a28:	movw	r0, #680	; 0x2a8
   12a2c:	movw	r9, #57600	; 0xe100
   12a30:	mov	r3, #4
   12a34:	mov	r2, #1
   12a38:	movt	r0, #4
   12a3c:	str	r3, [sp]
   12a40:	movt	r9, #2
   12a44:	ldr	r0, [r0]
   12a48:	mov	r3, r9
   12a4c:	stmib	sp, {r0, r2}
   12a50:	movw	r0, #54569	; 0xd529
   12a54:	movw	r2, #57636	; 0xe124
   12a58:	movt	r0, #2
   12a5c:	movt	r2, #2
   12a60:	bl	1fa80 <__assert_fail@plt+0xd9f4>
   12a64:	ldr	r0, [r9, r0, lsl #2]
   12a68:	ldr	r9, [sp, #56]	; 0x38
   12a6c:	movw	r6, #56880	; 0xde30
   12a70:	movt	r6, #2
   12a74:	cmp	r0, #1
   12a78:	beq	12ab0 <__assert_fail@plt+0xa24>
   12a7c:	cmp	r0, #2
   12a80:	bne	12ab8 <__assert_fail@plt+0xa2c>
   12a84:	movw	r4, #648	; 0x288
   12a88:	movt	r4, #4
   12a8c:	ldrsb	r0, [r4]
   12a90:	cmn	r0, #1
   12a94:	bgt	12aa4 <__assert_fail@plt+0xa18>
   12a98:	mov	r0, #1
   12a9c:	bl	12014 <isatty@plt>
   12aa0:	strb	r0, [r4]
   12aa4:	ldr	r4, [sp, #72]	; 0x48
   12aa8:	tst	r0, #255	; 0xff
   12aac:	beq	12ab8 <__assert_fail@plt+0xa2c>
   12ab0:	mov	r0, #3
   12ab4:	str	r0, [sl, #48]	; 0x30
   12ab8:	movw	r7, #54495	; 0xd4df
   12abc:	mov	r0, r8
   12ac0:	mvn	sl, #0
   12ac4:	movt	r7, #2
   12ac8:	b	122a4 <__assert_fail@plt+0x218>
   12acc:	mov	r0, #2
   12ad0:	movw	r1, #4688	; 0x1250
   12ad4:	movt	r1, #4
   12ad8:	str	r0, [r1, #92]	; 0x5c
   12adc:	mov	r0, r8
   12ae0:	b	122a4 <__assert_fail@plt+0x218>
   12ae4:	mov	r0, #8
   12ae8:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   12aec:	movw	r2, #4816	; 0x12d0
   12af0:	movw	r1, #54566	; 0xd526
   12af4:	movt	r2, #4
   12af8:	movt	r1, #2
   12afc:	mov	r4, r2
   12b00:	ldr	r2, [r2]
   12b04:	stm	r0, {r1, r2}
   12b08:	str	r0, [r4]
   12b0c:	mov	r0, #8
   12b10:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   12b14:	ldr	r2, [r4]
   12b18:	movw	r1, #54565	; 0xd525
   12b1c:	movt	r1, #2
   12b20:	stm	r0, {r1, r2}
   12b24:	str	r0, [r4]
   12b28:	b	12e40 <__assert_fail@plt+0xdb4>
   12b2c:	mov	r0, #2
   12b30:	b	12ef8 <__assert_fail@plt+0xe6c>
   12b34:	movw	r0, #784	; 0x310
   12b38:	movt	r0, #4
   12b3c:	ldr	r4, [r0]
   12b40:	mov	r0, #8
   12b44:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   12b48:	movw	r1, #4816	; 0x12d0
   12b4c:	str	r4, [r0]
   12b50:	ldr	r4, [sp, #72]	; 0x48
   12b54:	movt	r1, #4
   12b58:	mov	r2, r1
   12b5c:	ldr	r1, [r1]
   12b60:	str	r0, [r2]
   12b64:	str	r1, [r0, #4]
   12b68:	mov	r0, r8
   12b6c:	b	122a4 <__assert_fail@plt+0x218>
   12b70:	mov	r0, #4
   12b74:	b	12288 <__assert_fail@plt+0x1fc>
   12b78:	movw	r1, #4688	; 0x1250
   12b7c:	mov	r0, #1
   12b80:	movt	r1, #4
   12b84:	strb	r0, [r1, #16]
   12b88:	b	12edc <__assert_fail@plt+0xe50>
   12b8c:	movw	r0, #784	; 0x310
   12b90:	movw	r4, #57788	; 0xe1bc
   12b94:	mov	r3, #4
   12b98:	mov	r2, #1
   12b9c:	movt	r0, #4
   12ba0:	str	r3, [sp]
   12ba4:	movt	r4, #2
   12ba8:	ldr	r1, [r0]
   12bac:	movw	r0, #680	; 0x2a8
   12bb0:	mov	r3, r4
   12bb4:	movt	r0, #4
   12bb8:	ldr	r0, [r0]
   12bbc:	stmib	sp, {r0, r2}
   12bc0:	movw	r0, #54611	; 0xd553
   12bc4:	movw	r2, #57816	; 0xe1d8
   12bc8:	movt	r0, #2
   12bcc:	movt	r2, #2
   12bd0:	bl	1fa80 <__assert_fail@plt+0xd9f4>
   12bd4:	ldr	r0, [r4, r0, lsl #2]
   12bd8:	str	r0, [sp, #76]	; 0x4c
   12bdc:	b	12e40 <__assert_fail@plt+0xdb4>
   12be0:	movw	r1, #4688	; 0x1250
   12be4:	mov	r0, #1
   12be8:	movt	r1, #4
   12bec:	strb	r0, [r1, #17]
   12bf0:	mov	r0, r8
   12bf4:	b	122a4 <__assert_fail@plt+0x218>
   12bf8:	mov	r0, #3
   12bfc:	b	12288 <__assert_fail@plt+0x1fc>
   12c00:	movw	r1, #4688	; 0x1250
   12c04:	mov	r0, #1
   12c08:	movt	r1, #4
   12c0c:	strb	r0, [r1, #11]
   12c10:	mov	r0, r8
   12c14:	b	122a4 <__assert_fail@plt+0x218>
   12c18:	movw	r1, #4688	; 0x1250
   12c1c:	mov	r0, #1
   12c20:	movt	r1, #4
   12c24:	strb	r0, [r1, #15]
   12c28:	mov	r0, r8
   12c2c:	b	122a4 <__assert_fail@plt+0x218>
   12c30:	movw	r0, #784	; 0x310
   12c34:	movt	r0, #4
   12c38:	ldr	r1, [r0]
   12c3c:	cmp	r1, #0
   12c40:	beq	13004 <__assert_fail@plt+0xf78>
   12c44:	movw	r0, #680	; 0x2a8
   12c48:	movw	r4, #57600	; 0xe100
   12c4c:	mov	r2, #4
   12c50:	mov	r5, #1
   12c54:	movt	r0, #4
   12c58:	str	r2, [sp]
   12c5c:	movw	r2, #57636	; 0xe124
   12c60:	movt	r4, #2
   12c64:	ldr	r0, [r0]
   12c68:	movt	r2, #2
   12c6c:	mov	r3, r4
   12c70:	stmib	sp, {r0, r5}
   12c74:	movw	r0, #54629	; 0xd565
   12c78:	movt	r0, #2
   12c7c:	bl	1fa80 <__assert_fail@plt+0xd9f4>
   12c80:	ldr	r0, [r4, r0, lsl #2]
   12c84:	ldr	r4, [sp, #72]	; 0x48
   12c88:	cmp	r0, #1
   12c8c:	beq	13028 <__assert_fail@plt+0xf9c>
   12c90:	cmp	r0, #2
   12c94:	bne	13024 <__assert_fail@plt+0xf98>
   12c98:	movw	r4, #648	; 0x288
   12c9c:	movt	r4, #4
   12ca0:	ldrsb	r0, [r4]
   12ca4:	cmn	r0, #1
   12ca8:	bgt	12cb8 <__assert_fail@plt+0xc2c>
   12cac:	mov	r0, #1
   12cb0:	bl	12014 <isatty@plt>
   12cb4:	strb	r0, [r4]
   12cb8:	ldr	r4, [sp, #72]	; 0x48
   12cbc:	uxtb	r5, r0
   12cc0:	cmp	r5, #0
   12cc4:	movwne	r5, #1
   12cc8:	b	13028 <__assert_fail@plt+0xf9c>
   12ccc:	movw	r1, #4688	; 0x1250
   12cd0:	mov	r0, #1
   12cd4:	movt	r1, #4
   12cd8:	strb	r0, [r1, #6]
   12cdc:	mov	r0, r8
   12ce0:	b	122a4 <__assert_fail@plt+0x218>
   12ce4:	movw	r1, #4688	; 0x1250
   12ce8:	mov	r0, #0
   12cec:	movt	r1, #4
   12cf0:	mov	r2, r1
   12cf4:	strb	r0, [r1, #1]
   12cf8:	mov	r1, #1
   12cfc:	strb	r1, [r2, #20]
   12d00:	ldr	r1, [sp, #76]	; 0x4c
   12d04:	cmp	r1, #0
   12d08:	movwne	r1, #1
   12d0c:	str	r1, [sp, #76]	; 0x4c
   12d10:	mov	r1, #0
   12d14:	str	r1, [sp, #64]	; 0x40
   12d18:	b	122a4 <__assert_fail@plt+0x218>
   12d1c:	movw	r0, #784	; 0x310
   12d20:	movw	r1, #54580	; 0xd534
   12d24:	mov	r2, #5
   12d28:	mov	r5, #0
   12d2c:	movt	r0, #4
   12d30:	movt	r1, #2
   12d34:	ldr	r4, [r0]
   12d38:	mov	r0, #0
   12d3c:	bl	11cb4 <dcgettext@plt>
   12d40:	mvn	r2, #-2147483648	; 0x80000000
   12d44:	mov	r1, #2
   12d48:	mov	r3, #0
   12d4c:	stm	sp, {r2, r5}
   12d50:	movw	r2, #56125	; 0xdb3d
   12d54:	str	r0, [sp, #12]
   12d58:	mov	r0, r4
   12d5c:	str	r1, [sp, #16]
   12d60:	mov	r1, #0
   12d64:	ldr	r4, [sp, #72]	; 0x48
   12d68:	movt	r2, #2
   12d6c:	str	r2, [sp, #8]
   12d70:	mov	r2, #0
   12d74:	bl	29c9c <_obstack_memory_used@@Base+0x3918>
   12d78:	str	r0, [sp, #48]	; 0x30
   12d7c:	mov	r0, r8
   12d80:	b	122a4 <__assert_fail@plt+0x218>
   12d84:	movw	r5, #784	; 0x310
   12d88:	movw	r1, #56125	; 0xdb3d
   12d8c:	add	r3, sp, #80	; 0x50
   12d90:	mov	r2, #0
   12d94:	mov	r6, #0
   12d98:	movt	r5, #4
   12d9c:	movt	r1, #2
   12da0:	ldr	r0, [r5]
   12da4:	str	r1, [sp]
   12da8:	mov	r1, #0
   12dac:	bl	29fcc <_obstack_memory_used@@Base+0x3c48>
   12db0:	cmp	r0, #0
   12db4:	beq	12fc4 <__assert_fail@plt+0xf38>
   12db8:	cmp	r0, #1
   12dbc:	bne	15860 <__assert_fail@plt+0x37d4>
   12dc0:	mov	r0, #0
   12dc4:	str	r0, [sp, #52]	; 0x34
   12dc8:	mov	r0, r8
   12dcc:	movw	r6, #56880	; 0xde30
   12dd0:	movt	r6, #2
   12dd4:	b	122a4 <__assert_fail@plt+0x218>
   12dd8:	mov	r0, #0
   12ddc:	b	122a4 <__assert_fail@plt+0x218>
   12de0:	mov	r0, #1
   12de4:	str	r0, [sp, #44]	; 0x2c
   12de8:	mov	r0, r8
   12dec:	b	122a4 <__assert_fail@plt+0x218>
   12df0:	movw	r0, #784	; 0x310
   12df4:	movw	r4, #57676	; 0xe14c
   12df8:	mov	r3, #4
   12dfc:	mov	r2, #1
   12e00:	movt	r0, #4
   12e04:	str	r3, [sp]
   12e08:	movt	r4, #2
   12e0c:	ldr	r1, [r0]
   12e10:	movw	r0, #680	; 0x2a8
   12e14:	mov	r3, r4
   12e18:	movt	r0, #4
   12e1c:	ldr	r0, [r0]
   12e20:	stmib	sp, {r0, r2}
   12e24:	movw	r0, #54597	; 0xd545
   12e28:	movw	r2, #57700	; 0xe164
   12e2c:	movt	r0, #2
   12e30:	movt	r2, #2
   12e34:	bl	1fa80 <__assert_fail@plt+0xd9f4>
   12e38:	ldr	r0, [r4, r0, lsl #2]
   12e3c:	str	r0, [sp, #68]	; 0x44
   12e40:	ldr	r4, [sp, #72]	; 0x48
   12e44:	mov	r0, r8
   12e48:	b	122a4 <__assert_fail@plt+0x218>
   12e4c:	mov	r0, #5
   12e50:	b	12ec4 <__assert_fail@plt+0xe38>
   12e54:	movw	r0, #784	; 0x310
   12e58:	movw	r4, #57728	; 0xe180
   12e5c:	mov	r3, #4
   12e60:	mov	r2, #1
   12e64:	movt	r0, #4
   12e68:	str	r3, [sp]
   12e6c:	movt	r4, #2
   12e70:	ldr	r1, [r0]
   12e74:	movw	r0, #680	; 0x2a8
   12e78:	mov	r3, r4
   12e7c:	movt	r0, #4
   12e80:	ldr	r0, [r0]
   12e84:	stmib	sp, {r0, r2}
   12e88:	movw	r0, #54604	; 0xd54c
   12e8c:	movw	r2, #57756	; 0xe19c
   12e90:	movt	r0, #2
   12e94:	movt	r2, #2
   12e98:	bl	1fa80 <__assert_fail@plt+0xd9f4>
   12e9c:	ldr	r0, [r4, r0, lsl #2]
   12ea0:	ldr	r4, [sp, #72]	; 0x48
   12ea4:	b	12eac <__assert_fail@plt+0xe20>
   12ea8:	mov	r0, #2
   12eac:	movw	r1, #4688	; 0x1250
   12eb0:	movt	r1, #4
   12eb4:	str	r0, [r1, #96]	; 0x60
   12eb8:	mov	r0, r8
   12ebc:	b	122a4 <__assert_fail@plt+0x218>
   12ec0:	mov	r0, #4
   12ec4:	str	r0, [sp, #68]	; 0x44
   12ec8:	mov	r0, r8
   12ecc:	b	122a4 <__assert_fail@plt+0x218>
   12ed0:	movw	r0, #54620	; 0xd55c
   12ed4:	movt	r0, #2
   12ed8:	str	r0, [sp, #60]	; 0x3c
   12edc:	mov	r0, #0
   12ee0:	b	12288 <__assert_fail@plt+0x1fc>
   12ee4:	mov	r0, #0
   12ee8:	str	r0, [sp, #64]	; 0x40
   12eec:	mov	r0, r8
   12ef0:	b	122a4 <__assert_fail@plt+0x218>
   12ef4:	mov	r0, #3
   12ef8:	movw	r1, #4688	; 0x1250
   12efc:	movt	r1, #4
   12f00:	str	r0, [r1, #44]	; 0x2c
   12f04:	mov	r0, r8
   12f08:	b	122a4 <__assert_fail@plt+0x218>
   12f0c:	movw	r0, #784	; 0x310
   12f10:	movw	r4, #63336	; 0xf768
   12f14:	mov	r3, #4
   12f18:	mov	r2, #1
   12f1c:	movt	r0, #4
   12f20:	str	r3, [sp]
   12f24:	movt	r4, #2
   12f28:	ldr	r1, [r0]
   12f2c:	movw	r0, #680	; 0x2a8
   12f30:	mov	r3, r4
   12f34:	movt	r0, #4
   12f38:	ldr	r0, [r0]
   12f3c:	stmib	sp, {r0, r2}
   12f40:	movw	r0, #54667	; 0xd58b
   12f44:	movw	r2, #63292	; 0xf73c
   12f48:	movt	r0, #2
   12f4c:	movt	r2, #2
   12f50:	bl	1fa80 <__assert_fail@plt+0xd9f4>
   12f54:	ldr	r0, [r4, r0, lsl #2]
   12f58:	ldr	r4, [sp, #72]	; 0x48
   12f5c:	b	122a4 <__assert_fail@plt+0x218>
   12f60:	movw	r0, #784	; 0x310
   12f64:	movw	r4, #57848	; 0xe1f8
   12f68:	mov	r3, #4
   12f6c:	mov	r2, #1
   12f70:	movt	r0, #4
   12f74:	str	r3, [sp]
   12f78:	movt	r4, #2
   12f7c:	ldr	r1, [r0]
   12f80:	movw	r0, #680	; 0x2a8
   12f84:	mov	r3, r4
   12f88:	movt	r0, #4
   12f8c:	ldr	r0, [r0]
   12f90:	stmib	sp, {r0, r2}
   12f94:	movw	r0, #54649	; 0xd579
   12f98:	movw	r2, #57864	; 0xe208
   12f9c:	movt	r0, #2
   12fa0:	movt	r2, #2
   12fa4:	bl	1fa80 <__assert_fail@plt+0xd9f4>
   12fa8:	ldr	r0, [r4, r0, lsl #2]
   12fac:	ldr	r4, [sp, #72]	; 0x48
   12fb0:	movw	r1, #4688	; 0x1250
   12fb4:	movt	r1, #4
   12fb8:	str	r0, [r1, #48]	; 0x30
   12fbc:	mov	r0, r8
   12fc0:	b	122a4 <__assert_fail@plt+0x218>
   12fc4:	ldr	r0, [sp, #80]	; 0x50
   12fc8:	ldr	r1, [sp, #84]	; 0x54
   12fcc:	subs	r2, r0, #-2147483648	; 0x80000000
   12fd0:	sbcs	r1, r1, #0
   12fd4:	movwcc	r6, #1
   12fd8:	cmp	r6, #0
   12fdc:	movne	r6, r0
   12fe0:	mov	r0, r8
   12fe4:	str	r6, [sp, #52]	; 0x34
   12fe8:	cmn	r6, #1
   12fec:	movw	r6, #56880	; 0xde30
   12ff0:	movt	r6, #2
   12ff4:	bgt	122a4 <__assert_fail@plt+0x218>
   12ff8:	b	15860 <__assert_fail@plt+0x37d4>
   12ffc:	mov	r5, #1
   13000:	b	13010 <__assert_fail@plt+0xf84>
   13004:	mov	r5, #1
   13008:	b	13028 <__assert_fail@plt+0xf9c>
   1300c:	mov	r5, #0
   13010:	movw	r0, #4688	; 0x1250
   13014:	movt	r0, #4
   13018:	strb	r5, [r0, #12]
   1301c:	mov	r0, r8
   13020:	b	122a4 <__assert_fail@plt+0x218>
   13024:	mov	r5, #0
   13028:	movw	r0, #4688	; 0x1250
   1302c:	movt	r0, #4
   13030:	strb	r5, [r0, #1]
   13034:	mov	r0, r8
   13038:	b	122a4 <__assert_fail@plt+0x218>
   1303c:	movw	r6, #4816	; 0x12d0
   13040:	ldr	r9, [sp, #76]	; 0x4c
   13044:	ldr	sl, [sp, #68]	; 0x44
   13048:	ldr	r7, [sp, #52]	; 0x34
   1304c:	movw	r5, #4688	; 0x1250
   13050:	movt	r6, #4
   13054:	movt	r5, #4
   13058:	ldrd	r0, [r6, #88]	; 0x58
   1305c:	orrs	r0, r0, r1
   13060:	beq	13094 <__assert_fail@plt+0x1008>
   13064:	cmn	r9, #1
   13068:	ble	13104 <__assert_fail@plt+0x1078>
   1306c:	sub	r0, r9, #2
   13070:	str	r9, [r5, #40]	; 0x28
   13074:	cmp	r0, #3
   13078:	bcc	13154 <__assert_fail@plt+0x10c8>
   1307c:	ldrb	r0, [r5, #1]
   13080:	cmp	r0, #0
   13084:	bne	13154 <__assert_fail@plt+0x10c8>
   13088:	cmn	r7, #1
   1308c:	movle	r7, #80	; 0x50
   13090:	b	13294 <__assert_fail@plt+0x1208>
   13094:	movw	r0, #54733	; 0xd5cd
   13098:	movt	r0, #2
   1309c:	bl	11dec <getenv@plt>
   130a0:	add	r1, r5, #100	; 0x64
   130a4:	add	r2, r6, #88	; 0x58
   130a8:	mov	r4, r0
   130ac:	bl	23100 <__assert_fail@plt+0x11074>
   130b0:	cmp	r4, #0
   130b4:	bne	130cc <__assert_fail@plt+0x1040>
   130b8:	movw	r0, #54736	; 0xd5d0
   130bc:	movt	r0, #2
   130c0:	bl	11dec <getenv@plt>
   130c4:	cmp	r0, #0
   130c8:	beq	130e4 <__assert_fail@plt+0x1058>
   130cc:	ldrd	r0, [r6, #88]	; 0x58
   130d0:	movw	r2, #648	; 0x288
   130d4:	movt	r2, #4
   130d8:	strd	r0, [r2, #8]
   130dc:	ldr	r0, [r5, #100]	; 0x64
   130e0:	str	r0, [r5, #104]	; 0x68
   130e4:	ldr	r0, [sp, #44]	; 0x2c
   130e8:	tst	r0, #1
   130ec:	movne	r1, #0
   130f0:	movne	r0, #1024	; 0x400
   130f4:	strdne	r0, [r6, #88]	; 0x58
   130f8:	strne	r1, [r5, #100]	; 0x64
   130fc:	cmn	r9, #1
   13100:	bgt	1306c <__assert_fail@plt+0xfe0>
   13104:	movw	r0, #672	; 0x2a0
   13108:	movt	r0, #4
   1310c:	ldr	r0, [r0]
   13110:	cmp	r0, #1
   13114:	bne	1317c <__assert_fail@plt+0x10f0>
   13118:	movw	r4, #648	; 0x288
   1311c:	movt	r4, #4
   13120:	ldrsb	r0, [r4]
   13124:	cmn	r0, #1
   13128:	bgt	13138 <__assert_fail@plt+0x10ac>
   1312c:	mov	r0, #1
   13130:	bl	12014 <isatty@plt>
   13134:	strb	r0, [r4]
   13138:	mov	r9, #2
   1313c:	tst	r0, #255	; 0xff
   13140:	movweq	r9, #1
   13144:	sub	r0, r9, #2
   13148:	str	r9, [r5, #40]	; 0x28
   1314c:	cmp	r0, #3
   13150:	bcs	1307c <__assert_fail@plt+0xff0>
   13154:	cmn	r7, #1
   13158:	bgt	13294 <__assert_fail@plt+0x1208>
   1315c:	movw	r4, #648	; 0x288
   13160:	movt	r4, #4
   13164:	ldrsb	r0, [r4]
   13168:	cmn	r0, #1
   1316c:	ble	131a0 <__assert_fail@plt+0x1114>
   13170:	tst	r0, #255	; 0xff
   13174:	bne	131b4 <__assert_fail@plt+0x1128>
   13178:	b	131d8 <__assert_fail@plt+0x114c>
   1317c:	sub	r0, r0, #2
   13180:	clz	r0, r0
   13184:	lsr	r0, r0, #5
   13188:	lsl	r9, r0, #1
   1318c:	sub	r0, r9, #2
   13190:	str	r9, [r5, #40]	; 0x28
   13194:	cmp	r0, #3
   13198:	bcs	1307c <__assert_fail@plt+0xff0>
   1319c:	b	13154 <__assert_fail@plt+0x10c8>
   131a0:	mov	r0, #1
   131a4:	bl	12014 <isatty@plt>
   131a8:	strb	r0, [r4]
   131ac:	tst	r0, #255	; 0xff
   131b0:	beq	131d8 <__assert_fail@plt+0x114c>
   131b4:	add	r2, sp, #80	; 0x50
   131b8:	mov	r0, #1
   131bc:	movw	r1, #21523	; 0x5413
   131c0:	bl	11d5c <ioctl@plt>
   131c4:	cmp	r0, #0
   131c8:	blt	131d8 <__assert_fail@plt+0x114c>
   131cc:	ldrh	r7, [sp, #82]	; 0x52
   131d0:	cmp	r7, #0
   131d4:	bne	13294 <__assert_fail@plt+0x1208>
   131d8:	movw	r0, #54747	; 0xd5db
   131dc:	movt	r0, #2
   131e0:	bl	11dec <getenv@plt>
   131e4:	cmp	r0, #0
   131e8:	beq	13290 <__assert_fail@plt+0x1204>
   131ec:	mov	r6, r0
   131f0:	ldrb	r0, [r0]
   131f4:	cmp	r0, #0
   131f8:	beq	13290 <__assert_fail@plt+0x1204>
   131fc:	movw	r0, #56125	; 0xdb3d
   13200:	add	r3, sp, #80	; 0x50
   13204:	mov	r1, #0
   13208:	mov	r2, #0
   1320c:	mov	r7, #0
   13210:	movt	r0, #2
   13214:	str	r0, [sp]
   13218:	mov	r0, r6
   1321c:	bl	29fcc <_obstack_memory_used@@Base+0x3c48>
   13220:	cmp	r0, #0
   13224:	beq	13238 <__assert_fail@plt+0x11ac>
   13228:	cmp	r0, #1
   1322c:	bne	1325c <__assert_fail@plt+0x11d0>
   13230:	mov	r7, #0
   13234:	b	13294 <__assert_fail@plt+0x1208>
   13238:	ldr	r0, [sp, #80]	; 0x50
   1323c:	ldr	r1, [sp, #84]	; 0x54
   13240:	subs	r2, r0, #-2147483648	; 0x80000000
   13244:	sbcs	r1, r1, #0
   13248:	movwcc	r7, #1
   1324c:	cmp	r7, #0
   13250:	movne	r7, r0
   13254:	cmn	r7, #1
   13258:	bgt	13294 <__assert_fail@plt+0x1208>
   1325c:	movw	r1, #54755	; 0xd5e3
   13260:	mov	r0, #0
   13264:	mov	r2, #5
   13268:	movt	r1, #2
   1326c:	bl	11cb4 <dcgettext@plt>
   13270:	mov	r4, r0
   13274:	mov	r0, r6
   13278:	bl	28378 <_obstack_memory_used@@Base+0x1ff4>
   1327c:	mov	r3, r0
   13280:	mov	r0, #0
   13284:	mov	r1, #0
   13288:	mov	r2, r4
   1328c:	bl	11db0 <error@plt>
   13290:	mov	r7, #80	; 0x50
   13294:	movw	r0, #43691	; 0xaaab
   13298:	str	r7, [r5, #112]	; 0x70
   1329c:	movt	r0, #43690	; 0xaaaa
   132a0:	umull	r0, r1, r7, r0
   132a4:	lsr	r2, r1, #1
   132a8:	mov	r0, #1
   132ac:	add	r3, r2, r2, lsl #1
   132b0:	subs	r3, r7, r3
   132b4:	addne	r2, r0, r1, lsr #1
   132b8:	str	r2, [r5, #116]	; 0x74
   132bc:	ldr	r0, [r5, #40]	; 0x28
   132c0:	sub	r0, r0, #2
   132c4:	cmp	r0, #2
   132c8:	bhi	132dc <__assert_fail@plt+0x1250>
   132cc:	ldr	r0, [sp, #48]	; 0x30
   132d0:	cmp	r0, #0
   132d4:	blt	13338 <__assert_fail@plt+0x12ac>
   132d8:	str	r0, [r5, #36]	; 0x24
   132dc:	ldr	r0, [sp, #64]	; 0x40
   132e0:	cmn	r0, #1
   132e4:	bgt	133e0 <__assert_fail@plt+0x1354>
   132e8:	movw	r0, #672	; 0x2a0
   132ec:	mov	r1, #0
   132f0:	movt	r0, #4
   132f4:	str	r1, [sp, #64]	; 0x40
   132f8:	ldr	r0, [r0]
   132fc:	cmp	r0, #1
   13300:	bne	133e0 <__assert_fail@plt+0x1354>
   13304:	movw	r4, #648	; 0x288
   13308:	movt	r4, #4
   1330c:	ldrsb	r0, [r4]
   13310:	cmn	r0, #1
   13314:	bgt	13324 <__assert_fail@plt+0x1298>
   13318:	mov	r0, #1
   1331c:	bl	12014 <isatty@plt>
   13320:	strb	r0, [r4]
   13324:	uxtb	r0, r0
   13328:	cmp	r0, #0
   1332c:	movwne	r0, #1
   13330:	str	r0, [sp, #64]	; 0x40
   13334:	b	133e0 <__assert_fail@plt+0x1354>
   13338:	mov	r0, #8
   1333c:	str	r0, [r5, #36]	; 0x24
   13340:	movw	r0, #54814	; 0xd61e
   13344:	movt	r0, #2
   13348:	bl	11dec <getenv@plt>
   1334c:	cmp	r0, #0
   13350:	beq	132dc <__assert_fail@plt+0x1250>
   13354:	mov	r6, r0
   13358:	movw	r0, #56125	; 0xdb3d
   1335c:	add	r3, sp, #80	; 0x50
   13360:	mov	r1, #0
   13364:	mov	r2, #0
   13368:	movt	r0, #2
   1336c:	str	r0, [sp]
   13370:	mov	r0, r6
   13374:	bl	29fcc <_obstack_memory_used@@Base+0x3c48>
   13378:	cmp	r0, #0
   1337c:	ldreq	r0, [sp, #84]	; 0x54
   13380:	cmpeq	r0, #0
   13384:	beq	133cc <__assert_fail@plt+0x1340>
   13388:	movw	r1, #54822	; 0xd626
   1338c:	mov	r0, #0
   13390:	mov	r2, #5
   13394:	movt	r1, #2
   13398:	bl	11cb4 <dcgettext@plt>
   1339c:	mov	r4, r0
   133a0:	mov	r0, r6
   133a4:	bl	28378 <_obstack_memory_used@@Base+0x1ff4>
   133a8:	mov	r3, r0
   133ac:	mov	r0, #0
   133b0:	mov	r1, #0
   133b4:	mov	r2, r4
   133b8:	bl	11db0 <error@plt>
   133bc:	ldr	r0, [sp, #64]	; 0x40
   133c0:	cmn	r0, #1
   133c4:	bgt	133e0 <__assert_fail@plt+0x1354>
   133c8:	b	132e8 <__assert_fail@plt+0x125c>
   133cc:	ldr	r0, [sp, #80]	; 0x50
   133d0:	str	r0, [r5, #36]	; 0x24
   133d4:	ldr	r0, [sp, #64]	; 0x40
   133d8:	cmn	r0, #1
   133dc:	ble	132e8 <__assert_fail@plt+0x125c>
   133e0:	ldr	r0, [sp, #64]	; 0x40
   133e4:	cmp	r0, #0
   133e8:	movwne	r0, #1
   133ec:	cmn	r8, #1
   133f0:	strb	r0, [r5, #21]
   133f4:	ble	135e4 <__assert_fail@plt+0x1558>
   133f8:	mov	r0, #0
   133fc:	mov	r1, r8
   13400:	bl	26514 <_obstack_memory_used@@Base+0x190>
   13404:	mov	r0, #0
   13408:	mov	r4, #0
   1340c:	bl	264fc <_obstack_memory_used@@Base+0x178>
   13410:	mov	r6, r0
   13414:	ldr	r0, [r5, #40]	; 0x28
   13418:	cmp	r0, #0
   1341c:	beq	13438 <__assert_fail@plt+0x13ac>
   13420:	orr	r0, r0, #1
   13424:	cmp	r0, #3
   13428:	bne	13458 <__assert_fail@plt+0x13cc>
   1342c:	ldr	r0, [r5, #112]	; 0x70
   13430:	cmp	r0, #0
   13434:	beq	13458 <__assert_fail@plt+0x13cc>
   13438:	orr	r1, r6, #2
   1343c:	sub	r0, r6, #6
   13440:	sub	r1, r1, #3
   13444:	clz	r0, r0
   13448:	clz	r1, r1
   1344c:	lsr	r0, r0, #5
   13450:	lsr	r1, r1, #5
   13454:	orr	r4, r0, r1
   13458:	mov	r0, #0
   1345c:	strb	r4, [r5, #22]
   13460:	bl	264c0 <_obstack_memory_used@@Base+0x13c>
   13464:	cmp	r6, #7
   13468:	str	r0, [r5, #88]	; 0x58
   1346c:	bne	1347c <__assert_fail@plt+0x13f0>
   13470:	mov	r1, #32
   13474:	mov	r2, #1
   13478:	bl	2652c <_obstack_memory_used@@Base+0x1a8>
   1347c:	ldr	r0, [r5, #48]	; 0x30
   13480:	mov	r9, sl
   13484:	cmp	r0, #2
   13488:	bcc	134c8 <__assert_fail@plt+0x143c>
   1348c:	sub	r1, r0, #2
   13490:	cmp	r1, #5
   13494:	beq	134c8 <__assert_fail@plt+0x143c>
   13498:	movw	r2, #54884	; 0xd664
   1349c:	movt	r2, #2
   134a0:	ldrb	r1, [r2, r1]
   134a4:	add	r0, r2, r0
   134a8:	sub	r4, r0, #1
   134ac:	ldr	r0, [r5, #88]	; 0x58
   134b0:	uxtb	r1, r1
   134b4:	mov	r2, #1
   134b8:	bl	2652c <_obstack_memory_used@@Base+0x1a8>
   134bc:	ldrb	r1, [r4], #1
   134c0:	cmp	r1, #0
   134c4:	bne	134ac <__assert_fail@plt+0x1420>
   134c8:	mov	r0, #0
   134cc:	bl	264c0 <_obstack_memory_used@@Base+0x13c>
   134d0:	mov	r1, #58	; 0x3a
   134d4:	mov	r2, #1
   134d8:	str	r0, [r5, #120]	; 0x78
   134dc:	bl	2652c <_obstack_memory_used@@Base+0x1a8>
   134e0:	ldr	r0, [r5, #40]	; 0x28
   134e4:	ldrb	r2, [r5, #12]
   134e8:	ldrb	r3, [r5, #20]
   134ec:	ldrb	r1, [r5, #11]
   134f0:	clz	r7, r0
   134f4:	cmp	r3, #0
   134f8:	lsr	r7, r7, #5
   134fc:	bic	r2, r7, r2
   13500:	and	r1, r2, r1
   13504:	mov	r2, #10
   13508:	movwne	r2, #0
   1350c:	strb	r1, [r5, #11]
   13510:	cmp	r2, r1
   13514:	bcc	1589c <__assert_fail@plt+0x3810>
   13518:	cmn	r9, #1
   1351c:	ble	13630 <__assert_fail@plt+0x15a4>
   13520:	ldr	r4, [sp, #60]	; 0x3c
   13524:	cmp	r0, #0
   13528:	str	r9, [r5, #60]	; 0x3c
   1352c:	bne	13eb8 <__assert_fail@plt+0x1e2c>
   13530:	cmp	r4, #0
   13534:	beq	136c4 <__assert_fail@plt+0x1638>
   13538:	movw	r1, #57884	; 0xe21c
   1353c:	mov	r0, r4
   13540:	mov	r2, #6
   13544:	movt	r1, #2
   13548:	bl	1202c <strncmp@plt>
   1354c:	cmp	r0, #0
   13550:	bne	13588 <__assert_fail@plt+0x14fc>
   13554:	movw	r6, #57884	; 0xe21c
   13558:	movt	r6, #2
   1355c:	mov	r0, #2
   13560:	bl	21264 <__assert_fail@plt+0xf1d8>
   13564:	cmp	r0, #0
   13568:	beq	13eb8 <__assert_fail@plt+0x1e2c>
   1356c:	add	r4, r4, #6
   13570:	mov	r1, r6
   13574:	mov	r2, #6
   13578:	mov	r0, r4
   1357c:	bl	1202c <strncmp@plt>
   13580:	cmp	r0, #0
   13584:	beq	1355c <__assert_fail@plt+0x14d0>
   13588:	ldrb	r0, [r4]
   1358c:	cmp	r0, #43	; 0x2b
   13590:	bne	13654 <__assert_fail@plt+0x15c8>
   13594:	add	r8, r4, #1
   13598:	mov	r1, #10
   1359c:	mov	r0, r8
   135a0:	bl	11eb8 <strchr@plt>
   135a4:	cmp	r0, #0
   135a8:	mov	r9, r8
   135ac:	beq	135d4 <__assert_fail@plt+0x1548>
   135b0:	add	r9, r0, #1
   135b4:	mov	r6, r0
   135b8:	mov	r1, #10
   135bc:	mov	r0, r9
   135c0:	bl	11eb8 <strchr@plt>
   135c4:	cmp	r0, #0
   135c8:	bne	159a0 <__assert_fail@plt+0x3914>
   135cc:	mov	r0, #0
   135d0:	strb	r0, [r6]
   135d4:	movw	r0, #648	; 0x288
   135d8:	movt	r0, #4
   135dc:	strd	r8, [r0, #16]
   135e0:	b	137ec <__assert_fail@plt+0x1760>
   135e4:	movw	r0, #55630	; 0xd94e
   135e8:	movt	r0, #2
   135ec:	bl	11dec <getenv@plt>
   135f0:	cmp	r0, #0
   135f4:	beq	13718 <__assert_fail@plt+0x168c>
   135f8:	movw	r7, #63336	; 0xf768
   135fc:	movw	r1, #63292	; 0xf73c
   13600:	mov	r3, #4
   13604:	mov	r6, r0
   13608:	movt	r7, #2
   1360c:	movt	r1, #2
   13610:	mov	r2, r7
   13614:	bl	1f730 <__assert_fail@plt+0xd6a4>
   13618:	cmn	r0, #1
   1361c:	ble	136e4 <__assert_fail@plt+0x1658>
   13620:	ldr	r8, [r7, r0, lsl #2]
   13624:	cmn	r8, #1
   13628:	bgt	133f8 <__assert_fail@plt+0x136c>
   1362c:	b	13718 <__assert_fail@plt+0x168c>
   13630:	cmp	r0, #0
   13634:	beq	136b0 <__assert_fail@plt+0x1624>
   13638:	ldr	r0, [r5, #96]	; 0x60
   1363c:	mov	r1, #0
   13640:	sub	r0, r0, #1
   13644:	cmp	r0, #3
   13648:	movwcc	r1, #5
   1364c:	str	r1, [r5, #60]	; 0x3c
   13650:	b	13eb8 <__assert_fail@plt+0x1e2c>
   13654:	movw	r1, #57892	; 0xe224
   13658:	movw	r2, #57912	; 0xe238
   1365c:	mov	r0, r4
   13660:	mov	r3, #4
   13664:	movt	r1, #2
   13668:	movt	r2, #2
   1366c:	bl	1f730 <__assert_fail@plt+0xd6a4>
   13670:	mov	r2, r0
   13674:	cmn	r0, #1
   13678:	ble	158e0 <__assert_fail@plt+0x3854>
   1367c:	cmp	r2, #3
   13680:	bhi	137ec <__assert_fail@plt+0x1760>
   13684:	add	r0, pc, #0
   13688:	ldr	pc, [r0, r2, lsl #2]
   1368c:	muleq	r1, ip, r6
   13690:	ldrdeq	r3, [r1], -r4
   13694:	andeq	r3, r1, r0, ror r7
   13698:	muleq	r1, r0, r7
   1369c:	movw	r0, #648	; 0x288
   136a0:	movw	r1, #55069	; 0xd71d
   136a4:	movt	r0, #4
   136a8:	movt	r1, #2
   136ac:	b	137e4 <__assert_fail@plt+0x1758>
   136b0:	ldr	r4, [sp, #60]	; 0x3c
   136b4:	mov	r0, #0
   136b8:	str	r0, [r5, #60]	; 0x3c
   136bc:	cmp	r4, #0
   136c0:	bne	13538 <__assert_fail@plt+0x14ac>
   136c4:	movw	r0, #54926	; 0xd68e
   136c8:	movt	r0, #2
   136cc:	bl	11dec <getenv@plt>
   136d0:	movw	r4, #46885	; 0xb725
   136d4:	cmp	r0, #0
   136d8:	movt	r4, #2
   136dc:	movne	r4, r0
   136e0:	b	13538 <__assert_fail@plt+0x14ac>
   136e4:	movw	r1, #55644	; 0xd95c
   136e8:	mov	r0, #0
   136ec:	mov	r2, #5
   136f0:	movt	r1, #2
   136f4:	bl	11cb4 <dcgettext@plt>
   136f8:	mov	r4, r0
   136fc:	mov	r0, r6
   13700:	bl	28378 <_obstack_memory_used@@Base+0x1ff4>
   13704:	mov	r3, r0
   13708:	mov	r0, #0
   1370c:	mov	r1, #0
   13710:	mov	r2, r4
   13714:	bl	11db0 <error@plt>
   13718:	movw	r0, #672	; 0x2a0
   1371c:	mov	r8, #7
   13720:	movt	r0, #4
   13724:	ldr	r0, [r0]
   13728:	cmp	r0, #1
   1372c:	bne	133f8 <__assert_fail@plt+0x136c>
   13730:	movw	r4, #648	; 0x288
   13734:	movt	r4, #4
   13738:	ldrsb	r0, [r4]
   1373c:	cmn	r0, #1
   13740:	ble	13754 <__assert_fail@plt+0x16c8>
   13744:	mov	r8, #3
   13748:	tst	r0, #255	; 0xff
   1374c:	bne	133f8 <__assert_fail@plt+0x136c>
   13750:	b	13404 <__assert_fail@plt+0x1378>
   13754:	mov	r0, #1
   13758:	bl	12014 <isatty@plt>
   1375c:	strb	r0, [r4]
   13760:	mov	r8, #3
   13764:	tst	r0, #255	; 0xff
   13768:	bne	133f8 <__assert_fail@plt+0x136c>
   1376c:	b	13404 <__assert_fail@plt+0x1378>
   13770:	movw	r0, #648	; 0x288
   13774:	movw	r1, #55096	; 0xd738
   13778:	movw	r2, #55108	; 0xd744
   1377c:	movt	r0, #4
   13780:	movt	r2, #2
   13784:	movt	r1, #2
   13788:	str	r2, [r0, #16]
   1378c:	b	137e8 <__assert_fail@plt+0x175c>
   13790:	mov	r0, #2
   13794:	bl	21264 <__assert_fail@plt+0xf1d8>
   13798:	cmp	r0, #0
   1379c:	beq	137ec <__assert_fail@plt+0x1760>
   137a0:	movw	r4, #648	; 0x288
   137a4:	mov	r0, #0
   137a8:	mov	r2, #2
   137ac:	movt	r4, #4
   137b0:	ldr	r1, [r4, #16]
   137b4:	bl	11cb4 <dcgettext@plt>
   137b8:	str	r0, [r4, #16]
   137bc:	mov	r0, #0
   137c0:	mov	r2, #2
   137c4:	ldr	r1, [r4, #20]
   137c8:	bl	11cb4 <dcgettext@plt>
   137cc:	str	r0, [r4, #20]
   137d0:	b	137ec <__assert_fail@plt+0x1760>
   137d4:	movw	r0, #648	; 0x288
   137d8:	movw	r1, #55093	; 0xd735
   137dc:	movt	r0, #4
   137e0:	movt	r1, #2
   137e4:	str	r1, [r0, #16]
   137e8:	str	r1, [r0, #20]
   137ec:	movw	r2, #648	; 0x288
   137f0:	movt	r2, #4
   137f4:	ldr	r9, [r2, #16]
   137f8:	ldrb	r0, [r9]
   137fc:	cmp	r0, #37	; 0x25
   13800:	bne	13844 <__assert_fail@plt+0x17b8>
   13804:	mov	r0, r9
   13808:	ldrb	r1, [r0, #1]!
   1380c:	cmp	r1, #37	; 0x25
   13810:	beq	13830 <__assert_fail@plt+0x17a4>
   13814:	cmp	r1, #98	; 0x62
   13818:	beq	13850 <__assert_fail@plt+0x17c4>
   1381c:	add	r9, r9, #1
   13820:	ldrb	r0, [r9]
   13824:	cmp	r0, #37	; 0x25
   13828:	bne	13844 <__assert_fail@plt+0x17b8>
   1382c:	b	13804 <__assert_fail@plt+0x1778>
   13830:	mov	r9, r0
   13834:	add	r9, r9, #1
   13838:	ldrb	r0, [r9]
   1383c:	cmp	r0, #37	; 0x25
   13840:	beq	13804 <__assert_fail@plt+0x1778>
   13844:	cmp	r0, #0
   13848:	bne	1381c <__assert_fail@plt+0x1790>
   1384c:	mov	r9, #0
   13850:	ldr	r0, [r2, #20]
   13854:	str	r9, [fp, #-44]	; 0xffffffd4
   13858:	ldrb	r1, [r0]
   1385c:	cmp	r1, #37	; 0x25
   13860:	bne	13890 <__assert_fail@plt+0x1804>
   13864:	mov	r1, r0
   13868:	ldrb	r2, [r1, #1]!
   1386c:	cmp	r2, #37	; 0x25
   13870:	beq	13880 <__assert_fail@plt+0x17f4>
   13874:	cmp	r2, #98	; 0x62
   13878:	beq	138b0 <__assert_fail@plt+0x1824>
   1387c:	mov	r1, r0
   13880:	add	r0, r1, #1
   13884:	ldrb	r1, [r0]
   13888:	cmp	r1, #37	; 0x25
   1388c:	beq	13864 <__assert_fail@plt+0x17d8>
   13890:	cmp	r1, #0
   13894:	mov	r1, r0
   13898:	bne	13880 <__assert_fail@plt+0x17f4>
   1389c:	mov	r0, #0
   138a0:	cmp	r9, #0
   138a4:	str	r0, [fp, #-40]	; 0xffffffd8
   138a8:	bne	138b4 <__assert_fail@plt+0x1828>
   138ac:	b	13eb8 <__assert_fail@plt+0x1e2c>
   138b0:	str	r0, [fp, #-40]	; 0xffffffd8
   138b4:	mov	r5, #12
   138b8:	add	r7, sp, #80	; 0x50
   138bc:	sub	r8, fp, #36	; 0x24
   138c0:	mov	r4, #0
   138c4:	mov	sl, #0
   138c8:	movw	r0, #14
   138cc:	str	r5, [fp, #-36]	; 0xffffffdc
   138d0:	movt	r0, #2
   138d4:	add	r0, sl, r0
   138d8:	bl	11f9c <nl_langinfo@plt>
   138dc:	mov	r1, #37	; 0x25
   138e0:	mov	r6, r0
   138e4:	bl	11eb8 <strchr@plt>
   138e8:	cmp	r0, #0
   138ec:	bne	13eb8 <__assert_fail@plt+0x1e2c>
   138f0:	bl	11e70 <__ctype_b_loc@plt>
   138f4:	ldrb	r1, [r6]
   138f8:	ldr	r0, [r0]
   138fc:	mov	r2, #128	; 0x80
   13900:	mov	r3, r8
   13904:	add	r0, r0, r1, lsl #1
   13908:	mov	r1, #0
   1390c:	ldrh	r0, [r0]
   13910:	str	r1, [sp, #4]
   13914:	mov	r1, r7
   13918:	ubfx	r0, r0, #11, #1
   1391c:	str	r0, [sp]
   13920:	mov	r0, r6
   13924:	bl	2377c <__assert_fail@plt+0x116f0>
   13928:	cmp	r0, #127	; 0x7f
   1392c:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13930:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13934:	add	sl, sl, #1
   13938:	add	r7, r7, #128	; 0x80
   1393c:	cmp	r4, r0
   13940:	movls	r4, r0
   13944:	cmp	sl, #12
   13948:	bcc	138c8 <__assert_fail@plt+0x183c>
   1394c:	cmp	r5, r4
   13950:	mov	r5, r4
   13954:	add	r7, sp, #80	; 0x50
   13958:	bhi	138c0 <__assert_fail@plt+0x1834>
   1395c:	movw	r0, #1224	; 0x4c8
   13960:	movw	sl, #648	; 0x288
   13964:	movt	r0, #4
   13968:	movt	sl, #4
   1396c:	add	r6, r0, #1408	; 0x580
   13970:	sub	r0, fp, #44	; 0x2c
   13974:	add	r0, r0, #4
   13978:	str	r0, [sp, #76]	; 0x4c
   1397c:	add	r0, sp, #80	; 0x50
   13980:	add	r1, r0, #1408	; 0x580
   13984:	str	r1, [sp, #24]
   13988:	add	r1, r0, #1280	; 0x500
   1398c:	str	r1, [sp, #28]
   13990:	add	r1, r0, #1152	; 0x480
   13994:	str	r1, [sp, #32]
   13998:	add	r1, r0, #1024	; 0x400
   1399c:	str	r1, [sp, #36]	; 0x24
   139a0:	add	r1, r0, #896	; 0x380
   139a4:	str	r1, [sp, #40]	; 0x28
   139a8:	add	r1, r0, #768	; 0x300
   139ac:	str	r1, [sp, #44]	; 0x2c
   139b0:	add	r1, r0, #640	; 0x280
   139b4:	str	r1, [sp, #48]	; 0x30
   139b8:	add	r1, r0, #512	; 0x200
   139bc:	str	r1, [sp, #52]	; 0x34
   139c0:	add	r1, r0, #384	; 0x180
   139c4:	str	r1, [sp, #60]	; 0x3c
   139c8:	add	r1, r0, #256	; 0x100
   139cc:	add	r0, r0, #128	; 0x80
   139d0:	str	r1, [sp, #64]	; 0x40
   139d4:	str	r0, [sp, #68]	; 0x44
   139d8:	mov	r0, #0
   139dc:	mov	r1, sl
   139e0:	b	139f8 <__assert_fail@plt+0x196c>
   139e4:	ldr	r1, [sp, #76]	; 0x4c
   139e8:	add	r6, r6, #1536	; 0x600
   139ec:	ldr	r9, [r1, sl, lsl #2]
   139f0:	movw	r1, #648	; 0x288
   139f4:	movt	r1, #4
   139f8:	mov	sl, r0
   139fc:	add	r0, r1, r0, lsl #2
   13a00:	cmp	r9, #0
   13a04:	ldr	r4, [r0, #16]
   13a08:	beq	13cb0 <__assert_fail@plt+0x1c24>
   13a0c:	sub	r5, r9, r4
   13a10:	cmp	r5, #128	; 0x80
   13a14:	bgt	13eb8 <__assert_fail@plt+0x1e2c>
   13a18:	movw	r0, #55740	; 0xd9bc
   13a1c:	add	r8, r9, #2
   13a20:	mov	r1, #128	; 0x80
   13a24:	mov	r2, #1
   13a28:	mvn	r3, #0
   13a2c:	movt	r0, #2
   13a30:	stm	sp, {r0, r5}
   13a34:	add	r0, sp, #80	; 0x50
   13a38:	str	r4, [sp, #8]
   13a3c:	str	r8, [sp, #16]
   13a40:	str	r0, [sp, #12]
   13a44:	movw	r0, #64128	; 0xfa80
   13a48:	movt	r0, #65535	; 0xffff
   13a4c:	add	r7, r6, r0
   13a50:	mov	r0, r7
   13a54:	bl	12068 <__snprintf_chk@plt>
   13a58:	cmp	r0, #127	; 0x7f
   13a5c:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13a60:	movw	r0, #55740	; 0xd9bc
   13a64:	mov	r1, #128	; 0x80
   13a68:	mov	r2, #1
   13a6c:	mvn	r3, #0
   13a70:	movt	r0, #2
   13a74:	stm	sp, {r0, r5}
   13a78:	str	r4, [sp, #8]
   13a7c:	str	r8, [sp, #16]
   13a80:	ldr	r0, [sp, #68]	; 0x44
   13a84:	str	r0, [sp, #12]
   13a88:	add	r0, r7, #128	; 0x80
   13a8c:	bl	12068 <__snprintf_chk@plt>
   13a90:	cmp	r0, #128	; 0x80
   13a94:	bcs	13eb8 <__assert_fail@plt+0x1e2c>
   13a98:	movw	r0, #55740	; 0xd9bc
   13a9c:	mov	r1, #128	; 0x80
   13aa0:	mov	r2, #1
   13aa4:	mvn	r3, #0
   13aa8:	movt	r0, #2
   13aac:	stm	sp, {r0, r5}
   13ab0:	str	r4, [sp, #8]
   13ab4:	str	r8, [sp, #16]
   13ab8:	ldr	r0, [sp, #64]	; 0x40
   13abc:	str	r0, [sp, #12]
   13ac0:	add	r0, r7, #256	; 0x100
   13ac4:	bl	12068 <__snprintf_chk@plt>
   13ac8:	cmp	r0, #127	; 0x7f
   13acc:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13ad0:	movw	r0, #55740	; 0xd9bc
   13ad4:	mov	r1, #128	; 0x80
   13ad8:	mov	r2, #1
   13adc:	mvn	r3, #0
   13ae0:	movt	r0, #2
   13ae4:	stm	sp, {r0, r5}
   13ae8:	str	r4, [sp, #8]
   13aec:	str	r8, [sp, #16]
   13af0:	ldr	r0, [sp, #60]	; 0x3c
   13af4:	str	r0, [sp, #12]
   13af8:	add	r0, r7, #384	; 0x180
   13afc:	bl	12068 <__snprintf_chk@plt>
   13b00:	cmp	r0, #127	; 0x7f
   13b04:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13b08:	movw	r0, #55740	; 0xd9bc
   13b0c:	mov	r1, #128	; 0x80
   13b10:	mov	r2, #1
   13b14:	mvn	r3, #0
   13b18:	movt	r0, #2
   13b1c:	stm	sp, {r0, r5}
   13b20:	str	r4, [sp, #8]
   13b24:	str	r8, [sp, #16]
   13b28:	ldr	r0, [sp, #52]	; 0x34
   13b2c:	str	r0, [sp, #12]
   13b30:	add	r0, r7, #512	; 0x200
   13b34:	bl	12068 <__snprintf_chk@plt>
   13b38:	cmp	r0, #127	; 0x7f
   13b3c:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13b40:	movw	r0, #55740	; 0xd9bc
   13b44:	mov	r1, #128	; 0x80
   13b48:	mov	r2, #1
   13b4c:	mvn	r3, #0
   13b50:	movt	r0, #2
   13b54:	stm	sp, {r0, r5}
   13b58:	str	r4, [sp, #8]
   13b5c:	str	r8, [sp, #16]
   13b60:	ldr	r0, [sp, #48]	; 0x30
   13b64:	str	r0, [sp, #12]
   13b68:	add	r0, r7, #640	; 0x280
   13b6c:	bl	12068 <__snprintf_chk@plt>
   13b70:	cmp	r0, #127	; 0x7f
   13b74:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13b78:	movw	r0, #55740	; 0xd9bc
   13b7c:	mov	r1, #128	; 0x80
   13b80:	mov	r2, #1
   13b84:	mvn	r3, #0
   13b88:	movt	r0, #2
   13b8c:	stm	sp, {r0, r5}
   13b90:	str	r4, [sp, #8]
   13b94:	str	r8, [sp, #16]
   13b98:	ldr	r0, [sp, #44]	; 0x2c
   13b9c:	str	r0, [sp, #12]
   13ba0:	add	r0, r7, #768	; 0x300
   13ba4:	bl	12068 <__snprintf_chk@plt>
   13ba8:	cmp	r0, #127	; 0x7f
   13bac:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13bb0:	movw	r0, #55740	; 0xd9bc
   13bb4:	mov	r1, #128	; 0x80
   13bb8:	mov	r2, #1
   13bbc:	mvn	r3, #0
   13bc0:	movt	r0, #2
   13bc4:	stm	sp, {r0, r5}
   13bc8:	str	r4, [sp, #8]
   13bcc:	str	r8, [sp, #16]
   13bd0:	ldr	r0, [sp, #40]	; 0x28
   13bd4:	str	r0, [sp, #12]
   13bd8:	add	r0, r7, #896	; 0x380
   13bdc:	bl	12068 <__snprintf_chk@plt>
   13be0:	cmp	r0, #127	; 0x7f
   13be4:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13be8:	movw	r0, #55740	; 0xd9bc
   13bec:	mov	r1, #128	; 0x80
   13bf0:	mov	r2, #1
   13bf4:	mvn	r3, #0
   13bf8:	movt	r0, #2
   13bfc:	stm	sp, {r0, r5}
   13c00:	str	r4, [sp, #8]
   13c04:	str	r8, [sp, #16]
   13c08:	ldr	r0, [sp, #36]	; 0x24
   13c0c:	str	r0, [sp, #12]
   13c10:	add	r0, r7, #1024	; 0x400
   13c14:	bl	12068 <__snprintf_chk@plt>
   13c18:	cmp	r0, #127	; 0x7f
   13c1c:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13c20:	movw	r0, #55740	; 0xd9bc
   13c24:	mov	r1, #128	; 0x80
   13c28:	mov	r2, #1
   13c2c:	mvn	r3, #0
   13c30:	movt	r0, #2
   13c34:	stm	sp, {r0, r5}
   13c38:	str	r4, [sp, #8]
   13c3c:	str	r8, [sp, #16]
   13c40:	ldr	r0, [sp, #32]
   13c44:	str	r0, [sp, #12]
   13c48:	sub	r0, r6, #256	; 0x100
   13c4c:	bl	12068 <__snprintf_chk@plt>
   13c50:	cmp	r0, #127	; 0x7f
   13c54:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13c58:	movw	r0, #55740	; 0xd9bc
   13c5c:	mov	r1, #128	; 0x80
   13c60:	mov	r2, #1
   13c64:	mvn	r3, #0
   13c68:	movt	r0, #2
   13c6c:	stm	sp, {r0, r5}
   13c70:	str	r4, [sp, #8]
   13c74:	str	r8, [sp, #16]
   13c78:	ldr	r0, [sp, #28]
   13c7c:	str	r0, [sp, #12]
   13c80:	sub	r0, r6, #128	; 0x80
   13c84:	bl	12068 <__snprintf_chk@plt>
   13c88:	cmp	r0, #127	; 0x7f
   13c8c:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13c90:	movw	r0, #55740	; 0xd9bc
   13c94:	movt	r0, #2
   13c98:	stm	sp, {r0, r5}
   13c9c:	str	r4, [sp, #8]
   13ca0:	str	r8, [sp, #16]
   13ca4:	ldr	r0, [sp, #24]
   13ca8:	str	r0, [sp, #12]
   13cac:	b	13e80 <__assert_fail@plt+0x1df4>
   13cb0:	movw	r0, #62850	; 0xf582
   13cb4:	mov	r1, #128	; 0x80
   13cb8:	mov	r2, #1
   13cbc:	mvn	r3, #0
   13cc0:	movt	r0, #2
   13cc4:	stm	sp, {r0, r4}
   13cc8:	movw	r0, #64128	; 0xfa80
   13ccc:	movt	r0, #65535	; 0xffff
   13cd0:	add	r7, r6, r0
   13cd4:	mov	r0, r7
   13cd8:	bl	12068 <__snprintf_chk@plt>
   13cdc:	cmp	r0, #127	; 0x7f
   13ce0:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13ce4:	movw	r0, #62850	; 0xf582
   13ce8:	mov	r1, #128	; 0x80
   13cec:	mov	r2, #1
   13cf0:	mvn	r3, #0
   13cf4:	movt	r0, #2
   13cf8:	stm	sp, {r0, r4}
   13cfc:	add	r0, r7, #128	; 0x80
   13d00:	bl	12068 <__snprintf_chk@plt>
   13d04:	cmp	r0, #128	; 0x80
   13d08:	bcs	13eb8 <__assert_fail@plt+0x1e2c>
   13d0c:	movw	r0, #62850	; 0xf582
   13d10:	mov	r1, #128	; 0x80
   13d14:	mov	r2, #1
   13d18:	mvn	r3, #0
   13d1c:	movt	r0, #2
   13d20:	stm	sp, {r0, r4}
   13d24:	add	r0, r7, #256	; 0x100
   13d28:	bl	12068 <__snprintf_chk@plt>
   13d2c:	cmp	r0, #127	; 0x7f
   13d30:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13d34:	movw	r0, #62850	; 0xf582
   13d38:	mov	r1, #128	; 0x80
   13d3c:	mov	r2, #1
   13d40:	mvn	r3, #0
   13d44:	movt	r0, #2
   13d48:	stm	sp, {r0, r4}
   13d4c:	add	r0, r7, #384	; 0x180
   13d50:	bl	12068 <__snprintf_chk@plt>
   13d54:	cmp	r0, #127	; 0x7f
   13d58:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13d5c:	movw	r0, #62850	; 0xf582
   13d60:	mov	r1, #128	; 0x80
   13d64:	mov	r2, #1
   13d68:	mvn	r3, #0
   13d6c:	movt	r0, #2
   13d70:	stm	sp, {r0, r4}
   13d74:	add	r0, r7, #512	; 0x200
   13d78:	bl	12068 <__snprintf_chk@plt>
   13d7c:	cmp	r0, #127	; 0x7f
   13d80:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13d84:	movw	r0, #62850	; 0xf582
   13d88:	mov	r1, #128	; 0x80
   13d8c:	mov	r2, #1
   13d90:	mvn	r3, #0
   13d94:	movt	r0, #2
   13d98:	stm	sp, {r0, r4}
   13d9c:	add	r0, r7, #640	; 0x280
   13da0:	bl	12068 <__snprintf_chk@plt>
   13da4:	cmp	r0, #127	; 0x7f
   13da8:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13dac:	movw	r0, #62850	; 0xf582
   13db0:	mov	r1, #128	; 0x80
   13db4:	mov	r2, #1
   13db8:	mvn	r3, #0
   13dbc:	movt	r0, #2
   13dc0:	stm	sp, {r0, r4}
   13dc4:	add	r0, r7, #768	; 0x300
   13dc8:	bl	12068 <__snprintf_chk@plt>
   13dcc:	cmp	r0, #127	; 0x7f
   13dd0:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13dd4:	movw	r0, #62850	; 0xf582
   13dd8:	mov	r1, #128	; 0x80
   13ddc:	mov	r2, #1
   13de0:	mvn	r3, #0
   13de4:	movt	r0, #2
   13de8:	stm	sp, {r0, r4}
   13dec:	add	r0, r7, #896	; 0x380
   13df0:	bl	12068 <__snprintf_chk@plt>
   13df4:	cmp	r0, #127	; 0x7f
   13df8:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13dfc:	movw	r0, #62850	; 0xf582
   13e00:	mov	r1, #128	; 0x80
   13e04:	mov	r2, #1
   13e08:	mvn	r3, #0
   13e0c:	movt	r0, #2
   13e10:	stm	sp, {r0, r4}
   13e14:	add	r0, r7, #1024	; 0x400
   13e18:	bl	12068 <__snprintf_chk@plt>
   13e1c:	cmp	r0, #127	; 0x7f
   13e20:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13e24:	movw	r0, #62850	; 0xf582
   13e28:	mov	r1, #128	; 0x80
   13e2c:	mov	r2, #1
   13e30:	mvn	r3, #0
   13e34:	movt	r0, #2
   13e38:	stm	sp, {r0, r4}
   13e3c:	sub	r0, r6, #256	; 0x100
   13e40:	bl	12068 <__snprintf_chk@plt>
   13e44:	cmp	r0, #127	; 0x7f
   13e48:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13e4c:	movw	r0, #62850	; 0xf582
   13e50:	mov	r1, #128	; 0x80
   13e54:	mov	r2, #1
   13e58:	mvn	r3, #0
   13e5c:	movt	r0, #2
   13e60:	stm	sp, {r0, r4}
   13e64:	sub	r0, r6, #128	; 0x80
   13e68:	bl	12068 <__snprintf_chk@plt>
   13e6c:	cmp	r0, #127	; 0x7f
   13e70:	bhi	13eb8 <__assert_fail@plt+0x1e2c>
   13e74:	movw	r0, #62850	; 0xf582
   13e78:	movt	r0, #2
   13e7c:	stm	sp, {r0, r4}
   13e80:	mov	r0, r6
   13e84:	mov	r1, #128	; 0x80
   13e88:	mov	r2, #1
   13e8c:	mvn	r3, #0
   13e90:	bl	12068 <__snprintf_chk@plt>
   13e94:	cmp	r0, #128	; 0x80
   13e98:	bcs	13eb8 <__assert_fail@plt+0x1e2c>
   13e9c:	add	r0, sl, #1
   13ea0:	cmp	r0, #1
   13ea4:	bls	139e4 <__assert_fail@plt+0x1958>
   13ea8:	movw	r1, #4688	; 0x1250
   13eac:	mov	r0, #1
   13eb0:	movt	r1, #4
   13eb4:	strb	r0, [r1, #23]
   13eb8:	movw	r0, #768	; 0x300
   13ebc:	mov	sl, #1
   13ec0:	movt	r0, #4
   13ec4:	ldr	r5, [r0]
   13ec8:	movw	r0, #4688	; 0x1250
   13ecc:	movt	r0, #4
   13ed0:	ldrb	r0, [r0, #1]
   13ed4:	cmp	r0, #0
   13ed8:	beq	14568 <__assert_fail@plt+0x24dc>
   13edc:	movw	r0, #55749	; 0xd9c5
   13ee0:	movt	r0, #2
   13ee4:	bl	11dec <getenv@plt>
   13ee8:	str	r0, [sp, #80]	; 0x50
   13eec:	cmp	r0, #0
   13ef0:	ldrbne	r1, [r0]
   13ef4:	cmpne	r1, #0
   13ef8:	bne	13fb4 <__assert_fail@plt+0x1f28>
   13efc:	movw	r0, #55759	; 0xd9cf
   13f00:	movt	r0, #2
   13f04:	bl	11dec <getenv@plt>
   13f08:	cmp	r0, #0
   13f0c:	ldrbne	r0, [r0]
   13f10:	cmpne	r0, #0
   13f14:	bne	14548 <__assert_fail@plt+0x24bc>
   13f18:	movw	r0, #55764	; 0xd9d4
   13f1c:	movt	r0, #2
   13f20:	bl	11dec <getenv@plt>
   13f24:	cmp	r0, #0
   13f28:	beq	13fa0 <__assert_fail@plt+0x1f14>
   13f2c:	mov	r6, r0
   13f30:	ldrb	r0, [r0]
   13f34:	cmp	r0, #0
   13f38:	beq	13fa0 <__assert_fail@plt+0x1f14>
   13f3c:	movw	r9, #57928	; 0xe248
   13f40:	movw	r8, #55855	; 0xda2f
   13f44:	movw	r4, #4310	; 0x10d6
   13f48:	movt	r9, #2
   13f4c:	movt	r8, #2
   13f50:	mov	r7, r9
   13f54:	mov	r0, r7
   13f58:	mov	r1, r8
   13f5c:	mov	r2, #5
   13f60:	bl	1202c <strncmp@plt>
   13f64:	cmp	r0, #0
   13f68:	bne	13f84 <__assert_fail@plt+0x1ef8>
   13f6c:	add	r0, r7, #5
   13f70:	mov	r1, r6
   13f74:	mov	r2, #0
   13f78:	bl	11dd4 <fnmatch@plt>
   13f7c:	cmp	r0, #0
   13f80:	beq	14548 <__assert_fail@plt+0x24bc>
   13f84:	mov	r0, r7
   13f88:	bl	11eac <strlen@plt>
   13f8c:	add	r0, r7, r0
   13f90:	add	r7, r0, #1
   13f94:	sub	r0, r7, r9
   13f98:	cmp	r0, r4
   13f9c:	bcc	13f54 <__assert_fail@plt+0x1ec8>
   13fa0:	movw	r1, #4688	; 0x1250
   13fa4:	mov	r0, #0
   13fa8:	movt	r1, #4
   13fac:	strb	r0, [r1, #1]
   13fb0:	b	14554 <__assert_fail@plt+0x24c8>
   13fb4:	mov	r6, #0
   13fb8:	movw	r1, #16191	; 0x3f3f
   13fbc:	strb	r6, [fp, #-34]	; 0xffffffde
   13fc0:	strh	r1, [fp, #-36]	; 0xffffffdc
   13fc4:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   13fc8:	movw	r1, #4816	; 0x12d0
   13fcc:	movw	r8, #456	; 0x1c8
   13fd0:	str	r0, [fp, #-44]	; 0xffffffd4
   13fd4:	add	r9, sp, #80	; 0x50
   13fd8:	sub	r7, fp, #36	; 0x24
   13fdc:	movt	r1, #4
   13fe0:	movt	r8, #4
   13fe4:	str	r0, [r1, #4]
   13fe8:	mov	r0, #1
   13fec:	b	14038 <__assert_fail@plt+0x1fac>
   13ff0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13ff4:	add	r3, r6, #8
   13ff8:	mov	r1, r9
   13ffc:	mov	r2, #0
   14000:	str	r0, [r6, #12]
   14004:	sub	r0, fp, #44	; 0x2c
   14008:	bl	192fc <__assert_fail@plt+0x7270>
   1400c:	cmp	r0, #0
   14010:	mov	r0, #6
   14014:	movwne	r0, #1
   14018:	b	14038 <__assert_fail@plt+0x1fac>
   1401c:	ldr	r0, [sp, #80]	; 0x50
   14020:	add	r1, r0, #1
   14024:	str	r1, [sp, #80]	; 0x50
   14028:	ldrb	r1, [r0]
   1402c:	mov	r0, #6
   14030:	cmp	r1, #61	; 0x3d
   14034:	beq	13ff0 <__assert_fail@plt+0x1f64>
   14038:	and	r0, r0, #7
   1403c:	sub	r0, r0, #1
   14040:	cmp	r0, #5
   14044:	bhi	15840 <__assert_fail@plt+0x37b4>
   14048:	add	r1, pc, #0
   1404c:	ldr	pc, [r1, r0, lsl #2]
   14050:	andeq	r4, r1, r8, rrx
   14054:	muleq	r1, ip, r0
   14058:	andeq	r4, r1, r4, asr #1
   1405c:	andeq	r4, r1, ip, lsl r0
   14060:	andeq	r5, r1, r0, asr #16
   14064:	andeq	r4, r1, r8, lsr #9
   14068:	ldr	r4, [sp, #80]	; 0x50
   1406c:	ldrb	r0, [r4]
   14070:	cmp	r0, #42	; 0x2a
   14074:	beq	14338 <__assert_fail@plt+0x22ac>
   14078:	cmp	r0, #58	; 0x3a
   1407c:	beq	14328 <__assert_fail@plt+0x229c>
   14080:	cmp	r0, #0
   14084:	beq	14510 <__assert_fail@plt+0x2484>
   14088:	strb	r0, [fp, #-36]	; 0xffffffdc
   1408c:	add	r0, r4, #1
   14090:	str	r0, [sp, #80]	; 0x50
   14094:	mov	r0, #2
   14098:	b	14038 <__assert_fail@plt+0x1fac>
   1409c:	ldr	r1, [sp, #80]	; 0x50
   140a0:	mov	r0, #6
   140a4:	ldrb	r2, [r1]
   140a8:	cmp	r2, #0
   140ac:	beq	14038 <__assert_fail@plt+0x1fac>
   140b0:	add	r0, r1, #1
   140b4:	strb	r2, [fp, #-35]	; 0xffffffdd
   140b8:	str	r0, [sp, #80]	; 0x50
   140bc:	mov	r0, #3
   140c0:	b	14038 <__assert_fail@plt+0x1fac>
   140c4:	ldr	r0, [sp, #80]	; 0x50
   140c8:	add	r1, r0, #1
   140cc:	str	r1, [sp, #80]	; 0x50
   140d0:	ldrb	r0, [r0]
   140d4:	cmp	r0, #61	; 0x3d
   140d8:	mov	r0, #6
   140dc:	bne	14038 <__assert_fail@plt+0x1fac>
   140e0:	movw	r1, #55861	; 0xda35
   140e4:	mov	r0, r7
   140e8:	movt	r1, #2
   140ec:	bl	11bd0 <strcmp@plt>
   140f0:	cmp	r0, #0
   140f4:	beq	14390 <__assert_fail@plt+0x2304>
   140f8:	movw	r1, #55864	; 0xda38
   140fc:	mov	r0, r7
   14100:	movt	r1, #2
   14104:	bl	11bd0 <strcmp@plt>
   14108:	cmp	r0, #0
   1410c:	beq	14398 <__assert_fail@plt+0x230c>
   14110:	movw	r1, #55867	; 0xda3b
   14114:	mov	r0, r7
   14118:	movt	r1, #2
   1411c:	bl	11bd0 <strcmp@plt>
   14120:	cmp	r0, #0
   14124:	beq	143a0 <__assert_fail@plt+0x2314>
   14128:	movw	r1, #55230	; 0xd7be
   1412c:	mov	r0, r7
   14130:	movt	r1, #2
   14134:	bl	11bd0 <strcmp@plt>
   14138:	cmp	r0, #0
   1413c:	beq	143a8 <__assert_fail@plt+0x231c>
   14140:	movw	r1, #55488	; 0xd8c0
   14144:	mov	r0, r7
   14148:	movt	r1, #2
   1414c:	bl	11bd0 <strcmp@plt>
   14150:	cmp	r0, #0
   14154:	beq	143b0 <__assert_fail@plt+0x2324>
   14158:	movw	r1, #55870	; 0xda3e
   1415c:	mov	r0, r7
   14160:	movt	r1, #2
   14164:	bl	11bd0 <strcmp@plt>
   14168:	cmp	r0, #0
   1416c:	beq	143b8 <__assert_fail@plt+0x232c>
   14170:	movw	r1, #55873	; 0xda41
   14174:	mov	r0, r7
   14178:	movt	r1, #2
   1417c:	bl	11bd0 <strcmp@plt>
   14180:	cmp	r0, #0
   14184:	beq	143c0 <__assert_fail@plt+0x2334>
   14188:	movw	r1, #55876	; 0xda44
   1418c:	mov	r0, r7
   14190:	movt	r1, #2
   14194:	bl	11bd0 <strcmp@plt>
   14198:	cmp	r0, #0
   1419c:	beq	143c8 <__assert_fail@plt+0x233c>
   141a0:	movw	r1, #55879	; 0xda47
   141a4:	mov	r0, r7
   141a8:	movt	r1, #2
   141ac:	bl	11bd0 <strcmp@plt>
   141b0:	cmp	r0, #0
   141b4:	beq	143d0 <__assert_fail@plt+0x2344>
   141b8:	movw	r1, #55737	; 0xd9b9
   141bc:	mov	r0, r7
   141c0:	movt	r1, #2
   141c4:	bl	11bd0 <strcmp@plt>
   141c8:	cmp	r0, #0
   141cc:	beq	143d8 <__assert_fail@plt+0x234c>
   141d0:	movw	r1, #55882	; 0xda4a
   141d4:	mov	r0, r7
   141d8:	movt	r1, #2
   141dc:	bl	11bd0 <strcmp@plt>
   141e0:	cmp	r0, #0
   141e4:	beq	143e0 <__assert_fail@plt+0x2354>
   141e8:	movw	r1, #55885	; 0xda4d
   141ec:	mov	r0, r7
   141f0:	movt	r1, #2
   141f4:	bl	11bd0 <strcmp@plt>
   141f8:	cmp	r0, #0
   141fc:	beq	143e8 <__assert_fail@plt+0x235c>
   14200:	movw	r1, #55888	; 0xda50
   14204:	mov	r0, r7
   14208:	movt	r1, #2
   1420c:	bl	11bd0 <strcmp@plt>
   14210:	cmp	r0, #0
   14214:	beq	143f0 <__assert_fail@plt+0x2364>
   14218:	movw	r1, #55464	; 0xd8a8
   1421c:	mov	r0, r7
   14220:	movt	r1, #2
   14224:	bl	11bd0 <strcmp@plt>
   14228:	cmp	r0, #0
   1422c:	beq	143f8 <__assert_fail@plt+0x236c>
   14230:	movw	r1, #55891	; 0xda53
   14234:	mov	r0, r7
   14238:	movt	r1, #2
   1423c:	bl	11bd0 <strcmp@plt>
   14240:	cmp	r0, #0
   14244:	beq	14400 <__assert_fail@plt+0x2374>
   14248:	movw	r1, #55894	; 0xda56
   1424c:	mov	r0, r7
   14250:	movt	r1, #2
   14254:	bl	11bd0 <strcmp@plt>
   14258:	cmp	r0, #0
   1425c:	beq	14408 <__assert_fail@plt+0x237c>
   14260:	movw	r1, #55897	; 0xda59
   14264:	mov	r0, r7
   14268:	movt	r1, #2
   1426c:	bl	11bd0 <strcmp@plt>
   14270:	cmp	r0, #0
   14274:	beq	14410 <__assert_fail@plt+0x2384>
   14278:	movw	r1, #55900	; 0xda5c
   1427c:	mov	r0, r7
   14280:	movt	r1, #2
   14284:	bl	11bd0 <strcmp@plt>
   14288:	cmp	r0, #0
   1428c:	beq	14418 <__assert_fail@plt+0x238c>
   14290:	movw	r1, #55155	; 0xd773
   14294:	mov	r0, r7
   14298:	movt	r1, #2
   1429c:	bl	11bd0 <strcmp@plt>
   142a0:	cmp	r0, #0
   142a4:	beq	14420 <__assert_fail@plt+0x2394>
   142a8:	movw	r1, #55903	; 0xda5f
   142ac:	mov	r0, r7
   142b0:	movt	r1, #2
   142b4:	bl	11bd0 <strcmp@plt>
   142b8:	cmp	r0, #0
   142bc:	beq	14428 <__assert_fail@plt+0x239c>
   142c0:	movw	r1, #55906	; 0xda62
   142c4:	mov	r0, r7
   142c8:	movt	r1, #2
   142cc:	bl	11bd0 <strcmp@plt>
   142d0:	cmp	r0, #0
   142d4:	beq	14430 <__assert_fail@plt+0x23a4>
   142d8:	movw	r1, #55909	; 0xda65
   142dc:	mov	r0, r7
   142e0:	movt	r1, #2
   142e4:	bl	11bd0 <strcmp@plt>
   142e8:	cmp	r0, #0
   142ec:	beq	14438 <__assert_fail@plt+0x23ac>
   142f0:	movw	r1, #55912	; 0xda68
   142f4:	mov	r0, r7
   142f8:	movt	r1, #2
   142fc:	bl	11bd0 <strcmp@plt>
   14300:	cmp	r0, #0
   14304:	beq	14440 <__assert_fail@plt+0x23b4>
   14308:	movw	r1, #55915	; 0xda6b
   1430c:	mov	r0, r7
   14310:	movt	r1, #2
   14314:	bl	11bd0 <strcmp@plt>
   14318:	cmp	r0, #0
   1431c:	bne	1446c <__assert_fail@plt+0x23e0>
   14320:	mov	r0, #23
   14324:	b	14444 <__assert_fail@plt+0x23b8>
   14328:	add	r0, r4, #1
   1432c:	str	r0, [sp, #80]	; 0x50
   14330:	mov	r0, #1
   14334:	b	14038 <__assert_fail@plt+0x1fac>
   14338:	mov	r0, #20
   1433c:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   14340:	mov	r6, r0
   14344:	movw	r0, #4816	; 0x12d0
   14348:	mov	r2, #1
   1434c:	movt	r0, #4
   14350:	mov	r3, r6
   14354:	mov	r1, r0
   14358:	ldr	r0, [r0, #8]
   1435c:	str	r6, [r1, #8]
   14360:	mov	r1, r9
   14364:	str	r0, [r6, #16]
   14368:	add	r0, r4, #1
   1436c:	str	r0, [sp, #80]	; 0x50
   14370:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14374:	str	r0, [r6, #4]
   14378:	sub	r0, fp, #44	; 0x2c
   1437c:	bl	192fc <__assert_fail@plt+0x7270>
   14380:	cmp	r0, #0
   14384:	mov	r0, #6
   14388:	movwne	r0, #4
   1438c:	b	14038 <__assert_fail@plt+0x1fac>
   14390:	mov	r0, #0
   14394:	b	14444 <__assert_fail@plt+0x23b8>
   14398:	mov	r0, #1
   1439c:	b	14444 <__assert_fail@plt+0x23b8>
   143a0:	mov	r0, #2
   143a4:	b	14444 <__assert_fail@plt+0x23b8>
   143a8:	mov	r0, #3
   143ac:	b	14444 <__assert_fail@plt+0x23b8>
   143b0:	mov	r0, #4
   143b4:	b	14444 <__assert_fail@plt+0x23b8>
   143b8:	mov	r0, #5
   143bc:	b	14444 <__assert_fail@plt+0x23b8>
   143c0:	mov	r0, #6
   143c4:	b	14444 <__assert_fail@plt+0x23b8>
   143c8:	mov	r0, #7
   143cc:	b	14444 <__assert_fail@plt+0x23b8>
   143d0:	mov	r0, #8
   143d4:	b	14444 <__assert_fail@plt+0x23b8>
   143d8:	mov	r0, #9
   143dc:	b	14444 <__assert_fail@plt+0x23b8>
   143e0:	mov	r0, #10
   143e4:	b	14444 <__assert_fail@plt+0x23b8>
   143e8:	mov	r0, #11
   143ec:	b	14444 <__assert_fail@plt+0x23b8>
   143f0:	mov	r0, #12
   143f4:	b	14444 <__assert_fail@plt+0x23b8>
   143f8:	mov	r0, #13
   143fc:	b	14444 <__assert_fail@plt+0x23b8>
   14400:	mov	r0, #14
   14404:	b	14444 <__assert_fail@plt+0x23b8>
   14408:	mov	r0, #15
   1440c:	b	14444 <__assert_fail@plt+0x23b8>
   14410:	mov	r0, #16
   14414:	b	14444 <__assert_fail@plt+0x23b8>
   14418:	mov	r0, #17
   1441c:	b	14444 <__assert_fail@plt+0x23b8>
   14420:	mov	r0, #18
   14424:	b	14444 <__assert_fail@plt+0x23b8>
   14428:	mov	r0, #19
   1442c:	b	14444 <__assert_fail@plt+0x23b8>
   14430:	mov	r0, #20
   14434:	b	14444 <__assert_fail@plt+0x23b8>
   14438:	mov	r0, #21
   1443c:	b	14444 <__assert_fail@plt+0x23b8>
   14440:	mov	r0, #22
   14444:	add	r3, r8, r0, lsl #3
   14448:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1444c:	mov	r1, r9
   14450:	mov	r2, #0
   14454:	str	r0, [r3, #4]
   14458:	sub	r0, fp, #44	; 0x2c
   1445c:	bl	192fc <__assert_fail@plt+0x7270>
   14460:	cmp	r0, #0
   14464:	mov	r0, #1
   14468:	bne	14038 <__assert_fail@plt+0x1fac>
   1446c:	movw	r1, #55772	; 0xd9dc
   14470:	mov	r0, #0
   14474:	mov	r2, #5
   14478:	movt	r1, #2
   1447c:	bl	11cb4 <dcgettext@plt>
   14480:	mov	r4, r0
   14484:	mov	r0, r7
   14488:	bl	28378 <_obstack_memory_used@@Base+0x1ff4>
   1448c:	mov	r3, r0
   14490:	mov	r0, #0
   14494:	mov	r1, #0
   14498:	mov	r2, r4
   1449c:	bl	11db0 <error@plt>
   144a0:	mov	r0, #6
   144a4:	b	14038 <__assert_fail@plt+0x1fac>
   144a8:	movw	r1, #55796	; 0xd9f4
   144ac:	mov	r0, #0
   144b0:	mov	r2, #5
   144b4:	mov	r4, #0
   144b8:	movt	r1, #2
   144bc:	bl	11cb4 <dcgettext@plt>
   144c0:	mov	r2, r0
   144c4:	mov	r0, #0
   144c8:	mov	r1, #0
   144cc:	bl	11db0 <error@plt>
   144d0:	movw	r0, #4816	; 0x12d0
   144d4:	movt	r0, #4
   144d8:	mov	r6, r0
   144dc:	ldr	r0, [r0, #4]
   144e0:	bl	21218 <__assert_fail@plt+0xf18c>
   144e4:	ldr	r0, [r6, #8]
   144e8:	cmp	r0, #0
   144ec:	beq	14504 <__assert_fail@plt+0x2478>
   144f0:	ldr	r6, [r0, #16]
   144f4:	bl	21218 <__assert_fail@plt+0xf18c>
   144f8:	cmp	r6, #0
   144fc:	mov	r0, r6
   14500:	bne	144f0 <__assert_fail@plt+0x2464>
   14504:	movw	r0, #4688	; 0x1250
   14508:	movt	r0, #4
   1450c:	strb	r4, [r0, #1]
   14510:	ldr	r0, [r8, #56]	; 0x38
   14514:	cmp	r0, #6
   14518:	bne	14548 <__assert_fail@plt+0x24bc>
   1451c:	ldr	r0, [r8, #60]	; 0x3c
   14520:	movw	r1, #55848	; 0xda28
   14524:	mov	r2, #6
   14528:	movt	r1, #2
   1452c:	bl	1202c <strncmp@plt>
   14530:	cmp	r0, #0
   14534:	bne	14548 <__assert_fail@plt+0x24bc>
   14538:	movw	r1, #4688	; 0x1250
   1453c:	mov	r0, #1
   14540:	movt	r1, #4
   14544:	strb	r0, [r1, #4]
   14548:	movw	r0, #4688	; 0x1250
   1454c:	movt	r0, #4
   14550:	ldrb	r0, [r0, #1]
   14554:	cmp	r0, #0
   14558:	movwne	r0, #4688	; 0x1250
   1455c:	movne	sl, #0
   14560:	movtne	r0, #4
   14564:	strne	sl, [r0, #36]	; 0x24
   14568:	movw	r1, #4688	; 0x1250
   1456c:	movt	r1, #4
   14570:	ldrb	r0, [r1, #2]
   14574:	cmp	r0, #1
   14578:	bne	14590 <__assert_fail@plt+0x2504>
   1457c:	movw	r9, #4816	; 0x12d0
   14580:	mov	r0, #1
   14584:	strb	r0, [r1, #3]
   14588:	movt	r9, #4
   1458c:	b	146c8 <__assert_fail@plt+0x263c>
   14590:	movw	r9, #4816	; 0x12d0
   14594:	cmp	sl, #0
   14598:	movt	r9, #4
   1459c:	bne	146c8 <__assert_fail@plt+0x263c>
   145a0:	movw	r4, #456	; 0x1c8
   145a4:	movt	r4, #4
   145a8:	ldr	r1, [r4, #104]	; 0x68
   145ac:	cmp	r1, #0
   145b0:	beq	145f0 <__assert_fail@plt+0x2564>
   145b4:	ldr	r0, [r4, #108]	; 0x6c
   145b8:	cmp	r1, #2
   145bc:	beq	145d8 <__assert_fail@plt+0x254c>
   145c0:	cmp	r1, #1
   145c4:	bne	146b8 <__assert_fail@plt+0x262c>
   145c8:	ldrb	r0, [r0]
   145cc:	cmp	r0, #48	; 0x30
   145d0:	beq	145f0 <__assert_fail@plt+0x2564>
   145d4:	b	146b8 <__assert_fail@plt+0x262c>
   145d8:	movw	r1, #54328	; 0xd438
   145dc:	mov	r2, #2
   145e0:	movt	r1, #2
   145e4:	bl	1202c <strncmp@plt>
   145e8:	cmp	r0, #0
   145ec:	bne	146b8 <__assert_fail@plt+0x262c>
   145f0:	ldr	r1, [r4, #112]	; 0x70
   145f4:	cmp	r1, #0
   145f8:	beq	1464c <__assert_fail@plt+0x25c0>
   145fc:	ldr	r0, [r4, #116]	; 0x74
   14600:	cmp	r1, #2
   14604:	beq	14620 <__assert_fail@plt+0x2594>
   14608:	cmp	r1, #1
   1460c:	bne	14638 <__assert_fail@plt+0x25ac>
   14610:	ldrb	r0, [r0]
   14614:	cmp	r0, #48	; 0x30
   14618:	bne	14638 <__assert_fail@plt+0x25ac>
   1461c:	b	1464c <__assert_fail@plt+0x25c0>
   14620:	movw	r1, #54328	; 0xd438
   14624:	mov	r2, #2
   14628:	movt	r1, #2
   1462c:	bl	1202c <strncmp@plt>
   14630:	cmp	r0, #0
   14634:	beq	1464c <__assert_fail@plt+0x25c0>
   14638:	movw	r0, #4688	; 0x1250
   1463c:	movt	r0, #4
   14640:	ldrb	r0, [r0, #4]
   14644:	cmp	r0, #0
   14648:	bne	146b8 <__assert_fail@plt+0x262c>
   1464c:	ldr	r1, [r4, #96]	; 0x60
   14650:	cmp	r1, #0
   14654:	beq	146c8 <__assert_fail@plt+0x263c>
   14658:	ldr	r2, [r4, #100]	; 0x64
   1465c:	cmp	r1, #2
   14660:	beq	14680 <__assert_fail@plt+0x25f4>
   14664:	mov	r0, #1
   14668:	cmp	r1, #1
   1466c:	bne	1469c <__assert_fail@plt+0x2610>
   14670:	ldrb	r1, [r2]
   14674:	cmp	r1, #48	; 0x30
   14678:	bne	1469c <__assert_fail@plt+0x2610>
   1467c:	b	146c8 <__assert_fail@plt+0x263c>
   14680:	movw	r1, #54328	; 0xd438
   14684:	mov	r0, r2
   14688:	mov	r2, #2
   1468c:	movt	r1, #2
   14690:	bl	1202c <strncmp@plt>
   14694:	cmp	r0, #0
   14698:	movwne	r0, #1
   1469c:	cmp	r0, #0
   146a0:	beq	146c8 <__assert_fail@plt+0x263c>
   146a4:	movw	r0, #4688	; 0x1250
   146a8:	movt	r0, #4
   146ac:	ldr	r0, [r0, #40]	; 0x28
   146b0:	cmp	r0, #0
   146b4:	bne	146c8 <__assert_fail@plt+0x263c>
   146b8:	movw	r1, #4688	; 0x1250
   146bc:	mov	r0, #1
   146c0:	movt	r1, #4
   146c4:	strb	r0, [r1, #3]
   146c8:	movw	r4, #4688	; 0x1250
   146cc:	movt	r4, #4
   146d0:	ldr	r0, [r4, #44]	; 0x2c
   146d4:	cmp	r0, #0
   146d8:	beq	146ec <__assert_fail@plt+0x2660>
   146dc:	ldrb	r0, [r4, #6]
   146e0:	cmp	r0, #1
   146e4:	beq	14724 <__assert_fail@plt+0x2698>
   146e8:	b	14788 <__assert_fail@plt+0x26fc>
   146ec:	ldr	r0, [r4, #40]	; 0x28
   146f0:	mov	r1, #3
   146f4:	cmp	r0, #0
   146f8:	ldr	r0, [r4, #48]	; 0x30
   146fc:	movweq	r1, #1
   14700:	cmp	r0, #3
   14704:	ldrb	r0, [r4, #5]
   14708:	movweq	r1, #1
   1470c:	cmp	r0, #0
   14710:	movwne	r1, #1
   14714:	str	r1, [r4, #44]	; 0x2c
   14718:	ldrb	r0, [r4, #6]
   1471c:	cmp	r0, #1
   14720:	bne	14788 <__assert_fail@plt+0x26fc>
   14724:	movw	r0, #23100	; 0x5a3c
   14728:	movw	r2, #22996	; 0x59d4
   1472c:	movw	r3, #23028	; 0x59f4
   14730:	mov	r1, #0
   14734:	movt	r0, #1
   14738:	movt	r2, #1
   1473c:	movt	r3, #1
   14740:	str	r0, [sp]
   14744:	mov	r0, #30
   14748:	bl	21768 <__assert_fail@plt+0xf6dc>
   1474c:	cmp	r0, #0
   14750:	str	r0, [r4, #52]	; 0x34
   14754:	beq	1583c <__assert_fail@plt+0x37b0>
   14758:	movw	r0, #4632	; 0x1218
   1475c:	movw	r3, #44244	; 0xacd4
   14760:	mov	r1, #0
   14764:	mov	r2, #0
   14768:	movt	r0, #2
   1476c:	movt	r3, #2
   14770:	str	r0, [sp]
   14774:	movw	r0, #4936	; 0x1348
   14778:	movt	r0, #4
   1477c:	bl	25ff4 <_obstack_begin@@Base>
   14780:	movw	r4, #4688	; 0x1250
   14784:	movt	r4, #4
   14788:	movw	r0, #46892	; 0xb72c
   1478c:	movt	r0, #2
   14790:	bl	11dec <getenv@plt>
   14794:	bl	2871c <_obstack_memory_used@@Base+0x2398>
   14798:	str	r0, [r4, #56]	; 0x38
   1479c:	ldr	r0, [r4, #40]	; 0x28
   147a0:	cmp	r0, #0
   147a4:	ldrne	r0, [r4, #60]	; 0x3c
   147a8:	cmpne	r0, #5
   147ac:	bne	14938 <__assert_fail@plt+0x28ac>
   147b0:	mov	r0, #1
   147b4:	strb	r0, [r4, #9]
   147b8:	mov	r0, #0
   147bc:	and	r0, r0, #1
   147c0:	strb	r0, [r4, #10]
   147c4:	ldrb	r0, [r4, #11]
   147c8:	cmp	r0, #0
   147cc:	beq	1481c <__assert_fail@plt+0x2790>
   147d0:	movw	r0, #4936	; 0x1348
   147d4:	movw	r4, #44244	; 0xacd4
   147d8:	movw	r6, #4632	; 0x1218
   147dc:	mov	r1, #0
   147e0:	mov	r2, #0
   147e4:	movt	r0, #4
   147e8:	movt	r4, #2
   147ec:	movt	r6, #2
   147f0:	add	r0, r0, #44	; 0x2c
   147f4:	mov	r3, r4
   147f8:	str	r6, [sp]
   147fc:	bl	25ff4 <_obstack_begin@@Base>
   14800:	movw	r0, #792	; 0x318
   14804:	mov	r1, #0
   14808:	mov	r2, #0
   1480c:	mov	r3, r4
   14810:	str	r6, [sp]
   14814:	movt	r0, #4
   14818:	bl	25ff4 <_obstack_begin@@Base>
   1481c:	movw	r4, #4688	; 0x1250
   14820:	movt	r4, #4
   14824:	ldrb	r0, [r4, #12]
   14828:	cmp	r0, #0
   1482c:	beq	148a4 <__assert_fail@plt+0x2818>
   14830:	movw	r4, #836	; 0x344
   14834:	mov	r6, #0
   14838:	movt	r4, #4
   1483c:	mov	r0, r6
   14840:	bl	1fccc <__assert_fail@plt+0xdc40>
   14844:	mov	r1, #1
   14848:	cmp	r0, #0
   1484c:	bne	1486c <__assert_fail@plt+0x27e0>
   14850:	bic	r0, r6, #-2147483648	; 0x80000000
   14854:	sub	r2, r0, #45	; 0x2d
   14858:	cmp	r2, #2
   1485c:	bcc	1486c <__assert_fail@plt+0x27e0>
   14860:	cmp	r0, #95	; 0x5f
   14864:	cmpne	r0, #126	; 0x7e
   14868:	movne	r1, #0
   1486c:	ldrb	r0, [r4, r6]
   14870:	orr	r0, r0, r1
   14874:	strb	r0, [r4, r6]
   14878:	add	r6, r6, #1
   1487c:	cmp	r6, #256	; 0x100
   14880:	bne	1483c <__assert_fail@plt+0x27b0>
   14884:	bl	29d98 <_obstack_memory_used@@Base+0x3a14>
   14888:	movw	r1, #56125	; 0xdb3d
   1488c:	movw	r4, #4688	; 0x1250
   14890:	cmp	r0, #0
   14894:	movt	r1, #2
   14898:	movt	r4, #4
   1489c:	movne	r1, r0
   148a0:	str	r1, [r4, #64]	; 0x40
   148a4:	mov	r0, #100	; 0x64
   148a8:	mov	r1, #152	; 0x98
   148ac:	str	r0, [r4, #68]	; 0x44
   148b0:	mov	r0, #100	; 0x64
   148b4:	bl	297c8 <_obstack_memory_used@@Base+0x3444>
   148b8:	str	r0, [r4, #72]	; 0x48
   148bc:	ldr	r0, [sp, #56]	; 0x38
   148c0:	mov	r1, #0
   148c4:	str	r1, [r4, #76]	; 0x4c
   148c8:	sub	r8, r0, r5
   148cc:	bl	15a40 <__assert_fail@plt+0x39b4>
   148d0:	cmp	r8, #1
   148d4:	blt	1490c <__assert_fail@plt+0x2880>
   148d8:	ldr	r4, [sp, #72]	; 0x48
   148dc:	ldr	r7, [sp, #56]	; 0x38
   148e0:	movw	r6, #56125	; 0xdb3d
   148e4:	movt	r6, #2
   148e8:	ldr	r0, [r4, r5, lsl #2]
   148ec:	mov	r1, #0
   148f0:	mov	r2, #1
   148f4:	mov	r3, r6
   148f8:	bl	15af4 <__assert_fail@plt+0x3a68>
   148fc:	add	r5, r5, #1
   14900:	cmp	r5, r7
   14904:	blt	148e8 <__assert_fail@plt+0x285c>
   14908:	b	149c4 <__assert_fail@plt+0x2938>
   1490c:	ldrb	r0, [r4, #5]
   14910:	cmp	r0, #1
   14914:	bne	14988 <__assert_fail@plt+0x28fc>
   14918:	movw	r0, #62866	; 0xf592
   1491c:	movw	r3, #56125	; 0xdb3d
   14920:	mov	r1, #3
   14924:	mov	r2, #1
   14928:	movt	r0, #2
   1492c:	movt	r3, #2
   14930:	bl	15af4 <__assert_fail@plt+0x3a68>
   14934:	b	149c4 <__assert_fail@plt+0x2938>
   14938:	cmp	r0, #3
   1493c:	beq	147b0 <__assert_fail@plt+0x2724>
   14940:	ldrb	r0, [r4, #7]
   14944:	ldrb	r1, [r4, #8]
   14948:	orr	r0, r0, r1
   1494c:	ands	r0, r0, #1
   14950:	strb	r0, [r4, #9]
   14954:	mov	r0, #0
   14958:	bne	147bc <__assert_fail@plt+0x2730>
   1495c:	ldrb	r1, [r4, #6]
   14960:	mov	r0, #1
   14964:	cmp	r1, #0
   14968:	bne	147bc <__assert_fail@plt+0x2730>
   1496c:	ldr	r0, [r4, #48]	; 0x30
   14970:	ldrb	r1, [r4, #1]
   14974:	ldrb	r2, [r4, #2]
   14978:	orrs	r0, r1, r0
   1497c:	movwne	r0, #1
   14980:	orr	r0, r2, r0
   14984:	b	147bc <__assert_fail@plt+0x2730>
   14988:	mov	r0, #16
   1498c:	mov	r5, r4
   14990:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   14994:	mov	r4, r0
   14998:	mov	r0, #0
   1499c:	str	r0, [r4, #4]
   149a0:	movw	r0, #62866	; 0xf592
   149a4:	movt	r0, #2
   149a8:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   149ac:	str	r0, [r4]
   149b0:	mov	r0, #1
   149b4:	strb	r0, [r4, #8]
   149b8:	ldr	r0, [r5, #32]
   149bc:	str	r4, [r5, #32]
   149c0:	str	r0, [r4, #12]
   149c4:	movw	r5, #4688	; 0x1250
   149c8:	movt	r5, #4
   149cc:	ldr	r0, [r5, #76]	; 0x4c
   149d0:	cmp	r0, #0
   149d4:	beq	14a54 <__assert_fail@plt+0x29c8>
   149d8:	bl	16cb0 <__assert_fail@plt+0x4c24>
   149dc:	ldrb	r0, [r5, #5]
   149e0:	cmp	r0, #0
   149e4:	bne	149f4 <__assert_fail@plt+0x2968>
   149e8:	mov	r0, #0
   149ec:	mov	r1, #1
   149f0:	bl	16fa0 <__assert_fail@plt+0x4f14>
   149f4:	ldr	r0, [r5, #76]	; 0x4c
   149f8:	cmp	r0, #0
   149fc:	beq	14a54 <__assert_fail@plt+0x29c8>
   14a00:	bl	172e4 <__assert_fail@plt+0x5258>
   14a04:	ldr	r7, [r5, #32]
   14a08:	cmp	r7, #0
   14a0c:	beq	15424 <__assert_fail@plt+0x3398>
   14a10:	ldrd	r0, [r9, #80]	; 0x50
   14a14:	mov	r8, r9
   14a18:	adds	r0, r0, #1
   14a1c:	adc	r1, r1, #0
   14a20:	strd	r0, [r8, #80]	; 0x50
   14a24:	movw	r0, #780	; 0x30c
   14a28:	movt	r0, #4
   14a2c:	ldr	r0, [r0]
   14a30:	ldr	r1, [r0, #20]
   14a34:	ldr	r2, [r0, #24]
   14a38:	cmp	r1, r2
   14a3c:	bcs	15758 <__assert_fail@plt+0x36cc>
   14a40:	add	r2, r1, #1
   14a44:	str	r2, [r0, #20]
   14a48:	mov	r0, #10
   14a4c:	strb	r0, [r1]
   14a50:	b	14a8c <__assert_fail@plt+0x2a00>
   14a54:	ldr	r7, [r5, #32]
   14a58:	cmp	r8, #1
   14a5c:	bgt	14a80 <__assert_fail@plt+0x29f4>
   14a60:	cmp	r7, #0
   14a64:	beq	14a80 <__assert_fail@plt+0x29f4>
   14a68:	ldr	r0, [r7, #12]
   14a6c:	mov	r8, r9
   14a70:	cmp	r0, #0
   14a74:	moveq	r0, #0
   14a78:	strbeq	r0, [r5]
   14a7c:	b	14a8c <__assert_fail@plt+0x2a00>
   14a80:	mov	r8, r9
   14a84:	cmp	r7, #0
   14a88:	beq	15424 <__assert_fail@plt+0x3398>
   14a8c:	add	r9, sp, #80	; 0x50
   14a90:	movw	r6, #4936	; 0x1348
   14a94:	add	r0, r9, #1
   14a98:	movt	r6, #4
   14a9c:	str	r0, [sp, #52]	; 0x34
   14aa0:	add	r0, r9, #96	; 0x60
   14aa4:	str	r0, [sp, #56]	; 0x38
   14aa8:	b	14ad0 <__assert_fail@plt+0x2a44>
   14aac:	mov	r0, #1
   14ab0:	b	15268 <__assert_fail@plt+0x31dc>
   14ab4:	mov	r0, #1
   14ab8:	b	14d94 <__assert_fail@plt+0x2d08>
   14abc:	mov	r0, #1
   14ac0:	b	14f30 <__assert_fail@plt+0x2ea4>
   14ac4:	mov	r1, #10
   14ac8:	bl	11f54 <__overflow@plt>
   14acc:	b	14e80 <__assert_fail@plt+0x2df4>
   14ad0:	ldr	r0, [r7, #12]
   14ad4:	str	r0, [r5, #32]
   14ad8:	ldr	r0, [r5, #52]	; 0x34
   14adc:	ldr	r4, [r7]
   14ae0:	cmp	r0, #0
   14ae4:	beq	14b50 <__assert_fail@plt+0x2ac4>
   14ae8:	cmp	r4, #0
   14aec:	bne	14b50 <__assert_fail@plt+0x2ac4>
   14af0:	ldr	r2, [r6, #8]
   14af4:	ldr	r1, [r6, #12]
   14af8:	sub	r2, r1, r2
   14afc:	cmp	r2, #15
   14b00:	bls	157fc <__assert_fail@plt+0x3770>
   14b04:	sub	r1, r1, #16
   14b08:	str	r1, [r6, #12]
   14b0c:	vld1.64	{d16-d17}, [r1]
   14b10:	mov	r1, r9
   14b14:	vst1.64	{d16-d17}, [r9]
   14b18:	bl	223e8 <__assert_fail@plt+0x1035c>
   14b1c:	cmp	r0, #0
   14b20:	beq	1581c <__assert_fail@plt+0x3790>
   14b24:	bl	21218 <__assert_fail@plt+0xf18c>
   14b28:	ldr	r0, [r7]
   14b2c:	bl	21218 <__assert_fail@plt+0xf18c>
   14b30:	ldr	r0, [r7, #4]
   14b34:	bl	21218 <__assert_fail@plt+0xf18c>
   14b38:	mov	r0, r7
   14b3c:	bl	21218 <__assert_fail@plt+0xf18c>
   14b40:	ldr	r7, [r5, #32]
   14b44:	cmp	r7, #0
   14b48:	bne	14ad0 <__assert_fail@plt+0x2a44>
   14b4c:	b	15424 <__assert_fail@plt+0x3398>
   14b50:	ldr	r0, [r7, #4]
   14b54:	ldrb	sl, [r7, #8]
   14b58:	str	r0, [sp, #64]	; 0x40
   14b5c:	bl	11ed0 <__errno_location@plt>
   14b60:	mov	r6, r0
   14b64:	mov	r0, #0
   14b68:	str	r0, [r6]
   14b6c:	mov	r0, r4
   14b70:	bl	11dc8 <opendir@plt>
   14b74:	cmp	r0, #0
   14b78:	str	r0, [sp, #72]	; 0x48
   14b7c:	beq	14ca0 <__assert_fail@plt+0x2c14>
   14b80:	ldr	r0, [r5, #52]	; 0x34
   14b84:	str	sl, [sp, #68]	; 0x44
   14b88:	str	r4, [sp, #76]	; 0x4c
   14b8c:	str	r7, [sp, #60]	; 0x3c
   14b90:	cmp	r0, #0
   14b94:	beq	14e1c <__assert_fail@plt+0x2d90>
   14b98:	ldr	r0, [sp, #72]	; 0x48
   14b9c:	bl	11fe4 <dirfd@plt>
   14ba0:	cmp	r0, #0
   14ba4:	blt	14d10 <__assert_fail@plt+0x2c84>
   14ba8:	mov	r1, #256	; 0x100
   14bac:	mov	r2, r9
   14bb0:	mov	r3, #4096	; 0x1000
   14bb4:	str	r1, [sp]
   14bb8:	movw	r1, #56125	; 0xdb3d
   14bbc:	movt	r1, #2
   14bc0:	bl	1b348 <__assert_fail@plt+0x92bc>
   14bc4:	cmn	r0, #1
   14bc8:	ble	14d34 <__assert_fail@plt+0x2ca8>
   14bcc:	ldr	r0, [sp, #56]	; 0x38
   14bd0:	ldr	sl, [r0]
   14bd4:	ldr	r9, [r0, #4]
   14bd8:	ldr	r7, [sp, #80]	; 0x50
   14bdc:	ldr	r5, [sp, #84]	; 0x54
   14be0:	mov	r0, #16
   14be4:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   14be8:	mov	r4, r0
   14bec:	str	sl, [r0]
   14bf0:	str	r9, [r0, #4]
   14bf4:	str	r7, [r0, #8]
   14bf8:	str	r5, [r0, #12]
   14bfc:	movw	r0, #4688	; 0x1250
   14c00:	movt	r0, #4
   14c04:	mov	r1, r4
   14c08:	ldr	r0, [r0, #52]	; 0x34
   14c0c:	bl	223a0 <__assert_fail@plt+0x10314>
   14c10:	cmp	r0, #0
   14c14:	beq	1583c <__assert_fail@plt+0x37b0>
   14c18:	cmp	r0, r4
   14c1c:	beq	14dc4 <__assert_fail@plt+0x2d38>
   14c20:	mov	r0, r4
   14c24:	bl	21218 <__assert_fail@plt+0xf18c>
   14c28:	movw	r1, #55983	; 0xdaaf
   14c2c:	mov	r0, #0
   14c30:	mov	r2, #5
   14c34:	movt	r1, #2
   14c38:	bl	11cb4 <dcgettext@plt>
   14c3c:	ldr	r2, [sp, #76]	; 0x4c
   14c40:	mov	r4, r0
   14c44:	mov	r0, #0
   14c48:	mov	r1, #3
   14c4c:	bl	280cc <_obstack_memory_used@@Base+0x1d48>
   14c50:	mov	r3, r0
   14c54:	mov	r0, #0
   14c58:	mov	r1, #0
   14c5c:	mov	r2, r4
   14c60:	bl	11db0 <error@plt>
   14c64:	ldr	r0, [sp, #72]	; 0x48
   14c68:	bl	12044 <closedir@plt>
   14c6c:	ldr	r7, [sp, #60]	; 0x3c
   14c70:	movw	r5, #4688	; 0x1250
   14c74:	movw	r9, #4816	; 0x12d0
   14c78:	movw	r4, #4936	; 0x1348
   14c7c:	mov	r0, #2
   14c80:	movt	r5, #4
   14c84:	movt	r9, #4
   14c88:	movt	r4, #4
   14c8c:	mov	r8, r9
   14c90:	str	r0, [r5, #28]
   14c94:	add	r9, sp, #80	; 0x50
   14c98:	mov	r6, r4
   14c9c:	b	153f8 <__assert_fail@plt+0x336c>
   14ca0:	movw	r1, #55918	; 0xda6e
   14ca4:	mov	r0, #0
   14ca8:	mov	r2, #5
   14cac:	mov	r9, r8
   14cb0:	movt	r1, #2
   14cb4:	bl	11cb4 <dcgettext@plt>
   14cb8:	ldr	r5, [r6]
   14cbc:	mov	r8, r0
   14cc0:	mov	r0, #4
   14cc4:	mov	r1, r4
   14cc8:	bl	27e50 <_obstack_memory_used@@Base+0x1acc>
   14ccc:	mov	r3, r0
   14cd0:	mov	r0, #0
   14cd4:	mov	r1, r5
   14cd8:	mov	r2, r8
   14cdc:	bl	11db0 <error@plt>
   14ce0:	movw	r5, #4688	; 0x1250
   14ce4:	cmp	sl, #0
   14ce8:	movt	r5, #4
   14cec:	beq	14d9c <__assert_fail@plt+0x2d10>
   14cf0:	movw	r4, #4936	; 0x1348
   14cf4:	mov	r0, #2
   14cf8:	mov	r8, r9
   14cfc:	add	r9, sp, #80	; 0x50
   14d00:	movt	r4, #4
   14d04:	str	r0, [r5, #28]
   14d08:	mov	r6, r4
   14d0c:	b	153f8 <__assert_fail@plt+0x336c>
   14d10:	ldr	r1, [sp, #76]	; 0x4c
   14d14:	mov	r0, #256	; 0x100
   14d18:	mov	r2, r9
   14d1c:	mov	r3, #0
   14d20:	str	r0, [sp]
   14d24:	mvn	r0, #99	; 0x63
   14d28:	bl	1b348 <__assert_fail@plt+0x92bc>
   14d2c:	cmn	r0, #1
   14d30:	bgt	14bcc <__assert_fail@plt+0x2b40>
   14d34:	movw	r1, #55943	; 0xda87
   14d38:	mov	r0, #0
   14d3c:	mov	r2, #5
   14d40:	movt	r1, #2
   14d44:	bl	11cb4 <dcgettext@plt>
   14d48:	ldr	r1, [sp, #76]	; 0x4c
   14d4c:	ldr	r5, [r6]
   14d50:	mov	r4, r0
   14d54:	mov	r0, #4
   14d58:	bl	27e50 <_obstack_memory_used@@Base+0x1acc>
   14d5c:	mov	r3, r0
   14d60:	mov	r0, #0
   14d64:	mov	r1, r5
   14d68:	mov	r2, r4
   14d6c:	bl	11db0 <error@plt>
   14d70:	ldr	r1, [sp, #68]	; 0x44
   14d74:	movw	r4, #4936	; 0x1348
   14d78:	movw	r5, #4688	; 0x1250
   14d7c:	mov	r0, #2
   14d80:	movt	r4, #4
   14d84:	movt	r5, #4
   14d88:	mov	r6, r4
   14d8c:	cmp	r1, #0
   14d90:	beq	14f40 <__assert_fail@plt+0x2eb4>
   14d94:	str	r0, [r5, #28]
   14d98:	b	14f4c <__assert_fail@plt+0x2ec0>
   14d9c:	ldr	r0, [r5, #28]
   14da0:	movw	r4, #4936	; 0x1348
   14da4:	mov	r8, r9
   14da8:	add	r9, sp, #80	; 0x50
   14dac:	movt	r4, #4
   14db0:	mov	r6, r4
   14db4:	cmp	r0, #0
   14db8:	moveq	r0, #1
   14dbc:	streq	r0, [r5, #28]
   14dc0:	b	153f8 <__assert_fail@plt+0x336c>
   14dc4:	movw	r4, #4936	; 0x1348
   14dc8:	movt	r4, #4
   14dcc:	ldr	r0, [r4, #12]
   14dd0:	ldr	r1, [r4, #16]
   14dd4:	sub	r1, r1, r0
   14dd8:	cmp	r1, #15
   14ddc:	bhi	14df0 <__assert_fail@plt+0x2d64>
   14de0:	mov	r0, r4
   14de4:	mov	r1, #16
   14de8:	bl	26148 <_obstack_newchunk@@Base>
   14dec:	ldr	r0, [r4, #12]
   14df0:	add	r1, r0, #16
   14df4:	str	r1, [r4, #12]
   14df8:	str	r9, [r0, #4]
   14dfc:	movw	r9, #4816	; 0x12d0
   14e00:	str	sl, [r0]
   14e04:	str	r5, [r0, #12]
   14e08:	movw	r5, #4688	; 0x1250
   14e0c:	str	r7, [r0, #8]
   14e10:	movt	r9, #4
   14e14:	movt	r5, #4
   14e18:	mov	r8, r9
   14e1c:	bl	15a40 <__assert_fail@plt+0x39b4>
   14e20:	ldrb	r0, [r5, #6]
   14e24:	cmp	r0, #0
   14e28:	bne	14e38 <__assert_fail@plt+0x2dac>
   14e2c:	ldrb	r0, [r5]
   14e30:	cmp	r0, #1
   14e34:	bne	14fe0 <__assert_fail@plt+0x2f54>
   14e38:	ldrb	r0, [r5, #24]
   14e3c:	movw	sl, #780	; 0x30c
   14e40:	movt	sl, #4
   14e44:	cmp	r0, #1
   14e48:	bne	14e80 <__assert_fail@plt+0x2df4>
   14e4c:	ldrd	r0, [r8, #80]	; 0x50
   14e50:	adds	r0, r0, #1
   14e54:	adc	r1, r1, #0
   14e58:	strd	r0, [r8, #80]	; 0x50
   14e5c:	ldr	r0, [sl]
   14e60:	ldr	r1, [r0, #20]
   14e64:	ldr	r2, [r0, #24]
   14e68:	cmp	r1, r2
   14e6c:	bcs	14ac4 <__assert_fail@plt+0x2a38>
   14e70:	add	r2, r1, #1
   14e74:	str	r2, [r0, #20]
   14e78:	mov	r0, #10
   14e7c:	strb	r0, [r1]
   14e80:	mov	r0, #1
   14e84:	strb	r0, [r5, #24]
   14e88:	ldrb	r0, [r5, #11]
   14e8c:	cmp	r0, #0
   14e90:	beq	14ebc <__assert_fail@plt+0x2e30>
   14e94:	ldrd	r0, [r8, #80]	; 0x50
   14e98:	ldr	r3, [sl]
   14e9c:	mov	r2, #2
   14ea0:	adds	r0, r0, #2
   14ea4:	adc	r1, r1, #0
   14ea8:	strd	r0, [r8, #80]	; 0x50
   14eac:	movw	r0, #56096	; 0xdb20
   14eb0:	mov	r1, #1
   14eb4:	movt	r0, #2
   14eb8:	bl	11c90 <fwrite_unlocked@plt>
   14ebc:	ldrb	r0, [r5, #12]
   14ec0:	cmp	r0, #0
   14ec4:	beq	14f38 <__assert_fail@plt+0x2eac>
   14ec8:	ldr	r9, [sp, #76]	; 0x4c
   14ecc:	mov	r1, #2
   14ed0:	mov	r0, r9
   14ed4:	bl	20084 <__assert_fail@plt+0xdff8>
   14ed8:	mov	r4, r0
   14edc:	cmp	r0, #0
   14ee0:	bne	14f74 <__assert_fail@plt+0x2ee8>
   14ee4:	movw	r1, #56024	; 0xdad8
   14ee8:	mov	r0, #0
   14eec:	mov	r2, #5
   14ef0:	movt	r1, #2
   14ef4:	bl	11cb4 <dcgettext@plt>
   14ef8:	ldr	r4, [r6]
   14efc:	mov	sl, r0
   14f00:	mov	r0, #4
   14f04:	mov	r1, r9
   14f08:	bl	27e50 <_obstack_memory_used@@Base+0x1acc>
   14f0c:	mov	r3, r0
   14f10:	mov	r0, #0
   14f14:	mov	r1, r4
   14f18:	mov	r2, sl
   14f1c:	bl	11db0 <error@plt>
   14f20:	ldr	r0, [sp, #68]	; 0x44
   14f24:	cmp	r0, #0
   14f28:	beq	14f58 <__assert_fail@plt+0x2ecc>
   14f2c:	mov	r0, #2
   14f30:	str	r0, [r5, #28]
   14f34:	b	14f64 <__assert_fail@plt+0x2ed8>
   14f38:	mov	r4, #0
   14f3c:	b	14f70 <__assert_fail@plt+0x2ee4>
   14f40:	ldr	r0, [r5, #28]
   14f44:	cmp	r0, #0
   14f48:	beq	14ab4 <__assert_fail@plt+0x2a28>
   14f4c:	ldr	r0, [sp, #72]	; 0x48
   14f50:	bl	12044 <closedir@plt>
   14f54:	b	153f8 <__assert_fail@plt+0x336c>
   14f58:	ldr	r0, [r5, #28]
   14f5c:	cmp	r0, #0
   14f60:	beq	14abc <__assert_fail@plt+0x2a30>
   14f64:	movw	sl, #780	; 0x30c
   14f68:	mov	r4, #0
   14f6c:	movt	sl, #4
   14f70:	ldr	r9, [sp, #76]	; 0x4c
   14f74:	mov	r0, #1
   14f78:	ldr	r1, [r5, #120]	; 0x78
   14f7c:	mvn	r2, #0
   14f80:	mov	r3, #0
   14f84:	str	r0, [sp]
   14f88:	movw	r0, #792	; 0x318
   14f8c:	movt	r0, #4
   14f90:	stmib	sp, {r0, r4}
   14f94:	ldr	r0, [sp, #64]	; 0x40
   14f98:	cmp	r0, #0
   14f9c:	moveq	r0, r9
   14fa0:	bl	19c28 <__assert_fail@plt+0x7b9c>
   14fa4:	mov	r0, r4
   14fa8:	bl	21218 <__assert_fail@plt+0xf18c>
   14fac:	movw	r0, #4816	; 0x12d0
   14fb0:	ldr	r3, [sl]
   14fb4:	movt	r0, #4
   14fb8:	mov	r2, r0
   14fbc:	ldrd	r0, [r0, #80]	; 0x50
   14fc0:	adds	r0, r0, #2
   14fc4:	adc	r1, r1, #0
   14fc8:	strd	r0, [r2, #80]	; 0x50
   14fcc:	movw	r0, #54996	; 0xd6d4
   14fd0:	mov	r1, #1
   14fd4:	mov	r2, #2
   14fd8:	movt	r0, #2
   14fdc:	bl	11c90 <fwrite_unlocked@plt>
   14fe0:	ldr	r7, [sp, #72]	; 0x48
   14fe4:	mov	r8, #0
   14fe8:	mov	sl, #0
   14fec:	b	14ff4 <__assert_fail@plt+0x2f68>
   14ff0:	bl	1b1e0 <__assert_fail@plt+0x9154>
   14ff4:	mov	r0, #0
   14ff8:	str	r0, [r6]
   14ffc:	mov	r0, r7
   15000:	bl	11fc0 <readdir64@plt>
   15004:	cmp	r0, #0
   15008:	beq	1514c <__assert_fail@plt+0x30c0>
   1500c:	mov	r4, r0
   15010:	add	r9, r0, #19
   15014:	ldr	r0, [r5, #92]	; 0x5c
   15018:	cmp	r0, #2
   1501c:	beq	15094 <__assert_fail@plt+0x3008>
   15020:	ldrb	r1, [r9]
   15024:	cmp	r1, #46	; 0x2e
   15028:	bne	15054 <__assert_fail@plt+0x2fc8>
   1502c:	cmp	r0, #0
   15030:	beq	151c0 <__assert_fail@plt+0x3134>
   15034:	ldrb	r1, [r4, #20]
   15038:	cmp	r1, #46	; 0x2e
   1503c:	mov	r1, #1
   15040:	movweq	r1, #2
   15044:	add	r1, r4, r1
   15048:	ldrb	r1, [r1, #19]
   1504c:	cmp	r1, #0
   15050:	beq	151c0 <__assert_fail@plt+0x3134>
   15054:	cmp	r0, #0
   15058:	bne	15094 <__assert_fail@plt+0x3008>
   1505c:	movw	r0, #4688	; 0x1250
   15060:	movt	r0, #4
   15064:	ldr	r5, [r0, #108]	; 0x6c
   15068:	cmp	r5, #0
   1506c:	beq	15094 <__assert_fail@plt+0x3008>
   15070:	ldr	r0, [r5]
   15074:	mov	r1, r9
   15078:	mov	r2, #4
   1507c:	bl	11dd4 <fnmatch@plt>
   15080:	cmp	r0, #0
   15084:	beq	151c0 <__assert_fail@plt+0x3134>
   15088:	ldr	r5, [r5, #4]
   1508c:	cmp	r5, #0
   15090:	bne	15070 <__assert_fail@plt+0x2fe4>
   15094:	movw	r0, #4816	; 0x12d0
   15098:	movt	r0, #4
   1509c:	ldr	r5, [r0]
   150a0:	cmp	r5, #0
   150a4:	beq	150cc <__assert_fail@plt+0x3040>
   150a8:	ldr	r0, [r5]
   150ac:	mov	r1, r9
   150b0:	mov	r2, #4
   150b4:	bl	11dd4 <fnmatch@plt>
   150b8:	cmp	r0, #0
   150bc:	beq	151c0 <__assert_fail@plt+0x3134>
   150c0:	ldr	r5, [r5, #4]
   150c4:	cmp	r5, #0
   150c8:	bne	150a8 <__assert_fail@plt+0x301c>
   150cc:	ldrb	r0, [r4, #18]
   150d0:	mov	r1, #0
   150d4:	ldr	r3, [sp, #76]	; 0x4c
   150d8:	sub	r0, r0, #1
   150dc:	uxtb	r2, r0
   150e0:	cmp	r2, #13
   150e4:	mov	r2, #0
   150e8:	movwls	r1, #62624	; 0xf4a0
   150ec:	sxtbls	r0, r0
   150f0:	movtls	r1, #2
   150f4:	ldrls	r1, [r1, r0, lsl #2]
   150f8:	mov	r0, r9
   150fc:	bl	15af4 <__assert_fail@plt+0x3a68>
   15100:	movw	r5, #4688	; 0x1250
   15104:	adds	r8, r0, r8
   15108:	movt	r5, #4
   1510c:	adc	sl, r1, sl
   15110:	ldr	r0, [r5, #40]	; 0x28
   15114:	cmp	r0, #1
   15118:	ldreq	r0, [r5, #60]	; 0x3c
   1511c:	cmpeq	r0, #6
   15120:	bne	14ff0 <__assert_fail@plt+0x2f64>
   15124:	ldrb	r0, [r5, #8]
   15128:	cmp	r0, #0
   1512c:	ldrbeq	r0, [r5, #6]
   15130:	cmpeq	r0, #0
   15134:	bne	14ff0 <__assert_fail@plt+0x2f64>
   15138:	bl	16cb0 <__assert_fail@plt+0x4c24>
   1513c:	bl	172e4 <__assert_fail@plt+0x5258>
   15140:	bl	15a40 <__assert_fail@plt+0x39b4>
   15144:	bl	1b1e0 <__assert_fail@plt+0x9154>
   15148:	b	14ff4 <__assert_fail@plt+0x2f68>
   1514c:	ldr	r0, [r6]
   15150:	ldr	r7, [sp, #68]	; 0x44
   15154:	cmp	r0, #0
   15158:	beq	15204 <__assert_fail@plt+0x3178>
   1515c:	movw	r1, #56048	; 0xdaf0
   15160:	mov	r0, #0
   15164:	mov	r2, #5
   15168:	movt	r1, #2
   1516c:	bl	11cb4 <dcgettext@plt>
   15170:	ldr	r1, [sp, #76]	; 0x4c
   15174:	ldr	r5, [r6]
   15178:	mov	r4, r0
   1517c:	mov	r0, #4
   15180:	bl	27e50 <_obstack_memory_used@@Base+0x1acc>
   15184:	mov	r3, r0
   15188:	mov	r1, r5
   1518c:	movw	r5, #4688	; 0x1250
   15190:	mov	r0, #0
   15194:	mov	r2, r4
   15198:	movt	r5, #4
   1519c:	bl	11db0 <error@plt>
   151a0:	mov	r0, #2
   151a4:	cmp	r7, #0
   151a8:	beq	151d0 <__assert_fail@plt+0x3144>
   151ac:	str	r0, [r5, #28]
   151b0:	ldr	r0, [r6]
   151b4:	cmp	r0, #75	; 0x4b
   151b8:	beq	151e8 <__assert_fail@plt+0x315c>
   151bc:	b	15204 <__assert_fail@plt+0x3178>
   151c0:	movw	r5, #4688	; 0x1250
   151c4:	movt	r5, #4
   151c8:	bl	1b1e0 <__assert_fail@plt+0x9154>
   151cc:	b	14ff4 <__assert_fail@plt+0x2f68>
   151d0:	ldr	r0, [r5, #28]
   151d4:	cmp	r0, #0
   151d8:	beq	151f0 <__assert_fail@plt+0x3164>
   151dc:	ldr	r0, [r6]
   151e0:	cmp	r0, #75	; 0x4b
   151e4:	bne	15204 <__assert_fail@plt+0x3178>
   151e8:	ldr	r7, [sp, #72]	; 0x48
   151ec:	b	14ff0 <__assert_fail@plt+0x2f64>
   151f0:	mov	r0, #1
   151f4:	str	r0, [r5, #28]
   151f8:	ldr	r0, [r6]
   151fc:	cmp	r0, #75	; 0x4b
   15200:	beq	151e8 <__assert_fail@plt+0x315c>
   15204:	ldr	r0, [sp, #72]	; 0x48
   15208:	bl	12044 <closedir@plt>
   1520c:	ldr	r9, [sp, #76]	; 0x4c
   15210:	cmp	r0, #0
   15214:	beq	1528c <__assert_fail@plt+0x3200>
   15218:	movw	r1, #56069	; 0xdb05
   1521c:	mov	r0, #0
   15220:	mov	r2, #5
   15224:	movt	r1, #2
   15228:	bl	11cb4 <dcgettext@plt>
   1522c:	ldr	r5, [r6]
   15230:	mov	r4, r0
   15234:	mov	r0, #4
   15238:	mov	r1, r9
   1523c:	bl	27e50 <_obstack_memory_used@@Base+0x1acc>
   15240:	mov	r3, r0
   15244:	mov	r0, #0
   15248:	mov	r1, r5
   1524c:	mov	r2, r4
   15250:	bl	11db0 <error@plt>
   15254:	movw	r5, #4688	; 0x1250
   15258:	cmp	r7, #0
   1525c:	movt	r5, #4
   15260:	beq	15280 <__assert_fail@plt+0x31f4>
   15264:	mov	r0, #2
   15268:	str	r0, [r5, #28]
   1526c:	bl	16cb0 <__assert_fail@plt+0x4c24>
   15270:	ldrb	r0, [r5, #6]
   15274:	cmp	r0, #1
   15278:	beq	1529c <__assert_fail@plt+0x3210>
   1527c:	b	152a8 <__assert_fail@plt+0x321c>
   15280:	ldr	r0, [r5, #28]
   15284:	cmp	r0, #0
   15288:	beq	14aac <__assert_fail@plt+0x2a20>
   1528c:	bl	16cb0 <__assert_fail@plt+0x4c24>
   15290:	ldrb	r0, [r5, #6]
   15294:	cmp	r0, #1
   15298:	bne	152a8 <__assert_fail@plt+0x321c>
   1529c:	mov	r0, r9
   152a0:	mov	r1, #0
   152a4:	bl	16fa0 <__assert_fail@plt+0x4f14>
   152a8:	ldr	r0, [r5, #40]	; 0x28
   152ac:	cmp	r0, #0
   152b0:	ldrbne	r0, [r5, #8]
   152b4:	cmpne	r0, #1
   152b8:	bne	153cc <__assert_fail@plt+0x3340>
   152bc:	movw	r0, #4816	; 0x12d0
   152c0:	mov	r2, #512	; 0x200
   152c4:	ldr	r3, [r5, #100]	; 0x64
   152c8:	movt	r0, #4
   152cc:	str	r2, [sp]
   152d0:	mov	r2, #0
   152d4:	mov	r7, r0
   152d8:	ldrd	r0, [r0, #88]	; 0x58
   152dc:	str	r2, [sp, #4]
   152e0:	ldr	r2, [sp, #52]	; 0x34
   152e4:	str	r0, [sp, #8]
   152e8:	str	r1, [sp, #12]
   152ec:	mov	r0, r8
   152f0:	mov	r1, sl
   152f4:	mov	r8, r7
   152f8:	bl	22750 <__assert_fail@plt+0x106c4>
   152fc:	mov	r4, r0
   15300:	bl	11eac <strlen@plt>
   15304:	add	r6, r4, r0
   15308:	mov	r0, #32
   1530c:	movw	r7, #780	; 0x30c
   15310:	strb	r0, [r4, #-1]!
   15314:	movt	r7, #4
   15318:	ldrb	r0, [r5, #20]
   1531c:	cmp	r0, #0
   15320:	mov	r0, #10
   15324:	movwne	r0, #0
   15328:	strb	r0, [r6], #1
   1532c:	ldrb	r0, [r5, #11]
   15330:	cmp	r0, #0
   15334:	beq	15360 <__assert_fail@plt+0x32d4>
   15338:	ldrd	r0, [r8, #80]	; 0x50
   1533c:	ldr	r3, [r7]
   15340:	mov	r2, #2
   15344:	adds	r0, r0, #2
   15348:	adc	r1, r1, #0
   1534c:	strd	r0, [r8, #80]	; 0x50
   15350:	movw	r0, #56096	; 0xdb20
   15354:	mov	r1, #1
   15358:	movt	r0, #2
   1535c:	bl	11c90 <fwrite_unlocked@plt>
   15360:	movw	r1, #56090	; 0xdb1a
   15364:	mov	r0, #0
   15368:	mov	r2, #5
   1536c:	movt	r1, #2
   15370:	bl	11cb4 <dcgettext@plt>
   15374:	mov	r5, r0
   15378:	bl	11eac <strlen@plt>
   1537c:	mov	r2, r0
   15380:	ldrd	r0, [r8, #80]	; 0x50
   15384:	ldr	r3, [r7]
   15388:	adds	r0, r0, r2
   1538c:	adc	r1, r1, #0
   15390:	strd	r0, [r8, #80]	; 0x50
   15394:	mov	r0, r5
   15398:	mov	r1, #1
   1539c:	bl	11c90 <fwrite_unlocked@plt>
   153a0:	ldrd	r0, [r8, #80]	; 0x50
   153a4:	sub	r2, r6, r4
   153a8:	ldr	r3, [r7]
   153ac:	adds	r0, r0, r2
   153b0:	adc	r1, r1, #0
   153b4:	strd	r0, [r8, #80]	; 0x50
   153b8:	mov	r0, r4
   153bc:	mov	r1, #1
   153c0:	bl	11c90 <fwrite_unlocked@plt>
   153c4:	movw	r5, #4688	; 0x1250
   153c8:	movt	r5, #4
   153cc:	ldr	r0, [r5, #76]	; 0x4c
   153d0:	ldr	r7, [sp, #60]	; 0x3c
   153d4:	movw	r9, #4816	; 0x12d0
   153d8:	movw	r4, #4936	; 0x1348
   153dc:	movt	r9, #4
   153e0:	movt	r4, #4
   153e4:	mov	r8, r9
   153e8:	add	r9, sp, #80	; 0x50
   153ec:	mov	r6, r4
   153f0:	cmp	r0, #0
   153f4:	blne	172e4 <__assert_fail@plt+0x5258>
   153f8:	ldr	r0, [r7]
   153fc:	bl	21218 <__assert_fail@plt+0xf18c>
   15400:	ldr	r0, [r7, #4]
   15404:	bl	21218 <__assert_fail@plt+0xf18c>
   15408:	mov	r0, r7
   1540c:	bl	21218 <__assert_fail@plt+0xf18c>
   15410:	mov	r0, #1
   15414:	strb	r0, [r5]
   15418:	ldr	r7, [r5, #32]
   1541c:	cmp	r7, #0
   15420:	bne	14ad0 <__assert_fail@plt+0x2a44>
   15424:	ldrb	r0, [r5, #1]
   15428:	cmp	r0, #0
   1542c:	beq	15540 <__assert_fail@plt+0x34b4>
   15430:	ldrb	r0, [r5, #13]
   15434:	cmp	r0, #1
   15438:	bne	15540 <__assert_fail@plt+0x34b4>
   1543c:	movw	r4, #456	; 0x1c8
   15440:	movt	r4, #4
   15444:	ldr	r1, [r4]
   15448:	ldr	r0, [r4, #4]
   1544c:	cmp	r1, #2
   15450:	bne	1546c <__assert_fail@plt+0x33e0>
   15454:	ldrh	r2, [r0]
   15458:	movw	r3, #23323	; 0x5b1b
   1545c:	cmp	r2, r3
   15460:	ldreq	r2, [r4, #8]
   15464:	cmpeq	r2, #1
   15468:	beq	1572c <__assert_fail@plt+0x36a0>
   1546c:	mov	r7, r5
   15470:	movw	r5, #780	; 0x30c
   15474:	mov	r2, #1
   15478:	mov	r6, #1
   1547c:	movt	r5, #4
   15480:	ldr	r3, [r5]
   15484:	bl	11c90 <fwrite_unlocked@plt>
   15488:	ldrb	r0, [r7, #13]
   1548c:	cmp	r0, #0
   15490:	bne	154e0 <__assert_fail@plt+0x3454>
   15494:	movw	r0, #4688	; 0x1250
   15498:	movt	r0, #4
   1549c:	strb	r6, [r0, #13]
   154a0:	mov	r0, #1
   154a4:	bl	11ea0 <tcgetpgrp@plt>
   154a8:	cmp	r0, #0
   154ac:	movge	r0, #1
   154b0:	blge	18c40 <__assert_fail@plt+0x6bb4>
   154b4:	ldr	r0, [r4, #20]
   154b8:	cmp	r0, #0
   154bc:	beq	154c8 <__assert_fail@plt+0x343c>
   154c0:	add	r0, r4, #16
   154c4:	b	154dc <__assert_fail@plt+0x3450>
   154c8:	mov	r0, r4
   154cc:	bl	18b9c <__assert_fail@plt+0x6b10>
   154d0:	add	r0, r4, #24
   154d4:	bl	18b9c <__assert_fail@plt+0x6b10>
   154d8:	add	r0, r4, #8
   154dc:	bl	18b9c <__assert_fail@plt+0x6b10>
   154e0:	ldr	r3, [r5]
   154e4:	ldr	r1, [r4, #8]
   154e8:	ldr	r0, [r4, #12]
   154ec:	mov	r2, #1
   154f0:	bl	11c90 <fwrite_unlocked@plt>
   154f4:	movw	r5, #4688	; 0x1250
   154f8:	movt	r5, #4
   154fc:	movw	r0, #780	; 0x30c
   15500:	movt	r0, #4
   15504:	ldr	r0, [r0]
   15508:	bl	11d14 <fflush_unlocked@plt>
   1550c:	mov	r0, #0
   15510:	bl	18c40 <__assert_fail@plt+0x6bb4>
   15514:	ldr	r4, [r5, #80]	; 0x50
   15518:	cmp	r4, #0
   1551c:	beq	15530 <__assert_fail@plt+0x34a4>
   15520:	mov	r0, #19
   15524:	bl	11bac <raise@plt>
   15528:	subs	r4, r4, #1
   1552c:	bne	15520 <__assert_fail@plt+0x3494>
   15530:	ldr	r0, [r5, #84]	; 0x54
   15534:	cmp	r0, #0
   15538:	beq	15540 <__assert_fail@plt+0x34b4>
   1553c:	bl	11bac <raise@plt>
   15540:	ldrb	r0, [r5, #11]
   15544:	cmp	r0, #0
   15548:	beq	156fc <__assert_fail@plt+0x3670>
   1554c:	movw	r0, #4936	; 0x1348
   15550:	mov	r8, #0
   15554:	movt	r0, #4
   15558:	ldr	r6, [r0, #52]	; 0x34
   1555c:	ldr	r1, [r0, #56]	; 0x38
   15560:	sub	r2, r1, r6
   15564:	cmp	r8, r2, lsr #3
   15568:	beq	15614 <__assert_fail@plt+0x3588>
   1556c:	cmp	r1, r6
   15570:	lsr	r7, r2, #3
   15574:	ldrbeq	r3, [r0, #84]	; 0x54
   15578:	orreq	r3, r3, #2
   1557c:	strbeq	r3, [r0, #84]	; 0x54
   15580:	ldr	r5, [r0, #68]	; 0x44
   15584:	ldr	r2, [r0, #48]	; 0x30
   15588:	ldr	r3, [r0, #60]	; 0x3c
   1558c:	add	r1, r5, r1
   15590:	bic	r1, r1, r5
   15594:	sub	r5, r1, r2
   15598:	sub	r2, r3, r2
   1559c:	cmp	r5, r2
   155a0:	movw	r5, #780	; 0x30c
   155a4:	movhi	r1, r3
   155a8:	movt	r5, #4
   155ac:	str	r1, [r0, #52]	; 0x34
   155b0:	str	r1, [r0, #56]	; 0x38
   155b4:	ldr	r1, [r5]
   155b8:	movw	r0, #46936	; 0xb758
   155bc:	movt	r0, #2
   155c0:	bl	11b94 <fputs_unlocked@plt>
   155c4:	movw	r4, #54489	; 0xd4d9
   155c8:	movt	r4, #2
   155cc:	ldrd	r2, [r6]
   155d0:	mov	r0, #1
   155d4:	mov	r1, r4
   155d8:	bl	11f00 <__printf_chk@plt>
   155dc:	add	r6, r6, #8
   155e0:	subs	r7, r7, #1
   155e4:	bne	155cc <__assert_fail@plt+0x3540>
   155e8:	ldr	r0, [r5]
   155ec:	ldr	r1, [r0, #20]
   155f0:	ldr	r2, [r0, #24]
   155f4:	cmp	r1, r2
   155f8:	bcs	15740 <__assert_fail@plt+0x36b4>
   155fc:	add	r2, r1, #1
   15600:	str	r2, [r0, #20]
   15604:	mov	r0, #10
   15608:	strb	r0, [r1]
   1560c:	movw	r5, #4688	; 0x1250
   15610:	movt	r5, #4
   15614:	movw	r0, #792	; 0x318
   15618:	movt	r0, #4
   1561c:	ldr	r6, [r0, #8]
   15620:	ldr	r1, [r0, #12]
   15624:	sub	r2, r1, r6
   15628:	cmp	r8, r2, lsr #3
   1562c:	beq	156d8 <__assert_fail@plt+0x364c>
   15630:	cmp	r1, r6
   15634:	lsr	r5, r2, #3
   15638:	ldrbeq	r3, [r0, #40]	; 0x28
   1563c:	orreq	r3, r3, #2
   15640:	strbeq	r3, [r0, #40]	; 0x28
   15644:	ldr	r7, [r0, #24]
   15648:	ldr	r2, [r0, #4]
   1564c:	ldr	r3, [r0, #16]
   15650:	add	r1, r7, r1
   15654:	bic	r1, r1, r7
   15658:	sub	r7, r1, r2
   1565c:	sub	r2, r3, r2
   15660:	cmp	r7, r2
   15664:	movw	r7, #780	; 0x30c
   15668:	movhi	r1, r3
   1566c:	movt	r7, #4
   15670:	str	r1, [r0, #8]
   15674:	str	r1, [r0, #12]
   15678:	ldr	r1, [r7]
   1567c:	movw	r0, #46946	; 0xb762
   15680:	movt	r0, #2
   15684:	bl	11b94 <fputs_unlocked@plt>
   15688:	movw	r4, #54489	; 0xd4d9
   1568c:	movt	r4, #2
   15690:	ldrd	r2, [r6]
   15694:	mov	r0, #1
   15698:	mov	r1, r4
   1569c:	bl	11f00 <__printf_chk@plt>
   156a0:	add	r6, r6, #8
   156a4:	subs	r5, r5, #1
   156a8:	bne	15690 <__assert_fail@plt+0x3604>
   156ac:	ldr	r0, [r7]
   156b0:	movw	r5, #4688	; 0x1250
   156b4:	movt	r5, #4
   156b8:	ldr	r1, [r0, #20]
   156bc:	ldr	r2, [r0, #24]
   156c0:	cmp	r1, r2
   156c4:	bcs	1574c <__assert_fail@plt+0x36c0>
   156c8:	add	r2, r1, #1
   156cc:	str	r2, [r0, #20]
   156d0:	mov	r0, #10
   156d4:	strb	r0, [r1]
   156d8:	ldr	r0, [r5, #88]	; 0x58
   156dc:	bl	264fc <_obstack_memory_used@@Base+0x178>
   156e0:	movw	r1, #63292	; 0xf73c
   156e4:	movt	r1, #2
   156e8:	ldr	r2, [r1, r0, lsl #2]
   156ec:	movw	r1, #46959	; 0xb76f
   156f0:	mov	r0, #1
   156f4:	movt	r1, #2
   156f8:	bl	11f00 <__printf_chk@plt>
   156fc:	ldr	r4, [r5, #52]	; 0x34
   15700:	cmp	r4, #0
   15704:	beq	15720 <__assert_fail@plt+0x3694>
   15708:	mov	r0, r4
   1570c:	bl	212d8 <__assert_fail@plt+0xf24c>
   15710:	cmp	r0, #0
   15714:	bne	158c0 <__assert_fail@plt+0x3834>
   15718:	mov	r0, r4
   1571c:	bl	21a84 <__assert_fail@plt+0xf9f8>
   15720:	ldr	r0, [r5, #28]
   15724:	sub	sp, fp, #28
   15728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1572c:	ldr	r2, [r4, #12]
   15730:	ldrb	r2, [r2]
   15734:	cmp	r2, #109	; 0x6d
   15738:	bne	1546c <__assert_fail@plt+0x33e0>
   1573c:	b	154fc <__assert_fail@plt+0x3470>
   15740:	mov	r1, #10
   15744:	bl	11f54 <__overflow@plt>
   15748:	b	1560c <__assert_fail@plt+0x3580>
   1574c:	mov	r1, #10
   15750:	bl	11f54 <__overflow@plt>
   15754:	b	156d8 <__assert_fail@plt+0x364c>
   15758:	mov	r1, #10
   1575c:	bl	11f54 <__overflow@plt>
   15760:	ldr	r7, [r5, #32]
   15764:	cmp	r7, #0
   15768:	bne	14a8c <__assert_fail@plt+0x2a00>
   1576c:	b	15424 <__assert_fail@plt+0x3398>
   15770:	mov	r0, #2
   15774:	bl	1861c <__assert_fail@plt+0x6590>
   15778:	movw	r1, #672	; 0x2a0
   1577c:	movw	r0, #676	; 0x2a4
   15780:	movw	r7, #54717	; 0xd5bd
   15784:	movw	r6, #54697	; 0xd5a9
   15788:	movt	r1, #4
   1578c:	movt	r0, #4
   15790:	movt	r7, #2
   15794:	movt	r6, #2
   15798:	ldr	r2, [r1]
   1579c:	ldr	r3, [r0]
   157a0:	movw	r0, #780	; 0x30c
   157a4:	mov	r1, #0
   157a8:	movt	r0, #4
   157ac:	ldr	r0, [r0]
   157b0:	stm	sp, {r6, r7}
   157b4:	movw	r7, #54323	; 0xd433
   157b8:	str	r1, [sp, #8]
   157bc:	movw	r1, #55341	; 0xd82d
   157c0:	movt	r1, #2
   157c4:	movt	r7, #2
   157c8:	cmp	r2, #2
   157cc:	moveq	r7, r1
   157d0:	movw	r1, #54694	; 0xd5a6
   157d4:	cmp	r2, #1
   157d8:	movw	r2, #54683	; 0xd59b
   157dc:	movt	r1, #2
   157e0:	movt	r2, #2
   157e4:	movne	r1, r7
   157e8:	bl	294c4 <_obstack_memory_used@@Base+0x3140>
   157ec:	mov	r0, #0
   157f0:	bl	11e88 <exit@plt>
   157f4:	mov	r0, #0
   157f8:	bl	1861c <__assert_fail@plt+0x6590>
   157fc:	movw	r0, #54331	; 0xd43b
   15800:	movw	r1, #46901	; 0xb735
   15804:	movw	r3, #54386	; 0xd472
   15808:	movw	r2, #1053	; 0x41d
   1580c:	movt	r0, #2
   15810:	movt	r1, #2
   15814:	movt	r3, #2
   15818:	bl	1208c <__assert_fail@plt>
   1581c:	movw	r0, #46895	; 0xb72f
   15820:	movw	r1, #46901	; 0xb735
   15824:	movw	r3, #46910	; 0xb73e
   15828:	movw	r2, #1805	; 0x70d
   1582c:	movt	r0, #2
   15830:	movt	r1, #2
   15834:	movt	r3, #2
   15838:	bl	1208c <__assert_fail@plt>
   1583c:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   15840:	bl	12038 <abort@plt>
   15844:	ldr	r2, [r4]
   15848:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1584c:	movw	r3, #56880	; 0xde30
   15850:	movt	r3, #2
   15854:	str	r2, [sp]
   15858:	mov	r2, #0
   1585c:	bl	29f08 <_obstack_memory_used@@Base+0x3b84>
   15860:	movw	r1, #54546	; 0xd512
   15864:	mov	r0, #0
   15868:	mov	r2, #5
   1586c:	movt	r1, #2
   15870:	bl	11cb4 <dcgettext@plt>
   15874:	mov	r4, r0
   15878:	ldr	r0, [r5]
   1587c:	bl	28378 <_obstack_memory_used@@Base+0x1ff4>
   15880:	movw	r2, #54539	; 0xd50b
   15884:	str	r0, [sp]
   15888:	mov	r0, #2
   1588c:	mov	r1, #0
   15890:	mov	r3, r4
   15894:	movt	r2, #2
   15898:	bl	11db0 <error@plt>
   1589c:	movw	r1, #54890	; 0xd66a
   158a0:	mov	r0, #0
   158a4:	mov	r2, #5
   158a8:	movt	r1, #2
   158ac:	bl	11cb4 <dcgettext@plt>
   158b0:	mov	r2, r0
   158b4:	mov	r0, #2
   158b8:	mov	r1, #0
   158bc:	bl	11db0 <error@plt>
   158c0:	movw	r0, #46997	; 0xb795
   158c4:	movw	r1, #46901	; 0xb735
   158c8:	movw	r3, #46910	; 0xb73e
   158cc:	movw	r2, #1857	; 0x741
   158d0:	movt	r0, #2
   158d4:	movt	r1, #2
   158d8:	movt	r3, #2
   158dc:	bl	1208c <__assert_fail@plt>
   158e0:	movw	r0, #54966	; 0xd6b6
   158e4:	mov	r1, r4
   158e8:	movt	r0, #2
   158ec:	bl	1f8e4 <__assert_fail@plt+0xd858>
   158f0:	movw	r1, #54977	; 0xd6c1
   158f4:	mov	r0, #0
   158f8:	mov	r2, #5
   158fc:	movt	r1, #2
   15900:	bl	11cb4 <dcgettext@plt>
   15904:	movw	r5, #776	; 0x308
   15908:	movt	r5, #4
   1590c:	ldr	r1, [r5]
   15910:	bl	11b94 <fputs_unlocked@plt>
   15914:	ldr	r0, [r5]
   15918:	movw	r4, #54999	; 0xd6d7
   1591c:	movw	r3, #54620	; 0xd55c
   15920:	mov	r1, #1
   15924:	movt	r4, #2
   15928:	movt	r3, #2
   1592c:	mov	r2, r4
   15930:	bl	11f24 <__fprintf_chk@plt>
   15934:	ldr	r0, [r5]
   15938:	movw	r3, #55731	; 0xd9b3
   1593c:	mov	r1, #1
   15940:	mov	r2, r4
   15944:	movt	r3, #2
   15948:	bl	11f24 <__fprintf_chk@plt>
   1594c:	ldr	r0, [r5]
   15950:	movw	r3, #55736	; 0xd9b8
   15954:	mov	r1, #1
   15958:	mov	r2, r4
   1595c:	movt	r3, #2
   15960:	bl	11f24 <__fprintf_chk@plt>
   15964:	ldr	r0, [r5]
   15968:	movw	r3, #46885	; 0xb725
   1596c:	mov	r1, #1
   15970:	mov	r2, r4
   15974:	movt	r3, #2
   15978:	bl	11f24 <__fprintf_chk@plt>
   1597c:	movw	r1, #55015	; 0xd6e7
   15980:	mov	r0, #0
   15984:	mov	r2, #5
   15988:	movt	r1, #2
   1598c:	bl	11cb4 <dcgettext@plt>
   15990:	ldr	r1, [r5]
   15994:	bl	11b94 <fputs_unlocked@plt>
   15998:	mov	r0, #2
   1599c:	bl	1861c <__assert_fail@plt+0x6590>
   159a0:	movw	r1, #54937	; 0xd699
   159a4:	mov	r0, #0
   159a8:	mov	r2, #5
   159ac:	movt	r1, #2
   159b0:	bl	11cb4 <dcgettext@plt>
   159b4:	mov	r4, r0
   159b8:	mov	r0, r8
   159bc:	bl	28378 <_obstack_memory_used@@Base+0x1ff4>
   159c0:	mov	r3, r0
   159c4:	mov	r0, #2
   159c8:	mov	r1, #0
   159cc:	mov	r2, r4
   159d0:	bl	11db0 <error@plt>
   159d4:	push	{fp, lr}
   159d8:	mov	fp, sp
   159dc:	mov	r2, r1
   159e0:	ldrd	r0, [r0]
   159e4:	mov	r3, #0
   159e8:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   159ec:	mov	r0, r2
   159f0:	pop	{fp, pc}
   159f4:	push	{r4, r5, fp, lr}
   159f8:	add	fp, sp, #8
   159fc:	ldrd	r2, [r1]
   15a00:	ldrd	r4, [r0]
   15a04:	eor	r3, r5, r3
   15a08:	eor	r2, r4, r2
   15a0c:	orrs	r2, r2, r3
   15a10:	mov	r2, #0
   15a14:	bne	15a34 <__assert_fail@plt+0x39a8>
   15a18:	ldrd	r2, [r1, #8]
   15a1c:	ldrd	r0, [r0, #8]
   15a20:	eor	r1, r1, r3
   15a24:	eor	r0, r0, r2
   15a28:	orr	r0, r0, r1
   15a2c:	clz	r0, r0
   15a30:	lsr	r2, r0, #5
   15a34:	mov	r0, r2
   15a38:	pop	{r4, r5, fp, pc}
   15a3c:	b	21218 <__assert_fail@plt+0xf18c>
   15a40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a44:	add	fp, sp, #24
   15a48:	movw	r8, #4688	; 0x1250
   15a4c:	movt	r8, #4
   15a50:	ldr	r0, [r8, #76]	; 0x4c
   15a54:	cmp	r0, #0
   15a58:	beq	15ab4 <__assert_fail@plt+0x3a28>
   15a5c:	movw	r0, #648	; 0x288
   15a60:	movw	r6, #4816	; 0x12d0
   15a64:	mov	r5, #0
   15a68:	movt	r0, #4
   15a6c:	movt	r6, #4
   15a70:	add	r7, r0, #1
   15a74:	ldr	r0, [r6, #12]
   15a78:	ldr	r4, [r0, r5, lsl #2]
   15a7c:	ldr	r0, [r4]
   15a80:	bl	21218 <__assert_fail@plt+0xf18c>
   15a84:	ldr	r0, [r4, #4]
   15a88:	bl	21218 <__assert_fail@plt+0xf18c>
   15a8c:	ldr	r0, [r4, #8]
   15a90:	bl	21218 <__assert_fail@plt+0xf18c>
   15a94:	ldr	r0, [r4, #128]	; 0x80
   15a98:	cmp	r0, r7
   15a9c:	beq	15aa4 <__assert_fail@plt+0x3a18>
   15aa0:	bl	11ff0 <freecon@plt>
   15aa4:	ldr	r0, [r8, #76]	; 0x4c
   15aa8:	add	r5, r5, #1
   15aac:	cmp	r5, r0
   15ab0:	bcc	15a74 <__assert_fail@plt+0x39e8>
   15ab4:	movw	r1, #4816	; 0x12d0
   15ab8:	mov	r0, #0
   15abc:	movt	r1, #4
   15ac0:	str	r0, [r8, #76]	; 0x4c
   15ac4:	strh	r0, [r8, #25]
   15ac8:	str	r0, [r1, #16]
   15acc:	str	r0, [r1, #20]
   15ad0:	str	r0, [r1, #24]
   15ad4:	str	r0, [r1, #28]
   15ad8:	str	r0, [r1, #32]
   15adc:	str	r0, [r1, #36]	; 0x24
   15ae0:	str	r0, [r1, #40]	; 0x28
   15ae4:	str	r0, [r1, #44]	; 0x2c
   15ae8:	str	r0, [r1, #48]	; 0x30
   15aec:	str	r0, [r1, #52]	; 0x34
   15af0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15af8:	add	fp, sp, #28
   15afc:	sub	sp, sp, #716	; 0x2cc
   15b00:	movw	r9, #4688	; 0x1250
   15b04:	mov	r6, r1
   15b08:	mov	sl, r0
   15b0c:	mov	r8, r3
   15b10:	str	r2, [fp, #-720]	; 0xfffffd30
   15b14:	movt	r9, #4
   15b18:	ldr	r0, [r9, #68]	; 0x44
   15b1c:	ldr	r1, [r9, #76]	; 0x4c
   15b20:	cmp	r1, r0
   15b24:	bne	15b50 <__assert_fail@plt+0x3ac4>
   15b28:	ldr	r0, [r9, #72]	; 0x48
   15b2c:	mov	r2, #304	; 0x130
   15b30:	bl	296bc <_obstack_memory_used@@Base+0x3338>
   15b34:	str	r0, [r9, #72]	; 0x48
   15b38:	mov	r5, r0
   15b3c:	ldr	r0, [r9, #68]	; 0x44
   15b40:	ldr	r1, [r9, #76]	; 0x4c
   15b44:	lsl	r0, r0, #1
   15b48:	str	r0, [r9, #68]	; 0x44
   15b4c:	b	15b54 <__assert_fail@plt+0x3ac8>
   15b50:	ldr	r5, [r9, #72]	; 0x48
   15b54:	mov	r0, #152	; 0x98
   15b58:	str	r1, [fp, #-728]	; 0xfffffd28
   15b5c:	mov	r2, #152	; 0x98
   15b60:	mla	r4, r1, r0, r5
   15b64:	mov	r1, #0
   15b68:	mov	r0, r4
   15b6c:	bl	11ef4 <memset@plt>
   15b70:	mov	r0, r4
   15b74:	str	r6, [fp, #-732]	; 0xfffffd24
   15b78:	str	r4, [fp, #-724]	; 0xfffffd2c
   15b7c:	str	r6, [r0, #120]!	; 0x78
   15b80:	mov	r6, r4
   15b84:	str	r0, [fp, #-740]	; 0xfffffd1c
   15b88:	mvn	r0, #0
   15b8c:	str	r0, [r6, #144]!	; 0x90
   15b90:	ldrb	r0, [r9, #25]
   15b94:	cmp	r0, #0
   15b98:	bne	15c0c <__assert_fail@plt+0x3b80>
   15b9c:	ldrb	r0, [r9, #22]
   15ba0:	cmp	r0, #0
   15ba4:	beq	15c0c <__assert_fail@plt+0x3b80>
   15ba8:	ldr	r0, [r9, #88]	; 0x58
   15bac:	sub	sp, sp, #8
   15bb0:	str	r0, [sp]
   15bb4:	sub	r0, fp, #688	; 0x2b0
   15bb8:	mov	r1, #2
   15bbc:	mov	r2, sl
   15bc0:	mvn	r3, #0
   15bc4:	bl	265c0 <_obstack_memory_used@@Base+0x23c>
   15bc8:	add	sp, sp, #8
   15bcc:	mov	r4, r0
   15bd0:	ldrb	r0, [sl]
   15bd4:	ldrb	r1, [fp, #-688]	; 0xfffffd50
   15bd8:	cmp	r0, r1
   15bdc:	bne	15bfc <__assert_fail@plt+0x3b70>
   15be0:	mov	r0, sl
   15be4:	bl	11eac <strlen@plt>
   15be8:	subs	r0, r0, r4
   15bec:	movwne	r0, #1
   15bf0:	str	r0, [r6]
   15bf4:	bne	15c04 <__assert_fail@plt+0x3b78>
   15bf8:	b	15c0c <__assert_fail@plt+0x3b80>
   15bfc:	mov	r0, #1
   15c00:	str	r0, [r6]
   15c04:	mov	r0, #1
   15c08:	strb	r0, [r9, #25]
   15c0c:	str	r5, [fp, #-716]	; 0xfffffd34
   15c10:	ldrb	r0, [r9, #9]
   15c14:	ldrb	r5, [r9, #12]
   15c18:	str	r6, [fp, #-744]	; 0xfffffd18
   15c1c:	orr	r0, r0, r5
   15c20:	tst	r0, #255	; 0xff
   15c24:	ldreq	r0, [fp, #-720]	; 0xfffffd30
   15c28:	cmpeq	r0, #0
   15c2c:	beq	15d74 <__assert_fail@plt+0x3ce8>
   15c30:	ldrb	r0, [sl]
   15c34:	ldr	r7, [fp, #-716]	; 0xfffffd34
   15c38:	mov	r4, sl
   15c3c:	cmp	r0, #47	; 0x2f
   15c40:	beq	15cec <__assert_fail@plt+0x3c60>
   15c44:	ldrb	r6, [r8]
   15c48:	mov	r4, sl
   15c4c:	cmp	r6, #0
   15c50:	beq	15cec <__assert_fail@plt+0x3c60>
   15c54:	mov	r0, sl
   15c58:	bl	11eac <strlen@plt>
   15c5c:	mov	r4, r0
   15c60:	mov	r0, r8
   15c64:	bl	11eac <strlen@plt>
   15c68:	add	r0, r4, r0
   15c6c:	add	r0, r0, #9
   15c70:	bic	r0, r0, #7
   15c74:	sub	r4, sp, r0
   15c78:	mov	sp, r4
   15c7c:	cmp	r6, #46	; 0x2e
   15c80:	bne	15c94 <__assert_fail@plt+0x3c08>
   15c84:	ldrb	r0, [r8, #1]
   15c88:	cmp	r0, #0
   15c8c:	mov	r0, r4
   15c90:	beq	15cc4 <__assert_fail@plt+0x3c38>
   15c94:	mov	r1, r8
   15c98:	mov	r0, r4
   15c9c:	strb	r6, [r0], #1
   15ca0:	ldrb	r6, [r1, #1]!
   15ca4:	cmp	r6, #0
   15ca8:	bne	15c9c <__assert_fail@plt+0x3c10>
   15cac:	cmp	r1, r8
   15cb0:	bls	15cc4 <__assert_fail@plt+0x3c38>
   15cb4:	ldrb	r1, [r1, #-1]
   15cb8:	cmp	r1, #47	; 0x2f
   15cbc:	movne	r1, #47	; 0x2f
   15cc0:	strbne	r1, [r0], #1
   15cc4:	ldrb	r1, [sl]
   15cc8:	cmp	r1, #0
   15ccc:	beq	15ce4 <__assert_fail@plt+0x3c58>
   15cd0:	add	r2, sl, #1
   15cd4:	strb	r1, [r0], #1
   15cd8:	ldrb	r1, [r2], #1
   15cdc:	cmp	r1, #0
   15ce0:	bne	15cd4 <__assert_fail@plt+0x3c48>
   15ce4:	mov	r1, #0
   15ce8:	strb	r1, [r0]
   15cec:	ldr	r8, [fp, #-728]	; 0xfffffd28
   15cf0:	cmp	r5, #0
   15cf4:	beq	15dd8 <__assert_fail@plt+0x3d4c>
   15cf8:	mov	r0, #152	; 0x98
   15cfc:	mov	r1, #2
   15d00:	mla	r5, r8, r0, r7
   15d04:	mov	r0, r4
   15d08:	bl	20084 <__assert_fail@plt+0xdff8>
   15d0c:	cmp	r0, #0
   15d10:	str	r0, [r5, #8]
   15d14:	bne	15dd8 <__assert_fail@plt+0x3d4c>
   15d18:	movw	r1, #56024	; 0xdad8
   15d1c:	mov	r0, #0
   15d20:	mov	r2, #5
   15d24:	movt	r1, #2
   15d28:	bl	11cb4 <dcgettext@plt>
   15d2c:	mov	r7, r0
   15d30:	bl	11ed0 <__errno_location@plt>
   15d34:	ldr	r5, [r0]
   15d38:	mov	r0, #4
   15d3c:	mov	r1, r4
   15d40:	bl	27e50 <_obstack_memory_used@@Base+0x1acc>
   15d44:	mov	r3, r0
   15d48:	mov	r0, #0
   15d4c:	mov	r1, r5
   15d50:	mov	r2, r7
   15d54:	bl	11db0 <error@plt>
   15d58:	ldr	r0, [fp, #-720]	; 0xfffffd30
   15d5c:	cmp	r0, #0
   15d60:	beq	15dc4 <__assert_fail@plt+0x3d38>
   15d64:	ldr	r7, [fp, #-716]	; 0xfffffd34
   15d68:	mov	r0, #2
   15d6c:	str	r0, [r9, #28]
   15d70:	b	15dd8 <__assert_fail@plt+0x3d4c>
   15d74:	ldr	r0, [fp, #-732]	; 0xfffffd24
   15d78:	ldrb	r4, [r9, #1]
   15d7c:	cmp	r0, #3
   15d80:	bne	16a60 <__assert_fail@plt+0x49d4>
   15d84:	cmp	r4, #0
   15d88:	beq	16a60 <__assert_fail@plt+0x49d4>
   15d8c:	movw	r6, #456	; 0x1c8
   15d90:	movt	r6, #4
   15d94:	ldr	r1, [r6, #152]	; 0x98
   15d98:	cmp	r1, #0
   15d9c:	beq	16220 <__assert_fail@plt+0x4194>
   15da0:	ldr	r0, [r6, #156]	; 0x9c
   15da4:	cmp	r1, #2
   15da8:	beq	16208 <__assert_fail@plt+0x417c>
   15dac:	cmp	r1, #1
   15db0:	bne	15c30 <__assert_fail@plt+0x3ba4>
   15db4:	ldrb	r0, [r0]
   15db8:	cmp	r0, #48	; 0x30
   15dbc:	bne	15c30 <__assert_fail@plt+0x3ba4>
   15dc0:	b	16220 <__assert_fail@plt+0x4194>
   15dc4:	ldr	r0, [r9, #28]
   15dc8:	ldr	r7, [fp, #-716]	; 0xfffffd34
   15dcc:	cmp	r0, #0
   15dd0:	moveq	r0, #1
   15dd4:	streq	r0, [r9, #28]
   15dd8:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   15ddc:	str	sl, [fp, #-736]	; 0xfffffd20
   15de0:	add	sl, r0, #16
   15de4:	ldr	r0, [r9, #44]	; 0x2c
   15de8:	sub	r1, r0, #2
   15dec:	cmp	r1, #2
   15df0:	bcs	15e58 <__assert_fail@plt+0x3dcc>
   15df4:	ldr	r0, [fp, #-720]	; 0xfffffd30
   15df8:	cmp	r0, #0
   15dfc:	beq	15ea4 <__assert_fail@plt+0x3e18>
   15e00:	bl	1b9fc <__assert_fail@plt+0x9970>
   15e04:	sub	sp, sp, #8
   15e08:	str	r0, [sp]
   15e0c:	mvn	r0, #99	; 0x63
   15e10:	mov	r1, r4
   15e14:	mov	r2, sl
   15e18:	mov	r3, #0
   15e1c:	bl	1b348 <__assert_fail@plt+0x92bc>
   15e20:	add	sp, sp, #8
   15e24:	ldr	r1, [r9, #44]	; 0x2c
   15e28:	mov	r6, #1
   15e2c:	cmp	r1, #2
   15e30:	beq	15e88 <__assert_fail@plt+0x3dfc>
   15e34:	cmn	r0, #1
   15e38:	ble	15e94 <__assert_fail@plt+0x3e08>
   15e3c:	mov	r1, #152	; 0x98
   15e40:	mla	r1, r8, r1, r7
   15e44:	ldr	r1, [r1, #32]
   15e48:	and	r1, r1, #61440	; 0xf000
   15e4c:	cmp	r1, #16384	; 0x4000
   15e50:	beq	15e88 <__assert_fail@plt+0x3dfc>
   15e54:	b	15ea4 <__assert_fail@plt+0x3e18>
   15e58:	cmp	r0, #4
   15e5c:	bne	15ea4 <__assert_fail@plt+0x3e18>
   15e60:	bl	1b9fc <__assert_fail@plt+0x9970>
   15e64:	sub	sp, sp, #8
   15e68:	str	r0, [sp]
   15e6c:	mvn	r0, #99	; 0x63
   15e70:	mov	r1, r4
   15e74:	mov	r2, sl
   15e78:	mov	r3, #0
   15e7c:	bl	1b348 <__assert_fail@plt+0x92bc>
   15e80:	add	sp, sp, #8
   15e84:	mov	r6, #1
   15e88:	cmp	r0, #0
   15e8c:	bne	15ed4 <__assert_fail@plt+0x3e48>
   15e90:	b	15f5c <__assert_fail@plt+0x3ed0>
   15e94:	bl	11ed0 <__errno_location@plt>
   15e98:	ldr	r0, [r0]
   15e9c:	cmp	r0, #2
   15ea0:	bne	15ed4 <__assert_fail@plt+0x3e48>
   15ea4:	bl	1b9fc <__assert_fail@plt+0x9970>
   15ea8:	sub	sp, sp, #8
   15eac:	str	r0, [sp]
   15eb0:	mvn	r0, #99	; 0x63
   15eb4:	mov	r1, r4
   15eb8:	mov	r2, sl
   15ebc:	mov	r3, #256	; 0x100
   15ec0:	bl	1b348 <__assert_fail@plt+0x92bc>
   15ec4:	add	sp, sp, #8
   15ec8:	mov	r6, #0
   15ecc:	cmp	r0, #0
   15ed0:	beq	15f5c <__assert_fail@plt+0x3ed0>
   15ed4:	movw	r1, #56133	; 0xdb45
   15ed8:	mov	r0, #0
   15edc:	mov	r2, #5
   15ee0:	mov	r6, #0
   15ee4:	movt	r1, #2
   15ee8:	bl	11cb4 <dcgettext@plt>
   15eec:	mov	r5, r0
   15ef0:	bl	11ed0 <__errno_location@plt>
   15ef4:	ldr	r7, [r0]
   15ef8:	mov	r0, #4
   15efc:	mov	r1, r4
   15f00:	bl	27e50 <_obstack_memory_used@@Base+0x1acc>
   15f04:	mov	r3, r0
   15f08:	mov	r0, #0
   15f0c:	mov	r1, r7
   15f10:	mov	r2, r5
   15f14:	bl	11db0 <error@plt>
   15f18:	ldr	r0, [fp, #-720]	; 0xfffffd30
   15f1c:	cmp	r0, #0
   15f20:	beq	15fcc <__assert_fail@plt+0x3f40>
   15f24:	ldr	r1, [fp, #-716]	; 0xfffffd34
   15f28:	mov	r0, #2
   15f2c:	mov	r7, #0
   15f30:	str	r0, [r9, #28]
   15f34:	mov	r0, #152	; 0x98
   15f38:	mla	r0, r8, r0, r1
   15f3c:	movw	r1, #648	; 0x288
   15f40:	movt	r1, #4
   15f44:	add	r1, r1, #1
   15f48:	str	r1, [r0, #128]	; 0x80
   15f4c:	mov	r0, r6
   15f50:	mov	r1, r7
   15f54:	sub	sp, fp, #28
   15f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f5c:	mov	r0, #152	; 0x98
   15f60:	mov	r1, #1
   15f64:	mla	r0, r8, r0, r7
   15f68:	strb	r1, [r0, #132]	; 0x84
   15f6c:	ldr	r1, [fp, #-732]	; 0xfffffd24
   15f70:	cmp	r1, #5
   15f74:	beq	15f88 <__assert_fail@plt+0x3efc>
   15f78:	ldr	r0, [r0, #32]
   15f7c:	and	r0, r0, #61440	; 0xf000
   15f80:	cmp	r0, #32768	; 0x8000
   15f84:	bne	16104 <__assert_fail@plt+0x4078>
   15f88:	ldrb	r0, [r9, #1]
   15f8c:	cmp	r0, #0
   15f90:	beq	16104 <__assert_fail@plt+0x4078>
   15f94:	movw	r0, #456	; 0x1c8
   15f98:	movt	r0, #4
   15f9c:	ldr	r1, [r0, #168]	; 0xa8
   15fa0:	cmp	r1, #0
   15fa4:	beq	16104 <__assert_fail@plt+0x4078>
   15fa8:	ldr	r0, [r0, #172]	; 0xac
   15fac:	cmp	r1, #2
   15fb0:	beq	1602c <__assert_fail@plt+0x3fa0>
   15fb4:	cmp	r1, #1
   15fb8:	bne	16044 <__assert_fail@plt+0x3fb8>
   15fbc:	ldrb	r0, [r0]
   15fc0:	cmp	r0, #48	; 0x30
   15fc4:	bne	16044 <__assert_fail@plt+0x3fb8>
   15fc8:	b	16104 <__assert_fail@plt+0x4078>
   15fcc:	ldr	r0, [r9, #28]
   15fd0:	ldr	r1, [fp, #-716]	; 0xfffffd34
   15fd4:	cmp	r0, #0
   15fd8:	moveq	r0, #1
   15fdc:	streq	r0, [r9, #28]
   15fe0:	mov	r0, #152	; 0x98
   15fe4:	mla	r0, r8, r0, r1
   15fe8:	movw	r1, #648	; 0x288
   15fec:	movt	r1, #4
   15ff0:	add	r1, r1, #1
   15ff4:	str	r1, [r0, #128]	; 0x80
   15ff8:	ldr	r0, [fp, #-736]	; 0xfffffd20
   15ffc:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   16000:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   16004:	mov	r6, #0
   16008:	mov	r7, #0
   1600c:	str	r0, [r1]
   16010:	ldr	r0, [r9, #76]	; 0x4c
   16014:	add	r0, r0, #1
   16018:	str	r0, [r9, #76]	; 0x4c
   1601c:	mov	r0, r6
   16020:	mov	r1, r7
   16024:	sub	sp, fp, #28
   16028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1602c:	movw	r1, #54328	; 0xd438
   16030:	mov	r2, #2
   16034:	movt	r1, #2
   16038:	bl	1202c <strncmp@plt>
   1603c:	cmp	r0, #0
   16040:	beq	16104 <__assert_fail@plt+0x4078>
   16044:	mov	r0, #152	; 0x98
   16048:	movw	r1, #4816	; 0x12d0
   1604c:	mla	r8, r8, r0, r7
   16050:	movt	r1, #4
   16054:	ldr	r0, [r8, #16]!
   16058:	ldrd	r2, [r1, #96]	; 0x60
   1605c:	ldr	r1, [r8, #4]
   16060:	eor	r0, r0, r2
   16064:	eor	r1, r1, r3
   16068:	orrs	r0, r0, r1
   1606c:	bne	16084 <__assert_fail@plt+0x3ff8>
   16070:	bl	11ed0 <__errno_location@plt>
   16074:	mov	r1, #95	; 0x5f
   16078:	str	r1, [r0]
   1607c:	mov	r0, #0
   16080:	b	160f4 <__assert_fail@plt+0x4068>
   16084:	mov	r0, r4
   16088:	bl	11f90 <cap_get_file@plt>
   1608c:	cmp	r0, #0
   16090:	beq	160cc <__assert_fail@plt+0x4040>
   16094:	mov	r1, #0
   16098:	mov	r5, r0
   1609c:	bl	11ba0 <cap_to_text@plt>
   160a0:	str	r0, [fp, #-732]	; 0xfffffd24
   160a4:	mov	r0, r5
   160a8:	bl	11fd8 <cap_free@plt>
   160ac:	ldr	r0, [fp, #-732]	; 0xfffffd24
   160b0:	cmp	r0, #0
   160b4:	beq	160cc <__assert_fail@plt+0x4040>
   160b8:	ldrb	r5, [r0]
   160bc:	bl	11fd8 <cap_free@plt>
   160c0:	mov	r0, #1
   160c4:	cmp	r5, #0
   160c8:	bne	160f4 <__assert_fail@plt+0x4068>
   160cc:	bl	11ed0 <__errno_location@plt>
   160d0:	ldr	r1, [r0]
   160d4:	mov	r0, #0
   160d8:	cmp	r1, #22
   160dc:	cmpne	r1, #95	; 0x5f
   160e0:	bne	16a3c <__assert_fail@plt+0x49b0>
   160e4:	ldrd	r2, [r8]
   160e8:	movw	r1, #4816	; 0x12d0
   160ec:	movt	r1, #4
   160f0:	strd	r2, [r1, #96]	; 0x60
   160f4:	ldr	r8, [fp, #-728]	; 0xfffffd28
   160f8:	mov	r1, #152	; 0x98
   160fc:	mla	r1, r8, r1, r7
   16100:	strb	r0, [r1, #140]	; 0x8c
   16104:	ldr	r0, [r9, #40]	; 0x28
   16108:	cmp	r0, #0
   1610c:	ldrbne	r0, [r9, #7]
   16110:	cmpne	r0, #1
   16114:	bne	16354 <__assert_fail@plt+0x42c8>
   16118:	mov	r0, #152	; 0x98
   1611c:	movw	r1, #4816	; 0x12d0
   16120:	mla	r5, r8, r0, r7
   16124:	movt	r1, #4
   16128:	mov	r7, r5
   1612c:	ldrd	r2, [r1, #104]	; 0x68
   16130:	ldr	r0, [r7, #16]!
   16134:	ldr	r1, [r7, #4]
   16138:	eor	r0, r0, r2
   1613c:	eor	r1, r1, r3
   16140:	orrs	r0, r0, r1
   16144:	bne	1615c <__assert_fail@plt+0x40d0>
   16148:	bl	11ed0 <__errno_location@plt>
   1614c:	mov	r1, #95	; 0x5f
   16150:	add	r5, r5, #128	; 0x80
   16154:	str	r1, [r0]
   16158:	b	161d8 <__assert_fail@plt+0x414c>
   1615c:	add	r5, r5, #128	; 0x80
   16160:	mov	r0, r4
   16164:	cmp	r6, #0
   16168:	mov	r1, r5
   1616c:	beq	161a4 <__assert_fail@plt+0x4118>
   16170:	bl	2851c <_obstack_memory_used@@Base+0x2198>
   16174:	cmn	r0, #1
   16178:	ble	161b0 <__assert_fail@plt+0x4124>
   1617c:	ldr	r1, [r5]
   16180:	movw	r0, #56150	; 0xdb56
   16184:	movt	r0, #2
   16188:	bl	11bd0 <strcmp@plt>
   1618c:	ldr	r7, [fp, #-716]	; 0xfffffd34
   16190:	mov	r5, r0
   16194:	cmp	r0, #0
   16198:	mov	r0, #0
   1619c:	movwne	r5, #1
   161a0:	b	16258 <__assert_fail@plt+0x41cc>
   161a4:	bl	28590 <_obstack_memory_used@@Base+0x220c>
   161a8:	cmn	r0, #1
   161ac:	bgt	1617c <__assert_fail@plt+0x40f0>
   161b0:	bl	11ed0 <__errno_location@plt>
   161b4:	ldr	r0, [r0]
   161b8:	cmp	r0, #22
   161bc:	cmpne	r0, #95	; 0x5f
   161c0:	bne	16a30 <__assert_fail@plt+0x49a4>
   161c4:	ldrd	r0, [r7]
   161c8:	movw	r2, #4816	; 0x12d0
   161cc:	movt	r2, #4
   161d0:	strd	r0, [r2, #104]	; 0x68
   161d4:	bl	11ed0 <__errno_location@plt>
   161d8:	movw	r1, #648	; 0x288
   161dc:	ldr	r7, [fp, #-716]	; 0xfffffd34
   161e0:	movt	r1, #4
   161e4:	add	r1, r1, #1
   161e8:	str	r1, [r5]
   161ec:	ldr	r0, [r0]
   161f0:	cmp	r0, #95	; 0x5f
   161f4:	cmpne	r0, #61	; 0x3d
   161f8:	bne	16250 <__assert_fail@plt+0x41c4>
   161fc:	mov	r5, #0
   16200:	mov	r0, #0
   16204:	b	16258 <__assert_fail@plt+0x41cc>
   16208:	movw	r1, #54328	; 0xd438
   1620c:	mov	r2, #2
   16210:	movt	r1, #2
   16214:	bl	1202c <strncmp@plt>
   16218:	cmp	r0, #0
   1621c:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16220:	ldr	r1, [r6, #144]	; 0x90
   16224:	cmp	r1, #0
   16228:	beq	165c4 <__assert_fail@plt+0x4538>
   1622c:	ldr	r0, [r6, #148]	; 0x94
   16230:	cmp	r1, #2
   16234:	beq	165ac <__assert_fail@plt+0x4520>
   16238:	cmp	r1, #1
   1623c:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16240:	ldrb	r0, [r0]
   16244:	cmp	r0, #48	; 0x30
   16248:	bne	15c30 <__assert_fail@plt+0x3ba4>
   1624c:	b	165c4 <__assert_fail@plt+0x4538>
   16250:	mov	r0, #1
   16254:	mov	r5, #0
   16258:	ldr	r1, [r9, #40]	; 0x28
   1625c:	mov	r6, #0
   16260:	orrs	r1, r1, r0
   16264:	mov	r1, #0
   16268:	bne	162dc <__assert_fail@plt+0x4250>
   1626c:	movw	r0, #4816	; 0x12d0
   16270:	ldrd	r2, [sl]
   16274:	movt	r0, #4
   16278:	ldrd	r0, [r0, #112]	; 0x70
   1627c:	eor	r1, r3, r1
   16280:	eor	r0, r2, r0
   16284:	orr	r7, r0, r1
   16288:	bl	11ed0 <__errno_location@plt>
   1628c:	mov	r8, r0
   16290:	cmp	r7, #0
   16294:	bne	162a8 <__assert_fail@plt+0x421c>
   16298:	mov	r0, #95	; 0x5f
   1629c:	str	r0, [r8]
   162a0:	mov	r0, #0
   162a4:	b	162c4 <__assert_fail@plt+0x4238>
   162a8:	mov	r0, #0
   162ac:	mov	r1, sl
   162b0:	str	r0, [r8]
   162b4:	mov	r0, r4
   162b8:	bl	20a38 <__assert_fail@plt+0xe9ac>
   162bc:	cmp	r0, #0
   162c0:	ble	165f4 <__assert_fail@plt+0x4568>
   162c4:	ldr	r8, [fp, #-728]	; 0xfffffd28
   162c8:	ldr	r7, [fp, #-716]	; 0xfffffd34
   162cc:	cmp	r0, #0
   162d0:	mov	r1, #0
   162d4:	lsr	r0, r0, #31
   162d8:	movwgt	r1, #1
   162dc:	orr	r2, r5, r1
   162e0:	cmp	r2, #1
   162e4:	bne	162fc <__assert_fail@plt+0x4270>
   162e8:	mov	r6, #1
   162ec:	cmp	r1, #0
   162f0:	movwne	r6, #2
   162f4:	cmp	r5, #0
   162f8:	moveq	r6, #2
   162fc:	mov	r1, #152	; 0x98
   16300:	cmp	r6, #0
   16304:	mla	r1, r8, r1, r7
   16308:	str	r6, [r1, #136]	; 0x88
   1630c:	movwne	r6, #1
   16310:	cmp	r0, #0
   16314:	ldrb	r1, [r9, #26]
   16318:	orr	r1, r1, r6
   1631c:	strb	r1, [r9, #26]
   16320:	beq	16354 <__assert_fail@plt+0x42c8>
   16324:	bl	11ed0 <__errno_location@plt>
   16328:	ldr	r5, [r0]
   1632c:	mov	r0, #0
   16330:	mov	r1, #3
   16334:	mov	r2, r4
   16338:	bl	280cc <_obstack_memory_used@@Base+0x1d48>
   1633c:	movw	r2, #62850	; 0xf582
   16340:	mov	r3, r0
   16344:	mov	r0, #0
   16348:	mov	r1, r5
   1634c:	movt	r2, #2
   16350:	bl	11db0 <error@plt>
   16354:	mov	r0, #152	; 0x98
   16358:	mla	r1, r8, r0, r7
   1635c:	ldr	r0, [r1, #32]!
   16360:	str	r1, [fp, #-732]	; 0xfffffd24
   16364:	and	r1, r0, #61440	; 0xf000
   16368:	cmp	r1, #40960	; 0xa000
   1636c:	bne	16484 <__assert_fail@plt+0x43f8>
   16370:	ldr	r1, [r9, #40]	; 0x28
   16374:	ldr	sl, [fp, #-736]	; 0xfffffd20
   16378:	cmp	r1, #0
   1637c:	ldrbne	r1, [r9, #3]
   16380:	cmpne	r1, #1
   16384:	bne	16488 <__assert_fail@plt+0x43fc>
   16388:	mov	r0, #152	; 0x98
   1638c:	mla	r5, r8, r0, r7
   16390:	mov	r0, r4
   16394:	ldr	r1, [r5, #64]	; 0x40
   16398:	bl	1f54c <__assert_fail@plt+0xd4c0>
   1639c:	mov	r7, r0
   163a0:	add	r6, r5, #4
   163a4:	cmp	r0, #0
   163a8:	str	r0, [r5, #4]
   163ac:	bne	16420 <__assert_fail@plt+0x4394>
   163b0:	movw	r1, #56160	; 0xdb60
   163b4:	mov	r0, #0
   163b8:	mov	r2, #5
   163bc:	movt	r1, #2
   163c0:	bl	11cb4 <dcgettext@plt>
   163c4:	mov	r5, r0
   163c8:	bl	11ed0 <__errno_location@plt>
   163cc:	ldr	r7, [r0]
   163d0:	mov	r0, #4
   163d4:	mov	r1, r4
   163d8:	bl	27e50 <_obstack_memory_used@@Base+0x1acc>
   163dc:	mov	r3, r0
   163e0:	mov	r0, #0
   163e4:	mov	r1, r7
   163e8:	mov	r2, r5
   163ec:	bl	11db0 <error@plt>
   163f0:	ldr	r1, [fp, #-720]	; 0xfffffd30
   163f4:	mov	r0, #2
   163f8:	cmp	r1, #0
   163fc:	bne	16410 <__assert_fail@plt+0x4384>
   16400:	ldr	r0, [r9, #28]
   16404:	cmp	r0, #0
   16408:	bne	16414 <__assert_fail@plt+0x4388>
   1640c:	mov	r0, #1
   16410:	str	r0, [r9, #28]
   16414:	ldr	r7, [r6]
   16418:	cmp	r7, #0
   1641c:	beq	16620 <__assert_fail@plt+0x4594>
   16420:	ldrb	r0, [r7]
   16424:	cmp	r0, #47	; 0x2f
   16428:	beq	164c8 <__assert_fail@plt+0x443c>
   1642c:	mov	r0, r4
   16430:	bl	2095c <__assert_fail@plt+0xe8d0>
   16434:	cmp	r0, #0
   16438:	beq	164c8 <__assert_fail@plt+0x443c>
   1643c:	mov	r5, r0
   16440:	mov	r0, r7
   16444:	bl	11eac <strlen@plt>
   16448:	add	r0, r5, r0
   1644c:	add	r0, r0, #2
   16450:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   16454:	mov	r8, r0
   16458:	add	r0, r4, r5
   1645c:	mov	r1, r4
   16460:	ldrb	r0, [r0, #-1]
   16464:	cmp	r0, #47	; 0x2f
   16468:	mov	r0, r8
   1646c:	addne	r5, r5, #1
   16470:	mov	r2, r5
   16474:	bl	11f0c <stpncpy@plt>
   16478:	mov	r1, r7
   1647c:	bl	11ca8 <stpcpy@plt>
   16480:	b	164d4 <__assert_fail@plt+0x4448>
   16484:	ldr	sl, [fp, #-736]	; 0xfffffd20
   16488:	and	r0, r0, #61440	; 0xf000
   1648c:	cmp	r0, #40960	; 0xa000
   16490:	beq	16648 <__assert_fail@plt+0x45bc>
   16494:	ldr	r2, [fp, #-740]	; 0xfffffd1c
   16498:	cmp	r0, #16384	; 0x4000
   1649c:	bne	164c0 <__assert_fail@plt+0x4434>
   164a0:	ldr	r0, [fp, #-720]	; 0xfffffd30
   164a4:	cmp	r0, #0
   164a8:	beq	165a4 <__assert_fail@plt+0x4518>
   164ac:	ldrb	r1, [r9, #5]
   164b0:	mov	r0, #9
   164b4:	cmp	r1, #1
   164b8:	moveq	r0, #3
   164bc:	b	16650 <__assert_fail@plt+0x45c4>
   164c0:	mov	r0, #5
   164c4:	b	16650 <__assert_fail@plt+0x45c4>
   164c8:	mov	r0, r7
   164cc:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   164d0:	mov	r8, r0
   164d4:	ldr	r0, [fp, #-744]	; 0xfffffd18
   164d8:	ldr	r7, [fp, #-716]	; 0xfffffd34
   164dc:	ldr	r0, [r0]
   164e0:	cmp	r0, #0
   164e4:	bne	16540 <__assert_fail@plt+0x44b4>
   164e8:	ldr	r4, [r6]
   164ec:	ldr	r0, [r9, #88]	; 0x58
   164f0:	sub	sp, sp, #8
   164f4:	str	r0, [sp]
   164f8:	sub	r0, fp, #688	; 0x2b0
   164fc:	mov	r1, #2
   16500:	mov	r2, r4
   16504:	mvn	r3, #0
   16508:	bl	265c0 <_obstack_memory_used@@Base+0x23c>
   1650c:	add	sp, sp, #8
   16510:	mov	r5, r0
   16514:	ldrb	r0, [r4]
   16518:	ldrb	r1, [fp, #-688]	; 0xfffffd50
   1651c:	cmp	r0, r1
   16520:	bne	16534 <__assert_fail@plt+0x44a8>
   16524:	mov	r0, r4
   16528:	bl	11eac <strlen@plt>
   1652c:	cmp	r0, r5
   16530:	beq	16540 <__assert_fail@plt+0x44b4>
   16534:	ldr	r1, [fp, #-744]	; 0xfffffd18
   16538:	mvn	r0, #0
   1653c:	str	r0, [r1]
   16540:	ldr	r0, [r9, #48]	; 0x30
   16544:	cmp	r0, #1
   16548:	bhi	16558 <__assert_fail@plt+0x44cc>
   1654c:	ldrb	r0, [r9, #3]
   16550:	cmp	r0, #1
   16554:	bne	16628 <__assert_fail@plt+0x459c>
   16558:	sub	sp, sp, #8
   1655c:	mov	r0, #2
   16560:	sub	r2, fp, #688	; 0x2b0
   16564:	mov	r1, r8
   16568:	mov	r3, #0
   1656c:	str	r0, [sp]
   16570:	mvn	r0, #99	; 0x63
   16574:	bl	1b348 <__assert_fail@plt+0x92bc>
   16578:	add	sp, sp, #8
   1657c:	cmp	r0, #0
   16580:	bne	16628 <__assert_fail@plt+0x459c>
   16584:	ldr	r1, [fp, #-728]	; 0xfffffd28
   16588:	mov	r0, #152	; 0x98
   1658c:	mla	r0, r1, r0, r7
   16590:	mov	r1, #1
   16594:	strb	r1, [r0, #133]	; 0x85
   16598:	ldr	r1, [fp, #-672]	; 0xfffffd60
   1659c:	str	r1, [r0, #124]	; 0x7c
   165a0:	b	16628 <__assert_fail@plt+0x459c>
   165a4:	mov	r0, #3
   165a8:	b	16650 <__assert_fail@plt+0x45c4>
   165ac:	movw	r1, #54328	; 0xd438
   165b0:	mov	r2, #2
   165b4:	movt	r1, #2
   165b8:	bl	1202c <strncmp@plt>
   165bc:	cmp	r0, #0
   165c0:	bne	15c30 <__assert_fail@plt+0x3ba4>
   165c4:	ldr	r1, [r6, #160]	; 0xa0
   165c8:	cmp	r1, #0
   165cc:	beq	16a60 <__assert_fail@plt+0x49d4>
   165d0:	ldr	r0, [r6, #164]	; 0xa4
   165d4:	cmp	r1, #2
   165d8:	beq	16a48 <__assert_fail@plt+0x49bc>
   165dc:	cmp	r1, #1
   165e0:	bne	15c30 <__assert_fail@plt+0x3ba4>
   165e4:	ldrb	r0, [r0]
   165e8:	cmp	r0, #48	; 0x30
   165ec:	bne	15c30 <__assert_fail@plt+0x3ba4>
   165f0:	b	16a60 <__assert_fail@plt+0x49d4>
   165f4:	ldr	r1, [r8]
   165f8:	ldr	r7, [fp, #-716]	; 0xfffffd34
   165fc:	cmp	r1, #22
   16600:	cmpne	r1, #95	; 0x5f
   16604:	bne	16b3c <__assert_fail@plt+0x4ab0>
   16608:	ldrd	r2, [sl]
   1660c:	movw	r1, #4816	; 0x12d0
   16610:	movt	r1, #4
   16614:	strd	r2, [r1, #112]	; 0x70
   16618:	ldr	r8, [fp, #-728]	; 0xfffffd28
   1661c:	b	162cc <__assert_fail@plt+0x4240>
   16620:	ldr	r7, [fp, #-716]	; 0xfffffd34
   16624:	mov	r8, #0
   16628:	mov	r0, r8
   1662c:	bl	21218 <__assert_fail@plt+0xf18c>
   16630:	ldr	r0, [fp, #-732]	; 0xfffffd24
   16634:	ldr	r8, [fp, #-728]	; 0xfffffd28
   16638:	ldr	r0, [r0]
   1663c:	and	r0, r0, #61440	; 0xf000
   16640:	cmp	r0, #40960	; 0xa000
   16644:	bne	16494 <__assert_fail@plt+0x4408>
   16648:	ldr	r2, [fp, #-740]	; 0xfffffd1c
   1664c:	mov	r0, #6
   16650:	str	r0, [r2]
   16654:	mov	r0, #152	; 0x98
   16658:	mla	r0, r8, r0, r7
   1665c:	ldrd	r6, [r0, #80]	; 0x50
   16660:	ldr	r0, [r9, #40]	; 0x28
   16664:	cmp	r0, #0
   16668:	ldrbne	r0, [r9, #8]
   1666c:	cmpne	r0, #1
   16670:	bne	166f8 <__assert_fail@plt+0x466c>
   16674:	movw	r5, #4816	; 0x12d0
   16678:	ldr	r3, [r9, #100]	; 0x64
   1667c:	movt	r5, #4
   16680:	ldrd	r0, [r5, #88]	; 0x58
   16684:	sub	sp, sp, #16
   16688:	mov	r2, #0
   1668c:	mov	r4, #512	; 0x200
   16690:	str	r0, [sp, #8]
   16694:	str	r1, [sp, #12]
   16698:	mov	r0, r6
   1669c:	mov	r1, r7
   166a0:	str	r2, [sp, #4]
   166a4:	sub	r2, fp, #688	; 0x2b0
   166a8:	str	r4, [sp]
   166ac:	bl	22750 <__assert_fail@plt+0x106c4>
   166b0:	add	sp, sp, #16
   166b4:	mov	r1, #0
   166b8:	bl	23bf8 <__assert_fail@plt+0x11b6c>
   166bc:	ldr	r1, [r5, #20]
   166c0:	cmp	r1, r0
   166c4:	strlt	r0, [r5, #20]
   166c8:	ldr	r0, [r9, #40]	; 0x28
   166cc:	cmp	r0, #0
   166d0:	bne	166f8 <__assert_fail@plt+0x466c>
   166d4:	ldrb	r0, [r9, #14]
   166d8:	cmp	r0, #0
   166dc:	beq	1681c <__assert_fail@plt+0x4790>
   166e0:	ldrb	r0, [r9, #17]
   166e4:	cmp	r0, #0
   166e8:	beq	1691c <__assert_fail@plt+0x4890>
   166ec:	ldrb	r0, [r9, #19]
   166f0:	cmp	r0, #1
   166f4:	beq	169a4 <__assert_fail@plt+0x4918>
   166f8:	ldrb	r0, [r9, #7]
   166fc:	cmp	r0, #1
   16700:	bne	1672c <__assert_fail@plt+0x46a0>
   16704:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16708:	mov	r0, #152	; 0x98
   1670c:	mla	r0, r8, r0, r1
   16710:	ldr	r0, [r0, #128]	; 0x80
   16714:	bl	11eac <strlen@plt>
   16718:	movw	r1, #4816	; 0x12d0
   1671c:	movt	r1, #4
   16720:	ldr	r2, [r1, #40]	; 0x28
   16724:	cmp	r2, r0
   16728:	strlt	r0, [r1, #40]	; 0x28
   1672c:	ldr	r0, [r9, #40]	; 0x28
   16730:	cmp	r0, #0
   16734:	bne	16c48 <__assert_fail@plt+0x4bbc>
   16738:	ldr	r1, [fp, #-716]	; 0xfffffd34
   1673c:	mov	r0, #152	; 0x98
   16740:	sub	lr, fp, #512	; 0x200
   16744:	sub	r2, lr, #197	; 0xc5
   16748:	mla	r0, r8, r0, r1
   1674c:	mov	r1, #0
   16750:	ldr	r0, [r0, #36]	; 0x24
   16754:	bl	236c0 <__assert_fail@plt+0x11634>
   16758:	bl	11eac <strlen@plt>
   1675c:	movw	r4, #4816	; 0x12d0
   16760:	movt	r4, #4
   16764:	ldr	r1, [r4, #24]
   16768:	cmp	r1, r0
   1676c:	strlt	r0, [r4, #24]
   16770:	ldr	r0, [fp, #-732]	; 0xfffffd24
   16774:	ldr	r0, [r0]
   16778:	and	r0, r0, #45056	; 0xb000
   1677c:	orr	r0, r0, #16384	; 0x4000
   16780:	cmp	r0, #24576	; 0x6000
   16784:	bne	16858 <__assert_fail@plt+0x47cc>
   16788:	ldr	r1, [fp, #-716]	; 0xfffffd34
   1678c:	mov	r0, #152	; 0x98
   16790:	sub	r2, fp, #688	; 0x2b0
   16794:	mla	r5, r8, r0, r1
   16798:	ldr	r0, [r5, #48]!	; 0x30
   1679c:	ldr	r1, [r5, #4]
   167a0:	lsr	r0, r0, #8
   167a4:	lsr	r1, r1, #12
   167a8:	bfi	r0, r1, #12, #20
   167ac:	mov	r1, #0
   167b0:	bl	236c0 <__assert_fail@plt+0x11634>
   167b4:	bl	11eac <strlen@plt>
   167b8:	ldr	r1, [r4, #44]	; 0x2c
   167bc:	cmp	r1, r0
   167c0:	mov	r1, #0
   167c4:	strlt	r0, [r4, #44]	; 0x2c
   167c8:	ldrd	r2, [r5]
   167cc:	lsr	r0, r2, #12
   167d0:	orr	r0, r0, r3, lsl #20
   167d4:	bfi	r0, r2, #0, #8
   167d8:	sub	r2, fp, #688	; 0x2b0
   167dc:	bl	236c0 <__assert_fail@plt+0x11634>
   167e0:	bl	11eac <strlen@plt>
   167e4:	ldr	r1, [r4, #48]	; 0x30
   167e8:	cmp	r1, r0
   167ec:	strlt	r0, [r4, #48]	; 0x30
   167f0:	movlt	r1, r0
   167f4:	ldr	r0, [r4, #44]	; 0x2c
   167f8:	ldr	r2, [r4, #52]	; 0x34
   167fc:	add	r0, r0, r1
   16800:	add	r0, r0, #2
   16804:	cmp	r2, r0
   16808:	strlt	r0, [r4, #52]	; 0x34
   1680c:	ldrb	r0, [r9, #15]
   16810:	cmp	r0, #1
   16814:	beq	16c54 <__assert_fail@plt+0x4bc8>
   16818:	b	16c80 <__assert_fail@plt+0x4bf4>
   1681c:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16820:	mov	r0, #152	; 0x98
   16824:	mla	r0, r8, r0, r1
   16828:	ldr	r4, [r0, #40]	; 0x28
   1682c:	ldrb	r0, [r9, #16]
   16830:	cmp	r0, #0
   16834:	bne	168d0 <__assert_fail@plt+0x4844>
   16838:	mov	r0, r4
   1683c:	bl	232c8 <__assert_fail@plt+0x1123c>
   16840:	cmp	r0, #0
   16844:	beq	168d0 <__assert_fail@plt+0x4844>
   16848:	mov	r1, #0
   1684c:	bl	23bf8 <__assert_fail@plt+0x11b6c>
   16850:	bic	r0, r0, r0, asr #31
   16854:	b	16904 <__assert_fail@plt+0x4878>
   16858:	ldr	r1, [fp, #-716]	; 0xfffffd34
   1685c:	mov	r0, #152	; 0x98
   16860:	movw	r2, #648	; 0x288
   16864:	movt	r2, #4
   16868:	mla	r0, r8, r0, r1
   1686c:	ldr	lr, [r0, #68]	; 0x44
   16870:	ldr	r0, [r0, #64]	; 0x40
   16874:	ldr	r3, [r9, #104]	; 0x68
   16878:	ldr	r5, [r2, #12]
   1687c:	ldr	r2, [r2, #8]
   16880:	sub	sp, sp, #16
   16884:	mov	ip, #0
   16888:	mov	r1, #1
   1688c:	stm	sp, {r1, ip}
   16890:	str	r2, [sp, #8]
   16894:	sub	r2, fp, #688	; 0x2b0
   16898:	mov	r1, lr
   1689c:	str	r5, [sp, #12]
   168a0:	bl	22750 <__assert_fail@plt+0x106c4>
   168a4:	add	sp, sp, #16
   168a8:	mov	r1, #0
   168ac:	bl	23bf8 <__assert_fail@plt+0x11b6c>
   168b0:	ldr	r1, [r4, #52]	; 0x34
   168b4:	cmp	r1, r0
   168b8:	bge	16c48 <__assert_fail@plt+0x4bbc>
   168bc:	str	r0, [r4, #52]	; 0x34
   168c0:	ldrb	r0, [r9, #15]
   168c4:	cmp	r0, #1
   168c8:	beq	16c54 <__assert_fail@plt+0x4bc8>
   168cc:	b	16c80 <__assert_fail@plt+0x4bf4>
   168d0:	sub	sp, sp, #16
   168d4:	mov	r0, #0
   168d8:	mov	r1, #0
   168dc:	mov	r2, #1
   168e0:	mvn	r3, #0
   168e4:	str	r4, [sp, #8]
   168e8:	str	r0, [sp, #12]
   168ec:	movw	r0, #56189	; 0xdb7d
   168f0:	movt	r0, #2
   168f4:	str	r0, [sp]
   168f8:	mov	r0, #0
   168fc:	bl	12068 <__snprintf_chk@plt>
   16900:	add	sp, sp, #16
   16904:	ldr	r1, [r5, #28]
   16908:	cmp	r1, r0
   1690c:	strlt	r0, [r5, #28]
   16910:	ldrb	r0, [r9, #17]
   16914:	cmp	r0, #0
   16918:	bne	166ec <__assert_fail@plt+0x4660>
   1691c:	ldr	r1, [fp, #-716]	; 0xfffffd34
   16920:	mov	r0, #152	; 0x98
   16924:	mla	r0, r8, r0, r1
   16928:	ldr	r4, [r0, #44]	; 0x2c
   1692c:	ldrb	r0, [r9, #16]
   16930:	cmp	r0, #0
   16934:	bne	16958 <__assert_fail@plt+0x48cc>
   16938:	mov	r0, r4
   1693c:	bl	23464 <__assert_fail@plt+0x113d8>
   16940:	cmp	r0, #0
   16944:	beq	16958 <__assert_fail@plt+0x48cc>
   16948:	mov	r1, #0
   1694c:	bl	23bf8 <__assert_fail@plt+0x11b6c>
   16950:	bic	r0, r0, r0, asr #31
   16954:	b	1698c <__assert_fail@plt+0x4900>
   16958:	sub	sp, sp, #16
   1695c:	mov	r0, #0
   16960:	mov	r1, #0
   16964:	mov	r2, #1
   16968:	mvn	r3, #0
   1696c:	str	r4, [sp, #8]
   16970:	str	r0, [sp, #12]
   16974:	movw	r0, #56189	; 0xdb7d
   16978:	movt	r0, #2
   1697c:	str	r0, [sp]
   16980:	mov	r0, #0
   16984:	bl	12068 <__snprintf_chk@plt>
   16988:	add	sp, sp, #16
   1698c:	ldr	r1, [r5, #32]
   16990:	cmp	r1, r0
   16994:	strlt	r0, [r5, #32]
   16998:	ldrb	r0, [r9, #19]
   1699c:	cmp	r0, #1
   169a0:	bne	166f8 <__assert_fail@plt+0x466c>
   169a4:	ldr	r1, [fp, #-716]	; 0xfffffd34
   169a8:	mov	r0, #152	; 0x98
   169ac:	mla	r0, r8, r0, r1
   169b0:	ldr	r4, [r0, #40]	; 0x28
   169b4:	ldrb	r0, [r9, #16]
   169b8:	cmp	r0, #0
   169bc:	bne	169e0 <__assert_fail@plt+0x4954>
   169c0:	mov	r0, r4
   169c4:	bl	232c8 <__assert_fail@plt+0x1123c>
   169c8:	cmp	r0, #0
   169cc:	beq	169e0 <__assert_fail@plt+0x4954>
   169d0:	mov	r1, #0
   169d4:	bl	23bf8 <__assert_fail@plt+0x11b6c>
   169d8:	bic	r0, r0, r0, asr #31
   169dc:	b	16a14 <__assert_fail@plt+0x4988>
   169e0:	sub	sp, sp, #16
   169e4:	mov	r0, #0
   169e8:	mov	r1, #0
   169ec:	mov	r2, #1
   169f0:	mvn	r3, #0
   169f4:	str	r4, [sp, #8]
   169f8:	str	r0, [sp, #12]
   169fc:	movw	r0, #56189	; 0xdb7d
   16a00:	movt	r0, #2
   16a04:	str	r0, [sp]
   16a08:	mov	r0, #0
   16a0c:	bl	12068 <__snprintf_chk@plt>
   16a10:	add	sp, sp, #16
   16a14:	ldr	r1, [r5, #36]	; 0x24
   16a18:	cmp	r1, r0
   16a1c:	strlt	r0, [r5, #36]	; 0x24
   16a20:	ldrb	r0, [r9, #7]
   16a24:	cmp	r0, #1
   16a28:	beq	16704 <__assert_fail@plt+0x4678>
   16a2c:	b	1672c <__assert_fail@plt+0x46a0>
   16a30:	cmp	r0, #38	; 0x26
   16a34:	beq	161c4 <__assert_fail@plt+0x4138>
   16a38:	b	161d4 <__assert_fail@plt+0x4148>
   16a3c:	cmp	r1, #38	; 0x26
   16a40:	beq	160e4 <__assert_fail@plt+0x4058>
   16a44:	b	160f4 <__assert_fail@plt+0x4068>
   16a48:	movw	r1, #54328	; 0xd438
   16a4c:	mov	r2, #2
   16a50:	movt	r1, #2
   16a54:	bl	1202c <strncmp@plt>
   16a58:	cmp	r0, #0
   16a5c:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16a60:	ldrb	r0, [r9, #10]
   16a64:	ldrb	r1, [r9, #15]
   16a68:	cmp	r0, #0
   16a6c:	cmpeq	r1, #0
   16a70:	beq	16ab4 <__assert_fail@plt+0x4a28>
   16a74:	ldr	r2, [fp, #-732]	; 0xfffffd24
   16a78:	cmp	r2, #6
   16a7c:	ldrne	r2, [fp, #-732]	; 0xfffffd24
   16a80:	cmpne	r2, #0
   16a84:	bne	16ab4 <__assert_fail@plt+0x4a28>
   16a88:	ldr	r2, [r9, #44]	; 0x2c
   16a8c:	cmp	r2, #4
   16a90:	beq	15c30 <__assert_fail@plt+0x3ba4>
   16a94:	ldrb	r2, [r9, #4]
   16a98:	cmp	r2, #0
   16a9c:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16aa0:	ldrb	r2, [r9, #3]
   16aa4:	orr	r1, r1, r2
   16aa8:	tst	r1, #1
   16aac:	beq	16abc <__assert_fail@plt+0x4a30>
   16ab0:	b	15c30 <__assert_fail@plt+0x3ba4>
   16ab4:	cmp	r1, #0
   16ab8:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16abc:	cmp	r0, #0
   16ac0:	beq	16c40 <__assert_fail@plt+0x4bb4>
   16ac4:	ldr	r0, [fp, #-732]	; 0xfffffd24
   16ac8:	cmp	r0, #0
   16acc:	beq	15c30 <__assert_fail@plt+0x3ba4>
   16ad0:	ldr	r0, [fp, #-720]	; 0xfffffd30
   16ad4:	cmp	r0, #0
   16ad8:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16adc:	ldr	r0, [fp, #-732]	; 0xfffffd24
   16ae0:	mov	r6, #0
   16ae4:	mov	r7, #0
   16ae8:	cmp	r0, #5
   16aec:	bne	16c48 <__assert_fail@plt+0x4bbc>
   16af0:	ldr	r0, [r9, #48]	; 0x30
   16af4:	cmp	r0, #3
   16af8:	beq	15c30 <__assert_fail@plt+0x3ba4>
   16afc:	cmp	r4, #0
   16b00:	beq	16c40 <__assert_fail@plt+0x4bb4>
   16b04:	movw	r4, #456	; 0x1c8
   16b08:	movt	r4, #4
   16b0c:	ldr	r1, [r4, #112]	; 0x70
   16b10:	cmp	r1, #0
   16b14:	beq	16b60 <__assert_fail@plt+0x4ad4>
   16b18:	ldr	r0, [r4, #116]	; 0x74
   16b1c:	cmp	r1, #2
   16b20:	beq	16b48 <__assert_fail@plt+0x4abc>
   16b24:	cmp	r1, #1
   16b28:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16b2c:	ldrb	r0, [r0]
   16b30:	cmp	r0, #48	; 0x30
   16b34:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16b38:	b	16b60 <__assert_fail@plt+0x4ad4>
   16b3c:	cmp	r1, #38	; 0x26
   16b40:	beq	16608 <__assert_fail@plt+0x457c>
   16b44:	b	16618 <__assert_fail@plt+0x458c>
   16b48:	movw	r1, #54328	; 0xd438
   16b4c:	mov	r2, #2
   16b50:	movt	r1, #2
   16b54:	bl	1202c <strncmp@plt>
   16b58:	cmp	r0, #0
   16b5c:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16b60:	ldr	r1, [r4, #128]	; 0x80
   16b64:	cmp	r1, #0
   16b68:	beq	16ba8 <__assert_fail@plt+0x4b1c>
   16b6c:	ldr	r0, [r4, #132]	; 0x84
   16b70:	cmp	r1, #2
   16b74:	beq	16b90 <__assert_fail@plt+0x4b04>
   16b78:	cmp	r1, #1
   16b7c:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16b80:	ldrb	r0, [r0]
   16b84:	cmp	r0, #48	; 0x30
   16b88:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16b8c:	b	16ba8 <__assert_fail@plt+0x4b1c>
   16b90:	movw	r1, #54328	; 0xd438
   16b94:	mov	r2, #2
   16b98:	movt	r1, #2
   16b9c:	bl	1202c <strncmp@plt>
   16ba0:	cmp	r0, #0
   16ba4:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16ba8:	ldr	r1, [r4, #136]	; 0x88
   16bac:	cmp	r1, #0
   16bb0:	beq	16bf0 <__assert_fail@plt+0x4b64>
   16bb4:	ldr	r0, [r4, #140]	; 0x8c
   16bb8:	cmp	r1, #2
   16bbc:	beq	16bd8 <__assert_fail@plt+0x4b4c>
   16bc0:	cmp	r1, #1
   16bc4:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16bc8:	ldrb	r0, [r0]
   16bcc:	cmp	r0, #48	; 0x30
   16bd0:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16bd4:	b	16bf0 <__assert_fail@plt+0x4b64>
   16bd8:	movw	r1, #54328	; 0xd438
   16bdc:	mov	r2, #2
   16be0:	movt	r1, #2
   16be4:	bl	1202c <strncmp@plt>
   16be8:	cmp	r0, #0
   16bec:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16bf0:	ldr	r1, [r4, #168]	; 0xa8
   16bf4:	cmp	r1, #0
   16bf8:	beq	16c40 <__assert_fail@plt+0x4bb4>
   16bfc:	ldr	r0, [r4, #172]	; 0xac
   16c00:	cmp	r1, #2
   16c04:	beq	16c28 <__assert_fail@plt+0x4b9c>
   16c08:	cmp	r1, #1
   16c0c:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16c10:	ldrb	r0, [r0]
   16c14:	mov	r6, #0
   16c18:	mov	r7, #0
   16c1c:	cmp	r0, #48	; 0x30
   16c20:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16c24:	b	16c48 <__assert_fail@plt+0x4bbc>
   16c28:	movw	r1, #54328	; 0xd438
   16c2c:	mov	r2, #2
   16c30:	movt	r1, #2
   16c34:	bl	1202c <strncmp@plt>
   16c38:	cmp	r0, #0
   16c3c:	bne	15c30 <__assert_fail@plt+0x3ba4>
   16c40:	mov	r6, #0
   16c44:	mov	r7, #0
   16c48:	ldrb	r0, [r9, #15]
   16c4c:	cmp	r0, #1
   16c50:	bne	16c80 <__assert_fail@plt+0x4bf4>
   16c54:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   16c58:	sub	r2, fp, #688	; 0x2b0
   16c5c:	add	r0, r0, #112	; 0x70
   16c60:	ldrd	r0, [r0]
   16c64:	bl	236c0 <__assert_fail@plt+0x11634>
   16c68:	bl	11eac <strlen@plt>
   16c6c:	movw	r1, #4816	; 0x12d0
   16c70:	movt	r1, #4
   16c74:	ldr	r2, [r1, #16]
   16c78:	cmp	r2, r0
   16c7c:	strlt	r0, [r1, #16]
   16c80:	mov	r0, sl
   16c84:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   16c88:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   16c8c:	str	r0, [r1]
   16c90:	ldr	r0, [r9, #76]	; 0x4c
   16c94:	add	r0, r0, #1
   16c98:	str	r0, [r9, #76]	; 0x4c
   16c9c:	mov	r0, r6
   16ca0:	mov	r1, r7
   16ca4:	sub	sp, fp, #28
   16ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cac:	nop	{0}
   16cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cb4:	add	fp, sp, #28
   16cb8:	sub	sp, sp, #28
   16cbc:	sub	sp, sp, #8192	; 0x2000
   16cc0:	movw	r4, #4688	; 0x1250
   16cc4:	movw	sl, #4816	; 0x12d0
   16cc8:	movt	r4, #4
   16ccc:	movt	sl, #4
   16cd0:	ldr	r0, [r4, #76]	; 0x4c
   16cd4:	ldr	r1, [sl, #56]	; 0x38
   16cd8:	add	r2, r0, r0, lsr #1
   16cdc:	cmp	r1, r2
   16ce0:	bcs	16d18 <__assert_fail@plt+0x4c8c>
   16ce4:	ldr	r0, [sl, #12]
   16ce8:	bl	21218 <__assert_fail@plt+0xf18c>
   16cec:	movw	r0, #4688	; 0x1250
   16cf0:	mov	r1, #12
   16cf4:	movt	r0, #4
   16cf8:	ldr	r0, [r0, #76]	; 0x4c
   16cfc:	bl	297c8 <_obstack_memory_used@@Base+0x3444>
   16d00:	movw	r4, #4688	; 0x1250
   16d04:	str	r0, [sl, #12]
   16d08:	movt	r4, #4
   16d0c:	ldr	r0, [r4, #76]	; 0x4c
   16d10:	add	r1, r0, r0, lsl #1
   16d14:	str	r1, [sl, #56]	; 0x38
   16d18:	cmp	r0, #0
   16d1c:	beq	16d94 <__assert_fail@plt+0x4d08>
   16d20:	ldr	r6, [sl, #12]
   16d24:	ldr	r2, [r4, #72]	; 0x48
   16d28:	mov	r7, #0
   16d2c:	cmp	r0, #4
   16d30:	bcc	16d74 <__assert_fail@plt+0x4ce8>
   16d34:	add	r1, pc, #596	; 0x254
   16d38:	bic	r7, r0, #3
   16d3c:	vmov.i32	q9, #152	; 0x00000098
   16d40:	vdup.32	q10, r2
   16d44:	vmov.i32	q11, #4	; 0x00000004
   16d48:	vld1.64	{d16-d17}, [r1 :128]
   16d4c:	mov	r3, r7
   16d50:	mov	r1, r6
   16d54:	vorr	q12, q10, q10
   16d58:	subs	r3, r3, #4
   16d5c:	vmla.i32	q12, q8, q9
   16d60:	vadd.i32	q8, q8, q11
   16d64:	vst1.32	{d24-d25}, [r1]!
   16d68:	bne	16d54 <__assert_fail@plt+0x4cc8>
   16d6c:	cmp	r0, r7
   16d70:	beq	16d94 <__assert_fail@plt+0x4d08>
   16d74:	mov	r1, #152	; 0x98
   16d78:	sub	r3, r0, r7
   16d7c:	mla	r2, r7, r1, r2
   16d80:	add	r1, r6, r7, lsl #2
   16d84:	str	r2, [r1], #4
   16d88:	add	r2, r2, #152	; 0x98
   16d8c:	subs	r3, r3, #1
   16d90:	bne	16d84 <__assert_fail@plt+0x4cf8>
   16d94:	ldr	r1, [r4, #60]	; 0x3c
   16d98:	cmp	r1, #2
   16d9c:	bne	16dac <__assert_fail@plt+0x4d20>
   16da0:	cmp	r0, #0
   16da4:	bne	16dcc <__assert_fail@plt+0x4d40>
   16da8:	b	16e74 <__assert_fail@plt+0x4de8>
   16dac:	ldr	r2, [r4, #112]	; 0x70
   16db0:	cmp	r2, #0
   16db4:	cmpne	r0, #0
   16db8:	beq	16e6c <__assert_fail@plt+0x4de0>
   16dbc:	ldr	r2, [r4, #40]	; 0x28
   16dc0:	orr	r2, r2, #1
   16dc4:	cmp	r2, #3
   16dc8:	bne	16e6c <__assert_fail@plt+0x4de0>
   16dcc:	mov	r6, #0
   16dd0:	add	r7, sp, #24
   16dd4:	add	r8, sp, #20
   16dd8:	ldr	r1, [sl, #12]
   16ddc:	ldr	r9, [r1, r6, lsl #2]
   16de0:	ldr	r1, [r9, #148]	; 0x94
   16de4:	cmp	r1, #0
   16de8:	beq	16e00 <__assert_fail@plt+0x4d74>
   16dec:	add	r6, r6, #1
   16df0:	str	r1, [r9, #148]	; 0x94
   16df4:	cmp	r6, r0
   16df8:	bcc	16dd8 <__assert_fail@plt+0x4d4c>
   16dfc:	b	16e68 <__assert_fail@plt+0x4ddc>
   16e00:	ldr	r5, [r9]
   16e04:	ldr	r3, [r9, #144]	; 0x90
   16e08:	ldr	r2, [r4, #88]	; 0x58
   16e0c:	add	r0, sp, #16
   16e10:	str	r7, [sp, #20]
   16e14:	str	r0, [sp]
   16e18:	add	r0, sp, #15
   16e1c:	str	r0, [sp, #4]
   16e20:	mov	r0, r8
   16e24:	mov	r1, r5
   16e28:	bl	1b484 <__assert_fail@plt+0x93f8>
   16e2c:	ldr	r0, [sp, #20]
   16e30:	cmp	r0, r7
   16e34:	cmpne	r0, r5
   16e38:	beq	16e40 <__assert_fail@plt+0x4db4>
   16e3c:	bl	21218 <__assert_fail@plt+0xf18c>
   16e40:	ldrb	r0, [sp, #15]
   16e44:	ldr	r1, [sp, #16]
   16e48:	movw	r4, #4688	; 0x1250
   16e4c:	movt	r4, #4
   16e50:	add	r1, r1, r0
   16e54:	ldr	r0, [r4, #76]	; 0x4c
   16e58:	add	r6, r6, #1
   16e5c:	str	r1, [r9, #148]	; 0x94
   16e60:	cmp	r6, r0
   16e64:	bcc	16dd8 <__assert_fail@plt+0x4d4c>
   16e68:	ldr	r1, [r4, #60]	; 0x3c
   16e6c:	cmp	r1, #6
   16e70:	beq	16f68 <__assert_fail@plt+0x4edc>
   16e74:	movw	r0, #4296	; 0x10c8
   16e78:	movt	r0, #4
   16e7c:	bl	11c18 <_setjmp@plt>
   16e80:	movw	r6, #4688	; 0x1250
   16e84:	cmp	r0, #0
   16e88:	movt	r6, #4
   16e8c:	beq	16f20 <__assert_fail@plt+0x4e94>
   16e90:	ldr	r0, [r6, #60]	; 0x3c
   16e94:	cmp	r0, #4
   16e98:	beq	16f70 <__assert_fail@plt+0x4ee4>
   16e9c:	ldr	r1, [r6, #76]	; 0x4c
   16ea0:	mov	r2, #1
   16ea4:	cmp	r1, #0
   16ea8:	beq	16f30 <__assert_fail@plt+0x4ea4>
   16eac:	ldr	r4, [sl, #12]
   16eb0:	ldr	lr, [r6, #72]	; 0x48
   16eb4:	mov	r7, #0
   16eb8:	cmp	r1, #4
   16ebc:	bcc	16f00 <__assert_fail@plt+0x4e74>
   16ec0:	add	r3, pc, #200	; 0xc8
   16ec4:	bic	r7, r1, #3
   16ec8:	vmov.i32	q9, #152	; 0x00000098
   16ecc:	vdup.32	q10, lr
   16ed0:	vmov.i32	q11, #4	; 0x00000004
   16ed4:	vld1.64	{d16-d17}, [r3 :128]
   16ed8:	mov	r5, r7
   16edc:	mov	r3, r4
   16ee0:	vorr	q12, q10, q10
   16ee4:	subs	r5, r5, #4
   16ee8:	vmla.i32	q12, q8, q9
   16eec:	vadd.i32	q8, q8, q11
   16ef0:	vst1.32	{d24-d25}, [r3]!
   16ef4:	bne	16ee0 <__assert_fail@plt+0x4e54>
   16ef8:	cmp	r1, r7
   16efc:	beq	16f34 <__assert_fail@plt+0x4ea8>
   16f00:	mov	r3, #152	; 0x98
   16f04:	mla	r3, r7, r3, lr
   16f08:	str	r3, [r4, r7, lsl #2]
   16f0c:	add	r7, r7, #1
   16f10:	add	r3, r3, #152	; 0x98
   16f14:	cmp	r1, r7
   16f18:	bne	16f08 <__assert_fail@plt+0x4e7c>
   16f1c:	b	16f34 <__assert_fail@plt+0x4ea8>
   16f20:	ldr	r0, [r6, #60]	; 0x3c
   16f24:	ldr	r1, [r6, #76]	; 0x4c
   16f28:	mov	r2, #0
   16f2c:	b	16f34 <__assert_fail@plt+0x4ea8>
   16f30:	mov	r1, #0
   16f34:	ldr	r3, [r6, #96]	; 0x60
   16f38:	cmp	r0, #5
   16f3c:	addeq	r0, r0, r3
   16f40:	movw	r3, #62240	; 0xf320
   16f44:	movt	r3, #2
   16f48:	add	r0, r3, r0, lsl #5
   16f4c:	ldrb	r3, [r6, #18]
   16f50:	add	r0, r0, r2, lsl #4
   16f54:	ldrb	r2, [r6, #2]
   16f58:	add	r0, r0, r3, lsl #3
   16f5c:	ldr	r2, [r0, r2, lsl #2]
   16f60:	ldr	r0, [sl, #12]
   16f64:	bl	242a4 <__assert_fail@plt+0x12218>
   16f68:	sub	sp, fp, #28
   16f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f70:	movw	r0, #56194	; 0xdb82
   16f74:	movw	r1, #46901	; 0xb735
   16f78:	movw	r3, #56220	; 0xdb9c
   16f7c:	movw	r2, #4102	; 0x1006
   16f80:	movt	r0, #2
   16f84:	movt	r1, #2
   16f88:	movt	r3, #2
   16f8c:	bl	1208c <__assert_fail@plt>
   16f90:	andeq	r0, r0, r0
   16f94:	andeq	r0, r0, r1
   16f98:	andeq	r0, r0, r2
   16f9c:	andeq	r0, r0, r3
   16fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fa4:	add	fp, sp, #28
   16fa8:	sub	sp, sp, #12
   16fac:	movw	r5, #4688	; 0x1250
   16fb0:	cmp	r0, #0
   16fb4:	str	r0, [sp, #4]
   16fb8:	str	r1, [sp, #8]
   16fbc:	movt	r5, #4
   16fc0:	ldrne	r0, [r5, #52]	; 0x34
   16fc4:	cmpne	r0, #0
   16fc8:	bne	17170 <__assert_fail@plt+0x50e4>
   16fcc:	ldr	r0, [r5, #76]	; 0x4c
   16fd0:	mov	r8, #0
   16fd4:	cmp	r0, #0
   16fd8:	beq	172d8 <__assert_fail@plt+0x524c>
   16fdc:	ldr	r1, [sp, #4]
   16fe0:	cmp	r1, #0
   16fe4:	beq	171b4 <__assert_fail@plt+0x5128>
   16fe8:	rsb	r9, r0, #1
   16fec:	movw	r0, #648	; 0x288
   16ff0:	movw	r4, #4816	; 0x12d0
   16ff4:	movt	r0, #4
   16ff8:	movt	r4, #4
   16ffc:	add	r0, r0, #1
   17000:	str	r0, [sp]
   17004:	ldr	r0, [r4, #12]
   17008:	ldr	sl, [r0, -r9, lsl #2]
   1700c:	ldr	r0, [sl, #120]	; 0x78
   17010:	cmp	r0, #9
   17014:	cmpne	r0, #3
   17018:	bne	17160 <__assert_fail@plt+0x50d4>
   1701c:	ldr	r6, [sl]
   17020:	mov	r0, r6
   17024:	bl	1fc34 <__assert_fail@plt+0xdba8>
   17028:	ldrb	r1, [r0]
   1702c:	cmp	r1, #46	; 0x2e
   17030:	bne	17054 <__assert_fail@plt+0x4fc8>
   17034:	ldrb	r1, [r0, #1]
   17038:	cmp	r1, #46	; 0x2e
   1703c:	mov	r1, #1
   17040:	movweq	r1, #2
   17044:	ldrb	r0, [r0, r1]
   17048:	cmp	r0, #0
   1704c:	cmpne	r0, #47	; 0x2f
   17050:	beq	17160 <__assert_fail@plt+0x50d4>
   17054:	ldrb	r0, [r6]
   17058:	cmp	r0, #47	; 0x2f
   1705c:	bne	17084 <__assert_fail@plt+0x4ff8>
   17060:	ldr	r4, [sl, #4]
   17064:	mov	r0, #16
   17068:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   1706c:	mov	r7, r0
   17070:	cmp	r4, #0
   17074:	beq	170f8 <__assert_fail@plt+0x506c>
   17078:	mov	r0, r4
   1707c:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   17080:	b	170fc <__assert_fail@plt+0x5070>
   17084:	ldr	r0, [sp, #4]
   17088:	mov	r1, r6
   1708c:	mov	r2, #0
   17090:	mov	r5, #0
   17094:	bl	20c6c <__assert_fail@plt+0xebe0>
   17098:	ldr	r4, [sl, #4]
   1709c:	mov	r6, r0
   170a0:	mov	r0, #16
   170a4:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   170a8:	mov	r7, r0
   170ac:	cmp	r4, #0
   170b0:	beq	170c0 <__assert_fail@plt+0x5034>
   170b4:	mov	r0, r4
   170b8:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   170bc:	mov	r5, r0
   170c0:	mov	r0, r6
   170c4:	str	r5, [r7, #4]
   170c8:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   170cc:	str	r0, [r7]
   170d0:	ldr	r0, [sp, #8]
   170d4:	movw	r5, #4688	; 0x1250
   170d8:	movt	r5, #4
   170dc:	strb	r0, [r7, #8]
   170e0:	ldr	r0, [r5, #32]
   170e4:	str	r7, [r5, #32]
   170e8:	str	r0, [r7, #12]
   170ec:	mov	r0, r6
   170f0:	bl	21218 <__assert_fail@plt+0xf18c>
   170f4:	b	17120 <__assert_fail@plt+0x5094>
   170f8:	mov	r0, #0
   170fc:	str	r0, [r7, #4]
   17100:	mov	r0, r6
   17104:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   17108:	str	r0, [r7]
   1710c:	ldr	r0, [sp, #8]
   17110:	strb	r0, [r7, #8]
   17114:	ldr	r0, [r5, #32]
   17118:	str	r7, [r5, #32]
   1711c:	str	r0, [r7, #12]
   17120:	ldr	r0, [sl, #120]	; 0x78
   17124:	movw	r4, #4816	; 0x12d0
   17128:	movt	r4, #4
   1712c:	cmp	r0, #9
   17130:	bne	17160 <__assert_fail@plt+0x50d4>
   17134:	ldr	r0, [sl]
   17138:	bl	21218 <__assert_fail@plt+0xf18c>
   1713c:	ldr	r0, [sl, #4]
   17140:	bl	21218 <__assert_fail@plt+0xf18c>
   17144:	ldr	r0, [sl, #8]
   17148:	bl	21218 <__assert_fail@plt+0xf18c>
   1714c:	ldr	r0, [sl, #128]	; 0x80
   17150:	ldr	r1, [sp]
   17154:	cmp	r0, r1
   17158:	beq	17160 <__assert_fail@plt+0x50d4>
   1715c:	bl	11ff0 <freecon@plt>
   17160:	add	r9, r9, #1
   17164:	cmp	r9, #1
   17168:	bne	17004 <__assert_fail@plt+0x4f78>
   1716c:	b	17298 <__assert_fail@plt+0x520c>
   17170:	mov	r0, #16
   17174:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   17178:	mov	r4, r0
   1717c:	ldr	r0, [sp, #4]
   17180:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   17184:	mov	r1, #0
   17188:	str	r1, [r4]
   1718c:	str	r0, [r4, #4]
   17190:	ldr	r0, [r5, #32]
   17194:	strb	r1, [r4, #8]
   17198:	str	r4, [r5, #32]
   1719c:	str	r0, [r4, #12]
   171a0:	ldr	r0, [r5, #76]	; 0x4c
   171a4:	mov	r8, #0
   171a8:	cmp	r0, #0
   171ac:	bne	16fdc <__assert_fail@plt+0x4f50>
   171b0:	b	172d8 <__assert_fail@plt+0x524c>
   171b4:	rsb	r4, r0, #1
   171b8:	movw	r0, #648	; 0x288
   171bc:	movt	r0, #4
   171c0:	add	r0, r0, #1
   171c4:	str	r0, [sp, #4]
   171c8:	movw	r0, #4816	; 0x12d0
   171cc:	movt	r0, #4
   171d0:	ldr	r0, [r0, #12]
   171d4:	ldr	r7, [r0, -r4, lsl #2]
   171d8:	ldr	r0, [r7, #120]	; 0x78
   171dc:	cmp	r0, #9
   171e0:	cmpne	r0, #3
   171e4:	bne	1728c <__assert_fail@plt+0x5200>
   171e8:	ldr	sl, [r7]
   171ec:	ldr	r9, [r7, #4]
   171f0:	mov	r0, #16
   171f4:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   171f8:	mov	r5, r0
   171fc:	mov	r6, #0
   17200:	cmp	r9, #0
   17204:	mov	r0, #0
   17208:	beq	17214 <__assert_fail@plt+0x5188>
   1720c:	mov	r0, r9
   17210:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   17214:	cmp	sl, #0
   17218:	str	r0, [r5, #4]
   1721c:	beq	1722c <__assert_fail@plt+0x51a0>
   17220:	mov	r0, sl
   17224:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   17228:	mov	r6, r0
   1722c:	ldr	r0, [sp, #8]
   17230:	strb	r0, [r5, #8]
   17234:	movw	r0, #4688	; 0x1250
   17238:	str	r6, [r5]
   1723c:	movt	r0, #4
   17240:	mov	r1, r0
   17244:	ldr	r0, [r0, #32]
   17248:	str	r5, [r1, #32]
   1724c:	str	r0, [r5, #12]
   17250:	mov	r5, r1
   17254:	ldr	r0, [r7, #120]	; 0x78
   17258:	cmp	r0, #9
   1725c:	bne	1728c <__assert_fail@plt+0x5200>
   17260:	ldr	r0, [r7]
   17264:	bl	21218 <__assert_fail@plt+0xf18c>
   17268:	ldr	r0, [r7, #4]
   1726c:	bl	21218 <__assert_fail@plt+0xf18c>
   17270:	ldr	r0, [r7, #8]
   17274:	bl	21218 <__assert_fail@plt+0xf18c>
   17278:	ldr	r0, [r7, #128]	; 0x80
   1727c:	ldr	r1, [sp, #4]
   17280:	cmp	r0, r1
   17284:	beq	1728c <__assert_fail@plt+0x5200>
   17288:	bl	11ff0 <freecon@plt>
   1728c:	add	r4, r4, #1
   17290:	cmp	r4, #1
   17294:	bne	171c8 <__assert_fail@plt+0x513c>
   17298:	ldr	r0, [r5, #76]	; 0x4c
   1729c:	cmp	r0, #0
   172a0:	beq	172d8 <__assert_fail@plt+0x524c>
   172a4:	movw	r1, #4816	; 0x12d0
   172a8:	mov	r2, #0
   172ac:	mov	r8, #0
   172b0:	movt	r1, #4
   172b4:	ldr	r1, [r1, #12]
   172b8:	ldr	r3, [r1, r2, lsl #2]
   172bc:	add	r2, r2, #1
   172c0:	str	r3, [r1, r8, lsl #2]
   172c4:	ldr	r3, [r3, #120]	; 0x78
   172c8:	cmp	r3, #9
   172cc:	addne	r8, r8, #1
   172d0:	cmp	r2, r0
   172d4:	bcc	172b8 <__assert_fail@plt+0x522c>
   172d8:	str	r8, [r5, #76]	; 0x4c
   172dc:	sub	sp, fp, #28
   172e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172e8:	add	fp, sp, #28
   172ec:	sub	sp, sp, #700	; 0x2bc
   172f0:	sub	sp, sp, #4096	; 0x1000
   172f4:	movw	r0, #4688	; 0x1250
   172f8:	movt	r0, #4
   172fc:	ldr	r0, [r0, #40]	; 0x28
   17300:	cmp	r0, #4
   17304:	bhi	1842c <__assert_fail@plt+0x63a0>
   17308:	add	r1, pc, #0
   1730c:	ldr	pc, [r1, r0, lsl #2]
   17310:	andeq	r7, r1, r4, lsr #6
   17314:	andeq	r8, r1, ip, lsr #1
   17318:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1731c:	andeq	r8, r1, r8, lsr r1
   17320:	muleq	r1, ip, r0
   17324:	movw	r6, #4688	; 0x1250
   17328:	movt	r6, #4
   1732c:	ldr	r0, [r6, #76]	; 0x4c
   17330:	cmp	r0, #0
   17334:	beq	1842c <__assert_fail@plt+0x63a0>
   17338:	sub	lr, fp, #1024	; 0x400
   1733c:	movw	r7, #4816	; 0x12d0
   17340:	movw	sl, #456	; 0x1c8
   17344:	mov	r9, #0
   17348:	mov	r4, #0
   1734c:	sub	r0, lr, #69	; 0x45
   17350:	movt	r7, #4
   17354:	movt	sl, #4
   17358:	add	r0, r0, #1
   1735c:	str	r0, [sp, #16]
   17360:	movw	r0, #4936	; 0x1348
   17364:	movt	r0, #4
   17368:	add	r0, r0, #44	; 0x2c
   1736c:	str	r0, [sp, #24]
   17370:	b	17560 <__assert_fail@plt+0x54d4>
   17374:	mov	r1, #47	; 0x2f
   17378:	cmp	r0, #3
   1737c:	beq	17fe8 <__assert_fail@plt+0x5f5c>
   17380:	cmp	r0, #5
   17384:	beq	18034 <__assert_fail@plt+0x5fa8>
   17388:	cmp	r0, #9
   1738c:	beq	17fe8 <__assert_fail@plt+0x5f5c>
   17390:	cmp	r3, #1
   17394:	beq	18034 <__assert_fail@plt+0x5fa8>
   17398:	cmp	r7, #0
   1739c:	beq	17528 <__assert_fail@plt+0x549c>
   173a0:	and	r0, r2, #61440	; 0xf000
   173a4:	cmp	r0, #4096	; 0x1000
   173a8:	beq	17540 <__assert_fail@plt+0x54b4>
   173ac:	cmp	r0, #40960	; 0xa000
   173b0:	beq	17548 <__assert_fail@plt+0x54bc>
   173b4:	cmp	r0, #49152	; 0xc000
   173b8:	beq	17538 <__assert_fail@plt+0x54ac>
   173bc:	b	18034 <__assert_fail@plt+0x5fa8>
   173c0:	movw	r1, #54328	; 0xd438
   173c4:	mov	r2, #2
   173c8:	movt	r1, #2
   173cc:	bl	1202c <strncmp@plt>
   173d0:	cmp	r0, #0
   173d4:	bne	17628 <__assert_fail@plt+0x559c>
   173d8:	b	17574 <__assert_fail@plt+0x54e8>
   173dc:	ldrb	r0, [r6, #7]
   173e0:	cmp	r0, #1
   173e4:	beq	17900 <__assert_fail@plt+0x5874>
   173e8:	b	17a7c <__assert_fail@plt+0x59f0>
   173ec:	cmp	r1, #1
   173f0:	beq	18034 <__assert_fail@plt+0x5fa8>
   173f4:	cmp	r0, #49152	; 0xc000
   173f8:	beq	17538 <__assert_fail@plt+0x54ac>
   173fc:	cmp	r0, #40960	; 0xa000
   17400:	beq	17548 <__assert_fail@plt+0x54bc>
   17404:	cmp	r0, #4096	; 0x1000
   17408:	bne	18034 <__assert_fail@plt+0x5fa8>
   1740c:	b	17540 <__assert_fail@plt+0x54b4>
   17410:	mov	r0, sl
   17414:	bl	18b9c <__assert_fail@plt+0x6b10>
   17418:	add	r0, sl, #24
   1741c:	bl	18b9c <__assert_fail@plt+0x6b10>
   17420:	add	r0, sl, #8
   17424:	bl	18b9c <__assert_fail@plt+0x6b10>
   17428:	movw	r0, #780	; 0x30c
   1742c:	ldr	r1, [sl]
   17430:	mov	r2, #1
   17434:	movt	r0, #4
   17438:	ldr	r3, [r0]
   1743c:	ldr	r0, [sl, #4]
   17440:	bl	11c90 <fwrite_unlocked@plt>
   17444:	ldrb	r0, [r6, #13]
   17448:	cmp	r0, #0
   1744c:	bne	17498 <__assert_fail@plt+0x540c>
   17450:	mov	r0, #1
   17454:	strb	r0, [r6, #13]
   17458:	mov	r0, #1
   1745c:	bl	11ea0 <tcgetpgrp@plt>
   17460:	cmp	r0, #0
   17464:	movge	r0, #1
   17468:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1746c:	ldr	r0, [sl, #20]
   17470:	cmp	r0, #0
   17474:	beq	17480 <__assert_fail@plt+0x53f4>
   17478:	add	r0, sl, #16
   1747c:	b	17494 <__assert_fail@plt+0x5408>
   17480:	mov	r0, sl
   17484:	bl	18b9c <__assert_fail@plt+0x6b10>
   17488:	add	r0, sl, #24
   1748c:	bl	18b9c <__assert_fail@plt+0x6b10>
   17490:	add	r0, sl, #8
   17494:	bl	18b9c <__assert_fail@plt+0x6b10>
   17498:	movw	r0, #780	; 0x30c
   1749c:	ldr	r1, [sl, #32]
   174a0:	mov	r2, #1
   174a4:	movt	r0, #4
   174a8:	ldr	r3, [r0]
   174ac:	ldr	r0, [sl, #36]	; 0x24
   174b0:	bl	11c90 <fwrite_unlocked@plt>
   174b4:	ldrb	r0, [r6, #13]
   174b8:	cmp	r0, #0
   174bc:	bne	17508 <__assert_fail@plt+0x547c>
   174c0:	mov	r0, #1
   174c4:	strb	r0, [r6, #13]
   174c8:	mov	r0, #1
   174cc:	bl	11ea0 <tcgetpgrp@plt>
   174d0:	cmp	r0, #0
   174d4:	movge	r0, #1
   174d8:	blge	18c40 <__assert_fail@plt+0x6bb4>
   174dc:	ldr	r0, [sl, #20]
   174e0:	cmp	r0, #0
   174e4:	beq	174f0 <__assert_fail@plt+0x5464>
   174e8:	add	r0, sl, #16
   174ec:	b	17504 <__assert_fail@plt+0x5478>
   174f0:	mov	r0, sl
   174f4:	bl	18b9c <__assert_fail@plt+0x6b10>
   174f8:	add	r0, sl, #24
   174fc:	bl	18b9c <__assert_fail@plt+0x6b10>
   17500:	add	r0, sl, #8
   17504:	bl	18b9c <__assert_fail@plt+0x6b10>
   17508:	movw	r0, #780	; 0x30c
   1750c:	ldr	r1, [sl, #8]
   17510:	mov	r2, #1
   17514:	movt	r0, #4
   17518:	ldr	r3, [r0]
   1751c:	ldr	r0, [sl, #12]
   17520:	bl	11c90 <fwrite_unlocked@plt>
   17524:	b	17574 <__assert_fail@plt+0x54e8>
   17528:	cmp	r0, #1
   1752c:	beq	17540 <__assert_fail@plt+0x54b4>
   17530:	cmp	r0, #7
   17534:	bne	18034 <__assert_fail@plt+0x5fa8>
   17538:	mov	r1, #61	; 0x3d
   1753c:	b	17fe8 <__assert_fail@plt+0x5f5c>
   17540:	mov	r1, #124	; 0x7c
   17544:	b	17fe8 <__assert_fail@plt+0x5f5c>
   17548:	mov	r1, #64	; 0x40
   1754c:	b	17fe8 <__assert_fail@plt+0x5f5c>
   17550:	bl	11f54 <__overflow@plt>
   17554:	b	18084 <__assert_fail@plt+0x5ff8>
   17558:	bl	11f54 <__overflow@plt>
   1755c:	b	18034 <__assert_fail@plt+0x5fa8>
   17560:	ldrb	r0, [r6, #1]
   17564:	cmp	r0, #0
   17568:	ldrne	r1, [sl, #32]
   1756c:	cmpne	r1, #0
   17570:	bne	17608 <__assert_fail@plt+0x557c>
   17574:	ldr	r0, [r7, #12]
   17578:	ldr	r8, [r0, r4, lsl #2]
   1757c:	ldrb	r0, [r8, #132]	; 0x84
   17580:	cmp	r0, #0
   17584:	beq	175c0 <__assert_fail@plt+0x5534>
   17588:	sub	lr, fp, #1024	; 0x400
   1758c:	add	r0, r8, #16
   17590:	sub	r1, lr, #69	; 0x45
   17594:	bl	20c64 <__assert_fail@plt+0xebd8>
   17598:	ldrb	r0, [r6, #26]
   1759c:	cmp	r0, #0
   175a0:	beq	17600 <__assert_fail@plt+0x5574>
   175a4:	ldr	r0, [r8, #136]	; 0x88
   175a8:	cmp	r0, #1
   175ac:	beq	17664 <__assert_fail@plt+0x55d8>
   175b0:	cmp	r0, #2
   175b4:	bne	1766c <__assert_fail@plt+0x55e0>
   175b8:	mov	r0, #43	; 0x2b
   175bc:	b	17668 <__assert_fail@plt+0x55dc>
   175c0:	ldr	r0, [r8, #120]	; 0x78
   175c4:	movw	r1, #56242	; 0xdbb2
   175c8:	movt	r1, #2
   175cc:	ldrb	r0, [r1, r0]
   175d0:	movw	r1, #16191	; 0x3f3f
   175d4:	strb	r0, [fp, #-1093]	; 0xfffffbbb
   175d8:	ldr	r0, [sp, #16]
   175dc:	strh	r1, [r0, #8]
   175e0:	movw	r1, #16191	; 0x3f3f
   175e4:	movt	r1, #16191	; 0x3f3f
   175e8:	str	r1, [r0, #4]
   175ec:	str	r1, [r0]
   175f0:	strb	r9, [fp, #-1082]	; 0xfffffbc6
   175f4:	ldrb	r0, [r6, #26]
   175f8:	cmp	r0, #0
   175fc:	bne	175a4 <__assert_fail@plt+0x5518>
   17600:	mov	r0, #0
   17604:	b	17668 <__assert_fail@plt+0x55dc>
   17608:	ldr	r0, [sl, #36]	; 0x24
   1760c:	cmp	r1, #2
   17610:	beq	173c0 <__assert_fail@plt+0x5334>
   17614:	cmp	r1, #1
   17618:	bne	17628 <__assert_fail@plt+0x559c>
   1761c:	ldrb	r0, [r0]
   17620:	cmp	r0, #48	; 0x30
   17624:	beq	17574 <__assert_fail@plt+0x54e8>
   17628:	ldrb	r0, [r6, #13]
   1762c:	cmp	r0, #0
   17630:	bne	17428 <__assert_fail@plt+0x539c>
   17634:	mov	r0, #1
   17638:	strb	r0, [r6, #13]
   1763c:	mov	r0, #1
   17640:	bl	11ea0 <tcgetpgrp@plt>
   17644:	cmp	r0, #0
   17648:	movge	r0, #1
   1764c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   17650:	ldr	r0, [sl, #20]
   17654:	cmp	r0, #0
   17658:	beq	17410 <__assert_fail@plt+0x5384>
   1765c:	add	r0, sl, #16
   17660:	b	17424 <__assert_fail@plt+0x5398>
   17664:	mov	r0, #46	; 0x2e
   17668:	strb	r0, [fp, #-1083]	; 0xfffffbc5
   1766c:	ldr	r0, [r6, #96]	; 0x60
   17670:	cmp	r0, #3
   17674:	bhi	18618 <__assert_fail@plt+0x658c>
   17678:	add	r1, pc, #4
   1767c:	str	r4, [sp, #28]
   17680:	ldr	pc, [r1, r0, lsl #2]
   17684:	muleq	r1, r4, r6
   17688:	ldrdeq	r7, [r1], -r8
   1768c:	muleq	r1, ip, r6
   17690:	andeq	r7, r1, r4, lsr #13
   17694:	ldrd	r0, [r8, #96]	; 0x60
   17698:	b	176dc <__assert_fail@plt+0x5650>
   1769c:	ldrd	r0, [r8, #88]	; 0x58
   176a0:	b	176dc <__assert_fail@plt+0x5650>
   176a4:	ldrd	r0, [r8, #96]	; 0x60
   176a8:	str	r0, [sp, #80]	; 0x50
   176ac:	and	r0, r1, r0
   176b0:	str	r1, [sp, #84]	; 0x54
   176b4:	add	r1, r0, #1
   176b8:	cmn	r0, #1
   176bc:	movwne	r1, #1
   176c0:	str	r1, [sp, #32]
   176c4:	ldrb	r0, [r6, #15]
   176c8:	add	r5, sp, #88	; 0x58
   176cc:	cmp	r0, #1
   176d0:	beq	176fc <__assert_fail@plt+0x5670>
   176d4:	b	17764 <__assert_fail@plt+0x56d8>
   176d8:	ldrd	r0, [r8, #104]	; 0x68
   176dc:	str	r0, [sp, #80]	; 0x50
   176e0:	mov	r0, #1
   176e4:	str	r1, [sp, #84]	; 0x54
   176e8:	str	r0, [sp, #32]
   176ec:	ldrb	r0, [r6, #15]
   176f0:	add	r5, sp, #88	; 0x58
   176f4:	cmp	r0, #1
   176f8:	bne	17764 <__assert_fail@plt+0x56d8>
   176fc:	ldrb	r0, [r8, #132]	; 0x84
   17700:	ldr	r4, [r7, #16]
   17704:	cmp	r0, #0
   17708:	movw	r0, #55770	; 0xd9da
   1770c:	movt	r0, #2
   17710:	beq	1773c <__assert_fail@plt+0x56b0>
   17714:	ldr	r2, [r8, #112]	; 0x70
   17718:	ldr	r1, [r8, #116]	; 0x74
   1771c:	orrs	r0, r2, r1
   17720:	movw	r0, #55770	; 0xd9da
   17724:	movt	r0, #2
   17728:	beq	1773c <__assert_fail@plt+0x56b0>
   1772c:	sub	lr, fp, #1024	; 0x400
   17730:	mov	r0, r2
   17734:	sub	r2, lr, #57	; 0x39
   17738:	bl	236c0 <__assert_fail@plt+0x11634>
   1773c:	movw	r3, #56266	; 0xdbca
   17740:	str	r4, [sp]
   17744:	add	r4, sp, #88	; 0x58
   17748:	str	r0, [sp, #4]
   1774c:	mov	r1, #1
   17750:	movw	r2, #3643	; 0xe3b
   17754:	mov	r0, r4
   17758:	movt	r3, #2
   1775c:	bl	11edc <__sprintf_chk@plt>
   17760:	add	r5, r4, r0
   17764:	ldrb	r0, [r6, #8]
   17768:	cmp	r0, #1
   1776c:	bne	17848 <__assert_fail@plt+0x57bc>
   17770:	ldrb	r0, [r8, #132]	; 0x84
   17774:	movw	r4, #55770	; 0xd9da
   17778:	movt	r4, #2
   1777c:	cmp	r0, #0
   17780:	beq	177c4 <__assert_fail@plt+0x5738>
   17784:	movw	r2, #4816	; 0x12d0
   17788:	ldrd	r0, [r8, #80]	; 0x50
   1778c:	ldr	r3, [r6, #100]	; 0x64
   17790:	mov	r4, #512	; 0x200
   17794:	sub	lr, fp, #1024	; 0x400
   17798:	movt	r2, #4
   1779c:	ldr	r7, [r2, #92]	; 0x5c
   177a0:	ldr	r2, [r2, #88]	; 0x58
   177a4:	stm	sp, {r4, r9}
   177a8:	str	r2, [sp, #8]
   177ac:	str	r7, [sp, #12]
   177b0:	movw	r7, #4816	; 0x12d0
   177b4:	sub	r2, lr, #57	; 0x39
   177b8:	movt	r7, #4
   177bc:	bl	22750 <__assert_fail@plt+0x106c4>
   177c0:	mov	r4, r0
   177c4:	ldr	r7, [r7, #20]
   177c8:	mov	r0, r4
   177cc:	mov	r1, #0
   177d0:	bl	23bf8 <__assert_fail@plt+0x11b6c>
   177d4:	cmp	r7, r0
   177d8:	ble	17824 <__assert_fail@plt+0x5798>
   177dc:	mov	r9, r0
   177e0:	mvn	r1, r7
   177e4:	add	r0, r7, #2
   177e8:	add	r6, r9, r1
   177ec:	mvn	r1, #1
   177f0:	sub	r0, r0, r9
   177f4:	cmn	r6, #2
   177f8:	movle	r6, r1
   177fc:	mov	r1, #32
   17800:	add	r2, r0, r6
   17804:	mov	r0, r5
   17808:	bl	11ef4 <memset@plt>
   1780c:	add	r0, r7, r6
   17810:	movw	r6, #4688	; 0x1250
   17814:	sub	r0, r0, r9
   17818:	movt	r6, #4
   1781c:	add	r0, r5, r0
   17820:	add	r5, r0, #2
   17824:	movw	r7, #4816	; 0x12d0
   17828:	mov	r9, #0
   1782c:	movt	r7, #4
   17830:	ldrb	r0, [r4], #1
   17834:	strb	r0, [r5], #1
   17838:	cmp	r0, #0
   1783c:	bne	17830 <__assert_fail@plt+0x57a4>
   17840:	mov	r0, #32
   17844:	strb	r0, [r5, #-1]
   17848:	ldrb	r0, [r8, #132]	; 0x84
   1784c:	ldr	r4, [r7, #24]
   17850:	cmp	r0, #0
   17854:	movw	r0, #55770	; 0xd9da
   17858:	movt	r0, #2
   1785c:	beq	17874 <__assert_fail@plt+0x57e8>
   17860:	ldr	r0, [r8, #36]	; 0x24
   17864:	sub	lr, fp, #1024	; 0x400
   17868:	mov	r1, #0
   1786c:	sub	r2, lr, #57	; 0x39
   17870:	bl	236c0 <__assert_fail@plt+0x11634>
   17874:	sub	lr, fp, #1024	; 0x400
   17878:	movw	r3, #56253	; 0xdbbd
   1787c:	mvn	r2, #0
   17880:	sub	r1, lr, #69	; 0x45
   17884:	movt	r3, #2
   17888:	stm	sp, {r1, r4}
   1788c:	str	r0, [sp, #8]
   17890:	mov	r0, r5
   17894:	mov	r1, #1
   17898:	bl	11edc <__sprintf_chk@plt>
   1789c:	mov	r4, r0
   178a0:	ldrb	r0, [r6, #11]
   178a4:	cmp	r0, #0
   178a8:	beq	178dc <__assert_fail@plt+0x5850>
   178ac:	ldrd	r0, [r7, #80]	; 0x50
   178b0:	mov	r2, #2
   178b4:	adds	r0, r0, #2
   178b8:	adc	r1, r1, #0
   178bc:	strd	r0, [r7, #80]	; 0x50
   178c0:	movw	r0, #780	; 0x30c
   178c4:	mov	r1, #1
   178c8:	movt	r0, #4
   178cc:	ldr	r3, [r0]
   178d0:	movw	r0, #56096	; 0xdb20
   178d4:	movt	r0, #2
   178d8:	bl	11c90 <fwrite_unlocked@plt>
   178dc:	ldrb	r0, [r6, #14]
   178e0:	add	r5, r5, r4
   178e4:	cmp	r0, #1
   178e8:	bne	17900 <__assert_fail@plt+0x5874>
   178ec:	ldrb	r0, [r6, #17]
   178f0:	cmp	r0, #1
   178f4:	ldrbeq	r0, [r6, #19]
   178f8:	cmpeq	r0, #0
   178fc:	beq	173dc <__assert_fail@plt+0x5350>
   17900:	ldr	r4, [r7, #80]	; 0x50
   17904:	ldr	r1, [r7, #84]	; 0x54
   17908:	add	r0, sp, #88	; 0x58
   1790c:	sub	r2, r5, r0
   17910:	adds	r4, r4, r2
   17914:	adc	r1, r1, #0
   17918:	str	r4, [r7, #80]	; 0x50
   1791c:	str	r1, [r7, #84]	; 0x54
   17920:	movw	r1, #780	; 0x30c
   17924:	movt	r1, #4
   17928:	ldr	r3, [r1]
   1792c:	mov	r1, #1
   17930:	bl	11c90 <fwrite_unlocked@plt>
   17934:	ldrb	r0, [r6, #14]
   17938:	cmp	r0, #0
   1793c:	beq	179b0 <__assert_fail@plt+0x5924>
   17940:	ldrb	r0, [r6, #17]
   17944:	cmp	r0, #0
   17948:	beq	17a00 <__assert_fail@plt+0x5974>
   1794c:	ldrb	r0, [r6, #19]
   17950:	cmp	r0, #1
   17954:	bne	17a50 <__assert_fail@plt+0x59c4>
   17958:	ldrb	r0, [r8, #132]	; 0x84
   1795c:	ldr	r5, [r7, #36]	; 0x24
   17960:	ldr	r4, [r8, #40]	; 0x28
   17964:	cmp	r0, #0
   17968:	movw	r0, #55770	; 0xd9da
   1796c:	movt	r0, #2
   17970:	beq	1798c <__assert_fail@plt+0x5900>
   17974:	ldrb	r1, [r6, #16]
   17978:	mov	r0, #0
   1797c:	cmp	r1, #0
   17980:	bne	1798c <__assert_fail@plt+0x5900>
   17984:	mov	r0, r4
   17988:	bl	232c8 <__assert_fail@plt+0x1123c>
   1798c:	mov	r2, r4
   17990:	mov	r3, #0
   17994:	str	r5, [sp]
   17998:	bl	1f44c <__assert_fail@plt+0xd3c0>
   1799c:	ldrb	r0, [r6, #7]
   179a0:	add	r5, sp, #88	; 0x58
   179a4:	cmp	r0, #1
   179a8:	bne	17a7c <__assert_fail@plt+0x59f0>
   179ac:	b	17a60 <__assert_fail@plt+0x59d4>
   179b0:	ldrb	r0, [r8, #132]	; 0x84
   179b4:	ldr	r5, [r7, #28]
   179b8:	ldr	r4, [r8, #40]	; 0x28
   179bc:	cmp	r0, #0
   179c0:	movw	r0, #55770	; 0xd9da
   179c4:	movt	r0, #2
   179c8:	beq	179e4 <__assert_fail@plt+0x5958>
   179cc:	ldrb	r1, [r6, #16]
   179d0:	mov	r0, #0
   179d4:	cmp	r1, #0
   179d8:	bne	179e4 <__assert_fail@plt+0x5958>
   179dc:	mov	r0, r4
   179e0:	bl	232c8 <__assert_fail@plt+0x1123c>
   179e4:	mov	r2, r4
   179e8:	mov	r3, #0
   179ec:	str	r5, [sp]
   179f0:	bl	1f44c <__assert_fail@plt+0xd3c0>
   179f4:	ldrb	r0, [r6, #17]
   179f8:	cmp	r0, #0
   179fc:	bne	1794c <__assert_fail@plt+0x58c0>
   17a00:	ldrb	r0, [r8, #132]	; 0x84
   17a04:	ldr	r5, [r7, #32]
   17a08:	ldr	r4, [r8, #44]	; 0x2c
   17a0c:	cmp	r0, #0
   17a10:	movw	r0, #55770	; 0xd9da
   17a14:	movt	r0, #2
   17a18:	beq	17a34 <__assert_fail@plt+0x59a8>
   17a1c:	ldrb	r1, [r6, #16]
   17a20:	mov	r0, #0
   17a24:	cmp	r1, #0
   17a28:	bne	17a34 <__assert_fail@plt+0x59a8>
   17a2c:	mov	r0, r4
   17a30:	bl	23464 <__assert_fail@plt+0x113d8>
   17a34:	mov	r2, r4
   17a38:	mov	r3, #0
   17a3c:	str	r5, [sp]
   17a40:	bl	1f44c <__assert_fail@plt+0xd3c0>
   17a44:	ldrb	r0, [r6, #19]
   17a48:	cmp	r0, #1
   17a4c:	beq	17958 <__assert_fail@plt+0x58cc>
   17a50:	ldrb	r0, [r6, #7]
   17a54:	add	r5, sp, #88	; 0x58
   17a58:	cmp	r0, #1
   17a5c:	bne	17a7c <__assert_fail@plt+0x59f0>
   17a60:	ldr	r0, [r8, #128]	; 0x80
   17a64:	ldr	r1, [r7, #40]	; 0x28
   17a68:	mov	r2, #0
   17a6c:	mov	r3, #0
   17a70:	str	r1, [sp]
   17a74:	bl	1f44c <__assert_fail@plt+0xd3c0>
   17a78:	add	r5, sp, #88	; 0x58
   17a7c:	ldrb	r0, [r8, #132]	; 0x84
   17a80:	cmp	r0, #0
   17a84:	beq	17b44 <__assert_fail@plt+0x5ab8>
   17a88:	ldr	r0, [r8, #32]
   17a8c:	and	r0, r0, #45056	; 0xb000
   17a90:	orr	r0, r0, #16384	; 0x4000
   17a94:	cmp	r0, #24576	; 0x6000
   17a98:	bne	17b50 <__assert_fail@plt+0x5ac4>
   17a9c:	ldrd	r0, [r8, #48]	; 0x30
   17aa0:	ldr	r6, [r7, #44]	; 0x2c
   17aa4:	ldr	r4, [r7, #48]	; 0x30
   17aa8:	ldr	r9, [r7, #52]	; 0x34
   17aac:	sub	lr, fp, #1024	; 0x400
   17ab0:	sub	r2, lr, #57	; 0x39
   17ab4:	lsr	r1, r1, #12
   17ab8:	lsr	r0, r0, #8
   17abc:	bfi	r0, r1, #12, #20
   17ac0:	mov	r1, #0
   17ac4:	bl	236c0 <__assert_fail@plt+0x11634>
   17ac8:	str	r0, [sp, #20]
   17acc:	ldr	sl, [r7, #48]	; 0x30
   17ad0:	mov	r1, #0
   17ad4:	ldrd	r2, [r8, #48]	; 0x30
   17ad8:	lsr	r0, r2, #12
   17adc:	orr	r0, r0, r3, lsl #20
   17ae0:	bfi	r0, r2, #0, #8
   17ae4:	sub	r2, fp, #80	; 0x50
   17ae8:	bl	236c0 <__assert_fail@plt+0x11634>
   17aec:	sub	r1, r9, #2
   17af0:	movw	r3, #56261	; 0xdbc5
   17af4:	sub	r2, r1, r6
   17af8:	movt	r3, #2
   17afc:	sub	r2, r2, r4
   17b00:	cmp	r2, #0
   17b04:	mvn	r2, #0
   17b08:	subgt	r6, r1, r4
   17b0c:	str	r6, [sp]
   17b10:	movw	r6, #4688	; 0x1250
   17b14:	ldr	r1, [sp, #20]
   17b18:	movt	r6, #4
   17b1c:	stmib	sp, {r1, sl}
   17b20:	movw	sl, #456	; 0x1c8
   17b24:	str	r0, [sp, #12]
   17b28:	mov	r0, r5
   17b2c:	mov	r1, #1
   17b30:	movt	sl, #4
   17b34:	bl	11edc <__sprintf_chk@plt>
   17b38:	ldr	r1, [sp, #32]
   17b3c:	add	r5, r5, r0
   17b40:	b	17c0c <__assert_fail@plt+0x5b80>
   17b44:	movw	r4, #55770	; 0xd9da
   17b48:	movt	r4, #2
   17b4c:	b	17b90 <__assert_fail@plt+0x5b04>
   17b50:	movw	r2, #648	; 0x288
   17b54:	ldrd	r0, [r8, #64]	; 0x40
   17b58:	ldr	r3, [r6, #104]	; 0x68
   17b5c:	mov	r4, #1
   17b60:	sub	lr, fp, #1024	; 0x400
   17b64:	movt	r2, #4
   17b68:	ldr	r7, [r2, #12]
   17b6c:	ldr	r2, [r2, #8]
   17b70:	stm	sp, {r4, r9}
   17b74:	str	r2, [sp, #8]
   17b78:	str	r7, [sp, #12]
   17b7c:	movw	r7, #4816	; 0x12d0
   17b80:	sub	r2, lr, #57	; 0x39
   17b84:	movt	r7, #4
   17b88:	bl	22750 <__assert_fail@plt+0x106c4>
   17b8c:	mov	r4, r0
   17b90:	ldr	r9, [r7, #52]	; 0x34
   17b94:	mov	r0, r4
   17b98:	mov	r1, #0
   17b9c:	bl	23bf8 <__assert_fail@plt+0x11b6c>
   17ba0:	cmp	r9, r0
   17ba4:	ble	17bf0 <__assert_fail@plt+0x5b64>
   17ba8:	mov	r7, r0
   17bac:	mvn	r1, r9
   17bb0:	add	r0, r9, #2
   17bb4:	add	r6, r7, r1
   17bb8:	mvn	r1, #1
   17bbc:	sub	r0, r0, r7
   17bc0:	cmn	r6, #2
   17bc4:	movle	r6, r1
   17bc8:	mov	r1, #32
   17bcc:	add	r2, r0, r6
   17bd0:	mov	r0, r5
   17bd4:	bl	11ef4 <memset@plt>
   17bd8:	add	r0, r9, r6
   17bdc:	movw	r6, #4688	; 0x1250
   17be0:	sub	r0, r0, r7
   17be4:	movt	r6, #4
   17be8:	add	r0, r5, r0
   17bec:	add	r5, r0, #2
   17bf0:	ldr	r1, [sp, #32]
   17bf4:	ldrb	r0, [r4], #1
   17bf8:	strb	r0, [r5], #1
   17bfc:	cmp	r0, #0
   17c00:	bne	17bf4 <__assert_fail@plt+0x5b68>
   17c04:	mov	r0, #32
   17c08:	strb	r0, [r5, #-1]
   17c0c:	mov	r0, #1
   17c10:	eor	r9, r1, #1
   17c14:	strb	r0, [r5]
   17c18:	ldrb	r0, [r8, #132]	; 0x84
   17c1c:	cmp	r0, #0
   17c20:	beq	17d7c <__assert_fail@plt+0x5cf0>
   17c24:	cmp	r9, #0
   17c28:	bne	17d7c <__assert_fail@plt+0x5cf0>
   17c2c:	ldr	r0, [r6, #56]	; 0x38
   17c30:	add	r1, sp, #80	; 0x50
   17c34:	add	r2, sp, #36	; 0x24
   17c38:	bl	287e0 <_obstack_memory_used@@Base+0x245c>
   17c3c:	movw	r7, #4816	; 0x12d0
   17c40:	cmp	r0, #0
   17c44:	movt	r7, #4
   17c48:	beq	17d70 <__assert_fail@plt+0x5ce4>
   17c4c:	ldr	r2, [r7, #68]	; 0x44
   17c50:	ldr	r3, [sp, #80]	; 0x50
   17c54:	ldr	r1, [r7, #72]	; 0x48
   17c58:	ldr	r0, [sp, #84]	; 0x54
   17c5c:	mov	r6, #0
   17c60:	mov	r4, #0
   17c64:	cmp	r2, r3
   17c68:	movwgt	r6, #1
   17c6c:	sublt	r6, r6, #1
   17c70:	cmp	r1, r0
   17c74:	movwgt	r4, #1
   17c78:	sublt	r4, r4, #1
   17c7c:	add	r6, r4, r6, lsl #1
   17c80:	cmn	r6, #1
   17c84:	bgt	17ca0 <__assert_fail@plt+0x5c14>
   17c88:	add	r0, r7, #68	; 0x44
   17c8c:	bl	21240 <__assert_fail@plt+0xf1b4>
   17c90:	ldr	r2, [r7, #68]	; 0x44
   17c94:	ldr	r1, [r7, #72]	; 0x48
   17c98:	ldr	r3, [sp, #80]	; 0x50
   17c9c:	ldr	r0, [sp, #84]	; 0x54
   17ca0:	movw	r7, #15700	; 0x3d54
   17ca4:	cmp	r1, r0
   17ca8:	mov	r6, #0
   17cac:	mov	r4, #0
   17cb0:	movt	r7, #65295	; 0xff0f
   17cb4:	movwgt	r6, #1
   17cb8:	add	r7, r2, r7
   17cbc:	sublt	r6, r6, #1
   17cc0:	cmp	r7, r3
   17cc4:	mov	r7, #0
   17cc8:	movwgt	r7, #1
   17ccc:	sublt	r7, r7, #1
   17cd0:	add	r7, r6, r7, lsl #1
   17cd4:	cmn	r7, #1
   17cd8:	bgt	17d04 <__assert_fail@plt+0x5c78>
   17cdc:	cmp	r3, r2
   17ce0:	mov	r2, #0
   17ce4:	movwgt	r2, #1
   17ce8:	sublt	r2, r2, #1
   17cec:	cmp	r1, r0
   17cf0:	mov	r1, #0
   17cf4:	movwlt	r1, #1
   17cf8:	subgt	r1, r1, #1
   17cfc:	add	r1, r1, r2, lsl #1
   17d00:	lsr	r4, r1, #31
   17d04:	movw	r6, #4688	; 0x1250
   17d08:	movt	r6, #4
   17d0c:	ldrb	r2, [r6, #23]
   17d10:	ldr	r1, [r6, #56]	; 0x38
   17d14:	cmp	r2, #1
   17d18:	bne	17d38 <__assert_fail@plt+0x5cac>
   17d1c:	movw	r3, #1224	; 0x4c8
   17d20:	add	r2, r4, r4, lsl #1
   17d24:	movt	r3, #4
   17d28:	add	r2, r3, r2, lsl #9
   17d2c:	ldr	r3, [sp, #52]	; 0x34
   17d30:	add	r2, r2, r3, lsl #7
   17d34:	b	17d48 <__assert_fail@plt+0x5cbc>
   17d38:	movw	r2, #648	; 0x288
   17d3c:	movt	r2, #4
   17d40:	add	r2, r2, r4, lsl #2
   17d44:	ldr	r2, [r2, #16]
   17d48:	movw	r7, #4816	; 0x12d0
   17d4c:	str	r1, [sp]
   17d50:	str	r0, [sp, #4]
   17d54:	mov	r0, r5
   17d58:	movw	r1, #1001	; 0x3e9
   17d5c:	add	r3, sp, #36	; 0x24
   17d60:	movt	r7, #4
   17d64:	bl	2455c <__assert_fail@plt+0x124d0>
   17d68:	cmp	r0, #0
   17d6c:	bne	17ea0 <__assert_fail@plt+0x5e14>
   17d70:	ldrb	r0, [r5]
   17d74:	cmp	r0, #0
   17d78:	beq	17e94 <__assert_fail@plt+0x5e08>
   17d7c:	movw	r0, #648	; 0x288
   17d80:	movt	r0, #4
   17d84:	ldr	r4, [r0, #4]
   17d88:	cmn	r4, #1
   17d8c:	bgt	17e34 <__assert_fail@plt+0x5da8>
   17d90:	ldr	r0, [r6, #56]	; 0x38
   17d94:	sub	sl, fp, #80	; 0x50
   17d98:	mov	r4, #0
   17d9c:	sub	r1, fp, #36	; 0x24
   17da0:	mov	r2, sl
   17da4:	str	r4, [fp, #-36]	; 0xffffffdc
   17da8:	bl	287e0 <_obstack_memory_used@@Base+0x245c>
   17dac:	movw	r7, #648	; 0x288
   17db0:	cmp	r0, #0
   17db4:	movt	r7, #4
   17db8:	beq	17e1c <__assert_fail@plt+0x5d90>
   17dbc:	ldrb	r0, [r6, #23]
   17dc0:	ldr	r2, [r7, #16]
   17dc4:	ldr	r1, [r6, #56]	; 0x38
   17dc8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17dcc:	sub	lr, fp, #1024	; 0x400
   17dd0:	cmp	r0, #0
   17dd4:	movw	r0, #1224	; 0x4c8
   17dd8:	stm	sp, {r1, r4}
   17ddc:	movw	r1, #1001	; 0x3e9
   17de0:	movt	r0, #4
   17de4:	addne	r2, r0, r3, lsl #7
   17de8:	sub	r0, lr, #57	; 0x39
   17dec:	mov	r3, sl
   17df0:	bl	2455c <__assert_fail@plt+0x124d0>
   17df4:	cmp	r0, #0
   17df8:	beq	17e1c <__assert_fail@plt+0x5d90>
   17dfc:	sub	lr, fp, #1024	; 0x400
   17e00:	mov	r1, r0
   17e04:	mov	r2, #0
   17e08:	sub	r0, lr, #57	; 0x39
   17e0c:	bl	23c20 <__assert_fail@plt+0x11b94>
   17e10:	mov	r4, r0
   17e14:	str	r0, [r7, #4]
   17e18:	b	17e20 <__assert_fail@plt+0x5d94>
   17e1c:	ldr	r4, [r7, #4]
   17e20:	cmn	r4, #1
   17e24:	movw	sl, #456	; 0x1c8
   17e28:	movle	r4, #0
   17e2c:	movt	sl, #4
   17e30:	strle	r4, [r7, #4]
   17e34:	ldrb	r0, [r8, #132]	; 0x84
   17e38:	movw	r7, #4816	; 0x12d0
   17e3c:	movt	r7, #4
   17e40:	clz	r0, r0
   17e44:	lsr	r0, r0, #5
   17e48:	orrs	r0, r0, r9
   17e4c:	movw	r0, #55770	; 0xd9da
   17e50:	movt	r0, #2
   17e54:	bne	17e6c <__assert_fail@plt+0x5de0>
   17e58:	ldr	r0, [sp, #80]	; 0x50
   17e5c:	sub	lr, fp, #1024	; 0x400
   17e60:	sub	r2, lr, #57	; 0x39
   17e64:	asr	r1, r0, #31
   17e68:	bl	23600 <__assert_fail@plt+0x11574>
   17e6c:	movw	r3, #56266	; 0xdbca
   17e70:	str	r0, [sp, #4]
   17e74:	mov	r0, r5
   17e78:	mov	r1, #1
   17e7c:	mvn	r2, #0
   17e80:	str	r4, [sp]
   17e84:	movt	r3, #2
   17e88:	bl	11edc <__sprintf_chk@plt>
   17e8c:	add	r1, r5, r0
   17e90:	b	17eac <__assert_fail@plt+0x5e20>
   17e94:	movw	r7, #4816	; 0x12d0
   17e98:	mov	r0, #0
   17e9c:	movt	r7, #4
   17ea0:	mov	r1, #32
   17ea4:	strb	r1, [r5, r0]!
   17ea8:	add	r1, r5, #1
   17eac:	add	r0, sp, #88	; 0x58
   17eb0:	ldr	r2, [r7, #80]	; 0x50
   17eb4:	mov	r9, #0
   17eb8:	sub	r4, r1, r0
   17ebc:	ldr	r1, [r7, #84]	; 0x54
   17ec0:	adds	r2, r2, r4
   17ec4:	adc	r1, r1, #0
   17ec8:	str	r2, [r7, #80]	; 0x50
   17ecc:	mov	r2, r4
   17ed0:	str	r1, [r7, #84]	; 0x54
   17ed4:	movw	r1, #780	; 0x30c
   17ed8:	movt	r1, #4
   17edc:	ldr	r3, [r1]
   17ee0:	mov	r1, #1
   17ee4:	bl	11c90 <fwrite_unlocked@plt>
   17ee8:	ldr	r2, [sp, #24]
   17eec:	mov	r0, r8
   17ef0:	mov	r1, #0
   17ef4:	mov	r3, r4
   17ef8:	bl	1e554 <__assert_fail@plt+0xc4c8>
   17efc:	mov	r5, r0
   17f00:	ldr	r0, [r8, #120]	; 0x78
   17f04:	cmp	r0, #6
   17f08:	bne	17fa8 <__assert_fail@plt+0x5f1c>
   17f0c:	ldr	r0, [r8, #4]
   17f10:	cmp	r0, #0
   17f14:	beq	18034 <__assert_fail@plt+0x5fa8>
   17f18:	movw	r0, #4816	; 0x12d0
   17f1c:	movt	r0, #4
   17f20:	mov	r2, r0
   17f24:	ldrd	r0, [r0, #80]	; 0x50
   17f28:	adds	r0, r0, #4
   17f2c:	adc	r1, r1, #0
   17f30:	strd	r0, [r2, #80]	; 0x50
   17f34:	movw	r0, #780	; 0x30c
   17f38:	mov	r1, #1
   17f3c:	mov	r2, #4
   17f40:	movt	r0, #4
   17f44:	ldr	r3, [r0]
   17f48:	movw	r0, #56271	; 0xdbcf
   17f4c:	movt	r0, #2
   17f50:	bl	11c90 <fwrite_unlocked@plt>
   17f54:	add	r0, r4, r5
   17f58:	mov	r1, #1
   17f5c:	mov	r2, #0
   17f60:	add	r3, r0, #4
   17f64:	mov	r0, r8
   17f68:	bl	1e554 <__assert_fail@plt+0xc4c8>
   17f6c:	ldr	r1, [r6, #48]	; 0x30
   17f70:	cmp	r1, #0
   17f74:	beq	18034 <__assert_fail@plt+0x5fa8>
   17f78:	ldr	r2, [r8, #124]	; 0x7c
   17f7c:	and	r0, r2, #61440	; 0xf000
   17f80:	cmp	r0, #16384	; 0x4000
   17f84:	beq	17fe4 <__assert_fail@plt+0x5f58>
   17f88:	cmp	r0, #32768	; 0x8000
   17f8c:	bne	173ec <__assert_fail@plt+0x5360>
   17f90:	cmp	r1, #3
   17f94:	bne	18034 <__assert_fail@plt+0x5fa8>
   17f98:	ands	r0, r2, #73	; 0x49
   17f9c:	mov	r1, #42	; 0x2a
   17fa0:	bne	17fe8 <__assert_fail@plt+0x5f5c>
   17fa4:	b	18034 <__assert_fail@plt+0x5fa8>
   17fa8:	ldr	r3, [r6, #48]	; 0x30
   17fac:	cmp	r3, #0
   17fb0:	beq	18034 <__assert_fail@plt+0x5fa8>
   17fb4:	ldrb	r7, [r8, #132]	; 0x84
   17fb8:	ldr	r2, [r8, #32]
   17fbc:	cmp	r7, #0
   17fc0:	beq	17374 <__assert_fail@plt+0x52e8>
   17fc4:	and	r1, r2, #61440	; 0xf000
   17fc8:	cmp	r1, #16384	; 0x4000
   17fcc:	beq	17fe4 <__assert_fail@plt+0x5f58>
   17fd0:	cmp	r1, #32768	; 0x8000
   17fd4:	bne	17390 <__assert_fail@plt+0x5304>
   17fd8:	cmp	r3, #3
   17fdc:	beq	17f98 <__assert_fail@plt+0x5f0c>
   17fe0:	b	18034 <__assert_fail@plt+0x5fa8>
   17fe4:	mov	r1, #47	; 0x2f
   17fe8:	movw	r0, #4816	; 0x12d0
   17fec:	movt	r0, #4
   17ff0:	mov	r2, r0
   17ff4:	ldr	r3, [r0, #84]	; 0x54
   17ff8:	ldr	r0, [r0, #80]	; 0x50
   17ffc:	adds	r0, r0, #1
   18000:	str	r0, [r2, #80]	; 0x50
   18004:	movw	r0, #780	; 0x30c
   18008:	adc	r3, r3, #0
   1800c:	str	r3, [r2, #84]	; 0x54
   18010:	movt	r0, #4
   18014:	ldr	r0, [r0]
   18018:	ldr	r2, [r0, #20]
   1801c:	ldr	r3, [r0, #24]
   18020:	cmp	r2, r3
   18024:	bcs	17558 <__assert_fail@plt+0x54cc>
   18028:	add	r3, r2, #1
   1802c:	str	r3, [r0, #20]
   18030:	strb	r1, [r2]
   18034:	movw	r7, #4816	; 0x12d0
   18038:	movt	r7, #4
   1803c:	ldrd	r0, [r7, #80]	; 0x50
   18040:	adds	r0, r0, #1
   18044:	adc	r1, r1, #0
   18048:	strd	r0, [r7, #80]	; 0x50
   1804c:	ldrb	r0, [r6, #20]
   18050:	mov	r1, #10
   18054:	cmp	r0, #0
   18058:	movw	r0, #780	; 0x30c
   1805c:	movt	r0, #4
   18060:	movwne	r1, #0
   18064:	ldr	r0, [r0]
   18068:	ldr	r2, [r0, #20]
   1806c:	ldr	r3, [r0, #24]
   18070:	cmp	r2, r3
   18074:	bcs	17550 <__assert_fail@plt+0x54c4>
   18078:	add	r3, r2, #1
   1807c:	str	r3, [r0, #20]
   18080:	strb	r1, [r2]
   18084:	ldr	r4, [sp, #28]
   18088:	ldr	r0, [r6, #76]	; 0x4c
   1808c:	add	r4, r4, #1
   18090:	cmp	r4, r0
   18094:	bcc	17560 <__assert_fail@plt+0x54d4>
   18098:	b	1842c <__assert_fail@plt+0x63a0>
   1809c:	mov	r0, #44	; 0x2c
   180a0:	sub	sp, fp, #28
   180a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180a8:	b	1e3d8 <__assert_fail@plt+0xc34c>
   180ac:	movw	r7, #4688	; 0x1250
   180b0:	movt	r7, #4
   180b4:	ldr	r0, [r7, #76]	; 0x4c
   180b8:	cmp	r0, #0
   180bc:	beq	1842c <__assert_fail@plt+0x63a0>
   180c0:	movw	r5, #4816	; 0x12d0
   180c4:	movw	r6, #780	; 0x30c
   180c8:	mov	r4, #0
   180cc:	movt	r5, #4
   180d0:	movt	r6, #4
   180d4:	b	181dc <__assert_fail@plt+0x6150>
   180d8:	movw	r6, #4688	; 0x1250
   180dc:	movt	r6, #4
   180e0:	ldr	r0, [r6, #112]	; 0x70
   180e4:	cmp	r0, #0
   180e8:	beq	181c4 <__assert_fail@plt+0x6138>
   180ec:	mov	r0, #1
   180f0:	bl	1f0e0 <__assert_fail@plt+0xd054>
   180f4:	ldr	r1, [r6, #76]	; 0x4c
   180f8:	udiv	sl, r1, r0
   180fc:	mls	r1, sl, r0, r1
   18100:	cmp	r1, #0
   18104:	addne	sl, sl, #1
   18108:	cmp	sl, #0
   1810c:	beq	1842c <__assert_fail@plt+0x63a0>
   18110:	movw	r1, #4816	; 0x12d0
   18114:	add	r0, r0, r0, lsl #1
   18118:	mov	r7, #0
   1811c:	movt	r1, #4
   18120:	ldr	r1, [r1, #60]	; 0x3c
   18124:	add	r0, r1, r0, lsl #2
   18128:	sub	r0, r0, #4
   1812c:	str	r0, [sp, #28]
   18130:	str	sl, [sp, #32]
   18134:	b	18240 <__assert_fail@plt+0x61b4>
   18138:	movw	r5, #4688	; 0x1250
   1813c:	movt	r5, #4
   18140:	ldr	r0, [r5, #112]	; 0x70
   18144:	cmp	r0, #0
   18148:	beq	181c4 <__assert_fail@plt+0x6138>
   1814c:	mov	r0, #0
   18150:	mov	r8, r5
   18154:	mov	r4, #0
   18158:	bl	1f0e0 <__assert_fail@plt+0xd054>
   1815c:	movw	r1, #4816	; 0x12d0
   18160:	str	r0, [sp, #32]
   18164:	add	r2, r0, r0, lsl #1
   18168:	movt	r1, #4
   1816c:	ldr	r3, [r1, #12]
   18170:	ldr	r1, [r1, #60]	; 0x3c
   18174:	ldr	r7, [r3]
   18178:	add	r5, r1, r2, lsl #2
   1817c:	mov	r0, r7
   18180:	bl	1ee0c <__assert_fail@plt+0xcd80>
   18184:	mov	r6, r0
   18188:	ldr	r0, [r5, #-4]!
   1818c:	mov	r1, #0
   18190:	str	r5, [sp, #28]
   18194:	ldr	r5, [r0]
   18198:	mov	r0, r7
   1819c:	bl	1dfa8 <__assert_fail@plt+0xbf1c>
   181a0:	ldr	r0, [r8, #76]	; 0x4c
   181a4:	cmp	r0, #2
   181a8:	bcc	185c8 <__assert_fail@plt+0x653c>
   181ac:	movw	sl, #780	; 0x30c
   181b0:	mov	r7, #1
   181b4:	mov	r8, #32
   181b8:	mov	ip, #9
   181bc:	movt	sl, #4
   181c0:	b	18440 <__assert_fail@plt+0x63b4>
   181c4:	mov	r0, #32
   181c8:	sub	sp, fp, #28
   181cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181d0:	b	1e3d8 <__assert_fail@plt+0xc34c>
   181d4:	bl	11f54 <__overflow@plt>
   181d8:	b	1821c <__assert_fail@plt+0x6190>
   181dc:	ldr	r0, [r5, #12]
   181e0:	mov	r1, #0
   181e4:	ldr	r0, [r0, r4, lsl #2]
   181e8:	bl	1dfa8 <__assert_fail@plt+0xbf1c>
   181ec:	ldrb	r0, [r7, #20]
   181f0:	mov	r1, #10
   181f4:	cmp	r0, #0
   181f8:	ldr	r0, [r6]
   181fc:	movwne	r1, #0
   18200:	ldr	r2, [r0, #20]
   18204:	ldr	r3, [r0, #24]
   18208:	cmp	r2, r3
   1820c:	bcs	181d4 <__assert_fail@plt+0x6148>
   18210:	add	r3, r2, #1
   18214:	str	r3, [r0, #20]
   18218:	strb	r1, [r2]
   1821c:	movw	r7, #4688	; 0x1250
   18220:	add	r4, r4, #1
   18224:	movt	r7, #4
   18228:	ldr	r0, [r7, #76]	; 0x4c
   1822c:	cmp	r4, r0
   18230:	bcc	181dc <__assert_fail@plt+0x6150>
   18234:	b	1842c <__assert_fail@plt+0x63a0>
   18238:	bl	11f54 <__overflow@plt>
   1823c:	b	18410 <__assert_fail@plt+0x6384>
   18240:	movw	r0, #4816	; 0x12d0
   18244:	movt	r0, #4
   18248:	ldr	r0, [r0, #12]
   1824c:	ldr	r4, [r0, r7, lsl #2]
   18250:	mov	r0, r4
   18254:	bl	1ee0c <__assert_fail@plt+0xcd80>
   18258:	mov	r5, r0
   1825c:	ldr	r0, [sp, #28]
   18260:	mov	r1, #0
   18264:	ldr	r0, [r0]
   18268:	ldr	r9, [r0]
   1826c:	mov	r0, r4
   18270:	bl	1dfa8 <__assert_fail@plt+0xbf1c>
   18274:	ldr	r0, [r6, #76]	; 0x4c
   18278:	add	sl, r7, sl
   1827c:	str	r7, [sp, #24]
   18280:	cmp	sl, r0
   18284:	bcs	183d8 <__assert_fail@plt+0x634c>
   18288:	mov	r0, #0
   1828c:	mov	r8, #1
   18290:	movw	r7, #780	; 0x30c
   18294:	add	r4, r0, r9
   18298:	add	r5, r0, r5
   1829c:	mov	ip, #32
   182a0:	mov	lr, #9
   182a4:	cmp	r5, r4
   182a8:	movt	r7, #4
   182ac:	bcs	18380 <__assert_fail@plt+0x62f4>
   182b0:	b	182f0 <__assert_fail@plt+0x6264>
   182b4:	mov	r1, #32
   182b8:	bl	11f54 <__overflow@plt>
   182bc:	mov	lr, #9
   182c0:	mov	ip, #32
   182c4:	mov	r0, #1
   182c8:	add	r5, r0, r5
   182cc:	cmp	r5, r4
   182d0:	bcc	182f0 <__assert_fail@plt+0x6264>
   182d4:	b	18380 <__assert_fail@plt+0x62f4>
   182d8:	mov	r1, #9
   182dc:	bl	11f54 <__overflow@plt>
   182e0:	ldr	r1, [r6, #36]	; 0x24
   182e4:	mov	lr, #9
   182e8:	mov	ip, #32
   182ec:	b	18330 <__assert_fail@plt+0x62a4>
   182f0:	ldr	r1, [r6, #36]	; 0x24
   182f4:	cmp	r1, #0
   182f8:	beq	18350 <__assert_fail@plt+0x62c4>
   182fc:	add	r2, r5, #1
   18300:	udiv	r0, r4, r1
   18304:	udiv	r2, r2, r1
   18308:	cmp	r0, r2
   1830c:	bls	18350 <__assert_fail@plt+0x62c4>
   18310:	ldr	r0, [r7]
   18314:	ldr	r2, [r0, #20]
   18318:	ldr	r3, [r0, #24]
   1831c:	cmp	r2, r3
   18320:	bcs	182d8 <__assert_fail@plt+0x624c>
   18324:	add	r3, r2, #1
   18328:	str	r3, [r0, #20]
   1832c:	strb	lr, [r2]
   18330:	udiv	r0, r5, r1
   18334:	mul	r0, r0, r1
   18338:	sub	r0, r0, r5
   1833c:	add	r0, r1, r0
   18340:	add	r5, r0, r5
   18344:	cmp	r5, r4
   18348:	bcc	182f0 <__assert_fail@plt+0x6264>
   1834c:	b	18380 <__assert_fail@plt+0x62f4>
   18350:	ldr	r0, [r7]
   18354:	ldr	r1, [r0, #20]
   18358:	ldr	r2, [r0, #24]
   1835c:	cmp	r1, r2
   18360:	bcs	182b4 <__assert_fail@plt+0x6228>
   18364:	add	r2, r1, #1
   18368:	str	r2, [r0, #20]
   1836c:	strb	ip, [r1]
   18370:	mov	r0, #1
   18374:	add	r5, r0, r5
   18378:	cmp	r5, r4
   1837c:	bcc	182f0 <__assert_fail@plt+0x6264>
   18380:	movw	r0, #4816	; 0x12d0
   18384:	movt	r0, #4
   18388:	ldr	r0, [r0, #12]
   1838c:	ldr	r6, [r0, sl, lsl #2]
   18390:	mov	r0, r6
   18394:	bl	1ee0c <__assert_fail@plt+0xcd80>
   18398:	mov	r5, r0
   1839c:	ldr	r0, [sp, #28]
   183a0:	mov	r1, r4
   183a4:	ldr	r0, [r0]
   183a8:	ldr	r9, [r0, r8, lsl #2]
   183ac:	mov	r0, r6
   183b0:	movw	r6, #4688	; 0x1250
   183b4:	movt	r6, #4
   183b8:	bl	1dfa8 <__assert_fail@plt+0xbf1c>
   183bc:	ldr	r0, [sp, #32]
   183c0:	add	r8, r8, #1
   183c4:	add	sl, sl, r0
   183c8:	ldr	r0, [r6, #76]	; 0x4c
   183cc:	cmp	sl, r0
   183d0:	mov	r0, r4
   183d4:	bcc	18290 <__assert_fail@plt+0x6204>
   183d8:	ldrb	r0, [r6, #20]
   183dc:	mov	r1, #10
   183e0:	cmp	r0, #0
   183e4:	movw	r0, #780	; 0x30c
   183e8:	movt	r0, #4
   183ec:	movwne	r1, #0
   183f0:	ldr	r0, [r0]
   183f4:	ldr	r2, [r0, #20]
   183f8:	ldr	r3, [r0, #24]
   183fc:	cmp	r2, r3
   18400:	bcs	18238 <__assert_fail@plt+0x61ac>
   18404:	add	r3, r2, #1
   18408:	str	r3, [r0, #20]
   1840c:	strb	r1, [r2]
   18410:	ldr	r7, [sp, #24]
   18414:	ldr	sl, [sp, #32]
   18418:	movw	r6, #4688	; 0x1250
   1841c:	movt	r6, #4
   18420:	add	r7, r7, #1
   18424:	cmp	r7, sl
   18428:	bcc	18240 <__assert_fail@plt+0x61b4>
   1842c:	sub	sp, fp, #28
   18430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18434:	bl	11f54 <__overflow@plt>
   18438:	mov	r4, #0
   1843c:	b	18578 <__assert_fail@plt+0x64ec>
   18440:	ldr	r1, [sp, #32]
   18444:	udiv	r0, r7, r1
   18448:	mls	r9, r0, r1, r7
   1844c:	cmp	r9, #0
   18450:	beq	18470 <__assert_fail@plt+0x63e4>
   18454:	add	r5, r4, r5
   18458:	add	r4, r4, r6
   1845c:	cmp	r4, r5
   18460:	bcs	18574 <__assert_fail@plt+0x64e8>
   18464:	movw	r6, #4688	; 0x1250
   18468:	movt	r6, #4
   1846c:	b	184e4 <__assert_fail@plt+0x6458>
   18470:	movw	r0, #4688	; 0x1250
   18474:	mov	r1, #10
   18478:	movt	r0, #4
   1847c:	ldrb	r0, [r0, #20]
   18480:	cmp	r0, #0
   18484:	ldr	r0, [sl]
   18488:	movwne	r1, #0
   1848c:	ldr	r2, [r0, #20]
   18490:	ldr	r3, [r0, #24]
   18494:	cmp	r2, r3
   18498:	bcs	18434 <__assert_fail@plt+0x63a8>
   1849c:	add	r3, r2, #1
   184a0:	mov	r4, #0
   184a4:	str	r3, [r0, #20]
   184a8:	strb	r1, [r2]
   184ac:	b	18578 <__assert_fail@plt+0x64ec>
   184b0:	mov	r1, #32
   184b4:	bl	11f54 <__overflow@plt>
   184b8:	mov	ip, #9
   184bc:	mov	r0, #1
   184c0:	add	r4, r0, r4
   184c4:	cmp	r4, r5
   184c8:	bcc	184e4 <__assert_fail@plt+0x6458>
   184cc:	b	18574 <__assert_fail@plt+0x64e8>
   184d0:	mov	r1, #9
   184d4:	bl	11f54 <__overflow@plt>
   184d8:	ldr	r1, [r6, #36]	; 0x24
   184dc:	mov	ip, #9
   184e0:	b	18524 <__assert_fail@plt+0x6498>
   184e4:	ldr	r1, [r6, #36]	; 0x24
   184e8:	cmp	r1, #0
   184ec:	beq	18544 <__assert_fail@plt+0x64b8>
   184f0:	add	r2, r4, #1
   184f4:	udiv	r0, r5, r1
   184f8:	udiv	r2, r2, r1
   184fc:	cmp	r0, r2
   18500:	bls	18544 <__assert_fail@plt+0x64b8>
   18504:	ldr	r0, [sl]
   18508:	ldr	r2, [r0, #20]
   1850c:	ldr	r3, [r0, #24]
   18510:	cmp	r2, r3
   18514:	bcs	184d0 <__assert_fail@plt+0x6444>
   18518:	add	r3, r2, #1
   1851c:	str	r3, [r0, #20]
   18520:	strb	ip, [r2]
   18524:	udiv	r0, r4, r1
   18528:	mul	r0, r0, r1
   1852c:	sub	r0, r0, r4
   18530:	add	r0, r1, r0
   18534:	add	r4, r0, r4
   18538:	cmp	r4, r5
   1853c:	bcc	184e4 <__assert_fail@plt+0x6458>
   18540:	b	18574 <__assert_fail@plt+0x64e8>
   18544:	ldr	r0, [sl]
   18548:	ldr	r1, [r0, #20]
   1854c:	ldr	r2, [r0, #24]
   18550:	cmp	r1, r2
   18554:	bcs	184b0 <__assert_fail@plt+0x6424>
   18558:	add	r2, r1, #1
   1855c:	str	r2, [r0, #20]
   18560:	strb	r8, [r1]
   18564:	mov	r0, #1
   18568:	add	r4, r0, r4
   1856c:	cmp	r4, r5
   18570:	bcc	184e4 <__assert_fail@plt+0x6458>
   18574:	mov	r4, r5
   18578:	movw	r0, #4816	; 0x12d0
   1857c:	mov	r1, r4
   18580:	movt	r0, #4
   18584:	ldr	r0, [r0, #12]
   18588:	ldr	r6, [r0, r7, lsl #2]
   1858c:	mov	r0, r6
   18590:	bl	1dfa8 <__assert_fail@plt+0xbf1c>
   18594:	mov	r0, r6
   18598:	bl	1ee0c <__assert_fail@plt+0xcd80>
   1859c:	mov	r6, r0
   185a0:	ldr	r0, [sp, #28]
   185a4:	add	r7, r7, #1
   185a8:	mov	ip, #9
   185ac:	ldr	r0, [r0]
   185b0:	ldr	r5, [r0, r9, lsl #2]
   185b4:	movw	r0, #4688	; 0x1250
   185b8:	movt	r0, #4
   185bc:	ldr	r0, [r0, #76]	; 0x4c
   185c0:	cmp	r7, r0
   185c4:	bcc	18440 <__assert_fail@plt+0x63b4>
   185c8:	movw	r0, #4688	; 0x1250
   185cc:	mov	r1, #10
   185d0:	movt	r0, #4
   185d4:	ldrb	r0, [r0, #20]
   185d8:	cmp	r0, #0
   185dc:	movw	r0, #780	; 0x30c
   185e0:	movt	r0, #4
   185e4:	movwne	r1, #0
   185e8:	ldr	r0, [r0]
   185ec:	ldr	r2, [r0, #20]
   185f0:	ldr	r3, [r0, #24]
   185f4:	cmp	r2, r3
   185f8:	addcc	r3, r2, #1
   185fc:	strcc	r3, [r0, #20]
   18600:	strbcc	r1, [r2]
   18604:	subcc	sp, fp, #28
   18608:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1860c:	sub	sp, fp, #28
   18610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18614:	b	11f54 <__overflow@plt>
   18618:	bl	12038 <abort@plt>
   1861c:	push	{fp, lr}
   18620:	mov	fp, sp
   18624:	sub	sp, sp, #56	; 0x38
   18628:	mov	r4, r0
   1862c:	cmp	r0, #0
   18630:	bne	18b58 <__assert_fail@plt+0x6acc>
   18634:	movw	r1, #47077	; 0xb7e5
   18638:	mov	r0, #0
   1863c:	mov	r2, #5
   18640:	movt	r1, #2
   18644:	bl	11cb4 <dcgettext@plt>
   18648:	mov	r1, r0
   1864c:	movw	r0, #5048	; 0x13b8
   18650:	movt	r0, #4
   18654:	ldr	r2, [r0]
   18658:	mov	r0, #1
   1865c:	bl	11f00 <__printf_chk@plt>
   18660:	movw	r1, #47110	; 0xb806
   18664:	mov	r0, #0
   18668:	mov	r2, #5
   1866c:	movt	r1, #2
   18670:	bl	11cb4 <dcgettext@plt>
   18674:	movw	r7, #780	; 0x30c
   18678:	movt	r7, #4
   1867c:	ldr	r1, [r7]
   18680:	bl	11b94 <fputs_unlocked@plt>
   18684:	movw	r1, #56283	; 0xdbdb
   18688:	mov	r0, #0
   1868c:	mov	r2, #5
   18690:	movt	r1, #2
   18694:	bl	11cb4 <dcgettext@plt>
   18698:	ldr	r1, [r7]
   1869c:	bl	11b94 <fputs_unlocked@plt>
   186a0:	movw	r1, #47254	; 0xb896
   186a4:	mov	r0, #0
   186a8:	mov	r2, #5
   186ac:	movt	r1, #2
   186b0:	bl	11cb4 <dcgettext@plt>
   186b4:	ldr	r1, [r7]
   186b8:	bl	11b94 <fputs_unlocked@plt>
   186bc:	movw	r1, #47525	; 0xb9a5
   186c0:	mov	r0, #0
   186c4:	mov	r2, #5
   186c8:	movt	r1, #2
   186cc:	bl	11cb4 <dcgettext@plt>
   186d0:	ldr	r1, [r7]
   186d4:	bl	11b94 <fputs_unlocked@plt>
   186d8:	movw	r1, #47681	; 0xba41
   186dc:	mov	r0, #0
   186e0:	mov	r2, #5
   186e4:	movt	r1, #2
   186e8:	bl	11cb4 <dcgettext@plt>
   186ec:	ldr	r1, [r7]
   186f0:	bl	11b94 <fputs_unlocked@plt>
   186f4:	movw	r1, #48043	; 0xbbab
   186f8:	mov	r0, #0
   186fc:	mov	r2, #5
   18700:	movt	r1, #2
   18704:	bl	11cb4 <dcgettext@plt>
   18708:	ldr	r1, [r7]
   1870c:	bl	11b94 <fputs_unlocked@plt>
   18710:	movw	r1, #48318	; 0xbcbe
   18714:	mov	r0, #0
   18718:	mov	r2, #5
   1871c:	movt	r1, #2
   18720:	bl	11cb4 <dcgettext@plt>
   18724:	ldr	r1, [r7]
   18728:	bl	11b94 <fputs_unlocked@plt>
   1872c:	movw	r1, #48733	; 0xbe5d
   18730:	mov	r0, #0
   18734:	mov	r2, #5
   18738:	movt	r1, #2
   1873c:	bl	11cb4 <dcgettext@plt>
   18740:	ldr	r1, [r7]
   18744:	bl	11b94 <fputs_unlocked@plt>
   18748:	movw	r1, #48794	; 0xbe9a
   1874c:	mov	r0, #0
   18750:	mov	r2, #5
   18754:	movt	r1, #2
   18758:	bl	11cb4 <dcgettext@plt>
   1875c:	ldr	r1, [r7]
   18760:	bl	11b94 <fputs_unlocked@plt>
   18764:	movw	r1, #49039	; 0xbf8f
   18768:	mov	r0, #0
   1876c:	mov	r2, #5
   18770:	movt	r1, #2
   18774:	bl	11cb4 <dcgettext@plt>
   18778:	ldr	r1, [r7]
   1877c:	bl	11b94 <fputs_unlocked@plt>
   18780:	movw	r1, #49112	; 0xbfd8
   18784:	mov	r0, #0
   18788:	mov	r2, #5
   1878c:	movt	r1, #2
   18790:	bl	11cb4 <dcgettext@plt>
   18794:	ldr	r1, [r7]
   18798:	bl	11b94 <fputs_unlocked@plt>
   1879c:	movw	r1, #49262	; 0xc06e
   187a0:	mov	r0, #0
   187a4:	mov	r2, #5
   187a8:	movt	r1, #2
   187ac:	bl	11cb4 <dcgettext@plt>
   187b0:	ldr	r1, [r7]
   187b4:	bl	11b94 <fputs_unlocked@plt>
   187b8:	movw	r1, #49684	; 0xc214
   187bc:	mov	r0, #0
   187c0:	mov	r2, #5
   187c4:	movt	r1, #2
   187c8:	bl	11cb4 <dcgettext@plt>
   187cc:	ldr	r1, [r7]
   187d0:	bl	11b94 <fputs_unlocked@plt>
   187d4:	movw	r1, #49740	; 0xc24c
   187d8:	mov	r0, #0
   187dc:	mov	r2, #5
   187e0:	movt	r1, #2
   187e4:	bl	11cb4 <dcgettext@plt>
   187e8:	ldr	r1, [r7]
   187ec:	bl	11b94 <fputs_unlocked@plt>
   187f0:	movw	r1, #50094	; 0xc3ae
   187f4:	mov	r0, #0
   187f8:	mov	r2, #5
   187fc:	movt	r1, #2
   18800:	bl	11cb4 <dcgettext@plt>
   18804:	ldr	r1, [r7]
   18808:	bl	11b94 <fputs_unlocked@plt>
   1880c:	movw	r1, #50249	; 0xc449
   18810:	mov	r0, #0
   18814:	mov	r2, #5
   18818:	movt	r1, #2
   1881c:	bl	11cb4 <dcgettext@plt>
   18820:	ldr	r1, [r7]
   18824:	bl	11b94 <fputs_unlocked@plt>
   18828:	movw	r1, #50608	; 0xc5b0
   1882c:	mov	r0, #0
   18830:	mov	r2, #5
   18834:	movt	r1, #2
   18838:	bl	11cb4 <dcgettext@plt>
   1883c:	ldr	r1, [r7]
   18840:	bl	11b94 <fputs_unlocked@plt>
   18844:	movw	r1, #50911	; 0xc6df
   18848:	mov	r0, #0
   1884c:	mov	r2, #5
   18850:	movt	r1, #2
   18854:	bl	11cb4 <dcgettext@plt>
   18858:	ldr	r1, [r7]
   1885c:	bl	11b94 <fputs_unlocked@plt>
   18860:	movw	r1, #51496	; 0xc928
   18864:	mov	r0, #0
   18868:	mov	r2, #5
   1886c:	movt	r1, #2
   18870:	bl	11cb4 <dcgettext@plt>
   18874:	ldr	r1, [r7]
   18878:	bl	11b94 <fputs_unlocked@plt>
   1887c:	movw	r1, #51693	; 0xc9ed
   18880:	mov	r0, #0
   18884:	mov	r2, #5
   18888:	movt	r1, #2
   1888c:	bl	11cb4 <dcgettext@plt>
   18890:	ldr	r1, [r7]
   18894:	bl	11b94 <fputs_unlocked@plt>
   18898:	movw	r1, #52334	; 0xcc6e
   1889c:	mov	r0, #0
   188a0:	mov	r2, #5
   188a4:	movt	r1, #2
   188a8:	bl	11cb4 <dcgettext@plt>
   188ac:	ldr	r1, [r7]
   188b0:	bl	11b94 <fputs_unlocked@plt>
   188b4:	movw	r1, #52413	; 0xccbd
   188b8:	mov	r0, #0
   188bc:	mov	r2, #5
   188c0:	movt	r1, #2
   188c4:	bl	11cb4 <dcgettext@plt>
   188c8:	ldr	r1, [r7]
   188cc:	bl	11b94 <fputs_unlocked@plt>
   188d0:	movw	r1, #52554	; 0xcd4a
   188d4:	mov	r0, #0
   188d8:	mov	r2, #5
   188dc:	movt	r1, #2
   188e0:	bl	11cb4 <dcgettext@plt>
   188e4:	ldr	r1, [r7]
   188e8:	bl	11b94 <fputs_unlocked@plt>
   188ec:	movw	r1, #52926	; 0xcebe
   188f0:	mov	r0, #0
   188f4:	mov	r2, #5
   188f8:	movt	r1, #2
   188fc:	bl	11cb4 <dcgettext@plt>
   18900:	ldr	r1, [r7]
   18904:	bl	11b94 <fputs_unlocked@plt>
   18908:	movw	r1, #53334	; 0xd056
   1890c:	mov	r0, #0
   18910:	mov	r2, #5
   18914:	movt	r1, #2
   18918:	bl	11cb4 <dcgettext@plt>
   1891c:	ldr	r1, [r7]
   18920:	bl	11b94 <fputs_unlocked@plt>
   18924:	movw	r1, #53379	; 0xd083
   18928:	mov	r0, #0
   1892c:	mov	r2, #5
   18930:	movt	r1, #2
   18934:	bl	11cb4 <dcgettext@plt>
   18938:	ldr	r1, [r7]
   1893c:	bl	11b94 <fputs_unlocked@plt>
   18940:	movw	r1, #56358	; 0xdc26
   18944:	mov	r0, #0
   18948:	mov	r2, #5
   1894c:	movt	r1, #2
   18950:	bl	11cb4 <dcgettext@plt>
   18954:	ldr	r1, [r7]
   18958:	bl	11b94 <fputs_unlocked@plt>
   1895c:	movw	r1, #53433	; 0xd0b9
   18960:	mov	r0, #0
   18964:	mov	r2, #5
   18968:	movt	r1, #2
   1896c:	bl	11cb4 <dcgettext@plt>
   18970:	ldr	r1, [r7]
   18974:	bl	11b94 <fputs_unlocked@plt>
   18978:	movw	r1, #53809	; 0xd231
   1897c:	mov	r0, #0
   18980:	mov	r2, #5
   18984:	movt	r1, #2
   18988:	bl	11cb4 <dcgettext@plt>
   1898c:	ldr	r1, [r7]
   18990:	bl	11b94 <fputs_unlocked@plt>
   18994:	movw	r1, #53885	; 0xd27d
   18998:	mov	r0, #0
   1899c:	mov	r2, #5
   189a0:	movt	r1, #2
   189a4:	bl	11cb4 <dcgettext@plt>
   189a8:	ldr	r1, [r7]
   189ac:	bl	11b94 <fputs_unlocked@plt>
   189b0:	movw	r1, #54171	; 0xd39b
   189b4:	mov	r0, #0
   189b8:	mov	r2, #5
   189bc:	movt	r1, #2
   189c0:	bl	11cb4 <dcgettext@plt>
   189c4:	ldr	r1, [r7]
   189c8:	bl	11b94 <fputs_unlocked@plt>
   189cc:	movw	r1, #62568	; 0xf468
   189d0:	mov	r3, #48	; 0x30
   189d4:	movw	r0, #672	; 0x2a0
   189d8:	mov	r6, sp
   189dc:	movt	r1, #2
   189e0:	movt	r0, #4
   189e4:	add	r2, r1, #32
   189e8:	add	r5, r1, #16
   189ec:	vld1.64	{d18-d19}, [r1], r3
   189f0:	ldr	r0, [r0]
   189f4:	vld1.64	{d20-d21}, [r5]
   189f8:	vld1.64	{d16-d17}, [r2]
   189fc:	add	r2, r6, #32
   18a00:	movw	r5, #54694	; 0xd5a6
   18a04:	movt	r5, #2
   18a08:	vldr	d22, [r1]
   18a0c:	add	r1, r6, #16
   18a10:	cmp	r0, #2
   18a14:	vst1.64	{d20-d21}, [r1]
   18a18:	mov	r1, r6
   18a1c:	vst1.64	{d16-d17}, [r2]
   18a20:	movw	r2, #54323	; 0xd433
   18a24:	vst1.64	{d18-d19}, [r1], r3
   18a28:	movt	r2, #2
   18a2c:	vstr	d22, [r1]
   18a30:	movw	r1, #55341	; 0xd82d
   18a34:	movt	r1, #2
   18a38:	moveq	r2, r1
   18a3c:	movw	r1, #46934	; 0xb756
   18a40:	cmp	r0, #1
   18a44:	movne	r5, r2
   18a48:	movt	r1, #2
   18a4c:	mov	r0, r5
   18a50:	bl	11bd0 <strcmp@plt>
   18a54:	cmp	r0, #0
   18a58:	ldrne	r1, [r6, #8]!
   18a5c:	cmpne	r1, #0
   18a60:	bne	18a4c <__assert_fail@plt+0x69c0>
   18a64:	ldr	r6, [r6, #4]
   18a68:	movw	r1, #56663	; 0xdd57
   18a6c:	mov	r0, #0
   18a70:	mov	r2, #5
   18a74:	movt	r1, #2
   18a78:	bl	11cb4 <dcgettext@plt>
   18a7c:	movw	r2, #54683	; 0xd59b
   18a80:	movw	r3, #56686	; 0xdd6e
   18a84:	mov	r1, r0
   18a88:	mov	r0, #1
   18a8c:	movt	r2, #2
   18a90:	movt	r3, #2
   18a94:	bl	11f00 <__printf_chk@plt>
   18a98:	cmp	r6, #0
   18a9c:	mov	r0, #5
   18aa0:	mov	r1, #0
   18aa4:	moveq	r6, r5
   18aa8:	bl	11f60 <setlocale@plt>
   18aac:	cmp	r0, #0
   18ab0:	beq	18ae8 <__assert_fail@plt+0x6a5c>
   18ab4:	movw	r1, #56726	; 0xdd96
   18ab8:	mov	r2, #3
   18abc:	movt	r1, #2
   18ac0:	bl	1202c <strncmp@plt>
   18ac4:	cmp	r0, #0
   18ac8:	beq	18ae8 <__assert_fail@plt+0x6a5c>
   18acc:	movw	r1, #56730	; 0xdd9a
   18ad0:	mov	r0, #0
   18ad4:	mov	r2, #5
   18ad8:	movt	r1, #2
   18adc:	bl	11cb4 <dcgettext@plt>
   18ae0:	ldr	r1, [r7]
   18ae4:	bl	11b94 <fputs_unlocked@plt>
   18ae8:	movw	r1, #56801	; 0xdde1
   18aec:	mov	r0, #0
   18af0:	mov	r2, #5
   18af4:	movt	r1, #2
   18af8:	bl	11cb4 <dcgettext@plt>
   18afc:	movw	r2, #56686	; 0xdd6e
   18b00:	mov	r1, r0
   18b04:	mov	r0, #1
   18b08:	mov	r3, r5
   18b0c:	movt	r2, #2
   18b10:	bl	11f00 <__printf_chk@plt>
   18b14:	movw	r1, #56828	; 0xddfc
   18b18:	mov	r0, #0
   18b1c:	mov	r2, #5
   18b20:	movt	r1, #2
   18b24:	bl	11cb4 <dcgettext@plt>
   18b28:	movw	r3, #56125	; 0xdb3d
   18b2c:	mov	r1, r0
   18b30:	movw	r0, #56596	; 0xdd14
   18b34:	cmp	r6, r5
   18b38:	mov	r2, r6
   18b3c:	movt	r0, #2
   18b40:	movt	r3, #2
   18b44:	moveq	r3, r0
   18b48:	mov	r0, #1
   18b4c:	bl	11f00 <__printf_chk@plt>
   18b50:	mov	r0, r4
   18b54:	bl	11e88 <exit@plt>
   18b58:	movw	r0, #776	; 0x308
   18b5c:	movw	r1, #47038	; 0xb7be
   18b60:	mov	r2, #5
   18b64:	movt	r0, #4
   18b68:	movt	r1, #2
   18b6c:	ldr	r5, [r0]
   18b70:	mov	r0, #0
   18b74:	bl	11cb4 <dcgettext@plt>
   18b78:	mov	r2, r0
   18b7c:	movw	r0, #5048	; 0x13b8
   18b80:	mov	r1, #1
   18b84:	movt	r0, #4
   18b88:	ldr	r3, [r0]
   18b8c:	mov	r0, r5
   18b90:	bl	11f24 <__fprintf_chk@plt>
   18b94:	mov	r0, r4
   18b98:	bl	11e88 <exit@plt>
   18b9c:	push	{r4, sl, fp, lr}
   18ba0:	add	fp, sp, #8
   18ba4:	mov	r4, r0
   18ba8:	movw	r0, #4688	; 0x1250
   18bac:	movt	r0, #4
   18bb0:	ldrb	r1, [r0, #13]
   18bb4:	cmp	r1, #0
   18bb8:	bne	18bdc <__assert_fail@plt+0x6b50>
   18bbc:	mov	r1, #1
   18bc0:	strb	r1, [r0, #13]
   18bc4:	mov	r0, #1
   18bc8:	bl	11ea0 <tcgetpgrp@plt>
   18bcc:	cmp	r0, #0
   18bd0:	movge	r0, #1
   18bd4:	blge	18c40 <__assert_fail@plt+0x6bb4>
   18bd8:	bl	18bfc <__assert_fail@plt+0x6b70>
   18bdc:	movw	r0, #780	; 0x30c
   18be0:	ldr	r1, [r4]
   18be4:	mov	r2, #1
   18be8:	movt	r0, #4
   18bec:	ldr	r3, [r0]
   18bf0:	ldr	r0, [r4, #4]
   18bf4:	pop	{r4, sl, fp, lr}
   18bf8:	b	11c90 <fwrite_unlocked@plt>
   18bfc:	push	{r4, sl, fp, lr}
   18c00:	add	fp, sp, #8
   18c04:	movw	r4, #456	; 0x1c8
   18c08:	movt	r4, #4
   18c0c:	ldr	r0, [r4, #20]
   18c10:	cmp	r0, #0
   18c14:	beq	18c24 <__assert_fail@plt+0x6b98>
   18c18:	add	r0, r4, #16
   18c1c:	pop	{r4, sl, fp, lr}
   18c20:	b	18b9c <__assert_fail@plt+0x6b10>
   18c24:	mov	r0, r4
   18c28:	bl	18b9c <__assert_fail@plt+0x6b10>
   18c2c:	add	r0, r4, #24
   18c30:	bl	18b9c <__assert_fail@plt+0x6b10>
   18c34:	add	r0, r4, #8
   18c38:	pop	{r4, sl, fp, lr}
   18c3c:	b	18b9c <__assert_fail@plt+0x6b10>
   18c40:	push	{r4, sl, fp, lr}
   18c44:	add	fp, sp, #8
   18c48:	sub	sp, sp, #144	; 0x90
   18c4c:	cmp	r0, #0
   18c50:	beq	19104 <__assert_fail@plt+0x7078>
   18c54:	movw	r0, #1096	; 0x448
   18c58:	movt	r0, #4
   18c5c:	bl	11f6c <sigemptyset@plt>
   18c60:	add	r2, sp, #4
   18c64:	mov	r0, #20
   18c68:	mov	r1, #0
   18c6c:	bl	11d44 <sigaction@plt>
   18c70:	ldr	r0, [sp, #4]
   18c74:	cmp	r0, #1
   18c78:	beq	18c8c <__assert_fail@plt+0x6c00>
   18c7c:	movw	r0, #1096	; 0x448
   18c80:	mov	r1, #20
   18c84:	movt	r0, #4
   18c88:	bl	11e10 <sigaddset@plt>
   18c8c:	add	r2, sp, #4
   18c90:	mov	r0, #14
   18c94:	mov	r1, #0
   18c98:	bl	11d44 <sigaction@plt>
   18c9c:	ldr	r0, [sp, #4]
   18ca0:	cmp	r0, #1
   18ca4:	beq	18cb8 <__assert_fail@plt+0x6c2c>
   18ca8:	movw	r0, #1096	; 0x448
   18cac:	mov	r1, #14
   18cb0:	movt	r0, #4
   18cb4:	bl	11e10 <sigaddset@plt>
   18cb8:	add	r2, sp, #4
   18cbc:	mov	r0, #1
   18cc0:	mov	r1, #0
   18cc4:	bl	11d44 <sigaction@plt>
   18cc8:	ldr	r0, [sp, #4]
   18ccc:	cmp	r0, #1
   18cd0:	beq	18ce4 <__assert_fail@plt+0x6c58>
   18cd4:	movw	r0, #1096	; 0x448
   18cd8:	mov	r1, #1
   18cdc:	movt	r0, #4
   18ce0:	bl	11e10 <sigaddset@plt>
   18ce4:	add	r2, sp, #4
   18ce8:	mov	r0, #2
   18cec:	mov	r1, #0
   18cf0:	bl	11d44 <sigaction@plt>
   18cf4:	ldr	r0, [sp, #4]
   18cf8:	cmp	r0, #1
   18cfc:	beq	18d10 <__assert_fail@plt+0x6c84>
   18d00:	movw	r0, #1096	; 0x448
   18d04:	mov	r1, #2
   18d08:	movt	r0, #4
   18d0c:	bl	11e10 <sigaddset@plt>
   18d10:	add	r2, sp, #4
   18d14:	mov	r0, #13
   18d18:	mov	r1, #0
   18d1c:	bl	11d44 <sigaction@plt>
   18d20:	ldr	r0, [sp, #4]
   18d24:	cmp	r0, #1
   18d28:	beq	18d3c <__assert_fail@plt+0x6cb0>
   18d2c:	movw	r0, #1096	; 0x448
   18d30:	mov	r1, #13
   18d34:	movt	r0, #4
   18d38:	bl	11e10 <sigaddset@plt>
   18d3c:	add	r2, sp, #4
   18d40:	mov	r0, #3
   18d44:	mov	r1, #0
   18d48:	bl	11d44 <sigaction@plt>
   18d4c:	ldr	r0, [sp, #4]
   18d50:	cmp	r0, #1
   18d54:	beq	18d68 <__assert_fail@plt+0x6cdc>
   18d58:	movw	r0, #1096	; 0x448
   18d5c:	mov	r1, #3
   18d60:	movt	r0, #4
   18d64:	bl	11e10 <sigaddset@plt>
   18d68:	add	r2, sp, #4
   18d6c:	mov	r0, #15
   18d70:	mov	r1, #0
   18d74:	bl	11d44 <sigaction@plt>
   18d78:	ldr	r0, [sp, #4]
   18d7c:	cmp	r0, #1
   18d80:	beq	18d94 <__assert_fail@plt+0x6d08>
   18d84:	movw	r0, #1096	; 0x448
   18d88:	mov	r1, #15
   18d8c:	movt	r0, #4
   18d90:	bl	11e10 <sigaddset@plt>
   18d94:	add	r2, sp, #4
   18d98:	mov	r0, #29
   18d9c:	mov	r1, #0
   18da0:	bl	11d44 <sigaction@plt>
   18da4:	ldr	r0, [sp, #4]
   18da8:	cmp	r0, #1
   18dac:	beq	18dc0 <__assert_fail@plt+0x6d34>
   18db0:	movw	r0, #1096	; 0x448
   18db4:	mov	r1, #29
   18db8:	movt	r0, #4
   18dbc:	bl	11e10 <sigaddset@plt>
   18dc0:	add	r2, sp, #4
   18dc4:	mov	r0, #27
   18dc8:	mov	r1, #0
   18dcc:	bl	11d44 <sigaction@plt>
   18dd0:	ldr	r0, [sp, #4]
   18dd4:	cmp	r0, #1
   18dd8:	beq	18dec <__assert_fail@plt+0x6d60>
   18ddc:	movw	r0, #1096	; 0x448
   18de0:	mov	r1, #27
   18de4:	movt	r0, #4
   18de8:	bl	11e10 <sigaddset@plt>
   18dec:	add	r2, sp, #4
   18df0:	mov	r0, #26
   18df4:	mov	r1, #0
   18df8:	bl	11d44 <sigaction@plt>
   18dfc:	ldr	r0, [sp, #4]
   18e00:	cmp	r0, #1
   18e04:	beq	18e18 <__assert_fail@plt+0x6d8c>
   18e08:	movw	r0, #1096	; 0x448
   18e0c:	mov	r1, #26
   18e10:	movt	r0, #4
   18e14:	bl	11e10 <sigaddset@plt>
   18e18:	add	r2, sp, #4
   18e1c:	mov	r0, #24
   18e20:	mov	r1, #0
   18e24:	bl	11d44 <sigaction@plt>
   18e28:	ldr	r0, [sp, #4]
   18e2c:	cmp	r0, #1
   18e30:	beq	18e44 <__assert_fail@plt+0x6db8>
   18e34:	movw	r0, #1096	; 0x448
   18e38:	mov	r1, #24
   18e3c:	movt	r0, #4
   18e40:	bl	11e10 <sigaddset@plt>
   18e44:	add	r4, sp, #4
   18e48:	mov	r0, #25
   18e4c:	mov	r1, #0
   18e50:	mov	r2, r4
   18e54:	bl	11d44 <sigaction@plt>
   18e58:	ldr	r0, [sp, #4]
   18e5c:	cmp	r0, #1
   18e60:	beq	18e74 <__assert_fail@plt+0x6de8>
   18e64:	movw	r0, #1096	; 0x448
   18e68:	mov	r1, #25
   18e6c:	movt	r0, #4
   18e70:	bl	11e10 <sigaddset@plt>
   18e74:	add	r0, r4, #4
   18e78:	movw	r4, #1096	; 0x448
   18e7c:	mov	r2, #128	; 0x80
   18e80:	movt	r4, #4
   18e84:	mov	r1, r4
   18e88:	bl	11c60 <memcpy@plt>
   18e8c:	mov	r0, #268435456	; 0x10000000
   18e90:	mov	r1, #20
   18e94:	str	r0, [sp, #136]	; 0x88
   18e98:	mov	r0, r4
   18e9c:	bl	11ccc <sigismember@plt>
   18ea0:	cmp	r0, #0
   18ea4:	beq	18ec4 <__assert_fail@plt+0x6e38>
   18ea8:	movw	r0, #37572	; 0x92c4
   18eac:	add	r1, sp, #4
   18eb0:	mov	r2, #0
   18eb4:	movt	r0, #1
   18eb8:	str	r0, [sp, #4]
   18ebc:	mov	r0, #20
   18ec0:	bl	11d44 <sigaction@plt>
   18ec4:	movw	r0, #1096	; 0x448
   18ec8:	mov	r1, #14
   18ecc:	movt	r0, #4
   18ed0:	bl	11ccc <sigismember@plt>
   18ed4:	cmp	r0, #0
   18ed8:	beq	18ef8 <__assert_fail@plt+0x6e6c>
   18edc:	movw	r0, #37604	; 0x92e4
   18ee0:	add	r1, sp, #4
   18ee4:	mov	r2, #0
   18ee8:	movt	r0, #1
   18eec:	str	r0, [sp, #4]
   18ef0:	mov	r0, #14
   18ef4:	bl	11d44 <sigaction@plt>
   18ef8:	movw	r0, #1096	; 0x448
   18efc:	mov	r1, #1
   18f00:	movt	r0, #4
   18f04:	bl	11ccc <sigismember@plt>
   18f08:	cmp	r0, #0
   18f0c:	beq	18f2c <__assert_fail@plt+0x6ea0>
   18f10:	movw	r0, #37604	; 0x92e4
   18f14:	add	r1, sp, #4
   18f18:	mov	r2, #0
   18f1c:	movt	r0, #1
   18f20:	str	r0, [sp, #4]
   18f24:	mov	r0, #1
   18f28:	bl	11d44 <sigaction@plt>
   18f2c:	movw	r0, #1096	; 0x448
   18f30:	mov	r1, #2
   18f34:	movt	r0, #4
   18f38:	bl	11ccc <sigismember@plt>
   18f3c:	cmp	r0, #0
   18f40:	beq	18f60 <__assert_fail@plt+0x6ed4>
   18f44:	movw	r0, #37604	; 0x92e4
   18f48:	add	r1, sp, #4
   18f4c:	mov	r2, #0
   18f50:	movt	r0, #1
   18f54:	str	r0, [sp, #4]
   18f58:	mov	r0, #2
   18f5c:	bl	11d44 <sigaction@plt>
   18f60:	movw	r0, #1096	; 0x448
   18f64:	mov	r1, #13
   18f68:	movt	r0, #4
   18f6c:	bl	11ccc <sigismember@plt>
   18f70:	cmp	r0, #0
   18f74:	beq	18f94 <__assert_fail@plt+0x6f08>
   18f78:	movw	r0, #37604	; 0x92e4
   18f7c:	add	r1, sp, #4
   18f80:	mov	r2, #0
   18f84:	movt	r0, #1
   18f88:	str	r0, [sp, #4]
   18f8c:	mov	r0, #13
   18f90:	bl	11d44 <sigaction@plt>
   18f94:	movw	r0, #1096	; 0x448
   18f98:	mov	r1, #3
   18f9c:	movt	r0, #4
   18fa0:	bl	11ccc <sigismember@plt>
   18fa4:	cmp	r0, #0
   18fa8:	beq	18fc8 <__assert_fail@plt+0x6f3c>
   18fac:	movw	r0, #37604	; 0x92e4
   18fb0:	add	r1, sp, #4
   18fb4:	mov	r2, #0
   18fb8:	movt	r0, #1
   18fbc:	str	r0, [sp, #4]
   18fc0:	mov	r0, #3
   18fc4:	bl	11d44 <sigaction@plt>
   18fc8:	movw	r0, #1096	; 0x448
   18fcc:	mov	r1, #15
   18fd0:	movt	r0, #4
   18fd4:	bl	11ccc <sigismember@plt>
   18fd8:	cmp	r0, #0
   18fdc:	beq	18ffc <__assert_fail@plt+0x6f70>
   18fe0:	movw	r0, #37604	; 0x92e4
   18fe4:	add	r1, sp, #4
   18fe8:	mov	r2, #0
   18fec:	movt	r0, #1
   18ff0:	str	r0, [sp, #4]
   18ff4:	mov	r0, #15
   18ff8:	bl	11d44 <sigaction@plt>
   18ffc:	movw	r0, #1096	; 0x448
   19000:	mov	r1, #29
   19004:	movt	r0, #4
   19008:	bl	11ccc <sigismember@plt>
   1900c:	cmp	r0, #0
   19010:	beq	19030 <__assert_fail@plt+0x6fa4>
   19014:	movw	r0, #37604	; 0x92e4
   19018:	add	r1, sp, #4
   1901c:	mov	r2, #0
   19020:	movt	r0, #1
   19024:	str	r0, [sp, #4]
   19028:	mov	r0, #29
   1902c:	bl	11d44 <sigaction@plt>
   19030:	movw	r0, #1096	; 0x448
   19034:	mov	r1, #27
   19038:	movt	r0, #4
   1903c:	bl	11ccc <sigismember@plt>
   19040:	cmp	r0, #0
   19044:	beq	19064 <__assert_fail@plt+0x6fd8>
   19048:	movw	r0, #37604	; 0x92e4
   1904c:	add	r1, sp, #4
   19050:	mov	r2, #0
   19054:	movt	r0, #1
   19058:	str	r0, [sp, #4]
   1905c:	mov	r0, #27
   19060:	bl	11d44 <sigaction@plt>
   19064:	movw	r0, #1096	; 0x448
   19068:	mov	r1, #26
   1906c:	movt	r0, #4
   19070:	bl	11ccc <sigismember@plt>
   19074:	cmp	r0, #0
   19078:	beq	19098 <__assert_fail@plt+0x700c>
   1907c:	movw	r0, #37604	; 0x92e4
   19080:	add	r1, sp, #4
   19084:	mov	r2, #0
   19088:	movt	r0, #1
   1908c:	str	r0, [sp, #4]
   19090:	mov	r0, #26
   19094:	bl	11d44 <sigaction@plt>
   19098:	movw	r0, #1096	; 0x448
   1909c:	mov	r1, #24
   190a0:	movt	r0, #4
   190a4:	bl	11ccc <sigismember@plt>
   190a8:	cmp	r0, #0
   190ac:	beq	190cc <__assert_fail@plt+0x7040>
   190b0:	movw	r0, #37604	; 0x92e4
   190b4:	add	r1, sp, #4
   190b8:	mov	r2, #0
   190bc:	movt	r0, #1
   190c0:	str	r0, [sp, #4]
   190c4:	mov	r0, #24
   190c8:	bl	11d44 <sigaction@plt>
   190cc:	movw	r0, #1096	; 0x448
   190d0:	mov	r1, #25
   190d4:	movt	r0, #4
   190d8:	bl	11ccc <sigismember@plt>
   190dc:	cmp	r0, #0
   190e0:	beq	192bc <__assert_fail@plt+0x7230>
   190e4:	movw	r0, #37604	; 0x92e4
   190e8:	add	r1, sp, #4
   190ec:	mov	r2, #0
   190f0:	movt	r0, #1
   190f4:	str	r0, [sp, #4]
   190f8:	mov	r0, #25
   190fc:	bl	11d44 <sigaction@plt>
   19100:	b	192bc <__assert_fail@plt+0x7230>
   19104:	movw	r0, #1096	; 0x448
   19108:	mov	r1, #20
   1910c:	movt	r0, #4
   19110:	bl	11ccc <sigismember@plt>
   19114:	cmp	r0, #0
   19118:	beq	19128 <__assert_fail@plt+0x709c>
   1911c:	mov	r0, #20
   19120:	mov	r1, #0
   19124:	bl	11c84 <signal@plt>
   19128:	movw	r0, #1096	; 0x448
   1912c:	mov	r1, #14
   19130:	movt	r0, #4
   19134:	bl	11ccc <sigismember@plt>
   19138:	cmp	r0, #0
   1913c:	beq	1914c <__assert_fail@plt+0x70c0>
   19140:	mov	r0, #14
   19144:	mov	r1, #0
   19148:	bl	11c84 <signal@plt>
   1914c:	movw	r0, #1096	; 0x448
   19150:	mov	r1, #1
   19154:	movt	r0, #4
   19158:	bl	11ccc <sigismember@plt>
   1915c:	cmp	r0, #0
   19160:	beq	19170 <__assert_fail@plt+0x70e4>
   19164:	mov	r0, #1
   19168:	mov	r1, #0
   1916c:	bl	11c84 <signal@plt>
   19170:	movw	r0, #1096	; 0x448
   19174:	mov	r1, #2
   19178:	movt	r0, #4
   1917c:	bl	11ccc <sigismember@plt>
   19180:	cmp	r0, #0
   19184:	beq	19194 <__assert_fail@plt+0x7108>
   19188:	mov	r0, #2
   1918c:	mov	r1, #0
   19190:	bl	11c84 <signal@plt>
   19194:	movw	r0, #1096	; 0x448
   19198:	mov	r1, #13
   1919c:	movt	r0, #4
   191a0:	bl	11ccc <sigismember@plt>
   191a4:	cmp	r0, #0
   191a8:	beq	191b8 <__assert_fail@plt+0x712c>
   191ac:	mov	r0, #13
   191b0:	mov	r1, #0
   191b4:	bl	11c84 <signal@plt>
   191b8:	movw	r0, #1096	; 0x448
   191bc:	mov	r1, #3
   191c0:	movt	r0, #4
   191c4:	bl	11ccc <sigismember@plt>
   191c8:	cmp	r0, #0
   191cc:	beq	191dc <__assert_fail@plt+0x7150>
   191d0:	mov	r0, #3
   191d4:	mov	r1, #0
   191d8:	bl	11c84 <signal@plt>
   191dc:	movw	r0, #1096	; 0x448
   191e0:	mov	r1, #15
   191e4:	movt	r0, #4
   191e8:	bl	11ccc <sigismember@plt>
   191ec:	cmp	r0, #0
   191f0:	beq	19200 <__assert_fail@plt+0x7174>
   191f4:	mov	r0, #15
   191f8:	mov	r1, #0
   191fc:	bl	11c84 <signal@plt>
   19200:	movw	r0, #1096	; 0x448
   19204:	mov	r1, #29
   19208:	movt	r0, #4
   1920c:	bl	11ccc <sigismember@plt>
   19210:	cmp	r0, #0
   19214:	beq	19224 <__assert_fail@plt+0x7198>
   19218:	mov	r0, #29
   1921c:	mov	r1, #0
   19220:	bl	11c84 <signal@plt>
   19224:	movw	r0, #1096	; 0x448
   19228:	mov	r1, #27
   1922c:	movt	r0, #4
   19230:	bl	11ccc <sigismember@plt>
   19234:	cmp	r0, #0
   19238:	beq	19248 <__assert_fail@plt+0x71bc>
   1923c:	mov	r0, #27
   19240:	mov	r1, #0
   19244:	bl	11c84 <signal@plt>
   19248:	movw	r0, #1096	; 0x448
   1924c:	mov	r1, #26
   19250:	movt	r0, #4
   19254:	bl	11ccc <sigismember@plt>
   19258:	cmp	r0, #0
   1925c:	beq	1926c <__assert_fail@plt+0x71e0>
   19260:	mov	r0, #26
   19264:	mov	r1, #0
   19268:	bl	11c84 <signal@plt>
   1926c:	movw	r0, #1096	; 0x448
   19270:	mov	r1, #24
   19274:	movt	r0, #4
   19278:	bl	11ccc <sigismember@plt>
   1927c:	cmp	r0, #0
   19280:	beq	19290 <__assert_fail@plt+0x7204>
   19284:	mov	r0, #24
   19288:	mov	r1, #0
   1928c:	bl	11c84 <signal@plt>
   19290:	movw	r0, #1096	; 0x448
   19294:	mov	r1, #25
   19298:	movt	r0, #4
   1929c:	bl	11ccc <sigismember@plt>
   192a0:	cmp	r0, #0
   192a4:	beq	192bc <__assert_fail@plt+0x7230>
   192a8:	mov	r0, #25
   192ac:	mov	r1, #0
   192b0:	sub	sp, fp, #8
   192b4:	pop	{r4, sl, fp, lr}
   192b8:	b	11c84 <signal@plt>
   192bc:	sub	sp, fp, #8
   192c0:	pop	{r4, sl, fp, pc}
   192c4:	movw	r0, #4688	; 0x1250
   192c8:	movt	r0, #4
   192cc:	ldr	r1, [r0, #84]	; 0x54
   192d0:	cmp	r1, #0
   192d4:	ldreq	r1, [r0, #80]	; 0x50
   192d8:	addeq	r1, r1, #1
   192dc:	streq	r1, [r0, #80]	; 0x50
   192e0:	bx	lr
   192e4:	movw	r1, #4688	; 0x1250
   192e8:	movt	r1, #4
   192ec:	ldr	r2, [r1, #84]	; 0x54
   192f0:	cmp	r2, #0
   192f4:	streq	r0, [r1, #84]	; 0x54
   192f8:	bx	lr
   192fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19300:	add	fp, sp, #28
   19304:	sub	sp, sp, #4
   19308:	ldr	lr, [r0]
   1930c:	ldr	ip, [r1]
   19310:	mov	r4, #0
   19314:	mov	r8, #127	; 0x7f
   19318:	mov	r9, #0
   1931c:	mov	r6, #0
   19320:	cmp	r2, #0
   19324:	beq	197cc <__assert_fail@plt+0x7740>
   19328:	cmp	r4, #4
   1932c:	bhi	19c24 <__assert_fail@plt+0x7b98>
   19330:	add	r2, pc, #4
   19334:	mov	r7, r6
   19338:	ldr	pc, [r2, r4, lsl #2]
   1933c:	andeq	r9, r1, r0, asr r3
   19340:	muleq	r1, r8, r4
   19344:	andeq	r9, r1, r8, lsr r4
   19348:	andeq	r9, r1, r4, ror #8
   1934c:	andeq	r9, r1, r8, lsl r4
   19350:	ldrb	r5, [ip]
   19354:	mov	r4, #5
   19358:	sub	r2, r5, #58	; 0x3a
   1935c:	cmp	r2, #36	; 0x24
   19360:	bhi	19720 <__assert_fail@plt+0x7694>
   19364:	add	r6, pc, #0
   19368:	ldr	pc, [r6, r2, lsl #2]
   1936c:	andeq	r9, r1, r8, lsl #24
   19370:	andeq	r9, r1, r8, lsr #14
   19374:	andeq	r9, r1, r8, lsr #14
   19378:	andeq	r9, r1, r8, lsl #24
   1937c:	andeq	r9, r1, r8, lsr #14
   19380:	andeq	r9, r1, r8, lsr #14
   19384:	andeq	r9, r1, r8, lsr #14
   19388:	andeq	r9, r1, r8, lsr #14
   1938c:	andeq	r9, r1, r8, lsr #14
   19390:	andeq	r9, r1, r8, lsr #14
   19394:	andeq	r9, r1, r8, lsr #14
   19398:	andeq	r9, r1, r8, lsr #14
   1939c:	andeq	r9, r1, r8, lsr #14
   193a0:	andeq	r9, r1, r8, lsr #14
   193a4:	andeq	r9, r1, r8, lsr #14
   193a8:	andeq	r9, r1, r8, lsr #14
   193ac:	andeq	r9, r1, r8, lsr #14
   193b0:	andeq	r9, r1, r8, lsr #14
   193b4:	andeq	r9, r1, r8, lsr #14
   193b8:	andeq	r9, r1, r8, lsr #14
   193bc:	andeq	r9, r1, r8, lsr #14
   193c0:	andeq	r9, r1, r8, lsr #14
   193c4:	andeq	r9, r1, r8, lsr #14
   193c8:	andeq	r9, r1, r8, lsr #14
   193cc:	andeq	r9, r1, r8, lsr #14
   193d0:	andeq	r9, r1, r8, lsr #14
   193d4:	andeq	r9, r1, r8, lsr #14
   193d8:	andeq	r9, r1, r8, lsr #14
   193dc:	andeq	r9, r1, r8, lsr #14
   193e0:	andeq	r9, r1, r8, lsr #14
   193e4:	andeq	r9, r1, r8, lsr #14
   193e8:	andeq	r9, r1, r8, lsr #14
   193ec:	andeq	r9, r1, r8, lsr #14
   193f0:	andeq	r9, r1, r8, lsr #14
   193f4:	andeq	r9, r1, r0, lsl #8
   193f8:	andeq	r9, r1, r8, lsr #14
   193fc:	andeq	r9, r1, ip, ror #13
   19400:	add	ip, ip, #1
   19404:	mov	r4, #1
   19408:	mov	r6, r7
   1940c:	cmp	r4, #5
   19410:	bcc	19328 <__assert_fail@plt+0x729c>
   19414:	b	19c08 <__assert_fail@plt+0x7b7c>
   19418:	ldrb	r2, [ip]
   1941c:	sub	r4, r2, #64	; 0x40
   19420:	uxtb	r4, r4
   19424:	cmp	r4, #63	; 0x3f
   19428:	bcs	196bc <__assert_fail@plt+0x7630>
   1942c:	and	r2, r2, #31
   19430:	strb	r2, [lr], #1
   19434:	b	1972c <__assert_fail@plt+0x76a0>
   19438:	ldrb	r2, [ip]
   1943c:	and	r4, r2, #248	; 0xf8
   19440:	cmp	r4, #48	; 0x30
   19444:	bne	196b4 <__assert_fail@plt+0x7628>
   19448:	add	r2, r2, r7, lsl #3
   1944c:	add	ip, ip, #1
   19450:	mov	r4, #2
   19454:	sub	r6, r2, #48	; 0x30
   19458:	cmp	r4, #5
   1945c:	bcc	19328 <__assert_fail@plt+0x729c>
   19460:	b	19c08 <__assert_fail@plt+0x7b7c>
   19464:	ldrb	r4, [ip]
   19468:	sub	r2, r4, #48	; 0x30
   1946c:	cmp	r2, #10
   19470:	bcc	196e0 <__assert_fail@plt+0x7654>
   19474:	sub	r2, r4, #97	; 0x61
   19478:	cmp	r2, #6
   1947c:	bcc	19704 <__assert_fail@plt+0x7678>
   19480:	sub	r2, r4, #65	; 0x41
   19484:	cmp	r2, #5
   19488:	bhi	196b4 <__assert_fail@plt+0x7628>
   1948c:	add	r2, r4, r7, lsl #4
   19490:	sub	r6, r2, #55	; 0x37
   19494:	b	1970c <__assert_fail@plt+0x7680>
   19498:	ldrb	r2, [ip]
   1949c:	cmp	r2, #120	; 0x78
   194a0:	bhi	19760 <__assert_fail@plt+0x76d4>
   194a4:	add	r5, pc, #12
   194a8:	mov	sl, #7
   194ac:	mov	r4, #3
   194b0:	mov	r6, #0
   194b4:	ldr	pc, [r5, r2, lsl #2]
   194b8:	andeq	r9, r1, r8, asr #14
   194bc:	andeq	r9, r1, r0, ror #14
   194c0:	andeq	r9, r1, r0, ror #14
   194c4:	andeq	r9, r1, r0, ror #14
   194c8:	andeq	r9, r1, r0, ror #14
   194cc:	andeq	r9, r1, r0, ror #14
   194d0:	andeq	r9, r1, r0, ror #14
   194d4:	andeq	r9, r1, r0, ror #14
   194d8:	andeq	r9, r1, r0, ror #14
   194dc:	andeq	r9, r1, r0, ror #14
   194e0:	andeq	r9, r1, r0, ror #14
   194e4:	andeq	r9, r1, r0, ror #14
   194e8:	andeq	r9, r1, r0, ror #14
   194ec:	andeq	r9, r1, r0, ror #14
   194f0:	andeq	r9, r1, r0, ror #14
   194f4:	andeq	r9, r1, r0, ror #14
   194f8:	andeq	r9, r1, r0, ror #14
   194fc:	andeq	r9, r1, r0, ror #14
   19500:	andeq	r9, r1, r0, ror #14
   19504:	andeq	r9, r1, r0, ror #14
   19508:	andeq	r9, r1, r0, ror #14
   1950c:	andeq	r9, r1, r0, ror #14
   19510:	andeq	r9, r1, r0, ror #14
   19514:	andeq	r9, r1, r0, ror #14
   19518:	andeq	r9, r1, r0, ror #14
   1951c:	andeq	r9, r1, r0, ror #14
   19520:	andeq	r9, r1, r0, ror #14
   19524:	andeq	r9, r1, r0, ror #14
   19528:	andeq	r9, r1, r0, ror #14
   1952c:	andeq	r9, r1, r0, ror #14
   19530:	andeq	r9, r1, r0, ror #14
   19534:	andeq	r9, r1, r0, ror #14
   19538:	andeq	r9, r1, r0, ror #14
   1953c:	andeq	r9, r1, r0, ror #14
   19540:	andeq	r9, r1, r0, ror #14
   19544:	andeq	r9, r1, r0, ror #14
   19548:	andeq	r9, r1, r0, ror #14
   1954c:	andeq	r9, r1, r0, ror #14
   19550:	andeq	r9, r1, r0, ror #14
   19554:	andeq	r9, r1, r0, ror #14
   19558:	andeq	r9, r1, r0, ror #14
   1955c:	andeq	r9, r1, r0, ror #14
   19560:	andeq	r9, r1, r0, ror #14
   19564:	andeq	r9, r1, r0, ror #14
   19568:	andeq	r9, r1, r0, ror #14
   1956c:	andeq	r9, r1, r0, ror #14
   19570:	andeq	r9, r1, r0, ror #14
   19574:	andeq	r9, r1, r0, ror #14
   19578:	muleq	r1, ip, r6
   1957c:	muleq	r1, ip, r6
   19580:	muleq	r1, ip, r6
   19584:	muleq	r1, ip, r6
   19588:	muleq	r1, ip, r6
   1958c:	muleq	r1, ip, r6
   19590:	muleq	r1, ip, r6
   19594:	muleq	r1, ip, r6
   19598:	andeq	r9, r1, r0, ror #14
   1959c:	andeq	r9, r1, r0, ror #14
   195a0:	andeq	r9, r1, r0, ror #14
   195a4:	andeq	r9, r1, r0, ror #14
   195a8:	andeq	r9, r1, r0, ror #14
   195ac:	andeq	r9, r1, r0, ror #14
   195b0:	andeq	r9, r1, r0, ror #14
   195b4:	andeq	r9, r1, r8, ror #14
   195b8:	andeq	r9, r1, r0, ror #14
   195bc:	andeq	r9, r1, r0, ror #14
   195c0:	andeq	r9, r1, r0, ror #14
   195c4:	andeq	r9, r1, r0, ror #14
   195c8:	andeq	r9, r1, r0, ror #14
   195cc:	andeq	r9, r1, r0, ror #14
   195d0:	andeq	r9, r1, r0, ror #14
   195d4:	andeq	r9, r1, r0, ror #14
   195d8:	andeq	r9, r1, r0, ror #14
   195dc:	andeq	r9, r1, r0, ror #14
   195e0:	andeq	r9, r1, r0, ror #14
   195e4:	andeq	r9, r1, r0, ror #14
   195e8:	andeq	r9, r1, r0, ror #14
   195ec:	andeq	r9, r1, r0, ror #14
   195f0:	andeq	r9, r1, r0, ror #14
   195f4:	andeq	r9, r1, r0, ror #14
   195f8:	andeq	r9, r1, r0, ror #14
   195fc:	andeq	r9, r1, r0, ror #14
   19600:	andeq	r9, r1, r0, ror #14
   19604:	andeq	r9, r1, r0, ror #14
   19608:	andeq	r9, r1, r0, ror #14
   1960c:	andeq	r9, r1, r0, ror #14
   19610:	andeq	r9, r1, r0, ror #14
   19614:	andeq	r9, r1, r0, ror #14
   19618:			; <UNDEFINED> instruction: 0x000197bc
   1961c:	andeq	r9, r1, r0, ror #14
   19620:	andeq	r9, r1, r0, ror #14
   19624:	andeq	r9, r1, r0, ror #14
   19628:	andeq	r9, r1, r0, ror #14
   1962c:	andeq	r9, r1, r0, ror #14
   19630:	andeq	r9, r1, r0, ror #14
   19634:	andeq	r9, r1, r0, ror r7
   19638:	andeq	r9, r1, r0, ror #14
   1963c:	andeq	r9, r1, ip, lsr #15
   19640:	andeq	r9, r1, r8, ror r7
   19644:	andeq	r9, r1, r0, ror #14
   19648:	andeq	r9, r1, r0, ror #14
   1964c:	andeq	r9, r1, r0, lsl #15
   19650:	andeq	r9, r1, r8, lsl #15
   19654:	andeq	r9, r1, r0, ror #14
   19658:	andeq	r9, r1, r0, ror #14
   1965c:	andeq	r9, r1, r0, ror #14
   19660:	andeq	r9, r1, r0, ror #14
   19664:	andeq	r9, r1, r0, ror #14
   19668:	andeq	r9, r1, r0, ror #14
   1966c:	andeq	r9, r1, r0, ror #14
   19670:	muleq	r1, r0, r7
   19674:	andeq	r9, r1, r0, ror #14
   19678:	andeq	r9, r1, r0, ror #14
   1967c:	andeq	r9, r1, r0, ror #14
   19680:	muleq	r1, r8, r7
   19684:	andeq	r9, r1, r0, ror #14
   19688:	andeq	r9, r1, r0, lsr #15
   1968c:	andeq	r9, r1, r0, ror #14
   19690:	andeq	r9, r1, r8, lsr #15
   19694:	andeq	r9, r1, r0, ror #14
   19698:			; <UNDEFINED> instruction: 0x000197bc
   1969c:	sub	r6, r2, #48	; 0x30
   196a0:	mov	r4, #2
   196a4:	add	ip, ip, #1
   196a8:	cmp	r4, #5
   196ac:	bcc	19328 <__assert_fail@plt+0x729c>
   196b0:	b	19c08 <__assert_fail@plt+0x7b7c>
   196b4:	strb	r7, [lr], #1
   196b8:	b	196c8 <__assert_fail@plt+0x763c>
   196bc:	cmp	r2, #63	; 0x3f
   196c0:	bne	19c04 <__assert_fail@plt+0x7b78>
   196c4:	strb	r8, [lr], #1
   196c8:	add	r9, r9, #1
   196cc:	mov	r4, #0
   196d0:	mov	r6, r7
   196d4:	cmp	r4, #5
   196d8:	bcc	19328 <__assert_fail@plt+0x729c>
   196dc:	b	19c08 <__assert_fail@plt+0x7b7c>
   196e0:	add	r2, r4, r7, lsl #4
   196e4:	sub	r6, r2, #48	; 0x30
   196e8:	b	1970c <__assert_fail@plt+0x7680>
   196ec:	add	ip, ip, #1
   196f0:	mov	r4, #4
   196f4:	mov	r6, r7
   196f8:	cmp	r4, #5
   196fc:	bcc	19328 <__assert_fail@plt+0x729c>
   19700:	b	19c08 <__assert_fail@plt+0x7b7c>
   19704:	add	r2, r4, r7, lsl #4
   19708:	sub	r6, r2, #87	; 0x57
   1970c:	add	ip, ip, #1
   19710:	mov	r4, #3
   19714:	cmp	r4, #5
   19718:	bcc	19328 <__assert_fail@plt+0x729c>
   1971c:	b	19c08 <__assert_fail@plt+0x7b7c>
   19720:	cmp	r5, #0
   19724:	beq	19c08 <__assert_fail@plt+0x7b7c>
   19728:	strb	r5, [lr], #1
   1972c:	add	r9, r9, #1
   19730:	add	ip, ip, #1
   19734:	mov	r4, #0
   19738:	mov	r6, r7
   1973c:	cmp	r4, #5
   19740:	bcc	19328 <__assert_fail@plt+0x729c>
   19744:	b	19c08 <__assert_fail@plt+0x7b7c>
   19748:	mov	r4, #6
   1974c:	mov	r6, r7
   19750:	add	ip, ip, #1
   19754:	cmp	r4, #5
   19758:	bcc	19328 <__assert_fail@plt+0x729c>
   1975c:	b	19c08 <__assert_fail@plt+0x7b7c>
   19760:	mov	sl, r2
   19764:	b	197ac <__assert_fail@plt+0x7720>
   19768:	mov	sl, #127	; 0x7f
   1976c:	b	197ac <__assert_fail@plt+0x7720>
   19770:	mov	sl, #32
   19774:	b	197ac <__assert_fail@plt+0x7720>
   19778:	mov	sl, #8
   1977c:	b	197ac <__assert_fail@plt+0x7720>
   19780:	mov	sl, #27
   19784:	b	197ac <__assert_fail@plt+0x7720>
   19788:	mov	sl, #12
   1978c:	b	197ac <__assert_fail@plt+0x7720>
   19790:	mov	sl, #10
   19794:	b	197ac <__assert_fail@plt+0x7720>
   19798:	mov	sl, #13
   1979c:	b	197ac <__assert_fail@plt+0x7720>
   197a0:	mov	sl, #9
   197a4:	b	197ac <__assert_fail@plt+0x7720>
   197a8:	mov	sl, #11
   197ac:	strb	sl, [lr], #1
   197b0:	add	r9, r9, #1
   197b4:	mov	r4, #0
   197b8:	mov	r6, sl
   197bc:	add	ip, ip, #1
   197c0:	cmp	r4, #5
   197c4:	bcc	19328 <__assert_fail@plt+0x729c>
   197c8:	b	19c08 <__assert_fail@plt+0x7b7c>
   197cc:	cmp	r4, #4
   197d0:	bhi	19c24 <__assert_fail@plt+0x7b98>
   197d4:	add	r2, pc, #4
   197d8:	mov	r7, r6
   197dc:	ldr	pc, [r2, r4, lsl #2]
   197e0:	strdeq	r9, [r1], -r4
   197e4:	andeq	r9, r1, ip, ror #16
   197e8:	andeq	r9, r1, r0, asr #16
   197ec:	andeq	r9, r1, r8, lsl #21
   197f0:	andeq	r9, r1, r0, lsr #16
   197f4:	ldrb	r5, [ip]
   197f8:	cmp	r5, #93	; 0x5d
   197fc:	bgt	19af8 <__assert_fail@plt+0x7a6c>
   19800:	cmp	r5, #92	; 0x5c
   19804:	bne	19b50 <__assert_fail@plt+0x7ac4>
   19808:	add	ip, ip, #1
   1980c:	mov	r4, #1
   19810:	mov	r6, r7
   19814:	cmp	r4, #5
   19818:	bcc	197cc <__assert_fail@plt+0x7740>
   1981c:	b	19c08 <__assert_fail@plt+0x7b7c>
   19820:	ldrb	r2, [ip]
   19824:	sub	r4, r2, #64	; 0x40
   19828:	uxtb	r4, r4
   1982c:	cmp	r4, #62	; 0x3e
   19830:	bhi	19ad4 <__assert_fail@plt+0x7a48>
   19834:	and	r2, r2, #31
   19838:	strb	r2, [lr], #1
   1983c:	b	19b64 <__assert_fail@plt+0x7ad8>
   19840:	ldrb	r2, [ip]
   19844:	and	r4, r2, #248	; 0xf8
   19848:	cmp	r4, #48	; 0x30
   1984c:	bne	19acc <__assert_fail@plt+0x7a40>
   19850:	add	r2, r2, r7, lsl #3
   19854:	add	ip, ip, #1
   19858:	mov	r4, #2
   1985c:	sub	r6, r2, #48	; 0x30
   19860:	cmp	r4, #5
   19864:	bcc	197cc <__assert_fail@plt+0x7740>
   19868:	b	19c08 <__assert_fail@plt+0x7b7c>
   1986c:	ldrb	r5, [ip]
   19870:	cmp	r5, #120	; 0x78
   19874:	bhi	19b80 <__assert_fail@plt+0x7af4>
   19878:	add	r2, pc, #12
   1987c:	mov	sl, #7
   19880:	mov	r4, #3
   19884:	mov	r6, #0
   19888:	ldr	pc, [r2, r5, lsl #2]
   1988c:	muleq	r1, r0, fp
   19890:	andeq	r9, r1, r0, lsl #23
   19894:	andeq	r9, r1, r0, lsl #23
   19898:	andeq	r9, r1, r0, lsl #23
   1989c:	andeq	r9, r1, r0, lsl #23
   198a0:	andeq	r9, r1, r0, lsl #23
   198a4:	andeq	r9, r1, r0, lsl #23
   198a8:	andeq	r9, r1, r0, lsl #23
   198ac:	andeq	r9, r1, r0, lsl #23
   198b0:	andeq	r9, r1, r0, lsl #23
   198b4:	andeq	r9, r1, r0, lsl #23
   198b8:	andeq	r9, r1, r0, lsl #23
   198bc:	andeq	r9, r1, r0, lsl #23
   198c0:	andeq	r9, r1, r0, lsl #23
   198c4:	andeq	r9, r1, r0, lsl #23
   198c8:	andeq	r9, r1, r0, lsl #23
   198cc:	andeq	r9, r1, r0, lsl #23
   198d0:	andeq	r9, r1, r0, lsl #23
   198d4:	andeq	r9, r1, r0, lsl #23
   198d8:	andeq	r9, r1, r0, lsl #23
   198dc:	andeq	r9, r1, r0, lsl #23
   198e0:	andeq	r9, r1, r0, lsl #23
   198e4:	andeq	r9, r1, r0, lsl #23
   198e8:	andeq	r9, r1, r0, lsl #23
   198ec:	andeq	r9, r1, r0, lsl #23
   198f0:	andeq	r9, r1, r0, lsl #23
   198f4:	andeq	r9, r1, r0, lsl #23
   198f8:	andeq	r9, r1, r0, lsl #23
   198fc:	andeq	r9, r1, r0, lsl #23
   19900:	andeq	r9, r1, r0, lsl #23
   19904:	andeq	r9, r1, r0, lsl #23
   19908:	andeq	r9, r1, r0, lsl #23
   1990c:	andeq	r9, r1, r0, lsl #23
   19910:	andeq	r9, r1, r0, lsl #23
   19914:	andeq	r9, r1, r0, lsl #23
   19918:	andeq	r9, r1, r0, lsl #23
   1991c:	andeq	r9, r1, r0, lsl #23
   19920:	andeq	r9, r1, r0, lsl #23
   19924:	andeq	r9, r1, r0, lsl #23
   19928:	andeq	r9, r1, r0, lsl #23
   1992c:	andeq	r9, r1, r0, lsl #23
   19930:	andeq	r9, r1, r0, lsl #23
   19934:	andeq	r9, r1, r0, lsl #23
   19938:	andeq	r9, r1, r0, lsl #23
   1993c:	andeq	r9, r1, r0, lsl #23
   19940:	andeq	r9, r1, r0, lsl #23
   19944:	andeq	r9, r1, r0, lsl #23
   19948:	andeq	r9, r1, r0, lsl #23
   1994c:	andeq	r9, r1, r0, ror sl
   19950:	andeq	r9, r1, r0, ror sl
   19954:	andeq	r9, r1, r0, ror sl
   19958:	andeq	r9, r1, r0, ror sl
   1995c:	andeq	r9, r1, r0, ror sl
   19960:	andeq	r9, r1, r0, ror sl
   19964:	andeq	r9, r1, r0, ror sl
   19968:	andeq	r9, r1, r0, ror sl
   1996c:	andeq	r9, r1, r0, lsl #23
   19970:	andeq	r9, r1, r0, lsl #23
   19974:	andeq	r9, r1, r0, lsl #23
   19978:	andeq	r9, r1, r0, lsl #23
   1997c:	andeq	r9, r1, r0, lsl #23
   19980:	andeq	r9, r1, r0, lsl #23
   19984:	andeq	r9, r1, r0, lsl #23
   19988:	andeq	r9, r1, r8, lsr #23
   1998c:	andeq	r9, r1, r0, lsl #23
   19990:	andeq	r9, r1, r0, lsl #23
   19994:	andeq	r9, r1, r0, lsl #23
   19998:	andeq	r9, r1, r0, lsl #23
   1999c:	andeq	r9, r1, r0, lsl #23
   199a0:	andeq	r9, r1, r0, lsl #23
   199a4:	andeq	r9, r1, r0, lsl #23
   199a8:	andeq	r9, r1, r0, lsl #23
   199ac:	andeq	r9, r1, r0, lsl #23
   199b0:	andeq	r9, r1, r0, lsl #23
   199b4:	andeq	r9, r1, r0, lsl #23
   199b8:	andeq	r9, r1, r0, lsl #23
   199bc:	andeq	r9, r1, r0, lsl #23
   199c0:	andeq	r9, r1, r0, lsl #23
   199c4:	andeq	r9, r1, r0, lsl #23
   199c8:	andeq	r9, r1, r0, lsl #23
   199cc:	andeq	r9, r1, r0, lsl #23
   199d0:	andeq	r9, r1, r0, lsl #23
   199d4:	andeq	r9, r1, r0, lsl #23
   199d8:	andeq	r9, r1, r0, lsl #23
   199dc:	andeq	r9, r1, r0, lsl #23
   199e0:	andeq	r9, r1, r0, lsl #23
   199e4:	andeq	r9, r1, r0, lsl #23
   199e8:	andeq	r9, r1, r0, lsl #23
   199ec:	strdeq	r9, [r1], -r4
   199f0:	andeq	r9, r1, r0, lsl #23
   199f4:	andeq	r9, r1, r0, lsl #23
   199f8:	andeq	r9, r1, r0, lsl #23
   199fc:	andeq	r9, r1, r0, lsl #23
   19a00:	andeq	r9, r1, r0, lsl #23
   19a04:	andeq	r9, r1, r0, lsl #23
   19a08:			; <UNDEFINED> instruction: 0x00019bb0
   19a0c:	andeq	r9, r1, r0, lsl #23
   19a10:	andeq	r9, r1, r4, ror #23
   19a14:			; <UNDEFINED> instruction: 0x00019bb8
   19a18:	andeq	r9, r1, r0, lsl #23
   19a1c:	andeq	r9, r1, r0, lsl #23
   19a20:	andeq	r9, r1, r0, asr #23
   19a24:	andeq	r9, r1, r8, asr #23
   19a28:	andeq	r9, r1, r0, lsl #23
   19a2c:	andeq	r9, r1, r0, lsl #23
   19a30:	andeq	r9, r1, r0, lsl #23
   19a34:	andeq	r9, r1, r0, lsl #23
   19a38:	andeq	r9, r1, r0, lsl #23
   19a3c:	andeq	r9, r1, r0, lsl #23
   19a40:	andeq	r9, r1, r0, lsl #23
   19a44:	ldrdeq	r9, [r1], -r0
   19a48:	andeq	r9, r1, r0, lsl #23
   19a4c:	andeq	r9, r1, r0, lsl #23
   19a50:	andeq	r9, r1, r0, lsl #23
   19a54:	ldrdeq	r9, [r1], -r8
   19a58:	andeq	r9, r1, r0, lsl #23
   19a5c:	andeq	r9, r1, r8, lsl #23
   19a60:	andeq	r9, r1, r0, lsl #23
   19a64:	andeq	r9, r1, r0, ror #23
   19a68:	andeq	r9, r1, r0, lsl #23
   19a6c:	strdeq	r9, [r1], -r4
   19a70:	sub	r6, r5, #48	; 0x30
   19a74:	mov	r4, #2
   19a78:	add	ip, ip, #1
   19a7c:	cmp	r4, #5
   19a80:	bcc	197cc <__assert_fail@plt+0x7740>
   19a84:	b	19c08 <__assert_fail@plt+0x7b7c>
   19a88:	ldrb	r4, [ip]
   19a8c:	sub	r2, r4, #48	; 0x30
   19a90:	cmp	r2, #10
   19a94:	bcc	19b18 <__assert_fail@plt+0x7a8c>
   19a98:	sub	r2, r4, #65	; 0x41
   19a9c:	cmp	r2, #6
   19aa0:	bcc	19b34 <__assert_fail@plt+0x7aa8>
   19aa4:	sub	r2, r4, #97	; 0x61
   19aa8:	cmp	r2, #6
   19aac:	bcs	19acc <__assert_fail@plt+0x7a40>
   19ab0:	add	r2, r4, r7, lsl #4
   19ab4:	sub	r6, r2, #87	; 0x57
   19ab8:	add	ip, ip, #1
   19abc:	mov	r4, #3
   19ac0:	cmp	r4, #5
   19ac4:	bcc	197cc <__assert_fail@plt+0x7740>
   19ac8:	b	19c08 <__assert_fail@plt+0x7b7c>
   19acc:	strb	r7, [lr], #1
   19ad0:	b	19ae0 <__assert_fail@plt+0x7a54>
   19ad4:	cmp	r2, #63	; 0x3f
   19ad8:	bne	19c04 <__assert_fail@plt+0x7b78>
   19adc:	strb	r8, [lr], #1
   19ae0:	add	r9, r9, #1
   19ae4:	mov	r4, #0
   19ae8:	mov	r6, r7
   19aec:	cmp	r4, #5
   19af0:	bcc	197cc <__assert_fail@plt+0x7740>
   19af4:	b	19c08 <__assert_fail@plt+0x7b7c>
   19af8:	cmp	r5, #94	; 0x5e
   19afc:	bne	19b60 <__assert_fail@plt+0x7ad4>
   19b00:	add	ip, ip, #1
   19b04:	mov	r4, #4
   19b08:	mov	r6, r7
   19b0c:	cmp	r4, #5
   19b10:	bcc	197cc <__assert_fail@plt+0x7740>
   19b14:	b	19c08 <__assert_fail@plt+0x7b7c>
   19b18:	add	r2, r4, r7, lsl #4
   19b1c:	sub	r6, r2, #48	; 0x30
   19b20:	add	ip, ip, #1
   19b24:	mov	r4, #3
   19b28:	cmp	r4, #5
   19b2c:	bcc	197cc <__assert_fail@plt+0x7740>
   19b30:	b	19c08 <__assert_fail@plt+0x7b7c>
   19b34:	add	r2, r4, r7, lsl #4
   19b38:	sub	r6, r2, #55	; 0x37
   19b3c:	add	ip, ip, #1
   19b40:	mov	r4, #3
   19b44:	cmp	r4, #5
   19b48:	bcc	197cc <__assert_fail@plt+0x7740>
   19b4c:	b	19c08 <__assert_fail@plt+0x7b7c>
   19b50:	cmp	r5, #0
   19b54:	mov	r4, #5
   19b58:	cmpne	r5, #58	; 0x3a
   19b5c:	beq	19c08 <__assert_fail@plt+0x7b7c>
   19b60:	strb	r5, [lr], #1
   19b64:	add	r9, r9, #1
   19b68:	add	ip, ip, #1
   19b6c:	mov	r4, #0
   19b70:	mov	r6, r7
   19b74:	cmp	r4, #5
   19b78:	bcc	197cc <__assert_fail@plt+0x7740>
   19b7c:	b	19c08 <__assert_fail@plt+0x7b7c>
   19b80:	mov	sl, r5
   19b84:	b	19be4 <__assert_fail@plt+0x7b58>
   19b88:	mov	sl, #9
   19b8c:	b	19be4 <__assert_fail@plt+0x7b58>
   19b90:	mov	r4, #6
   19b94:	mov	r6, r7
   19b98:	add	ip, ip, #1
   19b9c:	cmp	r4, #5
   19ba0:	bcc	197cc <__assert_fail@plt+0x7740>
   19ba4:	b	19c08 <__assert_fail@plt+0x7b7c>
   19ba8:	mov	sl, #127	; 0x7f
   19bac:	b	19be4 <__assert_fail@plt+0x7b58>
   19bb0:	mov	sl, #32
   19bb4:	b	19be4 <__assert_fail@plt+0x7b58>
   19bb8:	mov	sl, #8
   19bbc:	b	19be4 <__assert_fail@plt+0x7b58>
   19bc0:	mov	sl, #27
   19bc4:	b	19be4 <__assert_fail@plt+0x7b58>
   19bc8:	mov	sl, #12
   19bcc:	b	19be4 <__assert_fail@plt+0x7b58>
   19bd0:	mov	sl, #10
   19bd4:	b	19be4 <__assert_fail@plt+0x7b58>
   19bd8:	mov	sl, #13
   19bdc:	b	19be4 <__assert_fail@plt+0x7b58>
   19be0:	mov	sl, #11
   19be4:	strb	sl, [lr], #1
   19be8:	add	r9, r9, #1
   19bec:	mov	r4, #0
   19bf0:	mov	r6, sl
   19bf4:	add	ip, ip, #1
   19bf8:	cmp	r4, #5
   19bfc:	bcc	197cc <__assert_fail@plt+0x7740>
   19c00:	b	19c08 <__assert_fail@plt+0x7b7c>
   19c04:	mov	r4, #6
   19c08:	str	lr, [r0]
   19c0c:	subs	r0, r4, #6
   19c10:	str	ip, [r1]
   19c14:	str	r9, [r3]
   19c18:	movwne	r0, #1
   19c1c:	sub	sp, fp, #28
   19c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c24:	bl	12038 <abort@plt>
   19c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c2c:	add	fp, sp, #28
   19c30:	sub	sp, sp, #36	; 0x24
   19c34:	sub	sp, sp, #8192	; 0x2000
   19c38:	mov	r7, r0
   19c3c:	add	r0, sp, #32
   19c40:	mov	sl, r3
   19c44:	mov	r3, r2
   19c48:	mov	r2, r1
   19c4c:	mov	r1, #0
   19c50:	str	r0, [sp, #28]
   19c54:	add	r0, sp, #27
   19c58:	str	r1, [sp]
   19c5c:	mov	r1, r7
   19c60:	str	r7, [sp, #16]
   19c64:	str	r0, [sp, #4]
   19c68:	add	r0, sp, #28
   19c6c:	bl	1b484 <__assert_fail@plt+0x93f8>
   19c70:	ldrb	r9, [sp, #27]
   19c74:	str	r0, [sp, #20]
   19c78:	cmp	r9, #0
   19c7c:	ldrne	r0, [fp, #8]
   19c80:	cmpne	r0, #0
   19c84:	bne	19ea4 <__assert_fail@plt+0x7e18>
   19c88:	cmp	sl, #0
   19c8c:	bne	19ef0 <__assert_fail@plt+0x7e64>
   19c90:	ldr	r0, [fp, #16]
   19c94:	cmp	r0, #0
   19c98:	beq	1b038 <__assert_fail@plt+0x8fac>
   19c9c:	movw	r4, #4688	; 0x1250
   19ca0:	mov	r8, #0
   19ca4:	movt	r4, #4
   19ca8:	ldrb	r0, [r4, #22]
   19cac:	cmp	r0, #0
   19cb0:	beq	19cfc <__assert_fail@plt+0x7c70>
   19cb4:	cmp	r9, #0
   19cb8:	bne	19cfc <__assert_fail@plt+0x7c70>
   19cbc:	ldrb	r0, [r4, #25]
   19cc0:	cmp	r0, #0
   19cc4:	beq	19cfc <__assert_fail@plt+0x7c70>
   19cc8:	ldr	r0, [sp, #28]
   19ccc:	ldrb	r1, [r0]
   19cd0:	movw	r0, #780	; 0x30c
   19cd4:	movt	r0, #4
   19cd8:	ldr	r0, [r0]
   19cdc:	ldr	r2, [r0, #20]
   19ce0:	ldr	r3, [r0, #24]
   19ce4:	cmp	r2, r3
   19ce8:	bcs	1b1bc <__assert_fail@plt+0x9130>
   19cec:	add	r3, r2, #1
   19cf0:	str	r3, [r0, #20]
   19cf4:	strb	r1, [r2]
   19cf8:	mov	r8, #1
   19cfc:	ldr	r5, [r4, #64]	; 0x40
   19d00:	mov	r0, r5
   19d04:	bl	11eac <strlen@plt>
   19d08:	add	r1, r0, #1
   19d0c:	mov	r0, #3
   19d10:	bl	297c8 <_obstack_memory_used@@Base+0x3444>
   19d14:	mov	r9, r0
   19d18:	ldrb	r0, [r5]
   19d1c:	mov	r4, r9
   19d20:	cmp	r0, #0
   19d24:	beq	19d8c <__assert_fail@plt+0x7d00>
   19d28:	movw	r6, #836	; 0x344
   19d2c:	add	r7, r5, #1
   19d30:	movw	r5, #56126	; 0xdb3e
   19d34:	mov	r4, r9
   19d38:	movt	r6, #4
   19d3c:	movt	r5, #2
   19d40:	uxtb	r1, r0
   19d44:	ldrb	r2, [r6, r1]
   19d48:	cmp	r2, #0
   19d4c:	beq	19d64 <__assert_fail@plt+0x7cd8>
   19d50:	strb	r0, [r4], #1
   19d54:	ldrb	r0, [r7], #1
   19d58:	cmp	r0, #0
   19d5c:	bne	19d40 <__assert_fail@plt+0x7cb4>
   19d60:	b	19d8c <__assert_fail@plt+0x7d00>
   19d64:	str	r1, [sp]
   19d68:	mov	r0, r4
   19d6c:	mov	r1, #1
   19d70:	mvn	r2, #0
   19d74:	mov	r3, r5
   19d78:	bl	11edc <__sprintf_chk@plt>
   19d7c:	add	r4, r4, r0
   19d80:	ldrb	r0, [r7], #1
   19d84:	cmp	r0, #0
   19d88:	bne	19d40 <__assert_fail@plt+0x7cb4>
   19d8c:	ldr	r5, [fp, #16]
   19d90:	mov	r0, #0
   19d94:	mov	r6, r9
   19d98:	str	r8, [sp, #12]
   19d9c:	strb	r0, [r4]
   19da0:	mov	r0, r5
   19da4:	bl	11eac <strlen@plt>
   19da8:	add	r1, r0, #1
   19dac:	mov	r0, #3
   19db0:	bl	297c8 <_obstack_memory_used@@Base+0x3444>
   19db4:	mov	r4, r0
   19db8:	ldrb	r0, [r5]
   19dbc:	mov	r7, r4
   19dc0:	cmp	r0, #0
   19dc4:	beq	19e50 <__assert_fail@plt+0x7dc4>
   19dc8:	ldr	r1, [fp, #16]
   19dcc:	movw	r8, #836	; 0x344
   19dd0:	movw	r5, #56126	; 0xdb3e
   19dd4:	mov	r9, #47	; 0x2f
   19dd8:	mov	r7, r4
   19ddc:	movt	r8, #4
   19de0:	movt	r5, #2
   19de4:	add	sl, r1, #1
   19de8:	uxtb	r1, r0
   19dec:	cmp	r1, #47	; 0x2f
   19df0:	bne	19e08 <__assert_fail@plt+0x7d7c>
   19df4:	strb	r9, [r7], #1
   19df8:	ldrb	r0, [sl], #1
   19dfc:	cmp	r0, #0
   19e00:	bne	19de8 <__assert_fail@plt+0x7d5c>
   19e04:	b	19e50 <__assert_fail@plt+0x7dc4>
   19e08:	ldrb	r2, [r8, r1]
   19e0c:	cmp	r2, #0
   19e10:	beq	19e28 <__assert_fail@plt+0x7d9c>
   19e14:	strb	r0, [r7], #1
   19e18:	ldrb	r0, [sl], #1
   19e1c:	cmp	r0, #0
   19e20:	bne	19de8 <__assert_fail@plt+0x7d5c>
   19e24:	b	19e50 <__assert_fail@plt+0x7dc4>
   19e28:	str	r1, [sp]
   19e2c:	mov	r0, r7
   19e30:	mov	r1, #1
   19e34:	mvn	r2, #0
   19e38:	mov	r3, r5
   19e3c:	bl	11edc <__sprintf_chk@plt>
   19e40:	add	r7, r7, r0
   19e44:	ldrb	r0, [sl], #1
   19e48:	cmp	r0, #0
   19e4c:	bne	19de8 <__assert_fail@plt+0x7d5c>
   19e50:	mov	r0, #0
   19e54:	movw	r1, #56125	; 0xdb3d
   19e58:	movw	r3, #46944	; 0xb760
   19e5c:	mov	r2, r6
   19e60:	str	r4, [sp]
   19e64:	strb	r0, [r7]
   19e68:	movt	r1, #2
   19e6c:	movt	r3, #2
   19e70:	ldrb	r0, [r4]
   19e74:	cmp	r0, #47	; 0x2f
   19e78:	mov	r0, #1
   19e7c:	moveq	r3, r1
   19e80:	movw	r1, #56099	; 0xdb23
   19e84:	movt	r1, #2
   19e88:	bl	11f00 <__printf_chk@plt>
   19e8c:	mov	r0, r6
   19e90:	bl	21218 <__assert_fail@plt+0xf18c>
   19e94:	mov	r0, r4
   19e98:	bl	21218 <__assert_fail@plt+0xf18c>
   19e9c:	ldr	r5, [sp, #12]
   19ea0:	b	1b03c <__assert_fail@plt+0x8fb0>
   19ea4:	movw	r0, #4816	; 0x12d0
   19ea8:	movt	r0, #4
   19eac:	ldrd	r2, [r0, #80]	; 0x50
   19eb0:	adds	r2, r2, #1
   19eb4:	adc	r3, r3, #0
   19eb8:	strd	r2, [r0, #80]	; 0x50
   19ebc:	movw	r0, #780	; 0x30c
   19ec0:	movt	r0, #4
   19ec4:	ldr	r0, [r0]
   19ec8:	ldr	r1, [r0, #20]
   19ecc:	ldr	r2, [r0, #24]
   19ed0:	cmp	r1, r2
   19ed4:	bcs	1b1c4 <__assert_fail@plt+0x9138>
   19ed8:	add	r2, r1, #1
   19edc:	str	r2, [r0, #20]
   19ee0:	mov	r0, #32
   19ee4:	strb	r0, [r1]
   19ee8:	cmp	sl, #0
   19eec:	beq	19c90 <__assert_fail@plt+0x7c04>
   19ef0:	movw	r7, #456	; 0x1c8
   19ef4:	movt	r7, #4
   19ef8:	ldr	r1, [r7, #32]
   19efc:	cmp	r1, #0
   19f00:	beq	19fec <__assert_fail@plt+0x7f60>
   19f04:	ldr	r0, [r7, #36]	; 0x24
   19f08:	cmp	r1, #2
   19f0c:	beq	19fd4 <__assert_fail@plt+0x7f48>
   19f10:	cmp	r1, #1
   19f14:	ldrbeq	r0, [r0]
   19f18:	cmpeq	r0, #48	; 0x30
   19f1c:	beq	19fec <__assert_fail@plt+0x7f60>
   19f20:	movw	r5, #4688	; 0x1250
   19f24:	movt	r5, #4
   19f28:	ldrb	r0, [r5, #13]
   19f2c:	cmp	r0, #0
   19f30:	bne	1a57c <__assert_fail@plt+0x84f0>
   19f34:	mov	r0, #1
   19f38:	strb	r0, [r5, #13]
   19f3c:	mov	r0, #1
   19f40:	bl	11ea0 <tcgetpgrp@plt>
   19f44:	cmp	r0, #0
   19f48:	movge	r0, #1
   19f4c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   19f50:	ldr	r0, [r7, #20]
   19f54:	ldrb	r1, [r5, #13]
   19f58:	cmp	r0, #0
   19f5c:	beq	1a064 <__assert_fail@plt+0x7fd8>
   19f60:	cmp	r1, #0
   19f64:	bne	1a1d8 <__assert_fail@plt+0x814c>
   19f68:	mov	r0, #1
   19f6c:	strb	r0, [r5, #13]
   19f70:	mov	r0, #1
   19f74:	bl	11ea0 <tcgetpgrp@plt>
   19f78:	cmp	r0, #0
   19f7c:	movge	r0, #1
   19f80:	blge	18c40 <__assert_fail@plt+0x6bb4>
   19f84:	ldr	r0, [r7, #20]
   19f88:	ldrb	r1, [r5, #13]
   19f8c:	cmp	r0, #0
   19f90:	beq	1a110 <__assert_fail@plt+0x8084>
   19f94:	cmp	r1, #0
   19f98:	bne	19fc0 <__assert_fail@plt+0x7f34>
   19f9c:	mov	r0, #1
   19fa0:	strb	r0, [r5, #13]
   19fa4:	mov	r0, #1
   19fa8:	bl	11ea0 <tcgetpgrp@plt>
   19fac:	cmp	r0, #0
   19fb0:	movge	r0, #1
   19fb4:	blge	18c40 <__assert_fail@plt+0x6bb4>
   19fb8:	bl	18bfc <__assert_fail@plt+0x6b70>
   19fbc:	ldr	r0, [r7, #20]
   19fc0:	movw	r1, #780	; 0x30c
   19fc4:	movt	r1, #4
   19fc8:	ldr	r3, [r1]
   19fcc:	ldr	r1, [r7, #16]
   19fd0:	b	1a1cc <__assert_fail@plt+0x8140>
   19fd4:	movw	r1, #54328	; 0xd438
   19fd8:	mov	r2, #2
   19fdc:	movt	r1, #2
   19fe0:	bl	1202c <strncmp@plt>
   19fe4:	cmp	r0, #0
   19fe8:	bne	19f20 <__assert_fail@plt+0x7e94>
   19fec:	movw	r5, #4688	; 0x1250
   19ff0:	movt	r5, #4
   19ff4:	ldrb	r0, [r5, #13]
   19ff8:	cmp	r0, #0
   19ffc:	bne	1ac30 <__assert_fail@plt+0x8ba4>
   1a000:	mov	r0, #1
   1a004:	strb	r0, [r5, #13]
   1a008:	mov	r0, #1
   1a00c:	bl	11ea0 <tcgetpgrp@plt>
   1a010:	cmp	r0, #0
   1a014:	movge	r0, #1
   1a018:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a01c:	ldr	r1, [r7, #20]
   1a020:	ldrb	r0, [r5, #13]
   1a024:	cmp	r1, #0
   1a028:	beq	1a0d8 <__assert_fail@plt+0x804c>
   1a02c:	cmp	r0, #0
   1a030:	bne	1a204 <__assert_fail@plt+0x8178>
   1a034:	mov	r0, #1
   1a038:	strb	r0, [r5, #13]
   1a03c:	mov	r0, #1
   1a040:	bl	11ea0 <tcgetpgrp@plt>
   1a044:	cmp	r0, #0
   1a048:	movge	r0, #1
   1a04c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a050:	ldr	r0, [r7, #20]
   1a054:	cmp	r0, #0
   1a058:	beq	1a1ec <__assert_fail@plt+0x8160>
   1a05c:	add	r0, r7, #16
   1a060:	b	1a200 <__assert_fail@plt+0x8174>
   1a064:	cmp	r1, #0
   1a068:	bne	1a2e0 <__assert_fail@plt+0x8254>
   1a06c:	mov	r0, #1
   1a070:	strb	r0, [r5, #13]
   1a074:	mov	r0, #1
   1a078:	bl	11ea0 <tcgetpgrp@plt>
   1a07c:	cmp	r0, #0
   1a080:	movge	r0, #1
   1a084:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a088:	ldr	r0, [r7, #20]
   1a08c:	ldrb	r1, [r5, #13]
   1a090:	cmp	r0, #0
   1a094:	beq	1a21c <__assert_fail@plt+0x8190>
   1a098:	cmp	r1, #0
   1a09c:	bne	1a0c4 <__assert_fail@plt+0x8038>
   1a0a0:	mov	r0, #1
   1a0a4:	strb	r0, [r5, #13]
   1a0a8:	mov	r0, #1
   1a0ac:	bl	11ea0 <tcgetpgrp@plt>
   1a0b0:	cmp	r0, #0
   1a0b4:	movge	r0, #1
   1a0b8:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a0bc:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a0c0:	ldr	r0, [r7, #20]
   1a0c4:	movw	r1, #780	; 0x30c
   1a0c8:	movt	r1, #4
   1a0cc:	ldr	r3, [r1]
   1a0d0:	ldr	r1, [r7, #16]
   1a0d4:	b	1a2d8 <__assert_fail@plt+0x824c>
   1a0d8:	cmp	r0, #0
   1a0dc:	bne	1ab44 <__assert_fail@plt+0x8ab8>
   1a0e0:	mov	r0, #1
   1a0e4:	strb	r0, [r5, #13]
   1a0e8:	mov	r0, #1
   1a0ec:	bl	11ea0 <tcgetpgrp@plt>
   1a0f0:	cmp	r0, #0
   1a0f4:	movge	r0, #1
   1a0f8:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a0fc:	ldr	r0, [r7, #20]
   1a100:	cmp	r0, #0
   1a104:	beq	1ab2c <__assert_fail@plt+0x8aa0>
   1a108:	add	r0, r7, #16
   1a10c:	b	1ab40 <__assert_fail@plt+0x8ab4>
   1a110:	cmp	r1, #0
   1a114:	bne	1a138 <__assert_fail@plt+0x80ac>
   1a118:	mov	r0, #1
   1a11c:	strb	r0, [r5, #13]
   1a120:	mov	r0, #1
   1a124:	bl	11ea0 <tcgetpgrp@plt>
   1a128:	cmp	r0, #0
   1a12c:	movge	r0, #1
   1a130:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a134:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a138:	movw	r4, #780	; 0x30c
   1a13c:	ldr	r1, [r7]
   1a140:	ldr	r0, [r7, #4]
   1a144:	mov	r2, #1
   1a148:	mov	r6, #1
   1a14c:	movt	r4, #4
   1a150:	ldr	r3, [r4]
   1a154:	bl	11c90 <fwrite_unlocked@plt>
   1a158:	ldrb	r0, [r5, #13]
   1a15c:	cmp	r0, #0
   1a160:	bne	1a180 <__assert_fail@plt+0x80f4>
   1a164:	mov	r0, #1
   1a168:	strb	r6, [r5, #13]
   1a16c:	bl	11ea0 <tcgetpgrp@plt>
   1a170:	cmp	r0, #0
   1a174:	movge	r0, #1
   1a178:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a17c:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a180:	ldr	r3, [r4]
   1a184:	ldr	r1, [r7, #24]
   1a188:	ldr	r0, [r7, #28]
   1a18c:	mov	r2, #1
   1a190:	mov	r6, #1
   1a194:	bl	11c90 <fwrite_unlocked@plt>
   1a198:	ldrb	r0, [r5, #13]
   1a19c:	cmp	r0, #0
   1a1a0:	bne	1a1c0 <__assert_fail@plt+0x8134>
   1a1a4:	mov	r0, #1
   1a1a8:	strb	r6, [r5, #13]
   1a1ac:	bl	11ea0 <tcgetpgrp@plt>
   1a1b0:	cmp	r0, #0
   1a1b4:	movge	r0, #1
   1a1b8:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a1bc:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a1c0:	ldr	r3, [r4]
   1a1c4:	ldr	r1, [r7, #8]
   1a1c8:	ldr	r0, [r7, #12]
   1a1cc:	mov	r2, #1
   1a1d0:	bl	11c90 <fwrite_unlocked@plt>
   1a1d4:	ldr	r0, [r7, #20]
   1a1d8:	movw	r1, #780	; 0x30c
   1a1dc:	movt	r1, #4
   1a1e0:	ldr	r3, [r1]
   1a1e4:	ldr	r1, [r7, #16]
   1a1e8:	b	1a574 <__assert_fail@plt+0x84e8>
   1a1ec:	mov	r0, r7
   1a1f0:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a1f4:	add	r0, r7, #24
   1a1f8:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a1fc:	add	r0, r7, #8
   1a200:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a204:	movw	r0, #780	; 0x30c
   1a208:	ldr	r1, [r7, #16]
   1a20c:	movt	r0, #4
   1a210:	ldr	r3, [r0]
   1a214:	ldr	r0, [r7, #20]
   1a218:	b	1ac28 <__assert_fail@plt+0x8b9c>
   1a21c:	cmp	r1, #0
   1a220:	bne	1a244 <__assert_fail@plt+0x81b8>
   1a224:	mov	r0, #1
   1a228:	strb	r0, [r5, #13]
   1a22c:	mov	r0, #1
   1a230:	bl	11ea0 <tcgetpgrp@plt>
   1a234:	cmp	r0, #0
   1a238:	movge	r0, #1
   1a23c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a240:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a244:	movw	r4, #780	; 0x30c
   1a248:	ldr	r1, [r7]
   1a24c:	ldr	r0, [r7, #4]
   1a250:	mov	r2, #1
   1a254:	mov	r6, #1
   1a258:	movt	r4, #4
   1a25c:	ldr	r3, [r4]
   1a260:	bl	11c90 <fwrite_unlocked@plt>
   1a264:	ldrb	r0, [r5, #13]
   1a268:	cmp	r0, #0
   1a26c:	bne	1a28c <__assert_fail@plt+0x8200>
   1a270:	mov	r0, #1
   1a274:	strb	r6, [r5, #13]
   1a278:	bl	11ea0 <tcgetpgrp@plt>
   1a27c:	cmp	r0, #0
   1a280:	movge	r0, #1
   1a284:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a288:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a28c:	ldr	r3, [r4]
   1a290:	ldr	r1, [r7, #24]
   1a294:	ldr	r0, [r7, #28]
   1a298:	mov	r2, #1
   1a29c:	mov	r6, #1
   1a2a0:	bl	11c90 <fwrite_unlocked@plt>
   1a2a4:	ldrb	r0, [r5, #13]
   1a2a8:	cmp	r0, #0
   1a2ac:	bne	1a2cc <__assert_fail@plt+0x8240>
   1a2b0:	mov	r0, #1
   1a2b4:	strb	r6, [r5, #13]
   1a2b8:	bl	11ea0 <tcgetpgrp@plt>
   1a2bc:	cmp	r0, #0
   1a2c0:	movge	r0, #1
   1a2c4:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a2c8:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a2cc:	ldr	r3, [r4]
   1a2d0:	ldr	r1, [r7, #8]
   1a2d4:	ldr	r0, [r7, #12]
   1a2d8:	mov	r2, #1
   1a2dc:	bl	11c90 <fwrite_unlocked@plt>
   1a2e0:	movw	r8, #780	; 0x30c
   1a2e4:	ldr	r1, [r7]
   1a2e8:	ldr	r0, [r7, #4]
   1a2ec:	mov	r2, #1
   1a2f0:	mov	r4, #1
   1a2f4:	movt	r8, #4
   1a2f8:	ldr	r3, [r8]
   1a2fc:	bl	11c90 <fwrite_unlocked@plt>
   1a300:	ldrb	r0, [r5, #13]
   1a304:	cmp	r0, #0
   1a308:	bne	1a428 <__assert_fail@plt+0x839c>
   1a30c:	mov	r0, #1
   1a310:	strb	r4, [r5, #13]
   1a314:	bl	11ea0 <tcgetpgrp@plt>
   1a318:	cmp	r0, #0
   1a31c:	movge	r0, #1
   1a320:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a324:	ldr	r0, [r7, #20]
   1a328:	ldrb	r1, [r5, #13]
   1a32c:	cmp	r0, #0
   1a330:	beq	1a36c <__assert_fail@plt+0x82e0>
   1a334:	cmp	r1, #0
   1a338:	bne	1a360 <__assert_fail@plt+0x82d4>
   1a33c:	mov	r0, #1
   1a340:	strb	r0, [r5, #13]
   1a344:	mov	r0, #1
   1a348:	bl	11ea0 <tcgetpgrp@plt>
   1a34c:	cmp	r0, #0
   1a350:	movge	r0, #1
   1a354:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a358:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a35c:	ldr	r0, [r7, #20]
   1a360:	ldr	r3, [r8]
   1a364:	ldr	r1, [r7, #16]
   1a368:	b	1a420 <__assert_fail@plt+0x8394>
   1a36c:	cmp	r1, #0
   1a370:	bne	1a394 <__assert_fail@plt+0x8308>
   1a374:	mov	r0, #1
   1a378:	strb	r0, [r5, #13]
   1a37c:	mov	r0, #1
   1a380:	bl	11ea0 <tcgetpgrp@plt>
   1a384:	cmp	r0, #0
   1a388:	movge	r0, #1
   1a38c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a390:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a394:	ldr	r3, [r8]
   1a398:	ldr	r1, [r7]
   1a39c:	ldr	r0, [r7, #4]
   1a3a0:	mov	r2, #1
   1a3a4:	mov	r4, #1
   1a3a8:	bl	11c90 <fwrite_unlocked@plt>
   1a3ac:	ldrb	r0, [r5, #13]
   1a3b0:	cmp	r0, #0
   1a3b4:	bne	1a3d4 <__assert_fail@plt+0x8348>
   1a3b8:	mov	r0, #1
   1a3bc:	strb	r4, [r5, #13]
   1a3c0:	bl	11ea0 <tcgetpgrp@plt>
   1a3c4:	cmp	r0, #0
   1a3c8:	movge	r0, #1
   1a3cc:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a3d0:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a3d4:	ldr	r3, [r8]
   1a3d8:	ldr	r1, [r7, #24]
   1a3dc:	ldr	r0, [r7, #28]
   1a3e0:	mov	r2, #1
   1a3e4:	mov	r4, #1
   1a3e8:	bl	11c90 <fwrite_unlocked@plt>
   1a3ec:	ldrb	r0, [r5, #13]
   1a3f0:	cmp	r0, #0
   1a3f4:	bne	1a414 <__assert_fail@plt+0x8388>
   1a3f8:	mov	r0, #1
   1a3fc:	strb	r4, [r5, #13]
   1a400:	bl	11ea0 <tcgetpgrp@plt>
   1a404:	cmp	r0, #0
   1a408:	movge	r0, #1
   1a40c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a410:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a414:	ldr	r3, [r8]
   1a418:	ldr	r1, [r7, #8]
   1a41c:	ldr	r0, [r7, #12]
   1a420:	mov	r2, #1
   1a424:	bl	11c90 <fwrite_unlocked@plt>
   1a428:	ldr	r3, [r8]
   1a42c:	ldr	r1, [r7, #24]
   1a430:	ldr	r0, [r7, #28]
   1a434:	mov	r2, #1
   1a438:	mov	r4, #1
   1a43c:	bl	11c90 <fwrite_unlocked@plt>
   1a440:	ldrb	r0, [r5, #13]
   1a444:	cmp	r0, #0
   1a448:	bne	1a568 <__assert_fail@plt+0x84dc>
   1a44c:	mov	r0, #1
   1a450:	strb	r4, [r5, #13]
   1a454:	bl	11ea0 <tcgetpgrp@plt>
   1a458:	cmp	r0, #0
   1a45c:	movge	r0, #1
   1a460:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a464:	ldr	r0, [r7, #20]
   1a468:	ldrb	r1, [r5, #13]
   1a46c:	cmp	r0, #0
   1a470:	beq	1a4ac <__assert_fail@plt+0x8420>
   1a474:	cmp	r1, #0
   1a478:	bne	1a4a0 <__assert_fail@plt+0x8414>
   1a47c:	mov	r0, #1
   1a480:	strb	r0, [r5, #13]
   1a484:	mov	r0, #1
   1a488:	bl	11ea0 <tcgetpgrp@plt>
   1a48c:	cmp	r0, #0
   1a490:	movge	r0, #1
   1a494:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a498:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a49c:	ldr	r0, [r7, #20]
   1a4a0:	ldr	r3, [r8]
   1a4a4:	ldr	r1, [r7, #16]
   1a4a8:	b	1a560 <__assert_fail@plt+0x84d4>
   1a4ac:	cmp	r1, #0
   1a4b0:	bne	1a4d4 <__assert_fail@plt+0x8448>
   1a4b4:	mov	r0, #1
   1a4b8:	strb	r0, [r5, #13]
   1a4bc:	mov	r0, #1
   1a4c0:	bl	11ea0 <tcgetpgrp@plt>
   1a4c4:	cmp	r0, #0
   1a4c8:	movge	r0, #1
   1a4cc:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a4d0:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a4d4:	ldr	r3, [r8]
   1a4d8:	ldr	r1, [r7]
   1a4dc:	ldr	r0, [r7, #4]
   1a4e0:	mov	r2, #1
   1a4e4:	mov	r4, #1
   1a4e8:	bl	11c90 <fwrite_unlocked@plt>
   1a4ec:	ldrb	r0, [r5, #13]
   1a4f0:	cmp	r0, #0
   1a4f4:	bne	1a514 <__assert_fail@plt+0x8488>
   1a4f8:	mov	r0, #1
   1a4fc:	strb	r4, [r5, #13]
   1a500:	bl	11ea0 <tcgetpgrp@plt>
   1a504:	cmp	r0, #0
   1a508:	movge	r0, #1
   1a50c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a510:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a514:	ldr	r3, [r8]
   1a518:	ldr	r1, [r7, #24]
   1a51c:	ldr	r0, [r7, #28]
   1a520:	mov	r2, #1
   1a524:	mov	r4, #1
   1a528:	bl	11c90 <fwrite_unlocked@plt>
   1a52c:	ldrb	r0, [r5, #13]
   1a530:	cmp	r0, #0
   1a534:	bne	1a554 <__assert_fail@plt+0x84c8>
   1a538:	mov	r0, #1
   1a53c:	strb	r4, [r5, #13]
   1a540:	bl	11ea0 <tcgetpgrp@plt>
   1a544:	cmp	r0, #0
   1a548:	movge	r0, #1
   1a54c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a550:	bl	18bfc <__assert_fail@plt+0x6b70>
   1a554:	ldr	r3, [r8]
   1a558:	ldr	r1, [r7, #8]
   1a55c:	ldr	r0, [r7, #12]
   1a560:	mov	r2, #1
   1a564:	bl	11c90 <fwrite_unlocked@plt>
   1a568:	ldr	r3, [r8]
   1a56c:	ldr	r1, [r7, #8]
   1a570:	ldr	r0, [r7, #12]
   1a574:	mov	r2, #1
   1a578:	bl	11c90 <fwrite_unlocked@plt>
   1a57c:	movw	r8, #780	; 0x30c
   1a580:	ldr	r1, [r7]
   1a584:	ldr	r0, [r7, #4]
   1a588:	mov	r2, #1
   1a58c:	mov	r4, #1
   1a590:	movt	r8, #4
   1a594:	ldr	r3, [r8]
   1a598:	bl	11c90 <fwrite_unlocked@plt>
   1a59c:	ldrb	r0, [r5, #13]
   1a5a0:	cmp	r0, #0
   1a5a4:	bne	1a764 <__assert_fail@plt+0x86d8>
   1a5a8:	mov	r0, #1
   1a5ac:	strb	r4, [r5, #13]
   1a5b0:	bl	11ea0 <tcgetpgrp@plt>
   1a5b4:	cmp	r0, #0
   1a5b8:	movge	r0, #1
   1a5bc:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a5c0:	ldr	r1, [r7, #20]
   1a5c4:	ldrb	r0, [r5, #13]
   1a5c8:	cmp	r1, #0
   1a5cc:	beq	1a608 <__assert_fail@plt+0x857c>
   1a5d0:	cmp	r0, #0
   1a5d4:	bne	1a658 <__assert_fail@plt+0x85cc>
   1a5d8:	mov	r0, #1
   1a5dc:	strb	r0, [r5, #13]
   1a5e0:	mov	r0, #1
   1a5e4:	bl	11ea0 <tcgetpgrp@plt>
   1a5e8:	cmp	r0, #0
   1a5ec:	movge	r0, #1
   1a5f0:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a5f4:	ldr	r0, [r7, #20]
   1a5f8:	cmp	r0, #0
   1a5fc:	beq	1a640 <__assert_fail@plt+0x85b4>
   1a600:	add	r0, r7, #16
   1a604:	b	1a654 <__assert_fail@plt+0x85c8>
   1a608:	cmp	r0, #0
   1a60c:	bne	1a680 <__assert_fail@plt+0x85f4>
   1a610:	mov	r0, #1
   1a614:	strb	r0, [r5, #13]
   1a618:	mov	r0, #1
   1a61c:	bl	11ea0 <tcgetpgrp@plt>
   1a620:	cmp	r0, #0
   1a624:	movge	r0, #1
   1a628:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a62c:	ldr	r0, [r7, #20]
   1a630:	cmp	r0, #0
   1a634:	beq	1a668 <__assert_fail@plt+0x85dc>
   1a638:	add	r0, r7, #16
   1a63c:	b	1a67c <__assert_fail@plt+0x85f0>
   1a640:	mov	r0, r7
   1a644:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a648:	add	r0, r7, #24
   1a64c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a650:	add	r0, r7, #8
   1a654:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a658:	ldr	r3, [r8]
   1a65c:	ldr	r1, [r7, #16]
   1a660:	ldr	r0, [r7, #20]
   1a664:	b	1a75c <__assert_fail@plt+0x86d0>
   1a668:	mov	r0, r7
   1a66c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a670:	add	r0, r7, #24
   1a674:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a678:	add	r0, r7, #8
   1a67c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a680:	ldr	r3, [r8]
   1a684:	ldr	r1, [r7]
   1a688:	ldr	r0, [r7, #4]
   1a68c:	mov	r2, #1
   1a690:	mov	r4, #1
   1a694:	bl	11c90 <fwrite_unlocked@plt>
   1a698:	ldrb	r0, [r5, #13]
   1a69c:	cmp	r0, #0
   1a6a0:	bne	1a6e8 <__assert_fail@plt+0x865c>
   1a6a4:	mov	r0, #1
   1a6a8:	strb	r4, [r5, #13]
   1a6ac:	bl	11ea0 <tcgetpgrp@plt>
   1a6b0:	cmp	r0, #0
   1a6b4:	movge	r0, #1
   1a6b8:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a6bc:	ldr	r0, [r7, #20]
   1a6c0:	cmp	r0, #0
   1a6c4:	beq	1a6d0 <__assert_fail@plt+0x8644>
   1a6c8:	add	r0, r7, #16
   1a6cc:	b	1a6e4 <__assert_fail@plt+0x8658>
   1a6d0:	mov	r0, r7
   1a6d4:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a6d8:	add	r0, r7, #24
   1a6dc:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a6e0:	add	r0, r7, #8
   1a6e4:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a6e8:	ldr	r3, [r8]
   1a6ec:	ldr	r1, [r7, #24]
   1a6f0:	ldr	r0, [r7, #28]
   1a6f4:	mov	r2, #1
   1a6f8:	mov	r4, #1
   1a6fc:	bl	11c90 <fwrite_unlocked@plt>
   1a700:	ldrb	r0, [r5, #13]
   1a704:	cmp	r0, #0
   1a708:	bne	1a750 <__assert_fail@plt+0x86c4>
   1a70c:	mov	r0, #1
   1a710:	strb	r4, [r5, #13]
   1a714:	bl	11ea0 <tcgetpgrp@plt>
   1a718:	cmp	r0, #0
   1a71c:	movge	r0, #1
   1a720:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a724:	ldr	r0, [r7, #20]
   1a728:	cmp	r0, #0
   1a72c:	beq	1a738 <__assert_fail@plt+0x86ac>
   1a730:	add	r0, r7, #16
   1a734:	b	1a74c <__assert_fail@plt+0x86c0>
   1a738:	mov	r0, r7
   1a73c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a740:	add	r0, r7, #24
   1a744:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a748:	add	r0, r7, #8
   1a74c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a750:	ldr	r3, [r8]
   1a754:	ldr	r1, [r7, #8]
   1a758:	ldr	r0, [r7, #12]
   1a75c:	mov	r2, #1
   1a760:	bl	11c90 <fwrite_unlocked@plt>
   1a764:	ldr	r3, [r8]
   1a768:	ldr	r1, [r7, #8]
   1a76c:	ldr	r0, [r7, #12]
   1a770:	mov	r2, #1
   1a774:	mov	r4, #1
   1a778:	bl	11c90 <fwrite_unlocked@plt>
   1a77c:	ldrb	r0, [r5, #13]
   1a780:	cmp	r0, #0
   1a784:	bne	1a944 <__assert_fail@plt+0x88b8>
   1a788:	mov	r0, #1
   1a78c:	strb	r4, [r5, #13]
   1a790:	bl	11ea0 <tcgetpgrp@plt>
   1a794:	cmp	r0, #0
   1a798:	movge	r0, #1
   1a79c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a7a0:	ldr	r1, [r7, #20]
   1a7a4:	ldrb	r0, [r5, #13]
   1a7a8:	cmp	r1, #0
   1a7ac:	beq	1a7e8 <__assert_fail@plt+0x875c>
   1a7b0:	cmp	r0, #0
   1a7b4:	bne	1a838 <__assert_fail@plt+0x87ac>
   1a7b8:	mov	r0, #1
   1a7bc:	strb	r0, [r5, #13]
   1a7c0:	mov	r0, #1
   1a7c4:	bl	11ea0 <tcgetpgrp@plt>
   1a7c8:	cmp	r0, #0
   1a7cc:	movge	r0, #1
   1a7d0:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a7d4:	ldr	r0, [r7, #20]
   1a7d8:	cmp	r0, #0
   1a7dc:	beq	1a820 <__assert_fail@plt+0x8794>
   1a7e0:	add	r0, r7, #16
   1a7e4:	b	1a834 <__assert_fail@plt+0x87a8>
   1a7e8:	cmp	r0, #0
   1a7ec:	bne	1a860 <__assert_fail@plt+0x87d4>
   1a7f0:	mov	r0, #1
   1a7f4:	strb	r0, [r5, #13]
   1a7f8:	mov	r0, #1
   1a7fc:	bl	11ea0 <tcgetpgrp@plt>
   1a800:	cmp	r0, #0
   1a804:	movge	r0, #1
   1a808:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a80c:	ldr	r0, [r7, #20]
   1a810:	cmp	r0, #0
   1a814:	beq	1a848 <__assert_fail@plt+0x87bc>
   1a818:	add	r0, r7, #16
   1a81c:	b	1a85c <__assert_fail@plt+0x87d0>
   1a820:	mov	r0, r7
   1a824:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a828:	add	r0, r7, #24
   1a82c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a830:	add	r0, r7, #8
   1a834:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a838:	ldr	r3, [r8]
   1a83c:	ldr	r1, [r7, #16]
   1a840:	ldr	r0, [r7, #20]
   1a844:	b	1a93c <__assert_fail@plt+0x88b0>
   1a848:	mov	r0, r7
   1a84c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a850:	add	r0, r7, #24
   1a854:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a858:	add	r0, r7, #8
   1a85c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a860:	ldr	r3, [r8]
   1a864:	ldr	r1, [r7]
   1a868:	ldr	r0, [r7, #4]
   1a86c:	mov	r2, #1
   1a870:	mov	r4, #1
   1a874:	bl	11c90 <fwrite_unlocked@plt>
   1a878:	ldrb	r0, [r5, #13]
   1a87c:	cmp	r0, #0
   1a880:	bne	1a8c8 <__assert_fail@plt+0x883c>
   1a884:	mov	r0, #1
   1a888:	strb	r4, [r5, #13]
   1a88c:	bl	11ea0 <tcgetpgrp@plt>
   1a890:	cmp	r0, #0
   1a894:	movge	r0, #1
   1a898:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a89c:	ldr	r0, [r7, #20]
   1a8a0:	cmp	r0, #0
   1a8a4:	beq	1a8b0 <__assert_fail@plt+0x8824>
   1a8a8:	add	r0, r7, #16
   1a8ac:	b	1a8c4 <__assert_fail@plt+0x8838>
   1a8b0:	mov	r0, r7
   1a8b4:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a8b8:	add	r0, r7, #24
   1a8bc:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a8c0:	add	r0, r7, #8
   1a8c4:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a8c8:	ldr	r3, [r8]
   1a8cc:	ldr	r1, [r7, #24]
   1a8d0:	ldr	r0, [r7, #28]
   1a8d4:	mov	r2, #1
   1a8d8:	mov	r4, #1
   1a8dc:	bl	11c90 <fwrite_unlocked@plt>
   1a8e0:	ldrb	r0, [r5, #13]
   1a8e4:	cmp	r0, #0
   1a8e8:	bne	1a930 <__assert_fail@plt+0x88a4>
   1a8ec:	mov	r0, #1
   1a8f0:	strb	r4, [r5, #13]
   1a8f4:	bl	11ea0 <tcgetpgrp@plt>
   1a8f8:	cmp	r0, #0
   1a8fc:	movge	r0, #1
   1a900:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a904:	ldr	r0, [r7, #20]
   1a908:	cmp	r0, #0
   1a90c:	beq	1a918 <__assert_fail@plt+0x888c>
   1a910:	add	r0, r7, #16
   1a914:	b	1a92c <__assert_fail@plt+0x88a0>
   1a918:	mov	r0, r7
   1a91c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a920:	add	r0, r7, #24
   1a924:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a928:	add	r0, r7, #8
   1a92c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1a930:	ldr	r3, [r8]
   1a934:	ldr	r1, [r7, #8]
   1a938:	ldr	r0, [r7, #12]
   1a93c:	mov	r2, #1
   1a940:	bl	11c90 <fwrite_unlocked@plt>
   1a944:	ldr	r3, [r8]
   1a948:	ldr	r1, [r7]
   1a94c:	ldr	r0, [r7, #4]
   1a950:	mov	r2, #1
   1a954:	mov	r4, #1
   1a958:	bl	11c90 <fwrite_unlocked@plt>
   1a95c:	ldrb	r0, [r5, #13]
   1a960:	cmp	r0, #0
   1a964:	bne	1ab24 <__assert_fail@plt+0x8a98>
   1a968:	mov	r0, #1
   1a96c:	strb	r4, [r5, #13]
   1a970:	bl	11ea0 <tcgetpgrp@plt>
   1a974:	cmp	r0, #0
   1a978:	movge	r0, #1
   1a97c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a980:	ldr	r1, [r7, #20]
   1a984:	ldrb	r0, [r5, #13]
   1a988:	cmp	r1, #0
   1a98c:	beq	1a9c8 <__assert_fail@plt+0x893c>
   1a990:	cmp	r0, #0
   1a994:	bne	1aa18 <__assert_fail@plt+0x898c>
   1a998:	mov	r0, #1
   1a99c:	strb	r0, [r5, #13]
   1a9a0:	mov	r0, #1
   1a9a4:	bl	11ea0 <tcgetpgrp@plt>
   1a9a8:	cmp	r0, #0
   1a9ac:	movge	r0, #1
   1a9b0:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a9b4:	ldr	r0, [r7, #20]
   1a9b8:	cmp	r0, #0
   1a9bc:	beq	1aa00 <__assert_fail@plt+0x8974>
   1a9c0:	add	r0, r7, #16
   1a9c4:	b	1aa14 <__assert_fail@plt+0x8988>
   1a9c8:	cmp	r0, #0
   1a9cc:	bne	1aa40 <__assert_fail@plt+0x89b4>
   1a9d0:	mov	r0, #1
   1a9d4:	strb	r0, [r5, #13]
   1a9d8:	mov	r0, #1
   1a9dc:	bl	11ea0 <tcgetpgrp@plt>
   1a9e0:	cmp	r0, #0
   1a9e4:	movge	r0, #1
   1a9e8:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1a9ec:	ldr	r0, [r7, #20]
   1a9f0:	cmp	r0, #0
   1a9f4:	beq	1aa28 <__assert_fail@plt+0x899c>
   1a9f8:	add	r0, r7, #16
   1a9fc:	b	1aa3c <__assert_fail@plt+0x89b0>
   1aa00:	mov	r0, r7
   1aa04:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aa08:	add	r0, r7, #24
   1aa0c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aa10:	add	r0, r7, #8
   1aa14:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aa18:	ldr	r3, [r8]
   1aa1c:	ldr	r1, [r7, #16]
   1aa20:	ldr	r0, [r7, #20]
   1aa24:	b	1ab1c <__assert_fail@plt+0x8a90>
   1aa28:	mov	r0, r7
   1aa2c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aa30:	add	r0, r7, #24
   1aa34:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aa38:	add	r0, r7, #8
   1aa3c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aa40:	ldr	r3, [r8]
   1aa44:	ldr	r1, [r7]
   1aa48:	ldr	r0, [r7, #4]
   1aa4c:	mov	r2, #1
   1aa50:	mov	r4, #1
   1aa54:	bl	11c90 <fwrite_unlocked@plt>
   1aa58:	ldrb	r0, [r5, #13]
   1aa5c:	cmp	r0, #0
   1aa60:	bne	1aaa8 <__assert_fail@plt+0x8a1c>
   1aa64:	mov	r0, #1
   1aa68:	strb	r4, [r5, #13]
   1aa6c:	bl	11ea0 <tcgetpgrp@plt>
   1aa70:	cmp	r0, #0
   1aa74:	movge	r0, #1
   1aa78:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1aa7c:	ldr	r0, [r7, #20]
   1aa80:	cmp	r0, #0
   1aa84:	beq	1aa90 <__assert_fail@plt+0x8a04>
   1aa88:	add	r0, r7, #16
   1aa8c:	b	1aaa4 <__assert_fail@plt+0x8a18>
   1aa90:	mov	r0, r7
   1aa94:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aa98:	add	r0, r7, #24
   1aa9c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aaa0:	add	r0, r7, #8
   1aaa4:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aaa8:	ldr	r3, [r8]
   1aaac:	ldr	r1, [r7, #24]
   1aab0:	ldr	r0, [r7, #28]
   1aab4:	mov	r2, #1
   1aab8:	mov	r4, #1
   1aabc:	bl	11c90 <fwrite_unlocked@plt>
   1aac0:	ldrb	r0, [r5, #13]
   1aac4:	cmp	r0, #0
   1aac8:	bne	1ab10 <__assert_fail@plt+0x8a84>
   1aacc:	mov	r0, #1
   1aad0:	strb	r4, [r5, #13]
   1aad4:	bl	11ea0 <tcgetpgrp@plt>
   1aad8:	cmp	r0, #0
   1aadc:	movge	r0, #1
   1aae0:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1aae4:	ldr	r0, [r7, #20]
   1aae8:	cmp	r0, #0
   1aaec:	beq	1aaf8 <__assert_fail@plt+0x8a6c>
   1aaf0:	add	r0, r7, #16
   1aaf4:	b	1ab0c <__assert_fail@plt+0x8a80>
   1aaf8:	mov	r0, r7
   1aafc:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ab00:	add	r0, r7, #24
   1ab04:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ab08:	add	r0, r7, #8
   1ab0c:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ab10:	ldr	r3, [r8]
   1ab14:	ldr	r1, [r7, #8]
   1ab18:	ldr	r0, [r7, #12]
   1ab1c:	mov	r2, #1
   1ab20:	bl	11c90 <fwrite_unlocked@plt>
   1ab24:	ldr	r3, [r8]
   1ab28:	b	1ae1c <__assert_fail@plt+0x8d90>
   1ab2c:	mov	r0, r7
   1ab30:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ab34:	add	r0, r7, #24
   1ab38:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ab3c:	add	r0, r7, #8
   1ab40:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ab44:	movw	r8, #780	; 0x30c
   1ab48:	ldr	r1, [r7]
   1ab4c:	ldr	r0, [r7, #4]
   1ab50:	mov	r2, #1
   1ab54:	mov	r4, #1
   1ab58:	movt	r8, #4
   1ab5c:	ldr	r3, [r8]
   1ab60:	bl	11c90 <fwrite_unlocked@plt>
   1ab64:	ldrb	r0, [r5, #13]
   1ab68:	cmp	r0, #0
   1ab6c:	bne	1abb4 <__assert_fail@plt+0x8b28>
   1ab70:	mov	r0, #1
   1ab74:	strb	r4, [r5, #13]
   1ab78:	bl	11ea0 <tcgetpgrp@plt>
   1ab7c:	cmp	r0, #0
   1ab80:	movge	r0, #1
   1ab84:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1ab88:	ldr	r0, [r7, #20]
   1ab8c:	cmp	r0, #0
   1ab90:	beq	1ab9c <__assert_fail@plt+0x8b10>
   1ab94:	add	r0, r7, #16
   1ab98:	b	1abb0 <__assert_fail@plt+0x8b24>
   1ab9c:	mov	r0, r7
   1aba0:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aba4:	add	r0, r7, #24
   1aba8:	bl	18b9c <__assert_fail@plt+0x6b10>
   1abac:	add	r0, r7, #8
   1abb0:	bl	18b9c <__assert_fail@plt+0x6b10>
   1abb4:	ldr	r3, [r8]
   1abb8:	ldr	r1, [r7, #24]
   1abbc:	ldr	r0, [r7, #28]
   1abc0:	mov	r2, #1
   1abc4:	mov	r4, #1
   1abc8:	bl	11c90 <fwrite_unlocked@plt>
   1abcc:	ldrb	r0, [r5, #13]
   1abd0:	cmp	r0, #0
   1abd4:	bne	1ac1c <__assert_fail@plt+0x8b90>
   1abd8:	mov	r0, #1
   1abdc:	strb	r4, [r5, #13]
   1abe0:	bl	11ea0 <tcgetpgrp@plt>
   1abe4:	cmp	r0, #0
   1abe8:	movge	r0, #1
   1abec:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1abf0:	ldr	r0, [r7, #20]
   1abf4:	cmp	r0, #0
   1abf8:	beq	1ac04 <__assert_fail@plt+0x8b78>
   1abfc:	add	r0, r7, #16
   1ac00:	b	1ac18 <__assert_fail@plt+0x8b8c>
   1ac04:	mov	r0, r7
   1ac08:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ac0c:	add	r0, r7, #24
   1ac10:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ac14:	add	r0, r7, #8
   1ac18:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ac1c:	ldr	r3, [r8]
   1ac20:	ldr	r1, [r7, #8]
   1ac24:	ldr	r0, [r7, #12]
   1ac28:	mov	r2, #1
   1ac2c:	bl	11c90 <fwrite_unlocked@plt>
   1ac30:	movw	r4, #780	; 0x30c
   1ac34:	ldr	r1, [r7]
   1ac38:	ldr	r0, [r7, #4]
   1ac3c:	mov	r2, #1
   1ac40:	mov	r6, #1
   1ac44:	movt	r4, #4
   1ac48:	ldr	r3, [r4]
   1ac4c:	bl	11c90 <fwrite_unlocked@plt>
   1ac50:	ldrb	r0, [r5, #13]
   1ac54:	cmp	r0, #0
   1ac58:	bne	1ae18 <__assert_fail@plt+0x8d8c>
   1ac5c:	mov	r0, #1
   1ac60:	strb	r6, [r5, #13]
   1ac64:	bl	11ea0 <tcgetpgrp@plt>
   1ac68:	cmp	r0, #0
   1ac6c:	movge	r0, #1
   1ac70:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1ac74:	ldr	r1, [r7, #20]
   1ac78:	ldrb	r0, [r5, #13]
   1ac7c:	cmp	r1, #0
   1ac80:	beq	1acbc <__assert_fail@plt+0x8c30>
   1ac84:	cmp	r0, #0
   1ac88:	bne	1ad0c <__assert_fail@plt+0x8c80>
   1ac8c:	mov	r0, #1
   1ac90:	strb	r0, [r5, #13]
   1ac94:	mov	r0, #1
   1ac98:	bl	11ea0 <tcgetpgrp@plt>
   1ac9c:	cmp	r0, #0
   1aca0:	movge	r0, #1
   1aca4:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1aca8:	ldr	r0, [r7, #20]
   1acac:	cmp	r0, #0
   1acb0:	beq	1acf4 <__assert_fail@plt+0x8c68>
   1acb4:	add	r0, r7, #16
   1acb8:	b	1ad08 <__assert_fail@plt+0x8c7c>
   1acbc:	cmp	r0, #0
   1acc0:	bne	1ad34 <__assert_fail@plt+0x8ca8>
   1acc4:	mov	r0, #1
   1acc8:	strb	r0, [r5, #13]
   1accc:	mov	r0, #1
   1acd0:	bl	11ea0 <tcgetpgrp@plt>
   1acd4:	cmp	r0, #0
   1acd8:	movge	r0, #1
   1acdc:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1ace0:	ldr	r0, [r7, #20]
   1ace4:	cmp	r0, #0
   1ace8:	beq	1ad1c <__assert_fail@plt+0x8c90>
   1acec:	add	r0, r7, #16
   1acf0:	b	1ad30 <__assert_fail@plt+0x8ca4>
   1acf4:	mov	r0, r7
   1acf8:	bl	18b9c <__assert_fail@plt+0x6b10>
   1acfc:	add	r0, r7, #24
   1ad00:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ad04:	add	r0, r7, #8
   1ad08:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ad0c:	ldr	r3, [r4]
   1ad10:	ldr	r1, [r7, #16]
   1ad14:	ldr	r0, [r7, #20]
   1ad18:	b	1ae10 <__assert_fail@plt+0x8d84>
   1ad1c:	mov	r0, r7
   1ad20:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ad24:	add	r0, r7, #24
   1ad28:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ad2c:	add	r0, r7, #8
   1ad30:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ad34:	ldr	r3, [r4]
   1ad38:	ldr	r1, [r7]
   1ad3c:	ldr	r0, [r7, #4]
   1ad40:	mov	r2, #1
   1ad44:	mov	r6, #1
   1ad48:	bl	11c90 <fwrite_unlocked@plt>
   1ad4c:	ldrb	r0, [r5, #13]
   1ad50:	cmp	r0, #0
   1ad54:	bne	1ad9c <__assert_fail@plt+0x8d10>
   1ad58:	mov	r0, #1
   1ad5c:	strb	r6, [r5, #13]
   1ad60:	bl	11ea0 <tcgetpgrp@plt>
   1ad64:	cmp	r0, #0
   1ad68:	movge	r0, #1
   1ad6c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1ad70:	ldr	r0, [r7, #20]
   1ad74:	cmp	r0, #0
   1ad78:	beq	1ad84 <__assert_fail@plt+0x8cf8>
   1ad7c:	add	r0, r7, #16
   1ad80:	b	1ad98 <__assert_fail@plt+0x8d0c>
   1ad84:	mov	r0, r7
   1ad88:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ad8c:	add	r0, r7, #24
   1ad90:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ad94:	add	r0, r7, #8
   1ad98:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ad9c:	ldr	r3, [r4]
   1ada0:	ldr	r1, [r7, #24]
   1ada4:	ldr	r0, [r7, #28]
   1ada8:	mov	r2, #1
   1adac:	mov	r6, #1
   1adb0:	bl	11c90 <fwrite_unlocked@plt>
   1adb4:	ldrb	r0, [r5, #13]
   1adb8:	cmp	r0, #0
   1adbc:	bne	1ae04 <__assert_fail@plt+0x8d78>
   1adc0:	mov	r0, #1
   1adc4:	strb	r6, [r5, #13]
   1adc8:	bl	11ea0 <tcgetpgrp@plt>
   1adcc:	cmp	r0, #0
   1add0:	movge	r0, #1
   1add4:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1add8:	ldr	r0, [r7, #20]
   1addc:	cmp	r0, #0
   1ade0:	beq	1adec <__assert_fail@plt+0x8d60>
   1ade4:	add	r0, r7, #16
   1ade8:	b	1ae00 <__assert_fail@plt+0x8d74>
   1adec:	mov	r0, r7
   1adf0:	bl	18b9c <__assert_fail@plt+0x6b10>
   1adf4:	add	r0, r7, #24
   1adf8:	bl	18b9c <__assert_fail@plt+0x6b10>
   1adfc:	add	r0, r7, #8
   1ae00:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ae04:	ldr	r3, [r4]
   1ae08:	ldr	r1, [r7, #8]
   1ae0c:	ldr	r0, [r7, #12]
   1ae10:	mov	r2, #1
   1ae14:	bl	11c90 <fwrite_unlocked@plt>
   1ae18:	ldr	r3, [r4]
   1ae1c:	ldr	r1, [sl]
   1ae20:	ldr	r0, [sl, #4]
   1ae24:	mov	r2, #1
   1ae28:	bl	11c90 <fwrite_unlocked@plt>
   1ae2c:	movw	r4, #4688	; 0x1250
   1ae30:	movt	r4, #4
   1ae34:	ldrb	r0, [r4, #13]
   1ae38:	cmp	r0, #0
   1ae3c:	bne	1b010 <__assert_fail@plt+0x8f84>
   1ae40:	mov	r0, #1
   1ae44:	strb	r0, [r4, #13]
   1ae48:	mov	r0, #1
   1ae4c:	bl	11ea0 <tcgetpgrp@plt>
   1ae50:	cmp	r0, #0
   1ae54:	movge	r0, #1
   1ae58:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1ae5c:	ldr	r1, [r7, #20]
   1ae60:	ldrb	r0, [r4, #13]
   1ae64:	cmp	r1, #0
   1ae68:	beq	1aea4 <__assert_fail@plt+0x8e18>
   1ae6c:	cmp	r0, #0
   1ae70:	bne	1aef4 <__assert_fail@plt+0x8e68>
   1ae74:	mov	r0, #1
   1ae78:	strb	r0, [r4, #13]
   1ae7c:	mov	r0, #1
   1ae80:	bl	11ea0 <tcgetpgrp@plt>
   1ae84:	cmp	r0, #0
   1ae88:	movge	r0, #1
   1ae8c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1ae90:	ldr	r0, [r7, #20]
   1ae94:	cmp	r0, #0
   1ae98:	beq	1aedc <__assert_fail@plt+0x8e50>
   1ae9c:	add	r0, r7, #16
   1aea0:	b	1aef0 <__assert_fail@plt+0x8e64>
   1aea4:	cmp	r0, #0
   1aea8:	bne	1af24 <__assert_fail@plt+0x8e98>
   1aeac:	mov	r0, #1
   1aeb0:	strb	r0, [r4, #13]
   1aeb4:	mov	r0, #1
   1aeb8:	bl	11ea0 <tcgetpgrp@plt>
   1aebc:	cmp	r0, #0
   1aec0:	movge	r0, #1
   1aec4:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1aec8:	ldr	r0, [r7, #20]
   1aecc:	cmp	r0, #0
   1aed0:	beq	1af0c <__assert_fail@plt+0x8e80>
   1aed4:	add	r0, r7, #16
   1aed8:	b	1af20 <__assert_fail@plt+0x8e94>
   1aedc:	mov	r0, r7
   1aee0:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aee4:	add	r0, r7, #24
   1aee8:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aeec:	add	r0, r7, #8
   1aef0:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aef4:	movw	r0, #780	; 0x30c
   1aef8:	ldr	r1, [r7, #16]
   1aefc:	movt	r0, #4
   1af00:	ldr	r3, [r0]
   1af04:	ldr	r0, [r7, #20]
   1af08:	b	1b008 <__assert_fail@plt+0x8f7c>
   1af0c:	mov	r0, r7
   1af10:	bl	18b9c <__assert_fail@plt+0x6b10>
   1af14:	add	r0, r7, #24
   1af18:	bl	18b9c <__assert_fail@plt+0x6b10>
   1af1c:	add	r0, r7, #8
   1af20:	bl	18b9c <__assert_fail@plt+0x6b10>
   1af24:	movw	r5, #780	; 0x30c
   1af28:	ldr	r1, [r7]
   1af2c:	ldr	r0, [r7, #4]
   1af30:	mov	r2, #1
   1af34:	mov	r6, #1
   1af38:	movt	r5, #4
   1af3c:	ldr	r3, [r5]
   1af40:	bl	11c90 <fwrite_unlocked@plt>
   1af44:	ldrb	r0, [r4, #13]
   1af48:	cmp	r0, #0
   1af4c:	bne	1af94 <__assert_fail@plt+0x8f08>
   1af50:	mov	r0, #1
   1af54:	strb	r6, [r4, #13]
   1af58:	bl	11ea0 <tcgetpgrp@plt>
   1af5c:	cmp	r0, #0
   1af60:	movge	r0, #1
   1af64:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1af68:	ldr	r0, [r7, #20]
   1af6c:	cmp	r0, #0
   1af70:	beq	1af7c <__assert_fail@plt+0x8ef0>
   1af74:	add	r0, r7, #16
   1af78:	b	1af90 <__assert_fail@plt+0x8f04>
   1af7c:	mov	r0, r7
   1af80:	bl	18b9c <__assert_fail@plt+0x6b10>
   1af84:	add	r0, r7, #24
   1af88:	bl	18b9c <__assert_fail@plt+0x6b10>
   1af8c:	add	r0, r7, #8
   1af90:	bl	18b9c <__assert_fail@plt+0x6b10>
   1af94:	ldr	r3, [r5]
   1af98:	ldr	r1, [r7, #24]
   1af9c:	ldr	r0, [r7, #28]
   1afa0:	mov	r2, #1
   1afa4:	mov	r6, #1
   1afa8:	bl	11c90 <fwrite_unlocked@plt>
   1afac:	ldrb	r0, [r4, #13]
   1afb0:	cmp	r0, #0
   1afb4:	bne	1affc <__assert_fail@plt+0x8f70>
   1afb8:	mov	r0, #1
   1afbc:	strb	r6, [r4, #13]
   1afc0:	bl	11ea0 <tcgetpgrp@plt>
   1afc4:	cmp	r0, #0
   1afc8:	movge	r0, #1
   1afcc:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1afd0:	ldr	r0, [r7, #20]
   1afd4:	cmp	r0, #0
   1afd8:	beq	1afe4 <__assert_fail@plt+0x8f58>
   1afdc:	add	r0, r7, #16
   1afe0:	b	1aff8 <__assert_fail@plt+0x8f6c>
   1afe4:	mov	r0, r7
   1afe8:	bl	18b9c <__assert_fail@plt+0x6b10>
   1afec:	add	r0, r7, #24
   1aff0:	bl	18b9c <__assert_fail@plt+0x6b10>
   1aff4:	add	r0, r7, #8
   1aff8:	bl	18b9c <__assert_fail@plt+0x6b10>
   1affc:	ldr	r3, [r5]
   1b000:	ldr	r1, [r7, #8]
   1b004:	ldr	r0, [r7, #12]
   1b008:	mov	r2, #1
   1b00c:	bl	11c90 <fwrite_unlocked@plt>
   1b010:	movw	r0, #780	; 0x30c
   1b014:	ldr	r1, [r7, #8]
   1b018:	mov	r2, #1
   1b01c:	movt	r0, #4
   1b020:	ldr	r3, [r0]
   1b024:	ldr	r0, [r7, #12]
   1b028:	bl	11c90 <fwrite_unlocked@plt>
   1b02c:	ldr	r0, [fp, #16]
   1b030:	cmp	r0, #0
   1b034:	bne	19c9c <__assert_fail@plt+0x7c10>
   1b038:	mov	r5, #0
   1b03c:	movw	r9, #4688	; 0x1250
   1b040:	ldr	r7, [fp, #12]
   1b044:	ldr	sl, [sp, #20]
   1b048:	movt	r9, #4
   1b04c:	ldrb	r0, [r9, #11]
   1b050:	cmp	r0, #0
   1b054:	cmpne	r7, #0
   1b058:	beq	1b0a0 <__assert_fail@plt+0x9014>
   1b05c:	ldr	r0, [r7, #12]
   1b060:	ldr	r1, [r7, #16]
   1b064:	sub	r1, r1, r0
   1b068:	cmp	r1, #8
   1b06c:	bcs	1b080 <__assert_fail@plt+0x8ff4>
   1b070:	mov	r0, r7
   1b074:	mov	r1, #8
   1b078:	bl	26148 <_obstack_newchunk@@Base>
   1b07c:	ldr	r0, [r7, #12]
   1b080:	movw	r1, #4816	; 0x12d0
   1b084:	movt	r1, #4
   1b088:	ldrd	r2, [r1, #80]	; 0x50
   1b08c:	str	r3, [r0, #4]
   1b090:	str	r2, [r0]
   1b094:	ldr	r0, [r7, #12]
   1b098:	add	r0, r0, #8
   1b09c:	str	r0, [r7, #12]
   1b0a0:	movw	r8, #780	; 0x30c
   1b0a4:	ldr	r6, [sp, #28]
   1b0a8:	sub	r2, sl, r5, lsl #1
   1b0ac:	mov	r1, #1
   1b0b0:	movt	r8, #4
   1b0b4:	ldr	r3, [r8]
   1b0b8:	add	r0, r6, r5
   1b0bc:	bl	11c90 <fwrite_unlocked@plt>
   1b0c0:	movw	r4, #4816	; 0x12d0
   1b0c4:	ldrb	r2, [r9, #11]
   1b0c8:	movt	r4, #4
   1b0cc:	ldrd	r0, [r4, #80]	; 0x50
   1b0d0:	adds	r0, r0, sl
   1b0d4:	adc	r1, r1, #0
   1b0d8:	cmp	r2, #0
   1b0dc:	cmpne	r7, #0
   1b0e0:	strd	r0, [r4, #80]	; 0x50
   1b0e4:	bne	1b0f8 <__assert_fail@plt+0x906c>
   1b0e8:	ldr	r0, [fp, #16]
   1b0ec:	cmp	r0, #0
   1b0f0:	bne	1b140 <__assert_fail@plt+0x90b4>
   1b0f4:	b	1b180 <__assert_fail@plt+0x90f4>
   1b0f8:	ldr	r2, [r7, #12]
   1b0fc:	ldr	r3, [r7, #16]
   1b100:	sub	r3, r3, r2
   1b104:	cmp	r3, #8
   1b108:	bcs	1b120 <__assert_fail@plt+0x9094>
   1b10c:	mov	r0, r7
   1b110:	mov	r1, #8
   1b114:	bl	26148 <_obstack_newchunk@@Base>
   1b118:	ldrd	r0, [r4, #80]	; 0x50
   1b11c:	ldr	r2, [r7, #12]
   1b120:	str	r0, [r2]
   1b124:	str	r1, [r2, #4]
   1b128:	ldr	r0, [r7, #12]
   1b12c:	add	r0, r0, #8
   1b130:	str	r0, [r7, #12]
   1b134:	ldr	r0, [fp, #16]
   1b138:	cmp	r0, #0
   1b13c:	beq	1b180 <__assert_fail@plt+0x90f4>
   1b140:	ldr	r1, [r8]
   1b144:	movw	r0, #56119	; 0xdb37
   1b148:	movt	r0, #2
   1b14c:	bl	11b94 <fputs_unlocked@plt>
   1b150:	cmp	r5, #0
   1b154:	beq	1b180 <__assert_fail@plt+0x90f4>
   1b158:	add	r0, r6, sl
   1b15c:	ldrb	r1, [r0, #-1]
   1b160:	ldr	r0, [r8]
   1b164:	ldr	r2, [r0, #20]
   1b168:	ldr	r3, [r0, #24]
   1b16c:	cmp	r2, r3
   1b170:	bcs	1b1d8 <__assert_fail@plt+0x914c>
   1b174:	add	r3, r2, #1
   1b178:	str	r3, [r0, #20]
   1b17c:	strb	r1, [r2]
   1b180:	add	r0, sp, #32
   1b184:	cmp	r6, r0
   1b188:	ldrne	r0, [sp, #16]
   1b18c:	cmpne	r6, r0
   1b190:	bne	1b1a4 <__assert_fail@plt+0x9118>
   1b194:	ldrb	r0, [sp, #27]
   1b198:	add	r0, sl, r0
   1b19c:	sub	sp, fp, #28
   1b1a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1a4:	mov	r0, r6
   1b1a8:	bl	21218 <__assert_fail@plt+0xf18c>
   1b1ac:	ldrb	r0, [sp, #27]
   1b1b0:	add	r0, sl, r0
   1b1b4:	sub	sp, fp, #28
   1b1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1bc:	bl	11f54 <__overflow@plt>
   1b1c0:	b	19cf8 <__assert_fail@plt+0x7c6c>
   1b1c4:	mov	r1, #32
   1b1c8:	bl	11f54 <__overflow@plt>
   1b1cc:	cmp	sl, #0
   1b1d0:	bne	19ef0 <__assert_fail@plt+0x7e64>
   1b1d4:	b	19c90 <__assert_fail@plt+0x7c04>
   1b1d8:	bl	11f54 <__overflow@plt>
   1b1dc:	b	1b180 <__assert_fail@plt+0x90f4>
   1b1e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1e4:	add	fp, sp, #28
   1b1e8:	sub	sp, sp, #140	; 0x8c
   1b1ec:	movw	r4, #456	; 0x1c8
   1b1f0:	movw	r8, #4688	; 0x1250
   1b1f4:	movw	r9, #780	; 0x30c
   1b1f8:	movw	r5, #1096	; 0x448
   1b1fc:	add	r6, sp, #12
   1b200:	movt	r4, #4
   1b204:	movt	r8, #4
   1b208:	movt	r9, #4
   1b20c:	movt	r5, #4
   1b210:	add	r0, r4, #24
   1b214:	add	sl, r4, #16
   1b218:	str	r0, [sp, #8]
   1b21c:	add	r0, r4, #8
   1b220:	str	r0, [sp, #4]
   1b224:	ldr	r0, [r8, #84]	; 0x54
   1b228:	cmp	r0, #0
   1b22c:	bne	1b258 <__assert_fail@plt+0x91cc>
   1b230:	b	1b268 <__assert_fail@plt+0x91dc>
   1b234:	mov	r0, r7
   1b238:	bl	11bac <raise@plt>
   1b23c:	mov	r0, #2
   1b240:	mov	r1, r6
   1b244:	mov	r2, #0
   1b248:	bl	11c0c <sigprocmask@plt>
   1b24c:	ldr	r0, [r8, #84]	; 0x54
   1b250:	cmp	r0, #0
   1b254:	beq	1b268 <__assert_fail@plt+0x91dc>
   1b258:	ldrb	r0, [r8, #13]
   1b25c:	cmp	r0, #1
   1b260:	beq	1b284 <__assert_fail@plt+0x91f8>
   1b264:	b	1b300 <__assert_fail@plt+0x9274>
   1b268:	ldr	r0, [r8, #80]	; 0x50
   1b26c:	cmp	r0, #0
   1b270:	subeq	sp, fp, #28
   1b274:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b278:	ldrb	r0, [r8, #13]
   1b27c:	cmp	r0, #1
   1b280:	bne	1b300 <__assert_fail@plt+0x9274>
   1b284:	ldr	r3, [r9]
   1b288:	ldr	r1, [r4]
   1b28c:	ldr	r0, [r4, #4]
   1b290:	mov	r2, #1
   1b294:	bl	11c90 <fwrite_unlocked@plt>
   1b298:	ldrb	r0, [r8, #13]
   1b29c:	cmp	r0, #0
   1b2a0:	bne	1b2ec <__assert_fail@plt+0x9260>
   1b2a4:	mov	r0, #1
   1b2a8:	strb	r0, [r8, #13]
   1b2ac:	mov	r0, #1
   1b2b0:	bl	11ea0 <tcgetpgrp@plt>
   1b2b4:	cmp	r0, #0
   1b2b8:	movge	r0, #1
   1b2bc:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1b2c0:	ldr	r0, [r4, #20]
   1b2c4:	cmp	r0, #0
   1b2c8:	beq	1b2d4 <__assert_fail@plt+0x9248>
   1b2cc:	mov	r0, sl
   1b2d0:	b	1b2e8 <__assert_fail@plt+0x925c>
   1b2d4:	mov	r0, r4
   1b2d8:	bl	18b9c <__assert_fail@plt+0x6b10>
   1b2dc:	ldr	r0, [sp, #8]
   1b2e0:	bl	18b9c <__assert_fail@plt+0x6b10>
   1b2e4:	ldr	r0, [sp, #4]
   1b2e8:	bl	18b9c <__assert_fail@plt+0x6b10>
   1b2ec:	ldr	r3, [r9]
   1b2f0:	ldr	r1, [r4, #8]
   1b2f4:	ldr	r0, [r4, #12]
   1b2f8:	mov	r2, #1
   1b2fc:	bl	11c90 <fwrite_unlocked@plt>
   1b300:	ldr	r0, [r9]
   1b304:	bl	11d14 <fflush_unlocked@plt>
   1b308:	mov	r0, #0
   1b30c:	mov	r1, r5
   1b310:	mov	r2, r6
   1b314:	bl	11c0c <sigprocmask@plt>
   1b318:	ldr	r7, [r8, #84]	; 0x54
   1b31c:	ldr	r0, [r8, #80]	; 0x50
   1b320:	cmp	r0, #0
   1b324:	beq	1b338 <__assert_fail@plt+0x92ac>
   1b328:	sub	r0, r0, #1
   1b32c:	mov	r7, #19
   1b330:	str	r0, [r8, #80]	; 0x50
   1b334:	b	1b234 <__assert_fail@plt+0x91a8>
   1b338:	mov	r0, r7
   1b33c:	mov	r1, #0
   1b340:	bl	11c84 <signal@plt>
   1b344:	b	1b234 <__assert_fail@plt+0x91a8>
   1b348:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b34c:	add	fp, sp, #24
   1b350:	sub	sp, sp, #264	; 0x108
   1b354:	ldr	r8, [fp, #8]
   1b358:	mov	r4, r2
   1b35c:	add	r2, sp, #8
   1b360:	str	r2, [sp]
   1b364:	mov	r2, r3
   1b368:	mov	r3, r8
   1b36c:	bl	11f48 <statx@plt>
   1b370:	cmp	r0, #0
   1b374:	blt	1b464 <__assert_fail@plt+0x93d8>
   1b378:	ldr	r5, [sp, #144]	; 0x90
   1b37c:	ldr	r2, [sp, #148]	; 0x94
   1b380:	add	sl, r4, #64	; 0x40
   1b384:	tst	r8, #2048	; 0x800
   1b388:	mov	r1, r5
   1b38c:	bic	r3, r2, #255	; 0xff
   1b390:	uxtb	r2, r2
   1b394:	bfc	r1, #0, #12
   1b398:	bfi	r2, r5, #8, #12
   1b39c:	orr	r2, r2, r3, lsl #12
   1b3a0:	orr	r1, r1, r3, lsr #20
   1b3a4:	str	r2, [r4]
   1b3a8:	str	r1, [r4, #4]
   1b3ac:	ldr	r2, [sp, #40]	; 0x28
   1b3b0:	ldr	r3, [sp, #44]	; 0x2c
   1b3b4:	strd	r2, [r4, #96]	; 0x60
   1b3b8:	ldr	r2, [sp, #136]	; 0x88
   1b3bc:	ldr	r7, [sp, #140]	; 0x8c
   1b3c0:	ldrh	ip, [sp, #36]	; 0x24
   1b3c4:	ldr	lr, [sp, #24]
   1b3c8:	ldr	r3, [sp, #28]
   1b3cc:	ldr	r5, [sp, #32]
   1b3d0:	mov	r6, r2
   1b3d4:	bic	r1, r7, #255	; 0xff
   1b3d8:	uxtb	r7, r7
   1b3dc:	str	ip, [r4, #16]
   1b3e0:	str	lr, [r4, #20]
   1b3e4:	str	r3, [r4, #24]
   1b3e8:	str	r5, [r4, #28]
   1b3ec:	add	ip, r4, #48	; 0x30
   1b3f0:	bfc	r6, #0, #12
   1b3f4:	bfi	r7, r2, #8, #12
   1b3f8:	orr	r6, r6, r1, lsr #20
   1b3fc:	orr	r1, r7, r1, lsl #12
   1b400:	str	r1, [r4, #32]
   1b404:	str	r6, [r4, #36]	; 0x24
   1b408:	ldr	r1, [sp, #48]	; 0x30
   1b40c:	ldr	r2, [sp, #52]	; 0x34
   1b410:	ldr	r3, [sp, #12]
   1b414:	stm	ip, {r1, r2, r3}
   1b418:	ldr	r1, [sp, #56]	; 0x38
   1b41c:	ldr	r2, [sp, #60]	; 0x3c
   1b420:	ldr	r3, [sp, #72]	; 0x48
   1b424:	ldr	r7, [sp, #80]	; 0x50
   1b428:	ldr	r6, [sp, #120]	; 0x78
   1b42c:	ldr	r5, [sp, #128]	; 0x80
   1b430:	ldr	ip, [sp, #104]	; 0x68
   1b434:	ldr	lr, [sp, #112]	; 0x70
   1b438:	stm	sl, {r1, r2, r3, r7}
   1b43c:	add	r1, r4, #84	; 0x54
   1b440:	str	r6, [r4, #80]	; 0x50
   1b444:	stm	r1, {r5, ip, lr}
   1b448:	beq	1b464 <__assert_fail@plt+0x93d8>
   1b44c:	ldrb	r1, [sp, #9]
   1b450:	tst	r1, #8
   1b454:	bne	1b46c <__assert_fail@plt+0x93e0>
   1b458:	mvn	r1, #0
   1b45c:	str	r1, [r4, #80]	; 0x50
   1b460:	str	r1, [r4, #84]	; 0x54
   1b464:	sub	sp, fp, #24
   1b468:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b46c:	ldr	r2, [sp, #88]	; 0x58
   1b470:	ldr	r3, [sp, #96]	; 0x60
   1b474:	add	r1, r4, #80	; 0x50
   1b478:	strd	r2, [r1]
   1b47c:	sub	sp, fp, #24
   1b480:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b488:	add	fp, sp, #28
   1b48c:	sub	sp, sp, #36	; 0x24
   1b490:	ldr	r4, [r0]
   1b494:	mov	r9, r0
   1b498:	mov	r0, r2
   1b49c:	mov	r7, r3
   1b4a0:	mov	r6, r2
   1b4a4:	mov	r5, r1
   1b4a8:	bl	264fc <_obstack_memory_used@@Base+0x178>
   1b4ac:	movw	sl, #4688	; 0x1250
   1b4b0:	movt	sl, #4
   1b4b4:	ldrb	r1, [sl, #21]
   1b4b8:	cmp	r1, #0
   1b4bc:	beq	1b58c <__assert_fail@plt+0x9500>
   1b4c0:	sub	r1, r0, #1
   1b4c4:	clz	r0, r0
   1b4c8:	mov	r2, #0
   1b4cc:	cmp	r1, #2
   1b4d0:	lsr	r0, r0, #5
   1b4d4:	movwcc	r2, #1
   1b4d8:	orr	r8, r0, r2
   1b4dc:	cmp	r7, #0
   1b4e0:	beq	1b598 <__assert_fail@plt+0x950c>
   1b4e4:	mov	r0, r4
   1b4e8:	mov	r1, #8192	; 0x2000
   1b4ec:	mov	r2, r5
   1b4f0:	mvn	r3, #0
   1b4f4:	str	r6, [sp]
   1b4f8:	bl	265c0 <_obstack_memory_used@@Base+0x23c>
   1b4fc:	mov	r7, r0
   1b500:	cmp	r0, #8192	; 0x2000
   1b504:	bcc	1b52c <__assert_fail@plt+0x94a0>
   1b508:	add	r4, r7, #1
   1b50c:	mov	r0, r4
   1b510:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   1b514:	mov	r1, r4
   1b518:	mov	r2, r5
   1b51c:	mvn	r3, #0
   1b520:	str	r6, [sp]
   1b524:	mov	r4, r0
   1b528:	bl	265c0 <_obstack_memory_used@@Base+0x23c>
   1b52c:	ldrb	r0, [r4]
   1b530:	ldrb	r1, [r5]
   1b534:	mov	r6, #1
   1b538:	cmp	r1, r0
   1b53c:	bne	1b550 <__assert_fail@plt+0x94c4>
   1b540:	mov	r0, r5
   1b544:	bl	11eac <strlen@plt>
   1b548:	subs	r6, r0, r7
   1b54c:	movwne	r6, #1
   1b550:	ldr	r5, [fp, #8]
   1b554:	cmp	r8, #0
   1b558:	bne	1b5e0 <__assert_fail@plt+0x9554>
   1b55c:	cmp	r5, #0
   1b560:	str	r6, [sp, #12]
   1b564:	beq	1b950 <__assert_fail@plt+0x98c4>
   1b568:	bl	11d74 <__ctype_get_mb_cur_max@plt>
   1b56c:	cmp	r0, #2
   1b570:	bcc	1b954 <__assert_fail@plt+0x98c8>
   1b574:	mov	r0, r4
   1b578:	mov	r1, r7
   1b57c:	mov	r2, #0
   1b580:	bl	23c20 <__assert_fail@plt+0x11b94>
   1b584:	mov	r6, r0
   1b588:	b	1b9b4 <__assert_fail@plt+0x9928>
   1b58c:	mov	r8, #0
   1b590:	cmp	r7, #0
   1b594:	bne	1b4e4 <__assert_fail@plt+0x9458>
   1b598:	mov	r0, r5
   1b59c:	bl	11eac <strlen@plt>
   1b5a0:	mov	r7, r0
   1b5a4:	mov	r6, #0
   1b5a8:	cmp	r8, #0
   1b5ac:	beq	1b93c <__assert_fail@plt+0x98b0>
   1b5b0:	add	r6, r7, #1
   1b5b4:	cmp	r7, #8192	; 0x2000
   1b5b8:	bcc	1b5c8 <__assert_fail@plt+0x953c>
   1b5bc:	mov	r0, r6
   1b5c0:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   1b5c4:	mov	r4, r0
   1b5c8:	mov	r0, r4
   1b5cc:	mov	r1, r5
   1b5d0:	mov	r2, r6
   1b5d4:	bl	11c60 <memcpy@plt>
   1b5d8:	ldr	r5, [fp, #8]
   1b5dc:	mov	r6, #0
   1b5e0:	add	sl, r4, r7
   1b5e4:	bl	11d74 <__ctype_get_mb_cur_max@plt>
   1b5e8:	cmp	r0, #1
   1b5ec:	str	r6, [sp, #12]
   1b5f0:	bls	1b8f8 <__assert_fail@plt+0x986c>
   1b5f4:	cmp	r7, #1
   1b5f8:	blt	1b99c <__assert_fail@plt+0x9910>
   1b5fc:	mov	r3, #0
   1b600:	add	r7, sp, #24
   1b604:	mov	r6, #0
   1b608:	mov	r8, r4
   1b60c:	mov	r5, r4
   1b610:	ldrb	r0, [r5]
   1b614:	sub	r1, r0, #32
   1b618:	cmp	r1, #94	; 0x5e
   1b61c:	bhi	1b7bc <__assert_fail@plt+0x9730>
   1b620:	add	r2, pc, #0
   1b624:	ldr	pc, [r2, r1, lsl #2]
   1b628:	andeq	fp, r1, r4, lsr #15
   1b62c:	andeq	fp, r1, r4, lsr #15
   1b630:	andeq	fp, r1, r4, lsr #15
   1b634:	andeq	fp, r1, r4, lsr #15
   1b638:			; <UNDEFINED> instruction: 0x0001b7bc
   1b63c:	andeq	fp, r1, r4, lsr #15
   1b640:	andeq	fp, r1, r4, lsr #15
   1b644:	andeq	fp, r1, r4, lsr #15
   1b648:	andeq	fp, r1, r4, lsr #15
   1b64c:	andeq	fp, r1, r4, lsr #15
   1b650:	andeq	fp, r1, r4, lsr #15
   1b654:	andeq	fp, r1, r4, lsr #15
   1b658:	andeq	fp, r1, r4, lsr #15
   1b65c:	andeq	fp, r1, r4, lsr #15
   1b660:	andeq	fp, r1, r4, lsr #15
   1b664:	andeq	fp, r1, r4, lsr #15
   1b668:	andeq	fp, r1, r4, lsr #15
   1b66c:	andeq	fp, r1, r4, lsr #15
   1b670:	andeq	fp, r1, r4, lsr #15
   1b674:	andeq	fp, r1, r4, lsr #15
   1b678:	andeq	fp, r1, r4, lsr #15
   1b67c:	andeq	fp, r1, r4, lsr #15
   1b680:	andeq	fp, r1, r4, lsr #15
   1b684:	andeq	fp, r1, r4, lsr #15
   1b688:	andeq	fp, r1, r4, lsr #15
   1b68c:	andeq	fp, r1, r4, lsr #15
   1b690:	andeq	fp, r1, r4, lsr #15
   1b694:	andeq	fp, r1, r4, lsr #15
   1b698:	andeq	fp, r1, r4, lsr #15
   1b69c:	andeq	fp, r1, r4, lsr #15
   1b6a0:	andeq	fp, r1, r4, lsr #15
   1b6a4:	andeq	fp, r1, r4, lsr #15
   1b6a8:			; <UNDEFINED> instruction: 0x0001b7bc
   1b6ac:	andeq	fp, r1, r4, lsr #15
   1b6b0:	andeq	fp, r1, r4, lsr #15
   1b6b4:	andeq	fp, r1, r4, lsr #15
   1b6b8:	andeq	fp, r1, r4, lsr #15
   1b6bc:	andeq	fp, r1, r4, lsr #15
   1b6c0:	andeq	fp, r1, r4, lsr #15
   1b6c4:	andeq	fp, r1, r4, lsr #15
   1b6c8:	andeq	fp, r1, r4, lsr #15
   1b6cc:	andeq	fp, r1, r4, lsr #15
   1b6d0:	andeq	fp, r1, r4, lsr #15
   1b6d4:	andeq	fp, r1, r4, lsr #15
   1b6d8:	andeq	fp, r1, r4, lsr #15
   1b6dc:	andeq	fp, r1, r4, lsr #15
   1b6e0:	andeq	fp, r1, r4, lsr #15
   1b6e4:	andeq	fp, r1, r4, lsr #15
   1b6e8:	andeq	fp, r1, r4, lsr #15
   1b6ec:	andeq	fp, r1, r4, lsr #15
   1b6f0:	andeq	fp, r1, r4, lsr #15
   1b6f4:	andeq	fp, r1, r4, lsr #15
   1b6f8:	andeq	fp, r1, r4, lsr #15
   1b6fc:	andeq	fp, r1, r4, lsr #15
   1b700:	andeq	fp, r1, r4, lsr #15
   1b704:	andeq	fp, r1, r4, lsr #15
   1b708:	andeq	fp, r1, r4, lsr #15
   1b70c:	andeq	fp, r1, r4, lsr #15
   1b710:	andeq	fp, r1, r4, lsr #15
   1b714:	andeq	fp, r1, r4, lsr #15
   1b718:	andeq	fp, r1, r4, lsr #15
   1b71c:	andeq	fp, r1, r4, lsr #15
   1b720:	andeq	fp, r1, r4, lsr #15
   1b724:	andeq	fp, r1, r4, lsr #15
   1b728:			; <UNDEFINED> instruction: 0x0001b7bc
   1b72c:	andeq	fp, r1, r4, lsr #15
   1b730:	andeq	fp, r1, r4, lsr #15
   1b734:	andeq	fp, r1, r4, lsr #15
   1b738:	andeq	fp, r1, r4, lsr #15
   1b73c:	andeq	fp, r1, r4, lsr #15
   1b740:	andeq	fp, r1, r4, lsr #15
   1b744:	andeq	fp, r1, r4, lsr #15
   1b748:	andeq	fp, r1, r4, lsr #15
   1b74c:	andeq	fp, r1, r4, lsr #15
   1b750:	andeq	fp, r1, r4, lsr #15
   1b754:	andeq	fp, r1, r4, lsr #15
   1b758:	andeq	fp, r1, r4, lsr #15
   1b75c:	andeq	fp, r1, r4, lsr #15
   1b760:	andeq	fp, r1, r4, lsr #15
   1b764:	andeq	fp, r1, r4, lsr #15
   1b768:	andeq	fp, r1, r4, lsr #15
   1b76c:	andeq	fp, r1, r4, lsr #15
   1b770:	andeq	fp, r1, r4, lsr #15
   1b774:	andeq	fp, r1, r4, lsr #15
   1b778:	andeq	fp, r1, r4, lsr #15
   1b77c:	andeq	fp, r1, r4, lsr #15
   1b780:	andeq	fp, r1, r4, lsr #15
   1b784:	andeq	fp, r1, r4, lsr #15
   1b788:	andeq	fp, r1, r4, lsr #15
   1b78c:	andeq	fp, r1, r4, lsr #15
   1b790:	andeq	fp, r1, r4, lsr #15
   1b794:	andeq	fp, r1, r4, lsr #15
   1b798:	andeq	fp, r1, r4, lsr #15
   1b79c:	andeq	fp, r1, r4, lsr #15
   1b7a0:	andeq	fp, r1, r4, lsr #15
   1b7a4:	strb	r0, [r8], #1
   1b7a8:	add	r6, r6, #1
   1b7ac:	add	r5, r5, #1
   1b7b0:	cmp	r5, sl
   1b7b4:	bcc	1b610 <__assert_fail@plt+0x9584>
   1b7b8:	b	1b9a4 <__assert_fail@plt+0x9918>
   1b7bc:	str	r9, [sp, #4]
   1b7c0:	str	r3, [sp, #28]
   1b7c4:	str	r3, [sp, #24]
   1b7c8:	str	r4, [sp, #8]
   1b7cc:	sub	r2, sl, r5
   1b7d0:	add	r0, sp, #20
   1b7d4:	mov	r1, r5
   1b7d8:	mov	r3, r7
   1b7dc:	bl	2371c <__assert_fail@plt+0x11690>
   1b7e0:	cmp	r0, #0
   1b7e4:	beq	1b800 <__assert_fail@plt+0x9774>
   1b7e8:	mov	r9, r0
   1b7ec:	cmn	r0, #2
   1b7f0:	beq	1b8c8 <__assert_fail@plt+0x983c>
   1b7f4:	cmn	r9, #1
   1b7f8:	bne	1b804 <__assert_fail@plt+0x9778>
   1b7fc:	b	1b8d0 <__assert_fail@plt+0x9844>
   1b800:	mov	r9, #1
   1b804:	add	r0, r5, r9
   1b808:	str	r0, [sp, #16]
   1b80c:	ldr	r0, [sp, #20]
   1b810:	bl	11c00 <wcwidth@plt>
   1b814:	cmp	r0, #0
   1b818:	blt	1b89c <__assert_fail@plt+0x9810>
   1b81c:	mov	lr, r7
   1b820:	cmp	r9, #16
   1b824:	bcc	1b874 <__assert_fail@plt+0x97e8>
   1b828:	ldr	r1, [sp, #16]
   1b82c:	cmp	r8, r1
   1b830:	addcc	r1, r8, r9
   1b834:	cmpcc	r5, r1
   1b838:	bcc	1b874 <__assert_fail@plt+0x97e8>
   1b83c:	bic	ip, r9, #15
   1b840:	mov	r7, r8
   1b844:	add	r3, r5, ip
   1b848:	add	r2, r8, ip
   1b84c:	sub	r1, r9, ip
   1b850:	mov	r4, ip
   1b854:	vld1.8	{d16-d17}, [r5]!
   1b858:	subs	r4, r4, #16
   1b85c:	vst1.8	{d16-d17}, [r7]!
   1b860:	bne	1b854 <__assert_fail@plt+0x97c8>
   1b864:	ldr	r4, [sp, #8]
   1b868:	cmp	r9, ip
   1b86c:	bne	1b880 <__assert_fail@plt+0x97f4>
   1b870:	b	1b890 <__assert_fail@plt+0x9804>
   1b874:	mov	r1, r9
   1b878:	mov	r2, r8
   1b87c:	mov	r3, r5
   1b880:	ldrb	r7, [r3], #1
   1b884:	subs	r1, r1, #1
   1b888:	strb	r7, [r2], #1
   1b88c:	bne	1b880 <__assert_fail@plt+0x97f4>
   1b890:	add	r8, r8, r9
   1b894:	mov	r7, lr
   1b898:	b	1b8a8 <__assert_fail@plt+0x981c>
   1b89c:	mov	r0, #63	; 0x3f
   1b8a0:	strb	r0, [r8], #1
   1b8a4:	mov	r0, #1
   1b8a8:	add	r6, r0, r6
   1b8ac:	mov	r0, r7
   1b8b0:	bl	11c78 <mbsinit@plt>
   1b8b4:	ldr	r1, [sp, #16]
   1b8b8:	cmp	r0, #0
   1b8bc:	mov	r5, r1
   1b8c0:	beq	1b7cc <__assert_fail@plt+0x9740>
   1b8c4:	b	1b8e0 <__assert_fail@plt+0x9854>
   1b8c8:	mov	r1, sl
   1b8cc:	b	1b8d4 <__assert_fail@plt+0x9848>
   1b8d0:	add	r1, r5, #1
   1b8d4:	mov	r0, #63	; 0x3f
   1b8d8:	add	r6, r6, #1
   1b8dc:	strb	r0, [r8], #1
   1b8e0:	ldr	r9, [sp, #4]
   1b8e4:	mov	r5, r1
   1b8e8:	mov	r3, #0
   1b8ec:	cmp	r5, sl
   1b8f0:	bcc	1b610 <__assert_fail@plt+0x9584>
   1b8f4:	b	1b9a4 <__assert_fail@plt+0x9918>
   1b8f8:	cmp	r7, #1
   1b8fc:	blt	1b930 <__assert_fail@plt+0x98a4>
   1b900:	bl	11e70 <__ctype_b_loc@plt>
   1b904:	mov	r1, #63	; 0x3f
   1b908:	mov	r2, r4
   1b90c:	ldrb	r3, [r2]
   1b910:	ldr	r6, [r0]
   1b914:	add	r3, r6, r3, lsl #1
   1b918:	ldrb	r3, [r3, #1]
   1b91c:	tst	r3, #64	; 0x40
   1b920:	strbeq	r1, [r2]
   1b924:	add	r2, r2, #1
   1b928:	cmp	r2, sl
   1b92c:	bcc	1b90c <__assert_fail@plt+0x9880>
   1b930:	movw	sl, #4688	; 0x1250
   1b934:	mov	r6, r7
   1b938:	b	1b9b0 <__assert_fail@plt+0x9924>
   1b93c:	mov	r4, r5
   1b940:	ldr	r5, [fp, #8]
   1b944:	cmp	r5, #0
   1b948:	str	r6, [sp, #12]
   1b94c:	bne	1b568 <__assert_fail@plt+0x94dc>
   1b950:	b	1b9b4 <__assert_fail@plt+0x9928>
   1b954:	cmp	r7, #1
   1b958:	blt	1b9f4 <__assert_fail@plt+0x9968>
   1b95c:	mov	r8, r4
   1b960:	add	r4, r4, r7
   1b964:	bl	11e70 <__ctype_b_loc@plt>
   1b968:	ldr	r0, [r0]
   1b96c:	mov	r6, #0
   1b970:	mov	r3, r8
   1b974:	mov	r1, r8
   1b978:	ldrb	r2, [r1], #1
   1b97c:	add	r2, r0, r2, lsl #1
   1b980:	cmp	r1, r4
   1b984:	ldrh	r2, [r2]
   1b988:	ubfx	r2, r2, #14, #1
   1b98c:	add	r6, r6, r2
   1b990:	bcc	1b978 <__assert_fail@plt+0x98ec>
   1b994:	mov	r4, r3
   1b998:	b	1b9b4 <__assert_fail@plt+0x9928>
   1b99c:	mov	r6, #0
   1b9a0:	mov	r8, r4
   1b9a4:	ldr	r5, [fp, #8]
   1b9a8:	movw	sl, #4688	; 0x1250
   1b9ac:	sub	r7, r8, r4
   1b9b0:	movt	sl, #4
   1b9b4:	ldrb	r2, [sl, #22]
   1b9b8:	ldr	r0, [fp, #12]
   1b9bc:	mov	r1, #0
   1b9c0:	cmp	r2, #0
   1b9c4:	beq	1b9d8 <__assert_fail@plt+0x994c>
   1b9c8:	ldrb	r2, [sl, #25]
   1b9cc:	cmp	r2, #1
   1b9d0:	ldreq	r1, [sp, #12]
   1b9d4:	eoreq	r1, r1, #1
   1b9d8:	cmp	r5, #0
   1b9dc:	strb	r1, [r0]
   1b9e0:	mov	r0, r7
   1b9e4:	strne	r6, [r5]
   1b9e8:	str	r4, [r9]
   1b9ec:	sub	sp, fp, #28
   1b9f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9f4:	mov	r6, #0
   1b9f8:	b	1b9b4 <__assert_fail@plt+0x9928>
   1b9fc:	push	{fp, lr}
   1ba00:	mov	fp, sp
   1ba04:	movw	r1, #4688	; 0x1250
   1ba08:	mov	r0, #2
   1ba0c:	movt	r1, #4
   1ba10:	ldrb	r3, [r1, #15]
   1ba14:	ldrb	r2, [r1, #8]
   1ba18:	cmp	r3, #0
   1ba1c:	movwne	r0, #258	; 0x102
   1ba20:	bfi	r0, r2, #10, #1
   1ba24:	ldr	r2, [r1, #40]	; 0x28
   1ba28:	cmp	r2, #0
   1ba2c:	bne	1ba78 <__assert_fail@plt+0x99ec>
   1ba30:	ldr	r2, [r1, #96]	; 0x60
   1ba34:	cmp	r2, #4
   1ba38:	bcs	1bac0 <__assert_fail@plt+0x9a34>
   1ba3c:	movw	r3, #62716	; 0xf4fc
   1ba40:	movt	r3, #2
   1ba44:	ldr	r2, [r3, r2, lsl #2]
   1ba48:	orr	r0, r2, r0
   1ba4c:	ldrb	r2, [r1, #14]
   1ba50:	cmp	r2, #1
   1ba54:	bne	1ba68 <__assert_fail@plt+0x99dc>
   1ba58:	ldrb	r2, [r1, #19]
   1ba5c:	cmp	r2, #1
   1ba60:	orreq	r0, r0, #8
   1ba64:	b	1ba6c <__assert_fail@plt+0x99e0>
   1ba68:	orr	r0, r0, #8
   1ba6c:	ldrb	r2, [r1, #17]
   1ba70:	cmp	r2, #0
   1ba74:	orreq	r0, r0, #16
   1ba78:	ldr	r2, [r1, #60]	; 0x3c
   1ba7c:	cmp	r2, #6
   1ba80:	bhi	1bac0 <__assert_fail@plt+0x9a34>
   1ba84:	mov	ip, #1
   1ba88:	mov	r3, #87	; 0x57
   1ba8c:	tst	r3, ip, lsl r2
   1ba90:	popne	{fp, pc}
   1ba94:	cmp	r2, #3
   1ba98:	bne	1baa4 <__assert_fail@plt+0x9a18>
   1ba9c:	orr	r0, r0, #512	; 0x200
   1baa0:	pop	{fp, pc}
   1baa4:	ldr	r1, [r1, #96]	; 0x60
   1baa8:	cmp	r1, #4
   1baac:	movwcc	r2, #62732	; 0xf50c
   1bab0:	movtcc	r2, #2
   1bab4:	ldrcc	r1, [r2, r1, lsl #2]
   1bab8:	orrcc	r0, r1, r0
   1babc:	popcc	{fp, pc}
   1bac0:	bl	12038 <abort@plt>
   1bac4:	push	{r4, r5, fp, lr}
   1bac8:	add	fp, sp, #8
   1bacc:	ldr	r4, [r1]
   1bad0:	ldr	r5, [r0]
   1bad4:	bl	11ed0 <__errno_location@plt>
   1bad8:	mov	r1, #0
   1badc:	str	r1, [r0]
   1bae0:	mov	r0, r5
   1bae4:	mov	r1, r4
   1bae8:	pop	{r4, r5, fp, lr}
   1baec:	b	11de0 <strcoll@plt>
   1baf0:	push	{r4, r5, fp, lr}
   1baf4:	add	fp, sp, #8
   1baf8:	ldr	r5, [r1, #120]	; 0x78
   1bafc:	mov	r2, #1
   1bb00:	mov	r3, #1
   1bb04:	cmp	r5, #3
   1bb08:	beq	1bb2c <__assert_fail@plt+0x9aa0>
   1bb0c:	cmp	r5, #9
   1bb10:	mov	r3, #1
   1bb14:	beq	1bb2c <__assert_fail@plt+0x9aa0>
   1bb18:	ldr	r3, [r1, #124]	; 0x7c
   1bb1c:	and	r3, r3, #61440	; 0xf000
   1bb20:	sub	r3, r3, #16384	; 0x4000
   1bb24:	clz	r3, r3
   1bb28:	lsr	r3, r3, #5
   1bb2c:	ldr	r5, [r0, #120]	; 0x78
   1bb30:	cmp	r5, #3
   1bb34:	cmpne	r5, #9
   1bb38:	beq	1bb50 <__assert_fail@plt+0x9ac4>
   1bb3c:	ldr	r2, [r0, #124]	; 0x7c
   1bb40:	and	r2, r2, #61440	; 0xf000
   1bb44:	sub	r2, r2, #16384	; 0x4000
   1bb48:	clz	r2, r2
   1bb4c:	lsr	r2, r2, #5
   1bb50:	subs	r2, r3, r2
   1bb54:	movne	r0, r2
   1bb58:	popne	{r4, r5, fp, pc}
   1bb5c:	ldr	r4, [r1]
   1bb60:	ldr	r5, [r0]
   1bb64:	bl	11ed0 <__errno_location@plt>
   1bb68:	mov	r1, #0
   1bb6c:	str	r1, [r0]
   1bb70:	mov	r0, r5
   1bb74:	mov	r1, r4
   1bb78:	pop	{r4, r5, fp, lr}
   1bb7c:	b	11de0 <strcoll@plt>
   1bb80:	push	{r4, r5, fp, lr}
   1bb84:	add	fp, sp, #8
   1bb88:	ldr	r4, [r0]
   1bb8c:	ldr	r5, [r1]
   1bb90:	bl	11ed0 <__errno_location@plt>
   1bb94:	mov	r1, #0
   1bb98:	str	r1, [r0]
   1bb9c:	mov	r0, r5
   1bba0:	mov	r1, r4
   1bba4:	pop	{r4, r5, fp, lr}
   1bba8:	b	11de0 <strcoll@plt>
   1bbac:	push	{r4, r5, fp, lr}
   1bbb0:	add	fp, sp, #8
   1bbb4:	ldr	r5, [r1, #120]	; 0x78
   1bbb8:	mov	r2, #1
   1bbbc:	mov	r3, #1
   1bbc0:	cmp	r5, #3
   1bbc4:	beq	1bbe8 <__assert_fail@plt+0x9b5c>
   1bbc8:	cmp	r5, #9
   1bbcc:	mov	r3, #1
   1bbd0:	beq	1bbe8 <__assert_fail@plt+0x9b5c>
   1bbd4:	ldr	r3, [r1, #124]	; 0x7c
   1bbd8:	and	r3, r3, #61440	; 0xf000
   1bbdc:	sub	r3, r3, #16384	; 0x4000
   1bbe0:	clz	r3, r3
   1bbe4:	lsr	r3, r3, #5
   1bbe8:	ldr	r5, [r0, #120]	; 0x78
   1bbec:	cmp	r5, #3
   1bbf0:	cmpne	r5, #9
   1bbf4:	beq	1bc0c <__assert_fail@plt+0x9b80>
   1bbf8:	ldr	r2, [r0, #124]	; 0x7c
   1bbfc:	and	r2, r2, #61440	; 0xf000
   1bc00:	sub	r2, r2, #16384	; 0x4000
   1bc04:	clz	r2, r2
   1bc08:	lsr	r2, r2, #5
   1bc0c:	subs	r2, r3, r2
   1bc10:	movne	r0, r2
   1bc14:	popne	{r4, r5, fp, pc}
   1bc18:	ldr	r4, [r0]
   1bc1c:	ldr	r5, [r1]
   1bc20:	bl	11ed0 <__errno_location@plt>
   1bc24:	mov	r1, #0
   1bc28:	str	r1, [r0]
   1bc2c:	mov	r0, r5
   1bc30:	mov	r1, r4
   1bc34:	pop	{r4, r5, fp, lr}
   1bc38:	b	11de0 <strcoll@plt>
   1bc3c:	ldr	r1, [r1]
   1bc40:	ldr	r0, [r0]
   1bc44:	b	11bd0 <strcmp@plt>
   1bc48:	ldr	r2, [r1, #120]	; 0x78
   1bc4c:	mov	ip, #1
   1bc50:	mov	r3, #1
   1bc54:	cmp	r2, #3
   1bc58:	beq	1bc7c <__assert_fail@plt+0x9bf0>
   1bc5c:	cmp	r2, #9
   1bc60:	mov	r3, #1
   1bc64:	beq	1bc7c <__assert_fail@plt+0x9bf0>
   1bc68:	ldr	r2, [r1, #124]	; 0x7c
   1bc6c:	and	r2, r2, #61440	; 0xf000
   1bc70:	sub	r2, r2, #16384	; 0x4000
   1bc74:	clz	r2, r2
   1bc78:	lsr	r3, r2, #5
   1bc7c:	ldr	r2, [r0, #120]	; 0x78
   1bc80:	cmp	r2, #3
   1bc84:	cmpne	r2, #9
   1bc88:	beq	1bca0 <__assert_fail@plt+0x9c14>
   1bc8c:	ldr	r2, [r0, #124]	; 0x7c
   1bc90:	and	r2, r2, #61440	; 0xf000
   1bc94:	sub	r2, r2, #16384	; 0x4000
   1bc98:	clz	r2, r2
   1bc9c:	lsr	ip, r2, #5
   1bca0:	subs	r2, r3, ip
   1bca4:	movne	r0, r2
   1bca8:	bxne	lr
   1bcac:	ldr	r1, [r1]
   1bcb0:	ldr	r0, [r0]
   1bcb4:	b	11bd0 <strcmp@plt>
   1bcb8:	ldr	r2, [r0]
   1bcbc:	ldr	r0, [r1]
   1bcc0:	mov	r1, r2
   1bcc4:	b	11bd0 <strcmp@plt>
   1bcc8:	ldr	r2, [r1, #120]	; 0x78
   1bccc:	mov	ip, #1
   1bcd0:	mov	r3, #1
   1bcd4:	cmp	r2, #3
   1bcd8:	beq	1bcfc <__assert_fail@plt+0x9c70>
   1bcdc:	cmp	r2, #9
   1bce0:	mov	r3, #1
   1bce4:	beq	1bcfc <__assert_fail@plt+0x9c70>
   1bce8:	ldr	r2, [r1, #124]	; 0x7c
   1bcec:	and	r2, r2, #61440	; 0xf000
   1bcf0:	sub	r2, r2, #16384	; 0x4000
   1bcf4:	clz	r2, r2
   1bcf8:	lsr	r3, r2, #5
   1bcfc:	ldr	r2, [r0, #120]	; 0x78
   1bd00:	cmp	r2, #3
   1bd04:	cmpne	r2, #9
   1bd08:	beq	1bd20 <__assert_fail@plt+0x9c94>
   1bd0c:	ldr	r2, [r0, #124]	; 0x7c
   1bd10:	and	r2, r2, #61440	; 0xf000
   1bd14:	sub	r2, r2, #16384	; 0x4000
   1bd18:	clz	r2, r2
   1bd1c:	lsr	ip, r2, #5
   1bd20:	subs	r2, r3, ip
   1bd24:	movne	r0, r2
   1bd28:	bxne	lr
   1bd2c:	ldr	r2, [r0]
   1bd30:	ldr	r0, [r1]
   1bd34:	mov	r1, r2
   1bd38:	b	11bd0 <strcmp@plt>
   1bd3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bd40:	add	fp, sp, #24
   1bd44:	ldr	r8, [r0]
   1bd48:	mov	r5, r1
   1bd4c:	mov	r1, #46	; 0x2e
   1bd50:	mov	r0, r8
   1bd54:	bl	11f84 <strrchr@plt>
   1bd58:	ldr	r5, [r5]
   1bd5c:	mov	r7, r0
   1bd60:	mov	r1, #46	; 0x2e
   1bd64:	mov	r0, r5
   1bd68:	bl	11f84 <strrchr@plt>
   1bd6c:	mov	r4, r0
   1bd70:	bl	11ed0 <__errno_location@plt>
   1bd74:	movw	r1, #56125	; 0xdb3d
   1bd78:	cmp	r7, #0
   1bd7c:	mov	r9, #0
   1bd80:	mov	r6, r0
   1bd84:	movt	r1, #2
   1bd88:	str	r9, [r0]
   1bd8c:	moveq	r7, r1
   1bd90:	cmp	r4, #0
   1bd94:	movne	r1, r4
   1bd98:	mov	r0, r7
   1bd9c:	bl	11de0 <strcoll@plt>
   1bda0:	cmp	r0, #0
   1bda4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bda8:	str	r9, [r6]
   1bdac:	mov	r0, r8
   1bdb0:	mov	r1, r5
   1bdb4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bdb8:	b	11de0 <strcoll@plt>
   1bdbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bdc0:	add	fp, sp, #24
   1bdc4:	ldr	r3, [r1, #120]	; 0x78
   1bdc8:	mov	r4, r1
   1bdcc:	mov	r1, #1
   1bdd0:	mov	r2, #1
   1bdd4:	cmp	r3, #3
   1bdd8:	beq	1bdfc <__assert_fail@plt+0x9d70>
   1bddc:	cmp	r3, #9
   1bde0:	mov	r2, #1
   1bde4:	beq	1bdfc <__assert_fail@plt+0x9d70>
   1bde8:	ldr	r2, [r4, #124]	; 0x7c
   1bdec:	and	r2, r2, #61440	; 0xf000
   1bdf0:	sub	r2, r2, #16384	; 0x4000
   1bdf4:	clz	r2, r2
   1bdf8:	lsr	r2, r2, #5
   1bdfc:	ldr	r3, [r0, #120]	; 0x78
   1be00:	cmp	r3, #3
   1be04:	cmpne	r3, #9
   1be08:	bne	1be8c <__assert_fail@plt+0x9e00>
   1be0c:	subs	r1, r2, r1
   1be10:	bne	1bea8 <__assert_fail@plt+0x9e1c>
   1be14:	ldr	r8, [r0]
   1be18:	mov	r1, #46	; 0x2e
   1be1c:	mov	r0, r8
   1be20:	bl	11f84 <strrchr@plt>
   1be24:	ldr	r4, [r4]
   1be28:	mov	r7, r0
   1be2c:	mov	r1, #46	; 0x2e
   1be30:	mov	r0, r4
   1be34:	bl	11f84 <strrchr@plt>
   1be38:	mov	r5, r0
   1be3c:	bl	11ed0 <__errno_location@plt>
   1be40:	movw	r1, #56125	; 0xdb3d
   1be44:	cmp	r7, #0
   1be48:	mov	r9, #0
   1be4c:	mov	r6, r0
   1be50:	movt	r1, #2
   1be54:	str	r9, [r0]
   1be58:	moveq	r7, r1
   1be5c:	cmp	r5, #0
   1be60:	movne	r1, r5
   1be64:	mov	r0, r7
   1be68:	bl	11de0 <strcoll@plt>
   1be6c:	mov	r1, r0
   1be70:	cmp	r0, #0
   1be74:	bne	1bea8 <__assert_fail@plt+0x9e1c>
   1be78:	str	r9, [r6]
   1be7c:	mov	r0, r8
   1be80:	mov	r1, r4
   1be84:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1be88:	b	11de0 <strcoll@plt>
   1be8c:	ldr	r1, [r0, #124]	; 0x7c
   1be90:	and	r1, r1, #61440	; 0xf000
   1be94:	sub	r1, r1, #16384	; 0x4000
   1be98:	clz	r1, r1
   1be9c:	lsr	r1, r1, #5
   1bea0:	subs	r1, r2, r1
   1bea4:	beq	1be14 <__assert_fail@plt+0x9d88>
   1bea8:	mov	r0, r1
   1beac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1beb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1beb4:	add	fp, sp, #24
   1beb8:	ldr	r8, [r1]
   1bebc:	mov	r5, r0
   1bec0:	mov	r1, #46	; 0x2e
   1bec4:	mov	r0, r8
   1bec8:	bl	11f84 <strrchr@plt>
   1becc:	ldr	r5, [r5]
   1bed0:	mov	r7, r0
   1bed4:	mov	r1, #46	; 0x2e
   1bed8:	mov	r0, r5
   1bedc:	bl	11f84 <strrchr@plt>
   1bee0:	mov	r4, r0
   1bee4:	bl	11ed0 <__errno_location@plt>
   1bee8:	movw	r1, #56125	; 0xdb3d
   1beec:	cmp	r7, #0
   1bef0:	mov	r9, #0
   1bef4:	mov	r6, r0
   1bef8:	movt	r1, #2
   1befc:	str	r9, [r0]
   1bf00:	moveq	r7, r1
   1bf04:	cmp	r4, #0
   1bf08:	movne	r1, r4
   1bf0c:	mov	r0, r7
   1bf10:	bl	11de0 <strcoll@plt>
   1bf14:	cmp	r0, #0
   1bf18:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bf1c:	str	r9, [r6]
   1bf20:	mov	r0, r8
   1bf24:	mov	r1, r5
   1bf28:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bf2c:	b	11de0 <strcoll@plt>
   1bf30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bf34:	add	fp, sp, #24
   1bf38:	ldr	r3, [r1, #120]	; 0x78
   1bf3c:	mov	r4, r0
   1bf40:	mov	r0, #1
   1bf44:	mov	r2, #1
   1bf48:	cmp	r3, #3
   1bf4c:	beq	1bf70 <__assert_fail@plt+0x9ee4>
   1bf50:	cmp	r3, #9
   1bf54:	mov	r2, #1
   1bf58:	beq	1bf70 <__assert_fail@plt+0x9ee4>
   1bf5c:	ldr	r2, [r1, #124]	; 0x7c
   1bf60:	and	r2, r2, #61440	; 0xf000
   1bf64:	sub	r2, r2, #16384	; 0x4000
   1bf68:	clz	r2, r2
   1bf6c:	lsr	r2, r2, #5
   1bf70:	ldr	r3, [r4, #120]	; 0x78
   1bf74:	cmp	r3, #3
   1bf78:	cmpne	r3, #9
   1bf7c:	beq	1bf94 <__assert_fail@plt+0x9f08>
   1bf80:	ldr	r0, [r4, #124]	; 0x7c
   1bf84:	and	r0, r0, #61440	; 0xf000
   1bf88:	sub	r0, r0, #16384	; 0x4000
   1bf8c:	clz	r0, r0
   1bf90:	lsr	r0, r0, #5
   1bf94:	subs	r0, r2, r0
   1bf98:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bf9c:	ldr	r8, [r1]
   1bfa0:	mov	r1, #46	; 0x2e
   1bfa4:	mov	r0, r8
   1bfa8:	bl	11f84 <strrchr@plt>
   1bfac:	ldr	r4, [r4]
   1bfb0:	mov	r7, r0
   1bfb4:	mov	r1, #46	; 0x2e
   1bfb8:	mov	r0, r4
   1bfbc:	bl	11f84 <strrchr@plt>
   1bfc0:	mov	r5, r0
   1bfc4:	bl	11ed0 <__errno_location@plt>
   1bfc8:	movw	r1, #56125	; 0xdb3d
   1bfcc:	cmp	r7, #0
   1bfd0:	mov	r9, #0
   1bfd4:	mov	r6, r0
   1bfd8:	movt	r1, #2
   1bfdc:	str	r9, [r0]
   1bfe0:	moveq	r7, r1
   1bfe4:	cmp	r5, #0
   1bfe8:	movne	r1, r5
   1bfec:	mov	r0, r7
   1bff0:	bl	11de0 <strcoll@plt>
   1bff4:	cmp	r0, #0
   1bff8:	beq	1c000 <__assert_fail@plt+0x9f74>
   1bffc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c000:	str	r9, [r6]
   1c004:	mov	r0, r8
   1c008:	mov	r1, r4
   1c00c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c010:	b	11de0 <strcoll@plt>
   1c014:	push	{r4, r5, r6, sl, fp, lr}
   1c018:	add	fp, sp, #16
   1c01c:	ldr	r4, [r0]
   1c020:	mov	r5, r1
   1c024:	mov	r1, #46	; 0x2e
   1c028:	mov	r0, r4
   1c02c:	bl	11f84 <strrchr@plt>
   1c030:	ldr	r5, [r5]
   1c034:	mov	r6, r0
   1c038:	mov	r1, #46	; 0x2e
   1c03c:	mov	r0, r5
   1c040:	bl	11f84 <strrchr@plt>
   1c044:	movw	r1, #56125	; 0xdb3d
   1c048:	cmp	r6, #0
   1c04c:	movt	r1, #2
   1c050:	moveq	r6, r1
   1c054:	cmp	r0, #0
   1c058:	movne	r1, r0
   1c05c:	mov	r0, r6
   1c060:	bl	11bd0 <strcmp@plt>
   1c064:	cmp	r0, #0
   1c068:	popne	{r4, r5, r6, sl, fp, pc}
   1c06c:	mov	r0, r4
   1c070:	mov	r1, r5
   1c074:	pop	{r4, r5, r6, sl, fp, lr}
   1c078:	b	11bd0 <strcmp@plt>
   1c07c:	push	{r4, r5, r6, sl, fp, lr}
   1c080:	add	fp, sp, #16
   1c084:	ldr	r3, [r1, #120]	; 0x78
   1c088:	mov	r4, r1
   1c08c:	mov	r1, #1
   1c090:	mov	r2, #1
   1c094:	cmp	r3, #3
   1c098:	beq	1c0bc <__assert_fail@plt+0xa030>
   1c09c:	cmp	r3, #9
   1c0a0:	mov	r2, #1
   1c0a4:	beq	1c0bc <__assert_fail@plt+0xa030>
   1c0a8:	ldr	r2, [r4, #124]	; 0x7c
   1c0ac:	and	r2, r2, #61440	; 0xf000
   1c0b0:	sub	r2, r2, #16384	; 0x4000
   1c0b4:	clz	r2, r2
   1c0b8:	lsr	r2, r2, #5
   1c0bc:	ldr	r3, [r0, #120]	; 0x78
   1c0c0:	cmp	r3, #3
   1c0c4:	cmpne	r3, #9
   1c0c8:	bne	1c134 <__assert_fail@plt+0xa0a8>
   1c0cc:	subs	r1, r2, r1
   1c0d0:	bne	1c150 <__assert_fail@plt+0xa0c4>
   1c0d4:	ldr	r5, [r0]
   1c0d8:	mov	r1, #46	; 0x2e
   1c0dc:	mov	r0, r5
   1c0e0:	bl	11f84 <strrchr@plt>
   1c0e4:	ldr	r4, [r4]
   1c0e8:	mov	r6, r0
   1c0ec:	mov	r1, #46	; 0x2e
   1c0f0:	mov	r0, r4
   1c0f4:	bl	11f84 <strrchr@plt>
   1c0f8:	movw	r1, #56125	; 0xdb3d
   1c0fc:	cmp	r6, #0
   1c100:	movt	r1, #2
   1c104:	moveq	r6, r1
   1c108:	cmp	r0, #0
   1c10c:	movne	r1, r0
   1c110:	mov	r0, r6
   1c114:	bl	11bd0 <strcmp@plt>
   1c118:	mov	r1, r0
   1c11c:	cmp	r0, #0
   1c120:	bne	1c150 <__assert_fail@plt+0xa0c4>
   1c124:	mov	r0, r5
   1c128:	mov	r1, r4
   1c12c:	pop	{r4, r5, r6, sl, fp, lr}
   1c130:	b	11bd0 <strcmp@plt>
   1c134:	ldr	r1, [r0, #124]	; 0x7c
   1c138:	and	r1, r1, #61440	; 0xf000
   1c13c:	sub	r1, r1, #16384	; 0x4000
   1c140:	clz	r1, r1
   1c144:	lsr	r1, r1, #5
   1c148:	subs	r1, r2, r1
   1c14c:	beq	1c0d4 <__assert_fail@plt+0xa048>
   1c150:	mov	r0, r1
   1c154:	pop	{r4, r5, r6, sl, fp, pc}
   1c158:	push	{r4, r5, r6, sl, fp, lr}
   1c15c:	add	fp, sp, #16
   1c160:	ldr	r4, [r1]
   1c164:	mov	r5, r0
   1c168:	mov	r1, #46	; 0x2e
   1c16c:	mov	r0, r4
   1c170:	bl	11f84 <strrchr@plt>
   1c174:	ldr	r5, [r5]
   1c178:	mov	r6, r0
   1c17c:	mov	r1, #46	; 0x2e
   1c180:	mov	r0, r5
   1c184:	bl	11f84 <strrchr@plt>
   1c188:	movw	r1, #56125	; 0xdb3d
   1c18c:	cmp	r6, #0
   1c190:	movt	r1, #2
   1c194:	moveq	r6, r1
   1c198:	cmp	r0, #0
   1c19c:	movne	r1, r0
   1c1a0:	mov	r0, r6
   1c1a4:	bl	11bd0 <strcmp@plt>
   1c1a8:	cmp	r0, #0
   1c1ac:	popne	{r4, r5, r6, sl, fp, pc}
   1c1b0:	mov	r0, r4
   1c1b4:	mov	r1, r5
   1c1b8:	pop	{r4, r5, r6, sl, fp, lr}
   1c1bc:	b	11bd0 <strcmp@plt>
   1c1c0:	push	{r4, r5, r6, sl, fp, lr}
   1c1c4:	add	fp, sp, #16
   1c1c8:	ldr	r3, [r1, #120]	; 0x78
   1c1cc:	mov	r4, r0
   1c1d0:	mov	r0, #1
   1c1d4:	mov	r2, #1
   1c1d8:	cmp	r3, #3
   1c1dc:	beq	1c200 <__assert_fail@plt+0xa174>
   1c1e0:	cmp	r3, #9
   1c1e4:	mov	r2, #1
   1c1e8:	beq	1c200 <__assert_fail@plt+0xa174>
   1c1ec:	ldr	r2, [r1, #124]	; 0x7c
   1c1f0:	and	r2, r2, #61440	; 0xf000
   1c1f4:	sub	r2, r2, #16384	; 0x4000
   1c1f8:	clz	r2, r2
   1c1fc:	lsr	r2, r2, #5
   1c200:	ldr	r3, [r4, #120]	; 0x78
   1c204:	cmp	r3, #3
   1c208:	cmpne	r3, #9
   1c20c:	beq	1c224 <__assert_fail@plt+0xa198>
   1c210:	ldr	r0, [r4, #124]	; 0x7c
   1c214:	and	r0, r0, #61440	; 0xf000
   1c218:	sub	r0, r0, #16384	; 0x4000
   1c21c:	clz	r0, r0
   1c220:	lsr	r0, r0, #5
   1c224:	subs	r0, r2, r0
   1c228:	popne	{r4, r5, r6, sl, fp, pc}
   1c22c:	ldr	r5, [r1]
   1c230:	mov	r1, #46	; 0x2e
   1c234:	mov	r0, r5
   1c238:	bl	11f84 <strrchr@plt>
   1c23c:	ldr	r4, [r4]
   1c240:	mov	r6, r0
   1c244:	mov	r1, #46	; 0x2e
   1c248:	mov	r0, r4
   1c24c:	bl	11f84 <strrchr@plt>
   1c250:	movw	r1, #56125	; 0xdb3d
   1c254:	cmp	r6, #0
   1c258:	movt	r1, #2
   1c25c:	moveq	r6, r1
   1c260:	cmp	r0, #0
   1c264:	movne	r1, r0
   1c268:	mov	r0, r6
   1c26c:	bl	11bd0 <strcmp@plt>
   1c270:	cmp	r0, #0
   1c274:	beq	1c27c <__assert_fail@plt+0xa1f0>
   1c278:	pop	{r4, r5, r6, sl, fp, pc}
   1c27c:	mov	r0, r5
   1c280:	mov	r1, r4
   1c284:	pop	{r4, r5, r6, sl, fp, lr}
   1c288:	b	11bd0 <strcmp@plt>
   1c28c:	movw	r2, #56928	; 0xde60
   1c290:	movt	r2, #1
   1c294:	b	1de8c <__assert_fail@plt+0xbe00>
   1c298:	ldr	r2, [r1, #120]	; 0x78
   1c29c:	mov	ip, #1
   1c2a0:	mov	r3, #1
   1c2a4:	cmp	r2, #3
   1c2a8:	beq	1c2cc <__assert_fail@plt+0xa240>
   1c2ac:	cmp	r2, #9
   1c2b0:	mov	r3, #1
   1c2b4:	beq	1c2cc <__assert_fail@plt+0xa240>
   1c2b8:	ldr	r2, [r1, #124]	; 0x7c
   1c2bc:	and	r2, r2, #61440	; 0xf000
   1c2c0:	sub	r2, r2, #16384	; 0x4000
   1c2c4:	clz	r2, r2
   1c2c8:	lsr	r3, r2, #5
   1c2cc:	ldr	r2, [r0, #120]	; 0x78
   1c2d0:	cmp	r2, #3
   1c2d4:	cmpne	r2, #9
   1c2d8:	beq	1c2f0 <__assert_fail@plt+0xa264>
   1c2dc:	ldr	r2, [r0, #124]	; 0x7c
   1c2e0:	and	r2, r2, #61440	; 0xf000
   1c2e4:	sub	r2, r2, #16384	; 0x4000
   1c2e8:	clz	r2, r2
   1c2ec:	lsr	ip, r2, #5
   1c2f0:	subs	r2, r3, ip
   1c2f4:	movne	r0, r2
   1c2f8:	bxne	lr
   1c2fc:	movw	r2, #56928	; 0xde60
   1c300:	movt	r2, #1
   1c304:	b	1de8c <__assert_fail@plt+0xbe00>
   1c308:	movw	r2, #56928	; 0xde60
   1c30c:	mov	r3, r0
   1c310:	mov	r0, r1
   1c314:	movt	r2, #1
   1c318:	mov	r1, r3
   1c31c:	b	1de8c <__assert_fail@plt+0xbe00>
   1c320:	ldr	r3, [r1, #120]	; 0x78
   1c324:	mov	ip, r0
   1c328:	mov	r0, #1
   1c32c:	mov	r2, #1
   1c330:	cmp	r3, #3
   1c334:	beq	1c358 <__assert_fail@plt+0xa2cc>
   1c338:	cmp	r3, #9
   1c33c:	mov	r2, #1
   1c340:	beq	1c358 <__assert_fail@plt+0xa2cc>
   1c344:	ldr	r2, [r1, #124]	; 0x7c
   1c348:	and	r2, r2, #61440	; 0xf000
   1c34c:	sub	r2, r2, #16384	; 0x4000
   1c350:	clz	r2, r2
   1c354:	lsr	r2, r2, #5
   1c358:	ldr	r3, [ip, #120]	; 0x78
   1c35c:	cmp	r3, #3
   1c360:	cmpne	r3, #9
   1c364:	beq	1c37c <__assert_fail@plt+0xa2f0>
   1c368:	ldr	r0, [ip, #124]	; 0x7c
   1c36c:	and	r0, r0, #61440	; 0xf000
   1c370:	sub	r0, r0, #16384	; 0x4000
   1c374:	clz	r0, r0
   1c378:	lsr	r0, r0, #5
   1c37c:	subs	r0, r2, r0
   1c380:	bxne	lr
   1c384:	movw	r2, #56928	; 0xde60
   1c388:	mov	r0, r1
   1c38c:	mov	r1, ip
   1c390:	movt	r2, #1
   1c394:	b	1de8c <__assert_fail@plt+0xbe00>
   1c398:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c39c:	add	fp, sp, #24
   1c3a0:	sub	sp, sp, #24
   1c3a4:	sub	sp, sp, #8192	; 0x2000
   1c3a8:	ldr	r7, [r0, #148]	; 0x94
   1c3ac:	mov	r5, r1
   1c3b0:	mov	r4, r0
   1c3b4:	cmp	r7, #0
   1c3b8:	beq	1c3d8 <__assert_fail@plt+0xa34c>
   1c3bc:	ldr	r0, [r5, #148]	; 0x94
   1c3c0:	cmp	r0, #0
   1c3c4:	beq	1c43c <__assert_fail@plt+0xa3b0>
   1c3c8:	subs	r0, r7, r0
   1c3cc:	beq	1c49c <__assert_fail@plt+0xa410>
   1c3d0:	sub	sp, fp, #24
   1c3d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c3d8:	movw	r0, #4688	; 0x1250
   1c3dc:	ldr	r6, [r4]
   1c3e0:	ldr	r3, [r4, #144]	; 0x90
   1c3e4:	sub	r1, fp, #32
   1c3e8:	add	r7, sp, #15
   1c3ec:	movt	r0, #4
   1c3f0:	str	r1, [sp]
   1c3f4:	str	r7, [fp, #-28]	; 0xffffffe4
   1c3f8:	ldr	r2, [r0, #88]	; 0x58
   1c3fc:	sub	r0, fp, #33	; 0x21
   1c400:	str	r0, [sp, #4]
   1c404:	sub	r0, fp, #28
   1c408:	mov	r1, r6
   1c40c:	bl	1b484 <__assert_fail@plt+0x93f8>
   1c410:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1c414:	cmp	r0, r7
   1c418:	cmpne	r0, r6
   1c41c:	beq	1c424 <__assert_fail@plt+0xa398>
   1c420:	bl	21218 <__assert_fail@plt+0xf18c>
   1c424:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1c428:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c42c:	add	r7, r1, r0
   1c430:	ldr	r0, [r5, #148]	; 0x94
   1c434:	cmp	r0, #0
   1c438:	bne	1c3c8 <__assert_fail@plt+0xa33c>
   1c43c:	movw	r0, #4688	; 0x1250
   1c440:	ldr	r6, [r5]
   1c444:	ldr	r3, [r5, #144]	; 0x90
   1c448:	sub	r1, fp, #32
   1c44c:	add	r8, sp, #15
   1c450:	movt	r0, #4
   1c454:	str	r1, [sp]
   1c458:	str	r8, [fp, #-28]	; 0xffffffe4
   1c45c:	ldr	r2, [r0, #88]	; 0x58
   1c460:	sub	r0, fp, #33	; 0x21
   1c464:	str	r0, [sp, #4]
   1c468:	sub	r0, fp, #28
   1c46c:	mov	r1, r6
   1c470:	bl	1b484 <__assert_fail@plt+0x93f8>
   1c474:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1c478:	cmp	r0, r8
   1c47c:	cmpne	r0, r6
   1c480:	beq	1c488 <__assert_fail@plt+0xa3fc>
   1c484:	bl	21218 <__assert_fail@plt+0xf18c>
   1c488:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1c48c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c490:	add	r0, r1, r0
   1c494:	subs	r0, r7, r0
   1c498:	bne	1c3d0 <__assert_fail@plt+0xa344>
   1c49c:	ldr	r1, [r5]
   1c4a0:	ldr	r0, [r4]
   1c4a4:	bl	11bd0 <strcmp@plt>
   1c4a8:	sub	sp, fp, #24
   1c4ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c4b0:	ldr	r2, [r1, #120]	; 0x78
   1c4b4:	mov	ip, #1
   1c4b8:	mov	r3, #1
   1c4bc:	cmp	r2, #3
   1c4c0:	beq	1c4e4 <__assert_fail@plt+0xa458>
   1c4c4:	cmp	r2, #9
   1c4c8:	mov	r3, #1
   1c4cc:	beq	1c4e4 <__assert_fail@plt+0xa458>
   1c4d0:	ldr	r2, [r1, #124]	; 0x7c
   1c4d4:	and	r2, r2, #61440	; 0xf000
   1c4d8:	sub	r2, r2, #16384	; 0x4000
   1c4dc:	clz	r2, r2
   1c4e0:	lsr	r3, r2, #5
   1c4e4:	ldr	r2, [r0, #120]	; 0x78
   1c4e8:	cmp	r2, #3
   1c4ec:	cmpne	r2, #9
   1c4f0:	bne	1c504 <__assert_fail@plt+0xa478>
   1c4f4:	subs	r2, r3, ip
   1c4f8:	movne	r0, r2
   1c4fc:	bxne	lr
   1c500:	b	1c398 <__assert_fail@plt+0xa30c>
   1c504:	ldr	r2, [r0, #124]	; 0x7c
   1c508:	and	r2, r2, #61440	; 0xf000
   1c50c:	sub	r2, r2, #16384	; 0x4000
   1c510:	clz	r2, r2
   1c514:	lsr	ip, r2, #5
   1c518:	subs	r2, r3, ip
   1c51c:	movne	r0, r2
   1c520:	bxne	lr
   1c524:	b	1c398 <__assert_fail@plt+0xa30c>
   1c528:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c52c:	add	fp, sp, #24
   1c530:	sub	sp, sp, #24
   1c534:	sub	sp, sp, #8192	; 0x2000
   1c538:	ldr	r7, [r1, #148]	; 0x94
   1c53c:	mov	r4, r1
   1c540:	mov	r5, r0
   1c544:	cmp	r7, #0
   1c548:	beq	1c568 <__assert_fail@plt+0xa4dc>
   1c54c:	ldr	r0, [r5, #148]	; 0x94
   1c550:	cmp	r0, #0
   1c554:	beq	1c5cc <__assert_fail@plt+0xa540>
   1c558:	subs	r0, r7, r0
   1c55c:	beq	1c62c <__assert_fail@plt+0xa5a0>
   1c560:	sub	sp, fp, #24
   1c564:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c568:	movw	r0, #4688	; 0x1250
   1c56c:	ldr	r6, [r4]
   1c570:	ldr	r3, [r4, #144]	; 0x90
   1c574:	sub	r1, fp, #32
   1c578:	add	r7, sp, #15
   1c57c:	movt	r0, #4
   1c580:	str	r1, [sp]
   1c584:	str	r7, [fp, #-28]	; 0xffffffe4
   1c588:	ldr	r2, [r0, #88]	; 0x58
   1c58c:	sub	r0, fp, #33	; 0x21
   1c590:	str	r0, [sp, #4]
   1c594:	sub	r0, fp, #28
   1c598:	mov	r1, r6
   1c59c:	bl	1b484 <__assert_fail@plt+0x93f8>
   1c5a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1c5a4:	cmp	r0, r7
   1c5a8:	cmpne	r0, r6
   1c5ac:	beq	1c5b4 <__assert_fail@plt+0xa528>
   1c5b0:	bl	21218 <__assert_fail@plt+0xf18c>
   1c5b4:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1c5b8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c5bc:	add	r7, r1, r0
   1c5c0:	ldr	r0, [r5, #148]	; 0x94
   1c5c4:	cmp	r0, #0
   1c5c8:	bne	1c558 <__assert_fail@plt+0xa4cc>
   1c5cc:	movw	r0, #4688	; 0x1250
   1c5d0:	ldr	r6, [r5]
   1c5d4:	ldr	r3, [r5, #144]	; 0x90
   1c5d8:	sub	r1, fp, #32
   1c5dc:	add	r8, sp, #15
   1c5e0:	movt	r0, #4
   1c5e4:	str	r1, [sp]
   1c5e8:	str	r8, [fp, #-28]	; 0xffffffe4
   1c5ec:	ldr	r2, [r0, #88]	; 0x58
   1c5f0:	sub	r0, fp, #33	; 0x21
   1c5f4:	str	r0, [sp, #4]
   1c5f8:	sub	r0, fp, #28
   1c5fc:	mov	r1, r6
   1c600:	bl	1b484 <__assert_fail@plt+0x93f8>
   1c604:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1c608:	cmp	r0, r8
   1c60c:	cmpne	r0, r6
   1c610:	beq	1c618 <__assert_fail@plt+0xa58c>
   1c614:	bl	21218 <__assert_fail@plt+0xf18c>
   1c618:	ldrb	r0, [fp, #-33]	; 0xffffffdf
   1c61c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c620:	add	r0, r1, r0
   1c624:	subs	r0, r7, r0
   1c628:	bne	1c560 <__assert_fail@plt+0xa4d4>
   1c62c:	ldr	r1, [r5]
   1c630:	ldr	r0, [r4]
   1c634:	bl	11bd0 <strcmp@plt>
   1c638:	sub	sp, fp, #24
   1c63c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c640:	ldr	r2, [r1, #120]	; 0x78
   1c644:	mov	ip, #1
   1c648:	mov	r3, #1
   1c64c:	cmp	r2, #3
   1c650:	beq	1c674 <__assert_fail@plt+0xa5e8>
   1c654:	cmp	r2, #9
   1c658:	mov	r3, #1
   1c65c:	beq	1c674 <__assert_fail@plt+0xa5e8>
   1c660:	ldr	r2, [r1, #124]	; 0x7c
   1c664:	and	r2, r2, #61440	; 0xf000
   1c668:	sub	r2, r2, #16384	; 0x4000
   1c66c:	clz	r2, r2
   1c670:	lsr	r3, r2, #5
   1c674:	ldr	r2, [r0, #120]	; 0x78
   1c678:	cmp	r2, #3
   1c67c:	cmpne	r2, #9
   1c680:	bne	1c694 <__assert_fail@plt+0xa608>
   1c684:	subs	r2, r3, ip
   1c688:	movne	r0, r2
   1c68c:	bxne	lr
   1c690:	b	1c528 <__assert_fail@plt+0xa49c>
   1c694:	ldr	r2, [r0, #124]	; 0x7c
   1c698:	and	r2, r2, #61440	; 0xf000
   1c69c:	sub	r2, r2, #16384	; 0x4000
   1c6a0:	clz	r2, r2
   1c6a4:	lsr	ip, r2, #5
   1c6a8:	subs	r2, r3, ip
   1c6ac:	movne	r0, r2
   1c6b0:	bxne	lr
   1c6b4:	b	1c528 <__assert_fail@plt+0xa49c>
   1c6b8:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1c6bc:	add	fp, sp, #24
   1c6c0:	ldrd	r4, [r1, #64]	; 0x40
   1c6c4:	ldrd	r8, [r0, #64]	; 0x40
   1c6c8:	mov	r6, #0
   1c6cc:	subs	r2, r8, r4
   1c6d0:	sbcs	r2, r9, r5
   1c6d4:	mov	r2, #0
   1c6d8:	movwlt	r2, #1
   1c6dc:	subs	r3, r4, r8
   1c6e0:	sbcs	r3, r5, r9
   1c6e4:	mvnlt	r2, #0
   1c6e8:	cmp	r2, #0
   1c6ec:	movne	r0, r2
   1c6f0:	popne	{r4, r5, r6, r8, r9, sl, fp, pc}
   1c6f4:	ldr	r4, [r1]
   1c6f8:	ldr	r5, [r0]
   1c6fc:	bl	11ed0 <__errno_location@plt>
   1c700:	str	r6, [r0]
   1c704:	mov	r0, r5
   1c708:	mov	r1, r4
   1c70c:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1c710:	b	11de0 <strcoll@plt>
   1c714:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1c718:	add	fp, sp, #24
   1c71c:	ldr	r6, [r1, #120]	; 0x78
   1c720:	mov	r2, #1
   1c724:	mov	r3, #1
   1c728:	cmp	r6, #3
   1c72c:	beq	1c750 <__assert_fail@plt+0xa6c4>
   1c730:	cmp	r6, #9
   1c734:	mov	r3, #1
   1c738:	beq	1c750 <__assert_fail@plt+0xa6c4>
   1c73c:	ldr	r3, [r1, #124]	; 0x7c
   1c740:	and	r3, r3, #61440	; 0xf000
   1c744:	sub	r3, r3, #16384	; 0x4000
   1c748:	clz	r3, r3
   1c74c:	lsr	r3, r3, #5
   1c750:	ldr	r6, [r0, #120]	; 0x78
   1c754:	cmp	r6, #3
   1c758:	cmpne	r6, #9
   1c75c:	bne	1c7b8 <__assert_fail@plt+0xa72c>
   1c760:	subs	r2, r3, r2
   1c764:	bne	1c7d4 <__assert_fail@plt+0xa748>
   1c768:	ldrd	r4, [r1, #64]	; 0x40
   1c76c:	ldrd	r8, [r0, #64]	; 0x40
   1c770:	mov	r6, #0
   1c774:	subs	r2, r8, r4
   1c778:	sbcs	r2, r9, r5
   1c77c:	mov	r2, #0
   1c780:	movwlt	r2, #1
   1c784:	subs	r3, r4, r8
   1c788:	sbcs	r3, r5, r9
   1c78c:	mvnlt	r2, #0
   1c790:	cmp	r2, #0
   1c794:	bne	1c7d4 <__assert_fail@plt+0xa748>
   1c798:	ldr	r4, [r1]
   1c79c:	ldr	r5, [r0]
   1c7a0:	bl	11ed0 <__errno_location@plt>
   1c7a4:	str	r6, [r0]
   1c7a8:	mov	r0, r5
   1c7ac:	mov	r1, r4
   1c7b0:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1c7b4:	b	11de0 <strcoll@plt>
   1c7b8:	ldr	r2, [r0, #124]	; 0x7c
   1c7bc:	and	r2, r2, #61440	; 0xf000
   1c7c0:	sub	r2, r2, #16384	; 0x4000
   1c7c4:	clz	r2, r2
   1c7c8:	lsr	r2, r2, #5
   1c7cc:	subs	r2, r3, r2
   1c7d0:	beq	1c768 <__assert_fail@plt+0xa6dc>
   1c7d4:	mov	r0, r2
   1c7d8:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1c7dc:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1c7e0:	add	fp, sp, #24
   1c7e4:	ldrd	r4, [r0, #64]	; 0x40
   1c7e8:	ldrd	r8, [r1, #64]	; 0x40
   1c7ec:	mov	r6, #0
   1c7f0:	subs	r2, r8, r4
   1c7f4:	sbcs	r2, r9, r5
   1c7f8:	mov	r2, #0
   1c7fc:	movwlt	r2, #1
   1c800:	subs	r3, r4, r8
   1c804:	sbcs	r3, r5, r9
   1c808:	mvnlt	r2, #0
   1c80c:	cmp	r2, #0
   1c810:	movne	r0, r2
   1c814:	popne	{r4, r5, r6, r8, r9, sl, fp, pc}
   1c818:	ldr	r4, [r0]
   1c81c:	ldr	r5, [r1]
   1c820:	bl	11ed0 <__errno_location@plt>
   1c824:	str	r6, [r0]
   1c828:	mov	r0, r5
   1c82c:	mov	r1, r4
   1c830:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1c834:	b	11de0 <strcoll@plt>
   1c838:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1c83c:	add	fp, sp, #24
   1c840:	ldr	r6, [r1, #120]	; 0x78
   1c844:	mov	r2, #1
   1c848:	mov	r3, #1
   1c84c:	cmp	r6, #3
   1c850:	beq	1c874 <__assert_fail@plt+0xa7e8>
   1c854:	cmp	r6, #9
   1c858:	mov	r3, #1
   1c85c:	beq	1c874 <__assert_fail@plt+0xa7e8>
   1c860:	ldr	r3, [r1, #124]	; 0x7c
   1c864:	and	r3, r3, #61440	; 0xf000
   1c868:	sub	r3, r3, #16384	; 0x4000
   1c86c:	clz	r3, r3
   1c870:	lsr	r3, r3, #5
   1c874:	ldr	r6, [r0, #120]	; 0x78
   1c878:	cmp	r6, #3
   1c87c:	cmpne	r6, #9
   1c880:	bne	1c8dc <__assert_fail@plt+0xa850>
   1c884:	subs	r2, r3, r2
   1c888:	bne	1c8f8 <__assert_fail@plt+0xa86c>
   1c88c:	ldrd	r4, [r0, #64]	; 0x40
   1c890:	ldrd	r8, [r1, #64]	; 0x40
   1c894:	mov	r6, #0
   1c898:	subs	r2, r8, r4
   1c89c:	sbcs	r2, r9, r5
   1c8a0:	mov	r2, #0
   1c8a4:	movwlt	r2, #1
   1c8a8:	subs	r3, r4, r8
   1c8ac:	sbcs	r3, r5, r9
   1c8b0:	mvnlt	r2, #0
   1c8b4:	cmp	r2, #0
   1c8b8:	bne	1c8f8 <__assert_fail@plt+0xa86c>
   1c8bc:	ldr	r4, [r0]
   1c8c0:	ldr	r5, [r1]
   1c8c4:	bl	11ed0 <__errno_location@plt>
   1c8c8:	str	r6, [r0]
   1c8cc:	mov	r0, r5
   1c8d0:	mov	r1, r4
   1c8d4:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   1c8d8:	b	11de0 <strcoll@plt>
   1c8dc:	ldr	r2, [r0, #124]	; 0x7c
   1c8e0:	and	r2, r2, #61440	; 0xf000
   1c8e4:	sub	r2, r2, #16384	; 0x4000
   1c8e8:	clz	r2, r2
   1c8ec:	lsr	r2, r2, #5
   1c8f0:	subs	r2, r3, r2
   1c8f4:	beq	1c88c <__assert_fail@plt+0xa800>
   1c8f8:	mov	r0, r2
   1c8fc:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1c900:	push	{r4, r5, r6, r7, fp, lr}
   1c904:	add	fp, sp, #16
   1c908:	ldrd	r4, [r1, #64]	; 0x40
   1c90c:	ldrd	r6, [r0, #64]	; 0x40
   1c910:	mov	r2, #0
   1c914:	subs	r3, r6, r4
   1c918:	sbcs	r3, r7, r5
   1c91c:	movwlt	r2, #1
   1c920:	subs	r3, r4, r6
   1c924:	sbcs	r3, r5, r7
   1c928:	mvnlt	r2, #0
   1c92c:	cmp	r2, #0
   1c930:	movne	r0, r2
   1c934:	popne	{r4, r5, r6, r7, fp, pc}
   1c938:	ldr	r1, [r1]
   1c93c:	ldr	r0, [r0]
   1c940:	pop	{r4, r5, r6, r7, fp, lr}
   1c944:	b	11bd0 <strcmp@plt>
   1c948:	ldr	r2, [r1, #120]	; 0x78
   1c94c:	mov	ip, #1
   1c950:	mov	r3, #1
   1c954:	cmp	r2, #3
   1c958:	beq	1c97c <__assert_fail@plt+0xa8f0>
   1c95c:	cmp	r2, #9
   1c960:	mov	r3, #1
   1c964:	beq	1c97c <__assert_fail@plt+0xa8f0>
   1c968:	ldr	r2, [r1, #124]	; 0x7c
   1c96c:	and	r2, r2, #61440	; 0xf000
   1c970:	sub	r2, r2, #16384	; 0x4000
   1c974:	clz	r2, r2
   1c978:	lsr	r3, r2, #5
   1c97c:	ldr	r2, [r0, #120]	; 0x78
   1c980:	cmp	r2, #3
   1c984:	cmpne	r2, #9
   1c988:	bne	1c9d8 <__assert_fail@plt+0xa94c>
   1c98c:	subs	r2, r3, ip
   1c990:	bne	1c9f4 <__assert_fail@plt+0xa968>
   1c994:	push	{r4, r5, r6, r7, fp, lr}
   1c998:	add	fp, sp, #16
   1c99c:	ldrd	r4, [r1, #64]	; 0x40
   1c9a0:	ldrd	r6, [r0, #64]	; 0x40
   1c9a4:	mov	r2, #0
   1c9a8:	subs	r3, r6, r4
   1c9ac:	sbcs	r3, r7, r5
   1c9b0:	movwlt	r2, #1
   1c9b4:	subs	r3, r4, r6
   1c9b8:	sbcs	r3, r5, r7
   1c9bc:	mvnlt	r2, #0
   1c9c0:	cmp	r2, #0
   1c9c4:	pop	{r4, r5, r6, r7, fp, lr}
   1c9c8:	bne	1c9f4 <__assert_fail@plt+0xa968>
   1c9cc:	ldr	r1, [r1]
   1c9d0:	ldr	r0, [r0]
   1c9d4:	b	11bd0 <strcmp@plt>
   1c9d8:	ldr	r2, [r0, #124]	; 0x7c
   1c9dc:	and	r2, r2, #61440	; 0xf000
   1c9e0:	sub	r2, r2, #16384	; 0x4000
   1c9e4:	clz	r2, r2
   1c9e8:	lsr	ip, r2, #5
   1c9ec:	subs	r2, r3, ip
   1c9f0:	beq	1c994 <__assert_fail@plt+0xa908>
   1c9f4:	mov	r0, r2
   1c9f8:	bx	lr
   1c9fc:	push	{r4, r5, r6, r7, fp, lr}
   1ca00:	add	fp, sp, #16
   1ca04:	ldrd	r4, [r0, #64]	; 0x40
   1ca08:	ldrd	r6, [r1, #64]	; 0x40
   1ca0c:	mov	r2, #0
   1ca10:	subs	r3, r6, r4
   1ca14:	sbcs	r3, r7, r5
   1ca18:	movwlt	r2, #1
   1ca1c:	subs	r3, r4, r6
   1ca20:	sbcs	r3, r5, r7
   1ca24:	mvnlt	r2, #0
   1ca28:	cmp	r2, #0
   1ca2c:	movne	r0, r2
   1ca30:	popne	{r4, r5, r6, r7, fp, pc}
   1ca34:	ldr	r2, [r0]
   1ca38:	ldr	r0, [r1]
   1ca3c:	mov	r1, r2
   1ca40:	pop	{r4, r5, r6, r7, fp, lr}
   1ca44:	b	11bd0 <strcmp@plt>
   1ca48:	ldr	r2, [r1, #120]	; 0x78
   1ca4c:	mov	ip, #1
   1ca50:	mov	r3, #1
   1ca54:	cmp	r2, #3
   1ca58:	beq	1ca7c <__assert_fail@plt+0xa9f0>
   1ca5c:	cmp	r2, #9
   1ca60:	mov	r3, #1
   1ca64:	beq	1ca7c <__assert_fail@plt+0xa9f0>
   1ca68:	ldr	r2, [r1, #124]	; 0x7c
   1ca6c:	and	r2, r2, #61440	; 0xf000
   1ca70:	sub	r2, r2, #16384	; 0x4000
   1ca74:	clz	r2, r2
   1ca78:	lsr	r3, r2, #5
   1ca7c:	ldr	r2, [r0, #120]	; 0x78
   1ca80:	cmp	r2, #3
   1ca84:	cmpne	r2, #9
   1ca88:	bne	1cadc <__assert_fail@plt+0xaa50>
   1ca8c:	subs	r2, r3, ip
   1ca90:	bne	1caf8 <__assert_fail@plt+0xaa6c>
   1ca94:	push	{r4, r5, r6, r7, fp, lr}
   1ca98:	add	fp, sp, #16
   1ca9c:	ldrd	r4, [r0, #64]	; 0x40
   1caa0:	ldrd	r6, [r1, #64]	; 0x40
   1caa4:	mov	r2, #0
   1caa8:	subs	r3, r6, r4
   1caac:	sbcs	r3, r7, r5
   1cab0:	movwlt	r2, #1
   1cab4:	subs	r3, r4, r6
   1cab8:	sbcs	r3, r5, r7
   1cabc:	mvnlt	r2, #0
   1cac0:	cmp	r2, #0
   1cac4:	pop	{r4, r5, r6, r7, fp, lr}
   1cac8:	bne	1caf8 <__assert_fail@plt+0xaa6c>
   1cacc:	ldr	r2, [r0]
   1cad0:	ldr	r0, [r1]
   1cad4:	mov	r1, r2
   1cad8:	b	11bd0 <strcmp@plt>
   1cadc:	ldr	r2, [r0, #124]	; 0x7c
   1cae0:	and	r2, r2, #61440	; 0xf000
   1cae4:	sub	r2, r2, #16384	; 0x4000
   1cae8:	clz	r2, r2
   1caec:	lsr	ip, r2, #5
   1caf0:	subs	r2, r3, ip
   1caf4:	beq	1ca94 <__assert_fail@plt+0xaa08>
   1caf8:	mov	r0, r2
   1cafc:	bx	lr
   1cb00:	ldr	r1, [r1]
   1cb04:	ldr	r0, [r0]
   1cb08:	b	20d64 <__assert_fail@plt+0xecd8>
   1cb0c:	ldr	r2, [r1, #120]	; 0x78
   1cb10:	mov	ip, #1
   1cb14:	mov	r3, #1
   1cb18:	cmp	r2, #3
   1cb1c:	beq	1cb40 <__assert_fail@plt+0xaab4>
   1cb20:	cmp	r2, #9
   1cb24:	mov	r3, #1
   1cb28:	beq	1cb40 <__assert_fail@plt+0xaab4>
   1cb2c:	ldr	r2, [r1, #124]	; 0x7c
   1cb30:	and	r2, r2, #61440	; 0xf000
   1cb34:	sub	r2, r2, #16384	; 0x4000
   1cb38:	clz	r2, r2
   1cb3c:	lsr	r3, r2, #5
   1cb40:	ldr	r2, [r0, #120]	; 0x78
   1cb44:	cmp	r2, #3
   1cb48:	cmpne	r2, #9
   1cb4c:	beq	1cb64 <__assert_fail@plt+0xaad8>
   1cb50:	ldr	r2, [r0, #124]	; 0x7c
   1cb54:	and	r2, r2, #61440	; 0xf000
   1cb58:	sub	r2, r2, #16384	; 0x4000
   1cb5c:	clz	r2, r2
   1cb60:	lsr	ip, r2, #5
   1cb64:	subs	r2, r3, ip
   1cb68:	movne	r0, r2
   1cb6c:	bxne	lr
   1cb70:	ldr	r1, [r1]
   1cb74:	ldr	r0, [r0]
   1cb78:	b	20d64 <__assert_fail@plt+0xecd8>
   1cb7c:	ldr	r2, [r0]
   1cb80:	ldr	r0, [r1]
   1cb84:	mov	r1, r2
   1cb88:	b	20d64 <__assert_fail@plt+0xecd8>
   1cb8c:	ldr	r2, [r1, #120]	; 0x78
   1cb90:	mov	ip, #1
   1cb94:	mov	r3, #1
   1cb98:	cmp	r2, #3
   1cb9c:	beq	1cbc0 <__assert_fail@plt+0xab34>
   1cba0:	cmp	r2, #9
   1cba4:	mov	r3, #1
   1cba8:	beq	1cbc0 <__assert_fail@plt+0xab34>
   1cbac:	ldr	r2, [r1, #124]	; 0x7c
   1cbb0:	and	r2, r2, #61440	; 0xf000
   1cbb4:	sub	r2, r2, #16384	; 0x4000
   1cbb8:	clz	r2, r2
   1cbbc:	lsr	r3, r2, #5
   1cbc0:	ldr	r2, [r0, #120]	; 0x78
   1cbc4:	cmp	r2, #3
   1cbc8:	cmpne	r2, #9
   1cbcc:	beq	1cbe4 <__assert_fail@plt+0xab58>
   1cbd0:	ldr	r2, [r0, #124]	; 0x7c
   1cbd4:	and	r2, r2, #61440	; 0xf000
   1cbd8:	sub	r2, r2, #16384	; 0x4000
   1cbdc:	clz	r2, r2
   1cbe0:	lsr	ip, r2, #5
   1cbe4:	subs	r2, r3, ip
   1cbe8:	movne	r0, r2
   1cbec:	bxne	lr
   1cbf0:	ldr	r2, [r0]
   1cbf4:	ldr	r0, [r1]
   1cbf8:	mov	r1, r2
   1cbfc:	b	20d64 <__assert_fail@plt+0xecd8>
   1cc00:	push	{r4, r5, r6, sl, fp, lr}
   1cc04:	add	fp, sp, #16
   1cc08:	ldrd	r2, [r0, #96]	; 0x60
   1cc0c:	ldrd	r4, [r1, #96]	; 0x60
   1cc10:	mov	r6, #0
   1cc14:	cmp	r4, r2
   1cc18:	mov	r2, #0
   1cc1c:	movwgt	r2, #1
   1cc20:	sublt	r2, r2, #1
   1cc24:	cmp	r5, r3
   1cc28:	mov	r3, #0
   1cc2c:	movwgt	r3, #1
   1cc30:	sublt	r3, r3, #1
   1cc34:	add	r2, r3, r2, lsl #1
   1cc38:	cmp	r2, #0
   1cc3c:	movne	r0, r2
   1cc40:	popne	{r4, r5, r6, sl, fp, pc}
   1cc44:	ldr	r4, [r1]
   1cc48:	ldr	r5, [r0]
   1cc4c:	bl	11ed0 <__errno_location@plt>
   1cc50:	str	r6, [r0]
   1cc54:	mov	r0, r5
   1cc58:	mov	r1, r4
   1cc5c:	pop	{r4, r5, r6, sl, fp, lr}
   1cc60:	b	11de0 <strcoll@plt>
   1cc64:	push	{r4, r5, r6, sl, fp, lr}
   1cc68:	add	fp, sp, #16
   1cc6c:	ldr	r6, [r1, #120]	; 0x78
   1cc70:	mov	r2, #1
   1cc74:	mov	r3, #1
   1cc78:	cmp	r6, #3
   1cc7c:	beq	1cca0 <__assert_fail@plt+0xac14>
   1cc80:	cmp	r6, #9
   1cc84:	mov	r3, #1
   1cc88:	beq	1cca0 <__assert_fail@plt+0xac14>
   1cc8c:	ldr	r3, [r1, #124]	; 0x7c
   1cc90:	and	r3, r3, #61440	; 0xf000
   1cc94:	sub	r3, r3, #16384	; 0x4000
   1cc98:	clz	r3, r3
   1cc9c:	lsr	r3, r3, #5
   1cca0:	ldr	r6, [r0, #120]	; 0x78
   1cca4:	cmp	r6, #3
   1cca8:	cmpne	r6, #9
   1ccac:	bne	1cd10 <__assert_fail@plt+0xac84>
   1ccb0:	subs	r2, r3, r2
   1ccb4:	bne	1cd2c <__assert_fail@plt+0xaca0>
   1ccb8:	ldrd	r2, [r0, #96]	; 0x60
   1ccbc:	ldrd	r4, [r1, #96]	; 0x60
   1ccc0:	mov	r6, #0
   1ccc4:	cmp	r4, r2
   1ccc8:	mov	r2, #0
   1cccc:	movwgt	r2, #1
   1ccd0:	sublt	r2, r2, #1
   1ccd4:	cmp	r5, r3
   1ccd8:	mov	r3, #0
   1ccdc:	movwgt	r3, #1
   1cce0:	sublt	r3, r3, #1
   1cce4:	add	r2, r3, r2, lsl #1
   1cce8:	cmp	r2, #0
   1ccec:	bne	1cd2c <__assert_fail@plt+0xaca0>
   1ccf0:	ldr	r4, [r1]
   1ccf4:	ldr	r5, [r0]
   1ccf8:	bl	11ed0 <__errno_location@plt>
   1ccfc:	str	r6, [r0]
   1cd00:	mov	r0, r5
   1cd04:	mov	r1, r4
   1cd08:	pop	{r4, r5, r6, sl, fp, lr}
   1cd0c:	b	11de0 <strcoll@plt>
   1cd10:	ldr	r2, [r0, #124]	; 0x7c
   1cd14:	and	r2, r2, #61440	; 0xf000
   1cd18:	sub	r2, r2, #16384	; 0x4000
   1cd1c:	clz	r2, r2
   1cd20:	lsr	r2, r2, #5
   1cd24:	subs	r2, r3, r2
   1cd28:	beq	1ccb8 <__assert_fail@plt+0xac2c>
   1cd2c:	mov	r0, r2
   1cd30:	pop	{r4, r5, r6, sl, fp, pc}
   1cd34:	push	{r4, r5, r6, sl, fp, lr}
   1cd38:	add	fp, sp, #16
   1cd3c:	ldrd	r2, [r1, #96]	; 0x60
   1cd40:	ldrd	r4, [r0, #96]	; 0x60
   1cd44:	mov	r6, #0
   1cd48:	cmp	r4, r2
   1cd4c:	mov	r2, #0
   1cd50:	movwgt	r2, #1
   1cd54:	sublt	r2, r2, #1
   1cd58:	cmp	r5, r3
   1cd5c:	mov	r3, #0
   1cd60:	movwgt	r3, #1
   1cd64:	sublt	r3, r3, #1
   1cd68:	add	r2, r3, r2, lsl #1
   1cd6c:	cmp	r2, #0
   1cd70:	movne	r0, r2
   1cd74:	popne	{r4, r5, r6, sl, fp, pc}
   1cd78:	ldr	r4, [r0]
   1cd7c:	ldr	r5, [r1]
   1cd80:	bl	11ed0 <__errno_location@plt>
   1cd84:	str	r6, [r0]
   1cd88:	mov	r0, r5
   1cd8c:	mov	r1, r4
   1cd90:	pop	{r4, r5, r6, sl, fp, lr}
   1cd94:	b	11de0 <strcoll@plt>
   1cd98:	push	{r4, r5, r6, sl, fp, lr}
   1cd9c:	add	fp, sp, #16
   1cda0:	ldr	r6, [r1, #120]	; 0x78
   1cda4:	mov	r2, #1
   1cda8:	mov	r3, #1
   1cdac:	cmp	r6, #3
   1cdb0:	beq	1cdd4 <__assert_fail@plt+0xad48>
   1cdb4:	cmp	r6, #9
   1cdb8:	mov	r3, #1
   1cdbc:	beq	1cdd4 <__assert_fail@plt+0xad48>
   1cdc0:	ldr	r3, [r1, #124]	; 0x7c
   1cdc4:	and	r3, r3, #61440	; 0xf000
   1cdc8:	sub	r3, r3, #16384	; 0x4000
   1cdcc:	clz	r3, r3
   1cdd0:	lsr	r3, r3, #5
   1cdd4:	ldr	r6, [r0, #120]	; 0x78
   1cdd8:	cmp	r6, #3
   1cddc:	cmpne	r6, #9
   1cde0:	bne	1ce44 <__assert_fail@plt+0xadb8>
   1cde4:	subs	r2, r3, r2
   1cde8:	bne	1ce60 <__assert_fail@plt+0xadd4>
   1cdec:	ldrd	r2, [r1, #96]	; 0x60
   1cdf0:	ldrd	r4, [r0, #96]	; 0x60
   1cdf4:	mov	r6, #0
   1cdf8:	cmp	r4, r2
   1cdfc:	mov	r2, #0
   1ce00:	movwgt	r2, #1
   1ce04:	sublt	r2, r2, #1
   1ce08:	cmp	r5, r3
   1ce0c:	mov	r3, #0
   1ce10:	movwgt	r3, #1
   1ce14:	sublt	r3, r3, #1
   1ce18:	add	r2, r3, r2, lsl #1
   1ce1c:	cmp	r2, #0
   1ce20:	bne	1ce60 <__assert_fail@plt+0xadd4>
   1ce24:	ldr	r4, [r0]
   1ce28:	ldr	r5, [r1]
   1ce2c:	bl	11ed0 <__errno_location@plt>
   1ce30:	str	r6, [r0]
   1ce34:	mov	r0, r5
   1ce38:	mov	r1, r4
   1ce3c:	pop	{r4, r5, r6, sl, fp, lr}
   1ce40:	b	11de0 <strcoll@plt>
   1ce44:	ldr	r2, [r0, #124]	; 0x7c
   1ce48:	and	r2, r2, #61440	; 0xf000
   1ce4c:	sub	r2, r2, #16384	; 0x4000
   1ce50:	clz	r2, r2
   1ce54:	lsr	r2, r2, #5
   1ce58:	subs	r2, r3, r2
   1ce5c:	beq	1cdec <__assert_fail@plt+0xad60>
   1ce60:	mov	r0, r2
   1ce64:	pop	{r4, r5, r6, sl, fp, pc}
   1ce68:	push	{r4, r5, r7, sl, fp, lr}
   1ce6c:	add	fp, sp, #16
   1ce70:	ldr	r2, [r0, #96]	; 0x60
   1ce74:	ldr	r7, [r0, #100]	; 0x64
   1ce78:	ldrd	r4, [r1, #96]	; 0x60
   1ce7c:	mov	r3, #0
   1ce80:	cmp	r4, r2
   1ce84:	mov	r2, #0
   1ce88:	movwgt	r2, #1
   1ce8c:	sublt	r2, r2, #1
   1ce90:	cmp	r5, r7
   1ce94:	movwgt	r3, #1
   1ce98:	sublt	r3, r3, #1
   1ce9c:	add	r2, r3, r2, lsl #1
   1cea0:	cmp	r2, #0
   1cea4:	movne	r0, r2
   1cea8:	popne	{r4, r5, r7, sl, fp, pc}
   1ceac:	ldr	r1, [r1]
   1ceb0:	ldr	r0, [r0]
   1ceb4:	pop	{r4, r5, r7, sl, fp, lr}
   1ceb8:	b	11bd0 <strcmp@plt>
   1cebc:	ldr	r2, [r1, #120]	; 0x78
   1cec0:	mov	ip, #1
   1cec4:	mov	r3, #1
   1cec8:	cmp	r2, #3
   1cecc:	beq	1cef0 <__assert_fail@plt+0xae64>
   1ced0:	cmp	r2, #9
   1ced4:	mov	r3, #1
   1ced8:	beq	1cef0 <__assert_fail@plt+0xae64>
   1cedc:	ldr	r2, [r1, #124]	; 0x7c
   1cee0:	and	r2, r2, #61440	; 0xf000
   1cee4:	sub	r2, r2, #16384	; 0x4000
   1cee8:	clz	r2, r2
   1ceec:	lsr	r3, r2, #5
   1cef0:	ldr	r2, [r0, #120]	; 0x78
   1cef4:	cmp	r2, #3
   1cef8:	cmpne	r2, #9
   1cefc:	bne	1cf58 <__assert_fail@plt+0xaecc>
   1cf00:	subs	r2, r3, ip
   1cf04:	bne	1cf74 <__assert_fail@plt+0xaee8>
   1cf08:	push	{r4, r5, r7, sl, fp, lr}
   1cf0c:	add	fp, sp, #16
   1cf10:	ldr	r2, [r0, #96]	; 0x60
   1cf14:	ldr	r7, [r0, #100]	; 0x64
   1cf18:	ldrd	r4, [r1, #96]	; 0x60
   1cf1c:	mov	r3, #0
   1cf20:	cmp	r4, r2
   1cf24:	mov	r2, #0
   1cf28:	movwgt	r2, #1
   1cf2c:	sublt	r2, r2, #1
   1cf30:	cmp	r5, r7
   1cf34:	movwgt	r3, #1
   1cf38:	sublt	r3, r3, #1
   1cf3c:	add	r2, r3, r2, lsl #1
   1cf40:	cmp	r2, #0
   1cf44:	pop	{r4, r5, r7, sl, fp, lr}
   1cf48:	bne	1cf74 <__assert_fail@plt+0xaee8>
   1cf4c:	ldr	r1, [r1]
   1cf50:	ldr	r0, [r0]
   1cf54:	b	11bd0 <strcmp@plt>
   1cf58:	ldr	r2, [r0, #124]	; 0x7c
   1cf5c:	and	r2, r2, #61440	; 0xf000
   1cf60:	sub	r2, r2, #16384	; 0x4000
   1cf64:	clz	r2, r2
   1cf68:	lsr	ip, r2, #5
   1cf6c:	subs	r2, r3, ip
   1cf70:	beq	1cf08 <__assert_fail@plt+0xae7c>
   1cf74:	mov	r0, r2
   1cf78:	bx	lr
   1cf7c:	push	{r4, r5, r7, sl, fp, lr}
   1cf80:	add	fp, sp, #16
   1cf84:	ldr	r2, [r1, #96]	; 0x60
   1cf88:	ldr	r7, [r1, #100]	; 0x64
   1cf8c:	ldrd	r4, [r0, #96]	; 0x60
   1cf90:	mov	r3, #0
   1cf94:	cmp	r4, r2
   1cf98:	mov	r2, #0
   1cf9c:	movwgt	r2, #1
   1cfa0:	sublt	r2, r2, #1
   1cfa4:	cmp	r5, r7
   1cfa8:	movwgt	r3, #1
   1cfac:	sublt	r3, r3, #1
   1cfb0:	add	r2, r3, r2, lsl #1
   1cfb4:	cmp	r2, #0
   1cfb8:	movne	r0, r2
   1cfbc:	popne	{r4, r5, r7, sl, fp, pc}
   1cfc0:	ldr	r2, [r0]
   1cfc4:	ldr	r0, [r1]
   1cfc8:	mov	r1, r2
   1cfcc:	pop	{r4, r5, r7, sl, fp, lr}
   1cfd0:	b	11bd0 <strcmp@plt>
   1cfd4:	ldr	r2, [r1, #120]	; 0x78
   1cfd8:	mov	ip, #1
   1cfdc:	mov	r3, #1
   1cfe0:	cmp	r2, #3
   1cfe4:	beq	1d008 <__assert_fail@plt+0xaf7c>
   1cfe8:	cmp	r2, #9
   1cfec:	mov	r3, #1
   1cff0:	beq	1d008 <__assert_fail@plt+0xaf7c>
   1cff4:	ldr	r2, [r1, #124]	; 0x7c
   1cff8:	and	r2, r2, #61440	; 0xf000
   1cffc:	sub	r2, r2, #16384	; 0x4000
   1d000:	clz	r2, r2
   1d004:	lsr	r3, r2, #5
   1d008:	ldr	r2, [r0, #120]	; 0x78
   1d00c:	cmp	r2, #3
   1d010:	cmpne	r2, #9
   1d014:	bne	1d074 <__assert_fail@plt+0xafe8>
   1d018:	subs	r2, r3, ip
   1d01c:	bne	1d090 <__assert_fail@plt+0xb004>
   1d020:	push	{r4, r5, r7, sl, fp, lr}
   1d024:	add	fp, sp, #16
   1d028:	ldr	r2, [r1, #96]	; 0x60
   1d02c:	ldr	r7, [r1, #100]	; 0x64
   1d030:	ldrd	r4, [r0, #96]	; 0x60
   1d034:	mov	r3, #0
   1d038:	cmp	r4, r2
   1d03c:	mov	r2, #0
   1d040:	movwgt	r2, #1
   1d044:	sublt	r2, r2, #1
   1d048:	cmp	r5, r7
   1d04c:	movwgt	r3, #1
   1d050:	sublt	r3, r3, #1
   1d054:	add	r2, r3, r2, lsl #1
   1d058:	cmp	r2, #0
   1d05c:	pop	{r4, r5, r7, sl, fp, lr}
   1d060:	bne	1d090 <__assert_fail@plt+0xb004>
   1d064:	ldr	r2, [r0]
   1d068:	ldr	r0, [r1]
   1d06c:	mov	r1, r2
   1d070:	b	11bd0 <strcmp@plt>
   1d074:	ldr	r2, [r0, #124]	; 0x7c
   1d078:	and	r2, r2, #61440	; 0xf000
   1d07c:	sub	r2, r2, #16384	; 0x4000
   1d080:	clz	r2, r2
   1d084:	lsr	ip, r2, #5
   1d088:	subs	r2, r3, ip
   1d08c:	beq	1d020 <__assert_fail@plt+0xaf94>
   1d090:	mov	r0, r2
   1d094:	bx	lr
   1d098:	push	{r4, r5, r6, sl, fp, lr}
   1d09c:	add	fp, sp, #16
   1d0a0:	ldrd	r2, [r0, #104]	; 0x68
   1d0a4:	ldrd	r4, [r1, #104]	; 0x68
   1d0a8:	mov	r6, #0
   1d0ac:	cmp	r4, r2
   1d0b0:	mov	r2, #0
   1d0b4:	movwgt	r2, #1
   1d0b8:	sublt	r2, r2, #1
   1d0bc:	cmp	r5, r3
   1d0c0:	mov	r3, #0
   1d0c4:	movwgt	r3, #1
   1d0c8:	sublt	r3, r3, #1
   1d0cc:	add	r2, r3, r2, lsl #1
   1d0d0:	cmp	r2, #0
   1d0d4:	movne	r0, r2
   1d0d8:	popne	{r4, r5, r6, sl, fp, pc}
   1d0dc:	ldr	r4, [r1]
   1d0e0:	ldr	r5, [r0]
   1d0e4:	bl	11ed0 <__errno_location@plt>
   1d0e8:	str	r6, [r0]
   1d0ec:	mov	r0, r5
   1d0f0:	mov	r1, r4
   1d0f4:	pop	{r4, r5, r6, sl, fp, lr}
   1d0f8:	b	11de0 <strcoll@plt>
   1d0fc:	push	{r4, r5, r6, sl, fp, lr}
   1d100:	add	fp, sp, #16
   1d104:	ldr	r6, [r1, #120]	; 0x78
   1d108:	mov	r2, #1
   1d10c:	mov	r3, #1
   1d110:	cmp	r6, #3
   1d114:	beq	1d138 <__assert_fail@plt+0xb0ac>
   1d118:	cmp	r6, #9
   1d11c:	mov	r3, #1
   1d120:	beq	1d138 <__assert_fail@plt+0xb0ac>
   1d124:	ldr	r3, [r1, #124]	; 0x7c
   1d128:	and	r3, r3, #61440	; 0xf000
   1d12c:	sub	r3, r3, #16384	; 0x4000
   1d130:	clz	r3, r3
   1d134:	lsr	r3, r3, #5
   1d138:	ldr	r6, [r0, #120]	; 0x78
   1d13c:	cmp	r6, #3
   1d140:	cmpne	r6, #9
   1d144:	bne	1d1a8 <__assert_fail@plt+0xb11c>
   1d148:	subs	r2, r3, r2
   1d14c:	bne	1d1c4 <__assert_fail@plt+0xb138>
   1d150:	ldrd	r2, [r0, #104]	; 0x68
   1d154:	ldrd	r4, [r1, #104]	; 0x68
   1d158:	mov	r6, #0
   1d15c:	cmp	r4, r2
   1d160:	mov	r2, #0
   1d164:	movwgt	r2, #1
   1d168:	sublt	r2, r2, #1
   1d16c:	cmp	r5, r3
   1d170:	mov	r3, #0
   1d174:	movwgt	r3, #1
   1d178:	sublt	r3, r3, #1
   1d17c:	add	r2, r3, r2, lsl #1
   1d180:	cmp	r2, #0
   1d184:	bne	1d1c4 <__assert_fail@plt+0xb138>
   1d188:	ldr	r4, [r1]
   1d18c:	ldr	r5, [r0]
   1d190:	bl	11ed0 <__errno_location@plt>
   1d194:	str	r6, [r0]
   1d198:	mov	r0, r5
   1d19c:	mov	r1, r4
   1d1a0:	pop	{r4, r5, r6, sl, fp, lr}
   1d1a4:	b	11de0 <strcoll@plt>
   1d1a8:	ldr	r2, [r0, #124]	; 0x7c
   1d1ac:	and	r2, r2, #61440	; 0xf000
   1d1b0:	sub	r2, r2, #16384	; 0x4000
   1d1b4:	clz	r2, r2
   1d1b8:	lsr	r2, r2, #5
   1d1bc:	subs	r2, r3, r2
   1d1c0:	beq	1d150 <__assert_fail@plt+0xb0c4>
   1d1c4:	mov	r0, r2
   1d1c8:	pop	{r4, r5, r6, sl, fp, pc}
   1d1cc:	push	{r4, r5, r6, sl, fp, lr}
   1d1d0:	add	fp, sp, #16
   1d1d4:	ldrd	r2, [r1, #104]	; 0x68
   1d1d8:	ldrd	r4, [r0, #104]	; 0x68
   1d1dc:	mov	r6, #0
   1d1e0:	cmp	r4, r2
   1d1e4:	mov	r2, #0
   1d1e8:	movwgt	r2, #1
   1d1ec:	sublt	r2, r2, #1
   1d1f0:	cmp	r5, r3
   1d1f4:	mov	r3, #0
   1d1f8:	movwgt	r3, #1
   1d1fc:	sublt	r3, r3, #1
   1d200:	add	r2, r3, r2, lsl #1
   1d204:	cmp	r2, #0
   1d208:	movne	r0, r2
   1d20c:	popne	{r4, r5, r6, sl, fp, pc}
   1d210:	ldr	r4, [r0]
   1d214:	ldr	r5, [r1]
   1d218:	bl	11ed0 <__errno_location@plt>
   1d21c:	str	r6, [r0]
   1d220:	mov	r0, r5
   1d224:	mov	r1, r4
   1d228:	pop	{r4, r5, r6, sl, fp, lr}
   1d22c:	b	11de0 <strcoll@plt>
   1d230:	push	{r4, r5, r6, sl, fp, lr}
   1d234:	add	fp, sp, #16
   1d238:	ldr	r6, [r1, #120]	; 0x78
   1d23c:	mov	r2, #1
   1d240:	mov	r3, #1
   1d244:	cmp	r6, #3
   1d248:	beq	1d26c <__assert_fail@plt+0xb1e0>
   1d24c:	cmp	r6, #9
   1d250:	mov	r3, #1
   1d254:	beq	1d26c <__assert_fail@plt+0xb1e0>
   1d258:	ldr	r3, [r1, #124]	; 0x7c
   1d25c:	and	r3, r3, #61440	; 0xf000
   1d260:	sub	r3, r3, #16384	; 0x4000
   1d264:	clz	r3, r3
   1d268:	lsr	r3, r3, #5
   1d26c:	ldr	r6, [r0, #120]	; 0x78
   1d270:	cmp	r6, #3
   1d274:	cmpne	r6, #9
   1d278:	bne	1d2dc <__assert_fail@plt+0xb250>
   1d27c:	subs	r2, r3, r2
   1d280:	bne	1d2f8 <__assert_fail@plt+0xb26c>
   1d284:	ldrd	r2, [r1, #104]	; 0x68
   1d288:	ldrd	r4, [r0, #104]	; 0x68
   1d28c:	mov	r6, #0
   1d290:	cmp	r4, r2
   1d294:	mov	r2, #0
   1d298:	movwgt	r2, #1
   1d29c:	sublt	r2, r2, #1
   1d2a0:	cmp	r5, r3
   1d2a4:	mov	r3, #0
   1d2a8:	movwgt	r3, #1
   1d2ac:	sublt	r3, r3, #1
   1d2b0:	add	r2, r3, r2, lsl #1
   1d2b4:	cmp	r2, #0
   1d2b8:	bne	1d2f8 <__assert_fail@plt+0xb26c>
   1d2bc:	ldr	r4, [r0]
   1d2c0:	ldr	r5, [r1]
   1d2c4:	bl	11ed0 <__errno_location@plt>
   1d2c8:	str	r6, [r0]
   1d2cc:	mov	r0, r5
   1d2d0:	mov	r1, r4
   1d2d4:	pop	{r4, r5, r6, sl, fp, lr}
   1d2d8:	b	11de0 <strcoll@plt>
   1d2dc:	ldr	r2, [r0, #124]	; 0x7c
   1d2e0:	and	r2, r2, #61440	; 0xf000
   1d2e4:	sub	r2, r2, #16384	; 0x4000
   1d2e8:	clz	r2, r2
   1d2ec:	lsr	r2, r2, #5
   1d2f0:	subs	r2, r3, r2
   1d2f4:	beq	1d284 <__assert_fail@plt+0xb1f8>
   1d2f8:	mov	r0, r2
   1d2fc:	pop	{r4, r5, r6, sl, fp, pc}
   1d300:	push	{r4, r5, r7, sl, fp, lr}
   1d304:	add	fp, sp, #16
   1d308:	ldr	r2, [r0, #104]	; 0x68
   1d30c:	ldr	r7, [r0, #108]	; 0x6c
   1d310:	ldrd	r4, [r1, #104]	; 0x68
   1d314:	mov	r3, #0
   1d318:	cmp	r4, r2
   1d31c:	mov	r2, #0
   1d320:	movwgt	r2, #1
   1d324:	sublt	r2, r2, #1
   1d328:	cmp	r5, r7
   1d32c:	movwgt	r3, #1
   1d330:	sublt	r3, r3, #1
   1d334:	add	r2, r3, r2, lsl #1
   1d338:	cmp	r2, #0
   1d33c:	movne	r0, r2
   1d340:	popne	{r4, r5, r7, sl, fp, pc}
   1d344:	ldr	r1, [r1]
   1d348:	ldr	r0, [r0]
   1d34c:	pop	{r4, r5, r7, sl, fp, lr}
   1d350:	b	11bd0 <strcmp@plt>
   1d354:	ldr	r2, [r1, #120]	; 0x78
   1d358:	mov	ip, #1
   1d35c:	mov	r3, #1
   1d360:	cmp	r2, #3
   1d364:	beq	1d388 <__assert_fail@plt+0xb2fc>
   1d368:	cmp	r2, #9
   1d36c:	mov	r3, #1
   1d370:	beq	1d388 <__assert_fail@plt+0xb2fc>
   1d374:	ldr	r2, [r1, #124]	; 0x7c
   1d378:	and	r2, r2, #61440	; 0xf000
   1d37c:	sub	r2, r2, #16384	; 0x4000
   1d380:	clz	r2, r2
   1d384:	lsr	r3, r2, #5
   1d388:	ldr	r2, [r0, #120]	; 0x78
   1d38c:	cmp	r2, #3
   1d390:	cmpne	r2, #9
   1d394:	bne	1d3f0 <__assert_fail@plt+0xb364>
   1d398:	subs	r2, r3, ip
   1d39c:	bne	1d40c <__assert_fail@plt+0xb380>
   1d3a0:	push	{r4, r5, r7, sl, fp, lr}
   1d3a4:	add	fp, sp, #16
   1d3a8:	ldr	r2, [r0, #104]	; 0x68
   1d3ac:	ldr	r7, [r0, #108]	; 0x6c
   1d3b0:	ldrd	r4, [r1, #104]	; 0x68
   1d3b4:	mov	r3, #0
   1d3b8:	cmp	r4, r2
   1d3bc:	mov	r2, #0
   1d3c0:	movwgt	r2, #1
   1d3c4:	sublt	r2, r2, #1
   1d3c8:	cmp	r5, r7
   1d3cc:	movwgt	r3, #1
   1d3d0:	sublt	r3, r3, #1
   1d3d4:	add	r2, r3, r2, lsl #1
   1d3d8:	cmp	r2, #0
   1d3dc:	pop	{r4, r5, r7, sl, fp, lr}
   1d3e0:	bne	1d40c <__assert_fail@plt+0xb380>
   1d3e4:	ldr	r1, [r1]
   1d3e8:	ldr	r0, [r0]
   1d3ec:	b	11bd0 <strcmp@plt>
   1d3f0:	ldr	r2, [r0, #124]	; 0x7c
   1d3f4:	and	r2, r2, #61440	; 0xf000
   1d3f8:	sub	r2, r2, #16384	; 0x4000
   1d3fc:	clz	r2, r2
   1d400:	lsr	ip, r2, #5
   1d404:	subs	r2, r3, ip
   1d408:	beq	1d3a0 <__assert_fail@plt+0xb314>
   1d40c:	mov	r0, r2
   1d410:	bx	lr
   1d414:	push	{r4, r5, r7, sl, fp, lr}
   1d418:	add	fp, sp, #16
   1d41c:	ldr	r2, [r1, #104]	; 0x68
   1d420:	ldr	r7, [r1, #108]	; 0x6c
   1d424:	ldrd	r4, [r0, #104]	; 0x68
   1d428:	mov	r3, #0
   1d42c:	cmp	r4, r2
   1d430:	mov	r2, #0
   1d434:	movwgt	r2, #1
   1d438:	sublt	r2, r2, #1
   1d43c:	cmp	r5, r7
   1d440:	movwgt	r3, #1
   1d444:	sublt	r3, r3, #1
   1d448:	add	r2, r3, r2, lsl #1
   1d44c:	cmp	r2, #0
   1d450:	movne	r0, r2
   1d454:	popne	{r4, r5, r7, sl, fp, pc}
   1d458:	ldr	r2, [r0]
   1d45c:	ldr	r0, [r1]
   1d460:	mov	r1, r2
   1d464:	pop	{r4, r5, r7, sl, fp, lr}
   1d468:	b	11bd0 <strcmp@plt>
   1d46c:	ldr	r2, [r1, #120]	; 0x78
   1d470:	mov	ip, #1
   1d474:	mov	r3, #1
   1d478:	cmp	r2, #3
   1d47c:	beq	1d4a0 <__assert_fail@plt+0xb414>
   1d480:	cmp	r2, #9
   1d484:	mov	r3, #1
   1d488:	beq	1d4a0 <__assert_fail@plt+0xb414>
   1d48c:	ldr	r2, [r1, #124]	; 0x7c
   1d490:	and	r2, r2, #61440	; 0xf000
   1d494:	sub	r2, r2, #16384	; 0x4000
   1d498:	clz	r2, r2
   1d49c:	lsr	r3, r2, #5
   1d4a0:	ldr	r2, [r0, #120]	; 0x78
   1d4a4:	cmp	r2, #3
   1d4a8:	cmpne	r2, #9
   1d4ac:	bne	1d50c <__assert_fail@plt+0xb480>
   1d4b0:	subs	r2, r3, ip
   1d4b4:	bne	1d528 <__assert_fail@plt+0xb49c>
   1d4b8:	push	{r4, r5, r7, sl, fp, lr}
   1d4bc:	add	fp, sp, #16
   1d4c0:	ldr	r2, [r1, #104]	; 0x68
   1d4c4:	ldr	r7, [r1, #108]	; 0x6c
   1d4c8:	ldrd	r4, [r0, #104]	; 0x68
   1d4cc:	mov	r3, #0
   1d4d0:	cmp	r4, r2
   1d4d4:	mov	r2, #0
   1d4d8:	movwgt	r2, #1
   1d4dc:	sublt	r2, r2, #1
   1d4e0:	cmp	r5, r7
   1d4e4:	movwgt	r3, #1
   1d4e8:	sublt	r3, r3, #1
   1d4ec:	add	r2, r3, r2, lsl #1
   1d4f0:	cmp	r2, #0
   1d4f4:	pop	{r4, r5, r7, sl, fp, lr}
   1d4f8:	bne	1d528 <__assert_fail@plt+0xb49c>
   1d4fc:	ldr	r2, [r0]
   1d500:	ldr	r0, [r1]
   1d504:	mov	r1, r2
   1d508:	b	11bd0 <strcmp@plt>
   1d50c:	ldr	r2, [r0, #124]	; 0x7c
   1d510:	and	r2, r2, #61440	; 0xf000
   1d514:	sub	r2, r2, #16384	; 0x4000
   1d518:	clz	r2, r2
   1d51c:	lsr	ip, r2, #5
   1d520:	subs	r2, r3, ip
   1d524:	beq	1d4b8 <__assert_fail@plt+0xb42c>
   1d528:	mov	r0, r2
   1d52c:	bx	lr
   1d530:	push	{r4, r5, r6, sl, fp, lr}
   1d534:	add	fp, sp, #16
   1d538:	ldrd	r2, [r0, #88]	; 0x58
   1d53c:	ldrd	r4, [r1, #88]	; 0x58
   1d540:	mov	r6, #0
   1d544:	cmp	r4, r2
   1d548:	mov	r2, #0
   1d54c:	movwgt	r2, #1
   1d550:	sublt	r2, r2, #1
   1d554:	cmp	r5, r3
   1d558:	mov	r3, #0
   1d55c:	movwgt	r3, #1
   1d560:	sublt	r3, r3, #1
   1d564:	add	r2, r3, r2, lsl #1
   1d568:	cmp	r2, #0
   1d56c:	movne	r0, r2
   1d570:	popne	{r4, r5, r6, sl, fp, pc}
   1d574:	ldr	r4, [r1]
   1d578:	ldr	r5, [r0]
   1d57c:	bl	11ed0 <__errno_location@plt>
   1d580:	str	r6, [r0]
   1d584:	mov	r0, r5
   1d588:	mov	r1, r4
   1d58c:	pop	{r4, r5, r6, sl, fp, lr}
   1d590:	b	11de0 <strcoll@plt>
   1d594:	push	{r4, r5, r6, sl, fp, lr}
   1d598:	add	fp, sp, #16
   1d59c:	ldr	r6, [r1, #120]	; 0x78
   1d5a0:	mov	r2, #1
   1d5a4:	mov	r3, #1
   1d5a8:	cmp	r6, #3
   1d5ac:	beq	1d5d0 <__assert_fail@plt+0xb544>
   1d5b0:	cmp	r6, #9
   1d5b4:	mov	r3, #1
   1d5b8:	beq	1d5d0 <__assert_fail@plt+0xb544>
   1d5bc:	ldr	r3, [r1, #124]	; 0x7c
   1d5c0:	and	r3, r3, #61440	; 0xf000
   1d5c4:	sub	r3, r3, #16384	; 0x4000
   1d5c8:	clz	r3, r3
   1d5cc:	lsr	r3, r3, #5
   1d5d0:	ldr	r6, [r0, #120]	; 0x78
   1d5d4:	cmp	r6, #3
   1d5d8:	cmpne	r6, #9
   1d5dc:	bne	1d640 <__assert_fail@plt+0xb5b4>
   1d5e0:	subs	r2, r3, r2
   1d5e4:	bne	1d65c <__assert_fail@plt+0xb5d0>
   1d5e8:	ldrd	r2, [r0, #88]	; 0x58
   1d5ec:	ldrd	r4, [r1, #88]	; 0x58
   1d5f0:	mov	r6, #0
   1d5f4:	cmp	r4, r2
   1d5f8:	mov	r2, #0
   1d5fc:	movwgt	r2, #1
   1d600:	sublt	r2, r2, #1
   1d604:	cmp	r5, r3
   1d608:	mov	r3, #0
   1d60c:	movwgt	r3, #1
   1d610:	sublt	r3, r3, #1
   1d614:	add	r2, r3, r2, lsl #1
   1d618:	cmp	r2, #0
   1d61c:	bne	1d65c <__assert_fail@plt+0xb5d0>
   1d620:	ldr	r4, [r1]
   1d624:	ldr	r5, [r0]
   1d628:	bl	11ed0 <__errno_location@plt>
   1d62c:	str	r6, [r0]
   1d630:	mov	r0, r5
   1d634:	mov	r1, r4
   1d638:	pop	{r4, r5, r6, sl, fp, lr}
   1d63c:	b	11de0 <strcoll@plt>
   1d640:	ldr	r2, [r0, #124]	; 0x7c
   1d644:	and	r2, r2, #61440	; 0xf000
   1d648:	sub	r2, r2, #16384	; 0x4000
   1d64c:	clz	r2, r2
   1d650:	lsr	r2, r2, #5
   1d654:	subs	r2, r3, r2
   1d658:	beq	1d5e8 <__assert_fail@plt+0xb55c>
   1d65c:	mov	r0, r2
   1d660:	pop	{r4, r5, r6, sl, fp, pc}
   1d664:	push	{r4, r5, r6, sl, fp, lr}
   1d668:	add	fp, sp, #16
   1d66c:	ldrd	r2, [r1, #88]	; 0x58
   1d670:	ldrd	r4, [r0, #88]	; 0x58
   1d674:	mov	r6, #0
   1d678:	cmp	r4, r2
   1d67c:	mov	r2, #0
   1d680:	movwgt	r2, #1
   1d684:	sublt	r2, r2, #1
   1d688:	cmp	r5, r3
   1d68c:	mov	r3, #0
   1d690:	movwgt	r3, #1
   1d694:	sublt	r3, r3, #1
   1d698:	add	r2, r3, r2, lsl #1
   1d69c:	cmp	r2, #0
   1d6a0:	movne	r0, r2
   1d6a4:	popne	{r4, r5, r6, sl, fp, pc}
   1d6a8:	ldr	r4, [r0]
   1d6ac:	ldr	r5, [r1]
   1d6b0:	bl	11ed0 <__errno_location@plt>
   1d6b4:	str	r6, [r0]
   1d6b8:	mov	r0, r5
   1d6bc:	mov	r1, r4
   1d6c0:	pop	{r4, r5, r6, sl, fp, lr}
   1d6c4:	b	11de0 <strcoll@plt>
   1d6c8:	push	{r4, r5, r6, sl, fp, lr}
   1d6cc:	add	fp, sp, #16
   1d6d0:	ldr	r6, [r1, #120]	; 0x78
   1d6d4:	mov	r2, #1
   1d6d8:	mov	r3, #1
   1d6dc:	cmp	r6, #3
   1d6e0:	beq	1d704 <__assert_fail@plt+0xb678>
   1d6e4:	cmp	r6, #9
   1d6e8:	mov	r3, #1
   1d6ec:	beq	1d704 <__assert_fail@plt+0xb678>
   1d6f0:	ldr	r3, [r1, #124]	; 0x7c
   1d6f4:	and	r3, r3, #61440	; 0xf000
   1d6f8:	sub	r3, r3, #16384	; 0x4000
   1d6fc:	clz	r3, r3
   1d700:	lsr	r3, r3, #5
   1d704:	ldr	r6, [r0, #120]	; 0x78
   1d708:	cmp	r6, #3
   1d70c:	cmpne	r6, #9
   1d710:	bne	1d774 <__assert_fail@plt+0xb6e8>
   1d714:	subs	r2, r3, r2
   1d718:	bne	1d790 <__assert_fail@plt+0xb704>
   1d71c:	ldrd	r2, [r1, #88]	; 0x58
   1d720:	ldrd	r4, [r0, #88]	; 0x58
   1d724:	mov	r6, #0
   1d728:	cmp	r4, r2
   1d72c:	mov	r2, #0
   1d730:	movwgt	r2, #1
   1d734:	sublt	r2, r2, #1
   1d738:	cmp	r5, r3
   1d73c:	mov	r3, #0
   1d740:	movwgt	r3, #1
   1d744:	sublt	r3, r3, #1
   1d748:	add	r2, r3, r2, lsl #1
   1d74c:	cmp	r2, #0
   1d750:	bne	1d790 <__assert_fail@plt+0xb704>
   1d754:	ldr	r4, [r0]
   1d758:	ldr	r5, [r1]
   1d75c:	bl	11ed0 <__errno_location@plt>
   1d760:	str	r6, [r0]
   1d764:	mov	r0, r5
   1d768:	mov	r1, r4
   1d76c:	pop	{r4, r5, r6, sl, fp, lr}
   1d770:	b	11de0 <strcoll@plt>
   1d774:	ldr	r2, [r0, #124]	; 0x7c
   1d778:	and	r2, r2, #61440	; 0xf000
   1d77c:	sub	r2, r2, #16384	; 0x4000
   1d780:	clz	r2, r2
   1d784:	lsr	r2, r2, #5
   1d788:	subs	r2, r3, r2
   1d78c:	beq	1d71c <__assert_fail@plt+0xb690>
   1d790:	mov	r0, r2
   1d794:	pop	{r4, r5, r6, sl, fp, pc}
   1d798:	push	{r4, r5, r7, sl, fp, lr}
   1d79c:	add	fp, sp, #16
   1d7a0:	ldr	r2, [r0, #88]	; 0x58
   1d7a4:	ldr	r7, [r0, #92]	; 0x5c
   1d7a8:	ldrd	r4, [r1, #88]	; 0x58
   1d7ac:	mov	r3, #0
   1d7b0:	cmp	r4, r2
   1d7b4:	mov	r2, #0
   1d7b8:	movwgt	r2, #1
   1d7bc:	sublt	r2, r2, #1
   1d7c0:	cmp	r5, r7
   1d7c4:	movwgt	r3, #1
   1d7c8:	sublt	r3, r3, #1
   1d7cc:	add	r2, r3, r2, lsl #1
   1d7d0:	cmp	r2, #0
   1d7d4:	movne	r0, r2
   1d7d8:	popne	{r4, r5, r7, sl, fp, pc}
   1d7dc:	ldr	r1, [r1]
   1d7e0:	ldr	r0, [r0]
   1d7e4:	pop	{r4, r5, r7, sl, fp, lr}
   1d7e8:	b	11bd0 <strcmp@plt>
   1d7ec:	ldr	r2, [r1, #120]	; 0x78
   1d7f0:	mov	ip, #1
   1d7f4:	mov	r3, #1
   1d7f8:	cmp	r2, #3
   1d7fc:	beq	1d820 <__assert_fail@plt+0xb794>
   1d800:	cmp	r2, #9
   1d804:	mov	r3, #1
   1d808:	beq	1d820 <__assert_fail@plt+0xb794>
   1d80c:	ldr	r2, [r1, #124]	; 0x7c
   1d810:	and	r2, r2, #61440	; 0xf000
   1d814:	sub	r2, r2, #16384	; 0x4000
   1d818:	clz	r2, r2
   1d81c:	lsr	r3, r2, #5
   1d820:	ldr	r2, [r0, #120]	; 0x78
   1d824:	cmp	r2, #3
   1d828:	cmpne	r2, #9
   1d82c:	bne	1d888 <__assert_fail@plt+0xb7fc>
   1d830:	subs	r2, r3, ip
   1d834:	bne	1d8a4 <__assert_fail@plt+0xb818>
   1d838:	push	{r4, r5, r7, sl, fp, lr}
   1d83c:	add	fp, sp, #16
   1d840:	ldr	r2, [r0, #88]	; 0x58
   1d844:	ldr	r7, [r0, #92]	; 0x5c
   1d848:	ldrd	r4, [r1, #88]	; 0x58
   1d84c:	mov	r3, #0
   1d850:	cmp	r4, r2
   1d854:	mov	r2, #0
   1d858:	movwgt	r2, #1
   1d85c:	sublt	r2, r2, #1
   1d860:	cmp	r5, r7
   1d864:	movwgt	r3, #1
   1d868:	sublt	r3, r3, #1
   1d86c:	add	r2, r3, r2, lsl #1
   1d870:	cmp	r2, #0
   1d874:	pop	{r4, r5, r7, sl, fp, lr}
   1d878:	bne	1d8a4 <__assert_fail@plt+0xb818>
   1d87c:	ldr	r1, [r1]
   1d880:	ldr	r0, [r0]
   1d884:	b	11bd0 <strcmp@plt>
   1d888:	ldr	r2, [r0, #124]	; 0x7c
   1d88c:	and	r2, r2, #61440	; 0xf000
   1d890:	sub	r2, r2, #16384	; 0x4000
   1d894:	clz	r2, r2
   1d898:	lsr	ip, r2, #5
   1d89c:	subs	r2, r3, ip
   1d8a0:	beq	1d838 <__assert_fail@plt+0xb7ac>
   1d8a4:	mov	r0, r2
   1d8a8:	bx	lr
   1d8ac:	push	{r4, r5, r7, sl, fp, lr}
   1d8b0:	add	fp, sp, #16
   1d8b4:	ldr	r2, [r1, #88]	; 0x58
   1d8b8:	ldr	r7, [r1, #92]	; 0x5c
   1d8bc:	ldrd	r4, [r0, #88]	; 0x58
   1d8c0:	mov	r3, #0
   1d8c4:	cmp	r4, r2
   1d8c8:	mov	r2, #0
   1d8cc:	movwgt	r2, #1
   1d8d0:	sublt	r2, r2, #1
   1d8d4:	cmp	r5, r7
   1d8d8:	movwgt	r3, #1
   1d8dc:	sublt	r3, r3, #1
   1d8e0:	add	r2, r3, r2, lsl #1
   1d8e4:	cmp	r2, #0
   1d8e8:	movne	r0, r2
   1d8ec:	popne	{r4, r5, r7, sl, fp, pc}
   1d8f0:	ldr	r2, [r0]
   1d8f4:	ldr	r0, [r1]
   1d8f8:	mov	r1, r2
   1d8fc:	pop	{r4, r5, r7, sl, fp, lr}
   1d900:	b	11bd0 <strcmp@plt>
   1d904:	ldr	r2, [r1, #120]	; 0x78
   1d908:	mov	ip, #1
   1d90c:	mov	r3, #1
   1d910:	cmp	r2, #3
   1d914:	beq	1d938 <__assert_fail@plt+0xb8ac>
   1d918:	cmp	r2, #9
   1d91c:	mov	r3, #1
   1d920:	beq	1d938 <__assert_fail@plt+0xb8ac>
   1d924:	ldr	r2, [r1, #124]	; 0x7c
   1d928:	and	r2, r2, #61440	; 0xf000
   1d92c:	sub	r2, r2, #16384	; 0x4000
   1d930:	clz	r2, r2
   1d934:	lsr	r3, r2, #5
   1d938:	ldr	r2, [r0, #120]	; 0x78
   1d93c:	cmp	r2, #3
   1d940:	cmpne	r2, #9
   1d944:	bne	1d9a4 <__assert_fail@plt+0xb918>
   1d948:	subs	r2, r3, ip
   1d94c:	bne	1d9c0 <__assert_fail@plt+0xb934>
   1d950:	push	{r4, r5, r7, sl, fp, lr}
   1d954:	add	fp, sp, #16
   1d958:	ldr	r2, [r1, #88]	; 0x58
   1d95c:	ldr	r7, [r1, #92]	; 0x5c
   1d960:	ldrd	r4, [r0, #88]	; 0x58
   1d964:	mov	r3, #0
   1d968:	cmp	r4, r2
   1d96c:	mov	r2, #0
   1d970:	movwgt	r2, #1
   1d974:	sublt	r2, r2, #1
   1d978:	cmp	r5, r7
   1d97c:	movwgt	r3, #1
   1d980:	sublt	r3, r3, #1
   1d984:	add	r2, r3, r2, lsl #1
   1d988:	cmp	r2, #0
   1d98c:	pop	{r4, r5, r7, sl, fp, lr}
   1d990:	bne	1d9c0 <__assert_fail@plt+0xb934>
   1d994:	ldr	r2, [r0]
   1d998:	ldr	r0, [r1]
   1d99c:	mov	r1, r2
   1d9a0:	b	11bd0 <strcmp@plt>
   1d9a4:	ldr	r2, [r0, #124]	; 0x7c
   1d9a8:	and	r2, r2, #61440	; 0xf000
   1d9ac:	sub	r2, r2, #16384	; 0x4000
   1d9b0:	clz	r2, r2
   1d9b4:	lsr	ip, r2, #5
   1d9b8:	subs	r2, r3, ip
   1d9bc:	beq	1d950 <__assert_fail@plt+0xb8c4>
   1d9c0:	mov	r0, r2
   1d9c4:	bx	lr
   1d9c8:	push	{r4, r5, r6, sl, fp, lr}
   1d9cc:	add	fp, sp, #16
   1d9d0:	ldrd	r2, [r0, #96]	; 0x60
   1d9d4:	ldrd	r4, [r1, #96]	; 0x60
   1d9d8:	mov	r6, #0
   1d9dc:	cmp	r4, r2
   1d9e0:	mov	r2, #0
   1d9e4:	movwgt	r2, #1
   1d9e8:	sublt	r2, r2, #1
   1d9ec:	cmp	r5, r3
   1d9f0:	mov	r3, #0
   1d9f4:	movwgt	r3, #1
   1d9f8:	sublt	r3, r3, #1
   1d9fc:	add	r2, r3, r2, lsl #1
   1da00:	cmp	r2, #0
   1da04:	movne	r0, r2
   1da08:	popne	{r4, r5, r6, sl, fp, pc}
   1da0c:	ldr	r4, [r1]
   1da10:	ldr	r5, [r0]
   1da14:	bl	11ed0 <__errno_location@plt>
   1da18:	str	r6, [r0]
   1da1c:	mov	r0, r5
   1da20:	mov	r1, r4
   1da24:	pop	{r4, r5, r6, sl, fp, lr}
   1da28:	b	11de0 <strcoll@plt>
   1da2c:	push	{r4, r5, r6, sl, fp, lr}
   1da30:	add	fp, sp, #16
   1da34:	ldr	r6, [r1, #120]	; 0x78
   1da38:	mov	r2, #1
   1da3c:	mov	r3, #1
   1da40:	cmp	r6, #3
   1da44:	beq	1da68 <__assert_fail@plt+0xb9dc>
   1da48:	cmp	r6, #9
   1da4c:	mov	r3, #1
   1da50:	beq	1da68 <__assert_fail@plt+0xb9dc>
   1da54:	ldr	r3, [r1, #124]	; 0x7c
   1da58:	and	r3, r3, #61440	; 0xf000
   1da5c:	sub	r3, r3, #16384	; 0x4000
   1da60:	clz	r3, r3
   1da64:	lsr	r3, r3, #5
   1da68:	ldr	r6, [r0, #120]	; 0x78
   1da6c:	cmp	r6, #3
   1da70:	cmpne	r6, #9
   1da74:	bne	1dad8 <__assert_fail@plt+0xba4c>
   1da78:	subs	r2, r3, r2
   1da7c:	bne	1daf4 <__assert_fail@plt+0xba68>
   1da80:	ldrd	r2, [r0, #96]	; 0x60
   1da84:	ldrd	r4, [r1, #96]	; 0x60
   1da88:	mov	r6, #0
   1da8c:	cmp	r4, r2
   1da90:	mov	r2, #0
   1da94:	movwgt	r2, #1
   1da98:	sublt	r2, r2, #1
   1da9c:	cmp	r5, r3
   1daa0:	mov	r3, #0
   1daa4:	movwgt	r3, #1
   1daa8:	sublt	r3, r3, #1
   1daac:	add	r2, r3, r2, lsl #1
   1dab0:	cmp	r2, #0
   1dab4:	bne	1daf4 <__assert_fail@plt+0xba68>
   1dab8:	ldr	r4, [r1]
   1dabc:	ldr	r5, [r0]
   1dac0:	bl	11ed0 <__errno_location@plt>
   1dac4:	str	r6, [r0]
   1dac8:	mov	r0, r5
   1dacc:	mov	r1, r4
   1dad0:	pop	{r4, r5, r6, sl, fp, lr}
   1dad4:	b	11de0 <strcoll@plt>
   1dad8:	ldr	r2, [r0, #124]	; 0x7c
   1dadc:	and	r2, r2, #61440	; 0xf000
   1dae0:	sub	r2, r2, #16384	; 0x4000
   1dae4:	clz	r2, r2
   1dae8:	lsr	r2, r2, #5
   1daec:	subs	r2, r3, r2
   1daf0:	beq	1da80 <__assert_fail@plt+0xb9f4>
   1daf4:	mov	r0, r2
   1daf8:	pop	{r4, r5, r6, sl, fp, pc}
   1dafc:	push	{r4, r5, r6, sl, fp, lr}
   1db00:	add	fp, sp, #16
   1db04:	ldrd	r2, [r1, #96]	; 0x60
   1db08:	ldrd	r4, [r0, #96]	; 0x60
   1db0c:	mov	r6, #0
   1db10:	cmp	r4, r2
   1db14:	mov	r2, #0
   1db18:	movwgt	r2, #1
   1db1c:	sublt	r2, r2, #1
   1db20:	cmp	r5, r3
   1db24:	mov	r3, #0
   1db28:	movwgt	r3, #1
   1db2c:	sublt	r3, r3, #1
   1db30:	add	r2, r3, r2, lsl #1
   1db34:	cmp	r2, #0
   1db38:	movne	r0, r2
   1db3c:	popne	{r4, r5, r6, sl, fp, pc}
   1db40:	ldr	r4, [r0]
   1db44:	ldr	r5, [r1]
   1db48:	bl	11ed0 <__errno_location@plt>
   1db4c:	str	r6, [r0]
   1db50:	mov	r0, r5
   1db54:	mov	r1, r4
   1db58:	pop	{r4, r5, r6, sl, fp, lr}
   1db5c:	b	11de0 <strcoll@plt>
   1db60:	push	{r4, r5, r6, sl, fp, lr}
   1db64:	add	fp, sp, #16
   1db68:	ldr	r6, [r1, #120]	; 0x78
   1db6c:	mov	r2, #1
   1db70:	mov	r3, #1
   1db74:	cmp	r6, #3
   1db78:	beq	1db9c <__assert_fail@plt+0xbb10>
   1db7c:	cmp	r6, #9
   1db80:	mov	r3, #1
   1db84:	beq	1db9c <__assert_fail@plt+0xbb10>
   1db88:	ldr	r3, [r1, #124]	; 0x7c
   1db8c:	and	r3, r3, #61440	; 0xf000
   1db90:	sub	r3, r3, #16384	; 0x4000
   1db94:	clz	r3, r3
   1db98:	lsr	r3, r3, #5
   1db9c:	ldr	r6, [r0, #120]	; 0x78
   1dba0:	cmp	r6, #3
   1dba4:	cmpne	r6, #9
   1dba8:	bne	1dc0c <__assert_fail@plt+0xbb80>
   1dbac:	subs	r2, r3, r2
   1dbb0:	bne	1dc28 <__assert_fail@plt+0xbb9c>
   1dbb4:	ldrd	r2, [r1, #96]	; 0x60
   1dbb8:	ldrd	r4, [r0, #96]	; 0x60
   1dbbc:	mov	r6, #0
   1dbc0:	cmp	r4, r2
   1dbc4:	mov	r2, #0
   1dbc8:	movwgt	r2, #1
   1dbcc:	sublt	r2, r2, #1
   1dbd0:	cmp	r5, r3
   1dbd4:	mov	r3, #0
   1dbd8:	movwgt	r3, #1
   1dbdc:	sublt	r3, r3, #1
   1dbe0:	add	r2, r3, r2, lsl #1
   1dbe4:	cmp	r2, #0
   1dbe8:	bne	1dc28 <__assert_fail@plt+0xbb9c>
   1dbec:	ldr	r4, [r0]
   1dbf0:	ldr	r5, [r1]
   1dbf4:	bl	11ed0 <__errno_location@plt>
   1dbf8:	str	r6, [r0]
   1dbfc:	mov	r0, r5
   1dc00:	mov	r1, r4
   1dc04:	pop	{r4, r5, r6, sl, fp, lr}
   1dc08:	b	11de0 <strcoll@plt>
   1dc0c:	ldr	r2, [r0, #124]	; 0x7c
   1dc10:	and	r2, r2, #61440	; 0xf000
   1dc14:	sub	r2, r2, #16384	; 0x4000
   1dc18:	clz	r2, r2
   1dc1c:	lsr	r2, r2, #5
   1dc20:	subs	r2, r3, r2
   1dc24:	beq	1dbb4 <__assert_fail@plt+0xbb28>
   1dc28:	mov	r0, r2
   1dc2c:	pop	{r4, r5, r6, sl, fp, pc}
   1dc30:	push	{r4, r5, r7, sl, fp, lr}
   1dc34:	add	fp, sp, #16
   1dc38:	ldr	r2, [r0, #96]	; 0x60
   1dc3c:	ldr	r7, [r0, #100]	; 0x64
   1dc40:	ldrd	r4, [r1, #96]	; 0x60
   1dc44:	mov	r3, #0
   1dc48:	cmp	r4, r2
   1dc4c:	mov	r2, #0
   1dc50:	movwgt	r2, #1
   1dc54:	sublt	r2, r2, #1
   1dc58:	cmp	r5, r7
   1dc5c:	movwgt	r3, #1
   1dc60:	sublt	r3, r3, #1
   1dc64:	add	r2, r3, r2, lsl #1
   1dc68:	cmp	r2, #0
   1dc6c:	movne	r0, r2
   1dc70:	popne	{r4, r5, r7, sl, fp, pc}
   1dc74:	ldr	r1, [r1]
   1dc78:	ldr	r0, [r0]
   1dc7c:	pop	{r4, r5, r7, sl, fp, lr}
   1dc80:	b	11bd0 <strcmp@plt>
   1dc84:	ldr	r2, [r1, #120]	; 0x78
   1dc88:	mov	ip, #1
   1dc8c:	mov	r3, #1
   1dc90:	cmp	r2, #3
   1dc94:	beq	1dcb8 <__assert_fail@plt+0xbc2c>
   1dc98:	cmp	r2, #9
   1dc9c:	mov	r3, #1
   1dca0:	beq	1dcb8 <__assert_fail@plt+0xbc2c>
   1dca4:	ldr	r2, [r1, #124]	; 0x7c
   1dca8:	and	r2, r2, #61440	; 0xf000
   1dcac:	sub	r2, r2, #16384	; 0x4000
   1dcb0:	clz	r2, r2
   1dcb4:	lsr	r3, r2, #5
   1dcb8:	ldr	r2, [r0, #120]	; 0x78
   1dcbc:	cmp	r2, #3
   1dcc0:	cmpne	r2, #9
   1dcc4:	bne	1dd20 <__assert_fail@plt+0xbc94>
   1dcc8:	subs	r2, r3, ip
   1dccc:	bne	1dd3c <__assert_fail@plt+0xbcb0>
   1dcd0:	push	{r4, r5, r7, sl, fp, lr}
   1dcd4:	add	fp, sp, #16
   1dcd8:	ldr	r2, [r0, #96]	; 0x60
   1dcdc:	ldr	r7, [r0, #100]	; 0x64
   1dce0:	ldrd	r4, [r1, #96]	; 0x60
   1dce4:	mov	r3, #0
   1dce8:	cmp	r4, r2
   1dcec:	mov	r2, #0
   1dcf0:	movwgt	r2, #1
   1dcf4:	sublt	r2, r2, #1
   1dcf8:	cmp	r5, r7
   1dcfc:	movwgt	r3, #1
   1dd00:	sublt	r3, r3, #1
   1dd04:	add	r2, r3, r2, lsl #1
   1dd08:	cmp	r2, #0
   1dd0c:	pop	{r4, r5, r7, sl, fp, lr}
   1dd10:	bne	1dd3c <__assert_fail@plt+0xbcb0>
   1dd14:	ldr	r1, [r1]
   1dd18:	ldr	r0, [r0]
   1dd1c:	b	11bd0 <strcmp@plt>
   1dd20:	ldr	r2, [r0, #124]	; 0x7c
   1dd24:	and	r2, r2, #61440	; 0xf000
   1dd28:	sub	r2, r2, #16384	; 0x4000
   1dd2c:	clz	r2, r2
   1dd30:	lsr	ip, r2, #5
   1dd34:	subs	r2, r3, ip
   1dd38:	beq	1dcd0 <__assert_fail@plt+0xbc44>
   1dd3c:	mov	r0, r2
   1dd40:	bx	lr
   1dd44:	push	{r4, r5, r7, sl, fp, lr}
   1dd48:	add	fp, sp, #16
   1dd4c:	ldr	r2, [r1, #96]	; 0x60
   1dd50:	ldr	r7, [r1, #100]	; 0x64
   1dd54:	ldrd	r4, [r0, #96]	; 0x60
   1dd58:	mov	r3, #0
   1dd5c:	cmp	r4, r2
   1dd60:	mov	r2, #0
   1dd64:	movwgt	r2, #1
   1dd68:	sublt	r2, r2, #1
   1dd6c:	cmp	r5, r7
   1dd70:	movwgt	r3, #1
   1dd74:	sublt	r3, r3, #1
   1dd78:	add	r2, r3, r2, lsl #1
   1dd7c:	cmp	r2, #0
   1dd80:	movne	r0, r2
   1dd84:	popne	{r4, r5, r7, sl, fp, pc}
   1dd88:	ldr	r2, [r0]
   1dd8c:	ldr	r0, [r1]
   1dd90:	mov	r1, r2
   1dd94:	pop	{r4, r5, r7, sl, fp, lr}
   1dd98:	b	11bd0 <strcmp@plt>
   1dd9c:	ldr	r2, [r1, #120]	; 0x78
   1dda0:	mov	ip, #1
   1dda4:	mov	r3, #1
   1dda8:	cmp	r2, #3
   1ddac:	beq	1ddd0 <__assert_fail@plt+0xbd44>
   1ddb0:	cmp	r2, #9
   1ddb4:	mov	r3, #1
   1ddb8:	beq	1ddd0 <__assert_fail@plt+0xbd44>
   1ddbc:	ldr	r2, [r1, #124]	; 0x7c
   1ddc0:	and	r2, r2, #61440	; 0xf000
   1ddc4:	sub	r2, r2, #16384	; 0x4000
   1ddc8:	clz	r2, r2
   1ddcc:	lsr	r3, r2, #5
   1ddd0:	ldr	r2, [r0, #120]	; 0x78
   1ddd4:	cmp	r2, #3
   1ddd8:	cmpne	r2, #9
   1dddc:	bne	1de3c <__assert_fail@plt+0xbdb0>
   1dde0:	subs	r2, r3, ip
   1dde4:	bne	1de58 <__assert_fail@plt+0xbdcc>
   1dde8:	push	{r4, r5, r7, sl, fp, lr}
   1ddec:	add	fp, sp, #16
   1ddf0:	ldr	r2, [r1, #96]	; 0x60
   1ddf4:	ldr	r7, [r1, #100]	; 0x64
   1ddf8:	ldrd	r4, [r0, #96]	; 0x60
   1ddfc:	mov	r3, #0
   1de00:	cmp	r4, r2
   1de04:	mov	r2, #0
   1de08:	movwgt	r2, #1
   1de0c:	sublt	r2, r2, #1
   1de10:	cmp	r5, r7
   1de14:	movwgt	r3, #1
   1de18:	sublt	r3, r3, #1
   1de1c:	add	r2, r3, r2, lsl #1
   1de20:	cmp	r2, #0
   1de24:	pop	{r4, r5, r7, sl, fp, lr}
   1de28:	bne	1de58 <__assert_fail@plt+0xbdcc>
   1de2c:	ldr	r2, [r0]
   1de30:	ldr	r0, [r1]
   1de34:	mov	r1, r2
   1de38:	b	11bd0 <strcmp@plt>
   1de3c:	ldr	r2, [r0, #124]	; 0x7c
   1de40:	and	r2, r2, #61440	; 0xf000
   1de44:	sub	r2, r2, #16384	; 0x4000
   1de48:	clz	r2, r2
   1de4c:	lsr	ip, r2, #5
   1de50:	subs	r2, r3, ip
   1de54:	beq	1dde8 <__assert_fail@plt+0xbd5c>
   1de58:	mov	r0, r2
   1de5c:	bx	lr
   1de60:	push	{r4, r5, fp, lr}
   1de64:	add	fp, sp, #8
   1de68:	mov	r4, r1
   1de6c:	mov	r5, r0
   1de70:	bl	11ed0 <__errno_location@plt>
   1de74:	mov	r1, #0
   1de78:	str	r1, [r0]
   1de7c:	mov	r0, r5
   1de80:	mov	r1, r4
   1de84:	pop	{r4, r5, fp, lr}
   1de88:	b	11de0 <strcoll@plt>
   1de8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1de90:	add	fp, sp, #24
   1de94:	sub	sp, sp, #24
   1de98:	sub	sp, sp, #8192	; 0x2000
   1de9c:	ldr	r4, [r0, #148]	; 0x94
   1dea0:	mov	r8, r2
   1dea4:	mov	r6, r1
   1dea8:	mov	r5, r0
   1deac:	cmp	r4, #0
   1deb0:	beq	1ded0 <__assert_fail@plt+0xbe44>
   1deb4:	ldr	r0, [r6, #148]	; 0x94
   1deb8:	cmp	r0, #0
   1debc:	beq	1df34 <__assert_fail@plt+0xbea8>
   1dec0:	subs	r0, r4, r0
   1dec4:	beq	1df94 <__assert_fail@plt+0xbf08>
   1dec8:	sub	sp, fp, #24
   1decc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ded0:	movw	r0, #4688	; 0x1250
   1ded4:	ldr	r7, [r5]
   1ded8:	ldr	r3, [r5, #144]	; 0x90
   1dedc:	sub	r1, fp, #36	; 0x24
   1dee0:	add	r4, sp, #11
   1dee4:	movt	r0, #4
   1dee8:	str	r1, [sp]
   1deec:	str	r4, [fp, #-32]	; 0xffffffe0
   1def0:	ldr	r2, [r0, #88]	; 0x58
   1def4:	sub	r0, fp, #37	; 0x25
   1def8:	str	r0, [sp, #4]
   1defc:	sub	r0, fp, #32
   1df00:	mov	r1, r7
   1df04:	bl	1b484 <__assert_fail@plt+0x93f8>
   1df08:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1df0c:	cmp	r0, r4
   1df10:	cmpne	r0, r7
   1df14:	beq	1df1c <__assert_fail@plt+0xbe90>
   1df18:	bl	21218 <__assert_fail@plt+0xf18c>
   1df1c:	ldrb	r0, [fp, #-37]	; 0xffffffdb
   1df20:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1df24:	add	r4, r1, r0
   1df28:	ldr	r0, [r6, #148]	; 0x94
   1df2c:	cmp	r0, #0
   1df30:	bne	1dec0 <__assert_fail@plt+0xbe34>
   1df34:	movw	r0, #4688	; 0x1250
   1df38:	ldr	r7, [r6]
   1df3c:	ldr	r3, [r6, #144]	; 0x90
   1df40:	sub	r1, fp, #36	; 0x24
   1df44:	add	r9, sp, #11
   1df48:	movt	r0, #4
   1df4c:	str	r1, [sp]
   1df50:	str	r9, [fp, #-32]	; 0xffffffe0
   1df54:	ldr	r2, [r0, #88]	; 0x58
   1df58:	sub	r0, fp, #37	; 0x25
   1df5c:	str	r0, [sp, #4]
   1df60:	sub	r0, fp, #32
   1df64:	mov	r1, r7
   1df68:	bl	1b484 <__assert_fail@plt+0x93f8>
   1df6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1df70:	cmp	r0, r9
   1df74:	cmpne	r0, r7
   1df78:	beq	1df80 <__assert_fail@plt+0xbef4>
   1df7c:	bl	21218 <__assert_fail@plt+0xf18c>
   1df80:	ldrb	r0, [fp, #-37]	; 0xffffffdb
   1df84:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1df88:	add	r0, r1, r0
   1df8c:	subs	r0, r4, r0
   1df90:	bne	1dec8 <__assert_fail@plt+0xbe3c>
   1df94:	ldr	r1, [r6]
   1df98:	ldr	r0, [r5]
   1df9c:	blx	r8
   1dfa0:	sub	sp, fp, #24
   1dfa4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1dfa8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dfac:	add	fp, sp, #24
   1dfb0:	sub	sp, sp, #672	; 0x2a0
   1dfb4:	movw	r7, #4688	; 0x1250
   1dfb8:	mov	r4, r0
   1dfbc:	mov	r9, r1
   1dfc0:	movt	r7, #4
   1dfc4:	ldrb	r0, [r7, #1]
   1dfc8:	cmp	r0, #0
   1dfcc:	beq	1e004 <__assert_fail@plt+0xbf78>
   1dfd0:	movw	r6, #456	; 0x1c8
   1dfd4:	movt	r6, #4
   1dfd8:	ldr	r1, [r6, #32]
   1dfdc:	cmp	r1, #0
   1dfe0:	beq	1e004 <__assert_fail@plt+0xbf78>
   1dfe4:	ldr	r0, [r6, #36]	; 0x24
   1dfe8:	cmp	r1, #2
   1dfec:	beq	1e154 <__assert_fail@plt+0xc0c8>
   1dff0:	cmp	r1, #1
   1dff4:	bne	1e16c <__assert_fail@plt+0xc0e0>
   1dff8:	ldrb	r0, [r0]
   1dffc:	cmp	r0, #48	; 0x30
   1e000:	bne	1e16c <__assert_fail@plt+0xc0e0>
   1e004:	ldrb	r0, [r7, #15]
   1e008:	cmp	r0, #1
   1e00c:	bne	1e304 <__assert_fail@plt+0xc278>
   1e010:	movw	r0, #4816	; 0x12d0
   1e014:	ldr	r1, [r7, #40]	; 0x28
   1e018:	movw	r3, #55770	; 0xd9da
   1e01c:	movt	r0, #4
   1e020:	movt	r3, #2
   1e024:	ldr	r0, [r0, #16]
   1e028:	subs	r6, r1, #4
   1e02c:	movne	r6, r0
   1e030:	ldrb	r0, [r4, #132]	; 0x84
   1e034:	cmp	r0, #0
   1e038:	ldrdne	r0, [r4, #112]	; 0x70
   1e03c:	orrsne	r2, r0, r1
   1e040:	beq	1e050 <__assert_fail@plt+0xbfc4>
   1e044:	add	r2, sp, #16
   1e048:	bl	236c0 <__assert_fail@plt+0x11634>
   1e04c:	mov	r3, r0
   1e050:	movw	r1, #56266	; 0xdbca
   1e054:	mov	r0, #1
   1e058:	mov	r2, r6
   1e05c:	movt	r1, #2
   1e060:	bl	11f00 <__printf_chk@plt>
   1e064:	ldrb	r0, [r7, #8]
   1e068:	cmp	r0, #1
   1e06c:	beq	1e310 <__assert_fail@plt+0xc284>
   1e070:	ldrb	r0, [r7, #7]
   1e074:	cmp	r0, #1
   1e078:	bne	1e0a8 <__assert_fail@plt+0xc01c>
   1e07c:	movw	r0, #4816	; 0x12d0
   1e080:	ldr	r1, [r7, #40]	; 0x28
   1e084:	ldr	r3, [r4, #128]	; 0x80
   1e088:	movt	r0, #4
   1e08c:	ldr	r0, [r0, #40]	; 0x28
   1e090:	subs	r2, r1, #4
   1e094:	movw	r1, #56266	; 0xdbca
   1e098:	movt	r1, #2
   1e09c:	movne	r2, r0
   1e0a0:	mov	r0, #1
   1e0a4:	bl	11f00 <__printf_chk@plt>
   1e0a8:	mov	r0, r4
   1e0ac:	mov	r1, #0
   1e0b0:	mov	r2, #0
   1e0b4:	mov	r3, r9
   1e0b8:	bl	1e554 <__assert_fail@plt+0xc4c8>
   1e0bc:	ldr	r2, [r7, #48]	; 0x30
   1e0c0:	cmp	r2, #0
   1e0c4:	beq	1e1ec <__assert_fail@plt+0xc160>
   1e0c8:	ldrb	r7, [r4, #132]	; 0x84
   1e0cc:	ldr	r3, [r4, #32]
   1e0d0:	ldr	r0, [r4, #120]	; 0x78
   1e0d4:	cmp	r7, #0
   1e0d8:	beq	1e108 <__assert_fail@plt+0xc07c>
   1e0dc:	and	r1, r3, #61440	; 0xf000
   1e0e0:	cmp	r1, #16384	; 0x4000
   1e0e4:	beq	1e1a8 <__assert_fail@plt+0xc11c>
   1e0e8:	cmp	r1, #32768	; 0x8000
   1e0ec:	bne	1e124 <__assert_fail@plt+0xc098>
   1e0f0:	tst	r3, #73	; 0x49
   1e0f4:	beq	1e1ec <__assert_fail@plt+0xc160>
   1e0f8:	mov	r1, #42	; 0x2a
   1e0fc:	cmp	r2, #3
   1e100:	beq	1e1ac <__assert_fail@plt+0xc120>
   1e104:	b	1e1ec <__assert_fail@plt+0xc160>
   1e108:	mov	r1, #47	; 0x2f
   1e10c:	cmp	r0, #3
   1e110:	beq	1e1ac <__assert_fail@plt+0xc120>
   1e114:	cmp	r0, #5
   1e118:	beq	1e1ec <__assert_fail@plt+0xc160>
   1e11c:	cmp	r0, #9
   1e120:	beq	1e1ac <__assert_fail@plt+0xc120>
   1e124:	cmp	r2, #1
   1e128:	beq	1e1ec <__assert_fail@plt+0xc160>
   1e12c:	cmp	r7, #0
   1e130:	beq	1e39c <__assert_fail@plt+0xc310>
   1e134:	and	r0, r3, #61440	; 0xf000
   1e138:	cmp	r0, #4096	; 0x1000
   1e13c:	beq	1e3b4 <__assert_fail@plt+0xc328>
   1e140:	cmp	r0, #40960	; 0xa000
   1e144:	beq	1e3c4 <__assert_fail@plt+0xc338>
   1e148:	cmp	r0, #49152	; 0xc000
   1e14c:	bne	1e1ec <__assert_fail@plt+0xc160>
   1e150:	b	1e3bc <__assert_fail@plt+0xc330>
   1e154:	movw	r1, #54328	; 0xd438
   1e158:	mov	r2, #2
   1e15c:	movt	r1, #2
   1e160:	bl	1202c <strncmp@plt>
   1e164:	cmp	r0, #0
   1e168:	beq	1e004 <__assert_fail@plt+0xbf78>
   1e16c:	ldrb	r0, [r7, #13]
   1e170:	cmp	r0, #0
   1e174:	bne	1e20c <__assert_fail@plt+0xc180>
   1e178:	mov	r0, #1
   1e17c:	strb	r0, [r7, #13]
   1e180:	mov	r0, #1
   1e184:	bl	11ea0 <tcgetpgrp@plt>
   1e188:	cmp	r0, #0
   1e18c:	movge	r0, #1
   1e190:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1e194:	ldr	r0, [r6, #20]
   1e198:	cmp	r0, #0
   1e19c:	beq	1e1f4 <__assert_fail@plt+0xc168>
   1e1a0:	add	r0, r6, #16
   1e1a4:	b	1e208 <__assert_fail@plt+0xc17c>
   1e1a8:	mov	r1, #47	; 0x2f
   1e1ac:	movw	r0, #4816	; 0x12d0
   1e1b0:	movt	r0, #4
   1e1b4:	ldrd	r2, [r0, #80]	; 0x50
   1e1b8:	adds	r2, r2, #1
   1e1bc:	adc	r3, r3, #0
   1e1c0:	strd	r2, [r0, #80]	; 0x50
   1e1c4:	movw	r0, #780	; 0x30c
   1e1c8:	movt	r0, #4
   1e1cc:	ldr	r0, [r0]
   1e1d0:	ldr	r2, [r0, #20]
   1e1d4:	ldr	r3, [r0, #24]
   1e1d8:	cmp	r2, r3
   1e1dc:	bcs	1e3cc <__assert_fail@plt+0xc340>
   1e1e0:	add	r3, r2, #1
   1e1e4:	str	r3, [r0, #20]
   1e1e8:	strb	r1, [r2]
   1e1ec:	sub	sp, fp, #24
   1e1f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e1f4:	mov	r0, r6
   1e1f8:	bl	18b9c <__assert_fail@plt+0x6b10>
   1e1fc:	add	r0, r6, #24
   1e200:	bl	18b9c <__assert_fail@plt+0x6b10>
   1e204:	add	r0, r6, #8
   1e208:	bl	18b9c <__assert_fail@plt+0x6b10>
   1e20c:	movw	r8, #780	; 0x30c
   1e210:	ldr	r1, [r6]
   1e214:	ldr	r0, [r6, #4]
   1e218:	mov	r2, #1
   1e21c:	mov	r5, #1
   1e220:	movt	r8, #4
   1e224:	ldr	r3, [r8]
   1e228:	bl	11c90 <fwrite_unlocked@plt>
   1e22c:	ldrb	r0, [r7, #13]
   1e230:	cmp	r0, #0
   1e234:	bne	1e27c <__assert_fail@plt+0xc1f0>
   1e238:	mov	r0, #1
   1e23c:	strb	r5, [r7, #13]
   1e240:	bl	11ea0 <tcgetpgrp@plt>
   1e244:	cmp	r0, #0
   1e248:	movge	r0, #1
   1e24c:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1e250:	ldr	r0, [r6, #20]
   1e254:	cmp	r0, #0
   1e258:	beq	1e264 <__assert_fail@plt+0xc1d8>
   1e25c:	add	r0, r6, #16
   1e260:	b	1e278 <__assert_fail@plt+0xc1ec>
   1e264:	mov	r0, r6
   1e268:	bl	18b9c <__assert_fail@plt+0x6b10>
   1e26c:	add	r0, r6, #24
   1e270:	bl	18b9c <__assert_fail@plt+0x6b10>
   1e274:	add	r0, r6, #8
   1e278:	bl	18b9c <__assert_fail@plt+0x6b10>
   1e27c:	ldr	r3, [r8]
   1e280:	ldr	r1, [r6, #32]
   1e284:	ldr	r0, [r6, #36]	; 0x24
   1e288:	mov	r2, #1
   1e28c:	mov	r5, #1
   1e290:	bl	11c90 <fwrite_unlocked@plt>
   1e294:	ldrb	r0, [r7, #13]
   1e298:	cmp	r0, #0
   1e29c:	bne	1e2e4 <__assert_fail@plt+0xc258>
   1e2a0:	mov	r0, #1
   1e2a4:	strb	r5, [r7, #13]
   1e2a8:	bl	11ea0 <tcgetpgrp@plt>
   1e2ac:	cmp	r0, #0
   1e2b0:	movge	r0, #1
   1e2b4:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1e2b8:	ldr	r0, [r6, #20]
   1e2bc:	cmp	r0, #0
   1e2c0:	beq	1e2cc <__assert_fail@plt+0xc240>
   1e2c4:	add	r0, r6, #16
   1e2c8:	b	1e2e0 <__assert_fail@plt+0xc254>
   1e2cc:	mov	r0, r6
   1e2d0:	bl	18b9c <__assert_fail@plt+0x6b10>
   1e2d4:	add	r0, r6, #24
   1e2d8:	bl	18b9c <__assert_fail@plt+0x6b10>
   1e2dc:	add	r0, r6, #8
   1e2e0:	bl	18b9c <__assert_fail@plt+0x6b10>
   1e2e4:	ldr	r3, [r8]
   1e2e8:	ldr	r1, [r6, #8]
   1e2ec:	ldr	r0, [r6, #12]
   1e2f0:	mov	r2, #1
   1e2f4:	bl	11c90 <fwrite_unlocked@plt>
   1e2f8:	ldrb	r0, [r7, #15]
   1e2fc:	cmp	r0, #1
   1e300:	beq	1e010 <__assert_fail@plt+0xbf84>
   1e304:	ldrb	r0, [r7, #8]
   1e308:	cmp	r0, #1
   1e30c:	bne	1e070 <__assert_fail@plt+0xbfe4>
   1e310:	movw	r0, #4816	; 0x12d0
   1e314:	ldr	r2, [r7, #40]	; 0x28
   1e318:	movt	r0, #4
   1e31c:	ldr	r1, [r0, #20]
   1e320:	subs	r6, r2, #4
   1e324:	movne	r6, r1
   1e328:	ldrb	r1, [r4, #132]	; 0x84
   1e32c:	cmp	r1, #0
   1e330:	beq	1e370 <__assert_fail@plt+0xc2e4>
   1e334:	ldr	r8, [r4, #80]	; 0x50
   1e338:	ldr	r1, [r4, #84]	; 0x54
   1e33c:	ldr	r3, [r7, #100]	; 0x64
   1e340:	ldr	r5, [r0, #92]	; 0x5c
   1e344:	ldr	r0, [r0, #88]	; 0x58
   1e348:	mov	ip, #0
   1e34c:	mov	r2, #512	; 0x200
   1e350:	stm	sp, {r2, ip}
   1e354:	add	r2, sp, #16
   1e358:	str	r0, [sp, #8]
   1e35c:	mov	r0, r8
   1e360:	str	r5, [sp, #12]
   1e364:	bl	22750 <__assert_fail@plt+0x106c4>
   1e368:	mov	r3, r0
   1e36c:	b	1e378 <__assert_fail@plt+0xc2ec>
   1e370:	movw	r3, #55770	; 0xd9da
   1e374:	movt	r3, #2
   1e378:	movw	r1, #56266	; 0xdbca
   1e37c:	mov	r0, #1
   1e380:	mov	r2, r6
   1e384:	movt	r1, #2
   1e388:	bl	11f00 <__printf_chk@plt>
   1e38c:	ldrb	r0, [r7, #7]
   1e390:	cmp	r0, #1
   1e394:	beq	1e07c <__assert_fail@plt+0xbff0>
   1e398:	b	1e0a8 <__assert_fail@plt+0xc01c>
   1e39c:	cmp	r0, #7
   1e3a0:	beq	1e3bc <__assert_fail@plt+0xc330>
   1e3a4:	cmp	r0, #6
   1e3a8:	beq	1e3c4 <__assert_fail@plt+0xc338>
   1e3ac:	cmp	r0, #1
   1e3b0:	bne	1e1ec <__assert_fail@plt+0xc160>
   1e3b4:	mov	r1, #124	; 0x7c
   1e3b8:	b	1e1ac <__assert_fail@plt+0xc120>
   1e3bc:	mov	r1, #61	; 0x3d
   1e3c0:	b	1e1ac <__assert_fail@plt+0xc120>
   1e3c4:	mov	r1, #64	; 0x40
   1e3c8:	b	1e1ac <__assert_fail@plt+0xc120>
   1e3cc:	bl	11f54 <__overflow@plt>
   1e3d0:	sub	sp, fp, #24
   1e3d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e3d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3dc:	add	fp, sp, #28
   1e3e0:	push	{r0}		; (str r0, [sp, #-4]!)
   1e3e4:	movw	r9, #4688	; 0x1250
   1e3e8:	movt	r9, #4
   1e3ec:	ldr	r0, [r9, #76]	; 0x4c
   1e3f0:	cmp	r0, #0
   1e3f4:	beq	1e50c <__assert_fail@plt+0xc480>
   1e3f8:	mov	r5, #0
   1e3fc:	mov	r7, #0
   1e400:	b	1e41c <__assert_fail@plt+0xc390>
   1e404:	ldr	r1, [sp]
   1e408:	bl	11f54 <__overflow@plt>
   1e40c:	b	1e4bc <__assert_fail@plt+0xc430>
   1e410:	mov	r1, r4
   1e414:	bl	11f54 <__overflow@plt>
   1e418:	b	1e4ec <__assert_fail@plt+0xc460>
   1e41c:	movw	r0, #4816	; 0x12d0
   1e420:	mov	r6, #0
   1e424:	movt	r0, #4
   1e428:	ldr	r0, [r0, #12]
   1e42c:	ldr	sl, [r0, r5, lsl #2]
   1e430:	ldr	r0, [r9, #112]	; 0x70
   1e434:	cmp	r0, #0
   1e438:	beq	1e448 <__assert_fail@plt+0xc3bc>
   1e43c:	mov	r0, sl
   1e440:	bl	1ee0c <__assert_fail@plt+0xcd80>
   1e444:	mov	r6, r0
   1e448:	cmp	r5, #0
   1e44c:	beq	1e4e8 <__assert_fail@plt+0xc45c>
   1e450:	ldr	r0, [r9, #112]	; 0x70
   1e454:	add	r8, r7, #2
   1e458:	mov	r4, #32
   1e45c:	cmp	r0, #0
   1e460:	beq	1e490 <__assert_fail@plt+0xc404>
   1e464:	mvn	r1, #2
   1e468:	sub	r1, r1, r6
   1e46c:	cmp	r7, r1
   1e470:	addls	r1, r8, r6
   1e474:	cmpls	r1, r0
   1e478:	bcc	1e490 <__assert_fail@plt+0xc404>
   1e47c:	ldrb	r0, [r9, #20]
   1e480:	mov	r4, #10
   1e484:	mov	r8, #0
   1e488:	cmp	r0, #0
   1e48c:	movwne	r4, #0
   1e490:	movw	r0, #780	; 0x30c
   1e494:	movt	r0, #4
   1e498:	ldr	r0, [r0]
   1e49c:	ldr	r1, [r0, #20]
   1e4a0:	ldr	r2, [r0, #24]
   1e4a4:	cmp	r1, r2
   1e4a8:	bcs	1e404 <__assert_fail@plt+0xc378>
   1e4ac:	add	r2, r1, #1
   1e4b0:	str	r2, [r0, #20]
   1e4b4:	ldr	r0, [sp]
   1e4b8:	strb	r0, [r1]
   1e4bc:	movw	r0, #780	; 0x30c
   1e4c0:	movt	r0, #4
   1e4c4:	ldr	r0, [r0]
   1e4c8:	ldr	r1, [r0, #20]
   1e4cc:	ldr	r2, [r0, #24]
   1e4d0:	cmp	r1, r2
   1e4d4:	bcs	1e410 <__assert_fail@plt+0xc384>
   1e4d8:	add	r2, r1, #1
   1e4dc:	str	r2, [r0, #20]
   1e4e0:	strb	r4, [r1]
   1e4e4:	b	1e4ec <__assert_fail@plt+0xc460>
   1e4e8:	mov	r8, r7
   1e4ec:	mov	r0, sl
   1e4f0:	mov	r1, r8
   1e4f4:	bl	1dfa8 <__assert_fail@plt+0xbf1c>
   1e4f8:	ldr	r0, [r9, #76]	; 0x4c
   1e4fc:	add	r5, r5, #1
   1e500:	add	r7, r8, r6
   1e504:	cmp	r5, r0
   1e508:	bcc	1e41c <__assert_fail@plt+0xc390>
   1e50c:	ldrb	r0, [r9, #20]
   1e510:	mov	r1, #10
   1e514:	cmp	r0, #0
   1e518:	movw	r0, #780	; 0x30c
   1e51c:	movt	r0, #4
   1e520:	movwne	r1, #0
   1e524:	ldr	r0, [r0]
   1e528:	ldr	r2, [r0, #20]
   1e52c:	ldr	r3, [r0, #24]
   1e530:	cmp	r2, r3
   1e534:	addcc	r3, r2, #1
   1e538:	strcc	r3, [r0, #20]
   1e53c:	strbcc	r1, [r2]
   1e540:	subcc	sp, fp, #28
   1e544:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e548:	sub	sp, fp, #28
   1e54c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e550:	b	11f54 <__overflow@plt>
   1e554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e558:	add	fp, sp, #28
   1e55c:	sub	sp, sp, #28
   1e560:	movw	r6, #4688	; 0x1250
   1e564:	cmp	r1, #0
   1e568:	mov	sl, r0
   1e56c:	mov	r9, r1
   1e570:	mov	r8, r3
   1e574:	mov	r4, r2
   1e578:	addne	r0, r0, #4
   1e57c:	movt	r6, #4
   1e580:	ldr	r1, [r0]
   1e584:	ldrb	r0, [r6, #1]
   1e588:	cmp	r0, #0
   1e58c:	str	r1, [sp, #24]
   1e590:	beq	1eb8c <__assert_fail@plt+0xcb00>
   1e594:	cmp	r9, #0
   1e598:	str	r4, [sp, #16]
   1e59c:	beq	1e600 <__assert_fail@plt+0xc574>
   1e5a0:	ldrb	r0, [sl, #133]	; 0x85
   1e5a4:	ldr	r3, [sl, #4]
   1e5a8:	ldr	r7, [sl, #124]	; 0x7c
   1e5ac:	mov	r5, #0
   1e5b0:	cmp	r0, #0
   1e5b4:	bne	1e624 <__assert_fail@plt+0xc598>
   1e5b8:	movw	r0, #456	; 0x1c8
   1e5bc:	mvn	r5, #0
   1e5c0:	movt	r0, #4
   1e5c4:	ldr	r1, [r0, #96]	; 0x60
   1e5c8:	cmp	r1, #0
   1e5cc:	beq	1e624 <__assert_fail@plt+0xc598>
   1e5d0:	ldr	r0, [r0, #100]	; 0x64
   1e5d4:	mov	r4, #12
   1e5d8:	cmp	r1, #2
   1e5dc:	beq	1e818 <__assert_fail@plt+0xc78c>
   1e5e0:	mov	r2, #0
   1e5e4:	cmp	r1, #1
   1e5e8:	str	r2, [sp, #20]
   1e5ec:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1e5f0:	ldrb	r0, [r0]
   1e5f4:	cmp	r0, #48	; 0x30
   1e5f8:	beq	1e624 <__assert_fail@plt+0xc598>
   1e5fc:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e600:	ldrb	r0, [r6, #4]
   1e604:	ldrb	r5, [sl, #133]	; 0x85
   1e608:	mov	r1, #32
   1e60c:	ldr	r3, [sl]
   1e610:	cmp	r0, #0
   1e614:	movwne	r1, #124	; 0x7c
   1e618:	cmp	r5, #0
   1e61c:	movweq	r1, #32
   1e620:	ldr	r7, [sl, r1]
   1e624:	ldrb	r0, [sl, #132]	; 0x84
   1e628:	cmp	r0, #0
   1e62c:	beq	1e694 <__assert_fail@plt+0xc608>
   1e630:	and	r0, r7, #61440	; 0xf000
   1e634:	sub	r0, r0, #4096	; 0x1000
   1e638:	lsr	r1, r0, #12
   1e63c:	mov	r0, #0
   1e640:	cmp	r1, #11
   1e644:	str	r0, [sp, #20]
   1e648:	bhi	1e758 <__assert_fail@plt+0xc6cc>
   1e64c:	add	r2, pc, #8
   1e650:	mov	r4, #8
   1e654:	mov	r0, #7
   1e658:	ldr	pc, [r2, r1, lsl #2]
   1e65c:	andeq	lr, r1, r8, lsl fp
   1e660:	andeq	lr, r1, ip, lsl #13
   1e664:	andeq	lr, r1, r8, asr r7
   1e668:	andeq	lr, r1, r0, ror #14
   1e66c:	andeq	lr, r1, r8, asr r7
   1e670:			; <UNDEFINED> instruction: 0x0001e7b8
   1e674:	andeq	lr, r1, r8, asr r7
   1e678:	andeq	lr, r1, r0, asr #15
   1e67c:	andeq	lr, r1, r8, asr r7
   1e680:	andeq	lr, r1, r8, lsr #14
   1e684:	andeq	lr, r1, r8, asr r7
   1e688:	andeq	lr, r1, r4, lsl #16
   1e68c:	mov	r4, #11
   1e690:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e694:	ldr	r0, [sl, #120]	; 0x78
   1e698:	cmp	r0, #8
   1e69c:	cmpne	r0, #5
   1e6a0:	bne	1e71c <__assert_fail@plt+0xc690>
   1e6a4:	mov	r0, r3
   1e6a8:	mov	r4, r3
   1e6ac:	bl	11eac <strlen@plt>
   1e6b0:	mov	r7, r0
   1e6b4:	movw	r0, #4816	; 0x12d0
   1e6b8:	movt	r0, #4
   1e6bc:	ldr	r5, [r0, #8]
   1e6c0:	mov	r0, #0
   1e6c4:	cmp	r5, #0
   1e6c8:	beq	1e710 <__assert_fail@plt+0xc684>
   1e6cc:	str	r8, [sp, #12]
   1e6d0:	add	r8, r4, r7
   1e6d4:	mov	r4, #5
   1e6d8:	str	r0, [sp, #20]
   1e6dc:	ldr	r2, [r5]
   1e6e0:	cmp	r2, r7
   1e6e4:	bhi	1e6fc <__assert_fail@plt+0xc670>
   1e6e8:	ldr	r1, [r5, #4]
   1e6ec:	sub	r0, r8, r2
   1e6f0:	bl	1fff0 <__assert_fail@plt+0xdf64>
   1e6f4:	cmp	r0, #0
   1e6f8:	beq	1e80c <__assert_fail@plt+0xc780>
   1e6fc:	ldr	r5, [r5, #16]
   1e700:	cmp	r5, #0
   1e704:	bne	1e6dc <__assert_fail@plt+0xc650>
   1e708:	ldr	r8, [sp, #12]
   1e70c:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e710:	str	r0, [sp, #20]
   1e714:	mov	r4, #5
   1e718:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e71c:	movw	r1, #62528	; 0xf440
   1e720:	movt	r1, #2
   1e724:	ldr	r0, [r1, r0, lsl #2]
   1e728:	cmp	r5, #0
   1e72c:	cmpeq	r0, #7
   1e730:	beq	1e744 <__assert_fail@plt+0xc6b8>
   1e734:	mov	r1, #0
   1e738:	mov	r4, r0
   1e73c:	str	r1, [sp, #20]
   1e740:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e744:	mov	r0, #0
   1e748:	str	r0, [sp, #20]
   1e74c:	ldrb	r0, [r6, #4]
   1e750:	cmp	r0, #0
   1e754:	beq	1e850 <__assert_fail@plt+0xc7c4>
   1e758:	mov	r4, #13
   1e75c:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e760:	and	r5, r7, #512	; 0x200
   1e764:	mov	r0, #1
   1e768:	ands	r7, r7, #2
   1e76c:	eor	r2, r0, r5, lsr #9
   1e770:	beq	1e8c8 <__assert_fail@plt+0xc83c>
   1e774:	cmp	r2, #0
   1e778:	bne	1e8c8 <__assert_fail@plt+0xc83c>
   1e77c:	movw	r0, #456	; 0x1c8
   1e780:	movt	r0, #4
   1e784:	ldr	r1, [r0, #160]	; 0xa0
   1e788:	cmp	r1, #0
   1e78c:	beq	1e8c8 <__assert_fail@plt+0xc83c>
   1e790:	ldr	r0, [r0, #164]	; 0xa4
   1e794:	mov	r4, #20
   1e798:	cmp	r1, #2
   1e79c:	beq	1e8a8 <__assert_fail@plt+0xc81c>
   1e7a0:	cmp	r1, #1
   1e7a4:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1e7a8:	ldrb	r0, [r0]
   1e7ac:	cmp	r0, #48	; 0x30
   1e7b0:	beq	1e8c8 <__assert_fail@plt+0xc83c>
   1e7b4:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e7b8:	mov	r4, #10
   1e7bc:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e7c0:	tst	r7, #2048	; 0x800
   1e7c4:	beq	1e988 <__assert_fail@plt+0xc8fc>
   1e7c8:	movw	r0, #456	; 0x1c8
   1e7cc:	movt	r0, #4
   1e7d0:	ldr	r1, [r0, #128]	; 0x80
   1e7d4:	cmp	r1, #0
   1e7d8:	beq	1e988 <__assert_fail@plt+0xc8fc>
   1e7dc:	ldr	r0, [r0, #132]	; 0x84
   1e7e0:	mov	r4, #16
   1e7e4:	cmp	r1, #2
   1e7e8:	beq	1e968 <__assert_fail@plt+0xc8dc>
   1e7ec:	cmp	r1, #1
   1e7f0:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1e7f4:	ldrb	r0, [r0]
   1e7f8:	cmp	r0, #48	; 0x30
   1e7fc:	beq	1e988 <__assert_fail@plt+0xc8fc>
   1e800:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e804:	mov	r4, #9
   1e808:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e80c:	ldr	r8, [sp, #12]
   1e810:	str	r5, [sp, #20]
   1e814:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e818:	mov	r1, #0
   1e81c:	mov	r2, #2
   1e820:	mov	r4, r8
   1e824:	mov	r8, r3
   1e828:	str	r1, [sp, #20]
   1e82c:	movw	r1, #54328	; 0xd438
   1e830:	movt	r1, #2
   1e834:	bl	1202c <strncmp@plt>
   1e838:	mov	r3, r8
   1e83c:	mov	r8, r4
   1e840:	mov	r4, #12
   1e844:	cmp	r0, #0
   1e848:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1e84c:	b	1e624 <__assert_fail@plt+0xc598>
   1e850:	movw	r0, #456	; 0x1c8
   1e854:	mov	r4, #7
   1e858:	movt	r0, #4
   1e85c:	ldr	r1, [r0, #104]	; 0x68
   1e860:	cmp	r1, #0
   1e864:	beq	1eb18 <__assert_fail@plt+0xca8c>
   1e868:	ldr	r0, [r0, #108]	; 0x6c
   1e86c:	cmp	r1, #2
   1e870:	beq	1e88c <__assert_fail@plt+0xc800>
   1e874:	cmp	r1, #1
   1e878:	bne	1e758 <__assert_fail@plt+0xc6cc>
   1e87c:	ldrb	r0, [r0]
   1e880:	cmp	r0, #48	; 0x30
   1e884:	movne	r4, #13
   1e888:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e88c:	movw	r1, #54328	; 0xd438
   1e890:	mov	r2, #2
   1e894:	movt	r1, #2
   1e898:	bl	1202c <strncmp@plt>
   1e89c:	cmp	r0, #0
   1e8a0:	bne	1e758 <__assert_fail@plt+0xc6cc>
   1e8a4:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e8a8:	movw	r1, #54328	; 0xd438
   1e8ac:	str	r2, [sp, #12]
   1e8b0:	mov	r2, #2
   1e8b4:	movt	r1, #2
   1e8b8:	bl	1202c <strncmp@plt>
   1e8bc:	ldr	r2, [sp, #12]
   1e8c0:	cmp	r0, #0
   1e8c4:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1e8c8:	cmp	r7, #0
   1e8cc:	beq	1e920 <__assert_fail@plt+0xc894>
   1e8d0:	movw	r0, #456	; 0x1c8
   1e8d4:	movt	r0, #4
   1e8d8:	ldr	r1, [r0, #152]	; 0x98
   1e8dc:	cmp	r1, #0
   1e8e0:	beq	1e920 <__assert_fail@plt+0xc894>
   1e8e4:	ldr	r0, [r0, #156]	; 0x9c
   1e8e8:	cmp	r1, #2
   1e8ec:	beq	1e9cc <__assert_fail@plt+0xc940>
   1e8f0:	mov	r4, #19
   1e8f4:	cmp	r1, #1
   1e8f8:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1e8fc:	ldrb	r0, [r0]
   1e900:	mov	r4, #6
   1e904:	cmp	r0, #48	; 0x30
   1e908:	sub	r0, r0, #48	; 0x30
   1e90c:	movwne	r0, #1
   1e910:	movwne	r4, #19
   1e914:	orrs	r0, r0, r2
   1e918:	beq	1e92c <__assert_fail@plt+0xc8a0>
   1e91c:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e920:	mov	r4, #6
   1e924:	cmp	r5, #0
   1e928:	beq	1eb18 <__assert_fail@plt+0xca8c>
   1e92c:	movw	r0, #456	; 0x1c8
   1e930:	mov	r4, #6
   1e934:	movt	r0, #4
   1e938:	ldr	r1, [r0, #144]	; 0x90
   1e93c:	cmp	r1, #0
   1e940:	beq	1eb18 <__assert_fail@plt+0xca8c>
   1e944:	ldr	r0, [r0, #148]	; 0x94
   1e948:	cmp	r1, #2
   1e94c:	beq	1eafc <__assert_fail@plt+0xca70>
   1e950:	cmp	r1, #1
   1e954:	bne	1eb14 <__assert_fail@plt+0xca88>
   1e958:	ldrb	r0, [r0]
   1e95c:	cmp	r0, #48	; 0x30
   1e960:	movne	r4, #18
   1e964:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e968:	movw	r1, #54328	; 0xd438
   1e96c:	mov	r2, #2
   1e970:	mov	r5, r3
   1e974:	movt	r1, #2
   1e978:	bl	1202c <strncmp@plt>
   1e97c:	mov	r3, r5
   1e980:	cmp	r0, #0
   1e984:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1e988:	tst	r7, #1024	; 0x400
   1e98c:	beq	1ea1c <__assert_fail@plt+0xc990>
   1e990:	movw	r0, #456	; 0x1c8
   1e994:	movt	r0, #4
   1e998:	ldr	r1, [r0, #136]	; 0x88
   1e99c:	cmp	r1, #0
   1e9a0:	beq	1ea1c <__assert_fail@plt+0xc990>
   1e9a4:	ldr	r0, [r0, #140]	; 0x8c
   1e9a8:	mov	r4, #17
   1e9ac:	cmp	r1, #2
   1e9b0:	beq	1e9fc <__assert_fail@plt+0xc970>
   1e9b4:	cmp	r1, #1
   1e9b8:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1e9bc:	ldrb	r0, [r0]
   1e9c0:	cmp	r0, #48	; 0x30
   1e9c4:	beq	1ea1c <__assert_fail@plt+0xc990>
   1e9c8:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e9cc:	movw	r1, #54328	; 0xd438
   1e9d0:	mov	r5, r2
   1e9d4:	mov	r2, #2
   1e9d8:	movt	r1, #2
   1e9dc:	bl	1202c <strncmp@plt>
   1e9e0:	cmp	r0, #0
   1e9e4:	mov	r4, #6
   1e9e8:	movwne	r0, #1
   1e9ec:	movwne	r4, #19
   1e9f0:	orrs	r0, r0, r5
   1e9f4:	beq	1e92c <__assert_fail@plt+0xc8a0>
   1e9f8:	b	1eb18 <__assert_fail@plt+0xca8c>
   1e9fc:	movw	r1, #54328	; 0xd438
   1ea00:	mov	r2, #2
   1ea04:	mov	r5, r3
   1ea08:	movt	r1, #2
   1ea0c:	bl	1202c <strncmp@plt>
   1ea10:	mov	r3, r5
   1ea14:	cmp	r0, #0
   1ea18:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1ea1c:	movw	r5, #456	; 0x1c8
   1ea20:	movt	r5, #4
   1ea24:	ldr	r1, [r5, #168]	; 0xa8
   1ea28:	cmp	r1, #0
   1ea2c:	beq	1ea84 <__assert_fail@plt+0xc9f8>
   1ea30:	ldr	r0, [r5, #172]	; 0xac
   1ea34:	cmp	r1, #2
   1ea38:	beq	1ea54 <__assert_fail@plt+0xc9c8>
   1ea3c:	cmp	r1, #1
   1ea40:	bne	1ea74 <__assert_fail@plt+0xc9e8>
   1ea44:	ldrb	r0, [r0]
   1ea48:	cmp	r0, #48	; 0x30
   1ea4c:	bne	1ea74 <__assert_fail@plt+0xc9e8>
   1ea50:	b	1ea84 <__assert_fail@plt+0xc9f8>
   1ea54:	movw	r1, #54328	; 0xd438
   1ea58:	mov	r2, #2
   1ea5c:	mov	r4, r3
   1ea60:	movt	r1, #2
   1ea64:	bl	1202c <strncmp@plt>
   1ea68:	mov	r3, r4
   1ea6c:	cmp	r0, #0
   1ea70:	beq	1ea84 <__assert_fail@plt+0xc9f8>
   1ea74:	ldrb	r0, [sl, #140]	; 0x8c
   1ea78:	mov	r4, #21
   1ea7c:	cmp	r0, #0
   1ea80:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1ea84:	tst	r7, #73	; 0x49
   1ea88:	ldrne	r1, [r5, #112]	; 0x70
   1ea8c:	cmpne	r1, #0
   1ea90:	bne	1ead4 <__assert_fail@plt+0xca48>
   1ea94:	ldr	r0, [sl, #36]	; 0x24
   1ea98:	cmp	r0, #2
   1ea9c:	bcc	1e6a4 <__assert_fail@plt+0xc618>
   1eaa0:	ldr	r1, [r5, #176]	; 0xb0
   1eaa4:	cmp	r1, #0
   1eaa8:	beq	1e6a4 <__assert_fail@plt+0xc618>
   1eaac:	ldr	r0, [r5, #180]	; 0xb4
   1eab0:	mov	r4, #22
   1eab4:	cmp	r1, #2
   1eab8:	beq	1edc4 <__assert_fail@plt+0xcd38>
   1eabc:	cmp	r1, #1
   1eac0:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1eac4:	ldrb	r0, [r0]
   1eac8:	cmp	r0, #48	; 0x30
   1eacc:	beq	1e6a4 <__assert_fail@plt+0xc618>
   1ead0:	b	1eb18 <__assert_fail@plt+0xca8c>
   1ead4:	ldr	r0, [r5, #116]	; 0x74
   1ead8:	mov	r4, #14
   1eadc:	cmp	r1, #2
   1eae0:	beq	1ede8 <__assert_fail@plt+0xcd5c>
   1eae4:	cmp	r1, #1
   1eae8:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1eaec:	ldrb	r0, [r0]
   1eaf0:	cmp	r0, #48	; 0x30
   1eaf4:	beq	1ea94 <__assert_fail@plt+0xca08>
   1eaf8:	b	1eb18 <__assert_fail@plt+0xca8c>
   1eafc:	movw	r1, #54328	; 0xd438
   1eb00:	mov	r2, #2
   1eb04:	movt	r1, #2
   1eb08:	bl	1202c <strncmp@plt>
   1eb0c:	cmp	r0, #0
   1eb10:	beq	1eb18 <__assert_fail@plt+0xca8c>
   1eb14:	mov	r4, #18
   1eb18:	ldr	r1, [sp, #20]
   1eb1c:	movw	r0, #456	; 0x1c8
   1eb20:	mov	r5, #1
   1eb24:	movt	r0, #4
   1eb28:	add	r3, r1, #8
   1eb2c:	cmp	r1, #0
   1eb30:	addeq	r3, r0, r4, lsl #3
   1eb34:	ldr	r1, [r3, #4]
   1eb38:	cmp	r1, #0
   1eb3c:	beq	1eb48 <__assert_fail@plt+0xcabc>
   1eb40:	ldr	r4, [sp, #16]
   1eb44:	b	1eb94 <__assert_fail@plt+0xcb08>
   1eb48:	ldr	r1, [r0, #32]
   1eb4c:	ldr	r4, [sp, #16]
   1eb50:	cmp	r1, #0
   1eb54:	beq	1eb8c <__assert_fail@plt+0xcb00>
   1eb58:	ldr	r0, [r0, #36]	; 0x24
   1eb5c:	cmp	r1, #2
   1eb60:	beq	1ed60 <__assert_fail@plt+0xccd4>
   1eb64:	cmp	r1, #1
   1eb68:	bne	1eb80 <__assert_fail@plt+0xcaf4>
   1eb6c:	ldrb	r0, [r0]
   1eb70:	mov	r3, #0
   1eb74:	mov	r5, #0
   1eb78:	cmp	r0, #48	; 0x30
   1eb7c:	beq	1eb94 <__assert_fail@plt+0xcb08>
   1eb80:	mov	r3, #0
   1eb84:	mov	r5, #1
   1eb88:	b	1eb94 <__assert_fail@plt+0xcb08>
   1eb8c:	mov	r3, #0
   1eb90:	mov	r5, #0
   1eb94:	ldr	r0, [sl, #8]
   1eb98:	ldr	r2, [sl, #144]	; 0x90
   1eb9c:	ldr	r1, [r6, #88]	; 0x58
   1eba0:	eor	r7, r9, #1
   1eba4:	str	r4, [sp, #4]
   1eba8:	str	r7, [sp]
   1ebac:	str	r0, [sp, #8]
   1ebb0:	ldr	r0, [sp, #24]
   1ebb4:	bl	19c28 <__assert_fail@plt+0x7b9c>
   1ebb8:	mov	r4, r0
   1ebbc:	bl	1b1e0 <__assert_fail@plt+0x9154>
   1ebc0:	cmp	r5, #0
   1ebc4:	beq	1edb8 <__assert_fail@plt+0xcd2c>
   1ebc8:	movw	r5, #456	; 0x1c8
   1ebcc:	ldrb	r1, [r6, #13]
   1ebd0:	movt	r5, #4
   1ebd4:	ldr	r0, [r5, #20]
   1ebd8:	cmp	r0, #0
   1ebdc:	beq	1ec34 <__assert_fail@plt+0xcba8>
   1ebe0:	cmp	r1, #0
   1ebe4:	bne	1ec0c <__assert_fail@plt+0xcb80>
   1ebe8:	mov	r0, #1
   1ebec:	strb	r0, [r6, #13]
   1ebf0:	mov	r0, #1
   1ebf4:	bl	11ea0 <tcgetpgrp@plt>
   1ebf8:	cmp	r0, #0
   1ebfc:	movge	r0, #1
   1ec00:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1ec04:	bl	18bfc <__assert_fail@plt+0x6b70>
   1ec08:	ldr	r0, [r5, #20]
   1ec0c:	movw	r1, #780	; 0x30c
   1ec10:	mov	r2, #1
   1ec14:	movt	r1, #4
   1ec18:	ldr	r3, [r1]
   1ec1c:	ldr	r1, [r5, #16]
   1ec20:	bl	11c90 <fwrite_unlocked@plt>
   1ec24:	ldr	r0, [r6, #112]	; 0x70
   1ec28:	cmp	r0, #0
   1ec2c:	bne	1ed0c <__assert_fail@plt+0xcc80>
   1ec30:	b	1edb8 <__assert_fail@plt+0xcd2c>
   1ec34:	cmp	r1, #0
   1ec38:	bne	1ec5c <__assert_fail@plt+0xcbd0>
   1ec3c:	mov	r0, #1
   1ec40:	strb	r0, [r6, #13]
   1ec44:	mov	r0, #1
   1ec48:	bl	11ea0 <tcgetpgrp@plt>
   1ec4c:	cmp	r0, #0
   1ec50:	movge	r0, #1
   1ec54:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1ec58:	bl	18bfc <__assert_fail@plt+0x6b70>
   1ec5c:	movw	r7, #780	; 0x30c
   1ec60:	ldr	r1, [r5]
   1ec64:	ldr	r0, [r5, #4]
   1ec68:	mov	r2, #1
   1ec6c:	mov	r9, r8
   1ec70:	mov	r8, #1
   1ec74:	movt	r7, #4
   1ec78:	ldr	r3, [r7]
   1ec7c:	bl	11c90 <fwrite_unlocked@plt>
   1ec80:	ldrb	r0, [r6, #13]
   1ec84:	cmp	r0, #0
   1ec88:	bne	1eca8 <__assert_fail@plt+0xcc1c>
   1ec8c:	mov	r0, #1
   1ec90:	strb	r8, [r6, #13]
   1ec94:	bl	11ea0 <tcgetpgrp@plt>
   1ec98:	cmp	r0, #0
   1ec9c:	movge	r0, #1
   1eca0:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1eca4:	bl	18bfc <__assert_fail@plt+0x6b70>
   1eca8:	ldr	r3, [r7]
   1ecac:	ldr	r1, [r5, #24]
   1ecb0:	ldr	r0, [r5, #28]
   1ecb4:	mov	r2, #1
   1ecb8:	mov	r8, #1
   1ecbc:	bl	11c90 <fwrite_unlocked@plt>
   1ecc0:	ldrb	r0, [r6, #13]
   1ecc4:	cmp	r0, #0
   1ecc8:	bne	1ece8 <__assert_fail@plt+0xcc5c>
   1eccc:	mov	r0, #1
   1ecd0:	strb	r8, [r6, #13]
   1ecd4:	bl	11ea0 <tcgetpgrp@plt>
   1ecd8:	cmp	r0, #0
   1ecdc:	movge	r0, #1
   1ece0:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1ece4:	bl	18bfc <__assert_fail@plt+0x6b70>
   1ece8:	ldr	r3, [r7]
   1ecec:	ldr	r1, [r5, #8]
   1ecf0:	ldr	r0, [r5, #12]
   1ecf4:	mov	r2, #1
   1ecf8:	bl	11c90 <fwrite_unlocked@plt>
   1ecfc:	mov	r8, r9
   1ed00:	ldr	r0, [r6, #112]	; 0x70
   1ed04:	cmp	r0, #0
   1ed08:	beq	1edb8 <__assert_fail@plt+0xcd2c>
   1ed0c:	add	r2, r8, r4
   1ed10:	udiv	r1, r8, r0
   1ed14:	sub	r2, r2, #1
   1ed18:	udiv	r0, r2, r0
   1ed1c:	cmp	r1, r0
   1ed20:	beq	1edb8 <__assert_fail@plt+0xcd2c>
   1ed24:	ldrb	r0, [r6, #13]
   1ed28:	cmp	r0, #0
   1ed2c:	bne	1ed9c <__assert_fail@plt+0xcd10>
   1ed30:	mov	r0, #1
   1ed34:	strb	r0, [r6, #13]
   1ed38:	mov	r0, #1
   1ed3c:	bl	11ea0 <tcgetpgrp@plt>
   1ed40:	cmp	r0, #0
   1ed44:	movge	r0, #1
   1ed48:	blge	18c40 <__assert_fail@plt+0x6bb4>
   1ed4c:	ldr	r0, [r5, #20]
   1ed50:	cmp	r0, #0
   1ed54:	beq	1ed84 <__assert_fail@plt+0xccf8>
   1ed58:	add	r0, r5, #16
   1ed5c:	b	1ed98 <__assert_fail@plt+0xcd0c>
   1ed60:	movw	r1, #54328	; 0xd438
   1ed64:	mov	r2, #2
   1ed68:	movt	r1, #2
   1ed6c:	bl	1202c <strncmp@plt>
   1ed70:	mov	r5, r0
   1ed74:	cmp	r0, #0
   1ed78:	mov	r3, #0
   1ed7c:	movwne	r5, #1
   1ed80:	b	1eb94 <__assert_fail@plt+0xcb08>
   1ed84:	mov	r0, r5
   1ed88:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ed8c:	add	r0, r5, #24
   1ed90:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ed94:	add	r0, r5, #8
   1ed98:	bl	18b9c <__assert_fail@plt+0x6b10>
   1ed9c:	movw	r0, #780	; 0x30c
   1eda0:	ldr	r1, [r5, #184]	; 0xb8
   1eda4:	mov	r2, #1
   1eda8:	movt	r0, #4
   1edac:	ldr	r3, [r0]
   1edb0:	ldr	r0, [r5, #188]	; 0xbc
   1edb4:	bl	11c90 <fwrite_unlocked@plt>
   1edb8:	mov	r0, r4
   1edbc:	sub	sp, fp, #28
   1edc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1edc4:	movw	r1, #54328	; 0xd438
   1edc8:	mov	r2, #2
   1edcc:	mov	r5, r3
   1edd0:	movt	r1, #2
   1edd4:	bl	1202c <strncmp@plt>
   1edd8:	mov	r3, r5
   1eddc:	cmp	r0, #0
   1ede0:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1ede4:	b	1e6a4 <__assert_fail@plt+0xc618>
   1ede8:	movw	r1, #54328	; 0xd438
   1edec:	mov	r2, #2
   1edf0:	mov	r7, r3
   1edf4:	movt	r1, #2
   1edf8:	bl	1202c <strncmp@plt>
   1edfc:	mov	r3, r7
   1ee00:	cmp	r0, #0
   1ee04:	bne	1eb18 <__assert_fail@plt+0xca8c>
   1ee08:	b	1ea94 <__assert_fail@plt+0xca08>
   1ee0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ee10:	add	fp, sp, #24
   1ee14:	sub	sp, sp, #688	; 0x2b0
   1ee18:	sub	sp, sp, #8192	; 0x2000
   1ee1c:	movw	r6, #4688	; 0x1250
   1ee20:	mov	r4, r0
   1ee24:	mov	r7, #0
   1ee28:	movt	r6, #4
   1ee2c:	ldrb	r0, [r6, #15]
   1ee30:	cmp	r0, #1
   1ee34:	bne	1ee68 <__assert_fail@plt+0xcddc>
   1ee38:	ldr	r0, [r6, #40]	; 0x28
   1ee3c:	cmp	r0, #4
   1ee40:	bne	1eecc <__assert_fail@plt+0xce40>
   1ee44:	ldrd	r0, [r4, #112]	; 0x70
   1ee48:	add	r2, sp, #23
   1ee4c:	bl	236c0 <__assert_fail@plt+0x11634>
   1ee50:	bl	11eac <strlen@plt>
   1ee54:	add	r7, r0, #1
   1ee58:	ldrb	r0, [r6, #8]
   1ee5c:	cmp	r0, #1
   1ee60:	bne	1eee8 <__assert_fail@plt+0xce5c>
   1ee64:	b	1ee74 <__assert_fail@plt+0xcde8>
   1ee68:	ldrb	r0, [r6, #8]
   1ee6c:	cmp	r0, #1
   1ee70:	bne	1eee8 <__assert_fail@plt+0xce5c>
   1ee74:	ldr	r0, [r6, #40]	; 0x28
   1ee78:	cmp	r0, #4
   1ee7c:	bne	1ef0c <__assert_fail@plt+0xce80>
   1ee80:	ldrb	r0, [r4, #132]	; 0x84
   1ee84:	cmp	r0, #0
   1ee88:	beq	1efa8 <__assert_fail@plt+0xcf1c>
   1ee8c:	movw	r2, #4816	; 0x12d0
   1ee90:	ldr	r0, [r4, #80]	; 0x50
   1ee94:	ldr	r9, [r4, #84]	; 0x54
   1ee98:	ldr	r3, [r6, #100]	; 0x64
   1ee9c:	mov	ip, #0
   1eea0:	mov	r1, #512	; 0x200
   1eea4:	movt	r2, #4
   1eea8:	ldr	r5, [r2, #92]	; 0x5c
   1eeac:	ldr	r2, [r2, #88]	; 0x58
   1eeb0:	stm	sp, {r1, ip}
   1eeb4:	mov	r1, r9
   1eeb8:	str	r2, [sp, #8]
   1eebc:	add	r2, sp, #23
   1eec0:	str	r5, [sp, #12]
   1eec4:	bl	22750 <__assert_fail@plt+0x106c4>
   1eec8:	b	1efb0 <__assert_fail@plt+0xcf24>
   1eecc:	movw	r0, #4816	; 0x12d0
   1eed0:	movt	r0, #4
   1eed4:	ldr	r0, [r0, #16]
   1eed8:	add	r7, r0, #1
   1eedc:	ldrb	r0, [r6, #8]
   1eee0:	cmp	r0, #1
   1eee4:	beq	1ee74 <__assert_fail@plt+0xcde8>
   1eee8:	ldrb	r0, [r6, #7]
   1eeec:	cmp	r0, #1
   1eef0:	bne	1efc8 <__assert_fail@plt+0xcf3c>
   1eef4:	ldr	r0, [r6, #40]	; 0x28
   1eef8:	cmp	r0, #4
   1eefc:	bne	1ef1c <__assert_fail@plt+0xce90>
   1ef00:	ldr	r0, [r4, #128]	; 0x80
   1ef04:	bl	11eac <strlen@plt>
   1ef08:	b	1ef28 <__assert_fail@plt+0xce9c>
   1ef0c:	movw	r0, #4816	; 0x12d0
   1ef10:	movt	r0, #4
   1ef14:	ldr	r0, [r0, #20]
   1ef18:	b	1efb4 <__assert_fail@plt+0xcf28>
   1ef1c:	movw	r0, #4816	; 0x12d0
   1ef20:	movt	r0, #4
   1ef24:	ldr	r0, [r0, #40]	; 0x28
   1ef28:	add	r0, r7, r0
   1ef2c:	add	r7, r0, #1
   1ef30:	ldr	r0, [r4, #148]	; 0x94
   1ef34:	cmp	r0, #0
   1ef38:	bne	1efd4 <__assert_fail@plt+0xcf48>
   1ef3c:	ldr	r5, [r4]
   1ef40:	ldr	r2, [r6, #88]	; 0x58
   1ef44:	ldr	r3, [r4, #144]	; 0x90
   1ef48:	add	lr, sp, #512	; 0x200
   1ef4c:	add	r1, sp, #676	; 0x2a4
   1ef50:	add	r8, sp, #684	; 0x2ac
   1ef54:	add	r0, lr, #163	; 0xa3
   1ef58:	str	r1, [sp]
   1ef5c:	str	r8, [sp, #680]	; 0x2a8
   1ef60:	str	r0, [sp, #4]
   1ef64:	add	r0, sp, #680	; 0x2a8
   1ef68:	mov	r1, r5
   1ef6c:	bl	1b484 <__assert_fail@plt+0x93f8>
   1ef70:	ldr	r0, [sp, #680]	; 0x2a8
   1ef74:	cmp	r0, r8
   1ef78:	cmpne	r0, r5
   1ef7c:	beq	1ef84 <__assert_fail@plt+0xcef8>
   1ef80:	bl	21218 <__assert_fail@plt+0xf18c>
   1ef84:	ldrb	r0, [sp, #675]	; 0x2a3
   1ef88:	ldr	r1, [sp, #676]	; 0x2a4
   1ef8c:	add	r0, r1, r0
   1ef90:	ldr	r3, [r6, #48]	; 0x30
   1ef94:	add	r0, r0, r7
   1ef98:	cmp	r3, #0
   1ef9c:	bne	1efe4 <__assert_fail@plt+0xcf58>
   1efa0:	sub	sp, fp, #24
   1efa4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1efa8:	movw	r0, #55770	; 0xd9da
   1efac:	movt	r0, #2
   1efb0:	bl	11eac <strlen@plt>
   1efb4:	add	r0, r7, r0
   1efb8:	add	r7, r0, #1
   1efbc:	ldrb	r0, [r6, #7]
   1efc0:	cmp	r0, #1
   1efc4:	beq	1eef4 <__assert_fail@plt+0xce68>
   1efc8:	ldr	r0, [r4, #148]	; 0x94
   1efcc:	cmp	r0, #0
   1efd0:	beq	1ef3c <__assert_fail@plt+0xceb0>
   1efd4:	ldr	r3, [r6, #48]	; 0x30
   1efd8:	add	r0, r0, r7
   1efdc:	cmp	r3, #0
   1efe0:	beq	1efa0 <__assert_fail@plt+0xcf14>
   1efe4:	ldrb	r7, [r4, #132]	; 0x84
   1efe8:	ldr	r2, [r4, #32]
   1efec:	ldr	r6, [r4, #120]	; 0x78
   1eff0:	cmp	r7, #0
   1eff4:	beq	1f03c <__assert_fail@plt+0xcfb0>
   1eff8:	and	r1, r2, #61440	; 0xf000
   1effc:	cmp	r1, #16384	; 0x4000
   1f000:	beq	1f088 <__assert_fail@plt+0xcffc>
   1f004:	cmp	r1, #32768	; 0x8000
   1f008:	bne	1f054 <__assert_fail@plt+0xcfc8>
   1f00c:	sub	r1, r3, #3
   1f010:	cmp	r7, #0
   1f014:	clz	r1, r1
   1f018:	movwne	r7, #1
   1f01c:	ands	r2, r2, #73	; 0x49
   1f020:	lsr	r1, r1, #5
   1f024:	movwne	r2, #1
   1f028:	and	r1, r1, r7
   1f02c:	and	r1, r1, r2
   1f030:	add	r0, r1, r0
   1f034:	sub	sp, fp, #24
   1f038:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f03c:	cmp	r6, #3
   1f040:	mov	r1, #1
   1f044:	cmpne	r6, #9
   1f048:	beq	1f07c <__assert_fail@plt+0xcff0>
   1f04c:	cmp	r6, #5
   1f050:	beq	1f00c <__assert_fail@plt+0xcf80>
   1f054:	mov	r1, #0
   1f058:	cmp	r3, #1
   1f05c:	beq	1f07c <__assert_fail@plt+0xcff0>
   1f060:	cmp	r7, #0
   1f064:	beq	1f098 <__assert_fail@plt+0xd00c>
   1f068:	and	r2, r2, #61440	; 0xf000
   1f06c:	mov	r1, #1
   1f070:	cmp	r2, #4096	; 0x1000
   1f074:	cmpne	r2, #40960	; 0xa000
   1f078:	bne	1f0bc <__assert_fail@plt+0xd030>
   1f07c:	add	r0, r1, r0
   1f080:	sub	sp, fp, #24
   1f084:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f088:	mov	r1, #1
   1f08c:	add	r0, r1, r0
   1f090:	sub	sp, fp, #24
   1f094:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f098:	sub	r1, r6, #1
   1f09c:	cmp	r1, #7
   1f0a0:	bcs	1f0d0 <__assert_fail@plt+0xd044>
   1f0a4:	movw	r2, #62688	; 0xf4e0
   1f0a8:	movt	r2, #2
   1f0ac:	ldr	r1, [r2, r1, lsl #2]
   1f0b0:	add	r0, r1, r0
   1f0b4:	sub	sp, fp, #24
   1f0b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f0bc:	cmp	r2, #49152	; 0xc000
   1f0c0:	movne	r1, #0
   1f0c4:	add	r0, r1, r0
   1f0c8:	sub	sp, fp, #24
   1f0cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f0d0:	mov	r1, #0
   1f0d4:	add	r0, r1, r0
   1f0d8:	sub	sp, fp, #24
   1f0dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f0e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0e4:	add	fp, sp, #28
   1f0e8:	sub	sp, sp, #12
   1f0ec:	movw	r1, #4688	; 0x1250
   1f0f0:	str	r0, [sp]
   1f0f4:	movw	r4, #4816	; 0x12d0
   1f0f8:	movt	r1, #4
   1f0fc:	movt	r4, #4
   1f100:	ldr	r0, [r1, #76]	; 0x4c
   1f104:	ldr	r1, [r1, #116]	; 0x74
   1f108:	cmp	r1, r0
   1f10c:	mov	r8, r0
   1f110:	movcc	r8, r1
   1f114:	cmp	r1, #0
   1f118:	moveq	r8, r0
   1f11c:	ldr	r0, [r4, #64]	; 0x40
   1f120:	cmp	r0, r8
   1f124:	bcs	1f1d8 <__assert_fail@plt+0xd14c>
   1f128:	ldr	r0, [r4, #60]	; 0x3c
   1f12c:	cmp	r1, #0
   1f130:	beq	1f15c <__assert_fail@plt+0xd0d0>
   1f134:	lsr	r2, r1, #1
   1f138:	cmp	r2, r8
   1f13c:	bhi	1f15c <__assert_fail@plt+0xd0d0>
   1f140:	mov	r2, #12
   1f144:	bl	296bc <_obstack_memory_used@@Base+0x3338>
   1f148:	str	r0, [r4, #60]	; 0x3c
   1f14c:	movw	r0, #4688	; 0x1250
   1f150:	movt	r0, #4
   1f154:	ldr	r5, [r0, #116]	; 0x74
   1f158:	b	1f170 <__assert_fail@plt+0xd0e4>
   1f15c:	mov	r1, r8
   1f160:	mov	r2, #24
   1f164:	bl	296bc <_obstack_memory_used@@Base+0x3338>
   1f168:	str	r0, [r4, #60]	; 0x3c
   1f16c:	lsl	r5, r8, #1
   1f170:	ldr	r1, [r4, #64]	; 0x40
   1f174:	add	r0, r5, r1
   1f178:	add	r0, r0, #1
   1f17c:	cmp	r0, r5
   1f180:	bcc	1f448 <__assert_fail@plt+0xd3bc>
   1f184:	sub	r2, r5, r1
   1f188:	mul	r1, r0, r2
   1f18c:	udiv	r2, r1, r2
   1f190:	cmp	r2, r0
   1f194:	bne	1f448 <__assert_fail@plt+0xd3bc>
   1f198:	lsr	r0, r1, #1
   1f19c:	mov	r1, #4
   1f1a0:	bl	297c8 <_obstack_memory_used@@Base+0x3444>
   1f1a4:	ldr	r1, [r4, #64]	; 0x40
   1f1a8:	cmp	r1, r5
   1f1ac:	bcs	1f1d4 <__assert_fail@plt+0xd148>
   1f1b0:	ldr	r2, [r4, #60]	; 0x3c
   1f1b4:	add	r3, r1, r1, lsl #1
   1f1b8:	add	r2, r2, r3, lsl #2
   1f1bc:	add	r2, r2, #8
   1f1c0:	add	r1, r1, #1
   1f1c4:	str	r0, [r2], #12
   1f1c8:	add	r0, r0, r1, lsl #2
   1f1cc:	cmp	r5, r1
   1f1d0:	bne	1f1c0 <__assert_fail@plt+0xd134>
   1f1d4:	str	r5, [r4, #64]	; 0x40
   1f1d8:	cmp	r8, #0
   1f1dc:	beq	1f26c <__assert_fail@plt+0xd1e0>
   1f1e0:	movw	r0, #4816	; 0x12d0
   1f1e4:	mov	r5, #0
   1f1e8:	mov	ip, #1
   1f1ec:	mov	r2, #3
   1f1f0:	vmov.i32	q8, #3	; 0x00000003
   1f1f4:	mov	r3, #1
   1f1f8:	movt	r0, #4
   1f1fc:	ldr	lr, [r0, #60]	; 0x3c
   1f200:	mov	r7, r5
   1f204:	add	r0, r5, r5, lsl #1
   1f208:	mov	r1, lr
   1f20c:	add	r5, r5, #1
   1f210:	strb	ip, [r1, r0, lsl #2]!
   1f214:	add	r0, r5, r5, lsl #1
   1f218:	cmp	r5, #4
   1f21c:	str	r0, [r1, #4]
   1f220:	ldr	r6, [r1, #8]
   1f224:	mov	r1, #0
   1f228:	bcc	1f24c <__assert_fail@plt+0xd1c0>
   1f22c:	bic	r0, r3, #3
   1f230:	bic	r1, r5, #3
   1f234:	mov	r4, r6
   1f238:	vst1.32	{d16-d17}, [r4]!
   1f23c:	subs	r0, r0, #4
   1f240:	bne	1f238 <__assert_fail@plt+0xd1ac>
   1f244:	cmp	r5, r1
   1f248:	beq	1f260 <__assert_fail@plt+0xd1d4>
   1f24c:	add	r0, r7, #1
   1f250:	str	r2, [r6, r1, lsl #2]
   1f254:	add	r1, r1, #1
   1f258:	cmp	r0, r1
   1f25c:	bne	1f250 <__assert_fail@plt+0xd1c4>
   1f260:	add	r3, r3, #1
   1f264:	cmp	r5, r8
   1f268:	bne	1f200 <__assert_fail@plt+0xd174>
   1f26c:	movw	r0, #4688	; 0x1250
   1f270:	movw	r4, #4816	; 0x12d0
   1f274:	movt	r0, #4
   1f278:	movt	r4, #4
   1f27c:	ldr	r0, [r0, #76]	; 0x4c
   1f280:	cmp	r0, #0
   1f284:	beq	1f414 <__assert_fail@plt+0xd388>
   1f288:	mov	sl, #0
   1f28c:	ldr	r0, [r4, #12]
   1f290:	ldr	r0, [r0, sl, lsl #2]
   1f294:	bl	1ee0c <__assert_fail@plt+0xcd80>
   1f298:	cmp	r8, #0
   1f29c:	beq	1f368 <__assert_fail@plt+0xd2dc>
   1f2a0:	movw	r1, #4688	; 0x1250
   1f2a4:	ldr	r6, [r4, #60]	; 0x3c
   1f2a8:	movt	r1, #4
   1f2ac:	ldr	r5, [r1, #76]	; 0x4c
   1f2b0:	ldr	r1, [r1, #112]	; 0x70
   1f2b4:	str	r1, [sp, #4]
   1f2b8:	ldr	r1, [sp]
   1f2bc:	str	r5, [sp, #8]
   1f2c0:	cmp	r1, #0
   1f2c4:	beq	1f384 <__assert_fail@plt+0xd2f8>
   1f2c8:	mov	r7, #0
   1f2cc:	add	r4, r7, r7, lsl #1
   1f2d0:	mov	r3, r6
   1f2d4:	ldrb	r1, [r3, r4, lsl #2]!
   1f2d8:	cmp	r1, #0
   1f2dc:	beq	1f358 <__assert_fail@plt+0xd2cc>
   1f2e0:	mov	lr, r8
   1f2e4:	add	r8, r6, r4, lsl #2
   1f2e8:	add	r1, r5, r7
   1f2ec:	add	r2, r7, #1
   1f2f0:	mov	r4, r0
   1f2f4:	ldr	r9, [r8, #8]
   1f2f8:	udiv	r1, r1, r2
   1f2fc:	udiv	r1, sl, r1
   1f300:	cmp	r1, r7
   1f304:	addne	r4, r4, #2
   1f308:	ldr	ip, [r9, r1, lsl #2]
   1f30c:	cmp	r4, ip
   1f310:	bls	1f344 <__assert_fail@plt+0xd2b8>
   1f314:	ldr	r5, [r8, #4]
   1f318:	sub	r7, r4, ip
   1f31c:	add	r7, r7, r5
   1f320:	ldr	r5, [sp, #8]
   1f324:	str	r7, [r8, #4]
   1f328:	str	r4, [r9, r1, lsl #2]
   1f32c:	ldr	r7, [sp, #4]
   1f330:	ldr	r1, [r8, #4]
   1f334:	cmp	r1, r7
   1f338:	mov	r1, #0
   1f33c:	movwcc	r1, #1
   1f340:	strb	r1, [r3]
   1f344:	mov	r7, r2
   1f348:	mov	r8, lr
   1f34c:	cmp	r7, r8
   1f350:	bne	1f2cc <__assert_fail@plt+0xd240>
   1f354:	b	1f400 <__assert_fail@plt+0xd374>
   1f358:	add	r7, r7, #1
   1f35c:	cmp	r7, r8
   1f360:	bne	1f2cc <__assert_fail@plt+0xd240>
   1f364:	b	1f400 <__assert_fail@plt+0xd374>
   1f368:	movw	r0, #4688	; 0x1250
   1f36c:	movt	r0, #4
   1f370:	ldr	r5, [r0, #76]	; 0x4c
   1f374:	add	sl, sl, #1
   1f378:	cmp	sl, r5
   1f37c:	bcc	1f28c <__assert_fail@plt+0xd200>
   1f380:	b	1f414 <__assert_fail@plt+0xd388>
   1f384:	add	r3, r6, #4
   1f388:	mov	r6, #0
   1f38c:	ldrb	r1, [r3, #-4]
   1f390:	mov	r2, r6
   1f394:	add	r6, r6, #1
   1f398:	cmp	r1, #0
   1f39c:	beq	1f3f4 <__assert_fail@plt+0xd368>
   1f3a0:	ldr	r4, [r3, #4]
   1f3a4:	udiv	r1, sl, r6
   1f3a8:	mls	r1, r1, r6, sl
   1f3ac:	cmp	r2, r1
   1f3b0:	mov	r2, r0
   1f3b4:	addne	r2, r2, #2
   1f3b8:	ldr	r7, [r4, r1, lsl #2]
   1f3bc:	cmp	r2, r7
   1f3c0:	bls	1f3f4 <__assert_fail@plt+0xd368>
   1f3c4:	ldr	r5, [r3]
   1f3c8:	sub	r7, r2, r7
   1f3cc:	add	r7, r7, r5
   1f3d0:	ldr	r5, [sp, #8]
   1f3d4:	str	r7, [r3]
   1f3d8:	str	r2, [r4, r1, lsl #2]
   1f3dc:	ldr	r2, [sp, #4]
   1f3e0:	ldr	r1, [r3]
   1f3e4:	cmp	r1, r2
   1f3e8:	mov	r1, #0
   1f3ec:	movwcc	r1, #1
   1f3f0:	strb	r1, [r3, #-4]
   1f3f4:	add	r3, r3, #12
   1f3f8:	cmp	r8, r6
   1f3fc:	bne	1f38c <__assert_fail@plt+0xd300>
   1f400:	movw	r4, #4816	; 0x12d0
   1f404:	movt	r4, #4
   1f408:	add	sl, sl, #1
   1f40c:	cmp	sl, r5
   1f410:	bcc	1f28c <__assert_fail@plt+0xd200>
   1f414:	ldr	r0, [r4, #60]	; 0x3c
   1f418:	add	r1, r8, r8, lsl #1
   1f41c:	add	r0, r0, r1, lsl #2
   1f420:	sub	r1, r0, #12
   1f424:	mov	r0, r8
   1f428:	cmp	r8, #2
   1f42c:	bcc	1f440 <__assert_fail@plt+0xd3b4>
   1f430:	ldrb	r2, [r1], #-12
   1f434:	sub	r8, r0, #1
   1f438:	cmp	r2, #0
   1f43c:	beq	1f424 <__assert_fail@plt+0xd398>
   1f440:	sub	sp, fp, #28
   1f444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f448:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   1f44c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f450:	add	fp, sp, #24
   1f454:	sub	sp, sp, #8
   1f458:	ldr	r8, [fp, #8]
   1f45c:	cmp	r0, #0
   1f460:	beq	1f514 <__assert_fail@plt+0xd488>
   1f464:	mov	r1, #0
   1f468:	mov	r5, r0
   1f46c:	bl	23bf8 <__assert_fail@plt+0x11b6c>
   1f470:	mov	r6, r0
   1f474:	mov	r0, r5
   1f478:	bl	11eac <strlen@plt>
   1f47c:	movw	r7, #4816	; 0x12d0
   1f480:	mov	r2, r0
   1f484:	movw	r4, #780	; 0x30c
   1f488:	movt	r7, #4
   1f48c:	movt	r4, #4
   1f490:	ldrd	r0, [r7, #80]	; 0x50
   1f494:	ldr	r3, [r4]
   1f498:	adds	r0, r0, r2
   1f49c:	adc	r1, r1, #0
   1f4a0:	strd	r0, [r7, #80]	; 0x50
   1f4a4:	mov	r0, r5
   1f4a8:	mov	r1, #1
   1f4ac:	bl	11c90 <fwrite_unlocked@plt>
   1f4b0:	sub	r0, r8, r6
   1f4b4:	mvn	r5, #0
   1f4b8:	mov	r6, #32
   1f4bc:	cmp	r0, #0
   1f4c0:	mvngt	r5, r0
   1f4c4:	ldrd	r0, [r7, #80]	; 0x50
   1f4c8:	adds	r0, r0, #1
   1f4cc:	adc	r1, r1, #0
   1f4d0:	strd	r0, [r7, #80]	; 0x50
   1f4d4:	ldr	r0, [r4]
   1f4d8:	ldr	r1, [r0, #20]
   1f4dc:	ldr	r2, [r0, #24]
   1f4e0:	cmp	r1, r2
   1f4e4:	bcs	1f500 <__assert_fail@plt+0xd474>
   1f4e8:	add	r2, r1, #1
   1f4ec:	str	r2, [r0, #20]
   1f4f0:	strb	r6, [r1]
   1f4f4:	adds	r5, r5, #1
   1f4f8:	bne	1f4c4 <__assert_fail@plt+0xd438>
   1f4fc:	b	1f544 <__assert_fail@plt+0xd4b8>
   1f500:	mov	r1, #32
   1f504:	bl	11f54 <__overflow@plt>
   1f508:	adds	r5, r5, #1
   1f50c:	bne	1f4c4 <__assert_fail@plt+0xd438>
   1f510:	b	1f544 <__assert_fail@plt+0xd4b8>
   1f514:	movw	r1, #56276	; 0xdbd4
   1f518:	stm	sp, {r2, r3}
   1f51c:	mov	r0, #1
   1f520:	mov	r2, r8
   1f524:	movt	r1, #2
   1f528:	bl	11f00 <__printf_chk@plt>
   1f52c:	movw	r1, #4816	; 0x12d0
   1f530:	movt	r1, #4
   1f534:	ldrd	r2, [r1, #80]	; 0x50
   1f538:	adds	r2, r2, r0
   1f53c:	adc	r3, r3, r0, asr #31
   1f540:	strd	r2, [r1, #80]	; 0x50
   1f544:	sub	sp, fp, #24
   1f548:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f54c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f550:	add	fp, sp, #24
   1f554:	sub	sp, sp, #128	; 0x80
   1f558:	mov	r5, r0
   1f55c:	cmp	r1, #0
   1f560:	beq	1f5e0 <__assert_fail@plt+0xd554>
   1f564:	movw	r4, #1025	; 0x401
   1f568:	cmp	r1, #1024	; 0x400
   1f56c:	addls	r4, r1, #1
   1f570:	mov	r0, r4
   1f574:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   1f578:	cmp	r0, #0
   1f57c:	beq	1f66c <__assert_fail@plt+0xd5e0>
   1f580:	mov	r6, r0
   1f584:	mov	r0, r5
   1f588:	mov	r1, r6
   1f58c:	mov	r2, r4
   1f590:	bl	11d38 <readlink@plt>
   1f594:	cmn	r0, #1
   1f598:	ble	1f67c <__assert_fail@plt+0xd5f0>
   1f59c:	cmp	r0, r4
   1f5a0:	bcc	1f6d4 <__assert_fail@plt+0xd648>
   1f5a4:	mov	r0, r6
   1f5a8:	bl	21218 <__assert_fail@plt+0xf18c>
   1f5ac:	cmn	r4, #-1073741823	; 0xc0000001
   1f5b0:	bhi	1f5bc <__assert_fail@plt+0xd530>
   1f5b4:	lsl	r4, r4, #1
   1f5b8:	b	1f5c8 <__assert_fail@plt+0xd53c>
   1f5bc:	cmn	r4, #-2147483647	; 0x80000001
   1f5c0:	mvn	r4, #-2147483648	; 0x80000000
   1f5c4:	bcs	1f66c <__assert_fail@plt+0xd5e0>
   1f5c8:	mov	r0, r4
   1f5cc:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   1f5d0:	mov	r6, r0
   1f5d4:	cmp	r0, #0
   1f5d8:	bne	1f584 <__assert_fail@plt+0xd4f8>
   1f5dc:	b	1f66c <__assert_fail@plt+0xd5e0>
   1f5e0:	mov	r4, #128	; 0x80
   1f5e4:	mov	r8, sp
   1f5e8:	mov	r6, #0
   1f5ec:	cmp	r4, #128	; 0x80
   1f5f0:	mov	r7, r8
   1f5f4:	beq	1f628 <__assert_fail@plt+0xd59c>
   1f5f8:	b	1f610 <__assert_fail@plt+0xd584>
   1f5fc:	mov	r4, r0
   1f600:	mov	r6, #0
   1f604:	cmp	r4, #128	; 0x80
   1f608:	mov	r7, r8
   1f60c:	beq	1f628 <__assert_fail@plt+0xd59c>
   1f610:	mov	r0, r4
   1f614:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   1f618:	mov	r7, r0
   1f61c:	cmp	r0, #0
   1f620:	mov	r6, r0
   1f624:	beq	1f66c <__assert_fail@plt+0xd5e0>
   1f628:	mov	r0, r5
   1f62c:	mov	r1, r7
   1f630:	mov	r2, r4
   1f634:	bl	11d38 <readlink@plt>
   1f638:	cmp	r0, #0
   1f63c:	blt	1f67c <__assert_fail@plt+0xd5f0>
   1f640:	cmp	r0, r4
   1f644:	bcc	1f694 <__assert_fail@plt+0xd608>
   1f648:	mov	r0, r6
   1f64c:	bl	21218 <__assert_fail@plt+0xf18c>
   1f650:	cmp	r4, #1073741824	; 0x40000000
   1f654:	bcs	1f660 <__assert_fail@plt+0xd5d4>
   1f658:	lsl	r0, r4, #1
   1f65c:	b	1f5fc <__assert_fail@plt+0xd570>
   1f660:	mvn	r0, #-2147483648	; 0x80000000
   1f664:	cmn	r4, #-2147483647	; 0x80000001
   1f668:	bcc	1f5fc <__assert_fail@plt+0xd570>
   1f66c:	bl	11ed0 <__errno_location@plt>
   1f670:	mov	r1, #12
   1f674:	str	r1, [r0]
   1f678:	b	1f684 <__assert_fail@plt+0xd5f8>
   1f67c:	mov	r0, r6
   1f680:	bl	21218 <__assert_fail@plt+0xf18c>
   1f684:	mov	r5, #0
   1f688:	mov	r0, r5
   1f68c:	sub	sp, fp, #24
   1f690:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f694:	mov	r5, #0
   1f698:	add	r8, r0, #1
   1f69c:	cmp	r6, #0
   1f6a0:	strb	r5, [r7, r0]
   1f6a4:	beq	1f6f8 <__assert_fail@plt+0xd66c>
   1f6a8:	cmp	r8, r4
   1f6ac:	bcs	1f6e8 <__assert_fail@plt+0xd65c>
   1f6b0:	mov	r0, r6
   1f6b4:	mov	r1, r8
   1f6b8:	bl	2ad04 <_obstack_memory_used@@Base+0x4980>
   1f6bc:	mov	r5, r0
   1f6c0:	cmp	r0, #0
   1f6c4:	moveq	r5, r6
   1f6c8:	mov	r0, r5
   1f6cc:	sub	sp, fp, #24
   1f6d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f6d4:	mov	r1, #0
   1f6d8:	add	r8, r0, #1
   1f6dc:	strb	r1, [r6, r0]
   1f6e0:	cmp	r8, r4
   1f6e4:	bcc	1f6b0 <__assert_fail@plt+0xd624>
   1f6e8:	mov	r5, r6
   1f6ec:	mov	r0, r5
   1f6f0:	sub	sp, fp, #24
   1f6f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f6f8:	mov	r0, r8
   1f6fc:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   1f700:	cmp	r0, #0
   1f704:	beq	1f688 <__assert_fail@plt+0xd5fc>
   1f708:	mov	r1, r7
   1f70c:	mov	r2, r8
   1f710:	mov	r4, r0
   1f714:	bl	11c60 <memcpy@plt>
   1f718:	mov	r5, r4
   1f71c:	mov	r0, r5
   1f720:	sub	sp, fp, #24
   1f724:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f728:	mov	r0, #1
   1f72c:	b	1861c <__assert_fail@plt+0x6590>
   1f730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f734:	add	fp, sp, #28
   1f738:	sub	sp, sp, #12
   1f73c:	mov	r4, r3
   1f740:	mov	r9, r2
   1f744:	mov	r7, r1
   1f748:	mov	r8, r0
   1f74c:	bl	11eac <strlen@plt>
   1f750:	ldr	r6, [r7]
   1f754:	cmp	r6, #0
   1f758:	beq	1f804 <__assert_fail@plt+0xd778>
   1f75c:	mov	r5, r0
   1f760:	cmp	r9, #0
   1f764:	beq	1f814 <__assert_fail@plt+0xd788>
   1f768:	add	r0, r7, #4
   1f76c:	mvn	sl, #0
   1f770:	mov	r7, #0
   1f774:	str	r9, [sp]
   1f778:	str	r0, [sp, #8]
   1f77c:	mov	r0, #0
   1f780:	str	r0, [sp, #4]
   1f784:	mov	r0, r9
   1f788:	mov	r0, r6
   1f78c:	mov	r1, r8
   1f790:	mov	r2, r5
   1f794:	bl	1202c <strncmp@plt>
   1f798:	cmp	r0, #0
   1f79c:	bne	1f7e8 <__assert_fail@plt+0xd75c>
   1f7a0:	mov	r0, r6
   1f7a4:	bl	11eac <strlen@plt>
   1f7a8:	cmp	r0, r5
   1f7ac:	beq	1f808 <__assert_fail@plt+0xd77c>
   1f7b0:	cmn	sl, #1
   1f7b4:	beq	1f7e4 <__assert_fail@plt+0xd758>
   1f7b8:	ldr	r0, [sp]
   1f7bc:	mov	r1, r9
   1f7c0:	mov	r2, r4
   1f7c4:	mla	r0, sl, r4, r0
   1f7c8:	bl	11c9c <memcmp@plt>
   1f7cc:	ldr	r1, [sp, #4]
   1f7d0:	cmp	r0, #0
   1f7d4:	movwne	r0, #1
   1f7d8:	orr	r1, r1, r0
   1f7dc:	str	r1, [sp, #4]
   1f7e0:	b	1f7e8 <__assert_fail@plt+0xd75c>
   1f7e4:	mov	sl, r7
   1f7e8:	ldr	r0, [sp, #8]
   1f7ec:	add	r9, r9, r4
   1f7f0:	ldr	r6, [r0, r7, lsl #2]
   1f7f4:	add	r7, r7, #1
   1f7f8:	cmp	r6, #0
   1f7fc:	bne	1f788 <__assert_fail@plt+0xd6fc>
   1f800:	b	1f87c <__assert_fail@plt+0xd7f0>
   1f804:	mvn	r7, #0
   1f808:	mov	r0, r7
   1f80c:	sub	sp, fp, #28
   1f810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f814:	add	r4, r7, #4
   1f818:	mov	r0, #0
   1f81c:	mvn	sl, #0
   1f820:	mov	r7, #0
   1f824:	str	r0, [sp, #4]
   1f828:	mov	r0, r6
   1f82c:	mov	r1, r8
   1f830:	mov	r2, r5
   1f834:	bl	1202c <strncmp@plt>
   1f838:	cmp	r0, #0
   1f83c:	bne	1f86c <__assert_fail@plt+0xd7e0>
   1f840:	mov	r0, r6
   1f844:	bl	11eac <strlen@plt>
   1f848:	cmp	r0, r5
   1f84c:	beq	1f808 <__assert_fail@plt+0xd77c>
   1f850:	ldr	r1, [sp, #4]
   1f854:	cmn	sl, #1
   1f858:	add	r0, sl, #1
   1f85c:	movwne	r0, #1
   1f860:	moveq	sl, r7
   1f864:	orr	r1, r1, r0
   1f868:	str	r1, [sp, #4]
   1f86c:	ldr	r6, [r4, r7, lsl #2]
   1f870:	add	r7, r7, #1
   1f874:	cmp	r6, #0
   1f878:	bne	1f828 <__assert_fail@plt+0xd79c>
   1f87c:	ldr	r0, [sp, #4]
   1f880:	tst	r0, #1
   1f884:	mvnne	sl, #1
   1f888:	mov	r0, sl
   1f88c:	sub	sp, fp, #28
   1f890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f894:	push	{r4, r5, r6, r7, fp, lr}
   1f898:	add	fp, sp, #16
   1f89c:	mov	r5, r0
   1f8a0:	ldr	r0, [r1]
   1f8a4:	mvn	r4, #0
   1f8a8:	cmp	r0, #0
   1f8ac:	beq	1f8dc <__assert_fail@plt+0xd850>
   1f8b0:	add	r7, r1, #4
   1f8b4:	mov	r6, #0
   1f8b8:	mov	r1, r5
   1f8bc:	bl	11bd0 <strcmp@plt>
   1f8c0:	cmp	r0, #0
   1f8c4:	moveq	r0, r6
   1f8c8:	popeq	{r4, r5, r6, r7, fp, pc}
   1f8cc:	ldr	r0, [r7, r6, lsl #2]
   1f8d0:	add	r6, r6, #1
   1f8d4:	cmp	r0, #0
   1f8d8:	bne	1f8b8 <__assert_fail@plt+0xd82c>
   1f8dc:	mov	r0, r4
   1f8e0:	pop	{r4, r5, r6, r7, fp, pc}
   1f8e4:	push	{r4, r5, r6, sl, fp, lr}
   1f8e8:	add	fp, sp, #16
   1f8ec:	sub	sp, sp, #8
   1f8f0:	mov	r4, r1
   1f8f4:	movw	r1, #62790	; 0xf546
   1f8f8:	mov	r5, r0
   1f8fc:	movw	r0, #62763	; 0xf52b
   1f900:	cmn	r2, #1
   1f904:	mov	r2, #5
   1f908:	movt	r0, #2
   1f90c:	movt	r1, #2
   1f910:	moveq	r1, r0
   1f914:	mov	r0, #0
   1f918:	bl	11cb4 <dcgettext@plt>
   1f91c:	mov	r6, r0
   1f920:	mov	r0, #0
   1f924:	mov	r1, #8
   1f928:	mov	r2, r4
   1f92c:	bl	27da8 <_obstack_memory_used@@Base+0x1a24>
   1f930:	mov	r4, r0
   1f934:	mov	r0, #1
   1f938:	mov	r1, r5
   1f93c:	bl	28368 <_obstack_memory_used@@Base+0x1fe4>
   1f940:	str	r0, [sp]
   1f944:	mov	r0, #0
   1f948:	mov	r1, #0
   1f94c:	mov	r2, r6
   1f950:	mov	r3, r4
   1f954:	bl	11db0 <error@plt>
   1f958:	sub	sp, fp, #16
   1f95c:	pop	{r4, r5, r6, sl, fp, pc}
   1f960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f964:	add	fp, sp, #28
   1f968:	sub	sp, sp, #4
   1f96c:	mov	r5, r1
   1f970:	movw	r1, #62819	; 0xf563
   1f974:	mov	sl, r2
   1f978:	mov	r7, r0
   1f97c:	mov	r0, #0
   1f980:	mov	r2, #5
   1f984:	mov	r8, #0
   1f988:	movt	r1, #2
   1f98c:	bl	11cb4 <dcgettext@plt>
   1f990:	movw	r4, #776	; 0x308
   1f994:	movt	r4, #4
   1f998:	ldr	r1, [r4]
   1f99c:	bl	11b94 <fputs_unlocked@plt>
   1f9a0:	ldr	r6, [r7]
   1f9a4:	cmp	r6, #0
   1f9a8:	beq	1fa48 <__assert_fail@plt+0xd9bc>
   1f9ac:	add	r9, r7, #4
   1f9b0:	mov	r7, #0
   1f9b4:	str	sl, [sp]
   1f9b8:	cmp	r8, #0
   1f9bc:	beq	1f9d8 <__assert_fail@plt+0xd94c>
   1f9c0:	mov	r0, r7
   1f9c4:	mov	r1, r5
   1f9c8:	mov	r2, sl
   1f9cc:	bl	11c9c <memcmp@plt>
   1f9d0:	cmp	r0, #0
   1f9d4:	beq	1fa04 <__assert_fail@plt+0xd978>
   1f9d8:	ldr	r7, [r4]
   1f9dc:	mov	r0, r6
   1f9e0:	bl	28378 <_obstack_memory_used@@Base+0x1ff4>
   1f9e4:	movw	r2, #62840	; 0xf578
   1f9e8:	mov	r3, r0
   1f9ec:	mov	r0, r7
   1f9f0:	mov	r1, #1
   1f9f4:	movt	r2, #2
   1f9f8:	bl	11f24 <__fprintf_chk@plt>
   1f9fc:	mov	r7, r5
   1fa00:	b	1fa34 <__assert_fail@plt+0xd9a8>
   1fa04:	mov	sl, r9
   1fa08:	ldr	r9, [r4]
   1fa0c:	mov	r0, r6
   1fa10:	bl	28378 <_obstack_memory_used@@Base+0x1ff4>
   1fa14:	mov	r3, r0
   1fa18:	mov	r0, r9
   1fa1c:	mov	r9, sl
   1fa20:	ldr	sl, [sp]
   1fa24:	movw	r2, #62848	; 0xf580
   1fa28:	mov	r1, #1
   1fa2c:	movt	r2, #2
   1fa30:	bl	11f24 <__fprintf_chk@plt>
   1fa34:	ldr	r6, [r9, -r8, lsl #2]
   1fa38:	add	r5, r5, sl
   1fa3c:	sub	r8, r8, #1
   1fa40:	cmp	r6, #0
   1fa44:	bne	1f9b8 <__assert_fail@plt+0xd92c>
   1fa48:	ldr	r0, [r4]
   1fa4c:	ldr	r1, [r0, #20]
   1fa50:	ldr	r2, [r0, #24]
   1fa54:	cmp	r1, r2
   1fa58:	addcc	r2, r1, #1
   1fa5c:	strcc	r2, [r0, #20]
   1fa60:	movcc	r0, #10
   1fa64:	strbcc	r0, [r1]
   1fa68:	subcc	sp, fp, #28
   1fa6c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa70:	mov	r1, #10
   1fa74:	sub	sp, fp, #28
   1fa78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa7c:	b	11f54 <__overflow@plt>
   1fa80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa84:	add	fp, sp, #28
   1fa88:	sub	sp, sp, #12
   1fa8c:	mov	sl, r0
   1fa90:	ldr	r0, [fp, #16]
   1fa94:	ldr	r9, [fp, #8]
   1fa98:	mov	r5, r3
   1fa9c:	mov	r8, r2
   1faa0:	mov	r6, r1
   1faa4:	cmp	r0, #0
   1faa8:	beq	1fad8 <__assert_fail@plt+0xda4c>
   1faac:	mov	r0, r6
   1fab0:	mov	r1, r8
   1fab4:	mov	r2, r5
   1fab8:	mov	r3, r9
   1fabc:	bl	1f730 <__assert_fail@plt+0xd6a4>
   1fac0:	mov	r4, r0
   1fac4:	cmn	r4, #1
   1fac8:	ble	1fb28 <__assert_fail@plt+0xda9c>
   1facc:	mov	r0, r4
   1fad0:	sub	sp, fp, #28
   1fad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fad8:	ldr	r0, [r8]
   1fadc:	movw	r7, #62763	; 0xf52b
   1fae0:	str	r5, [sp, #8]
   1fae4:	movt	r7, #2
   1fae8:	cmp	r0, #0
   1faec:	beq	1fb40 <__assert_fail@plt+0xdab4>
   1faf0:	add	r5, r8, #4
   1faf4:	mov	r4, #0
   1faf8:	mov	r1, r6
   1fafc:	bl	11bd0 <strcmp@plt>
   1fb00:	cmp	r0, #0
   1fb04:	beq	1fb1c <__assert_fail@plt+0xda90>
   1fb08:	ldr	r0, [r5, r4, lsl #2]
   1fb0c:	add	r4, r4, #1
   1fb10:	cmp	r0, #0
   1fb14:	bne	1faf8 <__assert_fail@plt+0xda6c>
   1fb18:	b	1fb40 <__assert_fail@plt+0xdab4>
   1fb1c:	ldr	r5, [sp, #8]
   1fb20:	cmn	r4, #1
   1fb24:	bgt	1facc <__assert_fail@plt+0xda40>
   1fb28:	movw	r0, #62763	; 0xf52b
   1fb2c:	movw	r7, #62790	; 0xf546
   1fb30:	str	r5, [sp, #8]
   1fb34:	movt	r0, #2
   1fb38:	movt	r7, #2
   1fb3c:	moveq	r7, r0
   1fb40:	ldr	r5, [fp, #12]
   1fb44:	mov	r0, #0
   1fb48:	mov	r1, r7
   1fb4c:	mov	r2, #5
   1fb50:	bl	11cb4 <dcgettext@plt>
   1fb54:	mov	r4, r0
   1fb58:	mov	r0, #0
   1fb5c:	mov	r1, #8
   1fb60:	mov	r2, r6
   1fb64:	bl	27da8 <_obstack_memory_used@@Base+0x1a24>
   1fb68:	mov	r6, r0
   1fb6c:	mov	r0, #1
   1fb70:	mov	r1, sl
   1fb74:	bl	28368 <_obstack_memory_used@@Base+0x1fe4>
   1fb78:	str	r0, [sp]
   1fb7c:	mov	r0, #0
   1fb80:	mov	r1, #0
   1fb84:	mov	r2, r4
   1fb88:	mov	r3, r6
   1fb8c:	bl	11db0 <error@plt>
   1fb90:	ldr	r1, [sp, #8]
   1fb94:	mov	r0, r8
   1fb98:	mov	r2, r9
   1fb9c:	bl	1f960 <__assert_fail@plt+0xd8d4>
   1fba0:	blx	r5
   1fba4:	mvn	r4, #0
   1fba8:	mov	r0, r4
   1fbac:	sub	sp, fp, #28
   1fbb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fbb8:	add	fp, sp, #24
   1fbbc:	ldr	r6, [r1]
   1fbc0:	cmp	r6, #0
   1fbc4:	beq	1fc28 <__assert_fail@plt+0xdb9c>
   1fbc8:	mov	r8, r1
   1fbcc:	mov	r7, r2
   1fbd0:	mov	r1, r2
   1fbd4:	mov	r2, r3
   1fbd8:	mov	r4, r3
   1fbdc:	mov	r9, r0
   1fbe0:	bl	11c9c <memcmp@plt>
   1fbe4:	cmp	r0, #0
   1fbe8:	beq	1fc20 <__assert_fail@plt+0xdb94>
   1fbec:	add	r7, r7, r4
   1fbf0:	add	r5, r8, #4
   1fbf4:	ldr	r6, [r5]
   1fbf8:	cmp	r6, #0
   1fbfc:	beq	1fc28 <__assert_fail@plt+0xdb9c>
   1fc00:	mov	r0, r9
   1fc04:	mov	r1, r7
   1fc08:	mov	r2, r4
   1fc0c:	bl	11c9c <memcmp@plt>
   1fc10:	add	r7, r7, r4
   1fc14:	add	r5, r5, #4
   1fc18:	cmp	r0, #0
   1fc1c:	bne	1fbf4 <__assert_fail@plt+0xdb68>
   1fc20:	mov	r0, r6
   1fc24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fc28:	mov	r6, #0
   1fc2c:	mov	r0, r6
   1fc30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fc34:	sub	r0, r0, #1
   1fc38:	ldrb	r3, [r0, #1]!
   1fc3c:	cmp	r3, #47	; 0x2f
   1fc40:	beq	1fc38 <__assert_fail@plt+0xdbac>
   1fc44:	mov	r2, #0
   1fc48:	mov	r1, r0
   1fc4c:	uxtb	r3, r3
   1fc50:	cmp	r3, #47	; 0x2f
   1fc54:	beq	1fc7c <__assert_fail@plt+0xdbf0>
   1fc58:	cmp	r3, #0
   1fc5c:	bxeq	lr
   1fc60:	tst	r2, #1
   1fc64:	mov	r2, #0
   1fc68:	movne	r0, r1
   1fc6c:	ldrb	r3, [r1, #1]!
   1fc70:	uxtb	r3, r3
   1fc74:	cmp	r3, #47	; 0x2f
   1fc78:	bne	1fc58 <__assert_fail@plt+0xdbcc>
   1fc7c:	ldrb	r3, [r1, #1]!
   1fc80:	mov	r2, #1
   1fc84:	uxtb	r3, r3
   1fc88:	cmp	r3, #47	; 0x2f
   1fc8c:	bne	1fc58 <__assert_fail@plt+0xdbcc>
   1fc90:	b	1fc7c <__assert_fail@plt+0xdbf0>
   1fc94:	push	{r4, sl, fp, lr}
   1fc98:	add	fp, sp, #8
   1fc9c:	mov	r4, r0
   1fca0:	bl	11eac <strlen@plt>
   1fca4:	mov	r1, r0
   1fca8:	sub	r2, r4, #1
   1fcac:	mov	r0, r1
   1fcb0:	cmp	r1, #2
   1fcb4:	popcc	{r4, sl, fp, pc}
   1fcb8:	ldrb	r3, [r2, r0]
   1fcbc:	sub	r1, r0, #1
   1fcc0:	cmp	r3, #47	; 0x2f
   1fcc4:	beq	1fcac <__assert_fail@plt+0xdc20>
   1fcc8:	pop	{r4, sl, fp, pc}
   1fccc:	sub	r2, r0, #65	; 0x41
   1fcd0:	mov	r1, r0
   1fcd4:	mov	r0, #1
   1fcd8:	cmp	r2, #26
   1fcdc:	subcs	r2, r1, #97	; 0x61
   1fce0:	cmpcs	r2, #26
   1fce4:	bcs	1fcec <__assert_fail@plt+0xdc60>
   1fce8:	bx	lr
   1fcec:	sub	r1, r1, #48	; 0x30
   1fcf0:	cmp	r1, #10
   1fcf4:	movcs	r0, #0
   1fcf8:	bx	lr
   1fcfc:	sub	r2, r0, #65	; 0x41
   1fd00:	mov	r1, r0
   1fd04:	mov	r0, #1
   1fd08:	cmp	r2, #26
   1fd0c:	subcs	r1, r1, #97	; 0x61
   1fd10:	cmpcs	r1, #26
   1fd14:	movcs	r0, #0
   1fd18:	bx	lr
   1fd1c:	mov	r1, #0
   1fd20:	cmp	r0, #128	; 0x80
   1fd24:	movwcc	r1, #1
   1fd28:	mov	r0, r1
   1fd2c:	bx	lr
   1fd30:	sub	r1, r0, #9
   1fd34:	sub	r0, r0, #32
   1fd38:	clz	r1, r1
   1fd3c:	clz	r0, r0
   1fd40:	lsr	r1, r1, #5
   1fd44:	lsr	r0, r0, #5
   1fd48:	orr	r0, r0, r1
   1fd4c:	bx	lr
   1fd50:	mov	r1, r0
   1fd54:	mov	r0, #1
   1fd58:	cmp	r1, #32
   1fd5c:	bxcc	lr
   1fd60:	cmp	r1, #127	; 0x7f
   1fd64:	movne	r0, #0
   1fd68:	bx	lr
   1fd6c:	sub	r1, r0, #48	; 0x30
   1fd70:	mov	r0, #0
   1fd74:	cmp	r1, #10
   1fd78:	movwcc	r0, #1
   1fd7c:	bx	lr
   1fd80:	sub	r1, r0, #33	; 0x21
   1fd84:	mov	r0, #0
   1fd88:	cmp	r1, #94	; 0x5e
   1fd8c:	movwcc	r0, #1
   1fd90:	bx	lr
   1fd94:	sub	r1, r0, #97	; 0x61
   1fd98:	mov	r0, #0
   1fd9c:	cmp	r1, #26
   1fda0:	movwcc	r0, #1
   1fda4:	bx	lr
   1fda8:	sub	r1, r0, #32
   1fdac:	mov	r0, #0
   1fdb0:	cmp	r1, #95	; 0x5f
   1fdb4:	movwcc	r0, #1
   1fdb8:	bx	lr
   1fdbc:	sub	r1, r0, #33	; 0x21
   1fdc0:	cmp	r1, #93	; 0x5d
   1fdc4:	bhi	1ff50 <__assert_fail@plt+0xdec4>
   1fdc8:	add	r2, pc, #4
   1fdcc:	mov	r0, #1
   1fdd0:	ldr	pc, [r2, r1, lsl #2]
   1fdd4:	andeq	pc, r1, ip, asr #30
   1fdd8:	andeq	pc, r1, ip, asr #30
   1fddc:	andeq	pc, r1, ip, asr #30
   1fde0:	andeq	pc, r1, ip, asr #30
   1fde4:	andeq	pc, r1, ip, asr #30
   1fde8:	andeq	pc, r1, ip, asr #30
   1fdec:	andeq	pc, r1, ip, asr #30
   1fdf0:	andeq	pc, r1, ip, asr #30
   1fdf4:	andeq	pc, r1, ip, asr #30
   1fdf8:	andeq	pc, r1, ip, asr #30
   1fdfc:	andeq	pc, r1, ip, asr #30
   1fe00:	andeq	pc, r1, ip, asr #30
   1fe04:	andeq	pc, r1, ip, asr #30
   1fe08:	andeq	pc, r1, ip, asr #30
   1fe0c:	andeq	pc, r1, ip, asr #30
   1fe10:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe14:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe18:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe1c:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe20:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe24:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe28:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe2c:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe30:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe34:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe38:	andeq	pc, r1, ip, asr #30
   1fe3c:	andeq	pc, r1, ip, asr #30
   1fe40:	andeq	pc, r1, ip, asr #30
   1fe44:	andeq	pc, r1, ip, asr #30
   1fe48:	andeq	pc, r1, ip, asr #30
   1fe4c:	andeq	pc, r1, ip, asr #30
   1fe50:	andeq	pc, r1, ip, asr #30
   1fe54:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe58:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe5c:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe60:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe64:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe68:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe6c:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe70:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe74:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe78:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe7c:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe80:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe84:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe88:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe8c:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe90:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe94:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe98:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fe9c:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fea0:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fea4:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fea8:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1feac:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1feb0:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1feb4:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1feb8:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1febc:	andeq	pc, r1, ip, asr #30
   1fec0:	andeq	pc, r1, ip, asr #30
   1fec4:	andeq	pc, r1, ip, asr #30
   1fec8:	andeq	pc, r1, ip, asr #30
   1fecc:	andeq	pc, r1, ip, asr #30
   1fed0:	andeq	pc, r1, ip, asr #30
   1fed4:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fed8:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fedc:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fee0:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fee4:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fee8:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1feec:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fef0:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fef4:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fef8:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fefc:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff00:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff04:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff08:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff0c:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff10:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff14:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff18:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff1c:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff20:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff24:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff28:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff2c:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff30:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff34:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff38:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1ff3c:	andeq	pc, r1, ip, asr #30
   1ff40:	andeq	pc, r1, ip, asr #30
   1ff44:	andeq	pc, r1, ip, asr #30
   1ff48:	andeq	pc, r1, ip, asr #30
   1ff4c:	bx	lr
   1ff50:	mov	r0, #0
   1ff54:	bx	lr
   1ff58:	sub	r0, r0, #9
   1ff5c:	cmp	r0, #23
   1ff60:	movhi	r0, #0
   1ff64:	bxhi	lr
   1ff68:	movw	r1, #31
   1ff6c:	bic	r0, r0, #-16777216	; 0xff000000
   1ff70:	mov	r2, #1
   1ff74:	movt	r1, #128	; 0x80
   1ff78:	and	r0, r2, r1, lsr r0
   1ff7c:	bx	lr
   1ff80:	sub	r1, r0, #65	; 0x41
   1ff84:	mov	r0, #0
   1ff88:	cmp	r1, #26
   1ff8c:	movwcc	r0, #1
   1ff90:	bx	lr
   1ff94:	sub	r2, r0, #48	; 0x30
   1ff98:	mov	r1, r0
   1ff9c:	mov	r0, #1
   1ffa0:	cmp	r2, #22
   1ffa4:	bhi	1ffbc <__assert_fail@plt+0xdf30>
   1ffa8:	movw	r3, #1023	; 0x3ff
   1ffac:	mov	ip, #1
   1ffb0:	movt	r3, #126	; 0x7e
   1ffb4:	tst	r3, ip, lsl r2
   1ffb8:	bxne	lr
   1ffbc:	sub	r1, r1, #97	; 0x61
   1ffc0:	cmp	r1, #6
   1ffc4:	movcs	r0, #0
   1ffc8:	bxcs	lr
   1ffcc:	bx	lr
   1ffd0:	sub	r1, r0, #65	; 0x41
   1ffd4:	cmp	r1, #26
   1ffd8:	addcc	r0, r0, #32
   1ffdc:	bx	lr
   1ffe0:	sub	r1, r0, #97	; 0x61
   1ffe4:	cmp	r1, #26
   1ffe8:	subcc	r0, r0, #32
   1ffec:	bx	lr
   1fff0:	push	{fp, lr}
   1fff4:	mov	fp, sp
   1fff8:	cmp	r0, r1
   1fffc:	mov	r3, #0
   20000:	cmpne	r2, #0
   20004:	bne	20010 <__assert_fail@plt+0xdf84>
   20008:	mov	r0, r3
   2000c:	pop	{fp, pc}
   20010:	rsb	lr, r2, #1
   20014:	ldrb	r2, [r1]
   20018:	ldrb	ip, [r0]
   2001c:	sub	r3, r2, #65	; 0x41
   20020:	cmp	r3, #26
   20024:	sub	r3, ip, #65	; 0x41
   20028:	addcc	r2, r2, #32
   2002c:	cmp	r3, #26
   20030:	addcc	ip, ip, #32
   20034:	cmp	lr, #0
   20038:	uxtb	ip, ip
   2003c:	beq	20060 <__assert_fail@plt+0xdfd4>
   20040:	cmp	ip, #0
   20044:	beq	20070 <__assert_fail@plt+0xdfe4>
   20048:	uxtb	r3, r2
   2004c:	add	lr, lr, #1
   20050:	add	r1, r1, #1
   20054:	add	r0, r0, #1
   20058:	cmp	ip, r3
   2005c:	beq	20014 <__assert_fail@plt+0xdf88>
   20060:	uxtb	r0, r2
   20064:	sub	r3, ip, r0
   20068:	mov	r0, r3
   2006c:	pop	{fp, pc}
   20070:	mov	ip, #0
   20074:	uxtb	r0, r2
   20078:	sub	r3, ip, r0
   2007c:	mov	r0, r3
   20080:	pop	{fp, pc}
   20084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20088:	add	fp, sp, #28
   2008c:	sub	sp, sp, #180	; 0xb4
   20090:	sub	sp, sp, #3072	; 0xc00
   20094:	mov	r8, r0
   20098:	and	r7, r1, #3
   2009c:	sub	r0, r1, #1
   200a0:	tst	r0, r7
   200a4:	beq	200c4 <__assert_fail@plt+0xe038>
   200a8:	bl	11ed0 <__errno_location@plt>
   200ac:	mov	r1, #22
   200b0:	mov	r4, #0
   200b4:	str	r1, [r0]
   200b8:	mov	r0, r4
   200bc:	sub	sp, fp, #28
   200c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200c4:	cmp	r8, #0
   200c8:	beq	200a8 <__assert_fail@plt+0xe01c>
   200cc:	ldrb	r0, [r8]
   200d0:	cmp	r0, #0
   200d4:	beq	206dc <__assert_fail@plt+0xe650>
   200d8:	sub	lr, fp, #1024	; 0x400
   200dc:	mov	r4, r1
   200e0:	mov	r1, #1024	; 0x400
   200e4:	cmp	r0, #47	; 0x2f
   200e8:	sub	r2, lr, #40	; 0x28
   200ec:	str	r1, [fp, #-1060]	; 0xfffffbdc
   200f0:	add	r2, r2, #8
   200f4:	str	r2, [sp, #12]
   200f8:	str	r2, [fp, #-1064]	; 0xfffffbd8
   200fc:	add	r2, sp, #1184	; 0x4a0
   20100:	add	r2, r2, #8
   20104:	str	r2, [sp, #1184]	; 0x4a0
   20108:	str	r2, [sp, #16]
   2010c:	add	r2, sp, #48	; 0x30
   20110:	str	r1, [sp, #1188]	; 0x4a4
   20114:	add	r5, r2, #8
   20118:	mov	r0, r5
   2011c:	str	r5, [sp, #48]	; 0x30
   20120:	str	r1, [sp, #52]	; 0x34
   20124:	str	r5, [sp, #8]
   20128:	bne	206e8 <__assert_fail@plt+0xe65c>
   2012c:	mov	r1, r8
   20130:	mov	r2, #0
   20134:	mov	r3, #1024	; 0x400
   20138:	bl	12080 <__mempcpy_chk@plt>
   2013c:	mov	r6, r0
   20140:	mov	r0, #47	; 0x2f
   20144:	strb	r0, [r6], #1
   20148:	ldrb	r0, [r8]
   2014c:	cmp	r0, #0
   20150:	beq	20714 <__assert_fail@plt+0xe688>
   20154:	and	r1, r4, #4
   20158:	add	r9, sp, #48	; 0x30
   2015c:	str	r7, [sp, #32]
   20160:	str	r1, [sp, #40]	; 0x28
   20164:	mov	r1, #0
   20168:	str	r1, [sp, #24]
   2016c:	mov	r1, #0
   20170:	str	r1, [sp, #36]	; 0x24
   20174:	mov	r1, #0
   20178:	str	r1, [sp, #20]
   2017c:	uxtb	r1, r0
   20180:	cmp	r1, #47	; 0x2f
   20184:	bne	20194 <__assert_fail@plt+0xe108>
   20188:	ldrb	r0, [r8, #1]!
   2018c:	cmp	r0, #47	; 0x2f
   20190:	beq	20188 <__assert_fail@plt+0xe0fc>
   20194:	mov	r1, r0
   20198:	mov	sl, r8
   2019c:	uxtb	r1, r1
   201a0:	cmp	r1, #0
   201a4:	cmpne	r1, #47	; 0x2f
   201a8:	beq	201c0 <__assert_fail@plt+0xe134>
   201ac:	ldrb	r1, [sl, #1]!
   201b0:	uxtb	r1, r1
   201b4:	cmp	r1, #0
   201b8:	cmpne	r1, #47	; 0x2f
   201bc:	bne	201ac <__assert_fail@plt+0xe120>
   201c0:	sub	r2, sl, r8
   201c4:	cmp	r2, #1
   201c8:	beq	20234 <__assert_fail@plt+0xe1a8>
   201cc:	cmp	r2, #2
   201d0:	beq	201e0 <__assert_fail@plt+0xe154>
   201d4:	cmp	r2, #0
   201d8:	bne	20254 <__assert_fail@plt+0xe1c8>
   201dc:	b	2071c <__assert_fail@plt+0xe690>
   201e0:	uxtb	r0, r0
   201e4:	cmp	r0, #46	; 0x2e
   201e8:	ldrbeq	r0, [r8, #1]
   201ec:	cmpeq	r0, #46	; 0x2e
   201f0:	bne	20254 <__assert_fail@plt+0xe1c8>
   201f4:	add	r0, r5, #1
   201f8:	cmp	r6, r0
   201fc:	bls	206a0 <__assert_fail@plt+0xe614>
   20200:	sub	r0, r6, #1
   20204:	mov	r6, r0
   20208:	cmp	r0, r5
   2020c:	bls	206b4 <__assert_fail@plt+0xe628>
   20210:	mov	r0, r6
   20214:	ldrb	r1, [r0, #-1]!
   20218:	cmp	r1, #47	; 0x2f
   2021c:	bne	20204 <__assert_fail@plt+0xe178>
   20220:	mov	r8, sl
   20224:	ldrb	r0, [r8]
   20228:	cmp	r0, #0
   2022c:	bne	2017c <__assert_fail@plt+0xe0f0>
   20230:	b	2071c <__assert_fail@plt+0xe690>
   20234:	uxtb	r0, r0
   20238:	cmp	r0, #46	; 0x2e
   2023c:	bne	20254 <__assert_fail@plt+0xe1c8>
   20240:	mov	r8, sl
   20244:	ldrb	r0, [r8]
   20248:	cmp	r0, #0
   2024c:	bne	2017c <__assert_fail@plt+0xe0f0>
   20250:	b	2071c <__assert_fail@plt+0xe690>
   20254:	ldrb	r0, [r6, #-1]
   20258:	add	r4, r2, #2
   2025c:	str	r2, [sp, #44]	; 0x2c
   20260:	cmp	r0, #47	; 0x2f
   20264:	movne	r0, #47	; 0x2f
   20268:	strbne	r0, [r6], #1
   2026c:	ldr	r0, [sp, #52]	; 0x34
   20270:	add	r0, r5, r0
   20274:	sub	r0, r0, r6
   20278:	cmp	r0, r4
   2027c:	bcs	202b4 <__assert_fail@plt+0xe228>
   20280:	mov	r0, r9
   20284:	bl	28468 <_obstack_memory_used@@Base+0x20e4>
   20288:	cmp	r0, #0
   2028c:	beq	2082c <__assert_fail@plt+0xe7a0>
   20290:	sub	r0, r6, r5
   20294:	ldr	r5, [sp, #48]	; 0x30
   20298:	ldr	r1, [sp, #52]	; 0x34
   2029c:	add	r6, r5, r0
   202a0:	add	r0, r5, r1
   202a4:	sub	r0, r0, r6
   202a8:	cmp	r0, r4
   202ac:	bcc	20280 <__assert_fail@plt+0xe1f4>
   202b0:	ldr	r2, [sp, #44]	; 0x2c
   202b4:	mov	r0, r6
   202b8:	mov	r1, r8
   202bc:	mvn	r3, #0
   202c0:	bl	12080 <__mempcpy_chk@plt>
   202c4:	mov	r6, r0
   202c8:	mov	r0, #0
   202cc:	strb	r0, [r6]
   202d0:	ldr	r0, [sp, #40]	; 0x28
   202d4:	cmp	r0, #0
   202d8:	bne	2033c <__assert_fail@plt+0xe2b0>
   202dc:	ldr	r0, [sp, #1188]	; 0x4a4
   202e0:	ldr	r7, [sp, #1184]	; 0x4a0
   202e4:	sub	r9, r0, #1
   202e8:	mov	r0, r5
   202ec:	mov	r1, r7
   202f0:	mov	r2, r9
   202f4:	bl	11d38 <readlink@plt>
   202f8:	cmp	r0, r9
   202fc:	blt	20314 <__assert_fail@plt+0xe288>
   20300:	add	r0, sp, #1184	; 0x4a0
   20304:	bl	283f8 <_obstack_memory_used@@Base+0x2074>
   20308:	cmp	r0, #0
   2030c:	bne	202dc <__assert_fail@plt+0xe250>
   20310:	b	2082c <__assert_fail@plt+0xe7a0>
   20314:	mov	r4, r0
   20318:	cmp	r0, #0
   2031c:	add	r9, sp, #48	; 0x30
   20320:	blt	2033c <__assert_fail@plt+0xe2b0>
   20324:	ldr	r0, [sp, #24]
   20328:	cmp	r0, #19
   2032c:	bgt	203ec <__assert_fail@plt+0xe360>
   20330:	add	r0, r0, #1
   20334:	str	r0, [sp, #24]
   20338:	b	20578 <__assert_fail@plt+0xe4ec>
   2033c:	ldr	r7, [sp, #32]
   20340:	cmp	r7, #2
   20344:	bne	2035c <__assert_fail@plt+0xe2d0>
   20348:	mov	r8, sl
   2034c:	ldrb	r0, [r8]
   20350:	cmp	r0, #0
   20354:	bne	2017c <__assert_fail@plt+0xe0f0>
   20358:	b	2071c <__assert_fail@plt+0xe690>
   2035c:	ldrb	r0, [sl]
   20360:	cmp	r0, #47	; 0x2f
   20364:	bne	204bc <__assert_fail@plt+0xe430>
   20368:	mov	r2, sl
   2036c:	mov	r1, r2
   20370:	ldrb	r3, [r2, #1]!
   20374:	cmp	r3, #47	; 0x2f
   20378:	beq	2036c <__assert_fail@plt+0xe2e0>
   2037c:	cmp	r3, #46	; 0x2e
   20380:	bne	204b4 <__assert_fail@plt+0xe428>
   20384:	add	r2, r1, #2
   20388:	ldrb	r3, [r2]
   2038c:	cmp	r3, #47	; 0x2f
   20390:	beq	2036c <__assert_fail@plt+0xe2e0>
   20394:	cmp	r3, #0
   20398:	beq	203b4 <__assert_fail@plt+0xe328>
   2039c:	cmp	r3, #46	; 0x2e
   203a0:	bne	204bc <__assert_fail@plt+0xe430>
   203a4:	ldrb	r1, [r1, #3]
   203a8:	cmp	r1, #47	; 0x2f
   203ac:	cmpne	r1, #0
   203b0:	bne	204bc <__assert_fail@plt+0xe430>
   203b4:	mov	r0, #47	; 0x2f
   203b8:	mov	r1, r5
   203bc:	mov	r2, #0
   203c0:	mov	r3, #512	; 0x200
   203c4:	strh	r0, [r6]
   203c8:	mvn	r0, #99	; 0x63
   203cc:	bl	11c3c <faccessat@plt>
   203d0:	cmp	r0, #0
   203d4:	bne	20524 <__assert_fail@plt+0xe498>
   203d8:	mov	r8, sl
   203dc:	ldrb	r0, [r8]
   203e0:	cmp	r0, #0
   203e4:	bne	2017c <__assert_fail@plt+0xe0f0>
   203e8:	b	2071c <__assert_fail@plt+0xe690>
   203ec:	ldrb	r0, [r8]
   203f0:	cmp	r0, #0
   203f4:	beq	20578 <__assert_fail@plt+0xe4ec>
   203f8:	ldr	r9, [sp, #44]	; 0x2c
   203fc:	mov	r0, #0
   20400:	add	lr, sp, #1024	; 0x400
   20404:	mov	r1, r5
   20408:	add	r2, lr, #56	; 0x38
   2040c:	strb	r0, [r6, -r9]
   20410:	ldrb	r0, [r5]
   20414:	cmp	r0, #0
   20418:	movw	r0, #62866	; 0xf592
   2041c:	movt	r0, #2
   20420:	moveq	r1, r0
   20424:	mov	r0, #3
   20428:	bl	12008 <__xstat64@plt>
   2042c:	cmp	r0, #0
   20430:	bne	2083c <__assert_fail@plt+0xe7b0>
   20434:	rsb	r0, r9, #0
   20438:	ldr	r9, [sp, #20]
   2043c:	ldrb	r1, [r8]
   20440:	cmp	r9, #0
   20444:	strb	r1, [r6, r0]
   20448:	bne	20480 <__assert_fail@plt+0xe3f4>
   2044c:	movw	r0, #10028	; 0x272c
   20450:	movw	r2, #9884	; 0x269c
   20454:	movw	r3, #9940	; 0x26d4
   20458:	mov	r1, #0
   2045c:	movt	r0, #2
   20460:	movt	r2, #2
   20464:	movt	r3, #2
   20468:	str	r0, [sp]
   2046c:	mov	r0, #7
   20470:	bl	21768 <__assert_fail@plt+0xf6dc>
   20474:	mov	r9, r0
   20478:	cmp	r0, #0
   2047c:	beq	2082c <__assert_fail@plt+0xe7a0>
   20480:	add	lr, sp, #1024	; 0x400
   20484:	mov	r0, r9
   20488:	mov	r1, r8
   2048c:	add	r2, lr, #56	; 0x38
   20490:	bl	20abc <__assert_fail@plt+0xea30>
   20494:	cmp	r0, #0
   20498:	str	r9, [sp, #20]
   2049c:	beq	20564 <__assert_fail@plt+0xe4d8>
   204a0:	ldr	r7, [sp, #32]
   204a4:	cmp	r7, #2
   204a8:	bne	20830 <__assert_fail@plt+0xe7a4>
   204ac:	mov	r8, sl
   204b0:	b	20644 <__assert_fail@plt+0xe5b8>
   204b4:	cmp	r3, #0
   204b8:	beq	203b4 <__assert_fail@plt+0xe328>
   204bc:	ldr	r1, [sp, #40]	; 0x28
   204c0:	cmp	r1, #0
   204c4:	beq	204e4 <__assert_fail@plt+0xe458>
   204c8:	cmp	r0, #0
   204cc:	beq	20508 <__assert_fail@plt+0xe47c>
   204d0:	mov	r8, sl
   204d4:	ldrb	r0, [r8]
   204d8:	cmp	r0, #0
   204dc:	bne	2017c <__assert_fail@plt+0xe0f0>
   204e0:	b	2071c <__assert_fail@plt+0xe690>
   204e4:	bl	11ed0 <__errno_location@plt>
   204e8:	ldr	r0, [r0]
   204ec:	cmp	r0, #22
   204f0:	bne	20524 <__assert_fail@plt+0xe498>
   204f4:	mov	r8, sl
   204f8:	ldrb	r0, [r8]
   204fc:	cmp	r0, #0
   20500:	bne	2017c <__assert_fail@plt+0xe0f0>
   20504:	b	2071c <__assert_fail@plt+0xe690>
   20508:	mvn	r0, #99	; 0x63
   2050c:	mov	r1, r5
   20510:	mov	r2, #0
   20514:	mov	r3, #512	; 0x200
   20518:	bl	11c3c <faccessat@plt>
   2051c:	cmp	r0, #0
   20520:	beq	206c8 <__assert_fail@plt+0xe63c>
   20524:	mov	r4, #1
   20528:	cmp	r7, #1
   2052c:	bne	2073c <__assert_fail@plt+0xe6b0>
   20530:	bl	11ed0 <__errno_location@plt>
   20534:	ldr	r0, [r0]
   20538:	cmp	r0, #2
   2053c:	bne	2073c <__assert_fail@plt+0xe6b0>
   20540:	movw	r1, #46944	; 0xb760
   20544:	mov	r0, sl
   20548:	movt	r1, #2
   2054c:	bl	12074 <strspn@plt>
   20550:	ldrb	r0, [sl, r0]
   20554:	mov	r8, sl
   20558:	cmp	r0, #0
   2055c:	beq	20690 <__assert_fail@plt+0xe604>
   20560:	b	2073c <__assert_fail@plt+0xe6b0>
   20564:	add	lr, sp, #1024	; 0x400
   20568:	mov	r0, r9
   2056c:	mov	r1, r8
   20570:	add	r2, lr, #56	; 0x38
   20574:	bl	20a40 <__assert_fail@plt+0xe9b4>
   20578:	mov	r0, #0
   2057c:	strb	r0, [r7, r4]
   20580:	ldr	r0, [sp, #36]	; 0x24
   20584:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   20588:	tst	r0, #1
   2058c:	ldr	r0, [sp, #28]
   20590:	subne	r0, sl, r8
   20594:	str	r0, [sp, #28]
   20598:	mov	r0, sl
   2059c:	bl	11eac <strlen@plt>
   205a0:	adds	r9, r0, r4
   205a4:	str	r0, [sp, #44]	; 0x2c
   205a8:	bcs	2082c <__assert_fail@plt+0xe7a0>
   205ac:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   205b0:	cmp	r0, r9
   205b4:	bhi	205dc <__assert_fail@plt+0xe550>
   205b8:	sub	lr, fp, #1024	; 0x400
   205bc:	sub	r0, lr, #40	; 0x28
   205c0:	bl	28468 <_obstack_memory_used@@Base+0x20e4>
   205c4:	cmp	r0, #0
   205c8:	beq	2082c <__assert_fail@plt+0xe7a0>
   205cc:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   205d0:	cmp	r0, r9
   205d4:	bls	205b8 <__assert_fail@plt+0xe52c>
   205d8:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   205dc:	ldr	r0, [sp, #36]	; 0x24
   205e0:	ldr	r1, [sp, #44]	; 0x2c
   205e4:	tst	r0, #1
   205e8:	ldr	r0, [sp, #28]
   205ec:	add	r2, r1, #1
   205f0:	addne	sl, r8, r0
   205f4:	add	r0, r8, r4
   205f8:	mov	r1, sl
   205fc:	bl	11c24 <memmove@plt>
   20600:	mov	r0, r8
   20604:	mov	r1, r7
   20608:	mov	r2, r4
   2060c:	bl	11c60 <memcpy@plt>
   20610:	ldrb	r0, [r7]
   20614:	cmp	r0, #47	; 0x2f
   20618:	bne	20658 <__assert_fail@plt+0xe5cc>
   2061c:	mov	r0, r5
   20620:	mov	r1, r7
   20624:	mov	r2, #0
   20628:	mvn	r3, #0
   2062c:	bl	12080 <__mempcpy_chk@plt>
   20630:	mov	r6, r0
   20634:	mov	r0, #47	; 0x2f
   20638:	strb	r0, [r6], #1
   2063c:	mov	r0, #1
   20640:	str	r0, [sp, #36]	; 0x24
   20644:	add	r9, sp, #48	; 0x30
   20648:	ldrb	r0, [r8]
   2064c:	cmp	r0, #0
   20650:	bne	2017c <__assert_fail@plt+0xe0f0>
   20654:	b	2071c <__assert_fail@plt+0xe690>
   20658:	add	r0, r5, #1
   2065c:	mov	r1, #1
   20660:	add	r9, sp, #48	; 0x30
   20664:	cmp	r6, r0
   20668:	str	r1, [sp, #36]	; 0x24
   2066c:	bls	20690 <__assert_fail@plt+0xe604>
   20670:	sub	r0, r6, #1
   20674:	mov	r6, r0
   20678:	cmp	r0, r5
   2067c:	bls	20690 <__assert_fail@plt+0xe604>
   20680:	mov	r0, r6
   20684:	ldrb	r1, [r0, #-1]!
   20688:	cmp	r1, #47	; 0x2f
   2068c:	bne	20674 <__assert_fail@plt+0xe5e8>
   20690:	ldrb	r0, [r8]
   20694:	cmp	r0, #0
   20698:	bne	2017c <__assert_fail@plt+0xe0f0>
   2069c:	b	2071c <__assert_fail@plt+0xe690>
   206a0:	mov	r8, sl
   206a4:	ldrb	r0, [r8]
   206a8:	cmp	r0, #0
   206ac:	bne	2017c <__assert_fail@plt+0xe0f0>
   206b0:	b	2071c <__assert_fail@plt+0xe690>
   206b4:	mov	r8, sl
   206b8:	ldrb	r0, [r8]
   206bc:	cmp	r0, #0
   206c0:	bne	2017c <__assert_fail@plt+0xe0f0>
   206c4:	b	2071c <__assert_fail@plt+0xe690>
   206c8:	mov	r8, sl
   206cc:	ldrb	r0, [r8]
   206d0:	cmp	r0, #0
   206d4:	bne	2017c <__assert_fail@plt+0xe0f0>
   206d8:	b	2071c <__assert_fail@plt+0xe690>
   206dc:	bl	11ed0 <__errno_location@plt>
   206e0:	mov	r1, #2
   206e4:	b	200b0 <__assert_fail@plt+0xe024>
   206e8:	mov	r1, #1024	; 0x400
   206ec:	bl	11e7c <getcwd@plt>
   206f0:	cmp	r0, #0
   206f4:	beq	20760 <__assert_fail@plt+0xe6d4>
   206f8:	mov	r0, r5
   206fc:	mov	r1, #0
   20700:	bl	11d08 <rawmemchr@plt>
   20704:	mov	r6, r0
   20708:	ldrb	r0, [r8]
   2070c:	cmp	r0, #0
   20710:	bne	20154 <__assert_fail@plt+0xe0c8>
   20714:	mov	r0, #0
   20718:	str	r0, [sp, #20]
   2071c:	add	r0, r5, #1
   20720:	cmp	r6, r0
   20724:	bls	20738 <__assert_fail@plt+0xe6ac>
   20728:	mov	r0, r6
   2072c:	ldrb	r1, [r0, #-1]!
   20730:	cmp	r1, #47	; 0x2f
   20734:	moveq	r6, r0
   20738:	mov	r4, #0
   2073c:	ldr	r0, [sp, #20]
   20740:	cmp	r0, #0
   20744:	beq	207b8 <__assert_fail@plt+0xe72c>
   20748:	bl	21a84 <__assert_fail@plt+0xf9f8>
   2074c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   20750:	ldr	r1, [sp, #12]
   20754:	cmp	r0, r1
   20758:	bne	207c8 <__assert_fail@plt+0xe73c>
   2075c:	b	207cc <__assert_fail@plt+0xe740>
   20760:	bl	11ed0 <__errno_location@plt>
   20764:	ldr	r5, [sp, #8]
   20768:	mov	r6, r0
   2076c:	add	r9, sp, #48	; 0x30
   20770:	ldr	r0, [r6]
   20774:	cmp	r0, #34	; 0x22
   20778:	bne	207a8 <__assert_fail@plt+0xe71c>
   2077c:	mov	r0, r9
   20780:	bl	283f8 <_obstack_memory_used@@Base+0x2074>
   20784:	cmp	r0, #0
   20788:	beq	2082c <__assert_fail@plt+0xe7a0>
   2078c:	ldr	r5, [sp, #48]	; 0x30
   20790:	ldr	r1, [sp, #52]	; 0x34
   20794:	mov	r0, r5
   20798:	bl	11e7c <getcwd@plt>
   2079c:	cmp	r0, #0
   207a0:	beq	20770 <__assert_fail@plt+0xe6e4>
   207a4:	b	206f8 <__assert_fail@plt+0xe66c>
   207a8:	cmp	r0, #12
   207ac:	beq	2082c <__assert_fail@plt+0xe7a0>
   207b0:	mov	r4, #1
   207b4:	mov	r6, r5
   207b8:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   207bc:	ldr	r1, [sp, #12]
   207c0:	cmp	r0, r1
   207c4:	beq	207cc <__assert_fail@plt+0xe740>
   207c8:	bl	21218 <__assert_fail@plt+0xf18c>
   207cc:	ldr	r0, [sp, #1184]	; 0x4a0
   207d0:	ldr	r1, [sp, #16]
   207d4:	cmp	r0, r1
   207d8:	beq	207e0 <__assert_fail@plt+0xe754>
   207dc:	bl	21218 <__assert_fail@plt+0xf18c>
   207e0:	cmp	r4, #0
   207e4:	beq	2080c <__assert_fail@plt+0xe780>
   207e8:	ldr	r0, [sp, #48]	; 0x30
   207ec:	ldr	r1, [sp, #8]
   207f0:	mov	r4, #0
   207f4:	cmp	r0, r1
   207f8:	beq	200b8 <__assert_fail@plt+0xe02c>
   207fc:	bl	21218 <__assert_fail@plt+0xf18c>
   20800:	mov	r0, r4
   20804:	sub	sp, fp, #28
   20808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2080c:	mov	r0, #0
   20810:	strb	r0, [r6], #1
   20814:	add	r0, sp, #48	; 0x30
   20818:	sub	r1, r6, r5
   2081c:	bl	28390 <_obstack_memory_used@@Base+0x200c>
   20820:	mov	r4, r0
   20824:	cmp	r0, #0
   20828:	bne	200b8 <__assert_fail@plt+0xe02c>
   2082c:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   20830:	bl	11ed0 <__errno_location@plt>
   20834:	mov	r1, #40	; 0x28
   20838:	str	r1, [r0]
   2083c:	mov	r4, #1
   20840:	ldr	r0, [sp, #20]
   20844:	cmp	r0, #0
   20848:	bne	20748 <__assert_fail@plt+0xe6bc>
   2084c:	b	207b8 <__assert_fail@plt+0xe72c>
   20850:	movw	r1, #5024	; 0x13a0
   20854:	movt	r1, #4
   20858:	str	r0, [r1, #4]
   2085c:	bx	lr
   20860:	movw	r1, #5024	; 0x13a0
   20864:	movt	r1, #4
   20868:	strb	r0, [r1]
   2086c:	bx	lr
   20870:	push	{r4, r5, r6, sl, fp, lr}
   20874:	add	fp, sp, #16
   20878:	sub	sp, sp, #8
   2087c:	movw	r0, #780	; 0x30c
   20880:	movt	r0, #4
   20884:	ldr	r0, [r0]
   20888:	bl	2ad58 <_obstack_memory_used@@Base+0x49d4>
   2088c:	cmp	r0, #0
   20890:	beq	208b8 <__assert_fail@plt+0xe82c>
   20894:	movw	r5, #5024	; 0x13a0
   20898:	movt	r5, #4
   2089c:	ldrb	r0, [r5]
   208a0:	cmp	r0, #0
   208a4:	beq	208e4 <__assert_fail@plt+0xe858>
   208a8:	bl	11ed0 <__errno_location@plt>
   208ac:	ldr	r0, [r0]
   208b0:	cmp	r0, #32
   208b4:	bne	208e4 <__assert_fail@plt+0xe858>
   208b8:	movw	r0, #776	; 0x308
   208bc:	movt	r0, #4
   208c0:	ldr	r0, [r0]
   208c4:	bl	2ad58 <_obstack_memory_used@@Base+0x49d4>
   208c8:	cmp	r0, #0
   208cc:	subeq	sp, fp, #16
   208d0:	popeq	{r4, r5, r6, sl, fp, pc}
   208d4:	movw	r0, #684	; 0x2ac
   208d8:	movt	r0, #4
   208dc:	ldr	r0, [r0]
   208e0:	bl	11c54 <_exit@plt>
   208e4:	movw	r1, #62853	; 0xf585
   208e8:	mov	r0, #0
   208ec:	mov	r2, #5
   208f0:	movt	r1, #2
   208f4:	bl	11cb4 <dcgettext@plt>
   208f8:	ldr	r6, [r5, #4]
   208fc:	mov	r4, r0
   20900:	bl	11ed0 <__errno_location@plt>
   20904:	ldr	r5, [r0]
   20908:	cmp	r6, #0
   2090c:	bne	20928 <__assert_fail@plt+0xe89c>
   20910:	movw	r2, #62850	; 0xf582
   20914:	mov	r0, #0
   20918:	mov	r1, r5
   2091c:	mov	r3, r4
   20920:	movt	r2, #2
   20924:	b	20948 <__assert_fail@plt+0xe8bc>
   20928:	mov	r0, r6
   2092c:	bl	27ff0 <_obstack_memory_used@@Base+0x1c6c>
   20930:	movw	r2, #54539	; 0xd50b
   20934:	mov	r3, r0
   20938:	str	r4, [sp]
   2093c:	mov	r0, #0
   20940:	mov	r1, r5
   20944:	movt	r2, #2
   20948:	bl	11db0 <error@plt>
   2094c:	movw	r0, #684	; 0x2ac
   20950:	movt	r0, #4
   20954:	ldr	r0, [r0]
   20958:	bl	11c54 <_exit@plt>
   2095c:	push	{r4, r5, r6, sl, fp, lr}
   20960:	add	fp, sp, #16
   20964:	mov	r5, r0
   20968:	mov	r4, r0
   2096c:	ldrb	r6, [r5], #-1
   20970:	bl	1fc34 <__assert_fail@plt+0xdba8>
   20974:	sub	r2, r0, r4
   20978:	sub	r0, r6, #47	; 0x2f
   2097c:	clz	r0, r0
   20980:	lsr	r1, r0, #5
   20984:	mov	r0, r2
   20988:	cmp	r2, r1
   2098c:	popls	{r4, r5, r6, sl, fp, pc}
   20990:	ldrb	r3, [r5, r0]
   20994:	sub	r2, r0, #1
   20998:	cmp	r3, #47	; 0x2f
   2099c:	beq	20984 <__assert_fail@plt+0xe8f8>
   209a0:	pop	{r4, r5, r6, sl, fp, pc}
   209a4:	push	{r4, r5, r6, sl, fp, lr}
   209a8:	add	fp, sp, #16
   209ac:	mov	r6, r0
   209b0:	mov	r4, r0
   209b4:	ldrb	r5, [r6], #-1
   209b8:	bl	1fc34 <__assert_fail@plt+0xdba8>
   209bc:	sub	r1, r0, r4
   209c0:	sub	r0, r5, #47	; 0x2f
   209c4:	clz	r0, r0
   209c8:	lsr	r0, r0, #5
   209cc:	mov	r5, r1
   209d0:	cmp	r1, r0
   209d4:	bls	209e8 <__assert_fail@plt+0xe95c>
   209d8:	ldrb	r2, [r6, r5]
   209dc:	sub	r1, r5, #1
   209e0:	cmp	r2, #47	; 0x2f
   209e4:	beq	209cc <__assert_fail@plt+0xe940>
   209e8:	cmp	r5, #0
   209ec:	mov	r0, r5
   209f0:	addeq	r0, r0, #1
   209f4:	add	r0, r0, #1
   209f8:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   209fc:	mov	r6, r0
   20a00:	cmp	r0, #0
   20a04:	beq	20a30 <__assert_fail@plt+0xe9a4>
   20a08:	mov	r0, r6
   20a0c:	mov	r1, r4
   20a10:	mov	r2, r5
   20a14:	bl	11c60 <memcpy@plt>
   20a18:	cmp	r5, #0
   20a1c:	moveq	r0, #46	; 0x2e
   20a20:	moveq	r5, #1
   20a24:	strbeq	r0, [r6]
   20a28:	mov	r0, #0
   20a2c:	strb	r0, [r6, r5]
   20a30:	mov	r0, r6
   20a34:	pop	{r4, r5, r6, sl, fp, pc}
   20a38:	mov	r0, #0
   20a3c:	bx	lr
   20a40:	push	{r4, r5, r6, r7, fp, lr}
   20a44:	add	fp, sp, #16
   20a48:	cmp	r0, #0
   20a4c:	popeq	{r4, r5, r6, r7, fp, pc}
   20a50:	mov	r5, r0
   20a54:	mov	r0, #24
   20a58:	mov	r6, r2
   20a5c:	mov	r7, r1
   20a60:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   20a64:	mov	r4, r0
   20a68:	mov	r0, r7
   20a6c:	bl	29c18 <_obstack_memory_used@@Base+0x3894>
   20a70:	str	r0, [r4]
   20a74:	ldrd	r0, [r6, #96]	; 0x60
   20a78:	str	r1, [r4, #12]
   20a7c:	str	r0, [r4, #8]
   20a80:	ldrd	r0, [r6]
   20a84:	str	r1, [r4, #20]
   20a88:	str	r0, [r4, #16]
   20a8c:	mov	r0, r5
   20a90:	mov	r1, r4
   20a94:	bl	223a0 <__assert_fail@plt+0x10314>
   20a98:	cmp	r0, #0
   20a9c:	beq	20ab8 <__assert_fail@plt+0xea2c>
   20aa0:	cmp	r0, r4
   20aa4:	beq	20ab4 <__assert_fail@plt+0xea28>
   20aa8:	mov	r0, r4
   20aac:	pop	{r4, r5, r6, r7, fp, lr}
   20ab0:	b	2272c <__assert_fail@plt+0x106a0>
   20ab4:	pop	{r4, r5, r6, r7, fp, pc}
   20ab8:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   20abc:	cmp	r0, #0
   20ac0:	moveq	r0, #0
   20ac4:	bxeq	lr
   20ac8:	push	{r4, r5, fp, lr}
   20acc:	add	fp, sp, #8
   20ad0:	sub	sp, sp, #24
   20ad4:	str	r1, [sp]
   20ad8:	mov	r1, sp
   20adc:	ldrd	r4, [r2, #96]	; 0x60
   20ae0:	str	r5, [sp, #12]
   20ae4:	str	r4, [sp, #8]
   20ae8:	ldrd	r2, [r2]
   20aec:	str	r3, [sp, #20]
   20af0:	str	r2, [sp, #16]
   20af4:	bl	214a0 <__assert_fail@plt+0xf414>
   20af8:	cmp	r0, #0
   20afc:	movwne	r0, #1
   20b00:	sub	sp, fp, #8
   20b04:	pop	{r4, r5, fp, pc}
   20b08:	and	r2, r0, #61440	; 0xf000
   20b0c:	sub	r2, r2, #4096	; 0x1000
   20b10:	lsr	r3, r2, #12
   20b14:	cmp	r3, #11
   20b18:	bhi	20b68 <__assert_fail@plt+0xeadc>
   20b1c:	add	r2, pc, #4
   20b20:	mov	ip, #45	; 0x2d
   20b24:	ldr	pc, [r2, r3, lsl #2]
   20b28:	andeq	r0, r2, r8, asr fp
   20b2c:	andeq	r0, r2, r0, ror #22
   20b30:	andeq	r0, r2, r8, ror #22
   20b34:	andeq	r0, r2, r0, ror fp
   20b38:	andeq	r0, r2, r8, ror #22
   20b3c:	andeq	r0, r2, r8, lsl #23
   20b40:	andeq	r0, r2, r8, ror #22
   20b44:	andeq	r0, r2, ip, lsl #23
   20b48:	andeq	r0, r2, r8, ror #22
   20b4c:	andeq	r0, r2, r8, ror fp
   20b50:	andeq	r0, r2, r8, ror #22
   20b54:	andeq	r0, r2, r0, lsl #23
   20b58:	mov	ip, #112	; 0x70
   20b5c:	b	20b8c <__assert_fail@plt+0xeb00>
   20b60:	mov	ip, #99	; 0x63
   20b64:	b	20b8c <__assert_fail@plt+0xeb00>
   20b68:	mov	ip, #63	; 0x3f
   20b6c:	b	20b8c <__assert_fail@plt+0xeb00>
   20b70:	mov	ip, #100	; 0x64
   20b74:	b	20b8c <__assert_fail@plt+0xeb00>
   20b78:	mov	ip, #108	; 0x6c
   20b7c:	b	20b8c <__assert_fail@plt+0xeb00>
   20b80:	mov	ip, #115	; 0x73
   20b84:	b	20b8c <__assert_fail@plt+0xeb00>
   20b88:	mov	ip, #98	; 0x62
   20b8c:	push	{fp, lr}
   20b90:	mov	fp, sp
   20b94:	mov	r2, #32
   20b98:	tst	r0, #256	; 0x100
   20b9c:	mov	r3, #114	; 0x72
   20ba0:	strb	ip, [r1]
   20ba4:	mov	ip, #114	; 0x72
   20ba8:	mov	lr, #45	; 0x2d
   20bac:	strh	r2, [r1, #10]
   20bb0:	movweq	r3, #45	; 0x2d
   20bb4:	tst	r0, #128	; 0x80
   20bb8:	mov	r2, #119	; 0x77
   20bbc:	movweq	r2, #45	; 0x2d
   20bc0:	strb	r3, [r1, #1]
   20bc4:	tst	r0, #32
   20bc8:	mov	r3, #119	; 0x77
   20bcc:	strb	r2, [r1, #2]
   20bd0:	mov	r2, #114	; 0x72
   20bd4:	movweq	r2, #45	; 0x2d
   20bd8:	tst	r0, #16
   20bdc:	strb	r2, [r1, #4]
   20be0:	mov	r2, #119	; 0x77
   20be4:	movweq	r2, #45	; 0x2d
   20be8:	tst	r0, #4
   20bec:	movweq	ip, #45	; 0x2d
   20bf0:	tst	r0, #2
   20bf4:	strb	r2, [r1, #5]
   20bf8:	movweq	r3, #45	; 0x2d
   20bfc:	strb	ip, [r1, #7]
   20c00:	ands	r2, r0, #64	; 0x40
   20c04:	mov	ip, #45	; 0x2d
   20c08:	strb	r3, [r1, #8]
   20c0c:	mov	r3, #83	; 0x53
   20c10:	movwne	lr, #120	; 0x78
   20c14:	mov	r2, #83	; 0x53
   20c18:	movwne	r3, #115	; 0x73
   20c1c:	tst	r0, #2048	; 0x800
   20c20:	moveq	r3, lr
   20c24:	strb	r3, [r1, #3]
   20c28:	ands	r3, r0, #8
   20c2c:	mov	r3, #45	; 0x2d
   20c30:	movwne	r2, #115	; 0x73
   20c34:	movwne	r3, #120	; 0x78
   20c38:	tst	r0, #1024	; 0x400
   20c3c:	moveq	r2, r3
   20c40:	strb	r2, [r1, #6]
   20c44:	ands	r2, r0, #1
   20c48:	mov	r2, #84	; 0x54
   20c4c:	movwne	ip, #120	; 0x78
   20c50:	movwne	r2, #116	; 0x74
   20c54:	tst	r0, #512	; 0x200
   20c58:	moveq	r2, ip
   20c5c:	strb	r2, [r1, #9]
   20c60:	pop	{fp, pc}
   20c64:	ldr	r0, [r0, #16]
   20c68:	b	20b08 <__assert_fail@plt+0xea7c>
   20c6c:	push	{fp, lr}
   20c70:	mov	fp, sp
   20c74:	bl	20c84 <__assert_fail@plt+0xebf8>
   20c78:	cmp	r0, #0
   20c7c:	popne	{fp, pc}
   20c80:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   20c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c88:	add	fp, sp, #28
   20c8c:	push	{r2}		; (str r2, [sp, #-4]!)
   20c90:	mov	sl, r1
   20c94:	mov	r7, r0
   20c98:	bl	1fc34 <__assert_fail@plt+0xdba8>
   20c9c:	sub	r4, r0, r7
   20ca0:	bl	1fc94 <__assert_fail@plt+0xdc08>
   20ca4:	mov	r6, r0
   20ca8:	add	r5, r4, r0
   20cac:	mov	r0, sl
   20cb0:	bl	11eac <strlen@plt>
   20cb4:	mov	r9, r0
   20cb8:	cmp	r6, #0
   20cbc:	beq	20ce4 <__assert_fail@plt+0xec58>
   20cc0:	add	r0, r7, r5
   20cc4:	mov	r4, #0
   20cc8:	ldrb	r0, [r0, #-1]
   20ccc:	cmp	r0, #47	; 0x2f
   20cd0:	beq	20cf4 <__assert_fail@plt+0xec68>
   20cd4:	ldrb	r0, [sl]
   20cd8:	subs	r4, r0, #47	; 0x2f
   20cdc:	movwne	r4, #47	; 0x2f
   20ce0:	b	20cf4 <__assert_fail@plt+0xec68>
   20ce4:	ldrb	r0, [sl]
   20ce8:	mov	r4, #0
   20cec:	cmp	r0, #47	; 0x2f
   20cf0:	movweq	r4, #46	; 0x2e
   20cf4:	uxtb	r8, r4
   20cf8:	add	r0, r9, r5
   20cfc:	cmp	r8, #0
   20d00:	movwne	r8, #1
   20d04:	add	r0, r0, r8
   20d08:	add	r0, r0, #1
   20d0c:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   20d10:	mov	r6, r0
   20d14:	cmp	r0, #0
   20d18:	beq	20d58 <__assert_fail@plt+0xeccc>
   20d1c:	mov	r0, r6
   20d20:	mov	r1, r7
   20d24:	mov	r2, r5
   20d28:	mvn	r3, #0
   20d2c:	bl	12080 <__mempcpy_chk@plt>
   20d30:	ldr	r1, [sp]
   20d34:	strb	r4, [r0], r8
   20d38:	mov	r2, r9
   20d3c:	mvn	r3, #0
   20d40:	cmp	r1, #0
   20d44:	strne	r0, [r1]
   20d48:	mov	r1, sl
   20d4c:	bl	12080 <__mempcpy_chk@plt>
   20d50:	mov	r1, #0
   20d54:	strb	r1, [r0]
   20d58:	mov	r0, r6
   20d5c:	sub	sp, fp, #28
   20d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d68:	add	fp, sp, #28
   20d6c:	sub	sp, sp, #12
   20d70:	mov	r8, r1
   20d74:	mov	r9, r0
   20d78:	bl	11bd0 <strcmp@plt>
   20d7c:	cmp	r0, #0
   20d80:	moveq	r0, #0
   20d84:	subeq	sp, fp, #28
   20d88:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d8c:	ldrb	r4, [r9]
   20d90:	cmp	r4, #0
   20d94:	beq	20e18 <__assert_fail@plt+0xed8c>
   20d98:	ldrb	r6, [r8]
   20d9c:	cmp	r6, #0
   20da0:	beq	211f0 <__assert_fail@plt+0xf164>
   20da4:	mov	sl, r0
   20da8:	movw	r0, #62866	; 0xf592
   20dac:	mov	r1, r9
   20db0:	movt	r0, #2
   20db4:	bl	11bd0 <strcmp@plt>
   20db8:	cmp	r0, #0
   20dbc:	beq	20e18 <__assert_fail@plt+0xed8c>
   20dc0:	movw	r0, #62866	; 0xf592
   20dc4:	mov	r1, r8
   20dc8:	movt	r0, #2
   20dcc:	bl	11bd0 <strcmp@plt>
   20dd0:	cmp	r0, #0
   20dd4:	beq	211f0 <__assert_fail@plt+0xf164>
   20dd8:	movw	r0, #62865	; 0xf591
   20ddc:	mov	r1, r9
   20de0:	movt	r0, #2
   20de4:	bl	11bd0 <strcmp@plt>
   20de8:	cmp	r0, #0
   20dec:	beq	20e18 <__assert_fail@plt+0xed8c>
   20df0:	movw	r0, #62865	; 0xf591
   20df4:	mov	r1, r8
   20df8:	movt	r0, #2
   20dfc:	bl	11bd0 <strcmp@plt>
   20e00:	cmp	r0, #0
   20e04:	beq	211f0 <__assert_fail@plt+0xf164>
   20e08:	cmp	r4, #46	; 0x2e
   20e0c:	bne	20e24 <__assert_fail@plt+0xed98>
   20e10:	cmp	r6, #46	; 0x2e
   20e14:	beq	20e24 <__assert_fail@plt+0xed98>
   20e18:	mvn	r0, #0
   20e1c:	sub	sp, fp, #28
   20e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e24:	cmp	r4, #46	; 0x2e
   20e28:	bne	20e64 <__assert_fail@plt+0xedd8>
   20e2c:	mov	r4, #46	; 0x2e
   20e30:	cmp	r6, #46	; 0x2e
   20e34:	bne	20e6c <__assert_fail@plt+0xede0>
   20e38:	ldrb	r4, [r9, #1]!
   20e3c:	add	r8, r8, #1
   20e40:	cmp	r4, #0
   20e44:	bne	20e6c <__assert_fail@plt+0xede0>
   20e48:	mov	r7, #0
   20e4c:	mov	r6, r9
   20e50:	ldrb	r0, [r8]
   20e54:	str	r7, [sp, #8]
   20e58:	cmp	r0, #0
   20e5c:	bne	20f0c <__assert_fail@plt+0xee80>
   20e60:	b	20fa0 <__assert_fail@plt+0xef14>
   20e64:	cmp	r6, #46	; 0x2e
   20e68:	beq	211f0 <__assert_fail@plt+0xf164>
   20e6c:	mov	r1, #0
   20e70:	mvn	r5, #64	; 0x40
   20e74:	mov	r6, r9
   20e78:	mov	r7, #0
   20e7c:	tst	r1, #1
   20e80:	beq	20ea8 <__assert_fail@plt+0xee1c>
   20e84:	uxtab	r0, r5, r4
   20e88:	mov	r1, #0
   20e8c:	cmp	r0, #26
   20e90:	bcc	20ef0 <__assert_fail@plt+0xee64>
   20e94:	uxtb	r0, r4
   20e98:	sub	r2, r0, #97	; 0x61
   20e9c:	cmp	r2, #26
   20ea0:	bcc	20ef0 <__assert_fail@plt+0xee64>
   20ea4:	b	20ee4 <__assert_fail@plt+0xee58>
   20ea8:	uxtb	r0, r4
   20eac:	cmp	r0, #46	; 0x2e
   20eb0:	bne	20ed0 <__assert_fail@plt+0xee44>
   20eb4:	cmp	r7, #0
   20eb8:	mov	r1, #1
   20ebc:	moveq	r7, r6
   20ec0:	ldrb	r4, [r6, #1]!
   20ec4:	cmp	r4, #0
   20ec8:	bne	20e7c <__assert_fail@plt+0xedf0>
   20ecc:	b	20efc <__assert_fail@plt+0xee70>
   20ed0:	bl	1fccc <__assert_fail@plt+0xdc40>
   20ed4:	mov	r1, #0
   20ed8:	cmp	r0, #0
   20edc:	bne	20ef0 <__assert_fail@plt+0xee64>
   20ee0:	ldrb	r0, [r6]
   20ee4:	mov	r1, #0
   20ee8:	cmp	r0, #126	; 0x7e
   20eec:	movne	r7, r1
   20ef0:	ldrb	r4, [r6, #1]!
   20ef4:	cmp	r4, #0
   20ef8:	bne	20e7c <__assert_fail@plt+0xedf0>
   20efc:	ldrb	r0, [r8]
   20f00:	str	r7, [sp, #8]
   20f04:	cmp	r0, #0
   20f08:	beq	20fa0 <__assert_fail@plt+0xef14>
   20f0c:	mov	r1, #0
   20f10:	mvn	r5, #64	; 0x40
   20f14:	mov	r4, r8
   20f18:	mov	r7, #0
   20f1c:	tst	r1, #1
   20f20:	beq	20f48 <__assert_fail@plt+0xeebc>
   20f24:	uxtab	r2, r5, r0
   20f28:	mov	r1, #0
   20f2c:	cmp	r2, #26
   20f30:	bcc	20f90 <__assert_fail@plt+0xef04>
   20f34:	uxtb	r0, r0
   20f38:	sub	r2, r0, #97	; 0x61
   20f3c:	cmp	r2, #26
   20f40:	bcc	20f90 <__assert_fail@plt+0xef04>
   20f44:	b	20f84 <__assert_fail@plt+0xeef8>
   20f48:	uxtb	r0, r0
   20f4c:	cmp	r0, #46	; 0x2e
   20f50:	bne	20f70 <__assert_fail@plt+0xeee4>
   20f54:	cmp	r7, #0
   20f58:	mov	r1, #1
   20f5c:	moveq	r7, r4
   20f60:	ldrb	r0, [r4, #1]!
   20f64:	cmp	r0, #0
   20f68:	bne	20f1c <__assert_fail@plt+0xee90>
   20f6c:	b	20fa8 <__assert_fail@plt+0xef1c>
   20f70:	bl	1fccc <__assert_fail@plt+0xdc40>
   20f74:	mov	r1, #0
   20f78:	cmp	r0, #0
   20f7c:	bne	20f90 <__assert_fail@plt+0xef04>
   20f80:	ldrb	r0, [r4]
   20f84:	mov	r1, #0
   20f88:	cmp	r0, #126	; 0x7e
   20f8c:	movne	r7, r1
   20f90:	ldrb	r0, [r4, #1]!
   20f94:	cmp	r0, #0
   20f98:	bne	20f1c <__assert_fail@plt+0xee90>
   20f9c:	b	20fa8 <__assert_fail@plt+0xef1c>
   20fa0:	mov	r7, #0
   20fa4:	mov	r4, r8
   20fa8:	ldr	r1, [sp, #8]
   20fac:	cmp	r7, #0
   20fb0:	mov	r0, r4
   20fb4:	movne	r0, r7
   20fb8:	sub	lr, r0, r8
   20fbc:	mov	r0, r6
   20fc0:	cmp	r1, #0
   20fc4:	movne	r0, r1
   20fc8:	sub	r2, r0, r9
   20fcc:	orrs	r0, r1, r7
   20fd0:	beq	21000 <__assert_fail@plt+0xef74>
   20fd4:	cmp	r2, lr
   20fd8:	bne	21000 <__assert_fail@plt+0xef74>
   20fdc:	mov	r0, r9
   20fe0:	mov	r1, r8
   20fe4:	mov	r5, r2
   20fe8:	bl	1202c <strncmp@plt>
   20fec:	mov	r2, r5
   20ff0:	cmp	r0, #0
   20ff4:	mov	lr, r5
   20ff8:	subeq	lr, r4, r8
   20ffc:	subeq	r2, r6, r9
   21000:	mov	ip, #0
   21004:	mov	r6, #0
   21008:	cmp	ip, lr
   2100c:	cmpcs	r6, r2
   21010:	bcc	21020 <__assert_fail@plt+0xef94>
   21014:	b	2120c <__assert_fail@plt+0xf180>
   21018:	add	ip, ip, #1
   2101c:	add	r6, r6, #1
   21020:	cmp	r6, r2
   21024:	bcs	21038 <__assert_fail@plt+0xefac>
   21028:	ldrb	r0, [r9, r6]
   2102c:	sub	r0, r0, #48	; 0x30
   21030:	cmp	r0, #9
   21034:	bhi	21050 <__assert_fail@plt+0xefc4>
   21038:	cmp	ip, lr
   2103c:	bcs	2111c <__assert_fail@plt+0xf090>
   21040:	ldrb	r0, [r8, ip]
   21044:	sub	r0, r0, #48	; 0x30
   21048:	cmp	r0, #10
   2104c:	bcc	2111c <__assert_fail@plt+0xf090>
   21050:	mov	r0, #0
   21054:	cmp	r2, r6
   21058:	mov	r1, #0
   2105c:	beq	21090 <__assert_fail@plt+0xf004>
   21060:	ldrb	r3, [r9, r6]
   21064:	sub	r1, r3, #48	; 0x30
   21068:	cmp	r1, #10
   2106c:	mov	r1, #0
   21070:	bcc	21090 <__assert_fail@plt+0xf004>
   21074:	sub	r1, r3, #65	; 0x41
   21078:	cmp	r1, #26
   2107c:	bcc	210dc <__assert_fail@plt+0xf050>
   21080:	sub	r1, r3, #97	; 0x61
   21084:	cmp	r1, #26
   21088:	mov	r1, r3
   2108c:	bcs	21104 <__assert_fail@plt+0xf078>
   21090:	cmp	lr, ip
   21094:	beq	210e8 <__assert_fail@plt+0xf05c>
   21098:	ldrb	r3, [r8, ip]
   2109c:	sub	r7, r3, #48	; 0x30
   210a0:	cmp	r7, #10
   210a4:	bcc	210e8 <__assert_fail@plt+0xf05c>
   210a8:	sub	r0, r3, #65	; 0x41
   210ac:	cmp	r0, #26
   210b0:	bcc	210f4 <__assert_fail@plt+0xf068>
   210b4:	sub	r0, r3, #97	; 0x61
   210b8:	cmp	r0, #26
   210bc:	mov	r0, r3
   210c0:	bcc	210e8 <__assert_fail@plt+0xf05c>
   210c4:	orr	r0, r3, #256	; 0x100
   210c8:	cmp	r3, #126	; 0x7e
   210cc:	mvneq	r0, #0
   210d0:	cmp	r1, r0
   210d4:	beq	21018 <__assert_fail@plt+0xef8c>
   210d8:	b	211fc <__assert_fail@plt+0xf170>
   210dc:	mov	r1, r3
   210e0:	cmp	lr, ip
   210e4:	bne	21098 <__assert_fail@plt+0xf00c>
   210e8:	cmp	r1, r0
   210ec:	beq	21018 <__assert_fail@plt+0xef8c>
   210f0:	b	211fc <__assert_fail@plt+0xf170>
   210f4:	mov	r0, r3
   210f8:	cmp	r1, r0
   210fc:	beq	21018 <__assert_fail@plt+0xef8c>
   21100:	b	211fc <__assert_fail@plt+0xf170>
   21104:	orr	r1, r3, #256	; 0x100
   21108:	cmp	r3, #126	; 0x7e
   2110c:	mvneq	r1, #0
   21110:	cmp	lr, ip
   21114:	bne	21098 <__assert_fail@plt+0xf00c>
   21118:	b	210e8 <__assert_fail@plt+0xf05c>
   2111c:	mov	r3, r6
   21120:	ldrb	r4, [r9, r3]
   21124:	add	r3, r3, #1
   21128:	cmp	r4, #48	; 0x30
   2112c:	beq	21120 <__assert_fail@plt+0xf094>
   21130:	sub	r6, r3, #1
   21134:	ldrb	r5, [r8, ip]
   21138:	add	ip, ip, #1
   2113c:	cmp	r5, #48	; 0x30
   21140:	beq	21134 <__assert_fail@plt+0xf0a8>
   21144:	sub	r1, r5, #48	; 0x30
   21148:	sub	r7, r4, #48	; 0x30
   2114c:	mov	r0, #0
   21150:	cmp	r1, #10
   21154:	mov	r1, #0
   21158:	movwcc	r1, #1
   2115c:	cmp	r7, #9
   21160:	bhi	211d8 <__assert_fail@plt+0xf14c>
   21164:	add	r0, r8, ip
   21168:	mvn	r6, #0
   2116c:	mov	r7, r9
   21170:	str	lr, [sp, #4]
   21174:	str	r0, [sp, #8]
   21178:	mov	r0, #0
   2117c:	tst	r1, #1
   21180:	beq	211f0 <__assert_fail@plt+0xf164>
   21184:	ldr	r1, [sp, #8]
   21188:	cmp	r0, #0
   2118c:	subeq	r0, r4, r5
   21190:	ldrb	r4, [r7, r3]
   21194:	add	r7, r7, #1
   21198:	add	r1, r1, r6
   2119c:	add	r6, r6, #1
   211a0:	ldrb	r5, [r1, #1]
   211a4:	sub	lr, r4, #48	; 0x30
   211a8:	sub	r1, r5, #48	; 0x30
   211ac:	cmp	r1, #10
   211b0:	mov	r1, #0
   211b4:	movwcc	r1, #1
   211b8:	cmp	lr, #10
   211bc:	bcc	2117c <__assert_fail@plt+0xf0f0>
   211c0:	ldr	lr, [sp, #4]
   211c4:	add	ip, ip, r6
   211c8:	add	r6, r3, r6
   211cc:	cmp	r1, #0
   211d0:	beq	211e4 <__assert_fail@plt+0xf158>
   211d4:	b	20e18 <__assert_fail@plt+0xed8c>
   211d8:	sub	ip, ip, #1
   211dc:	cmp	r1, #0
   211e0:	bne	20e18 <__assert_fail@plt+0xed8c>
   211e4:	cmp	r0, #0
   211e8:	beq	21008 <__assert_fail@plt+0xef7c>
   211ec:	b	21204 <__assert_fail@plt+0xf178>
   211f0:	mov	r0, #1
   211f4:	sub	sp, fp, #28
   211f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211fc:	subs	r0, r1, r0
   21200:	moveq	r0, sl
   21204:	sub	sp, fp, #28
   21208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2120c:	mov	r0, sl
   21210:	sub	sp, fp, #28
   21214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21218:	push	{r4, r5, r6, sl, fp, lr}
   2121c:	add	fp, sp, #16
   21220:	mov	r4, r0
   21224:	bl	11ed0 <__errno_location@plt>
   21228:	ldr	r6, [r0]
   2122c:	mov	r5, r0
   21230:	mov	r0, r4
   21234:	bl	11c30 <free@plt>
   21238:	str	r6, [r5]
   2123c:	pop	{r4, r5, r6, sl, fp, pc}
   21240:	mov	r1, r0
   21244:	mov	r0, #0
   21248:	b	11c48 <clock_gettime@plt>
   2124c:	push	{fp, lr}
   21250:	mov	fp, sp
   21254:	mov	r1, r0
   21258:	mov	r0, #0
   2125c:	bl	11c48 <clock_gettime@plt>
   21260:	pop	{fp, pc}
   21264:	push	{r4, sl, fp, lr}
   21268:	add	fp, sp, #8
   2126c:	sub	sp, sp, #264	; 0x108
   21270:	add	r1, sp, #7
   21274:	movw	r2, #257	; 0x101
   21278:	bl	28678 <_obstack_memory_used@@Base+0x22f4>
   2127c:	mov	r4, #0
   21280:	cmp	r0, #0
   21284:	bne	212bc <__assert_fail@plt+0xf230>
   21288:	movw	r1, #62868	; 0xf594
   2128c:	add	r0, sp, #7
   21290:	movt	r1, #2
   21294:	bl	11bd0 <strcmp@plt>
   21298:	cmp	r0, #0
   2129c:	beq	212bc <__assert_fail@plt+0xf230>
   212a0:	movw	r1, #62870	; 0xf596
   212a4:	add	r0, sp, #7
   212a8:	movt	r1, #2
   212ac:	bl	11bd0 <strcmp@plt>
   212b0:	mov	r4, r0
   212b4:	cmp	r0, #0
   212b8:	movwne	r4, #1
   212bc:	mov	r0, r4
   212c0:	sub	sp, fp, #8
   212c4:	pop	{r4, sl, fp, pc}
   212c8:	ldr	r0, [r0, #8]
   212cc:	bx	lr
   212d0:	ldr	r0, [r0, #12]
   212d4:	bx	lr
   212d8:	ldr	r0, [r0, #16]
   212dc:	bx	lr
   212e0:	ldm	r0, {r2, ip}
   212e4:	mov	r0, #0
   212e8:	cmp	r2, ip
   212ec:	bxcs	lr
   212f0:	mov	r0, #0
   212f4:	ldr	r1, [r2]
   212f8:	cmp	r1, #0
   212fc:	beq	21320 <__assert_fail@plt+0xf294>
   21300:	mov	r3, #0
   21304:	mov	r1, r2
   21308:	ldr	r1, [r1, #4]
   2130c:	add	r3, r3, #1
   21310:	cmp	r1, #0
   21314:	bne	21308 <__assert_fail@plt+0xf27c>
   21318:	cmp	r3, r0
   2131c:	movhi	r0, r3
   21320:	add	r2, r2, #8
   21324:	cmp	r2, ip
   21328:	bcc	212f4 <__assert_fail@plt+0xf268>
   2132c:	bx	lr
   21330:	push	{fp, lr}
   21334:	mov	fp, sp
   21338:	ldm	r0, {r3, ip}
   2133c:	mov	lr, #0
   21340:	mov	r1, #0
   21344:	cmp	r3, ip
   21348:	bcs	21384 <__assert_fail@plt+0xf2f8>
   2134c:	mov	r1, #0
   21350:	mov	lr, #0
   21354:	ldr	r2, [r3]
   21358:	cmp	r2, #0
   2135c:	beq	21378 <__assert_fail@plt+0xf2ec>
   21360:	mov	r2, r3
   21364:	ldr	r2, [r2, #4]
   21368:	add	r1, r1, #1
   2136c:	cmp	r2, #0
   21370:	bne	21364 <__assert_fail@plt+0xf2d8>
   21374:	add	lr, lr, #1
   21378:	add	r3, r3, #8
   2137c:	cmp	r3, ip
   21380:	bcc	21354 <__assert_fail@plt+0xf2c8>
   21384:	ldr	r2, [r0, #12]
   21388:	cmp	lr, r2
   2138c:	bne	213a4 <__assert_fail@plt+0xf318>
   21390:	ldr	r2, [r0, #16]
   21394:	mov	r0, #1
   21398:	cmp	r1, r2
   2139c:	movne	r0, #0
   213a0:	pop	{fp, pc}
   213a4:	mov	r0, #0
   213a8:	pop	{fp, pc}
   213ac:	nop	{0}
   213b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   213b4:	add	fp, sp, #24
   213b8:	sub	sp, sp, #8
   213bc:	ldr	r6, [r0]
   213c0:	ldmib	r0, {r2, r7, r8}
   213c4:	ldr	r3, [r0, #16]
   213c8:	mov	r4, r1
   213cc:	mov	r5, #0
   213d0:	cmp	r6, r2
   213d4:	bcs	21414 <__assert_fail@plt+0xf388>
   213d8:	mov	r5, #0
   213dc:	ldr	r0, [r6]
   213e0:	cmp	r0, #0
   213e4:	beq	21408 <__assert_fail@plt+0xf37c>
   213e8:	mov	r0, #0
   213ec:	mov	r1, r6
   213f0:	ldr	r1, [r1, #4]
   213f4:	add	r0, r0, #1
   213f8:	cmp	r1, #0
   213fc:	bne	213f0 <__assert_fail@plt+0xf364>
   21400:	cmp	r0, r5
   21404:	movhi	r5, r0
   21408:	add	r6, r6, #8
   2140c:	cmp	r6, r2
   21410:	bcc	213dc <__assert_fail@plt+0xf350>
   21414:	movw	r2, #62876	; 0xf59c
   21418:	mov	r0, r4
   2141c:	mov	r1, #1
   21420:	movt	r2, #2
   21424:	bl	11f24 <__fprintf_chk@plt>
   21428:	movw	r2, #62900	; 0xf5b4
   2142c:	mov	r0, r4
   21430:	mov	r1, #1
   21434:	mov	r3, r7
   21438:	movt	r2, #2
   2143c:	bl	11f24 <__fprintf_chk@plt>
   21440:	vldr	d16, [pc, #80]	; 21498 <__assert_fail@plt+0xf40c>
   21444:	vmov	s0, r8
   21448:	movw	r2, #62924	; 0xf5cc
   2144c:	mov	r0, r4
   21450:	mov	r1, #1
   21454:	mov	r3, r8
   21458:	vcvt.f64.u32	d17, s0
   2145c:	vmov	s0, r7
   21460:	movt	r2, #2
   21464:	vcvt.f64.u32	d18, s0
   21468:	vmul.f64	d16, d17, d16
   2146c:	vdiv.f64	d16, d16, d18
   21470:	vstr	d16, [sp]
   21474:	bl	11f24 <__fprintf_chk@plt>
   21478:	movw	r2, #62957	; 0xf5ed
   2147c:	mov	r0, r4
   21480:	mov	r1, #1
   21484:	mov	r3, r5
   21488:	movt	r2, #2
   2148c:	sub	sp, fp, #24
   21490:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   21494:	b	11f24 <__fprintf_chk@plt>
   21498:	andeq	r0, r0, r0
   2149c:	subsmi	r0, r9, r0
   214a0:	push	{r4, r5, r6, r7, fp, lr}
   214a4:	add	fp, sp, #16
   214a8:	mov	r4, r1
   214ac:	ldr	r1, [r0, #8]
   214b0:	ldr	r2, [r0, #24]
   214b4:	mov	r5, r0
   214b8:	mov	r0, r4
   214bc:	blx	r2
   214c0:	ldr	r1, [r5, #8]
   214c4:	cmp	r0, r1
   214c8:	bcs	21534 <__assert_fail@plt+0xf4a8>
   214cc:	ldr	r7, [r5]
   214d0:	mov	r6, #0
   214d4:	ldr	r1, [r7, r0, lsl #3]!
   214d8:	cmp	r1, #0
   214dc:	cmpne	r7, #0
   214e0:	bne	214f0 <__assert_fail@plt+0xf464>
   214e4:	mov	r0, r6
   214e8:	pop	{r4, r5, r6, r7, fp, pc}
   214ec:	ldr	r1, [r7]
   214f0:	cmp	r1, r4
   214f4:	beq	2151c <__assert_fail@plt+0xf490>
   214f8:	ldr	r2, [r5, #28]
   214fc:	mov	r0, r4
   21500:	blx	r2
   21504:	cmp	r0, #0
   21508:	bne	21528 <__assert_fail@plt+0xf49c>
   2150c:	ldr	r7, [r7, #4]
   21510:	cmp	r7, #0
   21514:	bne	214ec <__assert_fail@plt+0xf460>
   21518:	b	214e4 <__assert_fail@plt+0xf458>
   2151c:	mov	r6, r4
   21520:	mov	r0, r6
   21524:	pop	{r4, r5, r6, r7, fp, pc}
   21528:	ldr	r6, [r7]
   2152c:	mov	r0, r6
   21530:	pop	{r4, r5, r6, r7, fp, pc}
   21534:	bl	12038 <abort@plt>
   21538:	ldr	r1, [r0, #16]
   2153c:	cmp	r1, #0
   21540:	moveq	r0, #0
   21544:	bxeq	lr
   21548:	ldm	r0, {r1, r2}
   2154c:	cmp	r1, r2
   21550:	bcs	21568 <__assert_fail@plt+0xf4dc>
   21554:	ldr	r0, [r1], #8
   21558:	cmp	r0, #0
   2155c:	bxne	lr
   21560:	cmp	r1, r2
   21564:	bcc	21554 <__assert_fail@plt+0xf4c8>
   21568:	push	{fp, lr}
   2156c:	mov	fp, sp
   21570:	bl	12038 <abort@plt>
   21574:	push	{r4, r5, fp, lr}
   21578:	add	fp, sp, #8
   2157c:	mov	r5, r1
   21580:	ldr	r1, [r0, #8]
   21584:	ldr	r2, [r0, #24]
   21588:	mov	r4, r0
   2158c:	mov	r0, r5
   21590:	blx	r2
   21594:	ldr	r1, [r4, #8]
   21598:	cmp	r0, r1
   2159c:	bcs	215f8 <__assert_fail@plt+0xf56c>
   215a0:	ldr	r1, [r4]
   215a4:	add	r2, r1, r0, lsl #3
   215a8:	ldr	r3, [r2]
   215ac:	ldr	r2, [r2, #4]
   215b0:	cmp	r3, r5
   215b4:	beq	215c4 <__assert_fail@plt+0xf538>
   215b8:	cmp	r2, #0
   215bc:	bne	215a8 <__assert_fail@plt+0xf51c>
   215c0:	b	215d0 <__assert_fail@plt+0xf544>
   215c4:	cmp	r2, #0
   215c8:	ldrne	r0, [r2]
   215cc:	popne	{r4, r5, fp, pc}
   215d0:	ldr	r2, [r4, #4]
   215d4:	add	r0, r1, r0, lsl #3
   215d8:	add	r1, r0, #8
   215dc:	cmp	r1, r2
   215e0:	movcs	r0, #0
   215e4:	popcs	{r4, r5, fp, pc}
   215e8:	ldr	r0, [r1], #8
   215ec:	cmp	r0, #0
   215f0:	popne	{r4, r5, fp, pc}
   215f4:	b	215dc <__assert_fail@plt+0xf550>
   215f8:	bl	12038 <abort@plt>
   215fc:	push	{r4, r5, fp, lr}
   21600:	add	fp, sp, #8
   21604:	ldm	r0, {r5, lr}
   21608:	mov	ip, r0
   2160c:	mov	r0, #0
   21610:	cmp	r5, lr
   21614:	bcs	21670 <__assert_fail@plt+0xf5e4>
   21618:	mov	r0, #0
   2161c:	ldr	r3, [r5]
   21620:	cmp	r3, #0
   21624:	cmpne	r5, #0
   21628:	bne	2163c <__assert_fail@plt+0xf5b0>
   2162c:	add	r5, r5, #8
   21630:	cmp	r5, lr
   21634:	bcc	2161c <__assert_fail@plt+0xf590>
   21638:	b	21670 <__assert_fail@plt+0xf5e4>
   2163c:	mov	r3, r5
   21640:	cmp	r0, r2
   21644:	popcs	{r4, r5, fp, pc}
   21648:	ldr	r4, [r3]
   2164c:	str	r4, [r1, r0, lsl #2]
   21650:	add	r0, r0, #1
   21654:	ldr	r3, [r3, #4]
   21658:	cmp	r3, #0
   2165c:	bne	21640 <__assert_fail@plt+0xf5b4>
   21660:	ldr	lr, [ip, #4]
   21664:	add	r5, r5, #8
   21668:	cmp	r5, lr
   2166c:	bcc	2161c <__assert_fail@plt+0xf590>
   21670:	pop	{r4, r5, fp, pc}
   21674:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21678:	add	fp, sp, #24
   2167c:	mov	r5, r1
   21680:	ldr	r4, [r0]
   21684:	ldr	r1, [r0, #4]
   21688:	mov	r6, #0
   2168c:	cmp	r4, r1
   21690:	bcs	2170c <__assert_fail@plt+0xf680>
   21694:	mov	r9, r2
   21698:	mov	r8, r0
   2169c:	mov	r6, #0
   216a0:	ldr	r0, [r4]
   216a4:	cmp	r0, #0
   216a8:	cmpne	r4, #0
   216ac:	bne	216c0 <__assert_fail@plt+0xf634>
   216b0:	add	r4, r4, #8
   216b4:	cmp	r4, r1
   216b8:	bcc	216a0 <__assert_fail@plt+0xf614>
   216bc:	b	2170c <__assert_fail@plt+0xf680>
   216c0:	mov	r1, r9
   216c4:	blx	r5
   216c8:	cmp	r0, #0
   216cc:	beq	2170c <__assert_fail@plt+0xf680>
   216d0:	mov	r7, r4
   216d4:	ldr	r7, [r7, #4]
   216d8:	add	r6, r6, #1
   216dc:	cmp	r7, #0
   216e0:	beq	216fc <__assert_fail@plt+0xf670>
   216e4:	ldr	r0, [r7]
   216e8:	mov	r1, r9
   216ec:	blx	r5
   216f0:	cmp	r0, #0
   216f4:	bne	216d4 <__assert_fail@plt+0xf648>
   216f8:	b	2170c <__assert_fail@plt+0xf680>
   216fc:	ldr	r1, [r8, #4]
   21700:	add	r4, r4, #8
   21704:	cmp	r4, r1
   21708:	bcc	216a0 <__assert_fail@plt+0xf614>
   2170c:	mov	r0, r6
   21710:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21714:	ldrb	r2, [r0]
   21718:	cmp	r2, #0
   2171c:	moveq	r0, #0
   21720:	bxeq	lr
   21724:	add	r3, r0, #1
   21728:	mov	r0, #0
   2172c:	rsb	r0, r0, r0, lsl #5
   21730:	uxtab	r0, r0, r2
   21734:	udiv	r2, r0, r1
   21738:	mls	r0, r2, r1, r0
   2173c:	ldrb	r2, [r3], #1
   21740:	cmp	r2, #0
   21744:	bne	2172c <__assert_fail@plt+0xf6a0>
   21748:	bx	lr
   2174c:	movw	r1, #62984	; 0xf608
   21750:	movt	r1, #2
   21754:	vld1.32	{d16-d17}, [r1]!
   21758:	ldr	r1, [r1]
   2175c:	vst1.32	{d16-d17}, [r0]!
   21760:	str	r1, [r0]
   21764:	bx	lr
   21768:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2176c:	add	fp, sp, #24
   21770:	movw	r9, #6580	; 0x19b4
   21774:	movw	r5, #6560	; 0x19a0
   21778:	cmp	r3, #0
   2177c:	mov	r6, r0
   21780:	mov	r0, #40	; 0x28
   21784:	mov	r7, r1
   21788:	movt	r9, #2
   2178c:	movt	r5, #2
   21790:	movne	r9, r3
   21794:	cmp	r2, #0
   21798:	movne	r5, r2
   2179c:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   217a0:	mov	r8, #0
   217a4:	cmp	r0, #0
   217a8:	beq	21988 <__assert_fail@plt+0xf8fc>
   217ac:	mov	r4, r0
   217b0:	cmp	r7, #0
   217b4:	beq	21864 <__assert_fail@plt+0xf7d8>
   217b8:	movw	r0, #62984	; 0xf608
   217bc:	str	r7, [r4, #20]
   217c0:	movt	r0, #2
   217c4:	cmp	r7, r0
   217c8:	beq	21870 <__assert_fail@plt+0xf7e4>
   217cc:	vldr	s2, [pc, #444]	; 21990 <__assert_fail@plt+0xf904>
   217d0:	vldr	s0, [r7, #8]
   217d4:	vcmpe.f32	s0, s2
   217d8:	vmrs	APSR_nzcv, fpscr
   217dc:	ble	21848 <__assert_fail@plt+0xf7bc>
   217e0:	vldr	s4, [pc, #428]	; 21994 <__assert_fail@plt+0xf908>
   217e4:	vcmpe.f32	s0, s4
   217e8:	vmrs	APSR_nzcv, fpscr
   217ec:	bpl	21848 <__assert_fail@plt+0xf7bc>
   217f0:	vldr	s4, [pc, #416]	; 21998 <__assert_fail@plt+0xf90c>
   217f4:	vldr	s6, [r7, #12]
   217f8:	vcmpe.f32	s6, s4
   217fc:	vmrs	APSR_nzcv, fpscr
   21800:	ble	21848 <__assert_fail@plt+0xf7bc>
   21804:	vldr	s4, [r7]
   21808:	vcmpe.f32	s4, #0.0
   2180c:	vmrs	APSR_nzcv, fpscr
   21810:	blt	21848 <__assert_fail@plt+0xf7bc>
   21814:	vadd.f32	s2, s4, s2
   21818:	vcmpe.f32	s2, s0
   2181c:	vmrs	APSR_nzcv, fpscr
   21820:	bpl	21848 <__assert_fail@plt+0xf7bc>
   21824:	vldr	s0, [r7, #4]
   21828:	vmov.f32	s4, #112	; 0x3f800000  1.0
   2182c:	vcmpe.f32	s0, s4
   21830:	vmrs	APSR_nzcv, fpscr
   21834:	bhi	21848 <__assert_fail@plt+0xf7bc>
   21838:	vcmpe.f32	s2, s0
   2183c:	mov	r0, r7
   21840:	vmrs	APSR_nzcv, fpscr
   21844:	bmi	21870 <__assert_fail@plt+0xf7e4>
   21848:	movw	r0, #62984	; 0xf608
   2184c:	movt	r0, #2
   21850:	str	r0, [r4, #20]
   21854:	mov	r0, r4
   21858:	bl	21218 <__assert_fail@plt+0xf18c>
   2185c:	mov	r0, r8
   21860:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21864:	movw	r0, #62984	; 0xf608
   21868:	movt	r0, #2
   2186c:	str	r0, [r4, #20]
   21870:	ldrb	r1, [r0, #16]
   21874:	cmp	r1, #0
   21878:	bne	218a4 <__assert_fail@plt+0xf818>
   2187c:	vldr	s0, [r0, #8]
   21880:	vldr	s4, [pc, #276]	; 2199c <__assert_fail@plt+0xf910>
   21884:	vmov	s2, r6
   21888:	vcvt.f32.u32	s2, s2
   2188c:	vdiv.f32	s2, s2, s0
   21890:	vcmpe.f32	s2, s4
   21894:	vcvt.u32.f32	s0, s2
   21898:	vmrs	APSR_nzcv, fpscr
   2189c:	bge	21924 <__assert_fail@plt+0xf898>
   218a0:	vmov	r6, s0
   218a4:	cmp	r6, #10
   218a8:	movls	r6, #10
   218ac:	orr	r0, r6, #1
   218b0:	cmn	r0, #1
   218b4:	beq	21924 <__assert_fail@plt+0xf898>
   218b8:	ldr	r6, [fp, #8]
   218bc:	mov	r1, #3
   218c0:	cmp	r0, #10
   218c4:	bcc	218fc <__assert_fail@plt+0xf870>
   218c8:	mov	r1, #3
   218cc:	mov	r3, #9
   218d0:	mov	r2, #12
   218d4:	udiv	r7, r0, r1
   218d8:	mls	r7, r7, r1, r0
   218dc:	cmp	r7, #0
   218e0:	beq	218fc <__assert_fail@plt+0xf870>
   218e4:	add	r3, r3, r2
   218e8:	add	r2, r2, #8
   218ec:	add	r1, r1, #2
   218f0:	add	r3, r3, #4
   218f4:	cmp	r3, r0
   218f8:	bcc	218d4 <__assert_fail@plt+0xf848>
   218fc:	udiv	r2, r0, r1
   21900:	mls	r1, r2, r1, r0
   21904:	cmp	r1, #0
   21908:	bne	2191c <__assert_fail@plt+0xf890>
   2190c:	add	r0, r0, #2
   21910:	cmn	r0, #1
   21914:	bne	218bc <__assert_fail@plt+0xf830>
   21918:	b	21924 <__assert_fail@plt+0xf898>
   2191c:	cmp	r0, #536870912	; 0x20000000
   21920:	bcc	2193c <__assert_fail@plt+0xf8b0>
   21924:	mov	r0, #0
   21928:	str	r0, [r4, #8]
   2192c:	mov	r0, r4
   21930:	bl	21218 <__assert_fail@plt+0xf18c>
   21934:	mov	r0, r8
   21938:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2193c:	cmp	r0, #0
   21940:	str	r0, [r4, #8]
   21944:	beq	2192c <__assert_fail@plt+0xf8a0>
   21948:	mov	r1, #8
   2194c:	bl	2ac80 <_obstack_memory_used@@Base+0x48fc>
   21950:	cmp	r0, #0
   21954:	str	r0, [r4]
   21958:	beq	2192c <__assert_fail@plt+0xf8a0>
   2195c:	mov	r1, #0
   21960:	mov	r8, r4
   21964:	str	r1, [r4, #12]
   21968:	str	r1, [r4, #16]
   2196c:	str	r5, [r4, #24]
   21970:	str	r9, [r4, #28]
   21974:	str	r6, [r4, #32]
   21978:	str	r1, [r4, #36]	; 0x24
   2197c:	ldr	r1, [r4, #8]
   21980:	add	r0, r0, r1, lsl #3
   21984:	str	r0, [r4, #4]
   21988:	mov	r0, r8
   2198c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21990:	stclcc	12, cr12, [ip, #820]	; 0x334
   21994:	svccc	0x00666666
   21998:	svccc	0x008ccccd
   2199c:	svcmi	0x00800000
   219a0:	ror	r2, r0, #3
   219a4:	udiv	r2, r2, r1
   219a8:	mul	r1, r2, r1
   219ac:	rsb	r0, r1, r0, ror #3
   219b0:	bx	lr
   219b4:	sub	r0, r0, r1
   219b8:	clz	r0, r0
   219bc:	lsr	r0, r0, #5
   219c0:	bx	lr
   219c4:	push	{r4, r5, r6, r7, fp, lr}
   219c8:	add	fp, sp, #16
   219cc:	mov	r4, r0
   219d0:	ldr	r5, [r0]
   219d4:	ldr	r0, [r0, #4]
   219d8:	cmp	r5, r0
   219dc:	bcs	21a74 <__assert_fail@plt+0xf9e8>
   219e0:	mov	r6, #0
   219e4:	ldr	r1, [r5]
   219e8:	cmp	r1, #0
   219ec:	beq	21a68 <__assert_fail@plt+0xf9dc>
   219f0:	ldr	r1, [r4, #32]
   219f4:	ldr	r7, [r5, #4]
   219f8:	cmp	r1, #0
   219fc:	mov	r0, r1
   21a00:	movwne	r0, #1
   21a04:	cmp	r7, #0
   21a08:	beq	21a4c <__assert_fail@plt+0xf9c0>
   21a0c:	tst	r0, #1
   21a10:	beq	21a20 <__assert_fail@plt+0xf994>
   21a14:	ldr	r0, [r7]
   21a18:	blx	r1
   21a1c:	ldr	r1, [r4, #32]
   21a20:	str	r6, [r7]
   21a24:	cmp	r1, #0
   21a28:	ldr	r0, [r4, #36]	; 0x24
   21a2c:	ldr	r2, [r7, #4]
   21a30:	str	r0, [r7, #4]
   21a34:	mov	r0, r1
   21a38:	str	r7, [r4, #36]	; 0x24
   21a3c:	mov	r7, r2
   21a40:	movwne	r0, #1
   21a44:	cmp	r2, #0
   21a48:	bne	21a0c <__assert_fail@plt+0xf980>
   21a4c:	cmp	r0, #0
   21a50:	beq	21a5c <__assert_fail@plt+0xf9d0>
   21a54:	ldr	r0, [r5]
   21a58:	blx	r1
   21a5c:	str	r6, [r5]
   21a60:	str	r6, [r5, #4]
   21a64:	ldr	r0, [r4, #4]
   21a68:	add	r5, r5, #8
   21a6c:	cmp	r5, r0
   21a70:	bcc	219e4 <__assert_fail@plt+0xf958>
   21a74:	mov	r0, #0
   21a78:	str	r0, [r4, #12]
   21a7c:	str	r0, [r4, #16]
   21a80:	pop	{r4, r5, r6, r7, fp, pc}
   21a84:	push	{r4, r5, r6, sl, fp, lr}
   21a88:	add	fp, sp, #16
   21a8c:	mov	r4, r0
   21a90:	ldr	r0, [r0, #32]
   21a94:	cmp	r0, #0
   21a98:	ldrne	r0, [r4, #16]
   21a9c:	cmpne	r0, #0
   21aa0:	beq	21b08 <__assert_fail@plt+0xfa7c>
   21aa4:	ldr	r5, [r4]
   21aa8:	ldr	r1, [r4, #4]
   21aac:	cmp	r5, r1
   21ab0:	bcc	21ac4 <__assert_fail@plt+0xfa38>
   21ab4:	b	21b08 <__assert_fail@plt+0xfa7c>
   21ab8:	add	r5, r5, #8
   21abc:	cmp	r5, r1
   21ac0:	bcs	21b08 <__assert_fail@plt+0xfa7c>
   21ac4:	ldr	r0, [r5]
   21ac8:	cmp	r0, #0
   21acc:	cmpne	r5, #0
   21ad0:	beq	21ab8 <__assert_fail@plt+0xfa2c>
   21ad4:	ldr	r1, [r4, #32]
   21ad8:	blx	r1
   21adc:	ldr	r6, [r5, #4]
   21ae0:	cmp	r6, #0
   21ae4:	beq	21b00 <__assert_fail@plt+0xfa74>
   21ae8:	ldr	r1, [r4, #32]
   21aec:	ldr	r0, [r6]
   21af0:	blx	r1
   21af4:	ldr	r6, [r6, #4]
   21af8:	cmp	r6, #0
   21afc:	bne	21ae8 <__assert_fail@plt+0xfa5c>
   21b00:	ldr	r1, [r4, #4]
   21b04:	b	21ab8 <__assert_fail@plt+0xfa2c>
   21b08:	ldr	r5, [r4]
   21b0c:	ldr	r1, [r4, #4]
   21b10:	cmp	r5, r1
   21b14:	bcc	21b28 <__assert_fail@plt+0xfa9c>
   21b18:	b	21b50 <__assert_fail@plt+0xfac4>
   21b1c:	add	r5, r5, #8
   21b20:	cmp	r5, r1
   21b24:	bcs	21b50 <__assert_fail@plt+0xfac4>
   21b28:	ldr	r0, [r5, #4]
   21b2c:	cmp	r0, #0
   21b30:	beq	21b1c <__assert_fail@plt+0xfa90>
   21b34:	ldr	r6, [r0, #4]
   21b38:	bl	21218 <__assert_fail@plt+0xf18c>
   21b3c:	cmp	r6, #0
   21b40:	mov	r0, r6
   21b44:	bne	21b34 <__assert_fail@plt+0xfaa8>
   21b48:	ldr	r1, [r4, #4]
   21b4c:	b	21b1c <__assert_fail@plt+0xfa90>
   21b50:	ldr	r0, [r4, #36]	; 0x24
   21b54:	cmp	r0, #0
   21b58:	beq	21b70 <__assert_fail@plt+0xfae4>
   21b5c:	ldr	r5, [r0, #4]
   21b60:	bl	21218 <__assert_fail@plt+0xf18c>
   21b64:	cmp	r5, #0
   21b68:	mov	r0, r5
   21b6c:	bne	21b5c <__assert_fail@plt+0xfad0>
   21b70:	ldr	r0, [r4]
   21b74:	bl	21218 <__assert_fail@plt+0xf18c>
   21b78:	mov	r0, r4
   21b7c:	pop	{r4, r5, r6, sl, fp, lr}
   21b80:	b	21218 <__assert_fail@plt+0xf18c>
   21b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b88:	add	fp, sp, #28
   21b8c:	sub	sp, sp, #44	; 0x2c
   21b90:	mov	r7, r0
   21b94:	mov	r4, r0
   21b98:	ldr	r0, [r7, #20]!
   21b9c:	ldrb	r2, [r0, #16]
   21ba0:	cmp	r2, #0
   21ba4:	bne	21bd4 <__assert_fail@plt+0xfb48>
   21ba8:	vldr	s0, [r0, #8]
   21bac:	vldr	s4, [pc, #576]	; 21df4 <__assert_fail@plt+0xfd68>
   21bb0:	vmov	s2, r1
   21bb4:	mov	r5, #0
   21bb8:	vcvt.f32.u32	s2, s2
   21bbc:	vdiv.f32	s2, s2, s0
   21bc0:	vcmpe.f32	s2, s4
   21bc4:	vcvt.u32.f32	s0, s2
   21bc8:	vmrs	APSR_nzcv, fpscr
   21bcc:	bge	21cf8 <__assert_fail@plt+0xfc6c>
   21bd0:	vmov	r1, s0
   21bd4:	cmp	r1, #10
   21bd8:	mov	r5, #0
   21bdc:	movls	r1, #10
   21be0:	orr	r6, r1, #1
   21be4:	cmn	r6, #1
   21be8:	bne	21bfc <__assert_fail@plt+0xfb70>
   21bec:	b	21cf8 <__assert_fail@plt+0xfc6c>
   21bf0:	add	r6, r6, #2
   21bf4:	cmn	r6, #1
   21bf8:	beq	21cf8 <__assert_fail@plt+0xfc6c>
   21bfc:	mov	r0, #3
   21c00:	cmp	r6, #10
   21c04:	bcc	21c3c <__assert_fail@plt+0xfbb0>
   21c08:	mov	r0, #3
   21c0c:	mov	r2, #9
   21c10:	mov	r1, #12
   21c14:	udiv	r3, r6, r0
   21c18:	mls	r3, r3, r0, r6
   21c1c:	cmp	r3, #0
   21c20:	beq	21c3c <__assert_fail@plt+0xfbb0>
   21c24:	add	r2, r2, r1
   21c28:	add	r1, r1, #8
   21c2c:	add	r0, r0, #2
   21c30:	add	r2, r2, #4
   21c34:	cmp	r2, r6
   21c38:	bcc	21c14 <__assert_fail@plt+0xfb88>
   21c3c:	udiv	r1, r6, r0
   21c40:	mls	r0, r1, r0, r6
   21c44:	cmp	r0, #0
   21c48:	beq	21bf0 <__assert_fail@plt+0xfb64>
   21c4c:	sub	r0, r6, #1
   21c50:	cmn	r0, #-536870910	; 0xe0000002
   21c54:	bhi	21cf8 <__assert_fail@plt+0xfc6c>
   21c58:	ldr	r0, [r4, #8]
   21c5c:	cmp	r6, r0
   21c60:	bne	21c74 <__assert_fail@plt+0xfbe8>
   21c64:	mov	r5, #1
   21c68:	mov	r0, r5
   21c6c:	sub	sp, fp, #28
   21c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c74:	mov	r0, r6
   21c78:	mov	r1, #8
   21c7c:	bl	2ac80 <_obstack_memory_used@@Base+0x48fc>
   21c80:	cmp	r0, #0
   21c84:	str	r0, [sp, #4]
   21c88:	beq	21cf8 <__assert_fail@plt+0xfc6c>
   21c8c:	mov	r1, #0
   21c90:	add	r0, r0, r6, lsl #3
   21c94:	str	r6, [sp, #12]
   21c98:	add	r5, sp, #4
   21c9c:	mov	sl, r4
   21ca0:	mov	r2, #0
   21ca4:	str	r1, [sp, #16]
   21ca8:	str	r1, [sp, #20]
   21cac:	str	r0, [sp, #8]
   21cb0:	add	r0, r5, #20
   21cb4:	mov	r1, r4
   21cb8:	vld1.32	{d16-d17}, [r7]
   21cbc:	vst1.32	{d16-d17}, [r0]
   21cc0:	ldr	r0, [sl, #36]!	; 0x24
   21cc4:	str	r0, [sp, #40]	; 0x28
   21cc8:	mov	r0, r5
   21ccc:	bl	21df8 <__assert_fail@plt+0xfd6c>
   21cd0:	cmp	r0, #0
   21cd4:	beq	21d04 <__assert_fail@plt+0xfc78>
   21cd8:	ldr	r0, [r4]
   21cdc:	bl	21218 <__assert_fail@plt+0xf18c>
   21ce0:	mov	r0, #36	; 0x24
   21ce4:	vld1.32	{d16-d17}, [r5], r0
   21ce8:	vst1.32	{d16-d17}, [r4], r0
   21cec:	ldr	r0, [r5]
   21cf0:	mov	r5, #1
   21cf4:	str	r0, [r4]
   21cf8:	mov	r0, r5
   21cfc:	sub	sp, fp, #28
   21d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d04:	ldr	r0, [sp, #40]	; 0x28
   21d08:	str	r0, [sl]
   21d0c:	ldr	r0, [sp, #8]
   21d10:	ldr	r8, [sp, #4]
   21d14:	cmp	r8, r0
   21d18:	str	r0, [sp]
   21d1c:	bcs	21dc0 <__assert_fail@plt+0xfd34>
   21d20:	mov	r9, #0
   21d24:	ldr	r0, [r8]
   21d28:	cmp	r0, #0
   21d2c:	beq	21db0 <__assert_fail@plt+0xfd24>
   21d30:	ldr	r6, [r8, #4]
   21d34:	cmp	r6, #0
   21d38:	beq	21dac <__assert_fail@plt+0xfd20>
   21d3c:	ldr	r1, [r4, #8]
   21d40:	ldr	r5, [r6]
   21d44:	ldr	r2, [r4, #24]
   21d48:	mov	r0, r5
   21d4c:	blx	r2
   21d50:	ldr	r1, [r4, #8]
   21d54:	cmp	r0, r1
   21d58:	bcs	21df0 <__assert_fail@plt+0xfd64>
   21d5c:	ldr	r3, [r4]
   21d60:	ldr	r2, [r6, #4]
   21d64:	ldr	r7, [r3, r0, lsl #3]
   21d68:	cmp	r7, #0
   21d6c:	beq	21d7c <__assert_fail@plt+0xfcf0>
   21d70:	add	r0, r3, r0, lsl #3
   21d74:	add	r0, r0, #4
   21d78:	b	21d94 <__assert_fail@plt+0xfd08>
   21d7c:	str	r5, [r3, r0, lsl #3]
   21d80:	ldr	r0, [r4, #12]
   21d84:	add	r0, r0, #1
   21d88:	str	r0, [r4, #12]
   21d8c:	mov	r0, sl
   21d90:	str	r9, [r6]
   21d94:	ldr	r3, [r0]
   21d98:	cmp	r2, #0
   21d9c:	str	r3, [r6, #4]
   21da0:	str	r6, [r0]
   21da4:	mov	r6, r2
   21da8:	bne	21d40 <__assert_fail@plt+0xfcb4>
   21dac:	str	r9, [r8, #4]
   21db0:	ldr	r0, [sp]
   21db4:	add	r8, r8, #8
   21db8:	cmp	r8, r0
   21dbc:	bcc	21d24 <__assert_fail@plt+0xfc98>
   21dc0:	add	r1, sp, #4
   21dc4:	mov	r0, r4
   21dc8:	mov	r2, #0
   21dcc:	mov	r5, #0
   21dd0:	bl	21df8 <__assert_fail@plt+0xfd6c>
   21dd4:	cmp	r0, #0
   21dd8:	beq	21df0 <__assert_fail@plt+0xfd64>
   21ddc:	ldr	r0, [sp, #4]
   21de0:	bl	21218 <__assert_fail@plt+0xf18c>
   21de4:	mov	r0, r5
   21de8:	sub	sp, fp, #28
   21dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21df0:	bl	12038 <abort@plt>
   21df4:	svcmi	0x00800000
   21df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21dfc:	add	fp, sp, #28
   21e00:	sub	sp, sp, #4
   21e04:	ldr	r8, [r1]
   21e08:	ldr	r3, [r1, #4]
   21e0c:	mov	r6, r0
   21e10:	mov	r0, #1
   21e14:	str	r1, [sp]
   21e18:	cmp	r8, r3
   21e1c:	bcs	2201c <__assert_fail@plt+0xff90>
   21e20:	add	r9, r6, #36	; 0x24
   21e24:	cmp	r2, #0
   21e28:	beq	21ed4 <__assert_fail@plt+0xfe48>
   21e2c:	mov	sl, #0
   21e30:	ldr	r1, [r8]
   21e34:	cmp	r1, #0
   21e38:	beq	21ec4 <__assert_fail@plt+0xfe38>
   21e3c:	ldr	r7, [r8, #4]
   21e40:	cmp	r7, #0
   21e44:	beq	21ec0 <__assert_fail@plt+0xfe34>
   21e48:	ldr	r1, [r6, #8]
   21e4c:	ldr	r4, [r7]
   21e50:	ldr	r2, [r6, #24]
   21e54:	mov	r0, r4
   21e58:	blx	r2
   21e5c:	ldr	r1, [r6, #8]
   21e60:	cmp	r0, r1
   21e64:	bcs	22030 <__assert_fail@plt+0xffa4>
   21e68:	ldr	r3, [r6]
   21e6c:	ldr	r2, [r7, #4]
   21e70:	ldr	r5, [r3, r0, lsl #3]
   21e74:	cmp	r5, #0
   21e78:	beq	21e88 <__assert_fail@plt+0xfdfc>
   21e7c:	add	r0, r3, r0, lsl #3
   21e80:	add	r0, r0, #4
   21e84:	b	21ea0 <__assert_fail@plt+0xfe14>
   21e88:	str	r4, [r3, r0, lsl #3]
   21e8c:	ldr	r0, [r6, #12]
   21e90:	add	r0, r0, #1
   21e94:	str	r0, [r6, #12]
   21e98:	mov	r0, r9
   21e9c:	str	sl, [r7]
   21ea0:	ldr	r3, [r0]
   21ea4:	cmp	r2, #0
   21ea8:	str	r3, [r7, #4]
   21eac:	str	r7, [r0]
   21eb0:	mov	r7, r2
   21eb4:	bne	21e4c <__assert_fail@plt+0xfdc0>
   21eb8:	ldr	r0, [sp]
   21ebc:	ldr	r3, [r0, #4]
   21ec0:	str	sl, [r8, #4]
   21ec4:	add	r8, r8, #8
   21ec8:	cmp	r8, r3
   21ecc:	bcc	21e30 <__assert_fail@plt+0xfda4>
   21ed0:	b	22018 <__assert_fail@plt+0xff8c>
   21ed4:	mov	r5, #0
   21ed8:	ldr	sl, [r8]
   21edc:	cmp	sl, #0
   21ee0:	beq	2200c <__assert_fail@plt+0xff80>
   21ee4:	ldr	r7, [r8, #4]
   21ee8:	ldr	r1, [r6, #8]
   21eec:	cmp	r7, #0
   21ef0:	beq	21f6c <__assert_fail@plt+0xfee0>
   21ef4:	mov	sl, #0
   21ef8:	ldr	r4, [r7]
   21efc:	ldr	r2, [r6, #24]
   21f00:	mov	r0, r4
   21f04:	blx	r2
   21f08:	ldr	r1, [r6, #8]
   21f0c:	cmp	r0, r1
   21f10:	bcs	22030 <__assert_fail@plt+0xffa4>
   21f14:	ldr	r3, [r6]
   21f18:	ldr	r2, [r7, #4]
   21f1c:	ldr	r5, [r3, r0, lsl #3]
   21f20:	cmp	r5, #0
   21f24:	beq	21f34 <__assert_fail@plt+0xfea8>
   21f28:	add	r0, r3, r0, lsl #3
   21f2c:	add	r0, r0, #4
   21f30:	b	21f4c <__assert_fail@plt+0xfec0>
   21f34:	str	r4, [r3, r0, lsl #3]
   21f38:	ldr	r0, [r6, #12]
   21f3c:	add	r0, r0, #1
   21f40:	str	r0, [r6, #12]
   21f44:	mov	r0, r9
   21f48:	str	sl, [r7]
   21f4c:	ldr	r3, [r0]
   21f50:	cmp	r2, #0
   21f54:	str	r3, [r7, #4]
   21f58:	str	r7, [r0]
   21f5c:	mov	r7, r2
   21f60:	bne	21ef8 <__assert_fail@plt+0xfe6c>
   21f64:	ldr	sl, [r8]
   21f68:	mov	r5, #0
   21f6c:	str	r5, [r8, #4]
   21f70:	mov	r0, sl
   21f74:	ldr	r2, [r6, #24]
   21f78:	blx	r2
   21f7c:	mov	r4, r0
   21f80:	ldr	r0, [r6, #8]
   21f84:	cmp	r4, r0
   21f88:	bcs	22030 <__assert_fail@plt+0xffa4>
   21f8c:	ldr	r7, [r6]
   21f90:	ldr	r0, [r7, r4, lsl #3]
   21f94:	cmp	r0, #0
   21f98:	beq	21fb8 <__assert_fail@plt+0xff2c>
   21f9c:	ldr	r0, [r9]
   21fa0:	cmp	r0, #0
   21fa4:	beq	21fcc <__assert_fail@plt+0xff40>
   21fa8:	mov	r1, r0
   21fac:	ldr	r2, [r1, #4]!
   21fb0:	str	r2, [r9]
   21fb4:	b	21fe0 <__assert_fail@plt+0xff54>
   21fb8:	str	sl, [r7, r4, lsl #3]
   21fbc:	ldr	r0, [r6, #12]
   21fc0:	add	r0, r0, #1
   21fc4:	str	r0, [r6, #12]
   21fc8:	b	21ff4 <__assert_fail@plt+0xff68>
   21fcc:	mov	r0, #8
   21fd0:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   21fd4:	cmp	r0, #0
   21fd8:	beq	22024 <__assert_fail@plt+0xff98>
   21fdc:	add	r1, r0, #4
   21fe0:	str	sl, [r0]
   21fe4:	add	r2, r7, r4, lsl #3
   21fe8:	ldr	r3, [r2, #4]
   21fec:	str	r3, [r1]
   21ff0:	str	r0, [r2, #4]
   21ff4:	ldr	r0, [sp]
   21ff8:	str	r5, [r8]
   21ffc:	ldr	r1, [r0, #12]
   22000:	ldr	r3, [r0, #4]
   22004:	sub	r1, r1, #1
   22008:	str	r1, [r0, #12]
   2200c:	add	r8, r8, #8
   22010:	cmp	r8, r3
   22014:	bcc	21ed8 <__assert_fail@plt+0xfe4c>
   22018:	mov	r0, #1
   2201c:	sub	sp, fp, #28
   22020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22024:	mov	r0, #0
   22028:	sub	sp, fp, #28
   2202c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22030:	bl	12038 <abort@plt>
   22034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22038:	add	fp, sp, #28
   2203c:	sub	sp, sp, #4
   22040:	cmp	r1, #0
   22044:	beq	22388 <__assert_fail@plt+0x102fc>
   22048:	mov	r8, r2
   2204c:	mov	sl, r1
   22050:	ldr	r1, [r0, #8]
   22054:	ldr	r2, [r0, #24]
   22058:	mov	r4, r0
   2205c:	mov	r0, sl
   22060:	blx	r2
   22064:	mov	r7, r0
   22068:	ldr	r0, [r4, #8]
   2206c:	cmp	r7, r0
   22070:	bcs	22388 <__assert_fail@plt+0x102fc>
   22074:	ldr	r5, [r4]
   22078:	mov	r9, r5
   2207c:	ldr	r1, [r9, r7, lsl #3]!
   22080:	cmp	r1, #0
   22084:	beq	22118 <__assert_fail@plt+0x1008c>
   22088:	cmp	r1, sl
   2208c:	beq	220b8 <__assert_fail@plt+0x1002c>
   22090:	ldr	r2, [r4, #28]
   22094:	mov	r0, sl
   22098:	blx	r2
   2209c:	cmp	r0, #0
   220a0:	mov	r6, r9
   220a4:	beq	220d4 <__assert_fail@plt+0x10048>
   220a8:	ldr	r0, [r6]
   220ac:	cmp	r0, #0
   220b0:	bne	220bc <__assert_fail@plt+0x10030>
   220b4:	b	22118 <__assert_fail@plt+0x1008c>
   220b8:	mov	r0, sl
   220bc:	cmp	r8, #0
   220c0:	mov	r7, #0
   220c4:	strne	r0, [r8]
   220c8:	mov	r0, r7
   220cc:	sub	sp, fp, #28
   220d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220d4:	add	r6, r5, r7, lsl #3
   220d8:	ldr	r0, [r6, #4]!
   220dc:	cmp	r0, #0
   220e0:	beq	22118 <__assert_fail@plt+0x1008c>
   220e4:	ldr	r1, [r0]
   220e8:	cmp	r1, sl
   220ec:	beq	2210c <__assert_fail@plt+0x10080>
   220f0:	ldr	r2, [r4, #28]
   220f4:	mov	r0, sl
   220f8:	blx	r2
   220fc:	ldr	r6, [r6]
   22100:	cmp	r0, #0
   22104:	beq	220d8 <__assert_fail@plt+0x1004c>
   22108:	b	220a8 <__assert_fail@plt+0x1001c>
   2210c:	mov	r0, sl
   22110:	cmp	r0, #0
   22114:	bne	220bc <__assert_fail@plt+0x10030>
   22118:	vldr	s0, [r4, #8]
   2211c:	vldr	s2, [r4, #12]
   22120:	ldr	r0, [r4, #20]
   22124:	vcvt.f32.u32	s0, s0
   22128:	vcvt.f32.u32	s4, s2
   2212c:	vldr	s2, [r0, #8]
   22130:	vmul.f32	s6, s2, s0
   22134:	vcmpe.f32	s6, s4
   22138:	vmrs	APSR_nzcv, fpscr
   2213c:	bpl	222a0 <__assert_fail@plt+0x10214>
   22140:	movw	r1, #62984	; 0xf608
   22144:	movt	r1, #2
   22148:	cmp	r0, r1
   2214c:	beq	221e8 <__assert_fail@plt+0x1015c>
   22150:	vldr	s6, [pc, #564]	; 2238c <__assert_fail@plt+0x10300>
   22154:	vcmpe.f32	s2, s6
   22158:	vmrs	APSR_nzcv, fpscr
   2215c:	ble	221c4 <__assert_fail@plt+0x10138>
   22160:	vldr	s8, [pc, #552]	; 22390 <__assert_fail@plt+0x10304>
   22164:	vcmpe.f32	s2, s8
   22168:	vmrs	APSR_nzcv, fpscr
   2216c:	bpl	221c4 <__assert_fail@plt+0x10138>
   22170:	vldr	s8, [pc, #540]	; 22394 <__assert_fail@plt+0x10308>
   22174:	vldr	s10, [r0, #12]
   22178:	vcmpe.f32	s10, s8
   2217c:	vmrs	APSR_nzcv, fpscr
   22180:	ble	221c4 <__assert_fail@plt+0x10138>
   22184:	vldr	s8, [r0]
   22188:	vcmpe.f32	s8, #0.0
   2218c:	vmrs	APSR_nzcv, fpscr
   22190:	blt	221c4 <__assert_fail@plt+0x10138>
   22194:	vadd.f32	s6, s8, s6
   22198:	vcmpe.f32	s6, s2
   2219c:	vmrs	APSR_nzcv, fpscr
   221a0:	bpl	221c4 <__assert_fail@plt+0x10138>
   221a4:	vldr	s8, [r0, #4]
   221a8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   221ac:	vcmpe.f32	s8, s10
   221b0:	vmrs	APSR_nzcv, fpscr
   221b4:	bhi	221c4 <__assert_fail@plt+0x10138>
   221b8:	vcmpe.f32	s6, s8
   221bc:	vmrs	APSR_nzcv, fpscr
   221c0:	bmi	221d4 <__assert_fail@plt+0x10148>
   221c4:	vldr	s2, [pc, #460]	; 22398 <__assert_fail@plt+0x1030c>
   221c8:	movw	r0, #62984	; 0xf608
   221cc:	movt	r0, #2
   221d0:	str	r0, [r4, #20]
   221d4:	vmul.f32	s6, s2, s0
   221d8:	vcmpe.f32	s6, s4
   221dc:	vmrs	APSR_nzcv, fpscr
   221e0:	bmi	221fc <__assert_fail@plt+0x10170>
   221e4:	b	222a0 <__assert_fail@plt+0x10214>
   221e8:	mov	r0, r1
   221ec:	vmul.f32	s6, s2, s0
   221f0:	vcmpe.f32	s6, s4
   221f4:	vmrs	APSR_nzcv, fpscr
   221f8:	bpl	222a0 <__assert_fail@plt+0x10214>
   221fc:	vldr	s4, [r0, #12]
   22200:	ldrb	r0, [r0, #16]
   22204:	mvn	r7, #0
   22208:	vmul.f32	s0, s4, s0
   2220c:	vldr	s4, [pc, #392]	; 2239c <__assert_fail@plt+0x10310>
   22210:	cmp	r0, #0
   22214:	vmul.f32	s2, s2, s0
   22218:	vseleq.f32	s0, s2, s0
   2221c:	vcmpe.f32	s0, s4
   22220:	vmrs	APSR_nzcv, fpscr
   22224:	bge	2231c <__assert_fail@plt+0x10290>
   22228:	vcvt.u32.f32	s0, s0
   2222c:	mov	r0, r4
   22230:	vmov	r1, s0
   22234:	bl	21b84 <__assert_fail@plt+0xfaf8>
   22238:	cmp	r0, #0
   2223c:	beq	2231c <__assert_fail@plt+0x10290>
   22240:	ldr	r1, [r4, #8]
   22244:	ldr	r2, [r4, #24]
   22248:	mov	r0, sl
   2224c:	blx	r2
   22250:	mov	r7, r0
   22254:	ldr	r0, [r4, #8]
   22258:	cmp	r7, r0
   2225c:	bcs	22388 <__assert_fail@plt+0x102fc>
   22260:	ldr	r5, [r4]
   22264:	mov	r9, r5
   22268:	ldr	r1, [r9, r7, lsl #3]!
   2226c:	cmp	r1, #0
   22270:	beq	222c8 <__assert_fail@plt+0x1023c>
   22274:	cmp	r1, sl
   22278:	mov	r0, sl
   2227c:	beq	22298 <__assert_fail@plt+0x1020c>
   22280:	ldr	r2, [r4, #28]
   22284:	mov	r0, sl
   22288:	blx	r2
   2228c:	cmp	r0, #0
   22290:	beq	22338 <__assert_fail@plt+0x102ac>
   22294:	ldr	r0, [r9]
   22298:	cmp	r0, #0
   2229c:	bne	22388 <__assert_fail@plt+0x102fc>
   222a0:	ldr	r0, [r9]
   222a4:	cmp	r0, #0
   222a8:	beq	222c8 <__assert_fail@plt+0x1023c>
   222ac:	ldr	r0, [r4, #36]	; 0x24
   222b0:	cmp	r0, #0
   222b4:	beq	222e8 <__assert_fail@plt+0x1025c>
   222b8:	mov	r1, r0
   222bc:	ldr	r2, [r1, #4]!
   222c0:	str	r2, [r4, #36]	; 0x24
   222c4:	b	222fc <__assert_fail@plt+0x10270>
   222c8:	str	sl, [r9]
   222cc:	ldr	r0, [r4, #12]
   222d0:	ldr	r1, [r4, #16]
   222d4:	add	r0, r0, #1
   222d8:	add	r1, r1, #1
   222dc:	str	r0, [r4, #12]
   222e0:	str	r1, [r4, #16]
   222e4:	b	22318 <__assert_fail@plt+0x1028c>
   222e8:	mov	r0, #8
   222ec:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   222f0:	cmp	r0, #0
   222f4:	beq	22328 <__assert_fail@plt+0x1029c>
   222f8:	add	r1, r0, #4
   222fc:	str	sl, [r0]
   22300:	ldr	r2, [r9, #4]
   22304:	str	r2, [r1]
   22308:	str	r0, [r9, #4]
   2230c:	ldr	r0, [r4, #16]
   22310:	add	r0, r0, #1
   22314:	str	r0, [r4, #16]
   22318:	mov	r7, #1
   2231c:	mov	r0, r7
   22320:	sub	sp, fp, #28
   22324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22328:	mvn	r7, #0
   2232c:	mov	r0, r7
   22330:	sub	sp, fp, #28
   22334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22338:	add	r6, r5, r7, lsl #3
   2233c:	ldr	r0, [r6, #4]!
   22340:	cmp	r0, #0
   22344:	beq	222a0 <__assert_fail@plt+0x10214>
   22348:	ldr	r1, [r0]
   2234c:	cmp	r1, sl
   22350:	beq	2237c <__assert_fail@plt+0x102f0>
   22354:	ldr	r2, [r4, #28]
   22358:	mov	r0, sl
   2235c:	blx	r2
   22360:	ldr	r6, [r6]
   22364:	cmp	r0, #0
   22368:	beq	2233c <__assert_fail@plt+0x102b0>
   2236c:	ldr	r0, [r6]
   22370:	cmp	r0, #0
   22374:	beq	222a0 <__assert_fail@plt+0x10214>
   22378:	b	22388 <__assert_fail@plt+0x102fc>
   2237c:	mov	r0, sl
   22380:	cmp	r0, #0
   22384:	beq	222a0 <__assert_fail@plt+0x10214>
   22388:	bl	12038 <abort@plt>
   2238c:	stclcc	12, cr12, [ip, #820]	; 0x334
   22390:	svccc	0x00666666
   22394:	svccc	0x008ccccd
   22398:	svccc	0x004ccccd
   2239c:	svcmi	0x00800000
   223a0:	push	{r4, sl, fp, lr}
   223a4:	add	fp, sp, #8
   223a8:	sub	sp, sp, #8
   223ac:	add	r2, sp, #4
   223b0:	mov	r4, r1
   223b4:	bl	22034 <__assert_fail@plt+0xffa8>
   223b8:	cmn	r0, #1
   223bc:	beq	223d8 <__assert_fail@plt+0x1034c>
   223c0:	ldr	r1, [sp, #4]
   223c4:	cmp	r0, #0
   223c8:	moveq	r4, r1
   223cc:	mov	r0, r4
   223d0:	sub	sp, fp, #8
   223d4:	pop	{r4, sl, fp, pc}
   223d8:	mov	r4, #0
   223dc:	mov	r0, r4
   223e0:	sub	sp, fp, #8
   223e4:	pop	{r4, sl, fp, pc}
   223e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   223ec:	add	fp, sp, #24
   223f0:	mov	r9, r1
   223f4:	ldr	r1, [r0, #8]
   223f8:	ldr	r2, [r0, #24]
   223fc:	mov	r5, r0
   22400:	mov	r0, r9
   22404:	blx	r2
   22408:	mov	r7, r0
   2240c:	ldr	r0, [r5, #8]
   22410:	cmp	r7, r0
   22414:	bcs	22684 <__assert_fail@plt+0x105f8>
   22418:	ldr	r6, [r5]
   2241c:	mov	r8, #0
   22420:	mov	r4, r6
   22424:	ldr	r1, [r4, r7, lsl #3]!
   22428:	cmp	r1, #0
   2242c:	beq	224e0 <__assert_fail@plt+0x10454>
   22430:	cmp	r1, r9
   22434:	beq	22450 <__assert_fail@plt+0x103c4>
   22438:	ldr	r2, [r5, #28]
   2243c:	mov	r0, r9
   22440:	blx	r2
   22444:	cmp	r0, #0
   22448:	beq	22488 <__assert_fail@plt+0x103fc>
   2244c:	ldr	r9, [r4]
   22450:	add	r0, r6, r7, lsl #3
   22454:	ldr	r0, [r0, #4]
   22458:	cmp	r0, #0
   2245c:	beq	224d0 <__assert_fail@plt+0x10444>
   22460:	ldm	r0, {r1, r2}
   22464:	stm	r4, {r1, r2}
   22468:	mov	r1, #0
   2246c:	str	r1, [r0]
   22470:	ldr	r1, [r5, #36]	; 0x24
   22474:	str	r1, [r0, #4]
   22478:	str	r0, [r5, #36]	; 0x24
   2247c:	cmp	r9, #0
   22480:	bne	22518 <__assert_fail@plt+0x1048c>
   22484:	b	224e0 <__assert_fail@plt+0x10454>
   22488:	add	r7, r6, r7, lsl #3
   2248c:	ldr	r0, [r7, #4]!
   22490:	cmp	r0, #0
   22494:	beq	224e0 <__assert_fail@plt+0x10454>
   22498:	ldr	r1, [r0]
   2249c:	cmp	r1, r9
   224a0:	beq	224e8 <__assert_fail@plt+0x1045c>
   224a4:	ldr	r2, [r5, #28]
   224a8:	mov	r0, r9
   224ac:	blx	r2
   224b0:	ldr	r1, [r7]
   224b4:	cmp	r0, #0
   224b8:	bne	224f0 <__assert_fail@plt+0x10464>
   224bc:	ldr	r0, [r1, #4]!
   224c0:	cmp	r0, #0
   224c4:	mov	r7, r1
   224c8:	bne	22498 <__assert_fail@plt+0x1040c>
   224cc:	b	224e0 <__assert_fail@plt+0x10454>
   224d0:	mov	r0, #0
   224d4:	str	r0, [r4]
   224d8:	cmp	r9, #0
   224dc:	bne	22518 <__assert_fail@plt+0x1048c>
   224e0:	mov	r0, r8
   224e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   224e8:	mov	r1, r0
   224ec:	b	224f4 <__assert_fail@plt+0x10468>
   224f0:	ldr	r9, [r1]
   224f4:	ldr	r0, [r1, #4]
   224f8:	str	r0, [r7]
   224fc:	mov	r0, #0
   22500:	str	r0, [r1]
   22504:	ldr	r0, [r5, #36]	; 0x24
   22508:	str	r0, [r1, #4]
   2250c:	str	r1, [r5, #36]	; 0x24
   22510:	cmp	r9, #0
   22514:	beq	224e0 <__assert_fail@plt+0x10454>
   22518:	ldr	r0, [r5, #16]
   2251c:	sub	r0, r0, #1
   22520:	str	r0, [r5, #16]
   22524:	ldr	r0, [r4]
   22528:	cmp	r0, #0
   2252c:	bne	22644 <__assert_fail@plt+0x105b8>
   22530:	ldr	r0, [r5, #12]
   22534:	vldr	s0, [r5, #8]
   22538:	sub	r1, r0, #1
   2253c:	str	r1, [r5, #12]
   22540:	vmov	s2, r1
   22544:	ldr	r0, [r5, #20]
   22548:	vcvt.f32.u32	s0, s0
   2254c:	vcvt.f32.u32	s2, s2
   22550:	vldr	s4, [r0]
   22554:	vmul.f32	s6, s4, s0
   22558:	vcmpe.f32	s6, s2
   2255c:	vmrs	APSR_nzcv, fpscr
   22560:	ble	22644 <__assert_fail@plt+0x105b8>
   22564:	movw	r1, #62984	; 0xf608
   22568:	movt	r1, #2
   2256c:	cmp	r0, r1
   22570:	beq	225d8 <__assert_fail@plt+0x1054c>
   22574:	vldr	s8, [pc, #268]	; 22688 <__assert_fail@plt+0x105fc>
   22578:	vldr	s6, [r0, #8]
   2257c:	vcmpe.f32	s6, s8
   22580:	vmrs	APSR_nzcv, fpscr
   22584:	ble	225b4 <__assert_fail@plt+0x10528>
   22588:	vldr	s10, [pc, #252]	; 2268c <__assert_fail@plt+0x10600>
   2258c:	vcmpe.f32	s6, s10
   22590:	vmrs	APSR_nzcv, fpscr
   22594:	bpl	225b4 <__assert_fail@plt+0x10528>
   22598:	vcmpe.f32	s4, #0.0
   2259c:	vmrs	APSR_nzcv, fpscr
   225a0:	vldrge	s10, [r0, #12]
   225a4:	vldrge	s12, [pc, #228]	; 22690 <__assert_fail@plt+0x10604>
   225a8:	vcmpege.f32	s10, s12
   225ac:	vmrsge	APSR_nzcv, fpscr
   225b0:	bgt	22650 <__assert_fail@plt+0x105c4>
   225b4:	vldr	s4, [pc, #216]	; 22694 <__assert_fail@plt+0x10608>
   225b8:	movw	r0, #62984	; 0xf608
   225bc:	movt	r0, #2
   225c0:	str	r0, [r5, #20]
   225c4:	vmul.f32	s4, s4, s0
   225c8:	vcmpe.f32	s4, s2
   225cc:	vmrs	APSR_nzcv, fpscr
   225d0:	bgt	225ec <__assert_fail@plt+0x10560>
   225d4:	b	22644 <__assert_fail@plt+0x105b8>
   225d8:	mov	r0, r1
   225dc:	vmul.f32	s4, s4, s0
   225e0:	vcmpe.f32	s4, s2
   225e4:	vmrs	APSR_nzcv, fpscr
   225e8:	ble	22644 <__assert_fail@plt+0x105b8>
   225ec:	ldrb	r1, [r0, #16]
   225f0:	vldr	s2, [r0, #4]
   225f4:	cmp	r1, #0
   225f8:	vmul.f32	s0, s2, s0
   225fc:	vldreq	s2, [r0, #8]
   22600:	mov	r0, r5
   22604:	vmuleq.f32	s0, s0, s2
   22608:	vcvt.u32.f32	s0, s0
   2260c:	vmov	r1, s0
   22610:	bl	21b84 <__assert_fail@plt+0xfaf8>
   22614:	cmp	r0, #0
   22618:	bne	22644 <__assert_fail@plt+0x105b8>
   2261c:	ldr	r0, [r5, #36]	; 0x24
   22620:	cmp	r0, #0
   22624:	beq	2263c <__assert_fail@plt+0x105b0>
   22628:	ldr	r4, [r0, #4]
   2262c:	bl	21218 <__assert_fail@plt+0xf18c>
   22630:	cmp	r4, #0
   22634:	mov	r0, r4
   22638:	bne	22628 <__assert_fail@plt+0x1059c>
   2263c:	mov	r0, #0
   22640:	str	r0, [r5, #36]	; 0x24
   22644:	mov	r8, r9
   22648:	mov	r0, r8
   2264c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22650:	vadd.f32	s8, s4, s8
   22654:	vcmpe.f32	s8, s6
   22658:	vmrs	APSR_nzcv, fpscr
   2265c:	bpl	225b4 <__assert_fail@plt+0x10528>
   22660:	vldr	s6, [r0, #4]
   22664:	vmov.f32	s10, #112	; 0x3f800000  1.0
   22668:	vcmpe.f32	s6, s10
   2266c:	vmrs	APSR_nzcv, fpscr
   22670:	bhi	225b4 <__assert_fail@plt+0x10528>
   22674:	vcmpe.f32	s8, s6
   22678:	vmrs	APSR_nzcv, fpscr
   2267c:	bmi	225dc <__assert_fail@plt+0x10550>
   22680:	b	225b4 <__assert_fail@plt+0x10528>
   22684:	bl	12038 <abort@plt>
   22688:	stclcc	12, cr12, [ip, #820]	; 0x334
   2268c:	svccc	0x00666666
   22690:	svccc	0x008ccccd
   22694:	andeq	r0, r0, r0
   22698:	b	223e8 <__assert_fail@plt+0x1035c>
   2269c:	push	{r4, r5, fp, lr}
   226a0:	add	fp, sp, #8
   226a4:	mov	r5, r0
   226a8:	ldr	r0, [r0]
   226ac:	mov	r4, r1
   226b0:	bl	2af84 <_obstack_memory_used@@Base+0x4c00>
   226b4:	ldrd	r2, [r5, #8]
   226b8:	eor	r0, r2, r0
   226bc:	mov	r1, r3
   226c0:	mov	r2, r4
   226c4:	mov	r3, #0
   226c8:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   226cc:	mov	r0, r2
   226d0:	pop	{r4, r5, fp, pc}
   226d4:	push	{r4, r5, r6, r7, fp, lr}
   226d8:	add	fp, sp, #16
   226dc:	ldrd	r2, [r1, #8]
   226e0:	ldrd	r4, [r0, #8]
   226e4:	eor	r3, r5, r3
   226e8:	eor	r2, r4, r2
   226ec:	orrs	r2, r2, r3
   226f0:	mov	r2, #0
   226f4:	bne	22724 <__assert_fail@plt+0x10698>
   226f8:	ldrd	r4, [r1, #16]
   226fc:	ldrd	r6, [r0, #16]
   22700:	eor	r3, r7, r5
   22704:	eor	r7, r6, r4
   22708:	orrs	r3, r7, r3
   2270c:	bne	22724 <__assert_fail@plt+0x10698>
   22710:	ldr	r1, [r1]
   22714:	ldr	r0, [r0]
   22718:	bl	11bd0 <strcmp@plt>
   2271c:	clz	r0, r0
   22720:	lsr	r2, r0, #5
   22724:	mov	r0, r2
   22728:	pop	{r4, r5, r6, r7, fp, pc}
   2272c:	push	{r4, sl, fp, lr}
   22730:	add	fp, sp, #8
   22734:	mov	r4, r0
   22738:	ldr	r0, [r0]
   2273c:	bl	21218 <__assert_fail@plt+0xf18c>
   22740:	mov	r0, r4
   22744:	pop	{r4, sl, fp, lr}
   22748:	b	21218 <__assert_fail@plt+0xf18c>
   2274c:	andeq	r0, r0, r0
   22750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22754:	add	fp, sp, #28
   22758:	sub	sp, sp, #4
   2275c:	vpush	{d8-d9}
   22760:	sub	sp, sp, #104	; 0x68
   22764:	mov	r7, r3
   22768:	mov	r6, r2
   2276c:	mov	r9, r1
   22770:	str	r0, [sp, #44]	; 0x2c
   22774:	bl	11fa8 <localeconv@plt>
   22778:	ldr	r5, [r0]
   2277c:	mov	r4, r0
   22780:	mov	r0, r5
   22784:	bl	11eac <strlen@plt>
   22788:	movw	r2, #62866	; 0xf592
   2278c:	sub	r1, r0, #1
   22790:	cmp	r1, #16
   22794:	movt	r2, #2
   22798:	movcc	r2, r5
   2279c:	ldr	r5, [r4, #4]
   227a0:	ldr	r4, [r4, #8]
   227a4:	movcs	r0, #1
   227a8:	str	r0, [sp, #16]
   227ac:	str	r2, [sp, #12]
   227b0:	mov	r0, r5
   227b4:	bl	11eac <strlen@plt>
   227b8:	movw	r3, #56125	; 0xdb3d
   227bc:	cmp	r0, #17
   227c0:	movw	r0, #647	; 0x287
   227c4:	ldr	r2, [fp, #16]
   227c8:	ldr	sl, [fp, #8]
   227cc:	ldr	r8, [fp, #12]
   227d0:	str	r6, [sp, #28]
   227d4:	str	r7, [sp, #36]	; 0x24
   227d8:	str	r4, [sp, #20]
   227dc:	movt	r3, #2
   227e0:	add	r1, r6, r0
   227e4:	movcc	r3, r5
   227e8:	ands	r0, r7, #32
   227ec:	ldr	r5, [fp, #20]
   227f0:	str	r1, [sp, #32]
   227f4:	str	r0, [sp, #24]
   227f8:	mov	r0, #1000	; 0x3e8
   227fc:	str	r3, [sp, #52]	; 0x34
   22800:	movwne	r0, #1024	; 0x400
   22804:	str	r0, [sp, #40]	; 0x28
   22808:	and	r0, r7, #3
   2280c:	str	r0, [sp, #48]	; 0x30
   22810:	subs	r0, sl, r2
   22814:	sbcs	r0, r8, r5
   22818:	bcs	2290c <__assert_fail@plt+0x10880>
   2281c:	orrs	r0, sl, r8
   22820:	mov	r4, r9
   22824:	beq	229f4 <__assert_fail@plt+0x10968>
   22828:	ldr	r5, [fp, #20]
   2282c:	mov	r0, r2
   22830:	mov	r2, sl
   22834:	mov	r3, r8
   22838:	mov	r1, r5
   2283c:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   22840:	ldr	r2, [fp, #16]
   22844:	mov	r6, r0
   22848:	mov	r3, r1
   2284c:	umull	r0, r1, r0, sl
   22850:	mla	r1, r6, r8, r1
   22854:	mla	r1, r3, sl, r1
   22858:	subs	r0, r2, r0
   2285c:	sbc	r1, r5, r1
   22860:	orrs	r0, r0, r1
   22864:	bne	229f4 <__assert_fail@plt+0x10968>
   22868:	ldr	r5, [sp, #44]	; 0x2c
   2286c:	mov	r1, r4
   22870:	mov	r2, r6
   22874:	mov	r8, r3
   22878:	mov	r0, r5
   2287c:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   22880:	mov	r7, r0
   22884:	mov	r9, r1
   22888:	umull	r0, r1, r0, r6
   2288c:	mov	r2, #10
   22890:	mov	r3, r8
   22894:	mla	r1, r7, r8, r1
   22898:	subs	r0, r5, r0
   2289c:	mla	r1, r9, r6, r1
   228a0:	umull	sl, r0, r0, r2
   228a4:	mov	r2, r6
   228a8:	sbc	r1, r4, r1
   228ac:	add	r1, r1, r1, lsl #2
   228b0:	add	r5, r0, r1, lsl #1
   228b4:	mov	r0, sl
   228b8:	mov	r1, r5
   228bc:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   228c0:	mov	r4, r0
   228c4:	umull	r0, r2, r0, r6
   228c8:	mla	r2, r4, r8, r2
   228cc:	subs	r0, sl, r0
   228d0:	mla	r1, r1, r6, r2
   228d4:	mov	r2, #2
   228d8:	sbc	r1, r5, r1
   228dc:	subs	r3, r6, r0, lsl #1
   228e0:	lsl	r1, r1, #1
   228e4:	orr	r1, r1, r0, lsr #31
   228e8:	sbcs	r3, r8, r1
   228ec:	orr	r5, r1, r0, lsl #1
   228f0:	movwcc	r2, #3
   228f4:	cmp	r5, #0
   228f8:	movwne	r5, #1
   228fc:	rsbs	r0, r6, r0, lsl #1
   22900:	sbcs	r0, r1, r8
   22904:	movcs	r5, r2
   22908:	b	22984 <__assert_fail@plt+0x108f8>
   2290c:	mov	r0, sl
   22910:	mov	r1, r8
   22914:	mov	r3, r5
   22918:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   2291c:	ldr	r2, [fp, #16]
   22920:	mov	r6, r0
   22924:	mov	r3, r1
   22928:	mov	r4, r9
   2292c:	umull	r0, r1, r0, r2
   22930:	mla	r1, r6, r5, r1
   22934:	subs	r0, sl, r0
   22938:	mla	r1, r3, r2, r1
   2293c:	sbc	r1, r8, r1
   22940:	orrs	r0, r0, r1
   22944:	bne	229f4 <__assert_fail@plt+0x10968>
   22948:	ldr	r5, [sp, #44]	; 0x2c
   2294c:	mov	r2, r6
   22950:	umull	r7, r0, r6, r5
   22954:	mla	r0, r6, r4, r0
   22958:	mla	r9, r3, r5, r0
   2295c:	mov	r0, r7
   22960:	mov	r1, r9
   22964:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   22968:	ldr	r2, [fp, #16]
   2296c:	eor	r1, r1, r4
   22970:	eor	r0, r0, r5
   22974:	orrs	r0, r0, r1
   22978:	bne	229f4 <__assert_fail@plt+0x10968>
   2297c:	mov	r5, #0
   22980:	mov	r4, #0
   22984:	ldr	r0, [sp, #36]	; 0x24
   22988:	ldr	r2, [sp, #40]	; 0x28
   2298c:	mvn	r6, #0
   22990:	ands	r8, r0, #16
   22994:	beq	229a8 <__assert_fail@plt+0x1091c>
   22998:	subs	r0, r7, r2
   2299c:	mov	r6, #0
   229a0:	sbcs	r0, r9, #0
   229a4:	bcs	22cf0 <__assert_fail@plt+0x10c64>
   229a8:	ldr	r0, [sp, #32]
   229ac:	mov	sl, r7
   229b0:	str	r0, [sp, #44]	; 0x2c
   229b4:	ldr	r0, [sp, #48]	; 0x30
   229b8:	cmp	r0, #0
   229bc:	beq	22e3c <__assert_fail@plt+0x10db0>
   229c0:	cmp	r0, #1
   229c4:	bne	22ce4 <__assert_fail@plt+0x10c58>
   229c8:	rsbs	r1, r5, #0
   229cc:	mov	r0, #0
   229d0:	and	r3, sl, #1
   229d4:	ldr	r5, [sp, #44]	; 0x2c
   229d8:	sbc	r0, r0, #0
   229dc:	eor	r1, r3, r1
   229e0:	orrs	r0, r1, r0
   229e4:	addne	r4, r4, #1
   229e8:	cmp	r4, #5
   229ec:	bgt	22e4c <__assert_fail@plt+0x10dc0>
   229f0:	b	22ea0 <__assert_fail@plt+0x10e14>
   229f4:	ldr	r9, [fp, #20]
   229f8:	mov	r0, r2
   229fc:	mov	r1, r9
   22a00:	bl	2b388 <_obstack_memory_used@@Base+0x5004>
   22a04:	vmov	d8, r0, r1
   22a08:	ldr	r0, [sp, #44]	; 0x2c
   22a0c:	mov	r1, r4
   22a10:	bl	2b388 <_obstack_memory_used@@Base+0x5004>
   22a14:	mov	r6, r0
   22a18:	mov	r7, r1
   22a1c:	mov	r0, sl
   22a20:	mov	r1, r8
   22a24:	bl	2b388 <_obstack_memory_used@@Base+0x5004>
   22a28:	vmov	d17, r6, r7
   22a2c:	ldr	r7, [sp, #36]	; 0x24
   22a30:	vmov	d16, r0, r1
   22a34:	vdiv.f64	d16, d16, d8
   22a38:	vmul.f64	d8, d16, d17
   22a3c:	tst	r7, #16
   22a40:	bne	22ab4 <__assert_fail@plt+0x10a28>
   22a44:	ldr	r0, [sp, #48]	; 0x30
   22a48:	ldr	sl, [sp, #28]
   22a4c:	cmp	r0, #1
   22a50:	beq	22c3c <__assert_fail@plt+0x10bb0>
   22a54:	vldr	d16, [pc, #964]	; 22e20 <__assert_fail@plt+0x10d94>
   22a58:	ldr	r8, [sp, #32]
   22a5c:	vcmpe.f64	d8, d16
   22a60:	vmrs	APSR_nzcv, fpscr
   22a64:	bpl	22c40 <__assert_fail@plt+0x10bb4>
   22a68:	mov	r6, r0
   22a6c:	vmov	r0, r1, d8
   22a70:	bl	2b520 <_obstack_memory_used@@Base+0x519c>
   22a74:	mov	r4, r0
   22a78:	mov	r5, r1
   22a7c:	bl	2b388 <_obstack_memory_used@@Base+0x5004>
   22a80:	vmov	d16, r0, r1
   22a84:	clz	r0, r6
   22a88:	mov	r2, #0
   22a8c:	vcmp.f64	d8, d16
   22a90:	lsr	r0, r0, #5
   22a94:	vmrs	APSR_nzcv, fpscr
   22a98:	movwne	r2, #1
   22a9c:	and	r0, r0, r2
   22aa0:	adds	r0, r0, r4
   22aa4:	adc	r1, r5, #0
   22aa8:	bl	2b388 <_obstack_memory_used@@Base+0x5004>
   22aac:	vmov	d8, r0, r1
   22ab0:	b	22c40 <__assert_fail@plt+0x10bb4>
   22ab4:	ldr	r0, [sp, #40]	; 0x28
   22ab8:	vmov.f64	d16, #112	; 0x3f800000  1.0
   22abc:	mov	r6, #0
   22ac0:	vmov	s0, r0
   22ac4:	vcvt.f64.u32	d17, s0
   22ac8:	ldr	sl, [sp, #28]
   22acc:	add	r6, r6, #1
   22ad0:	vmul.f64	d16, d16, d17
   22ad4:	cmp	r6, #7
   22ad8:	vmulls.f64	d18, d16, d17
   22adc:	vcmpels.f64	d18, d8
   22ae0:	vmrsls	APSR_nzcv, fpscr
   22ae4:	bls	22acc <__assert_fail@plt+0x10a40>
   22ae8:	ldr	r0, [sp, #48]	; 0x30
   22aec:	ldr	r8, [sp, #32]
   22af0:	ldr	r5, [sp, #16]
   22af4:	vdiv.f64	d8, d8, d16
   22af8:	vmov.f64	d16, d8
   22afc:	cmp	r0, #1
   22b00:	beq	22b64 <__assert_fail@plt+0x10ad8>
   22b04:	vldr	d16, [pc, #788]	; 22e20 <__assert_fail@plt+0x10d94>
   22b08:	vcmpe.f64	d8, d16
   22b0c:	vmov.f64	d16, d8
   22b10:	vmrs	APSR_nzcv, fpscr
   22b14:	bpl	22b64 <__assert_fail@plt+0x10ad8>
   22b18:	vmov	r0, r1, d8
   22b1c:	bl	2b520 <_obstack_memory_used@@Base+0x519c>
   22b20:	mov	r4, r0
   22b24:	mov	r5, r1
   22b28:	bl	2b388 <_obstack_memory_used@@Base+0x5004>
   22b2c:	vmov	d16, r0, r1
   22b30:	ldr	r0, [sp, #48]	; 0x30
   22b34:	mov	r2, #0
   22b38:	vcmp.f64	d8, d16
   22b3c:	vmrs	APSR_nzcv, fpscr
   22b40:	movwne	r2, #1
   22b44:	clz	r0, r0
   22b48:	lsr	r0, r0, #5
   22b4c:	and	r0, r0, r2
   22b50:	adds	r0, r0, r4
   22b54:	adc	r1, r5, #0
   22b58:	ldr	r5, [sp, #16]
   22b5c:	bl	2b388 <_obstack_memory_used@@Base+0x5004>
   22b60:	vmov	d16, r0, r1
   22b64:	movw	r3, #63010	; 0xf622
   22b68:	mov	r0, sl
   22b6c:	mov	r1, #1
   22b70:	mvn	r2, #0
   22b74:	vstr	d16, [sp]
   22b78:	movt	r3, #2
   22b7c:	bl	11edc <__sprintf_chk@plt>
   22b80:	ldr	r1, [sp, #24]
   22b84:	mov	r0, #3
   22b88:	cmp	r1, #0
   22b8c:	movwne	r0, #2
   22b90:	add	r4, r0, r5
   22b94:	mov	r0, sl
   22b98:	bl	11eac <strlen@plt>
   22b9c:	cmp	r4, r0
   22ba0:	bcc	22bc4 <__assert_fail@plt+0x10b38>
   22ba4:	mov	r2, r0
   22ba8:	add	r5, r5, #1
   22bac:	tst	r7, #8
   22bb0:	beq	22c70 <__assert_fail@plt+0x10be4>
   22bb4:	add	r0, sl, r2
   22bb8:	ldrb	r0, [r0, #-1]
   22bbc:	cmp	r0, #48	; 0x30
   22bc0:	bne	22c70 <__assert_fail@plt+0x10be4>
   22bc4:	ldr	r0, [sp, #48]	; 0x30
   22bc8:	vmov.f64	d9, #36	; 0x41200000  10.0
   22bcc:	vmul.f64	d8, d8, d9
   22bd0:	cmp	r0, #1
   22bd4:	beq	22c30 <__assert_fail@plt+0x10ba4>
   22bd8:	vldr	d16, [pc, #576]	; 22e20 <__assert_fail@plt+0x10d94>
   22bdc:	vcmpe.f64	d8, d16
   22be0:	vmrs	APSR_nzcv, fpscr
   22be4:	bpl	22c30 <__assert_fail@plt+0x10ba4>
   22be8:	vmov	r0, r1, d8
   22bec:	bl	2b520 <_obstack_memory_used@@Base+0x519c>
   22bf0:	mov	r4, r0
   22bf4:	mov	r5, r1
   22bf8:	bl	2b388 <_obstack_memory_used@@Base+0x5004>
   22bfc:	vmov	d16, r0, r1
   22c00:	ldr	r0, [sp, #48]	; 0x30
   22c04:	mov	r2, #0
   22c08:	vcmp.f64	d8, d16
   22c0c:	vmrs	APSR_nzcv, fpscr
   22c10:	movwne	r2, #1
   22c14:	clz	r0, r0
   22c18:	lsr	r0, r0, #5
   22c1c:	and	r0, r0, r2
   22c20:	adds	r0, r0, r4
   22c24:	adc	r1, r5, #0
   22c28:	bl	2b388 <_obstack_memory_used@@Base+0x5004>
   22c2c:	vmov	d8, r0, r1
   22c30:	vdiv.f64	d16, d8, d9
   22c34:	vstr	d16, [sp]
   22c38:	b	22c48 <__assert_fail@plt+0x10bbc>
   22c3c:	ldr	r8, [sp, #32]
   22c40:	mvn	r6, #0
   22c44:	vstr	d8, [sp]
   22c48:	movw	r3, #63004	; 0xf61c
   22c4c:	mov	r0, sl
   22c50:	mov	r1, #1
   22c54:	mvn	r2, #0
   22c58:	movt	r3, #2
   22c5c:	bl	11edc <__sprintf_chk@plt>
   22c60:	mov	r0, sl
   22c64:	bl	11eac <strlen@plt>
   22c68:	mov	r2, r0
   22c6c:	mov	r5, #0
   22c70:	sub	r4, r8, r2
   22c74:	mov	r1, sl
   22c78:	mov	r0, r4
   22c7c:	bl	11c24 <memmove@plt>
   22c80:	sub	r5, r8, r5
   22c84:	tst	r7, #4
   22c88:	bne	22ef4 <__assert_fail@plt+0x10e68>
   22c8c:	ldr	r3, [sp, #40]	; 0x28
   22c90:	ldr	r5, [fp, #16]
   22c94:	tst	r7, #128	; 0x80
   22c98:	beq	23010 <__assert_fail@plt+0x10f84>
   22c9c:	cmn	r6, #1
   22ca0:	bgt	22db0 <__assert_fail@plt+0x10d24>
   22ca4:	subs	r0, r5, #2
   22ca8:	mov	r6, #0
   22cac:	sbcs	r0, r9, #0
   22cb0:	bcc	22db0 <__assert_fail@plt+0x10d24>
   22cb4:	mov	r0, #0
   22cb8:	mov	r1, #1
   22cbc:	mov	r6, #0
   22cc0:	cmp	r6, #7
   22cc4:	beq	22dac <__assert_fail@plt+0x10d20>
   22cc8:	umull	r1, r2, r1, r3
   22ccc:	add	r6, r6, #1
   22cd0:	mla	r0, r0, r3, r2
   22cd4:	subs	r2, r1, r5
   22cd8:	sbcs	r2, r0, r9
   22cdc:	bcc	22cc0 <__assert_fail@plt+0x10c34>
   22ce0:	b	22db0 <__assert_fail@plt+0x10d24>
   22ce4:	ldr	r8, [sp, #32]
   22ce8:	ldr	r5, [sp, #44]	; 0x2c
   22cec:	b	22ea4 <__assert_fail@plt+0x10e18>
   22cf0:	mov	r6, #0
   22cf4:	mov	r0, r7
   22cf8:	mov	r1, r9
   22cfc:	mov	r3, #0
   22d00:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   22d04:	ldr	r2, [sp, #40]	; 0x28
   22d08:	mov	sl, r0
   22d0c:	mov	r9, r1
   22d10:	mls	r0, r0, r2, r7
   22d14:	add	r0, r0, r0, lsl #2
   22d18:	add	r0, r4, r0, lsl #1
   22d1c:	udiv	r4, r0, r2
   22d20:	mls	r0, r4, r2, r0
   22d24:	lsl	r0, r0, #1
   22d28:	add	r0, r0, r5, lsr #1
   22d2c:	cmp	r0, r2
   22d30:	bcs	22d54 <__assert_fail@plt+0x10cc8>
   22d34:	add	r1, r0, r5
   22d38:	cmn	r0, r5
   22d3c:	movwne	r1, #1
   22d40:	mov	r5, r1
   22d44:	add	r6, r6, #1
   22d48:	cmp	r6, #7
   22d4c:	bls	22d70 <__assert_fail@plt+0x10ce4>
   22d50:	b	22d80 <__assert_fail@plt+0x10cf4>
   22d54:	add	r0, r0, r5
   22d58:	mov	r5, #2
   22d5c:	cmp	r2, r0
   22d60:	movwcc	r5, #3
   22d64:	add	r6, r6, #1
   22d68:	cmp	r6, #7
   22d6c:	bhi	22d80 <__assert_fail@plt+0x10cf4>
   22d70:	subs	r0, sl, r2
   22d74:	mov	r7, sl
   22d78:	sbcs	r0, r9, #0
   22d7c:	bcs	22cf4 <__assert_fail@plt+0x10c68>
   22d80:	rsbs	r0, sl, #9
   22d84:	rscs	r0, r9, #0
   22d88:	bcc	22e28 <__assert_fail@plt+0x10d9c>
   22d8c:	ldr	r0, [sp, #48]	; 0x30
   22d90:	cmp	r0, #1
   22d94:	bne	2302c <__assert_fail@plt+0x10fa0>
   22d98:	and	r0, r4, #1
   22d9c:	add	r0, r5, r0
   22da0:	cmp	r0, #2
   22da4:	bhi	2303c <__assert_fail@plt+0x10fb0>
   22da8:	b	23070 <__assert_fail@plt+0x10fe4>
   22dac:	mov	r6, #8
   22db0:	and	r0, r7, #256	; 0x100
   22db4:	tst	r7, #64	; 0x40
   22db8:	orrsne	r1, r6, r0
   22dbc:	movne	r1, #32
   22dc0:	addne	r8, sl, #648	; 0x288
   22dc4:	strbne	r1, [sl, #647]	; 0x287
   22dc8:	cmp	r6, #0
   22dcc:	beq	22df4 <__assert_fail@plt+0x10d68>
   22dd0:	ldr	r1, [sp, #24]
   22dd4:	cmp	r1, #0
   22dd8:	moveq	r1, #107	; 0x6b
   22ddc:	cmpeq	r6, #1
   22de0:	beq	22df0 <__assert_fail@plt+0x10d64>
   22de4:	movw	r1, #63060	; 0xf654
   22de8:	movt	r1, #2
   22dec:	ldrb	r1, [r1, r6]
   22df0:	strb	r1, [r8], #1
   22df4:	cmp	r0, #0
   22df8:	beq	23010 <__assert_fail@plt+0x10f84>
   22dfc:	ldr	r0, [sp, #24]
   22e00:	cmp	r0, #0
   22e04:	cmpne	r6, #0
   22e08:	movne	r0, #105	; 0x69
   22e0c:	strbne	r0, [r8], #1
   22e10:	mov	r0, #66	; 0x42
   22e14:	strb	r0, [r8], #1
   22e18:	b	23010 <__assert_fail@plt+0x10f84>
   22e1c:	nop	{0}
   22e20:	andeq	r0, r0, r0
   22e24:	mvnsmi	r0, #0
   22e28:	ldr	r0, [sp, #32]
   22e2c:	str	r0, [sp, #44]	; 0x2c
   22e30:	ldr	r0, [sp, #48]	; 0x30
   22e34:	cmp	r0, #0
   22e38:	bne	229c0 <__assert_fail@plt+0x10934>
   22e3c:	add	r0, r4, r5
   22e40:	ldr	r5, [sp, #44]	; 0x2c
   22e44:	cmp	r0, #1
   22e48:	blt	22ea0 <__assert_fail@plt+0x10e14>
   22e4c:	adds	sl, sl, #1
   22e50:	adc	r9, r9, #0
   22e54:	cmp	r6, #7
   22e58:	bgt	22ea0 <__assert_fail@plt+0x10e14>
   22e5c:	cmp	r8, #0
   22e60:	beq	22ea0 <__assert_fail@plt+0x10e14>
   22e64:	eor	r0, sl, r2
   22e68:	orrs	r0, r0, r9
   22e6c:	ldreq	r0, [sp, #36]	; 0x24
   22e70:	addeq	r6, r6, #1
   22e74:	moveq	r9, #0
   22e78:	moveq	sl, #1
   22e7c:	tsteq	r0, #8
   22e80:	bne	22ea0 <__assert_fail@plt+0x10e14>
   22e84:	ldr	r2, [sp, #16]
   22e88:	mov	r0, #48	; 0x30
   22e8c:	ldr	r1, [sp, #12]
   22e90:	strb	r0, [r5, #-1]!
   22e94:	sub	r5, r5, r2
   22e98:	mov	r0, r5
   22e9c:	bl	11c60 <memcpy@plt>
   22ea0:	ldr	r8, [sp, #32]
   22ea4:	mov	r4, r5
   22ea8:	mov	r0, sl
   22eac:	mov	r1, r9
   22eb0:	mov	r2, #10
   22eb4:	mov	r3, #0
   22eb8:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   22ebc:	add	r2, r0, r0, lsl #2
   22ec0:	sub	r2, sl, r2, lsl #1
   22ec4:	orr	r2, r2, #48	; 0x30
   22ec8:	strb	r2, [r4, #-1]!
   22ecc:	rsbs	r2, sl, #9
   22ed0:	mov	sl, r0
   22ed4:	rscs	r2, r9, #0
   22ed8:	mov	r9, r1
   22edc:	bcc	22ea8 <__assert_fail@plt+0x10e1c>
   22ee0:	ldr	r7, [sp, #36]	; 0x24
   22ee4:	ldr	r9, [fp, #20]
   22ee8:	ldr	sl, [sp, #28]
   22eec:	tst	r7, #4
   22ef0:	beq	22c8c <__assert_fail@plt+0x10c00>
   22ef4:	ldr	r0, [sp, #52]	; 0x34
   22ef8:	mov	r7, r5
   22efc:	str	r6, [sp, #16]
   22f00:	sub	r5, r5, r4
   22f04:	bl	11eac <strlen@plt>
   22f08:	add	r8, sp, #56	; 0x38
   22f0c:	str	r0, [sp, #48]	; 0x30
   22f10:	mov	r1, r4
   22f14:	mov	r2, r5
   22f18:	mov	r0, r8
   22f1c:	bl	11c60 <memcpy@plt>
   22f20:	ldr	r0, [sp, #20]
   22f24:	ldrb	r6, [r0]
   22f28:	cmp	r6, #255	; 0xff
   22f2c:	mov	r9, r6
   22f30:	moveq	r9, r5
   22f34:	cmp	r6, #0
   22f38:	mvneq	r9, #0
   22f3c:	cmp	r9, r5
   22f40:	movhi	r9, r5
   22f44:	sub	r4, r7, r9
   22f48:	sub	r7, r5, r9
   22f4c:	mov	r2, r9
   22f50:	add	r1, r8, r7
   22f54:	mov	r0, r4
   22f58:	bl	11c60 <memcpy@plt>
   22f5c:	cmp	r7, #0
   22f60:	beq	22fec <__assert_fail@plt+0x10f60>
   22f64:	clz	r0, r6
   22f68:	ldr	r8, [sp, #20]
   22f6c:	lsr	sl, r0, #5
   22f70:	ldr	r0, [sp, #48]	; 0x30
   22f74:	rsb	r0, r0, #0
   22f78:	str	r0, [sp, #44]	; 0x2c
   22f7c:	ldr	r0, [sp, #44]	; 0x2c
   22f80:	ldr	r1, [sp, #52]	; 0x34
   22f84:	ldr	r2, [sp, #48]	; 0x30
   22f88:	add	r4, r4, r0
   22f8c:	mov	r0, r4
   22f90:	bl	11c60 <memcpy@plt>
   22f94:	tst	sl, #1
   22f98:	add	r0, sp, #56	; 0x38
   22f9c:	addeq	r8, r8, #1
   22fa0:	ldrb	r6, [r8]
   22fa4:	cmp	r6, #255	; 0xff
   22fa8:	mov	r5, r6
   22fac:	moveq	r5, r7
   22fb0:	cmp	r6, #0
   22fb4:	moveq	r5, r9
   22fb8:	cmp	r7, r5
   22fbc:	movcc	r5, r7
   22fc0:	sub	r7, r7, r5
   22fc4:	sub	r4, r4, r5
   22fc8:	mov	r2, r5
   22fcc:	add	r1, r0, r7
   22fd0:	mov	r0, r4
   22fd4:	bl	11c60 <memcpy@plt>
   22fd8:	clz	r0, r6
   22fdc:	cmp	r7, #0
   22fe0:	mov	r9, r5
   22fe4:	lsr	sl, r0, #5
   22fe8:	bne	22f7c <__assert_fail@plt+0x10ef0>
   22fec:	ldr	r8, [sp, #32]
   22ff0:	ldr	sl, [sp, #28]
   22ff4:	ldr	r7, [sp, #36]	; 0x24
   22ff8:	ldr	r3, [sp, #40]	; 0x28
   22ffc:	ldr	r9, [fp, #20]
   23000:	ldr	r5, [fp, #16]
   23004:	ldr	r6, [sp, #16]
   23008:	tst	r7, #128	; 0x80
   2300c:	bne	22c9c <__assert_fail@plt+0x10c10>
   23010:	mov	r0, #0
   23014:	strb	r0, [r8]
   23018:	mov	r0, r4
   2301c:	sub	sp, fp, #48	; 0x30
   23020:	vpop	{d8-d9}
   23024:	add	sp, sp, #4
   23028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2302c:	cmp	r0, #0
   23030:	bne	23070 <__assert_fail@plt+0x10fe4>
   23034:	cmp	r5, #0
   23038:	beq	23070 <__assert_fail@plt+0x10fe4>
   2303c:	adds	r0, sl, #1
   23040:	add	r4, r4, #1
   23044:	mov	r5, #0
   23048:	adc	r1, r9, #0
   2304c:	cmp	r4, #10
   23050:	bne	23070 <__assert_fail@plt+0x10fe4>
   23054:	rsbs	r3, r0, #9
   23058:	mov	r4, #0
   2305c:	mov	sl, r0
   23060:	mov	r9, r1
   23064:	mov	r5, #0
   23068:	rscs	r3, r1, #0
   2306c:	bcc	230dc <__assert_fail@plt+0x11050>
   23070:	ldr	r0, [sp, #36]	; 0x24
   23074:	tst	r0, #8
   23078:	beq	230a0 <__assert_fail@plt+0x11014>
   2307c:	cmp	r4, #0
   23080:	bne	230a0 <__assert_fail@plt+0x11014>
   23084:	ldr	r0, [sp, #32]
   23088:	str	r0, [sp, #44]	; 0x2c
   2308c:	mov	r4, #0
   23090:	ldr	r0, [sp, #48]	; 0x30
   23094:	cmp	r0, #0
   23098:	bne	229c0 <__assert_fail@plt+0x10934>
   2309c:	b	22e3c <__assert_fail@plt+0x10db0>
   230a0:	ldr	r1, [sp, #28]
   230a4:	ldr	r2, [sp, #16]
   230a8:	add	r0, r4, #48	; 0x30
   230ac:	strb	r0, [r1, #646]!	; 0x286
   230b0:	sub	r0, r1, r2
   230b4:	ldr	r1, [sp, #12]
   230b8:	str	r0, [sp, #44]	; 0x2c
   230bc:	bl	11c60 <memcpy@plt>
   230c0:	ldr	r2, [sp, #40]	; 0x28
   230c4:	mov	r5, #0
   230c8:	mov	r4, #0
   230cc:	ldr	r0, [sp, #48]	; 0x30
   230d0:	cmp	r0, #0
   230d4:	bne	229c0 <__assert_fail@plt+0x10934>
   230d8:	b	22e3c <__assert_fail@plt+0x10db0>
   230dc:	ldr	r0, [sp, #32]
   230e0:	mov	r5, #0
   230e4:	mov	sl, #10
   230e8:	mov	r9, #0
   230ec:	str	r0, [sp, #44]	; 0x2c
   230f0:	ldr	r0, [sp, #48]	; 0x30
   230f4:	cmp	r0, #0
   230f8:	bne	229c0 <__assert_fail@plt+0x10934>
   230fc:	b	22e3c <__assert_fail@plt+0x10db0>
   23100:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23104:	add	fp, sp, #24
   23108:	sub	sp, sp, #8
   2310c:	mov	r4, r2
   23110:	mov	r8, r1
   23114:	cmp	r0, #0
   23118:	bne	23144 <__assert_fail@plt+0x110b8>
   2311c:	movw	r0, #54736	; 0xd5d0
   23120:	movt	r0, #2
   23124:	bl	11dec <getenv@plt>
   23128:	cmp	r0, #0
   2312c:	bne	23144 <__assert_fail@plt+0x110b8>
   23130:	movw	r0, #63016	; 0xf628
   23134:	movt	r0, #2
   23138:	bl	11dec <getenv@plt>
   2313c:	cmp	r0, #0
   23140:	beq	23270 <__assert_fail@plt+0x111e4>
   23144:	mov	r6, r0
   23148:	movw	r7, #63084	; 0xf66c
   2314c:	movw	r1, #63072	; 0xf660
   23150:	mov	r3, #4
   23154:	ldrb	r5, [r6], #1
   23158:	movt	r7, #2
   2315c:	movt	r1, #2
   23160:	mov	r2, r7
   23164:	cmp	r5, #39	; 0x27
   23168:	movne	r6, r0
   2316c:	mov	r0, r6
   23170:	bl	1f730 <__assert_fail@plt+0xd6a4>
   23174:	sub	r1, r5, #39	; 0x27
   23178:	cmp	r0, #0
   2317c:	clz	r1, r1
   23180:	lsr	r1, r1, #5
   23184:	lsl	r5, r1, #2
   23188:	blt	231c0 <__assert_fail@plt+0x11134>
   2318c:	ldr	r0, [r7, r0, lsl #2]
   23190:	mov	r2, #1
   23194:	mov	r1, #0
   23198:	str	r2, [r4]
   2319c:	str	r1, [r4, #4]
   231a0:	orr	r1, r0, r5
   231a4:	mov	r0, #0
   231a8:	str	r1, [r8]
   231ac:	ldrd	r2, [r4]
   231b0:	orrs	r1, r2, r3
   231b4:	beq	231fc <__assert_fail@plt+0x11170>
   231b8:	sub	sp, fp, #24
   231bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   231c0:	movw	r0, #63026	; 0xf632
   231c4:	add	r1, sp, #4
   231c8:	mov	r2, #0
   231cc:	mov	r3, r4
   231d0:	mov	r7, #0
   231d4:	movt	r0, #2
   231d8:	str	r0, [sp]
   231dc:	mov	r0, r6
   231e0:	bl	29fcc <_obstack_memory_used@@Base+0x3c48>
   231e4:	cmp	r0, #0
   231e8:	beq	2322c <__assert_fail@plt+0x111a0>
   231ec:	str	r7, [r8]
   231f0:	ldrd	r2, [r4]
   231f4:	orrs	r1, r2, r3
   231f8:	bne	231b8 <__assert_fail@plt+0x1112c>
   231fc:	movw	r0, #63044	; 0xf644
   23200:	movt	r0, #2
   23204:	bl	11dec <getenv@plt>
   23208:	cmp	r0, #0
   2320c:	mov	r2, #512	; 0x200
   23210:	mov	r0, #4
   23214:	mov	r1, #0
   23218:	movweq	r2, #1024	; 0x400
   2321c:	str	r2, [r4]
   23220:	str	r1, [r4, #4]
   23224:	sub	sp, fp, #24
   23228:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2322c:	ldrb	r0, [r6]
   23230:	sub	r0, r0, #48	; 0x30
   23234:	uxtb	r0, r0
   23238:	cmp	r0, #10
   2323c:	bcc	23268 <__assert_fail@plt+0x111dc>
   23240:	ldr	r0, [sp, #4]
   23244:	cmp	r0, r6
   23248:	beq	23298 <__assert_fail@plt+0x1120c>
   2324c:	ldrb	r2, [r6, #1]
   23250:	add	r1, r6, #1
   23254:	mov	r6, r1
   23258:	sub	r2, r2, #48	; 0x30
   2325c:	uxtb	r2, r2
   23260:	cmp	r2, #10
   23264:	bcs	23244 <__assert_fail@plt+0x111b8>
   23268:	mov	r1, r5
   2326c:	b	231a4 <__assert_fail@plt+0x11118>
   23270:	movw	r0, #63044	; 0xf644
   23274:	movt	r0, #2
   23278:	bl	11dec <getenv@plt>
   2327c:	mov	r2, #512	; 0x200
   23280:	cmp	r0, #0
   23284:	mov	r1, #0
   23288:	movweq	r2, #1024	; 0x400
   2328c:	str	r2, [r4]
   23290:	str	r1, [r4, #4]
   23294:	b	231a4 <__assert_fail@plt+0x11118>
   23298:	ldrb	r2, [r0, #-1]
   2329c:	orr	r1, r5, #384	; 0x180
   232a0:	cmp	r2, #66	; 0x42
   232a4:	mov	r2, r1
   232a8:	orrne	r2, r5, #128	; 0x80
   232ac:	bne	232c0 <__assert_fail@plt+0x11234>
   232b0:	ldrb	r0, [r0, #-2]
   232b4:	cmp	r0, #105	; 0x69
   232b8:	orreq	r1, r2, #32
   232bc:	b	231a4 <__assert_fail@plt+0x11118>
   232c0:	orr	r1, r2, #32
   232c4:	b	231a4 <__assert_fail@plt+0x11118>
   232c8:	push	{r4, r5, r6, r7, fp, lr}
   232cc:	add	fp, sp, #16
   232d0:	movw	r7, #5032	; 0x13a8
   232d4:	mov	r4, r0
   232d8:	movt	r7, #4
   232dc:	ldr	r5, [r7]
   232e0:	cmp	r5, #0
   232e4:	bne	232f8 <__assert_fail@plt+0x1126c>
   232e8:	b	23308 <__assert_fail@plt+0x1127c>
   232ec:	ldr	r5, [r5, #4]
   232f0:	cmp	r5, #0
   232f4:	beq	23308 <__assert_fail@plt+0x1127c>
   232f8:	ldr	r0, [r5]
   232fc:	cmp	r0, r4
   23300:	bne	232ec <__assert_fail@plt+0x11260>
   23304:	b	2335c <__assert_fail@plt+0x112d0>
   23308:	mov	r0, r4
   2330c:	bl	11bdc <getpwuid@plt>
   23310:	cmp	r0, #0
   23314:	beq	23320 <__assert_fail@plt+0x11294>
   23318:	ldr	r6, [r0]
   2331c:	b	23328 <__assert_fail@plt+0x1129c>
   23320:	movw	r6, #56125	; 0xdb3d
   23324:	movt	r6, #2
   23328:	mov	r0, r6
   2332c:	bl	11eac <strlen@plt>
   23330:	add	r0, r0, #12
   23334:	bic	r0, r0, #3
   23338:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   2333c:	mov	r5, r0
   23340:	str	r4, [r0]
   23344:	add	r0, r0, #8
   23348:	mov	r1, r6
   2334c:	bl	11d80 <strcpy@plt>
   23350:	ldr	r0, [r7]
   23354:	str	r5, [r7]
   23358:	str	r0, [r5, #4]
   2335c:	ldrb	r0, [r5, #8]!
   23360:	cmp	r0, #0
   23364:	moveq	r5, r0
   23368:	mov	r0, r5
   2336c:	pop	{r4, r5, r6, r7, fp, pc}
   23370:	push	{r4, r5, r6, r7, fp, lr}
   23374:	add	fp, sp, #16
   23378:	movw	r7, #5032	; 0x13a8
   2337c:	mov	r4, r0
   23380:	movt	r7, #4
   23384:	ldr	r5, [r7]
   23388:	cmp	r5, #0
   2338c:	beq	233c0 <__assert_fail@plt+0x11334>
   23390:	ldrb	r6, [r4]
   23394:	mov	r0, r5
   23398:	ldrb	r1, [r0, #8]!
   2339c:	cmp	r1, r6
   233a0:	bne	233b4 <__assert_fail@plt+0x11328>
   233a4:	mov	r1, r4
   233a8:	bl	11bd0 <strcmp@plt>
   233ac:	cmp	r0, #0
   233b0:	beq	2345c <__assert_fail@plt+0x113d0>
   233b4:	ldr	r5, [r5, #4]
   233b8:	cmp	r5, #0
   233bc:	bne	23394 <__assert_fail@plt+0x11308>
   233c0:	ldr	r5, [r7, #4]
   233c4:	cmp	r5, #0
   233c8:	beq	233fc <__assert_fail@plt+0x11370>
   233cc:	ldrb	r6, [r4]
   233d0:	mov	r0, r5
   233d4:	ldrb	r1, [r0, #8]!
   233d8:	cmp	r1, r6
   233dc:	bne	233f0 <__assert_fail@plt+0x11364>
   233e0:	mov	r1, r4
   233e4:	bl	11bd0 <strcmp@plt>
   233e8:	cmp	r0, #0
   233ec:	beq	23458 <__assert_fail@plt+0x113cc>
   233f0:	ldr	r5, [r5, #4]
   233f4:	cmp	r5, #0
   233f8:	bne	233d0 <__assert_fail@plt+0x11344>
   233fc:	mov	r0, r4
   23400:	bl	11bc4 <getpwnam@plt>
   23404:	mov	r6, r0
   23408:	mov	r0, r4
   2340c:	bl	11eac <strlen@plt>
   23410:	add	r0, r0, #12
   23414:	bic	r0, r0, #3
   23418:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   2341c:	mov	r5, r0
   23420:	add	r0, r0, #8
   23424:	mov	r1, r4
   23428:	bl	11d80 <strcpy@plt>
   2342c:	cmp	r6, #0
   23430:	beq	2344c <__assert_fail@plt+0x113c0>
   23434:	ldr	r0, [r6, #8]
   23438:	ldr	r1, [r7]
   2343c:	stm	r5, {r0, r1}
   23440:	mov	r0, r5
   23444:	str	r5, [r7]
   23448:	pop	{r4, r5, r6, r7, fp, pc}
   2344c:	ldr	r0, [r7, #4]
   23450:	str	r5, [r7, #4]
   23454:	str	r0, [r5, #4]
   23458:	mov	r5, #0
   2345c:	mov	r0, r5
   23460:	pop	{r4, r5, r6, r7, fp, pc}
   23464:	push	{r4, r5, r6, r7, fp, lr}
   23468:	add	fp, sp, #16
   2346c:	movw	r7, #5032	; 0x13a8
   23470:	mov	r4, r0
   23474:	movt	r7, #4
   23478:	ldr	r5, [r7, #8]
   2347c:	cmp	r5, #0
   23480:	bne	23494 <__assert_fail@plt+0x11408>
   23484:	b	234a4 <__assert_fail@plt+0x11418>
   23488:	ldr	r5, [r5, #4]
   2348c:	cmp	r5, #0
   23490:	beq	234a4 <__assert_fail@plt+0x11418>
   23494:	ldr	r0, [r5]
   23498:	cmp	r0, r4
   2349c:	bne	23488 <__assert_fail@plt+0x113fc>
   234a0:	b	234f8 <__assert_fail@plt+0x1146c>
   234a4:	mov	r0, r4
   234a8:	bl	12050 <getgrgid@plt>
   234ac:	cmp	r0, #0
   234b0:	beq	234bc <__assert_fail@plt+0x11430>
   234b4:	ldr	r6, [r0]
   234b8:	b	234c4 <__assert_fail@plt+0x11438>
   234bc:	movw	r6, #56125	; 0xdb3d
   234c0:	movt	r6, #2
   234c4:	mov	r0, r6
   234c8:	bl	11eac <strlen@plt>
   234cc:	add	r0, r0, #12
   234d0:	bic	r0, r0, #3
   234d4:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   234d8:	mov	r5, r0
   234dc:	str	r4, [r0]
   234e0:	add	r0, r0, #8
   234e4:	mov	r1, r6
   234e8:	bl	11d80 <strcpy@plt>
   234ec:	ldr	r0, [r7, #8]
   234f0:	str	r5, [r7, #8]
   234f4:	str	r0, [r5, #4]
   234f8:	ldrb	r0, [r5, #8]!
   234fc:	cmp	r0, #0
   23500:	moveq	r5, r0
   23504:	mov	r0, r5
   23508:	pop	{r4, r5, r6, r7, fp, pc}
   2350c:	push	{r4, r5, r6, r7, fp, lr}
   23510:	add	fp, sp, #16
   23514:	movw	r7, #5032	; 0x13a8
   23518:	mov	r4, r0
   2351c:	movt	r7, #4
   23520:	ldr	r5, [r7, #8]
   23524:	cmp	r5, #0
   23528:	beq	2355c <__assert_fail@plt+0x114d0>
   2352c:	ldrb	r6, [r4]
   23530:	mov	r0, r5
   23534:	ldrb	r1, [r0, #8]!
   23538:	cmp	r1, r6
   2353c:	bne	23550 <__assert_fail@plt+0x114c4>
   23540:	mov	r1, r4
   23544:	bl	11bd0 <strcmp@plt>
   23548:	cmp	r0, #0
   2354c:	beq	235f8 <__assert_fail@plt+0x1156c>
   23550:	ldr	r5, [r5, #4]
   23554:	cmp	r5, #0
   23558:	bne	23530 <__assert_fail@plt+0x114a4>
   2355c:	ldr	r5, [r7, #12]
   23560:	cmp	r5, #0
   23564:	beq	23598 <__assert_fail@plt+0x1150c>
   23568:	ldrb	r6, [r4]
   2356c:	mov	r0, r5
   23570:	ldrb	r1, [r0, #8]!
   23574:	cmp	r1, r6
   23578:	bne	2358c <__assert_fail@plt+0x11500>
   2357c:	mov	r1, r4
   23580:	bl	11bd0 <strcmp@plt>
   23584:	cmp	r0, #0
   23588:	beq	235f4 <__assert_fail@plt+0x11568>
   2358c:	ldr	r5, [r5, #4]
   23590:	cmp	r5, #0
   23594:	bne	2356c <__assert_fail@plt+0x114e0>
   23598:	mov	r0, r4
   2359c:	bl	1205c <getgrnam@plt>
   235a0:	mov	r6, r0
   235a4:	mov	r0, r4
   235a8:	bl	11eac <strlen@plt>
   235ac:	add	r0, r0, #12
   235b0:	bic	r0, r0, #3
   235b4:	bl	296f8 <_obstack_memory_used@@Base+0x3374>
   235b8:	mov	r5, r0
   235bc:	add	r0, r0, #8
   235c0:	mov	r1, r4
   235c4:	bl	11d80 <strcpy@plt>
   235c8:	cmp	r6, #0
   235cc:	beq	235e8 <__assert_fail@plt+0x1155c>
   235d0:	ldr	r0, [r6, #8]
   235d4:	ldr	r1, [r7, #8]
   235d8:	stm	r5, {r0, r1}
   235dc:	mov	r0, r5
   235e0:	str	r5, [r7, #8]
   235e4:	pop	{r4, r5, r6, r7, fp, pc}
   235e8:	ldr	r0, [r7, #12]
   235ec:	str	r5, [r7, #12]
   235f0:	str	r0, [r5, #4]
   235f4:	mov	r5, #0
   235f8:	mov	r0, r5
   235fc:	pop	{r4, r5, r6, r7, fp, pc}
   23600:	push	{r4, r5, r6, sl, fp, lr}
   23604:	add	fp, sp, #16
   23608:	mov	r5, r0
   2360c:	mov	r0, #0
   23610:	mov	r4, r1
   23614:	add	r6, r2, #19
   23618:	cmp	r1, #0
   2361c:	strb	r0, [r2, #20]
   23620:	blt	23670 <__assert_fail@plt+0x115e4>
   23624:	mov	r0, r5
   23628:	mov	r1, r4
   2362c:	mov	r2, #10
   23630:	mov	r3, #0
   23634:	bl	2b3fc <_obstack_memory_used@@Base+0x5078>
   23638:	add	r2, r0, r0, lsl #2
   2363c:	sub	r2, r5, r2, lsl #1
   23640:	add	r2, r2, #48	; 0x30
   23644:	strb	r2, [r6], #-1
   23648:	adds	r2, r5, #9
   2364c:	mov	r5, r0
   23650:	adc	r3, r4, #0
   23654:	rsbs	r2, r2, #18
   23658:	mov	r4, r1
   2365c:	rscs	r2, r3, #0
   23660:	bcc	23624 <__assert_fail@plt+0x11598>
   23664:	add	r6, r6, #1
   23668:	mov	r0, r6
   2366c:	pop	{r4, r5, r6, sl, fp, pc}
   23670:	mov	r0, r5
   23674:	mov	r1, r4
   23678:	mov	r2, #10
   2367c:	mov	r3, #0
   23680:	bl	2b3fc <_obstack_memory_used@@Base+0x5078>
   23684:	add	r2, r0, r0, lsl #2
   23688:	rsb	r2, r5, r2, lsl #1
   2368c:	add	r2, r2, #48	; 0x30
   23690:	strb	r2, [r6], #-1
   23694:	adds	r2, r5, #9
   23698:	mov	r5, r0
   2369c:	adc	r3, r4, #0
   236a0:	rsbs	r2, r2, #18
   236a4:	mov	r4, r1
   236a8:	rscs	r2, r3, #0
   236ac:	bcc	23670 <__assert_fail@plt+0x115e4>
   236b0:	mov	r0, #45	; 0x2d
   236b4:	strb	r0, [r6]
   236b8:	mov	r0, r6
   236bc:	pop	{r4, r5, r6, sl, fp, pc}
   236c0:	push	{r4, r5, r6, sl, fp, lr}
   236c4:	add	fp, sp, #16
   236c8:	mov	r5, r0
   236cc:	mov	r0, #0
   236d0:	mov	r4, r1
   236d4:	add	r6, r2, #19
   236d8:	strb	r0, [r2, #20]
   236dc:	mov	r0, r5
   236e0:	mov	r1, r4
   236e4:	mov	r2, #10
   236e8:	mov	r3, #0
   236ec:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   236f0:	add	r2, r0, r0, lsl #2
   236f4:	sub	r2, r5, r2, lsl #1
   236f8:	orr	r2, r2, #48	; 0x30
   236fc:	strb	r2, [r6], #-1
   23700:	rsbs	r2, r5, #9
   23704:	mov	r5, r0
   23708:	rscs	r2, r4, #0
   2370c:	mov	r4, r1
   23710:	bcc	236dc <__assert_fail@plt+0x11650>
   23714:	add	r0, r6, #1
   23718:	pop	{r4, r5, r6, sl, fp, pc}
   2371c:	push	{r4, r5, r6, r7, fp, lr}
   23720:	add	fp, sp, #16
   23724:	sub	sp, sp, #8
   23728:	add	r5, sp, #4
   2372c:	cmp	r0, #0
   23730:	mov	r7, r2
   23734:	mov	r4, r1
   23738:	movne	r5, r0
   2373c:	mov	r0, r5
   23740:	bl	11d98 <mbrtowc@plt>
   23744:	mov	r6, r0
   23748:	cmp	r7, #0
   2374c:	beq	23770 <__assert_fail@plt+0x116e4>
   23750:	cmn	r6, #2
   23754:	bcc	23770 <__assert_fail@plt+0x116e4>
   23758:	mov	r0, #0
   2375c:	bl	21264 <__assert_fail@plt+0xf1d8>
   23760:	cmp	r0, #0
   23764:	ldrbeq	r0, [r4]
   23768:	moveq	r6, #1
   2376c:	streq	r0, [r5]
   23770:	mov	r0, r6
   23774:	sub	sp, fp, #16
   23778:	pop	{r4, r5, r6, r7, fp, pc}
   2377c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23780:	add	fp, sp, #28
   23784:	sub	sp, sp, #20
   23788:	mov	r5, r3
   2378c:	str	r2, [sp, #12]
   23790:	str	r1, [sp, #16]
   23794:	mov	r4, r0
   23798:	bl	11eac <strlen@plt>
   2379c:	ldr	r3, [fp, #12]
   237a0:	mov	r8, r0
   237a4:	mov	sl, #0
   237a8:	tst	r3, #2
   237ac:	bne	23880 <__assert_fail@plt+0x117f4>
   237b0:	bl	11d74 <__ctype_get_mb_cur_max@plt>
   237b4:	mov	r6, #0
   237b8:	cmp	r0, #2
   237bc:	bcc	23890 <__assert_fail@plt+0x11804>
   237c0:	mov	r0, #0
   237c4:	mov	r1, r4
   237c8:	mov	r2, #0
   237cc:	bl	11fb4 <mbstowcs@plt>
   237d0:	cmn	r0, #1
   237d4:	beq	23a2c <__assert_fail@plt+0x119a0>
   237d8:	add	r9, r0, #1
   237dc:	mov	r7, r0
   237e0:	lsl	r0, r9, #2
   237e4:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   237e8:	cmp	r0, #0
   237ec:	beq	23a28 <__assert_fail@plt+0x1199c>
   237f0:	mov	r1, r4
   237f4:	mov	r2, r9
   237f8:	mov	r6, r0
   237fc:	bl	11fb4 <mbstowcs@plt>
   23800:	cmp	r0, #0
   23804:	beq	23a4c <__assert_fail@plt+0x119c0>
   23808:	str	r4, [sp, #4]
   2380c:	mov	r4, #0
   23810:	mov	r1, r6
   23814:	str	r6, [sp]
   23818:	str	r4, [r6, r7, lsl #2]
   2381c:	ldr	r0, [r6]
   23820:	cmp	r0, #0
   23824:	beq	23a5c <__assert_fail@plt+0x119d0>
   23828:	add	r6, r1, #4
   2382c:	movw	r7, #65533	; 0xfffd
   23830:	bl	11d20 <iswprint@plt>
   23834:	cmp	r0, #0
   23838:	streq	r7, [r6, #-4]
   2383c:	moveq	r4, #1
   23840:	ldr	r0, [r6], #4
   23844:	cmp	r0, #0
   23848:	bne	23830 <__assert_fail@plt+0x117a4>
   2384c:	ldr	r6, [sp]
   23850:	mov	r1, r9
   23854:	mov	r0, r6
   23858:	bl	11f78 <wcswidth@plt>
   2385c:	mov	r7, r0
   23860:	tst	r4, #1
   23864:	beq	23a6c <__assert_fail@plt+0x119e0>
   23868:	mov	r0, #0
   2386c:	mov	r1, r6
   23870:	mov	r2, #0
   23874:	bl	11da4 <wcstombs@plt>
   23878:	ldr	r4, [sp, #4]
   2387c:	b	23a84 <__assert_fail@plt+0x119f8>
   23880:	mov	r6, #0
   23884:	mov	r2, #0
   23888:	mov	r7, r8
   2388c:	b	2389c <__assert_fail@plt+0x11810>
   23890:	mov	r2, #0
   23894:	mov	r7, r8
   23898:	ldr	r3, [fp, #12]
   2389c:	ldr	r0, [r5]
   238a0:	str	r4, [sp, #4]
   238a4:	ldr	r4, [fp, #8]
   238a8:	mov	r1, r7
   238ac:	str	r6, [sp, #8]
   238b0:	cmp	r7, r0
   238b4:	movhi	r1, r0
   238b8:	movhi	r8, r0
   238bc:	cmp	r0, r7
   238c0:	subhi	sl, r0, r1
   238c4:	cmp	r4, #0
   238c8:	str	r1, [r5]
   238cc:	beq	238e4 <__assert_fail@plt+0x11858>
   238d0:	cmp	r4, #1
   238d4:	bne	238ec <__assert_fail@plt+0x11860>
   238d8:	mov	r9, #0
   238dc:	mov	r4, sl
   238e0:	b	238f8 <__assert_fail@plt+0x1186c>
   238e4:	mov	r9, sl
   238e8:	b	238f8 <__assert_fail@plt+0x1186c>
   238ec:	and	r0, sl, #1
   238f0:	lsr	r9, sl, #1
   238f4:	add	r4, r0, sl, lsr #1
   238f8:	ldr	r5, [sp, #12]
   238fc:	ldr	r1, [sp, #16]
   23900:	tst	r3, #8
   23904:	mov	r6, #0
   23908:	mov	r7, #0
   2390c:	moveq	r6, r9
   23910:	tst	r3, #4
   23914:	moveq	r7, r4
   23918:	cmp	r5, #0
   2391c:	beq	23a00 <__assert_fail@plt+0x11974>
   23920:	add	r0, r1, r5
   23924:	str	r2, [sp]
   23928:	sub	sl, r0, #1
   2392c:	cmp	sl, r1
   23930:	bls	2397c <__assert_fail@plt+0x118f0>
   23934:	cmp	r7, #0
   23938:	mov	r0, r1
   2393c:	beq	23980 <__assert_fail@plt+0x118f4>
   23940:	sub	r0, r1, sl
   23944:	rsb	r1, r7, #0
   23948:	cmp	r0, r1
   2394c:	movcc	r0, r1
   23950:	mov	r1, #32
   23954:	rsb	r2, r0, #0
   23958:	ldr	r0, [sp, #16]
   2395c:	bl	11ef4 <memset@plt>
   23960:	rsb	r0, r4, #0
   23964:	rsb	r1, r5, #1
   23968:	cmp	r1, r0
   2396c:	movcc	r1, r0
   23970:	ldr	r0, [sp, #16]
   23974:	sub	r0, r0, r1
   23978:	b	23980 <__assert_fail@plt+0x118f4>
   2397c:	mov	r0, r1
   23980:	ldr	r1, [sp, #4]
   23984:	sub	r2, sl, r0
   23988:	mov	r5, #0
   2398c:	mvn	r3, #0
   23990:	cmp	r8, r2
   23994:	strb	r5, [r0]
   23998:	movcc	r2, r8
   2399c:	bl	12080 <__mempcpy_chk@plt>
   239a0:	mov	r4, r0
   239a4:	cmp	r6, #0
   239a8:	beq	239f8 <__assert_fail@plt+0x1196c>
   239ac:	cmp	r4, sl
   239b0:	bcs	239f8 <__assert_fail@plt+0x1196c>
   239b4:	sub	r0, r4, sl
   239b8:	rsb	r1, r6, #0
   239bc:	cmp	r0, r1
   239c0:	movcc	r0, r1
   239c4:	mov	r1, #32
   239c8:	rsb	r2, r0, #0
   239cc:	mov	r0, r4
   239d0:	bl	11ef4 <memset@plt>
   239d4:	ldr	r0, [sp, #16]
   239d8:	ldr	r1, [sp, #12]
   239dc:	rsb	r0, r0, #1
   239e0:	sub	r0, r0, r1
   239e4:	rsb	r1, r9, #0
   239e8:	add	r0, r4, r0
   239ec:	cmp	r1, r0
   239f0:	movhi	r0, r1
   239f4:	sub	r4, r4, r0
   239f8:	ldr	r2, [sp]
   239fc:	strb	r5, [r4]
   23a00:	add	r0, r7, r8
   23a04:	add	r9, r0, r6
   23a08:	ldr	r6, [sp, #8]
   23a0c:	mov	r0, r2
   23a10:	bl	21218 <__assert_fail@plt+0xf18c>
   23a14:	mov	r0, r6
   23a18:	bl	21218 <__assert_fail@plt+0xf18c>
   23a1c:	mov	r0, r9
   23a20:	sub	sp, fp, #28
   23a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a28:	mov	r6, #0
   23a2c:	ldr	r3, [fp, #12]
   23a30:	mvn	r9, #0
   23a34:	mov	r2, #0
   23a38:	mov	r7, r8
   23a3c:	mov	r0, #0
   23a40:	tst	r3, #1
   23a44:	bne	2389c <__assert_fail@plt+0x11810>
   23a48:	b	23a10 <__assert_fail@plt+0x11984>
   23a4c:	mov	r2, r6
   23a50:	mov	r7, r8
   23a54:	mov	r6, #0
   23a58:	b	23898 <__assert_fail@plt+0x1180c>
   23a5c:	mov	r0, r1
   23a60:	mov	r1, r9
   23a64:	bl	11f78 <wcswidth@plt>
   23a68:	mov	r7, r0
   23a6c:	ldr	r0, [r5]
   23a70:	ldr	r4, [sp, #4]
   23a74:	mov	r6, #0
   23a78:	cmp	r7, r0
   23a7c:	mov	r0, r8
   23a80:	bls	23af0 <__assert_fail@plt+0x11a64>
   23a84:	add	r6, r0, #1
   23a88:	mov	r0, r6
   23a8c:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   23a90:	cmp	r0, #0
   23a94:	beq	23af8 <__assert_fail@plt+0x11a6c>
   23a98:	ldr	r1, [sp]
   23a9c:	str	r0, [sp, #8]
   23aa0:	str	r6, [sp, #4]
   23aa4:	ldr	r0, [r1]
   23aa8:	cmp	r0, #0
   23aac:	beq	23b18 <__assert_fail@plt+0x11a8c>
   23ab0:	ldr	r4, [r5]
   23ab4:	mov	r8, #0
   23ab8:	movw	r9, #65533	; 0xfffd
   23abc:	mov	r6, r1
   23ac0:	bl	11c00 <wcwidth@plt>
   23ac4:	cmn	r0, #1
   23ac8:	moveq	r0, #1
   23acc:	streq	r9, [r6]
   23ad0:	add	r7, r0, r8
   23ad4:	cmp	r7, r4
   23ad8:	bhi	23b24 <__assert_fail@plt+0x11a98>
   23adc:	ldr	r0, [r6, #4]!
   23ae0:	mov	r8, r7
   23ae4:	cmp	r0, #0
   23ae8:	bne	23ac0 <__assert_fail@plt+0x11a34>
   23aec:	b	23b28 <__assert_fail@plt+0x11a9c>
   23af0:	ldr	r2, [sp]
   23af4:	b	23898 <__assert_fail@plt+0x1180c>
   23af8:	ldr	r3, [fp, #12]
   23afc:	ldr	r2, [sp]
   23b00:	mov	r6, #0
   23b04:	mvn	r9, #0
   23b08:	tst	r3, #1
   23b0c:	mov	r0, r2
   23b10:	bne	2389c <__assert_fail@plt+0x11810>
   23b14:	b	23a10 <__assert_fail@plt+0x11984>
   23b18:	mov	r6, r1
   23b1c:	mov	r7, #0
   23b20:	b	23b28 <__assert_fail@plt+0x11a9c>
   23b24:	mov	r7, r8
   23b28:	mov	r0, #0
   23b2c:	ldr	r4, [sp]
   23b30:	ldr	r2, [sp, #4]
   23b34:	str	r0, [r6]
   23b38:	ldr	r6, [sp, #8]
   23b3c:	mov	r1, r4
   23b40:	mov	r0, r6
   23b44:	bl	11da4 <wcstombs@plt>
   23b48:	mov	r2, r4
   23b4c:	mov	r8, r0
   23b50:	mov	r4, r6
   23b54:	b	23898 <__assert_fail@plt+0x1180c>
   23b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b5c:	add	fp, sp, #28
   23b60:	sub	sp, sp, #12
   23b64:	ldr	r8, [r1]
   23b68:	mov	sl, r0
   23b6c:	mov	r9, r2
   23b70:	mov	r6, r1
   23b74:	mov	r7, #0
   23b78:	str	r3, [sp, #8]
   23b7c:	mov	r0, r8
   23b80:	mov	r5, r8
   23b84:	cmp	r0, r5
   23b88:	bcc	23bec <__assert_fail@plt+0x11b60>
   23b8c:	add	r5, r0, #1
   23b90:	mov	r0, r7
   23b94:	mov	r1, r5
   23b98:	bl	2ad04 <_obstack_memory_used@@Base+0x4980>
   23b9c:	cmp	r0, #0
   23ba0:	beq	23be0 <__assert_fail@plt+0x11b54>
   23ba4:	mov	r4, r0
   23ba8:	ldr	r0, [sp, #8]
   23bac:	str	r8, [r6]
   23bb0:	mov	r2, r5
   23bb4:	mov	r3, r6
   23bb8:	str	r9, [sp]
   23bbc:	mov	r1, r4
   23bc0:	str	r0, [sp, #4]
   23bc4:	mov	r0, sl
   23bc8:	bl	2377c <__assert_fail@plt+0x116f0>
   23bcc:	cmn	r0, #1
   23bd0:	mov	r7, r4
   23bd4:	bne	23b84 <__assert_fail@plt+0x11af8>
   23bd8:	mov	r0, r4
   23bdc:	b	23be4 <__assert_fail@plt+0x11b58>
   23be0:	mov	r0, r7
   23be4:	bl	21218 <__assert_fail@plt+0xf18c>
   23be8:	mov	r7, #0
   23bec:	mov	r0, r7
   23bf0:	sub	sp, fp, #28
   23bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23bf8:	push	{r4, r5, fp, lr}
   23bfc:	add	fp, sp, #8
   23c00:	mov	r4, r1
   23c04:	mov	r5, r0
   23c08:	bl	11eac <strlen@plt>
   23c0c:	mov	r1, r0
   23c10:	mov	r0, r5
   23c14:	mov	r2, r4
   23c18:	pop	{r4, r5, fp, lr}
   23c1c:	b	23c20 <__assert_fail@plt+0x11b94>
   23c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c24:	add	fp, sp, #28
   23c28:	sub	sp, sp, #20
   23c2c:	mov	r4, r2
   23c30:	mov	r6, r1
   23c34:	mov	r5, r0
   23c38:	add	r7, r0, r1
   23c3c:	bl	11d74 <__ctype_get_mb_cur_max@plt>
   23c40:	cmp	r0, #1
   23c44:	bls	23f2c <__assert_fail@plt+0x11ea0>
   23c48:	cmp	r6, #1
   23c4c:	blt	23fe4 <__assert_fail@plt+0x11f58>
   23c50:	and	sl, r4, #1
   23c54:	mov	r3, #0
   23c58:	add	r8, sp, #4
   23c5c:	add	r9, sp, #8
   23c60:	tst	r4, #2
   23c64:	eor	r2, sl, #1
   23c68:	bne	23ff4 <__assert_fail@plt+0x11f68>
   23c6c:	mov	r4, #0
   23c70:	ldrb	r0, [r5]
   23c74:	sub	r0, r0, #32
   23c78:	cmp	r0, #94	; 0x5e
   23c7c:	bhi	23e18 <__assert_fail@plt+0x11d8c>
   23c80:	add	r1, pc, #0
   23c84:	ldr	pc, [r1, r0, lsl #2]
   23c88:	andeq	r3, r2, r4, lsl #28
   23c8c:	andeq	r3, r2, r4, lsl #28
   23c90:	andeq	r3, r2, r4, lsl #28
   23c94:	andeq	r3, r2, r4, lsl #28
   23c98:	andeq	r3, r2, r8, lsl lr
   23c9c:	andeq	r3, r2, r4, lsl #28
   23ca0:	andeq	r3, r2, r4, lsl #28
   23ca4:	andeq	r3, r2, r4, lsl #28
   23ca8:	andeq	r3, r2, r4, lsl #28
   23cac:	andeq	r3, r2, r4, lsl #28
   23cb0:	andeq	r3, r2, r4, lsl #28
   23cb4:	andeq	r3, r2, r4, lsl #28
   23cb8:	andeq	r3, r2, r4, lsl #28
   23cbc:	andeq	r3, r2, r4, lsl #28
   23cc0:	andeq	r3, r2, r4, lsl #28
   23cc4:	andeq	r3, r2, r4, lsl #28
   23cc8:	andeq	r3, r2, r4, lsl #28
   23ccc:	andeq	r3, r2, r4, lsl #28
   23cd0:	andeq	r3, r2, r4, lsl #28
   23cd4:	andeq	r3, r2, r4, lsl #28
   23cd8:	andeq	r3, r2, r4, lsl #28
   23cdc:	andeq	r3, r2, r4, lsl #28
   23ce0:	andeq	r3, r2, r4, lsl #28
   23ce4:	andeq	r3, r2, r4, lsl #28
   23ce8:	andeq	r3, r2, r4, lsl #28
   23cec:	andeq	r3, r2, r4, lsl #28
   23cf0:	andeq	r3, r2, r4, lsl #28
   23cf4:	andeq	r3, r2, r4, lsl #28
   23cf8:	andeq	r3, r2, r4, lsl #28
   23cfc:	andeq	r3, r2, r4, lsl #28
   23d00:	andeq	r3, r2, r4, lsl #28
   23d04:	andeq	r3, r2, r4, lsl #28
   23d08:	andeq	r3, r2, r8, lsl lr
   23d0c:	andeq	r3, r2, r4, lsl #28
   23d10:	andeq	r3, r2, r4, lsl #28
   23d14:	andeq	r3, r2, r4, lsl #28
   23d18:	andeq	r3, r2, r4, lsl #28
   23d1c:	andeq	r3, r2, r4, lsl #28
   23d20:	andeq	r3, r2, r4, lsl #28
   23d24:	andeq	r3, r2, r4, lsl #28
   23d28:	andeq	r3, r2, r4, lsl #28
   23d2c:	andeq	r3, r2, r4, lsl #28
   23d30:	andeq	r3, r2, r4, lsl #28
   23d34:	andeq	r3, r2, r4, lsl #28
   23d38:	andeq	r3, r2, r4, lsl #28
   23d3c:	andeq	r3, r2, r4, lsl #28
   23d40:	andeq	r3, r2, r4, lsl #28
   23d44:	andeq	r3, r2, r4, lsl #28
   23d48:	andeq	r3, r2, r4, lsl #28
   23d4c:	andeq	r3, r2, r4, lsl #28
   23d50:	andeq	r3, r2, r4, lsl #28
   23d54:	andeq	r3, r2, r4, lsl #28
   23d58:	andeq	r3, r2, r4, lsl #28
   23d5c:	andeq	r3, r2, r4, lsl #28
   23d60:	andeq	r3, r2, r4, lsl #28
   23d64:	andeq	r3, r2, r4, lsl #28
   23d68:	andeq	r3, r2, r4, lsl #28
   23d6c:	andeq	r3, r2, r4, lsl #28
   23d70:	andeq	r3, r2, r4, lsl #28
   23d74:	andeq	r3, r2, r4, lsl #28
   23d78:	andeq	r3, r2, r4, lsl #28
   23d7c:	andeq	r3, r2, r4, lsl #28
   23d80:	andeq	r3, r2, r4, lsl #28
   23d84:	andeq	r3, r2, r4, lsl #28
   23d88:	andeq	r3, r2, r8, lsl lr
   23d8c:	andeq	r3, r2, r4, lsl #28
   23d90:	andeq	r3, r2, r4, lsl #28
   23d94:	andeq	r3, r2, r4, lsl #28
   23d98:	andeq	r3, r2, r4, lsl #28
   23d9c:	andeq	r3, r2, r4, lsl #28
   23da0:	andeq	r3, r2, r4, lsl #28
   23da4:	andeq	r3, r2, r4, lsl #28
   23da8:	andeq	r3, r2, r4, lsl #28
   23dac:	andeq	r3, r2, r4, lsl #28
   23db0:	andeq	r3, r2, r4, lsl #28
   23db4:	andeq	r3, r2, r4, lsl #28
   23db8:	andeq	r3, r2, r4, lsl #28
   23dbc:	andeq	r3, r2, r4, lsl #28
   23dc0:	andeq	r3, r2, r4, lsl #28
   23dc4:	andeq	r3, r2, r4, lsl #28
   23dc8:	andeq	r3, r2, r4, lsl #28
   23dcc:	andeq	r3, r2, r4, lsl #28
   23dd0:	andeq	r3, r2, r4, lsl #28
   23dd4:	andeq	r3, r2, r4, lsl #28
   23dd8:	andeq	r3, r2, r4, lsl #28
   23ddc:	andeq	r3, r2, r4, lsl #28
   23de0:	andeq	r3, r2, r4, lsl #28
   23de4:	andeq	r3, r2, r4, lsl #28
   23de8:	andeq	r3, r2, r4, lsl #28
   23dec:	andeq	r3, r2, r4, lsl #28
   23df0:	andeq	r3, r2, r4, lsl #28
   23df4:	andeq	r3, r2, r4, lsl #28
   23df8:	andeq	r3, r2, r4, lsl #28
   23dfc:	andeq	r3, r2, r4, lsl #28
   23e00:	andeq	r3, r2, r4, lsl #28
   23e04:	add	r4, r4, #1
   23e08:	add	r5, r5, #1
   23e0c:	cmp	r5, r7
   23e10:	bcc	23c70 <__assert_fail@plt+0x11be4>
   23e14:	b	24298 <__assert_fail@plt+0x1220c>
   23e18:	str	r2, [sp]
   23e1c:	str	r3, [sp, #12]
   23e20:	str	r3, [sp, #8]
   23e24:	sub	r2, r7, r5
   23e28:	mov	r0, r8
   23e2c:	mov	r1, r5
   23e30:	mov	r3, r9
   23e34:	mov	r6, r5
   23e38:	bl	2371c <__assert_fail@plt+0x11690>
   23e3c:	cmp	r0, #0
   23e40:	beq	23e80 <__assert_fail@plt+0x11df4>
   23e44:	mov	r5, r0
   23e48:	cmn	r0, #2
   23e4c:	beq	23ed0 <__assert_fail@plt+0x11e44>
   23e50:	cmn	r5, #1
   23e54:	beq	23eec <__assert_fail@plt+0x11e60>
   23e58:	ldr	r0, [sp, #4]
   23e5c:	bl	11c00 <wcwidth@plt>
   23e60:	cmn	r0, #1
   23e64:	ble	23e94 <__assert_fail@plt+0x11e08>
   23e68:	mvn	r1, #-2147483648	; 0x80000000
   23e6c:	sub	r1, r1, r4
   23e70:	cmp	r0, r1
   23e74:	bgt	23ec8 <__assert_fail@plt+0x11e3c>
   23e78:	add	r4, r0, r4
   23e7c:	b	23eb0 <__assert_fail@plt+0x11e24>
   23e80:	mov	r5, #1
   23e84:	ldr	r0, [sp, #4]
   23e88:	bl	11c00 <wcwidth@plt>
   23e8c:	cmn	r0, #1
   23e90:	bgt	23e68 <__assert_fail@plt+0x11ddc>
   23e94:	ldr	r0, [sp, #4]
   23e98:	bl	11cfc <iswcntrl@plt>
   23e9c:	cmp	r0, #0
   23ea0:	bne	23eb0 <__assert_fail@plt+0x11e24>
   23ea4:	cmn	r4, #-2147483647	; 0x80000001
   23ea8:	beq	23ec8 <__assert_fail@plt+0x11e3c>
   23eac:	add	r4, r4, #1
   23eb0:	mov	r0, r9
   23eb4:	add	r5, r6, r5
   23eb8:	bl	11c78 <mbsinit@plt>
   23ebc:	cmp	r0, #0
   23ec0:	beq	23e24 <__assert_fail@plt+0x11d98>
   23ec4:	b	23f00 <__assert_fail@plt+0x11e74>
   23ec8:	mov	r0, #7
   23ecc:	b	23f14 <__assert_fail@plt+0x11e88>
   23ed0:	ldr	r0, [sp]
   23ed4:	cmp	sl, #0
   23ed8:	mov	r5, r7
   23edc:	add	r4, r4, r0
   23ee0:	mov	r0, #1
   23ee4:	beq	23f00 <__assert_fail@plt+0x11e74>
   23ee8:	b	23f14 <__assert_fail@plt+0x11e88>
   23eec:	mov	r0, #1
   23ef0:	cmp	sl, #0
   23ef4:	bne	23f14 <__assert_fail@plt+0x11e88>
   23ef8:	add	r4, r4, #1
   23efc:	add	r5, r6, #1
   23f00:	ldr	r2, [sp]
   23f04:	mov	r3, #0
   23f08:	cmp	r5, r7
   23f0c:	bcc	23c70 <__assert_fail@plt+0x11be4>
   23f10:	b	24298 <__assert_fail@plt+0x1220c>
   23f14:	ldr	r2, [sp]
   23f18:	cmp	r0, #0
   23f1c:	mov	r5, r6
   23f20:	mov	r3, #0
   23f24:	beq	23e0c <__assert_fail@plt+0x11d80>
   23f28:	b	23f80 <__assert_fail@plt+0x11ef4>
   23f2c:	tst	r4, #2
   23f30:	bne	23f88 <__assert_fail@plt+0x11efc>
   23f34:	mov	r4, #0
   23f38:	cmp	r5, r7
   23f3c:	bcs	24298 <__assert_fail@plt+0x1220c>
   23f40:	ldrb	r6, [r5], #1
   23f44:	bl	11e70 <__ctype_b_loc@plt>
   23f48:	ldr	r0, [r0]
   23f4c:	add	r0, r0, r6, lsl #1
   23f50:	ldrh	r1, [r0]
   23f54:	tst	r1, #16384	; 0x4000
   23f58:	bne	23f68 <__assert_fail@plt+0x11edc>
   23f5c:	mov	r0, #0
   23f60:	tst	r1, #2
   23f64:	bne	23f78 <__assert_fail@plt+0x11eec>
   23f68:	cmn	r4, #-2147483647	; 0x80000001
   23f6c:	mov	r0, #0
   23f70:	mvneq	r0, #0
   23f74:	addne	r4, r4, #1
   23f78:	ands	r0, r0, #7
   23f7c:	beq	23f38 <__assert_fail@plt+0x11eac>
   23f80:	mvn	r4, #0
   23f84:	b	23fd0 <__assert_fail@plt+0x11f44>
   23f88:	mov	r6, #0
   23f8c:	cmp	r5, r7
   23f90:	bcs	24294 <__assert_fail@plt+0x12208>
   23f94:	ldrb	r4, [r5]
   23f98:	bl	11e70 <__ctype_b_loc@plt>
   23f9c:	ldr	r0, [r0]
   23fa0:	add	r0, r0, r4, lsl #1
   23fa4:	mvn	r4, #0
   23fa8:	ldrb	r0, [r0, #1]
   23fac:	tst	r0, #64	; 0x40
   23fb0:	beq	24298 <__assert_fail@plt+0x1220c>
   23fb4:	cmn	r6, #-2147483647	; 0x80000001
   23fb8:	mov	r0, #0
   23fbc:	add	r5, r5, #1
   23fc0:	movweq	r0, #7
   23fc4:	addne	r6, r6, #1
   23fc8:	cmp	r0, #0
   23fcc:	beq	23f8c <__assert_fail@plt+0x11f00>
   23fd0:	cmp	r0, #7
   23fd4:	mvneq	r4, #-2147483648	; 0x80000000
   23fd8:	mov	r0, r4
   23fdc:	sub	sp, fp, #28
   23fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23fe4:	mov	r4, #0
   23fe8:	mov	r0, r4
   23fec:	sub	sp, fp, #28
   23ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ff4:	mov	r4, #0
   23ff8:	ldrb	r0, [r5]
   23ffc:	sub	r0, r0, #32
   24000:	cmp	r0, #94	; 0x5e
   24004:	bhi	241a0 <__assert_fail@plt+0x12114>
   24008:	add	r1, pc, #0
   2400c:	ldr	pc, [r1, r0, lsl #2]
   24010:	andeq	r4, r2, ip, lsl #3
   24014:	andeq	r4, r2, ip, lsl #3
   24018:	andeq	r4, r2, ip, lsl #3
   2401c:	andeq	r4, r2, ip, lsl #3
   24020:	andeq	r4, r2, r0, lsr #3
   24024:	andeq	r4, r2, ip, lsl #3
   24028:	andeq	r4, r2, ip, lsl #3
   2402c:	andeq	r4, r2, ip, lsl #3
   24030:	andeq	r4, r2, ip, lsl #3
   24034:	andeq	r4, r2, ip, lsl #3
   24038:	andeq	r4, r2, ip, lsl #3
   2403c:	andeq	r4, r2, ip, lsl #3
   24040:	andeq	r4, r2, ip, lsl #3
   24044:	andeq	r4, r2, ip, lsl #3
   24048:	andeq	r4, r2, ip, lsl #3
   2404c:	andeq	r4, r2, ip, lsl #3
   24050:	andeq	r4, r2, ip, lsl #3
   24054:	andeq	r4, r2, ip, lsl #3
   24058:	andeq	r4, r2, ip, lsl #3
   2405c:	andeq	r4, r2, ip, lsl #3
   24060:	andeq	r4, r2, ip, lsl #3
   24064:	andeq	r4, r2, ip, lsl #3
   24068:	andeq	r4, r2, ip, lsl #3
   2406c:	andeq	r4, r2, ip, lsl #3
   24070:	andeq	r4, r2, ip, lsl #3
   24074:	andeq	r4, r2, ip, lsl #3
   24078:	andeq	r4, r2, ip, lsl #3
   2407c:	andeq	r4, r2, ip, lsl #3
   24080:	andeq	r4, r2, ip, lsl #3
   24084:	andeq	r4, r2, ip, lsl #3
   24088:	andeq	r4, r2, ip, lsl #3
   2408c:	andeq	r4, r2, ip, lsl #3
   24090:	andeq	r4, r2, r0, lsr #3
   24094:	andeq	r4, r2, ip, lsl #3
   24098:	andeq	r4, r2, ip, lsl #3
   2409c:	andeq	r4, r2, ip, lsl #3
   240a0:	andeq	r4, r2, ip, lsl #3
   240a4:	andeq	r4, r2, ip, lsl #3
   240a8:	andeq	r4, r2, ip, lsl #3
   240ac:	andeq	r4, r2, ip, lsl #3
   240b0:	andeq	r4, r2, ip, lsl #3
   240b4:	andeq	r4, r2, ip, lsl #3
   240b8:	andeq	r4, r2, ip, lsl #3
   240bc:	andeq	r4, r2, ip, lsl #3
   240c0:	andeq	r4, r2, ip, lsl #3
   240c4:	andeq	r4, r2, ip, lsl #3
   240c8:	andeq	r4, r2, ip, lsl #3
   240cc:	andeq	r4, r2, ip, lsl #3
   240d0:	andeq	r4, r2, ip, lsl #3
   240d4:	andeq	r4, r2, ip, lsl #3
   240d8:	andeq	r4, r2, ip, lsl #3
   240dc:	andeq	r4, r2, ip, lsl #3
   240e0:	andeq	r4, r2, ip, lsl #3
   240e4:	andeq	r4, r2, ip, lsl #3
   240e8:	andeq	r4, r2, ip, lsl #3
   240ec:	andeq	r4, r2, ip, lsl #3
   240f0:	andeq	r4, r2, ip, lsl #3
   240f4:	andeq	r4, r2, ip, lsl #3
   240f8:	andeq	r4, r2, ip, lsl #3
   240fc:	andeq	r4, r2, ip, lsl #3
   24100:	andeq	r4, r2, ip, lsl #3
   24104:	andeq	r4, r2, ip, lsl #3
   24108:	andeq	r4, r2, ip, lsl #3
   2410c:	andeq	r4, r2, ip, lsl #3
   24110:	andeq	r4, r2, r0, lsr #3
   24114:	andeq	r4, r2, ip, lsl #3
   24118:	andeq	r4, r2, ip, lsl #3
   2411c:	andeq	r4, r2, ip, lsl #3
   24120:	andeq	r4, r2, ip, lsl #3
   24124:	andeq	r4, r2, ip, lsl #3
   24128:	andeq	r4, r2, ip, lsl #3
   2412c:	andeq	r4, r2, ip, lsl #3
   24130:	andeq	r4, r2, ip, lsl #3
   24134:	andeq	r4, r2, ip, lsl #3
   24138:	andeq	r4, r2, ip, lsl #3
   2413c:	andeq	r4, r2, ip, lsl #3
   24140:	andeq	r4, r2, ip, lsl #3
   24144:	andeq	r4, r2, ip, lsl #3
   24148:	andeq	r4, r2, ip, lsl #3
   2414c:	andeq	r4, r2, ip, lsl #3
   24150:	andeq	r4, r2, ip, lsl #3
   24154:	andeq	r4, r2, ip, lsl #3
   24158:	andeq	r4, r2, ip, lsl #3
   2415c:	andeq	r4, r2, ip, lsl #3
   24160:	andeq	r4, r2, ip, lsl #3
   24164:	andeq	r4, r2, ip, lsl #3
   24168:	andeq	r4, r2, ip, lsl #3
   2416c:	andeq	r4, r2, ip, lsl #3
   24170:	andeq	r4, r2, ip, lsl #3
   24174:	andeq	r4, r2, ip, lsl #3
   24178:	andeq	r4, r2, ip, lsl #3
   2417c:	andeq	r4, r2, ip, lsl #3
   24180:	andeq	r4, r2, ip, lsl #3
   24184:	andeq	r4, r2, ip, lsl #3
   24188:	andeq	r4, r2, ip, lsl #3
   2418c:	add	r4, r4, #1
   24190:	add	r5, r5, #1
   24194:	cmp	r5, r7
   24198:	bcc	23ff8 <__assert_fail@plt+0x11f6c>
   2419c:	b	24298 <__assert_fail@plt+0x1220c>
   241a0:	mov	r6, r5
   241a4:	str	r2, [sp]
   241a8:	str	r3, [sp, #12]
   241ac:	str	r3, [sp, #8]
   241b0:	sub	r2, r7, r6
   241b4:	mov	r0, r8
   241b8:	mov	r1, r6
   241bc:	mov	r3, r9
   241c0:	bl	2371c <__assert_fail@plt+0x11690>
   241c4:	cmp	r0, #0
   241c8:	beq	241e4 <__assert_fail@plt+0x12158>
   241cc:	mov	r5, r0
   241d0:	cmn	r0, #2
   241d4:	beq	24238 <__assert_fail@plt+0x121ac>
   241d8:	cmn	r5, #1
   241dc:	bne	241e8 <__assert_fail@plt+0x1215c>
   241e0:	b	24254 <__assert_fail@plt+0x121c8>
   241e4:	mov	r5, #1
   241e8:	ldr	r0, [sp, #4]
   241ec:	bl	11c00 <wcwidth@plt>
   241f0:	cmp	r0, #0
   241f4:	blt	24228 <__assert_fail@plt+0x1219c>
   241f8:	mvn	r1, #-2147483648	; 0x80000000
   241fc:	sub	r1, r1, r4
   24200:	cmp	r0, r1
   24204:	bgt	24230 <__assert_fail@plt+0x121a4>
   24208:	add	r4, r0, r4
   2420c:	mov	r0, r9
   24210:	add	r6, r6, r5
   24214:	bl	11c78 <mbsinit@plt>
   24218:	cmp	r0, #0
   2421c:	mov	r5, r6
   24220:	beq	241b0 <__assert_fail@plt+0x12124>
   24224:	b	24268 <__assert_fail@plt+0x121dc>
   24228:	mov	r0, #1
   2422c:	b	2427c <__assert_fail@plt+0x121f0>
   24230:	mov	r0, #7
   24234:	b	2427c <__assert_fail@plt+0x121f0>
   24238:	ldr	r0, [sp]
   2423c:	cmp	sl, #0
   24240:	mov	r5, r7
   24244:	add	r4, r4, r0
   24248:	mov	r0, #1
   2424c:	bne	2427c <__assert_fail@plt+0x121f0>
   24250:	b	24268 <__assert_fail@plt+0x121dc>
   24254:	mov	r0, #1
   24258:	cmp	sl, #0
   2425c:	bne	2427c <__assert_fail@plt+0x121f0>
   24260:	add	r4, r4, #1
   24264:	add	r5, r6, #1
   24268:	ldr	r2, [sp]
   2426c:	mov	r3, #0
   24270:	cmp	r5, r7
   24274:	bcc	23ff8 <__assert_fail@plt+0x11f6c>
   24278:	b	24298 <__assert_fail@plt+0x1220c>
   2427c:	ldr	r2, [sp]
   24280:	cmp	r0, #0
   24284:	mov	r5, r6
   24288:	mov	r3, #0
   2428c:	beq	24194 <__assert_fail@plt+0x12108>
   24290:	b	23f80 <__assert_fail@plt+0x11ef4>
   24294:	mov	r4, r6
   24298:	mov	r0, r4
   2429c:	sub	sp, fp, #28
   242a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242a4:	mov	r3, r2
   242a8:	add	r2, r0, r1, lsl #2
   242ac:	b	242b0 <__assert_fail@plt+0x12224>
   242b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242b4:	add	fp, sp, #28
   242b8:	sub	sp, sp, #44	; 0x2c
   242bc:	mov	r5, r3
   242c0:	mov	r8, r0
   242c4:	cmp	r1, #2
   242c8:	bhi	242f4 <__assert_fail@plt+0x12268>
   242cc:	bne	242ec <__assert_fail@plt+0x12260>
   242d0:	ldm	r8, {r6, r7}
   242d4:	mov	r0, r6
   242d8:	mov	r1, r7
   242dc:	blx	r5
   242e0:	cmp	r0, #1
   242e4:	strge	r7, [r8]
   242e8:	strge	r6, [r8, #4]
   242ec:	sub	sp, fp, #28
   242f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242f4:	lsr	r9, r1, #1
   242f8:	mov	r7, r1
   242fc:	sub	r1, r1, r1, lsr #1
   24300:	mov	r3, r5
   24304:	mov	sl, r2
   24308:	add	r4, r8, r9, lsl #2
   2430c:	mov	r0, r4
   24310:	bl	242b0 <__assert_fail@plt+0x12224>
   24314:	cmp	r7, #3
   24318:	str	r8, [sp, #28]
   2431c:	str	r9, [sp, #36]	; 0x24
   24320:	str	sl, [sp, #32]
   24324:	bne	24334 <__assert_fail@plt+0x122a8>
   24328:	ldr	r6, [r8]
   2432c:	str	r6, [sl]
   24330:	b	24478 <__assert_fail@plt+0x123ec>
   24334:	str	r4, [sp, #8]
   24338:	lsr	r4, r7, #2
   2433c:	sub	r1, r9, r7, lsr #2
   24340:	mov	r2, sl
   24344:	mov	r3, r5
   24348:	str	r7, [sp, #12]
   2434c:	add	r0, r8, r4, lsl #2
   24350:	bl	242b0 <__assert_fail@plt+0x12224>
   24354:	mov	r0, r8
   24358:	mov	r1, r4
   2435c:	mov	r2, sl
   24360:	mov	r3, r5
   24364:	str	r5, [fp, #-32]	; 0xffffffe0
   24368:	bl	242b0 <__assert_fail@plt+0x12224>
   2436c:	ldr	r6, [r8, r4, lsl #2]
   24370:	rsb	r0, r9, #1
   24374:	add	r2, r8, #4
   24378:	mov	r1, #0
   2437c:	mov	r3, r4
   24380:	mov	r5, sl
   24384:	str	r4, [sp, #20]
   24388:	str	r0, [sp, #4]
   2438c:	str	r2, [sp]
   24390:	b	243b0 <__assert_fail@plt+0x12324>
   24394:	ldr	r3, [sp, #16]
   24398:	sub	r2, r2, r7
   2439c:	ldr	r8, [sp, #28]
   243a0:	ldr	r0, [sp, #4]
   243a4:	mov	r5, r2
   243a8:	ldr	r2, [sp]
   243ac:	add	r3, r3, r4
   243b0:	ldr	r8, [r8, r1, lsl #2]
   243b4:	add	r9, r0, r3
   243b8:	add	sl, r2, r3, lsl #2
   243bc:	mvn	r7, #3
   243c0:	mov	r4, #0
   243c4:	str	r3, [sp, #16]
   243c8:	str	r1, [sp, #24]
   243cc:	b	243dc <__assert_fail@plt+0x12350>
   243d0:	ldr	r6, [sl, r4, lsl #2]
   243d4:	sub	r7, r7, #4
   243d8:	add	r4, r4, #1
   243dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   243e0:	mov	r0, r8
   243e4:	mov	r1, r6
   243e8:	blx	r2
   243ec:	cmp	r0, #0
   243f0:	ble	24404 <__assert_fail@plt+0x12378>
   243f4:	adds	r0, r9, r4
   243f8:	str	r6, [r5, r4, lsl #2]
   243fc:	bne	243d0 <__assert_fail@plt+0x12344>
   24400:	b	24438 <__assert_fail@plt+0x123ac>
   24404:	ldr	r1, [sp, #24]
   24408:	ldr	r0, [sp, #20]
   2440c:	mov	r2, r5
   24410:	str	r8, [r5, r4, lsl #2]
   24414:	add	r1, r1, #1
   24418:	cmp	r1, r0
   2441c:	bne	24394 <__assert_fail@plt+0x12308>
   24420:	ldr	r9, [sp, #36]	; 0x24
   24424:	ldr	r0, [sp, #16]
   24428:	str	r9, [sp, #20]
   2442c:	add	r3, r0, r4
   24430:	ldr	r8, [sp, #28]
   24434:	b	24448 <__assert_fail@plt+0x123bc>
   24438:	ldr	r8, [sp, #28]
   2443c:	ldr	r9, [sp, #36]	; 0x24
   24440:	ldr	r3, [sp, #24]
   24444:	mov	r2, r5
   24448:	add	r0, r2, r4, lsl #2
   2444c:	ldr	r2, [sp, #20]
   24450:	add	r1, r8, r3, lsl #2
   24454:	add	r0, r0, #4
   24458:	sub	r2, r2, r3
   2445c:	lsl	r2, r2, #2
   24460:	bl	11c60 <memcpy@plt>
   24464:	ldr	r0, [sp, #32]
   24468:	ldr	r7, [sp, #12]
   2446c:	ldr	r4, [sp, #8]
   24470:	ldr	r5, [fp, #-32]	; 0xffffffe0
   24474:	ldr	r6, [r0]
   24478:	rsb	r0, r7, #1
   2447c:	ldr	r7, [r4]
   24480:	mov	r1, #0
   24484:	add	r2, r8, #4
   24488:	mov	r3, r9
   2448c:	str	r1, [fp, #-32]	; 0xffffffe0
   24490:	mov	r1, #0
   24494:	str	r0, [sp, #16]
   24498:	str	r2, [sp, #12]
   2449c:	b	244c8 <__assert_fail@plt+0x1243c>
   244a0:	ldr	r0, [sp, #32]
   244a4:	ldr	r3, [sp, #24]
   244a8:	str	r1, [fp, #-32]	; 0xffffffe0
   244ac:	ldr	r2, [sp, #12]
   244b0:	ldr	r6, [r0, r1, lsl #2]
   244b4:	ldr	r0, [sp, #20]
   244b8:	add	r3, r3, r9
   244bc:	add	r0, r0, r9
   244c0:	add	r1, r0, #1
   244c4:	ldr	r0, [sp, #16]
   244c8:	add	r8, r8, r1, lsl #2
   244cc:	add	sl, r0, r3
   244d0:	add	r4, r2, r3, lsl #2
   244d4:	mov	r9, #0
   244d8:	str	r1, [sp, #20]
   244dc:	str	r3, [sp, #24]
   244e0:	b	244ec <__assert_fail@plt+0x12460>
   244e4:	ldr	r7, [r4, r9, lsl #2]
   244e8:	add	r9, r9, #1
   244ec:	mov	r0, r6
   244f0:	mov	r1, r7
   244f4:	blx	r5
   244f8:	cmp	r0, #0
   244fc:	ble	24510 <__assert_fail@plt+0x12484>
   24500:	adds	r0, sl, r9
   24504:	str	r7, [r8, r9, lsl #2]
   24508:	bne	244e4 <__assert_fail@plt+0x12458>
   2450c:	b	24530 <__assert_fail@plt+0x124a4>
   24510:	ldr	r1, [fp, #-32]	; 0xffffffe0
   24514:	ldr	r0, [sp, #36]	; 0x24
   24518:	str	r6, [r8, r9, lsl #2]
   2451c:	ldr	r8, [sp, #28]
   24520:	add	r1, r1, #1
   24524:	cmp	r1, r0
   24528:	bne	244a0 <__assert_fail@plt+0x12414>
   2452c:	b	242ec <__assert_fail@plt+0x12260>
   24530:	ldr	r0, [sp, #32]
   24534:	ldr	r2, [fp, #-32]	; 0xffffffe0
   24538:	add	r1, r0, r2, lsl #2
   2453c:	ldr	r0, [sp, #36]	; 0x24
   24540:	sub	r0, r0, r2
   24544:	lsl	r2, r0, #2
   24548:	add	r0, r8, r9, lsl #2
   2454c:	add	r0, r0, #4
   24550:	sub	sp, fp, #28
   24554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24558:	b	11c60 <memcpy@plt>
   2455c:	push	{fp, lr}
   24560:	mov	fp, sp
   24564:	sub	sp, sp, #24
   24568:	mvn	ip, #0
   2456c:	str	ip, [sp, #8]
   24570:	mov	ip, #0
   24574:	str	ip, [sp, #4]
   24578:	str	ip, [sp]
   2457c:	ldr	ip, [fp, #12]
   24580:	str	ip, [sp, #16]
   24584:	ldr	ip, [fp, #8]
   24588:	str	ip, [sp, #12]
   2458c:	bl	24598 <__assert_fail@plt+0x1250c>
   24590:	mov	sp, fp
   24594:	pop	{fp, pc}
   24598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2459c:	add	fp, sp, #28
   245a0:	sub	sp, sp, #132	; 0x84
   245a4:	sub	sp, sp, #1024	; 0x400
   245a8:	mov	r4, r3
   245ac:	mov	sl, r2
   245b0:	str	r1, [sp, #96]	; 0x60
   245b4:	mov	r5, r0
   245b8:	bl	11ed0 <__errno_location@plt>
   245bc:	mov	r2, r4
   245c0:	ldrb	r3, [sl]
   245c4:	str	r0, [sp, #68]	; 0x44
   245c8:	ldr	r0, [r0]
   245cc:	movw	r6, #56125	; 0xdb3d
   245d0:	ldr	r1, [r2, #8]!
   245d4:	movt	r6, #2
   245d8:	str	r0, [sp, #64]	; 0x40
   245dc:	cmp	r1, #0
   245e0:	mov	r7, r1
   245e4:	movweq	r7, #12
   245e8:	cmp	r1, #12
   245ec:	subgt	r7, r1, #12
   245f0:	ldr	r1, [r2, #32]
   245f4:	cmp	r1, #0
   245f8:	movne	r6, r1
   245fc:	cmp	r3, #0
   24600:	beq	25f9c <__assert_fail@plt+0x13f10>
   24604:	sub	r0, fp, #48	; 0x30
   24608:	mvn	r1, #13
   2460c:	ldr	r9, [fp, #16]
   24610:	str	r4, [sp, #80]	; 0x50
   24614:	sub	r8, r6, #1
   24618:	str	r6, [sp, #44]	; 0x2c
   2461c:	mov	lr, #0
   24620:	mov	r6, #-2147483648	; 0x80000000
   24624:	mov	ip, r5
   24628:	str	r7, [sp, #52]	; 0x34
   2462c:	str	r2, [sp, #56]	; 0x38
   24630:	sub	r1, r1, r0
   24634:	str	r8, [sp, #24]
   24638:	str	r1, [sp, #36]	; 0x24
   2463c:	add	r1, r0, #13
   24640:	add	r0, r0, #14
   24644:	str	r1, [sp, #28]
   24648:	add	r1, sp, #104	; 0x68
   2464c:	str	r0, [sp, #72]	; 0x48
   24650:	add	r1, r1, #1
   24654:	str	r1, [sp, #40]	; 0x28
   24658:	add	r1, r4, #12
   2465c:	movw	r4, #52428	; 0xcccc
   24660:	str	r1, [sp, #48]	; 0x30
   24664:	sub	r1, fp, #53	; 0x35
   24668:	movt	r4, #3276	; 0xccc
   2466c:	add	r0, r1, #3
   24670:	str	r0, [sp, #60]	; 0x3c
   24674:	add	r0, r1, #2
   24678:	str	r0, [sp, #76]	; 0x4c
   2467c:	uxtb	r1, r3
   24680:	cmp	r1, #37	; 0x25
   24684:	bne	246a0 <__assert_fail@plt+0x12614>
   24688:	ldr	r0, [fp, #8]
   2468c:	mov	r7, #0
   24690:	mov	r5, #0
   24694:	str	sl, [sp, #88]	; 0x58
   24698:	str	r0, [sp, #100]	; 0x64
   2469c:	b	247a0 <__assert_fail@plt+0x12714>
   246a0:	ldr	r0, [sp, #96]	; 0x60
   246a4:	bic	r1, r9, r9, asr #31
   246a8:	cmp	r1, #1
   246ac:	mov	r5, r1
   246b0:	movls	r5, #1
   246b4:	sub	r2, r0, lr
   246b8:	cmp	r5, r2
   246bc:	bcs	25fd0 <__assert_fail@plt+0x13f44>
   246c0:	cmp	ip, #0
   246c4:	beq	24854 <__assert_fail@plt+0x127c8>
   246c8:	cmp	r1, #2
   246cc:	bcc	24708 <__assert_fail@plt+0x1267c>
   246d0:	sub	r4, r1, #1
   246d4:	mov	r0, ip
   246d8:	mov	r1, #32
   246dc:	mov	r6, lr
   246e0:	mov	r7, ip
   246e4:	mov	r2, r4
   246e8:	bl	11ef4 <memset@plt>
   246ec:	ldrb	r3, [sl]
   246f0:	mov	ip, r7
   246f4:	mov	lr, r6
   246f8:	mov	r6, #-2147483648	; 0x80000000
   246fc:	add	ip, r7, r4
   24700:	movw	r4, #52428	; 0xcccc
   24704:	movt	r4, #3276	; 0xccc
   24708:	strb	r3, [ip], #1
   2470c:	add	lr, r5, lr
   24710:	ldrb	r3, [sl, #1]!
   24714:	mvn	r9, #0
   24718:	cmp	r3, #0
   2471c:	bne	2467c <__assert_fail@plt+0x125f0>
   24720:	b	25fa4 <__assert_fail@plt+0x13f18>
   24724:	mov	r7, #1
   24728:	b	247a0 <__assert_fail@plt+0x12714>
   2472c:	add	r3, pc, #0
   24730:	ldr	pc, [r3, r2, lsl #2]
   24734:	andeq	r4, r2, r4, lsr #14
   24738:			; <UNDEFINED> instruction: 0x000247bc
   2473c:			; <UNDEFINED> instruction: 0x000247bc
   24740:			; <UNDEFINED> instruction: 0x000247bc
   24744:			; <UNDEFINED> instruction: 0x000247bc
   24748:			; <UNDEFINED> instruction: 0x000247bc
   2474c:			; <UNDEFINED> instruction: 0x000247bc
   24750:			; <UNDEFINED> instruction: 0x000247bc
   24754:	andeq	r4, r2, ip, ror #14
   24758:			; <UNDEFINED> instruction: 0x000247bc
   2475c:	andeq	r4, r2, ip, ror #14
   24760:			; <UNDEFINED> instruction: 0x000247bc
   24764:			; <UNDEFINED> instruction: 0x000247bc
   24768:	andeq	r4, r2, ip, ror #14
   2476c:	add	r1, r1, #1
   24770:	add	sl, sl, #1
   24774:	mov	r5, r0
   24778:	ldrb	r0, [sl]
   2477c:	sub	r2, r0, #35	; 0x23
   24780:	cmp	r2, #13
   24784:	bls	2472c <__assert_fail@plt+0x126a0>
   24788:	cmp	r0, #95	; 0x5f
   2478c:	beq	2476c <__assert_fail@plt+0x126e0>
   24790:	cmp	r0, #94	; 0x5e
   24794:	bne	247bc <__assert_fail@plt+0x12730>
   24798:	mov	r0, #1
   2479c:	str	r0, [sp, #100]	; 0x64
   247a0:	add	r1, sl, #2
   247a4:	add	sl, sl, #1
   247a8:	ldrb	r0, [sl]
   247ac:	sub	r2, r0, #35	; 0x23
   247b0:	cmp	r2, #13
   247b4:	bls	2472c <__assert_fail@plt+0x126a0>
   247b8:	b	24788 <__assert_fail@plt+0x126fc>
   247bc:	sub	r2, r0, #48	; 0x30
   247c0:	cmp	r2, #9
   247c4:	bhi	24834 <__assert_fail@plt+0x127a8>
   247c8:	mov	r9, #0
   247cc:	cmn	r9, #1
   247d0:	ble	247e0 <__assert_fail@plt+0x12754>
   247d4:	cmp	r9, r4
   247d8:	bgt	247f0 <__assert_fail@plt+0x12764>
   247dc:	b	24808 <__assert_fail@plt+0x1277c>
   247e0:	beq	24808 <__assert_fail@plt+0x1277c>
   247e4:	sdiv	r2, r6, r9
   247e8:	cmp	r2, #10
   247ec:	bge	24808 <__assert_fail@plt+0x1277c>
   247f0:	mvn	r9, #-2147483648	; 0x80000000
   247f4:	ldrb	r0, [r1], #1
   247f8:	sub	r2, r0, #48	; 0x30
   247fc:	cmp	r2, #10
   24800:	bcc	247cc <__assert_fail@plt+0x12740>
   24804:	b	24830 <__assert_fail@plt+0x127a4>
   24808:	add	r2, r9, r9, lsl #2
   2480c:	lsl	r3, r2, #1
   24810:	uxtab	r0, r3, r0
   24814:	sub	r9, r0, #48	; 0x30
   24818:	cmp	r9, r2, lsl #1
   2481c:	mvnvs	r9, #-2147483648	; 0x80000000
   24820:	ldrb	r0, [r1], #1
   24824:	sub	r2, r0, #48	; 0x30
   24828:	cmp	r2, #10
   2482c:	bcc	247cc <__assert_fail@plt+0x12740>
   24830:	sub	sl, r1, #1
   24834:	cmp	r0, #79	; 0x4f
   24838:	str	ip, [sp, #92]	; 0x5c
   2483c:	cmpne	r0, #69	; 0x45
   24840:	bne	24870 <__assert_fail@plt+0x127e4>
   24844:	ldrb	r1, [sl, #1]!
   24848:	cmp	r1, #122	; 0x7a
   2484c:	bls	24880 <__assert_fail@plt+0x127f4>
   24850:	b	254a8 <__assert_fail@plt+0x1341c>
   24854:	mov	ip, #0
   24858:	add	lr, r5, lr
   2485c:	ldrb	r3, [sl, #1]!
   24860:	mvn	r9, #0
   24864:	cmp	r3, #0
   24868:	bne	2467c <__assert_fail@plt+0x125f0>
   2486c:	b	25fa4 <__assert_fail@plt+0x13f18>
   24870:	mov	r1, r0
   24874:	mov	r0, #0
   24878:	cmp	r1, #122	; 0x7a
   2487c:	bhi	254a8 <__assert_fail@plt+0x1341c>
   24880:	movw	r4, #55102	; 0xd73e
   24884:	add	r2, pc, #12
   24888:	mov	r6, #0
   2488c:	mvn	r8, #0
   24890:	movt	r4, #2
   24894:	ldr	pc, [r2, r1, lsl #2]
   24898:	strdeq	r4, [r2], -r0
   2489c:	andeq	r5, r2, r8, lsr #9
   248a0:	andeq	r5, r2, r8, lsr #9
   248a4:	andeq	r5, r2, r8, lsr #9
   248a8:	andeq	r5, r2, r8, lsr #9
   248ac:	andeq	r5, r2, r8, lsr #9
   248b0:	andeq	r5, r2, r8, lsr #9
   248b4:	andeq	r5, r2, r8, lsr #9
   248b8:	andeq	r5, r2, r8, lsr #9
   248bc:	andeq	r5, r2, r8, lsr #9
   248c0:	andeq	r5, r2, r8, lsr #9
   248c4:	andeq	r5, r2, r8, lsr #9
   248c8:	andeq	r5, r2, r8, lsr #9
   248cc:	andeq	r5, r2, r8, lsr #9
   248d0:	andeq	r5, r2, r8, lsr #9
   248d4:	andeq	r5, r2, r8, lsr #9
   248d8:	andeq	r5, r2, r8, lsr #9
   248dc:	andeq	r5, r2, r8, lsr #9
   248e0:	andeq	r5, r2, r8, lsr #9
   248e4:	andeq	r5, r2, r8, lsr #9
   248e8:	andeq	r5, r2, r8, lsr #9
   248ec:	andeq	r5, r2, r8, lsr #9
   248f0:	andeq	r5, r2, r8, lsr #9
   248f4:	andeq	r5, r2, r8, lsr #9
   248f8:	andeq	r5, r2, r8, lsr #9
   248fc:	andeq	r5, r2, r8, lsr #9
   24900:	andeq	r5, r2, r8, lsr #9
   24904:	andeq	r5, r2, r8, lsr #9
   24908:	andeq	r5, r2, r8, lsr #9
   2490c:	andeq	r5, r2, r8, lsr #9
   24910:	andeq	r5, r2, r8, lsr #9
   24914:	andeq	r5, r2, r8, lsr #9
   24918:	andeq	r5, r2, r8, lsr #9
   2491c:	andeq	r5, r2, r8, lsr #9
   24920:	andeq	r5, r2, r8, lsr #9
   24924:	andeq	r5, r2, r8, lsr #9
   24928:	andeq	r5, r2, r8, lsr #9
   2492c:	strdeq	r4, [r2], -ip
   24930:	andeq	r5, r2, r8, lsr #9
   24934:	andeq	r5, r2, r8, lsr #9
   24938:	andeq	r5, r2, r8, lsr #9
   2493c:	andeq	r5, r2, r8, lsr #9
   24940:	andeq	r5, r2, r8, lsr #9
   24944:	andeq	r5, r2, r8, lsr #9
   24948:	andeq	r5, r2, r8, lsr #9
   2494c:	andeq	r5, r2, r8, lsr #9
   24950:	andeq	r5, r2, r8, lsr #9
   24954:	andeq	r5, r2, r8, lsr #9
   24958:	andeq	r5, r2, r8, lsr #9
   2495c:	andeq	r5, r2, r8, lsr #9
   24960:	andeq	r5, r2, r8, lsr #9
   24964:	andeq	r5, r2, r8, lsr #9
   24968:	andeq	r5, r2, r8, lsr #9
   2496c:	andeq	r5, r2, r8, lsr #9
   24970:	andeq	r5, r2, r8, lsr #9
   24974:	andeq	r5, r2, r8, lsr #9
   24978:	andeq	r5, r2, r8, lsr #9
   2497c:	andeq	r5, r2, r8, lsr #9
   24980:	andeq	r4, r2, r8, ror #24
   24984:	andeq	r5, r2, r8, lsr #9
   24988:	andeq	r5, r2, r8, lsr #9
   2498c:	andeq	r5, r2, r8, lsr #9
   24990:	andeq	r5, r2, r8, lsr #9
   24994:	andeq	r5, r2, r8, lsr #9
   24998:	andeq	r5, r2, r8, lsr #9
   2499c:	andeq	r4, r2, r4, ror #25
   249a0:	andeq	r4, r2, r4, lsl #26
   249a4:	andeq	r4, r2, r4, lsr #26
   249a8:	andeq	r4, r2, r8, lsr sp
   249ac:	andeq	r5, r2, r8, lsr #9
   249b0:	andeq	r4, r2, ip, asr #26
   249b4:	andeq	r4, r2, r4, lsl #21
   249b8:	andeq	r4, r2, r8, ror sp
   249bc:	andeq	r4, r2, ip, lsl #27
   249c0:	andeq	r5, r2, r8, lsr #9
   249c4:	andeq	r5, r2, r8, lsr #9
   249c8:	andeq	r5, r2, r8, lsr #9
   249cc:	andeq	r4, r2, r0, lsr #27
   249d0:			; <UNDEFINED> instruction: 0x00024db4
   249d4:	andeq	r5, r2, r8, lsr #9
   249d8:	ldrdeq	r4, [r2], -r8
   249dc:	andeq	r5, r2, r8, lsr #9
   249e0:	andeq	r4, r2, r4, lsl pc
   249e4:	strdeq	r4, [r2], -r8
   249e8:	andeq	r4, r2, ip, lsl #30
   249ec:			; <UNDEFINED> instruction: 0x00024fbc
   249f0:	andeq	r4, r2, r4, lsl #21
   249f4:	andeq	r4, r2, r8, ror #31
   249f8:	andeq	r5, r2, r4, lsr r0
   249fc:	andeq	r5, r2, r8, asr #32
   24a00:	andeq	r5, r2, r4, lsl #1
   24a04:	andeq	r5, r2, r8, lsr #9
   24a08:	andeq	r5, r2, r8, lsr #9
   24a0c:	andeq	r5, r2, r8, lsr #9
   24a10:	andeq	r5, r2, r8, lsr #9
   24a14:	andeq	r5, r2, r8, lsr #9
   24a18:	andeq	r5, r2, r8, lsr #9
   24a1c:	strdeq	r5, [r2], -r4
   24a20:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24a24:	andeq	r5, r2, r4, lsl r1
   24a28:	andeq	r5, r2, r8, lsr #2
   24a2c:	andeq	r5, r2, ip, lsr r1
   24a30:	andeq	r5, r2, r8, lsr #9
   24a34:	andeq	r4, r2, r4, lsl #21
   24a38:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24a3c:	andeq	r5, r2, r8, lsr #9
   24a40:	andeq	r5, r2, ip, asr #2
   24a44:	andeq	r5, r2, r4, ror #2
   24a48:	andeq	r5, r2, r8, ror r1
   24a4c:	andeq	r5, r2, ip, lsr #5
   24a50:	ldrdeq	r5, [r2], -r4
   24a54:	andeq	r5, r2, r8, lsr #9
   24a58:	ldrdeq	r4, [r2], -ip
   24a5c:	andeq	r5, r2, r4, lsr r3
   24a60:	andeq	r5, r2, r8, ror #26
   24a64:	andeq	r5, r2, r4, asr r3
   24a68:	strdeq	r5, [r2], -r4
   24a6c:	andeq	r5, r2, r4, asr r4
   24a70:	andeq	r5, r2, r8, lsr #9
   24a74:	andeq	r5, r2, r8, lsl #9
   24a78:	andeq	r5, r2, r0, lsr #9
   24a7c:	andeq	r5, r2, r4, ror #11
   24a80:	muleq	r2, r4, ip
   24a84:	cmp	r0, #69	; 0x45
   24a88:	beq	254a8 <__assert_fail@plt+0x1341c>
   24a8c:	ldr	r2, [sp, #80]	; 0x50
   24a90:	str	lr, [sp, #84]	; 0x54
   24a94:	movw	ip, #9363	; 0x2493
   24a98:	movt	ip, #37449	; 0x9249
   24a9c:	ldr	r6, [r2, #28]
   24aa0:	ldr	r8, [r2, #24]
   24aa4:	ldr	lr, [r2, #20]
   24aa8:	movw	r2, #382	; 0x17e
   24aac:	add	r2, r6, r2
   24ab0:	cmp	lr, #0
   24ab4:	sub	r2, r2, r8
   24ab8:	smmla	r4, r2, ip, r2
   24abc:	asr	r7, r4, #2
   24ac0:	add	r4, r7, r4, lsr #31
   24ac4:	rsb	r4, r4, r4, lsl #3
   24ac8:	sub	r2, r4, r2
   24acc:	add	r2, r6, r2
   24ad0:	add	r4, r2, #3
   24ad4:	mvn	r2, #99	; 0x63
   24ad8:	movwlt	r2, #300	; 0x12c
   24adc:	cmn	r4, #1
   24ae0:	add	r2, r2, lr
   24ae4:	ble	25770 <__assert_fail@plt+0x136e4>
   24ae8:	movw	r7, #365	; 0x16d
   24aec:	tst	r2, #3
   24af0:	bne	24b3c <__assert_fail@plt+0x12ab0>
   24af4:	movw	r7, #34079	; 0x851f
   24af8:	mov	ip, #100	; 0x64
   24afc:	movt	r7, #20971	; 0x51eb
   24b00:	smmul	r7, r2, r7
   24b04:	asr	r3, r7, #5
   24b08:	add	r3, r3, r7, lsr #31
   24b0c:	mls	ip, r3, ip, r2
   24b10:	asr	r3, r7, #7
   24b14:	add	r3, r3, r7, lsr #31
   24b18:	mov	r7, #400	; 0x190
   24b1c:	mls	r2, r3, r7, r2
   24b20:	movw	r7, #365	; 0x16d
   24b24:	cmp	r2, #0
   24b28:	movweq	r7, #366	; 0x16e
   24b2c:	cmp	ip, #0
   24b30:	movw	ip, #9363	; 0x2493
   24b34:	movt	ip, #37449	; 0x9249
   24b38:	movwne	r7, #366	; 0x16e
   24b3c:	movw	r3, #382	; 0x17e
   24b40:	add	r2, r8, r7
   24b44:	add	r3, r6, r3
   24b48:	sub	r2, r3, r2
   24b4c:	smmla	r2, r2, ip, r2
   24b50:	asr	r3, r2, #2
   24b54:	add	r2, r3, r2, lsr #31
   24b58:	movw	r3, #379	; 0x17b
   24b5c:	rsb	r2, r2, r2, lsl #3
   24b60:	add	r2, r2, r8
   24b64:	sub	r2, r2, r3
   24b68:	mov	r3, #1
   24b6c:	cmn	r2, #1
   24b70:	eor	r3, r3, r2, lsr #31
   24b74:	movgt	r4, r2
   24b78:	cmp	r1, #71	; 0x47
   24b7c:	beq	257f4 <__assert_fail@plt+0x13768>
   24b80:	cmp	r1, #103	; 0x67
   24b84:	bne	25848 <__assert_fail@plt+0x137bc>
   24b88:	movw	r2, #34079	; 0x851f
   24b8c:	mov	ip, #2
   24b90:	movt	r2, #20971	; 0x51eb
   24b94:	smmul	r7, lr, r2
   24b98:	asr	r6, r7, #5
   24b9c:	add	r7, r6, r7, lsr #31
   24ba0:	mov	r6, #100	; 0x64
   24ba4:	mls	r7, r7, r6, lr
   24ba8:	add	r7, r3, r7
   24bac:	smmul	r2, r7, r2
   24bb0:	asr	r4, r2, #5
   24bb4:	add	r2, r4, r2, lsr #31
   24bb8:	mls	r4, r2, r6, r7
   24bbc:	mov	r2, #0
   24bc0:	cmn	r4, #1
   24bc4:	ble	25a90 <__assert_fail@plt+0x13a04>
   24bc8:	ldr	lr, [sp, #84]	; 0x54
   24bcc:	mov	r3, r4
   24bd0:	b	25ad0 <__assert_fail@plt+0x13a44>
   24bd4:	ldr	r2, [sp, #100]	; 0x64
   24bd8:	mov	r6, #0
   24bdc:	cmp	r0, #69	; 0x45
   24be0:	orr	r2, r7, r2
   24be4:	str	r2, [sp, #100]	; 0x64
   24be8:	beq	254a8 <__assert_fail@plt+0x1341c>
   24bec:	b	25d68 <__assert_fail@plt+0x13cdc>
   24bf0:	ldr	ip, [sp, #92]	; 0x5c
   24bf4:	sub	r8, sl, #1
   24bf8:	b	254b0 <__assert_fail@plt+0x13424>
   24bfc:	ldr	r0, [sp, #88]	; 0x58
   24c00:	ldr	ip, [sp, #92]	; 0x5c
   24c04:	sub	r8, sl, #1
   24c08:	cmp	r8, r0
   24c0c:	bne	254b0 <__assert_fail@plt+0x13424>
   24c10:	ldr	r1, [sp, #96]	; 0x60
   24c14:	subs	r0, r5, #45	; 0x2d
   24c18:	bicne	r0, r9, r9, asr #31
   24c1c:	cmp	r0, #1
   24c20:	mov	r6, r0
   24c24:	movls	r6, #1
   24c28:	sub	r1, r1, lr
   24c2c:	cmp	r6, r1
   24c30:	bcs	25fd0 <__assert_fail@plt+0x13f44>
   24c34:	cmp	ip, #0
   24c38:	beq	24fb4 <__assert_fail@plt+0x12f28>
   24c3c:	mov	r1, #37	; 0x25
   24c40:	cmp	r0, #2
   24c44:	bcc	25f8c <__assert_fail@plt+0x13f00>
   24c48:	uxtb	r1, r5
   24c4c:	sub	r4, r0, #1
   24c50:	cmp	r1, #48	; 0x30
   24c54:	cmpne	r1, #43	; 0x2b
   24c58:	bne	25f64 <__assert_fail@plt+0x13ed8>
   24c5c:	mov	r0, ip
   24c60:	mov	r1, #48	; 0x30
   24c64:	b	25f6c <__assert_fail@plt+0x13ee0>
   24c68:	mov	r6, #1
   24c6c:	ldrb	r2, [sl, r6]
   24c70:	cmp	r2, #58	; 0x3a
   24c74:	bne	24c88 <__assert_fail@plt+0x12bfc>
   24c78:	add	r6, r6, #1
   24c7c:	ldrb	r2, [sl, r6]
   24c80:	cmp	r2, #58	; 0x3a
   24c84:	beq	24c78 <__assert_fail@plt+0x12bec>
   24c88:	cmp	r2, #122	; 0x7a
   24c8c:	bne	254a8 <__assert_fail@plt+0x1341c>
   24c90:	add	sl, sl, r6
   24c94:	ldr	r3, [sp, #80]	; 0x50
   24c98:	ldr	r2, [r3, #32]
   24c9c:	cmp	r2, #0
   24ca0:	blt	25824 <__assert_fail@plt+0x13798>
   24ca4:	str	lr, [sp, #84]	; 0x54
   24ca8:	ldr	lr, [r3, #36]	; 0x24
   24cac:	cmp	lr, #0
   24cb0:	blt	25970 <__assert_fail@plt+0x138e4>
   24cb4:	ldr	ip, [sp, #92]	; 0x5c
   24cb8:	mov	r2, #0
   24cbc:	bne	25978 <__assert_fail@plt+0x138ec>
   24cc0:	ldr	r2, [sp, #44]	; 0x2c
   24cc4:	ldrb	r2, [r2]
   24cc8:	sub	r2, r2, #45	; 0x2d
   24ccc:	clz	r2, r2
   24cd0:	lsr	r2, r2, #5
   24cd4:	cmp	r6, #3
   24cd8:	bls	25980 <__assert_fail@plt+0x138f4>
   24cdc:	ldr	lr, [sp, #84]	; 0x54
   24ce0:	b	254ac <__assert_fail@plt+0x13420>
   24ce4:	cmp	r0, #0
   24ce8:	bne	254a8 <__assert_fail@plt+0x1341c>
   24cec:	ldr	r1, [sp, #100]	; 0x64
   24cf0:	mov	r6, #0
   24cf4:	orr	r1, r7, r1
   24cf8:	str	r1, [sp, #100]	; 0x64
   24cfc:	mov	r1, #65	; 0x41
   24d00:	b	25d68 <__assert_fail@plt+0x13cdc>
   24d04:	cmp	r0, #69	; 0x45
   24d08:	beq	254a8 <__assert_fail@plt+0x1341c>
   24d0c:	ldr	r1, [sp, #100]	; 0x64
   24d10:	mov	r6, #0
   24d14:	orr	r1, r7, r1
   24d18:	str	r1, [sp, #100]	; 0x64
   24d1c:	mov	r1, #66	; 0x42
   24d20:	b	25d68 <__assert_fail@plt+0x13cdc>
   24d24:	cmp	r0, #69	; 0x45
   24d28:	bne	25864 <__assert_fail@plt+0x137d8>
   24d2c:	mov	r6, #0
   24d30:	mov	r1, #67	; 0x43
   24d34:	b	25d68 <__assert_fail@plt+0x13cdc>
   24d38:	cmp	r0, #0
   24d3c:	bne	254a8 <__assert_fail@plt+0x1341c>
   24d40:	movw	r4, #63092	; 0xf674
   24d44:	movt	r4, #2
   24d48:	b	24f14 <__assert_fail@plt+0x12e88>
   24d4c:	cmp	r0, #0
   24d50:	bne	254a8 <__assert_fail@plt+0x1341c>
   24d54:	movw	r4, #63101	; 0xf67d
   24d58:	cmp	r5, #0
   24d5c:	movt	r4, #2
   24d60:	bne	25ab0 <__assert_fail@plt+0x13a24>
   24d64:	cmp	r9, #0
   24d68:	bge	25ab0 <__assert_fail@plt+0x13a24>
   24d6c:	mov	r5, #43	; 0x2b
   24d70:	mov	r8, #4
   24d74:	b	24f14 <__assert_fail@plt+0x12e88>
   24d78:	cmp	r0, #69	; 0x45
   24d7c:	beq	254a8 <__assert_fail@plt+0x1341c>
   24d80:	ldr	r2, [sp, #56]	; 0x38
   24d84:	ldr	r3, [r2]
   24d88:	b	2518c <__assert_fail@plt+0x13100>
   24d8c:	mov	ip, #2
   24d90:	cmp	r0, #69	; 0x45
   24d94:	beq	254a8 <__assert_fail@plt+0x1341c>
   24d98:	ldr	r3, [sp, #52]	; 0x34
   24d9c:	b	25190 <__assert_fail@plt+0x13104>
   24da0:	cmp	r0, #69	; 0x45
   24da4:	beq	254a8 <__assert_fail@plt+0x1341c>
   24da8:	ldr	r2, [sp, #80]	; 0x50
   24dac:	ldr	r3, [r2, #4]
   24db0:	b	2518c <__assert_fail@plt+0x13100>
   24db4:	cmp	r0, #69	; 0x45
   24db8:	beq	254a8 <__assert_fail@plt+0x1341c>
   24dbc:	ldr	r0, [fp, #24]
   24dc0:	cmp	r9, #1
   24dc4:	mov	r4, #9
   24dc8:	mov	r7, #8
   24dcc:	movwlt	r9, #9
   24dd0:	cmp	r9, r4
   24dd4:	bge	24dfc <__assert_fail@plt+0x12d70>
   24dd8:	movw	r1, #26215	; 0x6667
   24ddc:	sub	r7, r7, #1
   24de0:	sub	r4, r4, #1
   24de4:	movt	r1, #26214	; 0x6666
   24de8:	smmul	r0, r0, r1
   24dec:	asr	r1, r0, #2
   24df0:	add	r0, r1, r0, lsr #31
   24df4:	cmp	r9, r4
   24df8:	blt	24dd8 <__assert_fail@plt+0x12d4c>
   24dfc:	movw	r1, #26215	; 0x6667
   24e00:	cmp	r4, #2
   24e04:	movt	r1, #26214	; 0x6666
   24e08:	blt	24e28 <__assert_fail@plt+0x12d9c>
   24e0c:	smmul	r2, r0, r1
   24e10:	asr	r3, r2, #2
   24e14:	add	r2, r3, r2, lsr #31
   24e18:	add	r2, r2, r2, lsl #2
   24e1c:	sub	r2, r0, r2, lsl #1
   24e20:	cmp	r2, #0
   24e24:	beq	24dd8 <__assert_fail@plt+0x12d4c>
   24e28:	cmp	r4, #1
   24e2c:	mov	r2, r7
   24e30:	sub	ip, fp, #48	; 0x30
   24e34:	blt	24e6c <__assert_fail@plt+0x12de0>
   24e38:	smmul	r3, r0, r1
   24e3c:	asr	r6, r3, #2
   24e40:	add	r3, r6, r3, lsr #31
   24e44:	add	r6, r3, r3, lsl #2
   24e48:	sub	r0, r0, r6, lsl #1
   24e4c:	add	r0, r0, #48	; 0x30
   24e50:	strb	r0, [ip, r2]
   24e54:	sub	r0, r2, #1
   24e58:	add	r2, r2, #1
   24e5c:	cmp	r2, #1
   24e60:	mov	r2, r0
   24e64:	mov	r0, r3
   24e68:	bgt	24e38 <__assert_fail@plt+0x12dac>
   24e6c:	ldr	r0, [sp, #96]	; 0x60
   24e70:	cmp	r5, #0
   24e74:	movweq	r5, #48	; 0x30
   24e78:	sub	r8, r0, lr
   24e7c:	cmp	r4, r8
   24e80:	bcs	25fd0 <__assert_fail@plt+0x13f44>
   24e84:	ldr	r6, [sp, #92]	; 0x5c
   24e88:	mov	ip, #0
   24e8c:	cmp	r6, #0
   24e90:	beq	25b88 <__assert_fail@plt+0x13afc>
   24e94:	ldr	r0, [sp, #100]	; 0x64
   24e98:	tst	r0, #1
   24e9c:	beq	25b6c <__assert_fail@plt+0x13ae0>
   24ea0:	cmp	r4, #0
   24ea4:	beq	25b84 <__assert_fail@plt+0x13af8>
   24ea8:	str	lr, [sp, #84]	; 0x54
   24eac:	bl	11e4c <__ctype_toupper_loc@plt>
   24eb0:	ldr	lr, [sp, #84]	; 0x54
   24eb4:	sub	r3, fp, #48	; 0x30
   24eb8:	ldrb	r1, [r3, r7]
   24ebc:	ldr	r2, [r0]
   24ec0:	ldr	r1, [r2, r1, lsl #2]
   24ec4:	strb	r1, [r6, r7]
   24ec8:	sub	r7, r7, #1
   24ecc:	cmn	r7, #1
   24ed0:	bne	24eb8 <__assert_fail@plt+0x12e2c>
   24ed4:	b	25b84 <__assert_fail@plt+0x13af8>
   24ed8:	mov	r6, #1
   24edc:	ldr	r2, [sp, #100]	; 0x64
   24ee0:	eor	r1, r7, #1
   24ee4:	orr	r6, r7, r6
   24ee8:	and	r2, r2, r1
   24eec:	mov	r1, #112	; 0x70
   24ef0:	str	r2, [sp, #100]	; 0x64
   24ef4:	b	25d68 <__assert_fail@plt+0x13cdc>
   24ef8:	cmp	r0, #69	; 0x45
   24efc:	beq	254a8 <__assert_fail@plt+0x1341c>
   24f00:	ldr	r2, [sp, #80]	; 0x50
   24f04:	ldr	r3, [r2]
   24f08:	b	2518c <__assert_fail@plt+0x13100>
   24f0c:	movw	r4, #63110	; 0xf686
   24f10:	movt	r4, #2
   24f14:	ldr	r0, [sp, #100]	; 0x64
   24f18:	mvn	r1, #0
   24f1c:	mov	r2, r4
   24f20:	and	r0, r0, #1
   24f24:	str	r0, [sp, #100]	; 0x64
   24f28:	stm	sp, {r0, r5, r8}
   24f2c:	ldr	r0, [fp, #20]
   24f30:	str	lr, [sp, #84]	; 0x54
   24f34:	ldr	r3, [sp, #80]	; 0x50
   24f38:	str	r0, [sp, #12]
   24f3c:	ldr	r0, [fp, #24]
   24f40:	str	r0, [sp, #16]
   24f44:	mov	r0, #0
   24f48:	bl	24598 <__assert_fail@plt+0x1250c>
   24f4c:	mov	r7, r0
   24f50:	subs	r0, r5, #45	; 0x2d
   24f54:	ldr	lr, [sp, #84]	; 0x54
   24f58:	ldr	r1, [sp, #96]	; 0x60
   24f5c:	movne	r0, r9
   24f60:	cmp	r9, #0
   24f64:	mov	r6, r7
   24f68:	movwlt	r0, #0
   24f6c:	cmp	r0, r7
   24f70:	movhi	r6, r0
   24f74:	sub	r9, r1, lr
   24f78:	cmp	r6, r9
   24f7c:	bcs	25fd0 <__assert_fail@plt+0x13f44>
   24f80:	ldr	ip, [sp, #92]	; 0x5c
   24f84:	cmp	ip, #0
   24f88:	beq	24fb4 <__assert_fail@plt+0x12f28>
   24f8c:	cmp	r0, r7
   24f90:	bls	255f8 <__assert_fail@plt+0x1356c>
   24f94:	cmp	r5, #48	; 0x30
   24f98:	sub	r2, r0, r7
   24f9c:	cmpne	r5, #43	; 0x2b
   24fa0:	str	r2, [sp, #88]	; 0x58
   24fa4:	bne	25a14 <__assert_fail@plt+0x13988>
   24fa8:	mov	r0, ip
   24fac:	mov	r1, #48	; 0x30
   24fb0:	b	25a1c <__assert_fail@plt+0x13990>
   24fb4:	mov	ip, #0
   24fb8:	b	25a6c <__assert_fail@plt+0x139e0>
   24fbc:	cmp	r0, #69	; 0x45
   24fc0:	beq	254a8 <__assert_fail@plt+0x1341c>
   24fc4:	ldr	r3, [sp, #80]	; 0x50
   24fc8:	ldr	r2, [r3, #24]
   24fcc:	ldr	r3, [r3, #28]
   24fd0:	add	r3, r3, #7
   24fd4:	sub	r2, r3, r2
   24fd8:	movw	r3, #9363	; 0x2493
   24fdc:	movt	r3, #37449	; 0x9249
   24fe0:	smmla	r2, r2, r3, r2
   24fe4:	b	25028 <__assert_fail@plt+0x12f9c>
   24fe8:	cmp	r0, #69	; 0x45
   24fec:	beq	254a8 <__assert_fail@plt+0x1341c>
   24ff0:	ldr	r3, [sp, #80]	; 0x50
   24ff4:	movw	r7, #9363	; 0x2493
   24ff8:	movt	r7, #37449	; 0x9249
   24ffc:	ldr	r2, [r3, #24]
   25000:	ldr	r3, [r3, #28]
   25004:	add	r2, r2, #6
   25008:	smmla	r6, r2, r7, r2
   2500c:	asr	r4, r6, #2
   25010:	add	r6, r4, r6, lsr #31
   25014:	rsb	r6, r6, r6, lsl #3
   25018:	sub	r2, r6, r2
   2501c:	add	r2, r3, r2
   25020:	add	r2, r2, #7
   25024:	smmla	r2, r2, r7, r2
   25028:	asr	r3, r2, #2
   2502c:	add	r3, r3, r2, lsr #31
   25030:	b	2518c <__assert_fail@plt+0x13100>
   25034:	cmp	r0, #79	; 0x4f
   25038:	beq	254a8 <__assert_fail@plt+0x1341c>
   2503c:	mov	r6, #0
   25040:	mov	r1, #88	; 0x58
   25044:	b	25d68 <__assert_fail@plt+0x13cdc>
   25048:	cmp	r0, #69	; 0x45
   2504c:	beq	25a08 <__assert_fail@plt+0x1397c>
   25050:	cmp	r0, #79	; 0x4f
   25054:	beq	254a8 <__assert_fail@plt+0x1341c>
   25058:	ldr	r2, [sp, #80]	; 0x50
   2505c:	movw	r7, #63636	; 0xf894
   25060:	mov	ip, #4
   25064:	movt	r7, #65535	; 0xffff
   25068:	ldr	r3, [r2, #20]
   2506c:	mov	r2, #0
   25070:	cmp	r3, r7
   25074:	movw	r7, #1900	; 0x76c
   25078:	movwlt	r2, #1
   2507c:	add	r3, r3, r7
   25080:	b	25ad0 <__assert_fail@plt+0x13a44>
   25084:	ldr	r0, [sp, #44]	; 0x2c
   25088:	ldr	r8, [sp, #100]	; 0x64
   2508c:	subs	r6, r5, #45	; 0x2d
   25090:	str	lr, [sp, #84]	; 0x54
   25094:	bicne	r6, r9, r9, asr #31
   25098:	bl	11eac <strlen@plt>
   2509c:	ldr	lr, [sp, #84]	; 0x54
   250a0:	mov	r9, r0
   250a4:	cmp	r6, r0
   250a8:	mov	r4, r0
   250ac:	ldr	r0, [sp, #96]	; 0x60
   250b0:	movhi	r4, r6
   250b4:	sub	r0, r0, lr
   250b8:	cmp	r4, r0
   250bc:	bcs	25fd0 <__assert_fail@plt+0x13f44>
   250c0:	ldr	r0, [sp, #92]	; 0x5c
   250c4:	cmp	r0, #0
   250c8:	beq	25900 <__assert_fail@plt+0x13874>
   250cc:	cmp	r6, r9
   250d0:	mov	ip, r0
   250d4:	bls	25bec <__assert_fail@plt+0x13b60>
   250d8:	uxtb	r1, r5
   250dc:	sub	r2, r6, r9
   250e0:	cmp	r1, #48	; 0x30
   250e4:	cmpne	r1, #43	; 0x2b
   250e8:	bne	25bd4 <__assert_fail@plt+0x13b48>
   250ec:	mov	r1, #48	; 0x30
   250f0:	b	25bd8 <__assert_fail@plt+0x13b4c>
   250f4:	cmp	r0, #0
   250f8:	bne	254a8 <__assert_fail@plt+0x1341c>
   250fc:	ldr	r1, [sp, #100]	; 0x64
   25100:	mov	r6, #0
   25104:	orr	r1, r7, r1
   25108:	str	r1, [sp, #100]	; 0x64
   2510c:	mov	r1, #97	; 0x61
   25110:	b	25d68 <__assert_fail@plt+0x13cdc>
   25114:	cmp	r0, #79	; 0x4f
   25118:	beq	254a8 <__assert_fail@plt+0x1341c>
   2511c:	mov	r6, #0
   25120:	mov	r1, #99	; 0x63
   25124:	b	25d68 <__assert_fail@plt+0x13cdc>
   25128:	cmp	r0, #69	; 0x45
   2512c:	beq	254a8 <__assert_fail@plt+0x1341c>
   25130:	ldr	r2, [sp, #48]	; 0x30
   25134:	ldr	r3, [r2]
   25138:	b	2518c <__assert_fail@plt+0x13100>
   2513c:	ldr	r2, [sp, #48]	; 0x30
   25140:	cmp	r0, #69	; 0x45
   25144:	bne	25170 <__assert_fail@plt+0x130e4>
   25148:	b	254a8 <__assert_fail@plt+0x1341c>
   2514c:	cmp	r0, #69	; 0x45
   25150:	beq	254a8 <__assert_fail@plt+0x1341c>
   25154:	ldr	r2, [sp, #80]	; 0x50
   25158:	mov	ip, #3
   2515c:	ldr	r3, [r2, #28]
   25160:	b	252c0 <__assert_fail@plt+0x13234>
   25164:	ldr	r2, [sp, #56]	; 0x38
   25168:	cmp	r0, #69	; 0x45
   2516c:	beq	254a8 <__assert_fail@plt+0x1341c>
   25170:	ldr	r3, [r2]
   25174:	b	25184 <__assert_fail@plt+0x130f8>
   25178:	ldr	r3, [sp, #52]	; 0x34
   2517c:	cmp	r0, #69	; 0x45
   25180:	beq	254a8 <__assert_fail@plt+0x1341c>
   25184:	cmp	r5, #0
   25188:	movweq	r5, #95	; 0x5f
   2518c:	mov	ip, #2
   25190:	lsr	r2, r3, #31
   25194:	cmp	r2, #0
   25198:	mov	r7, #0
   2519c:	mov	r4, #0
   251a0:	movwne	r2, #1
   251a4:	cmp	r0, #79	; 0x4f
   251a8:	moveq	r6, #0
   251ac:	cmpeq	r2, #0
   251b0:	beq	25d68 <__assert_fail@plt+0x13cdc>
   251b4:	ldr	r8, [sp, #72]	; 0x48
   251b8:	cmp	r2, #0
   251bc:	rsbne	r3, r3, #0
   251c0:	tst	r7, #1
   251c4:	asr	r7, r7, #1
   251c8:	movne	r0, #58	; 0x3a
   251cc:	strbne	r0, [r8, #-1]!
   251d0:	movw	r0, #52429	; 0xcccd
   251d4:	cmp	r3, #9
   251d8:	movt	r0, #52428	; 0xcccc
   251dc:	umull	r0, r1, r3, r0
   251e0:	lsr	r0, r1, #3
   251e4:	add	r1, r0, r0, lsl #2
   251e8:	sub	r1, r3, r1, lsl #1
   251ec:	mov	r3, r0
   251f0:	orr	r1, r1, #48	; 0x30
   251f4:	strb	r1, [r8, #-1]!
   251f8:	bhi	251c0 <__assert_fail@plt+0x13134>
   251fc:	cmp	r7, #0
   25200:	mov	r3, r0
   25204:	bne	251c0 <__assert_fail@plt+0x13134>
   25208:	cmp	r9, #0
   2520c:	ldr	r7, [sp, #92]	; 0x5c
   25210:	str	sl, [sp, #88]	; 0x58
   25214:	movlt	r9, ip
   25218:	ldr	ip, [sp, #100]	; 0x64
   2521c:	cmp	r4, #0
   25220:	movwne	r4, #43	; 0x2b
   25224:	cmp	r5, #0
   25228:	movweq	r5, #48	; 0x30
   2522c:	ldr	r1, [sp, #72]	; 0x48
   25230:	cmp	r2, #0
   25234:	mov	r0, r9
   25238:	movwne	r4, #45	; 0x2d
   2523c:	cmp	r4, #0
   25240:	subne	r0, r0, #1
   25244:	sub	r3, r1, r8
   25248:	sub	r6, r0, r3
   2524c:	cmp	r6, #1
   25250:	movwlt	r6, #0
   25254:	subs	sl, r5, #45	; 0x2d
   25258:	moveq	r6, sl
   2525c:	cmp	r4, #0
   25260:	beq	252a4 <__assert_fail@plt+0x13218>
   25264:	cmp	r5, #95	; 0x5f
   25268:	bne	25610 <__assert_fail@plt+0x13584>
   2526c:	cmp	r7, #0
   25270:	beq	25604 <__assert_fail@plt+0x13578>
   25274:	mov	r0, r7
   25278:	mov	r1, #32
   2527c:	mov	r2, r6
   25280:	str	lr, [sp, #84]	; 0x54
   25284:	str	ip, [sp, #100]	; 0x64
   25288:	str	r3, [sp, #32]
   2528c:	bl	11ef4 <memset@plt>
   25290:	ldr	r3, [sp, #32]
   25294:	ldr	ip, [sp, #100]	; 0x64
   25298:	ldr	lr, [sp, #84]	; 0x54
   2529c:	add	r7, r7, r6
   252a0:	b	25608 <__assert_fail@plt+0x1357c>
   252a4:	mov	r6, #-2147483648	; 0x80000000
   252a8:	b	25638 <__assert_fail@plt+0x135ac>
   252ac:	cmp	r0, #69	; 0x45
   252b0:	beq	254a8 <__assert_fail@plt+0x1341c>
   252b4:	ldr	r2, [sp, #80]	; 0x50
   252b8:	mov	ip, #2
   252bc:	ldr	r3, [r2, #16]
   252c0:	mov	r2, #0
   252c4:	cmn	r3, #1
   252c8:	add	r3, r3, #1
   252cc:	movwlt	r2, #1
   252d0:	b	25194 <__assert_fail@plt+0x13108>
   252d4:	ldr	r1, [sp, #96]	; 0x60
   252d8:	subs	r0, r5, #45	; 0x2d
   252dc:	bicne	r0, r9, r9, asr #31
   252e0:	cmp	r0, #1
   252e4:	mov	r6, r0
   252e8:	movls	r6, #1
   252ec:	sub	r1, r1, lr
   252f0:	cmp	r6, r1
   252f4:	bcs	25fd0 <__assert_fail@plt+0x13f44>
   252f8:	ldr	ip, [sp, #92]	; 0x5c
   252fc:	movw	r4, #52428	; 0xcccc
   25300:	movt	r4, #3276	; 0xccc
   25304:	cmp	ip, #0
   25308:	beq	256a0 <__assert_fail@plt+0x13614>
   2530c:	cmp	r0, #2
   25310:	bcc	25cf4 <__assert_fail@plt+0x13c68>
   25314:	uxtb	r1, r5
   25318:	sub	r4, r0, #1
   2531c:	cmp	r1, #48	; 0x30
   25320:	cmpne	r1, #43	; 0x2b
   25324:	bne	25cc8 <__assert_fail@plt+0x13c3c>
   25328:	mov	r0, ip
   2532c:	mov	r1, #48	; 0x30
   25330:	b	25cd0 <__assert_fail@plt+0x13c44>
   25334:	ldr	r2, [sp, #80]	; 0x50
   25338:	mov	r3, #11
   2533c:	mov	ip, #1
   25340:	ldr	r2, [r2, #16]
   25344:	mul	r2, r2, r3
   25348:	add	r3, ip, r2, asr #5
   2534c:	mov	r2, #0
   25350:	b	25194 <__assert_fail@plt+0x13108>
   25354:	ldr	r2, [sp, #80]	; 0x50
   25358:	mov	r0, #28
   2535c:	add	r1, sp, #104	; 0x68
   25360:	mov	r6, lr
   25364:	mov	r4, r1
   25368:	mov	r3, r2
   2536c:	add	r2, r2, #16
   25370:	vld1.32	{d16-d17}, [r3], r0
   25374:	vld1.32	{d18-d19}, [r2]
   25378:	add	r2, r1, #16
   2537c:	vld1.32	{d20-d21}, [r3]
   25380:	vst1.64	{d16-d17}, [r4], r0
   25384:	mvn	r0, #0
   25388:	vst1.64	{d18-d19}, [r2]
   2538c:	vst1.32	{d20-d21}, [r4]
   25390:	str	r0, [r4]
   25394:	ldr	r0, [fp, #20]
   25398:	bl	28c8c <_obstack_memory_used@@Base+0x2908>
   2539c:	ldr	r1, [r4]
   253a0:	cmp	r1, #0
   253a4:	blt	25fec <__assert_fail@plt+0x13f60>
   253a8:	cmp	r0, #0
   253ac:	blt	25908 <__assert_fail@plt+0x1387c>
   253b0:	ldr	r4, [sp, #100]	; 0x64
   253b4:	ldr	r1, [sp, #28]
   253b8:	mov	r2, r0
   253bc:	movw	r3, #26215	; 0x6667
   253c0:	movt	r3, #26214	; 0x6666
   253c4:	smmul	r3, r2, r3
   253c8:	asr	r7, r3, #2
   253cc:	add	r3, r7, r3, lsr #31
   253d0:	add	r7, r3, r3, lsl #2
   253d4:	sub	r7, r2, r7, lsl #1
   253d8:	add	r2, r2, #9
   253dc:	add	r7, r7, #48	; 0x30
   253e0:	cmp	r2, #18
   253e4:	mov	r2, r3
   253e8:	strb	r7, [r1], #-1
   253ec:	bhi	253bc <__assert_fail@plt+0x13330>
   253f0:	b	25948 <__assert_fail@plt+0x138bc>
   253f4:	ldr	r1, [sp, #96]	; 0x60
   253f8:	subs	r0, r5, #45	; 0x2d
   253fc:	bicne	r0, r9, r9, asr #31
   25400:	cmp	r0, #1
   25404:	mov	r6, r0
   25408:	movls	r6, #1
   2540c:	sub	r1, r1, lr
   25410:	cmp	r6, r1
   25414:	bcs	25fd0 <__assert_fail@plt+0x13f44>
   25418:	ldr	ip, [sp, #92]	; 0x5c
   2541c:	movw	r4, #52428	; 0xcccc
   25420:	movt	r4, #3276	; 0xccc
   25424:	cmp	ip, #0
   25428:	beq	256a0 <__assert_fail@plt+0x13614>
   2542c:	cmp	r0, #2
   25430:	bcc	25d2c <__assert_fail@plt+0x13ca0>
   25434:	uxtb	r1, r5
   25438:	sub	r4, r0, #1
   2543c:	cmp	r1, #48	; 0x30
   25440:	cmpne	r1, #43	; 0x2b
   25444:	bne	25d00 <__assert_fail@plt+0x13c74>
   25448:	mov	r0, ip
   2544c:	mov	r1, #48	; 0x30
   25450:	b	25d08 <__assert_fail@plt+0x13c7c>
   25454:	ldr	r2, [sp, #80]	; 0x50
   25458:	movw	r3, #9363	; 0x2493
   2545c:	mov	ip, #1
   25460:	movt	r3, #37449	; 0x9249
   25464:	ldr	r2, [r2, #24]
   25468:	add	r2, r2, #6
   2546c:	smmla	r3, r2, r3, r2
   25470:	asr	r7, r3, #2
   25474:	add	r3, r7, r3, lsr #31
   25478:	rsb	r3, r3, r3, lsl #3
   2547c:	sub	r2, r2, r3
   25480:	add	r3, r2, #1
   25484:	b	25190 <__assert_fail@plt+0x13104>
   25488:	cmp	r0, #69	; 0x45
   2548c:	beq	254a8 <__assert_fail@plt+0x1341c>
   25490:	ldr	r2, [sp, #80]	; 0x50
   25494:	mov	ip, #1
   25498:	ldr	r3, [r2, #24]
   2549c:	b	25190 <__assert_fail@plt+0x13104>
   254a0:	cmp	r0, #79	; 0x4f
   254a4:	bne	258b8 <__assert_fail@plt+0x1382c>
   254a8:	ldr	ip, [sp, #92]	; 0x5c
   254ac:	mov	r8, sl
   254b0:	ldr	r1, [sp, #88]	; 0x58
   254b4:	subs	r7, r5, #45	; 0x2d
   254b8:	bicne	r7, r9, r9, asr #31
   254bc:	sub	r0, r8, r1
   254c0:	add	r6, r0, #1
   254c4:	ldr	r0, [sp, #96]	; 0x60
   254c8:	cmp	r7, r6
   254cc:	mov	r4, r6
   254d0:	movhi	r4, r7
   254d4:	sub	r0, r0, lr
   254d8:	cmp	r4, r0
   254dc:	bcs	25fd0 <__assert_fail@plt+0x13f44>
   254e0:	cmp	ip, #0
   254e4:	beq	25518 <__assert_fail@plt+0x1348c>
   254e8:	cmp	r7, r6
   254ec:	mov	r9, ip
   254f0:	bls	25544 <__assert_fail@plt+0x134b8>
   254f4:	uxtb	r0, r5
   254f8:	mov	sl, lr
   254fc:	sub	r9, r7, r6
   25500:	cmp	r0, #48	; 0x30
   25504:	cmpne	r0, #43	; 0x2b
   25508:	bne	25520 <__assert_fail@plt+0x13494>
   2550c:	mov	r0, ip
   25510:	mov	r1, #48	; 0x30
   25514:	b	25528 <__assert_fail@plt+0x1349c>
   25518:	mov	ip, #0
   2551c:	b	255bc <__assert_fail@plt+0x13530>
   25520:	mov	r0, ip
   25524:	mov	r1, #32
   25528:	mov	r2, r9
   2552c:	mov	r5, ip
   25530:	bl	11ef4 <memset@plt>
   25534:	ldr	r1, [sp, #88]	; 0x58
   25538:	add	r9, r5, r9
   2553c:	mov	lr, sl
   25540:	mov	ip, r5
   25544:	ldr	r0, [sp, #100]	; 0x64
   25548:	tst	r0, #1
   2554c:	beq	255a4 <__assert_fail@plt+0x13518>
   25550:	cmp	r6, #0
   25554:	beq	255b8 <__assert_fail@plt+0x1352c>
   25558:	add	r0, r8, #1
   2555c:	sub	r5, r1, r8
   25560:	mov	sl, lr
   25564:	sub	r0, r0, r1
   25568:	cmp	r7, r0
   2556c:	movhi	r0, r7
   25570:	add	r0, ip, r0
   25574:	sub	r7, r0, #1
   25578:	bl	11e4c <__ctype_toupper_loc@plt>
   2557c:	ldr	r3, [sp, #88]	; 0x58
   25580:	mov	lr, sl
   25584:	ldrb	r1, [r3, -r5]
   25588:	ldr	r2, [r0]
   2558c:	add	r5, r5, #1
   25590:	cmp	r5, #1
   25594:	ldr	r1, [r2, r1, lsl #2]
   25598:	strb	r1, [r7], #-1
   2559c:	bne	25584 <__assert_fail@plt+0x134f8>
   255a0:	b	255b8 <__assert_fail@plt+0x1352c>
   255a4:	mov	r0, r9
   255a8:	mov	r2, r6
   255ac:	mov	r5, lr
   255b0:	bl	11c60 <memcpy@plt>
   255b4:	mov	lr, r5
   255b8:	add	ip, r9, r6
   255bc:	add	lr, r4, lr
   255c0:	mov	sl, r8
   255c4:	mov	r6, #-2147483648	; 0x80000000
   255c8:	movw	r4, #52428	; 0xcccc
   255cc:	movt	r4, #3276	; 0xccc
   255d0:	ldrb	r3, [sl, #1]!
   255d4:	mvn	r9, #0
   255d8:	cmp	r3, #0
   255dc:	bne	2467c <__assert_fail@plt+0x125f0>
   255e0:	b	25fa4 <__assert_fail@plt+0x13f18>
   255e4:	cmp	r0, #69	; 0x45
   255e8:	bne	258c4 <__assert_fail@plt+0x13838>
   255ec:	mov	r6, #0
   255f0:	mov	r1, #121	; 0x79
   255f4:	b	25d68 <__assert_fail@plt+0x13cdc>
   255f8:	ldr	r3, [sp, #80]	; 0x50
   255fc:	ldr	r0, [sp, #100]	; 0x64
   25600:	b	25a38 <__assert_fail@plt+0x139ac>
   25604:	mov	r7, #0
   25608:	sub	r9, r9, r6
   2560c:	add	lr, r6, lr
   25610:	ldr	r0, [sp, #96]	; 0x60
   25614:	mov	r6, #-2147483648	; 0x80000000
   25618:	sub	r0, r0, lr
   2561c:	cmp	r0, #2
   25620:	bcc	25fd0 <__assert_fail@plt+0x13f44>
   25624:	cmp	r7, #0
   25628:	sub	r9, r9, #1
   2562c:	add	lr, lr, #1
   25630:	strbne	r4, [r7], #1
   25634:	moveq	r7, #0
   25638:	ldr	r0, [sp, #96]	; 0x60
   2563c:	cmp	r5, #45	; 0x2d
   25640:	mov	r4, r3
   25644:	bicne	sl, r9, r9, asr #31
   25648:	cmp	sl, r3
   2564c:	movhi	r4, sl
   25650:	sub	r0, r0, lr
   25654:	cmp	r4, r0
   25658:	bcs	25fd0 <__assert_fail@plt+0x13f44>
   2565c:	cmp	r7, #0
   25660:	beq	25698 <__assert_fail@plt+0x1360c>
   25664:	cmp	sl, r3
   25668:	mov	r9, r7
   2566c:	bls	256c8 <__assert_fail@plt+0x1363c>
   25670:	cmp	r5, #48	; 0x30
   25674:	sub	r6, sl, r3
   25678:	str	ip, [sp, #100]	; 0x64
   2567c:	str	lr, [sp, #84]	; 0x54
   25680:	str	r3, [sp, #32]
   25684:	cmpne	r5, #43	; 0x2b
   25688:	bne	256a8 <__assert_fail@plt+0x1361c>
   2568c:	mov	r0, r7
   25690:	mov	r1, #48	; 0x30
   25694:	b	256b0 <__assert_fail@plt+0x13624>
   25698:	mov	ip, #0
   2569c:	b	2574c <__assert_fail@plt+0x136c0>
   256a0:	mov	ip, #0
   256a4:	b	25a74 <__assert_fail@plt+0x139e8>
   256a8:	mov	r0, r7
   256ac:	mov	r1, #32
   256b0:	mov	r2, r6
   256b4:	bl	11ef4 <memset@plt>
   256b8:	ldr	lr, [sp, #84]	; 0x54
   256bc:	ldr	ip, [sp, #100]	; 0x64
   256c0:	ldr	r3, [sp, #32]
   256c4:	add	r9, r7, r6
   256c8:	tst	ip, #1
   256cc:	beq	25724 <__assert_fail@plt+0x13698>
   256d0:	cmp	r3, #0
   256d4:	beq	25744 <__assert_fail@plt+0x136b8>
   256d8:	ldr	r0, [sp, #36]	; 0x24
   256dc:	cmp	sl, r3
   256e0:	sub	r6, r8, #1
   256e4:	movls	sl, r3
   256e8:	add	r5, r0, r8
   256ec:	add	r0, r7, sl
   256f0:	mov	r8, lr
   256f4:	mov	sl, r3
   256f8:	sub	r7, r0, #1
   256fc:	bl	11e4c <__ctype_toupper_loc@plt>
   25700:	mov	r3, sl
   25704:	mov	lr, r8
   25708:	ldrb	r1, [r6, -r5]
   2570c:	ldr	r2, [r0]
   25710:	adds	r5, r5, #1
   25714:	ldr	r1, [r2, r1, lsl #2]
   25718:	strb	r1, [r7], #-1
   2571c:	bne	25708 <__assert_fail@plt+0x1367c>
   25720:	b	25744 <__assert_fail@plt+0x136b8>
   25724:	mov	r0, r9
   25728:	mov	r1, r8
   2572c:	mov	r2, r3
   25730:	mov	r5, lr
   25734:	mov	r6, r3
   25738:	bl	11c60 <memcpy@plt>
   2573c:	mov	r3, r6
   25740:	mov	lr, r5
   25744:	add	ip, r9, r3
   25748:	mov	r6, #-2147483648	; 0x80000000
   2574c:	ldr	sl, [sp, #88]	; 0x58
   25750:	add	lr, r4, lr
   25754:	movw	r4, #52428	; 0xcccc
   25758:	movt	r4, #3276	; 0xccc
   2575c:	ldrb	r3, [sl, #1]!
   25760:	mvn	r9, #0
   25764:	cmp	r3, #0
   25768:	bne	2467c <__assert_fail@plt+0x125f0>
   2576c:	b	25fa4 <__assert_fail@plt+0x13f18>
   25770:	sub	r2, r2, #1
   25774:	movw	r4, #365	; 0x16d
   25778:	tst	r2, #3
   2577c:	bne	257c0 <__assert_fail@plt+0x13734>
   25780:	movw	r4, #34079	; 0x851f
   25784:	movt	r4, #20971	; 0x51eb
   25788:	smmul	r4, r2, r4
   2578c:	asr	r7, r4, #5
   25790:	add	r3, r7, r4, lsr #31
   25794:	mov	r7, #100	; 0x64
   25798:	mls	r3, r3, r7, r2
   2579c:	asr	r7, r4, #7
   257a0:	add	r4, r7, r4, lsr #31
   257a4:	mov	r7, #400	; 0x190
   257a8:	mls	r2, r4, r7, r2
   257ac:	movw	r4, #365	; 0x16d
   257b0:	cmp	r2, #0
   257b4:	movweq	r4, #366	; 0x16e
   257b8:	cmp	r3, #0
   257bc:	movwne	r4, #366	; 0x16e
   257c0:	add	r2, r4, r6
   257c4:	movw	r4, #382	; 0x17e
   257c8:	sub	r3, r4, r8
   257cc:	add	r2, r3, r2
   257d0:	smmla	r2, r2, ip, r2
   257d4:	asr	r4, r2, #2
   257d8:	add	r2, r4, r2, lsr #31
   257dc:	rsb	r2, r2, r2, lsl #3
   257e0:	sub	r2, r2, r3
   257e4:	mvn	r3, #0
   257e8:	add	r4, r2, #3
   257ec:	cmp	r1, #71	; 0x47
   257f0:	bne	24b80 <__assert_fail@plt+0x12af4>
   257f4:	movw	r2, #63636	; 0xf894
   257f8:	mov	ip, #4
   257fc:	movt	r2, #65535	; 0xffff
   25800:	sub	r7, r2, r3
   25804:	add	r3, lr, r3
   25808:	mov	r2, #0
   2580c:	cmp	lr, r7
   25810:	ldr	lr, [sp, #84]	; 0x54
   25814:	movw	r7, #1900	; 0x76c
   25818:	movwlt	r2, #1
   2581c:	add	r3, r3, r7
   25820:	b	25ad0 <__assert_fail@plt+0x13a44>
   25824:	ldr	ip, [sp, #92]	; 0x5c
   25828:	movw	r4, #52428	; 0xcccc
   2582c:	mov	r6, #-2147483648	; 0x80000000
   25830:	movt	r4, #3276	; 0xccc
   25834:	ldrb	r3, [sl, #1]!
   25838:	mvn	r9, #0
   2583c:	cmp	r3, #0
   25840:	bne	2467c <__assert_fail@plt+0x125f0>
   25844:	b	25fa4 <__assert_fail@plt+0x13f18>
   25848:	smmla	r2, r4, ip, r4
   2584c:	ldr	lr, [sp, #84]	; 0x54
   25850:	mov	ip, #2
   25854:	asr	r3, r2, #2
   25858:	add	r2, r3, r2, lsr #31
   2585c:	add	r3, r2, #1
   25860:	b	25190 <__assert_fail@plt+0x13104>
   25864:	ldr	r2, [sp, #80]	; 0x50
   25868:	movw	r6, #63636	; 0xf894
   2586c:	mov	r3, #0
   25870:	mvn	r4, #98	; 0x62
   25874:	mov	ip, #2
   25878:	movt	r6, #65535	; 0xffff
   2587c:	ldr	r7, [r2, #20]
   25880:	mov	r2, #0
   25884:	cmp	r7, r6
   25888:	movwge	r3, #1
   2588c:	cmp	r7, r6
   25890:	and	r3, r3, r7, lsr #31
   25894:	movwlt	r2, #1
   25898:	smlabb	r3, r3, r4, r7
   2589c:	movw	r4, #34079	; 0x851f
   258a0:	movt	r4, #20971	; 0x51eb
   258a4:	smmul	r3, r3, r4
   258a8:	asr	r4, r3, #5
   258ac:	add	r3, r4, r3, lsr #31
   258b0:	add	r3, r3, #19
   258b4:	b	25ad0 <__assert_fail@plt+0x13a44>
   258b8:	mov	r6, #0
   258bc:	mov	r1, #120	; 0x78
   258c0:	b	25d68 <__assert_fail@plt+0x13cdc>
   258c4:	ldr	r2, [sp, #80]	; 0x50
   258c8:	mov	ip, #2
   258cc:	ldr	r7, [r2, #20]
   258d0:	movw	r2, #34079	; 0x851f
   258d4:	movt	r2, #20971	; 0x51eb
   258d8:	smmul	r2, r7, r2
   258dc:	asr	r3, r2, #5
   258e0:	add	r2, r3, r2, lsr #31
   258e4:	mov	r3, #100	; 0x64
   258e8:	mls	r6, r2, r3, r7
   258ec:	mov	r2, #0
   258f0:	cmn	r6, #1
   258f4:	ble	25abc <__assert_fail@plt+0x13a30>
   258f8:	mov	r3, r6
   258fc:	b	25ad0 <__assert_fail@plt+0x13a44>
   25900:	mov	ip, #0
   25904:	b	25cbc <__assert_fail@plt+0x13c30>
   25908:	ldr	r4, [sp, #100]	; 0x64
   2590c:	ldr	r1, [sp, #28]
   25910:	mov	r2, r0
   25914:	movw	r3, #26215	; 0x6667
   25918:	movt	r3, #26214	; 0x6666
   2591c:	smmul	r3, r2, r3
   25920:	asr	r7, r3, #2
   25924:	add	r3, r7, r3, lsr #31
   25928:	add	r7, r3, r3, lsl #2
   2592c:	rsb	r7, r2, r7, lsl #1
   25930:	add	r2, r2, #9
   25934:	add	r7, r7, #48	; 0x30
   25938:	cmp	r2, #18
   2593c:	mov	r2, r3
   25940:	strb	r7, [r1], #-1
   25944:	bhi	25914 <__assert_fail@plt+0x13888>
   25948:	ldr	r7, [sp, #92]	; 0x5c
   2594c:	cmp	r9, #0
   25950:	mov	ip, r4
   25954:	add	r8, r1, #1
   25958:	mov	lr, r6
   2595c:	lsr	r2, r0, #31
   25960:	mov	r4, #0
   25964:	str	sl, [sp, #88]	; 0x58
   25968:	movwlt	r9, #1
   2596c:	b	25224 <__assert_fail@plt+0x13198>
   25970:	ldr	ip, [sp, #92]	; 0x5c
   25974:	mov	r2, #1
   25978:	cmp	r6, #3
   2597c:	bhi	24cdc <__assert_fail@plt+0x12c50>
   25980:	movw	ip, #34953	; 0x8889
   25984:	movt	ip, #34952	; 0x8888
   25988:	smmla	r4, lr, ip, lr
   2598c:	asr	r3, r4, #5
   25990:	add	r4, r3, r4, lsr #31
   25994:	smmla	r3, r4, ip, r4
   25998:	asr	r7, r3, #5
   2599c:	add	r3, r7, r3, lsr #31
   259a0:	rsb	r3, r3, r3, lsl #4
   259a4:	sub	ip, r4, r3, lsl #2
   259a8:	movw	r3, #46021	; 0xb3c5
   259ac:	rsb	r4, r4, r4, lsl #4
   259b0:	movt	r3, #37282	; 0x91a2
   259b4:	smmla	r3, lr, r3, lr
   259b8:	asr	r7, r3, #11
   259bc:	add	r3, r7, r3, lsr #31
   259c0:	sub	r7, lr, r4, lsl #2
   259c4:	add	r4, pc, #0
   259c8:	ldr	pc, [r4, r6, lsl #2]
   259cc:	ldrdeq	r5, [r2], -ip
   259d0:	andeq	r5, r2, r0, asr #26
   259d4:	andeq	r5, r2, r8, lsr fp
   259d8:	andeq	r5, r2, r0, lsr fp
   259dc:	mov	r7, #100	; 0x64
   259e0:	mla	r3, r3, r7, ip
   259e4:	mov	ip, #5
   259e8:	ldr	lr, [sp, #84]	; 0x54
   259ec:	mov	r4, #1
   259f0:	mov	r7, #0
   259f4:	cmp	r0, #79	; 0x4f
   259f8:	moveq	r6, #0
   259fc:	cmpeq	r2, #0
   25a00:	bne	251b4 <__assert_fail@plt+0x13128>
   25a04:	b	25d68 <__assert_fail@plt+0x13cdc>
   25a08:	mov	r6, #0
   25a0c:	mov	r1, #89	; 0x59
   25a10:	b	25d68 <__assert_fail@plt+0x13cdc>
   25a14:	mov	r0, ip
   25a18:	mov	r1, #32
   25a1c:	ldr	r2, [sp, #88]	; 0x58
   25a20:	bl	11ef4 <memset@plt>
   25a24:	ldr	r1, [sp, #88]	; 0x58
   25a28:	ldr	ip, [sp, #92]	; 0x5c
   25a2c:	ldr	r3, [sp, #80]	; 0x50
   25a30:	ldr	r0, [sp, #100]	; 0x64
   25a34:	add	ip, ip, r1
   25a38:	stm	sp, {r0, r5, r8}
   25a3c:	ldr	r0, [fp, #20]
   25a40:	mov	r2, r4
   25a44:	mov	r1, r9
   25a48:	mov	r4, ip
   25a4c:	str	r0, [sp, #12]
   25a50:	ldr	r0, [fp, #24]
   25a54:	str	r0, [sp, #16]
   25a58:	mov	r0, ip
   25a5c:	bl	24598 <__assert_fail@plt+0x1250c>
   25a60:	ldr	lr, [sp, #84]	; 0x54
   25a64:	mov	ip, r4
   25a68:	add	ip, r4, r7
   25a6c:	movw	r4, #52428	; 0xcccc
   25a70:	movt	r4, #3276	; 0xccc
   25a74:	add	lr, r6, lr
   25a78:	mov	r6, #-2147483648	; 0x80000000
   25a7c:	ldrb	r3, [sl, #1]!
   25a80:	mvn	r9, #0
   25a84:	cmp	r3, #0
   25a88:	bne	2467c <__assert_fail@plt+0x125f0>
   25a8c:	b	25fa4 <__assert_fail@plt+0x13f18>
   25a90:	movw	r6, #63636	; 0xf894
   25a94:	movt	r6, #65535	; 0xffff
   25a98:	sub	r6, r6, r3
   25a9c:	add	r3, r4, #100	; 0x64
   25aa0:	cmp	lr, r6
   25aa4:	ldr	lr, [sp, #84]	; 0x54
   25aa8:	rsblt	r3, r4, #0
   25aac:	b	25ad0 <__assert_fail@plt+0x13a44>
   25ab0:	sub	r0, r9, #6
   25ab4:	bic	r8, r0, r0, asr #31
   25ab8:	b	24f14 <__assert_fail@plt+0x12e88>
   25abc:	movw	r4, #63636	; 0xf894
   25ac0:	add	r3, r6, #100	; 0x64
   25ac4:	movt	r4, #65535	; 0xffff
   25ac8:	cmp	r7, r4
   25acc:	rsblt	r3, r6, #0
   25ad0:	ldr	r4, [fp, #12]
   25ad4:	cmp	r5, #0
   25ad8:	mov	r7, #0
   25adc:	moveq	r5, r4
   25ae0:	mov	r4, #0
   25ae4:	cmp	r5, #43	; 0x2b
   25ae8:	bne	251a4 <__assert_fail@plt+0x13118>
   25aec:	cmp	ip, r9
   25af0:	mov	r4, #0
   25af4:	movw	r6, #9999	; 0x270f
   25af8:	mov	r8, lr
   25afc:	mov	lr, #0
   25b00:	movwlt	r4, #1
   25b04:	cmp	ip, #2
   25b08:	movweq	r6, #99	; 0x63
   25b0c:	cmp	r6, r3
   25b10:	movwcc	lr, #1
   25b14:	orr	r4, r4, lr
   25b18:	mov	lr, r8
   25b1c:	cmp	r0, #79	; 0x4f
   25b20:	moveq	r6, #0
   25b24:	cmpeq	r2, #0
   25b28:	bne	251b4 <__assert_fail@plt+0x13128>
   25b2c:	b	25d68 <__assert_fail@plt+0x13cdc>
   25b30:	cmp	r7, #0
   25b34:	beq	25d38 <__assert_fail@plt+0x13cac>
   25b38:	ldr	lr, [sp, #84]	; 0x54
   25b3c:	movw	r6, #10000	; 0x2710
   25b40:	mov	r4, #1
   25b44:	mla	r3, r3, r6, r7
   25b48:	mov	r7, #100	; 0x64
   25b4c:	mla	r3, ip, r7, r3
   25b50:	mov	ip, #9
   25b54:	mov	r7, #20
   25b58:	cmp	r0, #79	; 0x4f
   25b5c:	moveq	r6, #0
   25b60:	cmpeq	r2, #0
   25b64:	bne	251b4 <__assert_fail@plt+0x13128>
   25b68:	b	25d68 <__assert_fail@plt+0x13cdc>
   25b6c:	sub	r1, fp, #48	; 0x30
   25b70:	mov	r0, r6
   25b74:	mov	r2, r4
   25b78:	mov	r7, lr
   25b7c:	bl	11c60 <memcpy@plt>
   25b80:	mov	lr, r7
   25b84:	add	ip, r6, r4
   25b88:	cmp	r5, #45	; 0x2d
   25b8c:	mov	r7, #0
   25b90:	mov	r6, #-2147483648	; 0x80000000
   25b94:	subne	r0, r9, r4
   25b98:	bicne	r7, r0, r0, asr #31
   25b9c:	sub	r0, r8, r4
   25ba0:	cmp	r7, r0
   25ba4:	bcs	25fd0 <__assert_fail@plt+0x13f44>
   25ba8:	cmp	ip, #0
   25bac:	cmpne	r7, #0
   25bb0:	beq	25f58 <__assert_fail@plt+0x13ecc>
   25bb4:	uxtb	r0, r5
   25bb8:	cmp	r0, #48	; 0x30
   25bbc:	cmpne	r0, #43	; 0x2b
   25bc0:	bne	25f34 <__assert_fail@plt+0x13ea8>
   25bc4:	mov	r0, ip
   25bc8:	mov	r9, ip
   25bcc:	mov	r1, #48	; 0x30
   25bd0:	b	25f40 <__assert_fail@plt+0x13eb4>
   25bd4:	mov	r1, #32
   25bd8:	mov	r5, r2
   25bdc:	bl	11ef4 <memset@plt>
   25be0:	ldr	r0, [sp, #92]	; 0x5c
   25be4:	ldr	lr, [sp, #84]	; 0x54
   25be8:	add	ip, r0, r5
   25bec:	tst	r7, #1
   25bf0:	beq	25c40 <__assert_fail@plt+0x13bb4>
   25bf4:	ldr	r8, [sp, #24]
   25bf8:	cmp	r9, #0
   25bfc:	beq	25cb8 <__assert_fail@plt+0x13c2c>
   25c00:	cmp	r6, r9
   25c04:	movls	r6, r9
   25c08:	add	r0, r0, r6
   25c0c:	mov	r6, ip
   25c10:	sub	r5, r0, #1
   25c14:	bl	11e40 <__ctype_tolower_loc@plt>
   25c18:	ldr	lr, [sp, #84]	; 0x54
   25c1c:	mov	ip, r6
   25c20:	mov	r1, r9
   25c24:	ldrb	r2, [r8, r1]
   25c28:	ldr	r3, [r0]
   25c2c:	subs	r1, r1, #1
   25c30:	ldr	r2, [r3, r2, lsl #2]
   25c34:	strb	r2, [r5], #-1
   25c38:	bne	25c24 <__assert_fail@plt+0x13b98>
   25c3c:	b	25cb8 <__assert_fail@plt+0x13c2c>
   25c40:	eor	r1, r7, #1
   25c44:	and	r1, r8, r1
   25c48:	tst	r1, #1
   25c4c:	beq	25c9c <__assert_fail@plt+0x13c10>
   25c50:	ldr	r8, [sp, #24]
   25c54:	cmp	r9, #0
   25c58:	beq	25cb8 <__assert_fail@plt+0x13c2c>
   25c5c:	cmp	r6, r9
   25c60:	movls	r6, r9
   25c64:	add	r0, r0, r6
   25c68:	mov	r6, ip
   25c6c:	sub	r5, r0, #1
   25c70:	bl	11e4c <__ctype_toupper_loc@plt>
   25c74:	ldr	lr, [sp, #84]	; 0x54
   25c78:	mov	ip, r6
   25c7c:	mov	r1, r9
   25c80:	ldrb	r2, [r8, r1]
   25c84:	ldr	r3, [r0]
   25c88:	subs	r1, r1, #1
   25c8c:	ldr	r2, [r3, r2, lsl #2]
   25c90:	strb	r2, [r5], #-1
   25c94:	bne	25c80 <__assert_fail@plt+0x13bf4>
   25c98:	b	25cb8 <__assert_fail@plt+0x13c2c>
   25c9c:	ldr	r1, [sp, #44]	; 0x2c
   25ca0:	mov	r0, ip
   25ca4:	mov	r2, r9
   25ca8:	mov	r5, ip
   25cac:	bl	11c60 <memcpy@plt>
   25cb0:	ldr	lr, [sp, #84]	; 0x54
   25cb4:	mov	ip, r5
   25cb8:	add	ip, ip, r9
   25cbc:	mov	r6, #-2147483648	; 0x80000000
   25cc0:	add	lr, r4, lr
   25cc4:	b	255c8 <__assert_fail@plt+0x1353c>
   25cc8:	mov	r0, ip
   25ccc:	mov	r1, #32
   25cd0:	mov	r2, r4
   25cd4:	mov	r5, lr
   25cd8:	mov	r7, ip
   25cdc:	bl	11ef4 <memset@plt>
   25ce0:	mov	ip, r7
   25ce4:	mov	lr, r5
   25ce8:	add	ip, r7, r4
   25cec:	movw	r4, #52428	; 0xcccc
   25cf0:	movt	r4, #3276	; 0xccc
   25cf4:	mov	r0, #10
   25cf8:	strb	r0, [ip], #1
   25cfc:	b	25a74 <__assert_fail@plt+0x139e8>
   25d00:	mov	r0, ip
   25d04:	mov	r1, #32
   25d08:	mov	r2, r4
   25d0c:	mov	r5, lr
   25d10:	mov	r7, ip
   25d14:	bl	11ef4 <memset@plt>
   25d18:	mov	ip, r7
   25d1c:	mov	lr, r5
   25d20:	add	ip, r7, r4
   25d24:	movw	r4, #52428	; 0xcccc
   25d28:	movt	r4, #3276	; 0xccc
   25d2c:	mov	r0, #9
   25d30:	strb	r0, [ip], #1
   25d34:	b	25a74 <__assert_fail@plt+0x139e8>
   25d38:	cmp	ip, #0
   25d3c:	beq	25f94 <__assert_fail@plt+0x13f08>
   25d40:	ldr	lr, [sp, #84]	; 0x54
   25d44:	mov	r7, #100	; 0x64
   25d48:	mov	r4, #1
   25d4c:	mla	r3, r3, r7, ip
   25d50:	mov	ip, #6
   25d54:	mov	r7, #4
   25d58:	cmp	r0, #79	; 0x4f
   25d5c:	moveq	r6, #0
   25d60:	cmpeq	r2, #0
   25d64:	bne	251b4 <__assert_fail@plt+0x13128>
   25d68:	movw	r2, #9504	; 0x2520
   25d6c:	cmp	r0, #0
   25d70:	ldr	r3, [sp, #80]	; 0x50
   25d74:	str	lr, [sp, #84]	; 0x54
   25d78:	strh	r2, [fp, #-53]	; 0xffffffcb
   25d7c:	ldr	r2, [sp, #76]	; 0x4c
   25d80:	strbne	r0, [fp, #-51]	; 0xffffffcd
   25d84:	mov	r0, #0
   25d88:	ldrne	r2, [sp, #60]	; 0x3c
   25d8c:	strb	r0, [r2, #1]
   25d90:	strb	r1, [r2]
   25d94:	add	r0, sp, #104	; 0x68
   25d98:	sub	r2, fp, #53	; 0x35
   25d9c:	mov	r1, #1024	; 0x400
   25da0:	bl	11e28 <strftime@plt>
   25da4:	cmp	r0, #0
   25da8:	beq	25e10 <__assert_fail@plt+0x13d84>
   25dac:	subs	r8, r5, #45	; 0x2d
   25db0:	sub	r4, r0, #1
   25db4:	ldr	lr, [sp, #84]	; 0x54
   25db8:	ldr	r0, [sp, #96]	; 0x60
   25dbc:	movne	r8, r9
   25dc0:	cmp	r9, #0
   25dc4:	mov	r7, r4
   25dc8:	movwlt	r8, #0
   25dcc:	cmp	r8, r4
   25dd0:	movhi	r7, r8
   25dd4:	sub	r0, r0, lr
   25dd8:	cmp	r7, r0
   25ddc:	bcs	25fd0 <__assert_fail@plt+0x13f44>
   25de0:	ldr	r0, [sp, #92]	; 0x5c
   25de4:	cmp	r0, #0
   25de8:	beq	25e38 <__assert_fail@plt+0x13dac>
   25dec:	cmp	r8, r4
   25df0:	mov	r9, r0
   25df4:	bls	25e5c <__assert_fail@plt+0x13dd0>
   25df8:	cmp	r5, #48	; 0x30
   25dfc:	sub	r9, r8, r4
   25e00:	cmpne	r5, #43	; 0x2b
   25e04:	bne	25e40 <__assert_fail@plt+0x13db4>
   25e08:	mov	r1, #48	; 0x30
   25e0c:	b	25e44 <__assert_fail@plt+0x13db8>
   25e10:	ldr	lr, [sp, #84]	; 0x54
   25e14:	ldr	ip, [sp, #92]	; 0x5c
   25e18:	movw	r4, #52428	; 0xcccc
   25e1c:	mov	r6, #-2147483648	; 0x80000000
   25e20:	movt	r4, #3276	; 0xccc
   25e24:	ldrb	r3, [sl, #1]!
   25e28:	mvn	r9, #0
   25e2c:	cmp	r3, #0
   25e30:	bne	2467c <__assert_fail@plt+0x125f0>
   25e34:	b	25fa4 <__assert_fail@plt+0x13f18>
   25e38:	mov	ip, #0
   25e3c:	b	25f10 <__assert_fail@plt+0x13e84>
   25e40:	mov	r1, #32
   25e44:	mov	r2, r9
   25e48:	mov	r5, r0
   25e4c:	bl	11ef4 <memset@plt>
   25e50:	ldr	lr, [sp, #84]	; 0x54
   25e54:	add	r9, r5, r9
   25e58:	mov	r0, r5
   25e5c:	tst	r6, #1
   25e60:	beq	25ea8 <__assert_fail@plt+0x13e1c>
   25e64:	cmp	r4, #0
   25e68:	add	r6, sp, #104	; 0x68
   25e6c:	beq	25f0c <__assert_fail@plt+0x13e80>
   25e70:	cmp	r8, r4
   25e74:	movls	r8, r4
   25e78:	add	r0, r0, r8
   25e7c:	sub	r5, r0, #1
   25e80:	bl	11e40 <__ctype_tolower_loc@plt>
   25e84:	ldr	lr, [sp, #84]	; 0x54
   25e88:	mov	r1, r4
   25e8c:	ldrb	r2, [r6, r1]
   25e90:	ldr	r3, [r0]
   25e94:	subs	r1, r1, #1
   25e98:	ldr	r2, [r3, r2, lsl #2]
   25e9c:	strb	r2, [r5], #-1
   25ea0:	bne	25e8c <__assert_fail@plt+0x13e00>
   25ea4:	b	25f0c <__assert_fail@plt+0x13e80>
   25ea8:	ldr	r1, [sp, #100]	; 0x64
   25eac:	add	r6, sp, #104	; 0x68
   25eb0:	tst	r1, #1
   25eb4:	beq	25ef8 <__assert_fail@plt+0x13e6c>
   25eb8:	cmp	r4, #0
   25ebc:	beq	25f0c <__assert_fail@plt+0x13e80>
   25ec0:	cmp	r8, r4
   25ec4:	movls	r8, r4
   25ec8:	add	r0, r0, r8
   25ecc:	sub	r5, r0, #1
   25ed0:	bl	11e4c <__ctype_toupper_loc@plt>
   25ed4:	ldr	lr, [sp, #84]	; 0x54
   25ed8:	mov	r1, r4
   25edc:	ldrb	r2, [r6, r1]
   25ee0:	ldr	r3, [r0]
   25ee4:	subs	r1, r1, #1
   25ee8:	ldr	r2, [r3, r2, lsl #2]
   25eec:	strb	r2, [r5], #-1
   25ef0:	bne	25edc <__assert_fail@plt+0x13e50>
   25ef4:	b	25f0c <__assert_fail@plt+0x13e80>
   25ef8:	ldr	r1, [sp, #40]	; 0x28
   25efc:	mov	r0, r9
   25f00:	mov	r2, r4
   25f04:	bl	11c60 <memcpy@plt>
   25f08:	ldr	lr, [sp, #84]	; 0x54
   25f0c:	add	ip, r9, r4
   25f10:	movw	r4, #52428	; 0xcccc
   25f14:	add	lr, r7, lr
   25f18:	mov	r6, #-2147483648	; 0x80000000
   25f1c:	movt	r4, #3276	; 0xccc
   25f20:	ldrb	r3, [sl, #1]!
   25f24:	mvn	r9, #0
   25f28:	cmp	r3, #0
   25f2c:	bne	2467c <__assert_fail@plt+0x125f0>
   25f30:	b	25fa4 <__assert_fail@plt+0x13f18>
   25f34:	mov	r0, ip
   25f38:	mov	r9, ip
   25f3c:	mov	r1, #32
   25f40:	mov	r2, r7
   25f44:	mov	r5, lr
   25f48:	bl	11ef4 <memset@plt>
   25f4c:	mov	lr, r5
   25f50:	add	ip, r9, r7
   25f54:	mov	r0, r9
   25f58:	add	r0, r7, lr
   25f5c:	add	lr, r0, r4
   25f60:	b	255c8 <__assert_fail@plt+0x1353c>
   25f64:	mov	r0, ip
   25f68:	mov	r1, #32
   25f6c:	mov	r2, r4
   25f70:	mov	r5, lr
   25f74:	mov	r7, ip
   25f78:	bl	11ef4 <memset@plt>
   25f7c:	ldrb	r1, [sl]
   25f80:	mov	ip, r7
   25f84:	mov	lr, r5
   25f88:	add	ip, r7, r4
   25f8c:	strb	r1, [ip], #1
   25f90:	b	25a6c <__assert_fail@plt+0x139e0>
   25f94:	mov	ip, #3
   25f98:	b	259e8 <__assert_fail@plt+0x1395c>
   25f9c:	mov	lr, #0
   25fa0:	mov	ip, r5
   25fa4:	ldr	r0, [sp, #96]	; 0x60
   25fa8:	ldr	r1, [sp, #64]	; 0x40
   25fac:	cmp	r0, #0
   25fb0:	cmpne	ip, #0
   25fb4:	movne	r0, #0
   25fb8:	strbne	r0, [ip]
   25fbc:	ldr	r0, [sp, #68]	; 0x44
   25fc0:	str	r1, [r0]
   25fc4:	mov	r0, lr
   25fc8:	sub	sp, fp, #28
   25fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fd0:	mov	r0, #34	; 0x22
   25fd4:	ldr	r1, [sp, #68]	; 0x44
   25fd8:	mov	lr, #0
   25fdc:	str	r0, [r1]
   25fe0:	mov	r0, lr
   25fe4:	sub	sp, fp, #28
   25fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fec:	mov	r0, #75	; 0x4b
   25ff0:	b	25fd4 <__assert_fail@plt+0x13f48>

00025ff4 <_obstack_begin@@Base>:
   25ff4:	push	{r4, r5, r6, sl, fp, lr}
   25ff8:	add	fp, sp, #16
   25ffc:	cmp	r1, #0
   26000:	mov	r4, r0
   26004:	str	r3, [r0, #28]
   26008:	mov	r5, r2
   2600c:	movweq	r1, #4072	; 0xfe8
   26010:	cmp	r2, #0
   26014:	str	r1, [r0]
   26018:	ldr	r0, [fp, #8]
   2601c:	movweq	r5, #8
   26020:	sub	r6, r5, #1
   26024:	str	r0, [r4, #32]
   26028:	str	r6, [r4, #24]
   2602c:	ldrb	r0, [r4, #40]	; 0x28
   26030:	and	r0, r0, #254	; 0xfe
   26034:	strb	r0, [r4, #40]	; 0x28
   26038:	mov	r0, r1
   2603c:	blx	r3
   26040:	cmp	r0, #0
   26044:	str	r0, [r4, #4]
   26048:	addne	r1, r6, r0
   2604c:	rsbne	r2, r5, #0
   26050:	addne	r1, r1, #8
   26054:	andne	r1, r1, r2
   26058:	strne	r1, [r4, #12]
   2605c:	strne	r1, [r4, #8]
   26060:	ldrne	r1, [r4]
   26064:	addne	r1, r0, r1
   26068:	strne	r1, [r0]
   2606c:	strne	r1, [r4, #16]
   26070:	movne	r1, #0
   26074:	strne	r1, [r0, #4]
   26078:	ldrbne	r0, [r4, #40]	; 0x28
   2607c:	andne	r0, r0, #249	; 0xf9
   26080:	strbne	r0, [r4, #40]	; 0x28
   26084:	movne	r0, #1
   26088:	popne	{r4, r5, r6, sl, fp, pc}
   2608c:	movw	r0, #688	; 0x2b0
   26090:	movt	r0, #4
   26094:	ldr	r0, [r0]
   26098:	blx	r0

0002609c <_obstack_begin_1@@Base>:
   2609c:	push	{r4, r5, r6, sl, fp, lr}
   260a0:	add	fp, sp, #16
   260a4:	cmp	r1, #0
   260a8:	mov	r4, r0
   260ac:	str	r3, [r0, #28]
   260b0:	mov	r5, r2
   260b4:	movweq	r1, #4072	; 0xfe8
   260b8:	cmp	r2, #0
   260bc:	str	r1, [r0]
   260c0:	ldr	r0, [fp, #8]
   260c4:	movweq	r5, #8
   260c8:	sub	r6, r5, #1
   260cc:	str	r0, [r4, #32]
   260d0:	ldr	r0, [fp, #12]
   260d4:	str	r0, [r4, #36]	; 0x24
   260d8:	str	r6, [r4, #24]
   260dc:	ldrb	r2, [r4, #40]	; 0x28
   260e0:	orr	r2, r2, #1
   260e4:	strb	r2, [r4, #40]	; 0x28
   260e8:	blx	r3
   260ec:	cmp	r0, #0
   260f0:	str	r0, [r4, #4]
   260f4:	addne	r1, r6, r0
   260f8:	rsbne	r2, r5, #0
   260fc:	addne	r1, r1, #8
   26100:	andne	r1, r1, r2
   26104:	strne	r1, [r4, #12]
   26108:	strne	r1, [r4, #8]
   2610c:	ldrne	r1, [r4]
   26110:	addne	r1, r0, r1
   26114:	strne	r1, [r0]
   26118:	strne	r1, [r4, #16]
   2611c:	movne	r1, #0
   26120:	strne	r1, [r0, #4]
   26124:	ldrbne	r0, [r4, #40]	; 0x28
   26128:	andne	r0, r0, #249	; 0xf9
   2612c:	strbne	r0, [r4, #40]	; 0x28
   26130:	movne	r0, #1
   26134:	popne	{r4, r5, r6, sl, fp, pc}
   26138:	movw	r0, #688	; 0x2b0
   2613c:	movt	r0, #4
   26140:	ldr	r0, [r0]
   26144:	blx	r0

00026148 <_obstack_newchunk@@Base>:
   26148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2614c:	add	fp, sp, #28
   26150:	sub	sp, sp, #4
   26154:	mov	r4, r0
   26158:	ldr	r2, [r0]
   2615c:	ldr	r0, [r0, #8]
   26160:	ldr	r3, [r4, #12]
   26164:	sub	r9, r3, r0
   26168:	ldr	r0, [r4, #24]
   2616c:	mov	r3, #0
   26170:	add	r1, r9, r1
   26174:	adds	r6, r1, r0
   26178:	adc	r0, r3, #0
   2617c:	mov	r3, #100	; 0x64
   26180:	add	r3, r3, r9, lsr #3
   26184:	adds	r7, r3, r6
   26188:	movcs	r7, r6
   2618c:	cmp	r7, r2
   26190:	movcc	r7, r2
   26194:	cmp	r1, r9
   26198:	bcc	2629c <_obstack_newchunk@@Base+0x154>
   2619c:	cmp	r0, #0
   261a0:	bne	2629c <_obstack_newchunk@@Base+0x154>
   261a4:	ldrb	r0, [r4, #40]	; 0x28
   261a8:	ldr	r8, [r4, #4]
   261ac:	tst	r0, #1
   261b0:	bne	261d0 <_obstack_newchunk@@Base+0x88>
   261b4:	ldr	r1, [r4, #28]
   261b8:	mov	r0, r7
   261bc:	blx	r1
   261c0:	mov	r6, r0
   261c4:	cmp	r0, #0
   261c8:	bne	261ec <_obstack_newchunk@@Base+0xa4>
   261cc:	b	2629c <_obstack_newchunk@@Base+0x154>
   261d0:	ldr	r2, [r4, #28]
   261d4:	ldr	r0, [r4, #36]	; 0x24
   261d8:	mov	r1, r7
   261dc:	blx	r2
   261e0:	mov	r6, r0
   261e4:	cmp	r0, #0
   261e8:	beq	2629c <_obstack_newchunk@@Base+0x154>
   261ec:	add	r0, r6, r7
   261f0:	str	r6, [r4, #4]
   261f4:	str	r8, [r6, #4]
   261f8:	mov	r2, r9
   261fc:	str	r0, [r4, #16]
   26200:	str	r0, [r6]
   26204:	ldr	r5, [r4, #24]
   26208:	ldr	sl, [r4, #8]
   2620c:	add	r0, r5, r6
   26210:	mov	r1, sl
   26214:	add	r0, r0, #8
   26218:	bic	r7, r0, r5
   2621c:	mov	r0, r7
   26220:	bl	11c60 <memcpy@plt>
   26224:	ldrb	r0, [r4, #40]	; 0x28
   26228:	tst	r0, #2
   2622c:	bne	2627c <_obstack_newchunk@@Base+0x134>
   26230:	add	r1, r5, r8
   26234:	mvn	r0, r5
   26238:	add	r1, r1, #8
   2623c:	and	r0, r1, r0
   26240:	cmp	sl, r0
   26244:	bne	2627c <_obstack_newchunk@@Base+0x134>
   26248:	ldr	r0, [r8, #4]
   2624c:	str	r0, [r6, #4]
   26250:	ldrb	r0, [r4, #40]	; 0x28
   26254:	tst	r0, #1
   26258:	bne	2626c <_obstack_newchunk@@Base+0x124>
   2625c:	ldr	r1, [r4, #32]
   26260:	mov	r0, r8
   26264:	blx	r1
   26268:	b	2627c <_obstack_newchunk@@Base+0x134>
   2626c:	ldr	r2, [r4, #32]
   26270:	ldr	r0, [r4, #36]	; 0x24
   26274:	mov	r1, r8
   26278:	blx	r2
   2627c:	add	r0, r7, r9
   26280:	str	r7, [r4, #8]
   26284:	str	r0, [r4, #12]
   26288:	ldrb	r0, [r4, #40]	; 0x28
   2628c:	and	r0, r0, #253	; 0xfd
   26290:	strb	r0, [r4, #40]	; 0x28
   26294:	sub	sp, fp, #28
   26298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2629c:	movw	r0, #688	; 0x2b0
   262a0:	movt	r0, #4
   262a4:	ldr	r0, [r0]
   262a8:	blx	r0

000262ac <_obstack_allocated_p@@Base>:
   262ac:	ldr	r2, [r0, #4]
   262b0:	mov	r0, #0
   262b4:	cmp	r2, #0
   262b8:	bxeq	lr
   262bc:	cmp	r2, r1
   262c0:	bcc	262d8 <_obstack_allocated_p@@Base+0x2c>
   262c4:	ldr	r2, [r2, #4]
   262c8:	cmp	r2, #0
   262cc:	bxeq	lr
   262d0:	cmp	r2, r1
   262d4:	bcs	262c4 <_obstack_allocated_p@@Base+0x18>
   262d8:	ldr	r3, [r2]
   262dc:	cmp	r3, r1
   262e0:	bcc	262c4 <_obstack_allocated_p@@Base+0x18>
   262e4:	mov	r0, #1
   262e8:	bx	lr

000262ec <_obstack_free@@Base>:
   262ec:	push	{r4, r5, r6, sl, fp, lr}
   262f0:	add	fp, sp, #16
   262f4:	mov	r5, r1
   262f8:	ldr	r1, [r0, #4]
   262fc:	cmp	r1, #0
   26300:	beq	26360 <_obstack_free@@Base+0x74>
   26304:	mov	r4, r0
   26308:	cmp	r1, r5
   2630c:	bcs	2631c <_obstack_free@@Base+0x30>
   26310:	ldr	r0, [r1]
   26314:	cmp	r0, r5
   26318:	bcs	2636c <_obstack_free@@Base+0x80>
   2631c:	ldrb	r0, [r4, #40]	; 0x28
   26320:	ldr	r6, [r1, #4]
   26324:	tst	r0, #1
   26328:	bne	2633c <_obstack_free@@Base+0x50>
   2632c:	ldr	r2, [r4, #32]
   26330:	mov	r0, r1
   26334:	blx	r2
   26338:	b	26348 <_obstack_free@@Base+0x5c>
   2633c:	ldr	r2, [r4, #32]
   26340:	ldr	r0, [r4, #36]	; 0x24
   26344:	blx	r2
   26348:	ldrb	r0, [r4, #40]	; 0x28
   2634c:	cmp	r6, #0
   26350:	mov	r1, r6
   26354:	orr	r0, r0, #2
   26358:	strb	r0, [r4, #40]	; 0x28
   2635c:	bne	26308 <_obstack_free@@Base+0x1c>
   26360:	cmp	r5, #0
   26364:	popeq	{r4, r5, r6, sl, fp, pc}
   26368:	bl	12038 <abort@plt>
   2636c:	str	r5, [r4, #8]
   26370:	str	r5, [r4, #12]
   26374:	ldr	r0, [r1]
   26378:	str	r1, [r4, #4]
   2637c:	str	r0, [r4, #16]
   26380:	pop	{r4, r5, r6, sl, fp, pc}

00026384 <_obstack_memory_used@@Base>:
   26384:	ldr	r1, [r0, #4]
   26388:	mov	r0, #0
   2638c:	b	263a0 <_obstack_memory_used@@Base+0x1c>
   26390:	ldr	r2, [r1]
   26394:	sub	r0, r0, r1
   26398:	ldr	r1, [r1, #4]
   2639c:	add	r0, r0, r2
   263a0:	cmp	r1, #0
   263a4:	bxeq	lr
   263a8:	b	26390 <_obstack_memory_used@@Base+0xc>
   263ac:	push	{fp, lr}
   263b0:	mov	fp, sp
   263b4:	movw	r0, #776	; 0x308
   263b8:	movw	r1, #63119	; 0xf68f
   263bc:	mov	r2, #5
   263c0:	movt	r0, #4
   263c4:	movt	r1, #2
   263c8:	ldr	r4, [r0]
   263cc:	mov	r0, #0
   263d0:	bl	11cb4 <dcgettext@plt>
   263d4:	movw	r2, #63384	; 0xf798
   263d8:	mov	r3, r0
   263dc:	mov	r0, r4
   263e0:	mov	r1, #1
   263e4:	movt	r2, #2
   263e8:	bl	11f24 <__fprintf_chk@plt>
   263ec:	movw	r0, #684	; 0x2ac
   263f0:	movt	r0, #4
   263f4:	ldr	r0, [r0]
   263f8:	bl	11e88 <exit@plt>
   263fc:	push	{r4, r5, fp, lr}
   26400:	add	fp, sp, #8
   26404:	cmp	r0, #0
   26408:	beq	2649c <_obstack_memory_used@@Base+0x118>
   2640c:	mov	r1, #47	; 0x2f
   26410:	mov	r4, r0
   26414:	bl	11f84 <strrchr@plt>
   26418:	cmp	r0, #0
   2641c:	mov	r5, r4
   26420:	addne	r5, r0, #1
   26424:	sub	r0, r5, r4
   26428:	cmp	r0, #7
   2642c:	blt	26480 <_obstack_memory_used@@Base+0xfc>
   26430:	movw	r1, #63192	; 0xf6d8
   26434:	sub	r0, r5, #7
   26438:	mov	r2, #7
   2643c:	movt	r1, #2
   26440:	bl	1202c <strncmp@plt>
   26444:	cmp	r0, #0
   26448:	bne	26480 <_obstack_memory_used@@Base+0xfc>
   2644c:	movw	r1, #63200	; 0xf6e0
   26450:	mov	r0, r5
   26454:	mov	r2, #3
   26458:	movt	r1, #2
   2645c:	bl	1202c <strncmp@plt>
   26460:	cmp	r0, #0
   26464:	beq	26470 <_obstack_memory_used@@Base+0xec>
   26468:	mov	r4, r5
   2646c:	b	26480 <_obstack_memory_used@@Base+0xfc>
   26470:	movw	r0, #760	; 0x2f8
   26474:	add	r4, r5, #3
   26478:	movt	r0, #4
   2647c:	str	r4, [r0]
   26480:	movw	r0, #764	; 0x2fc
   26484:	movt	r0, #4
   26488:	str	r4, [r0]
   2648c:	movw	r0, #5048	; 0x13b8
   26490:	movt	r0, #4
   26494:	str	r4, [r0]
   26498:	pop	{r4, r5, fp, pc}
   2649c:	movw	r0, #776	; 0x308
   264a0:	mov	r1, #55	; 0x37
   264a4:	mov	r2, #1
   264a8:	movt	r0, #4
   264ac:	ldr	r3, [r0]
   264b0:	movw	r0, #63136	; 0xf6a0
   264b4:	movt	r0, #2
   264b8:	bl	11d50 <fwrite@plt>
   264bc:	bl	12038 <abort@plt>
   264c0:	push	{r4, r5, r6, sl, fp, lr}
   264c4:	add	fp, sp, #16
   264c8:	mov	r4, r0
   264cc:	movw	r0, #5056	; 0x13c0
   264d0:	movt	r0, #4
   264d4:	cmp	r4, #0
   264d8:	moveq	r4, r0
   264dc:	bl	11ed0 <__errno_location@plt>
   264e0:	ldr	r6, [r0]
   264e4:	mov	r5, r0
   264e8:	mov	r0, r4
   264ec:	mov	r1, #48	; 0x30
   264f0:	bl	29b58 <_obstack_memory_used@@Base+0x37d4>
   264f4:	str	r6, [r5]
   264f8:	pop	{r4, r5, r6, sl, fp, pc}
   264fc:	movw	r1, #5056	; 0x13c0
   26500:	cmp	r0, #0
   26504:	movt	r1, #4
   26508:	movne	r1, r0
   2650c:	ldr	r0, [r1]
   26510:	bx	lr
   26514:	movw	r2, #5056	; 0x13c0
   26518:	cmp	r0, #0
   2651c:	movt	r2, #4
   26520:	movne	r2, r0
   26524:	str	r1, [r2]
   26528:	bx	lr
   2652c:	movw	r3, #5056	; 0x13c0
   26530:	cmp	r0, #0
   26534:	movt	r3, #4
   26538:	movne	r3, r0
   2653c:	ubfx	r0, r1, #5, #3
   26540:	and	r1, r1, #31
   26544:	add	r0, r3, r0, lsl #2
   26548:	ldr	r3, [r0, #8]
   2654c:	eor	r2, r2, r3, lsr r1
   26550:	and	r2, r2, #1
   26554:	eor	r2, r3, r2, lsl r1
   26558:	str	r2, [r0, #8]
   2655c:	mov	r0, #1
   26560:	and	r0, r0, r3, lsr r1
   26564:	bx	lr
   26568:	movw	r2, #5056	; 0x13c0
   2656c:	cmp	r0, #0
   26570:	movt	r2, #4
   26574:	movne	r2, r0
   26578:	ldr	r0, [r2, #4]
   2657c:	str	r1, [r2, #4]
   26580:	bx	lr
   26584:	movw	r3, #5056	; 0x13c0
   26588:	cmp	r0, #0
   2658c:	movt	r3, #4
   26590:	movne	r3, r0
   26594:	cmp	r1, #0
   26598:	mov	r0, #10
   2659c:	cmpne	r2, #0
   265a0:	str	r0, [r3]
   265a4:	bne	265b4 <_obstack_memory_used@@Base+0x230>
   265a8:	push	{fp, lr}
   265ac:	mov	fp, sp
   265b0:	bl	12038 <abort@plt>
   265b4:	str	r1, [r3, #40]	; 0x28
   265b8:	str	r2, [r3, #44]	; 0x2c
   265bc:	bx	lr
   265c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265c4:	add	fp, sp, #28
   265c8:	sub	sp, sp, #20
   265cc:	mov	r7, r0
   265d0:	ldr	r0, [fp, #8]
   265d4:	movw	r5, #5056	; 0x13c0
   265d8:	mov	r8, r3
   265dc:	mov	r9, r2
   265e0:	mov	sl, r1
   265e4:	movt	r5, #4
   265e8:	cmp	r0, #0
   265ec:	movne	r5, r0
   265f0:	bl	11ed0 <__errno_location@plt>
   265f4:	mov	r4, r0
   265f8:	ldm	r5, {r0, r1}
   265fc:	ldr	r2, [r5, #40]	; 0x28
   26600:	ldr	r3, [r5, #44]	; 0x2c
   26604:	add	r5, r5, #8
   26608:	ldr	r6, [r4]
   2660c:	stm	sp, {r0, r1, r5}
   26610:	str	r2, [sp, #12]
   26614:	str	r3, [sp, #16]
   26618:	mov	r0, r7
   2661c:	mov	r1, sl
   26620:	mov	r2, r9
   26624:	mov	r3, r8
   26628:	bl	26638 <_obstack_memory_used@@Base+0x2b4>
   2662c:	str	r6, [r4]
   26630:	sub	sp, fp, #28
   26634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2663c:	add	fp, sp, #28
   26640:	sub	sp, sp, #156	; 0x9c
   26644:	str	r0, [sp, #76]	; 0x4c
   26648:	ldr	r0, [fp, #12]
   2664c:	mov	r6, r1
   26650:	str	r3, [sp, #84]	; 0x54
   26654:	str	r2, [fp, #-84]	; 0xffffffac
   26658:	and	r1, r0, #4
   2665c:	str	r1, [sp, #24]
   26660:	and	r1, r0, #1
   26664:	str	r1, [sp, #28]
   26668:	ubfx	r8, r0, #1, #1
   2666c:	bl	11d74 <__ctype_get_mb_cur_max@plt>
   26670:	str	r0, [sp, #32]
   26674:	ldr	r0, [fp, #24]
   26678:	ldr	r7, [fp, #8]
   2667c:	mov	r1, #0
   26680:	mov	r2, #0
   26684:	mov	r4, #1
   26688:	str	r1, [sp, #52]	; 0x34
   2668c:	str	r0, [sp, #72]	; 0x48
   26690:	ldr	r0, [fp, #20]
   26694:	str	r0, [sp, #68]	; 0x44
   26698:	mov	r0, #0
   2669c:	str	r0, [sp, #48]	; 0x30
   266a0:	mov	r0, #0
   266a4:	str	r0, [sp, #92]	; 0x5c
   266a8:	mov	r0, #0
   266ac:	str	r0, [fp, #-76]	; 0xffffffb4
   266b0:	mov	r0, #0
   266b4:	cmp	r7, #10
   266b8:	bhi	279a0 <_obstack_memory_used@@Base+0x161c>
   266bc:	add	r1, pc, #28
   266c0:	mov	sl, r6
   266c4:	ldr	r6, [sp, #76]	; 0x4c
   266c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   266cc:	ldr	lr, [sp, #84]	; 0x54
   266d0:	mov	r9, #0
   266d4:	mov	r3, #1
   266d8:	mov	r5, #0
   266dc:	ldr	pc, [r1, r7, lsl #2]
   266e0:			; <UNDEFINED> instruction: 0x000267b0
   266e4:	andeq	r6, r2, ip, ror #15
   266e8:	andeq	r6, r2, r0, asr #15
   266ec:	andeq	r6, r2, r8, lsr #15
   266f0:	andeq	r6, r2, r0, ror #15
   266f4:	andeq	r6, r2, r4, lsl r8
   266f8:	ldrdeq	r6, [r2], -r0
   266fc:	andeq	r6, r2, r0, lsr #20
   26700:	andeq	r6, r2, ip, lsl #14
   26704:	andeq	r6, r2, ip, lsl #14
   26708:			; <UNDEFINED> instruction: 0x000269b4
   2670c:	mov	r9, r4
   26710:	movw	r4, #63274	; 0xf72a
   26714:	mov	r5, r8
   26718:	mov	r8, r2
   2671c:	mov	r0, #0
   26720:	mov	r2, #5
   26724:	movt	r4, #2
   26728:	mov	r1, r4
   2672c:	bl	11cb4 <dcgettext@plt>
   26730:	cmp	r0, r4
   26734:	str	r0, [sp, #68]	; 0x44
   26738:	bne	268c8 <_obstack_memory_used@@Base+0x544>
   2673c:	bl	2afc8 <_obstack_memory_used@@Base+0x4c44>
   26740:	ldrb	r1, [r0]
   26744:	and	r1, r1, #223	; 0xdf
   26748:	cmp	r1, #71	; 0x47
   2674c:	beq	26894 <_obstack_memory_used@@Base+0x510>
   26750:	cmp	r1, #85	; 0x55
   26754:	bne	268ac <_obstack_memory_used@@Base+0x528>
   26758:	ldrb	r1, [r0, #1]
   2675c:	and	r1, r1, #223	; 0xdf
   26760:	cmp	r1, #84	; 0x54
   26764:	bne	268ac <_obstack_memory_used@@Base+0x528>
   26768:	ldrb	r1, [r0, #2]
   2676c:	and	r1, r1, #223	; 0xdf
   26770:	cmp	r1, #70	; 0x46
   26774:	bne	268ac <_obstack_memory_used@@Base+0x528>
   26778:	ldrb	r1, [r0, #3]
   2677c:	cmp	r1, #45	; 0x2d
   26780:	ldrbeq	r1, [r0, #4]
   26784:	cmpeq	r1, #56	; 0x38
   26788:	bne	268ac <_obstack_memory_used@@Base+0x528>
   2678c:	ldrb	r0, [r0, #5]
   26790:	cmp	r0, #0
   26794:	movw	r0, #63276	; 0xf72c
   26798:	movt	r0, #2
   2679c:	str	r0, [sp, #68]	; 0x44
   267a0:	bne	268ac <_obstack_memory_used@@Base+0x528>
   267a4:	b	268c8 <_obstack_memory_used@@Base+0x544>
   267a8:	mov	r0, #1
   267ac:	b	267ec <_obstack_memory_used@@Base+0x468>
   267b0:	mov	r7, #0
   267b4:	mov	r9, #0
   267b8:	mov	r3, r0
   267bc:	b	2688c <_obstack_memory_used@@Base+0x508>
   267c0:	tst	r8, #1
   267c4:	bne	267ec <_obstack_memory_used@@Base+0x468>
   267c8:	mov	r3, r0
   267cc:	b	26844 <_obstack_memory_used@@Base+0x4c0>
   267d0:	mov	r0, #1
   267d4:	mov	r9, #0
   267d8:	mov	r7, #5
   267dc:	b	26828 <_obstack_memory_used@@Base+0x4a4>
   267e0:	mov	r3, #1
   267e4:	tst	r8, #1
   267e8:	beq	26844 <_obstack_memory_used@@Base+0x4c0>
   267ec:	mov	r1, #1
   267f0:	mov	r9, #0
   267f4:	mov	r7, #2
   267f8:	mov	r3, r0
   267fc:	mov	r5, #1
   26800:	str	r1, [fp, #-76]	; 0xffffffb4
   26804:	movw	r1, #64188	; 0xfabc
   26808:	movt	r1, #2
   2680c:	str	r1, [sp, #92]	; 0x5c
   26810:	b	26a20 <_obstack_memory_used@@Base+0x69c>
   26814:	mov	r7, #5
   26818:	tst	r8, #1
   2681c:	beq	26864 <_obstack_memory_used@@Base+0x4e0>
   26820:	mov	r0, #1
   26824:	mov	r9, #0
   26828:	str	r0, [fp, #-76]	; 0xffffffb4
   2682c:	movw	r0, #63272	; 0xf728
   26830:	mov	r3, #1
   26834:	mov	r5, #1
   26838:	movt	r0, #2
   2683c:	str	r0, [sp, #92]	; 0x5c
   26840:	b	26a20 <_obstack_memory_used@@Base+0x69c>
   26844:	cmp	sl, #0
   26848:	mov	r9, #1
   2684c:	mov	r7, #2
   26850:	movne	r0, #39	; 0x27
   26854:	strbne	r0, [r6]
   26858:	movw	r0, #64188	; 0xfabc
   2685c:	movt	r0, #2
   26860:	b	26880 <_obstack_memory_used@@Base+0x4fc>
   26864:	cmp	sl, #0
   26868:	mov	r9, #1
   2686c:	mov	r3, #1
   26870:	movne	r0, #34	; 0x22
   26874:	strbne	r0, [r6]
   26878:	movw	r0, #63272	; 0xf728
   2687c:	movt	r0, #2
   26880:	str	r0, [sp, #92]	; 0x5c
   26884:	mov	r0, #1
   26888:	str	r0, [fp, #-76]	; 0xffffffb4
   2688c:	mov	r5, #0
   26890:	b	26a20 <_obstack_memory_used@@Base+0x69c>
   26894:	ldrb	r1, [r0, #1]
   26898:	and	r1, r1, #223	; 0xdf
   2689c:	cmp	r1, #66	; 0x42
   268a0:	ldrbeq	r1, [r0, #2]
   268a4:	cmpeq	r1, #49	; 0x31
   268a8:	beq	277c8 <_obstack_memory_used@@Base+0x1444>
   268ac:	movw	r0, #64188	; 0xfabc
   268b0:	movw	r1, #63272	; 0xf728
   268b4:	cmp	r7, #9
   268b8:	movt	r0, #2
   268bc:	movt	r1, #2
   268c0:	moveq	r0, r1
   268c4:	str	r0, [sp, #68]	; 0x44
   268c8:	movw	r4, #64188	; 0xfabc
   268cc:	mov	r0, #0
   268d0:	mov	r2, #5
   268d4:	movt	r4, #2
   268d8:	mov	r1, r4
   268dc:	bl	11cb4 <dcgettext@plt>
   268e0:	cmp	r0, r4
   268e4:	str	r0, [sp, #72]	; 0x48
   268e8:	beq	268f8 <_obstack_memory_used@@Base+0x574>
   268ec:	mov	r4, r9
   268f0:	mov	r2, r8
   268f4:	b	269b0 <_obstack_memory_used@@Base+0x62c>
   268f8:	bl	2afc8 <_obstack_memory_used@@Base+0x4c44>
   268fc:	ldrb	r1, [r0]
   26900:	mov	r4, r9
   26904:	and	r1, r1, #223	; 0xdf
   26908:	cmp	r1, #71	; 0x47
   2690c:	beq	26968 <_obstack_memory_used@@Base+0x5e4>
   26910:	cmp	r1, #85	; 0x55
   26914:	mov	r2, r8
   26918:	bne	26990 <_obstack_memory_used@@Base+0x60c>
   2691c:	ldrb	r1, [r0, #1]
   26920:	and	r1, r1, #223	; 0xdf
   26924:	cmp	r1, #84	; 0x54
   26928:	bne	26990 <_obstack_memory_used@@Base+0x60c>
   2692c:	ldrb	r1, [r0, #2]
   26930:	and	r1, r1, #223	; 0xdf
   26934:	cmp	r1, #70	; 0x46
   26938:	ldrbeq	r1, [r0, #3]
   2693c:	cmpeq	r1, #45	; 0x2d
   26940:	bne	26990 <_obstack_memory_used@@Base+0x60c>
   26944:	ldrb	r1, [r0, #4]
   26948:	cmp	r1, #56	; 0x38
   2694c:	ldrbeq	r0, [r0, #5]
   26950:	cmpeq	r0, #0
   26954:	bne	26990 <_obstack_memory_used@@Base+0x60c>
   26958:	movw	r0, #63280	; 0xf730
   2695c:	movt	r0, #2
   26960:	str	r0, [sp, #72]	; 0x48
   26964:	b	269b0 <_obstack_memory_used@@Base+0x62c>
   26968:	ldrb	r1, [r0, #1]
   2696c:	mov	r2, r8
   26970:	and	r1, r1, #223	; 0xdf
   26974:	cmp	r1, #66	; 0x42
   26978:	bne	26990 <_obstack_memory_used@@Base+0x60c>
   2697c:	ldrb	r1, [r0, #2]
   26980:	cmp	r1, #49	; 0x31
   26984:	ldrbeq	r1, [r0, #3]
   26988:	cmpeq	r1, #56	; 0x38
   2698c:	beq	2780c <_obstack_memory_used@@Base+0x1488>
   26990:	movw	r0, #64188	; 0xfabc
   26994:	cmp	r7, #9
   26998:	movt	r0, #2
   2699c:	mov	r1, r0
   269a0:	movw	r0, #63272	; 0xf728
   269a4:	movt	r0, #2
   269a8:	moveq	r1, r0
   269ac:	str	r1, [sp, #72]	; 0x48
   269b0:	mov	r8, r5
   269b4:	mov	r9, #0
   269b8:	tst	r8, #1
   269bc:	mov	r5, r8
   269c0:	str	r2, [fp, #-48]	; 0xffffffd0
   269c4:	bne	269fc <_obstack_memory_used@@Base+0x678>
   269c8:	ldr	r0, [sp, #68]	; 0x44
   269cc:	ldrb	r0, [r0]
   269d0:	cmp	r0, #0
   269d4:	beq	269fc <_obstack_memory_used@@Base+0x678>
   269d8:	ldr	r1, [sp, #68]	; 0x44
   269dc:	mov	r9, #0
   269e0:	add	r1, r1, #1
   269e4:	cmp	r9, sl
   269e8:	strbcc	r0, [r6, r9]
   269ec:	ldrb	r0, [r1, r9]
   269f0:	add	r9, r9, #1
   269f4:	cmp	r0, #0
   269f8:	bne	269e4 <_obstack_memory_used@@Base+0x660>
   269fc:	ldr	r8, [sp, #72]	; 0x48
   26a00:	mov	r0, r8
   26a04:	bl	11eac <strlen@plt>
   26a08:	ldr	ip, [fp, #-84]	; 0xffffffac
   26a0c:	ldr	lr, [sp, #84]	; 0x54
   26a10:	ldr	r2, [fp, #-48]	; 0xffffffd0
   26a14:	str	r0, [fp, #-76]	; 0xffffffb4
   26a18:	str	r8, [sp, #92]	; 0x5c
   26a1c:	mov	r3, #1
   26a20:	ldr	r0, [fp, #16]
   26a24:	str	r7, [fp, #-64]	; 0xffffffc0
   26a28:	str	r5, [fp, #-72]	; 0xffffffb8
   26a2c:	str	r3, [sp, #80]	; 0x50
   26a30:	cmp	r0, #0
   26a34:	movwne	r0, #1
   26a38:	and	r0, r0, r5
   26a3c:	str	r0, [fp, #-88]	; 0xffffffa8
   26a40:	ldr	r0, [fp, #-76]	; 0xffffffb4
   26a44:	cmp	r0, #0
   26a48:	movwne	r0, #1
   26a4c:	subs	r7, r7, #2
   26a50:	and	r1, r0, r5
   26a54:	str	r7, [fp, #-80]	; 0xffffffb0
   26a58:	and	r1, r3, r1
   26a5c:	str	r1, [sp, #40]	; 0x28
   26a60:	clz	r1, r7
   26a64:	lsr	r1, r1, #5
   26a68:	and	r1, r1, r5
   26a6c:	eor	r5, r5, #1
   26a70:	str	r1, [sp, #36]	; 0x24
   26a74:	mov	r1, r7
   26a78:	str	r5, [sp, #88]	; 0x58
   26a7c:	mov	r7, #0
   26a80:	movwne	r1, #1
   26a84:	orr	r5, r1, r5
   26a88:	and	r1, r1, r3
   26a8c:	and	r0, r0, r1
   26a90:	str	r5, [sp, #60]	; 0x3c
   26a94:	str	r1, [fp, #-68]	; 0xffffffbc
   26a98:	str	r0, [fp, #-60]	; 0xffffffc4
   26a9c:	eor	r0, r3, #1
   26aa0:	str	r0, [sp, #44]	; 0x2c
   26aa4:	cmn	lr, #1
   26aa8:	beq	26ab8 <_obstack_memory_used@@Base+0x734>
   26aac:	cmp	r7, lr
   26ab0:	bne	26ac4 <_obstack_memory_used@@Base+0x740>
   26ab4:	b	2773c <_obstack_memory_used@@Base+0x13b8>
   26ab8:	ldrb	r0, [ip, r7]
   26abc:	cmp	r0, #0
   26ac0:	beq	27744 <_obstack_memory_used@@Base+0x13c0>
   26ac4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   26ac8:	mov	r8, #0
   26acc:	str	r4, [fp, #-52]	; 0xffffffcc
   26ad0:	str	r2, [fp, #-48]	; 0xffffffd0
   26ad4:	cmp	r0, #0
   26ad8:	beq	26b0c <_obstack_memory_used@@Base+0x788>
   26adc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   26ae0:	add	r4, r7, r0
   26ae4:	cmp	r0, #2
   26ae8:	bcc	26b04 <_obstack_memory_used@@Base+0x780>
   26aec:	cmn	lr, #1
   26af0:	bne	26b04 <_obstack_memory_used@@Base+0x780>
   26af4:	mov	r0, ip
   26af8:	bl	11eac <strlen@plt>
   26afc:	ldr	ip, [fp, #-84]	; 0xffffffac
   26b00:	mov	lr, r0
   26b04:	cmp	r4, lr
   26b08:	bls	26b24 <_obstack_memory_used@@Base+0x7a0>
   26b0c:	mov	r0, #0
   26b10:	str	r0, [fp, #-56]	; 0xffffffc8
   26b14:	ldrb	r5, [ip, r7]
   26b18:	cmp	r5, #126	; 0x7e
   26b1c:	bls	26b74 <_obstack_memory_used@@Base+0x7f0>
   26b20:	b	26f7c <_obstack_memory_used@@Base+0xbf8>
   26b24:	ldr	r1, [sp, #92]	; 0x5c
   26b28:	ldr	r2, [fp, #-76]	; 0xffffffb4
   26b2c:	add	r0, ip, r7
   26b30:	mov	r4, lr
   26b34:	bl	11c9c <memcmp@plt>
   26b38:	ldr	r2, [sp, #88]	; 0x58
   26b3c:	cmp	r0, #0
   26b40:	mov	r1, r0
   26b44:	movwne	r1, #1
   26b48:	orr	r1, r1, r2
   26b4c:	tst	r1, #1
   26b50:	beq	27850 <_obstack_memory_used@@Base+0x14cc>
   26b54:	ldr	ip, [fp, #-84]	; 0xffffffac
   26b58:	clz	r0, r0
   26b5c:	mov	lr, r4
   26b60:	lsr	r0, r0, #5
   26b64:	str	r0, [fp, #-56]	; 0xffffffc8
   26b68:	ldrb	r5, [ip, r7]
   26b6c:	cmp	r5, #126	; 0x7e
   26b70:	bhi	26f7c <_obstack_memory_used@@Base+0xbf8>
   26b74:	add	r3, pc, #16
   26b78:	mov	r4, #1
   26b7c:	mov	r2, #110	; 0x6e
   26b80:	mov	r0, #97	; 0x61
   26b84:	mov	r1, #0
   26b88:	ldr	pc, [r3, r5, lsl #2]
   26b8c:	andeq	r6, r2, ip, asr lr
   26b90:	andeq	r6, r2, ip, ror pc
   26b94:	andeq	r6, r2, ip, ror pc
   26b98:	andeq	r6, r2, ip, ror pc
   26b9c:	andeq	r6, r2, ip, ror pc
   26ba0:	andeq	r6, r2, ip, ror pc
   26ba4:	andeq	r6, r2, ip, ror pc
   26ba8:	andeq	r7, r2, r8, asr r0
   26bac:	andeq	r6, r2, ip, lsr lr
   26bb0:	andeq	r6, r2, r4, lsr #28
   26bb4:	andeq	r6, r2, r8, asr #28
   26bb8:	ldrdeq	r6, [r2], -r8
   26bbc:	andeq	r6, r2, ip, lsl lr
   26bc0:	andeq	r6, r2, r4, asr #28
   26bc4:	andeq	r6, r2, ip, ror pc
   26bc8:	andeq	r6, r2, ip, ror pc
   26bcc:	andeq	r6, r2, ip, ror pc
   26bd0:	andeq	r6, r2, ip, ror pc
   26bd4:	andeq	r6, r2, ip, ror pc
   26bd8:	andeq	r6, r2, ip, ror pc
   26bdc:	andeq	r6, r2, ip, ror pc
   26be0:	andeq	r6, r2, ip, ror pc
   26be4:	andeq	r6, r2, ip, ror pc
   26be8:	andeq	r6, r2, ip, ror pc
   26bec:	andeq	r6, r2, ip, ror pc
   26bf0:	andeq	r6, r2, ip, ror pc
   26bf4:	andeq	r6, r2, ip, ror pc
   26bf8:	andeq	r6, r2, ip, ror pc
   26bfc:	andeq	r6, r2, ip, ror pc
   26c00:	andeq	r6, r2, ip, ror pc
   26c04:	andeq	r6, r2, ip, ror pc
   26c08:	andeq	r6, r2, ip, ror pc
   26c0c:	ldrdeq	r6, [r2], -r4
   26c10:	ldrdeq	r6, [r2], -r8
   26c14:	ldrdeq	r6, [r2], -r8
   26c18:	andeq	r6, r2, r8, lsr #27
   26c1c:	ldrdeq	r6, [r2], -r8
   26c20:	andeq	r6, r2, r8, lsl #27
   26c24:	ldrdeq	r6, [r2], -r8
   26c28:	andeq	r6, r2, r0, ror #29
   26c2c:	ldrdeq	r6, [r2], -r8
   26c30:	ldrdeq	r6, [r2], -r8
   26c34:	ldrdeq	r6, [r2], -r8
   26c38:	andeq	r6, r2, r8, lsl #27
   26c3c:	andeq	r6, r2, r8, lsl #27
   26c40:	andeq	r6, r2, r8, lsl #27
   26c44:	andeq	r6, r2, r8, lsl #27
   26c48:	andeq	r6, r2, r8, lsl #27
   26c4c:	andeq	r6, r2, r8, lsl #27
   26c50:	andeq	r6, r2, r8, lsl #27
   26c54:	andeq	r6, r2, r8, lsl #27
   26c58:	andeq	r6, r2, r8, lsl #27
   26c5c:	andeq	r6, r2, r8, lsl #27
   26c60:	andeq	r6, r2, r8, lsl #27
   26c64:	andeq	r6, r2, r8, lsl #27
   26c68:	andeq	r6, r2, r8, lsl #27
   26c6c:	andeq	r6, r2, r8, lsl #27
   26c70:	andeq	r6, r2, r8, lsl #27
   26c74:	andeq	r6, r2, r8, lsl #27
   26c78:	ldrdeq	r6, [r2], -r8
   26c7c:	ldrdeq	r6, [r2], -r8
   26c80:	ldrdeq	r6, [r2], -r8
   26c84:	ldrdeq	r6, [r2], -r8
   26c88:	muleq	r2, ip, lr
   26c8c:	andeq	r6, r2, ip, ror pc
   26c90:	andeq	r6, r2, r8, lsl #27
   26c94:	andeq	r6, r2, r8, lsl #27
   26c98:	andeq	r6, r2, r8, lsl #27
   26c9c:	andeq	r6, r2, r8, lsl #27
   26ca0:	andeq	r6, r2, r8, lsl #27
   26ca4:	andeq	r6, r2, r8, lsl #27
   26ca8:	andeq	r6, r2, r8, lsl #27
   26cac:	andeq	r6, r2, r8, lsl #27
   26cb0:	andeq	r6, r2, r8, lsl #27
   26cb4:	andeq	r6, r2, r8, lsl #27
   26cb8:	andeq	r6, r2, r8, lsl #27
   26cbc:	andeq	r6, r2, r8, lsl #27
   26cc0:	andeq	r6, r2, r8, lsl #27
   26cc4:	andeq	r6, r2, r8, lsl #27
   26cc8:	andeq	r6, r2, r8, lsl #27
   26ccc:	andeq	r6, r2, r8, lsl #27
   26cd0:	andeq	r6, r2, r8, lsl #27
   26cd4:	andeq	r6, r2, r8, lsl #27
   26cd8:	andeq	r6, r2, r8, lsl #27
   26cdc:	andeq	r6, r2, r8, lsl #27
   26ce0:	andeq	r6, r2, r8, lsl #27
   26ce4:	andeq	r6, r2, r8, lsl #27
   26ce8:	andeq	r6, r2, r8, lsl #27
   26cec:	andeq	r6, r2, r8, lsl #27
   26cf0:	andeq	r6, r2, r8, lsl #27
   26cf4:	andeq	r6, r2, r8, lsl #27
   26cf8:	ldrdeq	r6, [r2], -r8
   26cfc:	andeq	r6, r2, r8, ror #27
   26d00:	andeq	r6, r2, r8, lsl #27
   26d04:	ldrdeq	r6, [r2], -r8
   26d08:	andeq	r6, r2, r8, lsl #27
   26d0c:	ldrdeq	r6, [r2], -r8
   26d10:	andeq	r6, r2, r8, lsl #27
   26d14:	andeq	r6, r2, r8, lsl #27
   26d18:	andeq	r6, r2, r8, lsl #27
   26d1c:	andeq	r6, r2, r8, lsl #27
   26d20:	andeq	r6, r2, r8, lsl #27
   26d24:	andeq	r6, r2, r8, lsl #27
   26d28:	andeq	r6, r2, r8, lsl #27
   26d2c:	andeq	r6, r2, r8, lsl #27
   26d30:	andeq	r6, r2, r8, lsl #27
   26d34:	andeq	r6, r2, r8, lsl #27
   26d38:	andeq	r6, r2, r8, lsl #27
   26d3c:	andeq	r6, r2, r8, lsl #27
   26d40:	andeq	r6, r2, r8, lsl #27
   26d44:	andeq	r6, r2, r8, lsl #27
   26d48:	andeq	r6, r2, r8, lsl #27
   26d4c:	andeq	r6, r2, r8, lsl #27
   26d50:	andeq	r6, r2, r8, lsl #27
   26d54:	andeq	r6, r2, r8, lsl #27
   26d58:	andeq	r6, r2, r8, lsl #27
   26d5c:	andeq	r6, r2, r8, lsl #27
   26d60:	andeq	r6, r2, r8, lsl #27
   26d64:	andeq	r6, r2, r8, lsl #27
   26d68:	andeq	r6, r2, r8, lsl #27
   26d6c:	andeq	r6, r2, r8, lsl #27
   26d70:	andeq	r6, r2, r8, lsl #27
   26d74:	andeq	r6, r2, r8, lsl #27
   26d78:	andeq	r6, r2, r8, asr #27
   26d7c:	ldrdeq	r6, [r2], -r8
   26d80:	andeq	r6, r2, r8, asr #27
   26d84:	andeq	r6, r2, r8, lsr #27
   26d88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26d8c:	cmp	r0, #0
   26d90:	beq	2706c <_obstack_memory_used@@Base+0xce8>
   26d94:	ldr	r0, [fp, #16]
   26d98:	cmp	r0, #0
   26d9c:	mov	r0, r5
   26da0:	bne	2707c <_obstack_memory_used@@Base+0xcf8>
   26da4:	b	2709c <_obstack_memory_used@@Base+0xd18>
   26da8:	mov	r4, #0
   26dac:	cmp	r7, #0
   26db0:	beq	26fd4 <_obstack_memory_used@@Base+0xc50>
   26db4:	mov	r8, #0
   26db8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26dbc:	cmp	r0, #0
   26dc0:	bne	26d94 <_obstack_memory_used@@Base+0xa10>
   26dc4:	b	2706c <_obstack_memory_used@@Base+0xce8>
   26dc8:	mov	r4, #0
   26dcc:	cmn	lr, #1
   26dd0:	beq	26fac <_obstack_memory_used@@Base+0xc28>
   26dd4:	cmp	r7, #0
   26dd8:	bne	26db4 <_obstack_memory_used@@Base+0xa30>
   26ddc:	cmp	lr, #1
   26de0:	beq	26fd4 <_obstack_memory_used@@Base+0xc50>
   26de4:	b	26db4 <_obstack_memory_used@@Base+0xa30>
   26de8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   26dec:	cmp	r0, #2
   26df0:	bne	27004 <_obstack_memory_used@@Base+0xc80>
   26df4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26df8:	tst	r0, #1
   26dfc:	bne	27864 <_obstack_memory_used@@Base+0x14e0>
   26e00:	mov	r8, #0
   26e04:	mov	r0, #92	; 0x5c
   26e08:	mov	r4, #0
   26e0c:	cmp	r8, #0
   26e10:	beq	27024 <_obstack_memory_used@@Base+0xca0>
   26e14:	ldr	r2, [fp, #-48]	; 0xffffffd0
   26e18:	b	27118 <_obstack_memory_used@@Base+0xd94>
   26e1c:	mov	r0, #102	; 0x66
   26e20:	b	27058 <_obstack_memory_used@@Base+0xcd4>
   26e24:	mov	r2, #116	; 0x74
   26e28:	ldr	r0, [sp, #60]	; 0x3c
   26e2c:	tst	r0, #1
   26e30:	mov	r0, r2
   26e34:	bne	27058 <_obstack_memory_used@@Base+0xcd4>
   26e38:	b	27864 <_obstack_memory_used@@Base+0x14e0>
   26e3c:	mov	r0, #98	; 0x62
   26e40:	b	27058 <_obstack_memory_used@@Base+0xcd4>
   26e44:	mov	r2, #114	; 0x72
   26e48:	ldr	r0, [sp, #60]	; 0x3c
   26e4c:	tst	r0, #1
   26e50:	mov	r0, r2
   26e54:	bne	27058 <_obstack_memory_used@@Base+0xcd4>
   26e58:	b	27864 <_obstack_memory_used@@Base+0x14e0>
   26e5c:	ldr	r0, [sp, #80]	; 0x50
   26e60:	tst	r0, #1
   26e64:	beq	27140 <_obstack_memory_used@@Base+0xdbc>
   26e68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26e6c:	tst	r0, #1
   26e70:	bne	2798c <_obstack_memory_used@@Base+0x1608>
   26e74:	ldr	r0, [fp, #-64]	; 0xffffffc0
   26e78:	ldr	r2, [fp, #-48]	; 0xffffffd0
   26e7c:	cmp	r0, #2
   26e80:	ldr	r0, [fp, #-80]	; 0xffffffb0
   26e84:	movwne	r0, #1
   26e88:	orr	r0, r0, r2
   26e8c:	tst	r0, #1
   26e90:	beq	27438 <_obstack_memory_used@@Base+0x10b4>
   26e94:	mov	r0, r9
   26e98:	b	2746c <_obstack_memory_used@@Base+0x10e8>
   26e9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   26ea0:	mov	r8, #0
   26ea4:	mov	r5, #63	; 0x3f
   26ea8:	cmp	r0, #5
   26eac:	beq	272f4 <_obstack_memory_used@@Base+0xf70>
   26eb0:	cmp	r0, #2
   26eb4:	bne	273a4 <_obstack_memory_used@@Base+0x1020>
   26eb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26ebc:	tst	r0, #1
   26ec0:	bne	27864 <_obstack_memory_used@@Base+0x14e0>
   26ec4:	mov	r4, #0
   26ec8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26ecc:	cmp	r0, #0
   26ed0:	bne	26d94 <_obstack_memory_used@@Base+0xa10>
   26ed4:	b	2706c <_obstack_memory_used@@Base+0xce8>
   26ed8:	mov	r0, #118	; 0x76
   26edc:	b	27058 <_obstack_memory_used@@Base+0xcd4>
   26ee0:	mov	r0, #1
   26ee4:	mov	r5, #39	; 0x27
   26ee8:	str	r0, [sp, #52]	; 0x34
   26eec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   26ef0:	cmp	r0, #2
   26ef4:	bne	26f68 <_obstack_memory_used@@Base+0xbe4>
   26ef8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26efc:	tst	r0, #1
   26f00:	bne	27864 <_obstack_memory_used@@Base+0x14e0>
   26f04:	ldr	r2, [sp, #48]	; 0x30
   26f08:	clz	r1, sl
   26f0c:	mov	r8, #0
   26f10:	lsr	r1, r1, #5
   26f14:	cmp	r2, #0
   26f18:	mov	r0, r2
   26f1c:	movwne	r0, #1
   26f20:	orrs	r0, r0, r1
   26f24:	moveq	r2, sl
   26f28:	moveq	sl, r0
   26f2c:	cmp	r9, sl
   26f30:	str	r2, [sp, #48]	; 0x30
   26f34:	movcc	r0, #39	; 0x27
   26f38:	strbcc	r0, [r6, r9]
   26f3c:	add	r0, r9, #1
   26f40:	cmp	r0, sl
   26f44:	movcc	r1, #92	; 0x5c
   26f48:	strbcc	r1, [r6, r0]
   26f4c:	add	r0, r9, #2
   26f50:	add	r9, r9, #3
   26f54:	cmp	r0, sl
   26f58:	movcc	r1, #39	; 0x27
   26f5c:	strbcc	r1, [r6, r0]
   26f60:	mov	r0, #0
   26f64:	str	r0, [fp, #-48]	; 0xffffffd0
   26f68:	mov	r4, #1
   26f6c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26f70:	cmp	r0, #0
   26f74:	bne	26d94 <_obstack_memory_used@@Base+0xa10>
   26f78:	b	2706c <_obstack_memory_used@@Base+0xce8>
   26f7c:	ldr	r0, [sp, #32]
   26f80:	cmp	r0, #1
   26f84:	bne	27170 <_obstack_memory_used@@Base+0xdec>
   26f88:	str	lr, [sp, #84]	; 0x54
   26f8c:	bl	11e70 <__ctype_b_loc@plt>
   26f90:	ldr	r0, [r0]
   26f94:	ldr	ip, [fp, #-84]	; 0xffffffac
   26f98:	mov	r1, #1
   26f9c:	add	r0, r0, r5, lsl #1
   26fa0:	ldrb	r0, [r0, #1]
   26fa4:	ubfx	r4, r0, #6, #1
   26fa8:	b	27568 <_obstack_memory_used@@Base+0x11e4>
   26fac:	cmp	r7, #0
   26fb0:	ldrbeq	r0, [ip, #1]
   26fb4:	cmpeq	r0, #0
   26fb8:	beq	26fd4 <_obstack_memory_used@@Base+0xc50>
   26fbc:	mvn	lr, #0
   26fc0:	mov	r8, #0
   26fc4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26fc8:	cmp	r0, #0
   26fcc:	bne	26d94 <_obstack_memory_used@@Base+0xa10>
   26fd0:	b	2706c <_obstack_memory_used@@Base+0xce8>
   26fd4:	mov	r1, #1
   26fd8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   26fdc:	cmp	r0, #2
   26fe0:	bne	26ff0 <_obstack_memory_used@@Base+0xc6c>
   26fe4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26fe8:	tst	r0, #1
   26fec:	bne	27864 <_obstack_memory_used@@Base+0x14e0>
   26ff0:	mov	r4, r1
   26ff4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26ff8:	cmp	r0, #0
   26ffc:	bne	26d94 <_obstack_memory_used@@Base+0xa10>
   27000:	b	2706c <_obstack_memory_used@@Base+0xce8>
   27004:	ldr	r1, [sp, #40]	; 0x28
   27008:	mov	r8, #0
   2700c:	mov	r0, #92	; 0x5c
   27010:	cmp	r1, #0
   27014:	beq	27058 <_obstack_memory_used@@Base+0xcd4>
   27018:	mov	r4, #0
   2701c:	cmp	r8, #0
   27020:	bne	26e14 <_obstack_memory_used@@Base+0xa90>
   27024:	ldr	r2, [fp, #-48]	; 0xffffffd0
   27028:	tst	r2, #1
   2702c:	beq	27118 <_obstack_memory_used@@Base+0xd94>
   27030:	cmp	r9, sl
   27034:	movcc	r1, #39	; 0x27
   27038:	strbcc	r1, [r6, r9]
   2703c:	add	r1, r9, #1
   27040:	add	r9, r9, #2
   27044:	cmp	r1, sl
   27048:	movcc	r2, #39	; 0x27
   2704c:	strbcc	r2, [r6, r1]
   27050:	mov	r2, #0
   27054:	b	27118 <_obstack_memory_used@@Base+0xd94>
   27058:	ldr	r1, [sp, #80]	; 0x50
   2705c:	mov	r4, #0
   27060:	mov	r8, #0
   27064:	tst	r1, #1
   27068:	bne	270a8 <_obstack_memory_used@@Base+0xd24>
   2706c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   27070:	cmp	r0, #0
   27074:	mov	r0, r5
   27078:	beq	2709c <_obstack_memory_used@@Base+0xd18>
   2707c:	ldr	r1, [fp, #16]
   27080:	ubfx	r0, r5, #5, #3
   27084:	mov	r2, #1
   27088:	ldr	r0, [r1, r0, lsl #2]
   2708c:	and	r1, r5, #31
   27090:	tst	r0, r2, lsl r1
   27094:	mov	r0, r5
   27098:	bne	270a8 <_obstack_memory_used@@Base+0xd24>
   2709c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   270a0:	cmp	r1, #0
   270a4:	beq	27500 <_obstack_memory_used@@Base+0x117c>
   270a8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   270ac:	tst	r1, #1
   270b0:	bne	27844 <_obstack_memory_used@@Base+0x14c0>
   270b4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   270b8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   270bc:	cmp	r1, #2
   270c0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   270c4:	movwne	r1, #1
   270c8:	orr	r1, r1, r2
   270cc:	tst	r1, #1
   270d0:	bne	27108 <_obstack_memory_used@@Base+0xd84>
   270d4:	cmp	r9, sl
   270d8:	movcc	r1, #39	; 0x27
   270dc:	strbcc	r1, [r6, r9]
   270e0:	add	r1, r9, #1
   270e4:	cmp	r1, sl
   270e8:	movcc	r2, #36	; 0x24
   270ec:	strbcc	r2, [r6, r1]
   270f0:	add	r1, r9, #2
   270f4:	add	r9, r9, #3
   270f8:	cmp	r1, sl
   270fc:	movcc	r2, #39	; 0x27
   27100:	strbcc	r2, [r6, r1]
   27104:	mov	r2, #1
   27108:	cmp	r9, sl
   2710c:	movcc	r1, #92	; 0x5c
   27110:	strbcc	r1, [r6, r9]
   27114:	add	r9, r9, #1
   27118:	cmp	r9, sl
   2711c:	add	r7, r7, #1
   27120:	strbcc	r0, [r6, r9]
   27124:	ldr	r0, [fp, #-52]	; 0xffffffcc
   27128:	add	r9, r9, #1
   2712c:	and	r0, r0, r4
   27130:	mov	r4, r0
   27134:	cmn	lr, #1
   27138:	bne	26aac <_obstack_memory_used@@Base+0x728>
   2713c:	b	26ab8 <_obstack_memory_used@@Base+0x734>
   27140:	ldr	r0, [sp, #28]
   27144:	mov	r4, #0
   27148:	mov	r8, #0
   2714c:	mov	r5, #0
   27150:	cmp	r0, #0
   27154:	beq	2706c <_obstack_memory_used@@Base+0xce8>
   27158:	ldr	r4, [fp, #-52]	; 0xffffffcc
   2715c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   27160:	add	r7, r7, #1
   27164:	cmn	lr, #1
   27168:	bne	26aac <_obstack_memory_used@@Base+0x728>
   2716c:	b	26ab8 <_obstack_memory_used@@Base+0x734>
   27170:	mov	r0, #0
   27174:	cmn	lr, #1
   27178:	str	r0, [fp, #-36]	; 0xffffffdc
   2717c:	str	r0, [fp, #-40]	; 0xffffffd8
   27180:	bne	27194 <_obstack_memory_used@@Base+0xe10>
   27184:	mov	r0, ip
   27188:	bl	11eac <strlen@plt>
   2718c:	ldr	ip, [fp, #-84]	; 0xffffffac
   27190:	mov	lr, r0
   27194:	ldr	r0, [sp, #36]	; 0x24
   27198:	str	sl, [sp, #56]	; 0x38
   2719c:	str	lr, [sp, #84]	; 0x54
   271a0:	cmp	r0, #0
   271a4:	beq	273bc <_obstack_memory_used@@Base+0x1038>
   271a8:	add	r0, ip, r7
   271ac:	mov	r4, #1
   271b0:	mov	r6, #0
   271b4:	sub	sl, fp, #40	; 0x28
   271b8:	str	r0, [sp, #20]
   271bc:	str	r6, [sp, #64]	; 0x40
   271c0:	add	r6, r6, r7
   271c4:	sub	r0, fp, #44	; 0x2c
   271c8:	mov	r3, sl
   271cc:	add	r1, ip, r6
   271d0:	sub	r2, lr, r6
   271d4:	bl	2371c <__assert_fail@plt+0x11690>
   271d8:	cmn	r0, #2
   271dc:	beq	27518 <_obstack_memory_used@@Base+0x1194>
   271e0:	ldr	sl, [sp, #56]	; 0x38
   271e4:	cmn	r0, #1
   271e8:	beq	2750c <_obstack_memory_used@@Base+0x1188>
   271ec:	cmp	r0, #0
   271f0:	beq	27510 <_obstack_memory_used@@Base+0x118c>
   271f4:	cmp	r0, #2
   271f8:	bcc	272b8 <_obstack_memory_used@@Base+0xf34>
   271fc:	ldr	r1, [sp, #64]	; 0x40
   27200:	ldr	r2, [sp, #20]
   27204:	add	r1, r2, r1
   27208:	mov	r2, #1
   2720c:	ldrb	r3, [r1, r2]
   27210:	sub	r3, r3, #91	; 0x5b
   27214:	cmp	r3, #33	; 0x21
   27218:	bhi	272ac <_obstack_memory_used@@Base+0xf28>
   2721c:	add	r6, pc, #0
   27220:	ldr	pc, [r6, r3, lsl #2]
   27224:	andeq	r7, r2, r0, ror r8
   27228:	andeq	r7, r2, r0, ror r8
   2722c:	andeq	r7, r2, ip, lsr #5
   27230:	andeq	r7, r2, r0, ror r8
   27234:	andeq	r7, r2, ip, lsr #5
   27238:	andeq	r7, r2, r0, ror r8
   2723c:	andeq	r7, r2, ip, lsr #5
   27240:	andeq	r7, r2, ip, lsr #5
   27244:	andeq	r7, r2, ip, lsr #5
   27248:	andeq	r7, r2, ip, lsr #5
   2724c:	andeq	r7, r2, ip, lsr #5
   27250:	andeq	r7, r2, ip, lsr #5
   27254:	andeq	r7, r2, ip, lsr #5
   27258:	andeq	r7, r2, ip, lsr #5
   2725c:	andeq	r7, r2, ip, lsr #5
   27260:	andeq	r7, r2, ip, lsr #5
   27264:	andeq	r7, r2, ip, lsr #5
   27268:	andeq	r7, r2, ip, lsr #5
   2726c:	andeq	r7, r2, ip, lsr #5
   27270:	andeq	r7, r2, ip, lsr #5
   27274:	andeq	r7, r2, ip, lsr #5
   27278:	andeq	r7, r2, ip, lsr #5
   2727c:	andeq	r7, r2, ip, lsr #5
   27280:	andeq	r7, r2, ip, lsr #5
   27284:	andeq	r7, r2, ip, lsr #5
   27288:	andeq	r7, r2, ip, lsr #5
   2728c:	andeq	r7, r2, ip, lsr #5
   27290:	andeq	r7, r2, ip, lsr #5
   27294:	andeq	r7, r2, ip, lsr #5
   27298:	andeq	r7, r2, ip, lsr #5
   2729c:	andeq	r7, r2, ip, lsr #5
   272a0:	andeq	r7, r2, ip, lsr #5
   272a4:	andeq	r7, r2, ip, lsr #5
   272a8:	andeq	r7, r2, r0, ror r8
   272ac:	add	r2, r2, #1
   272b0:	cmp	r2, r0
   272b4:	bcc	2720c <_obstack_memory_used@@Base+0xe88>
   272b8:	ldr	r6, [sp, #64]	; 0x40
   272bc:	add	r6, r0, r6
   272c0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   272c4:	bl	11d20 <iswprint@plt>
   272c8:	cmp	r0, #0
   272cc:	sub	sl, fp, #40	; 0x28
   272d0:	movwne	r0, #1
   272d4:	and	r4, r4, r0
   272d8:	mov	r0, sl
   272dc:	bl	11c78 <mbsinit@plt>
   272e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   272e4:	ldr	lr, [sp, #84]	; 0x54
   272e8:	cmp	r0, #0
   272ec:	beq	271bc <_obstack_memory_used@@Base+0xe38>
   272f0:	b	2755c <_obstack_memory_used@@Base+0x11d8>
   272f4:	ldr	r0, [sp, #24]
   272f8:	cmp	r0, #0
   272fc:	beq	273a4 <_obstack_memory_used@@Base+0x1020>
   27300:	add	r0, r7, #2
   27304:	cmp	r0, lr
   27308:	bcs	273a4 <_obstack_memory_used@@Base+0x1020>
   2730c:	add	r1, ip, r7
   27310:	ldrb	r1, [r1, #1]
   27314:	cmp	r1, #63	; 0x3f
   27318:	bne	273a4 <_obstack_memory_used@@Base+0x1020>
   2731c:	ldrb	r5, [ip, r0]
   27320:	sub	r1, r5, #33	; 0x21
   27324:	cmp	r1, #29
   27328:	bhi	273a4 <_obstack_memory_used@@Base+0x1020>
   2732c:	movw	r3, #20929	; 0x51c1
   27330:	mov	r2, #1
   27334:	movt	r3, #14336	; 0x3800
   27338:	tst	r3, r2, lsl r1
   2733c:	beq	273a4 <_obstack_memory_used@@Base+0x1020>
   27340:	ldr	r1, [fp, #-72]	; 0xffffffb8
   27344:	tst	r1, #1
   27348:	bne	27994 <_obstack_memory_used@@Base+0x1610>
   2734c:	cmp	r9, sl
   27350:	mov	r7, r0
   27354:	mov	r4, #0
   27358:	movcc	r1, #63	; 0x3f
   2735c:	strbcc	r1, [r6, r9]
   27360:	add	r1, r9, #1
   27364:	cmp	r1, sl
   27368:	movcc	r2, #34	; 0x22
   2736c:	strbcc	r2, [r6, r1]
   27370:	add	r1, r9, #2
   27374:	cmp	r1, sl
   27378:	movcc	r2, #34	; 0x22
   2737c:	strbcc	r2, [r6, r1]
   27380:	add	r1, r9, #3
   27384:	add	r9, r9, #4
   27388:	cmp	r1, sl
   2738c:	movcc	r2, #63	; 0x3f
   27390:	strbcc	r2, [r6, r1]
   27394:	ldr	r0, [fp, #-68]	; 0xffffffbc
   27398:	cmp	r0, #0
   2739c:	bne	26d94 <_obstack_memory_used@@Base+0xa10>
   273a0:	b	2706c <_obstack_memory_used@@Base+0xce8>
   273a4:	mov	r5, #63	; 0x3f
   273a8:	mov	r4, #0
   273ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   273b0:	cmp	r0, #0
   273b4:	bne	26d94 <_obstack_memory_used@@Base+0xa10>
   273b8:	b	2706c <_obstack_memory_used@@Base+0xce8>
   273bc:	mov	r4, #1
   273c0:	mov	r6, #0
   273c4:	sub	sl, fp, #40	; 0x28
   273c8:	str	r6, [sp, #64]	; 0x40
   273cc:	add	r6, r6, r7
   273d0:	sub	r0, fp, #44	; 0x2c
   273d4:	mov	r3, sl
   273d8:	add	r1, ip, r6
   273dc:	sub	r2, lr, r6
   273e0:	bl	2371c <__assert_fail@plt+0x11690>
   273e4:	cmn	r0, #2
   273e8:	beq	27518 <_obstack_memory_used@@Base+0x1194>
   273ec:	cmn	r0, #1
   273f0:	beq	2750c <_obstack_memory_used@@Base+0x1188>
   273f4:	ldr	r6, [sp, #64]	; 0x40
   273f8:	cmp	r0, #0
   273fc:	beq	27558 <_obstack_memory_used@@Base+0x11d4>
   27400:	add	r6, r0, r6
   27404:	ldr	r0, [fp, #-44]	; 0xffffffd4
   27408:	bl	11d20 <iswprint@plt>
   2740c:	cmp	r0, #0
   27410:	sub	sl, fp, #40	; 0x28
   27414:	movwne	r0, #1
   27418:	and	r4, r4, r0
   2741c:	mov	r0, sl
   27420:	bl	11c78 <mbsinit@plt>
   27424:	ldr	ip, [fp, #-84]	; 0xffffffac
   27428:	ldr	lr, [sp, #84]	; 0x54
   2742c:	cmp	r0, #0
   27430:	beq	273c8 <_obstack_memory_used@@Base+0x1044>
   27434:	b	2755c <_obstack_memory_used@@Base+0x11d8>
   27438:	cmp	r9, sl
   2743c:	mov	r2, #1
   27440:	movcc	r0, #39	; 0x27
   27444:	strbcc	r0, [r6, r9]
   27448:	add	r0, r9, #1
   2744c:	cmp	r0, sl
   27450:	movcc	r1, #36	; 0x24
   27454:	strbcc	r1, [r6, r0]
   27458:	add	r0, r9, #2
   2745c:	cmp	r0, sl
   27460:	movcc	r1, #39	; 0x27
   27464:	strbcc	r1, [r6, r0]
   27468:	add	r0, r9, #3
   2746c:	cmp	r0, sl
   27470:	add	r9, r0, #1
   27474:	str	r2, [fp, #-48]	; 0xffffffd0
   27478:	movcc	r1, #92	; 0x5c
   2747c:	strbcc	r1, [r6, r0]
   27480:	ldr	r1, [fp, #-64]	; 0xffffffc0
   27484:	cmp	r1, #2
   27488:	beq	274e8 <_obstack_memory_used@@Base+0x1164>
   2748c:	add	r1, r7, #1
   27490:	mov	r4, #0
   27494:	mov	r8, #1
   27498:	mov	r5, #48	; 0x30
   2749c:	cmp	r1, lr
   274a0:	bcs	26d88 <_obstack_memory_used@@Base+0xa04>
   274a4:	ldrb	r1, [ip, r1]
   274a8:	sub	r1, r1, #48	; 0x30
   274ac:	uxtb	r1, r1
   274b0:	cmp	r1, #9
   274b4:	bhi	26d88 <_obstack_memory_used@@Base+0xa04>
   274b8:	cmp	r9, sl
   274bc:	movcc	r1, #48	; 0x30
   274c0:	strbcc	r1, [r6, r9]
   274c4:	add	r1, r0, #2
   274c8:	add	r9, r0, #3
   274cc:	cmp	r1, sl
   274d0:	movcc	r2, #48	; 0x30
   274d4:	strbcc	r2, [r6, r1]
   274d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   274dc:	cmp	r0, #0
   274e0:	bne	26d94 <_obstack_memory_used@@Base+0xa10>
   274e4:	b	2706c <_obstack_memory_used@@Base+0xce8>
   274e8:	mov	r0, #48	; 0x30
   274ec:	mov	r8, #1
   274f0:	mov	r4, #0
   274f4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   274f8:	cmp	r1, #0
   274fc:	bne	270a8 <_obstack_memory_used@@Base+0xd24>
   27500:	cmp	r8, #0
   27504:	beq	27024 <_obstack_memory_used@@Base+0xca0>
   27508:	b	26e14 <_obstack_memory_used@@Base+0xa90>
   2750c:	mov	r4, #0
   27510:	ldr	ip, [fp, #-84]	; 0xffffffac
   27514:	b	27550 <_obstack_memory_used@@Base+0x11cc>
   27518:	ldr	r1, [sp, #84]	; 0x54
   2751c:	ldr	ip, [fp, #-84]	; 0xffffffac
   27520:	mov	r4, #0
   27524:	cmp	r6, r1
   27528:	bcs	27550 <_obstack_memory_used@@Base+0x11cc>
   2752c:	ldrb	r0, [ip, r6]
   27530:	cmp	r0, #0
   27534:	beq	27550 <_obstack_memory_used@@Base+0x11cc>
   27538:	ldr	r0, [sp, #64]	; 0x40
   2753c:	add	r0, r0, #1
   27540:	add	r6, r0, r7
   27544:	str	r0, [sp, #64]	; 0x40
   27548:	cmp	r6, r1
   2754c:	bcc	2752c <_obstack_memory_used@@Base+0x11a8>
   27550:	ldr	r6, [sp, #64]	; 0x40
   27554:	b	2755c <_obstack_memory_used@@Base+0x11d8>
   27558:	ldr	ip, [fp, #-84]	; 0xffffffac
   2755c:	mov	r1, r6
   27560:	ldr	r6, [sp, #76]	; 0x4c
   27564:	ldr	sl, [sp, #56]	; 0x38
   27568:	ldr	r0, [sp, #44]	; 0x2c
   2756c:	cmp	r1, #1
   27570:	orr	r2, r4, r0
   27574:	mov	r0, r1
   27578:	bhi	27598 <_obstack_memory_used@@Base+0x1214>
   2757c:	tst	r2, #1
   27580:	beq	27598 <_obstack_memory_used@@Base+0x1214>
   27584:	ldr	lr, [sp, #84]	; 0x54
   27588:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2758c:	cmp	r0, #0
   27590:	bne	26d94 <_obstack_memory_used@@Base+0xa10>
   27594:	b	2706c <_obstack_memory_used@@Base+0xce8>
   27598:	str	r2, [sp, #64]	; 0x40
   2759c:	add	r0, r0, r7
   275a0:	add	r1, r7, #1
   275a4:	ldr	lr, [sp, #84]	; 0x54
   275a8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   275ac:	ldr	r2, [fp, #-48]	; 0xffffffd0
   275b0:	mov	r3, #0
   275b4:	str	r0, [sp, #56]	; 0x38
   275b8:	ldr	r0, [sp, #64]	; 0x40
   275bc:	tst	r0, #1
   275c0:	bne	276a8 <_obstack_memory_used@@Base+0x1324>
   275c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   275c8:	tst	r0, #1
   275cc:	bne	27848 <_obstack_memory_used@@Base+0x14c4>
   275d0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   275d4:	cmp	r7, #2
   275d8:	movwne	r3, #1
   275dc:	orr	r3, r3, r2
   275e0:	tst	r3, #1
   275e4:	bne	2761c <_obstack_memory_used@@Base+0x1298>
   275e8:	cmp	r9, sl
   275ec:	add	r3, r9, #1
   275f0:	movcc	r2, #39	; 0x27
   275f4:	strbcc	r2, [r6, r9]
   275f8:	cmp	r3, sl
   275fc:	movcc	r2, #36	; 0x24
   27600:	strbcc	r2, [r6, r3]
   27604:	add	r3, r9, #2
   27608:	add	r9, r9, #3
   2760c:	cmp	r3, sl
   27610:	movcc	r2, #39	; 0x27
   27614:	strbcc	r2, [r6, r3]
   27618:	mov	r2, #1
   2761c:	cmp	r9, sl
   27620:	mov	r0, r2
   27624:	movcc	r3, #92	; 0x5c
   27628:	strbcc	r3, [r6, r9]
   2762c:	add	r3, r9, #1
   27630:	cmp	r3, sl
   27634:	andcc	r7, r5, #192	; 0xc0
   27638:	movcc	r2, #48	; 0x30
   2763c:	orrcc	r7, r2, r7, lsr #6
   27640:	strbcc	r7, [r6, r3]
   27644:	add	r3, r9, #2
   27648:	add	r9, r9, #3
   2764c:	cmp	r3, sl
   27650:	lsrcc	r7, r5, #3
   27654:	movcc	r2, #6
   27658:	bficc	r7, r2, #3, #29
   2765c:	mov	r2, #6
   27660:	strbcc	r7, [r6, r3]
   27664:	bfi	r5, r2, #3, #29
   27668:	mov	r3, #1
   2766c:	mov	r2, r0
   27670:	ldr	r0, [sp, #56]	; 0x38
   27674:	and	r8, r3, #1
   27678:	cmp	r0, r1
   2767c:	bhi	276dc <_obstack_memory_used@@Base+0x1358>
   27680:	b	2771c <_obstack_memory_used@@Base+0x1398>
   27684:	cmp	r9, sl
   27688:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2768c:	strbcc	r5, [r6, r9]
   27690:	add	r9, r9, #1
   27694:	ldrb	r5, [ip, r1]
   27698:	add	r1, r1, #1
   2769c:	ldr	r0, [sp, #64]	; 0x40
   276a0:	tst	r0, #1
   276a4:	beq	275c4 <_obstack_memory_used@@Base+0x1240>
   276a8:	ldr	r7, [fp, #-56]	; 0xffffffc8
   276ac:	tst	r7, #1
   276b0:	beq	276c4 <_obstack_memory_used@@Base+0x1340>
   276b4:	cmp	r9, sl
   276b8:	movcc	r7, #92	; 0x5c
   276bc:	strbcc	r7, [r6, r9]
   276c0:	add	r9, r9, #1
   276c4:	mov	r7, #0
   276c8:	str	r7, [fp, #-56]	; 0xffffffc8
   276cc:	ldr	r0, [sp, #56]	; 0x38
   276d0:	and	r8, r3, #1
   276d4:	cmp	r0, r1
   276d8:	bls	2771c <_obstack_memory_used@@Base+0x1398>
   276dc:	cmp	r8, #0
   276e0:	mvn	r7, r2
   276e4:	movwne	r8, #1
   276e8:	orr	r7, r7, r8
   276ec:	tst	r7, #1
   276f0:	bne	27684 <_obstack_memory_used@@Base+0x1300>
   276f4:	cmp	r9, sl
   276f8:	movcc	r7, #39	; 0x27
   276fc:	strbcc	r7, [r6, r9]
   27700:	add	r7, r9, #1
   27704:	add	r9, r9, #2
   27708:	cmp	r7, sl
   2770c:	movcc	r2, #39	; 0x27
   27710:	strbcc	r2, [r6, r7]
   27714:	mov	r2, #0
   27718:	b	27684 <_obstack_memory_used@@Base+0x1300>
   2771c:	cmp	r8, #0
   27720:	sub	r7, r1, #1
   27724:	mov	r0, r5
   27728:	str	r2, [fp, #-48]	; 0xffffffd0
   2772c:	movwne	r8, #1
   27730:	cmp	r8, #0
   27734:	beq	27024 <_obstack_memory_used@@Base+0xca0>
   27738:	b	26e14 <_obstack_memory_used@@Base+0xa90>
   2773c:	mov	lr, r7
   27740:	b	27748 <_obstack_memory_used@@Base+0x13c4>
   27744:	mvn	lr, #0
   27748:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2774c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   27750:	eor	r0, r7, #2
   27754:	orr	r0, r0, r9
   27758:	clz	r0, r0
   2775c:	lsr	r0, r0, #5
   27760:	tst	r1, r0
   27764:	bne	27864 <_obstack_memory_used@@Base+0x14e0>
   27768:	mov	r0, r1
   2776c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   27770:	cmp	r7, #2
   27774:	movwne	r1, #1
   27778:	orr	r0, r0, r1
   2777c:	tst	r0, #1
   27780:	ldreq	r0, [sp, #52]	; 0x34
   27784:	streq	lr, [sp, #84]	; 0x54
   27788:	eoreq	r0, r0, #1
   2778c:	tsteq	r0, #1
   27790:	bne	27928 <_obstack_memory_used@@Base+0x15a4>
   27794:	tst	r4, #1
   27798:	bne	278e4 <_obstack_memory_used@@Base+0x1560>
   2779c:	ldr	r6, [sp, #48]	; 0x30
   277a0:	mov	r8, #0
   277a4:	cmp	r6, #0
   277a8:	beq	27920 <_obstack_memory_used@@Base+0x159c>
   277ac:	ldr	r0, [sp, #80]	; 0x50
   277b0:	mov	r1, #0
   277b4:	cmp	sl, #0
   277b8:	mov	r4, #0
   277bc:	str	r1, [fp, #-72]	; 0xffffffb8
   277c0:	beq	266b4 <_obstack_memory_used@@Base+0x330>
   277c4:	b	27928 <_obstack_memory_used@@Base+0x15a4>
   277c8:	ldrb	r1, [r0, #3]
   277cc:	cmp	r1, #56	; 0x38
   277d0:	ldrbeq	r1, [r0, #4]
   277d4:	cmpeq	r1, #48	; 0x30
   277d8:	bne	268ac <_obstack_memory_used@@Base+0x528>
   277dc:	ldrb	r1, [r0, #5]
   277e0:	cmp	r1, #51	; 0x33
   277e4:	ldrbeq	r1, [r0, #6]
   277e8:	cmpeq	r1, #48	; 0x30
   277ec:	bne	268ac <_obstack_memory_used@@Base+0x528>
   277f0:	ldrb	r0, [r0, #7]
   277f4:	cmp	r0, #0
   277f8:	movw	r0, #63284	; 0xf734
   277fc:	movt	r0, #2
   27800:	str	r0, [sp, #68]	; 0x44
   27804:	bne	268ac <_obstack_memory_used@@Base+0x528>
   27808:	b	268c8 <_obstack_memory_used@@Base+0x544>
   2780c:	ldrb	r1, [r0, #4]
   27810:	cmp	r1, #48	; 0x30
   27814:	ldrbeq	r1, [r0, #5]
   27818:	cmpeq	r1, #51	; 0x33
   2781c:	bne	26990 <_obstack_memory_used@@Base+0x60c>
   27820:	ldrb	r1, [r0, #6]
   27824:	cmp	r1, #48	; 0x30
   27828:	ldrbeq	r0, [r0, #7]
   2782c:	cmpeq	r0, #0
   27830:	bne	26990 <_obstack_memory_used@@Base+0x60c>
   27834:	movw	r0, #63288	; 0xf738
   27838:	movt	r0, #2
   2783c:	str	r0, [sp, #72]	; 0x48
   27840:	b	269b0 <_obstack_memory_used@@Base+0x62c>
   27844:	ldr	r7, [fp, #-64]	; 0xffffffc0
   27848:	ldr	r2, [sp, #80]	; 0x50
   2784c:	b	27884 <_obstack_memory_used@@Base+0x1500>
   27850:	ldr	ip, [fp, #-84]	; 0xffffffac
   27854:	mov	r2, #1
   27858:	mov	lr, r4
   2785c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   27860:	b	27884 <_obstack_memory_used@@Base+0x1500>
   27864:	ldr	r2, [sp, #80]	; 0x50
   27868:	mov	r7, #2
   2786c:	b	27884 <_obstack_memory_used@@Base+0x1500>
   27870:	ldr	r6, [sp, #76]	; 0x4c
   27874:	ldr	ip, [fp, #-84]	; 0xffffffac
   27878:	ldr	lr, [sp, #84]	; 0x54
   2787c:	ldr	r2, [sp, #80]	; 0x50
   27880:	mov	r7, #2
   27884:	mov	r0, #0
   27888:	ldr	r1, [fp, #12]
   2788c:	tst	r2, #1
   27890:	mov	r2, r7
   27894:	mov	r3, lr
   27898:	str	r0, [sp, #8]
   2789c:	ldr	r0, [sp, #68]	; 0x44
   278a0:	movwne	r2, #4
   278a4:	cmp	r7, #2
   278a8:	movne	r2, r7
   278ac:	str	r2, [sp]
   278b0:	mov	r2, ip
   278b4:	bic	r1, r1, #2
   278b8:	str	r0, [sp, #12]
   278bc:	ldr	r0, [sp, #72]	; 0x48
   278c0:	str	r1, [sp, #4]
   278c4:	mov	r1, sl
   278c8:	str	r0, [sp, #16]
   278cc:	mov	r0, r6
   278d0:	bl	26638 <_obstack_memory_used@@Base+0x2b4>
   278d4:	mov	r9, r0
   278d8:	mov	r0, r9
   278dc:	sub	sp, fp, #28
   278e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   278e4:	mov	r0, #5
   278e8:	ldr	r1, [sp, #48]	; 0x30
   278ec:	ldr	r2, [fp, #-84]	; 0xffffffac
   278f0:	ldr	r3, [sp, #84]	; 0x54
   278f4:	str	r0, [sp]
   278f8:	ldr	r0, [fp, #12]
   278fc:	str	r0, [sp, #4]
   27900:	ldr	r0, [fp, #16]
   27904:	str	r0, [sp, #8]
   27908:	ldr	r0, [sp, #68]	; 0x44
   2790c:	str	r0, [sp, #12]
   27910:	ldr	r0, [sp, #72]	; 0x48
   27914:	str	r0, [sp, #16]
   27918:	ldr	r0, [sp, #76]	; 0x4c
   2791c:	b	278d0 <_obstack_memory_used@@Base+0x154c>
   27920:	mov	r0, #0
   27924:	str	r0, [fp, #-72]	; 0xffffffb8
   27928:	ldr	r1, [sp, #92]	; 0x5c
   2792c:	cmp	r1, #0
   27930:	beq	27970 <_obstack_memory_used@@Base+0x15ec>
   27934:	ldr	r0, [fp, #-72]	; 0xffffffb8
   27938:	ldr	r2, [sp, #76]	; 0x4c
   2793c:	tst	r0, #1
   27940:	bne	27974 <_obstack_memory_used@@Base+0x15f0>
   27944:	ldrb	r0, [r1]
   27948:	cmp	r0, #0
   2794c:	beq	27974 <_obstack_memory_used@@Base+0x15f0>
   27950:	add	r1, r1, #1
   27954:	cmp	r9, sl
   27958:	strbcc	r0, [r2, r9]
   2795c:	add	r9, r9, #1
   27960:	ldrb	r0, [r1], #1
   27964:	cmp	r0, #0
   27968:	bne	27954 <_obstack_memory_used@@Base+0x15d0>
   2796c:	b	27974 <_obstack_memory_used@@Base+0x15f0>
   27970:	ldr	r2, [sp, #76]	; 0x4c
   27974:	cmp	r9, sl
   27978:	movcc	r0, #0
   2797c:	strbcc	r0, [r2, r9]
   27980:	mov	r0, r9
   27984:	sub	sp, fp, #28
   27988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2798c:	mov	r2, #1
   27990:	b	2785c <_obstack_memory_used@@Base+0x14d8>
   27994:	ldr	r2, [sp, #80]	; 0x50
   27998:	mov	r7, #5
   2799c:	b	27884 <_obstack_memory_used@@Base+0x1500>
   279a0:	bl	12038 <abort@plt>
   279a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   279a8:	add	fp, sp, #28
   279ac:	sub	sp, sp, #28
   279b0:	movw	r5, #5056	; 0x13c0
   279b4:	cmp	r2, #0
   279b8:	mov	r4, r1
   279bc:	mov	r7, r0
   279c0:	str	r0, [sp, #20]
   279c4:	movt	r5, #4
   279c8:	movne	r5, r2
   279cc:	bl	11ed0 <__errno_location@plt>
   279d0:	mov	sl, r0
   279d4:	ldm	r5, {r0, r1}
   279d8:	ldr	r2, [r5, #40]	; 0x28
   279dc:	ldr	r3, [r5, #44]	; 0x2c
   279e0:	add	r9, r5, #8
   279e4:	ldr	r6, [sl]
   279e8:	orr	r8, r1, #1
   279ec:	mov	r1, #0
   279f0:	str	r6, [sp, #24]
   279f4:	stm	sp, {r0, r8, r9}
   279f8:	str	r2, [sp, #12]
   279fc:	str	r3, [sp, #16]
   27a00:	mov	r0, #0
   27a04:	mov	r2, r7
   27a08:	mov	r3, r4
   27a0c:	mov	r6, r4
   27a10:	bl	26638 <_obstack_memory_used@@Base+0x2b4>
   27a14:	add	r7, r0, #1
   27a18:	mov	r0, r7
   27a1c:	bl	29728 <_obstack_memory_used@@Base+0x33a4>
   27a20:	mov	r4, r0
   27a24:	ldr	r0, [r5]
   27a28:	ldr	r2, [r5, #44]	; 0x2c
   27a2c:	ldr	r1, [r5, #40]	; 0x28
   27a30:	mov	r3, r6
   27a34:	stm	sp, {r0, r8, r9}
   27a38:	str	r2, [sp, #16]
   27a3c:	str	r1, [sp, #12]
   27a40:	mov	r0, r4
   27a44:	mov	r1, r7
   27a48:	ldr	r2, [sp, #20]
   27a4c:	bl	26638 <_obstack_memory_used@@Base+0x2b4>
   27a50:	ldr	r0, [sp, #24]
   27a54:	str	r0, [sl]
   27a58:	mov	r0, r4
   27a5c:	sub	sp, fp, #28
   27a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a68:	add	fp, sp, #28
   27a6c:	sub	sp, sp, #36	; 0x24
   27a70:	movw	r8, #5056	; 0x13c0
   27a74:	cmp	r3, #0
   27a78:	mov	r4, r2
   27a7c:	str	r2, [sp, #24]
   27a80:	mov	r5, r1
   27a84:	mov	r6, r0
   27a88:	str	r0, [sp, #20]
   27a8c:	movt	r8, #4
   27a90:	movne	r8, r3
   27a94:	bl	11ed0 <__errno_location@plt>
   27a98:	str	r0, [sp, #28]
   27a9c:	cmp	r4, #0
   27aa0:	add	sl, r8, #8
   27aa4:	ldm	r8, {r3, r9}
   27aa8:	ldr	r7, [r0]
   27aac:	ldr	r1, [r8, #40]	; 0x28
   27ab0:	ldr	r2, [r8, #44]	; 0x2c
   27ab4:	mov	r0, #0
   27ab8:	orreq	r9, r9, #1
   27abc:	str	r7, [sp, #32]
   27ac0:	mov	r7, r5
   27ac4:	stm	sp, {r3, r9, sl}
   27ac8:	str	r1, [sp, #12]
   27acc:	str	r2, [sp, #16]
   27ad0:	mov	r1, #0
   27ad4:	mov	r2, r6
   27ad8:	mov	r3, r5
   27adc:	bl	26638 <_obstack_memory_used@@Base+0x2b4>
   27ae0:	add	r4, r0, #1
   27ae4:	mov	r5, r0
   27ae8:	mov	r0, r4
   27aec:	bl	29728 <_obstack_memory_used@@Base+0x33a4>
   27af0:	mov	r6, r0
   27af4:	ldr	r0, [r8]
   27af8:	ldr	r2, [r8, #44]	; 0x2c
   27afc:	ldr	r1, [r8, #40]	; 0x28
   27b00:	mov	r3, r7
   27b04:	stm	sp, {r0, r9, sl}
   27b08:	str	r2, [sp, #16]
   27b0c:	str	r1, [sp, #12]
   27b10:	mov	r0, r6
   27b14:	mov	r1, r4
   27b18:	ldr	r2, [sp, #20]
   27b1c:	bl	26638 <_obstack_memory_used@@Base+0x2b4>
   27b20:	ldr	r0, [sp, #24]
   27b24:	ldr	r1, [sp, #32]
   27b28:	ldr	r2, [sp, #28]
   27b2c:	cmp	r0, #0
   27b30:	str	r1, [r2]
   27b34:	strne	r5, [r0]
   27b38:	mov	r0, r6
   27b3c:	sub	sp, fp, #28
   27b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b44:	push	{r4, r5, r6, r7, fp, lr}
   27b48:	add	fp, sp, #16
   27b4c:	movw	r4, #744	; 0x2e8
   27b50:	movt	r4, #4
   27b54:	ldrd	r6, [r4]
   27b58:	cmp	r7, #2
   27b5c:	blt	27b88 <_obstack_memory_used@@Base+0x1804>
   27b60:	add	r5, r6, #12
   27b64:	mov	r7, #0
   27b68:	ldr	r0, [r5, r7, lsl #3]
   27b6c:	bl	21218 <__assert_fail@plt+0xf18c>
   27b70:	ldr	r1, [r4, #4]
   27b74:	add	r2, r7, #2
   27b78:	add	r0, r7, #1
   27b7c:	mov	r7, r0
   27b80:	cmp	r2, r1
   27b84:	blt	27b68 <_obstack_memory_used@@Base+0x17e4>
   27b88:	ldr	r0, [r6, #4]
   27b8c:	movw	r5, #5104	; 0x13f0
   27b90:	movt	r5, #4
   27b94:	cmp	r0, r5
   27b98:	beq	27bac <_obstack_memory_used@@Base+0x1828>
   27b9c:	bl	21218 <__assert_fail@plt+0xf18c>
   27ba0:	mov	r0, #256	; 0x100
   27ba4:	str	r0, [r4, #8]
   27ba8:	str	r5, [r4, #12]
   27bac:	add	r5, r4, #8
   27bb0:	cmp	r6, r5
   27bb4:	beq	27bc4 <_obstack_memory_used@@Base+0x1840>
   27bb8:	mov	r0, r6
   27bbc:	bl	21218 <__assert_fail@plt+0xf18c>
   27bc0:	str	r5, [r4]
   27bc4:	mov	r0, #1
   27bc8:	str	r0, [r4, #4]
   27bcc:	pop	{r4, r5, r6, r7, fp, pc}
   27bd0:	movw	r3, #5056	; 0x13c0
   27bd4:	mvn	r2, #0
   27bd8:	movt	r3, #4
   27bdc:	b	27be0 <_obstack_memory_used@@Base+0x185c>
   27be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27be4:	add	fp, sp, #28
   27be8:	sub	sp, sp, #44	; 0x2c
   27bec:	mov	r7, r3
   27bf0:	str	r2, [sp, #36]	; 0x24
   27bf4:	str	r1, [sp, #32]
   27bf8:	mov	r5, r0
   27bfc:	bl	11ed0 <__errno_location@plt>
   27c00:	cmp	r5, #0
   27c04:	blt	27d68 <_obstack_memory_used@@Base+0x19e4>
   27c08:	cmn	r5, #-2147483647	; 0x80000001
   27c0c:	beq	27d68 <_obstack_memory_used@@Base+0x19e4>
   27c10:	movw	r8, #744	; 0x2e8
   27c14:	mov	r4, r0
   27c18:	movt	r8, #4
   27c1c:	ldr	r6, [r8]
   27c20:	ldr	r1, [r8, #4]
   27c24:	ldr	r0, [r0]
   27c28:	str	r4, [sp, #28]
   27c2c:	cmp	r1, r5
   27c30:	str	r0, [sp, #24]
   27c34:	ble	27c40 <_obstack_memory_used@@Base+0x18bc>
   27c38:	mov	sl, r6
   27c3c:	b	27ca4 <_obstack_memory_used@@Base+0x1920>
   27c40:	mov	r0, #8
   27c44:	add	r9, r8, #8
   27c48:	add	r2, r5, #1
   27c4c:	str	r1, [fp, #-32]	; 0xffffffe0
   27c50:	mvn	r3, #-2147483648	; 0x80000000
   27c54:	str	r0, [sp]
   27c58:	subs	r0, r6, r9
   27c5c:	sub	r2, r2, r1
   27c60:	sub	r1, fp, #32
   27c64:	movne	r0, r6
   27c68:	bl	29928 <_obstack_memory_used@@Base+0x35a4>
   27c6c:	str	r0, [r8]
   27c70:	cmp	r6, r9
   27c74:	mov	sl, r0
   27c78:	ldrdeq	r0, [r8, #8]
   27c7c:	stmeq	sl, {r0, r1}
   27c80:	ldr	r1, [r8, #4]
   27c84:	ldr	r2, [fp, #-32]	; 0xffffffe0
   27c88:	add	r0, sl, r1, lsl #3
   27c8c:	sub	r1, r2, r1
   27c90:	lsl	r2, r1, #3
   27c94:	mov	r1, #0
   27c98:	bl	11ef4 <memset@plt>
   27c9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27ca0:	str	r0, [r8, #4]
   27ca4:	mov	r9, sl
   27ca8:	ldr	r6, [r9, r5, lsl #3]!
   27cac:	ldr	r4, [r9, #4]!
   27cb0:	ldm	r7, {r0, r1}
   27cb4:	ldr	r2, [r7, #40]	; 0x28
   27cb8:	ldr	r3, [r7, #44]	; 0x2c
   27cbc:	orr	r8, r1, #1
   27cc0:	add	r1, r7, #8
   27cc4:	stm	sp, {r0, r8}
   27cc8:	add	r0, sp, #8
   27ccc:	str	r1, [sp, #20]
   27cd0:	stm	r0, {r1, r2, r3}
   27cd4:	mov	r0, r4
   27cd8:	mov	r1, r6
   27cdc:	ldr	r2, [sp, #32]
   27ce0:	ldr	r3, [sp, #36]	; 0x24
   27ce4:	bl	26638 <_obstack_memory_used@@Base+0x2b4>
   27ce8:	cmp	r6, r0
   27cec:	bhi	27d50 <_obstack_memory_used@@Base+0x19cc>
   27cf0:	add	r6, r0, #1
   27cf4:	movw	r0, #5104	; 0x13f0
   27cf8:	movt	r0, #4
   27cfc:	str	r6, [sl, r5, lsl #3]
   27d00:	cmp	r4, r0
   27d04:	beq	27d10 <_obstack_memory_used@@Base+0x198c>
   27d08:	mov	r0, r4
   27d0c:	bl	21218 <__assert_fail@plt+0xf18c>
   27d10:	mov	r0, r6
   27d14:	bl	29728 <_obstack_memory_used@@Base+0x33a4>
   27d18:	str	r0, [r9]
   27d1c:	mov	r4, r0
   27d20:	add	r3, sp, #8
   27d24:	ldr	r0, [r7]
   27d28:	ldr	r1, [r7, #40]	; 0x28
   27d2c:	ldr	r2, [r7, #44]	; 0x2c
   27d30:	stm	sp, {r0, r8}
   27d34:	ldr	r0, [sp, #20]
   27d38:	stm	r3, {r0, r1, r2}
   27d3c:	mov	r0, r4
   27d40:	mov	r1, r6
   27d44:	ldr	r2, [sp, #32]
   27d48:	ldr	r3, [sp, #36]	; 0x24
   27d4c:	bl	26638 <_obstack_memory_used@@Base+0x2b4>
   27d50:	ldr	r1, [sp, #24]
   27d54:	ldr	r0, [sp, #28]
   27d58:	str	r1, [r0]
   27d5c:	mov	r0, r4
   27d60:	sub	sp, fp, #28
   27d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d68:	bl	12038 <abort@plt>
   27d6c:	movw	r3, #5056	; 0x13c0
   27d70:	movt	r3, #4
   27d74:	b	27be0 <_obstack_memory_used@@Base+0x185c>
   27d78:	movw	r3, #5056	; 0x13c0
   27d7c:	mov	r1, r0
   27d80:	mov	r0, #0
   27d84:	mvn	r2, #0
   27d88:	movt	r3, #4
   27d8c:	b	27be0 <_obstack_memory_used@@Base+0x185c>
   27d90:	movw	r3, #5056	; 0x13c0
   27d94:	mov	r2, r1
   27d98:	mov	r1, r0
   27d9c:	mov	r0, #0
   27da0:	movt	r3, #4
   27da4:	b	27be0 <_obstack_memory_used@@Base+0x185c>
   27da8:	push	{fp, lr}
   27dac:	mov	fp, sp
   27db0:	sub	sp, sp, #48	; 0x30
   27db4:	vmov.i32	q8, #0	; 0x00000000
   27db8:	mov	ip, #32
   27dbc:	mov	r3, sp
   27dc0:	mov	lr, r2
   27dc4:	cmp	r1, #10
   27dc8:	add	r2, r3, #16
   27dcc:	vst1.64	{d16-d17}, [r3], ip
   27dd0:	vst1.64	{d16-d17}, [r3]
   27dd4:	vst1.64	{d16-d17}, [r2]
   27dd8:	beq	27df8 <_obstack_memory_used@@Base+0x1a74>
   27ddc:	str	r1, [sp]
   27de0:	mov	r3, sp
   27de4:	mov	r1, lr
   27de8:	mvn	r2, #0
   27dec:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   27df0:	mov	sp, fp
   27df4:	pop	{fp, pc}
   27df8:	bl	12038 <abort@plt>
   27dfc:	push	{r4, sl, fp, lr}
   27e00:	add	fp, sp, #8
   27e04:	sub	sp, sp, #48	; 0x30
   27e08:	mov	ip, r3
   27e0c:	mov	r3, sp
   27e10:	vmov.i32	q8, #0	; 0x00000000
   27e14:	mov	lr, #32
   27e18:	cmp	r1, #10
   27e1c:	add	r4, r3, #16
   27e20:	vst1.64	{d16-d17}, [r3], lr
   27e24:	vst1.64	{d16-d17}, [r3]
   27e28:	vst1.64	{d16-d17}, [r4]
   27e2c:	beq	27e4c <_obstack_memory_used@@Base+0x1ac8>
   27e30:	str	r1, [sp]
   27e34:	mov	r1, r2
   27e38:	mov	r3, sp
   27e3c:	mov	r2, ip
   27e40:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   27e44:	sub	sp, fp, #8
   27e48:	pop	{r4, sl, fp, pc}
   27e4c:	bl	12038 <abort@plt>
   27e50:	push	{fp, lr}
   27e54:	mov	fp, sp
   27e58:	sub	sp, sp, #48	; 0x30
   27e5c:	mov	r3, sp
   27e60:	vmov.i32	q8, #0	; 0x00000000
   27e64:	mov	ip, #32
   27e68:	cmp	r0, #10
   27e6c:	add	r2, r3, #16
   27e70:	vst1.64	{d16-d17}, [r3], ip
   27e74:	vst1.64	{d16-d17}, [r3]
   27e78:	vst1.64	{d16-d17}, [r2]
   27e7c:	beq	27e9c <_obstack_memory_used@@Base+0x1b18>
   27e80:	str	r0, [sp]
   27e84:	mov	r3, sp
   27e88:	mov	r0, #0
   27e8c:	mvn	r2, #0
   27e90:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   27e94:	mov	sp, fp
   27e98:	pop	{fp, pc}
   27e9c:	bl	12038 <abort@plt>
   27ea0:	push	{fp, lr}
   27ea4:	mov	fp, sp
   27ea8:	sub	sp, sp, #48	; 0x30
   27eac:	mov	r3, sp
   27eb0:	vmov.i32	q8, #0	; 0x00000000
   27eb4:	mov	ip, #32
   27eb8:	cmp	r0, #10
   27ebc:	add	lr, r3, #16
   27ec0:	vst1.64	{d16-d17}, [r3], ip
   27ec4:	vst1.64	{d16-d17}, [r3]
   27ec8:	vst1.64	{d16-d17}, [lr]
   27ecc:	beq	27ee8 <_obstack_memory_used@@Base+0x1b64>
   27ed0:	str	r0, [sp]
   27ed4:	mov	r3, sp
   27ed8:	mov	r0, #0
   27edc:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   27ee0:	mov	sp, fp
   27ee4:	pop	{fp, pc}
   27ee8:	bl	12038 <abort@plt>
   27eec:	push	{r4, sl, fp, lr}
   27ef0:	add	fp, sp, #8
   27ef4:	sub	sp, sp, #48	; 0x30
   27ef8:	mov	lr, r0
   27efc:	movw	r0, #5056	; 0x13c0
   27f00:	mov	r3, #32
   27f04:	mov	ip, r1
   27f08:	mov	r4, #1
   27f0c:	movt	r0, #4
   27f10:	add	r1, r0, #16
   27f14:	vld1.64	{d16-d17}, [r0], r3
   27f18:	mov	r3, sp
   27f1c:	vld1.64	{d18-d19}, [r1]
   27f20:	add	r1, r3, #16
   27f24:	vld1.64	{d20-d21}, [r0]
   27f28:	add	r0, r3, #32
   27f2c:	vst1.64	{d18-d19}, [r1]
   27f30:	mov	r1, r3
   27f34:	vst1.64	{d20-d21}, [r0]
   27f38:	mov	r0, #28
   27f3c:	and	r0, r0, r2, lsr #3
   27f40:	and	r2, r2, #31
   27f44:	vst1.64	{d16-d17}, [r1], r0
   27f48:	ldr	r0, [r1, #8]
   27f4c:	bic	r4, r4, r0, lsr r2
   27f50:	eor	r0, r0, r4, lsl r2
   27f54:	mov	r2, ip
   27f58:	str	r0, [r1, #8]
   27f5c:	mov	r0, #0
   27f60:	mov	r1, lr
   27f64:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   27f68:	sub	sp, fp, #8
   27f6c:	pop	{r4, sl, fp, pc}
   27f70:	push	{fp, lr}
   27f74:	mov	fp, sp
   27f78:	sub	sp, sp, #48	; 0x30
   27f7c:	mov	ip, r0
   27f80:	movw	r0, #5056	; 0x13c0
   27f84:	mov	r3, #32
   27f88:	movt	r0, #4
   27f8c:	add	r2, r0, #16
   27f90:	vld1.64	{d16-d17}, [r0], r3
   27f94:	mov	r3, sp
   27f98:	vld1.64	{d18-d19}, [r2]
   27f9c:	add	r2, r3, #16
   27fa0:	vld1.64	{d20-d21}, [r0]
   27fa4:	add	r0, r3, #32
   27fa8:	vst1.64	{d18-d19}, [r2]
   27fac:	mov	r2, r3
   27fb0:	vst1.64	{d20-d21}, [r0]
   27fb4:	mov	r0, #28
   27fb8:	and	r0, r0, r1, lsr #3
   27fbc:	and	r1, r1, #31
   27fc0:	vst1.64	{d16-d17}, [r2], r0
   27fc4:	mov	r0, #1
   27fc8:	ldr	lr, [r2, #8]
   27fcc:	bic	r0, r0, lr, lsr r1
   27fd0:	eor	r0, lr, r0, lsl r1
   27fd4:	mov	r1, ip
   27fd8:	str	r0, [r2, #8]
   27fdc:	mov	r0, #0
   27fe0:	mvn	r2, #0
   27fe4:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   27fe8:	mov	sp, fp
   27fec:	pop	{fp, pc}
   27ff0:	push	{fp, lr}
   27ff4:	mov	fp, sp
   27ff8:	sub	sp, sp, #48	; 0x30
   27ffc:	movw	r2, #5056	; 0x13c0
   28000:	mov	r3, #32
   28004:	mov	r1, r0
   28008:	movt	r2, #4
   2800c:	add	r0, r2, #16
   28010:	vld1.64	{d16-d17}, [r2], r3
   28014:	mov	r3, sp
   28018:	vld1.64	{d18-d19}, [r0]
   2801c:	add	r0, r3, #16
   28020:	vld1.64	{d20-d21}, [r2]
   28024:	mov	r2, r3
   28028:	vst1.64	{d18-d19}, [r0]
   2802c:	add	r0, r3, #32
   28030:	vst1.64	{d20-d21}, [r0]
   28034:	mov	r0, #12
   28038:	vst1.64	{d16-d17}, [r2], r0
   2803c:	ldr	r0, [r2]
   28040:	orr	r0, r0, #67108864	; 0x4000000
   28044:	str	r0, [r2]
   28048:	mov	r0, #0
   2804c:	mvn	r2, #0
   28050:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   28054:	mov	sp, fp
   28058:	pop	{fp, pc}
   2805c:	push	{fp, lr}
   28060:	mov	fp, sp
   28064:	sub	sp, sp, #48	; 0x30
   28068:	mov	ip, r1
   2806c:	mov	r1, r0
   28070:	movw	r0, #5056	; 0x13c0
   28074:	mov	r3, #32
   28078:	movt	r0, #4
   2807c:	add	r2, r0, #16
   28080:	vld1.64	{d16-d17}, [r0], r3
   28084:	mov	r3, sp
   28088:	vld1.64	{d18-d19}, [r2]
   2808c:	add	r2, r3, #16
   28090:	vld1.64	{d20-d21}, [r0]
   28094:	add	r0, r3, #32
   28098:	vst1.64	{d18-d19}, [r2]
   2809c:	mov	r2, r3
   280a0:	vst1.64	{d20-d21}, [r0]
   280a4:	mov	r0, #12
   280a8:	vst1.64	{d16-d17}, [r2], r0
   280ac:	ldr	r0, [r2]
   280b0:	orr	r0, r0, #67108864	; 0x4000000
   280b4:	str	r0, [r2]
   280b8:	mov	r0, #0
   280bc:	mov	r2, ip
   280c0:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   280c4:	mov	sp, fp
   280c8:	pop	{fp, pc}
   280cc:	push	{r4, sl, fp, lr}
   280d0:	add	fp, sp, #8
   280d4:	sub	sp, sp, #96	; 0x60
   280d8:	mov	ip, r2
   280dc:	mov	r2, sp
   280e0:	vmov.i32	q8, #0	; 0x00000000
   280e4:	mov	r4, #28
   280e8:	cmp	r1, #10
   280ec:	mov	r3, r2
   280f0:	add	lr, r2, #16
   280f4:	vst1.64	{d16-d17}, [r3], r4
   280f8:	vst1.64	{d16-d17}, [lr]
   280fc:	vst1.32	{d16-d17}, [r3]
   28100:	beq	28150 <_obstack_memory_used@@Base+0x1dcc>
   28104:	vld1.64	{d16-d17}, [r2], r4
   28108:	vld1.64	{d18-d19}, [lr]
   2810c:	add	r3, sp, #48	; 0x30
   28110:	add	r4, r3, #4
   28114:	vld1.32	{d20-d21}, [r2]
   28118:	add	r2, r3, #20
   2811c:	vst1.32	{d16-d17}, [r4]
   28120:	vst1.32	{d18-d19}, [r2]
   28124:	add	r2, r3, #32
   28128:	vst1.32	{d20-d21}, [r2]
   2812c:	str	r1, [sp, #48]	; 0x30
   28130:	mvn	r2, #0
   28134:	ldr	r1, [sp, #60]	; 0x3c
   28138:	orr	r1, r1, #67108864	; 0x4000000
   2813c:	str	r1, [sp, #60]	; 0x3c
   28140:	mov	r1, ip
   28144:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   28148:	sub	sp, fp, #8
   2814c:	pop	{r4, sl, fp, pc}
   28150:	bl	12038 <abort@plt>
   28154:	push	{r4, r5, fp, lr}
   28158:	add	fp, sp, #8
   2815c:	sub	sp, sp, #48	; 0x30
   28160:	mov	ip, r3
   28164:	movw	r3, #5056	; 0x13c0
   28168:	mov	lr, #32
   2816c:	cmp	r1, #0
   28170:	mov	r5, sp
   28174:	movt	r3, #4
   28178:	cmpne	r2, #0
   2817c:	add	r4, r3, #16
   28180:	vld1.64	{d16-d17}, [r3], lr
   28184:	vld1.64	{d18-d19}, [r4]
   28188:	add	r4, r5, #16
   2818c:	vld1.64	{d20-d21}, [r3]
   28190:	vst1.64	{d16-d17}, [r5], lr
   28194:	mov	r3, #10
   28198:	vst1.64	{d18-d19}, [r4]
   2819c:	vst1.64	{d20-d21}, [r5]
   281a0:	str	r3, [sp]
   281a4:	bne	281ac <_obstack_memory_used@@Base+0x1e28>
   281a8:	bl	12038 <abort@plt>
   281ac:	str	r2, [sp, #44]	; 0x2c
   281b0:	str	r1, [sp, #40]	; 0x28
   281b4:	mov	r3, sp
   281b8:	mov	r1, ip
   281bc:	mvn	r2, #0
   281c0:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   281c4:	sub	sp, fp, #8
   281c8:	pop	{r4, r5, fp, pc}
   281cc:	push	{r4, r5, fp, lr}
   281d0:	add	fp, sp, #8
   281d4:	sub	sp, sp, #48	; 0x30
   281d8:	mov	lr, r3
   281dc:	movw	r3, #5056	; 0x13c0
   281e0:	mov	ip, #32
   281e4:	cmp	r1, #0
   281e8:	mov	r5, sp
   281ec:	movt	r3, #4
   281f0:	cmpne	r2, #0
   281f4:	add	r4, r3, #16
   281f8:	vld1.64	{d16-d17}, [r3], ip
   281fc:	vld1.64	{d18-d19}, [r4]
   28200:	add	r4, r5, #16
   28204:	vld1.64	{d20-d21}, [r3]
   28208:	vst1.64	{d16-d17}, [r5], ip
   2820c:	mov	r3, #10
   28210:	vst1.64	{d18-d19}, [r4]
   28214:	vst1.64	{d20-d21}, [r5]
   28218:	str	r3, [sp]
   2821c:	bne	28224 <_obstack_memory_used@@Base+0x1ea0>
   28220:	bl	12038 <abort@plt>
   28224:	ldr	ip, [fp, #8]
   28228:	str	r2, [sp, #44]	; 0x2c
   2822c:	str	r1, [sp, #40]	; 0x28
   28230:	mov	r3, sp
   28234:	mov	r1, lr
   28238:	mov	r2, ip
   2823c:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   28240:	sub	sp, fp, #8
   28244:	pop	{r4, r5, fp, pc}
   28248:	push	{r4, sl, fp, lr}
   2824c:	add	fp, sp, #8
   28250:	sub	sp, sp, #48	; 0x30
   28254:	mov	ip, r2
   28258:	movw	r2, #5056	; 0x13c0
   2825c:	mov	lr, #32
   28260:	cmp	r0, #0
   28264:	mov	r4, sp
   28268:	movt	r2, #4
   2826c:	cmpne	r1, #0
   28270:	add	r3, r2, #16
   28274:	vld1.64	{d16-d17}, [r2], lr
   28278:	vld1.64	{d18-d19}, [r3]
   2827c:	add	r3, r4, #16
   28280:	vld1.64	{d20-d21}, [r2]
   28284:	vst1.64	{d16-d17}, [r4], lr
   28288:	mov	r2, #10
   2828c:	vst1.64	{d18-d19}, [r3]
   28290:	vst1.64	{d20-d21}, [r4]
   28294:	str	r2, [sp]
   28298:	bne	282a0 <_obstack_memory_used@@Base+0x1f1c>
   2829c:	bl	12038 <abort@plt>
   282a0:	str	r1, [sp, #44]	; 0x2c
   282a4:	str	r0, [sp, #40]	; 0x28
   282a8:	mov	r3, sp
   282ac:	mov	r0, #0
   282b0:	mov	r1, ip
   282b4:	mvn	r2, #0
   282b8:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   282bc:	sub	sp, fp, #8
   282c0:	pop	{r4, sl, fp, pc}
   282c4:	push	{r4, r5, fp, lr}
   282c8:	add	fp, sp, #8
   282cc:	sub	sp, sp, #48	; 0x30
   282d0:	mov	lr, r2
   282d4:	movw	r2, #5056	; 0x13c0
   282d8:	mov	ip, r3
   282dc:	mov	r3, #32
   282e0:	cmp	r0, #0
   282e4:	mov	r5, sp
   282e8:	movt	r2, #4
   282ec:	cmpne	r1, #0
   282f0:	add	r4, r2, #16
   282f4:	vld1.64	{d16-d17}, [r2], r3
   282f8:	vld1.64	{d18-d19}, [r4]
   282fc:	add	r4, r5, #16
   28300:	vld1.64	{d20-d21}, [r2]
   28304:	vst1.64	{d16-d17}, [r5], r3
   28308:	mov	r2, #10
   2830c:	vst1.64	{d18-d19}, [r4]
   28310:	vst1.64	{d20-d21}, [r5]
   28314:	str	r2, [sp]
   28318:	bne	28320 <_obstack_memory_used@@Base+0x1f9c>
   2831c:	bl	12038 <abort@plt>
   28320:	str	r1, [sp, #44]	; 0x2c
   28324:	str	r0, [sp, #40]	; 0x28
   28328:	mov	r3, sp
   2832c:	mov	r0, #0
   28330:	mov	r1, lr
   28334:	mov	r2, ip
   28338:	bl	27be0 <_obstack_memory_used@@Base+0x185c>
   2833c:	sub	sp, fp, #8
   28340:	pop	{r4, r5, fp, pc}
   28344:	movw	r3, #696	; 0x2b8
   28348:	movt	r3, #4
   2834c:	b	27be0 <_obstack_memory_used@@Base+0x185c>
   28350:	movw	r3, #696	; 0x2b8
   28354:	mov	r2, r1
   28358:	mov	r1, r0
   2835c:	mov	r0, #0
   28360:	movt	r3, #4
   28364:	b	27be0 <_obstack_memory_used@@Base+0x185c>
   28368:	movw	r3, #696	; 0x2b8
   2836c:	mvn	r2, #0
   28370:	movt	r3, #4
   28374:	b	27be0 <_obstack_memory_used@@Base+0x185c>
   28378:	movw	r3, #696	; 0x2b8
   2837c:	mov	r1, r0
   28380:	mov	r0, #0
   28384:	mvn	r2, #0
   28388:	movt	r3, #4
   2838c:	b	27be0 <_obstack_memory_used@@Base+0x185c>
   28390:	push	{r4, r5, r6, sl, fp, lr}
   28394:	add	fp, sp, #16
   28398:	ldr	r4, [r0], #8
   2839c:	mov	r5, r1
   283a0:	cmp	r4, r0
   283a4:	beq	283c8 <_obstack_memory_used@@Base+0x2044>
   283a8:	mov	r0, r4
   283ac:	mov	r1, r5
   283b0:	bl	2ad04 <_obstack_memory_used@@Base+0x4980>
   283b4:	mov	r6, r0
   283b8:	cmp	r0, #0
   283bc:	moveq	r6, r4
   283c0:	mov	r0, r6
   283c4:	pop	{r4, r5, r6, sl, fp, pc}
   283c8:	mov	r0, r5
   283cc:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   283d0:	cmp	r0, #0
   283d4:	moveq	r6, #0
   283d8:	moveq	r0, r6
   283dc:	popeq	{r4, r5, r6, sl, fp, pc}
   283e0:	mov	r1, r4
   283e4:	mov	r2, r5
   283e8:	mov	r6, r0
   283ec:	bl	11c60 <memcpy@plt>
   283f0:	mov	r0, r6
   283f4:	pop	{r4, r5, r6, sl, fp, pc}
   283f8:	push	{r4, r5, r6, sl, fp, lr}
   283fc:	add	fp, sp, #16
   28400:	mov	r4, r0
   28404:	add	r6, r0, #8
   28408:	ldrd	r0, [r0]
   2840c:	lsl	r5, r1, #1
   28410:	cmp	r0, r6
   28414:	beq	28420 <_obstack_memory_used@@Base+0x209c>
   28418:	bl	21218 <__assert_fail@plt+0xf18c>
   2841c:	ldr	r1, [r4, #4]
   28420:	cmp	r5, r1
   28424:	bcc	28448 <_obstack_memory_used@@Base+0x20c4>
   28428:	mov	r0, r5
   2842c:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   28430:	cmp	r0, #0
   28434:	strne	r0, [r4]
   28438:	movne	r0, #1
   2843c:	strne	r5, [r4, #4]
   28440:	popne	{r4, r5, r6, sl, fp, pc}
   28444:	b	28454 <_obstack_memory_used@@Base+0x20d0>
   28448:	bl	11ed0 <__errno_location@plt>
   2844c:	mov	r1, #12
   28450:	str	r1, [r0]
   28454:	mov	r0, #0
   28458:	mov	r5, #1024	; 0x400
   2845c:	str	r6, [r4]
   28460:	str	r5, [r4, #4]
   28464:	pop	{r4, r5, r6, sl, fp, pc}
   28468:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2846c:	add	fp, sp, #24
   28470:	ldrd	r8, [r0]
   28474:	add	r7, r0, #8
   28478:	mov	r4, r0
   2847c:	lsl	r5, r9, #1
   28480:	cmp	r8, r7
   28484:	beq	284b8 <_obstack_memory_used@@Base+0x2134>
   28488:	cmp	r5, r9
   2848c:	bcc	284ec <_obstack_memory_used@@Base+0x2168>
   28490:	mov	r0, r8
   28494:	mov	r1, r5
   28498:	bl	2ad04 <_obstack_memory_used@@Base+0x4980>
   2849c:	mov	r6, r0
   284a0:	cmp	r0, #0
   284a4:	beq	284fc <_obstack_memory_used@@Base+0x2178>
   284a8:	mov	r0, #1
   284ac:	str	r6, [r4]
   284b0:	str	r5, [r4, #4]
   284b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   284b8:	mov	r0, r5
   284bc:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   284c0:	cmp	r0, #0
   284c4:	moveq	r0, #0
   284c8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   284cc:	ldr	r2, [r4, #4]
   284d0:	mov	r1, r8
   284d4:	mov	r6, r0
   284d8:	bl	11c60 <memcpy@plt>
   284dc:	mov	r0, #1
   284e0:	str	r6, [r4]
   284e4:	str	r5, [r4, #4]
   284e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   284ec:	bl	11ed0 <__errno_location@plt>
   284f0:	mov	r1, #12
   284f4:	str	r1, [r0]
   284f8:	b	28500 <_obstack_memory_used@@Base+0x217c>
   284fc:	ldr	r8, [r4]
   28500:	mov	r0, r8
   28504:	bl	21218 <__assert_fail@plt+0xf18c>
   28508:	mov	r0, #0
   2850c:	mov	r5, #1024	; 0x400
   28510:	str	r7, [r4]
   28514:	str	r5, [r4, #4]
   28518:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2851c:	push	{r4, r5, fp, lr}
   28520:	add	fp, sp, #8
   28524:	mov	r4, r1
   28528:	bl	11e94 <getfilecon@plt>
   2852c:	cmp	r0, #10
   28530:	beq	28548 <_obstack_memory_used@@Base+0x21c4>
   28534:	cmp	r0, #0
   28538:	bne	2858c <_obstack_memory_used@@Base+0x2208>
   2853c:	bl	11ed0 <__errno_location@plt>
   28540:	mov	r1, #95	; 0x5f
   28544:	b	28584 <_obstack_memory_used@@Base+0x2200>
   28548:	ldr	r5, [r4]
   2854c:	movw	r1, #56150	; 0xdb56
   28550:	movt	r1, #2
   28554:	mov	r0, r5
   28558:	bl	11bd0 <strcmp@plt>
   2855c:	mov	r1, r0
   28560:	mov	r0, #10
   28564:	cmp	r1, #0
   28568:	popne	{r4, r5, fp, pc}
   2856c:	mov	r0, r5
   28570:	bl	11ff0 <freecon@plt>
   28574:	mov	r0, #0
   28578:	str	r0, [r4]
   2857c:	bl	11ed0 <__errno_location@plt>
   28580:	mov	r1, #61	; 0x3d
   28584:	str	r1, [r0]
   28588:	mvn	r0, #0
   2858c:	pop	{r4, r5, fp, pc}
   28590:	push	{r4, r5, fp, lr}
   28594:	add	fp, sp, #8
   28598:	mov	r4, r1
   2859c:	bl	11df8 <lgetfilecon@plt>
   285a0:	cmp	r0, #10
   285a4:	beq	285bc <_obstack_memory_used@@Base+0x2238>
   285a8:	cmp	r0, #0
   285ac:	bne	28600 <_obstack_memory_used@@Base+0x227c>
   285b0:	bl	11ed0 <__errno_location@plt>
   285b4:	mov	r1, #95	; 0x5f
   285b8:	b	285f8 <_obstack_memory_used@@Base+0x2274>
   285bc:	ldr	r5, [r4]
   285c0:	movw	r1, #56150	; 0xdb56
   285c4:	movt	r1, #2
   285c8:	mov	r0, r5
   285cc:	bl	11bd0 <strcmp@plt>
   285d0:	mov	r1, r0
   285d4:	mov	r0, #10
   285d8:	cmp	r1, #0
   285dc:	popne	{r4, r5, fp, pc}
   285e0:	mov	r0, r5
   285e4:	bl	11ff0 <freecon@plt>
   285e8:	mov	r0, #0
   285ec:	str	r0, [r4]
   285f0:	bl	11ed0 <__errno_location@plt>
   285f4:	mov	r1, #61	; 0x3d
   285f8:	str	r1, [r0]
   285fc:	mvn	r0, #0
   28600:	pop	{r4, r5, fp, pc}
   28604:	push	{r4, r5, fp, lr}
   28608:	add	fp, sp, #8
   2860c:	mov	r4, r1
   28610:	bl	11cd8 <fgetfilecon@plt>
   28614:	cmp	r0, #10
   28618:	beq	28630 <_obstack_memory_used@@Base+0x22ac>
   2861c:	cmp	r0, #0
   28620:	bne	28674 <_obstack_memory_used@@Base+0x22f0>
   28624:	bl	11ed0 <__errno_location@plt>
   28628:	mov	r1, #95	; 0x5f
   2862c:	b	2866c <_obstack_memory_used@@Base+0x22e8>
   28630:	ldr	r5, [r4]
   28634:	movw	r1, #56150	; 0xdb56
   28638:	movt	r1, #2
   2863c:	mov	r0, r5
   28640:	bl	11bd0 <strcmp@plt>
   28644:	mov	r1, r0
   28648:	mov	r0, #10
   2864c:	cmp	r1, #0
   28650:	popne	{r4, r5, fp, pc}
   28654:	mov	r0, r5
   28658:	bl	11ff0 <freecon@plt>
   2865c:	mov	r0, #0
   28660:	str	r0, [r4]
   28664:	bl	11ed0 <__errno_location@plt>
   28668:	mov	r1, #61	; 0x3d
   2866c:	str	r1, [r0]
   28670:	mvn	r0, #0
   28674:	pop	{r4, r5, fp, pc}
   28678:	push	{r4, r5, r6, r7, fp, lr}
   2867c:	add	fp, sp, #16
   28680:	mov	r4, r1
   28684:	mov	r1, #0
   28688:	mov	r6, r2
   2868c:	bl	11f60 <setlocale@plt>
   28690:	cmp	r0, #0
   28694:	beq	286c4 <_obstack_memory_used@@Base+0x2340>
   28698:	mov	r7, r0
   2869c:	bl	11eac <strlen@plt>
   286a0:	cmp	r0, r6
   286a4:	bcs	286e4 <_obstack_memory_used@@Base+0x2360>
   286a8:	add	r2, r0, #1
   286ac:	mov	r0, r4
   286b0:	mov	r1, r7
   286b4:	bl	11c60 <memcpy@plt>
   286b8:	mov	r5, #0
   286bc:	mov	r0, r5
   286c0:	pop	{r4, r5, r6, r7, fp, pc}
   286c4:	cmp	r6, #0
   286c8:	mov	r5, #22
   286cc:	movne	r0, #0
   286d0:	strbne	r0, [r4]
   286d4:	movne	r0, r5
   286d8:	popne	{r4, r5, r6, r7, fp, pc}
   286dc:	mov	r0, r5
   286e0:	pop	{r4, r5, r6, r7, fp, pc}
   286e4:	mov	r5, #34	; 0x22
   286e8:	cmp	r6, #0
   286ec:	beq	2870c <_obstack_memory_used@@Base+0x2388>
   286f0:	sub	r6, r6, #1
   286f4:	mov	r0, r4
   286f8:	mov	r1, r7
   286fc:	mov	r2, r6
   28700:	bl	11c60 <memcpy@plt>
   28704:	mov	r0, #0
   28708:	strb	r0, [r4, r6]
   2870c:	mov	r0, r5
   28710:	pop	{r4, r5, r6, r7, fp, pc}
   28714:	mov	r1, #0
   28718:	b	11f60 <setlocale@plt>
   2871c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28720:	add	fp, sp, #24
   28724:	mov	r4, r0
   28728:	cmp	r0, #0
   2872c:	beq	28760 <_obstack_memory_used@@Base+0x23dc>
   28730:	mov	r0, r4
   28734:	bl	11eac <strlen@plt>
   28738:	add	r5, r0, #1
   2873c:	cmp	r5, #58	; 0x3a
   28740:	bls	28764 <_obstack_memory_used@@Base+0x23e0>
   28744:	add	r0, r0, #10
   28748:	bic	r0, r0, #3
   2874c:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   28750:	mov	r6, r0
   28754:	cmp	r0, #0
   28758:	bne	28778 <_obstack_memory_used@@Base+0x23f4>
   2875c:	b	287b0 <_obstack_memory_used@@Base+0x242c>
   28760:	mov	r5, #0
   28764:	mov	r0, #64	; 0x40
   28768:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   2876c:	mov	r6, r0
   28770:	cmp	r0, #0
   28774:	beq	287b0 <_obstack_memory_used@@Base+0x242c>
   28778:	cmp	r4, #0
   2877c:	mov	r0, r4
   28780:	mov	r8, #0
   28784:	mov	r7, r6
   28788:	movwne	r0, #1
   2878c:	str	r8, [r6]
   28790:	strb	r0, [r6, #4]
   28794:	strb	r8, [r7, #5]!
   28798:	beq	287b0 <_obstack_memory_used@@Base+0x242c>
   2879c:	mov	r0, r7
   287a0:	mov	r1, r4
   287a4:	mov	r2, r5
   287a8:	bl	11c60 <memcpy@plt>
   287ac:	strb	r8, [r7, r5]
   287b0:	mov	r0, r6
   287b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   287b8:	push	{r4, sl, fp, lr}
   287bc:	add	fp, sp, #8
   287c0:	cmp	r0, #2
   287c4:	popcc	{r4, sl, fp, pc}
   287c8:	ldr	r4, [r0]
   287cc:	bl	21218 <__assert_fail@plt+0xf18c>
   287d0:	cmp	r4, #0
   287d4:	mov	r0, r4
   287d8:	bne	287c8 <_obstack_memory_used@@Base+0x2444>
   287dc:	pop	{r4, sl, fp, pc}
   287e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   287e4:	add	fp, sp, #28
   287e8:	sub	sp, sp, #4
   287ec:	mov	r9, r2
   287f0:	mov	r7, r1
   287f4:	cmp	r0, #0
   287f8:	beq	28870 <_obstack_memory_used@@Base+0x24ec>
   287fc:	mov	r6, r0
   28800:	movw	r0, #46892	; 0xb72c
   28804:	movt	r0, #2
   28808:	bl	11dec <getenv@plt>
   2880c:	mov	r4, r0
   28810:	ldrb	r0, [r6, #4]
   28814:	cmp	r4, #0
   28818:	beq	28884 <_obstack_memory_used@@Base+0x2500>
   2881c:	cmp	r0, #0
   28820:	beq	28838 <_obstack_memory_used@@Base+0x24b4>
   28824:	add	r0, r6, #5
   28828:	mov	r1, r4
   2882c:	bl	11bd0 <strcmp@plt>
   28830:	cmp	r0, #0
   28834:	beq	28948 <_obstack_memory_used@@Base+0x25c4>
   28838:	mov	r0, r4
   2883c:	bl	11eac <strlen@plt>
   28840:	add	sl, r0, #1
   28844:	mov	r8, #1
   28848:	cmp	sl, #58	; 0x3a
   2884c:	bls	28894 <_obstack_memory_used@@Base+0x2510>
   28850:	add	r0, r0, #10
   28854:	bic	r0, r0, #3
   28858:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   2885c:	cmp	r0, #0
   28860:	bne	288a4 <_obstack_memory_used@@Base+0x2520>
   28864:	mov	r0, #0
   28868:	sub	sp, fp, #28
   2886c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28870:	mov	r0, r7
   28874:	mov	r1, r9
   28878:	sub	sp, fp, #28
   2887c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28880:	b	11bb8 <gmtime_r@plt>
   28884:	mov	r8, #0
   28888:	cmp	r0, #0
   2888c:	mov	sl, #0
   28890:	beq	28948 <_obstack_memory_used@@Base+0x25c4>
   28894:	mov	r0, #64	; 0x40
   28898:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   2889c:	cmp	r0, #0
   288a0:	beq	28864 <_obstack_memory_used@@Base+0x24e0>
   288a4:	mov	r5, r0
   288a8:	str	r7, [sp]
   288ac:	strb	r8, [r0, #4]
   288b0:	mov	r0, #0
   288b4:	cmp	r8, #0
   288b8:	mov	r7, r5
   288bc:	str	r0, [r5]
   288c0:	strb	r0, [r7, #5]!
   288c4:	beq	288e0 <_obstack_memory_used@@Base+0x255c>
   288c8:	mov	r0, r7
   288cc:	mov	r1, r4
   288d0:	mov	r2, sl
   288d4:	mov	r8, #0
   288d8:	bl	11c60 <memcpy@plt>
   288dc:	strb	r8, [r7, sl]
   288e0:	ldrb	r0, [r6, #4]
   288e4:	cmp	r0, #0
   288e8:	beq	28950 <_obstack_memory_used@@Base+0x25cc>
   288ec:	movw	r0, #46892	; 0xb72c
   288f0:	add	r1, r6, #5
   288f4:	mov	r2, #1
   288f8:	movt	r0, #2
   288fc:	bl	11ec4 <setenv@plt>
   28900:	ldr	r7, [sp]
   28904:	cmp	r0, #0
   28908:	beq	28968 <_obstack_memory_used@@Base+0x25e4>
   2890c:	bl	11ed0 <__errno_location@plt>
   28910:	ldr	r6, [r0]
   28914:	mov	r4, r0
   28918:	cmp	r5, #2
   2891c:	bcc	28938 <_obstack_memory_used@@Base+0x25b4>
   28920:	ldr	r7, [r5]
   28924:	mov	r0, r5
   28928:	bl	21218 <__assert_fail@plt+0xf18c>
   2892c:	cmp	r7, #0
   28930:	mov	r5, r7
   28934:	bne	28920 <_obstack_memory_used@@Base+0x259c>
   28938:	str	r6, [r4]
   2893c:	mov	r0, #0
   28940:	sub	sp, fp, #28
   28944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28948:	mov	r5, #1
   2894c:	b	2896c <_obstack_memory_used@@Base+0x25e8>
   28950:	movw	r0, #46892	; 0xb72c
   28954:	movt	r0, #2
   28958:	bl	12020 <unsetenv@plt>
   2895c:	ldr	r7, [sp]
   28960:	cmp	r0, #0
   28964:	bne	2890c <_obstack_memory_used@@Base+0x2588>
   28968:	bl	11d2c <tzset@plt>
   2896c:	mov	r0, r7
   28970:	mov	r1, r9
   28974:	bl	11ce4 <localtime_r@plt>
   28978:	cmp	r0, #0
   2897c:	beq	289f8 <_obstack_memory_used@@Base+0x2674>
   28980:	mov	r0, r6
   28984:	mov	r1, r9
   28988:	bl	28b08 <_obstack_memory_used@@Base+0x2784>
   2898c:	mov	r6, r0
   28990:	cmp	r5, #1
   28994:	beq	28a64 <_obstack_memory_used@@Base+0x26e0>
   28998:	bl	11ed0 <__errno_location@plt>
   2899c:	mov	r8, r0
   289a0:	ldr	sl, [r0]
   289a4:	ldrb	r0, [r5, #4]
   289a8:	cmp	r0, #0
   289ac:	beq	28a6c <_obstack_memory_used@@Base+0x26e8>
   289b0:	movw	r0, #46892	; 0xb72c
   289b4:	add	r1, r5, #5
   289b8:	mov	r2, #1
   289bc:	movt	r0, #2
   289c0:	bl	11ec4 <setenv@plt>
   289c4:	cmp	r0, #0
   289c8:	beq	28a80 <_obstack_memory_used@@Base+0x26fc>
   289cc:	ldr	sl, [r8]
   289d0:	mov	r4, #0
   289d4:	cmp	r5, #2
   289d8:	bcc	28ae8 <_obstack_memory_used@@Base+0x2764>
   289dc:	ldr	r7, [r5]
   289e0:	mov	r0, r5
   289e4:	bl	21218 <__assert_fail@plt+0xf18c>
   289e8:	cmp	r7, #0
   289ec:	mov	r5, r7
   289f0:	bne	289dc <_obstack_memory_used@@Base+0x2658>
   289f4:	b	28ae8 <_obstack_memory_used@@Base+0x2764>
   289f8:	mov	r6, #0
   289fc:	cmp	r5, #1
   28a00:	beq	28a64 <_obstack_memory_used@@Base+0x26e0>
   28a04:	bl	11ed0 <__errno_location@plt>
   28a08:	mov	r8, r0
   28a0c:	ldr	sl, [r0]
   28a10:	ldrb	r0, [r5, #4]
   28a14:	cmp	r0, #0
   28a18:	beq	28aac <_obstack_memory_used@@Base+0x2728>
   28a1c:	movw	r0, #46892	; 0xb72c
   28a20:	add	r1, r5, #5
   28a24:	mov	r2, #1
   28a28:	movt	r0, #2
   28a2c:	bl	11ec4 <setenv@plt>
   28a30:	cmp	r0, #0
   28a34:	beq	28ac0 <_obstack_memory_used@@Base+0x273c>
   28a38:	ldr	sl, [r8]
   28a3c:	mov	r4, #0
   28a40:	cmp	r5, #2
   28a44:	bcc	28ae8 <_obstack_memory_used@@Base+0x2764>
   28a48:	ldr	r7, [r5]
   28a4c:	mov	r0, r5
   28a50:	bl	21218 <__assert_fail@plt+0xf18c>
   28a54:	cmp	r7, #0
   28a58:	mov	r5, r7
   28a5c:	bne	28a48 <_obstack_memory_used@@Base+0x26c4>
   28a60:	b	28ae8 <_obstack_memory_used@@Base+0x2764>
   28a64:	mov	r4, #1
   28a68:	b	28aec <_obstack_memory_used@@Base+0x2768>
   28a6c:	movw	r0, #46892	; 0xb72c
   28a70:	movt	r0, #2
   28a74:	bl	12020 <unsetenv@plt>
   28a78:	cmp	r0, #0
   28a7c:	bne	289cc <_obstack_memory_used@@Base+0x2648>
   28a80:	bl	11d2c <tzset@plt>
   28a84:	mov	r4, #1
   28a88:	cmp	r5, #2
   28a8c:	bcc	28ae8 <_obstack_memory_used@@Base+0x2764>
   28a90:	ldr	r7, [r5]
   28a94:	mov	r0, r5
   28a98:	bl	21218 <__assert_fail@plt+0xf18c>
   28a9c:	cmp	r7, #0
   28aa0:	mov	r5, r7
   28aa4:	bne	28a90 <_obstack_memory_used@@Base+0x270c>
   28aa8:	b	28ae8 <_obstack_memory_used@@Base+0x2764>
   28aac:	movw	r0, #46892	; 0xb72c
   28ab0:	movt	r0, #2
   28ab4:	bl	12020 <unsetenv@plt>
   28ab8:	cmp	r0, #0
   28abc:	bne	28a38 <_obstack_memory_used@@Base+0x26b4>
   28ac0:	bl	11d2c <tzset@plt>
   28ac4:	mov	r4, #1
   28ac8:	cmp	r5, #2
   28acc:	bcc	28ae8 <_obstack_memory_used@@Base+0x2764>
   28ad0:	ldr	r7, [r5]
   28ad4:	mov	r0, r5
   28ad8:	bl	21218 <__assert_fail@plt+0xf18c>
   28adc:	cmp	r7, #0
   28ae0:	mov	r5, r7
   28ae4:	bne	28ad0 <_obstack_memory_used@@Base+0x274c>
   28ae8:	str	sl, [r8]
   28aec:	cmp	r6, #0
   28af0:	moveq	r9, r6
   28af4:	cmp	r4, #0
   28af8:	moveq	r9, r4
   28afc:	mov	r0, r9
   28b00:	sub	sp, fp, #28
   28b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b0c:	add	fp, sp, #28
   28b10:	sub	sp, sp, #4
   28b14:	ldr	r7, [r1, #40]	; 0x28
   28b18:	mov	r8, #1
   28b1c:	cmp	r7, #0
   28b20:	beq	28bc4 <_obstack_memory_used@@Base+0x2840>
   28b24:	mov	r5, r1
   28b28:	mov	r6, r0
   28b2c:	cmp	r7, r1
   28b30:	bcc	28b40 <_obstack_memory_used@@Base+0x27bc>
   28b34:	add	r0, r5, #44	; 0x2c
   28b38:	cmp	r7, r0
   28b3c:	bcc	28bc4 <_obstack_memory_used@@Base+0x2840>
   28b40:	ldrb	r0, [r7]
   28b44:	cmp	r0, #0
   28b48:	beq	28bb8 <_obstack_memory_used@@Base+0x2834>
   28b4c:	add	r4, r6, #5
   28b50:	b	28b64 <_obstack_memory_used@@Base+0x27e0>
   28b54:	ldr	r0, [r6]
   28b58:	cmp	r0, #0
   28b5c:	addne	r4, r0, #5
   28b60:	movne	r6, r0
   28b64:	mov	r0, r4
   28b68:	mov	r1, r7
   28b6c:	bl	11bd0 <strcmp@plt>
   28b70:	cmp	r0, #0
   28b74:	beq	28c68 <_obstack_memory_used@@Base+0x28e4>
   28b78:	ldrb	r0, [r4]
   28b7c:	cmp	r0, #0
   28b80:	bne	28b9c <_obstack_memory_used@@Base+0x2818>
   28b84:	add	r0, r6, #5
   28b88:	cmp	r4, r0
   28b8c:	bne	28bd0 <_obstack_memory_used@@Base+0x284c>
   28b90:	ldrb	r0, [r6, #4]
   28b94:	cmp	r0, #0
   28b98:	beq	28bd0 <_obstack_memory_used@@Base+0x284c>
   28b9c:	mov	r0, r4
   28ba0:	bl	11eac <strlen@plt>
   28ba4:	add	r4, r4, r0
   28ba8:	ldrb	r0, [r4, #1]!
   28bac:	cmp	r0, #0
   28bb0:	bne	28b64 <_obstack_memory_used@@Base+0x27e0>
   28bb4:	b	28b54 <_obstack_memory_used@@Base+0x27d0>
   28bb8:	movw	r4, #56125	; 0xdb3d
   28bbc:	movt	r4, #2
   28bc0:	str	r4, [r5, #40]	; 0x28
   28bc4:	mov	r0, r8
   28bc8:	sub	sp, fp, #28
   28bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28bd0:	add	r0, r6, #64	; 0x40
   28bd4:	sub	sl, r0, r4
   28bd8:	mov	r0, r7
   28bdc:	bl	11eac <strlen@plt>
   28be0:	add	r9, r0, #1
   28be4:	cmp	r9, sl
   28be8:	bge	28c14 <_obstack_memory_used@@Base+0x2890>
   28bec:	mov	r0, r4
   28bf0:	mov	r1, r7
   28bf4:	mov	r2, r9
   28bf8:	bl	11c60 <memcpy@plt>
   28bfc:	mov	r0, #0
   28c00:	strb	r0, [r4, r9]
   28c04:	str	r4, [r5, #40]	; 0x28
   28c08:	mov	r0, r8
   28c0c:	sub	sp, fp, #28
   28c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c14:	add	r0, r0, #10
   28c18:	cmp	r9, #59	; 0x3b
   28c1c:	bic	r0, r0, #3
   28c20:	movwcc	r0, #64	; 0x40
   28c24:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   28c28:	cmp	r0, #0
   28c2c:	beq	28c78 <_obstack_memory_used@@Base+0x28f4>
   28c30:	mov	sl, r0
   28c34:	mov	r0, #0
   28c38:	mov	r1, r7
   28c3c:	mov	r2, r9
   28c40:	str	r0, [sl]
   28c44:	mov	r0, #1
   28c48:	add	r4, sl, #5
   28c4c:	strh	r0, [sl, #4]
   28c50:	mov	r0, r4
   28c54:	bl	11c60 <memcpy@plt>
   28c58:	mov	r0, #0
   28c5c:	strb	r0, [r4, r9]
   28c60:	str	sl, [r6]
   28c64:	strb	r0, [sl, #4]
   28c68:	str	r4, [r5, #40]	; 0x28
   28c6c:	mov	r0, r8
   28c70:	sub	sp, fp, #28
   28c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c78:	mov	r8, #0
   28c7c:	str	r8, [r6]
   28c80:	mov	r0, r8
   28c84:	sub	sp, fp, #28
   28c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c90:	add	fp, sp, #28
   28c94:	sub	sp, sp, #52	; 0x34
   28c98:	mov	r9, r1
   28c9c:	cmp	r0, #0
   28ca0:	beq	28d1c <_obstack_memory_used@@Base+0x2998>
   28ca4:	mov	r7, r0
   28ca8:	movw	r0, #46892	; 0xb72c
   28cac:	movt	r0, #2
   28cb0:	bl	11dec <getenv@plt>
   28cb4:	mov	r6, r0
   28cb8:	ldrb	r0, [r7, #4]
   28cbc:	cmp	r6, #0
   28cc0:	beq	28d2c <_obstack_memory_used@@Base+0x29a8>
   28cc4:	cmp	r0, #0
   28cc8:	beq	28ce0 <_obstack_memory_used@@Base+0x295c>
   28ccc:	add	r0, r7, #5
   28cd0:	mov	r1, r6
   28cd4:	bl	11bd0 <strcmp@plt>
   28cd8:	cmp	r0, #0
   28cdc:	beq	28df0 <_obstack_memory_used@@Base+0x2a6c>
   28ce0:	mov	r0, r6
   28ce4:	bl	11eac <strlen@plt>
   28ce8:	add	r8, r0, #1
   28cec:	mov	sl, #1
   28cf0:	cmp	r8, #58	; 0x3a
   28cf4:	bls	28d3c <_obstack_memory_used@@Base+0x29b8>
   28cf8:	add	r0, r0, #10
   28cfc:	bic	r0, r0, #3
   28d00:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   28d04:	mvn	r4, #0
   28d08:	cmp	r0, #0
   28d0c:	bne	28d50 <_obstack_memory_used@@Base+0x29cc>
   28d10:	mov	r0, r4
   28d14:	sub	sp, fp, #28
   28d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d1c:	mov	r0, r9
   28d20:	sub	sp, fp, #28
   28d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d28:	b	11fcc <timegm@plt>
   28d2c:	mov	sl, #0
   28d30:	cmp	r0, #0
   28d34:	mov	r8, #0
   28d38:	beq	28df0 <_obstack_memory_used@@Base+0x2a6c>
   28d3c:	mov	r0, #64	; 0x40
   28d40:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   28d44:	mvn	r4, #0
   28d48:	cmp	r0, #0
   28d4c:	beq	28d10 <_obstack_memory_used@@Base+0x298c>
   28d50:	mov	r5, r0
   28d54:	strb	sl, [r0, #4]
   28d58:	mov	r0, #0
   28d5c:	cmp	sl, #0
   28d60:	mov	r4, r5
   28d64:	str	r0, [r5]
   28d68:	strb	r0, [r4, #5]!
   28d6c:	beq	28d88 <_obstack_memory_used@@Base+0x2a04>
   28d70:	mov	r0, r4
   28d74:	mov	r1, r6
   28d78:	mov	r2, r8
   28d7c:	mov	sl, #0
   28d80:	bl	11c60 <memcpy@plt>
   28d84:	strb	sl, [r4, r8]
   28d88:	ldrb	r0, [r7, #4]
   28d8c:	cmp	r0, #0
   28d90:	beq	28df8 <_obstack_memory_used@@Base+0x2a74>
   28d94:	movw	r0, #46892	; 0xb72c
   28d98:	add	r1, r7, #5
   28d9c:	mov	r2, #1
   28da0:	movt	r0, #2
   28da4:	bl	11ec4 <setenv@plt>
   28da8:	mvn	r4, #0
   28dac:	cmp	r0, #0
   28db0:	beq	28e10 <_obstack_memory_used@@Base+0x2a8c>
   28db4:	bl	11ed0 <__errno_location@plt>
   28db8:	ldr	r8, [r0]
   28dbc:	mov	r6, r0
   28dc0:	cmp	r5, #2
   28dc4:	bcc	28de0 <_obstack_memory_used@@Base+0x2a5c>
   28dc8:	ldr	r7, [r5]
   28dcc:	mov	r0, r5
   28dd0:	bl	21218 <__assert_fail@plt+0xf18c>
   28dd4:	cmp	r7, #0
   28dd8:	mov	r5, r7
   28ddc:	bne	28dc8 <_obstack_memory_used@@Base+0x2a44>
   28de0:	str	r8, [r6]
   28de4:	mov	r0, r4
   28de8:	sub	sp, fp, #28
   28dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28df0:	mov	r5, #1
   28df4:	b	28e14 <_obstack_memory_used@@Base+0x2a90>
   28df8:	movw	r0, #46892	; 0xb72c
   28dfc:	movt	r0, #2
   28e00:	bl	12020 <unsetenv@plt>
   28e04:	mvn	r4, #0
   28e08:	cmp	r0, #0
   28e0c:	bne	28db4 <_obstack_memory_used@@Base+0x2a30>
   28e10:	bl	11d2c <tzset@plt>
   28e14:	mov	r1, #32
   28e18:	mov	r2, r9
   28e1c:	add	r0, sp, #8
   28e20:	vld1.32	{d16-d17}, [r2], r1
   28e24:	mov	r3, r0
   28e28:	vst1.32	{d16-d17}, [r3], r1
   28e2c:	ldr	r1, [r9, #16]
   28e30:	ldr	r6, [r9, #20]
   28e34:	str	r1, [sp, #24]
   28e38:	mvn	r1, #0
   28e3c:	str	r1, [sp, #36]	; 0x24
   28e40:	str	r6, [sp, #28]
   28e44:	ldr	r1, [r2]
   28e48:	str	r1, [r3]
   28e4c:	bl	11be8 <mktime@plt>
   28e50:	ldr	r1, [sp, #36]	; 0x24
   28e54:	cmn	r1, #1
   28e58:	ble	28ee0 <_obstack_memory_used@@Base+0x2b5c>
   28e5c:	add	r8, sp, #8
   28e60:	str	r0, [sp, #4]
   28e64:	mov	r0, r7
   28e68:	mov	r1, r8
   28e6c:	bl	28b08 <_obstack_memory_used@@Base+0x2784>
   28e70:	mov	sl, r0
   28e74:	cmp	r5, #1
   28e78:	beq	28f44 <_obstack_memory_used@@Base+0x2bc0>
   28e7c:	bl	11ed0 <__errno_location@plt>
   28e80:	mov	r7, r0
   28e84:	ldr	r4, [r0]
   28e88:	ldrb	r0, [r5, #4]
   28e8c:	cmp	r0, #0
   28e90:	beq	28f64 <_obstack_memory_used@@Base+0x2be0>
   28e94:	movw	r0, #46892	; 0xb72c
   28e98:	add	r1, r5, #5
   28e9c:	mov	r2, #1
   28ea0:	movt	r0, #2
   28ea4:	bl	11ec4 <setenv@plt>
   28ea8:	cmp	r0, #0
   28eac:	beq	28f78 <_obstack_memory_used@@Base+0x2bf4>
   28eb0:	ldr	r4, [r7]
   28eb4:	mov	r6, #0
   28eb8:	cmp	r5, #2
   28ebc:	bcc	28fa8 <_obstack_memory_used@@Base+0x2c24>
   28ec0:	str	r4, [sp]
   28ec4:	ldr	r4, [r5]
   28ec8:	mov	r0, r5
   28ecc:	bl	21218 <__assert_fail@plt+0xf18c>
   28ed0:	cmp	r4, #0
   28ed4:	mov	r5, r4
   28ed8:	bne	28ec4 <_obstack_memory_used@@Base+0x2b40>
   28edc:	b	28fa4 <_obstack_memory_used@@Base+0x2c20>
   28ee0:	cmp	r5, #1
   28ee4:	beq	28f54 <_obstack_memory_used@@Base+0x2bd0>
   28ee8:	bl	11ed0 <__errno_location@plt>
   28eec:	mov	r4, r0
   28ef0:	ldr	r6, [r0]
   28ef4:	ldrb	r0, [r5, #4]
   28ef8:	cmp	r0, #0
   28efc:	beq	28fec <_obstack_memory_used@@Base+0x2c68>
   28f00:	movw	r0, #46892	; 0xb72c
   28f04:	add	r1, r5, #5
   28f08:	mov	r2, #1
   28f0c:	movt	r0, #2
   28f10:	bl	11ec4 <setenv@plt>
   28f14:	cmp	r0, #0
   28f18:	beq	29000 <_obstack_memory_used@@Base+0x2c7c>
   28f1c:	ldr	r6, [r4]
   28f20:	cmp	r5, #2
   28f24:	bcc	29024 <_obstack_memory_used@@Base+0x2ca0>
   28f28:	ldr	r7, [r5]
   28f2c:	mov	r0, r5
   28f30:	bl	21218 <__assert_fail@plt+0xf18c>
   28f34:	cmp	r7, #0
   28f38:	mov	r5, r7
   28f3c:	bne	28f28 <_obstack_memory_used@@Base+0x2ba4>
   28f40:	b	29024 <_obstack_memory_used@@Base+0x2ca0>
   28f44:	mov	r6, #1
   28f48:	and	r0, sl, r6
   28f4c:	cmp	r0, #1
   28f50:	beq	28fb8 <_obstack_memory_used@@Base+0x2c34>
   28f54:	mvn	r4, #0
   28f58:	mov	r0, r4
   28f5c:	sub	sp, fp, #28
   28f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f64:	movw	r0, #46892	; 0xb72c
   28f68:	movt	r0, #2
   28f6c:	bl	12020 <unsetenv@plt>
   28f70:	cmp	r0, #0
   28f74:	bne	28eb0 <_obstack_memory_used@@Base+0x2b2c>
   28f78:	bl	11d2c <tzset@plt>
   28f7c:	mov	r6, #1
   28f80:	cmp	r5, #2
   28f84:	bcc	28fa8 <_obstack_memory_used@@Base+0x2c24>
   28f88:	str	r4, [sp]
   28f8c:	ldr	r4, [r5]
   28f90:	mov	r0, r5
   28f94:	bl	21218 <__assert_fail@plt+0xf18c>
   28f98:	cmp	r4, #0
   28f9c:	mov	r5, r4
   28fa0:	bne	28f8c <_obstack_memory_used@@Base+0x2c08>
   28fa4:	ldr	r4, [sp]
   28fa8:	str	r4, [r7]
   28fac:	and	r0, sl, r6
   28fb0:	cmp	r0, #1
   28fb4:	bne	28f54 <_obstack_memory_used@@Base+0x2bd0>
   28fb8:	mov	r0, #28
   28fbc:	add	r1, r8, #16
   28fc0:	ldr	r4, [sp, #4]
   28fc4:	vld1.32	{d16-d17}, [r8], r0
   28fc8:	vld1.64	{d18-d19}, [r1]
   28fcc:	add	r1, r9, #16
   28fd0:	vld1.32	{d20-d21}, [r8]
   28fd4:	vst1.32	{d16-d17}, [r9], r0
   28fd8:	vst1.32	{d18-d19}, [r1]
   28fdc:	vst1.32	{d20-d21}, [r9]
   28fe0:	mov	r0, r4
   28fe4:	sub	sp, fp, #28
   28fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28fec:	movw	r0, #46892	; 0xb72c
   28ff0:	movt	r0, #2
   28ff4:	bl	12020 <unsetenv@plt>
   28ff8:	cmp	r0, #0
   28ffc:	bne	28f1c <_obstack_memory_used@@Base+0x2b98>
   29000:	bl	11d2c <tzset@plt>
   29004:	cmp	r5, #2
   29008:	bcc	29024 <_obstack_memory_used@@Base+0x2ca0>
   2900c:	ldr	r7, [r5]
   29010:	mov	r0, r5
   29014:	bl	21218 <__assert_fail@plt+0xf18c>
   29018:	cmp	r7, #0
   2901c:	mov	r5, r7
   29020:	bne	2900c <_obstack_memory_used@@Base+0x2c88>
   29024:	str	r6, [r4]
   29028:	mvn	r4, #0
   2902c:	mov	r0, r4
   29030:	sub	sp, fp, #28
   29034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29038:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2903c:	add	fp, sp, #24
   29040:	sub	sp, sp, #32
   29044:	ldr	r6, [fp, #12]
   29048:	ldr	r7, [fp, #8]
   2904c:	mov	r4, r2
   29050:	mov	r8, r0
   29054:	cmp	r1, #0
   29058:	beq	29080 <_obstack_memory_used@@Base+0x2cfc>
   2905c:	movw	r2, #63376	; 0xf790
   29060:	mov	r5, r1
   29064:	str	r3, [sp, #4]
   29068:	str	r4, [sp]
   2906c:	mov	r0, r8
   29070:	mov	r1, #1
   29074:	movt	r2, #2
   29078:	mov	r3, r5
   2907c:	b	29098 <_obstack_memory_used@@Base+0x2d14>
   29080:	movw	r2, #63388	; 0xf79c
   29084:	str	r3, [sp]
   29088:	mov	r0, r8
   2908c:	mov	r1, #1
   29090:	mov	r3, r4
   29094:	movt	r2, #2
   29098:	bl	11f24 <__fprintf_chk@plt>
   2909c:	movw	r1, #63395	; 0xf7a3
   290a0:	mov	r0, #0
   290a4:	mov	r2, #5
   290a8:	movt	r1, #2
   290ac:	bl	11cb4 <dcgettext@plt>
   290b0:	movw	r2, #64113	; 0xfa71
   290b4:	mov	r3, r0
   290b8:	movw	r0, #2022	; 0x7e6
   290bc:	mov	r1, #1
   290c0:	str	r0, [sp]
   290c4:	movt	r2, #2
   290c8:	mov	r0, r8
   290cc:	bl	11f24 <__fprintf_chk@plt>
   290d0:	movw	r4, #56877	; 0xde2d
   290d4:	mov	r1, r8
   290d8:	movt	r4, #2
   290dc:	mov	r0, r4
   290e0:	bl	11b94 <fputs_unlocked@plt>
   290e4:	movw	r1, #63399	; 0xf7a7
   290e8:	mov	r0, #0
   290ec:	mov	r2, #5
   290f0:	movt	r1, #2
   290f4:	bl	11cb4 <dcgettext@plt>
   290f8:	movw	r3, #63570	; 0xf852
   290fc:	mov	r2, r0
   29100:	mov	r0, r8
   29104:	mov	r1, #1
   29108:	movt	r3, #2
   2910c:	bl	11f24 <__fprintf_chk@plt>
   29110:	mov	r0, r4
   29114:	mov	r1, r8
   29118:	bl	11b94 <fputs_unlocked@plt>
   2911c:	cmp	r6, #9
   29120:	bhi	2915c <_obstack_memory_used@@Base+0x2dd8>
   29124:	add	r0, pc, #0
   29128:	ldr	pc, [r0, r6, lsl #2]
   2912c:	andeq	r9, r2, r4, asr r1
   29130:	andeq	r9, r2, r8, ror #2
   29134:	muleq	r2, r8, r1
   29138:	andeq	r9, r2, r0, asr #3
   2913c:	andeq	r9, r2, r8, ror #3
   29140:	andeq	r9, r2, r0, lsl r2
   29144:	andeq	r9, r2, r8, lsr r2
   29148:	andeq	r9, r2, r0, ror r2
   2914c:	andeq	r9, r2, r8, lsl r3
   29150:	andeq	r9, r2, r0, asr #5
   29154:	sub	sp, fp, #24
   29158:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2915c:	movw	r1, #63923	; 0xf9b3
   29160:	movt	r1, #2
   29164:	b	292c8 <_obstack_memory_used@@Base+0x2f44>
   29168:	movw	r1, #63604	; 0xf874
   2916c:	mov	r0, #0
   29170:	mov	r2, #5
   29174:	movt	r1, #2
   29178:	bl	11cb4 <dcgettext@plt>
   2917c:	ldr	r3, [r7]
   29180:	mov	r2, r0
   29184:	mov	r0, r8
   29188:	mov	r1, #1
   2918c:	sub	sp, fp, #24
   29190:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   29194:	b	11f24 <__fprintf_chk@plt>
   29198:	movw	r1, #63620	; 0xf884
   2919c:	mov	r0, #0
   291a0:	mov	r2, #5
   291a4:	movt	r1, #2
   291a8:	bl	11cb4 <dcgettext@plt>
   291ac:	mov	r2, r0
   291b0:	ldr	r3, [r7]
   291b4:	ldr	r0, [r7, #4]
   291b8:	str	r0, [sp]
   291bc:	b	292ac <_obstack_memory_used@@Base+0x2f28>
   291c0:	movw	r1, #63643	; 0xf89b
   291c4:	mov	r0, #0
   291c8:	mov	r2, #5
   291cc:	movt	r1, #2
   291d0:	bl	11cb4 <dcgettext@plt>
   291d4:	ldr	r3, [r7]
   291d8:	mov	r2, r0
   291dc:	ldmib	r7, {r0, r1}
   291e0:	stm	sp, {r0, r1}
   291e4:	b	292ac <_obstack_memory_used@@Base+0x2f28>
   291e8:	movw	r1, #63671	; 0xf8b7
   291ec:	mov	r0, #0
   291f0:	mov	r2, #5
   291f4:	movt	r1, #2
   291f8:	bl	11cb4 <dcgettext@plt>
   291fc:	ldr	r3, [r7]
   29200:	mov	r2, r0
   29204:	ldmib	r7, {r0, r1, r7}
   29208:	stm	sp, {r0, r1, r7}
   2920c:	b	292ac <_obstack_memory_used@@Base+0x2f28>
   29210:	movw	r1, #63703	; 0xf8d7
   29214:	mov	r0, #0
   29218:	mov	r2, #5
   2921c:	movt	r1, #2
   29220:	bl	11cb4 <dcgettext@plt>
   29224:	ldr	r3, [r7]
   29228:	mov	r2, r0
   2922c:	ldmib	r7, {r0, r1, r6, r7}
   29230:	stm	sp, {r0, r1, r6, r7}
   29234:	b	292ac <_obstack_memory_used@@Base+0x2f28>
   29238:	movw	r1, #63739	; 0xf8fb
   2923c:	mov	r0, #0
   29240:	mov	r2, #5
   29244:	movt	r1, #2
   29248:	bl	11cb4 <dcgettext@plt>
   2924c:	ldr	r3, [r7]
   29250:	mov	r2, r0
   29254:	ldmib	r7, {r0, r1, r6}
   29258:	ldr	r5, [r7, #16]
   2925c:	ldr	r7, [r7, #20]
   29260:	stm	sp, {r0, r1, r6}
   29264:	str	r5, [sp, #12]
   29268:	str	r7, [sp, #16]
   2926c:	b	292ac <_obstack_memory_used@@Base+0x2f28>
   29270:	movw	r1, #63779	; 0xf923
   29274:	mov	r0, #0
   29278:	mov	r2, #5
   2927c:	movt	r1, #2
   29280:	bl	11cb4 <dcgettext@plt>
   29284:	ldr	r3, [r7]
   29288:	mov	r2, r0
   2928c:	ldmib	r7, {r0, r1, r6}
   29290:	ldr	r5, [r7, #16]
   29294:	ldr	r4, [r7, #20]
   29298:	ldr	r7, [r7, #24]
   2929c:	stm	sp, {r0, r1, r6}
   292a0:	str	r5, [sp, #12]
   292a4:	str	r4, [sp, #16]
   292a8:	str	r7, [sp, #20]
   292ac:	mov	r0, r8
   292b0:	mov	r1, #1
   292b4:	bl	11f24 <__fprintf_chk@plt>
   292b8:	sub	sp, fp, #24
   292bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   292c0:	movw	r1, #63871	; 0xf97f
   292c4:	movt	r1, #2
   292c8:	mov	r0, #0
   292cc:	mov	r2, #5
   292d0:	bl	11cb4 <dcgettext@plt>
   292d4:	mov	ip, r0
   292d8:	ldr	r3, [r7]
   292dc:	ldr	r0, [r7, #4]
   292e0:	ldr	r1, [r7, #8]
   292e4:	ldr	r6, [r7, #12]
   292e8:	ldr	r5, [r7, #16]
   292ec:	ldr	r4, [r7, #20]
   292f0:	ldr	r2, [r7, #24]
   292f4:	ldr	lr, [r7, #28]
   292f8:	ldr	r7, [r7, #32]
   292fc:	stm	sp, {r0, r1, r6}
   29300:	str	r5, [sp, #12]
   29304:	str	r4, [sp, #16]
   29308:	str	r2, [sp, #20]
   2930c:	str	lr, [sp, #24]
   29310:	str	r7, [sp, #28]
   29314:	b	2935c <_obstack_memory_used@@Base+0x2fd8>
   29318:	movw	r1, #63823	; 0xf94f
   2931c:	mov	r0, #0
   29320:	mov	r2, #5
   29324:	movt	r1, #2
   29328:	bl	11cb4 <dcgettext@plt>
   2932c:	mov	ip, r0
   29330:	ldr	r3, [r7]
   29334:	ldmib	r7, {r0, r1, r6}
   29338:	ldr	r5, [r7, #16]
   2933c:	ldr	r4, [r7, #20]
   29340:	ldr	r2, [r7, #24]
   29344:	ldr	r7, [r7, #28]
   29348:	stm	sp, {r0, r1, r6}
   2934c:	str	r5, [sp, #12]
   29350:	str	r4, [sp, #16]
   29354:	str	r2, [sp, #20]
   29358:	str	r7, [sp, #24]
   2935c:	mov	r0, r8
   29360:	mov	r1, #1
   29364:	mov	r2, ip
   29368:	bl	11f24 <__fprintf_chk@plt>
   2936c:	sub	sp, fp, #24
   29370:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29374:	push	{r4, sl, fp, lr}
   29378:	add	fp, sp, #8
   2937c:	sub	sp, sp, #8
   29380:	ldr	ip, [fp, #8]
   29384:	mov	lr, #0
   29388:	ldr	r4, [ip, lr, lsl #2]
   2938c:	add	lr, lr, #1
   29390:	cmp	r4, #0
   29394:	bne	29388 <_obstack_memory_used@@Base+0x3004>
   29398:	sub	r4, lr, #1
   2939c:	str	ip, [sp]
   293a0:	str	r4, [sp, #4]
   293a4:	bl	29038 <_obstack_memory_used@@Base+0x2cb4>
   293a8:	sub	sp, fp, #8
   293ac:	pop	{r4, sl, fp, pc}
   293b0:	push	{fp, lr}
   293b4:	mov	fp, sp
   293b8:	sub	sp, sp, #48	; 0x30
   293bc:	ldr	ip, [fp, #8]
   293c0:	ldr	lr, [ip]
   293c4:	cmp	lr, #0
   293c8:	str	lr, [sp, #8]
   293cc:	beq	29468 <_obstack_memory_used@@Base+0x30e4>
   293d0:	ldr	lr, [ip, #4]
   293d4:	cmp	lr, #0
   293d8:	str	lr, [sp, #12]
   293dc:	beq	29470 <_obstack_memory_used@@Base+0x30ec>
   293e0:	ldr	lr, [ip, #8]
   293e4:	cmp	lr, #0
   293e8:	str	lr, [sp, #16]
   293ec:	beq	29478 <_obstack_memory_used@@Base+0x30f4>
   293f0:	ldr	lr, [ip, #12]
   293f4:	cmp	lr, #0
   293f8:	str	lr, [sp, #20]
   293fc:	beq	29480 <_obstack_memory_used@@Base+0x30fc>
   29400:	ldr	lr, [ip, #16]
   29404:	cmp	lr, #0
   29408:	str	lr, [sp, #24]
   2940c:	beq	29488 <_obstack_memory_used@@Base+0x3104>
   29410:	ldr	lr, [ip, #20]
   29414:	cmp	lr, #0
   29418:	str	lr, [sp, #28]
   2941c:	beq	29490 <_obstack_memory_used@@Base+0x310c>
   29420:	ldr	lr, [ip, #24]
   29424:	cmp	lr, #0
   29428:	str	lr, [sp, #32]
   2942c:	beq	29498 <_obstack_memory_used@@Base+0x3114>
   29430:	ldr	lr, [ip, #28]
   29434:	cmp	lr, #0
   29438:	str	lr, [sp, #36]	; 0x24
   2943c:	beq	294a0 <_obstack_memory_used@@Base+0x311c>
   29440:	ldr	lr, [ip, #32]
   29444:	cmp	lr, #0
   29448:	str	lr, [sp, #40]	; 0x28
   2944c:	beq	294a8 <_obstack_memory_used@@Base+0x3124>
   29450:	ldr	lr, [ip, #36]	; 0x24
   29454:	mov	ip, #10
   29458:	cmp	lr, #0
   2945c:	str	lr, [sp, #44]	; 0x2c
   29460:	movweq	ip, #9
   29464:	b	294ac <_obstack_memory_used@@Base+0x3128>
   29468:	mov	ip, #0
   2946c:	b	294ac <_obstack_memory_used@@Base+0x3128>
   29470:	mov	ip, #1
   29474:	b	294ac <_obstack_memory_used@@Base+0x3128>
   29478:	mov	ip, #2
   2947c:	b	294ac <_obstack_memory_used@@Base+0x3128>
   29480:	mov	ip, #3
   29484:	b	294ac <_obstack_memory_used@@Base+0x3128>
   29488:	mov	ip, #4
   2948c:	b	294ac <_obstack_memory_used@@Base+0x3128>
   29490:	mov	ip, #5
   29494:	b	294ac <_obstack_memory_used@@Base+0x3128>
   29498:	mov	ip, #6
   2949c:	b	294ac <_obstack_memory_used@@Base+0x3128>
   294a0:	mov	ip, #7
   294a4:	b	294ac <_obstack_memory_used@@Base+0x3128>
   294a8:	mov	ip, #8
   294ac:	add	lr, sp, #8
   294b0:	str	ip, [sp, #4]
   294b4:	str	lr, [sp]
   294b8:	bl	29038 <_obstack_memory_used@@Base+0x2cb4>
   294bc:	mov	sp, fp
   294c0:	pop	{fp, pc}
   294c4:	push	{fp, lr}
   294c8:	mov	fp, sp
   294cc:	sub	sp, sp, #56	; 0x38
   294d0:	add	ip, fp, #8
   294d4:	str	ip, [sp, #12]
   294d8:	ldr	lr, [fp, #8]
   294dc:	cmp	lr, #0
   294e0:	str	lr, [sp, #16]
   294e4:	beq	29580 <_obstack_memory_used@@Base+0x31fc>
   294e8:	ldr	lr, [ip, #4]
   294ec:	cmp	lr, #0
   294f0:	str	lr, [sp, #20]
   294f4:	beq	29588 <_obstack_memory_used@@Base+0x3204>
   294f8:	ldr	lr, [ip, #8]
   294fc:	cmp	lr, #0
   29500:	str	lr, [sp, #24]
   29504:	beq	29590 <_obstack_memory_used@@Base+0x320c>
   29508:	ldr	lr, [ip, #12]
   2950c:	cmp	lr, #0
   29510:	str	lr, [sp, #28]
   29514:	beq	29598 <_obstack_memory_used@@Base+0x3214>
   29518:	ldr	lr, [ip, #16]
   2951c:	cmp	lr, #0
   29520:	str	lr, [sp, #32]
   29524:	beq	295a0 <_obstack_memory_used@@Base+0x321c>
   29528:	ldr	lr, [ip, #20]
   2952c:	cmp	lr, #0
   29530:	str	lr, [sp, #36]	; 0x24
   29534:	beq	295a8 <_obstack_memory_used@@Base+0x3224>
   29538:	ldr	lr, [ip, #24]
   2953c:	cmp	lr, #0
   29540:	str	lr, [sp, #40]	; 0x28
   29544:	beq	295b0 <_obstack_memory_used@@Base+0x322c>
   29548:	ldr	lr, [ip, #28]
   2954c:	cmp	lr, #0
   29550:	str	lr, [sp, #44]	; 0x2c
   29554:	beq	295b8 <_obstack_memory_used@@Base+0x3234>
   29558:	ldr	lr, [ip, #32]
   2955c:	cmp	lr, #0
   29560:	str	lr, [sp, #48]	; 0x30
   29564:	beq	295c0 <_obstack_memory_used@@Base+0x323c>
   29568:	ldr	lr, [ip, #36]	; 0x24
   2956c:	mov	ip, #10
   29570:	cmp	lr, #0
   29574:	str	lr, [sp, #52]	; 0x34
   29578:	movweq	ip, #9
   2957c:	b	295c4 <_obstack_memory_used@@Base+0x3240>
   29580:	mov	ip, #0
   29584:	b	295c4 <_obstack_memory_used@@Base+0x3240>
   29588:	mov	ip, #1
   2958c:	b	295c4 <_obstack_memory_used@@Base+0x3240>
   29590:	mov	ip, #2
   29594:	b	295c4 <_obstack_memory_used@@Base+0x3240>
   29598:	mov	ip, #3
   2959c:	b	295c4 <_obstack_memory_used@@Base+0x3240>
   295a0:	mov	ip, #4
   295a4:	b	295c4 <_obstack_memory_used@@Base+0x3240>
   295a8:	mov	ip, #5
   295ac:	b	295c4 <_obstack_memory_used@@Base+0x3240>
   295b0:	mov	ip, #6
   295b4:	b	295c4 <_obstack_memory_used@@Base+0x3240>
   295b8:	mov	ip, #7
   295bc:	b	295c4 <_obstack_memory_used@@Base+0x3240>
   295c0:	mov	ip, #8
   295c4:	add	lr, sp, #16
   295c8:	str	ip, [sp, #4]
   295cc:	str	lr, [sp]
   295d0:	bl	29038 <_obstack_memory_used@@Base+0x2cb4>
   295d4:	mov	sp, fp
   295d8:	pop	{fp, pc}
   295dc:	push	{fp, lr}
   295e0:	mov	fp, sp
   295e4:	movw	r0, #780	; 0x30c
   295e8:	movt	r0, #4
   295ec:	ldr	r1, [r0]
   295f0:	movw	r0, #56877	; 0xde2d
   295f4:	movt	r0, #2
   295f8:	bl	11b94 <fputs_unlocked@plt>
   295fc:	movw	r1, #63983	; 0xf9ef
   29600:	mov	r0, #0
   29604:	mov	r2, #5
   29608:	movt	r1, #2
   2960c:	bl	11cb4 <dcgettext@plt>
   29610:	movw	r2, #64003	; 0xfa03
   29614:	mov	r1, r0
   29618:	mov	r0, #1
   2961c:	movt	r2, #2
   29620:	bl	11f00 <__printf_chk@plt>
   29624:	movw	r1, #64025	; 0xfa19
   29628:	mov	r0, #0
   2962c:	mov	r2, #5
   29630:	movt	r1, #2
   29634:	bl	11cb4 <dcgettext@plt>
   29638:	movw	r2, #54683	; 0xd59b
   2963c:	movw	r3, #56686	; 0xdd6e
   29640:	mov	r1, r0
   29644:	mov	r0, #1
   29648:	movt	r2, #2
   2964c:	movt	r3, #2
   29650:	bl	11f00 <__printf_chk@plt>
   29654:	movw	r1, #64045	; 0xfa2d
   29658:	mov	r0, #0
   2965c:	mov	r2, #5
   29660:	movt	r1, #2
   29664:	bl	11cb4 <dcgettext@plt>
   29668:	movw	r2, #64084	; 0xfa54
   2966c:	mov	r1, r0
   29670:	mov	r0, #1
   29674:	movt	r2, #2
   29678:	pop	{fp, lr}
   2967c:	b	11f00 <__printf_chk@plt>
   29680:	push	{r4, r5, r6, sl, fp, lr}
   29684:	add	fp, sp, #16
   29688:	mov	r4, r2
   2968c:	mov	r5, r1
   29690:	mov	r6, r0
   29694:	bl	2b000 <_obstack_memory_used@@Base+0x4c7c>
   29698:	cmp	r0, #0
   2969c:	popne	{r4, r5, r6, sl, fp, pc}
   296a0:	cmp	r6, #0
   296a4:	beq	296b8 <_obstack_memory_used@@Base+0x3334>
   296a8:	cmp	r5, #0
   296ac:	cmpne	r4, #0
   296b0:	bne	296b8 <_obstack_memory_used@@Base+0x3334>
   296b4:	pop	{r4, r5, r6, sl, fp, pc}
   296b8:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   296bc:	push	{r4, r5, r6, sl, fp, lr}
   296c0:	add	fp, sp, #16
   296c4:	mov	r4, r2
   296c8:	mov	r5, r1
   296cc:	mov	r6, r0
   296d0:	bl	2b000 <_obstack_memory_used@@Base+0x4c7c>
   296d4:	cmp	r0, #0
   296d8:	popne	{r4, r5, r6, sl, fp, pc}
   296dc:	cmp	r6, #0
   296e0:	beq	296f4 <_obstack_memory_used@@Base+0x3370>
   296e4:	cmp	r5, #0
   296e8:	cmpne	r4, #0
   296ec:	bne	296f4 <_obstack_memory_used@@Base+0x3370>
   296f0:	pop	{r4, r5, r6, sl, fp, pc}
   296f4:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   296f8:	push	{fp, lr}
   296fc:	mov	fp, sp
   29700:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   29704:	cmp	r0, #0
   29708:	popne	{fp, pc}
   2970c:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29710:	push	{fp, lr}
   29714:	mov	fp, sp
   29718:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   2971c:	cmp	r0, #0
   29720:	popne	{fp, pc}
   29724:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29728:	push	{fp, lr}
   2972c:	mov	fp, sp
   29730:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   29734:	cmp	r0, #0
   29738:	popne	{fp, pc}
   2973c:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29740:	push	{r4, r5, fp, lr}
   29744:	add	fp, sp, #8
   29748:	mov	r4, r1
   2974c:	mov	r5, r0
   29750:	bl	2ad04 <_obstack_memory_used@@Base+0x4980>
   29754:	cmp	r0, #0
   29758:	popne	{r4, r5, fp, pc}
   2975c:	cmp	r5, #0
   29760:	beq	29770 <_obstack_memory_used@@Base+0x33ec>
   29764:	cmp	r4, #0
   29768:	bne	29770 <_obstack_memory_used@@Base+0x33ec>
   2976c:	pop	{r4, r5, fp, pc}
   29770:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29774:	push	{fp, lr}
   29778:	mov	fp, sp
   2977c:	cmp	r1, #0
   29780:	orreq	r1, r1, #1
   29784:	bl	2ad04 <_obstack_memory_used@@Base+0x4980>
   29788:	cmp	r0, #0
   2978c:	popne	{fp, pc}
   29790:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29794:	push	{fp, lr}
   29798:	mov	fp, sp
   2979c:	clz	r3, r2
   297a0:	lsr	ip, r3, #5
   297a4:	clz	r3, r1
   297a8:	lsr	r3, r3, #5
   297ac:	orrs	r3, r3, ip
   297b0:	movwne	r1, #1
   297b4:	movwne	r2, #1
   297b8:	bl	2b000 <_obstack_memory_used@@Base+0x4c7c>
   297bc:	cmp	r0, #0
   297c0:	popne	{fp, pc}
   297c4:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   297c8:	push	{fp, lr}
   297cc:	mov	fp, sp
   297d0:	mov	r2, r1
   297d4:	mov	r1, r0
   297d8:	mov	r0, #0
   297dc:	bl	2b000 <_obstack_memory_used@@Base+0x4c7c>
   297e0:	cmp	r0, #0
   297e4:	popne	{fp, pc}
   297e8:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   297ec:	push	{fp, lr}
   297f0:	mov	fp, sp
   297f4:	mov	r2, r1
   297f8:	mov	r1, r0
   297fc:	clz	r0, r2
   29800:	clz	r3, r1
   29804:	lsr	r0, r0, #5
   29808:	lsr	r3, r3, #5
   2980c:	orrs	r0, r3, r0
   29810:	movwne	r1, #1
   29814:	movwne	r2, #1
   29818:	mov	r0, #0
   2981c:	bl	2b000 <_obstack_memory_used@@Base+0x4c7c>
   29820:	cmp	r0, #0
   29824:	popne	{fp, pc}
   29828:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   2982c:	push	{r4, r5, r6, sl, fp, lr}
   29830:	add	fp, sp, #16
   29834:	ldr	r5, [r1]
   29838:	mov	r4, r1
   2983c:	mov	r6, r0
   29840:	cmp	r0, #0
   29844:	beq	2985c <_obstack_memory_used@@Base+0x34d8>
   29848:	mov	r0, #1
   2984c:	add	r0, r0, r5, lsr #1
   29850:	adds	r5, r5, r0
   29854:	bcc	29864 <_obstack_memory_used@@Base+0x34e0>
   29858:	b	298a0 <_obstack_memory_used@@Base+0x351c>
   2985c:	cmp	r5, #0
   29860:	movweq	r5, #64	; 0x40
   29864:	mov	r0, r6
   29868:	mov	r1, r5
   2986c:	mov	r2, #1
   29870:	bl	2b000 <_obstack_memory_used@@Base+0x4c7c>
   29874:	cmp	r5, #0
   29878:	mov	r1, r5
   2987c:	movwne	r1, #1
   29880:	cmp	r0, #0
   29884:	bne	29898 <_obstack_memory_used@@Base+0x3514>
   29888:	clz	r2, r6
   2988c:	lsr	r2, r2, #5
   29890:	orrs	r1, r2, r1
   29894:	bne	298a0 <_obstack_memory_used@@Base+0x351c>
   29898:	str	r5, [r4]
   2989c:	pop	{r4, r5, r6, sl, fp, pc}
   298a0:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   298a4:	push	{r4, r5, r6, r7, fp, lr}
   298a8:	add	fp, sp, #16
   298ac:	ldr	r5, [r1]
   298b0:	mov	r6, r2
   298b4:	mov	r4, r1
   298b8:	mov	r7, r0
   298bc:	cmp	r0, #0
   298c0:	beq	298d8 <_obstack_memory_used@@Base+0x3554>
   298c4:	mov	r0, #1
   298c8:	add	r0, r0, r5, lsr #1
   298cc:	adds	r5, r5, r0
   298d0:	bcc	298f0 <_obstack_memory_used@@Base+0x356c>
   298d4:	b	29924 <_obstack_memory_used@@Base+0x35a0>
   298d8:	cmp	r5, #0
   298dc:	bne	298f0 <_obstack_memory_used@@Base+0x356c>
   298e0:	mov	r0, #64	; 0x40
   298e4:	cmp	r6, #64	; 0x40
   298e8:	udiv	r5, r0, r6
   298ec:	addhi	r5, r5, #1
   298f0:	mov	r0, r7
   298f4:	mov	r1, r5
   298f8:	mov	r2, r6
   298fc:	bl	2b000 <_obstack_memory_used@@Base+0x4c7c>
   29900:	cmp	r0, #0
   29904:	bne	2991c <_obstack_memory_used@@Base+0x3598>
   29908:	cmp	r7, #0
   2990c:	beq	29924 <_obstack_memory_used@@Base+0x35a0>
   29910:	cmp	r6, #0
   29914:	cmpne	r5, #0
   29918:	bne	29924 <_obstack_memory_used@@Base+0x35a0>
   2991c:	str	r5, [r4]
   29920:	pop	{r4, r5, r6, r7, fp, pc}
   29924:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29928:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2992c:	add	fp, sp, #24
   29930:	mov	r8, r1
   29934:	ldr	r1, [r1]
   29938:	mov	r5, r0
   2993c:	add	r0, r1, r1, asr #1
   29940:	cmp	r0, r1
   29944:	mvnvs	r0, #-2147483648	; 0x80000000
   29948:	cmp	r0, r3
   2994c:	mov	r7, r0
   29950:	movgt	r7, r3
   29954:	cmn	r3, #1
   29958:	movle	r7, r0
   2995c:	ldr	r0, [fp, #8]
   29960:	cmn	r0, #1
   29964:	ble	2998c <_obstack_memory_used@@Base+0x3608>
   29968:	cmp	r0, #0
   2996c:	beq	299e0 <_obstack_memory_used@@Base+0x365c>
   29970:	cmn	r7, #1
   29974:	ble	299b4 <_obstack_memory_used@@Base+0x3630>
   29978:	mvn	r4, #-2147483648	; 0x80000000
   2997c:	udiv	r6, r4, r0
   29980:	cmp	r6, r7
   29984:	bge	299e0 <_obstack_memory_used@@Base+0x365c>
   29988:	b	299f0 <_obstack_memory_used@@Base+0x366c>
   2998c:	cmn	r7, #1
   29990:	ble	299d0 <_obstack_memory_used@@Base+0x364c>
   29994:	cmn	r0, #1
   29998:	beq	299e0 <_obstack_memory_used@@Base+0x365c>
   2999c:	mov	r6, #-2147483648	; 0x80000000
   299a0:	mvn	r4, #-2147483648	; 0x80000000
   299a4:	sdiv	r6, r6, r0
   299a8:	cmp	r6, r7
   299ac:	bge	299e0 <_obstack_memory_used@@Base+0x365c>
   299b0:	b	299f0 <_obstack_memory_used@@Base+0x366c>
   299b4:	beq	299e0 <_obstack_memory_used@@Base+0x365c>
   299b8:	mov	r6, #-2147483648	; 0x80000000
   299bc:	mvn	r4, #-2147483648	; 0x80000000
   299c0:	sdiv	r6, r6, r7
   299c4:	cmp	r6, r0
   299c8:	bge	299e0 <_obstack_memory_used@@Base+0x365c>
   299cc:	b	299f0 <_obstack_memory_used@@Base+0x366c>
   299d0:	mvn	r4, #-2147483648	; 0x80000000
   299d4:	sdiv	r6, r4, r0
   299d8:	cmp	r7, r6
   299dc:	blt	299f0 <_obstack_memory_used@@Base+0x366c>
   299e0:	mul	r6, r7, r0
   299e4:	mov	r4, #64	; 0x40
   299e8:	cmp	r6, #63	; 0x3f
   299ec:	bgt	299f8 <_obstack_memory_used@@Base+0x3674>
   299f0:	sdiv	r7, r4, r0
   299f4:	mul	r6, r7, r0
   299f8:	cmp	r5, #0
   299fc:	moveq	r4, #0
   29a00:	streq	r4, [r8]
   29a04:	sub	r4, r7, r1
   29a08:	cmp	r4, r2
   29a0c:	bge	29ab8 <_obstack_memory_used@@Base+0x3734>
   29a10:	add	r7, r1, r2
   29a14:	mov	r6, #0
   29a18:	mov	r2, #0
   29a1c:	cmp	r7, r3
   29a20:	movwgt	r6, #1
   29a24:	cmn	r3, #1
   29a28:	movwgt	r2, #1
   29a2c:	cmp	r7, r1
   29a30:	bvs	29aec <_obstack_memory_used@@Base+0x3768>
   29a34:	ands	r1, r2, r6
   29a38:	bne	29aec <_obstack_memory_used@@Base+0x3768>
   29a3c:	cmn	r0, #1
   29a40:	ble	29a68 <_obstack_memory_used@@Base+0x36e4>
   29a44:	cmp	r0, #0
   29a48:	beq	29ab4 <_obstack_memory_used@@Base+0x3730>
   29a4c:	cmn	r7, #1
   29a50:	ble	29a8c <_obstack_memory_used@@Base+0x3708>
   29a54:	mvn	r1, #-2147483648	; 0x80000000
   29a58:	udiv	r1, r1, r0
   29a5c:	cmp	r1, r7
   29a60:	bge	29ab4 <_obstack_memory_used@@Base+0x3730>
   29a64:	b	29aec <_obstack_memory_used@@Base+0x3768>
   29a68:	cmn	r7, #1
   29a6c:	ble	29aa4 <_obstack_memory_used@@Base+0x3720>
   29a70:	cmn	r0, #1
   29a74:	beq	29ab4 <_obstack_memory_used@@Base+0x3730>
   29a78:	mov	r1, #-2147483648	; 0x80000000
   29a7c:	sdiv	r1, r1, r0
   29a80:	cmp	r1, r7
   29a84:	bge	29ab4 <_obstack_memory_used@@Base+0x3730>
   29a88:	b	29aec <_obstack_memory_used@@Base+0x3768>
   29a8c:	beq	29ab4 <_obstack_memory_used@@Base+0x3730>
   29a90:	mov	r1, #-2147483648	; 0x80000000
   29a94:	sdiv	r1, r1, r7
   29a98:	cmp	r1, r0
   29a9c:	bge	29ab4 <_obstack_memory_used@@Base+0x3730>
   29aa0:	b	29aec <_obstack_memory_used@@Base+0x3768>
   29aa4:	mvn	r1, #-2147483648	; 0x80000000
   29aa8:	sdiv	r1, r1, r0
   29aac:	cmp	r7, r1
   29ab0:	blt	29aec <_obstack_memory_used@@Base+0x3768>
   29ab4:	mul	r6, r7, r0
   29ab8:	mov	r0, r5
   29abc:	mov	r1, r6
   29ac0:	bl	2ad04 <_obstack_memory_used@@Base+0x4980>
   29ac4:	cmp	r6, #0
   29ac8:	movwne	r6, #1
   29acc:	cmp	r0, #0
   29ad0:	bne	29ae4 <_obstack_memory_used@@Base+0x3760>
   29ad4:	clz	r1, r5
   29ad8:	lsr	r1, r1, #5
   29adc:	orrs	r1, r1, r6
   29ae0:	bne	29aec <_obstack_memory_used@@Base+0x3768>
   29ae4:	str	r7, [r8]
   29ae8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29aec:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29af0:	push	{fp, lr}
   29af4:	mov	fp, sp
   29af8:	mov	r1, #1
   29afc:	bl	2ac80 <_obstack_memory_used@@Base+0x48fc>
   29b00:	cmp	r0, #0
   29b04:	popne	{fp, pc}
   29b08:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29b0c:	push	{fp, lr}
   29b10:	mov	fp, sp
   29b14:	bl	2ac80 <_obstack_memory_used@@Base+0x48fc>
   29b18:	cmp	r0, #0
   29b1c:	popne	{fp, pc}
   29b20:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29b24:	push	{fp, lr}
   29b28:	mov	fp, sp
   29b2c:	mov	r1, #1
   29b30:	bl	2ac80 <_obstack_memory_used@@Base+0x48fc>
   29b34:	cmp	r0, #0
   29b38:	popne	{fp, pc}
   29b3c:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29b40:	push	{fp, lr}
   29b44:	mov	fp, sp
   29b48:	bl	2ac80 <_obstack_memory_used@@Base+0x48fc>
   29b4c:	cmp	r0, #0
   29b50:	popne	{fp, pc}
   29b54:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29b58:	push	{r4, r5, r6, sl, fp, lr}
   29b5c:	add	fp, sp, #16
   29b60:	mov	r5, r0
   29b64:	mov	r0, r1
   29b68:	mov	r4, r1
   29b6c:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   29b70:	cmp	r0, #0
   29b74:	beq	29b90 <_obstack_memory_used@@Base+0x380c>
   29b78:	mov	r1, r5
   29b7c:	mov	r2, r4
   29b80:	mov	r6, r0
   29b84:	bl	11c60 <memcpy@plt>
   29b88:	mov	r0, r6
   29b8c:	pop	{r4, r5, r6, sl, fp, pc}
   29b90:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29b94:	push	{r4, r5, r6, sl, fp, lr}
   29b98:	add	fp, sp, #16
   29b9c:	mov	r5, r0
   29ba0:	mov	r0, r1
   29ba4:	mov	r4, r1
   29ba8:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   29bac:	cmp	r0, #0
   29bb0:	beq	29bcc <_obstack_memory_used@@Base+0x3848>
   29bb4:	mov	r1, r5
   29bb8:	mov	r2, r4
   29bbc:	mov	r6, r0
   29bc0:	bl	11c60 <memcpy@plt>
   29bc4:	mov	r0, r6
   29bc8:	pop	{r4, r5, r6, sl, fp, pc}
   29bcc:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29bd0:	push	{r4, r5, r6, sl, fp, lr}
   29bd4:	add	fp, sp, #16
   29bd8:	mov	r5, r0
   29bdc:	add	r0, r1, #1
   29be0:	mov	r4, r1
   29be4:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   29be8:	cmp	r0, #0
   29bec:	beq	29c14 <_obstack_memory_used@@Base+0x3890>
   29bf0:	mov	r6, r0
   29bf4:	mov	r0, #0
   29bf8:	mov	r1, r5
   29bfc:	mov	r2, r4
   29c00:	strb	r0, [r6, r4]
   29c04:	mov	r0, r6
   29c08:	bl	11c60 <memcpy@plt>
   29c0c:	mov	r0, r6
   29c10:	pop	{r4, r5, r6, sl, fp, pc}
   29c14:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29c18:	push	{r4, r5, r6, sl, fp, lr}
   29c1c:	add	fp, sp, #16
   29c20:	mov	r4, r0
   29c24:	bl	11eac <strlen@plt>
   29c28:	add	r5, r0, #1
   29c2c:	mov	r0, r5
   29c30:	bl	2acd4 <_obstack_memory_used@@Base+0x4950>
   29c34:	cmp	r0, #0
   29c38:	beq	29c54 <_obstack_memory_used@@Base+0x38d0>
   29c3c:	mov	r1, r4
   29c40:	mov	r2, r5
   29c44:	mov	r6, r0
   29c48:	bl	11c60 <memcpy@plt>
   29c4c:	mov	r0, r6
   29c50:	pop	{r4, r5, r6, sl, fp, pc}
   29c54:	bl	29c58 <_obstack_memory_used@@Base+0x38d4>
   29c58:	push	{fp, lr}
   29c5c:	mov	fp, sp
   29c60:	movw	r0, #684	; 0x2ac
   29c64:	movw	r1, #63119	; 0xf68f
   29c68:	mov	r2, #5
   29c6c:	movt	r0, #4
   29c70:	movt	r1, #2
   29c74:	ldr	r4, [r0]
   29c78:	mov	r0, #0
   29c7c:	bl	11cb4 <dcgettext@plt>
   29c80:	movw	r2, #62850	; 0xf582
   29c84:	mov	r3, r0
   29c88:	mov	r0, r4
   29c8c:	mov	r1, #0
   29c90:	movt	r2, #2
   29c94:	bl	11db0 <error@plt>
   29c98:	bl	12038 <abort@plt>
   29c9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29ca0:	add	fp, sp, #24
   29ca4:	sub	sp, sp, #16
   29ca8:	mov	r8, r0
   29cac:	ldr	r0, [fp, #16]
   29cb0:	mov	r5, r3
   29cb4:	mov	r6, r2
   29cb8:	mov	r2, r1
   29cbc:	add	r3, sp, #8
   29cc0:	mov	r1, #0
   29cc4:	str	r0, [sp]
   29cc8:	mov	r0, r8
   29ccc:	bl	29fcc <_obstack_memory_used@@Base+0x3c48>
   29cd0:	cmp	r0, #0
   29cd4:	bne	29d60 <_obstack_memory_used@@Base+0x39dc>
   29cd8:	ldr	r4, [sp, #8]
   29cdc:	ldr	r7, [sp, #12]
   29ce0:	subs	r0, r4, r6
   29ce4:	sbcs	r0, r7, r5
   29ce8:	bcc	29d0c <_obstack_memory_used@@Base+0x3988>
   29cec:	ldr	r1, [fp, #8]
   29cf0:	ldr	r0, [fp, #12]
   29cf4:	subs	r1, r1, r4
   29cf8:	sbcs	r0, r0, r7
   29cfc:	movcs	r0, r4
   29d00:	movcs	r1, r7
   29d04:	subcs	sp, fp, #24
   29d08:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   29d0c:	bl	11ed0 <__errno_location@plt>
   29d10:	subs	r1, r4, #1073741824	; 0x40000000
   29d14:	sbcs	r1, r7, #0
   29d18:	movcc	r1, #34	; 0x22
   29d1c:	movcs	r1, #75	; 0x4b
   29d20:	str	r1, [r0]
   29d24:	ldr	r6, [r0]
   29d28:	ldr	r4, [fp, #24]
   29d2c:	ldr	r5, [fp, #20]
   29d30:	mov	r0, r8
   29d34:	bl	28378 <_obstack_memory_used@@Base+0x1ff4>
   29d38:	subs	r1, r6, #22
   29d3c:	movw	r2, #54539	; 0xd50b
   29d40:	str	r0, [sp]
   29d44:	mov	r3, r5
   29d48:	movne	r1, r6
   29d4c:	cmp	r4, #0
   29d50:	movt	r2, #2
   29d54:	movweq	r4, #1
   29d58:	mov	r0, r4
   29d5c:	bl	11db0 <error@plt>
   29d60:	cmp	r0, #1
   29d64:	beq	29d7c <_obstack_memory_used@@Base+0x39f8>
   29d68:	cmp	r0, #3
   29d6c:	bne	29d88 <_obstack_memory_used@@Base+0x3a04>
   29d70:	bl	11ed0 <__errno_location@plt>
   29d74:	mov	r1, #0
   29d78:	b	29d20 <_obstack_memory_used@@Base+0x399c>
   29d7c:	bl	11ed0 <__errno_location@plt>
   29d80:	mov	r1, #75	; 0x4b
   29d84:	b	29d20 <_obstack_memory_used@@Base+0x399c>
   29d88:	bl	11ed0 <__errno_location@plt>
   29d8c:	b	29d24 <_obstack_memory_used@@Base+0x39a0>
   29d90:	mov	r1, #10
   29d94:	b	29c9c <_obstack_memory_used@@Base+0x3918>
   29d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d9c:	add	fp, sp, #28
   29da0:	sub	sp, sp, #108	; 0x6c
   29da4:	mov	r5, #100	; 0x64
   29da8:	mov	r9, #0
   29dac:	add	r7, sp, #8
   29db0:	str	r5, [sp, #4]
   29db4:	bl	11ed0 <__errno_location@plt>
   29db8:	mov	r4, r0
   29dbc:	mov	sl, #1
   29dc0:	add	r8, sp, #4
   29dc4:	mov	r6, #0
   29dc8:	b	29df0 <_obstack_memory_used@@Base+0x3a6c>
   29dcc:	mov	r0, #0
   29dd0:	mov	r1, r8
   29dd4:	mov	r2, #1
   29dd8:	mvn	r3, #0
   29ddc:	str	sl, [sp]
   29de0:	bl	29928 <_obstack_memory_used@@Base+0x35a4>
   29de4:	ldr	r5, [sp, #4]
   29de8:	mov	r6, r0
   29dec:	mov	r7, r0
   29df0:	sub	r5, r5, #1
   29df4:	mov	r0, r7
   29df8:	mov	r1, r5
   29dfc:	strb	r9, [r7, r5]
   29e00:	str	r9, [r4]
   29e04:	bl	11dbc <gethostname@plt>
   29e08:	cmp	r0, #0
   29e0c:	bne	29e28 <_obstack_memory_used@@Base+0x3aa4>
   29e10:	mov	r0, r7
   29e14:	bl	11eac <strlen@plt>
   29e18:	add	r1, r0, #1
   29e1c:	cmp	r1, r5
   29e20:	blt	29ee8 <_obstack_memory_used@@Base+0x3b64>
   29e24:	str	r9, [r4]
   29e28:	mov	r0, r6
   29e2c:	bl	21218 <__assert_fail@plt+0xf18c>
   29e30:	ldr	r0, [r4]
   29e34:	cmp	r0, #36	; 0x24
   29e38:	bhi	29ed8 <_obstack_memory_used@@Base+0x3b54>
   29e3c:	add	r1, pc, #0
   29e40:	ldr	pc, [r1, r0, lsl #2]
   29e44:	andeq	r9, r2, ip, asr #27
   29e48:	ldrdeq	r9, [r2], -r8
   29e4c:	ldrdeq	r9, [r2], -r8
   29e50:	ldrdeq	r9, [r2], -r8
   29e54:	ldrdeq	r9, [r2], -r8
   29e58:	ldrdeq	r9, [r2], -r8
   29e5c:	ldrdeq	r9, [r2], -r8
   29e60:	ldrdeq	r9, [r2], -r8
   29e64:	ldrdeq	r9, [r2], -r8
   29e68:	ldrdeq	r9, [r2], -r8
   29e6c:	ldrdeq	r9, [r2], -r8
   29e70:	ldrdeq	r9, [r2], -r8
   29e74:	andeq	r9, r2, ip, asr #27
   29e78:	ldrdeq	r9, [r2], -r8
   29e7c:	ldrdeq	r9, [r2], -r8
   29e80:	ldrdeq	r9, [r2], -r8
   29e84:	ldrdeq	r9, [r2], -r8
   29e88:	ldrdeq	r9, [r2], -r8
   29e8c:	ldrdeq	r9, [r2], -r8
   29e90:	ldrdeq	r9, [r2], -r8
   29e94:	ldrdeq	r9, [r2], -r8
   29e98:	ldrdeq	r9, [r2], -r8
   29e9c:	andeq	r9, r2, ip, asr #27
   29ea0:	ldrdeq	r9, [r2], -r8
   29ea4:	ldrdeq	r9, [r2], -r8
   29ea8:	ldrdeq	r9, [r2], -r8
   29eac:	ldrdeq	r9, [r2], -r8
   29eb0:	ldrdeq	r9, [r2], -r8
   29eb4:	ldrdeq	r9, [r2], -r8
   29eb8:	ldrdeq	r9, [r2], -r8
   29ebc:	ldrdeq	r9, [r2], -r8
   29ec0:	ldrdeq	r9, [r2], -r8
   29ec4:	ldrdeq	r9, [r2], -r8
   29ec8:	ldrdeq	r9, [r2], -r8
   29ecc:	ldrdeq	r9, [r2], -r8
   29ed0:	ldrdeq	r9, [r2], -r8
   29ed4:	andeq	r9, r2, ip, asr #27
   29ed8:	mov	r6, #0
   29edc:	mov	r0, r6
   29ee0:	sub	sp, fp, #28
   29ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ee8:	cmp	r6, #0
   29eec:	bne	29edc <_obstack_memory_used@@Base+0x3b58>
   29ef0:	mov	r0, r7
   29ef4:	bl	29b94 <_obstack_memory_used@@Base+0x3810>
   29ef8:	mov	r6, r0
   29efc:	mov	r0, r6
   29f00:	sub	sp, fp, #28
   29f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f08:	push	{fp, lr}
   29f0c:	mov	fp, sp
   29f10:	sub	sp, sp, #8
   29f14:	movw	ip, #684	; 0x2ac
   29f18:	movt	ip, #4
   29f1c:	ldr	ip, [ip]
   29f20:	str	ip, [sp, #4]
   29f24:	ldr	ip, [fp, #8]
   29f28:	str	ip, [sp]
   29f2c:	bl	29f34 <_obstack_memory_used@@Base+0x3bb0>
   29f30:	bl	12038 <abort@plt>
   29f34:	push	{r4, r5, r6, r7, fp, lr}
   29f38:	add	fp, sp, #16
   29f3c:	sub	sp, sp, #16
   29f40:	sub	r0, r0, #1
   29f44:	cmp	r0, #4
   29f48:	bcs	29fc8 <_obstack_memory_used@@Base+0x3c44>
   29f4c:	mov	r5, r1
   29f50:	movw	r1, #64256	; 0xfb00
   29f54:	ldr	r4, [fp, #12]
   29f58:	ldr	r6, [fp, #8]
   29f5c:	movt	r1, #2
   29f60:	cmn	r5, #1
   29f64:	ldr	r1, [r1, r0, lsl #2]
   29f68:	ble	29f7c <_obstack_memory_used@@Base+0x3bf8>
   29f6c:	ldr	r7, [r3, r5, lsl #4]
   29f70:	movw	r5, #64160	; 0xfaa0
   29f74:	movt	r5, #2
   29f78:	b	29f98 <_obstack_memory_used@@Base+0x3c14>
   29f7c:	mov	r0, #0
   29f80:	add	r7, sp, #14
   29f84:	strb	r0, [sp, #15]
   29f88:	movw	r0, #64160	; 0xfaa0
   29f8c:	strb	r2, [sp, #14]
   29f90:	movt	r0, #2
   29f94:	sub	r5, r0, r5
   29f98:	mov	r0, #0
   29f9c:	mov	r2, #5
   29fa0:	bl	11cb4 <dcgettext@plt>
   29fa4:	mov	r2, r0
   29fa8:	mov	r0, r4
   29fac:	mov	r1, #0
   29fb0:	mov	r3, r5
   29fb4:	str	r7, [sp]
   29fb8:	str	r6, [sp, #4]
   29fbc:	bl	11db0 <error@plt>
   29fc0:	sub	sp, fp, #16
   29fc4:	pop	{r4, r5, r6, r7, fp, pc}
   29fc8:	bl	12038 <abort@plt>
   29fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fd0:	add	fp, sp, #28
   29fd4:	sub	sp, sp, #44	; 0x2c
   29fd8:	cmp	r2, #37	; 0x25
   29fdc:	bcs	2ac60 <_obstack_memory_used@@Base+0x48dc>
   29fe0:	ldr	sl, [fp, #8]
   29fe4:	mov	r6, r2
   29fe8:	mov	r7, r1
   29fec:	mov	r4, r0
   29ff0:	str	r3, [sp, #36]	; 0x24
   29ff4:	bl	11ed0 <__errno_location@plt>
   29ff8:	mov	r5, r0
   29ffc:	mov	r0, #0
   2a000:	str	r0, [r5]
   2a004:	bl	11e70 <__ctype_b_loc@plt>
   2a008:	ldr	r1, [r0]
   2a00c:	mov	r2, r4
   2a010:	ldrb	r0, [r2], #1
   2a014:	add	r3, r1, r0, lsl #1
   2a018:	ldrb	r3, [r3, #1]
   2a01c:	tst	r3, #32
   2a020:	bne	2a010 <_obstack_memory_used@@Base+0x3c8c>
   2a024:	sub	r9, fp, #32
   2a028:	cmp	r7, #0
   2a02c:	mov	r8, #4
   2a030:	movne	r9, r7
   2a034:	cmp	r0, #45	; 0x2d
   2a038:	beq	2a3f8 <_obstack_memory_used@@Base+0x4074>
   2a03c:	mov	r0, r4
   2a040:	mov	r1, r9
   2a044:	mov	r2, r6
   2a048:	mov	r3, #0
   2a04c:	bl	11c6c <__strtoull_internal@plt>
   2a050:	mov	r7, r1
   2a054:	ldr	r1, [r9]
   2a058:	cmp	r1, r4
   2a05c:	beq	2a094 <_obstack_memory_used@@Base+0x3d10>
   2a060:	mov	r6, r0
   2a064:	ldr	r0, [r5]
   2a068:	cmp	r0, #0
   2a06c:	beq	2a3b0 <_obstack_memory_used@@Base+0x402c>
   2a070:	cmp	r0, #34	; 0x22
   2a074:	bne	2a3f8 <_obstack_memory_used@@Base+0x4074>
   2a078:	mov	r8, #1
   2a07c:	cmp	sl, #0
   2a080:	beq	2ac4c <_obstack_memory_used@@Base+0x48c8>
   2a084:	ldrb	r4, [r1]
   2a088:	cmp	r4, #0
   2a08c:	bne	2a0d8 <_obstack_memory_used@@Base+0x3d54>
   2a090:	b	2ac4c <_obstack_memory_used@@Base+0x48c8>
   2a094:	cmp	sl, #0
   2a098:	beq	2a3f8 <_obstack_memory_used@@Base+0x4074>
   2a09c:	mov	r5, r1
   2a0a0:	ldrb	r1, [r4]
   2a0a4:	cmp	r1, #0
   2a0a8:	beq	2a3f8 <_obstack_memory_used@@Base+0x4074>
   2a0ac:	mov	r0, sl
   2a0b0:	bl	11eb8 <strchr@plt>
   2a0b4:	cmp	r0, #0
   2a0b8:	beq	2a3f8 <_obstack_memory_used@@Base+0x4074>
   2a0bc:	mov	r1, r5
   2a0c0:	mov	r8, #0
   2a0c4:	mov	r6, #1
   2a0c8:	mov	r7, #0
   2a0cc:	ldrb	r4, [r1]
   2a0d0:	cmp	r4, #0
   2a0d4:	beq	2ac4c <_obstack_memory_used@@Base+0x48c8>
   2a0d8:	str	r1, [sp, #32]
   2a0dc:	mov	r0, sl
   2a0e0:	mov	r1, r4
   2a0e4:	bl	11eb8 <strchr@plt>
   2a0e8:	cmp	r0, #0
   2a0ec:	beq	2a3ec <_obstack_memory_used@@Base+0x4068>
   2a0f0:	sub	r0, r4, #69	; 0x45
   2a0f4:	mov	r1, #1
   2a0f8:	mov	r3, #0
   2a0fc:	mov	r5, #1024	; 0x400
   2a100:	cmp	r0, #47	; 0x2f
   2a104:	str	r1, [sp, #28]
   2a108:	bhi	2a20c <_obstack_memory_used@@Base+0x3e88>
   2a10c:	add	r1, pc, #0
   2a110:	ldr	pc, [r1, r0, lsl #2]
   2a114:	ldrdeq	sl, [r2], -r4
   2a118:	andeq	sl, r2, ip, lsl #4
   2a11c:	ldrdeq	sl, [r2], -r4
   2a120:	andeq	sl, r2, ip, lsl #4
   2a124:	andeq	sl, r2, ip, lsl #4
   2a128:	andeq	sl, r2, ip, lsl #4
   2a12c:	ldrdeq	sl, [r2], -r4
   2a130:	andeq	sl, r2, ip, lsl #4
   2a134:	ldrdeq	sl, [r2], -r4
   2a138:	andeq	sl, r2, ip, lsl #4
   2a13c:	andeq	sl, r2, ip, lsl #4
   2a140:	ldrdeq	sl, [r2], -r4
   2a144:	andeq	sl, r2, ip, lsl #4
   2a148:	andeq	sl, r2, ip, lsl #4
   2a14c:	andeq	sl, r2, ip, lsl #4
   2a150:	ldrdeq	sl, [r2], -r4
   2a154:	andeq	sl, r2, ip, lsl #4
   2a158:	andeq	sl, r2, ip, lsl #4
   2a15c:	andeq	sl, r2, ip, lsl #4
   2a160:	andeq	sl, r2, ip, lsl #4
   2a164:	ldrdeq	sl, [r2], -r4
   2a168:	ldrdeq	sl, [r2], -r4
   2a16c:	andeq	sl, r2, ip, lsl #4
   2a170:	andeq	sl, r2, ip, lsl #4
   2a174:	andeq	sl, r2, ip, lsl #4
   2a178:	andeq	sl, r2, ip, lsl #4
   2a17c:	andeq	sl, r2, ip, lsl #4
   2a180:	andeq	sl, r2, ip, lsl #4
   2a184:	andeq	sl, r2, ip, lsl #4
   2a188:	andeq	sl, r2, ip, lsl #4
   2a18c:	andeq	sl, r2, ip, lsl #4
   2a190:	andeq	sl, r2, ip, lsl #4
   2a194:	andeq	sl, r2, ip, lsl #4
   2a198:	andeq	sl, r2, ip, lsl #4
   2a19c:	ldrdeq	sl, [r2], -r4
   2a1a0:	andeq	sl, r2, ip, lsl #4
   2a1a4:	andeq	sl, r2, ip, lsl #4
   2a1a8:	andeq	sl, r2, ip, lsl #4
   2a1ac:	ldrdeq	sl, [r2], -r4
   2a1b0:	andeq	sl, r2, ip, lsl #4
   2a1b4:	ldrdeq	sl, [r2], -r4
   2a1b8:	andeq	sl, r2, ip, lsl #4
   2a1bc:	andeq	sl, r2, ip, lsl #4
   2a1c0:	andeq	sl, r2, ip, lsl #4
   2a1c4:	andeq	sl, r2, ip, lsl #4
   2a1c8:	andeq	sl, r2, ip, lsl #4
   2a1cc:	andeq	sl, r2, ip, lsl #4
   2a1d0:	ldrdeq	sl, [r2], -r4
   2a1d4:	mov	r0, sl
   2a1d8:	mov	r1, #48	; 0x30
   2a1dc:	bl	11eb8 <strchr@plt>
   2a1e0:	cmp	r0, #0
   2a1e4:	beq	2a208 <_obstack_memory_used@@Base+0x3e84>
   2a1e8:	ldr	r1, [sp, #32]
   2a1ec:	ldrb	r0, [r1, #1]
   2a1f0:	cmp	r0, #66	; 0x42
   2a1f4:	cmpne	r0, #68	; 0x44
   2a1f8:	bne	2a3c0 <_obstack_memory_used@@Base+0x403c>
   2a1fc:	mov	r5, #1000	; 0x3e8
   2a200:	mov	r0, #2
   2a204:	str	r0, [sp, #28]
   2a208:	mov	r3, #0
   2a20c:	sub	r0, r4, #66	; 0x42
   2a210:	cmp	r0, #53	; 0x35
   2a214:	bhi	2a3ec <_obstack_memory_used@@Base+0x4068>
   2a218:	add	r1, pc, #0
   2a21c:	ldr	pc, [r1, r0, lsl #2]
   2a220:	andeq	sl, r2, ip, asr r7
   2a224:	andeq	sl, r2, ip, ror #7
   2a228:	andeq	sl, r2, ip, ror #7
   2a22c:	andeq	sl, r2, r4, lsl #15
   2a230:	andeq	sl, r2, ip, ror #7
   2a234:	strdeq	sl, [r2], -r8
   2a238:	andeq	sl, r2, ip, ror #7
   2a23c:	andeq	sl, r2, ip, ror #7
   2a240:	andeq	sl, r2, ip, ror #7
   2a244:	andeq	sl, r2, r4, lsl #8
   2a248:	andeq	sl, r2, ip, ror #7
   2a24c:	andeq	sl, r2, ip, asr #8
   2a250:	andeq	sl, r2, ip, ror #7
   2a254:	andeq	sl, r2, ip, ror #7
   2a258:	ldrdeq	sl, [r2], -r8
   2a25c:	andeq	sl, r2, ip, ror #7
   2a260:	andeq	sl, r2, ip, ror #7
   2a264:	andeq	sl, r2, ip, ror #7
   2a268:	ldrdeq	sl, [r2], -r8
   2a26c:	andeq	sl, r2, ip, ror #7
   2a270:	andeq	sl, r2, ip, ror #7
   2a274:	andeq	sl, r2, ip, ror #7
   2a278:	andeq	sl, r2, ip, ror #7
   2a27c:	andeq	sl, r2, r0, lsl #20
   2a280:	andeq	sl, r2, r0, asr #11
   2a284:	andeq	sl, r2, ip, ror #7
   2a288:	andeq	sl, r2, ip, ror #7
   2a28c:	andeq	sl, r2, ip, ror #7
   2a290:	andeq	sl, r2, ip, ror #7
   2a294:	andeq	sl, r2, ip, ror #7
   2a298:	andeq	sl, r2, ip, ror #7
   2a29c:	andeq	sl, r2, ip, ror #7
   2a2a0:	ldrdeq	sl, [r2], -r4
   2a2a4:	andeq	sl, r2, ip, lsr #24
   2a2a8:	andeq	sl, r2, ip, ror #7
   2a2ac:	andeq	sl, r2, ip, ror #7
   2a2b0:	andeq	sl, r2, ip, ror #7
   2a2b4:	strdeq	sl, [r2], -r8
   2a2b8:	andeq	sl, r2, ip, ror #7
   2a2bc:	andeq	sl, r2, ip, ror #7
   2a2c0:	andeq	sl, r2, ip, ror #7
   2a2c4:	andeq	sl, r2, r4, lsl #8
   2a2c8:	andeq	sl, r2, ip, ror #7
   2a2cc:	andeq	sl, r2, ip, asr #8
   2a2d0:	andeq	sl, r2, ip, ror #7
   2a2d4:	andeq	sl, r2, ip, ror #7
   2a2d8:	andeq	sl, r2, ip, ror #7
   2a2dc:	andeq	sl, r2, ip, ror #7
   2a2e0:	andeq	sl, r2, ip, ror #7
   2a2e4:	andeq	sl, r2, ip, ror #7
   2a2e8:	ldrdeq	sl, [r2], -r8
   2a2ec:	andeq	sl, r2, ip, ror #7
   2a2f0:	andeq	sl, r2, ip, ror #7
   2a2f4:	andeq	sl, r2, r8, lsl #24
   2a2f8:	mvn	r0, #0
   2a2fc:	mvn	r1, #0
   2a300:	mov	r2, r5
   2a304:	mov	sl, r3
   2a308:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   2a30c:	subs	r3, r0, r6
   2a310:	mov	lr, #0
   2a314:	umull	r4, r2, r6, r5
   2a318:	str	r1, [sp, #20]
   2a31c:	sbcs	r3, r1, r7
   2a320:	mla	ip, r6, sl, r2
   2a324:	mov	r2, r1
   2a328:	movwcc	lr, #1
   2a32c:	mla	r7, r7, r5, ip
   2a330:	mov	r2, #0
   2a334:	cmp	lr, #0
   2a338:	mvnne	r4, #0
   2a33c:	mvnne	r7, #0
   2a340:	subs	r6, r0, r4
   2a344:	sbcs	r6, r1, r7
   2a348:	movwcc	r2, #1
   2a34c:	umull	r3, r6, r4, r5
   2a350:	cmp	r2, #0
   2a354:	str	r6, [sp, #16]
   2a358:	mvnne	r3, #0
   2a35c:	cmp	r2, #0
   2a360:	umull	r6, ip, r3, r5
   2a364:	mla	r1, r3, sl, ip
   2a368:	ldr	ip, [sp, #16]
   2a36c:	str	r1, [sp, #12]
   2a370:	mla	r4, r4, sl, ip
   2a374:	mla	r4, r7, r5, r4
   2a378:	ldr	r7, [sp, #12]
   2a37c:	mvnne	r4, #0
   2a380:	subs	r0, r0, r3
   2a384:	ldr	r0, [sp, #20]
   2a388:	mla	r7, r4, r5, r7
   2a38c:	sbcs	r0, r0, r4
   2a390:	mov	r0, #0
   2a394:	movwcc	r0, #1
   2a398:	cmp	r0, #0
   2a39c:	mov	r1, r0
   2a3a0:	orr	r0, lr, r2
   2a3a4:	mvnne	r7, #0
   2a3a8:	mvnne	r6, #0
   2a3ac:	b	2a9f8 <_obstack_memory_used@@Base+0x4674>
   2a3b0:	mov	r8, r0
   2a3b4:	cmp	sl, #0
   2a3b8:	bne	2a084 <_obstack_memory_used@@Base+0x3d00>
   2a3bc:	b	2ac4c <_obstack_memory_used@@Base+0x48c8>
   2a3c0:	cmp	r0, #105	; 0x69
   2a3c4:	mov	r3, #0
   2a3c8:	bne	2a20c <_obstack_memory_used@@Base+0x3e88>
   2a3cc:	ldrb	r0, [r1, #2]
   2a3d0:	mov	r1, #1
   2a3d4:	cmp	r0, #66	; 0x42
   2a3d8:	movweq	r1, #3
   2a3dc:	str	r1, [sp, #28]
   2a3e0:	sub	r0, r4, #66	; 0x42
   2a3e4:	cmp	r0, #53	; 0x35
   2a3e8:	bls	2a218 <_obstack_memory_used@@Base+0x3e94>
   2a3ec:	ldr	r0, [sp, #36]	; 0x24
   2a3f0:	orr	r8, r8, #2
   2a3f4:	strd	r6, [r0]
   2a3f8:	mov	r0, r8
   2a3fc:	sub	sp, fp, #28
   2a400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a404:	mvn	r0, #0
   2a408:	mvn	r1, #0
   2a40c:	mov	r2, r5
   2a410:	mov	r4, r3
   2a414:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   2a418:	subs	r0, r0, r6
   2a41c:	mov	r2, #0
   2a420:	sbcs	r0, r1, r7
   2a424:	movwcc	r2, #1
   2a428:	umull	r0, r1, r6, r5
   2a42c:	mla	r1, r6, r4, r1
   2a430:	cmp	r2, #0
   2a434:	mov	r3, r2
   2a438:	mla	r7, r7, r5, r1
   2a43c:	mvnne	r0, #0
   2a440:	mvnne	r7, #0
   2a444:	mov	r6, r0
   2a448:	b	2ac2c <_obstack_memory_used@@Base+0x48a8>
   2a44c:	mvn	r0, #0
   2a450:	mvn	r1, #0
   2a454:	mov	r2, r5
   2a458:	str	r3, [sp, #24]
   2a45c:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   2a460:	subs	r3, r0, r6
   2a464:	mov	ip, r0
   2a468:	umull	r4, r0, r6, r5
   2a46c:	mov	sl, #0
   2a470:	sbcs	r3, r1, r7
   2a474:	str	r0, [sp, #20]
   2a478:	ldr	r0, [sp, #24]
   2a47c:	mov	r3, #0
   2a480:	movwcc	r3, #1
   2a484:	cmp	r3, #0
   2a488:	mvnne	r4, #0
   2a48c:	cmp	r3, #0
   2a490:	umull	lr, r2, r4, r5
   2a494:	mla	r2, r4, r0, r2
   2a498:	str	r2, [sp, #16]
   2a49c:	ldr	r2, [sp, #20]
   2a4a0:	mla	r6, r6, r0, r2
   2a4a4:	ldr	r0, [sp, #16]
   2a4a8:	mla	r6, r7, r5, r6
   2a4ac:	mvnne	r6, #0
   2a4b0:	mla	r7, r6, r5, r0
   2a4b4:	subs	r0, ip, r4
   2a4b8:	sbcs	r0, r1, r6
   2a4bc:	movwcc	sl, #1
   2a4c0:	cmp	sl, #0
   2a4c4:	orr	r3, r3, sl
   2a4c8:	mvnne	lr, #0
   2a4cc:	mvnne	r7, #0
   2a4d0:	mov	r6, lr
   2a4d4:	b	2ac2c <_obstack_memory_used@@Base+0x48a8>
   2a4d8:	mvn	r0, #0
   2a4dc:	mvn	r1, #0
   2a4e0:	mov	r2, r5
   2a4e4:	mov	sl, r3
   2a4e8:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   2a4ec:	subs	r3, r0, r6
   2a4f0:	mov	ip, r1
   2a4f4:	umull	r2, lr, r6, r5
   2a4f8:	str	r0, [sp, #20]
   2a4fc:	sbcs	r3, r1, r7
   2a500:	mov	r1, #0
   2a504:	mla	r6, r6, sl, lr
   2a508:	mov	lr, #0
   2a50c:	str	ip, [sp, #16]
   2a510:	movwcc	r1, #1
   2a514:	mla	r7, r7, r5, r6
   2a518:	cmp	r1, #0
   2a51c:	mvnne	r2, #0
   2a520:	cmp	r1, #0
   2a524:	umull	r3, r4, r2, r5
   2a528:	mvnne	r7, #0
   2a52c:	mla	r4, r2, sl, r4
   2a530:	subs	r2, r0, r2
   2a534:	sbcs	r2, ip, r7
   2a538:	mla	r4, r7, r5, r4
   2a53c:	movwcc	lr, #1
   2a540:	mov	r2, #0
   2a544:	cmp	lr, #0
   2a548:	mvnne	r3, #0
   2a54c:	mvnne	r4, #0
   2a550:	subs	r7, r0, r3
   2a554:	mov	r0, r5
   2a558:	sbcs	r7, ip, r4
   2a55c:	movwcc	r2, #1
   2a560:	umull	r5, r7, r3, r5
   2a564:	cmp	r2, #0
   2a568:	mla	r3, r3, sl, r7
   2a56c:	mvnne	r5, #0
   2a570:	mla	r3, r4, r0, r3
   2a574:	cmp	r2, #0
   2a578:	umull	r6, ip, r5, r0
   2a57c:	mvnne	r3, #0
   2a580:	mla	ip, r5, sl, ip
   2a584:	mla	r7, r3, r0, ip
   2a588:	ldr	r0, [sp, #20]
   2a58c:	subs	r0, r0, r5
   2a590:	ldr	r0, [sp, #16]
   2a594:	sbcs	r0, r0, r3
   2a598:	mov	r0, #0
   2a59c:	movwcc	r0, #1
   2a5a0:	cmp	r0, #0
   2a5a4:	mov	r3, r0
   2a5a8:	orr	r0, r1, lr
   2a5ac:	orr	r0, r0, r2
   2a5b0:	mvnne	r7, #0
   2a5b4:	mvnne	r6, #0
   2a5b8:	orr	r3, r0, r3
   2a5bc:	b	2ac2c <_obstack_memory_used@@Base+0x48a8>
   2a5c0:	mvn	r0, #0
   2a5c4:	mvn	r1, #0
   2a5c8:	mov	r2, r5
   2a5cc:	mov	r4, r3
   2a5d0:	str	r3, [sp, #24]
   2a5d4:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   2a5d8:	umull	r3, r2, r6, r5
   2a5dc:	mla	r2, r6, r4, r2
   2a5e0:	subs	r6, r0, r6
   2a5e4:	sbcs	r6, r1, r7
   2a5e8:	mla	r2, r7, r5, r2
   2a5ec:	mov	r7, #0
   2a5f0:	mov	r6, #0
   2a5f4:	movwcc	r6, #1
   2a5f8:	cmp	r6, #0
   2a5fc:	str	r6, [sp, #20]
   2a600:	mvnne	r3, #0
   2a604:	mvnne	r2, #0
   2a608:	subs	r4, r0, r3
   2a60c:	umull	r6, ip, r3, r5
   2a610:	sbcs	r4, r1, r2
   2a614:	ldr	r4, [sp, #24]
   2a618:	movwcc	r7, #1
   2a61c:	cmp	r7, #0
   2a620:	mov	lr, r7
   2a624:	str	r7, [sp, #16]
   2a628:	mvnne	r6, #0
   2a62c:	cmp	lr, #0
   2a630:	mov	lr, #0
   2a634:	umull	sl, r7, r6, r5
   2a638:	mla	r3, r3, r4, ip
   2a63c:	mla	r7, r6, r4, r7
   2a640:	mov	r4, r0
   2a644:	mla	r2, r2, r5, r3
   2a648:	mvnne	r2, #0
   2a64c:	subs	r3, r0, r6
   2a650:	mov	r0, #0
   2a654:	mla	r7, r2, r5, r7
   2a658:	sbcs	r2, r1, r2
   2a65c:	mov	r3, r4
   2a660:	movwcc	r0, #1
   2a664:	str	r3, [sp, #4]
   2a668:	cmp	r0, #0
   2a66c:	str	r0, [sp, #12]
   2a670:	mov	r0, r1
   2a674:	mvnne	sl, #0
   2a678:	mvnne	r7, #0
   2a67c:	str	r0, [sp, #8]
   2a680:	subs	r2, r4, sl
   2a684:	ldr	r4, [sp, #24]
   2a688:	sbcs	r2, r1, r7
   2a68c:	movwcc	lr, #1
   2a690:	umull	r6, r2, sl, r5
   2a694:	cmp	lr, #0
   2a698:	mvnne	r6, #0
   2a69c:	mla	r2, sl, r4, r2
   2a6a0:	cmp	lr, #0
   2a6a4:	umull	r1, ip, r6, r5
   2a6a8:	mla	r2, r7, r5, r2
   2a6ac:	mla	ip, r6, r4, ip
   2a6b0:	mvnne	r2, #0
   2a6b4:	subs	r6, r3, r6
   2a6b8:	mla	r7, r2, r5, ip
   2a6bc:	sbcs	r2, r0, r2
   2a6c0:	mov	ip, #0
   2a6c4:	movwcc	ip, #1
   2a6c8:	mov	r2, #0
   2a6cc:	cmp	ip, #0
   2a6d0:	mvnne	r1, #0
   2a6d4:	mvnne	r7, #0
   2a6d8:	subs	r6, r3, r1
   2a6dc:	ldr	r3, [sp, #24]
   2a6e0:	sbcs	r6, r0, r7
   2a6e4:	umull	r0, sl, r1, r5
   2a6e8:	movwcc	r2, #1
   2a6ec:	cmp	r2, #0
   2a6f0:	mvnne	r0, #0
   2a6f4:	mla	r1, r1, r3, sl
   2a6f8:	cmp	r2, #0
   2a6fc:	umull	r6, r4, r0, r5
   2a700:	mla	r1, r7, r5, r1
   2a704:	mla	r4, r0, r3, r4
   2a708:	ldr	r3, [sp, #4]
   2a70c:	mvnne	r1, #0
   2a710:	mla	r7, r1, r5, r4
   2a714:	ldr	r5, [sp, #16]
   2a718:	subs	r0, r3, r0
   2a71c:	ldr	r0, [sp, #8]
   2a720:	sbcs	r0, r0, r1
   2a724:	mov	r0, #0
   2a728:	movwcc	r0, #1
   2a72c:	cmp	r0, #0
   2a730:	mov	r1, r0
   2a734:	ldr	r0, [sp, #20]
   2a738:	mvnne	r7, #0
   2a73c:	mvnne	r6, #0
   2a740:	orr	r0, r0, r5
   2a744:	ldr	r5, [sp, #12]
   2a748:	orr	r0, r0, r5
   2a74c:	orr	r0, r0, lr
   2a750:	orr	r0, r0, ip
   2a754:	orr	r0, r0, r2
   2a758:	b	2abc8 <_obstack_memory_used@@Base+0x4844>
   2a75c:	mov	r1, #0
   2a760:	lsl	r2, r7, #10
   2a764:	lsl	r0, r6, #10
   2a768:	lsr	r3, r7, #22
   2a76c:	cmp	r1, r7, lsr #22
   2a770:	orr	r2, r2, r6, lsr #22
   2a774:	mvnne	r0, #0
   2a778:	movwne	r3, #1
   2a77c:	cmp	r1, r7, lsr #22
   2a780:	b	2abf8 <_obstack_memory_used@@Base+0x4874>
   2a784:	mvn	r0, #0
   2a788:	mvn	r1, #0
   2a78c:	mov	r2, r5
   2a790:	mov	sl, r3
   2a794:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   2a798:	subs	r2, r0, r6
   2a79c:	mov	ip, r0
   2a7a0:	mov	r0, #0
   2a7a4:	sbcs	r2, r1, r7
   2a7a8:	movwcc	r0, #1
   2a7ac:	umull	r4, r2, r6, r5
   2a7b0:	cmp	r0, #0
   2a7b4:	mla	r2, r6, sl, r2
   2a7b8:	str	r0, [sp, #20]
   2a7bc:	mvnne	r4, #0
   2a7c0:	cmp	r0, #0
   2a7c4:	mla	r2, r7, r5, r2
   2a7c8:	mov	r0, #0
   2a7cc:	umull	lr, r3, r4, r5
   2a7d0:	mvnne	r2, #0
   2a7d4:	mla	r3, r4, sl, r3
   2a7d8:	mla	r6, r2, r5, r3
   2a7dc:	subs	r3, ip, r4
   2a7e0:	sbcs	r2, r1, r2
   2a7e4:	mov	r3, r1
   2a7e8:	movwcc	r0, #1
   2a7ec:	str	r3, [sp, #8]
   2a7f0:	cmp	r0, #0
   2a7f4:	str	r0, [sp, #16]
   2a7f8:	mov	r0, ip
   2a7fc:	mvnne	lr, #0
   2a800:	mvnne	r6, #0
   2a804:	str	r0, [sp, #12]
   2a808:	subs	r2, ip, lr
   2a80c:	umull	r7, r4, lr, r5
   2a810:	sbcs	r2, r1, r6
   2a814:	mla	r4, lr, sl, r4
   2a818:	mov	r2, #0
   2a81c:	mla	r6, r6, r5, r4
   2a820:	mov	r4, #0
   2a824:	movwcc	r2, #1
   2a828:	cmp	r2, #0
   2a82c:	mvnne	r7, #0
   2a830:	cmp	r2, #0
   2a834:	umull	r1, ip, r7, r5
   2a838:	mvnne	r6, #0
   2a83c:	mla	ip, r7, sl, ip
   2a840:	subs	r7, r0, r7
   2a844:	mla	lr, r6, r5, ip
   2a848:	sbcs	r7, r3, r6
   2a84c:	mov	ip, #0
   2a850:	movwcc	ip, #1
   2a854:	cmp	ip, #0
   2a858:	mvnne	r1, #0
   2a85c:	mvnne	lr, #0
   2a860:	subs	r7, r0, r1
   2a864:	sbcs	r7, r3, lr
   2a868:	movwcc	r4, #1
   2a86c:	umull	r0, r7, r1, r5
   2a870:	cmp	r4, #0
   2a874:	mla	r1, r1, sl, r7
   2a878:	mvnne	r0, #0
   2a87c:	mla	r1, lr, r5, r1
   2a880:	cmp	r4, #0
   2a884:	umull	r6, r3, r0, r5
   2a888:	mvnne	r1, #0
   2a88c:	mla	r3, r0, sl, r3
   2a890:	mla	r7, r1, r5, r3
   2a894:	ldr	r3, [sp, #12]
   2a898:	subs	r0, r3, r0
   2a89c:	ldr	r3, [sp, #16]
   2a8a0:	ldr	r0, [sp, #8]
   2a8a4:	sbcs	r0, r0, r1
   2a8a8:	mov	r0, #0
   2a8ac:	movwcc	r0, #1
   2a8b0:	cmp	r0, #0
   2a8b4:	mov	r1, r0
   2a8b8:	ldr	r0, [sp, #20]
   2a8bc:	mvnne	r7, #0
   2a8c0:	mvnne	r6, #0
   2a8c4:	orr	r0, r0, r3
   2a8c8:	orr	r0, r0, r2
   2a8cc:	orr	r0, r0, ip
   2a8d0:	orr	r0, r0, r4
   2a8d4:	b	2a9f8 <_obstack_memory_used@@Base+0x4674>
   2a8d8:	mvn	r0, #0
   2a8dc:	mvn	r1, #0
   2a8e0:	mov	r2, r5
   2a8e4:	mov	sl, r3
   2a8e8:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   2a8ec:	umull	r3, r2, r6, r5
   2a8f0:	mov	lr, r1
   2a8f4:	mov	r1, r0
   2a8f8:	mla	r2, r6, sl, r2
   2a8fc:	subs	r6, r0, r6
   2a900:	mov	r0, #0
   2a904:	sbcs	r6, lr, r7
   2a908:	mla	r2, r7, r5, r2
   2a90c:	movwcc	r0, #1
   2a910:	cmp	r0, #0
   2a914:	str	r0, [sp, #20]
   2a918:	mov	r0, r1
   2a91c:	mvnne	r3, #0
   2a920:	mvnne	r2, #0
   2a924:	str	r0, [sp, #16]
   2a928:	subs	r4, r1, r3
   2a92c:	umull	r7, ip, r3, r5
   2a930:	sbcs	r4, lr, r2
   2a934:	mla	r3, r3, sl, ip
   2a938:	mov	ip, #0
   2a93c:	mov	r4, #0
   2a940:	mla	r2, r2, r5, r3
   2a944:	movwcc	r4, #1
   2a948:	cmp	r4, #0
   2a94c:	mvnne	r7, #0
   2a950:	cmp	r4, #0
   2a954:	umull	r1, r6, r7, r5
   2a958:	mvnne	r2, #0
   2a95c:	mla	r6, r7, sl, r6
   2a960:	mla	r3, r2, r5, r6
   2a964:	subs	r6, r0, r7
   2a968:	sbcs	r2, lr, r2
   2a96c:	movwcc	ip, #1
   2a970:	mov	r2, #0
   2a974:	cmp	ip, #0
   2a978:	mvnne	r1, #0
   2a97c:	mvnne	r3, #0
   2a980:	subs	r6, r0, r1
   2a984:	sbcs	r6, lr, r3
   2a988:	movwcc	r2, #1
   2a98c:	umull	r0, r6, r1, r5
   2a990:	cmp	r2, #0
   2a994:	str	r6, [sp, #12]
   2a998:	mvnne	r0, #0
   2a99c:	cmp	r2, #0
   2a9a0:	umull	r6, r7, r0, r5
   2a9a4:	mla	r7, r0, sl, r7
   2a9a8:	str	r7, [sp, #8]
   2a9ac:	ldr	r7, [sp, #12]
   2a9b0:	mla	r1, r1, sl, r7
   2a9b4:	mla	r1, r3, r5, r1
   2a9b8:	ldr	r3, [sp, #8]
   2a9bc:	mvnne	r1, #0
   2a9c0:	mla	r7, r1, r5, r3
   2a9c4:	ldr	r3, [sp, #16]
   2a9c8:	subs	r0, r3, r0
   2a9cc:	sbcs	r0, lr, r1
   2a9d0:	mov	r0, #0
   2a9d4:	movwcc	r0, #1
   2a9d8:	cmp	r0, #0
   2a9dc:	mov	r1, r0
   2a9e0:	ldr	r0, [sp, #20]
   2a9e4:	mvnne	r7, #0
   2a9e8:	mvnne	r6, #0
   2a9ec:	orr	r0, r0, r4
   2a9f0:	orr	r0, r0, ip
   2a9f4:	orr	r0, r0, r2
   2a9f8:	orr	r3, r0, r1
   2a9fc:	b	2ac2c <_obstack_memory_used@@Base+0x48a8>
   2aa00:	mvn	r0, #0
   2aa04:	mvn	r1, #0
   2aa08:	mov	r2, r5
   2aa0c:	mov	sl, r3
   2aa10:	bl	2b4d0 <_obstack_memory_used@@Base+0x514c>
   2aa14:	mov	ip, r1
   2aa18:	subs	r1, r0, r6
   2aa1c:	umull	r3, lr, r6, r5
   2aa20:	mov	r2, r5
   2aa24:	sbcs	r1, ip, r7
   2aa28:	mla	r6, r6, sl, lr
   2aa2c:	str	ip, [sp, #4]
   2aa30:	mov	r1, #0
   2aa34:	mla	r7, r7, r2, r6
   2aa38:	movwcc	r1, #1
   2aa3c:	cmp	r1, #0
   2aa40:	str	r1, [sp, #20]
   2aa44:	mvnne	r3, #0
   2aa48:	cmp	r1, #0
   2aa4c:	mov	r1, r0
   2aa50:	umull	r4, r5, r3, r5
   2aa54:	mvnne	r7, #0
   2aa58:	mov	lr, r1
   2aa5c:	mla	r5, r3, sl, r5
   2aa60:	subs	r3, r0, r3
   2aa64:	sbcs	r0, ip, r7
   2aa68:	mla	r5, r7, r2, r5
   2aa6c:	mov	r0, #0
   2aa70:	movwcc	r0, #1
   2aa74:	cmp	r0, #0
   2aa78:	str	r0, [sp, #16]
   2aa7c:	mvnne	r4, #0
   2aa80:	mvnne	r5, #0
   2aa84:	subs	r0, r1, r4
   2aa88:	mov	r1, #0
   2aa8c:	sbcs	r0, ip, r5
   2aa90:	movwcc	r1, #1
   2aa94:	umull	r3, r0, r4, r2
   2aa98:	cmp	r1, #0
   2aa9c:	mla	r0, r4, sl, r0
   2aaa0:	mov	r4, lr
   2aaa4:	str	r1, [sp, #12]
   2aaa8:	mvnne	r3, #0
   2aaac:	mla	r0, r5, r2, r0
   2aab0:	cmp	r1, #0
   2aab4:	str	r4, [sp]
   2aab8:	umull	r7, r6, r3, r2
   2aabc:	mvnne	r0, #0
   2aac0:	mla	r6, r3, sl, r6
   2aac4:	subs	r3, lr, r3
   2aac8:	mla	r5, r0, r2, r6
   2aacc:	sbcs	r0, ip, r0
   2aad0:	mov	r3, #0
   2aad4:	mov	r0, #0
   2aad8:	movwcc	r0, #1
   2aadc:	cmp	r0, #0
   2aae0:	str	r0, [sp, #8]
   2aae4:	mvnne	r7, #0
   2aae8:	mvnne	r5, #0
   2aaec:	subs	r0, lr, r7
   2aaf0:	sbcs	r0, ip, r5
   2aaf4:	movwcc	r3, #1
   2aaf8:	umull	r6, r0, r7, r2
   2aafc:	cmp	r3, #0
   2ab00:	mla	r7, r7, sl, r0
   2ab04:	mov	r0, ip
   2ab08:	mvnne	r6, #0
   2ab0c:	mla	r7, r5, r2, r7
   2ab10:	cmp	r3, #0
   2ab14:	mov	r5, #0
   2ab18:	umull	r1, lr, r6, r2
   2ab1c:	mvnne	r7, #0
   2ab20:	mla	lr, r6, sl, lr
   2ab24:	subs	r6, r4, r6
   2ab28:	mla	lr, r7, r2, lr
   2ab2c:	sbcs	r7, ip, r7
   2ab30:	mov	ip, #0
   2ab34:	movwcc	ip, #1
   2ab38:	cmp	ip, #0
   2ab3c:	mvnne	r1, #0
   2ab40:	mvnne	lr, #0
   2ab44:	subs	r7, r4, r1
   2ab48:	sbcs	r7, r0, lr
   2ab4c:	movwcc	r5, #1
   2ab50:	umull	r0, r7, r1, r2
   2ab54:	cmp	r5, #0
   2ab58:	mla	r1, r1, sl, r7
   2ab5c:	mvnne	r0, #0
   2ab60:	mla	r1, lr, r2, r1
   2ab64:	cmp	r5, #0
   2ab68:	umull	r6, r4, r0, r2
   2ab6c:	mvnne	r1, #0
   2ab70:	mla	r4, r0, sl, r4
   2ab74:	mla	r7, r1, r2, r4
   2ab78:	ldr	r2, [sp]
   2ab7c:	subs	r0, r2, r0
   2ab80:	ldr	r2, [sp, #16]
   2ab84:	ldr	r0, [sp, #4]
   2ab88:	sbcs	r0, r0, r1
   2ab8c:	mov	r0, #0
   2ab90:	movwcc	r0, #1
   2ab94:	cmp	r0, #0
   2ab98:	mov	r1, r0
   2ab9c:	ldr	r0, [sp, #20]
   2aba0:	mvnne	r7, #0
   2aba4:	mvnne	r6, #0
   2aba8:	orr	r0, r0, r2
   2abac:	ldr	r2, [sp, #12]
   2abb0:	orr	r0, r0, r2
   2abb4:	ldr	r2, [sp, #8]
   2abb8:	orr	r0, r0, r2
   2abbc:	orr	r0, r0, r3
   2abc0:	orr	r0, r0, ip
   2abc4:	orr	r0, r0, r5
   2abc8:	orr	r0, r0, r1
   2abcc:	and	r3, r0, #1
   2abd0:	b	2ac2c <_obstack_memory_used@@Base+0x48a8>
   2abd4:	mov	r1, #0
   2abd8:	lsl	r2, r7, #9
   2abdc:	lsl	r0, r6, #9
   2abe0:	lsr	r3, r7, #23
   2abe4:	cmp	r1, r7, lsr #23
   2abe8:	orr	r2, r2, r6, lsr #23
   2abec:	mvnne	r0, #0
   2abf0:	movwne	r3, #1
   2abf4:	cmp	r1, r7, lsr #23
   2abf8:	mvnne	r2, #0
   2abfc:	mov	r6, r0
   2ac00:	mov	r7, r2
   2ac04:	b	2ac2c <_obstack_memory_used@@Base+0x48a8>
   2ac08:	lsl	r1, r7, #1
   2ac0c:	lsl	r0, r6, #1
   2ac10:	cmp	r7, #0
   2ac14:	lsr	r3, r7, #31
   2ac18:	orr	r1, r1, r6, lsr #31
   2ac1c:	mvnlt	r0, #0
   2ac20:	mvnlt	r1, #0
   2ac24:	mov	r6, r0
   2ac28:	mov	r7, r1
   2ac2c:	ldr	r1, [sp, #32]
   2ac30:	ldr	r2, [sp, #28]
   2ac34:	orr	r8, r3, r8
   2ac38:	add	r0, r1, r2
   2ac3c:	str	r0, [r9]
   2ac40:	ldrb	r0, [r1, r2]
   2ac44:	cmp	r0, #0
   2ac48:	orrne	r8, r8, #2
   2ac4c:	ldr	r0, [sp, #36]	; 0x24
   2ac50:	strd	r6, [r0]
   2ac54:	mov	r0, r8
   2ac58:	sub	sp, fp, #28
   2ac5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac60:	movw	r0, #64272	; 0xfb10
   2ac64:	movw	r1, #64310	; 0xfb36
   2ac68:	movw	r3, #64326	; 0xfb46
   2ac6c:	mov	r2, #85	; 0x55
   2ac70:	movt	r0, #2
   2ac74:	movt	r1, #2
   2ac78:	movt	r3, #2
   2ac7c:	bl	1208c <__assert_fail@plt>
   2ac80:	clz	r2, r1
   2ac84:	clz	r3, r0
   2ac88:	lsr	r2, r2, #5
   2ac8c:	lsr	r3, r3, #5
   2ac90:	orrs	r2, r3, r2
   2ac94:	movwne	r1, #1
   2ac98:	movwne	r0, #1
   2ac9c:	cmp	r1, #0
   2aca0:	beq	2acd0 <_obstack_memory_used@@Base+0x494c>
   2aca4:	mvn	r2, #-2147483648	; 0x80000000
   2aca8:	udiv	r2, r2, r1
   2acac:	cmp	r2, r0
   2acb0:	bcs	2acd0 <_obstack_memory_used@@Base+0x494c>
   2acb4:	push	{fp, lr}
   2acb8:	mov	fp, sp
   2acbc:	bl	11ed0 <__errno_location@plt>
   2acc0:	mov	r1, #12
   2acc4:	str	r1, [r0]
   2acc8:	mov	r0, #0
   2accc:	pop	{fp, pc}
   2acd0:	b	11b88 <calloc@plt>
   2acd4:	cmp	r0, #0
   2acd8:	movweq	r0, #1
   2acdc:	cmn	r0, #1
   2ace0:	ble	2ace8 <_obstack_memory_used@@Base+0x4964>
   2ace4:	b	11e04 <malloc@plt>
   2ace8:	push	{fp, lr}
   2acec:	mov	fp, sp
   2acf0:	bl	11ed0 <__errno_location@plt>
   2acf4:	mov	r1, #12
   2acf8:	str	r1, [r0]
   2acfc:	mov	r0, #0
   2ad00:	pop	{fp, pc}
   2ad04:	push	{fp, lr}
   2ad08:	mov	fp, sp
   2ad0c:	cmp	r0, #0
   2ad10:	beq	2ad2c <_obstack_memory_used@@Base+0x49a8>
   2ad14:	cmp	r1, #0
   2ad18:	beq	2ad38 <_obstack_memory_used@@Base+0x49b4>
   2ad1c:	cmn	r1, #1
   2ad20:	ble	2ad44 <_obstack_memory_used@@Base+0x49c0>
   2ad24:	pop	{fp, lr}
   2ad28:	b	11cc0 <realloc@plt>
   2ad2c:	mov	r0, r1
   2ad30:	pop	{fp, lr}
   2ad34:	b	2acd4 <_obstack_memory_used@@Base+0x4950>
   2ad38:	bl	21218 <__assert_fail@plt+0xf18c>
   2ad3c:	mov	r0, #0
   2ad40:	pop	{fp, pc}
   2ad44:	bl	11ed0 <__errno_location@plt>
   2ad48:	mov	r1, #12
   2ad4c:	str	r1, [r0]
   2ad50:	mov	r0, #0
   2ad54:	pop	{fp, pc}
   2ad58:	push	{r4, r5, r6, sl, fp, lr}
   2ad5c:	add	fp, sp, #16
   2ad60:	mov	r4, r0
   2ad64:	bl	11d8c <__fpending@plt>
   2ad68:	ldr	r6, [r4]
   2ad6c:	mov	r5, r0
   2ad70:	mov	r0, r4
   2ad74:	bl	2addc <_obstack_memory_used@@Base+0x4a58>
   2ad78:	tst	r6, #32
   2ad7c:	bne	2adb4 <_obstack_memory_used@@Base+0x4a30>
   2ad80:	cmp	r0, #0
   2ad84:	mov	r4, r0
   2ad88:	mvnne	r4, #0
   2ad8c:	cmp	r5, #0
   2ad90:	bne	2adc0 <_obstack_memory_used@@Base+0x4a3c>
   2ad94:	cmp	r0, #0
   2ad98:	beq	2adc0 <_obstack_memory_used@@Base+0x4a3c>
   2ad9c:	bl	11ed0 <__errno_location@plt>
   2ada0:	ldr	r0, [r0]
   2ada4:	subs	r4, r0, #9
   2ada8:	mvnne	r4, #0
   2adac:	mov	r0, r4
   2adb0:	pop	{r4, r5, r6, sl, fp, pc}
   2adb4:	mvn	r4, #0
   2adb8:	cmp	r0, #0
   2adbc:	beq	2adc8 <_obstack_memory_used@@Base+0x4a44>
   2adc0:	mov	r0, r4
   2adc4:	pop	{r4, r5, r6, sl, fp, pc}
   2adc8:	bl	11ed0 <__errno_location@plt>
   2adcc:	mov	r1, #0
   2add0:	str	r1, [r0]
   2add4:	mov	r0, r4
   2add8:	pop	{r4, r5, r6, sl, fp, pc}
   2addc:	push	{r4, r5, r6, sl, fp, lr}
   2ade0:	add	fp, sp, #16
   2ade4:	sub	sp, sp, #8
   2ade8:	mov	r4, r0
   2adec:	bl	11f18 <fileno@plt>
   2adf0:	cmn	r0, #1
   2adf4:	ble	2ae68 <_obstack_memory_used@@Base+0x4ae4>
   2adf8:	mov	r0, r4
   2adfc:	bl	11e34 <__freading@plt>
   2ae00:	cmp	r0, #0
   2ae04:	beq	2ae30 <_obstack_memory_used@@Base+0x4aac>
   2ae08:	mov	r0, r4
   2ae0c:	bl	11f18 <fileno@plt>
   2ae10:	mov	r1, #1
   2ae14:	mov	r2, #0
   2ae18:	mov	r3, #0
   2ae1c:	str	r1, [sp]
   2ae20:	bl	11d68 <lseek64@plt>
   2ae24:	and	r0, r0, r1
   2ae28:	cmn	r0, #1
   2ae2c:	beq	2ae68 <_obstack_memory_used@@Base+0x4ae4>
   2ae30:	mov	r0, r4
   2ae34:	bl	2ae78 <_obstack_memory_used@@Base+0x4af4>
   2ae38:	cmp	r0, #0
   2ae3c:	beq	2ae68 <_obstack_memory_used@@Base+0x4ae4>
   2ae40:	bl	11ed0 <__errno_location@plt>
   2ae44:	ldr	r6, [r0]
   2ae48:	mov	r5, r0
   2ae4c:	mov	r0, r4
   2ae50:	bl	11f30 <fclose@plt>
   2ae54:	cmp	r6, #0
   2ae58:	strne	r6, [r5]
   2ae5c:	mvnne	r0, #0
   2ae60:	sub	sp, fp, #16
   2ae64:	pop	{r4, r5, r6, sl, fp, pc}
   2ae68:	mov	r0, r4
   2ae6c:	sub	sp, fp, #16
   2ae70:	pop	{r4, r5, r6, sl, fp, lr}
   2ae74:	b	11f30 <fclose@plt>
   2ae78:	push	{r4, sl, fp, lr}
   2ae7c:	add	fp, sp, #8
   2ae80:	sub	sp, sp, #8
   2ae84:	mov	r4, r0
   2ae88:	cmp	r0, #0
   2ae8c:	beq	2aea8 <_obstack_memory_used@@Base+0x4b24>
   2ae90:	mov	r0, r4
   2ae94:	bl	11e34 <__freading@plt>
   2ae98:	cmp	r0, #0
   2ae9c:	ldrbne	r0, [r4, #1]
   2aea0:	tstne	r0, #1
   2aea4:	bne	2aeb8 <_obstack_memory_used@@Base+0x4b34>
   2aea8:	mov	r0, r4
   2aeac:	sub	sp, fp, #8
   2aeb0:	pop	{r4, sl, fp, lr}
   2aeb4:	b	11bf4 <fflush@plt>
   2aeb8:	mov	r0, #1
   2aebc:	mov	r2, #0
   2aec0:	mov	r3, #0
   2aec4:	str	r0, [sp]
   2aec8:	mov	r0, r4
   2aecc:	bl	2aee0 <_obstack_memory_used@@Base+0x4b5c>
   2aed0:	mov	r0, r4
   2aed4:	sub	sp, fp, #8
   2aed8:	pop	{r4, sl, fp, lr}
   2aedc:	b	11bf4 <fflush@plt>
   2aee0:	push	{r4, r5, r6, r7, fp, lr}
   2aee4:	add	fp, sp, #16
   2aee8:	sub	sp, sp, #8
   2aeec:	mov	r4, r0
   2aef0:	ldr	r0, [r0, #4]
   2aef4:	mov	r5, r3
   2aef8:	mov	r6, r2
   2aefc:	ldr	r1, [r4, #8]
   2af00:	cmp	r1, r0
   2af04:	bne	2af20 <_obstack_memory_used@@Base+0x4b9c>
   2af08:	ldrd	r0, [r4, #16]
   2af0c:	cmp	r1, r0
   2af10:	bne	2af20 <_obstack_memory_used@@Base+0x4b9c>
   2af14:	ldr	r0, [r4, #36]	; 0x24
   2af18:	cmp	r0, #0
   2af1c:	beq	2af38 <_obstack_memory_used@@Base+0x4bb4>
   2af20:	mov	r0, r4
   2af24:	mov	r2, r6
   2af28:	mov	r3, r5
   2af2c:	sub	sp, fp, #16
   2af30:	pop	{r4, r5, r6, r7, fp, lr}
   2af34:	b	11f3c <fseeko64@plt>
   2af38:	ldr	r7, [fp, #8]
   2af3c:	mov	r0, r4
   2af40:	bl	11f18 <fileno@plt>
   2af44:	mov	r2, r6
   2af48:	mov	r3, r5
   2af4c:	str	r7, [sp]
   2af50:	bl	11d68 <lseek64@plt>
   2af54:	and	r2, r0, r1
   2af58:	cmn	r2, #1
   2af5c:	mvneq	r0, #0
   2af60:	subeq	sp, fp, #16
   2af64:	popeq	{r4, r5, r6, r7, fp, pc}
   2af68:	strd	r0, [r4, #80]	; 0x50
   2af6c:	ldr	r0, [r4]
   2af70:	bic	r0, r0, #16
   2af74:	str	r0, [r4]
   2af78:	mov	r0, #0
   2af7c:	sub	sp, fp, #16
   2af80:	pop	{r4, r5, r6, r7, fp, pc}
   2af84:	ldrb	r2, [r0]
   2af88:	cmp	r2, #0
   2af8c:	beq	2afb8 <_obstack_memory_used@@Base+0x4c34>
   2af90:	add	r3, r0, #1
   2af94:	mov	r0, #0
   2af98:	ror	r0, r0, #23
   2af9c:	uxtab	r0, r0, r2
   2afa0:	ldrb	r2, [r3], #1
   2afa4:	cmp	r2, #0
   2afa8:	bne	2af98 <_obstack_memory_used@@Base+0x4c14>
   2afac:	udiv	r2, r0, r1
   2afb0:	mls	r0, r2, r1, r0
   2afb4:	bx	lr
   2afb8:	mov	r0, #0
   2afbc:	udiv	r2, r0, r1
   2afc0:	mls	r0, r2, r1, r0
   2afc4:	bx	lr
   2afc8:	push	{fp, lr}
   2afcc:	mov	fp, sp
   2afd0:	mov	r0, #14
   2afd4:	bl	11f9c <nl_langinfo@plt>
   2afd8:	movw	r1, #56125	; 0xdb3d
   2afdc:	cmp	r0, #0
   2afe0:	movt	r1, #2
   2afe4:	movne	r1, r0
   2afe8:	movw	r0, #64405	; 0xfb95
   2afec:	ldrb	r2, [r1]
   2aff0:	movt	r0, #2
   2aff4:	cmp	r2, #0
   2aff8:	movne	r0, r1
   2affc:	pop	{fp, pc}
   2b000:	cmp	r2, #0
   2b004:	beq	2b034 <_obstack_memory_used@@Base+0x4cb0>
   2b008:	mvn	r3, #0
   2b00c:	udiv	r3, r3, r2
   2b010:	cmp	r3, r1
   2b014:	bcs	2b034 <_obstack_memory_used@@Base+0x4cb0>
   2b018:	push	{fp, lr}
   2b01c:	mov	fp, sp
   2b020:	bl	11ed0 <__errno_location@plt>
   2b024:	mov	r1, #12
   2b028:	str	r1, [r0]
   2b02c:	mov	r0, #0
   2b030:	pop	{fp, pc}
   2b034:	mul	r1, r2, r1
   2b038:	b	2ad04 <_obstack_memory_used@@Base+0x4980>
   2b03c:	eor	r1, r1, #-2147483648	; 0x80000000
   2b040:	b	2b048 <_obstack_memory_used@@Base+0x4cc4>
   2b044:	eor	r3, r3, #-2147483648	; 0x80000000
   2b048:	push	{r4, r5, lr}
   2b04c:	lsl	r4, r1, #1
   2b050:	lsl	r5, r3, #1
   2b054:	teq	r4, r5
   2b058:	teqeq	r0, r2
   2b05c:	orrsne	ip, r4, r0
   2b060:	orrsne	ip, r5, r2
   2b064:	mvnsne	ip, r4, asr #21
   2b068:	mvnsne	ip, r5, asr #21
   2b06c:	beq	2b258 <_obstack_memory_used@@Base+0x4ed4>
   2b070:	lsr	r4, r4, #21
   2b074:	rsbs	r5, r4, r5, lsr #21
   2b078:	rsblt	r5, r5, #0
   2b07c:	ble	2b09c <_obstack_memory_used@@Base+0x4d18>
   2b080:	add	r4, r4, r5
   2b084:	eor	r2, r0, r2
   2b088:	eor	r3, r1, r3
   2b08c:	eor	r0, r2, r0
   2b090:	eor	r1, r3, r1
   2b094:	eor	r2, r0, r2
   2b098:	eor	r3, r1, r3
   2b09c:	cmp	r5, #54	; 0x36
   2b0a0:	pophi	{r4, r5, pc}
   2b0a4:	tst	r1, #-2147483648	; 0x80000000
   2b0a8:	lsl	r1, r1, #12
   2b0ac:	mov	ip, #1048576	; 0x100000
   2b0b0:	orr	r1, ip, r1, lsr #12
   2b0b4:	beq	2b0c0 <_obstack_memory_used@@Base+0x4d3c>
   2b0b8:	rsbs	r0, r0, #0
   2b0bc:	rsc	r1, r1, #0
   2b0c0:	tst	r3, #-2147483648	; 0x80000000
   2b0c4:	lsl	r3, r3, #12
   2b0c8:	orr	r3, ip, r3, lsr #12
   2b0cc:	beq	2b0d8 <_obstack_memory_used@@Base+0x4d54>
   2b0d0:	rsbs	r2, r2, #0
   2b0d4:	rsc	r3, r3, #0
   2b0d8:	teq	r4, r5
   2b0dc:	beq	2b240 <_obstack_memory_used@@Base+0x4ebc>
   2b0e0:	sub	r4, r4, #1
   2b0e4:	rsbs	lr, r5, #32
   2b0e8:	blt	2b104 <_obstack_memory_used@@Base+0x4d80>
   2b0ec:	lsl	ip, r2, lr
   2b0f0:	adds	r0, r0, r2, lsr r5
   2b0f4:	adc	r1, r1, #0
   2b0f8:	adds	r0, r0, r3, lsl lr
   2b0fc:	adcs	r1, r1, r3, asr r5
   2b100:	b	2b120 <_obstack_memory_used@@Base+0x4d9c>
   2b104:	sub	r5, r5, #32
   2b108:	add	lr, lr, #32
   2b10c:	cmp	r2, #1
   2b110:	lsl	ip, r3, lr
   2b114:	orrcs	ip, ip, #2
   2b118:	adds	r0, r0, r3, asr r5
   2b11c:	adcs	r1, r1, r3, asr #31
   2b120:	and	r5, r1, #-2147483648	; 0x80000000
   2b124:	bpl	2b134 <_obstack_memory_used@@Base+0x4db0>
   2b128:	rsbs	ip, ip, #0
   2b12c:	rscs	r0, r0, #0
   2b130:	rsc	r1, r1, #0
   2b134:	cmp	r1, #1048576	; 0x100000
   2b138:	bcc	2b178 <_obstack_memory_used@@Base+0x4df4>
   2b13c:	cmp	r1, #2097152	; 0x200000
   2b140:	bcc	2b160 <_obstack_memory_used@@Base+0x4ddc>
   2b144:	lsrs	r1, r1, #1
   2b148:	rrxs	r0, r0
   2b14c:	rrx	ip, ip
   2b150:	add	r4, r4, #1
   2b154:	lsl	r2, r4, #21
   2b158:	cmn	r2, #4194304	; 0x400000
   2b15c:	bcs	2b2b8 <_obstack_memory_used@@Base+0x4f34>
   2b160:	cmp	ip, #-2147483648	; 0x80000000
   2b164:	lsrseq	ip, r0, #1
   2b168:	adcs	r0, r0, #0
   2b16c:	adc	r1, r1, r4, lsl #20
   2b170:	orr	r1, r1, r5
   2b174:	pop	{r4, r5, pc}
   2b178:	lsls	ip, ip, #1
   2b17c:	adcs	r0, r0, r0
   2b180:	adc	r1, r1, r1
   2b184:	tst	r1, #1048576	; 0x100000
   2b188:	sub	r4, r4, #1
   2b18c:	bne	2b160 <_obstack_memory_used@@Base+0x4ddc>
   2b190:	teq	r1, #0
   2b194:	moveq	r1, r0
   2b198:	moveq	r0, #0
   2b19c:	clz	r3, r1
   2b1a0:	addeq	r3, r3, #32
   2b1a4:	sub	r3, r3, #11
   2b1a8:	subs	r2, r3, #32
   2b1ac:	bge	2b1d0 <_obstack_memory_used@@Base+0x4e4c>
   2b1b0:	adds	r2, r2, #12
   2b1b4:	ble	2b1cc <_obstack_memory_used@@Base+0x4e48>
   2b1b8:	add	ip, r2, #20
   2b1bc:	rsb	r2, r2, #12
   2b1c0:	lsl	r0, r1, ip
   2b1c4:	lsr	r1, r1, r2
   2b1c8:	b	2b1e0 <_obstack_memory_used@@Base+0x4e5c>
   2b1cc:	add	r2, r2, #20
   2b1d0:	rsble	ip, r2, #32
   2b1d4:	lsl	r1, r1, r2
   2b1d8:	orrle	r1, r1, r0, lsr ip
   2b1dc:	lslle	r0, r0, r2
   2b1e0:	subs	r4, r4, r3
   2b1e4:	addge	r1, r1, r4, lsl #20
   2b1e8:	orrge	r1, r1, r5
   2b1ec:	popge	{r4, r5, pc}
   2b1f0:	mvn	r4, r4
   2b1f4:	subs	r4, r4, #31
   2b1f8:	bge	2b234 <_obstack_memory_used@@Base+0x4eb0>
   2b1fc:	adds	r4, r4, #12
   2b200:	bgt	2b21c <_obstack_memory_used@@Base+0x4e98>
   2b204:	add	r4, r4, #20
   2b208:	rsb	r2, r4, #32
   2b20c:	lsr	r0, r0, r4
   2b210:	orr	r0, r0, r1, lsl r2
   2b214:	orr	r1, r5, r1, lsr r4
   2b218:	pop	{r4, r5, pc}
   2b21c:	rsb	r4, r4, #12
   2b220:	rsb	r2, r4, #32
   2b224:	lsr	r0, r0, r2
   2b228:	orr	r0, r0, r1, lsl r4
   2b22c:	mov	r1, r5
   2b230:	pop	{r4, r5, pc}
   2b234:	lsr	r0, r1, r4
   2b238:	mov	r1, r5
   2b23c:	pop	{r4, r5, pc}
   2b240:	teq	r4, #0
   2b244:	eor	r3, r3, #1048576	; 0x100000
   2b248:	eoreq	r1, r1, #1048576	; 0x100000
   2b24c:	addeq	r4, r4, #1
   2b250:	subne	r5, r5, #1
   2b254:	b	2b0e0 <_obstack_memory_used@@Base+0x4d5c>
   2b258:	mvns	ip, r4, asr #21
   2b25c:	mvnsne	ip, r5, asr #21
   2b260:	beq	2b2c8 <_obstack_memory_used@@Base+0x4f44>
   2b264:	teq	r4, r5
   2b268:	teqeq	r0, r2
   2b26c:	beq	2b280 <_obstack_memory_used@@Base+0x4efc>
   2b270:	orrs	ip, r4, r0
   2b274:	moveq	r1, r3
   2b278:	moveq	r0, r2
   2b27c:	pop	{r4, r5, pc}
   2b280:	teq	r1, r3
   2b284:	movne	r1, #0
   2b288:	movne	r0, #0
   2b28c:	popne	{r4, r5, pc}
   2b290:	lsrs	ip, r4, #21
   2b294:	bne	2b2a8 <_obstack_memory_used@@Base+0x4f24>
   2b298:	lsls	r0, r0, #1
   2b29c:	adcs	r1, r1, r1
   2b2a0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2b2a4:	pop	{r4, r5, pc}
   2b2a8:	adds	r4, r4, #4194304	; 0x400000
   2b2ac:	addcc	r1, r1, #1048576	; 0x100000
   2b2b0:	popcc	{r4, r5, pc}
   2b2b4:	and	r5, r1, #-2147483648	; 0x80000000
   2b2b8:	orr	r1, r5, #2130706432	; 0x7f000000
   2b2bc:	orr	r1, r1, #15728640	; 0xf00000
   2b2c0:	mov	r0, #0
   2b2c4:	pop	{r4, r5, pc}
   2b2c8:	mvns	ip, r4, asr #21
   2b2cc:	movne	r1, r3
   2b2d0:	movne	r0, r2
   2b2d4:	mvnseq	ip, r5, asr #21
   2b2d8:	movne	r3, r1
   2b2dc:	movne	r2, r0
   2b2e0:	orrs	r4, r0, r1, lsl #12
   2b2e4:	orrseq	r5, r2, r3, lsl #12
   2b2e8:	teqeq	r1, r3
   2b2ec:	orrne	r1, r1, #524288	; 0x80000
   2b2f0:	pop	{r4, r5, pc}
   2b2f4:	teq	r0, #0
   2b2f8:	moveq	r1, #0
   2b2fc:	bxeq	lr
   2b300:	push	{r4, r5, lr}
   2b304:	mov	r4, #1024	; 0x400
   2b308:	add	r4, r4, #50	; 0x32
   2b30c:	mov	r5, #0
   2b310:	mov	r1, #0
   2b314:	b	2b190 <_obstack_memory_used@@Base+0x4e0c>
   2b318:	teq	r0, #0
   2b31c:	moveq	r1, #0
   2b320:	bxeq	lr
   2b324:	push	{r4, r5, lr}
   2b328:	mov	r4, #1024	; 0x400
   2b32c:	add	r4, r4, #50	; 0x32
   2b330:	ands	r5, r0, #-2147483648	; 0x80000000
   2b334:	rsbmi	r0, r0, #0
   2b338:	mov	r1, #0
   2b33c:	b	2b190 <_obstack_memory_used@@Base+0x4e0c>
   2b340:	lsls	r2, r0, #1
   2b344:	asr	r1, r2, #3
   2b348:	rrx	r1, r1
   2b34c:	lsl	r0, r2, #28
   2b350:	andsne	r3, r2, #-16777216	; 0xff000000
   2b354:	teqne	r3, #-16777216	; 0xff000000
   2b358:	eorne	r1, r1, #939524096	; 0x38000000
   2b35c:	bxne	lr
   2b360:	bics	r2, r2, #-16777216	; 0xff000000
   2b364:	bxeq	lr
   2b368:	teq	r3, #-16777216	; 0xff000000
   2b36c:	orreq	r1, r1, #524288	; 0x80000
   2b370:	bxeq	lr
   2b374:	push	{r4, r5, lr}
   2b378:	mov	r4, #896	; 0x380
   2b37c:	and	r5, r1, #-2147483648	; 0x80000000
   2b380:	bic	r1, r1, #-2147483648	; 0x80000000
   2b384:	b	2b190 <_obstack_memory_used@@Base+0x4e0c>
   2b388:	orrs	r2, r0, r1
   2b38c:	bxeq	lr
   2b390:	push	{r4, r5, lr}
   2b394:	mov	r5, #0
   2b398:	b	2b3b8 <_obstack_memory_used@@Base+0x5034>
   2b39c:	orrs	r2, r0, r1
   2b3a0:	bxeq	lr
   2b3a4:	push	{r4, r5, lr}
   2b3a8:	ands	r5, r1, #-2147483648	; 0x80000000
   2b3ac:	bpl	2b3b8 <_obstack_memory_used@@Base+0x5034>
   2b3b0:	rsbs	r0, r0, #0
   2b3b4:	rsc	r1, r1, #0
   2b3b8:	mov	r4, #1024	; 0x400
   2b3bc:	add	r4, r4, #50	; 0x32
   2b3c0:	lsrs	ip, r1, #22
   2b3c4:	beq	2b134 <_obstack_memory_used@@Base+0x4db0>
   2b3c8:	mov	r2, #3
   2b3cc:	lsrs	ip, ip, #3
   2b3d0:	addne	r2, r2, #3
   2b3d4:	lsrs	ip, ip, #3
   2b3d8:	addne	r2, r2, #3
   2b3dc:	add	r2, r2, ip, lsr #3
   2b3e0:	rsb	r3, r2, #32
   2b3e4:	lsl	ip, r0, r3
   2b3e8:	lsr	r0, r0, r2
   2b3ec:	orr	r0, r0, r1, lsl r3
   2b3f0:	lsr	r1, r1, r2
   2b3f4:	add	r4, r4, r2
   2b3f8:	b	2b134 <_obstack_memory_used@@Base+0x4db0>
   2b3fc:	cmp	r3, #0
   2b400:	cmpeq	r2, #0
   2b404:	bne	2b428 <_obstack_memory_used@@Base+0x50a4>
   2b408:	cmp	r1, #0
   2b40c:	movlt	r1, #-2147483648	; 0x80000000
   2b410:	movlt	r0, #0
   2b414:	blt	2b424 <_obstack_memory_used@@Base+0x50a0>
   2b418:	cmpeq	r0, #0
   2b41c:	mvnne	r1, #-2147483648	; 0x80000000
   2b420:	mvnne	r0, #0
   2b424:	b	2b50c <_obstack_memory_used@@Base+0x5188>
   2b428:	sub	sp, sp, #8
   2b42c:	push	{sp, lr}
   2b430:	cmp	r1, #0
   2b434:	blt	2b454 <_obstack_memory_used@@Base+0x50d0>
   2b438:	cmp	r3, #0
   2b43c:	blt	2b488 <_obstack_memory_used@@Base+0x5104>
   2b440:	bl	2b560 <_obstack_memory_used@@Base+0x51dc>
   2b444:	ldr	lr, [sp, #4]
   2b448:	add	sp, sp, #8
   2b44c:	pop	{r2, r3}
   2b450:	bx	lr
   2b454:	rsbs	r0, r0, #0
   2b458:	sbc	r1, r1, r1, lsl #1
   2b45c:	cmp	r3, #0
   2b460:	blt	2b4ac <_obstack_memory_used@@Base+0x5128>
   2b464:	bl	2b560 <_obstack_memory_used@@Base+0x51dc>
   2b468:	ldr	lr, [sp, #4]
   2b46c:	add	sp, sp, #8
   2b470:	pop	{r2, r3}
   2b474:	rsbs	r0, r0, #0
   2b478:	sbc	r1, r1, r1, lsl #1
   2b47c:	rsbs	r2, r2, #0
   2b480:	sbc	r3, r3, r3, lsl #1
   2b484:	bx	lr
   2b488:	rsbs	r2, r2, #0
   2b48c:	sbc	r3, r3, r3, lsl #1
   2b490:	bl	2b560 <_obstack_memory_used@@Base+0x51dc>
   2b494:	ldr	lr, [sp, #4]
   2b498:	add	sp, sp, #8
   2b49c:	pop	{r2, r3}
   2b4a0:	rsbs	r0, r0, #0
   2b4a4:	sbc	r1, r1, r1, lsl #1
   2b4a8:	bx	lr
   2b4ac:	rsbs	r2, r2, #0
   2b4b0:	sbc	r3, r3, r3, lsl #1
   2b4b4:	bl	2b560 <_obstack_memory_used@@Base+0x51dc>
   2b4b8:	ldr	lr, [sp, #4]
   2b4bc:	add	sp, sp, #8
   2b4c0:	pop	{r2, r3}
   2b4c4:	rsbs	r2, r2, #0
   2b4c8:	sbc	r3, r3, r3, lsl #1
   2b4cc:	bx	lr
   2b4d0:	cmp	r3, #0
   2b4d4:	cmpeq	r2, #0
   2b4d8:	bne	2b4f0 <_obstack_memory_used@@Base+0x516c>
   2b4dc:	cmp	r1, #0
   2b4e0:	cmpeq	r0, #0
   2b4e4:	mvnne	r1, #0
   2b4e8:	mvnne	r0, #0
   2b4ec:	b	2b50c <_obstack_memory_used@@Base+0x5188>
   2b4f0:	sub	sp, sp, #8
   2b4f4:	push	{sp, lr}
   2b4f8:	bl	2b560 <_obstack_memory_used@@Base+0x51dc>
   2b4fc:	ldr	lr, [sp, #4]
   2b500:	add	sp, sp, #8
   2b504:	pop	{r2, r3}
   2b508:	bx	lr
   2b50c:	push	{r1, lr}
   2b510:	mov	r0, #8
   2b514:	bl	11bac <raise@plt>
   2b518:	pop	{r1, pc}
   2b51c:	andeq	r0, r0, r0
   2b520:	vmov	d6, r0, r1
   2b524:	vldr	d7, [pc, #36]	; 2b550 <_obstack_memory_used@@Base+0x51cc>
   2b528:	vldr	d5, [pc, #40]	; 2b558 <_obstack_memory_used@@Base+0x51d4>
   2b52c:	vmul.f64	d7, d6, d7
   2b530:	vcvt.u32.f64	s14, d7
   2b534:	vcvt.f64.u32	d4, s14
   2b538:	vmov	r1, s14
   2b53c:	vmls.f64	d6, d4, d5
   2b540:	vcvt.u32.f64	s15, d6
   2b544:	vmov	r0, s15
   2b548:	bx	lr
   2b54c:	nop			; (mov r0, r0)
   2b550:	andeq	r0, r0, r0
   2b554:	ldclcc	0, cr0, [r0]
   2b558:	andeq	r0, r0, r0
   2b55c:	mvnsmi	r0, r0
   2b560:	cmp	r1, r3
   2b564:	cmpeq	r0, r2
   2b568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b56c:	mov	r4, r0
   2b570:	movcc	r0, #0
   2b574:	mov	r5, r1
   2b578:	ldr	lr, [sp, #36]	; 0x24
   2b57c:	movcc	r1, r0
   2b580:	bcc	2b67c <_obstack_memory_used@@Base+0x52f8>
   2b584:	cmp	r3, #0
   2b588:	clzeq	ip, r2
   2b58c:	clzne	ip, r3
   2b590:	addeq	ip, ip, #32
   2b594:	cmp	r5, #0
   2b598:	clzeq	r1, r4
   2b59c:	addeq	r1, r1, #32
   2b5a0:	clzne	r1, r5
   2b5a4:	sub	ip, ip, r1
   2b5a8:	sub	sl, ip, #32
   2b5ac:	lsl	r9, r3, ip
   2b5b0:	rsb	fp, ip, #32
   2b5b4:	orr	r9, r9, r2, lsl sl
   2b5b8:	orr	r9, r9, r2, lsr fp
   2b5bc:	lsl	r8, r2, ip
   2b5c0:	cmp	r5, r9
   2b5c4:	cmpeq	r4, r8
   2b5c8:	movcc	r0, #0
   2b5cc:	movcc	r1, r0
   2b5d0:	bcc	2b5ec <_obstack_memory_used@@Base+0x5268>
   2b5d4:	mov	r0, #1
   2b5d8:	subs	r4, r4, r8
   2b5dc:	lsl	r1, r0, sl
   2b5e0:	orr	r1, r1, r0, lsr fp
   2b5e4:	lsl	r0, r0, ip
   2b5e8:	sbc	r5, r5, r9
   2b5ec:	cmp	ip, #0
   2b5f0:	beq	2b67c <_obstack_memory_used@@Base+0x52f8>
   2b5f4:	lsr	r6, r8, #1
   2b5f8:	orr	r6, r6, r9, lsl #31
   2b5fc:	lsr	r7, r9, #1
   2b600:	mov	r2, ip
   2b604:	b	2b628 <_obstack_memory_used@@Base+0x52a4>
   2b608:	subs	r3, r4, r6
   2b60c:	sbc	r8, r5, r7
   2b610:	adds	r3, r3, r3
   2b614:	adc	r8, r8, r8
   2b618:	adds	r4, r3, #1
   2b61c:	adc	r5, r8, #0
   2b620:	subs	r2, r2, #1
   2b624:	beq	2b644 <_obstack_memory_used@@Base+0x52c0>
   2b628:	cmp	r5, r7
   2b62c:	cmpeq	r4, r6
   2b630:	bcs	2b608 <_obstack_memory_used@@Base+0x5284>
   2b634:	adds	r4, r4, r4
   2b638:	adc	r5, r5, r5
   2b63c:	subs	r2, r2, #1
   2b640:	bne	2b628 <_obstack_memory_used@@Base+0x52a4>
   2b644:	lsr	r3, r4, ip
   2b648:	orr	r3, r3, r5, lsl fp
   2b64c:	lsr	r2, r5, ip
   2b650:	orr	r3, r3, r5, lsr sl
   2b654:	adds	r0, r0, r4
   2b658:	mov	r4, r3
   2b65c:	lsl	r3, r2, ip
   2b660:	orr	r3, r3, r4, lsl sl
   2b664:	lsl	ip, r4, ip
   2b668:	orr	r3, r3, r4, lsr fp
   2b66c:	adc	r1, r1, r5
   2b670:	subs	r0, r0, ip
   2b674:	mov	r5, r2
   2b678:	sbc	r1, r1, r3
   2b67c:	cmp	lr, #0
   2b680:	strdne	r4, [lr]
   2b684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b688:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b68c:	mov	r7, r0
   2b690:	ldr	r6, [pc, #72]	; 2b6e0 <_obstack_memory_used@@Base+0x535c>
   2b694:	ldr	r5, [pc, #72]	; 2b6e4 <_obstack_memory_used@@Base+0x5360>
   2b698:	add	r6, pc, r6
   2b69c:	add	r5, pc, r5
   2b6a0:	sub	r6, r6, r5
   2b6a4:	mov	r8, r1
   2b6a8:	mov	r9, r2
   2b6ac:	bl	11b68 <calloc@plt-0x20>
   2b6b0:	asrs	r6, r6, #2
   2b6b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b6b8:	mov	r4, #0
   2b6bc:	add	r4, r4, #1
   2b6c0:	ldr	r3, [r5], #4
   2b6c4:	mov	r2, r9
   2b6c8:	mov	r1, r8
   2b6cc:	mov	r0, r7
   2b6d0:	blx	r3
   2b6d4:	cmp	r6, r4
   2b6d8:	bne	2b6bc <_obstack_memory_used@@Base+0x5338>
   2b6dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b6e0:	andeq	r4, r1, ip, asr r8
   2b6e4:	andeq	r4, r1, r4, asr r8
   2b6e8:	bx	lr
   2b6ec:	ldr	r3, [pc, #12]	; 2b700 <_obstack_memory_used@@Base+0x537c>
   2b6f0:	mov	r1, #0
   2b6f4:	add	r3, pc, r3
   2b6f8:	ldr	r2, [r3]
   2b6fc:	b	11ee8 <__cxa_atexit@plt>
   2b700:	andeq	r4, r1, r8, asr #21

Disassembly of section .fini:

0002b704 <.fini>:
   2b704:	push	{r3, lr}
   2b708:	pop	{r3, pc}
