
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010e44 <.init>:
   10e44:	push	{r3, lr}
   10e48:	bl	11134 <__assert_fail@plt+0x48>
   10e4c:	pop	{r3, pc}

Disassembly of section .plt:

00010e50 <calloc@plt-0x14>:
   10e50:	push	{lr}		; (str lr, [sp, #-4]!)
   10e54:	ldr	lr, [pc, #4]	; 10e60 <calloc@plt-0x4>
   10e58:	add	lr, pc, lr
   10e5c:	ldr	pc, [lr, #8]!
   10e60:	andeq	r7, r1, r0, lsr #3

00010e64 <calloc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e70 <fputs_unlocked@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #408]!	; 0x198

00010e7c <raise@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #400]!	; 0x190

00010e88 <strcmp@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #392]!	; 0x188

00010e94 <read@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #384]!	; 0x180

00010ea0 <fflush@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #376]!	; 0x178

00010eac <free@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #368]!	; 0x170

00010eb8 <_exit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #360]!	; 0x168

00010ec4 <memcpy@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #352]!	; 0x160

00010ed0 <mbsinit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #344]!	; 0x158

00010edc <fwrite_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #336]!	; 0x150

00010ee8 <memcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #328]!	; 0x148

00010ef4 <dcgettext@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #320]!	; 0x140

00010f00 <realloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #312]!	; 0x138

00010f0c <textdomain@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #304]!	; 0x130

00010f18 <rawmemchr@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #296]!	; 0x128

00010f24 <iswprint@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #288]!	; 0x120

00010f30 <__fxstat64@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #280]!	; 0x118

00010f3c <lseek64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #272]!	; 0x110

00010f48 <__ctype_get_mb_cur_max@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #264]!	; 0x108

00010f54 <__fpending@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #256]!	; 0x100

00010f60 <ferror_unlocked@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #248]!	; 0xf8

00010f6c <mbrtowc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #240]!	; 0xf0

00010f78 <error@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #232]!	; 0xe8

00010f84 <open64@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #224]!	; 0xe0

00010f90 <malloc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #216]!	; 0xd8

00010f9c <__libc_start_main@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #208]!	; 0xd0

00010fa8 <__freading@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #200]!	; 0xc8

00010fb4 <__gmon_start__@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #192]!	; 0xc0

00010fc0 <getopt_long@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #184]!	; 0xb8

00010fcc <__ctype_b_loc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #176]!	; 0xb0

00010fd8 <exit@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #168]!	; 0xa8

00010fe4 <strlen@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #160]!	; 0xa0

00010ff0 <strchr@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #152]!	; 0x98

00010ffc <memrchr@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #144]!	; 0x90

00011008 <__errno_location@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #136]!	; 0x88

00011014 <__cxa_atexit@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #128]!	; 0x80

00011020 <memset@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #120]!	; 0x78

0001102c <__printf_chk@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #112]!	; 0x70

00011038 <fileno@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #104]!	; 0x68

00011044 <strtoumax@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #96]!	; 0x60

00011050 <__fprintf_chk@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #88]!	; 0x58

0001105c <memchr@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #80]!	; 0x50

00011068 <fclose@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #72]!	; 0x48

00011074 <fseeko64@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #64]!	; 0x40

00011080 <setlocale@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #56]!	; 0x38

0001108c <strrchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #48]!	; 0x30

00011098 <nl_langinfo@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #40]!	; 0x28

000110a4 <clearerr_unlocked@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #32]!

000110b0 <bindtextdomain@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #24]!

000110bc <fputs@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #94208	; 0x17000
   110c4:	ldr	pc, [ip, #16]!

000110c8 <strncmp@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #94208	; 0x17000
   110d0:	ldr	pc, [ip, #8]!

000110d4 <abort@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #94208	; 0x17000
   110dc:	ldr	pc, [ip, #0]!

000110e0 <close@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4088]!	; 0xff8

000110ec <__assert_fail@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4080]!	; 0xff0

Disassembly of section .text:

000110f8 <.text>:
   110f8:	mov	fp, #0
   110fc:	mov	lr, #0
   11100:	pop	{r1}		; (ldr r1, [sp], #4)
   11104:	mov	r2, sp
   11108:	push	{r2}		; (str r2, [sp, #-4]!)
   1110c:	push	{r0}		; (str r0, [sp, #-4]!)
   11110:	ldr	ip, [pc, #16]	; 11128 <__assert_fail@plt+0x3c>
   11114:	push	{ip}		; (str ip, [sp, #-4]!)
   11118:	ldr	r0, [pc, #12]	; 1112c <__assert_fail@plt+0x40>
   1111c:	ldr	r3, [pc, #12]	; 11130 <__assert_fail@plt+0x44>
   11120:	bl	10f9c <__libc_start_main@plt>
   11124:	bl	110d4 <abort@plt>
   11128:	andeq	r6, r1, r0, lsl #15
   1112c:	andeq	r1, r1, r4, asr #9
   11130:	andeq	r6, r1, r0, lsr #14
   11134:	ldr	r3, [pc, #20]	; 11150 <__assert_fail@plt+0x64>
   11138:	ldr	r2, [pc, #20]	; 11154 <__assert_fail@plt+0x68>
   1113c:	add	r3, pc, r3
   11140:	ldr	r2, [r3, r2]
   11144:	cmp	r2, #0
   11148:	bxeq	lr
   1114c:	b	10fb4 <__gmon_start__@plt>
   11150:			; <UNDEFINED> instruction: 0x00016ebc
   11154:	andeq	r0, r0, r8, ror #1
   11158:	ldr	r0, [pc, #24]	; 11178 <__assert_fail@plt+0x8c>
   1115c:	ldr	r3, [pc, #24]	; 1117c <__assert_fail@plt+0x90>
   11160:	cmp	r3, r0
   11164:	bxeq	lr
   11168:	ldr	r3, [pc, #16]	; 11180 <__assert_fail@plt+0x94>
   1116c:	cmp	r3, #0
   11170:	bxeq	lr
   11174:	bx	r3
   11178:	andeq	r8, r2, r0, asr #2
   1117c:	andeq	r8, r2, r0, asr #2
   11180:	andeq	r0, r0, r0
   11184:	ldr	r0, [pc, #36]	; 111b0 <__assert_fail@plt+0xc4>
   11188:	ldr	r1, [pc, #36]	; 111b4 <__assert_fail@plt+0xc8>
   1118c:	sub	r1, r1, r0
   11190:	asr	r1, r1, #2
   11194:	add	r1, r1, r1, lsr #31
   11198:	asrs	r1, r1, #1
   1119c:	bxeq	lr
   111a0:	ldr	r3, [pc, #16]	; 111b8 <__assert_fail@plt+0xcc>
   111a4:	cmp	r3, #0
   111a8:	bxeq	lr
   111ac:	bx	r3
   111b0:	andeq	r8, r2, r0, asr #2
   111b4:	andeq	r8, r2, r0, asr #2
   111b8:	andeq	r0, r0, r0
   111bc:	push	{r4, lr}
   111c0:	ldr	r4, [pc, #24]	; 111e0 <__assert_fail@plt+0xf4>
   111c4:	ldrb	r3, [r4]
   111c8:	cmp	r3, #0
   111cc:	popne	{r4, pc}
   111d0:	bl	11158 <__assert_fail@plt+0x6c>
   111d4:	mov	r3, #1
   111d8:	strb	r3, [r4]
   111dc:	pop	{r4, pc}
   111e0:	andeq	r8, r2, ip, asr r1
   111e4:	b	11184 <__assert_fail@plt+0x98>
   111e8:	push	{fp, lr}
   111ec:	mov	fp, sp
   111f0:	sub	sp, sp, #56	; 0x38
   111f4:	mov	r8, r0
   111f8:	cmp	r0, #0
   111fc:	bne	11484 <__assert_fail@plt+0x398>
   11200:	movw	r1, #26595	; 0x67e3
   11204:	mov	r0, #0
   11208:	mov	r2, #5
   1120c:	movt	r1, #1
   11210:	bl	10ef4 <dcgettext@plt>
   11214:	mov	r1, r0
   11218:	movw	r0, #33132	; 0x816c
   1121c:	movt	r0, #2
   11220:	ldr	r2, [r0]
   11224:	mov	r0, #1
   11228:	bl	1102c <__printf_chk@plt>
   1122c:	movw	r1, #26628	; 0x6804
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10ef4 <dcgettext@plt>
   11240:	mov	r1, r0
   11244:	mov	r0, #1
   11248:	mov	r2, #10
   1124c:	bl	1102c <__printf_chk@plt>
   11250:	movw	r1, #27816	; 0x6ca8
   11254:	mov	r0, #0
   11258:	mov	r2, #5
   1125c:	movt	r1, #1
   11260:	bl	10ef4 <dcgettext@plt>
   11264:	movw	r9, #33108	; 0x8154
   11268:	movt	r9, #2
   1126c:	ldr	r1, [r9]
   11270:	bl	10e70 <fputs_unlocked@plt>
   11274:	movw	r1, #27872	; 0x6ce0
   11278:	mov	r0, #0
   1127c:	mov	r2, #5
   11280:	movt	r1, #1
   11284:	bl	10ef4 <dcgettext@plt>
   11288:	ldr	r1, [r9]
   1128c:	bl	10e70 <fputs_unlocked@plt>
   11290:	movw	r1, #26761	; 0x6889
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	movt	r1, #1
   112a0:	bl	10ef4 <dcgettext@plt>
   112a4:	mov	r1, r0
   112a8:	mov	r0, #1
   112ac:	mov	r2, #10
   112b0:	bl	1102c <__printf_chk@plt>
   112b4:	movw	r1, #27159	; 0x6a17
   112b8:	mov	r0, #0
   112bc:	mov	r2, #5
   112c0:	movt	r1, #1
   112c4:	bl	10ef4 <dcgettext@plt>
   112c8:	ldr	r1, [r9]
   112cc:	bl	10e70 <fputs_unlocked@plt>
   112d0:	movw	r1, #27291	; 0x6a9b
   112d4:	mov	r0, #0
   112d8:	mov	r2, #5
   112dc:	movt	r1, #1
   112e0:	bl	10ef4 <dcgettext@plt>
   112e4:	ldr	r1, [r9]
   112e8:	bl	10e70 <fputs_unlocked@plt>
   112ec:	movw	r1, #27354	; 0x6ada
   112f0:	mov	r0, #0
   112f4:	mov	r2, #5
   112f8:	movt	r1, #1
   112fc:	bl	10ef4 <dcgettext@plt>
   11300:	ldr	r1, [r9]
   11304:	bl	10e70 <fputs_unlocked@plt>
   11308:	movw	r1, #27399	; 0x6b07
   1130c:	mov	r0, #0
   11310:	mov	r2, #5
   11314:	movt	r1, #1
   11318:	bl	10ef4 <dcgettext@plt>
   1131c:	ldr	r1, [r9]
   11320:	bl	10e70 <fputs_unlocked@plt>
   11324:	movw	r1, #27453	; 0x6b3d
   11328:	mov	r0, #0
   1132c:	mov	r2, #5
   11330:	movt	r1, #1
   11334:	bl	10ef4 <dcgettext@plt>
   11338:	ldr	r1, [r9]
   1133c:	bl	10e70 <fputs_unlocked@plt>
   11340:	movw	r0, #28808	; 0x7088
   11344:	mov	r6, sp
   11348:	movt	r0, #1
   1134c:	mov	r1, r6
   11350:	ldm	r0!, {r2, r3, r4, r5}
   11354:	stmia	r1!, {r2, r3, r4, r5}
   11358:	ldm	r0!, {r2, r3, r4, r5, r7}
   1135c:	stmia	r1!, {r2, r3, r4, r5, r7}
   11360:	ldm	r0, {r2, r3, r4, r5, r7}
   11364:	stm	r1, {r2, r3, r4, r5, r7}
   11368:	movw	r1, #27947	; 0x6d2b
   1136c:	movw	r5, #27665	; 0x6c11
   11370:	movt	r1, #1
   11374:	movt	r5, #1
   11378:	mov	r0, r5
   1137c:	bl	10e88 <strcmp@plt>
   11380:	cmp	r0, #0
   11384:	ldrne	r1, [r6, #8]!
   11388:	cmpne	r1, #0
   1138c:	bne	11378 <__assert_fail@plt+0x28c>
   11390:	ldr	r6, [r6, #4]
   11394:	movw	r1, #28042	; 0x6d8a
   11398:	mov	r0, #0
   1139c:	mov	r2, #5
   113a0:	movt	r1, #1
   113a4:	bl	10ef4 <dcgettext@plt>
   113a8:	movw	r2, #27742	; 0x6c5e
   113ac:	movw	r3, #28065	; 0x6da1
   113b0:	mov	r1, r0
   113b4:	mov	r0, #1
   113b8:	movt	r2, #1
   113bc:	movt	r3, #1
   113c0:	bl	1102c <__printf_chk@plt>
   113c4:	cmp	r6, #0
   113c8:	mov	r0, #5
   113cc:	mov	r1, #0
   113d0:	moveq	r6, r5
   113d4:	bl	11080 <setlocale@plt>
   113d8:	cmp	r0, #0
   113dc:	beq	11414 <__assert_fail@plt+0x328>
   113e0:	movw	r1, #28105	; 0x6dc9
   113e4:	mov	r2, #3
   113e8:	movt	r1, #1
   113ec:	bl	110c8 <strncmp@plt>
   113f0:	cmp	r0, #0
   113f4:	beq	11414 <__assert_fail@plt+0x328>
   113f8:	movw	r1, #28109	; 0x6dcd
   113fc:	mov	r0, #0
   11400:	mov	r2, #5
   11404:	movt	r1, #1
   11408:	bl	10ef4 <dcgettext@plt>
   1140c:	ldr	r1, [r9]
   11410:	bl	10e70 <fputs_unlocked@plt>
   11414:	movw	r1, #28180	; 0x6e14
   11418:	mov	r0, #0
   1141c:	mov	r2, #5
   11420:	movt	r1, #1
   11424:	bl	10ef4 <dcgettext@plt>
   11428:	movw	r2, #28065	; 0x6da1
   1142c:	mov	r1, r0
   11430:	mov	r0, #1
   11434:	mov	r3, r5
   11438:	movt	r2, #1
   1143c:	bl	1102c <__printf_chk@plt>
   11440:	movw	r1, #28207	; 0x6e2f
   11444:	mov	r0, #0
   11448:	mov	r2, #5
   1144c:	movt	r1, #1
   11450:	bl	10ef4 <dcgettext@plt>
   11454:	movw	r3, #28257	; 0x6e61
   11458:	mov	r1, r0
   1145c:	movw	r0, #27975	; 0x6d47
   11460:	cmp	r6, r5
   11464:	mov	r2, r6
   11468:	movt	r0, #1
   1146c:	movt	r3, #1
   11470:	moveq	r3, r0
   11474:	mov	r0, #1
   11478:	bl	1102c <__printf_chk@plt>
   1147c:	mov	r0, r8
   11480:	bl	10fd8 <exit@plt>
   11484:	movw	r0, #33104	; 0x8150
   11488:	movw	r1, #26556	; 0x67bc
   1148c:	mov	r2, #5
   11490:	movt	r0, #2
   11494:	movt	r1, #1
   11498:	ldr	r5, [r0]
   1149c:	mov	r0, #0
   114a0:	bl	10ef4 <dcgettext@plt>
   114a4:	mov	r2, r0
   114a8:	movw	r0, #33132	; 0x816c
   114ac:	mov	r1, #1
   114b0:	movt	r0, #2
   114b4:	ldr	r3, [r0]
   114b8:	mov	r0, r5
   114bc:	bl	11050 <__fprintf_chk@plt>
   114c0:	b	1147c <__assert_fail@plt+0x390>
   114c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114c8:	add	fp, sp, #28
   114cc:	sub	sp, sp, #244	; 0xf4
   114d0:	sub	sp, sp, #8192	; 0x2000
   114d4:	mov	r9, r0
   114d8:	ldr	r0, [r1]
   114dc:	mov	r8, r1
   114e0:	bl	13374 <__assert_fail@plt+0x2288>
   114e4:	movw	r1, #28257	; 0x6e61
   114e8:	mov	r0, #6
   114ec:	movt	r1, #1
   114f0:	bl	11080 <setlocale@plt>
   114f4:	movw	r5, #27746	; 0x6c62
   114f8:	movw	r1, #27670	; 0x6c16
   114fc:	movt	r5, #1
   11500:	movt	r1, #1
   11504:	mov	r0, r5
   11508:	bl	110b0 <bindtextdomain@plt>
   1150c:	mov	r0, r5
   11510:	bl	10f0c <textdomain@plt>
   11514:	movw	r0, #12508	; 0x30dc
   11518:	movt	r0, #1
   1151c:	bl	16784 <__assert_fail@plt+0x5698>
   11520:	movw	r0, #33117	; 0x815d
   11524:	mov	r4, #0
   11528:	mov	r1, #1
   1152c:	mvn	sl, #0
   11530:	cmp	r9, #2
   11534:	movt	r0, #2
   11538:	strb	r4, [r0]
   1153c:	movw	r0, #33118	; 0x815e
   11540:	movt	r0, #2
   11544:	strb	r4, [r0]
   11548:	movw	r0, #33119	; 0x815f
   1154c:	movt	r0, #2
   11550:	strb	r1, [r0]
   11554:	blt	11704 <__assert_fail@plt+0x618>
   11558:	mov	r5, r8
   1155c:	mov	r1, #0
   11560:	ldr	lr, [r5, #4]!
   11564:	str	r1, [sp, #132]	; 0x84
   11568:	ldrb	r0, [lr]
   1156c:	cmp	r0, #45	; 0x2d
   11570:	bne	11718 <__assert_fail@plt+0x62c>
   11574:	ldrb	r0, [lr, #1]!
   11578:	mov	r1, #0
   1157c:	str	r1, [sp, #132]	; 0x84
   11580:	sub	r0, r0, #48	; 0x30
   11584:	cmp	r0, #9
   11588:	bhi	11718 <__assert_fail@plt+0x62c>
   1158c:	mov	r0, lr
   11590:	ldrb	r2, [r0, #1]!
   11594:	sub	r1, r2, #48	; 0x30
   11598:	cmp	r1, #10
   1159c:	bcc	11590 <__assert_fail@plt+0x4a4>
   115a0:	mov	r3, #0
   115a4:	mov	ip, #0
   115a8:	mov	r1, #1
   115ac:	mov	sl, r0
   115b0:	str	r3, [sp, #132]	; 0x84
   115b4:	mov	r3, #0
   115b8:	b	11654 <__assert_fail@plt+0x568>
   115bc:	add	r4, pc, #8
   115c0:	mov	r1, #0
   115c4:	mov	r3, #0
   115c8:	ldr	pc, [r4, r7, lsl #2]
   115cc:	strdeq	r1, [r1], -ip
   115d0:	andeq	r1, r1, r0, asr r6
   115d4:	andeq	r2, r1, r4, lsl lr
   115d8:	andeq	r2, r1, r4, lsl lr
   115dc:	andeq	r2, r1, r4, lsl lr
   115e0:	andeq	r2, r1, r4, lsl lr
   115e4:	andeq	r2, r1, r4, lsl lr
   115e8:	andeq	r2, r1, r4, lsl lr
   115ec:	andeq	r2, r1, r4, lsl lr
   115f0:	strdeq	r1, [r1], -ip
   115f4:	andeq	r1, r1, r8, asr #12
   115f8:	strdeq	r1, [r1], -ip
   115fc:	mov	r1, #0
   11600:	mov	r3, r2
   11604:	b	11650 <__assert_fail@plt+0x564>
   11608:	cmp	r3, #113	; 0x71
   1160c:	beq	11620 <__assert_fail@plt+0x534>
   11610:	cmp	r3, #118	; 0x76
   11614:	bne	1162c <__assert_fail@plt+0x540>
   11618:	mov	r2, #1
   1161c:	b	11624 <__assert_fail@plt+0x538>
   11620:	mov	r2, #2
   11624:	str	r2, [sp, #132]	; 0x84
   11628:	b	1164c <__assert_fail@plt+0x560>
   1162c:	cmp	r3, #122	; 0x7a
   11630:	bne	12e14 <__assert_fail@plt+0x1d28>
   11634:	movw	r2, #33119	; 0x815f
   11638:	mov	r3, r6
   1163c:	movt	r2, #2
   11640:	strb	ip, [r2]
   11644:	b	11650 <__assert_fail@plt+0x564>
   11648:	mov	r1, #1
   1164c:	mov	r3, r6
   11650:	ldrb	r2, [sl, #1]!
   11654:	mov	r6, r3
   11658:	uxtb	r3, r2
   1165c:	cmp	r3, #112	; 0x70
   11660:	bgt	11608 <__assert_fail@plt+0x51c>
   11664:	sub	r7, r3, #98	; 0x62
   11668:	cmp	r7, #11
   1166c:	bls	115bc <__assert_fail@plt+0x4d0>
   11670:	cmp	r3, #0
   11674:	bne	12e14 <__assert_fail@plt+0x1d28>
   11678:	tst	r6, #255	; 0xff
   1167c:	strb	r6, [r0]
   11680:	mov	r4, lr
   11684:	mov	r6, #0
   11688:	movne	r2, #0
   1168c:	strbne	r2, [r0, #1]
   11690:	ands	r0, r1, #1
   11694:	movw	r1, #27792	; 0x6c90
   11698:	mov	r2, #5
   1169c:	str	r0, [sp, #84]	; 0x54
   116a0:	movw	r0, #28271	; 0x6e6f
   116a4:	movt	r1, #1
   116a8:	movt	r0, #1
   116ac:	movne	r1, r0
   116b0:	mov	r0, #0
   116b4:	bl	10ef4 <dcgettext@plt>
   116b8:	movw	r1, #28258	; 0x6e62
   116bc:	mvn	sl, #0
   116c0:	str	r0, [sp, #12]
   116c4:	mov	r0, r4
   116c8:	mov	r2, #0
   116cc:	mov	r3, #0
   116d0:	str	r6, [sp, #16]
   116d4:	movt	r1, #1
   116d8:	str	sl, [sp]
   116dc:	str	sl, [sp, #4]
   116e0:	str	r1, [sp, #8]
   116e4:	bl	1595c <__assert_fail@plt+0x4870>
   116e8:	str	r0, [sp, #128]	; 0x80
   116ec:	ldr	r0, [r8]
   116f0:	sub	r9, r9, #1
   116f4:	mov	r4, #0
   116f8:	str	r1, [sp, #124]	; 0x7c
   116fc:	str	r0, [r8, #4]
   11700:	b	11734 <__assert_fail@plt+0x648>
   11704:	mov	r0, #10
   11708:	str	r0, [sp, #128]	; 0x80
   1170c:	mov	r0, #0
   11710:	str	r0, [sp, #132]	; 0x84
   11714:	b	11720 <__assert_fail@plt+0x634>
   11718:	mov	r0, #10
   1171c:	str	r0, [sp, #128]	; 0x80
   11720:	mov	r0, #0
   11724:	mov	r5, r8
   11728:	str	r0, [sp, #124]	; 0x7c
   1172c:	mov	r0, #1
   11730:	str	r0, [sp, #84]	; 0x54
   11734:	movw	r8, #27724	; 0x6c4c
   11738:	movw	r7, #28648	; 0x6fe8
   1173c:	mov	r0, #0
   11740:	movt	r8, #1
   11744:	movt	r7, #1
   11748:	str	r0, [sp, #96]	; 0x60
   1174c:	b	11848 <__assert_fail@plt+0x75c>
   11750:	cmp	r6, #99	; 0x63
   11754:	bne	117d0 <__assert_fail@plt+0x6e4>
   11758:	ldr	r6, [r1]
   1175c:	ldrb	r0, [r6]
   11760:	subs	r0, r0, #45	; 0x2d
   11764:	clz	r0, r0
   11768:	addeq	r6, r6, #1
   1176c:	lsr	r0, r0, #5
   11770:	streq	r6, [r1]
   11774:	movw	r1, #27792	; 0x6c90
   11778:	str	r0, [sp, #96]	; 0x60
   1177c:	mov	r0, #0
   11780:	movt	r1, #1
   11784:	b	11804 <__assert_fail@plt+0x718>
   11788:	cmp	r6, #122	; 0x7a
   1178c:	bne	117b4 <__assert_fail@plt+0x6c8>
   11790:	movw	r0, #33119	; 0x815f
   11794:	movt	r0, #2
   11798:	strb	r4, [r0]
   1179c:	b	11848 <__assert_fail@plt+0x75c>
   117a0:	cmp	r6, #118	; 0x76
   117a4:	bne	12d58 <__assert_fail@plt+0x1c6c>
   117a8:	mov	r0, #1
   117ac:	str	r0, [sp, #132]	; 0x84
   117b0:	b	11848 <__assert_fail@plt+0x75c>
   117b4:	cmp	r6, #256	; 0x100
   117b8:	bne	12d58 <__assert_fail@plt+0x1c6c>
   117bc:	movw	r0, #33120	; 0x8160
   117c0:	mov	r1, #1
   117c4:	movt	r0, #2
   117c8:	strb	r1, [r0]
   117cc:	b	11848 <__assert_fail@plt+0x75c>
   117d0:	cmp	r6, #110	; 0x6e
   117d4:	bne	12d58 <__assert_fail@plt+0x1c6c>
   117d8:	ldr	r6, [r1]
   117dc:	ldrb	r0, [r6]
   117e0:	subs	r0, r0, #45	; 0x2d
   117e4:	clz	r0, r0
   117e8:	addeq	r6, r6, #1
   117ec:	lsr	r0, r0, #5
   117f0:	streq	r6, [r1]
   117f4:	movw	r1, #28271	; 0x6e6f
   117f8:	str	r0, [sp, #96]	; 0x60
   117fc:	mov	r0, #1
   11800:	movt	r1, #1
   11804:	str	r0, [sp, #84]	; 0x54
   11808:	mov	r0, #0
   1180c:	mov	r2, #5
   11810:	bl	10ef4 <dcgettext@plt>
   11814:	movw	r1, #28258	; 0x6e62
   11818:	str	r0, [sp, #12]
   1181c:	mov	r0, r6
   11820:	mov	r2, #0
   11824:	mov	r3, #0
   11828:	str	sl, [sp]
   1182c:	str	sl, [sp, #4]
   11830:	str	r4, [sp, #16]
   11834:	movt	r1, #1
   11838:	str	r1, [sp, #8]
   1183c:	bl	1595c <__assert_fail@plt+0x4870>
   11840:	str	r0, [sp, #128]	; 0x80
   11844:	str	r1, [sp, #124]	; 0x7c
   11848:	mov	r0, r9
   1184c:	mov	r1, r5
   11850:	mov	r2, r8
   11854:	mov	r3, r7
   11858:	str	r4, [sp]
   1185c:	bl	10fc0 <getopt_long@plt>
   11860:	mov	r6, r0
   11864:	cmp	r0, #112	; 0x70
   11868:	ble	11888 <__assert_fail@plt+0x79c>
   1186c:	cmp	r6, #121	; 0x79
   11870:	bgt	11788 <__assert_fail@plt+0x69c>
   11874:	cmp	r6, #113	; 0x71
   11878:	bne	117a0 <__assert_fail@plt+0x6b4>
   1187c:	mov	r0, #2
   11880:	str	r0, [sp, #132]	; 0x84
   11884:	b	11848 <__assert_fail@plt+0x75c>
   11888:	movw	r1, #33112	; 0x8158
   1188c:	cmp	r6, #98	; 0x62
   11890:	movt	r1, #2
   11894:	bgt	11750 <__assert_fail@plt+0x664>
   11898:	cmn	r6, #1
   1189c:	bne	12cec <__assert_fail@plt+0x1c00>
   118a0:	ldr	r0, [sp, #132]	; 0x84
   118a4:	ldr	r3, [sp, #128]	; 0x80
   118a8:	cmp	r0, #1
   118ac:	beq	118d0 <__assert_fail@plt+0x7e4>
   118b0:	cmp	r0, #0
   118b4:	bne	118e0 <__assert_fail@plt+0x7f4>
   118b8:	movw	r0, #33096	; 0x8148
   118bc:	sub	r1, r9, #1
   118c0:	movt	r0, #2
   118c4:	ldr	r0, [r0]
   118c8:	cmp	r0, r1
   118cc:	bge	118e0 <__assert_fail@plt+0x7f4>
   118d0:	movw	r1, #33118	; 0x815e
   118d4:	mov	r0, #1
   118d8:	movt	r1, #2
   118dc:	strb	r0, [r1]
   118e0:	ldr	r0, [sp, #124]	; 0x7c
   118e4:	ldr	r1, [sp, #96]	; 0x60
   118e8:	mov	r6, #0
   118ec:	cmp	r0, #0
   118f0:	mov	r0, #0
   118f4:	movwlt	r0, #1
   118f8:	and	r0, r0, r1
   118fc:	cmp	r0, #1
   11900:	bne	11914 <__assert_fail@plt+0x828>
   11904:	ldr	r0, [sp, #84]	; 0x54
   11908:	eor	r0, r0, #1
   1190c:	tst	r0, #1
   11910:	bne	12dc8 <__assert_fail@plt+0x1cdc>
   11914:	movw	r0, #33096	; 0x8148
   11918:	movw	r1, #28640	; 0x6fe0
   1191c:	movt	r0, #2
   11920:	movt	r1, #1
   11924:	ldr	r0, [r0]
   11928:	cmp	r0, r9
   1192c:	addlt	r1, r5, r0, lsl #2
   11930:	ldr	r7, [r1]
   11934:	str	r1, [sp, #100]	; 0x64
   11938:	cmp	r7, #0
   1193c:	beq	12cbc <__assert_fail@plt+0x1bd0>
   11940:	adds	r0, r3, #8192	; 0x2000
   11944:	mov	r1, #1
   11948:	add	r9, sp, #136	; 0x88
   1194c:	mov	sl, #0
   11950:	mov	r8, #1
   11954:	str	r3, [sp, #128]	; 0x80
   11958:	ldr	r0, [sp, #124]	; 0x7c
   1195c:	adc	r0, r0, #0
   11960:	str	r0, [sp, #28]
   11964:	mov	r0, r3
   11968:	bfc	r0, #13, #19
   1196c:	str	r0, [sp, #24]
   11970:	rsb	r0, r0, #8192	; 0x2000
   11974:	str	r0, [sp, #72]	; 0x48
   11978:	add	r0, r0, r3
   1197c:	add	r1, r1, r0, lsr #13
   11980:	lsr	r0, r0, #13
   11984:	str	r0, [sp, #76]	; 0x4c
   11988:	sub	r0, fp, #136	; 0x88
   1198c:	cmp	r1, #16
   11990:	mov	r2, r1
   11994:	str	r1, [sp, #88]	; 0x58
   11998:	add	r0, r0, #48	; 0x30
   1199c:	movcs	r2, #16
   119a0:	str	r0, [sp, #32]
   119a4:	add	r0, r3, #8192	; 0x2000
   119a8:	str	r2, [sp, #52]	; 0x34
   119ac:	str	r0, [sp, #80]	; 0x50
   119b0:	lsr	r0, r1, #1
   119b4:	str	r0, [sp, #36]	; 0x24
   119b8:	b	11a88 <__assert_fail@plt+0x99c>
   119bc:	ldr	sl, [sp, #56]	; 0x38
   119c0:	ldr	r4, [sp, #48]	; 0x30
   119c4:	ldr	r5, [sp, #120]	; 0x78
   119c8:	ldr	r8, [sp, #44]	; 0x2c
   119cc:	mvn	r7, #0
   119d0:	subs	r0, sl, r9
   119d4:	sbcs	r0, r4, r5
   119d8:	bge	11a30 <__assert_fail@plt+0x944>
   119dc:	mov	r0, #0
   119e0:	mov	r2, sl
   119e4:	mov	r3, r4
   119e8:	stm	sp, {r0, r8}
   119ec:	ldr	r7, [sp, #132]	; 0x84
   119f0:	mov	r0, r7
   119f4:	bl	12e5c <__assert_fail@plt+0x1d70>
   119f8:	cmp	r1, #0
   119fc:	blt	11a28 <__assert_fail@plt+0x93c>
   11a00:	ldr	r5, [sp, #120]	; 0x78
   11a04:	subs	r2, r9, sl
   11a08:	mov	r0, r7
   11a0c:	sbc	r3, r5, r4
   11a10:	bl	12f90 <__assert_fail@plt+0x1ea4>
   11a14:	cmp	r0, #0
   11a18:	mvn	r7, #0
   11a1c:	beq	11a30 <__assert_fail@plt+0x944>
   11a20:	mov	r1, r8
   11a24:	bl	13024 <__assert_fail@plt+0x1f38>
   11a28:	mov	r8, #0
   11a2c:	b	11a6c <__assert_fail@plt+0x980>
   11a30:	add	r1, r6, #1
   11a34:	add	r0, sp, #136	; 0x88
   11a38:	bl	12f0c <__assert_fail@plt+0x1e20>
   11a3c:	mov	r0, #0
   11a40:	stm	sp, {r0, r8}
   11a44:	adds	r0, r9, r6
   11a48:	adc	r1, r5, #0
   11a4c:	adds	r2, r0, #1
   11a50:	ldr	r0, [sp, #132]	; 0x84
   11a54:	adc	r3, r1, #0
   11a58:	bl	12e5c <__assert_fail@plt+0x1d70>
   11a5c:	subs	r0, r7, r0
   11a60:	mov	r8, #0
   11a64:	sbcs	r0, r7, r1
   11a68:	movwlt	r8, #1
   11a6c:	str	r8, [sp, #120]	; 0x78
   11a70:	ldr	r7, [sp, #44]	; 0x2c
   11a74:	ldr	r8, [sp, #40]	; 0x28
   11a78:	add	r9, sp, #136	; 0x88
   11a7c:	b	11e54 <__assert_fail@plt+0xd68>
   11a80:	mov	r8, #1
   11a84:	b	11a6c <__assert_fail@plt+0x980>
   11a88:	movw	r1, #28957	; 0x711d
   11a8c:	mov	r0, r7
   11a90:	movt	r1, #1
   11a94:	bl	10e88 <strcmp@plt>
   11a98:	mov	r6, r0
   11a9c:	cmp	r0, #0
   11aa0:	beq	11ac0 <__assert_fail@plt+0x9d4>
   11aa4:	mov	r0, r7
   11aa8:	mov	r1, #0
   11aac:	bl	10f84 <open64@plt>
   11ab0:	cmn	r0, #1
   11ab4:	ble	11c60 <__assert_fail@plt+0xb74>
   11ab8:	mov	r5, r0
   11abc:	b	11aec <__assert_fail@plt+0xa00>
   11ac0:	movw	r0, #33117	; 0x815d
   11ac4:	mov	r1, #1
   11ac8:	mov	r2, #5
   11acc:	mov	r5, #0
   11ad0:	movt	r0, #2
   11ad4:	strb	r1, [r0]
   11ad8:	movw	r1, #28365	; 0x6ecd
   11adc:	mov	r0, #0
   11ae0:	movt	r1, #1
   11ae4:	bl	10ef4 <dcgettext@plt>
   11ae8:	mov	r7, r0
   11aec:	movw	r0, #33118	; 0x815e
   11af0:	movt	r0, #2
   11af4:	ldrb	r0, [r0]
   11af8:	cmp	r0, #1
   11afc:	bne	11b44 <__assert_fail@plt+0xa58>
   11b00:	movw	r0, #33121	; 0x8161
   11b04:	movw	r2, #28257	; 0x6e61
   11b08:	movw	r1, #28442	; 0x6f1a
   11b0c:	mov	r3, r7
   11b10:	movt	r0, #2
   11b14:	movt	r2, #1
   11b18:	movt	r1, #1
   11b1c:	mov	r4, r0
   11b20:	ldrb	r0, [r0]
   11b24:	cmp	r0, #0
   11b28:	movw	r0, #28256	; 0x6e60
   11b2c:	movt	r0, #1
   11b30:	movne	r2, r0
   11b34:	mov	r0, #1
   11b38:	bl	1102c <__printf_chk@plt>
   11b3c:	mov	r0, #1
   11b40:	strb	r0, [r4]
   11b44:	ldr	r0, [sp, #96]	; 0x60
   11b48:	str	r6, [sp, #116]	; 0x74
   11b4c:	str	r5, [sp, #132]	; 0x84
   11b50:	tst	r0, #1
   11b54:	beq	11bbc <__assert_fail@plt+0xad0>
   11b58:	mov	r0, r5
   11b5c:	sub	r1, fp, #136	; 0x88
   11b60:	bl	1679c <__assert_fail@plt+0x56b0>
   11b64:	cmp	r0, #0
   11b68:	beq	11d08 <__assert_fail@plt+0xc1c>
   11b6c:	bl	11008 <__errno_location@plt>
   11b70:	ldr	r4, [r0]
   11b74:	movw	r1, #28426	; 0x6f0a
   11b78:	mov	r0, #0
   11b7c:	mov	r2, #5
   11b80:	str	r0, [sp, #120]	; 0x78
   11b84:	mov	r0, #0
   11b88:	movt	r1, #1
   11b8c:	bl	10ef4 <dcgettext@plt>
   11b90:	mov	r5, r0
   11b94:	mov	r0, #4
   11b98:	mov	r1, r7
   11b9c:	bl	14a40 <__assert_fail@plt+0x3954>
   11ba0:	mov	r2, r5
   11ba4:	ldr	r5, [sp, #132]	; 0x84
   11ba8:	mov	r3, r0
   11bac:	mov	r0, #0
   11bb0:	mov	r1, r4
   11bb4:	bl	10f78 <error@plt>
   11bb8:	b	12c38 <__assert_fail@plt+0x1b4c>
   11bbc:	ldr	r0, [sp, #84]	; 0x54
   11bc0:	ldr	r1, [sp, #124]	; 0x7c
   11bc4:	ldr	r2, [sp, #128]	; 0x80
   11bc8:	tst	r0, #1
   11bcc:	beq	11c7c <__assert_fail@plt+0xb90>
   11bd0:	orrs	r0, r2, r1
   11bd4:	mov	r0, #1
   11bd8:	str	r0, [sp, #120]	; 0x78
   11bdc:	beq	12c38 <__assert_fail@plt+0x1b4c>
   11be0:	mov	r5, r2
   11be4:	mov	r6, r1
   11be8:	ldr	r0, [sp, #132]	; 0x84
   11bec:	mov	r1, r9
   11bf0:	mov	r2, #8192	; 0x2000
   11bf4:	bl	14eb0 <__assert_fail@plt+0x3dc4>
   11bf8:	cmn	r0, #1
   11bfc:	beq	12ae4 <__assert_fail@plt+0x19f8>
   11c00:	cmp	r0, #0
   11c04:	beq	11e58 <__assert_fail@plt+0xd6c>
   11c08:	movw	r1, #33119	; 0x815f
   11c0c:	mov	r4, #0
   11c10:	movt	r1, #2
   11c14:	ldrb	r1, [r1]
   11c18:	cmp	r1, #0
   11c1c:	movwne	r1, #10
   11c20:	ldrb	r2, [r9, r4]
   11c24:	cmp	r1, r2
   11c28:	bne	11c3c <__assert_fail@plt+0xb50>
   11c2c:	subs	r5, r5, #1
   11c30:	sbc	r6, r6, #0
   11c34:	orrs	r2, r5, r6
   11c38:	beq	11d78 <__assert_fail@plt+0xc8c>
   11c3c:	add	r4, r4, #1
   11c40:	cmp	r0, r4
   11c44:	bhi	11c20 <__assert_fail@plt+0xb34>
   11c48:	mov	r0, r9
   11c4c:	mov	r1, r4
   11c50:	bl	12f0c <__assert_fail@plt+0x1e20>
   11c54:	orrs	r0, r5, r6
   11c58:	bne	11be8 <__assert_fail@plt+0xafc>
   11c5c:	b	11e58 <__assert_fail@plt+0xd6c>
   11c60:	bl	11008 <__errno_location@plt>
   11c64:	ldr	r4, [r0]
   11c68:	movw	r1, #28380	; 0x6edc
   11c6c:	mov	r6, #0
   11c70:	mov	r0, #0
   11c74:	movt	r1, #1
   11c78:	b	12c6c <__assert_fail@plt+0x1b80>
   11c7c:	orrs	r0, r2, r1
   11c80:	mov	r0, #1
   11c84:	str	r0, [sp, #120]	; 0x78
   11c88:	beq	12c38 <__assert_fail@plt+0x1b4c>
   11c8c:	str	sl, [sp, #92]	; 0x5c
   11c90:	mov	sl, r8
   11c94:	mov	r8, r7
   11c98:	mov	r4, #8192	; 0x2000
   11c9c:	mov	r6, r2
   11ca0:	mov	r7, r1
   11ca4:	subs	r0, r6, r4
   11ca8:	mov	r1, r9
   11cac:	sbcs	r0, r7, #0
   11cb0:	movcc	r4, r6
   11cb4:	mov	r0, r5
   11cb8:	mov	r2, r4
   11cbc:	bl	14eb0 <__assert_fail@plt+0x3dc4>
   11cc0:	cmp	r0, #0
   11cc4:	beq	11dfc <__assert_fail@plt+0xd10>
   11cc8:	mov	r5, r0
   11ccc:	cmn	r0, #1
   11cd0:	beq	11e04 <__assert_fail@plt+0xd18>
   11cd4:	mov	r0, r9
   11cd8:	mov	r1, r5
   11cdc:	bl	12f0c <__assert_fail@plt+0x1e20>
   11ce0:	subs	r6, r6, r5
   11ce4:	ldr	r5, [sp, #132]	; 0x84
   11ce8:	sbc	r7, r7, #0
   11cec:	orrs	r0, r6, r7
   11cf0:	bne	11ca4 <__assert_fail@plt+0xbb8>
   11cf4:	mov	r7, r8
   11cf8:	mov	r8, sl
   11cfc:	ldr	sl, [sp, #92]	; 0x5c
   11d00:	ldr	r6, [sp, #116]	; 0x74
   11d04:	b	12c38 <__assert_fail@plt+0x1b4c>
   11d08:	movw	r0, #33120	; 0x8160
   11d0c:	mvn	r2, #0
   11d10:	movt	r0, #2
   11d14:	ldrb	r1, [r0]
   11d18:	mov	r0, #1
   11d1c:	cmp	r1, #0
   11d20:	mvn	r1, #0
   11d24:	bne	11e70 <__assert_fail@plt+0xd84>
   11d28:	ldr	r0, [fp, #-120]	; 0xffffff88
   11d2c:	and	r0, r0, #53248	; 0xd000
   11d30:	orr	r0, r0, #8192	; 0x2000
   11d34:	cmp	r0, #40960	; 0xa000
   11d38:	bne	11e64 <__assert_fail@plt+0xd78>
   11d3c:	mov	r0, #1
   11d40:	mov	r2, #0
   11d44:	mov	r3, #0
   11d48:	stm	sp, {r0, r7}
   11d4c:	mov	r0, #0
   11d50:	str	r0, [sp, #120]	; 0x78
   11d54:	mov	r0, r5
   11d58:	bl	12e5c <__assert_fail@plt+0x1d70>
   11d5c:	cmp	r1, #0
   11d60:	blt	12c38 <__assert_fail@plt+0x1b4c>
   11d64:	mov	r2, r0
   11d68:	movw	r0, #33120	; 0x8160
   11d6c:	movt	r0, #2
   11d70:	ldrb	r0, [r0]
   11d74:	b	11e70 <__assert_fail@plt+0xd84>
   11d78:	sub	r0, r0, #1
   11d7c:	mov	r1, #1
   11d80:	sub	r0, r0, r4
   11d84:	str	r1, [sp]
   11d88:	rsbs	r5, r0, #0
   11d8c:	mov	r0, #0
   11d90:	sbc	r6, r0, #0
   11d94:	ldr	r0, [sp, #132]	; 0x84
   11d98:	mov	r2, r5
   11d9c:	mov	r3, r6
   11da0:	bl	10f3c <lseek64@plt>
   11da4:	add	r4, r4, #1
   11da8:	cmn	r1, #1
   11dac:	bgt	11dec <__assert_fail@plt+0xd00>
   11db0:	ldr	r0, [sp, #132]	; 0x84
   11db4:	sub	r1, fp, #136	; 0x88
   11db8:	bl	1679c <__assert_fail@plt+0x56b0>
   11dbc:	cmp	r0, #0
   11dc0:	bne	11dd4 <__assert_fail@plt+0xce8>
   11dc4:	ldr	r0, [fp, #-120]	; 0xffffff88
   11dc8:	and	r0, r0, #61440	; 0xf000
   11dcc:	cmp	r0, #32768	; 0x8000
   11dd0:	bne	11dec <__assert_fail@plt+0xd00>
   11dd4:	mov	r0, #1
   11dd8:	mov	r2, r5
   11ddc:	mov	r3, r6
   11de0:	stm	sp, {r0, r7}
   11de4:	ldr	r0, [sp, #132]	; 0x84
   11de8:	bl	12e5c <__assert_fail@plt+0x1d70>
   11dec:	mov	r0, r9
   11df0:	mov	r1, r4
   11df4:	bl	12f0c <__assert_fail@plt+0x1e20>
   11df8:	b	11e58 <__assert_fail@plt+0xd6c>
   11dfc:	mov	r7, r8
   11e00:	b	11e50 <__assert_fail@plt+0xd64>
   11e04:	bl	11008 <__errno_location@plt>
   11e08:	ldr	r4, [r0]
   11e0c:	movw	r1, #28523	; 0x6f6b
   11e10:	mov	r0, #0
   11e14:	mov	r2, #5
   11e18:	str	r0, [sp, #120]	; 0x78
   11e1c:	mov	r0, #0
   11e20:	movt	r1, #1
   11e24:	bl	10ef4 <dcgettext@plt>
   11e28:	mov	r5, r0
   11e2c:	mov	r0, #4
   11e30:	mov	r1, r8
   11e34:	mov	r7, r8
   11e38:	bl	14a40 <__assert_fail@plt+0x3954>
   11e3c:	mov	r3, r0
   11e40:	mov	r0, #0
   11e44:	mov	r1, r4
   11e48:	mov	r2, r5
   11e4c:	bl	10f78 <error@plt>
   11e50:	mov	r8, sl
   11e54:	ldr	sl, [sp, #92]	; 0x5c
   11e58:	ldr	r6, [sp, #116]	; 0x74
   11e5c:	ldr	r5, [sp, #132]	; 0x84
   11e60:	b	12c38 <__assert_fail@plt+0x1b4c>
   11e64:	mov	r0, #0
   11e68:	mvn	r2, #0
   11e6c:	mvn	r1, #0
   11e70:	str	r2, [sp, #56]	; 0x38
   11e74:	cmp	r1, #0
   11e78:	mov	r2, #0
   11e7c:	movwlt	r2, #1
   11e80:	orr	r2, r0, r2
   11e84:	ldr	r0, [sp, #32]
   11e88:	ldm	r0, {r0, r4}
   11e8c:	ldr	r3, [sp, #84]	; 0x54
   11e90:	tst	r3, #1
   11e94:	beq	120f8 <__assert_fail@plt+0x100c>
   11e98:	cmp	r2, #0
   11e9c:	str	r7, [sp, #44]	; 0x2c
   11ea0:	bne	121c4 <__assert_fail@plt+0x10d8>
   11ea4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11ea8:	mov	r6, #0
   11eac:	subs	r3, r2, #536870913	; 0x20000001
   11eb0:	rscs	r3, r6, r2, asr #31
   11eb4:	mov	r3, #0
   11eb8:	movwcc	r3, #1
   11ebc:	rsbs	r7, r2, #0
   11ec0:	sbcs	r7, r6, r2, asr #31
   11ec4:	ldr	r6, [sp, #116]	; 0x74
   11ec8:	mov	r7, #0
   11ecc:	movwlt	r7, #1
   11ed0:	ands	r3, r7, r3
   11ed4:	mov	r7, #512	; 0x200
   11ed8:	asrne	r3, r2, #31
   11edc:	moveq	r2, r7
   11ee0:	ldr	r7, [sp, #44]	; 0x2c
   11ee4:	subs	r2, r2, r0
   11ee8:	sbcs	r2, r3, r4
   11eec:	bge	121c4 <__assert_fail@plt+0x10d8>
   11ef0:	ldr	r3, [sp, #56]	; 0x38
   11ef4:	mov	r2, #1
   11ef8:	str	r2, [sp, #120]	; 0x78
   11efc:	subs	r2, r3, r0
   11f00:	sbcs	r2, r1, r4
   11f04:	bge	12c38 <__assert_fail@plt+0x1b4c>
   11f08:	subs	r2, r0, r3
   11f0c:	str	r8, [sp, #40]	; 0x28
   11f10:	mov	r8, #0
   11f14:	str	sl, [sp, #92]	; 0x5c
   11f18:	str	r7, [sp, #4]
   11f1c:	str	r1, [sp, #48]	; 0x30
   11f20:	sbc	r3, r4, r1
   11f24:	str	r8, [sp]
   11f28:	asr	r3, r3, #31
   11f2c:	add	r3, r2, r3, lsr #19
   11f30:	bfc	r3, #0, #13
   11f34:	subs	r6, r2, r3
   11f38:	movweq	r6, #8192	; 0x2000
   11f3c:	subs	r9, r0, r6
   11f40:	mov	r0, r5
   11f44:	sbc	r3, r4, #0
   11f48:	mov	r2, r9
   11f4c:	str	r3, [sp, #120]	; 0x78
   11f50:	bl	12e5c <__assert_fail@plt+0x1d70>
   11f54:	cmp	r1, #0
   11f58:	blt	11a6c <__assert_fail@plt+0x980>
   11f5c:	ldr	r0, [sp, #132]	; 0x84
   11f60:	add	r1, sp, #136	; 0x88
   11f64:	mov	r2, r6
   11f68:	bl	14eb0 <__assert_fail@plt+0x3dc4>
   11f6c:	cmn	r0, #1
   11f70:	beq	120b0 <__assert_fail@plt+0xfc4>
   11f74:	ldr	r2, [sp, #128]	; 0x80
   11f78:	ldr	r3, [sp, #124]	; 0x7c
   11f7c:	mov	r6, r0
   11f80:	orrs	sl, r2, r3
   11f84:	mov	r7, r2
   11f88:	mov	r5, r3
   11f8c:	beq	11fd4 <__assert_fail@plt+0xee8>
   11f90:	cmp	r6, #0
   11f94:	mov	r7, r2
   11f98:	mov	r5, r3
   11f9c:	beq	11fd4 <__assert_fail@plt+0xee8>
   11fa0:	movw	r1, #33119	; 0x815f
   11fa4:	add	r0, sp, #136	; 0x88
   11fa8:	subs	r7, r2, #1
   11fac:	movt	r1, #2
   11fb0:	add	r0, r0, r6
   11fb4:	sbc	r5, r3, #0
   11fb8:	ldrb	r1, [r1]
   11fbc:	ldrb	r0, [r0, #-1]
   11fc0:	cmp	r1, #0
   11fc4:	movwne	r1, #10
   11fc8:	cmp	r1, r0
   11fcc:	moveq	r5, r3
   11fd0:	moveq	r7, r2
   11fd4:	movw	r0, #33119	; 0x815f
   11fd8:	movt	r0, #2
   11fdc:	ldrb	r4, [r0]
   11fe0:	cmp	r4, #0
   11fe4:	movwne	r4, #10
   11fe8:	cmp	r6, #0
   11fec:	beq	1203c <__assert_fail@plt+0xf50>
   11ff0:	cmp	sl, #0
   11ff4:	beq	1201c <__assert_fail@plt+0xf30>
   11ff8:	add	r0, sp, #136	; 0x88
   11ffc:	mov	r1, r4
   12000:	mov	r2, r6
   12004:	bl	10ffc <memrchr@plt>
   12008:	cmp	r0, #0
   1200c:	beq	1203c <__assert_fail@plt+0xf50>
   12010:	add	r1, sp, #136	; 0x88
   12014:	sub	r6, r0, r1
   12018:	b	12020 <__assert_fail@plt+0xf34>
   1201c:	sub	r6, r6, #1
   12020:	subs	r0, r7, #1
   12024:	sbc	r1, r5, #0
   12028:	orrs	r2, r7, r5
   1202c:	mov	r7, r0
   12030:	mov	r5, r1
   12034:	bne	11fe8 <__assert_fail@plt+0xefc>
   12038:	b	119bc <__assert_fail@plt+0x8d0>
   1203c:	ldr	r0, [sp, #56]	; 0x38
   12040:	ldr	r1, [sp, #48]	; 0x30
   12044:	ldr	r3, [sp, #120]	; 0x78
   12048:	eor	r0, r9, r0
   1204c:	eor	r1, r3, r1
   12050:	orrs	r0, r0, r1
   12054:	beq	11a80 <__assert_fail@plt+0x994>
   12058:	ldr	r0, [sp, #44]	; 0x2c
   1205c:	subs	r9, r9, #8192	; 0x2000
   12060:	mov	r8, #0
   12064:	sbc	r3, r3, #0
   12068:	mov	r2, r9
   1206c:	str	r8, [sp]
   12070:	str	r3, [sp, #120]	; 0x78
   12074:	str	r0, [sp, #4]
   12078:	ldr	r0, [sp, #132]	; 0x84
   1207c:	bl	12e5c <__assert_fail@plt+0x1d70>
   12080:	cmp	r1, #0
   12084:	blt	11a6c <__assert_fail@plt+0x980>
   12088:	ldr	r0, [sp, #132]	; 0x84
   1208c:	add	r1, sp, #136	; 0x88
   12090:	mov	r2, #8192	; 0x2000
   12094:	bl	14eb0 <__assert_fail@plt+0x3dc4>
   12098:	cmp	r0, #0
   1209c:	mov	r8, #1
   120a0:	beq	11a6c <__assert_fail@plt+0x980>
   120a4:	mov	r6, r0
   120a8:	cmn	r0, #1
   120ac:	bne	11fd4 <__assert_fail@plt+0xee8>
   120b0:	bl	11008 <__errno_location@plt>
   120b4:	ldr	r4, [r0]
   120b8:	movw	r1, #28523	; 0x6f6b
   120bc:	mov	r0, #0
   120c0:	mov	r2, #5
   120c4:	mov	r8, #0
   120c8:	movt	r1, #1
   120cc:	bl	10ef4 <dcgettext@plt>
   120d0:	ldr	r1, [sp, #44]	; 0x2c
   120d4:	mov	r5, r0
   120d8:	mov	r0, #4
   120dc:	bl	14a40 <__assert_fail@plt+0x3954>
   120e0:	mov	r3, r0
   120e4:	mov	r0, #0
   120e8:	mov	r1, r4
   120ec:	mov	r2, r5
   120f0:	bl	10f78 <error@plt>
   120f4:	b	11a6c <__assert_fail@plt+0x980>
   120f8:	cmp	r2, #0
   120fc:	bne	12248 <__assert_fail@plt+0x115c>
   12100:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12104:	mov	r6, #0
   12108:	mov	r5, r7
   1210c:	subs	r3, r2, #536870913	; 0x20000001
   12110:	rscs	r3, r6, r2, asr #31
   12114:	mov	r3, #0
   12118:	movwcc	r3, #1
   1211c:	rsbs	r7, r2, #0
   12120:	sbcs	r7, r6, r2, asr #31
   12124:	ldr	r6, [sp, #116]	; 0x74
   12128:	mov	r7, #0
   1212c:	movwlt	r7, #1
   12130:	ands	r3, r7, r3
   12134:	mov	r7, #512	; 0x200
   12138:	asrne	r3, r2, #31
   1213c:	moveq	r2, r7
   12140:	mov	r7, r5
   12144:	ldr	r5, [sp, #132]	; 0x84
   12148:	subs	r2, r2, r0
   1214c:	sbcs	r2, r3, r4
   12150:	bge	12248 <__assert_fail@plt+0x115c>
   12154:	ldr	r2, [sp, #56]	; 0x38
   12158:	ldr	r3, [sp, #124]	; 0x7c
   1215c:	subs	r2, r0, r2
   12160:	sbc	r0, r4, r1
   12164:	rsbs	r1, r2, #0
   12168:	ldr	r4, [sp, #128]	; 0x80
   1216c:	rscs	r1, r0, #0
   12170:	mov	r1, #0
   12174:	movwlt	r1, #1
   12178:	cmp	r1, #0
   1217c:	moveq	r0, r1
   12180:	movne	r1, r2
   12184:	mov	r2, #1
   12188:	str	r2, [sp, #120]	; 0x78
   1218c:	subs	r2, r4, r1
   12190:	sbcs	r2, r3, r0
   12194:	bcs	12c38 <__assert_fail@plt+0x1b4c>
   12198:	subs	r2, r1, r4
   1219c:	sbc	r3, r0, r3
   121a0:	mov	r0, r5
   121a4:	bl	12f90 <__assert_fail@plt+0x1ea4>
   121a8:	cmp	r0, #0
   121ac:	beq	12c38 <__assert_fail@plt+0x1b4c>
   121b0:	mov	r1, r7
   121b4:	bl	13024 <__assert_fail@plt+0x1f38>
   121b8:	mov	r0, #0
   121bc:	str	r0, [sp, #120]	; 0x78
   121c0:	b	12c38 <__assert_fail@plt+0x1b4c>
   121c4:	movw	r0, #8208	; 0x2010
   121c8:	str	r1, [sp, #48]	; 0x30
   121cc:	str	sl, [sp, #92]	; 0x5c
   121d0:	str	r8, [sp, #40]	; 0x28
   121d4:	bl	153d0 <__assert_fail@plt+0x42e4>
   121d8:	mov	r4, r0
   121dc:	mov	r2, #0
   121e0:	movw	r0, #8200	; 0x2008
   121e4:	mov	r1, #0
   121e8:	str	r2, [r4, r0]
   121ec:	movw	r0, #8196	; 0x2004
   121f0:	str	r1, [sp, #120]	; 0x78
   121f4:	str	r2, [r4, r0]
   121f8:	movw	r0, #8204	; 0x200c
   121fc:	str	r2, [r4, r0]
   12200:	movw	r0, #8208	; 0x2010
   12204:	bl	153d0 <__assert_fail@plt+0x42e4>
   12208:	mov	r1, r0
   1220c:	mov	r0, r5
   12210:	mov	r2, #8192	; 0x2000
   12214:	mov	sl, r1
   12218:	bl	14eb0 <__assert_fail@plt+0x3dc4>
   1221c:	mov	r8, r0
   12220:	add	r0, r0, #1
   12224:	str	r4, [sp, #68]	; 0x44
   12228:	cmp	r0, #2
   1222c:	bcs	123c4 <__assert_fail@plt+0x12d8>
   12230:	ldr	r0, [sp, #56]	; 0x38
   12234:	str	r4, [sp, #108]	; 0x6c
   12238:	str	r0, [sp, #64]	; 0x40
   1223c:	ldr	r0, [sp, #48]	; 0x30
   12240:	str	r0, [sp, #60]	; 0x3c
   12244:	b	127dc <__assert_fail@plt+0x16f0>
   12248:	ldr	r0, [sp, #28]
   1224c:	cmp	r0, #0
   12250:	bne	12d8c <__assert_fail@plt+0x1ca0>
   12254:	ldr	r0, [sp, #128]	; 0x80
   12258:	str	sl, [sp, #92]	; 0x5c
   1225c:	str	r8, [sp, #40]	; 0x28
   12260:	str	r1, [sp, #48]	; 0x30
   12264:	cmp	r0, #1048576	; 0x100000
   12268:	bhi	125c0 <__assert_fail@plt+0x14d4>
   1226c:	ldr	r4, [sp, #80]	; 0x50
   12270:	mov	r6, r1
   12274:	mov	r0, #2
   12278:	mov	r1, r4
   1227c:	bl	154a0 <__assert_fail@plt+0x43b4>
   12280:	mov	r8, r0
   12284:	str	r0, [sp, #136]	; 0x88
   12288:	add	r0, r0, r4
   1228c:	mov	r9, #0
   12290:	mov	sl, #1
   12294:	str	r6, [sp, #108]	; 0x6c
   12298:	str	r0, [sp, #140]	; 0x8c
   1229c:	ldr	r0, [sp, #56]	; 0x38
   122a0:	str	r8, [sp, #104]	; 0x68
   122a4:	str	r0, [sp, #112]	; 0x70
   122a8:	b	122c0 <__assert_fail@plt+0x11d4>
   122ac:	eor	r9, r9, #1
   122b0:	add	r1, sp, #136	; 0x88
   122b4:	mov	sl, #0
   122b8:	and	r0, r9, #1
   122bc:	ldr	r8, [r1, r0, lsl #2]
   122c0:	ldr	r6, [sp, #80]	; 0x50
   122c4:	mov	r0, r5
   122c8:	mov	r1, r8
   122cc:	mov	r2, r6
   122d0:	bl	131ec <__assert_fail@plt+0x2100>
   122d4:	ldr	r1, [sp, #128]	; 0x80
   122d8:	cmp	r0, r6
   122dc:	mov	r4, r0
   122e0:	mov	r0, #0
   122e4:	mov	r6, #0
   122e8:	bcs	12328 <__assert_fail@plt+0x123c>
   122ec:	mov	r5, r7
   122f0:	bl	11008 <__errno_location@plt>
   122f4:	ldr	r7, [r0]
   122f8:	cmp	r7, #0
   122fc:	bne	129bc <__assert_fail@plt+0x18d0>
   12300:	ldr	r1, [sp, #128]	; 0x80
   12304:	mov	r6, #1
   12308:	mov	r0, #0
   1230c:	cmp	r4, r1
   12310:	bhi	12320 <__assert_fail@plt+0x1234>
   12314:	sub	r0, r1, r4
   12318:	tst	sl, #1
   1231c:	movwne	r0, #0
   12320:	mov	r7, r5
   12324:	ldr	r5, [sp, #132]	; 0x84
   12328:	tst	sl, #1
   1232c:	bne	1237c <__assert_fail@plt+0x1290>
   12330:	ldr	r1, [sp, #128]	; 0x80
   12334:	mov	r5, r7
   12338:	sub	r7, r1, r0
   1233c:	mov	r0, #1
   12340:	add	r1, sp, #136	; 0x88
   12344:	bic	r0, r0, r9
   12348:	ldr	r0, [r1, r0, lsl #2]
   1234c:	mov	r1, r7
   12350:	add	r0, r0, #8192	; 0x2000
   12354:	bl	12f0c <__assert_fail@plt+0x1e20>
   12358:	ldr	r0, [sp, #112]	; 0x70
   1235c:	ldr	r1, [sp, #128]	; 0x80
   12360:	adds	r0, r0, r7
   12364:	mov	r7, r5
   12368:	ldr	r5, [sp, #132]	; 0x84
   1236c:	str	r0, [sp, #112]	; 0x70
   12370:	ldr	r0, [sp, #108]	; 0x6c
   12374:	adc	r0, r0, #0
   12378:	str	r0, [sp, #108]	; 0x6c
   1237c:	cmp	r4, r1
   12380:	bls	123ac <__assert_fail@plt+0x12c0>
   12384:	sub	r4, r4, r1
   12388:	mov	r0, r8
   1238c:	mov	r1, r4
   12390:	bl	12f0c <__assert_fail@plt+0x1e20>
   12394:	ldr	r0, [sp, #112]	; 0x70
   12398:	adds	r0, r0, r4
   1239c:	str	r0, [sp, #112]	; 0x70
   123a0:	ldr	r0, [sp, #108]	; 0x6c
   123a4:	adc	r0, r0, #0
   123a8:	str	r0, [sp, #108]	; 0x6c
   123ac:	cmp	r6, #0
   123b0:	beq	122ac <__assert_fail@plt+0x11c0>
   123b4:	ldr	r6, [sp, #116]	; 0x74
   123b8:	mov	r0, #1
   123bc:	str	r0, [sp, #120]	; 0x78
   123c0:	b	12a08 <__assert_fail@plt+0x191c>
   123c4:	ldr	r0, [sp, #124]	; 0x7c
   123c8:	ldr	r1, [sp, #128]	; 0x80
   123cc:	orrs	r0, r1, r0
   123d0:	ldr	r0, [sp, #56]	; 0x38
   123d4:	beq	12784 <__assert_fail@plt+0x1698>
   123d8:	str	r0, [sp, #64]	; 0x40
   123dc:	ldr	r0, [sp, #48]	; 0x30
   123e0:	mov	r1, #0
   123e4:	mov	r7, sl
   123e8:	str	r1, [sp, #120]	; 0x78
   123ec:	str	r0, [sp, #60]	; 0x3c
   123f0:	ldr	r0, [sp, #68]	; 0x44
   123f4:	str	r0, [sp, #108]	; 0x6c
   123f8:	mov	r0, #0
   123fc:	movw	r1, #8204	; 0x200c
   12400:	mov	r2, r7
   12404:	mov	r6, r7
   12408:	mov	r9, r7
   1240c:	str	r0, [r7, r1]
   12410:	movw	r1, #8196	; 0x2004
   12414:	str	r8, [r2, r1]!
   12418:	movw	r1, #8200	; 0x2008
   1241c:	str	r2, [sp, #112]	; 0x70
   12420:	str	r0, [r6, r1]!
   12424:	movw	r0, #33119	; 0x815f
   12428:	movt	r0, #2
   1242c:	mov	r1, r0
   12430:	ldrb	r0, [r0]
   12434:	cmp	r0, #0
   12438:	movwne	r0, #10
   1243c:	strb	r0, [r7, r8]
   12440:	mov	r0, r7
   12444:	ldrb	r7, [r1]
   12448:	str	r0, [sp, #104]	; 0x68
   1244c:	cmp	r7, #0
   12450:	movwne	r7, #10
   12454:	mov	r1, r7
   12458:	bl	10f18 <rawmemchr@plt>
   1245c:	ldr	sl, [r6]
   12460:	add	r5, r9, r8
   12464:	b	1247c <__assert_fail@plt+0x1390>
   12468:	add	sl, sl, #1
   1246c:	add	r0, r0, #1
   12470:	mov	r1, r7
   12474:	str	sl, [r6]
   12478:	bl	10f18 <rawmemchr@plt>
   1247c:	cmp	r0, r5
   12480:	bcc	12468 <__assert_fail@plt+0x137c>
   12484:	ldr	r4, [sp, #108]	; 0x6c
   12488:	ldr	r8, [sp, #112]	; 0x70
   1248c:	movw	ip, #8196	; 0x2004
   12490:	ldr	r7, [sp, #120]	; 0x78
   12494:	mov	r3, #0
   12498:	mov	r5, r4
   1249c:	ldr	r2, [r8]
   124a0:	add	r7, sl, r7
   124a4:	ldr	r0, [r5, ip]!
   124a8:	add	r1, r0, r2
   124ac:	cmp	r3, r1, lsr #13
   124b0:	bne	124fc <__assert_fail@plt+0x1410>
   124b4:	ldr	r1, [sp, #104]	; 0x68
   124b8:	add	r0, r4, r0
   124bc:	str	r7, [sp, #120]	; 0x78
   124c0:	bl	10ec4 <memcpy@plt>
   124c4:	ldr	r0, [r8]
   124c8:	ldr	r1, [r5]
   124cc:	ldr	sl, [sp, #92]	; 0x5c
   124d0:	mov	r7, r9
   124d4:	add	r9, sp, #136	; 0x88
   124d8:	add	r0, r1, r0
   124dc:	movw	r1, #8200	; 0x2008
   124e0:	str	r0, [r5]
   124e4:	mov	r0, r4
   124e8:	ldr	r1, [r0, r1]!
   124ec:	ldr	r2, [r6]
   124f0:	add	r1, r1, r2
   124f4:	str	r1, [r0]
   124f8:	b	12594 <__assert_fail@plt+0x14a8>
   124fc:	ldr	r2, [sp, #68]	; 0x44
   12500:	movw	r8, #8204	; 0x200c
   12504:	movw	r0, #8200	; 0x2008
   12508:	ldr	r1, [sp, #128]	; 0x80
   1250c:	ldr	sl, [sp, #92]	; 0x5c
   12510:	str	r9, [r4, r8]
   12514:	mov	r5, r2
   12518:	ldr	r0, [r5, r0]!
   1251c:	sub	r0, r7, r0
   12520:	subs	r0, r1, r0
   12524:	ldr	r0, [sp, #124]	; 0x7c
   12528:	sbcs	r0, r0, #0
   1252c:	bcs	1257c <__assert_fail@plt+0x1490>
   12530:	ldr	r6, [r2, ip]
   12534:	mov	r0, r2
   12538:	mov	r4, r2
   1253c:	mov	r1, r6
   12540:	bl	12f0c <__assert_fail@plt+0x1e20>
   12544:	ldr	r0, [sp, #64]	; 0x40
   12548:	ldr	r1, [r5]
   1254c:	str	r9, [sp, #108]	; 0x6c
   12550:	adds	r0, r0, r6
   12554:	sub	r7, r7, r1
   12558:	str	r0, [sp, #64]	; 0x40
   1255c:	ldr	r0, [sp, #60]	; 0x3c
   12560:	str	r7, [sp, #120]	; 0x78
   12564:	mov	r7, r4
   12568:	adc	r0, r0, #0
   1256c:	str	r0, [sp, #60]	; 0x3c
   12570:	ldr	r0, [r4, r8]
   12574:	str	r0, [sp, #68]	; 0x44
   12578:	b	12590 <__assert_fail@plt+0x14a4>
   1257c:	movw	r0, #8208	; 0x2010
   12580:	str	r7, [sp, #120]	; 0x78
   12584:	bl	153d0 <__assert_fail@plt+0x42e4>
   12588:	mov	r7, r0
   1258c:	str	r9, [sp, #108]	; 0x6c
   12590:	add	r9, sp, #136	; 0x88
   12594:	ldr	r5, [sp, #132]	; 0x84
   12598:	ldr	r6, [sp, #116]	; 0x74
   1259c:	mov	r1, r7
   125a0:	mov	r2, #8192	; 0x2000
   125a4:	mov	r0, r5
   125a8:	bl	14eb0 <__assert_fail@plt+0x3dc4>
   125ac:	mov	r8, r0
   125b0:	add	r0, r0, #1
   125b4:	cmp	r0, #1
   125b8:	bhi	123f8 <__assert_fail@plt+0x130c>
   125bc:	b	127e4 <__assert_fail@plt+0x16f8>
   125c0:	ldr	r0, [sp, #56]	; 0x38
   125c4:	str	r7, [sp, #44]	; 0x2c
   125c8:	mov	r6, #0
   125cc:	mov	r7, #1
   125d0:	mov	r8, #0
   125d4:	mov	sl, #0
   125d8:	str	r1, [sp, #108]	; 0x6c
   125dc:	str	r0, [sp, #112]	; 0x70
   125e0:	mov	r0, #0
   125e4:	str	r0, [sp, #68]	; 0x44
   125e8:	mov	r0, #0
   125ec:	str	r0, [sp, #104]	; 0x68
   125f0:	mov	r5, r7
   125f4:	cmp	r6, r8
   125f8:	bne	12638 <__assert_fail@plt+0x154c>
   125fc:	ldr	r4, [sp, #52]	; 0x34
   12600:	ldr	r1, [sp, #104]	; 0x68
   12604:	cmp	r6, #0
   12608:	beq	1261c <__assert_fail@plt+0x1530>
   1260c:	ldr	r0, [sp, #36]	; 0x24
   12610:	ldr	r4, [sp, #88]	; 0x58
   12614:	cmp	r6, r0
   12618:	lslls	r4, r6, #1
   1261c:	mov	r0, r1
   12620:	mov	r1, r4
   12624:	mov	r2, #4
   12628:	bl	15394 <__assert_fail@plt+0x42a8>
   1262c:	mov	r7, r0
   12630:	mov	r6, r4
   12634:	b	1263c <__assert_fail@plt+0x1550>
   12638:	ldr	r7, [sp, #104]	; 0x68
   1263c:	tst	sl, #1
   12640:	str	r7, [sp, #104]	; 0x68
   12644:	beq	12650 <__assert_fail@plt+0x1564>
   12648:	ldr	r1, [r7, r8, lsl #2]
   1264c:	b	12668 <__assert_fail@plt+0x157c>
   12650:	mov	r0, #8192	; 0x2000
   12654:	bl	153d0 <__assert_fail@plt+0x42e4>
   12658:	mov	r1, r0
   1265c:	str	r0, [r7, r8, lsl #2]
   12660:	add	r0, r8, #1
   12664:	str	r0, [sp, #68]	; 0x44
   12668:	ldr	r0, [sp, #132]	; 0x84
   1266c:	mov	r2, #8192	; 0x2000
   12670:	bl	131ec <__assert_fail@plt+0x2100>
   12674:	mov	r9, #0
   12678:	mov	r4, r0
   1267c:	cmp	r9, r0, lsr #13
   12680:	bne	12698 <__assert_fail@plt+0x15ac>
   12684:	bl	11008 <__errno_location@plt>
   12688:	ldr	r7, [r0]
   1268c:	mov	r9, #1
   12690:	cmp	r7, #0
   12694:	bne	12a20 <__assert_fail@plt+0x1934>
   12698:	ldr	r0, [sp, #76]	; 0x4c
   1269c:	sub	r0, r8, r0
   126a0:	clz	r0, r0
   126a4:	lsr	r0, r0, #5
   126a8:	orr	sl, sl, r0
   126ac:	tst	sl, #1
   126b0:	beq	126dc <__assert_fail@plt+0x15f0>
   126b4:	ldr	r0, [sp, #104]	; 0x68
   126b8:	mov	r1, r4
   126bc:	ldr	r0, [r0, r5, lsl #2]
   126c0:	bl	12f0c <__assert_fail@plt+0x1e20>
   126c4:	ldr	r0, [sp, #112]	; 0x70
   126c8:	adds	r0, r0, r4
   126cc:	str	r0, [sp, #112]	; 0x70
   126d0:	ldr	r0, [sp, #108]	; 0x6c
   126d4:	adc	r0, r0, #0
   126d8:	str	r0, [sp, #108]	; 0x6c
   126dc:	ldr	r2, [sp, #88]	; 0x58
   126e0:	add	r0, r5, #1
   126e4:	cmp	r9, #0
   126e8:	mov	r8, r5
   126ec:	add	r9, sp, #136	; 0x88
   126f0:	udiv	r1, r0, r2
   126f4:	mls	r7, r1, r2, r0
   126f8:	ldr	r2, [sp, #124]	; 0x7c
   126fc:	ldr	r1, [sp, #72]	; 0x48
   12700:	beq	125f0 <__assert_fail@plt+0x1504>
   12704:	mov	r0, #1
   12708:	cmp	r1, #0
   1270c:	str	r0, [sp, #120]	; 0x78
   12710:	beq	12a68 <__assert_fail@plt+0x197c>
   12714:	tst	sl, #1
   12718:	beq	12b30 <__assert_fail@plt+0x1a44>
   1271c:	ldr	r0, [sp, #112]	; 0x70
   12720:	str	r2, [sp, #124]	; 0x7c
   12724:	ldr	r2, [sp, #104]	; 0x68
   12728:	ldr	r8, [sp, #40]	; 0x28
   1272c:	ldr	sl, [sp, #92]	; 0x5c
   12730:	adds	r0, r0, r1
   12734:	str	r0, [sp, #112]	; 0x70
   12738:	ldr	r0, [sp, #108]	; 0x6c
   1273c:	adc	r0, r0, #0
   12740:	str	r0, [sp, #108]	; 0x6c
   12744:	ldr	r0, [r2, r5, lsl #2]
   12748:	mov	r5, r2
   1274c:	add	r0, r0, r4
   12750:	rsb	r4, r4, #8192	; 0x2000
   12754:	cmp	r1, r4
   12758:	bcc	12770 <__assert_fail@plt+0x1684>
   1275c:	mov	r6, r1
   12760:	mov	r1, r4
   12764:	bl	12f0c <__assert_fail@plt+0x1e20>
   12768:	ldr	r0, [r5, r7, lsl #2]
   1276c:	sub	r1, r6, r4
   12770:	bl	12f0c <__assert_fail@plt+0x1e20>
   12774:	ldr	r6, [sp, #116]	; 0x74
   12778:	ldr	r2, [sp, #124]	; 0x7c
   1277c:	mov	r7, r5
   12780:	b	12a78 <__assert_fail@plt+0x198c>
   12784:	ldr	r6, [sp, #48]	; 0x30
   12788:	mov	r7, r8
   1278c:	mov	r4, r0
   12790:	mov	r0, sl
   12794:	mov	r1, r7
   12798:	bl	12f0c <__assert_fail@plt+0x1e20>
   1279c:	mov	r0, r5
   127a0:	mov	r1, sl
   127a4:	mov	r2, #8192	; 0x2000
   127a8:	bl	14eb0 <__assert_fail@plt+0x3dc4>
   127ac:	mov	r8, r0
   127b0:	adds	r4, r4, r7
   127b4:	add	r0, r0, #1
   127b8:	adc	r6, r6, #0
   127bc:	cmp	r0, #2
   127c0:	mov	r7, r8
   127c4:	bcs	12790 <__assert_fail@plt+0x16a4>
   127c8:	str	r6, [sp, #60]	; 0x3c
   127cc:	ldr	r0, [sp, #68]	; 0x44
   127d0:	ldr	r6, [sp, #116]	; 0x74
   127d4:	str	r4, [sp, #64]	; 0x40
   127d8:	str	r0, [sp, #108]	; 0x6c
   127dc:	mov	r7, sl
   127e0:	ldr	sl, [sp, #92]	; 0x5c
   127e4:	mov	r0, r7
   127e8:	bl	131c4 <__assert_fail@plt+0x20d8>
   127ec:	cmn	r8, #1
   127f0:	beq	12850 <__assert_fail@plt+0x1764>
   127f4:	ldr	r4, [sp, #108]	; 0x6c
   127f8:	movw	ip, #8196	; 0x2004
   127fc:	ldr	r0, [r4, ip]
   12800:	cmp	r0, #0
   12804:	beq	128a4 <__assert_fail@plt+0x17b8>
   12808:	movw	r1, #33119	; 0x815f
   1280c:	add	r0, r4, r0
   12810:	ldr	r9, [sp, #120]	; 0x78
   12814:	ldr	lr, [sp, #124]	; 0x7c
   12818:	ldr	r6, [sp, #68]	; 0x44
   1281c:	ldr	r2, [sp, #60]	; 0x3c
   12820:	movt	r1, #2
   12824:	ldrb	r0, [r0, #-1]
   12828:	ldrb	r1, [r1]
   1282c:	cmp	r1, #0
   12830:	movwne	r1, #10
   12834:	cmp	r1, r0
   12838:	movw	r1, #8200	; 0x2008
   1283c:	ldrne	r0, [r4, r1]!
   12840:	addne	r9, r9, #1
   12844:	addne	r0, r0, #1
   12848:	strne	r0, [r4]
   1284c:	b	128b8 <__assert_fail@plt+0x17cc>
   12850:	bl	11008 <__errno_location@plt>
   12854:	ldr	r4, [r0]
   12858:	movw	r1, #28523	; 0x6f6b
   1285c:	mov	r0, #0
   12860:	mov	r2, #5
   12864:	str	r0, [sp, #120]	; 0x78
   12868:	mov	r0, #0
   1286c:	movt	r1, #1
   12870:	bl	10ef4 <dcgettext@plt>
   12874:	ldr	r1, [sp, #44]	; 0x2c
   12878:	mov	r7, r0
   1287c:	mov	r0, #4
   12880:	bl	14a40 <__assert_fail@plt+0x3954>
   12884:	mov	r3, r0
   12888:	mov	r0, #0
   1288c:	mov	r1, r4
   12890:	mov	r2, r7
   12894:	bl	10f78 <error@plt>
   12898:	ldr	r8, [sp, #40]	; 0x28
   1289c:	movw	r7, #8204	; 0x200c
   128a0:	b	12bc8 <__assert_fail@plt+0x1adc>
   128a4:	ldr	lr, [sp, #124]	; 0x7c
   128a8:	ldr	r6, [sp, #68]	; 0x44
   128ac:	ldr	r2, [sp, #60]	; 0x3c
   128b0:	ldr	r9, [sp, #120]	; 0x78
   128b4:	movw	r1, #8200	; 0x2008
   128b8:	mov	r5, r6
   128bc:	ldr	r7, [sp, #128]	; 0x80
   128c0:	ldr	r0, [r5, r1]!
   128c4:	sub	r1, r9, r0
   128c8:	subs	r1, r7, r1
   128cc:	sbcs	r1, lr, #0
   128d0:	bcs	12938 <__assert_fail@plt+0x184c>
   128d4:	ldr	r8, [sp, #64]	; 0x40
   128d8:	ldr	r7, [r6, ip]
   128dc:	mov	r0, r6
   128e0:	mov	r4, r2
   128e4:	mov	r1, r7
   128e8:	bl	12f0c <__assert_fail@plt+0x1e20>
   128ec:	movw	r0, #8204	; 0x200c
   128f0:	ldr	r1, [r5]
   128f4:	mov	r2, r4
   128f8:	adds	r8, r8, r7
   128fc:	ldr	r7, [sp, #128]	; 0x80
   12900:	ldr	lr, [sp, #124]	; 0x7c
   12904:	movw	ip, #8196	; 0x2004
   12908:	ldr	r6, [r6, r0]
   1290c:	movw	r0, #8200	; 0x2008
   12910:	adc	r2, r2, #0
   12914:	sub	r9, r9, r1
   12918:	mov	r4, r6
   1291c:	ldr	r0, [r4, r0]!
   12920:	sub	r1, r9, r0
   12924:	mov	r5, r4
   12928:	subs	r1, r7, r1
   1292c:	sbcs	r1, lr, #0
   12930:	bcc	128d8 <__assert_fail@plt+0x17ec>
   12934:	b	12944 <__assert_fail@plt+0x1858>
   12938:	ldr	r7, [sp, #128]	; 0x80
   1293c:	ldr	r8, [sp, #64]	; 0x40
   12940:	mov	r4, r5
   12944:	mov	r1, #1
   12948:	str	r8, [sp, #64]	; 0x40
   1294c:	str	r2, [sp, #60]	; 0x3c
   12950:	str	r1, [sp, #120]	; 0x78
   12954:	subs	r1, r7, r9
   12958:	sbcs	r1, lr, #0
   1295c:	bcs	12bb4 <__assert_fail@plt+0x1ac8>
   12960:	subs	r1, r9, r7
   12964:	beq	12adc <__assert_fail@plt+0x19f0>
   12968:	sub	r5, r7, r9
   1296c:	add	r7, r0, #1
   12970:	movw	r0, #33119	; 0x815f
   12974:	ldr	r1, [r6, ip]
   12978:	movt	r0, #2
   1297c:	ldrb	r9, [r0]
   12980:	mov	r0, r6
   12984:	add	r8, r6, r1
   12988:	cmp	r9, #0
   1298c:	movwne	r9, #10
   12990:	sub	r2, r8, r0
   12994:	mov	r1, r9
   12998:	bl	1105c <memchr@plt>
   1299c:	cmp	r0, #0
   129a0:	beq	12b88 <__assert_fail@plt+0x1a9c>
   129a4:	str	r7, [r4]
   129a8:	adds	r5, r5, #1
   129ac:	add	r7, r7, #1
   129b0:	add	r0, r0, #1
   129b4:	bne	12990 <__assert_fail@plt+0x18a4>
   129b8:	b	12b8c <__assert_fail@plt+0x1aa0>
   129bc:	movw	r1, #28523	; 0x6f6b
   129c0:	mov	r0, #0
   129c4:	mov	r2, #5
   129c8:	str	r0, [sp, #120]	; 0x78
   129cc:	mov	r0, #0
   129d0:	movt	r1, #1
   129d4:	bl	10ef4 <dcgettext@plt>
   129d8:	mov	r4, r0
   129dc:	mov	r0, #4
   129e0:	mov	r1, r5
   129e4:	bl	14a40 <__assert_fail@plt+0x3954>
   129e8:	mov	r3, r0
   129ec:	mov	r1, r7
   129f0:	mov	r0, #0
   129f4:	mov	r2, r4
   129f8:	mov	r7, r5
   129fc:	bl	10f78 <error@plt>
   12a00:	ldr	r6, [sp, #116]	; 0x74
   12a04:	ldr	r5, [sp, #132]	; 0x84
   12a08:	ldr	r0, [sp, #104]	; 0x68
   12a0c:	bl	131c4 <__assert_fail@plt+0x20d8>
   12a10:	ldr	r8, [sp, #40]	; 0x28
   12a14:	ldr	sl, [sp, #92]	; 0x5c
   12a18:	add	r9, sp, #136	; 0x88
   12a1c:	b	12aac <__assert_fail@plt+0x19c0>
   12a20:	movw	r1, #28523	; 0x6f6b
   12a24:	mov	r0, #0
   12a28:	mov	r2, #5
   12a2c:	str	r0, [sp, #120]	; 0x78
   12a30:	mov	r0, #0
   12a34:	movt	r1, #1
   12a38:	bl	10ef4 <dcgettext@plt>
   12a3c:	ldr	r1, [sp, #44]	; 0x2c
   12a40:	mov	r4, r0
   12a44:	mov	r0, #4
   12a48:	bl	14a40 <__assert_fail@plt+0x3954>
   12a4c:	mov	r3, r0
   12a50:	mov	r0, #0
   12a54:	mov	r1, r7
   12a58:	mov	r2, r4
   12a5c:	bl	10f78 <error@plt>
   12a60:	ldr	r2, [sp, #124]	; 0x7c
   12a64:	add	r9, sp, #136	; 0x88
   12a68:	ldr	r8, [sp, #40]	; 0x28
   12a6c:	ldr	sl, [sp, #92]	; 0x5c
   12a70:	ldr	r6, [sp, #116]	; 0x74
   12a74:	ldr	r7, [sp, #104]	; 0x68
   12a78:	ldr	r5, [sp, #68]	; 0x44
   12a7c:	str	r2, [sp, #124]	; 0x7c
   12a80:	cmp	r5, #0
   12a84:	beq	12a9c <__assert_fail@plt+0x19b0>
   12a88:	mov	r4, r7
   12a8c:	ldr	r0, [r4], #4
   12a90:	bl	131c4 <__assert_fail@plt+0x20d8>
   12a94:	subs	r5, r5, #1
   12a98:	bne	12a8c <__assert_fail@plt+0x19a0>
   12a9c:	mov	r0, r7
   12aa0:	bl	131c4 <__assert_fail@plt+0x20d8>
   12aa4:	ldr	r7, [sp, #44]	; 0x2c
   12aa8:	ldr	r5, [sp, #132]	; 0x84
   12aac:	ldr	r0, [sp, #56]	; 0x38
   12ab0:	mvn	r4, #0
   12ab4:	subs	r0, r4, r0
   12ab8:	ldr	r0, [sp, #48]	; 0x30
   12abc:	sbcs	r0, r4, r0
   12ac0:	bge	12c38 <__assert_fail@plt+0x1b4c>
   12ac4:	mov	r0, #0
   12ac8:	stm	sp, {r0, r7}
   12acc:	mov	r0, r5
   12ad0:	ldr	r2, [sp, #112]	; 0x70
   12ad4:	ldr	r3, [sp, #108]	; 0x6c
   12ad8:	b	12c18 <__assert_fail@plt+0x1b2c>
   12adc:	mov	r0, r6
   12ae0:	b	12b8c <__assert_fail@plt+0x1aa0>
   12ae4:	bl	11008 <__errno_location@plt>
   12ae8:	ldr	r4, [r0]
   12aec:	movw	r1, #28523	; 0x6f6b
   12af0:	mov	r0, #0
   12af4:	mov	r2, #5
   12af8:	str	r0, [sp, #120]	; 0x78
   12afc:	mov	r0, #0
   12b00:	movt	r1, #1
   12b04:	bl	10ef4 <dcgettext@plt>
   12b08:	mov	r5, r0
   12b0c:	mov	r0, #4
   12b10:	mov	r1, r7
   12b14:	bl	14a40 <__assert_fail@plt+0x3954>
   12b18:	mov	r3, r0
   12b1c:	mov	r0, #0
   12b20:	mov	r1, r4
   12b24:	mov	r2, r5
   12b28:	bl	10f78 <error@plt>
   12b2c:	b	11e58 <__assert_fail@plt+0xd6c>
   12b30:	ldr	r0, [sp, #76]	; 0x4c
   12b34:	ldr	r8, [sp, #40]	; 0x28
   12b38:	ldr	sl, [sp, #92]	; 0x5c
   12b3c:	cmp	r5, r0
   12b40:	bne	12a70 <__assert_fail@plt+0x1984>
   12b44:	ldr	r1, [sp, #104]	; 0x68
   12b48:	mov	r6, r2
   12b4c:	ldr	r0, [r1, r7, lsl #2]
   12b50:	mov	r7, r1
   12b54:	ldr	r1, [sp, #24]
   12b58:	sub	r4, r4, r1
   12b5c:	mov	r1, r4
   12b60:	bl	12f0c <__assert_fail@plt+0x1e20>
   12b64:	ldr	r0, [sp, #112]	; 0x70
   12b68:	mov	r2, r6
   12b6c:	ldr	r6, [sp, #116]	; 0x74
   12b70:	adds	r0, r0, r4
   12b74:	str	r0, [sp, #112]	; 0x70
   12b78:	ldr	r0, [sp, #108]	; 0x6c
   12b7c:	adc	r0, r0, #0
   12b80:	str	r0, [sp, #108]	; 0x6c
   12b84:	b	12a78 <__assert_fail@plt+0x198c>
   12b88:	mov	r0, #0
   12b8c:	sub	r7, r0, r6
   12b90:	mov	r0, r6
   12b94:	mov	r1, r7
   12b98:	bl	12f0c <__assert_fail@plt+0x1e20>
   12b9c:	ldr	r0, [sp, #64]	; 0x40
   12ba0:	adds	r0, r0, r7
   12ba4:	str	r0, [sp, #64]	; 0x40
   12ba8:	ldr	r0, [sp, #60]	; 0x3c
   12bac:	adc	r0, r0, r7, asr #31
   12bb0:	str	r0, [sp, #60]	; 0x3c
   12bb4:	ldr	r8, [sp, #40]	; 0x28
   12bb8:	ldr	r6, [sp, #116]	; 0x74
   12bbc:	ldr	r5, [sp, #132]	; 0x84
   12bc0:	movw	r7, #8204	; 0x200c
   12bc4:	add	r9, sp, #136	; 0x88
   12bc8:	ldr	r0, [sp, #68]	; 0x44
   12bcc:	cmp	r0, #0
   12bd0:	beq	12be8 <__assert_fail@plt+0x1afc>
   12bd4:	ldr	r4, [r0, r7]
   12bd8:	bl	131c4 <__assert_fail@plt+0x20d8>
   12bdc:	cmp	r4, #0
   12be0:	mov	r0, r4
   12be4:	bne	12bd4 <__assert_fail@plt+0x1ae8>
   12be8:	ldr	r0, [sp, #56]	; 0x38
   12bec:	mvn	r4, #0
   12bf0:	ldr	r7, [sp, #44]	; 0x2c
   12bf4:	subs	r0, r4, r0
   12bf8:	ldr	r0, [sp, #48]	; 0x30
   12bfc:	sbcs	r0, r4, r0
   12c00:	bge	12c38 <__assert_fail@plt+0x1b4c>
   12c04:	mov	r0, #0
   12c08:	stm	sp, {r0, r7}
   12c0c:	mov	r0, r5
   12c10:	ldr	r2, [sp, #64]	; 0x40
   12c14:	ldr	r3, [sp, #60]	; 0x3c
   12c18:	bl	12e5c <__assert_fail@plt+0x1d70>
   12c1c:	subs	r0, r4, r0
   12c20:	sbcs	r0, r4, r1
   12c24:	ldr	r1, [sp, #120]	; 0x78
   12c28:	mov	r0, #0
   12c2c:	movwlt	r0, #1
   12c30:	and	r1, r1, r0
   12c34:	str	r1, [sp, #120]	; 0x78
   12c38:	cmp	r6, #0
   12c3c:	beq	12c9c <__assert_fail@plt+0x1bb0>
   12c40:	mov	r0, r5
   12c44:	bl	110e0 <close@plt>
   12c48:	ldr	r6, [sp, #120]	; 0x78
   12c4c:	cmp	r0, #0
   12c50:	beq	12ca0 <__assert_fail@plt+0x1bb4>
   12c54:	bl	11008 <__errno_location@plt>
   12c58:	ldr	r4, [r0]
   12c5c:	movw	r1, #28407	; 0x6ef7
   12c60:	mov	r6, #0
   12c64:	mov	r0, #0
   12c68:	movt	r1, #1
   12c6c:	mov	r2, #5
   12c70:	bl	10ef4 <dcgettext@plt>
   12c74:	mov	r5, r0
   12c78:	mov	r0, #4
   12c7c:	mov	r1, r7
   12c80:	bl	14a40 <__assert_fail@plt+0x3954>
   12c84:	mov	r3, r0
   12c88:	mov	r0, #0
   12c8c:	mov	r1, r4
   12c90:	mov	r2, r5
   12c94:	bl	10f78 <error@plt>
   12c98:	b	12ca0 <__assert_fail@plt+0x1bb4>
   12c9c:	ldr	r6, [sp, #120]	; 0x78
   12ca0:	ldr	r0, [sp, #100]	; 0x64
   12ca4:	add	sl, sl, #1
   12ca8:	and	r8, r8, r6
   12cac:	ldr	r7, [r0, sl, lsl #2]
   12cb0:	cmp	r7, #0
   12cb4:	bne	11a88 <__assert_fail@plt+0x99c>
   12cb8:	eor	r6, r8, #1
   12cbc:	movw	r0, #33117	; 0x815d
   12cc0:	movt	r0, #2
   12cc4:	ldrb	r0, [r0]
   12cc8:	cmp	r0, #1
   12ccc:	bne	12ce0 <__assert_fail@plt+0x1bf4>
   12cd0:	mov	r0, #0
   12cd4:	bl	110e0 <close@plt>
   12cd8:	cmn	r0, #1
   12cdc:	ble	12e44 <__assert_fail@plt+0x1d58>
   12ce0:	mov	r0, r6
   12ce4:	sub	sp, fp, #28
   12ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cec:	cmn	r6, #3
   12cf0:	bne	12d48 <__assert_fail@plt+0x1c5c>
   12cf4:	movw	r0, #33016	; 0x80f8
   12cf8:	movw	r2, #27772	; 0x6c7c
   12cfc:	mov	r1, #0
   12d00:	movw	r7, #27756	; 0x6c6c
   12d04:	movt	r0, #2
   12d08:	movt	r2, #1
   12d0c:	str	r1, [sp, #8]
   12d10:	movw	r1, #27665	; 0x6c11
   12d14:	movt	r7, #1
   12d18:	ldr	r3, [r0]
   12d1c:	movw	r0, #33108	; 0x8154
   12d20:	str	r2, [sp, #4]
   12d24:	movw	r2, #27742	; 0x6c5e
   12d28:	movt	r1, #1
   12d2c:	str	r7, [sp]
   12d30:	movt	r0, #2
   12d34:	movt	r2, #1
   12d38:	ldr	r0, [r0]
   12d3c:	bl	152c8 <__assert_fail@plt+0x41dc>
   12d40:	mov	r0, #0
   12d44:	bl	10fd8 <exit@plt>
   12d48:	cmn	r6, #2
   12d4c:	bne	12d58 <__assert_fail@plt+0x1c6c>
   12d50:	mov	r0, #0
   12d54:	bl	111e8 <__assert_fail@plt+0xfc>
   12d58:	sub	r0, r6, #48	; 0x30
   12d5c:	cmp	r0, #9
   12d60:	bhi	12e3c <__assert_fail@plt+0x1d50>
   12d64:	movw	r1, #27694	; 0x6c2e
   12d68:	mov	r0, #0
   12d6c:	mov	r2, #5
   12d70:	movt	r1, #1
   12d74:	bl	10ef4 <dcgettext@plt>
   12d78:	mov	r2, r0
   12d7c:	mov	r0, #0
   12d80:	mov	r1, #0
   12d84:	mov	r3, r6
   12d88:	b	12e38 <__assert_fail@plt+0x1d4c>
   12d8c:	movw	r1, #28602	; 0x6fba
   12d90:	mov	r0, #0
   12d94:	mov	r2, #5
   12d98:	movt	r1, #1
   12d9c:	bl	10ef4 <dcgettext@plt>
   12da0:	mov	r4, r0
   12da4:	ldr	r0, [sp, #128]	; 0x80
   12da8:	ldr	r1, [sp, #124]	; 0x7c
   12dac:	add	r2, sp, #136	; 0x88
   12db0:	bl	13318 <__assert_fail@plt+0x222c>
   12db4:	mov	r3, r0
   12db8:	mov	r0, #1
   12dbc:	mov	r1, #0
   12dc0:	mov	r2, r4
   12dc4:	bl	10f78 <error@plt>
   12dc8:	movw	r1, #27792	; 0x6c90
   12dcc:	mov	r0, #0
   12dd0:	mov	r2, #5
   12dd4:	mov	r5, r3
   12dd8:	movt	r1, #1
   12ddc:	bl	10ef4 <dcgettext@plt>
   12de0:	ldr	r1, [sp, #124]	; 0x7c
   12de4:	mov	r4, r0
   12de8:	add	r2, sp, #136	; 0x88
   12dec:	mov	r0, r5
   12df0:	bl	13318 <__assert_fail@plt+0x222c>
   12df4:	bl	14d78 <__assert_fail@plt+0x3c8c>
   12df8:	movw	r2, #27785	; 0x6c89
   12dfc:	str	r0, [sp]
   12e00:	mov	r0, #1
   12e04:	mov	r1, #75	; 0x4b
   12e08:	mov	r3, r4
   12e0c:	movt	r2, #1
   12e10:	bl	10f78 <error@plt>
   12e14:	movw	r1, #27694	; 0x6c2e
   12e18:	mov	r0, #0
   12e1c:	mov	r2, #5
   12e20:	movt	r1, #1
   12e24:	bl	10ef4 <dcgettext@plt>
   12e28:	ldrb	r3, [sl]
   12e2c:	mov	r2, r0
   12e30:	mov	r0, #0
   12e34:	mov	r1, #0
   12e38:	bl	10f78 <error@plt>
   12e3c:	mov	r0, #1
   12e40:	bl	111e8 <__assert_fail@plt+0xfc>
   12e44:	bl	11008 <__errno_location@plt>
   12e48:	ldr	r1, [r0]
   12e4c:	movw	r2, #28957	; 0x711d
   12e50:	mov	r0, #1
   12e54:	movt	r2, #1
   12e58:	bl	10f78 <error@plt>
   12e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e60:	add	fp, sp, #28
   12e64:	sub	sp, sp, #28
   12e68:	ldr	r8, [fp, #8]
   12e6c:	mov	r6, r3
   12e70:	mov	r7, r2
   12e74:	str	r8, [sp]
   12e78:	bl	10f3c <lseek64@plt>
   12e7c:	mov	r9, r0
   12e80:	mov	r5, r1
   12e84:	cmn	r1, #1
   12e88:	bgt	12efc <__assert_fail@plt+0x1e10>
   12e8c:	movw	r0, #28456	; 0x6f28
   12e90:	movw	r4, #28485	; 0x6f45
   12e94:	cmp	r8, #0
   12e98:	movt	r0, #1
   12e9c:	movt	r4, #1
   12ea0:	moveq	r4, r0
   12ea4:	bl	11008 <__errno_location@plt>
   12ea8:	ldr	sl, [r0]
   12eac:	mov	r0, #0
   12eb0:	mov	r1, r4
   12eb4:	mov	r2, #5
   12eb8:	bl	10ef4 <dcgettext@plt>
   12ebc:	ldr	r2, [fp, #12]
   12ec0:	mov	r8, r0
   12ec4:	mov	r0, #0
   12ec8:	mov	r1, #3
   12ecc:	bl	14be4 <__assert_fail@plt+0x3af8>
   12ed0:	mov	r4, r0
   12ed4:	add	r2, sp, #7
   12ed8:	mov	r0, r7
   12edc:	mov	r1, r6
   12ee0:	bl	1325c <__assert_fail@plt+0x2170>
   12ee4:	str	r0, [sp]
   12ee8:	mov	r0, #0
   12eec:	mov	r1, sl
   12ef0:	mov	r2, r8
   12ef4:	mov	r3, r4
   12ef8:	bl	10f78 <error@plt>
   12efc:	mov	r0, r9
   12f00:	mov	r1, r5
   12f04:	sub	sp, fp, #28
   12f08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f0c:	push	{r4, r5, fp, lr}
   12f10:	add	fp, sp, #8
   12f14:	cmp	r1, #0
   12f18:	popeq	{r4, r5, fp, pc}
   12f1c:	movw	r5, #33108	; 0x8154
   12f20:	mov	r4, r1
   12f24:	mov	r1, #1
   12f28:	movt	r5, #2
   12f2c:	mov	r2, r4
   12f30:	ldr	r3, [r5]
   12f34:	bl	10edc <fwrite_unlocked@plt>
   12f38:	cmp	r0, r4
   12f3c:	bcc	12f44 <__assert_fail@plt+0x1e58>
   12f40:	pop	{r4, r5, fp, pc}
   12f44:	ldr	r0, [r5]
   12f48:	bl	110a4 <clearerr_unlocked@plt>
   12f4c:	bl	11008 <__errno_location@plt>
   12f50:	ldr	r4, [r0]
   12f54:	movw	r1, #28540	; 0x6f7c
   12f58:	mov	r0, #0
   12f5c:	mov	r2, #5
   12f60:	movt	r1, #1
   12f64:	bl	10ef4 <dcgettext@plt>
   12f68:	movw	r1, #28557	; 0x6f8d
   12f6c:	mov	r5, r0
   12f70:	mov	r0, #4
   12f74:	movt	r1, #1
   12f78:	bl	14a40 <__assert_fail@plt+0x3954>
   12f7c:	mov	r3, r0
   12f80:	mov	r0, #1
   12f84:	mov	r1, r4
   12f88:	mov	r2, r5
   12f8c:	bl	10f78 <error@plt>
   12f90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f94:	add	fp, sp, #24
   12f98:	sub	sp, sp, #8192	; 0x2000
   12f9c:	mov	r7, r0
   12fa0:	orrs	r0, r2, r3
   12fa4:	mov	r8, #0
   12fa8:	beq	13018 <__assert_fail@plt+0x1f2c>
   12fac:	mov	r5, r3
   12fb0:	mov	r6, r2
   12fb4:	mov	r4, sp
   12fb8:	subs	r0, r6, #8192	; 0x2000
   12fbc:	mov	r2, r6
   12fc0:	mov	r1, r4
   12fc4:	sbcs	r0, r5, #0
   12fc8:	movcs	r2, #8192	; 0x2000
   12fcc:	mov	r0, r7
   12fd0:	bl	14eb0 <__assert_fail@plt+0x3dc4>
   12fd4:	cmn	r0, #1
   12fd8:	beq	1300c <__assert_fail@plt+0x1f20>
   12fdc:	subs	r6, r6, r0
   12fe0:	mov	r1, r0
   12fe4:	sbc	r5, r5, #0
   12fe8:	cmp	r0, #0
   12fec:	bne	12ff8 <__assert_fail@plt+0x1f0c>
   12ff0:	orrs	r0, r6, r5
   12ff4:	bne	13014 <__assert_fail@plt+0x1f28>
   12ff8:	mov	r0, r4
   12ffc:	bl	12f0c <__assert_fail@plt+0x1e20>
   13000:	orrs	r0, r6, r5
   13004:	bne	12fb8 <__assert_fail@plt+0x1ecc>
   13008:	b	13018 <__assert_fail@plt+0x1f2c>
   1300c:	mov	r8, #1
   13010:	b	13018 <__assert_fail@plt+0x1f2c>
   13014:	mov	r8, #2
   13018:	mov	r0, r8
   1301c:	sub	sp, fp, #24
   13020:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13024:	push	{r4, r5, r6, sl, fp, lr}
   13028:	add	fp, sp, #16
   1302c:	mov	r4, r1
   13030:	cmp	r0, #2
   13034:	beq	13070 <__assert_fail@plt+0x1f84>
   13038:	cmp	r0, #1
   1303c:	bne	130b8 <__assert_fail@plt+0x1fcc>
   13040:	bl	11008 <__errno_location@plt>
   13044:	ldr	r5, [r0]
   13048:	movw	r1, #28523	; 0x6f6b
   1304c:	mov	r0, #0
   13050:	mov	r2, #5
   13054:	movt	r1, #1
   13058:	bl	10ef4 <dcgettext@plt>
   1305c:	mov	r6, r0
   13060:	mov	r0, #4
   13064:	mov	r1, r4
   13068:	bl	14a40 <__assert_fail@plt+0x3954>
   1306c:	b	130a0 <__assert_fail@plt+0x1fb4>
   13070:	bl	11008 <__errno_location@plt>
   13074:	ldr	r5, [r0]
   13078:	movw	r1, #28573	; 0x6f9d
   1307c:	mov	r0, #0
   13080:	mov	r2, #5
   13084:	movt	r1, #1
   13088:	bl	10ef4 <dcgettext@plt>
   1308c:	mov	r6, r0
   13090:	mov	r0, #0
   13094:	mov	r1, #3
   13098:	mov	r2, r4
   1309c:	bl	14be4 <__assert_fail@plt+0x3af8>
   130a0:	mov	r3, r0
   130a4:	mov	r0, #0
   130a8:	mov	r1, r5
   130ac:	mov	r2, r6
   130b0:	pop	{r4, r5, r6, sl, fp, lr}
   130b4:	b	10f78 <error@plt>
   130b8:	bl	110d4 <abort@plt>
   130bc:	movw	r1, #33124	; 0x8164
   130c0:	movt	r1, #2
   130c4:	str	r0, [r1]
   130c8:	bx	lr
   130cc:	movw	r1, #33128	; 0x8168
   130d0:	movt	r1, #2
   130d4:	strb	r0, [r1]
   130d8:	bx	lr
   130dc:	push	{r4, r5, r6, sl, fp, lr}
   130e0:	add	fp, sp, #16
   130e4:	sub	sp, sp, #8
   130e8:	movw	r0, #33108	; 0x8154
   130ec:	movt	r0, #2
   130f0:	ldr	r0, [r0]
   130f4:	bl	160f0 <__assert_fail@plt+0x5004>
   130f8:	cmp	r0, #0
   130fc:	beq	13124 <__assert_fail@plt+0x2038>
   13100:	movw	r0, #33128	; 0x8168
   13104:	movt	r0, #2
   13108:	ldrb	r0, [r0]
   1310c:	cmp	r0, #0
   13110:	beq	13144 <__assert_fail@plt+0x2058>
   13114:	bl	11008 <__errno_location@plt>
   13118:	ldr	r0, [r0]
   1311c:	cmp	r0, #32
   13120:	bne	13144 <__assert_fail@plt+0x2058>
   13124:	movw	r0, #33104	; 0x8150
   13128:	movt	r0, #2
   1312c:	ldr	r0, [r0]
   13130:	bl	160f0 <__assert_fail@plt+0x5004>
   13134:	cmp	r0, #0
   13138:	subeq	sp, fp, #16
   1313c:	popeq	{r4, r5, r6, sl, fp, pc}
   13140:	b	131b4 <__assert_fail@plt+0x20c8>
   13144:	movw	r1, #28879	; 0x70cf
   13148:	mov	r0, #0
   1314c:	mov	r2, #5
   13150:	movt	r1, #1
   13154:	bl	10ef4 <dcgettext@plt>
   13158:	mov	r4, r0
   1315c:	movw	r0, #33124	; 0x8164
   13160:	movt	r0, #2
   13164:	ldr	r6, [r0]
   13168:	bl	11008 <__errno_location@plt>
   1316c:	ldr	r5, [r0]
   13170:	cmp	r6, #0
   13174:	bne	13190 <__assert_fail@plt+0x20a4>
   13178:	movw	r2, #27789	; 0x6c8d
   1317c:	mov	r0, #0
   13180:	mov	r1, r5
   13184:	mov	r3, r4
   13188:	movt	r2, #1
   1318c:	b	131b0 <__assert_fail@plt+0x20c4>
   13190:	mov	r0, r6
   13194:	bl	14b38 <__assert_fail@plt+0x3a4c>
   13198:	movw	r2, #27785	; 0x6c89
   1319c:	mov	r3, r0
   131a0:	str	r4, [sp]
   131a4:	mov	r0, #0
   131a8:	mov	r1, r5
   131ac:	movt	r2, #1
   131b0:	bl	10f78 <error@plt>
   131b4:	movw	r0, #33020	; 0x80fc
   131b8:	movt	r0, #2
   131bc:	ldr	r0, [r0]
   131c0:	bl	10eb8 <_exit@plt>
   131c4:	push	{r4, r5, r6, sl, fp, lr}
   131c8:	add	fp, sp, #16
   131cc:	mov	r4, r0
   131d0:	bl	11008 <__errno_location@plt>
   131d4:	ldr	r6, [r0]
   131d8:	mov	r5, r0
   131dc:	mov	r0, r4
   131e0:	bl	10eac <free@plt>
   131e4:	str	r6, [r5]
   131e8:	pop	{r4, r5, r6, sl, fp, pc}
   131ec:	push	{r4, r5, r6, r7, fp, lr}
   131f0:	add	fp, sp, #16
   131f4:	cmp	r2, #0
   131f8:	beq	13240 <__assert_fail@plt+0x2154>
   131fc:	mov	r5, r2
   13200:	mov	r6, r1
   13204:	mov	r7, r0
   13208:	mov	r4, #0
   1320c:	mov	r0, r7
   13210:	mov	r1, r6
   13214:	mov	r2, r5
   13218:	bl	14eb0 <__assert_fail@plt+0x3dc4>
   1321c:	cmn	r0, #1
   13220:	beq	13254 <__assert_fail@plt+0x2168>
   13224:	cmp	r0, #0
   13228:	beq	13248 <__assert_fail@plt+0x215c>
   1322c:	subs	r5, r5, r0
   13230:	add	r6, r6, r0
   13234:	add	r4, r0, r4
   13238:	bne	1320c <__assert_fail@plt+0x2120>
   1323c:	b	13254 <__assert_fail@plt+0x2168>
   13240:	mov	r4, #0
   13244:	b	13254 <__assert_fail@plt+0x2168>
   13248:	bl	11008 <__errno_location@plt>
   1324c:	mov	r1, #0
   13250:	str	r1, [r0]
   13254:	mov	r0, r4
   13258:	pop	{r4, r5, r6, r7, fp, pc}
   1325c:	push	{r4, r5, r6, sl, fp, lr}
   13260:	add	fp, sp, #16
   13264:	mov	r5, r0
   13268:	mov	r0, #0
   1326c:	mov	r4, r1
   13270:	add	r6, r2, #19
   13274:	cmp	r1, #0
   13278:	strb	r0, [r2, #20]
   1327c:	blt	132c8 <__assert_fail@plt+0x21dc>
   13280:	mov	r0, r5
   13284:	mov	r1, r4
   13288:	mov	r2, #10
   1328c:	mov	r3, #0
   13290:	bl	164d8 <__assert_fail@plt+0x53ec>
   13294:	add	r2, r0, r0, lsl #2
   13298:	sub	r2, r5, r2, lsl #1
   1329c:	add	r2, r2, #48	; 0x30
   132a0:	strb	r2, [r6], #-1
   132a4:	adds	r2, r5, #9
   132a8:	mov	r5, r0
   132ac:	adc	r3, r4, #0
   132b0:	rsbs	r2, r2, #18
   132b4:	mov	r4, r1
   132b8:	rscs	r2, r3, #0
   132bc:	bcc	13280 <__assert_fail@plt+0x2194>
   132c0:	add	r6, r6, #1
   132c4:	b	13310 <__assert_fail@plt+0x2224>
   132c8:	mov	r0, r5
   132cc:	mov	r1, r4
   132d0:	mov	r2, #10
   132d4:	mov	r3, #0
   132d8:	bl	164d8 <__assert_fail@plt+0x53ec>
   132dc:	add	r2, r0, r0, lsl #2
   132e0:	rsb	r2, r5, r2, lsl #1
   132e4:	add	r2, r2, #48	; 0x30
   132e8:	strb	r2, [r6], #-1
   132ec:	adds	r2, r5, #9
   132f0:	mov	r5, r0
   132f4:	adc	r3, r4, #0
   132f8:	rsbs	r2, r2, #18
   132fc:	mov	r4, r1
   13300:	rscs	r2, r3, #0
   13304:	bcc	132c8 <__assert_fail@plt+0x21dc>
   13308:	mov	r0, #45	; 0x2d
   1330c:	strb	r0, [r6]
   13310:	mov	r0, r6
   13314:	pop	{r4, r5, r6, sl, fp, pc}
   13318:	push	{r4, r5, r6, sl, fp, lr}
   1331c:	add	fp, sp, #16
   13320:	mov	r5, r0
   13324:	mov	r0, #0
   13328:	mov	r4, r1
   1332c:	add	r6, r2, #19
   13330:	strb	r0, [r2, #20]
   13334:	mov	r0, r5
   13338:	mov	r1, r4
   1333c:	mov	r2, #10
   13340:	mov	r3, #0
   13344:	bl	165ac <__assert_fail@plt+0x54c0>
   13348:	add	r2, r0, r0, lsl #2
   1334c:	sub	r2, r5, r2, lsl #1
   13350:	orr	r2, r2, #48	; 0x30
   13354:	strb	r2, [r6], #-1
   13358:	rsbs	r2, r5, #9
   1335c:	mov	r5, r0
   13360:	rscs	r2, r4, #0
   13364:	mov	r4, r1
   13368:	bcc	13334 <__assert_fail@plt+0x2248>
   1336c:	add	r0, r6, #1
   13370:	pop	{r4, r5, r6, sl, fp, pc}
   13374:	push	{r4, r5, fp, lr}
   13378:	add	fp, sp, #8
   1337c:	cmp	r0, #0
   13380:	beq	13414 <__assert_fail@plt+0x2328>
   13384:	mov	r1, #47	; 0x2f
   13388:	mov	r4, r0
   1338c:	bl	1108c <strrchr@plt>
   13390:	cmp	r0, #0
   13394:	mov	r5, r4
   13398:	addne	r5, r0, #1
   1339c:	sub	r0, r5, r4
   133a0:	cmp	r0, #7
   133a4:	blt	133f8 <__assert_fail@plt+0x230c>
   133a8:	movw	r1, #28947	; 0x7113
   133ac:	sub	r0, r5, #7
   133b0:	mov	r2, #7
   133b4:	movt	r1, #1
   133b8:	bl	110c8 <strncmp@plt>
   133bc:	cmp	r0, #0
   133c0:	bne	133f8 <__assert_fail@plt+0x230c>
   133c4:	movw	r1, #28955	; 0x711b
   133c8:	mov	r0, r5
   133cc:	mov	r2, #3
   133d0:	movt	r1, #1
   133d4:	bl	110c8 <strncmp@plt>
   133d8:	cmp	r0, #0
   133dc:	beq	133e8 <__assert_fail@plt+0x22fc>
   133e0:	mov	r4, r5
   133e4:	b	133f8 <__assert_fail@plt+0x230c>
   133e8:	movw	r0, #33088	; 0x8140
   133ec:	add	r4, r5, #3
   133f0:	movt	r0, #2
   133f4:	str	r4, [r0]
   133f8:	movw	r0, #33092	; 0x8144
   133fc:	movt	r0, #2
   13400:	str	r4, [r0]
   13404:	movw	r0, #33132	; 0x816c
   13408:	movt	r0, #2
   1340c:	str	r4, [r0]
   13410:	pop	{r4, r5, fp, pc}
   13414:	movw	r0, #33104	; 0x8150
   13418:	movt	r0, #2
   1341c:	ldr	r1, [r0]
   13420:	movw	r0, #28891	; 0x70db
   13424:	movt	r0, #1
   13428:	bl	110bc <fputs@plt>
   1342c:	bl	110d4 <abort@plt>
   13430:	push	{r4, r5, r6, sl, fp, lr}
   13434:	add	fp, sp, #16
   13438:	mov	r4, r0
   1343c:	movw	r0, #33136	; 0x8170
   13440:	movt	r0, #2
   13444:	cmp	r4, #0
   13448:	moveq	r4, r0
   1344c:	bl	11008 <__errno_location@plt>
   13450:	ldr	r6, [r0]
   13454:	mov	r5, r0
   13458:	mov	r0, r4
   1345c:	mov	r1, #48	; 0x30
   13460:	bl	15720 <__assert_fail@plt+0x4634>
   13464:	str	r6, [r5]
   13468:	pop	{r4, r5, r6, sl, fp, pc}
   1346c:	movw	r1, #33136	; 0x8170
   13470:	cmp	r0, #0
   13474:	movt	r1, #2
   13478:	movne	r1, r0
   1347c:	ldr	r0, [r1]
   13480:	bx	lr
   13484:	movw	r2, #33136	; 0x8170
   13488:	cmp	r0, #0
   1348c:	movt	r2, #2
   13490:	movne	r2, r0
   13494:	str	r1, [r2]
   13498:	bx	lr
   1349c:	movw	r3, #33136	; 0x8170
   134a0:	cmp	r0, #0
   134a4:	movt	r3, #2
   134a8:	movne	r3, r0
   134ac:	ubfx	r0, r1, #5, #3
   134b0:	and	r1, r1, #31
   134b4:	add	r0, r3, r0, lsl #2
   134b8:	ldr	r3, [r0, #8]
   134bc:	eor	r2, r2, r3, lsr r1
   134c0:	and	r2, r2, #1
   134c4:	eor	r2, r3, r2, lsl r1
   134c8:	str	r2, [r0, #8]
   134cc:	mov	r0, #1
   134d0:	and	r0, r0, r3, lsr r1
   134d4:	bx	lr
   134d8:	movw	r2, #33136	; 0x8170
   134dc:	cmp	r0, #0
   134e0:	movt	r2, #2
   134e4:	movne	r2, r0
   134e8:	ldr	r0, [r2, #4]
   134ec:	str	r1, [r2, #4]
   134f0:	bx	lr
   134f4:	movw	r3, #33136	; 0x8170
   134f8:	cmp	r0, #0
   134fc:	movt	r3, #2
   13500:	movne	r3, r0
   13504:	cmp	r1, #0
   13508:	mov	r0, #10
   1350c:	cmpne	r2, #0
   13510:	str	r0, [r3]
   13514:	bne	13524 <__assert_fail@plt+0x2438>
   13518:	push	{fp, lr}
   1351c:	mov	fp, sp
   13520:	bl	110d4 <abort@plt>
   13524:	str	r1, [r3, #40]	; 0x28
   13528:	str	r2, [r3, #44]	; 0x2c
   1352c:	bx	lr
   13530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13534:	add	fp, sp, #28
   13538:	sub	sp, sp, #20
   1353c:	mov	r7, r0
   13540:	ldr	r0, [fp, #8]
   13544:	movw	r5, #33136	; 0x8170
   13548:	mov	r8, r3
   1354c:	mov	r9, r2
   13550:	mov	sl, r1
   13554:	movt	r5, #2
   13558:	cmp	r0, #0
   1355c:	movne	r5, r0
   13560:	bl	11008 <__errno_location@plt>
   13564:	mov	r4, r0
   13568:	ldm	r5, {r0, r1}
   1356c:	ldr	r2, [r5, #40]	; 0x28
   13570:	ldr	r3, [r5, #44]	; 0x2c
   13574:	add	r5, r5, #8
   13578:	ldr	r6, [r4]
   1357c:	stm	sp, {r0, r1, r5}
   13580:	str	r2, [sp, #12]
   13584:	str	r3, [sp, #16]
   13588:	mov	r0, r7
   1358c:	mov	r1, sl
   13590:	mov	r2, r9
   13594:	mov	r3, r8
   13598:	bl	135a8 <__assert_fail@plt+0x24bc>
   1359c:	str	r6, [r4]
   135a0:	sub	sp, fp, #28
   135a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135ac:	add	fp, sp, #28
   135b0:	sub	sp, sp, #156	; 0x9c
   135b4:	str	r0, [fp, #-56]	; 0xffffffc8
   135b8:	ldr	r0, [fp, #12]
   135bc:	mov	r4, r1
   135c0:	str	r3, [sp, #80]	; 0x50
   135c4:	str	r2, [fp, #-84]	; 0xffffffac
   135c8:	and	r1, r0, #4
   135cc:	str	r1, [sp, #24]
   135d0:	and	r1, r0, #1
   135d4:	str	r1, [sp, #28]
   135d8:	ubfx	r7, r0, #1, #1
   135dc:	bl	10f48 <__ctype_get_mb_cur_max@plt>
   135e0:	str	r0, [sp, #32]
   135e4:	ldr	r0, [fp, #24]
   135e8:	ldr	r9, [fp, #8]
   135ec:	mov	r2, #0
   135f0:	mov	r1, #0
   135f4:	mov	r5, #0
   135f8:	str	r2, [sp, #52]	; 0x34
   135fc:	mov	r2, #1
   13600:	str	r0, [sp, #72]	; 0x48
   13604:	ldr	r0, [fp, #20]
   13608:	str	r0, [sp, #64]	; 0x40
   1360c:	mov	r0, #0
   13610:	str	r0, [sp, #92]	; 0x5c
   13614:	mov	r0, #0
   13618:	str	r0, [fp, #-76]	; 0xffffffb4
   1361c:	mov	r0, #0
   13620:	cmp	r9, #10
   13624:	str	r1, [sp, #68]	; 0x44
   13628:	bhi	14628 <__assert_fail@plt+0x353c>
   1362c:	add	r1, pc, #28
   13630:	ldr	ip, [fp, #-84]	; 0xffffffac
   13634:	ldr	lr, [sp, #80]	; 0x50
   13638:	mov	r6, r4
   1363c:	mov	r8, #0
   13640:	mov	r3, #1
   13644:	mov	sl, #0
   13648:	mov	r4, r2
   1364c:	ldr	pc, [r1, r9, lsl #2]
   13650:	andeq	r3, r1, r0, lsr #14
   13654:	andeq	r3, r1, ip, asr r7
   13658:	andeq	r3, r1, r0, lsr r7
   1365c:	andeq	r3, r1, r8, lsl r7
   13660:	andeq	r3, r1, r0, asr r7
   13664:	andeq	r3, r1, r8, lsr #15
   13668:	andeq	r3, r1, r0, asr #14
   1366c:	andeq	r3, r1, r8, lsl #16
   13670:	andeq	r3, r1, ip, ror r6
   13674:	andeq	r3, r1, ip, ror r6
   13678:	andeq	r3, r1, r4, lsr #13
   1367c:	movw	r0, #29037	; 0x716d
   13680:	mov	r1, r9
   13684:	movt	r0, #1
   13688:	bl	14d90 <__assert_fail@plt+0x3ca4>
   1368c:	str	r0, [sp, #64]	; 0x40
   13690:	movw	r0, #29039	; 0x716f
   13694:	mov	r1, r9
   13698:	movt	r0, #1
   1369c:	bl	14d90 <__assert_fail@plt+0x3ca4>
   136a0:	str	r0, [sp, #72]	; 0x48
   136a4:	mov	r8, #0
   136a8:	mov	sl, r7
   136ac:	tst	r7, #1
   136b0:	str	r5, [fp, #-48]	; 0xffffffd0
   136b4:	bne	136f0 <__assert_fail@plt+0x2604>
   136b8:	ldr	r0, [sp, #64]	; 0x40
   136bc:	ldrb	r0, [r0]
   136c0:	cmp	r0, #0
   136c4:	beq	136f0 <__assert_fail@plt+0x2604>
   136c8:	ldr	r1, [sp, #64]	; 0x40
   136cc:	mov	r8, #0
   136d0:	add	r1, r1, #1
   136d4:	cmp	r8, r6
   136d8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   136dc:	strbcc	r0, [r2, r8]
   136e0:	ldrb	r0, [r1, r8]
   136e4:	add	r8, r8, #1
   136e8:	cmp	r0, #0
   136ec:	bne	136d4 <__assert_fail@plt+0x25e8>
   136f0:	ldr	r7, [sp, #72]	; 0x48
   136f4:	mov	r0, r7
   136f8:	bl	10fe4 <strlen@plt>
   136fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13700:	ldr	lr, [sp, #80]	; 0x50
   13704:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13708:	str	r0, [fp, #-76]	; 0xffffffb4
   1370c:	str	r7, [sp, #92]	; 0x5c
   13710:	mov	r3, #1
   13714:	b	13808 <__assert_fail@plt+0x271c>
   13718:	mov	r0, #1
   1371c:	b	1375c <__assert_fail@plt+0x2670>
   13720:	mov	r9, #0
   13724:	mov	r8, #0
   13728:	mov	r3, r0
   1372c:	b	13804 <__assert_fail@plt+0x2718>
   13730:	tst	r7, #1
   13734:	bne	1375c <__assert_fail@plt+0x2670>
   13738:	mov	r3, r0
   1373c:	b	13784 <__assert_fail@plt+0x2698>
   13740:	mov	r0, #1
   13744:	mov	r8, #0
   13748:	mov	r9, #5
   1374c:	b	137bc <__assert_fail@plt+0x26d0>
   13750:	mov	r3, #1
   13754:	tst	r7, #1
   13758:	beq	13784 <__assert_fail@plt+0x2698>
   1375c:	mov	r1, #1
   13760:	mov	r8, #0
   13764:	mov	r9, #2
   13768:	mov	r3, r0
   1376c:	mov	sl, #1
   13770:	str	r1, [fp, #-76]	; 0xffffffb4
   13774:	movw	r1, #29039	; 0x716f
   13778:	movt	r1, #1
   1377c:	str	r1, [sp, #92]	; 0x5c
   13780:	b	13808 <__assert_fail@plt+0x271c>
   13784:	cmp	r6, #0
   13788:	mov	r8, #1
   1378c:	mov	r9, #2
   13790:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13794:	movne	r0, #39	; 0x27
   13798:	strbne	r0, [r1]
   1379c:	movw	r0, #29039	; 0x716f
   137a0:	movt	r0, #1
   137a4:	b	137f8 <__assert_fail@plt+0x270c>
   137a8:	mov	r9, #5
   137ac:	tst	r7, #1
   137b0:	beq	137d8 <__assert_fail@plt+0x26ec>
   137b4:	mov	r0, #1
   137b8:	mov	r8, #0
   137bc:	str	r0, [fp, #-76]	; 0xffffffb4
   137c0:	movw	r0, #29035	; 0x716b
   137c4:	mov	r3, #1
   137c8:	mov	sl, #1
   137cc:	movt	r0, #1
   137d0:	str	r0, [sp, #92]	; 0x5c
   137d4:	b	13808 <__assert_fail@plt+0x271c>
   137d8:	cmp	r6, #0
   137dc:	mov	r8, #1
   137e0:	mov	r3, #1
   137e4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   137e8:	movne	r0, #34	; 0x22
   137ec:	strbne	r0, [r1]
   137f0:	movw	r0, #29035	; 0x716b
   137f4:	movt	r0, #1
   137f8:	str	r0, [sp, #92]	; 0x5c
   137fc:	mov	r0, #1
   13800:	str	r0, [fp, #-76]	; 0xffffffb4
   13804:	mov	sl, #0
   13808:	ldr	r0, [fp, #16]
   1380c:	mov	r7, #0
   13810:	str	r9, [fp, #-64]	; 0xffffffc0
   13814:	str	sl, [fp, #-72]	; 0xffffffb8
   13818:	str	r3, [sp, #84]	; 0x54
   1381c:	cmp	r0, #0
   13820:	movwne	r0, #1
   13824:	and	r0, r0, sl
   13828:	str	r0, [fp, #-88]	; 0xffffffa8
   1382c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13830:	cmp	r0, #0
   13834:	movwne	r0, #1
   13838:	subs	r2, r9, #2
   1383c:	and	r1, r0, sl
   13840:	str	r2, [fp, #-80]	; 0xffffffb0
   13844:	and	r1, r3, r1
   13848:	str	r1, [sp, #44]	; 0x2c
   1384c:	clz	r1, r2
   13850:	lsr	r1, r1, #5
   13854:	and	r1, r1, sl
   13858:	str	r1, [sp, #56]	; 0x38
   1385c:	mov	r1, r2
   13860:	eor	r2, sl, #1
   13864:	movwne	r1, #1
   13868:	str	r2, [sp, #88]	; 0x58
   1386c:	orr	r2, r1, r2
   13870:	and	r1, r1, r3
   13874:	and	r0, r0, r1
   13878:	str	r2, [sp, #60]	; 0x3c
   1387c:	str	r1, [fp, #-68]	; 0xffffffbc
   13880:	str	r0, [fp, #-60]	; 0xffffffc4
   13884:	eor	r0, r3, #1
   13888:	str	r0, [sp, #48]	; 0x30
   1388c:	cmn	lr, #1
   13890:	beq	138a0 <__assert_fail@plt+0x27b4>
   13894:	cmp	r7, lr
   13898:	bne	138ac <__assert_fail@plt+0x27c0>
   1389c:	b	14458 <__assert_fail@plt+0x336c>
   138a0:	ldrb	r0, [ip, r7]
   138a4:	cmp	r0, #0
   138a8:	beq	14460 <__assert_fail@plt+0x3374>
   138ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   138b0:	mov	r9, #0
   138b4:	str	r5, [fp, #-48]	; 0xffffffd0
   138b8:	str	r6, [fp, #-52]	; 0xffffffcc
   138bc:	cmp	r0, #0
   138c0:	beq	13900 <__assert_fail@plt+0x2814>
   138c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   138c8:	mov	r5, r4
   138cc:	add	r4, r7, r0
   138d0:	cmp	r0, #2
   138d4:	bcc	138f0 <__assert_fail@plt+0x2804>
   138d8:	cmn	lr, #1
   138dc:	bne	138f0 <__assert_fail@plt+0x2804>
   138e0:	mov	r0, ip
   138e4:	bl	10fe4 <strlen@plt>
   138e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   138ec:	mov	lr, r0
   138f0:	cmp	r4, lr
   138f4:	bls	13908 <__assert_fail@plt+0x281c>
   138f8:	mov	r6, #0
   138fc:	b	13948 <__assert_fail@plt+0x285c>
   13900:	mov	r6, #0
   13904:	b	1394c <__assert_fail@plt+0x2860>
   13908:	ldr	r1, [sp, #92]	; 0x5c
   1390c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13910:	add	r0, ip, r7
   13914:	mov	r4, lr
   13918:	bl	10ee8 <memcmp@plt>
   1391c:	ldr	r2, [sp, #88]	; 0x58
   13920:	cmp	r0, #0
   13924:	mov	r1, r0
   13928:	movwne	r1, #1
   1392c:	orr	r1, r1, r2
   13930:	tst	r1, #1
   13934:	beq	144f4 <__assert_fail@plt+0x3408>
   13938:	ldr	ip, [fp, #-84]	; 0xffffffac
   1393c:	clz	r0, r0
   13940:	mov	lr, r4
   13944:	lsr	r6, r0, #5
   13948:	mov	r4, r5
   1394c:	ldrb	r5, [ip, r7]
   13950:	cmp	r5, #126	; 0x7e
   13954:	bhi	13d1c <__assert_fail@plt+0x2c30>
   13958:	add	r3, pc, #16
   1395c:	mov	sl, #1
   13960:	mov	r2, #110	; 0x6e
   13964:	mov	r0, #97	; 0x61
   13968:	mov	r1, #0
   1396c:	ldr	pc, [r3, r5, lsl #2]
   13970:	andeq	r3, r1, r0, lsl #24
   13974:	andeq	r3, r1, ip, lsl sp
   13978:	andeq	r3, r1, ip, lsl sp
   1397c:	andeq	r3, r1, ip, lsl sp
   13980:	andeq	r3, r1, ip, lsl sp
   13984:	andeq	r3, r1, ip, lsl sp
   13988:	andeq	r3, r1, ip, lsl sp
   1398c:	andeq	r3, r1, r0, asr #27
   13990:	andeq	r3, r1, r0, ror #23
   13994:	ldrdeq	r3, [r1], -r8
   13998:	andeq	r3, r1, ip, ror #23
   1399c:	andeq	r3, r1, r0, ror ip
   139a0:	ldrdeq	r3, [r1], -r0
   139a4:	andeq	r3, r1, r8, ror #23
   139a8:	andeq	r3, r1, ip, lsl sp
   139ac:	andeq	r3, r1, ip, lsl sp
   139b0:	andeq	r3, r1, ip, lsl sp
   139b4:	andeq	r3, r1, ip, lsl sp
   139b8:	andeq	r3, r1, ip, lsl sp
   139bc:	andeq	r3, r1, ip, lsl sp
   139c0:	andeq	r3, r1, ip, lsl sp
   139c4:	andeq	r3, r1, ip, lsl sp
   139c8:	andeq	r3, r1, ip, lsl sp
   139cc:	andeq	r3, r1, ip, lsl sp
   139d0:	andeq	r3, r1, ip, lsl sp
   139d4:	andeq	r3, r1, ip, lsl sp
   139d8:	andeq	r3, r1, ip, lsl sp
   139dc:	andeq	r3, r1, ip, lsl sp
   139e0:	andeq	r3, r1, ip, lsl sp
   139e4:	andeq	r3, r1, ip, lsl sp
   139e8:	andeq	r3, r1, ip, lsl sp
   139ec:	andeq	r3, r1, ip, lsl sp
   139f0:	andeq	r3, r1, r0, lsl #27
   139f4:	andeq	r3, r1, r4, lsl #27
   139f8:	andeq	r3, r1, r4, lsl #27
   139fc:	andeq	r3, r1, r0, lsl #23
   13a00:	andeq	r3, r1, r4, lsl #27
   13a04:	andeq	r3, r1, ip, ror #22
   13a08:	andeq	r3, r1, r4, lsl #27
   13a0c:	andeq	r3, r1, r8, ror ip
   13a10:	andeq	r3, r1, r4, lsl #27
   13a14:	andeq	r3, r1, r4, lsl #27
   13a18:	andeq	r3, r1, r4, lsl #27
   13a1c:	andeq	r3, r1, ip, ror #22
   13a20:	andeq	r3, r1, ip, ror #22
   13a24:	andeq	r3, r1, ip, ror #22
   13a28:	andeq	r3, r1, ip, ror #22
   13a2c:	andeq	r3, r1, ip, ror #22
   13a30:	andeq	r3, r1, ip, ror #22
   13a34:	andeq	r3, r1, ip, ror #22
   13a38:	andeq	r3, r1, ip, ror #22
   13a3c:	andeq	r3, r1, ip, ror #22
   13a40:	andeq	r3, r1, ip, ror #22
   13a44:	andeq	r3, r1, ip, ror #22
   13a48:	andeq	r3, r1, ip, ror #22
   13a4c:	andeq	r3, r1, ip, ror #22
   13a50:	andeq	r3, r1, ip, ror #22
   13a54:	andeq	r3, r1, ip, ror #22
   13a58:	andeq	r3, r1, ip, ror #22
   13a5c:	andeq	r3, r1, r4, lsl #27
   13a60:	andeq	r3, r1, r4, lsl #27
   13a64:	andeq	r3, r1, r4, lsl #27
   13a68:	andeq	r3, r1, r4, lsl #27
   13a6c:	andeq	r3, r1, r4, asr #24
   13a70:	andeq	r3, r1, ip, lsl sp
   13a74:	andeq	r3, r1, ip, ror #22
   13a78:	andeq	r3, r1, ip, ror #22
   13a7c:	andeq	r3, r1, ip, ror #22
   13a80:	andeq	r3, r1, ip, ror #22
   13a84:	andeq	r3, r1, ip, ror #22
   13a88:	andeq	r3, r1, ip, ror #22
   13a8c:	andeq	r3, r1, ip, ror #22
   13a90:	andeq	r3, r1, ip, ror #22
   13a94:	andeq	r3, r1, ip, ror #22
   13a98:	andeq	r3, r1, ip, ror #22
   13a9c:	andeq	r3, r1, ip, ror #22
   13aa0:	andeq	r3, r1, ip, ror #22
   13aa4:	andeq	r3, r1, ip, ror #22
   13aa8:	andeq	r3, r1, ip, ror #22
   13aac:	andeq	r3, r1, ip, ror #22
   13ab0:	andeq	r3, r1, ip, ror #22
   13ab4:	andeq	r3, r1, ip, ror #22
   13ab8:	andeq	r3, r1, ip, ror #22
   13abc:	andeq	r3, r1, ip, ror #22
   13ac0:	andeq	r3, r1, ip, ror #22
   13ac4:	andeq	r3, r1, ip, ror #22
   13ac8:	andeq	r3, r1, ip, ror #22
   13acc:	andeq	r3, r1, ip, ror #22
   13ad0:	andeq	r3, r1, ip, ror #22
   13ad4:	andeq	r3, r1, ip, ror #22
   13ad8:	andeq	r3, r1, ip, ror #22
   13adc:	andeq	r3, r1, r4, lsl #27
   13ae0:	andeq	r3, r1, ip, lsr #23
   13ae4:	andeq	r3, r1, ip, ror #22
   13ae8:	andeq	r3, r1, r4, lsl #27
   13aec:	andeq	r3, r1, ip, ror #22
   13af0:	andeq	r3, r1, r4, lsl #27
   13af4:	andeq	r3, r1, ip, ror #22
   13af8:	andeq	r3, r1, ip, ror #22
   13afc:	andeq	r3, r1, ip, ror #22
   13b00:	andeq	r3, r1, ip, ror #22
   13b04:	andeq	r3, r1, ip, ror #22
   13b08:	andeq	r3, r1, ip, ror #22
   13b0c:	andeq	r3, r1, ip, ror #22
   13b10:	andeq	r3, r1, ip, ror #22
   13b14:	andeq	r3, r1, ip, ror #22
   13b18:	andeq	r3, r1, ip, ror #22
   13b1c:	andeq	r3, r1, ip, ror #22
   13b20:	andeq	r3, r1, ip, ror #22
   13b24:	andeq	r3, r1, ip, ror #22
   13b28:	andeq	r3, r1, ip, ror #22
   13b2c:	andeq	r3, r1, ip, ror #22
   13b30:	andeq	r3, r1, ip, ror #22
   13b34:	andeq	r3, r1, ip, ror #22
   13b38:	andeq	r3, r1, ip, ror #22
   13b3c:	andeq	r3, r1, ip, ror #22
   13b40:	andeq	r3, r1, ip, ror #22
   13b44:	andeq	r3, r1, ip, ror #22
   13b48:	andeq	r3, r1, ip, ror #22
   13b4c:	andeq	r3, r1, ip, ror #22
   13b50:	andeq	r3, r1, ip, ror #22
   13b54:	andeq	r3, r1, ip, ror #22
   13b58:	andeq	r3, r1, ip, ror #22
   13b5c:	muleq	r1, r0, fp
   13b60:	andeq	r3, r1, r4, lsl #27
   13b64:	muleq	r1, r0, fp
   13b68:	andeq	r3, r1, r0, lsl #23
   13b6c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b70:	cmp	r0, #0
   13b74:	beq	13dd4 <__assert_fail@plt+0x2ce8>
   13b78:	ldr	r0, [fp, #16]
   13b7c:	b	13dd8 <__assert_fail@plt+0x2cec>
   13b80:	mov	sl, #0
   13b84:	cmp	r7, #0
   13b88:	bne	13ff0 <__assert_fail@plt+0x2f04>
   13b8c:	b	13d80 <__assert_fail@plt+0x2c94>
   13b90:	mov	sl, #0
   13b94:	cmn	lr, #1
   13b98:	beq	13d6c <__assert_fail@plt+0x2c80>
   13b9c:	cmp	r7, #0
   13ba0:	cmpeq	lr, #1
   13ba4:	bne	13ff0 <__assert_fail@plt+0x2f04>
   13ba8:	b	13d80 <__assert_fail@plt+0x2c94>
   13bac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13bb0:	cmp	r0, #2
   13bb4:	bne	13da4 <__assert_fail@plt+0x2cb8>
   13bb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13bbc:	tst	r0, #1
   13bc0:	bne	14510 <__assert_fail@plt+0x3424>
   13bc4:	mov	r9, #0
   13bc8:	mov	r0, #92	; 0x5c
   13bcc:	b	13db8 <__assert_fail@plt+0x2ccc>
   13bd0:	mov	r0, #102	; 0x66
   13bd4:	b	13dc0 <__assert_fail@plt+0x2cd4>
   13bd8:	mov	r2, #116	; 0x74
   13bdc:	b	13bec <__assert_fail@plt+0x2b00>
   13be0:	mov	r0, #98	; 0x62
   13be4:	b	13dc0 <__assert_fail@plt+0x2cd4>
   13be8:	mov	r2, #114	; 0x72
   13bec:	ldr	r0, [sp, #60]	; 0x3c
   13bf0:	tst	r0, #1
   13bf4:	mov	r0, r2
   13bf8:	bne	13dc0 <__assert_fail@plt+0x2cd4>
   13bfc:	b	14510 <__assert_fail@plt+0x3424>
   13c00:	ldr	r0, [sp, #84]	; 0x54
   13c04:	tst	r0, #1
   13c08:	beq	13eac <__assert_fail@plt+0x2dc0>
   13c0c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13c10:	tst	r0, #1
   13c14:	bne	14618 <__assert_fail@plt+0x352c>
   13c18:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c1c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c20:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13c24:	cmp	r0, #2
   13c28:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13c2c:	movwne	r0, #1
   13c30:	orr	r0, r0, r3
   13c34:	tst	r0, #1
   13c38:	beq	1432c <__assert_fail@plt+0x3240>
   13c3c:	mov	r0, r8
   13c40:	b	1436c <__assert_fail@plt+0x3280>
   13c44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c48:	mov	r9, #0
   13c4c:	mov	r5, #63	; 0x3f
   13c50:	cmp	r0, #5
   13c54:	beq	13ff8 <__assert_fail@plt+0x2f0c>
   13c58:	cmp	r0, #2
   13c5c:	bne	140b8 <__assert_fail@plt+0x2fcc>
   13c60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13c64:	tst	r0, #1
   13c68:	beq	140bc <__assert_fail@plt+0x2fd0>
   13c6c:	b	14510 <__assert_fail@plt+0x3424>
   13c70:	mov	r0, #118	; 0x76
   13c74:	b	13dc0 <__assert_fail@plt+0x2cd4>
   13c78:	mov	r0, #1
   13c7c:	mov	r5, #39	; 0x27
   13c80:	str	r0, [sp, #52]	; 0x34
   13c84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c88:	cmp	r0, #2
   13c8c:	bne	13d14 <__assert_fail@plt+0x2c28>
   13c90:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13c94:	tst	r0, #1
   13c98:	bne	14510 <__assert_fail@plt+0x3424>
   13c9c:	ldr	r3, [sp, #68]	; 0x44
   13ca0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13ca4:	mov	r9, #0
   13ca8:	clz	r1, r2
   13cac:	cmp	r3, #0
   13cb0:	mov	r0, r3
   13cb4:	movwne	r0, #1
   13cb8:	lsr	r1, r1, #5
   13cbc:	orrs	r0, r0, r1
   13cc0:	moveq	r3, r2
   13cc4:	moveq	r2, r0
   13cc8:	cmp	r8, r2
   13ccc:	str	r3, [sp, #68]	; 0x44
   13cd0:	str	r2, [fp, #-52]	; 0xffffffcc
   13cd4:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   13cd8:	movcc	r0, #39	; 0x27
   13cdc:	strbcc	r0, [r1, r8]
   13ce0:	add	r0, r8, #1
   13ce4:	cmp	r0, r2
   13ce8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13cec:	movcc	r1, #92	; 0x5c
   13cf0:	strbcc	r1, [r3, r0]
   13cf4:	add	r0, r8, #2
   13cf8:	add	r8, r8, #3
   13cfc:	cmp	r0, r2
   13d00:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13d04:	movcc	r1, #39	; 0x27
   13d08:	strbcc	r1, [r2, r0]
   13d0c:	mov	r0, #0
   13d10:	str	r0, [fp, #-48]	; 0xffffffd0
   13d14:	mov	sl, #1
   13d18:	b	13b6c <__assert_fail@plt+0x2a80>
   13d1c:	ldr	r0, [sp, #32]
   13d20:	cmp	r0, #1
   13d24:	bne	13ed0 <__assert_fail@plt+0x2de4>
   13d28:	str	lr, [sp, #80]	; 0x50
   13d2c:	bl	10fcc <__ctype_b_loc@plt>
   13d30:	ldr	r0, [r0]
   13d34:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d38:	mov	r1, #1
   13d3c:	add	r0, r0, r5, lsl #1
   13d40:	ldrb	r0, [r0, #1]
   13d44:	ubfx	sl, r0, #6, #1
   13d48:	ldr	r0, [sp, #48]	; 0x30
   13d4c:	mov	r2, r1
   13d50:	cmp	r1, #1
   13d54:	orr	r0, sl, r0
   13d58:	bhi	140c4 <__assert_fail@plt+0x2fd8>
   13d5c:	tst	r0, #1
   13d60:	beq	140c4 <__assert_fail@plt+0x2fd8>
   13d64:	ldr	lr, [sp, #80]	; 0x50
   13d68:	b	13b6c <__assert_fail@plt+0x2a80>
   13d6c:	cmp	r7, #0
   13d70:	bne	13fec <__assert_fail@plt+0x2f00>
   13d74:	ldrb	r0, [ip, #1]
   13d78:	cmp	r0, #0
   13d7c:	bne	13fec <__assert_fail@plt+0x2f00>
   13d80:	mov	r1, #1
   13d84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13d88:	cmp	r0, #2
   13d8c:	bne	13d9c <__assert_fail@plt+0x2cb0>
   13d90:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d94:	tst	r0, #1
   13d98:	bne	14510 <__assert_fail@plt+0x3424>
   13d9c:	mov	sl, r1
   13da0:	b	13b6c <__assert_fail@plt+0x2a80>
   13da4:	ldr	r1, [sp, #44]	; 0x2c
   13da8:	mov	r9, #0
   13dac:	mov	r0, #92	; 0x5c
   13db0:	cmp	r1, #0
   13db4:	beq	13dc0 <__assert_fail@plt+0x2cd4>
   13db8:	mov	sl, #0
   13dbc:	b	142d8 <__assert_fail@plt+0x31ec>
   13dc0:	ldr	r1, [sp, #84]	; 0x54
   13dc4:	mov	sl, #0
   13dc8:	mov	r9, #0
   13dcc:	tst	r1, #1
   13dd0:	bne	13e0c <__assert_fail@plt+0x2d20>
   13dd4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13dd8:	cmp	r0, #0
   13ddc:	mov	r0, r5
   13de0:	beq	13e04 <__assert_fail@plt+0x2d18>
   13de4:	ldr	r1, [fp, #16]
   13de8:	ubfx	r0, r5, #5, #3
   13dec:	mov	r2, #1
   13df0:	ldr	r0, [r1, r0, lsl #2]
   13df4:	and	r1, r5, #31
   13df8:	tst	r0, r2, lsl r1
   13dfc:	mov	r0, r5
   13e00:	bne	13e0c <__assert_fail@plt+0x2d20>
   13e04:	cmp	r6, #0
   13e08:	beq	142d8 <__assert_fail@plt+0x31ec>
   13e0c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13e10:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13e14:	tst	r1, #1
   13e18:	bne	144ec <__assert_fail@plt+0x3400>
   13e1c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13e20:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13e24:	cmp	r1, #2
   13e28:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13e2c:	movwne	r1, #1
   13e30:	orr	r1, r1, r5
   13e34:	tst	r1, #1
   13e38:	bne	13e7c <__assert_fail@plt+0x2d90>
   13e3c:	cmp	r8, r6
   13e40:	mov	r5, #1
   13e44:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13e48:	movcc	r1, #39	; 0x27
   13e4c:	strbcc	r1, [r2, r8]
   13e50:	add	r1, r8, #1
   13e54:	cmp	r1, r6
   13e58:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13e5c:	movcc	r2, #36	; 0x24
   13e60:	strbcc	r2, [r3, r1]
   13e64:	add	r1, r8, #2
   13e68:	add	r8, r8, #3
   13e6c:	cmp	r1, r6
   13e70:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13e74:	movcc	r2, #39	; 0x27
   13e78:	strbcc	r2, [r3, r1]
   13e7c:	cmp	r8, r6
   13e80:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13e84:	movcc	r1, #92	; 0x5c
   13e88:	strbcc	r1, [r2, r8]
   13e8c:	add	r8, r8, #1
   13e90:	cmp	r8, r6
   13e94:	and	r4, r4, sl
   13e98:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   13e9c:	strbcc	r0, [r1, r8]
   13ea0:	add	r8, r8, #1
   13ea4:	add	r7, r7, #1
   13ea8:	b	1388c <__assert_fail@plt+0x27a0>
   13eac:	ldr	r0, [sp, #28]
   13eb0:	mov	sl, #0
   13eb4:	mov	r9, #0
   13eb8:	mov	r5, #0
   13ebc:	cmp	r0, #0
   13ec0:	beq	13dd4 <__assert_fail@plt+0x2ce8>
   13ec4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13ec8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13ecc:	b	13ea4 <__assert_fail@plt+0x2db8>
   13ed0:	mov	r0, #0
   13ed4:	cmn	lr, #1
   13ed8:	str	r6, [sp, #76]	; 0x4c
   13edc:	str	r4, [sp, #20]
   13ee0:	str	r0, [fp, #-36]	; 0xffffffdc
   13ee4:	str	r0, [fp, #-40]	; 0xffffffd8
   13ee8:	bne	13efc <__assert_fail@plt+0x2e10>
   13eec:	mov	r0, ip
   13ef0:	bl	10fe4 <strlen@plt>
   13ef4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ef8:	mov	lr, r0
   13efc:	add	r0, ip, r7
   13f00:	mov	sl, #1
   13f04:	mov	r6, #0
   13f08:	sub	r4, fp, #40	; 0x28
   13f0c:	str	lr, [sp, #80]	; 0x50
   13f10:	str	r0, [sp, #36]	; 0x24
   13f14:	str	r6, [sp, #40]	; 0x28
   13f18:	add	r6, r6, r7
   13f1c:	sub	r0, fp, #44	; 0x2c
   13f20:	mov	r3, r4
   13f24:	add	r1, ip, r6
   13f28:	sub	r2, lr, r6
   13f2c:	bl	16344 <__assert_fail@plt+0x5258>
   13f30:	cmp	r0, #0
   13f34:	beq	14440 <__assert_fail@plt+0x3354>
   13f38:	cmn	r0, #1
   13f3c:	beq	14400 <__assert_fail@plt+0x3314>
   13f40:	ldr	lr, [sp, #80]	; 0x50
   13f44:	cmn	r0, #2
   13f48:	beq	14408 <__assert_fail@plt+0x331c>
   13f4c:	ldr	r2, [sp, #56]	; 0x38
   13f50:	cmp	r0, #2
   13f54:	mov	r1, #0
   13f58:	movwcc	r1, #1
   13f5c:	eor	r2, r2, #1
   13f60:	orrs	r1, r2, r1
   13f64:	bne	13fb0 <__assert_fail@plt+0x2ec4>
   13f68:	ldr	r1, [sp, #40]	; 0x28
   13f6c:	ldr	r2, [sp, #36]	; 0x24
   13f70:	add	ip, r2, r1
   13f74:	mov	r2, #1
   13f78:	ldrb	r3, [ip, r2]
   13f7c:	sub	r6, r3, #94	; 0x5e
   13f80:	cmp	r6, #30
   13f84:	bhi	13f98 <__assert_fail@plt+0x2eac>
   13f88:	mov	r4, #1
   13f8c:	mov	r1, #1073741829	; 0x40000005
   13f90:	tst	r1, r4, lsl r6
   13f94:	bne	1450c <__assert_fail@plt+0x3420>
   13f98:	sub	r3, r3, #91	; 0x5b
   13f9c:	cmp	r3, #2
   13fa0:	bcc	1450c <__assert_fail@plt+0x3420>
   13fa4:	add	r2, r2, #1
   13fa8:	cmp	r2, r0
   13fac:	bcc	13f78 <__assert_fail@plt+0x2e8c>
   13fb0:	ldr	r6, [sp, #40]	; 0x28
   13fb4:	add	r6, r0, r6
   13fb8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13fbc:	bl	10f24 <iswprint@plt>
   13fc0:	cmp	r0, #0
   13fc4:	sub	r4, fp, #40	; 0x28
   13fc8:	movwne	r0, #1
   13fcc:	and	sl, sl, r0
   13fd0:	mov	r0, r4
   13fd4:	bl	10ed0 <mbsinit@plt>
   13fd8:	ldr	lr, [sp, #80]	; 0x50
   13fdc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13fe0:	cmp	r0, #0
   13fe4:	beq	13f14 <__assert_fail@plt+0x2e28>
   13fe8:	b	14448 <__assert_fail@plt+0x335c>
   13fec:	mvn	lr, #0
   13ff0:	mov	r9, #0
   13ff4:	b	13b6c <__assert_fail@plt+0x2a80>
   13ff8:	ldr	r0, [sp, #24]
   13ffc:	cmp	r0, #0
   14000:	beq	140b8 <__assert_fail@plt+0x2fcc>
   14004:	add	r0, r7, #2
   14008:	cmp	r0, lr
   1400c:	bcs	140b8 <__assert_fail@plt+0x2fcc>
   14010:	add	r1, ip, r7
   14014:	ldrb	r1, [r1, #1]
   14018:	cmp	r1, #63	; 0x3f
   1401c:	bne	140b8 <__assert_fail@plt+0x2fcc>
   14020:	ldrb	r5, [ip, r0]
   14024:	sub	r1, r5, #33	; 0x21
   14028:	cmp	r1, #29
   1402c:	bhi	140b8 <__assert_fail@plt+0x2fcc>
   14030:	movw	r3, #20929	; 0x51c1
   14034:	mov	r2, #1
   14038:	movt	r3, #14336	; 0x3800
   1403c:	tst	r3, r2, lsl r1
   14040:	beq	140b8 <__assert_fail@plt+0x2fcc>
   14044:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14048:	tst	r1, #1
   1404c:	bne	14620 <__assert_fail@plt+0x3534>
   14050:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14054:	mov	r7, r0
   14058:	cmp	r8, r1
   1405c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14060:	movcc	r1, #63	; 0x3f
   14064:	strbcc	r1, [r2, r8]
   14068:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1406c:	add	r1, r8, #1
   14070:	cmp	r1, r2
   14074:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14078:	movcc	r2, #34	; 0x22
   1407c:	strbcc	r2, [r3, r1]
   14080:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14084:	add	r1, r8, #2
   14088:	cmp	r1, r2
   1408c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14090:	movcc	r2, #34	; 0x22
   14094:	strbcc	r2, [r3, r1]
   14098:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1409c:	add	r1, r8, #3
   140a0:	add	r8, r8, #4
   140a4:	cmp	r1, r2
   140a8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   140ac:	movcc	r2, #63	; 0x3f
   140b0:	strbcc	r2, [r3, r1]
   140b4:	b	140bc <__assert_fail@plt+0x2fd0>
   140b8:	mov	r5, #63	; 0x3f
   140bc:	mov	sl, #0
   140c0:	b	13b6c <__assert_fail@plt+0x2a80>
   140c4:	str	r0, [sp, #40]	; 0x28
   140c8:	add	r0, r2, r7
   140cc:	str	r6, [sp, #76]	; 0x4c
   140d0:	add	r1, r7, #1
   140d4:	ldr	lr, [sp, #80]	; 0x50
   140d8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   140dc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   140e0:	mov	r3, #0
   140e4:	str	r0, [sp, #36]	; 0x24
   140e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   140ec:	b	14180 <__assert_fail@plt+0x3094>
   140f0:	str	r0, [sp, #76]	; 0x4c
   140f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   140f8:	cmp	r9, #0
   140fc:	movwne	r9, #1
   14100:	mvn	r7, r0
   14104:	orr	r7, r7, r9
   14108:	tst	r7, #1
   1410c:	bne	1415c <__assert_fail@plt+0x3070>
   14110:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14114:	cmp	r8, r6
   14118:	bcs	14130 <__assert_fail@plt+0x3044>
   1411c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   14120:	mov	r2, r4
   14124:	mov	r4, #39	; 0x27
   14128:	strb	r4, [r7, r8]
   1412c:	mov	r4, r2
   14130:	add	r7, r8, #1
   14134:	cmp	r7, r6
   14138:	bcs	14150 <__assert_fail@plt+0x3064>
   1413c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14140:	mov	r2, r4
   14144:	mov	r4, #39	; 0x27
   14148:	strb	r4, [r0, r7]
   1414c:	mov	r4, r2
   14150:	add	r8, r8, #2
   14154:	mov	r0, #0
   14158:	b	14164 <__assert_fail@plt+0x3078>
   1415c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14160:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14164:	cmp	r8, r6
   14168:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1416c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14170:	strbcc	r5, [r2, r8]
   14174:	add	r8, r8, #1
   14178:	ldrb	r5, [ip, r1]
   1417c:	add	r1, r1, #1
   14180:	ldr	r2, [sp, #40]	; 0x28
   14184:	tst	r2, #1
   14188:	beq	141c4 <__assert_fail@plt+0x30d8>
   1418c:	ldr	r2, [sp, #76]	; 0x4c
   14190:	str	r0, [fp, #-48]	; 0xffffffd0
   14194:	tst	r2, #1
   14198:	beq	141bc <__assert_fail@plt+0x30d0>
   1419c:	cmp	r8, r6
   141a0:	bcs	141b8 <__assert_fail@plt+0x30cc>
   141a4:	ldr	r6, [fp, #-56]	; 0xffffffc8
   141a8:	mov	r2, r4
   141ac:	mov	r4, #92	; 0x5c
   141b0:	strb	r4, [r6, r8]
   141b4:	mov	r4, r2
   141b8:	add	r8, r8, #1
   141bc:	mov	r0, #0
   141c0:	b	142b8 <__assert_fail@plt+0x31cc>
   141c4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   141c8:	tst	r2, #1
   141cc:	bne	14518 <__assert_fail@plt+0x342c>
   141d0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   141d4:	cmp	r7, #2
   141d8:	movwne	r3, #1
   141dc:	orr	r3, r3, r0
   141e0:	tst	r3, #1
   141e4:	bne	14240 <__assert_fail@plt+0x3154>
   141e8:	cmp	r8, r6
   141ec:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   141f0:	movcc	r3, #39	; 0x27
   141f4:	strbcc	r3, [r2, r8]
   141f8:	add	r3, r8, #1
   141fc:	cmp	r3, r6
   14200:	bcs	14218 <__assert_fail@plt+0x312c>
   14204:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14208:	mov	r7, r4
   1420c:	mov	r4, #36	; 0x24
   14210:	strb	r4, [r2, r3]
   14214:	mov	r4, r7
   14218:	add	r3, r8, #2
   1421c:	cmp	r3, r6
   14220:	bcs	14238 <__assert_fail@plt+0x314c>
   14224:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14228:	mov	r7, r4
   1422c:	mov	r4, #39	; 0x27
   14230:	strb	r4, [r2, r3]
   14234:	mov	r4, r7
   14238:	add	r8, r8, #3
   1423c:	mov	r0, #1
   14240:	cmp	r8, r6
   14244:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14248:	movcc	r3, #92	; 0x5c
   1424c:	strbcc	r3, [r2, r8]
   14250:	add	r3, r8, #1
   14254:	cmp	r3, r6
   14258:	bcs	14278 <__assert_fail@plt+0x318c>
   1425c:	mov	r2, r4
   14260:	and	r7, r5, #192	; 0xc0
   14264:	mov	r4, #48	; 0x30
   14268:	orr	r7, r4, r7, lsr #6
   1426c:	mov	r4, r2
   14270:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14274:	strb	r7, [r2, r3]
   14278:	add	r3, r8, #2
   1427c:	cmp	r3, r6
   14280:	bcs	142a0 <__assert_fail@plt+0x31b4>
   14284:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14288:	mov	r6, r4
   1428c:	lsr	r7, r5, #3
   14290:	mov	r4, #6
   14294:	bfi	r7, r4, #3, #29
   14298:	mov	r4, r6
   1429c:	strb	r7, [r2, r3]
   142a0:	str	r0, [fp, #-48]	; 0xffffffd0
   142a4:	ldr	r0, [sp, #76]	; 0x4c
   142a8:	mov	r3, #6
   142ac:	add	r8, r8, #3
   142b0:	bfi	r5, r3, #3, #29
   142b4:	mov	r3, #1
   142b8:	ldr	r2, [sp, #36]	; 0x24
   142bc:	and	r9, r3, #1
   142c0:	cmp	r2, r1
   142c4:	bhi	140f0 <__assert_fail@plt+0x3004>
   142c8:	cmp	r9, #0
   142cc:	sub	r7, r1, #1
   142d0:	mov	r0, r5
   142d4:	movwne	r9, #1
   142d8:	cmp	r9, #0
   142dc:	bne	14320 <__assert_fail@plt+0x3234>
   142e0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   142e4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   142e8:	tst	r5, #1
   142ec:	beq	13e90 <__assert_fail@plt+0x2da4>
   142f0:	cmp	r8, r6
   142f4:	mov	r5, #0
   142f8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   142fc:	movcc	r1, #39	; 0x27
   14300:	strbcc	r1, [r2, r8]
   14304:	add	r1, r8, #1
   14308:	add	r8, r8, #2
   1430c:	cmp	r1, r6
   14310:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14314:	movcc	r2, #39	; 0x27
   14318:	strbcc	r2, [r3, r1]
   1431c:	b	13e90 <__assert_fail@plt+0x2da4>
   14320:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14324:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14328:	b	13e90 <__assert_fail@plt+0x2da4>
   1432c:	cmp	r8, r1
   14330:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14334:	movcc	r0, #39	; 0x27
   14338:	strbcc	r0, [r2, r8]
   1433c:	add	r0, r8, #1
   14340:	cmp	r0, r1
   14344:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14348:	movcc	r2, #36	; 0x24
   1434c:	strbcc	r2, [r3, r0]
   14350:	add	r0, r8, #2
   14354:	cmp	r0, r1
   14358:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1435c:	movcc	r2, #39	; 0x27
   14360:	strbcc	r2, [r3, r0]
   14364:	add	r0, r8, #3
   14368:	mov	r3, #1
   1436c:	cmp	r0, r1
   14370:	add	r8, r0, #1
   14374:	str	r3, [fp, #-48]	; 0xffffffd0
   14378:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1437c:	movcc	r1, #92	; 0x5c
   14380:	strbcc	r1, [r2, r0]
   14384:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14388:	cmp	r1, #2
   1438c:	beq	143f0 <__assert_fail@plt+0x3304>
   14390:	add	r1, r7, #1
   14394:	mov	sl, #0
   14398:	mov	r9, #1
   1439c:	mov	r5, #48	; 0x30
   143a0:	cmp	r1, lr
   143a4:	bcs	13b6c <__assert_fail@plt+0x2a80>
   143a8:	ldrb	r1, [ip, r1]
   143ac:	sub	r1, r1, #48	; 0x30
   143b0:	uxtb	r1, r1
   143b4:	cmp	r1, #9
   143b8:	bhi	13b6c <__assert_fail@plt+0x2a80>
   143bc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   143c0:	cmp	r8, r1
   143c4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   143c8:	movcc	r1, #48	; 0x30
   143cc:	strbcc	r1, [r2, r8]
   143d0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   143d4:	add	r1, r0, #2
   143d8:	add	r8, r0, #3
   143dc:	cmp	r1, r2
   143e0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   143e4:	movcc	r2, #48	; 0x30
   143e8:	strbcc	r2, [r3, r1]
   143ec:	b	13b6c <__assert_fail@plt+0x2a80>
   143f0:	mov	r0, #48	; 0x30
   143f4:	mov	r9, #1
   143f8:	mov	sl, #0
   143fc:	b	13e04 <__assert_fail@plt+0x2d18>
   14400:	mov	sl, #0
   14404:	b	14440 <__assert_fail@plt+0x3354>
   14408:	mov	sl, #0
   1440c:	cmp	lr, r6
   14410:	bls	14440 <__assert_fail@plt+0x3354>
   14414:	ldr	ip, [fp, #-84]	; 0xffffffac
   14418:	ldr	r6, [sp, #40]	; 0x28
   1441c:	ldr	r0, [sp, #36]	; 0x24
   14420:	ldrb	r0, [r0, r6]
   14424:	cmp	r0, #0
   14428:	beq	14448 <__assert_fail@plt+0x335c>
   1442c:	add	r6, r6, #1
   14430:	add	r0, r7, r6
   14434:	cmp	r0, lr
   14438:	bcc	1441c <__assert_fail@plt+0x3330>
   1443c:	b	14448 <__assert_fail@plt+0x335c>
   14440:	ldr	ip, [fp, #-84]	; 0xffffffac
   14444:	ldr	r6, [sp, #40]	; 0x28
   14448:	mov	r1, r6
   1444c:	ldr	r4, [sp, #20]
   14450:	ldr	r6, [sp, #76]	; 0x4c
   14454:	b	13d48 <__assert_fail@plt+0x2c5c>
   14458:	mov	lr, r7
   1445c:	b	14464 <__assert_fail@plt+0x3378>
   14460:	mvn	lr, #0
   14464:	ldr	r9, [fp, #-64]	; 0xffffffc0
   14468:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1446c:	eor	r0, r9, #2
   14470:	orr	r0, r0, r8
   14474:	clz	r0, r0
   14478:	lsr	r0, r0, #5
   1447c:	tst	r1, r0
   14480:	bne	1457c <__assert_fail@plt+0x3490>
   14484:	mov	r0, r1
   14488:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1448c:	cmp	r9, #2
   14490:	movwne	r1, #1
   14494:	orr	r0, r0, r1
   14498:	tst	r0, #1
   1449c:	bne	145bc <__assert_fail@plt+0x34d0>
   144a0:	ldr	r0, [sp, #52]	; 0x34
   144a4:	ldr	r1, [sp, #68]	; 0x44
   144a8:	str	lr, [sp, #80]	; 0x50
   144ac:	eor	r0, r0, #1
   144b0:	tst	r0, #1
   144b4:	bne	145bc <__assert_fail@plt+0x34d0>
   144b8:	tst	r4, #1
   144bc:	bne	14584 <__assert_fail@plt+0x3498>
   144c0:	mov	r7, #0
   144c4:	cmp	r1, #0
   144c8:	beq	145b4 <__assert_fail@plt+0x34c8>
   144cc:	ldr	r0, [sp, #84]	; 0x54
   144d0:	mov	r3, #0
   144d4:	cmp	r6, #0
   144d8:	mov	r2, #0
   144dc:	mov	r4, r1
   144e0:	str	r3, [fp, #-72]	; 0xffffffb8
   144e4:	beq	13620 <__assert_fail@plt+0x2534>
   144e8:	b	145bc <__assert_fail@plt+0x34d0>
   144ec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   144f0:	b	14518 <__assert_fail@plt+0x342c>
   144f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   144f8:	mov	r2, #1
   144fc:	mov	lr, r4
   14500:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14504:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14508:	b	1451c <__assert_fail@plt+0x3430>
   1450c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14510:	mov	r7, #2
   14514:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14518:	ldr	r2, [sp, #84]	; 0x54
   1451c:	mov	r0, #0
   14520:	ldr	r1, [fp, #12]
   14524:	tst	r2, #1
   14528:	mov	r2, r7
   1452c:	mov	r3, lr
   14530:	str	r0, [sp, #8]
   14534:	ldr	r0, [sp, #64]	; 0x40
   14538:	movwne	r2, #4
   1453c:	cmp	r7, #2
   14540:	movne	r2, r7
   14544:	str	r2, [sp]
   14548:	mov	r2, ip
   1454c:	bic	r1, r1, #2
   14550:	str	r0, [sp, #12]
   14554:	ldr	r0, [sp, #72]	; 0x48
   14558:	str	r1, [sp, #4]
   1455c:	mov	r1, r6
   14560:	str	r0, [sp, #16]
   14564:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14568:	bl	135a8 <__assert_fail@plt+0x24bc>
   1456c:	mov	r8, r0
   14570:	mov	r0, r8
   14574:	sub	sp, fp, #28
   14578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1457c:	mov	r7, #2
   14580:	b	14518 <__assert_fail@plt+0x342c>
   14584:	mov	r0, #5
   14588:	ldr	r2, [fp, #-84]	; 0xffffffac
   1458c:	ldr	r3, [sp, #80]	; 0x50
   14590:	str	r0, [sp]
   14594:	ldr	r0, [fp, #12]
   14598:	str	r0, [sp, #4]
   1459c:	ldr	r0, [fp, #16]
   145a0:	str	r0, [sp, #8]
   145a4:	ldr	r0, [sp, #64]	; 0x40
   145a8:	str	r0, [sp, #12]
   145ac:	ldr	r0, [sp, #72]	; 0x48
   145b0:	b	14560 <__assert_fail@plt+0x3474>
   145b4:	mov	r0, #0
   145b8:	str	r0, [fp, #-72]	; 0xffffffb8
   145bc:	ldr	r1, [sp, #92]	; 0x5c
   145c0:	cmp	r1, #0
   145c4:	beq	14604 <__assert_fail@plt+0x3518>
   145c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   145cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   145d0:	tst	r0, #1
   145d4:	bne	14608 <__assert_fail@plt+0x351c>
   145d8:	ldrb	r0, [r1]
   145dc:	cmp	r0, #0
   145e0:	beq	14608 <__assert_fail@plt+0x351c>
   145e4:	add	r1, r1, #1
   145e8:	cmp	r8, r6
   145ec:	strbcc	r0, [r2, r8]
   145f0:	add	r8, r8, #1
   145f4:	ldrb	r0, [r1], #1
   145f8:	cmp	r0, #0
   145fc:	bne	145e8 <__assert_fail@plt+0x34fc>
   14600:	b	14608 <__assert_fail@plt+0x351c>
   14604:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14608:	cmp	r8, r6
   1460c:	movcc	r0, #0
   14610:	strbcc	r0, [r2, r8]
   14614:	b	14570 <__assert_fail@plt+0x3484>
   14618:	mov	r2, #1
   1461c:	b	14500 <__assert_fail@plt+0x3414>
   14620:	mov	r7, #5
   14624:	b	14514 <__assert_fail@plt+0x3428>
   14628:	bl	110d4 <abort@plt>
   1462c:	mov	r3, r2
   14630:	mov	r2, #0
   14634:	b	14638 <__assert_fail@plt+0x354c>
   14638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1463c:	add	fp, sp, #28
   14640:	sub	sp, sp, #36	; 0x24
   14644:	movw	r8, #33136	; 0x8170
   14648:	cmp	r3, #0
   1464c:	mov	r4, r2
   14650:	str	r2, [sp, #24]
   14654:	mov	r5, r1
   14658:	mov	r6, r0
   1465c:	str	r0, [sp, #20]
   14660:	movt	r8, #2
   14664:	movne	r8, r3
   14668:	bl	11008 <__errno_location@plt>
   1466c:	str	r0, [sp, #28]
   14670:	cmp	r4, #0
   14674:	add	sl, r8, #8
   14678:	ldm	r8, {r3, r9}
   1467c:	ldr	r7, [r0]
   14680:	ldr	r1, [r8, #40]	; 0x28
   14684:	ldr	r2, [r8, #44]	; 0x2c
   14688:	mov	r0, #0
   1468c:	orreq	r9, r9, #1
   14690:	str	r7, [sp, #32]
   14694:	mov	r7, r5
   14698:	stm	sp, {r3, r9, sl}
   1469c:	str	r1, [sp, #12]
   146a0:	str	r2, [sp, #16]
   146a4:	mov	r1, #0
   146a8:	mov	r2, r6
   146ac:	mov	r3, r5
   146b0:	bl	135a8 <__assert_fail@plt+0x24bc>
   146b4:	add	r4, r0, #1
   146b8:	mov	r5, r0
   146bc:	mov	r0, r4
   146c0:	bl	15400 <__assert_fail@plt+0x4314>
   146c4:	mov	r6, r0
   146c8:	ldr	r0, [r8]
   146cc:	ldr	r2, [r8, #44]	; 0x2c
   146d0:	ldr	r1, [r8, #40]	; 0x28
   146d4:	mov	r3, r7
   146d8:	stm	sp, {r0, r9, sl}
   146dc:	str	r2, [sp, #16]
   146e0:	str	r1, [sp, #12]
   146e4:	mov	r0, r6
   146e8:	mov	r1, r4
   146ec:	ldr	r2, [sp, #20]
   146f0:	bl	135a8 <__assert_fail@plt+0x24bc>
   146f4:	ldr	r0, [sp, #24]
   146f8:	ldr	r1, [sp, #32]
   146fc:	ldr	r2, [sp, #28]
   14700:	cmp	r0, #0
   14704:	str	r1, [r2]
   14708:	strne	r5, [r0]
   1470c:	mov	r0, r6
   14710:	sub	sp, fp, #28
   14714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14718:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1471c:	add	fp, sp, #24
   14720:	movw	r5, #33028	; 0x8104
   14724:	movw	r8, #33024	; 0x8100
   14728:	movt	r5, #2
   1472c:	movt	r8, #2
   14730:	ldr	r0, [r5]
   14734:	ldr	r4, [r8]
   14738:	cmp	r0, #2
   1473c:	blt	14768 <__assert_fail@plt+0x367c>
   14740:	add	r7, r4, #12
   14744:	mov	r6, #0
   14748:	ldr	r0, [r7, r6, lsl #3]
   1474c:	bl	131c4 <__assert_fail@plt+0x20d8>
   14750:	ldr	r1, [r5]
   14754:	add	r2, r6, #2
   14758:	add	r0, r6, #1
   1475c:	mov	r6, r0
   14760:	cmp	r2, r1
   14764:	blt	14748 <__assert_fail@plt+0x365c>
   14768:	ldr	r0, [r4, #4]
   1476c:	movw	r7, #33184	; 0x81a0
   14770:	movt	r7, #2
   14774:	cmp	r0, r7
   14778:	beq	14790 <__assert_fail@plt+0x36a4>
   1477c:	bl	131c4 <__assert_fail@plt+0x20d8>
   14780:	movw	r0, #33032	; 0x8108
   14784:	mov	r6, #256	; 0x100
   14788:	movt	r0, #2
   1478c:	strd	r6, [r0]
   14790:	movw	r6, #33032	; 0x8108
   14794:	movt	r6, #2
   14798:	cmp	r4, r6
   1479c:	beq	147ac <__assert_fail@plt+0x36c0>
   147a0:	mov	r0, r4
   147a4:	bl	131c4 <__assert_fail@plt+0x20d8>
   147a8:	str	r6, [r8]
   147ac:	mov	r0, #1
   147b0:	str	r0, [r5]
   147b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147b8:	movw	r3, #33136	; 0x8170
   147bc:	mvn	r2, #0
   147c0:	movt	r3, #2
   147c4:	b	147c8 <__assert_fail@plt+0x36dc>
   147c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147cc:	add	fp, sp, #28
   147d0:	sub	sp, sp, #44	; 0x2c
   147d4:	mov	r7, r3
   147d8:	str	r2, [sp, #36]	; 0x24
   147dc:	str	r1, [sp, #32]
   147e0:	mov	r5, r0
   147e4:	bl	11008 <__errno_location@plt>
   147e8:	cmp	r5, #0
   147ec:	blt	14958 <__assert_fail@plt+0x386c>
   147f0:	cmn	r5, #-2147483647	; 0x80000001
   147f4:	beq	14958 <__assert_fail@plt+0x386c>
   147f8:	movw	r8, #33028	; 0x8104
   147fc:	movw	r4, #33024	; 0x8100
   14800:	str	r0, [sp, #28]
   14804:	ldr	r0, [r0]
   14808:	movt	r8, #2
   1480c:	movt	r4, #2
   14810:	ldr	r1, [r8]
   14814:	ldr	r6, [r4]
   14818:	str	r0, [sp, #24]
   1481c:	cmp	r1, r5
   14820:	ble	1482c <__assert_fail@plt+0x3740>
   14824:	mov	sl, r6
   14828:	b	14894 <__assert_fail@plt+0x37a8>
   1482c:	movw	r9, #33032	; 0x8108
   14830:	mov	r0, #8
   14834:	add	r2, r5, #1
   14838:	str	r1, [fp, #-32]	; 0xffffffe0
   1483c:	mvn	r3, #-2147483648	; 0x80000000
   14840:	movt	r9, #2
   14844:	str	r0, [sp]
   14848:	sub	r2, r2, r1
   1484c:	sub	r1, fp, #32
   14850:	subs	r0, r6, r9
   14854:	movne	r0, r6
   14858:	bl	15530 <__assert_fail@plt+0x4444>
   1485c:	cmp	r6, r9
   14860:	mov	sl, r0
   14864:	str	r0, [r4]
   14868:	ldrdeq	r0, [r9]
   1486c:	stmeq	sl, {r0, r1}
   14870:	ldr	r1, [r8]
   14874:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14878:	add	r0, sl, r1, lsl #3
   1487c:	sub	r1, r2, r1
   14880:	lsl	r2, r1, #3
   14884:	mov	r1, #0
   14888:	bl	11020 <memset@plt>
   1488c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14890:	str	r0, [r8]
   14894:	mov	r9, sl
   14898:	ldr	r6, [r9, r5, lsl #3]!
   1489c:	ldr	r4, [r9, #4]!
   148a0:	ldm	r7, {r0, r1}
   148a4:	ldr	r2, [r7, #40]	; 0x28
   148a8:	ldr	r3, [r7, #44]	; 0x2c
   148ac:	orr	r8, r1, #1
   148b0:	add	r1, r7, #8
   148b4:	stm	sp, {r0, r8}
   148b8:	add	r0, sp, #8
   148bc:	str	r1, [sp, #20]
   148c0:	stm	r0, {r1, r2, r3}
   148c4:	mov	r0, r4
   148c8:	mov	r1, r6
   148cc:	ldr	r2, [sp, #32]
   148d0:	ldr	r3, [sp, #36]	; 0x24
   148d4:	bl	135a8 <__assert_fail@plt+0x24bc>
   148d8:	cmp	r6, r0
   148dc:	bhi	14940 <__assert_fail@plt+0x3854>
   148e0:	add	r6, r0, #1
   148e4:	movw	r0, #33184	; 0x81a0
   148e8:	movt	r0, #2
   148ec:	str	r6, [sl, r5, lsl #3]
   148f0:	cmp	r4, r0
   148f4:	beq	14900 <__assert_fail@plt+0x3814>
   148f8:	mov	r0, r4
   148fc:	bl	131c4 <__assert_fail@plt+0x20d8>
   14900:	mov	r0, r6
   14904:	bl	15400 <__assert_fail@plt+0x4314>
   14908:	str	r0, [r9]
   1490c:	mov	r4, r0
   14910:	add	r3, sp, #8
   14914:	ldr	r0, [r7]
   14918:	ldr	r1, [r7, #40]	; 0x28
   1491c:	ldr	r2, [r7, #44]	; 0x2c
   14920:	stm	sp, {r0, r8}
   14924:	ldr	r0, [sp, #20]
   14928:	stm	r3, {r0, r1, r2}
   1492c:	mov	r0, r4
   14930:	mov	r1, r6
   14934:	ldr	r2, [sp, #32]
   14938:	ldr	r3, [sp, #36]	; 0x24
   1493c:	bl	135a8 <__assert_fail@plt+0x24bc>
   14940:	ldr	r0, [sp, #28]
   14944:	ldr	r1, [sp, #24]
   14948:	str	r1, [r0]
   1494c:	mov	r0, r4
   14950:	sub	sp, fp, #28
   14954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14958:	bl	110d4 <abort@plt>
   1495c:	movw	r3, #33136	; 0x8170
   14960:	movt	r3, #2
   14964:	b	147c8 <__assert_fail@plt+0x36dc>
   14968:	movw	r3, #33136	; 0x8170
   1496c:	mov	r1, r0
   14970:	mov	r0, #0
   14974:	mvn	r2, #0
   14978:	movt	r3, #2
   1497c:	b	147c8 <__assert_fail@plt+0x36dc>
   14980:	movw	r3, #33136	; 0x8170
   14984:	mov	r2, r1
   14988:	mov	r1, r0
   1498c:	mov	r0, #0
   14990:	movt	r3, #2
   14994:	b	147c8 <__assert_fail@plt+0x36dc>
   14998:	push	{fp, lr}
   1499c:	mov	fp, sp
   149a0:	sub	sp, sp, #48	; 0x30
   149a4:	vmov.i32	q8, #0	; 0x00000000
   149a8:	mov	ip, #32
   149ac:	mov	r3, sp
   149b0:	mov	lr, r2
   149b4:	cmp	r1, #10
   149b8:	add	r2, r3, #16
   149bc:	vst1.64	{d16-d17}, [r3], ip
   149c0:	vst1.64	{d16-d17}, [r3]
   149c4:	vst1.64	{d16-d17}, [r2]
   149c8:	beq	149e8 <__assert_fail@plt+0x38fc>
   149cc:	str	r1, [sp]
   149d0:	mov	r3, sp
   149d4:	mov	r1, lr
   149d8:	mvn	r2, #0
   149dc:	bl	147c8 <__assert_fail@plt+0x36dc>
   149e0:	mov	sp, fp
   149e4:	pop	{fp, pc}
   149e8:	bl	110d4 <abort@plt>
   149ec:	push	{r4, sl, fp, lr}
   149f0:	add	fp, sp, #8
   149f4:	sub	sp, sp, #48	; 0x30
   149f8:	mov	ip, r3
   149fc:	mov	r3, sp
   14a00:	vmov.i32	q8, #0	; 0x00000000
   14a04:	mov	lr, #32
   14a08:	cmp	r1, #10
   14a0c:	add	r4, r3, #16
   14a10:	vst1.64	{d16-d17}, [r3], lr
   14a14:	vst1.64	{d16-d17}, [r3]
   14a18:	vst1.64	{d16-d17}, [r4]
   14a1c:	beq	14a3c <__assert_fail@plt+0x3950>
   14a20:	str	r1, [sp]
   14a24:	mov	r1, r2
   14a28:	mov	r3, sp
   14a2c:	mov	r2, ip
   14a30:	bl	147c8 <__assert_fail@plt+0x36dc>
   14a34:	sub	sp, fp, #8
   14a38:	pop	{r4, sl, fp, pc}
   14a3c:	bl	110d4 <abort@plt>
   14a40:	mov	r2, r1
   14a44:	mov	r1, r0
   14a48:	mov	r0, #0
   14a4c:	b	14998 <__assert_fail@plt+0x38ac>
   14a50:	mov	r3, r2
   14a54:	mov	r2, r1
   14a58:	mov	r1, r0
   14a5c:	mov	r0, #0
   14a60:	b	149ec <__assert_fail@plt+0x3900>
   14a64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14a68:	add	fp, sp, #24
   14a6c:	sub	sp, sp, #48	; 0x30
   14a70:	movw	r8, #33136	; 0x8170
   14a74:	mov	lr, r0
   14a78:	mov	r3, sp
   14a7c:	mov	ip, r1
   14a80:	movt	r8, #2
   14a84:	mov	r1, r3
   14a88:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   14a8c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14a90:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14a94:	stm	r1, {r0, r4, r5, r6, r7, r9}
   14a98:	ubfx	r0, r2, #5, #3
   14a9c:	and	r2, r2, #31
   14aa0:	mov	r4, #1
   14aa4:	add	r0, r3, r0, lsl #2
   14aa8:	ldr	r1, [r0, #8]
   14aac:	bic	r4, r4, r1, lsr r2
   14ab0:	eor	r1, r1, r4, lsl r2
   14ab4:	mov	r2, ip
   14ab8:	str	r1, [r0, #8]
   14abc:	mov	r0, #0
   14ac0:	mov	r1, lr
   14ac4:	bl	147c8 <__assert_fail@plt+0x36dc>
   14ac8:	sub	sp, fp, #24
   14acc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ad0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ad4:	add	fp, sp, #24
   14ad8:	sub	sp, sp, #48	; 0x30
   14adc:	movw	lr, #33136	; 0x8170
   14ae0:	mov	ip, r0
   14ae4:	mov	r3, sp
   14ae8:	movt	lr, #2
   14aec:	mov	r2, r3
   14af0:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14af4:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14af8:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   14afc:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14b00:	ubfx	r0, r1, #5, #3
   14b04:	and	r1, r1, #31
   14b08:	mov	r7, #1
   14b0c:	add	r0, r3, r0, lsl #2
   14b10:	ldr	r2, [r0, #8]
   14b14:	bic	r7, r7, r2, lsr r1
   14b18:	eor	r1, r2, r7, lsl r1
   14b1c:	mvn	r2, #0
   14b20:	str	r1, [r0, #8]
   14b24:	mov	r0, #0
   14b28:	mov	r1, ip
   14b2c:	bl	147c8 <__assert_fail@plt+0x36dc>
   14b30:	sub	sp, fp, #24
   14b34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b38:	push	{r4, r5, r6, r7, fp, lr}
   14b3c:	add	fp, sp, #16
   14b40:	sub	sp, sp, #48	; 0x30
   14b44:	movw	lr, #33136	; 0x8170
   14b48:	mov	ip, r0
   14b4c:	mov	r3, sp
   14b50:	movt	lr, #2
   14b54:	mov	r2, r3
   14b58:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   14b5c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14b60:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   14b64:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14b68:	mov	r1, ip
   14b6c:	mvn	r2, #0
   14b70:	ldr	r0, [sp, #12]
   14b74:	orr	r0, r0, #67108864	; 0x4000000
   14b78:	str	r0, [sp, #12]
   14b7c:	mov	r0, #0
   14b80:	bl	147c8 <__assert_fail@plt+0x36dc>
   14b84:	sub	sp, fp, #16
   14b88:	pop	{r4, r5, r6, r7, fp, pc}
   14b8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b90:	add	fp, sp, #24
   14b94:	sub	sp, sp, #48	; 0x30
   14b98:	movw	r8, #33136	; 0x8170
   14b9c:	mov	ip, r1
   14ba0:	mov	lr, r0
   14ba4:	mov	r3, sp
   14ba8:	movt	r8, #2
   14bac:	mov	r2, r3
   14bb0:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   14bb4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14bb8:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   14bbc:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14bc0:	mov	r1, lr
   14bc4:	mov	r2, ip
   14bc8:	ldr	r0, [sp, #12]
   14bcc:	orr	r0, r0, #67108864	; 0x4000000
   14bd0:	str	r0, [sp, #12]
   14bd4:	mov	r0, #0
   14bd8:	bl	147c8 <__assert_fail@plt+0x36dc>
   14bdc:	sub	sp, fp, #24
   14be0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14be4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14be8:	add	fp, sp, #24
   14bec:	sub	sp, sp, #96	; 0x60
   14bf0:	mov	lr, sp
   14bf4:	vmov.i32	q8, #0	; 0x00000000
   14bf8:	mov	ip, r2
   14bfc:	cmp	r1, #10
   14c00:	add	r3, lr, #16
   14c04:	mov	r2, lr
   14c08:	vst1.64	{d16-d17}, [r3]
   14c0c:	mov	r3, #28
   14c10:	vst1.64	{d16-d17}, [r2], r3
   14c14:	vst1.32	{d16-d17}, [r2]
   14c18:	beq	14c58 <__assert_fail@plt+0x3b6c>
   14c1c:	str	r1, [sp, #48]	; 0x30
   14c20:	add	r3, sp, #48	; 0x30
   14c24:	ldm	lr!, {r2, r4, r5, r6, r7}
   14c28:	add	r1, r3, #4
   14c2c:	stmia	r1!, {r2, r4, r5, r6, r7}
   14c30:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   14c34:	stm	r1, {r2, r4, r5, r6, r7, r8}
   14c38:	mvn	r2, #0
   14c3c:	ldr	r1, [sp, #60]	; 0x3c
   14c40:	orr	r1, r1, #67108864	; 0x4000000
   14c44:	str	r1, [sp, #60]	; 0x3c
   14c48:	mov	r1, ip
   14c4c:	bl	147c8 <__assert_fail@plt+0x36dc>
   14c50:	sub	sp, fp, #24
   14c54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c58:	bl	110d4 <abort@plt>
   14c5c:	push	{fp, lr}
   14c60:	mov	fp, sp
   14c64:	sub	sp, sp, #8
   14c68:	mvn	ip, #0
   14c6c:	str	ip, [sp]
   14c70:	bl	14c7c <__assert_fail@plt+0x3b90>
   14c74:	mov	sp, fp
   14c78:	pop	{fp, pc}
   14c7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14c80:	add	fp, sp, #24
   14c84:	sub	sp, sp, #48	; 0x30
   14c88:	movw	ip, #33136	; 0x8170
   14c8c:	mov	lr, r3
   14c90:	mov	r3, sp
   14c94:	cmp	r1, #0
   14c98:	movt	ip, #2
   14c9c:	cmpne	r2, #0
   14ca0:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   14ca4:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   14ca8:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   14cac:	stm	r3, {r4, r5, r6, r7, r8, r9}
   14cb0:	mov	r3, #10
   14cb4:	str	r3, [sp]
   14cb8:	bne	14cc0 <__assert_fail@plt+0x3bd4>
   14cbc:	bl	110d4 <abort@plt>
   14cc0:	ldr	ip, [fp, #8]
   14cc4:	str	r2, [sp, #44]	; 0x2c
   14cc8:	str	r1, [sp, #40]	; 0x28
   14ccc:	mov	r3, sp
   14cd0:	mov	r1, lr
   14cd4:	mov	r2, ip
   14cd8:	bl	147c8 <__assert_fail@plt+0x36dc>
   14cdc:	sub	sp, fp, #24
   14ce0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ce4:	push	{fp, lr}
   14ce8:	mov	fp, sp
   14cec:	sub	sp, sp, #8
   14cf0:	mov	r3, r2
   14cf4:	mov	r2, r1
   14cf8:	mov	r1, r0
   14cfc:	mvn	r0, #0
   14d00:	str	r0, [sp]
   14d04:	mov	r0, #0
   14d08:	bl	14c7c <__assert_fail@plt+0x3b90>
   14d0c:	mov	sp, fp
   14d10:	pop	{fp, pc}
   14d14:	push	{fp, lr}
   14d18:	mov	fp, sp
   14d1c:	sub	sp, sp, #8
   14d20:	mov	ip, r2
   14d24:	mov	r2, r1
   14d28:	mov	r1, r0
   14d2c:	str	r3, [sp]
   14d30:	mov	r0, #0
   14d34:	mov	r3, ip
   14d38:	bl	14c7c <__assert_fail@plt+0x3b90>
   14d3c:	mov	sp, fp
   14d40:	pop	{fp, pc}
   14d44:	movw	r3, #33040	; 0x8110
   14d48:	movt	r3, #2
   14d4c:	b	147c8 <__assert_fail@plt+0x36dc>
   14d50:	movw	r3, #33040	; 0x8110
   14d54:	mov	r2, r1
   14d58:	mov	r1, r0
   14d5c:	mov	r0, #0
   14d60:	movt	r3, #2
   14d64:	b	147c8 <__assert_fail@plt+0x36dc>
   14d68:	movw	r3, #33040	; 0x8110
   14d6c:	mvn	r2, #0
   14d70:	movt	r3, #2
   14d74:	b	147c8 <__assert_fail@plt+0x36dc>
   14d78:	movw	r3, #33040	; 0x8110
   14d7c:	mov	r1, r0
   14d80:	mov	r0, #0
   14d84:	mvn	r2, #0
   14d88:	movt	r3, #2
   14d8c:	b	147c8 <__assert_fail@plt+0x36dc>
   14d90:	push	{r4, r5, fp, lr}
   14d94:	add	fp, sp, #8
   14d98:	mov	r5, r0
   14d9c:	mov	r4, r1
   14da0:	mov	r0, #0
   14da4:	mov	r2, #5
   14da8:	mov	r1, r5
   14dac:	bl	10ef4 <dcgettext@plt>
   14db0:	cmp	r0, r5
   14db4:	popne	{r4, r5, fp, pc}
   14db8:	bl	1630c <__assert_fail@plt+0x5220>
   14dbc:	ldrb	r1, [r0]
   14dc0:	and	r1, r1, #223	; 0xdf
   14dc4:	cmp	r1, #71	; 0x47
   14dc8:	beq	14e30 <__assert_fail@plt+0x3d44>
   14dcc:	cmp	r1, #85	; 0x55
   14dd0:	bne	14e54 <__assert_fail@plt+0x3d68>
   14dd4:	ldrb	r1, [r0, #1]
   14dd8:	and	r1, r1, #223	; 0xdf
   14ddc:	cmp	r1, #84	; 0x54
   14de0:	bne	14e54 <__assert_fail@plt+0x3d68>
   14de4:	ldrb	r1, [r0, #2]
   14de8:	and	r1, r1, #223	; 0xdf
   14dec:	cmp	r1, #70	; 0x46
   14df0:	ldrbeq	r1, [r0, #3]
   14df4:	cmpeq	r1, #45	; 0x2d
   14df8:	bne	14e54 <__assert_fail@plt+0x3d68>
   14dfc:	ldrb	r1, [r0, #4]
   14e00:	cmp	r1, #56	; 0x38
   14e04:	ldrbeq	r0, [r0, #5]
   14e08:	cmpeq	r0, #0
   14e0c:	bne	14e54 <__assert_fail@plt+0x3d68>
   14e10:	ldrb	r1, [r5]
   14e14:	movw	r2, #29041	; 0x7171
   14e18:	movw	r0, #29045	; 0x7175
   14e1c:	movt	r2, #1
   14e20:	movt	r0, #1
   14e24:	cmp	r1, #96	; 0x60
   14e28:	moveq	r0, r2
   14e2c:	pop	{r4, r5, fp, pc}
   14e30:	ldrb	r1, [r0, #1]
   14e34:	and	r1, r1, #223	; 0xdf
   14e38:	cmp	r1, #66	; 0x42
   14e3c:	bne	14e54 <__assert_fail@plt+0x3d68>
   14e40:	ldrb	r1, [r0, #2]
   14e44:	cmp	r1, #49	; 0x31
   14e48:	ldrbeq	r1, [r0, #3]
   14e4c:	cmpeq	r1, #56	; 0x38
   14e50:	beq	14e70 <__assert_fail@plt+0x3d84>
   14e54:	movw	r1, #29035	; 0x716b
   14e58:	movw	r0, #29039	; 0x716f
   14e5c:	cmp	r4, #9
   14e60:	movt	r1, #1
   14e64:	movt	r0, #1
   14e68:	moveq	r0, r1
   14e6c:	pop	{r4, r5, fp, pc}
   14e70:	ldrb	r1, [r0, #4]
   14e74:	cmp	r1, #48	; 0x30
   14e78:	ldrbeq	r1, [r0, #5]
   14e7c:	cmpeq	r1, #51	; 0x33
   14e80:	bne	14e54 <__assert_fail@plt+0x3d68>
   14e84:	ldrb	r1, [r0, #6]
   14e88:	cmp	r1, #48	; 0x30
   14e8c:	ldrbeq	r0, [r0, #7]
   14e90:	cmpeq	r0, #0
   14e94:	bne	14e54 <__assert_fail@plt+0x3d68>
   14e98:	ldrb	r1, [r5]
   14e9c:	movw	r2, #29049	; 0x7179
   14ea0:	movw	r0, #29053	; 0x717d
   14ea4:	movt	r2, #1
   14ea8:	movt	r0, #1
   14eac:	b	14e24 <__assert_fail@plt+0x3d38>
   14eb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14eb4:	add	fp, sp, #24
   14eb8:	movw	r8, #0
   14ebc:	mov	r6, r2
   14ec0:	mov	r4, r1
   14ec4:	mov	r5, r0
   14ec8:	movt	r8, #32752	; 0x7ff0
   14ecc:	mov	r0, r5
   14ed0:	mov	r1, r4
   14ed4:	mov	r2, r6
   14ed8:	bl	10e94 <read@plt>
   14edc:	mov	r7, r0
   14ee0:	cmn	r0, #1
   14ee4:	bgt	14f0c <__assert_fail@plt+0x3e20>
   14ee8:	bl	11008 <__errno_location@plt>
   14eec:	ldr	r0, [r0]
   14ef0:	cmp	r0, #4
   14ef4:	beq	14ecc <__assert_fail@plt+0x3de0>
   14ef8:	cmp	r6, r8
   14efc:	bls	14f0c <__assert_fail@plt+0x3e20>
   14f00:	cmp	r0, #22
   14f04:	mov	r6, r8
   14f08:	beq	14ecc <__assert_fail@plt+0x3de0>
   14f0c:	mov	r0, r7
   14f10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f18:	add	fp, sp, #24
   14f1c:	sub	sp, sp, #32
   14f20:	ldr	r6, [fp, #12]
   14f24:	ldr	r7, [fp, #8]
   14f28:	mov	r4, r2
   14f2c:	mov	r8, r0
   14f30:	cmp	r1, #0
   14f34:	beq	14f5c <__assert_fail@plt+0x3e70>
   14f38:	movw	r2, #29140	; 0x71d4
   14f3c:	mov	r5, r1
   14f40:	str	r3, [sp, #4]
   14f44:	str	r4, [sp]
   14f48:	mov	r0, r8
   14f4c:	mov	r1, #1
   14f50:	movt	r2, #1
   14f54:	mov	r3, r5
   14f58:	b	14f74 <__assert_fail@plt+0x3e88>
   14f5c:	movw	r2, #29152	; 0x71e0
   14f60:	str	r3, [sp]
   14f64:	mov	r0, r8
   14f68:	mov	r1, #1
   14f6c:	mov	r3, r4
   14f70:	movt	r2, #1
   14f74:	bl	11050 <__fprintf_chk@plt>
   14f78:	movw	r1, #29159	; 0x71e7
   14f7c:	mov	r0, #0
   14f80:	mov	r2, #5
   14f84:	movt	r1, #1
   14f88:	bl	10ef4 <dcgettext@plt>
   14f8c:	movw	r2, #29877	; 0x74b5
   14f90:	mov	r3, r0
   14f94:	movw	r0, #2022	; 0x7e6
   14f98:	mov	r1, #1
   14f9c:	str	r0, [sp]
   14fa0:	movt	r2, #1
   14fa4:	mov	r0, r8
   14fa8:	bl	11050 <__fprintf_chk@plt>
   14fac:	movw	r4, #28256	; 0x6e60
   14fb0:	mov	r1, r8
   14fb4:	movt	r4, #1
   14fb8:	mov	r0, r4
   14fbc:	bl	10e70 <fputs_unlocked@plt>
   14fc0:	movw	r1, #29163	; 0x71eb
   14fc4:	mov	r0, #0
   14fc8:	mov	r2, #5
   14fcc:	movt	r1, #1
   14fd0:	bl	10ef4 <dcgettext@plt>
   14fd4:	movw	r3, #29334	; 0x7296
   14fd8:	mov	r2, r0
   14fdc:	mov	r0, r8
   14fe0:	mov	r1, #1
   14fe4:	movt	r3, #1
   14fe8:	bl	11050 <__fprintf_chk@plt>
   14fec:	mov	r0, r4
   14ff0:	mov	r1, r8
   14ff4:	bl	10e70 <fputs_unlocked@plt>
   14ff8:	cmp	r6, #9
   14ffc:	bhi	15060 <__assert_fail@plt+0x3f74>
   15000:	add	r0, pc, #0
   15004:	ldr	pc, [r0, r6, lsl #2]
   15008:	andeq	r5, r1, r8, lsr r2
   1500c:	andeq	r5, r1, r0, lsr r0
   15010:	andeq	r5, r1, ip, rrx
   15014:	muleq	r1, r4, r0
   15018:	strheq	r5, [r1], -ip
   1501c:	andeq	r5, r1, r4, ror #1
   15020:	andeq	r5, r1, ip, lsl #2
   15024:	andeq	r5, r1, r4, asr #2
   15028:	andeq	r5, r1, r4, ror #3
   1502c:	andeq	r5, r1, ip, lsl #3
   15030:	movw	r1, #29368	; 0x72b8
   15034:	mov	r0, #0
   15038:	mov	r2, #5
   1503c:	movt	r1, #1
   15040:	bl	10ef4 <dcgettext@plt>
   15044:	ldr	r3, [r7]
   15048:	mov	r2, r0
   1504c:	mov	r0, r8
   15050:	mov	r1, #1
   15054:	sub	sp, fp, #24
   15058:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1505c:	b	11050 <__fprintf_chk@plt>
   15060:	movw	r1, #29687	; 0x73f7
   15064:	movt	r1, #1
   15068:	b	15194 <__assert_fail@plt+0x40a8>
   1506c:	movw	r1, #29384	; 0x72c8
   15070:	mov	r0, #0
   15074:	mov	r2, #5
   15078:	movt	r1, #1
   1507c:	bl	10ef4 <dcgettext@plt>
   15080:	mov	r2, r0
   15084:	ldr	r3, [r7]
   15088:	ldr	r0, [r7, #4]
   1508c:	str	r0, [sp]
   15090:	b	15180 <__assert_fail@plt+0x4094>
   15094:	movw	r1, #29407	; 0x72df
   15098:	mov	r0, #0
   1509c:	mov	r2, #5
   150a0:	movt	r1, #1
   150a4:	bl	10ef4 <dcgettext@plt>
   150a8:	ldr	r3, [r7]
   150ac:	mov	r2, r0
   150b0:	ldmib	r7, {r0, r1}
   150b4:	stm	sp, {r0, r1}
   150b8:	b	15180 <__assert_fail@plt+0x4094>
   150bc:	movw	r1, #29435	; 0x72fb
   150c0:	mov	r0, #0
   150c4:	mov	r2, #5
   150c8:	movt	r1, #1
   150cc:	bl	10ef4 <dcgettext@plt>
   150d0:	ldr	r3, [r7]
   150d4:	mov	r2, r0
   150d8:	ldmib	r7, {r0, r1, r7}
   150dc:	stm	sp, {r0, r1, r7}
   150e0:	b	15180 <__assert_fail@plt+0x4094>
   150e4:	movw	r1, #29467	; 0x731b
   150e8:	mov	r0, #0
   150ec:	mov	r2, #5
   150f0:	movt	r1, #1
   150f4:	bl	10ef4 <dcgettext@plt>
   150f8:	ldr	r3, [r7]
   150fc:	mov	r2, r0
   15100:	ldmib	r7, {r0, r1, r6, r7}
   15104:	stm	sp, {r0, r1, r6, r7}
   15108:	b	15180 <__assert_fail@plt+0x4094>
   1510c:	movw	r1, #29503	; 0x733f
   15110:	mov	r0, #0
   15114:	mov	r2, #5
   15118:	movt	r1, #1
   1511c:	bl	10ef4 <dcgettext@plt>
   15120:	ldr	r3, [r7]
   15124:	mov	r2, r0
   15128:	ldmib	r7, {r0, r1, r6}
   1512c:	ldr	r5, [r7, #16]
   15130:	ldr	r7, [r7, #20]
   15134:	stm	sp, {r0, r1, r6}
   15138:	str	r5, [sp, #12]
   1513c:	str	r7, [sp, #16]
   15140:	b	15180 <__assert_fail@plt+0x4094>
   15144:	movw	r1, #29543	; 0x7367
   15148:	mov	r0, #0
   1514c:	mov	r2, #5
   15150:	movt	r1, #1
   15154:	bl	10ef4 <dcgettext@plt>
   15158:	ldr	r3, [r7]
   1515c:	mov	r2, r0
   15160:	ldmib	r7, {r0, r1, r6}
   15164:	ldr	r5, [r7, #16]
   15168:	ldr	r4, [r7, #20]
   1516c:	ldr	r7, [r7, #24]
   15170:	stm	sp, {r0, r1, r6}
   15174:	str	r5, [sp, #12]
   15178:	str	r4, [sp, #16]
   1517c:	str	r7, [sp, #20]
   15180:	mov	r0, r8
   15184:	mov	r1, #1
   15188:	b	15234 <__assert_fail@plt+0x4148>
   1518c:	movw	r1, #29635	; 0x73c3
   15190:	movt	r1, #1
   15194:	mov	r0, #0
   15198:	mov	r2, #5
   1519c:	bl	10ef4 <dcgettext@plt>
   151a0:	mov	ip, r0
   151a4:	ldr	r3, [r7]
   151a8:	ldr	r0, [r7, #4]
   151ac:	ldr	r1, [r7, #8]
   151b0:	ldr	r6, [r7, #12]
   151b4:	ldr	r5, [r7, #16]
   151b8:	ldr	r4, [r7, #20]
   151bc:	ldr	r2, [r7, #24]
   151c0:	ldr	lr, [r7, #28]
   151c4:	ldr	r7, [r7, #32]
   151c8:	stm	sp, {r0, r1, r6}
   151cc:	str	r5, [sp, #12]
   151d0:	str	r4, [sp, #16]
   151d4:	str	r2, [sp, #20]
   151d8:	str	lr, [sp, #24]
   151dc:	str	r7, [sp, #28]
   151e0:	b	15228 <__assert_fail@plt+0x413c>
   151e4:	movw	r1, #29587	; 0x7393
   151e8:	mov	r0, #0
   151ec:	mov	r2, #5
   151f0:	movt	r1, #1
   151f4:	bl	10ef4 <dcgettext@plt>
   151f8:	mov	ip, r0
   151fc:	ldr	r3, [r7]
   15200:	ldmib	r7, {r0, r1, r6}
   15204:	ldr	r5, [r7, #16]
   15208:	ldr	r4, [r7, #20]
   1520c:	ldr	r2, [r7, #24]
   15210:	ldr	r7, [r7, #28]
   15214:	stm	sp, {r0, r1, r6}
   15218:	str	r5, [sp, #12]
   1521c:	str	r4, [sp, #16]
   15220:	str	r2, [sp, #20]
   15224:	str	r7, [sp, #24]
   15228:	mov	r0, r8
   1522c:	mov	r1, #1
   15230:	mov	r2, ip
   15234:	bl	11050 <__fprintf_chk@plt>
   15238:	sub	sp, fp, #24
   1523c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15240:	push	{r4, sl, fp, lr}
   15244:	add	fp, sp, #8
   15248:	sub	sp, sp, #8
   1524c:	ldr	ip, [fp, #8]
   15250:	mov	lr, #0
   15254:	ldr	r4, [ip, lr, lsl #2]
   15258:	add	lr, lr, #1
   1525c:	cmp	r4, #0
   15260:	bne	15254 <__assert_fail@plt+0x4168>
   15264:	sub	r4, lr, #1
   15268:	str	ip, [sp]
   1526c:	str	r4, [sp, #4]
   15270:	bl	14f14 <__assert_fail@plt+0x3e28>
   15274:	sub	sp, fp, #8
   15278:	pop	{r4, sl, fp, pc}
   1527c:	push	{r4, r5, fp, lr}
   15280:	add	fp, sp, #8
   15284:	sub	sp, sp, #48	; 0x30
   15288:	ldr	r4, [fp, #8]
   1528c:	mov	ip, #0
   15290:	add	lr, sp, #8
   15294:	ldr	r5, [r4]
   15298:	cmp	r5, #0
   1529c:	str	r5, [lr, ip, lsl #2]
   152a0:	beq	152b4 <__assert_fail@plt+0x41c8>
   152a4:	add	ip, ip, #1
   152a8:	add	r4, r4, #4
   152ac:	cmp	ip, #10
   152b0:	bcc	15294 <__assert_fail@plt+0x41a8>
   152b4:	str	lr, [sp]
   152b8:	str	ip, [sp, #4]
   152bc:	bl	14f14 <__assert_fail@plt+0x3e28>
   152c0:	sub	sp, fp, #8
   152c4:	pop	{r4, r5, fp, pc}
   152c8:	push	{fp, lr}
   152cc:	mov	fp, sp
   152d0:	sub	sp, sp, #8
   152d4:	add	ip, fp, #8
   152d8:	str	ip, [sp, #4]
   152dc:	str	ip, [sp]
   152e0:	bl	1527c <__assert_fail@plt+0x4190>
   152e4:	mov	sp, fp
   152e8:	pop	{fp, pc}
   152ec:	push	{fp, lr}
   152f0:	mov	fp, sp
   152f4:	movw	r0, #33108	; 0x8154
   152f8:	movt	r0, #2
   152fc:	ldr	r1, [r0]
   15300:	movw	r0, #28256	; 0x6e60
   15304:	movt	r0, #1
   15308:	bl	10e70 <fputs_unlocked@plt>
   1530c:	movw	r1, #29747	; 0x7433
   15310:	mov	r0, #0
   15314:	mov	r2, #5
   15318:	movt	r1, #1
   1531c:	bl	10ef4 <dcgettext@plt>
   15320:	movw	r2, #29767	; 0x7447
   15324:	mov	r1, r0
   15328:	mov	r0, #1
   1532c:	movt	r2, #1
   15330:	bl	1102c <__printf_chk@plt>
   15334:	movw	r1, #29789	; 0x745d
   15338:	mov	r0, #0
   1533c:	mov	r2, #5
   15340:	movt	r1, #1
   15344:	bl	10ef4 <dcgettext@plt>
   15348:	movw	r2, #27742	; 0x6c5e
   1534c:	movw	r3, #28065	; 0x6da1
   15350:	mov	r1, r0
   15354:	mov	r0, #1
   15358:	movt	r2, #1
   1535c:	movt	r3, #1
   15360:	bl	1102c <__printf_chk@plt>
   15364:	movw	r1, #29809	; 0x7471
   15368:	mov	r0, #0
   1536c:	mov	r2, #5
   15370:	movt	r1, #1
   15374:	bl	10ef4 <dcgettext@plt>
   15378:	movw	r2, #29848	; 0x7498
   1537c:	mov	r1, r0
   15380:	mov	r0, #1
   15384:	movt	r2, #1
   15388:	pop	{fp, lr}
   1538c:	b	1102c <__printf_chk@plt>
   15390:	b	15394 <__assert_fail@plt+0x42a8>
   15394:	push	{r4, r5, r6, sl, fp, lr}
   15398:	add	fp, sp, #16
   1539c:	mov	r4, r2
   153a0:	mov	r5, r1
   153a4:	mov	r6, r0
   153a8:	bl	163a4 <__assert_fail@plt+0x52b8>
   153ac:	cmp	r0, #0
   153b0:	popne	{r4, r5, r6, sl, fp, pc}
   153b4:	cmp	r6, #0
   153b8:	beq	153cc <__assert_fail@plt+0x42e0>
   153bc:	cmp	r5, #0
   153c0:	cmpne	r4, #0
   153c4:	bne	153cc <__assert_fail@plt+0x42e0>
   153c8:	pop	{r4, r5, r6, sl, fp, pc}
   153cc:	bl	15820 <__assert_fail@plt+0x4734>
   153d0:	push	{fp, lr}
   153d4:	mov	fp, sp
   153d8:	bl	16070 <__assert_fail@plt+0x4f84>
   153dc:	cmp	r0, #0
   153e0:	popne	{fp, pc}
   153e4:	bl	15820 <__assert_fail@plt+0x4734>
   153e8:	push	{fp, lr}
   153ec:	mov	fp, sp
   153f0:	bl	16070 <__assert_fail@plt+0x4f84>
   153f4:	cmp	r0, #0
   153f8:	popne	{fp, pc}
   153fc:	bl	15820 <__assert_fail@plt+0x4734>
   15400:	push	{fp, lr}
   15404:	mov	fp, sp
   15408:	bl	16070 <__assert_fail@plt+0x4f84>
   1540c:	cmp	r0, #0
   15410:	popne	{fp, pc}
   15414:	bl	15820 <__assert_fail@plt+0x4734>
   15418:	push	{r4, r5, fp, lr}
   1541c:	add	fp, sp, #8
   15420:	mov	r4, r1
   15424:	mov	r5, r0
   15428:	bl	160a0 <__assert_fail@plt+0x4fb4>
   1542c:	cmp	r0, #0
   15430:	popne	{r4, r5, fp, pc}
   15434:	cmp	r5, #0
   15438:	beq	15448 <__assert_fail@plt+0x435c>
   1543c:	cmp	r4, #0
   15440:	bne	15448 <__assert_fail@plt+0x435c>
   15444:	pop	{r4, r5, fp, pc}
   15448:	bl	15820 <__assert_fail@plt+0x4734>
   1544c:	push	{fp, lr}
   15450:	mov	fp, sp
   15454:	cmp	r1, #0
   15458:	orreq	r1, r1, #1
   1545c:	bl	160a0 <__assert_fail@plt+0x4fb4>
   15460:	cmp	r0, #0
   15464:	popne	{fp, pc}
   15468:	bl	15820 <__assert_fail@plt+0x4734>
   1546c:	push	{fp, lr}
   15470:	mov	fp, sp
   15474:	clz	r3, r2
   15478:	lsr	ip, r3, #5
   1547c:	clz	r3, r1
   15480:	lsr	r3, r3, #5
   15484:	orrs	r3, r3, ip
   15488:	movwne	r1, #1
   1548c:	movwne	r2, #1
   15490:	bl	163a4 <__assert_fail@plt+0x52b8>
   15494:	cmp	r0, #0
   15498:	popne	{fp, pc}
   1549c:	bl	15820 <__assert_fail@plt+0x4734>
   154a0:	push	{fp, lr}
   154a4:	mov	fp, sp
   154a8:	mov	r2, r1
   154ac:	mov	r1, r0
   154b0:	mov	r0, #0
   154b4:	bl	163a4 <__assert_fail@plt+0x52b8>
   154b8:	cmp	r0, #0
   154bc:	popne	{fp, pc}
   154c0:	bl	15820 <__assert_fail@plt+0x4734>
   154c4:	mov	r2, r1
   154c8:	mov	r1, r0
   154cc:	mov	r0, #0
   154d0:	b	1546c <__assert_fail@plt+0x4380>
   154d4:	mov	r2, #1
   154d8:	b	154dc <__assert_fail@plt+0x43f0>
   154dc:	push	{r4, r5, fp, lr}
   154e0:	add	fp, sp, #8
   154e4:	ldr	r5, [r1]
   154e8:	mov	r4, r1
   154ec:	cmp	r0, #0
   154f0:	beq	15508 <__assert_fail@plt+0x441c>
   154f4:	mov	r1, #1
   154f8:	add	r1, r1, r5, lsr #1
   154fc:	adds	r5, r5, r1
   15500:	bcc	15520 <__assert_fail@plt+0x4434>
   15504:	bl	15820 <__assert_fail@plt+0x4734>
   15508:	cmp	r5, #0
   1550c:	bne	15520 <__assert_fail@plt+0x4434>
   15510:	mov	r1, #64	; 0x40
   15514:	cmp	r2, #64	; 0x40
   15518:	udiv	r5, r1, r2
   1551c:	addhi	r5, r5, #1
   15520:	mov	r1, r5
   15524:	bl	15394 <__assert_fail@plt+0x42a8>
   15528:	str	r5, [r4]
   1552c:	pop	{r4, r5, fp, pc}
   15530:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15534:	add	fp, sp, #24
   15538:	ldr	r6, [r1]
   1553c:	mov	r8, r1
   15540:	ldr	r4, [fp, #8]
   15544:	add	r1, r6, r6, asr #1
   15548:	cmp	r1, r6
   1554c:	mvnvs	r1, #-2147483648	; 0x80000000
   15550:	cmp	r1, r3
   15554:	mov	r5, r1
   15558:	movgt	r5, r3
   1555c:	cmn	r3, #1
   15560:	movle	r5, r1
   15564:	cmn	r4, #1
   15568:	ble	15588 <__assert_fail@plt+0x449c>
   1556c:	cmp	r4, #0
   15570:	beq	155dc <__assert_fail@plt+0x44f0>
   15574:	cmn	r5, #1
   15578:	ble	155b0 <__assert_fail@plt+0x44c4>
   1557c:	mvn	r7, #-2147483648	; 0x80000000
   15580:	udiv	r1, r7, r4
   15584:	b	155a4 <__assert_fail@plt+0x44b8>
   15588:	cmn	r5, #1
   1558c:	ble	155cc <__assert_fail@plt+0x44e0>
   15590:	cmn	r4, #1
   15594:	beq	155dc <__assert_fail@plt+0x44f0>
   15598:	mov	r1, #-2147483648	; 0x80000000
   1559c:	mvn	r7, #-2147483648	; 0x80000000
   155a0:	sdiv	r1, r1, r4
   155a4:	cmp	r1, r5
   155a8:	bge	155dc <__assert_fail@plt+0x44f0>
   155ac:	b	155ec <__assert_fail@plt+0x4500>
   155b0:	beq	155dc <__assert_fail@plt+0x44f0>
   155b4:	mov	r1, #-2147483648	; 0x80000000
   155b8:	mvn	r7, #-2147483648	; 0x80000000
   155bc:	sdiv	r1, r1, r5
   155c0:	cmp	r1, r4
   155c4:	bge	155dc <__assert_fail@plt+0x44f0>
   155c8:	b	155ec <__assert_fail@plt+0x4500>
   155cc:	mvn	r7, #-2147483648	; 0x80000000
   155d0:	sdiv	r1, r7, r4
   155d4:	cmp	r5, r1
   155d8:	blt	155ec <__assert_fail@plt+0x4500>
   155dc:	mul	r1, r5, r4
   155e0:	mov	r7, #64	; 0x40
   155e4:	cmp	r1, #63	; 0x3f
   155e8:	bgt	155f4 <__assert_fail@plt+0x4508>
   155ec:	sdiv	r5, r7, r4
   155f0:	mul	r1, r5, r4
   155f4:	cmp	r0, #0
   155f8:	moveq	r7, #0
   155fc:	streq	r7, [r8]
   15600:	sub	r7, r5, r6
   15604:	cmp	r7, r2
   15608:	bge	156ac <__assert_fail@plt+0x45c0>
   1560c:	add	r5, r6, r2
   15610:	mov	r2, #0
   15614:	mov	r1, #0
   15618:	cmp	r5, r3
   1561c:	movwgt	r2, #1
   15620:	cmn	r3, #1
   15624:	movwgt	r1, #1
   15628:	cmp	r5, r6
   1562c:	bvs	15694 <__assert_fail@plt+0x45a8>
   15630:	ands	r1, r1, r2
   15634:	bne	15694 <__assert_fail@plt+0x45a8>
   15638:	cmn	r4, #1
   1563c:	ble	1565c <__assert_fail@plt+0x4570>
   15640:	cmp	r4, #0
   15644:	beq	156a8 <__assert_fail@plt+0x45bc>
   15648:	cmn	r5, #1
   1564c:	ble	15680 <__assert_fail@plt+0x4594>
   15650:	mvn	r1, #-2147483648	; 0x80000000
   15654:	udiv	r1, r1, r4
   15658:	b	15674 <__assert_fail@plt+0x4588>
   1565c:	cmn	r5, #1
   15660:	ble	15698 <__assert_fail@plt+0x45ac>
   15664:	cmn	r4, #1
   15668:	beq	156a8 <__assert_fail@plt+0x45bc>
   1566c:	mov	r1, #-2147483648	; 0x80000000
   15670:	sdiv	r1, r1, r4
   15674:	cmp	r1, r5
   15678:	bge	156a8 <__assert_fail@plt+0x45bc>
   1567c:	b	15694 <__assert_fail@plt+0x45a8>
   15680:	beq	156a8 <__assert_fail@plt+0x45bc>
   15684:	mov	r1, #-2147483648	; 0x80000000
   15688:	sdiv	r1, r1, r5
   1568c:	cmp	r1, r4
   15690:	bge	156a8 <__assert_fail@plt+0x45bc>
   15694:	bl	15820 <__assert_fail@plt+0x4734>
   15698:	mvn	r1, #-2147483648	; 0x80000000
   1569c:	sdiv	r1, r1, r4
   156a0:	cmp	r5, r1
   156a4:	blt	15694 <__assert_fail@plt+0x45a8>
   156a8:	mul	r1, r5, r4
   156ac:	bl	15418 <__assert_fail@plt+0x432c>
   156b0:	str	r5, [r8]
   156b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156b8:	push	{fp, lr}
   156bc:	mov	fp, sp
   156c0:	mov	r1, #1
   156c4:	bl	1601c <__assert_fail@plt+0x4f30>
   156c8:	cmp	r0, #0
   156cc:	popne	{fp, pc}
   156d0:	bl	15820 <__assert_fail@plt+0x4734>
   156d4:	push	{fp, lr}
   156d8:	mov	fp, sp
   156dc:	bl	1601c <__assert_fail@plt+0x4f30>
   156e0:	cmp	r0, #0
   156e4:	popne	{fp, pc}
   156e8:	bl	15820 <__assert_fail@plt+0x4734>
   156ec:	push	{fp, lr}
   156f0:	mov	fp, sp
   156f4:	mov	r1, #1
   156f8:	bl	1601c <__assert_fail@plt+0x4f30>
   156fc:	cmp	r0, #0
   15700:	popne	{fp, pc}
   15704:	bl	15820 <__assert_fail@plt+0x4734>
   15708:	push	{fp, lr}
   1570c:	mov	fp, sp
   15710:	bl	1601c <__assert_fail@plt+0x4f30>
   15714:	cmp	r0, #0
   15718:	popne	{fp, pc}
   1571c:	bl	15820 <__assert_fail@plt+0x4734>
   15720:	push	{r4, r5, r6, sl, fp, lr}
   15724:	add	fp, sp, #16
   15728:	mov	r5, r0
   1572c:	mov	r0, r1
   15730:	mov	r4, r1
   15734:	bl	16070 <__assert_fail@plt+0x4f84>
   15738:	cmp	r0, #0
   1573c:	beq	15758 <__assert_fail@plt+0x466c>
   15740:	mov	r1, r5
   15744:	mov	r2, r4
   15748:	mov	r6, r0
   1574c:	bl	10ec4 <memcpy@plt>
   15750:	mov	r0, r6
   15754:	pop	{r4, r5, r6, sl, fp, pc}
   15758:	bl	15820 <__assert_fail@plt+0x4734>
   1575c:	push	{r4, r5, r6, sl, fp, lr}
   15760:	add	fp, sp, #16
   15764:	mov	r5, r0
   15768:	mov	r0, r1
   1576c:	mov	r4, r1
   15770:	bl	16070 <__assert_fail@plt+0x4f84>
   15774:	cmp	r0, #0
   15778:	beq	15794 <__assert_fail@plt+0x46a8>
   1577c:	mov	r1, r5
   15780:	mov	r2, r4
   15784:	mov	r6, r0
   15788:	bl	10ec4 <memcpy@plt>
   1578c:	mov	r0, r6
   15790:	pop	{r4, r5, r6, sl, fp, pc}
   15794:	bl	15820 <__assert_fail@plt+0x4734>
   15798:	push	{r4, r5, r6, sl, fp, lr}
   1579c:	add	fp, sp, #16
   157a0:	mov	r5, r0
   157a4:	add	r0, r1, #1
   157a8:	mov	r4, r1
   157ac:	bl	16070 <__assert_fail@plt+0x4f84>
   157b0:	cmp	r0, #0
   157b4:	beq	157dc <__assert_fail@plt+0x46f0>
   157b8:	mov	r6, r0
   157bc:	mov	r0, #0
   157c0:	mov	r1, r5
   157c4:	mov	r2, r4
   157c8:	strb	r0, [r6, r4]
   157cc:	mov	r0, r6
   157d0:	bl	10ec4 <memcpy@plt>
   157d4:	mov	r0, r6
   157d8:	pop	{r4, r5, r6, sl, fp, pc}
   157dc:	bl	15820 <__assert_fail@plt+0x4734>
   157e0:	push	{r4, r5, r6, sl, fp, lr}
   157e4:	add	fp, sp, #16
   157e8:	mov	r4, r0
   157ec:	bl	10fe4 <strlen@plt>
   157f0:	add	r5, r0, #1
   157f4:	mov	r0, r5
   157f8:	bl	16070 <__assert_fail@plt+0x4f84>
   157fc:	cmp	r0, #0
   15800:	beq	1581c <__assert_fail@plt+0x4730>
   15804:	mov	r1, r4
   15808:	mov	r2, r5
   1580c:	mov	r6, r0
   15810:	bl	10ec4 <memcpy@plt>
   15814:	mov	r0, r6
   15818:	pop	{r4, r5, r6, sl, fp, pc}
   1581c:	bl	15820 <__assert_fail@plt+0x4734>
   15820:	push	{fp, lr}
   15824:	mov	fp, sp
   15828:	movw	r0, #33020	; 0x80fc
   1582c:	movw	r1, #29924	; 0x74e4
   15830:	mov	r2, #5
   15834:	movt	r0, #2
   15838:	movt	r1, #1
   1583c:	ldr	r4, [r0]
   15840:	mov	r0, #0
   15844:	bl	10ef4 <dcgettext@plt>
   15848:	movw	r2, #27789	; 0x6c8d
   1584c:	mov	r3, r0
   15850:	mov	r0, r4
   15854:	mov	r1, #0
   15858:	movt	r2, #1
   1585c:	bl	10f78 <error@plt>
   15860:	bl	110d4 <abort@plt>
   15864:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15868:	add	fp, sp, #24
   1586c:	sub	sp, sp, #16
   15870:	mov	r8, r0
   15874:	ldr	r0, [fp, #16]
   15878:	mov	r5, r3
   1587c:	mov	r6, r2
   15880:	mov	r2, r1
   15884:	add	r3, sp, #8
   15888:	mov	r1, #0
   1588c:	str	r0, [sp]
   15890:	mov	r0, r8
   15894:	bl	15964 <__assert_fail@plt+0x4878>
   15898:	cmp	r0, #0
   1589c:	bne	15930 <__assert_fail@plt+0x4844>
   158a0:	ldr	r4, [sp, #8]
   158a4:	ldr	r7, [sp, #12]
   158a8:	subs	r0, r4, r6
   158ac:	sbcs	r0, r7, r5
   158b0:	bcc	158d4 <__assert_fail@plt+0x47e8>
   158b4:	ldr	r1, [fp, #8]
   158b8:	ldr	r0, [fp, #12]
   158bc:	subs	r1, r1, r4
   158c0:	sbcs	r0, r0, r7
   158c4:	movcs	r0, r4
   158c8:	movcs	r1, r7
   158cc:	subcs	sp, fp, #24
   158d0:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   158d4:	bl	11008 <__errno_location@plt>
   158d8:	subs	r1, r4, #1073741824	; 0x40000000
   158dc:	sbcs	r1, r7, #0
   158e0:	bcc	158ec <__assert_fail@plt+0x4800>
   158e4:	mov	r1, #75	; 0x4b
   158e8:	b	158f0 <__assert_fail@plt+0x4804>
   158ec:	mov	r1, #34	; 0x22
   158f0:	str	r1, [r0]
   158f4:	ldr	r6, [r0]
   158f8:	ldr	r4, [fp, #24]
   158fc:	ldr	r5, [fp, #20]
   15900:	mov	r0, r8
   15904:	bl	14d78 <__assert_fail@plt+0x3c8c>
   15908:	subs	r1, r6, #22
   1590c:	movw	r2, #27785	; 0x6c89
   15910:	str	r0, [sp]
   15914:	mov	r3, r5
   15918:	movne	r1, r6
   1591c:	cmp	r4, #0
   15920:	movt	r2, #1
   15924:	movweq	r4, #1
   15928:	mov	r0, r4
   1592c:	bl	10f78 <error@plt>
   15930:	cmp	r0, #1
   15934:	beq	1594c <__assert_fail@plt+0x4860>
   15938:	cmp	r0, #3
   1593c:	bne	15954 <__assert_fail@plt+0x4868>
   15940:	bl	11008 <__errno_location@plt>
   15944:	mov	r1, #0
   15948:	b	158f0 <__assert_fail@plt+0x4804>
   1594c:	bl	11008 <__errno_location@plt>
   15950:	b	158e4 <__assert_fail@plt+0x47f8>
   15954:	bl	11008 <__errno_location@plt>
   15958:	b	158f4 <__assert_fail@plt+0x4808>
   1595c:	mov	r1, #10
   15960:	b	15864 <__assert_fail@plt+0x4778>
   15964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15968:	add	fp, sp, #28
   1596c:	sub	sp, sp, #20
   15970:	cmp	r2, #37	; 0x25
   15974:	bcs	15ffc <__assert_fail@plt+0x4f10>
   15978:	mov	r8, r3
   1597c:	mov	r5, r2
   15980:	mov	r6, r1
   15984:	mov	r4, r0
   15988:	bl	11008 <__errno_location@plt>
   1598c:	mov	r7, r0
   15990:	mov	r0, #0
   15994:	str	r0, [r7]
   15998:	bl	10fcc <__ctype_b_loc@plt>
   1599c:	ldr	r1, [r0]
   159a0:	mov	r2, r4
   159a4:	ldrb	r0, [r2], #1
   159a8:	add	r3, r1, r0, lsl #1
   159ac:	ldrb	r3, [r3, #1]
   159b0:	tst	r3, #32
   159b4:	bne	159a4 <__assert_fail@plt+0x48b8>
   159b8:	add	sl, sp, #16
   159bc:	cmp	r6, #0
   159c0:	movne	sl, r6
   159c4:	mov	r6, #4
   159c8:	cmp	r0, #45	; 0x2d
   159cc:	beq	15ff0 <__assert_fail@plt+0x4f04>
   159d0:	mov	r0, r4
   159d4:	mov	r1, sl
   159d8:	mov	r2, r5
   159dc:	str	r8, [sp, #12]
   159e0:	bl	11044 <strtoumax@plt>
   159e4:	ldr	r5, [sl]
   159e8:	cmp	r5, r4
   159ec:	beq	15a14 <__assert_fail@plt+0x4928>
   159f0:	mov	r8, r0
   159f4:	ldr	r0, [r7]
   159f8:	mov	r9, r1
   159fc:	cmp	r0, #0
   15a00:	beq	15a44 <__assert_fail@plt+0x4958>
   15a04:	cmp	r0, #34	; 0x22
   15a08:	bne	15ff0 <__assert_fail@plt+0x4f04>
   15a0c:	mov	r6, #1
   15a10:	b	15a48 <__assert_fail@plt+0x495c>
   15a14:	ldr	r0, [fp, #8]
   15a18:	cmp	r0, #0
   15a1c:	ldrbne	r1, [r4]
   15a20:	cmpne	r1, #0
   15a24:	beq	15ff0 <__assert_fail@plt+0x4f04>
   15a28:	bl	10ff0 <strchr@plt>
   15a2c:	cmp	r0, #0
   15a30:	beq	15ff0 <__assert_fail@plt+0x4f04>
   15a34:	mov	r6, #0
   15a38:	mov	r8, #1
   15a3c:	mov	r9, #0
   15a40:	b	15a54 <__assert_fail@plt+0x4968>
   15a44:	mov	r6, r0
   15a48:	ldr	r0, [fp, #8]
   15a4c:	cmp	r0, #0
   15a50:	beq	15fe8 <__assert_fail@plt+0x4efc>
   15a54:	ldrb	r7, [r5]
   15a58:	cmp	r7, #0
   15a5c:	beq	15fe8 <__assert_fail@plt+0x4efc>
   15a60:	ldr	r0, [fp, #8]
   15a64:	mov	r1, r7
   15a68:	bl	10ff0 <strchr@plt>
   15a6c:	cmp	r0, #0
   15a70:	beq	15b78 <__assert_fail@plt+0x4a8c>
   15a74:	sub	r0, r7, #69	; 0x45
   15a78:	mov	r1, #1
   15a7c:	mov	r3, #0
   15a80:	mov	r4, #1024	; 0x400
   15a84:	cmp	r0, #21
   15a88:	str	r1, [sp, #8]
   15a8c:	bhi	15aa4 <__assert_fail@plt+0x49b8>
   15a90:	movw	r2, #35141	; 0x8945
   15a94:	mov	r1, #1
   15a98:	movt	r2, #48	; 0x30
   15a9c:	tst	r2, r1, lsl r0
   15aa0:	bne	15ac0 <__assert_fail@plt+0x49d4>
   15aa4:	sub	r0, r7, #103	; 0x67
   15aa8:	cmp	r0, #13
   15aac:	bhi	15af4 <__assert_fail@plt+0x4a08>
   15ab0:	mov	r1, #1
   15ab4:	movw	r2, #8273	; 0x2051
   15ab8:	tst	r2, r1, lsl r0
   15abc:	beq	15af4 <__assert_fail@plt+0x4a08>
   15ac0:	ldr	r0, [fp, #8]
   15ac4:	mov	r1, #48	; 0x30
   15ac8:	bl	10ff0 <strchr@plt>
   15acc:	cmp	r0, #0
   15ad0:	beq	15af0 <__assert_fail@plt+0x4a04>
   15ad4:	ldrb	r0, [r5, #1]
   15ad8:	cmp	r0, #66	; 0x42
   15adc:	cmpne	r0, #68	; 0x44
   15ae0:	bne	15c08 <__assert_fail@plt+0x4b1c>
   15ae4:	mov	r4, #1000	; 0x3e8
   15ae8:	mov	r0, #2
   15aec:	str	r0, [sp, #8]
   15af0:	mov	r3, #0
   15af4:	cmp	r7, #89	; 0x59
   15af8:	stm	sp, {r5, r6}
   15afc:	bgt	15b84 <__assert_fail@plt+0x4a98>
   15b00:	sub	r0, r7, #66	; 0x42
   15b04:	cmp	r0, #14
   15b08:	bhi	15c2c <__assert_fail@plt+0x4b40>
   15b0c:	add	r1, pc, #0
   15b10:	ldr	pc, [r1, r0, lsl #2]
   15b14:	andeq	r5, r1, r0, asr fp
   15b18:	ldrdeq	r5, [r1], -ip
   15b1c:	ldrdeq	r5, [r1], -ip
   15b20:	strdeq	r5, [r1], -r0
   15b24:	ldrdeq	r5, [r1], -ip
   15b28:	andeq	r5, r1, r0, ror #25
   15b2c:	ldrdeq	r5, [r1], -ip
   15b30:	ldrdeq	r5, [r1], -ip
   15b34:	ldrdeq	r5, [r1], -ip
   15b38:	andeq	r5, r1, ip, asr #26
   15b3c:	ldrdeq	r5, [r1], -ip
   15b40:	muleq	r1, r0, sp
   15b44:	ldrdeq	r5, [r1], -ip
   15b48:	ldrdeq	r5, [r1], -ip
   15b4c:	andeq	r5, r1, ip, asr pc
   15b50:	mov	r1, #0
   15b54:	lsl	r3, r9, #10
   15b58:	lsl	r0, r8, #10
   15b5c:	lsr	r2, r9, #22
   15b60:	cmp	r1, r9, lsr #22
   15b64:	orr	r3, r3, r8, lsr #22
   15b68:	mvnne	r0, #0
   15b6c:	movwne	r2, #1
   15b70:	cmp	r1, r9, lsr #22
   15b74:	b	15bf8 <__assert_fail@plt+0x4b0c>
   15b78:	ldr	r0, [sp, #12]
   15b7c:	orr	r6, r6, #2
   15b80:	b	15fec <__assert_fail@plt+0x4f00>
   15b84:	cmp	r7, #115	; 0x73
   15b88:	bgt	15ca8 <__assert_fail@plt+0x4bbc>
   15b8c:	sub	r0, r7, #98	; 0x62
   15b90:	cmp	r0, #11
   15b94:	bhi	15e68 <__assert_fail@plt+0x4d7c>
   15b98:	add	r1, pc, #4
   15b9c:	mov	r2, #0
   15ba0:	ldr	pc, [r1, r0, lsl #2]
   15ba4:	ldrdeq	r5, [r1], -r4
   15ba8:	andeq	r5, r1, r4, asr #31
   15bac:	ldrdeq	r5, [r1], -ip
   15bb0:	ldrdeq	r5, [r1], -ip
   15bb4:	ldrdeq	r5, [r1], -ip
   15bb8:	andeq	r5, r1, r0, ror #25
   15bbc:	ldrdeq	r5, [r1], -ip
   15bc0:	ldrdeq	r5, [r1], -ip
   15bc4:	ldrdeq	r5, [r1], -ip
   15bc8:	andeq	r5, r1, ip, asr #26
   15bcc:	ldrdeq	r5, [r1], -ip
   15bd0:	muleq	r1, r0, sp
   15bd4:	mov	r1, #0
   15bd8:	lsl	r3, r9, #9
   15bdc:	lsl	r0, r8, #9
   15be0:	lsr	r2, r9, #23
   15be4:	cmp	r1, r9, lsr #23
   15be8:	orr	r3, r3, r8, lsr #23
   15bec:	mvnne	r0, #0
   15bf0:	movwne	r2, #1
   15bf4:	cmp	r1, r9, lsr #23
   15bf8:	mvnne	r3, #0
   15bfc:	mov	r8, r0
   15c00:	mov	r9, r3
   15c04:	b	15fc4 <__assert_fail@plt+0x4ed8>
   15c08:	cmp	r0, #105	; 0x69
   15c0c:	mov	r3, #0
   15c10:	bne	15af4 <__assert_fail@plt+0x4a08>
   15c14:	ldrb	r0, [r5, #2]
   15c18:	mov	r1, #1
   15c1c:	cmp	r0, #66	; 0x42
   15c20:	movweq	r1, #3
   15c24:	str	r1, [sp, #8]
   15c28:	b	15af4 <__assert_fail@plt+0x4a08>
   15c2c:	cmp	r7, #84	; 0x54
   15c30:	beq	15dfc <__assert_fail@plt+0x4d10>
   15c34:	cmp	r7, #89	; 0x59
   15c38:	bne	15edc <__assert_fail@plt+0x4df0>
   15c3c:	mvn	r0, #0
   15c40:	mvn	r1, #0
   15c44:	mov	r2, r4
   15c48:	mov	r5, r3
   15c4c:	bl	165ac <__assert_fail@plt+0x54c0>
   15c50:	mov	ip, r5
   15c54:	mvn	lr, #0
   15c58:	mov	r2, #0
   15c5c:	mvn	r3, #7
   15c60:	mov	r5, r8
   15c64:	mov	r7, r9
   15c68:	umull	r8, r6, r5, r4
   15c6c:	mvn	r9, #0
   15c70:	mla	r6, r5, ip, r6
   15c74:	subs	r5, r0, r5
   15c78:	sbcs	r5, r1, r7
   15c7c:	mov	r5, #0
   15c80:	movwcc	r5, #1
   15c84:	cmp	r5, #0
   15c88:	mlaeq	r9, r7, r4, r6
   15c8c:	movne	r8, lr
   15c90:	orrne	r2, r2, #1
   15c94:	adds	r3, r3, #1
   15c98:	mov	r5, r8
   15c9c:	mov	r7, r9
   15ca0:	bne	15c68 <__assert_fail@plt+0x4b7c>
   15ca4:	b	15fc4 <__assert_fail@plt+0x4ed8>
   15ca8:	cmp	r7, #116	; 0x74
   15cac:	beq	15dfc <__assert_fail@plt+0x4d10>
   15cb0:	cmp	r7, #119	; 0x77
   15cb4:	bne	15edc <__assert_fail@plt+0x4df0>
   15cb8:	lsl	r1, r9, #1
   15cbc:	lsl	r0, r8, #1
   15cc0:	cmp	r9, #0
   15cc4:	lsr	r2, r9, #31
   15cc8:	orr	r1, r1, r8, lsr #31
   15ccc:	mvnlt	r0, #0
   15cd0:	mvnlt	r1, #0
   15cd4:	mov	r8, r0
   15cd8:	mov	r9, r1
   15cdc:	b	15fc4 <__assert_fail@plt+0x4ed8>
   15ce0:	mvn	r0, #0
   15ce4:	mvn	r1, #0
   15ce8:	mov	r2, r4
   15cec:	mov	r5, r3
   15cf0:	bl	165ac <__assert_fail@plt+0x54c0>
   15cf4:	mov	ip, r5
   15cf8:	mvn	lr, #0
   15cfc:	mov	r2, #0
   15d00:	mvn	r3, #2
   15d04:	mov	r6, r8
   15d08:	mov	r5, r9
   15d0c:	umull	r8, r7, r6, r4
   15d10:	mvn	r9, #0
   15d14:	mla	r7, r6, ip, r7
   15d18:	subs	r6, r0, r6
   15d1c:	sbcs	r6, r1, r5
   15d20:	mov	r6, #0
   15d24:	movwcc	r6, #1
   15d28:	cmp	r6, #0
   15d2c:	mlaeq	r9, r5, r4, r7
   15d30:	movne	r8, lr
   15d34:	orrne	r2, r2, #1
   15d38:	adds	r3, r3, #1
   15d3c:	mov	r6, r8
   15d40:	mov	r5, r9
   15d44:	bne	15d0c <__assert_fail@plt+0x4c20>
   15d48:	b	15fc4 <__assert_fail@plt+0x4ed8>
   15d4c:	mvn	r0, #0
   15d50:	mvn	r1, #0
   15d54:	mov	r2, r4
   15d58:	mov	r5, r3
   15d5c:	bl	165ac <__assert_fail@plt+0x54c0>
   15d60:	subs	r0, r0, r8
   15d64:	mov	r2, #0
   15d68:	sbcs	r0, r1, r9
   15d6c:	movwcc	r2, #1
   15d70:	umull	r0, r1, r8, r4
   15d74:	mla	r1, r8, r5, r1
   15d78:	cmp	r2, #0
   15d7c:	mla	r9, r9, r4, r1
   15d80:	mvnne	r0, #0
   15d84:	mvnne	r9, #0
   15d88:	mov	r8, r0
   15d8c:	b	15fc4 <__assert_fail@plt+0x4ed8>
   15d90:	mvn	r0, #0
   15d94:	mvn	r1, #0
   15d98:	mov	r2, r4
   15d9c:	mov	r5, r3
   15da0:	bl	165ac <__assert_fail@plt+0x54c0>
   15da4:	mov	ip, r5
   15da8:	mvn	lr, #0
   15dac:	mov	r2, #0
   15db0:	mvn	r3, #1
   15db4:	mov	r6, r8
   15db8:	mov	r5, r9
   15dbc:	umull	r8, r7, r6, r4
   15dc0:	mvn	r9, #0
   15dc4:	mla	r7, r6, ip, r7
   15dc8:	subs	r6, r0, r6
   15dcc:	sbcs	r6, r1, r5
   15dd0:	mov	r6, #0
   15dd4:	movwcc	r6, #1
   15dd8:	cmp	r6, #0
   15ddc:	mlaeq	r9, r5, r4, r7
   15de0:	movne	r8, lr
   15de4:	orrne	r2, r2, #1
   15de8:	adds	r3, r3, #1
   15dec:	mov	r6, r8
   15df0:	mov	r5, r9
   15df4:	bne	15dbc <__assert_fail@plt+0x4cd0>
   15df8:	b	15fc4 <__assert_fail@plt+0x4ed8>
   15dfc:	mvn	r0, #0
   15e00:	mvn	r1, #0
   15e04:	mov	r2, r4
   15e08:	mov	r5, r3
   15e0c:	bl	165ac <__assert_fail@plt+0x54c0>
   15e10:	mov	ip, r5
   15e14:	mvn	lr, #0
   15e18:	mov	r2, #0
   15e1c:	mvn	r3, #3
   15e20:	mov	r6, r8
   15e24:	mov	r5, r9
   15e28:	umull	r8, r7, r6, r4
   15e2c:	mvn	r9, #0
   15e30:	mla	r7, r6, ip, r7
   15e34:	subs	r6, r0, r6
   15e38:	sbcs	r6, r1, r5
   15e3c:	mov	r6, #0
   15e40:	movwcc	r6, #1
   15e44:	cmp	r6, #0
   15e48:	mlaeq	r9, r5, r4, r7
   15e4c:	movne	r8, lr
   15e50:	orrne	r2, r2, #1
   15e54:	adds	r3, r3, #1
   15e58:	mov	r6, r8
   15e5c:	mov	r5, r9
   15e60:	bne	15e28 <__assert_fail@plt+0x4d3c>
   15e64:	b	15fc4 <__assert_fail@plt+0x4ed8>
   15e68:	cmp	r7, #90	; 0x5a
   15e6c:	bne	15edc <__assert_fail@plt+0x4df0>
   15e70:	mvn	r0, #0
   15e74:	mvn	r1, #0
   15e78:	mov	r2, r4
   15e7c:	mov	r5, r3
   15e80:	bl	165ac <__assert_fail@plt+0x54c0>
   15e84:	mov	ip, r5
   15e88:	mvn	lr, #0
   15e8c:	mov	r2, #0
   15e90:	mvn	r3, #6
   15e94:	mov	r5, r8
   15e98:	mov	r7, r9
   15e9c:	umull	r8, r6, r5, r4
   15ea0:	mvn	r9, #0
   15ea4:	mla	r6, r5, ip, r6
   15ea8:	subs	r5, r0, r5
   15eac:	sbcs	r5, r1, r7
   15eb0:	mov	r5, #0
   15eb4:	movwcc	r5, #1
   15eb8:	cmp	r5, #0
   15ebc:	mlaeq	r9, r7, r4, r6
   15ec0:	movne	r8, lr
   15ec4:	orrne	r2, r2, #1
   15ec8:	adds	r3, r3, #1
   15ecc:	mov	r5, r8
   15ed0:	mov	r7, r9
   15ed4:	bne	15e9c <__assert_fail@plt+0x4db0>
   15ed8:	b	15fc4 <__assert_fail@plt+0x4ed8>
   15edc:	ldr	r0, [sp, #12]
   15ee0:	strd	r8, [r0]
   15ee4:	ldr	r6, [sp, #4]
   15ee8:	orr	r6, r6, #2
   15eec:	b	15ff0 <__assert_fail@plt+0x4f04>
   15ef0:	mvn	r0, #0
   15ef4:	mvn	r1, #0
   15ef8:	mov	r2, r4
   15efc:	mov	r5, r3
   15f00:	bl	165ac <__assert_fail@plt+0x54c0>
   15f04:	mov	ip, r5
   15f08:	mvn	lr, #0
   15f0c:	mov	r2, #0
   15f10:	mvn	r3, #5
   15f14:	mov	r5, r8
   15f18:	mov	r7, r9
   15f1c:	umull	r8, r6, r5, r4
   15f20:	mvn	r9, #0
   15f24:	mla	r6, r5, ip, r6
   15f28:	subs	r5, r0, r5
   15f2c:	sbcs	r5, r1, r7
   15f30:	mov	r5, #0
   15f34:	movwcc	r5, #1
   15f38:	cmp	r5, #0
   15f3c:	mlaeq	r9, r7, r4, r6
   15f40:	movne	r8, lr
   15f44:	orrne	r2, r2, #1
   15f48:	adds	r3, r3, #1
   15f4c:	mov	r5, r8
   15f50:	mov	r7, r9
   15f54:	bne	15f1c <__assert_fail@plt+0x4e30>
   15f58:	b	15fc4 <__assert_fail@plt+0x4ed8>
   15f5c:	mvn	r0, #0
   15f60:	mvn	r1, #0
   15f64:	mov	r2, r4
   15f68:	mov	r5, r3
   15f6c:	bl	165ac <__assert_fail@plt+0x54c0>
   15f70:	mov	ip, r5
   15f74:	mvn	lr, #0
   15f78:	mov	r2, #0
   15f7c:	mvn	r3, #4
   15f80:	mov	r5, r8
   15f84:	mov	r7, r9
   15f88:	umull	r8, r6, r5, r4
   15f8c:	mvn	r9, #0
   15f90:	mla	r6, r5, ip, r6
   15f94:	subs	r5, r0, r5
   15f98:	sbcs	r5, r1, r7
   15f9c:	mov	r5, #0
   15fa0:	movwcc	r5, #1
   15fa4:	cmp	r5, #0
   15fa8:	mlaeq	r9, r7, r4, r6
   15fac:	movne	r8, lr
   15fb0:	orrne	r2, r2, #1
   15fb4:	adds	r3, r3, #1
   15fb8:	mov	r5, r8
   15fbc:	mov	r7, r9
   15fc0:	bne	15f88 <__assert_fail@plt+0x4e9c>
   15fc4:	ldr	r1, [sp]
   15fc8:	ldr	r3, [sp, #8]
   15fcc:	ldr	r6, [sp, #4]
   15fd0:	add	r0, r1, r3
   15fd4:	orr	r6, r2, r6
   15fd8:	str	r0, [sl]
   15fdc:	ldrb	r0, [r1, r3]
   15fe0:	cmp	r0, #0
   15fe4:	orrne	r6, r6, #2
   15fe8:	ldr	r0, [sp, #12]
   15fec:	strd	r8, [r0]
   15ff0:	mov	r0, r6
   15ff4:	sub	sp, fp, #28
   15ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ffc:	movw	r0, #29941	; 0x74f5
   16000:	movw	r1, #29979	; 0x751b
   16004:	movw	r3, #29995	; 0x752b
   16008:	mov	r2, #85	; 0x55
   1600c:	movt	r0, #1
   16010:	movt	r1, #1
   16014:	movt	r3, #1
   16018:	bl	110ec <__assert_fail@plt>
   1601c:	clz	r2, r1
   16020:	clz	r3, r0
   16024:	lsr	r2, r2, #5
   16028:	lsr	r3, r3, #5
   1602c:	orrs	r2, r3, r2
   16030:	movwne	r1, #1
   16034:	movwne	r0, #1
   16038:	cmp	r1, #0
   1603c:	beq	1606c <__assert_fail@plt+0x4f80>
   16040:	mvn	r2, #-2147483648	; 0x80000000
   16044:	udiv	r2, r2, r1
   16048:	cmp	r2, r0
   1604c:	bcs	1606c <__assert_fail@plt+0x4f80>
   16050:	push	{fp, lr}
   16054:	mov	fp, sp
   16058:	bl	11008 <__errno_location@plt>
   1605c:	mov	r1, #12
   16060:	str	r1, [r0]
   16064:	mov	r0, #0
   16068:	pop	{fp, pc}
   1606c:	b	10e64 <calloc@plt>
   16070:	cmp	r0, #0
   16074:	movweq	r0, #1
   16078:	cmn	r0, #1
   1607c:	ble	16084 <__assert_fail@plt+0x4f98>
   16080:	b	10f90 <malloc@plt>
   16084:	push	{fp, lr}
   16088:	mov	fp, sp
   1608c:	bl	11008 <__errno_location@plt>
   16090:	mov	r1, #12
   16094:	str	r1, [r0]
   16098:	mov	r0, #0
   1609c:	pop	{fp, pc}
   160a0:	push	{fp, lr}
   160a4:	mov	fp, sp
   160a8:	cmp	r0, #0
   160ac:	beq	160c8 <__assert_fail@plt+0x4fdc>
   160b0:	cmp	r1, #0
   160b4:	beq	160d4 <__assert_fail@plt+0x4fe8>
   160b8:	cmn	r1, #1
   160bc:	ble	160dc <__assert_fail@plt+0x4ff0>
   160c0:	pop	{fp, lr}
   160c4:	b	10f00 <realloc@plt>
   160c8:	mov	r0, r1
   160cc:	pop	{fp, lr}
   160d0:	b	16070 <__assert_fail@plt+0x4f84>
   160d4:	bl	131c4 <__assert_fail@plt+0x20d8>
   160d8:	b	160e8 <__assert_fail@plt+0x4ffc>
   160dc:	bl	11008 <__errno_location@plt>
   160e0:	mov	r1, #12
   160e4:	str	r1, [r0]
   160e8:	mov	r0, #0
   160ec:	pop	{fp, pc}
   160f0:	push	{r4, r5, r6, sl, fp, lr}
   160f4:	add	fp, sp, #16
   160f8:	mov	r4, r0
   160fc:	bl	10f54 <__fpending@plt>
   16100:	mov	r5, r0
   16104:	mov	r0, r4
   16108:	bl	10f60 <ferror_unlocked@plt>
   1610c:	mov	r6, r0
   16110:	mov	r0, r4
   16114:	bl	16170 <__assert_fail@plt+0x5084>
   16118:	cmp	r6, #0
   1611c:	beq	1613c <__assert_fail@plt+0x5050>
   16120:	mvn	r4, #0
   16124:	cmp	r0, #0
   16128:	bne	16168 <__assert_fail@plt+0x507c>
   1612c:	bl	11008 <__errno_location@plt>
   16130:	mov	r1, #0
   16134:	str	r1, [r0]
   16138:	b	16168 <__assert_fail@plt+0x507c>
   1613c:	cmp	r0, #0
   16140:	mov	r4, r0
   16144:	mvnne	r4, #0
   16148:	cmp	r5, #0
   1614c:	bne	16168 <__assert_fail@plt+0x507c>
   16150:	cmp	r0, #0
   16154:	beq	16168 <__assert_fail@plt+0x507c>
   16158:	bl	11008 <__errno_location@plt>
   1615c:	ldr	r0, [r0]
   16160:	subs	r4, r0, #9
   16164:	mvnne	r4, #0
   16168:	mov	r0, r4
   1616c:	pop	{r4, r5, r6, sl, fp, pc}
   16170:	push	{r4, r5, r6, sl, fp, lr}
   16174:	add	fp, sp, #16
   16178:	sub	sp, sp, #8
   1617c:	mov	r4, r0
   16180:	bl	11038 <fileno@plt>
   16184:	cmn	r0, #1
   16188:	ble	161fc <__assert_fail@plt+0x5110>
   1618c:	mov	r0, r4
   16190:	bl	10fa8 <__freading@plt>
   16194:	cmp	r0, #0
   16198:	beq	161c4 <__assert_fail@plt+0x50d8>
   1619c:	mov	r0, r4
   161a0:	bl	11038 <fileno@plt>
   161a4:	mov	r1, #1
   161a8:	mov	r2, #0
   161ac:	mov	r3, #0
   161b0:	str	r1, [sp]
   161b4:	bl	10f3c <lseek64@plt>
   161b8:	and	r0, r0, r1
   161bc:	cmn	r0, #1
   161c0:	beq	161fc <__assert_fail@plt+0x5110>
   161c4:	mov	r0, r4
   161c8:	bl	1620c <__assert_fail@plt+0x5120>
   161cc:	cmp	r0, #0
   161d0:	beq	161fc <__assert_fail@plt+0x5110>
   161d4:	bl	11008 <__errno_location@plt>
   161d8:	ldr	r6, [r0]
   161dc:	mov	r5, r0
   161e0:	mov	r0, r4
   161e4:	bl	11068 <fclose@plt>
   161e8:	cmp	r6, #0
   161ec:	strne	r6, [r5]
   161f0:	mvnne	r0, #0
   161f4:	sub	sp, fp, #16
   161f8:	pop	{r4, r5, r6, sl, fp, pc}
   161fc:	mov	r0, r4
   16200:	sub	sp, fp, #16
   16204:	pop	{r4, r5, r6, sl, fp, lr}
   16208:	b	11068 <fclose@plt>
   1620c:	push	{r4, sl, fp, lr}
   16210:	add	fp, sp, #8
   16214:	sub	sp, sp, #8
   16218:	mov	r4, r0
   1621c:	cmp	r0, #0
   16220:	beq	1623c <__assert_fail@plt+0x5150>
   16224:	mov	r0, r4
   16228:	bl	10fa8 <__freading@plt>
   1622c:	cmp	r0, #0
   16230:	ldrbne	r0, [r4, #1]
   16234:	tstne	r0, #1
   16238:	bne	1624c <__assert_fail@plt+0x5160>
   1623c:	mov	r0, r4
   16240:	sub	sp, fp, #8
   16244:	pop	{r4, sl, fp, lr}
   16248:	b	10ea0 <fflush@plt>
   1624c:	mov	r0, #1
   16250:	mov	r2, #0
   16254:	mov	r3, #0
   16258:	str	r0, [sp]
   1625c:	mov	r0, r4
   16260:	bl	16268 <__assert_fail@plt+0x517c>
   16264:	b	1623c <__assert_fail@plt+0x5150>
   16268:	push	{r4, r5, r6, r7, fp, lr}
   1626c:	add	fp, sp, #16
   16270:	sub	sp, sp, #8
   16274:	mov	r4, r0
   16278:	ldr	r0, [r0, #4]
   1627c:	mov	r5, r3
   16280:	mov	r6, r2
   16284:	ldr	r1, [r4, #8]
   16288:	cmp	r1, r0
   1628c:	bne	162a8 <__assert_fail@plt+0x51bc>
   16290:	ldrd	r0, [r4, #16]
   16294:	cmp	r1, r0
   16298:	bne	162a8 <__assert_fail@plt+0x51bc>
   1629c:	ldr	r0, [r4, #36]	; 0x24
   162a0:	cmp	r0, #0
   162a4:	beq	162c0 <__assert_fail@plt+0x51d4>
   162a8:	mov	r0, r4
   162ac:	mov	r2, r6
   162b0:	mov	r3, r5
   162b4:	sub	sp, fp, #16
   162b8:	pop	{r4, r5, r6, r7, fp, lr}
   162bc:	b	11074 <fseeko64@plt>
   162c0:	ldr	r7, [fp, #8]
   162c4:	mov	r0, r4
   162c8:	bl	11038 <fileno@plt>
   162cc:	mov	r2, r6
   162d0:	mov	r3, r5
   162d4:	str	r7, [sp]
   162d8:	bl	10f3c <lseek64@plt>
   162dc:	and	r2, r0, r1
   162e0:	cmn	r2, #1
   162e4:	beq	16300 <__assert_fail@plt+0x5214>
   162e8:	strd	r0, [r4, #80]	; 0x50
   162ec:	ldr	r0, [r4]
   162f0:	bic	r0, r0, #16
   162f4:	str	r0, [r4]
   162f8:	mov	r0, #0
   162fc:	b	16304 <__assert_fail@plt+0x5218>
   16300:	mvn	r0, #0
   16304:	sub	sp, fp, #16
   16308:	pop	{r4, r5, r6, r7, fp, pc}
   1630c:	push	{fp, lr}
   16310:	mov	fp, sp
   16314:	mov	r0, #14
   16318:	bl	11098 <nl_langinfo@plt>
   1631c:	movw	r1, #28257	; 0x6e61
   16320:	cmp	r0, #0
   16324:	movt	r1, #1
   16328:	movne	r1, r0
   1632c:	movw	r0, #30074	; 0x757a
   16330:	ldrb	r2, [r1]
   16334:	movt	r0, #1
   16338:	cmp	r2, #0
   1633c:	movne	r0, r1
   16340:	pop	{fp, pc}
   16344:	push	{r4, r5, r6, r7, fp, lr}
   16348:	add	fp, sp, #16
   1634c:	sub	sp, sp, #8
   16350:	add	r5, sp, #4
   16354:	cmp	r0, #0
   16358:	mov	r7, r2
   1635c:	mov	r4, r1
   16360:	movne	r5, r0
   16364:	mov	r0, r5
   16368:	bl	10f6c <mbrtowc@plt>
   1636c:	mov	r6, r0
   16370:	cmp	r7, #0
   16374:	beq	16398 <__assert_fail@plt+0x52ac>
   16378:	cmn	r6, #2
   1637c:	bcc	16398 <__assert_fail@plt+0x52ac>
   16380:	mov	r0, #0
   16384:	bl	163e0 <__assert_fail@plt+0x52f4>
   16388:	cmp	r0, #0
   1638c:	ldrbeq	r0, [r4]
   16390:	moveq	r6, #1
   16394:	streq	r0, [r5]
   16398:	mov	r0, r6
   1639c:	sub	sp, fp, #16
   163a0:	pop	{r4, r5, r6, r7, fp, pc}
   163a4:	cmp	r2, #0
   163a8:	beq	163d8 <__assert_fail@plt+0x52ec>
   163ac:	mvn	r3, #0
   163b0:	udiv	r3, r3, r2
   163b4:	cmp	r3, r1
   163b8:	bcs	163d8 <__assert_fail@plt+0x52ec>
   163bc:	push	{fp, lr}
   163c0:	mov	fp, sp
   163c4:	bl	11008 <__errno_location@plt>
   163c8:	mov	r1, #12
   163cc:	str	r1, [r0]
   163d0:	mov	r0, #0
   163d4:	pop	{fp, pc}
   163d8:	mul	r1, r2, r1
   163dc:	b	160a0 <__assert_fail@plt+0x4fb4>
   163e0:	push	{r4, sl, fp, lr}
   163e4:	add	fp, sp, #8
   163e8:	sub	sp, sp, #264	; 0x108
   163ec:	add	r1, sp, #7
   163f0:	movw	r2, #257	; 0x101
   163f4:	bl	16444 <__assert_fail@plt+0x5358>
   163f8:	mov	r4, #0
   163fc:	cmp	r0, #0
   16400:	bne	16438 <__assert_fail@plt+0x534c>
   16404:	movw	r1, #30080	; 0x7580
   16408:	add	r0, sp, #7
   1640c:	movt	r1, #1
   16410:	bl	10e88 <strcmp@plt>
   16414:	cmp	r0, #0
   16418:	beq	16438 <__assert_fail@plt+0x534c>
   1641c:	movw	r1, #30082	; 0x7582
   16420:	add	r0, sp, #7
   16424:	movt	r1, #1
   16428:	bl	10e88 <strcmp@plt>
   1642c:	mov	r4, r0
   16430:	cmp	r0, #0
   16434:	movwne	r4, #1
   16438:	mov	r0, r4
   1643c:	sub	sp, fp, #8
   16440:	pop	{r4, sl, fp, pc}
   16444:	push	{r4, r5, r6, r7, fp, lr}
   16448:	add	fp, sp, #16
   1644c:	mov	r4, r1
   16450:	mov	r1, #0
   16454:	mov	r6, r2
   16458:	bl	11080 <setlocale@plt>
   1645c:	cmp	r0, #0
   16460:	beq	1648c <__assert_fail@plt+0x53a0>
   16464:	mov	r7, r0
   16468:	bl	10fe4 <strlen@plt>
   1646c:	cmp	r0, r6
   16470:	bcs	164a0 <__assert_fail@plt+0x53b4>
   16474:	add	r2, r0, #1
   16478:	mov	r0, r4
   1647c:	mov	r1, r7
   16480:	bl	10ec4 <memcpy@plt>
   16484:	mov	r5, #0
   16488:	b	164c8 <__assert_fail@plt+0x53dc>
   1648c:	cmp	r6, #0
   16490:	mov	r5, #22
   16494:	movne	r0, #0
   16498:	strbne	r0, [r4]
   1649c:	b	164c8 <__assert_fail@plt+0x53dc>
   164a0:	mov	r5, #34	; 0x22
   164a4:	cmp	r6, #0
   164a8:	beq	164c8 <__assert_fail@plt+0x53dc>
   164ac:	sub	r6, r6, #1
   164b0:	mov	r0, r4
   164b4:	mov	r1, r7
   164b8:	mov	r2, r6
   164bc:	bl	10ec4 <memcpy@plt>
   164c0:	mov	r0, #0
   164c4:	strb	r0, [r4, r6]
   164c8:	mov	r0, r5
   164cc:	pop	{r4, r5, r6, r7, fp, pc}
   164d0:	mov	r1, #0
   164d4:	b	11080 <setlocale@plt>
   164d8:	cmp	r3, #0
   164dc:	cmpeq	r2, #0
   164e0:	bne	16504 <__assert_fail@plt+0x5418>
   164e4:	cmp	r1, #0
   164e8:	movlt	r1, #-2147483648	; 0x80000000
   164ec:	movlt	r0, #0
   164f0:	blt	16500 <__assert_fail@plt+0x5414>
   164f4:	cmpeq	r0, #0
   164f8:	mvnne	r1, #-2147483648	; 0x80000000
   164fc:	mvnne	r0, #0
   16500:	b	165e8 <__assert_fail@plt+0x54fc>
   16504:	sub	sp, sp, #8
   16508:	push	{sp, lr}
   1650c:	cmp	r1, #0
   16510:	blt	16530 <__assert_fail@plt+0x5444>
   16514:	cmp	r3, #0
   16518:	blt	16564 <__assert_fail@plt+0x5478>
   1651c:	bl	165f8 <__assert_fail@plt+0x550c>
   16520:	ldr	lr, [sp, #4]
   16524:	add	sp, sp, #8
   16528:	pop	{r2, r3}
   1652c:	bx	lr
   16530:	rsbs	r0, r0, #0
   16534:	sbc	r1, r1, r1, lsl #1
   16538:	cmp	r3, #0
   1653c:	blt	16588 <__assert_fail@plt+0x549c>
   16540:	bl	165f8 <__assert_fail@plt+0x550c>
   16544:	ldr	lr, [sp, #4]
   16548:	add	sp, sp, #8
   1654c:	pop	{r2, r3}
   16550:	rsbs	r0, r0, #0
   16554:	sbc	r1, r1, r1, lsl #1
   16558:	rsbs	r2, r2, #0
   1655c:	sbc	r3, r3, r3, lsl #1
   16560:	bx	lr
   16564:	rsbs	r2, r2, #0
   16568:	sbc	r3, r3, r3, lsl #1
   1656c:	bl	165f8 <__assert_fail@plt+0x550c>
   16570:	ldr	lr, [sp, #4]
   16574:	add	sp, sp, #8
   16578:	pop	{r2, r3}
   1657c:	rsbs	r0, r0, #0
   16580:	sbc	r1, r1, r1, lsl #1
   16584:	bx	lr
   16588:	rsbs	r2, r2, #0
   1658c:	sbc	r3, r3, r3, lsl #1
   16590:	bl	165f8 <__assert_fail@plt+0x550c>
   16594:	ldr	lr, [sp, #4]
   16598:	add	sp, sp, #8
   1659c:	pop	{r2, r3}
   165a0:	rsbs	r2, r2, #0
   165a4:	sbc	r3, r3, r3, lsl #1
   165a8:	bx	lr
   165ac:	cmp	r3, #0
   165b0:	cmpeq	r2, #0
   165b4:	bne	165cc <__assert_fail@plt+0x54e0>
   165b8:	cmp	r1, #0
   165bc:	cmpeq	r0, #0
   165c0:	mvnne	r1, #0
   165c4:	mvnne	r0, #0
   165c8:	b	165e8 <__assert_fail@plt+0x54fc>
   165cc:	sub	sp, sp, #8
   165d0:	push	{sp, lr}
   165d4:	bl	165f8 <__assert_fail@plt+0x550c>
   165d8:	ldr	lr, [sp, #4]
   165dc:	add	sp, sp, #8
   165e0:	pop	{r2, r3}
   165e4:	bx	lr
   165e8:	push	{r1, lr}
   165ec:	mov	r0, #8
   165f0:	bl	10e7c <raise@plt>
   165f4:	pop	{r1, pc}
   165f8:	cmp	r1, r3
   165fc:	cmpeq	r0, r2
   16600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16604:	mov	r4, r0
   16608:	movcc	r0, #0
   1660c:	mov	r5, r1
   16610:	ldr	lr, [sp, #36]	; 0x24
   16614:	movcc	r1, r0
   16618:	bcc	16714 <__assert_fail@plt+0x5628>
   1661c:	cmp	r3, #0
   16620:	clzeq	ip, r2
   16624:	clzne	ip, r3
   16628:	addeq	ip, ip, #32
   1662c:	cmp	r5, #0
   16630:	clzeq	r1, r4
   16634:	addeq	r1, r1, #32
   16638:	clzne	r1, r5
   1663c:	sub	ip, ip, r1
   16640:	sub	sl, ip, #32
   16644:	lsl	r9, r3, ip
   16648:	rsb	fp, ip, #32
   1664c:	orr	r9, r9, r2, lsl sl
   16650:	orr	r9, r9, r2, lsr fp
   16654:	lsl	r8, r2, ip
   16658:	cmp	r5, r9
   1665c:	cmpeq	r4, r8
   16660:	movcc	r0, #0
   16664:	movcc	r1, r0
   16668:	bcc	16684 <__assert_fail@plt+0x5598>
   1666c:	mov	r0, #1
   16670:	subs	r4, r4, r8
   16674:	lsl	r1, r0, sl
   16678:	orr	r1, r1, r0, lsr fp
   1667c:	lsl	r0, r0, ip
   16680:	sbc	r5, r5, r9
   16684:	cmp	ip, #0
   16688:	beq	16714 <__assert_fail@plt+0x5628>
   1668c:	lsr	r6, r8, #1
   16690:	orr	r6, r6, r9, lsl #31
   16694:	lsr	r7, r9, #1
   16698:	mov	r2, ip
   1669c:	b	166c0 <__assert_fail@plt+0x55d4>
   166a0:	subs	r3, r4, r6
   166a4:	sbc	r8, r5, r7
   166a8:	adds	r3, r3, r3
   166ac:	adc	r8, r8, r8
   166b0:	adds	r4, r3, #1
   166b4:	adc	r5, r8, #0
   166b8:	subs	r2, r2, #1
   166bc:	beq	166dc <__assert_fail@plt+0x55f0>
   166c0:	cmp	r5, r7
   166c4:	cmpeq	r4, r6
   166c8:	bcs	166a0 <__assert_fail@plt+0x55b4>
   166cc:	adds	r4, r4, r4
   166d0:	adc	r5, r5, r5
   166d4:	subs	r2, r2, #1
   166d8:	bne	166c0 <__assert_fail@plt+0x55d4>
   166dc:	lsr	r3, r4, ip
   166e0:	orr	r3, r3, r5, lsl fp
   166e4:	lsr	r2, r5, ip
   166e8:	orr	r3, r3, r5, lsr sl
   166ec:	adds	r0, r0, r4
   166f0:	mov	r4, r3
   166f4:	lsl	r3, r2, ip
   166f8:	orr	r3, r3, r4, lsl sl
   166fc:	lsl	ip, r4, ip
   16700:	orr	r3, r3, r4, lsr fp
   16704:	adc	r1, r1, r5
   16708:	subs	r0, r0, ip
   1670c:	mov	r5, r2
   16710:	sbc	r1, r1, r3
   16714:	cmp	lr, #0
   16718:	strdne	r4, [lr]
   1671c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16720:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16724:	mov	r7, r0
   16728:	ldr	r6, [pc, #72]	; 16778 <__assert_fail@plt+0x568c>
   1672c:	ldr	r5, [pc, #72]	; 1677c <__assert_fail@plt+0x5690>
   16730:	add	r6, pc, r6
   16734:	add	r5, pc, r5
   16738:	sub	r6, r6, r5
   1673c:	mov	r8, r1
   16740:	mov	r9, r2
   16744:	bl	10e44 <calloc@plt-0x20>
   16748:	asrs	r6, r6, #2
   1674c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16750:	mov	r4, #0
   16754:	add	r4, r4, #1
   16758:	ldr	r3, [r5], #4
   1675c:	mov	r2, r9
   16760:	mov	r1, r8
   16764:	mov	r0, r7
   16768:	blx	r3
   1676c:	cmp	r6, r4
   16770:	bne	16754 <__assert_fail@plt+0x5668>
   16774:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16778:	ldrdeq	r1, [r1], -r4
   1677c:	andeq	r1, r1, ip, asr #15
   16780:	bx	lr
   16784:	ldr	r3, [pc, #12]	; 16798 <__assert_fail@plt+0x56ac>
   16788:	mov	r1, #0
   1678c:	add	r3, pc, r3
   16790:	ldr	r2, [r3]
   16794:	b	11014 <__cxa_atexit@plt>
   16798:	andeq	r1, r1, r0, ror #18
   1679c:	mov	r2, r1
   167a0:	mov	r1, r0
   167a4:	mov	r0, #3
   167a8:	b	10f30 <__fxstat64@plt>

Disassembly of section .fini:

000167ac <.fini>:
   167ac:	push	{r3, lr}
   167b0:	pop	{r3, pc}
