
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010c7c <.init>:
   10c7c:	push	{r3, lr}
   10c80:	bl	11604 <__assert_fail@plt+0x704>
   10c84:	pop	{r3, pc}

Disassembly of section .plt:

00010c88 <calloc@plt-0x14>:
   10c88:	push	{lr}		; (str lr, [sp, #-4]!)
   10c8c:	ldr	lr, [pc, #4]	; 10c98 <calloc@plt-0x4>
   10c90:	add	lr, pc, lr
   10c94:	ldr	pc, [lr, #8]!
   10c98:	andeq	r7, r1, r8, ror #6

00010c9c <calloc@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #94208	; 0x17000
   10ca4:	ldr	pc, [ip, #872]!	; 0x368

00010ca8 <fputs_unlocked@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #94208	; 0x17000
   10cb0:	ldr	pc, [ip, #864]!	; 0x360

00010cb4 <strcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #94208	; 0x17000
   10cbc:	ldr	pc, [ip, #856]!	; 0x358

00010cc0 <posix_fadvise64@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #94208	; 0x17000
   10cc8:	ldr	pc, [ip, #848]!	; 0x350

00010ccc <fflush@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #94208	; 0x17000
   10cd4:	ldr	pc, [ip, #840]!	; 0x348

00010cd8 <memmove@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #832]!	; 0x340

00010ce4 <free@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #824]!	; 0x338

00010cf0 <_exit@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #816]!	; 0x330

00010cfc <memcpy@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #808]!	; 0x328

00010d08 <mbsinit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #800]!	; 0x320

00010d14 <fwrite_unlocked@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #792]!	; 0x318

00010d20 <memcmp@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #784]!	; 0x310

00010d2c <fputc_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #94208	; 0x17000
   10d34:	ldr	pc, [ip, #776]!	; 0x308

00010d38 <dcgettext@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #768]!	; 0x300

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #94208	; 0x17000
   10d4c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d50 <textdomain@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #94208	; 0x17000
   10d58:	ldr	pc, [ip, #752]!	; 0x2f0

00010d5c <iswprint@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #744]!	; 0x2e8

00010d68 <fwrite@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #736]!	; 0x2e0

00010d74 <lseek64@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d80 <__ctype_get_mb_cur_max@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #720]!	; 0x2d0

00010d8c <__fpending@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #712]!	; 0x2c8

00010d98 <mbrtowc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #704]!	; 0x2c0

00010da4 <error@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #696]!	; 0x2b8

00010db0 <malloc@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dbc <__libc_start_main@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc8 <__freading@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd4 <__gmon_start__@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #664]!	; 0x298

00010de0 <getopt_long@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #656]!	; 0x290

00010dec <__ctype_b_loc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #648]!	; 0x288

00010df8 <exit@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #640]!	; 0x280

00010e04 <strlen@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #632]!	; 0x278

00010e10 <strchr@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #624]!	; 0x270

00010e1c <__errno_location@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #616]!	; 0x268

00010e28 <__cxa_atexit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #608]!	; 0x260

00010e34 <memset@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #600]!	; 0x258

00010e40 <__printf_chk@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #592]!	; 0x250

00010e4c <fileno@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #584]!	; 0x248

00010e58 <__fprintf_chk@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #576]!	; 0x240

00010e64 <memchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #568]!	; 0x238

00010e70 <fclose@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #560]!	; 0x230

00010e7c <fseeko64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #552]!	; 0x228

00010e88 <__overflow@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #544]!	; 0x220

00010e94 <setlocale@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #536]!	; 0x218

00010ea0 <strrchr@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #528]!	; 0x210

00010eac <nl_langinfo@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #520]!	; 0x208

00010eb8 <__strtoll_internal@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #512]!	; 0x200

00010ec4 <fopen64@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #504]!	; 0x1f8

00010ed0 <bindtextdomain@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #496]!	; 0x1f0

00010edc <fread_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee8 <strncmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef4 <abort@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #472]!	; 0x1d8

00010f00 <__assert_fail@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #464]!	; 0x1d0

Disassembly of section .text:

00010f0c <.text>:
   10f0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f10:	strd	r6, [sp, #8]
   10f14:	mov	r7, #0
   10f18:	movw	r6, #27160	; 0x6a18
   10f1c:	movt	r6, #1
   10f20:	strd	r8, [sp, #16]
   10f24:	mov	r8, r1
   10f28:	strd	sl, [sp, #24]
   10f2c:	mov	sl, r0
   10f30:	movw	r9, #33104	; 0x8150
   10f34:	movt	r9, #2
   10f38:	str	lr, [sp, #32]
   10f3c:	sub	sp, sp, #60	; 0x3c
   10f40:	ldr	r0, [r1]
   10f44:	mov	r4, r7
   10f48:	bl	125f4 <__assert_fail@plt+0x16f4>
   10f4c:	movw	r1, #26528	; 0x67a0
   10f50:	movt	r1, #1
   10f54:	ldr	fp, [pc, #1640]	; 115c4 <__assert_fail@plt+0x6c4>
   10f58:	mov	r0, #6
   10f5c:	bl	10e94 <setlocale@plt>
   10f60:	movw	r1, #27092	; 0x69d4
   10f64:	movt	r1, #1
   10f68:	movw	r0, #26924	; 0x692c
   10f6c:	movt	r0, #1
   10f70:	bl	10ed0 <bindtextdomain@plt>
   10f74:	movw	r0, #26924	; 0x692c
   10f78:	movt	r0, #1
   10f7c:	bl	10d50 <textdomain@plt>
   10f80:	movw	r0, #8816	; 0x2270
   10f84:	movt	r0, #1
   10f88:	bl	1648c <__assert_fail@plt+0x558c>
   10f8c:	mov	r3, #76	; 0x4c
   10f90:	str	r3, [sp, #12]
   10f94:	mov	r5, #0
   10f98:	mov	r3, fp
   10f9c:	mov	r2, r6
   10fa0:	mov	r1, r8
   10fa4:	mov	r0, sl
   10fa8:	str	r5, [sp]
   10fac:	bl	10de0 <getopt_long@plt>
   10fb0:	cmn	r0, #1
   10fb4:	beq	11124 <__assert_fail@plt+0x224>
   10fb8:	cmp	r0, #100	; 0x64
   10fbc:	beq	110e0 <__assert_fail@plt+0x1e0>
   10fc0:	bgt	10fdc <__assert_fail@plt+0xdc>
   10fc4:	cmn	r0, #3
   10fc8:	beq	110a0 <__assert_fail@plt+0x1a0>
   10fcc:	cmn	r0, #2
   10fd0:	bne	11098 <__assert_fail@plt+0x198>
   10fd4:	mov	r0, r5
   10fd8:	bl	11744 <__assert_fail@plt+0x844>
   10fdc:	cmp	r0, #105	; 0x69
   10fe0:	beq	11054 <__assert_fail@plt+0x154>
   10fe4:	cmp	r0, #119	; 0x77
   10fe8:	bne	11098 <__assert_fail@plt+0x198>
   10fec:	movw	r2, #26528	; 0x67a0
   10ff0:	movt	r2, #1
   10ff4:	ldr	r0, [r9]
   10ff8:	mov	r1, r5
   10ffc:	add	r3, sp, #48	; 0x30
   11000:	str	r2, [sp]
   11004:	mov	r2, #10
   11008:	bl	1534c <__assert_fail@plt+0x444c>
   1100c:	cmp	r0, #1
   11010:	mov	ip, r0
   11014:	bhi	110e8 <__assert_fail@plt+0x1e8>
   11018:	ldrd	r2, [sp, #48]	; 0x30
   1101c:	cmp	r2, #0
   11020:	sbcs	r1, r3, #0
   11024:	blt	110e8 <__assert_fail@plt+0x1e8>
   11028:	mvn	r0, #-2147483648	; 0x80000000
   1102c:	mov	r1, #0
   11030:	cmp	r0, r2
   11034:	eor	ip, ip, #1
   11038:	sbcs	r1, r1, r3
   1103c:	movlt	ip, #0
   11040:	andge	ip, ip, #1
   11044:	cmp	ip, #0
   11048:	moveq	r2, #0
   1104c:	str	r2, [sp, #12]
   11050:	b	10f94 <__assert_fail@plt+0x94>
   11054:	mov	r7, #1
   11058:	b	10f94 <__assert_fail@plt+0x94>
   1105c:	mov	r2, #5
   11060:	movw	r1, #27168	; 0x6a20
   11064:	movt	r1, #1
   11068:	mov	r0, r5
   1106c:	bl	10d38 <dcgettext@plt>
   11070:	ldr	r3, [r6]
   11074:	mov	r4, r0
   11078:	add	r3, r3, #1
   1107c:	ldr	r0, [r8, r3, lsl #2]
   11080:	bl	148e4 <__assert_fail@plt+0x39e4>
   11084:	mov	r3, r0
   11088:	mov	r2, r4
   1108c:	mov	r1, r5
   11090:	mov	r0, r5
   11094:	bl	10da4 <error@plt>
   11098:	mov	r0, #1
   1109c:	bl	11744 <__assert_fail@plt+0x844>
   110a0:	movw	r2, #27144	; 0x6a08
   110a4:	movt	r2, #1
   110a8:	movw	r3, #33000	; 0x80e8
   110ac:	movt	r3, #2
   110b0:	movw	r0, #33100	; 0x814c
   110b4:	movt	r0, #2
   110b8:	stm	sp, {r2, r5}
   110bc:	movw	r1, #25956	; 0x6564
   110c0:	movt	r1, #1
   110c4:	ldr	r0, [r0]
   110c8:	movw	r2, #26920	; 0x6928
   110cc:	movt	r2, #1
   110d0:	ldr	r3, [r3]
   110d4:	bl	14d80 <__assert_fail@plt+0x3e80>
   110d8:	mov	r0, r5
   110dc:	bl	10df8 <exit@plt>
   110e0:	mov	r4, #1
   110e4:	b	10f94 <__assert_fail@plt+0x94>
   110e8:	mov	r2, #5
   110ec:	movw	r1, #27116	; 0x69ec
   110f0:	movt	r1, #1
   110f4:	mov	r0, #0
   110f8:	bl	10d38 <dcgettext@plt>
   110fc:	mov	r4, r0
   11100:	ldr	r0, [r9]
   11104:	bl	148e4 <__assert_fail@plt+0x39e4>
   11108:	movw	r2, #27136	; 0x6a00
   1110c:	movt	r2, #1
   11110:	str	r0, [sp]
   11114:	mov	r3, r4
   11118:	mov	r1, #0
   1111c:	mov	r0, #1
   11120:	bl	10da4 <error@plt>
   11124:	movw	r6, #33080	; 0x8138
   11128:	movt	r6, #2
   1112c:	ldr	r3, [r6]
   11130:	sub	r2, sl, r3
   11134:	cmp	r2, #1
   11138:	bgt	1105c <__assert_fail@plt+0x15c>
   1113c:	cmp	r3, sl
   11140:	bge	11328 <__assert_fail@plt+0x428>
   11144:	ldr	r3, [r8, r3, lsl #2]
   11148:	movw	r1, #25928	; 0x6548
   1114c:	movt	r1, #1
   11150:	mov	r0, r3
   11154:	str	r3, [sp, #24]
   11158:	bl	10cb4 <strcmp@plt>
   1115c:	cmp	r0, #0
   11160:	beq	11334 <__assert_fail@plt+0x434>
   11164:	movw	r1, #27188	; 0x6a34
   11168:	movt	r1, #1
   1116c:	ldr	r0, [sp, #24]
   11170:	bl	10ec4 <fopen64@plt>
   11174:	subs	sl, r0, #0
   11178:	beq	11594 <__assert_fail@plt+0x694>
   1117c:	mov	r1, #2
   11180:	mov	r0, sl
   11184:	bl	12360 <__assert_fail@plt+0x1460>
   11188:	cmp	r4, #0
   1118c:	movw	r3, #33100	; 0x814c
   11190:	movt	r3, #2
   11194:	beq	11344 <__assert_fail@plt+0x444>
   11198:	ldr	r3, [r3]
   1119c:	mov	r0, #4096	; 0x1000
   111a0:	str	r3, [sp, #16]
   111a4:	bl	14e90 <__assert_fail@plt+0x3f90>
   111a8:	mov	r6, r0
   111ac:	mov	r0, #3072	; 0xc00
   111b0:	bl	14e90 <__assert_fail@plt+0x3f90>
   111b4:	mov	r8, r0
   111b8:	add	r0, sp, #48	; 0x30
   111bc:	bl	11ef8 <__assert_fail@plt+0xff8>
   111c0:	str	r7, [sp, #12]
   111c4:	str	r8, [sp, #20]
   111c8:	mov	r5, #0
   111cc:	b	111f4 <__assert_fail@plt+0x2f4>
   111d0:	ldr	r3, [sl]
   111d4:	add	r5, r5, r4
   111d8:	ands	r4, r3, #32
   111dc:	bne	113b8 <__assert_fail@plt+0x4b8>
   111e0:	cmp	r5, #4096	; 0x1000
   111e4:	and	r2, r3, #16
   111e8:	bge	11274 <__assert_fail@plt+0x374>
   111ec:	cmp	r2, #0
   111f0:	bne	11274 <__assert_fail@plt+0x374>
   111f4:	mov	r3, sl
   111f8:	rsb	r2, r5, #4096	; 0x1000
   111fc:	mov	r1, #1
   11200:	add	r0, r6, r5
   11204:	bl	10edc <fread_unlocked@plt>
   11208:	ldr	r3, [sp, #12]
   1120c:	mov	r4, r0
   11210:	cmp	r3, #0
   11214:	beq	111d0 <__assert_fail@plt+0x2d0>
   11218:	cmp	r0, #0
   1121c:	ble	111d0 <__assert_fail@plt+0x2d0>
   11220:	mov	r8, #0
   11224:	b	11230 <__assert_fail@plt+0x330>
   11228:	cmp	r4, r8
   1122c:	ble	111d0 <__assert_fail@plt+0x2d0>
   11230:	add	r7, r5, r8
   11234:	ldrb	r9, [r6, r7]
   11238:	add	fp, r6, r7
   1123c:	mov	r0, r9
   11240:	bl	11ee0 <__assert_fail@plt+0xfe0>
   11244:	cmp	r9, #61	; 0x3d
   11248:	orreq	r0, r0, #1
   1124c:	tst	r0, #255	; 0xff
   11250:	addne	r8, r8, #1
   11254:	bne	11228 <__assert_fail@plt+0x328>
   11258:	sub	r4, r4, #1
   1125c:	add	r1, r7, #1
   11260:	add	r1, r6, r1
   11264:	mov	r0, fp
   11268:	sub	r2, r4, r8
   1126c:	bl	10cd8 <memmove@plt>
   11270:	b	11228 <__assert_fail@plt+0x328>
   11274:	add	fp, sp, #44	; 0x2c
   11278:	ldr	r7, [sp, #16]
   1127c:	ldr	r8, [sp, #20]
   11280:	b	112e8 <__assert_fail@plt+0x3e8>
   11284:	cmp	r4, #0
   11288:	bne	111c8 <__assert_fail@plt+0x2c8>
   1128c:	cmp	r4, #0
   11290:	mov	r3, #3072	; 0xc00
   11294:	moveq	r2, r5
   11298:	movne	r2, #0
   1129c:	str	r3, [sp, #44]	; 0x2c
   112a0:	mov	r3, r8
   112a4:	mov	r1, r6
   112a8:	str	fp, [sp]
   112ac:	add	r0, sp, #48	; 0x30
   112b0:	bl	11f04 <__assert_fail@plt+0x1004>
   112b4:	mov	r9, r0
   112b8:	mov	r3, r7
   112bc:	ldr	r2, [sp, #44]	; 0x2c
   112c0:	mov	r1, #1
   112c4:	mov	r0, r8
   112c8:	bl	10d14 <fwrite_unlocked@plt>
   112cc:	ldr	r3, [sp, #44]	; 0x2c
   112d0:	cmp	r0, r3
   112d4:	bcc	11560 <__assert_fail@plt+0x660>
   112d8:	cmp	r9, #0
   112dc:	beq	11570 <__assert_fail@plt+0x670>
   112e0:	ldr	r3, [sl]
   112e4:	add	r4, r4, #1
   112e8:	tst	r3, #16
   112ec:	beq	11284 <__assert_fail@plt+0x384>
   112f0:	cmp	r4, #2
   112f4:	beq	1131c <__assert_fail@plt+0x41c>
   112f8:	cmp	r4, #1
   112fc:	bne	1128c <__assert_fail@plt+0x38c>
   11300:	ldr	r3, [sp, #48]	; 0x30
   11304:	cmp	r3, #0
   11308:	beq	1131c <__assert_fail@plt+0x41c>
   1130c:	mov	r3, #3072	; 0xc00
   11310:	mov	r2, #0
   11314:	str	r3, [sp, #44]	; 0x2c
   11318:	b	112a0 <__assert_fail@plt+0x3a0>
   1131c:	mov	r0, sl
   11320:	ldr	r1, [sp, #24]
   11324:	bl	116b8 <__assert_fail@plt+0x7b8>
   11328:	movw	r3, #25928	; 0x6548
   1132c:	movt	r3, #1
   11330:	str	r3, [sp, #24]
   11334:	movw	r3, #33096	; 0x8148
   11338:	movt	r3, #2
   1133c:	ldr	sl, [r3]
   11340:	b	1117c <__assert_fail@plt+0x27c>
   11344:	mov	r0, #30720	; 0x7800
   11348:	str	r3, [sp, #20]
   1134c:	ldr	r8, [r3]
   11350:	bl	14e90 <__assert_fail@plt+0x3f90>
   11354:	mov	fp, r0
   11358:	mov	r0, #40960	; 0xa000
   1135c:	bl	14e90 <__assert_fail@plt+0x3f90>
   11360:	str	r0, [sp, #16]
   11364:	mov	r5, #0
   11368:	b	11374 <__assert_fail@plt+0x474>
   1136c:	cmp	r5, #30720	; 0x7800
   11370:	bge	113e4 <__assert_fail@plt+0x4e4>
   11374:	mov	r3, sl
   11378:	rsb	r2, r5, #30720	; 0x7800
   1137c:	add	r0, fp, r5
   11380:	mov	r1, #1
   11384:	bl	10edc <fread_unlocked@plt>
   11388:	ldr	r3, [sl]
   1138c:	add	r5, r5, r0
   11390:	tst	r3, #48	; 0x30
   11394:	beq	1136c <__assert_fail@plt+0x46c>
   11398:	cmp	r5, #0
   1139c:	bgt	113e4 <__assert_fail@plt+0x4e4>
   113a0:	ldr	r2, [sp, #12]
   113a4:	cmp	r2, #0
   113a8:	cmpne	r4, #0
   113ac:	bgt	11524 <__assert_fail@plt+0x624>
   113b0:	tst	r3, #32
   113b4:	beq	1131c <__assert_fail@plt+0x41c>
   113b8:	bl	10e1c <__errno_location@plt>
   113bc:	movw	r1, #27192	; 0x6a38
   113c0:	movt	r1, #1
   113c4:	ldr	r4, [r0]
   113c8:	mov	r2, #5
   113cc:	mov	r0, #0
   113d0:	bl	10d38 <dcgettext@plt>
   113d4:	mov	r2, r0
   113d8:	mov	r0, #1
   113dc:	mov	r1, r4
   113e0:	bl	10da4 <error@plt>
   113e4:	mov	r3, #3
   113e8:	add	r7, r5, #2
   113ec:	ldr	r6, [sp, #16]
   113f0:	mov	r1, r5
   113f4:	mov	r0, fp
   113f8:	udiv	r7, r7, r3
   113fc:	mov	r2, r6
   11400:	lsl	r7, r7, #2
   11404:	mov	r3, r7
   11408:	bl	11c34 <__assert_fail@plt+0xd34>
   1140c:	ldr	r3, [sp, #12]
   11410:	cmp	r3, #0
   11414:	bne	11450 <__assert_fail@plt+0x550>
   11418:	ldr	r3, [sp, #20]
   1141c:	mov	r2, r7
   11420:	mov	r1, #1
   11424:	mov	r0, r6
   11428:	ldr	r3, [r3]
   1142c:	bl	10d14 <fwrite_unlocked@plt>
   11430:	cmp	r7, r0
   11434:	bhi	11560 <__assert_fail@plt+0x660>
   11438:	ldr	r3, [sl]
   1143c:	and	r2, r3, #48	; 0x30
   11440:	cmp	r5, #30720	; 0x7800
   11444:	cmpeq	r2, #0
   11448:	beq	11364 <__assert_fail@plt+0x464>
   1144c:	b	113a0 <__assert_fail@plt+0x4a0>
   11450:	mov	r9, r4
   11454:	mov	r6, #0
   11458:	strd	sl, [sp, #28]
   1145c:	str	r5, [sp, #36]	; 0x24
   11460:	add	r5, sp, #12
   11464:	ldm	r5, {r5, sl, fp}
   11468:	b	11498 <__assert_fail@plt+0x598>
   1146c:	ldr	r3, [r8, #20]
   11470:	ldr	r2, [r8, #24]
   11474:	cmp	r3, r2
   11478:	addcc	r2, r3, #1
   1147c:	strcc	r2, [r8, #20]
   11480:	movcc	r2, #10
   11484:	strbcc	r2, [r3]
   11488:	bcs	114d8 <__assert_fail@plt+0x5d8>
   1148c:	cmp	r6, r7
   11490:	bge	11518 <__assert_fail@plt+0x618>
   11494:	mov	r9, r4
   11498:	sub	r4, r5, r4
   1149c:	sub	r3, r7, r6
   114a0:	cmp	r3, r4
   114a4:	movlt	r4, r3
   114a8:	cmp	r4, #0
   114ac:	beq	1146c <__assert_fail@plt+0x56c>
   114b0:	mov	r2, r4
   114b4:	mov	r1, #1
   114b8:	ldr	r3, [fp]
   114bc:	add	r0, sl, r6
   114c0:	bl	10d14 <fwrite_unlocked@plt>
   114c4:	cmp	r4, r0
   114c8:	bhi	11560 <__assert_fail@plt+0x660>
   114cc:	add	r6, r6, r4
   114d0:	add	r4, r4, r9
   114d4:	b	1148c <__assert_fail@plt+0x58c>
   114d8:	mov	r1, #10
   114dc:	mov	r0, r8
   114e0:	bl	10e88 <__overflow@plt>
   114e4:	cmn	r0, #1
   114e8:	bne	1148c <__assert_fail@plt+0x58c>
   114ec:	bl	10e1c <__errno_location@plt>
   114f0:	ldr	r5, [r0]
   114f4:	mov	r2, #5
   114f8:	movw	r1, #27204	; 0x6a44
   114fc:	movt	r1, #1
   11500:	mov	r0, r4
   11504:	bl	10d38 <dcgettext@plt>
   11508:	mov	r2, r0
   1150c:	mov	r0, #1
   11510:	mov	r1, r5
   11514:	bl	10da4 <error@plt>
   11518:	ldrd	sl, [sp, #28]
   1151c:	ldr	r5, [sp, #36]	; 0x24
   11520:	b	11438 <__assert_fail@plt+0x538>
   11524:	ldr	r3, [r8, #20]
   11528:	ldr	r2, [r8, #24]
   1152c:	cmp	r3, r2
   11530:	addcc	r1, r3, #1
   11534:	movcc	r2, #10
   11538:	strcc	r1, [r8, #20]
   1153c:	strbcc	r2, [r3]
   11540:	bcs	1154c <__assert_fail@plt+0x64c>
   11544:	ldr	r3, [sl]
   11548:	b	113b0 <__assert_fail@plt+0x4b0>
   1154c:	mov	r0, r8
   11550:	mov	r1, #10
   11554:	bl	10e88 <__overflow@plt>
   11558:	cmn	r0, #1
   1155c:	bne	11544 <__assert_fail@plt+0x644>
   11560:	bl	10e1c <__errno_location@plt>
   11564:	movw	r1, #27204	; 0x6a44
   11568:	movt	r1, #1
   1156c:	b	113c4 <__assert_fail@plt+0x4c4>
   11570:	mov	r2, #5
   11574:	movw	r1, #27216	; 0x6a50
   11578:	movt	r1, #1
   1157c:	mov	r0, r9
   11580:	bl	10d38 <dcgettext@plt>
   11584:	mov	r2, r0
   11588:	mov	r1, r9
   1158c:	mov	r0, #1
   11590:	bl	10da4 <error@plt>
   11594:	bl	10e1c <__errno_location@plt>
   11598:	ldr	r4, [r0]
   1159c:	mov	r1, #3
   115a0:	mov	r0, sl
   115a4:	ldr	r2, [sp, #24]
   115a8:	bl	1470c <__assert_fail@plt+0x380c>
   115ac:	mov	r3, r0
   115b0:	movw	r2, #27140	; 0x6a04
   115b4:	movt	r2, #1
   115b8:	mov	r0, #1
   115bc:	mov	r1, r4
   115c0:	bl	10da4 <error@plt>
   115c4:	andeq	r6, r1, r8, ror #9
   115c8:	mov	fp, #0
   115cc:	mov	lr, #0
   115d0:	pop	{r1}		; (ldr r1, [sp], #4)
   115d4:	mov	r2, sp
   115d8:	push	{r2}		; (str r2, [sp, #-4]!)
   115dc:	push	{r0}		; (str r0, [sp, #-4]!)
   115e0:	ldr	ip, [pc, #16]	; 115f8 <__assert_fail@plt+0x6f8>
   115e4:	push	{ip}		; (str ip, [sp, #-4]!)
   115e8:	ldr	r0, [pc, #12]	; 115fc <__assert_fail@plt+0x6fc>
   115ec:	ldr	r3, [pc, #12]	; 11600 <__assert_fail@plt+0x700>
   115f0:	bl	10dbc <__libc_start_main@plt>
   115f4:	bl	10ef4 <abort@plt>
   115f8:	andeq	r6, r1, r8, lsl #9
   115fc:	andeq	r0, r1, ip, lsl #30
   11600:	andeq	r6, r1, r8, lsr #8
   11604:	ldr	r3, [pc, #20]	; 11620 <__assert_fail@plt+0x720>
   11608:	ldr	r2, [pc, #20]	; 11624 <__assert_fail@plt+0x724>
   1160c:	add	r3, pc, r3
   11610:	ldr	r2, [r3, r2]
   11614:	cmp	r2, #0
   11618:	bxeq	lr
   1161c:	b	10dd4 <__gmon_start__@plt>
   11620:	andeq	r6, r1, ip, ror #19
   11624:	ldrdeq	r0, [r0], -ip
   11628:	ldr	r0, [pc, #24]	; 11648 <__assert_fail@plt+0x748>
   1162c:	ldr	r3, [pc, #24]	; 1164c <__assert_fail@plt+0x74c>
   11630:	cmp	r3, r0
   11634:	bxeq	lr
   11638:	ldr	r3, [pc, #16]	; 11650 <__assert_fail@plt+0x750>
   1163c:	cmp	r3, #0
   11640:	bxeq	lr
   11644:	bx	r3
   11648:	andeq	r8, r2, r0, lsr r1
   1164c:	andeq	r8, r2, r0, lsr r1
   11650:	andeq	r0, r0, r0
   11654:	ldr	r0, [pc, #36]	; 11680 <__assert_fail@plt+0x780>
   11658:	ldr	r1, [pc, #36]	; 11684 <__assert_fail@plt+0x784>
   1165c:	sub	r1, r1, r0
   11660:	asr	r1, r1, #2
   11664:	add	r1, r1, r1, lsr #31
   11668:	asrs	r1, r1, #1
   1166c:	bxeq	lr
   11670:	ldr	r3, [pc, #16]	; 11688 <__assert_fail@plt+0x788>
   11674:	cmp	r3, #0
   11678:	bxeq	lr
   1167c:	bx	r3
   11680:	andeq	r8, r2, r0, lsr r1
   11684:	andeq	r8, r2, r0, lsr r1
   11688:	andeq	r0, r0, r0
   1168c:	push	{r4, lr}
   11690:	ldr	r4, [pc, #24]	; 116b0 <__assert_fail@plt+0x7b0>
   11694:	ldrb	r3, [r4]
   11698:	cmp	r3, #0
   1169c:	popne	{r4, pc}
   116a0:	bl	11628 <__assert_fail@plt+0x728>
   116a4:	mov	r3, #1
   116a8:	strb	r3, [r4]
   116ac:	pop	{r4, pc}
   116b0:	andeq	r8, r2, r4, asr r1
   116b4:	b	11654 <__assert_fail@plt+0x754>
   116b8:	str	r4, [sp, #-8]!
   116bc:	mov	r4, r1
   116c0:	str	lr, [sp, #4]
   116c4:	bl	123b0 <__assert_fail@plt+0x14b0>
   116c8:	cmp	r0, #0
   116cc:	beq	11740 <__assert_fail@plt+0x840>
   116d0:	movw	r1, #25928	; 0x6548
   116d4:	movt	r1, #1
   116d8:	mov	r0, r4
   116dc:	bl	10cb4 <strcmp@plt>
   116e0:	mov	r5, r0
   116e4:	bl	10e1c <__errno_location@plt>
   116e8:	cmp	r5, #0
   116ec:	ldr	r6, [r0]
   116f0:	bne	11718 <__assert_fail@plt+0x818>
   116f4:	mov	r2, #5
   116f8:	mov	r0, r5
   116fc:	movw	r1, #25932	; 0x654c
   11700:	movt	r1, #1
   11704:	bl	10d38 <dcgettext@plt>
   11708:	mov	r2, r0
   1170c:	mov	r1, r6
   11710:	mov	r0, #1
   11714:	bl	10da4 <error@plt>
   11718:	mov	r2, r4
   1171c:	mov	r1, #3
   11720:	mov	r0, #0
   11724:	bl	1470c <__assert_fail@plt+0x380c>
   11728:	mov	r3, r0
   1172c:	movw	r2, #27140	; 0x6a04
   11730:	movt	r2, #1
   11734:	mov	r1, r6
   11738:	mov	r0, #1
   1173c:	bl	10da4 <error@plt>
   11740:	bl	10df8 <exit@plt>
   11744:	subs	r6, r0, #0
   11748:	str	r7, [sp, #-8]!
   1174c:	str	lr, [sp, #4]
   11750:	sub	sp, sp, #56	; 0x38
   11754:	beq	1179c <__assert_fail@plt+0x89c>
   11758:	movw	r3, #33088	; 0x8140
   1175c:	movt	r3, #2
   11760:	ldr	r4, [r3]
   11764:	mov	r2, #5
   11768:	movw	r1, #25964	; 0x656c
   1176c:	movt	r1, #1
   11770:	mov	r0, #0
   11774:	bl	10d38 <dcgettext@plt>
   11778:	movw	r3, #33120	; 0x8160
   1177c:	movt	r3, #2
   11780:	mov	r2, r0
   11784:	mov	r1, #1
   11788:	ldr	r3, [r3]
   1178c:	mov	r0, r4
   11790:	bl	10e58 <__fprintf_chk@plt>
   11794:	mov	r0, r6
   11798:	bl	10df8 <exit@plt>
   1179c:	mov	r2, #5
   117a0:	movw	r1, #26004	; 0x6594
   117a4:	movt	r1, #1
   117a8:	movw	r7, #33100	; 0x814c
   117ac:	movt	r7, #2
   117b0:	bl	10d38 <dcgettext@plt>
   117b4:	movw	r3, #33120	; 0x8160
   117b8:	movt	r3, #2
   117bc:	mov	r1, r0
   117c0:	mov	r0, #1
   117c4:	ldr	r2, [r3]
   117c8:	bl	10e40 <__printf_chk@plt>
   117cc:	mov	r2, #5
   117d0:	movw	r1, #26036	; 0x65b4
   117d4:	movt	r1, #1
   117d8:	mov	r0, r6
   117dc:	bl	10d38 <dcgettext@plt>
   117e0:	mov	r1, r0
   117e4:	mov	r2, #64	; 0x40
   117e8:	mov	r0, #1
   117ec:	bl	10e40 <__printf_chk@plt>
   117f0:	mov	r2, #5
   117f4:	movw	r1, #26108	; 0x65fc
   117f8:	movt	r1, #1
   117fc:	mov	r0, r6
   11800:	bl	10d38 <dcgettext@plt>
   11804:	ldr	r1, [r7]
   11808:	bl	10ca8 <fputs_unlocked@plt>
   1180c:	mov	r2, #5
   11810:	movw	r1, #26164	; 0x6634
   11814:	movt	r1, #1
   11818:	mov	r0, r6
   1181c:	bl	10d38 <dcgettext@plt>
   11820:	ldr	r1, [r7]
   11824:	bl	10ca8 <fputs_unlocked@plt>
   11828:	mov	r2, #5
   1182c:	movw	r1, #26240	; 0x6680
   11830:	movt	r1, #1
   11834:	mov	r0, r6
   11838:	bl	10d38 <dcgettext@plt>
   1183c:	ldr	r1, [r7]
   11840:	bl	10ca8 <fputs_unlocked@plt>
   11844:	mov	r2, #5
   11848:	movw	r1, #26484	; 0x6774
   1184c:	movt	r1, #1
   11850:	mov	r0, r6
   11854:	bl	10d38 <dcgettext@plt>
   11858:	ldr	r1, [r7]
   1185c:	bl	10ca8 <fputs_unlocked@plt>
   11860:	mov	r2, #5
   11864:	movw	r1, #26532	; 0x67a4
   11868:	movt	r1, #1
   1186c:	mov	r0, r6
   11870:	bl	10d38 <dcgettext@plt>
   11874:	ldr	r1, [r7]
   11878:	bl	10ca8 <fputs_unlocked@plt>
   1187c:	mov	r2, #5
   11880:	movw	r1, #26588	; 0x67dc
   11884:	movt	r1, #1
   11888:	mov	r0, r6
   1188c:	bl	10d38 <dcgettext@plt>
   11890:	movw	r3, #25956	; 0x6564
   11894:	movt	r3, #1
   11898:	mov	r1, r0
   1189c:	mov	r2, r3
   118a0:	mov	r0, #1
   118a4:	bl	10e40 <__printf_chk@plt>
   118a8:	movw	lr, #25776	; 0x64b0
   118ac:	movt	lr, #1
   118b0:	ldr	ip, [lr]
   118b4:	ldr	r4, [lr, #4]
   118b8:	ldrd	r8, [lr, #8]
   118bc:	subs	r1, ip, #0
   118c0:	str	ip, [sp]
   118c4:	ldrd	r2, [lr, #16]
   118c8:	str	r4, [sp, #4]
   118cc:	ldrd	r4, [lr, #24]
   118d0:	strd	r8, [sp, #8]
   118d4:	ldrd	r8, [lr, #32]
   118d8:	strd	r2, [sp, #16]
   118dc:	ldrd	r2, [lr, #40]	; 0x28
   118e0:	strd	r4, [sp, #24]
   118e4:	ldrd	r4, [lr, #48]	; 0x30
   118e8:	strd	r8, [sp, #32]
   118ec:	strd	r2, [sp, #40]	; 0x28
   118f0:	strd	r4, [sp, #48]	; 0x30
   118f4:	movwne	r5, #25956	; 0x6564
   118f8:	mov	r4, sp
   118fc:	movtne	r5, #1
   11900:	bne	119f8 <__assert_fail@plt+0xaf8>
   11904:	ldr	r4, [r4, #4]
   11908:	movw	r1, #26856	; 0x68e8
   1190c:	movt	r1, #1
   11910:	mov	r2, #5
   11914:	cmp	r4, #0
   11918:	beq	11a0c <__assert_fail@plt+0xb0c>
   1191c:	mov	r0, #0
   11920:	bl	10d38 <dcgettext@plt>
   11924:	mov	r1, r0
   11928:	movw	r3, #26880	; 0x6900
   1192c:	movt	r3, #1
   11930:	movw	r2, #26920	; 0x6928
   11934:	movt	r2, #1
   11938:	mov	r0, #1
   1193c:	bl	10e40 <__printf_chk@plt>
   11940:	mov	r1, #0
   11944:	mov	r0, #5
   11948:	bl	10e94 <setlocale@plt>
   1194c:	cmp	r0, #0
   11950:	movweq	r5, #25956	; 0x6564
   11954:	movteq	r5, #1
   11958:	beq	1197c <__assert_fail@plt+0xa7c>
   1195c:	movw	r1, #26936	; 0x6938
   11960:	movt	r1, #1
   11964:	mov	r2, #3
   11968:	movw	r5, #25956	; 0x6564
   1196c:	movt	r5, #1
   11970:	bl	10ee8 <strncmp@plt>
   11974:	cmp	r0, #0
   11978:	bne	11ac4 <__assert_fail@plt+0xbc4>
   1197c:	mov	r2, #5
   11980:	movw	r1, #27012	; 0x6984
   11984:	movt	r1, #1
   11988:	mov	r0, #0
   1198c:	bl	10d38 <dcgettext@plt>
   11990:	mov	r1, r0
   11994:	movw	r3, #25956	; 0x6564
   11998:	movt	r3, #1
   1199c:	movw	r2, #26880	; 0x6900
   119a0:	movt	r2, #1
   119a4:	mov	r0, #1
   119a8:	bl	10e40 <__printf_chk@plt>
   119ac:	mov	r2, #5
   119b0:	movw	r1, #27040	; 0x69a0
   119b4:	movt	r1, #1
   119b8:	mov	r0, #0
   119bc:	bl	10d38 <dcgettext@plt>
   119c0:	movw	r2, #27240	; 0x6a68
   119c4:	movt	r2, #1
   119c8:	cmp	r4, r5
   119cc:	movw	r3, #26528	; 0x67a0
   119d0:	movt	r3, #1
   119d4:	mov	r1, r0
   119d8:	moveq	r3, r2
   119dc:	mov	r2, r4
   119e0:	mov	r0, #1
   119e4:	bl	10e40 <__printf_chk@plt>
   119e8:	b	11794 <__assert_fail@plt+0x894>
   119ec:	ldr	r1, [r4, #8]!
   119f0:	cmp	r1, #0
   119f4:	beq	11904 <__assert_fail@plt+0xa04>
   119f8:	mov	r0, r5
   119fc:	bl	10cb4 <strcmp@plt>
   11a00:	cmp	r0, #0
   11a04:	bne	119ec <__assert_fail@plt+0xaec>
   11a08:	b	11904 <__assert_fail@plt+0xa04>
   11a0c:	mov	r0, r4
   11a10:	bl	10d38 <dcgettext@plt>
   11a14:	mov	r1, r0
   11a18:	movw	r3, #26880	; 0x6900
   11a1c:	movt	r3, #1
   11a20:	movw	r2, #26920	; 0x6928
   11a24:	movt	r2, #1
   11a28:	mov	r0, #1
   11a2c:	bl	10e40 <__printf_chk@plt>
   11a30:	mov	r1, r4
   11a34:	mov	r0, #5
   11a38:	bl	10e94 <setlocale@plt>
   11a3c:	cmp	r0, #0
   11a40:	beq	11a5c <__assert_fail@plt+0xb5c>
   11a44:	movw	r1, #26936	; 0x6938
   11a48:	movt	r1, #1
   11a4c:	mov	r2, #3
   11a50:	bl	10ee8 <strncmp@plt>
   11a54:	cmp	r0, #0
   11a58:	bne	11ab8 <__assert_fail@plt+0xbb8>
   11a5c:	mov	r2, #5
   11a60:	movw	r1, #27012	; 0x6984
   11a64:	movt	r1, #1
   11a68:	mov	r0, #0
   11a6c:	bl	10d38 <dcgettext@plt>
   11a70:	mov	r1, r0
   11a74:	movw	r3, #25956	; 0x6564
   11a78:	movt	r3, #1
   11a7c:	movw	r2, #26880	; 0x6900
   11a80:	movt	r2, #1
   11a84:	mov	r0, #1
   11a88:	bl	10e40 <__printf_chk@plt>
   11a8c:	movw	r1, #27040	; 0x69a0
   11a90:	movt	r1, #1
   11a94:	mov	r2, #5
   11a98:	mov	r0, #0
   11a9c:	bl	10d38 <dcgettext@plt>
   11aa0:	movw	r4, #25956	; 0x6564
   11aa4:	movt	r4, #1
   11aa8:	movw	r3, #27240	; 0x6a68
   11aac:	movt	r3, #1
   11ab0:	mov	r1, r0
   11ab4:	b	119dc <__assert_fail@plt+0xadc>
   11ab8:	movw	r5, #25956	; 0x6564
   11abc:	movt	r5, #1
   11ac0:	mov	r4, r5
   11ac4:	mov	r2, #5
   11ac8:	movw	r1, #26940	; 0x693c
   11acc:	movt	r1, #1
   11ad0:	mov	r0, #0
   11ad4:	bl	10d38 <dcgettext@plt>
   11ad8:	ldr	r1, [r7]
   11adc:	bl	10ca8 <fputs_unlocked@plt>
   11ae0:	b	1197c <__assert_fail@plt+0xa7c>
   11ae4:	cmp	r1, #1
   11ae8:	ble	11c04 <__assert_fail@plt+0xd04>
   11aec:	strd	r4, [sp, #-16]!
   11af0:	movw	ip, #27404	; 0x6b0c
   11af4:	movt	ip, #1
   11af8:	str	r6, [sp, #8]
   11afc:	str	lr, [sp, #12]
   11b00:	ldrb	lr, [r0]
   11b04:	ldrsb	r5, [ip, lr]
   11b08:	cmp	r5, #0
   11b0c:	blt	11bc4 <__assert_fail@plt+0xcc4>
   11b10:	ldrb	lr, [r0, #1]
   11b14:	ldrsb	r6, [ip, lr]
   11b18:	cmp	r6, #0
   11b1c:	blt	11bc4 <__assert_fail@plt+0xcc4>
   11b20:	ldr	r4, [r3]
   11b24:	ldr	lr, [r2]
   11b28:	cmp	r4, #0
   11b2c:	bne	11c0c <__assert_fail@plt+0xd0c>
   11b30:	cmp	r1, #2
   11b34:	beq	11bec <__assert_fail@plt+0xcec>
   11b38:	ldrb	r5, [r0, #2]
   11b3c:	cmp	r5, #61	; 0x3d
   11b40:	beq	11bd8 <__assert_fail@plt+0xcd8>
   11b44:	ldrsb	r5, [ip, r5]
   11b48:	cmp	r5, #0
   11b4c:	blt	11bec <__assert_fail@plt+0xcec>
   11b50:	cmp	r4, #0
   11b54:	beq	11b70 <__assert_fail@plt+0xc70>
   11b58:	asr	r4, r5, #2
   11b5c:	orr	r6, r4, r6, lsl #4
   11b60:	strb	r6, [lr], #1
   11b64:	ldr	r4, [r3]
   11b68:	sub	r4, r4, #1
   11b6c:	str	r4, [r3]
   11b70:	cmp	r1, #3
   11b74:	beq	11bec <__assert_fail@plt+0xcec>
   11b78:	ldrb	r0, [r0, #3]
   11b7c:	cmp	r0, #61	; 0x3d
   11b80:	beq	11c28 <__assert_fail@plt+0xd28>
   11b84:	ldrsb	r1, [ip, r0]
   11b88:	cmp	r1, #0
   11b8c:	blt	11bec <__assert_fail@plt+0xcec>
   11b90:	cmp	r4, #0
   11b94:	beq	11bac <__assert_fail@plt+0xcac>
   11b98:	orr	r5, r1, r5, lsl #6
   11b9c:	strb	r5, [lr], #1
   11ba0:	ldr	r1, [r3]
   11ba4:	sub	r1, r1, #1
   11ba8:	str	r1, [r3]
   11bac:	ldrd	r4, [sp]
   11bb0:	mov	r0, #1
   11bb4:	str	lr, [r2]
   11bb8:	ldr	r6, [sp, #8]
   11bbc:	add	sp, sp, #12
   11bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   11bc4:	ldrd	r4, [sp]
   11bc8:	mov	r0, #0
   11bcc:	ldr	r6, [sp, #8]
   11bd0:	add	sp, sp, #12
   11bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   11bd8:	cmp	r1, #4
   11bdc:	bne	11bec <__assert_fail@plt+0xcec>
   11be0:	ldrb	r3, [r0, #3]
   11be4:	cmp	r3, #61	; 0x3d
   11be8:	beq	11bac <__assert_fail@plt+0xcac>
   11bec:	ldrd	r4, [sp]
   11bf0:	mov	r0, #0
   11bf4:	str	lr, [r2]
   11bf8:	ldr	r6, [sp, #8]
   11bfc:	add	sp, sp, #12
   11c00:	pop	{pc}		; (ldr pc, [sp], #4)
   11c04:	mov	r0, #0
   11c08:	bx	lr
   11c0c:	asr	r4, r6, #4
   11c10:	orr	r5, r4, r5, lsl #2
   11c14:	strb	r5, [lr], #1
   11c18:	ldr	r4, [r3]
   11c1c:	sub	r4, r4, #1
   11c20:	str	r4, [r3]
   11c24:	b	11b30 <__assert_fail@plt+0xc30>
   11c28:	cmp	r1, #4
   11c2c:	beq	11bac <__assert_fail@plt+0xcac>
   11c30:	b	11bec <__assert_fail@plt+0xcec>
   11c34:	tst	r3, #3
   11c38:	mov	ip, r3
   11c3c:	strd	r4, [sp, #-16]!
   11c40:	str	r6, [sp, #8]
   11c44:	str	lr, [sp, #12]
   11c48:	bne	11c5c <__assert_fail@plt+0xd5c>
   11c4c:	asr	r3, r3, #2
   11c50:	add	r3, r3, r3, lsl #1
   11c54:	cmp	r3, r1
   11c58:	beq	11da0 <__assert_fail@plt+0xea0>
   11c5c:	movw	r4, #27404	; 0x6b0c
   11c60:	movt	r4, #1
   11c64:	add	r2, r2, #4
   11c68:	mov	r5, #61	; 0x3d
   11c6c:	b	11ce4 <__assert_fail@plt+0xde4>
   11c70:	ldrb	lr, [r0, #1]
   11c74:	cmp	ip, #2
   11c78:	add	r3, r3, lr, lsr #4
   11c7c:	and	r3, r3, #63	; 0x3f
   11c80:	add	r3, r4, r3
   11c84:	ldrb	r3, [r3, #256]	; 0x100
   11c88:	strb	r3, [r2, #-3]
   11c8c:	beq	11d74 <__assert_fail@plt+0xe74>
   11c90:	cmp	r1, #2
   11c94:	lsl	lr, lr, #2
   11c98:	beq	11d5c <__assert_fail@plt+0xe5c>
   11c9c:	ldrb	r3, [r0, #2]
   11ca0:	cmp	ip, #3
   11ca4:	add	lr, lr, r3, lsr #6
   11ca8:	and	lr, lr, #63	; 0x3f
   11cac:	add	lr, r4, lr
   11cb0:	ldrb	lr, [lr, #256]	; 0x100
   11cb4:	strb	lr, [r2, #-2]
   11cb8:	beq	11d74 <__assert_fail@plt+0xe74>
   11cbc:	and	r3, r3, #63	; 0x3f
   11cc0:	cmp	ip, #4
   11cc4:	add	r3, r4, r3
   11cc8:	ldrb	r3, [r3, #256]	; 0x100
   11ccc:	strb	r3, [r2, #-1]
   11cd0:	beq	11d74 <__assert_fail@plt+0xe74>
   11cd4:	subs	r1, r1, #3
   11cd8:	addne	r0, r0, #3
   11cdc:	sub	ip, ip, #4
   11ce0:	add	r2, r2, #4
   11ce4:	adds	r3, ip, #0
   11ce8:	sub	lr, r2, #4
   11cec:	movne	r3, #1
   11cf0:	cmp	r1, #0
   11cf4:	moveq	r3, #0
   11cf8:	cmp	r3, #0
   11cfc:	beq	11d84 <__assert_fail@plt+0xe84>
   11d00:	ldrb	r3, [r0]
   11d04:	cmp	ip, #1
   11d08:	add	lr, r4, r3, lsr #2
   11d0c:	ldrb	lr, [lr, #256]	; 0x100
   11d10:	strb	lr, [r2, #-4]
   11d14:	beq	11d74 <__assert_fail@plt+0xe74>
   11d18:	cmp	r1, #1
   11d1c:	lsl	r3, r3, #4
   11d20:	bne	11c70 <__assert_fail@plt+0xd70>
   11d24:	and	r3, r3, #63	; 0x3f
   11d28:	cmp	ip, #2
   11d2c:	add	r3, r4, r3
   11d30:	ldrb	r3, [r3, #256]	; 0x100
   11d34:	strb	r3, [r2, #-3]
   11d38:	beq	11d74 <__assert_fail@plt+0xe74>
   11d3c:	cmp	ip, #3
   11d40:	strb	r5, [r2, #-2]
   11d44:	beq	11d74 <__assert_fail@plt+0xe74>
   11d48:	cmp	ip, #4
   11d4c:	strb	r5, [r2, #-1]
   11d50:	beq	11d74 <__assert_fail@plt+0xe74>
   11d54:	mov	r1, #0
   11d58:	b	11cdc <__assert_fail@plt+0xddc>
   11d5c:	and	lr, lr, #63	; 0x3f
   11d60:	cmp	ip, #3
   11d64:	add	lr, r4, lr
   11d68:	ldrb	r3, [lr, #256]	; 0x100
   11d6c:	strb	r3, [r2, #-2]
   11d70:	bne	11d48 <__assert_fail@plt+0xe48>
   11d74:	ldrd	r4, [sp]
   11d78:	ldr	r6, [sp, #8]
   11d7c:	add	sp, sp, #12
   11d80:	pop	{pc}		; (ldr pc, [sp], #4)
   11d84:	cmp	ip, #0
   11d88:	beq	11d74 <__assert_fail@plt+0xe74>
   11d8c:	strb	r3, [r2, #-4]
   11d90:	ldrd	r4, [sp]
   11d94:	ldr	r6, [sp, #8]
   11d98:	add	sp, sp, #12
   11d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11da0:	cmp	r3, #0
   11da4:	beq	11d74 <__assert_fail@plt+0xe74>
   11da8:	add	r1, r3, #3
   11dac:	movw	r4, #27404	; 0x6b0c
   11db0:	movt	r4, #1
   11db4:	add	r3, r2, #4
   11db8:	add	r2, r0, r1
   11dbc:	add	r0, r0, #3
   11dc0:	ldrb	r6, [r0, #-2]
   11dc4:	add	r0, r0, #3
   11dc8:	add	r3, r3, #4
   11dcc:	ldrb	lr, [r0, #-4]
   11dd0:	ldrb	r5, [r0, #-6]
   11dd4:	cmp	r2, r0
   11dd8:	lsr	r1, r6, #4
   11ddc:	lsr	ip, lr, #6
   11de0:	and	lr, lr, #63	; 0x3f
   11de4:	add	lr, r4, lr
   11de8:	add	ip, ip, r6, lsl #2
   11dec:	ldrb	lr, [lr, #256]	; 0x100
   11df0:	add	r1, r1, r5, lsl #4
   11df4:	and	ip, ip, #63	; 0x3f
   11df8:	add	r5, r4, r5, lsr #2
   11dfc:	and	r1, r1, #63	; 0x3f
   11e00:	add	ip, r4, ip
   11e04:	add	r1, r4, r1
   11e08:	ldrb	r6, [ip, #256]	; 0x100
   11e0c:	ldrb	ip, [r1, #256]	; 0x100
   11e10:	ldrb	r1, [r5, #256]	; 0x100
   11e14:	strb	lr, [r3, #-5]
   11e18:	strb	r6, [r3, #-6]
   11e1c:	strb	r1, [r3, #-8]
   11e20:	strb	ip, [r3, #-7]
   11e24:	bne	11dc0 <__assert_fail@plt+0xec0>
   11e28:	b	11d74 <__assert_fail@plt+0xe74>
   11e2c:	movw	r3, #21846	; 0x5556
   11e30:	movt	r3, #21845	; 0x5555
   11e34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11e38:	strd	r6, [sp, #8]
   11e3c:	smull	ip, r3, r3, r1
   11e40:	str	r8, [sp, #16]
   11e44:	str	lr, [sp, #20]
   11e48:	sub	r3, r3, r1, asr #31
   11e4c:	add	ip, r3, r3, lsl #1
   11e50:	cmp	r1, ip
   11e54:	addne	r3, r3, #1
   11e58:	asr	r7, r3, #31
   11e5c:	lsl	r5, r3, #2
   11e60:	lsl	ip, r7, #2
   11e64:	orr	ip, ip, r3, lsr #30
   11e68:	cmp	ip, r5, asr #31
   11e6c:	movne	r3, #1
   11e70:	moveq	r3, #0
   11e74:	orrs	r3, r3, r1, lsr #31
   11e78:	beq	11ea0 <__assert_fail@plt+0xfa0>
   11e7c:	mov	r3, #0
   11e80:	mov	r5, r3
   11e84:	str	r3, [r2]
   11e88:	mov	r0, r5
   11e8c:	ldrd	r4, [sp]
   11e90:	ldrd	r6, [sp, #8]
   11e94:	ldr	r8, [sp, #16]
   11e98:	add	sp, sp, #20
   11e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11ea0:	add	r8, r5, #1
   11ea4:	mov	r7, r0
   11ea8:	mov	r0, r8
   11eac:	mov	r6, r2
   11eb0:	mov	r4, r1
   11eb4:	bl	160fc <__assert_fail@plt+0x51fc>
   11eb8:	cmp	r0, #0
   11ebc:	str	r0, [r6]
   11ec0:	moveq	r5, r8
   11ec4:	beq	11e88 <__assert_fail@plt+0xf88>
   11ec8:	mov	r2, r0
   11ecc:	mov	r3, r8
   11ed0:	mov	r1, r4
   11ed4:	mov	r0, r7
   11ed8:	bl	11c34 <__assert_fail@plt+0xd34>
   11edc:	b	11e88 <__assert_fail@plt+0xf88>
   11ee0:	movw	r3, #27404	; 0x6b0c
   11ee4:	movt	r3, #1
   11ee8:	ldrb	r0, [r3, r0]
   11eec:	mvn	r0, r0
   11ef0:	ubfx	r0, r0, #7, #1
   11ef4:	bx	lr
   11ef8:	mov	r3, #0
   11efc:	str	r3, [r0]
   11f00:	bx	lr
   11f04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11f08:	strd	r6, [sp, #8]
   11f0c:	mov	r6, r1
   11f10:	mov	r1, r2
   11f14:	strd	r8, [sp, #16]
   11f18:	subs	r8, r0, #0
   11f1c:	strd	sl, [sp, #24]
   11f20:	movne	fp, #1
   11f24:	moveq	fp, #0
   11f28:	str	lr, [sp, #32]
   11f2c:	sub	sp, sp, #20
   11f30:	str	r3, [sp, #4]
   11f34:	ldr	r3, [sp, #56]	; 0x38
   11f38:	ldr	r7, [r3]
   11f3c:	str	r7, [sp, #12]
   11f40:	beq	12158 <__assert_fail@plt+0x1258>
   11f44:	ldr	sl, [r8]
   11f48:	adds	r9, r2, #0
   11f4c:	movne	r9, #1
   11f50:	cmp	sl, #0
   11f54:	moveq	sl, r9
   11f58:	movne	sl, #0
   11f5c:	and	fp, fp, r9
   11f60:	b	11fb0 <__assert_fail@plt+0x10b0>
   11f64:	ldrb	r2, [r6]
   11f68:	cmp	r2, #10
   11f6c:	beq	12098 <__assert_fail@plt+0x1198>
   11f70:	ldr	r2, [sp, #4]
   11f74:	sub	r3, r7, r3
   11f78:	cmp	r8, #0
   11f7c:	add	r4, r6, r1
   11f80:	str	r7, [sp, #12]
   11f84:	sub	r3, r2, r3
   11f88:	str	r3, [sp, #4]
   11f8c:	bne	12188 <__assert_fail@plt+0x1288>
   11f90:	mov	r0, r6
   11f94:	add	r3, sp, #12
   11f98:	add	r2, sp, #4
   11f9c:	bl	11ae4 <__assert_fail@plt+0xbe4>
   11fa0:	cmp	r0, #0
   11fa4:	beq	12170 <__assert_fail@plt+0x1270>
   11fa8:	ldr	r7, [sp, #12]
   11fac:	sub	r1, r4, r6
   11fb0:	cmp	sl, #0
   11fb4:	moveq	r3, r7
   11fb8:	bne	1205c <__assert_fail@plt+0x115c>
   11fbc:	cmp	r1, #0
   11fc0:	moveq	r0, r9
   11fc4:	movne	r0, #0
   11fc8:	cmp	r0, #0
   11fcc:	bne	1202c <__assert_fail@plt+0x112c>
   11fd0:	cmp	r1, #0
   11fd4:	bne	11f64 <__assert_fail@plt+0x1064>
   11fd8:	ldr	r2, [sp, #4]
   11fdc:	sub	r3, r7, r3
   11fe0:	cmp	r8, #0
   11fe4:	str	r7, [sp, #12]
   11fe8:	sub	r3, r2, r3
   11fec:	str	r3, [sp, #4]
   11ff0:	beq	12164 <__assert_fail@plt+0x1264>
   11ff4:	ldr	r3, [r8]
   11ff8:	cmp	r3, #4
   11ffc:	beq	120b0 <__assert_fail@plt+0x11b0>
   12000:	mov	r1, r3
   12004:	mov	r4, r6
   12008:	cmp	r1, #0
   1200c:	add	r0, r8, #4
   12010:	beq	12024 <__assert_fail@plt+0x1124>
   12014:	cmp	r1, #3
   12018:	bgt	11f94 <__assert_fail@plt+0x1094>
   1201c:	cmp	fp, #0
   12020:	beq	11f94 <__assert_fail@plt+0x1094>
   12024:	ldr	r3, [sp, #12]
   12028:	mov	r0, #1
   1202c:	ldr	r2, [sp, #56]	; 0x38
   12030:	ldr	r2, [r2]
   12034:	sub	r3, r2, r3
   12038:	ldr	r2, [sp, #56]	; 0x38
   1203c:	str	r3, [r2]
   12040:	add	sp, sp, #20
   12044:	ldrd	r4, [sp]
   12048:	ldrd	r6, [sp, #8]
   1204c:	ldrd	r8, [sp, #16]
   12050:	ldrd	sl, [sp, #24]
   12054:	add	sp, sp, #32
   12058:	pop	{pc}		; (ldr pc, [sp], #4)
   1205c:	add	r5, r6, r1
   12060:	b	1206c <__assert_fail@plt+0x116c>
   12064:	ldr	r7, [sp, #12]
   12068:	add	r6, r6, #4
   1206c:	sub	r4, r5, r6
   12070:	add	r3, sp, #12
   12074:	mov	r1, r4
   12078:	add	r2, sp, #4
   1207c:	mov	r0, r6
   12080:	bl	11ae4 <__assert_fail@plt+0xbe4>
   12084:	cmp	r0, #0
   12088:	bne	12064 <__assert_fail@plt+0x1164>
   1208c:	mov	r1, r4
   12090:	ldr	r3, [sp, #12]
   12094:	b	11fbc <__assert_fail@plt+0x10bc>
   12098:	cmp	r8, #0
   1209c:	beq	12138 <__assert_fail@plt+0x1238>
   120a0:	add	r6, r6, #1
   120a4:	sub	r1, r1, #1
   120a8:	mov	r7, r3
   120ac:	b	11fb0 <__assert_fail@plt+0x10b0>
   120b0:	mov	r4, r6
   120b4:	mov	r2, #0
   120b8:	mov	r3, #1
   120bc:	mov	r5, r2
   120c0:	str	r2, [r8]
   120c4:	cmp	r1, #3
   120c8:	movle	r1, #0
   120cc:	andgt	r1, r3, #1
   120d0:	cmp	r1, #0
   120d4:	beq	120f0 <__assert_fail@plt+0x11f0>
   120d8:	mov	r2, #4
   120dc:	mov	r1, #10
   120e0:	mov	r0, r6
   120e4:	bl	10e64 <memchr@plt>
   120e8:	cmp	r0, #0
   120ec:	beq	12178 <__assert_fail@plt+0x1278>
   120f0:	cmp	r4, r6
   120f4:	movls	r1, r5
   120f8:	bls	12008 <__assert_fail@plt+0x1108>
   120fc:	ldrb	r2, [r6], #1
   12100:	add	r1, r5, #1
   12104:	mov	r3, r8
   12108:	cmp	r2, #10
   1210c:	beq	12124 <__assert_fail@plt+0x1224>
   12110:	cmp	r1, #4
   12114:	str	r1, [r3], r5
   12118:	mov	r5, r1
   1211c:	strb	r2, [r3, #4]
   12120:	beq	12008 <__assert_fail@plt+0x1108>
   12124:	cmp	r4, r6
   12128:	bne	120fc <__assert_fail@plt+0x11fc>
   1212c:	mov	r1, r5
   12130:	mov	r6, r4
   12134:	b	12008 <__assert_fail@plt+0x1108>
   12138:	ldr	r2, [sp, #4]
   1213c:	sub	r3, r7, r3
   12140:	add	r4, r6, r1
   12144:	mov	r0, r6
   12148:	str	r7, [sp, #12]
   1214c:	sub	r3, r2, r3
   12150:	str	r3, [sp, #4]
   12154:	b	12014 <__assert_fail@plt+0x1114>
   12158:	mov	sl, #1
   1215c:	mov	r9, sl
   12160:	b	11f5c <__assert_fail@plt+0x105c>
   12164:	mov	r3, r7
   12168:	mov	r0, #1
   1216c:	b	1202c <__assert_fail@plt+0x112c>
   12170:	ldr	r3, [sp, #12]
   12174:	b	1202c <__assert_fail@plt+0x112c>
   12178:	mov	r1, #4
   1217c:	mov	r0, r6
   12180:	add	r6, r6, r1
   12184:	b	11f94 <__assert_fail@plt+0x1094>
   12188:	ldr	r5, [r8]
   1218c:	cmp	r5, #4
   12190:	beq	120b4 <__assert_fail@plt+0x11b4>
   12194:	clz	r3, r5
   12198:	lsr	r3, r3, #5
   1219c:	b	120c4 <__assert_fail@plt+0x11c4>
   121a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   121a4:	mov	r5, r3
   121a8:	mov	r4, r2
   121ac:	strd	r6, [sp, #8]
   121b0:	mov	r6, r0
   121b4:	asr	r0, r2, #2
   121b8:	str	lr, [sp, #16]
   121bc:	sub	sp, sp, #20
   121c0:	mov	r7, r1
   121c4:	add	r3, r0, #1
   121c8:	add	r3, r3, r3, lsl #1
   121cc:	mov	r0, r3
   121d0:	str	r3, [sp, #12]
   121d4:	bl	160fc <__assert_fail@plt+0x51fc>
   121d8:	cmp	r0, #0
   121dc:	str	r0, [r5]
   121e0:	beq	12238 <__assert_fail@plt+0x1338>
   121e4:	add	ip, sp, #12
   121e8:	mov	r3, r0
   121ec:	mov	r2, r4
   121f0:	mov	r1, r7
   121f4:	mov	r0, r6
   121f8:	str	ip, [sp]
   121fc:	bl	11f04 <__assert_fail@plt+0x1004>
   12200:	subs	r4, r0, #0
   12204:	beq	12240 <__assert_fail@plt+0x1340>
   12208:	ldr	r3, [sp, #40]	; 0x28
   1220c:	cmp	r3, #0
   12210:	beq	12238 <__assert_fail@plt+0x1338>
   12214:	ldr	r3, [sp, #12]
   12218:	ldr	r2, [sp, #40]	; 0x28
   1221c:	str	r3, [r2]
   12220:	mov	r0, r4
   12224:	add	sp, sp, #20
   12228:	ldrd	r4, [sp]
   1222c:	ldrd	r6, [sp, #8]
   12230:	add	sp, sp, #16
   12234:	pop	{pc}		; (ldr pc, [sp], #4)
   12238:	mov	r4, #1
   1223c:	b	12220 <__assert_fail@plt+0x1320>
   12240:	ldr	r0, [r5]
   12244:	bl	124c4 <__assert_fail@plt+0x15c4>
   12248:	str	r4, [r5]
   1224c:	b	12220 <__assert_fail@plt+0x1320>
   12250:	movw	r3, #33112	; 0x8158
   12254:	movt	r3, #2
   12258:	str	r0, [r3]
   1225c:	bx	lr
   12260:	movw	r3, #33112	; 0x8158
   12264:	movt	r3, #2
   12268:	strb	r0, [r3, #4]
   1226c:	bx	lr
   12270:	movw	r3, #33100	; 0x814c
   12274:	movt	r3, #2
   12278:	strd	r4, [sp, #-16]!
   1227c:	ldr	r0, [r3]
   12280:	str	r6, [sp, #8]
   12284:	str	lr, [sp, #12]
   12288:	sub	sp, sp, #8
   1228c:	bl	16190 <__assert_fail@plt+0x5290>
   12290:	cmp	r0, #0
   12294:	beq	122c0 <__assert_fail@plt+0x13c0>
   12298:	movw	r4, #33112	; 0x8158
   1229c:	movt	r4, #2
   122a0:	ldrb	r6, [r4, #4]
   122a4:	bl	10e1c <__errno_location@plt>
   122a8:	mov	r5, r0
   122ac:	cmp	r6, #0
   122b0:	beq	122ec <__assert_fail@plt+0x13ec>
   122b4:	ldr	r3, [r0]
   122b8:	cmp	r3, #32
   122bc:	bne	122ec <__assert_fail@plt+0x13ec>
   122c0:	movw	r3, #33088	; 0x8140
   122c4:	movt	r3, #2
   122c8:	ldr	r0, [r3]
   122cc:	bl	16190 <__assert_fail@plt+0x5290>
   122d0:	cmp	r0, #0
   122d4:	bne	12334 <__assert_fail@plt+0x1434>
   122d8:	add	sp, sp, #8
   122dc:	ldrd	r4, [sp]
   122e0:	ldr	r6, [sp, #8]
   122e4:	add	sp, sp, #12
   122e8:	pop	{pc}		; (ldr pc, [sp], #4)
   122ec:	movw	r1, #27204	; 0x6a44
   122f0:	movt	r1, #1
   122f4:	mov	r2, #5
   122f8:	mov	r0, #0
   122fc:	bl	10d38 <dcgettext@plt>
   12300:	mov	r6, r0
   12304:	ldr	r0, [r4]
   12308:	cmp	r0, #0
   1230c:	beq	12344 <__assert_fail@plt+0x1444>
   12310:	ldr	r4, [r5]
   12314:	bl	146f8 <__assert_fail@plt+0x37f8>
   12318:	mov	r3, r0
   1231c:	movw	r2, #27136	; 0x6a00
   12320:	movt	r2, #1
   12324:	mov	r0, #0
   12328:	str	r6, [sp]
   1232c:	mov	r1, r4
   12330:	bl	10da4 <error@plt>
   12334:	movw	r3, #33004	; 0x80ec
   12338:	movt	r3, #2
   1233c:	ldr	r0, [r3]
   12340:	bl	10cf0 <_exit@plt>
   12344:	mov	r3, r6
   12348:	movw	r2, #27140	; 0x6a04
   1234c:	movt	r2, #1
   12350:	ldr	r1, [r5]
   12354:	bl	10da4 <error@plt>
   12358:	b	12334 <__assert_fail@plt+0x1434>
   1235c:	b	10cc0 <posix_fadvise64@plt>
   12360:	cmp	r0, #0
   12364:	bxeq	lr
   12368:	str	r4, [sp, #-16]!
   1236c:	mov	r4, r1
   12370:	strd	r6, [sp, #4]
   12374:	mov	r6, #0
   12378:	mov	r7, #0
   1237c:	str	lr, [sp, #12]
   12380:	sub	sp, sp, #16
   12384:	bl	10e4c <fileno@plt>
   12388:	mov	r2, r6
   1238c:	mov	r3, r7
   12390:	strd	r6, [sp]
   12394:	str	r4, [sp, #8]
   12398:	bl	10cc0 <posix_fadvise64@plt>
   1239c:	add	sp, sp, #16
   123a0:	ldr	r4, [sp]
   123a4:	ldrd	r6, [sp, #4]
   123a8:	add	sp, sp, #12
   123ac:	pop	{pc}		; (ldr pc, [sp], #4)
   123b0:	strd	r4, [sp, #-12]!
   123b4:	mov	r4, r0
   123b8:	str	lr, [sp, #8]
   123bc:	sub	sp, sp, #12
   123c0:	bl	10e4c <fileno@plt>
   123c4:	cmp	r0, #0
   123c8:	mov	r0, r4
   123cc:	blt	12450 <__assert_fail@plt+0x1550>
   123d0:	bl	10dc8 <__freading@plt>
   123d4:	cmp	r0, #0
   123d8:	bne	1241c <__assert_fail@plt+0x151c>
   123dc:	mov	r0, r4
   123e0:	bl	12464 <__assert_fail@plt+0x1564>
   123e4:	cmp	r0, #0
   123e8:	beq	1244c <__assert_fail@plt+0x154c>
   123ec:	bl	10e1c <__errno_location@plt>
   123f0:	mov	r5, r0
   123f4:	mov	r0, r4
   123f8:	ldr	r4, [r5]
   123fc:	bl	10e70 <fclose@plt>
   12400:	cmp	r4, #0
   12404:	mvnne	r0, #0
   12408:	strne	r4, [r5]
   1240c:	add	sp, sp, #12
   12410:	ldrd	r4, [sp]
   12414:	add	sp, sp, #8
   12418:	pop	{pc}		; (ldr pc, [sp], #4)
   1241c:	mov	r0, r4
   12420:	bl	10e4c <fileno@plt>
   12424:	mov	r1, #1
   12428:	mov	r2, #0
   1242c:	mov	r3, #0
   12430:	str	r1, [sp]
   12434:	bl	10d74 <lseek64@plt>
   12438:	mvn	r3, #0
   1243c:	mvn	r2, #0
   12440:	cmp	r1, r3
   12444:	cmpeq	r0, r2
   12448:	bne	123dc <__assert_fail@plt+0x14dc>
   1244c:	mov	r0, r4
   12450:	add	sp, sp, #12
   12454:	ldrd	r4, [sp]
   12458:	ldr	lr, [sp, #8]
   1245c:	add	sp, sp, #12
   12460:	b	10e70 <fclose@plt>
   12464:	str	r4, [sp, #-8]!
   12468:	subs	r4, r0, #0
   1246c:	str	lr, [sp, #4]
   12470:	sub	sp, sp, #8
   12474:	beq	12490 <__assert_fail@plt+0x1590>
   12478:	bl	10dc8 <__freading@plt>
   1247c:	cmp	r0, #0
   12480:	beq	12490 <__assert_fail@plt+0x1590>
   12484:	ldr	r3, [r4]
   12488:	tst	r3, #256	; 0x100
   1248c:	bne	124a8 <__assert_fail@plt+0x15a8>
   12490:	mov	r0, r4
   12494:	add	sp, sp, #8
   12498:	ldr	r4, [sp]
   1249c:	ldr	lr, [sp, #4]
   124a0:	add	sp, sp, #8
   124a4:	b	10ccc <fflush@plt>
   124a8:	mov	r1, #1
   124ac:	mov	r2, #0
   124b0:	mov	r3, #0
   124b4:	mov	r0, r4
   124b8:	str	r1, [sp]
   124bc:	bl	12524 <__assert_fail@plt+0x1624>
   124c0:	b	12490 <__assert_fail@plt+0x1590>
   124c4:	strd	r4, [sp, #-12]!
   124c8:	mov	r5, r0
   124cc:	str	lr, [sp, #8]
   124d0:	sub	sp, sp, #12
   124d4:	bl	10e1c <__errno_location@plt>
   124d8:	mov	r4, r0
   124dc:	mov	r2, #0
   124e0:	ldr	r3, [r4]
   124e4:	mov	r0, r5
   124e8:	str	r2, [r4]
   124ec:	str	r3, [sp]
   124f0:	str	r3, [sp, #4]
   124f4:	bl	10ce4 <free@plt>
   124f8:	ldr	r3, [r4]
   124fc:	add	r2, sp, #8
   12500:	clz	r3, r3
   12504:	lsr	r3, r3, #5
   12508:	add	r3, r2, r3, lsl #2
   1250c:	ldr	r3, [r3, #-8]
   12510:	str	r3, [r4]
   12514:	add	sp, sp, #12
   12518:	ldrd	r4, [sp]
   1251c:	add	sp, sp, #8
   12520:	pop	{pc}		; (ldr pc, [sp], #4)
   12524:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12528:	mov	r4, r0
   1252c:	ldr	ip, [r0, #4]
   12530:	strd	r6, [sp, #8]
   12534:	str	lr, [sp, #20]
   12538:	ldr	lr, [r0, #8]
   1253c:	str	r8, [sp, #16]
   12540:	sub	sp, sp, #8
   12544:	ldr	r5, [sp, #32]
   12548:	cmp	lr, ip
   1254c:	beq	12574 <__assert_fail@plt+0x1674>
   12550:	mov	r0, r4
   12554:	str	r5, [sp, #32]
   12558:	add	sp, sp, #8
   1255c:	ldrd	r4, [sp]
   12560:	ldrd	r6, [sp, #8]
   12564:	ldr	r8, [sp, #16]
   12568:	ldr	lr, [sp, #20]
   1256c:	add	sp, sp, #24
   12570:	b	10e7c <fseeko64@plt>
   12574:	ldr	ip, [r0, #16]
   12578:	ldr	lr, [r0, #20]
   1257c:	cmp	lr, ip
   12580:	bne	12550 <__assert_fail@plt+0x1650>
   12584:	ldr	r8, [r0, #36]	; 0x24
   12588:	cmp	r8, #0
   1258c:	bne	12550 <__assert_fail@plt+0x1650>
   12590:	mov	r6, r2
   12594:	mov	r7, r3
   12598:	bl	10e4c <fileno@plt>
   1259c:	mov	r2, r6
   125a0:	mov	r3, r7
   125a4:	str	r5, [sp]
   125a8:	bl	10d74 <lseek64@plt>
   125ac:	mvn	r3, #0
   125b0:	mvn	r2, #0
   125b4:	cmp	r1, r3
   125b8:	cmpeq	r0, r2
   125bc:	beq	125ec <__assert_fail@plt+0x16ec>
   125c0:	ldr	r3, [r4]
   125c4:	strd	r0, [r4, #80]	; 0x50
   125c8:	bic	r3, r3, #16
   125cc:	str	r3, [r4]
   125d0:	mov	r0, r8
   125d4:	add	sp, sp, #8
   125d8:	ldrd	r4, [sp]
   125dc:	ldrd	r6, [sp, #8]
   125e0:	ldr	r8, [sp, #16]
   125e4:	add	sp, sp, #20
   125e8:	pop	{pc}		; (ldr pc, [sp], #4)
   125ec:	mvn	r8, #0
   125f0:	b	125d0 <__assert_fail@plt+0x16d0>
   125f4:	strd	r4, [sp, #-16]!
   125f8:	subs	r4, r0, #0
   125fc:	str	r6, [sp, #8]
   12600:	str	lr, [sp, #12]
   12604:	beq	1269c <__assert_fail@plt+0x179c>
   12608:	mov	r1, #47	; 0x2f
   1260c:	bl	10ea0 <strrchr@plt>
   12610:	subs	r5, r0, #0
   12614:	beq	12674 <__assert_fail@plt+0x1774>
   12618:	add	r6, r5, #1
   1261c:	sub	r3, r6, r4
   12620:	cmp	r3, #6
   12624:	ble	12674 <__assert_fail@plt+0x1774>
   12628:	movw	r1, #27780	; 0x6c84
   1262c:	movt	r1, #1
   12630:	mov	r2, #7
   12634:	sub	r0, r5, #6
   12638:	bl	10ee8 <strncmp@plt>
   1263c:	cmp	r0, #0
   12640:	bne	12674 <__assert_fail@plt+0x1774>
   12644:	movw	r1, #27788	; 0x6c8c
   12648:	movt	r1, #1
   1264c:	mov	r2, #3
   12650:	mov	r0, r6
   12654:	bl	10ee8 <strncmp@plt>
   12658:	cmp	r0, #0
   1265c:	movne	r4, r6
   12660:	bne	12674 <__assert_fail@plt+0x1774>
   12664:	add	r4, r5, #4
   12668:	movw	r3, #33072	; 0x8130
   1266c:	movt	r3, #2
   12670:	str	r4, [r3]
   12674:	movw	r2, #33120	; 0x8160
   12678:	movt	r2, #2
   1267c:	ldr	r6, [sp, #8]
   12680:	movw	r3, #33076	; 0x8134
   12684:	movt	r3, #2
   12688:	str	r4, [r2]
   1268c:	str	r4, [r3]
   12690:	ldrd	r4, [sp]
   12694:	add	sp, sp, #12
   12698:	pop	{pc}		; (ldr pc, [sp], #4)
   1269c:	movw	r3, #33088	; 0x8140
   126a0:	movt	r3, #2
   126a4:	movw	r0, #27724	; 0x6c4c
   126a8:	movt	r0, #1
   126ac:	ldr	r3, [r3]
   126b0:	mov	r2, #55	; 0x37
   126b4:	mov	r1, #1
   126b8:	bl	10d68 <fwrite@plt>
   126bc:	bl	10ef4 <abort@plt>
   126c0:	strd	r4, [sp, #-16]!
   126c4:	mov	r4, #0
   126c8:	mov	r5, #0
   126cc:	cmp	r1, #10
   126d0:	str	r6, [sp, #8]
   126d4:	strd	r4, [r0]
   126d8:	strd	r4, [r0, #8]
   126dc:	str	lr, [sp, #12]
   126e0:	strd	r4, [r0, #16]
   126e4:	strd	r4, [r0, #24]
   126e8:	strd	r4, [r0, #32]
   126ec:	strd	r4, [r0, #40]	; 0x28
   126f0:	beq	12708 <__assert_fail@plt+0x1808>
   126f4:	ldrd	r4, [sp]
   126f8:	str	r1, [r0]
   126fc:	ldr	r6, [sp, #8]
   12700:	add	sp, sp, #12
   12704:	pop	{pc}		; (ldr pc, [sp], #4)
   12708:	bl	10ef4 <abort@plt>
   1270c:	mov	r2, #5
   12710:	strd	r4, [sp, #-16]!
   12714:	mov	r5, r0
   12718:	str	r6, [sp, #8]
   1271c:	mov	r6, r1
   12720:	mov	r1, r0
   12724:	mov	r0, #0
   12728:	str	lr, [sp, #12]
   1272c:	bl	10d38 <dcgettext@plt>
   12730:	cmp	r5, r0
   12734:	mov	r4, r0
   12738:	beq	12750 <__assert_fail@plt+0x1850>
   1273c:	mov	r0, r4
   12740:	ldrd	r4, [sp]
   12744:	ldr	r6, [sp, #8]
   12748:	add	sp, sp, #12
   1274c:	pop	{pc}		; (ldr pc, [sp], #4)
   12750:	bl	16218 <__assert_fail@plt+0x5318>
   12754:	ldrb	r3, [r0]
   12758:	bic	r3, r3, #32
   1275c:	cmp	r3, #85	; 0x55
   12760:	bne	127c8 <__assert_fail@plt+0x18c8>
   12764:	ldrb	r3, [r0, #1]
   12768:	bic	r3, r3, #32
   1276c:	cmp	r3, #84	; 0x54
   12770:	bne	12848 <__assert_fail@plt+0x1948>
   12774:	ldrb	r3, [r0, #2]
   12778:	bic	r3, r3, #32
   1277c:	cmp	r3, #70	; 0x46
   12780:	bne	12848 <__assert_fail@plt+0x1948>
   12784:	ldrb	r3, [r0, #3]
   12788:	cmp	r3, #45	; 0x2d
   1278c:	bne	12848 <__assert_fail@plt+0x1948>
   12790:	ldrb	r3, [r0, #4]
   12794:	cmp	r3, #56	; 0x38
   12798:	bne	12848 <__assert_fail@plt+0x1948>
   1279c:	ldrb	r3, [r0, #5]
   127a0:	cmp	r3, #0
   127a4:	bne	12848 <__assert_fail@plt+0x1948>
   127a8:	ldrb	r2, [r4]
   127ac:	movw	r3, #27880	; 0x6ce8
   127b0:	movt	r3, #1
   127b4:	movw	r4, #27892	; 0x6cf4
   127b8:	movt	r4, #1
   127bc:	cmp	r2, #96	; 0x60
   127c0:	movne	r4, r3
   127c4:	b	1273c <__assert_fail@plt+0x183c>
   127c8:	cmp	r3, #71	; 0x47
   127cc:	bne	12848 <__assert_fail@plt+0x1948>
   127d0:	ldrb	r3, [r0, #1]
   127d4:	bic	r3, r3, #32
   127d8:	cmp	r3, #66	; 0x42
   127dc:	bne	12848 <__assert_fail@plt+0x1948>
   127e0:	ldrb	r3, [r0, #2]
   127e4:	cmp	r3, #49	; 0x31
   127e8:	bne	12848 <__assert_fail@plt+0x1948>
   127ec:	ldrb	r3, [r0, #3]
   127f0:	cmp	r3, #56	; 0x38
   127f4:	bne	12848 <__assert_fail@plt+0x1948>
   127f8:	ldrb	r3, [r0, #4]
   127fc:	cmp	r3, #48	; 0x30
   12800:	bne	12848 <__assert_fail@plt+0x1948>
   12804:	ldrb	r3, [r0, #5]
   12808:	cmp	r3, #51	; 0x33
   1280c:	bne	12848 <__assert_fail@plt+0x1948>
   12810:	ldrb	r3, [r0, #6]
   12814:	cmp	r3, #48	; 0x30
   12818:	bne	12848 <__assert_fail@plt+0x1948>
   1281c:	ldrb	r3, [r0, #7]
   12820:	cmp	r3, #0
   12824:	bne	12848 <__assert_fail@plt+0x1948>
   12828:	ldrb	r2, [r4]
   1282c:	movw	r3, #27884	; 0x6cec
   12830:	movt	r3, #1
   12834:	movw	r4, #27888	; 0x6cf0
   12838:	movt	r4, #1
   1283c:	cmp	r2, #96	; 0x60
   12840:	movne	r4, r3
   12844:	b	1273c <__assert_fail@plt+0x183c>
   12848:	movw	r3, #27896	; 0x6cf8
   1284c:	movt	r3, #1
   12850:	cmp	r6, #9
   12854:	movw	r4, #27876	; 0x6ce4
   12858:	movt	r4, #1
   1285c:	movne	r4, r3
   12860:	b	1273c <__assert_fail@plt+0x183c>
   12864:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12868:	strd	r6, [sp, #8]
   1286c:	strd	r8, [sp, #16]
   12870:	strd	sl, [sp, #24]
   12874:	mov	fp, r0
   12878:	mov	sl, r1
   1287c:	str	lr, [sp, #32]
   12880:	sub	sp, sp, #116	; 0x74
   12884:	ldr	r8, [sp, #152]	; 0x98
   12888:	str	r3, [sp, #28]
   1288c:	ldr	r3, [sp, #156]	; 0x9c
   12890:	str	r2, [sp, #32]
   12894:	and	r4, r3, #2
   12898:	ubfx	r3, r3, #1, #1
   1289c:	str	r3, [sp, #44]	; 0x2c
   128a0:	bl	10d80 <__ctype_get_mb_cur_max@plt>
   128a4:	str	r0, [sp, #64]	; 0x40
   128a8:	cmp	r8, #10
   128ac:	ldrls	pc, [pc, r8, lsl #2]
   128b0:	b	14020 <__assert_fail@plt+0x3120>
   128b4:			; <UNDEFINED> instruction: 0x00012cb8
   128b8:	andeq	r2, r1, r4, asr sp
   128bc:	andeq	r3, r1, r0, lsr r3
   128c0:	andeq	r2, r1, r4, ror sp
   128c4:	andeq	r2, r1, ip, lsl ip
   128c8:	andeq	r2, r1, r8, ror #24
   128cc:	andeq	r2, r1, r8, ror #25
   128d0:	andeq	r2, r1, r4, lsr #26
   128d4:	andeq	r2, r1, r0, ror #17
   128d8:	andeq	r2, r1, r0, ror #17
   128dc:	andeq	r2, r1, r0, ror #17
   128e0:	cmp	r8, #10
   128e4:	beq	12910 <__assert_fail@plt+0x1a10>
   128e8:	mov	r1, r8
   128ec:	movw	r0, #27900	; 0x6cfc
   128f0:	movt	r0, #1
   128f4:	bl	1270c <__assert_fail@plt+0x180c>
   128f8:	mov	r1, r8
   128fc:	str	r0, [sp, #164]	; 0xa4
   12900:	movw	r0, #27896	; 0x6cf8
   12904:	movt	r0, #1
   12908:	bl	1270c <__assert_fail@plt+0x180c>
   1290c:	str	r0, [sp, #168]	; 0xa8
   12910:	cmp	r4, #0
   12914:	movne	r4, #0
   12918:	beq	13cfc <__assert_fail@plt+0x2dfc>
   1291c:	mov	r3, #1
   12920:	mov	r5, #0
   12924:	ldr	r0, [sp, #168]	; 0xa8
   12928:	str	r3, [sp, #36]	; 0x24
   1292c:	str	r3, [sp, #40]	; 0x28
   12930:	str	r5, [sp, #68]	; 0x44
   12934:	bl	10e04 <strlen@plt>
   12938:	ldr	r3, [sp, #168]	; 0xa8
   1293c:	str	r5, [sp, #48]	; 0x30
   12940:	str	r0, [sp, #56]	; 0x38
   12944:	str	r3, [sp, #60]	; 0x3c
   12948:	str	r5, [sp, #72]	; 0x48
   1294c:	str	r8, [sp, #152]	; 0x98
   12950:	mov	r8, fp
   12954:	mov	r9, #0
   12958:	ldr	fp, [sp, #152]	; 0x98
   1295c:	ldr	r3, [sp, #28]
   12960:	cmn	r3, #1
   12964:	beq	12ec4 <__assert_fail@plt+0x1fc4>
   12968:	ldr	r3, [sp, #28]
   1296c:	subs	r6, r3, r9
   12970:	movne	r6, #1
   12974:	cmp	r6, #0
   12978:	beq	12edc <__assert_fail@plt+0x1fdc>
   1297c:	ldr	r0, [sp, #32]
   12980:	ldr	r7, [sp, #40]	; 0x28
   12984:	add	r3, r0, r9
   12988:	cmp	fp, #2
   1298c:	moveq	r7, #0
   12990:	andne	r7, r7, #1
   12994:	str	r3, [sp, #52]	; 0x34
   12998:	cmp	r7, #0
   1299c:	beq	13378 <__assert_fail@plt+0x2478>
   129a0:	ldr	r2, [sp, #56]	; 0x38
   129a4:	cmp	r2, #0
   129a8:	beq	13614 <__assert_fail@plt+0x2714>
   129ac:	ldr	r1, [sp, #28]
   129b0:	cmp	r2, #1
   129b4:	mov	r3, r2
   129b8:	movls	r3, #0
   129bc:	movhi	r3, #1
   129c0:	add	r5, r9, r2
   129c4:	cmn	r1, #1
   129c8:	movne	r3, #0
   129cc:	cmp	r3, #0
   129d0:	beq	129dc <__assert_fail@plt+0x1adc>
   129d4:	bl	10e04 <strlen@plt>
   129d8:	str	r0, [sp, #28]
   129dc:	ldr	r3, [sp, #28]
   129e0:	cmp	r5, r3
   129e4:	bhi	13614 <__assert_fail@plt+0x2714>
   129e8:	ldr	r0, [sp, #52]	; 0x34
   129ec:	ldr	r2, [sp, #56]	; 0x38
   129f0:	ldr	r1, [sp, #60]	; 0x3c
   129f4:	bl	10d20 <memcmp@plt>
   129f8:	cmp	r0, #0
   129fc:	bne	13614 <__assert_fail@plt+0x2714>
   12a00:	ldr	r3, [sp, #44]	; 0x2c
   12a04:	cmp	r3, #0
   12a08:	bne	13f44 <__assert_fail@plt+0x3044>
   12a0c:	ldr	r3, [sp, #52]	; 0x34
   12a10:	ldrb	r5, [r3]
   12a14:	cmp	r5, #126	; 0x7e
   12a18:	ldrls	pc, [pc, r5, lsl #2]
   12a1c:	b	132d4 <__assert_fail@plt+0x23d4>
   12a20:	ldrdeq	r3, [r1], -r8
   12a24:	ldrdeq	r3, [r1], -r4
   12a28:	ldrdeq	r3, [r1], -r4
   12a2c:	ldrdeq	r3, [r1], -r4
   12a30:	ldrdeq	r3, [r1], -r4
   12a34:	ldrdeq	r3, [r1], -r4
   12a38:	ldrdeq	r3, [r1], -r4
   12a3c:	andeq	r3, r1, ip, lsr #3
   12a40:	andeq	r3, r1, r4, lsr #3
   12a44:	andeq	r3, r1, ip, ror #1
   12a48:	muleq	r1, r8, r1
   12a4c:	andeq	r3, r1, r4, ror #1
   12a50:	andeq	r3, r1, r4, ror r1
   12a54:	andeq	r3, r1, r0, asr #3
   12a58:	ldrdeq	r3, [r1], -r4
   12a5c:	ldrdeq	r3, [r1], -r4
   12a60:	ldrdeq	r3, [r1], -r4
   12a64:	ldrdeq	r3, [r1], -r4
   12a68:	ldrdeq	r3, [r1], -r4
   12a6c:	ldrdeq	r3, [r1], -r4
   12a70:	ldrdeq	r3, [r1], -r4
   12a74:	ldrdeq	r3, [r1], -r4
   12a78:	ldrdeq	r3, [r1], -r4
   12a7c:	ldrdeq	r3, [r1], -r4
   12a80:	ldrdeq	r3, [r1], -r4
   12a84:	ldrdeq	r3, [r1], -r4
   12a88:	ldrdeq	r3, [r1], -r4
   12a8c:	ldrdeq	r3, [r1], -r4
   12a90:	ldrdeq	r3, [r1], -r4
   12a94:	ldrdeq	r3, [r1], -r4
   12a98:	ldrdeq	r3, [r1], -r4
   12a9c:	ldrdeq	r3, [r1], -r4
   12aa0:			; <UNDEFINED> instruction: 0x000132b0
   12aa4:			; <UNDEFINED> instruction: 0x000131b8
   12aa8:			; <UNDEFINED> instruction: 0x000131b8
   12aac:	muleq	r1, r4, r2
   12ab0:			; <UNDEFINED> instruction: 0x000131b8
   12ab4:	andeq	r3, r1, r8, asr #5
   12ab8:			; <UNDEFINED> instruction: 0x000131b8
   12abc:	andeq	r3, r1, r4, lsl r0
   12ac0:			; <UNDEFINED> instruction: 0x000131b8
   12ac4:			; <UNDEFINED> instruction: 0x000131b8
   12ac8:			; <UNDEFINED> instruction: 0x000131b8
   12acc:	andeq	r3, r1, r8, asr #5
   12ad0:	andeq	r3, r1, r8, asr #5
   12ad4:	andeq	r3, r1, r8, asr #5
   12ad8:	andeq	r3, r1, r8, asr #5
   12adc:	andeq	r3, r1, r8, asr #5
   12ae0:	andeq	r3, r1, r8, asr #5
   12ae4:	andeq	r3, r1, r8, asr #5
   12ae8:	andeq	r3, r1, r8, asr #5
   12aec:	andeq	r3, r1, r8, asr #5
   12af0:	andeq	r3, r1, r8, asr #5
   12af4:	andeq	r3, r1, r8, asr #5
   12af8:	andeq	r3, r1, r8, asr #5
   12afc:	andeq	r3, r1, r8, asr #5
   12b00:	andeq	r3, r1, r8, asr #5
   12b04:	andeq	r3, r1, r8, asr #5
   12b08:	andeq	r3, r1, r8, asr #5
   12b0c:			; <UNDEFINED> instruction: 0x000131b8
   12b10:			; <UNDEFINED> instruction: 0x000131b8
   12b14:			; <UNDEFINED> instruction: 0x000131b8
   12b18:			; <UNDEFINED> instruction: 0x000131b8
   12b1c:	andeq	r2, r1, r8, ror #31
   12b20:	ldrdeq	r3, [r1], -r4
   12b24:	andeq	r3, r1, r8, asr #5
   12b28:	andeq	r3, r1, r8, asr #5
   12b2c:	andeq	r3, r1, r8, asr #5
   12b30:	andeq	r3, r1, r8, asr #5
   12b34:	andeq	r3, r1, r8, asr #5
   12b38:	andeq	r3, r1, r8, asr #5
   12b3c:	andeq	r3, r1, r8, asr #5
   12b40:	andeq	r3, r1, r8, asr #5
   12b44:	andeq	r3, r1, r8, asr #5
   12b48:	andeq	r3, r1, r8, asr #5
   12b4c:	andeq	r3, r1, r8, asr #5
   12b50:	andeq	r3, r1, r8, asr #5
   12b54:	andeq	r3, r1, r8, asr #5
   12b58:	andeq	r3, r1, r8, asr #5
   12b5c:	andeq	r3, r1, r8, asr #5
   12b60:	andeq	r3, r1, r8, asr #5
   12b64:	andeq	r3, r1, r8, asr #5
   12b68:	andeq	r3, r1, r8, asr #5
   12b6c:	andeq	r3, r1, r8, asr #5
   12b70:	andeq	r3, r1, r8, asr #5
   12b74:	andeq	r3, r1, r8, asr #5
   12b78:	andeq	r3, r1, r8, asr #5
   12b7c:	andeq	r3, r1, r8, asr #5
   12b80:	andeq	r3, r1, r8, asr #5
   12b84:	andeq	r3, r1, r8, asr #5
   12b88:	andeq	r3, r1, r8, asr #5
   12b8c:			; <UNDEFINED> instruction: 0x000131b8
   12b90:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12b94:	andeq	r3, r1, r8, asr #5
   12b98:			; <UNDEFINED> instruction: 0x000131b8
   12b9c:	andeq	r3, r1, r8, asr #5
   12ba0:			; <UNDEFINED> instruction: 0x000131b8
   12ba4:	andeq	r3, r1, r8, asr #5
   12ba8:	andeq	r3, r1, r8, asr #5
   12bac:	andeq	r3, r1, r8, asr #5
   12bb0:	andeq	r3, r1, r8, asr #5
   12bb4:	andeq	r3, r1, r8, asr #5
   12bb8:	andeq	r3, r1, r8, asr #5
   12bbc:	andeq	r3, r1, r8, asr #5
   12bc0:	andeq	r3, r1, r8, asr #5
   12bc4:	andeq	r3, r1, r8, asr #5
   12bc8:	andeq	r3, r1, r8, asr #5
   12bcc:	andeq	r3, r1, r8, asr #5
   12bd0:	andeq	r3, r1, r8, asr #5
   12bd4:	andeq	r3, r1, r8, asr #5
   12bd8:	andeq	r3, r1, r8, asr #5
   12bdc:	andeq	r3, r1, r8, asr #5
   12be0:	andeq	r3, r1, r8, asr #5
   12be4:	andeq	r3, r1, r8, asr #5
   12be8:	andeq	r3, r1, r8, asr #5
   12bec:	andeq	r3, r1, r8, asr #5
   12bf0:	andeq	r3, r1, r8, asr #5
   12bf4:	andeq	r3, r1, r8, asr #5
   12bf8:	andeq	r3, r1, r8, asr #5
   12bfc:	andeq	r3, r1, r8, asr #5
   12c00:	andeq	r3, r1, r8, asr #5
   12c04:	andeq	r3, r1, r8, asr #5
   12c08:	andeq	r3, r1, r8, asr #5
   12c0c:			; <UNDEFINED> instruction: 0x00012db4
   12c10:			; <UNDEFINED> instruction: 0x000131b8
   12c14:			; <UNDEFINED> instruction: 0x00012db4
   12c18:	muleq	r1, r4, r2
   12c1c:	cmp	r4, #0
   12c20:	moveq	r3, #1
   12c24:	streq	r3, [sp, #40]	; 0x28
   12c28:	beq	1333c <__assert_fail@plt+0x243c>
   12c2c:	mov	r3, #0
   12c30:	mov	r2, #1
   12c34:	mov	r4, r3
   12c38:	str	r2, [sp, #36]	; 0x24
   12c3c:	str	r2, [sp, #44]	; 0x2c
   12c40:	str	r2, [sp, #56]	; 0x38
   12c44:	str	r3, [sp, #68]	; 0x44
   12c48:	movw	r3, #27896	; 0x6cf8
   12c4c:	movt	r3, #1
   12c50:	str	r4, [sp, #40]	; 0x28
   12c54:	mov	r8, #2
   12c58:	str	r4, [sp, #48]	; 0x30
   12c5c:	str	r3, [sp, #60]	; 0x3c
   12c60:	str	r4, [sp, #72]	; 0x48
   12c64:	b	1294c <__assert_fail@plt+0x1a4c>
   12c68:	cmp	r4, #0
   12c6c:	bne	13eb8 <__assert_fail@plt+0x2fb8>
   12c70:	cmp	sl, #0
   12c74:	beq	13c78 <__assert_fail@plt+0x2d78>
   12c78:	mov	r3, #34	; 0x22
   12c7c:	mov	r1, r4
   12c80:	mov	r2, #1
   12c84:	strb	r3, [fp]
   12c88:	movw	r3, #27876	; 0x6ce4
   12c8c:	movt	r3, #1
   12c90:	mov	r4, r2
   12c94:	str	r2, [sp, #36]	; 0x24
   12c98:	str	r2, [sp, #40]	; 0x28
   12c9c:	str	r1, [sp, #44]	; 0x2c
   12ca0:	str	r1, [sp, #48]	; 0x30
   12ca4:	str	r2, [sp, #56]	; 0x38
   12ca8:	str	r3, [sp, #60]	; 0x3c
   12cac:	str	r1, [sp, #68]	; 0x44
   12cb0:	str	r1, [sp, #72]	; 0x48
   12cb4:	b	1294c <__assert_fail@plt+0x1a4c>
   12cb8:	mov	r3, #0
   12cbc:	mov	r4, r8
   12cc0:	str	r3, [sp, #40]	; 0x28
   12cc4:	str	r3, [sp, #44]	; 0x2c
   12cc8:	str	r3, [sp, #48]	; 0x30
   12ccc:	str	r8, [sp, #56]	; 0x38
   12cd0:	str	r3, [sp, #60]	; 0x3c
   12cd4:	str	r3, [sp, #68]	; 0x44
   12cd8:	mov	r3, #1
   12cdc:	str	r3, [sp, #36]	; 0x24
   12ce0:	str	r8, [sp, #72]	; 0x48
   12ce4:	b	1294c <__assert_fail@plt+0x1a4c>
   12ce8:	mov	r3, #1
   12cec:	mov	r2, #0
   12cf0:	mov	r4, r2
   12cf4:	mov	r8, #5
   12cf8:	str	r3, [sp, #36]	; 0x24
   12cfc:	str	r3, [sp, #40]	; 0x28
   12d00:	str	r3, [sp, #44]	; 0x2c
   12d04:	str	r2, [sp, #48]	; 0x30
   12d08:	str	r3, [sp, #56]	; 0x38
   12d0c:	movw	r3, #27876	; 0x6ce4
   12d10:	movt	r3, #1
   12d14:	str	r3, [sp, #60]	; 0x3c
   12d18:	str	r2, [sp, #68]	; 0x44
   12d1c:	str	r2, [sp, #72]	; 0x48
   12d20:	b	1294c <__assert_fail@plt+0x1a4c>
   12d24:	mov	r3, #0
   12d28:	mov	r2, #1
   12d2c:	mov	r4, r3
   12d30:	str	r2, [sp, #36]	; 0x24
   12d34:	str	r2, [sp, #40]	; 0x28
   12d38:	str	r3, [sp, #44]	; 0x2c
   12d3c:	str	r3, [sp, #48]	; 0x30
   12d40:	str	r3, [sp, #56]	; 0x38
   12d44:	str	r3, [sp, #60]	; 0x3c
   12d48:	str	r3, [sp, #68]	; 0x44
   12d4c:	str	r3, [sp, #72]	; 0x48
   12d50:	b	1294c <__assert_fail@plt+0x1a4c>
   12d54:	mov	r2, #1
   12d58:	mov	r3, #0
   12d5c:	mov	r4, r3
   12d60:	str	r2, [sp, #36]	; 0x24
   12d64:	str	r2, [sp, #44]	; 0x2c
   12d68:	str	r8, [sp, #56]	; 0x38
   12d6c:	str	r3, [sp, #68]	; 0x44
   12d70:	b	12c48 <__assert_fail@plt+0x1d48>
   12d74:	mov	r3, #1
   12d78:	mov	r2, #0
   12d7c:	mov	r4, r2
   12d80:	mov	r8, #2
   12d84:	str	r3, [sp, #36]	; 0x24
   12d88:	str	r3, [sp, #40]	; 0x28
   12d8c:	str	r3, [sp, #44]	; 0x2c
   12d90:	str	r2, [sp, #48]	; 0x30
   12d94:	str	r3, [sp, #56]	; 0x38
   12d98:	movw	r3, #27896	; 0x6cf8
   12d9c:	movt	r3, #1
   12da0:	str	r3, [sp, #60]	; 0x3c
   12da4:	str	r2, [sp, #68]	; 0x44
   12da8:	str	r2, [sp, #72]	; 0x48
   12dac:	b	1294c <__assert_fail@plt+0x1a4c>
   12db0:	mov	r7, #0
   12db4:	ldr	r3, [sp, #28]
   12db8:	cmn	r3, #1
   12dbc:	beq	13894 <__assert_fail@plt+0x2994>
   12dc0:	ldr	r3, [sp, #28]
   12dc4:	subs	r2, r3, #1
   12dc8:	movne	r2, #1
   12dcc:	sub	r3, fp, #2
   12dd0:	cmp	r2, #0
   12dd4:	clz	r3, r3
   12dd8:	lsr	r3, r3, #5
   12ddc:	bne	12de8 <__assert_fail@plt+0x1ee8>
   12de0:	cmp	r9, #0
   12de4:	beq	135f4 <__assert_fail@plt+0x26f4>
   12de8:	mov	r6, #0
   12dec:	ldr	r2, [sp, #40]	; 0x28
   12df0:	eor	r2, r2, #1
   12df4:	orrs	r3, r3, r2
   12df8:	bne	12fd0 <__assert_fail@plt+0x20d0>
   12dfc:	ldr	r2, [sp, #160]	; 0xa0
   12e00:	cmp	r2, #0
   12e04:	beq	12e24 <__assert_fail@plt+0x1f24>
   12e08:	ldr	r0, [sp, #160]	; 0xa0
   12e0c:	ubfx	r1, r5, #5, #8
   12e10:	and	r2, r5, #31
   12e14:	ldr	r1, [r0, r1, lsl #2]
   12e18:	lsr	r2, r1, r2
   12e1c:	tst	r2, #1
   12e20:	bne	12e2c <__assert_fail@plt+0x1f2c>
   12e24:	cmp	r7, #0
   12e28:	beq	1309c <__assert_fail@plt+0x219c>
   12e2c:	ldr	r2, [sp, #44]	; 0x2c
   12e30:	sub	r3, fp, #2
   12e34:	clz	r3, r3
   12e38:	lsr	r3, r3, #5
   12e3c:	cmp	r2, #0
   12e40:	bne	13be8 <__assert_fail@plt+0x2ce8>
   12e44:	ldr	r2, [sp, #48]	; 0x30
   12e48:	eor	r2, r2, #1
   12e4c:	ands	r3, r3, r2
   12e50:	beq	12e88 <__assert_fail@plt+0x1f88>
   12e54:	cmp	sl, r4
   12e58:	str	r3, [sp, #48]	; 0x30
   12e5c:	movhi	r2, #39	; 0x27
   12e60:	strbhi	r2, [r8, r4]
   12e64:	add	r2, r4, #1
   12e68:	cmp	sl, r2
   12e6c:	movhi	r1, #36	; 0x24
   12e70:	strbhi	r1, [r8, r2]
   12e74:	add	r2, r4, #2
   12e78:	add	r4, r4, #3
   12e7c:	cmp	sl, r2
   12e80:	movhi	r1, #39	; 0x27
   12e84:	strbhi	r1, [r8, r2]
   12e88:	cmp	r4, sl
   12e8c:	add	r9, r9, #1
   12e90:	movcc	r3, #92	; 0x5c
   12e94:	strbcc	r3, [r8, r4]
   12e98:	add	r4, r4, #1
   12e9c:	cmp	r4, sl
   12ea0:	ldr	r3, [sp, #36]	; 0x24
   12ea4:	strbcc	r5, [r8, r4]
   12ea8:	cmp	r6, #0
   12eac:	add	r4, r4, #1
   12eb0:	moveq	r3, #0
   12eb4:	str	r3, [sp, #36]	; 0x24
   12eb8:	ldr	r3, [sp, #28]
   12ebc:	cmn	r3, #1
   12ec0:	bne	12968 <__assert_fail@plt+0x1a68>
   12ec4:	ldr	r3, [sp, #32]
   12ec8:	ldrb	r6, [r3, r9]
   12ecc:	adds	r6, r6, #0
   12ed0:	movne	r6, #1
   12ed4:	cmp	r6, #0
   12ed8:	bne	1297c <__assert_fail@plt+0x1a7c>
   12edc:	str	fp, [sp, #152]	; 0x98
   12ee0:	mov	fp, r8
   12ee4:	cmp	r4, #0
   12ee8:	ldr	r1, [sp, #44]	; 0x2c
   12eec:	movne	r3, #0
   12ef0:	ldr	r8, [sp, #152]	; 0x98
   12ef4:	sub	r2, r8, #2
   12ef8:	clz	r2, r2
   12efc:	lsr	r2, r2, #5
   12f00:	andeq	r3, r2, r1
   12f04:	cmp	r3, #0
   12f08:	bne	13fc4 <__assert_fail@plt+0x30c4>
   12f0c:	eor	r3, r1, #1
   12f10:	ands	r2, r2, r3
   12f14:	beq	13ef0 <__assert_fail@plt+0x2ff0>
   12f18:	ldr	r3, [sp, #68]	; 0x44
   12f1c:	cmp	r3, #0
   12f20:	beq	13ef4 <__assert_fail@plt+0x2ff4>
   12f24:	ldr	r3, [sp, #36]	; 0x24
   12f28:	cmp	r3, #0
   12f2c:	bne	13f80 <__assert_fail@plt+0x3080>
   12f30:	ldr	r3, [sp, #72]	; 0x48
   12f34:	adds	r3, r3, #0
   12f38:	movne	r3, #1
   12f3c:	cmp	sl, #0
   12f40:	movne	r3, #0
   12f44:	cmp	r3, #0
   12f48:	ldreq	r2, [sp, #68]	; 0x44
   12f4c:	beq	13ef4 <__assert_fail@plt+0x2ff4>
   12f50:	ldr	r2, [sp, #72]	; 0x48
   12f54:	str	r3, [sp, #68]	; 0x44
   12f58:	movw	r3, #27896	; 0x6cf8
   12f5c:	movt	r3, #1
   12f60:	mov	r1, #39	; 0x27
   12f64:	mov	r4, #1
   12f68:	ldr	sl, [sp, #72]	; 0x48
   12f6c:	mov	r8, #2
   12f70:	str	r3, [sp, #60]	; 0x3c
   12f74:	mov	r3, #0
   12f78:	strb	r1, [fp]
   12f7c:	str	r3, [sp, #44]	; 0x2c
   12f80:	str	r4, [sp, #56]	; 0x38
   12f84:	str	r2, [sp, #72]	; 0x48
   12f88:	b	1294c <__assert_fail@plt+0x1a4c>
   12f8c:	mov	r7, #0
   12f90:	cmp	fp, #2
   12f94:	beq	13874 <__assert_fail@plt+0x2974>
   12f98:	ldr	r2, [sp, #40]	; 0x28
   12f9c:	ldr	r3, [sp, #56]	; 0x38
   12fa0:	ldr	r1, [sp, #44]	; 0x2c
   12fa4:	cmp	r3, #0
   12fa8:	moveq	r3, #0
   12fac:	andne	r3, r2, r1
   12fb0:	cmp	r3, #0
   12fb4:	moveq	r5, #92	; 0x5c
   12fb8:	moveq	r3, r5
   12fbc:	bne	13880 <__assert_fail@plt+0x2980>
   12fc0:	ldr	r2, [sp, #40]	; 0x28
   12fc4:	cmp	r2, #0
   12fc8:	bne	13cbc <__assert_fail@plt+0x2dbc>
   12fcc:	mov	r6, #0
   12fd0:	ldr	r3, [sp, #44]	; 0x2c
   12fd4:	cmp	r3, #0
   12fd8:	beq	1386c <__assert_fail@plt+0x296c>
   12fdc:	mov	r3, #0
   12fe0:	b	12dfc <__assert_fail@plt+0x1efc>
   12fe4:	mov	r7, #0
   12fe8:	cmp	fp, #2
   12fec:	beq	138e4 <__assert_fail@plt+0x29e4>
   12ff0:	cmp	fp, #5
   12ff4:	beq	138a8 <__assert_fail@plt+0x29a8>
   12ff8:	sub	r3, fp, #2
   12ffc:	mov	r6, #0
   13000:	clz	r3, r3
   13004:	mov	r5, #63	; 0x3f
   13008:	lsr	r3, r3, #5
   1300c:	b	12dec <__assert_fail@plt+0x1eec>
   13010:	mov	r7, #0
   13014:	cmp	fp, #2
   13018:	movne	r3, #0
   1301c:	movne	r5, #39	; 0x27
   13020:	strne	r6, [sp, #68]	; 0x44
   13024:	bne	12dec <__assert_fail@plt+0x1eec>
   13028:	ldr	r3, [sp, #44]	; 0x2c
   1302c:	cmp	r3, #0
   13030:	bne	13cec <__assert_fail@plt+0x2dec>
   13034:	ldr	r3, [sp, #72]	; 0x48
   13038:	cmp	sl, #0
   1303c:	clz	r3, r3
   13040:	lsr	r3, r3, #5
   13044:	moveq	r3, #0
   13048:	cmp	r3, #0
   1304c:	bne	13c18 <__assert_fail@plt+0x2d18>
   13050:	cmp	sl, r4
   13054:	movhi	r3, #39	; 0x27
   13058:	strbhi	r3, [r8, r4]
   1305c:	add	r3, r4, #1
   13060:	cmp	sl, r3
   13064:	movhi	r2, #92	; 0x5c
   13068:	strbhi	r2, [r8, r3]
   1306c:	add	r3, r4, #2
   13070:	cmp	sl, r3
   13074:	bls	13080 <__assert_fail@plt+0x2180>
   13078:	mov	r2, #39	; 0x27
   1307c:	strb	r2, [r8, r3]
   13080:	mov	r3, #0
   13084:	cmp	r7, #0
   13088:	add	r4, r4, #3
   1308c:	mov	r5, #39	; 0x27
   13090:	str	r3, [sp, #48]	; 0x30
   13094:	str	r6, [sp, #68]	; 0x44
   13098:	bne	12e2c <__assert_fail@plt+0x1f2c>
   1309c:	ldr	r2, [sp, #48]	; 0x30
   130a0:	eor	r3, r3, #1
   130a4:	add	r9, r9, #1
   130a8:	and	r3, r3, r2
   130ac:	uxtb	r3, r3
   130b0:	cmp	r3, #0
   130b4:	beq	12e9c <__assert_fail@plt+0x1f9c>
   130b8:	cmp	sl, r4
   130bc:	movhi	r3, #39	; 0x27
   130c0:	strbhi	r3, [r8, r4]
   130c4:	add	r3, r4, #1
   130c8:	add	r4, r4, #2
   130cc:	cmp	sl, r3
   130d0:	movhi	r2, #39	; 0x27
   130d4:	strbhi	r2, [r8, r3]
   130d8:	mov	r3, #0
   130dc:	str	r3, [sp, #48]	; 0x30
   130e0:	b	12e9c <__assert_fail@plt+0x1f9c>
   130e4:	mov	r3, #118	; 0x76
   130e8:	b	12fc0 <__assert_fail@plt+0x20c0>
   130ec:	mov	r3, #116	; 0x74
   130f0:	ldr	r2, [sp, #44]	; 0x2c
   130f4:	cmp	fp, #2
   130f8:	movne	r2, #0
   130fc:	andeq	r2, r2, #1
   13100:	cmp	r2, #0
   13104:	beq	12fc0 <__assert_fail@plt+0x20c0>
   13108:	mov	fp, r8
   1310c:	mov	r8, #2
   13110:	ldr	r3, [sp, #40]	; 0x28
   13114:	cmp	r3, #0
   13118:	movne	r8, #4
   1311c:	mov	lr, #0
   13120:	mov	r0, fp
   13124:	ldr	r2, [sp, #32]
   13128:	ldr	r3, [sp, #156]	; 0x9c
   1312c:	ldr	r1, [sp, #164]	; 0xa4
   13130:	bic	ip, r3, #2
   13134:	ldr	r3, [sp, #28]
   13138:	stm	sp, {r8, ip, lr}
   1313c:	ldr	ip, [sp, #168]	; 0xa8
   13140:	str	r1, [sp, #12]
   13144:	mov	r1, sl
   13148:	str	ip, [sp, #16]
   1314c:	bl	12864 <__assert_fail@plt+0x1964>
   13150:	mov	r4, r0
   13154:	mov	r0, r4
   13158:	add	sp, sp, #116	; 0x74
   1315c:	ldrd	r4, [sp]
   13160:	ldrd	r6, [sp, #8]
   13164:	ldrd	r8, [sp, #16]
   13168:	ldrd	sl, [sp, #24]
   1316c:	add	sp, sp, #32
   13170:	pop	{pc}		; (ldr pc, [sp], #4)
   13174:	mov	r5, #102	; 0x66
   13178:	ldr	r2, [sp, #44]	; 0x2c
   1317c:	sub	r3, fp, #2
   13180:	clz	r3, r3
   13184:	lsr	r3, r3, #5
   13188:	cmp	r2, #0
   1318c:	bne	13be8 <__assert_fail@plt+0x2ce8>
   13190:	mov	r6, r2
   13194:	b	12e88 <__assert_fail@plt+0x1f88>
   13198:	mov	r5, #110	; 0x6e
   1319c:	mov	r6, #0
   131a0:	b	12e2c <__assert_fail@plt+0x1f2c>
   131a4:	mov	r5, #98	; 0x62
   131a8:	b	13178 <__assert_fail@plt+0x2278>
   131ac:	mov	r5, #97	; 0x61
   131b0:	b	13178 <__assert_fail@plt+0x2278>
   131b4:	mov	r7, #0
   131b8:	mov	r6, #0
   131bc:	b	12fdc <__assert_fail@plt+0x20dc>
   131c0:	mov	r5, #114	; 0x72
   131c4:	b	1319c <__assert_fail@plt+0x229c>
   131c8:	ldr	r3, [sp, #44]	; 0x2c
   131cc:	cmp	r3, #0
   131d0:	bne	13f60 <__assert_fail@plt+0x3060>
   131d4:	mov	r7, r3
   131d8:	ldr	r3, [sp, #48]	; 0x30
   131dc:	sub	r2, fp, #2
   131e0:	clz	r2, r2
   131e4:	lsr	r2, r2, #5
   131e8:	eor	r3, r3, #1
   131ec:	ands	r3, r2, r3
   131f0:	beq	13c04 <__assert_fail@plt+0x2d04>
   131f4:	cmp	sl, r4
   131f8:	movhi	r1, #39	; 0x27
   131fc:	strbhi	r1, [r8, r4]
   13200:	add	r1, r4, #1
   13204:	cmp	sl, r1
   13208:	movhi	r0, #36	; 0x24
   1320c:	strbhi	r0, [r8, r1]
   13210:	add	r1, r4, #2
   13214:	cmp	sl, r1
   13218:	movhi	r0, #39	; 0x27
   1321c:	strbhi	r0, [r8, r1]
   13220:	add	r1, r4, #3
   13224:	cmp	sl, r1
   13228:	bls	13c5c <__assert_fail@plt+0x2d5c>
   1322c:	mov	r4, r1
   13230:	mov	r1, #92	; 0x5c
   13234:	mov	r0, r4
   13238:	str	r3, [sp, #48]	; 0x30
   1323c:	strb	r1, [r8, r4]
   13240:	cmp	fp, #2
   13244:	add	r4, r4, #1
   13248:	beq	13cac <__assert_fail@plt+0x2dac>
   1324c:	ldr	r1, [sp, #28]
   13250:	add	r3, r9, #1
   13254:	cmp	r3, r1
   13258:	bcs	13270 <__assert_fail@plt+0x2370>
   1325c:	ldr	r1, [sp, #32]
   13260:	ldrb	r3, [r1, r3]
   13264:	sub	r3, r3, #48	; 0x30
   13268:	cmp	r3, #9
   1326c:	bls	13cc4 <__assert_fail@plt+0x2dc4>
   13270:	mov	r5, #48	; 0x30
   13274:	ldr	r3, [sp, #40]	; 0x28
   13278:	eor	r3, r3, #1
   1327c:	orrs	r2, r2, r3
   13280:	mov	r3, r6
   13284:	moveq	r6, r2
   13288:	beq	12dfc <__assert_fail@plt+0x1efc>
   1328c:	mov	r6, #0
   13290:	b	12e24 <__assert_fail@plt+0x1f24>
   13294:	cmp	r9, #0
   13298:	mov	r2, r7
   1329c:	bne	1383c <__assert_fail@plt+0x293c>
   132a0:	mov	r6, r7
   132a4:	mov	r3, r9
   132a8:	mov	r7, r2
   132ac:	b	12dec <__assert_fail@plt+0x1eec>
   132b0:	mov	r2, r7
   132b4:	mov	r6, r7
   132b8:	mov	r3, #0
   132bc:	mov	r7, r2
   132c0:	mov	r5, #32
   132c4:	b	12dec <__assert_fail@plt+0x1eec>
   132c8:	mov	r6, r7
   132cc:	b	12fdc <__assert_fail@plt+0x20dc>
   132d0:	mov	r7, #0
   132d4:	ldr	r3, [sp, #64]	; 0x40
   132d8:	cmp	r3, #1
   132dc:	bne	138fc <__assert_fail@plt+0x29fc>
   132e0:	bl	10dec <__ctype_b_loc@plt>
   132e4:	ldr	r2, [r0]
   132e8:	sxth	r3, r5
   132ec:	lsl	r3, r3, #1
   132f0:	ldr	r1, [sp, #64]	; 0x40
   132f4:	ldrh	r3, [r2, r3]
   132f8:	mov	ip, r1
   132fc:	and	r3, r3, #16384	; 0x4000
   13300:	cmp	r3, #0
   13304:	ldr	r3, [sp, #40]	; 0x28
   13308:	movne	r6, #1
   1330c:	moveq	r6, #0
   13310:	movne	r2, #0
   13314:	andeq	r2, r3, #1
   13318:	cmp	r2, #0
   1331c:	bne	13c44 <__assert_fail@plt+0x2d44>
   13320:	sub	r3, fp, #2
   13324:	clz	r3, r3
   13328:	lsr	r3, r3, #5
   1332c:	b	12dec <__assert_fail@plt+0x1eec>
   13330:	cmp	r4, #0
   13334:	bne	13fd4 <__assert_fail@plt+0x30d4>
   13338:	str	r4, [sp, #40]	; 0x28
   1333c:	cmp	sl, #0
   13340:	bne	14004 <__assert_fail@plt+0x3104>
   13344:	mov	r3, #1
   13348:	movw	r2, #27896	; 0x6cf8
   1334c:	movt	r2, #1
   13350:	mov	r4, r3
   13354:	mov	r8, #2
   13358:	str	r3, [sp, #36]	; 0x24
   1335c:	str	sl, [sp, #44]	; 0x2c
   13360:	str	sl, [sp, #48]	; 0x30
   13364:	str	r3, [sp, #56]	; 0x38
   13368:	str	r2, [sp, #60]	; 0x3c
   1336c:	str	sl, [sp, #68]	; 0x44
   13370:	str	sl, [sp, #72]	; 0x48
   13374:	b	1294c <__assert_fail@plt+0x1a4c>
   13378:	ldr	r3, [sp, #32]
   1337c:	ldrb	r5, [r3, r9]
   13380:	cmp	r5, #126	; 0x7e
   13384:	ldrls	pc, [pc, r5, lsl #2]
   13388:	b	132d4 <__assert_fail@plt+0x23d4>
   1338c:			; <UNDEFINED> instruction: 0x000135b0
   13390:	ldrdeq	r3, [r1], -r4
   13394:	ldrdeq	r3, [r1], -r4
   13398:	ldrdeq	r3, [r1], -r4
   1339c:	ldrdeq	r3, [r1], -r4
   133a0:	ldrdeq	r3, [r1], -r4
   133a4:	ldrdeq	r3, [r1], -r4
   133a8:	andeq	r3, r1, r8, lsr #11
   133ac:	andeq	r3, r1, r0, lsr #11
   133b0:	andeq	r3, r1, ip, ror #1
   133b4:	muleq	r1, r8, r5
   133b8:	andeq	r3, r1, r4, ror #1
   133bc:	muleq	r1, r0, r5
   133c0:	andeq	r3, r1, r8, lsl #11
   133c4:	ldrdeq	r3, [r1], -r4
   133c8:	ldrdeq	r3, [r1], -r4
   133cc:	ldrdeq	r3, [r1], -r4
   133d0:	ldrdeq	r3, [r1], -r4
   133d4:	ldrdeq	r3, [r1], -r4
   133d8:	ldrdeq	r3, [r1], -r4
   133dc:	ldrdeq	r3, [r1], -r4
   133e0:	ldrdeq	r3, [r1], -r4
   133e4:	ldrdeq	r3, [r1], -r4
   133e8:	ldrdeq	r3, [r1], -r4
   133ec:	ldrdeq	r3, [r1], -r4
   133f0:	ldrdeq	r3, [r1], -r4
   133f4:	ldrdeq	r3, [r1], -r4
   133f8:	ldrdeq	r3, [r1], -r4
   133fc:	ldrdeq	r3, [r1], -r4
   13400:	ldrdeq	r3, [r1], -r4
   13404:	ldrdeq	r3, [r1], -r4
   13408:	ldrdeq	r3, [r1], -r4
   1340c:	andeq	r3, r1, r4, lsl #12
   13410:	andeq	r3, r1, r4, ror #11
   13414:	andeq	r3, r1, r4, ror #11
   13418:	ldrdeq	r3, [r1], -r4
   1341c:	andeq	r3, r1, r4, ror #11
   13420:	andeq	r3, r1, r0, lsr #6
   13424:	andeq	r3, r1, r4, ror #11
   13428:	andeq	r3, r1, r4, lsl r0
   1342c:	andeq	r3, r1, r4, ror #11
   13430:	andeq	r3, r1, r4, ror #11
   13434:	andeq	r3, r1, r4, ror #11
   13438:	andeq	r3, r1, r0, lsr #6
   1343c:	andeq	r3, r1, r0, lsr #6
   13440:	andeq	r3, r1, r0, lsr #6
   13444:	andeq	r3, r1, r0, lsr #6
   13448:	andeq	r3, r1, r0, lsr #6
   1344c:	andeq	r3, r1, r0, lsr #6
   13450:	andeq	r3, r1, r0, lsr #6
   13454:	andeq	r3, r1, r0, lsr #6
   13458:	andeq	r3, r1, r0, lsr #6
   1345c:	andeq	r3, r1, r0, lsr #6
   13460:	andeq	r3, r1, r0, lsr #6
   13464:	andeq	r3, r1, r0, lsr #6
   13468:	andeq	r3, r1, r0, lsr #6
   1346c:	andeq	r3, r1, r0, lsr #6
   13470:	andeq	r3, r1, r0, lsr #6
   13474:	andeq	r3, r1, r0, lsr #6
   13478:	andeq	r3, r1, r4, ror #11
   1347c:	andeq	r3, r1, r4, ror #11
   13480:	andeq	r3, r1, r4, ror #11
   13484:	andeq	r3, r1, r4, ror #11
   13488:	andeq	r2, r1, r8, ror #31
   1348c:	ldrdeq	r3, [r1], -r4
   13490:	andeq	r3, r1, r0, lsr #6
   13494:	andeq	r3, r1, r0, lsr #6
   13498:	andeq	r3, r1, r0, lsr #6
   1349c:	andeq	r3, r1, r0, lsr #6
   134a0:	andeq	r3, r1, r0, lsr #6
   134a4:	andeq	r3, r1, r0, lsr #6
   134a8:	andeq	r3, r1, r0, lsr #6
   134ac:	andeq	r3, r1, r0, lsr #6
   134b0:	andeq	r3, r1, r0, lsr #6
   134b4:	andeq	r3, r1, r0, lsr #6
   134b8:	andeq	r3, r1, r0, lsr #6
   134bc:	andeq	r3, r1, r0, lsr #6
   134c0:	andeq	r3, r1, r0, lsr #6
   134c4:	andeq	r3, r1, r0, lsr #6
   134c8:	andeq	r3, r1, r0, lsr #6
   134cc:	andeq	r3, r1, r0, lsr #6
   134d0:	andeq	r3, r1, r0, lsr #6
   134d4:	andeq	r3, r1, r0, lsr #6
   134d8:	andeq	r3, r1, r0, lsr #6
   134dc:	andeq	r3, r1, r0, lsr #6
   134e0:	andeq	r3, r1, r0, lsr #6
   134e4:	andeq	r3, r1, r0, lsr #6
   134e8:	andeq	r3, r1, r0, lsr #6
   134ec:	andeq	r3, r1, r0, lsr #6
   134f0:	andeq	r3, r1, r0, lsr #6
   134f4:	andeq	r3, r1, r0, lsr #6
   134f8:	andeq	r3, r1, r4, ror #11
   134fc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13500:	andeq	r3, r1, r0, lsr #6
   13504:	andeq	r3, r1, r4, ror #11
   13508:	andeq	r3, r1, r0, lsr #6
   1350c:	andeq	r3, r1, r4, ror #11
   13510:	andeq	r3, r1, r0, lsr #6
   13514:	andeq	r3, r1, r0, lsr #6
   13518:	andeq	r3, r1, r0, lsr #6
   1351c:	andeq	r3, r1, r0, lsr #6
   13520:	andeq	r3, r1, r0, lsr #6
   13524:	andeq	r3, r1, r0, lsr #6
   13528:	andeq	r3, r1, r0, lsr #6
   1352c:	andeq	r3, r1, r0, lsr #6
   13530:	andeq	r3, r1, r0, lsr #6
   13534:	andeq	r3, r1, r0, lsr #6
   13538:	andeq	r3, r1, r0, lsr #6
   1353c:	andeq	r3, r1, r0, lsr #6
   13540:	andeq	r3, r1, r0, lsr #6
   13544:	andeq	r3, r1, r0, lsr #6
   13548:	andeq	r3, r1, r0, lsr #6
   1354c:	andeq	r3, r1, r0, lsr #6
   13550:	andeq	r3, r1, r0, lsr #6
   13554:	andeq	r3, r1, r0, lsr #6
   13558:	andeq	r3, r1, r0, lsr #6
   1355c:	andeq	r3, r1, r0, lsr #6
   13560:	andeq	r3, r1, r0, lsr #6
   13564:	andeq	r3, r1, r0, lsr #6
   13568:	andeq	r3, r1, r0, lsr #6
   1356c:	andeq	r3, r1, r0, lsr #6
   13570:	andeq	r3, r1, r0, lsr #6
   13574:	andeq	r3, r1, r0, lsr #6
   13578:			; <UNDEFINED> instruction: 0x00012db4
   1357c:	andeq	r3, r1, r4, ror #11
   13580:			; <UNDEFINED> instruction: 0x00012db4
   13584:	ldrdeq	r3, [r1], -r4
   13588:	mov	r3, #114	; 0x72
   1358c:	b	130f0 <__assert_fail@plt+0x21f0>
   13590:	mov	r3, #102	; 0x66
   13594:	b	12fc0 <__assert_fail@plt+0x20c0>
   13598:	mov	r3, #110	; 0x6e
   1359c:	b	130f0 <__assert_fail@plt+0x21f0>
   135a0:	mov	r3, #98	; 0x62
   135a4:	b	12fc0 <__assert_fail@plt+0x20c0>
   135a8:	mov	r3, #97	; 0x61
   135ac:	b	12fc0 <__assert_fail@plt+0x20c0>
   135b0:	ldr	r3, [sp, #40]	; 0x28
   135b4:	cmp	r3, #0
   135b8:	bne	131c8 <__assert_fail@plt+0x22c8>
   135bc:	ldr	r3, [sp, #156]	; 0x9c
   135c0:	tst	r3, #1
   135c4:	addne	r9, r9, #1
   135c8:	bne	1295c <__assert_fail@plt+0x1a5c>
   135cc:	ldr	r7, [sp, #40]	; 0x28
   135d0:	b	12fcc <__assert_fail@plt+0x20cc>
   135d4:	sub	r3, fp, #2
   135d8:	clz	r3, r3
   135dc:	lsr	r3, r3, #5
   135e0:	b	12de0 <__assert_fail@plt+0x1ee0>
   135e4:	sub	r3, fp, #2
   135e8:	mov	r6, #0
   135ec:	clz	r3, r3
   135f0:	lsr	r3, r3, #5
   135f4:	ldr	r2, [sp, #44]	; 0x2c
   135f8:	tst	r2, r3
   135fc:	beq	12dec <__assert_fail@plt+0x1eec>
   13600:	b	13108 <__assert_fail@plt+0x2208>
   13604:	sub	r3, fp, #2
   13608:	clz	r3, r3
   1360c:	lsr	r3, r3, #5
   13610:	b	135f4 <__assert_fail@plt+0x26f4>
   13614:	ldr	r3, [sp, #52]	; 0x34
   13618:	ldrb	r5, [r3]
   1361c:	cmp	r5, #126	; 0x7e
   13620:	ldrls	pc, [pc, r5, lsl #2]
   13624:	b	132d0 <__assert_fail@plt+0x23d0>
   13628:	andeq	r3, r1, r8, asr #3
   1362c:	ldrdeq	r3, [r1], -r0
   13630:	ldrdeq	r3, [r1], -r0
   13634:	ldrdeq	r3, [r1], -r0
   13638:	ldrdeq	r3, [r1], -r0
   1363c:	ldrdeq	r3, [r1], -r0
   13640:	ldrdeq	r3, [r1], -r0
   13644:	andeq	r3, r1, ip, lsr #3
   13648:	andeq	r3, r1, r4, lsr #3
   1364c:	andeq	r3, r1, r0, ror #16
   13650:	muleq	r1, r8, r1
   13654:	andeq	r3, r1, r4, asr r8
   13658:	andeq	r3, r1, r4, ror r1
   1365c:	andeq	r3, r1, r0, asr #3
   13660:	ldrdeq	r3, [r1], -r0
   13664:	ldrdeq	r3, [r1], -r0
   13668:	ldrdeq	r3, [r1], -r0
   1366c:	ldrdeq	r3, [r1], -r0
   13670:	ldrdeq	r3, [r1], -r0
   13674:	ldrdeq	r3, [r1], -r0
   13678:	ldrdeq	r3, [r1], -r0
   1367c:	ldrdeq	r3, [r1], -r0
   13680:	ldrdeq	r3, [r1], -r0
   13684:	ldrdeq	r3, [r1], -r0
   13688:	ldrdeq	r3, [r1], -r0
   1368c:	ldrdeq	r3, [r1], -r0
   13690:	ldrdeq	r3, [r1], -r0
   13694:	ldrdeq	r3, [r1], -r0
   13698:	ldrdeq	r3, [r1], -r0
   1369c:	ldrdeq	r3, [r1], -r0
   136a0:	ldrdeq	r3, [r1], -r0
   136a4:	ldrdeq	r3, [r1], -r0
   136a8:	andeq	r3, r1, ip, asr #16
   136ac:			; <UNDEFINED> instruction: 0x000131b4
   136b0:			; <UNDEFINED> instruction: 0x000131b4
   136b4:	andeq	r3, r1, r0, lsr r8
   136b8:			; <UNDEFINED> instruction: 0x000131b4
   136bc:	andeq	r3, r1, r4, lsr #16
   136c0:			; <UNDEFINED> instruction: 0x000131b4
   136c4:	andeq	r3, r1, r0, lsl r0
   136c8:			; <UNDEFINED> instruction: 0x000131b4
   136cc:			; <UNDEFINED> instruction: 0x000131b4
   136d0:			; <UNDEFINED> instruction: 0x000131b4
   136d4:	andeq	r3, r1, r4, lsr #16
   136d8:	andeq	r3, r1, r4, lsr #16
   136dc:	andeq	r3, r1, r4, lsr #16
   136e0:	andeq	r3, r1, r4, lsr #16
   136e4:	andeq	r3, r1, r4, lsr #16
   136e8:	andeq	r3, r1, r4, lsr #16
   136ec:	andeq	r3, r1, r4, lsr #16
   136f0:	andeq	r3, r1, r4, lsr #16
   136f4:	andeq	r3, r1, r4, lsr #16
   136f8:	andeq	r3, r1, r4, lsr #16
   136fc:	andeq	r3, r1, r4, lsr #16
   13700:	andeq	r3, r1, r4, lsr #16
   13704:	andeq	r3, r1, r4, lsr #16
   13708:	andeq	r3, r1, r4, lsr #16
   1370c:	andeq	r3, r1, r4, lsr #16
   13710:	andeq	r3, r1, r4, lsr #16
   13714:			; <UNDEFINED> instruction: 0x000131b4
   13718:			; <UNDEFINED> instruction: 0x000131b4
   1371c:			; <UNDEFINED> instruction: 0x000131b4
   13720:			; <UNDEFINED> instruction: 0x000131b4
   13724:	andeq	r2, r1, r4, ror #31
   13728:	ldrdeq	r3, [r1], -r0
   1372c:	andeq	r3, r1, r4, lsr #16
   13730:	andeq	r3, r1, r4, lsr #16
   13734:	andeq	r3, r1, r4, lsr #16
   13738:	andeq	r3, r1, r4, lsr #16
   1373c:	andeq	r3, r1, r4, lsr #16
   13740:	andeq	r3, r1, r4, lsr #16
   13744:	andeq	r3, r1, r4, lsr #16
   13748:	andeq	r3, r1, r4, lsr #16
   1374c:	andeq	r3, r1, r4, lsr #16
   13750:	andeq	r3, r1, r4, lsr #16
   13754:	andeq	r3, r1, r4, lsr #16
   13758:	andeq	r3, r1, r4, lsr #16
   1375c:	andeq	r3, r1, r4, lsr #16
   13760:	andeq	r3, r1, r4, lsr #16
   13764:	andeq	r3, r1, r4, lsr #16
   13768:	andeq	r3, r1, r4, lsr #16
   1376c:	andeq	r3, r1, r4, lsr #16
   13770:	andeq	r3, r1, r4, lsr #16
   13774:	andeq	r3, r1, r4, lsr #16
   13778:	andeq	r3, r1, r4, lsr #16
   1377c:	andeq	r3, r1, r4, lsr #16
   13780:	andeq	r3, r1, r4, lsr #16
   13784:	andeq	r3, r1, r4, lsr #16
   13788:	andeq	r3, r1, r4, lsr #16
   1378c:	andeq	r3, r1, r4, lsr #16
   13790:	andeq	r3, r1, r4, lsr #16
   13794:			; <UNDEFINED> instruction: 0x000131b4
   13798:	andeq	r2, r1, ip, lsl #31
   1379c:	andeq	r3, r1, r4, lsr #16
   137a0:			; <UNDEFINED> instruction: 0x000131b4
   137a4:	andeq	r3, r1, r4, lsr #16
   137a8:			; <UNDEFINED> instruction: 0x000131b4
   137ac:	andeq	r3, r1, r4, lsr #16
   137b0:	andeq	r3, r1, r4, lsr #16
   137b4:	andeq	r3, r1, r4, lsr #16
   137b8:	andeq	r3, r1, r4, lsr #16
   137bc:	andeq	r3, r1, r4, lsr #16
   137c0:	andeq	r3, r1, r4, lsr #16
   137c4:	andeq	r3, r1, r4, lsr #16
   137c8:	andeq	r3, r1, r4, lsr #16
   137cc:	andeq	r3, r1, r4, lsr #16
   137d0:	andeq	r3, r1, r4, lsr #16
   137d4:	andeq	r3, r1, r4, lsr #16
   137d8:	andeq	r3, r1, r4, lsr #16
   137dc:	andeq	r3, r1, r4, lsr #16
   137e0:	andeq	r3, r1, r4, lsr #16
   137e4:	andeq	r3, r1, r4, lsr #16
   137e8:	andeq	r3, r1, r4, lsr #16
   137ec:	andeq	r3, r1, r4, lsr #16
   137f0:	andeq	r3, r1, r4, lsr #16
   137f4:	andeq	r3, r1, r4, lsr #16
   137f8:	andeq	r3, r1, r4, lsr #16
   137fc:	andeq	r3, r1, r4, lsr #16
   13800:	andeq	r3, r1, r4, lsr #16
   13804:	andeq	r3, r1, r4, lsr #16
   13808:	andeq	r3, r1, r4, lsr #16
   1380c:	andeq	r3, r1, r4, lsr #16
   13810:	andeq	r3, r1, r4, lsr #16
   13814:			; <UNDEFINED> instruction: 0x00012db0
   13818:			; <UNDEFINED> instruction: 0x000131b4
   1381c:			; <UNDEFINED> instruction: 0x00012db0
   13820:	andeq	r3, r1, r0, lsr r8
   13824:	mov	r6, r7
   13828:	mov	r7, #0
   1382c:	b	12fdc <__assert_fail@plt+0x20dc>
   13830:	cmp	r9, #0
   13834:	mov	r2, #0
   13838:	beq	132a0 <__assert_fail@plt+0x23a0>
   1383c:	mov	r6, #0
   13840:	mov	r7, r2
   13844:	mov	r3, r6
   13848:	b	12dfc <__assert_fail@plt+0x1efc>
   1384c:	mov	r2, #0
   13850:	b	132b4 <__assert_fail@plt+0x23b4>
   13854:	mov	r7, #0
   13858:	mov	r3, #118	; 0x76
   1385c:	b	12fc0 <__assert_fail@plt+0x20c0>
   13860:	mov	r7, #0
   13864:	mov	r3, #116	; 0x74
   13868:	b	130f0 <__assert_fail@plt+0x21f0>
   1386c:	ldr	r3, [sp, #44]	; 0x2c
   13870:	b	12e24 <__assert_fail@plt+0x1f24>
   13874:	ldr	r3, [sp, #44]	; 0x2c
   13878:	cmp	r3, #0
   1387c:	bne	13cec <__assert_fail@plt+0x2dec>
   13880:	add	r9, r9, #1
   13884:	mov	r6, #0
   13888:	ldr	r3, [sp, #48]	; 0x30
   1388c:	mov	r5, #92	; 0x5c
   13890:	b	130b0 <__assert_fail@plt+0x21b0>
   13894:	ldr	r3, [sp, #32]
   13898:	ldrb	r2, [r3, #1]
   1389c:	adds	r2, r2, #0
   138a0:	movne	r2, #1
   138a4:	b	12dcc <__assert_fail@plt+0x1ecc>
   138a8:	ldr	r3, [sp, #156]	; 0x9c
   138ac:	ands	r3, r3, #4
   138b0:	beq	138d8 <__assert_fail@plt+0x29d8>
   138b4:	ldr	r2, [sp, #28]
   138b8:	add	r3, r9, #2
   138bc:	cmp	r3, r2
   138c0:	bcs	138d4 <__assert_fail@plt+0x29d4>
   138c4:	ldr	r2, [sp, #52]	; 0x34
   138c8:	ldrb	r5, [r2, #1]
   138cc:	cmp	r5, #63	; 0x3f
   138d0:	beq	13d50 <__assert_fail@plt+0x2e50>
   138d4:	mov	r3, #0
   138d8:	mov	r5, #63	; 0x3f
   138dc:	mov	r6, r3
   138e0:	b	12dec <__assert_fail@plt+0x1eec>
   138e4:	ldr	r3, [sp, #44]	; 0x2c
   138e8:	cmp	r3, #0
   138ec:	bne	13cec <__assert_fail@plt+0x2dec>
   138f0:	mov	r6, r3
   138f4:	mov	r5, #63	; 0x3f
   138f8:	b	12e24 <__assert_fail@plt+0x1f24>
   138fc:	ldr	r1, [sp, #28]
   13900:	mov	r2, #0
   13904:	mov	r3, #0
   13908:	strd	r2, [sp, #104]	; 0x68
   1390c:	cmn	r1, #1
   13910:	bne	13920 <__assert_fail@plt+0x2a20>
   13914:	ldr	r0, [sp, #32]
   13918:	bl	10e04 <strlen@plt>
   1391c:	str	r0, [sp, #28]
   13920:	str	r8, [sp, #76]	; 0x4c
   13924:	mov	r3, #0
   13928:	str	sl, [sp, #80]	; 0x50
   1392c:	ldr	sl, [sp, #32]
   13930:	str	r5, [sp, #84]	; 0x54
   13934:	mov	r5, r3
   13938:	ldr	r8, [sp, #44]	; 0x2c
   1393c:	str	r7, [sp, #88]	; 0x58
   13940:	str	r4, [sp, #92]	; 0x5c
   13944:	ldr	r2, [sp, #28]
   13948:	add	r4, r9, r5
   1394c:	add	r3, sp, #104	; 0x68
   13950:	add	r7, sl, r4
   13954:	add	r0, sp, #100	; 0x64
   13958:	mov	r1, r7
   1395c:	sub	r2, r2, r4
   13960:	bl	16264 <__assert_fail@plt+0x5364>
   13964:	subs	r1, r0, #0
   13968:	beq	139b4 <__assert_fail@plt+0x2ab4>
   1396c:	cmn	r1, #1
   13970:	beq	13d2c <__assert_fail@plt+0x2e2c>
   13974:	cmn	r1, #2
   13978:	beq	13e4c <__assert_fail@plt+0x2f4c>
   1397c:	cmp	fp, #2
   13980:	movne	r3, #0
   13984:	andeq	r3, r8, #1
   13988:	cmp	r3, #0
   1398c:	bne	13b18 <__assert_fail@plt+0x2c18>
   13990:	ldr	r0, [sp, #100]	; 0x64
   13994:	add	r5, r5, r1
   13998:	bl	10d5c <iswprint@plt>
   1399c:	cmp	r0, #0
   139a0:	add	r0, sp, #104	; 0x68
   139a4:	moveq	r6, #0
   139a8:	bl	10d08 <mbsinit@plt>
   139ac:	cmp	r0, #0
   139b0:	beq	13944 <__assert_fail@plt+0x2a44>
   139b4:	ldr	r3, [sp, #40]	; 0x28
   139b8:	mov	ip, r5
   139bc:	eor	r2, r6, #1
   139c0:	ldr	r8, [sp, #76]	; 0x4c
   139c4:	ldr	sl, [sp, #80]	; 0x50
   139c8:	and	r2, r2, r3
   139cc:	ldr	r5, [sp, #84]	; 0x54
   139d0:	ldr	r7, [sp, #88]	; 0x58
   139d4:	ldr	r4, [sp, #92]	; 0x5c
   139d8:	cmp	ip, #1
   139dc:	bls	13318 <__assert_fail@plt+0x2418>
   139e0:	add	r1, ip, r9
   139e4:	mov	r0, #39	; 0x27
   139e8:	ldr	lr, [sp, #52]	; 0x34
   139ec:	mov	ip, #0
   139f0:	str	r6, [sp, #52]	; 0x34
   139f4:	ldr	r6, [sp, #48]	; 0x30
   139f8:	b	13ab4 <__assert_fail@plt+0x2bb4>
   139fc:	ldr	ip, [sp, #44]	; 0x2c
   13a00:	sub	r3, fp, #2
   13a04:	clz	r3, r3
   13a08:	lsr	r3, r3, #5
   13a0c:	cmp	ip, #0
   13a10:	bne	13c24 <__assert_fail@plt+0x2d24>
   13a14:	eor	ip, r6, #1
   13a18:	ands	r3, r3, ip
   13a1c:	beq	13a4c <__assert_fail@plt+0x2b4c>
   13a20:	cmp	sl, r4
   13a24:	add	ip, r4, #1
   13a28:	strbhi	r0, [r8, r4]
   13a2c:	cmp	sl, ip
   13a30:	movhi	r6, #36	; 0x24
   13a34:	strbhi	r6, [r8, ip]
   13a38:	add	ip, r4, #2
   13a3c:	mov	r6, r3
   13a40:	cmp	sl, ip
   13a44:	add	r4, r4, #3
   13a48:	strbhi	r0, [r8, ip]
   13a4c:	cmp	sl, r4
   13a50:	movhi	r3, #92	; 0x5c
   13a54:	strbhi	r3, [r8, r4]
   13a58:	add	r3, r4, #1
   13a5c:	cmp	sl, r3
   13a60:	bls	13a70 <__assert_fail@plt+0x2b70>
   13a64:	lsr	ip, r5, #6
   13a68:	add	ip, ip, #48	; 0x30
   13a6c:	strb	ip, [r8, r3]
   13a70:	add	r3, r4, #2
   13a74:	cmp	sl, r3
   13a78:	bls	13a88 <__assert_fail@plt+0x2b88>
   13a7c:	ubfx	ip, r5, #3, #3
   13a80:	add	ip, ip, #48	; 0x30
   13a84:	strb	ip, [r8, r3]
   13a88:	add	r9, r9, #1
   13a8c:	and	r5, r5, #7
   13a90:	cmp	r9, r1
   13a94:	add	r5, r5, #48	; 0x30
   13a98:	add	r4, r4, #3
   13a9c:	bcs	13c50 <__assert_fail@plt+0x2d50>
   13aa0:	mov	ip, r2
   13aa4:	cmp	sl, r4
   13aa8:	strbhi	r5, [r8, r4]
   13aac:	add	r4, r4, #1
   13ab0:	ldrb	r5, [lr, #1]!
   13ab4:	cmp	r2, #0
   13ab8:	bne	139fc <__assert_fail@plt+0x2afc>
   13abc:	eor	r3, ip, #1
   13ac0:	cmp	r7, #0
   13ac4:	and	r3, r3, r6
   13ac8:	uxtb	r3, r3
   13acc:	beq	13ae0 <__assert_fail@plt+0x2be0>
   13ad0:	cmp	sl, r4
   13ad4:	movhi	r7, #92	; 0x5c
   13ad8:	strbhi	r7, [r8, r4]
   13adc:	add	r4, r4, #1
   13ae0:	add	r9, r9, #1
   13ae4:	cmp	r9, r1
   13ae8:	bcs	13c38 <__assert_fail@plt+0x2d38>
   13aec:	cmp	r3, #0
   13af0:	beq	13c70 <__assert_fail@plt+0x2d70>
   13af4:	cmp	sl, r4
   13af8:	add	r3, r4, #1
   13afc:	mov	r7, #0
   13b00:	strbhi	r0, [r8, r4]
   13b04:	cmp	sl, r3
   13b08:	add	r4, r4, #2
   13b0c:	mov	r6, r7
   13b10:	strbhi	r0, [r8, r3]
   13b14:	b	13aa4 <__assert_fail@plt+0x2ba4>
   13b18:	cmp	r1, #1
   13b1c:	beq	13990 <__assert_fail@plt+0x2a90>
   13b20:	add	r2, r4, #1
   13b24:	add	r3, sl, r1
   13b28:	add	r2, sl, r2
   13b2c:	add	r4, r3, r4
   13b30:	ldrb	r3, [r2], #1
   13b34:	sub	r3, r3, #91	; 0x5b
   13b38:	cmp	r3, #33	; 0x21
   13b3c:	ldrls	pc, [pc, r3, lsl #2]
   13b40:	b	13bcc <__assert_fail@plt+0x2ccc>
   13b44:	ldrdeq	r3, [r1], -r8
   13b48:	ldrdeq	r3, [r1], -r8
   13b4c:	andeq	r3, r1, ip, asr #23
   13b50:	ldrdeq	r3, [r1], -r8
   13b54:	andeq	r3, r1, ip, asr #23
   13b58:	ldrdeq	r3, [r1], -r8
   13b5c:	andeq	r3, r1, ip, asr #23
   13b60:	andeq	r3, r1, ip, asr #23
   13b64:	andeq	r3, r1, ip, asr #23
   13b68:	andeq	r3, r1, ip, asr #23
   13b6c:	andeq	r3, r1, ip, asr #23
   13b70:	andeq	r3, r1, ip, asr #23
   13b74:	andeq	r3, r1, ip, asr #23
   13b78:	andeq	r3, r1, ip, asr #23
   13b7c:	andeq	r3, r1, ip, asr #23
   13b80:	andeq	r3, r1, ip, asr #23
   13b84:	andeq	r3, r1, ip, asr #23
   13b88:	andeq	r3, r1, ip, asr #23
   13b8c:	andeq	r3, r1, ip, asr #23
   13b90:	andeq	r3, r1, ip, asr #23
   13b94:	andeq	r3, r1, ip, asr #23
   13b98:	andeq	r3, r1, ip, asr #23
   13b9c:	andeq	r3, r1, ip, asr #23
   13ba0:	andeq	r3, r1, ip, asr #23
   13ba4:	andeq	r3, r1, ip, asr #23
   13ba8:	andeq	r3, r1, ip, asr #23
   13bac:	andeq	r3, r1, ip, asr #23
   13bb0:	andeq	r3, r1, ip, asr #23
   13bb4:	andeq	r3, r1, ip, asr #23
   13bb8:	andeq	r3, r1, ip, asr #23
   13bbc:	andeq	r3, r1, ip, asr #23
   13bc0:	andeq	r3, r1, ip, asr #23
   13bc4:	andeq	r3, r1, ip, asr #23
   13bc8:	ldrdeq	r3, [r1], -r8
   13bcc:	cmp	r4, r2
   13bd0:	bne	13b30 <__assert_fail@plt+0x2c30>
   13bd4:	b	13990 <__assert_fail@plt+0x2a90>
   13bd8:	mov	r8, #2
   13bdc:	ldr	fp, [sp, #76]	; 0x4c
   13be0:	ldr	sl, [sp, #80]	; 0x50
   13be4:	b	13110 <__assert_fail@plt+0x2210>
   13be8:	ldr	r2, [sp, #40]	; 0x28
   13bec:	str	fp, [sp, #152]	; 0x98
   13bf0:	mov	fp, r8
   13bf4:	ldr	r8, [sp, #152]	; 0x98
   13bf8:	and	r2, r2, r3
   13bfc:	str	r2, [sp, #40]	; 0x28
   13c00:	b	13110 <__assert_fail@plt+0x2210>
   13c04:	cmp	sl, r4
   13c08:	movls	r0, r4
   13c0c:	bls	13240 <__assert_fail@plt+0x2340>
   13c10:	ldr	r3, [sp, #48]	; 0x30
   13c14:	b	13230 <__assert_fail@plt+0x2330>
   13c18:	str	sl, [sp, #72]	; 0x48
   13c1c:	ldr	sl, [sp, #44]	; 0x2c
   13c20:	b	13080 <__assert_fail@plt+0x2180>
   13c24:	str	r3, [sp, #40]	; 0x28
   13c28:	str	fp, [sp, #152]	; 0x98
   13c2c:	mov	fp, r8
   13c30:	ldr	r8, [sp, #152]	; 0x98
   13c34:	b	13110 <__assert_fail@plt+0x2210>
   13c38:	str	r6, [sp, #48]	; 0x30
   13c3c:	ldr	r6, [sp, #52]	; 0x34
   13c40:	b	130b0 <__assert_fail@plt+0x21b0>
   13c44:	mov	r6, #0
   13c48:	ldr	r2, [sp, #40]	; 0x28
   13c4c:	b	139e0 <__assert_fail@plt+0x2ae0>
   13c50:	str	r6, [sp, #48]	; 0x30
   13c54:	ldr	r6, [sp, #52]	; 0x34
   13c58:	b	12e9c <__assert_fail@plt+0x1f9c>
   13c5c:	add	r4, r4, #4
   13c60:	mov	r6, #0
   13c64:	str	r3, [sp, #48]	; 0x30
   13c68:	mov	r5, #48	; 0x30
   13c6c:	b	12e24 <__assert_fail@plt+0x1f24>
   13c70:	mov	r7, r3
   13c74:	b	13aa4 <__assert_fail@plt+0x2ba4>
   13c78:	mov	r3, #1
   13c7c:	movw	r2, #27876	; 0x6ce4
   13c80:	movt	r2, #1
   13c84:	mov	r4, r3
   13c88:	str	r3, [sp, #36]	; 0x24
   13c8c:	str	r3, [sp, #40]	; 0x28
   13c90:	str	sl, [sp, #44]	; 0x2c
   13c94:	str	sl, [sp, #48]	; 0x30
   13c98:	str	r3, [sp, #56]	; 0x38
   13c9c:	str	r2, [sp, #60]	; 0x3c
   13ca0:	str	sl, [sp, #68]	; 0x44
   13ca4:	str	sl, [sp, #72]	; 0x48
   13ca8:	b	1294c <__assert_fail@plt+0x1a4c>
   13cac:	mov	r3, r6
   13cb0:	mov	r5, #48	; 0x30
   13cb4:	mov	r6, #0
   13cb8:	b	12e24 <__assert_fail@plt+0x1f24>
   13cbc:	mov	r5, r3
   13cc0:	b	1319c <__assert_fail@plt+0x229c>
   13cc4:	cmp	sl, r4
   13cc8:	mov	r5, #48	; 0x30
   13ccc:	movhi	r3, #48	; 0x30
   13cd0:	strbhi	r3, [r8, r4]
   13cd4:	add	r3, r0, #2
   13cd8:	add	r4, r0, #3
   13cdc:	cmp	sl, r3
   13ce0:	movhi	r1, #48	; 0x30
   13ce4:	strbhi	r1, [r8, r3]
   13ce8:	b	13274 <__assert_fail@plt+0x2374>
   13cec:	str	fp, [sp, #152]	; 0x98
   13cf0:	mov	fp, r8
   13cf4:	ldr	r8, [sp, #152]	; 0x98
   13cf8:	b	13110 <__assert_fail@plt+0x2210>
   13cfc:	ldr	r3, [sp, #164]	; 0xa4
   13d00:	ldrb	r3, [r3]
   13d04:	cmp	r3, #0
   13d08:	beq	1291c <__assert_fail@plt+0x1a1c>
   13d0c:	ldr	r2, [sp, #164]	; 0xa4
   13d10:	cmp	sl, r4
   13d14:	strbhi	r3, [fp, r4]
   13d18:	add	r4, r4, #1
   13d1c:	ldrb	r3, [r2, #1]!
   13d20:	cmp	r3, #0
   13d24:	bne	13d10 <__assert_fail@plt+0x2e10>
   13d28:	b	1291c <__assert_fail@plt+0x1a1c>
   13d2c:	mov	ip, r5
   13d30:	mov	r6, #0
   13d34:	ldr	r2, [sp, #40]	; 0x28
   13d38:	ldr	r8, [sp, #76]	; 0x4c
   13d3c:	ldr	sl, [sp, #80]	; 0x50
   13d40:	ldr	r5, [sp, #84]	; 0x54
   13d44:	ldr	r7, [sp, #88]	; 0x58
   13d48:	ldr	r4, [sp, #92]	; 0x5c
   13d4c:	b	139d8 <__assert_fail@plt+0x2ad8>
   13d50:	ldr	r2, [sp, #32]
   13d54:	ldrb	r1, [r2, r3]
   13d58:	sub	r2, r1, #33	; 0x21
   13d5c:	cmp	r2, #29
   13d60:	ldrls	pc, [pc, r2, lsl #2]
   13d64:	b	13e40 <__assert_fail@plt+0x2f40>
   13d68:	andeq	r3, r1, r0, ror #27
   13d6c:	andeq	r3, r1, r0, asr #28
   13d70:	andeq	r3, r1, r0, asr #28
   13d74:	andeq	r3, r1, r0, asr #28
   13d78:	andeq	r3, r1, r0, asr #28
   13d7c:	andeq	r3, r1, r0, asr #28
   13d80:	andeq	r3, r1, r0, ror #27
   13d84:	andeq	r3, r1, r0, ror #27
   13d88:	andeq	r3, r1, r0, ror #27
   13d8c:	andeq	r3, r1, r0, asr #28
   13d90:	andeq	r3, r1, r0, asr #28
   13d94:	andeq	r3, r1, r0, asr #28
   13d98:	andeq	r3, r1, r0, ror #27
   13d9c:	andeq	r3, r1, r0, asr #28
   13da0:	andeq	r3, r1, r0, ror #27
   13da4:	andeq	r3, r1, r0, asr #28
   13da8:	andeq	r3, r1, r0, asr #28
   13dac:	andeq	r3, r1, r0, asr #28
   13db0:	andeq	r3, r1, r0, asr #28
   13db4:	andeq	r3, r1, r0, asr #28
   13db8:	andeq	r3, r1, r0, asr #28
   13dbc:	andeq	r3, r1, r0, asr #28
   13dc0:	andeq	r3, r1, r0, asr #28
   13dc4:	andeq	r3, r1, r0, asr #28
   13dc8:	andeq	r3, r1, r0, asr #28
   13dcc:	andeq	r3, r1, r0, asr #28
   13dd0:	andeq	r3, r1, r0, asr #28
   13dd4:	andeq	r3, r1, r0, ror #27
   13dd8:	andeq	r3, r1, r0, ror #27
   13ddc:	andeq	r3, r1, r0, ror #27
   13de0:	ldr	r2, [sp, #44]	; 0x2c
   13de4:	cmp	r2, #0
   13de8:	bne	13f44 <__assert_fail@plt+0x3044>
   13dec:	cmp	sl, r4
   13df0:	mov	r5, r1
   13df4:	movhi	r2, #63	; 0x3f
   13df8:	mov	r9, r3
   13dfc:	strbhi	r2, [r8, r4]
   13e00:	add	r2, r4, #1
   13e04:	cmp	sl, r2
   13e08:	movhi	r0, #34	; 0x22
   13e0c:	strbhi	r0, [r8, r2]
   13e10:	add	r2, r4, #2
   13e14:	cmp	sl, r2
   13e18:	movhi	r0, #34	; 0x22
   13e1c:	strbhi	r0, [r8, r2]
   13e20:	add	r2, r4, #3
   13e24:	add	r4, r4, #4
   13e28:	cmp	sl, r2
   13e2c:	movhi	r0, #63	; 0x3f
   13e30:	strbhi	r0, [r8, r2]
   13e34:	mov	r2, #0
   13e38:	mov	r6, r2
   13e3c:	b	13274 <__assert_fail@plt+0x2374>
   13e40:	mov	r3, #0
   13e44:	mov	r6, r3
   13e48:	b	12dec <__assert_fail@plt+0x1eec>
   13e4c:	ldr	r0, [sp, #28]
   13e50:	mov	r1, r4
   13e54:	mov	r2, r7
   13e58:	mov	r3, r5
   13e5c:	mov	ip, r5
   13e60:	ldr	r8, [sp, #76]	; 0x4c
   13e64:	ldr	sl, [sp, #80]	; 0x50
   13e68:	cmp	r1, r0
   13e6c:	ldr	r5, [sp, #84]	; 0x54
   13e70:	ldr	r7, [sp, #88]	; 0x58
   13e74:	ldr	r4, [sp, #92]	; 0x5c
   13e78:	bcs	13eac <__assert_fail@plt+0x2fac>
   13e7c:	ldrb	r6, [r2]
   13e80:	cmp	r6, #0
   13e84:	bne	13e98 <__assert_fail@plt+0x2f98>
   13e88:	b	13fcc <__assert_fail@plt+0x30cc>
   13e8c:	ldrb	r6, [r2, #1]!
   13e90:	cmp	r6, #0
   13e94:	beq	13f54 <__assert_fail@plt+0x3054>
   13e98:	add	r3, r3, #1
   13e9c:	add	r1, r9, r3
   13ea0:	cmp	r1, r0
   13ea4:	bcc	13e8c <__assert_fail@plt+0x2f8c>
   13ea8:	mov	ip, r3
   13eac:	mov	r6, #0
   13eb0:	ldr	r2, [sp, #40]	; 0x28
   13eb4:	b	139d8 <__assert_fail@plt+0x2ad8>
   13eb8:	mov	r3, #1
   13ebc:	mov	r2, #0
   13ec0:	mov	r4, r2
   13ec4:	str	r3, [sp, #36]	; 0x24
   13ec8:	str	r3, [sp, #40]	; 0x28
   13ecc:	str	r3, [sp, #44]	; 0x2c
   13ed0:	str	r2, [sp, #48]	; 0x30
   13ed4:	str	r3, [sp, #56]	; 0x38
   13ed8:	movw	r3, #27876	; 0x6ce4
   13edc:	movt	r3, #1
   13ee0:	str	r3, [sp, #60]	; 0x3c
   13ee4:	str	r2, [sp, #68]	; 0x44
   13ee8:	str	r2, [sp, #72]	; 0x48
   13eec:	b	1294c <__assert_fail@plt+0x1a4c>
   13ef0:	mov	r2, r3
   13ef4:	ldr	r3, [sp, #60]	; 0x3c
   13ef8:	cmp	r3, #0
   13efc:	moveq	r2, #0
   13f00:	andne	r2, r2, #1
   13f04:	cmp	r2, #0
   13f08:	beq	13f34 <__assert_fail@plt+0x3034>
   13f0c:	mov	r2, r3
   13f10:	ldrb	r3, [r3]
   13f14:	cmp	r3, #0
   13f18:	beq	13f34 <__assert_fail@plt+0x3034>
   13f1c:	cmp	sl, r4
   13f20:	strbhi	r3, [fp, r4]
   13f24:	add	r4, r4, #1
   13f28:	ldrb	r3, [r2, #1]!
   13f2c:	cmp	r3, #0
   13f30:	bne	13f1c <__assert_fail@plt+0x301c>
   13f34:	cmp	sl, r4
   13f38:	movhi	r3, #0
   13f3c:	strbhi	r3, [fp, r4]
   13f40:	b	13154 <__assert_fail@plt+0x2254>
   13f44:	str	fp, [sp, #152]	; 0x98
   13f48:	mov	fp, r8
   13f4c:	ldr	r8, [sp, #152]	; 0x98
   13f50:	b	1311c <__assert_fail@plt+0x221c>
   13f54:	mov	ip, r3
   13f58:	ldr	r2, [sp, #40]	; 0x28
   13f5c:	b	139d8 <__assert_fail@plt+0x2ad8>
   13f60:	str	fp, [sp, #152]	; 0x98
   13f64:	mov	fp, r8
   13f68:	ldr	r8, [sp, #152]	; 0x98
   13f6c:	sub	r3, r8, #2
   13f70:	clz	r3, r3
   13f74:	lsr	r3, r3, #5
   13f78:	str	r3, [sp, #40]	; 0x28
   13f7c:	b	13110 <__assert_fail@plt+0x2210>
   13f80:	mov	ip, #5
   13f84:	ldr	r3, [sp, #28]
   13f88:	str	ip, [sp]
   13f8c:	ldr	r2, [sp, #156]	; 0x9c
   13f90:	ldr	ip, [sp, #164]	; 0xa4
   13f94:	ldr	r0, [sp, #160]	; 0xa0
   13f98:	str	r2, [sp, #4]
   13f9c:	ldr	r2, [sp, #32]
   13fa0:	ldr	r1, [sp, #72]	; 0x48
   13fa4:	str	ip, [sp, #12]
   13fa8:	ldr	ip, [sp, #168]	; 0xa8
   13fac:	str	r0, [sp, #8]
   13fb0:	mov	r0, fp
   13fb4:	str	ip, [sp, #16]
   13fb8:	bl	12864 <__assert_fail@plt+0x1964>
   13fbc:	mov	r4, r0
   13fc0:	b	13154 <__assert_fail@plt+0x2254>
   13fc4:	mov	r8, #2
   13fc8:	b	13110 <__assert_fail@plt+0x2210>
   13fcc:	ldr	r2, [sp, #40]	; 0x28
   13fd0:	b	139d8 <__assert_fail@plt+0x2ad8>
   13fd4:	mov	r3, #0
   13fd8:	mov	r2, #1
   13fdc:	mov	r4, r3
   13fe0:	strd	r2, [sp, #36]	; 0x24
   13fe4:	strd	r2, [sp, #44]	; 0x2c
   13fe8:	str	r2, [sp, #56]	; 0x38
   13fec:	str	r3, [sp, #68]	; 0x44
   13ff0:	str	r3, [sp, #72]	; 0x48
   13ff4:	movw	r3, #27896	; 0x6cf8
   13ff8:	movt	r3, #1
   13ffc:	str	r3, [sp, #60]	; 0x3c
   14000:	b	1294c <__assert_fail@plt+0x1a4c>
   14004:	mov	r3, #0
   14008:	mov	r1, #1
   1400c:	mov	r2, r3
   14010:	str	r1, [sp, #36]	; 0x24
   14014:	str	r3, [sp, #48]	; 0x30
   14018:	str	sl, [sp, #72]	; 0x48
   1401c:	b	12f54 <__assert_fail@plt+0x2054>
   14020:	bl	10ef4 <abort@plt>
   14024:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14028:	mov	r4, r0
   1402c:	mov	r5, r3
   14030:	strd	r6, [sp, #8]
   14034:	movw	r7, #33008	; 0x80f0
   14038:	movt	r7, #2
   1403c:	strd	r8, [sp, #16]
   14040:	strd	sl, [sp, #24]
   14044:	mov	sl, r1
   14048:	mov	fp, r2
   1404c:	str	lr, [sp, #32]
   14050:	sub	sp, sp, #60	; 0x3c
   14054:	bl	10e1c <__errno_location@plt>
   14058:	mov	r8, r0
   1405c:	cmn	r4, #-2147483647	; 0x80000001
   14060:	ldr	r6, [r7]
   14064:	movne	r0, #0
   14068:	moveq	r0, #1
   1406c:	ldr	r3, [r8]
   14070:	orrs	r0, r0, r4, lsr #31
   14074:	str	r3, [sp, #28]
   14078:	bne	14208 <__assert_fail@plt+0x3308>
   1407c:	ldr	r3, [r7, #4]
   14080:	cmp	r3, r4
   14084:	bgt	140e4 <__assert_fail@plt+0x31e4>
   14088:	add	r1, r7, #8
   1408c:	sub	r2, r4, r3
   14090:	str	r3, [sp, #52]	; 0x34
   14094:	cmp	r6, r1
   14098:	add	r2, r2, #1
   1409c:	beq	141e0 <__assert_fail@plt+0x32e0>
   140a0:	mov	r1, #8
   140a4:	mov	r0, r6
   140a8:	mvn	r3, #-2147483648	; 0x80000000
   140ac:	str	r1, [sp]
   140b0:	add	r1, sp, #52	; 0x34
   140b4:	bl	15088 <__assert_fail@plt+0x4188>
   140b8:	mov	r6, r0
   140bc:	str	r0, [r7]
   140c0:	ldr	r0, [r7, #4]
   140c4:	mov	r1, #0
   140c8:	ldr	r2, [sp, #52]	; 0x34
   140cc:	sub	r2, r2, r0
   140d0:	add	r0, r6, r0, lsl #3
   140d4:	lsl	r2, r2, #3
   140d8:	bl	10e34 <memset@plt>
   140dc:	ldr	r3, [sp, #52]	; 0x34
   140e0:	str	r3, [r7, #4]
   140e4:	ldr	r1, [r5, #4]
   140e8:	add	r0, r6, r4, lsl #3
   140ec:	add	ip, r5, #8
   140f0:	mov	r3, fp
   140f4:	mov	r2, sl
   140f8:	ldr	r7, [r0, #4]
   140fc:	str	r0, [sp, #36]	; 0x24
   14100:	str	ip, [sp, #40]	; 0x28
   14104:	orr	r0, r1, #1
   14108:	ldr	r9, [r6, r4, lsl #3]
   1410c:	str	ip, [sp, #8]
   14110:	ldr	lr, [r5, #44]	; 0x2c
   14114:	str	r0, [sp, #4]
   14118:	ldr	ip, [r5]
   1411c:	mov	r1, r9
   14120:	str	ip, [sp, #32]
   14124:	ldr	ip, [r5, #40]	; 0x28
   14128:	str	ip, [sp, #12]
   1412c:	ldr	ip, [sp, #32]
   14130:	str	lr, [sp, #16]
   14134:	str	r0, [sp, #44]	; 0x2c
   14138:	mov	r0, r7
   1413c:	str	ip, [sp]
   14140:	bl	12864 <__assert_fail@plt+0x1964>
   14144:	cmp	r9, r0
   14148:	bhi	141b8 <__assert_fail@plt+0x32b8>
   1414c:	add	r9, r0, #1
   14150:	movw	r3, #33124	; 0x8164
   14154:	movt	r3, #2
   14158:	cmp	r7, r3
   1415c:	str	r9, [r6, r4, lsl #3]
   14160:	beq	1416c <__assert_fail@plt+0x326c>
   14164:	mov	r0, r7
   14168:	bl	124c4 <__assert_fail@plt+0x15c4>
   1416c:	mov	r0, r9
   14170:	bl	14ed8 <__assert_fail@plt+0x3fd8>
   14174:	ldr	ip, [r5]
   14178:	mov	r3, fp
   1417c:	mov	r2, sl
   14180:	mov	r1, r9
   14184:	mov	r7, r0
   14188:	ldr	lr, [sp, #36]	; 0x24
   1418c:	ldr	r4, [r5, #40]	; 0x28
   14190:	str	r0, [lr, #4]
   14194:	ldr	lr, [r5, #44]	; 0x2c
   14198:	str	ip, [sp]
   1419c:	ldr	ip, [sp, #44]	; 0x2c
   141a0:	str	ip, [sp, #4]
   141a4:	ldr	ip, [sp, #40]	; 0x28
   141a8:	str	r4, [sp, #12]
   141ac:	str	lr, [sp, #16]
   141b0:	str	ip, [sp, #8]
   141b4:	bl	12864 <__assert_fail@plt+0x1964>
   141b8:	ldr	r3, [sp, #28]
   141bc:	mov	r0, r7
   141c0:	str	r3, [r8]
   141c4:	add	sp, sp, #60	; 0x3c
   141c8:	ldrd	r4, [sp]
   141cc:	ldrd	r6, [sp, #8]
   141d0:	ldrd	r8, [sp, #16]
   141d4:	ldrd	sl, [sp, #24]
   141d8:	add	sp, sp, #32
   141dc:	pop	{pc}		; (ldr pc, [sp], #4)
   141e0:	mov	r1, #8
   141e4:	mvn	r3, #-2147483648	; 0x80000000
   141e8:	str	r1, [sp]
   141ec:	add	r1, sp, #52	; 0x34
   141f0:	bl	15088 <__assert_fail@plt+0x4188>
   141f4:	ldrd	r2, [r7, #8]
   141f8:	mov	r6, r0
   141fc:	str	r0, [r7]
   14200:	strd	r2, [r0]
   14204:	b	140c0 <__assert_fail@plt+0x31c0>
   14208:	bl	10ef4 <abort@plt>
   1420c:	strd	r4, [sp, #-16]!
   14210:	mov	r5, r0
   14214:	str	r6, [sp, #8]
   14218:	str	lr, [sp, #12]
   1421c:	bl	10e1c <__errno_location@plt>
   14220:	mov	r4, r0
   14224:	cmp	r5, #0
   14228:	ldr	r0, [pc, #32]	; 14250 <__assert_fail@plt+0x3350>
   1422c:	mov	r1, #48	; 0x30
   14230:	movne	r0, r5
   14234:	ldr	r6, [r4]
   14238:	bl	15200 <__assert_fail@plt+0x4300>
   1423c:	str	r6, [r4]
   14240:	ldrd	r4, [sp]
   14244:	ldr	r6, [sp, #8]
   14248:	add	sp, sp, #12
   1424c:	pop	{pc}		; (ldr pc, [sp], #4)
   14250:	andeq	r8, r2, r4, ror #4
   14254:	ldr	r3, [pc, #12]	; 14268 <__assert_fail@plt+0x3368>
   14258:	cmp	r0, #0
   1425c:	moveq	r0, r3
   14260:	ldr	r0, [r0]
   14264:	bx	lr
   14268:	andeq	r8, r2, r4, ror #4
   1426c:	ldr	r3, [pc, #12]	; 14280 <__assert_fail@plt+0x3380>
   14270:	cmp	r0, #0
   14274:	moveq	r0, r3
   14278:	str	r1, [r0]
   1427c:	bx	lr
   14280:	andeq	r8, r2, r4, ror #4
   14284:	ldr	r3, [pc, #52]	; 142c0 <__assert_fail@plt+0x33c0>
   14288:	cmp	r0, #0
   1428c:	push	{lr}		; (str lr, [sp, #-4]!)
   14290:	lsr	lr, r1, #5
   14294:	and	r1, r1, #31
   14298:	moveq	r0, r3
   1429c:	add	r3, r0, #8
   142a0:	ldr	ip, [r3, lr, lsl #2]
   142a4:	lsr	r0, ip, r1
   142a8:	eor	r2, r2, r0
   142ac:	and	r0, r0, #1
   142b0:	and	r2, r2, #1
   142b4:	eor	r1, ip, r2, lsl r1
   142b8:	str	r1, [r3, lr, lsl #2]
   142bc:	pop	{pc}		; (ldr pc, [sp], #4)
   142c0:	andeq	r8, r2, r4, ror #4
   142c4:	ldr	r3, [pc, #16]	; 142dc <__assert_fail@plt+0x33dc>
   142c8:	cmp	r0, #0
   142cc:	movne	r3, r0
   142d0:	ldr	r0, [r3, #4]
   142d4:	str	r1, [r3, #4]
   142d8:	bx	lr
   142dc:	andeq	r8, r2, r4, ror #4
   142e0:	ldr	r3, [pc, #48]	; 14318 <__assert_fail@plt+0x3418>
   142e4:	cmp	r0, #0
   142e8:	mov	ip, #10
   142ec:	moveq	r0, r3
   142f0:	cmp	r2, #0
   142f4:	cmpne	r1, #0
   142f8:	str	ip, [r0]
   142fc:	beq	1430c <__assert_fail@plt+0x340c>
   14300:	str	r1, [r0, #40]	; 0x28
   14304:	str	r2, [r0, #44]	; 0x2c
   14308:	bx	lr
   1430c:	str	r4, [sp, #-8]!
   14310:	str	lr, [sp, #4]
   14314:	bl	10ef4 <abort@plt>
   14318:	andeq	r8, r2, r4, ror #4
   1431c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14320:	strd	r6, [sp, #8]
   14324:	mov	r7, r0
   14328:	mov	r6, r1
   1432c:	strd	r8, [sp, #16]
   14330:	mov	r8, r2
   14334:	mov	r9, r3
   14338:	str	lr, [sp, #24]
   1433c:	sub	sp, sp, #28
   14340:	ldr	r4, [sp, #56]	; 0x38
   14344:	ldr	ip, [pc, #104]	; 143b4 <__assert_fail@plt+0x34b4>
   14348:	cmp	r4, #0
   1434c:	moveq	r4, ip
   14350:	bl	10e1c <__errno_location@plt>
   14354:	ldr	ip, [r4, #44]	; 0x2c
   14358:	mov	r5, r0
   1435c:	mov	r1, r6
   14360:	add	lr, r4, #8
   14364:	mov	r3, r9
   14368:	ldr	r6, [r5]
   1436c:	mov	r2, r8
   14370:	mov	r0, r7
   14374:	str	ip, [sp, #16]
   14378:	ldr	ip, [r4, #40]	; 0x28
   1437c:	str	lr, [sp, #8]
   14380:	str	ip, [sp, #12]
   14384:	ldr	ip, [r4, #4]
   14388:	str	ip, [sp, #4]
   1438c:	ldr	ip, [r4]
   14390:	str	ip, [sp]
   14394:	bl	12864 <__assert_fail@plt+0x1964>
   14398:	str	r6, [r5]
   1439c:	add	sp, sp, #28
   143a0:	ldrd	r4, [sp]
   143a4:	ldrd	r6, [sp, #8]
   143a8:	ldrd	r8, [sp, #16]
   143ac:	add	sp, sp, #24
   143b0:	pop	{pc}		; (ldr pc, [sp], #4)
   143b4:	andeq	r8, r2, r4, ror #4
   143b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   143bc:	cmp	r3, #0
   143c0:	ldr	r4, [pc, #220]	; 144a4 <__assert_fail@plt+0x35a4>
   143c4:	movne	r4, r3
   143c8:	strd	r6, [sp, #8]
   143cc:	mov	r6, r2
   143d0:	strd	r8, [sp, #16]
   143d4:	mov	r9, r0
   143d8:	strd	sl, [sp, #24]
   143dc:	mov	sl, r1
   143e0:	str	lr, [sp, #32]
   143e4:	sub	sp, sp, #44	; 0x2c
   143e8:	bl	10e1c <__errno_location@plt>
   143ec:	ldr	r5, [r4, #4]
   143f0:	mov	r7, r0
   143f4:	mov	r1, #0
   143f8:	add	r8, r4, #8
   143fc:	mov	r3, sl
   14400:	ldr	ip, [r4, #44]	; 0x2c
   14404:	mov	r2, r9
   14408:	mov	r0, r1
   1440c:	ldr	lr, [r7]
   14410:	cmp	r6, r1
   14414:	orreq	r5, r5, #1
   14418:	str	ip, [sp, #16]
   1441c:	ldr	ip, [r4, #40]	; 0x28
   14420:	stmib	sp, {r5, r8, ip}
   14424:	ldr	ip, [r4]
   14428:	str	lr, [sp, #28]
   1442c:	str	ip, [sp]
   14430:	bl	12864 <__assert_fail@plt+0x1964>
   14434:	add	r1, r0, #1
   14438:	mov	fp, r0
   1443c:	mov	r0, r1
   14440:	str	r1, [sp, #36]	; 0x24
   14444:	bl	14ed8 <__assert_fail@plt+0x3fd8>
   14448:	ldr	ip, [r4, #44]	; 0x2c
   1444c:	mov	r3, sl
   14450:	mov	r2, r9
   14454:	ldr	r1, [sp, #36]	; 0x24
   14458:	str	ip, [sp, #16]
   1445c:	ldr	ip, [r4, #40]	; 0x28
   14460:	str	r0, [sp, #32]
   14464:	stmib	sp, {r5, r8, ip}
   14468:	ldr	ip, [r4]
   1446c:	str	ip, [sp]
   14470:	bl	12864 <__assert_fail@plt+0x1964>
   14474:	ldr	lr, [sp, #28]
   14478:	cmp	r6, #0
   1447c:	ldr	r0, [sp, #32]
   14480:	str	lr, [r7]
   14484:	strne	fp, [r6]
   14488:	add	sp, sp, #44	; 0x2c
   1448c:	ldrd	r4, [sp]
   14490:	ldrd	r6, [sp, #8]
   14494:	ldrd	r8, [sp, #16]
   14498:	ldrd	sl, [sp, #24]
   1449c:	add	sp, sp, #32
   144a0:	pop	{pc}		; (ldr pc, [sp], #4)
   144a4:	andeq	r8, r2, r4, ror #4
   144a8:	mov	r3, r2
   144ac:	mov	r2, #0
   144b0:	b	143b8 <__assert_fail@plt+0x34b8>
   144b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   144b8:	movw	r5, #33008	; 0x80f0
   144bc:	movt	r5, #2
   144c0:	ldr	r3, [r5, #4]
   144c4:	strd	r6, [sp, #8]
   144c8:	str	r8, [sp, #16]
   144cc:	str	lr, [sp, #20]
   144d0:	ldr	r7, [r5]
   144d4:	cmp	r3, #1
   144d8:	ble	144fc <__assert_fail@plt+0x35fc>
   144dc:	mov	r4, #1
   144e0:	add	r6, r7, #4
   144e4:	ldr	r0, [r6, r4, lsl #3]
   144e8:	add	r4, r4, #1
   144ec:	bl	124c4 <__assert_fail@plt+0x15c4>
   144f0:	ldr	r3, [r5, #4]
   144f4:	cmp	r3, r4
   144f8:	bgt	144e4 <__assert_fail@plt+0x35e4>
   144fc:	ldr	r0, [r7, #4]
   14500:	movw	r4, #33124	; 0x8164
   14504:	movt	r4, #2
   14508:	cmp	r0, r4
   1450c:	beq	14520 <__assert_fail@plt+0x3620>
   14510:	bl	124c4 <__assert_fail@plt+0x15c4>
   14514:	mov	r3, #256	; 0x100
   14518:	str	r3, [r5, #8]
   1451c:	str	r4, [r5, #12]
   14520:	ldr	r4, [pc, #44]	; 14554 <__assert_fail@plt+0x3654>
   14524:	cmp	r7, r4
   14528:	beq	14538 <__assert_fail@plt+0x3638>
   1452c:	mov	r0, r7
   14530:	bl	124c4 <__assert_fail@plt+0x15c4>
   14534:	str	r4, [r5]
   14538:	mov	r3, #1
   1453c:	ldrd	r6, [sp, #8]
   14540:	str	r3, [r5, #4]
   14544:	ldrd	r4, [sp]
   14548:	ldr	r8, [sp, #16]
   1454c:	add	sp, sp, #20
   14550:	pop	{pc}		; (ldr pc, [sp], #4)
   14554:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14558:	ldr	r3, [pc, #4]	; 14564 <__assert_fail@plt+0x3664>
   1455c:	mvn	r2, #0
   14560:	b	14024 <__assert_fail@plt+0x3124>
   14564:	andeq	r8, r2, r4, ror #4
   14568:	ldr	r3, [pc]	; 14570 <__assert_fail@plt+0x3670>
   1456c:	b	14024 <__assert_fail@plt+0x3124>
   14570:	andeq	r8, r2, r4, ror #4
   14574:	mov	r1, r0
   14578:	ldr	r3, [pc, #8]	; 14588 <__assert_fail@plt+0x3688>
   1457c:	mvn	r2, #0
   14580:	mov	r0, #0
   14584:	b	14024 <__assert_fail@plt+0x3124>
   14588:	andeq	r8, r2, r4, ror #4
   1458c:	mov	r2, r1
   14590:	ldr	r3, [pc, #8]	; 145a0 <__assert_fail@plt+0x36a0>
   14594:	mov	r1, r0
   14598:	mov	r0, #0
   1459c:	b	14024 <__assert_fail@plt+0x3124>
   145a0:	andeq	r8, r2, r4, ror #4
   145a4:	strd	r4, [sp, #-12]!
   145a8:	mov	r5, r2
   145ac:	mov	r4, r0
   145b0:	str	lr, [sp, #8]
   145b4:	sub	sp, sp, #52	; 0x34
   145b8:	mov	r0, sp
   145bc:	bl	126c0 <__assert_fail@plt+0x17c0>
   145c0:	mov	r3, sp
   145c4:	mov	r1, r5
   145c8:	mov	r0, r4
   145cc:	mvn	r2, #0
   145d0:	bl	14024 <__assert_fail@plt+0x3124>
   145d4:	add	sp, sp, #52	; 0x34
   145d8:	ldrd	r4, [sp]
   145dc:	add	sp, sp, #8
   145e0:	pop	{pc}		; (ldr pc, [sp], #4)
   145e4:	strd	r4, [sp, #-16]!
   145e8:	mov	r5, r2
   145ec:	mov	r4, r0
   145f0:	str	r6, [sp, #8]
   145f4:	mov	r6, r3
   145f8:	str	lr, [sp, #12]
   145fc:	sub	sp, sp, #48	; 0x30
   14600:	mov	r0, sp
   14604:	bl	126c0 <__assert_fail@plt+0x17c0>
   14608:	mov	r3, sp
   1460c:	mov	r2, r6
   14610:	mov	r1, r5
   14614:	mov	r0, r4
   14618:	bl	14024 <__assert_fail@plt+0x3124>
   1461c:	add	sp, sp, #48	; 0x30
   14620:	ldrd	r4, [sp]
   14624:	ldr	r6, [sp, #8]
   14628:	add	sp, sp, #12
   1462c:	pop	{pc}		; (ldr pc, [sp], #4)
   14630:	mov	r2, r1
   14634:	mov	r1, r0
   14638:	mov	r0, #0
   1463c:	b	145a4 <__assert_fail@plt+0x36a4>
   14640:	mov	r3, r2
   14644:	mov	r2, r1
   14648:	mov	r1, r0
   1464c:	mov	r0, #0
   14650:	b	145e4 <__assert_fail@plt+0x36e4>
   14654:	ldr	ip, [pc, #140]	; 146e8 <__assert_fail@plt+0x37e8>
   14658:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1465c:	ldrd	r4, [ip]
   14660:	strd	r6, [sp, #8]
   14664:	ldrd	r6, [ip, #8]
   14668:	strd	r8, [sp, #16]
   1466c:	lsr	r9, r2, #5
   14670:	str	lr, [sp, #24]
   14674:	sub	sp, sp, #52	; 0x34
   14678:	and	lr, r2, #31
   1467c:	add	r8, sp, #8
   14680:	mov	r2, r1
   14684:	strd	r4, [sp]
   14688:	mov	r1, r0
   1468c:	mov	r3, sp
   14690:	strd	r6, [sp, #8]
   14694:	mov	r0, #0
   14698:	ldrd	r4, [ip, #16]
   1469c:	ldrd	r6, [ip, #24]
   146a0:	strd	r4, [sp, #16]
   146a4:	ldrd	r4, [ip, #32]
   146a8:	strd	r6, [sp, #24]
   146ac:	ldrd	r6, [ip, #40]	; 0x28
   146b0:	strd	r4, [sp, #32]
   146b4:	strd	r6, [sp, #40]	; 0x28
   146b8:	ldr	ip, [r8, r9, lsl #2]
   146bc:	mvn	r4, ip, lsr lr
   146c0:	and	r4, r4, #1
   146c4:	eor	lr, ip, r4, lsl lr
   146c8:	str	lr, [r8, r9, lsl #2]
   146cc:	bl	14024 <__assert_fail@plt+0x3124>
   146d0:	add	sp, sp, #52	; 0x34
   146d4:	ldrd	r4, [sp]
   146d8:	ldrd	r6, [sp, #8]
   146dc:	ldrd	r8, [sp, #16]
   146e0:	add	sp, sp, #24
   146e4:	pop	{pc}		; (ldr pc, [sp], #4)
   146e8:	andeq	r8, r2, r4, ror #4
   146ec:	mov	r2, r1
   146f0:	mvn	r1, #0
   146f4:	b	14654 <__assert_fail@plt+0x3754>
   146f8:	mov	r2, #58	; 0x3a
   146fc:	mvn	r1, #0
   14700:	b	14654 <__assert_fail@plt+0x3754>
   14704:	mov	r2, #58	; 0x3a
   14708:	b	14654 <__assert_fail@plt+0x3754>
   1470c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14710:	strd	r6, [sp, #8]
   14714:	mov	r6, r0
   14718:	mov	r7, r2
   1471c:	str	lr, [sp, #16]
   14720:	sub	sp, sp, #100	; 0x64
   14724:	mov	r0, sp
   14728:	bl	126c0 <__assert_fail@plt+0x17c0>
   1472c:	ldrd	r4, [sp, #8]
   14730:	mov	r1, r7
   14734:	mov	r0, r6
   14738:	add	r3, sp, #48	; 0x30
   1473c:	mvn	r2, #0
   14740:	ldrd	r6, [sp]
   14744:	strd	r4, [sp, #56]	; 0x38
   14748:	ldrd	r4, [sp, #16]
   1474c:	strd	r6, [sp, #48]	; 0x30
   14750:	ldrd	r6, [sp, #32]
   14754:	ldr	lr, [sp, #60]	; 0x3c
   14758:	strd	r4, [sp, #64]	; 0x40
   1475c:	ldrd	r4, [sp, #24]
   14760:	mvn	ip, lr
   14764:	and	ip, ip, #67108864	; 0x4000000
   14768:	strd	r4, [sp, #72]	; 0x48
   1476c:	eor	ip, ip, lr
   14770:	ldrd	r4, [sp, #40]	; 0x28
   14774:	str	ip, [sp, #60]	; 0x3c
   14778:	strd	r6, [sp, #80]	; 0x50
   1477c:	strd	r4, [sp, #88]	; 0x58
   14780:	bl	14024 <__assert_fail@plt+0x3124>
   14784:	add	sp, sp, #100	; 0x64
   14788:	ldrd	r4, [sp]
   1478c:	ldrd	r6, [sp, #8]
   14790:	add	sp, sp, #16
   14794:	pop	{pc}		; (ldr pc, [sp], #4)
   14798:	ldr	ip, [pc, #156]	; 1483c <__assert_fail@plt+0x393c>
   1479c:	cmp	r2, #0
   147a0:	cmpne	r1, #0
   147a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   147a8:	strd	r6, [sp, #8]
   147ac:	mov	r6, r2
   147b0:	str	r8, [sp, #16]
   147b4:	mov	r8, r3
   147b8:	strd	sl, [sp, #20]
   147bc:	ldrd	r4, [ip]
   147c0:	str	lr, [sp, #28]
   147c4:	sub	sp, sp, #48	; 0x30
   147c8:	mov	lr, #10
   147cc:	ldrd	r2, [ip, #8]
   147d0:	ldrd	sl, [ip, #16]
   147d4:	strd	r4, [sp]
   147d8:	ldrd	r4, [ip, #32]
   147dc:	str	lr, [sp]
   147e0:	strd	r2, [sp, #8]
   147e4:	strd	sl, [sp, #16]
   147e8:	ldrd	r2, [ip, #24]
   147ec:	ldrd	sl, [ip, #40]	; 0x28
   147f0:	strd	r2, [sp, #24]
   147f4:	strd	r4, [sp, #32]
   147f8:	strd	sl, [sp, #40]	; 0x28
   147fc:	beq	14838 <__assert_fail@plt+0x3938>
   14800:	ldr	r2, [sp, #80]	; 0x50
   14804:	mov	r7, r1
   14808:	mov	r3, sp
   1480c:	mov	r1, r8
   14810:	str	r7, [sp, #40]	; 0x28
   14814:	str	r6, [sp, #44]	; 0x2c
   14818:	bl	14024 <__assert_fail@plt+0x3124>
   1481c:	add	sp, sp, #48	; 0x30
   14820:	ldrd	r4, [sp]
   14824:	ldrd	r6, [sp, #8]
   14828:	ldr	r8, [sp, #16]
   1482c:	ldrd	sl, [sp, #20]
   14830:	add	sp, sp, #28
   14834:	pop	{pc}		; (ldr pc, [sp], #4)
   14838:	bl	10ef4 <abort@plt>
   1483c:	andeq	r8, r2, r4, ror #4
   14840:	mvn	ip, #0
   14844:	push	{lr}		; (str lr, [sp, #-4]!)
   14848:	sub	sp, sp, #12
   1484c:	str	ip, [sp]
   14850:	bl	14798 <__assert_fail@plt+0x3898>
   14854:	add	sp, sp, #12
   14858:	pop	{pc}		; (ldr pc, [sp], #4)
   1485c:	mvn	ip, #0
   14860:	push	{lr}		; (str lr, [sp, #-4]!)
   14864:	sub	sp, sp, #12
   14868:	mov	r3, r2
   1486c:	mov	r2, r1
   14870:	mov	r1, r0
   14874:	mov	r0, #0
   14878:	str	ip, [sp]
   1487c:	bl	14798 <__assert_fail@plt+0x3898>
   14880:	add	sp, sp, #12
   14884:	pop	{pc}		; (ldr pc, [sp], #4)
   14888:	push	{lr}		; (str lr, [sp, #-4]!)
   1488c:	sub	sp, sp, #12
   14890:	str	r3, [sp]
   14894:	mov	r3, r2
   14898:	mov	r2, r1
   1489c:	mov	r1, r0
   148a0:	mov	r0, #0
   148a4:	bl	14798 <__assert_fail@plt+0x3898>
   148a8:	add	sp, sp, #12
   148ac:	pop	{pc}		; (ldr pc, [sp], #4)
   148b0:	ldr	r3, [pc]	; 148b8 <__assert_fail@plt+0x39b8>
   148b4:	b	14024 <__assert_fail@plt+0x3124>
   148b8:	andeq	r8, r2, r0, lsl #2
   148bc:	mov	r2, r1
   148c0:	ldr	r3, [pc, #8]	; 148d0 <__assert_fail@plt+0x39d0>
   148c4:	mov	r1, r0
   148c8:	mov	r0, #0
   148cc:	b	14024 <__assert_fail@plt+0x3124>
   148d0:	andeq	r8, r2, r0, lsl #2
   148d4:	ldr	r3, [pc, #4]	; 148e0 <__assert_fail@plt+0x39e0>
   148d8:	mvn	r2, #0
   148dc:	b	14024 <__assert_fail@plt+0x3124>
   148e0:	andeq	r8, r2, r0, lsl #2
   148e4:	mov	r1, r0
   148e8:	ldr	r3, [pc, #8]	; 148f8 <__assert_fail@plt+0x39f8>
   148ec:	mvn	r2, #0
   148f0:	mov	r0, #0
   148f4:	b	14024 <__assert_fail@plt+0x3124>
   148f8:	andeq	r8, r2, r0, lsl #2
   148fc:	cmp	r1, #0
   14900:	strd	r4, [sp, #-16]!
   14904:	mov	ip, r3
   14908:	str	r6, [sp, #8]
   1490c:	mov	r4, r0
   14910:	str	lr, [sp, #12]
   14914:	sub	sp, sp, #32
   14918:	ldr	r5, [sp, #48]	; 0x30
   1491c:	ldr	r6, [sp, #52]	; 0x34
   14920:	beq	14a64 <__assert_fail@plt+0x3b64>
   14924:	mov	r3, r1
   14928:	mov	r1, #1
   1492c:	stm	sp, {r2, ip}
   14930:	movw	r2, #28004	; 0x6d64
   14934:	movt	r2, #1
   14938:	bl	10e58 <__fprintf_chk@plt>
   1493c:	mov	r2, #5
   14940:	movw	r1, #28024	; 0x6d78
   14944:	movt	r1, #1
   14948:	mov	r0, #0
   1494c:	bl	10d38 <dcgettext@plt>
   14950:	movw	ip, #2022	; 0x7e6
   14954:	mov	r3, r0
   14958:	mov	r1, #1
   1495c:	movw	r2, #28752	; 0x7050
   14960:	movt	r2, #1
   14964:	mov	r0, r4
   14968:	str	ip, [sp]
   1496c:	bl	10e58 <__fprintf_chk@plt>
   14970:	mov	r1, r4
   14974:	mov	r0, #10
   14978:	bl	10d2c <fputc_unlocked@plt>
   1497c:	mov	r2, #5
   14980:	movw	r1, #28028	; 0x6d7c
   14984:	movt	r1, #1
   14988:	mov	r0, #0
   1498c:	bl	10d38 <dcgettext@plt>
   14990:	mov	r2, r0
   14994:	mov	r1, #1
   14998:	movw	r3, #28200	; 0x6e28
   1499c:	movt	r3, #1
   149a0:	mov	r0, r4
   149a4:	bl	10e58 <__fprintf_chk@plt>
   149a8:	mov	r1, r4
   149ac:	mov	r0, #10
   149b0:	bl	10d2c <fputc_unlocked@plt>
   149b4:	cmp	r6, #9
   149b8:	ldrls	pc, [pc, r6, lsl #2]
   149bc:	b	14cd0 <__assert_fail@plt+0x3dd0>
   149c0:	andeq	r4, r1, r0, asr sl
   149c4:	andeq	r4, r1, r0, lsl #21
   149c8:			; <UNDEFINED> instruction: 0x00014abc
   149cc:	strdeq	r4, [r1], -ip
   149d0:	andeq	r4, r1, r4, asr #22
   149d4:	andeq	r4, r1, ip, ror fp
   149d8:	andeq	r4, r1, r4, asr #23
   149dc:	andeq	r4, r1, r8, lsl ip
   149e0:	andeq	r4, r1, r0, ror ip
   149e4:	andeq	r4, r1, r8, ror #19
   149e8:	movw	r1, #28504	; 0x6f58
   149ec:	movt	r1, #1
   149f0:	mov	r2, #5
   149f4:	mov	r0, #0
   149f8:	bl	10d38 <dcgettext@plt>
   149fc:	ldr	lr, [r5, #4]
   14a00:	mov	r2, r0
   14a04:	mov	r1, #1
   14a08:	mov	r0, r4
   14a0c:	ldr	r3, [r5, #8]
   14a10:	ldr	ip, [r5, #32]
   14a14:	str	lr, [sp]
   14a18:	ldr	lr, [r5, #12]
   14a1c:	str	ip, [sp, #28]
   14a20:	ldr	ip, [r5, #28]
   14a24:	str	r3, [sp, #4]
   14a28:	ldr	r3, [r5, #16]
   14a2c:	str	lr, [sp, #8]
   14a30:	ldr	lr, [r5, #20]
   14a34:	str	ip, [sp, #24]
   14a38:	ldr	ip, [r5, #24]
   14a3c:	str	r3, [sp, #12]
   14a40:	ldr	r3, [r5]
   14a44:	str	lr, [sp, #16]
   14a48:	str	ip, [sp, #20]
   14a4c:	bl	10e58 <__fprintf_chk@plt>
   14a50:	add	sp, sp, #32
   14a54:	ldrd	r4, [sp]
   14a58:	ldr	r6, [sp, #8]
   14a5c:	add	sp, sp, #12
   14a60:	pop	{pc}		; (ldr pc, [sp], #4)
   14a64:	mov	r3, r2
   14a68:	mov	r1, #1
   14a6c:	str	ip, [sp]
   14a70:	movw	r2, #28016	; 0x6d70
   14a74:	movt	r2, #1
   14a78:	bl	10e58 <__fprintf_chk@plt>
   14a7c:	b	1493c <__assert_fail@plt+0x3a3c>
   14a80:	mov	r2, #5
   14a84:	movw	r1, #28236	; 0x6e4c
   14a88:	movt	r1, #1
   14a8c:	mov	r0, #0
   14a90:	bl	10d38 <dcgettext@plt>
   14a94:	ldr	r3, [r5]
   14a98:	mov	r2, r0
   14a9c:	mov	r1, #1
   14aa0:	mov	r0, r4
   14aa4:	add	sp, sp, #32
   14aa8:	ldrd	r4, [sp]
   14aac:	ldr	r6, [sp, #8]
   14ab0:	ldr	lr, [sp, #12]
   14ab4:	add	sp, sp, #16
   14ab8:	b	10e58 <__fprintf_chk@plt>
   14abc:	mov	r2, #5
   14ac0:	movw	r1, #28252	; 0x6e5c
   14ac4:	movt	r1, #1
   14ac8:	mov	r0, #0
   14acc:	bl	10d38 <dcgettext@plt>
   14ad0:	ldm	r5, {r3, ip}
   14ad4:	mov	r2, r0
   14ad8:	mov	r1, #1
   14adc:	mov	r0, r4
   14ae0:	str	ip, [sp, #48]	; 0x30
   14ae4:	add	sp, sp, #32
   14ae8:	ldrd	r4, [sp]
   14aec:	ldr	r6, [sp, #8]
   14af0:	ldr	lr, [sp, #12]
   14af4:	add	sp, sp, #16
   14af8:	b	10e58 <__fprintf_chk@plt>
   14afc:	mov	r2, #5
   14b00:	movw	r1, #28276	; 0x6e74
   14b04:	movt	r1, #1
   14b08:	mov	r0, #0
   14b0c:	bl	10d38 <dcgettext@plt>
   14b10:	ldm	r5, {r3, lr}
   14b14:	mov	r2, r0
   14b18:	mov	r1, #1
   14b1c:	mov	r0, r4
   14b20:	ldr	ip, [r5, #8]
   14b24:	str	lr, [sp, #48]	; 0x30
   14b28:	str	ip, [sp, #52]	; 0x34
   14b2c:	add	sp, sp, #32
   14b30:	ldrd	r4, [sp]
   14b34:	ldr	r6, [sp, #8]
   14b38:	ldr	lr, [sp, #12]
   14b3c:	add	sp, sp, #16
   14b40:	b	10e58 <__fprintf_chk@plt>
   14b44:	mov	r2, #5
   14b48:	movw	r1, #28304	; 0x6e90
   14b4c:	movt	r1, #1
   14b50:	mov	r0, #0
   14b54:	bl	10d38 <dcgettext@plt>
   14b58:	ldmib	r5, {r3, ip, lr}
   14b5c:	mov	r2, r0
   14b60:	mov	r1, #1
   14b64:	mov	r0, r4
   14b68:	str	r3, [sp]
   14b6c:	ldr	r3, [r5]
   14b70:	stmib	sp, {ip, lr}
   14b74:	bl	10e58 <__fprintf_chk@plt>
   14b78:	b	14a50 <__assert_fail@plt+0x3b50>
   14b7c:	mov	r2, #5
   14b80:	movw	r1, #28336	; 0x6eb0
   14b84:	movt	r1, #1
   14b88:	mov	r0, #0
   14b8c:	bl	10d38 <dcgettext@plt>
   14b90:	ldmib	r5, {ip, lr}
   14b94:	mov	r2, r0
   14b98:	mov	r1, #1
   14b9c:	mov	r0, r4
   14ba0:	ldr	r3, [r5, #16]
   14ba4:	str	ip, [sp]
   14ba8:	ldr	ip, [r5, #12]
   14bac:	str	r3, [sp, #12]
   14bb0:	ldr	r3, [r5]
   14bb4:	str	lr, [sp, #4]
   14bb8:	str	ip, [sp, #8]
   14bbc:	bl	10e58 <__fprintf_chk@plt>
   14bc0:	b	14a50 <__assert_fail@plt+0x3b50>
   14bc4:	mov	r2, #5
   14bc8:	movw	r1, #28372	; 0x6ed4
   14bcc:	movt	r1, #1
   14bd0:	mov	r0, #0
   14bd4:	bl	10d38 <dcgettext@plt>
   14bd8:	ldr	lr, [r5, #4]
   14bdc:	mov	r2, r0
   14be0:	mov	r1, #1
   14be4:	mov	r0, r4
   14be8:	ldr	r3, [r5, #8]
   14bec:	ldr	ip, [r5, #20]
   14bf0:	str	lr, [sp]
   14bf4:	ldr	lr, [r5, #12]
   14bf8:	str	ip, [sp, #16]
   14bfc:	ldr	ip, [r5, #16]
   14c00:	str	r3, [sp, #4]
   14c04:	ldr	r3, [r5]
   14c08:	str	lr, [sp, #8]
   14c0c:	str	ip, [sp, #12]
   14c10:	bl	10e58 <__fprintf_chk@plt>
   14c14:	b	14a50 <__assert_fail@plt+0x3b50>
   14c18:	mov	r2, #5
   14c1c:	movw	r1, #28412	; 0x6efc
   14c20:	movt	r1, #1
   14c24:	mov	r0, #0
   14c28:	bl	10d38 <dcgettext@plt>
   14c2c:	ldmib	r5, {r3, ip}
   14c30:	mov	r2, r0
   14c34:	mov	r1, #1
   14c38:	mov	r0, r4
   14c3c:	ldr	lr, [r5, #24]
   14c40:	str	r3, [sp]
   14c44:	ldr	r3, [r5, #12]
   14c48:	str	lr, [sp, #20]
   14c4c:	ldr	lr, [r5, #20]
   14c50:	str	ip, [sp, #4]
   14c54:	ldr	ip, [r5, #16]
   14c58:	str	r3, [sp, #8]
   14c5c:	ldr	r3, [r5]
   14c60:	str	ip, [sp, #12]
   14c64:	str	lr, [sp, #16]
   14c68:	bl	10e58 <__fprintf_chk@plt>
   14c6c:	b	14a50 <__assert_fail@plt+0x3b50>
   14c70:	mov	r2, #5
   14c74:	movw	r1, #28456	; 0x6f28
   14c78:	movt	r1, #1
   14c7c:	mov	r0, #0
   14c80:	bl	10d38 <dcgettext@plt>
   14c84:	ldmib	r5, {ip, lr}
   14c88:	mov	r2, r0
   14c8c:	mov	r1, #1
   14c90:	mov	r0, r4
   14c94:	ldr	r3, [r5, #28]
   14c98:	str	ip, [sp]
   14c9c:	ldr	ip, [r5, #12]
   14ca0:	str	r3, [sp, #24]
   14ca4:	ldr	r3, [r5, #24]
   14ca8:	str	lr, [sp, #4]
   14cac:	ldr	lr, [r5, #16]
   14cb0:	str	ip, [sp, #8]
   14cb4:	ldr	ip, [r5, #20]
   14cb8:	str	r3, [sp, #20]
   14cbc:	ldr	r3, [r5]
   14cc0:	str	lr, [sp, #12]
   14cc4:	str	ip, [sp, #16]
   14cc8:	bl	10e58 <__fprintf_chk@plt>
   14ccc:	b	14a50 <__assert_fail@plt+0x3b50>
   14cd0:	movw	r1, #28556	; 0x6f8c
   14cd4:	movt	r1, #1
   14cd8:	b	149f0 <__assert_fail@plt+0x3af0>
   14cdc:	strd	r4, [sp, #-12]!
   14ce0:	str	lr, [sp, #8]
   14ce4:	sub	sp, sp, #12
   14ce8:	ldr	r5, [sp, #24]
   14cec:	ldr	ip, [r5]
   14cf0:	cmp	ip, #0
   14cf4:	beq	14d10 <__assert_fail@plt+0x3e10>
   14cf8:	mov	lr, r5
   14cfc:	mov	ip, #0
   14d00:	ldr	r4, [lr, #4]!
   14d04:	add	ip, ip, #1
   14d08:	cmp	r4, #0
   14d0c:	bne	14d00 <__assert_fail@plt+0x3e00>
   14d10:	stm	sp, {r5, ip}
   14d14:	bl	148fc <__assert_fail@plt+0x39fc>
   14d18:	add	sp, sp, #12
   14d1c:	ldrd	r4, [sp]
   14d20:	add	sp, sp, #8
   14d24:	pop	{pc}		; (ldr pc, [sp], #4)
   14d28:	strd	r4, [sp, #-16]!
   14d2c:	mov	ip, #0
   14d30:	str	r6, [sp, #8]
   14d34:	str	lr, [sp, #12]
   14d38:	sub	sp, sp, #48	; 0x30
   14d3c:	ldr	r5, [sp, #64]	; 0x40
   14d40:	add	r6, sp, #8
   14d44:	mov	r4, r6
   14d48:	ldr	lr, [r5], #4
   14d4c:	cmp	lr, #0
   14d50:	str	lr, [r4], #4
   14d54:	beq	14d64 <__assert_fail@plt+0x3e64>
   14d58:	add	ip, ip, #1
   14d5c:	cmp	ip, #10
   14d60:	bne	14d48 <__assert_fail@plt+0x3e48>
   14d64:	stm	sp, {r6, ip}
   14d68:	bl	148fc <__assert_fail@plt+0x39fc>
   14d6c:	add	sp, sp, #48	; 0x30
   14d70:	ldrd	r4, [sp]
   14d74:	ldr	r6, [sp, #8]
   14d78:	add	sp, sp, #12
   14d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d80:	push	{r3}		; (str r3, [sp, #-4]!)
   14d84:	mov	ip, #0
   14d88:	strd	r4, [sp, #-12]!
   14d8c:	str	lr, [sp, #8]
   14d90:	sub	sp, sp, #56	; 0x38
   14d94:	add	r3, sp, #72	; 0x48
   14d98:	add	r5, sp, #16
   14d9c:	mov	r4, r3
   14da0:	mov	lr, r5
   14da4:	str	r3, [sp, #12]
   14da8:	ldr	r3, [r4], #4
   14dac:	cmp	r3, #0
   14db0:	str	r3, [lr], #4
   14db4:	beq	14dc4 <__assert_fail@plt+0x3ec4>
   14db8:	add	ip, ip, #1
   14dbc:	cmp	ip, #10
   14dc0:	bne	14da8 <__assert_fail@plt+0x3ea8>
   14dc4:	ldr	r3, [sp, #68]	; 0x44
   14dc8:	stm	sp, {r5, ip}
   14dcc:	bl	148fc <__assert_fail@plt+0x39fc>
   14dd0:	add	sp, sp, #56	; 0x38
   14dd4:	ldrd	r4, [sp]
   14dd8:	ldr	lr, [sp, #8]
   14ddc:	add	sp, sp, #12
   14de0:	add	sp, sp, #4
   14de4:	bx	lr
   14de8:	movw	r3, #33100	; 0x814c
   14dec:	movt	r3, #2
   14df0:	str	r4, [sp, #-8]!
   14df4:	mov	r0, #10
   14df8:	ldr	r1, [r3]
   14dfc:	str	lr, [sp, #4]
   14e00:	bl	10d2c <fputc_unlocked@plt>
   14e04:	mov	r2, #5
   14e08:	movw	r1, #28616	; 0x6fc8
   14e0c:	movt	r1, #1
   14e10:	mov	r0, #0
   14e14:	bl	10d38 <dcgettext@plt>
   14e18:	mov	r1, r0
   14e1c:	movw	r2, #28636	; 0x6fdc
   14e20:	movt	r2, #1
   14e24:	mov	r0, #1
   14e28:	bl	10e40 <__printf_chk@plt>
   14e2c:	mov	r2, #5
   14e30:	movw	r1, #28660	; 0x6ff4
   14e34:	movt	r1, #1
   14e38:	mov	r0, #0
   14e3c:	bl	10d38 <dcgettext@plt>
   14e40:	mov	r1, r0
   14e44:	movw	r3, #26880	; 0x6900
   14e48:	movt	r3, #1
   14e4c:	movw	r2, #26920	; 0x6928
   14e50:	movt	r2, #1
   14e54:	mov	r0, #1
   14e58:	bl	10e40 <__printf_chk@plt>
   14e5c:	mov	r2, #5
   14e60:	movw	r1, #28680	; 0x7008
   14e64:	movt	r1, #1
   14e68:	mov	r0, #0
   14e6c:	bl	10d38 <dcgettext@plt>
   14e70:	mov	r1, r0
   14e74:	movw	r2, #28720	; 0x7030
   14e78:	movt	r2, #1
   14e7c:	mov	r0, #1
   14e80:	ldr	r4, [sp]
   14e84:	ldr	lr, [sp, #4]
   14e88:	add	sp, sp, #8
   14e8c:	b	10e40 <__printf_chk@plt>
   14e90:	str	r4, [sp, #-8]!
   14e94:	str	lr, [sp, #4]
   14e98:	bl	160fc <__assert_fail@plt+0x51fc>
   14e9c:	cmp	r0, #0
   14ea0:	beq	14eb0 <__assert_fail@plt+0x3fb0>
   14ea4:	ldr	r4, [sp]
   14ea8:	add	sp, sp, #4
   14eac:	pop	{pc}		; (ldr pc, [sp], #4)
   14eb0:	bl	15308 <__assert_fail@plt+0x4408>
   14eb4:	str	r4, [sp, #-8]!
   14eb8:	str	lr, [sp, #4]
   14ebc:	bl	160fc <__assert_fail@plt+0x51fc>
   14ec0:	cmp	r0, #0
   14ec4:	beq	14ed4 <__assert_fail@plt+0x3fd4>
   14ec8:	ldr	r4, [sp]
   14ecc:	add	sp, sp, #4
   14ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ed4:	bl	15308 <__assert_fail@plt+0x4408>
   14ed8:	str	r4, [sp, #-8]!
   14edc:	str	lr, [sp, #4]
   14ee0:	bl	160fc <__assert_fail@plt+0x51fc>
   14ee4:	cmp	r0, #0
   14ee8:	beq	14ef8 <__assert_fail@plt+0x3ff8>
   14eec:	ldr	r4, [sp]
   14ef0:	add	sp, sp, #4
   14ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef8:	bl	15308 <__assert_fail@plt+0x4408>
   14efc:	strd	r4, [sp, #-16]!
   14f00:	mov	r5, r0
   14f04:	mov	r4, r1
   14f08:	str	r6, [sp, #8]
   14f0c:	str	lr, [sp, #12]
   14f10:	bl	16138 <__assert_fail@plt+0x5238>
   14f14:	cmp	r0, #0
   14f18:	beq	14f2c <__assert_fail@plt+0x402c>
   14f1c:	ldrd	r4, [sp]
   14f20:	ldr	r6, [sp, #8]
   14f24:	add	sp, sp, #12
   14f28:	pop	{pc}		; (ldr pc, [sp], #4)
   14f2c:	adds	r4, r4, #0
   14f30:	movne	r4, #1
   14f34:	cmp	r5, #0
   14f38:	moveq	r4, #1
   14f3c:	cmp	r4, #0
   14f40:	beq	14f1c <__assert_fail@plt+0x401c>
   14f44:	bl	15308 <__assert_fail@plt+0x4408>
   14f48:	cmp	r1, #0
   14f4c:	orreq	r1, r1, #1
   14f50:	str	r4, [sp, #-8]!
   14f54:	str	lr, [sp, #4]
   14f58:	bl	16138 <__assert_fail@plt+0x5238>
   14f5c:	cmp	r0, #0
   14f60:	beq	14f70 <__assert_fail@plt+0x4070>
   14f64:	ldr	r4, [sp]
   14f68:	add	sp, sp, #4
   14f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f70:	bl	15308 <__assert_fail@plt+0x4408>
   14f74:	strd	r4, [sp, #-16]!
   14f78:	mov	r4, r0
   14f7c:	mov	r5, r2
   14f80:	str	r6, [sp, #8]
   14f84:	mov	r6, r1
   14f88:	str	lr, [sp, #12]
   14f8c:	bl	162d4 <__assert_fail@plt+0x53d4>
   14f90:	cmp	r0, #0
   14f94:	beq	14fa8 <__assert_fail@plt+0x40a8>
   14f98:	ldrd	r4, [sp]
   14f9c:	ldr	r6, [sp, #8]
   14fa0:	add	sp, sp, #12
   14fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa8:	cmp	r4, #0
   14fac:	beq	14fbc <__assert_fail@plt+0x40bc>
   14fb0:	cmp	r6, #0
   14fb4:	cmpne	r5, #0
   14fb8:	beq	14f98 <__assert_fail@plt+0x4098>
   14fbc:	bl	15308 <__assert_fail@plt+0x4408>
   14fc0:	b	14f74 <__assert_fail@plt+0x4074>
   14fc4:	cmp	r2, #0
   14fc8:	cmpne	r1, #0
   14fcc:	str	r4, [sp, #-8]!
   14fd0:	moveq	r2, #1
   14fd4:	str	lr, [sp, #4]
   14fd8:	moveq	r1, r2
   14fdc:	bl	162d4 <__assert_fail@plt+0x53d4>
   14fe0:	cmp	r0, #0
   14fe4:	beq	14ff4 <__assert_fail@plt+0x40f4>
   14fe8:	ldr	r4, [sp]
   14fec:	add	sp, sp, #4
   14ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff4:	bl	15308 <__assert_fail@plt+0x4408>
   14ff8:	mov	r2, r1
   14ffc:	mov	r1, r0
   15000:	mov	r0, #0
   15004:	b	14f74 <__assert_fail@plt+0x4074>
   15008:	mov	r2, r1
   1500c:	mov	r1, r0
   15010:	mov	r0, #0
   15014:	b	14fc4 <__assert_fail@plt+0x40c4>
   15018:	cmp	r0, #0
   1501c:	strd	r4, [sp, #-16]!
   15020:	mov	r5, r1
   15024:	ldr	r4, [r1]
   15028:	str	r6, [sp, #8]
   1502c:	str	lr, [sp, #12]
   15030:	beq	15060 <__assert_fail@plt+0x4160>
   15034:	lsr	r3, r4, #1
   15038:	add	r3, r3, #1
   1503c:	adds	r4, r4, r3
   15040:	bcs	1507c <__assert_fail@plt+0x417c>
   15044:	mov	r1, r4
   15048:	bl	14f74 <__assert_fail@plt+0x4074>
   1504c:	ldr	r6, [sp, #8]
   15050:	str	r4, [r5]
   15054:	ldrd	r4, [sp]
   15058:	add	sp, sp, #12
   1505c:	pop	{pc}		; (ldr pc, [sp], #4)
   15060:	cmp	r4, #0
   15064:	bne	15044 <__assert_fail@plt+0x4144>
   15068:	mov	r4, #64	; 0x40
   1506c:	udiv	r4, r4, r2
   15070:	cmp	r2, #64	; 0x40
   15074:	addhi	r4, r4, #1
   15078:	b	15044 <__assert_fail@plt+0x4144>
   1507c:	bl	15308 <__assert_fail@plt+0x4408>
   15080:	mov	r2, #1
   15084:	b	15018 <__assert_fail@plt+0x4118>
   15088:	ldr	ip, [r1]
   1508c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15090:	mov	r5, r1
   15094:	strd	r6, [sp, #8]
   15098:	str	lr, [sp, #28]
   1509c:	strd	r8, [sp, #16]
   150a0:	asr	lr, ip, #1
   150a4:	ldr	r8, [sp, #32]
   150a8:	str	sl, [sp, #24]
   150ac:	adds	r4, ip, lr
   150b0:	mvn	lr, r3
   150b4:	lsr	lr, lr, #31
   150b8:	mvnvs	r4, #-2147483648	; 0x80000000
   150bc:	cmp	r3, r4
   150c0:	movge	r1, #0
   150c4:	andlt	r1, lr, #1
   150c8:	cmp	r1, #0
   150cc:	movne	r4, r3
   150d0:	smull	r6, r7, r4, r8
   150d4:	cmp	r7, r6, asr #31
   150d8:	bne	15160 <__assert_fail@plt+0x4260>
   150dc:	cmp	r6, #63	; 0x3f
   150e0:	mov	r1, r6
   150e4:	ble	15148 <__assert_fail@plt+0x4248>
   150e8:	cmp	r0, #0
   150ec:	sub	r6, r4, ip
   150f0:	streq	r0, [r5]
   150f4:	cmp	r6, r2
   150f8:	bge	15128 <__assert_fail@plt+0x4228>
   150fc:	adds	r4, ip, r2
   15100:	bvs	1515c <__assert_fail@plt+0x425c>
   15104:	cmp	r4, r3
   15108:	movle	r3, #0
   1510c:	andgt	r3, lr, #1
   15110:	cmp	r3, #0
   15114:	bne	1515c <__assert_fail@plt+0x425c>
   15118:	smull	r8, r9, r4, r8
   1511c:	cmp	r9, r8, asr #31
   15120:	mov	r1, r8
   15124:	bne	1515c <__assert_fail@plt+0x425c>
   15128:	bl	14efc <__assert_fail@plt+0x3ffc>
   1512c:	ldrd	r6, [sp, #8]
   15130:	ldrd	r8, [sp, #16]
   15134:	ldr	sl, [sp, #24]
   15138:	str	r4, [r5]
   1513c:	ldrd	r4, [sp]
   15140:	add	sp, sp, #28
   15144:	pop	{pc}		; (ldr pc, [sp], #4)
   15148:	mov	r6, #64	; 0x40
   1514c:	sdiv	r4, r6, r8
   15150:	mls	r1, r8, r4, r6
   15154:	sub	r1, r6, r1
   15158:	b	150e8 <__assert_fail@plt+0x41e8>
   1515c:	bl	15308 <__assert_fail@plt+0x4408>
   15160:	mvn	r6, #-2147483648	; 0x80000000
   15164:	b	1514c <__assert_fail@plt+0x424c>
   15168:	mov	r1, #1
   1516c:	str	r4, [sp, #-8]!
   15170:	str	lr, [sp, #4]
   15174:	bl	16088 <__assert_fail@plt+0x5188>
   15178:	cmp	r0, #0
   1517c:	beq	1518c <__assert_fail@plt+0x428c>
   15180:	ldr	r4, [sp]
   15184:	add	sp, sp, #4
   15188:	pop	{pc}		; (ldr pc, [sp], #4)
   1518c:	bl	15308 <__assert_fail@plt+0x4408>
   15190:	mov	r1, #1
   15194:	str	r4, [sp, #-8]!
   15198:	str	lr, [sp, #4]
   1519c:	bl	16088 <__assert_fail@plt+0x5188>
   151a0:	cmp	r0, #0
   151a4:	beq	151b4 <__assert_fail@plt+0x42b4>
   151a8:	ldr	r4, [sp]
   151ac:	add	sp, sp, #4
   151b0:	pop	{pc}		; (ldr pc, [sp], #4)
   151b4:	bl	15308 <__assert_fail@plt+0x4408>
   151b8:	str	r4, [sp, #-8]!
   151bc:	str	lr, [sp, #4]
   151c0:	bl	16088 <__assert_fail@plt+0x5188>
   151c4:	cmp	r0, #0
   151c8:	beq	151d8 <__assert_fail@plt+0x42d8>
   151cc:	ldr	r4, [sp]
   151d0:	add	sp, sp, #4
   151d4:	pop	{pc}		; (ldr pc, [sp], #4)
   151d8:	bl	15308 <__assert_fail@plt+0x4408>
   151dc:	str	r4, [sp, #-8]!
   151e0:	str	lr, [sp, #4]
   151e4:	bl	16088 <__assert_fail@plt+0x5188>
   151e8:	cmp	r0, #0
   151ec:	beq	151fc <__assert_fail@plt+0x42fc>
   151f0:	ldr	r4, [sp]
   151f4:	add	sp, sp, #4
   151f8:	pop	{pc}		; (ldr pc, [sp], #4)
   151fc:	bl	15308 <__assert_fail@plt+0x4408>
   15200:	strd	r4, [sp, #-16]!
   15204:	mov	r4, r1
   15208:	str	r6, [sp, #8]
   1520c:	mov	r6, r0
   15210:	mov	r0, r1
   15214:	str	lr, [sp, #12]
   15218:	bl	160fc <__assert_fail@plt+0x51fc>
   1521c:	subs	r5, r0, #0
   15220:	beq	15244 <__assert_fail@plt+0x4344>
   15224:	mov	r2, r4
   15228:	mov	r1, r6
   1522c:	bl	10cfc <memcpy@plt>
   15230:	mov	r0, r5
   15234:	ldrd	r4, [sp]
   15238:	ldr	r6, [sp, #8]
   1523c:	add	sp, sp, #12
   15240:	pop	{pc}		; (ldr pc, [sp], #4)
   15244:	bl	15308 <__assert_fail@plt+0x4408>
   15248:	strd	r4, [sp, #-16]!
   1524c:	mov	r4, r1
   15250:	str	r6, [sp, #8]
   15254:	mov	r6, r0
   15258:	mov	r0, r1
   1525c:	str	lr, [sp, #12]
   15260:	bl	160fc <__assert_fail@plt+0x51fc>
   15264:	subs	r5, r0, #0
   15268:	beq	1528c <__assert_fail@plt+0x438c>
   1526c:	mov	r2, r4
   15270:	mov	r1, r6
   15274:	bl	10cfc <memcpy@plt>
   15278:	mov	r0, r5
   1527c:	ldrd	r4, [sp]
   15280:	ldr	r6, [sp, #8]
   15284:	add	sp, sp, #12
   15288:	pop	{pc}		; (ldr pc, [sp], #4)
   1528c:	bl	15308 <__assert_fail@plt+0x4408>
   15290:	strd	r4, [sp, #-16]!
   15294:	mov	r4, r1
   15298:	str	r6, [sp, #8]
   1529c:	mov	r6, r0
   152a0:	add	r0, r1, #1
   152a4:	str	lr, [sp, #12]
   152a8:	bl	160fc <__assert_fail@plt+0x51fc>
   152ac:	subs	r5, r0, #0
   152b0:	beq	152dc <__assert_fail@plt+0x43dc>
   152b4:	mov	r3, #0
   152b8:	mov	r1, r6
   152bc:	mov	r2, r4
   152c0:	strb	r3, [r5, r4]
   152c4:	bl	10cfc <memcpy@plt>
   152c8:	mov	r0, r5
   152cc:	ldrd	r4, [sp]
   152d0:	ldr	r6, [sp, #8]
   152d4:	add	sp, sp, #12
   152d8:	pop	{pc}		; (ldr pc, [sp], #4)
   152dc:	bl	15308 <__assert_fail@plt+0x4408>
   152e0:	str	r4, [sp, #-8]!
   152e4:	mov	r4, r0
   152e8:	str	lr, [sp, #4]
   152ec:	bl	10e04 <strlen@plt>
   152f0:	add	r1, r0, #1
   152f4:	mov	r0, r4
   152f8:	ldr	r4, [sp]
   152fc:	ldr	lr, [sp, #4]
   15300:	add	sp, sp, #8
   15304:	b	15200 <__assert_fail@plt+0x4300>
   15308:	movw	r3, #33004	; 0x80ec
   1530c:	movt	r3, #2
   15310:	str	r4, [sp, #-8]!
   15314:	ldr	r4, [r3]
   15318:	mov	r2, #5
   1531c:	movw	r1, #28800	; 0x7080
   15320:	movt	r1, #1
   15324:	mov	r0, #0
   15328:	str	lr, [sp, #4]
   1532c:	bl	10d38 <dcgettext@plt>
   15330:	mov	r3, r0
   15334:	movw	r2, #27140	; 0x6a04
   15338:	movt	r2, #1
   1533c:	mov	r1, #0
   15340:	mov	r0, r4
   15344:	bl	10da4 <error@plt>
   15348:	bl	10ef4 <abort@plt>
   1534c:	cmp	r2, #36	; 0x24
   15350:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15354:	strd	r6, [sp, #8]
   15358:	strd	r8, [sp, #16]
   1535c:	strd	sl, [sp, #24]
   15360:	str	lr, [sp, #32]
   15364:	sub	sp, sp, #44	; 0x2c
   15368:	bhi	15f54 <__assert_fail@plt+0x5054>
   1536c:	cmp	r1, #0
   15370:	mov	r5, r1
   15374:	mov	r6, r2
   15378:	addeq	r5, sp, #36	; 0x24
   1537c:	mov	sl, r0
   15380:	mov	r7, r3
   15384:	bl	10e1c <__errno_location@plt>
   15388:	mov	fp, r0
   1538c:	mov	r4, #0
   15390:	mov	r2, r6
   15394:	mov	r3, r4
   15398:	mov	r1, r5
   1539c:	mov	r0, sl
   153a0:	str	r4, [fp]
   153a4:	bl	10eb8 <__strtoll_internal@plt>
   153a8:	ldr	r6, [r5]
   153ac:	mov	r8, r0
   153b0:	mov	r9, r1
   153b4:	cmp	r6, sl
   153b8:	beq	15410 <__assert_fail@plt+0x4510>
   153bc:	ldr	r4, [fp]
   153c0:	cmp	r4, #0
   153c4:	beq	153d4 <__assert_fail@plt+0x44d4>
   153c8:	cmp	r4, #34	; 0x22
   153cc:	bne	15514 <__assert_fail@plt+0x4614>
   153d0:	mov	r4, #1
   153d4:	ldr	r3, [sp, #80]	; 0x50
   153d8:	cmp	r3, #0
   153dc:	beq	153ec <__assert_fail@plt+0x44ec>
   153e0:	ldrb	sl, [r6]
   153e4:	cmp	sl, #0
   153e8:	bne	15618 <__assert_fail@plt+0x4718>
   153ec:	strd	r8, [r7]
   153f0:	mov	r0, r4
   153f4:	add	sp, sp, #44	; 0x2c
   153f8:	ldrd	r4, [sp]
   153fc:	ldrd	r6, [sp, #8]
   15400:	ldrd	r8, [sp, #16]
   15404:	ldrd	sl, [sp, #24]
   15408:	add	sp, sp, #32
   1540c:	pop	{pc}		; (ldr pc, [sp], #4)
   15410:	ldr	r3, [sp, #80]	; 0x50
   15414:	cmp	r3, r4
   15418:	beq	15514 <__assert_fail@plt+0x4614>
   1541c:	ldrb	sl, [sl]
   15420:	cmp	sl, r4
   15424:	beq	15514 <__assert_fail@plt+0x4614>
   15428:	mov	r1, sl
   1542c:	mov	r0, r3
   15430:	bl	10e10 <strchr@plt>
   15434:	cmp	r0, r4
   15438:	movne	r8, #1
   1543c:	movne	r9, #0
   15440:	beq	15514 <__assert_fail@plt+0x4614>
   15444:	sub	fp, sl, #69	; 0x45
   15448:	cmp	fp, #47	; 0x2f
   1544c:	ldrls	pc, [pc, fp, lsl #2]
   15450:	b	15634 <__assert_fail@plt+0x4734>
   15454:	andeq	r5, r1, ip, lsl r5
   15458:	andeq	r5, r1, r4, lsr r6
   1545c:	andeq	r5, r1, ip, lsl r5
   15460:	andeq	r5, r1, r4, lsr r6
   15464:	andeq	r5, r1, r4, lsr r6
   15468:	andeq	r5, r1, r4, lsr r6
   1546c:	andeq	r5, r1, ip, lsl r5
   15470:	andeq	r5, r1, r4, lsr r6
   15474:	andeq	r5, r1, ip, lsl r5
   15478:	andeq	r5, r1, r4, lsr r6
   1547c:	andeq	r5, r1, r4, lsr r6
   15480:	andeq	r5, r1, ip, lsl r5
   15484:	andeq	r5, r1, r4, lsr r6
   15488:	andeq	r5, r1, r4, lsr r6
   1548c:	andeq	r5, r1, r4, lsr r6
   15490:	andeq	r5, r1, ip, lsl r5
   15494:	andeq	r5, r1, r4, lsr r6
   15498:	andeq	r5, r1, r4, lsr r6
   1549c:	andeq	r5, r1, r4, lsr r6
   154a0:	andeq	r5, r1, r4, lsr r6
   154a4:	andeq	r5, r1, ip, lsl r5
   154a8:	andeq	r5, r1, ip, lsl r5
   154ac:	andeq	r5, r1, r4, lsr r6
   154b0:	andeq	r5, r1, r4, lsr r6
   154b4:	andeq	r5, r1, r4, lsr r6
   154b8:	andeq	r5, r1, r4, lsr r6
   154bc:	andeq	r5, r1, r4, lsr r6
   154c0:	andeq	r5, r1, r4, lsr r6
   154c4:	andeq	r5, r1, r4, lsr r6
   154c8:	andeq	r5, r1, r4, lsr r6
   154cc:	andeq	r5, r1, r4, lsr r6
   154d0:	andeq	r5, r1, r4, lsr r6
   154d4:	andeq	r5, r1, r4, lsr r6
   154d8:	andeq	r5, r1, r4, lsr r6
   154dc:	andeq	r5, r1, ip, lsl r5
   154e0:	andeq	r5, r1, r4, lsr r6
   154e4:	andeq	r5, r1, r4, lsr r6
   154e8:	andeq	r5, r1, r4, lsr r6
   154ec:	andeq	r5, r1, ip, lsl r5
   154f0:	andeq	r5, r1, r4, lsr r6
   154f4:	andeq	r5, r1, ip, lsl r5
   154f8:	andeq	r5, r1, r4, lsr r6
   154fc:	andeq	r5, r1, r4, lsr r6
   15500:	andeq	r5, r1, r4, lsr r6
   15504:	andeq	r5, r1, r4, lsr r6
   15508:	andeq	r5, r1, r4, lsr r6
   1550c:	andeq	r5, r1, r4, lsr r6
   15510:	andeq	r5, r1, ip, lsl r5
   15514:	mov	r4, #4
   15518:	b	153f0 <__assert_fail@plt+0x44f0>
   1551c:	mov	r1, #48	; 0x30
   15520:	ldr	r0, [sp, #80]	; 0x50
   15524:	bl	10e10 <strchr@plt>
   15528:	cmp	r0, #0
   1552c:	beq	15634 <__assert_fail@plt+0x4734>
   15530:	ldrb	r3, [r6, #1]
   15534:	cmp	r3, #68	; 0x44
   15538:	beq	15bfc <__assert_fail@plt+0x4cfc>
   1553c:	cmp	r3, #105	; 0x69
   15540:	beq	15dac <__assert_fail@plt+0x4eac>
   15544:	cmp	r3, #66	; 0x42
   15548:	beq	15bfc <__assert_fail@plt+0x4cfc>
   1554c:	cmp	fp, #47	; 0x2f
   15550:	ldrls	pc, [pc, fp, lsl #2]
   15554:	b	1562c <__assert_fail@plt+0x472c>
   15558:	andeq	r5, r1, r4, asr fp
   1555c:	andeq	r5, r1, ip, lsr #12
   15560:	andeq	r5, r1, r4, asr #22
   15564:	andeq	r5, r1, ip, lsr #12
   15568:	andeq	r5, r1, ip, lsr #12
   1556c:	andeq	r5, r1, ip, lsr #12
   15570:	andeq	r5, r1, r0, asr #23
   15574:	andeq	r5, r1, ip, lsr #12
   15578:			; <UNDEFINED> instruction: 0x00015bb0
   1557c:	andeq	r5, r1, ip, lsr #12
   15580:	andeq	r5, r1, ip, lsr #12
   15584:	andeq	r5, r1, r0, lsl #23
   15588:	andeq	r5, r1, ip, lsr #12
   1558c:	andeq	r5, r1, ip, lsr #12
   15590:	andeq	r5, r1, ip, lsr #12
   15594:	andeq	r5, r1, r0, ror fp
   15598:	andeq	r5, r1, ip, lsr #12
   1559c:	andeq	r5, r1, ip, lsr #12
   155a0:	andeq	r5, r1, ip, lsr #12
   155a4:	andeq	r5, r1, ip, lsr #12
   155a8:	andeq	r5, r1, r0, lsr #23
   155ac:	muleq	r1, r0, fp
   155b0:	andeq	r5, r1, ip, lsr #12
   155b4:	andeq	r5, r1, ip, lsr #12
   155b8:	andeq	r5, r1, ip, lsr #12
   155bc:	andeq	r5, r1, ip, lsr #12
   155c0:	andeq	r5, r1, ip, lsr #12
   155c4:	andeq	r5, r1, ip, lsr #12
   155c8:	andeq	r5, r1, ip, lsr #12
   155cc:	andeq	r5, r1, r4, lsr #14
   155d0:	andeq	r5, r1, r4, ror #22
   155d4:	andeq	r5, r1, ip, lsr #12
   155d8:	andeq	r5, r1, ip, lsr #12
   155dc:	andeq	r5, r1, ip, lsr #12
   155e0:	andeq	r5, r1, r4, asr #22
   155e4:	andeq	r5, r1, ip, lsr #12
   155e8:	andeq	r5, r1, ip, lsr #12
   155ec:	andeq	r5, r1, ip, lsr #12
   155f0:	andeq	r5, r1, r0, asr #23
   155f4:	andeq	r5, r1, ip, lsr #12
   155f8:			; <UNDEFINED> instruction: 0x00015bb0
   155fc:	andeq	r5, r1, ip, lsr #12
   15600:	andeq	r5, r1, ip, lsr #12
   15604:	andeq	r5, r1, ip, lsr #12
   15608:	andeq	r5, r1, ip, lsr #12
   1560c:	andeq	r5, r1, ip, lsr #12
   15610:	andeq	r5, r1, ip, lsr #12
   15614:	andeq	r5, r1, r0, ror fp
   15618:	mov	r1, sl
   1561c:	ldr	r0, [sp, #80]	; 0x50
   15620:	bl	10e10 <strchr@plt>
   15624:	cmp	r0, #0
   15628:	bne	15444 <__assert_fail@plt+0x4544>
   1562c:	orr	r4, r4, #2
   15630:	b	153ec <__assert_fail@plt+0x44ec>
   15634:	mov	r3, #1
   15638:	mov	fp, #1024	; 0x400
   1563c:	sub	sl, sl, #66	; 0x42
   15640:	cmp	sl, #53	; 0x35
   15644:	ldrls	pc, [pc, sl, lsl #2]
   15648:	b	1562c <__assert_fail@plt+0x472c>
   1564c:	andeq	r5, r1, r0, ror r7
   15650:	andeq	r5, r1, ip, lsr #12
   15654:	andeq	r5, r1, ip, lsr #12
   15658:	andeq	r5, r1, ip, asr r9
   1565c:	andeq	r5, r1, ip, lsr #12
   15660:	andeq	r5, r1, r4, ror #17
   15664:	andeq	r5, r1, ip, lsr #12
   15668:	andeq	r5, r1, ip, lsr #12
   1566c:	andeq	r5, r1, ip, lsr #12
   15670:	andeq	r5, r1, r8, lsr #17
   15674:	andeq	r5, r1, ip, lsr #12
   15678:	andeq	r5, r1, ip, asr #16
   1567c:	andeq	r5, r1, ip, lsr #12
   15680:	andeq	r5, r1, ip, lsr #12
   15684:	andeq	r5, r1, ip, asr #20
   15688:	andeq	r5, r1, ip, lsr #12
   1568c:	andeq	r5, r1, ip, lsr #12
   15690:	andeq	r5, r1, ip, lsr #12
   15694:	ldrdeq	r5, [r1], -r4
   15698:	andeq	r5, r1, ip, lsr #12
   1569c:	andeq	r5, r1, ip, lsr #12
   156a0:	andeq	r5, r1, ip, lsr #12
   156a4:	andeq	r5, r1, ip, lsr #12
   156a8:	andeq	r5, r1, r4, asr #21
   156ac:	ldrdeq	r5, [r1], -r4
   156b0:	andeq	r5, r1, ip, lsr #12
   156b4:	andeq	r5, r1, ip, lsr #12
   156b8:	andeq	r5, r1, ip, lsr #12
   156bc:	andeq	r5, r1, ip, lsr #12
   156c0:	andeq	r5, r1, ip, lsr #12
   156c4:	andeq	r5, r1, ip, lsr #12
   156c8:	andeq	r5, r1, ip, lsr #12
   156cc:	andeq	r5, r1, r8, lsr #14
   156d0:	andeq	r5, r1, ip, lsr fp
   156d4:	andeq	r5, r1, ip, lsr #12
   156d8:	andeq	r5, r1, ip, lsr #12
   156dc:	andeq	r5, r1, ip, lsr #12
   156e0:	andeq	r5, r1, r4, ror #17
   156e4:	andeq	r5, r1, ip, lsr #12
   156e8:	andeq	r5, r1, ip, lsr #12
   156ec:	andeq	r5, r1, ip, lsr #12
   156f0:	andeq	r5, r1, r8, lsr #17
   156f4:	andeq	r5, r1, ip, lsr #12
   156f8:	andeq	r5, r1, ip, asr #16
   156fc:	andeq	r5, r1, ip, lsr #12
   15700:	andeq	r5, r1, ip, lsr #12
   15704:	andeq	r5, r1, ip, lsr #12
   15708:	andeq	r5, r1, ip, lsr #12
   1570c:	andeq	r5, r1, ip, lsr #12
   15710:	andeq	r5, r1, ip, lsr #12
   15714:	ldrdeq	r5, [r1], -r4
   15718:	andeq	r5, r1, ip, lsr #12
   1571c:	andeq	r5, r1, ip, lsr #12
   15720:	muleq	r1, r0, r7
   15724:	mov	r3, #1
   15728:	cmp	r9, r8, asr #31
   1572c:	mov	ip, #0
   15730:	str	r3, [sp, #4]
   15734:	bne	15dc4 <__assert_fail@plt+0x4ec4>
   15738:	lsl	r3, r9, #9
   1573c:	lsl	r2, r8, #9
   15740:	orr	r3, r3, r8, lsr #23
   15744:	cmp	ip, #0
   15748:	bne	157b8 <__assert_fail@plt+0x48b8>
   1574c:	mov	r8, r2
   15750:	mov	r9, r3
   15754:	ldr	r2, [sp, #4]
   15758:	add	r3, r6, r2
   1575c:	str	r3, [r5]
   15760:	ldrb	r3, [r6, r2]
   15764:	cmp	r3, #0
   15768:	beq	153ec <__assert_fail@plt+0x44ec>
   1576c:	b	1562c <__assert_fail@plt+0x472c>
   15770:	cmp	r9, r8, asr #31
   15774:	mov	ip, #0
   15778:	str	r3, [sp, #4]
   1577c:	bne	15e0c <__assert_fail@plt+0x4f0c>
   15780:	lsl	r3, r9, #10
   15784:	lsl	r2, r8, #10
   15788:	orr	r3, r3, r8, lsr #22
   1578c:	b	15744 <__assert_fail@plt+0x4844>
   15790:	cmp	r9, r8, asr #31
   15794:	mov	r1, #0
   15798:	str	r3, [sp, #4]
   1579c:	bne	15e90 <__assert_fail@plt+0x4f90>
   157a0:	adds	ip, r8, r8
   157a4:	adc	r3, r9, r9
   157a8:	cmp	r1, #0
   157ac:	moveq	r8, ip
   157b0:	moveq	r9, r3
   157b4:	beq	15754 <__assert_fail@plt+0x4854>
   157b8:	cmp	r8, #0
   157bc:	mov	r4, #1
   157c0:	sbcs	r3, r9, #0
   157c4:	blt	15bf0 <__assert_fail@plt+0x4cf0>
   157c8:	mvn	r8, #0
   157cc:	mvn	r9, #-2147483648	; 0x80000000
   157d0:	b	15754 <__assert_fail@plt+0x4854>
   157d4:	str	r3, [sp, #4]
   157d8:	asr	r1, fp, #31
   157dc:	mov	r0, fp
   157e0:	mov	r3, #0
   157e4:	mov	ip, #7
   157e8:	mov	lr, r3
   157ec:	strd	r0, [sp, #8]
   157f0:	str	r4, [sp, #16]
   157f4:	str	r5, [sp, #24]
   157f8:	b	1580c <__assert_fail@plt+0x490c>
   157fc:	mov	r8, fp
   15800:	mov	r9, r2
   15804:	subs	ip, ip, #1
   15808:	beq	15bd0 <__assert_fail@plt+0x4cd0>
   1580c:	cmp	r9, r8, asr #31
   15810:	mov	r1, #0
   15814:	bne	15d04 <__assert_fail@plt+0x4e04>
   15818:	smull	r2, r3, r8, r0
   1581c:	mov	fp, r2
   15820:	mov	r2, r3
   15824:	cmp	r1, #0
   15828:	beq	157fc <__assert_fail@plt+0x48fc>
   1582c:	cmp	r8, #0
   15830:	mov	lr, #1
   15834:	sbcs	r3, r9, #0
   15838:	mvnge	r8, #0
   1583c:	mvnge	r9, #-2147483648	; 0x80000000
   15840:	movlt	r8, #0
   15844:	movlt	r9, #-2147483648	; 0x80000000
   15848:	b	15804 <__assert_fail@plt+0x4904>
   1584c:	str	r3, [sp, #4]
   15850:	asr	r3, fp, #31
   15854:	mov	r2, fp
   15858:	mov	r1, #0
   1585c:	cmp	r9, r8, asr #31
   15860:	strd	r2, [sp, #8]
   15864:	bne	15e50 <__assert_fail@plt+0x4f50>
   15868:	smull	r2, r3, r8, fp
   1586c:	mov	lr, r2
   15870:	subs	ip, r1, #0
   15874:	bne	157b8 <__assert_fail@plt+0x48b8>
   15878:	cmp	r3, lr, asr #31
   1587c:	mov	r0, lr
   15880:	mov	r1, r3
   15884:	bne	15ee4 <__assert_fail@plt+0x4fe4>
   15888:	smull	r2, r3, lr, fp
   1588c:	mov	sl, r2
   15890:	mov	r2, r3
   15894:	cmp	ip, #0
   15898:	bne	15be0 <__assert_fail@plt+0x4ce0>
   1589c:	mov	r8, sl
   158a0:	mov	r9, r2
   158a4:	b	15754 <__assert_fail@plt+0x4854>
   158a8:	str	r3, [sp, #4]
   158ac:	asr	r3, fp, #31
   158b0:	mov	r2, fp
   158b4:	mov	ip, #0
   158b8:	cmp	r9, r8, asr #31
   158bc:	strd	r2, [sp, #8]
   158c0:	bne	15c78 <__assert_fail@plt+0x4d78>
   158c4:	smull	r2, r3, r8, fp
   158c8:	mov	r1, r2
   158cc:	mov	r2, r3
   158d0:	cmp	ip, #0
   158d4:	bne	157b8 <__assert_fail@plt+0x48b8>
   158d8:	mov	r8, r1
   158dc:	mov	r9, r2
   158e0:	b	15754 <__assert_fail@plt+0x4854>
   158e4:	str	r3, [sp, #4]
   158e8:	asr	r1, fp, #31
   158ec:	mov	r0, fp
   158f0:	mov	r3, #0
   158f4:	mov	ip, #3
   158f8:	mov	lr, r3
   158fc:	strd	r0, [sp, #8]
   15900:	str	r4, [sp, #16]
   15904:	str	r5, [sp, #24]
   15908:	b	1591c <__assert_fail@plt+0x4a1c>
   1590c:	mov	r8, fp
   15910:	mov	r9, r2
   15914:	subs	ip, ip, #1
   15918:	beq	15bd0 <__assert_fail@plt+0x4cd0>
   1591c:	cmp	r9, r8, asr #31
   15920:	mov	r1, #0
   15924:	bne	15c40 <__assert_fail@plt+0x4d40>
   15928:	smull	r2, r3, r8, r0
   1592c:	mov	fp, r2
   15930:	mov	r2, r3
   15934:	cmp	r1, #0
   15938:	beq	1590c <__assert_fail@plt+0x4a0c>
   1593c:	cmp	r8, #0
   15940:	mov	lr, #1
   15944:	sbcs	r3, r9, #0
   15948:	mvnge	r8, #0
   1594c:	mvnge	r9, #-2147483648	; 0x80000000
   15950:	movlt	r8, #0
   15954:	movlt	r9, #-2147483648	; 0x80000000
   15958:	b	15914 <__assert_fail@plt+0x4a14>
   1595c:	str	r3, [sp, #4]
   15960:	asr	r1, fp, #31
   15964:	mov	r0, fp
   15968:	mov	r3, #0
   1596c:	mov	ip, #6
   15970:	mov	lr, r3
   15974:	strd	r0, [sp, #8]
   15978:	str	r4, [sp, #16]
   1597c:	str	r5, [sp, #24]
   15980:	b	15994 <__assert_fail@plt+0x4a94>
   15984:	mov	r8, fp
   15988:	mov	r9, r2
   1598c:	subs	ip, ip, #1
   15990:	beq	15bd0 <__assert_fail@plt+0x4cd0>
   15994:	cmp	r9, r8, asr #31
   15998:	mov	r1, #0
   1599c:	bne	15d74 <__assert_fail@plt+0x4e74>
   159a0:	smull	r2, r3, r8, r0
   159a4:	mov	fp, r2
   159a8:	mov	r2, r3
   159ac:	cmp	r1, #0
   159b0:	beq	15984 <__assert_fail@plt+0x4a84>
   159b4:	cmp	r8, #0
   159b8:	mov	lr, #1
   159bc:	sbcs	r3, r9, #0
   159c0:	mvnge	r8, #0
   159c4:	mvnge	r9, #-2147483648	; 0x80000000
   159c8:	movlt	r8, #0
   159cc:	movlt	r9, #-2147483648	; 0x80000000
   159d0:	b	1598c <__assert_fail@plt+0x4a8c>
   159d4:	str	r3, [sp, #4]
   159d8:	asr	r1, fp, #31
   159dc:	mov	r0, fp
   159e0:	mov	r3, #0
   159e4:	mov	ip, #4
   159e8:	mov	lr, r3
   159ec:	strd	r0, [sp, #8]
   159f0:	str	r4, [sp, #16]
   159f4:	str	r5, [sp, #24]
   159f8:	b	15a0c <__assert_fail@plt+0x4b0c>
   159fc:	mov	r8, fp
   15a00:	mov	r9, r2
   15a04:	subs	ip, ip, #1
   15a08:	beq	15bd0 <__assert_fail@plt+0x4cd0>
   15a0c:	cmp	r9, r8, asr #31
   15a10:	mov	r1, #0
   15a14:	bne	15d3c <__assert_fail@plt+0x4e3c>
   15a18:	smull	r2, r3, r8, r0
   15a1c:	mov	fp, r2
   15a20:	mov	r2, r3
   15a24:	cmp	r1, #0
   15a28:	beq	159fc <__assert_fail@plt+0x4afc>
   15a2c:	cmp	r8, #0
   15a30:	mov	lr, #1
   15a34:	sbcs	r3, r9, #0
   15a38:	mvnge	r8, #0
   15a3c:	mvnge	r9, #-2147483648	; 0x80000000
   15a40:	movlt	r8, #0
   15a44:	movlt	r9, #-2147483648	; 0x80000000
   15a48:	b	15a04 <__assert_fail@plt+0x4b04>
   15a4c:	str	r3, [sp, #4]
   15a50:	asr	r1, fp, #31
   15a54:	mov	r0, fp
   15a58:	mov	r3, #0
   15a5c:	mov	ip, #5
   15a60:	mov	lr, r3
   15a64:	strd	r0, [sp, #8]
   15a68:	str	r4, [sp, #16]
   15a6c:	str	r5, [sp, #24]
   15a70:	b	15a84 <__assert_fail@plt+0x4b84>
   15a74:	mov	r8, fp
   15a78:	mov	r9, r2
   15a7c:	subs	ip, ip, #1
   15a80:	beq	15bd0 <__assert_fail@plt+0x4cd0>
   15a84:	cmp	r9, r8, asr #31
   15a88:	mov	r1, #0
   15a8c:	bne	15ccc <__assert_fail@plt+0x4dcc>
   15a90:	smull	r2, r3, r8, r0
   15a94:	mov	fp, r2
   15a98:	mov	r2, r3
   15a9c:	cmp	r1, #0
   15aa0:	beq	15a74 <__assert_fail@plt+0x4b74>
   15aa4:	cmp	r8, #0
   15aa8:	mov	lr, #1
   15aac:	sbcs	r3, r9, #0
   15ab0:	mvnge	r8, #0
   15ab4:	mvnge	r9, #-2147483648	; 0x80000000
   15ab8:	movlt	r8, #0
   15abc:	movlt	r9, #-2147483648	; 0x80000000
   15ac0:	b	15a7c <__assert_fail@plt+0x4b7c>
   15ac4:	str	r3, [sp, #4]
   15ac8:	asr	r1, fp, #31
   15acc:	mov	r0, fp
   15ad0:	mov	r3, #0
   15ad4:	mov	ip, #8
   15ad8:	mov	lr, r3
   15adc:	strd	r0, [sp, #8]
   15ae0:	str	r4, [sp, #16]
   15ae4:	str	r5, [sp, #24]
   15ae8:	b	15afc <__assert_fail@plt+0x4bfc>
   15aec:	mov	r8, fp
   15af0:	mov	r9, r2
   15af4:	subs	ip, ip, #1
   15af8:	beq	15bd0 <__assert_fail@plt+0x4cd0>
   15afc:	cmp	r9, r8, asr #31
   15b00:	mov	r1, #0
   15b04:	bne	15c08 <__assert_fail@plt+0x4d08>
   15b08:	smull	r2, r3, r8, r0
   15b0c:	mov	fp, r2
   15b10:	mov	r2, r3
   15b14:	cmp	r1, #0
   15b18:	beq	15aec <__assert_fail@plt+0x4bec>
   15b1c:	cmp	r8, #0
   15b20:	mov	lr, #1
   15b24:	sbcs	r3, r9, #0
   15b28:	mvnge	r8, #0
   15b2c:	mvnge	r9, #-2147483648	; 0x80000000
   15b30:	movlt	r8, #0
   15b34:	movlt	r9, #-2147483648	; 0x80000000
   15b38:	b	15af4 <__assert_fail@plt+0x4bf4>
   15b3c:	str	r3, [sp, #4]
   15b40:	b	15754 <__assert_fail@plt+0x4854>
   15b44:	mov	r3, #1
   15b48:	mov	fp, #1024	; 0x400
   15b4c:	str	r3, [sp, #4]
   15b50:	b	158e8 <__assert_fail@plt+0x49e8>
   15b54:	mov	r3, #1
   15b58:	mov	fp, #1024	; 0x400
   15b5c:	str	r3, [sp, #4]
   15b60:	b	15960 <__assert_fail@plt+0x4a60>
   15b64:	mov	r3, #1
   15b68:	str	r3, [sp, #4]
   15b6c:	b	15754 <__assert_fail@plt+0x4854>
   15b70:	mov	r3, #1
   15b74:	mov	fp, #1024	; 0x400
   15b78:	str	r3, [sp, #4]
   15b7c:	b	159d8 <__assert_fail@plt+0x4ad8>
   15b80:	mov	r3, #1
   15b84:	mov	fp, #1024	; 0x400
   15b88:	str	r3, [sp, #4]
   15b8c:	b	15a50 <__assert_fail@plt+0x4b50>
   15b90:	mov	r3, #1
   15b94:	mov	fp, #1024	; 0x400
   15b98:	str	r3, [sp, #4]
   15b9c:	b	157d8 <__assert_fail@plt+0x48d8>
   15ba0:	mov	r3, #1
   15ba4:	mov	fp, #1024	; 0x400
   15ba8:	str	r3, [sp, #4]
   15bac:	b	15ac8 <__assert_fail@plt+0x4bc8>
   15bb0:	mov	r3, #1
   15bb4:	mov	fp, #1024	; 0x400
   15bb8:	str	r3, [sp, #4]
   15bbc:	b	15850 <__assert_fail@plt+0x4950>
   15bc0:	mov	r3, #1
   15bc4:	mov	fp, #1024	; 0x400
   15bc8:	str	r3, [sp, #4]
   15bcc:	b	158ac <__assert_fail@plt+0x49ac>
   15bd0:	ldr	r4, [sp, #16]
   15bd4:	ldr	r5, [sp, #24]
   15bd8:	orr	r4, r4, lr
   15bdc:	b	15754 <__assert_fail@plt+0x4854>
   15be0:	cmp	r0, #0
   15be4:	mov	r4, #1
   15be8:	sbcs	r3, r1, #0
   15bec:	bge	157c8 <__assert_fail@plt+0x48c8>
   15bf0:	mov	r8, #0
   15bf4:	mov	r9, #-2147483648	; 0x80000000
   15bf8:	b	15754 <__assert_fail@plt+0x4854>
   15bfc:	mov	r3, #2
   15c00:	mov	fp, #1000	; 0x3e8
   15c04:	b	1563c <__assert_fail@plt+0x473c>
   15c08:	cmp	r9, #0
   15c0c:	umull	r4, r5, r8, r0
   15c10:	umull	sl, fp, r0, r9
   15c14:	bge	15c24 <__assert_fail@plt+0x4d24>
   15c18:	mov	r3, #0
   15c1c:	subs	sl, sl, r3
   15c20:	sbc	fp, fp, r0
   15c24:	adds	r2, sl, r5
   15c28:	mov	r3, #0
   15c2c:	adc	r3, fp, r3
   15c30:	cmp	r3, r2, asr #31
   15c34:	bne	15fc4 <__assert_fail@plt+0x50c4>
   15c38:	mov	fp, r4
   15c3c:	b	15b14 <__assert_fail@plt+0x4c14>
   15c40:	cmp	r9, #0
   15c44:	umull	r4, r5, r8, r0
   15c48:	umull	sl, fp, r0, r9
   15c4c:	bge	15c5c <__assert_fail@plt+0x4d5c>
   15c50:	mov	r3, #0
   15c54:	subs	sl, sl, r3
   15c58:	sbc	fp, fp, r0
   15c5c:	adds	r2, sl, r5
   15c60:	mov	r3, #0
   15c64:	adc	r3, fp, r3
   15c68:	cmp	r3, r2, asr #31
   15c6c:	bne	15fe4 <__assert_fail@plt+0x50e4>
   15c70:	mov	fp, r4
   15c74:	b	15934 <__assert_fail@plt+0x4a34>
   15c78:	umull	r0, r1, fp, r9
   15c7c:	cmp	r9, #0
   15c80:	umull	r2, r3, r8, fp
   15c84:	strd	r0, [sp, #16]
   15c88:	bge	15ca0 <__assert_fail@plt+0x4da0>
   15c8c:	subs	r1, r0, ip
   15c90:	str	r1, [sp, #16]
   15c94:	ldr	r1, [sp, #20]
   15c98:	sbc	r1, r1, fp
   15c9c:	str	r1, [sp, #20]
   15ca0:	mov	r1, r3
   15ca4:	ldr	r3, [sp, #16]
   15ca8:	mov	r0, r2
   15cac:	mov	lr, #0
   15cb0:	adds	r2, r3, r1
   15cb4:	ldr	r3, [sp, #20]
   15cb8:	adc	lr, r3, lr
   15cbc:	cmp	lr, r2, asr #31
   15cc0:	bne	16044 <__assert_fail@plt+0x5144>
   15cc4:	mov	r1, r0
   15cc8:	b	158d0 <__assert_fail@plt+0x49d0>
   15ccc:	cmp	r9, #0
   15cd0:	umull	r4, r5, r8, r0
   15cd4:	umull	sl, fp, r0, r9
   15cd8:	bge	15ce8 <__assert_fail@plt+0x4de8>
   15cdc:	mov	r3, #0
   15ce0:	subs	sl, sl, r3
   15ce4:	sbc	fp, fp, r0
   15ce8:	adds	r2, sl, r5
   15cec:	mov	r3, #0
   15cf0:	adc	r3, fp, r3
   15cf4:	cmp	r3, r2, asr #31
   15cf8:	bne	15f84 <__assert_fail@plt+0x5084>
   15cfc:	mov	fp, r4
   15d00:	b	15a9c <__assert_fail@plt+0x4b9c>
   15d04:	cmp	r9, #0
   15d08:	umull	r4, r5, r8, r0
   15d0c:	umull	sl, fp, r0, r9
   15d10:	bge	15d20 <__assert_fail@plt+0x4e20>
   15d14:	mov	r3, #0
   15d18:	subs	sl, sl, r3
   15d1c:	sbc	fp, fp, r0
   15d20:	adds	r2, sl, r5
   15d24:	mov	r3, #0
   15d28:	adc	r3, fp, r3
   15d2c:	cmp	r3, r2, asr #31
   15d30:	bne	16004 <__assert_fail@plt+0x5104>
   15d34:	mov	fp, r4
   15d38:	b	15824 <__assert_fail@plt+0x4924>
   15d3c:	cmp	r9, #0
   15d40:	umull	r4, r5, r8, r0
   15d44:	umull	sl, fp, r0, r9
   15d48:	bge	15d58 <__assert_fail@plt+0x4e58>
   15d4c:	mov	r3, #0
   15d50:	subs	sl, sl, r3
   15d54:	sbc	fp, fp, r0
   15d58:	adds	r2, sl, r5
   15d5c:	mov	r3, #0
   15d60:	adc	r3, fp, r3
   15d64:	cmp	r3, r2, asr #31
   15d68:	bne	16024 <__assert_fail@plt+0x5124>
   15d6c:	mov	fp, r4
   15d70:	b	15a24 <__assert_fail@plt+0x4b24>
   15d74:	cmp	r9, #0
   15d78:	umull	r4, r5, r8, r0
   15d7c:	umull	sl, fp, r0, r9
   15d80:	bge	15d90 <__assert_fail@plt+0x4e90>
   15d84:	mov	r3, #0
   15d88:	subs	sl, sl, r3
   15d8c:	sbc	fp, fp, r0
   15d90:	adds	r2, sl, r5
   15d94:	mov	r3, #0
   15d98:	adc	r3, fp, r3
   15d9c:	cmp	r3, r2, asr #31
   15da0:	bne	15fa4 <__assert_fail@plt+0x50a4>
   15da4:	mov	fp, r4
   15da8:	b	159ac <__assert_fail@plt+0x4aac>
   15dac:	ldrb	r3, [r6, #2]
   15db0:	mov	fp, #1024	; 0x400
   15db4:	cmp	r3, #66	; 0x42
   15db8:	movne	r3, #1
   15dbc:	moveq	r3, #3
   15dc0:	b	1563c <__assert_fail@plt+0x473c>
   15dc4:	mov	lr, #512	; 0x200
   15dc8:	cmp	r9, #0
   15dcc:	lsr	r3, r8, #23
   15dd0:	lsl	r2, r8, #9
   15dd4:	umull	r0, r1, lr, r9
   15dd8:	bge	15de4 <__assert_fail@plt+0x4ee4>
   15ddc:	subs	r0, r0, ip
   15de0:	sbc	r1, r1, lr
   15de4:	adds	r3, r0, r3
   15de8:	mov	lr, #0
   15dec:	adc	r1, r1, lr
   15df0:	cmp	r1, r3, asr #31
   15df4:	beq	15744 <__assert_fail@plt+0x4844>
   15df8:	lsl	r3, r9, #9
   15dfc:	mov	ip, #1
   15e00:	lsl	r2, r8, #9
   15e04:	orr	r3, r3, r8, lsr #23
   15e08:	b	15744 <__assert_fail@plt+0x4844>
   15e0c:	mov	lr, #1024	; 0x400
   15e10:	cmp	r9, #0
   15e14:	lsr	r3, r8, #22
   15e18:	lsl	r2, r8, #10
   15e1c:	umull	r0, r1, lr, r9
   15e20:	bge	15e2c <__assert_fail@plt+0x4f2c>
   15e24:	subs	r0, r0, ip
   15e28:	sbc	r1, r1, lr
   15e2c:	adds	r3, r0, r3
   15e30:	mov	lr, #0
   15e34:	adc	r1, r1, lr
   15e38:	cmp	r1, r3, asr #31
   15e3c:	lslne	r3, r9, #10
   15e40:	movne	ip, #1
   15e44:	lslne	r2, r8, #10
   15e48:	orrne	r3, r3, r8, lsr #22
   15e4c:	b	15744 <__assert_fail@plt+0x4844>
   15e50:	umull	r2, r3, r8, fp
   15e54:	cmp	r9, #0
   15e58:	strd	r2, [sp, #16]
   15e5c:	umull	r2, r3, fp, r9
   15e60:	bge	15e6c <__assert_fail@plt+0x4f6c>
   15e64:	subs	r2, r2, r1
   15e68:	sbc	r3, r3, fp
   15e6c:	ldr	r0, [sp, #20]
   15e70:	mov	ip, #0
   15e74:	adds	r0, r2, r0
   15e78:	adc	ip, r3, ip
   15e7c:	cmp	ip, r0, asr #31
   15e80:	bne	16064 <__assert_fail@plt+0x5164>
   15e84:	mov	r3, r0
   15e88:	ldr	lr, [sp, #16]
   15e8c:	b	15870 <__assert_fail@plt+0x4970>
   15e90:	mov	lr, #2
   15e94:	mov	r3, #0
   15e98:	adds	ip, r8, r8
   15e9c:	adc	r0, r3, r3
   15ea0:	umull	r2, r3, lr, r9
   15ea4:	cmp	r9, #0
   15ea8:	strd	r2, [sp, #8]
   15eac:	bge	15ec4 <__assert_fail@plt+0x4fc4>
   15eb0:	subs	r3, r2, r1
   15eb4:	str	r3, [sp, #8]
   15eb8:	ldr	r3, [sp, #12]
   15ebc:	sbc	r3, r3, lr
   15ec0:	str	r3, [sp, #12]
   15ec4:	ldrd	sl, [sp, #8]
   15ec8:	mov	lr, #0
   15ecc:	adds	r2, sl, r0
   15ed0:	adc	r3, fp, lr
   15ed4:	cmp	r3, r2, asr #31
   15ed8:	bne	15f74 <__assert_fail@plt+0x5074>
   15edc:	mov	r3, r2
   15ee0:	b	157a8 <__assert_fail@plt+0x48a8>
   15ee4:	cmp	r3, #0
   15ee8:	umull	r8, r9, lr, fp
   15eec:	umull	r2, r3, fp, r3
   15ef0:	strd	r2, [sp, #16]
   15ef4:	strd	r8, [sp, #24]
   15ef8:	bge	15f10 <__assert_fail@plt+0x5010>
   15efc:	subs	r3, r2, ip
   15f00:	str	r3, [sp, #16]
   15f04:	ldr	r3, [sp, #20]
   15f08:	sbc	r3, r3, fp
   15f0c:	str	r3, [sp, #20]
   15f10:	ldr	r3, [sp, #16]
   15f14:	mov	lr, #0
   15f18:	ldrd	sl, [sp, #24]
   15f1c:	adds	r2, r3, fp
   15f20:	ldr	r3, [sp, #20]
   15f24:	adc	lr, r3, lr
   15f28:	cmp	lr, r2, asr #31
   15f2c:	beq	15894 <__assert_fail@plt+0x4994>
   15f30:	ldrd	r8, [sp, #8]
   15f34:	mov	ip, #1
   15f38:	mul	lr, r0, r9
   15f3c:	umull	r2, r3, r0, r8
   15f40:	mla	lr, r8, r1, lr
   15f44:	mov	sl, r2
   15f48:	add	r3, lr, r3
   15f4c:	mov	r2, r3
   15f50:	b	15894 <__assert_fail@plt+0x4994>
   15f54:	movw	r3, #28820	; 0x7094
   15f58:	movt	r3, #1
   15f5c:	movw	r1, #28832	; 0x70a0
   15f60:	movt	r1, #1
   15f64:	movw	r0, #28848	; 0x70b0
   15f68:	movt	r0, #1
   15f6c:	mov	r2, #85	; 0x55
   15f70:	bl	10f00 <__assert_fail@plt>
   15f74:	adds	ip, r8, r8
   15f78:	mov	r1, #1
   15f7c:	adc	r3, r9, r9
   15f80:	b	157a8 <__assert_fail@plt+0x48a8>
   15f84:	ldrd	r4, [sp, #8]
   15f88:	mov	r1, #1
   15f8c:	mul	sl, r8, r5
   15f90:	umull	r2, r3, r8, r4
   15f94:	mla	sl, r4, r9, sl
   15f98:	mov	fp, r2
   15f9c:	add	r2, sl, r3
   15fa0:	b	15a9c <__assert_fail@plt+0x4b9c>
   15fa4:	ldrd	r4, [sp, #8]
   15fa8:	mov	r1, #1
   15fac:	mul	sl, r8, r5
   15fb0:	umull	r2, r3, r8, r4
   15fb4:	mla	sl, r4, r9, sl
   15fb8:	mov	fp, r2
   15fbc:	add	r2, sl, r3
   15fc0:	b	159ac <__assert_fail@plt+0x4aac>
   15fc4:	ldrd	r4, [sp, #8]
   15fc8:	mov	r1, #1
   15fcc:	mul	sl, r8, r5
   15fd0:	umull	r2, r3, r8, r4
   15fd4:	mla	sl, r4, r9, sl
   15fd8:	mov	fp, r2
   15fdc:	add	r2, sl, r3
   15fe0:	b	15b14 <__assert_fail@plt+0x4c14>
   15fe4:	ldrd	r4, [sp, #8]
   15fe8:	mov	r1, #1
   15fec:	mul	sl, r8, r5
   15ff0:	umull	r2, r3, r8, r4
   15ff4:	mla	sl, r4, r9, sl
   15ff8:	mov	fp, r2
   15ffc:	add	r2, sl, r3
   16000:	b	15934 <__assert_fail@plt+0x4a34>
   16004:	ldrd	r4, [sp, #8]
   16008:	mov	r1, #1
   1600c:	mul	sl, r8, r5
   16010:	umull	r2, r3, r8, r4
   16014:	mla	sl, r4, r9, sl
   16018:	mov	fp, r2
   1601c:	add	r2, sl, r3
   16020:	b	15824 <__assert_fail@plt+0x4924>
   16024:	ldrd	r4, [sp, #8]
   16028:	mov	r1, #1
   1602c:	mul	sl, r8, r5
   16030:	umull	r2, r3, r8, r4
   16034:	mla	sl, r4, r9, sl
   16038:	mov	fp, r2
   1603c:	add	r2, sl, r3
   16040:	b	15a24 <__assert_fail@plt+0x4b24>
   16044:	ldrd	sl, [sp, #8]
   16048:	mov	ip, #1
   1604c:	mul	r1, r8, fp
   16050:	umull	r2, r3, r8, sl
   16054:	mla	r0, sl, r9, r1
   16058:	mov	r1, r2
   1605c:	add	r2, r0, r3
   16060:	b	158d0 <__assert_fail@plt+0x49d0>
   16064:	ldrd	r2, [sp, #8]
   16068:	mov	r1, #1
   1606c:	ldr	ip, [sp, #8]
   16070:	mul	r0, r8, r3
   16074:	umull	r2, r3, r8, r2
   16078:	mla	r0, ip, r9, r0
   1607c:	mov	lr, r2
   16080:	add	r3, r0, r3
   16084:	b	15870 <__assert_fail@plt+0x4970>
   16088:	cmp	r1, #0
   1608c:	cmpne	r0, #0
   16090:	beq	160dc <__assert_fail@plt+0x51dc>
   16094:	strd	r4, [sp, #-16]!
   16098:	umull	r4, r5, r0, r1
   1609c:	str	r6, [sp, #8]
   160a0:	str	lr, [sp, #12]
   160a4:	adds	r3, r5, #0
   160a8:	movne	r3, #1
   160ac:	cmp	r4, #0
   160b0:	blt	160bc <__assert_fail@plt+0x51bc>
   160b4:	cmp	r3, #0
   160b8:	beq	160e8 <__assert_fail@plt+0x51e8>
   160bc:	bl	10e1c <__errno_location@plt>
   160c0:	mov	r3, #12
   160c4:	ldrd	r4, [sp]
   160c8:	ldr	r6, [sp, #8]
   160cc:	add	sp, sp, #12
   160d0:	str	r3, [r0]
   160d4:	mov	r0, #0
   160d8:	pop	{pc}		; (ldr pc, [sp], #4)
   160dc:	mov	r1, #1
   160e0:	mov	r0, r1
   160e4:	b	10c9c <calloc@plt>
   160e8:	ldrd	r4, [sp]
   160ec:	ldr	r6, [sp, #8]
   160f0:	ldr	lr, [sp, #12]
   160f4:	add	sp, sp, #16
   160f8:	b	10c9c <calloc@plt>
   160fc:	cmp	r0, #0
   16100:	beq	1610c <__assert_fail@plt+0x520c>
   16104:	blt	16114 <__assert_fail@plt+0x5214>
   16108:	b	10db0 <malloc@plt>
   1610c:	mov	r0, #1
   16110:	b	10db0 <malloc@plt>
   16114:	str	r4, [sp, #-8]!
   16118:	str	lr, [sp, #4]
   1611c:	bl	10e1c <__errno_location@plt>
   16120:	mov	r3, #12
   16124:	ldr	r4, [sp]
   16128:	add	sp, sp, #4
   1612c:	str	r3, [r0]
   16130:	mov	r0, #0
   16134:	pop	{pc}		; (ldr pc, [sp], #4)
   16138:	cmp	r0, #0
   1613c:	beq	16164 <__assert_fail@plt+0x5264>
   16140:	cmp	r1, #0
   16144:	str	r4, [sp, #-8]!
   16148:	str	lr, [sp, #4]
   1614c:	beq	1616c <__assert_fail@plt+0x526c>
   16150:	blt	16180 <__assert_fail@plt+0x5280>
   16154:	ldr	r4, [sp]
   16158:	ldr	lr, [sp, #4]
   1615c:	add	sp, sp, #8
   16160:	b	10d44 <realloc@plt>
   16164:	mov	r0, r1
   16168:	b	160fc <__assert_fail@plt+0x51fc>
   1616c:	bl	124c4 <__assert_fail@plt+0x15c4>
   16170:	ldr	r4, [sp]
   16174:	add	sp, sp, #4
   16178:	mov	r0, #0
   1617c:	pop	{pc}		; (ldr pc, [sp], #4)
   16180:	bl	10e1c <__errno_location@plt>
   16184:	mov	r3, #12
   16188:	str	r3, [r0]
   1618c:	b	16170 <__assert_fail@plt+0x5270>
   16190:	strd	r4, [sp, #-16]!
   16194:	mov	r4, r0
   16198:	str	r6, [sp, #8]
   1619c:	str	lr, [sp, #12]
   161a0:	bl	10d8c <__fpending@plt>
   161a4:	ldr	r5, [r4]
   161a8:	mov	r6, r0
   161ac:	mov	r0, r4
   161b0:	bl	123b0 <__assert_fail@plt+0x14b0>
   161b4:	mov	r4, r0
   161b8:	and	r5, r5, #32
   161bc:	cmp	r5, #0
   161c0:	bne	161f8 <__assert_fail@plt+0x52f8>
   161c4:	cmp	r0, #0
   161c8:	beq	161e4 <__assert_fail@plt+0x52e4>
   161cc:	cmp	r6, #0
   161d0:	bne	16210 <__assert_fail@plt+0x5310>
   161d4:	bl	10e1c <__errno_location@plt>
   161d8:	ldr	r4, [r0]
   161dc:	subs	r4, r4, #9
   161e0:	mvnne	r4, #0
   161e4:	mov	r0, r4
   161e8:	ldrd	r4, [sp]
   161ec:	ldr	r6, [sp, #8]
   161f0:	add	sp, sp, #12
   161f4:	pop	{pc}		; (ldr pc, [sp], #4)
   161f8:	cmp	r0, #0
   161fc:	bne	16210 <__assert_fail@plt+0x5310>
   16200:	bl	10e1c <__errno_location@plt>
   16204:	str	r4, [r0]
   16208:	mvn	r4, #0
   1620c:	b	161e4 <__assert_fail@plt+0x52e4>
   16210:	mvn	r4, #0
   16214:	b	161e4 <__assert_fail@plt+0x52e4>
   16218:	mov	r0, #14
   1621c:	str	r4, [sp, #-8]!
   16220:	str	lr, [sp, #4]
   16224:	bl	10eac <nl_langinfo@plt>
   16228:	cmp	r0, #0
   1622c:	beq	16250 <__assert_fail@plt+0x5350>
   16230:	ldrb	r2, [r0]
   16234:	movw	r3, #28888	; 0x70d8
   16238:	movt	r3, #1
   1623c:	ldr	r4, [sp]
   16240:	add	sp, sp, #4
   16244:	cmp	r2, #0
   16248:	moveq	r0, r3
   1624c:	pop	{pc}		; (ldr pc, [sp], #4)
   16250:	ldr	r4, [sp]
   16254:	add	sp, sp, #4
   16258:	movw	r0, #28888	; 0x70d8
   1625c:	movt	r0, #1
   16260:	pop	{pc}		; (ldr pc, [sp], #4)
   16264:	strd	r4, [sp, #-20]!	; 0xffffffec
   16268:	mov	r5, r2
   1626c:	strd	r6, [sp, #8]
   16270:	subs	r6, r0, #0
   16274:	mov	r7, r1
   16278:	str	lr, [sp, #16]
   1627c:	sub	sp, sp, #12
   16280:	addeq	r6, sp, #4
   16284:	mov	r0, r6
   16288:	bl	10d98 <mbrtowc@plt>
   1628c:	cmp	r5, #0
   16290:	cmnne	r0, #3
   16294:	mov	r4, r0
   16298:	bhi	162b4 <__assert_fail@plt+0x53b4>
   1629c:	mov	r0, r4
   162a0:	add	sp, sp, #12
   162a4:	ldrd	r4, [sp]
   162a8:	ldrd	r6, [sp, #8]
   162ac:	add	sp, sp, #16
   162b0:	pop	{pc}		; (ldr pc, [sp], #4)
   162b4:	mov	r0, #0
   162b8:	bl	1630c <__assert_fail@plt+0x540c>
   162bc:	cmp	r0, #0
   162c0:	bne	1629c <__assert_fail@plt+0x539c>
   162c4:	ldrb	r3, [r7]
   162c8:	mov	r4, #1
   162cc:	str	r3, [r6]
   162d0:	b	1629c <__assert_fail@plt+0x539c>
   162d4:	umull	r2, r3, r1, r2
   162d8:	cmp	r3, #0
   162dc:	bne	162e8 <__assert_fail@plt+0x53e8>
   162e0:	mov	r1, r2
   162e4:	b	16138 <__assert_fail@plt+0x5238>
   162e8:	str	r4, [sp, #-8]!
   162ec:	str	lr, [sp, #4]
   162f0:	bl	10e1c <__errno_location@plt>
   162f4:	mov	r3, #12
   162f8:	ldr	r4, [sp]
   162fc:	add	sp, sp, #4
   16300:	str	r3, [r0]
   16304:	mov	r0, #0
   16308:	pop	{pc}		; (ldr pc, [sp], #4)
   1630c:	push	{lr}		; (str lr, [sp, #-4]!)
   16310:	sub	sp, sp, #268	; 0x10c
   16314:	movw	r2, #257	; 0x101
   16318:	add	r1, sp, #4
   1631c:	bl	16364 <__assert_fail@plt+0x5464>
   16320:	cmp	r0, #0
   16324:	movne	r0, #0
   16328:	bne	1635c <__assert_fail@plt+0x545c>
   1632c:	movw	r1, #28896	; 0x70e0
   16330:	movt	r1, #1
   16334:	add	r0, sp, #4
   16338:	bl	10cb4 <strcmp@plt>
   1633c:	cmp	r0, #0
   16340:	beq	1635c <__assert_fail@plt+0x545c>
   16344:	add	r0, sp, #4
   16348:	movw	r1, #28900	; 0x70e4
   1634c:	movt	r1, #1
   16350:	bl	10cb4 <strcmp@plt>
   16354:	adds	r0, r0, #0
   16358:	movne	r0, #1
   1635c:	add	sp, sp, #268	; 0x10c
   16360:	pop	{pc}		; (ldr pc, [sp], #4)
   16364:	strd	r4, [sp, #-16]!
   16368:	mov	r5, r1
   1636c:	mov	r1, #0
   16370:	mov	r4, r2
   16374:	str	r6, [sp, #8]
   16378:	str	lr, [sp, #12]
   1637c:	bl	10e94 <setlocale@plt>
   16380:	subs	r6, r0, #0
   16384:	beq	16404 <__assert_fail@plt+0x5504>
   16388:	bl	10e04 <strlen@plt>
   1638c:	cmp	r4, r0
   16390:	bhi	163b0 <__assert_fail@plt+0x54b0>
   16394:	cmp	r4, #0
   16398:	moveq	r0, #34	; 0x22
   1639c:	bne	163d4 <__assert_fail@plt+0x54d4>
   163a0:	ldrd	r4, [sp]
   163a4:	ldr	r6, [sp, #8]
   163a8:	add	sp, sp, #12
   163ac:	pop	{pc}		; (ldr pc, [sp], #4)
   163b0:	add	r2, r0, #1
   163b4:	mov	r1, r6
   163b8:	mov	r0, r5
   163bc:	bl	10cfc <memcpy@plt>
   163c0:	ldrd	r4, [sp]
   163c4:	mov	r0, #0
   163c8:	ldr	r6, [sp, #8]
   163cc:	add	sp, sp, #12
   163d0:	pop	{pc}		; (ldr pc, [sp], #4)
   163d4:	sub	r4, r4, #1
   163d8:	mov	r1, r6
   163dc:	mov	r2, r4
   163e0:	mov	r0, r5
   163e4:	bl	10cfc <memcpy@plt>
   163e8:	mov	r3, #0
   163ec:	mov	r0, #34	; 0x22
   163f0:	strb	r3, [r5, r4]
   163f4:	ldrd	r4, [sp]
   163f8:	ldr	r6, [sp, #8]
   163fc:	add	sp, sp, #12
   16400:	pop	{pc}		; (ldr pc, [sp], #4)
   16404:	cmp	r4, #0
   16408:	mov	r0, #22
   1640c:	strbne	r6, [r5]
   16410:	ldrd	r4, [sp]
   16414:	ldr	r6, [sp, #8]
   16418:	add	sp, sp, #12
   1641c:	pop	{pc}		; (ldr pc, [sp], #4)
   16420:	mov	r1, #0
   16424:	b	10e94 <setlocale@plt>
   16428:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1642c:	mov	r7, r0
   16430:	ldr	r6, [pc, #72]	; 16480 <__assert_fail@plt+0x5580>
   16434:	ldr	r5, [pc, #72]	; 16484 <__assert_fail@plt+0x5584>
   16438:	add	r6, pc, r6
   1643c:	add	r5, pc, r5
   16440:	sub	r6, r6, r5
   16444:	mov	r8, r1
   16448:	mov	r9, r2
   1644c:	bl	10c7c <calloc@plt-0x20>
   16450:	asrs	r6, r6, #2
   16454:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16458:	mov	r4, #0
   1645c:	add	r4, r4, #1
   16460:	ldr	r3, [r5], #4
   16464:	mov	r2, r9
   16468:	mov	r1, r8
   1646c:	mov	r0, r7
   16470:	blx	r3
   16474:	cmp	r6, r4
   16478:	bne	1645c <__assert_fail@plt+0x555c>
   1647c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16480:	ldrdeq	r1, [r1], -r4
   16484:	andeq	r1, r1, ip, asr #21
   16488:	bx	lr
   1648c:	ldr	r3, [pc, #12]	; 164a0 <__assert_fail@plt+0x55a0>
   16490:	mov	r1, #0
   16494:	add	r3, pc, r3
   16498:	ldr	r2, [r3]
   1649c:	b	10e28 <__cxa_atexit@plt>
   164a0:	andeq	r1, r1, r8, asr #24

Disassembly of section .fini:

000164a4 <.fini>:
   164a4:	push	{r3, lr}
   164a8:	pop	{r3, pc}
