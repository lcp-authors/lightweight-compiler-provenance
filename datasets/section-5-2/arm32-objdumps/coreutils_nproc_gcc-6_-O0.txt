
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010c50 <.init>:
   10c50:	push	{r3, lr}
   10c54:	bl	10f1c <__assert_fail@plt+0x48>
   10c58:	pop	{r3, pc}

Disassembly of section .plt:

00010c5c <calloc@plt-0x14>:
   10c5c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c60:	ldr	lr, [pc, #4]	; 10c6c <calloc@plt-0x4>
   10c64:	add	lr, pc, lr
   10c68:	ldr	pc, [lr, #8]!
   10c6c:	muleq	r1, r4, r3

00010c70 <calloc@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #94208	; 0x17000
   10c78:	ldr	pc, [ip, #916]!	; 0x394

00010c7c <fputs_unlocked@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #94208	; 0x17000
   10c84:	ldr	pc, [ip, #908]!	; 0x38c

00010c88 <raise@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #94208	; 0x17000
   10c90:	ldr	pc, [ip, #900]!	; 0x384

00010c94 <strcmp@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #94208	; 0x17000
   10c9c:	ldr	pc, [ip, #892]!	; 0x37c

00010ca0 <printf@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #94208	; 0x17000
   10ca8:	ldr	pc, [ip, #884]!	; 0x374

00010cac <fflush@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #94208	; 0x17000
   10cb4:	ldr	pc, [ip, #876]!	; 0x36c

00010cb8 <free@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #94208	; 0x17000
   10cc0:	ldr	pc, [ip, #868]!	; 0x364

00010cc4 <_exit@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #94208	; 0x17000
   10ccc:	ldr	pc, [ip, #860]!	; 0x35c

00010cd0 <memcpy@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #94208	; 0x17000
   10cd8:	ldr	pc, [ip, #852]!	; 0x354

00010cdc <mbsinit@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #94208	; 0x17000
   10ce4:	ldr	pc, [ip, #844]!	; 0x34c

00010ce8 <__sched_cpucount@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #94208	; 0x17000
   10cf0:	ldr	pc, [ip, #836]!	; 0x344

00010cf4 <memcmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #94208	; 0x17000
   10cfc:	ldr	pc, [ip, #828]!	; 0x33c

00010d00 <fputc_unlocked@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #94208	; 0x17000
   10d08:	ldr	pc, [ip, #820]!	; 0x334

00010d0c <sysconf@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #94208	; 0x17000
   10d14:	ldr	pc, [ip, #812]!	; 0x32c

00010d18 <realloc@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #94208	; 0x17000
   10d20:	ldr	pc, [ip, #804]!	; 0x324

00010d24 <textdomain@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #94208	; 0x17000
   10d2c:	ldr	pc, [ip, #796]!	; 0x31c

00010d30 <iswprint@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #94208	; 0x17000
   10d38:	ldr	pc, [ip, #788]!	; 0x314

00010d3c <fwrite@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #94208	; 0x17000
   10d44:	ldr	pc, [ip, #780]!	; 0x30c

00010d48 <lseek64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #94208	; 0x17000
   10d50:	ldr	pc, [ip, #772]!	; 0x304

00010d54 <__ctype_get_mb_cur_max@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #94208	; 0x17000
   10d5c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d60 <__fpending@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #94208	; 0x17000
   10d68:	ldr	pc, [ip, #756]!	; 0x2f4

00010d6c <ferror_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #94208	; 0x17000
   10d74:	ldr	pc, [ip, #748]!	; 0x2ec

00010d78 <mbrtowc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #94208	; 0x17000
   10d80:	ldr	pc, [ip, #740]!	; 0x2e4

00010d84 <error@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #94208	; 0x17000
   10d8c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d90 <getenv@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #94208	; 0x17000
   10d98:	ldr	pc, [ip, #724]!	; 0x2d4

00010d9c <malloc@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #94208	; 0x17000
   10da4:	ldr	pc, [ip, #716]!	; 0x2cc

00010da8 <__libc_start_main@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #94208	; 0x17000
   10db0:	ldr	pc, [ip, #708]!	; 0x2c4

00010db4 <__freading@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #94208	; 0x17000
   10dbc:	ldr	pc, [ip, #700]!	; 0x2bc

00010dc0 <__gmon_start__@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #94208	; 0x17000
   10dc8:	ldr	pc, [ip, #692]!	; 0x2b4

00010dcc <getopt_long@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #94208	; 0x17000
   10dd4:	ldr	pc, [ip, #684]!	; 0x2ac

00010dd8 <__ctype_b_loc@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #94208	; 0x17000
   10de0:	ldr	pc, [ip, #676]!	; 0x2a4

00010de4 <exit@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #94208	; 0x17000
   10dec:	ldr	pc, [ip, #668]!	; 0x29c

00010df0 <gettext@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #660]!	; 0x294

00010dfc <strtoul@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #652]!	; 0x28c

00010e08 <strlen@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #644]!	; 0x284

00010e14 <strchr@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #636]!	; 0x27c

00010e20 <fprintf@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #628]!	; 0x274

00010e2c <__errno_location@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #620]!	; 0x26c

00010e38 <__cxa_atexit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #612]!	; 0x264

00010e44 <memset@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #604]!	; 0x25c

00010e50 <fileno@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #596]!	; 0x254

00010e5c <strtoumax@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #588]!	; 0x24c

00010e68 <fclose@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #580]!	; 0x244

00010e74 <fseeko64@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #572]!	; 0x23c

00010e80 <setlocale@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #564]!	; 0x234

00010e8c <strrchr@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #556]!	; 0x22c

00010e98 <nl_langinfo@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #548]!	; 0x224

00010ea4 <sched_getaffinity@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #540]!	; 0x21c

00010eb0 <bindtextdomain@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #532]!	; 0x214

00010ebc <strncmp@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #524]!	; 0x20c

00010ec8 <abort@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #516]!	; 0x204

00010ed4 <__assert_fail@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #508]!	; 0x1fc

Disassembly of section .text:

00010ee0 <.text>:
   10ee0:	mov	fp, #0
   10ee4:	mov	lr, #0
   10ee8:	pop	{r1}		; (ldr r1, [sp], #4)
   10eec:	mov	r2, sp
   10ef0:	push	{r2}		; (str r2, [sp, #-4]!)
   10ef4:	push	{r0}		; (str r0, [sp, #-4]!)
   10ef8:	ldr	ip, [pc, #16]	; 10f10 <__assert_fail@plt+0x3c>
   10efc:	push	{ip}		; (str ip, [sp, #-4]!)
   10f00:	ldr	r0, [pc, #12]	; 10f14 <__assert_fail@plt+0x40>
   10f04:	ldr	r3, [pc, #12]	; 10f18 <__assert_fail@plt+0x44>
   10f08:	bl	10da8 <__libc_start_main@plt>
   10f0c:	bl	10ec8 <abort@plt>
   10f10:	andeq	r7, r1, r4, lsr #10
   10f14:	andeq	r1, r1, r8, asr #5
   10f18:	andeq	r7, r1, r4, asr #9
   10f1c:	ldr	r3, [pc, #20]	; 10f38 <__assert_fail@plt+0x64>
   10f20:	ldr	r2, [pc, #20]	; 10f3c <__assert_fail@plt+0x68>
   10f24:	add	r3, pc, r3
   10f28:	ldr	r2, [r3, r2]
   10f2c:	cmp	r2, #0
   10f30:	bxeq	lr
   10f34:	b	10dc0 <__gmon_start__@plt>
   10f38:	ldrdeq	r7, [r1], -r4
   10f3c:	ldrdeq	r0, [r0], -ip
   10f40:	ldr	r3, [pc, #28]	; 10f64 <__assert_fail@plt+0x90>
   10f44:	ldr	r0, [pc, #28]	; 10f68 <__assert_fail@plt+0x94>
   10f48:	sub	r3, r3, r0
   10f4c:	cmp	r3, #6
   10f50:	bxls	lr
   10f54:	ldr	r3, [pc, #16]	; 10f6c <__assert_fail@plt+0x98>
   10f58:	cmp	r3, #0
   10f5c:	bxeq	lr
   10f60:	bx	r3
   10f64:	andeq	r8, r2, r3, lsr r1
   10f68:	andeq	r8, r2, r0, lsr r1
   10f6c:	andeq	r0, r0, r0
   10f70:	ldr	r1, [pc, #36]	; 10f9c <__assert_fail@plt+0xc8>
   10f74:	ldr	r0, [pc, #36]	; 10fa0 <__assert_fail@plt+0xcc>
   10f78:	sub	r1, r1, r0
   10f7c:	asr	r1, r1, #2
   10f80:	add	r1, r1, r1, lsr #31
   10f84:	asrs	r1, r1, #1
   10f88:	bxeq	lr
   10f8c:	ldr	r3, [pc, #16]	; 10fa4 <__assert_fail@plt+0xd0>
   10f90:	cmp	r3, #0
   10f94:	bxeq	lr
   10f98:	bx	r3
   10f9c:	andeq	r8, r2, r0, lsr r1
   10fa0:	andeq	r8, r2, r0, lsr r1
   10fa4:	andeq	r0, r0, r0
   10fa8:	push	{r4, lr}
   10fac:	ldr	r4, [pc, #24]	; 10fcc <__assert_fail@plt+0xf8>
   10fb0:	ldrb	r3, [r4]
   10fb4:	cmp	r3, #0
   10fb8:	popne	{r4, pc}
   10fbc:	bl	10f40 <__assert_fail@plt+0x6c>
   10fc0:	mov	r3, #1
   10fc4:	strb	r3, [r4]
   10fc8:	pop	{r4, pc}
   10fcc:	andeq	r8, r2, ip, asr #2
   10fd0:	ldr	r0, [pc, #40]	; 11000 <__assert_fail@plt+0x12c>
   10fd4:	ldr	r3, [r0]
   10fd8:	cmp	r3, #0
   10fdc:	bne	10fe4 <__assert_fail@plt+0x110>
   10fe0:	b	10f70 <__assert_fail@plt+0x9c>
   10fe4:	ldr	r3, [pc, #24]	; 11004 <__assert_fail@plt+0x130>
   10fe8:	cmp	r3, #0
   10fec:	beq	10fe0 <__assert_fail@plt+0x10c>
   10ff0:	push	{r4, lr}
   10ff4:	blx	r3
   10ff8:	pop	{r4, lr}
   10ffc:	b	10f70 <__assert_fail@plt+0x9c>
   11000:	andeq	r7, r2, r4, lsl pc
   11004:	andeq	r0, r0, r0
   11008:	push	{fp, lr}
   1100c:	add	fp, sp, #4
   11010:	sub	sp, sp, #80	; 0x50
   11014:	str	r0, [fp, #-80]	; 0xffffffb0
   11018:	ldr	r3, [pc, #348]	; 1117c <__assert_fail@plt+0x2a8>
   1101c:	sub	ip, fp, #72	; 0x48
   11020:	mov	lr, r3
   11024:	ldm	lr!, {r0, r1, r2, r3}
   11028:	stmia	ip!, {r0, r1, r2, r3}
   1102c:	ldm	lr!, {r0, r1, r2, r3}
   11030:	stmia	ip!, {r0, r1, r2, r3}
   11034:	ldm	lr!, {r0, r1, r2, r3}
   11038:	stmia	ip!, {r0, r1, r2, r3}
   1103c:	ldm	lr, {r0, r1}
   11040:	stm	ip, {r0, r1}
   11044:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11048:	str	r3, [fp, #-8]
   1104c:	sub	r3, fp, #72	; 0x48
   11050:	str	r3, [fp, #-12]
   11054:	b	11064 <__assert_fail@plt+0x190>
   11058:	ldr	r3, [fp, #-12]
   1105c:	add	r3, r3, #8
   11060:	str	r3, [fp, #-12]
   11064:	ldr	r3, [fp, #-12]
   11068:	ldr	r3, [r3]
   1106c:	cmp	r3, #0
   11070:	beq	11094 <__assert_fail@plt+0x1c0>
   11074:	ldr	r3, [fp, #-12]
   11078:	ldr	r3, [r3]
   1107c:	mov	r1, r3
   11080:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11084:	bl	10c94 <strcmp@plt>
   11088:	mov	r3, r0
   1108c:	cmp	r3, #0
   11090:	bne	11058 <__assert_fail@plt+0x184>
   11094:	ldr	r3, [fp, #-12]
   11098:	ldr	r3, [r3, #4]
   1109c:	cmp	r3, #0
   110a0:	beq	110b0 <__assert_fail@plt+0x1dc>
   110a4:	ldr	r3, [fp, #-12]
   110a8:	ldr	r3, [r3, #4]
   110ac:	str	r3, [fp, #-8]
   110b0:	ldr	r0, [pc, #200]	; 11180 <__assert_fail@plt+0x2ac>
   110b4:	bl	10df0 <gettext@plt>
   110b8:	mov	r3, r0
   110bc:	ldr	r2, [pc, #192]	; 11184 <__assert_fail@plt+0x2b0>
   110c0:	ldr	r1, [pc, #192]	; 11188 <__assert_fail@plt+0x2b4>
   110c4:	mov	r0, r3
   110c8:	bl	10ca0 <printf@plt>
   110cc:	mov	r1, #0
   110d0:	mov	r0, #5
   110d4:	bl	10e80 <setlocale@plt>
   110d8:	str	r0, [fp, #-16]
   110dc:	ldr	r3, [fp, #-16]
   110e0:	cmp	r3, #0
   110e4:	beq	11124 <__assert_fail@plt+0x250>
   110e8:	mov	r2, #3
   110ec:	ldr	r1, [pc, #152]	; 1118c <__assert_fail@plt+0x2b8>
   110f0:	ldr	r0, [fp, #-16]
   110f4:	bl	10ebc <strncmp@plt>
   110f8:	mov	r3, r0
   110fc:	cmp	r3, #0
   11100:	beq	11124 <__assert_fail@plt+0x250>
   11104:	ldr	r0, [pc, #132]	; 11190 <__assert_fail@plt+0x2bc>
   11108:	bl	10df0 <gettext@plt>
   1110c:	mov	r2, r0
   11110:	ldr	r3, [pc, #124]	; 11194 <__assert_fail@plt+0x2c0>
   11114:	ldr	r3, [r3]
   11118:	mov	r1, r3
   1111c:	mov	r0, r2
   11120:	bl	10c7c <fputs_unlocked@plt>
   11124:	ldr	r0, [pc, #108]	; 11198 <__assert_fail@plt+0x2c4>
   11128:	bl	10df0 <gettext@plt>
   1112c:	mov	r3, r0
   11130:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11134:	ldr	r1, [pc, #72]	; 11184 <__assert_fail@plt+0x2b0>
   11138:	mov	r0, r3
   1113c:	bl	10ca0 <printf@plt>
   11140:	ldr	r0, [pc, #84]	; 1119c <__assert_fail@plt+0x2c8>
   11144:	bl	10df0 <gettext@plt>
   11148:	ldr	r2, [fp, #-8]
   1114c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11150:	cmp	r2, r3
   11154:	bne	11160 <__assert_fail@plt+0x28c>
   11158:	ldr	r3, [pc, #64]	; 111a0 <__assert_fail@plt+0x2cc>
   1115c:	b	11164 <__assert_fail@plt+0x290>
   11160:	ldr	r3, [pc, #60]	; 111a4 <__assert_fail@plt+0x2d0>
   11164:	mov	r2, r3
   11168:	ldr	r1, [fp, #-8]
   1116c:	bl	10ca0 <printf@plt>
   11170:	nop			; (mov r0, r0)
   11174:	sub	sp, fp, #4
   11178:	pop	{fp, pc}
   1117c:	andeq	r7, r1, r0, asr #13
   11180:	andeq	r7, r1, ip, asr #10
   11184:	andeq	r7, r1, r4, ror #10
   11188:	andeq	r7, r1, ip, lsl #11
   1118c:	muleq	r1, ip, r5
   11190:	andeq	r7, r1, r0, lsr #11
   11194:	andeq	r8, r2, r4, asr #2
   11198:	andeq	r7, r1, r8, ror #11
   1119c:	andeq	r7, r1, r4, lsl #12
   111a0:	andeq	r7, r1, r8, lsr r6
   111a4:	andeq	r7, r1, r4, asr #12
   111a8:	push	{r4, fp, lr}
   111ac:	add	fp, sp, #8
   111b0:	sub	sp, sp, #12
   111b4:	str	r0, [fp, #-16]
   111b8:	ldr	r3, [fp, #-16]
   111bc:	cmp	r3, #0
   111c0:	beq	111f0 <__assert_fail@plt+0x31c>
   111c4:	ldr	r3, [pc, #212]	; 112a0 <__assert_fail@plt+0x3cc>
   111c8:	ldr	r4, [r3]
   111cc:	ldr	r0, [pc, #208]	; 112a4 <__assert_fail@plt+0x3d0>
   111d0:	bl	10df0 <gettext@plt>
   111d4:	mov	r1, r0
   111d8:	ldr	r3, [pc, #200]	; 112a8 <__assert_fail@plt+0x3d4>
   111dc:	ldr	r3, [r3]
   111e0:	mov	r2, r3
   111e4:	mov	r0, r4
   111e8:	bl	10e20 <fprintf@plt>
   111ec:	b	11298 <__assert_fail@plt+0x3c4>
   111f0:	ldr	r0, [pc, #180]	; 112ac <__assert_fail@plt+0x3d8>
   111f4:	bl	10df0 <gettext@plt>
   111f8:	mov	r2, r0
   111fc:	ldr	r3, [pc, #164]	; 112a8 <__assert_fail@plt+0x3d4>
   11200:	ldr	r3, [r3]
   11204:	mov	r1, r3
   11208:	mov	r0, r2
   1120c:	bl	10ca0 <printf@plt>
   11210:	ldr	r0, [pc, #152]	; 112b0 <__assert_fail@plt+0x3dc>
   11214:	bl	10df0 <gettext@plt>
   11218:	mov	r2, r0
   1121c:	ldr	r3, [pc, #144]	; 112b4 <__assert_fail@plt+0x3e0>
   11220:	ldr	r3, [r3]
   11224:	mov	r1, r3
   11228:	mov	r0, r2
   1122c:	bl	10c7c <fputs_unlocked@plt>
   11230:	ldr	r0, [pc, #128]	; 112b8 <__assert_fail@plt+0x3e4>
   11234:	bl	10df0 <gettext@plt>
   11238:	mov	r2, r0
   1123c:	ldr	r3, [pc, #112]	; 112b4 <__assert_fail@plt+0x3e0>
   11240:	ldr	r3, [r3]
   11244:	mov	r1, r3
   11248:	mov	r0, r2
   1124c:	bl	10c7c <fputs_unlocked@plt>
   11250:	ldr	r0, [pc, #100]	; 112bc <__assert_fail@plt+0x3e8>
   11254:	bl	10df0 <gettext@plt>
   11258:	mov	r2, r0
   1125c:	ldr	r3, [pc, #80]	; 112b4 <__assert_fail@plt+0x3e0>
   11260:	ldr	r3, [r3]
   11264:	mov	r1, r3
   11268:	mov	r0, r2
   1126c:	bl	10c7c <fputs_unlocked@plt>
   11270:	ldr	r0, [pc, #72]	; 112c0 <__assert_fail@plt+0x3ec>
   11274:	bl	10df0 <gettext@plt>
   11278:	mov	r2, r0
   1127c:	ldr	r3, [pc, #48]	; 112b4 <__assert_fail@plt+0x3e0>
   11280:	ldr	r3, [r3]
   11284:	mov	r1, r3
   11288:	mov	r0, r2
   1128c:	bl	10c7c <fputs_unlocked@plt>
   11290:	ldr	r0, [pc, #44]	; 112c4 <__assert_fail@plt+0x3f0>
   11294:	bl	11008 <__assert_fail@plt+0x134>
   11298:	ldr	r0, [fp, #-16]
   1129c:	bl	10de4 <exit@plt>
   112a0:	andeq	r8, r2, r0, asr #2
   112a4:	andeq	r7, r1, r4, ror #14
   112a8:	andeq	r8, r2, r8, asr r1
   112ac:	andeq	r7, r1, ip, lsl #15
   112b0:	andeq	r7, r1, r4, lsr #15
   112b4:	andeq	r8, r2, r4, asr #2
   112b8:	andeq	r7, r1, r4, lsr #16
   112bc:	muleq	r1, ip, r8
   112c0:	andeq	r7, r1, ip, asr #17
   112c4:	andeq	r7, r1, r4, lsl #18
   112c8:	push	{r4, fp, lr}
   112cc:	add	fp, sp, #8
   112d0:	sub	sp, sp, #52	; 0x34
   112d4:	str	r0, [fp, #-32]	; 0xffffffe0
   112d8:	str	r1, [fp, #-36]	; 0xffffffdc
   112dc:	mov	r3, #0
   112e0:	str	r3, [fp, #-20]	; 0xffffffec
   112e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   112e8:	ldr	r3, [r3]
   112ec:	mov	r0, r3
   112f0:	bl	119dc <__assert_fail@plt+0xb08>
   112f4:	ldr	r1, [pc, #496]	; 114ec <__assert_fail@plt+0x618>
   112f8:	mov	r0, #6
   112fc:	bl	10e80 <setlocale@plt>
   11300:	ldr	r1, [pc, #488]	; 114f0 <__assert_fail@plt+0x61c>
   11304:	ldr	r0, [pc, #488]	; 114f4 <__assert_fail@plt+0x620>
   11308:	bl	10eb0 <bindtextdomain@plt>
   1130c:	ldr	r0, [pc, #480]	; 114f4 <__assert_fail@plt+0x620>
   11310:	bl	10d24 <textdomain@plt>
   11314:	ldr	r0, [pc, #476]	; 114f8 <__assert_fail@plt+0x624>
   11318:	bl	17528 <__assert_fail@plt+0x6654>
   1131c:	mov	r3, #2
   11320:	str	r3, [fp, #-24]	; 0xffffffe8
   11324:	mov	r3, #0
   11328:	str	r3, [sp]
   1132c:	ldr	r3, [pc, #456]	; 114fc <__assert_fail@plt+0x628>
   11330:	ldr	r2, [pc, #436]	; 114ec <__assert_fail@plt+0x618>
   11334:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11338:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1133c:	bl	10dcc <getopt_long@plt>
   11340:	str	r0, [fp, #-28]	; 0xffffffe4
   11344:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11348:	cmn	r3, #1
   1134c:	beq	11438 <__assert_fail@plt+0x564>
   11350:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11354:	cmn	r3, #2
   11358:	beq	11388 <__assert_fail@plt+0x4b4>
   1135c:	cmn	r3, #2
   11360:	bgt	11370 <__assert_fail@plt+0x49c>
   11364:	cmn	r3, #3
   11368:	beq	11390 <__assert_fail@plt+0x4bc>
   1136c:	b	1142c <__assert_fail@plt+0x558>
   11370:	cmp	r3, #256	; 0x100
   11374:	beq	113c8 <__assert_fail@plt+0x4f4>
   11378:	ldr	r2, [pc, #384]	; 11500 <__assert_fail@plt+0x62c>
   1137c:	cmp	r3, r2
   11380:	beq	113d4 <__assert_fail@plt+0x500>
   11384:	b	1142c <__assert_fail@plt+0x558>
   11388:	mov	r0, #0
   1138c:	bl	111a8 <__assert_fail@plt+0x2d4>
   11390:	ldr	r3, [pc, #364]	; 11504 <__assert_fail@plt+0x630>
   11394:	ldr	r0, [r3]
   11398:	ldr	r3, [pc, #360]	; 11508 <__assert_fail@plt+0x634>
   1139c:	ldr	r2, [r3]
   113a0:	mov	r3, #0
   113a4:	str	r3, [sp, #4]
   113a8:	ldr	r3, [pc, #348]	; 1150c <__assert_fail@plt+0x638>
   113ac:	str	r3, [sp]
   113b0:	mov	r3, r2
   113b4:	ldr	r2, [pc, #340]	; 11510 <__assert_fail@plt+0x63c>
   113b8:	ldr	r1, [pc, #340]	; 11514 <__assert_fail@plt+0x640>
   113bc:	bl	147d8 <__assert_fail@plt+0x3904>
   113c0:	mov	r0, #0
   113c4:	bl	10de4 <exit@plt>
   113c8:	mov	r3, #0
   113cc:	str	r3, [fp, #-24]	; 0xffffffe8
   113d0:	b	11434 <__assert_fail@plt+0x560>
   113d4:	ldr	r3, [pc, #316]	; 11518 <__assert_fail@plt+0x644>
   113d8:	ldr	r4, [r3]
   113dc:	ldr	r0, [pc, #312]	; 1151c <__assert_fail@plt+0x648>
   113e0:	bl	10df0 <gettext@plt>
   113e4:	mov	r2, r0
   113e8:	mov	r3, #0
   113ec:	str	r3, [sp, #16]
   113f0:	str	r2, [sp, #12]
   113f4:	ldr	r3, [pc, #240]	; 114ec <__assert_fail@plt+0x618>
   113f8:	str	r3, [sp, #8]
   113fc:	mvn	r2, #0
   11400:	mov	r3, #0
   11404:	strd	r2, [sp]
   11408:	mov	r2, #0
   1140c:	mov	r3, #0
   11410:	mov	r0, r4
   11414:	bl	155f8 <__assert_fail@plt+0x4724>
   11418:	mov	r2, r0
   1141c:	mov	r3, r1
   11420:	mov	r3, r2
   11424:	str	r3, [fp, #-20]	; 0xffffffec
   11428:	b	11434 <__assert_fail@plt+0x560>
   1142c:	mov	r0, #1
   11430:	bl	111a8 <__assert_fail@plt+0x2d4>
   11434:	b	11324 <__assert_fail@plt+0x450>
   11438:	nop			; (mov r0, r0)
   1143c:	ldr	r3, [pc, #220]	; 11520 <__assert_fail@plt+0x64c>
   11440:	ldr	r3, [r3]
   11444:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11448:	cmp	r2, r3
   1144c:	beq	11498 <__assert_fail@plt+0x5c4>
   11450:	ldr	r0, [pc, #204]	; 11524 <__assert_fail@plt+0x650>
   11454:	bl	10df0 <gettext@plt>
   11458:	mov	r4, r0
   1145c:	ldr	r3, [pc, #188]	; 11520 <__assert_fail@plt+0x64c>
   11460:	ldr	r3, [r3]
   11464:	lsl	r3, r3, #2
   11468:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1146c:	add	r3, r2, r3
   11470:	ldr	r3, [r3]
   11474:	mov	r0, r3
   11478:	bl	1410c <__assert_fail@plt+0x3238>
   1147c:	mov	r3, r0
   11480:	mov	r2, r4
   11484:	mov	r1, #0
   11488:	mov	r0, #0
   1148c:	bl	10d84 <error@plt>
   11490:	mov	r0, #1
   11494:	bl	111a8 <__assert_fail@plt+0x2d4>
   11498:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1149c:	bl	11914 <__assert_fail@plt+0xa40>
   114a0:	str	r0, [fp, #-16]
   114a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   114a8:	ldr	r3, [fp, #-16]
   114ac:	cmp	r2, r3
   114b0:	bcs	114c8 <__assert_fail@plt+0x5f4>
   114b4:	ldr	r2, [fp, #-16]
   114b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   114bc:	sub	r3, r2, r3
   114c0:	str	r3, [fp, #-16]
   114c4:	b	114d0 <__assert_fail@plt+0x5fc>
   114c8:	mov	r3, #1
   114cc:	str	r3, [fp, #-16]
   114d0:	ldr	r1, [fp, #-16]
   114d4:	ldr	r0, [pc, #76]	; 11528 <__assert_fail@plt+0x654>
   114d8:	bl	10ca0 <printf@plt>
   114dc:	mov	r3, #0
   114e0:	mov	r0, r3
   114e4:	sub	sp, fp, #8
   114e8:	pop	{r4, fp, pc}
   114ec:	andeq	r7, r1, r4, asr #12
   114f0:	andeq	r7, r1, ip, lsl #18
   114f4:	andeq	r7, r1, ip, asr r6
   114f8:	muleq	r1, r0, r5
   114fc:	andeq	r7, r1, r4, lsl r7
   11500:	andeq	r0, r0, r1, lsl #2
   11504:	andeq	r8, r2, r4, asr #2
   11508:	andeq	r8, r2, r8, ror #1
   1150c:	andeq	r7, r1, r4, lsr #18
   11510:	andeq	r7, r1, ip, lsl #11
   11514:	andeq	r7, r1, r4, lsl #18
   11518:	andeq	r8, r2, r8, asr #2
   1151c:	andeq	r7, r1, r8, lsr r9
   11520:	andeq	r8, r2, r8, lsr r1
   11524:	andeq	r7, r1, r8, asr #18
   11528:	andeq	r7, r1, ip, asr r9
   1152c:	push	{fp}		; (str fp, [sp, #-4]!)
   11530:	add	fp, sp, #0
   11534:	sub	sp, sp, #12
   11538:	str	r0, [fp, #-8]
   1153c:	ldr	r2, [pc, #20]	; 11558 <__assert_fail@plt+0x684>
   11540:	ldr	r3, [fp, #-8]
   11544:	str	r3, [r2]
   11548:	nop			; (mov r0, r0)
   1154c:	add	sp, fp, #0
   11550:	pop	{fp}		; (ldr fp, [sp], #4)
   11554:	bx	lr
   11558:	andeq	r8, r2, r0, asr r1
   1155c:	push	{fp}		; (str fp, [sp, #-4]!)
   11560:	add	fp, sp, #0
   11564:	sub	sp, sp, #12
   11568:	mov	r3, r0
   1156c:	strb	r3, [fp, #-5]
   11570:	ldr	r2, [pc, #20]	; 1158c <__assert_fail@plt+0x6b8>
   11574:	ldrb	r3, [fp, #-5]
   11578:	strb	r3, [r2]
   1157c:	nop			; (mov r0, r0)
   11580:	add	sp, fp, #0
   11584:	pop	{fp}		; (ldr fp, [sp], #4)
   11588:	bx	lr
   1158c:	andeq	r8, r2, r4, asr r1
   11590:	push	{r4, fp, lr}
   11594:	add	fp, sp, #8
   11598:	sub	sp, sp, #20
   1159c:	ldr	r3, [pc, #256]	; 116a4 <__assert_fail@plt+0x7d0>
   115a0:	ldr	r3, [r3]
   115a4:	mov	r0, r3
   115a8:	bl	16624 <__assert_fail@plt+0x5750>
   115ac:	mov	r3, r0
   115b0:	cmp	r3, #0
   115b4:	beq	1166c <__assert_fail@plt+0x798>
   115b8:	ldr	r3, [pc, #232]	; 116a8 <__assert_fail@plt+0x7d4>
   115bc:	ldrb	r3, [r3]
   115c0:	eor	r3, r3, #1
   115c4:	uxtb	r3, r3
   115c8:	cmp	r3, #0
   115cc:	bne	115e4 <__assert_fail@plt+0x710>
   115d0:	bl	10e2c <__errno_location@plt>
   115d4:	mov	r3, r0
   115d8:	ldr	r3, [r3]
   115dc:	cmp	r3, #32
   115e0:	beq	1166c <__assert_fail@plt+0x798>
   115e4:	ldr	r0, [pc, #192]	; 116ac <__assert_fail@plt+0x7d8>
   115e8:	bl	10df0 <gettext@plt>
   115ec:	str	r0, [fp, #-16]
   115f0:	ldr	r3, [pc, #184]	; 116b0 <__assert_fail@plt+0x7dc>
   115f4:	ldr	r3, [r3]
   115f8:	cmp	r3, #0
   115fc:	beq	11640 <__assert_fail@plt+0x76c>
   11600:	bl	10e2c <__errno_location@plt>
   11604:	mov	r3, r0
   11608:	ldr	r4, [r3]
   1160c:	ldr	r3, [pc, #156]	; 116b0 <__assert_fail@plt+0x7dc>
   11610:	ldr	r3, [r3]
   11614:	mov	r0, r3
   11618:	bl	13e3c <__assert_fail@plt+0x2f68>
   1161c:	mov	r2, r0
   11620:	ldr	r3, [fp, #-16]
   11624:	str	r3, [sp]
   11628:	mov	r3, r2
   1162c:	ldr	r2, [pc, #128]	; 116b4 <__assert_fail@plt+0x7e0>
   11630:	mov	r1, r4
   11634:	mov	r0, #0
   11638:	bl	10d84 <error@plt>
   1163c:	b	1165c <__assert_fail@plt+0x788>
   11640:	bl	10e2c <__errno_location@plt>
   11644:	mov	r3, r0
   11648:	ldr	r1, [r3]
   1164c:	ldr	r3, [fp, #-16]
   11650:	ldr	r2, [pc, #96]	; 116b8 <__assert_fail@plt+0x7e4>
   11654:	mov	r0, #0
   11658:	bl	10d84 <error@plt>
   1165c:	ldr	r3, [pc, #88]	; 116bc <__assert_fail@plt+0x7e8>
   11660:	ldr	r3, [r3]
   11664:	mov	r0, r3
   11668:	bl	10cc4 <_exit@plt>
   1166c:	ldr	r3, [pc, #76]	; 116c0 <__assert_fail@plt+0x7ec>
   11670:	ldr	r3, [r3]
   11674:	mov	r0, r3
   11678:	bl	16624 <__assert_fail@plt+0x5750>
   1167c:	mov	r3, r0
   11680:	cmp	r3, #0
   11684:	beq	11698 <__assert_fail@plt+0x7c4>
   11688:	ldr	r3, [pc, #44]	; 116bc <__assert_fail@plt+0x7e8>
   1168c:	ldr	r3, [r3]
   11690:	mov	r0, r3
   11694:	bl	10cc4 <_exit@plt>
   11698:	nop			; (mov r0, r0)
   1169c:	sub	sp, fp, #8
   116a0:	pop	{r4, fp, pc}
   116a4:	andeq	r8, r2, r4, asr #2
   116a8:	andeq	r8, r2, r4, asr r1
   116ac:	andeq	r7, r1, r4, ror r9
   116b0:	andeq	r8, r2, r0, asr r1
   116b4:	andeq	r7, r1, r0, lsl #19
   116b8:	andeq	r7, r1, r8, lsl #19
   116bc:	andeq	r8, r2, ip, ror #1
   116c0:	andeq	r8, r2, r0, asr #2
   116c4:	push	{fp, lr}
   116c8:	add	fp, sp, #4
   116cc:	sub	sp, sp, #136	; 0x88
   116d0:	sub	r3, fp, #136	; 0x88
   116d4:	mov	r2, r3
   116d8:	mov	r1, #128	; 0x80
   116dc:	mov	r0, #0
   116e0:	bl	10ea4 <sched_getaffinity@plt>
   116e4:	mov	r3, r0
   116e8:	cmp	r3, #0
   116ec:	bne	1171c <__assert_fail@plt+0x848>
   116f0:	sub	r3, fp, #136	; 0x88
   116f4:	mov	r1, r3
   116f8:	mov	r0, #128	; 0x80
   116fc:	bl	10ce8 <__sched_cpucount@plt>
   11700:	mov	r3, r0
   11704:	str	r3, [fp, #-8]
   11708:	ldr	r3, [fp, #-8]
   1170c:	cmp	r3, #0
   11710:	beq	1171c <__assert_fail@plt+0x848>
   11714:	ldr	r3, [fp, #-8]
   11718:	b	11720 <__assert_fail@plt+0x84c>
   1171c:	mov	r3, #0
   11720:	mov	r0, r3
   11724:	sub	sp, fp, #4
   11728:	pop	{fp, pc}
   1172c:	push	{fp, lr}
   11730:	add	fp, sp, #4
   11734:	sub	sp, sp, #24
   11738:	str	r0, [fp, #-24]	; 0xffffffe8
   1173c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11740:	cmp	r3, #1
   11744:	bne	11784 <__assert_fail@plt+0x8b0>
   11748:	bl	116c4 <__assert_fail@plt+0x7f0>
   1174c:	str	r0, [fp, #-12]
   11750:	ldr	r3, [fp, #-12]
   11754:	cmp	r3, #0
   11758:	beq	11764 <__assert_fail@plt+0x890>
   1175c:	ldr	r3, [fp, #-12]
   11760:	b	117e0 <__assert_fail@plt+0x90c>
   11764:	mov	r0, #84	; 0x54
   11768:	bl	10d0c <sysconf@plt>
   1176c:	str	r0, [fp, #-16]
   11770:	ldr	r3, [fp, #-16]
   11774:	cmp	r3, #0
   11778:	ble	117dc <__assert_fail@plt+0x908>
   1177c:	ldr	r3, [fp, #-16]
   11780:	b	117e0 <__assert_fail@plt+0x90c>
   11784:	mov	r0, #83	; 0x53
   11788:	bl	10d0c <sysconf@plt>
   1178c:	str	r0, [fp, #-8]
   11790:	ldr	r3, [fp, #-8]
   11794:	cmp	r3, #1
   11798:	beq	117a8 <__assert_fail@plt+0x8d4>
   1179c:	ldr	r3, [fp, #-8]
   117a0:	cmp	r3, #2
   117a4:	bne	117c8 <__assert_fail@plt+0x8f4>
   117a8:	bl	116c4 <__assert_fail@plt+0x7f0>
   117ac:	str	r0, [fp, #-20]	; 0xffffffec
   117b0:	ldr	r3, [fp, #-8]
   117b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   117b8:	cmp	r2, r3
   117bc:	bls	117c8 <__assert_fail@plt+0x8f4>
   117c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   117c4:	str	r3, [fp, #-8]
   117c8:	ldr	r3, [fp, #-8]
   117cc:	cmp	r3, #0
   117d0:	ble	117dc <__assert_fail@plt+0x908>
   117d4:	ldr	r3, [fp, #-8]
   117d8:	b	117e0 <__assert_fail@plt+0x90c>
   117dc:	mov	r3, #1
   117e0:	mov	r0, r3
   117e4:	sub	sp, fp, #4
   117e8:	pop	{fp, pc}
   117ec:	push	{fp, lr}
   117f0:	add	fp, sp, #4
   117f4:	sub	sp, sp, #24
   117f8:	str	r0, [fp, #-24]	; 0xffffffe8
   117fc:	mov	r3, #0
   11800:	str	r3, [fp, #-8]
   11804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11808:	cmp	r3, #0
   1180c:	bne	11824 <__assert_fail@plt+0x950>
   11810:	ldr	r3, [fp, #-8]
   11814:	b	11908 <__assert_fail@plt+0xa34>
   11818:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1181c:	add	r3, r3, #1
   11820:	str	r3, [fp, #-24]	; 0xffffffe8
   11824:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11828:	ldrb	r3, [r3]
   1182c:	cmp	r3, #0
   11830:	beq	11850 <__assert_fail@plt+0x97c>
   11834:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11838:	ldrb	r3, [r3]
   1183c:	mov	r0, r3
   11840:	bl	1636c <__assert_fail@plt+0x5498>
   11844:	mov	r3, r0
   11848:	cmp	r3, #0
   1184c:	bne	11818 <__assert_fail@plt+0x944>
   11850:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11854:	ldrb	r3, [r3]
   11858:	mov	r0, r3
   1185c:	bl	16210 <__assert_fail@plt+0x533c>
   11860:	mov	r3, r0
   11864:	cmp	r3, #0
   11868:	beq	11904 <__assert_fail@plt+0xa30>
   1186c:	mov	r3, #0
   11870:	str	r3, [fp, #-16]
   11874:	sub	r3, fp, #16
   11878:	mov	r2, #10
   1187c:	mov	r1, r3
   11880:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11884:	bl	10dfc <strtoul@plt>
   11888:	str	r0, [fp, #-12]
   1188c:	ldr	r3, [fp, #-16]
   11890:	cmp	r3, #0
   11894:	beq	11904 <__assert_fail@plt+0xa30>
   11898:	b	118a8 <__assert_fail@plt+0x9d4>
   1189c:	ldr	r3, [fp, #-16]
   118a0:	add	r3, r3, #1
   118a4:	str	r3, [fp, #-16]
   118a8:	ldr	r3, [fp, #-16]
   118ac:	ldrb	r3, [r3]
   118b0:	cmp	r3, #0
   118b4:	beq	118d4 <__assert_fail@plt+0xa00>
   118b8:	ldr	r3, [fp, #-16]
   118bc:	ldrb	r3, [r3]
   118c0:	mov	r0, r3
   118c4:	bl	1636c <__assert_fail@plt+0x5498>
   118c8:	mov	r3, r0
   118cc:	cmp	r3, #0
   118d0:	bne	1189c <__assert_fail@plt+0x9c8>
   118d4:	ldr	r3, [fp, #-16]
   118d8:	ldrb	r3, [r3]
   118dc:	cmp	r3, #0
   118e0:	bne	118ec <__assert_fail@plt+0xa18>
   118e4:	ldr	r3, [fp, #-12]
   118e8:	b	11908 <__assert_fail@plt+0xa34>
   118ec:	ldr	r3, [fp, #-16]
   118f0:	ldrb	r3, [r3]
   118f4:	cmp	r3, #44	; 0x2c
   118f8:	bne	11904 <__assert_fail@plt+0xa30>
   118fc:	ldr	r3, [fp, #-12]
   11900:	b	11908 <__assert_fail@plt+0xa34>
   11904:	ldr	r3, [fp, #-8]
   11908:	mov	r0, r3
   1190c:	sub	sp, fp, #4
   11910:	pop	{fp, pc}
   11914:	push	{fp, lr}
   11918:	add	fp, sp, #4
   1191c:	sub	sp, sp, #24
   11920:	str	r0, [fp, #-24]	; 0xffffffe8
   11924:	mvn	r3, #0
   11928:	str	r3, [fp, #-8]
   1192c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11930:	cmp	r3, #2
   11934:	bne	119a8 <__assert_fail@plt+0xad4>
   11938:	ldr	r0, [pc, #148]	; 119d4 <__assert_fail@plt+0xb00>
   1193c:	bl	10d90 <getenv@plt>
   11940:	mov	r3, r0
   11944:	mov	r0, r3
   11948:	bl	117ec <__assert_fail@plt+0x918>
   1194c:	str	r0, [fp, #-12]
   11950:	ldr	r0, [pc, #128]	; 119d8 <__assert_fail@plt+0xb04>
   11954:	bl	10d90 <getenv@plt>
   11958:	mov	r3, r0
   1195c:	mov	r0, r3
   11960:	bl	117ec <__assert_fail@plt+0x918>
   11964:	str	r0, [fp, #-8]
   11968:	ldr	r3, [fp, #-8]
   1196c:	cmp	r3, #0
   11970:	bne	1197c <__assert_fail@plt+0xaa8>
   11974:	mvn	r3, #0
   11978:	str	r3, [fp, #-8]
   1197c:	ldr	r3, [fp, #-12]
   11980:	cmp	r3, #0
   11984:	beq	119a0 <__assert_fail@plt+0xacc>
   11988:	ldr	r2, [fp, #-8]
   1198c:	ldr	r3, [fp, #-12]
   11990:	cmp	r2, r3
   11994:	movcc	r3, r2
   11998:	movcs	r3, r3
   1199c:	b	119c8 <__assert_fail@plt+0xaf4>
   119a0:	mov	r3, #1
   119a4:	str	r3, [fp, #-24]	; 0xffffffe8
   119a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   119ac:	bl	1172c <__assert_fail@plt+0x858>
   119b0:	str	r0, [fp, #-16]
   119b4:	ldr	r2, [fp, #-8]
   119b8:	ldr	r3, [fp, #-16]
   119bc:	cmp	r2, r3
   119c0:	movcc	r3, r2
   119c4:	movcs	r3, r3
   119c8:	mov	r0, r3
   119cc:	sub	sp, fp, #4
   119d0:	pop	{fp, pc}
   119d4:	andeq	r7, r1, ip, lsl #19
   119d8:	muleq	r1, ip, r9
   119dc:	push	{fp, lr}
   119e0:	add	fp, sp, #4
   119e4:	sub	sp, sp, #16
   119e8:	str	r0, [fp, #-16]
   119ec:	ldr	r3, [fp, #-16]
   119f0:	cmp	r3, #0
   119f4:	bne	11a14 <__assert_fail@plt+0xb40>
   119f8:	ldr	r3, [pc, #220]	; 11adc <__assert_fail@plt+0xc08>
   119fc:	ldr	r3, [r3]
   11a00:	mov	r2, #55	; 0x37
   11a04:	mov	r1, #1
   11a08:	ldr	r0, [pc, #208]	; 11ae0 <__assert_fail@plt+0xc0c>
   11a0c:	bl	10d3c <fwrite@plt>
   11a10:	bl	10ec8 <abort@plt>
   11a14:	mov	r1, #47	; 0x2f
   11a18:	ldr	r0, [fp, #-16]
   11a1c:	bl	10e8c <strrchr@plt>
   11a20:	str	r0, [fp, #-8]
   11a24:	ldr	r3, [fp, #-8]
   11a28:	cmp	r3, #0
   11a2c:	beq	11a3c <__assert_fail@plt+0xb68>
   11a30:	ldr	r3, [fp, #-8]
   11a34:	add	r3, r3, #1
   11a38:	b	11a40 <__assert_fail@plt+0xb6c>
   11a3c:	ldr	r3, [fp, #-16]
   11a40:	str	r3, [fp, #-12]
   11a44:	ldr	r2, [fp, #-12]
   11a48:	ldr	r3, [fp, #-16]
   11a4c:	sub	r3, r2, r3
   11a50:	cmp	r3, #6
   11a54:	ble	11ab8 <__assert_fail@plt+0xbe4>
   11a58:	ldr	r3, [fp, #-12]
   11a5c:	sub	r3, r3, #7
   11a60:	mov	r2, #7
   11a64:	ldr	r1, [pc, #120]	; 11ae4 <__assert_fail@plt+0xc10>
   11a68:	mov	r0, r3
   11a6c:	bl	10ebc <strncmp@plt>
   11a70:	mov	r3, r0
   11a74:	cmp	r3, #0
   11a78:	bne	11ab8 <__assert_fail@plt+0xbe4>
   11a7c:	ldr	r3, [fp, #-12]
   11a80:	str	r3, [fp, #-16]
   11a84:	mov	r2, #3
   11a88:	ldr	r1, [pc, #88]	; 11ae8 <__assert_fail@plt+0xc14>
   11a8c:	ldr	r0, [fp, #-12]
   11a90:	bl	10ebc <strncmp@plt>
   11a94:	mov	r3, r0
   11a98:	cmp	r3, #0
   11a9c:	bne	11ab8 <__assert_fail@plt+0xbe4>
   11aa0:	ldr	r3, [fp, #-12]
   11aa4:	add	r3, r3, #3
   11aa8:	str	r3, [fp, #-16]
   11aac:	ldr	r2, [pc, #56]	; 11aec <__assert_fail@plt+0xc18>
   11ab0:	ldr	r3, [fp, #-16]
   11ab4:	str	r3, [r2]
   11ab8:	ldr	r2, [pc, #48]	; 11af0 <__assert_fail@plt+0xc1c>
   11abc:	ldr	r3, [fp, #-16]
   11ac0:	str	r3, [r2]
   11ac4:	ldr	r2, [pc, #40]	; 11af4 <__assert_fail@plt+0xc20>
   11ac8:	ldr	r3, [fp, #-16]
   11acc:	str	r3, [r2]
   11ad0:	nop			; (mov r0, r0)
   11ad4:	sub	sp, fp, #4
   11ad8:	pop	{fp, pc}
   11adc:	andeq	r8, r2, r0, asr #2
   11ae0:			; <UNDEFINED> instruction: 0x000179b0
   11ae4:	andeq	r7, r1, r8, ror #19
   11ae8:	strdeq	r7, [r1], -r0
   11aec:	andeq	r8, r2, r0, lsr r1
   11af0:	andeq	r8, r2, r8, asr r1
   11af4:	andeq	r8, r2, r4, lsr r1
   11af8:	push	{fp, lr}
   11afc:	add	fp, sp, #4
   11b00:	sub	sp, sp, #16
   11b04:	str	r0, [fp, #-16]
   11b08:	bl	10e2c <__errno_location@plt>
   11b0c:	mov	r3, r0
   11b10:	ldr	r3, [r3]
   11b14:	str	r3, [fp, #-8]
   11b18:	ldr	r3, [fp, #-16]
   11b1c:	cmp	r3, #0
   11b20:	beq	11b2c <__assert_fail@plt+0xc58>
   11b24:	ldr	r3, [fp, #-16]
   11b28:	b	11b30 <__assert_fail@plt+0xc5c>
   11b2c:	ldr	r3, [pc, #48]	; 11b64 <__assert_fail@plt+0xc90>
   11b30:	mov	r1, #48	; 0x30
   11b34:	mov	r0, r3
   11b38:	bl	1531c <__assert_fail@plt+0x4448>
   11b3c:	mov	r3, r0
   11b40:	str	r3, [fp, #-12]
   11b44:	bl	10e2c <__errno_location@plt>
   11b48:	mov	r2, r0
   11b4c:	ldr	r3, [fp, #-8]
   11b50:	str	r3, [r2]
   11b54:	ldr	r3, [fp, #-12]
   11b58:	mov	r0, r3
   11b5c:	sub	sp, fp, #4
   11b60:	pop	{fp, pc}
   11b64:	andeq	r8, r2, ip, asr r1
   11b68:	push	{fp}		; (str fp, [sp, #-4]!)
   11b6c:	add	fp, sp, #0
   11b70:	sub	sp, sp, #12
   11b74:	str	r0, [fp, #-8]
   11b78:	ldr	r3, [fp, #-8]
   11b7c:	cmp	r3, #0
   11b80:	beq	11b8c <__assert_fail@plt+0xcb8>
   11b84:	ldr	r3, [fp, #-8]
   11b88:	b	11b90 <__assert_fail@plt+0xcbc>
   11b8c:	ldr	r3, [pc, #16]	; 11ba4 <__assert_fail@plt+0xcd0>
   11b90:	ldr	r3, [r3]
   11b94:	mov	r0, r3
   11b98:	add	sp, fp, #0
   11b9c:	pop	{fp}		; (ldr fp, [sp], #4)
   11ba0:	bx	lr
   11ba4:	andeq	r8, r2, ip, asr r1
   11ba8:	push	{fp}		; (str fp, [sp, #-4]!)
   11bac:	add	fp, sp, #0
   11bb0:	sub	sp, sp, #12
   11bb4:	str	r0, [fp, #-8]
   11bb8:	str	r1, [fp, #-12]
   11bbc:	ldr	r3, [fp, #-8]
   11bc0:	cmp	r3, #0
   11bc4:	beq	11bd0 <__assert_fail@plt+0xcfc>
   11bc8:	ldr	r3, [fp, #-8]
   11bcc:	b	11bd4 <__assert_fail@plt+0xd00>
   11bd0:	ldr	r3, [pc, #20]	; 11bec <__assert_fail@plt+0xd18>
   11bd4:	ldr	r2, [fp, #-12]
   11bd8:	str	r2, [r3]
   11bdc:	nop			; (mov r0, r0)
   11be0:	add	sp, fp, #0
   11be4:	pop	{fp}		; (ldr fp, [sp], #4)
   11be8:	bx	lr
   11bec:	andeq	r8, r2, ip, asr r1
   11bf0:	push	{fp}		; (str fp, [sp, #-4]!)
   11bf4:	add	fp, sp, #0
   11bf8:	sub	sp, sp, #36	; 0x24
   11bfc:	str	r0, [fp, #-24]	; 0xffffffe8
   11c00:	mov	r3, r1
   11c04:	str	r2, [fp, #-32]	; 0xffffffe0
   11c08:	strb	r3, [fp, #-25]	; 0xffffffe7
   11c0c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11c10:	strb	r3, [fp, #-5]
   11c14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c18:	cmp	r3, #0
   11c1c:	beq	11c28 <__assert_fail@plt+0xd54>
   11c20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c24:	b	11c2c <__assert_fail@plt+0xd58>
   11c28:	ldr	r3, [pc, #124]	; 11cac <__assert_fail@plt+0xdd8>
   11c2c:	add	r2, r3, #8
   11c30:	ldrb	r3, [fp, #-5]
   11c34:	lsr	r3, r3, #5
   11c38:	uxtb	r3, r3
   11c3c:	lsl	r3, r3, #2
   11c40:	add	r3, r2, r3
   11c44:	str	r3, [fp, #-12]
   11c48:	ldrb	r3, [fp, #-5]
   11c4c:	and	r3, r3, #31
   11c50:	str	r3, [fp, #-16]
   11c54:	ldr	r3, [fp, #-12]
   11c58:	ldr	r2, [r3]
   11c5c:	ldr	r3, [fp, #-16]
   11c60:	lsr	r3, r2, r3
   11c64:	and	r3, r3, #1
   11c68:	str	r3, [fp, #-20]	; 0xffffffec
   11c6c:	ldr	r3, [fp, #-12]
   11c70:	ldr	r3, [r3]
   11c74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11c78:	and	r1, r2, #1
   11c7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c80:	eor	r1, r1, r2
   11c84:	ldr	r2, [fp, #-16]
   11c88:	lsl	r2, r1, r2
   11c8c:	eor	r2, r2, r3
   11c90:	ldr	r3, [fp, #-12]
   11c94:	str	r2, [r3]
   11c98:	ldr	r3, [fp, #-20]	; 0xffffffec
   11c9c:	mov	r0, r3
   11ca0:	add	sp, fp, #0
   11ca4:	pop	{fp}		; (ldr fp, [sp], #4)
   11ca8:	bx	lr
   11cac:	andeq	r8, r2, ip, asr r1
   11cb0:	push	{fp}		; (str fp, [sp, #-4]!)
   11cb4:	add	fp, sp, #0
   11cb8:	sub	sp, sp, #20
   11cbc:	str	r0, [fp, #-16]
   11cc0:	str	r1, [fp, #-20]	; 0xffffffec
   11cc4:	ldr	r3, [fp, #-16]
   11cc8:	cmp	r3, #0
   11ccc:	bne	11cd8 <__assert_fail@plt+0xe04>
   11cd0:	ldr	r3, [pc, #44]	; 11d04 <__assert_fail@plt+0xe30>
   11cd4:	str	r3, [fp, #-16]
   11cd8:	ldr	r3, [fp, #-16]
   11cdc:	ldr	r3, [r3, #4]
   11ce0:	str	r3, [fp, #-8]
   11ce4:	ldr	r3, [fp, #-16]
   11ce8:	ldr	r2, [fp, #-20]	; 0xffffffec
   11cec:	str	r2, [r3, #4]
   11cf0:	ldr	r3, [fp, #-8]
   11cf4:	mov	r0, r3
   11cf8:	add	sp, fp, #0
   11cfc:	pop	{fp}		; (ldr fp, [sp], #4)
   11d00:	bx	lr
   11d04:	andeq	r8, r2, ip, asr r1
   11d08:	push	{fp, lr}
   11d0c:	add	fp, sp, #4
   11d10:	sub	sp, sp, #16
   11d14:	str	r0, [fp, #-8]
   11d18:	str	r1, [fp, #-12]
   11d1c:	str	r2, [fp, #-16]
   11d20:	ldr	r3, [fp, #-8]
   11d24:	cmp	r3, #0
   11d28:	bne	11d34 <__assert_fail@plt+0xe60>
   11d2c:	ldr	r3, [pc, #76]	; 11d80 <__assert_fail@plt+0xeac>
   11d30:	str	r3, [fp, #-8]
   11d34:	ldr	r3, [fp, #-8]
   11d38:	mov	r2, #10
   11d3c:	str	r2, [r3]
   11d40:	ldr	r3, [fp, #-12]
   11d44:	cmp	r3, #0
   11d48:	beq	11d58 <__assert_fail@plt+0xe84>
   11d4c:	ldr	r3, [fp, #-16]
   11d50:	cmp	r3, #0
   11d54:	bne	11d5c <__assert_fail@plt+0xe88>
   11d58:	bl	10ec8 <abort@plt>
   11d5c:	ldr	r3, [fp, #-8]
   11d60:	ldr	r2, [fp, #-12]
   11d64:	str	r2, [r3, #40]	; 0x28
   11d68:	ldr	r3, [fp, #-8]
   11d6c:	ldr	r2, [fp, #-16]
   11d70:	str	r2, [r3, #44]	; 0x2c
   11d74:	nop			; (mov r0, r0)
   11d78:	sub	sp, fp, #4
   11d7c:	pop	{fp, pc}
   11d80:	andeq	r8, r2, ip, asr r1
   11d84:	push	{fp, lr}
   11d88:	add	fp, sp, #4
   11d8c:	sub	sp, sp, #56	; 0x38
   11d90:	str	r0, [fp, #-56]	; 0xffffffc8
   11d94:	str	r1, [fp, #-60]	; 0xffffffc4
   11d98:	sub	r3, fp, #52	; 0x34
   11d9c:	mov	r2, #48	; 0x30
   11da0:	mov	r1, #0
   11da4:	mov	r0, r3
   11da8:	bl	10e44 <memset@plt>
   11dac:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11db0:	cmp	r3, #10
   11db4:	bne	11dbc <__assert_fail@plt+0xee8>
   11db8:	bl	10ec8 <abort@plt>
   11dbc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11dc0:	str	r3, [fp, #-52]	; 0xffffffcc
   11dc4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11dc8:	mov	lr, r3
   11dcc:	sub	ip, fp, #52	; 0x34
   11dd0:	ldm	ip!, {r0, r1, r2, r3}
   11dd4:	stmia	lr!, {r0, r1, r2, r3}
   11dd8:	ldm	ip!, {r0, r1, r2, r3}
   11ddc:	stmia	lr!, {r0, r1, r2, r3}
   11de0:	ldm	ip, {r0, r1, r2, r3}
   11de4:	stm	lr, {r0, r1, r2, r3}
   11de8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11dec:	sub	sp, fp, #4
   11df0:	pop	{fp, pc}
   11df4:	push	{fp, lr}
   11df8:	add	fp, sp, #4
   11dfc:	sub	sp, sp, #16
   11e00:	str	r0, [fp, #-16]
   11e04:	str	r1, [fp, #-20]	; 0xffffffec
   11e08:	ldr	r0, [fp, #-16]
   11e0c:	bl	10df0 <gettext@plt>
   11e10:	str	r0, [fp, #-8]
   11e14:	ldr	r2, [fp, #-8]
   11e18:	ldr	r3, [fp, #-16]
   11e1c:	cmp	r2, r3
   11e20:	beq	11e2c <__assert_fail@plt+0xf58>
   11e24:	ldr	r3, [fp, #-8]
   11e28:	b	11ebc <__assert_fail@plt+0xfe8>
   11e2c:	bl	16b48 <__assert_fail@plt+0x5c74>
   11e30:	str	r0, [fp, #-12]
   11e34:	ldr	r1, [pc, #140]	; 11ec8 <__assert_fail@plt+0xff4>
   11e38:	ldr	r0, [fp, #-12]
   11e3c:	bl	1658c <__assert_fail@plt+0x56b8>
   11e40:	mov	r3, r0
   11e44:	cmp	r3, #0
   11e48:	bne	11e6c <__assert_fail@plt+0xf98>
   11e4c:	ldr	r3, [fp, #-16]
   11e50:	ldrb	r3, [r3]
   11e54:	cmp	r3, #96	; 0x60
   11e58:	bne	11e64 <__assert_fail@plt+0xf90>
   11e5c:	ldr	r3, [pc, #104]	; 11ecc <__assert_fail@plt+0xff8>
   11e60:	b	11ebc <__assert_fail@plt+0xfe8>
   11e64:	ldr	r3, [pc, #100]	; 11ed0 <__assert_fail@plt+0xffc>
   11e68:	b	11ebc <__assert_fail@plt+0xfe8>
   11e6c:	ldr	r1, [pc, #96]	; 11ed4 <__assert_fail@plt+0x1000>
   11e70:	ldr	r0, [fp, #-12]
   11e74:	bl	1658c <__assert_fail@plt+0x56b8>
   11e78:	mov	r3, r0
   11e7c:	cmp	r3, #0
   11e80:	bne	11ea4 <__assert_fail@plt+0xfd0>
   11e84:	ldr	r3, [fp, #-16]
   11e88:	ldrb	r3, [r3]
   11e8c:	cmp	r3, #96	; 0x60
   11e90:	bne	11e9c <__assert_fail@plt+0xfc8>
   11e94:	ldr	r3, [pc, #60]	; 11ed8 <__assert_fail@plt+0x1004>
   11e98:	b	11ebc <__assert_fail@plt+0xfe8>
   11e9c:	ldr	r3, [pc, #56]	; 11edc <__assert_fail@plt+0x1008>
   11ea0:	b	11ebc <__assert_fail@plt+0xfe8>
   11ea4:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ea8:	cmp	r3, #9
   11eac:	bne	11eb8 <__assert_fail@plt+0xfe4>
   11eb0:	ldr	r3, [pc, #40]	; 11ee0 <__assert_fail@plt+0x100c>
   11eb4:	b	11ebc <__assert_fail@plt+0xfe8>
   11eb8:	ldr	r3, [pc, #36]	; 11ee4 <__assert_fail@plt+0x1010>
   11ebc:	mov	r0, r3
   11ec0:	sub	sp, fp, #4
   11ec4:	pop	{fp, pc}
   11ec8:			; <UNDEFINED> instruction: 0x00017ab0
   11ecc:			; <UNDEFINED> instruction: 0x00017ab8
   11ed0:			; <UNDEFINED> instruction: 0x00017abc
   11ed4:	andeq	r7, r1, r0, asr #21
   11ed8:	andeq	r7, r1, r8, asr #21
   11edc:	andeq	r7, r1, ip, asr #21
   11ee0:	ldrdeq	r7, [r1], -r0
   11ee4:	ldrdeq	r7, [r1], -r4
   11ee8:	push	{r4, fp, lr}
   11eec:	add	fp, sp, #8
   11ef0:	sub	sp, sp, #116	; 0x74
   11ef4:	str	r0, [fp, #-88]	; 0xffffffa8
   11ef8:	str	r1, [fp, #-92]	; 0xffffffa4
   11efc:	str	r2, [fp, #-96]	; 0xffffffa0
   11f00:	str	r3, [fp, #-100]	; 0xffffff9c
   11f04:	mov	r3, #0
   11f08:	str	r3, [fp, #-20]	; 0xffffffec
   11f0c:	mov	r3, #0
   11f10:	str	r3, [fp, #-24]	; 0xffffffe8
   11f14:	mov	r3, #0
   11f18:	str	r3, [fp, #-28]	; 0xffffffe4
   11f1c:	mov	r3, #0
   11f20:	str	r3, [fp, #-32]	; 0xffffffe0
   11f24:	mov	r3, #0
   11f28:	strb	r3, [fp, #-33]	; 0xffffffdf
   11f2c:	bl	10d54 <__ctype_get_mb_cur_max@plt>
   11f30:	mov	r3, r0
   11f34:	cmp	r3, #1
   11f38:	moveq	r3, #1
   11f3c:	movne	r3, #0
   11f40:	strb	r3, [fp, #-57]	; 0xffffffc7
   11f44:	ldr	r3, [fp, #8]
   11f48:	and	r3, r3, #2
   11f4c:	cmp	r3, #0
   11f50:	movne	r3, #1
   11f54:	moveq	r3, #0
   11f58:	strb	r3, [fp, #-34]	; 0xffffffde
   11f5c:	mov	r3, #0
   11f60:	strb	r3, [fp, #-35]	; 0xffffffdd
   11f64:	mov	r3, #0
   11f68:	strb	r3, [fp, #-36]	; 0xffffffdc
   11f6c:	mov	r3, #1
   11f70:	strb	r3, [fp, #-37]	; 0xffffffdb
   11f74:	ldr	r3, [fp, #4]
   11f78:	cmp	r3, #10
   11f7c:	ldrls	pc, [pc, r3, lsl #2]
   11f80:	b	12188 <__assert_fail@plt+0x12b4>
   11f84:	andeq	r2, r1, ip, ror r1
   11f88:	strdeq	r2, [r1], -r8
   11f8c:	andeq	r2, r1, ip, lsl r1
   11f90:	strdeq	r2, [r1], -r0
   11f94:	andeq	r2, r1, r0, lsl #2
   11f98:	andeq	r1, r1, r0, asr #31
   11f9c:			; <UNDEFINED> instruction: 0x00011fb0
   11fa0:	andeq	r2, r1, r0, lsr #32
   11fa4:	andeq	r2, r1, r4, lsr r0
   11fa8:	andeq	r2, r1, r4, lsr r0
   11fac:	andeq	r2, r1, r4, lsr r0
   11fb0:	mov	r3, #5
   11fb4:	str	r3, [fp, #4]
   11fb8:	mov	r3, #1
   11fbc:	strb	r3, [fp, #-34]	; 0xffffffde
   11fc0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   11fc4:	eor	r3, r3, #1
   11fc8:	uxtb	r3, r3
   11fcc:	cmp	r3, #0
   11fd0:	beq	12004 <__assert_fail@plt+0x1130>
   11fd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   11fd8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11fdc:	cmp	r2, r3
   11fe0:	bcs	11ff8 <__assert_fail@plt+0x1124>
   11fe4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   11fe8:	ldr	r3, [fp, #-20]	; 0xffffffec
   11fec:	add	r3, r2, r3
   11ff0:	mov	r2, #34	; 0x22
   11ff4:	strb	r2, [r3]
   11ff8:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ffc:	add	r3, r3, #1
   12000:	str	r3, [fp, #-20]	; 0xffffffec
   12004:	mov	r3, #1
   12008:	strb	r3, [fp, #-33]	; 0xffffffdf
   1200c:	ldr	r3, [pc, #3872]	; 12f34 <__assert_fail@plt+0x2060>
   12010:	str	r3, [fp, #-28]	; 0xffffffe4
   12014:	mov	r3, #1
   12018:	str	r3, [fp, #-32]	; 0xffffffe0
   1201c:	b	1218c <__assert_fail@plt+0x12b8>
   12020:	mov	r3, #1
   12024:	strb	r3, [fp, #-33]	; 0xffffffdf
   12028:	mov	r3, #0
   1202c:	strb	r3, [fp, #-34]	; 0xffffffde
   12030:	b	1218c <__assert_fail@plt+0x12b8>
   12034:	ldr	r3, [fp, #4]
   12038:	cmp	r3, #10
   1203c:	beq	12060 <__assert_fail@plt+0x118c>
   12040:	ldr	r1, [fp, #4]
   12044:	ldr	r0, [pc, #3820]	; 12f38 <__assert_fail@plt+0x2064>
   12048:	bl	11df4 <__assert_fail@plt+0xf20>
   1204c:	str	r0, [fp, #16]
   12050:	ldr	r1, [fp, #4]
   12054:	ldr	r0, [pc, #3808]	; 12f3c <__assert_fail@plt+0x2068>
   12058:	bl	11df4 <__assert_fail@plt+0xf20>
   1205c:	str	r0, [fp, #20]
   12060:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12064:	eor	r3, r3, #1
   12068:	uxtb	r3, r3
   1206c:	cmp	r3, #0
   12070:	beq	120d0 <__assert_fail@plt+0x11fc>
   12074:	ldr	r3, [fp, #16]
   12078:	str	r3, [fp, #-28]	; 0xffffffe4
   1207c:	b	120c0 <__assert_fail@plt+0x11ec>
   12080:	ldr	r2, [fp, #-20]	; 0xffffffec
   12084:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12088:	cmp	r2, r3
   1208c:	bcs	120a8 <__assert_fail@plt+0x11d4>
   12090:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12094:	ldr	r3, [fp, #-20]	; 0xffffffec
   12098:	add	r3, r2, r3
   1209c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   120a0:	ldrb	r2, [r2]
   120a4:	strb	r2, [r3]
   120a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   120ac:	add	r3, r3, #1
   120b0:	str	r3, [fp, #-20]	; 0xffffffec
   120b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120b8:	add	r3, r3, #1
   120bc:	str	r3, [fp, #-28]	; 0xffffffe4
   120c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120c4:	ldrb	r3, [r3]
   120c8:	cmp	r3, #0
   120cc:	bne	12080 <__assert_fail@plt+0x11ac>
   120d0:	mov	r3, #1
   120d4:	strb	r3, [fp, #-33]	; 0xffffffdf
   120d8:	ldr	r3, [fp, #20]
   120dc:	str	r3, [fp, #-28]	; 0xffffffe4
   120e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   120e4:	bl	10e08 <strlen@plt>
   120e8:	str	r0, [fp, #-32]	; 0xffffffe0
   120ec:	b	1218c <__assert_fail@plt+0x12b8>
   120f0:	mov	r3, #1
   120f4:	strb	r3, [fp, #-33]	; 0xffffffdf
   120f8:	mov	r3, #1
   120fc:	strb	r3, [fp, #-34]	; 0xffffffde
   12100:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12104:	eor	r3, r3, #1
   12108:	uxtb	r3, r3
   1210c:	cmp	r3, #0
   12110:	beq	1211c <__assert_fail@plt+0x1248>
   12114:	mov	r3, #1
   12118:	strb	r3, [fp, #-33]	; 0xffffffdf
   1211c:	mov	r3, #2
   12120:	str	r3, [fp, #4]
   12124:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12128:	eor	r3, r3, #1
   1212c:	uxtb	r3, r3
   12130:	cmp	r3, #0
   12134:	beq	12168 <__assert_fail@plt+0x1294>
   12138:	ldr	r2, [fp, #-20]	; 0xffffffec
   1213c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12140:	cmp	r2, r3
   12144:	bcs	1215c <__assert_fail@plt+0x1288>
   12148:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1214c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12150:	add	r3, r2, r3
   12154:	mov	r2, #39	; 0x27
   12158:	strb	r2, [r3]
   1215c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12160:	add	r3, r3, #1
   12164:	str	r3, [fp, #-20]	; 0xffffffec
   12168:	ldr	r3, [pc, #3532]	; 12f3c <__assert_fail@plt+0x2068>
   1216c:	str	r3, [fp, #-28]	; 0xffffffe4
   12170:	mov	r3, #1
   12174:	str	r3, [fp, #-32]	; 0xffffffe0
   12178:	b	1218c <__assert_fail@plt+0x12b8>
   1217c:	mov	r3, #0
   12180:	strb	r3, [fp, #-34]	; 0xffffffde
   12184:	b	1218c <__assert_fail@plt+0x12b8>
   12188:	bl	10ec8 <abort@plt>
   1218c:	mov	r3, #0
   12190:	str	r3, [fp, #-16]
   12194:	b	13324 <__assert_fail@plt+0x2450>
   12198:	mov	r3, #0
   1219c:	strb	r3, [fp, #-40]	; 0xffffffd8
   121a0:	mov	r3, #0
   121a4:	strb	r3, [fp, #-41]	; 0xffffffd7
   121a8:	mov	r3, #0
   121ac:	strb	r3, [fp, #-42]	; 0xffffffd6
   121b0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   121b4:	cmp	r3, #0
   121b8:	beq	12254 <__assert_fail@plt+0x1380>
   121bc:	ldr	r3, [fp, #4]
   121c0:	cmp	r3, #2
   121c4:	beq	12254 <__assert_fail@plt+0x1380>
   121c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121cc:	cmp	r3, #0
   121d0:	beq	12254 <__assert_fail@plt+0x1380>
   121d4:	ldr	r2, [fp, #-16]
   121d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121dc:	add	r4, r2, r3
   121e0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   121e4:	cmn	r3, #1
   121e8:	bne	1220c <__assert_fail@plt+0x1338>
   121ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121f0:	cmp	r3, #1
   121f4:	bls	1220c <__assert_fail@plt+0x1338>
   121f8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   121fc:	bl	10e08 <strlen@plt>
   12200:	str	r0, [fp, #-100]	; 0xffffff9c
   12204:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12208:	b	12210 <__assert_fail@plt+0x133c>
   1220c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12210:	cmp	r4, r3
   12214:	bhi	12254 <__assert_fail@plt+0x1380>
   12218:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1221c:	ldr	r3, [fp, #-16]
   12220:	add	r3, r2, r3
   12224:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12228:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1222c:	mov	r0, r3
   12230:	bl	10cf4 <memcmp@plt>
   12234:	mov	r3, r0
   12238:	cmp	r3, #0
   1223c:	bne	12254 <__assert_fail@plt+0x1380>
   12240:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12244:	cmp	r3, #0
   12248:	bne	134e0 <__assert_fail@plt+0x260c>
   1224c:	mov	r3, #1
   12250:	strb	r3, [fp, #-40]	; 0xffffffd8
   12254:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12258:	ldr	r3, [fp, #-16]
   1225c:	add	r3, r2, r3
   12260:	ldrb	r3, [r3]
   12264:	strb	r3, [fp, #-38]	; 0xffffffda
   12268:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1226c:	cmp	r3, #126	; 0x7e
   12270:	ldrls	pc, [pc, r3, lsl #2]
   12274:	b	12aa0 <__assert_fail@plt+0x1bcc>
   12278:	andeq	r2, r1, r4, ror r4
   1227c:	andeq	r2, r1, r0, lsr #21
   12280:	andeq	r2, r1, r0, lsr #21
   12284:	andeq	r2, r1, r0, lsr #21
   12288:	andeq	r2, r1, r0, lsr #21
   1228c:	andeq	r2, r1, r0, lsr #21
   12290:	andeq	r2, r1, r0, lsr #21
   12294:	andeq	r2, r1, r4, ror #16
   12298:	andeq	r2, r1, r0, ror r8
   1229c:	andeq	r2, r1, r0, lsr #17
   122a0:	andeq	r2, r1, r8, lsl #17
   122a4:	andeq	r2, r1, ip, lsr #17
   122a8:	andeq	r2, r1, ip, ror r8
   122ac:	muleq	r1, r4, r8
   122b0:	andeq	r2, r1, r0, lsr #21
   122b4:	andeq	r2, r1, r0, lsr #21
   122b8:	andeq	r2, r1, r0, lsr #21
   122bc:	andeq	r2, r1, r0, lsr #21
   122c0:	andeq	r2, r1, r0, lsr #21
   122c4:	andeq	r2, r1, r0, lsr #21
   122c8:	andeq	r2, r1, r0, lsr #21
   122cc:	andeq	r2, r1, r0, lsr #21
   122d0:	andeq	r2, r1, r0, lsr #21
   122d4:	andeq	r2, r1, r0, lsr #21
   122d8:	andeq	r2, r1, r0, lsr #21
   122dc:	andeq	r2, r1, r0, lsr #21
   122e0:	andeq	r2, r1, r0, lsr #21
   122e4:	andeq	r2, r1, r0, lsr #21
   122e8:	andeq	r2, r1, r0, lsr #21
   122ec:	andeq	r2, r1, r0, lsr #21
   122f0:	andeq	r2, r1, r0, lsr #21
   122f4:	andeq	r2, r1, r0, lsr #21
   122f8:	andeq	r2, r1, r4, lsl #19
   122fc:	andeq	r2, r1, ip, lsl #19
   12300:	andeq	r2, r1, ip, lsl #19
   12304:	andeq	r2, r1, r8, ror r9
   12308:	andeq	r2, r1, ip, lsl #19
   1230c:	muleq	r1, r4, sl
   12310:	andeq	r2, r1, ip, lsl #19
   12314:	andeq	r2, r1, r8, lsr #19
   12318:	andeq	r2, r1, ip, lsl #19
   1231c:	andeq	r2, r1, ip, lsl #19
   12320:	andeq	r2, r1, ip, lsl #19
   12324:	muleq	r1, r4, sl
   12328:	muleq	r1, r4, sl
   1232c:	muleq	r1, r4, sl
   12330:	muleq	r1, r4, sl
   12334:	muleq	r1, r4, sl
   12338:	muleq	r1, r4, sl
   1233c:	muleq	r1, r4, sl
   12340:	muleq	r1, r4, sl
   12344:	muleq	r1, r4, sl
   12348:	muleq	r1, r4, sl
   1234c:	muleq	r1, r4, sl
   12350:	muleq	r1, r4, sl
   12354:	muleq	r1, r4, sl
   12358:	muleq	r1, r4, sl
   1235c:	muleq	r1, r4, sl
   12360:	muleq	r1, r4, sl
   12364:	andeq	r2, r1, ip, lsl #19
   12368:	andeq	r2, r1, ip, lsl #19
   1236c:	andeq	r2, r1, ip, lsl #19
   12370:	andeq	r2, r1, ip, lsl #19
   12374:	andeq	r2, r1, r4, asr r6
   12378:	andeq	r2, r1, r0, lsr #21
   1237c:	muleq	r1, r4, sl
   12380:	muleq	r1, r4, sl
   12384:	muleq	r1, r4, sl
   12388:	muleq	r1, r4, sl
   1238c:	muleq	r1, r4, sl
   12390:	muleq	r1, r4, sl
   12394:	muleq	r1, r4, sl
   12398:	muleq	r1, r4, sl
   1239c:	muleq	r1, r4, sl
   123a0:	muleq	r1, r4, sl
   123a4:	muleq	r1, r4, sl
   123a8:	muleq	r1, r4, sl
   123ac:	muleq	r1, r4, sl
   123b0:	muleq	r1, r4, sl
   123b4:	muleq	r1, r4, sl
   123b8:	muleq	r1, r4, sl
   123bc:	muleq	r1, r4, sl
   123c0:	muleq	r1, r4, sl
   123c4:	muleq	r1, r4, sl
   123c8:	muleq	r1, r4, sl
   123cc:	muleq	r1, r4, sl
   123d0:	muleq	r1, r4, sl
   123d4:	muleq	r1, r4, sl
   123d8:	muleq	r1, r4, sl
   123dc:	muleq	r1, r4, sl
   123e0:	muleq	r1, r4, sl
   123e4:	andeq	r2, r1, ip, lsl #19
   123e8:			; <UNDEFINED> instruction: 0x000128b8
   123ec:	muleq	r1, r4, sl
   123f0:	andeq	r2, r1, ip, lsl #19
   123f4:	muleq	r1, r4, sl
   123f8:	andeq	r2, r1, ip, lsl #19
   123fc:	muleq	r1, r4, sl
   12400:	muleq	r1, r4, sl
   12404:	muleq	r1, r4, sl
   12408:	muleq	r1, r4, sl
   1240c:	muleq	r1, r4, sl
   12410:	muleq	r1, r4, sl
   12414:	muleq	r1, r4, sl
   12418:	muleq	r1, r4, sl
   1241c:	muleq	r1, r4, sl
   12420:	muleq	r1, r4, sl
   12424:	muleq	r1, r4, sl
   12428:	muleq	r1, r4, sl
   1242c:	muleq	r1, r4, sl
   12430:	muleq	r1, r4, sl
   12434:	muleq	r1, r4, sl
   12438:	muleq	r1, r4, sl
   1243c:	muleq	r1, r4, sl
   12440:	muleq	r1, r4, sl
   12444:	muleq	r1, r4, sl
   12448:	muleq	r1, r4, sl
   1244c:	muleq	r1, r4, sl
   12450:	muleq	r1, r4, sl
   12454:	muleq	r1, r4, sl
   12458:	muleq	r1, r4, sl
   1245c:	muleq	r1, r4, sl
   12460:	muleq	r1, r4, sl
   12464:	andeq	r2, r1, r0, lsr r9
   12468:	andeq	r2, r1, ip, lsl #19
   1246c:	andeq	r2, r1, r0, lsr r9
   12470:	andeq	r2, r1, r8, ror r9
   12474:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12478:	cmp	r3, #0
   1247c:	beq	12640 <__assert_fail@plt+0x176c>
   12480:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12484:	cmp	r3, #0
   12488:	bne	134e8 <__assert_fail@plt+0x2614>
   1248c:	mov	r3, #1
   12490:	strb	r3, [fp, #-41]	; 0xffffffd7
   12494:	ldr	r3, [fp, #4]
   12498:	cmp	r3, #2
   1249c:	bne	1254c <__assert_fail@plt+0x1678>
   124a0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   124a4:	eor	r3, r3, #1
   124a8:	uxtb	r3, r3
   124ac:	cmp	r3, #0
   124b0:	beq	1254c <__assert_fail@plt+0x1678>
   124b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   124b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   124bc:	cmp	r2, r3
   124c0:	bcs	124d8 <__assert_fail@plt+0x1604>
   124c4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   124c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   124cc:	add	r3, r2, r3
   124d0:	mov	r2, #39	; 0x27
   124d4:	strb	r2, [r3]
   124d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   124dc:	add	r3, r3, #1
   124e0:	str	r3, [fp, #-20]	; 0xffffffec
   124e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   124e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   124ec:	cmp	r2, r3
   124f0:	bcs	12508 <__assert_fail@plt+0x1634>
   124f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   124f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   124fc:	add	r3, r2, r3
   12500:	mov	r2, #36	; 0x24
   12504:	strb	r2, [r3]
   12508:	ldr	r3, [fp, #-20]	; 0xffffffec
   1250c:	add	r3, r3, #1
   12510:	str	r3, [fp, #-20]	; 0xffffffec
   12514:	ldr	r2, [fp, #-20]	; 0xffffffec
   12518:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1251c:	cmp	r2, r3
   12520:	bcs	12538 <__assert_fail@plt+0x1664>
   12524:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12528:	ldr	r3, [fp, #-20]	; 0xffffffec
   1252c:	add	r3, r2, r3
   12530:	mov	r2, #39	; 0x27
   12534:	strb	r2, [r3]
   12538:	ldr	r3, [fp, #-20]	; 0xffffffec
   1253c:	add	r3, r3, #1
   12540:	str	r3, [fp, #-20]	; 0xffffffec
   12544:	mov	r3, #1
   12548:	strb	r3, [fp, #-35]	; 0xffffffdd
   1254c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12550:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12554:	cmp	r2, r3
   12558:	bcs	12570 <__assert_fail@plt+0x169c>
   1255c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12560:	ldr	r3, [fp, #-20]	; 0xffffffec
   12564:	add	r3, r2, r3
   12568:	mov	r2, #92	; 0x5c
   1256c:	strb	r2, [r3]
   12570:	ldr	r3, [fp, #-20]	; 0xffffffec
   12574:	add	r3, r3, #1
   12578:	str	r3, [fp, #-20]	; 0xffffffec
   1257c:	ldr	r3, [fp, #4]
   12580:	cmp	r3, #2
   12584:	beq	12634 <__assert_fail@plt+0x1760>
   12588:	ldr	r3, [fp, #-16]
   1258c:	add	r2, r3, #1
   12590:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12594:	cmp	r2, r3
   12598:	bcs	12634 <__assert_fail@plt+0x1760>
   1259c:	ldr	r3, [fp, #-16]
   125a0:	add	r3, r3, #1
   125a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   125a8:	add	r3, r2, r3
   125ac:	ldrb	r3, [r3]
   125b0:	cmp	r3, #47	; 0x2f
   125b4:	bls	12634 <__assert_fail@plt+0x1760>
   125b8:	ldr	r3, [fp, #-16]
   125bc:	add	r3, r3, #1
   125c0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   125c4:	add	r3, r2, r3
   125c8:	ldrb	r3, [r3]
   125cc:	cmp	r3, #57	; 0x39
   125d0:	bhi	12634 <__assert_fail@plt+0x1760>
   125d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   125d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   125dc:	cmp	r2, r3
   125e0:	bcs	125f8 <__assert_fail@plt+0x1724>
   125e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   125e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   125ec:	add	r3, r2, r3
   125f0:	mov	r2, #48	; 0x30
   125f4:	strb	r2, [r3]
   125f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   125fc:	add	r3, r3, #1
   12600:	str	r3, [fp, #-20]	; 0xffffffec
   12604:	ldr	r2, [fp, #-20]	; 0xffffffec
   12608:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1260c:	cmp	r2, r3
   12610:	bcs	12628 <__assert_fail@plt+0x1754>
   12614:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12618:	ldr	r3, [fp, #-20]	; 0xffffffec
   1261c:	add	r3, r2, r3
   12620:	mov	r2, #48	; 0x30
   12624:	strb	r2, [r3]
   12628:	ldr	r3, [fp, #-20]	; 0xffffffec
   1262c:	add	r3, r3, #1
   12630:	str	r3, [fp, #-20]	; 0xffffffec
   12634:	mov	r3, #48	; 0x30
   12638:	strb	r3, [fp, #-38]	; 0xffffffda
   1263c:	b	1307c <__assert_fail@plt+0x21a8>
   12640:	ldr	r3, [fp, #8]
   12644:	and	r3, r3, #1
   12648:	cmp	r3, #0
   1264c:	beq	1307c <__assert_fail@plt+0x21a8>
   12650:	b	13318 <__assert_fail@plt+0x2444>
   12654:	ldr	r3, [fp, #4]
   12658:	cmp	r3, #2
   1265c:	beq	1266c <__assert_fail@plt+0x1798>
   12660:	cmp	r3, #5
   12664:	beq	1267c <__assert_fail@plt+0x17a8>
   12668:	b	12860 <__assert_fail@plt+0x198c>
   1266c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12670:	cmp	r3, #0
   12674:	beq	12854 <__assert_fail@plt+0x1980>
   12678:	b	13524 <__assert_fail@plt+0x2650>
   1267c:	ldr	r3, [fp, #8]
   12680:	and	r3, r3, #4
   12684:	cmp	r3, #0
   12688:	beq	1285c <__assert_fail@plt+0x1988>
   1268c:	ldr	r3, [fp, #-16]
   12690:	add	r2, r3, #2
   12694:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12698:	cmp	r2, r3
   1269c:	bcs	1285c <__assert_fail@plt+0x1988>
   126a0:	ldr	r3, [fp, #-16]
   126a4:	add	r3, r3, #1
   126a8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   126ac:	add	r3, r2, r3
   126b0:	ldrb	r3, [r3]
   126b4:	cmp	r3, #63	; 0x3f
   126b8:	bne	1285c <__assert_fail@plt+0x1988>
   126bc:	ldr	r3, [fp, #-16]
   126c0:	add	r3, r3, #2
   126c4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   126c8:	add	r3, r2, r3
   126cc:	ldrb	r3, [r3]
   126d0:	sub	r3, r3, #33	; 0x21
   126d4:	cmp	r3, #29
   126d8:	ldrls	pc, [pc, r3, lsl #2]
   126dc:	b	1284c <__assert_fail@plt+0x1978>
   126e0:	andeq	r2, r1, r8, asr r7
   126e4:	andeq	r2, r1, ip, asr #16
   126e8:	andeq	r2, r1, ip, asr #16
   126ec:	andeq	r2, r1, ip, asr #16
   126f0:	andeq	r2, r1, ip, asr #16
   126f4:	andeq	r2, r1, ip, asr #16
   126f8:	andeq	r2, r1, r8, asr r7
   126fc:	andeq	r2, r1, r8, asr r7
   12700:	andeq	r2, r1, r8, asr r7
   12704:	andeq	r2, r1, ip, asr #16
   12708:	andeq	r2, r1, ip, asr #16
   1270c:	andeq	r2, r1, ip, asr #16
   12710:	andeq	r2, r1, r8, asr r7
   12714:	andeq	r2, r1, ip, asr #16
   12718:	andeq	r2, r1, r8, asr r7
   1271c:	andeq	r2, r1, ip, asr #16
   12720:	andeq	r2, r1, ip, asr #16
   12724:	andeq	r2, r1, ip, asr #16
   12728:	andeq	r2, r1, ip, asr #16
   1272c:	andeq	r2, r1, ip, asr #16
   12730:	andeq	r2, r1, ip, asr #16
   12734:	andeq	r2, r1, ip, asr #16
   12738:	andeq	r2, r1, ip, asr #16
   1273c:	andeq	r2, r1, ip, asr #16
   12740:	andeq	r2, r1, ip, asr #16
   12744:	andeq	r2, r1, ip, asr #16
   12748:	andeq	r2, r1, ip, asr #16
   1274c:	andeq	r2, r1, r8, asr r7
   12750:	andeq	r2, r1, r8, asr r7
   12754:	andeq	r2, r1, r8, asr r7
   12758:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1275c:	cmp	r3, #0
   12760:	bne	134f0 <__assert_fail@plt+0x261c>
   12764:	ldr	r3, [fp, #-16]
   12768:	add	r3, r3, #2
   1276c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12770:	add	r3, r2, r3
   12774:	ldrb	r3, [r3]
   12778:	strb	r3, [fp, #-38]	; 0xffffffda
   1277c:	ldr	r3, [fp, #-16]
   12780:	add	r3, r3, #2
   12784:	str	r3, [fp, #-16]
   12788:	ldr	r2, [fp, #-20]	; 0xffffffec
   1278c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12790:	cmp	r2, r3
   12794:	bcs	127ac <__assert_fail@plt+0x18d8>
   12798:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1279c:	ldr	r3, [fp, #-20]	; 0xffffffec
   127a0:	add	r3, r2, r3
   127a4:	mov	r2, #63	; 0x3f
   127a8:	strb	r2, [r3]
   127ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   127b0:	add	r3, r3, #1
   127b4:	str	r3, [fp, #-20]	; 0xffffffec
   127b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   127bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   127c0:	cmp	r2, r3
   127c4:	bcs	127dc <__assert_fail@plt+0x1908>
   127c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   127cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   127d0:	add	r3, r2, r3
   127d4:	mov	r2, #34	; 0x22
   127d8:	strb	r2, [r3]
   127dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   127e0:	add	r3, r3, #1
   127e4:	str	r3, [fp, #-20]	; 0xffffffec
   127e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   127ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   127f0:	cmp	r2, r3
   127f4:	bcs	1280c <__assert_fail@plt+0x1938>
   127f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   127fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12800:	add	r3, r2, r3
   12804:	mov	r2, #34	; 0x22
   12808:	strb	r2, [r3]
   1280c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12810:	add	r3, r3, #1
   12814:	str	r3, [fp, #-20]	; 0xffffffec
   12818:	ldr	r2, [fp, #-20]	; 0xffffffec
   1281c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12820:	cmp	r2, r3
   12824:	bcs	1283c <__assert_fail@plt+0x1968>
   12828:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1282c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12830:	add	r3, r2, r3
   12834:	mov	r2, #63	; 0x3f
   12838:	strb	r2, [r3]
   1283c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12840:	add	r3, r3, #1
   12844:	str	r3, [fp, #-20]	; 0xffffffec
   12848:	b	12850 <__assert_fail@plt+0x197c>
   1284c:	nop			; (mov r0, r0)
   12850:	b	1285c <__assert_fail@plt+0x1988>
   12854:	nop			; (mov r0, r0)
   12858:	b	130a8 <__assert_fail@plt+0x21d4>
   1285c:	nop			; (mov r0, r0)
   12860:	b	130a8 <__assert_fail@plt+0x21d4>
   12864:	mov	r3, #97	; 0x61
   12868:	strb	r3, [fp, #-39]	; 0xffffffd9
   1286c:	b	12918 <__assert_fail@plt+0x1a44>
   12870:	mov	r3, #98	; 0x62
   12874:	strb	r3, [fp, #-39]	; 0xffffffd9
   12878:	b	12918 <__assert_fail@plt+0x1a44>
   1287c:	mov	r3, #102	; 0x66
   12880:	strb	r3, [fp, #-39]	; 0xffffffd9
   12884:	b	12918 <__assert_fail@plt+0x1a44>
   12888:	mov	r3, #110	; 0x6e
   1288c:	strb	r3, [fp, #-39]	; 0xffffffd9
   12890:	b	12900 <__assert_fail@plt+0x1a2c>
   12894:	mov	r3, #114	; 0x72
   12898:	strb	r3, [fp, #-39]	; 0xffffffd9
   1289c:	b	12900 <__assert_fail@plt+0x1a2c>
   128a0:	mov	r3, #116	; 0x74
   128a4:	strb	r3, [fp, #-39]	; 0xffffffd9
   128a8:	b	12900 <__assert_fail@plt+0x1a2c>
   128ac:	mov	r3, #118	; 0x76
   128b0:	strb	r3, [fp, #-39]	; 0xffffffd9
   128b4:	b	12918 <__assert_fail@plt+0x1a44>
   128b8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   128bc:	strb	r3, [fp, #-39]	; 0xffffffd9
   128c0:	ldr	r3, [fp, #4]
   128c4:	cmp	r3, #2
   128c8:	bne	128dc <__assert_fail@plt+0x1a08>
   128cc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   128d0:	cmp	r3, #0
   128d4:	beq	13230 <__assert_fail@plt+0x235c>
   128d8:	b	13524 <__assert_fail@plt+0x2650>
   128dc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   128e0:	cmp	r3, #0
   128e4:	beq	12900 <__assert_fail@plt+0x1a2c>
   128e8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   128ec:	cmp	r3, #0
   128f0:	beq	12900 <__assert_fail@plt+0x1a2c>
   128f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   128f8:	cmp	r3, #0
   128fc:	bne	13238 <__assert_fail@plt+0x2364>
   12900:	ldr	r3, [fp, #4]
   12904:	cmp	r3, #2
   12908:	bne	12918 <__assert_fail@plt+0x1a44>
   1290c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12910:	cmp	r3, #0
   12914:	bne	134f8 <__assert_fail@plt+0x2624>
   12918:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1291c:	cmp	r3, #0
   12920:	beq	13084 <__assert_fail@plt+0x21b0>
   12924:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   12928:	strb	r3, [fp, #-38]	; 0xffffffda
   1292c:	b	13130 <__assert_fail@plt+0x225c>
   12930:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12934:	cmn	r3, #1
   12938:	bne	1295c <__assert_fail@plt+0x1a88>
   1293c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   12940:	add	r3, r3, #1
   12944:	ldrb	r3, [r3]
   12948:	cmp	r3, #0
   1294c:	movne	r3, #1
   12950:	moveq	r3, #0
   12954:	uxtb	r3, r3
   12958:	b	12970 <__assert_fail@plt+0x1a9c>
   1295c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12960:	cmp	r3, #1
   12964:	movne	r3, #1
   12968:	moveq	r3, #0
   1296c:	uxtb	r3, r3
   12970:	cmp	r3, #0
   12974:	bne	1308c <__assert_fail@plt+0x21b8>
   12978:	ldr	r3, [fp, #-16]
   1297c:	cmp	r3, #0
   12980:	bne	13094 <__assert_fail@plt+0x21c0>
   12984:	mov	r3, #1
   12988:	strb	r3, [fp, #-42]	; 0xffffffd6
   1298c:	ldr	r3, [fp, #4]
   12990:	cmp	r3, #2
   12994:	bne	1309c <__assert_fail@plt+0x21c8>
   12998:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1299c:	cmp	r3, #0
   129a0:	beq	1309c <__assert_fail@plt+0x21c8>
   129a4:	b	13524 <__assert_fail@plt+0x2650>
   129a8:	mov	r3, #1
   129ac:	strb	r3, [fp, #-36]	; 0xffffffdc
   129b0:	mov	r3, #1
   129b4:	strb	r3, [fp, #-42]	; 0xffffffd6
   129b8:	ldr	r3, [fp, #4]
   129bc:	cmp	r3, #2
   129c0:	bne	130a4 <__assert_fail@plt+0x21d0>
   129c4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   129c8:	cmp	r3, #0
   129cc:	bne	13500 <__assert_fail@plt+0x262c>
   129d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   129d4:	cmp	r3, #0
   129d8:	beq	129f8 <__assert_fail@plt+0x1b24>
   129dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129e0:	cmp	r3, #0
   129e4:	bne	129f8 <__assert_fail@plt+0x1b24>
   129e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   129ec:	str	r3, [fp, #-24]	; 0xffffffe8
   129f0:	mov	r3, #0
   129f4:	str	r3, [fp, #-92]	; 0xffffffa4
   129f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   129fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a00:	cmp	r2, r3
   12a04:	bcs	12a1c <__assert_fail@plt+0x1b48>
   12a08:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12a0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a10:	add	r3, r2, r3
   12a14:	mov	r2, #39	; 0x27
   12a18:	strb	r2, [r3]
   12a1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a20:	add	r3, r3, #1
   12a24:	str	r3, [fp, #-20]	; 0xffffffec
   12a28:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a2c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a30:	cmp	r2, r3
   12a34:	bcs	12a4c <__assert_fail@plt+0x1b78>
   12a38:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12a3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a40:	add	r3, r2, r3
   12a44:	mov	r2, #92	; 0x5c
   12a48:	strb	r2, [r3]
   12a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a50:	add	r3, r3, #1
   12a54:	str	r3, [fp, #-20]	; 0xffffffec
   12a58:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a5c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a60:	cmp	r2, r3
   12a64:	bcs	12a7c <__assert_fail@plt+0x1ba8>
   12a68:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12a6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a70:	add	r3, r2, r3
   12a74:	mov	r2, #39	; 0x27
   12a78:	strb	r2, [r3]
   12a7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a80:	add	r3, r3, #1
   12a84:	str	r3, [fp, #-20]	; 0xffffffec
   12a88:	mov	r3, #0
   12a8c:	strb	r3, [fp, #-35]	; 0xffffffdd
   12a90:	b	130a4 <__assert_fail@plt+0x21d0>
   12a94:	mov	r3, #1
   12a98:	strb	r3, [fp, #-42]	; 0xffffffd6
   12a9c:	b	130a8 <__assert_fail@plt+0x21d4>
   12aa0:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   12aa4:	cmp	r3, #0
   12aa8:	beq	12ae8 <__assert_fail@plt+0x1c14>
   12aac:	mov	r3, #1
   12ab0:	str	r3, [fp, #-48]	; 0xffffffd0
   12ab4:	bl	10dd8 <__ctype_b_loc@plt>
   12ab8:	mov	r3, r0
   12abc:	ldr	r2, [r3]
   12ac0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12ac4:	lsl	r3, r3, #1
   12ac8:	add	r3, r2, r3
   12acc:	ldrh	r3, [r3]
   12ad0:	and	r3, r3, #16384	; 0x4000
   12ad4:	cmp	r3, #0
   12ad8:	movne	r3, #1
   12adc:	moveq	r3, #0
   12ae0:	strb	r3, [fp, #-49]	; 0xffffffcf
   12ae4:	b	12d34 <__assert_fail@plt+0x1e60>
   12ae8:	sub	r3, fp, #76	; 0x4c
   12aec:	mov	r2, #8
   12af0:	mov	r1, #0
   12af4:	mov	r0, r3
   12af8:	bl	10e44 <memset@plt>
   12afc:	mov	r3, #0
   12b00:	str	r3, [fp, #-48]	; 0xffffffd0
   12b04:	mov	r3, #1
   12b08:	strb	r3, [fp, #-49]	; 0xffffffcf
   12b0c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12b10:	cmn	r3, #1
   12b14:	bne	12b24 <__assert_fail@plt+0x1c50>
   12b18:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12b1c:	bl	10e08 <strlen@plt>
   12b20:	str	r0, [fp, #-100]	; 0xffffff9c
   12b24:	ldr	r2, [fp, #-16]
   12b28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12b2c:	add	r3, r2, r3
   12b30:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12b34:	add	r1, r2, r3
   12b38:	ldr	r2, [fp, #-16]
   12b3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12b40:	add	r3, r2, r3
   12b44:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12b48:	sub	r2, r2, r3
   12b4c:	sub	r3, fp, #76	; 0x4c
   12b50:	sub	r0, fp, #80	; 0x50
   12b54:	bl	16ba4 <__assert_fail@plt+0x5cd0>
   12b58:	str	r0, [fp, #-64]	; 0xffffffc0
   12b5c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12b60:	cmp	r3, #0
   12b64:	beq	12d28 <__assert_fail@plt+0x1e54>
   12b68:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12b6c:	cmn	r3, #1
   12b70:	bne	12b80 <__assert_fail@plt+0x1cac>
   12b74:	mov	r3, #0
   12b78:	strb	r3, [fp, #-49]	; 0xffffffcf
   12b7c:	b	12d34 <__assert_fail@plt+0x1e60>
   12b80:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12b84:	cmn	r3, #2
   12b88:	bne	12be0 <__assert_fail@plt+0x1d0c>
   12b8c:	mov	r3, #0
   12b90:	strb	r3, [fp, #-49]	; 0xffffffcf
   12b94:	b	12ba4 <__assert_fail@plt+0x1cd0>
   12b98:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12b9c:	add	r3, r3, #1
   12ba0:	str	r3, [fp, #-48]	; 0xffffffd0
   12ba4:	ldr	r2, [fp, #-16]
   12ba8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12bac:	add	r2, r2, r3
   12bb0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12bb4:	cmp	r2, r3
   12bb8:	bcs	12d30 <__assert_fail@plt+0x1e5c>
   12bbc:	ldr	r2, [fp, #-16]
   12bc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12bc4:	add	r3, r2, r3
   12bc8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12bcc:	add	r3, r2, r3
   12bd0:	ldrb	r3, [r3]
   12bd4:	cmp	r3, #0
   12bd8:	bne	12b98 <__assert_fail@plt+0x1cc4>
   12bdc:	b	12d30 <__assert_fail@plt+0x1e5c>
   12be0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12be4:	cmp	r3, #0
   12be8:	beq	12cdc <__assert_fail@plt+0x1e08>
   12bec:	ldr	r3, [fp, #4]
   12bf0:	cmp	r3, #2
   12bf4:	bne	12cdc <__assert_fail@plt+0x1e08>
   12bf8:	mov	r3, #1
   12bfc:	str	r3, [fp, #-56]	; 0xffffffc8
   12c00:	b	12ccc <__assert_fail@plt+0x1df8>
   12c04:	ldr	r2, [fp, #-16]
   12c08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c0c:	add	r2, r2, r3
   12c10:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c14:	add	r3, r2, r3
   12c18:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12c1c:	add	r3, r2, r3
   12c20:	ldrb	r3, [r3]
   12c24:	sub	r3, r3, #91	; 0x5b
   12c28:	cmp	r3, #33	; 0x21
   12c2c:	ldrls	pc, [pc, r3, lsl #2]
   12c30:	b	12cbc <__assert_fail@plt+0x1de8>
   12c34:	andeq	r3, r1, r8, lsl #10
   12c38:	andeq	r3, r1, r8, lsl #10
   12c3c:			; <UNDEFINED> instruction: 0x00012cbc
   12c40:	andeq	r3, r1, r8, lsl #10
   12c44:			; <UNDEFINED> instruction: 0x00012cbc
   12c48:	andeq	r3, r1, r8, lsl #10
   12c4c:			; <UNDEFINED> instruction: 0x00012cbc
   12c50:			; <UNDEFINED> instruction: 0x00012cbc
   12c54:			; <UNDEFINED> instruction: 0x00012cbc
   12c58:			; <UNDEFINED> instruction: 0x00012cbc
   12c5c:			; <UNDEFINED> instruction: 0x00012cbc
   12c60:			; <UNDEFINED> instruction: 0x00012cbc
   12c64:			; <UNDEFINED> instruction: 0x00012cbc
   12c68:			; <UNDEFINED> instruction: 0x00012cbc
   12c6c:			; <UNDEFINED> instruction: 0x00012cbc
   12c70:			; <UNDEFINED> instruction: 0x00012cbc
   12c74:			; <UNDEFINED> instruction: 0x00012cbc
   12c78:			; <UNDEFINED> instruction: 0x00012cbc
   12c7c:			; <UNDEFINED> instruction: 0x00012cbc
   12c80:			; <UNDEFINED> instruction: 0x00012cbc
   12c84:			; <UNDEFINED> instruction: 0x00012cbc
   12c88:			; <UNDEFINED> instruction: 0x00012cbc
   12c8c:			; <UNDEFINED> instruction: 0x00012cbc
   12c90:			; <UNDEFINED> instruction: 0x00012cbc
   12c94:			; <UNDEFINED> instruction: 0x00012cbc
   12c98:			; <UNDEFINED> instruction: 0x00012cbc
   12c9c:			; <UNDEFINED> instruction: 0x00012cbc
   12ca0:			; <UNDEFINED> instruction: 0x00012cbc
   12ca4:			; <UNDEFINED> instruction: 0x00012cbc
   12ca8:			; <UNDEFINED> instruction: 0x00012cbc
   12cac:			; <UNDEFINED> instruction: 0x00012cbc
   12cb0:			; <UNDEFINED> instruction: 0x00012cbc
   12cb4:			; <UNDEFINED> instruction: 0x00012cbc
   12cb8:	andeq	r3, r1, r8, lsl #10
   12cbc:	nop			; (mov r0, r0)
   12cc0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12cc4:	add	r3, r3, #1
   12cc8:	str	r3, [fp, #-56]	; 0xffffffc8
   12ccc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12cd0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12cd4:	cmp	r2, r3
   12cd8:	bcc	12c04 <__assert_fail@plt+0x1d30>
   12cdc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12ce0:	mov	r0, r3
   12ce4:	bl	10d30 <iswprint@plt>
   12ce8:	mov	r3, r0
   12cec:	cmp	r3, #0
   12cf0:	bne	12cfc <__assert_fail@plt+0x1e28>
   12cf4:	mov	r3, #0
   12cf8:	strb	r3, [fp, #-49]	; 0xffffffcf
   12cfc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12d00:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12d04:	add	r3, r2, r3
   12d08:	str	r3, [fp, #-48]	; 0xffffffd0
   12d0c:	sub	r3, fp, #76	; 0x4c
   12d10:	mov	r0, r3
   12d14:	bl	10cdc <mbsinit@plt>
   12d18:	mov	r3, r0
   12d1c:	cmp	r3, #0
   12d20:	beq	12b24 <__assert_fail@plt+0x1c50>
   12d24:	b	12d34 <__assert_fail@plt+0x1e60>
   12d28:	nop			; (mov r0, r0)
   12d2c:	b	12d34 <__assert_fail@plt+0x1e60>
   12d30:	nop			; (mov r0, r0)
   12d34:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12d38:	strb	r3, [fp, #-42]	; 0xffffffd6
   12d3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12d40:	cmp	r3, #1
   12d44:	bhi	12d68 <__assert_fail@plt+0x1e94>
   12d48:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12d4c:	cmp	r3, #0
   12d50:	beq	130a8 <__assert_fail@plt+0x21d4>
   12d54:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12d58:	eor	r3, r3, #1
   12d5c:	uxtb	r3, r3
   12d60:	cmp	r3, #0
   12d64:	beq	130a8 <__assert_fail@plt+0x21d4>
   12d68:	ldr	r2, [fp, #-16]
   12d6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12d70:	add	r3, r2, r3
   12d74:	str	r3, [fp, #-68]	; 0xffffffbc
   12d78:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12d7c:	cmp	r3, #0
   12d80:	beq	12f40 <__assert_fail@plt+0x206c>
   12d84:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12d88:	eor	r3, r3, #1
   12d8c:	uxtb	r3, r3
   12d90:	cmp	r3, #0
   12d94:	beq	12f40 <__assert_fail@plt+0x206c>
   12d98:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12d9c:	cmp	r3, #0
   12da0:	bne	13510 <__assert_fail@plt+0x263c>
   12da4:	mov	r3, #1
   12da8:	strb	r3, [fp, #-41]	; 0xffffffd7
   12dac:	ldr	r3, [fp, #4]
   12db0:	cmp	r3, #2
   12db4:	bne	12e64 <__assert_fail@plt+0x1f90>
   12db8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12dbc:	eor	r3, r3, #1
   12dc0:	uxtb	r3, r3
   12dc4:	cmp	r3, #0
   12dc8:	beq	12e64 <__assert_fail@plt+0x1f90>
   12dcc:	ldr	r2, [fp, #-20]	; 0xffffffec
   12dd0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12dd4:	cmp	r2, r3
   12dd8:	bcs	12df0 <__assert_fail@plt+0x1f1c>
   12ddc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12de0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12de4:	add	r3, r2, r3
   12de8:	mov	r2, #39	; 0x27
   12dec:	strb	r2, [r3]
   12df0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12df4:	add	r3, r3, #1
   12df8:	str	r3, [fp, #-20]	; 0xffffffec
   12dfc:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e04:	cmp	r2, r3
   12e08:	bcs	12e20 <__assert_fail@plt+0x1f4c>
   12e0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e10:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e14:	add	r3, r2, r3
   12e18:	mov	r2, #36	; 0x24
   12e1c:	strb	r2, [r3]
   12e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e24:	add	r3, r3, #1
   12e28:	str	r3, [fp, #-20]	; 0xffffffec
   12e2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e34:	cmp	r2, r3
   12e38:	bcs	12e50 <__assert_fail@plt+0x1f7c>
   12e3c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e40:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e44:	add	r3, r2, r3
   12e48:	mov	r2, #39	; 0x27
   12e4c:	strb	r2, [r3]
   12e50:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e54:	add	r3, r3, #1
   12e58:	str	r3, [fp, #-20]	; 0xffffffec
   12e5c:	mov	r3, #1
   12e60:	strb	r3, [fp, #-35]	; 0xffffffdd
   12e64:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e6c:	cmp	r2, r3
   12e70:	bcs	12e88 <__assert_fail@plt+0x1fb4>
   12e74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e78:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e7c:	add	r3, r2, r3
   12e80:	mov	r2, #92	; 0x5c
   12e84:	strb	r2, [r3]
   12e88:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e8c:	add	r3, r3, #1
   12e90:	str	r3, [fp, #-20]	; 0xffffffec
   12e94:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e9c:	cmp	r2, r3
   12ea0:	bcs	12ec8 <__assert_fail@plt+0x1ff4>
   12ea4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ea8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12eac:	add	r3, r2, r3
   12eb0:	ldrb	r2, [fp, #-38]	; 0xffffffda
   12eb4:	lsr	r2, r2, #6
   12eb8:	uxtb	r2, r2
   12ebc:	add	r2, r2, #48	; 0x30
   12ec0:	uxtb	r2, r2
   12ec4:	strb	r2, [r3]
   12ec8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ecc:	add	r3, r3, #1
   12ed0:	str	r3, [fp, #-20]	; 0xffffffec
   12ed4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ed8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12edc:	cmp	r2, r3
   12ee0:	bcs	12f10 <__assert_fail@plt+0x203c>
   12ee4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ee8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12eec:	add	r3, r2, r3
   12ef0:	ldrb	r2, [fp, #-38]	; 0xffffffda
   12ef4:	lsr	r2, r2, #3
   12ef8:	uxtb	r2, r2
   12efc:	and	r2, r2, #7
   12f00:	uxtb	r2, r2
   12f04:	add	r2, r2, #48	; 0x30
   12f08:	uxtb	r2, r2
   12f0c:	strb	r2, [r3]
   12f10:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f14:	add	r3, r3, #1
   12f18:	str	r3, [fp, #-20]	; 0xffffffec
   12f1c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12f20:	and	r3, r3, #7
   12f24:	uxtb	r3, r3
   12f28:	add	r3, r3, #48	; 0x30
   12f2c:	strb	r3, [fp, #-38]	; 0xffffffda
   12f30:	b	12f84 <__assert_fail@plt+0x20b0>
   12f34:	ldrdeq	r7, [r1], -r0
   12f38:	ldrdeq	r7, [r1], -r8
   12f3c:	ldrdeq	r7, [r1], -r4
   12f40:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   12f44:	cmp	r3, #0
   12f48:	beq	12f84 <__assert_fail@plt+0x20b0>
   12f4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f50:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f54:	cmp	r2, r3
   12f58:	bcs	12f70 <__assert_fail@plt+0x209c>
   12f5c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f60:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f64:	add	r3, r2, r3
   12f68:	mov	r2, #92	; 0x5c
   12f6c:	strb	r2, [r3]
   12f70:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f74:	add	r3, r3, #1
   12f78:	str	r3, [fp, #-20]	; 0xffffffec
   12f7c:	mov	r3, #0
   12f80:	strb	r3, [fp, #-40]	; 0xffffffd8
   12f84:	ldr	r3, [fp, #-16]
   12f88:	add	r2, r3, #1
   12f8c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12f90:	cmp	r2, r3
   12f94:	bcs	13074 <__assert_fail@plt+0x21a0>
   12f98:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12f9c:	cmp	r3, #0
   12fa0:	beq	13020 <__assert_fail@plt+0x214c>
   12fa4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   12fa8:	eor	r3, r3, #1
   12fac:	uxtb	r3, r3
   12fb0:	cmp	r3, #0
   12fb4:	beq	13020 <__assert_fail@plt+0x214c>
   12fb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12fbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12fc0:	cmp	r2, r3
   12fc4:	bcs	12fdc <__assert_fail@plt+0x2108>
   12fc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12fcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fd0:	add	r3, r2, r3
   12fd4:	mov	r2, #39	; 0x27
   12fd8:	strb	r2, [r3]
   12fdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fe0:	add	r3, r3, #1
   12fe4:	str	r3, [fp, #-20]	; 0xffffffec
   12fe8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12fec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ff0:	cmp	r2, r3
   12ff4:	bcs	1300c <__assert_fail@plt+0x2138>
   12ff8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ffc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13000:	add	r3, r2, r3
   13004:	mov	r2, #39	; 0x27
   13008:	strb	r2, [r3]
   1300c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13010:	add	r3, r3, #1
   13014:	str	r3, [fp, #-20]	; 0xffffffec
   13018:	mov	r3, #0
   1301c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13020:	ldr	r2, [fp, #-20]	; 0xffffffec
   13024:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13028:	cmp	r2, r3
   1302c:	bcs	13044 <__assert_fail@plt+0x2170>
   13030:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13034:	ldr	r3, [fp, #-20]	; 0xffffffec
   13038:	add	r3, r2, r3
   1303c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13040:	strb	r2, [r3]
   13044:	ldr	r3, [fp, #-20]	; 0xffffffec
   13048:	add	r3, r3, #1
   1304c:	str	r3, [fp, #-20]	; 0xffffffec
   13050:	ldr	r3, [fp, #-16]
   13054:	add	r3, r3, #1
   13058:	str	r3, [fp, #-16]
   1305c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13060:	ldr	r3, [fp, #-16]
   13064:	add	r3, r2, r3
   13068:	ldrb	r3, [r3]
   1306c:	strb	r3, [fp, #-38]	; 0xffffffda
   13070:	b	12d78 <__assert_fail@plt+0x1ea4>
   13074:	nop			; (mov r0, r0)
   13078:	b	13244 <__assert_fail@plt+0x2370>
   1307c:	nop			; (mov r0, r0)
   13080:	b	130a8 <__assert_fail@plt+0x21d4>
   13084:	nop			; (mov r0, r0)
   13088:	b	130a8 <__assert_fail@plt+0x21d4>
   1308c:	nop			; (mov r0, r0)
   13090:	b	130a8 <__assert_fail@plt+0x21d4>
   13094:	nop			; (mov r0, r0)
   13098:	b	130a8 <__assert_fail@plt+0x21d4>
   1309c:	nop			; (mov r0, r0)
   130a0:	b	130a8 <__assert_fail@plt+0x21d4>
   130a4:	nop			; (mov r0, r0)
   130a8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   130ac:	eor	r3, r3, #1
   130b0:	uxtb	r3, r3
   130b4:	cmp	r3, #0
   130b8:	bne	130c8 <__assert_fail@plt+0x21f4>
   130bc:	ldr	r3, [fp, #4]
   130c0:	cmp	r3, #2
   130c4:	bne	130dc <__assert_fail@plt+0x2208>
   130c8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   130cc:	eor	r3, r3, #1
   130d0:	uxtb	r3, r3
   130d4:	cmp	r3, #0
   130d8:	bne	1311c <__assert_fail@plt+0x2248>
   130dc:	ldr	r3, [fp, #12]
   130e0:	cmp	r3, #0
   130e4:	beq	1311c <__assert_fail@plt+0x2248>
   130e8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   130ec:	lsr	r3, r3, #5
   130f0:	uxtb	r3, r3
   130f4:	lsl	r3, r3, #2
   130f8:	ldr	r2, [fp, #12]
   130fc:	add	r3, r2, r3
   13100:	ldr	r2, [r3]
   13104:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13108:	and	r3, r3, #31
   1310c:	lsr	r3, r2, r3
   13110:	and	r3, r3, #1
   13114:	cmp	r3, #0
   13118:	bne	13130 <__assert_fail@plt+0x225c>
   1311c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13120:	eor	r3, r3, #1
   13124:	uxtb	r3, r3
   13128:	cmp	r3, #0
   1312c:	bne	13240 <__assert_fail@plt+0x236c>
   13130:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13134:	cmp	r3, #0
   13138:	bne	13518 <__assert_fail@plt+0x2644>
   1313c:	mov	r3, #1
   13140:	strb	r3, [fp, #-41]	; 0xffffffd7
   13144:	ldr	r3, [fp, #4]
   13148:	cmp	r3, #2
   1314c:	bne	131fc <__assert_fail@plt+0x2328>
   13150:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13154:	eor	r3, r3, #1
   13158:	uxtb	r3, r3
   1315c:	cmp	r3, #0
   13160:	beq	131fc <__assert_fail@plt+0x2328>
   13164:	ldr	r2, [fp, #-20]	; 0xffffffec
   13168:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1316c:	cmp	r2, r3
   13170:	bcs	13188 <__assert_fail@plt+0x22b4>
   13174:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13178:	ldr	r3, [fp, #-20]	; 0xffffffec
   1317c:	add	r3, r2, r3
   13180:	mov	r2, #39	; 0x27
   13184:	strb	r2, [r3]
   13188:	ldr	r3, [fp, #-20]	; 0xffffffec
   1318c:	add	r3, r3, #1
   13190:	str	r3, [fp, #-20]	; 0xffffffec
   13194:	ldr	r2, [fp, #-20]	; 0xffffffec
   13198:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1319c:	cmp	r2, r3
   131a0:	bcs	131b8 <__assert_fail@plt+0x22e4>
   131a4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131ac:	add	r3, r2, r3
   131b0:	mov	r2, #36	; 0x24
   131b4:	strb	r2, [r3]
   131b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131bc:	add	r3, r3, #1
   131c0:	str	r3, [fp, #-20]	; 0xffffffec
   131c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   131c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131cc:	cmp	r2, r3
   131d0:	bcs	131e8 <__assert_fail@plt+0x2314>
   131d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131dc:	add	r3, r2, r3
   131e0:	mov	r2, #39	; 0x27
   131e4:	strb	r2, [r3]
   131e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131ec:	add	r3, r3, #1
   131f0:	str	r3, [fp, #-20]	; 0xffffffec
   131f4:	mov	r3, #1
   131f8:	strb	r3, [fp, #-35]	; 0xffffffdd
   131fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13200:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13204:	cmp	r2, r3
   13208:	bcs	13220 <__assert_fail@plt+0x234c>
   1320c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13210:	ldr	r3, [fp, #-20]	; 0xffffffec
   13214:	add	r3, r2, r3
   13218:	mov	r2, #92	; 0x5c
   1321c:	strb	r2, [r3]
   13220:	ldr	r3, [fp, #-20]	; 0xffffffec
   13224:	add	r3, r3, #1
   13228:	str	r3, [fp, #-20]	; 0xffffffec
   1322c:	b	13244 <__assert_fail@plt+0x2370>
   13230:	nop			; (mov r0, r0)
   13234:	b	13244 <__assert_fail@plt+0x2370>
   13238:	nop			; (mov r0, r0)
   1323c:	b	13244 <__assert_fail@plt+0x2370>
   13240:	nop			; (mov r0, r0)
   13244:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13248:	cmp	r3, #0
   1324c:	beq	132cc <__assert_fail@plt+0x23f8>
   13250:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13254:	eor	r3, r3, #1
   13258:	uxtb	r3, r3
   1325c:	cmp	r3, #0
   13260:	beq	132cc <__assert_fail@plt+0x23f8>
   13264:	ldr	r2, [fp, #-20]	; 0xffffffec
   13268:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1326c:	cmp	r2, r3
   13270:	bcs	13288 <__assert_fail@plt+0x23b4>
   13274:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13278:	ldr	r3, [fp, #-20]	; 0xffffffec
   1327c:	add	r3, r2, r3
   13280:	mov	r2, #39	; 0x27
   13284:	strb	r2, [r3]
   13288:	ldr	r3, [fp, #-20]	; 0xffffffec
   1328c:	add	r3, r3, #1
   13290:	str	r3, [fp, #-20]	; 0xffffffec
   13294:	ldr	r2, [fp, #-20]	; 0xffffffec
   13298:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1329c:	cmp	r2, r3
   132a0:	bcs	132b8 <__assert_fail@plt+0x23e4>
   132a4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   132ac:	add	r3, r2, r3
   132b0:	mov	r2, #39	; 0x27
   132b4:	strb	r2, [r3]
   132b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   132bc:	add	r3, r3, #1
   132c0:	str	r3, [fp, #-20]	; 0xffffffec
   132c4:	mov	r3, #0
   132c8:	strb	r3, [fp, #-35]	; 0xffffffdd
   132cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   132d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132d4:	cmp	r2, r3
   132d8:	bcs	132f0 <__assert_fail@plt+0x241c>
   132dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132e4:	add	r3, r2, r3
   132e8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   132ec:	strb	r2, [r3]
   132f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132f4:	add	r3, r3, #1
   132f8:	str	r3, [fp, #-20]	; 0xffffffec
   132fc:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   13300:	eor	r3, r3, #1
   13304:	uxtb	r3, r3
   13308:	cmp	r3, #0
   1330c:	beq	13318 <__assert_fail@plt+0x2444>
   13310:	mov	r3, #0
   13314:	strb	r3, [fp, #-37]	; 0xffffffdb
   13318:	ldr	r3, [fp, #-16]
   1331c:	add	r3, r3, #1
   13320:	str	r3, [fp, #-16]
   13324:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13328:	cmn	r3, #1
   1332c:	bne	13354 <__assert_fail@plt+0x2480>
   13330:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13334:	ldr	r3, [fp, #-16]
   13338:	add	r3, r2, r3
   1333c:	ldrb	r3, [r3]
   13340:	cmp	r3, #0
   13344:	movne	r3, #1
   13348:	moveq	r3, #0
   1334c:	uxtb	r3, r3
   13350:	b	1336c <__assert_fail@plt+0x2498>
   13354:	ldr	r2, [fp, #-16]
   13358:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1335c:	cmp	r2, r3
   13360:	movne	r3, #1
   13364:	moveq	r3, #0
   13368:	uxtb	r3, r3
   1336c:	cmp	r3, #0
   13370:	bne	12198 <__assert_fail@plt+0x12c4>
   13374:	ldr	r3, [fp, #-20]	; 0xffffffec
   13378:	cmp	r3, #0
   1337c:	bne	13398 <__assert_fail@plt+0x24c4>
   13380:	ldr	r3, [fp, #4]
   13384:	cmp	r3, #2
   13388:	bne	13398 <__assert_fail@plt+0x24c4>
   1338c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13390:	cmp	r3, #0
   13394:	bne	13520 <__assert_fail@plt+0x264c>
   13398:	ldr	r3, [fp, #4]
   1339c:	cmp	r3, #2
   133a0:	bne	13440 <__assert_fail@plt+0x256c>
   133a4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   133a8:	eor	r3, r3, #1
   133ac:	uxtb	r3, r3
   133b0:	cmp	r3, #0
   133b4:	beq	13440 <__assert_fail@plt+0x256c>
   133b8:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   133bc:	cmp	r3, #0
   133c0:	beq	13440 <__assert_fail@plt+0x256c>
   133c4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   133c8:	cmp	r3, #0
   133cc:	beq	13414 <__assert_fail@plt+0x2540>
   133d0:	ldr	r3, [fp, #20]
   133d4:	str	r3, [sp, #16]
   133d8:	ldr	r3, [fp, #16]
   133dc:	str	r3, [sp, #12]
   133e0:	ldr	r3, [fp, #12]
   133e4:	str	r3, [sp, #8]
   133e8:	ldr	r3, [fp, #8]
   133ec:	str	r3, [sp, #4]
   133f0:	mov	r3, #5
   133f4:	str	r3, [sp]
   133f8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   133fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13400:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13404:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13408:	bl	11ee8 <__assert_fail@plt+0x1014>
   1340c:	mov	r3, r0
   13410:	b	13588 <__assert_fail@plt+0x26b4>
   13414:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13418:	cmp	r3, #0
   1341c:	bne	13440 <__assert_fail@plt+0x256c>
   13420:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13424:	cmp	r3, #0
   13428:	beq	13440 <__assert_fail@plt+0x256c>
   1342c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13430:	str	r3, [fp, #-92]	; 0xffffffa4
   13434:	mov	r3, #0
   13438:	str	r3, [fp, #-20]	; 0xffffffec
   1343c:	b	11f74 <__assert_fail@plt+0x10a0>
   13440:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13444:	cmp	r3, #0
   13448:	beq	134b4 <__assert_fail@plt+0x25e0>
   1344c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13450:	eor	r3, r3, #1
   13454:	uxtb	r3, r3
   13458:	cmp	r3, #0
   1345c:	beq	134b4 <__assert_fail@plt+0x25e0>
   13460:	b	134a4 <__assert_fail@plt+0x25d0>
   13464:	ldr	r2, [fp, #-20]	; 0xffffffec
   13468:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1346c:	cmp	r2, r3
   13470:	bcs	1348c <__assert_fail@plt+0x25b8>
   13474:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13478:	ldr	r3, [fp, #-20]	; 0xffffffec
   1347c:	add	r3, r2, r3
   13480:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13484:	ldrb	r2, [r2]
   13488:	strb	r2, [r3]
   1348c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13490:	add	r3, r3, #1
   13494:	str	r3, [fp, #-20]	; 0xffffffec
   13498:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1349c:	add	r3, r3, #1
   134a0:	str	r3, [fp, #-28]	; 0xffffffe4
   134a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   134a8:	ldrb	r3, [r3]
   134ac:	cmp	r3, #0
   134b0:	bne	13464 <__assert_fail@plt+0x2590>
   134b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   134b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   134bc:	cmp	r2, r3
   134c0:	bcs	134d8 <__assert_fail@plt+0x2604>
   134c4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   134cc:	add	r3, r2, r3
   134d0:	mov	r2, #0
   134d4:	strb	r2, [r3]
   134d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   134dc:	b	13588 <__assert_fail@plt+0x26b4>
   134e0:	nop			; (mov r0, r0)
   134e4:	b	13524 <__assert_fail@plt+0x2650>
   134e8:	nop			; (mov r0, r0)
   134ec:	b	13524 <__assert_fail@plt+0x2650>
   134f0:	nop			; (mov r0, r0)
   134f4:	b	13524 <__assert_fail@plt+0x2650>
   134f8:	nop			; (mov r0, r0)
   134fc:	b	13524 <__assert_fail@plt+0x2650>
   13500:	nop			; (mov r0, r0)
   13504:	b	13524 <__assert_fail@plt+0x2650>
   13508:	nop			; (mov r0, r0)
   1350c:	b	13524 <__assert_fail@plt+0x2650>
   13510:	nop			; (mov r0, r0)
   13514:	b	13524 <__assert_fail@plt+0x2650>
   13518:	nop			; (mov r0, r0)
   1351c:	b	13524 <__assert_fail@plt+0x2650>
   13520:	nop			; (mov r0, r0)
   13524:	ldr	r3, [fp, #4]
   13528:	cmp	r3, #2
   1352c:	bne	13544 <__assert_fail@plt+0x2670>
   13530:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13534:	cmp	r3, #0
   13538:	beq	13544 <__assert_fail@plt+0x2670>
   1353c:	mov	r3, #4
   13540:	str	r3, [fp, #4]
   13544:	ldr	r3, [fp, #8]
   13548:	bic	r3, r3, #2
   1354c:	ldr	r2, [fp, #20]
   13550:	str	r2, [sp, #16]
   13554:	ldr	r2, [fp, #16]
   13558:	str	r2, [sp, #12]
   1355c:	mov	r2, #0
   13560:	str	r2, [sp, #8]
   13564:	str	r3, [sp, #4]
   13568:	ldr	r3, [fp, #4]
   1356c:	str	r3, [sp]
   13570:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13574:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13578:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1357c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13580:	bl	11ee8 <__assert_fail@plt+0x1014>
   13584:	mov	r3, r0
   13588:	mov	r0, r3
   1358c:	sub	sp, fp, #8
   13590:	pop	{r4, fp, pc}
   13594:	push	{fp, lr}
   13598:	add	fp, sp, #4
   1359c:	sub	sp, sp, #56	; 0x38
   135a0:	str	r0, [fp, #-24]	; 0xffffffe8
   135a4:	str	r1, [fp, #-28]	; 0xffffffe4
   135a8:	str	r2, [fp, #-32]	; 0xffffffe0
   135ac:	str	r3, [fp, #-36]	; 0xffffffdc
   135b0:	ldr	r3, [fp, #4]
   135b4:	cmp	r3, #0
   135b8:	beq	135c4 <__assert_fail@plt+0x26f0>
   135bc:	ldr	r3, [fp, #4]
   135c0:	b	135c8 <__assert_fail@plt+0x26f4>
   135c4:	ldr	r3, [pc, #132]	; 13650 <__assert_fail@plt+0x277c>
   135c8:	str	r3, [fp, #-8]
   135cc:	bl	10e2c <__errno_location@plt>
   135d0:	mov	r3, r0
   135d4:	ldr	r3, [r3]
   135d8:	str	r3, [fp, #-12]
   135dc:	ldr	r3, [fp, #-8]
   135e0:	ldr	r3, [r3]
   135e4:	ldr	r2, [fp, #-8]
   135e8:	ldr	r2, [r2, #4]
   135ec:	ldr	r1, [fp, #-8]
   135f0:	add	r1, r1, #8
   135f4:	ldr	r0, [fp, #-8]
   135f8:	ldr	r0, [r0, #40]	; 0x28
   135fc:	ldr	ip, [fp, #-8]
   13600:	ldr	ip, [ip, #44]	; 0x2c
   13604:	str	ip, [sp, #16]
   13608:	str	r0, [sp, #12]
   1360c:	str	r1, [sp, #8]
   13610:	str	r2, [sp, #4]
   13614:	str	r3, [sp]
   13618:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1361c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13620:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13624:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13628:	bl	11ee8 <__assert_fail@plt+0x1014>
   1362c:	str	r0, [fp, #-16]
   13630:	bl	10e2c <__errno_location@plt>
   13634:	mov	r2, r0
   13638:	ldr	r3, [fp, #-12]
   1363c:	str	r3, [r2]
   13640:	ldr	r3, [fp, #-16]
   13644:	mov	r0, r3
   13648:	sub	sp, fp, #4
   1364c:	pop	{fp, pc}
   13650:	andeq	r8, r2, ip, asr r1
   13654:	push	{fp, lr}
   13658:	add	fp, sp, #4
   1365c:	sub	sp, sp, #16
   13660:	str	r0, [fp, #-8]
   13664:	str	r1, [fp, #-12]
   13668:	str	r2, [fp, #-16]
   1366c:	ldr	r3, [fp, #-16]
   13670:	mov	r2, #0
   13674:	ldr	r1, [fp, #-12]
   13678:	ldr	r0, [fp, #-8]
   1367c:	bl	13690 <__assert_fail@plt+0x27bc>
   13680:	mov	r3, r0
   13684:	mov	r0, r3
   13688:	sub	sp, fp, #4
   1368c:	pop	{fp, pc}
   13690:	push	{fp, lr}
   13694:	add	fp, sp, #4
   13698:	sub	sp, sp, #64	; 0x40
   1369c:	str	r0, [fp, #-32]	; 0xffffffe0
   136a0:	str	r1, [fp, #-36]	; 0xffffffdc
   136a4:	str	r2, [fp, #-40]	; 0xffffffd8
   136a8:	str	r3, [fp, #-44]	; 0xffffffd4
   136ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   136b0:	cmp	r3, #0
   136b4:	beq	136c0 <__assert_fail@plt+0x27ec>
   136b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   136bc:	b	136c4 <__assert_fail@plt+0x27f0>
   136c0:	ldr	r3, [pc, #292]	; 137ec <__assert_fail@plt+0x2918>
   136c4:	str	r3, [fp, #-8]
   136c8:	bl	10e2c <__errno_location@plt>
   136cc:	mov	r3, r0
   136d0:	ldr	r3, [r3]
   136d4:	str	r3, [fp, #-12]
   136d8:	ldr	r3, [fp, #-8]
   136dc:	ldr	r3, [r3, #4]
   136e0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   136e4:	cmp	r2, #0
   136e8:	moveq	r2, #1
   136ec:	movne	r2, #0
   136f0:	uxtb	r2, r2
   136f4:	orr	r3, r3, r2
   136f8:	str	r3, [fp, #-16]
   136fc:	ldr	r3, [fp, #-8]
   13700:	ldr	r3, [r3]
   13704:	ldr	r2, [fp, #-8]
   13708:	add	r2, r2, #8
   1370c:	ldr	r1, [fp, #-8]
   13710:	ldr	r1, [r1, #40]	; 0x28
   13714:	ldr	r0, [fp, #-8]
   13718:	ldr	r0, [r0, #44]	; 0x2c
   1371c:	str	r0, [sp, #16]
   13720:	str	r1, [sp, #12]
   13724:	str	r2, [sp, #8]
   13728:	ldr	r2, [fp, #-16]
   1372c:	str	r2, [sp, #4]
   13730:	str	r3, [sp]
   13734:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13738:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1373c:	mov	r1, #0
   13740:	mov	r0, #0
   13744:	bl	11ee8 <__assert_fail@plt+0x1014>
   13748:	mov	r3, r0
   1374c:	add	r3, r3, #1
   13750:	str	r3, [fp, #-20]	; 0xffffffec
   13754:	ldr	r0, [fp, #-20]	; 0xffffffec
   13758:	bl	1498c <__assert_fail@plt+0x3ab8>
   1375c:	mov	r3, r0
   13760:	str	r3, [fp, #-24]	; 0xffffffe8
   13764:	ldr	r3, [fp, #-8]
   13768:	ldr	r3, [r3]
   1376c:	ldr	r2, [fp, #-8]
   13770:	add	r2, r2, #8
   13774:	ldr	r1, [fp, #-8]
   13778:	ldr	r1, [r1, #40]	; 0x28
   1377c:	ldr	r0, [fp, #-8]
   13780:	ldr	r0, [r0, #44]	; 0x2c
   13784:	str	r0, [sp, #16]
   13788:	str	r1, [sp, #12]
   1378c:	str	r2, [sp, #8]
   13790:	ldr	r2, [fp, #-16]
   13794:	str	r2, [sp, #4]
   13798:	str	r3, [sp]
   1379c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   137a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   137a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   137a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   137ac:	bl	11ee8 <__assert_fail@plt+0x1014>
   137b0:	bl	10e2c <__errno_location@plt>
   137b4:	mov	r2, r0
   137b8:	ldr	r3, [fp, #-12]
   137bc:	str	r3, [r2]
   137c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   137c4:	cmp	r3, #0
   137c8:	beq	137dc <__assert_fail@plt+0x2908>
   137cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   137d0:	sub	r2, r3, #1
   137d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   137d8:	str	r2, [r3]
   137dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   137e0:	mov	r0, r3
   137e4:	sub	sp, fp, #4
   137e8:	pop	{fp, pc}
   137ec:	andeq	r8, r2, ip, asr r1
   137f0:	push	{fp, lr}
   137f4:	add	fp, sp, #4
   137f8:	sub	sp, sp, #8
   137fc:	ldr	r3, [pc, #196]	; 138c8 <__assert_fail@plt+0x29f4>
   13800:	ldr	r3, [r3]
   13804:	str	r3, [fp, #-12]
   13808:	mov	r3, #1
   1380c:	str	r3, [fp, #-8]
   13810:	b	1383c <__assert_fail@plt+0x2968>
   13814:	ldr	r3, [fp, #-8]
   13818:	lsl	r3, r3, #3
   1381c:	ldr	r2, [fp, #-12]
   13820:	add	r3, r2, r3
   13824:	ldr	r3, [r3, #4]
   13828:	mov	r0, r3
   1382c:	bl	1689c <__assert_fail@plt+0x59c8>
   13830:	ldr	r3, [fp, #-8]
   13834:	add	r3, r3, #1
   13838:	str	r3, [fp, #-8]
   1383c:	ldr	r3, [pc, #136]	; 138cc <__assert_fail@plt+0x29f8>
   13840:	ldr	r3, [r3]
   13844:	ldr	r2, [fp, #-8]
   13848:	cmp	r2, r3
   1384c:	blt	13814 <__assert_fail@plt+0x2940>
   13850:	ldr	r3, [fp, #-12]
   13854:	ldr	r3, [r3, #4]
   13858:	ldr	r2, [pc, #112]	; 138d0 <__assert_fail@plt+0x29fc>
   1385c:	cmp	r3, r2
   13860:	beq	1388c <__assert_fail@plt+0x29b8>
   13864:	ldr	r3, [fp, #-12]
   13868:	ldr	r3, [r3, #4]
   1386c:	mov	r0, r3
   13870:	bl	1689c <__assert_fail@plt+0x59c8>
   13874:	ldr	r3, [pc, #88]	; 138d4 <__assert_fail@plt+0x2a00>
   13878:	mov	r2, #256	; 0x100
   1387c:	str	r2, [r3]
   13880:	ldr	r3, [pc, #76]	; 138d4 <__assert_fail@plt+0x2a00>
   13884:	ldr	r2, [pc, #68]	; 138d0 <__assert_fail@plt+0x29fc>
   13888:	str	r2, [r3, #4]
   1388c:	ldr	r3, [fp, #-12]
   13890:	ldr	r2, [pc, #60]	; 138d4 <__assert_fail@plt+0x2a00>
   13894:	cmp	r3, r2
   13898:	beq	138b0 <__assert_fail@plt+0x29dc>
   1389c:	ldr	r0, [fp, #-12]
   138a0:	bl	1689c <__assert_fail@plt+0x59c8>
   138a4:	ldr	r3, [pc, #28]	; 138c8 <__assert_fail@plt+0x29f4>
   138a8:	ldr	r2, [pc, #36]	; 138d4 <__assert_fail@plt+0x2a00>
   138ac:	str	r2, [r3]
   138b0:	ldr	r3, [pc, #20]	; 138cc <__assert_fail@plt+0x29f8>
   138b4:	mov	r2, #1
   138b8:	str	r2, [r3]
   138bc:	nop			; (mov r0, r0)
   138c0:	sub	sp, fp, #4
   138c4:	pop	{fp, pc}
   138c8:	strdeq	r8, [r2], -ip
   138cc:	strdeq	r8, [r2], -r0
   138d0:	andeq	r8, r2, ip, lsl #3
   138d4:	strdeq	r8, [r2], -r4
   138d8:	push	{r4, fp, lr}
   138dc:	add	fp, sp, #8
   138e0:	sub	sp, sp, #84	; 0x54
   138e4:	str	r0, [fp, #-56]	; 0xffffffc8
   138e8:	str	r1, [fp, #-60]	; 0xffffffc4
   138ec:	str	r2, [fp, #-64]	; 0xffffffc0
   138f0:	str	r3, [fp, #-68]	; 0xffffffbc
   138f4:	bl	10e2c <__errno_location@plt>
   138f8:	mov	r3, r0
   138fc:	ldr	r3, [r3]
   13900:	str	r3, [fp, #-24]	; 0xffffffe8
   13904:	ldr	r3, [pc, #640]	; 13b8c <__assert_fail@plt+0x2cb8>
   13908:	ldr	r3, [r3]
   1390c:	str	r3, [fp, #-16]
   13910:	mvn	r3, #-2147483648	; 0x80000000
   13914:	str	r3, [fp, #-28]	; 0xffffffe4
   13918:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1391c:	cmp	r3, #0
   13920:	blt	13934 <__assert_fail@plt+0x2a60>
   13924:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13928:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1392c:	cmp	r2, r3
   13930:	blt	13938 <__assert_fail@plt+0x2a64>
   13934:	bl	10ec8 <abort@plt>
   13938:	ldr	r3, [pc, #592]	; 13b90 <__assert_fail@plt+0x2cbc>
   1393c:	ldr	r2, [r3]
   13940:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13944:	cmp	r2, r3
   13948:	bgt	13a1c <__assert_fail@plt+0x2b48>
   1394c:	ldr	r3, [fp, #-16]
   13950:	ldr	r2, [pc, #572]	; 13b94 <__assert_fail@plt+0x2cc0>
   13954:	cmp	r3, r2
   13958:	moveq	r3, #1
   1395c:	movne	r3, #0
   13960:	strb	r3, [fp, #-29]	; 0xffffffe3
   13964:	ldr	r3, [pc, #548]	; 13b90 <__assert_fail@plt+0x2cbc>
   13968:	ldr	r3, [r3]
   1396c:	str	r3, [fp, #-48]	; 0xffffffd0
   13970:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13974:	cmp	r3, #0
   13978:	beq	13984 <__assert_fail@plt+0x2ab0>
   1397c:	mov	r0, #0
   13980:	b	13988 <__assert_fail@plt+0x2ab4>
   13984:	ldr	r0, [fp, #-16]
   13988:	ldr	r3, [pc, #512]	; 13b90 <__assert_fail@plt+0x2cbc>
   1398c:	ldr	r3, [r3]
   13990:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13994:	sub	r3, r2, r3
   13998:	add	r2, r3, #1
   1399c:	sub	r1, fp, #48	; 0x30
   139a0:	mov	r3, #8
   139a4:	str	r3, [sp]
   139a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   139ac:	bl	14cac <__assert_fail@plt+0x3dd8>
   139b0:	str	r0, [fp, #-16]
   139b4:	ldr	r2, [pc, #464]	; 13b8c <__assert_fail@plt+0x2cb8>
   139b8:	ldr	r3, [fp, #-16]
   139bc:	str	r3, [r2]
   139c0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   139c4:	cmp	r3, #0
   139c8:	beq	139dc <__assert_fail@plt+0x2b08>
   139cc:	ldr	r3, [fp, #-16]
   139d0:	ldr	r2, [pc, #444]	; 13b94 <__assert_fail@plt+0x2cc0>
   139d4:	ldm	r2, {r0, r1}
   139d8:	stm	r3, {r0, r1}
   139dc:	ldr	r3, [pc, #428]	; 13b90 <__assert_fail@plt+0x2cbc>
   139e0:	ldr	r3, [r3]
   139e4:	lsl	r3, r3, #3
   139e8:	ldr	r2, [fp, #-16]
   139ec:	add	r0, r2, r3
   139f0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   139f4:	ldr	r3, [pc, #404]	; 13b90 <__assert_fail@plt+0x2cbc>
   139f8:	ldr	r3, [r3]
   139fc:	sub	r3, r2, r3
   13a00:	lsl	r3, r3, #3
   13a04:	mov	r2, r3
   13a08:	mov	r1, #0
   13a0c:	bl	10e44 <memset@plt>
   13a10:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13a14:	ldr	r2, [pc, #372]	; 13b90 <__assert_fail@plt+0x2cbc>
   13a18:	str	r3, [r2]
   13a1c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a20:	lsl	r3, r3, #3
   13a24:	ldr	r2, [fp, #-16]
   13a28:	add	r3, r2, r3
   13a2c:	ldr	r3, [r3]
   13a30:	str	r3, [fp, #-36]	; 0xffffffdc
   13a34:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a38:	lsl	r3, r3, #3
   13a3c:	ldr	r2, [fp, #-16]
   13a40:	add	r3, r2, r3
   13a44:	ldr	r3, [r3, #4]
   13a48:	str	r3, [fp, #-20]	; 0xffffffec
   13a4c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13a50:	ldr	r3, [r3, #4]
   13a54:	orr	r3, r3, #1
   13a58:	str	r3, [fp, #-40]	; 0xffffffd8
   13a5c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13a60:	ldr	r3, [r3]
   13a64:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13a68:	add	r2, r2, #8
   13a6c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13a70:	ldr	r1, [r1, #40]	; 0x28
   13a74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a78:	ldr	r0, [r0, #44]	; 0x2c
   13a7c:	str	r0, [sp, #16]
   13a80:	str	r1, [sp, #12]
   13a84:	str	r2, [sp, #8]
   13a88:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13a8c:	str	r2, [sp, #4]
   13a90:	str	r3, [sp]
   13a94:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13a98:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13a9c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13aa0:	ldr	r0, [fp, #-20]	; 0xffffffec
   13aa4:	bl	11ee8 <__assert_fail@plt+0x1014>
   13aa8:	str	r0, [fp, #-44]	; 0xffffffd4
   13aac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13ab0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13ab4:	cmp	r2, r3
   13ab8:	bhi	13b6c <__assert_fail@plt+0x2c98>
   13abc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ac0:	lsl	r3, r3, #3
   13ac4:	ldr	r2, [fp, #-16]
   13ac8:	add	r3, r2, r3
   13acc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13ad0:	add	r2, r2, #1
   13ad4:	str	r2, [fp, #-36]	; 0xffffffdc
   13ad8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13adc:	str	r2, [r3]
   13ae0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ae4:	ldr	r2, [pc, #172]	; 13b98 <__assert_fail@plt+0x2cc4>
   13ae8:	cmp	r3, r2
   13aec:	beq	13af8 <__assert_fail@plt+0x2c24>
   13af0:	ldr	r0, [fp, #-20]	; 0xffffffec
   13af4:	bl	1689c <__assert_fail@plt+0x59c8>
   13af8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13afc:	lsl	r3, r3, #3
   13b00:	ldr	r2, [fp, #-16]
   13b04:	add	r4, r2, r3
   13b08:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13b0c:	bl	1498c <__assert_fail@plt+0x3ab8>
   13b10:	mov	r3, r0
   13b14:	str	r3, [fp, #-20]	; 0xffffffec
   13b18:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b1c:	str	r3, [r4, #4]
   13b20:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13b24:	ldr	r3, [r3]
   13b28:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13b2c:	add	r2, r2, #8
   13b30:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13b34:	ldr	r1, [r1, #40]	; 0x28
   13b38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b3c:	ldr	r0, [r0, #44]	; 0x2c
   13b40:	str	r0, [sp, #16]
   13b44:	str	r1, [sp, #12]
   13b48:	str	r2, [sp, #8]
   13b4c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13b50:	str	r2, [sp, #4]
   13b54:	str	r3, [sp]
   13b58:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13b5c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13b60:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13b64:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b68:	bl	11ee8 <__assert_fail@plt+0x1014>
   13b6c:	bl	10e2c <__errno_location@plt>
   13b70:	mov	r2, r0
   13b74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b78:	str	r3, [r2]
   13b7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b80:	mov	r0, r3
   13b84:	sub	sp, fp, #8
   13b88:	pop	{r4, fp, pc}
   13b8c:	strdeq	r8, [r2], -ip
   13b90:	strdeq	r8, [r2], -r0
   13b94:	strdeq	r8, [r2], -r4
   13b98:	andeq	r8, r2, ip, lsl #3
   13b9c:	push	{fp, lr}
   13ba0:	add	fp, sp, #4
   13ba4:	sub	sp, sp, #8
   13ba8:	str	r0, [fp, #-8]
   13bac:	str	r1, [fp, #-12]
   13bb0:	ldr	r3, [pc, #28]	; 13bd4 <__assert_fail@plt+0x2d00>
   13bb4:	mvn	r2, #0
   13bb8:	ldr	r1, [fp, #-12]
   13bbc:	ldr	r0, [fp, #-8]
   13bc0:	bl	138d8 <__assert_fail@plt+0x2a04>
   13bc4:	mov	r3, r0
   13bc8:	mov	r0, r3
   13bcc:	sub	sp, fp, #4
   13bd0:	pop	{fp, pc}
   13bd4:	andeq	r8, r2, ip, asr r1
   13bd8:	push	{fp, lr}
   13bdc:	add	fp, sp, #4
   13be0:	sub	sp, sp, #16
   13be4:	str	r0, [fp, #-8]
   13be8:	str	r1, [fp, #-12]
   13bec:	str	r2, [fp, #-16]
   13bf0:	ldr	r3, [pc, #28]	; 13c14 <__assert_fail@plt+0x2d40>
   13bf4:	ldr	r2, [fp, #-16]
   13bf8:	ldr	r1, [fp, #-12]
   13bfc:	ldr	r0, [fp, #-8]
   13c00:	bl	138d8 <__assert_fail@plt+0x2a04>
   13c04:	mov	r3, r0
   13c08:	mov	r0, r3
   13c0c:	sub	sp, fp, #4
   13c10:	pop	{fp, pc}
   13c14:	andeq	r8, r2, ip, asr r1
   13c18:	push	{fp, lr}
   13c1c:	add	fp, sp, #4
   13c20:	sub	sp, sp, #8
   13c24:	str	r0, [fp, #-8]
   13c28:	ldr	r1, [fp, #-8]
   13c2c:	mov	r0, #0
   13c30:	bl	13b9c <__assert_fail@plt+0x2cc8>
   13c34:	mov	r3, r0
   13c38:	mov	r0, r3
   13c3c:	sub	sp, fp, #4
   13c40:	pop	{fp, pc}
   13c44:	push	{fp, lr}
   13c48:	add	fp, sp, #4
   13c4c:	sub	sp, sp, #8
   13c50:	str	r0, [fp, #-8]
   13c54:	str	r1, [fp, #-12]
   13c58:	ldr	r2, [fp, #-12]
   13c5c:	ldr	r1, [fp, #-8]
   13c60:	mov	r0, #0
   13c64:	bl	13bd8 <__assert_fail@plt+0x2d04>
   13c68:	mov	r3, r0
   13c6c:	mov	r0, r3
   13c70:	sub	sp, fp, #4
   13c74:	pop	{fp, pc}
   13c78:	push	{fp, lr}
   13c7c:	add	fp, sp, #4
   13c80:	sub	sp, sp, #64	; 0x40
   13c84:	str	r0, [fp, #-56]	; 0xffffffc8
   13c88:	str	r1, [fp, #-60]	; 0xffffffc4
   13c8c:	str	r2, [fp, #-64]	; 0xffffffc0
   13c90:	sub	r3, fp, #52	; 0x34
   13c94:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13c98:	mov	r0, r3
   13c9c:	bl	11d84 <__assert_fail@plt+0xeb0>
   13ca0:	sub	r3, fp, #52	; 0x34
   13ca4:	mvn	r2, #0
   13ca8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13cac:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13cb0:	bl	138d8 <__assert_fail@plt+0x2a04>
   13cb4:	mov	r3, r0
   13cb8:	mov	r0, r3
   13cbc:	sub	sp, fp, #4
   13cc0:	pop	{fp, pc}
   13cc4:	push	{fp, lr}
   13cc8:	add	fp, sp, #4
   13ccc:	sub	sp, sp, #64	; 0x40
   13cd0:	str	r0, [fp, #-56]	; 0xffffffc8
   13cd4:	str	r1, [fp, #-60]	; 0xffffffc4
   13cd8:	str	r2, [fp, #-64]	; 0xffffffc0
   13cdc:	str	r3, [fp, #-68]	; 0xffffffbc
   13ce0:	sub	r3, fp, #52	; 0x34
   13ce4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13ce8:	mov	r0, r3
   13cec:	bl	11d84 <__assert_fail@plt+0xeb0>
   13cf0:	sub	r3, fp, #52	; 0x34
   13cf4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13cf8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13cfc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13d00:	bl	138d8 <__assert_fail@plt+0x2a04>
   13d04:	mov	r3, r0
   13d08:	mov	r0, r3
   13d0c:	sub	sp, fp, #4
   13d10:	pop	{fp, pc}
   13d14:	push	{fp, lr}
   13d18:	add	fp, sp, #4
   13d1c:	sub	sp, sp, #8
   13d20:	str	r0, [fp, #-8]
   13d24:	str	r1, [fp, #-12]
   13d28:	ldr	r2, [fp, #-12]
   13d2c:	ldr	r1, [fp, #-8]
   13d30:	mov	r0, #0
   13d34:	bl	13c78 <__assert_fail@plt+0x2da4>
   13d38:	mov	r3, r0
   13d3c:	mov	r0, r3
   13d40:	sub	sp, fp, #4
   13d44:	pop	{fp, pc}
   13d48:	push	{fp, lr}
   13d4c:	add	fp, sp, #4
   13d50:	sub	sp, sp, #16
   13d54:	str	r0, [fp, #-8]
   13d58:	str	r1, [fp, #-12]
   13d5c:	str	r2, [fp, #-16]
   13d60:	ldr	r3, [fp, #-16]
   13d64:	ldr	r2, [fp, #-12]
   13d68:	ldr	r1, [fp, #-8]
   13d6c:	mov	r0, #0
   13d70:	bl	13cc4 <__assert_fail@plt+0x2df0>
   13d74:	mov	r3, r0
   13d78:	mov	r0, r3
   13d7c:	sub	sp, fp, #4
   13d80:	pop	{fp, pc}
   13d84:	push	{fp, lr}
   13d88:	add	fp, sp, #4
   13d8c:	sub	sp, sp, #64	; 0x40
   13d90:	str	r0, [fp, #-56]	; 0xffffffc8
   13d94:	str	r1, [fp, #-60]	; 0xffffffc4
   13d98:	mov	r3, r2
   13d9c:	strb	r3, [fp, #-61]	; 0xffffffc3
   13da0:	ldr	r3, [pc, #84]	; 13dfc <__assert_fail@plt+0x2f28>
   13da4:	sub	ip, fp, #52	; 0x34
   13da8:	mov	lr, r3
   13dac:	ldm	lr!, {r0, r1, r2, r3}
   13db0:	stmia	ip!, {r0, r1, r2, r3}
   13db4:	ldm	lr!, {r0, r1, r2, r3}
   13db8:	stmia	ip!, {r0, r1, r2, r3}
   13dbc:	ldm	lr, {r0, r1, r2, r3}
   13dc0:	stm	ip, {r0, r1, r2, r3}
   13dc4:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   13dc8:	sub	r3, fp, #52	; 0x34
   13dcc:	mov	r2, #1
   13dd0:	mov	r0, r3
   13dd4:	bl	11bf0 <__assert_fail@plt+0xd1c>
   13dd8:	sub	r3, fp, #52	; 0x34
   13ddc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13de0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13de4:	mov	r0, #0
   13de8:	bl	138d8 <__assert_fail@plt+0x2a04>
   13dec:	mov	r3, r0
   13df0:	mov	r0, r3
   13df4:	sub	sp, fp, #4
   13df8:	pop	{fp, pc}
   13dfc:	andeq	r8, r2, ip, asr r1
   13e00:	push	{fp, lr}
   13e04:	add	fp, sp, #4
   13e08:	sub	sp, sp, #8
   13e0c:	str	r0, [fp, #-8]
   13e10:	mov	r3, r1
   13e14:	strb	r3, [fp, #-9]
   13e18:	ldrb	r3, [fp, #-9]
   13e1c:	mov	r2, r3
   13e20:	mvn	r1, #0
   13e24:	ldr	r0, [fp, #-8]
   13e28:	bl	13d84 <__assert_fail@plt+0x2eb0>
   13e2c:	mov	r3, r0
   13e30:	mov	r0, r3
   13e34:	sub	sp, fp, #4
   13e38:	pop	{fp, pc}
   13e3c:	push	{fp, lr}
   13e40:	add	fp, sp, #4
   13e44:	sub	sp, sp, #8
   13e48:	str	r0, [fp, #-8]
   13e4c:	mov	r1, #58	; 0x3a
   13e50:	ldr	r0, [fp, #-8]
   13e54:	bl	13e00 <__assert_fail@plt+0x2f2c>
   13e58:	mov	r3, r0
   13e5c:	mov	r0, r3
   13e60:	sub	sp, fp, #4
   13e64:	pop	{fp, pc}
   13e68:	push	{fp, lr}
   13e6c:	add	fp, sp, #4
   13e70:	sub	sp, sp, #8
   13e74:	str	r0, [fp, #-8]
   13e78:	str	r1, [fp, #-12]
   13e7c:	mov	r2, #58	; 0x3a
   13e80:	ldr	r1, [fp, #-12]
   13e84:	ldr	r0, [fp, #-8]
   13e88:	bl	13d84 <__assert_fail@plt+0x2eb0>
   13e8c:	mov	r3, r0
   13e90:	mov	r0, r3
   13e94:	sub	sp, fp, #4
   13e98:	pop	{fp, pc}
   13e9c:	push	{fp, lr}
   13ea0:	add	fp, sp, #4
   13ea4:	sub	sp, sp, #112	; 0x70
   13ea8:	str	r0, [fp, #-56]	; 0xffffffc8
   13eac:	str	r1, [fp, #-60]	; 0xffffffc4
   13eb0:	str	r2, [fp, #-64]	; 0xffffffc0
   13eb4:	sub	r3, fp, #116	; 0x74
   13eb8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13ebc:	mov	r0, r3
   13ec0:	bl	11d84 <__assert_fail@plt+0xeb0>
   13ec4:	sub	ip, fp, #52	; 0x34
   13ec8:	sub	lr, fp, #116	; 0x74
   13ecc:	ldm	lr!, {r0, r1, r2, r3}
   13ed0:	stmia	ip!, {r0, r1, r2, r3}
   13ed4:	ldm	lr!, {r0, r1, r2, r3}
   13ed8:	stmia	ip!, {r0, r1, r2, r3}
   13edc:	ldm	lr, {r0, r1, r2, r3}
   13ee0:	stm	ip, {r0, r1, r2, r3}
   13ee4:	sub	r3, fp, #52	; 0x34
   13ee8:	mov	r2, #1
   13eec:	mov	r1, #58	; 0x3a
   13ef0:	mov	r0, r3
   13ef4:	bl	11bf0 <__assert_fail@plt+0xd1c>
   13ef8:	sub	r3, fp, #52	; 0x34
   13efc:	mvn	r2, #0
   13f00:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13f04:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13f08:	bl	138d8 <__assert_fail@plt+0x2a04>
   13f0c:	mov	r3, r0
   13f10:	mov	r0, r3
   13f14:	sub	sp, fp, #4
   13f18:	pop	{fp, pc}
   13f1c:	push	{fp, lr}
   13f20:	add	fp, sp, #4
   13f24:	sub	sp, sp, #24
   13f28:	str	r0, [fp, #-8]
   13f2c:	str	r1, [fp, #-12]
   13f30:	str	r2, [fp, #-16]
   13f34:	str	r3, [fp, #-20]	; 0xffffffec
   13f38:	mvn	r3, #0
   13f3c:	str	r3, [sp]
   13f40:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f44:	ldr	r2, [fp, #-16]
   13f48:	ldr	r1, [fp, #-12]
   13f4c:	ldr	r0, [fp, #-8]
   13f50:	bl	13f64 <__assert_fail@plt+0x3090>
   13f54:	mov	r3, r0
   13f58:	mov	r0, r3
   13f5c:	sub	sp, fp, #4
   13f60:	pop	{fp, pc}
   13f64:	push	{fp, lr}
   13f68:	add	fp, sp, #4
   13f6c:	sub	sp, sp, #64	; 0x40
   13f70:	str	r0, [fp, #-56]	; 0xffffffc8
   13f74:	str	r1, [fp, #-60]	; 0xffffffc4
   13f78:	str	r2, [fp, #-64]	; 0xffffffc0
   13f7c:	str	r3, [fp, #-68]	; 0xffffffbc
   13f80:	ldr	r3, [pc, #84]	; 13fdc <__assert_fail@plt+0x3108>
   13f84:	sub	ip, fp, #52	; 0x34
   13f88:	mov	lr, r3
   13f8c:	ldm	lr!, {r0, r1, r2, r3}
   13f90:	stmia	ip!, {r0, r1, r2, r3}
   13f94:	ldm	lr!, {r0, r1, r2, r3}
   13f98:	stmia	ip!, {r0, r1, r2, r3}
   13f9c:	ldm	lr, {r0, r1, r2, r3}
   13fa0:	stm	ip, {r0, r1, r2, r3}
   13fa4:	sub	r3, fp, #52	; 0x34
   13fa8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13fac:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13fb0:	mov	r0, r3
   13fb4:	bl	11d08 <__assert_fail@plt+0xe34>
   13fb8:	sub	r3, fp, #52	; 0x34
   13fbc:	ldr	r2, [fp, #4]
   13fc0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13fc4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13fc8:	bl	138d8 <__assert_fail@plt+0x2a04>
   13fcc:	mov	r3, r0
   13fd0:	mov	r0, r3
   13fd4:	sub	sp, fp, #4
   13fd8:	pop	{fp, pc}
   13fdc:	andeq	r8, r2, ip, asr r1
   13fe0:	push	{fp, lr}
   13fe4:	add	fp, sp, #4
   13fe8:	sub	sp, sp, #16
   13fec:	str	r0, [fp, #-8]
   13ff0:	str	r1, [fp, #-12]
   13ff4:	str	r2, [fp, #-16]
   13ff8:	ldr	r3, [fp, #-16]
   13ffc:	ldr	r2, [fp, #-12]
   14000:	ldr	r1, [fp, #-8]
   14004:	mov	r0, #0
   14008:	bl	13f1c <__assert_fail@plt+0x3048>
   1400c:	mov	r3, r0
   14010:	mov	r0, r3
   14014:	sub	sp, fp, #4
   14018:	pop	{fp, pc}
   1401c:	push	{fp, lr}
   14020:	add	fp, sp, #4
   14024:	sub	sp, sp, #24
   14028:	str	r0, [fp, #-8]
   1402c:	str	r1, [fp, #-12]
   14030:	str	r2, [fp, #-16]
   14034:	str	r3, [fp, #-20]	; 0xffffffec
   14038:	ldr	r3, [fp, #-20]	; 0xffffffec
   1403c:	str	r3, [sp]
   14040:	ldr	r3, [fp, #-16]
   14044:	ldr	r2, [fp, #-12]
   14048:	ldr	r1, [fp, #-8]
   1404c:	mov	r0, #0
   14050:	bl	13f64 <__assert_fail@plt+0x3090>
   14054:	mov	r3, r0
   14058:	mov	r0, r3
   1405c:	sub	sp, fp, #4
   14060:	pop	{fp, pc}
   14064:	push	{fp, lr}
   14068:	add	fp, sp, #4
   1406c:	sub	sp, sp, #16
   14070:	str	r0, [fp, #-8]
   14074:	str	r1, [fp, #-12]
   14078:	str	r2, [fp, #-16]
   1407c:	ldr	r3, [pc, #28]	; 140a0 <__assert_fail@plt+0x31cc>
   14080:	ldr	r2, [fp, #-16]
   14084:	ldr	r1, [fp, #-12]
   14088:	ldr	r0, [fp, #-8]
   1408c:	bl	138d8 <__assert_fail@plt+0x2a04>
   14090:	mov	r3, r0
   14094:	mov	r0, r3
   14098:	sub	sp, fp, #4
   1409c:	pop	{fp, pc}
   140a0:	andeq	r8, r2, r0, lsl #2
   140a4:	push	{fp, lr}
   140a8:	add	fp, sp, #4
   140ac:	sub	sp, sp, #8
   140b0:	str	r0, [fp, #-8]
   140b4:	str	r1, [fp, #-12]
   140b8:	ldr	r2, [fp, #-12]
   140bc:	ldr	r1, [fp, #-8]
   140c0:	mov	r0, #0
   140c4:	bl	14064 <__assert_fail@plt+0x3190>
   140c8:	mov	r3, r0
   140cc:	mov	r0, r3
   140d0:	sub	sp, fp, #4
   140d4:	pop	{fp, pc}
   140d8:	push	{fp, lr}
   140dc:	add	fp, sp, #4
   140e0:	sub	sp, sp, #8
   140e4:	str	r0, [fp, #-8]
   140e8:	str	r1, [fp, #-12]
   140ec:	mvn	r2, #0
   140f0:	ldr	r1, [fp, #-12]
   140f4:	ldr	r0, [fp, #-8]
   140f8:	bl	14064 <__assert_fail@plt+0x3190>
   140fc:	mov	r3, r0
   14100:	mov	r0, r3
   14104:	sub	sp, fp, #4
   14108:	pop	{fp, pc}
   1410c:	push	{fp, lr}
   14110:	add	fp, sp, #4
   14114:	sub	sp, sp, #8
   14118:	str	r0, [fp, #-8]
   1411c:	ldr	r1, [fp, #-8]
   14120:	mov	r0, #0
   14124:	bl	140d8 <__assert_fail@plt+0x3204>
   14128:	mov	r3, r0
   1412c:	mov	r0, r3
   14130:	sub	sp, fp, #4
   14134:	pop	{fp, pc}
   14138:	push	{r4, r5, r6, r7, fp, lr}
   1413c:	add	fp, sp, #20
   14140:	sub	sp, sp, #48	; 0x30
   14144:	str	r0, [fp, #-24]	; 0xffffffe8
   14148:	str	r1, [fp, #-28]	; 0xffffffe4
   1414c:	str	r2, [fp, #-32]	; 0xffffffe0
   14150:	str	r3, [fp, #-36]	; 0xffffffdc
   14154:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14158:	cmp	r3, #0
   1415c:	beq	14180 <__assert_fail@plt+0x32ac>
   14160:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14164:	str	r3, [sp]
   14168:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1416c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14170:	ldr	r1, [pc, #1260]	; 14664 <__assert_fail@plt+0x3790>
   14174:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14178:	bl	10e20 <fprintf@plt>
   1417c:	b	14194 <__assert_fail@plt+0x32c0>
   14180:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14184:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14188:	ldr	r1, [pc, #1240]	; 14668 <__assert_fail@plt+0x3794>
   1418c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14190:	bl	10e20 <fprintf@plt>
   14194:	ldr	r0, [pc, #1232]	; 1466c <__assert_fail@plt+0x3798>
   14198:	bl	10df0 <gettext@plt>
   1419c:	mov	r2, r0
   141a0:	ldr	r3, [pc, #1224]	; 14670 <__assert_fail@plt+0x379c>
   141a4:	ldr	r1, [pc, #1224]	; 14674 <__assert_fail@plt+0x37a0>
   141a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   141ac:	bl	10e20 <fprintf@plt>
   141b0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   141b4:	mov	r0, #10
   141b8:	bl	10d00 <fputc_unlocked@plt>
   141bc:	ldr	r0, [pc, #1204]	; 14678 <__assert_fail@plt+0x37a4>
   141c0:	bl	10df0 <gettext@plt>
   141c4:	mov	r3, r0
   141c8:	ldr	r2, [pc, #1196]	; 1467c <__assert_fail@plt+0x37a8>
   141cc:	mov	r1, r3
   141d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   141d4:	bl	10e20 <fprintf@plt>
   141d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   141dc:	mov	r0, #10
   141e0:	bl	10d00 <fputc_unlocked@plt>
   141e4:	ldr	r3, [fp, #8]
   141e8:	cmp	r3, #9
   141ec:	ldrls	pc, [pc, r3, lsl #2]
   141f0:	b	145ac <__assert_fail@plt+0x36d8>
   141f4:	andeq	r4, r1, r4, asr r6
   141f8:	andeq	r4, r1, ip, lsl r2
   141fc:	andeq	r4, r1, r0, asr #4
   14200:	andeq	r4, r1, ip, ror #4
   14204:	andeq	r4, r1, ip, lsr #5
   14208:	andeq	r4, r1, r4, lsl #6
   1420c:	andeq	r4, r1, ip, ror #6
   14210:	andeq	r4, r1, r4, ror #7
   14214:	andeq	r4, r1, ip, ror #8
   14218:	andeq	r4, r1, r4, lsl #10
   1421c:	ldr	r0, [pc, #1116]	; 14680 <__assert_fail@plt+0x37ac>
   14220:	bl	10df0 <gettext@plt>
   14224:	mov	r1, r0
   14228:	ldr	r3, [fp, #4]
   1422c:	ldr	r3, [r3]
   14230:	mov	r2, r3
   14234:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14238:	bl	10e20 <fprintf@plt>
   1423c:	b	14658 <__assert_fail@plt+0x3784>
   14240:	ldr	r0, [pc, #1084]	; 14684 <__assert_fail@plt+0x37b0>
   14244:	bl	10df0 <gettext@plt>
   14248:	mov	r1, r0
   1424c:	ldr	r3, [fp, #4]
   14250:	ldr	r2, [r3]
   14254:	ldr	r3, [fp, #4]
   14258:	add	r3, r3, #4
   1425c:	ldr	r3, [r3]
   14260:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14264:	bl	10e20 <fprintf@plt>
   14268:	b	14658 <__assert_fail@plt+0x3784>
   1426c:	ldr	r0, [pc, #1044]	; 14688 <__assert_fail@plt+0x37b4>
   14270:	bl	10df0 <gettext@plt>
   14274:	ldr	r3, [fp, #4]
   14278:	ldr	r2, [r3]
   1427c:	ldr	r3, [fp, #4]
   14280:	add	r3, r3, #4
   14284:	ldr	r1, [r3]
   14288:	ldr	r3, [fp, #4]
   1428c:	add	r3, r3, #8
   14290:	ldr	r3, [r3]
   14294:	str	r3, [sp]
   14298:	mov	r3, r1
   1429c:	mov	r1, r0
   142a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   142a4:	bl	10e20 <fprintf@plt>
   142a8:	b	14658 <__assert_fail@plt+0x3784>
   142ac:	ldr	r0, [pc, #984]	; 1468c <__assert_fail@plt+0x37b8>
   142b0:	bl	10df0 <gettext@plt>
   142b4:	mov	ip, r0
   142b8:	ldr	r3, [fp, #4]
   142bc:	ldr	r1, [r3]
   142c0:	ldr	r3, [fp, #4]
   142c4:	add	r3, r3, #4
   142c8:	ldr	r0, [r3]
   142cc:	ldr	r3, [fp, #4]
   142d0:	add	r3, r3, #8
   142d4:	ldr	r3, [r3]
   142d8:	ldr	r2, [fp, #4]
   142dc:	add	r2, r2, #12
   142e0:	ldr	r2, [r2]
   142e4:	str	r2, [sp, #4]
   142e8:	str	r3, [sp]
   142ec:	mov	r3, r0
   142f0:	mov	r2, r1
   142f4:	mov	r1, ip
   142f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   142fc:	bl	10e20 <fprintf@plt>
   14300:	b	14658 <__assert_fail@plt+0x3784>
   14304:	ldr	r0, [pc, #900]	; 14690 <__assert_fail@plt+0x37bc>
   14308:	bl	10df0 <gettext@plt>
   1430c:	mov	lr, r0
   14310:	ldr	r3, [fp, #4]
   14314:	ldr	r0, [r3]
   14318:	ldr	r3, [fp, #4]
   1431c:	add	r3, r3, #4
   14320:	ldr	ip, [r3]
   14324:	ldr	r3, [fp, #4]
   14328:	add	r3, r3, #8
   1432c:	ldr	r3, [r3]
   14330:	ldr	r2, [fp, #4]
   14334:	add	r2, r2, #12
   14338:	ldr	r2, [r2]
   1433c:	ldr	r1, [fp, #4]
   14340:	add	r1, r1, #16
   14344:	ldr	r1, [r1]
   14348:	str	r1, [sp, #8]
   1434c:	str	r2, [sp, #4]
   14350:	str	r3, [sp]
   14354:	mov	r3, ip
   14358:	mov	r2, r0
   1435c:	mov	r1, lr
   14360:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14364:	bl	10e20 <fprintf@plt>
   14368:	b	14658 <__assert_fail@plt+0x3784>
   1436c:	ldr	r0, [pc, #800]	; 14694 <__assert_fail@plt+0x37c0>
   14370:	bl	10df0 <gettext@plt>
   14374:	mov	r4, r0
   14378:	ldr	r3, [fp, #4]
   1437c:	ldr	ip, [r3]
   14380:	ldr	r3, [fp, #4]
   14384:	add	r3, r3, #4
   14388:	ldr	lr, [r3]
   1438c:	ldr	r3, [fp, #4]
   14390:	add	r3, r3, #8
   14394:	ldr	r3, [r3]
   14398:	ldr	r2, [fp, #4]
   1439c:	add	r2, r2, #12
   143a0:	ldr	r2, [r2]
   143a4:	ldr	r1, [fp, #4]
   143a8:	add	r1, r1, #16
   143ac:	ldr	r1, [r1]
   143b0:	ldr	r0, [fp, #4]
   143b4:	add	r0, r0, #20
   143b8:	ldr	r0, [r0]
   143bc:	str	r0, [sp, #12]
   143c0:	str	r1, [sp, #8]
   143c4:	str	r2, [sp, #4]
   143c8:	str	r3, [sp]
   143cc:	mov	r3, lr
   143d0:	mov	r2, ip
   143d4:	mov	r1, r4
   143d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   143dc:	bl	10e20 <fprintf@plt>
   143e0:	b	14658 <__assert_fail@plt+0x3784>
   143e4:	ldr	r0, [pc, #684]	; 14698 <__assert_fail@plt+0x37c4>
   143e8:	bl	10df0 <gettext@plt>
   143ec:	mov	r5, r0
   143f0:	ldr	r3, [fp, #4]
   143f4:	ldr	lr, [r3]
   143f8:	ldr	r3, [fp, #4]
   143fc:	add	r3, r3, #4
   14400:	ldr	r4, [r3]
   14404:	ldr	r3, [fp, #4]
   14408:	add	r3, r3, #8
   1440c:	ldr	r3, [r3]
   14410:	ldr	r2, [fp, #4]
   14414:	add	r2, r2, #12
   14418:	ldr	r2, [r2]
   1441c:	ldr	r1, [fp, #4]
   14420:	add	r1, r1, #16
   14424:	ldr	r1, [r1]
   14428:	ldr	r0, [fp, #4]
   1442c:	add	r0, r0, #20
   14430:	ldr	r0, [r0]
   14434:	ldr	ip, [fp, #4]
   14438:	add	ip, ip, #24
   1443c:	ldr	ip, [ip]
   14440:	str	ip, [sp, #16]
   14444:	str	r0, [sp, #12]
   14448:	str	r1, [sp, #8]
   1444c:	str	r2, [sp, #4]
   14450:	str	r3, [sp]
   14454:	mov	r3, r4
   14458:	mov	r2, lr
   1445c:	mov	r1, r5
   14460:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14464:	bl	10e20 <fprintf@plt>
   14468:	b	14658 <__assert_fail@plt+0x3784>
   1446c:	ldr	r0, [pc, #552]	; 1469c <__assert_fail@plt+0x37c8>
   14470:	bl	10df0 <gettext@plt>
   14474:	mov	r6, r0
   14478:	ldr	r3, [fp, #4]
   1447c:	ldr	r4, [r3]
   14480:	ldr	r3, [fp, #4]
   14484:	add	r3, r3, #4
   14488:	ldr	r5, [r3]
   1448c:	ldr	r3, [fp, #4]
   14490:	add	r3, r3, #8
   14494:	ldr	r3, [r3]
   14498:	ldr	r2, [fp, #4]
   1449c:	add	r2, r2, #12
   144a0:	ldr	r2, [r2]
   144a4:	ldr	r1, [fp, #4]
   144a8:	add	r1, r1, #16
   144ac:	ldr	r1, [r1]
   144b0:	ldr	r0, [fp, #4]
   144b4:	add	r0, r0, #20
   144b8:	ldr	r0, [r0]
   144bc:	ldr	ip, [fp, #4]
   144c0:	add	ip, ip, #24
   144c4:	ldr	ip, [ip]
   144c8:	ldr	lr, [fp, #4]
   144cc:	add	lr, lr, #28
   144d0:	ldr	lr, [lr]
   144d4:	str	lr, [sp, #20]
   144d8:	str	ip, [sp, #16]
   144dc:	str	r0, [sp, #12]
   144e0:	str	r1, [sp, #8]
   144e4:	str	r2, [sp, #4]
   144e8:	str	r3, [sp]
   144ec:	mov	r3, r5
   144f0:	mov	r2, r4
   144f4:	mov	r1, r6
   144f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   144fc:	bl	10e20 <fprintf@plt>
   14500:	b	14658 <__assert_fail@plt+0x3784>
   14504:	ldr	r0, [pc, #404]	; 146a0 <__assert_fail@plt+0x37cc>
   14508:	bl	10df0 <gettext@plt>
   1450c:	mov	r7, r0
   14510:	ldr	r3, [fp, #4]
   14514:	ldr	r5, [r3]
   14518:	ldr	r3, [fp, #4]
   1451c:	add	r3, r3, #4
   14520:	ldr	r6, [r3]
   14524:	ldr	r3, [fp, #4]
   14528:	add	r3, r3, #8
   1452c:	ldr	r3, [r3]
   14530:	ldr	r2, [fp, #4]
   14534:	add	r2, r2, #12
   14538:	ldr	r2, [r2]
   1453c:	ldr	r1, [fp, #4]
   14540:	add	r1, r1, #16
   14544:	ldr	r1, [r1]
   14548:	ldr	r0, [fp, #4]
   1454c:	add	r0, r0, #20
   14550:	ldr	r0, [r0]
   14554:	ldr	ip, [fp, #4]
   14558:	add	ip, ip, #24
   1455c:	ldr	ip, [ip]
   14560:	ldr	lr, [fp, #4]
   14564:	add	lr, lr, #28
   14568:	ldr	lr, [lr]
   1456c:	ldr	r4, [fp, #4]
   14570:	add	r4, r4, #32
   14574:	ldr	r4, [r4]
   14578:	str	r4, [sp, #24]
   1457c:	str	lr, [sp, #20]
   14580:	str	ip, [sp, #16]
   14584:	str	r0, [sp, #12]
   14588:	str	r1, [sp, #8]
   1458c:	str	r2, [sp, #4]
   14590:	str	r3, [sp]
   14594:	mov	r3, r6
   14598:	mov	r2, r5
   1459c:	mov	r1, r7
   145a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   145a4:	bl	10e20 <fprintf@plt>
   145a8:	b	14658 <__assert_fail@plt+0x3784>
   145ac:	ldr	r0, [pc, #240]	; 146a4 <__assert_fail@plt+0x37d0>
   145b0:	bl	10df0 <gettext@plt>
   145b4:	mov	r7, r0
   145b8:	ldr	r3, [fp, #4]
   145bc:	ldr	r5, [r3]
   145c0:	ldr	r3, [fp, #4]
   145c4:	add	r3, r3, #4
   145c8:	ldr	r6, [r3]
   145cc:	ldr	r3, [fp, #4]
   145d0:	add	r3, r3, #8
   145d4:	ldr	r3, [r3]
   145d8:	ldr	r2, [fp, #4]
   145dc:	add	r2, r2, #12
   145e0:	ldr	r2, [r2]
   145e4:	ldr	r1, [fp, #4]
   145e8:	add	r1, r1, #16
   145ec:	ldr	r1, [r1]
   145f0:	ldr	r0, [fp, #4]
   145f4:	add	r0, r0, #20
   145f8:	ldr	r0, [r0]
   145fc:	ldr	ip, [fp, #4]
   14600:	add	ip, ip, #24
   14604:	ldr	ip, [ip]
   14608:	ldr	lr, [fp, #4]
   1460c:	add	lr, lr, #28
   14610:	ldr	lr, [lr]
   14614:	ldr	r4, [fp, #4]
   14618:	add	r4, r4, #32
   1461c:	ldr	r4, [r4]
   14620:	str	r4, [sp, #24]
   14624:	str	lr, [sp, #20]
   14628:	str	ip, [sp, #16]
   1462c:	str	r0, [sp, #12]
   14630:	str	r1, [sp, #8]
   14634:	str	r2, [sp, #4]
   14638:	str	r3, [sp]
   1463c:	mov	r3, r6
   14640:	mov	r2, r5
   14644:	mov	r1, r7
   14648:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1464c:	bl	10e20 <fprintf@plt>
   14650:	b	14658 <__assert_fail@plt+0x3784>
   14654:	nop			; (mov r0, r0)
   14658:	nop			; (mov r0, r0)
   1465c:	sub	sp, fp, #20
   14660:	pop	{r4, r5, r6, r7, fp, pc}
   14664:	ldrdeq	r7, [r1], -ip
   14668:	andeq	r7, r1, r8, ror #21
   1466c:	strdeq	r7, [r1], -r0
   14670:	andeq	r0, r0, r6, ror #15
   14674:	andeq	r7, r1, r0, lsl #28
   14678:	strdeq	r7, [r1], -r4
   1467c:	andeq	r7, r1, r0, lsr #23
   14680:	andeq	r7, r1, r4, asr #23
   14684:	ldrdeq	r7, [r1], -r4
   14688:	andeq	r7, r1, ip, ror #23
   1468c:	andeq	r7, r1, r8, lsl #24
   14690:	andeq	r7, r1, r8, lsr #24
   14694:	andeq	r7, r1, ip, asr #24
   14698:	andeq	r7, r1, r4, ror ip
   1469c:	andeq	r7, r1, r0, lsr #25
   146a0:	ldrdeq	r7, [r1], -r0
   146a4:	andeq	r7, r1, r4, lsl #26
   146a8:	push	{fp, lr}
   146ac:	add	fp, sp, #4
   146b0:	sub	sp, sp, #32
   146b4:	str	r0, [fp, #-16]
   146b8:	str	r1, [fp, #-20]	; 0xffffffec
   146bc:	str	r2, [fp, #-24]	; 0xffffffe8
   146c0:	str	r3, [fp, #-28]	; 0xffffffe4
   146c4:	mov	r3, #0
   146c8:	str	r3, [fp, #-8]
   146cc:	b	146dc <__assert_fail@plt+0x3808>
   146d0:	ldr	r3, [fp, #-8]
   146d4:	add	r3, r3, #1
   146d8:	str	r3, [fp, #-8]
   146dc:	ldr	r3, [fp, #-8]
   146e0:	lsl	r3, r3, #2
   146e4:	ldr	r2, [fp, #4]
   146e8:	add	r3, r2, r3
   146ec:	ldr	r3, [r3]
   146f0:	cmp	r3, #0
   146f4:	bne	146d0 <__assert_fail@plt+0x37fc>
   146f8:	ldr	r3, [fp, #-8]
   146fc:	str	r3, [sp, #4]
   14700:	ldr	r3, [fp, #4]
   14704:	str	r3, [sp]
   14708:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1470c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14710:	ldr	r1, [fp, #-20]	; 0xffffffec
   14714:	ldr	r0, [fp, #-16]
   14718:	bl	14138 <__assert_fail@plt+0x3264>
   1471c:	nop			; (mov r0, r0)
   14720:	sub	sp, fp, #4
   14724:	pop	{fp, pc}
   14728:	push	{fp, lr}
   1472c:	add	fp, sp, #4
   14730:	sub	sp, sp, #72	; 0x48
   14734:	str	r0, [fp, #-56]	; 0xffffffc8
   14738:	str	r1, [fp, #-60]	; 0xffffffc4
   1473c:	str	r2, [fp, #-64]	; 0xffffffc0
   14740:	str	r3, [fp, #-68]	; 0xffffffbc
   14744:	mov	r3, #0
   14748:	str	r3, [fp, #-8]
   1474c:	b	1475c <__assert_fail@plt+0x3888>
   14750:	ldr	r3, [fp, #-8]
   14754:	add	r3, r3, #1
   14758:	str	r3, [fp, #-8]
   1475c:	ldr	r3, [fp, #-8]
   14760:	cmp	r3, #9
   14764:	bhi	147a8 <__assert_fail@plt+0x38d4>
   14768:	ldr	r3, [fp, #4]
   1476c:	add	r2, r3, #4
   14770:	str	r2, [fp, #4]
   14774:	ldr	r2, [r3]
   14778:	ldr	r3, [fp, #-8]
   1477c:	lsl	r3, r3, #2
   14780:	sub	r1, fp, #4
   14784:	add	r3, r1, r3
   14788:	str	r2, [r3, #-44]	; 0xffffffd4
   1478c:	ldr	r3, [fp, #-8]
   14790:	lsl	r3, r3, #2
   14794:	sub	r2, fp, #4
   14798:	add	r3, r2, r3
   1479c:	ldr	r3, [r3, #-44]	; 0xffffffd4
   147a0:	cmp	r3, #0
   147a4:	bne	14750 <__assert_fail@plt+0x387c>
   147a8:	ldr	r3, [fp, #-8]
   147ac:	str	r3, [sp, #4]
   147b0:	sub	r3, fp, #48	; 0x30
   147b4:	str	r3, [sp]
   147b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   147bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   147c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   147c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   147c8:	bl	14138 <__assert_fail@plt+0x3264>
   147cc:	nop			; (mov r0, r0)
   147d0:	sub	sp, fp, #4
   147d4:	pop	{fp, pc}
   147d8:	push	{r3}		; (str r3, [sp, #-4]!)
   147dc:	push	{fp, lr}
   147e0:	add	fp, sp, #4
   147e4:	sub	sp, sp, #36	; 0x24
   147e8:	str	r0, [fp, #-20]	; 0xffffffec
   147ec:	str	r1, [fp, #-24]	; 0xffffffe8
   147f0:	str	r2, [fp, #-28]	; 0xffffffe4
   147f4:	add	r3, fp, #8
   147f8:	str	r3, [fp, #-12]
   147fc:	ldr	r3, [fp, #-12]
   14800:	str	r3, [sp]
   14804:	ldr	r3, [fp, #4]
   14808:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1480c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14810:	ldr	r0, [fp, #-20]	; 0xffffffec
   14814:	bl	14728 <__assert_fail@plt+0x3854>
   14818:	nop			; (mov r0, r0)
   1481c:	sub	sp, fp, #4
   14820:	pop	{fp, lr}
   14824:	add	sp, sp, #4
   14828:	bx	lr
   1482c:	push	{fp, lr}
   14830:	add	fp, sp, #4
   14834:	ldr	r3, [pc, #96]	; 1489c <__assert_fail@plt+0x39c8>
   14838:	ldr	r3, [r3]
   1483c:	mov	r1, r3
   14840:	mov	r0, #10
   14844:	bl	10d00 <fputc_unlocked@plt>
   14848:	ldr	r0, [pc, #80]	; 148a0 <__assert_fail@plt+0x39cc>
   1484c:	bl	10df0 <gettext@plt>
   14850:	mov	r3, r0
   14854:	ldr	r1, [pc, #72]	; 148a4 <__assert_fail@plt+0x39d0>
   14858:	mov	r0, r3
   1485c:	bl	10ca0 <printf@plt>
   14860:	ldr	r0, [pc, #64]	; 148a8 <__assert_fail@plt+0x39d4>
   14864:	bl	10df0 <gettext@plt>
   14868:	mov	r3, r0
   1486c:	ldr	r2, [pc, #56]	; 148ac <__assert_fail@plt+0x39d8>
   14870:	ldr	r1, [pc, #56]	; 148b0 <__assert_fail@plt+0x39dc>
   14874:	mov	r0, r3
   14878:	bl	10ca0 <printf@plt>
   1487c:	ldr	r0, [pc, #48]	; 148b4 <__assert_fail@plt+0x39e0>
   14880:	bl	10df0 <gettext@plt>
   14884:	mov	r3, r0
   14888:	ldr	r1, [pc, #40]	; 148b8 <__assert_fail@plt+0x39e4>
   1488c:	mov	r0, r3
   14890:	bl	10ca0 <printf@plt>
   14894:	nop			; (mov r0, r0)
   14898:	pop	{fp, pc}
   1489c:	andeq	r8, r2, r4, asr #2
   148a0:	andeq	r7, r1, r0, asr #26
   148a4:	andeq	r7, r1, r4, asr sp
   148a8:	andeq	r7, r1, ip, ror #26
   148ac:	andeq	r7, r1, r0, lsl #27
   148b0:	andeq	r7, r1, r8, lsr #27
   148b4:			; <UNDEFINED> instruction: 0x00017db8
   148b8:	andeq	r7, r1, r0, ror #27
   148bc:	push	{fp, lr}
   148c0:	add	fp, sp, #4
   148c4:	sub	sp, sp, #16
   148c8:	str	r0, [fp, #-8]
   148cc:	str	r1, [fp, #-12]
   148d0:	str	r2, [fp, #-16]
   148d4:	ldr	r2, [fp, #-16]
   148d8:	ldr	r1, [fp, #-12]
   148dc:	ldr	r0, [fp, #-8]
   148e0:	bl	14a4c <__assert_fail@plt+0x3b78>
   148e4:	mov	r3, r0
   148e8:	mov	r0, r3
   148ec:	sub	sp, fp, #4
   148f0:	pop	{fp, pc}
   148f4:	push	{fp, lr}
   148f8:	add	fp, sp, #4
   148fc:	sub	sp, sp, #8
   14900:	str	r0, [fp, #-8]
   14904:	ldr	r3, [fp, #-8]
   14908:	cmp	r3, #0
   1490c:	bne	14914 <__assert_fail@plt+0x3a40>
   14910:	bl	15440 <__assert_fail@plt+0x456c>
   14914:	ldr	r3, [fp, #-8]
   14918:	mov	r0, r3
   1491c:	sub	sp, fp, #4
   14920:	pop	{fp, pc}
   14924:	push	{fp, lr}
   14928:	add	fp, sp, #4
   1492c:	sub	sp, sp, #8
   14930:	str	r0, [fp, #-8]
   14934:	ldr	r0, [fp, #-8]
   14938:	bl	15f20 <__assert_fail@plt+0x504c>
   1493c:	mov	r3, r0
   14940:	mov	r0, r3
   14944:	bl	148f4 <__assert_fail@plt+0x3a20>
   14948:	mov	r3, r0
   1494c:	mov	r0, r3
   14950:	sub	sp, fp, #4
   14954:	pop	{fp, pc}
   14958:	push	{fp, lr}
   1495c:	add	fp, sp, #4
   14960:	sub	sp, sp, #8
   14964:	str	r0, [fp, #-8]
   14968:	ldr	r0, [fp, #-8]
   1496c:	bl	16a30 <__assert_fail@plt+0x5b5c>
   14970:	mov	r3, r0
   14974:	mov	r0, r3
   14978:	bl	148f4 <__assert_fail@plt+0x3a20>
   1497c:	mov	r3, r0
   14980:	mov	r0, r3
   14984:	sub	sp, fp, #4
   14988:	pop	{fp, pc}
   1498c:	push	{fp, lr}
   14990:	add	fp, sp, #4
   14994:	sub	sp, sp, #8
   14998:	str	r0, [fp, #-8]
   1499c:	ldr	r0, [fp, #-8]
   149a0:	bl	14924 <__assert_fail@plt+0x3a50>
   149a4:	mov	r3, r0
   149a8:	mov	r0, r3
   149ac:	sub	sp, fp, #4
   149b0:	pop	{fp, pc}
   149b4:	push	{fp, lr}
   149b8:	add	fp, sp, #4
   149bc:	sub	sp, sp, #16
   149c0:	str	r0, [fp, #-16]
   149c4:	str	r1, [fp, #-20]	; 0xffffffec
   149c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   149cc:	ldr	r0, [fp, #-16]
   149d0:	bl	15fc8 <__assert_fail@plt+0x50f4>
   149d4:	str	r0, [fp, #-8]
   149d8:	ldr	r3, [fp, #-8]
   149dc:	cmp	r3, #0
   149e0:	bne	14a00 <__assert_fail@plt+0x3b2c>
   149e4:	ldr	r3, [fp, #-16]
   149e8:	cmp	r3, #0
   149ec:	beq	149fc <__assert_fail@plt+0x3b28>
   149f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   149f4:	cmp	r3, #0
   149f8:	beq	14a00 <__assert_fail@plt+0x3b2c>
   149fc:	bl	15440 <__assert_fail@plt+0x456c>
   14a00:	ldr	r3, [fp, #-8]
   14a04:	mov	r0, r3
   14a08:	sub	sp, fp, #4
   14a0c:	pop	{fp, pc}
   14a10:	push	{fp, lr}
   14a14:	add	fp, sp, #4
   14a18:	sub	sp, sp, #8
   14a1c:	str	r0, [fp, #-8]
   14a20:	str	r1, [fp, #-12]
   14a24:	ldr	r1, [fp, #-12]
   14a28:	ldr	r0, [fp, #-8]
   14a2c:	bl	16a5c <__assert_fail@plt+0x5b88>
   14a30:	mov	r3, r0
   14a34:	mov	r0, r3
   14a38:	bl	148f4 <__assert_fail@plt+0x3a20>
   14a3c:	mov	r3, r0
   14a40:	mov	r0, r3
   14a44:	sub	sp, fp, #4
   14a48:	pop	{fp, pc}
   14a4c:	push	{fp, lr}
   14a50:	add	fp, sp, #4
   14a54:	sub	sp, sp, #24
   14a58:	str	r0, [fp, #-16]
   14a5c:	str	r1, [fp, #-20]	; 0xffffffec
   14a60:	str	r2, [fp, #-24]	; 0xffffffe8
   14a64:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14a68:	ldr	r1, [fp, #-20]	; 0xffffffec
   14a6c:	ldr	r0, [fp, #-16]
   14a70:	bl	16c50 <__assert_fail@plt+0x5d7c>
   14a74:	str	r0, [fp, #-8]
   14a78:	ldr	r3, [fp, #-8]
   14a7c:	cmp	r3, #0
   14a80:	bne	14aac <__assert_fail@plt+0x3bd8>
   14a84:	ldr	r3, [fp, #-16]
   14a88:	cmp	r3, #0
   14a8c:	beq	14aa8 <__assert_fail@plt+0x3bd4>
   14a90:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a94:	cmp	r3, #0
   14a98:	beq	14aac <__assert_fail@plt+0x3bd8>
   14a9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14aa0:	cmp	r3, #0
   14aa4:	beq	14aac <__assert_fail@plt+0x3bd8>
   14aa8:	bl	15440 <__assert_fail@plt+0x456c>
   14aac:	ldr	r3, [fp, #-8]
   14ab0:	mov	r0, r3
   14ab4:	sub	sp, fp, #4
   14ab8:	pop	{fp, pc}
   14abc:	push	{fp, lr}
   14ac0:	add	fp, sp, #4
   14ac4:	sub	sp, sp, #16
   14ac8:	str	r0, [fp, #-8]
   14acc:	str	r1, [fp, #-12]
   14ad0:	str	r2, [fp, #-16]
   14ad4:	ldr	r2, [fp, #-16]
   14ad8:	ldr	r1, [fp, #-12]
   14adc:	ldr	r0, [fp, #-8]
   14ae0:	bl	16ae4 <__assert_fail@plt+0x5c10>
   14ae4:	mov	r3, r0
   14ae8:	mov	r0, r3
   14aec:	bl	148f4 <__assert_fail@plt+0x3a20>
   14af0:	mov	r3, r0
   14af4:	mov	r0, r3
   14af8:	sub	sp, fp, #4
   14afc:	pop	{fp, pc}
   14b00:	push	{fp, lr}
   14b04:	add	fp, sp, #4
   14b08:	sub	sp, sp, #8
   14b0c:	str	r0, [fp, #-8]
   14b10:	str	r1, [fp, #-12]
   14b14:	ldr	r2, [fp, #-12]
   14b18:	ldr	r1, [fp, #-8]
   14b1c:	mov	r0, #0
   14b20:	bl	14a4c <__assert_fail@plt+0x3b78>
   14b24:	mov	r3, r0
   14b28:	mov	r0, r3
   14b2c:	sub	sp, fp, #4
   14b30:	pop	{fp, pc}
   14b34:	push	{fp, lr}
   14b38:	add	fp, sp, #4
   14b3c:	sub	sp, sp, #8
   14b40:	str	r0, [fp, #-8]
   14b44:	str	r1, [fp, #-12]
   14b48:	ldr	r2, [fp, #-12]
   14b4c:	ldr	r1, [fp, #-8]
   14b50:	mov	r0, #0
   14b54:	bl	14abc <__assert_fail@plt+0x3be8>
   14b58:	mov	r3, r0
   14b5c:	mov	r0, r3
   14b60:	sub	sp, fp, #4
   14b64:	pop	{fp, pc}
   14b68:	push	{fp, lr}
   14b6c:	add	fp, sp, #4
   14b70:	sub	sp, sp, #8
   14b74:	str	r0, [fp, #-8]
   14b78:	str	r1, [fp, #-12]
   14b7c:	mov	r2, #1
   14b80:	ldr	r1, [fp, #-12]
   14b84:	ldr	r0, [fp, #-8]
   14b88:	bl	14b9c <__assert_fail@plt+0x3cc8>
   14b8c:	mov	r3, r0
   14b90:	mov	r0, r3
   14b94:	sub	sp, fp, #4
   14b98:	pop	{fp, pc}
   14b9c:	push	{fp, lr}
   14ba0:	add	fp, sp, #4
   14ba4:	sub	sp, sp, #24
   14ba8:	str	r0, [fp, #-16]
   14bac:	str	r1, [fp, #-20]	; 0xffffffec
   14bb0:	str	r2, [fp, #-24]	; 0xffffffe8
   14bb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bb8:	ldr	r3, [r3]
   14bbc:	str	r3, [fp, #-8]
   14bc0:	ldr	r3, [fp, #-16]
   14bc4:	cmp	r3, #0
   14bc8:	bne	14c14 <__assert_fail@plt+0x3d40>
   14bcc:	ldr	r3, [fp, #-8]
   14bd0:	cmp	r3, #0
   14bd4:	bne	14c78 <__assert_fail@plt+0x3da4>
   14bd8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14bdc:	mov	r0, #64	; 0x40
   14be0:	bl	16f04 <__assert_fail@plt+0x6030>
   14be4:	mov	r3, r0
   14be8:	str	r3, [fp, #-8]
   14bec:	ldr	r3, [fp, #-8]
   14bf0:	cmp	r3, #0
   14bf4:	moveq	r3, #1
   14bf8:	movne	r3, #0
   14bfc:	uxtb	r3, r3
   14c00:	mov	r2, r3
   14c04:	ldr	r3, [fp, #-8]
   14c08:	add	r3, r2, r3
   14c0c:	str	r3, [fp, #-8]
   14c10:	b	14c78 <__assert_fail@plt+0x3da4>
   14c14:	ldr	r3, [fp, #-8]
   14c18:	lsr	r3, r3, #1
   14c1c:	add	r3, r3, #1
   14c20:	mvn	r2, r3
   14c24:	ldr	r3, [fp, #-8]
   14c28:	cmp	r2, r3
   14c2c:	bcs	14c50 <__assert_fail@plt+0x3d7c>
   14c30:	ldr	r3, [fp, #-8]
   14c34:	lsr	r2, r3, #1
   14c38:	ldr	r3, [fp, #-8]
   14c3c:	add	r3, r2, r3
   14c40:	add	r3, r3, #1
   14c44:	str	r3, [fp, #-8]
   14c48:	mov	r3, #1
   14c4c:	b	14c6c <__assert_fail@plt+0x3d98>
   14c50:	ldr	r3, [fp, #-8]
   14c54:	lsr	r2, r3, #1
   14c58:	ldr	r3, [fp, #-8]
   14c5c:	add	r3, r2, r3
   14c60:	add	r3, r3, #1
   14c64:	str	r3, [fp, #-8]
   14c68:	mov	r3, #0
   14c6c:	cmp	r3, #0
   14c70:	beq	14c78 <__assert_fail@plt+0x3da4>
   14c74:	bl	15440 <__assert_fail@plt+0x456c>
   14c78:	ldr	r3, [fp, #-8]
   14c7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14c80:	mov	r1, r3
   14c84:	ldr	r0, [fp, #-16]
   14c88:	bl	14a4c <__assert_fail@plt+0x3b78>
   14c8c:	str	r0, [fp, #-16]
   14c90:	ldr	r2, [fp, #-8]
   14c94:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c98:	str	r2, [r3]
   14c9c:	ldr	r3, [fp, #-16]
   14ca0:	mov	r0, r3
   14ca4:	sub	sp, fp, #4
   14ca8:	pop	{fp, pc}
   14cac:	push	{fp, lr}
   14cb0:	add	fp, sp, #4
   14cb4:	sub	sp, sp, #32
   14cb8:	str	r0, [fp, #-24]	; 0xffffffe8
   14cbc:	str	r1, [fp, #-28]	; 0xffffffe4
   14cc0:	str	r2, [fp, #-32]	; 0xffffffe0
   14cc4:	str	r3, [fp, #-36]	; 0xffffffdc
   14cc8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ccc:	ldr	r3, [r3]
   14cd0:	str	r3, [fp, #-8]
   14cd4:	ldr	r3, [fp, #-8]
   14cd8:	asr	r3, r3, #1
   14cdc:	cmp	r3, #0
   14ce0:	bge	14d08 <__assert_fail@plt+0x3e34>
   14ce4:	ldr	r3, [fp, #-8]
   14ce8:	asr	r3, r3, #1
   14cec:	rsb	r2, r3, #-2147483648	; 0x80000000
   14cf0:	ldr	r3, [fp, #-8]
   14cf4:	cmp	r2, r3
   14cf8:	movgt	r3, #1
   14cfc:	movle	r3, #0
   14d00:	uxtb	r3, r3
   14d04:	b	14d5c <__assert_fail@plt+0x3e88>
   14d08:	ldr	r3, [fp, #-8]
   14d0c:	cmp	r3, #0
   14d10:	bge	14d38 <__assert_fail@plt+0x3e64>
   14d14:	ldr	r3, [fp, #-8]
   14d18:	asr	r2, r3, #1
   14d1c:	ldr	r3, [fp, #-8]
   14d20:	rsb	r3, r3, #-2147483648	; 0x80000000
   14d24:	cmp	r2, r3
   14d28:	movlt	r3, #1
   14d2c:	movge	r3, #0
   14d30:	uxtb	r3, r3
   14d34:	b	14d5c <__assert_fail@plt+0x3e88>
   14d38:	ldr	r3, [fp, #-8]
   14d3c:	asr	r2, r3, #1
   14d40:	mvn	r3, #-2147483648	; 0x80000000
   14d44:	sub	r3, r3, r2
   14d48:	ldr	r2, [fp, #-8]
   14d4c:	cmp	r3, r2
   14d50:	movlt	r3, #1
   14d54:	movge	r3, #0
   14d58:	uxtb	r3, r3
   14d5c:	cmp	r3, #0
   14d60:	beq	14d84 <__assert_fail@plt+0x3eb0>
   14d64:	ldr	r3, [fp, #-8]
   14d68:	asr	r3, r3, #1
   14d6c:	mov	r2, r3
   14d70:	ldr	r3, [fp, #-8]
   14d74:	add	r3, r2, r3
   14d78:	str	r3, [fp, #-16]
   14d7c:	mov	r3, #1
   14d80:	b	14da0 <__assert_fail@plt+0x3ecc>
   14d84:	ldr	r3, [fp, #-8]
   14d88:	asr	r3, r3, #1
   14d8c:	mov	r2, r3
   14d90:	ldr	r3, [fp, #-8]
   14d94:	add	r3, r2, r3
   14d98:	str	r3, [fp, #-16]
   14d9c:	mov	r3, #0
   14da0:	cmp	r3, #0
   14da4:	beq	14db0 <__assert_fail@plt+0x3edc>
   14da8:	mvn	r3, #-2147483648	; 0x80000000
   14dac:	str	r3, [fp, #-16]
   14db0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14db4:	cmp	r3, #0
   14db8:	blt	14dd4 <__assert_fail@plt+0x3f00>
   14dbc:	ldr	r3, [fp, #-16]
   14dc0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14dc4:	cmp	r2, r3
   14dc8:	bge	14dd4 <__assert_fail@plt+0x3f00>
   14dcc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14dd0:	str	r3, [fp, #-16]
   14dd4:	ldr	r3, [fp, #4]
   14dd8:	cmp	r3, #0
   14ddc:	bge	14e6c <__assert_fail@plt+0x3f98>
   14de0:	ldr	r3, [fp, #-16]
   14de4:	cmp	r3, #0
   14de8:	bge	14e18 <__assert_fail@plt+0x3f44>
   14dec:	ldr	r1, [fp, #4]
   14df0:	mvn	r0, #-2147483648	; 0x80000000
   14df4:	bl	17110 <__assert_fail@plt+0x623c>
   14df8:	mov	r3, r0
   14dfc:	mov	r2, r3
   14e00:	ldr	r3, [fp, #-16]
   14e04:	cmp	r2, r3
   14e08:	movgt	r3, #1
   14e0c:	movle	r3, #0
   14e10:	uxtb	r3, r3
   14e14:	b	14f0c <__assert_fail@plt+0x4038>
   14e18:	ldr	r3, [fp, #4]
   14e1c:	cmn	r3, #1
   14e20:	bne	14e40 <__assert_fail@plt+0x3f6c>
   14e24:	ldr	r3, [fp, #-16]
   14e28:	add	r3, r3, #-2147483648	; 0x80000000
   14e2c:	cmp	r3, #0
   14e30:	movgt	r3, #1
   14e34:	movle	r3, #0
   14e38:	uxtb	r3, r3
   14e3c:	b	14f0c <__assert_fail@plt+0x4038>
   14e40:	ldr	r1, [fp, #4]
   14e44:	mov	r0, #-2147483648	; 0x80000000
   14e48:	bl	17110 <__assert_fail@plt+0x623c>
   14e4c:	mov	r3, r0
   14e50:	mov	r2, r3
   14e54:	ldr	r3, [fp, #-16]
   14e58:	cmp	r2, r3
   14e5c:	movlt	r3, #1
   14e60:	movge	r3, #0
   14e64:	uxtb	r3, r3
   14e68:	b	14f0c <__assert_fail@plt+0x4038>
   14e6c:	ldr	r3, [fp, #4]
   14e70:	cmp	r3, #0
   14e74:	beq	14f08 <__assert_fail@plt+0x4034>
   14e78:	ldr	r3, [fp, #-16]
   14e7c:	cmp	r3, #0
   14e80:	bge	14edc <__assert_fail@plt+0x4008>
   14e84:	ldr	r3, [fp, #-16]
   14e88:	cmn	r3, #1
   14e8c:	bne	14eac <__assert_fail@plt+0x3fd8>
   14e90:	ldr	r3, [fp, #4]
   14e94:	add	r3, r3, #-2147483648	; 0x80000000
   14e98:	cmp	r3, #0
   14e9c:	movgt	r3, #1
   14ea0:	movle	r3, #0
   14ea4:	uxtb	r3, r3
   14ea8:	b	14f0c <__assert_fail@plt+0x4038>
   14eac:	ldr	r3, [fp, #-16]
   14eb0:	mov	r1, r3
   14eb4:	mov	r0, #-2147483648	; 0x80000000
   14eb8:	bl	17110 <__assert_fail@plt+0x623c>
   14ebc:	mov	r3, r0
   14ec0:	mov	r2, r3
   14ec4:	ldr	r3, [fp, #4]
   14ec8:	cmp	r2, r3
   14ecc:	movlt	r3, #1
   14ed0:	movge	r3, #0
   14ed4:	uxtb	r3, r3
   14ed8:	b	14f0c <__assert_fail@plt+0x4038>
   14edc:	ldr	r1, [fp, #4]
   14ee0:	mvn	r0, #-2147483648	; 0x80000000
   14ee4:	bl	17110 <__assert_fail@plt+0x623c>
   14ee8:	mov	r3, r0
   14eec:	mov	r2, r3
   14ef0:	ldr	r3, [fp, #-16]
   14ef4:	cmp	r2, r3
   14ef8:	movlt	r3, #1
   14efc:	movge	r3, #0
   14f00:	uxtb	r3, r3
   14f04:	b	14f0c <__assert_fail@plt+0x4038>
   14f08:	mov	r3, #0
   14f0c:	cmp	r3, #0
   14f10:	beq	14f30 <__assert_fail@plt+0x405c>
   14f14:	ldr	r3, [fp, #-16]
   14f18:	mov	r2, r3
   14f1c:	ldr	r3, [fp, #4]
   14f20:	mul	r3, r3, r2
   14f24:	str	r3, [fp, #-20]	; 0xffffffec
   14f28:	mov	r3, #1
   14f2c:	b	14f48 <__assert_fail@plt+0x4074>
   14f30:	ldr	r3, [fp, #-16]
   14f34:	mov	r2, r3
   14f38:	ldr	r3, [fp, #4]
   14f3c:	mul	r3, r3, r2
   14f40:	str	r3, [fp, #-20]	; 0xffffffec
   14f44:	mov	r3, #0
   14f48:	cmp	r3, #0
   14f4c:	beq	14f58 <__assert_fail@plt+0x4084>
   14f50:	mvn	r3, #-2147483648	; 0x80000000
   14f54:	b	14f70 <__assert_fail@plt+0x409c>
   14f58:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f5c:	cmp	r3, #63	; 0x3f
   14f60:	bgt	14f6c <__assert_fail@plt+0x4098>
   14f64:	mov	r3, #64	; 0x40
   14f68:	b	14f70 <__assert_fail@plt+0x409c>
   14f6c:	mov	r3, #0
   14f70:	str	r3, [fp, #-12]
   14f74:	ldr	r3, [fp, #-12]
   14f78:	cmp	r3, #0
   14f7c:	beq	14fb8 <__assert_fail@plt+0x40e4>
   14f80:	ldr	r1, [fp, #4]
   14f84:	ldr	r0, [fp, #-12]
   14f88:	bl	17110 <__assert_fail@plt+0x623c>
   14f8c:	mov	r3, r0
   14f90:	str	r3, [fp, #-16]
   14f94:	ldr	r3, [fp, #-12]
   14f98:	ldr	r1, [fp, #4]
   14f9c:	mov	r0, r3
   14fa0:	bl	17330 <__assert_fail@plt+0x645c>
   14fa4:	mov	r3, r1
   14fa8:	mov	r2, r3
   14fac:	ldr	r3, [fp, #-12]
   14fb0:	sub	r3, r3, r2
   14fb4:	str	r3, [fp, #-20]	; 0xffffffec
   14fb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14fbc:	cmp	r3, #0
   14fc0:	bne	14fd0 <__assert_fail@plt+0x40fc>
   14fc4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14fc8:	mov	r2, #0
   14fcc:	str	r2, [r3]
   14fd0:	ldr	r2, [fp, #-16]
   14fd4:	ldr	r3, [fp, #-8]
   14fd8:	sub	r2, r2, r3
   14fdc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14fe0:	cmp	r2, r3
   14fe4:	bge	1521c <__assert_fail@plt+0x4348>
   14fe8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14fec:	cmp	r3, #0
   14ff0:	bge	15014 <__assert_fail@plt+0x4140>
   14ff4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ff8:	rsb	r2, r3, #-2147483648	; 0x80000000
   14ffc:	ldr	r3, [fp, #-8]
   15000:	cmp	r2, r3
   15004:	movgt	r3, #1
   15008:	movle	r3, #0
   1500c:	uxtb	r3, r3
   15010:	b	15060 <__assert_fail@plt+0x418c>
   15014:	ldr	r3, [fp, #-8]
   15018:	cmp	r3, #0
   1501c:	bge	15040 <__assert_fail@plt+0x416c>
   15020:	ldr	r3, [fp, #-8]
   15024:	rsb	r2, r3, #-2147483648	; 0x80000000
   15028:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1502c:	cmp	r2, r3
   15030:	movgt	r3, #1
   15034:	movle	r3, #0
   15038:	uxtb	r3, r3
   1503c:	b	15060 <__assert_fail@plt+0x418c>
   15040:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15044:	mvn	r3, #-2147483648	; 0x80000000
   15048:	sub	r3, r3, r2
   1504c:	ldr	r2, [fp, #-8]
   15050:	cmp	r3, r2
   15054:	movlt	r3, #1
   15058:	movge	r3, #0
   1505c:	uxtb	r3, r3
   15060:	cmp	r3, #0
   15064:	beq	1507c <__assert_fail@plt+0x41a8>
   15068:	ldr	r2, [fp, #-8]
   1506c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15070:	add	r3, r2, r3
   15074:	str	r3, [fp, #-16]
   15078:	b	15218 <__assert_fail@plt+0x4344>
   1507c:	ldr	r2, [fp, #-8]
   15080:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15084:	add	r3, r2, r3
   15088:	str	r3, [fp, #-16]
   1508c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15090:	cmp	r3, #0
   15094:	blt	150a8 <__assert_fail@plt+0x41d4>
   15098:	ldr	r3, [fp, #-16]
   1509c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   150a0:	cmp	r2, r3
   150a4:	blt	15218 <__assert_fail@plt+0x4344>
   150a8:	ldr	r3, [fp, #4]
   150ac:	cmp	r3, #0
   150b0:	bge	15140 <__assert_fail@plt+0x426c>
   150b4:	ldr	r3, [fp, #-16]
   150b8:	cmp	r3, #0
   150bc:	bge	150ec <__assert_fail@plt+0x4218>
   150c0:	ldr	r1, [fp, #4]
   150c4:	mvn	r0, #-2147483648	; 0x80000000
   150c8:	bl	17110 <__assert_fail@plt+0x623c>
   150cc:	mov	r3, r0
   150d0:	mov	r2, r3
   150d4:	ldr	r3, [fp, #-16]
   150d8:	cmp	r2, r3
   150dc:	movgt	r3, #1
   150e0:	movle	r3, #0
   150e4:	uxtb	r3, r3
   150e8:	b	151e0 <__assert_fail@plt+0x430c>
   150ec:	ldr	r3, [fp, #4]
   150f0:	cmn	r3, #1
   150f4:	bne	15114 <__assert_fail@plt+0x4240>
   150f8:	ldr	r3, [fp, #-16]
   150fc:	add	r3, r3, #-2147483648	; 0x80000000
   15100:	cmp	r3, #0
   15104:	movgt	r3, #1
   15108:	movle	r3, #0
   1510c:	uxtb	r3, r3
   15110:	b	151e0 <__assert_fail@plt+0x430c>
   15114:	ldr	r1, [fp, #4]
   15118:	mov	r0, #-2147483648	; 0x80000000
   1511c:	bl	17110 <__assert_fail@plt+0x623c>
   15120:	mov	r3, r0
   15124:	mov	r2, r3
   15128:	ldr	r3, [fp, #-16]
   1512c:	cmp	r2, r3
   15130:	movlt	r3, #1
   15134:	movge	r3, #0
   15138:	uxtb	r3, r3
   1513c:	b	151e0 <__assert_fail@plt+0x430c>
   15140:	ldr	r3, [fp, #4]
   15144:	cmp	r3, #0
   15148:	beq	151dc <__assert_fail@plt+0x4308>
   1514c:	ldr	r3, [fp, #-16]
   15150:	cmp	r3, #0
   15154:	bge	151b0 <__assert_fail@plt+0x42dc>
   15158:	ldr	r3, [fp, #-16]
   1515c:	cmn	r3, #1
   15160:	bne	15180 <__assert_fail@plt+0x42ac>
   15164:	ldr	r3, [fp, #4]
   15168:	add	r3, r3, #-2147483648	; 0x80000000
   1516c:	cmp	r3, #0
   15170:	movgt	r3, #1
   15174:	movle	r3, #0
   15178:	uxtb	r3, r3
   1517c:	b	151e0 <__assert_fail@plt+0x430c>
   15180:	ldr	r3, [fp, #-16]
   15184:	mov	r1, r3
   15188:	mov	r0, #-2147483648	; 0x80000000
   1518c:	bl	17110 <__assert_fail@plt+0x623c>
   15190:	mov	r3, r0
   15194:	mov	r2, r3
   15198:	ldr	r3, [fp, #4]
   1519c:	cmp	r2, r3
   151a0:	movlt	r3, #1
   151a4:	movge	r3, #0
   151a8:	uxtb	r3, r3
   151ac:	b	151e0 <__assert_fail@plt+0x430c>
   151b0:	ldr	r1, [fp, #4]
   151b4:	mvn	r0, #-2147483648	; 0x80000000
   151b8:	bl	17110 <__assert_fail@plt+0x623c>
   151bc:	mov	r3, r0
   151c0:	mov	r2, r3
   151c4:	ldr	r3, [fp, #-16]
   151c8:	cmp	r2, r3
   151cc:	movlt	r3, #1
   151d0:	movge	r3, #0
   151d4:	uxtb	r3, r3
   151d8:	b	151e0 <__assert_fail@plt+0x430c>
   151dc:	mov	r3, #0
   151e0:	cmp	r3, #0
   151e4:	beq	15200 <__assert_fail@plt+0x432c>
   151e8:	ldr	r3, [fp, #-16]
   151ec:	mov	r2, r3
   151f0:	ldr	r3, [fp, #4]
   151f4:	mul	r3, r3, r2
   151f8:	str	r3, [fp, #-20]	; 0xffffffec
   151fc:	b	15218 <__assert_fail@plt+0x4344>
   15200:	ldr	r3, [fp, #-16]
   15204:	mov	r2, r3
   15208:	ldr	r3, [fp, #4]
   1520c:	mul	r3, r3, r2
   15210:	str	r3, [fp, #-20]	; 0xffffffec
   15214:	b	1521c <__assert_fail@plt+0x4348>
   15218:	bl	15440 <__assert_fail@plt+0x456c>
   1521c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15220:	mov	r1, r3
   15224:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15228:	bl	149b4 <__assert_fail@plt+0x3ae0>
   1522c:	str	r0, [fp, #-24]	; 0xffffffe8
   15230:	ldr	r2, [fp, #-16]
   15234:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15238:	str	r2, [r3]
   1523c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15240:	mov	r0, r3
   15244:	sub	sp, fp, #4
   15248:	pop	{fp, pc}
   1524c:	push	{fp, lr}
   15250:	add	fp, sp, #4
   15254:	sub	sp, sp, #8
   15258:	str	r0, [fp, #-8]
   1525c:	mov	r1, #1
   15260:	ldr	r0, [fp, #-8]
   15264:	bl	152a4 <__assert_fail@plt+0x43d0>
   15268:	mov	r3, r0
   1526c:	mov	r0, r3
   15270:	sub	sp, fp, #4
   15274:	pop	{fp, pc}
   15278:	push	{fp, lr}
   1527c:	add	fp, sp, #4
   15280:	sub	sp, sp, #8
   15284:	str	r0, [fp, #-8]
   15288:	mov	r1, #1
   1528c:	ldr	r0, [fp, #-8]
   15290:	bl	152e0 <__assert_fail@plt+0x440c>
   15294:	mov	r3, r0
   15298:	mov	r0, r3
   1529c:	sub	sp, fp, #4
   152a0:	pop	{fp, pc}
   152a4:	push	{fp, lr}
   152a8:	add	fp, sp, #4
   152ac:	sub	sp, sp, #8
   152b0:	str	r0, [fp, #-8]
   152b4:	str	r1, [fp, #-12]
   152b8:	ldr	r1, [fp, #-12]
   152bc:	ldr	r0, [fp, #-8]
   152c0:	bl	15e5c <__assert_fail@plt+0x4f88>
   152c4:	mov	r3, r0
   152c8:	mov	r0, r3
   152cc:	bl	148f4 <__assert_fail@plt+0x3a20>
   152d0:	mov	r3, r0
   152d4:	mov	r0, r3
   152d8:	sub	sp, fp, #4
   152dc:	pop	{fp, pc}
   152e0:	push	{fp, lr}
   152e4:	add	fp, sp, #4
   152e8:	sub	sp, sp, #8
   152ec:	str	r0, [fp, #-8]
   152f0:	str	r1, [fp, #-12]
   152f4:	ldr	r1, [fp, #-12]
   152f8:	ldr	r0, [fp, #-8]
   152fc:	bl	16aac <__assert_fail@plt+0x5bd8>
   15300:	mov	r3, r0
   15304:	mov	r0, r3
   15308:	bl	148f4 <__assert_fail@plt+0x3a20>
   1530c:	mov	r3, r0
   15310:	mov	r0, r3
   15314:	sub	sp, fp, #4
   15318:	pop	{fp, pc}
   1531c:	push	{fp, lr}
   15320:	add	fp, sp, #4
   15324:	sub	sp, sp, #8
   15328:	str	r0, [fp, #-8]
   1532c:	str	r1, [fp, #-12]
   15330:	ldr	r0, [fp, #-12]
   15334:	bl	14924 <__assert_fail@plt+0x3a50>
   15338:	mov	r3, r0
   1533c:	ldr	r2, [fp, #-12]
   15340:	ldr	r1, [fp, #-8]
   15344:	mov	r0, r3
   15348:	bl	10cd0 <memcpy@plt>
   1534c:	mov	r3, r0
   15350:	mov	r0, r3
   15354:	sub	sp, fp, #4
   15358:	pop	{fp, pc}
   1535c:	push	{fp, lr}
   15360:	add	fp, sp, #4
   15364:	sub	sp, sp, #8
   15368:	str	r0, [fp, #-8]
   1536c:	str	r1, [fp, #-12]
   15370:	ldr	r0, [fp, #-12]
   15374:	bl	14958 <__assert_fail@plt+0x3a84>
   15378:	mov	r3, r0
   1537c:	mov	r0, r3
   15380:	ldr	r3, [fp, #-12]
   15384:	mov	r2, r3
   15388:	ldr	r1, [fp, #-8]
   1538c:	bl	10cd0 <memcpy@plt>
   15390:	mov	r3, r0
   15394:	mov	r0, r3
   15398:	sub	sp, fp, #4
   1539c:	pop	{fp, pc}
   153a0:	push	{fp, lr}
   153a4:	add	fp, sp, #4
   153a8:	sub	sp, sp, #16
   153ac:	str	r0, [fp, #-16]
   153b0:	str	r1, [fp, #-20]	; 0xffffffec
   153b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   153b8:	add	r3, r3, #1
   153bc:	mov	r0, r3
   153c0:	bl	14958 <__assert_fail@plt+0x3a84>
   153c4:	mov	r3, r0
   153c8:	str	r3, [fp, #-8]
   153cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   153d0:	ldr	r2, [fp, #-8]
   153d4:	add	r3, r2, r3
   153d8:	mov	r2, #0
   153dc:	strb	r2, [r3]
   153e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   153e4:	mov	r2, r3
   153e8:	ldr	r1, [fp, #-16]
   153ec:	ldr	r0, [fp, #-8]
   153f0:	bl	10cd0 <memcpy@plt>
   153f4:	mov	r3, r0
   153f8:	mov	r0, r3
   153fc:	sub	sp, fp, #4
   15400:	pop	{fp, pc}
   15404:	push	{fp, lr}
   15408:	add	fp, sp, #4
   1540c:	sub	sp, sp, #8
   15410:	str	r0, [fp, #-8]
   15414:	ldr	r0, [fp, #-8]
   15418:	bl	10e08 <strlen@plt>
   1541c:	mov	r3, r0
   15420:	add	r3, r3, #1
   15424:	mov	r1, r3
   15428:	ldr	r0, [fp, #-8]
   1542c:	bl	1531c <__assert_fail@plt+0x4448>
   15430:	mov	r3, r0
   15434:	mov	r0, r3
   15438:	sub	sp, fp, #4
   1543c:	pop	{fp, pc}
   15440:	push	{r4, r5, fp, lr}
   15444:	add	fp, sp, #12
   15448:	ldr	r3, [pc, #32]	; 15470 <__assert_fail@plt+0x459c>
   1544c:	ldr	r4, [r3]
   15450:	ldr	r0, [pc, #28]	; 15474 <__assert_fail@plt+0x45a0>
   15454:	bl	10df0 <gettext@plt>
   15458:	mov	r3, r0
   1545c:	ldr	r2, [pc, #20]	; 15478 <__assert_fail@plt+0x45a4>
   15460:	mov	r1, #0
   15464:	mov	r0, r4
   15468:	bl	10d84 <error@plt>
   1546c:	bl	10ec8 <abort@plt>
   15470:	andeq	r8, r2, ip, ror #1
   15474:	andeq	r7, r1, r0, lsr lr
   15478:	andeq	r7, r1, r4, asr #28
   1547c:	push	{r4, r5, fp, lr}
   15480:	add	fp, sp, #12
   15484:	sub	sp, sp, #40	; 0x28
   15488:	str	r0, [fp, #-32]	; 0xffffffe0
   1548c:	str	r1, [fp, #-36]	; 0xffffffdc
   15490:	strd	r2, [fp, #-44]	; 0xffffffd4
   15494:	sub	r2, fp, #28
   15498:	ldr	r3, [fp, #12]
   1549c:	str	r3, [sp]
   154a0:	mov	r3, r2
   154a4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   154a8:	mov	r1, #0
   154ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   154b0:	bl	1581c <__assert_fail@plt+0x4948>
   154b4:	str	r0, [fp, #-16]
   154b8:	ldr	r3, [fp, #-16]
   154bc:	cmp	r3, #0
   154c0:	bne	15534 <__assert_fail@plt+0x4660>
   154c4:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   154c8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   154cc:	cmp	r1, r3
   154d0:	cmpeq	r0, r2
   154d4:	bcc	154ec <__assert_fail@plt+0x4618>
   154d8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   154dc:	ldrd	r0, [fp, #4]
   154e0:	cmp	r1, r3
   154e4:	cmpeq	r0, r2
   154e8:	bcs	15570 <__assert_fail@plt+0x469c>
   154ec:	mov	r3, #1
   154f0:	str	r3, [fp, #-16]
   154f4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   154f8:	mvn	r0, #-1073741824	; 0xc0000000
   154fc:	mov	r1, #0
   15500:	cmp	r3, r1
   15504:	cmpeq	r2, r0
   15508:	bls	15520 <__assert_fail@plt+0x464c>
   1550c:	bl	10e2c <__errno_location@plt>
   15510:	mov	r2, r0
   15514:	mov	r3, #75	; 0x4b
   15518:	str	r3, [r2]
   1551c:	b	15570 <__assert_fail@plt+0x469c>
   15520:	bl	10e2c <__errno_location@plt>
   15524:	mov	r2, r0
   15528:	mov	r3, #34	; 0x22
   1552c:	str	r3, [r2]
   15530:	b	15570 <__assert_fail@plt+0x469c>
   15534:	ldr	r3, [fp, #-16]
   15538:	cmp	r3, #1
   1553c:	bne	15554 <__assert_fail@plt+0x4680>
   15540:	bl	10e2c <__errno_location@plt>
   15544:	mov	r2, r0
   15548:	mov	r3, #75	; 0x4b
   1554c:	str	r3, [r2]
   15550:	b	15570 <__assert_fail@plt+0x469c>
   15554:	ldr	r3, [fp, #-16]
   15558:	cmp	r3, #3
   1555c:	bne	15570 <__assert_fail@plt+0x469c>
   15560:	bl	10e2c <__errno_location@plt>
   15564:	mov	r2, r0
   15568:	mov	r3, #0
   1556c:	str	r3, [r2]
   15570:	ldr	r3, [fp, #-16]
   15574:	cmp	r3, #0
   15578:	beq	155e0 <__assert_fail@plt+0x470c>
   1557c:	ldr	r3, [fp, #20]
   15580:	cmp	r3, #0
   15584:	beq	15590 <__assert_fail@plt+0x46bc>
   15588:	ldr	r4, [fp, #20]
   1558c:	b	15594 <__assert_fail@plt+0x46c0>
   15590:	mov	r4, #1
   15594:	bl	10e2c <__errno_location@plt>
   15598:	mov	r3, r0
   1559c:	ldr	r3, [r3]
   155a0:	cmp	r3, #22
   155a4:	beq	155b8 <__assert_fail@plt+0x46e4>
   155a8:	bl	10e2c <__errno_location@plt>
   155ac:	mov	r3, r0
   155b0:	ldr	r5, [r3]
   155b4:	b	155bc <__assert_fail@plt+0x46e8>
   155b8:	mov	r5, #0
   155bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   155c0:	bl	1410c <__assert_fail@plt+0x3238>
   155c4:	mov	r3, r0
   155c8:	str	r3, [sp]
   155cc:	ldr	r3, [fp, #16]
   155d0:	ldr	r2, [pc, #28]	; 155f4 <__assert_fail@plt+0x4720>
   155d4:	mov	r1, r5
   155d8:	mov	r0, r4
   155dc:	bl	10d84 <error@plt>
   155e0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   155e4:	mov	r0, r2
   155e8:	mov	r1, r3
   155ec:	sub	sp, fp, #12
   155f0:	pop	{r4, r5, fp, pc}
   155f4:	andeq	r7, r1, r8, asr #28
   155f8:	push	{fp, lr}
   155fc:	add	fp, sp, #4
   15600:	sub	sp, sp, #40	; 0x28
   15604:	str	r0, [fp, #-8]
   15608:	strd	r2, [fp, #-20]	; 0xffffffec
   1560c:	ldr	r3, [fp, #20]
   15610:	str	r3, [sp, #16]
   15614:	ldr	r3, [fp, #16]
   15618:	str	r3, [sp, #12]
   1561c:	ldr	r3, [fp, #12]
   15620:	str	r3, [sp, #8]
   15624:	ldrd	r2, [fp, #4]
   15628:	strd	r2, [sp]
   1562c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   15630:	mov	r1, #10
   15634:	ldr	r0, [fp, #-8]
   15638:	bl	1547c <__assert_fail@plt+0x45a8>
   1563c:	mov	r2, r0
   15640:	mov	r3, r1
   15644:	mov	r0, r2
   15648:	mov	r1, r3
   1564c:	sub	sp, fp, #4
   15650:	pop	{fp, pc}
   15654:	push	{fp, lr}
   15658:	add	fp, sp, #4
   1565c:	sub	sp, sp, #16
   15660:	str	r0, [fp, #-16]
   15664:	str	r1, [fp, #-20]	; 0xffffffec
   15668:	ldr	r3, [fp, #-20]	; 0xffffffec
   1566c:	cmp	r3, #0
   15670:	bge	156ac <__assert_fail@plt+0x47d8>
   15674:	ldr	r1, [fp, #-20]	; 0xffffffec
   15678:	mov	r0, #0
   1567c:	bl	17110 <__assert_fail@plt+0x623c>
   15680:	mov	r3, r0
   15684:	mov	r0, r3
   15688:	asr	r1, r0, #31
   1568c:	ldr	r3, [fp, #-16]
   15690:	ldrd	r2, [r3]
   15694:	cmp	r1, r3
   15698:	cmpeq	r0, r2
   1569c:	movcc	r3, #1
   156a0:	movcs	r3, #0
   156a4:	uxtb	r3, r3
   156a8:	b	15708 <__assert_fail@plt+0x4834>
   156ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   156b0:	cmp	r3, #0
   156b4:	beq	156fc <__assert_fail@plt+0x4828>
   156b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   156bc:	mov	r2, r3
   156c0:	asr	r3, r2, #31
   156c4:	mvn	r0, #0
   156c8:	mvn	r1, #0
   156cc:	bl	17350 <__assert_fail@plt+0x647c>
   156d0:	mov	r2, r0
   156d4:	mov	r3, r1
   156d8:	mov	r0, r2
   156dc:	mov	r1, r3
   156e0:	ldr	r3, [fp, #-16]
   156e4:	ldrd	r2, [r3]
   156e8:	cmp	r1, r3
   156ec:	cmpeq	r0, r2
   156f0:	bcs	156fc <__assert_fail@plt+0x4828>
   156f4:	mov	r3, #1
   156f8:	b	15700 <__assert_fail@plt+0x482c>
   156fc:	mov	r3, #0
   15700:	and	r3, r3, #1
   15704:	uxtb	r3, r3
   15708:	cmp	r3, #0
   1570c:	beq	15748 <__assert_fail@plt+0x4874>
   15710:	ldr	r3, [fp, #-16]
   15714:	ldrd	r0, [r3]
   15718:	ldr	r3, [fp, #-20]	; 0xffffffec
   1571c:	mov	r2, r3
   15720:	asr	r3, r2, #31
   15724:	mul	lr, r2, r1
   15728:	mul	ip, r0, r3
   1572c:	add	ip, lr, ip
   15730:	umull	r2, r3, r0, r2
   15734:	add	r1, ip, r3
   15738:	mov	r3, r1
   1573c:	strd	r2, [fp, #-12]
   15740:	mov	r3, #1
   15744:	b	1577c <__assert_fail@plt+0x48a8>
   15748:	ldr	r3, [fp, #-16]
   1574c:	ldrd	r0, [r3]
   15750:	ldr	r3, [fp, #-20]	; 0xffffffec
   15754:	mov	r2, r3
   15758:	asr	r3, r2, #31
   1575c:	mul	lr, r2, r1
   15760:	mul	ip, r0, r3
   15764:	add	ip, lr, ip
   15768:	umull	r2, r3, r0, r2
   1576c:	add	r1, ip, r3
   15770:	mov	r3, r1
   15774:	strd	r2, [fp, #-12]
   15778:	mov	r3, #0
   1577c:	cmp	r3, #0
   15780:	beq	1579c <__assert_fail@plt+0x48c8>
   15784:	ldr	r1, [fp, #-16]
   15788:	mvn	r2, #0
   1578c:	mvn	r3, #0
   15790:	strd	r2, [r1]
   15794:	mov	r3, #1
   15798:	b	157ac <__assert_fail@plt+0x48d8>
   1579c:	ldrd	r2, [fp, #-12]
   157a0:	ldr	r1, [fp, #-16]
   157a4:	strd	r2, [r1]
   157a8:	mov	r3, #0
   157ac:	mov	r0, r3
   157b0:	sub	sp, fp, #4
   157b4:	pop	{fp, pc}
   157b8:	push	{fp, lr}
   157bc:	add	fp, sp, #4
   157c0:	sub	sp, sp, #24
   157c4:	str	r0, [fp, #-16]
   157c8:	str	r1, [fp, #-20]	; 0xffffffec
   157cc:	str	r2, [fp, #-24]	; 0xffffffe8
   157d0:	mov	r3, #0
   157d4:	str	r3, [fp, #-8]
   157d8:	b	157f8 <__assert_fail@plt+0x4924>
   157dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   157e0:	ldr	r0, [fp, #-16]
   157e4:	bl	15654 <__assert_fail@plt+0x4780>
   157e8:	mov	r2, r0
   157ec:	ldr	r3, [fp, #-8]
   157f0:	orr	r3, r3, r2
   157f4:	str	r3, [fp, #-8]
   157f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157fc:	sub	r2, r3, #1
   15800:	str	r2, [fp, #-24]	; 0xffffffe8
   15804:	cmp	r3, #0
   15808:	bne	157dc <__assert_fail@plt+0x4908>
   1580c:	ldr	r3, [fp, #-8]
   15810:	mov	r0, r3
   15814:	sub	sp, fp, #4
   15818:	pop	{fp, pc}
   1581c:	push	{fp, lr}
   15820:	add	fp, sp, #4
   15824:	sub	sp, sp, #56	; 0x38
   15828:	str	r0, [fp, #-48]	; 0xffffffd0
   1582c:	str	r1, [fp, #-52]	; 0xffffffcc
   15830:	str	r2, [fp, #-56]	; 0xffffffc8
   15834:	str	r3, [fp, #-60]	; 0xffffffc4
   15838:	mov	r3, #0
   1583c:	str	r3, [fp, #-8]
   15840:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15844:	cmp	r3, #0
   15848:	blt	15858 <__assert_fail@plt+0x4984>
   1584c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15850:	cmp	r3, #36	; 0x24
   15854:	ble	1586c <__assert_fail@plt+0x4998>
   15858:	ldr	r3, [pc, #1520]	; 15e50 <__assert_fail@plt+0x4f7c>
   1585c:	mov	r2, #85	; 0x55
   15860:	ldr	r1, [pc, #1516]	; 15e54 <__assert_fail@plt+0x4f80>
   15864:	ldr	r0, [pc, #1516]	; 15e58 <__assert_fail@plt+0x4f84>
   15868:	bl	10ed4 <__assert_fail@plt>
   1586c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15870:	cmp	r3, #0
   15874:	bne	15880 <__assert_fail@plt+0x49ac>
   15878:	sub	r3, fp, #36	; 0x24
   1587c:	b	15884 <__assert_fail@plt+0x49b0>
   15880:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15884:	str	r3, [fp, #-32]	; 0xffffffe0
   15888:	bl	10e2c <__errno_location@plt>
   1588c:	mov	r2, r0
   15890:	mov	r3, #0
   15894:	str	r3, [r2]
   15898:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1589c:	str	r3, [fp, #-12]
   158a0:	ldr	r3, [fp, #-12]
   158a4:	ldrb	r3, [r3]
   158a8:	strb	r3, [fp, #-13]
   158ac:	b	158c8 <__assert_fail@plt+0x49f4>
   158b0:	ldr	r3, [fp, #-12]
   158b4:	add	r3, r3, #1
   158b8:	str	r3, [fp, #-12]
   158bc:	ldr	r3, [fp, #-12]
   158c0:	ldrb	r3, [r3]
   158c4:	strb	r3, [fp, #-13]
   158c8:	bl	10dd8 <__ctype_b_loc@plt>
   158cc:	mov	r3, r0
   158d0:	ldr	r2, [r3]
   158d4:	ldrb	r3, [fp, #-13]
   158d8:	lsl	r3, r3, #1
   158dc:	add	r3, r2, r3
   158e0:	ldrh	r3, [r3]
   158e4:	and	r3, r3, #8192	; 0x2000
   158e8:	cmp	r3, #0
   158ec:	bne	158b0 <__assert_fail@plt+0x49dc>
   158f0:	ldrb	r3, [fp, #-13]
   158f4:	cmp	r3, #45	; 0x2d
   158f8:	bne	15904 <__assert_fail@plt+0x4a30>
   158fc:	mov	r3, #4
   15900:	b	15e44 <__assert_fail@plt+0x4f70>
   15904:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15908:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1590c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15910:	bl	10e5c <strtoumax@plt>
   15914:	mov	r2, r0
   15918:	mov	r3, r1
   1591c:	strd	r2, [fp, #-44]	; 0xffffffd4
   15920:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15924:	ldr	r2, [r3]
   15928:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1592c:	cmp	r2, r3
   15930:	bne	15990 <__assert_fail@plt+0x4abc>
   15934:	ldr	r3, [fp, #4]
   15938:	cmp	r3, #0
   1593c:	beq	15988 <__assert_fail@plt+0x4ab4>
   15940:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15944:	ldr	r3, [r3]
   15948:	ldrb	r3, [r3]
   1594c:	cmp	r3, #0
   15950:	beq	15988 <__assert_fail@plt+0x4ab4>
   15954:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15958:	ldr	r3, [r3]
   1595c:	ldrb	r3, [r3]
   15960:	mov	r1, r3
   15964:	ldr	r0, [fp, #4]
   15968:	bl	10e14 <strchr@plt>
   1596c:	mov	r3, r0
   15970:	cmp	r3, #0
   15974:	beq	15988 <__assert_fail@plt+0x4ab4>
   15978:	mov	r2, #1
   1597c:	mov	r3, #0
   15980:	strd	r2, [fp, #-44]	; 0xffffffd4
   15984:	b	159c8 <__assert_fail@plt+0x4af4>
   15988:	mov	r3, #4
   1598c:	b	15e44 <__assert_fail@plt+0x4f70>
   15990:	bl	10e2c <__errno_location@plt>
   15994:	mov	r3, r0
   15998:	ldr	r3, [r3]
   1599c:	cmp	r3, #0
   159a0:	beq	159c8 <__assert_fail@plt+0x4af4>
   159a4:	bl	10e2c <__errno_location@plt>
   159a8:	mov	r3, r0
   159ac:	ldr	r3, [r3]
   159b0:	cmp	r3, #34	; 0x22
   159b4:	beq	159c0 <__assert_fail@plt+0x4aec>
   159b8:	mov	r3, #4
   159bc:	b	15e44 <__assert_fail@plt+0x4f70>
   159c0:	mov	r3, #1
   159c4:	str	r3, [fp, #-8]
   159c8:	ldr	r3, [fp, #4]
   159cc:	cmp	r3, #0
   159d0:	bne	159e8 <__assert_fail@plt+0x4b14>
   159d4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   159d8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   159dc:	strd	r2, [r1]
   159e0:	ldr	r3, [fp, #-8]
   159e4:	b	15e44 <__assert_fail@plt+0x4f70>
   159e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   159ec:	ldr	r3, [r3]
   159f0:	ldrb	r3, [r3]
   159f4:	cmp	r3, #0
   159f8:	beq	15e34 <__assert_fail@plt+0x4f60>
   159fc:	mov	r3, #1024	; 0x400
   15a00:	str	r3, [fp, #-20]	; 0xffffffec
   15a04:	mov	r3, #1
   15a08:	str	r3, [fp, #-24]	; 0xffffffe8
   15a0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a10:	ldr	r3, [r3]
   15a14:	ldrb	r3, [r3]
   15a18:	mov	r1, r3
   15a1c:	ldr	r0, [fp, #4]
   15a20:	bl	10e14 <strchr@plt>
   15a24:	mov	r3, r0
   15a28:	cmp	r3, #0
   15a2c:	bne	15a48 <__assert_fail@plt+0x4b74>
   15a30:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   15a34:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15a38:	strd	r2, [r1]
   15a3c:	ldr	r3, [fp, #-8]
   15a40:	orr	r3, r3, #2
   15a44:	b	15e44 <__assert_fail@plt+0x4f70>
   15a48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a4c:	ldr	r3, [r3]
   15a50:	ldrb	r3, [r3]
   15a54:	sub	r3, r3, #69	; 0x45
   15a58:	cmp	r3, #47	; 0x2f
   15a5c:	ldrls	pc, [pc, r3, lsl #2]
   15a60:	b	15bac <__assert_fail@plt+0x4cd8>
   15a64:	andeq	r5, r1, r4, lsr #22
   15a68:	andeq	r5, r1, ip, lsr #23
   15a6c:	andeq	r5, r1, r4, lsr #22
   15a70:	andeq	r5, r1, ip, lsr #23
   15a74:	andeq	r5, r1, ip, lsr #23
   15a78:	andeq	r5, r1, ip, lsr #23
   15a7c:	andeq	r5, r1, r4, lsr #22
   15a80:	andeq	r5, r1, ip, lsr #23
   15a84:	andeq	r5, r1, r4, lsr #22
   15a88:	andeq	r5, r1, ip, lsr #23
   15a8c:	andeq	r5, r1, ip, lsr #23
   15a90:	andeq	r5, r1, r4, lsr #22
   15a94:	andeq	r5, r1, ip, lsr #23
   15a98:	andeq	r5, r1, ip, lsr #23
   15a9c:	andeq	r5, r1, ip, lsr #23
   15aa0:	andeq	r5, r1, r4, lsr #22
   15aa4:	andeq	r5, r1, ip, lsr #23
   15aa8:	andeq	r5, r1, ip, lsr #23
   15aac:	andeq	r5, r1, ip, lsr #23
   15ab0:	andeq	r5, r1, ip, lsr #23
   15ab4:	andeq	r5, r1, r4, lsr #22
   15ab8:	andeq	r5, r1, r4, lsr #22
   15abc:	andeq	r5, r1, ip, lsr #23
   15ac0:	andeq	r5, r1, ip, lsr #23
   15ac4:	andeq	r5, r1, ip, lsr #23
   15ac8:	andeq	r5, r1, ip, lsr #23
   15acc:	andeq	r5, r1, ip, lsr #23
   15ad0:	andeq	r5, r1, ip, lsr #23
   15ad4:	andeq	r5, r1, ip, lsr #23
   15ad8:	andeq	r5, r1, ip, lsr #23
   15adc:	andeq	r5, r1, ip, lsr #23
   15ae0:	andeq	r5, r1, ip, lsr #23
   15ae4:	andeq	r5, r1, ip, lsr #23
   15ae8:	andeq	r5, r1, ip, lsr #23
   15aec:	andeq	r5, r1, r4, lsr #22
   15af0:	andeq	r5, r1, ip, lsr #23
   15af4:	andeq	r5, r1, ip, lsr #23
   15af8:	andeq	r5, r1, ip, lsr #23
   15afc:	andeq	r5, r1, r4, lsr #22
   15b00:	andeq	r5, r1, ip, lsr #23
   15b04:	andeq	r5, r1, r4, lsr #22
   15b08:	andeq	r5, r1, ip, lsr #23
   15b0c:	andeq	r5, r1, ip, lsr #23
   15b10:	andeq	r5, r1, ip, lsr #23
   15b14:	andeq	r5, r1, ip, lsr #23
   15b18:	andeq	r5, r1, ip, lsr #23
   15b1c:	andeq	r5, r1, ip, lsr #23
   15b20:	andeq	r5, r1, r4, lsr #22
   15b24:	mov	r1, #48	; 0x30
   15b28:	ldr	r0, [fp, #4]
   15b2c:	bl	10e14 <strchr@plt>
   15b30:	mov	r3, r0
   15b34:	cmp	r3, #0
   15b38:	beq	15bac <__assert_fail@plt+0x4cd8>
   15b3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b40:	ldr	r3, [r3]
   15b44:	add	r3, r3, #1
   15b48:	ldrb	r3, [r3]
   15b4c:	cmp	r3, #68	; 0x44
   15b50:	beq	15b90 <__assert_fail@plt+0x4cbc>
   15b54:	cmp	r3, #105	; 0x69
   15b58:	beq	15b68 <__assert_fail@plt+0x4c94>
   15b5c:	cmp	r3, #66	; 0x42
   15b60:	beq	15b90 <__assert_fail@plt+0x4cbc>
   15b64:	b	15bac <__assert_fail@plt+0x4cd8>
   15b68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b6c:	ldr	r3, [r3]
   15b70:	add	r3, r3, #2
   15b74:	ldrb	r3, [r3]
   15b78:	cmp	r3, #66	; 0x42
   15b7c:	bne	15ba8 <__assert_fail@plt+0x4cd4>
   15b80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b84:	add	r3, r3, #2
   15b88:	str	r3, [fp, #-24]	; 0xffffffe8
   15b8c:	b	15ba8 <__assert_fail@plt+0x4cd4>
   15b90:	mov	r3, #1000	; 0x3e8
   15b94:	str	r3, [fp, #-20]	; 0xffffffec
   15b98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b9c:	add	r3, r3, #1
   15ba0:	str	r3, [fp, #-24]	; 0xffffffe8
   15ba4:	b	15bac <__assert_fail@plt+0x4cd8>
   15ba8:	nop			; (mov r0, r0)
   15bac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15bb0:	ldr	r3, [r3]
   15bb4:	ldrb	r3, [r3]
   15bb8:	sub	r3, r3, #66	; 0x42
   15bbc:	cmp	r3, #53	; 0x35
   15bc0:	ldrls	pc, [pc, r3, lsl #2]
   15bc4:	b	15dd4 <__assert_fail@plt+0x4f00>
   15bc8:			; <UNDEFINED> instruction: 0x00015cb8
   15bcc:	ldrdeq	r5, [r1], -r4
   15bd0:	ldrdeq	r5, [r1], -r4
   15bd4:	ldrdeq	r5, [r1], -ip
   15bd8:	ldrdeq	r5, [r1], -r4
   15bdc:	strdeq	r5, [r1], -r8
   15be0:	ldrdeq	r5, [r1], -r4
   15be4:	ldrdeq	r5, [r1], -r4
   15be8:	ldrdeq	r5, [r1], -r4
   15bec:	andeq	r5, r1, r4, lsl sp
   15bf0:	ldrdeq	r5, [r1], -r4
   15bf4:	andeq	r5, r1, r0, lsr sp
   15bf8:	ldrdeq	r5, [r1], -r4
   15bfc:	ldrdeq	r5, [r1], -r4
   15c00:	andeq	r5, r1, ip, asr #26
   15c04:	ldrdeq	r5, [r1], -r4
   15c08:	ldrdeq	r5, [r1], -r4
   15c0c:	ldrdeq	r5, [r1], -r4
   15c10:	andeq	r5, r1, r8, ror #26
   15c14:	ldrdeq	r5, [r1], -r4
   15c18:	ldrdeq	r5, [r1], -r4
   15c1c:	ldrdeq	r5, [r1], -r4
   15c20:	ldrdeq	r5, [r1], -r4
   15c24:	muleq	r1, ip, sp
   15c28:			; <UNDEFINED> instruction: 0x00015db8
   15c2c:	ldrdeq	r5, [r1], -r4
   15c30:	ldrdeq	r5, [r1], -r4
   15c34:	ldrdeq	r5, [r1], -r4
   15c38:	ldrdeq	r5, [r1], -r4
   15c3c:	ldrdeq	r5, [r1], -r4
   15c40:	ldrdeq	r5, [r1], -r4
   15c44:	ldrdeq	r5, [r1], -r4
   15c48:	andeq	r5, r1, r0, lsr #25
   15c4c:	ldrdeq	r5, [r1], -r0
   15c50:	ldrdeq	r5, [r1], -r4
   15c54:	ldrdeq	r5, [r1], -r4
   15c58:	ldrdeq	r5, [r1], -r4
   15c5c:	strdeq	r5, [r1], -r8
   15c60:	ldrdeq	r5, [r1], -r4
   15c64:	ldrdeq	r5, [r1], -r4
   15c68:	ldrdeq	r5, [r1], -r4
   15c6c:	andeq	r5, r1, r4, lsl sp
   15c70:	ldrdeq	r5, [r1], -r4
   15c74:	andeq	r5, r1, r0, lsr sp
   15c78:	ldrdeq	r5, [r1], -r4
   15c7c:	ldrdeq	r5, [r1], -r4
   15c80:	ldrdeq	r5, [r1], -r4
   15c84:	ldrdeq	r5, [r1], -r4
   15c88:	ldrdeq	r5, [r1], -r4
   15c8c:	ldrdeq	r5, [r1], -r4
   15c90:	andeq	r5, r1, r8, ror #26
   15c94:	ldrdeq	r5, [r1], -r4
   15c98:	ldrdeq	r5, [r1], -r4
   15c9c:	andeq	r5, r1, r4, lsl #27
   15ca0:	sub	r3, fp, #44	; 0x2c
   15ca4:	mov	r1, #512	; 0x200
   15ca8:	mov	r0, r3
   15cac:	bl	15654 <__assert_fail@plt+0x4780>
   15cb0:	str	r0, [fp, #-28]	; 0xffffffe4
   15cb4:	b	15dec <__assert_fail@plt+0x4f18>
   15cb8:	sub	r3, fp, #44	; 0x2c
   15cbc:	mov	r1, #1024	; 0x400
   15cc0:	mov	r0, r3
   15cc4:	bl	15654 <__assert_fail@plt+0x4780>
   15cc8:	str	r0, [fp, #-28]	; 0xffffffe4
   15ccc:	b	15dec <__assert_fail@plt+0x4f18>
   15cd0:	mov	r3, #0
   15cd4:	str	r3, [fp, #-28]	; 0xffffffe4
   15cd8:	b	15dec <__assert_fail@plt+0x4f18>
   15cdc:	sub	r3, fp, #44	; 0x2c
   15ce0:	mov	r2, #6
   15ce4:	ldr	r1, [fp, #-20]	; 0xffffffec
   15ce8:	mov	r0, r3
   15cec:	bl	157b8 <__assert_fail@plt+0x48e4>
   15cf0:	str	r0, [fp, #-28]	; 0xffffffe4
   15cf4:	b	15dec <__assert_fail@plt+0x4f18>
   15cf8:	sub	r3, fp, #44	; 0x2c
   15cfc:	mov	r2, #3
   15d00:	ldr	r1, [fp, #-20]	; 0xffffffec
   15d04:	mov	r0, r3
   15d08:	bl	157b8 <__assert_fail@plt+0x48e4>
   15d0c:	str	r0, [fp, #-28]	; 0xffffffe4
   15d10:	b	15dec <__assert_fail@plt+0x4f18>
   15d14:	sub	r3, fp, #44	; 0x2c
   15d18:	mov	r2, #1
   15d1c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15d20:	mov	r0, r3
   15d24:	bl	157b8 <__assert_fail@plt+0x48e4>
   15d28:	str	r0, [fp, #-28]	; 0xffffffe4
   15d2c:	b	15dec <__assert_fail@plt+0x4f18>
   15d30:	sub	r3, fp, #44	; 0x2c
   15d34:	mov	r2, #2
   15d38:	ldr	r1, [fp, #-20]	; 0xffffffec
   15d3c:	mov	r0, r3
   15d40:	bl	157b8 <__assert_fail@plt+0x48e4>
   15d44:	str	r0, [fp, #-28]	; 0xffffffe4
   15d48:	b	15dec <__assert_fail@plt+0x4f18>
   15d4c:	sub	r3, fp, #44	; 0x2c
   15d50:	mov	r2, #5
   15d54:	ldr	r1, [fp, #-20]	; 0xffffffec
   15d58:	mov	r0, r3
   15d5c:	bl	157b8 <__assert_fail@plt+0x48e4>
   15d60:	str	r0, [fp, #-28]	; 0xffffffe4
   15d64:	b	15dec <__assert_fail@plt+0x4f18>
   15d68:	sub	r3, fp, #44	; 0x2c
   15d6c:	mov	r2, #4
   15d70:	ldr	r1, [fp, #-20]	; 0xffffffec
   15d74:	mov	r0, r3
   15d78:	bl	157b8 <__assert_fail@plt+0x48e4>
   15d7c:	str	r0, [fp, #-28]	; 0xffffffe4
   15d80:	b	15dec <__assert_fail@plt+0x4f18>
   15d84:	sub	r3, fp, #44	; 0x2c
   15d88:	mov	r1, #2
   15d8c:	mov	r0, r3
   15d90:	bl	15654 <__assert_fail@plt+0x4780>
   15d94:	str	r0, [fp, #-28]	; 0xffffffe4
   15d98:	b	15dec <__assert_fail@plt+0x4f18>
   15d9c:	sub	r3, fp, #44	; 0x2c
   15da0:	mov	r2, #8
   15da4:	ldr	r1, [fp, #-20]	; 0xffffffec
   15da8:	mov	r0, r3
   15dac:	bl	157b8 <__assert_fail@plt+0x48e4>
   15db0:	str	r0, [fp, #-28]	; 0xffffffe4
   15db4:	b	15dec <__assert_fail@plt+0x4f18>
   15db8:	sub	r3, fp, #44	; 0x2c
   15dbc:	mov	r2, #7
   15dc0:	ldr	r1, [fp, #-20]	; 0xffffffec
   15dc4:	mov	r0, r3
   15dc8:	bl	157b8 <__assert_fail@plt+0x48e4>
   15dcc:	str	r0, [fp, #-28]	; 0xffffffe4
   15dd0:	b	15dec <__assert_fail@plt+0x4f18>
   15dd4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   15dd8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15ddc:	strd	r2, [r1]
   15de0:	ldr	r3, [fp, #-8]
   15de4:	orr	r3, r3, #2
   15de8:	b	15e44 <__assert_fail@plt+0x4f70>
   15dec:	ldr	r2, [fp, #-8]
   15df0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15df4:	orr	r3, r2, r3
   15df8:	str	r3, [fp, #-8]
   15dfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e00:	ldr	r2, [r3]
   15e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e08:	add	r2, r2, r3
   15e0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e10:	str	r2, [r3]
   15e14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e18:	ldr	r3, [r3]
   15e1c:	ldrb	r3, [r3]
   15e20:	cmp	r3, #0
   15e24:	beq	15e34 <__assert_fail@plt+0x4f60>
   15e28:	ldr	r3, [fp, #-8]
   15e2c:	orr	r3, r3, #2
   15e30:	str	r3, [fp, #-8]
   15e34:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   15e38:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15e3c:	strd	r2, [r1]
   15e40:	ldr	r3, [fp, #-8]
   15e44:	mov	r0, r3
   15e48:	sub	sp, fp, #4
   15e4c:	pop	{fp, pc}
   15e50:	andeq	r7, r1, r8, lsl #29
   15e54:	andeq	r7, r1, r0, asr lr
   15e58:	andeq	r7, r1, r0, ror #28
   15e5c:	push	{r4, r5, fp, lr}
   15e60:	add	fp, sp, #12
   15e64:	sub	sp, sp, #16
   15e68:	str	r0, [fp, #-24]	; 0xffffffe8
   15e6c:	str	r1, [fp, #-28]	; 0xffffffe4
   15e70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e74:	cmp	r3, #0
   15e78:	beq	15e88 <__assert_fail@plt+0x4fb4>
   15e7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15e80:	cmp	r3, #0
   15e84:	bne	15e98 <__assert_fail@plt+0x4fc4>
   15e88:	mov	r3, #1
   15e8c:	str	r3, [fp, #-28]	; 0xffffffe4
   15e90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15e94:	str	r3, [fp, #-24]	; 0xffffffe8
   15e98:	mov	r1, #0
   15e9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15ea0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ea4:	umull	r2, r3, r2, r3
   15ea8:	mov	r4, r3
   15eac:	mov	r5, #0
   15eb0:	cmp	r4, #0
   15eb4:	beq	15ebc <__assert_fail@plt+0x4fe8>
   15eb8:	mov	r1, #1
   15ebc:	cmp	r2, #0
   15ec0:	bge	15ec8 <__assert_fail@plt+0x4ff4>
   15ec4:	mov	r1, #1
   15ec8:	mov	r3, r2
   15ecc:	str	r3, [fp, #-20]	; 0xffffffec
   15ed0:	mov	r3, r1
   15ed4:	and	r3, r3, #1
   15ed8:	uxtb	r3, r3
   15edc:	cmp	r3, #0
   15ee0:	beq	15efc <__assert_fail@plt+0x5028>
   15ee4:	bl	10e2c <__errno_location@plt>
   15ee8:	mov	r2, r0
   15eec:	mov	r3, #12
   15ef0:	str	r3, [r2]
   15ef4:	mov	r3, #0
   15ef8:	b	15f14 <__assert_fail@plt+0x5040>
   15efc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15f00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15f04:	bl	10c70 <calloc@plt>
   15f08:	mov	r3, r0
   15f0c:	str	r3, [fp, #-16]
   15f10:	ldr	r3, [fp, #-16]
   15f14:	mov	r0, r3
   15f18:	sub	sp, fp, #12
   15f1c:	pop	{r4, r5, fp, pc}
   15f20:	push	{r4, r5, fp, lr}
   15f24:	add	fp, sp, #12
   15f28:	sub	sp, sp, #16
   15f2c:	str	r0, [fp, #-24]	; 0xffffffe8
   15f30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f34:	cmp	r3, #0
   15f38:	bne	15f44 <__assert_fail@plt+0x5070>
   15f3c:	mov	r3, #1
   15f40:	str	r3, [fp, #-24]	; 0xffffffe8
   15f44:	mov	r1, #0
   15f48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f4c:	mov	r2, r3
   15f50:	mov	r3, #0
   15f54:	mov	r4, r3
   15f58:	mov	r5, #0
   15f5c:	cmp	r4, #0
   15f60:	beq	15f68 <__assert_fail@plt+0x5094>
   15f64:	mov	r1, #1
   15f68:	cmp	r2, #0
   15f6c:	bge	15f74 <__assert_fail@plt+0x50a0>
   15f70:	mov	r1, #1
   15f74:	mov	r3, r2
   15f78:	str	r3, [fp, #-20]	; 0xffffffec
   15f7c:	mov	r3, r1
   15f80:	and	r3, r3, #1
   15f84:	uxtb	r3, r3
   15f88:	cmp	r3, #0
   15f8c:	beq	15fa8 <__assert_fail@plt+0x50d4>
   15f90:	bl	10e2c <__errno_location@plt>
   15f94:	mov	r2, r0
   15f98:	mov	r3, #12
   15f9c:	str	r3, [r2]
   15fa0:	mov	r3, #0
   15fa4:	b	15fbc <__assert_fail@plt+0x50e8>
   15fa8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15fac:	bl	10d9c <malloc@plt>
   15fb0:	mov	r3, r0
   15fb4:	str	r3, [fp, #-16]
   15fb8:	ldr	r3, [fp, #-16]
   15fbc:	mov	r0, r3
   15fc0:	sub	sp, fp, #12
   15fc4:	pop	{r4, r5, fp, pc}
   15fc8:	push	{r4, r5, fp, lr}
   15fcc:	add	fp, sp, #12
   15fd0:	sub	sp, sp, #16
   15fd4:	str	r0, [fp, #-24]	; 0xffffffe8
   15fd8:	str	r1, [fp, #-28]	; 0xffffffe4
   15fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15fe0:	cmp	r3, #0
   15fe4:	bne	15ff8 <__assert_fail@plt+0x5124>
   15fe8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15fec:	bl	15f20 <__assert_fail@plt+0x504c>
   15ff0:	mov	r3, r0
   15ff4:	b	1608c <__assert_fail@plt+0x51b8>
   15ff8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ffc:	cmp	r3, #0
   16000:	bne	16014 <__assert_fail@plt+0x5140>
   16004:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16008:	bl	1689c <__assert_fail@plt+0x59c8>
   1600c:	mov	r3, #0
   16010:	b	1608c <__assert_fail@plt+0x51b8>
   16014:	mov	r1, #0
   16018:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1601c:	mov	r2, r3
   16020:	mov	r3, #0
   16024:	mov	r4, r3
   16028:	mov	r5, #0
   1602c:	cmp	r4, #0
   16030:	beq	16038 <__assert_fail@plt+0x5164>
   16034:	mov	r1, #1
   16038:	cmp	r2, #0
   1603c:	bge	16044 <__assert_fail@plt+0x5170>
   16040:	mov	r1, #1
   16044:	mov	r3, r2
   16048:	str	r3, [fp, #-20]	; 0xffffffec
   1604c:	mov	r3, r1
   16050:	and	r3, r3, #1
   16054:	uxtb	r3, r3
   16058:	cmp	r3, #0
   1605c:	beq	16078 <__assert_fail@plt+0x51a4>
   16060:	bl	10e2c <__errno_location@plt>
   16064:	mov	r2, r0
   16068:	mov	r3, #12
   1606c:	str	r3, [r2]
   16070:	mov	r3, #0
   16074:	b	1608c <__assert_fail@plt+0x51b8>
   16078:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1607c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16080:	bl	10d18 <realloc@plt>
   16084:	str	r0, [fp, #-16]
   16088:	ldr	r3, [fp, #-16]
   1608c:	mov	r0, r3
   16090:	sub	sp, fp, #12
   16094:	pop	{r4, r5, fp, pc}
   16098:	push	{fp}		; (str fp, [sp, #-4]!)
   1609c:	add	fp, sp, #0
   160a0:	sub	sp, sp, #12
   160a4:	str	r0, [fp, #-8]
   160a8:	ldr	r3, [fp, #-8]
   160ac:	cmp	r3, #90	; 0x5a
   160b0:	bgt	160cc <__assert_fail@plt+0x51f8>
   160b4:	cmp	r3, #65	; 0x41
   160b8:	bge	160d8 <__assert_fail@plt+0x5204>
   160bc:	sub	r3, r3, #48	; 0x30
   160c0:	cmp	r3, #9
   160c4:	bhi	160e0 <__assert_fail@plt+0x520c>
   160c8:	b	160d8 <__assert_fail@plt+0x5204>
   160cc:	sub	r3, r3, #97	; 0x61
   160d0:	cmp	r3, #25
   160d4:	bhi	160e0 <__assert_fail@plt+0x520c>
   160d8:	mov	r3, #1
   160dc:	b	160e4 <__assert_fail@plt+0x5210>
   160e0:	mov	r3, #0
   160e4:	mov	r0, r3
   160e8:	add	sp, fp, #0
   160ec:	pop	{fp}		; (ldr fp, [sp], #4)
   160f0:	bx	lr
   160f4:	push	{fp}		; (str fp, [sp, #-4]!)
   160f8:	add	fp, sp, #0
   160fc:	sub	sp, sp, #12
   16100:	str	r0, [fp, #-8]
   16104:	ldr	r3, [fp, #-8]
   16108:	cmp	r3, #65	; 0x41
   1610c:	blt	1612c <__assert_fail@plt+0x5258>
   16110:	cmp	r3, #90	; 0x5a
   16114:	ble	16124 <__assert_fail@plt+0x5250>
   16118:	sub	r3, r3, #97	; 0x61
   1611c:	cmp	r3, #25
   16120:	bhi	1612c <__assert_fail@plt+0x5258>
   16124:	mov	r3, #1
   16128:	b	16130 <__assert_fail@plt+0x525c>
   1612c:	mov	r3, #0
   16130:	mov	r0, r3
   16134:	add	sp, fp, #0
   16138:	pop	{fp}		; (ldr fp, [sp], #4)
   1613c:	bx	lr
   16140:	push	{fp}		; (str fp, [sp, #-4]!)
   16144:	add	fp, sp, #0
   16148:	sub	sp, sp, #12
   1614c:	str	r0, [fp, #-8]
   16150:	ldr	r3, [fp, #-8]
   16154:	add	r3, r3, #0
   16158:	cmp	r3, #127	; 0x7f
   1615c:	bhi	16168 <__assert_fail@plt+0x5294>
   16160:	mov	r3, #1
   16164:	b	1616c <__assert_fail@plt+0x5298>
   16168:	mov	r3, #0
   1616c:	mov	r0, r3
   16170:	add	sp, fp, #0
   16174:	pop	{fp}		; (ldr fp, [sp], #4)
   16178:	bx	lr
   1617c:	push	{fp}		; (str fp, [sp, #-4]!)
   16180:	add	fp, sp, #0
   16184:	sub	sp, sp, #12
   16188:	str	r0, [fp, #-8]
   1618c:	ldr	r3, [fp, #-8]
   16190:	cmp	r3, #32
   16194:	beq	161a4 <__assert_fail@plt+0x52d0>
   16198:	ldr	r3, [fp, #-8]
   1619c:	cmp	r3, #9
   161a0:	bne	161ac <__assert_fail@plt+0x52d8>
   161a4:	mov	r3, #1
   161a8:	b	161b0 <__assert_fail@plt+0x52dc>
   161ac:	mov	r3, #0
   161b0:	and	r3, r3, #1
   161b4:	uxtb	r3, r3
   161b8:	mov	r0, r3
   161bc:	add	sp, fp, #0
   161c0:	pop	{fp}		; (ldr fp, [sp], #4)
   161c4:	bx	lr
   161c8:	push	{fp}		; (str fp, [sp, #-4]!)
   161cc:	add	fp, sp, #0
   161d0:	sub	sp, sp, #12
   161d4:	str	r0, [fp, #-8]
   161d8:	ldr	r3, [fp, #-8]
   161dc:	cmp	r3, #0
   161e0:	blt	161fc <__assert_fail@plt+0x5328>
   161e4:	cmp	r3, #31
   161e8:	ble	161f4 <__assert_fail@plt+0x5320>
   161ec:	cmp	r3, #127	; 0x7f
   161f0:	bne	161fc <__assert_fail@plt+0x5328>
   161f4:	mov	r3, #1
   161f8:	b	16200 <__assert_fail@plt+0x532c>
   161fc:	mov	r3, #0
   16200:	mov	r0, r3
   16204:	add	sp, fp, #0
   16208:	pop	{fp}		; (ldr fp, [sp], #4)
   1620c:	bx	lr
   16210:	push	{fp}		; (str fp, [sp, #-4]!)
   16214:	add	fp, sp, #0
   16218:	sub	sp, sp, #12
   1621c:	str	r0, [fp, #-8]
   16220:	ldr	r3, [fp, #-8]
   16224:	sub	r3, r3, #48	; 0x30
   16228:	cmp	r3, #9
   1622c:	bhi	16238 <__assert_fail@plt+0x5364>
   16230:	mov	r3, #1
   16234:	b	1623c <__assert_fail@plt+0x5368>
   16238:	mov	r3, #0
   1623c:	mov	r0, r3
   16240:	add	sp, fp, #0
   16244:	pop	{fp}		; (ldr fp, [sp], #4)
   16248:	bx	lr
   1624c:	push	{fp}		; (str fp, [sp, #-4]!)
   16250:	add	fp, sp, #0
   16254:	sub	sp, sp, #12
   16258:	str	r0, [fp, #-8]
   1625c:	ldr	r3, [fp, #-8]
   16260:	sub	r3, r3, #33	; 0x21
   16264:	cmp	r3, #93	; 0x5d
   16268:	bhi	16274 <__assert_fail@plt+0x53a0>
   1626c:	mov	r3, #1
   16270:	b	16278 <__assert_fail@plt+0x53a4>
   16274:	mov	r3, #0
   16278:	mov	r0, r3
   1627c:	add	sp, fp, #0
   16280:	pop	{fp}		; (ldr fp, [sp], #4)
   16284:	bx	lr
   16288:	push	{fp}		; (str fp, [sp, #-4]!)
   1628c:	add	fp, sp, #0
   16290:	sub	sp, sp, #12
   16294:	str	r0, [fp, #-8]
   16298:	ldr	r3, [fp, #-8]
   1629c:	sub	r3, r3, #97	; 0x61
   162a0:	cmp	r3, #25
   162a4:	bhi	162b0 <__assert_fail@plt+0x53dc>
   162a8:	mov	r3, #1
   162ac:	b	162b4 <__assert_fail@plt+0x53e0>
   162b0:	mov	r3, #0
   162b4:	mov	r0, r3
   162b8:	add	sp, fp, #0
   162bc:	pop	{fp}		; (ldr fp, [sp], #4)
   162c0:	bx	lr
   162c4:	push	{fp}		; (str fp, [sp, #-4]!)
   162c8:	add	fp, sp, #0
   162cc:	sub	sp, sp, #12
   162d0:	str	r0, [fp, #-8]
   162d4:	ldr	r3, [fp, #-8]
   162d8:	sub	r3, r3, #32
   162dc:	cmp	r3, #94	; 0x5e
   162e0:	bhi	162ec <__assert_fail@plt+0x5418>
   162e4:	mov	r3, #1
   162e8:	b	162f0 <__assert_fail@plt+0x541c>
   162ec:	mov	r3, #0
   162f0:	mov	r0, r3
   162f4:	add	sp, fp, #0
   162f8:	pop	{fp}		; (ldr fp, [sp], #4)
   162fc:	bx	lr
   16300:	push	{fp}		; (str fp, [sp, #-4]!)
   16304:	add	fp, sp, #0
   16308:	sub	sp, sp, #12
   1630c:	str	r0, [fp, #-8]
   16310:	ldr	r3, [fp, #-8]
   16314:	cmp	r3, #64	; 0x40
   16318:	bgt	16334 <__assert_fail@plt+0x5460>
   1631c:	cmp	r3, #58	; 0x3a
   16320:	bge	16350 <__assert_fail@plt+0x547c>
   16324:	sub	r3, r3, #33	; 0x21
   16328:	cmp	r3, #14
   1632c:	bhi	16358 <__assert_fail@plt+0x5484>
   16330:	b	16350 <__assert_fail@plt+0x547c>
   16334:	cmp	r3, #91	; 0x5b
   16338:	blt	16358 <__assert_fail@plt+0x5484>
   1633c:	cmp	r3, #96	; 0x60
   16340:	ble	16350 <__assert_fail@plt+0x547c>
   16344:	sub	r3, r3, #123	; 0x7b
   16348:	cmp	r3, #3
   1634c:	bhi	16358 <__assert_fail@plt+0x5484>
   16350:	mov	r3, #1
   16354:	b	1635c <__assert_fail@plt+0x5488>
   16358:	mov	r3, #0
   1635c:	mov	r0, r3
   16360:	add	sp, fp, #0
   16364:	pop	{fp}		; (ldr fp, [sp], #4)
   16368:	bx	lr
   1636c:	push	{fp}		; (str fp, [sp, #-4]!)
   16370:	add	fp, sp, #0
   16374:	sub	sp, sp, #12
   16378:	str	r0, [fp, #-8]
   1637c:	ldr	r3, [fp, #-8]
   16380:	cmp	r3, #9
   16384:	blt	163a0 <__assert_fail@plt+0x54cc>
   16388:	cmp	r3, #13
   1638c:	ble	16398 <__assert_fail@plt+0x54c4>
   16390:	cmp	r3, #32
   16394:	bne	163a0 <__assert_fail@plt+0x54cc>
   16398:	mov	r3, #1
   1639c:	b	163a4 <__assert_fail@plt+0x54d0>
   163a0:	mov	r3, #0
   163a4:	mov	r0, r3
   163a8:	add	sp, fp, #0
   163ac:	pop	{fp}		; (ldr fp, [sp], #4)
   163b0:	bx	lr
   163b4:	push	{fp}		; (str fp, [sp, #-4]!)
   163b8:	add	fp, sp, #0
   163bc:	sub	sp, sp, #12
   163c0:	str	r0, [fp, #-8]
   163c4:	ldr	r3, [fp, #-8]
   163c8:	sub	r3, r3, #65	; 0x41
   163cc:	cmp	r3, #25
   163d0:	bhi	163dc <__assert_fail@plt+0x5508>
   163d4:	mov	r3, #1
   163d8:	b	163e0 <__assert_fail@plt+0x550c>
   163dc:	mov	r3, #0
   163e0:	mov	r0, r3
   163e4:	add	sp, fp, #0
   163e8:	pop	{fp}		; (ldr fp, [sp], #4)
   163ec:	bx	lr
   163f0:	push	{fp}		; (str fp, [sp, #-4]!)
   163f4:	add	fp, sp, #0
   163f8:	sub	sp, sp, #12
   163fc:	str	r0, [fp, #-8]
   16400:	ldr	r3, [fp, #-8]
   16404:	sub	r3, r3, #48	; 0x30
   16408:	cmp	r3, #54	; 0x36
   1640c:	addls	pc, pc, r3, lsl #2
   16410:	b	164f8 <__assert_fail@plt+0x5624>
   16414:	b	164f0 <__assert_fail@plt+0x561c>
   16418:	b	164f0 <__assert_fail@plt+0x561c>
   1641c:	b	164f0 <__assert_fail@plt+0x561c>
   16420:	b	164f0 <__assert_fail@plt+0x561c>
   16424:	b	164f0 <__assert_fail@plt+0x561c>
   16428:	b	164f0 <__assert_fail@plt+0x561c>
   1642c:	b	164f0 <__assert_fail@plt+0x561c>
   16430:	b	164f0 <__assert_fail@plt+0x561c>
   16434:	b	164f0 <__assert_fail@plt+0x561c>
   16438:	b	164f0 <__assert_fail@plt+0x561c>
   1643c:	b	164f8 <__assert_fail@plt+0x5624>
   16440:	b	164f8 <__assert_fail@plt+0x5624>
   16444:	b	164f8 <__assert_fail@plt+0x5624>
   16448:	b	164f8 <__assert_fail@plt+0x5624>
   1644c:	b	164f8 <__assert_fail@plt+0x5624>
   16450:	b	164f8 <__assert_fail@plt+0x5624>
   16454:	b	164f8 <__assert_fail@plt+0x5624>
   16458:	b	164f0 <__assert_fail@plt+0x561c>
   1645c:	b	164f0 <__assert_fail@plt+0x561c>
   16460:	b	164f0 <__assert_fail@plt+0x561c>
   16464:	b	164f0 <__assert_fail@plt+0x561c>
   16468:	b	164f0 <__assert_fail@plt+0x561c>
   1646c:	b	164f0 <__assert_fail@plt+0x561c>
   16470:	b	164f8 <__assert_fail@plt+0x5624>
   16474:	b	164f8 <__assert_fail@plt+0x5624>
   16478:	b	164f8 <__assert_fail@plt+0x5624>
   1647c:	b	164f8 <__assert_fail@plt+0x5624>
   16480:	b	164f8 <__assert_fail@plt+0x5624>
   16484:	b	164f8 <__assert_fail@plt+0x5624>
   16488:	b	164f8 <__assert_fail@plt+0x5624>
   1648c:	b	164f8 <__assert_fail@plt+0x5624>
   16490:	b	164f8 <__assert_fail@plt+0x5624>
   16494:	b	164f8 <__assert_fail@plt+0x5624>
   16498:	b	164f8 <__assert_fail@plt+0x5624>
   1649c:	b	164f8 <__assert_fail@plt+0x5624>
   164a0:	b	164f8 <__assert_fail@plt+0x5624>
   164a4:	b	164f8 <__assert_fail@plt+0x5624>
   164a8:	b	164f8 <__assert_fail@plt+0x5624>
   164ac:	b	164f8 <__assert_fail@plt+0x5624>
   164b0:	b	164f8 <__assert_fail@plt+0x5624>
   164b4:	b	164f8 <__assert_fail@plt+0x5624>
   164b8:	b	164f8 <__assert_fail@plt+0x5624>
   164bc:	b	164f8 <__assert_fail@plt+0x5624>
   164c0:	b	164f8 <__assert_fail@plt+0x5624>
   164c4:	b	164f8 <__assert_fail@plt+0x5624>
   164c8:	b	164f8 <__assert_fail@plt+0x5624>
   164cc:	b	164f8 <__assert_fail@plt+0x5624>
   164d0:	b	164f8 <__assert_fail@plt+0x5624>
   164d4:	b	164f8 <__assert_fail@plt+0x5624>
   164d8:	b	164f0 <__assert_fail@plt+0x561c>
   164dc:	b	164f0 <__assert_fail@plt+0x561c>
   164e0:	b	164f0 <__assert_fail@plt+0x561c>
   164e4:	b	164f0 <__assert_fail@plt+0x561c>
   164e8:	b	164f0 <__assert_fail@plt+0x561c>
   164ec:	b	164f0 <__assert_fail@plt+0x561c>
   164f0:	mov	r3, #1
   164f4:	b	164fc <__assert_fail@plt+0x5628>
   164f8:	mov	r3, #0
   164fc:	mov	r0, r3
   16500:	add	sp, fp, #0
   16504:	pop	{fp}		; (ldr fp, [sp], #4)
   16508:	bx	lr
   1650c:	push	{fp}		; (str fp, [sp, #-4]!)
   16510:	add	fp, sp, #0
   16514:	sub	sp, sp, #12
   16518:	str	r0, [fp, #-8]
   1651c:	ldr	r3, [fp, #-8]
   16520:	sub	r3, r3, #65	; 0x41
   16524:	cmp	r3, #25
   16528:	bhi	16538 <__assert_fail@plt+0x5664>
   1652c:	ldr	r3, [fp, #-8]
   16530:	add	r3, r3, #32
   16534:	b	1653c <__assert_fail@plt+0x5668>
   16538:	ldr	r3, [fp, #-8]
   1653c:	mov	r0, r3
   16540:	add	sp, fp, #0
   16544:	pop	{fp}		; (ldr fp, [sp], #4)
   16548:	bx	lr
   1654c:	push	{fp}		; (str fp, [sp, #-4]!)
   16550:	add	fp, sp, #0
   16554:	sub	sp, sp, #12
   16558:	str	r0, [fp, #-8]
   1655c:	ldr	r3, [fp, #-8]
   16560:	sub	r3, r3, #97	; 0x61
   16564:	cmp	r3, #25
   16568:	bhi	16578 <__assert_fail@plt+0x56a4>
   1656c:	ldr	r3, [fp, #-8]
   16570:	sub	r3, r3, #32
   16574:	b	1657c <__assert_fail@plt+0x56a8>
   16578:	ldr	r3, [fp, #-8]
   1657c:	mov	r0, r3
   16580:	add	sp, fp, #0
   16584:	pop	{fp}		; (ldr fp, [sp], #4)
   16588:	bx	lr
   1658c:	push	{r4, r5, fp, lr}
   16590:	add	fp, sp, #12
   16594:	sub	sp, sp, #16
   16598:	str	r0, [fp, #-24]	; 0xffffffe8
   1659c:	str	r1, [fp, #-28]	; 0xffffffe4
   165a0:	ldr	r5, [fp, #-24]	; 0xffffffe8
   165a4:	ldr	r4, [fp, #-28]	; 0xffffffe4
   165a8:	cmp	r5, r4
   165ac:	bne	165b8 <__assert_fail@plt+0x56e4>
   165b0:	mov	r3, #0
   165b4:	b	16618 <__assert_fail@plt+0x5744>
   165b8:	ldrb	r3, [r5]
   165bc:	mov	r0, r3
   165c0:	bl	1650c <__assert_fail@plt+0x5638>
   165c4:	mov	r3, r0
   165c8:	strb	r3, [fp, #-13]
   165cc:	ldrb	r3, [r4]
   165d0:	mov	r0, r3
   165d4:	bl	1650c <__assert_fail@plt+0x5638>
   165d8:	mov	r3, r0
   165dc:	strb	r3, [fp, #-14]
   165e0:	ldrb	r3, [fp, #-13]
   165e4:	cmp	r3, #0
   165e8:	beq	16608 <__assert_fail@plt+0x5734>
   165ec:	add	r5, r5, #1
   165f0:	add	r4, r4, #1
   165f4:	ldrb	r2, [fp, #-13]
   165f8:	ldrb	r3, [fp, #-14]
   165fc:	cmp	r2, r3
   16600:	beq	165b8 <__assert_fail@plt+0x56e4>
   16604:	b	1660c <__assert_fail@plt+0x5738>
   16608:	nop			; (mov r0, r0)
   1660c:	ldrb	r2, [fp, #-13]
   16610:	ldrb	r3, [fp, #-14]
   16614:	sub	r3, r2, r3
   16618:	mov	r0, r3
   1661c:	sub	sp, fp, #12
   16620:	pop	{r4, r5, fp, pc}
   16624:	push	{fp, lr}
   16628:	add	fp, sp, #4
   1662c:	sub	sp, sp, #16
   16630:	str	r0, [fp, #-16]
   16634:	ldr	r0, [fp, #-16]
   16638:	bl	10d60 <__fpending@plt>
   1663c:	mov	r3, r0
   16640:	cmp	r3, #0
   16644:	movne	r3, #1
   16648:	moveq	r3, #0
   1664c:	strb	r3, [fp, #-5]
   16650:	ldr	r0, [fp, #-16]
   16654:	bl	10d6c <ferror_unlocked@plt>
   16658:	mov	r3, r0
   1665c:	cmp	r3, #0
   16660:	movne	r3, #1
   16664:	moveq	r3, #0
   16668:	strb	r3, [fp, #-6]
   1666c:	ldr	r0, [fp, #-16]
   16670:	bl	166fc <__assert_fail@plt+0x5828>
   16674:	mov	r3, r0
   16678:	cmp	r3, #0
   1667c:	movne	r3, #1
   16680:	moveq	r3, #0
   16684:	strb	r3, [fp, #-7]
   16688:	ldrb	r3, [fp, #-6]
   1668c:	cmp	r3, #0
   16690:	bne	166c0 <__assert_fail@plt+0x57ec>
   16694:	ldrb	r3, [fp, #-7]
   16698:	cmp	r3, #0
   1669c:	beq	166ec <__assert_fail@plt+0x5818>
   166a0:	ldrb	r3, [fp, #-5]
   166a4:	cmp	r3, #0
   166a8:	bne	166c0 <__assert_fail@plt+0x57ec>
   166ac:	bl	10e2c <__errno_location@plt>
   166b0:	mov	r3, r0
   166b4:	ldr	r3, [r3]
   166b8:	cmp	r3, #9
   166bc:	beq	166ec <__assert_fail@plt+0x5818>
   166c0:	ldrb	r3, [fp, #-7]
   166c4:	eor	r3, r3, #1
   166c8:	uxtb	r3, r3
   166cc:	cmp	r3, #0
   166d0:	beq	166e4 <__assert_fail@plt+0x5810>
   166d4:	bl	10e2c <__errno_location@plt>
   166d8:	mov	r2, r0
   166dc:	mov	r3, #0
   166e0:	str	r3, [r2]
   166e4:	mvn	r3, #0
   166e8:	b	166f0 <__assert_fail@plt+0x581c>
   166ec:	mov	r3, #0
   166f0:	mov	r0, r3
   166f4:	sub	sp, fp, #4
   166f8:	pop	{fp, pc}
   166fc:	push	{fp, lr}
   16700:	add	fp, sp, #4
   16704:	sub	sp, sp, #32
   16708:	str	r0, [fp, #-24]	; 0xffffffe8
   1670c:	mov	r3, #0
   16710:	str	r3, [fp, #-8]
   16714:	mov	r3, #0
   16718:	str	r3, [fp, #-12]
   1671c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16720:	bl	10e50 <fileno@plt>
   16724:	str	r0, [fp, #-16]
   16728:	ldr	r3, [fp, #-16]
   1672c:	cmp	r3, #0
   16730:	bge	16744 <__assert_fail@plt+0x5870>
   16734:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16738:	bl	10e68 <fclose@plt>
   1673c:	mov	r3, r0
   16740:	b	167e8 <__assert_fail@plt+0x5914>
   16744:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16748:	bl	10db4 <__freading@plt>
   1674c:	mov	r3, r0
   16750:	cmp	r3, #0
   16754:	beq	16790 <__assert_fail@plt+0x58bc>
   16758:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1675c:	bl	10e50 <fileno@plt>
   16760:	mov	r1, r0
   16764:	mov	r3, #1
   16768:	str	r3, [sp]
   1676c:	mov	r2, #0
   16770:	mov	r3, #0
   16774:	mov	r0, r1
   16778:	bl	10d48 <lseek64@plt>
   1677c:	mvn	r2, #0
   16780:	mvn	r3, #0
   16784:	cmp	r1, r3
   16788:	cmpeq	r0, r2
   1678c:	beq	167b4 <__assert_fail@plt+0x58e0>
   16790:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16794:	bl	1683c <__assert_fail@plt+0x5968>
   16798:	mov	r3, r0
   1679c:	cmp	r3, #0
   167a0:	beq	167b4 <__assert_fail@plt+0x58e0>
   167a4:	bl	10e2c <__errno_location@plt>
   167a8:	mov	r3, r0
   167ac:	ldr	r3, [r3]
   167b0:	str	r3, [fp, #-8]
   167b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   167b8:	bl	10e68 <fclose@plt>
   167bc:	str	r0, [fp, #-12]
   167c0:	ldr	r3, [fp, #-8]
   167c4:	cmp	r3, #0
   167c8:	beq	167e4 <__assert_fail@plt+0x5910>
   167cc:	bl	10e2c <__errno_location@plt>
   167d0:	mov	r2, r0
   167d4:	ldr	r3, [fp, #-8]
   167d8:	str	r3, [r2]
   167dc:	mvn	r3, #0
   167e0:	str	r3, [fp, #-12]
   167e4:	ldr	r3, [fp, #-12]
   167e8:	mov	r0, r3
   167ec:	sub	sp, fp, #4
   167f0:	pop	{fp, pc}
   167f4:	push	{fp, lr}
   167f8:	add	fp, sp, #4
   167fc:	sub	sp, sp, #16
   16800:	str	r0, [fp, #-8]
   16804:	ldr	r3, [fp, #-8]
   16808:	ldr	r3, [r3]
   1680c:	and	r3, r3, #256	; 0x100
   16810:	cmp	r3, #0
   16814:	beq	16830 <__assert_fail@plt+0x595c>
   16818:	mov	r3, #1
   1681c:	str	r3, [sp]
   16820:	mov	r2, #0
   16824:	mov	r3, #0
   16828:	ldr	r0, [fp, #-8]
   1682c:	bl	16928 <__assert_fail@plt+0x5a54>
   16830:	nop			; (mov r0, r0)
   16834:	sub	sp, fp, #4
   16838:	pop	{fp, pc}
   1683c:	push	{fp, lr}
   16840:	add	fp, sp, #4
   16844:	sub	sp, sp, #8
   16848:	str	r0, [fp, #-8]
   1684c:	ldr	r3, [fp, #-8]
   16850:	cmp	r3, #0
   16854:	beq	1686c <__assert_fail@plt+0x5998>
   16858:	ldr	r0, [fp, #-8]
   1685c:	bl	10db4 <__freading@plt>
   16860:	mov	r3, r0
   16864:	cmp	r3, #0
   16868:	bne	1687c <__assert_fail@plt+0x59a8>
   1686c:	ldr	r0, [fp, #-8]
   16870:	bl	10cac <fflush@plt>
   16874:	mov	r3, r0
   16878:	b	16890 <__assert_fail@plt+0x59bc>
   1687c:	ldr	r0, [fp, #-8]
   16880:	bl	167f4 <__assert_fail@plt+0x5920>
   16884:	ldr	r0, [fp, #-8]
   16888:	bl	10cac <fflush@plt>
   1688c:	mov	r3, r0
   16890:	mov	r0, r3
   16894:	sub	sp, fp, #4
   16898:	pop	{fp, pc}
   1689c:	push	{r4, fp, lr}
   168a0:	add	fp, sp, #8
   168a4:	sub	sp, sp, #20
   168a8:	str	r0, [fp, #-24]	; 0xffffffe8
   168ac:	bl	10e2c <__errno_location@plt>
   168b0:	mov	r3, r0
   168b4:	ldr	r3, [r3]
   168b8:	str	r3, [fp, #-20]	; 0xffffffec
   168bc:	bl	10e2c <__errno_location@plt>
   168c0:	mov	r3, r0
   168c4:	ldr	r3, [r3]
   168c8:	str	r3, [fp, #-16]
   168cc:	bl	10e2c <__errno_location@plt>
   168d0:	mov	r2, r0
   168d4:	mov	r3, #0
   168d8:	str	r3, [r2]
   168dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   168e0:	bl	10cb8 <free@plt>
   168e4:	bl	10e2c <__errno_location@plt>
   168e8:	mov	r4, r0
   168ec:	bl	10e2c <__errno_location@plt>
   168f0:	mov	r3, r0
   168f4:	ldr	r3, [r3]
   168f8:	cmp	r3, #0
   168fc:	moveq	r3, #1
   16900:	movne	r3, #0
   16904:	uxtb	r3, r3
   16908:	lsl	r3, r3, #2
   1690c:	sub	r2, fp, #12
   16910:	add	r3, r2, r3
   16914:	ldr	r3, [r3, #-8]
   16918:	str	r3, [r4]
   1691c:	nop			; (mov r0, r0)
   16920:	sub	sp, fp, #8
   16924:	pop	{r4, fp, pc}
   16928:	push	{fp, lr}
   1692c:	add	fp, sp, #4
   16930:	sub	sp, sp, #32
   16934:	str	r0, [fp, #-16]
   16938:	strd	r2, [fp, #-28]	; 0xffffffe4
   1693c:	ldr	r3, [fp, #-16]
   16940:	ldr	r2, [r3, #8]
   16944:	ldr	r3, [fp, #-16]
   16948:	ldr	r3, [r3, #4]
   1694c:	cmp	r2, r3
   16950:	bne	169e8 <__assert_fail@plt+0x5b14>
   16954:	ldr	r3, [fp, #-16]
   16958:	ldr	r2, [r3, #20]
   1695c:	ldr	r3, [fp, #-16]
   16960:	ldr	r3, [r3, #16]
   16964:	cmp	r2, r3
   16968:	bne	169e8 <__assert_fail@plt+0x5b14>
   1696c:	ldr	r3, [fp, #-16]
   16970:	ldr	r3, [r3, #36]	; 0x24
   16974:	cmp	r3, #0
   16978:	bne	169e8 <__assert_fail@plt+0x5b14>
   1697c:	ldr	r0, [fp, #-16]
   16980:	bl	10e50 <fileno@plt>
   16984:	mov	r1, r0
   16988:	ldr	r3, [fp, #4]
   1698c:	str	r3, [sp]
   16990:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16994:	mov	r0, r1
   16998:	bl	10d48 <lseek64@plt>
   1699c:	strd	r0, [fp, #-12]
   169a0:	ldrd	r2, [fp, #-12]
   169a4:	mvn	r0, #0
   169a8:	mvn	r1, #0
   169ac:	cmp	r3, r1
   169b0:	cmpeq	r2, r0
   169b4:	bne	169c0 <__assert_fail@plt+0x5aec>
   169b8:	mvn	r3, #0
   169bc:	b	16a00 <__assert_fail@plt+0x5b2c>
   169c0:	ldr	r3, [fp, #-16]
   169c4:	ldr	r3, [r3]
   169c8:	bic	r2, r3, #16
   169cc:	ldr	r3, [fp, #-16]
   169d0:	str	r2, [r3]
   169d4:	ldr	r1, [fp, #-16]
   169d8:	ldrd	r2, [fp, #-12]
   169dc:	strd	r2, [r1, #80]	; 0x50
   169e0:	mov	r3, #0
   169e4:	b	16a00 <__assert_fail@plt+0x5b2c>
   169e8:	ldr	r3, [fp, #4]
   169ec:	str	r3, [sp]
   169f0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   169f4:	ldr	r0, [fp, #-16]
   169f8:	bl	10e74 <fseeko64@plt>
   169fc:	mov	r3, r0
   16a00:	mov	r0, r3
   16a04:	sub	sp, fp, #4
   16a08:	pop	{fp, pc}
   16a0c:	push	{fp, lr}
   16a10:	add	fp, sp, #4
   16a14:	bl	10e2c <__errno_location@plt>
   16a18:	mov	r2, r0
   16a1c:	mov	r3, #12
   16a20:	str	r3, [r2]
   16a24:	mov	r3, #0
   16a28:	mov	r0, r3
   16a2c:	pop	{fp, pc}
   16a30:	push	{fp, lr}
   16a34:	add	fp, sp, #4
   16a38:	sub	sp, sp, #8
   16a3c:	str	r0, [fp, #-8]
   16a40:	ldr	r3, [fp, #-8]
   16a44:	mov	r0, r3
   16a48:	bl	15f20 <__assert_fail@plt+0x504c>
   16a4c:	mov	r3, r0
   16a50:	mov	r0, r3
   16a54:	sub	sp, fp, #4
   16a58:	pop	{fp, pc}
   16a5c:	push	{fp, lr}
   16a60:	add	fp, sp, #4
   16a64:	sub	sp, sp, #8
   16a68:	str	r0, [fp, #-8]
   16a6c:	str	r1, [fp, #-12]
   16a70:	ldr	r3, [fp, #-12]
   16a74:	cmp	r3, #0
   16a78:	moveq	r3, #1
   16a7c:	movne	r3, #0
   16a80:	uxtb	r3, r3
   16a84:	mov	r2, r3
   16a88:	ldr	r3, [fp, #-12]
   16a8c:	orr	r3, r2, r3
   16a90:	mov	r1, r3
   16a94:	ldr	r0, [fp, #-8]
   16a98:	bl	15fc8 <__assert_fail@plt+0x50f4>
   16a9c:	mov	r3, r0
   16aa0:	mov	r0, r3
   16aa4:	sub	sp, fp, #4
   16aa8:	pop	{fp, pc}
   16aac:	push	{fp, lr}
   16ab0:	add	fp, sp, #4
   16ab4:	sub	sp, sp, #8
   16ab8:	str	r0, [fp, #-8]
   16abc:	str	r1, [fp, #-12]
   16ac0:	ldr	r3, [fp, #-8]
   16ac4:	ldr	r2, [fp, #-12]
   16ac8:	mov	r1, r2
   16acc:	mov	r0, r3
   16ad0:	bl	15e5c <__assert_fail@plt+0x4f88>
   16ad4:	mov	r3, r0
   16ad8:	mov	r0, r3
   16adc:	sub	sp, fp, #4
   16ae0:	pop	{fp, pc}
   16ae4:	push	{fp, lr}
   16ae8:	add	fp, sp, #4
   16aec:	sub	sp, sp, #16
   16af0:	str	r0, [fp, #-8]
   16af4:	str	r1, [fp, #-12]
   16af8:	str	r2, [fp, #-16]
   16afc:	ldr	r3, [fp, #-12]
   16b00:	cmp	r3, #0
   16b04:	beq	16b14 <__assert_fail@plt+0x5c40>
   16b08:	ldr	r3, [fp, #-16]
   16b0c:	cmp	r3, #0
   16b10:	bne	16b24 <__assert_fail@plt+0x5c50>
   16b14:	mov	r3, #1
   16b18:	str	r3, [fp, #-16]
   16b1c:	ldr	r3, [fp, #-16]
   16b20:	str	r3, [fp, #-12]
   16b24:	ldr	r3, [fp, #-12]
   16b28:	ldr	r2, [fp, #-16]
   16b2c:	mov	r1, r3
   16b30:	ldr	r0, [fp, #-8]
   16b34:	bl	16c50 <__assert_fail@plt+0x5d7c>
   16b38:	mov	r3, r0
   16b3c:	mov	r0, r3
   16b40:	sub	sp, fp, #4
   16b44:	pop	{fp, pc}
   16b48:	push	{fp, lr}
   16b4c:	add	fp, sp, #4
   16b50:	sub	sp, sp, #8
   16b54:	mov	r0, #14
   16b58:	bl	10e98 <nl_langinfo@plt>
   16b5c:	str	r0, [fp, #-8]
   16b60:	ldr	r3, [fp, #-8]
   16b64:	cmp	r3, #0
   16b68:	bne	16b74 <__assert_fail@plt+0x5ca0>
   16b6c:	ldr	r3, [pc, #40]	; 16b9c <__assert_fail@plt+0x5cc8>
   16b70:	str	r3, [fp, #-8]
   16b74:	ldr	r3, [fp, #-8]
   16b78:	ldrb	r3, [r3]
   16b7c:	cmp	r3, #0
   16b80:	bne	16b8c <__assert_fail@plt+0x5cb8>
   16b84:	ldr	r3, [pc, #20]	; 16ba0 <__assert_fail@plt+0x5ccc>
   16b88:	str	r3, [fp, #-8]
   16b8c:	ldr	r3, [fp, #-8]
   16b90:	mov	r0, r3
   16b94:	sub	sp, fp, #4
   16b98:	pop	{fp, pc}
   16b9c:	muleq	r1, r4, lr
   16ba0:	muleq	r1, r8, lr
   16ba4:	push	{fp, lr}
   16ba8:	add	fp, sp, #4
   16bac:	sub	sp, sp, #32
   16bb0:	str	r0, [fp, #-24]	; 0xffffffe8
   16bb4:	str	r1, [fp, #-28]	; 0xffffffe4
   16bb8:	str	r2, [fp, #-32]	; 0xffffffe0
   16bbc:	str	r3, [fp, #-36]	; 0xffffffdc
   16bc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16bc4:	cmp	r3, #0
   16bc8:	bne	16bd4 <__assert_fail@plt+0x5d00>
   16bcc:	sub	r3, fp, #16
   16bd0:	str	r3, [fp, #-24]	; 0xffffffe8
   16bd4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16bd8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16bdc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16be0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16be4:	bl	10d78 <mbrtowc@plt>
   16be8:	str	r0, [fp, #-8]
   16bec:	ldr	r3, [fp, #-8]
   16bf0:	cmn	r3, #3
   16bf4:	bls	16c40 <__assert_fail@plt+0x5d6c>
   16bf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16bfc:	cmp	r3, #0
   16c00:	beq	16c40 <__assert_fail@plt+0x5d6c>
   16c04:	mov	r0, #0
   16c08:	bl	16d00 <__assert_fail@plt+0x5e2c>
   16c0c:	mov	r3, r0
   16c10:	eor	r3, r3, #1
   16c14:	uxtb	r3, r3
   16c18:	cmp	r3, #0
   16c1c:	beq	16c40 <__assert_fail@plt+0x5d6c>
   16c20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16c24:	ldrb	r3, [r3]
   16c28:	strb	r3, [fp, #-9]
   16c2c:	ldrb	r2, [fp, #-9]
   16c30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c34:	str	r2, [r3]
   16c38:	mov	r3, #1
   16c3c:	b	16c44 <__assert_fail@plt+0x5d70>
   16c40:	ldr	r3, [fp, #-8]
   16c44:	mov	r0, r3
   16c48:	sub	sp, fp, #4
   16c4c:	pop	{fp, pc}
   16c50:	push	{fp, lr}
   16c54:	add	fp, sp, #4
   16c58:	sub	sp, sp, #24
   16c5c:	str	r0, [fp, #-16]
   16c60:	str	r1, [fp, #-20]	; 0xffffffec
   16c64:	str	r2, [fp, #-24]	; 0xffffffe8
   16c68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c6c:	cmp	r3, #0
   16c70:	beq	16cac <__assert_fail@plt+0x5dd8>
   16c74:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16c78:	mvn	r0, #0
   16c7c:	bl	16f04 <__assert_fail@plt+0x6030>
   16c80:	mov	r3, r0
   16c84:	mov	r2, r3
   16c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c8c:	cmp	r2, r3
   16c90:	bcs	16cac <__assert_fail@plt+0x5dd8>
   16c94:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c98:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16c9c:	mul	r3, r2, r3
   16ca0:	str	r3, [fp, #-8]
   16ca4:	mov	r3, #1
   16ca8:	b	16cc0 <__assert_fail@plt+0x5dec>
   16cac:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cb0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16cb4:	mul	r3, r2, r3
   16cb8:	str	r3, [fp, #-8]
   16cbc:	mov	r3, #0
   16cc0:	cmp	r3, #0
   16cc4:	beq	16ce0 <__assert_fail@plt+0x5e0c>
   16cc8:	bl	10e2c <__errno_location@plt>
   16ccc:	mov	r2, r0
   16cd0:	mov	r3, #12
   16cd4:	str	r3, [r2]
   16cd8:	mov	r3, #0
   16cdc:	b	16cf4 <__assert_fail@plt+0x5e20>
   16ce0:	ldr	r3, [fp, #-8]
   16ce4:	mov	r1, r3
   16ce8:	ldr	r0, [fp, #-16]
   16cec:	bl	15fc8 <__assert_fail@plt+0x50f4>
   16cf0:	mov	r3, r0
   16cf4:	mov	r0, r3
   16cf8:	sub	sp, fp, #4
   16cfc:	pop	{fp, pc}
   16d00:	push	{fp, lr}
   16d04:	add	fp, sp, #4
   16d08:	sub	sp, sp, #272	; 0x110
   16d0c:	str	r0, [fp, #-272]	; 0xfffffef0
   16d10:	sub	r3, fp, #264	; 0x108
   16d14:	ldr	r2, [pc, #116]	; 16d90 <__assert_fail@plt+0x5ebc>
   16d18:	mov	r1, r3
   16d1c:	ldr	r0, [fp, #-272]	; 0xfffffef0
   16d20:	bl	16ea4 <__assert_fail@plt+0x5fd0>
   16d24:	mov	r3, r0
   16d28:	cmp	r3, #0
   16d2c:	beq	16d38 <__assert_fail@plt+0x5e64>
   16d30:	mov	r3, #0
   16d34:	b	16d84 <__assert_fail@plt+0x5eb0>
   16d38:	sub	r3, fp, #264	; 0x108
   16d3c:	ldr	r1, [pc, #80]	; 16d94 <__assert_fail@plt+0x5ec0>
   16d40:	mov	r0, r3
   16d44:	bl	10c94 <strcmp@plt>
   16d48:	mov	r3, r0
   16d4c:	cmp	r3, #0
   16d50:	beq	16d78 <__assert_fail@plt+0x5ea4>
   16d54:	sub	r3, fp, #264	; 0x108
   16d58:	ldr	r1, [pc, #56]	; 16d98 <__assert_fail@plt+0x5ec4>
   16d5c:	mov	r0, r3
   16d60:	bl	10c94 <strcmp@plt>
   16d64:	mov	r3, r0
   16d68:	cmp	r3, #0
   16d6c:	beq	16d78 <__assert_fail@plt+0x5ea4>
   16d70:	mov	r3, #1
   16d74:	b	16d7c <__assert_fail@plt+0x5ea8>
   16d78:	mov	r3, #0
   16d7c:	and	r3, r3, #1
   16d80:	uxtb	r3, r3
   16d84:	mov	r0, r3
   16d88:	sub	sp, fp, #4
   16d8c:	pop	{fp, pc}
   16d90:	andeq	r0, r0, r1, lsl #2
   16d94:	andeq	r7, r1, r0, lsr #29
   16d98:	andeq	r7, r1, r4, lsr #29
   16d9c:	push	{fp, lr}
   16da0:	add	fp, sp, #4
   16da4:	sub	sp, sp, #16
   16da8:	str	r0, [fp, #-16]
   16dac:	mov	r1, #0
   16db0:	ldr	r0, [fp, #-16]
   16db4:	bl	10e80 <setlocale@plt>
   16db8:	str	r0, [fp, #-8]
   16dbc:	ldr	r3, [fp, #-8]
   16dc0:	mov	r0, r3
   16dc4:	sub	sp, fp, #4
   16dc8:	pop	{fp, pc}
   16dcc:	push	{fp, lr}
   16dd0:	add	fp, sp, #4
   16dd4:	sub	sp, sp, #24
   16dd8:	str	r0, [fp, #-16]
   16ddc:	str	r1, [fp, #-20]	; 0xffffffec
   16de0:	str	r2, [fp, #-24]	; 0xffffffe8
   16de4:	ldr	r0, [fp, #-16]
   16de8:	bl	16d9c <__assert_fail@plt+0x5ec8>
   16dec:	str	r0, [fp, #-8]
   16df0:	ldr	r3, [fp, #-8]
   16df4:	cmp	r3, #0
   16df8:	bne	16e1c <__assert_fail@plt+0x5f48>
   16dfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e00:	cmp	r3, #0
   16e04:	beq	16e14 <__assert_fail@plt+0x5f40>
   16e08:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e0c:	mov	r2, #0
   16e10:	strb	r2, [r3]
   16e14:	mov	r3, #22
   16e18:	b	16e98 <__assert_fail@plt+0x5fc4>
   16e1c:	ldr	r0, [fp, #-8]
   16e20:	bl	10e08 <strlen@plt>
   16e24:	str	r0, [fp, #-12]
   16e28:	ldr	r2, [fp, #-12]
   16e2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e30:	cmp	r2, r3
   16e34:	bcs	16e58 <__assert_fail@plt+0x5f84>
   16e38:	ldr	r3, [fp, #-12]
   16e3c:	add	r3, r3, #1
   16e40:	mov	r2, r3
   16e44:	ldr	r1, [fp, #-8]
   16e48:	ldr	r0, [fp, #-20]	; 0xffffffec
   16e4c:	bl	10cd0 <memcpy@plt>
   16e50:	mov	r3, #0
   16e54:	b	16e98 <__assert_fail@plt+0x5fc4>
   16e58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e5c:	cmp	r3, #0
   16e60:	beq	16e94 <__assert_fail@plt+0x5fc0>
   16e64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e68:	sub	r3, r3, #1
   16e6c:	mov	r2, r3
   16e70:	ldr	r1, [fp, #-8]
   16e74:	ldr	r0, [fp, #-20]	; 0xffffffec
   16e78:	bl	10cd0 <memcpy@plt>
   16e7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e80:	sub	r3, r3, #1
   16e84:	ldr	r2, [fp, #-20]	; 0xffffffec
   16e88:	add	r3, r2, r3
   16e8c:	mov	r2, #0
   16e90:	strb	r2, [r3]
   16e94:	mov	r3, #34	; 0x22
   16e98:	mov	r0, r3
   16e9c:	sub	sp, fp, #4
   16ea0:	pop	{fp, pc}
   16ea4:	push	{fp, lr}
   16ea8:	add	fp, sp, #4
   16eac:	sub	sp, sp, #16
   16eb0:	str	r0, [fp, #-8]
   16eb4:	str	r1, [fp, #-12]
   16eb8:	str	r2, [fp, #-16]
   16ebc:	ldr	r2, [fp, #-16]
   16ec0:	ldr	r1, [fp, #-12]
   16ec4:	ldr	r0, [fp, #-8]
   16ec8:	bl	16dcc <__assert_fail@plt+0x5ef8>
   16ecc:	mov	r3, r0
   16ed0:	mov	r0, r3
   16ed4:	sub	sp, fp, #4
   16ed8:	pop	{fp, pc}
   16edc:	push	{fp, lr}
   16ee0:	add	fp, sp, #4
   16ee4:	sub	sp, sp, #8
   16ee8:	str	r0, [fp, #-8]
   16eec:	ldr	r0, [fp, #-8]
   16ef0:	bl	16d9c <__assert_fail@plt+0x5ec8>
   16ef4:	mov	r3, r0
   16ef8:	mov	r0, r3
   16efc:	sub	sp, fp, #4
   16f00:	pop	{fp, pc}
   16f04:	subs	r2, r1, #1
   16f08:	bxeq	lr
   16f0c:	bcc	170e4 <__assert_fail@plt+0x6210>
   16f10:	cmp	r0, r1
   16f14:	bls	170c8 <__assert_fail@plt+0x61f4>
   16f18:	tst	r1, r2
   16f1c:	beq	170d4 <__assert_fail@plt+0x6200>
   16f20:	clz	r3, r0
   16f24:	clz	r2, r1
   16f28:	sub	r3, r2, r3
   16f2c:	rsbs	r3, r3, #31
   16f30:	addne	r3, r3, r3, lsl #1
   16f34:	mov	r2, #0
   16f38:	addne	pc, pc, r3, lsl #2
   16f3c:	nop			; (mov r0, r0)
   16f40:	cmp	r0, r1, lsl #31
   16f44:	adc	r2, r2, r2
   16f48:	subcs	r0, r0, r1, lsl #31
   16f4c:	cmp	r0, r1, lsl #30
   16f50:	adc	r2, r2, r2
   16f54:	subcs	r0, r0, r1, lsl #30
   16f58:	cmp	r0, r1, lsl #29
   16f5c:	adc	r2, r2, r2
   16f60:	subcs	r0, r0, r1, lsl #29
   16f64:	cmp	r0, r1, lsl #28
   16f68:	adc	r2, r2, r2
   16f6c:	subcs	r0, r0, r1, lsl #28
   16f70:	cmp	r0, r1, lsl #27
   16f74:	adc	r2, r2, r2
   16f78:	subcs	r0, r0, r1, lsl #27
   16f7c:	cmp	r0, r1, lsl #26
   16f80:	adc	r2, r2, r2
   16f84:	subcs	r0, r0, r1, lsl #26
   16f88:	cmp	r0, r1, lsl #25
   16f8c:	adc	r2, r2, r2
   16f90:	subcs	r0, r0, r1, lsl #25
   16f94:	cmp	r0, r1, lsl #24
   16f98:	adc	r2, r2, r2
   16f9c:	subcs	r0, r0, r1, lsl #24
   16fa0:	cmp	r0, r1, lsl #23
   16fa4:	adc	r2, r2, r2
   16fa8:	subcs	r0, r0, r1, lsl #23
   16fac:	cmp	r0, r1, lsl #22
   16fb0:	adc	r2, r2, r2
   16fb4:	subcs	r0, r0, r1, lsl #22
   16fb8:	cmp	r0, r1, lsl #21
   16fbc:	adc	r2, r2, r2
   16fc0:	subcs	r0, r0, r1, lsl #21
   16fc4:	cmp	r0, r1, lsl #20
   16fc8:	adc	r2, r2, r2
   16fcc:	subcs	r0, r0, r1, lsl #20
   16fd0:	cmp	r0, r1, lsl #19
   16fd4:	adc	r2, r2, r2
   16fd8:	subcs	r0, r0, r1, lsl #19
   16fdc:	cmp	r0, r1, lsl #18
   16fe0:	adc	r2, r2, r2
   16fe4:	subcs	r0, r0, r1, lsl #18
   16fe8:	cmp	r0, r1, lsl #17
   16fec:	adc	r2, r2, r2
   16ff0:	subcs	r0, r0, r1, lsl #17
   16ff4:	cmp	r0, r1, lsl #16
   16ff8:	adc	r2, r2, r2
   16ffc:	subcs	r0, r0, r1, lsl #16
   17000:	cmp	r0, r1, lsl #15
   17004:	adc	r2, r2, r2
   17008:	subcs	r0, r0, r1, lsl #15
   1700c:	cmp	r0, r1, lsl #14
   17010:	adc	r2, r2, r2
   17014:	subcs	r0, r0, r1, lsl #14
   17018:	cmp	r0, r1, lsl #13
   1701c:	adc	r2, r2, r2
   17020:	subcs	r0, r0, r1, lsl #13
   17024:	cmp	r0, r1, lsl #12
   17028:	adc	r2, r2, r2
   1702c:	subcs	r0, r0, r1, lsl #12
   17030:	cmp	r0, r1, lsl #11
   17034:	adc	r2, r2, r2
   17038:	subcs	r0, r0, r1, lsl #11
   1703c:	cmp	r0, r1, lsl #10
   17040:	adc	r2, r2, r2
   17044:	subcs	r0, r0, r1, lsl #10
   17048:	cmp	r0, r1, lsl #9
   1704c:	adc	r2, r2, r2
   17050:	subcs	r0, r0, r1, lsl #9
   17054:	cmp	r0, r1, lsl #8
   17058:	adc	r2, r2, r2
   1705c:	subcs	r0, r0, r1, lsl #8
   17060:	cmp	r0, r1, lsl #7
   17064:	adc	r2, r2, r2
   17068:	subcs	r0, r0, r1, lsl #7
   1706c:	cmp	r0, r1, lsl #6
   17070:	adc	r2, r2, r2
   17074:	subcs	r0, r0, r1, lsl #6
   17078:	cmp	r0, r1, lsl #5
   1707c:	adc	r2, r2, r2
   17080:	subcs	r0, r0, r1, lsl #5
   17084:	cmp	r0, r1, lsl #4
   17088:	adc	r2, r2, r2
   1708c:	subcs	r0, r0, r1, lsl #4
   17090:	cmp	r0, r1, lsl #3
   17094:	adc	r2, r2, r2
   17098:	subcs	r0, r0, r1, lsl #3
   1709c:	cmp	r0, r1, lsl #2
   170a0:	adc	r2, r2, r2
   170a4:	subcs	r0, r0, r1, lsl #2
   170a8:	cmp	r0, r1, lsl #1
   170ac:	adc	r2, r2, r2
   170b0:	subcs	r0, r0, r1, lsl #1
   170b4:	cmp	r0, r1
   170b8:	adc	r2, r2, r2
   170bc:	subcs	r0, r0, r1
   170c0:	mov	r0, r2
   170c4:	bx	lr
   170c8:	moveq	r0, #1
   170cc:	movne	r0, #0
   170d0:	bx	lr
   170d4:	clz	r2, r1
   170d8:	rsb	r2, r2, #31
   170dc:	lsr	r0, r0, r2
   170e0:	bx	lr
   170e4:	cmp	r0, #0
   170e8:	mvnne	r0, #0
   170ec:	b	1738c <__assert_fail@plt+0x64b8>
   170f0:	cmp	r1, #0
   170f4:	beq	170e4 <__assert_fail@plt+0x6210>
   170f8:	push	{r0, r1, lr}
   170fc:	bl	16f04 <__assert_fail@plt+0x6030>
   17100:	pop	{r1, r2, lr}
   17104:	mul	r3, r2, r0
   17108:	sub	r1, r1, r3
   1710c:	bx	lr
   17110:	cmp	r1, #0
   17114:	beq	17320 <__assert_fail@plt+0x644c>
   17118:	eor	ip, r0, r1
   1711c:	rsbmi	r1, r1, #0
   17120:	subs	r2, r1, #1
   17124:	beq	172ec <__assert_fail@plt+0x6418>
   17128:	movs	r3, r0
   1712c:	rsbmi	r3, r0, #0
   17130:	cmp	r3, r1
   17134:	bls	172f8 <__assert_fail@plt+0x6424>
   17138:	tst	r1, r2
   1713c:	beq	17308 <__assert_fail@plt+0x6434>
   17140:	clz	r2, r3
   17144:	clz	r0, r1
   17148:	sub	r2, r0, r2
   1714c:	rsbs	r2, r2, #31
   17150:	addne	r2, r2, r2, lsl #1
   17154:	mov	r0, #0
   17158:	addne	pc, pc, r2, lsl #2
   1715c:	nop			; (mov r0, r0)
   17160:	cmp	r3, r1, lsl #31
   17164:	adc	r0, r0, r0
   17168:	subcs	r3, r3, r1, lsl #31
   1716c:	cmp	r3, r1, lsl #30
   17170:	adc	r0, r0, r0
   17174:	subcs	r3, r3, r1, lsl #30
   17178:	cmp	r3, r1, lsl #29
   1717c:	adc	r0, r0, r0
   17180:	subcs	r3, r3, r1, lsl #29
   17184:	cmp	r3, r1, lsl #28
   17188:	adc	r0, r0, r0
   1718c:	subcs	r3, r3, r1, lsl #28
   17190:	cmp	r3, r1, lsl #27
   17194:	adc	r0, r0, r0
   17198:	subcs	r3, r3, r1, lsl #27
   1719c:	cmp	r3, r1, lsl #26
   171a0:	adc	r0, r0, r0
   171a4:	subcs	r3, r3, r1, lsl #26
   171a8:	cmp	r3, r1, lsl #25
   171ac:	adc	r0, r0, r0
   171b0:	subcs	r3, r3, r1, lsl #25
   171b4:	cmp	r3, r1, lsl #24
   171b8:	adc	r0, r0, r0
   171bc:	subcs	r3, r3, r1, lsl #24
   171c0:	cmp	r3, r1, lsl #23
   171c4:	adc	r0, r0, r0
   171c8:	subcs	r3, r3, r1, lsl #23
   171cc:	cmp	r3, r1, lsl #22
   171d0:	adc	r0, r0, r0
   171d4:	subcs	r3, r3, r1, lsl #22
   171d8:	cmp	r3, r1, lsl #21
   171dc:	adc	r0, r0, r0
   171e0:	subcs	r3, r3, r1, lsl #21
   171e4:	cmp	r3, r1, lsl #20
   171e8:	adc	r0, r0, r0
   171ec:	subcs	r3, r3, r1, lsl #20
   171f0:	cmp	r3, r1, lsl #19
   171f4:	adc	r0, r0, r0
   171f8:	subcs	r3, r3, r1, lsl #19
   171fc:	cmp	r3, r1, lsl #18
   17200:	adc	r0, r0, r0
   17204:	subcs	r3, r3, r1, lsl #18
   17208:	cmp	r3, r1, lsl #17
   1720c:	adc	r0, r0, r0
   17210:	subcs	r3, r3, r1, lsl #17
   17214:	cmp	r3, r1, lsl #16
   17218:	adc	r0, r0, r0
   1721c:	subcs	r3, r3, r1, lsl #16
   17220:	cmp	r3, r1, lsl #15
   17224:	adc	r0, r0, r0
   17228:	subcs	r3, r3, r1, lsl #15
   1722c:	cmp	r3, r1, lsl #14
   17230:	adc	r0, r0, r0
   17234:	subcs	r3, r3, r1, lsl #14
   17238:	cmp	r3, r1, lsl #13
   1723c:	adc	r0, r0, r0
   17240:	subcs	r3, r3, r1, lsl #13
   17244:	cmp	r3, r1, lsl #12
   17248:	adc	r0, r0, r0
   1724c:	subcs	r3, r3, r1, lsl #12
   17250:	cmp	r3, r1, lsl #11
   17254:	adc	r0, r0, r0
   17258:	subcs	r3, r3, r1, lsl #11
   1725c:	cmp	r3, r1, lsl #10
   17260:	adc	r0, r0, r0
   17264:	subcs	r3, r3, r1, lsl #10
   17268:	cmp	r3, r1, lsl #9
   1726c:	adc	r0, r0, r0
   17270:	subcs	r3, r3, r1, lsl #9
   17274:	cmp	r3, r1, lsl #8
   17278:	adc	r0, r0, r0
   1727c:	subcs	r3, r3, r1, lsl #8
   17280:	cmp	r3, r1, lsl #7
   17284:	adc	r0, r0, r0
   17288:	subcs	r3, r3, r1, lsl #7
   1728c:	cmp	r3, r1, lsl #6
   17290:	adc	r0, r0, r0
   17294:	subcs	r3, r3, r1, lsl #6
   17298:	cmp	r3, r1, lsl #5
   1729c:	adc	r0, r0, r0
   172a0:	subcs	r3, r3, r1, lsl #5
   172a4:	cmp	r3, r1, lsl #4
   172a8:	adc	r0, r0, r0
   172ac:	subcs	r3, r3, r1, lsl #4
   172b0:	cmp	r3, r1, lsl #3
   172b4:	adc	r0, r0, r0
   172b8:	subcs	r3, r3, r1, lsl #3
   172bc:	cmp	r3, r1, lsl #2
   172c0:	adc	r0, r0, r0
   172c4:	subcs	r3, r3, r1, lsl #2
   172c8:	cmp	r3, r1, lsl #1
   172cc:	adc	r0, r0, r0
   172d0:	subcs	r3, r3, r1, lsl #1
   172d4:	cmp	r3, r1
   172d8:	adc	r0, r0, r0
   172dc:	subcs	r3, r3, r1
   172e0:	cmp	ip, #0
   172e4:	rsbmi	r0, r0, #0
   172e8:	bx	lr
   172ec:	teq	ip, r0
   172f0:	rsbmi	r0, r0, #0
   172f4:	bx	lr
   172f8:	movcc	r0, #0
   172fc:	asreq	r0, ip, #31
   17300:	orreq	r0, r0, #1
   17304:	bx	lr
   17308:	clz	r2, r1
   1730c:	rsb	r2, r2, #31
   17310:	cmp	ip, #0
   17314:	lsr	r0, r3, r2
   17318:	rsbmi	r0, r0, #0
   1731c:	bx	lr
   17320:	cmp	r0, #0
   17324:	mvngt	r0, #-2147483648	; 0x80000000
   17328:	movlt	r0, #-2147483648	; 0x80000000
   1732c:	b	1738c <__assert_fail@plt+0x64b8>
   17330:	cmp	r1, #0
   17334:	beq	17320 <__assert_fail@plt+0x644c>
   17338:	push	{r0, r1, lr}
   1733c:	bl	17118 <__assert_fail@plt+0x6244>
   17340:	pop	{r1, r2, lr}
   17344:	mul	r3, r2, r0
   17348:	sub	r1, r1, r3
   1734c:	bx	lr
   17350:	cmp	r3, #0
   17354:	cmpeq	r2, #0
   17358:	bne	17370 <__assert_fail@plt+0x649c>
   1735c:	cmp	r1, #0
   17360:	cmpeq	r0, #0
   17364:	mvnne	r1, #0
   17368:	mvnne	r0, #0
   1736c:	b	1738c <__assert_fail@plt+0x64b8>
   17370:	sub	sp, sp, #8
   17374:	push	{sp, lr}
   17378:	bl	1739c <__assert_fail@plt+0x64c8>
   1737c:	ldr	lr, [sp, #4]
   17380:	add	sp, sp, #8
   17384:	pop	{r2, r3}
   17388:	bx	lr
   1738c:	push	{r1, lr}
   17390:	mov	r0, #8
   17394:	bl	10c88 <raise@plt>
   17398:	pop	{r1, pc}
   1739c:	cmp	r1, r3
   173a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   173a4:	cmpeq	r0, r2
   173a8:	mov	r4, r0
   173ac:	mov	r5, r1
   173b0:	ldr	r9, [sp, #28]
   173b4:	movcc	r0, #0
   173b8:	movcc	r1, #0
   173bc:	bcc	174b4 <__assert_fail@plt+0x65e0>
   173c0:	cmp	r3, #0
   173c4:	clzeq	ip, r2
   173c8:	clzne	ip, r3
   173cc:	addeq	ip, ip, #32
   173d0:	cmp	r5, #0
   173d4:	clzeq	r1, r4
   173d8:	addeq	r1, r1, #32
   173dc:	clzne	r1, r5
   173e0:	sub	ip, ip, r1
   173e4:	sub	lr, ip, #32
   173e8:	lsl	r7, r3, ip
   173ec:	rsb	r8, ip, #32
   173f0:	orr	r7, r7, r2, lsl lr
   173f4:	orr	r7, r7, r2, lsr r8
   173f8:	lsl	r6, r2, ip
   173fc:	cmp	r5, r7
   17400:	cmpeq	r4, r6
   17404:	movcc	r0, #0
   17408:	movcc	r1, #0
   1740c:	bcc	17428 <__assert_fail@plt+0x6554>
   17410:	mov	r3, #1
   17414:	subs	r4, r4, r6
   17418:	lsl	r1, r3, lr
   1741c:	lsl	r0, r3, ip
   17420:	orr	r1, r1, r3, lsr r8
   17424:	sbc	r5, r5, r7
   17428:	cmp	ip, #0
   1742c:	beq	174b4 <__assert_fail@plt+0x65e0>
   17430:	lsrs	r3, r7, #1
   17434:	rrx	r2, r6
   17438:	mov	r6, ip
   1743c:	b	17460 <__assert_fail@plt+0x658c>
   17440:	subs	r4, r4, r2
   17444:	sbc	r5, r5, r3
   17448:	adds	r4, r4, r4
   1744c:	adc	r5, r5, r5
   17450:	adds	r4, r4, #1
   17454:	adc	r5, r5, #0
   17458:	subs	r6, r6, #1
   1745c:	beq	1747c <__assert_fail@plt+0x65a8>
   17460:	cmp	r5, r3
   17464:	cmpeq	r4, r2
   17468:	bcs	17440 <__assert_fail@plt+0x656c>
   1746c:	adds	r4, r4, r4
   17470:	adc	r5, r5, r5
   17474:	subs	r6, r6, #1
   17478:	bne	17460 <__assert_fail@plt+0x658c>
   1747c:	lsr	r6, r4, ip
   17480:	lsr	r7, r5, ip
   17484:	orr	r6, r6, r5, lsl r8
   17488:	adds	r2, r0, r4
   1748c:	orr	r6, r6, r5, lsr lr
   17490:	adc	r3, r1, r5
   17494:	lsl	r1, r7, ip
   17498:	orr	r1, r1, r6, lsl lr
   1749c:	lsl	r0, r6, ip
   174a0:	orr	r1, r1, r6, lsr r8
   174a4:	subs	r0, r2, r0
   174a8:	mov	r4, r6
   174ac:	mov	r5, r7
   174b0:	sbc	r1, r3, r1
   174b4:	cmp	r9, #0
   174b8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   174bc:	strd	r4, [r9]
   174c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   174c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   174c8:	mov	r7, r0
   174cc:	ldr	r6, [pc, #72]	; 1751c <__assert_fail@plt+0x6648>
   174d0:	ldr	r5, [pc, #72]	; 17520 <__assert_fail@plt+0x664c>
   174d4:	add	r6, pc, r6
   174d8:	add	r5, pc, r5
   174dc:	sub	r6, r6, r5
   174e0:	mov	r8, r1
   174e4:	mov	r9, r2
   174e8:	bl	10c50 <calloc@plt-0x20>
   174ec:	asrs	r6, r6, #2
   174f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   174f4:	mov	r4, #0
   174f8:	add	r4, r4, #1
   174fc:	ldr	r3, [r5], #4
   17500:	mov	r2, r9
   17504:	mov	r1, r8
   17508:	mov	r0, r7
   1750c:	blx	r3
   17510:	cmp	r6, r4
   17514:	bne	174f8 <__assert_fail@plt+0x6624>
   17518:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1751c:	andeq	r0, r1, r4, lsr sl
   17520:	andeq	r0, r1, ip, lsr #20
   17524:	bx	lr
   17528:	ldr	r3, [pc, #12]	; 1753c <__assert_fail@plt+0x6668>
   1752c:	mov	r1, #0
   17530:	add	r3, pc, r3
   17534:	ldr	r2, [r3]
   17538:	b	10e38 <__cxa_atexit@plt>
   1753c:	andeq	r0, r1, ip, lsr #23

Disassembly of section .fini:

00017540 <.fini>:
   17540:	push	{r3, lr}
   17544:	pop	{r3, pc}
