
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010c84 <.init>:
   10c84:	push	{r3, lr}
   10c88:	bl	114e8 <__assert_fail@plt+0x5e0>
   10c8c:	pop	{r3, pc}

Disassembly of section .plt:

00010c90 <calloc@plt-0x14>:
   10c90:	push	{lr}		; (str lr, [sp, #-4]!)
   10c94:	ldr	lr, [pc, #4]	; 10ca0 <calloc@plt-0x4>
   10c98:	add	lr, pc, lr
   10c9c:	ldr	pc, [lr, #8]!
   10ca0:	andeq	r7, r1, r0, ror #6

00010ca4 <calloc@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #864]!	; 0x360

00010cb0 <fputs_unlocked@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #856]!	; 0x358

00010cbc <strcmp@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #848]!	; 0x350

00010cc8 <posix_fadvise64@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #840]!	; 0x348

00010cd4 <fflush@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #832]!	; 0x340

00010ce0 <__memmove_chk@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #824]!	; 0x338

00010cec <free@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #816]!	; 0x330

00010cf8 <_exit@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #808]!	; 0x328

00010d04 <memcpy@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #800]!	; 0x320

00010d10 <__strtoull_internal@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #792]!	; 0x318

00010d1c <mbsinit@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #784]!	; 0x310

00010d28 <fwrite_unlocked@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #776]!	; 0x308

00010d34 <memcmp@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #768]!	; 0x300

00010d40 <fputc_unlocked@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #760]!	; 0x2f8

00010d4c <dcgettext@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #752]!	; 0x2f0

00010d58 <realloc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #744]!	; 0x2e8

00010d64 <textdomain@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d70 <iswprint@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #728]!	; 0x2d8

00010d7c <fwrite@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #720]!	; 0x2d0

00010d88 <lseek64@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #712]!	; 0x2c8

00010d94 <__ctype_get_mb_cur_max@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #704]!	; 0x2c0

00010da0 <__fpending@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dac <mbrtowc@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #688]!	; 0x2b0

00010db8 <error@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc4 <malloc@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd0 <__libc_start_main@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #664]!	; 0x298

00010ddc <__freading@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #656]!	; 0x290

00010de8 <__gmon_start__@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #648]!	; 0x288

00010df4 <getopt_long@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #640]!	; 0x280

00010e00 <__ctype_b_loc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #632]!	; 0x278

00010e0c <exit@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #624]!	; 0x270

00010e18 <strlen@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #616]!	; 0x268

00010e24 <strchr@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #608]!	; 0x260

00010e30 <__errno_location@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #600]!	; 0x258

00010e3c <__cxa_atexit@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #592]!	; 0x250

00010e48 <memset@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #584]!	; 0x248

00010e54 <__printf_chk@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #576]!	; 0x240

00010e60 <fileno@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #568]!	; 0x238

00010e6c <__fprintf_chk@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #560]!	; 0x230

00010e78 <fclose@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #552]!	; 0x228

00010e84 <fseeko64@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #544]!	; 0x220

00010e90 <__uflow@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #536]!	; 0x218

00010e9c <__overflow@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #528]!	; 0x210

00010ea8 <setlocale@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #520]!	; 0x208

00010eb4 <strrchr@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #512]!	; 0x200

00010ec0 <nl_langinfo@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #504]!	; 0x1f8

00010ecc <clearerr_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ed8 <fopen64@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee4 <bindtextdomain@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef0 <strncmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #472]!	; 0x1d8

00010efc <abort@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #464]!	; 0x1d0

00010f08 <__assert_fail@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #456]!	; 0x1c8

Disassembly of section .text:

00010f14 <.text>:
   10f14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f18:	movw	r4, #33112	; 0x8158
   10f1c:	movt	r4, #2
   10f20:	strd	r6, [sp, #8]
   10f24:	mov	r7, r0
   10f28:	mov	r6, r1
   10f2c:	strd	r8, [sp, #16]
   10f30:	strd	sl, [sp, #24]
   10f34:	movw	fp, #27864	; 0x6cd8
   10f38:	movt	fp, #1
   10f3c:	str	lr, [sp, #32]
   10f40:	sub	sp, sp, #44	; 0x2c
   10f44:	ldr	r0, [r1]
   10f48:	bl	12e04 <__assert_fail@plt+0x1efc>
   10f4c:	mov	r1, fp
   10f50:	mov	r0, #6
   10f54:	bl	10ea8 <setlocale@plt>
   10f58:	movw	r1, #28908	; 0x70ec
   10f5c:	movt	r1, #1
   10f60:	movw	r0, #28740	; 0x7044
   10f64:	movt	r0, #1
   10f68:	bl	10ee4 <bindtextdomain@plt>
   10f6c:	movw	r0, #28740	; 0x7044
   10f70:	movt	r0, #1
   10f74:	bl	10d64 <textdomain@plt>
   10f78:	movw	r0, #10976	; 0x2ae0
   10f7c:	movt	r0, #1
   10f80:	bl	16ab4 <__assert_fail@plt+0x5bac>
   10f84:	mov	r3, #0
   10f88:	mov	r2, #75	; 0x4b
   10f8c:	cmp	r7, #1
   10f90:	str	r2, [r4, #4]
   10f94:	str	r3, [r4, #32]
   10f98:	str	r3, [r4, #40]	; 0x28
   10f9c:	str	fp, [r4, #44]	; 0x2c
   10fa0:	strb	r3, [r4, #52]	; 0x34
   10fa4:	strb	r3, [r4, #53]	; 0x35
   10fa8:	strb	r3, [r4, #54]	; 0x36
   10fac:	strb	r3, [r4, #64]	; 0x40
   10fb0:	str	r3, [r4, #72]	; 0x48
   10fb4:	ble	10fc8 <__assert_fail@plt+0xc0>
   10fb8:	ldr	r2, [r6, #4]
   10fbc:	ldrb	r1, [r2]
   10fc0:	cmp	r1, #45	; 0x2d
   10fc4:	beq	11178 <__assert_fail@plt+0x270>
   10fc8:	str	r3, [sp, #28]
   10fcc:	ldr	r9, [pc, #1236]	; 114a8 <__assert_fail@plt+0x5a0>
   10fd0:	movw	r8, #29044	; 0x7174
   10fd4:	movt	r8, #1
   10fd8:	movw	sl, #33104	; 0x8150
   10fdc:	movt	sl, #2
   10fe0:	mov	r3, #0
   10fe4:	str	r3, [sp, #24]
   10fe8:	mov	r5, #0
   10fec:	mov	r3, r9
   10ff0:	mov	r2, r8
   10ff4:	mov	r1, r6
   10ff8:	mov	r0, r7
   10ffc:	str	r5, [sp]
   11000:	bl	10df4 <getopt_long@plt>
   11004:	cmn	r0, #1
   11008:	beq	111a0 <__assert_fail@plt+0x298>
   1100c:	cmp	r0, #112	; 0x70
   11010:	beq	110e0 <__assert_fail@plt+0x1d8>
   11014:	ble	11038 <__assert_fail@plt+0x130>
   11018:	cmp	r0, #116	; 0x74
   1101c:	beq	1116c <__assert_fail@plt+0x264>
   11020:	ble	1106c <__assert_fail@plt+0x164>
   11024:	cmp	r0, #117	; 0x75
   11028:	bne	11058 <__assert_fail@plt+0x150>
   1102c:	mov	r3, #1
   11030:	strb	r3, [r4, #64]	; 0x40
   11034:	b	10fe8 <__assert_fail@plt+0xe0>
   11038:	cmn	r0, #2
   1103c:	beq	1143c <__assert_fail@plt+0x534>
   11040:	ble	11094 <__assert_fail@plt+0x18c>
   11044:	cmp	r0, #99	; 0x63
   11048:	bne	11080 <__assert_fail@plt+0x178>
   1104c:	mov	r3, #1
   11050:	strb	r3, [r4, #53]	; 0x35
   11054:	b	10fe8 <__assert_fail@plt+0xe0>
   11058:	cmp	r0, #119	; 0x77
   1105c:	bne	11424 <__assert_fail@plt+0x51c>
   11060:	ldr	r3, [sl]
   11064:	str	r3, [sp, #28]
   11068:	b	10fe8 <__assert_fail@plt+0xe0>
   1106c:	cmp	r0, #115	; 0x73
   11070:	bne	11424 <__assert_fail@plt+0x51c>
   11074:	mov	r3, #1
   11078:	strb	r3, [r4, #52]	; 0x34
   1107c:	b	10fe8 <__assert_fail@plt+0xe0>
   11080:	cmp	r0, #103	; 0x67
   11084:	bne	11424 <__assert_fail@plt+0x51c>
   11088:	ldr	r3, [sl]
   1108c:	str	r3, [sp, #24]
   11090:	b	10fe8 <__assert_fail@plt+0xe0>
   11094:	cmn	r0, #3
   11098:	mov	r3, r0
   1109c:	bne	11428 <__assert_fail@plt+0x520>
   110a0:	movw	r2, #29028	; 0x7164
   110a4:	movt	r2, #1
   110a8:	movw	r3, #33000	; 0x80e8
   110ac:	movt	r3, #2
   110b0:	movw	r0, #33100	; 0x814c
   110b4:	movt	r0, #2
   110b8:	stm	sp, {r2, r5}
   110bc:	movw	r1, #27648	; 0x6c00
   110c0:	movt	r1, #1
   110c4:	ldr	r0, [r0]
   110c8:	movw	r2, #28736	; 0x7040
   110cc:	movt	r2, #1
   110d0:	ldr	r3, [r3]
   110d4:	bl	15590 <__assert_fail@plt+0x4688>
   110d8:	mov	r0, r5
   110dc:	bl	10e0c <exit@plt>
   110e0:	ldr	r3, [sl]
   110e4:	str	r5, [r4, #40]	; 0x28
   110e8:	ldrb	r2, [r3]
   110ec:	mov	r5, r3
   110f0:	cmp	r2, #32
   110f4:	bne	11110 <__assert_fail@plt+0x208>
   110f8:	rsb	r1, r3, #1
   110fc:	add	r2, r5, r1
   11100:	ldrb	r3, [r5, #1]!
   11104:	cmp	r3, #32
   11108:	beq	110fc <__assert_fail@plt+0x1f4>
   1110c:	str	r2, [r4, #40]	; 0x28
   11110:	mov	r0, r5
   11114:	str	r5, [r4, #44]	; 0x2c
   11118:	bl	10e18 <strlen@plt>
   1111c:	add	r1, r5, r0
   11120:	str	r0, [r4, #72]	; 0x48
   11124:	cmp	r5, r1
   11128:	bcs	11158 <__assert_fail@plt+0x250>
   1112c:	ldrb	r3, [r1, #-1]
   11130:	cmp	r3, #32
   11134:	bne	11158 <__assert_fail@plt+0x250>
   11138:	sub	r3, r1, #1
   1113c:	b	1114c <__assert_fail@plt+0x244>
   11140:	ldrb	r2, [r3, #-1]!
   11144:	cmp	r2, #32
   11148:	bne	11158 <__assert_fail@plt+0x250>
   1114c:	cmp	r5, r3
   11150:	mov	r1, r3
   11154:	bne	11140 <__assert_fail@plt+0x238>
   11158:	sub	r5, r1, r5
   1115c:	mov	r3, #0
   11160:	strb	r3, [r1]
   11164:	str	r5, [r4, #32]
   11168:	b	10fe8 <__assert_fail@plt+0xe0>
   1116c:	mov	r3, #1
   11170:	strb	r3, [r4, #54]	; 0x36
   11174:	b	10fe8 <__assert_fail@plt+0xe0>
   11178:	ldrb	r1, [r2, #1]
   1117c:	sub	r1, r1, #48	; 0x30
   11180:	cmp	r1, #9
   11184:	bhi	10fc8 <__assert_fail@plt+0xc0>
   11188:	ldr	r3, [r6]
   1118c:	add	r2, r2, #1
   11190:	sub	r7, r7, #1
   11194:	str	r2, [sp, #28]
   11198:	str	r3, [r6, #4]!
   1119c:	b	10fcc <__assert_fail@plt+0xc4>
   111a0:	ldr	sl, [sp, #28]
   111a4:	cmp	sl, r5
   111a8:	beq	1138c <__assert_fail@plt+0x484>
   111ac:	mov	r2, #5
   111b0:	movw	r8, #2500	; 0x9c4
   111b4:	movw	r1, #29068	; 0x718c
   111b8:	movt	r1, #1
   111bc:	mov	r0, r5
   111c0:	mov	r9, #0
   111c4:	bl	10d4c <dcgettext@plt>
   111c8:	mov	r3, #0
   111cc:	mov	r2, #0
   111d0:	strd	r8, [sp]
   111d4:	str	fp, [sp, #8]
   111d8:	str	r0, [sp, #12]
   111dc:	mov	r0, sl
   111e0:	str	r5, [sp, #16]
   111e4:	bl	15ca0 <__assert_fail@plt+0x4d98>
   111e8:	ldr	r3, [sp, #24]
   111ec:	mov	r8, r0
   111f0:	str	r0, [r4, #4]
   111f4:	cmp	r3, r5
   111f8:	beq	11398 <__assert_fail@plt+0x490>
   111fc:	asr	r9, r8, #31
   11200:	mov	r2, #5
   11204:	movw	r1, #29068	; 0x718c
   11208:	movt	r1, #1
   1120c:	mov	r0, r5
   11210:	bl	10d4c <dcgettext@plt>
   11214:	mov	r2, #0
   11218:	mov	r3, #0
   1121c:	strd	r8, [sp]
   11220:	str	fp, [sp, #8]
   11224:	str	r0, [sp, #12]
   11228:	str	r5, [sp, #16]
   1122c:	ldr	r0, [sp, #24]
   11230:	bl	15ca0 <__assert_fail@plt+0x4d98>
   11234:	str	r0, [r4, #16]
   11238:	movw	r5, #33080	; 0x8138
   1123c:	movt	r5, #2
   11240:	ldr	r3, [r5]
   11244:	cmp	r3, r7
   11248:	beq	11404 <__assert_fail@plt+0x4fc>
   1124c:	movge	r4, #1
   11250:	bge	1131c <__assert_fail@plt+0x414>
   11254:	movw	r2, #29092	; 0x71a4
   11258:	movt	r2, #1
   1125c:	movw	r8, #29084	; 0x719c
   11260:	movt	r8, #1
   11264:	str	r2, [sp, #36]	; 0x24
   11268:	mov	r2, #0
   1126c:	movw	r9, #29088	; 0x71a0
   11270:	movt	r9, #1
   11274:	mov	r4, #1
   11278:	str	r2, [sp, #24]
   1127c:	b	112b8 <__assert_fail@plt+0x3b0>
   11280:	mov	r3, #1
   11284:	movw	r2, #33096	; 0x8148
   11288:	movt	r2, #2
   1128c:	mov	r1, fp
   11290:	ldr	r0, [r2]
   11294:	str	r3, [sp, #24]
   11298:	bl	12148 <__assert_fail@plt+0x1240>
   1129c:	and	r4, r4, r0
   112a0:	uxtb	r4, r4
   112a4:	ldr	r3, [r5]
   112a8:	add	r3, r3, #1
   112ac:	cmp	r3, r7
   112b0:	str	r3, [r5]
   112b4:	bge	112f8 <__assert_fail@plt+0x3f0>
   112b8:	ldr	fp, [r6, r3, lsl #2]
   112bc:	mov	r1, r8
   112c0:	mov	r0, fp
   112c4:	bl	10cbc <strcmp@plt>
   112c8:	cmp	r0, #0
   112cc:	beq	11280 <__assert_fail@plt+0x378>
   112d0:	mov	r1, r9
   112d4:	mov	r0, fp
   112d8:	bl	10ed8 <fopen64@plt>
   112dc:	subs	sl, r0, #0
   112e0:	beq	11340 <__assert_fail@plt+0x438>
   112e4:	mov	r1, fp
   112e8:	bl	12148 <__assert_fail@plt+0x1240>
   112ec:	and	r4, r4, r0
   112f0:	uxtb	r4, r4
   112f4:	b	112a4 <__assert_fail@plt+0x39c>
   112f8:	ldr	r3, [sp, #24]
   112fc:	cmp	r3, #0
   11300:	beq	1131c <__assert_fail@plt+0x414>
   11304:	movw	r5, #33096	; 0x8148
   11308:	movt	r5, #2
   1130c:	ldr	r0, [r5]
   11310:	bl	12c20 <__assert_fail@plt+0x1d18>
   11314:	cmp	r0, #0
   11318:	bne	11474 <__assert_fail@plt+0x56c>
   1131c:	eor	r0, r4, #1
   11320:	uxtb	r0, r0
   11324:	add	sp, sp, #44	; 0x2c
   11328:	ldrd	r4, [sp]
   1132c:	ldrd	r6, [sp, #8]
   11330:	ldrd	r8, [sp, #16]
   11334:	ldrd	sl, [sp, #24]
   11338:	add	sp, sp, #32
   1133c:	pop	{pc}		; (ldr pc, [sp], #4)
   11340:	bl	10e30 <__errno_location@plt>
   11344:	ldr	r3, [r0]
   11348:	mov	r2, #5
   1134c:	mov	r0, sl
   11350:	mov	r4, sl
   11354:	ldr	r1, [sp, #36]	; 0x24
   11358:	str	r3, [sp, #28]
   1135c:	bl	10d4c <dcgettext@plt>
   11360:	mov	r2, r0
   11364:	mov	r1, fp
   11368:	mov	r0, #4
   1136c:	str	r2, [sp, #32]
   11370:	bl	14e40 <__assert_fail@plt+0x3f38>
   11374:	mov	r3, r0
   11378:	mov	r0, sl
   1137c:	ldr	r1, [sp, #28]
   11380:	ldr	r2, [sp, #32]
   11384:	bl	10db8 <error@plt>
   11388:	b	112a4 <__assert_fail@plt+0x39c>
   1138c:	ldr	r3, [sp, #24]
   11390:	cmp	r3, #0
   11394:	bne	113b4 <__assert_fail@plt+0x4ac>
   11398:	ldr	r1, [r4, #4]
   1139c:	mov	r3, #187	; 0xbb
   113a0:	mov	r2, #200	; 0xc8
   113a4:	mul	r3, r3, r1
   113a8:	sdiv	r3, r3, r2
   113ac:	str	r3, [r4, #16]
   113b0:	b	11238 <__assert_fail@plt+0x330>
   113b4:	ldr	r5, [sp, #28]
   113b8:	mov	r2, #5
   113bc:	movw	r1, #29068	; 0x718c
   113c0:	movt	r1, #1
   113c4:	mov	r8, #75	; 0x4b
   113c8:	mov	r9, #0
   113cc:	mov	r0, r5
   113d0:	bl	10d4c <dcgettext@plt>
   113d4:	mov	r1, r5
   113d8:	mov	r3, #0
   113dc:	strd	r8, [sp]
   113e0:	mov	r2, #0
   113e4:	str	fp, [sp, #8]
   113e8:	strd	r0, [sp, #12]
   113ec:	ldr	r0, [sp, #24]
   113f0:	bl	15ca0 <__assert_fail@plt+0x4d98>
   113f4:	add	r3, r0, #10
   113f8:	str	r3, [r4, #4]
   113fc:	str	r0, [r4, #16]
   11400:	b	11238 <__assert_fail@plt+0x330>
   11404:	movw	r5, #33096	; 0x8148
   11408:	movt	r5, #2
   1140c:	movw	r1, #29084	; 0x719c
   11410:	movt	r1, #1
   11414:	ldr	r0, [r5]
   11418:	bl	12148 <__assert_fail@plt+0x1240>
   1141c:	mov	r4, r0
   11420:	b	1130c <__assert_fail@plt+0x404>
   11424:	mov	r3, r0
   11428:	sub	r2, r3, #48	; 0x30
   1142c:	cmp	r2, #9
   11430:	bls	11444 <__assert_fail@plt+0x53c>
   11434:	mov	r0, #1
   11438:	bl	12738 <__assert_fail@plt+0x1830>
   1143c:	mov	r0, r5
   11440:	bl	12738 <__assert_fail@plt+0x1830>
   11444:	mov	r2, #5
   11448:	movw	r1, #28932	; 0x7104
   1144c:	movt	r1, #1
   11450:	mov	r0, #0
   11454:	str	r3, [sp, #24]
   11458:	bl	10d4c <dcgettext@plt>
   1145c:	mov	r1, #0
   11460:	mov	r2, r0
   11464:	ldr	r3, [sp, #24]
   11468:	mov	r0, r1
   1146c:	bl	10db8 <error@plt>
   11470:	b	11434 <__assert_fail@plt+0x52c>
   11474:	bl	10e30 <__errno_location@plt>
   11478:	ldr	r4, [r0]
   1147c:	mov	r2, #5
   11480:	movw	r1, #29120	; 0x71c0
   11484:	movt	r1, #1
   11488:	mov	r0, #0
   1148c:	bl	10d4c <dcgettext@plt>
   11490:	mov	r3, r0
   11494:	movw	r2, #29380	; 0x72c4
   11498:	movt	r2, #1
   1149c:	mov	r0, #1
   114a0:	mov	r1, r4
   114a4:	bl	10db8 <error@plt>
   114a8:	andeq	r6, r1, r0, lsr #22
   114ac:	mov	fp, #0
   114b0:	mov	lr, #0
   114b4:	pop	{r1}		; (ldr r1, [sp], #4)
   114b8:	mov	r2, sp
   114bc:	push	{r2}		; (str r2, [sp, #-4]!)
   114c0:	push	{r0}		; (str r0, [sp, #-4]!)
   114c4:	ldr	ip, [pc, #16]	; 114dc <__assert_fail@plt+0x5d4>
   114c8:	push	{ip}		; (str ip, [sp, #-4]!)
   114cc:	ldr	r0, [pc, #12]	; 114e0 <__assert_fail@plt+0x5d8>
   114d0:	ldr	r3, [pc, #12]	; 114e4 <__assert_fail@plt+0x5dc>
   114d4:	bl	10dd0 <__libc_start_main@plt>
   114d8:	bl	10efc <abort@plt>
   114dc:			; <UNDEFINED> instruction: 0x00016ab0
   114e0:	andeq	r0, r1, r4, lsl pc
   114e4:	andeq	r6, r1, r0, asr sl
   114e8:	ldr	r3, [pc, #20]	; 11504 <__assert_fail@plt+0x5fc>
   114ec:	ldr	r2, [pc, #20]	; 11508 <__assert_fail@plt+0x600>
   114f0:	add	r3, pc, r3
   114f4:	ldr	r2, [r3, r2]
   114f8:	cmp	r2, #0
   114fc:	bxeq	lr
   11500:	b	10de8 <__gmon_start__@plt>
   11504:	andeq	r6, r1, r8, lsl #22
   11508:	ldrdeq	r0, [r0], -ip
   1150c:	ldr	r0, [pc, #24]	; 1152c <__assert_fail@plt+0x624>
   11510:	ldr	r3, [pc, #24]	; 11530 <__assert_fail@plt+0x628>
   11514:	cmp	r3, r0
   11518:	bxeq	lr
   1151c:	ldr	r3, [pc, #16]	; 11534 <__assert_fail@plt+0x62c>
   11520:	cmp	r3, #0
   11524:	bxeq	lr
   11528:	bx	r3
   1152c:	andeq	r8, r2, r0, lsr r1
   11530:	andeq	r8, r2, r0, lsr r1
   11534:	andeq	r0, r0, r0
   11538:	ldr	r0, [pc, #36]	; 11564 <__assert_fail@plt+0x65c>
   1153c:	ldr	r1, [pc, #36]	; 11568 <__assert_fail@plt+0x660>
   11540:	sub	r1, r1, r0
   11544:	asr	r1, r1, #2
   11548:	add	r1, r1, r1, lsr #31
   1154c:	asrs	r1, r1, #1
   11550:	bxeq	lr
   11554:	ldr	r3, [pc, #16]	; 1156c <__assert_fail@plt+0x664>
   11558:	cmp	r3, #0
   1155c:	bxeq	lr
   11560:	bx	r3
   11564:	andeq	r8, r2, r0, lsr r1
   11568:	andeq	r8, r2, r0, lsr r1
   1156c:	andeq	r0, r0, r0
   11570:	push	{r4, lr}
   11574:	ldr	r4, [pc, #24]	; 11594 <__assert_fail@plt+0x68c>
   11578:	ldrb	r3, [r4]
   1157c:	cmp	r3, #0
   11580:	popne	{r4, pc}
   11584:	bl	1150c <__assert_fail@plt+0x604>
   11588:	mov	r3, #1
   1158c:	strb	r3, [r4]
   11590:	pop	{r4, pc}
   11594:	andeq	r8, r2, r4, asr r1
   11598:	b	11538 <__assert_fail@plt+0x630>
   1159c:	movw	r3, #33112	; 0x8158
   115a0:	movt	r3, #2
   115a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   115a8:	mov	r2, #0
   115ac:	strd	r6, [sp, #8]
   115b0:	movw	r6, #33188	; 0x81a4
   115b4:	movt	r6, #2
   115b8:	str	lr, [sp, #32]
   115bc:	ldr	lr, [r3]
   115c0:	strd	r8, [sp, #16]
   115c4:	strd	sl, [sp, #24]
   115c8:	sub	sp, sp, #20
   115cc:	ldr	r7, [r3, #4]
   115d0:	str	r2, [lr, #20]
   115d4:	sub	ip, lr, #28
   115d8:	ldr	r2, [lr, #4]
   115dc:	cmp	ip, r6
   115e0:	str	r7, [lr, #4]
   115e4:	str	r2, [sp, #12]
   115e8:	bcc	11724 <__assert_fail@plt+0x81c>
   115ec:	movw	r2, #37220	; 0x9164
   115f0:	movt	r2, #5
   115f4:	ldr	fp, [r3, #8]
   115f8:	mov	r5, #100	; 0x64
   115fc:	str	r2, [sp, #8]
   11600:	ldr	r2, [r3, #12]
   11604:	ldrd	r8, [r3, #16]
   11608:	str	r2, [sp, #4]
   1160c:	ldr	r1, [sp, #4]
   11610:	cmp	ip, r6
   11614:	mov	r3, ip
   11618:	movne	r1, fp
   1161c:	mvn	r4, #-2147483648	; 0x80000000
   11620:	ldr	sl, [ip, #4]
   11624:	add	r1, sl, r1
   11628:	b	11660 <__assert_fail@plt+0x758>
   1162c:	cmp	r2, r4
   11630:	bge	11640 <__assert_fail@plt+0x738>
   11634:	mov	r4, r2
   11638:	str	r1, [ip, #16]
   1163c:	str	r3, [ip, #24]
   11640:	cmp	lr, r3
   11644:	beq	116c8 <__assert_fail@plt+0x7c0>
   11648:	ldr	r2, [r3, #-20]	; 0xffffffec
   1164c:	ldr	r0, [r3, #4]
   11650:	add	r2, r2, r0
   11654:	add	r1, r1, r2
   11658:	cmp	r7, r1
   1165c:	ble	116c8 <__assert_fail@plt+0x7c0>
   11660:	add	r3, r3, #28
   11664:	cmp	lr, r3
   11668:	moveq	r2, #0
   1166c:	beq	1169c <__assert_fail@plt+0x794>
   11670:	ldr	r0, [r3, #24]
   11674:	sub	r2, r8, r1
   11678:	mul	r2, r2, r2
   1167c:	cmp	lr, r0
   11680:	mul	r2, r5, r2
   11684:	beq	1169c <__assert_fail@plt+0x794>
   11688:	ldr	r0, [r3, #16]
   1168c:	sub	r0, r1, r0
   11690:	mul	r0, r0, r0
   11694:	mul	r0, r5, r0
   11698:	add	r2, r2, r0, asr #1
   1169c:	ldr	r0, [r3, #20]
   116a0:	cmp	ip, r6
   116a4:	add	r2, r2, r0
   116a8:	bne	1162c <__assert_fail@plt+0x724>
   116ac:	cmp	r9, #0
   116b0:	ble	1162c <__assert_fail@plt+0x724>
   116b4:	sub	r0, r1, r9
   116b8:	mul	r0, r0, r0
   116bc:	mul	r0, r5, r0
   116c0:	add	r2, r2, r0, asr #1
   116c4:	b	1162c <__assert_fail@plt+0x724>
   116c8:	cmp	ip, r6
   116cc:	bls	1176c <__assert_fail@plt+0x864>
   116d0:	ldrb	r3, [ip, #-16]
   116d4:	tst	r3, #2
   116d8:	beq	11748 <__assert_fail@plt+0x840>
   116dc:	tst	r3, #8
   116e0:	ldr	r3, [sp, #8]
   116e4:	movne	r3, #2400	; 0x960
   116e8:	ldrb	r2, [ip, #12]
   116ec:	tst	r2, #1
   116f0:	subne	r3, r3, #1600	; 0x640
   116f4:	bne	11710 <__assert_fail@plt+0x808>
   116f8:	tst	r2, #8
   116fc:	beq	11710 <__assert_fail@plt+0x808>
   11700:	add	sl, sl, #2
   11704:	movw	r2, #22500	; 0x57e4
   11708:	sdiv	sl, r2, sl
   1170c:	add	r3, r3, sl
   11710:	add	r4, r4, r3
   11714:	sub	ip, ip, #28
   11718:	str	r4, [ip, #48]	; 0x30
   1171c:	cmp	ip, r6
   11720:	bcs	1160c <__assert_fail@plt+0x704>
   11724:	ldr	r3, [sp, #12]
   11728:	str	r3, [lr, #4]
   1172c:	add	sp, sp, #20
   11730:	ldrd	r4, [sp]
   11734:	ldrd	r6, [sp, #8]
   11738:	ldrd	r8, [sp, #16]
   1173c:	ldrd	sl, [sp, #24]
   11740:	add	sp, sp, #32
   11744:	pop	{pc}		; (ldr pc, [sp], #4)
   11748:	tst	r3, #4
   1174c:	movwne	r3, #3300	; 0xce4
   11750:	bne	116e8 <__assert_fail@plt+0x7e0>
   11754:	ldr	r3, [pc, #52]	; 11790 <__assert_fail@plt+0x888>
   11758:	cmp	ip, r3
   1175c:	bls	1176c <__assert_fail@plt+0x864>
   11760:	ldrb	r3, [ip, #-44]	; 0xffffffd4
   11764:	tst	r3, #8
   11768:	bne	11774 <__assert_fail@plt+0x86c>
   1176c:	movw	r3, #4900	; 0x1324
   11770:	b	116e8 <__assert_fail@plt+0x7e0>
   11774:	ldr	r3, [ip, #-24]	; 0xffffffe8
   11778:	movw	r2, #40000	; 0x9c40
   1177c:	add	r3, r3, #2
   11780:	sdiv	r3, r2, r3
   11784:	add	r3, r3, #4864	; 0x1300
   11788:	add	r3, r3, #36	; 0x24
   1178c:	b	116e8 <__assert_fail@plt+0x7e0>
   11790:	andeq	r8, r2, r0, asr #3
   11794:	strd	r4, [sp, #-16]!
   11798:	mov	r4, r0
   1179c:	movw	r5, #33112	; 0x8158
   117a0:	movt	r5, #2
   117a4:	mov	r0, r1
   117a8:	str	r6, [sp, #8]
   117ac:	mov	r6, #1
   117b0:	str	lr, [sp, #12]
   117b4:	b	117fc <__assert_fail@plt+0x8f4>
   117b8:	cmp	r0, #9
   117bc:	bne	11820 <__assert_fail@plt+0x918>
   117c0:	ldr	r3, [r5, #24]
   117c4:	strb	r6, [r5, #28]
   117c8:	add	r2, r3, #7
   117cc:	cmp	r3, #0
   117d0:	movlt	r3, r2
   117d4:	bic	r3, r3, #7
   117d8:	add	r3, r3, #8
   117dc:	str	r3, [r5, #24]
   117e0:	ldr	r3, [r4, #4]
   117e4:	ldr	r2, [r4, #8]
   117e8:	add	r1, r3, #1
   117ec:	cmp	r3, r2
   117f0:	bcs	11814 <__assert_fail@plt+0x90c>
   117f4:	str	r1, [r4, #4]
   117f8:	ldrb	r0, [r3]
   117fc:	cmp	r0, #32
   11800:	bne	117b8 <__assert_fail@plt+0x8b0>
   11804:	ldr	r3, [r5, #24]
   11808:	add	r3, r3, #1
   1180c:	str	r3, [r5, #24]
   11810:	b	117e0 <__assert_fail@plt+0x8d8>
   11814:	mov	r0, r4
   11818:	bl	10e90 <__uflow@plt>
   1181c:	b	117fc <__assert_fail@plt+0x8f4>
   11820:	ldrd	r4, [sp]
   11824:	ldr	r6, [sp, #8]
   11828:	add	sp, sp, #12
   1182c:	pop	{pc}		; (ldr pc, [sp], #4)
   11830:	ldr	r3, [r0, #4]
   11834:	mov	r1, #0
   11838:	strd	r4, [sp, #-16]!
   1183c:	movw	r5, #33112	; 0x8158
   11840:	movt	r5, #2
   11844:	ldr	r2, [r0, #8]
   11848:	mov	r4, r0
   1184c:	str	r6, [sp, #8]
   11850:	str	lr, [sp, #12]
   11854:	str	r1, [r5, #24]
   11858:	cmp	r3, r2
   1185c:	bcs	11934 <__assert_fail@plt+0xa2c>
   11860:	add	r2, r3, #1
   11864:	str	r2, [r0, #4]
   11868:	ldrb	r1, [r3]
   1186c:	mov	r0, r4
   11870:	bl	11794 <__assert_fail@plt+0x88c>
   11874:	ldr	r3, [r5, #32]
   11878:	cmp	r3, #0
   1187c:	bne	118a4 <__assert_fail@plt+0x99c>
   11880:	ldr	r3, [r5, #24]
   11884:	ldr	r2, [r5, #40]	; 0x28
   11888:	cmp	r3, r2
   1188c:	movge	r3, r2
   11890:	str	r3, [r5, #36]	; 0x24
   11894:	ldrd	r4, [sp]
   11898:	ldr	r6, [sp, #8]
   1189c:	add	sp, sp, #12
   118a0:	pop	{pc}		; (ldr pc, [sp], #4)
   118a4:	ldr	r3, [r5, #24]
   118a8:	ldr	r6, [r5, #44]	; 0x2c
   118ac:	str	r3, [r5, #36]	; 0x24
   118b0:	ldrb	r2, [r6]
   118b4:	cmp	r2, #0
   118b8:	beq	11918 <__assert_fail@plt+0xa10>
   118bc:	cmp	r0, r2
   118c0:	beq	118e8 <__assert_fail@plt+0x9e0>
   118c4:	b	11894 <__assert_fail@plt+0x98c>
   118c8:	str	r3, [r4, #4]
   118cc:	ldrb	r3, [r6, #1]!
   118d0:	ldrb	r0, [r2]
   118d4:	cmp	r3, #0
   118d8:	beq	11918 <__assert_fail@plt+0xa10>
   118dc:	cmp	r3, r0
   118e0:	bne	11894 <__assert_fail@plt+0x98c>
   118e4:	ldr	r3, [r5, #24]
   118e8:	add	r3, r3, #1
   118ec:	ldr	r2, [r4, #4]
   118f0:	str	r3, [r5, #24]
   118f4:	ldr	r1, [r4, #8]
   118f8:	add	r3, r2, #1
   118fc:	cmp	r2, r1
   11900:	bcc	118c8 <__assert_fail@plt+0x9c0>
   11904:	mov	r0, r4
   11908:	bl	10e90 <__uflow@plt>
   1190c:	ldrb	r3, [r6, #1]!
   11910:	cmp	r3, #0
   11914:	bne	118dc <__assert_fail@plt+0x9d4>
   11918:	mov	r1, r0
   1191c:	mov	r0, r4
   11920:	ldrd	r4, [sp]
   11924:	ldr	r6, [sp, #8]
   11928:	ldr	lr, [sp, #12]
   1192c:	add	sp, sp, #16
   11930:	b	11794 <__assert_fail@plt+0x88c>
   11934:	bl	10e90 <__uflow@plt>
   11938:	mov	r1, r0
   1193c:	b	1186c <__assert_fail@plt+0x964>
   11940:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11944:	movw	r4, #33112	; 0x8158
   11948:	movt	r4, #2
   1194c:	ldrb	r3, [r4, #28]
   11950:	strd	r6, [sp, #8]
   11954:	ldr	r2, [r4, #48]	; 0x30
   11958:	str	r8, [sp, #16]
   1195c:	str	lr, [sp, #20]
   11960:	cmp	r3, #0
   11964:	add	r6, r2, r0
   11968:	beq	119e8 <__assert_fail@plt+0xae0>
   1196c:	cmp	r6, #0
   11970:	add	r7, r6, #7
   11974:	movge	r7, r6
   11978:	add	r3, r2, #1
   1197c:	asr	r7, r7, #3
   11980:	lsl	r1, r7, #3
   11984:	cmp	r3, r1
   11988:	bge	119e8 <__assert_fail@plt+0xae0>
   1198c:	cmp	r2, r1
   11990:	bge	119e8 <__assert_fail@plt+0xae0>
   11994:	movw	r5, #33100	; 0x814c
   11998:	movt	r5, #2
   1199c:	mov	r8, #9
   119a0:	ldr	r0, [r5]
   119a4:	ldr	r3, [r0, #20]
   119a8:	ldr	r2, [r0, #24]
   119ac:	add	r1, r3, #1
   119b0:	cmp	r3, r2
   119b4:	strcc	r1, [r0, #20]
   119b8:	strbcc	r8, [r3]
   119bc:	bcs	11a50 <__assert_fail@plt+0xb48>
   119c0:	ldr	r3, [r4, #48]	; 0x30
   119c4:	add	r2, r3, #7
   119c8:	cmp	r3, #0
   119cc:	movlt	r3, r2
   119d0:	asr	r3, r3, #3
   119d4:	add	r3, r3, #1
   119d8:	lsl	r2, r3, #3
   119dc:	cmp	r7, r3
   119e0:	str	r2, [r4, #48]	; 0x30
   119e4:	bgt	119a0 <__assert_fail@plt+0xa98>
   119e8:	cmp	r6, r2
   119ec:	ble	11a30 <__assert_fail@plt+0xb28>
   119f0:	movw	r5, #33100	; 0x814c
   119f4:	movt	r5, #2
   119f8:	mov	r7, #32
   119fc:	ldr	r0, [r5]
   11a00:	ldr	r3, [r0, #20]
   11a04:	ldr	r2, [r0, #24]
   11a08:	add	r1, r3, #1
   11a0c:	cmp	r3, r2
   11a10:	strcc	r1, [r0, #20]
   11a14:	strbcc	r7, [r3]
   11a18:	bcs	11a44 <__assert_fail@plt+0xb3c>
   11a1c:	ldr	r3, [r4, #48]	; 0x30
   11a20:	add	r3, r3, #1
   11a24:	cmp	r3, r6
   11a28:	str	r3, [r4, #48]	; 0x30
   11a2c:	blt	119fc <__assert_fail@plt+0xaf4>
   11a30:	ldrd	r4, [sp]
   11a34:	ldrd	r6, [sp, #8]
   11a38:	ldr	r8, [sp, #16]
   11a3c:	add	sp, sp, #20
   11a40:	pop	{pc}		; (ldr pc, [sp], #4)
   11a44:	mov	r1, #32
   11a48:	bl	10e9c <__overflow@plt>
   11a4c:	b	11a1c <__assert_fail@plt+0xb14>
   11a50:	mov	r1, #9
   11a54:	bl	10e9c <__overflow@plt>
   11a58:	b	119c0 <__assert_fail@plt+0xab8>
   11a5c:	movw	r3, #33112	; 0x8158
   11a60:	movt	r3, #2
   11a64:	ldrb	r2, [r3, #52]	; 0x34
   11a68:	cmp	r2, #0
   11a6c:	bne	11a84 <__assert_fail@plt+0xb7c>
   11a70:	ldrb	r2, [r3, #53]	; 0x35
   11a74:	cmp	r2, #0
   11a78:	beq	11a90 <__assert_fail@plt+0xb88>
   11a7c:	cmp	r0, #0
   11a80:	bne	11abc <__assert_fail@plt+0xbb4>
   11a84:	ldr	r2, [r3, #12]
   11a88:	str	r2, [r3, #8]
   11a8c:	bx	lr
   11a90:	ldrb	r1, [r3, #54]	; 0x36
   11a94:	ldr	r2, [r3, #12]
   11a98:	cmp	r1, #0
   11a9c:	beq	11a88 <__assert_fail@plt+0xb80>
   11aa0:	cmp	r0, #0
   11aa4:	beq	11ac4 <__assert_fail@plt+0xbbc>
   11aa8:	ldr	r1, [r3, #24]
   11aac:	cmp	r1, r2
   11ab0:	beq	11ac4 <__assert_fail@plt+0xbbc>
   11ab4:	str	r1, [r3, #8]
   11ab8:	bx	lr
   11abc:	ldr	r2, [r3, #24]
   11ac0:	b	11a88 <__assert_fail@plt+0xb80>
   11ac4:	ldr	r1, [r3, #8]
   11ac8:	cmp	r2, r1
   11acc:	bne	11a8c <__assert_fail@plt+0xb84>
   11ad0:	cmp	r2, #0
   11ad4:	moveq	r2, #3
   11ad8:	movne	r2, #0
   11adc:	str	r2, [r3, #8]
   11ae0:	bx	lr
   11ae4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11ae8:	ldr	r5, [r1]
   11aec:	strd	r6, [sp, #8]
   11af0:	str	r8, [sp, #16]
   11af4:	str	lr, [sp, #20]
   11af8:	cmp	r5, #0
   11afc:	beq	11b44 <__assert_fail@plt+0xc3c>
   11b00:	movw	r6, #33100	; 0x814c
   11b04:	movt	r6, #2
   11b08:	mov	r7, r1
   11b0c:	mov	r4, r0
   11b10:	add	r5, r0, r5
   11b14:	ldr	r0, [r6]
   11b18:	ldrb	r1, [r4], #1
   11b1c:	ldr	r3, [r0, #20]
   11b20:	ldr	r2, [r0, #24]
   11b24:	add	ip, r3, #1
   11b28:	cmp	r3, r2
   11b2c:	strcc	ip, [r0, #20]
   11b30:	strbcc	r1, [r3]
   11b34:	bcs	11b6c <__assert_fail@plt+0xc64>
   11b38:	cmp	r4, r5
   11b3c:	bne	11b14 <__assert_fail@plt+0xc0c>
   11b40:	ldr	r5, [r7]
   11b44:	movw	r3, #33112	; 0x8158
   11b48:	movt	r3, #2
   11b4c:	ldr	r2, [r3, #48]	; 0x30
   11b50:	ldrd	r6, [sp, #8]
   11b54:	ldr	r8, [sp, #16]
   11b58:	add	r5, r2, r5
   11b5c:	str	r5, [r3, #48]	; 0x30
   11b60:	ldrd	r4, [sp]
   11b64:	add	sp, sp, #20
   11b68:	pop	{pc}		; (ldr pc, [sp], #4)
   11b6c:	bl	10e9c <__overflow@plt>
   11b70:	b	11b38 <__assert_fail@plt+0xc30>
   11b74:	mov	r3, #0
   11b78:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11b7c:	mov	r4, r1
   11b80:	strd	r6, [sp, #8]
   11b84:	movw	r6, #33112	; 0x8158
   11b88:	movt	r6, #2
   11b8c:	movw	r7, #33100	; 0x814c
   11b90:	movt	r7, #2
   11b94:	strd	r8, [sp, #16]
   11b98:	mov	r8, r0
   11b9c:	ldr	r0, [r6, #56]	; 0x38
   11ba0:	str	sl, [sp, #24]
   11ba4:	str	lr, [sp, #28]
   11ba8:	str	r3, [r6, #48]	; 0x30
   11bac:	bl	11940 <__assert_fail@plt+0xa38>
   11bb0:	ldr	r1, [r7]
   11bb4:	ldr	r0, [r6, #44]	; 0x2c
   11bb8:	bl	10cb0 <fputs_unlocked@plt>
   11bbc:	ldr	r2, [r6, #32]
   11bc0:	ldr	r3, [r6, #48]	; 0x30
   11bc4:	add	r3, r3, r2
   11bc8:	sub	r0, r4, r3
   11bcc:	str	r3, [r6, #48]	; 0x30
   11bd0:	bl	11940 <__assert_fail@plt+0xa38>
   11bd4:	ldr	r9, [r8, #24]
   11bd8:	sub	r5, r9, #28
   11bdc:	cmp	r8, r5
   11be0:	beq	11c34 <__assert_fail@plt+0xd2c>
   11be4:	add	r4, r8, #4
   11be8:	mov	r1, r4
   11bec:	ldr	r0, [r4, #-4]
   11bf0:	bl	11ae4 <__assert_fail@plt+0xbdc>
   11bf4:	ldr	r0, [r4, #4]
   11bf8:	bl	11940 <__assert_fail@plt+0xa38>
   11bfc:	add	r3, r4, #24
   11c00:	add	r4, r4, #28
   11c04:	cmp	r5, r3
   11c08:	bne	11be8 <__assert_fail@plt+0xce0>
   11c0c:	sub	r9, r9, r8
   11c10:	movw	r5, #28087	; 0x6db7
   11c14:	movt	r5, #14043	; 0x36db
   11c18:	sub	r9, r9, #56	; 0x38
   11c1c:	lsr	r9, r9, #2
   11c20:	mul	r5, r5, r9
   11c24:	bic	r5, r5, #-1073741824	; 0xc0000000
   11c28:	add	r5, r5, #1
   11c2c:	rsb	r5, r5, r5, lsl #3
   11c30:	add	r5, r8, r5, lsl #2
   11c34:	mov	r1, r5
   11c38:	ldr	r0, [r1], #4
   11c3c:	bl	11ae4 <__assert_fail@plt+0xbdc>
   11c40:	ldr	r0, [r7]
   11c44:	ldr	r1, [r6, #48]	; 0x30
   11c48:	ldr	r3, [r0, #20]
   11c4c:	ldr	r2, [r0, #24]
   11c50:	str	r1, [r6, #20]
   11c54:	cmp	r3, r2
   11c58:	bcs	11c84 <__assert_fail@plt+0xd7c>
   11c5c:	add	r1, r3, #1
   11c60:	mov	r2, #10
   11c64:	str	r1, [r0, #20]
   11c68:	strb	r2, [r3]
   11c6c:	ldrd	r4, [sp]
   11c70:	ldrd	r6, [sp, #8]
   11c74:	ldrd	r8, [sp, #16]
   11c78:	ldr	sl, [sp, #24]
   11c7c:	add	sp, sp, #28
   11c80:	pop	{pc}		; (ldr pc, [sp], #4)
   11c84:	mov	r1, #10
   11c88:	ldrd	r4, [sp]
   11c8c:	ldrd	r6, [sp, #8]
   11c90:	ldrd	r8, [sp, #16]
   11c94:	ldr	sl, [sp, #24]
   11c98:	ldr	lr, [sp, #28]
   11c9c:	add	sp, sp, #32
   11ca0:	b	10e9c <__overflow@plt>
   11ca4:	strd	r4, [sp, #-16]!
   11ca8:	movw	r5, #33112	; 0x8158
   11cac:	movt	r5, #2
   11cb0:	movw	r4, #33188	; 0x81a4
   11cb4:	movt	r4, #2
   11cb8:	str	r6, [sp, #8]
   11cbc:	mov	r6, r0
   11cc0:	mov	r0, r4
   11cc4:	ldr	r1, [r5, #12]
   11cc8:	str	lr, [sp, #12]
   11ccc:	bl	11b74 <__assert_fail@plt+0xc6c>
   11cd0:	ldr	r4, [r4, #24]
   11cd4:	cmp	r4, r6
   11cd8:	beq	11cf4 <__assert_fail@plt+0xdec>
   11cdc:	mov	r0, r4
   11ce0:	ldr	r1, [r5, #8]
   11ce4:	bl	11b74 <__assert_fail@plt+0xc6c>
   11ce8:	ldr	r4, [r4, #24]
   11cec:	cmp	r6, r4
   11cf0:	bne	11cdc <__assert_fail@plt+0xdd4>
   11cf4:	ldrd	r4, [sp]
   11cf8:	ldr	r6, [sp, #8]
   11cfc:	add	sp, sp, #12
   11d00:	pop	{pc}		; (ldr pc, [sp], #4)
   11d04:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11d08:	movw	r5, #33112	; 0x8158
   11d0c:	movt	r5, #2
   11d10:	strd	r6, [sp, #8]
   11d14:	movw	r6, #33188	; 0x81a4
   11d18:	movt	r6, #2
   11d1c:	ldr	r7, [r5]
   11d20:	strd	r8, [sp, #16]
   11d24:	str	sl, [sp, #24]
   11d28:	str	lr, [sp, #28]
   11d2c:	cmp	r7, r6
   11d30:	beq	11e28 <__assert_fail@plt+0xf20>
   11d34:	bl	1159c <__assert_fail@plt+0x694>
   11d38:	ldr	r2, [r6, #24]
   11d3c:	cmp	r7, r2
   11d40:	beq	11e58 <__assert_fail@plt+0xf50>
   11d44:	ldr	lr, [r2, #20]
   11d48:	mov	r4, r7
   11d4c:	mvn	r3, #-2147483648	; 0x80000000
   11d50:	ldr	r1, [r2, #24]
   11d54:	ldr	ip, [r1, #20]
   11d58:	sub	r0, lr, ip
   11d5c:	mov	lr, ip
   11d60:	cmp	r0, r3
   11d64:	movlt	r3, r0
   11d68:	movlt	r4, r2
   11d6c:	cmn	r3, #-2147483638	; 0x8000000a
   11d70:	mov	r2, r1
   11d74:	addle	r3, r3, #9
   11d78:	cmp	r7, r1
   11d7c:	bne	11d50 <__assert_fail@plt+0xe48>
   11d80:	mov	r0, r4
   11d84:	movw	r8, #61188	; 0xef04
   11d88:	movt	r8, #2
   11d8c:	bl	11ca4 <__assert_fail@plt+0xd9c>
   11d90:	ldr	r2, [r4]
   11d94:	movw	r3, #5000	; 0x1388
   11d98:	mov	r0, r8
   11d9c:	ldr	r9, [r5, #60]	; 0x3c
   11da0:	mov	r1, r2
   11da4:	sub	r2, r9, r2
   11da8:	bl	10ce0 <__memmove_chk@plt>
   11dac:	ldr	r3, [r4]
   11db0:	ldr	r7, [r5]
   11db4:	sub	r0, r8, r3
   11db8:	add	r9, r9, r0
   11dbc:	cmp	r7, r4
   11dc0:	str	r9, [r5, #60]	; 0x3c
   11dc4:	bcc	11de4 <__assert_fail@plt+0xedc>
   11dc8:	add	r2, r4, #28
   11dcc:	b	11dd4 <__assert_fail@plt+0xecc>
   11dd0:	ldr	r3, [r2], #28
   11dd4:	add	r3, r3, r0
   11dd8:	cmp	r2, r7
   11ddc:	str	r3, [r2, #-28]	; 0xffffffe4
   11de0:	bls	11dd0 <__assert_fail@plt+0xec8>
   11de4:	sub	r2, r7, r4
   11de8:	mov	r1, r4
   11dec:	sub	r4, r4, r6
   11df0:	bic	r2, r2, #3
   11df4:	sub	r4, r7, r4
   11df8:	movw	r0, #33188	; 0x81a4
   11dfc:	movt	r0, #2
   11e00:	add	r2, r2, #28
   11e04:	movw	r3, #28000	; 0x6d60
   11e08:	bl	10ce0 <__memmove_chk@plt>
   11e0c:	str	r4, [r5]
   11e10:	ldrd	r4, [sp]
   11e14:	ldrd	r6, [sp, #8]
   11e18:	ldrd	r8, [sp, #16]
   11e1c:	ldr	sl, [sp, #24]
   11e20:	add	sp, sp, #28
   11e24:	pop	{pc}		; (ldr pc, [sp], #4)
   11e28:	ldr	r2, [r5, #60]	; 0x3c
   11e2c:	movw	r3, #33100	; 0x814c
   11e30:	movt	r3, #2
   11e34:	movw	r4, #61188	; 0xef04
   11e38:	movt	r4, #2
   11e3c:	mov	r0, r4
   11e40:	mov	r1, #1
   11e44:	ldr	r3, [r3]
   11e48:	sub	r2, r2, r4
   11e4c:	bl	10d28 <fwrite_unlocked@plt>
   11e50:	str	r4, [r5, #60]	; 0x3c
   11e54:	b	11e10 <__assert_fail@plt+0xf08>
   11e58:	mov	r4, r7
   11e5c:	b	11d80 <__assert_fail@plt+0xe78>
   11e60:	movw	r3, #27584	; 0x6bc0
   11e64:	movt	r3, #1
   11e68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e6c:	strd	r6, [sp, #8]
   11e70:	movw	r7, #33112	; 0x8158
   11e74:	movt	r7, #2
   11e78:	strd	r8, [sp, #16]
   11e7c:	mov	r5, r1
   11e80:	mov	r6, r0
   11e84:	strd	sl, [sp, #24]
   11e88:	str	lr, [sp, #32]
   11e8c:	sub	sp, sp, #28
   11e90:	str	r3, [sp, #12]
   11e94:	bl	10e00 <__ctype_b_loc@plt>
   11e98:	ldr	r2, [r7]
   11e9c:	movw	r3, #27592	; 0x6bc8
   11ea0:	movt	r3, #1
   11ea4:	mov	fp, r0
   11ea8:	str	r3, [sp, #20]
   11eac:	movw	r3, #27600	; 0x6bd0
   11eb0:	movt	r3, #1
   11eb4:	str	r3, [sp, #16]
   11eb8:	ldr	r1, [r7, #60]	; 0x3c
   11ebc:	str	r1, [r2]
   11ec0:	b	11f04 <__assert_fail@plt+0xffc>
   11ec4:	add	r2, r1, #1
   11ec8:	strb	r5, [r1]
   11ecc:	mov	r1, r2
   11ed0:	ldr	r3, [r6, #4]
   11ed4:	str	r2, [r7, #60]	; 0x3c
   11ed8:	ldr	r2, [r6, #8]
   11edc:	add	r0, r3, #1
   11ee0:	cmp	r3, r2
   11ee4:	bcs	11f24 <__assert_fail@plt+0x101c>
   11ee8:	str	r0, [r6, #4]
   11eec:	ldrb	r5, [r3]
   11ef0:	lsl	r3, r5, #1
   11ef4:	ldr	sl, [fp]
   11ef8:	ldrh	r3, [sl, r3]
   11efc:	tst	r3, #8192	; 0x2000
   11f00:	bne	11f40 <__assert_fail@plt+0x1038>
   11f04:	ldr	r3, [pc, #564]	; 12140 <__assert_fail@plt+0x1238>
   11f08:	cmp	r1, r3
   11f0c:	bne	11ec4 <__assert_fail@plt+0xfbc>
   11f10:	mov	r0, #1
   11f14:	bl	11a5c <__assert_fail@plt+0xb54>
   11f18:	bl	11d04 <__assert_fail@plt+0xdfc>
   11f1c:	ldr	r1, [r7, #60]	; 0x3c
   11f20:	b	11ec4 <__assert_fail@plt+0xfbc>
   11f24:	mov	r0, r6
   11f28:	bl	10e90 <__uflow@plt>
   11f2c:	cmn	r0, #1
   11f30:	mov	r5, r0
   11f34:	bne	12124 <__assert_fail@plt+0x121c>
   11f38:	ldr	sl, [fp]
   11f3c:	ldr	r1, [r7, #60]	; 0x3c
   11f40:	ldr	ip, [r7]
   11f44:	ldr	r2, [r7, #24]
   11f48:	ldr	r0, [sp, #12]
   11f4c:	str	ip, [sp]
   11f50:	ldr	r8, [ip]
   11f54:	sub	r1, r1, r8
   11f58:	sub	r9, r1, #1
   11f5c:	add	r3, r1, r2
   11f60:	str	r1, [ip, #4]
   11f64:	add	r4, r8, r9
   11f68:	ldrb	r2, [r8, r9]
   11f6c:	str	r3, [sp, #4]
   11f70:	ldrb	r1, [r8]
   11f74:	str	r3, [r7, #24]
   11f78:	str	r2, [sp, #8]
   11f7c:	bl	10e24 <strchr@plt>
   11f80:	ldr	ip, [sp]
   11f84:	adds	r0, r0, #0
   11f88:	movne	r0, #1
   11f8c:	cmp	r8, r4
   11f90:	ldr	r2, [sp, #8]
   11f94:	ldrb	r1, [ip, #12]
   11f98:	lsl	r2, r2, #1
   11f9c:	ldrh	r3, [sl, r2]
   11fa0:	bfi	r1, r0, #0, #1
   11fa4:	ubfx	r3, r3, #2, #1
   11fa8:	bfi	r1, r3, #2, #1
   11fac:	strb	r1, [ip, #12]
   11fb0:	ldrbcs	sl, [r8, r9]
   11fb4:	bcs	11ff0 <__assert_fail@plt+0x10e8>
   11fb8:	str	r5, [sp, #8]
   11fbc:	ldr	r9, [sp, #20]
   11fc0:	b	11fcc <__assert_fail@plt+0x10c4>
   11fc4:	cmp	r4, r8
   11fc8:	beq	12118 <__assert_fail@plt+0x1210>
   11fcc:	ldrb	sl, [r4]
   11fd0:	mov	r0, r9
   11fd4:	mov	r5, r4
   11fd8:	sub	r4, r4, #1
   11fdc:	mov	r1, sl
   11fe0:	bl	10e24 <strchr@plt>
   11fe4:	cmp	r0, #0
   11fe8:	bne	11fc4 <__assert_fail@plt+0x10bc>
   11fec:	ldr	r5, [sp, #8]
   11ff0:	mov	r1, sl
   11ff4:	ldr	r0, [sp, #16]
   11ff8:	bl	10e24 <strchr@plt>
   11ffc:	ldr	ip, [sp]
   12000:	adds	r2, r0, #0
   12004:	mov	r1, r5
   12008:	movne	r2, #1
   1200c:	mov	r0, r6
   12010:	ldrb	r3, [ip, #12]
   12014:	bfi	r3, r2, #1, #1
   12018:	strb	r3, [ip, #12]
   1201c:	bl	11794 <__assert_fail@plt+0x88c>
   12020:	ldr	r1, [sp, #4]
   12024:	cmn	r0, #1
   12028:	mov	r5, r0
   1202c:	ldr	r2, [r7]
   12030:	ldr	r3, [r7, #24]
   12034:	sub	r3, r3, r1
   12038:	str	r3, [r2, #8]
   1203c:	beq	120e8 <__assert_fail@plt+0x11e0>
   12040:	ldrb	r0, [r2, #12]
   12044:	ands	r1, r0, #2
   12048:	beq	1212c <__assert_fail@plt+0x1224>
   1204c:	sub	r1, r5, #10
   12050:	clz	r1, r1
   12054:	lsr	r1, r1, #5
   12058:	cmp	r3, #1
   1205c:	movle	r3, r1
   12060:	orrgt	r3, r1, #1
   12064:	cmp	r3, #0
   12068:	beq	12134 <__assert_fail@plt+0x122c>
   1206c:	ldrb	r1, [r2, #12]
   12070:	cmp	r5, #10
   12074:	bfi	r1, r3, #3, #1
   12078:	strb	r1, [r2, #12]
   1207c:	beq	120f4 <__assert_fail@plt+0x11ec>
   12080:	ldrb	r3, [r7, #64]	; 0x40
   12084:	cmp	r3, #0
   12088:	bne	120f4 <__assert_fail@plt+0x11ec>
   1208c:	ldr	r3, [pc, #176]	; 12144 <__assert_fail@plt+0x123c>
   12090:	cmp	r2, r3
   12094:	addne	r2, r2, #28
   12098:	strne	r2, [r7]
   1209c:	bne	11eb8 <__assert_fail@plt+0xfb0>
   120a0:	mov	r0, #1
   120a4:	bl	11a5c <__assert_fail@plt+0xb54>
   120a8:	bl	11d04 <__assert_fail@plt+0xdfc>
   120ac:	ldr	r2, [r7]
   120b0:	add	r2, r2, #28
   120b4:	cmp	r5, #10
   120b8:	cmnne	r5, #1
   120bc:	str	r2, [r7]
   120c0:	bne	11eb8 <__assert_fail@plt+0xfb0>
   120c4:	mov	r0, r6
   120c8:	add	sp, sp, #28
   120cc:	ldrd	r4, [sp]
   120d0:	ldrd	r6, [sp, #8]
   120d4:	ldrd	r8, [sp, #16]
   120d8:	ldrd	sl, [sp, #24]
   120dc:	ldr	lr, [sp, #32]
   120e0:	add	sp, sp, #36	; 0x24
   120e4:	b	11830 <__assert_fail@plt+0x928>
   120e8:	ldrb	r3, [r2, #12]
   120ec:	orr	r3, r3, #8
   120f0:	strb	r3, [r2, #12]
   120f4:	ldrb	r3, [r2, #12]
   120f8:	ldr	r1, [pc, #68]	; 12144 <__assert_fail@plt+0x123c>
   120fc:	tst	r3, #8
   12100:	movne	r3, #2
   12104:	moveq	r3, #1
   12108:	cmp	r2, r1
   1210c:	str	r3, [r2, #8]
   12110:	bne	120b0 <__assert_fail@plt+0x11a8>
   12114:	b	120a0 <__assert_fail@plt+0x1198>
   12118:	ldrb	sl, [r5, #-1]
   1211c:	ldr	r5, [sp, #8]
   12120:	b	11ff0 <__assert_fail@plt+0x10e8>
   12124:	ldr	r1, [r7, #60]	; 0x3c
   12128:	b	11ef0 <__assert_fail@plt+0xfe8>
   1212c:	mov	r3, r1
   12130:	b	1206c <__assert_fail@plt+0x1164>
   12134:	bfi	r0, r3, #3, #1
   12138:	strb	r0, [r2, #12]
   1213c:	b	12080 <__assert_fail@plt+0x1178>
   12140:	andeq	r0, r3, ip, lsl #5
   12144:	andeq	lr, r2, ip, asr #29
   12148:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1214c:	movw	r4, #33112	; 0x8158
   12150:	movt	r4, #2
   12154:	strd	r6, [sp, #8]
   12158:	mov	r6, r0
   1215c:	movw	r7, #33100	; 0x814c
   12160:	movt	r7, #2
   12164:	strd	r8, [sp, #16]
   12168:	movw	r8, #61188	; 0xef04
   1216c:	movt	r8, #2
   12170:	strd	sl, [sp, #24]
   12174:	str	lr, [sp, #32]
   12178:	sub	sp, sp, #12
   1217c:	str	r1, [sp, #4]
   12180:	mov	r1, #2
   12184:	bl	12bd0 <__assert_fail@plt+0x1cc8>
   12188:	mov	r3, #0
   1218c:	mov	r0, r6
   12190:	str	r3, [r4, #8]
   12194:	strb	r3, [r4, #28]
   12198:	bl	11830 <__assert_fail@plt+0x928>
   1219c:	mov	r5, r0
   121a0:	str	r0, [r4, #68]	; 0x44
   121a4:	mov	r3, #0
   121a8:	str	r3, [r4, #20]
   121ac:	cmn	r5, #1
   121b0:	cmpne	r5, #10
   121b4:	ldr	r2, [r4, #24]
   121b8:	moveq	fp, #1
   121bc:	movne	fp, #0
   121c0:	ldr	r3, [r4, #36]	; 0x24
   121c4:	beq	1232c <__assert_fail@plt+0x1424>
   121c8:	ldr	r1, [r4, #40]	; 0x28
   121cc:	cmp	r1, r3
   121d0:	bgt	121e4 <__assert_fail@plt+0x12dc>
   121d4:	ldr	r1, [r4, #72]	; 0x48
   121d8:	add	r1, r3, r1
   121dc:	cmp	r1, r2
   121e0:	ble	12484 <__assert_fail@plt+0x157c>
   121e4:	mov	r1, #0
   121e8:	cmp	r2, r3
   121ec:	str	r1, [r4, #48]	; 0x30
   121f0:	ble	12354 <__assert_fail@plt+0x144c>
   121f4:	mov	fp, #1
   121f8:	mov	r0, r3
   121fc:	bl	11940 <__assert_fail@plt+0xa38>
   12200:	ldr	r3, [r4, #24]
   12204:	ldr	sl, [r4, #44]	; 0x2c
   12208:	ldr	r0, [r4, #48]	; 0x30
   1220c:	cmp	r3, r0
   12210:	beq	12270 <__assert_fail@plt+0x1368>
   12214:	ldrb	r1, [sl]
   12218:	cmp	r1, #0
   1221c:	bne	12248 <__assert_fail@plt+0x1340>
   12220:	b	12270 <__assert_fail@plt+0x1368>
   12224:	ldr	r3, [r4, #24]
   12228:	ldr	r0, [r4, #48]	; 0x30
   1222c:	add	r0, r0, #1
   12230:	cmp	r0, r3
   12234:	str	r0, [r4, #48]	; 0x30
   12238:	beq	12270 <__assert_fail@plt+0x1368>
   1223c:	ldrb	r1, [sl, #1]!
   12240:	cmp	r1, #0
   12244:	beq	12270 <__assert_fail@plt+0x1368>
   12248:	ldr	r0, [r7]
   1224c:	ldr	r3, [r0, #20]
   12250:	ldr	r2, [r0, #24]
   12254:	cmp	r3, r2
   12258:	addcc	r2, r3, #1
   1225c:	strcc	r2, [r0, #20]
   12260:	strbcc	r1, [r3]
   12264:	bcc	12224 <__assert_fail@plt+0x131c>
   12268:	bl	10e9c <__overflow@plt>
   1226c:	b	12224 <__assert_fail@plt+0x131c>
   12270:	cmp	fp, #0
   12274:	bne	12380 <__assert_fail@plt+0x1478>
   12278:	cmn	r5, #1
   1227c:	bne	1240c <__assert_fail@plt+0x1504>
   12280:	ldr	r2, [r4, #24]
   12284:	ldr	r1, [r4, #32]
   12288:	ldr	r3, [r4, #36]	; 0x24
   1228c:	add	r3, r3, r1
   12290:	cmp	r3, r2
   12294:	ble	1244c <__assert_fail@plt+0x1544>
   12298:	ldr	r2, [r6]
   1229c:	mvn	r1, #0
   122a0:	movw	r3, #33096	; 0x8148
   122a4:	movt	r3, #2
   122a8:	str	r1, [r4, #68]	; 0x44
   122ac:	ldr	r3, [r3]
   122b0:	tst	r2, #32
   122b4:	beq	12600 <__assert_fail@plt+0x16f8>
   122b8:	cmp	r6, r3
   122bc:	mov	r0, r6
   122c0:	mov	r4, #0
   122c4:	beq	126b4 <__assert_fail@plt+0x17ac>
   122c8:	bl	12c20 <__assert_fail@plt+0x1d18>
   122cc:	movw	r1, #27636	; 0x6bf4
   122d0:	movt	r1, #1
   122d4:	mov	r2, #5
   122d8:	mov	r0, #0
   122dc:	bl	10d4c <dcgettext@plt>
   122e0:	mov	r6, r0
   122e4:	mov	r5, #0
   122e8:	mov	r1, #3
   122ec:	mov	r0, #0
   122f0:	ldr	r2, [sp, #4]
   122f4:	bl	14f1c <__assert_fail@plt+0x4014>
   122f8:	mov	r3, r0
   122fc:	mov	r2, r6
   12300:	mov	r1, r5
   12304:	mov	r0, #0
   12308:	bl	10db8 <error@plt>
   1230c:	mov	r0, r4
   12310:	add	sp, sp, #12
   12314:	ldrd	r4, [sp]
   12318:	ldrd	r6, [sp, #8]
   1231c:	ldrd	r8, [sp, #16]
   12320:	ldrd	sl, [sp, #24]
   12324:	add	sp, sp, #32
   12328:	pop	{pc}		; (ldr pc, [sp], #4)
   1232c:	cmp	r5, #10
   12330:	cmnne	r5, #1
   12334:	mov	r1, #0
   12338:	movne	fp, #1
   1233c:	moveq	fp, #0
   12340:	cmp	r2, r3
   12344:	str	r1, [r4, #48]	; 0x30
   12348:	bgt	121f8 <__assert_fail@plt+0x12f0>
   1234c:	cmp	fp, r1
   12350:	beq	12404 <__assert_fail@plt+0x14fc>
   12354:	mov	r0, r3
   12358:	bl	11940 <__assert_fail@plt+0xa38>
   1235c:	ldr	r3, [r4, #24]
   12360:	ldr	sl, [r4, #44]	; 0x2c
   12364:	ldr	r0, [r4, #48]	; 0x30
   12368:	cmp	r3, r0
   1236c:	beq	1251c <__assert_fail@plt+0x1614>
   12370:	ldrb	r1, [sl]
   12374:	cmp	r1, #0
   12378:	movne	fp, #1
   1237c:	bne	12248 <__assert_fail@plt+0x1340>
   12380:	sub	r0, r3, r0
   12384:	bl	11940 <__assert_fail@plt+0xa38>
   12388:	b	123a8 <__assert_fail@plt+0x14a0>
   1238c:	ldr	r3, [r6, #4]
   12390:	ldr	r2, [r6, #8]
   12394:	cmp	r3, r2
   12398:	bcs	123ec <__assert_fail@plt+0x14e4>
   1239c:	add	r2, r3, #1
   123a0:	str	r2, [r6, #4]
   123a4:	ldrb	r5, [r3]
   123a8:	cmp	r5, #10
   123ac:	cmnne	r5, #1
   123b0:	beq	12404 <__assert_fail@plt+0x14fc>
   123b4:	ldr	r0, [r7]
   123b8:	ldr	r3, [r0, #20]
   123bc:	ldr	r2, [r0, #24]
   123c0:	cmp	r3, r2
   123c4:	addcc	r2, r3, #1
   123c8:	strcc	r2, [r0, #20]
   123cc:	strbcc	r5, [r3]
   123d0:	bcc	1238c <__assert_fail@plt+0x1484>
   123d4:	uxtb	r1, r5
   123d8:	bl	10e9c <__overflow@plt>
   123dc:	ldr	r3, [r6, #4]
   123e0:	ldr	r2, [r6, #8]
   123e4:	cmp	r3, r2
   123e8:	bcc	1239c <__assert_fail@plt+0x1494>
   123ec:	mov	r0, r6
   123f0:	bl	10e90 <__uflow@plt>
   123f4:	mov	r5, r0
   123f8:	cmp	r5, #10
   123fc:	cmnne	r5, #1
   12400:	bne	123b4 <__assert_fail@plt+0x14ac>
   12404:	cmn	r5, #1
   12408:	beq	12298 <__assert_fail@plt+0x1390>
   1240c:	ldr	r0, [r7]
   12410:	ldr	r3, [r0, #20]
   12414:	ldr	r2, [r0, #24]
   12418:	cmp	r3, r2
   1241c:	addcc	r1, r3, #1
   12420:	movcc	r2, #10
   12424:	strcc	r1, [r0, #20]
   12428:	strbcc	r2, [r3]
   1242c:	bcs	12440 <__assert_fail@plt+0x1538>
   12430:	mov	r0, r6
   12434:	bl	11830 <__assert_fail@plt+0x928>
   12438:	mov	r5, r0
   1243c:	b	121ac <__assert_fail@plt+0x12a4>
   12440:	mov	r1, #10
   12444:	bl	10e9c <__overflow@plt>
   12448:	b	12430 <__assert_fail@plt+0x1528>
   1244c:	movw	r3, #33100	; 0x814c
   12450:	movt	r3, #2
   12454:	ldr	r0, [r3]
   12458:	ldr	r3, [r0, #20]
   1245c:	ldr	r2, [r0, #24]
   12460:	cmp	r3, r2
   12464:	addcc	r1, r3, #1
   12468:	movcc	r2, #10
   1246c:	strcc	r1, [r0, #20]
   12470:	strbcc	r2, [r3]
   12474:	bcc	12298 <__assert_fail@plt+0x1390>
   12478:	mov	r1, #10
   1247c:	bl	10e9c <__overflow@plt>
   12480:	b	12298 <__assert_fail@plt+0x1390>
   12484:	movw	sl, #33188	; 0x81a4
   12488:	movt	sl, #2
   1248c:	mov	r1, r5
   12490:	mov	r0, r6
   12494:	str	sl, [r4]
   12498:	str	r2, [r4, #12]
   1249c:	str	r3, [r4, #56]	; 0x38
   124a0:	str	r8, [r4, #60]	; 0x3c
   124a4:	bl	11e60 <__assert_fail@plt+0xf58>
   124a8:	ldr	r5, [r4, #36]	; 0x24
   124ac:	mov	r9, r0
   124b0:	ldr	r3, [r4, #56]	; 0x38
   124b4:	cmp	r5, r3
   124b8:	beq	12524 <__assert_fail@plt+0x161c>
   124bc:	mov	r0, fp
   124c0:	str	r3, [sp]
   124c4:	bl	11a5c <__assert_fail@plt+0xb54>
   124c8:	ldrb	r2, [r4, #52]	; 0x34
   124cc:	cmp	r2, #0
   124d0:	bne	124ec <__assert_fail@plt+0x15e4>
   124d4:	ldrb	r2, [r4, #53]	; 0x35
   124d8:	ldr	r3, [sp]
   124dc:	cmp	r2, #0
   124e0:	beq	1254c <__assert_fail@plt+0x1644>
   124e4:	cmp	r5, r3
   124e8:	beq	12640 <__assert_fail@plt+0x1738>
   124ec:	ldr	r5, [r4]
   124f0:	cmp	r5, sl
   124f4:	bls	12718 <__assert_fail@plt+0x1810>
   124f8:	ldrb	r3, [r5, #-16]
   124fc:	str	r9, [r4, #68]	; 0x44
   12500:	orr	r3, r3, #10
   12504:	strb	r3, [r5, #-16]
   12508:	bl	1159c <__assert_fail@plt+0x694>
   1250c:	mov	r0, r5
   12510:	bl	11ca4 <__assert_fail@plt+0xd9c>
   12514:	ldr	r5, [r4, #68]	; 0x44
   12518:	b	121a4 <__assert_fail@plt+0x129c>
   1251c:	mov	r0, #0
   12520:	b	12384 <__assert_fail@plt+0x147c>
   12524:	ldr	r0, [r4, #24]
   12528:	ldr	r2, [r4, #72]	; 0x48
   1252c:	add	r2, r5, r2
   12530:	cmp	r2, r0
   12534:	bgt	124bc <__assert_fail@plt+0x15b4>
   12538:	cmp	r9, #10
   1253c:	cmnne	r9, #1
   12540:	movne	fp, #1
   12544:	moveq	fp, #0
   12548:	b	124bc <__assert_fail@plt+0x15b4>
   1254c:	ldrb	r2, [r4, #54]	; 0x36
   12550:	cmp	r2, #0
   12554:	beq	125e0 <__assert_fail@plt+0x16d8>
   12558:	cmp	r5, r3
   1255c:	bne	124ec <__assert_fail@plt+0x15e4>
   12560:	ldr	r3, [r4, #24]
   12564:	ldr	r2, [r4, #72]	; 0x48
   12568:	add	r5, r5, r2
   1256c:	cmp	r5, r3
   12570:	bgt	124ec <__assert_fail@plt+0x15e4>
   12574:	cmp	r9, #10
   12578:	cmnne	r9, #1
   1257c:	beq	124ec <__assert_fail@plt+0x15e4>
   12580:	ldr	r2, [r4, #12]
   12584:	cmp	r3, r2
   12588:	bne	125bc <__assert_fail@plt+0x16b4>
   1258c:	b	124ec <__assert_fail@plt+0x15e4>
   12590:	ldr	r2, [r4, #24]
   12594:	ldr	r0, [r4, #72]	; 0x48
   12598:	add	r3, r3, r0
   1259c:	cmp	r3, r2
   125a0:	bgt	124ec <__assert_fail@plt+0x15e4>
   125a4:	cmp	r9, #10
   125a8:	cmnne	r9, #1
   125ac:	beq	124ec <__assert_fail@plt+0x15e4>
   125b0:	ldr	r3, [r4, #8]
   125b4:	cmp	r2, r3
   125b8:	bne	124ec <__assert_fail@plt+0x15e4>
   125bc:	mov	r1, r9
   125c0:	mov	r0, r6
   125c4:	bl	11e60 <__assert_fail@plt+0xf58>
   125c8:	ldr	r3, [r4, #36]	; 0x24
   125cc:	mov	r9, r0
   125d0:	ldr	r2, [r4, #56]	; 0x38
   125d4:	cmp	r3, r2
   125d8:	bne	124ec <__assert_fail@plt+0x15e4>
   125dc:	b	12590 <__assert_fail@plt+0x1688>
   125e0:	cmp	r5, r3
   125e4:	bne	124ec <__assert_fail@plt+0x15e4>
   125e8:	ldr	r2, [r4, #24]
   125ec:	ldr	r3, [r4, #72]	; 0x48
   125f0:	add	r5, r5, r3
   125f4:	cmp	r2, r5
   125f8:	blt	124ec <__assert_fail@plt+0x15e4>
   125fc:	b	126d0 <__assert_fail@plt+0x17c8>
   12600:	cmp	r6, r3
   12604:	mov	r0, r6
   12608:	beq	1270c <__assert_fail@plt+0x1804>
   1260c:	bl	12c20 <__assert_fail@plt+0x1d18>
   12610:	cmp	r0, #0
   12614:	moveq	r4, #1
   12618:	beq	1230c <__assert_fail@plt+0x1404>
   1261c:	bl	10e30 <__errno_location@plt>
   12620:	ldr	r5, [r0]
   12624:	cmp	r5, #0
   12628:	lsr	r4, r5, #31
   1262c:	blt	1230c <__assert_fail@plt+0x1404>
   12630:	movwne	r6, #29380	; 0x72c4
   12634:	movtne	r6, #1
   12638:	bne	122e8 <__assert_fail@plt+0x13e0>
   1263c:	b	122cc <__assert_fail@plt+0x13c4>
   12640:	ldr	r2, [r4, #24]
   12644:	ldr	r3, [r4, #72]	; 0x48
   12648:	add	r5, r5, r3
   1264c:	cmp	r5, r2
   12650:	bgt	124ec <__assert_fail@plt+0x15e4>
   12654:	cmp	r9, #10
   12658:	cmnne	r9, #1
   1265c:	beq	124ec <__assert_fail@plt+0x15e4>
   12660:	b	12690 <__assert_fail@plt+0x1788>
   12664:	ldr	r2, [r4, #24]
   12668:	ldr	r0, [r4, #72]	; 0x48
   1266c:	add	r3, r3, r0
   12670:	cmp	r3, r2
   12674:	bgt	124ec <__assert_fail@plt+0x15e4>
   12678:	cmp	r9, #10
   1267c:	cmnne	r9, #1
   12680:	beq	124ec <__assert_fail@plt+0x15e4>
   12684:	ldr	r3, [r4, #8]
   12688:	cmp	r2, r3
   1268c:	bne	124ec <__assert_fail@plt+0x15e4>
   12690:	mov	r1, r9
   12694:	mov	r0, r6
   12698:	bl	11e60 <__assert_fail@plt+0xf58>
   1269c:	ldr	r3, [r4, #36]	; 0x24
   126a0:	mov	r9, r0
   126a4:	ldr	r2, [r4, #56]	; 0x38
   126a8:	cmp	r3, r2
   126ac:	bne	124ec <__assert_fail@plt+0x15e4>
   126b0:	b	12664 <__assert_fail@plt+0x175c>
   126b4:	bl	10ecc <clearerr_unlocked@plt>
   126b8:	b	122cc <__assert_fail@plt+0x13c4>
   126bc:	ldr	r2, [r4, #24]
   126c0:	ldr	r0, [r4, #72]	; 0x48
   126c4:	add	r3, r3, r0
   126c8:	cmp	r3, r2
   126cc:	bgt	124ec <__assert_fail@plt+0x15e4>
   126d0:	cmp	r9, #10
   126d4:	cmnne	r9, #1
   126d8:	beq	124ec <__assert_fail@plt+0x15e4>
   126dc:	ldr	r3, [r4, #8]
   126e0:	cmp	r2, r3
   126e4:	bne	124ec <__assert_fail@plt+0x15e4>
   126e8:	mov	r1, r9
   126ec:	mov	r0, r6
   126f0:	bl	11e60 <__assert_fail@plt+0xf58>
   126f4:	ldr	r3, [r4, #36]	; 0x24
   126f8:	mov	r9, r0
   126fc:	ldr	r2, [r4, #56]	; 0x38
   12700:	cmp	r3, r2
   12704:	bne	124ec <__assert_fail@plt+0x15e4>
   12708:	b	126bc <__assert_fail@plt+0x17b4>
   1270c:	mov	r4, #1
   12710:	bl	10ecc <clearerr_unlocked@plt>
   12714:	b	1230c <__assert_fail@plt+0x1404>
   12718:	movw	r3, #27352	; 0x6ad8
   1271c:	movt	r3, #1
   12720:	movw	r1, #27604	; 0x6bd4
   12724:	movt	r1, #1
   12728:	movw	r0, #27616	; 0x6be0
   1272c:	movt	r0, #1
   12730:	movw	r2, #623	; 0x26f
   12734:	bl	10f08 <__assert_fail@plt>
   12738:	subs	r4, r0, #0
   1273c:	str	r7, [sp, #-8]!
   12740:	str	lr, [sp, #4]
   12744:	sub	sp, sp, #56	; 0x38
   12748:	beq	12790 <__assert_fail@plt+0x1888>
   1274c:	movw	r3, #33088	; 0x8140
   12750:	movt	r3, #2
   12754:	ldr	r5, [r3]
   12758:	mov	r2, #5
   1275c:	movw	r1, #27652	; 0x6c04
   12760:	movt	r1, #1
   12764:	mov	r0, #0
   12768:	bl	10d4c <dcgettext@plt>
   1276c:	movw	r3, #660	; 0x294
   12770:	movt	r3, #3
   12774:	mov	r2, r0
   12778:	mov	r1, #1
   1277c:	ldr	r3, [r3]
   12780:	mov	r0, r5
   12784:	bl	10e6c <__fprintf_chk@plt>
   12788:	mov	r0, r4
   1278c:	bl	10e0c <exit@plt>
   12790:	mov	r2, #5
   12794:	movw	r1, #27692	; 0x6c2c
   12798:	movt	r1, #1
   1279c:	movw	r5, #33100	; 0x814c
   127a0:	movt	r5, #2
   127a4:	bl	10d4c <dcgettext@plt>
   127a8:	movw	r3, #660	; 0x294
   127ac:	movt	r3, #3
   127b0:	mov	r1, r0
   127b4:	mov	r0, #1
   127b8:	ldr	r2, [r3]
   127bc:	bl	10e54 <__printf_chk@plt>
   127c0:	mov	r2, #5
   127c4:	movw	r1, #27736	; 0x6c58
   127c8:	movt	r1, #1
   127cc:	mov	r0, r4
   127d0:	bl	10d4c <dcgettext@plt>
   127d4:	ldr	r1, [r5]
   127d8:	bl	10cb0 <fputs_unlocked@plt>
   127dc:	mov	r2, #5
   127e0:	movw	r1, #27868	; 0x6cdc
   127e4:	movt	r1, #1
   127e8:	mov	r0, r4
   127ec:	bl	10d4c <dcgettext@plt>
   127f0:	ldr	r1, [r5]
   127f4:	bl	10cb0 <fputs_unlocked@plt>
   127f8:	mov	r2, #5
   127fc:	movw	r1, #27924	; 0x6d14
   12800:	movt	r1, #1
   12804:	mov	r0, r4
   12808:	bl	10d4c <dcgettext@plt>
   1280c:	ldr	r1, [r5]
   12810:	bl	10cb0 <fputs_unlocked@plt>
   12814:	mov	r2, #5
   12818:	movw	r1, #28000	; 0x6d60
   1281c:	movt	r1, #1
   12820:	mov	r0, r4
   12824:	bl	10d4c <dcgettext@plt>
   12828:	ldr	r1, [r5]
   1282c:	bl	10cb0 <fputs_unlocked@plt>
   12830:	mov	r2, #5
   12834:	movw	r1, #28280	; 0x6e78
   12838:	movt	r1, #1
   1283c:	mov	r0, r4
   12840:	bl	10d4c <dcgettext@plt>
   12844:	ldr	r1, [r5]
   12848:	bl	10cb0 <fputs_unlocked@plt>
   1284c:	mov	r2, #5
   12850:	movw	r1, #28568	; 0x6f98
   12854:	movt	r1, #1
   12858:	mov	r0, r4
   1285c:	bl	10d4c <dcgettext@plt>
   12860:	ldr	r1, [r5]
   12864:	bl	10cb0 <fputs_unlocked@plt>
   12868:	mov	r2, #5
   1286c:	movw	r1, #28616	; 0x6fc8
   12870:	movt	r1, #1
   12874:	mov	r0, r4
   12878:	bl	10d4c <dcgettext@plt>
   1287c:	ldr	r1, [r5]
   12880:	bl	10cb0 <fputs_unlocked@plt>
   12884:	movw	r0, #27352	; 0x6ad8
   12888:	movt	r0, #1
   1288c:	ldr	ip, [r0, #16]
   12890:	ldrd	r2, [r0, #24]
   12894:	ldr	r6, [r0, #20]
   12898:	subs	r1, ip, #0
   1289c:	str	ip, [sp]
   128a0:	ldrd	r8, [r0, #32]
   128a4:	strd	r2, [sp, #8]
   128a8:	ldrd	r2, [r0, #40]	; 0x28
   128ac:	str	r6, [sp, #4]
   128b0:	ldrd	r6, [r0, #48]	; 0x30
   128b4:	strd	r8, [sp, #16]
   128b8:	ldrd	r8, [r0, #56]	; 0x38
   128bc:	strd	r2, [sp, #24]
   128c0:	ldrd	r2, [r0, #64]	; 0x40
   128c4:	strd	r6, [sp, #32]
   128c8:	movwne	r7, #27648	; 0x6c00
   128cc:	mov	r6, sp
   128d0:	movtne	r7, #1
   128d4:	strd	r8, [sp, #40]	; 0x28
   128d8:	strd	r2, [sp, #48]	; 0x30
   128dc:	bne	129d4 <__assert_fail@plt+0x1acc>
   128e0:	ldr	r6, [r6, #4]
   128e4:	movw	r1, #28672	; 0x7000
   128e8:	movt	r1, #1
   128ec:	mov	r2, #5
   128f0:	cmp	r6, #0
   128f4:	beq	129e8 <__assert_fail@plt+0x1ae0>
   128f8:	mov	r0, #0
   128fc:	bl	10d4c <dcgettext@plt>
   12900:	mov	r1, r0
   12904:	movw	r3, #28696	; 0x7018
   12908:	movt	r3, #1
   1290c:	movw	r2, #28736	; 0x7040
   12910:	movt	r2, #1
   12914:	mov	r0, #1
   12918:	bl	10e54 <__printf_chk@plt>
   1291c:	mov	r1, #0
   12920:	mov	r0, #5
   12924:	bl	10ea8 <setlocale@plt>
   12928:	cmp	r0, #0
   1292c:	movweq	r7, #27648	; 0x6c00
   12930:	movteq	r7, #1
   12934:	beq	12958 <__assert_fail@plt+0x1a50>
   12938:	movw	r1, #28752	; 0x7050
   1293c:	movt	r1, #1
   12940:	mov	r2, #3
   12944:	movw	r7, #27648	; 0x6c00
   12948:	movt	r7, #1
   1294c:	bl	10ef0 <strncmp@plt>
   12950:	cmp	r0, #0
   12954:	bne	12aa0 <__assert_fail@plt+0x1b98>
   12958:	mov	r2, #5
   1295c:	movw	r1, #28828	; 0x709c
   12960:	movt	r1, #1
   12964:	mov	r0, #0
   12968:	bl	10d4c <dcgettext@plt>
   1296c:	mov	r1, r0
   12970:	movw	r3, #27648	; 0x6c00
   12974:	movt	r3, #1
   12978:	movw	r2, #28696	; 0x7018
   1297c:	movt	r2, #1
   12980:	mov	r0, #1
   12984:	bl	10e54 <__printf_chk@plt>
   12988:	mov	r2, #5
   1298c:	movw	r1, #28856	; 0x70b8
   12990:	movt	r1, #1
   12994:	mov	r0, #0
   12998:	bl	10d4c <dcgettext@plt>
   1299c:	movw	r2, #29152	; 0x71e0
   129a0:	movt	r2, #1
   129a4:	cmp	r6, r7
   129a8:	movw	r3, #27864	; 0x6cd8
   129ac:	movt	r3, #1
   129b0:	mov	r1, r0
   129b4:	moveq	r3, r2
   129b8:	mov	r2, r6
   129bc:	mov	r0, #1
   129c0:	bl	10e54 <__printf_chk@plt>
   129c4:	b	12788 <__assert_fail@plt+0x1880>
   129c8:	ldr	r1, [r6, #8]!
   129cc:	cmp	r1, #0
   129d0:	beq	128e0 <__assert_fail@plt+0x19d8>
   129d4:	mov	r0, r7
   129d8:	bl	10cbc <strcmp@plt>
   129dc:	cmp	r0, #0
   129e0:	bne	129c8 <__assert_fail@plt+0x1ac0>
   129e4:	b	128e0 <__assert_fail@plt+0x19d8>
   129e8:	mov	r0, r6
   129ec:	bl	10d4c <dcgettext@plt>
   129f0:	mov	r1, r0
   129f4:	movw	r3, #28696	; 0x7018
   129f8:	movt	r3, #1
   129fc:	movw	r2, #28736	; 0x7040
   12a00:	movt	r2, #1
   12a04:	mov	r0, #1
   12a08:	bl	10e54 <__printf_chk@plt>
   12a0c:	mov	r1, r6
   12a10:	mov	r0, #5
   12a14:	bl	10ea8 <setlocale@plt>
   12a18:	cmp	r0, #0
   12a1c:	beq	12a38 <__assert_fail@plt+0x1b30>
   12a20:	movw	r1, #28752	; 0x7050
   12a24:	movt	r1, #1
   12a28:	mov	r2, #3
   12a2c:	bl	10ef0 <strncmp@plt>
   12a30:	cmp	r0, #0
   12a34:	bne	12a94 <__assert_fail@plt+0x1b8c>
   12a38:	mov	r2, #5
   12a3c:	movw	r1, #28828	; 0x709c
   12a40:	movt	r1, #1
   12a44:	mov	r0, #0
   12a48:	bl	10d4c <dcgettext@plt>
   12a4c:	mov	r1, r0
   12a50:	movw	r3, #27648	; 0x6c00
   12a54:	movt	r3, #1
   12a58:	movw	r2, #28696	; 0x7018
   12a5c:	movt	r2, #1
   12a60:	mov	r0, #1
   12a64:	bl	10e54 <__printf_chk@plt>
   12a68:	movw	r1, #28856	; 0x70b8
   12a6c:	movt	r1, #1
   12a70:	mov	r2, #5
   12a74:	mov	r0, #0
   12a78:	bl	10d4c <dcgettext@plt>
   12a7c:	movw	r6, #27648	; 0x6c00
   12a80:	movt	r6, #1
   12a84:	movw	r3, #29152	; 0x71e0
   12a88:	movt	r3, #1
   12a8c:	mov	r1, r0
   12a90:	b	129b8 <__assert_fail@plt+0x1ab0>
   12a94:	movw	r7, #27648	; 0x6c00
   12a98:	movt	r7, #1
   12a9c:	mov	r6, r7
   12aa0:	mov	r2, #5
   12aa4:	movw	r1, #28756	; 0x7054
   12aa8:	movt	r1, #1
   12aac:	mov	r0, #0
   12ab0:	bl	10d4c <dcgettext@plt>
   12ab4:	ldr	r1, [r5]
   12ab8:	bl	10cb0 <fputs_unlocked@plt>
   12abc:	b	12958 <__assert_fail@plt+0x1a50>
   12ac0:	movw	r3, #652	; 0x28c
   12ac4:	movt	r3, #3
   12ac8:	str	r0, [r3]
   12acc:	bx	lr
   12ad0:	movw	r3, #652	; 0x28c
   12ad4:	movt	r3, #3
   12ad8:	strb	r0, [r3, #4]
   12adc:	bx	lr
   12ae0:	movw	r3, #33100	; 0x814c
   12ae4:	movt	r3, #2
   12ae8:	strd	r4, [sp, #-16]!
   12aec:	ldr	r0, [r3]
   12af0:	str	r6, [sp, #8]
   12af4:	str	lr, [sp, #12]
   12af8:	sub	sp, sp, #8
   12afc:	bl	16758 <__assert_fail@plt+0x5850>
   12b00:	cmp	r0, #0
   12b04:	beq	12b30 <__assert_fail@plt+0x1c28>
   12b08:	movw	r4, #652	; 0x28c
   12b0c:	movt	r4, #3
   12b10:	ldrb	r6, [r4, #4]
   12b14:	bl	10e30 <__errno_location@plt>
   12b18:	mov	r5, r0
   12b1c:	cmp	r6, #0
   12b20:	beq	12b5c <__assert_fail@plt+0x1c54>
   12b24:	ldr	r3, [r0]
   12b28:	cmp	r3, #32
   12b2c:	bne	12b5c <__assert_fail@plt+0x1c54>
   12b30:	movw	r3, #33088	; 0x8140
   12b34:	movt	r3, #2
   12b38:	ldr	r0, [r3]
   12b3c:	bl	16758 <__assert_fail@plt+0x5850>
   12b40:	cmp	r0, #0
   12b44:	bne	12ba4 <__assert_fail@plt+0x1c9c>
   12b48:	add	sp, sp, #8
   12b4c:	ldrd	r4, [sp]
   12b50:	ldr	r6, [sp, #8]
   12b54:	add	sp, sp, #12
   12b58:	pop	{pc}		; (ldr pc, [sp], #4)
   12b5c:	movw	r1, #29364	; 0x72b4
   12b60:	movt	r1, #1
   12b64:	mov	r2, #5
   12b68:	mov	r0, #0
   12b6c:	bl	10d4c <dcgettext@plt>
   12b70:	mov	r6, r0
   12b74:	ldr	r0, [r4]
   12b78:	cmp	r0, #0
   12b7c:	beq	12bb4 <__assert_fail@plt+0x1cac>
   12b80:	ldr	r4, [r5]
   12b84:	bl	14f08 <__assert_fail@plt+0x4000>
   12b88:	mov	r3, r0
   12b8c:	movw	r2, #29376	; 0x72c0
   12b90:	movt	r2, #1
   12b94:	mov	r0, #0
   12b98:	str	r6, [sp]
   12b9c:	mov	r1, r4
   12ba0:	bl	10db8 <error@plt>
   12ba4:	movw	r3, #33004	; 0x80ec
   12ba8:	movt	r3, #2
   12bac:	ldr	r0, [r3]
   12bb0:	bl	10cf8 <_exit@plt>
   12bb4:	mov	r3, r6
   12bb8:	movw	r2, #29380	; 0x72c4
   12bbc:	movt	r2, #1
   12bc0:	ldr	r1, [r5]
   12bc4:	bl	10db8 <error@plt>
   12bc8:	b	12ba4 <__assert_fail@plt+0x1c9c>
   12bcc:	b	10cc8 <posix_fadvise64@plt>
   12bd0:	cmp	r0, #0
   12bd4:	bxeq	lr
   12bd8:	str	r4, [sp, #-16]!
   12bdc:	mov	r4, r1
   12be0:	strd	r6, [sp, #4]
   12be4:	mov	r6, #0
   12be8:	mov	r7, #0
   12bec:	str	lr, [sp, #12]
   12bf0:	sub	sp, sp, #16
   12bf4:	bl	10e60 <fileno@plt>
   12bf8:	mov	r2, r6
   12bfc:	mov	r3, r7
   12c00:	strd	r6, [sp]
   12c04:	str	r4, [sp, #8]
   12c08:	bl	10cc8 <posix_fadvise64@plt>
   12c0c:	add	sp, sp, #16
   12c10:	ldr	r4, [sp]
   12c14:	ldrd	r6, [sp, #4]
   12c18:	add	sp, sp, #12
   12c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c20:	strd	r4, [sp, #-12]!
   12c24:	mov	r4, r0
   12c28:	str	lr, [sp, #8]
   12c2c:	sub	sp, sp, #12
   12c30:	bl	10e60 <fileno@plt>
   12c34:	cmp	r0, #0
   12c38:	mov	r0, r4
   12c3c:	blt	12cc0 <__assert_fail@plt+0x1db8>
   12c40:	bl	10ddc <__freading@plt>
   12c44:	cmp	r0, #0
   12c48:	bne	12c8c <__assert_fail@plt+0x1d84>
   12c4c:	mov	r0, r4
   12c50:	bl	12cd4 <__assert_fail@plt+0x1dcc>
   12c54:	cmp	r0, #0
   12c58:	beq	12cbc <__assert_fail@plt+0x1db4>
   12c5c:	bl	10e30 <__errno_location@plt>
   12c60:	mov	r5, r0
   12c64:	mov	r0, r4
   12c68:	ldr	r4, [r5]
   12c6c:	bl	10e78 <fclose@plt>
   12c70:	cmp	r4, #0
   12c74:	mvnne	r0, #0
   12c78:	strne	r4, [r5]
   12c7c:	add	sp, sp, #12
   12c80:	ldrd	r4, [sp]
   12c84:	add	sp, sp, #8
   12c88:	pop	{pc}		; (ldr pc, [sp], #4)
   12c8c:	mov	r0, r4
   12c90:	bl	10e60 <fileno@plt>
   12c94:	mov	r1, #1
   12c98:	mov	r2, #0
   12c9c:	mov	r3, #0
   12ca0:	str	r1, [sp]
   12ca4:	bl	10d88 <lseek64@plt>
   12ca8:	mvn	r3, #0
   12cac:	mvn	r2, #0
   12cb0:	cmp	r1, r3
   12cb4:	cmpeq	r0, r2
   12cb8:	bne	12c4c <__assert_fail@plt+0x1d44>
   12cbc:	mov	r0, r4
   12cc0:	add	sp, sp, #12
   12cc4:	ldrd	r4, [sp]
   12cc8:	ldr	lr, [sp, #8]
   12ccc:	add	sp, sp, #12
   12cd0:	b	10e78 <fclose@plt>
   12cd4:	str	r4, [sp, #-8]!
   12cd8:	subs	r4, r0, #0
   12cdc:	str	lr, [sp, #4]
   12ce0:	sub	sp, sp, #8
   12ce4:	beq	12d00 <__assert_fail@plt+0x1df8>
   12ce8:	bl	10ddc <__freading@plt>
   12cec:	cmp	r0, #0
   12cf0:	beq	12d00 <__assert_fail@plt+0x1df8>
   12cf4:	ldr	r3, [r4]
   12cf8:	tst	r3, #256	; 0x100
   12cfc:	bne	12d18 <__assert_fail@plt+0x1e10>
   12d00:	mov	r0, r4
   12d04:	add	sp, sp, #8
   12d08:	ldr	r4, [sp]
   12d0c:	ldr	lr, [sp, #4]
   12d10:	add	sp, sp, #8
   12d14:	b	10cd4 <fflush@plt>
   12d18:	mov	r1, #1
   12d1c:	mov	r2, #0
   12d20:	mov	r3, #0
   12d24:	mov	r0, r4
   12d28:	str	r1, [sp]
   12d2c:	bl	12d34 <__assert_fail@plt+0x1e2c>
   12d30:	b	12d00 <__assert_fail@plt+0x1df8>
   12d34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12d38:	mov	r4, r0
   12d3c:	ldr	ip, [r0, #4]
   12d40:	strd	r6, [sp, #8]
   12d44:	str	lr, [sp, #20]
   12d48:	ldr	lr, [r0, #8]
   12d4c:	str	r8, [sp, #16]
   12d50:	sub	sp, sp, #8
   12d54:	ldr	r5, [sp, #32]
   12d58:	cmp	lr, ip
   12d5c:	beq	12d84 <__assert_fail@plt+0x1e7c>
   12d60:	mov	r0, r4
   12d64:	str	r5, [sp, #32]
   12d68:	add	sp, sp, #8
   12d6c:	ldrd	r4, [sp]
   12d70:	ldrd	r6, [sp, #8]
   12d74:	ldr	r8, [sp, #16]
   12d78:	ldr	lr, [sp, #20]
   12d7c:	add	sp, sp, #24
   12d80:	b	10e84 <fseeko64@plt>
   12d84:	ldr	ip, [r0, #16]
   12d88:	ldr	lr, [r0, #20]
   12d8c:	cmp	lr, ip
   12d90:	bne	12d60 <__assert_fail@plt+0x1e58>
   12d94:	ldr	r8, [r0, #36]	; 0x24
   12d98:	cmp	r8, #0
   12d9c:	bne	12d60 <__assert_fail@plt+0x1e58>
   12da0:	mov	r6, r2
   12da4:	mov	r7, r3
   12da8:	bl	10e60 <fileno@plt>
   12dac:	mov	r2, r6
   12db0:	mov	r3, r7
   12db4:	str	r5, [sp]
   12db8:	bl	10d88 <lseek64@plt>
   12dbc:	mvn	r3, #0
   12dc0:	mvn	r2, #0
   12dc4:	cmp	r1, r3
   12dc8:	cmpeq	r0, r2
   12dcc:	beq	12dfc <__assert_fail@plt+0x1ef4>
   12dd0:	ldr	r3, [r4]
   12dd4:	strd	r0, [r4, #80]	; 0x50
   12dd8:	bic	r3, r3, #16
   12ddc:	str	r3, [r4]
   12de0:	mov	r0, r8
   12de4:	add	sp, sp, #8
   12de8:	ldrd	r4, [sp]
   12dec:	ldrd	r6, [sp, #8]
   12df0:	ldr	r8, [sp, #16]
   12df4:	add	sp, sp, #20
   12df8:	pop	{pc}		; (ldr pc, [sp], #4)
   12dfc:	mvn	r8, #0
   12e00:	b	12de0 <__assert_fail@plt+0x1ed8>
   12e04:	strd	r4, [sp, #-16]!
   12e08:	subs	r4, r0, #0
   12e0c:	str	r6, [sp, #8]
   12e10:	str	lr, [sp, #12]
   12e14:	beq	12eac <__assert_fail@plt+0x1fa4>
   12e18:	mov	r1, #47	; 0x2f
   12e1c:	bl	10eb4 <strrchr@plt>
   12e20:	subs	r5, r0, #0
   12e24:	beq	12e84 <__assert_fail@plt+0x1f7c>
   12e28:	add	r6, r5, #1
   12e2c:	sub	r3, r6, r4
   12e30:	cmp	r3, #6
   12e34:	ble	12e84 <__assert_fail@plt+0x1f7c>
   12e38:	movw	r1, #29440	; 0x7300
   12e3c:	movt	r1, #1
   12e40:	mov	r2, #7
   12e44:	sub	r0, r5, #6
   12e48:	bl	10ef0 <strncmp@plt>
   12e4c:	cmp	r0, #0
   12e50:	bne	12e84 <__assert_fail@plt+0x1f7c>
   12e54:	movw	r1, #29448	; 0x7308
   12e58:	movt	r1, #1
   12e5c:	mov	r2, #3
   12e60:	mov	r0, r6
   12e64:	bl	10ef0 <strncmp@plt>
   12e68:	cmp	r0, #0
   12e6c:	movne	r4, r6
   12e70:	bne	12e84 <__assert_fail@plt+0x1f7c>
   12e74:	add	r4, r5, #4
   12e78:	movw	r3, #33072	; 0x8130
   12e7c:	movt	r3, #2
   12e80:	str	r4, [r3]
   12e84:	movw	r2, #660	; 0x294
   12e88:	movt	r2, #3
   12e8c:	ldr	r6, [sp, #8]
   12e90:	movw	r3, #33076	; 0x8134
   12e94:	movt	r3, #2
   12e98:	str	r4, [r2]
   12e9c:	str	r4, [r3]
   12ea0:	ldrd	r4, [sp]
   12ea4:	add	sp, sp, #12
   12ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   12eac:	movw	r3, #33088	; 0x8140
   12eb0:	movt	r3, #2
   12eb4:	movw	r0, #29384	; 0x72c8
   12eb8:	movt	r0, #1
   12ebc:	ldr	r3, [r3]
   12ec0:	mov	r2, #55	; 0x37
   12ec4:	mov	r1, #1
   12ec8:	bl	10d7c <fwrite@plt>
   12ecc:	bl	10efc <abort@plt>
   12ed0:	strd	r4, [sp, #-16]!
   12ed4:	mov	r4, #0
   12ed8:	mov	r5, #0
   12edc:	cmp	r1, #10
   12ee0:	str	r6, [sp, #8]
   12ee4:	strd	r4, [r0]
   12ee8:	strd	r4, [r0, #8]
   12eec:	str	lr, [sp, #12]
   12ef0:	strd	r4, [r0, #16]
   12ef4:	strd	r4, [r0, #24]
   12ef8:	strd	r4, [r0, #32]
   12efc:	strd	r4, [r0, #40]	; 0x28
   12f00:	beq	12f18 <__assert_fail@plt+0x2010>
   12f04:	ldrd	r4, [sp]
   12f08:	str	r1, [r0]
   12f0c:	ldr	r6, [sp, #8]
   12f10:	add	sp, sp, #12
   12f14:	pop	{pc}		; (ldr pc, [sp], #4)
   12f18:	bl	10efc <abort@plt>
   12f1c:	mov	r2, #5
   12f20:	strd	r4, [sp, #-16]!
   12f24:	mov	r5, r0
   12f28:	str	r6, [sp, #8]
   12f2c:	mov	r6, r1
   12f30:	mov	r1, r0
   12f34:	mov	r0, #0
   12f38:	str	lr, [sp, #12]
   12f3c:	bl	10d4c <dcgettext@plt>
   12f40:	cmp	r5, r0
   12f44:	mov	r4, r0
   12f48:	beq	12f60 <__assert_fail@plt+0x2058>
   12f4c:	mov	r0, r4
   12f50:	ldrd	r4, [sp]
   12f54:	ldr	r6, [sp, #8]
   12f58:	add	sp, sp, #12
   12f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f60:	bl	16840 <__assert_fail@plt+0x5938>
   12f64:	ldrb	r3, [r0]
   12f68:	bic	r3, r3, #32
   12f6c:	cmp	r3, #85	; 0x55
   12f70:	bne	12fd8 <__assert_fail@plt+0x20d0>
   12f74:	ldrb	r3, [r0, #1]
   12f78:	bic	r3, r3, #32
   12f7c:	cmp	r3, #84	; 0x54
   12f80:	bne	13058 <__assert_fail@plt+0x2150>
   12f84:	ldrb	r3, [r0, #2]
   12f88:	bic	r3, r3, #32
   12f8c:	cmp	r3, #70	; 0x46
   12f90:	bne	13058 <__assert_fail@plt+0x2150>
   12f94:	ldrb	r3, [r0, #3]
   12f98:	cmp	r3, #45	; 0x2d
   12f9c:	bne	13058 <__assert_fail@plt+0x2150>
   12fa0:	ldrb	r3, [r0, #4]
   12fa4:	cmp	r3, #56	; 0x38
   12fa8:	bne	13058 <__assert_fail@plt+0x2150>
   12fac:	ldrb	r3, [r0, #5]
   12fb0:	cmp	r3, #0
   12fb4:	bne	13058 <__assert_fail@plt+0x2150>
   12fb8:	ldrb	r2, [r4]
   12fbc:	movw	r3, #29536	; 0x7360
   12fc0:	movt	r3, #1
   12fc4:	movw	r4, #29548	; 0x736c
   12fc8:	movt	r4, #1
   12fcc:	cmp	r2, #96	; 0x60
   12fd0:	movne	r4, r3
   12fd4:	b	12f4c <__assert_fail@plt+0x2044>
   12fd8:	cmp	r3, #71	; 0x47
   12fdc:	bne	13058 <__assert_fail@plt+0x2150>
   12fe0:	ldrb	r3, [r0, #1]
   12fe4:	bic	r3, r3, #32
   12fe8:	cmp	r3, #66	; 0x42
   12fec:	bne	13058 <__assert_fail@plt+0x2150>
   12ff0:	ldrb	r3, [r0, #2]
   12ff4:	cmp	r3, #49	; 0x31
   12ff8:	bne	13058 <__assert_fail@plt+0x2150>
   12ffc:	ldrb	r3, [r0, #3]
   13000:	cmp	r3, #56	; 0x38
   13004:	bne	13058 <__assert_fail@plt+0x2150>
   13008:	ldrb	r3, [r0, #4]
   1300c:	cmp	r3, #48	; 0x30
   13010:	bne	13058 <__assert_fail@plt+0x2150>
   13014:	ldrb	r3, [r0, #5]
   13018:	cmp	r3, #51	; 0x33
   1301c:	bne	13058 <__assert_fail@plt+0x2150>
   13020:	ldrb	r3, [r0, #6]
   13024:	cmp	r3, #48	; 0x30
   13028:	bne	13058 <__assert_fail@plt+0x2150>
   1302c:	ldrb	r3, [r0, #7]
   13030:	cmp	r3, #0
   13034:	bne	13058 <__assert_fail@plt+0x2150>
   13038:	ldrb	r2, [r4]
   1303c:	movw	r3, #29540	; 0x7364
   13040:	movt	r3, #1
   13044:	movw	r4, #29544	; 0x7368
   13048:	movt	r4, #1
   1304c:	cmp	r2, #96	; 0x60
   13050:	movne	r4, r3
   13054:	b	12f4c <__assert_fail@plt+0x2044>
   13058:	movw	r3, #29552	; 0x7370
   1305c:	movt	r3, #1
   13060:	cmp	r6, #9
   13064:	movw	r4, #27588	; 0x6bc4
   13068:	movt	r4, #1
   1306c:	movne	r4, r3
   13070:	b	12f4c <__assert_fail@plt+0x2044>
   13074:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13078:	strd	r6, [sp, #8]
   1307c:	strd	r8, [sp, #16]
   13080:	strd	sl, [sp, #24]
   13084:	mov	fp, r0
   13088:	mov	sl, r1
   1308c:	str	lr, [sp, #32]
   13090:	sub	sp, sp, #116	; 0x74
   13094:	ldr	r8, [sp, #152]	; 0x98
   13098:	str	r3, [sp, #28]
   1309c:	ldr	r3, [sp, #156]	; 0x9c
   130a0:	str	r2, [sp, #32]
   130a4:	and	r4, r3, #2
   130a8:	ubfx	r3, r3, #1, #1
   130ac:	str	r3, [sp, #44]	; 0x2c
   130b0:	bl	10d94 <__ctype_get_mb_cur_max@plt>
   130b4:	str	r0, [sp, #64]	; 0x40
   130b8:	cmp	r8, #10
   130bc:	ldrls	pc, [pc, r8, lsl #2]
   130c0:	b	14830 <__assert_fail@plt+0x3928>
   130c4:	andeq	r3, r1, r8, asr #9
   130c8:	andeq	r3, r1, r4, ror #10
   130cc:	andeq	r3, r1, r0, asr #22
   130d0:	andeq	r3, r1, r4, lsl #11
   130d4:	andeq	r3, r1, ip, lsr #8
   130d8:	andeq	r3, r1, r8, ror r4
   130dc:	strdeq	r3, [r1], -r8
   130e0:	andeq	r3, r1, r4, lsr r5
   130e4:	strdeq	r3, [r1], -r0
   130e8:	strdeq	r3, [r1], -r0
   130ec:	strdeq	r3, [r1], -r0
   130f0:	cmp	r8, #10
   130f4:	beq	13120 <__assert_fail@plt+0x2218>
   130f8:	mov	r1, r8
   130fc:	movw	r0, #29556	; 0x7374
   13100:	movt	r0, #1
   13104:	bl	12f1c <__assert_fail@plt+0x2014>
   13108:	mov	r1, r8
   1310c:	str	r0, [sp, #164]	; 0xa4
   13110:	movw	r0, #29552	; 0x7370
   13114:	movt	r0, #1
   13118:	bl	12f1c <__assert_fail@plt+0x2014>
   1311c:	str	r0, [sp, #168]	; 0xa8
   13120:	cmp	r4, #0
   13124:	movne	r4, #0
   13128:	beq	1450c <__assert_fail@plt+0x3604>
   1312c:	mov	r3, #1
   13130:	mov	r5, #0
   13134:	ldr	r0, [sp, #168]	; 0xa8
   13138:	str	r3, [sp, #36]	; 0x24
   1313c:	str	r3, [sp, #40]	; 0x28
   13140:	str	r5, [sp, #68]	; 0x44
   13144:	bl	10e18 <strlen@plt>
   13148:	ldr	r3, [sp, #168]	; 0xa8
   1314c:	str	r5, [sp, #48]	; 0x30
   13150:	str	r0, [sp, #56]	; 0x38
   13154:	str	r3, [sp, #60]	; 0x3c
   13158:	str	r5, [sp, #72]	; 0x48
   1315c:	str	r8, [sp, #152]	; 0x98
   13160:	mov	r8, fp
   13164:	mov	r9, #0
   13168:	ldr	fp, [sp, #152]	; 0x98
   1316c:	ldr	r3, [sp, #28]
   13170:	cmn	r3, #1
   13174:	beq	136d4 <__assert_fail@plt+0x27cc>
   13178:	ldr	r3, [sp, #28]
   1317c:	subs	r6, r3, r9
   13180:	movne	r6, #1
   13184:	cmp	r6, #0
   13188:	beq	136ec <__assert_fail@plt+0x27e4>
   1318c:	ldr	r0, [sp, #32]
   13190:	ldr	r7, [sp, #40]	; 0x28
   13194:	add	r3, r0, r9
   13198:	cmp	fp, #2
   1319c:	moveq	r7, #0
   131a0:	andne	r7, r7, #1
   131a4:	str	r3, [sp, #52]	; 0x34
   131a8:	cmp	r7, #0
   131ac:	beq	13b88 <__assert_fail@plt+0x2c80>
   131b0:	ldr	r2, [sp, #56]	; 0x38
   131b4:	cmp	r2, #0
   131b8:	beq	13e24 <__assert_fail@plt+0x2f1c>
   131bc:	ldr	r1, [sp, #28]
   131c0:	cmp	r2, #1
   131c4:	mov	r3, r2
   131c8:	movls	r3, #0
   131cc:	movhi	r3, #1
   131d0:	add	r5, r9, r2
   131d4:	cmn	r1, #1
   131d8:	movne	r3, #0
   131dc:	cmp	r3, #0
   131e0:	beq	131ec <__assert_fail@plt+0x22e4>
   131e4:	bl	10e18 <strlen@plt>
   131e8:	str	r0, [sp, #28]
   131ec:	ldr	r3, [sp, #28]
   131f0:	cmp	r5, r3
   131f4:	bhi	13e24 <__assert_fail@plt+0x2f1c>
   131f8:	ldr	r0, [sp, #52]	; 0x34
   131fc:	ldr	r2, [sp, #56]	; 0x38
   13200:	ldr	r1, [sp, #60]	; 0x3c
   13204:	bl	10d34 <memcmp@plt>
   13208:	cmp	r0, #0
   1320c:	bne	13e24 <__assert_fail@plt+0x2f1c>
   13210:	ldr	r3, [sp, #44]	; 0x2c
   13214:	cmp	r3, #0
   13218:	bne	14754 <__assert_fail@plt+0x384c>
   1321c:	ldr	r3, [sp, #52]	; 0x34
   13220:	ldrb	r5, [r3]
   13224:	cmp	r5, #126	; 0x7e
   13228:	ldrls	pc, [pc, r5, lsl #2]
   1322c:	b	13ae4 <__assert_fail@plt+0x2bdc>
   13230:	andeq	r3, r1, r8, ror #19
   13234:	andeq	r3, r1, r4, ror #21
   13238:	andeq	r3, r1, r4, ror #21
   1323c:	andeq	r3, r1, r4, ror #21
   13240:	andeq	r3, r1, r4, ror #21
   13244:	andeq	r3, r1, r4, ror #21
   13248:	andeq	r3, r1, r4, ror #21
   1324c:			; <UNDEFINED> instruction: 0x000139bc
   13250:			; <UNDEFINED> instruction: 0x000139b4
   13254:	strdeq	r3, [r1], -ip
   13258:	andeq	r3, r1, r8, lsr #19
   1325c:	strdeq	r3, [r1], -r4
   13260:	andeq	r3, r1, r4, lsl #19
   13264:	ldrdeq	r3, [r1], -r0
   13268:	andeq	r3, r1, r4, ror #21
   1326c:	andeq	r3, r1, r4, ror #21
   13270:	andeq	r3, r1, r4, ror #21
   13274:	andeq	r3, r1, r4, ror #21
   13278:	andeq	r3, r1, r4, ror #21
   1327c:	andeq	r3, r1, r4, ror #21
   13280:	andeq	r3, r1, r4, ror #21
   13284:	andeq	r3, r1, r4, ror #21
   13288:	andeq	r3, r1, r4, ror #21
   1328c:	andeq	r3, r1, r4, ror #21
   13290:	andeq	r3, r1, r4, ror #21
   13294:	andeq	r3, r1, r4, ror #21
   13298:	andeq	r3, r1, r4, ror #21
   1329c:	andeq	r3, r1, r4, ror #21
   132a0:	andeq	r3, r1, r4, ror #21
   132a4:	andeq	r3, r1, r4, ror #21
   132a8:	andeq	r3, r1, r4, ror #21
   132ac:	andeq	r3, r1, r4, ror #21
   132b0:	andeq	r3, r1, r0, asr #21
   132b4:	andeq	r3, r1, r8, asr #19
   132b8:	andeq	r3, r1, r8, asr #19
   132bc:	andeq	r3, r1, r4, lsr #21
   132c0:	andeq	r3, r1, r8, asr #19
   132c4:	ldrdeq	r3, [r1], -r8
   132c8:	andeq	r3, r1, r8, asr #19
   132cc:	andeq	r3, r1, r4, lsr #16
   132d0:	andeq	r3, r1, r8, asr #19
   132d4:	andeq	r3, r1, r8, asr #19
   132d8:	andeq	r3, r1, r8, asr #19
   132dc:	ldrdeq	r3, [r1], -r8
   132e0:	ldrdeq	r3, [r1], -r8
   132e4:	ldrdeq	r3, [r1], -r8
   132e8:	ldrdeq	r3, [r1], -r8
   132ec:	ldrdeq	r3, [r1], -r8
   132f0:	ldrdeq	r3, [r1], -r8
   132f4:	ldrdeq	r3, [r1], -r8
   132f8:	ldrdeq	r3, [r1], -r8
   132fc:	ldrdeq	r3, [r1], -r8
   13300:	ldrdeq	r3, [r1], -r8
   13304:	ldrdeq	r3, [r1], -r8
   13308:	ldrdeq	r3, [r1], -r8
   1330c:	ldrdeq	r3, [r1], -r8
   13310:	ldrdeq	r3, [r1], -r8
   13314:	ldrdeq	r3, [r1], -r8
   13318:	ldrdeq	r3, [r1], -r8
   1331c:	andeq	r3, r1, r8, asr #19
   13320:	andeq	r3, r1, r8, asr #19
   13324:	andeq	r3, r1, r8, asr #19
   13328:	andeq	r3, r1, r8, asr #19
   1332c:	strdeq	r3, [r1], -r8
   13330:	andeq	r3, r1, r4, ror #21
   13334:	ldrdeq	r3, [r1], -r8
   13338:	ldrdeq	r3, [r1], -r8
   1333c:	ldrdeq	r3, [r1], -r8
   13340:	ldrdeq	r3, [r1], -r8
   13344:	ldrdeq	r3, [r1], -r8
   13348:	ldrdeq	r3, [r1], -r8
   1334c:	ldrdeq	r3, [r1], -r8
   13350:	ldrdeq	r3, [r1], -r8
   13354:	ldrdeq	r3, [r1], -r8
   13358:	ldrdeq	r3, [r1], -r8
   1335c:	ldrdeq	r3, [r1], -r8
   13360:	ldrdeq	r3, [r1], -r8
   13364:	ldrdeq	r3, [r1], -r8
   13368:	ldrdeq	r3, [r1], -r8
   1336c:	ldrdeq	r3, [r1], -r8
   13370:	ldrdeq	r3, [r1], -r8
   13374:	ldrdeq	r3, [r1], -r8
   13378:	ldrdeq	r3, [r1], -r8
   1337c:	ldrdeq	r3, [r1], -r8
   13380:	ldrdeq	r3, [r1], -r8
   13384:	ldrdeq	r3, [r1], -r8
   13388:	ldrdeq	r3, [r1], -r8
   1338c:	ldrdeq	r3, [r1], -r8
   13390:	ldrdeq	r3, [r1], -r8
   13394:	ldrdeq	r3, [r1], -r8
   13398:	ldrdeq	r3, [r1], -r8
   1339c:	andeq	r3, r1, r8, asr #19
   133a0:	andeq	r3, r1, r0, lsr #15
   133a4:	ldrdeq	r3, [r1], -r8
   133a8:	andeq	r3, r1, r8, asr #19
   133ac:	ldrdeq	r3, [r1], -r8
   133b0:	andeq	r3, r1, r8, asr #19
   133b4:	ldrdeq	r3, [r1], -r8
   133b8:	ldrdeq	r3, [r1], -r8
   133bc:	ldrdeq	r3, [r1], -r8
   133c0:	ldrdeq	r3, [r1], -r8
   133c4:	ldrdeq	r3, [r1], -r8
   133c8:	ldrdeq	r3, [r1], -r8
   133cc:	ldrdeq	r3, [r1], -r8
   133d0:	ldrdeq	r3, [r1], -r8
   133d4:	ldrdeq	r3, [r1], -r8
   133d8:	ldrdeq	r3, [r1], -r8
   133dc:	ldrdeq	r3, [r1], -r8
   133e0:	ldrdeq	r3, [r1], -r8
   133e4:	ldrdeq	r3, [r1], -r8
   133e8:	ldrdeq	r3, [r1], -r8
   133ec:	ldrdeq	r3, [r1], -r8
   133f0:	ldrdeq	r3, [r1], -r8
   133f4:	ldrdeq	r3, [r1], -r8
   133f8:	ldrdeq	r3, [r1], -r8
   133fc:	ldrdeq	r3, [r1], -r8
   13400:	ldrdeq	r3, [r1], -r8
   13404:	ldrdeq	r3, [r1], -r8
   13408:	ldrdeq	r3, [r1], -r8
   1340c:	ldrdeq	r3, [r1], -r8
   13410:	ldrdeq	r3, [r1], -r8
   13414:	ldrdeq	r3, [r1], -r8
   13418:	ldrdeq	r3, [r1], -r8
   1341c:	andeq	r3, r1, r4, asr #11
   13420:	andeq	r3, r1, r8, asr #19
   13424:	andeq	r3, r1, r4, asr #11
   13428:	andeq	r3, r1, r4, lsr #21
   1342c:	cmp	r4, #0
   13430:	moveq	r3, #1
   13434:	streq	r3, [sp, #40]	; 0x28
   13438:	beq	13b4c <__assert_fail@plt+0x2c44>
   1343c:	mov	r3, #0
   13440:	mov	r2, #1
   13444:	mov	r4, r3
   13448:	str	r2, [sp, #36]	; 0x24
   1344c:	str	r2, [sp, #44]	; 0x2c
   13450:	str	r2, [sp, #56]	; 0x38
   13454:	str	r3, [sp, #68]	; 0x44
   13458:	movw	r3, #29552	; 0x7370
   1345c:	movt	r3, #1
   13460:	str	r4, [sp, #40]	; 0x28
   13464:	mov	r8, #2
   13468:	str	r4, [sp, #48]	; 0x30
   1346c:	str	r3, [sp, #60]	; 0x3c
   13470:	str	r4, [sp, #72]	; 0x48
   13474:	b	1315c <__assert_fail@plt+0x2254>
   13478:	cmp	r4, #0
   1347c:	bne	146c8 <__assert_fail@plt+0x37c0>
   13480:	cmp	sl, #0
   13484:	beq	14488 <__assert_fail@plt+0x3580>
   13488:	mov	r3, #34	; 0x22
   1348c:	mov	r1, r4
   13490:	mov	r2, #1
   13494:	strb	r3, [fp]
   13498:	movw	r3, #27588	; 0x6bc4
   1349c:	movt	r3, #1
   134a0:	mov	r4, r2
   134a4:	str	r2, [sp, #36]	; 0x24
   134a8:	str	r2, [sp, #40]	; 0x28
   134ac:	str	r1, [sp, #44]	; 0x2c
   134b0:	str	r1, [sp, #48]	; 0x30
   134b4:	str	r2, [sp, #56]	; 0x38
   134b8:	str	r3, [sp, #60]	; 0x3c
   134bc:	str	r1, [sp, #68]	; 0x44
   134c0:	str	r1, [sp, #72]	; 0x48
   134c4:	b	1315c <__assert_fail@plt+0x2254>
   134c8:	mov	r3, #0
   134cc:	mov	r4, r8
   134d0:	str	r3, [sp, #40]	; 0x28
   134d4:	str	r3, [sp, #44]	; 0x2c
   134d8:	str	r3, [sp, #48]	; 0x30
   134dc:	str	r8, [sp, #56]	; 0x38
   134e0:	str	r3, [sp, #60]	; 0x3c
   134e4:	str	r3, [sp, #68]	; 0x44
   134e8:	mov	r3, #1
   134ec:	str	r3, [sp, #36]	; 0x24
   134f0:	str	r8, [sp, #72]	; 0x48
   134f4:	b	1315c <__assert_fail@plt+0x2254>
   134f8:	mov	r3, #1
   134fc:	mov	r2, #0
   13500:	mov	r4, r2
   13504:	mov	r8, #5
   13508:	str	r3, [sp, #36]	; 0x24
   1350c:	str	r3, [sp, #40]	; 0x28
   13510:	str	r3, [sp, #44]	; 0x2c
   13514:	str	r2, [sp, #48]	; 0x30
   13518:	str	r3, [sp, #56]	; 0x38
   1351c:	movw	r3, #27588	; 0x6bc4
   13520:	movt	r3, #1
   13524:	str	r3, [sp, #60]	; 0x3c
   13528:	str	r2, [sp, #68]	; 0x44
   1352c:	str	r2, [sp, #72]	; 0x48
   13530:	b	1315c <__assert_fail@plt+0x2254>
   13534:	mov	r3, #0
   13538:	mov	r2, #1
   1353c:	mov	r4, r3
   13540:	str	r2, [sp, #36]	; 0x24
   13544:	str	r2, [sp, #40]	; 0x28
   13548:	str	r3, [sp, #44]	; 0x2c
   1354c:	str	r3, [sp, #48]	; 0x30
   13550:	str	r3, [sp, #56]	; 0x38
   13554:	str	r3, [sp, #60]	; 0x3c
   13558:	str	r3, [sp, #68]	; 0x44
   1355c:	str	r3, [sp, #72]	; 0x48
   13560:	b	1315c <__assert_fail@plt+0x2254>
   13564:	mov	r2, #1
   13568:	mov	r3, #0
   1356c:	mov	r4, r3
   13570:	str	r2, [sp, #36]	; 0x24
   13574:	str	r2, [sp, #44]	; 0x2c
   13578:	str	r8, [sp, #56]	; 0x38
   1357c:	str	r3, [sp, #68]	; 0x44
   13580:	b	13458 <__assert_fail@plt+0x2550>
   13584:	mov	r3, #1
   13588:	mov	r2, #0
   1358c:	mov	r4, r2
   13590:	mov	r8, #2
   13594:	str	r3, [sp, #36]	; 0x24
   13598:	str	r3, [sp, #40]	; 0x28
   1359c:	str	r3, [sp, #44]	; 0x2c
   135a0:	str	r2, [sp, #48]	; 0x30
   135a4:	str	r3, [sp, #56]	; 0x38
   135a8:	movw	r3, #29552	; 0x7370
   135ac:	movt	r3, #1
   135b0:	str	r3, [sp, #60]	; 0x3c
   135b4:	str	r2, [sp, #68]	; 0x44
   135b8:	str	r2, [sp, #72]	; 0x48
   135bc:	b	1315c <__assert_fail@plt+0x2254>
   135c0:	mov	r7, #0
   135c4:	ldr	r3, [sp, #28]
   135c8:	cmn	r3, #1
   135cc:	beq	140a4 <__assert_fail@plt+0x319c>
   135d0:	ldr	r3, [sp, #28]
   135d4:	subs	r2, r3, #1
   135d8:	movne	r2, #1
   135dc:	sub	r3, fp, #2
   135e0:	cmp	r2, #0
   135e4:	clz	r3, r3
   135e8:	lsr	r3, r3, #5
   135ec:	bne	135f8 <__assert_fail@plt+0x26f0>
   135f0:	cmp	r9, #0
   135f4:	beq	13e04 <__assert_fail@plt+0x2efc>
   135f8:	mov	r6, #0
   135fc:	ldr	r2, [sp, #40]	; 0x28
   13600:	eor	r2, r2, #1
   13604:	orrs	r3, r3, r2
   13608:	bne	137e0 <__assert_fail@plt+0x28d8>
   1360c:	ldr	r2, [sp, #160]	; 0xa0
   13610:	cmp	r2, #0
   13614:	beq	13634 <__assert_fail@plt+0x272c>
   13618:	ldr	r0, [sp, #160]	; 0xa0
   1361c:	ubfx	r1, r5, #5, #8
   13620:	and	r2, r5, #31
   13624:	ldr	r1, [r0, r1, lsl #2]
   13628:	lsr	r2, r1, r2
   1362c:	tst	r2, #1
   13630:	bne	1363c <__assert_fail@plt+0x2734>
   13634:	cmp	r7, #0
   13638:	beq	138ac <__assert_fail@plt+0x29a4>
   1363c:	ldr	r2, [sp, #44]	; 0x2c
   13640:	sub	r3, fp, #2
   13644:	clz	r3, r3
   13648:	lsr	r3, r3, #5
   1364c:	cmp	r2, #0
   13650:	bne	143f8 <__assert_fail@plt+0x34f0>
   13654:	ldr	r2, [sp, #48]	; 0x30
   13658:	eor	r2, r2, #1
   1365c:	ands	r3, r3, r2
   13660:	beq	13698 <__assert_fail@plt+0x2790>
   13664:	cmp	sl, r4
   13668:	str	r3, [sp, #48]	; 0x30
   1366c:	movhi	r2, #39	; 0x27
   13670:	strbhi	r2, [r8, r4]
   13674:	add	r2, r4, #1
   13678:	cmp	sl, r2
   1367c:	movhi	r1, #36	; 0x24
   13680:	strbhi	r1, [r8, r2]
   13684:	add	r2, r4, #2
   13688:	add	r4, r4, #3
   1368c:	cmp	sl, r2
   13690:	movhi	r1, #39	; 0x27
   13694:	strbhi	r1, [r8, r2]
   13698:	cmp	r4, sl
   1369c:	add	r9, r9, #1
   136a0:	movcc	r3, #92	; 0x5c
   136a4:	strbcc	r3, [r8, r4]
   136a8:	add	r4, r4, #1
   136ac:	cmp	r4, sl
   136b0:	ldr	r3, [sp, #36]	; 0x24
   136b4:	strbcc	r5, [r8, r4]
   136b8:	cmp	r6, #0
   136bc:	add	r4, r4, #1
   136c0:	moveq	r3, #0
   136c4:	str	r3, [sp, #36]	; 0x24
   136c8:	ldr	r3, [sp, #28]
   136cc:	cmn	r3, #1
   136d0:	bne	13178 <__assert_fail@plt+0x2270>
   136d4:	ldr	r3, [sp, #32]
   136d8:	ldrb	r6, [r3, r9]
   136dc:	adds	r6, r6, #0
   136e0:	movne	r6, #1
   136e4:	cmp	r6, #0
   136e8:	bne	1318c <__assert_fail@plt+0x2284>
   136ec:	str	fp, [sp, #152]	; 0x98
   136f0:	mov	fp, r8
   136f4:	cmp	r4, #0
   136f8:	ldr	r1, [sp, #44]	; 0x2c
   136fc:	movne	r3, #0
   13700:	ldr	r8, [sp, #152]	; 0x98
   13704:	sub	r2, r8, #2
   13708:	clz	r2, r2
   1370c:	lsr	r2, r2, #5
   13710:	andeq	r3, r2, r1
   13714:	cmp	r3, #0
   13718:	bne	147d4 <__assert_fail@plt+0x38cc>
   1371c:	eor	r3, r1, #1
   13720:	ands	r2, r2, r3
   13724:	beq	14700 <__assert_fail@plt+0x37f8>
   13728:	ldr	r3, [sp, #68]	; 0x44
   1372c:	cmp	r3, #0
   13730:	beq	14704 <__assert_fail@plt+0x37fc>
   13734:	ldr	r3, [sp, #36]	; 0x24
   13738:	cmp	r3, #0
   1373c:	bne	14790 <__assert_fail@plt+0x3888>
   13740:	ldr	r3, [sp, #72]	; 0x48
   13744:	adds	r3, r3, #0
   13748:	movne	r3, #1
   1374c:	cmp	sl, #0
   13750:	movne	r3, #0
   13754:	cmp	r3, #0
   13758:	ldreq	r2, [sp, #68]	; 0x44
   1375c:	beq	14704 <__assert_fail@plt+0x37fc>
   13760:	ldr	r2, [sp, #72]	; 0x48
   13764:	str	r3, [sp, #68]	; 0x44
   13768:	movw	r3, #29552	; 0x7370
   1376c:	movt	r3, #1
   13770:	mov	r1, #39	; 0x27
   13774:	mov	r4, #1
   13778:	ldr	sl, [sp, #72]	; 0x48
   1377c:	mov	r8, #2
   13780:	str	r3, [sp, #60]	; 0x3c
   13784:	mov	r3, #0
   13788:	strb	r1, [fp]
   1378c:	str	r3, [sp, #44]	; 0x2c
   13790:	str	r4, [sp, #56]	; 0x38
   13794:	str	r2, [sp, #72]	; 0x48
   13798:	b	1315c <__assert_fail@plt+0x2254>
   1379c:	mov	r7, #0
   137a0:	cmp	fp, #2
   137a4:	beq	14084 <__assert_fail@plt+0x317c>
   137a8:	ldr	r2, [sp, #40]	; 0x28
   137ac:	ldr	r3, [sp, #56]	; 0x38
   137b0:	ldr	r1, [sp, #44]	; 0x2c
   137b4:	cmp	r3, #0
   137b8:	moveq	r3, #0
   137bc:	andne	r3, r2, r1
   137c0:	cmp	r3, #0
   137c4:	moveq	r5, #92	; 0x5c
   137c8:	moveq	r3, r5
   137cc:	bne	14090 <__assert_fail@plt+0x3188>
   137d0:	ldr	r2, [sp, #40]	; 0x28
   137d4:	cmp	r2, #0
   137d8:	bne	144cc <__assert_fail@plt+0x35c4>
   137dc:	mov	r6, #0
   137e0:	ldr	r3, [sp, #44]	; 0x2c
   137e4:	cmp	r3, #0
   137e8:	beq	1407c <__assert_fail@plt+0x3174>
   137ec:	mov	r3, #0
   137f0:	b	1360c <__assert_fail@plt+0x2704>
   137f4:	mov	r7, #0
   137f8:	cmp	fp, #2
   137fc:	beq	140f4 <__assert_fail@plt+0x31ec>
   13800:	cmp	fp, #5
   13804:	beq	140b8 <__assert_fail@plt+0x31b0>
   13808:	sub	r3, fp, #2
   1380c:	mov	r6, #0
   13810:	clz	r3, r3
   13814:	mov	r5, #63	; 0x3f
   13818:	lsr	r3, r3, #5
   1381c:	b	135fc <__assert_fail@plt+0x26f4>
   13820:	mov	r7, #0
   13824:	cmp	fp, #2
   13828:	movne	r3, #0
   1382c:	movne	r5, #39	; 0x27
   13830:	strne	r6, [sp, #68]	; 0x44
   13834:	bne	135fc <__assert_fail@plt+0x26f4>
   13838:	ldr	r3, [sp, #44]	; 0x2c
   1383c:	cmp	r3, #0
   13840:	bne	144fc <__assert_fail@plt+0x35f4>
   13844:	ldr	r3, [sp, #72]	; 0x48
   13848:	cmp	sl, #0
   1384c:	clz	r3, r3
   13850:	lsr	r3, r3, #5
   13854:	moveq	r3, #0
   13858:	cmp	r3, #0
   1385c:	bne	14428 <__assert_fail@plt+0x3520>
   13860:	cmp	sl, r4
   13864:	movhi	r3, #39	; 0x27
   13868:	strbhi	r3, [r8, r4]
   1386c:	add	r3, r4, #1
   13870:	cmp	sl, r3
   13874:	movhi	r2, #92	; 0x5c
   13878:	strbhi	r2, [r8, r3]
   1387c:	add	r3, r4, #2
   13880:	cmp	sl, r3
   13884:	bls	13890 <__assert_fail@plt+0x2988>
   13888:	mov	r2, #39	; 0x27
   1388c:	strb	r2, [r8, r3]
   13890:	mov	r3, #0
   13894:	cmp	r7, #0
   13898:	add	r4, r4, #3
   1389c:	mov	r5, #39	; 0x27
   138a0:	str	r3, [sp, #48]	; 0x30
   138a4:	str	r6, [sp, #68]	; 0x44
   138a8:	bne	1363c <__assert_fail@plt+0x2734>
   138ac:	ldr	r2, [sp, #48]	; 0x30
   138b0:	eor	r3, r3, #1
   138b4:	add	r9, r9, #1
   138b8:	and	r3, r3, r2
   138bc:	uxtb	r3, r3
   138c0:	cmp	r3, #0
   138c4:	beq	136ac <__assert_fail@plt+0x27a4>
   138c8:	cmp	sl, r4
   138cc:	movhi	r3, #39	; 0x27
   138d0:	strbhi	r3, [r8, r4]
   138d4:	add	r3, r4, #1
   138d8:	add	r4, r4, #2
   138dc:	cmp	sl, r3
   138e0:	movhi	r2, #39	; 0x27
   138e4:	strbhi	r2, [r8, r3]
   138e8:	mov	r3, #0
   138ec:	str	r3, [sp, #48]	; 0x30
   138f0:	b	136ac <__assert_fail@plt+0x27a4>
   138f4:	mov	r3, #118	; 0x76
   138f8:	b	137d0 <__assert_fail@plt+0x28c8>
   138fc:	mov	r3, #116	; 0x74
   13900:	ldr	r2, [sp, #44]	; 0x2c
   13904:	cmp	fp, #2
   13908:	movne	r2, #0
   1390c:	andeq	r2, r2, #1
   13910:	cmp	r2, #0
   13914:	beq	137d0 <__assert_fail@plt+0x28c8>
   13918:	mov	fp, r8
   1391c:	mov	r8, #2
   13920:	ldr	r3, [sp, #40]	; 0x28
   13924:	cmp	r3, #0
   13928:	movne	r8, #4
   1392c:	mov	lr, #0
   13930:	mov	r0, fp
   13934:	ldr	r2, [sp, #32]
   13938:	ldr	r3, [sp, #156]	; 0x9c
   1393c:	ldr	r1, [sp, #164]	; 0xa4
   13940:	bic	ip, r3, #2
   13944:	ldr	r3, [sp, #28]
   13948:	stm	sp, {r8, ip, lr}
   1394c:	ldr	ip, [sp, #168]	; 0xa8
   13950:	str	r1, [sp, #12]
   13954:	mov	r1, sl
   13958:	str	ip, [sp, #16]
   1395c:	bl	13074 <__assert_fail@plt+0x216c>
   13960:	mov	r4, r0
   13964:	mov	r0, r4
   13968:	add	sp, sp, #116	; 0x74
   1396c:	ldrd	r4, [sp]
   13970:	ldrd	r6, [sp, #8]
   13974:	ldrd	r8, [sp, #16]
   13978:	ldrd	sl, [sp, #24]
   1397c:	add	sp, sp, #32
   13980:	pop	{pc}		; (ldr pc, [sp], #4)
   13984:	mov	r5, #102	; 0x66
   13988:	ldr	r2, [sp, #44]	; 0x2c
   1398c:	sub	r3, fp, #2
   13990:	clz	r3, r3
   13994:	lsr	r3, r3, #5
   13998:	cmp	r2, #0
   1399c:	bne	143f8 <__assert_fail@plt+0x34f0>
   139a0:	mov	r6, r2
   139a4:	b	13698 <__assert_fail@plt+0x2790>
   139a8:	mov	r5, #110	; 0x6e
   139ac:	mov	r6, #0
   139b0:	b	1363c <__assert_fail@plt+0x2734>
   139b4:	mov	r5, #98	; 0x62
   139b8:	b	13988 <__assert_fail@plt+0x2a80>
   139bc:	mov	r5, #97	; 0x61
   139c0:	b	13988 <__assert_fail@plt+0x2a80>
   139c4:	mov	r7, #0
   139c8:	mov	r6, #0
   139cc:	b	137ec <__assert_fail@plt+0x28e4>
   139d0:	mov	r5, #114	; 0x72
   139d4:	b	139ac <__assert_fail@plt+0x2aa4>
   139d8:	ldr	r3, [sp, #44]	; 0x2c
   139dc:	cmp	r3, #0
   139e0:	bne	14770 <__assert_fail@plt+0x3868>
   139e4:	mov	r7, r3
   139e8:	ldr	r3, [sp, #48]	; 0x30
   139ec:	sub	r2, fp, #2
   139f0:	clz	r2, r2
   139f4:	lsr	r2, r2, #5
   139f8:	eor	r3, r3, #1
   139fc:	ands	r3, r2, r3
   13a00:	beq	14414 <__assert_fail@plt+0x350c>
   13a04:	cmp	sl, r4
   13a08:	movhi	r1, #39	; 0x27
   13a0c:	strbhi	r1, [r8, r4]
   13a10:	add	r1, r4, #1
   13a14:	cmp	sl, r1
   13a18:	movhi	r0, #36	; 0x24
   13a1c:	strbhi	r0, [r8, r1]
   13a20:	add	r1, r4, #2
   13a24:	cmp	sl, r1
   13a28:	movhi	r0, #39	; 0x27
   13a2c:	strbhi	r0, [r8, r1]
   13a30:	add	r1, r4, #3
   13a34:	cmp	sl, r1
   13a38:	bls	1446c <__assert_fail@plt+0x3564>
   13a3c:	mov	r4, r1
   13a40:	mov	r1, #92	; 0x5c
   13a44:	mov	r0, r4
   13a48:	str	r3, [sp, #48]	; 0x30
   13a4c:	strb	r1, [r8, r4]
   13a50:	cmp	fp, #2
   13a54:	add	r4, r4, #1
   13a58:	beq	144bc <__assert_fail@plt+0x35b4>
   13a5c:	ldr	r1, [sp, #28]
   13a60:	add	r3, r9, #1
   13a64:	cmp	r3, r1
   13a68:	bcs	13a80 <__assert_fail@plt+0x2b78>
   13a6c:	ldr	r1, [sp, #32]
   13a70:	ldrb	r3, [r1, r3]
   13a74:	sub	r3, r3, #48	; 0x30
   13a78:	cmp	r3, #9
   13a7c:	bls	144d4 <__assert_fail@plt+0x35cc>
   13a80:	mov	r5, #48	; 0x30
   13a84:	ldr	r3, [sp, #40]	; 0x28
   13a88:	eor	r3, r3, #1
   13a8c:	orrs	r2, r2, r3
   13a90:	mov	r3, r6
   13a94:	moveq	r6, r2
   13a98:	beq	1360c <__assert_fail@plt+0x2704>
   13a9c:	mov	r6, #0
   13aa0:	b	13634 <__assert_fail@plt+0x272c>
   13aa4:	cmp	r9, #0
   13aa8:	mov	r2, r7
   13aac:	bne	1404c <__assert_fail@plt+0x3144>
   13ab0:	mov	r6, r7
   13ab4:	mov	r3, r9
   13ab8:	mov	r7, r2
   13abc:	b	135fc <__assert_fail@plt+0x26f4>
   13ac0:	mov	r2, r7
   13ac4:	mov	r6, r7
   13ac8:	mov	r3, #0
   13acc:	mov	r7, r2
   13ad0:	mov	r5, #32
   13ad4:	b	135fc <__assert_fail@plt+0x26f4>
   13ad8:	mov	r6, r7
   13adc:	b	137ec <__assert_fail@plt+0x28e4>
   13ae0:	mov	r7, #0
   13ae4:	ldr	r3, [sp, #64]	; 0x40
   13ae8:	cmp	r3, #1
   13aec:	bne	1410c <__assert_fail@plt+0x3204>
   13af0:	bl	10e00 <__ctype_b_loc@plt>
   13af4:	ldr	r2, [r0]
   13af8:	sxth	r3, r5
   13afc:	lsl	r3, r3, #1
   13b00:	ldr	r1, [sp, #64]	; 0x40
   13b04:	ldrh	r3, [r2, r3]
   13b08:	mov	ip, r1
   13b0c:	and	r3, r3, #16384	; 0x4000
   13b10:	cmp	r3, #0
   13b14:	ldr	r3, [sp, #40]	; 0x28
   13b18:	movne	r6, #1
   13b1c:	moveq	r6, #0
   13b20:	movne	r2, #0
   13b24:	andeq	r2, r3, #1
   13b28:	cmp	r2, #0
   13b2c:	bne	14454 <__assert_fail@plt+0x354c>
   13b30:	sub	r3, fp, #2
   13b34:	clz	r3, r3
   13b38:	lsr	r3, r3, #5
   13b3c:	b	135fc <__assert_fail@plt+0x26f4>
   13b40:	cmp	r4, #0
   13b44:	bne	147e4 <__assert_fail@plt+0x38dc>
   13b48:	str	r4, [sp, #40]	; 0x28
   13b4c:	cmp	sl, #0
   13b50:	bne	14814 <__assert_fail@plt+0x390c>
   13b54:	mov	r3, #1
   13b58:	movw	r2, #29552	; 0x7370
   13b5c:	movt	r2, #1
   13b60:	mov	r4, r3
   13b64:	mov	r8, #2
   13b68:	str	r3, [sp, #36]	; 0x24
   13b6c:	str	sl, [sp, #44]	; 0x2c
   13b70:	str	sl, [sp, #48]	; 0x30
   13b74:	str	r3, [sp, #56]	; 0x38
   13b78:	str	r2, [sp, #60]	; 0x3c
   13b7c:	str	sl, [sp, #68]	; 0x44
   13b80:	str	sl, [sp, #72]	; 0x48
   13b84:	b	1315c <__assert_fail@plt+0x2254>
   13b88:	ldr	r3, [sp, #32]
   13b8c:	ldrb	r5, [r3, r9]
   13b90:	cmp	r5, #126	; 0x7e
   13b94:	ldrls	pc, [pc, r5, lsl #2]
   13b98:	b	13ae4 <__assert_fail@plt+0x2bdc>
   13b9c:	andeq	r3, r1, r0, asr #27
   13ba0:	andeq	r3, r1, r4, ror #21
   13ba4:	andeq	r3, r1, r4, ror #21
   13ba8:	andeq	r3, r1, r4, ror #21
   13bac:	andeq	r3, r1, r4, ror #21
   13bb0:	andeq	r3, r1, r4, ror #21
   13bb4:	andeq	r3, r1, r4, ror #21
   13bb8:			; <UNDEFINED> instruction: 0x00013db8
   13bbc:			; <UNDEFINED> instruction: 0x00013db0
   13bc0:	strdeq	r3, [r1], -ip
   13bc4:	andeq	r3, r1, r8, lsr #27
   13bc8:	strdeq	r3, [r1], -r4
   13bcc:	andeq	r3, r1, r0, lsr #27
   13bd0:	muleq	r1, r8, sp
   13bd4:	andeq	r3, r1, r4, ror #21
   13bd8:	andeq	r3, r1, r4, ror #21
   13bdc:	andeq	r3, r1, r4, ror #21
   13be0:	andeq	r3, r1, r4, ror #21
   13be4:	andeq	r3, r1, r4, ror #21
   13be8:	andeq	r3, r1, r4, ror #21
   13bec:	andeq	r3, r1, r4, ror #21
   13bf0:	andeq	r3, r1, r4, ror #21
   13bf4:	andeq	r3, r1, r4, ror #21
   13bf8:	andeq	r3, r1, r4, ror #21
   13bfc:	andeq	r3, r1, r4, ror #21
   13c00:	andeq	r3, r1, r4, ror #21
   13c04:	andeq	r3, r1, r4, ror #21
   13c08:	andeq	r3, r1, r4, ror #21
   13c0c:	andeq	r3, r1, r4, ror #21
   13c10:	andeq	r3, r1, r4, ror #21
   13c14:	andeq	r3, r1, r4, ror #21
   13c18:	andeq	r3, r1, r4, ror #21
   13c1c:	andeq	r3, r1, r4, lsl lr
   13c20:	strdeq	r3, [r1], -r4
   13c24:	strdeq	r3, [r1], -r4
   13c28:	andeq	r3, r1, r4, ror #27
   13c2c:	strdeq	r3, [r1], -r4
   13c30:	andeq	r3, r1, r0, lsr fp
   13c34:	strdeq	r3, [r1], -r4
   13c38:	andeq	r3, r1, r4, lsr #16
   13c3c:	strdeq	r3, [r1], -r4
   13c40:	strdeq	r3, [r1], -r4
   13c44:	strdeq	r3, [r1], -r4
   13c48:	andeq	r3, r1, r0, lsr fp
   13c4c:	andeq	r3, r1, r0, lsr fp
   13c50:	andeq	r3, r1, r0, lsr fp
   13c54:	andeq	r3, r1, r0, lsr fp
   13c58:	andeq	r3, r1, r0, lsr fp
   13c5c:	andeq	r3, r1, r0, lsr fp
   13c60:	andeq	r3, r1, r0, lsr fp
   13c64:	andeq	r3, r1, r0, lsr fp
   13c68:	andeq	r3, r1, r0, lsr fp
   13c6c:	andeq	r3, r1, r0, lsr fp
   13c70:	andeq	r3, r1, r0, lsr fp
   13c74:	andeq	r3, r1, r0, lsr fp
   13c78:	andeq	r3, r1, r0, lsr fp
   13c7c:	andeq	r3, r1, r0, lsr fp
   13c80:	andeq	r3, r1, r0, lsr fp
   13c84:	andeq	r3, r1, r0, lsr fp
   13c88:	strdeq	r3, [r1], -r4
   13c8c:	strdeq	r3, [r1], -r4
   13c90:	strdeq	r3, [r1], -r4
   13c94:	strdeq	r3, [r1], -r4
   13c98:	strdeq	r3, [r1], -r8
   13c9c:	andeq	r3, r1, r4, ror #21
   13ca0:	andeq	r3, r1, r0, lsr fp
   13ca4:	andeq	r3, r1, r0, lsr fp
   13ca8:	andeq	r3, r1, r0, lsr fp
   13cac:	andeq	r3, r1, r0, lsr fp
   13cb0:	andeq	r3, r1, r0, lsr fp
   13cb4:	andeq	r3, r1, r0, lsr fp
   13cb8:	andeq	r3, r1, r0, lsr fp
   13cbc:	andeq	r3, r1, r0, lsr fp
   13cc0:	andeq	r3, r1, r0, lsr fp
   13cc4:	andeq	r3, r1, r0, lsr fp
   13cc8:	andeq	r3, r1, r0, lsr fp
   13ccc:	andeq	r3, r1, r0, lsr fp
   13cd0:	andeq	r3, r1, r0, lsr fp
   13cd4:	andeq	r3, r1, r0, lsr fp
   13cd8:	andeq	r3, r1, r0, lsr fp
   13cdc:	andeq	r3, r1, r0, lsr fp
   13ce0:	andeq	r3, r1, r0, lsr fp
   13ce4:	andeq	r3, r1, r0, lsr fp
   13ce8:	andeq	r3, r1, r0, lsr fp
   13cec:	andeq	r3, r1, r0, lsr fp
   13cf0:	andeq	r3, r1, r0, lsr fp
   13cf4:	andeq	r3, r1, r0, lsr fp
   13cf8:	andeq	r3, r1, r0, lsr fp
   13cfc:	andeq	r3, r1, r0, lsr fp
   13d00:	andeq	r3, r1, r0, lsr fp
   13d04:	andeq	r3, r1, r0, lsr fp
   13d08:	strdeq	r3, [r1], -r4
   13d0c:	andeq	r3, r1, r0, lsr #15
   13d10:	andeq	r3, r1, r0, lsr fp
   13d14:	strdeq	r3, [r1], -r4
   13d18:	andeq	r3, r1, r0, lsr fp
   13d1c:	strdeq	r3, [r1], -r4
   13d20:	andeq	r3, r1, r0, lsr fp
   13d24:	andeq	r3, r1, r0, lsr fp
   13d28:	andeq	r3, r1, r0, lsr fp
   13d2c:	andeq	r3, r1, r0, lsr fp
   13d30:	andeq	r3, r1, r0, lsr fp
   13d34:	andeq	r3, r1, r0, lsr fp
   13d38:	andeq	r3, r1, r0, lsr fp
   13d3c:	andeq	r3, r1, r0, lsr fp
   13d40:	andeq	r3, r1, r0, lsr fp
   13d44:	andeq	r3, r1, r0, lsr fp
   13d48:	andeq	r3, r1, r0, lsr fp
   13d4c:	andeq	r3, r1, r0, lsr fp
   13d50:	andeq	r3, r1, r0, lsr fp
   13d54:	andeq	r3, r1, r0, lsr fp
   13d58:	andeq	r3, r1, r0, lsr fp
   13d5c:	andeq	r3, r1, r0, lsr fp
   13d60:	andeq	r3, r1, r0, lsr fp
   13d64:	andeq	r3, r1, r0, lsr fp
   13d68:	andeq	r3, r1, r0, lsr fp
   13d6c:	andeq	r3, r1, r0, lsr fp
   13d70:	andeq	r3, r1, r0, lsr fp
   13d74:	andeq	r3, r1, r0, lsr fp
   13d78:	andeq	r3, r1, r0, lsr fp
   13d7c:	andeq	r3, r1, r0, lsr fp
   13d80:	andeq	r3, r1, r0, lsr fp
   13d84:	andeq	r3, r1, r0, lsr fp
   13d88:	andeq	r3, r1, r4, asr #11
   13d8c:	strdeq	r3, [r1], -r4
   13d90:	andeq	r3, r1, r4, asr #11
   13d94:	andeq	r3, r1, r4, ror #27
   13d98:	mov	r3, #114	; 0x72
   13d9c:	b	13900 <__assert_fail@plt+0x29f8>
   13da0:	mov	r3, #102	; 0x66
   13da4:	b	137d0 <__assert_fail@plt+0x28c8>
   13da8:	mov	r3, #110	; 0x6e
   13dac:	b	13900 <__assert_fail@plt+0x29f8>
   13db0:	mov	r3, #98	; 0x62
   13db4:	b	137d0 <__assert_fail@plt+0x28c8>
   13db8:	mov	r3, #97	; 0x61
   13dbc:	b	137d0 <__assert_fail@plt+0x28c8>
   13dc0:	ldr	r3, [sp, #40]	; 0x28
   13dc4:	cmp	r3, #0
   13dc8:	bne	139d8 <__assert_fail@plt+0x2ad0>
   13dcc:	ldr	r3, [sp, #156]	; 0x9c
   13dd0:	tst	r3, #1
   13dd4:	addne	r9, r9, #1
   13dd8:	bne	1316c <__assert_fail@plt+0x2264>
   13ddc:	ldr	r7, [sp, #40]	; 0x28
   13de0:	b	137dc <__assert_fail@plt+0x28d4>
   13de4:	sub	r3, fp, #2
   13de8:	clz	r3, r3
   13dec:	lsr	r3, r3, #5
   13df0:	b	135f0 <__assert_fail@plt+0x26e8>
   13df4:	sub	r3, fp, #2
   13df8:	mov	r6, #0
   13dfc:	clz	r3, r3
   13e00:	lsr	r3, r3, #5
   13e04:	ldr	r2, [sp, #44]	; 0x2c
   13e08:	tst	r2, r3
   13e0c:	beq	135fc <__assert_fail@plt+0x26f4>
   13e10:	b	13918 <__assert_fail@plt+0x2a10>
   13e14:	sub	r3, fp, #2
   13e18:	clz	r3, r3
   13e1c:	lsr	r3, r3, #5
   13e20:	b	13e04 <__assert_fail@plt+0x2efc>
   13e24:	ldr	r3, [sp, #52]	; 0x34
   13e28:	ldrb	r5, [r3]
   13e2c:	cmp	r5, #126	; 0x7e
   13e30:	ldrls	pc, [pc, r5, lsl #2]
   13e34:	b	13ae0 <__assert_fail@plt+0x2bd8>
   13e38:	ldrdeq	r3, [r1], -r8
   13e3c:	andeq	r3, r1, r0, ror #21
   13e40:	andeq	r3, r1, r0, ror #21
   13e44:	andeq	r3, r1, r0, ror #21
   13e48:	andeq	r3, r1, r0, ror #21
   13e4c:	andeq	r3, r1, r0, ror #21
   13e50:	andeq	r3, r1, r0, ror #21
   13e54:			; <UNDEFINED> instruction: 0x000139bc
   13e58:			; <UNDEFINED> instruction: 0x000139b4
   13e5c:	andeq	r4, r1, r0, ror r0
   13e60:	andeq	r3, r1, r8, lsr #19
   13e64:	andeq	r4, r1, r4, rrx
   13e68:	andeq	r3, r1, r4, lsl #19
   13e6c:	ldrdeq	r3, [r1], -r0
   13e70:	andeq	r3, r1, r0, ror #21
   13e74:	andeq	r3, r1, r0, ror #21
   13e78:	andeq	r3, r1, r0, ror #21
   13e7c:	andeq	r3, r1, r0, ror #21
   13e80:	andeq	r3, r1, r0, ror #21
   13e84:	andeq	r3, r1, r0, ror #21
   13e88:	andeq	r3, r1, r0, ror #21
   13e8c:	andeq	r3, r1, r0, ror #21
   13e90:	andeq	r3, r1, r0, ror #21
   13e94:	andeq	r3, r1, r0, ror #21
   13e98:	andeq	r3, r1, r0, ror #21
   13e9c:	andeq	r3, r1, r0, ror #21
   13ea0:	andeq	r3, r1, r0, ror #21
   13ea4:	andeq	r3, r1, r0, ror #21
   13ea8:	andeq	r3, r1, r0, ror #21
   13eac:	andeq	r3, r1, r0, ror #21
   13eb0:	andeq	r3, r1, r0, ror #21
   13eb4:	andeq	r3, r1, r0, ror #21
   13eb8:	andeq	r4, r1, ip, asr r0
   13ebc:	andeq	r3, r1, r4, asr #19
   13ec0:	andeq	r3, r1, r4, asr #19
   13ec4:	andeq	r4, r1, r0, asr #32
   13ec8:	andeq	r3, r1, r4, asr #19
   13ecc:	andeq	r4, r1, r4, lsr r0
   13ed0:	andeq	r3, r1, r4, asr #19
   13ed4:	andeq	r3, r1, r0, lsr #16
   13ed8:	andeq	r3, r1, r4, asr #19
   13edc:	andeq	r3, r1, r4, asr #19
   13ee0:	andeq	r3, r1, r4, asr #19
   13ee4:	andeq	r4, r1, r4, lsr r0
   13ee8:	andeq	r4, r1, r4, lsr r0
   13eec:	andeq	r4, r1, r4, lsr r0
   13ef0:	andeq	r4, r1, r4, lsr r0
   13ef4:	andeq	r4, r1, r4, lsr r0
   13ef8:	andeq	r4, r1, r4, lsr r0
   13efc:	andeq	r4, r1, r4, lsr r0
   13f00:	andeq	r4, r1, r4, lsr r0
   13f04:	andeq	r4, r1, r4, lsr r0
   13f08:	andeq	r4, r1, r4, lsr r0
   13f0c:	andeq	r4, r1, r4, lsr r0
   13f10:	andeq	r4, r1, r4, lsr r0
   13f14:	andeq	r4, r1, r4, lsr r0
   13f18:	andeq	r4, r1, r4, lsr r0
   13f1c:	andeq	r4, r1, r4, lsr r0
   13f20:	andeq	r4, r1, r4, lsr r0
   13f24:	andeq	r3, r1, r4, asr #19
   13f28:	andeq	r3, r1, r4, asr #19
   13f2c:	andeq	r3, r1, r4, asr #19
   13f30:	andeq	r3, r1, r4, asr #19
   13f34:	strdeq	r3, [r1], -r4
   13f38:	andeq	r3, r1, r0, ror #21
   13f3c:	andeq	r4, r1, r4, lsr r0
   13f40:	andeq	r4, r1, r4, lsr r0
   13f44:	andeq	r4, r1, r4, lsr r0
   13f48:	andeq	r4, r1, r4, lsr r0
   13f4c:	andeq	r4, r1, r4, lsr r0
   13f50:	andeq	r4, r1, r4, lsr r0
   13f54:	andeq	r4, r1, r4, lsr r0
   13f58:	andeq	r4, r1, r4, lsr r0
   13f5c:	andeq	r4, r1, r4, lsr r0
   13f60:	andeq	r4, r1, r4, lsr r0
   13f64:	andeq	r4, r1, r4, lsr r0
   13f68:	andeq	r4, r1, r4, lsr r0
   13f6c:	andeq	r4, r1, r4, lsr r0
   13f70:	andeq	r4, r1, r4, lsr r0
   13f74:	andeq	r4, r1, r4, lsr r0
   13f78:	andeq	r4, r1, r4, lsr r0
   13f7c:	andeq	r4, r1, r4, lsr r0
   13f80:	andeq	r4, r1, r4, lsr r0
   13f84:	andeq	r4, r1, r4, lsr r0
   13f88:	andeq	r4, r1, r4, lsr r0
   13f8c:	andeq	r4, r1, r4, lsr r0
   13f90:	andeq	r4, r1, r4, lsr r0
   13f94:	andeq	r4, r1, r4, lsr r0
   13f98:	andeq	r4, r1, r4, lsr r0
   13f9c:	andeq	r4, r1, r4, lsr r0
   13fa0:	andeq	r4, r1, r4, lsr r0
   13fa4:	andeq	r3, r1, r4, asr #19
   13fa8:	muleq	r1, ip, r7
   13fac:	andeq	r4, r1, r4, lsr r0
   13fb0:	andeq	r3, r1, r4, asr #19
   13fb4:	andeq	r4, r1, r4, lsr r0
   13fb8:	andeq	r3, r1, r4, asr #19
   13fbc:	andeq	r4, r1, r4, lsr r0
   13fc0:	andeq	r4, r1, r4, lsr r0
   13fc4:	andeq	r4, r1, r4, lsr r0
   13fc8:	andeq	r4, r1, r4, lsr r0
   13fcc:	andeq	r4, r1, r4, lsr r0
   13fd0:	andeq	r4, r1, r4, lsr r0
   13fd4:	andeq	r4, r1, r4, lsr r0
   13fd8:	andeq	r4, r1, r4, lsr r0
   13fdc:	andeq	r4, r1, r4, lsr r0
   13fe0:	andeq	r4, r1, r4, lsr r0
   13fe4:	andeq	r4, r1, r4, lsr r0
   13fe8:	andeq	r4, r1, r4, lsr r0
   13fec:	andeq	r4, r1, r4, lsr r0
   13ff0:	andeq	r4, r1, r4, lsr r0
   13ff4:	andeq	r4, r1, r4, lsr r0
   13ff8:	andeq	r4, r1, r4, lsr r0
   13ffc:	andeq	r4, r1, r4, lsr r0
   14000:	andeq	r4, r1, r4, lsr r0
   14004:	andeq	r4, r1, r4, lsr r0
   14008:	andeq	r4, r1, r4, lsr r0
   1400c:	andeq	r4, r1, r4, lsr r0
   14010:	andeq	r4, r1, r4, lsr r0
   14014:	andeq	r4, r1, r4, lsr r0
   14018:	andeq	r4, r1, r4, lsr r0
   1401c:	andeq	r4, r1, r4, lsr r0
   14020:	andeq	r4, r1, r4, lsr r0
   14024:	andeq	r3, r1, r0, asr #11
   14028:	andeq	r3, r1, r4, asr #19
   1402c:	andeq	r3, r1, r0, asr #11
   14030:	andeq	r4, r1, r0, asr #32
   14034:	mov	r6, r7
   14038:	mov	r7, #0
   1403c:	b	137ec <__assert_fail@plt+0x28e4>
   14040:	cmp	r9, #0
   14044:	mov	r2, #0
   14048:	beq	13ab0 <__assert_fail@plt+0x2ba8>
   1404c:	mov	r6, #0
   14050:	mov	r7, r2
   14054:	mov	r3, r6
   14058:	b	1360c <__assert_fail@plt+0x2704>
   1405c:	mov	r2, #0
   14060:	b	13ac4 <__assert_fail@plt+0x2bbc>
   14064:	mov	r7, #0
   14068:	mov	r3, #118	; 0x76
   1406c:	b	137d0 <__assert_fail@plt+0x28c8>
   14070:	mov	r7, #0
   14074:	mov	r3, #116	; 0x74
   14078:	b	13900 <__assert_fail@plt+0x29f8>
   1407c:	ldr	r3, [sp, #44]	; 0x2c
   14080:	b	13634 <__assert_fail@plt+0x272c>
   14084:	ldr	r3, [sp, #44]	; 0x2c
   14088:	cmp	r3, #0
   1408c:	bne	144fc <__assert_fail@plt+0x35f4>
   14090:	add	r9, r9, #1
   14094:	mov	r6, #0
   14098:	ldr	r3, [sp, #48]	; 0x30
   1409c:	mov	r5, #92	; 0x5c
   140a0:	b	138c0 <__assert_fail@plt+0x29b8>
   140a4:	ldr	r3, [sp, #32]
   140a8:	ldrb	r2, [r3, #1]
   140ac:	adds	r2, r2, #0
   140b0:	movne	r2, #1
   140b4:	b	135dc <__assert_fail@plt+0x26d4>
   140b8:	ldr	r3, [sp, #156]	; 0x9c
   140bc:	ands	r3, r3, #4
   140c0:	beq	140e8 <__assert_fail@plt+0x31e0>
   140c4:	ldr	r2, [sp, #28]
   140c8:	add	r3, r9, #2
   140cc:	cmp	r3, r2
   140d0:	bcs	140e4 <__assert_fail@plt+0x31dc>
   140d4:	ldr	r2, [sp, #52]	; 0x34
   140d8:	ldrb	r5, [r2, #1]
   140dc:	cmp	r5, #63	; 0x3f
   140e0:	beq	14560 <__assert_fail@plt+0x3658>
   140e4:	mov	r3, #0
   140e8:	mov	r5, #63	; 0x3f
   140ec:	mov	r6, r3
   140f0:	b	135fc <__assert_fail@plt+0x26f4>
   140f4:	ldr	r3, [sp, #44]	; 0x2c
   140f8:	cmp	r3, #0
   140fc:	bne	144fc <__assert_fail@plt+0x35f4>
   14100:	mov	r6, r3
   14104:	mov	r5, #63	; 0x3f
   14108:	b	13634 <__assert_fail@plt+0x272c>
   1410c:	ldr	r1, [sp, #28]
   14110:	mov	r2, #0
   14114:	mov	r3, #0
   14118:	strd	r2, [sp, #104]	; 0x68
   1411c:	cmn	r1, #1
   14120:	bne	14130 <__assert_fail@plt+0x3228>
   14124:	ldr	r0, [sp, #32]
   14128:	bl	10e18 <strlen@plt>
   1412c:	str	r0, [sp, #28]
   14130:	str	r8, [sp, #76]	; 0x4c
   14134:	mov	r3, #0
   14138:	str	sl, [sp, #80]	; 0x50
   1413c:	ldr	sl, [sp, #32]
   14140:	str	r5, [sp, #84]	; 0x54
   14144:	mov	r5, r3
   14148:	ldr	r8, [sp, #44]	; 0x2c
   1414c:	str	r7, [sp, #88]	; 0x58
   14150:	str	r4, [sp, #92]	; 0x5c
   14154:	ldr	r2, [sp, #28]
   14158:	add	r4, r9, r5
   1415c:	add	r3, sp, #104	; 0x68
   14160:	add	r7, sl, r4
   14164:	add	r0, sp, #100	; 0x64
   14168:	mov	r1, r7
   1416c:	sub	r2, r2, r4
   14170:	bl	1688c <__assert_fail@plt+0x5984>
   14174:	subs	r1, r0, #0
   14178:	beq	141c4 <__assert_fail@plt+0x32bc>
   1417c:	cmn	r1, #1
   14180:	beq	1453c <__assert_fail@plt+0x3634>
   14184:	cmn	r1, #2
   14188:	beq	1465c <__assert_fail@plt+0x3754>
   1418c:	cmp	fp, #2
   14190:	movne	r3, #0
   14194:	andeq	r3, r8, #1
   14198:	cmp	r3, #0
   1419c:	bne	14328 <__assert_fail@plt+0x3420>
   141a0:	ldr	r0, [sp, #100]	; 0x64
   141a4:	add	r5, r5, r1
   141a8:	bl	10d70 <iswprint@plt>
   141ac:	cmp	r0, #0
   141b0:	add	r0, sp, #104	; 0x68
   141b4:	moveq	r6, #0
   141b8:	bl	10d1c <mbsinit@plt>
   141bc:	cmp	r0, #0
   141c0:	beq	14154 <__assert_fail@plt+0x324c>
   141c4:	ldr	r3, [sp, #40]	; 0x28
   141c8:	mov	ip, r5
   141cc:	eor	r2, r6, #1
   141d0:	ldr	r8, [sp, #76]	; 0x4c
   141d4:	ldr	sl, [sp, #80]	; 0x50
   141d8:	and	r2, r2, r3
   141dc:	ldr	r5, [sp, #84]	; 0x54
   141e0:	ldr	r7, [sp, #88]	; 0x58
   141e4:	ldr	r4, [sp, #92]	; 0x5c
   141e8:	cmp	ip, #1
   141ec:	bls	13b28 <__assert_fail@plt+0x2c20>
   141f0:	add	r1, ip, r9
   141f4:	mov	r0, #39	; 0x27
   141f8:	ldr	lr, [sp, #52]	; 0x34
   141fc:	mov	ip, #0
   14200:	str	r6, [sp, #52]	; 0x34
   14204:	ldr	r6, [sp, #48]	; 0x30
   14208:	b	142c4 <__assert_fail@plt+0x33bc>
   1420c:	ldr	ip, [sp, #44]	; 0x2c
   14210:	sub	r3, fp, #2
   14214:	clz	r3, r3
   14218:	lsr	r3, r3, #5
   1421c:	cmp	ip, #0
   14220:	bne	14434 <__assert_fail@plt+0x352c>
   14224:	eor	ip, r6, #1
   14228:	ands	r3, r3, ip
   1422c:	beq	1425c <__assert_fail@plt+0x3354>
   14230:	cmp	sl, r4
   14234:	add	ip, r4, #1
   14238:	strbhi	r0, [r8, r4]
   1423c:	cmp	sl, ip
   14240:	movhi	r6, #36	; 0x24
   14244:	strbhi	r6, [r8, ip]
   14248:	add	ip, r4, #2
   1424c:	mov	r6, r3
   14250:	cmp	sl, ip
   14254:	add	r4, r4, #3
   14258:	strbhi	r0, [r8, ip]
   1425c:	cmp	sl, r4
   14260:	movhi	r3, #92	; 0x5c
   14264:	strbhi	r3, [r8, r4]
   14268:	add	r3, r4, #1
   1426c:	cmp	sl, r3
   14270:	bls	14280 <__assert_fail@plt+0x3378>
   14274:	lsr	ip, r5, #6
   14278:	add	ip, ip, #48	; 0x30
   1427c:	strb	ip, [r8, r3]
   14280:	add	r3, r4, #2
   14284:	cmp	sl, r3
   14288:	bls	14298 <__assert_fail@plt+0x3390>
   1428c:	ubfx	ip, r5, #3, #3
   14290:	add	ip, ip, #48	; 0x30
   14294:	strb	ip, [r8, r3]
   14298:	add	r9, r9, #1
   1429c:	and	r5, r5, #7
   142a0:	cmp	r9, r1
   142a4:	add	r5, r5, #48	; 0x30
   142a8:	add	r4, r4, #3
   142ac:	bcs	14460 <__assert_fail@plt+0x3558>
   142b0:	mov	ip, r2
   142b4:	cmp	sl, r4
   142b8:	strbhi	r5, [r8, r4]
   142bc:	add	r4, r4, #1
   142c0:	ldrb	r5, [lr, #1]!
   142c4:	cmp	r2, #0
   142c8:	bne	1420c <__assert_fail@plt+0x3304>
   142cc:	eor	r3, ip, #1
   142d0:	cmp	r7, #0
   142d4:	and	r3, r3, r6
   142d8:	uxtb	r3, r3
   142dc:	beq	142f0 <__assert_fail@plt+0x33e8>
   142e0:	cmp	sl, r4
   142e4:	movhi	r7, #92	; 0x5c
   142e8:	strbhi	r7, [r8, r4]
   142ec:	add	r4, r4, #1
   142f0:	add	r9, r9, #1
   142f4:	cmp	r9, r1
   142f8:	bcs	14448 <__assert_fail@plt+0x3540>
   142fc:	cmp	r3, #0
   14300:	beq	14480 <__assert_fail@plt+0x3578>
   14304:	cmp	sl, r4
   14308:	add	r3, r4, #1
   1430c:	mov	r7, #0
   14310:	strbhi	r0, [r8, r4]
   14314:	cmp	sl, r3
   14318:	add	r4, r4, #2
   1431c:	mov	r6, r7
   14320:	strbhi	r0, [r8, r3]
   14324:	b	142b4 <__assert_fail@plt+0x33ac>
   14328:	cmp	r1, #1
   1432c:	beq	141a0 <__assert_fail@plt+0x3298>
   14330:	add	r2, r4, #1
   14334:	add	r3, sl, r1
   14338:	add	r2, sl, r2
   1433c:	add	r4, r3, r4
   14340:	ldrb	r3, [r2], #1
   14344:	sub	r3, r3, #91	; 0x5b
   14348:	cmp	r3, #33	; 0x21
   1434c:	ldrls	pc, [pc, r3, lsl #2]
   14350:	b	143dc <__assert_fail@plt+0x34d4>
   14354:	andeq	r4, r1, r8, ror #7
   14358:	andeq	r4, r1, r8, ror #7
   1435c:	ldrdeq	r4, [r1], -ip
   14360:	andeq	r4, r1, r8, ror #7
   14364:	ldrdeq	r4, [r1], -ip
   14368:	andeq	r4, r1, r8, ror #7
   1436c:	ldrdeq	r4, [r1], -ip
   14370:	ldrdeq	r4, [r1], -ip
   14374:	ldrdeq	r4, [r1], -ip
   14378:	ldrdeq	r4, [r1], -ip
   1437c:	ldrdeq	r4, [r1], -ip
   14380:	ldrdeq	r4, [r1], -ip
   14384:	ldrdeq	r4, [r1], -ip
   14388:	ldrdeq	r4, [r1], -ip
   1438c:	ldrdeq	r4, [r1], -ip
   14390:	ldrdeq	r4, [r1], -ip
   14394:	ldrdeq	r4, [r1], -ip
   14398:	ldrdeq	r4, [r1], -ip
   1439c:	ldrdeq	r4, [r1], -ip
   143a0:	ldrdeq	r4, [r1], -ip
   143a4:	ldrdeq	r4, [r1], -ip
   143a8:	ldrdeq	r4, [r1], -ip
   143ac:	ldrdeq	r4, [r1], -ip
   143b0:	ldrdeq	r4, [r1], -ip
   143b4:	ldrdeq	r4, [r1], -ip
   143b8:	ldrdeq	r4, [r1], -ip
   143bc:	ldrdeq	r4, [r1], -ip
   143c0:	ldrdeq	r4, [r1], -ip
   143c4:	ldrdeq	r4, [r1], -ip
   143c8:	ldrdeq	r4, [r1], -ip
   143cc:	ldrdeq	r4, [r1], -ip
   143d0:	ldrdeq	r4, [r1], -ip
   143d4:	ldrdeq	r4, [r1], -ip
   143d8:	andeq	r4, r1, r8, ror #7
   143dc:	cmp	r4, r2
   143e0:	bne	14340 <__assert_fail@plt+0x3438>
   143e4:	b	141a0 <__assert_fail@plt+0x3298>
   143e8:	mov	r8, #2
   143ec:	ldr	fp, [sp, #76]	; 0x4c
   143f0:	ldr	sl, [sp, #80]	; 0x50
   143f4:	b	13920 <__assert_fail@plt+0x2a18>
   143f8:	ldr	r2, [sp, #40]	; 0x28
   143fc:	str	fp, [sp, #152]	; 0x98
   14400:	mov	fp, r8
   14404:	ldr	r8, [sp, #152]	; 0x98
   14408:	and	r2, r2, r3
   1440c:	str	r2, [sp, #40]	; 0x28
   14410:	b	13920 <__assert_fail@plt+0x2a18>
   14414:	cmp	sl, r4
   14418:	movls	r0, r4
   1441c:	bls	13a50 <__assert_fail@plt+0x2b48>
   14420:	ldr	r3, [sp, #48]	; 0x30
   14424:	b	13a40 <__assert_fail@plt+0x2b38>
   14428:	str	sl, [sp, #72]	; 0x48
   1442c:	ldr	sl, [sp, #44]	; 0x2c
   14430:	b	13890 <__assert_fail@plt+0x2988>
   14434:	str	r3, [sp, #40]	; 0x28
   14438:	str	fp, [sp, #152]	; 0x98
   1443c:	mov	fp, r8
   14440:	ldr	r8, [sp, #152]	; 0x98
   14444:	b	13920 <__assert_fail@plt+0x2a18>
   14448:	str	r6, [sp, #48]	; 0x30
   1444c:	ldr	r6, [sp, #52]	; 0x34
   14450:	b	138c0 <__assert_fail@plt+0x29b8>
   14454:	mov	r6, #0
   14458:	ldr	r2, [sp, #40]	; 0x28
   1445c:	b	141f0 <__assert_fail@plt+0x32e8>
   14460:	str	r6, [sp, #48]	; 0x30
   14464:	ldr	r6, [sp, #52]	; 0x34
   14468:	b	136ac <__assert_fail@plt+0x27a4>
   1446c:	add	r4, r4, #4
   14470:	mov	r6, #0
   14474:	str	r3, [sp, #48]	; 0x30
   14478:	mov	r5, #48	; 0x30
   1447c:	b	13634 <__assert_fail@plt+0x272c>
   14480:	mov	r7, r3
   14484:	b	142b4 <__assert_fail@plt+0x33ac>
   14488:	mov	r3, #1
   1448c:	movw	r2, #27588	; 0x6bc4
   14490:	movt	r2, #1
   14494:	mov	r4, r3
   14498:	str	r3, [sp, #36]	; 0x24
   1449c:	str	r3, [sp, #40]	; 0x28
   144a0:	str	sl, [sp, #44]	; 0x2c
   144a4:	str	sl, [sp, #48]	; 0x30
   144a8:	str	r3, [sp, #56]	; 0x38
   144ac:	str	r2, [sp, #60]	; 0x3c
   144b0:	str	sl, [sp, #68]	; 0x44
   144b4:	str	sl, [sp, #72]	; 0x48
   144b8:	b	1315c <__assert_fail@plt+0x2254>
   144bc:	mov	r3, r6
   144c0:	mov	r5, #48	; 0x30
   144c4:	mov	r6, #0
   144c8:	b	13634 <__assert_fail@plt+0x272c>
   144cc:	mov	r5, r3
   144d0:	b	139ac <__assert_fail@plt+0x2aa4>
   144d4:	cmp	sl, r4
   144d8:	mov	r5, #48	; 0x30
   144dc:	movhi	r3, #48	; 0x30
   144e0:	strbhi	r3, [r8, r4]
   144e4:	add	r3, r0, #2
   144e8:	add	r4, r0, #3
   144ec:	cmp	sl, r3
   144f0:	movhi	r1, #48	; 0x30
   144f4:	strbhi	r1, [r8, r3]
   144f8:	b	13a84 <__assert_fail@plt+0x2b7c>
   144fc:	str	fp, [sp, #152]	; 0x98
   14500:	mov	fp, r8
   14504:	ldr	r8, [sp, #152]	; 0x98
   14508:	b	13920 <__assert_fail@plt+0x2a18>
   1450c:	ldr	r3, [sp, #164]	; 0xa4
   14510:	ldrb	r3, [r3]
   14514:	cmp	r3, #0
   14518:	beq	1312c <__assert_fail@plt+0x2224>
   1451c:	ldr	r2, [sp, #164]	; 0xa4
   14520:	cmp	sl, r4
   14524:	strbhi	r3, [fp, r4]
   14528:	add	r4, r4, #1
   1452c:	ldrb	r3, [r2, #1]!
   14530:	cmp	r3, #0
   14534:	bne	14520 <__assert_fail@plt+0x3618>
   14538:	b	1312c <__assert_fail@plt+0x2224>
   1453c:	mov	ip, r5
   14540:	mov	r6, #0
   14544:	ldr	r2, [sp, #40]	; 0x28
   14548:	ldr	r8, [sp, #76]	; 0x4c
   1454c:	ldr	sl, [sp, #80]	; 0x50
   14550:	ldr	r5, [sp, #84]	; 0x54
   14554:	ldr	r7, [sp, #88]	; 0x58
   14558:	ldr	r4, [sp, #92]	; 0x5c
   1455c:	b	141e8 <__assert_fail@plt+0x32e0>
   14560:	ldr	r2, [sp, #32]
   14564:	ldrb	r1, [r2, r3]
   14568:	sub	r2, r1, #33	; 0x21
   1456c:	cmp	r2, #29
   14570:	ldrls	pc, [pc, r2, lsl #2]
   14574:	b	14650 <__assert_fail@plt+0x3748>
   14578:	strdeq	r4, [r1], -r0
   1457c:	andeq	r4, r1, r0, asr r6
   14580:	andeq	r4, r1, r0, asr r6
   14584:	andeq	r4, r1, r0, asr r6
   14588:	andeq	r4, r1, r0, asr r6
   1458c:	andeq	r4, r1, r0, asr r6
   14590:	strdeq	r4, [r1], -r0
   14594:	strdeq	r4, [r1], -r0
   14598:	strdeq	r4, [r1], -r0
   1459c:	andeq	r4, r1, r0, asr r6
   145a0:	andeq	r4, r1, r0, asr r6
   145a4:	andeq	r4, r1, r0, asr r6
   145a8:	strdeq	r4, [r1], -r0
   145ac:	andeq	r4, r1, r0, asr r6
   145b0:	strdeq	r4, [r1], -r0
   145b4:	andeq	r4, r1, r0, asr r6
   145b8:	andeq	r4, r1, r0, asr r6
   145bc:	andeq	r4, r1, r0, asr r6
   145c0:	andeq	r4, r1, r0, asr r6
   145c4:	andeq	r4, r1, r0, asr r6
   145c8:	andeq	r4, r1, r0, asr r6
   145cc:	andeq	r4, r1, r0, asr r6
   145d0:	andeq	r4, r1, r0, asr r6
   145d4:	andeq	r4, r1, r0, asr r6
   145d8:	andeq	r4, r1, r0, asr r6
   145dc:	andeq	r4, r1, r0, asr r6
   145e0:	andeq	r4, r1, r0, asr r6
   145e4:	strdeq	r4, [r1], -r0
   145e8:	strdeq	r4, [r1], -r0
   145ec:	strdeq	r4, [r1], -r0
   145f0:	ldr	r2, [sp, #44]	; 0x2c
   145f4:	cmp	r2, #0
   145f8:	bne	14754 <__assert_fail@plt+0x384c>
   145fc:	cmp	sl, r4
   14600:	mov	r5, r1
   14604:	movhi	r2, #63	; 0x3f
   14608:	mov	r9, r3
   1460c:	strbhi	r2, [r8, r4]
   14610:	add	r2, r4, #1
   14614:	cmp	sl, r2
   14618:	movhi	r0, #34	; 0x22
   1461c:	strbhi	r0, [r8, r2]
   14620:	add	r2, r4, #2
   14624:	cmp	sl, r2
   14628:	movhi	r0, #34	; 0x22
   1462c:	strbhi	r0, [r8, r2]
   14630:	add	r2, r4, #3
   14634:	add	r4, r4, #4
   14638:	cmp	sl, r2
   1463c:	movhi	r0, #63	; 0x3f
   14640:	strbhi	r0, [r8, r2]
   14644:	mov	r2, #0
   14648:	mov	r6, r2
   1464c:	b	13a84 <__assert_fail@plt+0x2b7c>
   14650:	mov	r3, #0
   14654:	mov	r6, r3
   14658:	b	135fc <__assert_fail@plt+0x26f4>
   1465c:	ldr	r0, [sp, #28]
   14660:	mov	r1, r4
   14664:	mov	r2, r7
   14668:	mov	r3, r5
   1466c:	mov	ip, r5
   14670:	ldr	r8, [sp, #76]	; 0x4c
   14674:	ldr	sl, [sp, #80]	; 0x50
   14678:	cmp	r1, r0
   1467c:	ldr	r5, [sp, #84]	; 0x54
   14680:	ldr	r7, [sp, #88]	; 0x58
   14684:	ldr	r4, [sp, #92]	; 0x5c
   14688:	bcs	146bc <__assert_fail@plt+0x37b4>
   1468c:	ldrb	r6, [r2]
   14690:	cmp	r6, #0
   14694:	bne	146a8 <__assert_fail@plt+0x37a0>
   14698:	b	147dc <__assert_fail@plt+0x38d4>
   1469c:	ldrb	r6, [r2, #1]!
   146a0:	cmp	r6, #0
   146a4:	beq	14764 <__assert_fail@plt+0x385c>
   146a8:	add	r3, r3, #1
   146ac:	add	r1, r9, r3
   146b0:	cmp	r1, r0
   146b4:	bcc	1469c <__assert_fail@plt+0x3794>
   146b8:	mov	ip, r3
   146bc:	mov	r6, #0
   146c0:	ldr	r2, [sp, #40]	; 0x28
   146c4:	b	141e8 <__assert_fail@plt+0x32e0>
   146c8:	mov	r3, #1
   146cc:	mov	r2, #0
   146d0:	mov	r4, r2
   146d4:	str	r3, [sp, #36]	; 0x24
   146d8:	str	r3, [sp, #40]	; 0x28
   146dc:	str	r3, [sp, #44]	; 0x2c
   146e0:	str	r2, [sp, #48]	; 0x30
   146e4:	str	r3, [sp, #56]	; 0x38
   146e8:	movw	r3, #27588	; 0x6bc4
   146ec:	movt	r3, #1
   146f0:	str	r3, [sp, #60]	; 0x3c
   146f4:	str	r2, [sp, #68]	; 0x44
   146f8:	str	r2, [sp, #72]	; 0x48
   146fc:	b	1315c <__assert_fail@plt+0x2254>
   14700:	mov	r2, r3
   14704:	ldr	r3, [sp, #60]	; 0x3c
   14708:	cmp	r3, #0
   1470c:	moveq	r2, #0
   14710:	andne	r2, r2, #1
   14714:	cmp	r2, #0
   14718:	beq	14744 <__assert_fail@plt+0x383c>
   1471c:	mov	r2, r3
   14720:	ldrb	r3, [r3]
   14724:	cmp	r3, #0
   14728:	beq	14744 <__assert_fail@plt+0x383c>
   1472c:	cmp	sl, r4
   14730:	strbhi	r3, [fp, r4]
   14734:	add	r4, r4, #1
   14738:	ldrb	r3, [r2, #1]!
   1473c:	cmp	r3, #0
   14740:	bne	1472c <__assert_fail@plt+0x3824>
   14744:	cmp	sl, r4
   14748:	movhi	r3, #0
   1474c:	strbhi	r3, [fp, r4]
   14750:	b	13964 <__assert_fail@plt+0x2a5c>
   14754:	str	fp, [sp, #152]	; 0x98
   14758:	mov	fp, r8
   1475c:	ldr	r8, [sp, #152]	; 0x98
   14760:	b	1392c <__assert_fail@plt+0x2a24>
   14764:	mov	ip, r3
   14768:	ldr	r2, [sp, #40]	; 0x28
   1476c:	b	141e8 <__assert_fail@plt+0x32e0>
   14770:	str	fp, [sp, #152]	; 0x98
   14774:	mov	fp, r8
   14778:	ldr	r8, [sp, #152]	; 0x98
   1477c:	sub	r3, r8, #2
   14780:	clz	r3, r3
   14784:	lsr	r3, r3, #5
   14788:	str	r3, [sp, #40]	; 0x28
   1478c:	b	13920 <__assert_fail@plt+0x2a18>
   14790:	mov	ip, #5
   14794:	ldr	r3, [sp, #28]
   14798:	str	ip, [sp]
   1479c:	ldr	r2, [sp, #156]	; 0x9c
   147a0:	ldr	ip, [sp, #164]	; 0xa4
   147a4:	ldr	r0, [sp, #160]	; 0xa0
   147a8:	str	r2, [sp, #4]
   147ac:	ldr	r2, [sp, #32]
   147b0:	ldr	r1, [sp, #72]	; 0x48
   147b4:	str	ip, [sp, #12]
   147b8:	ldr	ip, [sp, #168]	; 0xa8
   147bc:	str	r0, [sp, #8]
   147c0:	mov	r0, fp
   147c4:	str	ip, [sp, #16]
   147c8:	bl	13074 <__assert_fail@plt+0x216c>
   147cc:	mov	r4, r0
   147d0:	b	13964 <__assert_fail@plt+0x2a5c>
   147d4:	mov	r8, #2
   147d8:	b	13920 <__assert_fail@plt+0x2a18>
   147dc:	ldr	r2, [sp, #40]	; 0x28
   147e0:	b	141e8 <__assert_fail@plt+0x32e0>
   147e4:	mov	r3, #0
   147e8:	mov	r2, #1
   147ec:	mov	r4, r3
   147f0:	strd	r2, [sp, #36]	; 0x24
   147f4:	strd	r2, [sp, #44]	; 0x2c
   147f8:	str	r2, [sp, #56]	; 0x38
   147fc:	str	r3, [sp, #68]	; 0x44
   14800:	str	r3, [sp, #72]	; 0x48
   14804:	movw	r3, #29552	; 0x7370
   14808:	movt	r3, #1
   1480c:	str	r3, [sp, #60]	; 0x3c
   14810:	b	1315c <__assert_fail@plt+0x2254>
   14814:	mov	r3, #0
   14818:	mov	r1, #1
   1481c:	mov	r2, r3
   14820:	str	r1, [sp, #36]	; 0x24
   14824:	str	r3, [sp, #48]	; 0x30
   14828:	str	sl, [sp, #72]	; 0x48
   1482c:	b	13764 <__assert_fail@plt+0x285c>
   14830:	bl	10efc <abort@plt>
   14834:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14838:	mov	r4, r0
   1483c:	mov	r5, r3
   14840:	strd	r6, [sp, #8]
   14844:	movw	r7, #33008	; 0x80f0
   14848:	movt	r7, #2
   1484c:	strd	r8, [sp, #16]
   14850:	strd	sl, [sp, #24]
   14854:	mov	sl, r1
   14858:	mov	fp, r2
   1485c:	str	lr, [sp, #32]
   14860:	sub	sp, sp, #60	; 0x3c
   14864:	bl	10e30 <__errno_location@plt>
   14868:	mov	r8, r0
   1486c:	cmn	r4, #-2147483647	; 0x80000001
   14870:	ldr	r6, [r7]
   14874:	movne	r0, #0
   14878:	moveq	r0, #1
   1487c:	ldr	r3, [r8]
   14880:	orrs	r0, r0, r4, lsr #31
   14884:	str	r3, [sp, #28]
   14888:	bne	14a18 <__assert_fail@plt+0x3b10>
   1488c:	ldr	r3, [r7, #4]
   14890:	cmp	r3, r4
   14894:	bgt	148f4 <__assert_fail@plt+0x39ec>
   14898:	add	r1, r7, #8
   1489c:	sub	r2, r4, r3
   148a0:	str	r3, [sp, #52]	; 0x34
   148a4:	cmp	r6, r1
   148a8:	add	r2, r2, #1
   148ac:	beq	149f0 <__assert_fail@plt+0x3ae8>
   148b0:	mov	r1, #8
   148b4:	mov	r0, r6
   148b8:	mvn	r3, #-2147483648	; 0x80000000
   148bc:	str	r1, [sp]
   148c0:	add	r1, sp, #52	; 0x34
   148c4:	bl	15898 <__assert_fail@plt+0x4990>
   148c8:	mov	r6, r0
   148cc:	str	r0, [r7]
   148d0:	ldr	r0, [r7, #4]
   148d4:	mov	r1, #0
   148d8:	ldr	r2, [sp, #52]	; 0x34
   148dc:	sub	r2, r2, r0
   148e0:	add	r0, r6, r0, lsl #3
   148e4:	lsl	r2, r2, #3
   148e8:	bl	10e48 <memset@plt>
   148ec:	ldr	r3, [sp, #52]	; 0x34
   148f0:	str	r3, [r7, #4]
   148f4:	ldr	r1, [r5, #4]
   148f8:	add	r0, r6, r4, lsl #3
   148fc:	add	ip, r5, #8
   14900:	mov	r3, fp
   14904:	mov	r2, sl
   14908:	ldr	r7, [r0, #4]
   1490c:	str	r0, [sp, #36]	; 0x24
   14910:	str	ip, [sp, #40]	; 0x28
   14914:	orr	r0, r1, #1
   14918:	ldr	r9, [r6, r4, lsl #3]
   1491c:	str	ip, [sp, #8]
   14920:	ldr	lr, [r5, #44]	; 0x2c
   14924:	str	r0, [sp, #4]
   14928:	ldr	ip, [r5]
   1492c:	mov	r1, r9
   14930:	str	ip, [sp, #32]
   14934:	ldr	ip, [r5, #40]	; 0x28
   14938:	str	ip, [sp, #12]
   1493c:	ldr	ip, [sp, #32]
   14940:	str	lr, [sp, #16]
   14944:	str	r0, [sp, #44]	; 0x2c
   14948:	mov	r0, r7
   1494c:	str	ip, [sp]
   14950:	bl	13074 <__assert_fail@plt+0x216c>
   14954:	cmp	r9, r0
   14958:	bhi	149c8 <__assert_fail@plt+0x3ac0>
   1495c:	add	r9, r0, #1
   14960:	movw	r3, #664	; 0x298
   14964:	movt	r3, #3
   14968:	cmp	r7, r3
   1496c:	str	r9, [r6, r4, lsl #3]
   14970:	beq	1497c <__assert_fail@plt+0x3a74>
   14974:	mov	r0, r7
   14978:	bl	167e0 <__assert_fail@plt+0x58d8>
   1497c:	mov	r0, r9
   14980:	bl	156e8 <__assert_fail@plt+0x47e0>
   14984:	ldr	ip, [r5]
   14988:	mov	r3, fp
   1498c:	mov	r2, sl
   14990:	mov	r1, r9
   14994:	mov	r7, r0
   14998:	ldr	lr, [sp, #36]	; 0x24
   1499c:	ldr	r4, [r5, #40]	; 0x28
   149a0:	str	r0, [lr, #4]
   149a4:	ldr	lr, [r5, #44]	; 0x2c
   149a8:	str	ip, [sp]
   149ac:	ldr	ip, [sp, #44]	; 0x2c
   149b0:	str	ip, [sp, #4]
   149b4:	ldr	ip, [sp, #40]	; 0x28
   149b8:	str	r4, [sp, #12]
   149bc:	str	lr, [sp, #16]
   149c0:	str	ip, [sp, #8]
   149c4:	bl	13074 <__assert_fail@plt+0x216c>
   149c8:	ldr	r3, [sp, #28]
   149cc:	mov	r0, r7
   149d0:	str	r3, [r8]
   149d4:	add	sp, sp, #60	; 0x3c
   149d8:	ldrd	r4, [sp]
   149dc:	ldrd	r6, [sp, #8]
   149e0:	ldrd	r8, [sp, #16]
   149e4:	ldrd	sl, [sp, #24]
   149e8:	add	sp, sp, #32
   149ec:	pop	{pc}		; (ldr pc, [sp], #4)
   149f0:	mov	r1, #8
   149f4:	mvn	r3, #-2147483648	; 0x80000000
   149f8:	str	r1, [sp]
   149fc:	add	r1, sp, #52	; 0x34
   14a00:	bl	15898 <__assert_fail@plt+0x4990>
   14a04:	ldrd	r2, [r7, #8]
   14a08:	mov	r6, r0
   14a0c:	str	r0, [r7]
   14a10:	strd	r2, [r0]
   14a14:	b	148d0 <__assert_fail@plt+0x39c8>
   14a18:	bl	10efc <abort@plt>
   14a1c:	strd	r4, [sp, #-16]!
   14a20:	mov	r5, r0
   14a24:	str	r6, [sp, #8]
   14a28:	str	lr, [sp, #12]
   14a2c:	bl	10e30 <__errno_location@plt>
   14a30:	mov	r4, r0
   14a34:	cmp	r5, #0
   14a38:	ldr	r0, [pc, #32]	; 14a60 <__assert_fail@plt+0x3b58>
   14a3c:	mov	r1, #48	; 0x30
   14a40:	movne	r0, r5
   14a44:	ldr	r6, [r4]
   14a48:	bl	15a10 <__assert_fail@plt+0x4b08>
   14a4c:	str	r6, [r4]
   14a50:	ldrd	r4, [sp]
   14a54:	ldr	r6, [sp, #8]
   14a58:	add	sp, sp, #12
   14a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a60:	muleq	r3, r8, r3
   14a64:	ldr	r3, [pc, #12]	; 14a78 <__assert_fail@plt+0x3b70>
   14a68:	cmp	r0, #0
   14a6c:	moveq	r0, r3
   14a70:	ldr	r0, [r0]
   14a74:	bx	lr
   14a78:	muleq	r3, r8, r3
   14a7c:	ldr	r3, [pc, #12]	; 14a90 <__assert_fail@plt+0x3b88>
   14a80:	cmp	r0, #0
   14a84:	moveq	r0, r3
   14a88:	str	r1, [r0]
   14a8c:	bx	lr
   14a90:	muleq	r3, r8, r3
   14a94:	ldr	r3, [pc, #52]	; 14ad0 <__assert_fail@plt+0x3bc8>
   14a98:	cmp	r0, #0
   14a9c:	push	{lr}		; (str lr, [sp, #-4]!)
   14aa0:	lsr	lr, r1, #5
   14aa4:	and	r1, r1, #31
   14aa8:	moveq	r0, r3
   14aac:	add	r3, r0, #8
   14ab0:	ldr	ip, [r3, lr, lsl #2]
   14ab4:	lsr	r0, ip, r1
   14ab8:	eor	r2, r2, r0
   14abc:	and	r0, r0, #1
   14ac0:	and	r2, r2, #1
   14ac4:	eor	r1, ip, r2, lsl r1
   14ac8:	str	r1, [r3, lr, lsl #2]
   14acc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad0:	muleq	r3, r8, r3
   14ad4:	ldr	r3, [pc, #16]	; 14aec <__assert_fail@plt+0x3be4>
   14ad8:	cmp	r0, #0
   14adc:	movne	r3, r0
   14ae0:	ldr	r0, [r3, #4]
   14ae4:	str	r1, [r3, #4]
   14ae8:	bx	lr
   14aec:	muleq	r3, r8, r3
   14af0:	ldr	r3, [pc, #48]	; 14b28 <__assert_fail@plt+0x3c20>
   14af4:	cmp	r0, #0
   14af8:	mov	ip, #10
   14afc:	moveq	r0, r3
   14b00:	cmp	r2, #0
   14b04:	cmpne	r1, #0
   14b08:	str	ip, [r0]
   14b0c:	beq	14b1c <__assert_fail@plt+0x3c14>
   14b10:	str	r1, [r0, #40]	; 0x28
   14b14:	str	r2, [r0, #44]	; 0x2c
   14b18:	bx	lr
   14b1c:	str	r4, [sp, #-8]!
   14b20:	str	lr, [sp, #4]
   14b24:	bl	10efc <abort@plt>
   14b28:	muleq	r3, r8, r3
   14b2c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14b30:	strd	r6, [sp, #8]
   14b34:	mov	r7, r0
   14b38:	mov	r6, r1
   14b3c:	strd	r8, [sp, #16]
   14b40:	mov	r8, r2
   14b44:	mov	r9, r3
   14b48:	str	lr, [sp, #24]
   14b4c:	sub	sp, sp, #28
   14b50:	ldr	r4, [sp, #56]	; 0x38
   14b54:	ldr	ip, [pc, #104]	; 14bc4 <__assert_fail@plt+0x3cbc>
   14b58:	cmp	r4, #0
   14b5c:	moveq	r4, ip
   14b60:	bl	10e30 <__errno_location@plt>
   14b64:	ldr	ip, [r4, #44]	; 0x2c
   14b68:	mov	r5, r0
   14b6c:	mov	r1, r6
   14b70:	add	lr, r4, #8
   14b74:	mov	r3, r9
   14b78:	ldr	r6, [r5]
   14b7c:	mov	r2, r8
   14b80:	mov	r0, r7
   14b84:	str	ip, [sp, #16]
   14b88:	ldr	ip, [r4, #40]	; 0x28
   14b8c:	str	lr, [sp, #8]
   14b90:	str	ip, [sp, #12]
   14b94:	ldr	ip, [r4, #4]
   14b98:	str	ip, [sp, #4]
   14b9c:	ldr	ip, [r4]
   14ba0:	str	ip, [sp]
   14ba4:	bl	13074 <__assert_fail@plt+0x216c>
   14ba8:	str	r6, [r5]
   14bac:	add	sp, sp, #28
   14bb0:	ldrd	r4, [sp]
   14bb4:	ldrd	r6, [sp, #8]
   14bb8:	ldrd	r8, [sp, #16]
   14bbc:	add	sp, sp, #24
   14bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14bc4:	muleq	r3, r8, r3
   14bc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14bcc:	cmp	r3, #0
   14bd0:	ldr	r4, [pc, #220]	; 14cb4 <__assert_fail@plt+0x3dac>
   14bd4:	movne	r4, r3
   14bd8:	strd	r6, [sp, #8]
   14bdc:	mov	r6, r2
   14be0:	strd	r8, [sp, #16]
   14be4:	mov	r9, r0
   14be8:	strd	sl, [sp, #24]
   14bec:	mov	sl, r1
   14bf0:	str	lr, [sp, #32]
   14bf4:	sub	sp, sp, #44	; 0x2c
   14bf8:	bl	10e30 <__errno_location@plt>
   14bfc:	ldr	r5, [r4, #4]
   14c00:	mov	r7, r0
   14c04:	mov	r1, #0
   14c08:	add	r8, r4, #8
   14c0c:	mov	r3, sl
   14c10:	ldr	ip, [r4, #44]	; 0x2c
   14c14:	mov	r2, r9
   14c18:	mov	r0, r1
   14c1c:	ldr	lr, [r7]
   14c20:	cmp	r6, r1
   14c24:	orreq	r5, r5, #1
   14c28:	str	ip, [sp, #16]
   14c2c:	ldr	ip, [r4, #40]	; 0x28
   14c30:	stmib	sp, {r5, r8, ip}
   14c34:	ldr	ip, [r4]
   14c38:	str	lr, [sp, #28]
   14c3c:	str	ip, [sp]
   14c40:	bl	13074 <__assert_fail@plt+0x216c>
   14c44:	add	r1, r0, #1
   14c48:	mov	fp, r0
   14c4c:	mov	r0, r1
   14c50:	str	r1, [sp, #36]	; 0x24
   14c54:	bl	156e8 <__assert_fail@plt+0x47e0>
   14c58:	ldr	ip, [r4, #44]	; 0x2c
   14c5c:	mov	r3, sl
   14c60:	mov	r2, r9
   14c64:	ldr	r1, [sp, #36]	; 0x24
   14c68:	str	ip, [sp, #16]
   14c6c:	ldr	ip, [r4, #40]	; 0x28
   14c70:	str	r0, [sp, #32]
   14c74:	stmib	sp, {r5, r8, ip}
   14c78:	ldr	ip, [r4]
   14c7c:	str	ip, [sp]
   14c80:	bl	13074 <__assert_fail@plt+0x216c>
   14c84:	ldr	lr, [sp, #28]
   14c88:	cmp	r6, #0
   14c8c:	ldr	r0, [sp, #32]
   14c90:	str	lr, [r7]
   14c94:	strne	fp, [r6]
   14c98:	add	sp, sp, #44	; 0x2c
   14c9c:	ldrd	r4, [sp]
   14ca0:	ldrd	r6, [sp, #8]
   14ca4:	ldrd	r8, [sp, #16]
   14ca8:	ldrd	sl, [sp, #24]
   14cac:	add	sp, sp, #32
   14cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cb4:	muleq	r3, r8, r3
   14cb8:	mov	r3, r2
   14cbc:	mov	r2, #0
   14cc0:	b	14bc8 <__assert_fail@plt+0x3cc0>
   14cc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14cc8:	movw	r5, #33008	; 0x80f0
   14ccc:	movt	r5, #2
   14cd0:	ldr	r3, [r5, #4]
   14cd4:	strd	r6, [sp, #8]
   14cd8:	str	r8, [sp, #16]
   14cdc:	str	lr, [sp, #20]
   14ce0:	ldr	r7, [r5]
   14ce4:	cmp	r3, #1
   14ce8:	ble	14d0c <__assert_fail@plt+0x3e04>
   14cec:	mov	r4, #1
   14cf0:	add	r6, r7, #4
   14cf4:	ldr	r0, [r6, r4, lsl #3]
   14cf8:	add	r4, r4, #1
   14cfc:	bl	167e0 <__assert_fail@plt+0x58d8>
   14d00:	ldr	r3, [r5, #4]
   14d04:	cmp	r3, r4
   14d08:	bgt	14cf4 <__assert_fail@plt+0x3dec>
   14d0c:	ldr	r0, [r7, #4]
   14d10:	movw	r4, #664	; 0x298
   14d14:	movt	r4, #3
   14d18:	cmp	r0, r4
   14d1c:	beq	14d30 <__assert_fail@plt+0x3e28>
   14d20:	bl	167e0 <__assert_fail@plt+0x58d8>
   14d24:	mov	r3, #256	; 0x100
   14d28:	str	r3, [r5, #8]
   14d2c:	str	r4, [r5, #12]
   14d30:	ldr	r4, [pc, #44]	; 14d64 <__assert_fail@plt+0x3e5c>
   14d34:	cmp	r7, r4
   14d38:	beq	14d48 <__assert_fail@plt+0x3e40>
   14d3c:	mov	r0, r7
   14d40:	bl	167e0 <__assert_fail@plt+0x58d8>
   14d44:	str	r4, [r5]
   14d48:	mov	r3, #1
   14d4c:	ldrd	r6, [sp, #8]
   14d50:	str	r3, [r5, #4]
   14d54:	ldrd	r4, [sp]
   14d58:	ldr	r8, [sp, #16]
   14d5c:	add	sp, sp, #20
   14d60:	pop	{pc}		; (ldr pc, [sp], #4)
   14d64:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14d68:	ldr	r3, [pc, #4]	; 14d74 <__assert_fail@plt+0x3e6c>
   14d6c:	mvn	r2, #0
   14d70:	b	14834 <__assert_fail@plt+0x392c>
   14d74:	muleq	r3, r8, r3
   14d78:	ldr	r3, [pc]	; 14d80 <__assert_fail@plt+0x3e78>
   14d7c:	b	14834 <__assert_fail@plt+0x392c>
   14d80:	muleq	r3, r8, r3
   14d84:	mov	r1, r0
   14d88:	ldr	r3, [pc, #8]	; 14d98 <__assert_fail@plt+0x3e90>
   14d8c:	mvn	r2, #0
   14d90:	mov	r0, #0
   14d94:	b	14834 <__assert_fail@plt+0x392c>
   14d98:	muleq	r3, r8, r3
   14d9c:	mov	r2, r1
   14da0:	ldr	r3, [pc, #8]	; 14db0 <__assert_fail@plt+0x3ea8>
   14da4:	mov	r1, r0
   14da8:	mov	r0, #0
   14dac:	b	14834 <__assert_fail@plt+0x392c>
   14db0:	muleq	r3, r8, r3
   14db4:	strd	r4, [sp, #-12]!
   14db8:	mov	r5, r2
   14dbc:	mov	r4, r0
   14dc0:	str	lr, [sp, #8]
   14dc4:	sub	sp, sp, #52	; 0x34
   14dc8:	mov	r0, sp
   14dcc:	bl	12ed0 <__assert_fail@plt+0x1fc8>
   14dd0:	mov	r3, sp
   14dd4:	mov	r1, r5
   14dd8:	mov	r0, r4
   14ddc:	mvn	r2, #0
   14de0:	bl	14834 <__assert_fail@plt+0x392c>
   14de4:	add	sp, sp, #52	; 0x34
   14de8:	ldrd	r4, [sp]
   14dec:	add	sp, sp, #8
   14df0:	pop	{pc}		; (ldr pc, [sp], #4)
   14df4:	strd	r4, [sp, #-16]!
   14df8:	mov	r5, r2
   14dfc:	mov	r4, r0
   14e00:	str	r6, [sp, #8]
   14e04:	mov	r6, r3
   14e08:	str	lr, [sp, #12]
   14e0c:	sub	sp, sp, #48	; 0x30
   14e10:	mov	r0, sp
   14e14:	bl	12ed0 <__assert_fail@plt+0x1fc8>
   14e18:	mov	r3, sp
   14e1c:	mov	r2, r6
   14e20:	mov	r1, r5
   14e24:	mov	r0, r4
   14e28:	bl	14834 <__assert_fail@plt+0x392c>
   14e2c:	add	sp, sp, #48	; 0x30
   14e30:	ldrd	r4, [sp]
   14e34:	ldr	r6, [sp, #8]
   14e38:	add	sp, sp, #12
   14e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e40:	mov	r2, r1
   14e44:	mov	r1, r0
   14e48:	mov	r0, #0
   14e4c:	b	14db4 <__assert_fail@plt+0x3eac>
   14e50:	mov	r3, r2
   14e54:	mov	r2, r1
   14e58:	mov	r1, r0
   14e5c:	mov	r0, #0
   14e60:	b	14df4 <__assert_fail@plt+0x3eec>
   14e64:	ldr	ip, [pc, #140]	; 14ef8 <__assert_fail@plt+0x3ff0>
   14e68:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14e6c:	ldrd	r4, [ip]
   14e70:	strd	r6, [sp, #8]
   14e74:	ldrd	r6, [ip, #8]
   14e78:	strd	r8, [sp, #16]
   14e7c:	lsr	r9, r2, #5
   14e80:	str	lr, [sp, #24]
   14e84:	sub	sp, sp, #52	; 0x34
   14e88:	and	lr, r2, #31
   14e8c:	add	r8, sp, #8
   14e90:	mov	r2, r1
   14e94:	strd	r4, [sp]
   14e98:	mov	r1, r0
   14e9c:	mov	r3, sp
   14ea0:	strd	r6, [sp, #8]
   14ea4:	mov	r0, #0
   14ea8:	ldrd	r4, [ip, #16]
   14eac:	ldrd	r6, [ip, #24]
   14eb0:	strd	r4, [sp, #16]
   14eb4:	ldrd	r4, [ip, #32]
   14eb8:	strd	r6, [sp, #24]
   14ebc:	ldrd	r6, [ip, #40]	; 0x28
   14ec0:	strd	r4, [sp, #32]
   14ec4:	strd	r6, [sp, #40]	; 0x28
   14ec8:	ldr	ip, [r8, r9, lsl #2]
   14ecc:	mvn	r4, ip, lsr lr
   14ed0:	and	r4, r4, #1
   14ed4:	eor	lr, ip, r4, lsl lr
   14ed8:	str	lr, [r8, r9, lsl #2]
   14edc:	bl	14834 <__assert_fail@plt+0x392c>
   14ee0:	add	sp, sp, #52	; 0x34
   14ee4:	ldrd	r4, [sp]
   14ee8:	ldrd	r6, [sp, #8]
   14eec:	ldrd	r8, [sp, #16]
   14ef0:	add	sp, sp, #24
   14ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef8:	muleq	r3, r8, r3
   14efc:	mov	r2, r1
   14f00:	mvn	r1, #0
   14f04:	b	14e64 <__assert_fail@plt+0x3f5c>
   14f08:	mov	r2, #58	; 0x3a
   14f0c:	mvn	r1, #0
   14f10:	b	14e64 <__assert_fail@plt+0x3f5c>
   14f14:	mov	r2, #58	; 0x3a
   14f18:	b	14e64 <__assert_fail@plt+0x3f5c>
   14f1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14f20:	strd	r6, [sp, #8]
   14f24:	mov	r6, r0
   14f28:	mov	r7, r2
   14f2c:	str	lr, [sp, #16]
   14f30:	sub	sp, sp, #100	; 0x64
   14f34:	mov	r0, sp
   14f38:	bl	12ed0 <__assert_fail@plt+0x1fc8>
   14f3c:	ldrd	r4, [sp, #8]
   14f40:	mov	r1, r7
   14f44:	mov	r0, r6
   14f48:	add	r3, sp, #48	; 0x30
   14f4c:	mvn	r2, #0
   14f50:	ldrd	r6, [sp]
   14f54:	strd	r4, [sp, #56]	; 0x38
   14f58:	ldrd	r4, [sp, #16]
   14f5c:	strd	r6, [sp, #48]	; 0x30
   14f60:	ldrd	r6, [sp, #32]
   14f64:	ldr	lr, [sp, #60]	; 0x3c
   14f68:	strd	r4, [sp, #64]	; 0x40
   14f6c:	ldrd	r4, [sp, #24]
   14f70:	mvn	ip, lr
   14f74:	and	ip, ip, #67108864	; 0x4000000
   14f78:	strd	r4, [sp, #72]	; 0x48
   14f7c:	eor	ip, ip, lr
   14f80:	ldrd	r4, [sp, #40]	; 0x28
   14f84:	str	ip, [sp, #60]	; 0x3c
   14f88:	strd	r6, [sp, #80]	; 0x50
   14f8c:	strd	r4, [sp, #88]	; 0x58
   14f90:	bl	14834 <__assert_fail@plt+0x392c>
   14f94:	add	sp, sp, #100	; 0x64
   14f98:	ldrd	r4, [sp]
   14f9c:	ldrd	r6, [sp, #8]
   14fa0:	add	sp, sp, #16
   14fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa8:	ldr	ip, [pc, #156]	; 1504c <__assert_fail@plt+0x4144>
   14fac:	cmp	r2, #0
   14fb0:	cmpne	r1, #0
   14fb4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14fb8:	strd	r6, [sp, #8]
   14fbc:	mov	r6, r2
   14fc0:	str	r8, [sp, #16]
   14fc4:	mov	r8, r3
   14fc8:	strd	sl, [sp, #20]
   14fcc:	ldrd	r4, [ip]
   14fd0:	str	lr, [sp, #28]
   14fd4:	sub	sp, sp, #48	; 0x30
   14fd8:	mov	lr, #10
   14fdc:	ldrd	r2, [ip, #8]
   14fe0:	ldrd	sl, [ip, #16]
   14fe4:	strd	r4, [sp]
   14fe8:	ldrd	r4, [ip, #32]
   14fec:	str	lr, [sp]
   14ff0:	strd	r2, [sp, #8]
   14ff4:	strd	sl, [sp, #16]
   14ff8:	ldrd	r2, [ip, #24]
   14ffc:	ldrd	sl, [ip, #40]	; 0x28
   15000:	strd	r2, [sp, #24]
   15004:	strd	r4, [sp, #32]
   15008:	strd	sl, [sp, #40]	; 0x28
   1500c:	beq	15048 <__assert_fail@plt+0x4140>
   15010:	ldr	r2, [sp, #80]	; 0x50
   15014:	mov	r7, r1
   15018:	mov	r3, sp
   1501c:	mov	r1, r8
   15020:	str	r7, [sp, #40]	; 0x28
   15024:	str	r6, [sp, #44]	; 0x2c
   15028:	bl	14834 <__assert_fail@plt+0x392c>
   1502c:	add	sp, sp, #48	; 0x30
   15030:	ldrd	r4, [sp]
   15034:	ldrd	r6, [sp, #8]
   15038:	ldr	r8, [sp, #16]
   1503c:	ldrd	sl, [sp, #20]
   15040:	add	sp, sp, #28
   15044:	pop	{pc}		; (ldr pc, [sp], #4)
   15048:	bl	10efc <abort@plt>
   1504c:	muleq	r3, r8, r3
   15050:	mvn	ip, #0
   15054:	push	{lr}		; (str lr, [sp, #-4]!)
   15058:	sub	sp, sp, #12
   1505c:	str	ip, [sp]
   15060:	bl	14fa8 <__assert_fail@plt+0x40a0>
   15064:	add	sp, sp, #12
   15068:	pop	{pc}		; (ldr pc, [sp], #4)
   1506c:	mvn	ip, #0
   15070:	push	{lr}		; (str lr, [sp, #-4]!)
   15074:	sub	sp, sp, #12
   15078:	mov	r3, r2
   1507c:	mov	r2, r1
   15080:	mov	r1, r0
   15084:	mov	r0, #0
   15088:	str	ip, [sp]
   1508c:	bl	14fa8 <__assert_fail@plt+0x40a0>
   15090:	add	sp, sp, #12
   15094:	pop	{pc}		; (ldr pc, [sp], #4)
   15098:	push	{lr}		; (str lr, [sp, #-4]!)
   1509c:	sub	sp, sp, #12
   150a0:	str	r3, [sp]
   150a4:	mov	r3, r2
   150a8:	mov	r2, r1
   150ac:	mov	r1, r0
   150b0:	mov	r0, #0
   150b4:	bl	14fa8 <__assert_fail@plt+0x40a0>
   150b8:	add	sp, sp, #12
   150bc:	pop	{pc}		; (ldr pc, [sp], #4)
   150c0:	ldr	r3, [pc]	; 150c8 <__assert_fail@plt+0x41c0>
   150c4:	b	14834 <__assert_fail@plt+0x392c>
   150c8:	andeq	r8, r2, r0, lsl #2
   150cc:	mov	r2, r1
   150d0:	ldr	r3, [pc, #8]	; 150e0 <__assert_fail@plt+0x41d8>
   150d4:	mov	r1, r0
   150d8:	mov	r0, #0
   150dc:	b	14834 <__assert_fail@plt+0x392c>
   150e0:	andeq	r8, r2, r0, lsl #2
   150e4:	ldr	r3, [pc, #4]	; 150f0 <__assert_fail@plt+0x41e8>
   150e8:	mvn	r2, #0
   150ec:	b	14834 <__assert_fail@plt+0x392c>
   150f0:	andeq	r8, r2, r0, lsl #2
   150f4:	mov	r1, r0
   150f8:	ldr	r3, [pc, #8]	; 15108 <__assert_fail@plt+0x4200>
   150fc:	mvn	r2, #0
   15100:	mov	r0, #0
   15104:	b	14834 <__assert_fail@plt+0x392c>
   15108:	andeq	r8, r2, r0, lsl #2
   1510c:	cmp	r1, #0
   15110:	strd	r4, [sp, #-16]!
   15114:	mov	ip, r3
   15118:	str	r6, [sp, #8]
   1511c:	mov	r4, r0
   15120:	str	lr, [sp, #12]
   15124:	sub	sp, sp, #32
   15128:	ldr	r5, [sp, #48]	; 0x30
   1512c:	ldr	r6, [sp, #52]	; 0x34
   15130:	beq	15274 <__assert_fail@plt+0x436c>
   15134:	mov	r3, r1
   15138:	mov	r1, #1
   1513c:	stm	sp, {r2, ip}
   15140:	movw	r2, #29660	; 0x73dc
   15144:	movt	r2, #1
   15148:	bl	10e6c <__fprintf_chk@plt>
   1514c:	mov	r2, #5
   15150:	movw	r1, #29680	; 0x73f0
   15154:	movt	r1, #1
   15158:	mov	r0, #0
   1515c:	bl	10d4c <dcgettext@plt>
   15160:	movw	ip, #2022	; 0x7e6
   15164:	mov	r3, r0
   15168:	mov	r1, #1
   1516c:	movw	r2, #30408	; 0x76c8
   15170:	movt	r2, #1
   15174:	mov	r0, r4
   15178:	str	ip, [sp]
   1517c:	bl	10e6c <__fprintf_chk@plt>
   15180:	mov	r1, r4
   15184:	mov	r0, #10
   15188:	bl	10d40 <fputc_unlocked@plt>
   1518c:	mov	r2, #5
   15190:	movw	r1, #29684	; 0x73f4
   15194:	movt	r1, #1
   15198:	mov	r0, #0
   1519c:	bl	10d4c <dcgettext@plt>
   151a0:	mov	r2, r0
   151a4:	mov	r1, #1
   151a8:	movw	r3, #29856	; 0x74a0
   151ac:	movt	r3, #1
   151b0:	mov	r0, r4
   151b4:	bl	10e6c <__fprintf_chk@plt>
   151b8:	mov	r1, r4
   151bc:	mov	r0, #10
   151c0:	bl	10d40 <fputc_unlocked@plt>
   151c4:	cmp	r6, #9
   151c8:	ldrls	pc, [pc, r6, lsl #2]
   151cc:	b	154e0 <__assert_fail@plt+0x45d8>
   151d0:	andeq	r5, r1, r0, ror #4
   151d4:	muleq	r1, r0, r2
   151d8:	andeq	r5, r1, ip, asr #5
   151dc:	andeq	r5, r1, ip, lsl #6
   151e0:	andeq	r5, r1, r4, asr r3
   151e4:	andeq	r5, r1, ip, lsl #7
   151e8:	ldrdeq	r5, [r1], -r4
   151ec:	andeq	r5, r1, r8, lsr #8
   151f0:	andeq	r5, r1, r0, lsl #9
   151f4:	strdeq	r5, [r1], -r8
   151f8:	movw	r1, #30160	; 0x75d0
   151fc:	movt	r1, #1
   15200:	mov	r2, #5
   15204:	mov	r0, #0
   15208:	bl	10d4c <dcgettext@plt>
   1520c:	ldr	lr, [r5, #4]
   15210:	mov	r2, r0
   15214:	mov	r1, #1
   15218:	mov	r0, r4
   1521c:	ldr	r3, [r5, #8]
   15220:	ldr	ip, [r5, #32]
   15224:	str	lr, [sp]
   15228:	ldr	lr, [r5, #12]
   1522c:	str	ip, [sp, #28]
   15230:	ldr	ip, [r5, #28]
   15234:	str	r3, [sp, #4]
   15238:	ldr	r3, [r5, #16]
   1523c:	str	lr, [sp, #8]
   15240:	ldr	lr, [r5, #20]
   15244:	str	ip, [sp, #24]
   15248:	ldr	ip, [r5, #24]
   1524c:	str	r3, [sp, #12]
   15250:	ldr	r3, [r5]
   15254:	str	lr, [sp, #16]
   15258:	str	ip, [sp, #20]
   1525c:	bl	10e6c <__fprintf_chk@plt>
   15260:	add	sp, sp, #32
   15264:	ldrd	r4, [sp]
   15268:	ldr	r6, [sp, #8]
   1526c:	add	sp, sp, #12
   15270:	pop	{pc}		; (ldr pc, [sp], #4)
   15274:	mov	r3, r2
   15278:	mov	r1, #1
   1527c:	str	ip, [sp]
   15280:	movw	r2, #29672	; 0x73e8
   15284:	movt	r2, #1
   15288:	bl	10e6c <__fprintf_chk@plt>
   1528c:	b	1514c <__assert_fail@plt+0x4244>
   15290:	mov	r2, #5
   15294:	movw	r1, #29892	; 0x74c4
   15298:	movt	r1, #1
   1529c:	mov	r0, #0
   152a0:	bl	10d4c <dcgettext@plt>
   152a4:	ldr	r3, [r5]
   152a8:	mov	r2, r0
   152ac:	mov	r1, #1
   152b0:	mov	r0, r4
   152b4:	add	sp, sp, #32
   152b8:	ldrd	r4, [sp]
   152bc:	ldr	r6, [sp, #8]
   152c0:	ldr	lr, [sp, #12]
   152c4:	add	sp, sp, #16
   152c8:	b	10e6c <__fprintf_chk@plt>
   152cc:	mov	r2, #5
   152d0:	movw	r1, #29908	; 0x74d4
   152d4:	movt	r1, #1
   152d8:	mov	r0, #0
   152dc:	bl	10d4c <dcgettext@plt>
   152e0:	ldm	r5, {r3, ip}
   152e4:	mov	r2, r0
   152e8:	mov	r1, #1
   152ec:	mov	r0, r4
   152f0:	str	ip, [sp, #48]	; 0x30
   152f4:	add	sp, sp, #32
   152f8:	ldrd	r4, [sp]
   152fc:	ldr	r6, [sp, #8]
   15300:	ldr	lr, [sp, #12]
   15304:	add	sp, sp, #16
   15308:	b	10e6c <__fprintf_chk@plt>
   1530c:	mov	r2, #5
   15310:	movw	r1, #29932	; 0x74ec
   15314:	movt	r1, #1
   15318:	mov	r0, #0
   1531c:	bl	10d4c <dcgettext@plt>
   15320:	ldm	r5, {r3, lr}
   15324:	mov	r2, r0
   15328:	mov	r1, #1
   1532c:	mov	r0, r4
   15330:	ldr	ip, [r5, #8]
   15334:	str	lr, [sp, #48]	; 0x30
   15338:	str	ip, [sp, #52]	; 0x34
   1533c:	add	sp, sp, #32
   15340:	ldrd	r4, [sp]
   15344:	ldr	r6, [sp, #8]
   15348:	ldr	lr, [sp, #12]
   1534c:	add	sp, sp, #16
   15350:	b	10e6c <__fprintf_chk@plt>
   15354:	mov	r2, #5
   15358:	movw	r1, #29960	; 0x7508
   1535c:	movt	r1, #1
   15360:	mov	r0, #0
   15364:	bl	10d4c <dcgettext@plt>
   15368:	ldmib	r5, {r3, ip, lr}
   1536c:	mov	r2, r0
   15370:	mov	r1, #1
   15374:	mov	r0, r4
   15378:	str	r3, [sp]
   1537c:	ldr	r3, [r5]
   15380:	stmib	sp, {ip, lr}
   15384:	bl	10e6c <__fprintf_chk@plt>
   15388:	b	15260 <__assert_fail@plt+0x4358>
   1538c:	mov	r2, #5
   15390:	movw	r1, #29992	; 0x7528
   15394:	movt	r1, #1
   15398:	mov	r0, #0
   1539c:	bl	10d4c <dcgettext@plt>
   153a0:	ldmib	r5, {ip, lr}
   153a4:	mov	r2, r0
   153a8:	mov	r1, #1
   153ac:	mov	r0, r4
   153b0:	ldr	r3, [r5, #16]
   153b4:	str	ip, [sp]
   153b8:	ldr	ip, [r5, #12]
   153bc:	str	r3, [sp, #12]
   153c0:	ldr	r3, [r5]
   153c4:	str	lr, [sp, #4]
   153c8:	str	ip, [sp, #8]
   153cc:	bl	10e6c <__fprintf_chk@plt>
   153d0:	b	15260 <__assert_fail@plt+0x4358>
   153d4:	mov	r2, #5
   153d8:	movw	r1, #30028	; 0x754c
   153dc:	movt	r1, #1
   153e0:	mov	r0, #0
   153e4:	bl	10d4c <dcgettext@plt>
   153e8:	ldr	lr, [r5, #4]
   153ec:	mov	r2, r0
   153f0:	mov	r1, #1
   153f4:	mov	r0, r4
   153f8:	ldr	r3, [r5, #8]
   153fc:	ldr	ip, [r5, #20]
   15400:	str	lr, [sp]
   15404:	ldr	lr, [r5, #12]
   15408:	str	ip, [sp, #16]
   1540c:	ldr	ip, [r5, #16]
   15410:	str	r3, [sp, #4]
   15414:	ldr	r3, [r5]
   15418:	str	lr, [sp, #8]
   1541c:	str	ip, [sp, #12]
   15420:	bl	10e6c <__fprintf_chk@plt>
   15424:	b	15260 <__assert_fail@plt+0x4358>
   15428:	mov	r2, #5
   1542c:	movw	r1, #30068	; 0x7574
   15430:	movt	r1, #1
   15434:	mov	r0, #0
   15438:	bl	10d4c <dcgettext@plt>
   1543c:	ldmib	r5, {r3, ip}
   15440:	mov	r2, r0
   15444:	mov	r1, #1
   15448:	mov	r0, r4
   1544c:	ldr	lr, [r5, #24]
   15450:	str	r3, [sp]
   15454:	ldr	r3, [r5, #12]
   15458:	str	lr, [sp, #20]
   1545c:	ldr	lr, [r5, #20]
   15460:	str	ip, [sp, #4]
   15464:	ldr	ip, [r5, #16]
   15468:	str	r3, [sp, #8]
   1546c:	ldr	r3, [r5]
   15470:	str	ip, [sp, #12]
   15474:	str	lr, [sp, #16]
   15478:	bl	10e6c <__fprintf_chk@plt>
   1547c:	b	15260 <__assert_fail@plt+0x4358>
   15480:	mov	r2, #5
   15484:	movw	r1, #30112	; 0x75a0
   15488:	movt	r1, #1
   1548c:	mov	r0, #0
   15490:	bl	10d4c <dcgettext@plt>
   15494:	ldmib	r5, {ip, lr}
   15498:	mov	r2, r0
   1549c:	mov	r1, #1
   154a0:	mov	r0, r4
   154a4:	ldr	r3, [r5, #28]
   154a8:	str	ip, [sp]
   154ac:	ldr	ip, [r5, #12]
   154b0:	str	r3, [sp, #24]
   154b4:	ldr	r3, [r5, #24]
   154b8:	str	lr, [sp, #4]
   154bc:	ldr	lr, [r5, #16]
   154c0:	str	ip, [sp, #8]
   154c4:	ldr	ip, [r5, #20]
   154c8:	str	r3, [sp, #20]
   154cc:	ldr	r3, [r5]
   154d0:	str	lr, [sp, #12]
   154d4:	str	ip, [sp, #16]
   154d8:	bl	10e6c <__fprintf_chk@plt>
   154dc:	b	15260 <__assert_fail@plt+0x4358>
   154e0:	movw	r1, #30212	; 0x7604
   154e4:	movt	r1, #1
   154e8:	b	15200 <__assert_fail@plt+0x42f8>
   154ec:	strd	r4, [sp, #-12]!
   154f0:	str	lr, [sp, #8]
   154f4:	sub	sp, sp, #12
   154f8:	ldr	r5, [sp, #24]
   154fc:	ldr	ip, [r5]
   15500:	cmp	ip, #0
   15504:	beq	15520 <__assert_fail@plt+0x4618>
   15508:	mov	lr, r5
   1550c:	mov	ip, #0
   15510:	ldr	r4, [lr, #4]!
   15514:	add	ip, ip, #1
   15518:	cmp	r4, #0
   1551c:	bne	15510 <__assert_fail@plt+0x4608>
   15520:	stm	sp, {r5, ip}
   15524:	bl	1510c <__assert_fail@plt+0x4204>
   15528:	add	sp, sp, #12
   1552c:	ldrd	r4, [sp]
   15530:	add	sp, sp, #8
   15534:	pop	{pc}		; (ldr pc, [sp], #4)
   15538:	strd	r4, [sp, #-16]!
   1553c:	mov	ip, #0
   15540:	str	r6, [sp, #8]
   15544:	str	lr, [sp, #12]
   15548:	sub	sp, sp, #48	; 0x30
   1554c:	ldr	r5, [sp, #64]	; 0x40
   15550:	add	r6, sp, #8
   15554:	mov	r4, r6
   15558:	ldr	lr, [r5], #4
   1555c:	cmp	lr, #0
   15560:	str	lr, [r4], #4
   15564:	beq	15574 <__assert_fail@plt+0x466c>
   15568:	add	ip, ip, #1
   1556c:	cmp	ip, #10
   15570:	bne	15558 <__assert_fail@plt+0x4650>
   15574:	stm	sp, {r6, ip}
   15578:	bl	1510c <__assert_fail@plt+0x4204>
   1557c:	add	sp, sp, #48	; 0x30
   15580:	ldrd	r4, [sp]
   15584:	ldr	r6, [sp, #8]
   15588:	add	sp, sp, #12
   1558c:	pop	{pc}		; (ldr pc, [sp], #4)
   15590:	push	{r3}		; (str r3, [sp, #-4]!)
   15594:	mov	ip, #0
   15598:	strd	r4, [sp, #-12]!
   1559c:	str	lr, [sp, #8]
   155a0:	sub	sp, sp, #56	; 0x38
   155a4:	add	r3, sp, #72	; 0x48
   155a8:	add	r5, sp, #16
   155ac:	mov	r4, r3
   155b0:	mov	lr, r5
   155b4:	str	r3, [sp, #12]
   155b8:	ldr	r3, [r4], #4
   155bc:	cmp	r3, #0
   155c0:	str	r3, [lr], #4
   155c4:	beq	155d4 <__assert_fail@plt+0x46cc>
   155c8:	add	ip, ip, #1
   155cc:	cmp	ip, #10
   155d0:	bne	155b8 <__assert_fail@plt+0x46b0>
   155d4:	ldr	r3, [sp, #68]	; 0x44
   155d8:	stm	sp, {r5, ip}
   155dc:	bl	1510c <__assert_fail@plt+0x4204>
   155e0:	add	sp, sp, #56	; 0x38
   155e4:	ldrd	r4, [sp]
   155e8:	ldr	lr, [sp, #8]
   155ec:	add	sp, sp, #12
   155f0:	add	sp, sp, #4
   155f4:	bx	lr
   155f8:	movw	r3, #33100	; 0x814c
   155fc:	movt	r3, #2
   15600:	str	r4, [sp, #-8]!
   15604:	mov	r0, #10
   15608:	ldr	r1, [r3]
   1560c:	str	lr, [sp, #4]
   15610:	bl	10d40 <fputc_unlocked@plt>
   15614:	mov	r2, #5
   15618:	movw	r1, #30272	; 0x7640
   1561c:	movt	r1, #1
   15620:	mov	r0, #0
   15624:	bl	10d4c <dcgettext@plt>
   15628:	mov	r1, r0
   1562c:	movw	r2, #30292	; 0x7654
   15630:	movt	r2, #1
   15634:	mov	r0, #1
   15638:	bl	10e54 <__printf_chk@plt>
   1563c:	mov	r2, #5
   15640:	movw	r1, #30316	; 0x766c
   15644:	movt	r1, #1
   15648:	mov	r0, #0
   1564c:	bl	10d4c <dcgettext@plt>
   15650:	mov	r1, r0
   15654:	movw	r3, #28696	; 0x7018
   15658:	movt	r3, #1
   1565c:	movw	r2, #28736	; 0x7040
   15660:	movt	r2, #1
   15664:	mov	r0, #1
   15668:	bl	10e54 <__printf_chk@plt>
   1566c:	mov	r2, #5
   15670:	movw	r1, #30336	; 0x7680
   15674:	movt	r1, #1
   15678:	mov	r0, #0
   1567c:	bl	10d4c <dcgettext@plt>
   15680:	mov	r1, r0
   15684:	movw	r2, #30376	; 0x76a8
   15688:	movt	r2, #1
   1568c:	mov	r0, #1
   15690:	ldr	r4, [sp]
   15694:	ldr	lr, [sp, #4]
   15698:	add	sp, sp, #8
   1569c:	b	10e54 <__printf_chk@plt>
   156a0:	str	r4, [sp, #-8]!
   156a4:	str	lr, [sp, #4]
   156a8:	bl	166c4 <__assert_fail@plt+0x57bc>
   156ac:	cmp	r0, #0
   156b0:	beq	156c0 <__assert_fail@plt+0x47b8>
   156b4:	ldr	r4, [sp]
   156b8:	add	sp, sp, #4
   156bc:	pop	{pc}		; (ldr pc, [sp], #4)
   156c0:	bl	15b18 <__assert_fail@plt+0x4c10>
   156c4:	str	r4, [sp, #-8]!
   156c8:	str	lr, [sp, #4]
   156cc:	bl	166c4 <__assert_fail@plt+0x57bc>
   156d0:	cmp	r0, #0
   156d4:	beq	156e4 <__assert_fail@plt+0x47dc>
   156d8:	ldr	r4, [sp]
   156dc:	add	sp, sp, #4
   156e0:	pop	{pc}		; (ldr pc, [sp], #4)
   156e4:	bl	15b18 <__assert_fail@plt+0x4c10>
   156e8:	str	r4, [sp, #-8]!
   156ec:	str	lr, [sp, #4]
   156f0:	bl	166c4 <__assert_fail@plt+0x57bc>
   156f4:	cmp	r0, #0
   156f8:	beq	15708 <__assert_fail@plt+0x4800>
   156fc:	ldr	r4, [sp]
   15700:	add	sp, sp, #4
   15704:	pop	{pc}		; (ldr pc, [sp], #4)
   15708:	bl	15b18 <__assert_fail@plt+0x4c10>
   1570c:	strd	r4, [sp, #-16]!
   15710:	mov	r5, r0
   15714:	mov	r4, r1
   15718:	str	r6, [sp, #8]
   1571c:	str	lr, [sp, #12]
   15720:	bl	16700 <__assert_fail@plt+0x57f8>
   15724:	cmp	r0, #0
   15728:	beq	1573c <__assert_fail@plt+0x4834>
   1572c:	ldrd	r4, [sp]
   15730:	ldr	r6, [sp, #8]
   15734:	add	sp, sp, #12
   15738:	pop	{pc}		; (ldr pc, [sp], #4)
   1573c:	adds	r4, r4, #0
   15740:	movne	r4, #1
   15744:	cmp	r5, #0
   15748:	moveq	r4, #1
   1574c:	cmp	r4, #0
   15750:	beq	1572c <__assert_fail@plt+0x4824>
   15754:	bl	15b18 <__assert_fail@plt+0x4c10>
   15758:	cmp	r1, #0
   1575c:	orreq	r1, r1, #1
   15760:	str	r4, [sp, #-8]!
   15764:	str	lr, [sp, #4]
   15768:	bl	16700 <__assert_fail@plt+0x57f8>
   1576c:	cmp	r0, #0
   15770:	beq	15780 <__assert_fail@plt+0x4878>
   15774:	ldr	r4, [sp]
   15778:	add	sp, sp, #4
   1577c:	pop	{pc}		; (ldr pc, [sp], #4)
   15780:	bl	15b18 <__assert_fail@plt+0x4c10>
   15784:	strd	r4, [sp, #-16]!
   15788:	mov	r4, r0
   1578c:	mov	r5, r2
   15790:	str	r6, [sp, #8]
   15794:	mov	r6, r1
   15798:	str	lr, [sp, #12]
   1579c:	bl	168fc <__assert_fail@plt+0x59f4>
   157a0:	cmp	r0, #0
   157a4:	beq	157b8 <__assert_fail@plt+0x48b0>
   157a8:	ldrd	r4, [sp]
   157ac:	ldr	r6, [sp, #8]
   157b0:	add	sp, sp, #12
   157b4:	pop	{pc}		; (ldr pc, [sp], #4)
   157b8:	cmp	r4, #0
   157bc:	beq	157cc <__assert_fail@plt+0x48c4>
   157c0:	cmp	r6, #0
   157c4:	cmpne	r5, #0
   157c8:	beq	157a8 <__assert_fail@plt+0x48a0>
   157cc:	bl	15b18 <__assert_fail@plt+0x4c10>
   157d0:	b	15784 <__assert_fail@plt+0x487c>
   157d4:	cmp	r2, #0
   157d8:	cmpne	r1, #0
   157dc:	str	r4, [sp, #-8]!
   157e0:	moveq	r2, #1
   157e4:	str	lr, [sp, #4]
   157e8:	moveq	r1, r2
   157ec:	bl	168fc <__assert_fail@plt+0x59f4>
   157f0:	cmp	r0, #0
   157f4:	beq	15804 <__assert_fail@plt+0x48fc>
   157f8:	ldr	r4, [sp]
   157fc:	add	sp, sp, #4
   15800:	pop	{pc}		; (ldr pc, [sp], #4)
   15804:	bl	15b18 <__assert_fail@plt+0x4c10>
   15808:	mov	r2, r1
   1580c:	mov	r1, r0
   15810:	mov	r0, #0
   15814:	b	15784 <__assert_fail@plt+0x487c>
   15818:	mov	r2, r1
   1581c:	mov	r1, r0
   15820:	mov	r0, #0
   15824:	b	157d4 <__assert_fail@plt+0x48cc>
   15828:	cmp	r0, #0
   1582c:	strd	r4, [sp, #-16]!
   15830:	mov	r5, r1
   15834:	ldr	r4, [r1]
   15838:	str	r6, [sp, #8]
   1583c:	str	lr, [sp, #12]
   15840:	beq	15870 <__assert_fail@plt+0x4968>
   15844:	lsr	r3, r4, #1
   15848:	add	r3, r3, #1
   1584c:	adds	r4, r4, r3
   15850:	bcs	1588c <__assert_fail@plt+0x4984>
   15854:	mov	r1, r4
   15858:	bl	15784 <__assert_fail@plt+0x487c>
   1585c:	ldr	r6, [sp, #8]
   15860:	str	r4, [r5]
   15864:	ldrd	r4, [sp]
   15868:	add	sp, sp, #12
   1586c:	pop	{pc}		; (ldr pc, [sp], #4)
   15870:	cmp	r4, #0
   15874:	bne	15854 <__assert_fail@plt+0x494c>
   15878:	mov	r4, #64	; 0x40
   1587c:	udiv	r4, r4, r2
   15880:	cmp	r2, #64	; 0x40
   15884:	addhi	r4, r4, #1
   15888:	b	15854 <__assert_fail@plt+0x494c>
   1588c:	bl	15b18 <__assert_fail@plt+0x4c10>
   15890:	mov	r2, #1
   15894:	b	15828 <__assert_fail@plt+0x4920>
   15898:	ldr	ip, [r1]
   1589c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   158a0:	mov	r5, r1
   158a4:	strd	r6, [sp, #8]
   158a8:	str	lr, [sp, #28]
   158ac:	strd	r8, [sp, #16]
   158b0:	asr	lr, ip, #1
   158b4:	ldr	r8, [sp, #32]
   158b8:	str	sl, [sp, #24]
   158bc:	adds	r4, ip, lr
   158c0:	mvn	lr, r3
   158c4:	lsr	lr, lr, #31
   158c8:	mvnvs	r4, #-2147483648	; 0x80000000
   158cc:	cmp	r3, r4
   158d0:	movge	r1, #0
   158d4:	andlt	r1, lr, #1
   158d8:	cmp	r1, #0
   158dc:	movne	r4, r3
   158e0:	smull	r6, r7, r4, r8
   158e4:	cmp	r7, r6, asr #31
   158e8:	bne	15970 <__assert_fail@plt+0x4a68>
   158ec:	cmp	r6, #63	; 0x3f
   158f0:	mov	r1, r6
   158f4:	ble	15958 <__assert_fail@plt+0x4a50>
   158f8:	cmp	r0, #0
   158fc:	sub	r6, r4, ip
   15900:	streq	r0, [r5]
   15904:	cmp	r6, r2
   15908:	bge	15938 <__assert_fail@plt+0x4a30>
   1590c:	adds	r4, ip, r2
   15910:	bvs	1596c <__assert_fail@plt+0x4a64>
   15914:	cmp	r4, r3
   15918:	movle	r3, #0
   1591c:	andgt	r3, lr, #1
   15920:	cmp	r3, #0
   15924:	bne	1596c <__assert_fail@plt+0x4a64>
   15928:	smull	r8, r9, r4, r8
   1592c:	cmp	r9, r8, asr #31
   15930:	mov	r1, r8
   15934:	bne	1596c <__assert_fail@plt+0x4a64>
   15938:	bl	1570c <__assert_fail@plt+0x4804>
   1593c:	ldrd	r6, [sp, #8]
   15940:	ldrd	r8, [sp, #16]
   15944:	ldr	sl, [sp, #24]
   15948:	str	r4, [r5]
   1594c:	ldrd	r4, [sp]
   15950:	add	sp, sp, #28
   15954:	pop	{pc}		; (ldr pc, [sp], #4)
   15958:	mov	r6, #64	; 0x40
   1595c:	sdiv	r4, r6, r8
   15960:	mls	r1, r8, r4, r6
   15964:	sub	r1, r6, r1
   15968:	b	158f8 <__assert_fail@plt+0x49f0>
   1596c:	bl	15b18 <__assert_fail@plt+0x4c10>
   15970:	mvn	r6, #-2147483648	; 0x80000000
   15974:	b	1595c <__assert_fail@plt+0x4a54>
   15978:	mov	r1, #1
   1597c:	str	r4, [sp, #-8]!
   15980:	str	lr, [sp, #4]
   15984:	bl	16650 <__assert_fail@plt+0x5748>
   15988:	cmp	r0, #0
   1598c:	beq	1599c <__assert_fail@plt+0x4a94>
   15990:	ldr	r4, [sp]
   15994:	add	sp, sp, #4
   15998:	pop	{pc}		; (ldr pc, [sp], #4)
   1599c:	bl	15b18 <__assert_fail@plt+0x4c10>
   159a0:	mov	r1, #1
   159a4:	str	r4, [sp, #-8]!
   159a8:	str	lr, [sp, #4]
   159ac:	bl	16650 <__assert_fail@plt+0x5748>
   159b0:	cmp	r0, #0
   159b4:	beq	159c4 <__assert_fail@plt+0x4abc>
   159b8:	ldr	r4, [sp]
   159bc:	add	sp, sp, #4
   159c0:	pop	{pc}		; (ldr pc, [sp], #4)
   159c4:	bl	15b18 <__assert_fail@plt+0x4c10>
   159c8:	str	r4, [sp, #-8]!
   159cc:	str	lr, [sp, #4]
   159d0:	bl	16650 <__assert_fail@plt+0x5748>
   159d4:	cmp	r0, #0
   159d8:	beq	159e8 <__assert_fail@plt+0x4ae0>
   159dc:	ldr	r4, [sp]
   159e0:	add	sp, sp, #4
   159e4:	pop	{pc}		; (ldr pc, [sp], #4)
   159e8:	bl	15b18 <__assert_fail@plt+0x4c10>
   159ec:	str	r4, [sp, #-8]!
   159f0:	str	lr, [sp, #4]
   159f4:	bl	16650 <__assert_fail@plt+0x5748>
   159f8:	cmp	r0, #0
   159fc:	beq	15a0c <__assert_fail@plt+0x4b04>
   15a00:	ldr	r4, [sp]
   15a04:	add	sp, sp, #4
   15a08:	pop	{pc}		; (ldr pc, [sp], #4)
   15a0c:	bl	15b18 <__assert_fail@plt+0x4c10>
   15a10:	strd	r4, [sp, #-16]!
   15a14:	mov	r4, r1
   15a18:	str	r6, [sp, #8]
   15a1c:	mov	r6, r0
   15a20:	mov	r0, r1
   15a24:	str	lr, [sp, #12]
   15a28:	bl	166c4 <__assert_fail@plt+0x57bc>
   15a2c:	subs	r5, r0, #0
   15a30:	beq	15a54 <__assert_fail@plt+0x4b4c>
   15a34:	mov	r2, r4
   15a38:	mov	r1, r6
   15a3c:	bl	10d04 <memcpy@plt>
   15a40:	mov	r0, r5
   15a44:	ldrd	r4, [sp]
   15a48:	ldr	r6, [sp, #8]
   15a4c:	add	sp, sp, #12
   15a50:	pop	{pc}		; (ldr pc, [sp], #4)
   15a54:	bl	15b18 <__assert_fail@plt+0x4c10>
   15a58:	strd	r4, [sp, #-16]!
   15a5c:	mov	r4, r1
   15a60:	str	r6, [sp, #8]
   15a64:	mov	r6, r0
   15a68:	mov	r0, r1
   15a6c:	str	lr, [sp, #12]
   15a70:	bl	166c4 <__assert_fail@plt+0x57bc>
   15a74:	subs	r5, r0, #0
   15a78:	beq	15a9c <__assert_fail@plt+0x4b94>
   15a7c:	mov	r2, r4
   15a80:	mov	r1, r6
   15a84:	bl	10d04 <memcpy@plt>
   15a88:	mov	r0, r5
   15a8c:	ldrd	r4, [sp]
   15a90:	ldr	r6, [sp, #8]
   15a94:	add	sp, sp, #12
   15a98:	pop	{pc}		; (ldr pc, [sp], #4)
   15a9c:	bl	15b18 <__assert_fail@plt+0x4c10>
   15aa0:	strd	r4, [sp, #-16]!
   15aa4:	mov	r4, r1
   15aa8:	str	r6, [sp, #8]
   15aac:	mov	r6, r0
   15ab0:	add	r0, r1, #1
   15ab4:	str	lr, [sp, #12]
   15ab8:	bl	166c4 <__assert_fail@plt+0x57bc>
   15abc:	subs	r5, r0, #0
   15ac0:	beq	15aec <__assert_fail@plt+0x4be4>
   15ac4:	mov	r3, #0
   15ac8:	mov	r1, r6
   15acc:	mov	r2, r4
   15ad0:	strb	r3, [r5, r4]
   15ad4:	bl	10d04 <memcpy@plt>
   15ad8:	mov	r0, r5
   15adc:	ldrd	r4, [sp]
   15ae0:	ldr	r6, [sp, #8]
   15ae4:	add	sp, sp, #12
   15ae8:	pop	{pc}		; (ldr pc, [sp], #4)
   15aec:	bl	15b18 <__assert_fail@plt+0x4c10>
   15af0:	str	r4, [sp, #-8]!
   15af4:	mov	r4, r0
   15af8:	str	lr, [sp, #4]
   15afc:	bl	10e18 <strlen@plt>
   15b00:	add	r1, r0, #1
   15b04:	mov	r0, r4
   15b08:	ldr	r4, [sp]
   15b0c:	ldr	lr, [sp, #4]
   15b10:	add	sp, sp, #8
   15b14:	b	15a10 <__assert_fail@plt+0x4b08>
   15b18:	movw	r3, #33004	; 0x80ec
   15b1c:	movt	r3, #2
   15b20:	str	r4, [sp, #-8]!
   15b24:	ldr	r4, [r3]
   15b28:	mov	r2, #5
   15b2c:	movw	r1, #30456	; 0x76f8
   15b30:	movt	r1, #1
   15b34:	mov	r0, #0
   15b38:	str	lr, [sp, #4]
   15b3c:	bl	10d4c <dcgettext@plt>
   15b40:	mov	r3, r0
   15b44:	movw	r2, #29380	; 0x72c4
   15b48:	movt	r2, #1
   15b4c:	mov	r1, #0
   15b50:	mov	r0, r4
   15b54:	bl	10db8 <error@plt>
   15b58:	bl	10efc <abort@plt>
   15b5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b60:	strd	r6, [sp, #8]
   15b64:	mov	r6, r2
   15b68:	mov	r7, r3
   15b6c:	str	r8, [sp, #16]
   15b70:	mov	r2, r1
   15b74:	mov	r1, #0
   15b78:	str	lr, [sp, #20]
   15b7c:	sub	sp, sp, #16
   15b80:	mov	r8, r0
   15b84:	ldr	ip, [sp, #48]	; 0x30
   15b88:	add	r3, sp, #8
   15b8c:	str	ip, [sp]
   15b90:	bl	15ca8 <__assert_fail@plt+0x4da0>
   15b94:	subs	r4, r0, #0
   15b98:	bne	15be8 <__assert_fail@plt+0x4ce0>
   15b9c:	ldrd	r4, [sp, #8]
   15ba0:	ldrd	r0, [sp, #40]	; 0x28
   15ba4:	cmp	r5, r7
   15ba8:	cmpeq	r4, r6
   15bac:	movcc	r3, #1
   15bb0:	movcs	r3, #0
   15bb4:	cmp	r5, r1
   15bb8:	cmpeq	r4, r0
   15bbc:	orrhi	r3, r3, #1
   15bc0:	cmp	r3, #0
   15bc4:	bne	15c68 <__assert_fail@plt+0x4d60>
   15bc8:	mov	r0, r4
   15bcc:	mov	r1, r5
   15bd0:	add	sp, sp, #16
   15bd4:	ldrd	r4, [sp]
   15bd8:	ldrd	r6, [sp, #8]
   15bdc:	ldr	r8, [sp, #16]
   15be0:	add	sp, sp, #20
   15be4:	pop	{pc}		; (ldr pc, [sp], #4)
   15be8:	bl	10e30 <__errno_location@plt>
   15bec:	cmp	r4, #1
   15bf0:	moveq	r3, #75	; 0x4b
   15bf4:	moveq	r4, r3
   15bf8:	streq	r3, [r0]
   15bfc:	beq	15c50 <__assert_fail@plt+0x4d48>
   15c00:	cmp	r4, #3
   15c04:	beq	15c44 <__assert_fail@plt+0x4d3c>
   15c08:	ldr	r3, [sp, #56]	; 0x38
   15c0c:	ldr	r4, [r0]
   15c10:	cmp	r3, #0
   15c14:	beq	15c5c <__assert_fail@plt+0x4d54>
   15c18:	cmp	r4, #22
   15c1c:	moveq	r4, #0
   15c20:	mov	r0, r8
   15c24:	bl	150f4 <__assert_fail@plt+0x41ec>
   15c28:	movw	r2, #29376	; 0x72c0
   15c2c:	movt	r2, #1
   15c30:	str	r0, [sp]
   15c34:	mov	r1, r4
   15c38:	ldr	r3, [sp, #52]	; 0x34
   15c3c:	ldr	r0, [sp, #56]	; 0x38
   15c40:	bl	10db8 <error@plt>
   15c44:	mov	r3, #0
   15c48:	mov	r4, r3
   15c4c:	str	r3, [r0]
   15c50:	ldr	r3, [sp, #56]	; 0x38
   15c54:	cmp	r3, #0
   15c58:	bne	15c20 <__assert_fail@plt+0x4d18>
   15c5c:	mov	r3, #1
   15c60:	str	r3, [sp, #56]	; 0x38
   15c64:	b	15c18 <__assert_fail@plt+0x4d10>
   15c68:	bl	10e30 <__errno_location@plt>
   15c6c:	mov	r3, #0
   15c70:	mvn	r2, #-1073741824	; 0xc0000000
   15c74:	cmp	r5, r3
   15c78:	cmpeq	r4, r2
   15c7c:	movhi	r3, #75	; 0x4b
   15c80:	movls	r3, #34	; 0x22
   15c84:	mov	r4, r3
   15c88:	str	r3, [r0]
   15c8c:	ldr	r3, [sp, #56]	; 0x38
   15c90:	cmp	r3, #0
   15c94:	moveq	r3, #1
   15c98:	str	r3, [sp, #56]	; 0x38
   15c9c:	b	15c20 <__assert_fail@plt+0x4d18>
   15ca0:	mov	r1, #10
   15ca4:	b	15b5c <__assert_fail@plt+0x4c54>
   15ca8:	cmp	r2, #36	; 0x24
   15cac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15cb0:	strd	r6, [sp, #8]
   15cb4:	strd	r8, [sp, #16]
   15cb8:	strd	sl, [sp, #24]
   15cbc:	str	lr, [sp, #32]
   15cc0:	sub	sp, sp, #36	; 0x24
   15cc4:	bhi	16554 <__assert_fail@plt+0x564c>
   15cc8:	cmp	r1, #0
   15ccc:	mov	r8, r2
   15cd0:	mov	r6, r0
   15cd4:	mov	r5, r1
   15cd8:	mov	sl, r3
   15cdc:	addeq	r5, sp, #28
   15ce0:	bl	10e30 <__errno_location@plt>
   15ce4:	mov	r3, #0
   15ce8:	mov	r7, r0
   15cec:	str	r3, [r0]
   15cf0:	bl	10e00 <__ctype_b_loc@plt>
   15cf4:	ldrb	r3, [r6]
   15cf8:	mov	r2, r6
   15cfc:	ldr	r0, [r0]
   15d00:	b	15d08 <__assert_fail@plt+0x4e00>
   15d04:	ldrb	r3, [r2, #1]!
   15d08:	lsl	r1, r3, #1
   15d0c:	ldrh	r4, [r0, r1]
   15d10:	ands	r4, r4, #8192	; 0x2000
   15d14:	bne	15d04 <__assert_fail@plt+0x4dfc>
   15d18:	cmp	r3, #45	; 0x2d
   15d1c:	beq	15dbc <__assert_fail@plt+0x4eb4>
   15d20:	mov	r2, r8
   15d24:	mov	r3, r4
   15d28:	mov	r1, r5
   15d2c:	mov	r0, r6
   15d30:	bl	10d10 <__strtoull_internal@plt>
   15d34:	ldr	fp, [r5]
   15d38:	mov	r9, r0
   15d3c:	mov	r8, r1
   15d40:	cmp	fp, r6
   15d44:	beq	15da4 <__assert_fail@plt+0x4e9c>
   15d48:	ldr	r4, [r7]
   15d4c:	cmp	r4, #0
   15d50:	bne	15d94 <__assert_fail@plt+0x4e8c>
   15d54:	ldr	r3, [sp, #72]	; 0x48
   15d58:	cmp	r3, #0
   15d5c:	beq	15d6c <__assert_fail@plt+0x4e64>
   15d60:	ldrb	r6, [fp]
   15d64:	cmp	r6, #0
   15d68:	bne	160ac <__assert_fail@plt+0x51a4>
   15d6c:	str	r9, [sl]
   15d70:	str	r8, [sl, #4]
   15d74:	mov	r0, r4
   15d78:	add	sp, sp, #36	; 0x24
   15d7c:	ldrd	r4, [sp]
   15d80:	ldrd	r6, [sp, #8]
   15d84:	ldrd	r8, [sp, #16]
   15d88:	ldrd	sl, [sp, #24]
   15d8c:	add	sp, sp, #32
   15d90:	pop	{pc}		; (ldr pc, [sp], #4)
   15d94:	cmp	r4, #34	; 0x22
   15d98:	bne	15dbc <__assert_fail@plt+0x4eb4>
   15d9c:	mov	r4, #1
   15da0:	b	15d54 <__assert_fail@plt+0x4e4c>
   15da4:	ldr	r3, [sp, #72]	; 0x48
   15da8:	cmp	r3, #0
   15dac:	beq	15dbc <__assert_fail@plt+0x4eb4>
   15db0:	ldrb	r6, [r6]
   15db4:	cmp	r6, #0
   15db8:	bne	15dc4 <__assert_fail@plt+0x4ebc>
   15dbc:	mov	r4, #4
   15dc0:	b	15d74 <__assert_fail@plt+0x4e6c>
   15dc4:	mov	r1, r6
   15dc8:	mov	r0, r3
   15dcc:	bl	10e24 <strchr@plt>
   15dd0:	cmp	r0, #0
   15dd4:	movne	r9, #1
   15dd8:	movne	r8, #0
   15ddc:	beq	15dbc <__assert_fail@plt+0x4eb4>
   15de0:	sub	r3, r6, #69	; 0x45
   15de4:	cmp	r3, #47	; 0x2f
   15de8:	ldrls	pc, [pc, r3, lsl #2]
   15dec:	b	15ef4 <__assert_fail@plt+0x4fec>
   15df0:			; <UNDEFINED> instruction: 0x00015eb0
   15df4:	strdeq	r5, [r1], -r4
   15df8:			; <UNDEFINED> instruction: 0x00015eb0
   15dfc:	strdeq	r5, [r1], -r4
   15e00:	strdeq	r5, [r1], -r4
   15e04:	strdeq	r5, [r1], -r4
   15e08:			; <UNDEFINED> instruction: 0x00015eb0
   15e0c:	strdeq	r5, [r1], -r4
   15e10:			; <UNDEFINED> instruction: 0x00015eb0
   15e14:	strdeq	r5, [r1], -r4
   15e18:	strdeq	r5, [r1], -r4
   15e1c:			; <UNDEFINED> instruction: 0x00015eb0
   15e20:	strdeq	r5, [r1], -r4
   15e24:	strdeq	r5, [r1], -r4
   15e28:	strdeq	r5, [r1], -r4
   15e2c:			; <UNDEFINED> instruction: 0x00015eb0
   15e30:	strdeq	r5, [r1], -r4
   15e34:	strdeq	r5, [r1], -r4
   15e38:	strdeq	r5, [r1], -r4
   15e3c:	strdeq	r5, [r1], -r4
   15e40:			; <UNDEFINED> instruction: 0x00015eb0
   15e44:			; <UNDEFINED> instruction: 0x00015eb0
   15e48:	strdeq	r5, [r1], -r4
   15e4c:	strdeq	r5, [r1], -r4
   15e50:	strdeq	r5, [r1], -r4
   15e54:	strdeq	r5, [r1], -r4
   15e58:	strdeq	r5, [r1], -r4
   15e5c:	strdeq	r5, [r1], -r4
   15e60:	strdeq	r5, [r1], -r4
   15e64:	strdeq	r5, [r1], -r4
   15e68:	strdeq	r5, [r1], -r4
   15e6c:	strdeq	r5, [r1], -r4
   15e70:	strdeq	r5, [r1], -r4
   15e74:	strdeq	r5, [r1], -r4
   15e78:			; <UNDEFINED> instruction: 0x00015eb0
   15e7c:	strdeq	r5, [r1], -r4
   15e80:	strdeq	r5, [r1], -r4
   15e84:	strdeq	r5, [r1], -r4
   15e88:			; <UNDEFINED> instruction: 0x00015eb0
   15e8c:	strdeq	r5, [r1], -r4
   15e90:			; <UNDEFINED> instruction: 0x00015eb0
   15e94:	strdeq	r5, [r1], -r4
   15e98:	strdeq	r5, [r1], -r4
   15e9c:	strdeq	r5, [r1], -r4
   15ea0:	strdeq	r5, [r1], -r4
   15ea4:	strdeq	r5, [r1], -r4
   15ea8:	strdeq	r5, [r1], -r4
   15eac:			; <UNDEFINED> instruction: 0x00015eb0
   15eb0:	mov	r1, #48	; 0x30
   15eb4:	ldr	r0, [sp, #72]	; 0x48
   15eb8:	bl	10e24 <strchr@plt>
   15ebc:	cmp	r0, #0
   15ec0:	beq	15ef4 <__assert_fail@plt+0x4fec>
   15ec4:	ldrb	r3, [fp, #1]
   15ec8:	cmp	r3, #68	; 0x44
   15ecc:	beq	16420 <__assert_fail@plt+0x5518>
   15ed0:	cmp	r3, #105	; 0x69
   15ed4:	beq	160c4 <__assert_fail@plt+0x51bc>
   15ed8:	cmp	r3, #66	; 0x42
   15edc:	moveq	r3, #2
   15ee0:	movne	r3, #1
   15ee4:	moveq	r7, #1000	; 0x3e8
   15ee8:	movne	r7, #1024	; 0x400
   15eec:	str	r3, [sp, #4]
   15ef0:	b	15f00 <__assert_fail@plt+0x4ff8>
   15ef4:	mov	r3, #1
   15ef8:	mov	r7, #1024	; 0x400
   15efc:	str	r3, [sp, #4]
   15f00:	sub	r6, r6, #66	; 0x42
   15f04:	cmp	r6, #53	; 0x35
   15f08:	ldrls	pc, [pc, r6, lsl #2]
   15f0c:	b	16070 <__assert_fail@plt+0x5168>
   15f10:	andeq	r6, r1, r8, asr #7
   15f14:	andeq	r6, r1, r0, ror r0
   15f18:	andeq	r6, r1, r0, ror r0
   15f1c:	ldrdeq	r6, [r1], -r4
   15f20:	andeq	r6, r1, r0, ror r0
   15f24:	andeq	r5, r1, r8, ror #31
   15f28:	andeq	r6, r1, r0, ror r0
   15f2c:	andeq	r6, r1, r0, ror r0
   15f30:	andeq	r6, r1, r0, ror r0
   15f34:	andeq	r6, r1, r8, ror r0
   15f38:	andeq	r6, r1, r0, ror r0
   15f3c:	andeq	r6, r1, r4, ror r3
   15f40:	andeq	r6, r1, r0, ror r0
   15f44:	andeq	r6, r1, r0, ror r0
   15f48:	andeq	r6, r1, r4, asr #5
   15f4c:	andeq	r6, r1, r0, ror r0
   15f50:	andeq	r6, r1, r0, ror r0
   15f54:	andeq	r6, r1, r0, ror r0
   15f58:	andeq	r6, r1, ip, asr #4
   15f5c:	andeq	r6, r1, r0, ror r0
   15f60:	andeq	r6, r1, r0, ror r0
   15f64:	andeq	r6, r1, r0, ror r0
   15f68:	andeq	r6, r1, r0, ror r0
   15f6c:	andeq	r6, r1, ip, asr r1
   15f70:	andeq	r6, r1, r0, ror #1
   15f74:	andeq	r6, r1, r0, ror r0
   15f78:	andeq	r6, r1, r0, ror r0
   15f7c:	andeq	r6, r1, r0, ror r0
   15f80:	andeq	r6, r1, r0, ror r0
   15f84:	andeq	r6, r1, r0, ror r0
   15f88:	andeq	r6, r1, r0, ror r0
   15f8c:	andeq	r6, r1, r0, ror r0
   15f90:	andeq	r6, r1, r4, asr r3
   15f94:	andeq	r6, r1, r8, asr r0
   15f98:	andeq	r6, r1, r0, ror r0
   15f9c:	andeq	r6, r1, r0, ror r0
   15fa0:	andeq	r6, r1, r0, ror r0
   15fa4:	andeq	r5, r1, r8, ror #31
   15fa8:	andeq	r6, r1, r0, ror r0
   15fac:	andeq	r6, r1, r0, ror r0
   15fb0:	andeq	r6, r1, r0, ror r0
   15fb4:	andeq	r6, r1, r8, ror r0
   15fb8:	andeq	r6, r1, r0, ror r0
   15fbc:	andeq	r6, r1, r4, ror r3
   15fc0:	andeq	r6, r1, r0, ror r0
   15fc4:	andeq	r6, r1, r0, ror r0
   15fc8:	andeq	r6, r1, r0, ror r0
   15fcc:	andeq	r6, r1, r0, ror r0
   15fd0:	andeq	r6, r1, r0, ror r0
   15fd4:	andeq	r6, r1, r0, ror r0
   15fd8:	andeq	r6, r1, ip, asr #4
   15fdc:	andeq	r6, r1, r0, ror r0
   15fe0:	andeq	r6, r1, r0, ror r0
   15fe4:	andeq	r6, r1, ip, lsr r3
   15fe8:	asr	r3, r7, #31
   15fec:	mov	r2, r7
   15ff0:	cmp	r8, #0
   15ff4:	umull	r0, r1, r9, r7
   15ff8:	mov	ip, #0
   15ffc:	strd	r2, [sp, #8]
   16000:	bne	16454 <__assert_fail@plt+0x554c>
   16004:	mov	r2, r0
   16008:	mov	r3, r1
   1600c:	cmp	ip, #0
   16010:	bne	1609c <__assert_fail@plt+0x5194>
   16014:	cmp	r3, #0
   16018:	mov	lr, ip
   1601c:	bne	164b8 <__assert_fail@plt+0x55b0>
   16020:	umull	r2, r3, r2, r7
   16024:	mov	ip, r2
   16028:	mov	r1, r3
   1602c:	subs	r0, lr, #0
   16030:	bne	1609c <__assert_fail@plt+0x5194>
   16034:	cmp	r1, #0
   16038:	bne	16498 <__assert_fail@plt+0x5590>
   1603c:	umull	r2, r3, ip, r7
   16040:	mov	r6, r2
   16044:	mov	r2, r3
   16048:	cmp	r0, #0
   1604c:	mov	r9, r6
   16050:	mov	r8, r2
   16054:	bne	1609c <__assert_fail@plt+0x5194>
   16058:	ldr	r2, [sp, #4]
   1605c:	add	r3, fp, r2
   16060:	str	r3, [r5]
   16064:	ldrb	r3, [fp, r2]
   16068:	cmp	r3, #0
   1606c:	beq	15d6c <__assert_fail@plt+0x4e64>
   16070:	orr	r4, r4, #2
   16074:	b	15d6c <__assert_fail@plt+0x4e64>
   16078:	cmp	r8, #0
   1607c:	umull	r2, r3, r9, r7
   16080:	mov	ip, #0
   16084:	asr	r1, r7, #31
   16088:	bne	163f0 <__assert_fail@plt+0x54e8>
   1608c:	mov	r9, r2
   16090:	mov	r8, r3
   16094:	cmp	ip, #0
   16098:	beq	16058 <__assert_fail@plt+0x5150>
   1609c:	mvn	r9, #0
   160a0:	mov	r4, #1
   160a4:	mov	r8, r9
   160a8:	b	16058 <__assert_fail@plt+0x5150>
   160ac:	mov	r1, r6
   160b0:	ldr	r0, [sp, #72]	; 0x48
   160b4:	bl	10e24 <strchr@plt>
   160b8:	cmp	r0, #0
   160bc:	bne	15de0 <__assert_fail@plt+0x4ed8>
   160c0:	b	16070 <__assert_fail@plt+0x5168>
   160c4:	ldrb	r3, [fp, #2]
   160c8:	mov	r7, #1024	; 0x400
   160cc:	cmp	r3, #66	; 0x42
   160d0:	movne	r3, #1
   160d4:	moveq	r3, #3
   160d8:	str	r3, [sp, #4]
   160dc:	b	15f00 <__assert_fail@plt+0x4ff8>
   160e0:	asr	r3, r7, #31
   160e4:	mov	r2, r7
   160e8:	mov	ip, #0
   160ec:	mov	r0, #7
   160f0:	mov	lr, ip
   160f4:	mov	r6, r4
   160f8:	strd	r2, [sp, #8]
   160fc:	str	r5, [sp, #16]
   16100:	b	1612c <__assert_fail@plt+0x5224>
   16104:	umull	r2, r3, r9, r7
   16108:	mov	r9, r2
   1610c:	mov	r8, r3
   16110:	cmp	r1, #0
   16114:	beq	16124 <__assert_fail@plt+0x521c>
   16118:	mvn	r9, #0
   1611c:	mov	ip, #1
   16120:	mov	r8, r9
   16124:	subs	r0, r0, #1
   16128:	beq	16414 <__assert_fail@plt+0x550c>
   1612c:	cmp	r8, #0
   16130:	mov	r1, #0
   16134:	beq	16104 <__assert_fail@plt+0x51fc>
   16138:	umull	r4, r5, r9, r7
   1613c:	mov	r3, lr
   16140:	mov	r2, r5
   16144:	umlal	r2, r3, r8, r7
   16148:	cmp	r3, #0
   1614c:	bne	16574 <__assert_fail@plt+0x566c>
   16150:	mov	r9, r4
   16154:	mov	r8, r2
   16158:	b	16110 <__assert_fail@plt+0x5208>
   1615c:	asr	r3, r7, #31
   16160:	mov	r2, r7
   16164:	mov	r6, #0
   16168:	mov	lr, #8
   1616c:	mov	r0, r4
   16170:	mov	ip, r5
   16174:	strd	r2, [sp, #8]
   16178:	b	161a4 <__assert_fail@plt+0x529c>
   1617c:	umull	r2, r3, r9, r7
   16180:	mov	r9, r2
   16184:	mov	r8, r3
   16188:	cmp	r1, #0
   1618c:	beq	1619c <__assert_fail@plt+0x5294>
   16190:	mvn	r9, #0
   16194:	mov	r6, #1
   16198:	mov	r8, r9
   1619c:	subs	lr, lr, #1
   161a0:	beq	163e4 <__assert_fail@plt+0x54dc>
   161a4:	cmp	r8, #0
   161a8:	mov	r1, #0
   161ac:	beq	1617c <__assert_fail@plt+0x5274>
   161b0:	umull	r4, r5, r9, r7
   161b4:	mov	r3, #0
   161b8:	mov	r2, r5
   161bc:	umlal	r2, r3, r8, r7
   161c0:	cmp	r3, #0
   161c4:	bne	165cc <__assert_fail@plt+0x56c4>
   161c8:	mov	r9, r4
   161cc:	mov	r8, r2
   161d0:	b	16188 <__assert_fail@plt+0x5280>
   161d4:	asr	r3, r7, #31
   161d8:	mov	r2, r7
   161dc:	mov	r6, #0
   161e0:	mov	lr, #6
   161e4:	mov	r0, r4
   161e8:	mov	ip, r5
   161ec:	strd	r2, [sp, #8]
   161f0:	b	1621c <__assert_fail@plt+0x5314>
   161f4:	umull	r2, r3, r9, r7
   161f8:	mov	r9, r2
   161fc:	mov	r8, r3
   16200:	cmp	r1, #0
   16204:	beq	16214 <__assert_fail@plt+0x530c>
   16208:	mvn	r9, #0
   1620c:	mov	r6, #1
   16210:	mov	r8, r9
   16214:	subs	lr, lr, #1
   16218:	beq	163e4 <__assert_fail@plt+0x54dc>
   1621c:	cmp	r8, #0
   16220:	mov	r1, #0
   16224:	beq	161f4 <__assert_fail@plt+0x52ec>
   16228:	umull	r4, r5, r9, r7
   1622c:	mov	r3, #0
   16230:	mov	r2, r5
   16234:	umlal	r2, r3, r8, r7
   16238:	cmp	r3, #0
   1623c:	bne	16594 <__assert_fail@plt+0x568c>
   16240:	mov	r9, r4
   16244:	mov	r8, r2
   16248:	b	16200 <__assert_fail@plt+0x52f8>
   1624c:	asr	r3, r7, #31
   16250:	mov	r2, r7
   16254:	mov	r6, #0
   16258:	mov	lr, #4
   1625c:	mov	r0, r4
   16260:	mov	ip, r5
   16264:	strd	r2, [sp, #8]
   16268:	b	16294 <__assert_fail@plt+0x538c>
   1626c:	umull	r2, r3, r9, r7
   16270:	mov	r9, r2
   16274:	mov	r8, r3
   16278:	cmp	r1, #0
   1627c:	beq	1628c <__assert_fail@plt+0x5384>
   16280:	mvn	r9, #0
   16284:	mov	r6, #1
   16288:	mov	r8, r9
   1628c:	subs	lr, lr, #1
   16290:	beq	163e4 <__assert_fail@plt+0x54dc>
   16294:	cmp	r8, #0
   16298:	mov	r1, #0
   1629c:	beq	1626c <__assert_fail@plt+0x5364>
   162a0:	umull	r4, r5, r9, r7
   162a4:	mov	r3, #0
   162a8:	mov	r2, r5
   162ac:	umlal	r2, r3, r8, r7
   162b0:	cmp	r3, #0
   162b4:	bne	165b0 <__assert_fail@plt+0x56a8>
   162b8:	mov	r9, r4
   162bc:	mov	r8, r2
   162c0:	b	16278 <__assert_fail@plt+0x5370>
   162c4:	asr	r3, r7, #31
   162c8:	mov	r2, r7
   162cc:	mov	r6, #0
   162d0:	mov	lr, #5
   162d4:	mov	r0, r4
   162d8:	mov	ip, r5
   162dc:	strd	r2, [sp, #8]
   162e0:	b	1630c <__assert_fail@plt+0x5404>
   162e4:	umull	r2, r3, r9, r7
   162e8:	mov	r9, r2
   162ec:	mov	r8, r3
   162f0:	cmp	r1, #0
   162f4:	beq	16304 <__assert_fail@plt+0x53fc>
   162f8:	mvn	r9, #0
   162fc:	mov	r6, #1
   16300:	mov	r8, r9
   16304:	subs	lr, lr, #1
   16308:	beq	163e4 <__assert_fail@plt+0x54dc>
   1630c:	cmp	r8, #0
   16310:	mov	r1, #0
   16314:	beq	162e4 <__assert_fail@plt+0x53dc>
   16318:	umull	r4, r5, r9, r7
   1631c:	mov	r3, #0
   16320:	mov	r2, r5
   16324:	umlal	r2, r3, r8, r7
   16328:	cmp	r3, #0
   1632c:	bne	1651c <__assert_fail@plt+0x5614>
   16330:	mov	r9, r4
   16334:	mov	r8, r2
   16338:	b	162f0 <__assert_fail@plt+0x53e8>
   1633c:	lsr	r3, r8, #31
   16340:	adds	r9, r9, r9
   16344:	adc	r8, r8, r8
   16348:	cmp	r3, #0
   1634c:	beq	16058 <__assert_fail@plt+0x5150>
   16350:	b	1609c <__assert_fail@plt+0x5194>
   16354:	lsr	r3, r8, #23
   16358:	lsl	r8, r8, #9
   1635c:	cmp	r3, #0
   16360:	lsl	r3, r9, #9
   16364:	orr	r8, r8, r9, lsr #23
   16368:	bne	1609c <__assert_fail@plt+0x5194>
   1636c:	mov	r9, r3
   16370:	b	16058 <__assert_fail@plt+0x5150>
   16374:	asr	r3, r7, #31
   16378:	mov	r2, r7
   1637c:	cmp	r8, #0
   16380:	mov	r1, #0
   16384:	strd	r2, [sp, #8]
   16388:	umull	r2, r3, r9, r7
   1638c:	bne	16430 <__assert_fail@plt+0x5528>
   16390:	mov	r0, r2
   16394:	mov	ip, r3
   16398:	cmp	r1, #0
   1639c:	bne	1609c <__assert_fail@plt+0x5194>
   163a0:	cmp	ip, #0
   163a4:	bne	16478 <__assert_fail@plt+0x5570>
   163a8:	umull	r2, r3, r0, r7
   163ac:	mov	r6, r2
   163b0:	mov	r2, r3
   163b4:	cmp	r1, #0
   163b8:	mov	r9, r6
   163bc:	mov	r8, r2
   163c0:	beq	16058 <__assert_fail@plt+0x5150>
   163c4:	b	1609c <__assert_fail@plt+0x5194>
   163c8:	lsr	r3, r8, #22
   163cc:	lsl	r8, r8, #10
   163d0:	cmp	r3, #0
   163d4:	lsl	r3, r9, #10
   163d8:	orr	r8, r8, r9, lsr #22
   163dc:	beq	1636c <__assert_fail@plt+0x5464>
   163e0:	b	1609c <__assert_fail@plt+0x5194>
   163e4:	mov	r5, ip
   163e8:	orr	r4, r0, r6
   163ec:	b	16058 <__assert_fail@plt+0x5150>
   163f0:	strd	r2, [sp, #8]
   163f4:	mov	r3, ip
   163f8:	ldr	r2, [sp, #12]
   163fc:	umlal	r2, r3, r8, r7
   16400:	cmp	r3, #0
   16404:	bne	16538 <__assert_fail@plt+0x5630>
   16408:	mov	r8, r2
   1640c:	ldr	r9, [sp, #8]
   16410:	b	16094 <__assert_fail@plt+0x518c>
   16414:	orr	r4, r6, ip
   16418:	ldr	r5, [sp, #16]
   1641c:	b	16058 <__assert_fail@plt+0x5150>
   16420:	mov	r3, #2
   16424:	mov	r7, #1000	; 0x3e8
   16428:	str	r3, [sp, #4]
   1642c:	b	15f00 <__assert_fail@plt+0x4ff8>
   16430:	strd	r2, [sp, #16]
   16434:	mov	r3, r1
   16438:	ldr	r2, [sp, #20]
   1643c:	umlal	r2, r3, r8, r7
   16440:	cmp	r3, #0
   16444:	bne	16608 <__assert_fail@plt+0x5700>
   16448:	mov	ip, r2
   1644c:	ldr	r0, [sp, #16]
   16450:	b	16398 <__assert_fail@plt+0x5490>
   16454:	mov	r2, r1
   16458:	mov	r3, ip
   1645c:	umlal	r2, r3, r8, r7
   16460:	cmp	r3, #0
   16464:	strd	r2, [sp, #16]
   16468:	bne	164dc <__assert_fail@plt+0x55d4>
   1646c:	mov	r2, r0
   16470:	ldr	r3, [sp, #16]
   16474:	b	1600c <__assert_fail@plt+0x5104>
   16478:	umull	r8, r9, r0, r7
   1647c:	mov	r3, r1
   16480:	mov	r2, r9
   16484:	umlal	r2, r3, ip, r7
   16488:	cmp	r3, #0
   1648c:	bne	165e8 <__assert_fail@plt+0x56e0>
   16490:	mov	r6, r8
   16494:	b	163b4 <__assert_fail@plt+0x54ac>
   16498:	umull	r8, r9, ip, r7
   1649c:	mov	r3, r0
   164a0:	mov	r2, r9
   164a4:	umlal	r2, r3, r1, r7
   164a8:	cmp	r3, #0
   164ac:	bne	16630 <__assert_fail@plt+0x5728>
   164b0:	mov	r6, r8
   164b4:	b	16048 <__assert_fail@plt+0x5140>
   164b8:	umull	r8, r9, r2, r7
   164bc:	mov	r1, ip
   164c0:	mov	r0, r9
   164c4:	umlal	r0, r1, r3, r7
   164c8:	cmp	r1, #0
   164cc:	bne	164fc <__assert_fail@plt+0x55f4>
   164d0:	mov	ip, r8
   164d4:	mov	r1, r0
   164d8:	b	1602c <__assert_fail@plt+0x5124>
   164dc:	ldr	lr, [sp, #8]
   164e0:	mov	r2, r0
   164e4:	mov	ip, #1
   164e8:	ldr	r3, [sp, #12]
   164ec:	mul	r3, r9, r3
   164f0:	mla	r3, lr, r8, r3
   164f4:	add	r3, r3, r1
   164f8:	b	1600c <__assert_fail@plt+0x5104>
   164fc:	ldr	r1, [sp, #12]
   16500:	mov	lr, #1
   16504:	mov	ip, r8
   16508:	mul	r1, r2, r1
   1650c:	ldr	r2, [sp, #8]
   16510:	mla	r1, r3, r2, r1
   16514:	add	r1, r1, r9
   16518:	b	1602c <__assert_fail@plt+0x5124>
   1651c:	ldrd	r2, [sp, #8]
   16520:	mov	r1, #1
   16524:	mul	r3, r9, r3
   16528:	mov	r9, r4
   1652c:	mla	r8, r2, r8, r3
   16530:	add	r8, r8, r5
   16534:	b	162f0 <__assert_fail@plt+0x53e8>
   16538:	mul	r3, r9, r1
   1653c:	mov	ip, #1
   16540:	mla	r8, r7, r8, r3
   16544:	ldrd	r6, [sp, #8]
   16548:	mov	r9, r6
   1654c:	add	r8, r8, r7
   16550:	b	16094 <__assert_fail@plt+0x518c>
   16554:	movw	r3, #30476	; 0x770c
   16558:	movt	r3, #1
   1655c:	movw	r1, #30488	; 0x7718
   16560:	movt	r1, #1
   16564:	movw	r0, #30504	; 0x7728
   16568:	movt	r0, #1
   1656c:	mov	r2, #85	; 0x55
   16570:	bl	10f08 <__assert_fail@plt>
   16574:	ldr	r3, [sp, #12]
   16578:	mov	r1, #1
   1657c:	mul	r2, r9, r3
   16580:	ldr	r3, [sp, #8]
   16584:	mov	r9, r4
   16588:	mla	r8, r3, r8, r2
   1658c:	add	r8, r8, r5
   16590:	b	16110 <__assert_fail@plt+0x5208>
   16594:	ldrd	r2, [sp, #8]
   16598:	mov	r1, #1
   1659c:	mul	r3, r9, r3
   165a0:	mov	r9, r4
   165a4:	mla	r8, r2, r8, r3
   165a8:	add	r8, r8, r5
   165ac:	b	16200 <__assert_fail@plt+0x52f8>
   165b0:	ldrd	r2, [sp, #8]
   165b4:	mov	r1, #1
   165b8:	mul	r3, r9, r3
   165bc:	mov	r9, r4
   165c0:	mla	r8, r2, r8, r3
   165c4:	add	r8, r8, r5
   165c8:	b	16278 <__assert_fail@plt+0x5370>
   165cc:	ldrd	r2, [sp, #8]
   165d0:	mov	r1, #1
   165d4:	mul	r3, r9, r3
   165d8:	mov	r9, r4
   165dc:	mla	r8, r2, r8, r3
   165e0:	add	r8, r8, r5
   165e4:	b	16188 <__assert_fail@plt+0x5280>
   165e8:	ldr	r3, [sp, #12]
   165ec:	mov	r6, r8
   165f0:	mov	r1, #1
   165f4:	mul	r2, r0, r3
   165f8:	ldr	r3, [sp, #8]
   165fc:	mla	r2, ip, r3, r2
   16600:	add	r2, r2, r9
   16604:	b	163b4 <__assert_fail@plt+0x54ac>
   16608:	ldr	r3, [sp, #12]
   1660c:	mov	r1, #1
   16610:	ldr	r2, [sp, #16]
   16614:	mul	ip, r9, r3
   16618:	ldr	r3, [sp, #8]
   1661c:	mov	r0, r2
   16620:	mla	ip, r3, r8, ip
   16624:	ldr	r3, [sp, #20]
   16628:	add	ip, ip, r3
   1662c:	b	16398 <__assert_fail@plt+0x5490>
   16630:	ldr	r3, [sp, #12]
   16634:	mov	r6, r8
   16638:	mov	r0, #1
   1663c:	mul	r2, ip, r3
   16640:	ldr	r3, [sp, #8]
   16644:	mla	r2, r1, r3, r2
   16648:	add	r2, r2, r9
   1664c:	b	16048 <__assert_fail@plt+0x5140>
   16650:	cmp	r1, #0
   16654:	cmpne	r0, #0
   16658:	beq	166a4 <__assert_fail@plt+0x579c>
   1665c:	strd	r4, [sp, #-16]!
   16660:	umull	r4, r5, r0, r1
   16664:	str	r6, [sp, #8]
   16668:	str	lr, [sp, #12]
   1666c:	adds	r3, r5, #0
   16670:	movne	r3, #1
   16674:	cmp	r4, #0
   16678:	blt	16684 <__assert_fail@plt+0x577c>
   1667c:	cmp	r3, #0
   16680:	beq	166b0 <__assert_fail@plt+0x57a8>
   16684:	bl	10e30 <__errno_location@plt>
   16688:	mov	r3, #12
   1668c:	ldrd	r4, [sp]
   16690:	ldr	r6, [sp, #8]
   16694:	add	sp, sp, #12
   16698:	str	r3, [r0]
   1669c:	mov	r0, #0
   166a0:	pop	{pc}		; (ldr pc, [sp], #4)
   166a4:	mov	r1, #1
   166a8:	mov	r0, r1
   166ac:	b	10ca4 <calloc@plt>
   166b0:	ldrd	r4, [sp]
   166b4:	ldr	r6, [sp, #8]
   166b8:	ldr	lr, [sp, #12]
   166bc:	add	sp, sp, #16
   166c0:	b	10ca4 <calloc@plt>
   166c4:	cmp	r0, #0
   166c8:	beq	166d4 <__assert_fail@plt+0x57cc>
   166cc:	blt	166dc <__assert_fail@plt+0x57d4>
   166d0:	b	10dc4 <malloc@plt>
   166d4:	mov	r0, #1
   166d8:	b	10dc4 <malloc@plt>
   166dc:	str	r4, [sp, #-8]!
   166e0:	str	lr, [sp, #4]
   166e4:	bl	10e30 <__errno_location@plt>
   166e8:	mov	r3, #12
   166ec:	ldr	r4, [sp]
   166f0:	add	sp, sp, #4
   166f4:	str	r3, [r0]
   166f8:	mov	r0, #0
   166fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16700:	cmp	r0, #0
   16704:	beq	1672c <__assert_fail@plt+0x5824>
   16708:	cmp	r1, #0
   1670c:	str	r4, [sp, #-8]!
   16710:	str	lr, [sp, #4]
   16714:	beq	16734 <__assert_fail@plt+0x582c>
   16718:	blt	16748 <__assert_fail@plt+0x5840>
   1671c:	ldr	r4, [sp]
   16720:	ldr	lr, [sp, #4]
   16724:	add	sp, sp, #8
   16728:	b	10d58 <realloc@plt>
   1672c:	mov	r0, r1
   16730:	b	166c4 <__assert_fail@plt+0x57bc>
   16734:	bl	167e0 <__assert_fail@plt+0x58d8>
   16738:	ldr	r4, [sp]
   1673c:	add	sp, sp, #4
   16740:	mov	r0, #0
   16744:	pop	{pc}		; (ldr pc, [sp], #4)
   16748:	bl	10e30 <__errno_location@plt>
   1674c:	mov	r3, #12
   16750:	str	r3, [r0]
   16754:	b	16738 <__assert_fail@plt+0x5830>
   16758:	strd	r4, [sp, #-16]!
   1675c:	mov	r4, r0
   16760:	str	r6, [sp, #8]
   16764:	str	lr, [sp, #12]
   16768:	bl	10da0 <__fpending@plt>
   1676c:	ldr	r5, [r4]
   16770:	mov	r6, r0
   16774:	mov	r0, r4
   16778:	bl	12c20 <__assert_fail@plt+0x1d18>
   1677c:	mov	r4, r0
   16780:	and	r5, r5, #32
   16784:	cmp	r5, #0
   16788:	bne	167c0 <__assert_fail@plt+0x58b8>
   1678c:	cmp	r0, #0
   16790:	beq	167ac <__assert_fail@plt+0x58a4>
   16794:	cmp	r6, #0
   16798:	bne	167d8 <__assert_fail@plt+0x58d0>
   1679c:	bl	10e30 <__errno_location@plt>
   167a0:	ldr	r4, [r0]
   167a4:	subs	r4, r4, #9
   167a8:	mvnne	r4, #0
   167ac:	mov	r0, r4
   167b0:	ldrd	r4, [sp]
   167b4:	ldr	r6, [sp, #8]
   167b8:	add	sp, sp, #12
   167bc:	pop	{pc}		; (ldr pc, [sp], #4)
   167c0:	cmp	r0, #0
   167c4:	bne	167d8 <__assert_fail@plt+0x58d0>
   167c8:	bl	10e30 <__errno_location@plt>
   167cc:	str	r4, [r0]
   167d0:	mvn	r4, #0
   167d4:	b	167ac <__assert_fail@plt+0x58a4>
   167d8:	mvn	r4, #0
   167dc:	b	167ac <__assert_fail@plt+0x58a4>
   167e0:	strd	r4, [sp, #-12]!
   167e4:	mov	r5, r0
   167e8:	str	lr, [sp, #8]
   167ec:	sub	sp, sp, #12
   167f0:	bl	10e30 <__errno_location@plt>
   167f4:	mov	r4, r0
   167f8:	mov	r2, #0
   167fc:	ldr	r3, [r4]
   16800:	mov	r0, r5
   16804:	str	r2, [r4]
   16808:	str	r3, [sp]
   1680c:	str	r3, [sp, #4]
   16810:	bl	10cec <free@plt>
   16814:	ldr	r3, [r4]
   16818:	add	r2, sp, #8
   1681c:	clz	r3, r3
   16820:	lsr	r3, r3, #5
   16824:	add	r3, r2, r3, lsl #2
   16828:	ldr	r3, [r3, #-8]
   1682c:	str	r3, [r4]
   16830:	add	sp, sp, #12
   16834:	ldrd	r4, [sp]
   16838:	add	sp, sp, #8
   1683c:	pop	{pc}		; (ldr pc, [sp], #4)
   16840:	mov	r0, #14
   16844:	str	r4, [sp, #-8]!
   16848:	str	lr, [sp, #4]
   1684c:	bl	10ec0 <nl_langinfo@plt>
   16850:	cmp	r0, #0
   16854:	beq	16878 <__assert_fail@plt+0x5970>
   16858:	ldrb	r2, [r0]
   1685c:	movw	r3, #30544	; 0x7750
   16860:	movt	r3, #1
   16864:	ldr	r4, [sp]
   16868:	add	sp, sp, #4
   1686c:	cmp	r2, #0
   16870:	moveq	r0, r3
   16874:	pop	{pc}		; (ldr pc, [sp], #4)
   16878:	ldr	r4, [sp]
   1687c:	add	sp, sp, #4
   16880:	movw	r0, #30544	; 0x7750
   16884:	movt	r0, #1
   16888:	pop	{pc}		; (ldr pc, [sp], #4)
   1688c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16890:	mov	r5, r2
   16894:	strd	r6, [sp, #8]
   16898:	subs	r6, r0, #0
   1689c:	mov	r7, r1
   168a0:	str	lr, [sp, #16]
   168a4:	sub	sp, sp, #12
   168a8:	addeq	r6, sp, #4
   168ac:	mov	r0, r6
   168b0:	bl	10dac <mbrtowc@plt>
   168b4:	cmp	r5, #0
   168b8:	cmnne	r0, #3
   168bc:	mov	r4, r0
   168c0:	bhi	168dc <__assert_fail@plt+0x59d4>
   168c4:	mov	r0, r4
   168c8:	add	sp, sp, #12
   168cc:	ldrd	r4, [sp]
   168d0:	ldrd	r6, [sp, #8]
   168d4:	add	sp, sp, #16
   168d8:	pop	{pc}		; (ldr pc, [sp], #4)
   168dc:	mov	r0, #0
   168e0:	bl	16934 <__assert_fail@plt+0x5a2c>
   168e4:	cmp	r0, #0
   168e8:	bne	168c4 <__assert_fail@plt+0x59bc>
   168ec:	ldrb	r3, [r7]
   168f0:	mov	r4, #1
   168f4:	str	r3, [r6]
   168f8:	b	168c4 <__assert_fail@plt+0x59bc>
   168fc:	umull	r2, r3, r1, r2
   16900:	cmp	r3, #0
   16904:	bne	16910 <__assert_fail@plt+0x5a08>
   16908:	mov	r1, r2
   1690c:	b	16700 <__assert_fail@plt+0x57f8>
   16910:	str	r4, [sp, #-8]!
   16914:	str	lr, [sp, #4]
   16918:	bl	10e30 <__errno_location@plt>
   1691c:	mov	r3, #12
   16920:	ldr	r4, [sp]
   16924:	add	sp, sp, #4
   16928:	str	r3, [r0]
   1692c:	mov	r0, #0
   16930:	pop	{pc}		; (ldr pc, [sp], #4)
   16934:	push	{lr}		; (str lr, [sp, #-4]!)
   16938:	sub	sp, sp, #268	; 0x10c
   1693c:	movw	r2, #257	; 0x101
   16940:	add	r1, sp, #4
   16944:	bl	1698c <__assert_fail@plt+0x5a84>
   16948:	cmp	r0, #0
   1694c:	movne	r0, #0
   16950:	bne	16984 <__assert_fail@plt+0x5a7c>
   16954:	movw	r1, #30552	; 0x7758
   16958:	movt	r1, #1
   1695c:	add	r0, sp, #4
   16960:	bl	10cbc <strcmp@plt>
   16964:	cmp	r0, #0
   16968:	beq	16984 <__assert_fail@plt+0x5a7c>
   1696c:	add	r0, sp, #4
   16970:	movw	r1, #30556	; 0x775c
   16974:	movt	r1, #1
   16978:	bl	10cbc <strcmp@plt>
   1697c:	adds	r0, r0, #0
   16980:	movne	r0, #1
   16984:	add	sp, sp, #268	; 0x10c
   16988:	pop	{pc}		; (ldr pc, [sp], #4)
   1698c:	strd	r4, [sp, #-16]!
   16990:	mov	r5, r1
   16994:	mov	r1, #0
   16998:	mov	r4, r2
   1699c:	str	r6, [sp, #8]
   169a0:	str	lr, [sp, #12]
   169a4:	bl	10ea8 <setlocale@plt>
   169a8:	subs	r6, r0, #0
   169ac:	beq	16a2c <__assert_fail@plt+0x5b24>
   169b0:	bl	10e18 <strlen@plt>
   169b4:	cmp	r4, r0
   169b8:	bhi	169d8 <__assert_fail@plt+0x5ad0>
   169bc:	cmp	r4, #0
   169c0:	moveq	r0, #34	; 0x22
   169c4:	bne	169fc <__assert_fail@plt+0x5af4>
   169c8:	ldrd	r4, [sp]
   169cc:	ldr	r6, [sp, #8]
   169d0:	add	sp, sp, #12
   169d4:	pop	{pc}		; (ldr pc, [sp], #4)
   169d8:	add	r2, r0, #1
   169dc:	mov	r1, r6
   169e0:	mov	r0, r5
   169e4:	bl	10d04 <memcpy@plt>
   169e8:	ldrd	r4, [sp]
   169ec:	mov	r0, #0
   169f0:	ldr	r6, [sp, #8]
   169f4:	add	sp, sp, #12
   169f8:	pop	{pc}		; (ldr pc, [sp], #4)
   169fc:	sub	r4, r4, #1
   16a00:	mov	r1, r6
   16a04:	mov	r2, r4
   16a08:	mov	r0, r5
   16a0c:	bl	10d04 <memcpy@plt>
   16a10:	mov	r3, #0
   16a14:	mov	r0, #34	; 0x22
   16a18:	strb	r3, [r5, r4]
   16a1c:	ldrd	r4, [sp]
   16a20:	ldr	r6, [sp, #8]
   16a24:	add	sp, sp, #12
   16a28:	pop	{pc}		; (ldr pc, [sp], #4)
   16a2c:	cmp	r4, #0
   16a30:	mov	r0, #22
   16a34:	strbne	r6, [r5]
   16a38:	ldrd	r4, [sp]
   16a3c:	ldr	r6, [sp, #8]
   16a40:	add	sp, sp, #12
   16a44:	pop	{pc}		; (ldr pc, [sp], #4)
   16a48:	mov	r1, #0
   16a4c:	b	10ea8 <setlocale@plt>
   16a50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a54:	mov	r7, r0
   16a58:	ldr	r6, [pc, #72]	; 16aa8 <__assert_fail@plt+0x5ba0>
   16a5c:	ldr	r5, [pc, #72]	; 16aac <__assert_fail@plt+0x5ba4>
   16a60:	add	r6, pc, r6
   16a64:	add	r5, pc, r5
   16a68:	sub	r6, r6, r5
   16a6c:	mov	r8, r1
   16a70:	mov	r9, r2
   16a74:	bl	10c84 <calloc@plt-0x20>
   16a78:	asrs	r6, r6, #2
   16a7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a80:	mov	r4, #0
   16a84:	add	r4, r4, #1
   16a88:	ldr	r3, [r5], #4
   16a8c:	mov	r2, r9
   16a90:	mov	r1, r8
   16a94:	mov	r0, r7
   16a98:	blx	r3
   16a9c:	cmp	r6, r4
   16aa0:	bne	16a84 <__assert_fail@plt+0x5b7c>
   16aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16aa8:	andeq	r1, r1, ip, lsr #9
   16aac:	andeq	r1, r1, r4, lsr #9
   16ab0:	bx	lr
   16ab4:	ldr	r3, [pc, #12]	; 16ac8 <__assert_fail@plt+0x5bc0>
   16ab8:	mov	r1, #0
   16abc:	add	r3, pc, r3
   16ac0:	ldr	r2, [r3]
   16ac4:	b	10e3c <__cxa_atexit@plt>
   16ac8:	andeq	r1, r1, r0, lsr #12

Disassembly of section .fini:

00016acc <.fini>:
   16acc:	push	{r3, lr}
   16ad0:	pop	{r3, pc}
