
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010b58 <.init>:
   10b58:	push	{r3, lr}
   10b5c:	bl	10e40 <__assert_fail@plt+0x4c>
   10b60:	pop	{r3, pc}

Disassembly of section .plt:

00010b64 <fstatfs64@plt-0x14>:
   10b64:	push	{lr}		; (str lr, [sp, #-4]!)
   10b68:	ldr	lr, [pc, #4]	; 10b74 <fstatfs64@plt-0x4>
   10b6c:	add	lr, pc, lr
   10b70:	ldr	pc, [lr, #8]!
   10b74:	andeq	r7, r1, ip, lsl #9

00010b78 <fstatfs64@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1164]!	; 0x48c

00010b84 <calloc@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1156]!	; 0x484

00010b90 <raise@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1148]!	; 0x47c

00010b9c <strcmp@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1140]!	; 0x474

00010ba8 <strtol@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #94208	; 0x17000
   10bb0:	ldr	pc, [ip, #1132]!	; 0x46c

00010bb4 <getpwuid@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #94208	; 0x17000
   10bbc:	ldr	pc, [ip, #1124]!	; 0x464

00010bc0 <printf@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #94208	; 0x17000
   10bc8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bcc <getuid@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #94208	; 0x17000
   10bd4:	ldr	pc, [ip, #1108]!	; 0x454

00010bd8 <memmove@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #94208	; 0x17000
   10be0:	ldr	pc, [ip, #1100]!	; 0x44c

00010be4 <free@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #94208	; 0x17000
   10bec:	ldr	pc, [ip, #1092]!	; 0x444

00010bf0 <memcpy@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #94208	; 0x17000
   10bf8:	ldr	pc, [ip, #1084]!	; 0x43c

00010bfc <time@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1076]!	; 0x434

00010c08 <ctime@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1068]!	; 0x42c

00010c14 <realloc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1060]!	; 0x424

00010c20 <funlockfile@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1052]!	; 0x41c

00010c2c <__fxstatat64@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1044]!	; 0x414

00010c38 <__fxstat64@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #1036]!	; 0x40c

00010c44 <readlink@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #1028]!	; 0x404

00010c50 <fwrite@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c5c <ioctl@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c68 <strcpy@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c74 <open64@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c80 <getenv@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #988]!	; 0x3dc

00010c8c <malloc@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #980]!	; 0x3d4

00010c98 <__libc_start_main@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #972]!	; 0x3cc

00010ca4 <strerror@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #964]!	; 0x3c4

00010cb0 <__gmon_start__@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #956]!	; 0x3bc

00010cbc <__ctype_b_loc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #948]!	; 0x3b4

00010cc8 <strlen@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #940]!	; 0x3ac

00010cd4 <strchr@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #932]!	; 0x3a4

00010ce0 <openat64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #924]!	; 0x39c

00010cec <fprintf@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #916]!	; 0x394

00010cf8 <__errno_location@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #908]!	; 0x38c

00010d04 <snprintf@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #900]!	; 0x384

00010d10 <memset@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #892]!	; 0x37c

00010d1c <fcntl64@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #884]!	; 0x374

00010d28 <strrchr@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #876]!	; 0x36c

00010d34 <fputc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #868]!	; 0x364

00010d40 <readdir64@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #860]!	; 0x35c

00010d4c <fdopendir@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #852]!	; 0x354

00010d58 <putc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #844]!	; 0x34c

00010d64 <dirfd@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #836]!	; 0x344

00010d70 <flockfile@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #828]!	; 0x33c

00010d7c <fchdir@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #820]!	; 0x334

00010d88 <qsort@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #812]!	; 0x32c

00010d94 <__xstat64@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #804]!	; 0x324

00010da0 <isatty@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #796]!	; 0x31c

00010dac <strncmp@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #788]!	; 0x314

00010db8 <abort@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #780]!	; 0x30c

00010dc4 <close@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #772]!	; 0x304

00010dd0 <__lxstat64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #764]!	; 0x2fc

00010ddc <closedir@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #756]!	; 0x2f4

00010de8 <getgrgid@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #748]!	; 0x2ec

00010df4 <__assert_fail@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #740]!	; 0x2e4

Disassembly of section .text:

00010e00 <.text>:
   10e00:	b	11780 <__assert_fail@plt+0x98c>
   10e04:	mov	fp, #0
   10e08:	mov	lr, #0
   10e0c:	pop	{r1}		; (ldr r1, [sp], #4)
   10e10:	mov	r2, sp
   10e14:	push	{r2}		; (str r2, [sp, #-4]!)
   10e18:	push	{r0}		; (str r0, [sp, #-4]!)
   10e1c:	ldr	ip, [pc, #16]	; 10e34 <__assert_fail@plt+0x40>
   10e20:	push	{ip}		; (str ip, [sp, #-4]!)
   10e24:	ldr	r0, [pc, #12]	; 10e38 <__assert_fail@plt+0x44>
   10e28:	ldr	r3, [pc, #12]	; 10e3c <__assert_fail@plt+0x48>
   10e2c:	bl	10c98 <__libc_start_main@plt>
   10e30:	bl	10db8 <abort@plt>
   10e34:	andeq	r7, r1, r4, lsl #23
   10e38:	andeq	r0, r1, r0, lsl #28
   10e3c:	andeq	r7, r1, r4, lsr #22
   10e40:	ldr	r3, [pc, #20]	; 10e5c <__assert_fail@plt+0x68>
   10e44:	ldr	r2, [pc, #20]	; 10e60 <__assert_fail@plt+0x6c>
   10e48:	add	r3, pc, r3
   10e4c:	ldr	r2, [r3, r2]
   10e50:	cmp	r2, #0
   10e54:	bxeq	lr
   10e58:	b	10cb0 <__gmon_start__@plt>
   10e5c:			; <UNDEFINED> instruction: 0x000171b0
   10e60:	andeq	r0, r0, r4, ror #1
   10e64:	ldr	r0, [pc, #24]	; 10e84 <__assert_fail@plt+0x90>
   10e68:	ldr	r3, [pc, #24]	; 10e88 <__assert_fail@plt+0x94>
   10e6c:	cmp	r3, r0
   10e70:	bxeq	lr
   10e74:	ldr	r3, [pc, #16]	; 10e8c <__assert_fail@plt+0x98>
   10e78:	cmp	r3, #0
   10e7c:	bxeq	lr
   10e80:	bx	r3
   10e84:	andeq	r8, r2, r0, lsl r1
   10e88:	andeq	r8, r2, r0, lsl r1
   10e8c:	andeq	r0, r0, r0
   10e90:	ldr	r0, [pc, #36]	; 10ebc <__assert_fail@plt+0xc8>
   10e94:	ldr	r1, [pc, #36]	; 10ec0 <__assert_fail@plt+0xcc>
   10e98:	sub	r1, r1, r0
   10e9c:	asr	r1, r1, #2
   10ea0:	add	r1, r1, r1, lsr #31
   10ea4:	asrs	r1, r1, #1
   10ea8:	bxeq	lr
   10eac:	ldr	r3, [pc, #16]	; 10ec4 <__assert_fail@plt+0xd0>
   10eb0:	cmp	r3, #0
   10eb4:	bxeq	lr
   10eb8:	bx	r3
   10ebc:	andeq	r8, r2, r0, lsl r1
   10ec0:	andeq	r8, r2, r0, lsl r1
   10ec4:	andeq	r0, r0, r0
   10ec8:	push	{r4, lr}
   10ecc:	ldr	r4, [pc, #24]	; 10eec <__assert_fail@plt+0xf8>
   10ed0:	ldrb	r3, [r4]
   10ed4:	cmp	r3, #0
   10ed8:	popne	{r4, pc}
   10edc:	bl	10e64 <__assert_fail@plt+0x70>
   10ee0:	mov	r3, #1
   10ee4:	strb	r3, [r4]
   10ee8:	pop	{r4, pc}
   10eec:	andeq	r8, r2, r8, lsl r1
   10ef0:	b	10e90 <__assert_fail@plt+0x9c>
   10ef4:	ldr	r2, [r0]
   10ef8:	ldrh	r0, [r2, #56]	; 0x38
   10efc:	cmp	r0, #7
   10f00:	beq	10f8c <__assert_fail@plt+0x198>
   10f04:	ldr	r1, [r1]
   10f08:	ldrh	r3, [r1, #56]	; 0x38
   10f0c:	cmp	r3, #7
   10f10:	beq	10f8c <__assert_fail@plt+0x198>
   10f14:	cmp	r3, #10
   10f18:	cmpne	r0, #10
   10f1c:	beq	10f5c <__assert_fail@plt+0x168>
   10f20:	cmp	r0, r3
   10f24:	push	{lr}		; (str lr, [sp, #-4]!)
   10f28:	beq	10f74 <__assert_fail@plt+0x180>
   10f2c:	movw	ip, #33184	; 0x81a0
   10f30:	movt	ip, #2
   10f34:	ldr	lr, [r2, #48]	; 0x30
   10f38:	ldr	ip, [ip]
   10f3c:	orrs	ip, lr, ip
   10f40:	bne	10f74 <__assert_fail@plt+0x180>
   10f44:	cmp	r0, #1
   10f48:	beq	10f58 <__assert_fail@plt+0x164>
   10f4c:	cmp	r3, #1
   10f50:	bne	10f74 <__assert_fail@plt+0x180>
   10f54:	mvn	r0, #0
   10f58:	pop	{pc}		; (ldr pc, [sp], #4)
   10f5c:	cmp	r3, #10
   10f60:	bne	10f94 <__assert_fail@plt+0x1a0>
   10f64:	cmp	r0, #10
   10f68:	bne	10f9c <__assert_fail@plt+0x1a8>
   10f6c:	mov	r0, r2
   10f70:	b	12d9c <__assert_fail@plt+0x1fa8>
   10f74:	movw	r3, #33052	; 0x811c
   10f78:	movt	r3, #2
   10f7c:	pop	{lr}		; (ldr lr, [sp], #4)
   10f80:	mov	r0, r2
   10f84:	ldr	r3, [r3]
   10f88:	bx	r3
   10f8c:	mov	r0, #0
   10f90:	bx	lr
   10f94:	mov	r0, #1
   10f98:	bx	lr
   10f9c:	mvn	r0, #0
   10fa0:	bx	lr
   10fa4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10fa8:	subs	r4, r1, #0
   10fac:	strd	r6, [sp, #8]
   10fb0:	strd	r8, [sp, #16]
   10fb4:	strd	sl, [sp, #24]
   10fb8:	str	lr, [sp, #32]
   10fbc:	sub	sp, sp, #204	; 0xcc
   10fc0:	str	r0, [sp, #8]
   10fc4:	str	r4, [sp, #76]	; 0x4c
   10fc8:	beq	1129c <__assert_fail@plt+0x4a8>
   10fcc:	movw	r1, #33164	; 0x818c
   10fd0:	movt	r1, #2
   10fd4:	movw	r3, #33136	; 0x8170
   10fd8:	movt	r3, #2
   10fdc:	movw	r2, #33112	; 0x8158
   10fe0:	movt	r2, #2
   10fe4:	str	r1, [sp, #40]	; 0x28
   10fe8:	ldr	r3, [r3]
   10fec:	mov	r0, #0
   10ff0:	movw	ip, #33176	; 0x8198
   10ff4:	movt	ip, #2
   10ff8:	mov	sl, r0
   10ffc:	ldr	r1, [r1]
   11000:	mov	r5, r0
   11004:	mov	fp, r0
   11008:	str	r0, [sp, #16]
   1100c:	ldr	r2, [r2]
   11010:	str	r0, [sp, #20]
   11014:	str	r0, [sp, #24]
   11018:	orr	r3, r3, r1
   1101c:	str	r0, [sp, #44]	; 0x2c
   11020:	str	r0, [sp, #48]	; 0x30
   11024:	orr	r3, r3, r2
   11028:	mov	r2, #0
   1102c:	str	r3, [sp, #12]
   11030:	movw	r3, #33128	; 0x8168
   11034:	movt	r3, #2
   11038:	str	r0, [sp, #52]	; 0x34
   1103c:	str	r3, [sp, #56]	; 0x38
   11040:	movw	r3, #31636	; 0x7b94
   11044:	movt	r3, #1
   11048:	str	ip, [sp, #60]	; 0x3c
   1104c:	str	r0, [sp, #64]	; 0x40
   11050:	str	r3, [sp, #72]	; 0x48
   11054:	mov	r3, #0
   11058:	strd	r2, [sp, #32]
   1105c:	str	r0, [sp, #68]	; 0x44
   11060:	ldrh	r3, [r4, #56]	; 0x38
   11064:	cmp	r3, #10
   11068:	cmpne	r3, #7
   1106c:	beq	112dc <__assert_fail@plt+0x4e8>
   11070:	ldr	r2, [sp, #8]
   11074:	cmp	r2, #0
   11078:	beq	112b8 <__assert_fail@plt+0x4c4>
   1107c:	ldrb	r3, [r4, #168]	; 0xa8
   11080:	cmp	r3, #46	; 0x2e
   11084:	beq	11320 <__assert_fail@plt+0x52c>
   11088:	ldr	r3, [r4, #52]	; 0x34
   1108c:	cmp	r5, r3
   11090:	movcc	r5, r3
   11094:	ldr	r3, [sp, #12]
   11098:	cmp	r3, #0
   1109c:	beq	11224 <__assert_fail@plt+0x430>
   110a0:	ldr	r3, [sp, #24]
   110a4:	mov	r9, #0
   110a8:	ldr	ip, [r4, #84]	; 0x54
   110ac:	ldrd	r0, [r4, #128]	; 0x80
   110b0:	asr	r7, r3, #31
   110b4:	mov	r6, r3
   110b8:	strd	r6, [sp, #24]
   110bc:	ldrd	r6, [r4, #160]	; 0xa0
   110c0:	strd	r6, [sp]
   110c4:	ldrd	r6, [sp, #24]
   110c8:	cmp	r6, r0
   110cc:	sbcs	r2, r7, r1
   110d0:	ldrd	r6, [r4, #112]	; 0x70
   110d4:	movlt	r3, r0
   110d8:	str	r3, [sp, #24]
   110dc:	ldrd	r2, [sp]
   110e0:	cmp	r3, r9
   110e4:	ldr	r3, [sp]
   110e8:	cmpeq	r2, fp
   110ec:	movhi	fp, r3
   110f0:	ldr	r3, [sp, #20]
   110f4:	cmp	r3, ip
   110f8:	movcc	r3, ip
   110fc:	str	r3, [sp, #20]
   11100:	ldrd	r2, [sp, #32]
   11104:	cmp	r2, r6
   11108:	ldr	r2, [sp, #16]
   1110c:	sbcs	r3, r3, r7
   11110:	ldr	r3, [sp, #40]	; 0x28
   11114:	strdlt	r6, [sp, #32]
   11118:	add	r2, r2, r0
   1111c:	ldr	r3, [r3]
   11120:	str	r2, [sp, #16]
   11124:	cmp	r3, #0
   11128:	beq	11224 <__assert_fail@plt+0x430>
   1112c:	ldr	r3, [sp, #60]	; 0x3c
   11130:	ldr	r0, [r4, #88]	; 0x58
   11134:	ldr	r3, [r3]
   11138:	cmp	r3, #0
   1113c:	beq	11340 <__assert_fail@plt+0x54c>
   11140:	add	r2, sp, #104	; 0x68
   11144:	mov	r1, #0
   11148:	bl	172d8 <__assert_fail@plt+0x64e4>
   1114c:	mov	r8, r0
   11150:	add	r2, sp, #128	; 0x80
   11154:	mov	r1, #0
   11158:	ldr	r0, [r4, #92]	; 0x5c
   1115c:	bl	172d8 <__assert_fail@plt+0x64e4>
   11160:	str	r0, [sp]
   11164:	mov	r0, r8
   11168:	bl	10cc8 <strlen@plt>
   1116c:	ldr	r3, [sp, #48]	; 0x30
   11170:	mov	r6, r0
   11174:	ldr	r0, [sp]
   11178:	cmp	r3, r6
   1117c:	movlt	r3, r6
   11180:	str	r3, [sp, #48]	; 0x30
   11184:	bl	10cc8 <strlen@plt>
   11188:	ldr	r2, [sp, #44]	; 0x2c
   1118c:	ldr	r3, [sp, #56]	; 0x38
   11190:	cmp	r2, r0
   11194:	movlt	r2, r0
   11198:	ldr	r3, [r3]
   1119c:	str	r2, [sp, #44]	; 0x2c
   111a0:	cmp	r3, #0
   111a4:	beq	111b4 <__assert_fail@plt+0x3c0>
   111a8:	ldr	r2, [sp, #72]	; 0x48
   111ac:	mov	r3, #1
   111b0:	strd	r2, [sp, #64]	; 0x40
   111b4:	add	r7, r6, r0
   111b8:	add	r0, r7, #19
   111bc:	add	r0, r0, r3
   111c0:	bl	174f4 <__assert_fail@plt+0x6700>
   111c4:	subs	r9, r0, #0
   111c8:	beq	11470 <__assert_fail@plt+0x67c>
   111cc:	add	r2, r9, #12
   111d0:	add	r6, r6, #13
   111d4:	add	r6, r9, r6
   111d8:	mov	r0, r2
   111dc:	mov	r1, r8
   111e0:	str	r2, [r9]
   111e4:	bl	10c68 <strcpy@plt>
   111e8:	mov	r0, r6
   111ec:	str	r6, [r9, #4]
   111f0:	ldr	r1, [sp]
   111f4:	bl	10c68 <strcpy@plt>
   111f8:	ldr	r3, [sp, #56]	; 0x38
   111fc:	ldr	r2, [r4, #80]	; 0x50
   11200:	ldr	r1, [r3]
   11204:	ldr	r3, [sp, #52]	; 0x34
   11208:	and	r2, r2, #45056	; 0xb000
   1120c:	cmp	r2, #8192	; 0x2000
   11210:	moveq	r3, #1
   11214:	cmp	r1, #0
   11218:	str	r3, [sp, #52]	; 0x34
   1121c:	bne	11380 <__assert_fail@plt+0x58c>
   11220:	str	r9, [r4, #20]
   11224:	add	sl, sl, #1
   11228:	ldr	r4, [r4, #8]
   1122c:	cmp	r4, #0
   11230:	bne	11060 <__assert_fail@plt+0x26c>
   11234:	cmp	sl, #0
   11238:	beq	1129c <__assert_fail@plt+0x4a8>
   1123c:	ldr	r3, [sp, #12]
   11240:	str	sl, [sp, #164]	; 0xa4
   11244:	str	r5, [sp, #168]	; 0xa8
   11248:	cmp	r3, #0
   1124c:	ldr	r3, [sp, #76]	; 0x4c
   11250:	str	r3, [sp, #152]	; 0x98
   11254:	bne	113e8 <__assert_fail@plt+0x5f4>
   11258:	movw	r4, #33052	; 0x811c
   1125c:	movt	r4, #2
   11260:	add	r0, sp, #152	; 0x98
   11264:	ldr	r3, [r4, #4]
   11268:	blx	r3
   1126c:	ldr	r3, [sp, #40]	; 0x28
   11270:	mov	r2, #1
   11274:	str	r2, [r4, #8]
   11278:	ldr	r3, [r3]
   1127c:	cmp	r3, #0
   11280:	beq	1129c <__assert_fail@plt+0x4a8>
   11284:	ldr	r4, [sp, #76]	; 0x4c
   11288:	ldr	r0, [r4, #20]
   1128c:	bl	130dc <__assert_fail@plt+0x22e8>
   11290:	ldr	r4, [r4, #8]
   11294:	cmp	r4, #0
   11298:	bne	11288 <__assert_fail@plt+0x494>
   1129c:	add	sp, sp, #204	; 0xcc
   112a0:	ldrd	r4, [sp]
   112a4:	ldrd	r6, [sp, #8]
   112a8:	ldrd	r8, [sp, #16]
   112ac:	ldrd	sl, [sp, #24]
   112b0:	add	sp, sp, #32
   112b4:	pop	{pc}		; (ldr pc, [sp], #4)
   112b8:	cmp	r3, #1
   112bc:	bne	11088 <__assert_fail@plt+0x294>
   112c0:	movw	r2, #33184	; 0x81a0
   112c4:	movt	r2, #2
   112c8:	ldr	r2, [r2]
   112cc:	cmp	r2, #0
   112d0:	bne	11088 <__assert_fail@plt+0x294>
   112d4:	str	r3, [r4, #16]
   112d8:	b	11228 <__assert_fail@plt+0x434>
   112dc:	movw	r3, #33040	; 0x8110
   112e0:	movt	r3, #2
   112e4:	ldr	r0, [r4, #32]
   112e8:	ldr	r6, [r3]
   112ec:	bl	10ca4 <strerror@plt>
   112f0:	mov	r3, r0
   112f4:	add	r2, r4, #168	; 0xa8
   112f8:	movw	r1, #31640	; 0x7b98
   112fc:	movt	r1, #1
   11300:	mov	r0, r6
   11304:	bl	10cec <fprintf@plt>
   11308:	mov	r2, #1
   1130c:	movw	r3, #33160	; 0x8188
   11310:	movt	r3, #2
   11314:	str	r2, [r4, #16]
   11318:	str	r2, [r3]
   1131c:	b	11228 <__assert_fail@plt+0x434>
   11320:	movw	r3, #33200	; 0x81b0
   11324:	movt	r3, #2
   11328:	ldr	r3, [r3]
   1132c:	cmp	r3, #0
   11330:	bne	11088 <__assert_fail@plt+0x294>
   11334:	mov	r3, #1
   11338:	str	r3, [r4, #16]
   1133c:	b	11228 <__assert_fail@plt+0x434>
   11340:	bl	10bb4 <getpwuid@plt>
   11344:	subs	r3, r0, #0
   11348:	ldr	r0, [r4, #92]	; 0x5c
   1134c:	beq	1139c <__assert_fail@plt+0x5a8>
   11350:	ldr	r8, [r3]
   11354:	bl	10de8 <getgrgid@plt>
   11358:	cmp	r0, #0
   1135c:	beq	113c8 <__assert_fail@plt+0x5d4>
   11360:	ldr	r3, [r0]
   11364:	cmp	r8, #0
   11368:	str	r3, [sp]
   1136c:	beq	113b0 <__assert_fail@plt+0x5bc>
   11370:	ldr	r3, [sp]
   11374:	cmp	r3, #0
   11378:	bne	11164 <__assert_fail@plt+0x370>
   1137c:	b	11150 <__assert_fail@plt+0x35c>
   11380:	add	r7, r7, #14
   11384:	ldr	r1, [sp, #64]	; 0x40
   11388:	add	r7, r9, r7
   1138c:	mov	r0, r7
   11390:	str	r7, [r9, #8]
   11394:	bl	10c68 <strcpy@plt>
   11398:	b	11220 <__assert_fail@plt+0x42c>
   1139c:	bl	10de8 <getgrgid@plt>
   113a0:	subs	r1, r0, #0
   113a4:	beq	114b0 <__assert_fail@plt+0x6bc>
   113a8:	ldr	r3, [r1]
   113ac:	str	r3, [sp]
   113b0:	add	r2, sp, #104	; 0x68
   113b4:	mov	r1, #0
   113b8:	ldr	r0, [r4, #88]	; 0x58
   113bc:	bl	172d8 <__assert_fail@plt+0x64e4>
   113c0:	mov	r8, r0
   113c4:	b	11370 <__assert_fail@plt+0x57c>
   113c8:	cmp	r8, #0
   113cc:	bne	11150 <__assert_fail@plt+0x35c>
   113d0:	mov	r1, r8
   113d4:	add	r2, sp, #104	; 0x68
   113d8:	ldr	r0, [r4, #88]	; 0x58
   113dc:	bl	172d8 <__assert_fail@plt+0x64e4>
   113e0:	mov	r8, r0
   113e4:	b	11150 <__assert_fail@plt+0x35c>
   113e8:	ldr	r3, [sp, #16]
   113ec:	add	r2, sp, #80	; 0x50
   113f0:	ldr	r0, [sp, #24]
   113f4:	str	r3, [sp, #156]	; 0x9c
   113f8:	ldr	r3, [sp, #52]	; 0x34
   113fc:	asr	r1, r0, #31
   11400:	str	r3, [sp, #160]	; 0xa0
   11404:	bl	172d8 <__assert_fail@plt+0x64e4>
   11408:	bl	10cc8 <strlen@plt>
   1140c:	ldr	r3, [sp, #68]	; 0x44
   11410:	add	r2, sp, #80	; 0x50
   11414:	mov	r1, r4
   11418:	str	r0, [sp, #172]	; 0xac
   1141c:	mov	r0, fp
   11420:	str	r3, [sp, #176]	; 0xb0
   11424:	ldr	r3, [sp, #44]	; 0x2c
   11428:	str	r3, [sp, #180]	; 0xb4
   1142c:	bl	172d8 <__assert_fail@plt+0x64e4>
   11430:	bl	10cc8 <strlen@plt>
   11434:	mov	r1, r4
   11438:	add	r2, sp, #80	; 0x50
   1143c:	str	r0, [sp, #184]	; 0xb8
   11440:	ldr	r0, [sp, #20]
   11444:	bl	172d8 <__assert_fail@plt+0x64e4>
   11448:	bl	10cc8 <strlen@plt>
   1144c:	add	r2, sp, #80	; 0x50
   11450:	str	r0, [sp, #188]	; 0xbc
   11454:	ldrd	r0, [sp, #32]
   11458:	bl	172d8 <__assert_fail@plt+0x64e4>
   1145c:	bl	10cc8 <strlen@plt>
   11460:	ldr	r3, [sp, #48]	; 0x30
   11464:	str	r0, [sp, #192]	; 0xc0
   11468:	str	r3, [sp, #196]	; 0xc4
   1146c:	b	11258 <__assert_fail@plt+0x464>
   11470:	movw	r3, #33040	; 0x8110
   11474:	movt	r3, #2
   11478:	ldr	r4, [r3]
   1147c:	bl	10cf8 <__errno_location@plt>
   11480:	ldr	r0, [r0]
   11484:	bl	10ca4 <strerror@plt>
   11488:	mov	r2, r0
   1148c:	movw	r1, #31648	; 0x7ba0
   11490:	movt	r1, #1
   11494:	mov	r0, r4
   11498:	bl	10cec <fprintf@plt>
   1149c:	movw	r3, #33160	; 0x8188
   114a0:	movt	r3, #2
   114a4:	mov	r2, #1
   114a8:	str	r2, [r3]
   114ac:	b	1129c <__assert_fail@plt+0x4a8>
   114b0:	add	r2, sp, #104	; 0x68
   114b4:	ldr	r0, [r4, #88]	; 0x58
   114b8:	bl	172d8 <__assert_fail@plt+0x64e4>
   114bc:	mov	r8, r0
   114c0:	b	11150 <__assert_fail@plt+0x35c>
   114c4:	movw	r3, #33148	; 0x817c
   114c8:	movt	r3, #2
   114cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114d0:	ldr	r3, [r3]
   114d4:	mov	r5, r2
   114d8:	movw	r2, #3828	; 0xef4
   114dc:	movt	r2, #1
   114e0:	strd	r6, [sp, #8]
   114e4:	mov	r6, r1
   114e8:	strd	r8, [sp, #16]
   114ec:	mov	r1, r5
   114f0:	strd	sl, [sp, #24]
   114f4:	str	lr, [sp, #32]
   114f8:	sub	sp, sp, #12
   114fc:	cmp	r3, #0
   11500:	movne	r2, #0
   11504:	str	r0, [sp, #4]
   11508:	mov	r0, r6
   1150c:	bl	14680 <__assert_fail@plt+0x388c>
   11510:	subs	r4, r0, #0
   11514:	beq	11738 <__assert_fail@plt+0x944>
   11518:	mov	r1, #0
   1151c:	bl	15298 <__assert_fail@plt+0x44a4>
   11520:	mov	r1, r0
   11524:	mov	r0, #0
   11528:	bl	10fa4 <__assert_fail@plt+0x1b0>
   1152c:	movw	r3, #33184	; 0x81a0
   11530:	movt	r3, #2
   11534:	ldr	r6, [r3]
   11538:	cmp	r6, #0
   1153c:	bne	115f4 <__assert_fail@plt+0x800>
   11540:	movw	r7, #33132	; 0x816c
   11544:	movt	r7, #2
   11548:	ldr	r3, [r7]
   1154c:	cmp	r3, #0
   11550:	beq	116bc <__assert_fail@plt+0x8c8>
   11554:	movw	r5, #33040	; 0x8110
   11558:	movt	r5, #2
   1155c:	movw	r9, #31640	; 0x7b98
   11560:	movt	r9, #1
   11564:	movw	r8, #33160	; 0x8188
   11568:	movt	r8, #2
   1156c:	mov	r0, r4
   11570:	bl	14ba4 <__assert_fail@plt+0x3db0>
   11574:	subs	fp, r0, #0
   11578:	beq	115e4 <__assert_fail@plt+0x7f0>
   1157c:	ldrh	r3, [fp, #56]	; 0x38
   11580:	sub	r3, r3, #1
   11584:	cmp	r3, #6
   11588:	ldrls	pc, [pc, r3, lsl #2]
   1158c:	b	1156c <__assert_fail@plt+0x778>
   11590:	andeq	r1, r1, r8, lsr #12
   11594:	andeq	r1, r1, r0, lsl r6
   11598:	andeq	r1, r1, ip, ror #10
   1159c:	andeq	r1, r1, ip, lsr #11
   115a0:	andeq	r1, r1, ip, ror #10
   115a4:	andeq	r1, r1, ip, ror #10
   115a8:	andeq	r1, r1, ip, lsr #11
   115ac:	ldr	sl, [r5]
   115b0:	ldr	r0, [fp, #32]
   115b4:	bl	10ca4 <strerror@plt>
   115b8:	mov	r3, r0
   115bc:	add	r2, fp, #168	; 0xa8
   115c0:	mov	r1, r9
   115c4:	mov	r0, sl
   115c8:	bl	10cec <fprintf@plt>
   115cc:	mov	r3, #1
   115d0:	mov	r0, r4
   115d4:	str	r3, [r8]
   115d8:	bl	14ba4 <__assert_fail@plt+0x3db0>
   115dc:	subs	fp, r0, #0
   115e0:	bne	1157c <__assert_fail@plt+0x788>
   115e4:	bl	10cf8 <__errno_location@plt>
   115e8:	ldr	r0, [r0]
   115ec:	cmp	r0, #0
   115f0:	bne	11700 <__assert_fail@plt+0x90c>
   115f4:	add	sp, sp, #12
   115f8:	ldrd	r4, [sp]
   115fc:	ldrd	r6, [sp, #8]
   11600:	ldrd	r8, [sp, #16]
   11604:	ldrd	sl, [sp, #24]
   11608:	add	sp, sp, #32
   1160c:	pop	{pc}		; (ldr pc, [sp], #4)
   11610:	add	r2, fp, #168	; 0xa8
   11614:	movw	r1, #31696	; 0x7bd0
   11618:	movt	r1, #1
   1161c:	ldr	r0, [r5]
   11620:	bl	10cec <fprintf@plt>
   11624:	b	1156c <__assert_fail@plt+0x778>
   11628:	ldrb	r3, [fp, #168]	; 0xa8
   1162c:	cmp	r3, #46	; 0x2e
   11630:	beq	116c8 <__assert_fail@plt+0x8d4>
   11634:	movw	sl, #33052	; 0x811c
   11638:	movt	sl, #2
   1163c:	ldr	r2, [sl, #8]
   11640:	cmp	r2, #0
   11644:	bne	116ec <__assert_fail@plt+0x8f8>
   11648:	ldr	r3, [sp, #4]
   1164c:	cmp	r3, #1
   11650:	bgt	116a0 <__assert_fail@plt+0x8ac>
   11654:	mov	r1, r6
   11658:	mov	r0, r4
   1165c:	bl	15298 <__assert_fail@plt+0x44a4>
   11660:	mov	sl, r0
   11664:	mov	r1, r0
   11668:	mov	r0, fp
   1166c:	bl	10fa4 <__assert_fail@plt+0x1b0>
   11670:	ldr	r2, [r7]
   11674:	adds	r3, sl, #0
   11678:	movne	r3, #1
   1167c:	cmp	r2, #0
   11680:	movne	r3, #0
   11684:	cmp	r3, #0
   11688:	beq	1156c <__assert_fail@plt+0x778>
   1168c:	mov	r1, fp
   11690:	mov	r2, #4
   11694:	mov	r0, r4
   11698:	bl	15258 <__assert_fail@plt+0x4464>
   1169c:	b	1156c <__assert_fail@plt+0x778>
   116a0:	movw	r0, #31688	; 0x7bc8
   116a4:	movt	r0, #1
   116a8:	ldr	r1, [fp, #28]
   116ac:	bl	10bc0 <printf@plt>
   116b0:	mov	r2, #1
   116b4:	str	r2, [sl, #8]
   116b8:	b	11654 <__assert_fail@plt+0x860>
   116bc:	ands	r6, r5, #8
   116c0:	movne	r6, #4096	; 0x1000
   116c4:	b	11554 <__assert_fail@plt+0x760>
   116c8:	ldr	r3, [fp, #48]	; 0x30
   116cc:	cmp	r3, #0
   116d0:	beq	11634 <__assert_fail@plt+0x840>
   116d4:	movw	r3, #33200	; 0x81b0
   116d8:	movt	r3, #2
   116dc:	ldr	r3, [r3]
   116e0:	cmp	r3, #0
   116e4:	beq	1156c <__assert_fail@plt+0x778>
   116e8:	b	11634 <__assert_fail@plt+0x840>
   116ec:	movw	r0, #31680	; 0x7bc0
   116f0:	movt	r0, #1
   116f4:	ldr	r1, [fp, #28]
   116f8:	bl	10bc0 <printf@plt>
   116fc:	b	11654 <__assert_fail@plt+0x860>
   11700:	movw	r3, #33040	; 0x8110
   11704:	movt	r3, #2
   11708:	ldr	r4, [r3]
   1170c:	bl	10ca4 <strerror@plt>
   11710:	mov	r2, r0
   11714:	movw	r1, #31728	; 0x7bf0
   11718:	movt	r1, #1
   1171c:	mov	r0, r4
   11720:	bl	10cec <fprintf@plt>
   11724:	movw	r3, #33160	; 0x8188
   11728:	movt	r3, #2
   1172c:	mov	r2, #1
   11730:	str	r2, [r3]
   11734:	b	115f4 <__assert_fail@plt+0x800>
   11738:	movw	r3, #33040	; 0x8110
   1173c:	movt	r3, #2
   11740:	ldr	r5, [r6]
   11744:	ldr	r4, [r3]
   11748:	bl	10cf8 <__errno_location@plt>
   1174c:	ldr	r0, [r0]
   11750:	bl	10ca4 <strerror@plt>
   11754:	mov	r3, r0
   11758:	mov	r2, r5
   1175c:	mov	r0, r4
   11760:	movw	r1, #31660	; 0x7bac
   11764:	movt	r1, #1
   11768:	bl	10cec <fprintf@plt>
   1176c:	movw	r3, #33160	; 0x8188
   11770:	movt	r3, #2
   11774:	mov	r2, #1
   11778:	str	r2, [r3]
   1177c:	b	115f4 <__assert_fail@plt+0x800>
   11780:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11784:	movw	r4, #33200	; 0x81b0
   11788:	movt	r4, #2
   1178c:	strd	r6, [sp, #8]
   11790:	movw	r6, #33184	; 0x81a0
   11794:	movt	r6, #2
   11798:	strd	r8, [sp, #16]
   1179c:	movw	r3, #33144	; 0x8178
   117a0:	movt	r3, #2
   117a4:	strd	sl, [sp, #24]
   117a8:	mov	r5, #0
   117ac:	movw	r2, #33196	; 0x81ac
   117b0:	movt	r2, #2
   117b4:	str	lr, [sp, #32]
   117b8:	sub	sp, sp, #100	; 0x64
   117bc:	movw	ip, #33052	; 0x811c
   117c0:	movt	ip, #2
   117c4:	str	r5, [r2]
   117c8:	movw	lr, #33136	; 0x8170
   117cc:	movt	lr, #2
   117d0:	str	r4, [sp, #16]
   117d4:	movw	r4, #33148	; 0x817c
   117d8:	movt	r4, #2
   117dc:	str	r6, [sp, #48]	; 0x30
   117e0:	movw	r6, #33204	; 0x81b4
   117e4:	movt	r6, #2
   117e8:	str	r3, [sp, #28]
   117ec:	movw	r7, #33128	; 0x8168
   117f0:	movt	r7, #2
   117f4:	str	r4, [sp, #64]	; 0x40
   117f8:	movw	r4, #33172	; 0x8194
   117fc:	movt	r4, #2
   11800:	ldr	r2, [sp, #28]
   11804:	movw	fp, #33180	; 0x819c
   11808:	movt	fp, #2
   1180c:	str	r6, [sp, #44]	; 0x2c
   11810:	movw	r6, #33140	; 0x8174
   11814:	movt	r6, #2
   11818:	movw	r9, #33124	; 0x8164
   1181c:	movt	r9, #2
   11820:	str	r5, [lr]
   11824:	str	r4, [sp, #68]	; 0x44
   11828:	movw	r4, #33132	; 0x816c
   1182c:	movt	r4, #2
   11830:	movw	r8, #33164	; 0x818c
   11834:	movt	r8, #2
   11838:	str	r5, [r7]
   1183c:	str	r6, [sp, #24]
   11840:	movw	r6, #33208	; 0x81b8
   11844:	movt	r6, #2
   11848:	movw	sl, #33176	; 0x8198
   1184c:	movt	sl, #2
   11850:	str	r5, [r2]
   11854:	str	r4, [sp, #40]	; 0x28
   11858:	movw	r4, #33188	; 0x81a4
   1185c:	movt	r4, #2
   11860:	str	r6, [sp, #4]
   11864:	movw	r6, #33112	; 0x8158
   11868:	movt	r6, #2
   1186c:	movw	r3, #33116	; 0x815c
   11870:	movt	r3, #2
   11874:	str	r5, [r8]
   11878:	str	r4, [sp, #32]
   1187c:	movw	r4, #33156	; 0x8184
   11880:	movt	r4, #2
   11884:	str	r5, [r9]
   11888:	str	r6, [sp, #56]	; 0x38
   1188c:	movw	r6, #33168	; 0x8190
   11890:	movt	r6, #2
   11894:	str	r4, [sp, #20]
   11898:	movw	r4, #33152	; 0x8180
   1189c:	movt	r4, #2
   118a0:	str	r5, [fp]
   118a4:	str	r5, [r3]
   118a8:	str	ip, [sp, #12]
   118ac:	str	sl, [sp, #36]	; 0x24
   118b0:	movw	sl, #33120	; 0x8160
   118b4:	movt	sl, #2
   118b8:	str	r4, [sp, #52]	; 0x34
   118bc:	mov	r4, r0
   118c0:	mov	r0, #1
   118c4:	str	r6, [sp, #60]	; 0x3c
   118c8:	mov	r6, r1
   118cc:	str	lr, [sp, #72]	; 0x48
   118d0:	str	r7, [sp, #80]	; 0x50
   118d4:	ldr	r3, [sp, #16]
   118d8:	str	r5, [sl]
   118dc:	str	r5, [ip, #8]
   118e0:	str	r5, [r3]
   118e4:	ldr	r3, [sp, #48]	; 0x30
   118e8:	str	r5, [r3]
   118ec:	ldr	r3, [sp, #36]	; 0x24
   118f0:	str	r5, [r3]
   118f4:	ldr	r3, [sp, #64]	; 0x40
   118f8:	str	r5, [r3]
   118fc:	ldr	r3, [sp, #44]	; 0x2c
   11900:	str	r5, [r3]
   11904:	ldr	r3, [sp, #68]	; 0x44
   11908:	str	r5, [r3]
   1190c:	ldr	r3, [sp, #24]
   11910:	str	r5, [r3]
   11914:	ldr	r3, [sp, #40]	; 0x28
   11918:	str	r5, [r3]
   1191c:	ldr	r3, [sp, #4]
   11920:	str	r5, [r3]
   11924:	ldr	r3, [sp, #32]
   11928:	str	r5, [r3]
   1192c:	ldr	r3, [sp, #56]	; 0x38
   11930:	str	r5, [r3]
   11934:	ldr	r3, [sp, #20]
   11938:	str	r5, [r3]
   1193c:	ldr	r3, [sp, #60]	; 0x3c
   11940:	str	r5, [r3]
   11944:	ldr	r3, [sp, #52]	; 0x34
   11948:	str	r5, [r3]
   1194c:	bl	10da0 <isatty@plt>
   11950:	cmp	r0, r5
   11954:	moveq	r3, #1
   11958:	streq	r3, [sl]
   1195c:	bne	11e3c <__assert_fail@plt+0x1048>
   11960:	bl	10bcc <getuid@plt>
   11964:	cmp	r0, #0
   11968:	bne	11978 <__assert_fail@plt+0xb84>
   1196c:	ldr	r2, [sp, #16]
   11970:	mov	r3, #1
   11974:	str	r3, [r2]
   11978:	mov	r3, #1
   1197c:	movw	r2, #33028	; 0x8104
   11980:	movt	r2, #2
   11984:	movw	r5, #31752	; 0x7c08
   11988:	movt	r5, #1
   1198c:	mov	r7, r3
   11990:	movw	r1, #33192	; 0x81a8
   11994:	movt	r1, #2
   11998:	str	r3, [r2]
   1199c:	mov	r3, #20
   119a0:	str	r3, [sp, #8]
   119a4:	str	r2, [sp, #76]	; 0x4c
   119a8:	str	r1, [sp, #84]	; 0x54
   119ac:	mov	r2, r5
   119b0:	mov	r1, r6
   119b4:	mov	r0, r4
   119b8:	bl	1604c <__assert_fail@plt+0x5258>
   119bc:	cmn	r0, #1
   119c0:	beq	11b0c <__assert_fail@plt+0xd18>
   119c4:	sub	r0, r0, #49	; 0x31
   119c8:	cmp	r0, #71	; 0x47
   119cc:	ldrls	pc, [pc, r0, lsl #2]
   119d0:	b	11dfc <__assert_fail@plt+0x1008>
   119d4:	andeq	r1, r1, r4, asr #27
   119d8:	strdeq	r1, [r1], -ip
   119dc:	strdeq	r1, [r1], -ip
   119e0:	strdeq	r1, [r1], -ip
   119e4:	strdeq	r1, [r1], -ip
   119e8:	strdeq	r1, [r1], -ip
   119ec:	strdeq	r1, [r1], -ip
   119f0:	strdeq	r1, [r1], -ip
   119f4:	strdeq	r1, [r1], -ip
   119f8:	strdeq	r1, [r1], -ip
   119fc:	strdeq	r1, [r1], -ip
   11a00:	strdeq	r1, [r1], -ip
   11a04:	strdeq	r1, [r1], -ip
   11a08:	strdeq	r1, [r1], -ip
   11a0c:	strdeq	r1, [r1], -ip
   11a10:	strdeq	r1, [r1], -ip
   11a14:	andeq	r1, r1, r0, lsl #22
   11a18:	strdeq	r1, [r1], -ip
   11a1c:	andeq	r1, r1, r4, lsr #27
   11a20:	strdeq	r1, [r1], -ip
   11a24:	strdeq	r1, [r1], -ip
   11a28:	muleq	r1, r8, sp
   11a2c:	strdeq	r1, [r1], -ip
   11a30:	strdeq	r1, [r1], -ip
   11a34:	strdeq	r1, [r1], -ip
   11a38:	strdeq	r1, [r1], -ip
   11a3c:	strdeq	r1, [r1], -ip
   11a40:	andeq	r1, r1, r4, lsl #27
   11a44:	strdeq	r1, [r1], -ip
   11a48:	strdeq	r1, [r1], -ip
   11a4c:	strdeq	r1, [r1], -ip
   11a50:	strdeq	r1, [r1], -ip
   11a54:	strdeq	r1, [r1], -ip
   11a58:	andeq	r1, r1, r8, ror sp
   11a5c:	andeq	r1, r1, ip, ror #26
   11a60:	andeq	r1, r1, r0, ror #26
   11a64:	strdeq	r1, [r1], -ip
   11a68:	strdeq	r1, [r1], -ip
   11a6c:	andeq	r1, r1, r4, asr sp
   11a70:	strdeq	r1, [r1], -ip
   11a74:	strdeq	r1, [r1], -ip
   11a78:	strdeq	r1, [r1], -ip
   11a7c:	strdeq	r1, [r1], -ip
   11a80:	strdeq	r1, [r1], -ip
   11a84:	strdeq	r1, [r1], -ip
   11a88:	strdeq	r1, [r1], -ip
   11a8c:	strdeq	r1, [r1], -ip
   11a90:	strdeq	r1, [r1], -ip
   11a94:	strdeq	r1, [r1], -r4
   11a98:	strdeq	r1, [r1], -ip
   11a9c:	andeq	r1, r1, ip, lsr sp
   11aa0:	andeq	r1, r1, r4, lsr #26
   11aa4:	strdeq	r1, [r1], -ip
   11aa8:	andeq	r1, r1, r8, lsl sp
   11aac:	andeq	r1, r1, ip, lsr #19
   11ab0:	strdeq	r1, [r1], -ip
   11ab4:	andeq	r1, r1, ip, lsl #26
   11ab8:	strdeq	r1, [r1], -ip
   11abc:	strdeq	r1, [r1], -ip
   11ac0:	andeq	r1, r1, r8, ror #25
   11ac4:	andeq	r1, r1, r8, asr #25
   11ac8:	andeq	r1, r1, r0, lsr #25
   11acc:	muleq	r1, r4, ip
   11ad0:	andeq	r1, r1, r8, lsl #25
   11ad4:	andeq	r1, r1, ip, ror ip
   11ad8:	andeq	r1, r1, r0, ror ip
   11adc:	andeq	r1, r1, r4, ror #24
   11ae0:	andeq	r1, r1, r4, asr ip
   11ae4:	andeq	r1, r1, ip, lsr ip
   11ae8:	strdeq	r1, [r1], -ip
   11aec:	strdeq	r1, [r1], -ip
   11af0:	andeq	r1, r1, ip, lsl ip
   11af4:	ldr	r3, [sp, #8]
   11af8:	orr	r3, r3, #32
   11afc:	str	r3, [sp, #8]
   11b00:	ldr	r3, [sp, #16]
   11b04:	str	r7, [r3]
   11b08:	b	119ac <__assert_fail@plt+0xbb8>
   11b0c:	ldr	r3, [sp, #76]	; 0x4c
   11b10:	ldr	r2, [r8]
   11b14:	ldr	r1, [r3]
   11b18:	ldr	r3, [sp, #20]
   11b1c:	cmp	r2, #0
   11b20:	sub	r0, r4, r1
   11b24:	ldr	ip, [r3]
   11b28:	ldr	r3, [sp, #12]
   11b2c:	ldr	r3, [r3, #12]
   11b30:	bne	11de4 <__assert_fail@plt+0xff0>
   11b34:	ldr	r7, [sp, #48]	; 0x30
   11b38:	ldr	lr, [sp, #56]	; 0x38
   11b3c:	ldr	r5, [sp, #52]	; 0x34
   11b40:	ldr	r7, [r7]
   11b44:	ldr	r4, [lr]
   11b48:	ldr	lr, [sp, #72]	; 0x48
   11b4c:	ldr	r5, [r5]
   11b50:	ldr	lr, [lr]
   11b54:	orr	lr, r4, lr
   11b58:	orrs	lr, lr, r5
   11b5c:	bne	11e1c <__assert_fail@plt+0x1028>
   11b60:	ldr	lr, [sp, #60]	; 0x3c
   11b64:	ldr	lr, [lr]
   11b68:	orrs	lr, r3, lr
   11b6c:	bne	11b7c <__assert_fail@plt+0xd88>
   11b70:	ldr	lr, [sp, #8]
   11b74:	orr	lr, lr, #8
   11b78:	str	lr, [sp, #8]
   11b7c:	cmp	r7, #0
   11b80:	beq	11ee4 <__assert_fail@plt+0x10f0>
   11b84:	cmp	ip, #0
   11b88:	beq	11bb0 <__assert_fail@plt+0xdbc>
   11b8c:	ldr	ip, [sp, #8]
   11b90:	orr	ip, ip, #128	; 0x80
   11b94:	str	ip, [sp, #8]
   11b98:	cmp	r4, #0
   11b9c:	beq	11bb0 <__assert_fail@plt+0xdbc>
   11ba0:	movw	ip, #33192	; 0x81a8
   11ba4:	movt	ip, #2
   11ba8:	mov	lr, #2
   11bac:	str	lr, [ip]
   11bb0:	ldr	ip, [sp, #24]
   11bb4:	ldr	ip, [ip]
   11bb8:	cmp	ip, #0
   11bbc:	beq	11ea4 <__assert_fail@plt+0x10b0>
   11bc0:	cmp	r3, #1
   11bc4:	beq	11f60 <__assert_fail@plt+0x116c>
   11bc8:	cmp	r3, #2
   11bcc:	beq	11f3c <__assert_fail@plt+0x1148>
   11bd0:	cmp	r3, #0
   11bd4:	beq	11f28 <__assert_fail@plt+0x1134>
   11bd8:	ldr	r3, [sl]
   11bdc:	cmp	r3, #0
   11be0:	beq	11e7c <__assert_fail@plt+0x1088>
   11be4:	ldr	r2, [sp, #12]
   11be8:	movw	r3, #9212	; 0x23fc
   11bec:	movt	r3, #1
   11bf0:	str	r3, [r2, #4]
   11bf4:	cmp	r0, #0
   11bf8:	ldr	r2, [sp, #8]
   11bfc:	moveq	r0, #1
   11c00:	addne	r1, r6, r1, lsl #2
   11c04:	ldreq	r1, [pc, #1048]	; 12024 <__assert_fail@plt+0x1230>
   11c08:	bl	114c4 <__assert_fail@plt+0x6d0>
   11c0c:	movw	r3, #33160	; 0x8188
   11c10:	movt	r3, #2
   11c14:	ldr	r0, [r3]
   11c18:	b	11e00 <__assert_fail@plt+0x100c>
   11c1c:	ldr	r2, [sp, #4]
   11c20:	mov	r3, #0
   11c24:	str	r7, [fp]
   11c28:	str	r3, [r8]
   11c2c:	str	r3, [r9]
   11c30:	str	r3, [sl]
   11c34:	str	r3, [r2]
   11c38:	b	119ac <__assert_fail@plt+0xbb8>
   11c3c:	ldr	r2, [sp, #28]
   11c40:	mov	r3, #0
   11c44:	str	r7, [r2]
   11c48:	ldr	r2, [sp, #32]
   11c4c:	str	r3, [r2]
   11c50:	b	119ac <__assert_fail@plt+0xbb8>
   11c54:	ldr	r2, [sp, #12]
   11c58:	mov	r3, #2
   11c5c:	str	r3, [r2, #12]
   11c60:	b	119ac <__assert_fail@plt+0xbb8>
   11c64:	ldr	r3, [sp, #56]	; 0x38
   11c68:	str	r7, [r3]
   11c6c:	b	119ac <__assert_fail@plt+0xbb8>
   11c70:	ldr	r3, [sp, #24]
   11c74:	str	r7, [r3]
   11c78:	b	119ac <__assert_fail@plt+0xbb8>
   11c7c:	ldr	r3, [sp, #44]	; 0x2c
   11c80:	str	r7, [r3]
   11c84:	b	119ac <__assert_fail@plt+0xbb8>
   11c88:	ldr	r3, [sp, #60]	; 0x3c
   11c8c:	str	r7, [r3]
   11c90:	b	119ac <__assert_fail@plt+0xbb8>
   11c94:	ldr	r3, [sp, #80]	; 0x50
   11c98:	str	r7, [r3]
   11c9c:	b	119ac <__assert_fail@plt+0xbb8>
   11ca0:	ldr	r2, [sp, #36]	; 0x24
   11ca4:	mov	r3, #0
   11ca8:	str	r7, [r8]
   11cac:	str	r7, [r2]
   11cb0:	ldr	r2, [sp, #4]
   11cb4:	str	r3, [r9]
   11cb8:	str	r3, [sl]
   11cbc:	str	r3, [fp]
   11cc0:	str	r3, [r2]
   11cc4:	b	119ac <__assert_fail@plt+0xbb8>
   11cc8:	ldr	r2, [sp, #4]
   11ccc:	mov	r3, #0
   11cd0:	str	r3, [r8]
   11cd4:	str	r3, [r9]
   11cd8:	str	r3, [sl]
   11cdc:	str	r7, [r2]
   11ce0:	str	r3, [fp]
   11ce4:	b	119ac <__assert_fail@plt+0xbb8>
   11ce8:	ldr	r2, [sp, #36]	; 0x24
   11cec:	mov	r3, #0
   11cf0:	str	r7, [r8]
   11cf4:	str	r3, [r2]
   11cf8:	b	11cb0 <__assert_fail@plt+0xebc>
   11cfc:	ldr	r2, [sp, #84]	; 0x54
   11d00:	mov	r3, #1024	; 0x400
   11d04:	str	r3, [r2]
   11d08:	b	119ac <__assert_fail@plt+0xbb8>
   11d0c:	ldr	r3, [sp, #72]	; 0x48
   11d10:	str	r7, [r3]
   11d14:	b	119ac <__assert_fail@plt+0xbb8>
   11d18:	ldr	r3, [sp, #64]	; 0x40
   11d1c:	str	r7, [r3]
   11d20:	b	119ac <__assert_fail@plt+0xbb8>
   11d24:	ldr	r2, [sp, #48]	; 0x30
   11d28:	mov	r3, #0
   11d2c:	str	r7, [r2]
   11d30:	ldr	r2, [sp, #40]	; 0x28
   11d34:	str	r3, [r2]
   11d38:	b	119ac <__assert_fail@plt+0xbb8>
   11d3c:	ldr	r2, [sp, #32]
   11d40:	mov	r3, #0
   11d44:	str	r7, [r2]
   11d48:	ldr	r2, [sp, #28]
   11d4c:	str	r3, [r2]
   11d50:	b	119ac <__assert_fail@plt+0xbb8>
   11d54:	ldr	r3, [sp, #20]
   11d58:	str	r7, [r3]
   11d5c:	b	119ac <__assert_fail@plt+0xbb8>
   11d60:	ldr	r3, [sp, #68]	; 0x44
   11d64:	str	r7, [r3]
   11d68:	b	119ac <__assert_fail@plt+0xbb8>
   11d6c:	ldr	r3, [sp, #12]
   11d70:	str	r7, [r3, #12]
   11d74:	b	119ac <__assert_fail@plt+0xbb8>
   11d78:	ldr	r3, [sp, #40]	; 0x28
   11d7c:	str	r7, [r3]
   11d80:	b	119ac <__assert_fail@plt+0xbb8>
   11d84:	ldr	r3, [sp, #8]
   11d88:	bic	r3, r3, #16
   11d8c:	orr	r3, r3, #2
   11d90:	str	r3, [sp, #8]
   11d94:	b	119ac <__assert_fail@plt+0xbb8>
   11d98:	ldr	r3, [sp, #52]	; 0x34
   11d9c:	str	r7, [r3]
   11da0:	b	119ac <__assert_fail@plt+0xbb8>
   11da4:	ldr	r2, [sp, #4]
   11da8:	mov	r3, #0
   11dac:	str	r7, [r9]
   11db0:	str	r3, [r8]
   11db4:	str	r3, [sl]
   11db8:	str	r3, [fp]
   11dbc:	str	r3, [r2]
   11dc0:	b	119ac <__assert_fail@plt+0xbb8>
   11dc4:	ldr	r2, [sp, #4]
   11dc8:	mov	r3, #0
   11dcc:	str	r7, [sl]
   11dd0:	str	r3, [r8]
   11dd4:	str	r3, [r9]
   11dd8:	str	r3, [fp]
   11ddc:	str	r3, [r2]
   11de0:	b	119ac <__assert_fail@plt+0xbb8>
   11de4:	cmp	ip, #0
   11de8:	beq	11ba0 <__assert_fail@plt+0xdac>
   11dec:	ldr	ip, [sp, #8]
   11df0:	orr	ip, ip, #128	; 0x80
   11df4:	str	ip, [sp, #8]
   11df8:	b	11ba0 <__assert_fail@plt+0xdac>
   11dfc:	bl	12d64 <__assert_fail@plt+0x1f70>
   11e00:	add	sp, sp, #100	; 0x64
   11e04:	ldrd	r4, [sp]
   11e08:	ldrd	r6, [sp, #8]
   11e0c:	ldrd	r8, [sp, #16]
   11e10:	ldrd	sl, [sp, #24]
   11e14:	add	sp, sp, #32
   11e18:	pop	{pc}		; (ldr pc, [sp], #4)
   11e1c:	orrs	lr, r5, r7
   11e20:	beq	11ee4 <__assert_fail@plt+0x10f0>
   11e24:	cmp	ip, #0
   11e28:	beq	11b98 <__assert_fail@plt+0xda4>
   11e2c:	ldr	ip, [sp, #8]
   11e30:	orr	ip, ip, #128	; 0x80
   11e34:	str	ip, [sp, #8]
   11e38:	b	11b98 <__assert_fail@plt+0xda4>
   11e3c:	movw	r0, #31744	; 0x7c00
   11e40:	movt	r0, #1
   11e44:	bl	10c80 <getenv@plt>
   11e48:	cmp	r0, r5
   11e4c:	beq	11ef4 <__assert_fail@plt+0x1100>
   11e50:	mov	r1, r5
   11e54:	mov	r2, #10
   11e58:	bl	10ba8 <strtol@plt>
   11e5c:	movw	r3, #33008	; 0x80f0
   11e60:	movt	r3, #2
   11e64:	str	r0, [r3]
   11e68:	ldr	r2, [sp, #44]	; 0x2c
   11e6c:	mov	r3, #1
   11e70:	str	r3, [r9]
   11e74:	str	r3, [r2]
   11e78:	b	11960 <__assert_fail@plt+0xb6c>
   11e7c:	ldr	r3, [fp]
   11e80:	cmp	r3, #0
   11e84:	bne	11ed0 <__assert_fail@plt+0x10dc>
   11e88:	cmp	r2, #0
   11e8c:	beq	11f74 <__assert_fail@plt+0x1180>
   11e90:	ldr	r2, [sp, #12]
   11e94:	movw	r3, #9496	; 0x2518
   11e98:	movt	r3, #1
   11e9c:	str	r3, [r2, #4]
   11ea0:	b	11bf4 <__assert_fail@plt+0xe00>
   11ea4:	cmp	r3, #1
   11ea8:	beq	11fc0 <__assert_fail@plt+0x11cc>
   11eac:	cmp	r3, #2
   11eb0:	beq	11f9c <__assert_fail@plt+0x11a8>
   11eb4:	cmp	r3, #0
   11eb8:	bne	11bd8 <__assert_fail@plt+0xde4>
   11ebc:	ldr	ip, [sp, #12]
   11ec0:	movw	r3, #11676	; 0x2d9c
   11ec4:	movt	r3, #1
   11ec8:	str	r3, [ip]
   11ecc:	b	11bd8 <__assert_fail@plt+0xde4>
   11ed0:	ldr	r2, [sp, #12]
   11ed4:	movw	r3, #10824	; 0x2a48
   11ed8:	movt	r3, #1
   11edc:	str	r3, [r2, #4]
   11ee0:	b	11bf4 <__assert_fail@plt+0xe00>
   11ee4:	ldr	lr, [sp, #8]
   11ee8:	orr	lr, lr, #1
   11eec:	str	lr, [sp, #8]
   11ef0:	b	11e24 <__assert_fail@plt+0x1030>
   11ef4:	add	r2, sp, #88	; 0x58
   11ef8:	movw	r1, #21523	; 0x5413
   11efc:	mov	r0, #1
   11f00:	bl	17350 <__assert_fail@plt+0x655c>
   11f04:	cmp	r0, #0
   11f08:	bne	11e68 <__assert_fail@plt+0x1074>
   11f0c:	ldrh	r3, [sp, #90]	; 0x5a
   11f10:	cmp	r3, #0
   11f14:	beq	11e68 <__assert_fail@plt+0x1074>
   11f18:	movw	r2, #33008	; 0x80f0
   11f1c:	movt	r2, #2
   11f20:	str	r3, [r2]
   11f24:	b	11e68 <__assert_fail@plt+0x1074>
   11f28:	ldr	ip, [sp, #12]
   11f2c:	movw	r3, #11688	; 0x2da8
   11f30:	movt	r3, #1
   11f34:	str	r3, [ip]
   11f38:	b	11bd8 <__assert_fail@plt+0xde4>
   11f3c:	ldr	r3, [sp, #28]
   11f40:	ldr	r3, [r3]
   11f44:	cmp	r3, #0
   11f48:	beq	11ffc <__assert_fail@plt+0x1208>
   11f4c:	ldr	ip, [sp, #12]
   11f50:	movw	r3, #11868	; 0x2e5c
   11f54:	movt	r3, #1
   11f58:	str	r3, [ip]
   11f5c:	b	11bd8 <__assert_fail@plt+0xde4>
   11f60:	ldr	ip, [sp, #12]
   11f64:	movw	r3, #12072	; 0x2f28
   11f68:	movt	r3, #1
   11f6c:	str	r3, [ip]
   11f70:	b	11bd8 <__assert_fail@plt+0xde4>
   11f74:	ldr	r3, [sp, #4]
   11f78:	ldr	r2, [sp, #12]
   11f7c:	ldr	r3, [r3]
   11f80:	cmp	r3, #0
   11f84:	movwne	r3, #11180	; 0x2bac
   11f88:	movweq	r3, #10240	; 0x2800
   11f8c:	movtne	r3, #1
   11f90:	movteq	r3, #1
   11f94:	str	r3, [r2, #4]
   11f98:	b	11bf4 <__assert_fail@plt+0xe00>
   11f9c:	ldr	r3, [sp, #28]
   11fa0:	ldr	r3, [r3]
   11fa4:	cmp	r3, #0
   11fa8:	beq	11fd4 <__assert_fail@plt+0x11e0>
   11fac:	ldr	ip, [sp, #12]
   11fb0:	movw	r3, #11800	; 0x2e18
   11fb4:	movt	r3, #1
   11fb8:	str	r3, [ip]
   11fbc:	b	11bd8 <__assert_fail@plt+0xde4>
   11fc0:	ldr	ip, [sp, #12]
   11fc4:	movw	r3, #11992	; 0x2ed8
   11fc8:	movt	r3, #1
   11fcc:	str	r3, [ip]
   11fd0:	b	11bd8 <__assert_fail@plt+0xde4>
   11fd4:	ldr	ip, [sp, #12]
   11fd8:	ldr	r3, [sp, #32]
   11fdc:	ldr	r3, [r3]
   11fe0:	cmp	r3, #0
   11fe4:	movwne	r3, #11896	; 0x2e78
   11fe8:	movweq	r3, #11704	; 0x2db8
   11fec:	movtne	r3, #1
   11ff0:	movteq	r3, #1
   11ff4:	str	r3, [ip]
   11ff8:	b	11bd8 <__assert_fail@plt+0xde4>
   11ffc:	ldr	ip, [sp, #12]
   12000:	ldr	r3, [sp, #32]
   12004:	ldr	r3, [r3]
   12008:	cmp	r3, #0
   1200c:	movwne	r3, #11964	; 0x2ebc
   12010:	movweq	r3, #11772	; 0x2dfc
   12014:	movtne	r3, #1
   12018:	movteq	r3, #1
   1201c:	str	r3, [ip]
   12020:	b	11bd8 <__assert_fail@plt+0xde4>
   12024:	strdeq	r8, [r2], -r4
   12028:	strd	r4, [sp, #-20]!	; 0xffffffec
   1202c:	movw	r5, #33044	; 0x8114
   12030:	movt	r5, #2
   12034:	strd	r6, [sp, #8]
   12038:	str	lr, [sp, #16]
   1203c:	sub	sp, sp, #12
   12040:	str	r0, [sp, #4]
   12044:	add	r0, sp, #4
   12048:	bl	10c08 <ctime@plt>
   1204c:	mov	r6, r0
   12050:	add	r4, r0, #3
   12054:	add	r7, r0, #10
   12058:	ldrb	r0, [r4, #1]!
   1205c:	ldr	r1, [r5]
   12060:	bl	10d58 <putc@plt>
   12064:	cmp	r4, r7
   12068:	bne	12058 <__assert_fail@plt+0x1264>
   1206c:	movw	r3, #33172	; 0x8194
   12070:	movt	r3, #2
   12074:	ldr	r0, [r3]
   12078:	cmp	r0, #0
   1207c:	beq	120b8 <__assert_fail@plt+0x12c4>
   12080:	add	r6, r6, #23
   12084:	ldrb	r0, [r4, #1]!
   12088:	ldr	r1, [r5]
   1208c:	bl	10d58 <putc@plt>
   12090:	cmp	r6, r4
   12094:	bne	12084 <__assert_fail@plt+0x1290>
   12098:	ldr	r1, [r5]
   1209c:	mov	r0, #32
   120a0:	bl	10d58 <putc@plt>
   120a4:	add	sp, sp, #12
   120a8:	ldrd	r4, [sp]
   120ac:	ldrd	r6, [sp, #8]
   120b0:	add	sp, sp, #16
   120b4:	pop	{pc}		; (ldr pc, [sp], #4)
   120b8:	ldr	r3, [sp, #4]
   120bc:	movw	r7, #61695	; 0xf0ff
   120c0:	movt	r7, #239	; 0xef
   120c4:	add	r7, r3, r7
   120c8:	bl	10bfc <time@plt>
   120cc:	cmp	r7, r0
   120d0:	blt	120f0 <__assert_fail@plt+0x12fc>
   120d4:	add	r6, r6, #15
   120d8:	ldrb	r0, [r4, #1]!
   120dc:	ldr	r1, [r5]
   120e0:	bl	10d58 <putc@plt>
   120e4:	cmp	r4, r6
   120e8:	bne	120d8 <__assert_fail@plt+0x12e4>
   120ec:	b	12098 <__assert_fail@plt+0x12a4>
   120f0:	mov	r0, #32
   120f4:	ldr	r1, [r5]
   120f8:	add	r4, r6, #19
   120fc:	add	r6, r6, #23
   12100:	bl	10d58 <putc@plt>
   12104:	ldrb	r0, [r4, #1]!
   12108:	ldr	r1, [r5]
   1210c:	bl	10d58 <putc@plt>
   12110:	cmp	r4, r6
   12114:	bne	12104 <__assert_fail@plt+0x1310>
   12118:	b	12098 <__assert_fail@plt+0x12a4>
   1211c:	ldr	r2, [r0, #48]	; 0x30
   12120:	add	r3, r0, #168	; 0xa8
   12124:	strd	r4, [sp, #-12]!
   12128:	str	lr, [sp, #8]
   1212c:	sub	sp, sp, #8192	; 0x2000
   12130:	sub	sp, sp, #12
   12134:	cmp	r2, #0
   12138:	bne	121b0 <__assert_fail@plt+0x13bc>
   1213c:	add	r4, sp, #8
   12140:	movw	r2, #31656	; 0x7ba8
   12144:	movt	r2, #1
   12148:	mov	r0, r4
   1214c:	mov	r1, #4096	; 0x1000
   12150:	bl	10d04 <snprintf@plt>
   12154:	add	r1, sp, #4096	; 0x1000
   12158:	movw	r2, #4095	; 0xfff
   1215c:	add	r1, r1, #8
   12160:	mov	r0, r4
   12164:	bl	10c44 <readlink@plt>
   12168:	cmn	r0, #1
   1216c:	mov	r3, r0
   12170:	beq	121dc <__assert_fail@plt+0x13e8>
   12174:	add	r1, sp, #4096	; 0x1000
   12178:	mov	r2, #0
   1217c:	add	r1, r1, #8
   12180:	movw	r0, #31804	; 0x7c3c
   12184:	movt	r0, #1
   12188:	strb	r2, [r1, r3]
   1218c:	bl	10bc0 <printf@plt>
   12190:	add	r0, sp, #4096	; 0x1000
   12194:	add	r0, r0, #8
   12198:	bl	12cc8 <__assert_fail@plt+0x1ed4>
   1219c:	add	sp, sp, #8192	; 0x2000
   121a0:	add	sp, sp, #12
   121a4:	ldrd	r4, [sp]
   121a8:	add	sp, sp, #8
   121ac:	pop	{pc}		; (ldr pc, [sp], #4)
   121b0:	ldr	ip, [r0, #4]
   121b4:	add	r4, sp, #8
   121b8:	movw	r2, #31780	; 0x7c24
   121bc:	movt	r2, #1
   121c0:	mov	r1, #4096	; 0x1000
   121c4:	mov	r0, r4
   121c8:	ldr	ip, [ip, #24]
   121cc:	str	r3, [sp]
   121d0:	mov	r3, ip
   121d4:	bl	10d04 <snprintf@plt>
   121d8:	b	12154 <__assert_fail@plt+0x1360>
   121dc:	movw	r3, #33040	; 0x8110
   121e0:	movt	r3, #2
   121e4:	ldr	r5, [r3]
   121e8:	bl	10cf8 <__errno_location@plt>
   121ec:	ldr	r0, [r0]
   121f0:	bl	10ca4 <strerror@plt>
   121f4:	mov	r3, r0
   121f8:	mov	r2, r4
   121fc:	mov	r0, r5
   12200:	movw	r1, #31788	; 0x7c2c
   12204:	movt	r1, #1
   12208:	bl	10cec <fprintf@plt>
   1220c:	b	1219c <__assert_fail@plt+0x13a8>
   12210:	and	r3, r0, #61440	; 0xf000
   12214:	str	r4, [sp, #-8]!
   12218:	cmp	r3, #16384	; 0x4000
   1221c:	str	lr, [sp, #4]
   12220:	beq	12288 <__assert_fail@plt+0x1494>
   12224:	bls	1225c <__assert_fail@plt+0x1468>
   12228:	cmp	r3, #40960	; 0xa000
   1222c:	beq	122d0 <__assert_fail@plt+0x14dc>
   12230:	cmp	r3, #49152	; 0xc000
   12234:	bne	122ac <__assert_fail@plt+0x14b8>
   12238:	movw	r3, #33044	; 0x8114
   1223c:	movt	r3, #2
   12240:	mov	r0, #61	; 0x3d
   12244:	ldr	r1, [r3]
   12248:	bl	10d58 <putc@plt>
   1224c:	mov	r0, #1
   12250:	ldr	r4, [sp]
   12254:	add	sp, sp, #4
   12258:	pop	{pc}		; (ldr pc, [sp], #4)
   1225c:	cmp	r3, #4096	; 0x1000
   12260:	bne	122ac <__assert_fail@plt+0x14b8>
   12264:	movw	r3, #33044	; 0x8114
   12268:	movt	r3, #2
   1226c:	mov	r0, #124	; 0x7c
   12270:	ldr	r1, [r3]
   12274:	bl	10d58 <putc@plt>
   12278:	ldr	r4, [sp]
   1227c:	add	sp, sp, #4
   12280:	mov	r0, #1
   12284:	pop	{pc}		; (ldr pc, [sp], #4)
   12288:	movw	r3, #33044	; 0x8114
   1228c:	movt	r3, #2
   12290:	mov	r0, #47	; 0x2f
   12294:	ldr	r1, [r3]
   12298:	bl	10d58 <putc@plt>
   1229c:	ldr	r4, [sp]
   122a0:	add	sp, sp, #4
   122a4:	mov	r0, #1
   122a8:	pop	{pc}		; (ldr pc, [sp], #4)
   122ac:	ands	r0, r0, #73	; 0x49
   122b0:	beq	12250 <__assert_fail@plt+0x145c>
   122b4:	movw	r3, #33044	; 0x8114
   122b8:	movt	r3, #2
   122bc:	mov	r0, #42	; 0x2a
   122c0:	ldr	r1, [r3]
   122c4:	bl	10d58 <putc@plt>
   122c8:	mov	r0, #1
   122cc:	b	12250 <__assert_fail@plt+0x145c>
   122d0:	movw	r3, #33044	; 0x8114
   122d4:	movt	r3, #2
   122d8:	mov	r0, #64	; 0x40
   122dc:	ldr	r1, [r3]
   122e0:	bl	10d58 <putc@plt>
   122e4:	ldr	r4, [sp]
   122e8:	add	sp, sp, #4
   122ec:	mov	r0, #1
   122f0:	pop	{pc}		; (ldr pc, [sp], #4)
   122f4:	movw	r3, #33136	; 0x8170
   122f8:	movt	r3, #2
   122fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12300:	ldr	r4, [r3]
   12304:	mov	r5, r0
   12308:	str	r6, [sp, #8]
   1230c:	mov	r6, r2
   12310:	strd	r8, [sp, #12]
   12314:	str	lr, [sp, #20]
   12318:	cmp	r4, #0
   1231c:	bne	123e4 <__assert_fail@plt+0x15f0>
   12320:	movw	r3, #33112	; 0x8158
   12324:	movt	r3, #2
   12328:	ldr	r3, [r3]
   1232c:	cmp	r3, #0
   12330:	bne	123a0 <__assert_fail@plt+0x15ac>
   12334:	add	r0, r5, #168	; 0xa8
   12338:	bl	12cc8 <__assert_fail@plt+0x1ed4>
   1233c:	movw	r3, #33152	; 0x8180
   12340:	movt	r3, #2
   12344:	ldr	r3, [r3]
   12348:	add	r4, r4, r0
   1234c:	cmp	r3, #0
   12350:	bne	12390 <__assert_fail@plt+0x159c>
   12354:	movw	r3, #33168	; 0x8190
   12358:	movt	r3, #2
   1235c:	ldr	r3, [r3]
   12360:	cmp	r3, #0
   12364:	beq	12378 <__assert_fail@plt+0x1584>
   12368:	ldr	r0, [r5, #80]	; 0x50
   1236c:	and	r3, r0, #61440	; 0xf000
   12370:	cmp	r3, #16384	; 0x4000
   12374:	beq	12394 <__assert_fail@plt+0x15a0>
   12378:	mov	r0, r4
   1237c:	ldrd	r4, [sp]
   12380:	ldr	r6, [sp, #8]
   12384:	ldrd	r8, [sp, #12]
   12388:	add	sp, sp, #20
   1238c:	pop	{pc}		; (ldr pc, [sp], #4)
   12390:	ldr	r0, [r5, #80]	; 0x50
   12394:	bl	12210 <__assert_fail@plt+0x141c>
   12398:	add	r4, r4, r0
   1239c:	b	12378 <__assert_fail@plt+0x1584>
   123a0:	movw	r3, #33192	; 0x81a8
   123a4:	movt	r3, #2
   123a8:	ldrd	r8, [r5, #128]	; 0x80
   123ac:	ldr	r2, [r3]
   123b0:	sub	ip, r2, #1
   123b4:	asr	r3, r2, #31
   123b8:	adds	r0, r8, ip
   123bc:	adc	r1, r9, ip, asr #31
   123c0:	bl	178dc <__assert_fail@plt+0x6ae8>
   123c4:	mov	r2, r0
   123c8:	mov	r3, r1
   123cc:	movw	r0, #31820	; 0x7c4c
   123d0:	movt	r0, #1
   123d4:	mov	r1, r6
   123d8:	bl	10bc0 <printf@plt>
   123dc:	add	r4, r4, r0
   123e0:	b	12334 <__assert_fail@plt+0x1540>
   123e4:	movw	r0, #31812	; 0x7c44
   123e8:	movt	r0, #1
   123ec:	ldr	r2, [r5, #160]	; 0xa0
   123f0:	bl	10bc0 <printf@plt>
   123f4:	mov	r4, r0
   123f8:	b	12320 <__assert_fail@plt+0x152c>
   123fc:	strd	r4, [sp, #-16]!
   12400:	ldr	r4, [r0]
   12404:	str	r6, [sp, #8]
   12408:	str	lr, [sp, #12]
   1240c:	cmp	r4, #0
   12410:	beq	12454 <__assert_fail@plt+0x1660>
   12414:	movw	r6, #33044	; 0x8114
   12418:	movt	r6, #2
   1241c:	mov	r5, r0
   12420:	ldr	r3, [r4, #16]
   12424:	mov	r0, r4
   12428:	cmp	r3, #1
   1242c:	beq	12448 <__assert_fail@plt+0x1654>
   12430:	ldr	r2, [r5, #20]
   12434:	ldr	r1, [r5, #32]
   12438:	bl	122f4 <__assert_fail@plt+0x1500>
   1243c:	mov	r0, #10
   12440:	ldr	r1, [r6]
   12444:	bl	10d58 <putc@plt>
   12448:	ldr	r4, [r4, #8]
   1244c:	cmp	r4, #0
   12450:	bne	12420 <__assert_fail@plt+0x162c>
   12454:	ldrd	r4, [sp]
   12458:	ldr	r6, [sp, #8]
   1245c:	add	sp, sp, #12
   12460:	pop	{pc}		; (ldr pc, [sp], #4)
   12464:	movw	r3, #33136	; 0x8170
   12468:	movt	r3, #2
   1246c:	str	r4, [sp, #-8]!
   12470:	ldr	r2, [r3]
   12474:	ldr	r3, [r0, #16]
   12478:	str	lr, [sp, #4]
   1247c:	cmp	r2, #0
   12480:	beq	12490 <__assert_fail@plt+0x169c>
   12484:	ldr	r2, [r0, #32]
   12488:	add	r2, r2, #1
   1248c:	add	r3, r3, r2
   12490:	movw	r2, #33112	; 0x8158
   12494:	movt	r2, #2
   12498:	ldr	r2, [r2]
   1249c:	cmp	r2, #0
   124a0:	beq	124b0 <__assert_fail@plt+0x16bc>
   124a4:	ldr	r2, [r0, #20]
   124a8:	add	r2, r2, #1
   124ac:	add	r3, r3, r2
   124b0:	movw	r2, #33152	; 0x8180
   124b4:	movt	r2, #2
   124b8:	movw	ip, #33168	; 0x8190
   124bc:	movt	ip, #2
   124c0:	ldr	lr, [r2]
   124c4:	add	r2, r3, #1
   124c8:	ldr	ip, [ip]
   124cc:	orrs	ip, lr, ip
   124d0:	addne	r2, r3, #2
   124d4:	movw	r3, #33008	; 0x80f0
   124d8:	movt	r3, #2
   124dc:	ldr	r3, [r3]
   124e0:	add	r3, r3, #1
   124e4:	cmp	r3, r2, lsl #1
   124e8:	blt	12504 <__assert_fail@plt+0x1710>
   124ec:	sdiv	r2, r3, r2
   124f0:	ldr	r4, [sp]
   124f4:	add	sp, sp, #4
   124f8:	sdiv	r0, r3, r2
   124fc:	str	r2, [r1]
   12500:	pop	{pc}		; (ldr pc, [sp], #4)
   12504:	bl	123fc <__assert_fail@plt+0x1608>
   12508:	ldr	r4, [sp]
   1250c:	add	sp, sp, #4
   12510:	mov	r0, #0
   12514:	pop	{pc}		; (ldr pc, [sp], #4)
   12518:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1251c:	mov	r5, r0
   12520:	ldr	r4, [r0]
   12524:	ldr	r3, [r4, #48]	; 0x30
   12528:	strd	r6, [sp, #8]
   1252c:	strd	r8, [sp, #16]
   12530:	strd	sl, [sp, #24]
   12534:	str	lr, [sp, #32]
   12538:	sub	sp, sp, #44	; 0x2c
   1253c:	cmp	r3, #0
   12540:	beq	12564 <__assert_fail@plt+0x1770>
   12544:	movw	r2, #33164	; 0x818c
   12548:	movt	r2, #2
   1254c:	movw	r3, #33112	; 0x8158
   12550:	movt	r3, #2
   12554:	ldr	r2, [r2]
   12558:	ldr	r3, [r3]
   1255c:	orrs	r3, r2, r3
   12560:	bne	127b0 <__assert_fail@plt+0x19bc>
   12564:	movw	r8, #33136	; 0x8170
   12568:	movt	r8, #2
   1256c:	movw	r7, #33112	; 0x8158
   12570:	movt	r7, #2
   12574:	movw	r6, #31840	; 0x7c60
   12578:	movt	r6, #1
   1257c:	b	12638 <__assert_fail@plt+0x1844>
   12580:	movw	r2, #32324	; 0x7e44
   12584:	movt	r2, #1
   12588:	strd	r0, [sp]
   1258c:	mov	r3, ip
   12590:	movw	r0, #31880	; 0x7c88
   12594:	movt	r0, #1
   12598:	rsb	r1, ip, #8
   1259c:	bl	10bc0 <printf@plt>
   125a0:	movw	r3, #33144	; 0x8178
   125a4:	movt	r3, #2
   125a8:	ldr	r3, [r3]
   125ac:	cmp	r3, #0
   125b0:	bne	12770 <__assert_fail@plt+0x197c>
   125b4:	movw	r3, #33188	; 0x81a4
   125b8:	movt	r3, #2
   125bc:	ldr	r3, [r3]
   125c0:	cmp	r3, #0
   125c4:	ldrne	r0, [r4, #152]	; 0x98
   125c8:	ldreq	r0, [r4, #144]	; 0x90
   125cc:	bl	12028 <__assert_fail@plt+0x1234>
   125d0:	add	r0, r4, #168	; 0xa8
   125d4:	bl	12cc8 <__assert_fail@plt+0x1ed4>
   125d8:	movw	r3, #33152	; 0x8180
   125dc:	movt	r3, #2
   125e0:	ldr	r3, [r3]
   125e4:	cmp	r3, #0
   125e8:	bne	126f4 <__assert_fail@plt+0x1900>
   125ec:	movw	r3, #33168	; 0x8190
   125f0:	movt	r3, #2
   125f4:	ldr	r0, [r4, #80]	; 0x50
   125f8:	ldr	r2, [r3]
   125fc:	and	r3, r0, #61440	; 0xf000
   12600:	cmp	r2, #0
   12604:	beq	12610 <__assert_fail@plt+0x181c>
   12608:	cmp	r3, #16384	; 0x4000
   1260c:	beq	126f8 <__assert_fail@plt+0x1904>
   12610:	cmp	r3, #40960	; 0xa000
   12614:	beq	1270c <__assert_fail@plt+0x1918>
   12618:	movw	r3, #33044	; 0x8114
   1261c:	movt	r3, #2
   12620:	mov	r0, #10
   12624:	ldr	r1, [r3]
   12628:	bl	10d58 <putc@plt>
   1262c:	ldr	r4, [r4, #8]
   12630:	cmp	r4, #0
   12634:	beq	127e4 <__assert_fail@plt+0x19f0>
   12638:	ldr	r3, [r4, #16]
   1263c:	cmp	r3, #1
   12640:	beq	1262c <__assert_fail@plt+0x1838>
   12644:	ldr	r3, [r8]
   12648:	cmp	r3, #0
   1264c:	bne	12758 <__assert_fail@plt+0x1964>
   12650:	ldr	r3, [r7]
   12654:	cmp	r3, #0
   12658:	bne	12718 <__assert_fail@plt+0x1924>
   1265c:	add	r1, sp, #20
   12660:	ldr	r0, [r4, #80]	; 0x50
   12664:	bl	12f80 <__assert_fail@plt+0x218c>
   12668:	ldr	r9, [r4, #20]
   1266c:	add	r1, sp, #20
   12670:	mov	r0, r6
   12674:	ldr	r2, [r5, #28]
   12678:	ldr	lr, [r5, #44]	; 0x2c
   1267c:	ldr	ip, [r9, #4]
   12680:	ldr	r3, [r4, #84]	; 0x54
   12684:	str	r2, [sp, #8]
   12688:	ldr	r2, [r5, #36]	; 0x24
   1268c:	str	ip, [sp, #12]
   12690:	ldr	ip, [r9]
   12694:	str	lr, [sp]
   12698:	str	ip, [sp, #4]
   1269c:	bl	10bc0 <printf@plt>
   126a0:	movw	r3, #33128	; 0x8168
   126a4:	movt	r3, #2
   126a8:	ldr	r3, [r3]
   126ac:	cmp	r3, #0
   126b0:	bne	12798 <__assert_fail@plt+0x19a4>
   126b4:	ldr	r3, [r4, #80]	; 0x50
   126b8:	and	r3, r3, #45056	; 0xb000
   126bc:	cmp	r3, #8192	; 0x2000
   126c0:	beq	1277c <__assert_fail@plt+0x1988>
   126c4:	ldr	r3, [r5, #8]
   126c8:	ldr	ip, [r5, #40]	; 0x28
   126cc:	ldrd	r0, [r4, #112]	; 0x70
   126d0:	cmp	r3, #0
   126d4:	bne	12580 <__assert_fail@plt+0x178c>
   126d8:	mov	r2, r0
   126dc:	mov	r3, r1
   126e0:	movw	r0, #31820	; 0x7c4c
   126e4:	movt	r0, #1
   126e8:	mov	r1, ip
   126ec:	bl	10bc0 <printf@plt>
   126f0:	b	125a0 <__assert_fail@plt+0x17ac>
   126f4:	ldr	r0, [r4, #80]	; 0x50
   126f8:	bl	12210 <__assert_fail@plt+0x141c>
   126fc:	ldr	r3, [r4, #80]	; 0x50
   12700:	and	r3, r3, #61440	; 0xf000
   12704:	cmp	r3, #40960	; 0xa000
   12708:	bne	12618 <__assert_fail@plt+0x1824>
   1270c:	mov	r0, r4
   12710:	bl	1211c <__assert_fail@plt+0x1328>
   12714:	b	12618 <__assert_fail@plt+0x1824>
   12718:	movw	r3, #33192	; 0x81a8
   1271c:	movt	r3, #2
   12720:	ldrd	sl, [r4, #128]	; 0x80
   12724:	ldr	r2, [r3]
   12728:	sub	ip, r2, #1
   1272c:	asr	r3, r2, #31
   12730:	adds	r0, sl, ip
   12734:	adc	r1, fp, ip, asr #31
   12738:	bl	178dc <__assert_fail@plt+0x6ae8>
   1273c:	mov	r2, r0
   12740:	mov	r3, r1
   12744:	ldr	r1, [r5, #20]
   12748:	movw	r0, #31820	; 0x7c4c
   1274c:	movt	r0, #1
   12750:	bl	10bc0 <printf@plt>
   12754:	b	1265c <__assert_fail@plt+0x1868>
   12758:	movw	r0, #31812	; 0x7c44
   1275c:	movt	r0, #1
   12760:	ldr	r1, [r5, #32]
   12764:	ldr	r2, [r4, #160]	; 0xa0
   12768:	bl	10bc0 <printf@plt>
   1276c:	b	12650 <__assert_fail@plt+0x185c>
   12770:	ldr	r0, [r4, #136]	; 0x88
   12774:	bl	12028 <__assert_fail@plt+0x1234>
   12778:	b	125d0 <__assert_fail@plt+0x17dc>
   1277c:	ldr	r1, [r4, #96]	; 0x60
   12780:	movw	r0, #31868	; 0x7c7c
   12784:	movt	r0, #1
   12788:	uxtb	r2, r1
   1278c:	ubfx	r1, r1, #8, #8
   12790:	bl	10bc0 <printf@plt>
   12794:	b	125a0 <__assert_fail@plt+0x17ac>
   12798:	movw	r0, #31860	; 0x7c74
   1279c:	movt	r0, #1
   127a0:	ldr	r2, [r9, #8]
   127a4:	ldr	r1, [r5, #24]
   127a8:	bl	10bc0 <printf@plt>
   127ac:	b	126b4 <__assert_fail@plt+0x18c0>
   127b0:	movw	r2, #33192	; 0x81a8
   127b4:	movt	r2, #2
   127b8:	ldr	ip, [r5, #4]
   127bc:	movw	r0, #31828	; 0x7c54
   127c0:	movt	r0, #1
   127c4:	ldr	r1, [r2]
   127c8:	sub	r3, r1, #1
   127cc:	add	r3, r3, ip
   127d0:	udiv	r1, r3, r1
   127d4:	bl	10bc0 <printf@plt>
   127d8:	ldr	r4, [r5]
   127dc:	cmp	r4, #0
   127e0:	bne	12564 <__assert_fail@plt+0x1770>
   127e4:	add	sp, sp, #44	; 0x2c
   127e8:	ldrd	r4, [sp]
   127ec:	ldrd	r6, [sp, #8]
   127f0:	ldrd	r8, [sp, #16]
   127f4:	ldrd	sl, [sp, #24]
   127f8:	add	sp, sp, #32
   127fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12800:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12804:	strd	r6, [sp, #8]
   12808:	strd	r8, [sp, #16]
   1280c:	mov	r8, r0
   12810:	strd	sl, [sp, #24]
   12814:	str	lr, [sp, #32]
   12818:	sub	sp, sp, #28
   1281c:	add	r1, sp, #20
   12820:	bl	12464 <__assert_fail@plt+0x1670>
   12824:	subs	r3, r0, #0
   12828:	str	r3, [sp, #8]
   1282c:	beq	12968 <__assert_fail@plt+0x1b74>
   12830:	movw	r4, #33024	; 0x8100
   12834:	movt	r4, #2
   12838:	ldr	r1, [r8, #12]
   1283c:	ldr	r3, [r4]
   12840:	cmp	r1, r3
   12844:	bgt	129e4 <__assert_fail@plt+0x1bf0>
   12848:	ldr	r9, [r8]
   1284c:	cmp	r9, #0
   12850:	beq	12984 <__assert_fail@plt+0x1b90>
   12854:	movw	fp, #33068	; 0x812c
   12858:	movt	fp, #2
   1285c:	ldr	r2, [fp]
   12860:	mov	sl, #0
   12864:	ldr	r3, [r9, #16]
   12868:	cmp	r3, #1
   1286c:	strne	r9, [r2, sl, lsl #2]
   12870:	addne	sl, sl, #1
   12874:	ldr	r9, [r9, #8]
   12878:	cmp	r9, #0
   1287c:	bne	12864 <__assert_fail@plt+0x1a70>
   12880:	ldr	r3, [sp, #20]
   12884:	ldr	r2, [r8]
   12888:	sdiv	r1, sl, r3
   1288c:	mls	r3, r3, r1, sl
   12890:	mov	r4, r1
   12894:	cmp	r3, #0
   12898:	addne	r3, r1, #1
   1289c:	movne	r4, r3
   128a0:	ldr	r3, [r2, #48]	; 0x30
   128a4:	cmp	r3, #0
   128a8:	bne	12998 <__assert_fail@plt+0x1ba4>
   128ac:	cmp	r4, #0
   128b0:	mov	r9, r4
   128b4:	ble	12968 <__assert_fail@plt+0x1b74>
   128b8:	mov	r3, #0
   128bc:	movw	fp, #33068	; 0x812c
   128c0:	movt	fp, #2
   128c4:	movw	r4, #33044	; 0x8114
   128c8:	movt	r4, #2
   128cc:	str	sl, [sp, #4]
   128d0:	str	r3, [sp, #12]
   128d4:	ldr	r3, [sp, #8]
   128d8:	add	r5, r3, #1
   128dc:	ldr	r6, [sp, #12]
   128e0:	mov	r7, #0
   128e4:	ldr	r3, [fp]
   128e8:	ldr	r2, [r8, #20]
   128ec:	ldr	r1, [r8, #32]
   128f0:	ldr	r0, [r3, r6, lsl #2]
   128f4:	add	r6, r6, r9
   128f8:	bl	122f4 <__assert_fail@plt+0x1500>
   128fc:	ldr	r3, [sp, #4]
   12900:	cmp	r6, r3
   12904:	bge	12944 <__assert_fail@plt+0x1b50>
   12908:	ldr	r3, [sp, #20]
   1290c:	add	r7, r7, #1
   12910:	cmp	r3, r7
   12914:	beq	12944 <__assert_fail@plt+0x1b50>
   12918:	ldr	r3, [sp, #8]
   1291c:	add	sl, r0, #1
   12920:	cmp	r3, r0
   12924:	ble	128e4 <__assert_fail@plt+0x1af0>
   12928:	add	sl, sl, #1
   1292c:	mov	r0, #32
   12930:	ldr	r1, [r4]
   12934:	bl	10d58 <putc@plt>
   12938:	cmp	sl, r5
   1293c:	bne	12928 <__assert_fail@plt+0x1b34>
   12940:	b	128e4 <__assert_fail@plt+0x1af0>
   12944:	ldr	r3, [sp, #12]
   12948:	mov	r0, #10
   1294c:	ldr	r1, [r4]
   12950:	add	r3, r3, #1
   12954:	mov	r6, r3
   12958:	str	r3, [sp, #12]
   1295c:	bl	10d58 <putc@plt>
   12960:	cmp	r6, r9
   12964:	bne	128dc <__assert_fail@plt+0x1ae8>
   12968:	add	sp, sp, #28
   1296c:	ldrd	r4, [sp]
   12970:	ldrd	r6, [sp, #8]
   12974:	ldrd	r8, [sp, #16]
   12978:	ldrd	sl, [sp, #24]
   1297c:	add	sp, sp, #32
   12980:	pop	{pc}		; (ldr pc, [sp], #4)
   12984:	ldr	r3, [r9, #48]	; 0x30
   12988:	cmp	r3, #0
   1298c:	beq	12968 <__assert_fail@plt+0x1b74>
   12990:	mov	r4, r9
   12994:	mov	sl, r9
   12998:	movw	r2, #33164	; 0x818c
   1299c:	movt	r2, #2
   129a0:	movw	r3, #33112	; 0x8158
   129a4:	movt	r3, #2
   129a8:	ldr	r2, [r2]
   129ac:	ldr	r3, [r3]
   129b0:	orrs	r3, r2, r3
   129b4:	beq	128ac <__assert_fail@plt+0x1ab8>
   129b8:	movw	r3, #33192	; 0x81a8
   129bc:	movt	r3, #2
   129c0:	ldr	r2, [r8, #4]
   129c4:	movw	r0, #31828	; 0x7c54
   129c8:	movt	r0, #1
   129cc:	ldr	r1, [r3]
   129d0:	sub	r3, r1, #1
   129d4:	add	r3, r3, r2
   129d8:	udiv	r1, r3, r1
   129dc:	bl	10bc0 <printf@plt>
   129e0:	b	128ac <__assert_fail@plt+0x1ab8>
   129e4:	movw	fp, #33068	; 0x812c
   129e8:	movt	fp, #2
   129ec:	lsl	r1, r1, #2
   129f0:	ldr	r0, [fp]
   129f4:	bl	17530 <__assert_fail@plt+0x673c>
   129f8:	cmp	r0, #0
   129fc:	beq	12a10 <__assert_fail@plt+0x1c1c>
   12a00:	ldr	r3, [r8, #12]
   12a04:	str	r0, [fp]
   12a08:	str	r3, [r4]
   12a0c:	b	12848 <__assert_fail@plt+0x1a54>
   12a10:	movw	r3, #33040	; 0x8110
   12a14:	movt	r3, #2
   12a18:	ldr	r4, [r3]
   12a1c:	bl	10cf8 <__errno_location@plt>
   12a20:	ldr	r0, [r0]
   12a24:	bl	10ca4 <strerror@plt>
   12a28:	mov	r2, r0
   12a2c:	movw	r1, #31892	; 0x7c94
   12a30:	movt	r1, #1
   12a34:	mov	r0, r4
   12a38:	bl	10cec <fprintf@plt>
   12a3c:	mov	r0, r8
   12a40:	bl	123fc <__assert_fail@plt+0x1608>
   12a44:	b	12968 <__assert_fail@plt+0x1b74>
   12a48:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12a4c:	strd	r6, [sp, #8]
   12a50:	strd	r8, [sp, #16]
   12a54:	mov	r8, r0
   12a58:	str	sl, [sp, #24]
   12a5c:	str	lr, [sp, #28]
   12a60:	sub	sp, sp, #8
   12a64:	add	r1, sp, #4
   12a68:	bl	12464 <__assert_fail@plt+0x1670>
   12a6c:	subs	sl, r0, #0
   12a70:	beq	12b2c <__assert_fail@plt+0x1d38>
   12a74:	ldr	r5, [r8]
   12a78:	ldr	r3, [r5, #48]	; 0x30
   12a7c:	cmp	r3, #0
   12a80:	bne	12b48 <__assert_fail@plt+0x1d54>
   12a84:	movw	r7, #33044	; 0x8114
   12a88:	movt	r7, #2
   12a8c:	mov	r6, #0
   12a90:	add	r9, sl, #1
   12a94:	b	12ac0 <__assert_fail@plt+0x1ccc>
   12a98:	mov	r0, r5
   12a9c:	ldr	r2, [r8, #20]
   12aa0:	ldr	r1, [r8, #32]
   12aa4:	bl	122f4 <__assert_fail@plt+0x1500>
   12aa8:	ldr	r3, [sp, #4]
   12aac:	cmp	r3, r6
   12ab0:	bgt	12af0 <__assert_fail@plt+0x1cfc>
   12ab4:	ldr	r5, [r5, #8]
   12ab8:	cmp	r5, #0
   12abc:	beq	12b20 <__assert_fail@plt+0x1d2c>
   12ac0:	ldr	r3, [r5, #16]
   12ac4:	cmp	r3, #1
   12ac8:	beq	12ab4 <__assert_fail@plt+0x1cc0>
   12acc:	ldr	r3, [sp, #4]
   12ad0:	cmp	r3, r6
   12ad4:	addgt	r6, r6, #1
   12ad8:	bgt	12a98 <__assert_fail@plt+0x1ca4>
   12adc:	mov	r0, #10
   12ae0:	ldr	r1, [r7]
   12ae4:	mov	r6, #1
   12ae8:	bl	10d58 <putc@plt>
   12aec:	b	12a98 <__assert_fail@plt+0x1ca4>
   12af0:	cmp	sl, r0
   12af4:	add	r4, r0, #1
   12af8:	ble	12ab4 <__assert_fail@plt+0x1cc0>
   12afc:	add	r4, r4, #1
   12b00:	mov	r0, #32
   12b04:	ldr	r1, [r7]
   12b08:	bl	10d58 <putc@plt>
   12b0c:	cmp	r4, r9
   12b10:	bne	12afc <__assert_fail@plt+0x1d08>
   12b14:	ldr	r5, [r5, #8]
   12b18:	cmp	r5, #0
   12b1c:	bne	12ac0 <__assert_fail@plt+0x1ccc>
   12b20:	mov	r0, #10
   12b24:	ldr	r1, [r7]
   12b28:	bl	10d58 <putc@plt>
   12b2c:	add	sp, sp, #8
   12b30:	ldrd	r4, [sp]
   12b34:	ldrd	r6, [sp, #8]
   12b38:	ldrd	r8, [sp, #16]
   12b3c:	ldr	sl, [sp, #24]
   12b40:	add	sp, sp, #28
   12b44:	pop	{pc}		; (ldr pc, [sp], #4)
   12b48:	movw	r2, #33164	; 0x818c
   12b4c:	movt	r2, #2
   12b50:	movw	r3, #33112	; 0x8158
   12b54:	movt	r3, #2
   12b58:	ldr	r2, [r2]
   12b5c:	ldr	r3, [r3]
   12b60:	orrs	r3, r2, r3
   12b64:	beq	12a84 <__assert_fail@plt+0x1c90>
   12b68:	movw	r3, #33192	; 0x81a8
   12b6c:	movt	r3, #2
   12b70:	ldr	ip, [r8, #4]
   12b74:	movw	r0, #31908	; 0x7ca4
   12b78:	movt	r0, #1
   12b7c:	ldr	r1, [r3]
   12b80:	mov	r3, #0
   12b84:	sub	r2, r1, #1
   12b88:	add	r2, r2, ip
   12b8c:	udiv	r2, r2, r1
   12b90:	bl	10bc0 <printf@plt>
   12b94:	ldr	r5, [r8]
   12b98:	cmp	r5, #0
   12b9c:	bne	12a84 <__assert_fail@plt+0x1c90>
   12ba0:	movw	r7, #33044	; 0x8114
   12ba4:	movt	r7, #2
   12ba8:	b	12b20 <__assert_fail@plt+0x1d2c>
   12bac:	movw	r3, #33136	; 0x8170
   12bb0:	movt	r3, #2
   12bb4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12bb8:	strd	r6, [sp, #8]
   12bbc:	strd	r8, [sp, #16]
   12bc0:	ldr	r8, [r3]
   12bc4:	movw	r3, #33112	; 0x8158
   12bc8:	movt	r3, #2
   12bcc:	str	sl, [sp, #24]
   12bd0:	ldr	r3, [r3]
   12bd4:	str	lr, [sp, #28]
   12bd8:	cmp	r8, #0
   12bdc:	ldrne	r8, [r0, #32]
   12be0:	addne	r8, r8, #1
   12be4:	cmp	r3, #0
   12be8:	beq	12bf8 <__assert_fail@plt+0x1e04>
   12bec:	ldr	r3, [r0, #20]
   12bf0:	add	r3, r3, #1
   12bf4:	add	r8, r8, r3
   12bf8:	movw	r3, #33152	; 0x8180
   12bfc:	movt	r3, #2
   12c00:	ldr	r4, [r0]
   12c04:	ldr	r3, [r3]
   12c08:	cmp	r3, #0
   12c0c:	addne	r8, r8, #1
   12c10:	cmp	r4, #0
   12c14:	movweq	r7, #33044	; 0x8114
   12c18:	movteq	r7, #2
   12c1c:	beq	12ca4 <__assert_fail@plt+0x1eb0>
   12c20:	movw	r7, #33044	; 0x8114
   12c24:	movt	r7, #2
   12c28:	movw	r9, #33008	; 0x80f0
   12c2c:	movt	r9, #2
   12c30:	mov	r6, r0
   12c34:	mov	r5, #0
   12c38:	ldr	r3, [r4, #16]
   12c3c:	cmp	r3, #1
   12c40:	beq	12c98 <__assert_fail@plt+0x1ea4>
   12c44:	cmp	r5, #0
   12c48:	mov	r0, #44	; 0x2c
   12c4c:	ble	12c84 <__assert_fail@plt+0x1e90>
   12c50:	ldr	r1, [r7]
   12c54:	add	r5, r5, #2
   12c58:	bl	10d58 <putc@plt>
   12c5c:	ldr	r1, [r4, #52]	; 0x34
   12c60:	add	r3, r5, r8
   12c64:	mov	r0, #32
   12c68:	ldr	r2, [r9]
   12c6c:	add	r3, r3, r1
   12c70:	ldr	r1, [r7]
   12c74:	cmp	r3, r2
   12c78:	movcs	r0, #10
   12c7c:	movcs	r5, #0
   12c80:	bl	10d58 <putc@plt>
   12c84:	mov	r0, r4
   12c88:	ldr	r2, [r6, #20]
   12c8c:	ldr	r1, [r6, #32]
   12c90:	bl	122f4 <__assert_fail@plt+0x1500>
   12c94:	add	r5, r5, r0
   12c98:	ldr	r4, [r4, #8]
   12c9c:	cmp	r4, #0
   12ca0:	bne	12c38 <__assert_fail@plt+0x1e44>
   12ca4:	mov	r0, #10
   12ca8:	ldr	r1, [r7]
   12cac:	ldrd	r4, [sp]
   12cb0:	ldrd	r6, [sp, #8]
   12cb4:	ldrd	r8, [sp, #16]
   12cb8:	ldr	sl, [sp, #24]
   12cbc:	ldr	lr, [sp, #28]
   12cc0:	add	sp, sp, #32
   12cc4:	b	10d58 <putc@plt>
   12cc8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12ccc:	strd	r6, [sp, #8]
   12cd0:	strd	r8, [sp, #16]
   12cd4:	str	sl, [sp, #24]
   12cd8:	str	lr, [sp, #28]
   12cdc:	ldrb	r4, [r0]
   12ce0:	cmp	r4, #0
   12ce4:	beq	12d5c <__assert_fail@plt+0x1f68>
   12ce8:	mov	r5, r0
   12cec:	rsb	r7, r0, #1
   12cf0:	bl	10cbc <__ctype_b_loc@plt>
   12cf4:	movw	r6, #33044	; 0x8114
   12cf8:	movt	r6, #2
   12cfc:	movw	r8, #33204	; 0x81b4
   12d00:	movt	r8, #2
   12d04:	mov	r9, r0
   12d08:	ldr	r2, [r9]
   12d0c:	lsl	r3, r4, #1
   12d10:	mov	r0, r4
   12d14:	ldrh	r3, [r2, r3]
   12d18:	tst	r3, #16384	; 0x4000
   12d1c:	bne	12d2c <__assert_fail@plt+0x1f38>
   12d20:	ldr	r3, [r8]
   12d24:	cmp	r3, #0
   12d28:	movne	r0, #63	; 0x3f
   12d2c:	ldr	r1, [r6]
   12d30:	bl	10d58 <putc@plt>
   12d34:	add	r0, r5, r7
   12d38:	ldrb	r4, [r5, #1]!
   12d3c:	cmp	r4, #0
   12d40:	bne	12d08 <__assert_fail@plt+0x1f14>
   12d44:	ldrd	r4, [sp]
   12d48:	ldrd	r6, [sp, #8]
   12d4c:	ldrd	r8, [sp, #16]
   12d50:	ldr	sl, [sp, #24]
   12d54:	add	sp, sp, #28
   12d58:	pop	{pc}		; (ldr pc, [sp], #4)
   12d5c:	mov	r0, r4
   12d60:	b	12d44 <__assert_fail@plt+0x1f50>
   12d64:	movw	r3, #33040	; 0x8110
   12d68:	movt	r3, #2
   12d6c:	str	r4, [sp, #-8]!
   12d70:	movw	r0, #31920	; 0x7cb0
   12d74:	movt	r0, #1
   12d78:	ldr	r3, [r3]
   12d7c:	mov	r2, #51	; 0x33
   12d80:	mov	r1, #1
   12d84:	str	lr, [sp, #4]
   12d88:	bl	10c50 <fwrite@plt>
   12d8c:	ldr	r4, [sp]
   12d90:	add	sp, sp, #4
   12d94:	mov	r0, #1
   12d98:	pop	{pc}		; (ldr pc, [sp], #4)
   12d9c:	add	r1, r1, #168	; 0xa8
   12da0:	add	r0, r0, #168	; 0xa8
   12da4:	b	10b9c <strcmp@plt>
   12da8:	add	r3, r1, #168	; 0xa8
   12dac:	add	r1, r0, #168	; 0xa8
   12db0:	mov	r0, r3
   12db4:	b	10b9c <strcmp@plt>
   12db8:	ldr	r3, [r0, #144]	; 0x90
   12dbc:	ldr	r2, [r1, #144]	; 0x90
   12dc0:	cmp	r2, r3
   12dc4:	bgt	12dec <__assert_fail@plt+0x1ff8>
   12dc8:	beq	12ddc <__assert_fail@plt+0x1fe8>
   12dcc:	blt	12df4 <__assert_fail@plt+0x2000>
   12dd0:	add	r1, r1, #168	; 0xa8
   12dd4:	add	r0, r0, #168	; 0xa8
   12dd8:	b	10b9c <strcmp@plt>
   12ddc:	ldr	r3, [r0, #148]	; 0x94
   12de0:	ldr	r2, [r1, #148]	; 0x94
   12de4:	cmp	r2, r3
   12de8:	ble	12dcc <__assert_fail@plt+0x1fd8>
   12dec:	mov	r0, #1
   12df0:	bx	lr
   12df4:	mvn	r0, #0
   12df8:	bx	lr
   12dfc:	str	r4, [sp, #-8]!
   12e00:	str	lr, [sp, #4]
   12e04:	bl	12db8 <__assert_fail@plt+0x1fc4>
   12e08:	ldr	r4, [sp]
   12e0c:	add	sp, sp, #4
   12e10:	rsb	r0, r0, #0
   12e14:	pop	{pc}		; (ldr pc, [sp], #4)
   12e18:	ldr	r3, [r0, #136]	; 0x88
   12e1c:	ldr	r2, [r1, #136]	; 0x88
   12e20:	cmp	r2, r3
   12e24:	bgt	12e4c <__assert_fail@plt+0x2058>
   12e28:	beq	12e3c <__assert_fail@plt+0x2048>
   12e2c:	blt	12e54 <__assert_fail@plt+0x2060>
   12e30:	add	r1, r1, #168	; 0xa8
   12e34:	add	r0, r0, #168	; 0xa8
   12e38:	b	10b9c <strcmp@plt>
   12e3c:	ldr	r3, [r0, #140]	; 0x8c
   12e40:	ldr	r2, [r1, #140]	; 0x8c
   12e44:	cmp	r2, r3
   12e48:	ble	12e2c <__assert_fail@plt+0x2038>
   12e4c:	mov	r0, #1
   12e50:	bx	lr
   12e54:	mvn	r0, #0
   12e58:	bx	lr
   12e5c:	str	r4, [sp, #-8]!
   12e60:	str	lr, [sp, #4]
   12e64:	bl	12e18 <__assert_fail@plt+0x2024>
   12e68:	ldr	r4, [sp]
   12e6c:	add	sp, sp, #4
   12e70:	rsb	r0, r0, #0
   12e74:	pop	{pc}		; (ldr pc, [sp], #4)
   12e78:	ldr	r3, [r0, #152]	; 0x98
   12e7c:	ldr	r2, [r1, #152]	; 0x98
   12e80:	cmp	r2, r3
   12e84:	bgt	12eac <__assert_fail@plt+0x20b8>
   12e88:	beq	12e9c <__assert_fail@plt+0x20a8>
   12e8c:	blt	12eb4 <__assert_fail@plt+0x20c0>
   12e90:	add	r1, r1, #168	; 0xa8
   12e94:	add	r0, r0, #168	; 0xa8
   12e98:	b	10b9c <strcmp@plt>
   12e9c:	ldr	r3, [r0, #156]	; 0x9c
   12ea0:	ldr	r2, [r1, #156]	; 0x9c
   12ea4:	cmp	r2, r3
   12ea8:	ble	12e8c <__assert_fail@plt+0x2098>
   12eac:	mov	r0, #1
   12eb0:	bx	lr
   12eb4:	mvn	r0, #0
   12eb8:	bx	lr
   12ebc:	str	r4, [sp, #-8]!
   12ec0:	str	lr, [sp, #4]
   12ec4:	bl	12e78 <__assert_fail@plt+0x2084>
   12ec8:	ldr	r4, [sp]
   12ecc:	add	sp, sp, #4
   12ed0:	rsb	r0, r0, #0
   12ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ed8:	strd	r4, [sp, #-8]!
   12edc:	ldrd	r2, [r0, #112]	; 0x70
   12ee0:	ldrd	r4, [r1, #112]	; 0x70
   12ee4:	cmp	r2, r4
   12ee8:	sbcs	ip, r3, r5
   12eec:	blt	12f10 <__assert_fail@plt+0x211c>
   12ef0:	cmp	r4, r2
   12ef4:	sbcs	r3, r5, r3
   12ef8:	blt	12f20 <__assert_fail@plt+0x212c>
   12efc:	add	r1, r1, #168	; 0xa8
   12f00:	add	r0, r0, #168	; 0xa8
   12f04:	ldrd	r4, [sp]
   12f08:	add	sp, sp, #8
   12f0c:	b	10b9c <strcmp@plt>
   12f10:	mov	r0, #1
   12f14:	ldrd	r4, [sp]
   12f18:	add	sp, sp, #8
   12f1c:	bx	lr
   12f20:	mvn	r0, #0
   12f24:	b	12f14 <__assert_fail@plt+0x2120>
   12f28:	strd	r4, [sp, #-16]!
   12f2c:	ldrd	r2, [r0, #112]	; 0x70
   12f30:	ldrd	r4, [r1, #112]	; 0x70
   12f34:	str	r6, [sp, #8]
   12f38:	str	lr, [sp, #12]
   12f3c:	cmp	r2, r4
   12f40:	sbcs	ip, r3, r5
   12f44:	mvnlt	r0, #0
   12f48:	blt	12f68 <__assert_fail@plt+0x2174>
   12f4c:	cmp	r4, r2
   12f50:	sbcs	r3, r5, r3
   12f54:	blt	12f78 <__assert_fail@plt+0x2184>
   12f58:	add	r1, r1, #168	; 0xa8
   12f5c:	add	r0, r0, #168	; 0xa8
   12f60:	bl	10b9c <strcmp@plt>
   12f64:	rsb	r0, r0, #0
   12f68:	ldrd	r4, [sp]
   12f6c:	ldr	r6, [sp, #8]
   12f70:	add	sp, sp, #12
   12f74:	pop	{pc}		; (ldr pc, [sp], #4)
   12f78:	mov	r0, #1
   12f7c:	b	12f68 <__assert_fail@plt+0x2174>
   12f80:	and	r3, r0, #61440	; 0xf000
   12f84:	cmp	r3, #32768	; 0x8000
   12f88:	moveq	r2, #45	; 0x2d
   12f8c:	beq	12fd8 <__assert_fail@plt+0x21e4>
   12f90:	cmp	r3, #16384	; 0x4000
   12f94:	moveq	r2, #100	; 0x64
   12f98:	beq	12fd8 <__assert_fail@plt+0x21e4>
   12f9c:	cmp	r3, #24576	; 0x6000
   12fa0:	moveq	r2, #98	; 0x62
   12fa4:	beq	12fd8 <__assert_fail@plt+0x21e4>
   12fa8:	cmp	r3, #8192	; 0x2000
   12fac:	moveq	r2, #99	; 0x63
   12fb0:	beq	12fd8 <__assert_fail@plt+0x21e4>
   12fb4:	cmp	r3, #40960	; 0xa000
   12fb8:	moveq	r2, #108	; 0x6c
   12fbc:	beq	12fd8 <__assert_fail@plt+0x21e4>
   12fc0:	cmp	r3, #4096	; 0x1000
   12fc4:	moveq	r2, #112	; 0x70
   12fc8:	beq	12fd8 <__assert_fail@plt+0x21e4>
   12fcc:	cmp	r3, #49152	; 0xc000
   12fd0:	moveq	r2, #115	; 0x73
   12fd4:	movne	r2, #63	; 0x3f
   12fd8:	tst	r0, #256	; 0x100
   12fdc:	strb	r2, [r1]
   12fe0:	and	r3, r0, #64	; 0x40
   12fe4:	movne	ip, #114	; 0x72
   12fe8:	moveq	ip, #45	; 0x2d
   12fec:	tst	r0, #128	; 0x80
   12ff0:	movne	r2, #119	; 0x77
   12ff4:	moveq	r2, #45	; 0x2d
   12ff8:	strb	ip, [r1, #1]
   12ffc:	tst	r0, #2048	; 0x800
   13000:	strb	r2, [r1, #2]
   13004:	beq	130a4 <__assert_fail@plt+0x22b0>
   13008:	cmp	r3, #0
   1300c:	movne	r2, #115	; 0x73
   13010:	moveq	r2, #83	; 0x53
   13014:	tst	r0, #32
   13018:	strb	r2, [r1, #3]
   1301c:	and	r3, r0, #8
   13020:	movne	ip, #114	; 0x72
   13024:	moveq	ip, #45	; 0x2d
   13028:	tst	r0, #16
   1302c:	movne	r2, #119	; 0x77
   13030:	moveq	r2, #45	; 0x2d
   13034:	strb	ip, [r1, #4]
   13038:	tst	r0, #1024	; 0x400
   1303c:	strb	r2, [r1, #5]
   13040:	beq	130b4 <__assert_fail@plt+0x22c0>
   13044:	cmp	r3, #0
   13048:	movne	r2, #115	; 0x73
   1304c:	moveq	r2, #83	; 0x53
   13050:	tst	r0, #4
   13054:	strb	r2, [r1, #6]
   13058:	and	r3, r0, #1
   1305c:	movne	ip, #114	; 0x72
   13060:	moveq	ip, #45	; 0x2d
   13064:	tst	r0, #2
   13068:	movne	r2, #119	; 0x77
   1306c:	moveq	r2, #45	; 0x2d
   13070:	strb	ip, [r1, #7]
   13074:	tst	r0, #512	; 0x200
   13078:	strb	r2, [r1, #8]
   1307c:	beq	130c4 <__assert_fail@plt+0x22d0>
   13080:	cmp	r3, #0
   13084:	movne	r0, #116	; 0x74
   13088:	moveq	r0, #84	; 0x54
   1308c:	mov	r2, #32
   13090:	mov	r3, #0
   13094:	strb	r0, [r1, #9]
   13098:	strb	r2, [r1, #10]
   1309c:	strb	r3, [r1, #11]
   130a0:	bx	lr
   130a4:	cmp	r3, #0
   130a8:	movne	r2, #120	; 0x78
   130ac:	moveq	r2, #45	; 0x2d
   130b0:	b	13014 <__assert_fail@plt+0x2220>
   130b4:	cmp	r3, #0
   130b8:	movne	r2, #120	; 0x78
   130bc:	moveq	r2, #45	; 0x2d
   130c0:	b	13050 <__assert_fail@plt+0x225c>
   130c4:	cmp	r3, #0
   130c8:	movne	r0, #120	; 0x78
   130cc:	moveq	r0, #45	; 0x2d
   130d0:	b	1308c <__assert_fail@plt+0x2298>
   130d4:	ldr	r0, [r0, #16]
   130d8:	b	12f80 <__assert_fail@plt+0x218c>
   130dc:	strd	r4, [sp, #-12]!
   130e0:	mov	r5, r0
   130e4:	str	lr, [sp, #8]
   130e8:	sub	sp, sp, #12
   130ec:	bl	10cf8 <__errno_location@plt>
   130f0:	mov	r4, r0
   130f4:	mov	r2, #0
   130f8:	ldr	r3, [r4]
   130fc:	mov	r0, r5
   13100:	str	r2, [r4]
   13104:	str	r3, [sp]
   13108:	str	r3, [sp, #4]
   1310c:	bl	10be4 <free@plt>
   13110:	ldr	r3, [r4]
   13114:	add	r2, sp, #8
   13118:	clz	r3, r3
   1311c:	lsr	r3, r3, #5
   13120:	add	r3, r2, r3, lsl #2
   13124:	ldr	r3, [r3, #-8]
   13128:	str	r3, [r4]
   1312c:	add	sp, sp, #12
   13130:	ldrd	r4, [sp]
   13134:	add	sp, sp, #8
   13138:	pop	{pc}		; (ldr pc, [sp], #4)
   1313c:	strd	r4, [sp, #-8]!
   13140:	ldrd	r2, [r1, #8]
   13144:	ldrd	r4, [r0, #8]
   13148:	cmp	r5, r3
   1314c:	cmpeq	r4, r2
   13150:	movne	r0, #0
   13154:	bne	13170 <__assert_fail@plt+0x237c>
   13158:	ldrd	r4, [r0]
   1315c:	ldrd	r2, [r1]
   13160:	cmp	r5, r3
   13164:	cmpeq	r4, r2
   13168:	moveq	r0, #1
   1316c:	movne	r0, #0
   13170:	ldrd	r4, [sp]
   13174:	add	sp, sp, #8
   13178:	bx	lr
   1317c:	mov	r2, r1
   13180:	mov	r3, #0
   13184:	str	r4, [sp, #-8]!
   13188:	ldrd	r0, [r0, #8]
   1318c:	str	lr, [sp, #4]
   13190:	bl	179b0 <__assert_fail@plt+0x6bbc>
   13194:	ldr	r4, [sp]
   13198:	add	sp, sp, #4
   1319c:	mov	r0, r2
   131a0:	pop	{pc}		; (ldr pc, [sp], #4)
   131a4:	mov	r2, r1
   131a8:	mov	r3, #0
   131ac:	str	r4, [sp, #-8]!
   131b0:	ldrd	r0, [r0]
   131b4:	str	lr, [sp, #4]
   131b8:	bl	179b0 <__assert_fail@plt+0x6bbc>
   131bc:	ldr	r4, [sp]
   131c0:	add	sp, sp, #4
   131c4:	mov	r0, r2
   131c8:	pop	{pc}		; (ldr pc, [sp], #4)
   131cc:	strd	r4, [sp, #-8]!
   131d0:	ldrd	r2, [r1]
   131d4:	ldrd	r4, [r0]
   131d8:	cmp	r5, r3
   131dc:	cmpeq	r4, r2
   131e0:	ldrd	r4, [sp]
   131e4:	add	sp, sp, #8
   131e8:	moveq	r0, #1
   131ec:	movne	r0, #0
   131f0:	bx	lr
   131f4:	ldr	r2, [r0]
   131f8:	ldr	r3, [r1]
   131fc:	ldrd	r0, [r2, #160]	; 0xa0
   13200:	ldrd	r2, [r3, #160]	; 0xa0
   13204:	cmp	r1, r3
   13208:	cmpeq	r0, r2
   1320c:	movhi	r0, #1
   13210:	movls	r0, #0
   13214:	movcc	r3, #1
   13218:	movcs	r3, #0
   1321c:	sub	r0, r0, r3
   13220:	bx	lr
   13224:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13228:	mov	r5, r2
   1322c:	mov	r4, r1
   13230:	ldr	r2, [r0, #40]	; 0x28
   13234:	strd	r6, [sp, #8]
   13238:	mov	r6, r0
   1323c:	str	r8, [sp, #16]
   13240:	str	lr, [sp, #20]
   13244:	ldr	r0, [r0, #8]
   13248:	cmp	r2, r5
   1324c:	ldr	r7, [r6, #44]	; 0x2c
   13250:	bcs	13278 <__assert_fail@plt+0x2484>
   13254:	add	r1, r5, #40	; 0x28
   13258:	cmn	r1, #-1073741823	; 0xc0000001
   1325c:	str	r1, [r6, #40]	; 0x28
   13260:	bhi	13300 <__assert_fail@plt+0x250c>
   13264:	lsl	r1, r1, #2
   13268:	bl	17530 <__assert_fail@plt+0x673c>
   1326c:	cmp	r0, #0
   13270:	strne	r0, [r6, #8]
   13274:	beq	132fc <__assert_fail@plt+0x2508>
   13278:	cmp	r4, #0
   1327c:	movne	r2, r0
   13280:	beq	13294 <__assert_fail@plt+0x24a0>
   13284:	str	r4, [r2], #4
   13288:	ldr	r4, [r4, #8]
   1328c:	cmp	r4, #0
   13290:	bne	13284 <__assert_fail@plt+0x2490>
   13294:	mov	r3, r7
   13298:	mov	r2, #4
   1329c:	mov	r1, r5
   132a0:	bl	10d88 <qsort@plt>
   132a4:	ldr	lr, [r6, #8]
   132a8:	subs	r3, r5, #1
   132ac:	ldr	r0, [lr]
   132b0:	moveq	r2, r0
   132b4:	beq	132e0 <__assert_fail@plt+0x24ec>
   132b8:	mov	ip, r0
   132bc:	mov	r2, lr
   132c0:	b	132c8 <__assert_fail@plt+0x24d4>
   132c4:	ldr	ip, [r2]
   132c8:	subs	r3, r3, #1
   132cc:	ldr	r1, [r2, #4]!
   132d0:	str	r1, [ip, #8]
   132d4:	bne	132c4 <__assert_fail@plt+0x24d0>
   132d8:	add	r5, lr, r5, lsl #2
   132dc:	ldr	r2, [r5, #-4]
   132e0:	mov	r3, #0
   132e4:	str	r3, [r2, #8]
   132e8:	ldrd	r4, [sp]
   132ec:	ldrd	r6, [sp, #8]
   132f0:	ldr	r8, [sp, #16]
   132f4:	add	sp, sp, #20
   132f8:	pop	{pc}		; (ldr pc, [sp], #4)
   132fc:	ldr	r0, [r6, #8]
   13300:	bl	130dc <__assert_fail@plt+0x22e8>
   13304:	mov	r3, #0
   13308:	mov	r0, r4
   1330c:	str	r3, [r6, #8]
   13310:	str	r3, [r6, #40]	; 0x28
   13314:	b	132e8 <__assert_fail@plt+0x24f4>
   13318:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1331c:	mov	r5, r2
   13320:	strd	r6, [sp, #8]
   13324:	mov	r6, r0
   13328:	add	r0, r2, #176	; 0xb0
   1332c:	bic	r0, r0, #7
   13330:	mov	r7, r1
   13334:	str	r8, [sp, #16]
   13338:	str	lr, [sp, #20]
   1333c:	bl	174f4 <__assert_fail@plt+0x6700>
   13340:	subs	r4, r0, #0
   13344:	beq	13390 <__assert_fail@plt+0x259c>
   13348:	mov	r1, r7
   1334c:	mov	r2, r5
   13350:	add	r0, r4, #168	; 0xa8
   13354:	bl	10bf0 <memcpy@plt>
   13358:	ldr	r1, [r6, #24]
   1335c:	mov	r3, #0
   13360:	add	r0, r4, r5
   13364:	mov	r2, #3
   13368:	strb	r3, [r0, #168]	; 0xa8
   1336c:	str	r3, [r4, #12]
   13370:	str	r3, [r4, #16]
   13374:	str	r3, [r4, #20]
   13378:	str	r1, [r4, #28]
   1337c:	str	r3, [r4, #32]
   13380:	str	r6, [r4, #44]	; 0x2c
   13384:	str	r5, [r4, #52]	; 0x34
   13388:	strh	r3, [r4, #58]	; 0x3a
   1338c:	strh	r2, [r4, #60]	; 0x3c
   13390:	mov	r0, r4
   13394:	ldrd	r4, [sp]
   13398:	ldrd	r6, [sp, #8]
   1339c:	ldr	r8, [sp, #16]
   133a0:	add	sp, sp, #20
   133a4:	pop	{pc}		; (ldr pc, [sp], #4)
   133a8:	strd	r4, [sp, #-16]!
   133ac:	subs	r4, r0, #0
   133b0:	str	r6, [sp, #8]
   133b4:	str	lr, [sp, #12]
   133b8:	beq	133e0 <__assert_fail@plt+0x25ec>
   133bc:	ldr	r5, [r4, #8]
   133c0:	ldr	r3, [r4, #12]
   133c4:	subs	r0, r3, #0
   133c8:	beq	133d0 <__assert_fail@plt+0x25dc>
   133cc:	bl	10ddc <closedir@plt>
   133d0:	mov	r0, r4
   133d4:	bl	130dc <__assert_fail@plt+0x22e8>
   133d8:	subs	r4, r5, #0
   133dc:	bne	133bc <__assert_fail@plt+0x25c8>
   133e0:	ldrd	r4, [sp]
   133e4:	ldr	r6, [sp, #8]
   133e8:	add	sp, sp, #12
   133ec:	pop	{pc}		; (ldr pc, [sp], #4)
   133f0:	str	r4, [sp, #-8]!
   133f4:	mov	r4, r0
   133f8:	str	lr, [sp, #4]
   133fc:	b	1340c <__assert_fail@plt+0x2618>
   13400:	bl	17288 <__assert_fail@plt+0x6494>
   13404:	cmp	r0, #0
   13408:	bge	1342c <__assert_fail@plt+0x2638>
   1340c:	mov	r0, r4
   13410:	bl	17238 <__assert_fail@plt+0x6444>
   13414:	cmp	r0, #0
   13418:	mov	r0, r4
   1341c:	beq	13400 <__assert_fail@plt+0x260c>
   13420:	ldr	r4, [sp]
   13424:	add	sp, sp, #4
   13428:	pop	{pc}		; (ldr pc, [sp], #4)
   1342c:	bl	10dc4 <close@plt>
   13430:	b	1340c <__assert_fail@plt+0x2618>
   13434:	strd	r4, [sp, #-20]!	; 0xffffffec
   13438:	ldr	r5, [r0, #44]	; 0x2c
   1343c:	ldr	r3, [r5, #48]	; 0x30
   13440:	strd	r6, [sp, #8]
   13444:	str	lr, [sp, #16]
   13448:	sub	sp, sp, #100	; 0x64
   1344c:	tst	r3, #512	; 0x200
   13450:	beq	134e0 <__assert_fail@plt+0x26ec>
   13454:	ldr	r4, [r5, #52]	; 0x34
   13458:	mov	r7, r1
   1345c:	mov	r6, r0
   13460:	cmp	r4, #0
   13464:	beq	1348c <__assert_fail@plt+0x2698>
   13468:	ldrd	r2, [r6, #64]	; 0x40
   1346c:	add	r1, sp, #8
   13470:	mov	r0, r4
   13474:	strd	r2, [sp, #8]
   13478:	bl	16738 <__assert_fail@plt+0x5944>
   1347c:	cmp	r0, #0
   13480:	beq	134c4 <__assert_fail@plt+0x26d0>
   13484:	ldr	r0, [r0, #8]
   13488:	b	134e4 <__assert_fail@plt+0x26f0>
   1348c:	movw	r0, #12508	; 0x30dc
   13490:	movt	r0, #1
   13494:	mov	r1, r4
   13498:	movw	r3, #12748	; 0x31cc
   1349c:	movt	r3, #1
   134a0:	movw	r2, #12708	; 0x31a4
   134a4:	movt	r2, #1
   134a8:	str	r0, [sp]
   134ac:	mov	r0, #13
   134b0:	bl	16a58 <__assert_fail@plt+0x5c64>
   134b4:	cmp	r0, #0
   134b8:	mov	r4, r0
   134bc:	str	r0, [r5, #52]	; 0x34
   134c0:	bne	13468 <__assert_fail@plt+0x2674>
   134c4:	cmp	r7, #0
   134c8:	blt	134e0 <__assert_fail@plt+0x26ec>
   134cc:	mov	r0, r7
   134d0:	add	r1, sp, #8
   134d4:	bl	10b78 <fstatfs64@plt>
   134d8:	cmp	r0, #0
   134dc:	beq	134f8 <__assert_fail@plt+0x2704>
   134e0:	mov	r0, #0
   134e4:	add	sp, sp, #100	; 0x64
   134e8:	ldrd	r4, [sp]
   134ec:	ldrd	r6, [sp, #8]
   134f0:	add	sp, sp, #16
   134f4:	pop	{pc}		; (ldr pc, [sp], #4)
   134f8:	cmp	r4, #0
   134fc:	beq	1353c <__assert_fail@plt+0x2748>
   13500:	mov	r0, #16
   13504:	bl	174f4 <__assert_fail@plt+0x6700>
   13508:	subs	r5, r0, #0
   1350c:	beq	1353c <__assert_fail@plt+0x2748>
   13510:	ldr	ip, [sp, #8]
   13514:	mov	r0, r4
   13518:	mov	r1, r5
   1351c:	ldrd	r2, [r6, #64]	; 0x40
   13520:	strd	r2, [r5]
   13524:	str	ip, [r5, #8]
   13528:	bl	170b0 <__assert_fail@plt+0x62bc>
   1352c:	cmp	r0, #0
   13530:	beq	13544 <__assert_fail@plt+0x2750>
   13534:	cmp	r5, r0
   13538:	bne	13550 <__assert_fail@plt+0x275c>
   1353c:	ldr	r0, [sp, #8]
   13540:	b	134e4 <__assert_fail@plt+0x26f0>
   13544:	mov	r0, r5
   13548:	bl	130dc <__assert_fail@plt+0x22e8>
   1354c:	b	1353c <__assert_fail@plt+0x2748>
   13550:	bl	10db8 <abort@plt>
   13554:	strd	r4, [sp, #-16]!
   13558:	mov	r5, r1
   1355c:	ldr	r1, [r0, #32]
   13560:	str	r6, [sp, #8]
   13564:	str	lr, [sp, #12]
   13568:	sub	r3, r1, r5
   1356c:	cmn	r1, #100	; 0x64
   13570:	clz	r3, r3
   13574:	lsr	r3, r3, #5
   13578:	moveq	r3, #0
   1357c:	cmp	r3, #0
   13580:	bne	135e0 <__assert_fail@plt+0x27ec>
   13584:	cmp	r2, #0
   13588:	mov	r4, r0
   1358c:	bne	135bc <__assert_fail@plt+0x27c8>
   13590:	ldr	r3, [r0, #48]	; 0x30
   13594:	mvn	r2, r1
   13598:	lsr	r2, r2, #31
   1359c:	eor	r3, r3, #4
   135a0:	ands	r3, r2, r3, lsr #2
   135a4:	bne	135d4 <__assert_fail@plt+0x27e0>
   135a8:	ldr	r6, [sp, #8]
   135ac:	str	r5, [r4, #32]
   135b0:	ldrd	r4, [sp]
   135b4:	add	sp, sp, #12
   135b8:	pop	{pc}		; (ldr pc, [sp], #4)
   135bc:	add	r0, r0, #60	; 0x3c
   135c0:	bl	17240 <__assert_fail@plt+0x644c>
   135c4:	cmp	r0, #0
   135c8:	blt	135a8 <__assert_fail@plt+0x27b4>
   135cc:	bl	10dc4 <close@plt>
   135d0:	b	135a8 <__assert_fail@plt+0x27b4>
   135d4:	mov	r0, r1
   135d8:	bl	10dc4 <close@plt>
   135dc:	b	135a8 <__assert_fail@plt+0x27b4>
   135e0:	bl	10db8 <abort@plt>
   135e4:	ldr	r3, [r0, #48]	; 0x30
   135e8:	strd	r4, [sp, #-16]!
   135ec:	mov	r4, r0
   135f0:	str	r6, [sp, #8]
   135f4:	str	lr, [sp, #12]
   135f8:	ands	r5, r3, #4
   135fc:	movne	r5, #0
   13600:	bne	13618 <__assert_fail@plt+0x2824>
   13604:	tst	r3, #512	; 0x200
   13608:	beq	13634 <__assert_fail@plt+0x2840>
   1360c:	mov	r2, #1
   13610:	mvn	r1, #99	; 0x63
   13614:	bl	13554 <__assert_fail@plt+0x2760>
   13618:	add	r0, r4, #60	; 0x3c
   1361c:	bl	133f0 <__assert_fail@plt+0x25fc>
   13620:	mov	r0, r5
   13624:	ldrd	r4, [sp]
   13628:	ldr	r6, [sp, #8]
   1362c:	add	sp, sp, #12
   13630:	pop	{pc}		; (ldr pc, [sp], #4)
   13634:	ldr	r0, [r0, #28]
   13638:	bl	10d7c <fchdir@plt>
   1363c:	adds	r5, r0, #0
   13640:	movne	r5, #1
   13644:	b	13618 <__assert_fail@plt+0x2824>
   13648:	mov	ip, r1
   1364c:	ldr	r1, [r1]
   13650:	strd	r4, [sp, #-16]!
   13654:	mov	r4, r0
   13658:	ldr	r0, [r0]
   1365c:	str	r6, [sp, #8]
   13660:	str	lr, [sp, #12]
   13664:	add	r3, r1, #256	; 0x100
   13668:	add	r2, r3, r2
   1366c:	cmp	r1, r2
   13670:	bhi	136a4 <__assert_fail@plt+0x28b0>
   13674:	mov	r1, r2
   13678:	str	r2, [ip]
   1367c:	bl	17530 <__assert_fail@plt+0x673c>
   13680:	subs	r5, r0, #0
   13684:	movne	r3, #1
   13688:	strne	r5, [r4]
   1368c:	beq	136c4 <__assert_fail@plt+0x28d0>
   13690:	ldrd	r4, [sp]
   13694:	mov	r0, r3
   13698:	ldr	r6, [sp, #8]
   1369c:	add	sp, sp, #12
   136a0:	pop	{pc}		; (ldr pc, [sp], #4)
   136a4:	mov	r5, #0
   136a8:	bl	130dc <__assert_fail@plt+0x22e8>
   136ac:	str	r5, [r4]
   136b0:	bl	10cf8 <__errno_location@plt>
   136b4:	mov	r2, #36	; 0x24
   136b8:	mov	r3, r5
   136bc:	str	r2, [r0]
   136c0:	b	13690 <__assert_fail@plt+0x289c>
   136c4:	ldr	r0, [r4]
   136c8:	bl	130dc <__assert_fail@plt+0x22e8>
   136cc:	mov	r3, r5
   136d0:	str	r5, [r4]
   136d4:	b	13690 <__assert_fail@plt+0x289c>
   136d8:	ldr	ip, [r2, #48]	; 0x30
   136dc:	strd	r4, [sp, #-16]!
   136e0:	mov	r4, r2
   136e4:	add	r5, r2, #64	; 0x40
   136e8:	ldr	r2, [r2, #24]
   136ec:	str	r6, [sp, #8]
   136f0:	str	lr, [sp, #12]
   136f4:	sub	sp, sp, #8
   136f8:	cmp	ip, #0
   136fc:	bne	13774 <__assert_fail@plt+0x2980>
   13700:	tst	r1, #1
   13704:	beq	13774 <__assert_fail@plt+0x2980>
   13708:	mov	r1, r2
   1370c:	mov	r0, #3
   13710:	mov	r2, r5
   13714:	bl	10d94 <__xstat64@plt>
   13718:	cmp	r0, #0
   1371c:	beq	137a0 <__assert_fail@plt+0x29ac>
   13720:	bl	10cf8 <__errno_location@plt>
   13724:	ldr	r3, [r0]
   13728:	mov	r6, r0
   1372c:	cmp	r3, #2
   13730:	bne	13758 <__assert_fail@plt+0x2964>
   13734:	mov	r2, r5
   13738:	mov	r0, #3
   1373c:	ldr	r1, [r4, #24]
   13740:	bl	10dd0 <__lxstat64@plt>
   13744:	subs	r3, r0, #0
   13748:	moveq	r0, #13
   1374c:	streq	r3, [r6]
   13750:	beq	137c4 <__assert_fail@plt+0x29d0>
   13754:	ldr	r3, [r6]
   13758:	mov	r0, r5
   1375c:	mov	r2, #104	; 0x68
   13760:	str	r3, [r4, #32]
   13764:	mov	r1, #0
   13768:	bl	10d10 <memset@plt>
   1376c:	mov	r0, #10
   13770:	b	137c4 <__assert_fail@plt+0x29d0>
   13774:	ubfx	ip, r1, #1, #1
   13778:	orrs	r3, r3, ip
   1377c:	bne	13708 <__assert_fail@plt+0x2914>
   13780:	mov	ip, #256	; 0x100
   13784:	mov	r1, r0
   13788:	mov	r3, r5
   1378c:	mov	r0, #3
   13790:	str	ip, [sp]
   13794:	bl	10c2c <__fxstatat64@plt>
   13798:	cmp	r0, #0
   1379c:	bne	13820 <__assert_fail@plt+0x2a2c>
   137a0:	ldr	r3, [r4, #80]	; 0x50
   137a4:	and	r3, r3, #61440	; 0xf000
   137a8:	cmp	r3, #16384	; 0x4000
   137ac:	beq	137d8 <__assert_fail@plt+0x29e4>
   137b0:	cmp	r3, #40960	; 0xa000
   137b4:	beq	1382c <__assert_fail@plt+0x2a38>
   137b8:	cmp	r3, #32768	; 0x8000
   137bc:	movne	r0, #3
   137c0:	moveq	r0, #8
   137c4:	add	sp, sp, #8
   137c8:	ldrd	r4, [sp]
   137cc:	ldr	r6, [sp, #8]
   137d0:	add	sp, sp, #12
   137d4:	pop	{pc}		; (ldr pc, [sp], #4)
   137d8:	ldrb	r3, [r4, #168]	; 0xa8
   137dc:	cmp	r3, #46	; 0x2e
   137e0:	bne	13804 <__assert_fail@plt+0x2a10>
   137e4:	ldrb	r3, [r4, #169]	; 0xa9
   137e8:	cmp	r3, #0
   137ec:	beq	1380c <__assert_fail@plt+0x2a18>
   137f0:	ldr	r3, [r4, #168]	; 0xa8
   137f4:	bic	r3, r3, #-16777216	; 0xff000000
   137f8:	bic	r3, r3, #255	; 0xff
   137fc:	cmp	r3, #11776	; 0x2e00
   13800:	beq	1380c <__assert_fail@plt+0x2a18>
   13804:	mov	r0, #1
   13808:	b	137c4 <__assert_fail@plt+0x29d0>
   1380c:	ldr	r3, [r4, #48]	; 0x30
   13810:	cmp	r3, #0
   13814:	moveq	r0, #1
   13818:	movne	r0, #5
   1381c:	b	137c4 <__assert_fail@plt+0x29d0>
   13820:	bl	10cf8 <__errno_location@plt>
   13824:	ldr	r3, [r0]
   13828:	b	13758 <__assert_fail@plt+0x2964>
   1382c:	mov	r0, #12
   13830:	b	137c4 <__assert_fail@plt+0x29d0>
   13834:	movw	r3, #258	; 0x102
   13838:	str	r4, [sp, #-8]!
   1383c:	mov	r4, r1
   13840:	tst	r0, r3
   13844:	str	lr, [sp, #4]
   13848:	sub	sp, sp, #8
   1384c:	beq	13898 <__assert_fail@plt+0x2aa4>
   13850:	movw	r1, #12508	; 0x30dc
   13854:	movt	r1, #1
   13858:	movw	r3, #12604	; 0x313c
   1385c:	movt	r3, #1
   13860:	movw	r2, #12668	; 0x317c
   13864:	movt	r2, #1
   13868:	str	r1, [sp]
   1386c:	mov	r0, #31
   13870:	mov	r1, #0
   13874:	bl	16a58 <__assert_fail@plt+0x5c64>
   13878:	mov	r3, r0
   1387c:	adds	r0, r0, #0
   13880:	movne	r0, #1
   13884:	str	r3, [r4]
   13888:	add	sp, sp, #8
   1388c:	ldr	r4, [sp]
   13890:	add	sp, sp, #4
   13894:	pop	{pc}		; (ldr pc, [sp], #4)
   13898:	mov	r0, #32
   1389c:	bl	174f4 <__assert_fail@plt+0x6700>
   138a0:	cmp	r0, #0
   138a4:	str	r0, [r4]
   138a8:	beq	13888 <__assert_fail@plt+0x2a94>
   138ac:	bl	17588 <__assert_fail@plt+0x6794>
   138b0:	mov	r0, #1
   138b4:	add	sp, sp, #8
   138b8:	ldr	r4, [sp]
   138bc:	add	sp, sp, #4
   138c0:	pop	{pc}		; (ldr pc, [sp], #4)
   138c4:	mov	r3, r2
   138c8:	lsl	r2, r1, #11
   138cc:	tst	r1, #512	; 0x200
   138d0:	and	r2, r2, #32768	; 0x8000
   138d4:	orr	r2, r2, #540672	; 0x84000
   138d8:	orr	r2, r2, #2304	; 0x900
   138dc:	beq	138e8 <__assert_fail@plt+0x2af4>
   138e0:	mov	r1, r3
   138e4:	b	17380 <__assert_fail@plt+0x658c>
   138e8:	mov	r1, r2
   138ec:	mov	r0, r3
   138f0:	b	17890 <__assert_fail@plt+0x6a9c>
   138f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   138f8:	mov	r5, r0
   138fc:	mov	r4, r2
   13900:	strd	r6, [sp, #8]
   13904:	mov	r7, r1
   13908:	strd	r8, [sp, #16]
   1390c:	ldr	r9, [r0, #48]	; 0x30
   13910:	str	sl, [sp, #24]
   13914:	subs	sl, r3, #0
   13918:	str	lr, [sp, #28]
   1391c:	sub	sp, sp, #104	; 0x68
   13920:	and	r8, r9, #4
   13924:	beq	139fc <__assert_fail@plt+0x2c08>
   13928:	movw	r1, #32020	; 0x7d14
   1392c:	movt	r1, #1
   13930:	mov	r0, sl
   13934:	bl	10b9c <strcmp@plt>
   13938:	cmp	r0, #0
   1393c:	bne	139fc <__assert_fail@plt+0x2c08>
   13940:	cmp	r8, #0
   13944:	bne	13a3c <__assert_fail@plt+0x2c48>
   13948:	cmp	r4, #0
   1394c:	bge	13afc <__assert_fail@plt+0x2d08>
   13950:	tst	r9, #512	; 0x200
   13954:	bne	13a80 <__assert_fail@plt+0x2c8c>
   13958:	mov	r8, #1
   1395c:	mov	r1, r9
   13960:	mov	r2, sl
   13964:	ldr	r0, [r5, #32]
   13968:	bl	138c4 <__assert_fail@plt+0x2ad0>
   1396c:	subs	r6, r0, #0
   13970:	blt	13af4 <__assert_fail@plt+0x2d00>
   13974:	ldr	r9, [r5, #48]	; 0x30
   13978:	tst	r9, #2
   1397c:	beq	13a18 <__assert_fail@plt+0x2c24>
   13980:	mov	r2, sp
   13984:	mov	r1, r6
   13988:	mov	r0, #3
   1398c:	bl	10c38 <__fxstat64@plt>
   13990:	cmp	r0, #0
   13994:	bne	13a78 <__assert_fail@plt+0x2c84>
   13998:	ldrd	r2, [sp]
   1399c:	ldrd	r0, [r7, #64]	; 0x40
   139a0:	cmp	r1, r3
   139a4:	cmpeq	r0, r2
   139a8:	bne	13a6c <__assert_fail@plt+0x2c78>
   139ac:	ldrd	r2, [sp, #96]	; 0x60
   139b0:	ldrd	r0, [r7, #160]	; 0xa0
   139b4:	cmp	r1, r3
   139b8:	cmpeq	r0, r2
   139bc:	bne	13a6c <__assert_fail@plt+0x2c78>
   139c0:	ldr	r9, [r5, #48]	; 0x30
   139c4:	tst	r9, #512	; 0x200
   139c8:	bne	13abc <__assert_fail@plt+0x2cc8>
   139cc:	mov	r0, r6
   139d0:	bl	10d7c <fchdir@plt>
   139d4:	mov	r9, r0
   139d8:	cmp	r4, #0
   139dc:	bge	13a4c <__assert_fail@plt+0x2c58>
   139e0:	bl	10cf8 <__errno_location@plt>
   139e4:	mov	r4, r0
   139e8:	mov	r0, r6
   139ec:	ldr	r5, [r4]
   139f0:	bl	10dc4 <close@plt>
   139f4:	str	r5, [r4]
   139f8:	b	13a4c <__assert_fail@plt+0x2c58>
   139fc:	cmp	r8, #0
   13a00:	bne	13a3c <__assert_fail@plt+0x2c48>
   13a04:	cmp	r4, #0
   13a08:	movge	r6, r4
   13a0c:	blt	1395c <__assert_fail@plt+0x2b68>
   13a10:	tst	r9, #2
   13a14:	bne	13980 <__assert_fail@plt+0x2b8c>
   13a18:	cmp	sl, #0
   13a1c:	beq	139c4 <__assert_fail@plt+0x2bd0>
   13a20:	mov	r0, sl
   13a24:	movw	r1, #32020	; 0x7d14
   13a28:	movt	r1, #1
   13a2c:	bl	10b9c <strcmp@plt>
   13a30:	cmp	r0, #0
   13a34:	bne	139c4 <__assert_fail@plt+0x2bd0>
   13a38:	b	13980 <__assert_fail@plt+0x2b8c>
   13a3c:	mvn	r3, r4
   13a40:	lsr	r3, r3, #31
   13a44:	ands	r9, r3, r9, lsr #9
   13a48:	bne	13ad8 <__assert_fail@plt+0x2ce4>
   13a4c:	mov	r0, r9
   13a50:	add	sp, sp, #104	; 0x68
   13a54:	ldrd	r4, [sp]
   13a58:	ldrd	r6, [sp, #8]
   13a5c:	ldrd	r8, [sp, #16]
   13a60:	ldr	sl, [sp, #24]
   13a64:	add	sp, sp, #28
   13a68:	pop	{pc}		; (ldr pc, [sp], #4)
   13a6c:	bl	10cf8 <__errno_location@plt>
   13a70:	mov	r3, #2
   13a74:	str	r3, [r0]
   13a78:	mvn	r9, #0
   13a7c:	b	139d8 <__assert_fail@plt+0x2be4>
   13a80:	add	r6, r5, #60	; 0x3c
   13a84:	mov	r0, r6
   13a88:	bl	17238 <__assert_fail@plt+0x6444>
   13a8c:	subs	r8, r0, #0
   13a90:	bne	1395c <__assert_fail@plt+0x2b68>
   13a94:	mov	r0, r6
   13a98:	bl	17288 <__assert_fail@plt+0x6494>
   13a9c:	subs	r6, r0, #0
   13aa0:	blt	13ae8 <__assert_fail@plt+0x2cf4>
   13aa4:	ldr	r9, [r5, #48]	; 0x30
   13aa8:	mov	r4, r6
   13aac:	mov	r8, #1
   13ab0:	tst	r9, #2
   13ab4:	beq	139c4 <__assert_fail@plt+0x2bd0>
   13ab8:	b	13980 <__assert_fail@plt+0x2b8c>
   13abc:	eor	r2, r8, #1
   13ac0:	mov	r1, r6
   13ac4:	uxtb	r2, r2
   13ac8:	mov	r0, r5
   13acc:	bl	13554 <__assert_fail@plt+0x2760>
   13ad0:	mov	r9, #0
   13ad4:	b	13a4c <__assert_fail@plt+0x2c58>
   13ad8:	mov	r0, r4
   13adc:	mov	r9, #0
   13ae0:	bl	10dc4 <close@plt>
   13ae4:	b	13a4c <__assert_fail@plt+0x2c58>
   13ae8:	mov	r8, #1
   13aec:	ldr	r9, [r5, #48]	; 0x30
   13af0:	b	1395c <__assert_fail@plt+0x2b68>
   13af4:	mvn	r9, #0
   13af8:	b	13a4c <__assert_fail@plt+0x2c58>
   13afc:	tst	r9, #2
   13b00:	mov	r6, r4
   13b04:	mov	r8, #1
   13b08:	beq	13a20 <__assert_fail@plt+0x2c2c>
   13b0c:	b	13980 <__assert_fail@plt+0x2b8c>
   13b10:	movw	r3, #258	; 0x102
   13b14:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13b18:	tst	r0, r3
   13b1c:	strd	r6, [sp, #8]
   13b20:	strd	r8, [sp, #16]
   13b24:	mov	r8, r2
   13b28:	str	sl, [sp, #24]
   13b2c:	mov	sl, r1
   13b30:	str	lr, [sp, #28]
   13b34:	beq	13bb8 <__assert_fail@plt+0x2dc4>
   13b38:	mov	r0, #24
   13b3c:	bl	174f4 <__assert_fail@plt+0x6700>
   13b40:	subs	r9, r0, #0
   13b44:	beq	13bdc <__assert_fail@plt+0x2de8>
   13b48:	ldrd	r6, [r8, #64]	; 0x40
   13b4c:	mov	r1, r9
   13b50:	ldrd	r4, [r8, #160]	; 0xa0
   13b54:	ldr	r0, [sl]
   13b58:	strd	r6, [r9]
   13b5c:	str	r8, [r9, #16]
   13b60:	strd	r4, [r9, #8]
   13b64:	bl	170b0 <__assert_fail@plt+0x62bc>
   13b68:	cmp	r9, r0
   13b6c:	mov	r4, r0
   13b70:	beq	13b9c <__assert_fail@plt+0x2da8>
   13b74:	mov	r0, r9
   13b78:	bl	130dc <__assert_fail@plt+0x22e8>
   13b7c:	cmp	r4, #0
   13b80:	beq	13bdc <__assert_fail@plt+0x2de8>
   13b84:	ldr	r3, [r4, #16]
   13b88:	mov	r2, #2
   13b8c:	mov	r0, #1
   13b90:	str	r3, [r8]
   13b94:	strh	r2, [r8, #56]	; 0x38
   13b98:	b	13ba0 <__assert_fail@plt+0x2dac>
   13b9c:	mov	r0, #1
   13ba0:	ldrd	r4, [sp]
   13ba4:	ldrd	r6, [sp, #8]
   13ba8:	ldrd	r8, [sp, #16]
   13bac:	ldr	sl, [sp, #24]
   13bb0:	add	sp, sp, #28
   13bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   13bb8:	add	r1, r2, #64	; 0x40
   13bbc:	ldr	r0, [sl]
   13bc0:	bl	175b0 <__assert_fail@plt+0x67bc>
   13bc4:	cmp	r0, #0
   13bc8:	beq	13b9c <__assert_fail@plt+0x2da8>
   13bcc:	mov	r3, #2
   13bd0:	str	r8, [r8]
   13bd4:	strh	r3, [r8, #56]	; 0x38
   13bd8:	b	13ba0 <__assert_fail@plt+0x2dac>
   13bdc:	mov	r0, #0
   13be0:	b	13ba0 <__assert_fail@plt+0x2dac>
   13be4:	movw	r3, #258	; 0x102
   13be8:	mov	ip, r1
   13bec:	strd	r4, [sp, #-12]!
   13bf0:	tst	r0, r3
   13bf4:	str	lr, [sp, #8]
   13bf8:	sub	sp, sp, #28
   13bfc:	bne	13c4c <__assert_fail@plt+0x2e58>
   13c00:	ldr	r3, [r2, #4]
   13c04:	cmp	r3, #0
   13c08:	beq	13c3c <__assert_fail@plt+0x2e48>
   13c0c:	ldr	r1, [r3, #48]	; 0x30
   13c10:	cmp	r1, #0
   13c14:	blt	13c3c <__assert_fail@plt+0x2e48>
   13c18:	ldr	ip, [ip]
   13c1c:	ldrd	r0, [ip, #16]
   13c20:	orrs	r1, r0, r1
   13c24:	beq	13cac <__assert_fail@plt+0x2eb8>
   13c28:	ldrd	r4, [ip]
   13c2c:	ldrd	r0, [r2, #160]	; 0xa0
   13c30:	cmp	r5, r1
   13c34:	cmpeq	r4, r0
   13c38:	beq	13c84 <__assert_fail@plt+0x2e90>
   13c3c:	add	sp, sp, #28
   13c40:	ldrd	r4, [sp]
   13c44:	add	sp, sp, #8
   13c48:	pop	{pc}		; (ldr pc, [sp], #4)
   13c4c:	ldrd	r4, [r2, #64]	; 0x40
   13c50:	mov	r1, sp
   13c54:	ldrd	r2, [r2, #160]	; 0xa0
   13c58:	ldr	r0, [ip]
   13c5c:	strd	r4, [sp]
   13c60:	strd	r2, [sp, #8]
   13c64:	bl	170f0 <__assert_fail@plt+0x62fc>
   13c68:	cmp	r0, #0
   13c6c:	beq	13cac <__assert_fail@plt+0x2eb8>
   13c70:	bl	130dc <__assert_fail@plt+0x22e8>
   13c74:	add	sp, sp, #28
   13c78:	ldrd	r4, [sp]
   13c7c:	add	sp, sp, #8
   13c80:	pop	{pc}		; (ldr pc, [sp], #4)
   13c84:	ldrd	r0, [ip, #8]
   13c88:	ldrd	r4, [r2, #64]	; 0x40
   13c8c:	cmp	r1, r5
   13c90:	cmpeq	r0, r4
   13c94:	bne	13c3c <__assert_fail@plt+0x2e48>
   13c98:	ldrd	r0, [r3, #64]	; 0x40
   13c9c:	ldrd	r2, [r3, #160]	; 0xa0
   13ca0:	strd	r2, [ip]
   13ca4:	strd	r0, [ip, #8]
   13ca8:	b	13c3c <__assert_fail@plt+0x2e48>
   13cac:	bl	10db8 <abort@plt>
   13cb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13cb4:	mov	r5, r0
   13cb8:	strd	r6, [sp, #8]
   13cbc:	strd	r8, [sp, #16]
   13cc0:	ldr	r9, [r0]
   13cc4:	strd	sl, [sp, #24]
   13cc8:	str	lr, [sp, #32]
   13ccc:	sub	sp, sp, #68	; 0x44
   13cd0:	str	r1, [sp, #32]
   13cd4:	ldr	r0, [r9, #12]
   13cd8:	cmp	r0, #0
   13cdc:	str	r0, [sp, #40]	; 0x28
   13ce0:	beq	14020 <__assert_fail@plt+0x322c>
   13ce4:	bl	10d64 <dirfd@plt>
   13ce8:	cmp	r0, #0
   13cec:	str	r0, [sp, #60]	; 0x3c
   13cf0:	blt	14564 <__assert_fail@plt+0x3770>
   13cf4:	ldr	r3, [r5, #44]	; 0x2c
   13cf8:	cmp	r3, #0
   13cfc:	beq	14448 <__assert_fail@plt+0x3654>
   13d00:	ldr	r3, [r5, #48]	; 0x30
   13d04:	mvn	r2, #0
   13d08:	str	r2, [sp, #16]
   13d0c:	mov	r2, #1
   13d10:	str	r2, [sp, #52]	; 0x34
   13d14:	ldr	r2, [r9, #28]
   13d18:	ldr	r1, [r9, #40]	; 0x28
   13d1c:	sub	r0, r1, #1
   13d20:	str	r1, [sp]
   13d24:	ldrb	r2, [r2, r0]
   13d28:	str	r0, [sp, #28]
   13d2c:	cmp	r2, #47	; 0x2f
   13d30:	beq	13d40 <__assert_fail@plt+0x2f4c>
   13d34:	add	r2, r1, #1
   13d38:	str	r2, [sp]
   13d3c:	str	r1, [sp, #28]
   13d40:	ands	r3, r3, #4
   13d44:	streq	r3, [sp, #20]
   13d48:	beq	13d68 <__assert_fail@plt+0x2f74>
   13d4c:	ldr	r3, [r5, #24]
   13d50:	mov	r1, #47	; 0x2f
   13d54:	ldr	r0, [sp, #28]
   13d58:	add	r2, r3, r0
   13d5c:	strb	r1, [r3, r0]
   13d60:	add	r3, r2, #1
   13d64:	str	r3, [sp, #20]
   13d68:	mov	sl, #0
   13d6c:	movw	r3, #6548	; 0x1994
   13d70:	movt	r3, #258	; 0x102
   13d74:	mov	r2, sl
   13d78:	ldr	fp, [r5, #36]	; 0x24
   13d7c:	mov	r7, sl
   13d80:	stmib	sp, {r2, r9}
   13d84:	movw	r2, #19778	; 0x4d42
   13d88:	movt	r2, #65363	; 0xff53
   13d8c:	str	sl, [sp, #24]
   13d90:	str	r3, [sp, #44]	; 0x2c
   13d94:	ldr	r3, [r9, #48]	; 0x30
   13d98:	str	sl, [sp, #36]	; 0x24
   13d9c:	str	r2, [sp, #48]	; 0x30
   13da0:	ldr	r2, [sp]
   13da4:	add	r3, r3, #1
   13da8:	str	r3, [sp, #12]
   13dac:	sub	fp, fp, r2
   13db0:	b	13dc8 <__assert_fail@plt+0x2fd4>
   13db4:	ldr	r3, [sp, #16]
   13db8:	add	r7, r7, #1
   13dbc:	cmp	r7, r3
   13dc0:	bcs	14180 <__assert_fail@plt+0x338c>
   13dc4:	mov	sl, r4
   13dc8:	ldr	r3, [sp, #8]
   13dcc:	ldr	r4, [r3, #12]
   13dd0:	cmp	r4, #0
   13dd4:	beq	14308 <__assert_fail@plt+0x3514>
   13dd8:	bl	10cf8 <__errno_location@plt>
   13ddc:	mov	r8, r0
   13de0:	mov	r3, #0
   13de4:	mov	r0, r4
   13de8:	str	r3, [r8]
   13dec:	bl	10d40 <readdir64@plt>
   13df0:	subs	r9, r0, #0
   13df4:	beq	143d8 <__assert_fail@plt+0x35e4>
   13df8:	ldr	r3, [r5, #48]	; 0x30
   13dfc:	tst	r3, #32
   13e00:	bne	13e10 <__assert_fail@plt+0x301c>
   13e04:	ldrb	r3, [r9, #19]
   13e08:	cmp	r3, #46	; 0x2e
   13e0c:	beq	13fa4 <__assert_fail@plt+0x31b0>
   13e10:	add	r4, r9, #19
   13e14:	mov	r0, r4
   13e18:	bl	10cc8 <strlen@plt>
   13e1c:	mov	r2, r0
   13e20:	mov	r1, r4
   13e24:	mov	r6, r0
   13e28:	mov	r0, r5
   13e2c:	bl	13318 <__assert_fail@plt+0x2524>
   13e30:	subs	r4, r0, #0
   13e34:	beq	14238 <__assert_fail@plt+0x3444>
   13e38:	cmp	fp, r6
   13e3c:	bls	13f04 <__assert_fail@plt+0x3110>
   13e40:	ldr	r3, [sp]
   13e44:	adds	r6, r6, r3
   13e48:	bcs	14638 <__assert_fail@plt+0x3844>
   13e4c:	ldr	r3, [sp, #12]
   13e50:	add	r1, r4, #168	; 0xa8
   13e54:	ldr	ip, [r5]
   13e58:	ldr	r0, [r5, #48]	; 0x30
   13e5c:	str	r6, [r4, #40]	; 0x28
   13e60:	str	r3, [r4, #48]	; 0x30
   13e64:	ldrd	r2, [r9]
   13e68:	str	ip, [r4, #4]
   13e6c:	tst	r0, #4
   13e70:	streq	r1, [r4, #24]
   13e74:	strd	r2, [r4, #160]	; 0xa0
   13e78:	bne	13f84 <__assert_fail@plt+0x3190>
   13e7c:	ldr	r3, [r5, #44]	; 0x2c
   13e80:	cmp	r3, #0
   13e84:	beq	13e90 <__assert_fail@plt+0x309c>
   13e88:	ands	r3, r0, #1024	; 0x400
   13e8c:	beq	13fc4 <__assert_fail@plt+0x31d0>
   13e90:	ldrb	r3, [r9, #18]
   13e94:	tst	r0, #8
   13e98:	sub	r2, r3, #1
   13e9c:	beq	13ea8 <__assert_fail@plt+0x30b4>
   13ea0:	tst	r3, #251	; 0xfb
   13ea4:	bne	13fdc <__assert_fail@plt+0x31e8>
   13ea8:	mov	r3, #11
   13eac:	cmp	r2, r3
   13eb0:	strh	r3, [r4, #56]	; 0x38
   13eb4:	bls	13f68 <__assert_fail@plt+0x3174>
   13eb8:	mov	r1, #0
   13ebc:	mov	r2, #2
   13ec0:	mov	r3, #0
   13ec4:	str	r1, [r4, #80]	; 0x50
   13ec8:	strd	r2, [r4, #112]	; 0x70
   13ecc:	ldr	r2, [sp, #4]
   13ed0:	mov	r3, #0
   13ed4:	str	r3, [r4, #8]
   13ed8:	cmp	r2, r3
   13edc:	movw	r3, #10000	; 0x2710
   13ee0:	strne	r4, [sl, #8]
   13ee4:	streq	r4, [sp, #4]
   13ee8:	cmp	r7, r3
   13eec:	bne	13db4 <__assert_fail@plt+0x2fc0>
   13ef0:	ldr	r6, [r5, #44]	; 0x2c
   13ef4:	cmp	r6, #0
   13ef8:	beq	14134 <__assert_fail@plt+0x3340>
   13efc:	movw	r7, #10001	; 0x2711
   13f00:	b	13dc4 <__assert_fail@plt+0x2fd0>
   13f04:	ldr	r3, [sp, #28]
   13f08:	add	r1, r5, #36	; 0x24
   13f0c:	add	r0, r5, #24
   13f10:	ldr	fp, [r5, #24]
   13f14:	add	r2, r3, #2
   13f18:	add	r2, r2, r6
   13f1c:	bl	13648 <__assert_fail@plt+0x2854>
   13f20:	cmp	r0, #0
   13f24:	beq	14238 <__assert_fail@plt+0x3444>
   13f28:	ldr	r3, [r5, #24]
   13f2c:	cmp	r3, fp
   13f30:	beq	14018 <__assert_fail@plt+0x3224>
   13f34:	ldr	r2, [r5, #48]	; 0x30
   13f38:	tst	r2, #4
   13f3c:	beq	13f4c <__assert_fail@plt+0x3158>
   13f40:	ldr	r2, [sp]
   13f44:	add	r3, r3, r2
   13f48:	str	r3, [sp, #20]
   13f4c:	ldr	r3, [sp]
   13f50:	str	r0, [sp, #24]
   13f54:	ldr	fp, [r5, #36]	; 0x24
   13f58:	sub	fp, fp, r3
   13f5c:	b	13e40 <__assert_fail@plt+0x304c>
   13f60:	mov	r3, #11
   13f64:	strh	r3, [r4, #56]	; 0x38
   13f68:	movw	r3, #31972	; 0x7ce4
   13f6c:	movt	r3, #1
   13f70:	ldr	r1, [r3, r2, lsl #2]
   13f74:	mov	r2, #2
   13f78:	mov	r3, #0
   13f7c:	str	r1, [r4, #80]	; 0x50
   13f80:	b	13ec8 <__assert_fail@plt+0x30d4>
   13f84:	ldr	r3, [r4, #28]
   13f88:	ldr	r2, [r4, #52]	; 0x34
   13f8c:	ldr	r0, [sp, #20]
   13f90:	str	r3, [r4, #24]
   13f94:	add	r2, r2, #1
   13f98:	bl	10bd8 <memmove@plt>
   13f9c:	ldr	r0, [r5, #48]	; 0x30
   13fa0:	b	13e7c <__assert_fail@plt+0x3088>
   13fa4:	ldrb	r3, [r9, #20]
   13fa8:	cmp	r3, #0
   13fac:	beq	13fbc <__assert_fail@plt+0x31c8>
   13fb0:	ldrh	r3, [r9, #20]
   13fb4:	cmp	r3, #46	; 0x2e
   13fb8:	bne	13e10 <__assert_fail@plt+0x301c>
   13fbc:	mov	r4, sl
   13fc0:	b	13dc4 <__assert_fail@plt+0x2fd0>
   13fc4:	mov	r1, r0
   13fc8:	mov	r2, r4
   13fcc:	ldr	r0, [r5, #32]
   13fd0:	bl	136d8 <__assert_fail@plt+0x28e4>
   13fd4:	strh	r0, [r4, #56]	; 0x38
   13fd8:	b	13ecc <__assert_fail@plt+0x30d8>
   13fdc:	ubfx	r0, r0, #4, #1
   13fe0:	cmp	r3, #10
   13fe4:	moveq	r3, r0
   13fe8:	orrne	r3, r0, #1
   13fec:	cmp	r3, #0
   13ff0:	beq	13f60 <__assert_fail@plt+0x316c>
   13ff4:	mov	r3, #11
   13ff8:	cmp	r2, r3
   13ffc:	strh	r3, [r4, #56]	; 0x38
   14000:	bls	1421c <__assert_fail@plt+0x3428>
   14004:	mov	r1, #0
   14008:	mov	r2, #1
   1400c:	mov	r3, #0
   14010:	str	r1, [r4, #80]	; 0x50
   14014:	b	13ec8 <__assert_fail@plt+0x30d4>
   14018:	ldr	r0, [sp, #24]
   1401c:	b	13f4c <__assert_fail@plt+0x3158>
   14020:	ldr	r3, [r5, #48]	; 0x30
   14024:	ldr	r1, [r9, #24]
   14028:	and	r2, r3, #516	; 0x204
   1402c:	cmp	r2, #512	; 0x200
   14030:	ldreq	r0, [r5, #32]
   14034:	mvnne	r0, #99	; 0x63
   14038:	ands	r2, r3, #16
   1403c:	beq	1404c <__assert_fail@plt+0x3258>
   14040:	tst	r3, #1
   14044:	moveq	r2, #32768	; 0x8000
   14048:	bne	1429c <__assert_fail@plt+0x34a8>
   1404c:	add	r3, sp, #60	; 0x3c
   14050:	bl	173c0 <__assert_fail@plt+0x65cc>
   14054:	cmp	r0, #0
   14058:	str	r0, [sp, #4]
   1405c:	str	r0, [r9, #12]
   14060:	beq	145ac <__assert_fail@plt+0x37b8>
   14064:	ldrh	r3, [r9, #56]	; 0x38
   14068:	ldr	r0, [r5, #48]	; 0x30
   1406c:	cmp	r3, #11
   14070:	beq	144f8 <__assert_fail@plt+0x3704>
   14074:	tst	r0, #256	; 0x100
   14078:	bne	14474 <__assert_fail@plt+0x3680>
   1407c:	ldr	r2, [r5, #44]	; 0x2c
   14080:	movw	r3, #34464	; 0x86a0
   14084:	movt	r3, #1
   14088:	cmp	r2, #0
   1408c:	mvnne	r3, #0
   14090:	str	r3, [sp, #16]
   14094:	ldr	r3, [sp, #32]
   14098:	cmp	r3, #2
   1409c:	beq	14464 <__assert_fail@plt+0x3670>
   140a0:	ldr	r3, [r5, #48]	; 0x30
   140a4:	ldr	r0, [sp, #60]	; 0x3c
   140a8:	and	r3, r3, #56	; 0x38
   140ac:	cmp	r3, #24
   140b0:	beq	142ac <__assert_fail@plt+0x34b8>
   140b4:	ldr	r3, [sp, #32]
   140b8:	mov	r4, #1
   140bc:	sub	r6, r3, #3
   140c0:	clz	r6, r6
   140c4:	lsr	r6, r6, #5
   140c8:	ldr	r3, [r5, #48]	; 0x30
   140cc:	tst	r3, #512	; 0x200
   140d0:	bne	14598 <__assert_fail@plt+0x37a4>
   140d4:	cmp	r0, #0
   140d8:	bge	14538 <__assert_fail@plt+0x3744>
   140dc:	tst	r6, r4
   140e0:	beq	140f0 <__assert_fail@plt+0x32fc>
   140e4:	bl	10cf8 <__errno_location@plt>
   140e8:	ldr	r3, [r0]
   140ec:	str	r3, [r9, #32]
   140f0:	ldrh	r3, [r9, #58]	; 0x3a
   140f4:	ldr	r0, [r9, #12]
   140f8:	orr	r3, r3, #1
   140fc:	strh	r3, [r9, #58]	; 0x3a
   14100:	bl	10ddc <closedir@plt>
   14104:	ldr	r3, [r5, #48]	; 0x30
   14108:	mov	r2, #0
   1410c:	str	r2, [r9, #12]
   14110:	tst	r3, #512	; 0x200
   14114:	beq	14124 <__assert_fail@plt+0x3330>
   14118:	ldr	r0, [sp, #60]	; 0x3c
   1411c:	cmp	r0, r2
   14120:	bge	1458c <__assert_fail@plt+0x3798>
   14124:	mov	r2, #0
   14128:	str	r2, [r9, #12]
   1412c:	str	r2, [sp, #52]	; 0x34
   14130:	b	13d14 <__assert_fail@plt+0x2f20>
   14134:	ldr	r0, [sp, #8]
   14138:	ldr	r1, [sp, #60]	; 0x3c
   1413c:	bl	13434 <__assert_fail@plt+0x2640>
   14140:	movw	r3, #26985	; 0x6969
   14144:	cmp	r0, r3
   14148:	beq	1416c <__assert_fail@plt+0x3378>
   1414c:	ldr	r3, [sp, #44]	; 0x2c
   14150:	cmp	r0, r3
   14154:	beq	1416c <__assert_fail@plt+0x3378>
   14158:	ldr	r3, [sp, #48]	; 0x30
   1415c:	cmp	r0, r3
   14160:	movne	r3, #1
   14164:	strne	r3, [sp, #36]	; 0x24
   14168:	bne	13efc <__assert_fail@plt+0x3108>
   1416c:	ldr	r3, [sp, #16]
   14170:	add	r7, r7, #1
   14174:	str	r6, [sp, #36]	; 0x24
   14178:	cmp	r7, r3
   1417c:	bcc	13dc4 <__assert_fail@plt+0x2fd0>
   14180:	ldr	r9, [sp, #8]
   14184:	ldr	r3, [sp, #24]
   14188:	cmp	r3, #0
   1418c:	beq	14318 <__assert_fail@plt+0x3524>
   14190:	ldr	r3, [r5, #4]
   14194:	ldr	r1, [r5, #24]
   14198:	cmp	r3, #0
   1419c:	beq	141d0 <__assert_fail@plt+0x33dc>
   141a0:	ldr	r2, [r3, #24]
   141a4:	add	r0, r3, #168	; 0xa8
   141a8:	cmp	r2, r0
   141ac:	beq	141c0 <__assert_fail@plt+0x33cc>
   141b0:	ldr	r0, [r3, #28]
   141b4:	sub	r2, r2, r0
   141b8:	add	r2, r1, r2
   141bc:	str	r2, [r3, #24]
   141c0:	str	r1, [r3, #28]
   141c4:	ldr	r3, [r3, #8]
   141c8:	cmp	r3, #0
   141cc:	bne	141a0 <__assert_fail@plt+0x33ac>
   141d0:	ldr	r3, [sp, #4]
   141d4:	b	14208 <__assert_fail@plt+0x3414>
   141d8:	ldr	r2, [r3, #24]
   141dc:	cmp	r2, r0
   141e0:	beq	141f4 <__assert_fail@plt+0x3400>
   141e4:	ldr	r0, [r3, #28]
   141e8:	sub	r2, r2, r0
   141ec:	add	r2, r1, r2
   141f0:	str	r2, [r3, #24]
   141f4:	ldr	r2, [r3, #8]
   141f8:	str	r1, [r3, #28]
   141fc:	cmp	r2, #0
   14200:	ldreq	r2, [r3, #4]
   14204:	mov	r3, r2
   14208:	ldr	r2, [r3, #48]	; 0x30
   1420c:	add	r0, r3, #168	; 0xa8
   14210:	cmp	r2, #0
   14214:	bge	141d8 <__assert_fail@plt+0x33e4>
   14218:	b	14318 <__assert_fail@plt+0x3524>
   1421c:	movw	r3, #31972	; 0x7ce4
   14220:	movt	r3, #1
   14224:	ldr	r1, [r3, r2, lsl #2]
   14228:	mov	r2, #1
   1422c:	mov	r3, #0
   14230:	str	r1, [r4, #80]	; 0x50
   14234:	b	13ec8 <__assert_fail@plt+0x30d4>
   14238:	ldr	r9, [sp, #8]
   1423c:	mov	r0, r4
   14240:	ldr	r4, [r8]
   14244:	bl	130dc <__assert_fail@plt+0x22e8>
   14248:	ldr	r0, [sp, #4]
   1424c:	bl	133a8 <__assert_fail@plt+0x25b4>
   14250:	ldr	r0, [r9, #12]
   14254:	bl	10ddc <closedir@plt>
   14258:	ldr	r3, [r5, #48]	; 0x30
   1425c:	mov	r2, #0
   14260:	mov	r1, #7
   14264:	str	r2, [sp, #4]
   14268:	str	r2, [r9, #12]
   1426c:	strh	r1, [r9, #56]	; 0x38
   14270:	orr	r3, r3, #8192	; 0x2000
   14274:	str	r3, [r5, #48]	; 0x30
   14278:	str	r4, [r8]
   1427c:	ldr	r0, [sp, #4]
   14280:	add	sp, sp, #68	; 0x44
   14284:	ldrd	r4, [sp]
   14288:	ldrd	r6, [sp, #8]
   1428c:	ldrd	r8, [sp, #16]
   14290:	ldrd	sl, [sp, #24]
   14294:	add	sp, sp, #32
   14298:	pop	{pc}		; (ldr pc, [sp], #4)
   1429c:	ldr	r2, [r9, #48]	; 0x30
   142a0:	cmp	r2, #0
   142a4:	movne	r2, #32768	; 0x8000
   142a8:	b	1404c <__assert_fail@plt+0x3258>
   142ac:	ldr	r3, [r9, #84]	; 0x54
   142b0:	cmp	r3, #2
   142b4:	bne	140b4 <__assert_fail@plt+0x32c0>
   142b8:	mov	r1, r0
   142bc:	mov	r0, r9
   142c0:	bl	13434 <__assert_fail@plt+0x2640>
   142c4:	movw	r3, #26985	; 0x6969
   142c8:	cmp	r0, r3
   142cc:	beq	14630 <__assert_fail@plt+0x383c>
   142d0:	bgt	14614 <__assert_fail@plt+0x3820>
   142d4:	movw	r3, #19778	; 0x4d42
   142d8:	movt	r3, #65363	; 0xff53
   142dc:	cmp	r0, r3
   142e0:	beq	14630 <__assert_fail@plt+0x383c>
   142e4:	cmp	r0, #0
   142e8:	beq	14630 <__assert_fail@plt+0x383c>
   142ec:	ldr	r3, [sp, #32]
   142f0:	cmp	r3, #3
   142f4:	bne	14464 <__assert_fail@plt+0x3670>
   142f8:	mov	r4, #0
   142fc:	mov	r6, #1
   14300:	ldr	r0, [sp, #60]	; 0x3c
   14304:	b	140c8 <__assert_fail@plt+0x32d4>
   14308:	mov	r9, r3
   1430c:	ldr	r3, [sp, #24]
   14310:	cmp	r3, #0
   14314:	bne	14190 <__assert_fail@plt+0x339c>
   14318:	ldr	r3, [r5, #48]	; 0x30
   1431c:	tst	r3, #4
   14320:	beq	14350 <__assert_fail@plt+0x355c>
   14324:	ldr	r2, [sp]
   14328:	ldr	r3, [r5, #36]	; 0x24
   1432c:	cmp	r7, #0
   14330:	cmpne	r3, r2
   14334:	bne	14344 <__assert_fail@plt+0x3550>
   14338:	ldr	r3, [sp, #20]
   1433c:	sub	r3, r3, #1
   14340:	str	r3, [sp, #20]
   14344:	ldr	r2, [sp, #20]
   14348:	mov	r3, #0
   1434c:	strb	r3, [r2]
   14350:	ldr	r2, [sp, #40]	; 0x28
   14354:	ldr	r3, [sp, #52]	; 0x34
   14358:	cmp	r2, #0
   1435c:	movne	r3, #0
   14360:	cmp	r3, #0
   14364:	beq	1439c <__assert_fail@plt+0x35a8>
   14368:	ldr	r3, [sp, #32]
   1436c:	cmp	r7, #0
   14370:	cmpne	r3, #1
   14374:	bne	143a4 <__assert_fail@plt+0x35b0>
   14378:	ldr	r3, [r9, #48]	; 0x30
   1437c:	cmp	r3, #0
   14380:	bne	14514 <__assert_fail@plt+0x3720>
   14384:	mov	r0, r5
   14388:	bl	135e4 <__assert_fail@plt+0x27f0>
   1438c:	adds	r0, r0, #0
   14390:	movne	r0, #1
   14394:	cmp	r0, #0
   14398:	bne	145ec <__assert_fail@plt+0x37f8>
   1439c:	cmp	r7, #0
   143a0:	beq	144c4 <__assert_fail@plt+0x36d0>
   143a4:	ldr	r3, [sp, #36]	; 0x24
   143a8:	cmp	r3, #0
   143ac:	bne	1441c <__assert_fail@plt+0x3628>
   143b0:	ldr	r3, [r5, #44]	; 0x2c
   143b4:	cmp	r3, #0
   143b8:	cmpne	r7, #1
   143bc:	beq	1427c <__assert_fail@plt+0x3488>
   143c0:	mov	r2, r7
   143c4:	mov	r0, r5
   143c8:	ldr	r1, [sp, #4]
   143cc:	bl	13224 <__assert_fail@plt+0x2430>
   143d0:	str	r0, [sp, #4]
   143d4:	b	1427c <__assert_fail@plt+0x3488>
   143d8:	ldr	r3, [r8]
   143dc:	ldr	r9, [sp, #8]
   143e0:	cmp	r3, #0
   143e4:	beq	14400 <__assert_fail@plt+0x360c>
   143e8:	ldr	r2, [sp, #40]	; 0x28
   143ec:	str	r3, [r9, #32]
   143f0:	orrs	r2, r2, r7
   143f4:	moveq	r3, #4
   143f8:	movne	r3, #7
   143fc:	strh	r3, [r9, #56]	; 0x38
   14400:	ldr	r0, [r9, #12]
   14404:	cmp	r0, #0
   14408:	beq	1430c <__assert_fail@plt+0x3518>
   1440c:	bl	10ddc <closedir@plt>
   14410:	mov	r3, #0
   14414:	str	r3, [r9, #12]
   14418:	b	1430c <__assert_fail@plt+0x3518>
   1441c:	movw	r3, #12788	; 0x31f4
   14420:	movt	r3, #1
   14424:	ldr	r1, [sp, #4]
   14428:	mov	r2, r7
   1442c:	mov	r0, r5
   14430:	str	r3, [r5, #44]	; 0x2c
   14434:	bl	13224 <__assert_fail@plt+0x2430>
   14438:	mov	r3, #0
   1443c:	str	r0, [sp, #4]
   14440:	str	r3, [r5, #44]	; 0x2c
   14444:	b	1427c <__assert_fail@plt+0x3488>
   14448:	movw	r3, #34464	; 0x86a0
   1444c:	movt	r3, #1
   14450:	mov	r2, #1
   14454:	str	r3, [sp, #16]
   14458:	str	r2, [sp, #52]	; 0x34
   1445c:	ldr	r3, [r5, #48]	; 0x30
   14460:	b	13d14 <__assert_fail@plt+0x2f20>
   14464:	mov	r3, #0
   14468:	str	r3, [sp, #52]	; 0x34
   1446c:	ldr	r3, [r5, #48]	; 0x30
   14470:	b	13d14 <__assert_fail@plt+0x2f20>
   14474:	add	r4, r5, #56	; 0x38
   14478:	mov	r2, r9
   1447c:	mov	r1, r4
   14480:	bl	13be4 <__assert_fail@plt+0x2df0>
   14484:	mov	r3, #0
   14488:	mov	r2, r9
   1448c:	ldr	r0, [r5, #32]
   14490:	ldr	r1, [r5, #48]	; 0x30
   14494:	bl	136d8 <__assert_fail@plt+0x28e4>
   14498:	mov	r1, r4
   1449c:	mov	r2, r9
   144a0:	ldr	r0, [r5, #48]	; 0x30
   144a4:	bl	13b10 <__assert_fail@plt+0x2d1c>
   144a8:	subs	r4, r0, #0
   144ac:	bne	1407c <__assert_fail@plt+0x3288>
   144b0:	bl	10cf8 <__errno_location@plt>
   144b4:	mov	r3, #12
   144b8:	str	r4, [sp, #4]
   144bc:	str	r3, [r0]
   144c0:	b	1427c <__assert_fail@plt+0x3488>
   144c4:	ldr	r3, [sp, #32]
   144c8:	cmp	r3, #3
   144cc:	bne	144e4 <__assert_fail@plt+0x36f0>
   144d0:	ldrh	r3, [r9, #56]	; 0x38
   144d4:	cmp	r3, #7
   144d8:	cmpne	r3, #4
   144dc:	movne	r3, #6
   144e0:	strhne	r3, [r9, #56]	; 0x38
   144e4:	mov	r3, #0
   144e8:	ldr	r0, [sp, #4]
   144ec:	str	r3, [sp, #4]
   144f0:	bl	133a8 <__assert_fail@plt+0x25b4>
   144f4:	b	1427c <__assert_fail@plt+0x3488>
   144f8:	mov	r1, r0
   144fc:	mov	r3, #0
   14500:	ldr	r0, [r5, #32]
   14504:	mov	r2, r9
   14508:	bl	136d8 <__assert_fail@plt+0x28e4>
   1450c:	strh	r0, [r9, #56]	; 0x38
   14510:	b	1407c <__assert_fail@plt+0x3288>
   14514:	movw	r3, #32020	; 0x7d14
   14518:	movt	r3, #1
   1451c:	ldr	r1, [r9, #4]
   14520:	mvn	r2, #0
   14524:	mov	r0, r5
   14528:	bl	138f4 <__assert_fail@plt+0x2b00>
   1452c:	adds	r0, r0, #0
   14530:	movne	r0, #1
   14534:	b	14394 <__assert_fail@plt+0x35a0>
   14538:	mov	r2, r0
   1453c:	mov	r3, #0
   14540:	mov	r1, r9
   14544:	mov	r0, r5
   14548:	bl	138f4 <__assert_fail@plt+0x2b00>
   1454c:	cmp	r0, #0
   14550:	bne	140dc <__assert_fail@plt+0x32e8>
   14554:	mov	r3, #1
   14558:	str	r3, [sp, #52]	; 0x34
   1455c:	ldr	r3, [r5, #48]	; 0x30
   14560:	b	13d14 <__assert_fail@plt+0x2f20>
   14564:	ldr	r0, [r9, #12]
   14568:	mov	r4, #0
   1456c:	bl	10ddc <closedir@plt>
   14570:	ldr	r3, [sp, #32]
   14574:	str	r4, [r9, #12]
   14578:	cmp	r3, #3
   1457c:	beq	145d0 <__assert_fail@plt+0x37dc>
   14580:	mov	r3, #0
   14584:	str	r3, [sp, #4]
   14588:	b	1427c <__assert_fail@plt+0x3488>
   1458c:	bl	10dc4 <close@plt>
   14590:	ldr	r3, [r5, #48]	; 0x30
   14594:	b	14124 <__assert_fail@plt+0x3330>
   14598:	mov	r2, #3
   1459c:	movw	r1, #1030	; 0x406
   145a0:	bl	176a8 <__assert_fail@plt+0x68b4>
   145a4:	str	r0, [sp, #60]	; 0x3c
   145a8:	b	140d4 <__assert_fail@plt+0x32e0>
   145ac:	ldr	r3, [sp, #32]
   145b0:	cmp	r3, #3
   145b4:	bne	14580 <__assert_fail@plt+0x378c>
   145b8:	mov	r3, #4
   145bc:	strh	r3, [r9, #56]	; 0x38
   145c0:	bl	10cf8 <__errno_location@plt>
   145c4:	ldr	r3, [r0]
   145c8:	str	r3, [r9, #32]
   145cc:	b	1427c <__assert_fail@plt+0x3488>
   145d0:	mov	r3, #4
   145d4:	str	r4, [sp, #4]
   145d8:	strh	r3, [r9, #56]	; 0x38
   145dc:	bl	10cf8 <__errno_location@plt>
   145e0:	ldr	r3, [r0]
   145e4:	str	r3, [r9, #32]
   145e8:	b	1427c <__assert_fail@plt+0x3488>
   145ec:	ldr	r3, [r5, #48]	; 0x30
   145f0:	mov	r2, #7
   145f4:	mov	r1, #0
   145f8:	strh	r2, [r9, #56]	; 0x38
   145fc:	ldr	r0, [sp, #4]
   14600:	str	r1, [sp, #4]
   14604:	orr	r3, r3, #8192	; 0x2000
   14608:	str	r3, [r5, #48]	; 0x30
   1460c:	bl	133a8 <__assert_fail@plt+0x25b4>
   14610:	b	1427c <__assert_fail@plt+0x3488>
   14614:	movw	r3, #40864	; 0x9fa0
   14618:	cmp	r0, r3
   1461c:	beq	14630 <__assert_fail@plt+0x383c>
   14620:	movw	r3, #16719	; 0x414f
   14624:	movt	r3, #21318	; 0x5346
   14628:	cmp	r0, r3
   1462c:	bne	142ec <__assert_fail@plt+0x34f8>
   14630:	ldr	r0, [sp, #60]	; 0x3c
   14634:	b	140b4 <__assert_fail@plt+0x32c0>
   14638:	ldr	r9, [sp, #8]
   1463c:	mov	r0, r4
   14640:	bl	130dc <__assert_fail@plt+0x22e8>
   14644:	ldr	r0, [sp, #4]
   14648:	bl	133a8 <__assert_fail@plt+0x25b4>
   1464c:	ldr	r0, [r9, #12]
   14650:	bl	10ddc <closedir@plt>
   14654:	ldr	r3, [r5, #48]	; 0x30
   14658:	mov	r2, #0
   1465c:	mov	r0, #7
   14660:	mov	r1, #36	; 0x24
   14664:	str	r2, [sp, #4]
   14668:	str	r2, [r9, #12]
   1466c:	strh	r0, [r9, #56]	; 0x38
   14670:	orr	r3, r3, #8192	; 0x2000
   14674:	str	r3, [r5, #48]	; 0x30
   14678:	str	r1, [r8]
   1467c:	b	1427c <__assert_fail@plt+0x3488>
   14680:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14684:	bic	r5, r1, #4080	; 0xff0
   14688:	bic	r5, r5, #15
   1468c:	strd	r6, [sp, #8]
   14690:	cmp	r5, #0
   14694:	strd	r8, [sp, #16]
   14698:	strd	sl, [sp, #24]
   1469c:	str	lr, [sp, #32]
   146a0:	sub	sp, sp, #12
   146a4:	bne	149c0 <__assert_fail@plt+0x3bcc>
   146a8:	and	r3, r1, #516	; 0x204
   146ac:	mov	r7, r1
   146b0:	cmp	r3, #516	; 0x204
   146b4:	beq	1495c <__assert_fail@plt+0x3b68>
   146b8:	ands	r5, r1, #18
   146bc:	beq	1495c <__assert_fail@plt+0x3b68>
   146c0:	mov	r6, r0
   146c4:	mov	r1, #96	; 0x60
   146c8:	mov	r0, #1
   146cc:	mov	r9, r2
   146d0:	bl	17480 <__assert_fail@plt+0x668c>
   146d4:	subs	r5, r0, #0
   146d8:	beq	14914 <__assert_fail@plt+0x3b20>
   146dc:	tst	r7, #2
   146e0:	mvn	r2, #99	; 0x63
   146e4:	bicne	r3, r7, #512	; 0x200
   146e8:	orrne	r3, r3, #4
   146ec:	streq	r7, [r5, #48]	; 0x30
   146f0:	str	r2, [r5, #32]
   146f4:	strne	r3, [r5, #48]	; 0x30
   146f8:	ldr	r3, [r6]
   146fc:	str	r9, [r5, #44]	; 0x2c
   14700:	cmp	r3, #0
   14704:	beq	149d4 <__assert_fail@plt+0x3be0>
   14708:	mov	r8, r6
   1470c:	mov	r4, #0
   14710:	mov	r0, r3
   14714:	bl	10cc8 <strlen@plt>
   14718:	ldr	r3, [r8, #4]!
   1471c:	cmp	r4, r0
   14720:	movcc	r4, r0
   14724:	cmp	r3, #0
   14728:	bne	14710 <__assert_fail@plt+0x391c>
   1472c:	add	r2, r4, #1
   14730:	cmp	r2, #4096	; 0x1000
   14734:	movcc	r2, #4096	; 0x1000
   14738:	add	r1, r5, #36	; 0x24
   1473c:	add	r0, r5, #24
   14740:	bl	13648 <__assert_fail@plt+0x2854>
   14744:	subs	fp, r0, #0
   14748:	beq	1494c <__assert_fail@plt+0x3b58>
   1474c:	ldr	sl, [r6]
   14750:	cmp	sl, #0
   14754:	beq	149b0 <__assert_fail@plt+0x3bbc>
   14758:	movw	r1, #32324	; 0x7e44
   1475c:	movt	r1, #1
   14760:	mov	r2, #0
   14764:	mov	r0, r5
   14768:	bl	13318 <__assert_fail@plt+0x2524>
   1476c:	subs	sl, r0, #0
   14770:	beq	14944 <__assert_fail@plt+0x3b50>
   14774:	mvn	r3, #0
   14778:	cmp	r9, #0
   1477c:	ldr	r4, [r6]
   14780:	str	r3, [sl, #48]	; 0x30
   14784:	beq	14790 <__assert_fail@plt+0x399c>
   14788:	ldr	fp, [r5, #48]	; 0x30
   1478c:	ubfx	fp, fp, #10, #1
   14790:	cmp	r4, #0
   14794:	beq	14a10 <__assert_fail@plt+0x3c1c>
   14798:	eor	r7, r7, #2048	; 0x800
   1479c:	mov	r3, #0
   147a0:	ubfx	r2, r7, #11, #1
   147a4:	mov	r8, r3
   147a8:	mov	r7, r3
   147ac:	strd	r2, [sp]
   147b0:	b	147e8 <__assert_fail@plt+0x39f4>
   147b4:	mov	r3, #11
   147b8:	mov	r2, #2
   147bc:	cmp	r9, r1
   147c0:	strh	r3, [r4, #56]	; 0x38
   147c4:	mov	r3, #0
   147c8:	strd	r2, [r4, #112]	; 0x70
   147cc:	beq	1499c <__assert_fail@plt+0x3ba8>
   147d0:	str	r7, [r4, #8]
   147d4:	mov	r7, r4
   147d8:	ldr	r4, [r6, #4]!
   147dc:	add	r8, r8, #1
   147e0:	cmp	r4, #0
   147e4:	beq	14894 <__assert_fail@plt+0x3aa0>
   147e8:	mov	r0, r4
   147ec:	bl	10cc8 <strlen@plt>
   147f0:	ldr	r3, [sp]
   147f4:	mov	r2, r0
   147f8:	cmp	r0, #2
   147fc:	movls	r3, #0
   14800:	andhi	r3, r3, #1
   14804:	cmp	r3, #0
   14808:	bne	1496c <__assert_fail@plt+0x3b78>
   1480c:	mov	r1, r4
   14810:	mov	r0, r5
   14814:	bl	13318 <__assert_fail@plt+0x2524>
   14818:	subs	r4, r0, #0
   1481c:	beq	14934 <__assert_fail@plt+0x3b40>
   14820:	add	r2, r4, #168	; 0xa8
   14824:	cmp	r7, #0
   14828:	moveq	r3, #0
   1482c:	andne	r3, fp, #1
   14830:	str	sl, [r4, #4]
   14834:	mov	r1, #0
   14838:	cmp	r3, #0
   1483c:	str	r2, [r4, #24]
   14840:	str	r1, [r4, #48]	; 0x30
   14844:	bne	147b4 <__assert_fail@plt+0x39c0>
   14848:	mov	r2, r4
   1484c:	ldr	r0, [r5, #32]
   14850:	ldr	r1, [r5, #48]	; 0x30
   14854:	bl	136d8 <__assert_fail@plt+0x28e4>
   14858:	cmp	r9, #0
   1485c:	strh	r0, [r4, #56]	; 0x38
   14860:	bne	147d0 <__assert_fail@plt+0x39dc>
   14864:	cmp	r7, #0
   14868:	str	r9, [r4, #8]
   1486c:	moveq	r7, r4
   14870:	streq	r4, [sp, #4]
   14874:	beq	147d8 <__assert_fail@plt+0x39e4>
   14878:	ldr	r3, [sp, #4]
   1487c:	str	r4, [sp, #4]
   14880:	str	r4, [r3, #8]
   14884:	ldr	r4, [r6, #4]!
   14888:	add	r8, r8, #1
   1488c:	cmp	r4, #0
   14890:	bne	147e8 <__assert_fail@plt+0x39f4>
   14894:	cmp	r9, #0
   14898:	cmpne	r8, #1
   1489c:	bls	148b4 <__assert_fail@plt+0x3ac0>
   148a0:	mov	r1, r7
   148a4:	mov	r2, r8
   148a8:	mov	r0, r5
   148ac:	bl	13224 <__assert_fail@plt+0x2430>
   148b0:	mov	r7, r0
   148b4:	movw	r1, #32324	; 0x7e44
   148b8:	movt	r1, #1
   148bc:	mov	r2, #0
   148c0:	mov	r0, r5
   148c4:	bl	13318 <__assert_fail@plt+0x2524>
   148c8:	cmp	r0, #0
   148cc:	str	r0, [r5]
   148d0:	beq	14934 <__assert_fail@plt+0x3b40>
   148d4:	mov	r2, #1
   148d8:	mov	r3, #9
   148dc:	str	r7, [r0, #8]
   148e0:	add	r1, r5, #56	; 0x38
   148e4:	str	r2, [r0, #48]	; 0x30
   148e8:	strh	r3, [r0, #56]	; 0x38
   148ec:	ldr	r0, [r5, #48]	; 0x30
   148f0:	bl	13834 <__assert_fail@plt+0x2a40>
   148f4:	cmp	r0, #0
   148f8:	beq	14934 <__assert_fail@plt+0x3b40>
   148fc:	ldr	r1, [r5, #48]	; 0x30
   14900:	tst	r1, #516	; 0x204
   14904:	beq	149dc <__assert_fail@plt+0x3be8>
   14908:	mvn	r1, #0
   1490c:	add	r0, r5, #60	; 0x3c
   14910:	bl	1720c <__assert_fail@plt+0x6418>
   14914:	mov	r0, r5
   14918:	add	sp, sp, #12
   1491c:	ldrd	r4, [sp]
   14920:	ldrd	r6, [sp, #8]
   14924:	ldrd	r8, [sp, #16]
   14928:	ldrd	sl, [sp, #24]
   1492c:	add	sp, sp, #32
   14930:	pop	{pc}		; (ldr pc, [sp], #4)
   14934:	mov	r0, r7
   14938:	bl	133a8 <__assert_fail@plt+0x25b4>
   1493c:	mov	r0, sl
   14940:	bl	130dc <__assert_fail@plt+0x22e8>
   14944:	ldr	r0, [r5, #24]
   14948:	bl	130dc <__assert_fail@plt+0x22e8>
   1494c:	mov	r0, r5
   14950:	mov	r5, #0
   14954:	bl	130dc <__assert_fail@plt+0x22e8>
   14958:	b	14914 <__assert_fail@plt+0x3b20>
   1495c:	bl	10cf8 <__errno_location@plt>
   14960:	mov	r3, #22
   14964:	str	r3, [r0]
   14968:	b	14914 <__assert_fail@plt+0x3b20>
   1496c:	sub	r3, r0, #1
   14970:	ldrb	r1, [r4, r3]
   14974:	add	r3, r4, r3
   14978:	cmp	r1, #47	; 0x2f
   1497c:	bne	1480c <__assert_fail@plt+0x3a18>
   14980:	ldrb	r1, [r3, #-1]!
   14984:	cmp	r1, #47	; 0x2f
   14988:	bne	1480c <__assert_fail@plt+0x3a18>
   1498c:	sub	r2, r2, #1
   14990:	cmp	r2, #1
   14994:	bne	14980 <__assert_fail@plt+0x3b8c>
   14998:	b	1480c <__assert_fail@plt+0x3a18>
   1499c:	ldr	r3, [sp, #4]
   149a0:	str	r4, [sp, #4]
   149a4:	str	r9, [r4, #8]
   149a8:	str	r4, [r3, #8]
   149ac:	b	14884 <__assert_fail@plt+0x3a90>
   149b0:	cmp	r9, #0
   149b4:	beq	14a08 <__assert_fail@plt+0x3c14>
   149b8:	mov	r4, sl
   149bc:	b	14788 <__assert_fail@plt+0x3994>
   149c0:	bl	10cf8 <__errno_location@plt>
   149c4:	mov	r3, #22
   149c8:	mov	r5, #0
   149cc:	str	r3, [r0]
   149d0:	b	14914 <__assert_fail@plt+0x3b20>
   149d4:	mov	r2, #4096	; 0x1000
   149d8:	b	14738 <__assert_fail@plt+0x3944>
   149dc:	movw	r2, #32024	; 0x7d18
   149e0:	movt	r2, #1
   149e4:	ldr	r0, [r5, #32]
   149e8:	bl	138c4 <__assert_fail@plt+0x2ad0>
   149ec:	cmp	r0, #0
   149f0:	str	r0, [r5, #28]
   149f4:	bge	14908 <__assert_fail@plt+0x3b14>
   149f8:	ldr	r3, [r5, #48]	; 0x30
   149fc:	orr	r3, r3, #4
   14a00:	str	r3, [r5, #48]	; 0x30
   14a04:	b	14908 <__assert_fail@plt+0x3b14>
   14a08:	mov	r7, sl
   14a0c:	b	148b4 <__assert_fail@plt+0x3ac0>
   14a10:	mov	r7, r4
   14a14:	b	148b4 <__assert_fail@plt+0x3ac0>
   14a18:	ldr	r3, [r0]
   14a1c:	strd	r4, [sp, #-16]!
   14a20:	mov	r5, r0
   14a24:	str	r6, [sp, #8]
   14a28:	str	lr, [sp, #12]
   14a2c:	cmp	r3, #0
   14a30:	beq	14a6c <__assert_fail@plt+0x3c78>
   14a34:	ldr	r2, [r3, #48]	; 0x30
   14a38:	cmp	r2, #0
   14a3c:	blt	14b8c <__assert_fail@plt+0x3d98>
   14a40:	ldr	r4, [r3, #8]
   14a44:	mov	r0, r3
   14a48:	cmp	r4, #0
   14a4c:	ldreq	r4, [r3, #4]
   14a50:	bl	130dc <__assert_fail@plt+0x22e8>
   14a54:	ldr	r2, [r4, #48]	; 0x30
   14a58:	mov	r3, r4
   14a5c:	cmp	r2, #0
   14a60:	bge	14a40 <__assert_fail@plt+0x3c4c>
   14a64:	mov	r0, r4
   14a68:	bl	130dc <__assert_fail@plt+0x22e8>
   14a6c:	ldr	r0, [r5, #4]
   14a70:	cmp	r0, #0
   14a74:	beq	14a7c <__assert_fail@plt+0x3c88>
   14a78:	bl	133a8 <__assert_fail@plt+0x25b4>
   14a7c:	ldr	r0, [r5, #8]
   14a80:	bl	130dc <__assert_fail@plt+0x22e8>
   14a84:	ldr	r0, [r5, #24]
   14a88:	bl	130dc <__assert_fail@plt+0x22e8>
   14a8c:	ldr	r3, [r5, #48]	; 0x30
   14a90:	tst	r3, #512	; 0x200
   14a94:	bne	14b00 <__assert_fail@plt+0x3d0c>
   14a98:	tst	r3, #4
   14a9c:	beq	14b2c <__assert_fail@plt+0x3d38>
   14aa0:	mov	r4, #0
   14aa4:	add	r0, r5, #60	; 0x3c
   14aa8:	bl	133f0 <__assert_fail@plt+0x25fc>
   14aac:	ldr	r0, [r5, #52]	; 0x34
   14ab0:	cmp	r0, #0
   14ab4:	beq	14abc <__assert_fail@plt+0x3cc8>
   14ab8:	bl	16c8c <__assert_fail@plt+0x5e98>
   14abc:	ldr	r3, [r5, #48]	; 0x30
   14ac0:	movw	r2, #258	; 0x102
   14ac4:	ldr	r0, [r5, #56]	; 0x38
   14ac8:	tst	r2, r3
   14acc:	beq	14b24 <__assert_fail@plt+0x3d30>
   14ad0:	cmp	r0, #0
   14ad4:	beq	14adc <__assert_fail@plt+0x3ce8>
   14ad8:	bl	16c8c <__assert_fail@plt+0x5e98>
   14adc:	mov	r0, r5
   14ae0:	bl	130dc <__assert_fail@plt+0x22e8>
   14ae4:	cmp	r4, #0
   14ae8:	bne	14b94 <__assert_fail@plt+0x3da0>
   14aec:	mov	r0, r4
   14af0:	ldrd	r4, [sp]
   14af4:	ldr	r6, [sp, #8]
   14af8:	add	sp, sp, #12
   14afc:	pop	{pc}		; (ldr pc, [sp], #4)
   14b00:	ldr	r0, [r5, #32]
   14b04:	cmp	r0, #0
   14b08:	blt	14aa0 <__assert_fail@plt+0x3cac>
   14b0c:	bl	10dc4 <close@plt>
   14b10:	cmp	r0, #0
   14b14:	beq	14aa0 <__assert_fail@plt+0x3cac>
   14b18:	bl	10cf8 <__errno_location@plt>
   14b1c:	ldr	r4, [r0]
   14b20:	b	14aa4 <__assert_fail@plt+0x3cb0>
   14b24:	bl	130dc <__assert_fail@plt+0x22e8>
   14b28:	b	14adc <__assert_fail@plt+0x3ce8>
   14b2c:	ldr	r0, [r5, #28]
   14b30:	bl	10d7c <fchdir@plt>
   14b34:	cmp	r0, #0
   14b38:	bne	14b5c <__assert_fail@plt+0x3d68>
   14b3c:	ldr	r0, [r5, #28]
   14b40:	bl	10dc4 <close@plt>
   14b44:	cmp	r0, #0
   14b48:	beq	14aa0 <__assert_fail@plt+0x3cac>
   14b4c:	bl	10cf8 <__errno_location@plt>
   14b50:	mov	r6, r0
   14b54:	ldr	r4, [r6]
   14b58:	b	14aa4 <__assert_fail@plt+0x3cb0>
   14b5c:	bl	10cf8 <__errno_location@plt>
   14b60:	mov	r6, r0
   14b64:	ldr	r0, [r5, #28]
   14b68:	ldr	r4, [r6]
   14b6c:	bl	10dc4 <close@plt>
   14b70:	adds	r3, r0, #0
   14b74:	movne	r3, #1
   14b78:	cmp	r4, #0
   14b7c:	movne	r3, #0
   14b80:	cmp	r3, #0
   14b84:	beq	14aa4 <__assert_fail@plt+0x3cb0>
   14b88:	b	14b54 <__assert_fail@plt+0x3d60>
   14b8c:	mov	r4, r3
   14b90:	b	14a64 <__assert_fail@plt+0x3c70>
   14b94:	bl	10cf8 <__errno_location@plt>
   14b98:	str	r4, [r0]
   14b9c:	mvn	r4, #0
   14ba0:	b	14aec <__assert_fail@plt+0x3cf8>
   14ba4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14ba8:	ldr	r4, [r0]
   14bac:	strd	r6, [sp, #8]
   14bb0:	str	r8, [sp, #16]
   14bb4:	str	lr, [sp, #20]
   14bb8:	cmp	r4, #0
   14bbc:	beq	14cdc <__assert_fail@plt+0x3ee8>
   14bc0:	ldr	r1, [r0, #48]	; 0x30
   14bc4:	ands	r3, r1, #8192	; 0x2000
   14bc8:	bne	14cdc <__assert_fail@plt+0x3ee8>
   14bcc:	ldrh	r2, [r4, #60]	; 0x3c
   14bd0:	mov	r8, r0
   14bd4:	mov	r0, #3
   14bd8:	strh	r0, [r4, #60]	; 0x3c
   14bdc:	cmp	r2, #1
   14be0:	beq	14f88 <__assert_fail@plt+0x4194>
   14be4:	cmp	r2, #2
   14be8:	ldrh	r3, [r4, #56]	; 0x38
   14bec:	beq	14cf8 <__assert_fail@plt+0x3f04>
   14bf0:	cmp	r3, #1
   14bf4:	bne	14c24 <__assert_fail@plt+0x3e30>
   14bf8:	b	14da4 <__assert_fail@plt+0x3fb0>
   14bfc:	mov	r0, r4
   14c00:	str	r5, [r8]
   14c04:	bl	130dc <__assert_fail@plt+0x22e8>
   14c08:	ldr	r4, [r5, #48]	; 0x30
   14c0c:	cmp	r4, #0
   14c10:	beq	14dec <__assert_fail@plt+0x3ff8>
   14c14:	ldrh	r3, [r5, #60]	; 0x3c
   14c18:	mov	r4, r5
   14c1c:	cmp	r3, #4
   14c20:	bne	14ea4 <__assert_fail@plt+0x40b0>
   14c24:	ldr	r5, [r4, #8]
   14c28:	cmp	r5, #0
   14c2c:	bne	14bfc <__assert_fail@plt+0x3e08>
   14c30:	ldr	r6, [r4, #4]
   14c34:	ldr	r3, [r6, #12]
   14c38:	cmp	r3, #0
   14c3c:	bne	150ac <__assert_fail@plt+0x42b8>
   14c40:	mov	r0, r4
   14c44:	str	r6, [r8]
   14c48:	bl	130dc <__assert_fail@plt+0x22e8>
   14c4c:	ldr	r3, [r6, #48]	; 0x30
   14c50:	cmn	r3, #1
   14c54:	beq	15050 <__assert_fail@plt+0x425c>
   14c58:	ldrh	r3, [r6, #56]	; 0x38
   14c5c:	cmp	r3, #11
   14c60:	beq	14f84 <__assert_fail@plt+0x4190>
   14c64:	ldr	r2, [r8, #24]
   14c68:	mov	r1, #0
   14c6c:	ldr	r3, [r6, #40]	; 0x28
   14c70:	strb	r1, [r2, r3]
   14c74:	ldr	r3, [r6, #48]	; 0x30
   14c78:	cmp	r3, r1
   14c7c:	beq	15070 <__assert_fail@plt+0x427c>
   14c80:	ldrh	r3, [r6, #58]	; 0x3a
   14c84:	tst	r3, #2
   14c88:	bne	15004 <__assert_fail@plt+0x4210>
   14c8c:	tst	r3, #1
   14c90:	beq	15144 <__assert_fail@plt+0x4350>
   14c94:	ldrh	r3, [r6, #56]	; 0x38
   14c98:	ldr	r0, [r8, #48]	; 0x30
   14c9c:	cmp	r3, #2
   14ca0:	beq	14cd0 <__assert_fail@plt+0x3edc>
   14ca4:	ldr	r3, [r6, #32]
   14ca8:	cmp	r3, #0
   14cac:	movne	r3, #7
   14cb0:	strhne	r3, [r6, #56]	; 0x38
   14cb4:	bne	14cd0 <__assert_fail@plt+0x3edc>
   14cb8:	mov	r3, #6
   14cbc:	mov	r2, r6
   14cc0:	add	r1, r8, #56	; 0x38
   14cc4:	strh	r3, [r6, #56]	; 0x38
   14cc8:	bl	13be4 <__assert_fail@plt+0x2df0>
   14ccc:	ldr	r0, [r8, #48]	; 0x30
   14cd0:	tst	r0, #8192	; 0x2000
   14cd4:	moveq	r4, r6
   14cd8:	beq	14ce0 <__assert_fail@plt+0x3eec>
   14cdc:	mov	r4, #0
   14ce0:	mov	r0, r4
   14ce4:	ldrd	r4, [sp]
   14ce8:	ldrd	r6, [sp, #8]
   14cec:	ldr	r8, [sp, #16]
   14cf0:	add	sp, sp, #20
   14cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf8:	sub	r2, r3, #12
   14cfc:	cmp	r2, #1
   14d00:	bls	14f40 <__assert_fail@plt+0x414c>
   14d04:	cmp	r3, #1
   14d08:	bne	14c24 <__assert_fail@plt+0x3e30>
   14d0c:	tst	r1, #64	; 0x40
   14d10:	beq	14d28 <__assert_fail@plt+0x3f34>
   14d14:	ldrd	r2, [r8, #16]
   14d18:	ldrd	r6, [r4, #64]	; 0x40
   14d1c:	cmp	r7, r3
   14d20:	cmpeq	r6, r2
   14d24:	bne	14dac <__assert_fail@plt+0x3fb8>
   14d28:	ldr	r0, [r8, #4]
   14d2c:	cmp	r0, #0
   14d30:	beq	14fb0 <__assert_fail@plt+0x41bc>
   14d34:	tst	r1, #4096	; 0x1000
   14d38:	bne	14f9c <__assert_fail@plt+0x41a8>
   14d3c:	mvn	r2, #0
   14d40:	mov	r1, r4
   14d44:	ldr	r3, [r4, #24]
   14d48:	mov	r0, r8
   14d4c:	bl	138f4 <__assert_fail@plt+0x2b00>
   14d50:	cmp	r0, #0
   14d54:	beq	15038 <__assert_fail@plt+0x4244>
   14d58:	bl	10cf8 <__errno_location@plt>
   14d5c:	ldrh	r3, [r4, #58]	; 0x3a
   14d60:	ldr	r2, [r0]
   14d64:	orr	r3, r3, #1
   14d68:	str	r2, [r4, #32]
   14d6c:	strh	r3, [r4, #58]	; 0x3a
   14d70:	ldr	r4, [r8, #4]
   14d74:	cmp	r4, #0
   14d78:	beq	14d98 <__assert_fail@plt+0x3fa4>
   14d7c:	mov	r3, r4
   14d80:	ldr	r2, [r3, #4]
   14d84:	ldr	r2, [r2, #24]
   14d88:	str	r2, [r3, #24]
   14d8c:	ldr	r3, [r3, #8]
   14d90:	cmp	r3, #0
   14d94:	bne	14d80 <__assert_fail@plt+0x3f8c>
   14d98:	mov	r3, #0
   14d9c:	str	r3, [r8, #4]
   14da0:	b	14eac <__assert_fail@plt+0x40b8>
   14da4:	cmp	r2, #4
   14da8:	bne	14d0c <__assert_fail@plt+0x3f18>
   14dac:	ldrh	r3, [r4, #58]	; 0x3a
   14db0:	tst	r3, #2
   14db4:	bne	150ec <__assert_fail@plt+0x42f8>
   14db8:	ldr	r0, [r8, #4]
   14dbc:	cmp	r0, #0
   14dc0:	beq	14dd0 <__assert_fail@plt+0x3fdc>
   14dc4:	bl	133a8 <__assert_fail@plt+0x25b4>
   14dc8:	mov	r3, #0
   14dcc:	str	r3, [r8, #4]
   14dd0:	mov	r3, #6
   14dd4:	mov	r2, r4
   14dd8:	ldr	r0, [r8, #48]	; 0x30
   14ddc:	add	r1, r8, #56	; 0x38
   14de0:	strh	r3, [r4, #56]	; 0x38
   14de4:	bl	13be4 <__assert_fail@plt+0x2df0>
   14de8:	b	14ce0 <__assert_fail@plt+0x3eec>
   14dec:	mov	r0, r8
   14df0:	bl	135e4 <__assert_fail@plt+0x27f0>
   14df4:	ldr	r3, [r8, #48]	; 0x30
   14df8:	cmp	r0, #0
   14dfc:	orrne	r3, r3, #8192	; 0x2000
   14e00:	strne	r3, [r8, #48]	; 0x30
   14e04:	bne	14ce0 <__assert_fail@plt+0x3eec>
   14e08:	movw	r2, #258	; 0x102
   14e0c:	ldr	r0, [r8, #56]	; 0x38
   14e10:	tst	r2, r3
   14e14:	beq	150e4 <__assert_fail@plt+0x42f0>
   14e18:	cmp	r0, #0
   14e1c:	beq	14e24 <__assert_fail@plt+0x4030>
   14e20:	bl	16c8c <__assert_fail@plt+0x5e98>
   14e24:	ldr	r2, [r5, #52]	; 0x34
   14e28:	add	r4, r5, #168	; 0xa8
   14e2c:	mov	r1, r4
   14e30:	ldr	r0, [r8, #24]
   14e34:	str	r2, [r5, #40]	; 0x28
   14e38:	add	r2, r2, #1
   14e3c:	bl	10bd8 <memmove@plt>
   14e40:	mov	r0, r4
   14e44:	mov	r1, #47	; 0x2f
   14e48:	bl	10d28 <strrchr@plt>
   14e4c:	cmp	r0, #0
   14e50:	beq	14e80 <__assert_fail@plt+0x408c>
   14e54:	cmp	r4, r0
   14e58:	beq	15040 <__assert_fail@plt+0x424c>
   14e5c:	add	r6, r0, #1
   14e60:	mov	r0, r6
   14e64:	bl	10cc8 <strlen@plt>
   14e68:	mov	r7, r0
   14e6c:	mov	r1, r6
   14e70:	mov	r0, r4
   14e74:	add	r2, r7, #1
   14e78:	bl	10bd8 <memmove@plt>
   14e7c:	str	r7, [r5, #52]	; 0x34
   14e80:	ldr	r3, [r8, #24]
   14e84:	add	r1, r8, #56	; 0x38
   14e88:	mov	r4, r5
   14e8c:	ldr	r0, [r8, #48]	; 0x30
   14e90:	str	r3, [r5, #24]
   14e94:	str	r3, [r5, #28]
   14e98:	bl	13834 <__assert_fail@plt+0x2a40>
   14e9c:	ldrh	r0, [r5, #56]	; 0x38
   14ea0:	b	14ef0 <__assert_fail@plt+0x40fc>
   14ea4:	cmp	r3, #2
   14ea8:	beq	15114 <__assert_fail@plt+0x4320>
   14eac:	ldr	r0, [r4, #4]
   14eb0:	mov	ip, #47	; 0x2f
   14eb4:	add	r1, r4, #168	; 0xa8
   14eb8:	ldr	r3, [r8, #24]
   14ebc:	ldr	lr, [r0, #28]
   14ec0:	ldr	r2, [r0, #40]	; 0x28
   14ec4:	sub	r0, r2, #1
   14ec8:	ldrb	lr, [lr, r0]
   14ecc:	cmp	lr, ip
   14ed0:	movne	r0, r2
   14ed4:	strb	ip, [r3, r0]
   14ed8:	add	r0, r3, r0
   14edc:	ldr	r2, [r4, #52]	; 0x34
   14ee0:	add	r0, r0, #1
   14ee4:	add	r2, r2, #1
   14ee8:	bl	10bd8 <memmove@plt>
   14eec:	ldrh	r0, [r4, #56]	; 0x38
   14ef0:	cmp	r0, #11
   14ef4:	str	r4, [r8]
   14ef8:	beq	14f68 <__assert_fail@plt+0x4174>
   14efc:	cmp	r0, #1
   14f00:	bne	14ce0 <__assert_fail@plt+0x3eec>
   14f04:	ldr	r3, [r4, #48]	; 0x30
   14f08:	add	r1, r8, #56	; 0x38
   14f0c:	ldr	r0, [r8, #48]	; 0x30
   14f10:	cmp	r3, #0
   14f14:	ldrdeq	r2, [r4, #64]	; 0x40
   14f18:	strdeq	r2, [r8, #16]
   14f1c:	mov	r2, r4
   14f20:	bl	13b10 <__assert_fail@plt+0x2d1c>
   14f24:	subs	r5, r0, #0
   14f28:	bne	14ce0 <__assert_fail@plt+0x3eec>
   14f2c:	bl	10cf8 <__errno_location@plt>
   14f30:	mov	r3, #12
   14f34:	mov	r4, r5
   14f38:	str	r3, [r0]
   14f3c:	b	14ce0 <__assert_fail@plt+0x3eec>
   14f40:	mov	r3, #1
   14f44:	mov	r2, r4
   14f48:	ldr	r0, [r8, #32]
   14f4c:	bl	136d8 <__assert_fail@plt+0x28e4>
   14f50:	cmp	r0, #1
   14f54:	strh	r0, [r4, #56]	; 0x38
   14f58:	beq	1518c <__assert_fail@plt+0x4398>
   14f5c:	cmp	r0, #11
   14f60:	str	r4, [r8]
   14f64:	bne	14ce0 <__assert_fail@plt+0x3eec>
   14f68:	ldrd	r2, [r4, #112]	; 0x70
   14f6c:	cmp	r3, #0
   14f70:	cmpeq	r2, #2
   14f74:	beq	150f8 <__assert_fail@plt+0x4304>
   14f78:	cmp	r3, #0
   14f7c:	cmpeq	r2, #1
   14f80:	beq	14ce0 <__assert_fail@plt+0x3eec>
   14f84:	bl	10db8 <abort@plt>
   14f88:	mov	r2, r4
   14f8c:	ldr	r0, [r8, #32]
   14f90:	bl	136d8 <__assert_fail@plt+0x28e4>
   14f94:	strh	r0, [r4, #56]	; 0x38
   14f98:	b	14ce0 <__assert_fail@plt+0x3eec>
   14f9c:	bic	r1, r1, #4096	; 0x1000
   14fa0:	str	r1, [r8, #48]	; 0x30
   14fa4:	bl	133a8 <__assert_fail@plt+0x25b4>
   14fa8:	mov	r3, #0
   14fac:	str	r3, [r8, #4]
   14fb0:	mov	r1, #3
   14fb4:	mov	r0, r8
   14fb8:	bl	13cb0 <__assert_fail@plt+0x2ebc>
   14fbc:	cmp	r0, #0
   14fc0:	str	r0, [r8, #4]
   14fc4:	movne	r4, r0
   14fc8:	bne	14d98 <__assert_fail@plt+0x3fa4>
   14fcc:	ldr	r0, [r8, #48]	; 0x30
   14fd0:	tst	r0, #8192	; 0x2000
   14fd4:	bne	14cdc <__assert_fail@plt+0x3ee8>
   14fd8:	ldr	r3, [r4, #32]
   14fdc:	cmp	r3, #0
   14fe0:	beq	14ff4 <__assert_fail@plt+0x4200>
   14fe4:	ldrh	r3, [r4, #56]	; 0x38
   14fe8:	cmp	r3, #4
   14fec:	movne	r3, #7
   14ff0:	strhne	r3, [r4, #56]	; 0x38
   14ff4:	add	r1, r8, #56	; 0x38
   14ff8:	mov	r2, r4
   14ffc:	bl	13be4 <__assert_fail@plt+0x2df0>
   15000:	b	14ce0 <__assert_fail@plt+0x3eec>
   15004:	ldr	r3, [r8, #48]	; 0x30
   15008:	ldr	r0, [r6, #36]	; 0x24
   1500c:	tst	r3, #4
   15010:	bne	15030 <__assert_fail@plt+0x423c>
   15014:	tst	r3, #512	; 0x200
   15018:	beq	15178 <__assert_fail@plt+0x4384>
   1501c:	mov	r1, r0
   15020:	mov	r2, #1
   15024:	mov	r0, r8
   15028:	bl	13554 <__assert_fail@plt+0x2760>
   1502c:	ldr	r0, [r6, #36]	; 0x24
   15030:	bl	10dc4 <close@plt>
   15034:	b	14c94 <__assert_fail@plt+0x3ea0>
   15038:	ldr	r4, [r8, #4]
   1503c:	b	14d98 <__assert_fail@plt+0x3fa4>
   15040:	ldrb	r3, [r4, #1]
   15044:	cmp	r3, #0
   15048:	beq	14e80 <__assert_fail@plt+0x408c>
   1504c:	b	14e5c <__assert_fail@plt+0x4068>
   15050:	mov	r0, r6
   15054:	bl	130dc <__assert_fail@plt+0x22e8>
   15058:	bl	10cf8 <__errno_location@plt>
   1505c:	mov	r3, #0
   15060:	mov	r4, r3
   15064:	str	r3, [r0]
   15068:	str	r3, [r8]
   1506c:	b	14ce0 <__assert_fail@plt+0x3eec>
   15070:	mov	r0, r8
   15074:	bl	135e4 <__assert_fail@plt+0x27f0>
   15078:	cmp	r0, #0
   1507c:	beq	14c94 <__assert_fail@plt+0x3ea0>
   15080:	bl	10cf8 <__errno_location@plt>
   15084:	ldr	r3, [r8, #48]	; 0x30
   15088:	ldr	r2, [r0]
   1508c:	orr	r3, r3, #8192	; 0x2000
   15090:	str	r2, [r6, #32]
   15094:	str	r3, [r8, #48]	; 0x30
   15098:	ldrh	r3, [r6, #56]	; 0x38
   1509c:	cmp	r3, #2
   150a0:	beq	14cdc <__assert_fail@plt+0x3ee8>
   150a4:	ldr	r0, [r8, #48]	; 0x30
   150a8:	b	14ca4 <__assert_fail@plt+0x3eb0>
   150ac:	ldr	r2, [r8, #24]
   150b0:	mov	r1, #3
   150b4:	mov	r0, r8
   150b8:	ldr	r3, [r6, #40]	; 0x28
   150bc:	str	r6, [r8]
   150c0:	strb	r5, [r2, r3]
   150c4:	bl	13cb0 <__assert_fail@plt+0x2ebc>
   150c8:	subs	r3, r0, #0
   150cc:	bne	15168 <__assert_fail@plt+0x4374>
   150d0:	ldr	r3, [r8, #48]	; 0x30
   150d4:	tst	r3, #8192	; 0x2000
   150d8:	bne	14cdc <__assert_fail@plt+0x3ee8>
   150dc:	ldr	r6, [r4, #4]
   150e0:	b	14c40 <__assert_fail@plt+0x3e4c>
   150e4:	bl	130dc <__assert_fail@plt+0x22e8>
   150e8:	b	14e24 <__assert_fail@plt+0x4030>
   150ec:	ldr	r0, [r4, #36]	; 0x24
   150f0:	bl	10dc4 <close@plt>
   150f4:	b	14db8 <__assert_fail@plt+0x3fc4>
   150f8:	mov	r3, #0
   150fc:	mov	r2, r4
   15100:	ldr	r0, [r8, #32]
   15104:	ldr	r1, [r8, #48]	; 0x30
   15108:	bl	136d8 <__assert_fail@plt+0x28e4>
   1510c:	strh	r0, [r4, #56]	; 0x38
   15110:	b	14efc <__assert_fail@plt+0x4108>
   15114:	mov	r3, #1
   15118:	mov	r2, r5
   1511c:	ldr	r0, [r8, #32]
   15120:	ldr	r1, [r8, #48]	; 0x30
   15124:	bl	136d8 <__assert_fail@plt+0x28e4>
   15128:	cmp	r0, #1
   1512c:	strh	r0, [r5, #56]	; 0x38
   15130:	beq	151cc <__assert_fail@plt+0x43d8>
   15134:	mov	r3, #3
   15138:	mov	r4, r5
   1513c:	strh	r3, [r5, #60]	; 0x3c
   15140:	b	14eac <__assert_fail@plt+0x40b8>
   15144:	movw	r3, #32020	; 0x7d14
   15148:	movt	r3, #1
   1514c:	ldr	r1, [r6, #4]
   15150:	mvn	r2, #0
   15154:	mov	r0, r8
   15158:	bl	138f4 <__assert_fail@plt+0x2b00>
   1515c:	cmp	r0, #0
   15160:	beq	14c94 <__assert_fail@plt+0x3ea0>
   15164:	b	15080 <__assert_fail@plt+0x428c>
   15168:	mov	r0, r4
   1516c:	mov	r4, r3
   15170:	bl	130dc <__assert_fail@plt+0x22e8>
   15174:	b	14eac <__assert_fail@plt+0x40b8>
   15178:	bl	10d7c <fchdir@plt>
   1517c:	cmp	r0, #0
   15180:	bne	15204 <__assert_fail@plt+0x4410>
   15184:	ldr	r0, [r6, #36]	; 0x24
   15188:	b	15030 <__assert_fail@plt+0x423c>
   1518c:	ldr	r1, [r8, #48]	; 0x30
   15190:	tst	r1, #4
   15194:	strne	r4, [r8]
   15198:	bne	14f04 <__assert_fail@plt+0x4110>
   1519c:	movw	r2, #32024	; 0x7d18
   151a0:	movt	r2, #1
   151a4:	ldr	r0, [r8, #32]
   151a8:	bl	138c4 <__assert_fail@plt+0x2ad0>
   151ac:	cmp	r0, #0
   151b0:	str	r0, [r4, #36]	; 0x24
   151b4:	blt	15224 <__assert_fail@plt+0x4430>
   151b8:	ldrh	r3, [r4, #58]	; 0x3a
   151bc:	ldrh	r0, [r4, #56]	; 0x38
   151c0:	orr	r3, r3, #2
   151c4:	strh	r3, [r4, #58]	; 0x3a
   151c8:	b	14ef0 <__assert_fail@plt+0x40fc>
   151cc:	ldr	r1, [r8, #48]	; 0x30
   151d0:	tst	r1, #4
   151d4:	bne	15134 <__assert_fail@plt+0x4340>
   151d8:	movw	r2, #32024	; 0x7d18
   151dc:	movt	r2, #1
   151e0:	ldr	r0, [r8, #32]
   151e4:	bl	138c4 <__assert_fail@plt+0x2ad0>
   151e8:	cmp	r0, #0
   151ec:	str	r0, [r5, #36]	; 0x24
   151f0:	blt	15240 <__assert_fail@plt+0x444c>
   151f4:	ldrh	r3, [r5, #58]	; 0x3a
   151f8:	orr	r3, r3, #2
   151fc:	strh	r3, [r5, #58]	; 0x3a
   15200:	b	15134 <__assert_fail@plt+0x4340>
   15204:	bl	10cf8 <__errno_location@plt>
   15208:	ldr	r3, [r8, #48]	; 0x30
   1520c:	ldr	r2, [r0]
   15210:	ldr	r0, [r6, #36]	; 0x24
   15214:	orr	r3, r3, #8192	; 0x2000
   15218:	str	r2, [r6, #32]
   1521c:	str	r3, [r8, #48]	; 0x30
   15220:	b	15030 <__assert_fail@plt+0x423c>
   15224:	bl	10cf8 <__errno_location@plt>
   15228:	ldr	r3, [r0]
   1522c:	mov	r2, #7
   15230:	str	r3, [r4, #32]
   15234:	strh	r2, [r4, #56]	; 0x38
   15238:	str	r4, [r8]
   1523c:	b	14ce0 <__assert_fail@plt+0x3eec>
   15240:	bl	10cf8 <__errno_location@plt>
   15244:	ldr	r3, [r0]
   15248:	mov	r2, #7
   1524c:	str	r3, [r5, #32]
   15250:	strh	r2, [r5, #56]	; 0x38
   15254:	b	15134 <__assert_fail@plt+0x4340>
   15258:	cmp	r2, #4
   1525c:	bhi	15270 <__assert_fail@plt+0x447c>
   15260:	mov	r3, #0
   15264:	strh	r2, [r1, #60]	; 0x3c
   15268:	mov	r0, r3
   1526c:	bx	lr
   15270:	str	r4, [sp, #-8]!
   15274:	str	lr, [sp, #4]
   15278:	bl	10cf8 <__errno_location@plt>
   1527c:	mov	r2, #22
   15280:	mov	r3, #1
   15284:	ldr	r4, [sp]
   15288:	add	sp, sp, #4
   1528c:	str	r2, [r0]
   15290:	mov	r0, r3
   15294:	pop	{pc}		; (ldr pc, [sp], #4)
   15298:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1529c:	mov	r4, r1
   152a0:	mov	r5, r0
   152a4:	strd	r6, [sp, #8]
   152a8:	str	r8, [sp, #16]
   152ac:	str	lr, [sp, #20]
   152b0:	bl	10cf8 <__errno_location@plt>
   152b4:	bics	r2, r4, #4096	; 0x1000
   152b8:	mov	r7, r0
   152bc:	movne	r3, #22
   152c0:	movne	r0, #0
   152c4:	strne	r3, [r7]
   152c8:	bne	1535c <__assert_fail@plt+0x4568>
   152cc:	ldr	r6, [r5]
   152d0:	str	r2, [r7]
   152d4:	ldr	r3, [r5, #48]	; 0x30
   152d8:	ands	r0, r3, #8192	; 0x2000
   152dc:	movne	r0, r2
   152e0:	bne	1535c <__assert_fail@plt+0x4568>
   152e4:	ldrh	r3, [r6, #56]	; 0x38
   152e8:	cmp	r3, #9
   152ec:	beq	153cc <__assert_fail@plt+0x45d8>
   152f0:	cmp	r3, #1
   152f4:	bne	1535c <__assert_fail@plt+0x4568>
   152f8:	ldr	r0, [r5, #4]
   152fc:	cmp	r0, #0
   15300:	beq	15308 <__assert_fail@plt+0x4514>
   15304:	bl	133a8 <__assert_fail@plt+0x25b4>
   15308:	cmp	r4, #4096	; 0x1000
   1530c:	movne	r4, #1
   15310:	bne	15324 <__assert_fail@plt+0x4530>
   15314:	ldr	r3, [r5, #48]	; 0x30
   15318:	mov	r4, #2
   1531c:	orr	r3, r3, #4096	; 0x1000
   15320:	str	r3, [r5, #48]	; 0x30
   15324:	ldr	r3, [r6, #48]	; 0x30
   15328:	cmp	r3, #0
   1532c:	bne	1534c <__assert_fail@plt+0x4558>
   15330:	ldr	r3, [r6, #24]
   15334:	ldrb	r3, [r3]
   15338:	cmp	r3, #47	; 0x2f
   1533c:	beq	1534c <__assert_fail@plt+0x4558>
   15340:	ldr	r1, [r5, #48]	; 0x30
   15344:	ands	r6, r1, #4
   15348:	beq	15370 <__assert_fail@plt+0x457c>
   1534c:	mov	r1, r4
   15350:	mov	r0, r5
   15354:	bl	13cb0 <__assert_fail@plt+0x2ebc>
   15358:	str	r0, [r5, #4]
   1535c:	ldrd	r4, [sp]
   15360:	ldrd	r6, [sp, #8]
   15364:	ldr	r8, [sp, #16]
   15368:	add	sp, sp, #20
   1536c:	pop	{pc}		; (ldr pc, [sp], #4)
   15370:	movw	r2, #32024	; 0x7d18
   15374:	movt	r2, #1
   15378:	ldr	r0, [r5, #32]
   1537c:	bl	138c4 <__assert_fail@plt+0x2ad0>
   15380:	subs	r8, r0, #0
   15384:	movlt	r0, r6
   15388:	strlt	r6, [r5, #4]
   1538c:	blt	1535c <__assert_fail@plt+0x4568>
   15390:	mov	r1, r4
   15394:	mov	r0, r5
   15398:	bl	13cb0 <__assert_fail@plt+0x2ebc>
   1539c:	ldr	r3, [r5, #48]	; 0x30
   153a0:	str	r0, [r5, #4]
   153a4:	ands	r4, r3, #512	; 0x200
   153a8:	bne	153d4 <__assert_fail@plt+0x45e0>
   153ac:	mov	r0, r8
   153b0:	bl	10d7c <fchdir@plt>
   153b4:	cmp	r0, #0
   153b8:	bne	153e8 <__assert_fail@plt+0x45f4>
   153bc:	mov	r0, r8
   153c0:	bl	10dc4 <close@plt>
   153c4:	ldr	r0, [r5, #4]
   153c8:	b	1535c <__assert_fail@plt+0x4568>
   153cc:	ldr	r0, [r6, #8]
   153d0:	b	1535c <__assert_fail@plt+0x4568>
   153d4:	mov	r1, r8
   153d8:	mov	r2, #1
   153dc:	mov	r0, r5
   153e0:	bl	13554 <__assert_fail@plt+0x2760>
   153e4:	b	153c4 <__assert_fail@plt+0x45d0>
   153e8:	ldr	r5, [r7]
   153ec:	mov	r0, r8
   153f0:	bl	10dc4 <close@plt>
   153f4:	mov	r0, r4
   153f8:	str	r5, [r7]
   153fc:	b	1535c <__assert_fail@plt+0x4568>
   15400:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15404:	ldr	r4, [r1, #32]
   15408:	strd	r6, [sp, #8]
   1540c:	strd	r8, [sp, #16]
   15410:	ldr	r7, [r1]
   15414:	str	sl, [sp, #24]
   15418:	ldr	r8, [r1, #28]
   1541c:	add	r6, r0, r4, lsl #2
   15420:	str	lr, [sp, #28]
   15424:	mov	r5, r7
   15428:	mov	r3, r8
   1542c:	cmp	r5, r4
   15430:	movle	r2, #0
   15434:	movgt	r2, #1
   15438:	cmp	r3, r4
   1543c:	movge	r2, #0
   15440:	cmp	r2, #0
   15444:	beq	154b8 <__assert_fail@plt+0x46c4>
   15448:	sub	r2, r5, r4
   1544c:	sub	lr, r4, r3
   15450:	cmp	r2, lr
   15454:	ble	15488 <__assert_fail@plt+0x4694>
   15458:	sub	r5, r5, lr
   1545c:	add	lr, lr, r3
   15460:	add	r2, r0, r3, lsl #2
   15464:	add	lr, r0, lr, lsl #2
   15468:	add	ip, r0, r5, lsl #2
   1546c:	ldr	sl, [ip]
   15470:	ldr	r9, [r2]
   15474:	str	sl, [r2], #4
   15478:	cmp	lr, r2
   1547c:	str	r9, [ip], #4
   15480:	bne	1546c <__assert_fail@plt+0x4678>
   15484:	b	1542c <__assert_fail@plt+0x4638>
   15488:	add	sl, r2, r3
   1548c:	add	r3, r0, r3, lsl #2
   15490:	mov	r2, r6
   15494:	add	r9, r0, sl, lsl #2
   15498:	ldr	lr, [r2]
   1549c:	ldr	ip, [r3]
   154a0:	str	lr, [r3], #4
   154a4:	cmp	r3, r9
   154a8:	str	ip, [r2], #4
   154ac:	bne	15498 <__assert_fail@plt+0x46a4>
   154b0:	mov	r3, sl
   154b4:	b	1542c <__assert_fail@plt+0x4638>
   154b8:	sub	r4, r7, r4
   154bc:	str	r7, [r1, #32]
   154c0:	add	r8, r4, r8
   154c4:	ldrd	r4, [sp]
   154c8:	str	r8, [r1, #28]
   154cc:	ldrd	r6, [sp, #8]
   154d0:	ldrd	r8, [sp, #16]
   154d4:	ldr	sl, [sp, #24]
   154d8:	add	sp, sp, #28
   154dc:	pop	{pc}		; (ldr pc, [sp], #4)
   154e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   154e4:	strd	r6, [sp, #8]
   154e8:	strd	r8, [sp, #16]
   154ec:	strd	sl, [sp, #24]
   154f0:	str	lr, [sp, #32]
   154f4:	sub	sp, sp, #52	; 0x34
   154f8:	str	r3, [sp, #12]
   154fc:	ldr	r3, [sp, #96]	; 0x60
   15500:	str	r1, [sp, #28]
   15504:	str	r2, [sp, #32]
   15508:	str	r0, [sp, #36]	; 0x24
   1550c:	ldr	r8, [r3, #20]
   15510:	ldrb	r5, [r8]
   15514:	mov	r9, r8
   15518:	cmp	r5, #61	; 0x3d
   1551c:	cmpne	r5, #0
   15520:	movne	r5, #1
   15524:	moveq	r5, #0
   15528:	beq	15540 <__assert_fail@plt+0x474c>
   1552c:	ldrb	r3, [r9, #1]!
   15530:	cmp	r3, #0
   15534:	cmpne	r3, #61	; 0x3d
   15538:	bne	1552c <__assert_fail@plt+0x4738>
   1553c:	sub	r5, r9, r8
   15540:	ldr	r3, [sp, #12]
   15544:	ldr	r3, [r3]
   15548:	cmp	r3, #0
   1554c:	str	r3, [sp, #16]
   15550:	beq	15718 <__assert_fail@plt+0x4924>
   15554:	ldr	fp, [sp, #12]
   15558:	mov	r6, #0
   1555c:	ldr	r4, [sp, #16]
   15560:	str	fp, [sp, #24]
   15564:	b	1556c <__assert_fail@plt+0x4778>
   15568:	mov	r6, r7
   1556c:	mov	r2, r5
   15570:	mov	r1, r8
   15574:	mov	r0, r4
   15578:	add	r7, r6, #1
   1557c:	bl	10dac <strncmp@plt>
   15580:	cmp	r0, #0
   15584:	mov	sl, fp
   15588:	mov	r0, r4
   1558c:	bne	1559c <__assert_fail@plt+0x47a8>
   15590:	bl	10cc8 <strlen@plt>
   15594:	cmp	r0, r5
   15598:	beq	15650 <__assert_fail@plt+0x485c>
   1559c:	ldr	r4, [fp, #16]!
   155a0:	cmp	r4, #0
   155a4:	bne	15568 <__assert_fail@plt+0x4774>
   155a8:	ldr	r0, [sp, #16]
   155ac:	mvn	r3, #0
   155b0:	mov	r1, r8
   155b4:	str	r7, [sp, #16]
   155b8:	mov	sl, r4
   155bc:	mov	r8, r4
   155c0:	ldr	fp, [sp, #24]
   155c4:	str	r4, [sp, #20]
   155c8:	ldr	r7, [sp, #96]	; 0x60
   155cc:	str	r3, [sp, #40]	; 0x28
   155d0:	str	r4, [sp, #44]	; 0x2c
   155d4:	mov	r2, r5
   155d8:	bl	10dac <strncmp@plt>
   155dc:	cmp	r0, #0
   155e0:	bne	15620 <__assert_fail@plt+0x482c>
   155e4:	cmp	sl, #0
   155e8:	beq	1570c <__assert_fail@plt+0x4918>
   155ec:	ldr	r3, [sp, #92]	; 0x5c
   155f0:	cmp	r3, #0
   155f4:	beq	156c0 <__assert_fail@plt+0x48cc>
   155f8:	ldr	r3, [sp, #20]
   155fc:	cmp	r3, #0
   15600:	bne	15620 <__assert_fail@plt+0x482c>
   15604:	ldr	r3, [sp, #100]	; 0x64
   15608:	cmp	r3, #0
   1560c:	beq	15790 <__assert_fail@plt+0x499c>
   15610:	cmp	r4, #0
   15614:	beq	158b8 <__assert_fail@plt+0x4ac4>
   15618:	mov	r3, #1
   1561c:	strb	r3, [r4, r8]
   15620:	ldr	r0, [fp, #16]!
   15624:	add	r8, r8, #1
   15628:	cmp	r0, #0
   1562c:	beq	15638 <__assert_fail@plt+0x4844>
   15630:	ldr	r1, [r7, #20]
   15634:	b	155d4 <__assert_fail@plt+0x47e0>
   15638:	ldr	r3, [sp, #20]
   1563c:	orrs	r3, r4, r3
   15640:	bne	157e0 <__assert_fail@plt+0x49ec>
   15644:	cmp	sl, #0
   15648:	ldrne	r6, [sp, #40]	; 0x28
   1564c:	beq	15718 <__assert_fail@plt+0x4924>
   15650:	ldr	r3, [sp, #96]	; 0x60
   15654:	mov	r2, #0
   15658:	ldr	r1, [sp, #96]	; 0x60
   1565c:	ldr	r0, [sl, #4]
   15660:	ldr	r3, [r3]
   15664:	str	r2, [r1, #20]
   15668:	add	r2, r3, #1
   1566c:	str	r2, [r1]
   15670:	ldrb	r1, [r9]
   15674:	cmp	r1, #0
   15678:	bne	156f4 <__assert_fail@plt+0x4900>
   1567c:	cmp	r0, #1
   15680:	beq	15870 <__assert_fail@plt+0x4a7c>
   15684:	ldr	r3, [sp, #88]	; 0x58
   15688:	cmp	r3, #0
   1568c:	strne	r6, [r3]
   15690:	ldr	r3, [sl, #8]
   15694:	ldr	r0, [sl, #12]
   15698:	cmp	r3, #0
   1569c:	strne	r0, [r3]
   156a0:	movne	r0, #0
   156a4:	add	sp, sp, #52	; 0x34
   156a8:	ldrd	r4, [sp]
   156ac:	ldrd	r6, [sp, #8]
   156b0:	ldrd	r8, [sp, #16]
   156b4:	ldrd	sl, [sp, #24]
   156b8:	add	sp, sp, #32
   156bc:	pop	{pc}		; (ldr pc, [sp], #4)
   156c0:	ldr	r1, [sl, #4]
   156c4:	ldr	r2, [fp, #4]
   156c8:	cmp	r1, r2
   156cc:	bne	155f8 <__assert_fail@plt+0x4804>
   156d0:	ldr	r1, [sl, #8]
   156d4:	ldr	r2, [fp, #8]
   156d8:	cmp	r1, r2
   156dc:	bne	155f8 <__assert_fail@plt+0x4804>
   156e0:	ldr	r1, [sl, #12]
   156e4:	ldr	r2, [fp, #12]
   156e8:	cmp	r1, r2
   156ec:	bne	155f8 <__assert_fail@plt+0x4804>
   156f0:	b	15620 <__assert_fail@plt+0x482c>
   156f4:	cmp	r0, #0
   156f8:	beq	15898 <__assert_fail@plt+0x4aa4>
   156fc:	ldr	r3, [sp, #96]	; 0x60
   15700:	add	r9, r9, #1
   15704:	str	r9, [r3, #12]
   15708:	b	15684 <__assert_fail@plt+0x4890>
   1570c:	mov	sl, fp
   15710:	str	r8, [sp, #40]	; 0x28
   15714:	b	15620 <__assert_fail@plt+0x482c>
   15718:	ldr	r3, [sp, #92]	; 0x5c
   1571c:	cmp	r3, #0
   15720:	beq	1575c <__assert_fail@plt+0x4968>
   15724:	ldr	r2, [sp, #28]
   15728:	ldr	r3, [sp, #96]	; 0x60
   1572c:	ldr	r3, [r3]
   15730:	ldr	r3, [r2, r3, lsl #2]
   15734:	ldrb	r3, [r3, #1]
   15738:	cmp	r3, #45	; 0x2d
   1573c:	beq	1575c <__assert_fail@plt+0x4968>
   15740:	ldr	r0, [sp, #32]
   15744:	ldr	r3, [sp, #96]	; 0x60
   15748:	ldr	r3, [r3, #20]
   1574c:	ldrb	r1, [r3]
   15750:	bl	10cd4 <strchr@plt>
   15754:	cmp	r0, #0
   15758:	bne	15928 <__assert_fail@plt+0x4b34>
   1575c:	ldr	r3, [sp, #100]	; 0x64
   15760:	cmp	r3, #0
   15764:	bne	157ac <__assert_fail@plt+0x49b8>
   15768:	ldr	r3, [sp, #96]	; 0x60
   1576c:	mov	r2, #0
   15770:	mov	r0, #63	; 0x3f
   15774:	ldr	r1, [sp, #96]	; 0x60
   15778:	ldr	r3, [r3]
   1577c:	str	r2, [r1, #8]
   15780:	str	r2, [r1, #20]
   15784:	add	r3, r3, #1
   15788:	str	r3, [r1]
   1578c:	b	156a4 <__assert_fail@plt+0x48b0>
   15790:	mov	r3, #1
   15794:	cmp	r4, #0
   15798:	str	r3, [sp, #20]
   1579c:	beq	15620 <__assert_fail@plt+0x482c>
   157a0:	mov	r3, #1
   157a4:	strb	r3, [r4, r8]
   157a8:	b	15620 <__assert_fail@plt+0x482c>
   157ac:	ldr	r3, [sp, #96]	; 0x60
   157b0:	movw	r0, #33040	; 0x8110
   157b4:	movt	r0, #2
   157b8:	movw	r1, #32116	; 0x7d74
   157bc:	movt	r1, #1
   157c0:	ldr	r0, [r0]
   157c4:	ldr	ip, [r3, #20]
   157c8:	ldr	r3, [sp, #28]
   157cc:	ldr	r2, [r3]
   157d0:	str	ip, [sp]
   157d4:	ldr	r3, [sp, #104]	; 0x68
   157d8:	bl	10cec <fprintf@plt>
   157dc:	b	15768 <__assert_fail@plt+0x4974>
   157e0:	ldr	r3, [sp, #100]	; 0x64
   157e4:	cmp	r3, #0
   157e8:	beq	15828 <__assert_fail@plt+0x4a34>
   157ec:	ldr	r3, [sp, #20]
   157f0:	movw	r5, #33040	; 0x8110
   157f4:	movt	r5, #2
   157f8:	ldr	r0, [r5]
   157fc:	cmp	r3, #0
   15800:	beq	15960 <__assert_fail@plt+0x4b6c>
   15804:	ldr	r2, [sp, #28]
   15808:	movw	r1, #32028	; 0x7d1c
   1580c:	movt	r1, #1
   15810:	ldr	r3, [sp, #96]	; 0x60
   15814:	ldr	r2, [r2]
   15818:	ldr	ip, [r3, #20]
   1581c:	ldr	r3, [sp, #104]	; 0x68
   15820:	str	ip, [sp]
   15824:	bl	10cec <fprintf@plt>
   15828:	ldr	r3, [sp, #44]	; 0x2c
   1582c:	cmp	r3, #0
   15830:	bne	1591c <__assert_fail@plt+0x4b28>
   15834:	ldr	r3, [sp, #96]	; 0x60
   15838:	ldr	r4, [r3, #20]
   1583c:	mov	r0, r4
   15840:	bl	10cc8 <strlen@plt>
   15844:	ldr	r3, [sp, #96]	; 0x60
   15848:	add	r4, r4, r0
   1584c:	mov	r2, #0
   15850:	mov	r0, #63	; 0x3f
   15854:	ldr	r1, [sp, #96]	; 0x60
   15858:	ldr	r3, [r3]
   1585c:	str	r2, [r1, #8]
   15860:	str	r4, [r1, #20]
   15864:	add	r3, r3, #1
   15868:	str	r3, [r1]
   1586c:	b	156a4 <__assert_fail@plt+0x48b0>
   15870:	ldr	r1, [sp, #36]	; 0x24
   15874:	cmp	r2, r1
   15878:	bge	15930 <__assert_fail@plt+0x4b3c>
   1587c:	ldr	r1, [sp, #28]
   15880:	add	r3, r3, #2
   15884:	ldr	r2, [r1, r2, lsl #2]
   15888:	ldr	r1, [sp, #96]	; 0x60
   1588c:	str	r3, [r1]
   15890:	str	r2, [r1, #12]
   15894:	b	15684 <__assert_fail@plt+0x4890>
   15898:	ldr	r3, [sp, #100]	; 0x64
   1589c:	cmp	r3, #0
   158a0:	bne	158ec <__assert_fail@plt+0x4af8>
   158a4:	ldr	r3, [sl, #12]
   158a8:	mov	r0, #63	; 0x3f
   158ac:	ldr	r2, [sp, #96]	; 0x60
   158b0:	str	r3, [r2, #8]
   158b4:	b	156a4 <__assert_fail@plt+0x48b0>
   158b8:	ldr	r0, [sp, #16]
   158bc:	bl	174f4 <__assert_fail@plt+0x6700>
   158c0:	subs	r4, r0, #0
   158c4:	beq	15a24 <__assert_fail@plt+0x4c30>
   158c8:	ldr	r2, [sp, #16]
   158cc:	ldr	r1, [sp, #20]
   158d0:	bl	10d10 <memset@plt>
   158d4:	mov	r3, #1
   158d8:	mov	r2, #1
   158dc:	str	r3, [sp, #44]	; 0x2c
   158e0:	ldr	r3, [sp, #40]	; 0x28
   158e4:	strb	r2, [r4, r3]
   158e8:	b	15618 <__assert_fail@plt+0x4824>
   158ec:	ldr	ip, [sl]
   158f0:	movw	r0, #33040	; 0x8110
   158f4:	movt	r0, #2
   158f8:	movw	r1, #32148	; 0x7d94
   158fc:	movt	r1, #1
   15900:	ldr	r3, [sp, #28]
   15904:	ldr	r0, [r0]
   15908:	ldr	r2, [r3]
   1590c:	str	ip, [sp]
   15910:	ldr	r3, [sp, #104]	; 0x68
   15914:	bl	10cec <fprintf@plt>
   15918:	b	158a4 <__assert_fail@plt+0x4ab0>
   1591c:	mov	r0, r4
   15920:	bl	130dc <__assert_fail@plt+0x22e8>
   15924:	b	15834 <__assert_fail@plt+0x4a40>
   15928:	mvn	r0, #0
   1592c:	b	156a4 <__assert_fail@plt+0x48b0>
   15930:	ldr	r3, [sp, #100]	; 0x64
   15934:	cmp	r3, #0
   15938:	bne	159f4 <__assert_fail@plt+0x4c00>
   1593c:	ldr	r3, [sl, #12]
   15940:	ldr	r2, [sp, #96]	; 0x60
   15944:	str	r3, [r2, #8]
   15948:	ldr	r3, [sp, #32]
   1594c:	ldrb	r3, [r3]
   15950:	cmp	r3, #58	; 0x3a
   15954:	moveq	r0, #58	; 0x3a
   15958:	movne	r0, #63	; 0x3f
   1595c:	b	156a4 <__assert_fail@plt+0x48b0>
   15960:	bl	10d70 <flockfile@plt>
   15964:	ldr	r2, [sp, #28]
   15968:	movw	r1, #32060	; 0x7d3c
   1596c:	movt	r1, #1
   15970:	movw	r7, #32108	; 0x7d6c
   15974:	movt	r7, #1
   15978:	ldr	r3, [sp, #96]	; 0x60
   1597c:	add	r6, r4, r6
   15980:	sub	r8, r4, #1
   15984:	ldr	r2, [r2]
   15988:	ldr	r0, [r3, #20]
   1598c:	ldr	r3, [sp, #104]	; 0x68
   15990:	str	r0, [sp]
   15994:	ldr	r0, [r5]
   15998:	bl	10cec <fprintf@plt>
   1599c:	ldr	r0, [r5]
   159a0:	ldr	sl, [sp, #12]
   159a4:	ldr	r9, [sp, #20]
   159a8:	b	159b8 <__assert_fail@plt+0x4bc4>
   159ac:	cmp	r6, r8
   159b0:	add	r9, r9, #1
   159b4:	beq	159dc <__assert_fail@plt+0x4be8>
   159b8:	ldrb	r3, [r8, #1]!
   159bc:	cmp	r3, #0
   159c0:	beq	159ac <__assert_fail@plt+0x4bb8>
   159c4:	mov	r1, r7
   159c8:	ldr	r3, [sl, r9, lsl #4]
   159cc:	ldr	r2, [sp, #104]	; 0x68
   159d0:	bl	10cec <fprintf@plt>
   159d4:	ldr	r0, [r5]
   159d8:	b	159ac <__assert_fail@plt+0x4bb8>
   159dc:	mov	r1, r0
   159e0:	mov	r0, #10
   159e4:	bl	10d34 <fputc@plt>
   159e8:	ldr	r0, [r5]
   159ec:	bl	10c20 <funlockfile@plt>
   159f0:	b	15828 <__assert_fail@plt+0x4a34>
   159f4:	ldr	ip, [sl]
   159f8:	movw	r0, #33040	; 0x8110
   159fc:	movt	r0, #2
   15a00:	movw	r1, #32196	; 0x7dc4
   15a04:	movt	r1, #1
   15a08:	ldr	r3, [sp, #28]
   15a0c:	ldr	r0, [r0]
   15a10:	ldr	r2, [r3]
   15a14:	str	ip, [sp]
   15a18:	ldr	r3, [sp, #104]	; 0x68
   15a1c:	bl	10cec <fprintf@plt>
   15a20:	b	1593c <__assert_fail@plt+0x4b48>
   15a24:	mov	r3, #1
   15a28:	str	r3, [sp, #20]
   15a2c:	b	15620 <__assert_fail@plt+0x482c>
   15a30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a34:	subs	r5, r0, #0
   15a38:	strd	r6, [sp, #8]
   15a3c:	strd	r8, [sp, #16]
   15a40:	strd	sl, [sp, #24]
   15a44:	str	lr, [sp, #32]
   15a48:	sub	sp, sp, #36	; 0x24
   15a4c:	ldr	r4, [sp, #80]	; 0x50
   15a50:	ldr	r7, [r4, #4]
   15a54:	ble	15c44 <__assert_fail@plt+0x4e50>
   15a58:	mov	r6, r2
   15a5c:	mov	sl, r3
   15a60:	ldr	r2, [r4]
   15a64:	mov	r3, #0
   15a68:	mov	r9, r1
   15a6c:	str	r3, [r4, #12]
   15a70:	cmp	r2, r3
   15a74:	beq	15cec <__assert_fail@plt+0x4ef8>
   15a78:	ldr	r3, [r4, #16]
   15a7c:	cmp	r3, #0
   15a80:	bne	15c10 <__assert_fail@plt+0x4e1c>
   15a84:	mov	r3, #0
   15a88:	str	r3, [r4, #20]
   15a8c:	str	r2, [r4, #28]
   15a90:	str	r2, [r4, #32]
   15a94:	ldrb	r2, [r6]
   15a98:	cmp	r2, #45	; 0x2d
   15a9c:	moveq	r2, #2
   15aa0:	addeq	r6, r6, #1
   15aa4:	streq	r2, [r4, #24]
   15aa8:	beq	15ad0 <__assert_fail@plt+0x4cdc>
   15aac:	cmp	r2, #43	; 0x2b
   15ab0:	addeq	r6, r6, #1
   15ab4:	streq	r3, [r4, #24]
   15ab8:	beq	15ad0 <__assert_fail@plt+0x4cdc>
   15abc:	ldr	r2, [sp, #84]	; 0x54
   15ac0:	cmp	r2, #0
   15ac4:	beq	15e1c <__assert_fail@plt+0x5028>
   15ac8:	mov	r2, #0
   15acc:	str	r2, [r4, #24]
   15ad0:	mov	r2, #1
   15ad4:	str	r2, [r4, #16]
   15ad8:	ldrb	r2, [r6]
   15adc:	cmp	r2, #58	; 0x3a
   15ae0:	moveq	r7, #0
   15ae4:	cmp	r3, #0
   15ae8:	beq	15b7c <__assert_fail@plt+0x4d88>
   15aec:	ldrb	r2, [r3]
   15af0:	cmp	r2, #0
   15af4:	beq	15b7c <__assert_fail@plt+0x4d88>
   15af8:	add	fp, r3, #1
   15afc:	mov	r0, r6
   15b00:	str	r3, [sp, #28]
   15b04:	str	fp, [r4, #20]
   15b08:	ldrb	r8, [r3]
   15b0c:	mov	r1, r8
   15b10:	str	r8, [sp, #24]
   15b14:	bl	10cd4 <strchr@plt>
   15b18:	ldrd	r2, [sp, #24]
   15b1c:	ldrb	r1, [r3, #1]
   15b20:	cmp	r1, #0
   15b24:	bne	15b34 <__assert_fail@plt+0x4d40>
   15b28:	ldr	r1, [r4]
   15b2c:	add	r1, r1, #1
   15b30:	str	r1, [r4]
   15b34:	sub	r1, r8, #58	; 0x3a
   15b38:	cmp	r0, #0
   15b3c:	cmpne	r1, #1
   15b40:	bls	15e98 <__assert_fail@plt+0x50a4>
   15b44:	ldrb	ip, [r0]
   15b48:	ldrb	r1, [r0, #1]
   15b4c:	cmp	ip, #87	; 0x57
   15b50:	beq	15d9c <__assert_fail@plt+0x4fa8>
   15b54:	cmp	r1, #58	; 0x3a
   15b58:	beq	15e40 <__assert_fail@plt+0x504c>
   15b5c:	mov	r0, r2
   15b60:	add	sp, sp, #36	; 0x24
   15b64:	ldrd	r4, [sp]
   15b68:	ldrd	r6, [sp, #8]
   15b6c:	ldrd	r8, [sp, #16]
   15b70:	ldrd	sl, [sp, #24]
   15b74:	add	sp, sp, #32
   15b78:	pop	{pc}		; (ldr pc, [sp], #4)
   15b7c:	ldr	r8, [r4]
   15b80:	ldr	r3, [r4, #32]
   15b84:	cmp	r3, r8
   15b88:	ldr	r3, [r4, #28]
   15b8c:	strgt	r8, [r4, #32]
   15b90:	cmp	r8, r3
   15b94:	ldr	r3, [r4, #24]
   15b98:	strlt	r8, [r4, #28]
   15b9c:	cmp	r3, #1
   15ba0:	beq	15c4c <__assert_fail@plt+0x4e58>
   15ba4:	cmp	r5, r8
   15ba8:	beq	15c2c <__assert_fail@plt+0x4e38>
   15bac:	ldr	r3, [r9, r8, lsl #2]
   15bb0:	movw	fp, #32252	; 0x7dfc
   15bb4:	movt	fp, #1
   15bb8:	mov	r1, fp
   15bbc:	mov	r0, r3
   15bc0:	str	r3, [sp, #24]
   15bc4:	bl	10b9c <strcmp@plt>
   15bc8:	cmp	r0, #0
   15bcc:	ldr	r3, [sp, #24]
   15bd0:	bne	15cc0 <__assert_fail@plt+0x4ecc>
   15bd4:	ldr	r3, [r4, #28]
   15bd8:	add	r8, r8, #1
   15bdc:	ldr	r2, [r4, #32]
   15be0:	str	r8, [r4]
   15be4:	cmp	r3, r2
   15be8:	beq	15eac <__assert_fail@plt+0x50b8>
   15bec:	cmp	r8, r2
   15bf0:	beq	15c04 <__assert_fail@plt+0x4e10>
   15bf4:	mov	r0, r9
   15bf8:	mov	r1, r4
   15bfc:	bl	15400 <__assert_fail@plt+0x460c>
   15c00:	ldr	r3, [r4, #28]
   15c04:	str	r5, [r4]
   15c08:	str	r5, [r4, #32]
   15c0c:	b	15c34 <__assert_fail@plt+0x4e40>
   15c10:	ldrb	r2, [r6]
   15c14:	ldr	r3, [r4, #20]
   15c18:	sub	r1, r2, #43	; 0x2b
   15c1c:	tst	r1, #253	; 0xfd
   15c20:	ldrbeq	r2, [r6, #1]
   15c24:	addeq	r6, r6, #1
   15c28:	b	15adc <__assert_fail@plt+0x4ce8>
   15c2c:	ldr	r3, [r4, #28]
   15c30:	ldr	r5, [r4, #32]
   15c34:	cmp	r5, r3
   15c38:	mvnne	r2, #0
   15c3c:	strne	r3, [r4]
   15c40:	bne	15b5c <__assert_fail@plt+0x4d68>
   15c44:	mvn	r2, #0
   15c48:	b	15b5c <__assert_fail@plt+0x4d68>
   15c4c:	ldrd	r2, [r4, #28]
   15c50:	cmp	r2, r3
   15c54:	beq	15e80 <__assert_fail@plt+0x508c>
   15c58:	cmp	r8, r3
   15c5c:	beq	15c70 <__assert_fail@plt+0x4e7c>
   15c60:	mov	r1, r4
   15c64:	mov	r0, r9
   15c68:	bl	15400 <__assert_fail@plt+0x460c>
   15c6c:	ldr	r3, [r4]
   15c70:	cmp	r5, r3
   15c74:	ble	15e90 <__assert_fail@plt+0x509c>
   15c78:	add	r1, r9, r3, lsl #2
   15c7c:	b	15c90 <__assert_fail@plt+0x4e9c>
   15c80:	add	r3, r3, #1
   15c84:	cmp	r3, r5
   15c88:	str	r3, [r4]
   15c8c:	beq	15e90 <__assert_fail@plt+0x509c>
   15c90:	ldr	r2, [r1], #4
   15c94:	ldrb	r0, [r2]
   15c98:	cmp	r0, #45	; 0x2d
   15c9c:	bne	15c80 <__assert_fail@plt+0x4e8c>
   15ca0:	ldrb	r2, [r2, #1]
   15ca4:	cmp	r2, #0
   15ca8:	beq	15c80 <__assert_fail@plt+0x4e8c>
   15cac:	ldr	r8, [r4]
   15cb0:	cmp	r5, r8
   15cb4:	str	r3, [r4, #32]
   15cb8:	bne	15bac <__assert_fail@plt+0x4db8>
   15cbc:	b	15c2c <__assert_fail@plt+0x4e38>
   15cc0:	ldrb	r2, [r3]
   15cc4:	cmp	r2, #45	; 0x2d
   15cc8:	beq	15cfc <__assert_fail@plt+0x4f08>
   15ccc:	ldr	r2, [r4, #24]
   15cd0:	cmp	r2, #0
   15cd4:	beq	15c44 <__assert_fail@plt+0x4e50>
   15cd8:	add	r8, r8, #1
   15cdc:	mov	r2, #1
   15ce0:	str	r8, [r4]
   15ce4:	str	r3, [r4, #12]
   15ce8:	b	15b5c <__assert_fail@plt+0x4d68>
   15cec:	mov	r3, #1
   15cf0:	mov	r2, r3
   15cf4:	str	r3, [r4]
   15cf8:	b	15a84 <__assert_fail@plt+0x4c90>
   15cfc:	ldrb	r1, [r3, #1]
   15d00:	cmp	r1, #0
   15d04:	beq	15ccc <__assert_fail@plt+0x4ed8>
   15d08:	cmp	sl, #0
   15d0c:	beq	15d94 <__assert_fail@plt+0x4fa0>
   15d10:	cmp	r1, #45	; 0x2d
   15d14:	beq	15f2c <__assert_fail@plt+0x5138>
   15d18:	ldr	r2, [sp, #76]	; 0x4c
   15d1c:	cmp	r2, #0
   15d20:	beq	15d94 <__assert_fail@plt+0x4fa0>
   15d24:	ldrb	r2, [r3, #2]
   15d28:	cmp	r2, #0
   15d2c:	bne	15d48 <__assert_fail@plt+0x4f54>
   15d30:	mov	r0, r6
   15d34:	str	r3, [sp, #24]
   15d38:	bl	10cd4 <strchr@plt>
   15d3c:	cmp	r0, #0
   15d40:	ldr	r3, [sp, #24]
   15d44:	bne	15d94 <__assert_fail@plt+0x4fa0>
   15d48:	ldr	r2, [sp, #72]	; 0x48
   15d4c:	add	ip, r3, #1
   15d50:	movw	r0, #31636	; 0x7b94
   15d54:	movt	r0, #1
   15d58:	mov	r3, sl
   15d5c:	ldr	r1, [sp, #76]	; 0x4c
   15d60:	str	r2, [sp]
   15d64:	mov	r2, r6
   15d68:	str	r0, [sp, #16]
   15d6c:	mov	r0, r5
   15d70:	stmib	sp, {r1, r4, r7}
   15d74:	mov	r1, r9
   15d78:	str	ip, [r4, #20]
   15d7c:	bl	154e0 <__assert_fail@plt+0x46ec>
   15d80:	cmn	r0, #1
   15d84:	mov	r2, r0
   15d88:	bne	15b5c <__assert_fail@plt+0x4d68>
   15d8c:	ldr	r3, [r4]
   15d90:	ldr	r3, [r9, r3, lsl #2]
   15d94:	add	r3, r3, #1
   15d98:	b	15af8 <__assert_fail@plt+0x4d04>
   15d9c:	sub	ip, r1, #59	; 0x3b
   15da0:	cmp	sl, #0
   15da4:	clz	ip, ip
   15da8:	lsr	ip, ip, #5
   15dac:	moveq	ip, #0
   15db0:	cmp	ip, #0
   15db4:	beq	15b54 <__assert_fail@plt+0x4d60>
   15db8:	ldrb	r3, [r3, #1]
   15dbc:	cmp	r3, #0
   15dc0:	bne	15dd4 <__assert_fail@plt+0x4fe0>
   15dc4:	ldr	r3, [r4]
   15dc8:	cmp	r3, r5
   15dcc:	beq	15f60 <__assert_fail@plt+0x516c>
   15dd0:	ldr	fp, [r9, r3, lsl #2]
   15dd4:	mov	lr, #0
   15dd8:	movw	ip, #32328	; 0x7e48
   15ddc:	movt	ip, #1
   15de0:	ldr	r3, [sp, #72]	; 0x48
   15de4:	mov	r2, r6
   15de8:	mov	r1, r9
   15dec:	mov	r0, r5
   15df0:	str	r3, [sp]
   15df4:	mov	r3, sl
   15df8:	str	r4, [sp, #8]
   15dfc:	str	r7, [sp, #12]
   15e00:	str	ip, [sp, #16]
   15e04:	str	fp, [r4, #20]
   15e08:	str	lr, [sp, #4]
   15e0c:	str	lr, [r4, #12]
   15e10:	bl	154e0 <__assert_fail@plt+0x46ec>
   15e14:	mov	r2, r0
   15e18:	b	15b5c <__assert_fail@plt+0x4d68>
   15e1c:	movw	r0, #32236	; 0x7dec
   15e20:	movt	r0, #1
   15e24:	bl	10c80 <getenv@plt>
   15e28:	cmp	r0, #0
   15e2c:	ldr	r3, [r4, #20]
   15e30:	bne	15ac8 <__assert_fail@plt+0x4cd4>
   15e34:	mov	r2, #1
   15e38:	str	r2, [r4, #24]
   15e3c:	b	15ad0 <__assert_fail@plt+0x4cdc>
   15e40:	ldrb	r1, [r0, #2]
   15e44:	ldrb	r3, [r3, #1]
   15e48:	cmp	r1, #58	; 0x3a
   15e4c:	beq	15eec <__assert_fail@plt+0x50f8>
   15e50:	cmp	r3, #0
   15e54:	ldr	r3, [r4]
   15e58:	bne	15eb8 <__assert_fail@plt+0x50c4>
   15e5c:	cmp	r5, r3
   15e60:	beq	15f0c <__assert_fail@plt+0x5118>
   15e64:	ldr	r1, [r9, r3, lsl #2]
   15e68:	add	r3, r3, #1
   15e6c:	str	r3, [r4]
   15e70:	str	r1, [r4, #12]
   15e74:	mov	r3, #0
   15e78:	str	r3, [r4, #20]
   15e7c:	b	15b5c <__assert_fail@plt+0x4d68>
   15e80:	cmp	r8, r3
   15e84:	movne	r3, r8
   15e88:	strne	r8, [r4, #28]
   15e8c:	b	15c70 <__assert_fail@plt+0x4e7c>
   15e90:	mov	r8, r3
   15e94:	b	15cb0 <__assert_fail@plt+0x4ebc>
   15e98:	cmp	r7, #0
   15e9c:	bne	15ec8 <__assert_fail@plt+0x50d4>
   15ea0:	mov	r2, #63	; 0x3f
   15ea4:	str	r8, [r4, #8]
   15ea8:	b	15b5c <__assert_fail@plt+0x4d68>
   15eac:	mov	r3, r8
   15eb0:	str	r8, [r4, #28]
   15eb4:	b	15c04 <__assert_fail@plt+0x4e10>
   15eb8:	add	r3, r3, #1
   15ebc:	str	r3, [r4]
   15ec0:	str	fp, [r4, #12]
   15ec4:	b	15e74 <__assert_fail@plt+0x5080>
   15ec8:	movw	r0, #33040	; 0x8110
   15ecc:	movt	r0, #2
   15ed0:	ldr	r2, [r9]
   15ed4:	movw	r1, #32256	; 0x7e00
   15ed8:	movt	r1, #1
   15edc:	mov	r3, r8
   15ee0:	ldr	r0, [r0]
   15ee4:	bl	10cec <fprintf@plt>
   15ee8:	b	15ea0 <__assert_fail@plt+0x50ac>
   15eec:	cmp	r3, #0
   15ef0:	streq	r3, [r4, #12]
   15ef4:	beq	15e74 <__assert_fail@plt+0x5080>
   15ef8:	ldr	r3, [r4]
   15efc:	str	fp, [r4, #12]
   15f00:	add	r3, r3, #1
   15f04:	str	r3, [r4]
   15f08:	b	15e74 <__assert_fail@plt+0x5080>
   15f0c:	cmp	r7, #0
   15f10:	bne	15f80 <__assert_fail@plt+0x518c>
   15f14:	str	r8, [r4, #8]
   15f18:	ldrb	r3, [r6]
   15f1c:	cmp	r3, #58	; 0x3a
   15f20:	moveq	r2, #58	; 0x3a
   15f24:	movne	r2, #63	; 0x3f
   15f28:	b	15e74 <__assert_fail@plt+0x5080>
   15f2c:	ldr	r2, [sp, #72]	; 0x48
   15f30:	add	ip, r3, #2
   15f34:	mov	r1, r9
   15f38:	mov	r3, sl
   15f3c:	ldr	r0, [sp, #76]	; 0x4c
   15f40:	str	r2, [sp]
   15f44:	mov	r2, r6
   15f48:	stmib	sp, {r0, r4, r7, fp}
   15f4c:	mov	r0, r5
   15f50:	str	ip, [r4, #20]
   15f54:	bl	154e0 <__assert_fail@plt+0x46ec>
   15f58:	mov	r2, r0
   15f5c:	b	15b5c <__assert_fail@plt+0x4d68>
   15f60:	cmp	r7, #0
   15f64:	bne	15fa4 <__assert_fail@plt+0x51b0>
   15f68:	str	r8, [r4, #8]
   15f6c:	ldrb	r3, [r6]
   15f70:	cmp	r3, #58	; 0x3a
   15f74:	moveq	r2, #58	; 0x3a
   15f78:	movne	r2, #63	; 0x3f
   15f7c:	b	15b5c <__assert_fail@plt+0x4d68>
   15f80:	movw	r0, #33040	; 0x8110
   15f84:	movt	r0, #2
   15f88:	ldr	r2, [r9]
   15f8c:	movw	r1, #32284	; 0x7e1c
   15f90:	movt	r1, #1
   15f94:	mov	r3, r8
   15f98:	ldr	r0, [r0]
   15f9c:	bl	10cec <fprintf@plt>
   15fa0:	b	15f14 <__assert_fail@plt+0x5120>
   15fa4:	movw	r0, #33040	; 0x8110
   15fa8:	movt	r0, #2
   15fac:	ldr	r2, [r9]
   15fb0:	movw	r1, #32284	; 0x7e1c
   15fb4:	movt	r1, #1
   15fb8:	mov	r3, r8
   15fbc:	ldr	r0, [r0]
   15fc0:	bl	10cec <fprintf@plt>
   15fc4:	b	15f68 <__assert_fail@plt+0x5174>
   15fc8:	strd	r4, [sp, #-16]!
   15fcc:	movw	r5, #33028	; 0x8104
   15fd0:	movt	r5, #2
   15fd4:	str	r6, [sp, #8]
   15fd8:	movw	r4, #33072	; 0x8130
   15fdc:	movt	r4, #2
   15fe0:	str	lr, [sp, #12]
   15fe4:	sub	sp, sp, #16
   15fe8:	ldr	lr, [sp, #32]
   15fec:	ldr	ip, [r5]
   15ff0:	ldr	r6, [sp, #36]	; 0x24
   15ff4:	str	lr, [sp]
   15ff8:	ldr	lr, [sp, #40]	; 0x28
   15ffc:	str	ip, [r4]
   16000:	ldr	ip, [r5, #4]
   16004:	str	r6, [sp, #4]
   16008:	str	r4, [sp, #8]
   1600c:	str	lr, [sp, #12]
   16010:	str	ip, [r4, #4]
   16014:	bl	15a30 <__assert_fail@plt+0x4c3c>
   16018:	ldr	ip, [r4]
   1601c:	movw	r3, #33212	; 0x81bc
   16020:	movt	r3, #2
   16024:	ldr	r1, [r4, #8]
   16028:	ldr	r2, [r4, #12]
   1602c:	str	ip, [r5]
   16030:	str	r1, [r5, #8]
   16034:	str	r2, [r3]
   16038:	add	sp, sp, #16
   1603c:	ldrd	r4, [sp]
   16040:	ldr	r6, [sp, #8]
   16044:	add	sp, sp, #12
   16048:	pop	{pc}		; (ldr pc, [sp], #4)
   1604c:	mov	ip, #0
   16050:	push	{lr}		; (str lr, [sp, #-4]!)
   16054:	mov	lr, #1
   16058:	sub	sp, sp, #20
   1605c:	mov	r3, ip
   16060:	str	ip, [sp]
   16064:	stmib	sp, {ip, lr}
   16068:	bl	15fc8 <__assert_fail@plt+0x51d4>
   1606c:	add	sp, sp, #20
   16070:	pop	{pc}		; (ldr pc, [sp], #4)
   16074:	andeq	r0, r0, r0
   16078:	cmp	r0, #10
   1607c:	movcc	r0, #10
   16080:	orr	r0, r0, #1
   16084:	cmn	r0, #1
   16088:	bxeq	lr
   1608c:	push	{lr}		; (str lr, [sp, #-4]!)
   16090:	movw	lr, #43691	; 0xaaab
   16094:	movt	lr, #43690	; 0xaaaa
   16098:	umull	r2, r3, lr, r0
   1609c:	cmp	r0, #9
   160a0:	lsr	r3, r3, #1
   160a4:	add	r3, r3, r3, lsl #1
   160a8:	sub	r3, r0, r3
   160ac:	bls	160ec <__assert_fail@plt+0x52f8>
   160b0:	cmp	r3, #0
   160b4:	beq	160f4 <__assert_fail@plt+0x5300>
   160b8:	mov	ip, #16
   160bc:	mov	r1, #9
   160c0:	mov	r2, #3
   160c4:	b	160d0 <__assert_fail@plt+0x52dc>
   160c8:	cmp	r3, #0
   160cc:	beq	160f4 <__assert_fail@plt+0x5300>
   160d0:	add	r2, r2, #2
   160d4:	add	r1, r1, ip
   160d8:	cmp	r1, r0
   160dc:	add	ip, ip, #8
   160e0:	udiv	r3, r0, r2
   160e4:	mls	r3, r2, r3, r0
   160e8:	bcc	160c8 <__assert_fail@plt+0x52d4>
   160ec:	cmp	r3, #0
   160f0:	bne	16100 <__assert_fail@plt+0x530c>
   160f4:	add	r0, r0, #2
   160f8:	cmn	r0, #1
   160fc:	bne	16098 <__assert_fail@plt+0x52a4>
   16100:	pop	{pc}		; (ldr pc, [sp], #4)
   16104:	ror	r0, r0, #3
   16108:	udiv	r3, r0, r1
   1610c:	mls	r0, r3, r1, r0
   16110:	bx	lr
   16114:	sub	r0, r1, r0
   16118:	clz	r0, r0
   1611c:	lsr	r0, r0, #5
   16120:	bx	lr
   16124:	str	r4, [sp, #-8]!
   16128:	mov	r4, r0
   1612c:	mov	r0, r1
   16130:	ldr	r1, [r4, #8]
   16134:	ldr	r3, [r4, #24]
   16138:	str	lr, [sp, #4]
   1613c:	blx	r3
   16140:	ldr	r3, [r4, #8]
   16144:	cmp	r3, r0
   16148:	bls	16160 <__assert_fail@plt+0x536c>
   1614c:	ldr	r3, [r4]
   16150:	ldr	r4, [sp]
   16154:	add	sp, sp, #4
   16158:	add	r0, r3, r0, lsl #3
   1615c:	pop	{pc}		; (ldr pc, [sp], #4)
   16160:	bl	10db8 <abort@plt>
   16164:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16168:	mov	r5, r1
   1616c:	strd	r6, [sp, #8]
   16170:	mov	r7, r3
   16174:	mov	r6, r0
   16178:	str	r8, [sp, #16]
   1617c:	mov	r8, r2
   16180:	str	lr, [sp, #20]
   16184:	bl	16124 <__assert_fail@plt+0x5330>
   16188:	str	r0, [r8]
   1618c:	ldr	r1, [r0]
   16190:	cmp	r1, #0
   16194:	beq	16284 <__assert_fail@plt+0x5490>
   16198:	cmp	r1, r5
   1619c:	mov	r4, r0
   161a0:	beq	1624c <__assert_fail@plt+0x5458>
   161a4:	mov	r0, r5
   161a8:	ldr	r3, [r6, #28]
   161ac:	blx	r3
   161b0:	cmp	r0, #0
   161b4:	bne	16248 <__assert_fail@plt+0x5454>
   161b8:	ldr	r3, [r4, #4]
   161bc:	cmp	r3, #0
   161c0:	beq	16284 <__assert_fail@plt+0x5490>
   161c4:	ldr	r1, [r3]
   161c8:	cmp	r5, r1
   161cc:	bne	161f0 <__assert_fail@plt+0x53fc>
   161d0:	b	1620c <__assert_fail@plt+0x5418>
   161d4:	ldr	r4, [r4, #4]
   161d8:	ldr	r3, [r4, #4]
   161dc:	cmp	r3, #0
   161e0:	beq	16284 <__assert_fail@plt+0x5490>
   161e4:	ldr	r1, [r3]
   161e8:	cmp	r1, r5
   161ec:	beq	1620c <__assert_fail@plt+0x5418>
   161f0:	mov	r0, r5
   161f4:	ldr	r3, [r6, #28]
   161f8:	blx	r3
   161fc:	cmp	r0, #0
   16200:	beq	161d4 <__assert_fail@plt+0x53e0>
   16204:	ldr	r3, [r4, #4]
   16208:	ldr	r1, [r3]
   1620c:	cmp	r7, #0
   16210:	beq	16230 <__assert_fail@plt+0x543c>
   16214:	ldr	r0, [r3, #4]
   16218:	mov	r2, #0
   1621c:	str	r0, [r4, #4]
   16220:	str	r2, [r3]
   16224:	ldr	r2, [r6, #36]	; 0x24
   16228:	str	r2, [r3, #4]
   1622c:	str	r3, [r6, #36]	; 0x24
   16230:	ldrd	r4, [sp]
   16234:	mov	r0, r1
   16238:	ldrd	r6, [sp, #8]
   1623c:	ldr	r8, [sp, #16]
   16240:	add	sp, sp, #20
   16244:	pop	{pc}		; (ldr pc, [sp], #4)
   16248:	ldr	r1, [r4]
   1624c:	cmp	r7, #0
   16250:	beq	16230 <__assert_fail@plt+0x543c>
   16254:	ldr	r0, [r4, #4]
   16258:	cmp	r0, #0
   1625c:	streq	r0, [r4]
   16260:	beq	16230 <__assert_fail@plt+0x543c>
   16264:	ldrd	r2, [r0]
   16268:	mov	ip, #0
   1626c:	strd	r2, [r4]
   16270:	str	ip, [r0]
   16274:	ldr	r3, [r6, #36]	; 0x24
   16278:	str	r3, [r0, #4]
   1627c:	str	r0, [r6, #36]	; 0x24
   16280:	b	16230 <__assert_fail@plt+0x543c>
   16284:	mov	r1, #0
   16288:	b	16230 <__assert_fail@plt+0x543c>
   1628c:	ldr	r2, [r0]
   16290:	movw	r3, #32332	; 0x7e4c
   16294:	movt	r3, #1
   16298:	mov	r1, r0
   1629c:	cmp	r2, r3
   162a0:	beq	16328 <__assert_fail@plt+0x5534>
   162a4:	vldr	s14, [pc, #132]	; 16330 <__assert_fail@plt+0x553c>
   162a8:	vldr	s15, [r2, #8]
   162ac:	vcmpe.f32	s15, s14
   162b0:	vmrs	APSR_nzcv, fpscr
   162b4:	ble	1631c <__assert_fail@plt+0x5528>
   162b8:	vldr	s13, [pc, #116]	; 16334 <__assert_fail@plt+0x5540>
   162bc:	vcmpe.f32	s15, s13
   162c0:	vmrs	APSR_nzcv, fpscr
   162c4:	bpl	1631c <__assert_fail@plt+0x5528>
   162c8:	vldr	s13, [pc, #104]	; 16338 <__assert_fail@plt+0x5544>
   162cc:	vldr	s12, [r2, #12]
   162d0:	vcmpe.f32	s12, s13
   162d4:	vmrs	APSR_nzcv, fpscr
   162d8:	ble	1631c <__assert_fail@plt+0x5528>
   162dc:	vldr	s13, [r2]
   162e0:	vcmpe.f32	s13, #0.0
   162e4:	vmrs	APSR_nzcv, fpscr
   162e8:	blt	1631c <__assert_fail@plt+0x5528>
   162ec:	vadd.f32	s14, s13, s14
   162f0:	vldr	s13, [r2, #4]
   162f4:	vcmpe.f32	s14, s13
   162f8:	vmrs	APSR_nzcv, fpscr
   162fc:	bpl	1631c <__assert_fail@plt+0x5528>
   16300:	vldr	s12, [pc, #52]	; 1633c <__assert_fail@plt+0x5548>
   16304:	vcmpe.f32	s13, s12
   16308:	vmrs	APSR_nzcv, fpscr
   1630c:	bhi	1631c <__assert_fail@plt+0x5528>
   16310:	vcmpe.f32	s15, s14
   16314:	vmrs	APSR_nzcv, fpscr
   16318:	bgt	16328 <__assert_fail@plt+0x5534>
   1631c:	mov	r0, #0
   16320:	str	r3, [r1]
   16324:	bx	lr
   16328:	mov	r0, #1
   1632c:	bx	lr
   16330:	stclcc	12, cr12, [ip, #820]	; 0x334
   16334:	svccc	0x00666666
   16338:	svccc	0x008ccccd
   1633c:	svccc	0x00800000
   16340:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16344:	ldr	r3, [r1, #4]
   16348:	strd	r6, [sp, #8]
   1634c:	ldr	r6, [r1]
   16350:	strd	r8, [sp, #16]
   16354:	str	sl, [sp, #24]
   16358:	str	lr, [sp, #28]
   1635c:	cmp	r6, r3
   16360:	bcs	16428 <__assert_fail@plt+0x5634>
   16364:	mov	r8, r2
   16368:	mov	r5, r0
   1636c:	mov	r7, r1
   16370:	add	r6, r6, #8
   16374:	mov	r9, #0
   16378:	b	16388 <__assert_fail@plt+0x5594>
   1637c:	cmp	r3, r6
   16380:	add	r6, r6, #8
   16384:	bls	16428 <__assert_fail@plt+0x5634>
   16388:	ldr	sl, [r6, #-8]
   1638c:	cmp	sl, #0
   16390:	beq	1637c <__assert_fail@plt+0x5588>
   16394:	ldr	r4, [r6, #-4]
   16398:	cmp	r4, #0
   1639c:	bne	163bc <__assert_fail@plt+0x55c8>
   163a0:	b	1640c <__assert_fail@plt+0x5618>
   163a4:	ldr	r2, [r0, #4]
   163a8:	cmp	r3, #0
   163ac:	str	r2, [r4, #4]
   163b0:	str	r4, [r0, #4]
   163b4:	mov	r4, r3
   163b8:	beq	16408 <__assert_fail@plt+0x5614>
   163bc:	ldr	sl, [r4]
   163c0:	mov	r0, r5
   163c4:	mov	r1, sl
   163c8:	bl	16124 <__assert_fail@plt+0x5330>
   163cc:	ldr	r2, [r0]
   163d0:	ldr	r3, [r4, #4]
   163d4:	cmp	r2, #0
   163d8:	bne	163a4 <__assert_fail@plt+0x55b0>
   163dc:	ldr	r1, [r5, #12]
   163e0:	cmp	r3, #0
   163e4:	str	sl, [r0]
   163e8:	add	r1, r1, #1
   163ec:	str	r1, [r5, #12]
   163f0:	str	r2, [r4]
   163f4:	ldr	r2, [r5, #36]	; 0x24
   163f8:	str	r2, [r4, #4]
   163fc:	str	r4, [r5, #36]	; 0x24
   16400:	mov	r4, r3
   16404:	bne	163bc <__assert_fail@plt+0x55c8>
   16408:	ldr	sl, [r6, #-8]
   1640c:	cmp	r8, #0
   16410:	str	r9, [r6, #-4]
   16414:	beq	16444 <__assert_fail@plt+0x5650>
   16418:	ldr	r3, [r7, #4]
   1641c:	cmp	r3, r6
   16420:	add	r6, r6, #8
   16424:	bhi	16388 <__assert_fail@plt+0x5594>
   16428:	mov	r0, #1
   1642c:	ldrd	r4, [sp]
   16430:	ldrd	r6, [sp, #8]
   16434:	ldrd	r8, [sp, #16]
   16438:	ldr	sl, [sp, #24]
   1643c:	add	sp, sp, #28
   16440:	pop	{pc}		; (ldr pc, [sp], #4)
   16444:	mov	r1, sl
   16448:	mov	r0, r5
   1644c:	bl	16124 <__assert_fail@plt+0x5330>
   16450:	ldr	r3, [r0]
   16454:	mov	r4, r0
   16458:	cmp	r3, #0
   1645c:	beq	1649c <__assert_fail@plt+0x56a8>
   16460:	ldr	r0, [r5, #36]	; 0x24
   16464:	cmp	r0, #0
   16468:	beq	164b0 <__assert_fail@plt+0x56bc>
   1646c:	ldr	r3, [r0, #4]
   16470:	str	r3, [r5, #36]	; 0x24
   16474:	ldr	r3, [r4, #4]
   16478:	str	sl, [r0]
   1647c:	str	r3, [r0, #4]
   16480:	str	r0, [r4, #4]
   16484:	ldr	r2, [r7, #12]
   16488:	str	r9, [r6, #-8]
   1648c:	ldr	r3, [r7, #4]
   16490:	sub	r2, r2, #1
   16494:	str	r2, [r7, #12]
   16498:	b	1637c <__assert_fail@plt+0x5588>
   1649c:	ldr	r3, [r5, #12]
   164a0:	str	sl, [r0]
   164a4:	add	r3, r3, #1
   164a8:	str	r3, [r5, #12]
   164ac:	b	16484 <__assert_fail@plt+0x5690>
   164b0:	mov	r0, #8
   164b4:	bl	174f4 <__assert_fail@plt+0x6700>
   164b8:	cmp	r0, #0
   164bc:	bne	16474 <__assert_fail@plt+0x5680>
   164c0:	mov	r0, r8
   164c4:	b	1642c <__assert_fail@plt+0x5638>
   164c8:	ldr	r0, [r0, #8]
   164cc:	bx	lr
   164d0:	ldr	r0, [r0, #12]
   164d4:	bx	lr
   164d8:	ldr	r0, [r0, #16]
   164dc:	bx	lr
   164e0:	ldm	r0, {r1, r3}
   164e4:	cmp	r1, r3
   164e8:	bcs	1655c <__assert_fail@plt+0x5768>
   164ec:	sub	ip, r3, #1
   164f0:	add	r3, r1, #16
   164f4:	sub	ip, ip, r1
   164f8:	mov	r0, #0
   164fc:	bic	ip, ip, #7
   16500:	add	r1, r1, #8
   16504:	add	ip, ip, r3
   16508:	b	16518 <__assert_fail@plt+0x5724>
   1650c:	add	r1, r1, #8
   16510:	cmp	r1, ip
   16514:	beq	16558 <__assert_fail@plt+0x5764>
   16518:	ldr	r3, [r1, #-8]
   1651c:	cmp	r3, #0
   16520:	beq	1650c <__assert_fail@plt+0x5718>
   16524:	ldr	r3, [r1, #-4]
   16528:	mov	r2, #1
   1652c:	cmp	r3, #0
   16530:	beq	16544 <__assert_fail@plt+0x5750>
   16534:	ldr	r3, [r3, #4]
   16538:	add	r2, r2, #1
   1653c:	cmp	r3, #0
   16540:	bne	16534 <__assert_fail@plt+0x5740>
   16544:	cmp	r0, r2
   16548:	add	r1, r1, #8
   1654c:	movcc	r0, r2
   16550:	cmp	r1, ip
   16554:	bne	16518 <__assert_fail@plt+0x5724>
   16558:	bx	lr
   1655c:	mov	r0, #0
   16560:	bx	lr
   16564:	ldm	r0, {r1, r3}
   16568:	push	{lr}		; (str lr, [sp, #-4]!)
   1656c:	cmp	r1, r3
   16570:	bcs	16604 <__assert_fail@plt+0x5810>
   16574:	sub	ip, r3, #1
   16578:	mov	r2, #0
   1657c:	sub	ip, ip, r1
   16580:	add	r3, r1, #16
   16584:	bic	ip, ip, #7
   16588:	add	r1, r1, #8
   1658c:	add	ip, ip, r3
   16590:	mov	lr, r2
   16594:	b	165a4 <__assert_fail@plt+0x57b0>
   16598:	add	r1, r1, #8
   1659c:	cmp	r1, ip
   165a0:	beq	165e0 <__assert_fail@plt+0x57ec>
   165a4:	ldr	r3, [r1, #-8]
   165a8:	cmp	r3, #0
   165ac:	beq	16598 <__assert_fail@plt+0x57a4>
   165b0:	ldr	r3, [r1, #-4]
   165b4:	add	lr, lr, #1
   165b8:	add	r2, r2, #1
   165bc:	cmp	r3, #0
   165c0:	beq	16598 <__assert_fail@plt+0x57a4>
   165c4:	ldr	r3, [r3, #4]
   165c8:	add	r2, r2, #1
   165cc:	cmp	r3, #0
   165d0:	bne	165c4 <__assert_fail@plt+0x57d0>
   165d4:	add	r1, r1, #8
   165d8:	cmp	r1, ip
   165dc:	bne	165a4 <__assert_fail@plt+0x57b0>
   165e0:	ldr	r3, [r0, #12]
   165e4:	cmp	r3, lr
   165e8:	movne	r0, #0
   165ec:	bne	16600 <__assert_fail@plt+0x580c>
   165f0:	ldr	r0, [r0, #16]
   165f4:	sub	r0, r0, r2
   165f8:	clz	r0, r0
   165fc:	lsr	r0, r0, #5
   16600:	pop	{pc}		; (ldr pc, [sp], #4)
   16604:	mov	r2, #0
   16608:	mov	lr, r2
   1660c:	b	165e0 <__assert_fail@plt+0x57ec>
   16610:	strd	r4, [sp, #-20]!	; 0xffffffec
   16614:	mov	r4, r1
   16618:	ldr	r3, [r0]
   1661c:	ldr	r1, [r0, #4]
   16620:	ldr	r2, [r0, #16]
   16624:	strd	r6, [sp, #8]
   16628:	str	lr, [sp, #16]
   1662c:	sub	sp, sp, #12
   16630:	cmp	r3, r1
   16634:	ldrd	r6, [r0, #8]
   16638:	bcs	16728 <__assert_fail@plt+0x5934>
   1663c:	sub	ip, r1, #1
   16640:	add	r1, r3, #16
   16644:	sub	ip, ip, r3
   16648:	add	r0, r3, #8
   1664c:	bic	ip, ip, #7
   16650:	mov	r5, #0
   16654:	add	ip, ip, r1
   16658:	b	16668 <__assert_fail@plt+0x5874>
   1665c:	add	r0, r0, #8
   16660:	cmp	r0, ip
   16664:	beq	166a8 <__assert_fail@plt+0x58b4>
   16668:	ldr	r3, [r0, #-8]
   1666c:	cmp	r3, #0
   16670:	beq	1665c <__assert_fail@plt+0x5868>
   16674:	ldr	r3, [r0, #-4]
   16678:	mov	r1, #1
   1667c:	cmp	r3, #0
   16680:	beq	16694 <__assert_fail@plt+0x58a0>
   16684:	ldr	r3, [r3, #4]
   16688:	add	r1, r1, #1
   1668c:	cmp	r3, #0
   16690:	bne	16684 <__assert_fail@plt+0x5890>
   16694:	cmp	r5, r1
   16698:	add	r0, r0, #8
   1669c:	movcc	r5, r1
   166a0:	cmp	r0, ip
   166a4:	bne	16668 <__assert_fail@plt+0x5874>
   166a8:	mov	r0, r4
   166ac:	movw	r1, #32352	; 0x7e60
   166b0:	movt	r1, #1
   166b4:	bl	10cec <fprintf@plt>
   166b8:	mov	r2, r6
   166bc:	mov	r0, r4
   166c0:	movw	r1, #32376	; 0x7e78
   166c4:	movt	r1, #1
   166c8:	bl	10cec <fprintf@plt>
   166cc:	vmov	s15, r7
   166d0:	mov	r2, r7
   166d4:	mov	r0, r4
   166d8:	vldr	d5, [pc, #80]	; 16730 <__assert_fail@plt+0x593c>
   166dc:	movw	r1, #32400	; 0x7e90
   166e0:	movt	r1, #1
   166e4:	vcvt.f64.u32	d6, s15
   166e8:	vmov	s15, r6
   166ec:	vmul.f64	d6, d6, d5
   166f0:	vcvt.f64.u32	d7, s15
   166f4:	vdiv.f64	d5, d6, d7
   166f8:	vstr	d5, [sp]
   166fc:	bl	10cec <fprintf@plt>
   16700:	mov	r2, r5
   16704:	mov	r0, r4
   16708:	movw	r1, #32436	; 0x7eb4
   1670c:	movt	r1, #1
   16710:	add	sp, sp, #12
   16714:	ldrd	r4, [sp]
   16718:	ldrd	r6, [sp, #8]
   1671c:	ldr	lr, [sp, #16]
   16720:	add	sp, sp, #20
   16724:	b	10cec <fprintf@plt>
   16728:	mov	r5, #0
   1672c:	b	166a8 <__assert_fail@plt+0x58b4>
   16730:	andeq	r0, r0, r0
   16734:	subsmi	r0, r9, r0
   16738:	strd	r4, [sp, #-16]!
   1673c:	mov	r5, r1
   16740:	str	r6, [sp, #8]
   16744:	mov	r6, r0
   16748:	str	lr, [sp, #12]
   1674c:	bl	16124 <__assert_fail@plt+0x5330>
   16750:	ldr	r3, [r0]
   16754:	cmp	r3, #0
   16758:	beq	16794 <__assert_fail@plt+0x59a0>
   1675c:	mov	r4, r0
   16760:	b	16768 <__assert_fail@plt+0x5974>
   16764:	ldr	r3, [r4]
   16768:	cmp	r3, r5
   1676c:	mov	r1, r3
   16770:	mov	r0, r5
   16774:	beq	167ac <__assert_fail@plt+0x59b8>
   16778:	ldr	r3, [r6, #28]
   1677c:	blx	r3
   16780:	cmp	r0, #0
   16784:	bne	167a8 <__assert_fail@plt+0x59b4>
   16788:	ldr	r4, [r4, #4]
   1678c:	cmp	r4, #0
   16790:	bne	16764 <__assert_fail@plt+0x5970>
   16794:	ldrd	r4, [sp]
   16798:	mov	r0, #0
   1679c:	ldr	r6, [sp, #8]
   167a0:	add	sp, sp, #12
   167a4:	pop	{pc}		; (ldr pc, [sp], #4)
   167a8:	ldr	r5, [r4]
   167ac:	mov	r0, r5
   167b0:	ldrd	r4, [sp]
   167b4:	ldr	r6, [sp, #8]
   167b8:	add	sp, sp, #12
   167bc:	pop	{pc}		; (ldr pc, [sp], #4)
   167c0:	ldr	r3, [r0, #16]
   167c4:	cmp	r3, #0
   167c8:	beq	1681c <__assert_fail@plt+0x5a28>
   167cc:	ldr	r3, [r0]
   167d0:	ldr	r2, [r0, #4]
   167d4:	cmp	r3, r2
   167d8:	bcs	16810 <__assert_fail@plt+0x5a1c>
   167dc:	ldr	r0, [r3]
   167e0:	cmp	r0, #0
   167e4:	bxne	lr
   167e8:	sub	r2, r2, #1
   167ec:	sub	r2, r2, r3
   167f0:	bic	r2, r2, #7
   167f4:	add	r2, r3, r2
   167f8:	b	16808 <__assert_fail@plt+0x5a14>
   167fc:	ldr	r0, [r3, #8]!
   16800:	cmp	r0, #0
   16804:	bxne	lr
   16808:	cmp	r3, r2
   1680c:	bne	167fc <__assert_fail@plt+0x5a08>
   16810:	str	r4, [sp, #-8]!
   16814:	str	lr, [sp, #4]
   16818:	bl	10db8 <abort@plt>
   1681c:	mov	r0, r3
   16820:	bx	lr
   16824:	strd	r4, [sp, #-16]!
   16828:	mov	r5, r0
   1682c:	mov	r4, r1
   16830:	str	r6, [sp, #8]
   16834:	str	lr, [sp, #12]
   16838:	bl	16124 <__assert_fail@plt+0x5330>
   1683c:	mov	r2, r0
   16840:	mov	r3, r0
   16844:	b	16850 <__assert_fail@plt+0x5a5c>
   16848:	cmp	r3, #0
   1684c:	beq	16868 <__assert_fail@plt+0x5a74>
   16850:	ldm	r3, {r1, r3}
   16854:	cmp	r1, r4
   16858:	bne	16848 <__assert_fail@plt+0x5a54>
   1685c:	cmp	r3, #0
   16860:	ldrne	r0, [r3]
   16864:	bne	1688c <__assert_fail@plt+0x5a98>
   16868:	ldr	r3, [r5, #4]
   1686c:	b	1687c <__assert_fail@plt+0x5a88>
   16870:	ldr	r0, [r2]
   16874:	cmp	r0, #0
   16878:	bne	1688c <__assert_fail@plt+0x5a98>
   1687c:	add	r2, r2, #8
   16880:	cmp	r3, r2
   16884:	bhi	16870 <__assert_fail@plt+0x5a7c>
   16888:	mov	r0, #0
   1688c:	ldrd	r4, [sp]
   16890:	ldr	r6, [sp, #8]
   16894:	add	sp, sp, #12
   16898:	pop	{pc}		; (ldr pc, [sp], #4)
   1689c:	strd	r4, [sp, #-12]!
   168a0:	ldr	r5, [r0]
   168a4:	str	lr, [sp, #8]
   168a8:	ldr	lr, [r0, #4]
   168ac:	cmp	lr, r5
   168b0:	bls	1693c <__assert_fail@plt+0x5b48>
   168b4:	mov	ip, #0
   168b8:	ldr	r3, [r5]
   168bc:	cmp	r3, #0
   168c0:	bne	168e4 <__assert_fail@plt+0x5af0>
   168c4:	add	r5, r5, #8
   168c8:	cmp	lr, r5
   168cc:	bhi	168b8 <__assert_fail@plt+0x5ac4>
   168d0:	mov	r2, ip
   168d4:	ldrd	r4, [sp]
   168d8:	add	sp, sp, #8
   168dc:	mov	r0, r2
   168e0:	pop	{pc}		; (ldr pc, [sp], #4)
   168e4:	cmp	r2, ip
   168e8:	bls	168d0 <__assert_fail@plt+0x5adc>
   168ec:	str	r3, [r1, ip, lsl #2]
   168f0:	add	r4, ip, #1
   168f4:	add	lr, r1, ip, lsl #2
   168f8:	ldr	r3, [r5, #4]
   168fc:	cmp	r3, #0
   16900:	beq	16930 <__assert_fail@plt+0x5b3c>
   16904:	mov	ip, r4
   16908:	cmp	r2, ip
   1690c:	add	ip, ip, #1
   16910:	beq	168d4 <__assert_fail@plt+0x5ae0>
   16914:	ldr	r4, [r3]
   16918:	str	r4, [lr, #4]!
   1691c:	ldr	r3, [r3, #4]
   16920:	cmp	r3, #0
   16924:	bne	16908 <__assert_fail@plt+0x5b14>
   16928:	ldr	lr, [r0, #4]
   1692c:	b	168c4 <__assert_fail@plt+0x5ad0>
   16930:	mov	ip, r4
   16934:	ldr	lr, [r0, #4]
   16938:	b	168c4 <__assert_fail@plt+0x5ad0>
   1693c:	mov	r2, #0
   16940:	b	168d4 <__assert_fail@plt+0x5ae0>
   16944:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16948:	ldr	r3, [r0, #4]
   1694c:	strd	r6, [sp, #8]
   16950:	strd	r8, [sp, #16]
   16954:	ldr	r8, [r0]
   16958:	str	sl, [sp, #24]
   1695c:	str	lr, [sp, #28]
   16960:	cmp	r3, r8
   16964:	bls	169e0 <__assert_fail@plt+0x5bec>
   16968:	mov	r7, r2
   1696c:	mov	r6, r1
   16970:	mov	r9, r0
   16974:	mov	r5, #0
   16978:	ldr	r0, [r8]
   1697c:	cmp	r0, #0
   16980:	bne	169ac <__assert_fail@plt+0x5bb8>
   16984:	add	r8, r8, #8
   16988:	cmp	r3, r8
   1698c:	bhi	16978 <__assert_fail@plt+0x5b84>
   16990:	mov	r0, r5
   16994:	ldrd	r4, [sp]
   16998:	ldrd	r6, [sp, #8]
   1699c:	ldrd	r8, [sp, #16]
   169a0:	ldr	sl, [sp, #24]
   169a4:	add	sp, sp, #28
   169a8:	pop	{pc}		; (ldr pc, [sp], #4)
   169ac:	mov	r4, r8
   169b0:	b	169b8 <__assert_fail@plt+0x5bc4>
   169b4:	ldr	r0, [r4]
   169b8:	mov	r1, r7
   169bc:	blx	r6
   169c0:	cmp	r0, #0
   169c4:	beq	16990 <__assert_fail@plt+0x5b9c>
   169c8:	ldr	r4, [r4, #4]
   169cc:	add	r5, r5, #1
   169d0:	cmp	r4, #0
   169d4:	bne	169b4 <__assert_fail@plt+0x5bc0>
   169d8:	ldr	r3, [r9, #4]
   169dc:	b	16984 <__assert_fail@plt+0x5b90>
   169e0:	mov	r5, #0
   169e4:	b	16990 <__assert_fail@plt+0x5b9c>
   169e8:	ldrb	r2, [r0]
   169ec:	cmp	r2, #0
   169f0:	beq	16a1c <__assert_fail@plt+0x5c28>
   169f4:	mov	r3, #0
   169f8:	rsb	r3, r3, r3, lsl #5
   169fc:	add	r3, r3, r2
   16a00:	ldrb	r2, [r0, #1]!
   16a04:	udiv	ip, r3, r1
   16a08:	cmp	r2, #0
   16a0c:	mls	r3, r1, ip, r3
   16a10:	bne	169f8 <__assert_fail@plt+0x5c04>
   16a14:	mov	r0, r3
   16a18:	bx	lr
   16a1c:	mov	r3, r2
   16a20:	mov	r0, r3
   16a24:	bx	lr
   16a28:	movw	r3, #32332	; 0x7e4c
   16a2c:	movt	r3, #1
   16a30:	strd	r4, [sp, #-8]!
   16a34:	ldrd	r4, [r3]
   16a38:	ldr	r1, [r3, #16]
   16a3c:	ldrd	r2, [r3, #8]
   16a40:	strd	r4, [r0]
   16a44:	ldrd	r4, [sp]
   16a48:	add	sp, sp, #8
   16a4c:	strd	r2, [r0, #8]
   16a50:	str	r1, [r0, #16]
   16a54:	bx	lr
   16a58:	strd	r4, [sp, #-20]!	; 0xffffffec
   16a5c:	cmp	r2, #0
   16a60:	movw	ip, #24852	; 0x6114
   16a64:	movt	ip, #1
   16a68:	strd	r6, [sp, #8]
   16a6c:	movne	r6, r2
   16a70:	str	lr, [sp, #16]
   16a74:	sub	sp, sp, #12
   16a78:	movw	lr, #24836	; 0x6104
   16a7c:	movt	lr, #1
   16a80:	mov	r7, r1
   16a84:	moveq	r6, lr
   16a88:	cmp	r3, #0
   16a8c:	str	r0, [sp, #4]
   16a90:	mov	r0, #40	; 0x28
   16a94:	movne	r5, r3
   16a98:	moveq	r5, ip
   16a9c:	bl	174f4 <__assert_fail@plt+0x6700>
   16aa0:	subs	r4, r0, #0
   16aa4:	beq	16b3c <__assert_fail@plt+0x5d48>
   16aa8:	cmp	r7, #0
   16aac:	add	r0, r4, #20
   16ab0:	beq	16b54 <__assert_fail@plt+0x5d60>
   16ab4:	str	r7, [r4, #20]
   16ab8:	bl	1628c <__assert_fail@plt+0x5498>
   16abc:	cmp	r0, #0
   16ac0:	beq	16b9c <__assert_fail@plt+0x5da8>
   16ac4:	ldrb	r3, [r7, #16]
   16ac8:	cmp	r3, #0
   16acc:	beq	16bac <__assert_fail@plt+0x5db8>
   16ad0:	ldr	r0, [sp, #4]
   16ad4:	bl	16078 <__assert_fail@plt+0x5284>
   16ad8:	lsrs	r2, r0, #30
   16adc:	movne	r7, #1
   16ae0:	moveq	r7, #0
   16ae4:	tst	r0, #536870912	; 0x20000000
   16ae8:	bne	16b94 <__assert_fail@plt+0x5da0>
   16aec:	cmp	r7, #0
   16af0:	bne	16b94 <__assert_fail@plt+0x5da0>
   16af4:	cmp	r0, #0
   16af8:	str	r0, [r4, #8]
   16afc:	beq	16b9c <__assert_fail@plt+0x5da8>
   16b00:	mov	r1, #8
   16b04:	bl	17480 <__assert_fail@plt+0x668c>
   16b08:	cmp	r0, #0
   16b0c:	str	r0, [r4]
   16b10:	beq	16b9c <__assert_fail@plt+0x5da8>
   16b14:	ldr	r3, [r4, #8]
   16b18:	str	r7, [r4, #12]
   16b1c:	str	r7, [r4, #16]
   16b20:	str	r6, [r4, #24]
   16b24:	str	r5, [r4, #28]
   16b28:	add	r0, r0, r3, lsl #3
   16b2c:	ldr	r3, [sp, #32]
   16b30:	str	r0, [r4, #4]
   16b34:	str	r3, [r4, #32]
   16b38:	str	r7, [r4, #36]	; 0x24
   16b3c:	mov	r0, r4
   16b40:	add	sp, sp, #12
   16b44:	ldrd	r4, [sp]
   16b48:	ldrd	r6, [sp, #8]
   16b4c:	add	sp, sp, #16
   16b50:	pop	{pc}		; (ldr pc, [sp], #4)
   16b54:	movw	r3, #32332	; 0x7e4c
   16b58:	movt	r3, #1
   16b5c:	str	r3, [r4, #20]
   16b60:	bl	1628c <__assert_fail@plt+0x5498>
   16b64:	cmp	r0, #0
   16b68:	beq	16b9c <__assert_fail@plt+0x5da8>
   16b6c:	vldr	s13, [pc, #64]	; 16bb4 <__assert_fail@plt+0x5dc0>
   16b70:	vldr	s15, [sp, #4]
   16b74:	vldr	s14, [pc, #60]	; 16bb8 <__assert_fail@plt+0x5dc4>
   16b78:	vcvt.f32.u32	s12, s15
   16b7c:	vdiv.f32	s15, s12, s13
   16b80:	vcmpe.f32	s15, s14
   16b84:	vmrs	APSR_nzcv, fpscr
   16b88:	vcvtlt.u32.f32	s15, s15
   16b8c:	vstrlt	s15, [sp, #4]
   16b90:	blt	16ad0 <__assert_fail@plt+0x5cdc>
   16b94:	mov	r3, #0
   16b98:	str	r3, [r4, #8]
   16b9c:	mov	r0, r4
   16ba0:	mov	r4, #0
   16ba4:	bl	130dc <__assert_fail@plt+0x22e8>
   16ba8:	b	16b3c <__assert_fail@plt+0x5d48>
   16bac:	vldr	s13, [r7, #8]
   16bb0:	b	16b70 <__assert_fail@plt+0x5d7c>
   16bb4:	svccc	0x004ccccd
   16bb8:	svcmi	0x00800000
   16bbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16bc0:	mov	r5, r0
   16bc4:	ldr	r2, [r0, #4]
   16bc8:	strd	r6, [sp, #8]
   16bcc:	ldr	r6, [r0]
   16bd0:	str	r8, [sp, #16]
   16bd4:	str	lr, [sp, #20]
   16bd8:	cmp	r6, r2
   16bdc:	addcc	r6, r6, #8
   16be0:	movcc	r7, #0
   16be4:	bcc	16bf8 <__assert_fail@plt+0x5e04>
   16be8:	b	16c6c <__assert_fail@plt+0x5e78>
   16bec:	cmp	r2, r6
   16bf0:	add	r6, r6, #8
   16bf4:	bls	16c6c <__assert_fail@plt+0x5e78>
   16bf8:	ldr	r3, [r6, #-8]
   16bfc:	cmp	r3, #0
   16c00:	beq	16bec <__assert_fail@plt+0x5df8>
   16c04:	ldr	r4, [r6, #-4]
   16c08:	ldr	r2, [r5, #32]
   16c0c:	cmp	r4, #0
   16c10:	beq	16c44 <__assert_fail@plt+0x5e50>
   16c14:	cmp	r2, #0
   16c18:	beq	16c28 <__assert_fail@plt+0x5e34>
   16c1c:	ldr	r0, [r4]
   16c20:	blx	r2
   16c24:	ldr	r2, [r5, #32]
   16c28:	ldr	r3, [r4, #4]
   16c2c:	ldr	r1, [r5, #36]	; 0x24
   16c30:	str	r7, [r4]
   16c34:	str	r1, [r4, #4]
   16c38:	str	r4, [r5, #36]	; 0x24
   16c3c:	subs	r4, r3, #0
   16c40:	bne	16c14 <__assert_fail@plt+0x5e20>
   16c44:	cmp	r2, #0
   16c48:	beq	16c54 <__assert_fail@plt+0x5e60>
   16c4c:	ldr	r0, [r6, #-8]
   16c50:	blx	r2
   16c54:	str	r7, [r6, #-8]
   16c58:	str	r7, [r6, #-4]
   16c5c:	ldr	r2, [r5, #4]
   16c60:	cmp	r2, r6
   16c64:	add	r6, r6, #8
   16c68:	bhi	16bf8 <__assert_fail@plt+0x5e04>
   16c6c:	mov	r3, #0
   16c70:	ldrd	r6, [sp, #8]
   16c74:	ldr	r8, [sp, #16]
   16c78:	str	r3, [r5, #12]
   16c7c:	str	r3, [r5, #16]
   16c80:	ldrd	r4, [sp]
   16c84:	add	sp, sp, #20
   16c88:	pop	{pc}		; (ldr pc, [sp], #4)
   16c8c:	strd	r4, [sp, #-16]!
   16c90:	ldr	r2, [r0, #32]
   16c94:	ldr	r5, [r0]
   16c98:	ldr	r3, [r0, #4]
   16c9c:	cmp	r2, #0
   16ca0:	str	r6, [sp, #8]
   16ca4:	mov	r6, r0
   16ca8:	str	lr, [sp, #12]
   16cac:	beq	16d14 <__assert_fail@plt+0x5f20>
   16cb0:	ldr	r2, [r0, #16]
   16cb4:	cmp	r2, #0
   16cb8:	beq	16d14 <__assert_fail@plt+0x5f20>
   16cbc:	cmp	r5, r3
   16cc0:	bcc	16cd4 <__assert_fail@plt+0x5ee0>
   16cc4:	b	16d48 <__assert_fail@plt+0x5f54>
   16cc8:	add	r5, r5, #8
   16ccc:	cmp	r3, r5
   16cd0:	bls	16d10 <__assert_fail@plt+0x5f1c>
   16cd4:	ldr	r0, [r5]
   16cd8:	cmp	r0, #0
   16cdc:	beq	16cc8 <__assert_fail@plt+0x5ed4>
   16ce0:	mov	r4, r5
   16ce4:	b	16cec <__assert_fail@plt+0x5ef8>
   16ce8:	ldr	r0, [r4]
   16cec:	ldr	r3, [r6, #32]
   16cf0:	blx	r3
   16cf4:	ldr	r4, [r4, #4]
   16cf8:	cmp	r4, #0
   16cfc:	bne	16ce8 <__assert_fail@plt+0x5ef4>
   16d00:	ldr	r3, [r6, #4]
   16d04:	add	r5, r5, #8
   16d08:	cmp	r3, r5
   16d0c:	bhi	16cd4 <__assert_fail@plt+0x5ee0>
   16d10:	ldr	r5, [r6]
   16d14:	cmp	r5, r3
   16d18:	bcs	16d48 <__assert_fail@plt+0x5f54>
   16d1c:	ldr	r0, [r5, #4]
   16d20:	cmp	r0, #0
   16d24:	beq	16d3c <__assert_fail@plt+0x5f48>
   16d28:	ldr	r4, [r0, #4]
   16d2c:	bl	130dc <__assert_fail@plt+0x22e8>
   16d30:	subs	r0, r4, #0
   16d34:	bne	16d28 <__assert_fail@plt+0x5f34>
   16d38:	ldr	r3, [r6, #4]
   16d3c:	add	r5, r5, #8
   16d40:	cmp	r3, r5
   16d44:	bhi	16d1c <__assert_fail@plt+0x5f28>
   16d48:	ldr	r0, [r6, #36]	; 0x24
   16d4c:	cmp	r0, #0
   16d50:	beq	16d64 <__assert_fail@plt+0x5f70>
   16d54:	ldr	r4, [r0, #4]
   16d58:	bl	130dc <__assert_fail@plt+0x22e8>
   16d5c:	subs	r0, r4, #0
   16d60:	bne	16d54 <__assert_fail@plt+0x5f60>
   16d64:	ldr	r0, [r6]
   16d68:	bl	130dc <__assert_fail@plt+0x22e8>
   16d6c:	mov	r0, r6
   16d70:	ldrd	r4, [sp]
   16d74:	ldr	r6, [sp, #8]
   16d78:	ldr	lr, [sp, #12]
   16d7c:	add	sp, sp, #16
   16d80:	b	130dc <__assert_fail@plt+0x22e8>
   16d84:	ldr	r3, [r0, #20]
   16d88:	strd	r4, [sp, #-20]!	; 0xffffffec
   16d8c:	ldrb	r2, [r3, #16]
   16d90:	strd	r6, [sp, #8]
   16d94:	mov	r6, r0
   16d98:	str	lr, [sp, #16]
   16d9c:	sub	sp, sp, #52	; 0x34
   16da0:	str	r1, [sp, #4]
   16da4:	cmp	r2, #0
   16da8:	bne	16dd4 <__assert_fail@plt+0x5fe0>
   16dac:	vmov	s15, r1
   16db0:	vldr	s13, [r3, #8]
   16db4:	vldr	s14, [pc, #340]	; 16f10 <__assert_fail@plt+0x611c>
   16db8:	vcvt.f32.u32	s12, s15
   16dbc:	vdiv.f32	s15, s12, s13
   16dc0:	vcmpe.f32	s15, s14
   16dc4:	vmrs	APSR_nzcv, fpscr
   16dc8:	vcvtlt.u32.f32	s15, s15
   16dcc:	vstrlt	s15, [sp, #4]
   16dd0:	bge	16e04 <__assert_fail@plt+0x6010>
   16dd4:	ldr	r0, [sp, #4]
   16dd8:	bl	16078 <__assert_fail@plt+0x5284>
   16ddc:	lsrs	r3, r0, #30
   16de0:	mov	r5, r0
   16de4:	movne	r4, #1
   16de8:	moveq	r4, #0
   16dec:	tst	r0, #536870912	; 0x20000000
   16df0:	movne	r4, #1
   16df4:	cmp	r0, #0
   16df8:	moveq	r4, #1
   16dfc:	cmp	r4, #0
   16e00:	beq	16e20 <__assert_fail@plt+0x602c>
   16e04:	mov	r4, #0
   16e08:	mov	r0, r4
   16e0c:	add	sp, sp, #52	; 0x34
   16e10:	ldrd	r4, [sp]
   16e14:	ldrd	r6, [sp, #8]
   16e18:	add	sp, sp, #16
   16e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e20:	ldr	r3, [r6, #8]
   16e24:	cmp	r3, r0
   16e28:	beq	16ed8 <__assert_fail@plt+0x60e4>
   16e2c:	mov	r1, #8
   16e30:	bl	17480 <__assert_fail@plt+0x668c>
   16e34:	cmp	r0, #0
   16e38:	str	r0, [sp, #8]
   16e3c:	beq	16e04 <__assert_fail@plt+0x6010>
   16e40:	add	r3, r0, r5, lsl #3
   16e44:	ldr	r7, [r6, #20]
   16e48:	mov	r2, r4
   16e4c:	add	r0, sp, #8
   16e50:	mov	r1, r6
   16e54:	ldr	lr, [r6, #28]
   16e58:	str	r3, [sp, #12]
   16e5c:	str	r5, [sp, #16]
   16e60:	ldr	r5, [r6, #24]
   16e64:	str	r4, [sp, #20]
   16e68:	ldr	ip, [r6, #32]
   16e6c:	str	r4, [sp, #24]
   16e70:	ldr	r3, [r6, #36]	; 0x24
   16e74:	str	r7, [sp, #28]
   16e78:	str	r5, [sp, #32]
   16e7c:	str	lr, [sp, #36]	; 0x24
   16e80:	str	ip, [sp, #40]	; 0x28
   16e84:	str	r3, [sp, #44]	; 0x2c
   16e88:	bl	16340 <__assert_fail@plt+0x554c>
   16e8c:	subs	r4, r0, #0
   16e90:	bne	16ee0 <__assert_fail@plt+0x60ec>
   16e94:	ldr	r3, [sp, #44]	; 0x2c
   16e98:	mov	r2, #1
   16e9c:	add	r1, sp, #8
   16ea0:	mov	r0, r6
   16ea4:	str	r3, [r6, #36]	; 0x24
   16ea8:	bl	16340 <__assert_fail@plt+0x554c>
   16eac:	cmp	r0, #0
   16eb0:	beq	16f0c <__assert_fail@plt+0x6118>
   16eb4:	add	r1, sp, #8
   16eb8:	mov	r0, r6
   16ebc:	mov	r2, r4
   16ec0:	bl	16340 <__assert_fail@plt+0x554c>
   16ec4:	cmp	r0, #0
   16ec8:	beq	16f0c <__assert_fail@plt+0x6118>
   16ecc:	ldr	r0, [sp, #8]
   16ed0:	bl	130dc <__assert_fail@plt+0x22e8>
   16ed4:	b	16e08 <__assert_fail@plt+0x6014>
   16ed8:	mov	r4, #1
   16edc:	b	16e08 <__assert_fail@plt+0x6014>
   16ee0:	ldr	r0, [r6]
   16ee4:	bl	130dc <__assert_fail@plt+0x22e8>
   16ee8:	ldrd	r2, [sp, #8]
   16eec:	ldr	r1, [sp, #16]
   16ef0:	strd	r2, [r6]
   16ef4:	ldr	r2, [sp, #20]
   16ef8:	str	r1, [r6, #8]
   16efc:	ldr	r3, [sp, #44]	; 0x2c
   16f00:	str	r2, [r6, #12]
   16f04:	str	r3, [r6, #36]	; 0x24
   16f08:	b	16e08 <__assert_fail@plt+0x6014>
   16f0c:	bl	10db8 <abort@plt>
   16f10:	svcmi	0x00800000
   16f14:	strd	r4, [sp, #-16]!
   16f18:	str	r6, [sp, #8]
   16f1c:	subs	r6, r1, #0
   16f20:	str	lr, [sp, #12]
   16f24:	sub	sp, sp, #8
   16f28:	beq	170a8 <__assert_fail@plt+0x62b4>
   16f2c:	mov	r3, #0
   16f30:	mov	r5, r2
   16f34:	add	r2, sp, #4
   16f38:	mov	r4, r0
   16f3c:	bl	16164 <__assert_fail@plt+0x5370>
   16f40:	subs	r3, r0, #0
   16f44:	beq	16f70 <__assert_fail@plt+0x617c>
   16f48:	cmp	r5, #0
   16f4c:	moveq	r0, r5
   16f50:	beq	16f5c <__assert_fail@plt+0x6168>
   16f54:	mov	r0, #0
   16f58:	str	r3, [r5]
   16f5c:	add	sp, sp, #8
   16f60:	ldrd	r4, [sp]
   16f64:	ldr	r6, [sp, #8]
   16f68:	add	sp, sp, #12
   16f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f70:	vldr	s15, [r4, #8]
   16f74:	vldr	s14, [r4, #12]
   16f78:	ldr	r3, [r4, #20]
   16f7c:	vcvt.f32.u32	s15, s15
   16f80:	vcvt.f32.u32	s14, s14
   16f84:	vldr	s13, [r3, #8]
   16f88:	vmul.f32	s15, s15, s13
   16f8c:	vcmpe.f32	s14, s15
   16f90:	vmrs	APSR_nzcv, fpscr
   16f94:	bgt	16fdc <__assert_fail@plt+0x61e8>
   16f98:	ldr	r2, [sp, #4]
   16f9c:	ldr	r3, [r2]
   16fa0:	cmp	r3, #0
   16fa4:	beq	17038 <__assert_fail@plt+0x6244>
   16fa8:	ldr	r3, [r4, #36]	; 0x24
   16fac:	cmp	r3, #0
   16fb0:	beq	1705c <__assert_fail@plt+0x6268>
   16fb4:	ldr	r1, [r3, #4]
   16fb8:	str	r1, [r4, #36]	; 0x24
   16fbc:	ldr	r1, [r4, #16]
   16fc0:	mov	r0, #1
   16fc4:	ldr	ip, [r2, #4]
   16fc8:	add	r1, r1, r0
   16fcc:	stm	r3, {r6, ip}
   16fd0:	str	r3, [r2, #4]
   16fd4:	str	r1, [r4, #16]
   16fd8:	b	16f5c <__assert_fail@plt+0x6168>
   16fdc:	add	r0, r4, #20
   16fe0:	bl	1628c <__assert_fail@plt+0x5498>
   16fe4:	vldr	s15, [r4, #8]
   16fe8:	vldr	s14, [r4, #12]
   16fec:	ldr	r3, [r4, #20]
   16ff0:	vcvt.f32.u32	s15, s15
   16ff4:	vcvt.f32.u32	s14, s14
   16ff8:	vldr	s13, [r3, #8]
   16ffc:	vmul.f32	s12, s13, s15
   17000:	vcmpe.f32	s14, s12
   17004:	vmrs	APSR_nzcv, fpscr
   17008:	ble	16f98 <__assert_fail@plt+0x61a4>
   1700c:	vldr	s14, [r3, #12]
   17010:	ldrb	r2, [r3, #16]
   17014:	vmul.f32	s15, s15, s14
   17018:	vldr	s14, [pc, #140]	; 170ac <__assert_fail@plt+0x62b8>
   1701c:	cmp	r2, #0
   17020:	vmuleq.f32	s15, s15, s13
   17024:	vcmpe.f32	s15, s14
   17028:	vmrs	APSR_nzcv, fpscr
   1702c:	blt	17074 <__assert_fail@plt+0x6280>
   17030:	mvn	r0, #0
   17034:	b	16f5c <__assert_fail@plt+0x6168>
   17038:	ldr	r1, [r4, #12]
   1703c:	mov	r0, #1
   17040:	ldr	r3, [r4, #16]
   17044:	str	r6, [r2]
   17048:	add	r2, r1, r0
   1704c:	add	r3, r3, r0
   17050:	str	r2, [r4, #12]
   17054:	str	r3, [r4, #16]
   17058:	b	16f5c <__assert_fail@plt+0x6168>
   1705c:	mov	r0, #8
   17060:	bl	174f4 <__assert_fail@plt+0x6700>
   17064:	subs	r3, r0, #0
   17068:	beq	17030 <__assert_fail@plt+0x623c>
   1706c:	ldr	r2, [sp, #4]
   17070:	b	16fbc <__assert_fail@plt+0x61c8>
   17074:	vcvt.u32.f32	s15, s15
   17078:	mov	r0, r4
   1707c:	vmov	r1, s15
   17080:	bl	16d84 <__assert_fail@plt+0x5f90>
   17084:	cmp	r0, #0
   17088:	beq	17030 <__assert_fail@plt+0x623c>
   1708c:	add	r2, sp, #4
   17090:	mov	r3, #0
   17094:	mov	r1, r6
   17098:	mov	r0, r4
   1709c:	bl	16164 <__assert_fail@plt+0x5370>
   170a0:	cmp	r0, #0
   170a4:	beq	16f98 <__assert_fail@plt+0x61a4>
   170a8:	bl	10db8 <abort@plt>
   170ac:	svcmi	0x00800000
   170b0:	str	r4, [sp, #-8]!
   170b4:	mov	r4, r1
   170b8:	str	lr, [sp, #4]
   170bc:	sub	sp, sp, #8
   170c0:	add	r2, sp, #4
   170c4:	bl	16f14 <__assert_fail@plt+0x6120>
   170c8:	cmn	r0, #1
   170cc:	moveq	r0, #0
   170d0:	beq	170e0 <__assert_fail@plt+0x62ec>
   170d4:	cmp	r0, #0
   170d8:	ldreq	r0, [sp, #4]
   170dc:	movne	r0, r4
   170e0:	add	sp, sp, #8
   170e4:	ldr	r4, [sp]
   170e8:	add	sp, sp, #4
   170ec:	pop	{pc}		; (ldr pc, [sp], #4)
   170f0:	strd	r4, [sp, #-16]!
   170f4:	mov	r3, #1
   170f8:	mov	r4, r0
   170fc:	str	r6, [sp, #8]
   17100:	str	lr, [sp, #12]
   17104:	sub	sp, sp, #8
   17108:	add	r2, sp, #4
   1710c:	bl	16164 <__assert_fail@plt+0x5370>
   17110:	subs	r5, r0, #0
   17114:	beq	17134 <__assert_fail@plt+0x6340>
   17118:	ldr	r2, [sp, #4]
   1711c:	ldr	r3, [r4, #16]
   17120:	ldr	r2, [r2]
   17124:	sub	r3, r3, #1
   17128:	str	r3, [r4, #16]
   1712c:	cmp	r2, #0
   17130:	beq	1714c <__assert_fail@plt+0x6358>
   17134:	mov	r0, r5
   17138:	add	sp, sp, #8
   1713c:	ldrd	r4, [sp]
   17140:	ldr	r6, [sp, #8]
   17144:	add	sp, sp, #12
   17148:	pop	{pc}		; (ldr pc, [sp], #4)
   1714c:	vldr	s15, [r4, #8]
   17150:	ldr	r3, [r4, #12]
   17154:	ldr	r2, [r4, #20]
   17158:	vcvt.f32.u32	s15, s15
   1715c:	sub	r3, r3, #1
   17160:	vmov	s14, r3
   17164:	vldr	s13, [r2]
   17168:	str	r3, [r4, #12]
   1716c:	vmul.f32	s15, s15, s13
   17170:	vcvt.f32.u32	s14, s14
   17174:	vcmpe.f32	s14, s15
   17178:	vmrs	APSR_nzcv, fpscr
   1717c:	bpl	17134 <__assert_fail@plt+0x6340>
   17180:	add	r0, r4, #20
   17184:	bl	1628c <__assert_fail@plt+0x5498>
   17188:	vldr	s15, [r4, #8]
   1718c:	vldr	s13, [r4, #12]
   17190:	ldr	r3, [r4, #20]
   17194:	vcvt.f32.u32	s15, s15
   17198:	vcvt.f32.u32	s13, s13
   1719c:	vldr	s14, [r3]
   171a0:	vmul.f32	s14, s15, s14
   171a4:	vcmpe.f32	s13, s14
   171a8:	vmrs	APSR_nzcv, fpscr
   171ac:	bpl	17134 <__assert_fail@plt+0x6340>
   171b0:	ldrb	r2, [r3, #16]
   171b4:	mov	r0, r4
   171b8:	vldr	s14, [r3, #4]
   171bc:	cmp	r2, #0
   171c0:	vmul.f32	s15, s15, s14
   171c4:	vldreq	s14, [r3, #8]
   171c8:	vmuleq.f32	s15, s15, s14
   171cc:	vcvt.u32.f32	s15, s15
   171d0:	vmov	r1, s15
   171d4:	bl	16d84 <__assert_fail@plt+0x5f90>
   171d8:	cmp	r0, #0
   171dc:	bne	17134 <__assert_fail@plt+0x6340>
   171e0:	ldr	r0, [r4, #36]	; 0x24
   171e4:	cmp	r0, #0
   171e8:	beq	171fc <__assert_fail@plt+0x6408>
   171ec:	ldr	r6, [r0, #4]
   171f0:	bl	130dc <__assert_fail@plt+0x22e8>
   171f4:	subs	r0, r6, #0
   171f8:	bne	171ec <__assert_fail@plt+0x63f8>
   171fc:	mov	r3, #0
   17200:	str	r3, [r4, #36]	; 0x24
   17204:	b	17134 <__assert_fail@plt+0x6340>
   17208:	b	170f0 <__assert_fail@plt+0x62fc>
   1720c:	mov	r3, #0
   17210:	mov	r2, #1
   17214:	str	r1, [r0]
   17218:	str	r1, [r0, #4]
   1721c:	str	r1, [r0, #8]
   17220:	str	r1, [r0, #12]
   17224:	str	r1, [r0, #16]
   17228:	str	r3, [r0, #20]
   1722c:	str	r3, [r0, #24]
   17230:	strb	r2, [r0, #28]
   17234:	bx	lr
   17238:	ldrb	r0, [r0, #28]
   1723c:	bx	lr
   17240:	ldrb	ip, [r0, #28]
   17244:	mov	r2, r0
   17248:	ldr	r3, [r0, #20]
   1724c:	eor	ip, ip, #1
   17250:	add	r3, ip, r3
   17254:	and	r3, r3, #3
   17258:	ldr	r0, [r0, r3, lsl #2]
   1725c:	str	r1, [r2, r3, lsl #2]
   17260:	ldr	r1, [r2, #24]
   17264:	str	r3, [r2, #20]
   17268:	cmp	r1, r3
   1726c:	bne	1727c <__assert_fail@plt+0x6488>
   17270:	add	ip, ip, r1
   17274:	and	ip, ip, #3
   17278:	str	ip, [r2, #24]
   1727c:	mov	r3, #0
   17280:	strb	r3, [r2, #28]
   17284:	bx	lr
   17288:	ldrb	r3, [r0, #28]
   1728c:	cmp	r3, #0
   17290:	bne	172cc <__assert_fail@plt+0x64d8>
   17294:	ldr	r1, [r0, #16]
   17298:	ldr	r3, [r0, #20]
   1729c:	ldr	r2, [r0, r3, lsl #2]
   172a0:	str	r1, [r0, r3, lsl #2]
   172a4:	ldr	r1, [r0, #24]
   172a8:	cmp	r3, r1
   172ac:	moveq	r3, #1
   172b0:	strbeq	r3, [r0, #28]
   172b4:	beq	172c4 <__assert_fail@plt+0x64d0>
   172b8:	add	r3, r3, #3
   172bc:	and	r3, r3, #3
   172c0:	str	r3, [r0, #20]
   172c4:	mov	r0, r2
   172c8:	bx	lr
   172cc:	str	r4, [sp, #-8]!
   172d0:	str	lr, [sp, #4]
   172d4:	bl	10db8 <abort@plt>
   172d8:	mov	r3, #0
   172dc:	strd	r4, [sp, #-16]!
   172e0:	mov	r4, r0
   172e4:	mov	r5, r1
   172e8:	str	r6, [sp, #8]
   172ec:	add	r6, r2, #20
   172f0:	str	lr, [sp, #12]
   172f4:	strb	r3, [r2, #20]
   172f8:	mov	r0, r4
   172fc:	mov	r1, r5
   17300:	mov	r2, #10
   17304:	mov	r3, #0
   17308:	bl	179b0 <__assert_fail@plt+0x6bbc>
   1730c:	add	ip, r2, #48	; 0x30
   17310:	mov	r0, r4
   17314:	mov	r1, r5
   17318:	mov	r2, #10
   1731c:	mov	r3, #0
   17320:	strb	ip, [r6, #-1]!
   17324:	bl	179b0 <__assert_fail@plt+0x6bbc>
   17328:	cmp	r5, #0
   1732c:	mov	r5, r1
   17330:	cmpeq	r4, #9
   17334:	mov	r4, r0
   17338:	bhi	172f8 <__assert_fail@plt+0x6504>
   1733c:	mov	r0, r6
   17340:	ldrd	r4, [sp]
   17344:	ldr	r6, [sp, #8]
   17348:	add	sp, sp, #12
   1734c:	pop	{pc}		; (ldr pc, [sp], #4)
   17350:	push	{r1, r2, r3}
   17354:	push	{lr}		; (str lr, [sp, #-4]!)
   17358:	sub	sp, sp, #8
   1735c:	ldr	r1, [sp, #12]
   17360:	add	r3, sp, #16
   17364:	ldr	r2, [sp, #16]
   17368:	str	r3, [sp, #4]
   1736c:	bl	10c5c <ioctl@plt>
   17370:	add	sp, sp, #8
   17374:	pop	{lr}		; (ldr lr, [sp], #4)
   17378:	add	sp, sp, #12
   1737c:	bx	lr
   17380:	push	{r2, r3}
   17384:	push	{lr}		; (str lr, [sp, #-4]!)
   17388:	sub	sp, sp, #12
   1738c:	ldr	r2, [sp, #16]
   17390:	ands	r3, r2, #64	; 0x40
   17394:	bne	173b0 <__assert_fail@plt+0x65bc>
   17398:	bl	10ce0 <openat64@plt>
   1739c:	bl	17424 <__assert_fail@plt+0x6630>
   173a0:	add	sp, sp, #12
   173a4:	pop	{lr}		; (ldr lr, [sp], #4)
   173a8:	add	sp, sp, #8
   173ac:	bx	lr
   173b0:	add	ip, sp, #20
   173b4:	ldr	r3, [sp, #20]
   173b8:	str	ip, [sp, #4]
   173bc:	b	17398 <__assert_fail@plt+0x65a4>
   173c0:	orr	r2, r2, #540672	; 0x84000
   173c4:	strd	r4, [sp, #-16]!
   173c8:	orr	r2, r2, #2304	; 0x900
   173cc:	str	r6, [sp, #8]
   173d0:	mov	r6, r3
   173d4:	str	lr, [sp, #12]
   173d8:	bl	17380 <__assert_fail@plt+0x658c>
   173dc:	subs	r5, r0, #0
   173e0:	movlt	r4, #0
   173e4:	blt	173f8 <__assert_fail@plt+0x6604>
   173e8:	bl	10d4c <fdopendir@plt>
   173ec:	subs	r4, r0, #0
   173f0:	beq	1740c <__assert_fail@plt+0x6618>
   173f4:	str	r5, [r6]
   173f8:	mov	r0, r4
   173fc:	ldrd	r4, [sp]
   17400:	ldr	r6, [sp, #8]
   17404:	add	sp, sp, #12
   17408:	pop	{pc}		; (ldr pc, [sp], #4)
   1740c:	bl	10cf8 <__errno_location@plt>
   17410:	mov	r6, r0
   17414:	mov	r0, r5
   17418:	ldr	r5, [r6]
   1741c:	bl	10dc4 <close@plt>
   17420:	b	173f4 <__assert_fail@plt+0x6600>
   17424:	cmp	r0, #2
   17428:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1742c:	mov	r4, r0
   17430:	strd	r6, [sp, #8]
   17434:	str	r8, [sp, #16]
   17438:	str	lr, [sp, #20]
   1743c:	bls	17458 <__assert_fail@plt+0x6664>
   17440:	mov	r0, r4
   17444:	ldrd	r4, [sp]
   17448:	ldrd	r6, [sp, #8]
   1744c:	ldr	r8, [sp, #16]
   17450:	add	sp, sp, #20
   17454:	pop	{pc}		; (ldr pc, [sp], #4)
   17458:	bl	178d0 <__assert_fail@plt+0x6adc>
   1745c:	mov	r7, r0
   17460:	bl	10cf8 <__errno_location@plt>
   17464:	mov	r5, r0
   17468:	mov	r0, r4
   1746c:	ldr	r6, [r5]
   17470:	mov	r4, r7
   17474:	bl	10dc4 <close@plt>
   17478:	str	r6, [r5]
   1747c:	b	17440 <__assert_fail@plt+0x664c>
   17480:	cmp	r1, #0
   17484:	cmpne	r0, #0
   17488:	beq	174d4 <__assert_fail@plt+0x66e0>
   1748c:	strd	r4, [sp, #-16]!
   17490:	umull	r4, r5, r0, r1
   17494:	str	r6, [sp, #8]
   17498:	str	lr, [sp, #12]
   1749c:	adds	r3, r5, #0
   174a0:	movne	r3, #1
   174a4:	cmp	r4, #0
   174a8:	blt	174b4 <__assert_fail@plt+0x66c0>
   174ac:	cmp	r3, #0
   174b0:	beq	174e0 <__assert_fail@plt+0x66ec>
   174b4:	bl	10cf8 <__errno_location@plt>
   174b8:	mov	r3, #12
   174bc:	ldrd	r4, [sp]
   174c0:	ldr	r6, [sp, #8]
   174c4:	add	sp, sp, #12
   174c8:	str	r3, [r0]
   174cc:	mov	r0, #0
   174d0:	pop	{pc}		; (ldr pc, [sp], #4)
   174d4:	mov	r1, #1
   174d8:	mov	r0, r1
   174dc:	b	10b84 <calloc@plt>
   174e0:	ldrd	r4, [sp]
   174e4:	ldr	r6, [sp, #8]
   174e8:	ldr	lr, [sp, #12]
   174ec:	add	sp, sp, #16
   174f0:	b	10b84 <calloc@plt>
   174f4:	cmp	r0, #0
   174f8:	beq	17504 <__assert_fail@plt+0x6710>
   174fc:	blt	1750c <__assert_fail@plt+0x6718>
   17500:	b	10c8c <malloc@plt>
   17504:	mov	r0, #1
   17508:	b	10c8c <malloc@plt>
   1750c:	str	r4, [sp, #-8]!
   17510:	str	lr, [sp, #4]
   17514:	bl	10cf8 <__errno_location@plt>
   17518:	mov	r3, #12
   1751c:	ldr	r4, [sp]
   17520:	add	sp, sp, #4
   17524:	str	r3, [r0]
   17528:	mov	r0, #0
   1752c:	pop	{pc}		; (ldr pc, [sp], #4)
   17530:	cmp	r0, #0
   17534:	beq	1755c <__assert_fail@plt+0x6768>
   17538:	cmp	r1, #0
   1753c:	str	r4, [sp, #-8]!
   17540:	str	lr, [sp, #4]
   17544:	beq	17564 <__assert_fail@plt+0x6770>
   17548:	blt	17578 <__assert_fail@plt+0x6784>
   1754c:	ldr	r4, [sp]
   17550:	ldr	lr, [sp, #4]
   17554:	add	sp, sp, #8
   17558:	b	10c14 <realloc@plt>
   1755c:	mov	r0, r1
   17560:	b	174f4 <__assert_fail@plt+0x6700>
   17564:	bl	130dc <__assert_fail@plt+0x22e8>
   17568:	ldr	r4, [sp]
   1756c:	add	sp, sp, #4
   17570:	mov	r0, #0
   17574:	pop	{pc}		; (ldr pc, [sp], #4)
   17578:	bl	10cf8 <__errno_location@plt>
   1757c:	mov	r3, #12
   17580:	str	r3, [r0]
   17584:	b	17568 <__assert_fail@plt+0x6774>
   17588:	movw	r3, #62998	; 0xf616
   1758c:	movt	r3, #149	; 0x95
   17590:	strd	r4, [sp, #-8]!
   17594:	mov	r4, #0
   17598:	mov	r5, #0
   1759c:	strd	r4, [r0, #16]
   175a0:	str	r3, [r0, #24]
   175a4:	ldrd	r4, [sp]
   175a8:	add	sp, sp, #8
   175ac:	bx	lr
   175b0:	ldr	r2, [r0, #24]
   175b4:	movw	r3, #62998	; 0xf616
   175b8:	movt	r3, #149	; 0x95
   175bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   175c0:	strd	r6, [sp, #8]
   175c4:	strd	r8, [sp, #16]
   175c8:	strd	sl, [sp, #24]
   175cc:	cmp	r2, r3
   175d0:	str	lr, [sp, #32]
   175d4:	sub	sp, sp, #4
   175d8:	bne	17688 <__assert_fail@plt+0x6894>
   175dc:	ldrd	r6, [r0, #16]
   175e0:	ldrd	sl, [r1, #96]	; 0x60
   175e4:	orrs	r3, r6, r7
   175e8:	beq	1763c <__assert_fail@plt+0x6848>
   175ec:	ldrd	r2, [r0]
   175f0:	cmp	r3, fp
   175f4:	cmpeq	r2, sl
   175f8:	beq	1765c <__assert_fail@plt+0x6868>
   175fc:	adds	r8, r6, #1
   17600:	adc	r9, r7, #0
   17604:	and	r2, r6, r8
   17608:	and	r3, r7, r9
   1760c:	orrs	r3, r2, r3
   17610:	strd	r8, [r0, #16]
   17614:	movne	r1, #0
   17618:	beq	17678 <__assert_fail@plt+0x6884>
   1761c:	mov	r0, r1
   17620:	add	sp, sp, #4
   17624:	ldrd	r4, [sp]
   17628:	ldrd	r6, [sp, #8]
   1762c:	ldrd	r8, [sp, #16]
   17630:	ldrd	sl, [sp, #24]
   17634:	add	sp, sp, #32
   17638:	pop	{pc}		; (ldr pc, [sp], #4)
   1763c:	mov	r2, #1
   17640:	mov	r3, #0
   17644:	strd	r2, [r0, #16]
   17648:	ldrd	r2, [r1]
   1764c:	mov	r1, #0
   17650:	strd	sl, [r0]
   17654:	strd	r2, [r0, #8]
   17658:	b	1761c <__assert_fail@plt+0x6828>
   1765c:	ldrd	r4, [r1]
   17660:	ldrd	r2, [r0, #8]
   17664:	cmp	r5, r3
   17668:	cmpeq	r4, r2
   1766c:	bne	175fc <__assert_fail@plt+0x6808>
   17670:	mov	r1, #1
   17674:	b	1761c <__assert_fail@plt+0x6828>
   17678:	orrs	r3, r8, r9
   1767c:	bne	17648 <__assert_fail@plt+0x6854>
   17680:	mov	r1, #1
   17684:	b	1761c <__assert_fail@plt+0x6828>
   17688:	movw	r3, #32460	; 0x7ecc
   1768c:	movt	r3, #1
   17690:	movw	r1, #32472	; 0x7ed8
   17694:	movt	r1, #1
   17698:	movw	r0, #32488	; 0x7ee8
   1769c:	movt	r0, #1
   176a0:	mov	r2, #60	; 0x3c
   176a4:	bl	10df4 <__assert_fail@plt>
   176a8:	push	{r1, r2, r3}
   176ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   176b0:	strd	r6, [sp, #8]
   176b4:	str	lr, [sp, #16]
   176b8:	sub	sp, sp, #8
   176bc:	ldr	r1, [sp, #28]
   176c0:	add	r2, sp, #32
   176c4:	str	r2, [sp, #4]
   176c8:	cmp	r1, #0
   176cc:	beq	177a8 <__assert_fail@plt+0x69b4>
   176d0:	movw	r3, #1030	; 0x406
   176d4:	mov	r6, r0
   176d8:	cmp	r1, r3
   176dc:	beq	177b8 <__assert_fail@plt+0x69c4>
   176e0:	cmp	r1, #11
   176e4:	beq	17760 <__assert_fail@plt+0x696c>
   176e8:	ble	17740 <__assert_fail@plt+0x694c>
   176ec:	movw	r2, #1031	; 0x407
   176f0:	cmp	r1, r2
   176f4:	bgt	1777c <__assert_fail@plt+0x6988>
   176f8:	cmp	r1, r3
   176fc:	bge	1770c <__assert_fail@plt+0x6918>
   17700:	movw	r3, #1025	; 0x401
   17704:	cmp	r1, r3
   17708:	beq	17760 <__assert_fail@plt+0x696c>
   1770c:	ldr	r3, [sp, #4]
   17710:	mov	r0, r6
   17714:	ldr	r2, [r3]
   17718:	bl	10d1c <fcntl64@plt>
   1771c:	mov	r4, r0
   17720:	mov	r0, r4
   17724:	add	sp, sp, #8
   17728:	ldrd	r4, [sp]
   1772c:	ldrd	r6, [sp, #8]
   17730:	ldr	lr, [sp, #16]
   17734:	add	sp, sp, #20
   17738:	add	sp, sp, #12
   1773c:	bx	lr
   17740:	cmp	r1, #4
   17744:	beq	1770c <__assert_fail@plt+0x6918>
   17748:	bgt	17770 <__assert_fail@plt+0x697c>
   1774c:	cmp	r1, #2
   17750:	beq	1770c <__assert_fail@plt+0x6918>
   17754:	bgt	17760 <__assert_fail@plt+0x696c>
   17758:	cmp	r1, #1
   1775c:	bne	1770c <__assert_fail@plt+0x6918>
   17760:	mov	r0, r6
   17764:	bl	10d1c <fcntl64@plt>
   17768:	mov	r4, r0
   1776c:	b	17720 <__assert_fail@plt+0x692c>
   17770:	cmp	r1, #9
   17774:	bne	1770c <__assert_fail@plt+0x6918>
   17778:	b	17760 <__assert_fail@plt+0x696c>
   1777c:	movw	r3, #1033	; 0x409
   17780:	cmp	r1, r3
   17784:	beq	1770c <__assert_fail@plt+0x6918>
   17788:	blt	17760 <__assert_fail@plt+0x696c>
   1778c:	movw	r3, #1034	; 0x40a
   17790:	cmp	r1, r3
   17794:	bne	1770c <__assert_fail@plt+0x6918>
   17798:	mov	r0, r6
   1779c:	bl	10d1c <fcntl64@plt>
   177a0:	mov	r4, r0
   177a4:	b	17720 <__assert_fail@plt+0x692c>
   177a8:	ldr	r2, [sp, #32]
   177ac:	bl	10d1c <fcntl64@plt>
   177b0:	mov	r4, r0
   177b4:	b	17720 <__assert_fail@plt+0x692c>
   177b8:	movw	r5, #33108	; 0x8154
   177bc:	movt	r5, #2
   177c0:	ldr	r7, [r2]
   177c4:	add	r2, sp, #36	; 0x24
   177c8:	ldr	r3, [r5]
   177cc:	str	r2, [sp, #4]
   177d0:	mov	r2, r7
   177d4:	cmp	r3, #0
   177d8:	blt	177f4 <__assert_fail@plt+0x6a00>
   177dc:	bl	10d1c <fcntl64@plt>
   177e0:	subs	r4, r0, #0
   177e4:	blt	1785c <__assert_fail@plt+0x6a68>
   177e8:	mov	r3, #1
   177ec:	str	r3, [r5]
   177f0:	b	17720 <__assert_fail@plt+0x692c>
   177f4:	mov	r1, #0
   177f8:	bl	10d1c <fcntl64@plt>
   177fc:	subs	r4, r0, #0
   17800:	blt	17720 <__assert_fail@plt+0x692c>
   17804:	ldr	r3, [r5]
   17808:	cmn	r3, #1
   1780c:	bne	17720 <__assert_fail@plt+0x692c>
   17810:	mov	r1, #1
   17814:	mov	r0, r4
   17818:	bl	10d1c <fcntl64@plt>
   1781c:	subs	r2, r0, #0
   17820:	blt	1783c <__assert_fail@plt+0x6a48>
   17824:	orr	r2, r2, #1
   17828:	mov	r1, #2
   1782c:	mov	r0, r4
   17830:	bl	10d1c <fcntl64@plt>
   17834:	cmn	r0, #1
   17838:	bne	17720 <__assert_fail@plt+0x692c>
   1783c:	bl	10cf8 <__errno_location@plt>
   17840:	mov	r5, r0
   17844:	mov	r0, r4
   17848:	ldr	r6, [r5]
   1784c:	mvn	r4, #0
   17850:	bl	10dc4 <close@plt>
   17854:	str	r6, [r5]
   17858:	b	17720 <__assert_fail@plt+0x692c>
   1785c:	bl	10cf8 <__errno_location@plt>
   17860:	ldr	r3, [r0]
   17864:	cmp	r3, #22
   17868:	bne	177e8 <__assert_fail@plt+0x69f4>
   1786c:	mov	r2, r7
   17870:	mov	r0, r6
   17874:	mov	r1, #0
   17878:	bl	10d1c <fcntl64@plt>
   1787c:	subs	r4, r0, #0
   17880:	mvnge	r3, #0
   17884:	strge	r3, [r5]
   17888:	bge	17810 <__assert_fail@plt+0x6a1c>
   1788c:	b	17720 <__assert_fail@plt+0x692c>
   17890:	push	{r1, r2, r3}
   17894:	push	{lr}		; (str lr, [sp, #-4]!)
   17898:	sub	sp, sp, #8
   1789c:	ldr	r1, [sp, #12]
   178a0:	ands	r2, r1, #64	; 0x40
   178a4:	bne	178c0 <__assert_fail@plt+0x6acc>
   178a8:	bl	10c74 <open64@plt>
   178ac:	bl	17424 <__assert_fail@plt+0x6630>
   178b0:	add	sp, sp, #8
   178b4:	pop	{lr}		; (ldr lr, [sp], #4)
   178b8:	add	sp, sp, #12
   178bc:	bx	lr
   178c0:	add	r3, sp, #16
   178c4:	ldr	r2, [sp, #16]
   178c8:	str	r3, [sp, #4]
   178cc:	b	178a8 <__assert_fail@plt+0x6ab4>
   178d0:	mov	r2, #3
   178d4:	mov	r1, #0
   178d8:	b	176a8 <__assert_fail@plt+0x68b4>
   178dc:	cmp	r3, #0
   178e0:	cmpeq	r2, #0
   178e4:	bne	17908 <__assert_fail@plt+0x6b14>
   178e8:	cmp	r1, #0
   178ec:	movlt	r1, #-2147483648	; 0x80000000
   178f0:	movlt	r0, #0
   178f4:	blt	17904 <__assert_fail@plt+0x6b10>
   178f8:	cmpeq	r0, #0
   178fc:	mvnne	r1, #-2147483648	; 0x80000000
   17900:	mvnne	r0, #0
   17904:	b	179ec <__assert_fail@plt+0x6bf8>
   17908:	sub	sp, sp, #8
   1790c:	push	{sp, lr}
   17910:	cmp	r1, #0
   17914:	blt	17934 <__assert_fail@plt+0x6b40>
   17918:	cmp	r3, #0
   1791c:	blt	17968 <__assert_fail@plt+0x6b74>
   17920:	bl	179fc <__assert_fail@plt+0x6c08>
   17924:	ldr	lr, [sp, #4]
   17928:	add	sp, sp, #8
   1792c:	pop	{r2, r3}
   17930:	bx	lr
   17934:	rsbs	r0, r0, #0
   17938:	sbc	r1, r1, r1, lsl #1
   1793c:	cmp	r3, #0
   17940:	blt	1798c <__assert_fail@plt+0x6b98>
   17944:	bl	179fc <__assert_fail@plt+0x6c08>
   17948:	ldr	lr, [sp, #4]
   1794c:	add	sp, sp, #8
   17950:	pop	{r2, r3}
   17954:	rsbs	r0, r0, #0
   17958:	sbc	r1, r1, r1, lsl #1
   1795c:	rsbs	r2, r2, #0
   17960:	sbc	r3, r3, r3, lsl #1
   17964:	bx	lr
   17968:	rsbs	r2, r2, #0
   1796c:	sbc	r3, r3, r3, lsl #1
   17970:	bl	179fc <__assert_fail@plt+0x6c08>
   17974:	ldr	lr, [sp, #4]
   17978:	add	sp, sp, #8
   1797c:	pop	{r2, r3}
   17980:	rsbs	r0, r0, #0
   17984:	sbc	r1, r1, r1, lsl #1
   17988:	bx	lr
   1798c:	rsbs	r2, r2, #0
   17990:	sbc	r3, r3, r3, lsl #1
   17994:	bl	179fc <__assert_fail@plt+0x6c08>
   17998:	ldr	lr, [sp, #4]
   1799c:	add	sp, sp, #8
   179a0:	pop	{r2, r3}
   179a4:	rsbs	r2, r2, #0
   179a8:	sbc	r3, r3, r3, lsl #1
   179ac:	bx	lr
   179b0:	cmp	r3, #0
   179b4:	cmpeq	r2, #0
   179b8:	bne	179d0 <__assert_fail@plt+0x6bdc>
   179bc:	cmp	r1, #0
   179c0:	cmpeq	r0, #0
   179c4:	mvnne	r1, #0
   179c8:	mvnne	r0, #0
   179cc:	b	179ec <__assert_fail@plt+0x6bf8>
   179d0:	sub	sp, sp, #8
   179d4:	push	{sp, lr}
   179d8:	bl	179fc <__assert_fail@plt+0x6c08>
   179dc:	ldr	lr, [sp, #4]
   179e0:	add	sp, sp, #8
   179e4:	pop	{r2, r3}
   179e8:	bx	lr
   179ec:	push	{r1, lr}
   179f0:	mov	r0, #8
   179f4:	bl	10b90 <raise@plt>
   179f8:	pop	{r1, pc}
   179fc:	cmp	r1, r3
   17a00:	cmpeq	r0, r2
   17a04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a08:	mov	r4, r0
   17a0c:	movcc	r0, #0
   17a10:	mov	r5, r1
   17a14:	ldr	lr, [sp, #36]	; 0x24
   17a18:	movcc	r1, r0
   17a1c:	bcc	17b18 <__assert_fail@plt+0x6d24>
   17a20:	cmp	r3, #0
   17a24:	clzeq	ip, r2
   17a28:	clzne	ip, r3
   17a2c:	addeq	ip, ip, #32
   17a30:	cmp	r5, #0
   17a34:	clzeq	r1, r4
   17a38:	addeq	r1, r1, #32
   17a3c:	clzne	r1, r5
   17a40:	sub	ip, ip, r1
   17a44:	sub	sl, ip, #32
   17a48:	lsl	r9, r3, ip
   17a4c:	rsb	fp, ip, #32
   17a50:	orr	r9, r9, r2, lsl sl
   17a54:	orr	r9, r9, r2, lsr fp
   17a58:	lsl	r8, r2, ip
   17a5c:	cmp	r5, r9
   17a60:	cmpeq	r4, r8
   17a64:	movcc	r0, #0
   17a68:	movcc	r1, r0
   17a6c:	bcc	17a88 <__assert_fail@plt+0x6c94>
   17a70:	mov	r0, #1
   17a74:	subs	r4, r4, r8
   17a78:	lsl	r1, r0, sl
   17a7c:	orr	r1, r1, r0, lsr fp
   17a80:	lsl	r0, r0, ip
   17a84:	sbc	r5, r5, r9
   17a88:	cmp	ip, #0
   17a8c:	beq	17b18 <__assert_fail@plt+0x6d24>
   17a90:	lsr	r6, r8, #1
   17a94:	orr	r6, r6, r9, lsl #31
   17a98:	lsr	r7, r9, #1
   17a9c:	mov	r2, ip
   17aa0:	b	17ac4 <__assert_fail@plt+0x6cd0>
   17aa4:	subs	r3, r4, r6
   17aa8:	sbc	r8, r5, r7
   17aac:	adds	r3, r3, r3
   17ab0:	adc	r8, r8, r8
   17ab4:	adds	r4, r3, #1
   17ab8:	adc	r5, r8, #0
   17abc:	subs	r2, r2, #1
   17ac0:	beq	17ae0 <__assert_fail@plt+0x6cec>
   17ac4:	cmp	r5, r7
   17ac8:	cmpeq	r4, r6
   17acc:	bcs	17aa4 <__assert_fail@plt+0x6cb0>
   17ad0:	adds	r4, r4, r4
   17ad4:	adc	r5, r5, r5
   17ad8:	subs	r2, r2, #1
   17adc:	bne	17ac4 <__assert_fail@plt+0x6cd0>
   17ae0:	lsr	r3, r4, ip
   17ae4:	orr	r3, r3, r5, lsl fp
   17ae8:	lsr	r2, r5, ip
   17aec:	orr	r3, r3, r5, lsr sl
   17af0:	adds	r0, r0, r4
   17af4:	mov	r4, r3
   17af8:	lsl	r3, r2, ip
   17afc:	orr	r3, r3, r4, lsl sl
   17b00:	lsl	ip, r4, ip
   17b04:	orr	r3, r3, r4, lsr fp
   17b08:	adc	r1, r1, r5
   17b0c:	subs	r0, r0, ip
   17b10:	mov	r5, r2
   17b14:	sbc	r1, r1, r3
   17b18:	cmp	lr, #0
   17b1c:	strdne	r4, [lr]
   17b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17b28:	mov	r7, r0
   17b2c:	ldr	r6, [pc, #72]	; 17b7c <__assert_fail@plt+0x6d88>
   17b30:	ldr	r5, [pc, #72]	; 17b80 <__assert_fail@plt+0x6d8c>
   17b34:	add	r6, pc, r6
   17b38:	add	r5, pc, r5
   17b3c:	sub	r6, r6, r5
   17b40:	mov	r8, r1
   17b44:	mov	r9, r2
   17b48:	bl	10b58 <fstatfs64@plt-0x20>
   17b4c:	asrs	r6, r6, #2
   17b50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b54:	mov	r4, #0
   17b58:	add	r4, r4, #1
   17b5c:	ldr	r3, [r5], #4
   17b60:	mov	r2, r9
   17b64:	mov	r1, r8
   17b68:	mov	r0, r7
   17b6c:	blx	r3
   17b70:	cmp	r6, r4
   17b74:	bne	17b58 <__assert_fail@plt+0x6d64>
   17b78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b7c:	ldrdeq	r0, [r1], -r8
   17b80:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   17b84:	bx	lr

Disassembly of section .fini:

00017b88 <.fini>:
   17b88:	push	{r3, lr}
   17b8c:	pop	{r3, pc}
